<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>19390725</id><snippet>listOfPlayers.sort(key=lambda (name, pos, cost, pts): float(cost)/pts, reverse=True)
</snippet></ROW><ROW><id>19390725</id><snippet>results = {}
for name, pos, cost, pts in listOfPlayers:
    if pos in results:
        #position already filled
        continue 
    results[pos] = (name, pos, cost, pts)
</snippet></ROW><ROW><id>19390725</id><snippet>needed_positions = set(["PG", "SG", "SF", "C"])
results = {}
for name, pos, cost, pts in listOfPlayers:
    if not needed_positions:
        #all spots filled
        break
    if pos in results:
        #this position already filled
        continue 
    results[pos] = (name, pos, cost, pts)
    needed_positions.remove(pos)
</snippet></ROW><ROW><id>19391264</id><snippet>np.std</snippet></ROW><ROW><id>19391264</id><snippet>np.var</snippet></ROW><ROW><id>19391264</id><snippet>statistics</snippet></ROW><ROW><id>19391264</id><snippet>In [329]: a = np.random.rand(1000)

In [330]: %%timeit
   .....: a.mean()
   .....: a.var()
   .....: 
10000 loops, best of 3: 80.6 µs per loop

In [331]: %%timeit
   .....: m = a.mean()
   .....: np.mean((a-m)**2)
   .....: 
10000 loops, best of 3: 60.9 µs per loop

In [332]: m = a.mean()

In [333]: a.var()
Out[333]: 0.078365856465916137

In [334]: np.mean((a-m)**2)
Out[334]: 0.078365856465916137
</snippet></ROW><ROW><id>19391264</id><snippet>np.dot</snippet></ROW><ROW><id>19391264</id><snippet>In [335]: np.dot(a-m,a-m)/a.size
Out[335]: 0.078365856465916137

In [336]: %%timeit
   .....: m = a.mean()
   .....: c = a-m
   .....: np.dot(c,c)/a.size
   .....: 
10000 loops, best of 3: 38.2 µs per loop
</snippet></ROW><ROW><id>19391366</id><snippet>smtp.ehlo('XXX')</snippet></ROW><ROW><id>19391366</id><snippet>.connect()</snippet></ROW><ROW><id>19391366</id><snippet>EHLO</snippet></ROW><ROW><id>19391366</id><snippet>HELO</snippet></ROW><ROW><id>19391386</id><snippet>#! /usr/bin/python2.7

print 'Please enter one alias per line. Leave blank when finished.'
aliases = [alias for alias in iter (raw_input, '') ]
print (aliases)
</snippet></ROW><ROW><id>19391394</id><snippet>s</snippet></ROW><ROW><id>19391394</id><snippet>list</snippet></ROW><ROW><id>19391394</id><snippet>while(len(cars) &gt; 0):
    car = cars.pop() 
</snippet></ROW><ROW><id>19391394</id><snippet>s</snippet></ROW><ROW><id>19391394</id><snippet>while(len(dealership) &gt; 0):
    car = dealership.pop()
</snippet></ROW><ROW><id>19391456</id><snippet> driver.switch_to_frame("framename")
</snippet></ROW><ROW><id>19391679</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19391679</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; l = [240,200,160,4,0,0,0,0,4,4,4,0,0,0,1,1,1,1]
&gt;&gt;&gt; [list(g) for k,g in groupby(l, lambda x: x != 0) if k]
[[240, 200, 160, 4], [4, 4, 4], [1, 1, 1, 1]]
</snippet></ROW><ROW><id>19391679</id><snippet>bool(0)</snippet></ROW><ROW><id>19391679</id><snippet>False</snippet></ROW><ROW><id>19391679</id><snippet>bool(any other integer)</snippet></ROW><ROW><id>19391679</id><snippet>True</snippet></ROW><ROW><id>19391679</id><snippet>&gt;&gt;&gt; [list(g) for k,g in groupby(l, bool) if k]
[[240, 200, 160, 4], [4, 4, 4], [1, 1, 1, 1]]
</snippet></ROW><ROW><id>19391796</id><snippet>df[mask]</snippet></ROW><ROW><id>19391796</id><snippet>mask = (df['column 0'].shift(1) + df['column 3'].shift(2) &gt;= 6)
newdf = df[mask]
</snippet></ROW><ROW><id>19391796</id><snippet>&amp;</snippet></ROW><ROW><id>19391796</id><snippet>mask = ((...) &amp; (...))
</snippet></ROW><ROW><id>19391796</id><snippet>|</snippet></ROW><ROW><id>19391796</id><snippet>mask = ((...) | (...))
</snippet></ROW><ROW><id>19391796</id><snippet>In [75]: df = pd.DataFrame({'A':range(5), 'B':range(10,20,2)})

In [76]: df
Out[76]: 
   A   B
0  0  10
1  1  12
2  2  14
3  3  16
4  4  18

In [77]: mask = (df['A'].shift(1) + df['B'].shift(2) &gt; 12)

In [78]: mask
Out[78]: 
0    False
1    False
2    False
3     True
4     True
dtype: bool

In [79]: df[mask]
Out[79]: 
   A   B
3  3  16
4  4  18
</snippet></ROW><ROW><id>19391867</id><snippet>Foo</snippet></ROW><ROW><id>19391867</id><snippet>Foo</snippet></ROW><ROW><id>19391867</id><snippet>Foo</snippet></ROW><ROW><id>19391867</id><snippet>gc.is_tracked()</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; import gc
&gt;&gt;&gt; gc.is_tracked(4)
False
&gt;&gt;&gt; gc.is_tracked("2323")
False
</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; t1 = ([1],)
&gt;&gt;&gt; t2 = ((1.),)
&gt;&gt;&gt; gc.is_tracked(t1), gc.is_tracked(t2)
(True, True)
</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; gc.collect()
0
&gt;&gt;&gt; gc.is_tracked(t1), gc.is_tracked(t2)
(True, False)
</snippet></ROW><ROW><id>19391867</id><snippet>t2</snippet></ROW><ROW><id>19391867</id><snippet>t1</snippet></ROW><ROW><id>19391867</id><snippet>t1[0]</snippet></ROW><ROW><id>19391867</id><snippet>t1</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; t1
([1],)
&gt;&gt;&gt; t1[0][0] = t1
&gt;&gt;&gt; t1
([([...],)],)
</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; d = {1: [2]}
&gt;&gt;&gt; gc.is_tracked(d)
True
</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; d[1][0] = d
&gt;&gt;&gt; d
{1: [{...}]}
</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; d = {1: 2}
&gt;&gt;&gt; gc.is_tracked(d)
False
</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; d[2] = d
&gt;&gt;&gt; gc.is_tracked(d)
True
</snippet></ROW><ROW><id>19391867</id><snippet>&gt;&gt;&gt; d = {(1, 2): (4, "abc", 5)}
&gt;&gt;&gt; gc.is_tracked(d)
True
&gt;&gt;&gt; gc.collect()
3
&gt;&gt;&gt; gc.is_tracked(d)
False
</snippet></ROW><ROW><id>19391867</id><snippet>d</snippet></ROW><ROW><id>19391867</id><snippet>malloc()</snippet></ROW><ROW><id>19391884</id><snippet>.points</snippet></ROW><ROW><id>19391884</id><snippet>.simplices</snippet></ROW><ROW><id>19391886</id><snippet>with open('file.txt','r') as f_open:
    data = f_open.read()

print data
</snippet></ROW><ROW><id>19391886</id><snippet>f_open = open('file.txt','r')
data = f_open.read()
f_open.close()

print data
</snippet></ROW><ROW><id>19391886</id><snippet>python script.py
</snippet></ROW><ROW><id>19391886</id><snippet>python script.py text.txt
</snippet></ROW><ROW><id>19391886</id><snippet>import csv
with open('file.csv', 'rb') as open_csv:
    csv_reader = csv.reader(open_csv)

print csv_reader
</snippet></ROW><ROW><id>19391950</id><snippet>    Dict_list = [{'nokey':'someval'},{'_cn6ca':'Twanna', '_chk2m': "twanna@xyz"},{'_cn6ca':'Jeanell', '_chk2m': "jeanell@xyz"}]

    #print 'Please enter one alias per line. Leave blank when finished.'
    #user_alias = [alias for alias in iter (raw_input, '') ]
    user_alias = ['PaulDu', 'Jeanell', 'Twanna', 'JaneyD', 'Charlot','Janessa']
    print user_alias
    for user in user_alias:
        for row in Dict_list:    
            if user in row.values():
                print row

    for user in user_alias:
        for row in Dict_list:
            if row.has_key('_cn6ca') and row.has_key('_chk2m'):
                if user == row['_cn6ca']:
                    email = row['_chk2m']
                    print email
</snippet></ROW><ROW><id>19391950</id><snippet>    ['PaulDu', 'Jeanell', 'Twanna', 'JaneyD', 'Charlot', 'Janessa']
    {'_cn6ca': 'Jeanell', '_chk2m': 'jeanell@xyz'}
    {'_cn6ca': 'Twanna', '_chk2m': 'twanna@xyz'}
    jeanell@xyz
    twanna@xyz
</snippet></ROW><ROW><id>19392386</id><snippet>__metaclass__</snippet></ROW><ROW><id>19392386</id><snippet>__new__</snippet></ROW><ROW><id>19392386</id><snippet>_sentinel = Ellipsis
class MyClass(object):
    def __new__(cls, name):
        if name is _sentinel:
            return object.__new__(cls)
        else:
            instance = type(name + cls.__name__, (MyClass,), {})(_sentinel)
            # Initialization goes here.
            return instance

print type(MyClass('name1'))
print type(MyClass('name2'))
</snippet></ROW><ROW><id>19392386</id><snippet>__new__</snippet></ROW><ROW><id>19392386</id><snippet>__new__</snippet></ROW><ROW><id>19392386</id><snippet>__init__</snippet></ROW><ROW><id>19392386</id><snippet>class MyClass(object):
    pass

def class_factory(name):
    new_cls = type(name + MyClass.__name__, (MyClass,), {})
    return new_cls() # Or pass whatever you want in here...

print type(class_factory('name1'))
print type(class_factory('name2'))
</snippet></ROW><ROW><id>19392386</id><snippet>__new__</snippet></ROW><ROW><id>19392386</id><snippet>class MyClass(object):
    @classmethod
    def class_factory(cls, name):
        new_cls = type(name + cls.__name__, (cls,), {})
        return new_cls() # Or pass whatever you want in here...

print type(MyClass.class_factory('name1'))
print type(MyClass.class_factory('name2'))
</snippet></ROW><ROW><id>19392563</id><snippet>value</snippet></ROW><ROW><id>19392563</id><snippet>option['value']
</snippet></ROW><ROW><id>19392563</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''\
... &lt;select&gt;
...   &lt;option value="0"&gt;2002/12&lt;/option&gt;
...   &lt;option value="1"&gt;2003/12&lt;/option&gt;
...   &lt;option value="2"&gt;2004/12&lt;/option&gt;
...   &lt;option value="3"&gt;2005/12&lt;/option&gt;
...   &lt;option value="4"&gt;2006/12&lt;/option&gt;
...   &lt;option value="5" selected&gt;2007/12&lt;/option&gt;
... &lt;/select&gt;
... ''')
&gt;&gt;&gt; for option in soup.find_all('option'):
...     print 'value: {}, text: {}'.format(option['value'], option.text)
... 
value: 0, text: 2002/12
value: 1, text: 2003/12
value: 2, text: 2004/12
value: 3, text: 2005/12
value: 4, text: 2006/12
value: 5, text: 2007/12
</snippet></ROW><ROW><id>19392620</id><snippet>itemData</snippet></ROW><ROW><id>19392620</id><snippet>ItemData</snippet></ROW><ROW><id>19392620</id><snippet>__slots__</snippet></ROW><ROW><id>19392620</id><snippet>__slots__</snippet></ROW><ROW><id>19392620</id><snippet>__slots__</snippet></ROW><ROW><id>19392620</id><snippet>__slots__</snippet></ROW><ROW><id>19392620</id><snippet>__slots__</snippet></ROW><ROW><id>19392620</id><snippet>AttributeError</snippet></ROW><ROW><id>19392620</id><snippet>__slots__</snippet></ROW><ROW><id>19392620</id><snippet>Packet</snippet></ROW><ROW><id>19392620</id><snippet>object</snippet></ROW><ROW><id>19392620</id><snippet>class Packet(object):</snippet></ROW><ROW><id>19392620</id><snippet>class Packet()</snippet></ROW><ROW><id>19392620</id><snippet>AttributeError</snippet></ROW><ROW><id>19392620</id><snippet>ItemData</snippet></ROW><ROW><id>19392726</id><snippet>if</snippet></ROW><ROW><id>19392726</id><snippet>if vo in vat and vq in vat[vo]:
</snippet></ROW><ROW><id>19392726</id><snippet>vat</snippet></ROW><ROW><id>19392726</id><snippet>defaultdict</snippet></ROW><ROW><id>19392726</id><snippet>z</snippet></ROW><ROW><id>19392726</id><snippet>elif</snippet></ROW><ROW><id>19392726</id><snippet>"Não Existe Caminho"</snippet></ROW><ROW><id>19392886</id><snippet>svn status | grep ^?
</snippet></ROW><ROW><id>19392886</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>19392886</id><snippet>setuptools.find_packages()</snippet></ROW><ROW><id>19392886</id><snippet>exclude=</snippet></ROW><ROW><id>19392886</id><snippet>exclude=</snippet></ROW><ROW><id>19392928</id><snippet>def parse(s):
    d = {}
    lastkey = None
    for fullline in s:
        line = fullline.strip()
        if not line:
            pass
        elif ':' not in line:
            indent = len(fullline) - len(fullline.lstrip())
            if lastindent is None:
                lastindent = indent
            if lastindent == indent:
                lastval.append(line)
        else:
            if lastkey:
                d[lastkey] = lastval
                lastkey = None
            if line.endswith(':'):
                lastkey, lastval, lastindent = key, [], None
            else:
                key, _, value = line.partition(':')
                d[key] = value.strip()
    if lastkey:
        d[lastkey] = lastval
        lastkey = None
    return d

import pprint
pprint(parse(string.splitlines()))
</snippet></ROW><ROW><id>19392928</id><snippet>{'apples': '20',
 'oranges': '30',
 'ripe': ['elmer fudd', 'farmer ted', 'farmer bill'],
 'selling': ['carrots', 'potatoes']}
</snippet></ROW><ROW><id>19392997</id><snippet>&gt;&gt;&gt; list_of_numbers = [10, 20, 30, 40]
&gt;&gt;&gt; number = 20
&gt;&gt;&gt; number in list_of_numbers
True
</snippet></ROW><ROW><id>19392997</id><snippet>index</snippet></ROW><ROW><id>19392997</id><snippet>&gt;&gt;&gt; list_of_numbers.index(number)
1
&gt;&gt;&gt; list_of_numbers[1]
20
</snippet></ROW><ROW><id>19392997</id><snippet>&gt;&gt;&gt; list_of_numbers = [10, 20, 30, 10, 20, 30]
&gt;&gt;&gt; [index for index, element in list_of_numbers if element == number]
1, 5
</snippet></ROW><ROW><id>19392997</id><snippet>&gt;&gt;&gt; other_list = [1, 10, 100, 1000]
&gt;&gt;&gt; set(other_list).intersection(list_of_numbers)
{10}
</snippet></ROW><ROW><id>19392997</id><snippet>&gt;&gt;&gt; other_list = [1, 10, 100, 1000]
&gt;&gt;&gt; len(set(other_list).intersection(list_of_numbers))
1
</snippet></ROW><ROW><id>19393039</id><snippet>"urls": [
    {
        "has_sig": false, 
        "upload_time": "2010-10-12T08:40:01", 
        "comment_text": "", 
        "python_version": "source", 
        "url": "https://pypi.python.org/packages/source/i/ipython/ipython-0.10.1.tar.gz", 
        "md5_digest": "54ae47079b0e9a0998593a99ce76ec1f", 
        "downloads": 20100, 
        "filename": "ipython-0.10.1.tar.gz", 
        "packagetype": "sdist", 
        "size": 5837840
    }, 
    {
        "has_sig": false, 
        "upload_time": "2010-10-12T08:40:38", 
        "comment_text": "", 
        "python_version": "source", 
        "url": "https://pypi.python.org/packages/source/i/ipython/ipython-0.10.1.zip", 
        "md5_digest": "f636c7ea03ff626a6ef9bd9a901de691", 
        "downloads": 29725, 
        "filename": "ipython-0.10.1.zip", 
        "packagetype": "sdist", 
        "size": 6419900
    }
]
</snippet></ROW><ROW><id>19393039</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19393039</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datestr = "2010-10-12T08:40:01"
&gt;&gt;&gt; datetime.datetime.strptime(datestr, '%Y-%m-%dT%H:%M:%S')
datetime.datetime(2010, 10, 12, 8, 40, 1)
</snippet></ROW><ROW><id>19393039</id><snippet>&gt;&gt;&gt; datestr = "12-Oct-2010 06:40"
&gt;&gt;&gt; datetime.datetime.strptime(datestr, '%m-%b-%Y %H:%M')
datetime.datetime(2010, 12, 1, 6, 40)
</snippet></ROW><ROW><id>19393039</id><snippet>%b</snippet></ROW><ROW><id>19393039</id><snippet>python-dateutil</snippet></ROW><ROW><id>19393039</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse(datestr)
datetime.datetime(2010, 10, 12, 6, 40)
</snippet></ROW><ROW><id>19393104</id><snippet>def</snippet></ROW><ROW><id>19393104</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>19393368</id><snippet>value_counts</snippet></ROW><ROW><id>19393368</id><snippet>clean</snippet></ROW><ROW><id>19393368</id><snippet>clean[column_name].value_counts()
</snippet></ROW><ROW><id>19393368</id><snippet>value_counts</snippet></ROW><ROW><id>19393368</id><snippet>pd.value_counts(df.values.flatten())
</snippet></ROW><ROW><id>19393621</id><snippet>http://www.pythonforbeginners.com/python-on-the-web/web-scraping-with-beautifulsoup/</snippet></ROW><ROW><id>19393621</id><snippet>soup.find_all("td", limit=3)</snippet></ROW><ROW><id>19393647</id><snippet>def matrix_test(square):
    for row in square:
        if len(row) != len(square):
             return False
</snippet></ROW><ROW><id>19393647</id><snippet>    return True
</snippet></ROW><ROW><id>19393647</id><snippet>if matrix_test(matrix001):
    #run the next test
</snippet></ROW><ROW><id>19393649</id><snippet>def is_numeric(s):
    remove whitespace before and after the string
    split on the first '.'
    if and only if all of the split-out parts are all digits, return True
</snippet></ROW><ROW><id>19393649</id><snippet>strip</snippet></ROW><ROW><id>19393649</id><snippet>split</snippet></ROW><ROW><id>19393649</id><snippet>all</snippet></ROW><ROW><id>19393649</id><snippet>isdigit</snippet></ROW><ROW><id>19393649</id><snippet>parts = s.split(',')
if not all(is_numeric(part) for part in parts):
    result = []
else:
    result = [float(part) for part in parts]
</snippet></ROW><ROW><id>19393649</id><snippet>parts = s.split(',')
result = []
for part in parts:
    if not is_numeric(part):
        result = []
        break
    else:
        result.append(float(part))
</snippet></ROW><ROW><id>19393649</id><snippet>def is_numeric(s):
    s = s.strip()
    parts = s.split('.', 1)
    return all(part.isdigit() for part in parts)

def parse_input(line):
    parts = line.split(',')
    if not all(is_numeric(part) for part in parts):
        return []
    else:
        return [float(part) for part in parts]

while True:
    line = input("You will provide numbers. Provide! Provide! ")
    if not line:
        break
    values = parse_input(line)
    print("Reporting provided numbers:", values)
</snippet></ROW><ROW><id>19393649</id><snippet>You will provide numbers. Provide! Provide! 1,2,3,4,5.6,7
Reporting provided numbers: [1.0, 2.0, 3.0, 4.0, 5.6, 7.0]
You will provide numbers. Provide! Provide! 1,2,3,4.4.3,a
Reporting provided numbers: []
You will provide numbers. Provide! Provide! 1, 2, 3, 4
Reporting provided numbers: [1.0, 2.0, 3.0, 4.0]
You will provide numbers. Provide! Provide! 1.2, 3.4.5
Reporting provided numbers: []
You will provide numbers. Provide! Provide!
</snippet></ROW><ROW><id>19393649</id><snippet>print</snippet></ROW><ROW><id>19393649</id><snippet>is_numeric</snippet></ROW><ROW><id>19393649</id><snippet>print(s)</snippet></ROW><ROW><id>19393649</id><snippet>.split('.', 1)</snippet></ROW><ROW><id>19393649</id><snippet>'1.2.3'.split('.', 1), '1.2'.split('.', 1), '1'.split('.', 1)</snippet></ROW><ROW><id>19393683</id><snippet>adict = {1: {'process':False, 'length':10}, 2: {'process':True, 'length':34}, 3:{'process': False, 'length': -3}}

def somefiltering(filterDict, *criteria):
    return [key for key in filterDict if all(criterion(filterDict[key]) for criterion in criteria)]
</snippet></ROW><ROW><id>19393683</id><snippet>somefiltering</snippet></ROW><ROW><id>19393683</id><snippet>somefiltering(adict, lambda d:d['process'], lambda d:d['length']&gt;5)
# Result: [2]

somefiltering(adict, lambda d:d['length'] &lt; 20)
# Result: [1, 3]

somefiltering(adict, lambda d:d['process'], lambda d:d['length']&lt;5)
# Result: []
</snippet></ROW><ROW><id>19393704</id><snippet>for year in os.listdir('.'):
    for month in os.listdir(year):
        for day in os.listdir(os.path.join(year, month)):
            date = datetime.date(int(year), int(month), int(day))
</snippet></ROW><ROW><id>19393704</id><snippet>date</snippet></ROW><ROW><id>19393704</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>19393704</id><snippet>today = datetime.date.today()
for year in os.listdir('.'):
    for month in os.listdir(year):
        for day in os.listdir(os.path.join(year, month):
            date = datetime.date(int(year), int(month), int(day))
            age = today - date
            if age &gt; datetime.timedelta(days=20):
                shutil.rmtree(os.path.join(year, month, day))
</snippet></ROW><ROW><id>19393929</id><snippet>with open(TEXT, 'rt') as f:
    dictionary = set(f.read().split())
</snippet></ROW><ROW><id>19393956</id><snippet>strptime</snippet></ROW><ROW><id>19393956</id><snippet>strftime</snippet></ROW><ROW><id>19393956</id><snippet>strptime</snippet></ROW><ROW><id>19393956</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19393956</id><snippet>datetime.datetime.date</snippet></ROW><ROW><id>19393956</id><snippet>newtime = datetime.datetime.strptime(timevar, "%H:%M")
newtime -= datetime.timedelta(hours=5)
</snippet></ROW><ROW><id>19393967</id><snippet>cursor.execute(sql, [number], [film])
</snippet></ROW><ROW><id>19393967</id><snippet>cursor.execute(sql, [number, film])
</snippet></ROW><ROW><id>19394002</id><snippet>True</snippet></ROW><ROW><id>19394002</id><snippet>False</snippet></ROW><ROW><id>19394002</id><snippet>True</snippet></ROW><ROW><id>19394002</id><snippet>False</snippet></ROW><ROW><id>19394002</id><snippet>",. "</snippet></ROW><ROW><id>19394002</id><snippet>[",", ".", " "]</snippet></ROW><ROW><id>19394002</id><snippet>def is_numeric(s):

    for char in s:
        if not char.isdigit() and char not in [" ", ".", ","]:
            return False

    return True
</snippet></ROW><ROW><id>19394002</id><snippet>[" ", ".", ","]</snippet></ROW><ROW><id>19394002</id><snippet>False</snippet></ROW><ROW><id>19394002</id><snippet>True</snippet></ROW><ROW><id>19394002</id><snippet>True</snippet></ROW><ROW><id>19394002</id><snippet>False</snippet></ROW><ROW><id>19394002</id><snippet>True</snippet></ROW><ROW><id>19394002</id><snippet>def is_numeric(s):
    is_digit = True

    for char in s:
        if not char.isdigit() and char not in [" ", ".", ","]:
            is_digit = False
            break

    return is_digit
</snippet></ROW><ROW><id>19394169</id><snippet>Location</snippet></ROW><ROW><id>19394169</id><snippet>location, created = Location.objects.get_or_create(pk=pk)
if created:
   num_of_new_locs+=1 #number of new locations increased
else:
   location.url= loc_fields['url']
   location.locationname = loc_fields['locationname']
   location.desc = loc_fields['desc']
   location.str_hnr = loc_fields['str_hnr']
   location.save()
</snippet></ROW><ROW><id>19394191</id><snippet>https://www.google.com/#q=Kerbal Space Program</snippet></ROW><ROW><id>19394191</id><snippet>https://www.google.com/?q=Kerbal Space Program</snippet></ROW><ROW><id>19394255</id><snippet>webbrowser</snippet></ROW><ROW><id>19394255</id><snippet>web</snippet></ROW><ROW><id>19394255</id><snippet>file://</snippet></ROW><ROW><id>19394255</id><snippet>import webbrowser
</snippet></ROW><ROW><id>19394255</id><snippet>webbrowser.open ('file:///home/nobody') #your path here
</snippet></ROW><ROW><id>19394305</id><snippet>HBVout</snippet></ROW><ROW><id>19394305</id><snippet>datetime</snippet></ROW><ROW><id>19394305</id><snippet>csv.DictReader</snippet></ROW><ROW><id>19394305</id><snippet>import csv

with open('Results.csv', 'rb') as inf, open('SSF1.txt', 'wb') as outf:
    site_id = inf.next().rstrip()  # read past site id on first line
    HBVout = csv.DictReader(inf, skipinitialspace=True)  # will read header line
    ssf = csv.writer(outf, delimiter='\t')

    for data in HBVout:
        date = data['Date']  # convert date from YYYYMMDD to MM/DD/YYYY 
        date = '/'.join((date[4:6], date[6:8], date[0:4]))
        ssf.writerow([site_id, date, '00:00:00', data['Qsim']])
</snippet></ROW><ROW><id>19394305</id><snippet>134\t01/01/1980\t00:00:00\t34\n
134\t01/02/1980\t00:00:00\t30\n
134\t01/03/1980\t00:00:00\t28\n
134\t01/04/1980\t00:00:00\t38\n
</snippet></ROW><ROW><id>19394309</id><snippet>any()</snippet></ROW><ROW><id>19394309</id><snippet>if any((foo, bar, baz)):
    do_something(foo, bar, baz)
else:
    raise SomeException
</snippet></ROW><ROW><id>19394597</id><snippet>set_xlabel()</snippet></ROW><ROW><id>19394597</id><snippet>def enterEvent(self, evt):
    # defer labeling the axes until an 'enterEvent'. then set
    # the x label
    r = int(10 * random.random())
    self.axes.set_xlabel(str(r))
    self.canvas.draw()
</snippet></ROW><ROW><id>19394663</id><snippet>import numpy as np

image = np.arange(25).reshape(5, 5)
gx = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])
gy = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
gm = np.ones((3, 3))/9
rows, cols = image.shape
k_rows, k_cols = gx.shape

from numpy.lib.stride_tricks import as_strided
image_view = as_strided(image, shape=(rows - k_rows + 1, cols - k_cols + 1,
                                      k_rows, k_cols),
                        strides=image.strides*2)
dx = np.einsum('ijkl,kl-&gt;ij',image_view, gx)
dy = np.einsum('ijkl,kl-&gt;ij',image_view, gy)
dm = np.einsum('ijkl,kl-&gt;ij',image_view, gm)

&gt;&gt;&gt; dx
array([[-8, -8, -8],
       [-8, -8, -8],
       [-8, -8, -8]])
&gt;&gt;&gt; dy
array([[-40, -40, -40],
       [-40, -40, -40],
       [-40, -40, -40]])
&gt;&gt;&gt; dm
array([[  6.,   7.,   8.],
       [ 11.,  12.,  13.],
       [ 16.,  17.,  18.]])
</snippet></ROW><ROW><id>19394700</id><snippet>win.mainloop()</snippet></ROW><ROW><id>19394700</id><snippet>button.pack()</snippet></ROW><ROW><id>19394700</id><snippet>command</snippet></ROW><ROW><id>19394700</id><snippet>action()</snippet></ROW><ROW><id>19394700</id><snippet>Exception in Tkinter callback
Traceback (most recent call last):
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk/Tkinter.py", line 1470, in __call__
    return self.func(*args)
  File "tkt.py", line 8, in &lt;lambda&gt;
    button = Tk.Button(master=frame, text='press', command= lambda: action())
TypeError: action() takes exactly 1 argument (0 given)
</snippet></ROW><ROW><id>19394700</id><snippet>self</snippet></ROW><ROW><id>19394700</id><snippet>action</snippet></ROW><ROW><id>19394700</id><snippet>lambda</snippet></ROW><ROW><id>19394700</id><snippet>lambda: action()</snippet></ROW><ROW><id>19394700</id><snippet>action</snippet></ROW><ROW><id>19394700</id><snippet>import webbrowser
import Tkinter as Tk

def action():
    webbrowser.open(r'C:\AgmPlots')

win = Tk.Toplevel()
frame = Tk.Frame(master=win).grid(row=1, column=1)
button = Tk.Button(master=frame, text='press', command=action)
button.pack()

win.mainloop()
</snippet></ROW><ROW><id>19394813</id><snippet>os.path.join</snippet></ROW><ROW><id>19394813</id><snippet>path = ["folder1", "folder2"]
for i in path:
    for filename in os.listdir(i):
        with open(os.path.join(i, filename), 'r') as filedata:
            string = "".join(filedata.read().split())
</snippet></ROW><ROW><id>19395046</id><snippet>attributes = ['pandas', 'tunas', 'cows']
choice = random.choice(attributes)
setattr(z, choice, getattr(z, choice) + 1)
</snippet></ROW><ROW><id>19395093</id><snippet>&gt;&gt;&gt; s = [1, 2, 1, 4, 5, 2, 3, 2, 4, 5, 3, 1, 4, 2]
&gt;&gt;&gt; [x for x in random.choice([p for c in itertools.combinations(s, 3) for p in itertools.permutations(c) if len(set(c)) == 3])]
[3, 1, 2]
&gt;&gt;&gt; [x for x in random.choice([p for c in itertools.combinations(s, 3) for p in itertools.permutations(c) if len(set(c)) == 3])]
[5, 3, 4]
&gt;&gt;&gt; [x for x in random.choice([p for c in itertools.combinations(s, 3) for p in itertools.permutations(c) if len(set(c)) == 3])]
[1, 5, 2]
</snippet></ROW><ROW><id>19395093</id><snippet>&gt;&gt;&gt; [x for x in random.choice([p for p in itertools.permutations(s, 3) if len(set(p)) == 3])]
[3, 5, 2]
</snippet></ROW><ROW><id>19395093</id><snippet>x for x</snippet></ROW><ROW><id>19395093</id><snippet>list(random.choice(..))</snippet></ROW><ROW><id>19395096</id><snippet>user_key</snippet></ROW><ROW><id>19395096</id><snippet>User</snippet></ROW><ROW><id>19395096</id><snippet>username</snippet></ROW><ROW><id>19395096</id><snippet>def get_user_by_user_key(user_key):
    # your logic code here, e.g.
    username = get_username()
    return username
</snippet></ROW><ROW><id>19395096</id><snippet>environment.filters['get_name_by_key'] = get_user_by_user_key
</snippet></ROW><ROW><id>19395096</id><snippet>{% for c in comment_dbs %}
    {{ c.user_key|get_name_by_key }} {{ c.comment }}&lt;br&gt;
{% endfor %}
</snippet></ROW><ROW><id>19395166</id><snippet>for _unused in range(10):
    print 'hello world'
</snippet></ROW><ROW><id>19395166</id><snippet>variable-rgx</snippet></ROW><ROW><id>19395166</id><snippet>for _ in range(10):
    print 'hello world'
</snippet></ROW><ROW><id>19395166</id><snippet>_</snippet></ROW><ROW><id>19395166</id><snippet>variable-rgx</snippet></ROW><ROW><id>19395166</id><snippet>good-names</snippet></ROW><ROW><id>19395477</id><snippet>x,y,z = [1,2,3], [4,5,6], [7,8,9]
for t in x,y,z:
    a, b, c = t
    print(a,b,c)
</snippet></ROW><ROW><id>19395477</id><snippet>t</snippet></ROW><ROW><id>19395477</id><snippet>x</snippet></ROW><ROW><id>19395477</id><snippet>y</snippet></ROW><ROW><id>19395477</id><snippet>z</snippet></ROW><ROW><id>19395477</id><snippet>a, b, c = t
</snippet></ROW><ROW><id>19395482</id><snippet>common</snippet></ROW><ROW><id>19395482</id><snippet>current</snippet></ROW><ROW><id>19395482</id><snippet>history</snippet></ROW><ROW><id>19395482</id><snippet>class CommonPostModel(models.Model):
    title = models.CharField(max_length=255)
    body = models.TextField()

    class Meta:
        abstract = True
</snippet></ROW><ROW><id>19395482</id><snippet>class CurrentPostModel(CommonPostModel):
    pass
</snippet></ROW><ROW><id>19395482</id><snippet>class ArchivePostModel(CommonPostModel):
    pass
</snippet></ROW><ROW><id>19395889</id><snippet>.most_common()</snippet></ROW><ROW><id>19395889</id><snippet>list(listy)</snippet></ROW><ROW><id>19395889</id><snippet>map()</snippet></ROW><ROW><id>19395889</id><snippet>map(list, listy)
</snippet></ROW><ROW><id>19395899</id><snippet>data</snippet></ROW><ROW><id>19395899</id><snippet>from binascii import a2b_base64

data = 'MY BASE64-ENCODED STRING'
binary_data = a2b_base64(data)

fd = open('image.png', 'wb')
fd.write(binary_data)
fd.close()
</snippet></ROW><ROW><id>19395960</id><snippet>islice</snippet></ROW><ROW><id>19395960</id><snippet>itertools</snippet></ROW><ROW><id>19395960</id><snippet>from itertools import islice
with open("input", 'r') as input_file:
    for line in islice(input_file, 10):
        #process line
</snippet></ROW><ROW><id>19395960</id><snippet>input_file.readline()</snippet></ROW><ROW><id>19395999</id><snippet>context['category'] = Category.objects.all()
</snippet></ROW><ROW><id>19395999</id><snippet>context['categories'] = Category.objects.all()
</snippet></ROW><ROW><id>19395999</id><snippet>{% for category in categories %}
  {{ category.name }}
{% endfor %}
</snippet></ROW><ROW><id>19395999</id><snippet>[&lt;Category: Something not so interesting&gt;]
</snippet></ROW><ROW><id>19396096</id><snippet>import re</snippet></ROW><ROW><id>19396096</id><snippet>re</snippet></ROW><ROW><id>19396618</id><snippet>while userPoop not in southLib:
</snippet></ROW><ROW><id>19396627</id><snippet>class Order_productTable(tables.Table):
    order_id2 = tables.Column()
    product_id2 = tables.Column()
    customer = tables.Column(accessor="order_id2.customer")
    publication_date = tables.Column(accessor="order_id2.publication_date")
</snippet></ROW><ROW><id>19396650</id><snippet>    {% if item.category == category %}
</snippet></ROW><ROW><id>19396685</id><snippet>from Tkinter import *
import webbrowser
import tkMessageBox
import Tkinter as Tk

def actionDirectory():
    webbrowser.open('C:\AgmPlots')

def actionOpenFile():
    print "Done"

win = Tk.Tk()  #Open up connection and declare button and label
master=win

Lb1 = Listbox(win)
Lb1.insert(1, "Python")
Lb1.insert(2, "Perl")
Lb1.insert(3, "C")
Lb1.insert(4, "PHP")
Lb1.insert(5, "JSP")
Lb1.insert(6, "Ruby")
Lb1.pack()
button = Tk.Button(text='Open Folder', command=actionDirectory)
button1 = Tk.Button(text='Open Text', command=actionOpenFile)
button.pack()
button1.pack()
win.mainloop()
</snippet></ROW><ROW><id>19397106</id><snippet>subgroups : "[" sublist_opt "]"
</snippet></ROW><ROW><id>19397106</id><snippet>sublist_opt : group sublist_opt
            | empty
</snippet></ROW><ROW><id>19397206</id><snippet>L</snippet></ROW><ROW><id>19397206</id><snippet>RGB</snippet></ROW><ROW><id>19397206</id><snippet>image = Image.new("RGB", (SIZE, SIZE))
</snippet></ROW><ROW><id>19397206</id><snippet>(R, G, B)</snippet></ROW><ROW><id>19397206</id><snippet>ImageDraw</snippet></ROW><ROW><id>19397206</id><snippet>'#rrggbb'</snippet></ROW><ROW><id>19397206</id><snippet>col</snippet></ROW><ROW><id>19397410</id><snippet>import codecs
import os
from urllib import urlopen
from bs4 import BeautifulSoup
url= "http://www.mathrubhumi.com/sports/story.php?id=397111"
raw = urlopen(url).read()
soup = BeautifulSoup(raw,'lxml')
texts = soup.findAll(text=True)
name = soup.title.string
name= name+'.txt'
def contains_unicode(text):
    try:
        str(text)
    except:
        return True
    return False

result = ''.join((text for text in texts if contains_unicode(text)))
# Output to a file
with codecs.open(name,'w',encoding="utf-8") as out:
    out.write(result)
</snippet></ROW><ROW><id>19397531</id><snippet>(not original=="") or (original==" " and original.isalpha()==True)
</snippet></ROW><ROW><id>19397531</id><snippet>or</snippet></ROW><ROW><id>19397531</id><snippet>and</snippet></ROW><ROW><id>19397531</id><snippet>not original==""</snippet></ROW><ROW><id>19397531</id><snippet>True</snippet></ROW><ROW><id>19397531</id><snippet>if original.strip().isalpha():
</snippet></ROW><ROW><id>19397531</id><snippet>str.isalpha()</snippet></ROW><ROW><id>19397531</id><snippet>str.strip()</snippet></ROW><ROW><id>19397763</id><snippet>zip(*list_of_list)
</snippet></ROW><ROW><id>19398003</id><snippet>str.count</snippet></ROW><ROW><id>19398003</id><snippet>&gt;&gt;&gt; "12342foo \t62 bar sd\t\7534 black sheep".count('\t') == 4 - 1
False
&gt;&gt;&gt; "12342foo \t62 bar sd\t\7534 black\tsheep".count('\t') == 4 - 1
True
</snippet></ROW><ROW><id>19398003</id><snippet>x = "12342foo \t62 bar sd\t\7534 black sheep"
if x.count('\t') == 4 - 1:
    a, b, c, d = x.split('\t')
</snippet></ROW><ROW><id>19398003</id><snippet>try ... except ValueError</snippet></ROW><ROW><id>19398132</id><snippet>def random_person(request):
    # 1282302 is max number of people currently
    get_random = random.randint(1,1282302)
    get_person = Person.objects.get(pk=get_random)
    person_name = get_person.full
    return HttpResponseRedirect(reverse('film_chart_view')+"?q="+get_person.short)
</snippet></ROW><ROW><id>19398924</id><snippet>c.execute()</snippet></ROW><ROW><id>19398924</id><snippet>.fetchone()</snippet></ROW><ROW><id>19398924</id><snippet>c.execute("SELECT count(*) FROM users WHERE users.login=?", (name,))
playercount = c.fetchone()
if playercount[0]:
    print 'user exists'
</snippet></ROW><ROW><id>19399001</id><snippet>urllib</snippet></ROW><ROW><id>19399001</id><snippet>wget</snippet></ROW><ROW><id>19399039</id><snippet>newinv=inventory+str(add)</snippet></ROW><ROW><id>19399039</id><snippet>newinv = inventory.append(add)
</snippet></ROW><ROW><id>19399039</id><snippet>if selection=="use":
    print(inventory)
    remove=input("What do you want to use? ")
    inventory.remove(remove)
    print(inventory)

elif selection=="pickup":
    print(inventory)
    add=input("What do you want to pickup? ")
    inventory.append(add)
    print(inventory)
</snippet></ROW><ROW><id>19399053</id><snippet>page_source</snippet></ROW><ROW><id>19399053</id><snippet>innerHTML</snippet></ROW><ROW><id>19399053</id><snippet>js_code = "return document.getElementsByTagName('html').innerHTML"
your_elements = sel.execute_script(js_code)
</snippet></ROW><ROW><id>19399053</id><snippet>innerHTML</snippet></ROW><ROW><id>19399053</id><snippet>frame</snippet></ROW><ROW><id>19399053</id><snippet>frames = driver.find_element_by_tag_name("frame")
js_code = "return arguments[0].innerHTML"
your_elements = sel.execute_script(js_code, frames[0])
</snippet></ROW><ROW><id>19399053</id><snippet>driver.switch_to_frame("frameName")
</snippet></ROW><ROW><id>19399198</id><snippet>__missing__</snippet></ROW><ROW><id>19399198</id><snippet>defaultdict</snippet></ROW><ROW><id>19399198</id><snippet>key</snippet></ROW><ROW><id>19399198</id><snippet>__missing__</snippet></ROW><ROW><id>19399198</id><snippet>&gt;&gt;&gt; class MyDict(dict):
...     def __init__(self, factory):
...         self.factory = factory
...     def __missing__(self, key):
...         self[key] = self.factory(key)
...         return self[key]
... 
&gt;&gt;&gt; d = MyDict(lambda x: -x)
&gt;&gt;&gt; d[1]
-1
&gt;&gt;&gt; d
{1: -1}
</snippet></ROW><ROW><id>19399212</id><snippet>array = [1, 2, 0, 0, 3, 0, 3, 5, 6, 0]
</snippet></ROW><ROW><id>19399212</id><snippet>deleted_index_array = [i for i, x in enumerate(array) if x == 0]
</snippet></ROW><ROW><id>19399212</id><snippet>array = [i for i in array if i != 0]
</snippet></ROW><ROW><id>19399555</id><snippet>a = a + b</snippet></ROW><ROW><id>19399555</id><snippet>a += b</snippet></ROW><ROW><id>19399555</id><snippet>__add__</snippet></ROW><ROW><id>19399555</id><snippet>+=</snippet></ROW><ROW><id>19399555</id><snippet>__iadd__</snippet></ROW><ROW><id>19399555</id><snippet>__add__</snippet></ROW><ROW><id>19399555</id><snippet>__iadd__</snippet></ROW><ROW><id>19399555</id><snippet>__add__</snippet></ROW><ROW><id>19399555</id><snippet>__iadd__</snippet></ROW><ROW><id>19399555</id><snippet>.extend()</snippet></ROW><ROW><id>19399555</id><snippet>__radd__</snippet></ROW><ROW><id>19399949</id><snippet>json.load</snippet></ROW><ROW><id>19399949</id><snippet>get</snippet></ROW><ROW><id>19399949</id><snippet>dict</snippet></ROW><ROW><id>19399949</id><snippet>if search.lower() in j.get('sub', '').lower() or search.lower() in j.get('com', '').lower():
</snippet></ROW><ROW><id>19399987</id><snippet>foo = 1 #

def test(bar):
    # at this point "bar" points to the same object as foo
    bar = 2    # we're updating the name "bar" to point an object "int(2)"
    # foo still points to its original object "int(1)"
    print foo, bar # therefore we're showing 2 different things

test(foo)
</snippet></ROW><ROW><id>19399987</id><snippet>foo += 1</snippet></ROW><ROW><id>19399987</id><snippet>foo += 1</snippet></ROW><ROW><id>19399987</id><snippet>foo = foo + 1</snippet></ROW><ROW><id>19399987</id><snippet>foo = foo.__add__(1)</snippet></ROW><ROW><id>19399987</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; id (a)
18613048
&gt;&gt;&gt; a += 1
&gt;&gt;&gt; id(a)
18613024
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19400114</id><snippet>import platform
import os

if platform.system() == 'Darwin': # We're on a mac
        # Store the saved rates in the users home dir - note the dot at the start
        # of the filename to keep the file hidden
        home = os.path.expanduser("~")
        filename = os.path.join(home, '.myHiddenLogger')

else: # We're on another platform, create whatever filename you were using before
        filename = 'myLogger'
</snippet></ROW><ROW><id>19400923</id><snippet>import heapq
import random
x = range(100000)
random.shuffle(x)
print(heapq.nlargest(2, x))
</snippet></ROW><ROW><id>19400923</id><snippet>max_column = heapq.nlargest(len(x)/2, x)
</snippet></ROW><ROW><id>19400938</id><snippet>String setText = "document.getElementById('import_product_categories').value += 'hello';";
</snippet></ROW><ROW><id>19400938</id><snippet>String setText = "document.getElementById('import_product_categories').value += 'hello';";
</snippet></ROW><ROW><id>19400959</id><snippet>X(Y) @ X(Z)</snippet></ROW><ROW><id>19400959</id><snippet>X @ (Y,Z)</snippet></ROW><ROW><id>19400959</id><snippet>Her bunny is happy and her hamster is happy (1)
</snippet></ROW><ROW><id>19400959</id><snippet>Her bunny and her hamster are happy
</snippet></ROW><ROW><id>19400959</id><snippet>bunny == happy and hamster == happy
</snippet></ROW><ROW><id>19400959</id><snippet>(bunny and hamster) == happy 
</snippet></ROW><ROW><id>19400959</id><snippet>(bunny and hamster)</snippet></ROW><ROW><id>19400959</id><snippet>- a falsy value, if she's got no bunny
- the hamster otherwise
</snippet></ROW><ROW><id>19400959</id><snippet>(bunny and hamster) == happy</snippet></ROW><ROW><id>19400959</id><snippet>She's got a bunny and her hamster is happy
</snippet></ROW><ROW><id>19400959</id><snippet>&gt;&gt;&gt; happy = 1
&gt;&gt;&gt; sad = 2
&gt;&gt;&gt; bunny = sad
&gt;&gt;&gt; hamster = happy
&gt;&gt;&gt; bunny == happy and hamster == happy
False
&gt;&gt;&gt; (bunny and hamster) == happy
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19401271</id><snippet>var repl = str.replace(/@(\w+)/g, '%$1%');
</snippet></ROW><ROW><id>19401271</id><snippet>String repl = str.replaceAll("@(\\w+)", "%$1%");
</snippet></ROW><ROW><id>19401271</id><snippet>import re
repl = re.sub(r'@(\w+)', r'%\1%', strng)
</snippet></ROW><ROW><id>19401298</id><snippet> with open(keywords_file, 'r') as f:
     keywords = ",".join(line.strip() for line in f)
</snippet></ROW><ROW><id>19401984</id><snippet>if __name__ == "__main__":
    for testname in ["test_test1", "test_test2"]:
        instance = ttt(testname)
        instance.run()
</snippet></ROW><ROW><id>19401984</id><snippet>if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>19401984</id><snippet>runTest</snippet></ROW><ROW><id>19401984</id><snippet>unittest.TestCase.__init__</snippet></ROW><ROW><id>19401984</id><snippet>def __init__(self, methodName='runTest'):
    """Create an instance of the class that will use the named test
       method when executed. Raises a ValueError if the instance does
       not have a method with the specified name.
    """
</snippet></ROW><ROW><id>19401984</id><snippet>runTest</snippet></ROW><ROW><id>19402116</id><snippet>A[ind, :] += B[np.arange(N), :]
</snippet></ROW><ROW><id>19402253</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19402253</id><snippet>from twisted.internet.defer import inlineCallbacks

@inlineCallbacks
def foo():
    x = yield bar()
    print x
</snippet></ROW><ROW><id>19402335</id><snippet>TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>19402335</id><snippet>node</snippet></ROW><ROW><id>19402335</id><snippet>to_crawl = deque(group(node))
</snippet></ROW><ROW><id>19402335</id><snippet>current = to_crawl.popleft()
</snippet></ROW><ROW><id>19402335</id><snippet>current</snippet></ROW><ROW><id>19402335</id><snippet>sum(current)
</snippet></ROW><ROW><id>19402335</id><snippet>sum([x for x in current])
</snippet></ROW><ROW><id>19402418</id><snippet>all</snippet></ROW><ROW><id>19402418</id><snippet>test[:, test.all(axis=0)]
</snippet></ROW><ROW><id>19402418</id><snippet>test[:, numpy.all(test, axis=0)]
</snippet></ROW><ROW><id>19402496</id><snippet>DROP SCHEMA tmp CASCADE;
CREATE SCHEMA tmp ;
SET search_path=tmp;

CREATE TABLE bigstrings
        ( col1 varchar
        , col2 varchar
        , col3 varchar
        );

INSERT INTO bigstrings(col1, col2, col3) VALUES
 ('abc1','def1','ghi1')
,('abc1','g1','g2')
,('g3','g1','g4')
        ;

CREATE TABLE allstrings
        ( num BIGSERIAL NOT NULL PRIMARY KEY
        , string varchar NOT NULL UNIQUE
        );

CREATE TABLE nostrings
        ( col1 BIGINT REFERENCES allstrings(num)
        , col2 BIGINT REFERENCES allstrings(num)
        , col3 BIGINT REFERENCES allstrings(num)
        );

INSERT INTO allstrings( string)
SELECT DISTINCT col1 FROM bigstrings bs
 -- not needed on empty allstrings table.
 -- WHERE NOT EXISTS ( SELECT * FROM allstrings nx WHERE nx.string = bs.col1)
        ;

INSERT INTO allstrings( string)
SELECT DISTINCT col2 FROM bigstrings bs
WHERE NOT EXISTS ( SELECT * FROM allstrings nx WHERE nx.string = bs.col2)
        ;

INSERT INTO allstrings( string)
SELECT DISTINCT col3 FROM bigstrings bs
WHERE NOT EXISTS ( SELECT * FROM allstrings nx WHERE nx.string = bs.col3)
        ;

INSERT INTO nostrings(col1,col2,col3)
SELECT s1.num, s2.num, s3.num
FROM bigstrings bs
JOIN allstrings s1 ON s1.string = bs.col1
JOIN allstrings s2 ON s2.string = bs.col2
JOIN allstrings s3 ON s3.string = bs.col3
        ;

SELECT * FROM nostrings;
</snippet></ROW><ROW><id>19402496</id><snippet> col1 | col2 | col3 
------+------+------
    2 |    3 |    6
    2 |    4 |    7
    1 |    4 |    5
(3 rows)
</snippet></ROW><ROW><id>19402835</id><snippet>def send_email(fun):
    @wraps(fun)
    def outer(self, *args, **kwargs):
        print('decorated and task is {0!r}'.format(self))
        return fun(self, *args, **kwargs)

    return outer

@task(bind=True)
@send_email
def any_function(self):
    print('inside the function')
</snippet></ROW><ROW><id>19402835</id><snippet>current_task</snippet></ROW><ROW><id>19402835</id><snippet>from celery import current_task

def send_email(fun):

    @wraps(fun)
    def outer(*args, **kwargs):
        print('decorated and task is: %r' % (current_task, ))
        return fun(*args, **kwargs)


@task
@send_email
def any_function():
    print('inside the function')
</snippet></ROW><ROW><id>19403046</id><snippet>package main

import "fmt"
import "os/exec"

func main() {
    cmd := exec.Command("python",  "-c", "import pythonfile; print pythonfile.cat_strings('foo', 'bar')")
    fmt.Println(cmd.Args)
    out, err := cmd.CombinedOutput()
    if err != nil { fmt.Println(err); }
    fmt.Println(string(out))
}
</snippet></ROW><ROW><id>19403046</id><snippet>// EscapeArg rewrites command line argument s as prescribed
// in http://msdn.microsoft.com/en-us/library/ms880421.
// This function returns "" (2 double quotes) if s is empty.
// Alternatively, these transformations are done:
// - every back slash (\) is doubled, but only if immediately
//   followed by double quote (");
// - every double quote (") is escaped by back slash (\);
// - finally, s is wrapped with double quotes (arg -&gt; "arg"),
//   but only if there is space or tab inside s.
func EscapeArg(s string) string { ...
</snippet></ROW><ROW><id>19403046</id><snippet>$ python -c "'import pythonfile; print pythonfile.cat_strings(\\"foo\\", \\"bar\\")'"
</snippet></ROW><ROW><id>19403350</id><snippet>ReconnectingClientFactory</snippet></ROW><ROW><id>19403350</id><snippet>LoopingCall</snippet></ROW><ROW><id>19403415</id><snippet>valueGET</snippet></ROW><ROW><id>19403415</id><snippet>submit</snippet></ROW><ROW><id>19403415</id><snippet>command</snippet></ROW><ROW><id>19403415</id><snippet>submit = Button(frame, text="Enter", width=15, command=valueGET(E1.get(), E2.get())) 
</snippet></ROW><ROW><id>19403415</id><snippet>submit = Button(frame, text="Enter", width=15, command=lambda: valueGET(E1.get(), E2.get())) 
</snippet></ROW><ROW><id>19403735</id><snippet># models.py
class Trial(models.Model):
    # whatever fields
    login_required = models.BooleanField(default=False)

# views.py
def trial_detail(request, id):
    trial = get_object_or_404(Trial, pk=id)
    if trial.login_required and not request.user.is_authenticated():
        return HttpResponseRedirect(reverse('your-login-view'))

    return render(request, 'your-template.html', {'trial': trial})
</snippet></ROW><ROW><id>19403735</id><snippet>trial</snippet></ROW><ROW><id>19403823</id><snippet>awk</snippet></ROW><ROW><id>19403823</id><snippet>python</snippet></ROW><ROW><id>19403823</id><snippet>awk '( $1~/[0-9]+\.[0-9]+-[0-9]+\.[0-9]+/ &amp;&amp; ($2&lt;1200||$2&gt;1600) ) {print $2}' file
</snippet></ROW><ROW><id>19403823</id><snippet>1195
144
</snippet></ROW><ROW><id>19403823</id><snippet>awk '$1 ~ /[0-9]+\.[0-9]+-[0-9]+\.[0-9]+/ {total+=$2; cnt++;} END {printf "Average = %.2f\n", total/cnt}' file
</snippet></ROW><ROW><id>19403823</id><snippet>Average = 1339.38
</snippet></ROW><ROW><id>19403837</id><snippet>result = 0
for i in range(a,b+1):
  if i%2 == 1:
    result += i
print result
</snippet></ROW><ROW><id>19403897</id><snippet>import pandas as pd
df = pd.DataFrame({'A':'foo foo foo bar bar bar'.split(),
                   'B':[0.1, 0.5, 1.0]*2})

df['C'] = df.groupby(['A'])['B'].transform(
                     lambda x: pd.qcut(x, 3, labels=range(1,4)))
print(df)
</snippet></ROW><ROW><id>19403897</id><snippet>     A    B  C
0  foo  0.1  1
1  foo  0.5  2
2  foo  1.0  3
3  bar  0.1  1
4  bar  0.5  2
5  bar  1.0  3
</snippet></ROW><ROW><id>19404167</id><snippet>permutations/combinations</snippet></ROW><ROW><id>19404167</id><snippet>d1 = {'el1': 2, 'el3': 4, 'el5': 17, 'el12':32}
d2 = {'el1': 5, 'el3': 9, 'el5': 11, 'el12':6}
d3 = {'el1': 1, 'el6': 2, 'el7': 41, 'el12':13}

d = [d1, d2, d3]

G = nx.DiGraph()
# or just Graph() if not weighted
# If unweighted, you should use combinations() instead, as for a given list
# ['e1', 'e2', 'e3'], permutations(l, 2) will give both ('e1', 'e2') and ('e2','e1')
# whereas combinations will give only one of those. 

for item in d:
    G.add_nodes_from(item)
    for entry in item:
        try: 
            G.node[entry]['weight'] += item[entry]
        except:
            G.node[entry]['weight'] = item[entry]
    for source, target in itertools.permutations(item.keys(), 2):
        G.add_edge(source, target)
        try: 
            G.edge[source][target]['weight'] += 1
        except:
            G.edge[source][target]['weight'] = 1

G.node
{'el1': {'weight': 8},
 'el12': {'weight': 51},
 'el3': {'weight': 13},
 'el5': {'weight': 28},
 'el6': {'weight': 2},
 'el7': {'weight': 41}}
G.edge
{'el1': {'el12': {'weight': 3},
  'el3': {'weight': 2},
  'el5': {'weight': 2},
  'el6': {'weight': 1},
  'el7': {'weight': 1}},
 'el12': {'el1': {'weight': 3},
  'el3': {'weight': 2},
  'el5': {'weight': 2},
  'el6': {'weight': 1},
  'el7': {'weight': 1}},
 'el3': {'el1': {'weight': 2}, 'el12': {'weight': 2}, 'el5': {'weight': 2}},
 'el5': {'el1': {'weight': 2}, 'el12': {'weight': 2}, 'el3': {'weight': 2}},
 'el6': {'el1': {'weight': 1}, 'el12': {'weight': 1}, 'el7': {'weight': 1}},
 'el7': {'el1': {'weight': 1}, 'el12': {'weight': 1}, 'el6': {'weight': 1}}}
</snippet></ROW><ROW><id>19404229</id><snippet>clientSocket.send("GET /filename")
</snippet></ROW><ROW><id>19404229</id><snippet>clientSocket.send("GET /%s" % filename)
</snippet></ROW><ROW><id>19404229</id><snippet>filename</snippet></ROW><ROW><id>19404229</id><snippet>filename</snippet></ROW><ROW><id>19404444</id><snippet>material = tree_materials.find(".//MATERIAL[@number='1.2345']")
lx = material.findall('Values/X')
ly = material.findall('Values/Y')
points = zip([x.text for x in lx], [y.text for y in ly])
</snippet></ROW><ROW><id>19404444</id><snippet>        &lt;Values&gt;
                  &lt;X&gt;200.0&lt;/X&gt;
                  &lt;Y&gt;185.0&lt;/Y&gt;
        &lt;/Values&gt;
        &lt;Values&gt;
                  &lt;Y&gt;180.0&lt;/Y&gt;
        &lt;/Values&gt;
        &lt;Values&gt;
                  &lt;X&gt;400.0&lt;/X&gt;
                  &lt;Y&gt;175.0&lt;/Y&gt;
        &lt;/Values&gt;
</snippet></ROW><ROW><id>19404444</id><snippet>(200.0, 185.0), (180.0, 175.0)</snippet></ROW><ROW><id>19404444</id><snippet>values = material.findall('Values')
points = [(v.find('X').text, v.find('Y').text) for v in values]
</snippet></ROW><ROW><id>19404461</id><snippet>python manage.py loaddata stock/fixtures/initial_data.json --traceback
</snippet></ROW><ROW><id>19404691</id><snippet>with open("path/to/my/file/test.txt", 'rb') as f:
    # Strip will remove the newlines, spaces, etc...
    lines = [line.strip() for line in f.readlines()]
numbers = [21, 22, 23]
itr = iter(numbers)
with open("path/to/my/file/test.txt", 'wb') as f:
    for line in lines:
        if '/' in line:
            f.write('%s %s\n' % (line, itr.next()))
        else:
            f.write('%s\n' % line)
</snippet></ROW><ROW><id>19404729</id><snippet>lift</snippet></ROW><ROW><id>19404729</id><snippet>import Tkinter as tk
class Page(tk.Frame):
    def __init__(self, master, text, height, width, *args, **kwargs):
        tk.Frame.__init__(self, *args, borderwidth=20, **kwargs)
        self.height = height
        self.width = width
        button = tk.Button(self, text=text, font=('Comic Sans MS', 20),
                           command=lambda: self.callback())
        button.pack(side="top", fill="both", expand=True)
    def onlift(self):
        root.geometry('{}x{}'.format(self.width, self.height))
        self.lift()

class App(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)

        p1 = Page(self, 'Login 1', height=200, width=300)
        p2 = Page(self, 'Next page is 2', height=400, width=300)
        p3 = Page(self, 'We love number 3', height=400, width=600)
        p1.callback = p2.onlift
        p2.callback = p3.onlift
        p3.callback = p1.onlift

        p1.place(x=0, y=0, relwidth=1, relheight=1)
        p2.place(x=0, y=0, relwidth=1, relheight=1)
        p3.place(x=0, y=0, relwidth=1, relheight=1)

        p1.onlift()

root = tk.Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>19404729</id><snippet>Frame</snippet></ROW><ROW><id>19404729</id><snippet>Page</snippet></ROW><ROW><id>19404729</id><snippet>Login</snippet></ROW><ROW><id>19404729</id><snippet>    p1 = Login(self, ...)
    p2 = Registered(self, ...)
</snippet></ROW><ROW><id>19404759</id><snippet>class Article(Base):
    ...
    category_name = Column(String(100), ForeignKey(Category.name), nullable=False)
    category = relationship(Category)
</snippet></ROW><ROW><id>19404819</id><snippet>&gt;&gt;&gt; dict.__add__ = lambda x, y: None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'dict'
</snippet></ROW><ROW><id>19404819</id><snippet>dict</snippet></ROW><ROW><id>19404819</id><snippet>import copy

class Dict(dict):

  def __add__(self, other):
    ret = copy.copy(self)
    ret.update(other)
    return ret

d1 = Dict({1: 2, 3: 4})
d2 = Dict({3: 10, 4: 20})
print(d1 + d2)
</snippet></ROW><ROW><id>19404929</id><snippet>#!/usr/bin/python
import gtk

class PyApp(gtk.Window):

    def __init__(self):
        super(PyApp, self).__init__()

        """ Window - Background embed """
        button_rc = """
        pixmap_path "/var/tmp"
        # Button - image apply
        style "window" {
          bg_pixmap[NORMAL] = "menu/keyboard_new.png"
        }

        style "deButton" {
          fg[PRELIGHT] = { 0, 1.0, 1.0 }
          bg[PRELIGHT] = { 0, 0, 1.0 }
          bg[ACTIVE] = { 1.0, 0, 0 }
          fg[ACTIVE] = { 0, 1.0, 0 }
          bg[NORMAL] = { 1.0, 1.0, 0 }
          fg[NORMAL] = { .99, 0, .99 }
          bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
          fg[INSENSITIVE] = { 1.0, 0, 1.0 }
          engine "pixmap" {
              image {
                  function = BOX
                  file     = "menu/commonbutton1.png"
                  stretch  = TRUE
              }
          }
          bg_pixmap[NORMAL] = "menu/commonbutton1.png"
        }
        # imports
        widget "*.deButton" style "deButton"
        widget_class "*GtkButton*" style "button"
        widget_class "GtkWindow" style "window"
        """

        self.set_title("Keyboard")
        self.set_size_request(600, 300)
        self.set_position(gtk.WIN_POS_CENTER)
        gtk.rc_parse_string(button_rc)  ##&lt;&lt;&lt;&lt;&lt; include the design
        vbox = gtk.VBox(False, 2)

        fix  = gtk.Fixed() ## YumYumYum
        """ Row 1 """
        fix.put( gtk.Button("1") , 20 , 20 )
        fix.put( gtk.Button("2") , 80 , 20 )
        fix.put( gtk.Button("3") , 150 , 20 )
        """ Row 2 """
        fix.put( gtk.Button("Q") , 20 , 80 )
        """ Row 3 """
        fix.put( gtk.Button("A") , 60 , 130 )
        """ Row 4 """
        fix.put( gtk.Button("Z") , 60 , 190 )
        """ Row 5 """
        fix.put( gtk.Button("SPACE") , 180 , 240 )

        vbox.pack_end(fix, True, True, 0)
        self.add(vbox)
        self.connect("destroy", gtk.main_quit)
        self.show_all()


PyApp()
gtk.main()
</snippet></ROW><ROW><id>19405340</id><snippet>def reconnect_delay_set(self, delay, delay_max, exponential_backoff):
    ...
</snippet></ROW><ROW><id>19405340</id><snippet>delay</snippet></ROW><ROW><id>19405340</id><snippet>delay_max</snippet></ROW><ROW><id>19405340</id><snippet>delay_max</snippet></ROW><ROW><id>19405340</id><snippet>delay</snippet></ROW><ROW><id>19405340</id><snippet>exponential_backoff</snippet></ROW><ROW><id>19405340</id><snippet>delay</snippet></ROW><ROW><id>19405340</id><snippet>delay_max</snippet></ROW><ROW><id>19405340</id><snippet>delay=3</snippet></ROW><ROW><id>19405340</id><snippet>delay_max=15</snippet></ROW><ROW><id>19405340</id><snippet>delay*reconnect_failures</snippet></ROW><ROW><id>19405340</id><snippet>exponential_backoff</snippet></ROW><ROW><id>19405340</id><snippet>delay*reconnect_failures^2</snippet></ROW><ROW><id>19405340</id><snippet>exponential_backoff=True</snippet></ROW><ROW><id>19405422</id><snippet>users = {1:'john'}
userorders = {1:[21]}
#goes to a list of item ids ONLY
orders = {21:[2,3]}
items = {2:'glass',3:'wine'}
</snippet></ROW><ROW><id>19405422</id><snippet>users[Q['uid']] = Q['uname']
userorders[Q['uid']].append(Q['order_id'])
orders[Q['orderid']].append(Q['item_id'])
items[Q['item_id']] = Q['itemname']
</snippet></ROW><ROW><id>19405422</id><snippet>for order in userorders[1]:
  for item in orders[order]:
    print items[item]
</snippet></ROW><ROW><id>19405438</id><snippet>for entry in request.GET:</snippet></ROW><ROW><id>19405438</id><snippet>distinct()</snippet></ROW><ROW><id>19405438</id><snippet>entries = [entry for entry in request.GET]
Contact.objects.filter(lists__name__in=entries).distinct()
</snippet></ROW><ROW><id>19405814</id><snippet>self.request.recv(1024)</snippet></ROW><ROW><id>19405814</id><snippet>self.request.recv(8)</snippet></ROW><ROW><id>19405814</id><snippet>recv()</snippet></ROW><ROW><id>19406123</id><snippet>try:
    # something
except:
    t, v, tb = sys.exc_info()
</snippet></ROW><ROW><id>19406123</id><snippet>raise t, v, tb
</snippet></ROW><ROW><id>19406257</id><snippet>id</snippet></ROW><ROW><id>19406257</id><snippet>id</snippet></ROW><ROW><id>19406257</id><snippet>[]</snippet></ROW><ROW><id>19406257</id><snippet>[]</snippet></ROW><ROW><id>19406257</id><snippet>id_dict.setdefault(id, []).append(skill)
</snippet></ROW><ROW><id>19406332</id><snippet>StringIO</snippet></ROW><ROW><id>19406332</id><snippet>from StringIO import StringIO
import base64

data = StringIO(base64.decodestring(self.img_data_base64))
img_file = File(data)
ticket.ticket_img.save(filename, img_file)
</snippet></ROW><ROW><id>19406332</id><snippet>StringIO</snippet></ROW><ROW><id>19406436</id><snippet>in</snippet></ROW><ROW><id>19406436</id><snippet>__contains__()</snippet></ROW><ROW><id>19406436</id><snippet>class dumb(object):
    ...
    def __contains__(self, key):
        return key in self.g
</snippet></ROW><ROW><id>19406436</id><snippet>self.g[key] if key in self.g else None
</snippet></ROW><ROW><id>19406436</id><snippet>self.g.get(key)
</snippet></ROW><ROW><id>19406489</id><snippet>migrate</snippet></ROW><ROW><id>19406802</id><snippet>window.location = url.replace("#", "?")
</snippet></ROW><ROW><id>19406802</id><snippet>http://whateversite:8000/??accesstoken= (notice the consecutive ??)
</snippet></ROW><ROW><id>19407303</id><snippet>threading.stack_size</snippet></ROW><ROW><id>19407303</id><snippet>threading.stack_size</snippet></ROW><ROW><id>19407303</id><snippet>threading.stack_size</snippet></ROW><ROW><id>19407303</id><snippet>threading.stack_size</snippet></ROW><ROW><id>19407547</id><snippet>class Article(models.Model):

    name = models.Charfield()

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>19407654</id><snippet>prefixes = [your_list[:end] for end in xrange(1, len(your_list) + 1)]
</snippet></ROW><ROW><id>19408061</id><snippet>'a'</snippet></ROW><ROW><id>19408061</id><snippet>__name__</snippet></ROW><ROW><id>19408061</id><snippet>&gt;&gt;&gt; Aobj = A()
&gt;&gt;&gt; aBoundMeth = getattr(Aobj, 'a')
&gt;&gt;&gt; aBoundMeth.__name__
'a'
</snippet></ROW><ROW><id>19408061</id><snippet>&gt;&gt;&gt; class A(object):
...     def a(self):
...        pass
...     b = a
... 
&gt;&gt;&gt; Aobj = A()
&gt;&gt;&gt; Aobj.a.__name__
'a'
&gt;&gt;&gt; Aobj.b.__name__
'a'
</snippet></ROW><ROW><id>19408098</id><snippet>color = getColor(getPixel(pic, sourceX-1, sourceY-1))
</snippet></ROW><ROW><id>19408098</id><snippet>sourceY = getHeight(canvas)    #sourceY = 480
</snippet></ROW><ROW><id>19408098</id><snippet>def makeSmaller(pic):

    #setup the canvas to draw to
    width = getWidth(pic)
    height = getHeight(pic)
    canvas = makeEmptyPicture(width /2 , height /2)

    #loop through all pixels of the canvas
    for x in range (0, getWidth(canvas)- 1):
        for y in range (0, getHeight(canvas)- 1):

            #grab the appropriate pixel from the original picture ( *2 )
            color = getColor(getPixel(pic, x * 2, y * 2))

            #assign that color the corresponding pixel on the canvas
            setColor(getPixel(canvas, x, y), color)

    show(pic)
</snippet></ROW><ROW><id>19408135</id><snippet>class generalObjectLikeA:
    def some_method_in_b_but_bellows_classA(self):
        pass
</snippet></ROW><ROW><id>19408135</id><snippet>class A(b.generalObjectLikeA):
    def __init__(self):
        pass

    def some_method_in_a(self):
        pass
</snippet></ROW><ROW><id>19408283</id><snippet>TL;DR - Due to RAM being insufficient &amp; the memory being swapped out to secondary storage.
</snippet></ROW><ROW><id>19408283</id><snippet>/usr/bin/time ./test.py 16000000
2.90user 0.26system 0:03.17elapsed 99%CPU 513480maxresident
0inputs+0outputs (0major+128715minor)pagefaults

/usr/bin/time ./test.py 32000000
6.10 user 0.49 system 0:06.64 elapsed 99%CPU 1022664maxresident
40inputs (2major+255998minor)pagefaults

/usr/bin/time ./test.py 64000000
12.70 user 0.98 system 0:14.09 elapsed 97%CPU 2040132maxresident
4272inputs (22major+510643minor)pagefaults

/usr/bin/time ./test.py 128000000
30.57 user 23.29 system 27:12.32 elapsed 3%CPU 3132276maxresident
19764880inputs (389184major+4129375minor)pagefaults
</snippet></ROW><ROW><id>19408283</id><snippet>User time</snippet></ROW><ROW><id>19408283</id><snippet>System time</snippet></ROW><ROW><id>19408283</id><snippet>Elapsed time</snippet></ROW><ROW><id>19408283</id><snippet>Elapsed time = User time + System Time + time spent waiting
</snippet></ROW><ROW><id>19408283</id><snippet>Major Page Fault</snippet></ROW><ROW><id>19408283</id><snippet>O(n*n)</snippet></ROW><ROW><id>19408295</id><snippet>def get_choice(choices):
  choice = ""
  while choice not in choices:
      choice = raw_input("Choose one of [%s]:" % ", ".join(choices))
  return choice

choice = get_choice(["hello", "goodbye", "hey", "laters"])
</snippet></ROW><ROW><id>19408460</id><snippet>4.16221 x 10^13</snippet></ROW><ROW><id>19408460</id><snippet>41622100000000</snippet></ROW><ROW><id>19408460</id><snippet>float('4,16221E+13'.replace(',', '.'))
&gt;&gt;&gt; 41622100000000.0
</snippet></ROW><ROW><id>19408460</id><snippet>.</snippet></ROW><ROW><id>19408500</id><snippet>items</snippet></ROW><ROW><id>19408500</id><snippet>x</snippet></ROW><ROW><id>19408500</id><snippet>range()</snippet></ROW><ROW><id>19408663</id><snippet>socket</snippet></ROW><ROW><id>19409092</id><snippet>from itertools import chain

for keys, values in my_dict.iteritems():
    fmt_str = ', '.join(map(str, chain(keys, *values)))
    print fmt_str
</snippet></ROW><ROW><id>19409092</id><snippet>keys</snippet></ROW><ROW><id>19409092</id><snippet>values</snippet></ROW><ROW><id>19409092</id><snippet>map(str, ...)</snippet></ROW><ROW><id>19409092</id><snippet>for keys, values in my_dict.iteritems():
    fmt_str = ', '.join(chain(keys, *values))
    print fmt_str
</snippet></ROW><ROW><id>19409109</id><snippet>User.query.filter_by(id=post.id).first() # Does Not return user_name but returns the user object
</snippet></ROW><ROW><id>19409109</id><snippet>userobj = User.query.filter_by(id=post.id).first()
</snippet></ROW><ROW><id>19409109</id><snippet>if userobj is not None: # Make sure user exists
    username = userobj.name
    email = userobj.email
</snippet></ROW><ROW><id>19409109</id><snippet>username = User.query.filter_by(id=post.id).first().name
email = User.query.filter_by(id=post.id).first().email
</snippet></ROW><ROW><id>19409396</id><snippet>self</snippet></ROW><ROW><id>19409396</id><snippet>__get__</snippet></ROW><ROW><id>19409396</id><snippet>42</snippet></ROW><ROW><id>19409396</id><snippet>type(self)</snippet></ROW><ROW><id>19409396</id><snippet>.__get__()</snippet></ROW><ROW><id>19409396</id><snippet>.__get__()</snippet></ROW><ROW><id>19409396</id><snippet>x</snippet></ROW><ROW><id>19409396</id><snippet>__dict__</snippet></ROW><ROW><id>19409396</id><snippet>Owner</snippet></ROW><ROW><id>19409396</id><snippet>&gt;&gt;&gt; Owner.__dict__['x']
&lt;__main__.MyDescriptor object at 0x100e48e10&gt;
&gt;&gt;&gt; Owner.__dict__['x'].__get__(None, Owner)
hello
42
</snippet></ROW><ROW><id>19409396</id><snippet>x.__get__(a)</snippet></ROW><ROW><id>19409396</id><snippet>a.x</snippet></ROW><ROW><id>19409396</id><snippet>a.__dict__['x']</snippet></ROW><ROW><id>19409396</id><snippet>type(a).__dict__['x']</snippet></ROW><ROW><id>19409396</id><snippet>type(a)</snippet></ROW><ROW><id>19409396</id><snippet>Owner.__dict__['x']</snippet></ROW><ROW><id>19409396</id><snippet>a.x</snippet></ROW><ROW><id>19409396</id><snippet>type(a).__dict__['x'].__get__(a, type(a))</snippet></ROW><ROW><id>19409622</id><snippet>class MyDescriptor(object):
    def __init__(self, name, func):
        self.func = func
        self.attr_name = '__' + name
    def __get__(self, instance, owner):
        return getattr(self, self.attr_name)
    def __set__(self, instance, value):
        setattr(self, self.attr_name, value)
        self.func(self.attr_name)

def postprocess(attr_name):
    print 'postprocess called after setting', attr_name

class Example(object):
    prop1 = MyDescriptor('prop1', postprocess)
    prop2 = MyDescriptor('prop2', postprocess)

obj = Example()
obj.prop1 = 'answer'  # prints 'postprocess called after setting __prop1'
obj.prop2 = 42  # prints 'postprocess called after setting __prop2'
</snippet></ROW><ROW><id>19409622</id><snippet>def my_property(name, postprocess=postprocess):
    return MyDescriptor(name, postprocess)

class Example(object):
    prop1 = my_property('prop1')
    prop2 = my_property('prop2')
</snippet></ROW><ROW><id>19409622</id><snippet>@</snippet></ROW><ROW><id>19409622</id><snippet>def my_property(method):
    name = method.__name__
    return MyDescriptor(name, postprocess)

class Example(object):
    @my_property
    def prop1(self): pass
    @my_property
    def prop2(self): pass
</snippet></ROW><ROW><id>19409827</id><snippet>df['EntryNextTrade'] = df['EntryDate'].shift()
</snippet></ROW><ROW><id>19409827</id><snippet>msk = df['EntryNextTrade'] &gt; df'[ExitDate']
</snippet></ROW><ROW><id>19409827</id><snippet>df.loc[msk, ['EntryDate', 'ExitDate']]
</snippet></ROW><ROW><id>19409886</id><snippet>class A(object):
    def __init__(self, x, child = None):
        self.x = x
        self.child = child

    def increments(self):
        self.x += 1 # increment this one
        # Check that the child is not 'None' or some other value
        if hasattr(self.child, 'increments'):
            # recursively increment the child
            self.child.increments()

    def __repr__(self):
        # friendly representation
        return 'A(%r, %r)' % (self.x, self.child)


&gt;&gt;&gt; a = A(1, A(2, A(3, A(4))))
&gt;&gt;&gt; a
A(1, A(2, A(3, A(4, None))))
&gt;&gt;&gt; a.increments()
&gt;&gt;&gt; a
A(2, A(3, A(4, A(5, None))))
&gt;&gt;&gt; a.increments()
&gt;&gt;&gt; a
A(3, A(4, A(5, A(6, None))))
</snippet></ROW><ROW><id>19409886</id><snippet>X</snippet></ROW><ROW><id>19409886</id><snippet>X</snippet></ROW><ROW><id>19409886</id><snippet>class Node(object):
    def __init__(self, x, *children):
        self.x = x
        self.children = []
        if children:
            self.children.extend(children)

    def updateLeafs(self, newx):
        if self.children:
            # This node has children: it is not a Leaf
            for c in self.children:
                c.updateLeafs(newx)
        else:
            # This node has no children -&gt; Definition of a leaf !
            self.x = newx

    def __str__(self):
        "Pretty printing of the tree"
        if self.children:
            # A node
            return 'Node(%s -&gt; [%s])' % (repr(self.x), ','.join(str(c) for c in self.children))
        else:
            # A leaf
            return 'Node(%s)' % repr(self.x)
</snippet></ROW><ROW><id>19409886</id><snippet>&gt;&gt;&gt; tree = Node(1, Node(4, Node(4, Node(4), Node(5)), Node(6), Node(7, Node(8))))
&gt;&gt;&gt; print tree
Node(1 -&gt; [Node(4 -&gt; [Node(4 -&gt; [Node(4),Node(5)]),Node(6),Node(7 -&gt; [Node(8)])])])
&gt;&gt;&gt; tree.updateLeafs(10)
&gt;&gt;&gt; print tree
Node(1 -&gt; [Node(4 -&gt; [Node(4 -&gt; [Node(10),Node(10)]),Node(10),Node(7 -&gt; [Node(10)])])])
</snippet></ROW><ROW><id>19409886</id><snippet>class Branch(object):
    def __init__(self, *children):
        self.children = children

    def update(self, newx):
        for c in self.children:
            c.update(newx)

    def __str__(self):
        "Pretty printing of the tree"
        return 'Branch([%s])' % (','.join(str(c) for c in self.children))

class Leaf(object):
    def __init__(self, x):
        self.x = x

    def update(self, newx):
        self.x = newx

    def __str__(self):
        return 'Leaf(%s)' % self.x
</snippet></ROW><ROW><id>19409886</id><snippet>&gt;&gt;&gt; tree = Branch(Branch(Branch(Leaf(4), Leaf(5)), Leaf(6), Branch(Leaf(8))))
&gt;&gt;&gt; print tree
Branch([Branch([Branch([Leaf(4),Leaf(5)]),Leaf(6),Branch([Leaf(8)])])])
&gt;&gt;&gt; tree.update(10)
&gt;&gt;&gt; print tree
Branch([Branch([Branch([Leaf(10),Leaf(10)]),Leaf(10),Branch([Leaf(10)])])])
</snippet></ROW><ROW><id>19409977</id><snippet>vim</snippet></ROW><ROW><id>19409977</id><snippet>#</snippet></ROW><ROW><id>19409977</id><snippet>.vimrc</snippet></ROW><ROW><id>19409977</id><snippet>" Testing comments
set nocompatible

" Testing comments
set number
</snippet></ROW><ROW><id>19409977</id><snippet>"""</snippet></ROW><ROW><id>19410125</id><snippet>sublime_plugin.EventListener</snippet></ROW><ROW><id>19410125</id><snippet>2</snippet></ROW><ROW><id>19410125</id><snippet>3</snippet></ROW><ROW><id>19410125</id><snippet>on_load()</snippet></ROW><ROW><id>19410125</id><snippet>on_new()</snippet></ROW><ROW><id>19410125</id><snippet>on_pre_save()</snippet></ROW><ROW><id>19410125</id><snippet>def on_modified(self, view): # &lt;- note change from "edit"  
    print view.fileName(), "modified"
</snippet></ROW><ROW><id>19410125</id><snippet>edit</snippet></ROW><ROW><id>19410537</id><snippet>x_train</snippet></ROW><ROW><id>19410537</id><snippet>y_train</snippet></ROW><ROW><id>19410537</id><snippet>x_test</snippet></ROW><ROW><id>19410537</id><snippet>y_test</snippet></ROW><ROW><id>19410537</id><snippet>&gt;&gt;&gt; from sklearn.naive_bayes import MultinomialNB
&gt;&gt;&gt; from sklearn.cross_validation import train_test_split
&gt;&gt;&gt; from sklearn.datasets import load_iris
&gt;&gt;&gt; from copy import copy
# prepare dataset
&gt;&gt;&gt; iris = load_iris()
&gt;&gt;&gt; X = iris.data[:, :2]
&gt;&gt;&gt; y = iris.target
&gt;&gt;&gt; X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
# model
&gt;&gt;&gt; clf1 = MultinomialNB()
&gt;&gt;&gt; clf2 = MultinomialNB()
&gt;&gt;&gt; print id(clf1), id(clf2) # two different instances
 4337289232 4337289296
&gt;&gt;&gt; clf1.fit(X_train, y_train)
&gt;&gt;&gt; print clf1.score(X_test, y_test)
 0.633333333333
&gt;&gt;&gt; print clf2.fit(X_train, y_train).score(X_test, y_test)
 0.633333333333
</snippet></ROW><ROW><id>19410667</id><snippet>train_set = np.array(train_set)
test_set = np.array(test_set)

pca.fit(train_set)
pca.fit(test_set)

train_set = pca.transform(train_set) "line where error occurs"
test_set = pca.transform(test_set)
</snippet></ROW><ROW><id>19410667</id><snippet>train_set</snippet></ROW><ROW><id>19410667</id><snippet>train_set = np.array([[]])
pca.fit(train_set)
</snippet></ROW><ROW><id>19410667</id><snippet>flatten_image</snippet></ROW><ROW><id>19410667</id><snippet>AttributeError</snippet></ROW><ROW><id>19410667</id><snippet>image.wide = image.reshape(1,s)
</snippet></ROW><ROW><id>19410667</id><snippet>image_wide = image.reshape(1,s)
return image_wide[0]
</snippet></ROW><ROW><id>19410667</id><snippet>print("changing size from %s to %s" % str(image.size), str(Standard_size))
</snippet></ROW><ROW><id>19410667</id><snippet>values must be a tuple</snippet></ROW><ROW><id>19410667</id><snippet>print("changing size from %s to %s" % (str(image.size), str(Standard_size)))
</snippet></ROW><ROW><id>19410667</id><snippet>"Loop over all images in files and modify them"</snippet></ROW><ROW><id>19410667</id><snippet>train_set = [flatten_image(matrix_image(image)) for image in train_images]
test_set = [flatten_image(matrix_image(image)) for image in test_images]
</snippet></ROW><ROW><id>19410667</id><snippet>file_open</snippet></ROW><ROW><id>19410667</id><snippet>"C:\Users\private\Desktop\K FOLDER\private\train\C:\Users\private\Desktop\K FOLDER\private\train\foo.jpg"</snippet></ROW><ROW><id>19411067</id><snippet>before_funcs = []
def before(func):
    before_funcs.append(func)
    return func

def attach_befores(func):
    @functools.wraps(func)
    def newfunc(*args, **kwargs):
        for before_func in before_funcs:
            before_func()
        return func(*args, **kwargs)
    return newfunc
</snippet></ROW><ROW><id>19411067</id><snippet>a = 0

@before
def callback():
    global a
    a += 1

@before
def another():
    global a
    a *= 2

@attach_befores
def do_thing(i):
    print(i)
</snippet></ROW><ROW><id>19411067</id><snippet>global a</snippet></ROW><ROW><id>19411067</id><snippet>do_thing(a)
do_thing(a)
do_thing(a)
do_thing(a)
</snippet></ROW><ROW><id>19411067</id><snippet>a</snippet></ROW><ROW><id>19411067</id><snippet>do_thing</snippet></ROW><ROW><id>19411067</id><snippet>a</snippet></ROW><ROW><id>19411067</id><snippet>0
2
6
14
</snippet></ROW><ROW><id>19411067</id><snippet>before</snippet></ROW><ROW><id>19411067</id><snippet>before</snippet></ROW><ROW><id>19411067</id><snippet>before</snippet></ROW><ROW><id>19411067</id><snippet>sys._getframe(1).f_code</snippet></ROW><ROW><id>19411067</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>19411067</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>19411067</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>19411067</id><snippet>CALL_FUNCTION_VAR</snippet></ROW><ROW><id>19411067</id><snippet>code</snippet></ROW><ROW><id>19411067</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>19411067</id><snippet>code</snippet></ROW><ROW><id>19411067</id><snippet>function</snippet></ROW><ROW><id>19411067</id><snippet>def call_do_thing(b):
    global a
    b += a
    return do_thing(a * b)
</snippet></ROW><ROW><id>19411067</id><snippet>LOAD_FAST b
LOAD_GLOBAL a
INPLACE_ADD
STORE_FAST b
LOAD_GLOBAL do_thing
LOAD_GLOBAL a
LOAD_FAST b
BINARY_MULTIPLY
CALL_FUNCTION 1
RETURN_VALUE
</snippet></ROW><ROW><id>19411067</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>19411067</id><snippet>RETURN_VALUE</snippet></ROW><ROW><id>19411067</id><snippet>a</snippet></ROW><ROW><id>19411202</id><snippet>dict</snippet></ROW><ROW><id>19411202</id><snippet>import ast
data = ast.literal_eval("{'y': 0.02, 'x': -1.0188, 'z': 2.026}")
print type(data)
</snippet></ROW><ROW><id>19411202</id><snippet>&lt;type 'dict'&gt;
</snippet></ROW><ROW><id>19411202</id><snippet>x</snippet></ROW><ROW><id>19411202</id><snippet>y</snippet></ROW><ROW><id>19411202</id><snippet>z</snippet></ROW><ROW><id>19411202</id><snippet>print data['x'], data['y'], data['z']
</snippet></ROW><ROW><id>19411263</id><snippet>def move (l, from_, to = 2):
    return l.insert (to, l.pop (from_) )
</snippet></ROW><ROW><id>19411268</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import matplotlib.gridspec as grd

v1 = np.random.rand(50,150)
v2 = np.random.rand(150)

fig = plt.figure()

# create a 2 X 2 grid 
gs = grd.GridSpec(2, 2, height_ratios=[1,10], width_ratios=[6,1], wspace=0.1)

# image plot
ax = plt.subplot(gs[2])
p = ax.imshow(v1,interpolation='nearest',aspect='auto') # set the aspect ratio to auto to fill the space. 
plt.xlabel('Day')
plt.ylabel('Depth')
plt.xlim(1,140)

# color bar in it's own axis
colorAx = plt.subplot(gs[3])
cb = plt.colorbar(p, cax = colorAx)
cb.set_label('RWU')

# line plot
ax2 = plt.subplot(gs[0])

ax2.spines['right'].set_visible(False)
ax2.spines['top'].set_visible(False)
ax2.xaxis.set_ticks_position('bottom')
ax2.yaxis.set_ticks_position('left')
ax2.set_yticks([0,1])
x=np.arange(1,151,1)
ax2.plot(x,v2,'k',lw=0.5)
plt.xlim(1,140)
plt.ylim(0,1.1)

plt.show()
</snippet></ROW><ROW><id>19411344</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

point1  = np.array([0,0,0])
normal1 = np.array([1,-2,1])

point2  = np.array([0,-4,0])
normal2 = np.array([0,2,-8])

point3  = np.array([0,0,1])
normal3 = np.array([-4,5,9])

# a plane is a*x+b*y+c*z+d=0
# [a,b,c] is the normal. Thus, we have to calculate
# d and we're set
d1 = -np.sum(point1*normal1)# dot product
d2 = -np.sum(point2*normal2)# dot product
d3 = -np.sum(point3*normal3)# dot product

# create x,y
xx, yy = np.meshgrid(range(30), range(30))

# calculate corresponding z
z1 = (-normal1[0]*xx - normal1[1]*yy - d1)*1./normal1[2]
z2 = (-normal2[0]*xx - normal2[1]*yy - d2)*1./normal2[2]
z3 = (-normal3[0]*xx - normal3[1]*yy - d3)*1./normal3[2]

# plot the surface
plt3d = plt.figure().gca(projection='3d')
plt3d.plot_surface(xx,yy,z1, color='blue')
plt3d.plot_surface(xx,yy,z2, color='yellow')
plt3d.plot_surface(xx,yy,z3, color='cyan')
plt.show()
</snippet></ROW><ROW><id>19411352</id><snippet>class Something(Base):
    __tablename__ = 'things'

    id = Column(Integer, primary_key=True)
    name = Column(String(50))
</snippet></ROW><ROW><id>19411352</id><snippet>| ID| Name  |
| 1 | Larry |
| 1 | Moe   |
| 1 | Curly |
</snippet></ROW><ROW><id>19411352</id><snippet>SELECT * FROM names
</snippet></ROW><ROW><id>19411352</id><snippet>execute</snippet></ROW><ROW><id>19411352</id><snippet>Something</snippet></ROW><ROW><id>19411352</id><snippet>Something</snippet></ROW><ROW><id>19411356</id><snippet>select</snippet></ROW><ROW><id>19411356</id><snippet>select</snippet></ROW><ROW><id>19411356</id><snippet>recv()</snippet></ROW><ROW><id>19411356</id><snippet>recv()</snippet></ROW><ROW><id>19411373</id><snippet>re.DOTALL</snippet></ROW><ROW><id>19411373</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>19411373</id><snippet>.</snippet></ROW><ROW><id>19411373</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>19411373</id><snippet>^</snippet></ROW><ROW><id>19411373</id><snippet>$</snippet></ROW><ROW><id>19411373</id><snippet>re.match(r'(.*?)(?=^$)', lines, re.DOTALL | re.MULTILINE).groups()
</snippet></ROW><ROW><id>19411373</id><snippet>\n{2}</snippet></ROW><ROW><id>19411373</id><snippet>re.match(r'(.*?)(?=\n{2})', lines, re.DOTALL).groups()
</snippet></ROW><ROW><id>19411488</id><snippet>dbc.close()</snippet></ROW><ROW><id>19411488</id><snippet>d is None</snippet></ROW><ROW><id>19411488</id><snippet>finally</snippet></ROW><ROW><id>19411488</id><snippet>dbc.close()</snippet></ROW><ROW><id>19411488</id><snippet>try:   
    myDB = MySQLdb.connect(host=..., port=..., user=..., passwd=..., db=...)   
    dbc = myDB.cursor()
    dbc.execute(stmt)
    d = "asdf"
    while d is not None:
        d = dbc.fetchone() #can also use fetchmany() to be more efficient
        yield d
except MySQLdb.Error, msg:
    print("MYSQL ERROR!")
    print msg
finally:
    dbc.close()
</snippet></ROW><ROW><id>19411499</id><snippet>yourNumber= input('Enter a number: ')
isPrime = 0
if yourNumber == 1:
    isPrime = 1
    print(yourNumber,'is not a prime number')
else : 
    for primeCheck in range (int(2), int(yourNumber)):
        if int(yourNumber)%int(primeCheck) == 0:
            isPrime = 1
            break
        else:
            isPrime = 0
    if isPrime == 0:
        print(yourNumber,'is a prime number')
    else:
        print(yourNumber,'is not a prime number')
</snippet></ROW><ROW><id>19411499</id><snippet>int(2), int(yourNumber), int(primeCheck)</snippet></ROW><ROW><id>19411499</id><snippet>yourNumber</snippet></ROW><ROW><id>19411499</id><snippet>input</snippet></ROW><ROW><id>19411499</id><snippet>primeCheck</snippet></ROW><ROW><id>19411499</id><snippet>2</snippet></ROW><ROW><id>19411499</id><snippet>int</snippet></ROW><ROW><id>19411499</id><snippet>if yourNumber == 1:</snippet></ROW><ROW><id>19411499</id><snippet>0</snippet></ROW><ROW><id>19411499</id><snippet>if yourNumber == 0 or  yourNumber == 1</snippet></ROW><ROW><id>19411499</id><snippet>numberPrimes = 0
startNumber = 0
currentNumber = startNumber
isPrime = 0
while numberPrimes &lt; 1000:
    if currentNumber == 1:
        currentNumber = currentNumber + 1
    else:
        for primeCheck in range (int(2), int(currentNumber)):
            if int(currentNumber)%primeCheck == 0:
                isPrime = 1
                break
            else:
                isPrime = 0
        if isPrime == 0:
            print(currentNumber, 'is prime')
            numberPrimes = numberPrimes + 1
            currentNumber == currentNumber + 1
        else:
            currentNumber == currentNumber + 1
</snippet></ROW><ROW><id>19411499</id><snippet>currentNumber == currentNumber + 1</snippet></ROW><ROW><id>19411499</id><snippet>currentNumber</snippet></ROW><ROW><id>19411499</id><snippet>currentNumber = currentNumber + 1</snippet></ROW><ROW><id>19411704</id><snippet>(</snippet></ROW><ROW><id>19411704</id><snippet>(</snippet></ROW><ROW><id>19411704</id><snippet>openp = [m.start() for m in re.finditer(r'\(', s)]
</snippet></ROW><ROW><id>19411704</id><snippet>openp = [m.start() for m in re.finditer(r'[(]', s)]
</snippet></ROW><ROW><id>19411704</id><snippet>re.escape()</snippet></ROW><ROW><id>19411704</id><snippet>substr_to_find = '('
substr_locs = [m.start() for m in re.finditer(re.escape(substr_to_find), s)]
</snippet></ROW><ROW><id>19411704</id><snippet>openp = [i for i, c in enumerate(s) if c == "("]
</snippet></ROW><ROW><id>19412156</id><snippet>encode/decode_lenght</snippet></ROW><ROW><id>19412156</id><snippet>def _sendFile(self, path): ...</snippet></ROW><ROW><id>19412156</id><snippet>self</snippet></ROW><ROW><id>19412156</id><snippet>self</snippet></ROW><ROW><id>19412156</id><snippet>from socket import *
class Client(object):

    def __init__(self):

        self.clientSocket = socket(AF_INET, SOCK_STREAM)

    def connect(self, addr):

        self.clientSocket.connect(addr)

    def _sendFile(self, path):

        sendfile = open(path, 'rb')
        data = sendfile.read()

        self._con.sendall(encode_length(len(data))) # Send the length as a fixed size message
        self._con.sendall(data)


        # Get Acknowledgement
        self._con.recv(1) # Just 1 byte

&gt;&gt;&gt; client = Client()
&gt;&gt;&gt; client.connect(("192.168.0.102", 21000))
&gt;&gt;&gt; client._sendFile(os.path.abspath("file_1.txt")) # If this file is in your current directory, you may just use "file_1.txt"
</snippet></ROW><ROW><id>19412156</id><snippet>Server</snippet></ROW><ROW><id>19412156</id><snippet>def encode_length(l):

    #Make it 4 bytes long
    l = str(l)
    while len(l) &lt; 4:
        l = "0"+l 
    return l

# Example of using
&gt;&gt;&gt; encode_length(4)
'0004'
&gt;&gt;&gt; encode_length(44)
'0044'
&gt;&gt;&gt; encode_length(444)
'0444'
&gt;&gt;&gt; encode_length(4444)
'4444'
</snippet></ROW><ROW><id>19412156</id><snippet>self</snippet></ROW><ROW><id>19412156</id><snippet>class someclass:
    def __init__(self):
        self.var = 10
    def get(self):
        return self.var

&gt;&gt;&gt; c = someclass()
&gt;&gt;&gt; c.get()
10
&gt;&gt;&gt; c.var = 20
&gt;&gt;&gt; c.get()
20
&gt;&gt;&gt; someclass.get(c)
20
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19412156</id><snippet>someclass.get(c)</snippet></ROW><ROW><id>19412156</id><snippet>someclass.get(c)</snippet></ROW><ROW><id>19412156</id><snippet>someclass</snippet></ROW><ROW><id>19412156</id><snippet>.get()</snippet></ROW><ROW><id>19412156</id><snippet>someclass</snippet></ROW><ROW><id>19412156</id><snippet>self</snippet></ROW><ROW><id>19412156</id><snippet>someclass.get(c)</snippet></ROW><ROW><id>19412156</id><snippet>c.get()</snippet></ROW><ROW><id>19412156</id><snippet>someclass.get()</snippet></ROW><ROW><id>19412156</id><snippet>self</snippet></ROW><ROW><id>19412156</id><snippet>TypeError: unbound method get() must be called with someclass instance as first argument (got nothing instead)</snippet></ROW><ROW><id>19412156</id><snippet>class someclass:
    def __init__(self):
        self.var = 10
    def get(self):
        return 10 # Raises an error
    @classmethod
    def get2(self):
        return 10 # Returns 10!
</snippet></ROW><ROW><id>19412224</id><snippet>screen=pygame.display.set_mode((400,400)) 
</snippet></ROW><ROW><id>19412233</id><snippet># Create some random test data
axis = -2
shape = np.random.randint(10, size=(5,))
data = np.random.rand(*shape)
data = np.sort(data, axis=axis)
z = np.random.rand(*shape)
dists = np.linspace(0,1, num=100)

data = np.rollaxis(data, axis, data.ndim)
new_shape = data.shape
data = data.reshape(-1, data.shape[-1])
z = np.rollaxis(z, axis, z.ndim)
z = z.reshape(-1, z.shape[-1])

out = np.empty(z.shape[:1]+dists.shape)
for o, x, f in zip(out, data, z):
    o[:] = np.interp(dists, x, f)

out = out.reshape(new_shape[:-1]+dists.shape)
out = np.rollaxis(out, -1, axis)
</snippet></ROW><ROW><id>19412419</id><snippet>text</snippet></ROW><ROW><id>19412419</id><snippet>words = list("abcdefg")
xs = np.random.randint(0,10,len(words))
ys = np.random.randint(0,10,len(words))

for x, y, s in zip(xs,ys,words):
    plt.text(x,y,s)
</snippet></ROW><ROW><id>19412565</id><snippet>radians</snippet></ROW><ROW><id>19412565</id><snippet>from math import sin, cos, sqrt, atan2, radians

R = 6373.0

lat1 = radians(52.2296756)
lon1 = radians(21.0122287)
lat2 = radians(52.406374)
lon2 = radians(16.9251681)

dlon = lon2 - lon1
dlat = lat2 - lat1
a = (sin(dlat/2))**2 + cos(lat1) * cos(lat2) * (sin(dlon/2))**2
c = 2 * atan2(sqrt(a), sqrt(1-a))
distance = R * c

print "Result", distance
print "Should be", 278.546
</snippet></ROW><ROW><id>19412565</id><snippet>278.545589351</snippet></ROW><ROW><id>19412700</id><snippet>ExitStack</snippet></ROW><ROW><id>19412700</id><snippet>with contextlib.ExitStack() as stack:
    files = [stack.enter_context(open(fname)) for fname in filenames]
    # All opened files will automatically be closed at the end of
    # the with statement, even if attempts to open files later
    # in the list raise an exception
</snippet></ROW><ROW><id>19412718</id><snippet>duplicateMap</snippet></ROW><ROW><id>19412718</id><snippet>Key: element in the list

Value: count of element
</snippet></ROW><ROW><id>19412718</id><snippet>1) if duplicateMap contains the element;
2) if the count is greater than 1.
</snippet></ROW><ROW><id>19412718</id><snippet>1) remove the element from the list;
2) remove the element from duplicateMap.
</snippet></ROW><ROW><id>19412772</id><snippet>chr</snippet></ROW><ROW><id>19412772</id><snippet>hex</snippet></ROW><ROW><id>19412772</id><snippet>&gt;&gt;&gt; myhexlist = [chr(int(hex_str, 16)) for hex_str in mylist]
&gt;&gt;&gt; myhexlist
['\xff', '4', '\x95', '\x11']
</snippet></ROW><ROW><id>19412772</id><snippet>\x##</snippet></ROW><ROW><id>19412825</id><snippet>simplejson</snippet></ROW><ROW><id>19412825</id><snippet>json</snippet></ROW><ROW><id>19412825</id><snippet>default()</snippet></ROW><ROW><id>19412825</id><snippet>json.JSONEncoder</snippet></ROW><ROW><id>19412895</id><snippet>0</snippet></ROW><ROW><id>19412895</id><snippet>null=True</snippet></ROW><ROW><id>19412895</id><snippet>blank=True</snippet></ROW><ROW><id>19413342</id><snippet>&gt;&gt;&gt; a = [1.3, 2.1, 9999., 5., 3.7 ,6.6, 9999., 7.4, 9999., 3.5, 7, 1.2, 9999.]
&gt;&gt;&gt; sorted(set(a))[-2]
7.4
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19413342</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit("a=range(10000000);print sorted(set(a))[-2]", number=10)
9999998
9999998
9999998
9999998
9999998
9999998
9999998
9999998
9999998
9999998
34.327036257401424
&gt;&gt;&gt; # This is NPE's answer
&gt;&gt;&gt; timeit("a=range(10000000);maxa = max(a);print max(val for val in a if val != maxa)", number=10)
9999998
9999998
9999998
9999998
9999998
9999998
9999998
9999998
9999998
9999998
53.22811809880869
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19413449</id><snippet>datetime.date.strftime</snippet></ROW><ROW><id>19413449</id><snippet>time.strftime</snippet></ROW><ROW><id>19413449</id><snippet>strftime(3)</snippet></ROW><ROW><id>19413449</id><snippet>LC_TIME</snippet></ROW><ROW><id>19413449</id><snippet>import locale
def date_format_encoding():
    return locale.getlocale(locale.LC_TIME)[1] or locale.getpreferredencoding()
</snippet></ROW><ROW><id>19413449</id><snippet>datetime.date.__str__</snippet></ROW><ROW><id>19413449</id><snippet>datetime.date.__str__</snippet></ROW><ROW><id>19413449</id><snippet>static PyObject *
date_str(PyDateTime_Date *self)
{
    return PyObject_CallMethod((PyObject *)self, "isoformat", "()");
}
</snippet></ROW><ROW><id>19413449</id><snippet>datetime.date.isoformat</snippet></ROW><ROW><id>19413449</id><snippet>static char *
isoformat_date(PyDateTime_Date *dt, char buffer[], int bufflen)
{
    int x;
    x = PyOS_snprintf(buffer, bufflen,
                      "%04d-%02d-%02d",
                      GET_YEAR(dt), GET_MONTH(dt), GET_DAY(dt));
    assert(bufflen &gt;= x);
    return buffer + x;
}
</snippet></ROW><ROW><id>19413449</id><snippet>str(datetime.date)</snippet></ROW><ROW><id>19413449</id><snippet>str(my_date).decode('ascii')
</snippet></ROW><ROW><id>19413521</id><snippet>plt.fill_between</snippet></ROW><ROW><id>19413521</id><snippet># Last-modified: 16 Oct 2013 05:08:28 PM
import numpy as np
import matplotlib.pyplot as plt

# generating fake data
locations = np.arange(0, 50, 1)
medians   = locations/(1.0+(locations/5.0)**2)
disps     = 0.1+0.5*locations/(1.0+(locations/5.0)**2.)
points    = np.empty([50, 100])
for i in xrange(50) :
    points[i,:] = np.random.normal(loc=medians[i], scale=disps[i], size=100)

# finding percentiles
pcts = np.array([20, 35, 45, 55, 65, 80])
layers = np.empty([50, 6])
for i in xrange(50) : 
    _sorted = np.sort(points[i,:])
    layers[i, :] = _sorted[pcts]

# plot the layers
colors = ["blue", "green", "red", "green", "blue"]
for i in xrange(5) :
    plt.fill_between(locations, layers[:, i], layers[:, i+1], color=colors[i])
plt.show()
</snippet></ROW><ROW><id>19413846</id><snippet>.pyc</snippet></ROW><ROW><id>19413846</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     # in the interpreter, comments will do the same job as newlines
...     baz
...     # extra newlines or comments push the bytecode offsets
...     return 42
... 
&gt;&gt;&gt; def bar():
...     baz
...     return 42
... 
&gt;&gt;&gt; dis.dis(foo)
  3           0 LOAD_GLOBAL              0 (baz)
              3 POP_TOP             

  5           4 LOAD_CONST               1 (42)
              7 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(bar)
  2           0 LOAD_GLOBAL              0 (baz)
              3 POP_TOP             

  3           4 LOAD_CONST               1 (42)
              7 RETURN_VALUE        
</snippet></ROW><ROW><id>19413846</id><snippet>&gt;&gt;&gt; foo.__code__.co_lnotab
'\x00\x02\x04\x02'
&gt;&gt;&gt; bar.__code__.co_lnotab
'\x00\x01\x04\x01'
&gt;&gt;&gt; foo.__code__.co_code == bar.__code__.co_code
True
</snippet></ROW><ROW><id>19413849</id><snippet>yield</snippet></ROW><ROW><id>19413849</id><snippet>join</snippet></ROW><ROW><id>19413849</id><snippet>join_gen = bot.join(channels)
for error_msg in join_gen:
    print error_msg
</snippet></ROW><ROW><id>19413849</id><snippet>response</snippet></ROW><ROW><id>19413874</id><snippet>import httplib2
import pprint

from apiclient.discovery import build
from oauth2client.client import SignedJwtAssertionCredentials

# Get the private key from the Google supplied private key file.
f = file("your_private_key_file.p12", "rb")
key = f.read()
f.close()

# Create the JWT
credentials = SignedJwtAssertionCredentials(
  "xxxxxxxxxx@developer.gserviceaccount.com", key,
  scope="https://www.googleapis.com/auth/calendar"
)

# Create an authorized http instance
http = httplib2.Http()
http = credentials.authorize(http)

# Create a service call to the calendar API
service = build("calendar", "v3", http=http)

# List all calendars.
lists = service.calendarList().list(pageToken=None).execute(http=http)
pprint.pprint(lists)
</snippet></ROW><ROW><id>19413874</id><snippet>app.yaml</snippet></ROW><ROW><id>19413874</id><snippet>libraries:
- name: pycrypto
  version: "latest"
</snippet></ROW><ROW><id>19414051</id><snippet>from django.shortcuts import get_object_or_404

def SomeView(request):
    obj = SomeModel.objects.all()
    if request.GET.get('pk') is not None:
        obj = get_object_or_404(SomeModel, pk=request.GET.get('pk'))
    return HttpResponse(serializers.serialize('json', obj), content_type="application/json")
</snippet></ROW><ROW><id>19414269</id><snippet>ATIO</snippet></ROW><ROW><id>19414269</id><snippet>ATMY</snippet></ROW><ROW><id>19414269</id><snippet>ATSH</snippet></ROW><ROW><id>19414269</id><snippet>ATSL</snippet></ROW><ROW><id>19414269</id><snippet>ZigBee</snippet></ROW><ROW><id>19414269</id><snippet>ATIO</snippet></ROW><ROW><id>19414270</id><snippet>for elements in temp1:
</snippet></ROW><ROW><id>19414270</id><snippet>for element in temp1:
</snippet></ROW><ROW><id>19414270</id><snippet>import xlwt
import xlrd
import sys
#Create workbook and worksheet

wbk = xlwt.Workbook()
dest_sheet = wbk.add_sheet('Data_1')

for sheet_idx in range(1, 3):
  sheet = xlrd.open_workbook('Data_%d.xls' % sheet_idx).sheet_by_index(0)

  for i in range(5):
    values = sheet.row_values(i)
    for idx, element in enumerate(values):
      dest_sheet.write(i, sheet_idx+idx, element)

wbk.save('DATA.xls')
</snippet></ROW><ROW><id>19414306</id><snippet>def spherical_dist(pos1, pos2, r=3958.75):
    pos1 = pos1 * np.pi / 180
    pos2 = pos2 * np.pi / 180
    cos_lat1 = np.cos(pos1[..., 0])
    cos_lat2 = np.cos(pos2[..., 0])
    cos_lat_d = np.cos(pos1[..., 0] - pos2[..., 0])
    cos_lon_d = np.cos(pos1[..., 1] - pos2[..., 1])
    return r * np.arccos(cos_lat_d - cos_lat1 * cos_lat2 * (1 - cos_lon_d))
</snippet></ROW><ROW><id>19414306</id><snippet>&gt;&gt;&gt; spherical_dist(locations_1[:, None], locations_2)
array([[ 186.13522573,  345.46610882,  566.23466349,  282.51056676],
       [ 187.96657622,  589.43369894,  555.55312473,  436.88855214],
       [ 149.5853537 ,  297.56950329,  440.81203371,  387.12153747]])
</snippet></ROW><ROW><id>19414306</id><snippet>&gt;&gt;&gt; spherical_dist(locations_1, locations_2[:-1])
array([ 186.13522573,  589.43369894,  440.81203371])
</snippet></ROW><ROW><id>19414306</id><snippet>&gt;&gt;&gt; spherical_dist(locations_1[0], locations_2[0])
186.1352257300577
</snippet></ROW><ROW><id>19414476</id><snippet>A</snippet></ROW><ROW><id>19414476</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>19414476</id><snippet>foo</snippet></ROW><ROW><id>19414476</id><snippet>A</snippet></ROW><ROW><id>19414476</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>19414476</id><snippet>def foo(i):
  print len(A)      # A is local to main(), so this will raise an exception
  return i &lt; len(A)

def main():
  A = [12]
  print A 
  foo(10)

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>19414594</id><snippet> 1 2 3 4 5 6 7 
 _ _ _ _ _ _ _ 
|_|A|_|_|_|_|_|
|_|_|B|_|_|_|_|
|_|_|_|C|_|_|_|
|_|_|_|_|D|_|_|
|_|_|_|_|_|_|_|
|_|_|_|_|_|_|_|
</snippet></ROW><ROW><id>19414594</id><snippet>diagonal = board[2][0] + board[3][1] + board[4][2] + board[5][3]
</snippet></ROW><ROW><id>19414594</id><snippet>ABCD</snippet></ROW><ROW><id>19414594</id><snippet>diagonal</snippet></ROW><ROW><id>19414594</id><snippet>board[2][0]</snippet></ROW><ROW><id>19414594</id><snippet>A</snippet></ROW><ROW><id>19414594</id><snippet>board[3][1]</snippet></ROW><ROW><id>19414594</id><snippet>B</snippet></ROW><ROW><id>19414594</id><snippet>ABCD</snippet></ROW><ROW><id>19414594</id><snippet>if</snippet></ROW><ROW><id>19414594</id><snippet>diagonal</snippet></ROW><ROW><id>19414594</id><snippet>X</snippet></ROW><ROW><id>19414594</id><snippet>if</snippet></ROW><ROW><id>19414594</id><snippet>XXXX</snippet></ROW><ROW><id>19414594</id><snippet>ABCD</snippet></ROW><ROW><id>19414594</id><snippet>True</snippet></ROW><ROW><id>19414775</id><snippet>initialOutstandingBalance</snippet></ROW><ROW><id>19414775</id><snippet>float</snippet></ROW><ROW><id>19414775</id><snippet>current_balance = initialOutstandingBalance
for month in range(1,13):
    print("Month: "+ str(month))
    minimumMonthlyPayment = minimumMonthlyPaymentRate * current_balance
    # this calculation is almost certainly wrong, but is preserved from your starting code
    interestPaid = annualInterestRate / (12*current_balance)
    principalPaid = minimumMonthlyPayment - interestPaid
    current_balance = current_balance - principalPaid
    print("Minimum monthly payment: $"+str(minimumMonthlyPayment))
    print("Principle paid: $"+str(principalPaid))
    print("Remaining Balance: $"+str(current_balance))
</snippet></ROW><ROW><id>19414889</id><snippet>class UrlData(object):
    def __init__(self, num_of_urls, url_pattern):
        self.num_of_urls = num_of_urls
        self.url_pattern = url_pattern

    def url_list(self):
        # Returns a list of strings that represent the urls you want based on num_of_urls
        # e.g. asite.com/?search?start=10
        urls = []
        for i in xrange(self.num_of_urls):
            urls.append(self.url_pattern + 'start=' + str((i + 1) * 10))
        return urls
</snippet></ROW><ROW><id>19414889</id><snippet># Create a UrlData object from NumberOfUrlsFound and a url_pattern
# url_pattern being the asite.com/?search?start=
url_data = UrlData(NumberOfUrlsFound, getDomainLinksFromGoogle) 

return render(request, template, {'url_data': url_data, ...})
</snippet></ROW><ROW><id>19414889</id><snippet># Mirroring your check
{% if url_data.num_of_urls &gt; 1 %} 
    # We'll iterate through the url_list created from the function defined in UrlData
    {% for url in url_data.url_list %}
         {{ url }} # asite.com/?search...
    {% endfor %}
{% endif %}
</snippet></ROW><ROW><id>19414889</id><snippet>url_data.url_list</snippet></ROW><ROW><id>19414889</id><snippet>UrlData</snippet></ROW><ROW><id>19415086</id><snippet>from numpy.lib.stride_tricks import as_strided

arr = np.arange(1, 25).reshape(4, 6) % 10
sub_shape = (3, 3)
view_shape = tuple(np.subtract(arr.shape, sub_shape) + 1) + sub_shape
arr_view = as_strided(arr, view_shape, arr.strides * 2
arr_view = arr_view.reshape((-1,) + sub_shape)

&gt;&gt;&gt; arr_view
array([[[[1, 2, 3],
         [7, 8, 9],
         [3, 4, 5]],

        [[2, 3, 4],
         [8, 9, 0],
         [4, 5, 6]],

        ...

        [[9, 0, 1],
         [5, 6, 7],
         [1, 2, 3]],

        [[0, 1, 2],
         [6, 7, 8],
         [2, 3, 4]]]])
</snippet></ROW><ROW><id>19415225</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; f = 1.2717441261e+20
&gt;&gt;&gt; struct.pack('f', f)
'\xc9\x9c\xdc`'
</snippet></ROW><ROW><id>19415225</id><snippet>&gt;&gt;&gt; struct.pack('f', f).encode('hex')
'c99cdc60'
</snippet></ROW><ROW><id>19415225</id><snippet>&gt;&gt;&gt; s = struct.pack('f', f).encode('hex')
&gt;&gt;&gt; int(s, 16)
3382500448
</snippet></ROW><ROW><id>19415225</id><snippet>&gt;&gt;&gt; hex(int(s, 16))
'0xc99cdc60'
</snippet></ROW><ROW><id>19415433</id><snippet>7.65</snippet></ROW><ROW><id>19415433</id><snippet>7.65321</snippet></ROW><ROW><id>19415433</id><snippet>float</snippet></ROW><ROW><id>19415433</id><snippet>7.65</snippet></ROW><ROW><id>19415433</id><snippet>7.65</snippet></ROW><ROW><id>19415433</id><snippet>7.650000000000000355271368</snippet></ROW><ROW><id>19415433</id><snippet>float</snippet></ROW><ROW><id>19415433</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>19415433</id><snippet>&gt;&gt;&gt; f = 7.65321
&gt;&gt;&gt; s = '%.2f' % f
&gt;&gt;&gt; d = decimal.Decimal(s)
&gt;&gt;&gt; f, s, d
(7.65321, '7.65', Decimal('7.65'))
</snippet></ROW><ROW><id>19415433</id><snippet>.2f</snippet></ROW><ROW><id>19415433</id><snippet>DNumber</snippet></ROW><ROW><id>19415433</id><snippet>if DNumber &lt;= 8:
</snippet></ROW><ROW><id>19415433</id><snippet>False</snippet></ROW><ROW><id>19415433</id><snippet>TypeError</snippet></ROW><ROW><id>19415433</id><snippet>if DNumber &lt;= float(8):
</snippet></ROW><ROW><id>19415433</id><snippet>str</snippet></ROW><ROW><id>19415433</id><snippet>int</snippet></ROW><ROW><id>19415433</id><snippet>str</snippet></ROW><ROW><id>19415433</id><snippet>float</snippet></ROW><ROW><id>19415433</id><snippet>float(8)</snippet></ROW><ROW><id>19415433</id><snippet>8.0</snippet></ROW><ROW><id>19415433</id><snippet>if DNumber:
</snippet></ROW><ROW><id>19415433</id><snippet>if foo</snippet></ROW><ROW><id>19415433</id><snippet>float</snippet></ROW><ROW><id>19415433</id><snippet>float</snippet></ROW><ROW><id>19415433</id><snippet>str</snippet></ROW><ROW><id>19415433</id><snippet>if foo</snippet></ROW><ROW><id>19415433</id><snippet>0</snippet></ROW><ROW><id>19415433</id><snippet>"0.00"</snippet></ROW><ROW><id>19415433</id><snippet>double</snippet></ROW><ROW><id>19415433</id><snippet>None</snippet></ROW><ROW><id>19415471</id><snippet>print len(set([1,1,2,2,3,3]))
</snippet></ROW><ROW><id>19415471</id><snippet>set</snippet></ROW><ROW><id>19415525</id><snippet>In [1]: import networkx as nx

In [2]: G = nx.read_graphml('KeggCompleteEng.graphml')

In [3]: type(G)
Out[3]: networkx.classes.multigraph.MultiGraph

In [4]: G.number_of_edges()
Out[4]: 7123

In [5]: H = nx.Graph(G) # convert to graph, remove parallel edges

In [6]: H.number_of_edges()
Out[6]: 6160
</snippet></ROW><ROW><id>19415525</id><snippet>for e,v in BasicGraph.edges_iter():
    BasicGraph[e][v]['test'] = 'test'
</snippet></ROW><ROW><id>19415525</id><snippet>In [7]: G = nx.MultiGraph()

In [8]: G.add_edge(1,2,key='one')

In [9]: G.add_edge(1,2,key='two')

In [10]: G.edges(keys=True)
Out[10]: [(1, 2, 'two'), (1, 2, 'one')]

In [11]: G.add_edge(1,2,key='one',color='red')

In [12]: G.add_edge(1,2,key='two',color='blue')

In [13]: G.edges(keys=True,data=True)
Out[13]: [(1, 2, 'two', {'color': 'blue'}), (1, 2, 'one', {'color': 'red'})]
</snippet></ROW><ROW><id>19415617</id><snippet>&amp;</snippet></ROW><ROW><id>19415617</id><snippet>python /path/to/tcprelay.py -t 22:2222 &amp;
</snippet></ROW><ROW><id>19415617</id><snippet>bash</snippet></ROW><ROW><id>19415617</id><snippet>fg</snippet></ROW><ROW><id>19415617</id><snippet>jobs</snippet></ROW><ROW><id>19415647</id><snippet>'id'</snippet></ROW><ROW><id>19415647</id><snippet>import itertools

d = [{'id':1,'key1':'value1','key2':'value2'},{'id':1,'key1':'value3','key2':'value4'}, \
        {'id':1,'key4':'value5'}, {'id':2,'key1':'value3','key2':'value4'}]

for id, group in itertools.groupby(d, lambda x : x['id']):
    key_line = 'id'
    values_line = str(id)
    for g in group:
        for key in sorted(g.keys()):
            if key == 'id':
                continue
            key_line += ',{0}'.format(key)
            values_line += ',{0}'.format(g[key])

    print key_line
    print values_line
</snippet></ROW><ROW><id>19415647</id><snippet>id,key1,key2,key1,key2,key4
1,value1,value2,value3,value4,value5
id,key1,key2
2,value3,value4
</snippet></ROW><ROW><id>19415666</id><snippet>t[t_index]</snippet></ROW><ROW><id>19415666</id><snippet>rgbimage = pallet[image]</snippet></ROW><ROW><id>19415666</id><snippet>s = np.random.random((54, 54))
t = np.random.random((54, 54))
axis = 0

t_index = s.argsort(axis)
idx = np.ogrid[:t.shape[0], :t.shape[1]]
idx[axis] = t_index
t_sort = t[idx]
</snippet></ROW><ROW><id>19415666</id><snippet>ogrid</snippet></ROW><ROW><id>19415666</id><snippet>t</snippet></ROW><ROW><id>19415666</id><snippet>t = np.arange((12)).reshape(3, 4)
print t
# [[ 0,  1,  2,  3],
#  [ 4,  5,  6,  7],
#  [ 8,  9, 10, 11]]

print t[[0, 3], :]
# [[ 0  1  2  3]
#  [ 8  9 10 11]]
</snippet></ROW><ROW><id>19415666</id><snippet>row_index = [[0, 2],
             [0, 2],
             [1, 2],
             [0, 1]]
t[row_index]
# Which in python is the same as
t[row_index, :]
</snippet></ROW><ROW><id>19415666</id><snippet>:</snippet></ROW><ROW><id>19415666</id><snippet>row_index = [[0, 2],
             [0, 2],
             [1, 2],
             [0, 1]]
column_index = [[0, 0],
                [1, 1],
                [2, 2],
                [3, 3]]
t[row_index, column_index]
</snippet></ROW><ROW><id>19415666</id><snippet>column_index = [[0],
                [1],
                [2],
                [3]]
</snippet></ROW><ROW><id>19415740</id><snippet>y = ''.join('0' if i == j else '1' for i, j in zip(a,b))
</snippet></ROW><ROW><id>19415740</id><snippet>y = ''.join('0' if i == j else '1' for i, j in zip(a[::-1],b[::-1])[::-1])
y = a[len(y):] + b[len(y):] + y
</snippet></ROW><ROW><id>19415878</id><snippet>hxs.select('//div[@class="price"]/text()').extract()[0]
</snippet></ROW><ROW><id>19415972</id><snippet>xlrd</snippet></ROW><ROW><id>19415972</id><snippet>import xlrd
print xlrd.colname(56)
# BE
</snippet></ROW><ROW><id>19415972</id><snippet>xlwt</snippet></ROW><ROW><id>19415972</id><snippet>xlwt.Utils</snippet></ROW><ROW><id>19415972</id><snippet>&gt;&gt;&gt; xlwt.Utils.rowcol_to_cell(5, 2)
'C6'
</snippet></ROW><ROW><id>19415994</id><snippet>webservice = http.client.HTTPConnection("login.etherios.com ", 80)
</snippet></ROW><ROW><id>19415994</id><snippet>"login.etherios.com "</snippet></ROW><ROW><id>19415994</id><snippet>&gt;&gt;&gt; socket.getaddrinfo('login.etherios.com', 80, 0, socket.SOCK_STREAM)
[(2, 1, 6, '', ('108.166.22.160', 80))]
&gt;&gt;&gt; socket.getaddrinfo('login.etherios.com ', 80, 0, socket.SOCK_STREAM)
gaierror: [Errno 8] nodename nor servname provided, or not known
</snippet></ROW><ROW><id>19415994</id><snippet>gaierror</snippet></ROW><ROW><id>19415994</id><snippet>FileNotFoundError</snippet></ROW><ROW><id>19415994</id><snippet>webservice.endheaders()</snippet></ROW><ROW><id>19416005</id><snippet>stack_size()</snippet></ROW><ROW><id>19416005</id><snippet>    threading.stack_size(64*1024)
</snippet></ROW><ROW><id>19416075</id><snippet>uppercase</snippet></ROW><ROW><id>19416075</id><snippet>upper</snippet></ROW><ROW><id>19416075</id><snippet>upper</snippet></ROW><ROW><id>19416075</id><snippet>'text &lt;built-in method upper of str object at 0x12345678&gt; data'</snippet></ROW><ROW><id>19416075</id><snippet>format</snippet></ROW><ROW><id>19416075</id><snippet>string = 'text {name} data'.format(name=row['Name'].upper())
</snippet></ROW><ROW><id>19416193</id><snippet>yield</snippet></ROW><ROW><id>19416193</id><snippet>return</snippet></ROW><ROW><id>19416193</id><snippet>def solve(args, result_so_far):
    if not slow_check_is_feasible(result_so_far):
        #dead-end
        return None

    if not args:
        #valid and done
        return result_so_far

    for i, item in enumerate(args):
        #pass list without args - slow
        new_args = args[:]
        del new_args[i]
        result = solve(new_args, accumulate_result(result_so_far, item)
        if result is not None:
            #found it, we are done
            return result
        #otherwise keep going
</snippet></ROW><ROW><id>19416193</id><snippet>def solve_all(args, result_so_far):
    if not slow_check_is_feasible(result_so_far):
        #dead-end
        return

    if not args:
        #yield since result was good
        yield result_so_far
        return

    for i, item in enumerate(args):
        #pass list without args - slow
        new_args = args[:]
        del new_args[i]
        for result in solve(new_args, accumulate_result(result_so_far, item):
            yield result
</snippet></ROW><ROW><id>19416206</id><snippet>/System/Library/Frameworks/Python.Framework/&lt;verson&gt;</snippet></ROW><ROW><id>19416206</id><snippet>/Library/Python/&lt;version&gt;/site-packages</snippet></ROW><ROW><id>19416206</id><snippet>/usr/local</snippet></ROW><ROW><id>19416206</id><snippet>$ /usr/local/bin/python
&gt;&gt;&gt; import praw
</snippet></ROW><ROW><id>19416206</id><snippet>sudo easy_install pip</snippet></ROW><ROW><id>19416206</id><snippet>brew install python</snippet></ROW><ROW><id>19416206</id><snippet>which python</snippet></ROW><ROW><id>19416206</id><snippet>which pip</snippet></ROW><ROW><id>19416218</id><snippet>dict</snippet></ROW><ROW><id>19416218</id><snippet>NSDictionary</snippet></ROW><ROW><id>19416218</id><snippet>&gt;&gt;&gt; import AppKit
&gt;&gt;&gt; path = os.path.expanduser('~/src/foo.xcodeproj/project.pbxproj')
&gt;&gt;&gt; d = AppKit.NSDictionary.dictionaryWithContentsOfFile_(path)
</snippet></ROW><ROW><id>19416218</id><snippet>NSDictionary</snippet></ROW><ROW><id>19416218</id><snippet>plist</snippet></ROW><ROW><id>19416218</id><snippet>dict</snippet></ROW><ROW><id>19416218</id><snippet>objects</snippet></ROW><ROW><id>19416372</id><snippet>
export PATH=/Users/your-user-name/Library/Enthought/Canopy_64bit/User/bin:${PATH}
</snippet></ROW><ROW><id>19416372</id><snippet>import sys
print sys.prefix
</snippet></ROW><ROW><id>19416411</id><snippet>
color =  models.ManyToManyField(User)
</snippet></ROW><ROW><id>19416423</id><snippet>json.dumps(params)</snippet></ROW><ROW><id>19416423</id><snippet>urllib.urlencode(params)</snippet></ROW><ROW><id>19416423</id><snippet>urlopen</snippet></ROW><ROW><id>19416423</id><snippet>params = {
  'item': 'temperature',
  'data': '25.00'
}

r = urllib2.Request(url, json.dumps(params),
                    headers={'Content-Type': 'application/json'})
response = urllib2.urlopen(r).read()
</snippet></ROW><ROW><id>19416423</id><snippet>requests</snippet></ROW><ROW><id>19416423</id><snippet>r = urllib2.Request(url, json.dumps(params),
                    headers={'Content-Type': 'application/json'})
response = urllib2.urlopen(r).read()
</snippet></ROW><ROW><id>19416423</id><snippet>r = requests.post(url, data=json.dumps(params), 
                  headers={'Content-Type': 'application/json'})
response = r.text
</snippet></ROW><ROW><id>19416655</id><snippet>numb</snippet></ROW><ROW><id>19416655</id><snippet>if numb%2 == 0:
</snippet></ROW><ROW><id>19416655</id><snippet>for i in range(len(sublist)-1):
    if sublist[i]%2 == 0:
</snippet></ROW><ROW><id>19416655</id><snippet>for i, numb in enumerate(sublist):
    if numb%2 == 0:
</snippet></ROW><ROW><id>19416655</id><snippet>else</snippet></ROW><ROW><id>19416655</id><snippet>for</snippet></ROW><ROW><id>19416655</id><snippet>for numb in sublist:
    if numb%2 != 0:
        break
else:
    even_list.append(sublist)
</snippet></ROW><ROW><id>19416806</id><snippet>set</snippet></ROW><ROW><id>19416806</id><snippet>&gt;&gt;&gt; a = [(1,2,2), (2,2,1), (1,2,2), (4,3,5), (3,3,5), (3,3,5), (3,4,5)]
&gt;&gt;&gt; set(a)
set([(1, 2, 2), (2, 2, 1), (3, 4, 5), (3, 3, 5), (4, 3, 5)])
&gt;&gt;&gt; list(set(a))
[(1, 2, 2), (2, 2, 1), (3, 4, 5), (3, 3, 5), (4, 3, 5)]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19416806</id><snippet>set</snippet></ROW><ROW><id>19416899</id><snippet>module Say
  class Speaker 
    def speak(word) end
    def Do() speak("Hello") end
  end
end 
</snippet></ROW><ROW><id>19416899</id><snippet>require 'say'
class Test &lt; Say::Speaker
  def speak(word)
    puts(word)
  end  
end
</snippet></ROW><ROW><id>19416899</id><snippet>Test.new.Do
</snippet></ROW><ROW><id>19416934</id><snippet>max([y[i] for i in range(len(y)) if x[i] &gt; 3 and y[i]&gt;2])
</snippet></ROW><ROW><id>19416942</id><snippet>inspect</snippet></ROW><ROW><id>19416942</id><snippet>&gt;&gt;&gt; dict(zip(f2.func_code.co_freevars, (c.cell_contents for c in f2.func_closure)))
{'x': 2}
</snippet></ROW><ROW><id>19417089</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; x=(65,222,102,102)
&gt;&gt;&gt; struct.unpack('&gt;L',bytes(x))[0]
1105094246
</snippet></ROW><ROW><id>19417089</id><snippet>bytes</snippet></ROW><ROW><id>19417089</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; x=(65,222,102,102)
&gt;&gt;&gt; struct.unpack('&gt;L',struct.pack('4B',*x))[0]
1105094246
</snippet></ROW><ROW><id>19417089</id><snippet>*x</snippet></ROW><ROW><id>19417089</id><snippet>pack</snippet></ROW><ROW><id>19417241</id><snippet>from __future__ import print_function
from __future__ import division
from math import pi

G = 6.67428*(10**-11)

user_circum = raw_input("Circumference (km) of planet? ")
user_acc = raw_input("Acceleration due to gravity (m/s^2)?")

def display_results(radius, mass, velocity):
    print("Radius of the planet {:.1f}km".format(radius/1000))
    print("Mass of the planet {:.1f}(10^21 kg)".format(mass/10**21))
    print("Escape velocity of the planet {:.1f}(km.s)".format(velocity/1000))

def escape_velocity(circumference, acceleration):
    circumference = float(circumference)
    acceleration = float(acceleration)
    radius = circumference*1000/(2*pi)
    mass = (acceleration * radius ** 2)/G
    vEscape = ((2*G*mass)/radius) ** 0.5
    display_results(radius, mass, vEscape)                                                                                                                                     

escape_velocity(user_circum, use_acc)
</snippet></ROW><ROW><id>19417314</id><snippet>#!/remote/Python-2.7.2-shared/linux32/bin/python
</snippet></ROW><ROW><id>19417314</id><snippet>#!/remote/Python-2.7/bin/python
</snippet></ROW><ROW><id>19417314</id><snippet>$ /remote/Python-2.7/bin/python
Python 2.7.3 (default, Dec 18 2012, 13:50:09)
[GCC 4.5.3] on cygwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19417314</id><snippet>#!/bin/env python</snippet></ROW><ROW><id>19417323</id><snippet>from ctypes import windll, wintypes, byref

SPI_GETWORKAREA = 48
SM_CYSCREEN = 1

def get_taskbar_size():
    SystemParametersInfo = windll.user32.SystemParametersInfoA
    work_area = wintypes.RECT()
    if (SystemParametersInfo(SPI_GETWORKAREA, 0, byref(work_area), 0)):
        GetSystemMetrics = windll.user32.GetSystemMetrics
        return GetSystemMetrics(SM_CYSCREEN) - work_area.bottom

print get_taskbar_size()  # 30
</snippet></ROW><ROW><id>19417323</id><snippet>get_taskbar_size</snippet></ROW><ROW><id>19417323</id><snippet>None</snippet></ROW><ROW><id>19417511</id><snippet>itertools.product</snippet></ROW><ROW><id>19417511</id><snippet>[p for p in itertools.product(*x)]
</snippet></ROW><ROW><id>19417555</id><snippet>    from scrapy.selector import HtmlXPathSelector
</snippet></ROW><ROW><id>19417555</id><snippet>    sel = HtmlXPathSelector(response)
    site_names = sel.select('//ul/li')
</snippet></ROW><ROW><id>19417555</id><snippet>    from scrapy.spider import BaseSpider
    from scrapy.selector import HtmlXPathSelector

    class DmozSpider(BaseSpider):
        name = "dmoz"
        allowed_domains = ["dmoz.org"]
        start_urls = [
            "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
            "http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
        ]

        def parse(self, response):
            sel = HtmlXPathSelector(response)
            sites = sel.select('//ul/li')

            for site in sites:
                title = site.select('a/text()').extract()
                link = site.select('a/@href').extract()
                desc = site.select('text()').extract()
                print title, link, desc
</snippet></ROW><ROW><id>19417909</id><snippet>+=</snippet></ROW><ROW><id>19417909</id><snippet>a[3:] += [a:-3]</snippet></ROW><ROW><id>19417909</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; 
&gt;&gt;&gt; for i in range(3, 10):
...     print('a[{}] ({}) += a[{}] ({})'.format(i, a[i], i-3, a[i-3]))
...     a[i] += a[i-3]
...     print('  a[{}] -&gt; {}'.format(i, a[i]))
... 
a[3] (3) += a[0] (0)
  a[3] -&gt; 3
a[4] (4) += a[1] (1)
  a[4] -&gt; 5
a[5] (5) += a[2] (2)
  a[5] -&gt; 7
a[6] (6) += a[3] (3)
  a[6] -&gt; 9
a[7] (7) += a[4] (5)  # NOTE: not (4)
  a[7] -&gt; 12
a[8] (8) += a[5] (7)
  a[8] -&gt; 15
a[9] (9) += a[6] (9)
  a[9] -&gt; 18
</snippet></ROW><ROW><id>19417909</id><snippet>&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; a[3:] += np.copy(a[:-3]) # OR np.array(a[:-3])
&gt;&gt;&gt; a
array([ 0,  1,  2,  3,  5,  7,  9, 11, 13, 15])
</snippet></ROW><ROW><id>19418025</id><snippet>&gt;&gt;&gt; N = 1000
&gt;&gt;&gt; df = pd.DataFrame(np.random.randint(0, 10, (N, 3)), columns="A B C".split()) 
&gt;&gt;&gt; df.head()
   A  B  C
0  7  4  5
1  5  1  3
2  8  9  8
3  2  3  0
4  2  3  0
</snippet></ROW><ROW><id>19418025</id><snippet>&gt;&gt;&gt; df.groupby(["A", "B"]).size().order().iloc[-10:]
A  B
6  1    13
1  0    14
4  0    14
7  2    14
1  6    15
8  2    15
1  8    16
2  6    16
6  4    16
7  4    16
dtype: int64
</snippet></ROW><ROW><id>19418025</id><snippet>groupby</snippet></ROW><ROW><id>19418025</id><snippet>(A, B)</snippet></ROW><ROW><id>19418025</id><snippet>size</snippet></ROW><ROW><id>19418025</id><snippet>order</snippet></ROW><ROW><id>19418025</id><snippet>Series</snippet></ROW><ROW><id>19418025</id><snippet>iloc</snippet></ROW><ROW><id>19418025</id><snippet>Series</snippet></ROW><ROW><id>19418025</id><snippet>Series</snippet></ROW><ROW><id>19418025</id><snippet>DataFrame</snippet></ROW><ROW><id>19418025</id><snippet>pd.DataFrame</snippet></ROW><ROW><id>19418312</id><snippet>from collections import deque

d = deque()
try:
    d.pop()
except IndexError:
    pass  # do whatever you want in the case that there is nothing there
    return False # is this what you want?
else:
    pass  # do whatever you want in the case that there is something there
</snippet></ROW><ROW><id>19418337</id><snippet>self.cookieJar = cookielib.LWPCookieJar()
self.opener = urllib2.build_opener(


    urllib2.HTTPCookieProcessor(self.cookieJar),
    urllib2.HTTPRedirectHandler(),
    urllib2.HTTPHandler(debuglevel=0))

self.opener.addheaders = [('User-agent', "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36")]


forms = {"username": #username here ,
         "password": #password here
        }

data = urllib.urlencode(forms)
req = urllib2.Request('http://moodle.pucrs.br/login/index.php',data)
res = self.opener.open(req)
self.login_html = res.read()
</snippet></ROW><ROW><id>19418337</id><snippet>password</snippet></ROW><ROW><id>19418337</id><snippet>username</snippet></ROW><ROW><id>19418452</id><snippet>import pygame
import base64
import xml.etree.ElementTree as ET
pygame.init()
dirt_image = pygame.image.load('dirt.gif')
dirt_xy = dirt_image.get_size()

# incantation starts here
# The result of tostring is a bytestring with basically binary data.
dirt_bytes = pygame.image.tostring(dirt_image, 'RGBX', False)
# b64 encode so that we have all printable characters in the string.
# Otherwise elementtree doesn't want to accept the content.
# The result is another byte string but with printable characters.
dirt_bytes_in_64 = base64.b64encode(dirt_bytes)
# in Python 3, ElementTree complains about bytestrings so we further encode
# it into utf-8. In Python 2, this is not necessary.
dirt_bytes_in_64_in_utf8 = dirt_bytes_in_64.decode('utf-8')

# ElementTree create, save, restore
root = ET.Element("root")
dirt = ET.SubElement(root, 'dirt')
dirt.set('bytes64utf8', dirt_bytes_in_64_in_utf8)
tree = ET.ElementTree(root)
tree.write('images.xml')
tree_restored = ET.parse('images.xml')
dirt_bytes_in_64_in_utf8_restored = tree_restored.find('dirt').get('bytes64utf8')

# Convert from utf-8 back to base64 bytestring.
dirt_bytes_in_64_restored = dirt_bytes_in_64_in_utf8_restored.encode('utf-8')
# Convert from base64 bytestring into the original binary bytestring
dirt_bytes_restored = base64.b64decode(dirt_bytes_in_64_restored)

# Shazam. (for me at least)
restored_image = pygame.image.fromstring(dirt_bytes_restored, dirt_xy, 'RGBX')
display_surf = pygame.display.set_mode((500, 500))
display_surf.blit(dirt_image, (0, 0))
display_surf.blit(restored_image, (32, 32))
pygame.display.flip()
</snippet></ROW><ROW><id>19418702</id><snippet>$ brew install mysql
$ pip install virtualenv
$ virtualenv foo
$ source foo/bin/activate
$ pip install django
$ pip install mysql-python
</snippet></ROW><ROW><id>19418721</id><snippet>django.contrib.auth.signals.user_logged_in</snippet></ROW><ROW><id>19419306</id><snippet>shortMonths</snippet></ROW><ROW><id>19419306</id><snippet>shortMonths = [] # create an empty list
for M in MONTHS:
    shortMonths.append(M[0:3]) # add new entry to the list
print shortMonths # print out the list we just created
</snippet></ROW><ROW><id>19419306</id><snippet># create a list containing the first 3 letters of each month name
shortMonths = [M[0:3] for M in MONTHS]
print shortMonths # print out the list we just created
</snippet></ROW><ROW><id>19419905</id><snippet>xml.etree</snippet></ROW><ROW><id>19419905</id><snippet>for node in root.getiterator():
    if some_condition_matches_parent:
        for child in node.getiterator():
            if some_condition_matches_child:
                node.remove(child)
</snippet></ROW><ROW><id>19419905</id><snippet>lxml</snippet></ROW><ROW><id>19419905</id><snippet>node.getparent().remove(node)
</snippet></ROW><ROW><id>19419986</id><snippet>span</snippet></ROW><ROW><id>19419986</id><snippet>item['pcode'] = ' '.join(hxs.select('//*[@id="ctl00_ContentPlaceHolder1_hid_ProductID"]/@value').extract()).strip()
</snippet></ROW><ROW><id>19420182</id><snippet>Pool.map</snippet></ROW><ROW><id>19420182</id><snippet>import multiprocessing 
import fileinput

def test(line):
    print line

input = []
for line in fileinput.input():
    input.append(line)

p = multiprocessing.Pool()
p.map(test, input)
</snippet></ROW><ROW><id>19420182</id><snippet>stdin</snippet></ROW><ROW><id>19420182</id><snippet>chunksize</snippet></ROW><ROW><id>19420182</id><snippet>stdin</snippet></ROW><ROW><id>19420182</id><snippet>stdin</snippet></ROW><ROW><id>19420182</id><snippet>multiprocessing</snippet></ROW><ROW><id>19420182</id><snippet>sys.stdin</snippet></ROW><ROW><id>19420182</id><snippet>stdin</snippet></ROW><ROW><id>19420182</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>19420182</id><snippet>stdin</snippet></ROW><ROW><id>19420182</id><snippet>import os, sys, multiprocessing

def square(num):
    if num == 3:
         num = int(raw_input('square what? ')) 
    return num ** 2

def initialize(fd):
    sys.stdin = os.fdopen(fd)

initargs = [sys.stdin.fileno()]
pool = multiprocessing.Pool(5, initialize, initargs)
</snippet></ROW><ROW><id>19420182</id><snippet>&gt;&gt;&gt; pool.map(square, range(10)))
square what? 9
[0, 1, 4, 81, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>19420379</id><snippet>self</snippet></ROW><ROW><id>19420379</id><snippet>def spider_opened(self, spider):
    self.spiderStartTime = datetime.now()
    self.spiderStartTime = spiderStartTime.strftime("%Y-%m-%d %H:%M:%S")
    print self.spiderStartTime`
</snippet></ROW><ROW><id>19420379</id><snippet>global spiderStartTime</snippet></ROW><ROW><id>19420379</id><snippet>spiderStopTime</snippet></ROW><ROW><id>19420379</id><snippet>spider_closed()</snippet></ROW><ROW><id>19420379</id><snippet>def spider_closed(self, spider, reason):
    spiderStopTime = datetime.now()
    spiderStopTime = spiderStopTime.strftime("%Y-%m-%d %H:%M:%S")

    # remove and stop activity poller
    poller = self.pollers.pop(spider.name)
    poller.stop()

    db = MySQLdb.connect("localhost","root","","numismatics")
    cursor = db.cursor()

    try:
       cursor.execute("INSERT INTO crawlertimes (ID, spiderStartTime, spiderStopTime, spiderUpdateTime) VALUES (%s,%s,%s,%s)",
           ('', self.spiderStartTime, self.spiderStopTime, self.spiderUpdateTime))
       db.commit()
   except Exception:
       db.rollback()

   db.close()
</snippet></ROW><ROW><id>19420437</id><snippet>unicode</snippet></ROW><ROW><id>19420437</id><snippet>latin1 = 'abcdé'.decode('latin1')  # provided `é` is stored in the source as a E9 byte.
</snippet></ROW><ROW><id>19420437</id><snippet>latin1 = 'abcd\xe9'.decode('latin1')
</snippet></ROW><ROW><id>19420602</id><snippet>zip(*..)</snippet></ROW><ROW><id>19420602</id><snippet>lst1, lst2 = zip(*re.findall(r'\s*(?P&lt;first&gt;\d+\.\d+)\-\d+\.\d+\s*(?P&lt;id&gt;\d+)\s*',a))
</snippet></ROW><ROW><id>19420602</id><snippet>lst1</snippet></ROW><ROW><id>19420602</id><snippet>lst1 = [format(float(i), '.0f') for i in lst1]
</snippet></ROW><ROW><id>19420602</id><snippet>&gt;&gt;&gt; zip(*re.findall(r'\s*(?P&lt;first&gt;\d+\.\d+)\-\d+\.\d+\s*(?P&lt;id&gt;\d+)\s*',a))
[('000.000', '002.000', '004.000', '006.000', '008.000', '010.000', '012.000', '014.000', '016.000', '018.000', '020.000', '022.000', '024.000', '026.000', '028.000', '030.000', '032.000', '034.000', '036.000', '038.000', '040.000'), ('1921', '2000', '1999', '1999', '1995', '1997', '1999', '2001', '2004', '1995', '1997', '2007', '2003', '1998', '1995', '1994', '2001', '2008', '1996', '1996', '95')]
&gt;&gt;&gt; lst1, lst2 = zip(*re.findall(r'\s*(?P&lt;first&gt;\d+\.\d+)\-\d+\.\d+\s*(?P&lt;id&gt;\d+)\s*',a))
&gt;&gt;&gt; [format(float(i), '.0f') for i in lst1]
['0', '2', '4', '6', '8', '10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '32', '34', '36', '38', '40']
&gt;&gt;&gt; lst2
('1921', '2000', '1999', '1999', '1995', '1997', '1999', '2001', '2004', '1995', '1997', '2007', '2003', '1998', '1995', '1994', '2001', '2008', '1996', '1996', '95')
</snippet></ROW><ROW><id>19420639</id><snippet>def myDeviceEvent(deviceId, method, data, callbackId):
    print '%s' %( td.getName(deviceId) )+' - %s' %(td.methodsReadable.get(method, 'Unknown' ))
</snippet></ROW><ROW><id>19420639</id><snippet>def myDeviceEvent(deviceId, method, data, callbackId):
    with open("Output.txt", "w") as outputFile:
        outputFile.write('%s' %( td.getName(deviceId) )+' - %s' %(td.methodsReadable.get(method, 'Unknown' )))
</snippet></ROW><ROW><id>19420639</id><snippet>with</snippet></ROW><ROW><id>19420639</id><snippet>with</snippet></ROW><ROW><id>19420639</id><snippet>def myDeviceEvent(deviceId, method, data, callbackId):
    with open("Output.txt", "w") as outputFile:
        outputFile.write('{} - {}'.format(td.getName(deviceId), td.methodsReadable.get(method, 'Unknown')))
</snippet></ROW><ROW><id>19420684</id><snippet>def __init__(self, fname=None, mname=None, lname=None, age=None, gender=None):</snippet></ROW><ROW><id>19420684</id><snippet>None</snippet></ROW><ROW><id>19420684</id><snippet>NULL</snippet></ROW><ROW><id>19420775</id><snippet>url = "msn.com"
print("Parent:", url)
f = open("f2.txt", "w",)
for x in extractUrls(url):
    print("-", x)
    f.write( x )
f.close()
</snippet></ROW><ROW><id>19421208</id><snippet>sys.stderr</snippet></ROW><ROW><id>19421208</id><snippet>&lt;open file '&lt;stderr&gt;', mode 'w' at blah&gt;</snippet></ROW><ROW><id>19421208</id><snippet>sys</snippet></ROW><ROW><id>19421498</id><snippet>    bat = open('MS-%s.bat' % (r), "w")
</snippet></ROW><ROW><id>19421713</id><snippet>total_seconds</snippet></ROW><ROW><id>19421713</id><snippet>x = difference.total_seconds()
</snippet></ROW><ROW><id>19421825</id><snippet>result = []
for each in run_time_results:
    result.append(each)
</snippet></ROW><ROW><id>19421834</id><snippet>Scores1().Reset
</snippet></ROW><ROW><id>19421834</id><snippet>Scores1</snippet></ROW><ROW><id>19421834</id><snippet>Reset</snippet></ROW><ROW><id>19421834</id><snippet>Reset</snippet></ROW><ROW><id>19421834</id><snippet>()</snippet></ROW><ROW><id>19421834</id><snippet>Scores1()</snippet></ROW><ROW><id>19421834</id><snippet>Reset()</snippet></ROW><ROW><id>19421834</id><snippet>sc1</snippet></ROW><ROW><id>19421834</id><snippet>sc1</snippet></ROW><ROW><id>19421834</id><snippet>Resetter</snippet></ROW><ROW><id>19421834</id><snippet>class Resetter(Frame):
    def __init__(self, sc1, parent=None, **kw):
        Frame.__init__(self, parent, kw)
        self.sc1 = sc1
    ...

    def reset(self):
        self.sc1.Reset()

res = Resetter(sc1, root)
</snippet></ROW><ROW><id>19422097</id><snippet>Foo</snippet></ROW><ROW><id>19422097</id><snippet>Bar</snippet></ROW><ROW><id>19422097</id><snippet>Parent</snippet></ROW><ROW><id>19422097</id><snippet>Parent</snippet></ROW><ROW><id>19422097</id><snippet>class Parent(object):
    def do(self,string):
        name2class = {'foo' : Foo, 'bar' : Bar }
        return name2class[string]()

class Foo(Parent):
    pass

class Bar(Parent):
    pass

if __name__ == '__main__':
    parent = Parent()
    instance = parent.do('foo')
</snippet></ROW><ROW><id>19422097</id><snippet>class Parent(object):
    # Add shared methods here
    pass

class Foo(Parent):
    # Add unique methods
    pass

class Bar(Parent):
    # Add unique methods
    pass

class ParentFactory(object):
    def __init__(self):
        self.name2class = {'foo' : Foo, 'bar' : Bar}

    def create(self, string):
        return self.name2class[string]()

if __name__ == '__main__':
    factory = ParentFactory()
    instance = factory.create('foo')
</snippet></ROW><ROW><id>19422232</id><snippet>requests</snippet></ROW><ROW><id>19422232</id><snippet>allow_redirects</snippet></ROW><ROW><id>19422437</id><snippet>Product.objects.filter(offer__...=...) \
               .annotate(priority=models.Max('offer__contract__priority'),
                         rpl=models.Max('offer__contract__rpl')) \ 
               .order_by('-priority', '-rpl')
</snippet></ROW><ROW><id>19422736</id><snippet>disable_ssl_certificate_validation</snippet></ROW><ROW><id>19422736</id><snippet>Python33\Lib\site-packages\httplib2\__init__.py</snippet></ROW><ROW><id>19422736</id><snippet>import httplib2

h = httplib2.Http(".cache", disable_ssl_certificate_validation=True)
resp, content = h.request("https://github.com/", "GET")
</snippet></ROW><ROW><id>19422736</id><snippet>diff --git a/__init__.py b/__init__.py
index 65f90ac..4495994 100644
--- a/__init__.py
+++ b/__init__.py
@@ -823,10 +823,13 @@ class HTTPSConnectionWithTimeout(http.client.HTTPSConnection):
                 context.load_cert_chain(cert_file, key_file)
             if ca_certs:
                 context.load_verify_locations(ca_certs)
+        check_hostname = True
+        if disable_ssl_certificate_validation:
+            check_hostname = False
         http.client.HTTPSConnection.__init__(
                 self, host, port=port, key_file=key_file,
                 cert_file=cert_file, timeout=timeout, context=context,
-                check_hostname=True)
+                check_hostname=check_hostname)


 SCHEME_TO_CONNECTION = {
</snippet></ROW><ROW><id>19422858</id><snippet>while</snippet></ROW><ROW><id>19422858</id><snippet>for</snippet></ROW><ROW><id>19422858</id><snippet>for</snippet></ROW><ROW><id>19422858</id><snippet>i</snippet></ROW><ROW><id>19422858</id><snippet>i += 1</snippet></ROW><ROW><id>19422858</id><snippet>i = 0

while(i &lt; 10):
    i += 1
    if i % 2 == 0:   
        continue
    print i
</snippet></ROW><ROW><id>19422858</id><snippet>0 % 2 == 0</snippet></ROW><ROW><id>19422858</id><snippet>True</snippet></ROW><ROW><id>19422858</id><snippet>i += 1</snippet></ROW><ROW><id>19422858</id><snippet>print i</snippet></ROW><ROW><id>19423121</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; inoutdict = {ord(p):unicode(" "+p+" ") for p in string.punctuation}
&gt;&gt;&gt; unicode("foo,,,bar!!1").translate(inoutdict)
u'foo ,  ,  , bar !  ! 1'
</snippet></ROW><ROW><id>19423121</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; rx = '[%s]' % re.escape(string.punctuation)
&gt;&gt;&gt; re.sub(rx, r" \g&lt;0&gt; ", "foo,,,bar!!1")
'foo ,  ,  , bar !  ! 1'
</snippet></ROW><ROW><id>19423802</id><snippet>_uppercase = [k for k in dir() if k.isupper()]
ALL_UNICODE = ' '.join(map(globals().get, _uppercase))
</snippet></ROW><ROW><id>19423802</id><snippet>dir()</snippet></ROW><ROW><id>19423802</id><snippet>list(globals())</snippet></ROW><ROW><id>19423802</id><snippet>globals()</snippet></ROW><ROW><id>19423802</id><snippet>globals()</snippet></ROW><ROW><id>19423984</id><snippet>self.count = 0

def generate():
if self.count &lt; 3 
     self.count += 1
     return 10
else:         
    return 99

with patch.object(Test, 'generate', generate):
    self.assertEqual(Test.generate(), 10)
    self.assertEqual(Test.generate(), 10)
    self.assertEqual(Test.generate(), 10)
    self.assertEqual(Test.generate(), 99)
    self.assertEqual(Test.generate(), 99)
</snippet></ROW><ROW><id>19423997</id><snippet>context.prec</snippet></ROW><ROW><id>19423997</id><snippet>decimal_places</snippet></ROW><ROW><id>19423997</id><snippet>1.00000
^ ^^^^^
</snippet></ROW><ROW><id>19423997</id><snippet>1</snippet></ROW><ROW><id>19423997</id><snippet>0.90000
  ^^^^^
</snippet></ROW><ROW><id>19423997</id><snippet>context.prec</snippet></ROW><ROW><id>19423997</id><snippet>max_digits</snippet></ROW><ROW><id>19424183</id><snippet>hr.employee</snippet></ROW><ROW><id>19424183</id><snippet>def create(self, cr, uid, vals, context=None):
    user_obj = self.pool.get('res.users')
    user_vals = {
        'name': vals.get('name'),
        'login': default_login,
        #and other required field 
    }
    user_obj.create(cr, uid, user_vals, context)
    return super(hr_employee, self).create(cr, uid, vals, context=context)
</snippet></ROW><ROW><id>19424187</id><snippet>class People:

    def __init__(self, fname=None, lname=None, age=None, gender=None):
        self.fname = fname
        self.lname = lname
        self.age = age
        self.gender = gender

def display(self):
    print self.fname

people = [People('John','W Cooper',23,'Male'),
           People('James','W Cooper',30,'Male'),
           People('Kate','W Cooper',20,'Female')]
f = open("abc.txt", "w")
for person in people:
    f.write( person.fname +","+ person.lname +","+ str(person.age) +","+ person.gender + '\n' )
    person.display()
f.close()
</snippet></ROW><ROW><id>19424645</id><snippet>text</snippet></ROW><ROW><id>19424645</id><snippet>for line in text.splitlines(): 
    try:
         .... regex stuff....
</snippet></ROW><ROW><id>19424924</id><snippet>collections.Counter</snippet></ROW><ROW><id>19424924</id><snippet>import collections
import itertools
import re

def find_words(line):
    for match in re.finditer("\w+", line):
        yield match.group().lower()

counts1 = collections.Counter()
counts2 = collections.Counter()
counts_pairs = collections.Counter()

with open("src.txt") as f1, open("tgt.txt") as f2:
    for line1, line2 in itertools.izip(f1, f2):
        words1 = list(find_words(line1))
        words2 = list(find_words(line2))
        counts1.update(words1)
        counts2.update(words2)
        counts_pairs.update(itertools.product(words1, words2))

print counts1["someword"]
print counts1["anotherword"]
print counts_pairs["someword", "anotherword"]
</snippet></ROW><ROW><id>19424930</id><snippet>var = Arr()</snippet></ROW><ROW><id>19424930</id><snippet>var = Arr</snippet></ROW><ROW><id>19424930</id><snippet>var</snippet></ROW><ROW><id>19424930</id><snippet>Arr</snippet></ROW><ROW><id>19425195</id><snippet>M</snippet></ROW><ROW><id>19425195</id><snippet>zip</snippet></ROW><ROW><id>19425195</id><snippet>A = [1, 2, 3]
B = ['a', 'b', 'c']

for a, b in zip(A, B):
    print(a)
    print(b)
</snippet></ROW><ROW><id>19425195</id><snippet>1
a
2
b
3
c
</snippet></ROW><ROW><id>19425461</id><snippet>grunt</snippet></ROW><ROW><id>19425461</id><snippet>dist</snippet></ROW><ROW><id>19425461</id><snippet>static/your_app</snippet></ROW><ROW><id>19425497</id><snippet>WS_EX_TOOLWINDOW</snippet></ROW><ROW><id>19425497</id><snippet>HWND_TOPMOST</snippet></ROW><ROW><id>19425604</id><snippet>DatetimeField</snippet></ROW><ROW><id>19425604</id><snippet>auto_now_add=True</snippet></ROW><ROW><id>19425604</id><snippet>YourModel.objects.filter(
    fieldname__gte=datetime.datetime.now()-datetime.timedelta(seconds=2)
)
</snippet></ROW><ROW><id>19425604</id><snippet>DatetimeField</snippet></ROW><ROW><id>19425604</id><snippet>auto_now_add=True</snippet></ROW><ROW><id>19425604</id><snippet>__gte</snippet></ROW><ROW><id>19425681</id><snippet>$( "#result" ).load( "ajax/test.html", function() {
alert( "Load was performed." );
});
</snippet></ROW><ROW><id>19425818</id><snippet>example()</snippet></ROW><ROW><id>19425818</id><snippet>yes='y', 'Y'
no='n', 'N'

def example():
    if egg.startswith(no):
        return False # Returns False if egg is either n or N so the loop would break
    elif egg.startswith(yes):
        # Nothing here, block may loop again
        print()
        return True # Returns True if egg is either y or Y so the loop would continue

while True:
    egg = input("Do you want to continue? y/n")
    if not example(): # You can aslo use "if example() == False:" Though it is not recommended!
        break
</snippet></ROW><ROW><id>19425891</id><snippet>lstrip</snippet></ROW><ROW><id>19425891</id><snippet>url.lstrip('http://')</snippet></ROW><ROW><id>19425891</id><snippet>h</snippet></ROW><ROW><id>19425891</id><snippet>t</snippet></ROW><ROW><id>19425891</id><snippet>:</snippet></ROW><ROW><id>19425891</id><snippet>/</snippet></ROW><ROW><id>19425891</id><snippet>url</snippet></ROW><ROW><id>19425891</id><snippet>str.replace</snippet></ROW><ROW><id>19425891</id><snippet>&gt;&gt;&gt; url = 'http://party.com'
&gt;&gt;&gt; url.replace('http://', '', 1)
'party.com'
</snippet></ROW><ROW><id>19425891</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>19425891</id><snippet>&gt;&gt;&gt; urlparse.urlparse('http://party.com').netloc
'party.com'
&gt;&gt;&gt; urlparse.urlparse('http://party.com/path/to/some-resource').netloc
'party.com'
</snippet></ROW><ROW><id>19426049</id><snippet>with open('beak', 'rb+') as f:
    content = f.read()
    f.seek(0)
    f.write(content.replace(b'\r', b''))
    f.truncate()
</snippet></ROW><ROW><id>19426498</id><snippet>import subprocess
import os
import threading


class LogThread(threading.Thread):
    """Thread which will read from `pipefd` and write all contents to
    `fileobj` until `pipefd` is closed.  Used as a context manager, this thread
    will be automatically started, and joined on exit, usually when the
    child process exits.
    """
    def __init__(self, pipefd, fileobj):
        self.pipefd = pipefd
        self.fileobj = fileobj
        super(LogThread, self).__init__()
        self.setDaemon(1)
        self.start()

    def run(self):
        while True:
            line = self.pipefd.readline()
            if not line:
                break
            self.fileobj.write(line)
            self.fileobj.flush()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.join()


# Here's how to use the LogThread.    
p = subprocess.Popen ("script", shell = False, stdin = subprocess.PIPE, stdout = subprocess.PIPE)
with open('logfile.txt', 'wt') as logfile:
    with LogThread(p.stdout, logfile):
        p.stdin.write("\n".join(in_lines))
        p.stdin.close()
</snippet></ROW><ROW><id>19426498</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>19426498</id><snippet>isatty()</snippet></ROW><ROW><id>19426498</id><snippet>write()</snippet></ROW><ROW><id>19426770</id><snippet>database "nishant" does not exist</snippet></ROW><ROW><id>19426770</id><snippet>postgres</snippet></ROW><ROW><id>19426770</id><snippet>con = connect(dbname='postgres' user='nishant', host = 'localhost', password='everything')
</snippet></ROW><ROW><id>19426770</id><snippet>nishant</snippet></ROW><ROW><id>19426948</id><snippet>StopIteration</snippet></ROW><ROW><id>19426948</id><snippet>for x in iterator</snippet></ROW><ROW><id>19426948</id><snippet>while True:
    try: value = next(iterator)
    except StopIteration: break
    # do something...
</snippet></ROW><ROW><id>19426948</id><snippet>auto iterator = mylist.begin(); // get the iterator at the start of mylist
while(iterator != mylist.end()) { // check if our iterator is not equal to the end-iterator
    auto value = *iterator; // get the value of the iterator
    // do something with value
    ++iterator; // advances the iterator by one
}
</snippet></ROW><ROW><id>19426948</id><snippet>next()</snippet></ROW><ROW><id>19426948</id><snippet>StopIteration</snippet></ROW><ROW><id>19426948</id><snippet>*iterator</snippet></ROW><ROW><id>19426948</id><snippet>++iterator</snippet></ROW><ROW><id>19426948</id><snippet>iterator != mylist.end()</snippet></ROW><ROW><id>19426948</id><snippet>for(auto iterator = mylist.begin(); iterator != mylist.end(); ++iterator) {
    auto value = *iterator; // get the value of the iterator
    // do something with value
}
</snippet></ROW><ROW><id>19426948</id><snippet>for(auto value : mylist) {
    // do something with value
}
</snippet></ROW><ROW><id>19426948</id><snippet>list</snippet></ROW><ROW><id>19426948</id><snippet>vector</snippet></ROW><ROW><id>19426948</id><snippet>deque</snippet></ROW><ROW><id>19426948</id><snippet>set</snippet></ROW><ROW><id>19426948</id><snippet>multiset</snippet></ROW><ROW><id>19426948</id><snippet>vector</snippet></ROW><ROW><id>19426948</id><snippet>int numbers[N];</snippet></ROW><ROW><id>19426948</id><snippet>begin()</snippet></ROW><ROW><id>19426948</id><snippet>end()</snippet></ROW><ROW><id>19426948</id><snippet>begin()</snippet></ROW><ROW><id>19426948</id><snippet>end()</snippet></ROW><ROW><id>19426948</id><snippet>for x in myfile</snippet></ROW><ROW><id>19426948</id><snippet>myfile.read()</snippet></ROW><ROW><id>19426948</id><snippet>fread()</snippet></ROW><ROW><id>19426948</id><snippet>read()</snippet></ROW><ROW><id>19426948</id><snippet>fread()</snippet></ROW><ROW><id>19426948</id><snippet>sys.exit()</snippet></ROW><ROW><id>19426948</id><snippet>exit()</snippet></ROW><ROW><id>19426948</id><snippet>return</snippet></ROW><ROW><id>19426948</id><snippet>return</snippet></ROW><ROW><id>19426948</id><snippet>main()</snippet></ROW><ROW><id>19426977</id><snippet>loc</snippet></ROW><ROW><id>19426977</id><snippet>c</snippet></ROW><ROW><id>19426977</id><snippet>'M'</snippet></ROW><ROW><id>19426977</id><snippet>b</snippet></ROW><ROW><id>19426977</id><snippet>c</snippet></ROW><ROW><id>19426977</id><snippet>0</snippet></ROW><ROW><id>19426977</id><snippet>df = pd.DataFrame([['1', 0.0, 'P'],
    ...: ['2', 0.0, 'S'],
    ...: ['3', 64,  'M'],
    ...: ['4', 70,  'M'],], columns=['a', 'b', 'c'])

df.loc[df['c']=='M','b':'c'] = 0

df
Out[54]: 
   a  b  c
0  1  0  P
1  2  0  S
2  3  0  0
3  4  0  0
</snippet></ROW><ROW><id>19427242</id><snippet>import requests
import sys

from requests.auth import HTTPBasicAuth, HTTPDigestAuth

AUTH_MAP = {
    'basic': HTTPBasicAuth,
    'digest': HTTPDigestAuth,
}

def auth_get(url, *args, **kwargs):
    r = requests.get(url)
    if r.status_code != 401:
        return r
    auth_scheme = r.headers['WWW-Authenticate'].split(' ')[0]
    auth = AUTH_MAP.get(auth_scheme.lower())
    if not auth:
        raise ValueError('Unknown authentication scheme')
    r = requests.get(url, auth=auth(*args, **kwargs))
    return r


if __name__ == '__main__':
    print auth_get(*sys.argv[1:])
</snippet></ROW><ROW><id>19427242</id><snippet>python test_request.py username password</snippet></ROW><ROW><id>19427315</id><snippet>Lens</snippet></ROW><ROW><id>19427315</id><snippet>Lens</snippet></ROW><ROW><id>19427315</id><snippet>Lens</snippet></ROW><ROW><id>19427315</id><snippet>Lens</snippet></ROW><ROW><id>19427315</id><snippet>FisheyeLens</snippet></ROW><ROW><id>19427315</id><snippet>Lens</snippet></ROW><ROW><id>19427396</id><snippet>def recur(n, ds=None):
    if ds is None: ds = {}
    x=do_foo(n)
    if foo(n):
        ds[n] = recur(x, ds)
    else:
        return x
</snippet></ROW><ROW><id>19427396</id><snippet>class Bar(object):
    def __init__(self):
        self.ds = {}

    def recur(self, n):
        x=do_foo(n)
        if foo(n):
            self.ds[n] = self.recur(x)
        else:
            return x
</snippet></ROW><ROW><id>19427434</id><snippet>&gt;&gt;&gt; a = np.arange(1,6)
&gt;&gt;&gt; a
array([1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>19427434</id><snippet>np.tile</snippet></ROW><ROW><id>19427434</id><snippet>&gt;&gt;&gt; b = np.ones(5,dtype=np.int)
&gt;&gt;&gt; c = a*b[:,None]    #Broadcasting the two together
&gt;&gt;&gt; c
array([[1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5]])
</snippet></ROW><ROW><id>19427434</id><snippet>&gt;&gt;&gt; c = c - np.arange(5)[:,None]
&gt;&gt;&gt; c[c&lt;0]=0
&gt;&gt;&gt; c
array([[1, 2, 3, 4, 5],
       [0, 1, 2, 3, 4],
       [0, 0, 1, 2, 3],
       [0, 0, 0, 1, 2],
       [0, 0, 0, 0, 1]])
</snippet></ROW><ROW><id>19427434</id><snippet>originallist</snippet></ROW><ROW><id>19427434</id><snippet>originallist</snippet></ROW><ROW><id>19427434</id><snippet>+</snippet></ROW><ROW><id>19427434</id><snippet>&gt;&gt;&gt; range(0)
[]
&gt;&gt;&gt; [] + np.arange(3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: operands could not be broadcast together with shapes (0) (3)
</snippet></ROW><ROW><id>19427434</id><snippet>&gt;&gt;&gt; [] + np.arange(3).tolist()
[0, 1, 2]
</snippet></ROW><ROW><id>19427493</id><snippet>and</snippet></ROW><ROW><id>19427493</id><snippet>or</snippet></ROW><ROW><id>19427493</id><snippet>function_object and function_object(some, arguments)
some_value or produce_new_value(expensive, call)
</snippet></ROW><ROW><id>19427493</id><snippet>operator</snippet></ROW><ROW><id>19427493</id><snippet>and</snippet></ROW><ROW><id>19427493</id><snippet>operator</snippet></ROW><ROW><id>19427493</id><snippet>function_object</snippet></ROW><ROW><id>19427493</id><snippet>some_value</snippet></ROW><ROW><id>19427493</id><snippet>def and_(op1, op2):
    return op1 and op2

def or_(op1, op2):
    return op1 or op2
</snippet></ROW><ROW><id>19427664</id><snippet>from django.contrib import admin
from wiki.models import Page, Category, CategoryItem


for cls in (Page, Category, CategoryItem):
    admin.site.register(cls)
</snippet></ROW><ROW><id>19427682</id><snippet>all()</snippet></ROW><ROW><id>19427682</id><snippet>True</snippet></ROW><ROW><id>19427682</id><snippet>def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True
</snippet></ROW><ROW><id>19427682</id><snippet>&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; c = count()
&gt;&gt;&gt; all(i &lt; 10 for i in c)
False
&gt;&gt;&gt; next(c)
11
</snippet></ROW><ROW><id>19427682</id><snippet>any()</snippet></ROW><ROW><id>19427770</id><snippet>c=[[]]*10
</snippet></ROW><ROW><id>19427770</id><snippet>c[0]</snippet></ROW><ROW><id>19427770</id><snippet>c</snippet></ROW><ROW><id>19427770</id><snippet>c = [ [] for _ in range(10) ]
</snippet></ROW><ROW><id>19427947</id><snippet>punct</snippet></ROW><ROW><id>19427947</id><snippet>re.escape</snippet></ROW><ROW><id>19427947</id><snippet>[]</snippet></ROW><ROW><id>19427947</id><snippet>text</snippet></ROW><ROW><id>19427947</id><snippet>&gt;&gt;&gt; punct = re.escape(u""",–−—’‘‚”“‟„!£"%$'&amp;)(+*-€/.±°´·¸;:=&lt;?&gt;@§#¡•[˚]»_^`≤…\«¿¨{}|""")
&gt;&gt;&gt; rx = re.compile("["+"".join(punct)+"]", re.UNICODE)
&gt;&gt;&gt; text = u"""„anständig“"""
&gt;&gt;&gt; print rx.sub(ur" \g&lt;0&gt; ", text)
 „ anständig “
</snippet></ROW><ROW><id>19428036</id><snippet>([0-9.-]+)
</snippet></ROW><ROW><id>19428036</id><snippet>([-0-9.E]+)
</snippet></ROW><ROW><id>19428885</id><snippet>inputarr</snippet></ROW><ROW><id>19428885</id><snippet>inputarr</snippet></ROW><ROW><id>19428885</id><snippet>inputarr = [[]]
#           ^^  Set up the first row
def readfile(filename):
    lines = readlines(filename)
    with open(filename, 'r') as f:
        i = 0
        j= 0
        k = 0
        for line in f:
            line = line.rstrip("\n")
            if not line == '':
                inputarr[j].append(line)
#                          ^^^^^^^^       Add a new value to the end of the current row of inputarr
                k += 1
                #print("\tnew entry\tj=%d\tk=%d" % (j, k))
            elif line == '':
                k = 0
                inputarr.append([])
#               ^^^^^^^^^^^^^^^^^^^  Add a new blank row to inputarr
                j += 1
                #print("new block!\tj=%d\tk=%d" % (j, k))
            i += 1
            processing(i, lines)   
</snippet></ROW><ROW><id>19429011</id><snippet>index</snippet></ROW><ROW><id>19429011</id><snippet>index_label</snippet></ROW><ROW><id>19429094</id><snippet>BeautifulSoup()</snippet></ROW><ROW><id>19429094</id><snippet>BeautifulSoup()</snippet></ROW><ROW><id>19429094</id><snippet>BeautifulSoup()</snippet></ROW><ROW><id>19429094</id><snippet>with open(ytchannel) as infile:
    soup = BeautifulSoup(infile)
</snippet></ROW><ROW><id>19429151</id><snippet>The operating system rounds up the specified size to the nearest multiple of the
system's allocation granularity (typically 64 KB). To retrieve the allocation
granularity of the current system, use the GetSystemInfo function.
</snippet></ROW><ROW><id>19429151</id><snippet>threading.stack_size</snippet></ROW><ROW><id>19429151</id><snippet>The reserved memory size represents the total stack allocation in virtual memory.
</snippet></ROW><ROW><id>19429151</id><snippet>CreateThread</snippet></ROW><ROW><id>19429151</id><snippet>_beginthreadex</snippet></ROW><ROW><id>19429267</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; 
&gt;&gt;&gt; s = 'Total:                 192.5ms +/- 4.3%'
&gt;&gt;&gt; 
&gt;&gt;&gt; re.search(r'Total:\s+([0-9.]+)', s).group(1)
'192.5'
</snippet></ROW><ROW><id>19429560</id><snippet>txt='''\
1\tDemo
\t\tExample
\t\t\tThis is the description text body that I am
\t\t\ttrying to capture with regex.
\t\tSep
\t\t\tAnd Another Section
\t\t\tOn two lines
'''

cap=[]
buf=[]
for line in txt.splitlines():
    if line.startswith('\t\t\t'):
        buf.append(line.strip())
        continue
    if buf:    
        cap.append(' '.join(buf))
        buf=[]
else:
    if buf:    
        cap.append(' '.join(buf))      

print cap
</snippet></ROW><ROW><id>19429560</id><snippet>['This is the description text body that I am trying to capture with regex.', 
 'And Another Section On two lines']
</snippet></ROW><ROW><id>19429560</id><snippet>txt='''\
1\tDemo
\t\tExample
\t\t\tThis is the description text body that I am
\t\t\ttrying to capture with regex.
2\tSecond Demo
\t\tAnother Section
\t\t\tAnd Another 3rd level Section
\t\t\tOn two lines
3\tNo section below
4\tOnly one level below
\t\tThis is that one level
'''

import re

result=[]
for ms in re.finditer(r'^(\d+.*?)(?=^\d|\Z)',txt,re.S | re.M):
    section=ms.group(1)
    tm=map(len,re.findall(r'(^\t+)', section, re.S | re.M))
    subsections=max(tm) if tm else 0
    sec=[re.search(r'(^\d+.*)', section).group(1)]
    if subsections:
        for i in range(2,subsections+1):
            lt=r'^{}([^\t]+)$'.format(r'\t'*i)
            level=re.findall(lt, section, re.M)
            sec.append(' '.join(s.strip() for s in level))

    print '-&gt;'.join(sec)
</snippet></ROW><ROW><id>19429560</id><snippet>1   Demo-&gt;Example-&gt;This is the description text body that I am trying to capture with regex.
2   Second Demo-&gt;Another Section-&gt;And Another 3rd level Section On two lines
3   No section below
4   Only one level below-&gt;This is that one level
</snippet></ROW><ROW><id>19429560</id><snippet>1) This is limited to the format you described.
2) It will not handle reverse levels properly:
    1 Section 
         Second Level
             Third Level
         Second Level Again       &lt;== This would be jammed in with 'second level'
    How would you handel multi levels?

3) Won't handle multiline section headers:

    3    Like
         This
</snippet></ROW><ROW><id>19429560</id><snippet>1a  Title-&gt;Subtitle-&gt;Description Second Line of Description
1b  Title-&gt;Subtitle A Subtitle B-&gt;Description Description
2   Title-&gt;Subtitle A Subtitle B Subtitle C-&gt;Description Description Description
</snippet></ROW><ROW><id>19429607</id><snippet>socket.inet_aton</snippet></ROW><ROW><id>19429607</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.inet_aton('1.2.3.4')
'\x01\x02\x03\x04'
</snippet></ROW><ROW><id>19429607</id><snippet>socket.inet_ntoa</snippet></ROW><ROW><id>19429607</id><snippet>&gt;&gt;&gt; socket.inet_ntoa('\x01\x02\x03\x04')
'1.2.3.4'
</snippet></ROW><ROW><id>19429607</id><snippet>ipaddress.IPv4Address</snippet></ROW><ROW><id>19429607</id><snippet>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; ipaddress.IPv4Address('1.2.3.4').packed
b'\x01\x02\x03\x04'
&gt;&gt;&gt; ipaddress.IPv4Address(b'\x01\x02\x03\x04')
IPv4Address('1.2.3.4')
&gt;&gt;&gt; str(ipaddress.IPv4Address(b'\x01\x02\x03\x04'))
'1.2.3.4'
</snippet></ROW><ROW><id>19429634</id><snippet>def main():
    total = 0.0
    print ' this is the accumulator test run '
    # Loop continuously.
    while True:
        # Get the input using raw_input because you are on Python 2.7.
        number = raw_input('enter a number: ')
        # If the user typed in "done"...
        if number == 'done':
            # ...break the loop.
            break
        # Else, try to add the number to the total.
        try:
            # This is the same as total = total + float(number)
            total += float(number)
        # But if it can't (meaning input was not valid)...
        except ValueError:
            # ...continue the loop.
            # You can actually do anything in here.  I just chose to continue.
            continue
    print ' the total is', total
main()
</snippet></ROW><ROW><id>19429688</id><snippet>x = np.asarray([np.linspace(3000, 7000, 1000.0), np.linspace(4000, 8000, 1000.0), np.linspace(2000, 9000, 1000.0)])
y = np.asarray([np.linspace(10, 200, 1000.0), np.linspace(20, 200, 1000.0), np.linspace(30, 200, 1000.0)])
xgrid = np.linspace(6520,6620, 1000.0)
</snippet></ROW><ROW><id>19429688</id><snippet>ygrid = np.array([np.interp(xgrid, i, j) for i, j in zip(x, y)])
</snippet></ROW><ROW><id>19430079</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3, 2, 3, 4]
&gt;&gt;&gt; [x for x in lst if lst.count(x) == 1]
[1, 4]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19430079</id><snippet>list</snippet></ROW><ROW><id>19430108</id><snippet># testutils.py
class LogCheckerMixin(object):
    """ this class adds log checking abilities to a TestCase.
    """  
    def check_logs(self, logs, **kw):
       self.assertWhatever(something)


# myserver/tests.py
import unittest
from testutils import LogCheckerMixin

class MyServerTest(unittest.TestCase, LogCheckerMixin):
    def test_log1(self):
        logs = extract_the_logs()
        self.check_logs(logs, log_1=1, log2='foo')
</snippet></ROW><ROW><id>19430108</id><snippet># testutils.py
def check_logs(testcase, logs, **kw):
    testcase.assertWhatever(something)


# myserver/tests.py
import unittest
from testutils import check_logs

class MyServerTest(unittest.TestCase, LogCheckerMixin):
    def test_log1(self):
        logs = extract_the_logs()
        check_logs(self, logs, log_1=1, log2='foo')
</snippet></ROW><ROW><id>19430194</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; [[k] + [';'.join(v) for v in zip(*g)[1:]] for k,g in groupby(a, itemgetter(0))]
[[1, 'abc;def', '123;456'], [2, 'ghi;jkl;mno', '789;012;345'], [3, 'pqr', '678']]
</snippet></ROW><ROW><id>19430194</id><snippet>groupby</snippet></ROW><ROW><id>19430194</id><snippet>groupby(sorted(a, key=itemgetter(0)), itemgetter(0))
</snippet></ROW><ROW><id>19430194</id><snippet>groupby</snippet></ROW><ROW><id>19430194</id><snippet>itemgetter</snippet></ROW><ROW><id>19430194</id><snippet>itemgetter(0)</snippet></ROW><ROW><id>19430194</id><snippet>lambda x: x[0]</snippet></ROW><ROW><id>19430194</id><snippet>zip(*g)</snippet></ROW><ROW><id>19430194</id><snippet>zip</snippet></ROW><ROW><id>19430194</id><snippet>*</snippet></ROW><ROW><id>19430194</id><snippet>zip(*([1,2],[3,4])) == [(1, 3), (2, 4)]</snippet></ROW><ROW><id>19430194</id><snippet>list(zip(..))</snippet></ROW><ROW><id>19430231</id><snippet>if</snippet></ROW><ROW><id>19430231</id><snippet>for</snippet></ROW><ROW><id>19430450</id><snippet>import sys
try:
        import setuptools
except ImportError:
        sys.exit(1)
else:
        sys.exit(0)
</snippet></ROW><ROW><id>19430499</id><snippet>self.main_splitter.SplitVertically(self.inputpanel, self.main_splitter)
self.main_splitter.SplitHorizontally(self.outputpanel1, self.outputpanel2)
</snippet></ROW><ROW><id>19430499</id><snippet>self.main_splitter.SplitVertically(self.inputpanel, self.out_splitter)
self.out_splitter.SplitHorizontally(self.outputpanel1, self.outputpanel2)
</snippet></ROW><ROW><id>19430499</id><snippet>main_splitter</snippet></ROW><ROW><id>19430499</id><snippet>main_splitter.SplitVertically</snippet></ROW><ROW><id>19430499</id><snippet>main_splitter</snippet></ROW><ROW><id>19430499</id><snippet># Set sizers
self.windowSizer1 = wx.BoxSizer(wx.VERTICAL)
self.windowSizer2 = wx.BoxSizer(wx.HORIZONTAL)
self.windowSizer2.Add(self.out_splitter, 1, wx.ALL | wx.EXPAND)
self.windowSizer1.Add(self.windowSizer2, 1, wx.ALL | wx.EXPAND)    
self.SetSizer(self.windowSizer1)
</snippet></ROW><ROW><id>19430563</id><snippet>new_args = dict(k, v for k, v in args.items() if k != 'archive')
</snippet></ROW><ROW><id>19430563</id><snippet>archive_arg = args['archive'] # save for later
del args['archive'] #remove it
</snippet></ROW><ROW><id>19430565</id><snippet>if(os.path.exists(os.path.expanduser('~/Desktop/test.csv')):
    print "Found"
else:
    print "NOT Found"
</snippet></ROW><ROW><id>19430882</id><snippet>f.write(str(lyrics).strip())
</snippet></ROW><ROW><id>19430882</id><snippet>f.write("\n".join(lyrics).strip())
</snippet></ROW><ROW><id>19430897</id><snippet>A</snippet></ROW><ROW><id>19430897</id><snippet>M</snippet></ROW><ROW><id>19430897</id><snippet>reverse=True</snippet></ROW><ROW><id>19430897</id><snippet>A</snippet></ROW><ROW><id>19430897</id><snippet>lst = ['A /cloudos-ui/branches/bare_metal (from /cloudos-ui/branches/rc4g1build:9930)',                            
'M /cloudos-ui/branches/bare_metal/misc/cosmos/packaging/DEBIAN/control', 
'M /cloudos-ui/branches/bare_metal/misc/cosmos/scripts/create_cosmos_installer.sh', 
'M /cloudos-ui/branches/bare_metal/misc/skyline/packaging/DEBIAN/control', 
'M /cloudos-ui/branches/bare_metal/misc/skyline/scripts/create_skyline_installer.sh',
'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/forms.py', 
'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/tables.py', 
'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/templates/flavors/_create.html',
'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/templates/flavors/_edit.html',
'A /cloudos-ui/branches/bare_metal/misc/skyline/scripts/create_skyline_installer.sh',
'A /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/forms.py', 
'A /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/tables.py', 
'A /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/templates/flavors/_create.html']

d = {}

for elem in sorted(lst):
    l = elem.split(None, 1)
    d[l[1]] = elem

print(list(d.values()))
</snippet></ROW><ROW><id>19430897</id><snippet>['A /cloudos-ui/branches/bare_metal (from /cloudos-ui/branches/rc4g1build:9930)',
 'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/templates/flavors/_edit.html',
 'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/forms.py',
 'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/tables.py',
 'M /cloudos-ui/branches/bare_metal/misc/cosmos/packaging/DEBIAN/control',
 'M /cloudos-ui/branches/bare_metal/src/horizon/openstack_dashboard/dashboards/admin/flavors/templates/flavors/_create.html',
 'M /cloudos-ui/branches/bare_metal/misc/skyline/packaging/DEBIAN/control',
 'M /cloudos-ui/branches/bare_metal/misc/cosmos/scripts/create_cosmos_installer.sh',
 'M /cloudos-ui/branches/bare_metal/misc/skyline/scripts/create_skyline_installer.sh']
</snippet></ROW><ROW><id>19430930</id><snippet>answers</snippet></ROW><ROW><id>19430975</id><snippet>generate_voronoi_diagram</snippet></ROW><ROW><id>19430975</id><snippet>entry</snippet></ROW><ROW><id>19430975</id><snippet>entry</snippet></ROW><ROW><id>19430975</id><snippet>def do_voroni(entry, seeds):
    entry.generate_voronoi_diagram(seeds)
    return entry
</snippet></ROW><ROW><id>19430975</id><snippet>if __name__ == "__main__":
    entries = [ImD.ImageData(width, height) for _ in range(images)]
    seeds = numpy.random.poisson(100, images) # array of values

    pool = multiprocessing.Pool()
    for i, e in enumerate(pool.starmap_async(do_voroni, zip(entries, seeds))):
        e.generate_heat_map_image("ImagesOutput/Entries/Entry{:02d}".format(i))
</snippet></ROW><ROW><id>19430975</id><snippet>e</snippet></ROW><ROW><id>19430975</id><snippet>entries</snippet></ROW><ROW><id>19431008</id><snippet>import math

def project_to_distance(point_x, point_y, distance):
    dist_to_origin = math.sqrt(point_x ** 2 + point_y ** 2)    
    scale = distance / dist_to_origin
    return point_x * scale, point_y * scale

print project_to_distance(2, 7, 4)
</snippet></ROW><ROW><id>19431008</id><snippet>math</snippet></ROW><ROW><id>19431008</id><snippet>math.square_root()</snippet></ROW><ROW><id>19431008</id><snippet>math.sqrt()</snippet></ROW><ROW><id>19431008</id><snippet>SyntaxError: bad input ('        ')</snippet></ROW><ROW><id>19431008</id><snippet>scale = distance / dist_to_origin</snippet></ROW><ROW><id>19431008</id><snippet>print</snippet></ROW><ROW><id>19431008</id><snippet>return</snippet></ROW><ROW><id>19431008</id><snippet>project_to_distance()</snippet></ROW><ROW><id>19431008</id><snippet>print</snippet></ROW><ROW><id>19431008</id><snippet>returning</snippet></ROW><ROW><id>19431008</id><snippet>return</snippet></ROW><ROW><id>19431008</id><snippet>math.sqrt()</snippet></ROW><ROW><id>19431008</id><snippet>project_to_distance()</snippet></ROW><ROW><id>19431008</id><snippet>print</snippet></ROW><ROW><id>19431008</id><snippet>returns</snippet></ROW><ROW><id>19431008</id><snippet>project_to_distance()</snippet></ROW><ROW><id>19431008</id><snippet>sqrt()</snippet></ROW><ROW><id>19431008</id><snippet>return</snippet></ROW><ROW><id>19431008</id><snippet>print</snippet></ROW><ROW><id>19431008</id><snippet>returns</snippet></ROW><ROW><id>19431008</id><snippet>project_to_distance</snippet></ROW><ROW><id>19431085</id><snippet>PySide.QtGui.QComboBox.setItemText(index, data_dict[key])
</snippet></ROW><ROW><id>19431100</id><snippet>from tvtk.api import tvtk; from mayavi import mlab; import numpy as np

x,y,z=np.random.random((3,nr_points)) #some data
colors=np.random.randint(256,size=(100,3)) #some RGB or RGBA colors

pts=mlab.points3d(x,y,z)
sc=tvtk.UnsignedCharArray()
sc.from_array(colors)

pts.mlab_source.dataset.point_data.scalars=sc
pts.mlab_source.dataset.modified()
</snippet></ROW><ROW><id>19431100</id><snippet>pts.actor.mapper.input=pts.mlab_source.dataset
</snippet></ROW><ROW><id>19431130</id><snippet>&gt;&gt;&gt; mystr = 'buuuuuttttt'
&gt;&gt;&gt; re.sub(r'(.)\1{2,}', r'\1', mystr)
'but'
&gt;&gt;&gt; mystr = 'buttt'
&gt;&gt;&gt; re.sub(r'(.)\1{2,}', r'\1', mystr)
'but'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19431276</id><snippet>import collections
from blist import sorteddict

class ValueSortedDict(collections.MutableMapping):
    def __init__(self, data):
        self._dict = {}
        self._sorted = sorteddict()
        self.update(data)

    def __getitem__(self, key):
        return self._dict[key]

    def __setitem__(self, key, value):
        # remove old value from sorted dictionary
        if key in self._dict:
            self.__delitem__(key)
        # update structure with new value
        self._dict[key] = value
        try:
            keys = self._sorted[value]
        except KeyError:
            self._sorted[value] = set([key])
        else:
            keys.add(key)            

    def __delitem__(self, key):
        value = self._dict.pop(key)
        keys = self._sorted[value]
        keys.remove(key)
        if not keys:
            del self._sorted[value]

    def __iter__(self):
        for value, keys in self._sorted.items():
            for key in keys:
                yield key

    def __len__(self):
        return len(self._dict)

x = ValueSortedDict(dict(a=1, b=4, c=3))
x['a'] += 1
print list(x.items())
x['a'] += 10
print list(x.items())
x['d'] = 4
print list(x.items())
</snippet></ROW><ROW><id>19431276</id><snippet>[('a', 2), ('c', 3), ('b', 4)]
[('c', 3), ('b', 4), ('a', 12)]
[('c', 3), ('b', 4), ('d', 4), ('a', 12)]
</snippet></ROW><ROW><id>19431673</id><snippet>if (key[0] == 2) and (1 &lt;= key[1] &lt;= 50) and ((1, 1) in previous):
</snippet></ROW><ROW><id>19431673</id><snippet>if (key[0] == 2 and key[1] &gt;= 1 and key[1] &lt;= 50) and ((1,1) in previous):
</snippet></ROW><ROW><id>19431721</id><snippet>python-requests</snippet></ROW><ROW><id>19431721</id><snippet>import requests

url = 'http://appl.xyz.net:8080/app/content/pq/doQuery?solution=nd&amp;path=&amp;file=Test.nd&amp;dataAccessId=1&amp;paramid=4221'
user = 'test'
password = 'test5'

# Takes care of the HTTP authentication
data = requests.get(url, auth=(user, password))
json_data = data.json()
</snippet></ROW><ROW><id>19431721</id><snippet>StvnW</snippet></ROW><ROW><id>19431894</id><snippet>class Base(tornado.web.RequestHandler):
    def get_unique_id(self):
        return self.get_secure_cookie('unique_id')

    def set_unique_id(self, some_value):
        return self.set_secure_cookie('unique_id', some_value)


class ShowLogin(Base):
  def get(self):
    if get_unique_id():
       # Get stuff from Mongo using unique_id
       # mongo calls
       self.redirect('/dashboard')
    else:
       self.render('login.html')


class LoginLogin(Base):
  def post(self):
    self.set_unique_id(some_id)
</snippet></ROW><ROW><id>19431939</id><snippet>x =[1,2,3,4]
x.append(5)
print(x)
    [1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>19431939</id><snippet>x.append([6,7])
print(x)
    [1, 2, 3, 4, 5, [6, 7]]
</snippet></ROW><ROW><id>19431939</id><snippet>    [1, 2, 3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>19431939</id><snippet>x.extend([6,7])
print(x)
    [1, 2, 3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>19431974</id><snippet>&gt;&gt;&gt; round(21.3331, 1)
21.3
</snippet></ROW><ROW><id>19431974</id><snippet>&gt;&gt;&gt; print "%.1f" % (21.3331,)
21.3
</snippet></ROW><ROW><id>19431974</id><snippet>%d</snippet></ROW><ROW><id>19431974</id><snippet>&gt;&gt;&gt; print "%d" % (21.3331,)
21
</snippet></ROW><ROW><id>19431974</id><snippet>%</snippet></ROW><ROW><id>19432250</id><snippet>qsub [qsub options] job
</snippet></ROW><ROW><id>19432250</id><snippet>qsub -l walltime=72:00:00 test_job.sh
</snippet></ROW><ROW><id>19432250</id><snippet>from subprocess import call

qsub_call = "qsub -l walltime=72:00:00 %s"
call(qsub_call % "test_job.sh", shell=True)
</snippet></ROW><ROW><id>19432250</id><snippet>#!/bin/bash

filename="your_filename_here"
ifort -openmp ran_numbers.f90 $filename ompscmf.f90 -o scmf.o
</snippet></ROW><ROW><id>19432250</id><snippet>qsub job.sh</snippet></ROW><ROW><id>19432250</id><snippet>#!/bin/bash
#PBS -l nodes=1;ppn=8

for ((i=0; i&lt;8; i++))
do
    ./myjob.sh filename_${i} &amp;
done
wait
</snippet></ROW><ROW><id>19432250</id><snippet>&amp;</snippet></ROW><ROW><id>19432250</id><snippet>#!/usr/bin/env python
import os
from subprocess import call

bash_lines = ['#!/bin/bash\n', '#PBS -l nodes=1;ppn=1\n']
bash_name = 'myjob_%i.sh'
job_call = 'ifort -openmp ran_numbers.f90 %s ompscmf.f90 -o scmf.o &amp;\n'
qsub_call = 'qsub myjob_%i.sh'

filenames = [os.path.join(root, f) for root, _, files in os.walk(directory)
                                   for f in files if f.endswith('.txt')]
for i, filename in enumerate(filenames):
    with open(bash_name%i, 'w') as bash_file:
        bash_file.writelines(bash_lines + [job_call%filename, 'wait\n'])
    call(qsub_call%i, shell=True)
</snippet></ROW><ROW><id>19432618</id><snippet>import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

def exponential_fit(x, a, b, c):
    return a*np.exp(-b*x) + c

if __name__ == "__main__":
    x = np.array([0, 1, 2, 3, 4, 5])
    y = np.array([30, 50, 80, 160, 300, 580])
    fitting_parameters, covariance = curve_fit(exponential_fit, x, y)
    a = fitting_parameters[0]
    b = fitting_parameters[1]
    c = fitting_parameters[2]

    next_x = 6
    next_y = exponential_fit(next_x, a, b, c)

    plt.plot(y)
    plt.plot(np.append(y, next_y), 'ro')
    plt.show()
</snippet></ROW><ROW><id>19432664</id><snippet>print num
</snippet></ROW><ROW><id>19432664</id><snippet>primes.append(num)
</snippet></ROW><ROW><id>19432664</id><snippet>from random import choice
print choice(primes)
</snippet></ROW><ROW><id>19432941</id><snippet>np.uint32</snippet></ROW><ROW><id>19432941</id><snippet>np.uint8</snippet></ROW><ROW><id>19432941</id><snippet>np.uint8</snippet></ROW><ROW><id>19432941</id><snippet>&gt;&gt;&gt; img = np.array([7765869, 16777215], dtype=np.uint32)
&gt;&gt;&gt; img.view(np.uint8)
array([109, 127, 118,   0, 255, 255, 255,   0], dtype=uint8)
&gt;&gt;&gt; img.view(np.uint8).reshape(img.shape+(4,))[..., :3]
array([[109, 127, 118],
       [255, 255, 255]], dtype=uint8)
</snippet></ROW><ROW><id>19432941</id><snippet>.copy()</snippet></ROW><ROW><id>19433198</id><snippet>for row in rdr</snippet></ROW><ROW><id>19433198</id><snippet>outlist=[]
for index in  cmdargs:
  outlist.append(row[index])
wtr.writerow(outlist)
</snippet></ROW><ROW><id>19433198</id><snippet>wtr.writerow([row[i] for i in cmdargs])
</snippet></ROW><ROW><id>19433209</id><snippet>len</snippet></ROW><ROW><id>19433209</id><snippet>len = np.linalg.norm((segment[0][0]-segment[1][0], segment[0][1]-segment[1][1]))
</snippet></ROW><ROW><id>19433209</id><snippet>3(...)</snippet></ROW><ROW><id>19433209</id><snippet>x = [1, 2, 5]
len = 5
len(x)
</snippet></ROW><ROW><id>19433483</id><snippet>class TestThread_output(Thread):
    def __init__(self,mainForm):
        Thread.__init__(self)
        self.mainForm = mainForm #save reference to the mainFrame GUI
        self.start()    # start the thread
    def run(self):
        for i in range(1000):
            wx.CallAfter(self.mainForm.WriteThis) #since its a diff thread you need callafter(or calllater)
            #I dont think you can do self.mainForm.WriteThis()
            time.sleep(20)

class TMainForm(wx.Frame):
    ...
    def OnAnalyzePress(self,event): 
        TestThread0()
        time.sleep(2)
        TestThread1()
        time.sleep(2)
        TestThread2()
        time.sleep(2)
        TestThread_output(self) #&lt;- pass in this as mainFrame argument to thread constructor
</snippet></ROW><ROW><id>19433620</id><snippet>def addPane(self, text_to_display):
  pane_locs = [(175, 75, 200, 100), 
               (0, 0, 200, 100),
               (600, 400, 200, 100),
               (175, 75, 200, 100),
               (175, 75, 200, 100),
               (175, 75, 200, 100),
               (175, 75, 200, 100),
               (175, 75, 200, 100),
               (175, 75, 200, 100),
               (175, 75, 200, 100),
              ]
  for i, pane_loc in enumerate(pane_locs):
    if self.num_panes &gt; 10:
       print("limit reached")
       break
    if i == 1:
      self.screen.blit(self.font.render(text_to_display, True, (black)), (250, 115))
    pygame.draw.rect(self.screen, (black), pane_loc, 2)
    self.num_panes += 1
    pygame.display.update()
</snippet></ROW><ROW><id>19433649</id><snippet>LAST()</snippet></ROW><ROW><id>19433649</id><snippet>SELECT @@IDENTITY</snippet></ROW><ROW><id>19433649</id><snippet>import pyodbc
cnxn = pyodbc.connect('DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\\Users\\Public\\Database1.accdb;')
cursor = cnxn.cursor()
cursor.execute("INSERT INTO Clients (FirstName, LastName) VALUES (?, ?)", ['Mister', 'Gumby'])
cursor.commit()
cursor.execute("SELECT @@IDENTITY AS ID")
row = cursor.fetchone()
print row.ID
cnxn.close()
</snippet></ROW><ROW><id>19433703</id><snippet>user = models.ForeignKey('User', unique=True)
</snippet></ROW><ROW><id>19433703</id><snippet>user = models.ForeignKey(User, unique=True)
</snippet></ROW><ROW><id>19433868</id><snippet> range(7) 
 range(4,8) 
 range(3,11,2)
</snippet></ROW><ROW><id>19433868</id><snippet> [w*2 for w in range(10)] 
 [w*2 for w in range(10) if w &lt; 4] 
</snippet></ROW><ROW><id>19434006</id><snippet>base, height, area</snippet></ROW><ROW><id>19434006</id><snippet>f(x)</snippet></ROW><ROW><id>19434006</id><snippet>f(x)</snippet></ROW><ROW><id>19434006</id><snippet>x</snippet></ROW><ROW><id>19434006</id><snippet>def Function(x):
    y = x*x
    return y
</snippet></ROW><ROW><id>19434006</id><snippet>x</snippet></ROW><ROW><id>19434006</id><snippet>Function(2)
</snippet></ROW><ROW><id>19434006</id><snippet>run Function(x) where x = 2</snippet></ROW><ROW><id>19434006</id><snippet>raw_input()</snippet></ROW><ROW><id>19434006</id><snippet>raw_input()</snippet></ROW><ROW><id>19434006</id><snippet>print</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>print</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>def Function1(x,y):
    z = x*y
    print z

def Function2(x,y):
    z = x*y
    return z
</snippet></ROW><ROW><id>19434006</id><snippet>z</snippet></ROW><ROW><id>19434006</id><snippet>print z</snippet></ROW><ROW><id>19434006</id><snippet>returns z</snippet></ROW><ROW><id>19434006</id><snippet>z</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>if</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>inData()</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>if</snippet></ROW><ROW><id>19434006</id><snippet>inData</snippet></ROW><ROW><id>19434006</id><snippet>inData()</snippet></ROW><ROW><id>19434006</id><snippet> x = sqrt(4)
 print x
</snippet></ROW><ROW><id>19434006</id><snippet>2</snippet></ROW><ROW><id>19434006</id><snippet>sqrt()</snippet></ROW><ROW><id>19434006</id><snippet>x</snippet></ROW><ROW><id>19434006</id><snippet>sqrt(4)</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet> sqrt(4)
</snippet></ROW><ROW><id>19434006</id><snippet>2</snippet></ROW><ROW><id>19434006</id><snippet>inData()
triangle(base, height)
</snippet></ROW><ROW><id>19434006</id><snippet>run the function inData()
run the function triangle(base, height)
</snippet></ROW><ROW><id>19434006</id><snippet>returns</snippet></ROW><ROW><id>19434006</id><snippet>set &lt;variable1&gt; equal to the return of inData()
set &lt;variable2&gt; equal to the return of triangle(base,height)
</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>x = 1+1
return x
</snippet></ROW><ROW><id>19434006</id><snippet>return 1+1</snippet></ROW><ROW><id>19434006</id><snippet>area</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>area</snippet></ROW><ROW><id>19434006</id><snippet>return</snippet></ROW><ROW><id>19434006</id><snippet>area</snippet></ROW><ROW><id>19434006</id><snippet>variables defined that you don't need
def FunctionThatGathersData()
def FunctionThatDoesTheMath(x,y)
if (condition)
     FunctionThatGathersData()
     FunctionThatDoesTheMath(x,y)
     print out the results
</snippet></ROW><ROW><id>19434006</id><snippet>FunctionThatGathersData</snippet></ROW><ROW><id>19434006</id><snippet>FunctionThatDoesTheMath</snippet></ROW><ROW><id>19434006</id><snippet>x = 0
def Function()
    x = 5
    y = 10
</snippet></ROW><ROW><id>19434006</id><snippet>x</snippet></ROW><ROW><id>19434006</id><snippet>x</snippet></ROW><ROW><id>19434006</id><snippet>Function()</snippet></ROW><ROW><id>19434006</id><snippet>y</snippet></ROW><ROW><id>19434006</id><snippet>x</snippet></ROW><ROW><id>19434006</id><snippet>DoTheMathAndThenGiveMeTheValueBack</snippet></ROW><ROW><id>19434006</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>19434006</id><snippet>base</snippet></ROW><ROW><id>19434006</id><snippet>height</snippet></ROW><ROW><id>19434006</id><snippet>area</snippet></ROW><ROW><id>19434006</id><snippet>def CalculateTriangleArea(b,h):
    return b / 2 * h

if __name__ == '__main__':
    base = float(raw_input("Base:"))
    height = float(raw_input("Height:"))
    area = CalculateTriangleArea(base,height)
    print "The area of a triangle of base", base, "and height", height, "will be", area
</snippet></ROW><ROW><id>19434006</id><snippet>returns</snippet></ROW><ROW><id>19434006</id><snippet>array</snippet></ROW><ROW><id>19434006</id><snippet>tuple</snippet></ROW><ROW><id>19434006</id><snippet>array</snippet></ROW><ROW><id>19434006</id><snippet>tuple</snippet></ROW><ROW><id>19434006</id><snippet>index</snippet></ROW><ROW><id>19434006</id><snippet>[i]</snippet></ROW><ROW><id>19434006</id><snippet>[0]</snippet></ROW><ROW><id>19434006</id><snippet>def Function():
    string1 = "nobody"
    string2 = "expects"
    string3 = "the"
    string4 = "spanish"
    string5 = "inquisition"
    return string1, string2, string3, string4, string5

print Function()[0]
print Function()[1]
print Function()[2]
print Function()[3]
print Function()[4]
print Function() #prints the whole tuple!
</snippet></ROW><ROW><id>19434006</id><snippet>nobody
expects
the
spanish
inquisition
('nobody', 'expects', 'the', 'spanish', 'inquisition')
</snippet></ROW><ROW><id>19434203</id><snippet>fp_numpy</snippet></ROW><ROW><id>19434203</id><snippet>with</snippet></ROW><ROW><id>19434203</id><snippet>with open("numpy_temp.py", "w") as fp_numpy:
    fp_numpy.write(numpy_temp)
</snippet></ROW><ROW><id>19434203</id><snippet>x</snippet></ROW><ROW><id>19434203</id><snippet>y</snippet></ROW><ROW><id>19434203</id><snippet>numpy.array</snippet></ROW><ROW><id>19434203</id><snippet>print "err", err</snippet></ROW><ROW><id>19434203</id><snippet>shell=True</snippet></ROW><ROW><id>19434203</id><snippet>cmd = ["/remote/Python-2.7.2/bin/python", "numpy_temp.py"]
proc = subprocess.Popen(cmd, stdout = subprocess.PIPE,
                        stderr = subprocess.PIPE)
</snippet></ROW><ROW><id>19434335</id><snippet>u</snippet></ROW><ROW><id>19434335</id><snippet>xx</snippet></ROW><ROW><id>19434335</id><snippet>xi</snippet></ROW><ROW><id>19434335</id><snippet>yi</snippet></ROW><ROW><id>19434335</id><snippet>xx</snippet></ROW><ROW><id>19434335</id><snippet>u</snippet></ROW><ROW><id>19434335</id><snippet>xi</snippet></ROW><ROW><id>19434335</id><snippet>yj</snippet></ROW><ROW><id>19434335</id><snippet>T</snippet></ROW><ROW><id>19434335</id><snippet>import numpy as np
from scipy.integrate import dblquad

b = 50.0

x = np.linspace(-10, 10, 1000)
y = np.linspace(0, 10, 1000)

def f(xx, u, xi, yj):
    return ((np.exp(u * (b - yj)) - np.exp(-u * (b - yj))) /
            (np.exp(u * b) - np.exp(-u * b)) * np.cos(u * (xx - xi)))

T = np.zeros([len(x), len(y)])
for i, xi in enumerate(x):
    for j, yj in enumerate(y):
        T[i, j] += dblquad(
            f, -10, 10, lambda x: 0.1, lambda x: 10, args=(xi, yj))[0]
</snippet></ROW><ROW><id>19434432</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; url = '/s/GETTHISDATA/canBeIgnored/canBeIgnored'
&gt;&gt;&gt; re.findall('(?&lt;=/).*?(?=/)', url)
['s', 'GETTHISDATA', 'canBeIgnored']
&gt;&gt;&gt; re.findall('(?&lt;=/).*?(?=/)', url)[1]
'GETTHISDATA'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19434432</id><snippet>/</snippet></ROW><ROW><id>19434432</id><snippet>(?&lt;=/) # Poisitive look-back assertion to test if text is preceded by a /
.*?    # Zero or more non-whitespace characters that are matched non-greedily
(?=/)  # Positive look-ahead assertion to test if text is followed by a /
</snippet></ROW><ROW><id>19434432</id><snippet>/</snippet></ROW><ROW><id>19434432</id><snippet>&gt;&gt;&gt; url.split('/')
['', 's', 'GETTHISDATA', 'canBeIgnored', 'canBeIgnored']
&gt;&gt;&gt; url.split('/')[2]
'GETTHISDATA'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19434473</id><snippet>__import__()</snippet></ROW><ROW><id>19434473</id><snippet>ImportError</snippet></ROW><ROW><id>19434473</id><snippet>ground</snippet></ROW><ROW><id>19434476</id><snippet>from sqlalchemy.dialects.postgresql import ARRAY

class MyTable:
    __tablename__ = 'mytable'

    id = Column(Integer, primary_key=True)
    text_array = Column(ARRAY(Unicode))

    def __init__(self, text_array):
        self.text_array = text_array
</snippet></ROW><ROW><id>19434630</id><snippet>class Book(models.Model):
    ...
    def copied_available(self):
        return self.copies.filter(issued_to__isnull=True).count()
</snippet></ROW><ROW><id>19434671</id><snippet>SSLContext.load_cert_chain</snippet></ROW><ROW><id>19434671</id><snippet>-des3</snippet></ROW><ROW><id>19434671</id><snippet>-nodes</snippet></ROW><ROW><id>19434671</id><snippet>openssl genrsa -nodes -out www.thegeekstuff.com.key 1024</snippet></ROW><ROW><id>19434671</id><snippet>openssl rsa</snippet></ROW><ROW><id>19435147</id><snippet>SETENV</snippet></ROW><ROW><id>19435147</id><snippet>SETENV</snippet></ROW><ROW><id>19435147</id><snippet># file env_set.py
import os
import sys

if sys.argv[0] and "SETENV" in os.environ:
  setenv = os.environ["SETENV"]
  del os.environ["SETENV"]
  os.execvp("bash", ["bash", "-c",
        "source " + setenv + "; exec python " + sys.argv[0] + ' "${@}"',
        "--"] + sys.argv[1:])
</snippet></ROW><ROW><id>19435147</id><snippet># file test_env_set.py
import env_set

import os
import sys
for name in sys.argv[1:]:
  if name in os.environ:
    print(name + "=" + os.environ[name])
  else:
    print("Undefined: " + name)

# file setenv.sh
export the_answer=42

$ python test_env_set.py SETENV the_answer
Undefined: SETENV
Undefined: the_answer
$ SETENV=setenv.sh python test_env_set.py SETENV the_answer
Undefined: SETENV
the_answer=42
</snippet></ROW><ROW><id>19435175</id><snippet>handle_*</snippet></ROW><ROW><id>19435175</id><snippet>handle</snippet></ROW><ROW><id>19435175</id><snippet>self</snippet></ROW><ROW><id>19435175</id><snippet>class CacheFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return Cache(self)
    def handle_get(self, **kwargs):
        print 'get\n', kwargs
    def handle_set(self, **kwargs):
        print 'set\n', kwargs
    def handle_delete(self, **kwargs):
        print 'delete\n', kwargs
    def __init__(self, *args, **kwargs):
        protocol.Factory.__init__(self, *args, **kwargs)
        self.handle = {
            'get': self.handle_get,
            'set': self.handle_set,
            'delete': self.handle_delete,
        }
</snippet></ROW><ROW><id>19435175</id><snippet>handle</snippet></ROW><ROW><id>19435175</id><snippet>    def dataReceived(self, data):
        request = json.loads(data)
        self.factory.handle[request['command']](self.factory, **request)
        self.transport.write(data)
</snippet></ROW><ROW><id>19435175</id><snippet>handle</snippet></ROW><ROW><id>19435175</id><snippet>    def dataReceived(self, data):
        request = json.loads(data)
        getattr(self.factory, "handle_%s" % (request['command'],))(**request)
        self.transport.write(data)
</snippet></ROW><ROW><id>19435175</id><snippet>dataReceived</snippet></ROW><ROW><id>19435175</id><snippet>json</snippet></ROW><ROW><id>19435533</id><snippet>zip</snippet></ROW><ROW><id>19435533</id><snippet>&gt;&gt;&gt; zip(l2, l1)
[('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')]
</snippet></ROW><ROW><id>19435533</id><snippet>def intercala_listas(lista1,lista2):
    # Assumes lista1 and lista2 are the same length 
    lista = []

    for i in range(len(lista1)):
        lista.append(lista1[i])
        lista.append(lista2[i])

    return lista
</snippet></ROW><ROW><id>19435533</id><snippet>&gt;&gt;&gt; print intercala_listas(list("aceg"), list("bdfh"))
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
</snippet></ROW><ROW><id>19436064</id><snippet>new_list = [(x, my_function(y)) for x, y in my_list]
</snippet></ROW><ROW><id>19436064</id><snippet>.append()</snippet></ROW><ROW><id>19436116</id><snippet>Option Explicit

Private m_XCount&amp;
Private m_YCount&amp;
Private m() As Variant

Public Sub Add(ByRef u() As Variant)

    If UBound(u) &gt; m_XCount Then
        m_XCount = UBound(u)
    End If

    m_YCount = m_YCount + 1

    ReDim Preserve m(0 To m_XCount, 0 To m_YCount)

    Dim l&amp;
    For l = 0 To UBound(u)
        m(m_XCount + l, m_YCount) = u(l + 1)
    Next l

    m_YCount = m_YCount + 1

End Sub

Private Sub Class_Initialize()

    ReDim m(0, 0)

End Sub
Public Property Get Value(ByVal uX As Long, ByVal uY As Long) As Variant

    Value = m(uX, uY)

End Property
Public Property Let Value(ByVal uX As Long, ByVal uY As Long, ByVal uValue)

    m(uX, uY) = uValue

End Property
</snippet></ROW><ROW><id>19436264</id><snippet>idx = random.randint(0, len(list1)-3)
list1[idx:idx+3]
</snippet></ROW><ROW><id>19436280</id><snippet>products = db.session.query(Category).\
    filter_by(id=category_id).\
    products.\
    all()
</snippet></ROW><ROW><id>19436280</id><snippet>all_products = Category.query.\
    filter_by(id=category_id).\
    first().\
    products
</snippet></ROW><ROW><id>19436287</id><snippet>rating = pd.DataFrame({"BMW":[7, 8, 9, 8], "Fiat":[2, 1, 10, 3], "Toyota":[3, 8, 7,9]})
own = pd.DataFrame({"BMW":[1, 0, 0, 0], "Fiat":[1, 1, 0, 1], "Toyota":[0, 1, 1, 1]})

r = rating.unstack().reset_index(name='value')
o = own.unstack().reset_index(name='value')
res = DataFrame({"Brand":r["level_0"], "Rating": r["value"], "Own": o["value"]})
res = res.groupby(["Own", "Brand"]).mean().reset_index()
res.pivot(index="Own", columns="Brand", values="Rating")

# result
# Brand       BMW  Fiat  Toyota
# Own                          
# 0      8.333333    10       3
# 1      7.000000     2       8
</snippet></ROW><ROW><id>19436287</id><snippet>own</snippet></ROW><ROW><id>19436287</id><snippet>d = []
for o in (0, 1):
    t = rating[own == o]
    t["own"] = o
    d.append(t)

res = pd.concat(d).groupby("own").mean()
</snippet></ROW><ROW><id>19436385</id><snippet>sorted</snippet></ROW><ROW><id>19436385</id><snippet>data</snippet></ROW><ROW><id>19436385</id><snippet>participationKey</snippet></ROW><ROW><id>19436385</id><snippet>focusKey</snippet></ROW><ROW><id>19436385</id><snippet>data = sorted(data, key=lambda pf: participationKey[pf[0]])
</snippet></ROW><ROW><id>19436385</id><snippet>data = sorted(data, key=lambda pf: participationKey[pf[0]] + focusKey[pf[1]])
</snippet></ROW><ROW><id>19436385</id><snippet>sorted</snippet></ROW><ROW><id>19436385</id><snippet>pf</snippet></ROW><ROW><id>19436385</id><snippet>for pf in data:
    print "participation = %s, focus = %s" % pf
</snippet></ROW><ROW><id>19436385</id><snippet>argsort</snippet></ROW><ROW><id>19436385</id><snippet>data</snippet></ROW><ROW><id>19436385</id><snippet>import numpy as np
inds = np.array([participationKey[pf[0]] for pf in data])
sort_inds = np.argsort(inds)
sorted_data = [data[ind] for ind in sort_inds]
</snippet></ROW><ROW><id>19436560</id><snippet>r = [i for i, w in enumerate(dlist) if w == y]
print ("\nThis word appears",len(r),"times.")
print ("\nThis word appears in the places", r)
</snippet></ROW><ROW><id>19436560</id><snippet>count = dlist.count(y)
index = dlist.index(y)
print ("\nThis word appears",count,"times.")
print ("\nThis word appears in the places",index)
</snippet></ROW><ROW><id>19436561</id><snippet>recarray</snippet></ROW><ROW><id>19436561</id><snippet>field()</snippet></ROW><ROW><id>19436561</id><snippet>&gt;&gt;&gt; x.field(2)
... array(['0 bottles of beer on the wall', '1 bottles of beer on the wall',
       '2 bottles of beer on the wall', '3 bottles of beer on the wall',
       '4 bottles of beer on the wall', '5 bottles of beer on the wall',
       '6 bottles of beer on the wall', '7 bottles of beer on the wall',
       '8 bottles of beer on the wall', '9 bottles of beer on the wall',
       '10 bottles of beer on the wall', '11 bottles of beer on the wall',
       '12 bottles of beer on the wall', '13 bottles of beer on the wall',
       '14 bottles of beer on the wall', '15 bottles of beer on the wall',
       '16 bottles of beer on the wall', '17 bottles of beer on the wall',
       '18 bottles of beer on the wall', '19 bottles of beer on the wall'], dtype=object)
</snippet></ROW><ROW><id>19436847</id><snippet>In [11]: g = df.groupby('DateOccurence')

In [12]: g.Category.apply(pd.value_counts)
Out[12]: 
DateOccurence        
2010-01-02     Small     1
2010-01-09     Medium    1
2010-02-09     Small     1
2010-02-10     Small     2
2010-02-11     Small     1
2010-02-17     Small     1
2010-02-19     Medium    1
2010-03-05     Medium    1
2010-03-06     Small     1
2010-03-12     Small     1
2010-03-16     Small     1
2010-04-08     High      1
2010-04-09     Small     1
2010-04-14     Small     1
2011-01-19     Small     1
2011-01-24     Small     1
2011-01-27     Small     1
dtype: int64
</snippet></ROW><ROW><id>19436847</id><snippet>In [13]: g.Category.apply(pd.value_counts).unstack(-1).fillna(0)
Out[13]: 
               High  Medium  Small
DateOccurence                     
2010-01-02        0       0      1
2010-01-09        0       1      0
2010-02-09        0       0      1
2010-02-10        0       0      2
2010-02-11        0       0      1
2010-02-17        0       0      1
2010-02-19        0       1      0
2010-03-05        0       1      0
2010-03-06        0       0      1
2010-03-12        0       0      1
2010-03-16        0       0      1
2010-04-08        1       0      0
2010-04-09        0       0      1
2010-04-14        0       0      1
2011-01-19        0       0      1
2011-01-24        0       0      1
2011-01-27        0       0      1
</snippet></ROW><ROW><id>19436888</id><snippet>*ref_stack</snippet></ROW><ROW><id>19436888</id><snippet>def foo(*args):
    print(len(args))
    foo(*args + args)
</snippet></ROW><ROW><id>19436888</id><snippet>ref_stack</snippet></ROW><ROW><id>19436888</id><snippet>def _process_value(value, ref_stack):
    # ...
    ref_stack.append(ref_key)
    _process_value(value, ref_stack)
    ref_stack.pop()
    # ...
</snippet></ROW><ROW><id>19436888</id><snippet>def _process_value(value, ref_stack):
    while True:
        # ...
        ref_stack.append(ref_key)
</snippet></ROW><ROW><id>19437268</id><snippet>[ [letter for letter in List if letter not in stoplist] for List in nested]
</snippet></ROW><ROW><id>19437268</id><snippet>nested</snippet></ROW><ROW><id>19437272</id><snippet>__init__.py</snippet></ROW><ROW><id>19437272</id><snippet>$ touch helper/__init__.py
</snippet></ROW><ROW><id>19437391</id><snippet>def read_records(iterable):
    record = {}
    for line in iterable:
        if line.startswith('[------'):
            # new record, yield previous
            if record:
                yield record
            record = {}
            continue
        key, value = line.strip().split(':', 1)
        record[key.strip()] = value.strip()

    # file done, yield last record
    if record:
        yield record
</snippet></ROW><ROW><id>19437391</id><snippet>csv</snippet></ROW><ROW><id>19437391</id><snippet>csv.DictWriter()</snippet></ROW><ROW><id>19437391</id><snippet># List *all* possible keys, in the order the output file should list them
headers = ('Version', 'Stream', 'Account', ...)

with open(inputfile) as infile, open(outputfile, 'wb') as outfile:
    records = read_records(infile)

    writer = csv.DictWriter(outfile, headers, delimiter=';')
    writer.writeheader()

    # and write
    writer.writerows(records)
</snippet></ROW><ROW><id>19437391</id><snippet>headers</snippet></ROW><ROW><id>19437391</id><snippet>extrasaction</snippet></ROW><ROW><id>19437391</id><snippet>DictWriter()</snippet></ROW><ROW><id>19437391</id><snippet>'ignore'</snippet></ROW><ROW><id>19437437</id><snippet>numpy</snippet></ROW><ROW><id>19437437</id><snippet>SeqIO.parse()</snippet></ROW><ROW><id>19437437</id><snippet>with open('sequences.fasta') as fasta_file:  # Will close handle cleanly
    identifiers = []
    lengths = []
    for seq_record in SeqIO.parse(fasta_file, 'fasta'):  # (generator)
        identifiers.append(seq_record.id)
        lengths.append(len(seq_record.seq))
</snippet></ROW><ROW><id>19437437</id><snippet>pandas</snippet></ROW><ROW><id>19437437</id><snippet>panda.Series</snippet></ROW><ROW><id>19437437</id><snippet>data</snippet></ROW><ROW><id>19437437</id><snippet>numpy</snippet></ROW><ROW><id>19437437</id><snippet>ndarray</snippet></ROW><ROW><id>19437437</id><snippet>class Series(np.ndarray, Picklable, Groupable):
    """Generic indexed series (time series or otherwise) object.

    Parameters
    ----------
    data:  array-like
        Underlying values of Series, preferably as numpy ndarray
</snippet></ROW><ROW><id>19437437</id><snippet>identifiers</snippet></ROW><ROW><id>19437437</id><snippet>ndarray</snippet></ROW><ROW><id>19437437</id><snippet>Series</snippet></ROW><ROW><id>19437437</id><snippet>copy</snippet></ROW><ROW><id>19437437</id><snippet>False</snippet></ROW><ROW><id>19437437</id><snippet>ndarray</snippet></ROW><ROW><id>19437437</id><snippet>ndarray</snippet></ROW><ROW><id>19437437</id><snippet>ndarray</snippet></ROW><ROW><id>19437437</id><snippet>num_seqs = 50
max_id_len = 60
numpy.empty((num_seqs, 1), dtype='S{:d}'.format(max_id_len))
</snippet></ROW><ROW><id>19437437</id><snippet>numpy</snippet></ROW><ROW><id>19437437</id><snippet>pandas</snippet></ROW><ROW><id>19437536</id><snippet>secret = "Apple"
secret.count('p')
</snippet></ROW><ROW><id>19437536</id><snippet>2
</snippet></ROW><ROW><id>19437551</id><snippet>requirements.txt</snippet></ROW><ROW><id>19437551</id><snippet>requirements.txt</snippet></ROW><ROW><id>19437551</id><snippet>
git+git://github.com/thadeusb/flask-cache.git
</snippet></ROW><ROW><id>19437551</id><snippet>@</snippet></ROW><ROW><id>19437551</id><snippet>
git+git://github.com/thadeusb/flask-cache.git@40cfd9280dc66ea54df0961420fc94853d506a35
</snippet></ROW><ROW><id>19437551</id><snippet>-e</snippet></ROW><ROW><id>19437551</id><snippet>
-e git+git://github.com/thadeusb/flask-cache.git@40cfd9280dc66ea54df0961420fc94853d506a35#egg=Flask-Cache
</snippet></ROW><ROW><id>19437551</id><snippet>index-url</snippet></ROW><ROW><id>19437551</id><snippet>pip install --index-url=http://pip.razer.domain/ -r requirements.txt
</snippet></ROW><ROW><id>19437551</id><snippet>~/.pip/pip.conf</snippet></ROW><ROW><id>19437551</id><snippet>[global]
index-url = http://pip.razer.domain/
</snippet></ROW><ROW><id>19437614</id><snippet>apples()</snippet></ROW><ROW><id>19438054</id><snippet>db.init_app(app)</snippet></ROW><ROW><id>19438054</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>19438054</id><snippet>def create_app():
    app = flask.Flask("app")
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'
    app.register_blueprint(api)
    db.init_app(app)
    with app.app_context();
        # Extensions like Flask-SQLAlchemy now know what the "current" app
        # is while within this block. Therefore, you can now run...
        db.create_all()

    return app
</snippet></ROW><ROW><id>19438057</id><snippet>from ctypes import *

list3d = [
    [[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0]], 
    [[0.2, 1.2, 2.2, 3.2], [4.2, 5.2, 6.2, 7.2]],
    [[0.4, 1.4, 2.4, 3.4], [4.4, 5.4, 6.4, 7.4]],
]

arr = (c_double * 4 * 2 * 3)(*(tuple(tuple(j) for j in i) for i in list3d))
</snippet></ROW><ROW><id>19438057</id><snippet>&gt;&gt;&gt; (c_double * 24).from_buffer(arr)[:]
[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 
 0.2, 1.2, 2.2, 3.2, 4.2, 5.2, 6.2, 7.2, 
 0.4, 1.4, 2.4, 3.4, 4.4, 5.4, 6.4, 7.4]
</snippet></ROW><ROW><id>19438057</id><snippet>enumerate</snippet></ROW><ROW><id>19438057</id><snippet>list</snippet></ROW><ROW><id>19438057</id><snippet>arr = (c_double * 4 * 2 * 3)()

for i, row in enumerate(list3d):
    for j, col in enumerate(row):
        arr[i][j][:] = col
</snippet></ROW><ROW><id>19438251</id><snippet>func</snippet></ROW><ROW><id>19438251</id><snippet>@property</snippet></ROW><ROW><id>19438443</id><snippet>[].sort()</snippet></ROW><ROW><id>19438443</id><snippet>None</snippet></ROW><ROW><id>19438443</id><snippet>imap</snippet></ROW><ROW><id>19438443</id><snippet>imap</snippet></ROW><ROW><id>19438443</id><snippet>[].sort</snippet></ROW><ROW><id>19438443</id><snippet>list.sort</snippet></ROW><ROW><id>19438443</id><snippet>None</snippet></ROW><ROW><id>19438443</id><snippet>foo.values()</snippet></ROW><ROW><id>19438443</id><snippet>list.sort</snippet></ROW><ROW><id>19438443</id><snippet>None</snippet></ROW><ROW><id>19438443</id><snippet>imap</snippet></ROW><ROW><id>19438443</id><snippet>map</snippet></ROW><ROW><id>19438443</id><snippet>imap</snippet></ROW><ROW><id>19438443</id><snippet>for value in foo.values():
    value.sort()
</snippet></ROW><ROW><id>19438443</id><snippet>bar = imap(sorted, foo.values())
</snippet></ROW><ROW><id>19438443</id><snippet>bar</snippet></ROW><ROW><id>19438505</id><snippet>scipy.interpolate.interp1d()</snippet></ROW><ROW><id>19438505</id><snippet>with tb.open_file('myfile.h5', 'r') as f:
    x = f.root.mytable.cols.x[::4]
    y = f.root.mytable.cols.y[::4]

f = scipy.interpolate.interp1d(x, y)
ynew = f(xnew)
</snippet></ROW><ROW><id>19438505</id><snippet>query = "{0} &lt;= x &amp; x &lt;= {1}".format(xnew.min()*0.9, xnew.max()*1.1)

with tb.open_file('myfile.h5', 'r') as f:
    data = f.root.mytable.read_where(query)

f = scipy.interpolate.interp1d(data['x'], data['y'])
ynew = f(xnew)
</snippet></ROW><ROW><id>19438505</id><snippet>xnew</snippet></ROW><ROW><id>19438505</id><snippet>newlen = len(xnew)
chunks = 10
chunklen = newlen/ chunks
ynew = np.empty(newlen, dtype=float)
for i in range(chunks):
    xnew_chunk = xnew[i*chunklen:(i+1)*chunklen]
    query = "{0} &lt;= x &amp; x &lt;= {1}".format(xnew_chunklen.min()*0.9, 
                                         xnew_chunklen.max()*1.1)

    with tb.open_file('myfile.h5', 'r') as f:
        data = f.root.mytable.read_where(query)

    f = scipy.interpolate.interp1d(data['x'], data['y'])
    ynew[i*chunklen:(i+1)*chunklen] = f(xnew_chunk)
</snippet></ROW><ROW><id>19438761</id><snippet>sorted_data = [files.data[ind] for ind in sort_inds]
</snippet></ROW><ROW><id>19438761</id><snippet>sorted_data = []
for ind in sort_inds:
    sorted_data.append(files.data[ind])
</snippet></ROW><ROW><id>19438930</id><snippet>oneOf</snippet></ROW><ROW><id>19438930</id><snippet>required</snippet></ROW><ROW><id>19438930</id><snippet>start_dt</snippet></ROW><ROW><id>19438930</id><snippet>end_dt</snippet></ROW><ROW><id>19438930</id><snippet>{
    "type": "object",
    "properties": {
        "name": {"type": "string"},
        "start_dt": {"type": "string", "format": "date"},
        "end_dt": {"type": "string", "format": "date"}
    },
    "oneOf": [
        {"required": ["start_dt"]},
        {"required": ["end_dt"]}
    ]
}
</snippet></ROW><ROW><id>19439084</id><snippet>import mylogger

log_file_handle = mylogger.get_log()
</snippet></ROW><ROW><id>19439084</id><snippet>get</snippet></ROW><ROW><id>19439150</id><snippet>raise err</snippet></ROW><ROW><id>19439150</id><snippet>&lt;some code&gt;</snippet></ROW><ROW><id>19439206</id><snippet># build variables
vars = Variables()

vars.Add(EnumVariable('VARIANT', 'Build variant', 'debug', allowed_values('debug', 'release'))
vars.Add(PathVariable('GTEST_DIR', 'path to gtest', os.environ.get('GTEST_PATH'), PathVariable.PathIsDir))

## environment: macbook
macbook = Environment(variables = vars)

Help(vars.GenerateHelpText(macbook))

### include
macbook.Append(CPPPATH = ["/usr/local/Cellar/gcc48/4.8.1/gcc/include/c++/4.8.", \
                      "$GTEST_PATH/include", \
                      "/usr/local/Cellar/log4cxx/0.10.0/include"])
</snippet></ROW><ROW><id>19439206</id><snippet>scons GTEST_PATH=/Users/cls/workspace/gtest VARIANT=release
</snippet></ROW><ROW><id>19439206</id><snippet>GTEST_PATH</snippet></ROW><ROW><id>19439206</id><snippet>SCONSFLAGS</snippet></ROW><ROW><id>19439206</id><snippet>scons -h</snippet></ROW><ROW><id>19439432</id><snippet>db.apts.aggregate([
   // Produce one document for every unavailability record.
   {$unwind:"$unavailability"},
   // Reshape the results to spin the date around into sortable order.
   {$project:{ name:1,
               from : { $concat: [
                         {$substr:["$unavailability.@date_from",6,4]},
                         {$substr:["$unavailability.@date_from",3,2]},
                         {$substr:["$unavailability.@date_from",0,2]}
                               ]
                     },
               to : { $concat: [
                         {$substr:["$unavailability.@date_to",6,4]},
                         {$substr:["$unavailability.@date_to",3,2]},
                         {$substr:["$unavailability.@date_to",0,2]}
                               ]
                     }
               // Here, you could pass through additional fields from the original document.
             }
   },
   // For each name, produce a count for every time the target date falls within the range.
   {
      $group: {
         _id: "$name",
         count: { $sum: { $cond: [ { $and: [
                                              {$gte:["20121207","$from"]},
                                              {$lte:["20121207","$to"  ]}
                                           ]

                                    } , 1, 0
                                 ]
                         }
                }
         // Here, you could pass through additional fields from the original document.
      }
   },
   // Select only those documents for which the target date fell withiin none of the ranges
   {$match:{count: 0}}
])
</snippet></ROW><ROW><id>19439510</id><snippet>@app.route('/')
@login_required
def index():
    pass
</snippet></ROW><ROW><id>19439510</id><snippet>def index():
    pass
app.add_url_rule('/', 'index', login_required(index))
</snippet></ROW><ROW><id>19439558</id><snippet>&gt;&gt;&gt; from sympy import Symbol
&gt;&gt;&gt; np.diag([Symbol(x) for x in ['a','b','c','d','e']])
array([[a, 0, 0, 0, 0],
       [0, b, 0, 0, 0],
       [0, 0, c, 0, 0],
       [0, 0, 0, d, 0],
       [0, 0, 0, 0, e]], dtype=object)
</snippet></ROW><ROW><id>19439599</id><snippet>$("#attendees tbody").html(tbl_body);</snippet></ROW><ROW><id>19439599</id><snippet>$().append()</snippet></ROW><ROW><id>19439661</id><snippet>newData = newData+sLine+'\n'+newLine+'\n'
</snippet></ROW><ROW><id>19439661</id><snippet>sLine</snippet></ROW><ROW><id>19439661</id><snippet>newLine</snippet></ROW><ROW><id>19439661</id><snippet>newLine</snippet></ROW><ROW><id>19439661</id><snippet>newData = newData + sLine + newLine
if len(seqData[k]) &gt; 20:
   newData += '\n'
</snippet></ROW><ROW><id>19439693</id><snippet>"sowpods.txt"</snippet></ROW><ROW><id>19439693</id><snippet>sowpods.txt</snippet></ROW><ROW><id>19439693</id><snippet>sowpods.txt</snippet></ROW><ROW><id>19439693</id><snippet>import os
scriptdir = os.path.dirname(os.path.abspath(__file__))

sp_file = os.path.join(scriptdir, "sowpods.txt")
</snippet></ROW><ROW><id>19439693</id><snippet>setup.py</snippet></ROW><ROW><id>19439693</id><snippet>C:\&gt; C:\Python27\python.exe C:\Users\me\MyScripts\myscript.py
</snippet></ROW><ROW><id>19439693</id><snippet>C:\</snippet></ROW><ROW><id>19439693</id><snippet>C:\&gt; cd C:\Users\me\MyScripts\
C:\Users\me\MyScripts\&gt; C:\Python27\python.exe .\myscript.py
</snippet></ROW><ROW><id>19439764</id><snippet>set(lis)
</snippet></ROW><ROW><id>19439901</id><snippet>Preferences</snippet></ROW><ROW><id>19439901</id><snippet>PyDev</snippet></ROW><ROW><id>19439901</id><snippet>Preferences -&gt; PyDev -&gt; (Find your library/package)
</snippet></ROW><ROW><id>19439941</id><snippet>def sub_set(A):
    if A == []: return A
</snippet></ROW><ROW><id>19439941</id><snippet>def sub_set(A):
    if A == []: return [A]
</snippet></ROW><ROW><id>19439941</id><snippet>def sub_set(A):
    if A == []: return [A]
    X = sub_set(A[1:])
    result = []
    for L in X:
        result += [L, A[0:1] + L]
    return result
</snippet></ROW><ROW><id>19439973</id><snippet>def triangle(base):
    for i in range(1,base+1):
        print(''.join('T' for o in range(i)))
    for i in reversed(range(1,base)  # note the lack of the +1 on base
        print(''.join('T' for o in range(i)))
</snippet></ROW><ROW><id>19439973</id><snippet>from shapes import triangle
triangle(3)
</snippet></ROW><ROW><id>19439973</id><snippet>T
TT
TTT
TT
T
</snippet></ROW><ROW><id>19440046</id><snippet>&gt;&gt;&gt; df
  Letters  Numbers  Items  Bool
0       A        1   lamp     1
1       B        2  glass     1
2       B        2  table     1
3       C        5    pic     0
</snippet></ROW><ROW><id>19440046</id><snippet>&gt;&gt;&gt; # slower
&gt;&gt;&gt; df.groupby("Letters").sum()["Bool"] # sum everything, select Bool
Letters
A          1
B          2
C          0
Name: Bool, dtype: int64
</snippet></ROW><ROW><id>19440046</id><snippet>&gt;&gt;&gt; df.groupby("Letters")["Bool"].sum() # select Bool, sum it
Letters
A          1
B          2
C          0
Name: Bool, dtype: int64
</snippet></ROW><ROW><id>19440046</id><snippet>Series</snippet></ROW><ROW><id>19440046</id><snippet>list</snippet></ROW><ROW><id>19440046</id><snippet>list</snippet></ROW><ROW><id>19440046</id><snippet>.tolist()</snippet></ROW><ROW><id>19440082</id><snippet>import csv

with open("database.txt", "r", newline="") as csvfile:
    csvreader = csv.reader(csvfile, delimiter='\t')
    print("Last Name \t Hours \t Wages")
    for row in csvreader:
        print('{}\t{}$\t{}'.format(row[0], row[2], float(row[1])*float(row[2])))
</snippet></ROW><ROW><id>19440082</id><snippet>import csv

with open("database.txt", "r", newline="") as csvfile:
    csvreader = csv.reader(csvfile, delimiter='\t')
    print("Last Name \t Hours \t Wages")
    for row in csvreader:
        try:
            print('{}\t{}\t{}'.format(row[0], row[2], float(row[1])*float(row[2])))
        except ValueError:
            # Handle cases where the casting of row[1] and row[2] to float fails
            code
        except IndexError:
            # Handle cases where index is out of bounds
            code
</snippet></ROW><ROW><id>19440086</id><snippet>now</snippet></ROW><ROW><id>19440086</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19440086</id><snippet>datetime</snippet></ROW><ROW><id>19440086</id><snippet>difference = datetime.datetime.now() - event_date
</snippet></ROW><ROW><id>19440086</id><snippet>difference = datetime.now() - event_date
event_date_new = event_date + difference
</snippet></ROW><ROW><id>19440086</id><snippet>event_date_new = event_date + (datetime.now() - event_date)
</snippet></ROW><ROW><id>19440086</id><snippet>event_date_new = datetime.now()
</snippet></ROW><ROW><id>19440086</id><snippet>now = datetime.datetime.now()
event_date = event_date.replace(year=now.year)
if event_date &lt; now:
    event_date.replace(year=now.year + 1)
</snippet></ROW><ROW><id>19440086</id><snippet>event_date</snippet></ROW><ROW><id>19440086</id><snippet>event_date</snippet></ROW><ROW><id>19440086</id><snippet>ValueError</snippet></ROW><ROW><id>19440086</id><snippet>replace</snippet></ROW><ROW><id>19440086</id><snippet>timedelta</snippet></ROW><ROW><id>19440086</id><snippet>calendar.isleap</snippet></ROW><ROW><id>19440329</id><snippet>groupby</snippet></ROW><ROW><id>19440329</id><snippet>In [4]: df
Out[4]:
  Letters  Numbers  Items  Bool
0       A        1   lamp     1
1       B        2  glass     1
2       B        2  table     1
3       C        5    pic     0
4       B        3  glass     0

In [6]: df.groupby('Letters').filter(lambda x: len(x) &gt; 2)
Out[6]:
  Letters  Numbers  Items  Bool
1       B        2  glass     1
2       B        2  table     1
4       B        3  glass     0
</snippet></ROW><ROW><id>19440329</id><snippet>groupby</snippet></ROW><ROW><id>19440329</id><snippet>tuple</snippet></ROW><ROW><id>19440329</id><snippet>DataFrame</snippet></ROW><ROW><id>19440329</id><snippet>In [9]: for name, subset in df.groupby('Letters'):
   ...:     print(name)
   ...:     print(subset)
   ...:     print('\n')
   ...:
A
  Letters  Numbers Items  Bool
0       A        1  lamp     1


B
  Letters  Numbers  Items  Bool
1       B        2  glass     1
2       B        2  table     1
4       B        3  glass     0


C
  Letters  Numbers Items  Bool
3       C        5   pic     0
</snippet></ROW><ROW><id>19440329</id><snippet>Bool</snippet></ROW><ROW><id>19440329</id><snippet>Letter</snippet></ROW><ROW><id>19440329</id><snippet>In [39]: df.groupby('Letters').filter(lambda x: len(x) &gt; 2).groupby('Letters').Bool.sum()
Out[39]:
Letters
B          2
C          1
Name: Bool, dtype: int64
</snippet></ROW><ROW><id>19440352</id><snippet>import MySQLdb

class DB:
  conn = None

  def connect(self):
    self.conn = MySQLdb.connect()

  def query(self, sql):
    try:
      cursor = self.conn.cursor()
      cursor.execute(sql)
    except (AttributeError, MySQLdb.OperationalError):
      self.connect()
      cursor = self.conn.cursor()
      cursor.execute(sql)
    return cursor

db = DB()
sql = "SELECT * FROM foo"
cur = db.query(sql)
# wait a long time for the Mysql connection to timeout
cur = db.query(sql)
# still works
</snippet></ROW><ROW><id>19440443</id><snippet>str.split()</snippet></ROW><ROW><id>19440443</id><snippet>file.readlines()</snippet></ROW><ROW><id>19440443</id><snippet>file.read()</snippet></ROW><ROW><id>19440443</id><snippet>with open(filename, "rt") as f:
    for line in f:
        x = line.split(',')[3]
        # do something with x
</snippet></ROW><ROW><id>19440443</id><snippet>yield</snippet></ROW><ROW><id>19440443</id><snippet>def get_col3(f):
    for line in f:
        yield line.split(',')[3]

with open(filename, "rt") as f:
    for x in get_col3(f):
        # do something with x
</snippet></ROW><ROW><id>19440443</id><snippet>read_csv()</snippet></ROW><ROW><id>19440443</id><snippet>usecols</snippet></ROW><ROW><id>19440443</id><snippet>line.split(',')</snippet></ROW><ROW><id>19440468</id><snippet>badGuy = Enemy()</snippet></ROW><ROW><id>19440468</id><snippet>class Enemy()</snippet></ROW><ROW><id>19440468</id><snippet>self</snippet></ROW><ROW><id>19440468</id><snippet>class Enemy():
    def __init__(self): # self is needed for all methods defined in Enemy
        # set some values that each unique enemy has, like health.
        self.health = 100
        self.damage = 10
    def attack(self, target):
        target.health -= self.damage # when inside the class, use self
</snippet></ROW><ROW><id>19440468</id><snippet>bandit = Enemy()
robber = Enemy()
bandit.attack(robber)
print bandit.health, robber.health # outside the class use the variable name
# bandit is the object's name, enemy is the object's type.
</snippet></ROW><ROW><id>19440577</id><snippet>for char in usr_list[:]:  # this is the only part that changed; add [:] to make a copy
    if char in punctuation:
        usr_list.remove(char)
</snippet></ROW><ROW><id>19440577</id><snippet>usr_list = [char for char in usr_list if char not in punctuation]
</snippet></ROW><ROW><id>19440577</id><snippet>filter()</snippet></ROW><ROW><id>19440577</id><snippet>input_list</snippet></ROW><ROW><id>19440577</id><snippet>no_punc = []
for char in usr_list:
    if char not in punctuation:
        no_punc.append(char)
</snippet></ROW><ROW><id>19440577</id><snippet>usr_str</snippet></ROW><ROW><id>19440609</id><snippet>import SocketServer
from BaseHTTPServer import BaseHTTPRequestHandler

def some_function():
    print "some_function got called"

class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/captureImage':
            # Insert your code here
            some_function()

        self.send_response(200)

httpd = SocketServer.TCPServer(("", 8080), MyHandler)
httpd.serve_forever()
</snippet></ROW><ROW><id>19440760</id><snippet>def custom_to_dict(self):
    return {
      'propertyId': self.propertyID,
      'propertyParentKey': self.propertyParentKey.urlsafe(),
      'propertyItems': [key.urlsafe() for key in self.propertyItems]
    }
</snippet></ROW><ROW><id>19440958</id><snippet>isinstance(raw_input("number: ")), int)</snippet></ROW><ROW><id>19440958</id><snippet>False</snippet></ROW><ROW><id>19440958</id><snippet>raw_input</snippet></ROW><ROW><id>19440958</id><snippet>try: int(...) ... except ValueError</snippet></ROW><ROW><id>19440958</id><snippet>number = raw_input("number: ")
try:
    int(number)
except ValueError:
    print False
else:
    print True
</snippet></ROW><ROW><id>19440958</id><snippet>str.isdigit</snippet></ROW><ROW><id>19440958</id><snippet>print raw_input("number: ").isdigit()
</snippet></ROW><ROW><id>19440958</id><snippet>False</snippet></ROW><ROW><id>19440958</id><snippet>-4</snippet></ROW><ROW><id>19441116</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>19441116</id><snippet>infixNotation</snippet></ROW><ROW><id>19441157</id><snippet>&gt;&gt;&gt; d = {
...     1: '1 2',
...     2: '2 3',
...     3: '2 3',
...     4: '4 3 1',
...     5: '3 4',
...     6: '5 4 2 1',
...     7: '4 4',
...     8: '8 3 5 2',
...     9: '5 7',
...     10: '15 11 8 9 6 3 4',
...     11: '6 2',
...     12: '9 5',
...     13: '7 3',
... }
&gt;&gt;&gt; d2 = {key: list(map(int, value.split())) for key, value in d.items()} # `list` can be omitted in Python 2.7
&gt;&gt;&gt; d2
{1: [1, 2], 2: [2, 3], 3: [2, 3], 4: [4, 3, 1], 5: [3, 4], 6: [5, 4, 2, 1], 7: [4, 4], 8: [8, 3, 5, 2], 9: [5, 7], 10: [15, 11, 8, 9, 6, 3, 4], 11: [6, 2], 12: [9, 5], 13: [7, 3]}
</snippet></ROW><ROW><id>19441157</id><snippet>&gt;&gt;&gt; {key: ' '.join(map(str, value)) for key, value in d2.items()}
{1: '1 2', 2: '2 3', 3: '2 3', 4: '4 3 1', 5: '3 4', 6: '5 4 2 1', 7: '4 4', 8: '8 3 5 2', 9: '5 7', 10: '15 11 8 9 6 3 4', 11: '6 2', 12: '9 5', 13: '7 3'}
</snippet></ROW><ROW><id>19441195</id><snippet>import os

def read_log(findme):
  f = open('/var/tmp/a.ini', "r")
  for line in f:
    if "=" in line:
      key,val = line.split("=",1)
      if findme in key:
        return val.replace("\\n", "").rstrip()

def replace_preset(findme):
  a = os.popen("grep %s /var/tmp/a.ini" % findme).read()
  a=  a.replace("%s=" % findme, "").replace("\\n", "").rstrip()
  os.system('sed -i s/"^preset0=.*"/"preset0=' + a + '"/ /var/tmp/a.ini')

def replace_preset_byfield(input, reflace, reflaceby):
  try:
    input = input.replace("\\n", "").rstrip()
    input = input.split(",")
    input[reflace] = reflaceby.replace("\\n", "").rstrip()
    print input
    a  = "%s,%s,%s,%s" % (input[0],input[1],input[2],input[3])
    os.system('sed -i s/"^preset0=.*"/"preset0=' + a + '"/ /var/tmp/a.ini')
  except Exception, err:
    print err
    pass

# 1) Read
print read_log("preset5")

# 2) Copy preset5 and paste to preset0
replace_preset("preset5")
print read_log("preset0")

# 3) Edit preset0 values
# replace_preset_byfield(read_log("preset0"), 0, 55 )
replace_preset_byfield(read_log("preset0"), 0, "55" )
print read_log("preset0")
</snippet></ROW><ROW><id>19441364</id><snippet>(x,y)</snippet></ROW><ROW><id>19441364</id><snippet>from scipy import optimize
f=lambda x, y: (x**3+y**3+y**2+2*x*y*y-0)**2
y_range=linspace(-1, 1, 100)
x_range=[optimize.fmin(f,0,args=(y,), disp=0) for y in y_range]
xr=linspace(-1,1)
yr=linspace(-1,1)
X, Y=meshgrid(xr, yr)
Z=f(X, Y)
plt.plot(x_range, y_range, 'k')
plt.contourf(xr, yr, Z, levels=linspace(0,0.001,51), alpha=0.5)
plt.colorbar()
</snippet></ROW><ROW><id>19441364</id><snippet>optimize.fmin()</snippet></ROW><ROW><id>19441364</id><snippet>x</snippet></ROW><ROW><id>19441364</id><snippet>y</snippet></ROW><ROW><id>19441364</id><snippet>x+0.4496y=0</snippet></ROW><ROW><id>19441518</id><snippet>input</snippet></ROW><ROW><id>19441518</id><snippet>input</snippet></ROW><ROW><id>19441518</id><snippet>&gt;&gt;&gt; eval(input('bricks are heavy'))
bricks are heavy2, 30
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: eval() arg 1 must be a string or code object
</snippet></ROW><ROW><id>19441817</id><snippet>print_hi()</snippet></ROW><ROW><id>19441817</id><snippet>from gi.repository import Gtk, GObject

class Window(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        self.button = Gtk.Button("Hi Printer")
        self.button.connect("pressed", self.on_button_clicked)
        self.button.connect("released", self.on_button_released)
        self.add(self.button)
        self.connect("delete-event", Gtk.main_quit)

    def on_button_clicked(self, widget):
        # kick off time out
        timeout = 50
        self._timeout_id = GObject.timeout_add(timeout, self.print_hi)

    def on_button_released(self, widget):
        # remove timeout
        GObject.source_remove(self._timeout_id)
        self._timeout_id = 0 # better safe than sorry

    def print_hi(self):
        print 'hi'
        # repeat until the source is removed
        return True

window = Window()
window.show_all()
Gtk.main()
</snippet></ROW><ROW><id>19441825</id><snippet>.pop(0)</snippet></ROW><ROW><id>19441825</id><snippet>the_list[1:]</snippet></ROW><ROW><id>19441825</id><snippet>collections.deque</snippet></ROW><ROW><id>19441825</id><snippet>...
length of pmarbs = 8306108
Traceback (most recent call last):
  File "xxx.py", line 22, in &lt;module&gt;
    pmarbs.append(pot2)
MemoryError
</snippet></ROW><ROW><id>19441968</id><snippet>from bson.objectid import ObjectId

def get_question_with_id(id,question):
         question = db.questions.find_one({'_id':ObjectId(id)})
         return question,id
</snippet></ROW><ROW><id>19442297</id><snippet>if (len(rows)==0):
    break    
elif(check==0):
    if(rows[0]==ws_name and rows[1]==ws_value):
        check+=1
else:
    outputData.update({rows[0]:rows[1]})
</snippet></ROW><ROW><id>19442513</id><snippet>scrapy shell</snippet></ROW><ROW><id>19442513</id><snippet>scrapy shell http://www.paddypower.com/football/football-matches/premier-league
</snippet></ROW><ROW><id>19442513</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>19442513</id><snippet>document.bodyOnLoad.push(function() {
    lb_fb_cpn_init(
        "",
        "html",
        "MR_224",
        {category: 'SOCCER',
</snippet></ROW><ROW><id>19442513</id><snippet>In [1]: hxs.select('//script[contains(., "lb_fb_cpn_init")]')
Out[1]: [&lt;HtmlXPathSelector xpath='//script[contains(., "lb_fb_cpn_init")]' data=u'&lt;script type="text/javascript"&gt;\n/* $Id: '&gt;]
</snippet></ROW><ROW><id>19442513</id><snippet>lb_fb_cpn_init</snippet></ROW><ROW><id>19442513</id><snippet>[{names: {en: 'Newcastle v Liverpool'}, ...
</snippet></ROW><ROW><id>19442513</id><snippet>In [2]: hxs.select('//script[contains(., "lb_fb_cpn_init")]').re('\[{names:')
Out[2]: [u'[{names:', u'[{names:', u'[{names:']
</snippet></ROW><ROW><id>19442513</id><snippet>In [3]: js_args = hxs.select('//script[contains(., "lb_fb_cpn_init")]').re(r'(\[{names:(?:.+?)\]),')

In [4]: len(js_args)
Out[4]: 3
</snippet></ROW><ROW><id>19442513</id><snippet>json.loads</snippet></ROW><ROW><id>19442513</id><snippet>""</snippet></ROW><ROW><id>19442513</id><snippet>In [5]: args_raw = '[{}]'.format(', '.join(js_args))
</snippet></ROW><ROW><id>19442513</id><snippet>""</snippet></ROW><ROW><id>19442513</id><snippet>In [6]: import re

In [7]: args_json = re.sub(r'(,\s?|{)(\w+):', r'\1"\2":', args_raw).replace("'", '"')
</snippet></ROW><ROW><id>19442513</id><snippet>re.sub</snippet></ROW><ROW><id>19442513</id><snippet>.replace</snippet></ROW><ROW><id>19442513</id><snippet>In [8]: import json

In [9]: data = json.loads(args_json)

In [10]: len(data)
Out[10]: 3
</snippet></ROW><ROW><id>19442513</id><snippet>data</snippet></ROW><ROW><id>19442513</id><snippet>In [11]: map(len, data)
Out[11]: [20, 20, 60]
</snippet></ROW><ROW><id>19442513</id><snippet>dict</snippet></ROW><ROW><id>19442513</id><snippet>ev_id</snippet></ROW><ROW><id>19442513</id><snippet>data[0]</snippet></ROW><ROW><id>19442513</id><snippet>data[1]</snippet></ROW><ROW><id>19442513</id><snippet>data[2]</snippet></ROW><ROW><id>19442513</id><snippet>In [12]: map(lambda v: v['ev_id'], data[2])
Out [12]:
[5889932,
 5889932,
 5889932,
 5889933,
 5889933,
 5889933,
 ...
</snippet></ROW><ROW><id>19442513</id><snippet>In [13]: odds = iter(data[2])

In [14]: odds_merged = zip(odds, odds, odds)

In [15]: data_merged = zip(data[0], data[1], odds_merged)

In [16]: len(data_merged)
Out[16]: 20
</snippet></ROW><ROW><id>19442513</id><snippet>In [17]: get_odd = lambda obj: (obj['names']['en'], '/'.join([obj['lp_num'], obj['lp_den']]))

In [18]: event_odds = []

In [19]: for event, _, odds in data_merged:
   ....:     event_odds.append({'name': event['names']['en'], 'odds': dict(map(get_odd, odds)), 'url': event['url']})
   ....:     

In [20]: event_odds
Out[20]: 
[{'name': u'Newcastle v Liverpool',
  'odds': {u'Draw': u'14/5', u'Liverpool': u'17/20', u'Newcastle': u'3/1'},
  'url': u'http://www.paddypower.com/football/football-matches/premier-league-matches/Newcastle%2dv%2dLiverpool-5889932.html'},
 {'name': u'Arsenal v Norwich',
  'odds': {u'Arsenal': u'3/10', u'Draw': u'9/2', u'Norwich': u'9/1'},
  'url': u'http://www.paddypower.com/football/football-matches/premier-league-matches/Arsenal%2dv%2dNorwich-5889933.html'},
 {'name': u'Chelsea v Cardiff',
  'odds': {u'Cardiff': u'10/1', u'Chelsea': u'1/4', u'Draw': u'5/1'},
  'url': u'http://www.paddypower.com/football/football-matches/premier-league-matches/Chelsea%2dv%2dCardiff-5889934.html'},
 {'name': u'Everton v Hull',
  'odds': {u'Draw': u'10/3', u'Everton': u'4/9', u'Hull': u'13/2'},
  'url': u'http://www.paddypower.com/football/football-matches/premier-league-matches/Everton%2dv%2dHull-5889935.html'},
 {'name': u'Man Utd v Southampton',
  'odds': {u'Draw': u'3/1', u'Man Utd': u'8/15', u'Southampton': u'11/2'},
  'url': u'http://www.paddypower.com/football/football-matches/premier-league-matches/Man%2dUtd%2dv%2dSouthampton-5889939.html'},
 ...
</snippet></ROW><ROW><id>19442513</id><snippet>log.start</snippet></ROW><ROW><id>19442513</id><snippet>LOG_FILE</snippet></ROW><ROW><id>19442513</id><snippet>--set LOG_FILE=mylog.txt</snippet></ROW><ROW><id>19442513</id><snippet>.extract()</snippet></ROW><ROW><id>19442532</id><snippet>self</snippet></ROW><ROW><id>19442532</id><snippet>self</snippet></ROW><ROW><id>19442585</id><snippet>w = whois.query('yahoo.com')
</snippet></ROW><ROW><id>19442585</id><snippet>help(whois)</snippet></ROW><ROW><id>19442585</id><snippet>import whois</snippet></ROW><ROW><id>19442629</id><snippet>,</snippet></ROW><ROW><id>19442629</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; x
1
&gt;&gt;&gt; x = (1)
&gt;&gt;&gt; x
1
</snippet></ROW><ROW><id>19442629</id><snippet>tuples</snippet></ROW><ROW><id>19442629</id><snippet>&gt;&gt;&gt; x = 1,       #or (1,)
&gt;&gt;&gt; x
(1,)
&gt;&gt;&gt; x = 1, 2, 3  #or (1, 2, 3)
&gt;&gt;&gt; x
(1, 2, 3)
</snippet></ROW><ROW><id>19442848</id><snippet>construct_mapping</snippet></ROW><ROW><id>19442848</id><snippet>node</snippet></ROW><ROW><id>19442848</id><snippet>deep</snippet></ROW><ROW><id>19442848</id><snippet>def construct_mapping(self, node, deep=False):
    #...
</snippet></ROW><ROW><id>19442848</id><snippet>def foo_constructor(loader, node):
    values = loader.construct_mapping(node, deep=True)
    #...
</snippet></ROW><ROW><id>19442853</id><snippet>from datetime import datetime, timedelta

# Can easily get the values for today programmatically
# but ommitted here for brevity
midnight = datetime(2013, 10, 18)
delta = timedelta(seconds=28800)

offset_time = midnight + delta
print offset_time.strftime('%H:%M:%S')

&gt;&gt;&gt; 08:00:00
</snippet></ROW><ROW><id>19442876</id><snippet>list_acciones=Accion.objects.filter(proyectos__id__in=ids_Proyecto)
</snippet></ROW><ROW><id>19443500</id><snippet>'\u4e00'</snippet></ROW><ROW><id>19443500</id><snippet>u'\u9fff'</snippet></ROW><ROW><id>19443500</id><snippet>def check_contain_chinese(check_str):
    for ch in check_str.decode('utf-8'):
        if u'\u4e00' &lt;= ch &lt;= u'\u9fff':
            return True
    return False
</snippet></ROW><ROW><id>19443530</id><snippet>tail</snippet></ROW><ROW><id>19443530</id><snippet>element</snippet></ROW><ROW><id>19443530</id><snippet>tail</snippet></ROW><ROW><id>19443530</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>19443530</id><snippet>Ships from and sold by Amazon.com</snippet></ROW><ROW><id>19443530</id><snippet>Gift-wrap available.</snippet></ROW><ROW><id>19443530</id><snippet>from lxml import etree
import re

tree = etree.parse('htmlfile')
root = tree.getroot()

for elem in root.iter('*'):
    if elem.tail is not None and elem.tail.strip() and re.search('\$\d+', elem.tail):
        e = etree.Element('div')
        e.text = elem.tail
        elem.tail = ''
        elem.addnext(e)

print(etree.tostring(root))
</snippet></ROW><ROW><id>19443530</id><snippet>&lt;html&gt;&lt;body&gt;
&lt;b&gt;List Price:&lt;/b&gt;
&lt;strike&gt;$150.00&lt;/strike&gt;&lt;br/&gt;
&lt;b&gt;Price&lt;/b&gt;&lt;div&gt;
$117.80&lt;/div&gt;&lt;br/&gt;
&lt;b&gt;You Save:&lt;/b&gt;&lt;div&gt;
$32.20(21%)&lt;/div&gt;&lt;br/&gt;
&lt;font size="-1" color="#009900"&gt;In Stock&lt;/font&gt;
&lt;br/&gt;
&lt;a href="/gp/aw/help/id=sss/ref=aw_d_sss_shoes"&gt;Free Shipping&lt;/a&gt;
&lt;br/&gt;
Ships from and sold by Amazon.com&lt;br/&gt;
Gift-wrap available.&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>19443624</id><snippet>Foo.bar</snippet></ROW><ROW><id>19443624</id><snippet>Foo.__dict__['bar']</snippet></ROW><ROW><id>19443624</id><snippet>__get__</snippet></ROW><ROW><id>19443624</id><snippet>__get__</snippet></ROW><ROW><id>19443624</id><snippet>partial(function, self)</snippet></ROW><ROW><id>19443624</id><snippet>&gt;&gt;&gt; def is_dead(wr): print "blech"
... 
&gt;&gt;&gt; class Foo(object):
...     def bar(self): pass
... 
&gt;&gt;&gt; method = Foo.bar
&gt;&gt;&gt; wr = weakref.ref(method, is_dead)
&gt;&gt;&gt; 1 + 1
2
&gt;&gt;&gt; method = None
blech
</snippet></ROW><ROW><id>19443719</id><snippet>html</snippet></ROW><ROW><id>19443719</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html)
print soup.select('.user-info a')[0]['href']
# /kjrphotography
</snippet></ROW><ROW><id>19443719</id><snippet>for info in soup.find_all('div', class_='user-info'):
    print 'href:', info.find('a', href=True)['href']
    print 'user:', info.find('span', class_='usertag').text

#href: /kjrphotography
#user: @kjrphotography
</snippet></ROW><ROW><id>19443722</id><snippet>url</snippet></ROW><ROW><id>19443722</id><snippet>PreparedRequest</snippet></ROW><ROW><id>19443893</id><snippet>class CacheService(object):

    def __init__(self):
        self.data = {}

    def __setitem__(self, key, item):
        self.data[key] = [item, 0]

    def __getitem__(self, key):
        value = self.data[key]
        value[1] += 1
        return value[0]

    def getcount(self, key):
        return self.data[key][1]
</snippet></ROW><ROW><id>19443893</id><snippet>&gt;&gt;&gt; cs = CacheService()
&gt;&gt;&gt; cs[1] = 'one'
&gt;&gt;&gt; cs[2] = 'two'
&gt;&gt;&gt; print cs.getcount(1)
0
&gt;&gt;&gt; cs[1]
'one'
&gt;&gt;&gt; print cs.getcount(1)
1
</snippet></ROW><ROW><id>19443929</id><snippet>ppl.fname</snippet></ROW><ROW><id>19443929</id><snippet>all_fnames = [person.fname for person in ppl]
</snippet></ROW><ROW><id>19443929</id><snippet>ppl.age</snippet></ROW><ROW><id>19443929</id><snippet>all_greater_than_thirty = [person for person in ppl if person.age &gt; 30]
</snippet></ROW><ROW><id>19443929</id><snippet>with open("abc", "w") as fp:
    for person in [p for p in ppl if p.age &gt; 30]:
        fp.write(...) # Fill it in with whatever you want to write
</snippet></ROW><ROW><id>19443929</id><snippet>People.to_string()</snippet></ROW><ROW><id>19443929</id><snippet>with open("abc", "w") as fp:
    fp.writelines("%s\n" % person.to_string() for person in ppl if person.age &gt; 30)
</snippet></ROW><ROW><id>19444070</id><snippet>pywinauto.Application</snippet></ROW><ROW><id>19444070</id><snippet>Application</snippet></ROW><ROW><id>19444070</id><snippet>Application</snippet></ROW><ROW><id>19444070</id><snippet>pywinauto.Application</snippet></ROW><ROW><id>19444163</id><snippet>def largest_prime_factor(n,factor=2):
    if n % factor == 0:
        if n == factor:
            return factor
        else:
            return largest_prime_factor(n/factor,factor)
    else:
        return largest_prime_factor(n,factor+1)
</snippet></ROW><ROW><id>19444783</id><snippet>fill_between</snippet></ROW><ROW><id>19444783</id><snippet>matplotlib.patch</snippet></ROW><ROW><id>19444783</id><snippet>Path</snippet></ROW><ROW><id>19444783</id><snippet>Path</snippet></ROW><ROW><id>19444783</id><snippet>Path</snippet></ROW><ROW><id>19444783</id><snippet>import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches

verts = [(0., 0.), # left, bottom
         (-1., 1.), # left, top
         (1., 3.), # right, top
         (2., 2.), # right, bottom
         (0., 0.),] # ignored

codes = [Path.MOVETO,
         Path.LINETO,
         Path.LINETO,
         Path.LINETO,
         Path.CLOSEPOLY,]

path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='orange', lw=2)
ax.add_patch(patch) 
ax.axis('equal')
plt.show()
</snippet></ROW><ROW><id>19445109</id><snippet>@app.route('/loginpage', methods = ['GET' , 'POST' ] )
def loginpage():
    if request.method == 'POST' and request.form['username']:
        user = User.select().where(User.username == request.form['username']).get()
        if user.check_password(request.form['password']):
            return redirect(url_for('homepage'))
        else:
            return 'invalid password'   

    else:
        return render_template('login.html')
</snippet></ROW><ROW><id>19445461</id><snippet>&lt;xml&gt;</snippet></ROW><ROW><id>19445461</id><snippet>&lt;/xml&gt;</snippet></ROW><ROW><id>19445461</id><snippet>&lt;FType&gt;</snippet></ROW><ROW><id>19445461</id><snippet>&lt;FType&gt;</snippet></ROW><ROW><id>19445461</id><snippet>&lt;/FType&gt;</snippet></ROW><ROW><id>19445461</id><snippet>&gt;&gt;&gt; re.match(r'(?P&lt;xml&gt;.*?)(?:&lt;FType&gt;.*&lt;/FType&gt;)(.*)', s, re.DOTALL).groups()
('&lt;xml&gt;\n&lt;EType&gt;\n&lt;E&gt;&lt;/E&gt;\n&lt;F&gt;&lt;/F&gt;\n', '\n&lt;G&gt;&lt;/G&gt;\n&lt;/EType&gt;\n&lt;/xml&gt;\n')
</snippet></ROW><ROW><id>19445461</id><snippet>''.join</snippet></ROW><ROW><id>19445461</id><snippet>sub</snippet></ROW><ROW><id>19445461</id><snippet>r'\1\2'</snippet></ROW><ROW><id>19445470</id><snippet>farms[0]</snippet></ROW><ROW><id>19445470</id><snippet>farms[0]</snippet></ROW><ROW><id>19445470</id><snippet>farms = list(farm_model.objects.all())
farms[0].map_top = 80
</snippet></ROW><ROW><id>19445614</id><snippet>'django.contrib.humanize',
'south',
'django_notify',
'mptt',
'sekizai',
'sorl.thumbnail',
'wiki',
'wiki.plugins.attachments',
'wiki.plugins.notifications',
'wiki.plugins.images',
'wiki.plugins.macros',
</snippet></ROW><ROW><id>19445614</id><snippet># pip uninstall wiki
# pip install wiki
</snippet></ROW><ROW><id>19445654</id><snippet>/users</snippet></ROW><ROW><id>19445654</id><snippet>User</snippet></ROW><ROW><id>19445654</id><snippet>UserContainer</snippet></ROW><ROW><id>19445654</id><snippet>class Container:
    def __getitem__(self, item):
        try:
            id = int(item)
            return DBSession.query(self.cls).filter_by(id=id).one()
        except (NoResultFound, ValueError):
            raise KeyError(item)
</snippet></ROW><ROW><id>19445654</id><snippet>UserContainer</snippet></ROW><ROW><id>19445654</id><snippet>class UserContainer(Container):
    cls = User
</snippet></ROW><ROW><id>19445831</id><snippet>()</snippet></ROW><ROW><id>19445831</id><snippet>match.group(index)</snippet></ROW><ROW><id>19445893</id><snippet>line = None
for line in sys.stdin:
  # ...
if line is not None:
  # `line' contains the last line; extract the time etc
</snippet></ROW><ROW><id>19445917</id><snippet>!=</snippet></ROW><ROW><id>19445917</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>19445917</id><snippet>!=</snippet></ROW><ROW><id>19445917</id><snippet>!=</snippet></ROW><ROW><id>19445917</id><snippet>!=</snippet></ROW><ROW><id>19445917</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>19445917</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>19445917</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>19445943</id><snippet>true</snippet></ROW><ROW><id>19445943</id><snippet>\f</snippet></ROW><ROW><id>19445943</id><snippet>\n</snippet></ROW><ROW><id>19445943</id><snippet>\r</snippet></ROW><ROW><id>19445943</id><snippet>\t</snippet></ROW><ROW><id>19445943</id><snippet>\v</snippet></ROW><ROW><id>19446235</id><snippet>n = float(n)</snippet></ROW><ROW><id>19446354</id><snippet>included_clients = clientData.objects.values_list('client', flat=True)

excluded_clients = Client.objects.exclude(id__in=included_clients)
</snippet></ROW><ROW><id>19446368</id><snippet>plt.hist</snippet></ROW><ROW><id>19446368</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# generate some uniformly distributed data
x = np.random.rand(1000)

# create the histogram
(n, bins, patches) = plt.hist(x, bins=10, label='hst')

plt.show()

# inspect the counts in each bin
In [4]: print n
[102  87 102  83 106 100 104 110 102 104]

# and we see that the bins are approximately uniformly filled.
# create a second histogram with more bins (but same input data)
(n2, bins2, patches) = plt.hist(x, bins=20, label='hst')

In [34]: print n2
[54 48 39 48 51 51 37 46 49 57 50 50 52 52 59 51 58 44 58 46]

# bins are uniformly filled but obviously with fewer in each bin.
</snippet></ROW><ROW><id>19446368</id><snippet>bins</snippet></ROW><ROW><id>19446616</id><snippet>Sha1.initHmac</snippet></ROW><ROW><id>19446616</id><snippet>Sha1.initHmac_P</snippet></ROW><ROW><id>19446703</id><snippet>class MySpider(BaseSpider):

    name = 'myspider'

    def __init__(self, var, **kw):
        super(MySpider, self).__init__()
        self.var = var
</snippet></ROW><ROW><id>19446703</id><snippet>class SpiderDetails(object):

    def __init__(self):
        pass

    @classmethod
    def from_crawler(cls, crawler):
        o = cls()
        crawler.signals.connect(o.spider_opened, signal=signals.spider_opened)
        return o

    def spider_opened(self, spider):
        # access your variable here
        print spider.var
</snippet></ROW><ROW><id>19446703</id><snippet>$ scrapy crawl myspider -a var=value
</snippet></ROW><ROW><id>19446742</id><snippet>import functools
import os

class cd:
    def __init__(self, path):
        self.path = path
    def __enter__(self):
        self.old = os.getcwd()
        os.chdir(self.path)
        return self
    def __exit__(self, exc_type, exc_value, tb):
        os.chdir(self.old)
    def __call__(self, func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            with self:
                return func(*args, **kwargs)
        return wrapper
</snippet></ROW><ROW><id>19446828</id><snippet>elements  # list of values
n  # unwanted element index
</snippet></ROW><ROW><id>19446828</id><snippet>result = elements[:n] + elements[n+1:]
</snippet></ROW><ROW><id>19446828</id><snippet>result = elements[:]  # copy
del result[n]
</snippet></ROW><ROW><id>19447115</id><snippet>STATUS_CHOICES</snippet></ROW><ROW><id>19447115</id><snippet>(1, 'Registered')</snippet></ROW><ROW><id>19447115</id><snippet>STATUS_CHOICES = {
    1: 'Registered',
    2: 'Verified',
    ...
}
</snippet></ROW><ROW><id>19447115</id><snippet>STATUS_CHOICES[status]</snippet></ROW><ROW><id>19447115</id><snippet>status</snippet></ROW><ROW><id>19447300</id><snippet>editor</snippet></ROW><ROW><id>19447300</id><snippet>editor.get</snippet></ROW><ROW><id>19447300</id><snippet>editor</snippet></ROW><ROW><id>19447300</id><snippet>text=''
def stash(*args):
    global text
    text = str(editor.get(0.0,END))
editor.bind_all('&lt;&lt;Modified&gt;&gt;', stash)
</snippet></ROW><ROW><id>19447469</id><snippet>a = os.stat(os.path.join(directory,i))
os.path.getsize(a)
</snippet></ROW><ROW><id>19447469</id><snippet>os.path.getsize</snippet></ROW><ROW><id>19447469</id><snippet>os.stat</snippet></ROW><ROW><id>19447469</id><snippet>a.st_size</snippet></ROW><ROW><id>19447469</id><snippet>os.path.getsize</snippet></ROW><ROW><id>19447502</id><snippet>class Filter(object):
    def __init__(self, id=None):
        self.id = id

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            id = kwargs.get("id", self.id)
            entity_ids = func(*args)
            result = {}
            for k, v in entity_ids.items():
                if id:
                    if '_' + str(id) in k:
                        result.update({k: v})
            return result
        return wrapper
</snippet></ROW><ROW><id>19447502</id><snippet>        def wrapper(*args, **kwargs):
            id = kwargs.get("id", self.id)
            if not id:
               # no need to go further
               return {}

            id = "_%s" % id
            entity_ids = func(*args)
            result = dict(
                (k, v) for k, v in entity_ids.items()
                if id in k
                )
            return result
</snippet></ROW><ROW><id>19448088</id><snippet>from_statement</snippet></ROW><ROW><id>19448088</id><snippet>session.query().from_statement('select * from procedure(:p1,:p2)') \ 
               .params(p1 = 1, p2 = 1).all()
</snippet></ROW><ROW><id>19448255</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>19448255</id><snippet>proc = subprocess.Popen(["ls", "-l"], stdout=PIPE, stderr=PIPE)

# Here you can get the PID
global child_pid
child_pid = proc.pid

# Now we can wait for the child to complete
(output, error) = proc.communicate()

if error:
    print "error:", error

print "output:", output
</snippet></ROW><ROW><id>19448255</id><snippet>import os
import signal
def kill_child():
    if child_pid is None:
        pass
    else:
        os.kill(child_pid, signal.SIGTERM)

import atexit
atexit.register(kill_child)
</snippet></ROW><ROW><id>19448295</id><snippet>pip install -e path/to/yourproject
</snippet></ROW><ROW><id>19448435</id><snippet>picks[] := K numbers chosen at random from the population
While sum(picks) is not in the allowable range
  if sum(picks) &lt; MinRange
    select an element p from picks at random
    let subpop := elements in population which are larger than p
    replace p with a random element from subpop
  if sum(picks) &gt; MaxRange
    select an element p from picks at random
    let subpop := elements in population which are smaller than p
    replace p with a random element from subpop
</snippet></ROW><ROW><id>19448435</id><snippet>p</snippet></ROW><ROW><id>19448435</id><snippet>picks</snippet></ROW><ROW><id>19448656</id><snippet>while</snippet></ROW><ROW><id>19448656</id><snippet>row = res.fetchone()
while row is not None:
    row = res.fetchone()
    print row is None
    processRow(row)
</snippet></ROW><ROW><id>19448656</id><snippet>res.fetchone()</snippet></ROW><ROW><id>19448656</id><snippet>None</snippet></ROW><ROW><id>19448656</id><snippet>row</snippet></ROW><ROW><id>19448656</id><snippet>None</snippet></ROW><ROW><id>19448656</id><snippet>processRow</snippet></ROW><ROW><id>19448656</id><snippet>while</snippet></ROW><ROW><id>19448656</id><snippet>processRow(None)</snippet></ROW><ROW><id>19448656</id><snippet>row is not None</snippet></ROW><ROW><id>19448656</id><snippet>None</snippet></ROW><ROW><id>19448656</id><snippet>while True:
    row = res.fetchone()
    if row is None:
        break
    processRow(row)
</snippet></ROW><ROW><id>19448656</id><snippet>for row in res.fetchall():
    processRow(row)
</snippet></ROW><ROW><id>19448794</id><snippet>_(...)</snippet></ROW><ROW><id>19448794</id><snippet>%</snippet></ROW><ROW><id>19448794</id><snippet>&gt;&gt;&gt; '►% (user)s, random text here @[%(friend_id)s] more random text ◄◄◄'.decode('utf-8') % {'user':u'foo', 'friend_id': u'bar'}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: unsupported format character '(' (0x28) at index 3
</snippet></ROW><ROW><id>19448930</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>19448930</id><snippet>for</snippet></ROW><ROW><id>19448930</id><snippet>    for cannonx, cannony in ((100, 500), (500, 500)):
        ...
        pygame.display.update()
</snippet></ROW><ROW><id>19448930</id><snippet>DISPLAYSURF.fill(BACKGROUNDCOLOR)</snippet></ROW><ROW><id>19448930</id><snippet>while</snippet></ROW><ROW><id>19448930</id><snippet>while True:
    for event in pygame.event.get():
        ...

    mousex, mousey = pygame.mouse.get_pos()

    DISPLAYSURF.fill(BACKGROUNDCOLOR)

    for cannonx, cannony in ((100, 500), (500, 500)):
        ...
</snippet></ROW><ROW><id>19448930</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>19449267</id><snippet>self</snippet></ROW><ROW><id>19449267</id><snippet>__init__</snippet></ROW><ROW><id>19449267</id><snippet>def __init__(self, name):
    self.name = name
    self.hp = 300
    ...
    self.weapon = None
</snippet></ROW><ROW><id>19449267</id><snippet>__init__</snippet></ROW><ROW><id>19449267</id><snippet>self</snippet></ROW><ROW><id>19449267</id><snippet>self.wgt</snippet></ROW><ROW><id>19449267</id><snippet>self.impact</snippet></ROW><ROW><id>19449267</id><snippet>self.broken_bones</snippet></ROW><ROW><id>19449627</id><snippet>import os
place = 'C:\\Users\\Me\\Documents\\Python Programs\\'
for root, dirs, files in os.walk(place):
    for f in files:
        file_path = os.path.join(root, f) #Full path to the file
        size = os.path.getsize(file_path) #pass the full path to getsize()
        if size == 0:
            print f, file_path
</snippet></ROW><ROW><id>19449655</id><snippet>for lines in fp:
    temp = lines.split(",")[:-1]
    print temp
</snippet></ROW><ROW><id>19449813</id><snippet>re.findall</snippet></ROW><ROW><id>19449813</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = """text:u'MUC-EC-099_SC-Memory-01_TC-25'
text:u'MUC-EC-099_SC-Memory-01_TC-26'
text:u'MUC-EC-099_SC-Memory-01_TC-27'"""
&gt;&gt;&gt; re.findall(r"'(.*?)'", strs, re.DOTALL)
['MUC-EC-099_SC-Memory-01_TC-25',
 'MUC-EC-099_SC-Memory-01_TC-26',
 'MUC-EC-099_SC-Memory-01_TC-27'
]
</snippet></ROW><ROW><id>19450232</id><snippet>\</snippet></ROW><ROW><id>19450232</id><snippet>/</snippet></ROW><ROW><id>19450232</id><snippet>_winreg.DeleteKey</snippet></ROW><ROW><id>19450232</id><snippet>import _winreg
Key_Name = r'Software\Qube Cinema\QubeMaster Pro'
key = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER, Key_Name, 0, _winreg.KEY_ALL_ACCESS)
_winreg.DeleteKey(key, 'Test1')
</snippet></ROW><ROW><id>19450237</id><snippet>"ascii": 1</snippet></ROW><ROW><id>19450237</id><snippet>"ascii": 0</snippet></ROW><ROW><id>19450237</id><snippet>"ascii": 1</snippet></ROW><ROW><id>19450359</id><snippet>import xxx as yyy
</snippet></ROW><ROW><id>19450359</id><snippet>import MySQLdb as mysql
</snippet></ROW><ROW><id>19450501</id><snippet>def run_script(self, script_name):
    """ Run a script on the remote array and return the stdout
    """
    try:
        chan = self._ssh.get_transport().open_session()
        # five minute timeout on the channel communication
        chan.settimeout(5*60.0)
        common_functions_file = os.path.join(SCRIPT_DIR, 'zfs_common_functions.js')
        common_functions = open(common_functions_file).read().splitlines()
        # add common_functions to the top of the script
        script_contents = common_functions + open(script_name).read().splitlines()
        chan.exec_command('script')
        if chan.send_ready():
            chan.sendall("\n".join(script_contents))
            chan.send("\n.\n")

        results = StringIO()
        error = StringIO()
        bufsize = 1024
        while not chan.exit_status_ready():
            if chan.recv_ready():
                data = chan.recv(bufsize)
                while data:
                    results.write(data)
                    data = chan.recv(bufsize)

            if chan.recv_stderr_ready():
                error_buf = chan.recv_stderr(bufsize)
                while error_buf:
                    error.write(error_buf)
                    error_buf = chan.recv_stderr(bufsize)

        exit_status = chan.recv_exit_status()
        if exit_status == 0:
            return results.getvalue()
        else:
            raise ZfsScriptError(results.getvalue())

    except socket.timeout:
        logger.warn("%s: Timeout running %s" %(self.hostname, script_name))
        return None

    except paramiko.SSHException as e:
        logger.warn(
            "Couldn't execute script on array %s: %s" % (self.hostname, e))
        raise

    except AttributeError as e:
        logger.exception(e)
        raise

    except Exception:
        raise

    finally:
        results.close()
        error.close()
        chan.close()
</snippet></ROW><ROW><id>19450535</id><snippet>B</snippet></ROW><ROW><id>19450535</id><snippet>n</snippet></ROW><ROW><id>19450535</id><snippet>B = [[None] * n for _ in range(n)]
</snippet></ROW><ROW><id>19450535</id><snippet>B = []
for _ in range(n):
    B.append([None] * n)
</snippet></ROW><ROW><id>19450535</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = [a, a]  # list of 2 items, both pointing to the same list instance
&gt;&gt;&gt; b[0].append(1)  # b[0] refers to the same list instance also referenced by a
&gt;&gt;&gt; print b
[[1], [1]]
</snippet></ROW><ROW><id>19450535</id><snippet>&gt;&gt;&gt; b = [[], []]  # list of 2 distinct sublists
&gt;&gt;&gt; b[0].append(1)
&gt;&gt;&gt; print b
[[1], []]
</snippet></ROW><ROW><id>19450535</id><snippet>B = [[None] * n] * n
</snippet></ROW><ROW><id>19450535</id><snippet>n</snippet></ROW><ROW><id>19450535</id><snippet>None</snippet></ROW><ROW><id>19450535</id><snippet>n</snippet></ROW><ROW><id>19450535</id><snippet>int</snippet></ROW><ROW><id>19450535</id><snippet>float</snippet></ROW><ROW><id>19450535</id><snippet>str</snippet></ROW><ROW><id>19450599</id><snippet>69</snippet></ROW><ROW><id>19450599</id><snippet>(int(x) ** 2)</snippet></ROW><ROW><id>19450599</id><snippet>*</snippet></ROW><ROW><id>19450889</id><snippet>^</snippet></ROW><ROW><id>19450889</id><snippet>&gt;&gt;&gt; 0b010 ^ 0b110
4
&gt;&gt;&gt; bin(0b010 ^ 0b110)
'0b100'
</snippet></ROW><ROW><id>19451456</id><snippet>scatter(x, y, s=20, ...)</snippet></ROW><ROW><id>19451456</id><snippet>s</snippet></ROW><ROW><id>19451456</id><snippet>from mpl_toolkits.mplot3d import Axes3D
Axes3D.scatter( ... )
</snippet></ROW><ROW><id>19451581</id><snippet>In [12]: s = """F Fluorin B 91
   ....: F Fluorin B 91
   ....: F Fluorin B 91
   ....: F Fluorin B 91  
   ....: I Iodin  C 22
   ....: I Iodin  C 22   
   ....: Cl chlorine D 21
   ....: Cl chlorine D 21
   ....: Cl chlorine D 21
   ....: Cl chlorine D 21
   ....: Cl chlorine D 21
   ....: Cl chlorine D 21"""
In [13]: a = [v.strip() for v in s.split('\n')]
In [14]: from itertools import groupby
In [15]: zip(*groupby(a))[0]
Out[15]: ('F Fluorin B 91', 'I Iodin  C 22', 'Cl chlorine D 21')
</snippet></ROW><ROW><id>19451619</id><snippet>import pickle
...
pickle_encoded = pickle.dumps(array)
...
</snippet></ROW><ROW><id>19451929</id><snippet>File "C:\users\alecc\workspace\hub\lib\site-packages\django\conf\__init__.py", line 134,
 in __init__
    raise ImportError("Could not import settings '%s' (Is it on sys.path?): %s" % (self.SE
TTINGS_MODULE, e))
ImportError: Could not import settings 'hub.settings' (Is it on sys.path?): No module name
d hub.settings
</snippet></ROW><ROW><id>19451929</id><snippet>hub</snippet></ROW><ROW><id>19451929</id><snippet>hub.settings</snippet></ROW><ROW><id>19451929</id><snippet>settings.py</snippet></ROW><ROW><id>19451929</id><snippet>C:\users\alecc\workspace\hub\lib\site-packages\django\conf\__init__.py</snippet></ROW><ROW><id>19451929</id><snippet>import sys; print(sys.path)</snippet></ROW><ROW><id>19451929</id><snippet>settings.py</snippet></ROW><ROW><id>19451929</id><snippet>__init__</snippet></ROW><ROW><id>19451929</id><snippet>manage</snippet></ROW><ROW><id>19451980</id><snippet>self.listOfRows[x - 1][y - 1] = value</snippet></ROW><ROW><id>19451980</id><snippet>newGrid.setValue(n[k][0], n[k][1], List[k])</snippet></ROW><ROW><id>19451980</id><snippet>List[k]</snippet></ROW><ROW><id>19451980</id><snippet>n[k][0]</snippet></ROW><ROW><id>19451980</id><snippet>n[k][1]</snippet></ROW><ROW><id>19451980</id><snippet>newGrid.listOfRows</snippet></ROW><ROW><id>19451980</id><snippet>n</snippet></ROW><ROW><id>19451980</id><snippet>for i in range(len(List)):
    x = List[i][0]
    y = List[i][1]
    n.append([x,y])
</snippet></ROW><ROW><id>19451980</id><snippet>List</snippet></ROW><ROW><id>19452173</id><snippet>src/pl/plpython/plpy_spi.c:PLy_spi_exception_set()</snippet></ROW><ROW><id>19452409</id><snippet>index.html</snippet></ROW><ROW><id>19452409</id><snippet>index.html</snippet></ROW><ROW><id>19452409</id><snippet>{{ video_id }}</snippet></ROW><ROW><id>19452409</id><snippet>&lt;script&gt;
var player;
function onYouTubeIframeAPIReady() {
    player = new YT.Player('iframe-player', {
        width: '640',
        height: '390',
        videoId: '{{ video_id }}',
        events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
        }
    });
}
&lt;/script&gt;
</snippet></ROW><ROW><id>19452478</id><snippet>fo = open("test.txt", "wb")</snippet></ROW><ROW><id>19452478</id><snippet>fo = open(file, "w")</snippet></ROW><ROW><id>19452478</id><snippet>"wb"</snippet></ROW><ROW><id>19452478</id><snippet>"w"</snippet></ROW><ROW><id>19452500</id><snippet>return</snippet></ROW><ROW><id>19452500</id><snippet>subroutine mySqrt(number, res, stat)
  implicit none
  real,intent(in)     :: number
  real,intent(out)    :: res
  integer,intent(out) :: stat

  if ( number &lt; 0.e0 ) then
    stat = -1 ! Some arbitrary number
    return    ! Exit
  endif

  res = sqrt(number)
  stat = 0
end subroutine
</snippet></ROW><ROW><id>19452500</id><snippet>module test
  integer,private :: lastSuccess
contains
  function mySqrt(number)
    implicit none
    real,intent(in)     :: number
    real                :: mySqrt

    if ( number &lt; 0.e0 ) then
      lastSuccess = -1 ! Some arbitrary number
      mySqrt = 0.      ! Set some values s.t. the function returns something
      return           ! Exit
    endif

    mySqrt = sqrt(number)
    lastSuccess = 0
  end function

  function checkRes()
    implicit none
    integer :: checkRes

    checkRes = lastSuccess
  end function
end module test
</snippet></ROW><ROW><id>19452500</id><snippet>stop</snippet></ROW><ROW><id>19452559</id><snippet>def _dedent(s):
    """Dedent python code string."""
    # RL convert to ascii
    s = s.encode('ascii','ignore')
    result = [t[:2] for t in generate_tokens(StringIO(s).readline)]
    # set initial indent to 0 if any
    if result[0][0] == INDENT:
        result[0] = (INDENT, '')
    return untokenize(result)
</snippet></ROW><ROW><id>19452664</id><snippet>~$ ~/sys/Python-2.5.6/python
Python 2.5.6 (r256:88840, Jul 12 2012, 12:21:58) 
[GCC 4.6.3] on linux3
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; with open("fred") as f:
&lt;stdin&gt;:1: Warning: 'with' will become a reserved keyword in Python 2.6
  File "&lt;stdin&gt;", line 1
    with open("fred") as f:
            ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>19452664</id><snippet>import sys</snippet></ROW><ROW><id>19452664</id><snippet>print sys.version</snippet></ROW><ROW><id>19453006</id><snippet>glOrtho()</snippet></ROW><ROW><id>19453006</id><snippet>glBegin()</snippet></ROW><ROW><id>19453006</id><snippet>glColor()</snippet></ROW><ROW><id>19453006</id><snippet>glVertex()</snippet></ROW><ROW><id>19453006</id><snippet>glEnd()</snippet></ROW><ROW><id>19453006</id><snippet>import pyglet
from pyglet.gl import *

# Zooming constants
ZOOM_IN_FACTOR = 1.2
ZOOM_OUT_FACTOR = 1/ZOOM_IN_FACTOR

class App(pyglet.window.Window):

    def __init__(self, width, height, *args, **kwargs):
        conf = Config(sample_buffers=1,
                      samples=4,
                      depth_size=16,
                      double_buffer=True)
        super().__init__(width, height, config=conf, *args, **kwargs)

        #Initialize camera values
        self.left   = 0
        self.right  = width
        self.bottom = 0
        self.top    = height
        self.zoom_level = 1
        self.zoomed_width  = width
        self.zoomed_height = height

    def init_gl(self, width, height):
        # Set clear color
        glClearColor(0/255, 0/255, 0/255, 0/255)

        # Set antialiasing
        glEnable( GL_LINE_SMOOTH )
        glEnable( GL_POLYGON_SMOOTH )
        glHint( GL_LINE_SMOOTH_HINT, GL_NICEST )

        # Set alpha blending
        glEnable( GL_BLEND )
        glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA )

        # Set viewport
        glViewport( 0, 0, width, height )

    def on_resize(self, width, height):
        # Set window values
        self.width  = width
        self.height = height
        # Initialize OpenGL context
        self.init_gl(width, height)

    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):
        # Move camera
        self.left   -= dx*self.zoom_level
        self.right  -= dx*self.zoom_level
        self.bottom -= dy*self.zoom_level
        self.top    -= dy*self.zoom_level

    def on_mouse_scroll(self, x, y, dx, dy):
        # Get scale factor
        f = ZOOM_IN_FACTOR if dy &gt; 0 else ZOOM_OUT_FACTOR if dy &lt; 0 else 1
        # If zoom_level is in the proper range
        if .2 &lt; self.zoom_level*f &lt; 5:

            self.zoom_level *= f

            mouse_x = x/self.width
            mouse_y = y/self.height

            mouse_x_in_world = self.left   + mouse_x*self.zoomed_width
            mouse_y_in_world = self.bottom + mouse_y*self.zoomed_height

            self.zoomed_width  *= f
            self.zoomed_height *= f

            self.left   = mouse_x_in_world - mouse_x*self.zoomed_width
            self.right  = mouse_x_in_world + (1 - mouse_x)*self.zoomed_width
            self.bottom = mouse_y_in_world - mouse_y*self.zoomed_height
            self.top    = mouse_y_in_world + (1 - mouse_y)*self.zoomed_height

    def on_draw(self):
        # Initialize Projection matrix
        glMatrixMode( GL_PROJECTION )
        glLoadIdentity()

        # Initialize Modelview matrix
        glMatrixMode( GL_MODELVIEW )
        glLoadIdentity()
        # Save the default modelview matrix
        glPushMatrix()

        # Clear window with ClearColor
        glClear( GL_COLOR_BUFFER_BIT )

        # Set orthographic projection matrix
        glOrtho( self.left, self.right, self.bottom, self.top, 1, -1 )

        # Draw quad
        glBegin( GL_QUADS )
        glColor3ub( 0xFF, 0, 0 )
        glVertex2i( 10, 10 )

        glColor3ub( 0xFF, 0xFF, 0 )
        glVertex2i( 110, 10 )

        glColor3ub( 0, 0xFF, 0 )
        glVertex2i( 110, 110 )

        glColor3ub( 0, 0, 0xFF )
        glVertex2i( 10, 110 )
        glEnd()

        # Remove default modelview matrix
        glPopMatrix()

    def run(self):
        pyglet.app.run()


App(500, 500).run()
</snippet></ROW><ROW><id>19453168</id><snippet>&gt;&gt;&gt; a = {'device': {'version': '1.2.3'}}
&gt;&gt;&gt; b = {'device': {'name': 'testdevice'}}
&gt;&gt;&gt; c = {'other':  {'cost': '1000'}}
&gt;&gt;&gt; to_merge = [a,b,c]
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for m in to_merge:
...     for k,v in m.items():
...         d.setdefault(k, {}).update(v)
...         
&gt;&gt;&gt; d
{'device': {'version': '1.2.3', 'name': 'testdevice'}, 'other': {'cost': '1000'}}
</snippet></ROW><ROW><id>19453168</id><snippet>merge_list_of_dictionaries</snippet></ROW><ROW><id>19453283</id><snippet>\b</snippet></ROW><ROW><id>19453283</id><snippet>_</snippet></ROW><ROW><id>19453283</id><snippet>\S</snippet></ROW><ROW><id>19453283</id><snippet>m = re.compile(r'(?&lt;!\S)T5(?!\S)')
</snippet></ROW><ROW><id>19453283</id><snippet>(?&lt;!\S)</snippet></ROW><ROW><id>19453283</id><snippet>(?!\S)</snippet></ROW><ROW><id>19453399</id><snippet>=</snippet></ROW><ROW><id>19453399</id><snippet>==</snippet></ROW><ROW><id>19453399</id><snippet>re.sub(r'(?&lt;!=)=(?!=)', '==', string)
</snippet></ROW><ROW><id>19453429</id><snippet>x=["fizz","bear","fizz"]

def fizz_count(x):
    count= 0
    for e in x:
        if e=='fizz':
            count = count + 1
    return count

print fizz_count(x)
</snippet></ROW><ROW><id>19453429</id><snippet>*x</snippet></ROW><ROW><id>19453429</id><snippet>count=0</snippet></ROW><ROW><id>19453429</id><snippet>if x=='fizz'</snippet></ROW><ROW><id>19453429</id><snippet>if e=='fizz'</snippet></ROW><ROW><id>19453518</id><snippet>sum([a, b, c, d, ..., z], start)
</snippet></ROW><ROW><id>19453518</id><snippet>start + a + b + c + d + ... + z
</snippet></ROW><ROW><id>19453518</id><snippet>sum([['one', 'two'], ['three', 'four']], [])
</snippet></ROW><ROW><id>19453518</id><snippet>[] + ['one', 'two'] + ['three', 'four']
</snippet></ROW><ROW><id>19453518</id><snippet>['one', 'two', 'three', 'four']
</snippet></ROW><ROW><id>19453518</id><snippet>start</snippet></ROW><ROW><id>19453518</id><snippet>0</snippet></ROW><ROW><id>19453518</id><snippet>sum([['one', 'two'], ['three', 'four']])
</snippet></ROW><ROW><id>19453518</id><snippet>0 + ['one', 'two'] + ['three', 'four']
</snippet></ROW><ROW><id>19453630</id><snippet>subprocess.Popen([file],shell=True)
</snippet></ROW><ROW><id>19453805</id><snippet>&gt;&gt;&gt; mystr = 'Hello world'
&gt;&gt;&gt; for i in range(len(mystr)+1):
...     print mystr[:i]
...

H
He
Hel
Hell
Hello
Hello
Hello w
Hello wo
Hello wor
Hello worl
Hello world
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19453805</id><snippet>&gt;&gt;&gt; # This might be slower though if the string is massive
&gt;&gt;&gt; print "\n".join([mystr[:i] for i in range(len(mystr)+1)])

H
He
Hel
Hell
Hello
Hello
Hello w
Hello wo
Hello wor
Hello worl
Hello world
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19453937</id><snippet>(defun python-inside-comment-p ()
  (save-excursion
    (beginning-of-line 1)
    (looking-at "^#")))

(defun python-select-cell ()
  (interactive)
  (goto-char
   (if (re-search-backward "^\\s-*##[^#]" nil t)
       (match-end 0)
     (point-min)))
  (while (and (python-inside-comment-p)
              (eq 0 (forward-line 1)))
    nil)
  (set-mark (point))
  (goto-char
   (if (re-search-forward "^\\s-*\\(##[^#]\\)" nil t)
       (- (match-beginning 1) 2)
     (point-max))))
</snippet></ROW><ROW><id>19453937</id><snippet>print "Beautiful is better than ugly."
##
print "Explicit is better than implicit."
print "Simple is better than complex."
print "Complex is better than complicated."
# this is a comment
print "Flat is better than nested."
### this is also a comment
print "Sparse is better than dense."
##
print "Readability counts."
print "Special cases aren't special enough to break the rules."
print "Although practicality beats purity."
print "Errors should never pass silently."
print "Unless explicitly silenced."
</snippet></ROW><ROW><id>19454326</id><snippet>&gt;&gt;&gt; mystr = 'foo7bar'
&gt;&gt;&gt; mystr[:mystr.index('7')]
'foo'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19454326</id><snippet>[start:stop:step]</snippet></ROW><ROW><id>19454326</id><snippet>index</snippet></ROW><ROW><id>19454382</id><snippet>def base36encode(number, alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):
    """Converts an integer to a base36 string."""
    if not isinstance(number, (int, long)):
        raise TypeError('number must be an integer')

    base36 = ''
    sign = ''

    if number &lt; 0:
        sign = '-'
        number = -number

    if 0 &lt;= number &lt; len(alphabet):
        return sign + alphabet[number]

    while number != 0:
        number, i = divmod(number, len(alphabet))
        base36 = alphabet[i] + base36

    return sign + base36

&gt;&gt;&gt; base36encode(81323539083358)
'stringify'
</snippet></ROW><ROW><id>19454451</id><snippet>&gt;&gt;&gt; s = "I like dog"
&gt;&gt;&gt; s.rsplit(None, 1)[-1] == 'dog'
True
</snippet></ROW><ROW><id>19454451</id><snippet>str.rsplit</snippet></ROW><ROW><id>19454451</id><snippet>1</snippet></ROW><ROW><id>19454451</id><snippet>re.search</snippet></ROW><ROW><id>19454451</id><snippet>re.match</snippet></ROW><ROW><id>19454451</id><snippet>pm = re.compile(r"\bdog$")
has = pm.search("i love dog")
</snippet></ROW><ROW><id>19454451</id><snippet>\b</snippet></ROW><ROW><id>19454451</id><snippet>re.match</snippet></ROW><ROW><id>19454451</id><snippet>r".*dog$"</snippet></ROW><ROW><id>19454451</id><snippet>pm = re.compile(r".*dog$")
has = pm.match("i love dog")
</snippet></ROW><ROW><id>19454480</id><snippet>#colour chooser
def mColour():
    color = colorchooser.askcolor()
    color_name = color[1]
    mlabel2 = Label(mGui,text=color).pack()
    messagebox.showinfo(title = "Colour",message = "This feature has not been fully added yet.")
    return color_name
#printing message 
def mhello():
    mtext = ment.get()
    mlabel2 = Label(mGui,text=mtext, fg = mColour()) # i put the fg and the mcolour inside here insted.
    mlabel2.pack()
</snippet></ROW><ROW><id>19454846</id><snippet>unwrap</snippet></ROW><ROW><id>19454846</id><snippet>numpy.unwrap</snippet></ROW><ROW><id>19454846</id><snippet>ph = [1, 40, 80, 179, -173, -150, -90, -40, -3, 3];
ph2 = unwrap(ph*pi/180)*180/pi
</snippet></ROW><ROW><id>19454846</id><snippet>ans =

  Columns 1 through 7

    1.0000   40.0000   80.0000  179.0000  187.0000  210.0000  270.0000

  Columns 8 through 10

  320.0000  357.0000  363.0000
</snippet></ROW><ROW><id>19454846</id><snippet>edit unwrap</snippet></ROW><ROW><id>19454846</id><snippet>unwrap</snippet></ROW><ROW><id>19454846</id><snippet>function p = unwrap_deg(p)
m = length(p);
dp = diff(p,1);
dps = mod(dp+180,360)-180;
dps(dps==-180 &amp; dp&gt;0) = 180;
dp_corr = dps-dp;
dp_corr(abs(dp)&lt;180) = 0;
p(2:m) = p(2:m)+cumsum(dp_corr);
</snippet></ROW><ROW><id>19454846</id><snippet>ph = [1, 40, 80, 179, -173, -150, -90, -40, -3, 3];
ph2 = unwrap_deg(ph)
</snippet></ROW><ROW><id>19454846</id><snippet>ans =

     1    40    80   179   187   210   270   320   357   363
</snippet></ROW><ROW><id>19454854</id><snippet>test_set = [flatten_image(matrix_image(image))for image in test_images]
test_set = np.array(test_set)
</snippet></ROW><ROW><id>19454854</id><snippet>n = len(test_images)
test_set = numpy.zeros((n,300*200),dtype=int)
for i in range(n):
    test_set[i] = flatten_image(matrix_image(test_images[i]))
</snippet></ROW><ROW><id>19454874</id><snippet>get_cache_returns()</snippet></ROW><ROW><id>19454874</id><snippet>salt/client/__init__.py</snippet></ROW><ROW><id>19454912</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>19454912</id><snippet>print('Hello!', end='')
</snippet></ROW><ROW><id>19454912</id><snippet>import sys
print('ERROR!!!!!', file=sys.stderr)
</snippet></ROW><ROW><id>19455038</id><snippet>&gt;&gt;&gt; b = {"foo", "bar"}
&gt;&gt;&gt; b
set(['foo', 'bar'])
</snippet></ROW><ROW><id>19455038</id><snippet>[]</snippet></ROW><ROW><id>19455038</id><snippet>&gt;&gt;&gt; 'x' in b
False
&gt;&gt;&gt; 'foo' in b
True
</snippet></ROW><ROW><id>19455038</id><snippet>{x**2 for x in xrange(100)}
</snippet></ROW><ROW><id>19455415</id><snippet>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib</snippet></ROW><ROW><id>19455415</id><snippet>#Setting up Environment variables
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

#Here follow the cron jobs
* * * * *   echo $LD_LIBRARY_PATH &gt;&gt; /home/user/logfile.log
* * * * *   some/cron/job.py
</snippet></ROW><ROW><id>19455439</id><snippet>HDFStore</snippet></ROW><ROW><id>19455620</id><snippet>datetime</snippet></ROW><ROW><id>19455669</id><snippet>pandas</snippet></ROW><ROW><id>19455669</id><snippet>from pandas import *
import matplotlib
from numpy.random import rand
import matplotlib.pyplot as plt
df = DataFrame(rand(10,2), columns=['Col1', 'Col2'] )
df['X'] = Series(['A','A','A','A','A','B','B','B','B','B'])
bp = df.boxplot(by='X')
cl=bp[0].get_children()
cl=[item for item in cl if isinstance(item, matplotlib.lines.Line2D)]
</snippet></ROW><ROW><id>19455669</id><snippet>for i, item in enumerate(cl):
    if item.get_xdata().mean()&gt;0:
        bp[0].text(item.get_xdata().mean(), item.get_ydata().mean(), str(i), va='center', ha='center')
</snippet></ROW><ROW><id>19455669</id><snippet>linewidth</snippet></ROW><ROW><id>19455669</id><snippet>for i in range(_your_number_of_classes_2_in_this_case):
    cl[5+i*8].set_linewidth(2.)
</snippet></ROW><ROW><id>19455739</id><snippet>&gt;&gt;&gt; x = [[[3,5,10,7]],[[5,4,4,20]],[[9,100,56,7]]]
&gt;&gt;&gt; x2 = [a[0] for a in x]
&gt;&gt;&gt; x2
[[3, 5, 10, 7], [5, 4, 4, 20], [9, 100, 56, 7]]
</snippet></ROW><ROW><id>19455759</id><snippet>import threading

response = None
def user_input():
    global response
    response = raw_input("Do you wish to reconnect? ")

user = threading.Thread(target=user_input)
user.daemon = True
user.start()
user.join(2)
if response is None:
    print 
    print 'Exiting'
else:
    print 'As you wish'
</snippet></ROW><ROW><id>19455784</id><snippet>in</snippet></ROW><ROW><id>19455784</id><snippet>if foo not in (100, 101):
</snippet></ROW><ROW><id>19455784</id><snippet>is</snippet></ROW><ROW><id>19455784</id><snippet>not is</snippet></ROW><ROW><id>19455784</id><snippet>&gt;&gt;&gt; value1 = 4242
&gt;&gt;&gt; value2 = 4242
&gt;&gt;&gt; value1 == value2
True
&gt;&gt;&gt; value1 is value2
False
&gt;&gt;&gt; value3 = value1  # assignment
&gt;&gt;&gt; value1 == value3
True
&gt;&gt;&gt; value1 is value3
True
</snippet></ROW><ROW><id>19455960</id><snippet>'C:\\Users\\Sufiyan\\Desktop\\MyFolder'</snippet></ROW><ROW><id>19455960</id><snippet>from MyFiles import File1
</snippet></ROW><ROW><id>19455960</id><snippet>__init__.py</snippet></ROW><ROW><id>19456198</id><snippet>s = urllib2.urlopen('http://www.ncbi.nlm.nih.gov/gene/?term='+a,'r')</snippet></ROW><ROW><id>19456347</id><snippet>&gt;&gt;&gt; my_list = [3, 5, 6, None, 6, None]
&gt;&gt;&gt; np.array(my_list, dtype=np.float)
array([  3.,   5.,   6.,  nan,   6.,  nan])
</snippet></ROW><ROW><id>19456352</id><snippet>import numpy
import scipy
import pyfits

# Use Pyfits to read in a file.
im = pyfits.open("example.fits")

# pyfits opens a "list" of all header extensions in the file.
isinstance(im,list)

# my example is a simple 2d image. so I want the first header unit
im0 = im[0]

# you access the data shape this way
print im0.data.shape

# simple check of the image variance
print numpy.var(im0.data)

# now I'm just repeating the same as your example
poisson = str(raw_input("Poisson noise amount: "))
poissonNoise = numpy.random.poisson(poisson, im0.data.shape).astype(float)
test = im0.data + poissonNoise

# check things out and write to new file
print numpy.var(test)

# you could do this.
im0.data = test

# write that new image back out with the old header. 
pyfits.writeto("/tmp/test.fits", data=test, header=im0.header)

# prove it worked. 
check = pyfits.open("/tmp/test.fits")

numpy.var(check[0].data)
</snippet></ROW><ROW><id>19456746</id><snippet>range(11464882)</snippet></ROW><ROW><id>19456746</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(range(11464882))
91719128
&gt;&gt;&gt; sys.getsizeof(11464881)  # largest number
24
&gt;&gt;&gt; sys.getsizeof(0)         # smalest number
24
&gt;&gt;&gt; 91719128 + (24 * 11464882)  # bytes
366876296
&gt;&gt;&gt; (91719128 + (24 * 11464882)) / (1024.0 ** 2) # mb
349.88050079345703
</snippet></ROW><ROW><id>19456746</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>19456746</id><snippet>&gt;&gt;&gt; sys.getsizeof({})
280
&gt;&gt;&gt; 91719128 + 280 * 11464882
3301886088
&gt;&gt;&gt; (91719128 + 280 * 11464882) / (1024.0 ** 2) # mb
3148.923957824707
&gt;&gt;&gt; (91719128 + 280 * 11464882) / (1024.0 ** 3) # gb
3.0751210525631905
</snippet></ROW><ROW><id>19457097</id><snippet>Owner = tables.Column(order_by=("Owner.Full_Name"))</snippet></ROW><ROW><id>19457215</id><snippet>logging.basicConfig(filename=file_log, level=logging.DEBUG, format ='%(message)'
#              ----^                                                     -------^
</snippet></ROW><ROW><id>19457215</id><snippet>SyntaxError</snippet></ROW><ROW><id>19457215</id><snippet>chr(event.Ascii):
</snippet></ROW><ROW><id>19457215</id><snippet>def OnKeyboardEvent (event):
    logging.basicConfig(filename=file_log, level=logging.DEBUG, format ='%(message)')
    logging.log(10, chr(event.Ascii))
    return True
</snippet></ROW><ROW><id>19457270</id><snippet>{key: value for ... in ...}</snippet></ROW><ROW><id>19457270</id><snippet>Python 2.6.8 (unknown, May 22 2013, 11:58:55) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def main():
...      writer = csv.DictWriter(open('features.csv', 'w'), list(EXTRACTS.keys()))
...      for mail in os.listdir(MAILDIR):
...          writer.writerow({
...                 key: value(email.message_from_file(open(os.path.join(MAILDIR, mail), 'r')))
...             for key, value in EXTRACTS.items()
  File "&lt;stdin&gt;", line 6
    for key, value in EXTRACTS.items()
      ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>19457270</id><snippet>writer.writerow(dict(
    (key, value(email.message_from_file(open(os.path.join(MAILDIR, mail), 'r'))))
    for key, value in EXTRACTS.items()
))
</snippet></ROW><ROW><id>19457270</id><snippet>EXTRACTS</snippet></ROW><ROW><id>19457270</id><snippet>def main():
    writer = csv.DictWriter(open('features.csv', 'w'), list(EXTRACTS.keys()))
    for mail in os.listdir(MAILDIR):
        mail = email.message_from_file(open(os.path.join(MAILDIR, mail), 'r'))
        writer.writerow(dict((key, value(mail)) for key, value in EXTRACTS.items()))
</snippet></ROW><ROW><id>19457307</id><snippet>matches = re.findall(r'([_-]?[a-z][_-]?[1-9][_-]?[a-z][_-]?)', s, re.I)
</snippet></ROW><ROW><id>19457307</id><snippet>-</snippet></ROW><ROW><id>19457307</id><snippet>_</snippet></ROW><ROW><id>19457307</id><snippet>import re

s = '''
A1a _A_1 A_ A_1_a A-1-a _A_1_a_ _A1a _A-1-A_ a1_a  A-_-5-a
_A-_-5-A a1_-1 XMDC_A1a or XMDC-A1a or XMDC_A1-a XMDC_A_1_a_ _A-1-A_
'''

def find_this(text):
    matches = re.findall(r'([_-]?[a-z][_-]?[1-9][_-]?[a-z][_-]?)', text, re.I)
    records = [m.replace('-', '').replace('_', '') for m in matches]
    print records

find_this(s)
</snippet></ROW><ROW><id>19457307</id><snippet>['A1a', 'A1a', 'A1a', 'A1a', 'A1a', 'A1A', 'a1a', 'A1a', 'A1a', 'A1a', 'A1a', 'A1A']
</snippet></ROW><ROW><id>19457678</id><snippet>In [1]: import textwrap

In [2]: textwrap.wrap("... this is a test , and so on...", 10)
Out[2]: ['... this', 'is a test', ', and so', 'on...']
</snippet></ROW><ROW><id>19457768</id><snippet>User</snippet></ROW><ROW><id>19457768</id><snippet>post_login_info</snippet></ROW><ROW><id>19457768</id><snippet>user.save()</snippet></ROW><ROW><id>19457768</id><snippet>post_login_info</snippet></ROW><ROW><id>19457768</id><snippet>post_login_info</snippet></ROW><ROW><id>19457768</id><snippet>PostLoginInfo</snippet></ROW><ROW><id>19458061</id><snippet>CROW/ATE</snippet></ROW><ROW><id>19458061</id><snippet>import re
import os

def get_project_dir():
    return re.findall(''.join(['.*', os.path.join('CROW', 'ATE')]), os.path.abspath(__file__))[0]
</snippet></ROW><ROW><id>19458061</id><snippet>sys.path.append(get_project_dir())
</snippet></ROW><ROW><id>19458332</id><snippet>&gt;&gt;&gt; v = numpy.array([1, 10, 123])
&gt;&gt;&gt; 2*v
array([  2,  20, 246])
&gt;&gt;&gt; u = numpy.array([1, 1, 1])
&gt;&gt;&gt; v-u
array([  0,   9, 122])
</snippet></ROW><ROW><id>19458332</id><snippet>numpy.dot()</snippet></ROW><ROW><id>19458332</id><snippet>numpy.linalg.norm()</snippet></ROW><ROW><id>19458396</id><snippet>strip</snippet></ROW><ROW><id>19458396</id><snippet>translate</snippet></ROW><ROW><id>19458396</id><snippet>&gt;&gt;&gt; 'read this short text'.translate(None, 'aeiou')
'rd ths shrt txt'
</snippet></ROW><ROW><id>19458472</id><snippet>genA</snippet></ROW><ROW><id>19458472</id><snippet>import heapq
def gen_weird_sequence(genA, genB):
    heap = []
    a0 = next_a = next(genA)
    saved_a = []
    for b in genB:
        while next_a &lt; b:
            saved_a.append(next_a)
            next_a = next(genA)
        # saved_a now contains all a &lt; b
        for a in saved_a:
            heapq.heappush(heap, (a+b, a, b)) #decorate pair with sorting key a+b
        # (minimum sum in the next round) &gt; b + a0, so yield everything smaller
        while heap and heap[0][0] &lt;= b + a0:
            yield heapq.heappop(heap)[1:] # pop smallest and undecorate
</snippet></ROW><ROW><id>19458472</id><snippet>genB</snippet></ROW><ROW><id>19458472</id><snippet>genA</snippet></ROW><ROW><id>19458472</id><snippet>b</snippet></ROW><ROW><id>19458472</id><snippet>(a0, b), (a1, b), ..., (a_n, b)</snippet></ROW><ROW><id>19458472</id><snippet>a+b</snippet></ROW><ROW><id>19458472</id><snippet>b</snippet></ROW><ROW><id>19458472</id><snippet>heap</snippet></ROW><ROW><id>19458472</id><snippet>saved_a</snippet></ROW><ROW><id>19458472</id><snippet>In [2]: genA = (a for a in [2,3,5,7,11,13,17,19])
In [3]: genB = (b for b in [2,3,5,7,11,13,17,19])
In [4]: for pair in gen_weird_sequence(genA, genB): print pair
(2, 3)
(2, 5)
(3, 5)
(2, 7)
(3, 7)
(5, 7)
(2, 11)
(3, 11)
(2, 13)
(3, 13)
(5, 11)
(5, 13)
(7, 11)
(2, 17)
(3, 17)
(7, 13)
</snippet></ROW><ROW><id>19458472</id><snippet>In [11]: from itertools import *
In [12]: list(islice(gen_weird_sequence(count(), count()), 16))
Out[12]: [(0, 1), (0, 2), (0, 3), (1, 2), (0, 4), (1, 3), (0, 5), (1, 4),
          (2, 3), (0, 6), (1, 5), (2, 4), (0, 7), (1, 6), (2, 5), (3, 4)]
</snippet></ROW><ROW><id>19458650</id><snippet>In [40]: df = pd.DataFrame({'DATE' : ['10-Oct-2013', '10-Oct-2013', '10-Oct-2013', '11-Oct-2013', '11-Oct-2013', '11-Oct-2013'],'VAL' : [1,2,3,4,5,6]})
</snippet></ROW><ROW><id>19458650</id><snippet>In [41]: df['DATE']= pd.to_datetime(df['DATE'])

In [42]: df.dtypes
Out[42]: 
DATE    datetime64[ns]
VAL              int64
dtype: object

In [43]: df
Out[43]: 
                 DATE  VAL
0 2013-10-10 00:00:00    1
1 2013-10-10 00:00:00    2
2 2013-10-10 00:00:00    3
3 2013-10-11 00:00:00    4
4 2013-10-11 00:00:00    5
5 2013-10-11 00:00:00    6
</snippet></ROW><ROW><id>19458650</id><snippet>In [44]: df.groupby('DATE').describe()
Out[44]: 
                  VAL
DATE                 
2013-10-10 count  3.0
           mean   2.0
           std    1.0
           min    1.0
           25%    1.5
           50%    2.0
           75%    2.5
           max    3.0
2013-10-11 count  3.0
           mean   5.0
           std    1.0
           min    4.0
           25%    4.5
           50%    5.0
           75%    5.5
           max    6.0
</snippet></ROW><ROW><id>19458650</id><snippet>In [45]: g = df.groupby('DATE')

In [46]: key = g.groups.keys()[0]

In [47]: key
Out[47]: numpy.datetime64('2013-10-09T20:00:00.000000000-0400')

In [48]: g.get_group(key.astype('i8'))
Out[48]: 
                 DATE  VAL
0 2013-10-10 00:00:00    1
1 2013-10-10 00:00:00    2
2 2013-10-10 00:00:00    3
</snippet></ROW><ROW><id>19458650</id><snippet>df.groupby('DATE').apply(lambda x: .....)
</snippet></ROW><ROW><id>19458650</id><snippet>for g, grp in df.groupby('DATE'):
        ......
</snippet></ROW><ROW><id>19458818</id><snippet>buffer</snippet></ROW><ROW><id>19458818</id><snippet>&gt;&gt;&gt; buffer('foobar')
&lt;read-only buffer for 0x7fcdd7caa120, size -1, offset 0 at 0x7fcdd7ca82f0&gt;
&gt;&gt;&gt; buffer('foobar')[3:5]
'ba'
&gt;&gt;&gt; for c in buffer('foobar'):
...   print c
... 
f
o
o
b
a
r
</snippet></ROW><ROW><id>19458836</id><snippet>while</snippet></ROW><ROW><id>19458836</id><snippet>a=port.read(size=2000)
a=a.splitlines()
t=False
while t!=True:
    for line in a:
        print line
        if line=='OK' or line=='ERROR' or '$GP' in line:
            t=True
</snippet></ROW><ROW><id>19458836</id><snippet>a</snippet></ROW><ROW><id>19458836</id><snippet>t</snippet></ROW><ROW><id>19458836</id><snippet>True</snippet></ROW><ROW><id>19458836</id><snippet>for</snippet></ROW><ROW><id>19458836</id><snippet>a</snippet></ROW><ROW><id>19458836</id><snippet>while</snippet></ROW><ROW><id>19458836</id><snippet>while</snippet></ROW><ROW><id>19458836</id><snippet>a=port.read(size=2000)</snippet></ROW><ROW><id>19458836</id><snippet>while</snippet></ROW><ROW><id>19458919</id><snippet>np.where(n &gt; 0, n - t, n)
</snippet></ROW><ROW><id>19458947</id><snippet>y &lt;- mapply(myfun, df$id.x, df$id.y)
str(y)
Named int [1:2] 1 2
- attr(*, "names")= chr [1:2] "123;145;156" "134;156;187;675"
</snippet></ROW><ROW><id>19458947</id><snippet>mapply(myfun, df$id.x, df$id.y, USE.NAMES=FALSE)
[1] 1 2
</snippet></ROW><ROW><id>19458947</id><snippet>system.time(y &lt;- mapply(myfun, df[1:1e5,]$id.x, df[1:1e5,]$id.y, USE.NAMES=FALSE))
</snippet></ROW><ROW><id>19459031</id><snippet>getattr</snippet></ROW><ROW><id>19459031</id><snippet>getattr(object, name[, default]) -&gt; value</snippet></ROW><ROW><id>19459031</id><snippet>getattr(x, 'y')</snippet></ROW><ROW><id>19459031</id><snippet>x.y</snippet></ROW><ROW><id>19459031</id><snippet>from collections import Counter
countMissingDict = Counter(key for planetObjs in planets for key in dic
                                         if getattr(planetObjs, key) is None)
</snippet></ROW><ROW><id>19459031</id><snippet>dict</snippet></ROW><ROW><id>19459041</id><snippet>mydate</snippet></ROW><ROW><id>19459041</id><snippet>import datetime
parsed_date = datetime.strptime(mydate, "%Y-%m-%d")

new_date = parsed_date + timedelta(days=1)
</snippet></ROW><ROW><id>19459078</id><snippet>from bs4 import BeautifulSoup

doc = BeautifulSoup(xml, features="xml")
print doc.prettify()
</snippet></ROW><ROW><id>19459078</id><snippet>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;root&gt;
 &lt;group&gt;
  &lt;somethingelse&gt;
   &lt;group/&gt;
  &lt;/somethingelse&gt;
 &lt;/group&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>19459148</id><snippet>element.xpath()</snippet></ROW><ROW><id>19459148</id><snippet>lxml</snippet></ROW><ROW><id>19459148</id><snippet>tree.xpath('/net/endAddress')
</snippet></ROW><ROW><id>19459148</id><snippet>&lt;endAddress&gt;79.255.255.255&lt;/endAddress&gt;</snippet></ROW><ROW><id>19459148</id><snippet>&lt;net /&gt;</snippet></ROW><ROW><id>19459148</id><snippet>&lt;endAddress /&gt;</snippet></ROW><ROW><id>19459148</id><snippet>&lt;netBlock&gt;</snippet></ROW><ROW><id>19459148</id><snippet>tree.xpath('//endAddress')
</snippet></ROW><ROW><id>19459148</id><snippet>&lt;endAddress /&gt;</snippet></ROW><ROW><id>19459148</id><snippet>netblocks = tree.xpath('/net/netBlocks/netBlock')
for netblock in netblocks:
    start = netblock.xpath('./startAddress/text()')[0]
    end = netblock.xpath('./endAddress/text()')[0]
    print "%s - %s" % (start, end)
</snippet></ROW><ROW><id>19459148</id><snippet>79.0.0.0 - 79.255.255.255
</snippet></ROW><ROW><id>19459148</id><snippet>.xpath()</snippet></ROW><ROW><id>19459148</id><snippet>comment = tree.xpath('/net/comment')[0]
line_2 = comment.xpath("./line[@number='2']")[0]
</snippet></ROW><ROW><id>19459148</id><snippet>&lt;line /&gt;</snippet></ROW><ROW><id>19459148</id><snippet>number="2"</snippet></ROW><ROW><id>19459148</id><snippet>numbers = tree.xpath('//line/attribute::number')

['0', '1', '2']
</snippet></ROW><ROW><id>19459148</id><snippet>names = [node.tag for node in tree.xpath('/net/*')]

['registrationDate', 'ref', 'endAddress', 'handle', 'name', 'netBlocks', 'orgRef', 'comment', 'startAddress', 'updateDate', 'version']
</snippet></ROW><ROW><id>19459148</id><snippet>xpath()</snippet></ROW><ROW><id>19459148</id><snippet>NSMAP = {'ns':  'http://www.arin.net/whoisrws/core/v1',
         'ns2': 'http://www.arin.net/whoisrws/rdns/v1',
         'ns3': 'http://www.arin.net/whoisrws/netref/v2'}

names = [node.tag for node in tree.xpath('/ns:net/*', namespaces=NSMAP)]
</snippet></ROW><ROW><id>19459148</id><snippet>lxml</snippet></ROW><ROW><id>19459148</id><snippet>None</snippet></ROW><ROW><id>19459148</id><snippet>xpath()</snippet></ROW><ROW><id>19459148</id><snippet>TypeError: empty namespace prefix is not supported in XPath
</snippet></ROW><ROW><id>19459148</id><snippet>ns:</snippet></ROW><ROW><id>19459187</id><snippet># The important part
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "path.to.your.settings")
</snippet></ROW><ROW><id>19459187</id><snippet>INSTALLED_APPS=(
   'your.app.name'
)
</snippet></ROW><ROW><id>19459187</id><snippet>models.py</snippet></ROW><ROW><id>19459187</id><snippet>models.py</snippet></ROW><ROW><id>19459187</id><snippet>class SomeModel(models.Model):
    #... model definition ...
    pass
</snippet></ROW><ROW><id>19459187</id><snippet>ROOT_URLCONF = 'path.to.urls' # this is the pythonic module path to your `urls.py` file
</snippet></ROW><ROW><id>19459187</id><snippet>urls.py</snippet></ROW><ROW><id>19459187</id><snippet>url(r'^/some/url/def/$', 'some.other.module.handler'),
</snippet></ROW><ROW><id>19459187</id><snippet>handler</snippet></ROW><ROW><id>19459187</id><snippet>some.other.module</snippet></ROW><ROW><id>19459187</id><snippet>model.py</snippet></ROW><ROW><id>19459187</id><snippet>/app  
  /data  
     /commands  
        some_command.py
     models.py  
  /app  
     urls.py  
     settings.py
     ...other-source-files...
</snippet></ROW><ROW><id>19459187</id><snippet>settings.py</snippet></ROW><ROW><id>19459187</id><snippet>data</snippet></ROW><ROW><id>19459187</id><snippet>app.url</snippet></ROW><ROW><id>19459385</id><snippet>text_fields = {
    'city': request.POST.get('city'),
    'state': request.POST.get('state'),
    'province': request.POST.get('province'),
    'used_teargas': request.POST.get('teargas'),
    'victim_1_name': request.POST.get('victim_name'),
    'victim_1_ethnicity': request.POST.get('victim_ethnicity'),
    'victim_1_age': request.POST.get('victim_age'),
    'victim_1_sex': request.POST.get('victim_sex'),
    'victim_1_status': request.POST.get('victim_status'),
}

boolean_fields = {
    'used_taser': request.POST.get('taser'),
    'used_teargas': request.POST.get('teargas'),
    'victim_1_armed': request.POST.get('victim_armed')
}

q_objects = Q()

for field, value in text_fields.iteritems():
    if value:
        q_objects |= Q(**{field+'__contains': value})

for field, value in boolean_fields.iteritems():
    if value:
        q_objects |= Q(**{field: True})

incidents = Incident.objects.filter(
    Q(datepicker__range=[date_start, date_end]), 
    Q(country__contains=country), 
    q_objects
)
</snippet></ROW><ROW><id>19459385</id><snippet>or</snippet></ROW><ROW><id>19459385</id><snippet>|</snippet></ROW><ROW><id>19459385</id><snippet>Q</snippet></ROW><ROW><id>19459385</id><snippet>q_objects</snippet></ROW><ROW><id>19459385</id><snippet>if value</snippet></ROW><ROW><id>19459385</id><snippet>False</snippet></ROW><ROW><id>19459385</id><snippet>None</snippet></ROW><ROW><id>19459461</id><snippet>s/ ... /3_4</snippet></ROW><ROW><id>19459461</id><snippet>(..)</snippet></ROW><ROW><id>19459461</id><snippet>()</snippet></ROW><ROW><id>19459461</id><snippet>\w</snippet></ROW><ROW><id>19459461</id><snippet>[A-Za-z0-9_]</snippet></ROW><ROW><id>19459461</id><snippet>\d</snippet></ROW><ROW><id>19459461</id><snippet>[0-9]</snippet></ROW><ROW><id>19459461</id><snippet>\D</snippet></ROW><ROW><id>19459461</id><snippet>[^0-9]</snippet></ROW><ROW><id>19459461</id><snippet>\d+</snippet></ROW><ROW><id>19459461</id><snippet>\d\d*</snippet></ROW><ROW><id>19459461</id><snippet>patternI1 = r'\.\w*(IPROC|IFIX|IPTAT)\w*?(\d+)\D*.*\(\w*(IPROC|IFIX|IPTAT)\w*?(\d+)\D*.*\)'
</snippet></ROW><ROW><id>19459461</id><snippet>\w*</snippet></ROW><ROW><id>19459461</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sample = '.jalsdkjflkajsdf_lajsdlfIFIX_100(IFIX_asdf_200)'
&gt;&gt;&gt; patternI1 = r'\.\w*(IPROC|IFIX|IPTAT)\w*?(\d\d*)\D*.*\(\w*(IPROC|IFIX|IPTAT)\w*?(\d\d*)\D*.*\)'
&gt;&gt;&gt; re.search(patternI1, sample).groups()
('IFIX', '100', 'IFIX', '200')
</snippet></ROW><ROW><id>19459513</id><snippet>totalSize += os.path.getsize(fp) if not os.path.islink(fp) else 4096 
</snippet></ROW><ROW><id>19459762</id><snippet>CGIHTTPServer</snippet></ROW><ROW><id>19459762</id><snippet>CGIHTTPServer</snippet></ROW><ROW><id>19459762</id><snippet>BaseHTTPServer.BaseHTTPRequestHandler</snippet></ROW><ROW><id>19459762</id><snippet>SimpleHTTPServer.SimpleHTTPRequestHandler</snippet></ROW><ROW><id>19459762</id><snippet>.py</snippet></ROW><ROW><id>19459762</id><snippet>.pyw</snippet></ROW><ROW><id>19459762</id><snippet>cgi</snippet></ROW><ROW><id>19459762</id><snippet>cgitb</snippet></ROW><ROW><id>19459790</id><snippet>true_expression if test else false_expression</snippet></ROW><ROW><id>19459790</id><snippet>if</snippet></ROW><ROW><id>19459790</id><snippet>== True</snippet></ROW><ROW><id>19459790</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>19459790</id><snippet>None</snippet></ROW><ROW><id>19459790</id><snippet>is not None</snippet></ROW><ROW><id>19459790</id><snippet>type()</snippet></ROW><ROW><id>19459790</id><snippet>isinstance()</snippet></ROW><ROW><id>19459790</id><snippet>int()</snippet></ROW><ROW><id>19459790</id><snippet>.lower()</snippet></ROW><ROW><id>19459790</id><snippet>int.lower()</snippet></ROW><ROW><id>19459790</id><snippet>AttributeError</snippet></ROW><ROW><id>19459790</id><snippet>int</snippet></ROW><ROW><id>19459790</id><snippet>float</snippet></ROW><ROW><id>19459790</id><snippet>str</snippet></ROW><ROW><id>19459790</id><snippet>unicode</snippet></ROW><ROW><id>19459790</id><snippet>[int(a[0].internal_value) if isinstance(a[0].internal_value, (float, int)) or a[0].internal_value.isdigit() 
 else str(a[0].internal_value).lower()
 for a in ws.iter_rows() if a[0].internal_value is not None]
</snippet></ROW><ROW><id>19459790</id><snippet>def conversion(value):
    if isinstance(value, (float, int)):
        return int(value)
    return str(value).lower()
</snippet></ROW><ROW><id>19459790</id><snippet>[conversion(a[0].internal_value) for a in ws.iter_rows() if a[0].internal_value is not None]
</snippet></ROW><ROW><id>19459875</id><snippet>zip_file = open(path_to_file, 'r')
response = HttpResponse(zip_file, content_type='application/force-download')
response['Content-Disposition'] = 'attachment; filename="%s"' % 'foo.zip'
return response
</snippet></ROW><ROW><id>19459888</id><snippet>eqns = { 'x' : 'f(x, x(t - tau))'}

mycode = """
double f(double x, double x_tau) {
    if (x &gt; 1.0){
        return 0.25 * x_tau / (1.0 + pow(x_tau, 10.0)) -0.1*x;
    }
    else{
        return 0.45 * x;
    }
}
"""
</snippet></ROW><ROW><id>19459888</id><snippet>x=1</snippet></ROW><ROW><id>19459888</id><snippet>dtmax</snippet></ROW><ROW><id>19460000</id><snippet>(?=\d+)</snippet></ROW><ROW><id>19460000</id><snippet>import re
s = '1 john 2 james 34 baker 45 discover'
s = re.split(' (?=\d+)',s)
print s

['1 john', '2 james', '34 baker', '45 discover']
</snippet></ROW><ROW><id>19460256</id><snippet>all1ts</snippet></ROW><ROW><id>19460256</id><snippet>import itertools

all1ts = sorted(itertools.chain(((m, "m1") for m in m1),
                                ((w, "w1") for w in w1)))

all1tsr = [row+(i,) for i,row in enumerate(all1ts)]
</snippet></ROW><ROW><id>19460256</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19460256</id><snippet>groups = []
for _, group in itertools.groupby(all1tsr, lambda x: x[0]):
  group = list(group)
  rank = sum(x[2] for x in group) / len(group)
  groups.extend((val, identifier, rank) for val, identifier, _ in group)
</snippet></ROW><ROW><id>19460256</id><snippet>[(0, 'm1', 5),
 (0, 'm1', 5),
 (0, 'm1', 5),
 (0, 'm1', 5),
 (0, 'm1', 5),
 (0, 'w1', 5),
 (0, 'w1', 5),
 (0, 'w1', 5),
 (0, 'w1', 5),
 (0, 'w1', 5),
 (0, 'w1', 5),
 (1, 'w1', 11),
 (2, 'm1', 12),
 (3, 'm1', 16),
 (3, 'm1', 16),
 (3, 'm1', 16),
 (3, 'w1', 16),
 (3, 'w1', 16),
 (3, 'w1', 16),
 (3, 'w1', 16),
 (4, 'm1', 20),
 (4, 'm1', 20),
 (5, 'm1', 22),
 (6, 'm1', 23),
 (7, 'w1', 24),
 (8, 'w1', 25),
 (8, 'w1', 25),
 (10, 'm1', 28),
 (10, 'm1', 28),
 (10, 'm1', 28),
 (11, 'm1', 30),
 (12, 'm1', 31),
 (15, 'm1', 33),
 (15, 'm1', 33),
 (15, 'm1', 33),
 (19, 'w1', 35),
 (20, 'm1', 36),
 (20, 'w1', 36),
 (22, 'm1', 38),
 (25, 'm1', 39),
 (25, 'm1', 39),
 (27, 'm1', 41),
 (27, 'w1', 41),
 (30, 'm1', 43),
 (30, 'w1', 43)]
</snippet></ROW><ROW><id>19460515</id><snippet>system_objs = json.loads(b.read())

# create a list that only have dicts with the property 'id'
# just read the comment to also include if id is not null
system_objs = [o for o in system_objs if 'id' in o and o['id'] is not None]

# how many dicts have 'id' with it
print len(system_objs)

# write the system objs to a json file
with open('filtered.json', 'w') as f:
    f.write(json.dumps(system_objs))
</snippet></ROW><ROW><id>19460556</id><snippet>from bs4 import BeautifulSoup
from pprint import pprint

soup = BeautifulSoup(html)
h2s = soup.select("h2") #get all h2 elements
tables = soup.select("table") #get all tables

first = True
title =""
players = []
for i,table in enumerate(tables):
    if first:
         #every h2 element has 2 tables. table size = 8, h2 size = 4
         #so for every 2 tables 1 h2
         title =  h2s[int(i/2)].text
    for tr in table.select("tr"):
        player = (title,) #create a player
        for td in tr.select("td"):
            player = player + (td.text,) #add td info in the player
        if len(player) &gt; 1: 
            #If the tr contains a player and its not only ("Goalkeaper") add it
            players.append(player)
    first = not first
pprint(players)
</snippet></ROW><ROW><id>19460556</id><snippet>[('Goalkeepers', 'Cech', 'Chelsea', '30', '£6.4'),
 ('Goalkeepers', 'Hart', 'Man City', '28', '£6.4'),
 ('Goalkeepers', 'Krul', 'Newcastle', '21', '£5.0'),
 ('Goalkeepers', 'Ruddy', 'Norwich', '25', '£5.0'),
 ('Goalkeepers', 'Vorm', 'Swansea', '19', '£5.0'),
 ('Goalkeepers', 'Stekelenburg', 'Fulham', '6', '£4.9'),
 ('Goalkeepers', 'Pantilimon', 'Man City', '0', '£4.9'),
 ('Goalkeepers', 'Lindegaard', 'Man Utd', '0', '£4.9'),
 ('Goalkeepers', 'Butland', 'Stoke City', '0', '£4.9'),
 ('Goalkeepers', 'Foster', 'West Brom', '13', '£4.9'),
 ('Goalkeepers', 'Viviano', 'Arsenal', '0', '£4.8'),
 ('Goalkeepers', 'Schwarzer', 'Chelsea', '0', '£4.7'),
 ('Goalkeepers', 'Boruc', 'Southampton', '42', '£4.7'),
 ('Goalkeepers', 'Myhill', 'West Brom', '15', '£4.5'),
 ('Goalkeepers', 'Fabianski', 'Arsenal', '0', '£4.4'),
 ('Goalkeepers', 'Gomes', 'Tottenham', '0', '£4.4'),
 ('Goalkeepers', 'Friedel', 'Tottenham', '0', '£4.4'),
 ('Goalkeepers', 'Henderson', 'West Ham', '0', '£4.0'),
 ('Defenders', 'Baines', 'Everton', '43', '£7.7'),
 ('Defenders', 'Vertonghen', 'Tottenham', '34', '£7.0'),
 ('Defenders', 'Taylor', 'Cardiff City', '14', '£4.5'),
 ('Defenders', 'Zverotic', 'Fulham', '0', '£4.5'),
 ('Defenders', 'Davies', 'Hull City', '28', '£4.5'),
 ('Defenders', 'Flanagan', 'Liverpool', '0', '£4.5'),
 ('Defenders', 'Dawson', 'West Brom', '0', '£3.9'),
 ('Defenders', 'Potts', 'West Ham', '0', '£3.9'),
 ('Defenders', 'Spence', 'West Ham', '0', '£3.9'),
 ('Midfielders', 'Özil', 'Arsenal', '24', '£10.6'),
 ('Midfielders', 'Redmond', 'Norwich', '20', '£5.0'),
 ('Midfielders', 'Mavrias', 'Sunderland', '5', '£5.0'),
 ('Midfielders', 'Gera', 'West Brom', '0', '£5.0'),
 ('Midfielders', 'Essien', 'Chelsea', '0', '£4.9'),
 ('Midfielders', 'Brown', 'West Brom', '0', '£4.3'),
 ('Forwards', 'van Persie', 'Man Utd', '24', '£13.9'),
 ('Forwards', 'Cornelius', 'Cardiff City', '1', '£5.4'),
 ('Forwards', 'Elmander', 'Norwich', '7', '£5.4'),
 ('Forwards', 'Murray', 'Crystal Palace', '0', '£5.3'),
 ('Forwards', 'Vydra', 'West Brom', '2', '£5.3'),
 ('Forwards', 'Proschwitz', 'Hull City', '0', '£4.3')]
</snippet></ROW><ROW><id>19460684</id><snippet>import numpy as np

with open(file1, "w") as f:
    f.write('2\n')
    np.savetxt(f, datafile, fmt)
</snippet></ROW><ROW><id>19460697</id><snippet>Response(x)
</snippet></ROW><ROW><id>19460697</id><snippet>return render_to_response('main.mak', {'results':x})
</snippet></ROW><ROW><id>19460875</id><snippet>&gt;&gt;&gt; from threading import Lock
&gt;&gt;&gt; x = Lock()
&gt;&gt;&gt; x.locked()
False
&gt;&gt;&gt; x.acquire()
True
&gt;&gt;&gt; x.locked()
True
</snippet></ROW><ROW><id>19460875</id><snippet>x.acquire(False)
x.release()
</snippet></ROW><ROW><id>19460875</id><snippet>x</snippet></ROW><ROW><id>19460875</id><snippet>False</snippet></ROW><ROW><id>19460875</id><snippet>.locked()</snippet></ROW><ROW><id>19460875</id><snippet>.locked()</snippet></ROW><ROW><id>19460875</id><snippet>run()</snippet></ROW><ROW><id>19460875</id><snippet>def run(self):
    with aLock:
        self.clip = subprocess.call([ 'mplayer', 'Avatar.h264'], stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>19460875</id><snippet>acquire()/release()</snippet></ROW><ROW><id>19460875</id><snippet>with</snippet></ROW><ROW><id>19461050</id><snippet>i = iter(L)</snippet></ROW><ROW><id>19461050</id><snippet>item = i.next()</snippet></ROW><ROW><id>19461050</id><snippet>item</snippet></ROW><ROW><id>19461050</id><snippet>for item in L</snippet></ROW><ROW><id>19461050</id><snippet>for item in L</snippet></ROW><ROW><id>19461050</id><snippet>item</snippet></ROW><ROW><id>19461050</id><snippet>for i in range(0,len(L))</snippet></ROW><ROW><id>19461050</id><snippet>L[i]</snippet></ROW><ROW><id>19461050</id><snippet>L[i+1]</snippet></ROW><ROW><id>19461263</id><snippet>def parse_summary(self, response):
    # ...

    links = [urljoin(response.url, link) for link in summary_links]
    return self._dispatch_summary_request(item, links)

def parse_chap_summary_link(self, response):
    item = response.meta['item']

    # ... collect summary into the item field

    return self._dispatch_summary_request(item, response.meta['summary_links'])

def _dispatch_summary_request(self, item, links):
    try:
        next_link = links.pop()
    except IndexError:
        # no links left
        return item
    else:
        # TODO: it might happen that one request fails and to not lose the item
        # the request must have an errback callback to handle the failure and
        # resume the next summary request.
        return Request(next_link, meta={'item': item, 'summary_links': links},
                       callback=self.parse_chap_summary_link)
</snippet></ROW><ROW><id>19461263</id><snippet>@inline_requests
def parse_summary(self, response):
    # ...
    for link in chap_summary_links:
        try:
            response = yield Request(link)
        except Exception:
            # TODO: handle the error, log or something
            pass
        else:
            # extract the summary as in parse_chap_summary_link ...
            item['chapter_summaries'] += [text]

    # Must use yield at the end as this callback is a generator
    # due the previous yield statements.
    yield item
</snippet></ROW><ROW><id>19461270</id><snippet>if contact.has_key(findName) == True: 
    #Do something here. 
elif contact.has_key(findName) == False: 
    #Do something else.
</snippet></ROW><ROW><id>19461270</id><snippet>in</snippet></ROW><ROW><id>19461270</id><snippet>else</snippet></ROW><ROW><id>19461270</id><snippet>if findName in contact: 
    #Do something here. 
else: 
    #Do something else.
</snippet></ROW><ROW><id>19461305</id><snippet>%%timeit</snippet></ROW><ROW><id>19461305</id><snippet>In [5]: %%timeit x = []
   ...: x = x + [1]
   ...:
10000 loops, best of 3: 21.5 us per loop

In [6]: %%timeit x = []
x.append(1)
   ...:
1000000 loops, best of 3: 93.7 ns per loop

In [7]: %%timeit x = []
x.insert(0, 1)
   ...:
100000 loops, best of 3: 30 us per loop

In [8]: %%timeit x = [1,2,3]
x.insert(len(x), 1)
   ...:
1000000 loops, best of 3: 293 ns per loop

In [9]: %%timeit x = []
x.extend([1])
   ....:
1000000 loops, best of 3: 208 ns per loop

In [15]: %%timeit x = []
x += [1]
   ....:
10000000 loops, best of 3: 165 ns per loop
</snippet></ROW><ROW><id>19461305</id><snippet>append</snippet></ROW><ROW><id>19461305</id><snippet>+=</snippet></ROW><ROW><id>19461305</id><snippet>extend()</snippet></ROW><ROW><id>19461305</id><snippet>insert</snippet></ROW><ROW><id>19461305</id><snippet>+</snippet></ROW><ROW><id>19461305</id><snippet>x = x + [1]</snippet></ROW><ROW><id>19461305</id><snippet>x += [1]</snippet></ROW><ROW><id>19461305</id><snippet>In [17]: %%timeit y = []
y = y + range(1000000)
   ....:
10 loops, best of 3: 76.8 ms per loop

In [18]: %%timeit y = []
y += range(1000000)
   ....:
10 loops, best of 3: 23.4 ms per loop
</snippet></ROW><ROW><id>19461305</id><snippet>In [24]: %%timeit y = range(1000000)
y.append(1)
   ....:
10000000 loops, best of 3: 92.7 ns per loop

In [29]: %%timeit y = range(1000000)
y.insert(len(y), 1)
   ....:
1000000 loops, best of 3: 293 ns per loop

In [30]: %%timeit y = range(1000000)
y = y + [1]
   ....:
100 loops, best of 3: 12.6 ms per loop
</snippet></ROW><ROW><id>19461583</id><snippet>old_list = [...]
new_list = []
tmp_set = set()
for el in old_list:
     if el not in tmp_set:
          tmp_set.add(el)
          new_list.append(el)
</snippet></ROW><ROW><id>19461633</id><snippet>import xxx
</snippet></ROW><ROW><id>19461633</id><snippet>reload(xxx)
</snippet></ROW><ROW><id>19461633</id><snippet>from xxx import yyy
</snippet></ROW><ROW><id>19461633</id><snippet>reload xxx</snippet></ROW><ROW><id>19461633</id><snippet>yyy</snippet></ROW><ROW><id>19461633</id><snippet>reload(xxx)
yyy = xxx.yyy
</snippet></ROW><ROW><id>19461801</id><snippet>import csv
import StringIO

stored_output = StringIO.StringIO()

with open('file.csv', 'rb') as input_csv:
    reader = csv.DictReader(input_csv, delimiter='|', quoting=csv.QUOTE_NONE)
    writer = csv.DictWriter(stored_output, reader.fieldnames, delimiter="|",quoting=csv.QUOTE_NONE, quotechar=None)

    merge_cols = "title1", "title3", "title4"

    writer.writeheader()

    for row in reader:
        row["merge"] = ''.join(row[col] for col in merge_cols)
        writer.writerow(row)

    contents = stored_output.getvalue()
    stored_output.close()
    print contents

with open('file.csv', 'rb') as input_csv:
    input_csv = input_csv.read().strip()

if input_csv != contents.strip():
    with open('file.csv', 'wb') as new_csv:
        new_csv.write("".join(contents))
</snippet></ROW><ROW><id>19461818</id><snippet>collections.Counter()</snippet></ROW><ROW><id>19461818</id><snippet>from collections import Counter
dicts = [{'a':1, 'b':4, 'c':8, 'd':9},
         {'a':2, 'b':3, 'c':2, 'd':7},
         {'a':0, 'b':1, 'c':3, 'd':4}]
c = Counter()
for d in dicts:
    c.update(d)
</snippet></ROW><ROW><id>19461818</id><snippet>&gt;&gt;&gt; print c
Counter({'d': 20, 'c': 13, 'b': 8, 'a': 3})
</snippet></ROW><ROW><id>19461818</id><snippet>&gt;&gt;&gt; print dict(c)
{'a': 3, 'c': 13, 'b': 8, 'd': 20}
</snippet></ROW><ROW><id>19461818</id><snippet>Counter()</snippet></ROW><ROW><id>19461818</id><snippet>d = {k: v for k in dicts[0] for v in [sum(d[k] for d in dicts)]}
</snippet></ROW><ROW><id>19461818</id><snippet>Counter()</snippet></ROW><ROW><id>19461818</id><snippet>d = {k: sum(d[k] for d in dicts) for k in dicts[0]}
</snippet></ROW><ROW><id>19461890</id><snippet>csv</snippet></ROW><ROW><id>19461890</id><snippet>pandas</snippet></ROW><ROW><id>19461890</id><snippet>df1 = pd.read_csv("file1.csv")
df2 = pd.read_csv("file2.csv")
merged = df1.merge(df2, on="UniqueElment")
merged.to_csv("merged.csv", index=False)
</snippet></ROW><ROW><id>19461890</id><snippet>$ cat merged.csv 
title1,title2,title3,UniqueElment,title4,title5,titlea,titleb,titlec,titled,titlee,titlef,titleg,titleh,titlei
data,data,data,dasasd1245,data,data,text,text,text,text,text,text,text,text,data
data,data,data,dasasd1395,data,data,text,text,text,text,text,text,text,text,data
data,data,data,dasasd2594,data,data,text,text,text,text,text,text,text,text,data
data,data,data,dasasd9587,data,data,text,text,text,text,text,text,text,text,data
</snippet></ROW><ROW><id>19461890</id><snippet>UniqueElment</snippet></ROW><ROW><id>19461890</id><snippet>df1 = df1.sort("UniqueElment").reset_index(drop=True)
df2 = df2.sort("UniqueElment").reset_index(drop=True)
merged = pd.concat([df1, df2], axis=1)
</snippet></ROW><ROW><id>19461890</id><snippet>UniqueElment</snippet></ROW><ROW><id>19461914</id><snippet># a sample input line.  In reality you would read it from a file and chomp off the \n.
my $foo = "beer/name: Sausa Weizen beer/beerId: 47986 ...\n";

# replace foo/bar: with a tab everywhere in the line.  
# I used A-Za-z as the chars to match, you can do many more things (including more
# elegant ways of specifying whole character classes).
#
$foo =~ s/[A-Za-z]*\/[a-zA-Z]*:/\t/g;

# print it out.
print "$foo\n";
</snippet></ROW><ROW><id>19461926</id><snippet>showmessage</snippet></ROW><ROW><id>19461926</id><snippet># just join the strings...
showmessage = message + " from " + name

# or string formatting
showmessage = "{0} from {1}".format(message,name)
</snippet></ROW><ROW><id>19461926</id><snippet>showmessage</snippet></ROW><ROW><id>19461926</id><snippet>this is my message from from a name</snippet></ROW><ROW><id>19462087</id><snippet>return</snippet></ROW><ROW><id>19462087</id><snippet>def bar(a):
    return [ x**3 for x in a ]
</snippet></ROW><ROW><id>19462087</id><snippet>def cube(a):
    for x in a:
        return x**3
</snippet></ROW><ROW><id>19462087</id><snippet>for x in a</snippet></ROW><ROW><id>19462087</id><snippet>def cube(a):
    final = []
    for x in a:
        final.append(x**3)
    return final
</snippet></ROW><ROW><id>19462093</id><snippet>else</snippet></ROW><ROW><id>19462093</id><snippet>"WIN!"</snippet></ROW><ROW><id>19462093</id><snippet>ignorelist</snippet></ROW><ROW><id>19462093</id><snippet>re</snippet></ROW><ROW><id>19462093</id><snippet>re.search</snippet></ROW><ROW><id>19462093</id><snippet>re.match</snippet></ROW><ROW><id>19462093</id><snippet>re.match</snippet></ROW><ROW><id>19462093</id><snippet>guess</snippet></ROW><ROW><id>19462093</id><snippet>ignorelist</snippet></ROW><ROW><id>19462093</id><snippet>ignorelist = [r'^test', r'[abc]set']

def guess(a,il):
    for reg in il:
        if re.search(reg,a):
            return "LOSE"
    return "WIN"

a = raw_input()
print guess(a,ignorelist)
</snippet></ROW><ROW><id>19462093</id><snippet>"WIN"</snippet></ROW><ROW><id>19462122</id><snippet>shell=True</snippet></ROW><ROW><id>19462122</id><snippet>import pipes
import subprocess

avprobeCommand = """avprobe -of json -show_streams {0} | grep '"duration"' | sed -n 1p | sed 's/ //g'""".format(pipes.quote(hiOutput))
output = subprocess.check_output(avprobeCommand, shell=True)
</snippet></ROW><ROW><id>19462122</id><snippet>pipes.quote</snippet></ROW><ROW><id>19462122</id><snippet>shlex.quote</snippet></ROW><ROW><id>19462128</id><snippet>print request.content_type
application/x-www-form-urlencoded; charset=UTF-8
</snippet></ROW><ROW><id>19462128</id><snippet>var data = JSON.stringify({name: $("input.name").val(), time: "2pm"});
$.ajax("/save", {
    data: data,
    contentType : "application/json",
    type : "POST"
});
</snippet></ROW><ROW><id>19462187</id><snippet>stream = Gio.MemoryInputStream.new_from_bytes(GLib.Bytes.new(img))
pixbuf = GdkPixbuf.Pixbuf.new_from_stream(stream, None)
self.svgwidget = Gtk.Image.new_from_pixbuf(pixbuf)
</snippet></ROW><ROW><id>19462187</id><snippet>svg = Rsvg.Handle.new_from_data(img)
pixbuf = svg.get_pixbuf()
svgwidget = Gtk.Image.new_from_pixbuf(pixbuf)
</snippet></ROW><ROW><id>19462254</id><snippet>re</snippet></ROW><ROW><id>19462254</id><snippet>f = open('marketing.data.txt')
g = open('marketing_complete.txt', 'w')
for line in f:
    if 'NA' not in line:
        g.write(line)
</snippet></ROW><ROW><id>19462254</id><snippet>with open('marketing.data.txt') as f:
   with open('marketing_complete.txt', 'w') as g:
       for line in f:
           if 'NA' not in line:
               g.write(line)
</snippet></ROW><ROW><id>19462322</id><snippet>csv.py</snippet></ROW><ROW><id>19462322</id><snippet>csv</snippet></ROW><ROW><id>19462322</id><snippet>read()</snippet></ROW><ROW><id>19462322</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('eggs.csv', 'rb') as csvfile:
...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
...     for row in spamreader:
...         print ', '.join(row)
Spam, Spam, Spam, Spam, Spam, Baked Beans
Spam, Lovely Spam, Wonderful Spam
</snippet></ROW><ROW><id>19462382</id><snippet>writeFile = open("/gendermodelDebug.csv", "w")          #'w' instead of 'wb'
</snippet></ROW><ROW><id>19462382</id><snippet>'wb'</snippet></ROW><ROW><id>19462382</id><snippet>row</snippet></ROW><ROW><id>19462382</id><snippet>writeFile.close()
</snippet></ROW><ROW><id>19462392</id><snippet>logging</snippet></ROW><ROW><id>19462392</id><snippet>logging</snippet></ROW><ROW><id>19462392</id><snippet>fmt_arg</snippet></ROW><ROW><id>19462512</id><snippet>ValueError</snippet></ROW><ROW><id>19462512</id><snippet>{}</snippet></ROW><ROW><id>19462512</id><snippet>%</snippet></ROW><ROW><id>19462512</id><snippet>&gt;&gt;&gt; '{}%20la' % 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: unsupported format character 'a' (0x61) at index 6
&gt;&gt;&gt; '{}%20la'.format(1)
'1%20la'
</snippet></ROW><ROW><id>19462512</id><snippet>{}</snippet></ROW><ROW><id>19462512</id><snippet>%</snippet></ROW><ROW><id>19462512</id><snippet>page=urllib2.urlopen("http://www.sfap.org/klsfaprep_search?page={}&amp;type=1&amp;strname=&amp;loc=&amp;op=Lancer%20la%20recherche&amp;form_build_id=form-72a297de309517ed5a2c28af7ed15208&amp;form_id=klsfaprep_search_form".format(i))
</snippet></ROW><ROW><id>19462512</id><snippet>i = 0</snippet></ROW><ROW><id>19462512</id><snippet>i = i + 1</snippet></ROW><ROW><id>19462512</id><snippet>for i in xrange(0,38)</snippet></ROW><ROW><id>19462512</id><snippet>import urllib2 # Import standard library module first. (PEP-8)

from bs4 import BeautifulSoup

for i in xrange(0,38):
    page = urllib2.urlopen("http://www.sfap.org/klsfaprep_search?page={}&amp;type=1&amp;strname=&amp;loc=&amp;op=Lancer%20la%20recherche&amp;form_build_id=form-72a297de309517ed5a2c28af7ed15208&amp;form_id=klsfaprep_search_form" .format(i))
    soup = BeautifulSoup(page.read())
    for eachuniversity in soup.findAll('div',{'class':'field-item odd'}):
        print ''.join(eachuniversity.findAll(text=True)).encode('utf-8')
    print ',\n'
</snippet></ROW><ROW><id>19462516</id><snippet> //   ^A(?!/B/)/[^/]*/B(?!/C/)/[^/]*/C$

 ^             # BOL
 A             # A
 (?! /B/ )     # Not /B/
 / [^/]* /     #   / ... /
 B             # B
 (?! /C/ )     # Not /C/
 / [^/]* /     #   / ... /
 C             # C
 $             # EOL
</snippet></ROW><ROW><id>19462550</id><snippet>for n in numbers:
    frequencies[n] += 1
</snippet></ROW><ROW><id>19462572</id><snippet>,</snippet></ROW><ROW><id>19462572</id><snippet>print</snippet></ROW><ROW><id>19462572</id><snippet>print ''.join(eachuniversity.findAll(text=True)).encode('utf-8').strip(),',',
</snippet></ROW><ROW><id>19462572</id><snippet>print re.sub(r'\s+',' ',''.join(eachuniversity.findAll(text=True)).encode('utf-8')),',',
</snippet></ROW><ROW><id>19462676</id><snippet>def memoize(fn):
    stored_results = {}

    def memoized(*args):
        try:
            return stored_results[args]
        except KeyError:
            result = stored_results[args]=fn(*args)
            return result
    return memoized
#^^^
</snippet></ROW><ROW><id>19462676</id><snippet>@memoize</snippet></ROW><ROW><id>19462676</id><snippet>def ...</snippet></ROW><ROW><id>19462676</id><snippet>@memoize # &lt;-- should be here
def fibonacci(n):
    if n == 0 or n == 1:
        return n
    else:
        return (fibonacci(n-1)+fibonacci(n-2))
</snippet></ROW><ROW><id>19462676</id><snippet>fibonacci</snippet></ROW><ROW><id>19462676</id><snippet>@memoize</snippet></ROW><ROW><id>19462676</id><snippet>fibonacci(5)
</snippet></ROW><ROW><id>19462676</id><snippet>fibonacci</snippet></ROW><ROW><id>19462676</id><snippet>stored_results[args]</snippet></ROW><ROW><id>19462676</id><snippet>KeyError</snippet></ROW><ROW><id>19462676</id><snippet>TypeError</snippet></ROW><ROW><id>19462676</id><snippet>memoize</snippet></ROW><ROW><id>19462684</id><snippet>for lines in ListOfLandmarks:
        CalculateDistance( User_N, User_E, ListOfLandmarks[2], ListOfLandmarks[3] )
</snippet></ROW><ROW><id>19462684</id><snippet>for lines in ListOfLandmarks:
        CalculateDistance( User_N, User_E, lines[2], lines[3] )
</snippet></ROW><ROW><id>19462684</id><snippet>ListOfLandmarks[2]</snippet></ROW><ROW><id>19462684</id><snippet>list</snippet></ROW><ROW><id>19462684</id><snippet>float</snippet></ROW><ROW><id>19462684</id><snippet>lines[2]</snippet></ROW><ROW><id>19462733</id><snippet>\</snippet></ROW><ROW><id>19462733</id><snippet>&gt;&gt;&gt; 1 + \
... 2
3
&gt;&gt;&gt;
&gt;&gt;&gt; 1 + \
... 2 + \
... 3
6
</snippet></ROW><ROW><id>19462733</id><snippet>\</snippet></ROW><ROW><id>19462733</id><snippet>( ... )</snippet></ROW><ROW><id>19462733</id><snippet>&gt;&gt;&gt; (1 +
... 2)
3
</snippet></ROW><ROW><id>19462802</id><snippet>import xml.etree.ElementTree as ET</snippet></ROW><ROW><id>19462802</id><snippet>a = ET.Element('wp:author')
ET.dump(a)
</snippet></ROW><ROW><id>19462838</id><snippet>def print_board (b):
    print(' '.join(map(lambda x: str(x + 1), range(connectfour.BOARD_COLUMNS))))
    for y in range(connectfour.BOARD_ROWS):
        print(' '.join(b[x][y].strip() or '.' for x in range(connectfour.BOARD_COLUMNS)))
</snippet></ROW><ROW><id>19462838</id><snippet>&gt;&gt;&gt; print_board([
...     [' ', ' ', ' ', ' ', 'R', 'R', 'Y'],
...     [' ', ' ', ' ', ' ', ' ', 'Y', 'Y'],
...     [' ', ' ', ' ', ' ', ' ', 'R', 'R'],
...     [' ', ' ', ' ', ' ', ' ', ' ', ' '],
...     [' ', ' ', ' ', ' ', ' ', ' ', ' '],
...     [' ', ' ', ' ', ' ', ' ', ' ', ' '],
...     [' ', ' ', ' ', ' ', ' ', ' ', ' '],
... ])
1 2 3 4 5 6 7
. . . . . . .
. . . . . . .
. . . . . . .
. . . . . . .
R . . . . . .
R Y R . . . .
Y Y R . . . .
</snippet></ROW><ROW><id>19462865</id><snippet>a = [A("Taylor","Launter",22), A("James","bond",40)]
a.display()
</snippet></ROW><ROW><id>19462865</id><snippet>a</snippet></ROW><ROW><id>19462865</id><snippet>display</snippet></ROW><ROW><id>19462865</id><snippet>display</snippet></ROW><ROW><id>19462865</id><snippet>A</snippet></ROW><ROW><id>19462865</id><snippet>for currentObject in [A("Taylor","Launter",22), A("James","bond",40)]:
    currentObject.display()
</snippet></ROW><ROW><id>19462865</id><snippet>display</snippet></ROW><ROW><id>19462918</id><snippet>X=np.fromfunction(testfunc,(4,2))
pixel_output['f0']=X[0]
pixel_output['f1']=X[1]
pixel_output['f2']=X[2]
print pixel_output
</snippet></ROW><ROW><id>19462918</id><snippet>array([[(0, 0, 0), (0, 1, 0)],
       [(1, 0, 0), (1, 1, 1)],
       [(2, 0, 0), (2, 1, 2)],
       [(3, 0, 0), (3, 1, 3)]], 
      dtype=[('f0', 'u1'), ('f1', 'u1'), ('f2', 'u1')])
</snippet></ROW><ROW><id>19462918</id><snippet>fromfunction</snippet></ROW><ROW><id>19462918</id><snippet>(4,2)</snippet></ROW><ROW><id>19462918</id><snippet>pixel_output</snippet></ROW><ROW><id>19462918</id><snippet>for i in range(4):
    for j in range(2):
        pixel_output[i,j]=testfunc(i,j)
</snippet></ROW><ROW><id>19462918</id><snippet>pixel_output[:]=np.core.records.fromarrays(X)
</snippet></ROW><ROW><id>19462918</id><snippet>fromarrays</snippet></ROW><ROW><id>19462918</id><snippet>for i in range(len(arrayList)):
    _array[_names[i]] = arrayList[i]
</snippet></ROW><ROW><id>19462986</id><snippet>a = eval('({{json_dict}})')
</snippet></ROW><ROW><id>19463355</id><snippet># &lt;--</snippet></ROW><ROW><id>19463355</id><snippet>create_rectangle</snippet></ROW><ROW><id>19463355</id><snippet>x1, y1, x2, y2</snippet></ROW><ROW><id>19463355</id><snippet>x, y, xsize, ysize</snippet></ROW><ROW><id>19463355</id><snippet>try:
    import Tkinter
except ImportError:
    import tkinter as Tkinter
import sys
from math import floor

master = Tkinter.Tk()

xboxes = int(sys.argv[1])
yboxes = int(sys.argv[2])

winx = 800
winy = 600

w = Tkinter.Canvas(master, width=winx, height=winy)

squares = [[None]*xboxes for i in range(yboxes)] # &lt;-- changed hard-coded 5; to use passed argument
w.pack()
for i in range(yboxes):
    for j in range(xboxes):
        initx = floor(winx / xboxes * j) # &lt;--
        inity = floor(winy / yboxes * i) # &lt;--
        endx = floor(winx / xboxes * (j+1)) # &lt;-- with `j`, It draw dot instead of rectangle.
        endy = floor(winy / yboxes * (i+1)) # &lt;--
        squares[i][j] = w.create_rectangle(initx, inity, endx, endy, fill="red")

master.mainloop()
</snippet></ROW><ROW><id>19463495</id><snippet>class X(ndb.Model):
    a = ndb.StringProperty()

class Y(ndb.Model):
    b = ndd.StructuredProperty(X,repeated=True)



x = Y()
x.b = [X(a="123"),X(a="abc")]
test&gt; x
Y(b=[X(a='123'), X(a='abc')])
</snippet></ROW><ROW><id>19463495</id><snippet>test&gt; x.b.append(X(a='xxx'))
test&gt; x.b
[X(a='123'), X(a='abc'), X(a='xxx')]
</snippet></ROW><ROW><id>19463605</id><snippet>any</snippet></ROW><ROW><id>19463605</id><snippet>&gt;&gt;&gt; string = r"/\?%"
&gt;&gt;&gt; test = "This is my string % my string ?"
&gt;&gt;&gt; any(elem in test for elem in string)
True
&gt;&gt;&gt; test2 = "Just a test string"
&gt;&gt;&gt; any(elem in test2 for elem in string)
False
</snippet></ROW><ROW><id>19463759</id><snippet>setup.py</snippet></ROW><ROW><id>19463759</id><snippet>models.py</snippet></ROW><ROW><id>19464041</id><snippet>class AccessorType(type):
    def __init__(self, name, bases, d):
        type.__init__(self, name, bases, d)
        accessors = {}
        prefixs = ["get_", "set_", "del_"]

        for k in d.keys():
            v = getattr(self, k)
            for i in range(3):
                if k.startswith(prefixs[i]):
                    accessors.setdefault(k[4:], [None, None, None])[i] = v

        for name, (getter, setter, deler) in accessors.items():
            # create default behaviours for the property - if we leave
            # the getter as None we won't be able to getattr, etc..
            # [...] some code that implements the above comment
            setattr(self, name, property(getter, setter, deler, ""))
</snippet></ROW><ROW><id>19464054</id><snippet>a.loc[a.shift(-1) != a]

Out[3]:

1    1
3    2
4    3
5    2
dtype: int64
</snippet></ROW><ROW><id>19464171</id><snippet>__str__</snippet></ROW><ROW><id>19464171</id><snippet>__str__</snippet></ROW><ROW><id>19464171</id><snippet>__str__</snippet></ROW><ROW><id>19464171</id><snippet>TypeError</snippet></ROW><ROW><id>19464171</id><snippet>def __str__(self):
        print '%f/%f'%(self.num,self.den)
</snippet></ROW><ROW><id>19464171</id><snippet>f = Fraction(1,2)
print f
</snippet></ROW><ROW><id>19464171</id><snippet>Traceback (most recent call last):
  File "/Users/.../Desktop/...", line 13, in &lt;module&gt;
    print f
TypeError: __str__ returned non-string (type NoneType)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19464171</id><snippet>__str__</snippet></ROW><ROW><id>19464171</id><snippet>print</snippet></ROW><ROW><id>19464171</id><snippet>__str__</snippet></ROW><ROW><id>19464171</id><snippet>show</snippet></ROW><ROW><id>19464171</id><snippet>def show(self):
        print(self.num,"/",self.den) #or even print(self) (for the last part of answer)
</snippet></ROW><ROW><id>19464171</id><snippet>print(f)</snippet></ROW><ROW><id>19464171</id><snippet>show</snippet></ROW><ROW><id>19464171</id><snippet>__str__</snippet></ROW><ROW><id>19464171</id><snippet>show</snippet></ROW><ROW><id>19464171</id><snippet>show</snippet></ROW><ROW><id>19464171</id><snippet>print</snippet></ROW><ROW><id>19464171</id><snippet>if f.show(): pass
if print(f): pass #raise exception
</snippet></ROW><ROW><id>19464655</id><snippet>os.system("cat file" + '.txt file'.join(mylist) +".txt &gt; result.txt")
</snippet></ROW><ROW><id>19464655</id><snippet>os.system("cat " + ' '.join(map('file{0}.txt'.format, mylist)) + " &gt; result.txt")
</snippet></ROW><ROW><id>19465032</id><snippet>def display(self): 

    if SearchString in per.fname:
        print per.fname, per.lname
    elif SearchString in per.lname:
        print per.fname, per.lname
    else:
        print "No String"
</snippet></ROW><ROW><id>19465032</id><snippet>if</snippet></ROW><ROW><id>19465032</id><snippet>elif</snippet></ROW><ROW><id>19465032</id><snippet>else</snippet></ROW><ROW><id>19465032</id><snippet>if</snippet></ROW><ROW><id>19465032</id><snippet>print per.fname, per.lname</snippet></ROW><ROW><id>19465032</id><snippet>SearchString in per.lname</snippet></ROW><ROW><id>19465032</id><snippet>print "No String"</snippet></ROW><ROW><id>19465032</id><snippet>if</snippet></ROW><ROW><id>19465032</id><snippet>obj=[People("joe","foe"),People("lui","sui")]
for per in obj:
    per.display()
</snippet></ROW><ROW><id>19465032</id><snippet>joe</snippet></ROW><ROW><id>19465032</id><snippet>foe</snippet></ROW><ROW><id>19465032</id><snippet>"No String"</snippet></ROW><ROW><id>19465032</id><snippet>#!usr/bin/python
import sys

SearchString = sys.argv[1]

class People:
    def __init__(self, fname, lname):
        self.fname = fname
        self.lname = lname

    def isMatching(self, matchString):
        return matchString in self.fname or matchString in self.lname

    def display(self): 
        print self.fname, self.lname

obj=[People("joe","foe"),People("lui","sui")]
anyMatched = False
for per in obj:
    if per.isMatching(SearchString):
        anyMatched = True
        per.display()

if not anyMatched:
    print "No String"
</snippet></ROW><ROW><id>19465032</id><snippet>display</snippet></ROW><ROW><id>19465132</id><snippet>dict</snippet></ROW><ROW><id>19465132</id><snippet>mydict = {'foo':'value'}
def myfunc():
    return 4,"MyName"

x, mydict[x] = myfunc()
print mydict
</snippet></ROW><ROW><id>19465132</id><snippet>{'foo': 'value', 4: 'MyName'}
</snippet></ROW><ROW><id>19465261</id><snippet>def change_item_test(self):
    request = self.factory.get('main/views')
    request.user = User.objects.create_user(username="bobalong")
</snippet></ROW><ROW><id>19465261</id><snippet>AnonymousUser</snippet></ROW><ROW><id>19465261</id><snippet>user</snippet></ROW><ROW><id>19465261</id><snippet>factory.post('main/views', {'name_change': 'some name'})`
</snippet></ROW><ROW><id>19465397</id><snippet>payload = {
    'inLeader':'',
    'inMember':'',
    'version':'0',
    'key':'2013:a:c:3:2s',
}
</snippet></ROW><ROW><id>19465397</id><snippet>value</snippet></ROW><ROW><id>19465397</id><snippet>name</snippet></ROW><ROW><id>19465397</id><snippet>submit</snippet></ROW><ROW><id>19465397</id><snippet>name</snippet></ROW><ROW><id>19465397</id><snippet>inLeader</snippet></ROW><ROW><id>19465397</id><snippet>inMember</snippet></ROW><ROW><id>19465397</id><snippet>requests</snippet></ROW><ROW><id>19465397</id><snippet>import requests
from requests.auth import HTTPBasicAuth
requests.get(url, auth=HTTPBasicAuth('your username', 'your password'))
</snippet></ROW><ROW><id>19465575</id><snippet>Net::HTTP</snippet></ROW><ROW><id>19465686</id><snippet>def fix(ch):
  if ch.isupper():
      return '^' + ch.lower()
  else:
      return ch;


string = "Hello World";
result = list("".join([fix(ch) for ch in string]))
print(result)
</snippet></ROW><ROW><id>19465686</id><snippet>['^', 'h', 'e', 'l', 'l', 'o', ' ', '^', 'w', 'o', 'r', 'l', 'd']
</snippet></ROW><ROW><id>19465686</id><snippet>string = "Hello World";
result = list("".join(['^' + ch.lower() if ch.isupper() else ch for ch in string]))
</snippet></ROW><ROW><id>19465686</id><snippet>list</snippet></ROW><ROW><id>19465686</id><snippet>join</snippet></ROW><ROW><id>19465686</id><snippet>fix = lambda ch: ['^', ch.lower()] if ch.isupper() else [ch]
result = [ r for ch in string for r in fix(ch)]
</snippet></ROW><ROW><id>19465686</id><snippet>result = [ r for ch in string for r in (['^', ch.lower()] if ch.isupper() else [ch])]
</snippet></ROW><ROW><id>19465823</id><snippet>wxPython-x.x.x.x-demo/samples/ide</snippet></ROW><ROW><id>19466020</id><snippet>&gt;&gt;&gt; s = """2. Name Bla B'd
... 32. da Bla 'B'
... 4 Name Bla 'B'
... 232 data' Name Name
... test Name Name"""
&gt;&gt;&gt; result = re.sub(r"^[ \d.]+", "", s, flags=re.MULTILINE)
&gt;&gt;&gt; print(result)
Name Bla B'd
da Bla 'B'
Name Bla 'B'
data' Name Name
test Name Name
</snippet></ROW><ROW><id>19466020</id><snippet>[ \d.]+</snippet></ROW><ROW><id>19466020</id><snippet>^</snippet></ROW><ROW><id>19466037</id><snippet>dict.items</snippet></ROW><ROW><id>19466037</id><snippet>dict()</snippet></ROW><ROW><id>19466037</id><snippet>dict()</snippet></ROW><ROW><id>19466037</id><snippet>update</snippet></ROW><ROW><id>19466037</id><snippet>&gt;&gt;&gt; d = {'a': 100, 'b': 200, 'c': 300, 'd': 350}
&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; dic.update(dict(sorted(d.items(), key=lambda x:x[1], reverse=True)[:2]))
&gt;&gt;&gt; dic
{'c': 300, 'd': 350}
</snippet></ROW><ROW><id>19466037</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>19466037</id><snippet>from operator import itemgetter
dic = {}
dic.update(dict(sorted(d.items(), key=itemgetter(1), reverse=True)[:2]))
</snippet></ROW><ROW><id>19466037</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>19466037</id><snippet>sorted</snippet></ROW><ROW><id>19466037</id><snippet>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; dic.update({k:d[k] for k in heapq.nlargest(2, d, key=d.get)})
&gt;&gt;&gt; dic
{'c': 300, 'd': 350}
</snippet></ROW><ROW><id>19466139</id><snippet>sed 's/\(.\{9\}\)/\1 /' file
</snippet></ROW><ROW><id>19466238</id><snippet>print list( '^'.join(mystring.lower()) )
</snippet></ROW><ROW><id>19466238</id><snippet>['a', '^', 'b', '^', 'c', '^', ...]
</snippet></ROW><ROW><id>19466238</id><snippet>l = list( '^'.join(mystring.lower()) )
l.insert(0, '^')
print l
</snippet></ROW><ROW><id>19466238</id><snippet>print [ y for x in zip(['^'] * len(mystring), mystring.lower()) for y in x ]
</snippet></ROW><ROW><id>19466238</id><snippet>['^', 'a', '^', 'b', '^', 'c', ...
</snippet></ROW><ROW><id>19466482</id><snippet>itertools</snippet></ROW><ROW><id>19466482</id><snippet>sum</snippet></ROW><ROW><id>19466482</id><snippet>&gt;&gt;&gt; lis = [[(1,2),1],[(5,2),3],[(4,0),2]]
&gt;&gt;&gt; sum(x[1] for x in lis)
6
</snippet></ROW><ROW><id>19466485</id><snippet>'\x81\xa7api_key\xd9 ad09739ac168ff2a199fb24eb4e24db8'  # Python's version
</snippet></ROW><ROW><id>19466485</id><snippet>'\x81\xa7api_key\xda\x00 ad09739ac168ff2a199fb24eb4e24db8'  # ObjC's version
</snippet></ROW><ROW><id>19466485</id><snippet>'\x81\xa7api_key\xbead09739ac168ff2a199fb24eb4e24d'     # both versions
</snippet></ROW><ROW><id>19466485</id><snippet>\x81</snippet></ROW><ROW><id>19466485</id><snippet>\xA7</snippet></ROW><ROW><id>19466485</id><snippet>api_key</snippet></ROW><ROW><id>19466485</id><snippet>\xd9</snippet></ROW><ROW><id>19466485</id><snippet>str8</snippet></ROW><ROW><id>19466485</id><snippet>\xd9</snippet></ROW><ROW><id>19466485</id><snippet>\x20</snippet></ROW><ROW><id>19466485</id><snippet>hex 20 == dec 32 == ASCII space</snippet></ROW><ROW><id>19466485</id><snippet>str8</snippet></ROW><ROW><id>19466485</id><snippet>\xda</snippet></ROW><ROW><id>19466485</id><snippet>str16</snippet></ROW><ROW><id>19466485</id><snippet>\x00\x20</snippet></ROW><ROW><id>19466485</id><snippet>hex 0020</snippet></ROW><ROW><id>19466485</id><snippet>dec 32</snippet></ROW><ROW><id>19466485</id><snippet>fixstr</snippet></ROW><ROW><id>19466485</id><snippet>101xxxxx</snippet></ROW><ROW><id>19466485</id><snippet>\xbe</snippet></ROW><ROW><id>19466485</id><snippet>bin 10111110</snippet></ROW><ROW><id>19466485</id><snippet>str8</snippet></ROW><ROW><id>19466485</id><snippet>str8</snippet></ROW><ROW><id>19466485</id><snippet>msgpack</snippet></ROW><ROW><id>19466485</id><snippet>msgpack-Python</snippet></ROW><ROW><id>19466485</id><snippet>str16</snippet></ROW><ROW><id>19466485</id><snippet>str8</snippet></ROW><ROW><id>19466582</id><snippet>subprocess</snippet></ROW><ROW><id>19466582</id><snippet>Popen</snippet></ROW><ROW><id>19466582</id><snippet>p = subprocess.Popen(["script2.py", "1"])
</snippet></ROW><ROW><id>19466582</id><snippet>p = subprocess.Popen(["python", "script2.py", "1"])
</snippet></ROW><ROW><id>19466624</id><snippet>r</snippet></ROW><ROW><id>19466624</id><snippet>i != a</snippet></ROW><ROW><id>19466624</id><snippet>True</snippet></ROW><ROW><id>19466624</id><snippet>def perm2(A, k):
    r = [[]]
    for i in range(k):
        r = [[a] + b for a in A for b in [i for i in r if a not in i]]
    return r
</snippet></ROW><ROW><id>19466624</id><snippet>def perm2(A, k):
    r = [[]]
    for i in range(k):
        r = [[a] + b for a in A for b in r if a not in b]
    return r
</snippet></ROW><ROW><id>19466754</id><snippet>countVar = tk.StringVar()
pos = text.search("1.0", "a red car", stopindex="end", count=countVar)
</snippet></ROW><ROW><id>19466754</id><snippet>pos</snippet></ROW><ROW><id>19466754</id><snippet>countVar</snippet></ROW><ROW><id>19466754</id><snippet>2.6+9c</snippet></ROW><ROW><id>19466754</id><snippet>text.tag_configure("search", background="green")</snippet></ROW><ROW><id>19466754</id><snippet>text.tag_add("search", pos, "%s + %sc" (pos, countVar.get()))
</snippet></ROW><ROW><id>19466808</id><snippet>from bs4 import BeautifulSoup

html = """
&lt;html lang="en-US" xml:lang="en-US" xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;title&gt;CATe - hj1612&lt;/title&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;&lt;img src="icons/arrowredright.gif"/&gt;&lt;/td&gt;&lt;td align="center"&gt;
&lt;input name="keyt" type="hidden" value="a3dvl"/&gt;
&lt;input type="submit" value="View"/&gt;&lt;br/&gt;or&lt;br/&gt;
&lt;input type="reset" value="Reset"/&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/html&gt;
"""

soup = BeautifulSoup(html)

print soup.find(name="input", attrs={'name': 'keyt'})
</snippet></ROW><ROW><id>19466808</id><snippet>&lt;input name="keyt" type="hidden" value="a3dvl"/&gt;
</snippet></ROW><ROW><id>19466808</id><snippet>find_all</snippet></ROW><ROW><id>19466808</id><snippet>find</snippet></ROW><ROW><id>19466808</id><snippet>name</snippet></ROW><ROW><id>19466808</id><snippet>attrs</snippet></ROW><ROW><id>19466808</id><snippet>name</snippet></ROW><ROW><id>19466951</id><snippet>if option.startswith('template'):
    hf = staticFile("static/{}/header".format(option))
    ...
</snippet></ROW><ROW><id>19467020</id><snippet>from kivy.uix.accordion import Accordion, AccordionItem
from kivy.uix.image import Image
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.lang import Builder
from kivy.properties import ObjectProperty, StringProperty
from kivy.uix.boxlayout import BoxLayout

Builder.load_string('''
&lt;MouseWidget&gt;:
    image: image
    label: label
    orientation: 'vertical'
    Image:
        id: image
        source: root.source
    Label:
        id: label
        size_hint_y: None
        height: 50
        text: 'no touch detected'

''')

class MouseWidget(BoxLayout):
    image = ObjectProperty()
    label = ObjectProperty()
    source = StringProperty()

    def on_touch_down(self, touch):
        if self.image.collide_point(*touch.pos):
            self.label.text = str(touch.pos)

    def on_touch_up(self, touch):
        self.label.text = 'no touch detected'


class MyApp(App):
    def build(self):
        root = Accordion(orientation='horizontal')

        item= AccordionItem(title='Picture1')
        src = "picture1.png"
        image = MouseWidget(source=src)
        # add image to AccordionItem
        item.add_widget(image)
        root.add_widget(item)


        item= AccordionItem(title='Picture2')
        src = "picture2.png"
        image = MouseWidget(source=src)
        # add image to AccordionItem
        item.add_widget(image)
        root.add_widget(item)

        return root

if __name__ == '__main__':
    MyApp().run()
</snippet></ROW><ROW><id>19467124</id><snippet>class Parent(object):
    ID = None

    @classmethod
    def getId(cls):
        return cls.ID

class Child(Parent):
    ID = "Child Class"

print Child.getId() # "Child Class"
</snippet></ROW><ROW><id>19467337</id><snippet>'checked':''</snippet></ROW><ROW><id>19467337</id><snippet>'checked':True</snippet></ROW><ROW><id>19467337</id><snippet>period = soup.find(name="input", attrs={'checked':True, 'name': 'period'})['value']
</snippet></ROW><ROW><id>19467445</id><snippet>app/__init__.py</snippet></ROW><ROW><id>19467445</id><snippet>from flask import Flask
app = Flask(__name__)
from app import index # &lt;-- See note below.
from flask.ext.mail import Mail
mail = Mail(app)
</snippet></ROW><ROW><id>19467445</id><snippet>index</snippet></ROW><ROW><id>19467445</id><snippet>app</snippet></ROW><ROW><id>19467445</id><snippet>app/index.py</snippet></ROW><ROW><id>19467445</id><snippet>from flask.ext.mail import Message
from app import app, mail # &lt;-- Error here
from flask import render_template
from config import ADMINS
from decorators import async
</snippet></ROW><ROW><id>19467445</id><snippet>Flask</snippet></ROW><ROW><id>19467445</id><snippet>app</snippet></ROW><ROW><id>19467445</id><snippet>app</snippet></ROW><ROW><id>19467445</id><snippet>mail</snippet></ROW><ROW><id>19467445</id><snippet>app.index</snippet></ROW><ROW><id>19467445</id><snippet>app</snippet></ROW><ROW><id>19467445</id><snippet>app</snippet></ROW><ROW><id>19467445</id><snippet>app.index</snippet></ROW><ROW><id>19467670</id><snippet>ax.axis('normal')</snippet></ROW><ROW><id>19467721</id><snippet>open.read()</snippet></ROW><ROW><id>19467721</id><snippet>open.read(1024)</snippet></ROW><ROW><id>19467721</id><snippet>app.update()</snippet></ROW><ROW><id>19467721</id><snippet>Tk()</snippet></ROW><ROW><id>19467721</id><snippet>read()</snippet></ROW><ROW><id>19467721</id><snippet>b""</snippet></ROW><ROW><id>19467953</id><snippet>self</snippet></ROW><ROW><id>19467953</id><snippet>init_animals</snippet></ROW><ROW><id>19467953</id><snippet>def init_animals(self, y):
    pass
</snippet></ROW><ROW><id>19467953</id><snippet>self</snippet></ROW><ROW><id>19467953</id><snippet>this</snippet></ROW><ROW><id>19467953</id><snippet>self</snippet></ROW><ROW><id>19468266</id><snippet>UpdateWeights()</snippet></ROW><ROW><id>19468266</id><snippet>UpdateWeights()</snippet></ROW><ROW><id>19468266</id><snippet>def UpdateWeights(self, eta, targetOutput, currentOutput,
                  valueX, valueY, valueBias):
    """Returns a new vector with updated weights."""
    bias = self.bias + (eta * (targetOutput - currentOutput) * valueBias)
    x = self.x + (eta * (targetOutput - currentOutput) * valueX)
    y = self.y + (eta * (targetOutput - currentOutput) * valueY)
    return Vector3D(bias, x, y)
</snippet></ROW><ROW><id>19468294</id><snippet>def main():
    config=ConfigParser.ConfigParser()
    config.readfp(open("settings.cfg"),"r")
    for site in config.sections():
        # ipdb.set_trace()
        settings=dict(config.items(site))
        with open('shoes.txt') as fp: &lt;--new code trying to add
            for category, url in csv.reader(fp):  &lt;--new code trying to add
                #ipdb.set_trace()
                #print url,category
                try:
                    ...
</snippet></ROW><ROW><id>19468326</id><snippet>logging.config.fileConfig()</snippet></ROW><ROW><id>19468326</id><snippet>disable_existing_loggers=False</snippet></ROW><ROW><id>19468326</id><snippet>True</snippet></ROW><ROW><id>19468326</id><snippet>disable_existing_loggers=False</snippet></ROW><ROW><id>19468326</id><snippet>fileConfig()</snippet></ROW><ROW><id>19468341</id><snippet>import pygame,time
from VideoCapture import Device
from pygame.locals import *
pygame.init()
pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=550)
cam = Device()
screen=pygame.display.set_mode((200,200))
pygame.display.set_caption('Casting...')
while True:
    for e in pygame.event.get():
        if e.type==QUIT:
            exit()
    try:
        time.sleep(4)
        cam.saveSnapshot('image.jpg')
    except:
        pass
</snippet></ROW><ROW><id>19468341</id><snippet>&lt;html&gt;
&lt;img src="image.jpg" alt="Live Cam" height="200" width="200"&gt;
&lt;meta http-equiv="refresh" content="3"&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19468527</id><snippet>from bs4 import BeautifulSoup

html = """
&lt;h3 id="me"&gt;&lt;/h3&gt;
&lt;li id="test1"&gt;&lt;/li&gt;
&lt;li custom="test2321"&gt;&lt;/li&gt;
&lt;li id="test1" class="tester"&gt;&lt;/li&gt;
&lt;ul class="here"&gt;&lt;/ul&gt;
"""

soup = BeautifulSoup(html)

# This tells BS to look at all the h3 tags, and find the ones that have an ID of me
# This however should not be done because IDs are supposed to be unique, so
# soup.find_all(id="me") should be used
one = soup.find_all("h3", {"id": "me"})
print one

# Same as above, if something has an ID, just use the ID
two = soup.find_all("li", {"id": "test1"})  # ids should be unique
print two

# Tells BS to look at all the li tags and find the node with a custom attribute
three = soup.find_all("li", {"custom": "test2321"})
print three

# Again ID, should have been enough
four = soup.find_all("li", {"id": "test1", "class": "tester"})
print four

# Look at ul tags, and find the one with a class attribute of "here"
four = soup.find_all("ul", {"class": "here"})
print four
</snippet></ROW><ROW><id>19468527</id><snippet>[&lt;h3 id="me"&gt;&lt;/h3&gt;]
[&lt;li id="test1"&gt;&lt;/li&gt;, &lt;li class="tester" id="test1"&gt;&lt;/li&gt;]
[&lt;li custom="test2321"&gt;&lt;/li&gt;]
[&lt;li class="tester" id="test1"&gt;&lt;/li&gt;]
[&lt;ul class="here"&gt;&lt;/ul&gt;]
</snippet></ROW><ROW><id>19468576</id><snippet>pulses = random_integers(0, 1000, 4.2e6)
nZones = 200
zones = [[] for i in range(nZones)]
</snippet></ROW><ROW><id>19468576</id><snippet>%%timeit
zone = 0
for idx,val in enumerate(pulses):
    if (idx + 1)%nZones == 0 and idx != 0:
        zones[zone].append(val)            
        zone = 0
    else:
        zones[zone].append(val)
        zone += 1
</snippet></ROW><ROW><id>19468576</id><snippet>%%timeit
zones = reshape(pulses, (len(pulses)/nZones, nZones)).T
</snippet></ROW><ROW><id>19468576</id><snippet>%%timeit
zones = reshape(pulses, (len(pulses)/nZones, nZones)).T.tolist()
</snippet></ROW><ROW><id>19468627</id><snippet>&gt;&gt;&gt; from word.models import db
&gt;&gt;&gt; db.Word.find()
</snippet></ROW><ROW><id>19468627</id><snippet>&gt;&gt;&gt; from core import db
</snippet></ROW><ROW><id>19468662</id><snippet>else</snippet></ROW><ROW><id>19468662</id><snippet># I kept the function in this example because it is used twice. In your example, it was only used once, which is why I recommended removing it.
def getChoice():
    return input("What do you want to convert? \n1.)USD &gt; UK \n2.)USD &gt; UK \n")
userChoice = getChoice()
while userChoice != "1" and userChoice != "2": # better yet, you could have a list of valid responses or even use a dictionary of response : callback
    userChoice = getChoice()
# Process input here
</snippet></ROW><ROW><id>19468926</id><snippet>infile</snippet></ROW><ROW><id>19468926</id><snippet>originFile = 'C:\***\***\***\\abc\%s' % infile
Image.open(originFile).save(newFile)
</snippet></ROW><ROW><id>19469058</id><snippet>File &gt; new &gt; other &gt; PyDev &gt; source folder</snippet></ROW><ROW><id>19469081</id><snippet>import time,os,win32api
from msvcrt import getch

def addToClipBoard(text):
    command = 'echo ' + text.strip() + '| clip'
    os.system(command)


def testpress(key):
    return (win32api.GetKeyState(key) &amp; (1 &lt;&lt; 7)) != 0

key = 17 #ctrl key
key2= ord('V')
copy=1

while True:
    keydown = testpress(key)
    key2down = testpress(key2)
    if keydown and key2down:
        print 'CtrlV pressed!'
        if copy==1:
          addToClipBoard('Foo')
        elif copy==2:
            addToClipBoard('Shoo')
        elif copy==3:
            addToClipBoard('THA END')
        if copy&gt;3:
            exit(1)
        copy+=1
    time.sleep(0.10)
</snippet></ROW><ROW><id>19469097</id><snippet>python -tt</snippet></ROW><ROW><id>19469121</id><snippet>def countLetter(n):
p=['','One','Two','Three','Four','Five','Six','Seven','Eight','Nine']
q=['','Ten','Twenty','Thirty','Forty','Fifty','Sixty','Seventy','Eighty','Ninety']
r=['','Eleven','Twelve','Thirteen','Fourteen','Fifteen','Sixteen','Seventeen','Eighteen','Nineteen']

c=str(n)
l=len(c)
a=""

if l==1:
    a+=p[int(c[0])]
elif l==2:
    if c[1]=='0':
        a+=q[int(c[0])]
    elif c[0]=='1':
        a+=r[int(c[1])]
    else:
        a+=q[int(c[0])]+p[int(c[1])]
elif n==100:
    a+="OneHundred"
elif l==3:
    a+=p[int(c[0])]+"Hundred"
    if c[1]=='0' and c[2]=='0':
        a+=""
    elif c[2]=='0' and c[1]!='0':
        a+="And"+q[int(c[1])]
    elif c[1]=='1':
        a+="And"+r[int(c[2])]
    else:
        a+="And"+q[int(c[1])]+p[int(c[2])]
else:
    a+="OneThousand"

#print a,len(a)
return len(a)

def main():
    sum=0
    for i in range(1,1001):
        sum+=countLetter(i)
    print sum

main()
</snippet></ROW><ROW><id>19469162</id><snippet>def highestNumber(l):
    myMax = l[0]
    for num in l:
        if myMax &lt; num:
            myMax = num
    return myMax


print highestNumber ([77,48,19,17,93,90])
</snippet></ROW><ROW><id>19469162</id><snippet>93
</snippet></ROW><ROW><id>19469162</id><snippet>def highestNumber(l):
    return sorted(l)[-1]
</snippet></ROW><ROW><id>19469162</id><snippet>def highestNumber(l):
    l.sort()
    return l[-1]
</snippet></ROW><ROW><id>19469337</id><snippet>Subject:</snippet></ROW><ROW><id>19469337</id><snippet>header = 'To: %s\nFrom: %s\nSubject: %s\n\n' % (to, m_login, cid)
</snippet></ROW><ROW><id>19469637</id><snippet>http://</snippet></ROW><ROW><id>19469637</id><snippet>;</snippet></ROW><ROW><id>19469637</id><snippet>from re import findall

mystr = """
17:25:31;http://example1.com/viewtopic.php?f=8&amp;t=189;example1.com;127.0.0.1 2013-10-19
17:22:32;http://example2.com;example2.com;127.0.0.1 2013-10-19 
20:18:28;http://example3.com/threads/example-text-in-url.27304/;example3.com;127.0.0.1  2013-10-19
"""

print findall("(http://.+?);", mystr)
</snippet></ROW><ROW><id>19469637</id><snippet>['http://example1.com/viewtopic.php?f=8&amp;t=189', 'http://example2.com', 'http://example3.com/threads/example-text-in-url.27304/']
</snippet></ROW><ROW><id>19469688</id><snippet>absences = {'John': 1, 'Jack': 30, 'James': 0, 'Javier': 0, 'Jessica': 3, ...}
</snippet></ROW><ROW><id>19469725</id><snippet>return rho, c, k, d, layers
</snippet></ROW><ROW><id>19469725</id><snippet>rho, c, k, d, layers = material()
print d[1]
</snippet></ROW><ROW><id>19469725</id><snippet>dict</snippet></ROW><ROW><id>19469725</id><snippet>namedtuple</snippet></ROW><ROW><id>19469785</id><snippet>myvariable = [['test', 'xxxx', 'DDDt', 'EEEst', '2323t', 'test', 'test', 'test'], 
              ['test', 'xxxx', 'DDDt', 'EEEst', '2323t', 'test', 'test', 'test'], 
              ['test', 'X1', 'DDDt', 'EEEst', '2323t', 'test', 'test', 'test']
             ]

seen=set()
print [li for li in myvariable 
         if tuple(li[:2]) not in seen and not seen.add(tuple(li[:2]))]
</snippet></ROW><ROW><id>19469785</id><snippet>[['test', 'xxxx', 'DDDt', 'EEEst', '2323t', 'test', 'test', 'test'], 
 ['test', 'X1', 'DDDt', 'EEEst', '2323t', 'test', 'test', 'test']]
</snippet></ROW><ROW><id>19469785</id><snippet>&gt;&gt;&gt; lis=[[1,2,1],
...      [3,4,1],
...      [1,2,2],
...      [3,4,2]]
&gt;&gt;&gt; seen=set()
&gt;&gt;&gt; [li for li in lis if tuple(li[:2]) not in seen and not seen.add(tuple(li[:2]))]
[[1, 2, 1], [3, 4, 1]]
</snippet></ROW><ROW><id>19469785</id><snippet>from collections import OrderedDict  

lis=[[1,2,1],
     [3,4,1],
     [1,2,2],
     [3,4,2]]

def f1(lis):
    seen=set()
    return [li for li in lis 
             if tuple(li[:2]) not in seen and not seen.add(tuple(li[:2]))]       

def f2(lis):
    dic = OrderedDict()
    for item in lis:
        key = tuple(item[:2])
        if key not in dic:
            dic[key] = item

    return dic.values()

if __name__ == '__main__':
    import timeit            
    print 'f1, LC+set:',timeit.timeit("f1(lis)", setup="from __main__ import f1,lis"),'secs'
    print 'f2, OrderedDic:',timeit.timeit("f2(lis)", setup="from __main__ import f2,lis,OrderedDict"),'secs'
</snippet></ROW><ROW><id>19469785</id><snippet>f1, LC+set: 2.81167197227 secs
f2, OrderedDic: 16.4299631119 secs
</snippet></ROW><ROW><id>19469880</id><snippet>np.linalg.eigvals</snippet></ROW><ROW><id>19469880</id><snippet>(n_subarrays, nrows, ncols)</snippet></ROW><ROW><id>19469880</id><snippet>eigvals</snippet></ROW><ROW><id>19469880</id><snippet>import numpy as np

A = np.array([[0, 1, 0],
              [0, 2, 0],
              [0, 0, 3]])

# the input needs to be an array, since matrices can only be 2D.
B = np.repeat(A[np.newaxis,...], 4, 0)

# for arbitrary input arrays you could do something like:
# B = np.vstack(a[np.newaxis,...] for a in input_arrays)
# but for this to work it will be necessary for each element in 
# 'input_arrays' to have the same shape

# eigvals will operate over the last two dimensions of the array and return
# a (4, 3) array of eigenvalues
C = np.linalg.eigvals(B)

# reshape this output so that it matches your original example
C.shape = (2, 2, 3)
</snippet></ROW><ROW><id>19469880</id><snippet>input_arrays[0].shape == (2, 2)</snippet></ROW><ROW><id>19469880</id><snippet>input_arrays[1].shape == (3, 3)</snippet></ROW><ROW><id>19470135</id><snippet>from testapp.forms import UsersForm
url(r'^$', 'django.contrib.auth.views.login', {'template_name': 'testapp/templates/login.html', 'authentication_form':UsersForm}),
</snippet></ROW><ROW><id>19470202</id><snippet>tmp = something.action
something.action = apply(something.action) 
</snippet></ROW><ROW><id>19470202</id><snippet>something.action = tmp
</snippet></ROW><ROW><id>19470202</id><snippet>class mytest:
    def action(self):
        print 'Original'

a = mytest()
a.action()

tmp = a.action

def apply(f):
    print 'Not the ',
    return f

a.action = apply(a.action)
a.action()

a.action = tmp
a.action()
</snippet></ROW><ROW><id>19470202</id><snippet>$ python test.py
Original
Not the  Original
Original
</snippet></ROW><ROW><id>19470377</id><snippet>from wand.image import Image as WImage
img = WImage(filename='hat.pdf')
img
</snippet></ROW><ROW><id>19470377</id><snippet>img = WImage(filename='hat.pdf[1]')
</snippet></ROW><ROW><id>19470387</id><snippet>preg_match</snippet></ROW><ROW><id>19470387</id><snippet>PREG_OFFSET_CAPTURE</snippet></ROW><ROW><id>19470387</id><snippet>subject</snippet></ROW><ROW><id>19470387</id><snippet>pattern</snippet></ROW><ROW><id>19470402</id><snippet>obj_create</snippet></ROW><ROW><id>19470402</id><snippet>obj_create</snippet></ROW><ROW><id>19470402</id><snippet>self.save(bundle)</snippet></ROW><ROW><id>19470402</id><snippet>is_valid</snippet></ROW><ROW><id>19470402</id><snippet>obj_create</snippet></ROW><ROW><id>19470402</id><snippet>def obj_create(self, bundle, **kwargs):
    bundle.obj = CompanyUser()
    bundle = self.full_hydrate(bundle)
    bundle.obj.password = bundle.data['company']
    return self.save(bundle)
</snippet></ROW><ROW><id>19470402</id><snippet>ModelResource</snippet></ROW><ROW><id>19470402</id><snippet>full_hydrate</snippet></ROW><ROW><id>19470402</id><snippet>bundle.obj</snippet></ROW><ROW><id>19470402</id><snippet>self.save(bundle)</snippet></ROW><ROW><id>19470402</id><snippet>CompanyUser.objects.create_user()</snippet></ROW><ROW><id>19470402</id><snippet>def obj_create(self, bundle, request=None, **kwargs):
    bundle.obj = CompanyUser.objects.create_user(email=bundle.data['email'],
                                                 company=bundle.data['company'],
                                                 password=bundle.data['company'])
    self.is_valid(bundle)
    if bundle.errors:
        raise ImmediateHttpResponse(response=self.error_response(bundle.request, bundle.errors))
    return bundle
</snippet></ROW><ROW><id>19470476</id><snippet>tuple(tuple(x + y for x, y in zip(tup_a, tup_b)) for tup_a, tup_b in zip(a, b))
</snippet></ROW><ROW><id>19470476</id><snippet>&gt;&gt;&gt; a = ((1,2),(3,4),(5,6))
&gt;&gt;&gt; b = ((2,4),(6,8),(10,12))
&gt;&gt;&gt; tuple(tuple(x + y for x, y in zip(tup_a, tup_b)) for tup_a, tup_b in zip(a, b))
((3, 6), (9, 12), (15, 18))
</snippet></ROW><ROW><id>19470614</id><snippet>from allauth.socialaccount.models import SocialAccount

class YourSocialAuth(SocialAccount):
    def get_foo(self):
        ...
        return foo

    class Meta:
        proxy = True
</snippet></ROW><ROW><id>19470614</id><snippet>social_acc = YourSocialAccount.objects.get(
    ...
)

foo = social_acc.get_foo()
</snippet></ROW><ROW><id>19470623</id><snippet>def textiterator(xinput):
    counter = 0
    transformedtext = ''
    textfromfile = ''
    textfile = open('youroriginaltextfile.txt', 'r')

    for eachline in textfile:
            textfromfile = textfromfile + eachline

    while counter &lt;= len(textfromfile):

        if counter not equal to % of xinput: ##modulus operator needs to be added for multiple of xinput
            transformedtext = transformedtext + textfromfile[counter]
            counter = counter + 1

        else:
            transformedtext = transformedtext + '\n'


    return transformedtext
</snippet></ROW><ROW><id>19470691</id><snippet>+</snippet></ROW><ROW><id>19470691</id><snippet>""</snippet></ROW><ROW><id>19470691</id><snippet>,</snippet></ROW><ROW><id>19470691</id><snippet>print str(now.month) + "/" + 
      str(now.day) + "/" + 
      str(now.year) + " " +
      str(now.hour) + ":" + 
      str(now.minute) + ":" + 
      str(now.second)
</snippet></ROW><ROW><id>19470773</id><snippet>    &lt;snip&gt;  
    Pxx, freqs, bins = mlab.specgram(x, NFFT, Fs, detrend,
         window, noverlap, pad_to, sides, scale_by_freq)

    Z = 10. * np.log10(Pxx)
    Z = np.flipud(Z)

    if xextent is None: xextent = 0, np.amax(bins)
    xmin, xmax = xextent
    freqs += Fc
    extent = xmin, xmax, freqs[0], freqs[-1]
    im = self.imshow(Z, cmap, extent=extent, **kwargs)
    self.axis('auto')

    return Pxx, freqs, bins, im
</snippet></ROW><ROW><id>19470773</id><snippet>    Pxx, freqs, bins = mlab.specgram(x, NFFT, Fs, detrend,
         window, noverlap, pad_to, sides, scale_by_freq)
    # ****************
    # create a new limited Pxx and freqs
    # 
    # ****************
    Z = 10. * np.log10(Pxx)
    Z = np.flipud(Z)
</snippet></ROW><ROW><id>19470773</id><snippet>&gt;&gt;&gt; Pxx.shape
(129, 311)
&gt;&gt;&gt; freqs.shape
(129,)
&gt;&gt;&gt; bins.shape
(311,)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19470773</id><snippet>Pxx = Pxx[(freqs &gt;= 125) &amp; (freqs &lt;= 1000)]
freqs = freqs[(freqs &gt;= 125) &amp; (freqs &lt;= 1000)]
</snippet></ROW><ROW><id>19470773</id><snippet>from pylab import *
from matplotlib import *


# 100, 400 and 200 Hz sine 'wave'
dt = 0.0005
t = arange(0.0, 20.0, dt)
s1 = sin(2*pi*100*t)
s2 = 2*sin(2*pi*400*t)
s3 = 2*sin(2*pi*200*t)

# create a transient "chirp"
mask = where(logical_and(t&gt;10, t&lt;12), 1.0, 0.0)
s2 = s2 * mask

# add some noise into the mix
nse = 0.01*randn(len(t))

x = s1 + s2 + +s3 + nse # the signal
NFFT = 1024       # the length of the windowing segments
Fs = int(1.0/dt)  # the sampling frequency

# modified specgram()
def my_specgram(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
             window=mlab.window_hanning, noverlap=128,
             cmap=None, xextent=None, pad_to=None, sides='default',
             scale_by_freq=None, minfreq = None, maxfreq = None, **kwargs):
    """
    call signature::

      specgram(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
               window=mlab.window_hanning, noverlap=128,
               cmap=None, xextent=None, pad_to=None, sides='default',
               scale_by_freq=None, minfreq = None, maxfreq = None, **kwargs)

    Compute a spectrogram of data in *x*.  Data are split into
    *NFFT* length segments and the PSD of each section is
    computed.  The windowing function *window* is applied to each
    segment, and the amount of overlap of each segment is
    specified with *noverlap*.

    %(PSD)s

      *Fc*: integer
        The center frequency of *x* (defaults to 0), which offsets
        the y extents of the plot to reflect the frequency range used
        when a signal is acquired and then filtered and downsampled to
        baseband.

      *cmap*:
        A :class:`matplotlib.cm.Colormap` instance; if *None* use
        default determined by rc

      *xextent*:
        The image extent along the x-axis. xextent = (xmin,xmax)
        The default is (0,max(bins)), where bins is the return
        value from :func:`mlab.specgram`

      *minfreq, maxfreq*
        Limits y-axis. Both required

      *kwargs*:

        Additional kwargs are passed on to imshow which makes the
        specgram image

      Return value is (*Pxx*, *freqs*, *bins*, *im*):

      - *bins* are the time points the spectrogram is calculated over
      - *freqs* is an array of frequencies
      - *Pxx* is a len(times) x len(freqs) array of power
      - *im* is a :class:`matplotlib.image.AxesImage` instance

    Note: If *x* is real (i.e. non-complex), only the positive
    spectrum is shown.  If *x* is complex, both positive and
    negative parts of the spectrum are shown.  This can be
    overridden using the *sides* keyword argument.

    **Example:**

    .. plot:: mpl_examples/pylab_examples/specgram_demo.py

    """

    #####################################
    # modified  axes.specgram() to limit
    # the frequencies plotted
    #####################################

    # this will fail if there isn't a current axis in the global scope
    ax = gca()
    Pxx, freqs, bins = mlab.specgram(x, NFFT, Fs, detrend,
         window, noverlap, pad_to, sides, scale_by_freq)

    # modified here
    #####################################
    if minfreq is not None and maxfreq is not None:
        Pxx = Pxx[(freqs &gt;= minfreq) &amp; (freqs &lt;= maxfreq)]
        freqs = freqs[(freqs &gt;= minfreq) &amp; (freqs &lt;= maxfreq)]
    #####################################

    Z = 10. * np.log10(Pxx)
    Z = np.flipud(Z)

    if xextent is None: xextent = 0, np.amax(bins)
    xmin, xmax = xextent
    freqs += Fc
    extent = xmin, xmax, freqs[0], freqs[-1]
    im = ax.imshow(Z, cmap, extent=extent, **kwargs)
    ax.axis('auto')

    return Pxx, freqs, bins, im

# plot
ax1 = subplot(211)
plot(t, x)
subplot(212, sharex=ax1)

# the minfreq and maxfreq args will limit the frequencies 
Pxx, freqs, bins, im = my_specgram(x, NFFT=NFFT, Fs=Fs, noverlap=900, 
                                cmap=cm.Accent, minfreq = 180, maxfreq = 220)
show()
close()
</snippet></ROW><ROW><id>19470788</id><snippet>.post {
    background: none no-repeat center center fixed;
}

@media only screen and (max-device-width: 480px) {
    .post {
      background-image: url("{{ get_image_url(post, 480) }}"); 
    }
}

@media only screen and (max-device-width: 1224px) {
    .post {
      background-image: url("{{ get_image_url(post, 1224) }}"); 
    }
}
</snippet></ROW><ROW><id>19470788</id><snippet>/posts/&lt;int:post_id&gt;/background?s=NNNN
</snippet></ROW><ROW><id>19470788</id><snippet># Fake server configuration
# for no server known to man
location /posts/(:post-id:\d+)/background {
    try_files /cache/:post-id:_\d+\.png or @flask-server  
}
</snippet></ROW><ROW><id>19470788</id><snippet>@app.route("/posts/&lt;int:post_id&gt;/background")
def generate_image(post_id):
    # Assume that if we got here the image does not yet exist
    dimensions = int(request.args.get("s", 800), 10)

    image_data = generate_image(post_id, dimensions)

    image_name = "{}_{}.png".format(post_id, dimensions)
    image_path = os.path.join("/cache", image_name)

    with open(image_path, "wb") as image:
        image.write(image_data)

    return Response(image_data, content_type="image/png")
</snippet></ROW><ROW><id>19470939</id><snippet>from sympy.interactive import printing
printing.init_printing(use_latex=True)
</snippet></ROW><ROW><id>19470954</id><snippet>g</snippet></ROW><ROW><id>19470954</id><snippet>g</snippet></ROW><ROW><id>19470954</id><snippet>g</snippet></ROW><ROW><id>19470954</id><snippet>g</snippet></ROW><ROW><id>19470954</id><snippet>g</snippet></ROW><ROW><id>19471017</id><snippet>import numpy as np
from math import *
from pylab import *
from matplotlib import pyplot as plt
from matplotlib import animation

# Constants
isqrt = 2**(-0.5)
omega = np.sqrt(2-np.sqrt(2))   #Angular velocity
L=4                             #Length of the system

n = 1                         #Normal mode number  
if n==1:
    z = [isqrt,1,isqrt]             #mode 1
elif n==2:
    z = [1,0,-1]                   #mode 2
elif n==3:
    z = [isqrt,-1,isqrt]           #mode 3

ex = [1,2,3]                    #x-coordinates of scatter points

# First set up the figure, the axis, and the plot element we want to animate
fig = plt.figure()
ax = plt.axes(xlim=(0, L), ylim=(-1.1, 1.1))

line, = ax.plot([], [], lw=2, color='b')
scat, = ax.plot([],[], linestyle='', marker='o', color='b')
# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    scat.set_data([], [])
    return [scat,line,]

# animation function.  This is called sequentially
def animate(t):
    xinterval = np.arange(0,10,0.05)
    wave = np.cos(0.1*omega*t)*np.sin(n*xinterval*np.pi/L)
    line.set_data(xinterval, wave)
    dots = z*real(np.exp(0+(omega*0.1*t)*1j))

    scat.set_data(ex, dots)
    return [scat,line,]

# call the animator. 
anim = animation.FuncAnimation(fig, animate,init_func=init, frames=range(200), interval=20,     blit=True)
plt.grid(True)
plt.show()
</snippet></ROW><ROW><id>19471017</id><snippet>scatter</snippet></ROW><ROW><id>19471017</id><snippet>scatter</snippet></ROW><ROW><id>19471103</id><snippet>profile.native_events_enabled = False
</snippet></ROW><ROW><id>19471103</id><snippet>profile.set_preference('webdriver_enable_native_events', False)
</snippet></ROW><ROW><id>19471103</id><snippet>from selenium import webdriver

profile = webdriver.FirefoxProfile()
profile.native_events_enabled = False
driver = webdriver.Firefox(profile)
# synthesized events are now enabled for this 
# driver instance... native events are disabled.
...
</snippet></ROW><ROW><id>19471168</id><snippet>for word in wordlist1:
   if word.lower() not in filterlist:
        words.append(word)
</snippet></ROW><ROW><id>19471168</id><snippet>wordlist1</snippet></ROW><ROW><id>19471168</id><snippet>for word in wordlist1:
    if word in filterlist:
        wordlist1.append("")
</snippet></ROW><ROW><id>19471168</id><snippet>wordlist1 = [word for word in wordslist1 if word not in filterlist]
</snippet></ROW><ROW><id>19471172</id><snippet>from sqlalchemy.ext.orderinglist import ordering_list

# Photo and PhotoInSet stay the same...

class PhotoSet(Base):
    __tablename__ = 'photo_set'
    id = Column(Integer, primary_key=True)
    name = Column(String(256))
    description = Column(Text)
    photo_id = Column(Integer, ForeignKey('photos.id'))
    photos = relationship('PhotoInSet',
       order_by="PhotoInSet.position",
       collection_class=ordering_list('position'),
       backref=backref('set', lazy='select'))

# Sample usage...
session = Session()

# Create two photos, add them to the set...
p_set = PhotoSet(name=u'TestSet')

p = Photo(title=u'Test')
p2 = Photo(title='uTest2')

p_set.photos.append(PhotoInSet(photo=p))
p_set.photos.append(PhotoInSet(photo=p2))
session.add(p_set)

session.commit()
print 'Original list of titles...'
print [x.photo.title for x in p_set.photos]
print ''

# Change the order...
p_set.photos.reverse()
# Any time you change the order of the list in a way that the existing
# items are in a different place, you need to call "reorder". It will not
# automatically try change the position value for you unless you are appending
# an object with a null position value.
p_set.photos.reorder()    
session.commit()

p_set = session.query(PhotoSet).first()
print 'List after reordering...'
print [x.photo.title for x in p_set.photos]
</snippet></ROW><ROW><id>19471172</id><snippet>Original list of titles...
[u'Test', u'uTest2']

List after reordering...
[u'uTest2', u'Test']
</snippet></ROW><ROW><id>19471177</id><snippet># if python 2.x
#from itertools import tee, izip
# if python 3
from itertols import tee
# http://docs.python.org/2/library/itertools.html#recipes
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    # if python 2.x
    #return izip(a, b)
    return zip(a, b)

new_data = []
with open('temp100.txt', 'r') as sqFile:
    for sLine, edit_line  in pairwise(seqFile):
        # I think this is just new_line = tempLine
        #tempLine = edit_line[:20]
        #new_line = editLine.replace(editLine, tempLine)
        new_data.append(sLine + editLine[:20])
        if len(sLine) &gt; 20:
            new_data.append('\n')



with open("new_temp100.txt", "w") as new:
    new.write(''.join(new_data))
</snippet></ROW><ROW><id>19471177</id><snippet># if python 2.x
#from itertools import tee, izip
# if python 3
from itertols import tee
# http://docs.python.org/2/library/itertools.html#recipes
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    # if python 2.x
    #return izip(a, b)
    return zip(a, b)

new_data = []
with open('temp100.txt', 'r') as sqFile:
    with open("new_temp100.txt", "w") as new:
        for sLine, edit_line  in pairwise(seqFile):
            tmp_str = sLine + editLine[:20]
            if len(sLine) &gt; 20:
                tmp_str = tmp_str + '/n'
            new.write(tmp_str)
</snippet></ROW><ROW><id>19471207</id><snippet>doagain</snippet></ROW><ROW><id>19471207</id><snippet>while</snippet></ROW><ROW><id>19471207</id><snippet>def repeat_stuff():
    while True: # keep looping until told otherwise

        # do the actual stuff you want to do here, e.g. converting currencies
        do_stuff_once()

        while True: # ask about doing it again until we understand the answer
            userDoAgain = input("Would you like to use again? (Yes/No)\n")
            if userDoAgain.lower() == "yes":
                break               # go back to the outer loop
            elif userDoAgain.lower() == "no":
                print("Thank you for using this program")
                return              # exit the function
            else:
                print("Error: You entered invalid information.")
</snippet></ROW><ROW><id>19471207</id><snippet>yes</snippet></ROW><ROW><id>19471207</id><snippet>no</snippet></ROW><ROW><id>19471351</id><snippet>(array length=buflen)</snippet></ROW><ROW><id>19471351</id><snippet>buflen</snippet></ROW><ROW><id>19471351</id><snippet>gpointer</snippet></ROW><ROW><id>19471456</id><snippet>self.panel.SetMinSize((800,600))
</snippet></ROW><ROW><id>19471603</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.legend_handler

from matplotlib.container import ErrorbarContainer

class re_order_errorbarHandler(matplotlib.legend_handler.HandlerErrorbar):
    """
    Sub-class the standard error-bar handler 
    """
    def create_artists(self, *args, **kwargs):
        #  call the parent class function
        a_list = matplotlib.legend_handler.HandlerErrorbar.create_artists(self, *args, **kwargs)
        # re-order the artist list, only the first artist is added to the
        # legend artist list, this is the one that corresponds to the markers
        a_list = a_list[-1:] + a_list[:-1]
        return a_list

my_handler_map = {ErrorbarContainer: re_order_errorbarHandler(numpoints=2)}

fig, ax = plt.subplots()
x = np.linspace(0,10,100)
y = np.sin(x) + np.random.rand(100)
yerr = np.random.rand(100)

erbpl1 = ax.errorbar(x, y, yerr=yerr, fmt='o', label='A')
erbpl2 = ax.errorbar(x, 0.02*y, yerr=yerr, fmt='o', label='B')

leg = ax.legend(handler_map=my_handler_map)

lines = [erbpl1, erbpl2]
lined = dict()
# not strictly sure about ordering, but 
for legline, origline in zip(leg.legendHandles, lines):
    legline.set_picker(5)  # 5 pts tolerance
    lined[legline] = origline


def onpick(event):
    # on the pick event, find the orig line corresponding to the
    # legend proxy line, and toggle the visibility
    legline = event.artist
    origline = lined[legline]
    for a in origline.get_children():
        vis = not a.get_visible()
        a.set_visible(vis)
    # Change the alpha on the line in the legend so we can see what lines
    # have been toggled
    if vis:
        legline.set_alpha(1.0)
    else:
        legline.set_alpha(0.2)
    fig.canvas.draw()

fig.canvas.mpl_connect('pick_event', onpick)
</snippet></ROW><ROW><id>19471603</id><snippet>ErrorbarContainers</snippet></ROW><ROW><id>19471603</id><snippet>LineCollection</snippet></ROW><ROW><id>19471603</id><snippet>LineCollection</snippet></ROW><ROW><id>19471603</id><snippet>Line2D</snippet></ROW><ROW><id>19471603</id><snippet>Line2D</snippet></ROW><ROW><id>19471603</id><snippet>matplotlib.legend_handler.HandlerBase.__call__</snippet></ROW><ROW><id>19471603</id><snippet>leg.legendHandles</snippet></ROW><ROW><id>19471603</id><snippet>HandlerErrorbar</snippet></ROW><ROW><id>19471603</id><snippet>leg.legendHandles</snippet></ROW><ROW><id>19471603</id><snippet>Line2D</snippet></ROW><ROW><id>19471897</id><snippet>\r</snippet></ROW><ROW><id>19471897</id><snippet>\n</snippet></ROW><ROW><id>19471897</id><snippet>\r</snippet></ROW><ROW><id>19471897</id><snippet>\n</snippet></ROW><ROW><id>19471897</id><snippet>\r</snippet></ROW><ROW><id>19472082</id><snippet>virtualenv</snippet></ROW><ROW><id>19472082</id><snippet>virtualenv</snippet></ROW><ROW><id>19472082</id><snippet>sudo</snippet></ROW><ROW><id>19472082</id><snippet>sudo</snippet></ROW><ROW><id>19472082</id><snippet>virtualenv</snippet></ROW><ROW><id>19472082</id><snippet>virtualenv</snippet></ROW><ROW><id>19472082</id><snippet>sudo</snippet></ROW><ROW><id>19472082</id><snippet>sudo</snippet></ROW><ROW><id>19472112</id><snippet>manage.py runserver</snippet></ROW><ROW><id>19472112</id><snippet>manage.py runserver 0.0.0.0
</snippet></ROW><ROW><id>19472295</id><snippet>from ast import literal_eval
lines = []
with open(infile_path, 'r') as infile:
    for line in infile:
        line = literal_eval(line)
        lines.append(line)
</snippet></ROW><ROW><id>19472295</id><snippet>lines</snippet></ROW><ROW><id>19472295</id><snippet>literal_eval</snippet></ROW><ROW><id>19472295</id><snippet>lines.sort(key = lambda x: x[3])
</snippet></ROW><ROW><id>19472295</id><snippet>with open(outfile_path, 'w') as outfile:
    for line in lines[-10:]:
        print(line, file=outfile)
</snippet></ROW><ROW><id>19472304</id><snippet>if</snippet></ROW><ROW><id>19472304</id><snippet>isIt = Is_Programmer()
if isIt == False:
    print "Is not a programmer"
else:
    print isIt, "is the point"
</snippet></ROW><ROW><id>19472344</id><snippet>board = player[9]
</snippet></ROW><ROW><id>19472344</id><snippet>board[pos] = player[0]
</snippet></ROW><ROW><id>19472344</id><snippet>board[6] in playerSym  # and not board[6] == playerSym 
</snippet></ROW><ROW><id>19472344</id><snippet>#Winner checker.

def check_done(playerSym,board):
    return ((board[6] in playerSym and board[7] in playerSym and board[8] in playerSym) or # across the top
    (board[3] in playerSym and board[4] in playerSym and board[5] in playerSym) or # across the middle
    (board[0] in playerSym and board[1] in playerSym and board[2] in playerSym) or # across the bottom
    (board[6] in playerSym and board[3] in playerSym and board[0] in playerSym) or # down the left side
    (board[7] in playerSym and board[4] in playerSym and board[3] in playerSym) or # down the middle
    (board[8] in playerSym and board[5] in playerSym and board[2] in playerSym) or # down the right side
    (board[6] in playerSym and board[4] in playerSym and board[2] in playerSym) or # diagonal
    (board[8] in playerSym and board[4] in playerSym and board[0] in playerSym)) # diagonal


# Sets up the Board

def drawBoard(board):
    print('   |   |')
    print(' ' + board[6] + ' | ' + board[7] + ' | ' + board[8])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[5] + ' | ' + board[4] + ' | ' + board[3])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[0] + ' | ' + board[1] + ' | ' + board[2])
    print('   |   |')

#Verifies if board is not full with all largest signs and no mpre moves are possible.
def movesPossible(board):
    #TODO: implement this
    return True

#Prints the current board

def print_board(board):
    # Make a duplicate of the board list and return it the duplicate.
    dupeBoard = []
    for i in board:
        dupeBoard.append(i)
    return dupeBoard

#The Board

board = ["0", "1", "2", "3", "4", "5", "6", "7", "8"]

done = False

#The Move list for X's and O's

xmovesList = ["*","x","X"]
omovesList = [".","o","O"]

#Greeting message and choosing the initial X and O assignment.
print "Welcome to Tic-Tac-Toe-Cover-Up!"
playerSym = raw_input("Player 1, please select either X or O for your pieces: ")
print

#Player and opponent move assignment
if (playerSym == "X"):
    player = xmovesList
    opponent = omovesList
else:
    player = omovesList
    opponent = xmovesList

drawBoard(board)

#Main game loop.
while movesPossible(board):
    print player[2],"'s turn"
    print "Select the place you want to play (0-8)"
    print_board(board)
    moved = False
    pos = input("Select: ")
    if pos &lt;=8 and pos &gt;=0:
        Y = pos/3
        X = pos%3
        if X != -1:
            X -=1
        else:
            X = 2
            Y -=1

        if board[pos] == str(pos):
            board[pos] = player[0]
            moved = True
            done = check_done(player,board)
        else :
            if board[pos] == opponent[0]:
                board[pos] = player[1]
                moved = True
                done = check_done(player,board)
            if board[pos] == opponent[1]:
                board[pos] = player[2]
                moved = True
                done = check_done(player,board)
    drawBoard(board)
    if done:
        break;
    if moved :
        player,opponent = opponent,player

if(done):
    print player[2], "wins "
else:
    print "No more moves possible. It's a draw."
</snippet></ROW><ROW><id>19472346</id><snippet>dnsserv=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
dnsserv.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
dnsserv.bind(("0.0.0.0",53))
</snippet></ROW><ROW><id>19472346</id><snippet>data, address = recvfrom(...)</snippet></ROW><ROW><id>19472427</id><snippet># -*- coding: utf-8 -*-

a = '؏' # It's just some arabic character I googled for, definitely not ascii
b = u'؏' 

print type(a)
&gt;&gt;&gt; &lt;type 'str'&gt;
print type(b)
&gt;&gt;&gt; &lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>19472427</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>19472427</id><snippet>import json

a = json.loads(u'{"ticker": "GOOG"}')

print a
&gt;&gt;&gt; "{u'ticker': u'GOOG'}"
print json.dumps(a)
&gt;&gt;&gt; {"ticker": "GOOG"}
</snippet></ROW><ROW><id>19472632</id><snippet>bpy.data.objects['OBJECT'].select = True
</snippet></ROW><ROW><id>19472632</id><snippet>object = bpy.data.objects['OBJECT']
object.select = True
</snippet></ROW><ROW><id>19472667</id><snippet>JPG</snippet></ROW><ROW><id>19472667</id><snippet>TXT</snippet></ROW><ROW><id>19472667</id><snippet>import os
from scipy.misc import imread
import numpy as np

imagePath = 'c:/your jpgs/'
savepath = imagePath

#save as text no decompressing
for filename in os.listdir(imagePath):
    if filename!='.DS_Store' and filename[-3:]=='jpg':
        with open(filename,'rb') as fin:
            b = fin.read()
            fin.close()
        out = ','.join(b)+'\n'
        with open(savepath+'trainMatrix1.txt','a') as fut:
            fut.write(out)
            fut.close()
</snippet></ROW><ROW><id>19472667</id><snippet>ÿ,Ø,ÿ,à, ,,J,F,I,F, ,,,, ,d, ,d, , ,ÿ,á,
</snippet></ROW><ROW><id>19472667</id><snippet>JPG</snippet></ROW><ROW><id>19472667</id><snippet>TXT</snippet></ROW><ROW><id>19472667</id><snippet>imread</snippet></ROW><ROW><id>19472667</id><snippet>JPG</snippet></ROW><ROW><id>19472667</id><snippet>#save as text decompressed image into bytes
for filename in os.listdir(imagePath):
    if filename!='.DS_Store' and filename[-3:]=='jpg':
        b = imread(filename,flatten=0).flatten()
        print b.shape
        out = ','.join('%d'%i for i in b)+'\n'
        print len(out)
        with open(savepath+'trainMatrix2.txt','a') as fut:
            fut.write(out)
            fut.close()            
</snippet></ROW><ROW><id>19472667</id><snippet>255,255,255,245,245,245,125,125,125,72,72,72,17,17,17,2,2,2,15
</snippet></ROW><ROW><id>19472783</id><snippet>.readline()</snippet></ROW><ROW><id>19472783</id><snippet>f.tell()</snippet></ROW><ROW><id>19472783</id><snippet>.readline()</snippet></ROW><ROW><id>19472783</id><snippet>.read()</snippet></ROW><ROW><id>19472783</id><snippet>.tell()</snippet></ROW><ROW><id>19472783</id><snippet>f.readline()</snippet></ROW><ROW><id>19472783</id><snippet>open()</snippet></ROW><ROW><id>19472783</id><snippet>file.next()</snippet></ROW><ROW><id>19472783</id><snippet>offset += len(line)
</snippet></ROW><ROW><id>19472783</id><snippet>.readline()</snippet></ROW><ROW><id>19472783</id><snippet>.tell()</snippet></ROW><ROW><id>19472783</id><snippet>f.tell()</snippet></ROW><ROW><id>19472783</id><snippet>\n</snippet></ROW><ROW><id>19472783</id><snippet>\r</snippet></ROW><ROW><id>19472783</id><snippet>\r\n</snippet></ROW><ROW><id>19472783</id><snippet>.readline()</snippet></ROW><ROW><id>19472783</id><snippet>\n</snippet></ROW><ROW><id>19472783</id><snippet>\r</snippet></ROW><ROW><id>19472783</id><snippet>\r\n</snippet></ROW><ROW><id>19472783</id><snippet>f.tell()</snippet></ROW><ROW><id>19472783</id><snippet>for line in file:</snippet></ROW><ROW><id>19472783</id><snippet>.seek()</snippet></ROW><ROW><id>19472784</id><snippet>def read_deck(filename):
    with open(filename, 'r') as f:     # Opens the file and assigns the file object to the name `f` (also makes sure the file will be closed properly)
        contents = f.read().split()    # Reads the entire file, then splits it into a list of strings by whitespace (i.e. a space, a newline, whatever)
    return [int(x) for x in contents]  # Converts the list of strings to a list of ints
</snippet></ROW><ROW><id>19472806</id><snippet>cv2.convexityDefects</snippet></ROW><ROW><id>19472806</id><snippet>cv.ConvexityDefects</snippet></ROW><ROW><id>19472806</id><snippet>   contour – Input contour.
   convexhull – Convex hull obtained using ConvexHull2() that should contain
                pointers or indices to the contour points, not the hull points
                themselves (the returnPoints parameter in ConvexHull2() should
                be zero).
   storage – Container for the output sequence of convexity defects.
             If it is NULL, the contour or hull (in that order)
             storage is used.
</snippet></ROW><ROW><id>19472896</id><snippet>.000Z</snippet></ROW><ROW><id>19472896</id><snippet>Z</snippet></ROW><ROW><id>19472896</id><snippet>time.strptime()</snippet></ROW><ROW><id>19472896</id><snippet>%f</snippet></ROW><ROW><id>19472896</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>19472896</id><snippet>Z</snippet></ROW><ROW><id>19472896</id><snippet>from datetime import datetime

datetime.strptime(key.last_modified, '%Y-%m-%dT%H:%M:%S.%fZ')
</snippet></ROW><ROW><id>19472896</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; example = u'2013-10-20T00:41:32.000Z'
&gt;&gt;&gt; datetime.strptime(example, '%Y-%m-%dT%H:%M:%S.%fZ')
datetime.datetime(2013, 10, 20, 0, 41, 32)
&gt;&gt;&gt; time.strptime(example, '%Y-%m-%dT%H:%M:%S.%fZ')
time.struct_time(tm_year=2013, tm_mon=10, tm_mday=20, tm_hour=0, tm_min=41, tm_sec=32, tm_wday=6, tm_yday=293, tm_isdst=-1)
</snippet></ROW><ROW><id>19472896</id><snippet>%f</snippet></ROW><ROW><id>19472896</id><snippet>time.strptime()</snippet></ROW><ROW><id>19472896</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>19472896</id><snippet>datetime.timetuple()</snippet></ROW><ROW><id>19473101</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>19473101</id><snippet>from collections import defaultdict

def tree():
    return defaultdict(tree)

nested = defaultdict(tree)

for word in words:
    node = nested
    for char in word:
        node = node[char.upper()]
</snippet></ROW><ROW><id>19473101</id><snippet>defaultdict</snippet></ROW><ROW><id>19473101</id><snippet>tree()</snippet></ROW><ROW><id>19473101</id><snippet>defaultdict()</snippet></ROW><ROW><id>19473101</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def tree():
...     return defaultdict(tree)
... 
&gt;&gt;&gt; nested = defaultdict(tree)
&gt;&gt;&gt; words = ['Apple','Ape','Bark','Barn']
&gt;&gt;&gt; for word in words:
...     node = nested
...     for char in word:
...         node = node[char.upper()]
... 
&gt;&gt;&gt; nested
defaultdict(&lt;function tree at 0x114e62320&gt;, {'A': defaultdict(&lt;function tree at 0x114e62320&gt;, {'P': defaultdict(&lt;function tree at 0x114e62320&gt;, {'P': defaultdict(&lt;function tree at 0x114e62320&gt;, {'L': defaultdict(&lt;function tree at 0x114e62320&gt;, {'E': defaultdict(&lt;function tree at 0x114e62320&gt;, {})})}), 'E': defaultdict(&lt;function tree at 0x114e62320&gt;, {})})}), 'B': defaultdict(&lt;function tree at 0x114e62320&gt;, {'A': defaultdict(&lt;function tree at 0x114e62320&gt;, {'R': defaultdict(&lt;function tree at 0x114e62320&gt;, {'K': defaultdict(&lt;function tree at 0x114e62320&gt;, {}), 'N': defaultdict(&lt;function tree at 0x114e62320&gt;, {})})})})})
&gt;&gt;&gt; def print_nested(d, indent=0):
...     for k, v in d.iteritems():
...         print '{}{!r}:'.format(indent * '  ', k)
...         print_nested(v, indent + 1)
... 
&gt;&gt;&gt; print_nested(nested)
'A':
  'P':
    'P':
      'L':
        'E':
    'E':
'B':
  'A':
    'R':
      'K':
      'N':
</snippet></ROW><ROW><id>19473101</id><snippet>defaultdict</snippet></ROW><ROW><id>19473102</id><snippet>split()</snippet></ROW><ROW><id>19473102</id><snippet>words =  f.read().split()
</snippet></ROW><ROW><id>19473102</id><snippet>f.read()</snippet></ROW><ROW><id>19473102</id><snippet>words = [word for line in f for word in line.split()]
</snippet></ROW><ROW><id>19473186</id><snippet>'/'</snippet></ROW><ROW><id>19473186</id><snippet>app.teardown_appcontext</snippet></ROW><ROW><id>19473186</id><snippet>db.session.remove()</snippet></ROW><ROW><id>19473186</id><snippet>before_request</snippet></ROW><ROW><id>19473186</id><snippet>after_request</snippet></ROW><ROW><id>19473186</id><snippet>client.get()</snippet></ROW><ROW><id>19473186</id><snippet>def test_remove(self):
  db.drop_all()
  db.create_all()

  u = User()
  u.name = 'joe'
  db.session.add(u)
  db.session.commit()
  with app.app_context():
      client = app.test_client()
      client.get('/')
  print 'after request:', `db.session`
  print u.name
  assert u not in db.session
</snippet></ROW><ROW><id>19473288</id><snippet>prod</snippet></ROW><ROW><id>19473288</id><snippet>math.factorial(n)</snippet></ROW><ROW><id>19473288</id><snippet>_pc = []
for i in range(256):
    c = 0
    while i:
        # clear last set bit
        i &amp;= i-1
        c += 1
    _pc.append(c)

def popcount(i):
    "Return number of bits set."
    result = 0
    while i:
        result += _pc[i &amp; 0xff]
        i &gt;&gt;= 8
    return result

def perm(a):
    "Return permanent of 0-1 matrix.  Each row is an int."
    result = 0
    n = len(a)
    for s in range(1 &lt;&lt; n):
        prod = 1
        for row in a:
            prod *= popcount(row &amp; s)
        if popcount(s) &amp; 1:
            result -= prod
        else:
            result += prod
    if n &amp; 1:
        result = -result
    return result

def matrix2ints(a):
    return [int("".join(map(str, row)), 2)
            for row in a]

def matrix_perm(a):
    "Return permanent of 0-1 matrix."
    return perm(matrix2ints(a))
</snippet></ROW><ROW><id>19473291</id><snippet>c.executemany()</snippet></ROW><ROW><id>19473291</id><snippet>inc_data</snippet></ROW><ROW><id>19473291</id><snippet>c.execute()</snippet></ROW><ROW><id>19473291</id><snippet># insert multiple rows; one for each entry in `inc_data`
c.executemany('INSERT INTO inc_table VALUES (?,?,?,?)', inc_data)

# or loop
for bind_values in inc_data:
    c.execute('INSERT INTO inc_table VALUES (?,?,?,?)', bind_values)
</snippet></ROW><ROW><id>19473348</id><snippet>set nocompatible  "cannot remember, but necessary for something
syntax on  "syntax highlighting

filetype plugin indent on

au FileType htm setlocal expandtab shiftwidth=2 softtabstop=2
au FileType html setlocal expandtab shiftwidth=2 softtabstop=2
au FileType css setlocal expandtab shiftwidth=2 softtabstop=2
au FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2
au FileType xml setlocal expandtab shiftwidth=2 softtabstop=2
au FileType ruby setlocal expandtab shiftwidth=2 softtabstop=2
au BufNewFile,BufRead *.ru set filetype=ruby
au BufNewFile,BufRead *.slim set filetype=ruby
au FileType cgi setlocal expandtab shiftwidth=2 softtabstop=2

au FileType python setlocal expandtab shiftwidth=4 softtabstop=4
au FileType perl setlocal expandtab shiftwidth=4 softtabstop=4
au FileType php setlocal expandtab shiftwidth=4 softtabstop=4
au FileType java setlocal expandtab shiftwidth=4 softtabstop=4
au FileType cpp setlocal expandtab shiftwidth=4 softtabstop=4

au BufNewFile,BufRead *.coffee set filetype=ruby
au BufNewFile,BufRead *.jsp set filetype=html

set textwidth=78 
</snippet></ROW><ROW><id>19473348</id><snippet>set nocompatible  "cannot remember, but necessary for something
syntax on  "syntax highlighting

filetype plugin indent on

au FileType python setlocal expandtab shiftwidth=4 softtabstop=4

set textwidth=78 
</snippet></ROW><ROW><id>19473448</id><snippet>self.isDisarmed = False
</snippet></ROW><ROW><id>19473448</id><snippet>bomb_disarmed</snippet></ROW><ROW><id>19473448</id><snippet>self.isDisarmed = True
</snippet></ROW><ROW><id>19473448</id><snippet>explode_first</snippet></ROW><ROW><id>19473448</id><snippet>def explode_first(self):
    if self.bomb:
        if self.isDisarmed:
            self.parent.after(125, self.explode_fourth)   # If bomb is disarmed, skip to the last step, where the bomb is deleted.
        else:                                             # Otherwise, carry on with bomb explosion
            self.b1 -= 5
            self.b2 -= 5
            self.b3 += 5
            self.b4 += 5
            self.canvas.delete(self.bomb)
            self.bomb = self.canvas.create_oval(self.b1, 
                                            self.b2, 
                                            self.b3, 
                                            self.b4, 
                                            fill = "orange")
            self.parent.after(125, self.explode_second)
</snippet></ROW><ROW><id>19473448</id><snippet>Bomb</snippet></ROW><ROW><id>19473448</id><snippet>App</snippet></ROW><ROW><id>19473448</id><snippet>class App:
    def __init__(self, ...):
        self.canvas = Tkinter.Canvas(...)
        self.thingy = SomethingElse()

class SomethingElse:
    def __init__(self, parentApp):
        self.parentApp = parentApp
    def drawSomething(self):
        self.parentApp.canvas.create_oval(...)

a = App(...)
s = SomethingElse(a)
s.drawSomething()
</snippet></ROW><ROW><id>19473567</id><snippet>filePath = "/etc/elementary/settings.cfg"
if not os.path.exists(filePath):
    with open(filePath, 'wb') as configfile:
        config.write(configfile)
</snippet></ROW><ROW><id>19473567</id><snippet>os.path.exists</snippet></ROW><ROW><id>19473699</id><snippet>lst = text.split("\n")
#lst is of type list
for line in lst:
    if lst[:2] == "BC":
        #tadah, you know this line contains what you want do some magic
</snippet></ROW><ROW><id>19473746</id><snippet>try:
    command_string = 'my_virusscanner -parameters ' + uploaded_file
    result = subprocess.check_output(command_string,stderr=subprocess.STDOUT,shell=True)
    #if needed, do something with "result"            
except subprocess.CalledProcessError as e:
    #if your scanner gives an error code when detecting a virus, you'll end up here
    pass 
except:
    #something else went wrong
    #check sys.exc_info() for info
    pass
</snippet></ROW><ROW><id>19473746</id><snippet>pyclamav.scanfile</snippet></ROW><ROW><id>19473822</id><snippet>timeit</snippet></ROW><ROW><id>19473822</id><snippet>m2(a)</snippet></ROW><ROW><id>19473822</id><snippet>1.29 us</snippet></ROW><ROW><id>19473822</id><snippet>m2(a)</snippet></ROW><ROW><id>19473822</id><snippet>10.8 us</snippet></ROW><ROW><id>19473822</id><snippet>m2(a)</snippet></ROW><ROW><id>19473822</id><snippet>1.06 ms</snippet></ROW><ROW><id>19473822</id><snippet>1.06ms = 1060 us</snippet></ROW><ROW><id>19473822</id><snippet>$ python -mtimeit -h
...
If -n is not given, a suitable number of loops is calculated by trying
successive powers of 10 until the total time is at least 0.2 seconds.
</snippet></ROW><ROW><id>19473889</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(.01)
Decimal('0.01000000000000000020816681711721685132943093776702880859375')
</snippet></ROW><ROW><id>19473889</id><snippet>decimal</snippet></ROW><ROW><id>19473889</id><snippet>from decimal import Decimal as D

def sqrt(num):
    root = D(0)
    while root * root &lt; num:
        root += D("0.01")
    return root
</snippet></ROW><ROW><id>19473889</id><snippet>&gt;&gt;&gt; sqrt(4)
Decimal('2.00')
&gt;&gt;&gt; sqrt(9)
Decimal('3.00')
</snippet></ROW><ROW><id>19473889</id><snippet>I/2**J</snippet></ROW><ROW><id>19474144</id><snippet>(r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': '/path/to/your/static/'}),</snippet></ROW><ROW><id>19474250</id><snippet>None</snippet></ROW><ROW><id>19474250</id><snippet>None</snippet></ROW><ROW><id>19474250</id><snippet>F = "fork"
</snippet></ROW><ROW><id>19474250</id><snippet>"fork"</snippet></ROW><ROW><id>19474250</id><snippet>F = None
</snippet></ROW><ROW><id>19474250</id><snippet>None</snippet></ROW><ROW><id>19474250</id><snippet>"F"</snippet></ROW><ROW><id>19474250</id><snippet>F</snippet></ROW><ROW><id>19474250</id><snippet>None</snippet></ROW><ROW><id>19474250</id><snippet>None</snippet></ROW><ROW><id>19474250</id><snippet>"fork"</snippet></ROW><ROW><id>19474250</id><snippet>F = None</snippet></ROW><ROW><id>19474250</id><snippet>, if we decided to treat</snippet></ROW><ROW><id>19474250</id><snippet>as meaning</snippet></ROW><ROW><id>19474250</id><snippet>print(F)</snippet></ROW><ROW><id>19474250</id><snippet>&gt;&gt;&gt; print(F)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'F' is not defined
</snippet></ROW><ROW><id>19474250</id><snippet>NameError</snippet></ROW><ROW><id>19474250</id><snippet>F</snippet></ROW><ROW><id>19474250</id><snippet>F = None</snippet></ROW><ROW><id>19474250</id><snippet>F</snippet></ROW><ROW><id>19474250</id><snippet>&gt;&gt;&gt; print(F)
None
</snippet></ROW><ROW><id>19474250</id><snippet>F = None</snippet></ROW><ROW><id>19474250</id><snippet>None</snippet></ROW><ROW><id>19474250</id><snippet>F = "fork"</snippet></ROW><ROW><id>19474250</id><snippet>A = 2</snippet></ROW><ROW><id>19474250</id><snippet>c17 = 3.14</snippet></ROW><ROW><id>19474250</id><snippet>F = 10</snippet></ROW><ROW><id>19474250</id><snippet>F = None</snippet></ROW><ROW><id>19474250</id><snippet>None</snippet></ROW><ROW><id>19474377</id><snippet>def generator(f)
    for i, line in enumerate(f):
        if i % 1000 == 0:
            print i
        yield line

with open('mycorpus.txt') as f:
    dictionary = corpora.Dictionary(line.lower().split() for line in generator(f))
</snippet></ROW><ROW><id>19474506</id><snippet>out = []
biggest = max(len(item) for item in x)
for i in range(biggest):
    for item in x:
        if len(item) &gt; i:
            out.append(item[i])
</snippet></ROW><ROW><id>19474506</id><snippet>out</snippet></ROW><ROW><id>19474506</id><snippet>yield</snippet></ROW><ROW><id>19474846</id><snippet>class AddBook(forms.Form):
    titel = forms.CharField(widget=forms.TextInput())
    author = forms.CharField(widget=forms.TextInput())
</snippet></ROW><ROW><id>19475086</id><snippet>_tag_auth_form.html</snippet></ROW><ROW><id>19475086</id><snippet>&lt;form method="post" action="{{ action }}"&gt;
  {% csrf_token %}
  {{ form }}
  &lt;input type="submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>19475086</id><snippet>from django import template
from accounts.forms import AuthenticationForm

register = template.Library()

@register.inclusion_tag('_tag_auth_form.html')
def authentication_form():
    return {'form': AuthenticationForm(), 'action': '/some/url'}
</snippet></ROW><ROW><id>19475581</id><snippet>print 'Video category: %s' % entry.media.category[0].text</snippet></ROW><ROW><id>19475581</id><snippet>def PrintEntryDetails(entry):
    print 'Video title: %s' % entry.media.title.text
    print 'Video published on: %s ' % entry.published.text
    print 'Video description: %s' % entry.media.description.text
    print 'Video category: %s' % entry.media.category[0].text
    print 'Video tags: %s' % entry.media.keywords.text
    print 'Video watch page: %s' % entry.media.player.url
    print 'Video flash player URL: %s' % entry.GetSwfUrl()
    print 'Video duration: %s' % entry.media.duration.seconds
</snippet></ROW><ROW><id>19475719</id><snippet>c = 0
emptylist = [""] * len(verbs)
</snippet></ROW><ROW><id>19475719</id><snippet>if w == l:
    print(c)
    emptylist[c] = 1
    ## then write emptylist to the csv with csv.writerow(emtptylist)
    continue
</snippet></ROW><ROW><id>19475776</id><snippet>from datetime import datetime

startTime = datetime.now()

a=2**1000000-3
b=a/13

elapsedTime = datetime.now() - startTime

print "Elapsed time %s\n Number: %s" % (elapsedTime, b)
</snippet></ROW><ROW><id>19475995</id><snippet>&gt;&gt;&gt; from scipy.spatial.distance import cdist
&gt;&gt;&gt; A = np.random.randn(540, 2)
&gt;&gt;&gt; B = np.random.randn(540, 2)
&gt;&gt;&gt; alpha = 1.
&gt;&gt;&gt; ind = np.all(cdist(A, B) &gt; alpha, axis=0)
&gt;&gt;&gt; outliers = B[ind]
</snippet></ROW><ROW><id>19476118</id><snippet>socket_accept</snippet></ROW><ROW><id>19476118</id><snippet>socket_accept($sock);
</snippet></ROW><ROW><id>19476118</id><snippet>socket_accept</snippet></ROW><ROW><id>19476118</id><snippet>socket_listen</snippet></ROW><ROW><id>19476242</id><snippet>00-startup.py</snippet></ROW><ROW><id>19476242</id><snippet>ipython_config.py</snippet></ROW><ROW><id>19476242</id><snippet>c.InteractiveShellApp.exec_lines = ['''
import sympy
sympy.init_printing(use_latex=True)
''']
</snippet></ROW><ROW><id>19476284</id><snippet>asksaveasfilename</snippet></ROW><ROW><id>19476284</id><snippet>tkFileDialog.asksaveasfilename</snippet></ROW><ROW><id>19476284</id><snippet>mode</snippet></ROW><ROW><id>19476284</id><snippet>tkFileDialog.asksaveasfile</snippet></ROW><ROW><id>19476284</id><snippet>def file_save():
    f = tkFileDialog.asksaveasfile(mode='w', defaultextension=".txt")
    if f is None: # asksaveasfile return `None` if dialog closed with "cancel".
        return
    text2save = str(text.get(1.0, END)) # starts from `1.0`, not `0.0`
    f.write(text2save)
    f.close() # `()` was missing.
</snippet></ROW><ROW><id>19476341</id><snippet>Sprite.rect</snippet></ROW><ROW><id>19476341</id><snippet>self.imageRect = self.image.get_rect()
#to
self.rect = self.image.get_rect()
</snippet></ROW><ROW><id>19476341</id><snippet>self.imageWidth = self.image.get_width()
self.imageHeight = self.image.get_height()
self.imageRect.left, self.imageRect.top = location
</snippet></ROW><ROW><id>19476341</id><snippet>self.rect.width</snippet></ROW><ROW><id>19476341</id><snippet>self.rect.topleft = location</snippet></ROW><ROW><id>19476341</id><snippet>centerx</snippet></ROW><ROW><id>19476400</id><snippet>zip()</snippet></ROW><ROW><id>19476400</id><snippet>transposed = zip(*matrix)
</snippet></ROW><ROW><id>19476400</id><snippet>*matrix</snippet></ROW><ROW><id>19476400</id><snippet>matrix</snippet></ROW><ROW><id>19476400</id><snippet>zip()</snippet></ROW><ROW><id>19476400</id><snippet>zip(matrix[0], matrix[1], matrix[2])</snippet></ROW><ROW><id>19476400</id><snippet>zip()</snippet></ROW><ROW><id>19476400</id><snippet>&gt;&gt;&gt; matrix = [['a0', 'b0', 'c0'], ['a1', 'b1', 'c1'], ['a2', 'b2', 'b2']]
&gt;&gt;&gt; zip(*matrix)
[('a0', 'a1', 'a2'), ('b0', 'b1', 'b2'), ('c0', 'c1', 'b2')]
</snippet></ROW><ROW><id>19476400</id><snippet>map(list, zip(*matrix))
</snippet></ROW><ROW><id>19476400</id><snippet>[list(t) for t in zip(*matrix)]
</snippet></ROW><ROW><id>19476655</id><snippet>text</snippet></ROW><ROW><id>19476655</id><snippet>txt</snippet></ROW><ROW><id>19476655</id><snippet>    text.insert(END, text)
</snippet></ROW><ROW><id>19476655</id><snippet>    text.insert(END, txt)
</snippet></ROW><ROW><id>19476673</id><snippet>__init__</snippet></ROW><ROW><id>19476673</id><snippet>MyRealClass</snippet></ROW><ROW><id>19476673</id><snippet>MyRealClass</snippet></ROW><ROW><id>19476673</id><snippet>__init__</snippet></ROW><ROW><id>19476673</id><snippet>__init__</snippet></ROW><ROW><id>19476673</id><snippet>Mixin1</snippet></ROW><ROW><id>19476673</id><snippet>Mixin2</snippet></ROW><ROW><id>19476673</id><snippet>MyBase</snippet></ROW><ROW><id>19476673</id><snippet>MyRealClass</snippet></ROW><ROW><id>19476673</id><snippet>__init__</snippet></ROW><ROW><id>19476673</id><snippet>MyRealClass.__init__</snippet></ROW><ROW><id>19476673</id><snippet>super(MyRealClass, self).__init__()</snippet></ROW><ROW><id>19476673</id><snippet>MyBase</snippet></ROW><ROW><id>19476770</id><snippet>lists</snippet></ROW><ROW><id>19476770</id><snippet>tuples</snippet></ROW><ROW><id>19476770</id><snippet>arrays</snippet></ROW><ROW><id>19476770</id><snippet>[p for p in range(10)]
</snippet></ROW><ROW><id>19476770</id><snippet>&gt;&gt;&gt; [p for p in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>19476770</id><snippet>              \/-&gt; This is the iterable object
[p for p in range(10)]
 ^     ^ This is the variable that is generated on every iteration
 ^ This is the expression that gets added to the list on every iteration (loop)
</snippet></ROW><ROW><id>19476770</id><snippet>range(10)</snippet></ROW><ROW><id>19476770</id><snippet>&gt;&gt;&gt; [p % 2 for p in range(10)]
[0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
</snippet></ROW><ROW><id>19476770</id><snippet>p</snippet></ROW><ROW><id>19476770</id><snippet>p % 2</snippet></ROW><ROW><id>19476770</id><snippet>&gt;&gt;&gt; [[p % 2] for p in range(10)]
[[0], [1], [0], [1], [0], [1], [0], [1], [0], [1]]
</snippet></ROW><ROW><id>19476770</id><snippet>p % 2</snippet></ROW><ROW><id>19476770</id><snippet>[p % 2]</snippet></ROW><ROW><id>19476770</id><snippet>in</snippet></ROW><ROW><id>19476770</id><snippet>&gt;&gt;&gt; [[p % 2, p] for p in range(10)]
[[0, 0], [1, 1], [0, 2], [1, 3], [0, 4], [1, 5], [0, 6], [1, 7], [0, 8], [1, 9]]
</snippet></ROW><ROW><id>19476770</id><snippet>&gt;&gt;&gt; [[p % 2, p, "cheese"] for p in range(10)]
[[0, 0, 'cheese'], [1, 1, 'cheese'], [0, 2, 'cheese'], [1, 3, 'cheese'], [0, 4, 'cheese'], [1, 5, 'cheese'], [0, 6, 'cheese'], [1, 7, 'cheese'], [0, 8, 'cheese'], [1, 9, 'cheese']]
</snippet></ROW><ROW><id>19476829</id><snippet>  values = [None]*1000
</snippet></ROW><ROW><id>19476841</id><snippet>&gt;&gt;&gt; t = type('test', (object,), {})()
&gt;&gt;&gt; t
&lt;__main__.test at 0xb615930c&gt;
</snippet></ROW><ROW><id>19476841</id><snippet>&gt;&gt;&gt; t = type('test', (), {})()
&gt;&gt;&gt; t.__class__.__bases__
(object,)
</snippet></ROW><ROW><id>19476841</id><snippet>type</snippet></ROW><ROW><id>19476905</id><snippet>from collections import defaultdict

def bucket_list(nested_list, sort=True):
    bucket = defaultdict(list)
    for sublist in nested_list:
        bucket[len(sublist)].append(sublist)
    return [v for k,v in sorted(bucket.items())] if sort else bucket.values()
</snippet></ROW><ROW><id>19476905</id><snippet>&gt;&gt;&gt; bucket_list([[1,2], [0,1], [1,2,3], [0,1,2], [1,2,3,4]])
[[[1, 2], [0, 1]], [[1, 2, 3], [0, 1, 2]], [[1, 2, 3, 4]]]
</snippet></ROW><ROW><id>19476942</id><snippet>AddChild()</snippet></ROW><ROW><id>19477053</id><snippet>i += 1</snippet></ROW><ROW><id>19477053</id><snippet>for</snippet></ROW><ROW><id>19477053</id><snippet>next</snippet></ROW><ROW><id>19477053</id><snippet>def example(n):
    i = 1
    while i &lt;= n:
        yield i
        i += 1

print "hello"

for n in example(3):
    print n

print "goodbye"
</snippet></ROW><ROW><id>19477222</id><snippet>t = keywordMatch(True)</snippet></ROW><ROW><id>19477222</id><snippet>__init__</snippet></ROW><ROW><id>19477222</id><snippet>self.queue</snippet></ROW><ROW><id>19477222</id><snippet>self.queue</snippet></ROW><ROW><id>19477222</id><snippet>Queue</snippet></ROW><ROW><id>19477251</id><snippet>#Main Loop
while True:
    #Set number of Gigs
    totstor=raw_input("Enter the amount of storage on the desired disk (In gb): ")
    #Just in case you get bored
    if totstor=='quit':
        break
    try:
        #Do the math
        gigs=int(totstor)
        gigs=round(gigs)
        kilos=gigs*1048576
        kilos=kilos/25
        kilos=round(kilos)
        kilos=str(kilos)
        kilos=kilos.strip('.0')
        print 'Space for about '+kilos+' standard jpg image files available'
    #If an error occurs, let em' know
    except:
        print 'Invalid Number!'
        print '\n'
    print '\n'
#Bye
quit()
</snippet></ROW><ROW><id>19477323</id><snippet>"end"</snippet></ROW><ROW><id>19477323</id><snippet>END</snippet></ROW><ROW><id>19477323</id><snippet>index</snippet></ROW><ROW><id>19477323</id><snippet>pos = textwidget.index("end")
</snippet></ROW><ROW><id>19477323</id><snippet>linestart</snippet></ROW><ROW><id>19477323</id><snippet>pos = textwidget.index("end-1c linestart")
</snippet></ROW><ROW><id>19477323</id><snippet>delete</snippet></ROW><ROW><id>19477323</id><snippet>textwidget.delete("end-1c linestart", "end")
</snippet></ROW><ROW><id>19477363</id><snippet>from urllib3.contrib import pyopenssl
pyopenssl.inject_into_urllib3()
</snippet></ROW><ROW><id>19477363</id><snippet>pyopenssl.inject_into_urllib3()</snippet></ROW><ROW><id>19477384</id><snippet>home_team</snippet></ROW><ROW><id>19477384</id><snippet>ForeignKey</snippet></ROW><ROW><id>19477384</id><snippet>ValueError: Cannot assign "'Sheffield United'": "Match.home_team" must be a "Team" instance.
</snippet></ROW><ROW><id>19477384</id><snippet>get_or_create</snippet></ROW><ROW><id>19477384</id><snippet>from django.core.management.base import BaseCommand, CommandError
import csv
import csvImporter
from core.models import Match

master_data = open ('/Users/chris/Dropbox/Django/gmblnew/data/testfile.csv', 'r') 
data = list(tuple(rec) for rec in csv.reader(master_data, delimiter=','))
from core.models import Match, League, Team

for row in data:
    league, _ = League.objects.get_or_create(name=row[0])
    home_team, _ = Team.objects.get_or_create(team_name=row[2], league=league)
    away_team, _ = Team.objects.get_or_create(team_name=row[3], league=league)
    current_match = Match(
        league = league,
        home_team = home_team,
        away_team = away_team,
        match_date = row[1], 
        full_time_home_goals = row[4],
        full_time_away_goals = row[5],
        home_shots = row[10],
        away_shots = row[11],
        home_shots_on_target = row[12],
        away_shots_on_target = row[13],
        home_corners = row[16],
        away_corners = row[17],
        full_time_result = row[6],
    )
    print current_match
</snippet></ROW><ROW><id>19477384</id><snippet>Team.objects.get_or_create(team_name=row[2])</snippet></ROW><ROW><id>19477384</id><snippet>row[2]</snippet></ROW><ROW><id>19477384</id><snippet>get_or_create</snippet></ROW><ROW><id>19477719</id><snippet>raw</snippet></ROW><ROW><id>19477719</id><snippet>.read()</snippet></ROW><ROW><id>19477719</id><snippet>pat = re.compile (rb'&lt;img [^&gt;]*src="([^"]+)')
</snippet></ROW><ROW><id>19477719</id><snippet>r</snippet></ROW><ROW><id>19477719</id><snippet>b</snippet></ROW><ROW><id>19477719</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>19477719</id><snippet>Python 3.3.2+
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; import re
&gt;&gt;&gt; website = urllib.request.urlopen('http://stackoverflow.com/')
&gt;&gt;&gt; html = website.read()
&gt;&gt;&gt; pat = re.compile (rb'&lt;img [^&gt;]*src="([^"]+)')
&gt;&gt;&gt; img = pat.findall(html)
&gt;&gt;&gt; img
[b'http://i.stack.imgur.com/tKsDb.png', b'http://i.stack.imgur.com/dmHl0.png', b'http://i.stack.imgur.com/dmHl0.png', b'http://i.stack.imgur.com/tKsDb.png', b'http://i.stack.imgur.com/6QN0y.png', b'http://i.stack.imgur.com/tKsDb.png', b'http://i.stack.imgur.com/L8rHf.png', b'http://i.stack.imgur.com/tKsDb.png', b'http://pixel.quantserve.com/pixel/p-c1rF4kxgLUzNc.gif']
</snippet></ROW><ROW><id>19477746</id><snippet>input('&gt;&gt; ')</snippet></ROW><ROW><id>19477746</id><snippet>raw_input('&gt;&gt; ')</snippet></ROW><ROW><id>19477746</id><snippet>msvcrt.kbhit()</snippet></ROW><ROW><id>19477746</id><snippet>while()</snippet></ROW><ROW><id>19477746</id><snippet>import msvcrt

print("Hi everyone! This is just a quick sample code I made")
print("Press anykey to end the program.")

while(True):
    # Do stuff here.
    if msvcrt.kbhit():
        # The user entered a key. Check to see if it was a "c".
        if (msvcrt.getch() == "c"):
            break
        elif (msvcrt.getch() == &lt;some other character&gt;):
            # Do some other thing.
</snippet></ROW><ROW><id>19477873</id><snippet>re</snippet></ROW><ROW><id>19477873</id><snippet>import re

myfile = open(files,'r');
filecontent = myfile.read();

results = re.compile('content(.*?)score', re.DOTALL | re.IGNORECASE).findall(filecontent)
print results
</snippet></ROW><ROW><id>19477873</id><snippet>IGNORECASE</snippet></ROW><ROW><id>19477873</id><snippet>DOTALL</snippet></ROW><ROW><id>19477873</id><snippet>(Dot.) In the default mode, this matches any character except a newline. If the DOTALL flag has been specified, this matches any character including a newline.
</snippet></ROW><ROW><id>19477873</id><snippet>Compile</snippet></ROW><ROW><id>19477901</id><snippet>GtkScrollable</snippet></ROW><ROW><id>19477901</id><snippet>GtkScrolledWindow</snippet></ROW><ROW><id>19477901</id><snippet>GtkScrollbars</snippet></ROW><ROW><id>19477901</id><snippet>GtkAdjustments</snippet></ROW><ROW><id>19477901</id><snippet>GtkScrollable</snippet></ROW><ROW><id>19477901</id><snippet>set_vadjustment</snippet></ROW><ROW><id>19477901</id><snippet>set_hadjustment</snippet></ROW><ROW><id>19477901</id><snippet>GtkScrollbar</snippet></ROW><ROW><id>19477901</id><snippet>GtkScrollable</snippet></ROW><ROW><id>19477901</id><snippet>vadjustment</snippet></ROW><ROW><id>19477901</id><snippet>hadjustment</snippet></ROW><ROW><id>19477901</id><snippet>GtkAdjustments</snippet></ROW><ROW><id>19477901</id><snippet>value-changed</snippet></ROW><ROW><id>19477901</id><snippet>GtkScrollable</snippet></ROW><ROW><id>19477901</id><snippet>value</snippet></ROW><ROW><id>19477949</id><snippet>__eq__()</snippet></ROW><ROW><id>19477949</id><snippet>csv</snippet></ROW><ROW><id>19477949</id><snippet>xpath</snippet></ROW><ROW><id>19477949</id><snippet>thing1 = list.select('h1/text()').extract()[0]
if thing1.strip():
    ...
</snippet></ROW><ROW><id>19477949</id><snippet>xpath</snippet></ROW><ROW><id>19477949</id><snippet>items = []
for list in lists:
    if list.select('.[h1[text()] and h2[text()] and h3[text()]]'):
        item = TypeItem()
        item['thing1'] = list.select('h1/text()').extract()
        item['thing2'] = list.select('h2/text()').extract()
        item['thing3'] = list.select('h3/text()').extract()
        items.append(item)
return(items) 
</snippet></ROW><ROW><id>19477963</id><snippet>**kwargs</snippet></ROW><ROW><id>19477963</id><snippet>dict</snippet></ROW><ROW><id>19478045</id><snippet>f = None
</snippet></ROW><ROW><id>19478573</id><snippet>newFile = open(CONST_DATABIN_DIR + newFileName, 'wb')
</snippet></ROW><ROW><id>19478573</id><snippet>currentFile = open(CONST_DATA_DIR + file, 'r', newline='', encoding='UTF8')
newFile.write(currentFile.read())
</snippet></ROW><ROW><id>19478573</id><snippet>str</snippet></ROW><ROW><id>19478573</id><snippet>write()</snippet></ROW><ROW><id>19478573</id><snippet>TypeError</snippet></ROW><ROW><id>19478611</id><snippet>\r</snippet></ROW><ROW><id>19478611</id><snippet>\n</snippet></ROW><ROW><id>19478611</id><snippet>for i in range(10):
    print("\r%d" % i, end="")
    sleep(1)
</snippet></ROW><ROW><id>19478611</id><snippet>\n</snippet></ROW><ROW><id>19478611</id><snippet>\n</snippet></ROW><ROW><id>19478611</id><snippet>\r</snippet></ROW><ROW><id>19478844</id><snippet>+</snippet></ROW><ROW><id>19478844</id><snippet>str.join</snippet></ROW><ROW><id>19478844</id><snippet>In [11]: from itertools import chain

In [12]: data = [[1,2,3],[10,20,30]]

In [13]: " ".join(str(i) for i in chain(*data))
Out[13]: '1 2 3 10 20 30'
</snippet></ROW><ROW><id>19478844</id><snippet>" ".join((str(len(data)), " ".join(str(i) for i in chain(*data)))
</snippet></ROW><ROW><id>19478844</id><snippet>str.join</snippet></ROW><ROW><id>19478979</id><snippet>import ast

string_version = str(S)
list_version = ast.literal_eval(string_version)
</snippet></ROW><ROW><id>19478979</id><snippet>string_version = ''.join(chr(s) for s in S)
list_verison = list(ord(s) for s in string_version)
</snippet></ROW><ROW><id>19478979</id><snippet>\r</snippet></ROW><ROW><id>19478979</id><snippet>string_version = ''.join(map(chr, S))
list_version = list(map(ord, string_version))
</snippet></ROW><ROW><id>19478979</id><snippet>\r</snippet></ROW><ROW><id>19478979</id><snippet>string_version</snippet></ROW><ROW><id>19478979</id><snippet>string_version = repr(''.join(map(chr, S)))
# print, copy, paste, etc.
list_version = list(map(ord, ast.literal_eval(string_version)))
</snippet></ROW><ROW><id>19479042</id><snippet>result</snippet></ROW><ROW><id>19479042</id><snippet>for i in xrange(1, d):
    j = np.arange(k-i-1, k+1)
    result[j, i] = ((x - y[j]) / (y[j+i] - y[j]) * result[j, i-1] +
                    (y[j+i+1] - x) / (y[j+i+1] - y[j+1]) * result[j+1, i-1])
</snippet></ROW><ROW><id>19479042</id><snippet>base_j = np.arange(k-d-2, k+1)</snippet></ROW><ROW><id>19479042</id><snippet>j = base_j[d-i+1:]</snippet></ROW><ROW><id>19479111</id><snippet>https://www.google.com/search?q=rainbow&amp;safe=active
</snippet></ROW><ROW><id>19479111</id><snippet>https://www.google.com/#q=rainbow&amp;safe=active
</snippet></ROW><ROW><id>19479242</id><snippet>reset = ResetSignal(0, active=ACTIVE_LOW, async=True)
</snippet></ROW><ROW><id>19479242</id><snippet>def stimulus():
        for i in range(3):
            yield clk.posedge
        reset.next = 1
        for n in (12, 8, 8, 4):
</snippet></ROW><ROW><id>19479242</id><snippet>reset_n</snippet></ROW><ROW><id>19479316</id><snippet>df= df.reset_index()
</snippet></ROW><ROW><id>19479316</id><snippet>import pandas as pd
import numpy as np
df = pd.DataFrame({'2012-10-31': [-4, -18, -18], '2012-11-30': [-0.7, -8, -6]}, index = ['red', 'blue','green'])

df
    2012-10-31  2012-11-30
red      -4     -0.7
blue    -18     -8.0
green   -18     -6.0

df.reset_index()
    term    2012-10-31  2012-11-30
0    red     -4         -0.7
1    blue   -18         -8.0
2    green  -18         -6.0
</snippet></ROW><ROW><id>19479436</id><snippet>sum</snippet></ROW><ROW><id>19479450</id><snippet>templatetags</snippet></ROW><ROW><id>19479450</id><snippet>demo
    manage.py
    test
        __init__.py
        settings.py
        urls.py
    test_app
        __init__.py
        models.py
        tests.py
        views.py
        templatetags
            __init__.py
            test_tag.py
</snippet></ROW><ROW><id>19479450</id><snippet>test_app</snippet></ROW><ROW><id>19479450</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19479450</id><snippet>test_tag</snippet></ROW><ROW><id>19479542</id><snippet>()</snippet></ROW><ROW><id>19479542</id><snippet>hippo.description()
</snippet></ROW><ROW><id>19479542</id><snippet>&gt;&gt;&gt; class Animal(object):
...     def __init__(self, name, age):
...         self.name = name
...         self.age = age
...     def description(self):
...         print self.name
...         print self.age
...
&gt;&gt;&gt; hippo = Animal('Alex', 12)
&gt;&gt;&gt; hippo.description()
Alex
12
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19479569</id><snippet>javac</snippet></ROW><ROW><id>19479569</id><snippet>javac</snippet></ROW><ROW><id>19479569</id><snippet>PATH</snippet></ROW><ROW><id>19479569</id><snippet>javac</snippet></ROW><ROW><id>19479569</id><snippet>java</snippet></ROW><ROW><id>19479681</id><snippet>annotations</snippet></ROW><ROW><id>19479681</id><snippet>def fun(a: str, b: int) -&gt; str:
    return 1

if __name__ == '__main__':
    print(fun(10, 10))
</snippet></ROW><ROW><id>19479681</id><snippet>string</snippet></ROW><ROW><id>19479681</id><snippet>int</snippet></ROW><ROW><id>19479725</id><snippet>self.date = date</snippet></ROW><ROW><id>19479725</id><snippet>self.date</snippet></ROW><ROW><id>19479725</id><snippet>def date(self)</snippet></ROW><ROW><id>19479725</id><snippet>print Transaction.date  # prints &lt;unbound method Transaction.date&gt;
tr = Transaction('AAPL', 600, '2013-10-25') #call to __init__ hides the method 
print tr.date           # prints 2013-10-25, hence the error.
</snippet></ROW><ROW><id>19479725</id><snippet>    def convert_date(self):  #method name changed
        self.date = datetime.strptime(self.date, "%Y-%m-%d") # It's 'Y' not 'y'
        return self.date

tr = Transaction('AAPL', 600, '2013-10-25')
print tr.convert_date()     
</snippet></ROW><ROW><id>19479725</id><snippet>2013-10-25 00:00:00
</snippet></ROW><ROW><id>19479770</id><snippet>mkdir celery-test
cd celery-test
virtualenv-2.7 .python
source .python/bin/activate
pip install celery
celery worker --help
</snippet></ROW><ROW><id>19479770</id><snippet>which celery</snippet></ROW><ROW><id>19479770</id><snippet>/home/user/projects/celery-test/.python/bin/celery
</snippet></ROW><ROW><id>19479770</id><snippet>which celery
</snippet></ROW><ROW><id>19479770</id><snippet>celery: aliased to /somepath/bin/celery
</snippet></ROW><ROW><id>19479770</id><snippet>~/.bashrc</snippet></ROW><ROW><id>19479770</id><snippet>~/.zshrc</snippet></ROW><ROW><id>19479770</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19479770</id><snippet>~/.zprofile</snippet></ROW><ROW><id>19479770</id><snippet>/etc/profile.d/*</snippet></ROW><ROW><id>19479945</id><snippet>_</snippet></ROW><ROW><id>19479945</id><snippet>text,rc = f()
text,_ = f()
_,rc = f()
</snippet></ROW><ROW><id>19479945</id><snippet>text,rc = f()
text = f()[0]
rc = f()[1]
</snippet></ROW><ROW><id>19479945</id><snippet>_,_,_,x = method_returning_4_args_and_only_want_the_last()
</snippet></ROW><ROW><id>19479998</id><snippet>import random

def make_hint(chars, frequency):
    hint_chars = [char if random.random() &lt; frequency else "_" for char in chars]
    return "".join(hint_chars)

answer = "I am just an example"

print make_hint(answer, 0.3)
print make_hint(answer, 0.5)
</snippet></ROW><ROW><id>19479998</id><snippet>.split()</snippet></ROW><ROW><id>19479998</id><snippet>print " ".join(make_hint(word, 0.3) for word in answer.split())
</snippet></ROW><ROW><id>19480045</id><snippet>import datetime
</snippet></ROW><ROW><id>19480045</id><snippet>datetime.datetime.strptime(date, "%Y-%m-%d")
</snippet></ROW><ROW><id>19480045</id><snippet>strptime</snippet></ROW><ROW><id>19480045</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>19480045</id><snippet>strptime</snippet></ROW><ROW><id>19480045</id><snippet>datetime</snippet></ROW><ROW><id>19480045</id><snippet>datetime</snippet></ROW><ROW><id>19480045</id><snippet>#module  class    method
datetime.datetime.strptime(date, "%Y-%m-%d")
</snippet></ROW><ROW><id>19480081</id><snippet>end=''</snippet></ROW><ROW><id>19480081</id><snippet>print</snippet></ROW><ROW><id>19480081</id><snippet>print("Hello", end='')
a = "This is a test"
print(a)
#HelloThis is a test
</snippet></ROW><ROW><id>19480081</id><snippet>print</snippet></ROW><ROW><id>19480081</id><snippet>print(value, ..., sep=' ', end='\n', file=sys.stdout)

Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep:  string inserted between values, default a space.
end:  string appended after the last value, default a newline.
</snippet></ROW><ROW><id>19480087</id><snippet>mask = 0b100100

for i in range(2, -1, -1):
    tmp = x &amp; mask
    print(((tmp &gt;&gt; 3 + i) &lt;&lt; 1) + ((tmp &amp; (1 &lt;&lt; i)) &gt;&gt; i))
    mask &gt;&gt;= 1
</snippet></ROW><ROW><id>19480087</id><snippet>a</snippet></ROW><ROW><id>19480087</id><snippet>d</snippet></ROW><ROW><id>19480087</id><snippet>b</snippet></ROW><ROW><id>19480087</id><snippet>e</snippet></ROW><ROW><id>19480087</id><snippet>c</snippet></ROW><ROW><id>19480087</id><snippet>f</snippet></ROW><ROW><id>19480087</id><snippet>print</snippet></ROW><ROW><id>19480087</id><snippet>x00y00</snippet></ROW><ROW><id>19480087</id><snippet>0x00y0</snippet></ROW><ROW><id>19480087</id><snippet>00x00y</snippet></ROW><ROW><id>19480087</id><snippet>(tmp &gt;&gt; 3 + i)</snippet></ROW><ROW><id>19480087</id><snippet>x</snippet></ROW><ROW><id>19480087</id><snippet>&lt;&lt; 1</snippet></ROW><ROW><id>19480087</id><snippet>x0</snippet></ROW><ROW><id>19480087</id><snippet>((tmp &amp; (1 &lt;&lt; i)) &gt;&gt; i))</snippet></ROW><ROW><id>19480087</id><snippet>y00</snippet></ROW><ROW><id>19480087</id><snippet>y0</snippet></ROW><ROW><id>19480087</id><snippet>y</snippet></ROW><ROW><id>19480087</id><snippet>y</snippet></ROW><ROW><id>19480087</id><snippet>xy</snippet></ROW><ROW><id>19480127</id><snippet>matchMatrix = [[i.match(j) for j in targetLines] for i in matchLines ]
</snippet></ROW><ROW><id>19480127</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint([[i.match(j) for j in targetLines] for i in matchLines ])
[[None, &lt;_sre.SRE_Match object at 0x9b5d058&gt;, None, None, None],
 [None, &lt;_sre.SRE_Match object at 0x9b5d100&gt;, None, None, None],
 [None, &lt;_sre.SRE_Match object at 0x9b5d138&gt;, None, None, None],
 [None, None, None, None, &lt;_sre.SRE_Match object at 0x9b5d170&gt;],
 [None, None, None, None, None],
 [None, None, None, None, None]]
</snippet></ROW><ROW><id>19480350</id><snippet>open(dst, 'wb') # dst='/home/hosting/servers/22842/mods/Factorization-0.7.21.jar'
</snippet></ROW><ROW><id>19480350</id><snippet>/home/hosting/servers/22842/mods/</snippet></ROW><ROW><id>19480350</id><snippet>open()</snippet></ROW><ROW><id>19480350</id><snippet>IOError</snippet></ROW><ROW><id>19480445</id><snippet>None</snippet></ROW><ROW><id>19480445</id><snippet>reader</snippet></ROW><ROW><id>19480445</id><snippet>fields</snippet></ROW><ROW><id>19480445</id><snippet>entries</snippet></ROW><ROW><id>19480445</id><snippet>from csv import DictReader

with open('example.csv') as f:
    check = False
    for row in DictReader(f):
        n = row['Numeric'].replace('-', '')
        r = row['Rank']

        if check and r == '2' and (not n or 1 &lt;= float(n) &lt;= 50):
            s = row['100% OmNTS'], omnts_p
            print 'test data text 2 test 1 test %s test %s' % s

        elif r == n == '1':
            check = True
            omnts_p = row['100% OmNTS']

        else:
            check = False
</snippet></ROW><ROW><id>19480445</id><snippet>test data text 2 test 1 test 12.5 test 10.2
test data text 2 test 1 test 200.9 test 29.8
test data text 2 test 1 test 12.59 test 10.9
</snippet></ROW><ROW><id>19480447</id><snippet>&gt;&gt;&gt; True == 1
True
</snippet></ROW><ROW><id>19480447</id><snippet>list.index</snippet></ROW><ROW><id>19480447</id><snippet>0</snippet></ROW><ROW><id>19480447</id><snippet>&gt;&gt;&gt; lis = [1, 2,True, 3, 'a', 4]
&gt;&gt;&gt; next(i for i, x in enumerate(lis) if x == True)
0
&gt;&gt;&gt; lis = [1, 2, 3, 'a', 4]
&gt;&gt;&gt; next(i for i, x in enumerate(lis) if x == True)
0
</snippet></ROW><ROW><id>19480517</id><snippet>class memoized(object):
   '''Decorator. Caches a function's return value each time it is called.
   If called later with the same arguments, the cached value is returned
   (not reevaluated).
   '''
   def __init__(self, func):
      self.func = func
      self.cache = {}
   def __call__(self, *args):
      if not isinstance(args, collections.Hashable):
         # uncacheable. a list, for instance.
         # better to not cache than blow up.
         return self.func(*args)
      if args in self.cache:
         return self.cache[args]
      else:
         value = self.func(*args)
         self.cache[args] = value
         return value
   def __repr__(self):
      '''Return the function's docstring.'''
      return self.func.__doc__
   def __get__(self, obj, objtype):
      '''Support instance methods.'''
      return functools.partial(self.__call__, obj)
</snippet></ROW><ROW><id>19480545</id><snippet>value = worksheet.cell(row, column)</snippet></ROW><ROW><id>19480626</id><snippet>&gt;&gt;&gt; strs = """1                            
Petrov
2
Ivanov
3
Sidorov"""
&gt;&gt;&gt; dict(zip(*[iter(strs.splitlines())]*2))
{'2': 'Ivanov', '3': 'Sidorov', '1': 'Petrov'}
</snippet></ROW><ROW><id>19480626</id><snippet>zip(*[iter(s)]*n)</snippet></ROW><ROW><id>19480644</id><snippet>from . import test
</snippet></ROW><ROW><id>19480644</id><snippet>import mytest
mytest.test.say_hello()
</snippet></ROW><ROW><id>19480729</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>19480729</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>19480729</id><snippet>mailalert.py</snippet></ROW><ROW><id>19480729</id><snippet>#!/usr/bin/env python
import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "benchmarks.settings")

# Do you thing now.
</snippet></ROW><ROW><id>19480729</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>19480729</id><snippet>"/usr/local/lib/python2.7/dist-packages/Django-1.5.4-py2.7.egg/django/contrib/auth/__init__.py"
</snippet></ROW><ROW><id>19480775</id><snippet>.set_rgrids</snippet></ROW><ROW><id>19480775</id><snippet>f=plt.figure()
ax = f.add_axes([0.1, 0.1, 0.8, 0.8], projection='polar')
ax.plot(np.radians(az), inc, 'o')
ax.set_rgrids([10,20,30,40,50,60,70,80,90], angle=345.)
</snippet></ROW><ROW><id>19480844</id><snippet>http://localhost:9000/hello_world?x=10&amp;y=33</snippet></ROW><ROW><id>19480844</id><snippet>/hello_world?x=10&amp;y=33</snippet></ROW><ROW><id>19480844</id><snippet>http://localhost:9000/distance?x1=0&amp;y1=0&amp;x2=100&amp;y2=100</snippet></ROW><ROW><id>19480844</id><snippet>http://localhost:9000/?user=1822&amp;catid=48&amp;skus=AB1,FS35S,98KSU1</snippet></ROW><ROW><id>19480844</id><snippet>#!/usr/bin/env python

import math
import tornado.httpserver
import tornado.escape
import tornado.ioloop
import tornado.web


class DistanceService(tornado.web.RequestHandler):
    def get(self):
        x1 = float(self.get_argument('x1'))
        y1 = float(self.get_argument('y1'))
        x2 = float(self.get_argument('x2'))
        y2 = float(self.get_argument('y2'))
        dx = x1 - x2
        dy = y1 - y2
        magnitude = math.sqrt(dx * dx + dy * dy)
        self.write("the distance between the points is %3.2f" % magnitude)


class WService(tornado.web.RequestHandler):
    def get(self):
        self.write("value of request.uri: %s" % self.request.uri)
        self.write("&lt;br&gt;")
        self.write("value of request.path: %s" % self.request.path)
        self.write("&lt;br&gt;")
        self.write("value of request.query: %s" % self.request.query)


application = tornado.web.Application([
    (r"/distance", DistanceService),
    (r"/", WService),
])

if __name__ == "__main__":
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(9000)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>19480900</id><snippet>PlainText.encode('base64','strict')
</snippet></ROW><ROW><id>19480900</id><snippet>PlainText.decode('base64','strict')
</snippet></ROW><ROW><id>19481110</id><snippet>pics = [None, None, None, None]   #  This will be the list that will hold a reference to each of your PhotoImages.

def randp(*args):
    w = ['wb.gif', 'wc.gif', 'wd.gif', 'we.gif']
    random.shuffle(w)
    am = 1

    for k, i in enumerate(w):    # Enumerate provides an index for the pics list.
        pic = PhotoImage(file=i)
        pics[k] = pic      # Keep a reference to the PhotoImage in the list, so your PhotoImage does not get garbage-collected.
        ttk.Label(mainframe, image=pic).grid(column=am, row=0, sticky=(W, E))
        am+=1
</snippet></ROW><ROW><id>19481117</id><snippet>replace</snippet></ROW><ROW><id>19481117</id><snippet>&gt;&gt;&gt; df = DataFrame({'column': ['A', 'B', 'C', 'P', 'Z']})
&gt;&gt;&gt; df['column'].replace('P', 'Z')
0    A
1    B
2    C
3    Z
4    Z
</snippet></ROW><ROW><id>19481128</id><snippet>with open('100temp.txt') as in_file, open('new_100temp.txt', 'w') as out_file:
    for line1, line2, line3, line4 in grouper(in_file, 4):
         # modify 4 lines
         out_file.writelines([line1, line2, line3, line4])
</snippet></ROW><ROW><id>19481128</id><snippet>grouper(it, n)</snippet></ROW><ROW><id>19481128</id><snippet>n</snippet></ROW><ROW><id>19481128</id><snippet>it</snippet></ROW><ROW><id>19481128</id><snippet>itertools</snippet></ROW><ROW><id>19481128</id><snippet>readlines()</snippet></ROW><ROW><id>19481166</id><snippet>{% strip_html your_text "em, b, code, li" %}
</snippet></ROW><ROW><id>19481198</id><snippet>&gt;&gt;&gt; (0x41424344).to_bytes(4, 'big')
b'ABCD'
</snippet></ROW><ROW><id>19481198</id><snippet>struct</snippet></ROW><ROW><id>19481198</id><snippet>&gt;&gt;&gt; struct.pack('&gt;i', 0x41424344)
'ABCD'
</snippet></ROW><ROW><id>19481209</id><snippet>df.plot(figsize=(20,4))
</snippet></ROW><ROW><id>19481375</id><snippet>;</snippet></ROW><ROW><id>19481375</id><snippet>import json

yourData = []
with open("fileName.txt") as inputData:
    for line in inputData:
        try:
            yourData.append(json.loads(line.rstrip(';\n')))
        except ValueError:
            print "Skipping invalid line {0}".format(repr(line))

print yourData
</snippet></ROW><ROW><id>19481375</id><snippet>;</snippet></ROW><ROW><id>19481375</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; 
&gt;&gt;&gt; yourData = []
&gt;&gt;&gt; with open("fileName.txt") as inputData:
...     for line in inputData:
...         try:
...             yourData.append(json.loads(line.rstrip(';\n')))
...         except ValueError:
...             print "Skipping invalid line {0}".format(repr(line))
... 
Skipping invalid line '\n'
&gt;&gt;&gt; print yourData
[{u'a': u'3.80', u'c': u'-', u'b': u'3.60', u'e': u'OPRA', u'name': u'', u'oi': u'0', u'cid': u'160686859281645', u'vol': u'-', u'expiry': u'Nov 16, 2013', u'p': u'-', u's': u'JBLU131116P00011000', u'strike': u'11.00'}, {u'a': u'4.80', u'c': u'-', u'b': u'4.60', u'e': u'OPRA', u'name': u'', u'oi': u'0', u'cid': u'721018656376031', u'vol': u'-', u'expiry': u'Nov 16, 2013', u'p': u'-', u's': u'JBLU131116P00012000', u'strike': u'12.00'}]
&gt;&gt;&gt;
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(yourData
... )
[{u'a': u'3.80',
  u'b': u'3.60',
  u'c': u'-',
  u'cid': u'160686859281645',
  u'e': u'OPRA',
  u'expiry': u'Nov 16, 2013',
  u'name': u'',
  u'oi': u'0',
  u'p': u'-',
  u's': u'JBLU131116P00011000',
  u'strike': u'11.00',
  u'vol': u'-'},
 {u'a': u'4.80',
  u'b': u'4.60',
  u'c': u'-',
  u'cid': u'721018656376031',
  u'e': u'OPRA',
  u'expiry': u'Nov 16, 2013',
  u'name': u'',
  u'oi': u'0',
  u'p': u'-',
  u's': u'JBLU131116P00012000',
  u'strike': u'12.00',
  u'vol': u'-'}]
</snippet></ROW><ROW><id>19481401</id><snippet>from __future__ import (print_function, division, unicode_literals, absolute_import)
</snippet></ROW><ROW><id>19481401</id><snippet>unicode_literals
</snippet></ROW><ROW><id>19481584</id><snippet>import celery
import datetime
from celery import chord

@celery.task
def dummy_task(res=None, start_time=None):
    print datetime.datetime.now() - start_time

def send_my_task():
    chord(my_task.s(), dummy_task.s(start_time=datetime.datetime.now()).delay()
</snippet></ROW><ROW><id>19481584</id><snippet>send_my_task</snippet></ROW><ROW><id>19481584</id><snippet>dummy_task</snippet></ROW><ROW><id>19481609</id><snippet>while guess != correct and guess != "":</snippet></ROW><ROW><id>19481609</id><snippet>word</snippet></ROW><ROW><id>19481609</id><snippet>if</snippet></ROW><ROW><id>19481609</id><snippet>elif</snippet></ROW><ROW><id>19481609</id><snippet>word</snippet></ROW><ROW><id>19481609</id><snippet>correct</snippet></ROW><ROW><id>19481609</id><snippet>word</snippet></ROW><ROW><id>19481609</id><snippet>if guess == "hint" and correct == "python":
    hint = "True"
    print("It's a snake")
    guess = input("Your guess: ")
elif guess == "hint" and correct == "jumble":
    hint = "True"
    print("It's a game")
    guess = input("Your guess: ")
elif guess == "hint" and correct == "easy":
    hint = "True"
    print("It's type of difficulty")
    guess = input("Your guess: ")
elif guess == "hint" and correct == "difficulty":
    hint = "True"
    print("It's type of difficulty")
    guess = input("Your guess: ")
elif guess == "hint" and correct == "answer":
    hint = "True"
    print("It's the opposite of question")
    guess = input("Your guess: ")
elif guess == "hint" and correct == "xylophone":
    hint = "True"
    print("Don't know WTF is that")
    guess = input("Your guess: ")
else:
    print("Sorry, that's not it.")
    guess = input("Your guess: ")
</snippet></ROW><ROW><id>19482021</id><snippet>&gt;&gt;&gt; from re import sub
&gt;&gt;&gt; mystr = "Hello (John)"
&gt;&gt;&gt; sub("(?s)\(.*?John.*?\)", "", mystr)
'Hello '
&gt;&gt;&gt; mystr = "Hello (Sally)"
&gt;&gt;&gt; sub("(?s)\(.*?John.*?\)", "", mystr)
'Hello (Sally)'
&gt;&gt;&gt; mystr = "Hello (John) My John (Sally)"
&gt;&gt;&gt; sub("(?s)\(.*?John.*?\)", "", mystr)
'Hello  My John (Sally)'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19482021</id><snippet>(?s)   # Dot-all flag to have . match newline characters
\(     # Opening parenthesis
.*?    # Zero or more characters matching non-greedily
John   # Target
.*?    # Zero or more characters matching non-greedily
\)     # Closing parenthesis
</snippet></ROW><ROW><id>19482036</id><snippet>app.ProcessEvents()</snippet></ROW><ROW><id>19482221</id><snippet>list_vars = [
    "8-800-500-1231",
    "John Smith",
    "8-800-600-1245",
    "Tommy Atkins",
    "8-800-800-8314",
    "Joe Blow"
]

print [list(var) for var in zip(list_vars[::2], list_vars[1::2])]
</snippet></ROW><ROW><id>19482221</id><snippet>&gt;&gt;&gt; zip(list_vars[::2], list_vars[1::2])
[('8-800-500-1231', 'John Smith'), ('8-800-600-1245', 'Tommy Atkins'), ('8-800-800-8314', 'Joe Blow')]
</snippet></ROW><ROW><id>19482384</id><snippet>id1</snippet></ROW><ROW><id>19482384</id><snippet>id2</snippet></ROW><ROW><id>19482384</id><snippet>get_eid</snippet></ROW><ROW><id>19482384</id><snippet>eid = graph.get_eid(source, target)
edge = graph.es[eid]
</snippet></ROW><ROW><id>19482384</id><snippet>get_eid</snippet></ROW><ROW><id>19482384</id><snippet>get_eid</snippet></ROW><ROW><id>19482384</id><snippet>get_eid</snippet></ROW><ROW><id>19482384</id><snippet>try:
    eid = graph.get_eid(source, target)
except igraph.InternalError:
    eid = graph.ecount()
    graph.add_edge(source, target, weight=0)
</snippet></ROW><ROW><id>19482384</id><snippet>except</snippet></ROW><ROW><id>19482384</id><snippet>add_edge</snippet></ROW><ROW><id>19482384</id><snippet>weight</snippet></ROW><ROW><id>19482384</id><snippet>try..except</snippet></ROW><ROW><id>19482384</id><snippet>edge["weight"] += 1
</snippet></ROW><ROW><id>19482400</id><snippet>for i in range(3):
    l=plt.vlines(i,0,20,linestyles=[(0,(9,3,4,4))],colors='r')
</snippet></ROW><ROW><id>19482400</id><snippet>for i in xvalues: print i</snippet></ROW><ROW><id>19482400</id><snippet>for i in range(100): print xvalues[i]</snippet></ROW><ROW><id>19482413</id><snippet>import threading
import queue

class Worker(threading.Thread):
    def __init__(self, name):
        threading.Thread.__init__(self)
        self.name = name
        self.jobs_queue = queue.Queue()
        self.results_list = list()
    def run(self):
        while True:
            testNumber = self.jobs_queue.get()
            if testNumber == "END":
                return
            # here, do your stuff with 'testNumber'
            # for example, let's multiply it by 2
            answer = testNumber * 2
            # results are appended to a list
            self.results_list.append((self.name,testNumber,answer))
    def calc(self, n):
        self.jobs_queue.put(n)
        if not self.is_alive():
            self.start()
    def get_result(self):
        return self.results_list
    def stop(self):
        # tell the thread to stop,
        # once jobs in queue are done
        self.jobs_queue.put("END")
        self.join()

workers = [Worker('thread 1'), Worker('thread 2'), Worker('thread 3'), Worker('thread 4')]

for n in range(100):
    w = workers[n % 4]
    w.calc(n)

for w in workers:
    w.stop()

for w in workers:
    print(w.get_result())
</snippet></ROW><ROW><id>19482504</id><snippet>&gt;&gt;&gt; a = np.random.randint(0, 10, (10, 5))
&gt;&gt;&gt; a
array([[4, 9, 7, 2, 9],
       [1, 9, 5, 0, 8],
       [1, 7, 7, 8, 4],
       [6, 2, 1, 9, 6],
       [6, 2, 0, 0, 8],
       [5, 5, 8, 4, 5],
       [6, 8, 8, 8, 8],
       [2, 2, 3, 4, 3],
       [3, 6, 2, 1, 2],
       [6, 3, 2, 4, 0]])
&gt;&gt;&gt; a[:, 4] == 0
array([False, False, False, False, False, False, False, False, False,  True], dtype=bool)
&gt;&gt;&gt; b = np.random.rand(10, 5)
&gt;&gt;&gt; b
array([[ 0.37363295,  0.96763033,  0.72892652,  0.77217485,  0.86549555],
       [ 0.83041897,  0.35277681,  0.13011611,  0.82887195,  0.87522863],
       [ 0.88325189,  0.67976957,  0.56058782,  0.58438597,  0.10571746],
       [ 0.27305838,  0.72306733,  0.01630463,  0.86069002,  0.9458257 ],
       [ 0.23113894,  0.30396521,  0.92840314,  0.39544522,  0.59708927],
       [ 0.71878406,  0.91327744,  0.71407427,  0.65388644,  0.416599  ],
       [ 0.83550209,  0.85024774,  0.96788451,  0.72253464,  0.41661953],
       [ 0.61458993,  0.34527785,  0.20301719,  0.10626226,  0.00773484],
       [ 0.87275531,  0.54878131,  0.24933454,  0.29894835,  0.66966912],
       [ 0.59533278,  0.15037691,  0.37865046,  0.99402371,  0.17325722]])
&gt;&gt;&gt; b[a[:,4] == 0]
array([[ 0.59533278,  0.15037691,  0.37865046,  0.99402371,  0.17325722]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19482504</id><snippet>find</snippet></ROW><ROW><id>19482504</id><snippet>np.where</snippet></ROW><ROW><id>19482504</id><snippet>&gt;&gt;&gt; indices = np.where(a[:, 4] == 0)
&gt;&gt;&gt; b[indices[0]]
array([[ 0.59533278,  0.15037691,  0.37865046,  0.99402371,  0.17325722]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19482983</id><snippet>files_to_Change</snippet></ROW><ROW><id>19482983</id><snippet>&gt;&gt;&gt; files = os.listdir('test_folder')
&gt;&gt;&gt; print files[0]
.com.apple.timemachine.supported
</snippet></ROW><ROW><id>19482983</id><snippet>files_to_Change</snippet></ROW><ROW><id>19482983</id><snippet>import os
join = os.path.join

src = 'files_to_Change'
files = os.listdir( src )


for i in files:
    old = i
    new, ext = os.path.splitext ( old )
    os.rename( join( src, old ), join( src, fileName ))
</snippet></ROW><ROW><id>19482987</id><snippet>In [1]: a = np.arange(8)[:,None].repeat(8,axis=1)

In [2]: a
Out[2]: 
array([[0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2, 2, 2, 2],
       [3, 3, 3, 3, 3, 3, 3, 3],
       [4, 4, 4, 4, 4, 4, 4, 4],
       [5, 5, 5, 5, 5, 5, 5, 5],
       [6, 6, 6, 6, 6, 6, 6, 6],
       [7, 7, 7, 7, 7, 7, 7, 7]])

In [3]: b = a.reshape(2,4,2,4)

In [4]: b
Out[4]: 
array([[[[0, 0, 0, 0],
         [0, 0, 0, 0]],
         ...
        [[7, 7, 7, 7],
         [7, 7, 7, 7]]]])

In [5]: b.transpose(0,2,1,3)
Out[5]: 
array([[[[0, 0, 0, 0],
         [1, 1, 1, 1],
         [2, 2, 2, 2],
         [3, 3, 3, 3]],

        [[0, 0, 0, 0],
         [1, 1, 1, 1],
         [2, 2, 2, 2],
         [3, 3, 3, 3]]],


       [[[4, 4, 4, 4],
         [5, 5, 5, 5],
         [6, 6, 6, 6],
         [7, 7, 7, 7]],

        [[4, 4, 4, 4],
         [5, 5, 5, 5],
         [6, 6, 6, 6],
         [7, 7, 7, 7]]]])
</snippet></ROW><ROW><id>19483025</id><snippet>list(my_dataframe.columns.values)
</snippet></ROW><ROW><id>19483143</id><snippet>result = float(id)/2000
if result == int(result):
  xml_whole += xml
  xml = ""
</snippet></ROW><ROW><id>19483297</id><snippet>import base64
with open("output.bin","w") as f:
      f.write(base64.b64encode(open("input.txt")
</snippet></ROW><ROW><id>19483297</id><snippet>import base64
original_txt = base64.b64decode(open("output.bin").read())
</snippet></ROW><ROW><id>19483389</id><snippet>filename = message.split()[1]
</snippet></ROW><ROW><id>19483389</id><snippet>message</snippet></ROW><ROW><id>19483389</id><snippet>message</snippet></ROW><ROW><id>19483389</id><snippet>"GET /file.html cruft..."</snippet></ROW><ROW><id>19483389</id><snippet>"GET /path/file.html cruft..."</snippet></ROW><ROW><id>19483389</id><snippet>split</snippet></ROW><ROW><id>19483389</id><snippet>["GET", "/file.html", "cruft..."]</snippet></ROW><ROW><id>19483389</id><snippet>filename</snippet></ROW><ROW><id>19483389</id><snippet>"/file.html"</snippet></ROW><ROW><id>19483389</id><snippet>"/directory/subdirectory/file.html"</snippet></ROW><ROW><id>19483389</id><snippet>f = open(filename[1:]) 
</snippet></ROW><ROW><id>19483389</id><snippet>filename</snippet></ROW><ROW><id>19483389</id><snippet>filename</snippet></ROW><ROW><id>19483389</id><snippet>/</snippet></ROW><ROW><id>19483437</id><snippet>json1_data = json.loads.(json1_str)[0]
</snippet></ROW><ROW><id>19483437</id><snippet>datapoints = json1_data['datapoints']
</snippet></ROW><ROW><id>19483437</id><snippet>datapoints[0:5][0]</snippet></ROW><ROW><id>19483437</id><snippet>datapoints[0:5]</snippet></ROW><ROW><id>19483437</id><snippet>[0]</snippet></ROW><ROW><id>19483437</id><snippet>[p[0] for p in datapoints[0:5]]
</snippet></ROW><ROW><id>19483437</id><snippet>sum(p[0] for p in datapoints[0:5])/5. # Result is 35.8
</snippet></ROW><ROW><id>19483437</id><snippet>import numpy
json1_file = open('json1')
json1_str = json1_file.read()
json1_data = json.loads.(json1_str)[0]
datapoints = numpy.array(json1_data['datapoints'])
avg = datapoints[0:5,0].mean()
# avg is now 35.8
</snippet></ROW><ROW><id>19483437</id><snippet>,</snippet></ROW><ROW><id>19483625</id><snippet>PEP 8</snippet></ROW><ROW><id>19483625</id><snippet>Modules</snippet></ROW><ROW><id>19483625</id><snippet>modules</snippet></ROW><ROW><id>19483664</id><snippet>try</snippet></ROW><ROW><id>19483664</id><snippet>except</snippet></ROW><ROW><id>19483664</id><snippet>&gt;&gt;&gt; num = input('Enter a number: ')
Enter a number: f
</snippet></ROW><ROW><id>19483664</id><snippet>input</snippet></ROW><ROW><id>19483664</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'f' is not defined
</snippet></ROW><ROW><id>19483664</id><snippet>Try</snippet></ROW><ROW><id>19483664</id><snippet>except</snippet></ROW><ROW><id>19483664</id><snippet>try:
    num = input('Enter a number: ')
</snippet></ROW><ROW><id>19483664</id><snippet>try:
    num = input('Enter a number: ')
except:
    print 'input must be a number or already defined in the program'
    # do something else
</snippet></ROW><ROW><id>19483664</id><snippet>input</snippet></ROW><ROW><id>19483719</id><snippet>a</snippet></ROW><ROW><id>19483719</id><snippet>'l1p'</snippet></ROW><ROW><id>19483719</id><snippet>[v for k,v in a.items() if k[2] == 'l1p']
</snippet></ROW><ROW><id>19483719</id><snippet>(v for k,v in a.items() if k[2] == 'l1p')
</snippet></ROW><ROW><id>19483719</id><snippet>a.items()</snippet></ROW><ROW><id>19483719</id><snippet>a.iteritems()</snippet></ROW><ROW><id>19483719</id><snippet>{k: v for k,v in a.items() if k[2] == 'l1p'}
</snippet></ROW><ROW><id>19483719</id><snippet>(key, value)</snippet></ROW><ROW><id>19483719</id><snippet>((k,v) for k,v in a.items() if k[2] == 'l1p')
</snippet></ROW><ROW><id>19483939</id><snippet>check_call(['sh', 'script.sh', "firstArgument", '3030', "thirdArgument", "fourthArgument"])
</snippet></ROW><ROW><id>19483939</id><snippet>portNum = 3030
check_call(['sh', 'script.sh', "firstArgument", str(portNum), "thirdArgument", "fourthArgument"])
</snippet></ROW><ROW><id>19483939</id><snippet>shell=True</snippet></ROW><ROW><id>19483939</id><snippet>shell=True</snippet></ROW><ROW><id>19483948</id><snippet>runs = []
curr = 0
for x in list1:
    if x == 0:
        if curr != 0: 
            runs.append(curr)
            curr = 0
    else:
        curr = curr + 1
if curr &gt; 0: runs.append(curr)
</snippet></ROW><ROW><id>19484046</id><snippet>ZipFile.extractall([path[, members[, pwd]]])
</snippet></ROW><ROW><id>19484046</id><snippet>def unzip(source_filename, dest_dir):
    with zipfile.ZipFile(source_filename) as zf:
        zf.extractall(dest_dir)
</snippet></ROW><ROW><id>19484252</id><snippet>import numpy as np
from matplotlib import cm
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# create supporting points in polar coordinates
r = np.linspace(0,1.25,50)
p = np.linspace(0,2*np.pi,50)
R,P = np.meshgrid(r,p)
# transform them to cartesian system
x, y = R * np.cos(P), R * np.sin(P)

rho = np.sqrt(x**2 + y**2)

# Calculate &amp; Plot
z = rho**2
fig = plt.figure()
ax = fig.gca(projection='3d')
surf = ax.plot_surface(x, y, z, rstride=1, cstride=1,  cmap=cm.bone, alpha=0.15, linewidth=0.25)
plt.show()
</snippet></ROW><ROW><id>19484290</id><snippet>with open(fname, 'r') as f:
  words = re.split('(["\'@&amp;,;:\(\)\s+\*\?\.]|\w+)', f.read())

#because each list element is separated from the next by an empty string:
while '' in words:
    words.remove('')    
print (words)           
</snippet></ROW><ROW><id>19484290</id><snippet>&gt;&gt;&gt;  ['BRIAN', ':', ' ', 'What', ' ', 'will', ' ', 'they', ' ', 
'do', ' ', 'to', ' ', 'me', '?', '\n', 'BEN', ':', ' ', 'Oh', ',', ' ',
'you', "'", 'll', ' ', 'probably', ' ', 'get', ' ', 'away', ' ',
'with', ' ', 'crucifixion', '.', '\n', 'BRIAN', ':', ' ',
'Crucifixion', '?', '!', '\n', 'BEN', ':', ' ', 'Yeah', ',', ' ',
'first', ' ', 'offence', '.', ' ', '\n']
</snippet></ROW><ROW><id>19484315</id><snippet>sqlite3</snippet></ROW><ROW><id>19484315</id><snippet>unittest</snippet></ROW><ROW><id>19484315</id><snippet>assertRaises</snippet></ROW><ROW><id>19484315</id><snippet>decimal</snippet></ROW><ROW><id>19484315</id><snippet>localcontext</snippet></ROW><ROW><id>19484315</id><snippet>threading</snippet></ROW><ROW><id>19484315</id><snippet>warnings</snippet></ROW><ROW><id>19484315</id><snippet>tarfile</snippet></ROW><ROW><id>19484315</id><snippet>zipfile</snippet></ROW><ROW><id>19484315</id><snippet>test.test_support</snippet></ROW><ROW><id>19484315</id><snippet>stdout</snippet></ROW><ROW><id>19484315</id><snippet>try:</snippet></ROW><ROW><id>19484315</id><snippet>finally:</snippet></ROW><ROW><id>19484376</id><snippet>O(1)</snippet></ROW><ROW><id>19484453</id><snippet>repliesToComments()</snippet></ROW><ROW><id>19484453</id><snippet>repliesToComments()</snippet></ROW><ROW><id>19484453</id><snippet>comment.replies</snippet></ROW><ROW><id>19484453</id><snippet>botComments + repliesToComments(comments, author)
</snippet></ROW><ROW><id>19484453</id><snippet>botComments</snippet></ROW><ROW><id>19484453</id><snippet>botComments += repliesToComments(comments, author)
</snippet></ROW><ROW><id>19484564</id><snippet>&gt;&gt;&gt; ns=[2, 2, 2, 0, 2, 1, 3, 3]
&gt;&gt;&gt; {x: ns.count(x) for x in set(ns) if ns.count(x) &gt; 1}
{2: 4, 3: 2}
</snippet></ROW><ROW><id>19484570</id><snippet>def find_and_replace(d, key, replacement="replacement"):
    for k,v in d.items():
        if isinstance(v, dict):
            print "found nested dict"
            if find_and_replace(v, key):
                return True

        elif isinstance(v, str):
            if k==key:
                d.update({k:replacement})
                print "replaced [%s] with [%s]" % (v, replacement)
                return True
</snippet></ROW><ROW><id>19484570</id><snippet>&gt;&gt;&gt; etc = {'this': {'that': {'theother': 'a'}}}
&gt;&gt;&gt; find_and_replace(etc, "theother")
found nested dict
found nested dict
replaced [a] with [replacement]
&gt;&gt;&gt; print etc
{'this': {'that': {'theother': 'replacement'}}}
</snippet></ROW><ROW><id>19484570</id><snippet>elif isinstance(v, str):</snippet></ROW><ROW><id>19484570</id><snippet>module</snippet></ROW><ROW><id>19484570</id><snippet>import collections
class module_class(object):
    def __init__(self, submods={}):
        self.name = "name"
        self.submods = collections.OrderedDict(submods)
</snippet></ROW><ROW><id>19484714</id><snippet>def functionA():
    var1 = hi
    var2 = bye
    return (var1, var2)


class A(object):
    def functionB(self):
        var1, var2 = functionA()
        var3 = "something not in functionA"
</snippet></ROW><ROW><id>19484957</id><snippet>    input("&gt;&gt; ")

    if input(isValidCMD):
        print("True")
</snippet></ROW><ROW><id>19484957</id><snippet>    cmd = input("&gt;&gt; ")

    if isValidCMD(cmd):
        print("True")
</snippet></ROW><ROW><id>19485050</id><snippet>img = open('images/' + img_id + '.jpg', 'wb')
</snippet></ROW><ROW><id>19485050</id><snippet>img = open('/images/' + img_id + '.jpg', 'wb')
</snippet></ROW><ROW><id>19485123</id><snippet>if ((type(varA) or type(varB) ) == type('t')):
</snippet></ROW><ROW><id>19485123</id><snippet>type(varA) or type(varB)</snippet></ROW><ROW><id>19485123</id><snippet>varA</snippet></ROW><ROW><id>19485123</id><snippet>or</snippet></ROW><ROW><id>19485123</id><snippet>type('t')</snippet></ROW><ROW><id>19485123</id><snippet>str</snippet></ROW><ROW><id>19485123</id><snippet>varA</snippet></ROW><ROW><id>19485123</id><snippet>varB</snippet></ROW><ROW><id>19485123</id><snippet>if type(varA) == type('t') or type(varB) == type('t'):
</snippet></ROW><ROW><id>19485130</id><snippet>-I&lt;dir&gt;
</snippet></ROW><ROW><id>19485153</id><snippet>decimal</snippet></ROW><ROW><id>19485153</id><snippet>from decimal import *
getcontext().prec = 3
resBase = [Decimal(x) for x in [1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 
    2.0, 2.2, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 
    6.2, 6.8, 7.5, 8.2, 9.1]]
print [res * 100 for res in resBase]
</snippet></ROW><ROW><id>19485153</id><snippet>[Decimal('100'), Decimal('110'), Decimal('120'), Decimal('130'), Decimal('150'), 
Decimal('160'), Decimal('180'), Decimal('200'), Decimal('220'), Decimal('240'), 
Decimal('270'), Decimal('300'), Decimal('330'), Decimal('360'), Decimal('390'), 
Decimal('430'), Decimal('470'), Decimal('510'), Decimal('560'), Decimal('620'), 
Decimal('680'), Decimal('750'), Decimal('820'), Decimal('910')]
</snippet></ROW><ROW><id>19485294</id><snippet>"HTTP/1.1 404 Not Found\r\n\r\n"</snippet></ROW><ROW><id>19485294</id><snippet>"404 Not Found"</snippet></ROW><ROW><id>19485294</id><snippet>serverSocket</snippet></ROW><ROW><id>19485294</id><snippet>accept()</snippet></ROW><ROW><id>19485349</id><snippet>results = []

for (...):
   results.append(f)
</snippet></ROW><ROW><id>19485349</id><snippet>len(force) == 6</snippet></ROW><ROW><id>19485349</id><snippet>len(force) - 1</snippet></ROW><ROW><id>19485762</id><snippet>s = ['2-3-1-*-*','2-3-*-*-*','2-1-*-*-*','1-4-3-*-*','2-3-2-*-*','2-1-3-*-*','1-1-*-*-*','2-3-1-1-*']

def isSubElement(subelement, element):
    return (subelement != element) and all([(e1 == e2) or (e1 == "*" and e2 != "*") for e1, e2 in zip(element.split('-'), subelement.split('-'))])

def parseTree(elementList):
    if len(elementList) == 0:
        return {}
    elements = elementList[:]
    d = {}
    for element1 in elements:
        parent = True
        for element2 in elements:
            if isSubElement(element1, element2):
                parent = False
                break
        if parent:
            d[element1] = {}
    for element1 in d.keys():
        d[element1] = parseTree([element for element in elements if isSubElement(element, element1)])
    return d

print parseTree(s)
</snippet></ROW><ROW><id>19485762</id><snippet>{'2-1-*-*-*': 
    {'2-1-3-*-*': 
        {}},  
'1-4-3-*-*': 
    {},  
'1-1-*-*-*': 
    {},  
'2-3-*-*-*': 
    {'2-3-1-*-*': 
        {'2-3-1-1-*': 
            {}}, 
    '2-3-2-*-*': 
        {}}}
</snippet></ROW><ROW><id>19485800</id><snippet>function Test() {}

Test.prototype.say = function (word) {
    alert(word);
}

Test.prototype.speak = function () {
    this.say('hello');
}

Test.prototype.say = function (word) {
    console.log(word);
}
</snippet></ROW><ROW><id>19485800</id><snippet>function Test() {}

Test.prototype.say = function (word) {
    alert(word);
}

Test.prototype.speak = function () {
    this.say('hello');
}

function TestDerived() {}

TestDerived.prototype = new Test(); // javascript's simplest form of inheritance.

TestDerived.prototype.say = function (word) {
    console.log(word);
}
</snippet></ROW><ROW><id>19485800</id><snippet>function Test() {}

Test.prototype.say = function (word) {
    alert(word);
}

Test.prototype.speak = function () {
    this.say('hello');
}

var myTest = new Test();

myTest.say = function (word) {
    console.log(word);
}
</snippet></ROW><ROW><id>19485804</id><snippet>random.randint</snippet></ROW><ROW><id>19485804</id><snippet>int</snippet></ROW><ROW><id>19485804</id><snippet>str</snippet></ROW><ROW><id>19485804</id><snippet>student0Abs_EX + '\t\t'</snippet></ROW><ROW><id>19485804</id><snippet>str(student0Abs_EX) + '\t\t'</snippet></ROW><ROW><id>19485804</id><snippet>str</snippet></ROW><ROW><id>19485836</id><snippet>df_new = df.reset_index()
df_new.groupby(['item_id']).X.agg(np.mean) 
</snippet></ROW><ROW><id>19485836</id><snippet>df.sort(['item_id', 'date'], inplace = True)

def sequence_id(item):
    item['seq_id'] = range(0,len(item)-1,1)
    return item

df_with_seq_id = df.groupby(['item_id']).apply(sequence_id)
df_with_seq_id.groupby(['seq_id']).agg(np.mean)
</snippet></ROW><ROW><id>19485836</id><snippet>seq_id</snippet></ROW><ROW><id>19485836</id><snippet>item_id</snippet></ROW><ROW><id>19485836</id><snippet>seq_id</snippet></ROW><ROW><id>19485890</id><snippet>runCMD(cmd, 1, Player) # or runCMD(cmd, Player, 1) &lt;= looks like they are in the wrong order
</snippet></ROW><ROW><id>19485890</id><snippet>runCMD</snippet></ROW><ROW><id>19485890</id><snippet>Commands</snippet></ROW><ROW><id>19485890</id><snippet>args</snippet></ROW><ROW><id>19485890</id><snippet>*</snippet></ROW><ROW><id>19485890</id><snippet>def runCMD(cmd, Player, *args):
    Commands[cmd](Player, *args)

def main(Player): #Main function
    Player.dead = False
    while(Player.dead == False):
        cmd = input("&gt;&gt; ")

        if isValidCMD(cmd):
            runCMD(cmd, Player, 0, 1)
        else:
            print("Please enter a valid command.")
</snippet></ROW><ROW><id>19485904</id><snippet>import os
class MainClass:
    def __init__(self):
        self.myVar = "a variable"
        self.listOfLoadedModules = []

        for f in os.listdir("."):
            fileName, extension = os.path.splitext(f)
            if extension == ".py":
                self.listOfLoadedModules.append(__import__(fileName))

    def callMe(self):
        for currentModule in self.listOfLoadedModules:
            currentModule.__dict__.get("callMe")(self)

myMain = MainClass()
myMain.callMe()
</snippet></ROW><ROW><id>19485904</id><snippet>callMe</snippet></ROW><ROW><id>19485904</id><snippet>MainClass</snippet></ROW><ROW><id>19485904</id><snippet>callMe</snippet></ROW><ROW><id>19485904</id><snippet>callMe</snippet></ROW><ROW><id>19485904</id><snippet>MainClass</snippet></ROW><ROW><id>19485904</id><snippet>callMe</snippet></ROW><ROW><id>19485904</id><snippet>RuntimeError: maximum recursion depth exceeded
</snippet></ROW><ROW><id>19485905</id><snippet>continue</snippet></ROW><ROW><id>19485905</id><snippet>pass</snippet></ROW><ROW><id>19485905</id><snippet>try:
    # Code with potential error
except ErrortoCatch:
    pass
</snippet></ROW><ROW><id>19485905</id><snippet>except:</snippet></ROW><ROW><id>19485905</id><snippet>except:</snippet></ROW><ROW><id>19485905</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>19485905</id><snippet>try</snippet></ROW><ROW><id>19485905</id><snippet>except</snippet></ROW><ROW><id>19485905</id><snippet>link.get ('href')</snippet></ROW><ROW><id>19485905</id><snippet>link.get('href')</snippet></ROW><ROW><id>19485952</id><snippet>with open("input.csv", "r") as input_file:
    header = input_file.readline()[:-1] #this is to remove trailing '\n'
    header += ",Table exists?"
    output_lines = [header]

    for line in input_file:
         output_lines.append(line[:-1])
         if 'table' in line.split(",")[3]:
             output_lines[-1]+=",table exists"
         else:
             output_lines[-1]+=",No table found"

with open("output.csv", "w") as output_file:
    output_file.write("\n".join(output_lines))
</snippet></ROW><ROW><id>19485979</id><snippet>codecs</snippet></ROW><ROW><id>19485979</id><snippet>import codecs
with codecs.open(os.getcwd () + "/ files /" + "actions.txt", "r", encoding="utf8") as temp:
    action = list(temp)
</snippet></ROW><ROW><id>19486017</id><snippet>Crypto</snippet></ROW><ROW><id>19486080</id><snippet>FTP.retrlines</snippet></ROW><ROW><id>19486080</id><snippet>retrlines</snippet></ROW><ROW><id>19486080</id><snippet>retrbinary</snippet></ROW><ROW><id>19486080</id><snippet>..retrlines ..</snippet></ROW><ROW><id>19486080</id><snippet>ftp.retrlines('RETR cbt.settle.s.txt', lambda line: settles.write(line + '\n')) 
</snippet></ROW><ROW><id>19486108</id><snippet>nowDate = date.today()

for line in sourceFile:
    s = re.compile('(\d{2}\/\d{2}\/\d{4})\s(C\d{3}\sS\d{3})')
    s1 = re.search(s, line)
    if s1:
        date = s1.group(1)
        date = datetime.strptime(date, '%d/%m/%Y')
        date = date.date()
        endDate = date + timedelta(days=731)
        if endDate &lt;= nowDate:
            fileLst.write(s1.group())
            fileLst.write('\n')
        else:
            print ('not ready: ', date.strftime('%d-%m-%Y'))
            ntrdLst.write(s1.group(1))
            ntrdLst.write('\n')
</snippet></ROW><ROW><id>19486288</id><snippet>{ "same" : 4, "same": 5}  
</snippet></ROW><ROW><id>19486288</id><snippet>JSONNode.find("req"); 
</snippet></ROW><ROW><id>19486288</id><snippet>JSONNode n = libjson::parse(json)
JSONNode::json_iterator it = n.find("req");
// iterate over the array
if (it[i].at("req").as_string() == "change admin password") {
  return 1;
}
</snippet></ROW><ROW><id>19486288</id><snippet>areq</snippet></ROW><ROW><id>19486288</id><snippet>for (JSONNode::json_iterator jsonIter = n.begin(); jsonIter != n.end(); jsonIter++) {
    if (jsonIter-&gt;name() == "req" &amp;&amp;
        jsonIter-&gt;as_string() == "change admin password") 
    {
        // found something do magic here
    }
}
</snippet></ROW><ROW><id>19486288</id><snippet>req</snippet></ROW><ROW><id>19486288</id><snippet>req</snippet></ROW><ROW><id>19486312</id><snippet>[[]]</snippet></ROW><ROW><id>19486312</id><snippet>name = []</snippet></ROW><ROW><id>19486312</id><snippet>for name, group in df.groupby('HurricaneName'):</snippet></ROW><ROW><id>19486312</id><snippet>for name, group in df.groupby(['HurricaneName', 'Year'])</snippet></ROW><ROW><id>19486312</id><snippet>col_name = 'State'

for name, group in df.groupby([col_name]):
</snippet></ROW><ROW><id>19486374</id><snippet>persistent.Persistent</snippet></ROW><ROW><id>19486402</id><snippet>Application([(r'/user/(.*)', ProfileHandler, dict(database=database)),])</snippet></ROW><ROW><id>19486402</id><snippet>[(r'/user/(.*)', ProfileHandler, dict(database=database)),]</snippet></ROW><ROW><id>19486402</id><snippet>handlers</snippet></ROW><ROW><id>19486402</id><snippet>(r'/user/(.*)', ProfileHandler, dict(database=database))</snippet></ROW><ROW><id>19486402</id><snippet>dict(database=database)</snippet></ROW><ROW><id>19486402</id><snippet>dict(database=database)</snippet></ROW><ROW><id>19486402</id><snippet>{'database': database}</snippet></ROW><ROW><id>19486402</id><snippet>dict(database=database, hello='world', environment='development', etc='test')</snippet></ROW><ROW><id>19486402</id><snippet>dict</snippet></ROW><ROW><id>19486508</id><snippet>import numpy as np
a = np.array([[1,2,3],[1,2,3],[1,2,3]])
print a[:,1:]
</snippet></ROW><ROW><id>19486508</id><snippet>[[2 3]
 [2 3]
 [2 3]]
</snippet></ROW><ROW><id>19486635</id><snippet>Image.open</snippet></ROW><ROW><id>19486635</id><snippet>from PIL import Image
im = Image.open("bride.jpg") # open the file and "load" the image in one statement
</snippet></ROW><ROW><id>19486635</id><snippet>fin = open("bride.jpg") # open the file
img = Image.open(fin) # "load" the image from the opened file
</snippet></ROW><ROW><id>19486803</id><snippet>np.array</snippet></ROW><ROW><id>19486803</id><snippet>a = np.array([1., 2.], dtype=object)
b = np.array(['1.', '2.'], dtype=object)
c = np.array([1, 2], dtype=object)
d = np.array([1, 2.], dtype=object)
e = np.array(['hello'], dtype=object)
f = np.array([1, 'hello'], dtype=object)

&gt;&gt;&gt; np.array(list(a)).dtype
dtype('float64')
&gt;&gt;&gt; np.array(list(b)).dtype
dtype('S2')
&gt;&gt;&gt; np.array(list(c)).dtype
dtype('int32')
&gt;&gt;&gt; np.array(list(d)).dtype
dtype('float64')
&gt;&gt;&gt; np.array(list(e)).dtype
dtype('S5')
</snippet></ROW><ROW><id>19486803</id><snippet>&gt;&gt;&gt; np.array(list(f)).dtype
dtype('S5')
</snippet></ROW><ROW><id>19486849</id><snippet>with open("/bin/ls", "rb") as fin:
  buf = fin.read()
bytes = map(ord, buf)    
print bytes[:10]
</snippet></ROW><ROW><id>19486849</id><snippet>[127, 69, 76, 70, 2, 1, 1, 0, 0, 0]
</snippet></ROW><ROW><id>19487003</id><snippet>csv</snippet></ROW><ROW><id>19487003</id><snippet>import pandas
colnames = ['year', 'name', 'city', 'latitude', 'longitude']
data = pandas.read_csv('test.csv', names=colnames)
</snippet></ROW><ROW><id>19487003</id><snippet>names = list(data.name)
latitude = list(data.latitude)
longitude = list(data.longitude)
</snippet></ROW><ROW><id>19487046</id><snippet>j=[];
for row in ... :
    i = []
    for value in quoted.findall(str(row[2])):
        i.append(value.replace('"', '').strip())

    j.append(i)
</snippet></ROW><ROW><id>19487053</id><snippet>dict.get()</snippet></ROW><ROW><id>19487053</id><snippet>&gt;&gt;&gt; {k:dict1.get(k) for k in list1}
{'a': 1, 'd': 4}
</snippet></ROW><ROW><id>19487053</id><snippet>list</snippet></ROW><ROW><id>19487053</id><snippet>k</snippet></ROW><ROW><id>19487053</id><snippet>None</snippet></ROW><ROW><id>19487138</id><snippet>O(NK^2)</snippet></ROW><ROW><id>19487138</id><snippet>K &gt; log N</snippet></ROW><ROW><id>19487138</id><snippet>O(NK)</snippet></ROW><ROW><id>19487138</id><snippet>K</snippet></ROW><ROW><id>19487138</id><snippet>x[j] &gt;= x[i]</snippet></ROW><ROW><id>19487138</id><snippet>j &gt; i</snippet></ROW><ROW><id>19487138</id><snippet>x[i]</snippet></ROW><ROW><id>19487138</id><snippet>x[j]</snippet></ROW><ROW><id>19487138</id><snippet>d[l]</snippet></ROW><ROW><id>19487138</id><snippet>d[l]</snippet></ROW><ROW><id>19487138</id><snippet>i</snippet></ROW><ROW><id>19487138</id><snippet>j=i+1         d[i]
j=i+2         d[i] + d[i+1]
j=i+3         d[i] + d[i+1] + d[i+2]
...
j=K=i+(K-i)   d[i] + d[i+1] + d[i+2] + ... + d[K-1]
</snippet></ROW><ROW><id>19487138</id><snippet>total: (K-i)*d[i] + (K-i-1)*d[i+1] + ... + 2*d[K-2] + 1*d[K-1]
</snippet></ROW><ROW><id>19487138</id><snippet>i=1     (K-1)*d[1] + (K-2)*d[2] + (K-3)*d[3] + ... + 2*d[K-2] + d[K-1]
i=2                  (K-2)*d[2] + (K-3)*d[3] + ... + 2*d[K-2] + d[K-1]
i=3                               (K-3)*d[3] + ... + 2*d[K-2] + d[K-1]
...
i=K-2                                                2*d[K-2] + d[K-1]
i=K-1                                                           d[K-1]
</snippet></ROW><ROW><id>19487138</id><snippet>1*(K-1)*d[1] + 2*(K-2)*d[2] + 3*(K-3)*d[3] + ... + (K-2)*2*d[K-2] 
  + (K-1)*1*d[K-1]
</snippet></ROW><ROW><id>19487138</id><snippet>O(N log N)</snippet></ROW><ROW><id>19487138</id><snippet>O(N)</snippet></ROW><ROW><id>19487138</id><snippet>N-K</snippet></ROW><ROW><id>19487138</id><snippet>O(NK)</snippet></ROW><ROW><id>19487138</id><snippet>def closeness(diff,K):
  acc = 0.0
  for (i,v) in enumerate(diff):
    acc += (i+1)*(K-(i+1))*v
  return acc

def closest(a,K):
  a.sort()
  N = len(a)
  diff = [ a[i+1] - a[i] for i in xrange(N-1) ]

  min_ind = 0
  min_val = closeness(diff[0:K-1],K)

  for ind in xrange(1,N-K+1):
    cl = closeness(diff[ind:ind+K-1],K)
    if cl &lt; min_val:
      min_ind = ind
      min_val = cl

  return a[min_ind:min_ind+K]
</snippet></ROW><ROW><id>19487430</id><snippet>import ...

class Input_Panel(wx.Panel):
    def __init__(self, parent):
        ...

class Output_Panel_Var(wx.Panel):
    def __init__(self, parent):
        ...

class Output_Panel_Fig(wx.Panel):
    def __init__(self, parent):
        ...

    def draw(self,t,s):
        self.axes.plot(t, s)

        self.canvas.draw()


class Main_Window(wx.Frame):
    def __init__(self, parent, title):
        ...   

    def OnButton(self, e):
        ...

def main():
    ...

if __name__ == "__main__" :
    main()
</snippet></ROW><ROW><id>19487517</id><snippet>self.itemAt(e.scenePos())</snippet></ROW><ROW><id>19487517</id><snippet>self.itemAt(e.pos())</snippet></ROW><ROW><id>19487879</id><snippet>namedtuple</snippet></ROW><ROW><id>19487879</id><snippet># Creating the class
class Records:
    def __init__(self, firstname, lastname, age, gender):
        self.fname = firstname
        self.lname = lastname
        self.age = age
        self.gender = gender

# Using open to open the required file, and calling the file f,
# using with automatically closes the file stream, so its less
# of a hassle.
with open('object_file.txt') as f:
    list_of_records = [Records(*line.split()) for line in f]  # Adding records to a list

for record in list_of_records:
    print record.age  # Printing a sample
</snippet></ROW><ROW><id>19488432</id><snippet>try</snippet></ROW><ROW><id>19488432</id><snippet>catch</snippet></ROW><ROW><id>19488432</id><snippet>import os


def get_abs_directory(path):
    try:
        if os.path.isdir(path):
            return path
        else:
            return os.path.split(os.path.abspath(path))[0]
    except TypeError:
        print "You inserted the wrong type!"


if __name__ == '__main__':
    get_abs_directory(1)  # Using an int instead of a string, which is caught by TypeError
</snippet></ROW><ROW><id>19488432</id><snippet>import os


def get_abs_directory(path):

    if not isinstance(path, str):
        print "You gave us the wrong type, you big meany!"
        return None

    if os.path.isdir(path):
        return path
    else:
        return os.path.split(os.path.abspath(path))[0]

if __name__ == '__main__':
    get_abs_directory(1)
</snippet></ROW><ROW><id>19488479</id><snippet>ASCII</snippet></ROW><ROW><id>19488479</id><snippet>LANG</snippet></ROW><ROW><id>19488479</id><snippet>LANG=en_US.UTF-8</snippet></ROW><ROW><id>19488479</id><snippet>envvars</snippet></ROW><ROW><id>19488479</id><snippet>/etc/apache2/envvars</snippet></ROW><ROW><id>19488479</id><snippet>/etc/sysconfig/httpd</snippet></ROW><ROW><id>19488479</id><snippet>EXPORT LANG=en_US.utf8
</snippet></ROW><ROW><id>19488479</id><snippet>envvars</snippet></ROW><ROW><id>19488581</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>19488581</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; text = 'Hello, &lt;code&gt;This is the string i want to extract&lt;/code&gt;'
&gt;&gt;&gt; soup = BS(text)
&gt;&gt;&gt; print soup.code.text
This is the string i want to extract
</snippet></ROW><ROW><id>19488581</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r'&lt;code&gt;(.*?)&lt;/code&gt;', text).group(1)
'This is the string i want to extract'
</snippet></ROW><ROW><id>19488581</id><snippet>str</snippet></ROW><ROW><id>19488712</id><snippet>socket.socketpair</snippet></ROW><ROW><id>19488712</id><snippet>import socket

client, testsocket = socket.socketpair()
client.sendall("test_recv")
print testsocket.recv(1024)
testsocket.close()
client.close()
</snippet></ROW><ROW><id>19488712</id><snippet>mock</snippet></ROW><ROW><id>19488712</id><snippet>import mock

testsocket = mock.Mock()
testsocket.configure_mock(**{'recv.return_value': 'test_recv'})
print testsocket.recv(1024)
</snippet></ROW><ROW><id>19489211</id><snippet>names = list(data.Name)</snippet></ROW><ROW><id>19489211</id><snippet>lists</snippet></ROW><ROW><id>19489211</id><snippet>color_dict[names]</snippet></ROW><ROW><id>19489211</id><snippet>list</snippet></ROW><ROW><id>19489211</id><snippet>for colourName in color_dict.keys():
     plt.plot(x,y,'y-',color=color_dict[colourName], linewidth=2 ) # You need to use different data for the data series here.
</snippet></ROW><ROW><id>19489211</id><snippet>plt.plot(x,y,'y-',color=colors[names], linewidth=2 )</snippet></ROW><ROW><id>19489211</id><snippet>color=colors_dict[names]</snippet></ROW><ROW><id>19489214</id><snippet>p = Popen('/usr/bin/python /apps/sample.py {} {}'.format(var1, var2), shell=True)
</snippet></ROW><ROW><id>19489214</id><snippet>#!/usr/bin/env python

import sys

print sys.argv[1]
print '\n'
print sys.argv[2]
</snippet></ROW><ROW><id>19489214</id><snippet>chmod +x test.py
</snippet></ROW><ROW><id>19489214</id><snippet>Python 2.7.4 (default, Jul  5 2013, 08:21:57) 
&gt;&gt;&gt; from subprocess import Popen
&gt;&gt;&gt; p = Popen('./test.py {} {}'.format('hello', 'universe'), shell=True)
&gt;&gt;&gt; hello


universe
</snippet></ROW><ROW><id>19489282</id><snippet>  enpkg numpy
  enpkg scipy
</snippet></ROW><ROW><id>19489282</id><snippet>enpkg</snippet></ROW><ROW><id>19489365</id><snippet>f2py -m useArray -h useArray.pyf dimpar.f90 array.f90
</snippet></ROW><ROW><id>19489394</id><snippet>def XorBlock(block1, block2):
    l = len(block1)
    if l != len(block2):
        raise ValueError
    #         |-&gt; Converting into int
    return [(int(block1[j])+int(block2[j])) % 2 for j in xrange(l)]
    #                        |-&gt; Converting into int


if __name__ == '__main__':
    print XorBlock("12345", "23456")
</snippet></ROW><ROW><id>19489394</id><snippet>&gt;&gt;&gt; XorBlock("010101", "108734")
[1, 1, 0, 0, 1, 1]
</snippet></ROW><ROW><id>19489394</id><snippet>0</snippet></ROW><ROW><id>19489832</id><snippet>pep8</snippet></ROW><ROW><id>19489832</id><snippet>def func(value):
    if value &lt; 2:
        raise ValueError()
    for p in generate_primes():
        if value % p == 0:
            smallest_prime_factor = p
            break
    do_something_with(smallest_prime_factor)
</snippet></ROW><ROW><id>19489832</id><snippet>else</snippet></ROW><ROW><id>19489832</id><snippet>generate_primes</snippet></ROW><ROW><id>19489832</id><snippet>generate_primes</snippet></ROW><ROW><id>19489832</id><snippet>smallest_prime_factor = 1</snippet></ROW><ROW><id>19489832</id><snippet>pep8</snippet></ROW><ROW><id>19489832</id><snippet>flag</snippet></ROW><ROW><id>19489929</id><snippet>subprocess.Popen("sha256sum file1.zip", stdout = file("file2.sha", "a"))
</snippet></ROW><ROW><id>19490049</id><snippet>os.lstat()</snippet></ROW><ROW><id>19490049</id><snippet>os.stat()</snippet></ROW><ROW><id>19490049</id><snippet>import os

modification_time = os.lstat(path_to_symlink).st_mtime
</snippet></ROW><ROW><id>19490199</id><snippet>df3 = pd.concat((df1, df2))
df3.groupby(df3.index).mean()

#    col
# a    1
# b    3
# c    4
# d    6
</snippet></ROW><ROW><id>19490199</id><snippet>pd.concat((df1, df2), axis=1).mean(axis=1)
</snippet></ROW><ROW><id>19490354</id><snippet>a = "abc def,ghi remove - this keep-that foo + bar +keep!"
import re
print re.sub(r'[^\w\s+-]|(?&lt;!\w)-(?!\w)|\+(?!\w)', '', a)
#abc defghi remove  this keep-that foo  bar +keep
</snippet></ROW><ROW><id>19490354</id><snippet>[^\w\s+-]|^-|-$|\+$|(?&lt;=\W)-|-(?=\W)|\+(?=\W)|(?&lt;=\w)\+
</snippet></ROW><ROW><id>19490468</id><snippet>enumerate()</snippet></ROW><ROW><id>19490468</id><snippet>with open(filename) as f:
    for line_no, seq in enumerate(f, start=1):
        print convertSeq(seq, line_no)
</snippet></ROW><ROW><id>19490523</id><snippet>super()</snippet></ROW><ROW><id>19490523</id><snippet>object</snippet></ROW><ROW><id>19490523</id><snippet>parent</snippet></ROW><ROW><id>19490523</id><snippet>class parent(object):
</snippet></ROW><ROW><id>19490523</id><snippet>super()</snippet></ROW><ROW><id>19490523</id><snippet>parent</snippet></ROW><ROW><id>19490523</id><snippet>self.name</snippet></ROW><ROW><id>19490523</id><snippet>self.age</snippet></ROW><ROW><id>19490523</id><snippet>None</snippet></ROW><ROW><id>19490523</id><snippet>__init__</snippet></ROW><ROW><id>19490523</id><snippet>name</snippet></ROW><ROW><id>19490523</id><snippet>age</snippet></ROW><ROW><id>19490523</id><snippet>def __init__(self, name, age, gender):
    super(child, self).__init__(name, age)
    print gender
</snippet></ROW><ROW><id>19490523</id><snippet>&gt;&gt;&gt; c = child("xyz", 22, "male")
male
&gt;&gt;&gt; c.printout()
xyz
22
</snippet></ROW><ROW><id>19490578</id><snippet>data = labels = []
</snippet></ROW><ROW><id>19490578</id><snippet>labels.append(...)</snippet></ROW><ROW><id>19490578</id><snippet>data.append(...)</snippet></ROW><ROW><id>19490578</id><snippet>data = []
labels = []
</snippet></ROW><ROW><id>19490683</id><snippet>firstname</snippet></ROW><ROW><id>19490683</id><snippet>John</snippet></ROW><ROW><id>19490683</id><snippet>#!usr/bin/python
import sys
class Records:
    def __init__(self, firstname, lastname, age, gender):
        self.fname = firstname
        self.lname = lastname
        self.age = age
        self.gender = gender

f= open("abc","r")
list_of_records = [Records(*line.split()) for line in f]
search_term = "John"
for record in list_of_records:
    if record.firstname == search_term:
        print "We found him!"
        print record.firstname, record.lastname, record.age, record.gender
</snippet></ROW><ROW><id>19490683</id><snippet>firstname</snippet></ROW><ROW><id>19490683</id><snippet>gender</snippet></ROW><ROW><id>19490683</id><snippet>for record in list_of_records:
    if record.firstname == "John" and record.gender = "M":
        print "We found him!"
        print record.firstname, record.lastname, record.age, record.gender
</snippet></ROW><ROW><id>19490683</id><snippet>open</snippet></ROW><ROW><id>19490683</id><snippet>f.close()</snippet></ROW><ROW><id>19490683</id><snippet>with</snippet></ROW><ROW><id>19490993</id><snippet>ajax</snippet></ROW><ROW><id>19490993</id><snippet>if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) &amp;&amp; strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest'){
    // I'm AJAX!
}
</snippet></ROW><ROW><id>19491080</id><snippet>alist = [a for a in alist if a&gt;=average]
</snippet></ROW><ROW><id>19491080</id><snippet>for i in alist:</snippet></ROW><ROW><id>19491080</id><snippet>alist[i]</snippet></ROW><ROW><id>19491147</id><snippet>import sys,os
import pygtk, gtk, gobject

class GTK_Main:
  def __init__(self):

    """ Design!!! """   

button_rc = """
pixmap_path "/var/tmp"

style "default-style" {

  GtkVScale::slider_length          = 14
  GtkVScale::slider_width          = 15
  GtkVScale::focus-padding                      = 4
  GtkVScale::trough-side-details                = 0
  GtkVScale::trough-border                      = 1
  GtkVScale::value-spacing                      = 0
  GtkVScale::trough-under-steppers              = 0
  GtkVScale::arrow-displacement-x               = 7
  GtkVScale::arrow-displacement-y               = 0
  GtkVScale::activate_slider                    = 0

  xthickness = 1
  ythickness = 1

  #bg[NORMAL] = "#f6f6f6"
  fg[NORMAL] = "#000000"
}
class "GtkWidget" style "default-style"

style "deButton" {
  fg[PRELIGHT] = { 0, 1.0, 1.0 }
  bg[PRELIGHT] = { 0, 0, 1.0 }
  bg[ACTIVE] = { 1.0, 0, 0 }
  fg[ACTIVE] = { 0, 1.0, 0 }
  bg[NORMAL] = { 1.0, 1.0, 0 }
  fg[NORMAL] = { .99, 0, .99 }
  bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
  fg[INSENSITIVE] = { 1.0, 0, 1.0 }

  engine "pixmap" {
      image {
          function = SLIDER
          orientation = VERTICAL
          file     = "a.png"
          stretch  = TRUE
      }
     image {
            function = BOX
            orientation = VERTICAL
            file = "b.gif"
            border = { 0, 0, 32, 32}
            stretch = TRUE
     }
  }
  bg_pixmap[NORMAL] = "b.gif"
}

widget "*.deButton" style "deButton"

"""

    window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    window.set_title("Test")
    window.set_default_size(500, 400)
    window.connect("destroy", gtk.main_quit, "WM destroy")
    gtk.rc_parse_string(button_rc)                       # 2

    hbox_eq = gtk.HBox()
    hbox_eq.set_size_request(200, 150)

    self.hscale_one = gtk.VScale()# gtk.HScale()
    self.hscale_one.set_range(-24, 12)
    self.hscale_one.set_name("deButton")                  # 3

    hbox_eq.pack_start(self.hscale_one, True, True, 0)

    self.hscale_two =  gtk.VScale()# gtk.HScale()
    self.hscale_two.set_range(-24, 12)
    hbox_eq.pack_start(self.hscale_two, True, True, 0)

    vbox = gtk.VBox()
    vbox.pack_start(hbox_eq, False)
    window.add(vbox)
    window.show_all()

  def exit(self, widget, data=None):
    gtk.main_quit()

GTK_Main()
gtk.gdk.threads_init()
gtk.main()
</snippet></ROW><ROW><id>19491667</id><snippet>self.string_var = []                        # create empty list
for i in xrange(self.initial_numbers):
    self.string_var.append(StringVar())     # append to list
    self.string_var[i].set("test")          # access var at index i
</snippet></ROW><ROW><id>19491742</id><snippet>&gt;&gt;&gt; data=json.load(urllib2.urlopen("http://eu.battle.net/api/wow/realm/status"))
&gt;&gt;&gt; type(data)
&lt;type 'dict'&gt;
&gt;&gt;&gt; data.keys()
[u'realms']
&gt;&gt;&gt; type(data['realms'])
&lt;type 'list'&gt;
&gt;&gt;&gt; type(data['realms'][0])
&lt;type 'dict'&gt;
&gt;&gt;&gt; data['realms'][0].keys()
[u'status', u'wintergrasp', u'battlegroup', u'name', u'tol-barad', u'locale', u'queue', u'timezone', u'type', u'slug', u'population']
&gt;&gt;&gt; data['realms'][0]['name']
u'Aegwynn'
&gt;&gt;&gt; [realm['name'] for realm in data['realms']].index('Silvermoon')
212
&gt;&gt;&gt; silvermoon= data['realms'][212]
&gt;&gt;&gt; silvermoon['population']
u'high'
&gt;&gt;&gt; type(silvermoon['wintergrasp'])
&lt;type 'dict'&gt;
&gt;&gt;&gt; silvermoon['wintergrasp'].keys()
[u'status', u'next', u'controlling-faction', u'area']
&gt;&gt;&gt; silvermoon['wintergrasp']['controlling-faction']
&gt;&gt;&gt; silvermoon['population']
u'high'
</snippet></ROW><ROW><id>19491742</id><snippet>realms= data['realms']
realm_from_name= dict( [(realm['name'], realm) for realm in realms])
print realm_from_name['Silvermoon']['population']
print realm_from_name['Silvermoon']['wintergrasp']['controlling-faction']
</snippet></ROW><ROW><id>19491866</id><snippet>&gt;&gt;&gt; df1 = pd.DataFrame({"Current track blade 1":[-8.577881, -6.284912, 6.269775, 5.253418, -16.088380], "Current track blade 2": [-0.333252, 5.294434, 11.229490,10.187260,-2.967773]})
&gt;&gt;&gt; s1 = pd.Series([3503.125, 3517.333, 3504.778, 3476.127, 3477.776])
&gt;&gt;&gt; df1.apply(lambda x: x + s1)
   Current track blade 1  Current track blade 2
0            3494.547119            3502.791748
1            3511.048088            3522.627434
2            3511.047775            3516.007490
3            3481.380418            3486.314260
4            3461.687620            3474.808227
</snippet></ROW><ROW><id>19492033</id><snippet>input = raw_input('Command: ')
if 'inv' in input:
    invcheck()
</snippet></ROW><ROW><id>19492076</id><snippet># beginner

def fac(n):
    f = 1
    i = 1
    while i &lt;= n:
        f *= i
        i += 1
    return f

# advanced beginner

def fac(n):
    return n * fac(n - 1) if n &gt; 1 else 1

# intermediate

def fac(n):
    return reduce(lambda x, y: x * y, range(1, n + 1))

# advanced intermediate

import operator
def fac(n):
    return reduce(operator.mul, xrange(1, n + 1))

# professional

import math
print math.factorial(5)

# guru

import scipy.misc as sc
print sc.factorial(5, exact=True)
</snippet></ROW><ROW><id>19492218</id><snippet>fileinput</snippet></ROW><ROW><id>19492218</id><snippet>fileinput</snippet></ROW><ROW><id>19492218</id><snippet>for path in self.get_files():
    with open(path) as fp:
      for line in fp:
         etc
</snippet></ROW><ROW><id>19492614</id><snippet>container.children</snippet></ROW><ROW><id>19492614</id><snippet>Tag</snippet></ROW><ROW><id>19492614</id><snippet>element.find_all(..., recursive=False)</snippet></ROW><ROW><id>19493104</id><snippet>beer = int(raw_input("Enter your amount: "))
</snippet></ROW><ROW><id>19493128</id><snippet>face = """
░░░░░░░░░░░░░░▄▄▄▄▄▄▄▄▄▄▄▄░░░░░░░░░░░░░░
░░░░░░░░░░░░▄████████████████▄░░░░░░░░░░
░░░░░░░░░░▄██▀░░░░░░░▀▀████████▄░░░░░░░░
░░░░░░░░░▄█▀░░░░░░░░░░░░░▀▀██████▄░░░░░░
░░░░░░░░░███▄░░░░░░░░░░░░░░░▀██████░░░░░
░░░░░░░░▄░░▀▀█░░░░░░░░░░░░░░░░██████░░░░
░░░░░░░█▄██▀▄░░░░░▄███▄▄░░░░░░███████░░░
░░░░░░▄▀▀▀██▀░░░░░▄▄▄░░▀█░░░░█████████░░
░░░░░▄▀░░░░▄▀░▄░░█▄██▀▄░░░░░██████████░░
░░░░░█░░░░▀░░░█░░░▀▀▀▀▀░░░░░██████████▄░
░░░░░░░▄█▄░░░░░▄░░░░░░░░░░░░██████████▀░
░░░░░░█▀░░░░▀▀░░░░░░░░░░░░░███▀███████░░
░░░▄▄░▀░▄░░░░░░░░░░░░░░░░░░▀░░░██████░░░
██████░░█▄█▀░▄░░██░░░░░░░░░░░█▄█████▀░░░
██████░░░▀████▀░▀░░░░░░░░░░░▄▀█████████▄
██████░░░░░░░░░░░░░░░░░░░░▀▄████████████
██████░░▄░░░░░░░░░░░░░▄░░░██████████████
██████░░░░░░░░░░░░░▄█▀░░▄███████████████
███████▄▄░░░░░░░░░▀░░░▄▀▄███████████████"""

print(face)
</snippet></ROW><ROW><id>19493350</id><snippet>poll</snippet></ROW><ROW><id>19493350</id><snippet>poll</snippet></ROW><ROW><id>19493350</id><snippet>True</snippet></ROW><ROW><id>19493350</id><snippet>recv</snippet></ROW><ROW><id>19493350</id><snippet>poll</snippet></ROW><ROW><id>19493350</id><snippet>None</snippet></ROW><ROW><id>19493350</id><snippet>poll</snippet></ROW><ROW><id>19493350</id><snippet>False</snippet></ROW><ROW><id>19493488</id><snippet>class ScreenButton(Button):
    screenmanager = ObjectProperty()
    def on_press(self, *args):
        super(ScreenButton, self).on_press(*args)
        self.screenmanager.current = 'whatever'
</snippet></ROW><ROW><id>19493488</id><snippet>current</snippet></ROW><ROW><id>19493488</id><snippet>sm = ScreenManager()

sc1 = Screen(name='firstscreen')
sc1.add_widget(ScreenButton(screenmanager=sm))

sc2 = Screen(name='whatever')
sc2.add_widget(Label(text='another screen'))

sm.add_widget(sc1)
sm.add_widget(sc2)
</snippet></ROW><ROW><id>19493488</id><snippet>bind</snippet></ROW><ROW><id>19493488</id><snippet>def switching_function(*args):
    some_screen_manager.current = 'whatever'

some_button.bind(on_press=switching_function)
</snippet></ROW><ROW><id>19493488</id><snippet>switching_function</snippet></ROW><ROW><id>19493488</id><snippet>some_button</snippet></ROW><ROW><id>19493576</id><snippet>easy_install oauth2</snippet></ROW><ROW><id>19493576</id><snippet>easy_install</snippet></ROW><ROW><id>19493576</id><snippet>oauth2</snippet></ROW><ROW><id>19493576</id><snippet>https://pypi.python.org/pypi/&lt;project-name&gt;</snippet></ROW><ROW><id>19493576</id><snippet>oauth2</snippet></ROW><ROW><id>19493576</id><snippet>setup.py</snippet></ROW><ROW><id>19493576</id><snippet>https://github.com/simplegeo/python-oauth2/</snippet></ROW><ROW><id>19493576</id><snippet>easy_install oauth2</snippet></ROW><ROW><id>19493727</id><snippet>repr()</snippet></ROW><ROW><id>19493727</id><snippet>end='\n'</snippet></ROW><ROW><id>19493727</id><snippet>print(("%0.2f" % cost).rjust(24), ("%0.2f" % provision).rjust(17))
</snippet></ROW><ROW><id>19493727</id><snippet>print("%0.2f".rjust(24) % cost, "%0.2f".rjust(17) % provision)
</snippet></ROW><ROW><id>19493727</id><snippet>str.format()</snippet></ROW><ROW><id>19493727</id><snippet>print("{:&gt;24.2f}{:&gt;18.2f}".format(cost, provision))
</snippet></ROW><ROW><id>19493727</id><snippet>&gt;24</snippet></ROW><ROW><id>19493727</id><snippet>&gt;18</snippet></ROW><ROW><id>19493727</id><snippet>print()</snippet></ROW><ROW><id>19493727</id><snippet>&gt;&gt;&gt; cost, provision = 100.0, 4.0
&gt;&gt;&gt; print("{:&gt;24.2f}{:&gt;18.2f}".format(cost, provision))
                  100.00              4.00
</snippet></ROW><ROW><id>19493924</id><snippet>p</snippet></ROW><ROW><id>19493924</id><snippet>pdb</snippet></ROW><ROW><id>19493924</id><snippet>print</snippet></ROW><ROW><id>19493924</id><snippet>p</snippet></ROW><ROW><id>19493924</id><snippet>ipdb&gt; p p
</snippet></ROW><ROW><id>19493924</id><snippet>p(rint)</snippet></ROW><ROW><id>19493924</id><snippet>p</snippet></ROW><ROW><id>19493924</id><snippet>ipdb&gt; !p
</snippet></ROW><ROW><id>19494063</id><snippet>ma.ro / robjects.r.rowSums(ma) 
</snippet></ROW><ROW><id>19494177</id><snippet>{% if {}|length == 0 %}
    is zero
{% endif %}
</snippet></ROW><ROW><id>19494410</id><snippet>r'^("[^"]+")([^"]+)("[^"]+")'</snippet></ROW><ROW><id>19494410</id><snippet>import re

s = """
"I can quite understand your thinking so." I said. "Of course, in your position of unofficial adviser and helper to everybody who is absolutely puzzled, throughout three continents, you are brought in contact with all that is strange and bizarre. But here"

"Of course, in your position of unofficial adviser and helper to everybody who is absolutely puzzled, throughout three continents, you are brought in contact with all that is strange and bizarre. But here"--I picked up the morning paper from the ground--"let us put it to a practical test. Here is the first heading upon which I come. 'A husband's cruelty to his wife.' There is half a column of print, but I know without reading it that it is all perfectly familiar to me. There is, of course, the other woman, the drink, the push, the blow, the bruise, the sympathetic sister or landlady. The crudest of writers could invent nothing more crude."
"""

for segment in s.splitlines():
    if not segment:
        continue
    first, said, second = re.match(r'^("[^"]+")([^"]+)("[^"]+")', segment).groups()
    print first
    print said
    print second

&gt;&gt;&gt; 
"I can quite understand your thinking so."
 I said. 
"Of course, in your position of unofficial adviser and helper to everybody who is absolutely puzzled, throughout three continents, you are brought in contact with all that is strange and bizarre. But here"
"Of course, in your position of unofficial adviser and helper to everybody who is absolutely puzzled, throughout three continents, you are brought in contact with all that is strange and bizarre. But here"
--I picked up the morning paper from the ground--
"let us put it to a practical test. Here is the first heading upon which I come. 'A husband's cruelty to his wife.' There is half a column of print, but I know without reading it that it is all perfectly familiar to me. There is, of course, the other woman, the drink, the push, the blow, the bruise, the sympathetic sister or landlady. The crudest of writers could invent nothing more crude."
</snippet></ROW><ROW><id>19494637</id><snippet>n = 0
if n1.isdigit():
    n = int(n1)
else:
    """If the execution comes here (not n1.isdigit())
    the variable `n` will remain undefined.
    Therefore you should define it in this block or before if,
    say initially setting it to zero.

    """

    print "Enter Integer only" 
</snippet></ROW><ROW><id>19494637</id><snippet>try:
    n = int(n1)
except ValueError, TypeError:
    n = 0
</snippet></ROW><ROW><id>19494873</id><snippet>In [74]: df
Out[74]: 
     A  B  C  D
1/1  0  1  0  1
1/2  2  1  1  1
1/3  3  0  1  0
1/4  1  0  1  2
1/5  1  0  1  1
1/6  2  0  2  1
1/7  3  5  2  3
</snippet></ROW><ROW><id>19494873</id><snippet>np.nan</snippet></ROW><ROW><id>19494873</id><snippet>In [78]: x = df[df&gt;df.shift(1)]

In [79]: x
Out[79]: 
      A   B   C   D
1/1 NaN NaN NaN NaN
1/2   2 NaN   1 NaN
1/3   3 NaN NaN NaN
1/4 NaN NaN NaN   2
1/5 NaN NaN NaN NaN
1/6   2 NaN   2 NaN
1/7   3   5 NaN   3
</snippet></ROW><ROW><id>19494873</id><snippet>In [80]: x[df.D&gt;1]
Out[80]: 
      A   B   C  D
1/4 NaN NaN NaN  2
1/7   3   5 NaN  3
</snippet></ROW><ROW><id>19495101</id><snippet>compute_item</snippet></ROW><ROW><id>19495101</id><snippet>compute_range_item</snippet></ROW><ROW><id>19495101</id><snippet>range_item</snippet></ROW><ROW><id>19495101</id><snippet>static PyObject *
compute_item(rangeobject *r, PyObject *i)
{
    PyObject *incr, *result;
    /* PyLong equivalent to:
     *    return r-&gt;start + (i * r-&gt;step)
     */
    incr = PyNumber_Multiply(i, r-&gt;step);
    if (!incr)
        return NULL;
    result = PyNumber_Add(r-&gt;start, incr);
    Py_DECREF(incr);
    return result;
}
</snippet></ROW><ROW><id>19495357</id><snippet>from django.contrib.auth import get_user_model


class EmailAuthBackend(object):
    """
    Email Authentication Backend
    """

    def authenticate(self, username=None, password=None):
        """ Authenticate a user based on email address as the user name. """
        try:
            user = get_user_model().objects.get(email=username)
            if user.check_password(password):
                return user
        except get_user_model().DoesNotExist:
            return None 
</snippet></ROW><ROW><id>19495357</id><snippet>AUTHENTICATION_BACKENDS = ('backends.EmailAuthBackend',)
</snippet></ROW><ROW><id>19495357</id><snippet>&lt;form action="." method="post"&gt;
  {% csrf_token %}
  &lt;input type="hidden" name="next" value="{{ next }}" /&gt;
  {{ form.non_field_errors }}
  {% for field in form %}
    &lt;div class="field-wrapper"&gt;
      &lt;div class="label-wrapper"&gt;
        {% if field.name == "username" %}
          Email address
        {% else %}
          {{ field.label_tag }}
        {% endif %}
        {% if field.field.required %}&lt;span class="required"&gt;*&lt;/span&gt;{% endif %}
      &lt;/div&gt;
      &lt;div class="value-wrapper"&gt;
        {{ field }}
        {{ field.errors }}
      &lt;/div&gt;
    &lt;/div&gt;
  {% endfor %}
  &lt;div class="submit-wrapper"&gt;
    &lt;input type="submit" value="Sign In" /&gt;
  &lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>19495583</id><snippet>for line in old_file:
    new_file.write(line.replace(pattern, subst))
</snippet></ROW><ROW><id>19495583</id><snippet>for line in old_file:
    if pattern in line:
        new_file.write(subst)
     else:
         new_file.write(line)
</snippet></ROW><ROW><id>19495583</id><snippet>for line in old_file:
    new_file.write(subst if pattern in line else line)
</snippet></ROW><ROW><id>19495657</id><snippet>if (ord(var1[var2])) % 2: #too much parentheses, fixed.
    var3 = 1 #: &lt;- What's this? Also, mind your indentation.
</snippet></ROW><ROW><id>19495657</id><snippet>var1 = 0
while (var1 &lt; len(arr1)): 
    var1+= 2 
</snippet></ROW><ROW><id>19495657</id><snippet>for var1 in range(0, len(arr1), 2):
    #do something
</snippet></ROW><ROW><id>19495657</id><snippet>36</snippet></ROW><ROW><id>19495782</id><snippet>jsonpickle</snippet></ROW><ROW><id>19495782</id><snippet>deque</snippet></ROW><ROW><id>19495782</id><snippet>class DequeHandler(jsonpickle.handlers.BaseHandler):
    def flatten(self, obj, data):
        return list(obj),obj.maxlen
    def restore(self,obj):
        return deque(obj[0], maxlen=obj[1])
jsonpickle.handlers.register(deque, DequeHandler)
</snippet></ROW><ROW><id>19495864</id><snippet>r'\bvar\b'</snippet></ROW><ROW><id>19495864</id><snippet>\b</snippet></ROW><ROW><id>19495864</id><snippet>expected = ' ### + variable + avar + var[x] ' # &lt;- this last 'var' should be ###
</snippet></ROW><ROW><id>19495864</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'\bvar\b', '###', expr)
' ### + variable + avar + ###[x] + fun(###,variable) + fun2(variable, ###, var1) + fun3(variable,###)+ ###  -###/###+###*###*(###)'
</snippet></ROW><ROW><id>19496000</id><snippet>subplot</snippet></ROW><ROW><id>19496000</id><snippet>fill_between</snippet></ROW><ROW><id>19496000</id><snippet>fill</snippet></ROW><ROW><id>19496000</id><snippet>import matplotlib.pyplot as plt

cpu1_t = [0,1,1,3,3,4,5]
cpu1_p = [1,1,0,0,1,1,0]
cpu2_t = [0,1,1,3,3,4,5]
cpu2_p = [0,0,1,1,0,0,1]

fig = plt.figure()
# plot 1
ax1 = fig.add_subplot(211)
ax1.fill_between(cpu1_t, cpu1_p,0, color='b', edgecolor='k')
ax1.set_ylabel(r'$\tau_1$', size=14, rotation=0)
# plot 2
ax2 = fig.add_subplot(212)
ax2.fill_between(cpu2_t, cpu2_p,0, color='r', edgecolor='k')
ax2.set_ylabel(r'$\tau_2$', size=14, rotation=0)

# customize axis
for ax in [ax1, ax2]:
    ax.set_ylim(0,2)
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.yaxis.set_ticks_position('left')
    ax.xaxis.set_ticks_position('bottom')
</snippet></ROW><ROW><id>19496031</id><snippet>p *= i</snippet></ROW><ROW><id>19496031</id><snippet>p = p * i</snippet></ROW><ROW><id>19496031</id><snippet>*=</snippet></ROW><ROW><id>19496031</id><snippet>q</snippet></ROW><ROW><id>19496031</id><snippet>&gt;&gt;&gt; p = q = [2]
&gt;&gt;&gt; p *= 5
&gt;&gt;&gt; p
[2, 2, 2, 2, 2]
&gt;&gt;&gt; q
[2, 2, 2, 2, 2]

&gt;&gt;&gt; p = q = [2]
&gt;&gt;&gt; p = p * 5
&gt;&gt;&gt; p
[2, 2, 2, 2, 2]
&gt;&gt;&gt; q
[2]
</snippet></ROW><ROW><id>19496031</id><snippet>p</snippet></ROW><ROW><id>19496031</id><snippet>aList[randint(0, 5)] *= 3
</snippet></ROW><ROW><id>19496031</id><snippet>aList[randint(0, 5)] = aList[randint(0, 5)] * 3
</snippet></ROW><ROW><id>19496080</id><snippet>[1,2,[3]]</snippet></ROW><ROW><id>19496080</id><snippet>def get_inner(nested):
    if all(type(x) == list for x in nested):
        for x in nested:
            for y in get_inner(x):
                yield y
    else:
        yield nested
</snippet></ROW><ROW><id>19496080</id><snippet>list(get_inner(nested_list))</snippet></ROW><ROW><id>19496080</id><snippet>[[1, 3, 4, 5], [1, 3, 8], [1, 7, 8], [6, 7, 8], [9]]
</snippet></ROW><ROW><id>19496080</id><snippet>sum</snippet></ROW><ROW><id>19496080</id><snippet>def get_inner(nested):
    if all(type(x) == list for x in nested):
        return sum(map(get_inner, nested), [])
    return [nested]
</snippet></ROW><ROW><id>19496414</id><snippet>request</snippet></ROW><ROW><id>19496414</id><snippet>event.request</snippet></ROW><ROW><id>19496414</id><snippet>def new_request_subscriber(event):
     event.request.db = sqlite3.connect(event.request.registry.settings['db'])
</snippet></ROW><ROW><id>19496414</id><snippet>event</snippet></ROW><ROW><id>19496442</id><snippet>app.yaml</snippet></ROW><ROW><id>19496442</id><snippet>- url: .*
  script: main.py
  login: required
</snippet></ROW><ROW><id>19496590</id><snippet>var_dump(json_decode(file_get_contents("php://input")));
</snippet></ROW><ROW><id>19497120</id><snippet>In [99]: df.head(10)
Out[99]: 
  symbol                date      change    action
0    FDC 2001-08-15 00:00:00   15.069360       new
1    GPS 2001-08-15 00:00:00   19.653780       new
2    HON 2001-08-15 00:00:00    8.604316       new
3    LIZ 2001-08-15 00:00:00    6.711568       new
4    NKE 2001-08-15 00:00:00   22.686257       new
5    ODP 2001-08-15 00:00:00    5.686902       new
6    OSI 2001-08-15 00:00:00    5.893340       new
7    USB 2001-08-15 00:00:00   15.694478       new
8    NEE 2001-11-15 00:00:00  100.000000       new
9    GPS 2001-11-15 00:00:00  142.522231  increase
</snippet></ROW><ROW><id>19497120</id><snippet>In [102]: idx = pd.date_range(df.date.min(),df.date.max())

In [103]: idx
Out[103]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2001-08-15 00:00:00, ..., 2013-08-15 00:00:00]
Length: 4384, Freq: D, Timezone: None
</snippet></ROW><ROW><id>19497120</id><snippet>In [100]: df.groupby(['symbol','action']).apply(
              lambda x: x.set_index('date').reindex(idx)
                  )['change'].reset_index(level=1).head()

Out[100]: 
                     action  change
symbol                             
ADM    2001-08-15  decrease     NaN
       2001-08-16  decrease     NaN
       2001-08-17  decrease     NaN
       2001-08-18  decrease     NaN
       2001-08-19  decrease     NaN

In [101]: df.groupby(['symbol','action']).apply(lambda x: x.set_index('date').reindex(idx))['change'].reset_index(level=1)
Out[101]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 977632 entries, (ADM, 2001-08-15 00:00:00) to (svm, 2013-08-15 00:00:00)
Data columns (total 2 columns):
action    977632  non-null values
change    490  non-null values
dtypes: float64(1), object(1)
</snippet></ROW><ROW><id>19497200</id><snippet>min_bid_off     = float(sheet.cell(row_index,2).value)
</snippet></ROW><ROW><id>19497233</id><snippet>pyramid.session.UnencryptedCookieSessionFactoryConfig</snippet></ROW><ROW><id>19497233</id><snippet>session.cookie_max_age = 120
</snippet></ROW><ROW><id>19497334</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>19497334</id><snippet>.sort</snippet></ROW><ROW><id>19497334</id><snippet>from operator import attrgetter
your_list.sort(key=attrgetter('age'), reverse=True)
</snippet></ROW><ROW><id>19497942</id><snippet>Server:</snippet></ROW><ROW><id>19497942</id><snippet>"HTTP/1\.1\x20503\x20Service\x20Unavailable\r\nContent-Length:\x200\r\n\r\n"
</snippet></ROW><ROW><id>19497942</id><snippet>&gt;&gt;&gt; print mystring
"HTTP/1\.1\x20503\x20Service\x20Unavailable\r\nContent-Length:\x200\r\n\r\n"
&gt;&gt;&gt; print mystring.decode('string-escape')
"HTTP/1\.1 503 Service Unavailable
Content-Length: 0

"
</snippet></ROW><ROW><id>19498086</id><snippet>data.loc[data["Brand"].isin(group_clients), "FreeSec"] = True
</snippet></ROW><ROW><id>19498393</id><snippet>var = 224
print("The var is %d" % var)
</snippet></ROW><ROW><id>19498393</id><snippet>print("The var is", var)
</snippet></ROW><ROW><id>19498668</id><snippet>import turtle

t1 = turtle.Turtle()
t2 = turtle.Turtle()

t1.speed(0)
t2.speed(0)
for i in range(360):
  t1.forward(1)
  t1.left(1)
  t2.forward(1)
  t2.right(1)
</snippet></ROW><ROW><id>19498730</id><snippet>True</snippet></ROW><ROW><id>19498730</id><snippet>True</snippet></ROW><ROW><id>19498730</id><snippet>all()</snippet></ROW><ROW><id>19498730</id><snippet>all(el in bb for el in aa)
</snippet></ROW><ROW><id>19498730</id><snippet>all()</snippet></ROW><ROW><id>19498730</id><snippet>True</snippet></ROW><ROW><id>19498730</id><snippet>True</snippet></ROW><ROW><id>19498730</id><snippet>False</snippet></ROW><ROW><id>19498730</id><snippet>len(aa) == len(bb) and all(el in bb for el in aa)
</snippet></ROW><ROW><id>19498730</id><snippet>bb</snippet></ROW><ROW><id>19498730</id><snippet>set()</snippet></ROW><ROW><id>19498730</id><snippet>def equivalent(aa, bb):
    if len(aa) != len(bb):
        return False
    bb_set = set(bb)
    return all(el in bb_set for el in aa)
</snippet></ROW><ROW><id>19498730</id><snippet>[1, 1, 2]</snippet></ROW><ROW><id>19498730</id><snippet>[1, 2, 2]</snippet></ROW><ROW><id>19498730</id><snippet>len(aa) == len(bb) and sorted(aa) == sorted(bb)
</snippet></ROW><ROW><id>19498730</id><snippet>not set(aa).symmetric_difference(bb)
</snippet></ROW><ROW><id>19499270</id><snippet>file</snippet></ROW><ROW><id>19499270</id><snippet>open</snippet></ROW><ROW><id>19499270</id><snippet>open</snippet></ROW><ROW><id>19499270</id><snippet>argparse</snippet></ROW><ROW><id>19499270</id><snippet>FileType()</snippet></ROW><ROW><id>19499270</id><snippet>parser.add_argument('reference_file', type=argparse.FileType('r'), help='blah blah')
</snippet></ROW><ROW><id>19499271</id><snippet>rounds</snippet></ROW><ROW><id>19499271</id><snippet>rounds</snippet></ROW><ROW><id>19499271</id><snippet>def search_recursive(node):
    rounds = 0
    if len(node)==2:
        if node[1]==1:
            return rounds
    else:
        rounds += 1
        rounds += search_recursive(node[1])
        rounds += search_recursive(node[2])
    return rounds
</snippet></ROW><ROW><id>19499298</id><snippet>. copy ftp://ftp2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_01005_bg10.zip bg10.zip 

. unzipfile bg10.zip
inflating: tl_2010_01005_bg10.dbf
inflating: tl_2010_01005_bg10.prj
inflating: tl_2010_01005_bg10.shp
inflating: tl_2010_01005_bg10.shp.xml
inflating: tl_2010_01005_bg10.shx
successfully unzipped bg10.zip to current directory
</snippet></ROW><ROW><id>19499367</id><snippet>None != ""</snippet></ROW><ROW><id>19499367</id><snippet>is not</snippet></ROW><ROW><id>19499367</id><snippet>if lis is not None:
</snippet></ROW><ROW><id>19499367</id><snippet>!= None</snippet></ROW><ROW><id>19499367</id><snippet>is</snippet></ROW><ROW><id>19499367</id><snippet>is not</snippet></ROW><ROW><id>19499367</id><snippet>lis</snippet></ROW><ROW><id>19499367</id><snippet>lis = excel.ActiveWorkbook.Activesheet.Range(cell).GetValue()
</snippet></ROW><ROW><id>19499418</id><snippet>[{'TIME': 41387.756495162001, 'Watts': 0.234652},
 {'TIME': 41387.756500821, 'Watts': 0.236125},
 {'TIME': 41387.756506480997, 'Watts': 0.23477200000000001},
 {'TIME': 41387.756512141001, 'Watts': 0.23453099999999999},
...
 {'TIME': 41387.756574386003, 'Watts': 0.23558699999999999},
 {'TIME': 41387.756580046, 'Watts': 0.23508899999999999},
 {'TIME': 41387.756585706004, 'Watts': 0.235041},
 {'TIME': 41387.756591365003, 'Watts': 0.23541200000000001},
 {'TIME': 41387.756597013002, 'Watts': 0.23461699999999999},
 {'TIME': 41387.756602672998, 'Watts': 0.23483899999999999}]
</snippet></ROW><ROW><id>19499418</id><snippet>DataFrame</snippet></ROW><ROW><id>19499418</id><snippet>powd = DataFrame(data2)
</snippet></ROW><ROW><id>19499418</id><snippet>plt.show(1)</snippet></ROW><ROW><id>19499418</id><snippet>from pandas import DataFrame
data2 = []
for i in range(0,len(power_data)):
    data2.append({'TIME': power_data[i][0], 'Watts': power_data[i][1]})

powd = DataFrame(data2)
print powd


print ggplot(aes(x='TIME', y='Watts'), data=powd) + \
    geom_point(color='lightblue') + \
    geom_line(alpha=0.25) + \
    stat_smooth(span=.05, color='black') + \
    ggtitle("Power comnsuption over 13 hours") + \
    xlab("Time") + \
    ylab("Watts")

plt.show(1)
</snippet></ROW><ROW><id>19499457</id><snippet>def findDist():

    if Pro1 == 'alive':
        Dist1 = (abs(xYou-xPro1)+abs(yYou-yPro1))
        print(Dist1)
    if Pro2 == 'alive':
        Dist2 = (abs(xYou-xPro2)+abs(yYou-yPro2))
        print(Dist2)
    if Pro3 == 'alive':
        Dist3 = (abs(xYou-xPro3)+abs(yYou-yPro3))
        print(Dist3)
    if Pro4 == 'alive':
        Dist4 = (abs(xYou-xPro4)+abs(yYou-yPro4))
        print(Dist4)
    if Pro5 == 'alive':
        Dist5 = (abs(xYou-xPro5)+abs(yYou-yPro5))
        print(Dist5)
    if Pro6 == 'alive':
        Dist6 = (abs(xYou-xPro6)+abs(yYou-yPro6))
        print(Dist6)
    findClose(Dist1, Dist2, Dist3, Dist4, Dist5, Dist6)

def findClose(Dist1, Dist2, Dist3, Dist4, Dist5, Dist6):

    proDists.extend((Dist1,Dist2,Dist3,Dist4,Dist5,Dist6))
    print ("".join(proDists))
</snippet></ROW><ROW><id>19499793</id><snippet>Cmatrix =np.array([ (1,    1,   0,    1,     0,    0,  1, 0,  1),\
                    (1,   -1,   0,    1,     0,    0, -1, 0, -1),\
                    (1,    0,   1,    0,     0,    1,  1, 0,  1),\
                    (1,    0,   1,    0,     0,    1, -1, 0, -1),\
                    (1,    0, 0.5,    0,     0, 0.25,  0, 1,  1),\
                    (1,    0, 0.5,    0,     0, 0.25,  0, 1, -1),\
                    (1,  0.5, 0.5, 0.25,  0.25, 0.25,  1, 0,  1),\
                    (1,  0.5, 0.5, 0.25,  0.25, 0.25,  1, 0,  1),\
                    (1, -0.5, 0.5, 0.25, -0.25, 0.25, -1, 0, -1),\
                    (1, -0.5, 0.5, 0.25, -0.25, 0.25, -1, 0, -1)]
interesting_cols = range(3) + range(6,8)
new_matrix = Cmatrix[:,interesting_cols]
</snippet></ROW><ROW><id>19500111</id><snippet>i1</snippet></ROW><ROW><id>19500111</id><snippet>i2</snippet></ROW><ROW><id>19500111</id><snippet>from struct import pack, unpack
for i1, i2 in product(xrange(2**16), repeat=2):
    try:
        f = unpack('&gt;f', pack('&gt;HH', i1, i2))
    except Exception:
        print 'Fails for {}, {}'.format(i1, i2)
</snippet></ROW><ROW><id>19500121</id><snippet>print user_alias
for user in user_alias:
    for row in Dict_list:    
        if user in row.values():
            print row

UserIDs = [] # This is the change.
for user in user_alias:
    for row in Dict_list:
        if row.has_key('_akq6p') and row.has_key('_cn6ca'):
            if user == row['_akq6p'] or user == row['_chk2m']:
                UserID = row['_cn6ca']
                print UserID
                UserIDs.append(UserID)

print UserIDs
</snippet></ROW><ROW><id>19500165</id><snippet>OrderedSet</snippet></ROW><ROW><id>19500165</id><snippet>OrderedDict</snippet></ROW><ROW><id>19500165</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; s = "mathematics"
&gt;&gt;&gt; alpha = "abcdefghiklmnopqrstuvwxyz"
&gt;&gt;&gt; d = OrderedDict.fromkeys(s+alpha)
&gt;&gt;&gt; d
OrderedDict([('m', None), ('a', None), ('t', None), ('h', None), ('e', None), ('i', None), ('c', None), ('s', None), ('b', None), ('d', None), ('f', None), ('g', None), ('k', None), ('l', None), ('n', None), ('o', None), ('p', None), ('q', None), ('r', None), ('u', None), ('v', None), ('w', None), ('x', None), ('y', None), ('z', None)])
&gt;&gt;&gt; ''.join(d)
'matheicsbdfgklnopqruvwxyz'
</snippet></ROW><ROW><id>19500165</id><snippet>OrderedSet</snippet></ROW><ROW><id>19500262</id><snippet>&gt;&gt;&gt; print(inspect.getsource(inspect.isgenerator))
def isgenerator(object):
    """Return true if the object is a generator.

    Generator objects provide these attributes:
        __iter__        defined to support interation over container
        close           raises a new GeneratorExit exception inside the
                        generator to terminate the iteration
        gi_code         code object
        gi_frame        frame object or possibly None once the generator has
                        been exhausted
        gi_running      set to 1 when generator is executing, 0 otherwise
        next            return the next item from the container
        send            resumes the generator and "sends" a value that becomes
                        the result of the current yield-expression
        throw           used to raise an exception inside the generator"""
    return isinstance(object, types.GeneratorType)
</snippet></ROW><ROW><id>19500262</id><snippet>isinstance(object, types.GeneratorType)</snippet></ROW><ROW><id>19500262</id><snippet>inspect.isgenerator</snippet></ROW><ROW><id>19500262</id><snippet>isinstance</snippet></ROW><ROW><id>19500262</id><snippet>isgenerator</snippet></ROW><ROW><id>19500262</id><snippet>isgeneratorfunction</snippet></ROW><ROW><id>19500272</id><snippet>required=False</snippet></ROW><ROW><id>19500272</id><snippet>forms.ModelChoiceField(required=False, queryset=Person.objects.order_by('Full_Name'))
</snippet></ROW><ROW><id>19500272</id><snippet>required=False</snippet></ROW><ROW><id>19500272</id><snippet>True</snippet></ROW><ROW><id>19500307</id><snippet>calendar.timegm</snippet></ROW><ROW><id>19500307</id><snippet>datetime.utcfromtimestamp</snippet></ROW><ROW><id>19500307</id><snippet>datetime.utcfromtimestamp(float(self.timestamp))
</snippet></ROW><ROW><id>19500391</id><snippet>{ k:a.get(k, '') + '\t' + b.get(k, '') for k in set(a.keys() + b.keys()) }

=&gt; {'color': 'red\tyellow', 'car': 'ferrari\tlamborghini',
    'driver': 'M\t', 'transmission': '\tmanual'}
</snippet></ROW><ROW><id>19500391</id><snippet>import itertools as it
{k:a.get(k,'')+'\t'+b.get(k,'') for k in set(it.chain(a.iterkeys(),b.iterkeys()))}
</snippet></ROW><ROW><id>19500391</id><snippet>{ k:a.get(k,'') + '\t' + b.get(k,'') for k in set(it.chain(a.keys(), b.keys())) }
</snippet></ROW><ROW><id>19500614</id><snippet>except</snippet></ROW><ROW><id>19500614</id><snippet>as</snippet></ROW><ROW><id>19500614</id><snippet>except pygame.error as message:
</snippet></ROW><ROW><id>19500614</id><snippet>&gt;&gt;&gt; try:
...     1/0
... except ZeroDivisionError, e:
  File "&lt;stdin&gt;", line 3
    except ZeroDivisionError, e:
                        ^
SyntaxError: invalid syntax
&gt;&gt;&gt; try:
...     1/0
... except ZeroDivisionError as e:
...     print(e)
...
division by zero
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19500614</id><snippet>raise</snippet></ROW><ROW><id>19500614</id><snippet>raise SystemExit(message)
</snippet></ROW><ROW><id>19500614</id><snippet>&gt;&gt;&gt; raise ZeroDivisionError, "NO!"
  File "&lt;stdin&gt;", line 1
    raise ZeroDivisionError, "NO!"
                       ^
SyntaxError: invalid syntax
&gt;&gt;&gt; raise ZeroDivisionError("NO!")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: NO!
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19500614</id><snippet>except pygame.error as message:
    raise SystemExit(message)
</snippet></ROW><ROW><id>19500651</id><snippet>import cPickle
import zlib

# Compress:
compressed = zlib.compress(cPickle.dumps(obj))

# Get it back:
obj = cPickle.loads(zlib.decompress(compressed))
</snippet></ROW><ROW><id>19500651</id><snippet>obj</snippet></ROW><ROW><id>19500656</id><snippet>bitly currently institutes per-hour, per-minute, 
and per-IP rate limits for each API method
</snippet></ROW><ROW><id>19500656</id><snippet>High-Volume Shorten Requests
If you need to shorten a large number of URLs at once, we recommend that 
you leave ample time to spread these requests out over many hours. Our API 
rate limits reset hourly, and rate limited batch requests can be resumed at 
the top of the hour.
</snippet></ROW><ROW><id>19500864</id><snippet>zipfile</snippet></ROW><ROW><id>19500929</id><snippet>z</snippet></ROW><ROW><id>19500929</id><snippet>z</snippet></ROW><ROW><id>19500929</id><snippet>z</snippet></ROW><ROW><id>19500929</id><snippet>z = 0</snippet></ROW><ROW><id>19500929</id><snippet>if bd == 'a':</snippet></ROW><ROW><id>19500929</id><snippet>if</snippet></ROW><ROW><id>19500929</id><snippet>z</snippet></ROW><ROW><id>19500929</id><snippet>0</snippet></ROW><ROW><id>19500929</id><snippet>File "C:/Users/&lt;USERNAME&gt;/Desktop/Task 1.py", line 15, in &lt;module&gt; answer += 1*z**i TypeError: Can't convert 'int' object to str implicitly
</snippet></ROW><ROW><id>19500929</id><snippet>    if answer [ i ] == '1':
</snippet></ROW><ROW><id>19500929</id><snippet>'1'</snippet></ROW><ROW><id>19500929</id><snippet>1</snippet></ROW><ROW><id>19500929</id><snippet>if answer [i] == "1":
</snippet></ROW><ROW><id>19500929</id><snippet>if answer [i] == 1:
</snippet></ROW><ROW><id>19500929</id><snippet>1</snippet></ROW><ROW><id>19500929</id><snippet>answer += 1*z**i
</snippet></ROW><ROW><id>19500929</id><snippet>string variable_name = "string text"</snippet></ROW><ROW><id>19500929</id><snippet>variable = "string text"</snippet></ROW><ROW><id>19500929</id><snippet>""</snippet></ROW><ROW><id>19500929</id><snippet>1</snippet></ROW><ROW><id>19500929</id><snippet>bd = raw_input("""
Would you like to convert a number into:
a) Binary to Decimal
b) Decimal to Binary
""").lower()

## ORIGINAL CODE
##
##if bd == 'a':
##    answer = input("""
##Please enter a Binary number. Up to, and including, 8 digits of 1 and/or 0
##""")
##
##    print answer
##    for i in range(8):
##        z += 2
##        if answer[i] == '1':
##            answer += 1*z**i

##NEW CODE
if bd == 'a':
    number_original = raw_input("Please enter a Binary number (a string of 1's and 0's)")

    j = 0
    number_converted = 0

    for i in reversed(number):
        if i == '1':
            number_converted += 2**j
        j+=1

print number_converted
</snippet></ROW><ROW><id>19500929</id><snippet>bd=input("")</snippet></ROW><ROW><id>19500929</id><snippet>bd=raw_input("").lower()</snippet></ROW><ROW><id>19500929</id><snippet>a</snippet></ROW><ROW><id>19500929</id><snippet>b</snippet></ROW><ROW><id>19500929</id><snippet>raw_input()</snippet></ROW><ROW><id>19500929</id><snippet>101010011</snippet></ROW><ROW><id>19500929</id><snippet>"101010011"</snippet></ROW><ROW><id>19500929</id><snippet>101010011</snippet></ROW><ROW><id>19500929</id><snippet>base 10</snippet></ROW><ROW><id>19500929</id><snippet>101,010,011</snippet></ROW><ROW><id>19500929</id><snippet>.lower()</snippet></ROW><ROW><id>19500929</id><snippet>whAtevErYouWritE</snippet></ROW><ROW><id>19500929</id><snippet>whateveryouwrite</snippet></ROW><ROW><id>19500929</id><snippet>a</snippet></ROW><ROW><id>19500929</id><snippet>if bd == 'a':
</snippet></ROW><ROW><id>19500929</id><snippet>A</snippet></ROW><ROW><id>19500929</id><snippet>.lower()</snippet></ROW><ROW><id>19500929</id><snippet>b</snippet></ROW><ROW><id>19500929</id><snippet>C</snippet></ROW><ROW><id>19500929</id><snippet>elif</snippet></ROW><ROW><id>19500929</id><snippet>b</snippet></ROW><ROW><id>19500929</id><snippet>else</snippet></ROW><ROW><id>19500929</id><snippet>number_original = raw_input("Please enter a bin...
</snippet></ROW><ROW><id>19500929</id><snippet>this_is_the_variable_i_use_to_calculate_my_circumference</snippet></ROW><ROW><id>19500929</id><snippet>x</snippet></ROW><ROW><id>19500929</id><snippet>raw_input()</snippet></ROW><ROW><id>19500929</id><snippet>101010011</snippet></ROW><ROW><id>19500929</id><snippet>101,010,011</snippet></ROW><ROW><id>19500929</id><snippet>"101010011"</snippet></ROW><ROW><id>19500929</id><snippet>range(8)</snippet></ROW><ROW><id>19500929</id><snippet>j = 0 #This 'j' accomplishes the same work done by your 'z' variable.
number_converted = 0 #this will be correctly converted by the end, as we add to it.
</snippet></ROW><ROW><id>19500929</id><snippet>for</snippet></ROW><ROW><id>19500929</id><snippet>for</snippet></ROW><ROW><id>19500929</id><snippet>for</snippet></ROW><ROW><id>19500929</id><snippet>[0,1,2,3,4,5,6,7]</snippet></ROW><ROW><id>19500929</id><snippet>number</snippet></ROW><ROW><id>19500929</id><snippet>demo_string = "super mario brothers"
print demo_string[0]
print demo_string[1]
print demo_string[2]
print demo_string[3]
print demo_string[4:10]
print demo_string[:10] #if you leave out the first number, it starts at the beginning
print demo_string[10:] #if you leave out the last number, it ends at the end.
</snippet></ROW><ROW><id>19500929</id><snippet>s
u
p
e
r mari
super mari
o brothers
</snippet></ROW><ROW><id>19500929</id><snippet>demo_string[1]</snippet></ROW><ROW><id>19500929</id><snippet>u</snippet></ROW><ROW><id>19500929</id><snippet>s</snippet></ROW><ROW><id>19500929</id><snippet>number_original</snippet></ROW><ROW><id>19500929</id><snippet>range()</snippet></ROW><ROW><id>19500929</id><snippet>for i in reverse(number_original)</snippet></ROW><ROW><id>19500929</id><snippet>reverse(number_original)[0]</snippet></ROW><ROW><id>19500929</id><snippet>reverse(number_original)[i]</snippet></ROW><ROW><id>19500929</id><snippet>i</snippet></ROW><ROW><id>19500929</id><snippet>reverse()</snippet></ROW><ROW><id>19500929</id><snippet>... #  #  #  #  #  # &lt;--The binary number, eg "101010"
...32 16  8  4  2  1 &lt;--What each digit stands for in decimal form
... 5  4  3  2  1  0 &lt;--The power of two that it stands for (2^5=32, 2^4=16...)
</snippet></ROW><ROW><id>19500929</id><snippet>for</snippet></ROW><ROW><id>19500929</id><snippet>10 = 2</snippet></ROW><ROW><id>19500929</id><snippet>10 = 1</snippet></ROW><ROW><id>19500929</id><snippet>for i in reversed(string):
</snippet></ROW><ROW><id>19500929</id><snippet>for</snippet></ROW><ROW><id>19500929</id><snippet>2^x = (digit value in decimal)</snippet></ROW><ROW><id>19500929</id><snippet>for</snippet></ROW><ROW><id>19500929</id><snippet>i == '1'</snippet></ROW><ROW><id>19500929</id><snippet>i == '1'</snippet></ROW><ROW><id>19500929</id><snippet>'1'</snippet></ROW><ROW><id>19500929</id><snippet>number_converted</snippet></ROW><ROW><id>19500929</id><snippet>number_converted + 2^j</snippet></ROW><ROW><id>19500929</id><snippet>j</snippet></ROW><ROW><id>19500929</id><snippet>101010011</snippet></ROW><ROW><id>19501073</id><snippet>z.watchlist</snippet></ROW><ROW><id>19501073</id><snippet>z.watchlist = WatchList.objects.get(user__name='SomeUser')
</snippet></ROW><ROW><id>19501073</id><snippet>WatchList</snippet></ROW><ROW><id>19501078</id><snippet>textNotWork = [('08/10/2013 01:50:16 AM INFO', ...]
with open("testing.json", "w") as file:
    json.dump(textNotWork,file)
</snippet></ROW><ROW><id>19501078</id><snippet>library(rjson)
matrix(unlist(fromJSON(file='testing.json')),
          ncol=5,byrow=TRUE)

 [1,] "08/10/2013 01:50:16 AM INFO" "product1" ""   "61.12000" "1" 
 [2,] "08/10/2013 02:04:23 AM INFO" "product1" ""   "61.12000" "1" 
 [3,] "08/11/2013 02:29:46 AM INFO" "product1" ""   "61.12000" "1" 
 [4,] "08/12/2013 12:58:43 AM INFO" "product1" ""   "61.12000" "1" 
</snippet></ROW><ROW><id>19501147</id><snippet>max</snippet></ROW><ROW><id>19501147</id><snippet>key</snippet></ROW><ROW><id>19501147</id><snippet>&gt;&gt;&gt; dictionary = {"first": [30, 40], "second": [10, 30], "third": [20, 50] }
&gt;&gt;&gt; max(dictionary, key=lambda key: dictionary[key][0])
'first'
&gt;&gt;&gt; max(dictionary, key=lambda key: dictionary[key][1])
'third'
</snippet></ROW><ROW><id>19501147</id><snippet>[30, 40] &gt; [20, 50]</snippet></ROW><ROW><id>19501147</id><snippet>&gt;&gt;&gt; max(dictionary, key=dictionary.get)
'first'
</snippet></ROW><ROW><id>19501343</id><snippet>int()</snippet></ROW><ROW><id>19501343</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.floor(12.6)
12.0
&gt;&gt; int(12.6)
12
</snippet></ROW><ROW><id>19501343</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.floor(-12.6)
-13.0
&gt;&gt; int(-12.6)
-12
</snippet></ROW><ROW><id>19501343</id><snippet>math.floor()</snippet></ROW><ROW><id>19501343</id><snippet>int(math.floor(my_number))</snippet></ROW><ROW><id>19501587</id><snippet>def curl_delete(url):
    cmd = ['curl', '-XDELETE', url]
    subprocess.check_call(cmd)
</snippet></ROW><ROW><id>19501587</id><snippet>    return subprocess.call(cmd)
</snippet></ROW><ROW><id>19501587</id><snippet>    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out, _ = p.communicate()
    return out
</snippet></ROW><ROW><id>19501587</id><snippet>def http_delete(url):
    bits = urlparse.urlparse(bits)
    conn = httplib.HTTPConnection(bits.host, bits.port)
    req = conn.request('delete', url)
    return req.getresponse()
</snippet></ROW><ROW><id>19501730</id><snippet>metadaten</snippet></ROW><ROW><id>19501730</id><snippet>{% url 'metadaten:index' %}</snippet></ROW><ROW><id>19501747</id><snippet>/saved</snippet></ROW><ROW><id>19501747</id><snippet>self.browser</snippet></ROW><ROW><id>19501747</id><snippet>self.client</snippet></ROW><ROW><id>19501747</id><snippet>self.browser</snippet></ROW><ROW><id>19501747</id><snippet>self.client</snippet></ROW><ROW><id>19501747</id><snippet>response = self.client.get('/saved')
self.assertContains(response, TestCase3.title)
</snippet></ROW><ROW><id>19501795</id><snippet>inside myDecorator.__init__()
inside aFunction()
Finished decorating aFunction()
inside myDecorator.__call__()
</snippet></ROW><ROW><id>19501795</id><snippet>@decorator
def function(a):
    pass
</snippet></ROW><ROW><id>19501795</id><snippet>def function(a):
    pass
function = decorator(function)
</snippet></ROW><ROW><id>19501795</id><snippet>@myDecorator
def aFunction():
   print ("inside aFunction()")
</snippet></ROW><ROW><id>19501795</id><snippet>def aFunction():
    print ("inside aFunction()")
aFunction = myDecorator(aFunction)
</snippet></ROW><ROW><id>19501795</id><snippet>aFunction()</snippet></ROW><ROW><id>19501795</id><snippet>__call__</snippet></ROW><ROW><id>19501795</id><snippet>f()</snippet></ROW><ROW><id>19501795</id><snippet>f.__call__(f)</snippet></ROW><ROW><id>19501795</id><snippet>__call__</snippet></ROW><ROW><id>19501795</id><snippet>__call__</snippet></ROW><ROW><id>19501795</id><snippet>__init__</snippet></ROW><ROW><id>19501795</id><snippet>__call__</snippet></ROW><ROW><id>19502054</id><snippet>class Cards(object):
    pass

class MagicCards(Cards):
    pass

class GenericServer(object):
    cards = Cards

    def createCards(self):
        return self.cards()

class MagicServer(GenericServer):
    cards = MagicCards

gs = GenericServer()
ms = MagicServer()

gs.createCards()
&lt;__main__.Cards at 0x3df6048&gt;
ms.createCards()
&lt;__main__.MagicCards at 0x3df6080&gt;
</snippet></ROW><ROW><id>19502054</id><snippet>class GenericServer2(object):
    def __init__(self, cards):
        self.cards = cards

    def createCards(self):
        return self.cards()

gs2 = GenericServer2(Cards)
ms2 = GenericServer2(MagicCards)
gs2.createCards()
&lt;__main__.Cards at 0x3ee5a58&gt;
ms2.createCards()
&lt;__main__.MagicCards at 0x3ee5470&gt;
</snippet></ROW><ROW><id>19502054</id><snippet>def MagicServer2():
    return GenericServer2(MagicCards)
</snippet></ROW><ROW><id>19502064</id><snippet>True</snippet></ROW><ROW><id>19502064</id><snippet>False</snippet></ROW><ROW><id>19502064</id><snippet>result = '***' in x or (not  '**' in x and '*' in x)
</snippet></ROW><ROW><id>19502064</id><snippet>ABC</snippet></ROW><ROW><id>19502064</id><snippet>result = ['None','A','B','C'][('*' in x) + ('**' in x) + ('***' in x)]
</snippet></ROW><ROW><id>19502064</id><snippet>**</snippet></ROW><ROW><id>19502064</id><snippet>***</snippet></ROW><ROW><id>19502064</id><snippet>isItA = '*' in x and not  '**' in x
</snippet></ROW><ROW><id>19502115</id><snippet>forms</snippet></ROW><ROW><id>19502115</id><snippet>view</snippet></ROW><ROW><id>19502115</id><snippet>view</snippet></ROW><ROW><id>19502115</id><snippet>forms</snippet></ROW><ROW><id>19502115</id><snippet>forms</snippet></ROW><ROW><id>19502115</id><snippet>views</snippet></ROW><ROW><id>19502176</id><snippet>level</snippet></ROW><ROW><id>19502176</id><snippet>div/mul/add/sub</snippet></ROW><ROW><id>19502176</id><snippet>In [155]: df = DataFrame(np.random.randn(2,9),
       index=['a','b'],
       columns=MultiIndex.from_tuples([ tuple([x,y+1]) 
           for x in ['one','two','three'] for y in range(3) ]))

 In [6]: df
Out[6]: 
        one                           two                         three                    
          1         2         3         1         2         3         1         2         3
a -0.558978 -1.297585  0.150898 -1.592941  0.124235 -1.749024  1.137611 -0.389676 -1.764254
b -1.366228 -1.192569 -1.384278 -0.970848  0.943373  0.508993 -0.451004  0.335807 -0.122192

In [7]: df.div(df['three'],level=1)
Out[7]: 
        one                            two                      three      
          1         2          3         1         2         3      1  2  3
a -0.491362  3.329910  -0.085531 -1.400251 -0.318815  0.991367      1  1  1
b  3.029306 -3.551347  11.328717  2.152638  2.809269 -4.165522      1  1  1
</snippet></ROW><ROW><id>19502188</id><snippet>$</snippet></ROW><ROW><id>19502188</id><snippet>\z</snippet></ROW><ROW><id>19502188</id><snippet>$</snippet></ROW><ROW><id>19502188</id><snippet>\z</snippet></ROW><ROW><id>19502309</id><snippet>.models()</snippet></ROW><ROW><id>19502309</id><snippet>HAYSTACK_SEARCH_RESULTS_PER_PAGE</snippet></ROW><ROW><id>19502335</id><snippet>for key in self.bok.iterkeys():
    for subkey in key:
        w.write(self.bok[key])
        w.write(";")
        w.write(subkey)
        w.write(";")
        w.write("\n")
w.close()
</snippet></ROW><ROW><id>19502335</id><snippet>for key in self.bok.iterkeys():
    for subkey in key:
        w.write("{};{};\n".format(self.bok[key], subkey))
w.close()
</snippet></ROW><ROW><id>19502363</id><snippet>f</snippet></ROW><ROW><id>19502363</id><snippet>dh</snippet></ROW><ROW><id>19502363</id><snippet>dh_tmp = list(dh)</snippet></ROW><ROW><id>19502403</id><snippet>next</snippet></ROW><ROW><id>19502403</id><snippet>enumerate</snippet></ROW><ROW><id>19502403</id><snippet>&gt;&gt;&gt; myList = [0.0 , 0.0, 0.0, 2.0, 2.0]
&gt;&gt;&gt; next((i for i, x in enumerate(myList) if x), None) # x!= 0 for strict match
3
</snippet></ROW><ROW><id>19502415</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19502415</id><snippet>gen.engine</snippet></ROW><ROW><id>19502415</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19502415</id><snippet>gen.Task</snippet></ROW><ROW><id>19502415</id><snippet>gen.engine</snippet></ROW><ROW><id>19502415</id><snippet>obj</snippet></ROW><ROW><id>19502415</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19502415</id><snippet>obj</snippet></ROW><ROW><id>19502415</id><snippet>Deferred</snippet></ROW><ROW><id>19502415</id><snippet>Deferred</snippet></ROW><ROW><id>19502415</id><snippet>obj</snippet></ROW><ROW><id>19502415</id><snippet>a = yield gen.Task(getA) # continues right through
# a is of type gen.Task here
b = yield proxy.callRemote(getB) # waits for result of proxy.callRemote
</snippet></ROW><ROW><id>19502415</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19502415</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19502415</id><snippet>gen.engine</snippet></ROW><ROW><id>19502415</id><snippet>gen.Task</snippet></ROW><ROW><id>19502415</id><snippet>Deferred</snippet></ROW><ROW><id>19502415</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19502415</id><snippet>gen.Task</snippet></ROW><ROW><id>19502416</id><snippet>itertools</snippet></ROW><ROW><id>19502416</id><snippet>from itertools import takewhile, dropwhile

with open('logfile') as fin:
    start = dropwhile(lambda L: '03.Nov.2012' not in L, fin)
    until = takewhile(lambda L: '12.Oct.2013' not in L, start)
    query = (line for line in until if 'search string' in line)
    for line in query:
        pass # do something
</snippet></ROW><ROW><id>19502836</id><snippet>logging</snippet></ROW><ROW><id>19502836</id><snippet>sys.stderr</snippet></ROW><ROW><id>19502836</id><snippet>stderr</snippet></ROW><ROW><id>19502836</id><snippet>python3 myscript.py -v 2&gt;&gt; log.txt
</snippet></ROW><ROW><id>19502836</id><snippet>stdin</snippet></ROW><ROW><id>19502836</id><snippet>stderr</snippet></ROW><ROW><id>19502836</id><snippet>python3 myscript.py -v &gt;&gt; log.txt 2&gt;&amp;1
</snippet></ROW><ROW><id>19502836</id><snippet>stderr</snippet></ROW><ROW><id>19502836</id><snippet>stdin</snippet></ROW><ROW><id>19502836</id><snippet>DEBUG</snippet></ROW><ROW><id>19502836</id><snippet>logging.basicConfig()</snippet></ROW><ROW><id>19502836</id><snippet>stderr</snippet></ROW><ROW><id>19502836</id><snippet>logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
</snippet></ROW><ROW><id>19502836</id><snippet>logging.basicConfig(filename='log.txt', level=logging.DEBUG)
</snippet></ROW><ROW><id>19502871</id><snippet>u8</snippet></ROW><ROW><id>19502871</id><snippet>unsigned char</snippet></ROW><ROW><id>19502871</id><snippet>cout</snippet></ROW><ROW><id>19502871</id><snippet>cout &lt;&lt; static_cast&lt;int&gt;(boost::python::extract&lt;u8&gt;(pythonList[i])) &lt;&lt; "-";
</snippet></ROW><ROW><id>19503235</id><snippet>is_authenticated()</snippet></ROW><ROW><id>19503235</id><snippet>if request.user.is_authenticated():</snippet></ROW><ROW><id>19503312</id><snippet>d, s = {}, 0
for i in l:
    d[i] = len(i)
    s += len(i)
</snippet></ROW><ROW><id>19503312</id><snippet>def as_dict_and_total(l):
    d, s = {}, 0
    for i in l:
        d[i] = len(i)
        s += len(i)
    return d, s
</snippet></ROW><ROW><id>19503469</id><snippet>f.write('some text\n')
</snippet></ROW><ROW><id>19503469</id><snippet>'\n'</snippet></ROW><ROW><id>19503469</id><snippet>'/n'</snippet></ROW><ROW><id>19503476</id><snippet>state</snippet></ROW><ROW><id>19503476</id><snippet>"library"</snippet></ROW><ROW><id>19503476</id><snippet>"kitchen"</snippet></ROW><ROW><id>19503476</id><snippet>"potion_storage_room"</snippet></ROW><ROW><id>19503476</id><snippet>"wandering_around"</snippet></ROW><ROW><id>19503476</id><snippet>LIBRARY, KITCHEN, POTION_STORAGE_ROOM, WANDERING_AROUND = range(4)
</snippet></ROW><ROW><id>19503476</id><snippet>LIBRARY</snippet></ROW><ROW><id>19503476</id><snippet>KITCHEN</snippet></ROW><ROW><id>19503499</id><snippet>def func(d1, d2):
    m = (0, 0)
    for k in d1:
        res = abs(d1[k][1] - d2[k][1]) #func1
        #res = abs(d1[k][0] - d2[k][0]) # func2
        #res = abs(sum(d1[k]) - sum(d2[k])) # func3
        if res &gt; m[1]: m = (k, res)
    return m[0]
</snippet></ROW><ROW><id>19503527</id><snippet>raw_input()</snippet></ROW><ROW><id>19503527</id><snippet>str</snippet></ROW><ROW><id>19503527</id><snippet>-999</snippet></ROW><ROW><id>19503527</id><snippet>"-999"</snippet></ROW><ROW><id>19503527</id><snippet>-999</snippet></ROW><ROW><id>19503527</id><snippet>int()</snippet></ROW><ROW><id>19503527</id><snippet>temp = int(raw_input('enter temp in celsius, enter -999 to exit: '))
</snippet></ROW><ROW><id>19503527</id><snippet>while</snippet></ROW><ROW><id>19503527</id><snippet>raw_input</snippet></ROW><ROW><id>19503527</id><snippet>temp</snippet></ROW><ROW><id>19503769</id><snippet>self.message_post</snippet></ROW><ROW><id>19503769</id><snippet>osv.except_osv</snippet></ROW><ROW><id>19503769</id><snippet>osv.except_osv</snippet></ROW><ROW><id>19503769</id><snippet>from openerp.osv import osv
from openero.tools.translate import _

raise osv.except_osv(_('This is the error title'), _('This is the error message'))
</snippet></ROW><ROW><id>19503805</id><snippet>itertools.cycle()</snippet></ROW><ROW><id>19503805</id><snippet>itertools.izip()</snippet></ROW><ROW><id>19503805</id><snippet>from itertools import izip, cycle

def listplace(in_path):
    with open(in_path, 'wb') as file_obj:
        writer = csv.writer(file_obj)

        for row in izip(info_source, cycle([13243, 3452345, 234234])):
            writer.writerow(row)
</snippet></ROW><ROW><id>19503805</id><snippet>row</snippet></ROW><ROW><id>19503805</id><snippet>info_source</snippet></ROW><ROW><id>19503805</id><snippet>13243</snippet></ROW><ROW><id>19503805</id><snippet>3452345</snippet></ROW><ROW><id>19503805</id><snippet>234234</snippet></ROW><ROW><id>19503805</id><snippet>info_source</snippet></ROW><ROW><id>19503825</id><snippet>askopenfilename</snippet></ROW><ROW><id>19503825</id><snippet>from tkFileDialog import askopenfilename

path = askopenfilename()

f = open(path, 'r') # OR DO WHAT YOU WANT WITH PATH
</snippet></ROW><ROW><id>19503972</id><snippet>re.findall</snippet></ROW><ROW><id>19503972</id><snippet>emails = 'john45@email.com bob@email.com joe2@email.com'.split()

import re
print sorted(emails, key=lambda L: (map(int, re.findall('(\d+)@', L)), L))
# ['bob@email.com', 'joe2@email.com', 'john45@email.com']
</snippet></ROW><ROW><id>19503972</id><snippet>john1</snippet></ROW><ROW><id>19503972</id><snippet>['bob@email.com', 'john1@email.com', 'joe2@email.com']</snippet></ROW><ROW><id>19503972</id><snippet>john</snippet></ROW><ROW><id>19503972</id><snippet>getattr(re.search('(\d+)@', s), 'groups', lambda: ('0',))()
</snippet></ROW><ROW><id>19504255</id><snippet>defaults write com.apple.versioner.python Prefer-32-Bit -bool yes</snippet></ROW><ROW><id>19504396</id><snippet>Number</snippet></ROW><ROW><id>19504396</id><snippet>and</snippet></ROW><ROW><id>19504396</id><snippet>1</snippet></ROW><ROW><id>19504396</id><snippet>if (Number &gt;= 1) and (Number &lt; 19):
</snippet></ROW><ROW><id>19504396</id><snippet>if 1 &lt;= Number &lt; 19:
</snippet></ROW><ROW><id>19504396</id><snippet>divmod()</snippet></ROW><ROW><id>19504396</id><snippet>tens, below_ten = divmod(Number, 10)
</snippet></ROW><ROW><id>19504396</id><snippet>&gt;&gt;&gt; divmod(42, 10)
(4, 2)
</snippet></ROW><ROW><id>19504396</id><snippet>return num2words2[tens - 2] + '-' + num2words1[below_ten]
</snippet></ROW><ROW><id>19504396</id><snippet>def number(Number):
    if 1 &lt;= Number &lt; 19:
        return num2words1[Number]
    elif 20 &lt;= Number &lt;= 99:
        tens, below_ten = divmod(Number, 10)
        return num2words2[tens - 2] + '-' + num2words1[below_ten]
    else:
        print("Number out of range")
</snippet></ROW><ROW><id>19504539</id><snippet>longitude = [-i for i in longitude]
</snippet></ROW><ROW><id>19504539</id><snippet>x, y = m(longitude, latitude)
</snippet></ROW><ROW><id>19504539</id><snippet>x, y = m(latitude,longitude)
</snippet></ROW><ROW><id>19504539</id><snippet># Last-modified: 21 Oct 2013 05:35:16 PM

import numpy as np
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import csv, os, scipy
import pandas
from PIL import *


data = np.loadtxt('louisianastormb.csv',dtype=np.str,delimiter=',',skiprows=1)
'''print data'''
fig = plt.figure(figsize=(12,12))

ax = fig.add_axes([0.1,0.1,0.8,0.8])

m = Basemap(llcrnrlon=-100.,llcrnrlat=0.,urcrnrlon=-20.,urcrnrlat=57.,
            projection='lcc',lat_1=20.,lat_2=40.,lon_0=-60.,
            resolution ='l',area_thresh=1000.)

m.drawcoastlines(linewidth=0.5)
m.drawcountries(linewidth=0.5)
m.drawstates(linewidth=0.5)
# m.bluemarble(ax=ax)

# Creates parallels and meridians
m.drawparallels(np.arange(10.,35.,5.),labels=[1,0,0,1])
m.drawmeridians(np.arange(-120.,-80.,5.),labels=[1,0,0,1])
m.drawmapboundary(fill_color='aqua')
color_dict = {'AUDREY': 'red', 'ETHEL': 'white', 'BETSY': 'yellow','CAMILLE': 'blue', 'CARMEN': 'green','BABE': 'purple', }

colnames = ['Year','Name','Type','Latitude','Longitude']
data = pandas.read_csv('louisianastormb.csv', names=colnames)
names = list(data.Name)
lat = list(data.Latitude)
long = list(data.Longitude)
colorNames = list(data.Name)
#print lat
#print long
lat.pop(0)
long.pop(0)
colorNames.pop(0)
latitude= map(float, lat)
longitude = map(float, long)
# added by nye17
longitude = [-i for i in longitude]
# x, y = m(latitude,longitude)
x, y = m(longitude,latitude)
# convert to numpy arrays
x = np.atleast_1d(x)
y = np.atleast_1d(y)
colorNames = np.atleast_1d(colorNames)
#Plots points on map
for colorName in color_dict.keys():
    plt.plot(x[colorName == colorNames],y[colorName == colorNames],linestyle ='-',label=colorName,color=color_dict[colorName], linewidth=5 )
    lg = plt.legend()
    lg.get_frame().set_facecolor('grey')
plt.show()
</snippet></ROW><ROW><id>19504610</id><snippet>virtualenv</snippet></ROW><ROW><id>19504610</id><snippet>virtualenv /path/to/env/</snippet></ROW><ROW><id>19504610</id><snippet>source /path/to/env/bin/activate</snippet></ROW><ROW><id>19504610</id><snippet>pip</snippet></ROW><ROW><id>19504730</id><snippet>import numpy as np
XL = np.linspace(X.min(),X.max(),100)
YL = np.linspace(Y.min(),Y.max(),100)
ZL = np.linspace(Z.min(),Z.max(),100)

ax.plot(XL,0*XL,-100,zdir='z',color='k',lw=5)
ax.plot(0*YL,YL,-100,zdir='z',color='k',lw=5)

ax.plot(YL,0*YL,-40,zdir='x',color='k',lw=5)
ax.plot(0*ZL,ZL,-40,zdir='x',color='k',lw=5)

ax.plot(XL,0*XL,40,zdir='y',color='k',lw=5)
ax.plot(0*ZL,ZL,40,zdir='y',color='k',lw=5)
</snippet></ROW><ROW><id>19504730</id><snippet>ax.plot</snippet></ROW><ROW><id>19504730</id><snippet>plot(self, xs, ys, *args, **kwargs) method of matplotlib.axes.Axes3DSubplot instance
    Plot 2D or 3D data.

    ==========  ================================================
    Argument    Description
    ==========  ================================================
    *xs*, *ys*  X, y coordinates of vertices
    *zs*        z value(s), either one for all points or one for each point.
    *zdir*      Which direction to use as z ('x', 'y' or 'z') when plotting a 2D set.
    ==========  ================================================

    Other arguments are passed on to
    :func:`~matplotlib.axes.Axes.plot`
</snippet></ROW><ROW><id>19504743</id><snippet>class ClassName:
    def funname(self):
        self.idno = 120
        self.door = 150
</snippet></ROW><ROW><id>19504743</id><snippet>class ClassName:
    def funname(self, idno=120, door=150):
        self.idno = idno
        self.door = door
</snippet></ROW><ROW><id>19505157</id><snippet>print(b)</snippet></ROW><ROW><id>19505157</id><snippet>print("b")</snippet></ROW><ROW><id>19505157</id><snippet>b</snippet></ROW><ROW><id>19505157</id><snippet>"b"</snippet></ROW><ROW><id>19505157</id><snippet>a,b = 0, 1  
while b &lt; 1000: 
    print(b)
    a, b = b, a+b
</snippet></ROW><ROW><id>19505314</id><snippet>8.2 - 0.2</snippet></ROW><ROW><id>19505648</id><snippet>class gensim.matutils.Sparse2Corpus(sparse, documents_columns=True)

      Convert a matrix in scipy.sparse format into a streaming gensim corpus.
</snippet></ROW><ROW><id>19505687</id><snippet>print &lt;b&gt;(&lt;/b&gt;"type=%s; ... = %s;" % (type, ..., timeDiff)&lt;b&gt;)&lt;/b&gt;</snippet></ROW><ROW><id>19505776</id><snippet>mlab.specgram</snippet></ROW><ROW><id>19505776</id><snippet>specgram</snippet></ROW><ROW><id>19505776</id><snippet>ipython</snippet></ROW><ROW><id>19505776</id><snippet>method_name?</snippet></ROW><ROW><id>19505776</id><snippet>method_name??</snippet></ROW><ROW><id>19505776</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>19505776</id><snippet>Axes</snippet></ROW><ROW><id>19505913</id><snippet>from django.contrib.auth.models import User

class Employee(models.Model):
    user = models.OneToOneField(User)
    department = models.CharField(max_length=100)
</snippet></ROW><ROW><id>19505970</id><snippet>Story</snippet></ROW><ROW><id>19505970</id><snippet>UserStory</snippet></ROW><ROW><id>19505970</id><snippet>Capital</snippet></ROW><ROW><id>19505970</id><snippet>UserStory</snippet></ROW><ROW><id>19505970</id><snippet>class Story(models.Model):
    title = models.CharField(max_length=400)
    thetext = models.TextField()

class UserStory(models.Model):
    story = models.OneToOneField(Story) # renamed field to story as convention suggests
    date = models.DateTimeField()
    user = models.ForeignKey(User)

class ClassicStory(models.Model)
    story = models.OneToOneField(Story)
    date = models.DateTimeField()
    author = models.CharField(max_length=200)
</snippet></ROW><ROW><id>19505970</id><snippet># get all of the users UserStories:
user = request.user
stories = UserStory.objects.filter(user=user).select_related('story')

# print all of the stories:

for s in stories:
    print s.story.title
    print s.story.thetext
</snippet></ROW><ROW><id>19505970</id><snippet># iterate over ALL stories

allstories = Story.objects.all()
for s in allstories:
    print s.title
    print s.thetext
    print s.userstory     # this might error!
    print s.classicstory  # this might error!
</snippet></ROW><ROW><id>19505970</id><snippet>Story</snippet></ROW><ROW><id>19506063</id><snippet>root.after(time, set_color(root, hex_color_t))
</snippet></ROW><ROW><id>19506063</id><snippet>set_color</snippet></ROW><ROW><id>19506063</id><snippet>root</snippet></ROW><ROW><id>19506063</id><snippet>hex_color_t</snippet></ROW><ROW><id>19506063</id><snippet>None</snippet></ROW><ROW><id>19506063</id><snippet>time</snippet></ROW><ROW><id>19506063</id><snippet>None</snippet></ROW><ROW><id>19506063</id><snippet>def createColorChangeFunction(hcolor):
    return lambda:set_color(root, hcolor)
root.after(time, createColorChangeFunction(hex_color_t))
</snippet></ROW><ROW><id>19506063</id><snippet>createColorChangeFunction</snippet></ROW><ROW><id>19506160</id><snippet>    if hint_input == 'y':
        print(hint)
    guess = input("Your guess: ")
</snippet></ROW><ROW><id>19506219</id><snippet>from scipy import signal
from scipy import interpolate
import numpy as np
from numpy import linspace

x = [0,0,0,0,4,5,6,6,4,0,0,0,0,0,0,2,0,0,0,6,4,5,6,0,0,0,0,0]
s = interpolate.UnivariateSpline( linspace(0,len(x)-1,len(x)), np.array(x) )
ds = s.derivative()

slope_down_begin_points = [ p for p in signal.find_peaks_cwt( vector = [ -ds(v) for v in range(len(x)) ], widths = np.array([2]) ) if x[p-1] &gt;= 1 ]

slope_up_begin_points = [ p for p in signal.find_peaks_cwt( vector = [ ds(v) for v in range(len(x)) ], widths = np.array([2]) ) if x[p+1] &gt;= 1 ]

slope_up_begin_points + slope_down_begin_points
&gt;&gt; [4, 9, 16, 19, 23]
</snippet></ROW><ROW><id>19506219</id><snippet>16</snippet></ROW><ROW><id>19506219</id><snippet>find_peaks_cwt</snippet></ROW><ROW><id>19506219</id><snippet>UnivariateSpline</snippet></ROW><ROW><id>19506334</id><snippet>POST</snippet></ROW><ROW><id>19506334</id><snippet>QueryDict</snippet></ROW><ROW><id>19506334</id><snippet>getlist</snippet></ROW><ROW><id>19506334</id><snippet>",".join([format.lower() for format in request.POST.getlist('formats')])
</snippet></ROW><ROW><id>19506356</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; available = list(map(lambda x: datetime.strptime(x, '%Y-%m-%d'), available))
&gt;&gt;&gt; dateRange = available[-1] - available[0]
&gt;&gt;&gt; allDays = set((available[0] + timedelta(days=i)) for i in range(dateRange.days))
&gt;&gt;&gt; allDays - set(available)
{datetime.datetime(2013, 10, 26, 0, 0)}
</snippet></ROW><ROW><id>19506429</id><snippet>filter_by</snippet></ROW><ROW><id>19506429</id><snippet>**</snippet></ROW><ROW><id>19506429</id><snippet>kwargs = {'hometown': 'New York', 'university' : 'USC'}
User.query.filter_by(**kwargs)
# This above line is equivalent to saying...
User.query.filter_by(hometown='New York', university='USC')
</snippet></ROW><ROW><id>19506438</id><snippet>@classmethod</snippet></ROW><ROW><id>19506438</id><snippet>classmethod</snippet></ROW><ROW><id>19506438</id><snippet>class my_class:
    @classmethod
    def make_time_string(cls, **kwargs):
        pass

    @classmethod
    def make_title(cls, **kwargs):
        pass

    @classmethod
    def give_local_time(cls, **kwargs):
        pass

    @classmethod
    def data_count(cls, **kwargs):
        pass

print my_class.make_time_string
print my_class.make_title
print my_class.give_local_time
print my_class.data_count
</snippet></ROW><ROW><id>19506521</id><snippet>connection = MongoClient(ip, port)</snippet></ROW><ROW><id>19506521</id><snippet>connection = MongoClient()</snippet></ROW><ROW><id>19506589</id><snippet>lineaactual = json.loads(line.replace("'", '"'))
</snippet></ROW><ROW><id>19506668</id><snippet>import base64, StringIO, zipfile

# base64 string from the message
attachment = '...'
attachment = base64.b64decode(attachment)
attachment = StringIO.StringIO(attachment)

zipFile = zipfile.ZipFile(attachment, 'r')
</snippet></ROW><ROW><id>19506932</id><snippet>SCENT
CANOE
ARSON
ROUSE
?????
</snippet></ROW><ROW><id>19506932</id><snippet>SCENT
?????
?????
?????
?????
</snippet></ROW><ROW><id>19506932</id><snippet>          ?
          |
        SCENT
        ?????
        ?????
        ?????
        ?????
    /---/ | \-----\----\
   /      |   \    \    \
  |       |    \    \    \
SCENT  SCENT    ?    ?    ?
CANOE  ARSON
?????  ?????   ... etc ...
?????  ?????
?????  ?????
| |    /  | \
| |   /   \  \
? ?  /     |  \
   SCENT   ?   ?
   ARSON
   CANOE
   ?????
   ?????
</snippet></ROW><ROW><id>19506932</id><snippet>SCENT
CANOE
?????
?????
?????
</snippet></ROW><ROW><id>19506936</id><snippet>break_long_words=False</snippet></ROW><ROW><id>19506936</id><snippet>label</snippet></ROW><ROW><id>19506936</id><snippet>m[i]**2*(zb[layer]*m[i]**4 - 2*zb[layer]*m[j]**2*m[i]**2 +
zb[layer]*m[j]**4 - zt[layer]*m[i]**4 + 2*zt[layer]*m[j]**2*m[i]**2 -
zt[layer]*m[j]**4)**(-1)*ab[layer]*sin(m[i]*zb[layer])*sin(m[j]*zb[layer])
</snippet></ROW><ROW><id>19506936</id><snippet>textwrap</snippet></ROW><ROW><id>19506936</id><snippet>break_on_hyphens</snippet></ROW><ROW><id>19506936</id><snippet>(-|\+|\*\*|\*)</snippet></ROW><ROW><id>19506936</id><snippet>wordsep_re</snippet></ROW><ROW><id>19506936</id><snippet>class AlgebraWrapper(textwrap.TextWrapper):
    wordsep_re = re.compile(r'(\s+|(?:-|\+|\*\*|\*|\)|\]))')
w = AlgebraWrapper(break_long_words=False, break_on_hyphens=True)
print w.fill(a)
</snippet></ROW><ROW><id>19506936</id><snippet>m[i]**2*(zb[layer]*m[i]**4 - 2*zb[layer]*m[j]**2*m[i]**2 + zb[layer]*
m[j]**4 - zt[layer]*m[i]**4 + 2*zt[layer]*m[j]**2*m[i]**2 - zt[layer]*
m[j]**4)**(-1)*ab[layer]*sin(m[i]*zb[layer])*sin(m[j]*zb[layer])
</snippet></ROW><ROW><id>19506936</id><snippet>*</snippet></ROW><ROW><id>19506936</id><snippet>]</snippet></ROW><ROW><id>19506936</id><snippet>wordsep_re = re.compile(r'(\s+|(?:-|\+|\*\*|\*))')
</snippet></ROW><ROW><id>19506936</id><snippet>wordsep_re</snippet></ROW><ROW><id>19506936</id><snippet>b = re.sub(r'(-|\+|\*\*|\*', r'\1 ', a)
c = textwrap.fill(b)
d = re.sub(r'(-|\+|\*\*|\*) ', r'\1', c)
</snippet></ROW><ROW><id>19506936</id><snippet>if len(a) &gt;= 70:
    a = '({})'.format(a)
</snippet></ROW><ROW><id>19507003</id><snippet>void* convert_to_wcstring(PyObject* obj)
{
    if(PyString_Check(obj)) {
        throw_error_already_set();
    } else if(PyUnicode_Check(obj)) {
        return PyUnicode_AsUnicode(obj);
    }
    throw_error_already_set();
    return 0;
}
</snippet></ROW><ROW><id>19507003</id><snippet>BOOST_PYTHON_MODULE(test)
{
    converter::registry::insert(convert_to_wcstring, type_id&lt;wchar_t&gt;(),&amp;converter::wrap_pytype&lt;&amp;PyString_Type&gt;::get_pytype);
    ...
}
</snippet></ROW><ROW><id>19507003</id><snippet># Works
test.testWcharParam(u'test')

# Doesn't work
test.testWcharParam('test')
</snippet></ROW><ROW><id>19507011</id><snippet>account</snippet></ROW><ROW><id>19507011</id><snippet>account</snippet></ROW><ROW><id>19507011</id><snippet>def stockvalue(foo):
    return {'foo': 'bar'}

def getstocksym(foo):
    return None

def urlquery():
    return None
</snippet></ROW><ROW><id>19507011</id><snippet>home</snippet></ROW><ROW><id>19507011</id><snippet>@app.route("/")
def home():
   try:
       values = account.stockvalue(account.getstocksym(account.urlquery()))
   except Exception as e:
       return jsonify({"error": str(e)})
   return jsonify(values)
</snippet></ROW><ROW><id>19507011</id><snippet>app.config['DEBUG'] = True</snippet></ROW><ROW><id>19507011</id><snippet>app = Flask(__name__)</snippet></ROW><ROW><id>19507011</id><snippet>cacert.pem</snippet></ROW><ROW><id>19507011</id><snippet>account.py</snippet></ROW><ROW><id>19507011</id><snippet>git add .</snippet></ROW><ROW><id>19507011</id><snippet>account.py</snippet></ROW><ROW><id>19507011</id><snippet>import os
import oauth2 as oauth
# Other imports

token    = oauth.Token(key=_ACCESS_TOKEN_, secret=_ACCESS_TOKEN_SECRET_)
consumer = oauth.Consumer(key=_CONSUMER_KEY_, secret=_CONSUMER_SECRET_)
request_holdings_url = "%s/accounts/%s/holdings.json" % (_BASE_URL_, _ACCOUNT_NUMBER_)
request_values_url = "%s/market/ext/quotes.xml?" % _BASE_URL_

#creating the client
client = oauth.Client(consumer, token=token)
client.ca_certs = os.path.join(os.path.dirname(__file__), 'cacert.pem')

#Rest of your code
... 
</snippet></ROW><ROW><id>19507138</id><snippet>SecureNum</snippet></ROW><ROW><id>19507138</id><snippet>SecureNum</snippet></ROW><ROW><id>19507138</id><snippet>SecureNum = 12345

def f(R, S):
    if R * S != SecureNum: #&lt;== local SecureNum shadows the global one
        ...
    ...
    SecureNum = ...        #&lt;= This means SecureNum is a local 


def g(R, S):
    global SecureNum
    if R * S != SecureNum: #&lt;== now this is the global SecureNum
        ...
    ...
    SecureNum = ...        #&lt;= and so is this one
</snippet></ROW><ROW><id>19507173</id><snippet>$ python
Python 2.7.5+ (default, Sep 19 2013, 13:48:49) 
[GCC 4.8.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import requests
&gt;&gt;&gt; from datetime import datetime,date,timedelta
&gt;&gt;&gt; 
&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19507173</id><snippet>$ python mixcloud.py
</snippet></ROW><ROW><id>19507173</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>19507173</id><snippet>$ ./mixcloud.py
</snippet></ROW><ROW><id>19507248</id><snippet>allow</snippet></ROW><ROW><id>19507248</id><snippet>process_value</snippet></ROW><ROW><id>19507248</id><snippet>process_value</snippet></ROW><ROW><id>19507248</id><snippet>domain.com/(?:\w+/){1,3}\w+$</snippet></ROW><ROW><id>19507248</id><snippet>domain.com/foo/bar
domain.com/foo/bar/foo
domain.com/foo/bar/foo/bar
</snippet></ROW><ROW><id>19507248</id><snippet>domain.com/foo/
domain.com/foo/bar/foo/bar/foo
</snippet></ROW><ROW><id>19507248</id><snippet>process_value</snippet></ROW><ROW><id>19507248</id><snippet>def filter_path(value):
    # at least 2, at most 3 /'s
    if 1 &lt; value.count('/') &lt; 4:
        return value
</snippet></ROW><ROW><id>19507248</id><snippet>/foo</snippet></ROW><ROW><id>19507248</id><snippet>/foo/bar/foo</snippet></ROW><ROW><id>19507248</id><snippet>domain.com/static/(?:\w+/){3}otherstuff</snippet></ROW><ROW><id>19507248</id><snippet>filter_path</snippet></ROW><ROW><id>19507248</id><snippet>value.startswith('/static/')</snippet></ROW><ROW><id>19507248</id><snippet>Rule</snippet></ROW><ROW><id>19507248</id><snippet>CrawlSpider</snippet></ROW><ROW><id>19507248</id><snippet>process_links</snippet></ROW><ROW><id>19507248</id><snippet>def url_allowed(url):
    # check for the pattern /static/dir/dir/dir/ etc
    return True

def process_links(links):
    return [l for l in links if url_allowed(l.url)]
</snippet></ROW><ROW><id>19507281</id><snippet>range(int(a))</snippet></ROW><ROW><id>19507281</id><snippet>range(int(a), len(s))</snippet></ROW><ROW><id>19507281</id><snippet>//</snippet></ROW><ROW><id>19507281</id><snippet>/</snippet></ROW><ROW><id>19507281</id><snippet>range</snippet></ROW><ROW><id>19507281</id><snippet>takeStart</snippet></ROW><ROW><id>19507281</id><snippet>H</snippet></ROW><ROW><id>19507281</id><snippet>HELLO</snippet></ROW><ROW><id>19507281</id><snippet>T</snippet></ROW><ROW><id>19507281</id><snippet>TEST</snippet></ROW><ROW><id>19507281</id><snippet>BIGG</snippet></ROW><ROW><id>19507281</id><snippet>BIGGERTEST</snippet></ROW><ROW><id>19507281</id><snippet>-1</snippet></ROW><ROW><id>19507281</id><snippet>a = …</snippet></ROW><ROW><id>19507281</id><snippet>takeStart(s)</snippet></ROW><ROW><id>19507281</id><snippet>MA</snippet></ROW><ROW><id>19507281</id><snippet>takeEnd(s)</snippet></ROW><ROW><id>19507281</id><snippet>DAM</snippet></ROW><ROW><id>19507281</id><snippet>flip(takeEnd(s))</snippet></ROW><ROW><id>19507281</id><snippet>MAD</snippet></ROW><ROW><id>19507281</id><snippet>MAD</snippet></ROW><ROW><id>19507281</id><snippet>takeStart</snippet></ROW><ROW><id>19507281</id><snippet>takeEnd</snippet></ROW><ROW><id>19507281</id><snippet>foo = ""
for i in range(x, y):
    foo += s[i]
return foo
</snippet></ROW><ROW><id>19507281</id><snippet>return foo[x:y]
</snippet></ROW><ROW><id>19507281</id><snippet>flipped</snippet></ROW><ROW><id>19507281</id><snippet>return s[::-1]
</snippet></ROW><ROW><id>19507448</id><snippet>with open(csvfile) as f:
    for row in csv.DictReader(f, delimiter='|', skipinitialspace=True):
        do_something_with(row['Twitter handle']
</snippet></ROW><ROW><id>19507448</id><snippet>with open(csvfile) as f:
    headers = next(csv.reader(f, delimiter='|', skipinitialspace=True))
    headers = [header.strip() for header in headers]
    for row in csv.DictReader(f, fieldnames=headers, 
                              delimiter='|', skipinitialspace=True):
        do_something_with(row[colname].strip())
</snippet></ROW><ROW><id>19507493</id><snippet>int main(){
    XColor c;
    get_pixel_color(display, 30, 40, &amp;c);
    printf ("%d %d %d\n", c.red, c.green, c.blue);
    return 0;
}
</snippet></ROW><ROW><id>19507533</id><snippet>my_array, my_variable = my_function()
</snippet></ROW><ROW><id>19507719</id><snippet>[x for x in t if x not in s]
</snippet></ROW><ROW><id>19507719</id><snippet>my_list = [(x,a)
           for x in t
           if x not in s
           if x &gt; 0
           for a in y
           ...]
</snippet></ROW><ROW><id>19507791</id><snippet>os.system</snippet></ROW><ROW><id>19507791</id><snippet>os</snippet></ROW><ROW><id>19507791</id><snippet>subprocess</snippet></ROW><ROW><id>19507791</id><snippet>subprocess</snippet></ROW><ROW><id>19507791</id><snippet>check_output</snippet></ROW><ROW><id>19507791</id><snippet>out = subprocess.check_output(['ls', '-ltrh'])
</snippet></ROW><ROW><id>19507791</id><snippet>subprocess32</snippet></ROW><ROW><id>19507791</id><snippet>subprocess</snippet></ROW><ROW><id>19507791</id><snippet>def check_output(*popenargs, **kwargs):
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd, output=output)
    return output
</snippet></ROW><ROW><id>19507791</id><snippet>p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
out, _ = p.communicate()
do_something_with(out)
</snippet></ROW><ROW><id>19507791</id><snippet>simplejson</snippet></ROW><ROW><id>19507791</id><snippet>json</snippet></ROW><ROW><id>19507791</id><snippet>os.system</snippet></ROW><ROW><id>19507791</id><snippet>subprocess</snippet></ROW><ROW><id>19507986</id><snippet>def main():  
    section = (input('What section are you inputing ticket numbers for? '))
    if section == 'a' or 'A': # You mean if section in 'Aa':
        limit = 300
        cost = 20
    if section == 'b' or 'B': # You mean elif section in 'Bb':
        limit = 500
        cost = 15
    if section == 'c' or 'C': # You mean elif section in 'Cc':
        limit = 200
        cost = 10
    ticketSold = getTickets(section, limit)
    calcIncome(ticketSold, cost)

def getTickets(section, limit): # Doesn't actually use section.
    ticketSold = int(input('How many tickets were sold? '))
    return int(ticketSold) # Everything after this is dead code.
    if ticketsValid(ticketSold, limit): # Even if this did get called, 
        return ticketsValid # What should it return if the tickets aren't valid? 0?
</snippet></ROW><ROW><id>19507986</id><snippet>main</snippet></ROW><ROW><id>19507986</id><snippet>0</snippet></ROW><ROW><id>19507986</id><snippet>main</snippet></ROW><ROW><id>19507986</id><snippet>def main():
    while section:
        section = (input('What section are you inputing ticket numbers for?'))
        if section in 'Aa':
            limit = 300
            cost = 20
    elif section in 'Bb':
        limit = 500
        cost = 15
    if section in 'Cc':
        limit = 200
        cost = 10
    ticketSold = getTickets(section, limit)
    calcIncome(ticketSold, cost)
</snippet></ROW><ROW><id>19507986</id><snippet>section_a_cost = 0
section_b_cost = 0
section_c_cost = 0
</snippet></ROW><ROW><id>19507986</id><snippet>def displayTotals():
    '''display the totals'''
    print('Section A generated {}'.format(section_a_cost)
    print('Section B generated {}' …) # I leave the rest to you.
    # How do we generate the total for the theater?

def main():
    section = 'A' # whatever, just to get us started
    while section:
        section = input('What section are you inputing ticket numbers for? ')
        if section in 'Aa':
            limit = 300
            cost = 20
            ticketSold = getTickets(section, limit)
            section_a_cost += calcIncome(ticketSold, cost)
        elif section in 'Bb':
            limit = 500
            cost = 15
            ticketSold = getTickets(section, limit)
            section_b_cost += calcIncome(ticketSold, cost)
        elif …
            …
    displayTotals()
</snippet></ROW><ROW><id>19508097</id><snippet>groupby</snippet></ROW><ROW><id>19508097</id><snippet>filter</snippet></ROW><ROW><id>19508097</id><snippet>&gt;&gt;&gt; df.groupby("item_id").filter(lambda x: len(x) &gt; 1)
   item_id    measure1    measure2
0        1  someNumber  someNumber
1        1  someNumber  someNumber
2        1  someNumber  someNumber
4        3  someNumber  someNumber
5        3  someNumber  someNumber
7        5  someNumber  someNumber
8        5  someNumber  someNumber
</snippet></ROW><ROW><id>19508173</id><snippet>very_large_external_package</snippet></ROW><ROW><id>19508281</id><snippet>StAX</snippet></ROW><ROW><id>19508281</id><snippet>StAX</snippet></ROW><ROW><id>19508281</id><snippet>SAX</snippet></ROW><ROW><id>19508281</id><snippet>hasNext()</snippet></ROW><ROW><id>19508281</id><snippet>next()</snippet></ROW><ROW><id>19508281</id><snippet>from javax.xml.stream import XMLStreamConstants, XMLInputFactory, XMLStreamReader
from java.io import ByteArrayInputStream;
from java.lang import String

xml = String(
"""&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;employees&gt;
  &lt;employee id="111"&gt;
    &lt;firstName&gt;Rakesh&lt;/firstName&gt;
    &lt;lastName&gt;Mishra&lt;/lastName&gt;
    &lt;location&gt;Bangalore&lt;/location&gt;
  &lt;/employee&gt;
  &lt;employee id="112"&gt;
    &lt;firstName&gt;John&lt;/firstName&gt;
    &lt;lastName&gt;Davis&lt;/lastName&gt;
    &lt;location&gt;Chennai&lt;/location&gt;
  &lt;/employee&gt;
  &lt;employee id="113"&gt;
    &lt;firstName&gt;Rajesh&lt;/firstName&gt;
    &lt;lastName&gt;Sharma&lt;/lastName&gt;
    &lt;location&gt;Pune&lt;/location&gt;
  &lt;/employee&gt;
&lt;/employees&gt;
""")

class Employee:
    id = None
    firstName = None
    lastName = None
    location = None

    def __str__(self):
        return self.firstName + " " + self.lastName + "(" + self.id + ") " + self.location

factory = XMLInputFactory.newInstance();
reader = factory.createXMLStreamReader(ByteArrayInputStream(xml.getBytes()))
employees = []
employee = None
tagContent = None

while reader.hasNext():
    event = reader.next();

    if event == XMLStreamConstants.START_ELEMENT:
        if "employee" == reader.getLocalName():
            employee = Employee()
            employee.id = reader.getAttributeValue(0)
    elif event == XMLStreamConstants.CHARACTERS:
        tagContent = reader.getText()
    elif event == XMLStreamConstants.END_ELEMENT:
        if "employee" == reader.getLocalName():
            employees.append(employee)
        elif "firstName" == reader.getLocalName():
            employee.firstName = tagContent
        elif "lastName" == reader.getLocalName():
            employee.lastName = tagContent
        elif "location" == reader.getLocalName():
            employee.location = tagContent

for employee in employees:
    print employee
</snippet></ROW><ROW><id>19508341</id><snippet>import optparse
import sys

if __name__ == '__main__':
    parser = optparse.OptionParser()

    (options, args) = parser.parse_args()

    if len(args) != 3:
        print 'please specify all required arguments - qtype qname output_file'
        sys.exit(-1)

    qtype, qname, output = args

    if qtype == 'web':
        pass
    elif qtype == 'local':
        pass
    else:
        print 'no qtype specified! exiting'
        sys.exit(-1)
</snippet></ROW><ROW><id>19508341</id><snippet>program.py  web  blah blah
</snippet></ROW><ROW><id>19508341</id><snippet>import optparse
import sys

if __name__ == '__main__':
    parser = optparse.OptionParser()

    parser.add_option('--qtype', action='store', dest='qtype', type='string')
    parser.add_option('--qname', action='store', dest='qname', type='string')
    parser.add_option('--output', action='store', type='string', dest='filename')

    (options, args) = parser.parse_args()
    if options.qtype == 'web':
        pass
    elif options.qtype == 'local':
        pass
    else:
        print 'no qtype specified! exiting'
        sys.exit(-1)
</snippet></ROW><ROW><id>19508341</id><snippet>program.py --qtype web --qname blah --output blah
</snippet></ROW><ROW><id>19508362</id><snippet>while</snippet></ROW><ROW><id>19508362</id><snippet>print</snippet></ROW><ROW><id>19508362</id><snippet>pool == 0</snippet></ROW><ROW><id>19508390</id><snippet>read()</snippet></ROW><ROW><id>19508390</id><snippet>for line in open("words/text.txt", 'r').readlines():
    split_lines = line.strip('{}').split('|')
    if word == split_lines[0]: #Or word in line would look for word anywhere in the line
        return split_lines[1]
</snippet></ROW><ROW><id>19508417</id><snippet>$ cat foo
&gt;&gt;&gt; a = 'a'
&gt;&gt;&gt; b = 'b'
&gt;&gt;&gt; ab = a + b
&gt;&gt;&gt; ab
'ab'
$ python -m doctest foo
$ cat &gt; bar
&gt;&gt;&gt; a = 'a'
&gt;&gt;&gt; b = 'b'
&gt;&gt;&gt; ab = b + a # oops
&gt;&gt;&gt; ab
'ab'
$ python -m doctest bar
**********************************************************************
File "bar", line 4, in bar
Failed example:
    ab
Expected:
    'ab'
Got:
    'ba'
**********************************************************************
1 items had failures:
   1 of   4 in bar
***Test Failed*** 1 failures.
</snippet></ROW><ROW><id>19508439</id><snippet>time.sleep</snippet></ROW><ROW><id>19508439</id><snippet>time.sleep(..)</snippet></ROW><ROW><id>19508439</id><snippet>None</snippet></ROW><ROW><id>19508439</id><snippet>while</snippet></ROW><ROW><id>19508439</id><snippet>select.select</snippet></ROW><ROW><id>19508439</id><snippet>import select
import sys

print('Press enter to continue.', end='', flush=True)
r, w, x = select.select([sys.stdin], [], [], 600)
</snippet></ROW><ROW><id>19508439</id><snippet>msvcrt</snippet></ROW><ROW><id>19508439</id><snippet>import msvcrt
import time

t0 = time.time()
while time.time() - t0 &lt; 600:
    if msvcrt.kbhit():
        if msvcrt.getch() == '\r': # not '\n'
            break
    time.sleep(0.1)
</snippet></ROW><ROW><id>19508463</id><snippet>app.jinja_env.globals.update(global_key1=global_value1,
                             global_key2=global_value2,
                             global_key3=global_value3)
</snippet></ROW><ROW><id>19508496</id><snippet>import win32api
import win32con

win32api.WinExec(
    '{0}\\control.exe Inetcpl.cpl'.format(win32api.GetSystemDirectory()),
    win32con.SW_NORMAL
)

# or

win32api.WinExec('control.exe Inetcpl.cpl', win32con.SW_NORMAL)
</snippet></ROW><ROW><id>19508496</id><snippet>import os

os.system('{0}\\System32\\control.exe Inetcpl.cpl'.format(os.environ['WINDIR']))

# or

os.system('control.exe Inetcpl.cpl')
</snippet></ROW><ROW><id>19508511</id><snippet>number=session.query(func.count(Item.id)).scalar()
randoms=random.sample(range(number),2)
item1=session.query(Item).filter_by(id=randoms[0]+1).one()
item2=session.query(Item).filter_by(id=randoms[1]+1).one()
</snippet></ROW><ROW><id>19508543</id><snippet>email.message_from_string(raw_email)
</snippet></ROW><ROW><id>19508543</id><snippet>email.message_from_bytes(raw_email)
</snippet></ROW><ROW><id>19508570</id><snippet>__iter__</snippet></ROW><ROW><id>19508570</id><snippet>self</snippet></ROW><ROW><id>19508573</id><snippet> </snippet></ROW><ROW><id>19508573</id><snippet>\xa0</snippet></ROW><ROW><id>19508573</id><snippet>\xc2\xa0</snippet></ROW><ROW><id>19508573</id><snippet>110xxxxx 10xxxxxx</snippet></ROW><ROW><id>19508573</id><snippet>10000000</snippet></ROW><ROW><id>19508573</id><snippet>11000010 10000000</snippet></ROW><ROW><id>19508573</id><snippet> </snippet></ROW><ROW><id>19508573</id><snippet>white-space</snippet></ROW><ROW><id>19508638</id><snippet>from sqlalchemy import func
selection = users.filter(coalesce(Users.status, 0) == 1,
                         coalesce(Users.no_reminders, 0) == 0,
                         func.dbo.pplBalance(Users.user_id, datetime.datetime.now()) &lt; -0.01).all()
</snippet></ROW><ROW><id>19508925</id><snippet>from itertools import chain
[round(x, 4) for x in chain(*chain(*rlist))]
</snippet></ROW><ROW><id>19508925</id><snippet>itertools.chain</snippet></ROW><ROW><id>19508925</id><snippet>round</snippet></ROW><ROW><id>19509002</id><snippet>for an_id in a_long_list_of_ids:
   cursor.execute("SELECT * FROM my_table WHERE id=%s", (an_id,))
   do_something(cursor.fetchall())
</snippet></ROW><ROW><id>19509002</id><snippet>len(a_long_list_of_ids)</snippet></ROW><ROW><id>19509002</id><snippet>cursor.execute("SELECT * FROM my_table WHERE id IN (%s)", 
    (','.join(a_long_list_of_ids),)
)
do_something(cursor.fetchall())
</snippet></ROW><ROW><id>19509123</id><snippet>def lower_output(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs).lower()
    return wrapper


class Dogs(object):
    totalDogs = 0
    dogList=[]

    def __init__(self, breed, color, age):
        self.breed=breed
        self.color=color
        self.age=age
        Dogs.dogList.append(self.breed)
        Dogs.totalDogs += 1

    @lower_output
    def get_breed(self):
        return self.breed




&gt;&gt;&gt; terrier=Dogs("TeRrIer", "white", 5)
&gt;&gt;&gt; terrier.get_breed()
terrier
</snippet></ROW><ROW><id>19509224</id><snippet>(x, y)</snippet></ROW><ROW><id>19509224</id><snippet>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
</snippet></ROW><ROW><id>19509224</id><snippet>__init__</snippet></ROW><ROW><id>19509224</id><snippet>Point(3, 2)</snippet></ROW><ROW><id>19509224</id><snippet>class Point(object):
    def init(self, x, y):
        self.x = x
        self.y = y
        return self


p = Point().init(x, y)
</snippet></ROW><ROW><id>19509224</id><snippet>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
</snippet></ROW><ROW><id>19509224</id><snippet>p1 == p2</snippet></ROW><ROW><id>19509224</id><snippet>eq</snippet></ROW><ROW><id>19509224</id><snippet>p1.eq(p2)</snippet></ROW><ROW><id>19509224</id><snippet>__call__</snippet></ROW><ROW><id>19509224</id><snippet>class Foobar(object):
    def __init__(self, a):
        self.a = a

    def __call__(self, b):
        return a + b

f = Foobar(3)
print f(4)  # returns 7
</snippet></ROW><ROW><id>19509224</id><snippet>f.call(4)</snippet></ROW><ROW><id>19509282</id><snippet>re.match</snippet></ROW><ROW><id>19509282</id><snippet>re.search</snippet></ROW><ROW><id>19509282</id><snippet>re.match</snippet></ROW><ROW><id>19509282</id><snippet>re.search</snippet></ROW><ROW><id>19509282</id><snippet>import re
text = "I want to match anything in &lt;angle brackets&gt;"
match = re.search("\&lt;(?P&lt;brackets&gt;[^\&gt;]+)&gt;", text)
if match:
    print (match.group('brackets'))
</snippet></ROW><ROW><id>19509282</id><snippet>'angle brackets'
</snippet></ROW><ROW><id>19509475</id><snippet>import os
from datetime import datetime

the_time = datetime.now().strftime("%Y%m%d%H%M%S")
CL = 12345
dirpath = r'C:\dropbox\scripts\{0}_{1}'.format(the_time, CL)

if not os.path.isdir(dirpath):
    os.mkdir(dirpath)
</snippet></ROW><ROW><id>19509568</id><snippet>env = Environment()
SConscript('source/SConscript_obj', variant_dir='object',
           duplicate=0, exports='env')
SConscript('source/SConscript', variant_dir='bin',
           duplicate=0, exports='env')
</snippet></ROW><ROW><id>19509568</id><snippet>Import('env')

env.Object("test.cpp")
env.Object("sdl_test.cpp")
</snippet></ROW><ROW><id>19509568</id><snippet>Import('env')

env.Program("test", ["#/object/test.o"])
env.Program("sdl-test", ["#/object/sdl_test.o"], LIBS=["SDL2"])
</snippet></ROW><ROW><id>19509623</id><snippet>&lt;i&gt;This &lt;span title="a"&gt;is&lt;br&gt; some &lt;html&gt;invalid&lt;/htl %&gt; HTML. 
&lt;sarcasm&gt;It's so great!&lt;/sarcasm&gt;
</snippet></ROW><ROW><id>19509623</id><snippet> &lt;i&gt;This 
  &lt;span title="a"&gt;is
   &lt;br /&gt; some 
   &lt;html&gt;invalid HTML. 
    &lt;sarcasm&gt;It's so great!
    &lt;/sarcasm&gt;
   &lt;/html&gt;
  &lt;/span&gt;
 &lt;/i&gt;
</snippet></ROW><ROW><id>19510151</id><snippet>sum(..., [])
</snippet></ROW><ROW><id>19510254</id><snippet>def root(b):
    g = lambda a, b=b : f(a,b)
    return scipy.optimize.fsolve( g, 0.0 )
</snippet></ROW><ROW><id>19510466</id><snippet>directory</snippet></ROW><ROW><id>19510466</id><snippet>"/tmp/files"</snippet></ROW><ROW><id>19510466</id><snippet>"../../etc/passwd"</snippet></ROW><ROW><id>19510466</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(directory + "../../etc/passwd")
'/etc/passwd'
</snippet></ROW><ROW><id>19510466</id><snippet>&gt;&gt;&gt; os.path.join("/tmp/files", os.path.basename("../../etc/passwd")
/tmp/files/passwd
</snippet></ROW><ROW><id>19510491</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>19510491</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; lis =  [['a','b','c'],[1,2,3],['i','j','k','l'],[5,10,15,20]]
&gt;&gt;&gt; list(izip_longest(*lis, fillvalue=''))
[('a', 1, 'i', 5),
 ('b', 2, 'j', 10),
 ('c', 3, 'k', 15),
 ('', '', 'l', 20)]
</snippet></ROW><ROW><id>19510491</id><snippet>csv.writerows(izip_longest(*lis, fillvalue=''))</snippet></ROW><ROW><id>19510607</id><snippet>for x in (1,2,3,4):print x;exec("for y in (5,6):print x,y;")
</snippet></ROW><ROW><id>19510607</id><snippet>for s in Section.objects.all():exec("for j in s.children():print j")
</snippet></ROW><ROW><id>19510607</id><snippet>itertools.product</snippet></ROW><ROW><id>19510607</id><snippet>print x</snippet></ROW><ROW><id>19510607</id><snippet>for x, y in itertools.product((1,2,3,4), (5,6)):print x,y)
</snippet></ROW><ROW><id>19510711</id><snippet>re.findall('(?P&lt;id1&gt;.{5}):[\d\.]+,(?P&lt;id2&gt;.{5}):[\d\.]+', text)
</snippet></ROW><ROW><id>19510711</id><snippet>(.{5})...</snippet></ROW><ROW><id>19510834</id><snippet>data = [{"name": key, "age": value} for key, value in my_dict.items()]
</snippet></ROW><ROW><id>19510834</id><snippet>&gt;&gt;&gt; my_dict = {'John': 23, 'Matthew': 8, 'Peter': 45}
&gt;&gt;&gt; data = [{"name": key, "age": value} for key, value in my_dict.items()]
&gt;&gt;&gt; data
[{'age': 8, 'name': 'Matthew'}, {'age': 23, 'name': 'John'}, {'age': 45, 'name': 'Peter'}]
</snippet></ROW><ROW><id>19510874</id><snippet>formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s {0}'.format(var))
</snippet></ROW><ROW><id>19510884</id><snippet>from datetime import datetime

d1 = datetime.strptime(date1, "%m-%d-%y")
d2 = datetime.strptime(date2, "%m-%d-%y")

assert d1 &gt; d2
</snippet></ROW><ROW><id>19510884</id><snippet>"%m-%d-%y"</snippet></ROW><ROW><id>19511303</id><snippet>db.execute("SELECT ... WHERE lexicon.word IN (?,?,?)",
           ['Hello', 'world', 'meow'])
</snippet></ROW><ROW><id>19511303</id><snippet>keywords = ['Hello', 'world', 'meow']
sql = "SELECT ... WHERE lexicon.word IN (" + ",".join(["?"] * len(keywords)) + ")"
db.execute(sql, keywords)
</snippet></ROW><ROW><id>19511539</id><snippet># only an example, you can choose a different encoding
bytes('example', encoding='utf-8')
</snippet></ROW><ROW><id>19511706</id><snippet>add_subparsers(dest='action')</snippet></ROW><ROW><id>19511706</id><snippet>list</snippet></ROW><ROW><id>19511706</id><snippet>start</snippet></ROW><ROW><id>19511706</id><snippet>stop</snippet></ROW><ROW><id>19511706</id><snippet>list</snippet></ROW><ROW><id>19511706</id><snippet>-a</snippet></ROW><ROW><id>19511706</id><snippet>script.py list
script.py start  # fail with insufficient arguments
script.py start -t a -p /tmp -c x
script.py start -t b -r rr -c y  
</snippet></ROW><ROW><id>19511706</id><snippet>from argparse import ArgumentParser

parser = ArgumentParser(description="Tool to keep archiving tar files")
sub = parser.add_subparsers(dest='action')
sp1 = sub.add_parser('start')
sp2 = sub.add_parser('stop')
sp3 = sub.add_parser('list')
#parser.add_argument("-a", "--action", dest="action", choices=("start", "stop", "list"), help="start/stop/list the directories to be monitored", default="list", required=True)
for sp in [sp1,sp2]:
    sp.add_argument("-t", "--type", dest="type", choices=("a", "b"), help="Type of spooler job", default=None)
    sp.add_argument("-p", "--path", dest="path", help="Absolute path of the directory to be monitored", default=None)
    sp.add_argument("-c", "--codeline", dest="codeline", choices=("x","y","z"), default=None, required=True)
    sp.add_argument("-r", "--release", dest="release", help="Directory path gets assigned automatically based on the release", default=None)

for astr in [
    'list',
    'start -t a -p /tmp -c x',
    'start -t b -r rr -c y',
    'start']:
    print parser.parse_args(astr.split())
</snippet></ROW><ROW><id>19511706</id><snippet>Namespace(action='list')
Namespace(action='start', codeline='x', path='/tmp', release=None, type='a')
Namespace(action='start', codeline='y', path=None, release='rr', type='b')
usage: stack19510774.py start [-h] [-t {a,b}] [-p PATH] -c {x,y,z}
                              [-r RELEASE]
stack19510774.py start: error: argument -c/--codeline is required
</snippet></ROW><ROW><id>19511706</id><snippet>-c</snippet></ROW><ROW><id>19511706</id><snippet>stop</snippet></ROW><ROW><id>19511755</id><snippet>result = []
row2 = []
while curr_row &lt; numOfRows:
   curr_row += 1
   row2 = []
   row = worksheet.row(curr_row)
   for value2 in re.findall(r"'(.*?)'", str(row)):
        row2.append(value2)
   result.append(row2)
return result
</snippet></ROW><ROW><id>19511755</id><snippet>for row in Classobject.collectInfoFromXLS():
    print row
</snippet></ROW><ROW><id>19511755</id><snippet>yield</snippet></ROW><ROW><id>19511755</id><snippet>return</snippet></ROW><ROW><id>19511755</id><snippet>def collectInfoFromXLS():
    workbookPath = config.get('TestCaseFileURL','XLSpath')
    workbook = xlrd.open_workbook(workbookPath)
    SheetPath = config.get('TesCaseSheetName','Sheet1')
    worksheet = workbook.sheet_by_name(SheetPath)
    numOfRows = worksheet.nrows - 1
    curr_row = 0
    row2 = []
    while curr_row &lt; numOfRows:
       curr_row += 1
       row2 = []
       row = worksheet.row(curr_row)
       for value2 in re.findall(r"'(.*?)'", str(row)):
            row2.append(value2)
       yield row2
</snippet></ROW><ROW><id>19511755</id><snippet>for row in Classobject.collectInfoFromXLS():
    print row
</snippet></ROW><ROW><id>19511755</id><snippet>Classobject.collectInfoFromXLS()</snippet></ROW><ROW><id>19511920</id><snippet>In [10]: for i in numpy.arange(xo, xn+h, h):
        xs.append(float(i))
....:     

In [11]: xs
Out[11]: 
[1.0,
1.1,
1.2000000000000002,
1.3000000000000003,
1.4000000000000004,
1.5000000000000004,
1.6000000000000005,
1.7000000000000006,
1.8000000000000007,
1.9000000000000008,
2.000000000000001,
2.100000000000001,
2.200000000000001,
2.300000000000001,
2.4000000000000012,
2.5000000000000013,
2.6000000000000014,
2.7000000000000015,
2.8000000000000016,
2.9000000000000017,
3.0000000000000018,
3.100000000000002,
3.200000000000002,
3.300000000000002,
3.400000000000002,
3.500000000000002,
3.6000000000000023,
3.7000000000000024,
3.8000000000000025,
3.9000000000000026,
4.000000000000003]
</snippet></ROW><ROW><id>19511920</id><snippet>def isnear(x,y, precision = 1e-5):
    return abs(x-y)&lt;precision
</snippet></ROW><ROW><id>19511920</id><snippet>numpy.allclose(x, y, atol = 1e-5)
</snippet></ROW><ROW><id>19512736</id><snippet># READ ALL DAT FILE IN PATHIMPORT AND COMBINE INTO ONE TEXT FILE
strToday =  dateToday()   
read_files = glob.glob(pathImport + "\\" + "*.Dat")
with open("C:/swipeimport/" + "M_" + strToday + ".txt", "wb") as outfile:
    for x in read_files:
        with open(x, "rb") as infile:
            outfile.write(infile.read())    
</snippet></ROW><ROW><id>19513238</id><snippet>send</snippet></ROW><ROW><id>19513238</id><snippet>`recv</snippet></ROW><ROW><id>19513238</id><snippet>recv</snippet></ROW><ROW><id>19513238</id><snippet>data=pack('!BBBBHHII', P2P_h.version, P2P_h.ttl, P2P_h.msgType, P2P_h.reserved, P2P_h.sendPort, P2P_h.payloadLength, P2P_h.ipSrc, P2P_h.messageId) #your current header
data+= pack("!I",len(body)) #assumes len(body) fits into a integer
data+= body #assumes body is a string
socket.send(data)
</snippet></ROW><ROW><id>19513238</id><snippet>data= socket.recv( struct.calcsize('!BBBBHHII') )
P2P_h.version, P2P_h.ttl, P2P_h.msgType, P2P_h.reserved, P2P_h.sendPort, P2P_h.payloadLength, P2P_h.ipSrc, P2P_h.messageId= unpack('!BBBBHHII', data)
data= socket.recv( struct.calcsize("!I") )
body_size= unpack("!I", data)
body= socket.recv( body_size )
</snippet></ROW><ROW><id>19513341</id><snippet>setFocus</snippet></ROW><ROW><id>19513341</id><snippet>setFocus</snippet></ROW><ROW><id>19513457</id><snippet>get_clipboard</snippet></ROW><ROW><id>19513457</id><snippet>sublime.get_clipboard()
</snippet></ROW><ROW><id>19513457</id><snippet>getClipboard</snippet></ROW><ROW><id>19513609</id><snippet>file.read()</snippet></ROW><ROW><id>19513609</id><snippet>str</snippet></ROW><ROW><id>19513609</id><snippet>bytes</snippet></ROW><ROW><id>19513609</id><snippet>mosquitto.publish()</snippet></ROW><ROW><id>19513609</id><snippet>#!/usr/bin/python

import mosquitto

def on_publish(mosq, userdata, mid):
  # Disconnect after our message has been sent.
  mosq.disconnect()

# Specifying a client id here could lead to collisions if you have multiple
# clients sending. Either generate a random id, or use:
#client = mosquitto.Mosquitto()
client = mosquitto.Mosquitto("image-send")
client.on_publish = on_publish
client.connect("127.0.0.1")

f = open("data")
imagestring = f.read()
byteArray = bytes(imagestring)
client.publish("photo", byteArray ,0)
# If the image is large, just calling publish() won't guarantee that all 
# of the message is sent. You should call one of the mosquitto.loop*()
# functions to ensure that happens. loop_forever() does this for you in a
# blocking call. It will automatically reconnect if disconnected by accident
# and will return after we call disconnect() above.
client.loop_forever()
</snippet></ROW><ROW><id>19513661</id><snippet>python manage.py dbbackup
</snippet></ROW><ROW><id>19513759</id><snippet>from inspect import getmembers, isfunction

functions_list = [o for o in getmembers(my_module, isfunction)]
</snippet></ROW><ROW><id>19514204</id><snippet>PyQt</snippet></ROW><ROW><id>19514204</id><snippet>Selenium</snippet></ROW><ROW><id>19514572</id><snippet>if {row[1] not in seen} &amp; {row[2] not in seen} &amp; {row[3] not in seen}:
</snippet></ROW><ROW><id>19514572</id><snippet>&gt;&gt;&gt; {False} &amp; {True}
set([])
&gt;&gt;&gt; {True} &amp; {True}
set([True])
&gt;&gt;&gt; {False} &amp; {False}
set([False])
&gt;&gt;&gt; bool(set([False]))
True    #non-empty set is True in boolean context
</snippet></ROW><ROW><id>19514572</id><snippet>if row[1] not in seen and row[2] not in seen and row[3] not in seen:
</snippet></ROW><ROW><id>19514572</id><snippet>if all(value not in seen for value in row[1:4]):
</snippet></ROW><ROW><id>19514608</id><snippet>Authorization: Basic &lt;...&gt;
</snippet></ROW><ROW><id>19514608</id><snippet>&lt;...&gt;</snippet></ROW><ROW><id>19514608</id><snippet>username:password</snippet></ROW><ROW><id>19514608</id><snippet>foo</snippet></ROW><ROW><id>19514608</id><snippet>bar</snippet></ROW><ROW><id>19514608</id><snippet>`Authorization: Basic Zm9vOmJhcg==`
</snippet></ROW><ROW><id>19514683</id><snippet>proc = subprocess.Popen(['adb', 'logcat', '-v', 'time'], stdout=subprocess.PIPE)
for line in proc.stdout:
    if "Setting system time at" in line:
        proc.kill()
        break
proc.wait()
</snippet></ROW><ROW><id>19514729</id><snippet>@app.route('/process/&lt;user_id&gt;/&lt;file_format&gt;/&lt;download&gt;')
def download(user_id, file_format, download):
    return redirect(url_for('static', filename='documents/'+download))
</snippet></ROW><ROW><id>19514865</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>19514865</id><snippet>~/...</snippet></ROW><ROW><id>19514865</id><snippet>/home/bradford/Development/Django/pub_pic/templates</snippet></ROW><ROW><id>19514873</id><snippet>getch()</snippet></ROW><ROW><id>19514873</id><snippet>import curses
import curses.textpad as textpad

def main(screen):
    """screen is a curses screen passed from the wrapper"""
    while True:
        textpad.Textbox(curses.newwin(1,13,4,0), insert_mode=True).edit()
        textpad.Textbox(curses.newwin(1,13,4,16), insert_mode=True).edit()

if __name__ == '__main__':   
    curses.wrapper(main) 
</snippet></ROW><ROW><id>19514928</id><snippet>class Person:

    def __init__(self, firstname=None, lastname=None, age=None, gender=None):
    ...
    self.age = int(age) # Convert from string to int

    ...

    def searchAge(self, matchString):      
        return matchString == self.age # Check int against int
</snippet></ROW><ROW><id>19514928</id><snippet>def searchFName(self, matchString):
    return matchString.lower() in self.fname.lower()
</snippet></ROW><ROW><id>19514967</id><snippet>def __init__(self, parent, title, percent):

    super(Example, self).__init__(parent, title=title)
    screen_size_x, scree_size_y = wx.GetDisplaySize()
    size_x = round(screen_size_x*percent,0)
    size_y = round(screen_size_y*percent,0)
    self.SetSize((size_x, size_y))
    self.Show()
</snippet></ROW><ROW><id>19515091</id><snippet>dir()</snippet></ROW><ROW><id>19515091</id><snippet>dir()</snippet></ROW><ROW><id>19515091</id><snippet>type(instance).__dir__</snippet></ROW><ROW><id>19515091</id><snippet>module</snippet></ROW><ROW><id>19515091</id><snippet>module</snippet></ROW><ROW><id>19515091</id><snippet>__dir__</snippet></ROW><ROW><id>19515091</id><snippet>from yourmodule import *</snippet></ROW><ROW><id>19515091</id><snippet>__all__</snippet></ROW><ROW><id>19515091</id><snippet>import</snippet></ROW><ROW><id>19515108</id><snippet>char = pygame.transform.rotate(char, player_angle)
</snippet></ROW><ROW><id>19515640</id><snippet>import sys, traceback

def excepthook(type, value, tb):
    traceback.print_exception(type, value, tb)

    while tb.tb_next:
        tb = tb.tb_next

    print &gt;&gt;sys.stderr, 'Locals:',  tb.tb_frame.f_locals
    print &gt;&gt;sys.stderr, 'Globals:', tb.tb_frame.f_globals

sys.excepthook = excepthook

def x():
    y()

def y():
    foo = 1
    bar = 0

    foo/bar

x()
</snippet></ROW><ROW><id>19515640</id><snippet>    while tb:
        print &gt;&gt;sys.stderr, 'Locals:',  tb.tb_frame.f_locals
        print &gt;&gt;sys.stderr, 'Globals:', tb.tb_frame.f_globals
        tb = tb.tb_next
</snippet></ROW><ROW><id>19515906</id><snippet>var1, var2, var3 = (ll + [None] * 3)[:3]
</snippet></ROW><ROW><id>19516344</id><snippet>range()</snippet></ROW><ROW><id>19516344</id><snippet>&gt;&gt;&gt; range(3)
[0, 1, 2]
</snippet></ROW><ROW><id>19516344</id><snippet>xrange()</snippet></ROW><ROW><id>19516344</id><snippet>while</snippet></ROW><ROW><id>19516344</id><snippet>i = 2
while i &lt; p1:
    s = long((i*i)-8)
    if (s%p==0):
        print i
    i += 1
</snippet></ROW><ROW><id>19516346</id><snippet>here       = lambda x: os.path.join(os.path.abspath(os.path.dirname(__file__)), x) 
templates  = os.listdir( here("templates/pages/") ) 

class Categorie(models.Model):
    nom  = models.CharField(max_length=250)
    slug = AutoSlugField(populate_from='nom', unique=True)
    parent = models.ForeignKey('self', null=True, blank=True, related_name='children', verbose_name=u"Parent category")

        def get_pages(self):
            pages = Page.objects.all().filter(categorie__slug=self.slug)
            return pages


class Page(models.Model):
    url                   = models.CharField(_('URL'), max_length=100, db_index=True)
    title                 = models.CharField(_('titre'), max_length=200) 
    categorie             = models.ForeignKey(Categorie, null=True, blank=True)
    template_name         = models.CharField(_('template name'),choices=[ ( str(templates[i]), str('pages/'+templates[i])) for i in range(len(templates)) ], max_length=70, blank=True,help_text=_("Example: 'pages/contact_page.html'. If this isn't provided, the system will use 'pages/default.html'."))
    ordre                 = models.IntegerField(blank=True, null=True,default=0) 
    content               = models.TextField(blank=True)
</snippet></ROW><ROW><id>19516346</id><snippet>   urlpatterns = patterns('django.contrib.yourappname.views',
    (r'^(?P&lt;url&gt;.*)$', 'page'),
  )
</snippet></ROW><ROW><id>19516346</id><snippet>def page(request, url):
    if not url.endswith('/') and settings.APPEND_SLASH:
        return HttpResponseRedirect("%s/" % request.path)
    if not url.startswith('/'):
        url = "/" + url

    f = get_object_or_404(Page, url__exact=url)

    return render_page(request, f)


@csrf_protect
def render_page(request, f):


if f.registration_required and not request.user.is_authenticated():        
    return redirect_to_login(request.path)

if f.template_name:
    t = loader.select_template((f.get_template_name_display(), f.template_name))
else:
    t = loader.get_template(DEFAULT_TEMPLATE)

f.title = mark_safe(f.title)
f.content = mark_safe(f.content)

c = RequestContext(request, {
    'page': f
})
response = HttpResponse(t.render(c))
populate_xheaders(request, response, Page, f.id)
return response
</snippet></ROW><ROW><id>19516346</id><snippet>@register.inclusion_tag('pages/tags/menu.html')
def get_pagestatiques_structured(cat=None, template_name='pages/tags/menu.html'):    
    category = Categorie.objects.all().get(slug=cat)
    subcategories = Categorie.objects.all().filter(parent=category.id)
    return locals()
</snippet></ROW><ROW><id>19516546</id><snippet>class Tag(models.Model):
    name = models.CharField(max_length=64, unique=True)

class Poem(models.Model):
    title = models.CharField(max_length=256)
    thetext = models.TextField()
    tags   = models.ManyToManyField(Poem)
</snippet></ROW><ROW><id>19516546</id><snippet>def tag_page(request, tag_name):
    poems_sets = []
    tag = get_object_or_404(Tag, name=tag_name)
    poems = Poem.objects.filter(tags__name=tag).order_by('-id')             
    for p in poems:                
        usersp = UserPoem.objects.filter(poem=p)
        for u in usersp:
            poems_sets.append((p, u))
    return locals() 
</snippet></ROW><ROW><id>19516546</id><snippet>{% for poem,usersp in poems_sets %}
    {{poem.title}}
    {{poem.thetext}}
    {% for u in usersp %}
        {{u.date}}
        {{u.user}}
    {% endfor %}
{% endfor %}               
</snippet></ROW><ROW><id>19516558</id><snippet>*</snippet></ROW><ROW><id>19516558</id><snippet>import module_1

module_1.set_g_up()
print module_1.g
</snippet></ROW><ROW><id>19516558</id><snippet>g</snippet></ROW><ROW><id>19516558</id><snippet>module_1.g</snippet></ROW><ROW><id>19516653</id><snippet>import sublime, sublime_plugin

class SaveAllExistingFilesCommand(sublime_plugin.ApplicationCommand):
    def run(self):
        for w in sublime.windows():
            self._save_files_in_window(w)

    def _save_files_in_window(self, w):
        for v in w.views():
            self._save_exiting_file_in_view(v)

    def _save_exiting_file_in_view(self, v):
        if v.file_name():
            if v.is_dirty():
                v.run_command("save")
</snippet></ROW><ROW><id>19516869</id><snippet>In [58]: df.where((df&gt;df.shift(1)).values &amp; DataFrame(df.D==1).values)
Out[58]: 
      A   B   C   D
1/1 NaN NaN NaN NaN
1/2   2 NaN   1 NaN
1/3 NaN NaN NaN NaN
1/4 NaN NaN NaN NaN
1/5 NaN NaN NaN NaN
1/6   2 NaN   2 NaN
1/7 NaN NaN NaN NaN
</snippet></ROW><ROW><id>19517010</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>19517010</id><snippet>check_id = forms.ModelChoiceField(queryset=Check.objects.all())</snippet></ROW><ROW><id>19517474</id><snippet>*</snippet></ROW><ROW><id>19517474</id><snippet>random.randint( (1,300) )
</snippet></ROW><ROW><id>19517474</id><snippet>random.randint</snippet></ROW><ROW><id>19517474</id><snippet>random.randint( *(1,300) )
</snippet></ROW><ROW><id>19517474</id><snippet>*</snippet></ROW><ROW><id>19517474</id><snippet>range = (1,300)
random_value = random.randint( *range )
</snippet></ROW><ROW><id>19517539</id><snippet>class DetailViewMixin(object):
    details_model = None
    context_detail_object_name = None

    def get_context_data(self, **kwargs):
        context = super(DetailViewMixin, self).get_context_data(**kwargs)
        context[self.context_detail_object_name] = self.get_detail_object()
        return context

    def get_detail_object(self):
        return self.details_model._default_manager.get(pk=self.kwargs['pk'])

class CommentCreate(DetailViewMixin, CreateView):
    details_model = Post
    context_detail_object_name = 'post'
    model = Comment
    template_name = "blog/test.html"
    fields = ['author', 'email', 'comment']
</snippet></ROW><ROW><id>19517676</id><snippet>org_Image.seek(org_Image.tell() + 1)</snippet></ROW><ROW><id>19517676</id><snippet>seek</snippet></ROW><ROW><id>19517676</id><snippet>reports</snippet></ROW><ROW><id>19518200</id><snippet>board[(y+1) * 10 + (x+1)]</snippet></ROW><ROW><id>19518200</id><snippet>board = [ 0 ] * 100</snippet></ROW><ROW><id>19518200</id><snippet>     A       B       C       D       E       F       G       H
  ------- ------- ------- ------- ------- ------- ------- -------
 | @___@ |  %~b  |  .@.  | \o*o/ | __+__ |  .@.  |  %~b  | @___@ |
8|  @@@  | `'dX  |  @@@  |  @@@  | `@@@' |  @@@  | `'dX  |  @@@  |8
 | d@@@b |  d@@b | ./A\. | d@@@b | d@@@b | ./A\. |  d@@b | d@@@b |
  ------- ------- ------- ------- ------- ------- ------- -------
 |   _   |   _   |   _   |   _   |   _   |   _   |   _   |   _   |
7|  (@)  |  (@)  |  (@)  |  (@)  |  (@)  |  (@)  |  (@)  |  (@)  |7
 |  d@b  |  d@b  |  d@b  |  d@b  |  d@b  |  d@b  |  d@b  |  d@b  |
  ------- ------- ------- ------- ------- ------- ------- -------
 |       | . . . |       | . . . |       | . . . |       | . . . |
6|       | . . . |       | . . . |       | . . . |       | . . . |6
 |       | . . . |       | . . . |       | . . . |       | . . . |
  ------- ------- ------- ------- ------- ------- ------- -------
 | . . . |       | . . . |       | . . . |       | . . . |       |
5| . . . |       | . . . |       | . . . |       | . . . |       |5
 | . . . |       | . . . |       | . . . |       | . . . |       |
  ------- ------- ------- ------- ------- ------- ------- -------
 |       | . . . |       | . . . |       | . . . |       | . . . |
4|       | . . . |       | . . . |       | . . . |       | . . . |4
 |       | . . . |       | . . . |       | . . . |       | . . . |
  ------- ------- ------- ------- ------- ------- ------- -------
 | . . . |       | . . . |       | . . . |       | . . . |       |
3| . . . |       | . . . |       | . . . |       | . . . |       |3
 | . . . |       | . . . |       | . . . |       | . . . |       |
  ------- ------- ------- ------- ------- ------- ------- -------
 |   _   |   _   |   _   |   _   |   _   |   _   |   _   |   _   |
2|  ( )  |  ( )  |  ( )  |  ( )  |  ( )  |  ( )  |  ( )  |  ( )  |2
 |  /_\  |  /_\  |  /_\  |  /_\  |  /_\  |  /_\  |  /_\  |  /_\  |
  ------- ------- ------- ------- ------- ------- ------- -------
 | [___] |  %~\  |  .O.  | \o^o/ | __+__ |  .O.  |  %~\  | [___] |
1|  [ ]  | `')(  |  \ /  |  [ ]  | `. .' |  \ /  | `')(  |  [ ]  |1
 | /___\ |  &lt;__&gt; |  /_\  | /___\ | /___\ |  /_\  |  &lt;__&gt; | /___\ |
  ------- ------- ------- ------- ------- ------- ------- -------
     A       B       C       D       E       F       G       H
</snippet></ROW><ROW><id>19518474</id><snippet>hash()</snippet></ROW><ROW><id>19518474</id><snippet>__hash__</snippet></ROW><ROW><id>19518474</id><snippet>list</snippet></ROW><ROW><id>19518474</id><snippet>list</snippet></ROW><ROW><id>19518474</id><snippet>tuple</snippet></ROW><ROW><id>19518474</id><snippet>my_dictionary[tuple(my_list)] = my_value
</snippet></ROW><ROW><id>19518866</id><snippet>&gt;&gt;&gt; 5//2
2
</snippet></ROW><ROW><id>19518866</id><snippet>&gt;&gt;&gt; -5//2
-3
&gt;&gt;&gt; 5//-2
-3
</snippet></ROW><ROW><id>19518866</id><snippet>a/b = q with remainder r
</snippet></ROW><ROW><id>19518866</id><snippet>b*q + r = a and 0 &lt;= r &lt; b
(assuming a and b are &gt;= 0).
</snippet></ROW><ROW><id>19518976</id><snippet>&gt;&gt;&gt; np.packbits(np.uint8(x))
array([204,  12, 128], dtype=uint8)
</snippet></ROW><ROW><id>19519278</id><snippet>numFlips</snippet></ROW><ROW><id>19519278</id><snippet>str</snippet></ROW><ROW><id>19519278</id><snippet>int</snippet></ROW><ROW><id>19519278</id><snippet>numFlips = int(raw_input("Flips "))
</snippet></ROW><ROW><id>19519278</id><snippet>flips &lt; numFlips</snippet></ROW><ROW><id>19519278</id><snippet>int</snippet></ROW><ROW><id>19519355</id><snippet>class HotelReference(ComplexModel):
    __namespace__ = 'http://www.opentravel.org/OTA/2003/05'

    HotelCode = XmlAttribute(Unicode)

class Criterion(ComplexModel):
    __namespace__ = 'http://www.opentravel.org/OTA/2003/05'

    HotelRef = HotelReference

class AvailRequestSegment(ComplexModel):
    __namespace__ = 'http://www.opentravel.org/OTA/2003/05'

    AvailReqType = XmlAttribute(Unicode(values=["Room", "House", "Condo", "Castle"]))
    HotelSearchCriteria = Criterion.customize(max_occurs='unbounded')

class HotelAvailRQ(ComplexModel):
    __namespace__ = 'http://www.opentravel.org/OTA/2003/05'

    Version = XmlAttribute(Unicode)
    TimeStamp = XmlAttribute(DateTime)
    EchoToken = XmlAttribute(ByteArray)
    AvailRatesOnly XmlAttribute(Boolean)

    AvailRequestSegments = Array(AvailRequestSegment)
</snippet></ROW><ROW><id>19519467</id><snippet>while True:
    ....
    try:
       pass      &lt;-----
    ....

while True:      &lt;-----
    ....
    try:
        pass
</snippet></ROW><ROW><id>19519467</id><snippet>try:
    while True:
         pass
except....
</snippet></ROW><ROW><id>19519592</id><snippet>root.destroy()</snippet></ROW><ROW><id>19519763</id><snippet>browse</snippet></ROW><ROW><id>19519763</id><snippet>uid</snippet></ROW><ROW><id>19519763</id><snippet>res.users</snippet></ROW><ROW><id>19519763</id><snippet>self.pool.get('res.users').browse(cr, uid, uid, c)</snippet></ROW><ROW><id>19519763</id><snippet>browse_record</snippet></ROW><ROW><id>19519763</id><snippet>company_id</snippet></ROW><ROW><id>19519763</id><snippet>currency_id</snippet></ROW><ROW><id>19519805</id><snippet>instance.__dict__</snippet></ROW><ROW><id>19519805</id><snippet>Test.__dict__</snippet></ROW><ROW><id>19519805</id><snippet>type(r).__dict__</snippet></ROW><ROW><id>19519805</id><snippet>&gt;&gt;&gt; r = Test()
&gt;&gt;&gt; print r.__dict__
{'test2': 2}
&gt;&gt;&gt; print Test.__dict__
{'test1': 1, '__module__': '__main__', '__doc__': None, '__init__': &lt;function __init__ at 0x000000000282B908&gt;}
&gt;&gt;&gt; print getattr(r,'test1')
1
</snippet></ROW><ROW><id>19519805</id><snippet>vars</snippet></ROW><ROW><id>19519805</id><snippet>&gt;&gt;&gt; print vars(r)
{'test2': 2}
&gt;&gt;&gt; print vars(Test)
{'test1': 1, '__module__': '__main__', '__doc__': None, '__init__': &lt;function __init__ at 0x000000000282B908&gt;}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19519912</id><snippet>re.sub</snippet></ROW><ROW><id>19519912</id><snippet>&gt;&gt;&gt; re.MULTILINE
8
&gt;&gt;&gt; print re.sub(r'(^\s*)', '', '  a\n  b\n', re.MULTILINE)
a
  b    
</snippet></ROW><ROW><id>19519912</id><snippet>flags</snippet></ROW><ROW><id>19519912</id><snippet>&gt;&gt;&gt; print re.sub(r'(^\s*)', '', '  a\n  b\n', flags=re.MULTILINE)
a
b
</snippet></ROW><ROW><id>19519912</id><snippet>&gt;&gt;&gt; print re.sub(r'^\s*', '', '  a\n  b\n', flags=re.MULTILINE)
a
b
</snippet></ROW><ROW><id>19519912</id><snippet>str.lstrip</snippet></ROW><ROW><id>19519912</id><snippet>&gt;&gt;&gt; print '\n'.join(map(str.lstrip, '   a\n   b\n'.splitlines()))
a
b
</snippet></ROW><ROW><id>19520220</id><snippet>WSGIScriptAlias / /my/path/site/wsgi.py
WSGIApplicationGroup %{GLOBAL}

WSGIDaemonProcess main processes=3 threads=5
WSGIProcessGroup main

WSGIDaemonProcess admin threads=2 inactivity-timeout=60
&lt;Location /admin&gt;
WSGIProcessGroup admin
&lt;/Location&gt;
</snippet></ROW><ROW><id>19520380</id><snippet>import os

def index(request):
        os.chdir("/home/ubuntu/newproject/static")
        files = []
        for file in os.listdir("."):
            files.append(file)
        return render(request, 'sslcert/index.html',dict(files=files))
</snippet></ROW><ROW><id>19520380</id><snippet>&lt;head&gt;
        {% block title %}
        &lt;h3&gt;
                        Following directories are in this folder:
        &lt;/h3&gt;
        {% endblock %}
&lt;/head&gt;



&lt;body&gt;
       {{ files }}
&lt;/body&gt;
</snippet></ROW><ROW><id>19520597</id><snippet>disjunction</snippet></ROW><ROW><id>19520597</id><snippet>disjunction: conjunction
           | disjunction '|' conjunction
           ;
</snippet></ROW><ROW><id>19520597</id><snippet>assignment: expression
          | expression '=' assignment
          ;
</snippet></ROW><ROW><id>19520597</id><snippet>sum: product
   | sum '+' product
   | sum '-' product
   ;
</snippet></ROW><ROW><id>19520608</id><snippet>errmsg</snippet></ROW><ROW><id>19520608</id><snippet>def errmsg(msg, doc, pos, end=None):
    # Note that this function is called from _json
    lineno, colno = linecol(doc, pos)
    if end is None:
        fmt = '{0}: line {1} column {2} (char {3})'
        return fmt.format(msg, lineno, colno, pos)
        #fmt = '%s: line %d column %d (char %d)'
        #return fmt % (msg, lineno, colno, pos)
    endlineno, endcolno = linecol(doc, end)
    fmt = '{0}: line {1} column {2} - line {3} column {4} (char {5} - {6})'
    return fmt.format(msg, lineno, colno, endlineno, endcolno, pos, end)
    #fmt = '%s: line %d column %d - line %d column %d (char %d - %d)'
    #return fmt % (msg, lineno, colno, endlineno, endcolno, pos, end)
</snippet></ROW><ROW><id>19520608</id><snippet>import json

original_errmsg= json.decoder.errmsg

def our_errmsg(msg, doc, pos, end=None):
    json.last_error_position= json.decoder.linecol(doc, pos)
    return original_errmsg(msg, doc, pos, end)

json.decoder.errmsg= our_errmsg

try:
    data = json.loads('{1:}')
except ValueError as e:
    print("error at", json.last_error_position)
</snippet></ROW><ROW><id>19520608</id><snippet>errmsg</snippet></ROW><ROW><id>19520789</id><snippet>dbf.pql(table, 'blah blah')</snippet></ROW><ROW><id>19520789</id><snippet>table.query()</snippet></ROW><ROW><id>19520876</id><snippet>if actor.getSkill('expertise_of_advanced_paint_1'):
    command.setBuffNameTarget('of_adv_paint_debuff_1')
if actor.getSkill('expertise_of_paint_expose_1'):
    command.setBuffNameTarget('of_adv_paint_expose_1')
    return
</snippet></ROW><ROW><id>19520876</id><snippet>def setup(core, actor, target, command):
    command.setBuffNameTarget('of_deb_def_1')
    if actor.getSkill('expertise_of_advanced_paint_1'):
        command.setBuffNameTarget('of_adv_paint_debuff_1')
    if actor.getSkill('expertise_of_paint_expose_1'):
        command.setBuffNameTarget('of_adv_paint_expose_1')
        return
</snippet></ROW><ROW><id>19520876</id><snippet>return</snippet></ROW><ROW><id>19521084</id><snippet>list[44:49]</snippet></ROW><ROW><id>19521084</id><snippet>list[44:5]</snippet></ROW><ROW><id>19521084</id><snippet>L[a, a+5]</snippet></ROW><ROW><id>19521084</id><snippet>list</snippet></ROW><ROW><id>19521084</id><snippet>list()</snippet></ROW><ROW><id>19521096</id><snippet>import functools
from types import FunctionType

def wrap_functions(module_dict):
    for k, f in module_dict.items():
        if not isinstance(f, FunctionType):
            continue
        def get_wrapper(f):
            def wrapper(*func_args, **func_kwargs):
                print(f(*func_args, **func_kwargs))
            return functools.wraps(f)(wrapper)
        module_dict[k] = get_wrapper(f)
</snippet></ROW><ROW><id>19521096</id><snippet>import Debug
Debug.wrap_functions(globals())
</snippet></ROW><ROW><id>19521186</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>19521186</id><snippet>os.path.normpath()</snippet></ROW><ROW><id>19521186</id><snippet>os.path.normpath(os.path.join(os.path.dirname(absolute1), relative))
</snippet></ROW><ROW><id>19521186</id><snippet>normpath</snippet></ROW><ROW><id>19521186</id><snippet>A/foo/../B</snippet></ROW><ROW><id>19521186</id><snippet>A/B</snippet></ROW><ROW><id>19521186</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; absolute1 = '/a/b/c/d.js'
&gt;&gt;&gt; relative = '../../e.js'
&gt;&gt;&gt; os.path.normpath(os.path.join(os.path.dirname(absolute1), relative))
'/a/e.js'
</snippet></ROW><ROW><id>19521297</id><snippet>import matplotlib
matplotlib.use('pdf')
import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>19521526</id><snippet>tuple = GetVolumeInformation(path)

Returns information about a file system and colume whose root directory is specified.
</snippet></ROW><ROW><id>19521526</id><snippet>win32api.GetVolumeInformation('C:\\')
</snippet></ROW><ROW><id>19521645</id><snippet>tkFont.Font</snippet></ROW><ROW><id>19521645</id><snippet>root</snippet></ROW><ROW><id>19521645</id><snippet>tkFont.Font</snippet></ROW><ROW><id>19521645</id><snippet>self.root</snippet></ROW><ROW><id>19521645</id><snippet>    self.root = Tk()
    self.titleFont = tkFont.Font(root=self.root, family='Helvetica', size=24, weight='bold')
#                                ^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>19521645</id><snippet>self.root.option_add</snippet></ROW><ROW><id>19521645</id><snippet>self.option_add</snippet></ROW><ROW><id>19521645</id><snippet>*Label*font</snippet></ROW><ROW><id>19521738</id><snippet>dline = plot(xx,data)
</snippet></ROW><ROW><id>19521738</id><snippet>dline</snippet></ROW><ROW><id>19521738</id><snippet>Line2D</snippet></ROW><ROW><id>19521738</id><snippet>mline, = plot([],[])
mline.set_data(xx.T,data.T)
</snippet></ROW><ROW><id>19521738</id><snippet>Line2D</snippet></ROW><ROW><id>19521738</id><snippet>N</snippet></ROW><ROW><id>19521738</id><snippet>N</snippet></ROW><ROW><id>19521738</id><snippet>Line2D</snippet></ROW><ROW><id>19521738</id><snippet>lines = [plot([],[])[0] for j in range(Ny)] # make a whole bunch of lines

def init():
    for mline in lines:
        mline.set_data([],[])
    return lines

def animate(coef):
   data = odata * (1.-float(coef)/360.)
   for mline, x, d in zip(lines, data.T, xx.T):
       mline.set_data(x, d)
   return lines
</snippet></ROW><ROW><id>19521738</id><snippet>data</snippet></ROW><ROW><id>19521738</id><snippet>numpy</snippet></ROW><ROW><id>19521868</id><snippet>In [3]: pd.to_datetime('03:00:00.017158433')
Out[3]: Timestamp('2013-10-22 03:00:00.017158', tz=None)

In [4]: pd.to_datetime('03:00:00.017158433').value
Out[4]: 1382410800017158000

In [5]: pd.to_datetime(1382410800017158000,unit='ns')
Out[5]: Timestamp('2013-10-22 03:00:00.017158', tz=None)
</snippet></ROW><ROW><id>19521868</id><snippet>In [2]: Timestamp(Timestamp('20131022').value+10800017158433)
Out[2]: Timestamp('2013-10-22 03:00:00.017158433', tz=None)
</snippet></ROW><ROW><id>19521993</id><snippet>pygame.draw.lines</snippet></ROW><ROW><id>19521993</id><snippet>from itertools import groupby

# Some itertools magic to split the list into groups with [-1,-1,-1] as the delimiter.
pointLists = [list(group) for k, group in groupby(points, lambda x: x == [-1,-1,-1]) if not k]
color = (255,255,255)
for pointList in pointLists:
    # Only use the x and y components of the points.
    drawPoints = [[l[0], l[1]] for l in pointList]
    # Assume 'screen' is your display surface.
    pygame.draw.lines(screen, color, False, drawPoints)
</snippet></ROW><ROW><id>19522011</id><snippet>class App(models.Model):

    package = models.FileField(upload_to=settings.APP_PACKAGE_ROOT)
    assets = models.ManyToManyField('AppAsset', blank=True, null=True)
    download_count = models.IntegerField(default=0)

class AppAsset(models.Model):

    def __unicode__(self):
        return self.asset_file.name

    notes = models.CharField(max_length=255, null=True, blank=True)
    type = models.CharField(max_length=255, null=True, blank=True)
    asset_file = models.FileField(upload_to=settings.APP_PACKAGE_ROOT)
</snippet></ROW><ROW><id>19522134</id><snippet>isSpaceFree</snippet></ROW><ROW><id>19522134</id><snippet>True</snippet></ROW><ROW><id>19522134</id><snippet>(row, column)</snippet></ROW><ROW><id>19522134</id><snippet>block</snippet></ROW><ROW><id>19522134</id><snippet>def isSpaceFree(bin, row, column, block):
    #return False if the block would go out of bounds
    if row + block &gt; len(bin):
        return False
    if column + block &gt; len(bin):
        return False

    #possible todo:
    #return False if row or column is negative

    #return False if the square would overlap an existing element
    for r in range(row, row+block):
        for c in range(column, column+block):
            if bin[r][c] != 0: #oops, overlap will occur
                return False

    #square is in bounds, and doesn't overlap anything. Good to go!
    return True
</snippet></ROW><ROW><id>19522134</id><snippet>def place(bin, row, column, block):
    if isSpaceFree(bin, row, column, block):
        for r in range(row, row+block):
            for c in range(column, column+block):
                bin[r][c] = block

x = [
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
]

place(x, 0, 0, 4)

print "\n".join(str(row) for row in x)
</snippet></ROW><ROW><id>19522134</id><snippet>[4, 4, 4, 4, 0]
[4, 4, 4, 4, 0]
[4, 4, 4, 4, 0]
[4, 4, 4, 4, 0]
[0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>19522311</id><snippet>callback</snippet></ROW><ROW><id>19522311</id><snippet>except</snippet></ROW><ROW><id>19522311</id><snippet>finally</snippet></ROW><ROW><id>19522311</id><snippet>gen.Task</snippet></ROW><ROW><id>19522311</id><snippet>callback</snippet></ROW><ROW><id>19522349</id><snippet>except pkg_resources.VersionConflict, e:
</snippet></ROW><ROW><id>19522349</id><snippet>as</snippet></ROW><ROW><id>19522349</id><snippet>,</snippet></ROW><ROW><id>19522349</id><snippet>except pkg_resources.VersionConflict as e:
</snippet></ROW><ROW><id>19522349</id><snippet>&gt;&gt;&gt; try:
...     1/0
... except ZeroDivisionError, e:
  File "&lt;stdin&gt;", line 3
    except ZeroDivisionError, e:
                            ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
&gt;&gt;&gt; try:
...     1/0
... except ZeroDivisionError as e:
...     print(e)
...
division by zero
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19522634</id><snippet>DELETE</snippet></ROW><ROW><id>19522634</id><snippet>UPDATE</snippet></ROW><ROW><id>19522634</id><snippet>INSERT</snippet></ROW><ROW><id>19522699</id><snippet>if cds[n:n+3] in codontable == True
</snippet></ROW><ROW><id>19522699</id><snippet>False</snippet></ROW><ROW><id>19522699</id><snippet>proteinsequence</snippet></ROW><ROW><id>19522699</id><snippet>== True</snippet></ROW><ROW><id>19522699</id><snippet>if cds[n:n+3] in codontable
</snippet></ROW><ROW><id>19522699</id><snippet>return proteinsequence</snippet></ROW><ROW><id>19522699</id><snippet>translate_dna()</snippet></ROW><ROW><id>19522852</id><snippet>os.walk()</snippet></ROW><ROW><id>19522852</id><snippet>result['stat']</snippet></ROW><ROW><id>19522852</id><snippet>filename : { 'active' : True,
             'full_path' = '/path/to/filename',
             'type' : 'f' }
</snippet></ROW><ROW><id>19522852</id><snippet>dirname : { 'active' : True,
            'full_path' = '/path/to/dirname',
             'type' : 'd',
             items = { 'itemname' : {...}, ... } }
</snippet></ROW><ROW><id>19522852</id><snippet>import sys
import os
from stat import *
import pprint

def PathToDict(path):
    st = os.stat(path)
    result = {}
    result['active'] = True
    #result['stat'] = st
    result['full_path'] = path
    if S_ISDIR(st.st_mode):
        result['type'] = 'd'
        result['items'] = {
            name : PathToDict(path+'/'+name)
            for name in os.listdir(path)}
    else:
        result['type'] = 'f'
    return result


pprint.pprint(PathToDict(sys.argv[1]))
</snippet></ROW><ROW><id>19522852</id><snippet>{'active': True,
 'full_path': '/tmp/x',
 'items': {'var': {'active': True,
                   'full_path': '/tmp/x/var',
                   'items': {'log': {'active': True,
                                     'full_path': '/tmp/x/var/log',
                                     'items': {},
                                     'type': 'd'},
                             'www': {'active': True,
                                     'full_path': '/tmp/x/var/www',
                                     'items': {'index.html': {'active': True,
                                                              'full_path': '/tmp/x/var/www/index.html',
                                                              'type': 'f'}},
                                     'type': 'd'}},
                   'type': 'd'}},
 'type': 'd'}
</snippet></ROW><ROW><id>19523054</id><snippet>funcs = do_smth1, do_smth2

for func in funcs:
    try:
        func()
    except Exception:
        pass  # or you could use 'continue'
</snippet></ROW><ROW><id>19523054</id><snippet>except</snippet></ROW><ROW><id>19523054</id><snippet>Exception</snippet></ROW><ROW><id>19523352</id><snippet>df[df['fraud'] == 'REJECT'].groupby('State').size()
</snippet></ROW><ROW><id>19523352</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'fraud':['REJECT', 'ACCEPT', 'REJECT', 'REJECT'], 'State':['AZ', 'AZ', 'TX', 'TX']})
&gt;&gt;&gt; df[df['fraud'] == 'REJECT'].groupby('State').size()
State
AZ       1
TX       2
dtype: int64
</snippet></ROW><ROW><id>19523366</id><snippet>kwargs</snippet></ROW><ROW><id>19523366</id><snippet>**in_dict</snippet></ROW><ROW><id>19523366</id><snippet>class Actor:
    def __init__(self, **kwds):

class Item(Actor):
    def __init__(self, **kwds)
        self._everything = kwds
        super().__init__(**kwds)
</snippet></ROW><ROW><id>19523366</id><snippet>kwds</snippet></ROW><ROW><id>19523366</id><snippet>import time

def some_func(**kwargs):
    for k,v in kwargs.items():
        pass

def main():
    name = 'felix'
    location = 'here'
    user_type = 'player'

    kwds = {'name': name,
            'location': location,
            'user_type': user_type}

    start = time.time()
    for i in range(10000000):
        some_func(**kwds)

    end = time.time()
    print 'Time using expansion:\t{0}s'.format(start - end)
    start = time.time()
    for i in range(10000000):
        some_func(name=name, location=location, user_type=user_type)

    end = time.time()
    print 'Time without expansion:\t{0}s'.format(start - end)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19523366</id><snippet>Time using expansion:   -7.9877269268s
Time without expansion: -8.06108212471s
</snippet></ROW><ROW><id>19523512</id><snippet>&lt;your DataFrame&gt;.rename({'count':'Total_Numbers'})
</snippet></ROW><ROW><id>19523512</id><snippet>&lt;your DataFrame&gt;.columns = ['ID', 'Region', 'Total_Numbers']
</snippet></ROW><ROW><id>19523551</id><snippet>Add</snippet></ROW><ROW><id>19523551</id><snippet>()</snippet></ROW><ROW><id>19523551</id><snippet>trend =worksheets.ChartObjects(1).Chart.SeriesCollection(1).Trendlines().Add()
#                                                                     here--^
</snippet></ROW><ROW><id>19523551</id><snippet>trend</snippet></ROW><ROW><id>19523551</id><snippet>Add</snippet></ROW><ROW><id>19523620</id><snippet>number4 = list(cow[n])
</snippet></ROW><ROW><id>19523620</id><snippet>cow[n]</snippet></ROW><ROW><id>19523620</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; list(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not iterable
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19523620</id><snippet>cow[n]</snippet></ROW><ROW><id>19523620</id><snippet>number4 = [cow[n]]
</snippet></ROW><ROW><id>19523620</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; [a]
[1]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19523620</id><snippet>:</snippet></ROW><ROW><id>19523620</id><snippet>input</snippet></ROW><ROW><id>19523620</id><snippet>raw_input</snippet></ROW><ROW><id>19523620</id><snippet>int</snippet></ROW><ROW><id>19523620</id><snippet>sum</snippet></ROW><ROW><id>19523620</id><snippet>&gt;&gt;&gt; a = 137
&gt;&gt;&gt; a = str(a)
&gt;&gt;&gt; # This way is more common and preferred
&gt;&gt;&gt; sum(int(x) for x in a)
11
&gt;&gt;&gt; # But this also works
&gt;&gt;&gt; sum(map(int, a))
11
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19523899</id><snippet>Car</snippet></ROW><ROW><id>19523899</id><snippet>class Car(models.Model):
    ...
    def parts_with_manufacturers(self):
        return self.part_set.select_related('manufacturer')
</snippet></ROW><ROW><id>19523899</id><snippet>{% for part in car.parts_with_manufacturers %}
    &lt;li&gt;{{ part.name }} - {{ part.manufacturer.name }} &lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>19523975</id><snippet>from traits.api import *
from traitsui.api import *

class ColorColumn(ObjectColumn):
  def get_cell_color(self,object):
    return object.color

class ColorContainer(HasTraits):
  color=Color('red')
  blank_text=Str('')

class SomeApplication(HasTraits):
  dummy_table=List(ColorContainer)

  def _dummy_table_default(self):
    return [ColorContainer()]

  traits_view=View(Item(name='dummy_table',
    editor=TableEditor(columns=
      [ColorColumn(label='',editor=TextEditor(),name='blank_text',editable=False)],
      selection_bg_color=None,),show_label=False))

SomeApplication().configure_traits()
</snippet></ROW><ROW><id>19523975</id><snippet>$ ls images
green.gif red.gif yellow.gif

from traits.api import *
from traitsui.api import *
from pyface.image_resource import ImageResource

class ImageEnumStyle(HasTraits):
  ci=Enum('yellow','green','red','yellow')

  traits_view=View(Item('ci',editor=ImageEnumEditor(path='images',),style='readonly'))

class ImageStyle(HasTraits):
  ci=Instance(ImageResource)

  #to modify the image, modify the ImageResource `name` attribute
  def _ci_default(self):
    return ImageResource('yellow.gif')

  traits_view=View(Item('ci',editor=ImageEditor()))

ImageWhicheverStyleYouPrefer().configure_traits()
</snippet></ROW><ROW><id>19524042</id><snippet>time.clock()</snippet></ROW><ROW><id>19524187</id><snippet>ar2 = zeros((1000,2000),dtype=uint16)
ar2 = ar2[:,1000:]
ar2 = ar2.view(dtype=uint8)
</snippet></ROW><ROW><id>19524187</id><snippet>ar2 = zeros((1000,2000),dtype=uint16)
ar2 = ar2.view(dtype=uint8) # ar2 is now a 1000x4000 array...
ar2 = ar2[:,2000:] # Note the 2000 instead of 1000! 
</snippet></ROW><ROW><id>19524187</id><snippet>view</snippet></ROW><ROW><id>19524187</id><snippet>numpy</snippet></ROW><ROW><id>19524187</id><snippet>view</snippet></ROW><ROW><id>19524187</id><snippet>astype</snippet></ROW><ROW><id>19524187</id><snippet>view</snippet></ROW><ROW><id>19524187</id><snippet>view</snippet></ROW><ROW><id>19524187</id><snippet>ndarray</snippet></ROW><ROW><id>19524187</id><snippet>In [1]: import numpy as np

In [2]: x = np.zeros(2, dtype=np.uint16)

In [3]: x
Out[3]: array([0, 0], dtype=uint16)

In [4]: x.view(np.uint8)
Out[4]: array([0, 0, 0, 0], dtype=uint8)

In [5]: x.view(np.uint32)
Out[5]: array([0], dtype=uint32)
</snippet></ROW><ROW><id>19524187</id><snippet>astype</snippet></ROW><ROW><id>19524187</id><snippet>In [6]: x
Out[6]: array([0, 0], dtype=uint16)

In [7]: x.astype(np.uint8)
Out[7]: array([0, 0], dtype=uint8)

In [8]: x.astype(np.uint32)
Out[8]: array([0, 0], dtype=uint32)
</snippet></ROW><ROW><id>19524187</id><snippet>In [9]: y = np.arange(4, dtype=np.uint16).reshape(2, 2)

In [10]: y
Out[10]:
array([[0, 1],
       [2, 3]], dtype=uint16)

In [11]: y.view(np.uint8)
Out[12]:
array([[0, 0, 1, 0],
       [2, 0, 3, 0]], dtype=uint8)
</snippet></ROW><ROW><id>19524187</id><snippet>uint16</snippet></ROW><ROW><id>19524187</id><snippet>2</snippet></ROW><ROW><id>19524187</id><snippet>uint8</snippet></ROW><ROW><id>19524187</id><snippet>2</snippet></ROW><ROW><id>19524187</id><snippet>0</snippet></ROW><ROW><id>19524187</id><snippet>uint16</snippet></ROW><ROW><id>19524187</id><snippet>uint8</snippet></ROW><ROW><id>19524187</id><snippet>In [13]: y * 100
Out[14]:
array([[  0, 100],
       [200, 300]], dtype=uint16)

In [15]: (y * 100).view(np.uint8)
Out[15]:
array([[  0,   0, 100,   0],
       [200,   0,  44,   1]], dtype=uint8)
</snippet></ROW><ROW><id>19524187</id><snippet>In [17]: y
Out[17]:
array([[0, 1],
       [2, 3]], dtype=uint16)

In [18]: y.strides
Out[18]: (4, 2)
</snippet></ROW><ROW><id>19524187</id><snippet>y</snippet></ROW><ROW><id>19524187</id><snippet>In [19]: y.T.strides
Out[19]: (2, 4)
</snippet></ROW><ROW><id>19524187</id><snippet>uint8</snippet></ROW><ROW><id>19524187</id><snippet>In [20]: y.view(np.uint8).strides
Out[20]: (4, 1)
</snippet></ROW><ROW><id>19524187</id><snippet>view</snippet></ROW><ROW><id>19524187</id><snippet>y</snippet></ROW><ROW><id>19524187</id><snippet>view</snippet></ROW><ROW><id>19524187</id><snippet>view</snippet></ROW><ROW><id>19524187</id><snippet>numpy.lib.stride_tricks.as_strided</snippet></ROW><ROW><id>19524187</id><snippet>__array_interface__</snippet></ROW><ROW><id>19524458</id><snippet>fromDtoE=fromDtoEVar
fromDtoEVar.get()
</snippet></ROW><ROW><id>19524458</id><snippet>DoubleVar</snippet></ROW><ROW><id>19524458</id><snippet>DoubleVar</snippet></ROW><ROW><id>19524458</id><snippet>fromDtoE=fromDtoEVar.get()
</snippet></ROW><ROW><id>19524458</id><snippet>PY_VAR0</snippet></ROW><ROW><id>19524458</id><snippet>DoubleVar</snippet></ROW><ROW><id>19524476</id><snippet>$ some_shell_command arg1 arg2
</snippet></ROW><ROW><id>19524476</id><snippet>$</snippet></ROW><ROW><id>19524476</id><snippet>$</snippet></ROW><ROW><id>19524476</id><snippet>bash</snippet></ROW><ROW><id>19524476</id><snippet>$</snippet></ROW><ROW><id>19524476</id><snippet>user@host:~$</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; with open('text.txt', 'r') as f:
...     lines = f.readlines()

&gt;&gt;&gt; lines
['This    is programing   story , for programmers  . One day    a variable', 
 'called', 'v  comes    to a   bar    and ordred   some whiskey,   when suddenly ',
 '      a      new variable was declared .', 
 'a new variable asked : "    What did you ordered? "']
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; text = ' '.join(line.replace('\n', ' ') for line in lines)

&gt;&gt;&gt; text
'This    is programing   story , for programmers  . One day    a variable called v  comes    to a   bar    and ordred   some whiskey,   when suddenly        a      new variable was declared . a new variable asked : "    What did you ordered? "'
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; words = [word for word in text.split() if word]
&gt;&gt;&gt; words
['This', 'is', 'programing', 'story', ',', 'for', 'programmers', '.', 'One', 'day', 'a', 'variable', 'called', 'v', 'comes', 'to', 'a', 'bar', 'and', 'ordred', 'some', 'whiskey,', 'when', 'suddenly', 'a', 'new', 'variable', 'was', 'declared', '.', 'a', 'new', 'variable', 'asked', ':', '"', 'What', 'did', 'you', 'ordered?', '"']
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; text = ' '.join(words)
&gt;&gt;&gt; text
'This is programing story , for programmers . One day a variable called v comes to a bar and ordred some whiskey, when suddenly a new variable was declared . a new variable asked : " What did you ordered? "'
</snippet></ROW><ROW><id>19524762</id><snippet>&lt;SPACE&gt;.</snippet></ROW><ROW><id>19524762</id><snippet>&lt;SPACE&gt;,</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; for char in (',', '.', ':', '"', '?', '!'):
...     text = text.replace(' ' + char, char)
&gt;&gt;&gt; text
'This is programing story, for programmers. One day a variable called v comes to a bar and ordred some whiskey, when suddenly a new variable was declared. a new variable asked:" What did you ordered?"'
</snippet></ROW><ROW><id>19524762</id><snippet>"</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; sentences = text.split('.')
&gt;&gt;&gt; sentences
['This is programing story, for programmers', ' One day a variable called v comes to a bar and ordred some whiskey, when suddenly a new variable was declared', ' a new variable asked:" What did you ordered?"']
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; text
'This is programing story, for programmers. One day a variable called v comes to a bar and ordred some whiskey, when suddenly a new variable was declared. A new variable asked: "what did you ordered?"'
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; def prettyprint(text):
...     return '\n'.join(text[i:i+50] for i in range(0, len(text), 50))
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; print prettyprint(text)
This is programing story, for programmers. One day
 a variable called v comes to a bar and ordred som
e whiskey, when suddenly a new variable was declar
ed. A new variable asked: "what did you ordered?"
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; class Sentence(object):
...     def __init__(self, content, punctuation):
...         self.content = content
...         self.endby = punctuation
...     def pretty(self):
...         nice = []
...         content = self.content.pretty()
...         # A sentence starts with a capital letter
...         nice.append(content[0].upper())
...         # The rest has already been prettified by the content
...         nice.extend(content[1:])
...         # Do not forget the punctuation sign
...         nice.append('.')
...         return ''.join(nice)

&gt;&gt;&gt; class Paragraph(object):
...     def __init__(self, sentences):
...         self.sentences = sentences
...     def pretty(self):
...         # Separating our sentences by a single space
...         return ' '.join(sentence.pretty() for sentence in sentences)
</snippet></ROW><ROW><id>19524762</id><snippet>&gt;&gt;&gt; Paragraph(
...   Sentence(
...     Propositions([Proposition(['this', 
...                                'is', 
...                                'programming', 
...                                'story']),
...                   Proposition(['for',
...                                'programmers'])],
...                   ',')
...     '.'),
...   Sentence(...
</snippet></ROW><ROW><id>19524762</id><snippet>book</snippet></ROW><ROW><id>19524762</id><snippet>line</snippet></ROW><ROW><id>19524762</id><snippet>lines</snippet></ROW><ROW><id>19524762</id><snippet>offset</snippet></ROW><ROW><id>19524762</id><snippet>line</snippet></ROW><ROW><id>19524762</id><snippet> class Proposition(object):
      ...
      def book(self, line, lines, offset, line_length):
          for word in self.words:
              if offset + len(word) &gt; line_length:
                  lines.append(' '.join(line))
                  line = []
                  offset = 0
              line.append(word)
          return line, lines, offset

 ...

 class Propositions(object):
     ...
     def book(self, lines, offset, line_length):
         lines, offset = self.Proposition1.book(lines, offset, line_length)
         if offset + len(self.punctuation) + 1 &gt; line_length: 
              # Need to add the punctuation sign with the last word
              # to a new line
              word = line.pop()
              lines.append(' '.join(line))
              line = [word + self.punctuation + ' ']
              offset = len(word + self.punctuation + ' ')
         line, lines, offset = self.Proposition2.book(lines, offset, line_length)
         return line, lines, offset
</snippet></ROW><ROW><id>19524762</id><snippet>Sentence</snippet></ROW><ROW><id>19524762</id><snippet>Paragraph</snippet></ROW><ROW><id>19524762</id><snippet>Chapter</snippet></ROW><ROW><id>19524762</id><snippet>book</snippet></ROW><ROW><id>19524762</id><snippet>pretty</snippet></ROW><ROW><id>19524830</id><snippet>tell application "System Preferences"
    reveal pane "com.apple.preference.network"
end tell
</snippet></ROW><ROW><id>19524830</id><snippet>import ScriptingBridge
sp = ScriptingBridge.SBApplication.applicationWithBundleIdentifier_('com.apple.SystemPreferences')
panes = sp.panes()
pane = panes.objectWithName_('com.apple.preference.network')
anchors = pane.anchors()
dummy_anchor = anchors.objectAtIndex_(0)
dummy_anchor.reveal()
</snippet></ROW><ROW><id>19524830</id><snippet>reveal</snippet></ROW><ROW><id>19524830</id><snippet>reveal</snippet></ROW><ROW><id>19524830</id><snippet>anchor</snippet></ROW><ROW><id>19524830</id><snippet>tell application "com.apple.SystemPreferences"
    reveal first anchor of pane "com.apple.preference.network"
end tell
</snippet></ROW><ROW><id>19524830</id><snippet>appscript</snippet></ROW><ROW><id>19524830</id><snippet>import appscript
sp = appscript.app('com.apple.SystemPreferences')
sp.panes['com.apple.preference.network'].anchors[1].reveal()
</snippet></ROW><ROW><id>19524830</id><snippet>if</snippet></ROW><ROW><id>19524830</id><snippet>import applescript
scpt = 'tell app "System Preferences" to reveal pane "com.apple.preference.network"'
applescript.AppleScript(scpt).run()

import Foundation
scpt = 'tell app "System Preferences" to reveal pane "com.apple.preference.network"'
ascpt = Foundation.NSAppleScript.alloc()
ascpt.initWithSource_(scpt)
ascpt.executeAndReturnError_(None)
</snippet></ROW><ROW><id>19524856</id><snippet>if-else</snippet></ROW><ROW><id>19524856</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; b = [[x, True if x == 4 else False] for x in a]
&gt;&gt;&gt; b
[[1, False], [2, False], [3, False], [4, True], [5, False]]
</snippet></ROW><ROW><id>19524856</id><snippet>&gt;&gt;&gt; b = [[x, x == 4] for x in a]
</snippet></ROW><ROW><id>19524903</id><snippet>bitfield_member</snippet></ROW><ROW><id>19524903</id><snippet>classA</snippet></ROW><ROW><id>19524903</id><snippet>property()</snippet></ROW><ROW><id>19524903</id><snippet>self</snippet></ROW><ROW><id>19524903</id><snippet>bitfield_member</snippet></ROW><ROW><id>19524903</id><snippet>classA&amp;</snippet></ROW><ROW><id>19524903</id><snippet>// ...

struct classA_wrapper: ...
{
  // ...

  static ::uint_t get_bitfield_member(classA&amp; self)
  {
    return self.bitfield_member;
  }

  static void set_bitfield_member(classA&amp; self, ::uint_t new_value)
  {
    self.bitfield_member = new_value;
  }
};

BOOST_PYTHON_MODULE(...)
{
  namespace python = boost::python;

  // ...

  python::class_&lt; classA_wrapper &gt;("classA")
    .def_readwrite("intval", &amp;classA::intval)
    .add_property("bitfield_member",
                  &amp;classA_wrapper::get_bitfield_member,
                  &amp;classA_wrapper::set_bitfield_member)
    ;
  }
}
</snippet></ROW><ROW><id>19524903</id><snippet>get_bitfield_member</snippet></ROW><ROW><id>19524903</id><snippet>set_bitfield_member</snippet></ROW><ROW><id>19524903</id><snippet>classA</snippet></ROW><ROW><id>19524903</id><snippet>class_a_ptr</snippet></ROW><ROW><id>19524903</id><snippet>Collection.class_a_ptr</snippet></ROW><ROW><id>19524903</id><snippet>classA.intval</snippet></ROW><ROW><id>19524903</id><snippet>def_readwrite</snippet></ROW><ROW><id>19524903</id><snippet>make_getter/make_setter</snippet></ROW><ROW><id>19524903</id><snippet>#include &lt;boost/python.hpp&gt;

typedef unsigned int uint_t;

struct classA
{
  int intval;
  unsigned int bitfield_member:1;
};

struct Collection
{
  classA * class_a_ptr;
};

namespace python = boost::python;

struct Collection_wrapper
  : Collection, python::wrapper&lt;Collection&gt;
{
  Collection_wrapper() {}

  Collection_wrapper(const Collection&amp; self)
    : Collection(self)
  {}  

  static ::classA* get_class_a_ptr(const Collection&amp; self)
  {
    return self.class_a_ptr;
  }

  static void set_class_a_ptr(Collection&amp; self, ::classA * new_value)
  {
    self.class_a_ptr = new_value;
  }
};

struct classA_wrapper
  : classA, python::wrapper&lt;classA&gt;
{
  classA_wrapper() {}

  classA_wrapper(const classA&amp; self)
    : classA(self)
  {}  

  static ::uint_t get_bitfield_member(const classA&amp; self)
  {
    return self.bitfield_member;
  }

  static void set_bitfield_member(classA&amp; self, ::uint_t new_value)
  {
    self.bitfield_member = new_value;
  }
};

BOOST_PYTHON_MODULE(example)
{
  python::class_&lt;Collection_wrapper&gt;("Collection")
    .add_property("class_a_ptr",
      python::make_function(&amp;Collection_wrapper::get_class_a_ptr,
                            python::return_internal_reference&lt;&gt;()),
      python::make_function(&amp;Collection_wrapper::set_class_a_ptr,
                            python::with_custodian_and_ward_postcall&lt;1, 2&gt;()))
    ;

  python::class_&lt;classA_wrapper&gt;("classA")
    .def_readwrite("intval", &amp;classA::intval)
    .add_property("bitfield_member",
                  &amp;classA_wrapper::get_bitfield_member,
                  &amp;classA_wrapper::set_bitfield_member)
    ;
}
</snippet></ROW><ROW><id>19524903</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; collection = example.Collection()
&gt;&gt;&gt; a = example.classA()
&gt;&gt;&gt; a.intval = 9801
&gt;&gt;&gt; print a.intval
9801
&gt;&gt;&gt; collection.class_a_ptr = a
&gt;&gt;&gt; same_a = collection.class_a_ptr
&gt;&gt;&gt; a.bitfield_member = 0
&gt;&gt;&gt; print a.bitfield_member
0
&gt;&gt;&gt; print same_a.bitfield_member
0
&gt;&gt;&gt; same_a.bitfield_member = 1
&gt;&gt;&gt; print a.bitfield_member
1
&gt;&gt;&gt; print same_a.bitfield_member
1
</snippet></ROW><ROW><id>19525017</id><snippet>x in range(2) == True
</snippet></ROW><ROW><id>19525017</id><snippet>x in range(2) and range(2) == True
</snippet></ROW><ROW><id>19525017</id><snippet>False</snippet></ROW><ROW><id>19525017</id><snippet>range(2) == True</snippet></ROW><ROW><id>19525017</id><snippet>False</snippet></ROW><ROW><id>19525017</id><snippet>x &lt; y &lt;= z</snippet></ROW><ROW><id>19525017</id><snippet>x &lt; y and y &lt;= z</snippet></ROW><ROW><id>19525017</id><snippet>x &lt; y</snippet></ROW><ROW><id>19525136</id><snippet>containedFiles = containedArray.partition(",")
</snippet></ROW><ROW><id>19525136</id><snippet>split</snippet></ROW><ROW><id>19525136</id><snippet>partition</snippet></ROW><ROW><id>19525136</id><snippet>partition</snippet></ROW><ROW><id>19525136</id><snippet>"hello,world".partition(",")
# ('hello', ',', 'world')
"hello,world".split(",")
# ['hello', 'world']
</snippet></ROW><ROW><id>19525137</id><snippet>cython -a</snippet></ROW><ROW><id>19525141</id><snippet>def ensure_list(it):
    if isinstance(it, (list, tuple, dict)):
        return it
    else:
        return list(it)
</snippet></ROW><ROW><id>19525141</id><snippet>ensure_list(a_list)</snippet></ROW><ROW><id>19525141</id><snippet>ensure_list(a_generator)</snippet></ROW><ROW><id>19525280</id><snippet>WebSocketServerProtocol.onConnect</snippet></ROW><ROW><id>19525488</id><snippet>np.exp(np.random.normal(...)).var()</snippet></ROW><ROW><id>19525488</id><snippet>np.random.lognormal(...).var()</snippet></ROW><ROW><id>19525488</id><snippet>np.random.lognormal()</snippet></ROW><ROW><id>19525488</id><snippet>np.exp(np.random.normal())</snippet></ROW><ROW><id>19525521</id><snippet>clear/delete the cookie 
</snippet></ROW><ROW><id>19525521</id><snippet>session.pop('_flashes', None)
</snippet></ROW><ROW><id>19525541</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>19525541</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; written = sys.stdout.write('10')
10&gt;&gt;&gt; written
2
</snippet></ROW><ROW><id>19525541</id><snippet>'10'</snippet></ROW><ROW><id>19525541</id><snippet>0</snippet></ROW><ROW><id>19525541</id><snippet>&gt;&gt;&gt; for i in range(3):
...     sys.stdout.write('')
... 
0
0
0
</snippet></ROW><ROW><id>19525681</id><snippet>*</snippet></ROW><ROW><id>19525681</id><snippet>["," "*" expression]
</snippet></ROW><ROW><id>19525681</id><snippet>argument_list</snippet></ROW><ROW><id>19525681</id><snippet>expression</snippet></ROW><ROW><id>19525681</id><snippet>expression</snippet></ROW><ROW><id>19525681</id><snippet>*</snippet></ROW><ROW><id>19525681</id><snippet>expression</snippet></ROW><ROW><id>19525681</id><snippet>primary</snippet></ROW><ROW><id>19525681</id><snippet>primary</snippet></ROW><ROW><id>19525681</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; tree = ast.parse('func(*mydict[mykey])')
&gt;&gt;&gt; ast.dump(tree)
"Module(body=[Expr(value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[],
starargs=Subscript(value=Name(id='mydict', ctx=Load()),
slice=Index(value=Name(id='mykey', ctx=Load())), ctx=Load()), kwargs=None))])"
</snippet></ROW><ROW><id>19525681</id><snippet>Subscript</snippet></ROW><ROW><id>19525681</id><snippet>starargs</snippet></ROW><ROW><id>19525681</id><snippet>Call</snippet></ROW><ROW><id>19525681</id><snippet>ast</snippet></ROW><ROW><id>19525681</id><snippet>expr</snippet></ROW><ROW><id>19525681</id><snippet>starargs</snippet></ROW><ROW><id>19525681</id><snippet>Subscript</snippet></ROW><ROW><id>19525913</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>19525913</id><snippet>&lt;link&gt;</snippet></ROW><ROW><id>19525913</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>19525913</id><snippet>from bs4 import BeautifulSoup
import requests

resp = requests.get("http://www.yahoo.com")

soup = BeautifulSoup(resp.text)

# Pull the linked images (note: will grab base64 encoded images) 
images = [img['src'] for img in soup.findAll('img') if img.has_key('src')]

# Checking for src ensures that we don't grab the embedded scripts
scripts = [script['src'] for script in soup.findAll('script') if script.has_key('src')]

# favicon.ico and css
links = [link['href'] for link in soup.findAll('link') if link.has_key('href')]
</snippet></ROW><ROW><id>19525913</id><snippet>In [30]: images = [img['src'] for img in soup.findAll('img') if img.has_key('src')]

In [31]: images[:5]
Out[31]:
['http://l.yimg.com/dh/ap/default/130925/My_Yahoo_Defatul_HP_ad_300x250.jpeg',
 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png',
 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png',
 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png',
 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png']
</snippet></ROW><ROW><id>19526005</id><snippet>int(mode[0])</snippet></ROW><ROW><id>19526210</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button, RadioButtons

x = [50, 50]

fig, axarr = plt.subplots(3)

# draw the initial pie chart
axarr[0].pie(x,autopct='%1.1f%%')
axarr[0].set_position([0.25,0.4,.5,.5])

# create the slider
axarr[1].set_position([0.1, 0.35, 0.8, 0.03])
risk = Slider(axarr[1], 'Risk', 0.1, 100.0, valinit=x[0])

# create some other random plot below the slider
axarr[2].plot(np.random.rand(10))
axarr[2].set_position([0.1,0.1,.8,.2])

def update(val):
    axarr[0].clear()
    axarr[0].pie([val, 100-val],autopct='%1.1f%%')
    fig.canvas.draw_idle()

risk.on_changed(update)

plt.show()
</snippet></ROW><ROW><id>19526400</id><snippet>list</snippet></ROW><ROW><id>19526400</id><snippet>print</snippet></ROW><ROW><id>19526400</id><snippet>next</snippet></ROW><ROW><id>19526400</id><snippet>__getitem__</snippet></ROW><ROW><id>19526400</id><snippet>UserList</snippet></ROW><ROW><id>19526400</id><snippet>__getitem__</snippet></ROW><ROW><id>19526400</id><snippet>__iter__</snippet></ROW><ROW><id>19526400</id><snippet>__iter__</snippet></ROW><ROW><id>19526400</id><snippet>list</snippet></ROW><ROW><id>19526400</id><snippet>__iter__</snippet></ROW><ROW><id>19526400</id><snippet>object</snippet></ROW><ROW><id>19526428</id><snippet>db.seqs.insert({
    'colection': 'admin_colection',
    'id': 0
})
</snippet></ROW><ROW><id>19526428</id><snippet>def insert_doc(doc):
    doc['_id'] = str(db.seqs.find_and_modify(
        query={'colection': 'admin_colection'},
        update={'$inc': {'id': 1}},
        fields={'id': 1, '_id': 0},
        new=True 
    ).get('id'))

    try:
        db.admin_collection.insert(doc)

    except pymongo.errors.DuplicateKeyError as e:
        insert_doc(doc)
</snippet></ROW><ROW><id>19526505</id><snippet>__weakref__</snippet></ROW><ROW><id>19526505</id><snippet>__slots__</snippet></ROW><ROW><id>19526505</id><snippet>__weakref__</snippet></ROW><ROW><id>19526505</id><snippet>__slots__</snippet></ROW><ROW><id>19526505</id><snippet>__weakref__</snippet></ROW><ROW><id>19526505</id><snippet>__slots__</snippet></ROW><ROW><id>19526505</id><snippet>&gt;&gt;&gt; from weakref import ref
&gt;&gt;&gt;
&gt;&gt;&gt; class Klass(object):
&gt;&gt;&gt;     __slots__ = ['foo', '__weakref__']
&gt;&gt;&gt;     def __init__(self):
&gt;&gt;&gt;         self.foo = 'bar'
&gt;&gt;&gt; k = Klass()
&gt;&gt;&gt; k
 =&gt; &lt;__main__.Klass object at ...&gt;
&gt;&gt;&gt; r
 =&gt; &lt;weakref at ...; to 'Klass' at ...&gt;
</snippet></ROW><ROW><id>19526556</id><snippet>isSpaceFree</snippet></ROW><ROW><id>19526556</id><snippet>false</snippet></ROW><ROW><id>19526556</id><snippet>if bin[row][column] == 0: return True</snippet></ROW><ROW><id>19526556</id><snippet>def isSpaceFree(bin, row, column, block):
    if row + block &gt; len(bin):
        return False
    if column + block &gt; len(bin):
        return False
    else:  # YOU PROBABLY DON'T WANT THIS HERE
        return False #DITTO

    ## Nothing from here or below ever gets reached because of above commented lines
    if bin[row][column] == 0 :  ## you dont want this
        return True  ##because this is bad too and aborts and its already covered below
    for r in range(row, row+block):
        for c in range(column, column + block):
            if bin[r][c] != 0:
                return False
    return True
</snippet></ROW><ROW><id>19526865</id><snippet>stdout</snippet></ROW><ROW><id>19526865</id><snippet>class StatusWriter(object):
    def write(self, msg):
        statusbar.config(text=msg[1:])

def count():
    sys.stdout = StatusWriter()
    i = 0
    def step():
        nonlocal i
        sys.stdout.write("\r{} of {}".format(i, 50))
        i += 1
        if i == 50:
            sys.stdout = sys.__stdout__
        else:
            root.after(100, step)
    root.after(100, step)
</snippet></ROW><ROW><id>19526865</id><snippet>def count():
    sys.stdout = StatusWriter()
    i = 0
    def step():
        nonlocal i
        statusbar.config(text="{} of {}".format(i, 50))
        i += 1
        if i == 50:
            sys.stdout = sys.__stdout__
        else:
            root.after(100, step)
    root.after(100, step)
</snippet></ROW><ROW><id>19526891</id><snippet>&gt;&gt;&gt; def func(N=20000):
...     print(N)
&gt;&gt;&gt; func(10)
10
&gt;&gt;&gt; func(N=10)
10
&gt;&gt;&gt; func()
20000
</snippet></ROW><ROW><id>19526891</id><snippet>N</snippet></ROW><ROW><id>19526891</id><snippet>10</snippet></ROW><ROW><id>19526891</id><snippet>N</snippet></ROW><ROW><id>19526891</id><snippet>N=10</snippet></ROW><ROW><id>19526891</id><snippet>20000</snippet></ROW><ROW><id>19527134</id><snippet>for index, item in enumerate(L):
  if a in item or b in item:
    r.append(index)
</snippet></ROW><ROW><id>19527152</id><snippet>numpy.random.pareto(a, size=None)
</snippet></ROW><ROW><id>19527152</id><snippet>Parameters
----------
shape : float, &gt; 0.
    Shape of the distribution.
size : tuple of ints
    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
    ``m * n * k`` samples are drawn.
</snippet></ROW><ROW><id>19527152</id><snippet>a</snippet></ROW><ROW><id>19527152</id><snippet>shape</snippet></ROW><ROW><id>19527152</id><snippet>size</snippet></ROW><ROW><id>19527152</id><snippet>tuple</snippet></ROW><ROW><id>19527152</id><snippet>array</snippet></ROW><ROW><id>19527152</id><snippet>Examples
--------
Draw samples from the distribution:

&gt;&gt;&gt; a, m = 3., 1. # shape and mode
&gt;&gt;&gt; s = np.random.pareto(a, 1000) + m
</snippet></ROW><ROW><id>19527152</id><snippet>m</snippet></ROW><ROW><id>19527152</id><snippet>lower = 10  # the lower bound for your values
shape = 1   # the distribution shape parameter, also known as `a` or `alpha`
size = 1000 # the size of your sample (number of random values)
</snippet></ROW><ROW><id>19527152</id><snippet>x = np.random.pareto(shape, size) + lower
</snippet></ROW><ROW><id>19527152</id><snippet>upper = 20
x = x[x&lt;upper]  # only values where x &lt; upper
</snippet></ROW><ROW><id>19527152</id><snippet>size</snippet></ROW><ROW><id>19527152</id><snippet>x = np.random.pareto(shape, size*5/4) + lower
x = x[x&lt;upper][:size]
</snippet></ROW><ROW><id>19527219</id><snippet>{% macro css() -%}
    .mywidget {
         css: goes_here;
    }
{% endmacro %}

{% macro widget() -%}
    &lt;div class="mywidget"&gt;
        &lt;!-- structure goes here --&gt;
    &lt;/div&gt;
{% endmacro %}

{% macro script() -%}
    $( ".mywidget" ).addFunctionality(stuff)
{% endmacro %}
</snippet></ROW><ROW><id>19527219</id><snippet>{% import 'mywidget.html' as mywidget %}

...
&lt;html&gt;
&lt;head&gt;
    &lt;style&gt;
        {{ mywidget.css() }}
    &lt;/style&gt;
&lt;head&gt;
&lt;body&gt;
    {{ mywidget.body() }}

    &lt;script&gt;
        {{ mywidget.script() }}
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19527219</id><snippet>mywidget.script()</snippet></ROW><ROW><id>19527376</id><snippet>print</snippet></ROW><ROW><id>19527434</id><snippet>u'\xce0'</snippet></ROW><ROW><id>19527434</id><snippet>u'\xc9'</snippet></ROW><ROW><id>19527434</id><snippet>&gt;&gt;&gt; print s.encode('ascii', errors='backslashreplace')
ABRA\xc3O JOS\xc9
&gt;&gt;&gt; print s.encode('ascii', errors='xmlcharrefreplace')
ABRAÃO JOSÉ
&gt;&gt;&gt; print s.encode('unicode-escape')
ABRA\xc3O JOS\xc9
&gt;&gt;&gt; print s.encode('punycode')
ABRAO JOS-jta5e
</snippet></ROW><ROW><id>19527434</id><snippet>decode('ascii')</snippet></ROW><ROW><id>19527434</id><snippet>str.encode</snippet></ROW><ROW><id>19527434</id><snippet>&gt;&gt;&gt; s.encode('utf-8')
'ABRA\xc3\x83O JOS\xc3\x89'
&gt;&gt;&gt; s.encode('cp1252')
'ABRA\xc3O JOS\xc9'
&gt;&gt;&gt; s.encode('iso-8859-15')
'ABRA\xc3O JOS\xc9'
</snippet></ROW><ROW><id>19527434</id><snippet>open</snippet></ROW><ROW><id>19527468</id><snippet>/</snippet></ROW><ROW><id>19527468</id><snippet>send(request/ip)
</snippet></ROW><ROW><id>19527468</id><snippet>WARNING: No IPv6 underlayer to compute checksum. Leaving null,</snippet></ROW><ROW><id>19527468</id><snippet>send(ip/request)
</snippet></ROW><ROW><id>19527542</id><snippet>cursor.execute(sql,(data,))
</snippet></ROW><ROW><id>19527596</id><snippet>localize</snippet></ROW><ROW><id>19527596</id><snippet>import pytz
import datetime
naive_date = datetime.datetime.strptime("2013-10-21 08:44:08", "%Y-%m-%d %H:%M:%S")
localtz = pytz.timezone('America/Los_Angeles')
date_aware_la = localtz.localize(naive_date)
print(date_aware_la)   # 2013-10-21 08:44:08-07:00
</snippet></ROW><ROW><id>19527596</id><snippet>utc_date = date_aware_la.astimezone(pytz.utc)
print(utc_date)
</snippet></ROW><ROW><id>19527717</id><snippet>if __name__ == '__main__':                                                       
    # Open the file for reading.                                                 
    rd_file_name = "../txt/q1.txt"                                               
    rd_file = open(rd_file_name, 'r')                                            

    # Read through the header                                                    
    for line in rd_file.readlines():                                             
        # Decide what to do based on the content in the line.                    
        if "header" in line.lower():                                             
            # Don't print the header                                             
            pass                                                                 
        elif line.strip() == "":                                                 
            # Quit if you see a blank line                                       
            break                                                                
        else:                                                                    
            # We print the body.  Lines end with a carriage return, so we don't  
            # add another one.                                                   
            print line,                                                          

    # Clean up                                                                   
    rd_file.close() 
</snippet></ROW><ROW><id>19528021</id><snippet>&gt;&gt;&gt; mystr = 'cathy is a singer on fridays'
&gt;&gt;&gt; x = mystr.split()
&gt;&gt;&gt; x
['cathy', 'is', 'a', 'singer', 'on', 'fridays']
&gt;&gt;&gt; x[3] = "dancer"
&gt;&gt;&gt; x
['cathy', 'is', 'a', 'dancer', 'on', 'fridays']
&gt;&gt;&gt; " ".join(x)
'cathy is a dancer on fridays'
</snippet></ROW><ROW><id>19528021</id><snippet>&gt;&gt;&gt; mystr = 'cathy is a singer on fridays'
&gt;&gt;&gt; x = mystr.split()
&gt;&gt;&gt; " ".join(x[:3] + ["dancer"] + x[4:])
'cathy is a dancer on fridays'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19528021</id><snippet>.split</snippet></ROW><ROW><id>19528147</id><snippet>((*- extends 'latex_article.tplx' -*))
% Disable input cells
((* block input_group *))
((* endblock input_group *))
</snippet></ROW><ROW><id>19528147</id><snippet>ipython nbconvert --to=latex --template=latex_nocode.tplx --post=pdf file.ipynb</snippet></ROW><ROW><id>19528212</id><snippet>number3 = 10
number10 = 10 -1 = 9
test = range(1,9) # 1,2,3,4,5,6,7,8 #notice how many variables there are
if 9 &lt; number3:
    test[9] # error
</snippet></ROW><ROW><id>19528294</id><snippet>import re
r = re.compile("(Hello|Hey|Hi) my name is (.+)")
</snippet></ROW><ROW><id>19528294</id><snippet>match = r.search(text)
if match:
    name = match.groups()[1]
</snippet></ROW><ROW><id>19528294</id><snippet>(?P&lt;name&gt;PATTERN)</snippet></ROW><ROW><id>19528489</id><snippet>ljust</snippet></ROW><ROW><id>19528489</id><snippet>rjust</snippet></ROW><ROW><id>19528489</id><snippet>str</snippet></ROW><ROW><id>19528489</id><snippet>unicode</snippet></ROW><ROW><id>19528489</id><snippet>board[0, x].ljust(11)
</snippet></ROW><ROW><id>19528489</id><snippet>'Pawn[B]      '
</snippet></ROW><ROW><id>19528489</id><snippet>print("|", board[0, x].ljust(11), "|", board[1, x].ljust(11, ' '), ...)
</snippet></ROW><ROW><id>19528489</id><snippet>for x in range(8):
    row = [board[y, x] for y in range(8)]
    print('|%s|' % '|'.join(cell.lpad(13) for cell in row)
</snippet></ROW><ROW><id>19528489</id><snippet>range</snippet></ROW><ROW><id>19528489</id><snippet>range(0, 8)</snippet></ROW><ROW><id>19528489</id><snippet>range(0, 7)</snippet></ROW><ROW><id>19528489</id><snippet>range(0, N)</snippet></ROW><ROW><id>19528489</id><snippet>range(N)</snippet></ROW><ROW><id>19528489</id><snippet>' '</snippet></ROW><ROW><id>19528489</id><snippet>ljust</snippet></ROW><ROW><id>19528489</id><snippet>rjust</snippet></ROW><ROW><id>19528501</id><snippet>soundings</snippet></ROW><ROW><id>19528501</id><snippet>soundings = f.dimensions[u'soundings']
</snippet></ROW><ROW><id>19528501</id><snippet>soundings</snippet></ROW><ROW><id>19528501</id><snippet>print len(soundings)</snippet></ROW><ROW><id>19528501</id><snippet>print len(f.dimensions[u'soundings'])
</snippet></ROW><ROW><id>19528501</id><snippet>&gt;&gt;&gt; print rootgrp.dimensions
OrderedDict([('level', &lt;netCDF4.Dimension object at 0x1b48030&gt;),
             ('time', &lt;netCDF4.Dimension object at 0x1b481c0&gt;),
             ('lat', &lt;netCDF4.Dimension object at 0x1b480f8&gt;),
             ('lon', &lt;netCDF4.Dimension object at 0x1b48a08&gt;)])
</snippet></ROW><ROW><id>19528501</id><snippet>rootgrp</snippet></ROW><ROW><id>19528501</id><snippet>&gt;&gt;&gt; print len(lon)
</snippet></ROW><ROW><id>19528501</id><snippet>lon</snippet></ROW><ROW><id>19528501</id><snippet>&gt;&gt;&gt; lon = rootgrp.createDimension('lon', 144)
</snippet></ROW><ROW><id>19528535</id><snippet>{{ question.id }}</snippet></ROW><ROW><id>19528535</id><snippet>{{ question.question_text }}</snippet></ROW><ROW><id>19528535</id><snippet>{{</snippet></ROW><ROW><id>19528535</id><snippet>}}</snippet></ROW><ROW><id>19528554</id><snippet>import requests
import json
from bs4 import BeautifulSoup

# Use requests library to get the JSON data
JSONDATA = requests.request("GET", "http://www.websitehere.com/") #Make sure you include the http part
# Load it with JSON 
JSONDATA = JSONDATA.json()

# Cycle through each `line` in the JSON
for line in JSONDATA['line']:
    # Load stripped html in BeautifulSoup
    soup = BeautifulSoup(line['text'])
    # Prints tidy html
    print soup.prettify()
</snippet></ROW><ROW><id>19528660</id><snippet>&gt;&gt;&gt; re.compile("|+")
Traceback (most recent call last):
...
sre_constants.error: nothing to repeat
</snippet></ROW><ROW><id>19528660</id><snippet>+</snippet></ROW><ROW><id>19528660</id><snippet>+</snippet></ROW><ROW><id>19528660</id><snippet>\+</snippet></ROW><ROW><id>19528660</id><snippet>+</snippet></ROW><ROW><id>19528710</id><snippet>&amp;</snippet></ROW><ROW><id>19528710</id><snippet>@echo off
rem = """
setlocal enableextensions
set PYTHON="C:/Python27/python.exe"
%PYTHON% -x "%~f0" %*
goto endofPython """

# Your python code goes here ..

if __name__ == "__main__":
    # Looks for a file on disk and take me there
    import sys
    import os
    if len(sys.argv) == 2:
        for root, dirnames, filenames in os.walk(os.getcwd()):
            for filename in filenames:
                if filename == sys.argv[1]:
                    print 'TAKING YOU TO: %s' % root
                    command = '&amp;'.join(['cls',
                                        'title %s' % root,
                                        'cd %s' % root,
                                        'cmd /k'])
                    os.system(command)

rem = """
:endofPython """
</snippet></ROW><ROW><id>19528710</id><snippet>python -x "%~f0" %*</snippet></ROW><ROW><id>19528710</id><snippet>python.exe</snippet></ROW><ROW><id>19528822</id><snippet>matplotlib.rcParams['legend.numpoints']</snippet></ROW><ROW><id>19528822</id><snippet>axs.plot(range(10), '--k', label="line", marker='d')
axs.plot(range(10), range(10)[::-1], ':k', label="scatter", marker='o')
</snippet></ROW><ROW><id>19528822</id><snippet>matplotlib.rcParams['legend.scatterpoints']</snippet></ROW><ROW><id>19528822</id><snippet>matplotlib.rcParams['legend.handlelength']</snippet></ROW><ROW><id>19528822</id><snippet>matplotlib.rcParams['legend.handleheight']</snippet></ROW><ROW><id>19528822</id><snippet>legend.*</snippet></ROW><ROW><id>19528822</id><snippet>legend</snippet></ROW><ROW><id>19528822</id><snippet>matplotlib.pyplot.legend</snippet></ROW><ROW><id>19528867</id><snippet>'r'</snippet></ROW><ROW><id>19528867</id><snippet>file.tell()</snippet></ROW><ROW><id>19528867</id><snippet>'rb'</snippet></ROW><ROW><id>19528897</id><snippet>ItemResource</snippet></ROW><ROW><id>19528897</id><snippet>filters</snippet></ROW><ROW><id>19528897</id><snippet>get_list</snippet></ROW><ROW><id>19528897</id><snippet>obj_get_list</snippet></ROW><ROW><id>19528897</id><snippet>apply_filters</snippet></ROW><ROW><id>19528897</id><snippet>django-restframework</snippet></ROW><ROW><id>19528897</id><snippet>django-tastypie</snippet></ROW><ROW><id>19529030</id><snippet>contentType: 'application/json; charset=UTF-8'</snippet></ROW><ROW><id>19529030</id><snippet>$.ajax()</snippet></ROW><ROW><id>19529030</id><snippet>dataType</snippet></ROW><ROW><id>19529136</id><snippet>unicode</snippet></ROW><ROW><id>19529136</id><snippet>str</snippet></ROW><ROW><id>19529136</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>19529136</id><snippet>noboxes = noextrawhitespace.replace(u"\u2610", "")
</snippet></ROW><ROW><id>19529136</id><snippet>noextrawhitespace</snippet></ROW><ROW><id>19529136</id><snippet>unicode</snippet></ROW><ROW><id>19529136</id><snippet>str</snippet></ROW><ROW><id>19529136</id><snippet>noboxes = noextrawhitespace.replace(u"\u2610", u"")
</snippet></ROW><ROW><id>19529136</id><snippet>noboxes = noextrawhitespace.replace(u"\u2610".encode('utf-8'), "")
</snippet></ROW><ROW><id>19529136</id><snippet>&lt;xml&gt;
    &lt;text&gt;abc☐def&lt;/text&gt;
&lt;/xml&gt;
</snippet></ROW><ROW><id>19529136</id><snippet>noboxes = noextrawhitespace.replace(u"\u2610".encode('utf-8'), "")
print noboxes
</snippet></ROW><ROW><id>19529136</id><snippet>[&lt;text&gt;abc☐def&lt;/text&gt;]
[&lt;text&gt;abc☐def&lt;/text&gt;]
[&lt;text&gt;abcdef&lt;/text&gt;]
</snippet></ROW><ROW><id>19529136</id><snippet>unicode</snippet></ROW><ROW><id>19529152</id><snippet>reactor.run()</snippet></ROW><ROW><id>19529152</id><snippet>reactor.stop()</snippet></ROW><ROW><id>19529153</id><snippet>  Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
</snippet></ROW><ROW><id>19529153</id><snippet>curl</snippet></ROW><ROW><id>19529153</id><snippet>from base64 import b64encode

headers = {
    'Authorization': 'Basic ' + b64encode("{0}:{1}".format(username, password))
}

rv = self.app.get('api/v1.0/{0}'.format(ios_sync_timestamp), headers=headers)
</snippet></ROW><ROW><id>19529415</id><snippet>if x &gt; y:    
        f.writerow(["X is bigger than y"]
elseif x &lt; y:
        f.writerow(["Y is bigger than X"]
</snippet></ROW><ROW><id>19529528</id><snippet>for row in df2.itertuples():
    index, a, b, c  = row
    print 'in %s say %s!'%(a,b)

in colorado say go buffs!
in california say go bears!
in texas say go sooners!
in oregon say go ducks!
</snippet></ROW><ROW><id>19529528</id><snippet>iterrows</snippet></ROW><ROW><id>19529528</id><snippet>for row in df2.iterrows():
    index, data = row
    print 'in %s say %s!' % (data['a'], data['b'])
</snippet></ROW><ROW><id>19529794</id><snippet> Make sure first you have properly install django-sendmail

 $ sudo apt-get install sendmail

 in the settings.py :

 from django.core.mail import send_mail

  DEFAULT_FROM_EMAIL='webmaster@localhost' 
  SERVER_EMAIL='root@localhost' 
  EMAIL_HOST = 'localhost' 
  EMAIL_HOST_USER='' 
  EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend' 
  EMAIL_PORT = 25 #587 
  EMAIL_USE_TLS = False

  in views.py:

  from project.apps.contact import ContactForm
  def contactnote(request):
if request.method=='POST':
    form =ContactForm(request.POST)
    if form.is_valid():
        topic=form.cleaned_data['topic']
        message=form.cleaned_data['message']
        sender=form.cleaned_data.get('sender','email_address')
        send_mail(
            topic,
            message,
            sender, 
            ['myaddress@gmail.com'],fail_silently=False
        )
        #return HttpResponseRedirect(reverse('games.views.thanks',  {},RequestContext(request)))
        return render_to_response('contact/thanks.html', {},RequestContext(request)) #good for the reverse method
else:
    form=ContactForm()
return render_to_response('contact.html',{'form':form},RequestContext(request))


contact.py:

from django import forms as forms
from django.forms import Form

TOPIC_CHOICES=(
        ('general', 'General enquiry'),
        ('Gamebling problem','Gamebling problem'),
        ('suggestion','Suggestion'),
)


class ContactForm(forms.Form):
topic=forms.ChoiceField(choices=TOPIC_CHOICES)
sender=forms.EmailField(required=False)
message=forms.CharField(widget=forms.Textarea)
#the widget here would specify a form with a comment that uses a larger Textarea   widget, rather than the default TextInput widget.

def clean_message(self):
    message=self.cleaned_data.get('message','')
    num_words=len(message.split())
    if num_words &lt;4:
        raise forms.ValidationError("Not enough words!")
    return message

  Try it , this is a whole working example apps, modify it
  to be send to to mailserver like a reply when it got an mail, very simple to modify it
</snippet></ROW><ROW><id>19529796</id><snippet>error: function(jqXHR, textStatus, errorThrown) {
    ...
},
</snippet></ROW><ROW><id>19529796</id><snippet>error: function(jqXHR, textStatus, errorThrown) {
    alert("An error!")
},
</snippet></ROW><ROW><id>19529796</id><snippet># and/or answer.data['errorMessage'] = "Error type II"
answer.data['success'] = False
return answer
</snippet></ROW><ROW><id>19529796</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;success: function(data, textStatus, jqXHR) {
    //  instead of checking for success, you can check the content of
    //  the "accounts/create" key
    // if (!data.success) {

    // I assume that this key won't be present in case of error.
    if (data["accounts/create"]) {

        alert("Errors will now be displayed")
        // ...here, the same code in Corinne Kubler's answer; or you
        // can make it more jQueryish with e.g. .each()
        return;
    }
    alert("Everything OK, proceeding")
    // ...
}
</snippet></ROW><ROW><id>19529865</id><snippet>print</snippet></ROW><ROW><id>19529865</id><snippet>awayTeam</snippet></ROW><ROW><id>19529865</id><snippet>bs4.element.NavigableString</snippet></ROW><ROW><id>19529865</id><snippet>awayTeam = awayQTRScores[0]
</snippet></ROW><ROW><id>19529865</id><snippet>print awayTeam</snippet></ROW><ROW><id>19529865</id><snippet>print repr(awayTeam)</snippet></ROW><ROW><id>19529865</id><snippet>NavigableString</snippet></ROW><ROW><id>19529865</id><snippet>unicode</snippet></ROW><ROW><id>19529865</id><snippet>__str__</snippet></ROW><ROW><id>19529865</id><snippet>__repr__</snippet></ROW><ROW><id>19529865</id><snippet>bs4</snippet></ROW><ROW><id>19529865</id><snippet>NavigableString</snippet></ROW><ROW><id>19529865</id><snippet>NavigableString</snippet></ROW><ROW><id>19529865</id><snippet>unicode()</snippet></ROW><ROW><id>19529865</id><snippet>unicode</snippet></ROW><ROW><id>19529865</id><snippet>NavigableString</snippet></ROW><ROW><id>19529865</id><snippet>awayTeam = unicode(awayQTRScores[0])
</snippet></ROW><ROW><id>19529926</id><snippet>('alogger.log')</snippet></ROW><ROW><id>19529926</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>19529926</id><snippet>filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=0
</snippet></ROW><ROW><id>19529926</id><snippet>maxBytes</snippet></ROW><ROW><id>19529926</id><snippet>__init__.py</snippet></ROW><ROW><id>19529926</id><snippet>args=('alogger.log', 'a', 25000, 0, None, 0)
</snippet></ROW><ROW><id>19529989</id><snippet>.shift()</snippet></ROW><ROW><id>19529989</id><snippet>any</snippet></ROW><ROW><id>19529989</id><snippet>&gt;&gt;&gt; df
   Bid  Ask
1  1.0  1.5
2  1.0  1.5
3  1.0  1.5
4  1.5  2.0
5  1.5  2.0
6  2.0  2.5
7  2.0  2.5
8  2.0  3.0
&gt;&gt;&gt; df[(df != df.shift()).any(axis=1)]
   Bid  Ask
1  1.0  1.5
4  1.5  2.0
6  2.0  2.5
8  2.0  3.0
</snippet></ROW><ROW><id>19529989</id><snippet>&gt;&gt;&gt; df.shift()
   Bid  Ask
1  NaN  NaN
2  1.0  1.5
3  1.0  1.5
4  1.0  1.5
5  1.5  2.0
6  1.5  2.0
7  2.0  2.5
8  2.0  2.5
</snippet></ROW><ROW><id>19529989</id><snippet>&gt;&gt;&gt; df != df.shift()
     Bid    Ask
1   True   True
2  False  False
3  False  False
4   True   True
5  False  False
6   True   True
7  False  False
8  False   True
</snippet></ROW><ROW><id>19529989</id><snippet>&gt;&gt;&gt; (df != df.shift()).any(axis=1)
1     True
2    False
3    False
4     True
5    False
6     True
7    False
8     True
dtype: bool
</snippet></ROW><ROW><id>19530080</id><snippet>python test.py
</snippet></ROW><ROW><id>19530080</id><snippet>test.py</snippet></ROW><ROW><id>19530080</id><snippet>cd</snippet></ROW><ROW><id>19530080</id><snippet>cd</snippet></ROW><ROW><id>19530080</id><snippet>man cd</snippet></ROW><ROW><id>19530080</id><snippet>bash</snippet></ROW><ROW><id>19530123</id><snippet>foods</snippet></ROW><ROW><id>19530123</id><snippet>dict</snippet></ROW><ROW><id>19530123</id><snippet>dict</snippet></ROW><ROW><id>19530123</id><snippet>list</snippet></ROW><ROW><id>19530123</id><snippet>print foods[0]['rect']

for food in foods:
    print food['dir']

food = random.choice(foods)
print food['rect']
</snippet></ROW><ROW><id>19530227</id><snippet>avg=sum/12.</snippet></ROW><ROW><id>19530473</id><snippet>.split</snippet></ROW><ROW><id>19530473</id><snippet>&gt;&gt;&gt; "a b c d e".split()
['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19530473</id><snippet>my_list</snippet></ROW><ROW><id>19530473</id><snippet>my_list = [line.strip().split(',') for line in open("Alpha.txt")]
</snippet></ROW><ROW><id>19530473</id><snippet>.split</snippet></ROW><ROW><id>19530473</id><snippet>.strip</snippet></ROW><ROW><id>19530522</id><snippet>astropy.io.ascii</snippet></ROW><ROW><id>19530522</id><snippet>from astropy.io import ascii
# Give names for ALL of the columns, as there is no easy way to skip columns
# for a table with no column header.
colnames = ('sn', 'gal_name1', 'gal_name2', 'year', 'month', 'day', ...)
table = ascii.read('sn_full.txt', Reader=ascii.NoHeader, names=colnames)
</snippet></ROW><ROW><id>19530522</id><snippet>io.ascii.read</snippet></ROW><ROW><id>19530522</id><snippet>1998S  NGC 3877</snippet></ROW><ROW><id>19530522</id><snippet>readcol</snippet></ROW><ROW><id>19530522</id><snippet>io.ascii</snippet></ROW><ROW><id>19530522</id><snippet>io.ascii</snippet></ROW><ROW><id>19530522</id><snippet>  a       b          c        
----  ------------  ------
 1.2  hello there    2
 2.4  worlds         3
</snippet></ROW><ROW><id>19530522</id><snippet>astropy.io.ascii</snippet></ROW><ROW><id>19530522</id><snippet>&gt;&gt;&gt; ascii.read(table, Reader=ascii.FixedWidthNoHeader,
               names=('Name', 'Phone', 'TCP'),
               col_starts=(0, 9, 18),
               col_ends=(5, 17, 28),
              )
</snippet></ROW><ROW><id>19530530</id><snippet>In [33]: df.groupby(level='item_id').apply(
      lambda x: x.reset_index().set_index('date').reindex(idx,method='ffill')).head(30)
Out[33]: 
                    item_id  annotations  tags
item_id                                       
2       2005-07-01      NaN          NaN   NaN
        2005-08-01      NaN          NaN   NaN
        2005-09-01      NaN          NaN   NaN
        2005-10-01      NaN          NaN   NaN
        2005-11-01      NaN          NaN   NaN
        2005-12-01      NaN          NaN   NaN
        2006-01-01      NaN          NaN   NaN
        2006-02-01      NaN          NaN   NaN
        2006-03-01      NaN          NaN   NaN
        2006-04-01      NaN          NaN   NaN
        2006-05-01      NaN          NaN   NaN
        2006-06-01      NaN          NaN   NaN
        2006-07-01      NaN          NaN   NaN
        2006-08-01      NaN          NaN   NaN
        2006-09-01      NaN          NaN   NaN
        2006-10-01      NaN          NaN   NaN
        2006-11-01      NaN          NaN   NaN
        2006-12-01      NaN          NaN   NaN
        2007-01-01      NaN          NaN   NaN
        2007-02-01      NaN          NaN   NaN
        2007-03-01      NaN          NaN   NaN
        2007-04-01        2           30    14
        2007-05-01        2           32    16
        2007-06-01        2           36    19
        2007-07-01        2           36    19
        2007-08-01        2           36    19
        2007-09-01        2           36    19
        2007-10-01        2           36    19
        2007-11-01        2           36    19
        2007-12-01        2           36    19
</snippet></ROW><ROW><id>19530555</id><snippet>sCheck == True</snippet></ROW><ROW><id>19530555</id><snippet>return</snippet></ROW><ROW><id>19530555</id><snippet>return</snippet></ROW><ROW><id>19530555</id><snippet>None</snippet></ROW><ROW><id>19530555</id><snippet>return falseChecker(binList, r, c, size)
</snippet></ROW><ROW><id>19530638</id><snippet>&gt;&gt;&gt; lst = [['id', 'sub type', 'type'], ['1', 'apples', 'fruit'], ['15', 'orange', 'fruit'], ['3', 'corn', 'vegtable']]
&gt;&gt;&gt; [x[1] for x in lst]
['sub type', 'apples', 'orange', 'corn']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19530672</id><snippet>conda update sympy</snippet></ROW><ROW><id>19530672</id><snippet>(T.inv()*T).expand()</snippet></ROW><ROW><id>19530672</id><snippet>I</snippet></ROW><ROW><id>19530672</id><snippet>j</snippet></ROW><ROW><id>19530691</id><snippet>x = [random.random() for r in xrange(1000)]
num_bins = 50
counts, bins = np.histogram(x, bins=num_bins)
bins = bins[:-1] + (bins[1] - bins[0])/2
probs = counts/float(counts.sum())
print probs.sum() # 1.0
plt.bar(bins, probs, 1.0/num_bins)
plt.show()
</snippet></ROW><ROW><id>19530808</id><snippet>def clean_commas(text):
    return re.sub(r' *,[ ,]*', ',', text).strip(',')
</snippet></ROW><ROW><id>19530808</id><snippet>strip</snippet></ROW><ROW><id>19530808</id><snippet>&gt;&gt;&gt; clean_commas("a,,,,b")
'a,b'
&gt;&gt;&gt; clean_commas(" , ,a, b,,  , ,,  ,c,d  e , f  ,, ,") # spaces internal to "d  e" kept
'a,b,c,d  e,f'
</snippet></ROW><ROW><id>19530808</id><snippet>def clean_commas(text):
    return ','.join(filter(None, (s.strip() for s in text.split(','))))
</snippet></ROW><ROW><id>19530808</id><snippet>filter(None, ...)</snippet></ROW><ROW><id>19530808</id><snippet>if s.strip()</snippet></ROW><ROW><id>19530808</id><snippet>','.join</snippet></ROW><ROW><id>19530987</id><snippet>sqlite3</snippet></ROW><ROW><id>19531014</id><snippet>string</snippet></ROW><ROW><id>19531014</id><snippet>string = '123 abc'
</snippet></ROW><ROW><id>19531014</id><snippet>list()</snippet></ROW><ROW><id>19531014</id><snippet>lst = ['2','5','11']
</snippet></ROW><ROW><id>19531014</id><snippet>&gt;&gt;&gt; print len(lst)
3
</snippet></ROW><ROW><id>19531014</id><snippet>&gt;&gt;&gt; tl1 = "2, 5, 11"
&gt;&gt;&gt; print tl1.split(',')
['2','5','11']
</snippet></ROW><ROW><id>19531014</id><snippet>len()</snippet></ROW><ROW><id>19531054</id><snippet>pylab.hold(False) # clears graph
pylab.hold(True) # restores to state you want
</snippet></ROW><ROW><id>19531054</id><snippet>pylab.save(...)
pylab.close()
</snippet></ROW><ROW><id>19531054</id><snippet>show</snippet></ROW><ROW><id>19531054</id><snippet>close</snippet></ROW><ROW><id>19531073</id><snippet>&gt;&gt;&gt; ts = (("Jackson",10,12,"A"),
...       ("Ryan",10,20,"A"),
...       ("Michael",10,12,"B"),
...       ("Andrew",10,20,"B"),
...       ("McKensie",10,12,"C"),
...       ("Alex",10,20,"D"))
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import operator
&gt;&gt;&gt;
&gt;&gt;&gt; by_class = operator.itemgetter(3)
&gt;&gt;&gt;
&gt;&gt;&gt; tuple_grps = [list(grp) for key, grp in itertools.groupby(sorted(ts, key=by_class), key=by_class)]
&gt;&gt;&gt; tuple_grps
[[('Jackson', 10, 12, 'A'), ('Ryan', 10, 20, 'A')],
 [('Michael', 10, 12, 'B'), ('Andrew', 10, 20, 'B')],
 [('McKensie', 10, 12, 'C')],
 [('Alex', 10, 20, 'D')]]
</snippet></ROW><ROW><id>19531073</id><snippet>itertools.product</snippet></ROW><ROW><id>19531073</id><snippet>&gt;&gt;&gt; for xs in itertools.product(*tuple_grps):
...     print(xs)
...
(('Jackson', 10, 12, 'A'), ('Michael', 10, 12, 'B'), ('McKensie', 10, 12, 'C'), ('Alex', 10, 20, 'D'))
(('Jackson', 10, 12, 'A'), ('Andrew', 10, 20, 'B'), ('McKensie', 10, 12, 'C'), ('Alex', 10, 20, 'D'))
(('Ryan', 10, 20, 'A'), ('Michael', 10, 12, 'B'), ('McKensie', 10, 12, 'C'), ('Alex', 10, 20, 'D'))
(('Ryan', 10, 20, 'A'), ('Andrew', 10, 20, 'B'), ('McKensie', 10, 12, 'C'), ('Alex', 10, 20, 'D'))
</snippet></ROW><ROW><id>19531073</id><snippet>&gt;&gt;&gt; for i in range(1, len(tuple_grps)+1):
...     for xs in itertools.combinations(tuple_grps, i):
...         for ys in itertools.product(*xs):
...             print(ys)
...
(('Jackson', 10, 12, 'A'),)
(('Ryan', 10, 20, 'A'),)
(('Michael', 10, 12, 'B'),)
(('Andrew', 10, 20, 'B'),)
(('McKensie', 10, 12, 'C'),)
(('Alex', 10, 20, 'D'),)
(('Jackson', 10, 12, 'A'), ('Michael', 10, 12, 'B'))
(('Jackson', 10, 12, 'A'), ('Andrew', 10, 20, 'B'))
(('Ryan', 10, 20, 'A'), ('Michael', 10, 12, 'B'))
(('Ryan', 10, 20, 'A'), ('Andrew', 10, 20, 'B'))
...
(('Ryan', 10, 20, 'A'), ('Andrew', 10, 20, 'B'), ('McKensie', 10, 12, 'C'), ('Alex', 10, 20, 'D'))
</snippet></ROW><ROW><id>19531252</id><snippet>count = some_queryset \
    .filter( Q(related__value__gte=1) &amp; Q(related__value__lt=4) ).count()  # This should work also without using Q()
</snippet></ROW><ROW><id>19531252</id><snippet>sums = []

for i in range(1,4):

    sums.append(
        QUERYSET.filter( related__value = i ).count() 
    )

print sums # will show you a list of sums of the values you want                
</snippet></ROW><ROW><id>19531265</id><snippet> self.rect.move_ip(0, 100)
</snippet></ROW><ROW><id>19531265</id><snippet>(0,100)</snippet></ROW><ROW><id>19531275</id><snippet>displayPerson</snippet></ROW><ROW><id>19531275</id><snippet>displayPerson</snippet></ROW><ROW><id>19531275</id><snippet>lower</snippet></ROW><ROW><id>19531275</id><snippet>lower</snippet></ROW><ROW><id>19531275</id><snippet>def lowercasewrapper(func):
    def wrapper(*args, **kwargs):
        # Get initial result of your function.
        initial_tuple = func(*args, **kwargs)
        # Create a new tuple consisting of each member of the
        # initial tuple, converted to lower case.
        new_tuple = tuple([x.lower() for x in initial_tuple])
        return new_tuple
    return wrapper
</snippet></ROW><ROW><id>19531475</id><snippet>%PATH%</snippet></ROW><ROW><id>19531475</id><snippet>python</snippet></ROW><ROW><id>19531475</id><snippet>py.bat</snippet></ROW><ROW><id>19531475</id><snippet>\python27\python.exe %1 %2 %3 %4 %5 %6 %7 %8 %9
</snippet></ROW><ROW><id>19531475</id><snippet>py</snippet></ROW><ROW><id>19531475</id><snippet>py3.bat</snippet></ROW><ROW><id>19531475</id><snippet>.bat</snippet></ROW><ROW><id>19531475</id><snippet>py.bat</snippet></ROW><ROW><id>19531475</id><snippet>py3.bat</snippet></ROW><ROW><id>19531475</id><snippet>py.bat</snippet></ROW><ROW><id>19531475</id><snippet>py3.bat</snippet></ROW><ROW><id>19531475</id><snippet>py.bat</snippet></ROW><ROW><id>19531475</id><snippet>py</snippet></ROW><ROW><id>19531546</id><snippet>binList[r][c]</snippet></ROW><ROW><id>19531546</id><snippet>r</snippet></ROW><ROW><id>19531546</id><snippet>c</snippet></ROW><ROW><id>19531546</id><snippet>binList[x][y]</snippet></ROW><ROW><id>19531546</id><snippet>x</snippet></ROW><ROW><id>19531546</id><snippet>y</snippet></ROW><ROW><id>19531546</id><snippet>binList[y][x]</snippet></ROW><ROW><id>19531546</id><snippet>r</snippet></ROW><ROW><id>19531546</id><snippet>c</snippet></ROW><ROW><id>19531546</id><snippet>r</snippet></ROW><ROW><id>19531546</id><snippet>for</snippet></ROW><ROW><id>19531546</id><snippet>r</snippet></ROW><ROW><id>19531546</id><snippet>c</snippet></ROW><ROW><id>19531546</id><snippet>while</snippet></ROW><ROW><id>19531546</id><snippet>return</snippet></ROW><ROW><id>19531676</id><snippet>hasht = \
{
    "A" : ["B", "D", "E"],
    "B" : ["C"],
    "C" : ["D", "E"], 
    "D" : ["C", "E"], 
    "E" : ["B"]
}

def recursive(start, finish):
    paths=[]
    def recursive_helper(path, finish):
        for i in hasht[path[-1]]:
            if i == finish:
                paths.append(path + [i])
                continue
            else:
                recursive_helper(path + [i], finish)
    recursive_helper([start], finish)
    return paths

print recursive("C", "C")
</snippet></ROW><ROW><id>19531776</id><snippet>return</snippet></ROW><ROW><id>19531776</id><snippet>break</snippet></ROW><ROW><id>19531776</id><snippet>while a:
    print('hi')

    a = False
    if not a:
        break

    print('bye')
</snippet></ROW><ROW><id>19531776</id><snippet>return</snippet></ROW><ROW><id>19531776</id><snippet>return True</snippet></ROW><ROW><id>19531776</id><snippet>break</snippet></ROW><ROW><id>19531925</id><snippet>raw_input</snippet></ROW><ROW><id>19531925</id><snippet>input</snippet></ROW><ROW><id>19531925</id><snippet># We assume we already have sword, fists, and stern_glare objects
# representing weapons.
weapons = {'sword': sword, 'fists': fists, 'stern glare': stern_glare}

# Prompt for a choice, and keep prompting until you get a valid choice.
# You'll probably want a more user-friendly prompt.
valid_choice = False
while not valid_choice:
    weapon_choice = raw_input('Select your weapon')
    valid_choice = weapon_choice in weapons

# Create the character.
dean = Char('Dean', weapons[weapon_choice])
</snippet></ROW><ROW><id>19531939</id><snippet>exec</snippet></ROW><ROW><id>19531939</id><snippet>class employee:
    pass

# Some multiline-function.
def whatever(self, a, b):
    c = a + b
    return c

e = employee()

# Make `whatever` an `employee` method with name "add".
setattr(employee, "add", whatever)
print e.add(2, 9)
</snippet></ROW><ROW><id>19531939</id><snippet>exec</snippet></ROW><ROW><id>19531939</id><snippet>e.add</snippet></ROW><ROW><id>19531939</id><snippet>whatever</snippet></ROW><ROW><id>19531939</id><snippet>whatever.__name__ = "add"
</snippet></ROW><ROW><id>19531939</id><snippet>class Compensation:
    def bonus(self, a):
        return 10000 + a
    def salary(self):
        return 20000
    def stack(self, a=2, b=3):
        return a+b

class employee:
    def __init__(self):
        self.comp = Compensation()


e = employee()

for name in "bonus", "salary", "stack":
    def outer(name):
        def f(self, *args, **kw):
            return getattr(self.comp, name)(*args, **kw)
        f.__name__ = name
        return f
    setattr(employee, name, outer(name))

print e.bonus(9)
print e.salary()
print e.stack(b="def", a="abc")
</snippet></ROW><ROW><id>19531939</id><snippet>10009
20000
abcdef
</snippet></ROW><ROW><id>19531964</id><snippet>cur.execute('INSERT INTO TWITTER_HANDLE (twitter_handle) VALUES(?)', to_db)
</snippet></ROW><ROW><id>19531964</id><snippet>?</snippet></ROW><ROW><id>19531964</id><snippet>to_db</snippet></ROW><ROW><id>19532246</id><snippet>    pygame.transform.rotate(surface, angle)
</snippet></ROW><ROW><id>19532246</id><snippet>    screen = pygame.display.set_mode((640,480))
    surf = pygame.image.load("/home/image.jpeg").convert()
    while True:
       newsurf = pygame.transform.rotate(surf, -90)
       screen.blit(newsurf, (100,100))
       pygame.display.flip()
       time.sleep(2)
</snippet></ROW><ROW><id>19532348</id><snippet>p2</snippet></ROW><ROW><id>19532348</id><snippet>p2</snippet></ROW><ROW><id>19532348</id><snippet>printf("%p\n", (void *) *p2);
</snippet></ROW><ROW><id>19532727</id><snippet>br=mechanize.Browser()</snippet></ROW><ROW><id>19532727</id><snippet>r=br.open(url)</snippet></ROW><ROW><id>19532727</id><snippet>html=r.read()</snippet></ROW><ROW><id>19532727</id><snippet>soup=BeautifulSoup(html)</snippet></ROW><ROW><id>19532727</id><snippet>soup.findAll()</snippet></ROW><ROW><id>19532727</id><snippet>url_dict=shelve.open(html_filename)
#opens webpage  
r=br.open(first_url)
for i in range(1,20):
    #navigates upper browser to next page for non-first-pages
    if (i !=1):
        r=br.open(first_url+str(i)+'_p/')
    #collects list of urls to be navigated by sr
    html=r.read()
    soup=BeautifulSoup(html)
    frames=soup.find_all("a",{"class":br_class})#br_class is defined globally
    time.sleep(1)
    for item in frames:
        url_suffix=item['href']
        full_url=url_prefix+url_suffix
        full_url=full_url.encode('ascii','ignore')
        if str(full_url) not in url_dict:
            url_dict[str(full_url)]=get_information(full_url,sr)
        time.sleep(1)
</snippet></ROW><ROW><id>19532727</id><snippet>def parse_data():
    data=shelve.open(html_filename)
    with open(out_file,'w') as out_handle:
        line = '\t'
        for item in header_list:
            line=line+item+'\t'
        out_handle.write(line)
        for url in data:
            line=""
            for item in header_list:
                line=line+data[item]+'\t'
                out_handle.write(line)
    print("Done writing data")
    data.close()
</snippet></ROW><ROW><id>19532727</id><snippet>python [filename]</snippet></ROW><ROW><id>19532852</id><snippet>python-twitter</snippet></ROW><ROW><id>19532916</id><snippet>float</snippet></ROW><ROW><id>19532916</id><snippet>int</snippet></ROW><ROW><id>19532916</id><snippet>decimal</snippet></ROW><ROW><id>19532916</id><snippet>&gt;&gt;&gt; int(decimal.Decimal('6E+007'))
60000000
</snippet></ROW><ROW><id>19532916</id><snippet>float</snippet></ROW><ROW><id>19532916</id><snippet>int</snippet></ROW><ROW><id>19532916</id><snippet>&gt;&gt;&gt; int(float('1e23'))
99999999999999991611392L
&gt;&gt;&gt; int(decimal.Decimal('1e23'))
100000000000000000000000L
</snippet></ROW><ROW><id>19532918</id><snippet>pip uninstall Beaver
</snippet></ROW><ROW><id>19532997</id><snippet>PythonProg1 = Popen(...
</snippet></ROW><ROW><id>19532997</id><snippet>PythonProg = []
PythonProg.add(Popen(...))
</snippet></ROW><ROW><id>19533025</id><snippet>is_anonymous()</snippet></ROW><ROW><id>19533025</id><snippet>is_authenticated()</snippet></ROW><ROW><id>19533025</id><snippet>current_user</snippet></ROW><ROW><id>19533025</id><snippet>AnonymousUser</snippet></ROW><ROW><id>19533025</id><snippet>is_authenticated()</snippet></ROW><ROW><id>19533025</id><snippet>is_active()</snippet></ROW><ROW><id>19533025</id><snippet>False</snippet></ROW><ROW><id>19533025</id><snippet>is_anonymous()</snippet></ROW><ROW><id>19533025</id><snippet>True</snippet></ROW><ROW><id>19533025</id><snippet>is_active()</snippet></ROW><ROW><id>19533025</id><snippet>True</snippet></ROW><ROW><id>19533025</id><snippet>False</snippet></ROW><ROW><id>19533125</id><snippet>for x in range(1,15):
    for y in range(1,15):
        if tag1 == tag2:
            snps += 1
if syn == 0:
    something
elif syn == 1:
    something else
</snippet></ROW><ROW><id>19533360</id><snippet>ret = evenrow(TwoDArray)
if ret % 2 == 0:
    print('Total Value: %d\nEven or Odd: Even' % ret)
else:
    print('Total Value: %d\nEven or Odd: Odd' % ret)
</snippet></ROW><ROW><id>19533360</id><snippet>ret = evenrow(TwoDArray)
print('Total Value: %d\nEven or Odd: %s' % (ret, 'Odd' if ret % 2 else 'Even'))
</snippet></ROW><ROW><id>19533360</id><snippet>evenrow()</snippet></ROW><ROW><id>19533899</id><snippet>class DerivedClass(BaseClassName):</snippet></ROW><ROW><id>19533899</id><snippet>run</snippet></ROW><ROW><id>19533899</id><snippet>run</snippet></ROW><ROW><id>19533899</id><snippet>ApplicationCommand</snippet></ROW><ROW><id>19533899</id><snippet>WindowCommand</snippet></ROW><ROW><id>19533899</id><snippet>TextCommand</snippet></ROW><ROW><id>19533899</id><snippet>edit</snippet></ROW><ROW><id>19533899</id><snippet>ApplicationCommand</snippet></ROW><ROW><id>19533899</id><snippet>sublime.run_command('application_command_name')</snippet></ROW><ROW><id>19533899</id><snippet>run_command</snippet></ROW><ROW><id>19533899</id><snippet>WindowCommand</snippet></ROW><ROW><id>19533899</id><snippet>window.run_command('window_command_name')</snippet></ROW><ROW><id>19533899</id><snippet>run_command</snippet></ROW><ROW><id>19533899</id><snippet>sublime.Window</snippet></ROW><ROW><id>19533899</id><snippet>TextCommand</snippet></ROW><ROW><id>19533899</id><snippet>view.run_command('text_command_name')</snippet></ROW><ROW><id>19533899</id><snippet>run_command</snippet></ROW><ROW><id>19533899</id><snippet>sublime.View</snippet></ROW><ROW><id>19533899</id><snippet>import sublime, sublime_plugin

class TestApplicationCommand(sublime_plugin.ApplicationCommand):
    def run(self):
        print("running TestApplicationCommand")


import sublime, sublime_plugin

class TestWindowCommand(sublime_plugin.WindowCommand):
    def run(self):
        print("running TestWindowCommand")


import sublime, sublime_plugin

class TestTextCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        print("running TestTextCommand")
</snippet></ROW><ROW><id>19533899</id><snippet>&gt;&gt;&gt; sublime.run_command('test_application')
running TestApplicationCommand
&gt;&gt;&gt; window.run_command('test_window')
running TestWindowCommand
&gt;&gt;&gt; view.run_command('test_text')
running TestTextCommand
</snippet></ROW><ROW><id>19533899</id><snippet>import sublime, sublime_plugin

class TestApplicationCommand(sublime_plugin.ApplicationCommand):
    def run(self, arg1, arg2):
        print("running TestApplicationCommand")
        print("arg1: " + arg1)
        print("arg2: " + arg2)


import sublime, sublime_plugin

class TestWindowCommand(sublime_plugin.WindowCommand):
    def run(self, arg1, arg2):
        print("running TestWindowCommand")
        print("arg1: " + arg1)
        print("arg2: " + arg2)


import sublime, sublime_plugin

class TestTextCommand(sublime_plugin.TextCommand):
    def run(self, edit, arg1, arg2):
        print("running TestTextCommand")
        print("arg1: " + arg1)
        print("arg2: " + arg2)
</snippet></ROW><ROW><id>19533899</id><snippet>&gt;&gt;&gt; sublime.run_command('test_application', {'arg1' : '1', 'arg2' : '2'})
running TestApplicationCommand
arg1: 1
arg2: 2
&gt;&gt;&gt; window.run_command('test_window', {'arg1' : '1', 'arg2' : '2'})
running TestWindowCommand
arg1: 1
arg2: 2
&gt;&gt;&gt; view.run_command('test_text', {'arg1' : '1', 'arg2' : '2'})
running TestTextCommand
arg1: 1
arg2: 2
</snippet></ROW><ROW><id>19534248</id><snippet>i</snippet></ROW><ROW><id>19534248</id><snippet>i</snippet></ROW><ROW><id>19534248</id><snippet>In [10]: import numpy as np

In [11]: arr = np.arange(1, 10)

In [12]: i = 3

In [13]: np.prod(arr[:i]) * np.prod(arr[i+1:])
Out[13]: 90720
</snippet></ROW><ROW><id>19534248</id><snippet>i</snippet></ROW><ROW><id>19534285</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>19534285</id><snippet>export PYTHONSTARTUP=$HOME/myproject/.pystartup
python ~/myproject/start.py

export PYTHONSTARTUP=$HOME/myotherproject/.pystartup
python ~/myotherproject/start.py
</snippet></ROW><ROW><id>19534285</id><snippet>#!/bin/sh
# filename: workon.sh
export PYTHONSTARTUP=$HOME/myproject/.pystartup
python ~/myproject/start.py
</snippet></ROW><ROW><id>19534285</id><snippet>./workon.sh
</snippet></ROW><ROW><id>19534320</id><snippet>self</snippet></ROW><ROW><id>19534320</id><snippet>self.window.active_view()</snippet></ROW><ROW><id>19534722</id><snippet>SETX</snippet></ROW><ROW><id>19534722</id><snippet>MyComputer&gt;Properties&gt;Advanced&gt;Environment Variables</snippet></ROW><ROW><id>19534919</id><snippet>command</snippet></ROW><ROW><id>19534919</id><snippet>from Tkinter import *

def show_values(value=None):
    print s1.get(), s2.get()

root=Tk()
s1 = Scale(root, from_=0, to=42, tickinterval=8, command=show_values)
#                                                ^^^^^^^^^^^^^^^^^^^
s1.set(19)
s1.pack()
s2 = Scale(root, from_=0, to=200, length=600, tickinterval=10, orient=HORIZONTAL,
           command=show_values) # &lt;---
s2.set(23)
s2.pack()
Button(root, text='Show', command=show_values).pack()
root.mainloop()
</snippet></ROW><ROW><id>19534919</id><snippet>from Tkinter import *
import time
import threading

class ScaleValue:
    def __init__(self):
        self.value1 = None
        self.value2 = None

def tkinter_loop(scale):
    root=Tk()
    s1 = Scale(root, from_=0, to=42, tickinterval=8, command=lambda v: setattr(scale, 'value1', v))
    s1.set(19)
    s1.pack()
    s2 = Scale(root, from_=0, to=200, length=600, tickinterval=10, orient=HORIZONTAL, command=lambda v: setattr(scale, 'value2', v))
    s2.set(23)
    s2.pack()
    root.mainloop()

scale = ScaleValue()
threading.Thread(target=tkinter_loop, args=(scale,)).start()

# ROP
while 1:
    time.sleep(1)
    print scale.value1, scale.value2
</snippet></ROW><ROW><id>19534974</id><snippet>print(" ".join(letter if letter in found else '_' for letter in word))
</snippet></ROW><ROW><id>19534974</id><snippet>def draw_man(level):
    parts=['------------', '| |', '| O', '| / |', '| |', '| / |', '|', '|']
    for line in parts[:level]:
        print(line)
    return level &lt;= len(parts) # This return value indicates if we have reached the limit (lost) or not (yet).
</snippet></ROW><ROW><id>19535241</id><snippet>set2</snippet></ROW><ROW><id>19535241</id><snippet>set1</snippet></ROW><ROW><id>19535241</id><snippet>set1['PLSAM'] = set2['PLSAM']
</snippet></ROW><ROW><id>19535243</id><snippet>open</snippet></ROW><ROW><id>19535243</id><snippet>r</snippet></ROW><ROW><id>19535243</id><snippet>read</snippet></ROW><ROW><id>19535243</id><snippet>r</snippet></ROW><ROW><id>19535243</id><snippet>open</snippet></ROW><ROW><id>19535243</id><snippet>f</snippet></ROW><ROW><id>19535243</id><snippet>f</snippet></ROW><ROW><id>19535243</id><snippet>f</snippet></ROW><ROW><id>19535243</id><snippet>for item in var.split()</snippet></ROW><ROW><id>19535243</id><snippet>f</snippet></ROW><ROW><id>19535243</id><snippet>if != 'None'</snippet></ROW><ROW><id>19535243</id><snippet>"None"</snippet></ROW><ROW><id>19535243</id><snippet>float(item)</snippet></ROW><ROW><id>19535243</id><snippet>with open('targe_file.txt') as f:
    final_list = [float(item) for var in f for item in var.split() if item != 'None']  # None is a string in this instance.

print final_list
</snippet></ROW><ROW><id>19535243</id><snippet>mean = sum(final_list) / len(final_list)
</snippet></ROW><ROW><id>19535243</id><snippet>sum</snippet></ROW><ROW><id>19535243</id><snippet>sum</snippet></ROW><ROW><id>19535243</id><snippet>list</snippet></ROW><ROW><id>19535243</id><snippet>tuple</snippet></ROW><ROW><id>19535243</id><snippet>len</snippet></ROW><ROW><id>19535611</id><snippet>from mock import patch

class Tests_urls(TestCase):
    @patch('my_app.views.treat_login')
    def test_signin(self, mock_treat_login):
        self.client.post(reverse("login"), {"username":"login", "password":"pwd"})
        self.assert_http_status(url, status, "after a standard login")
        self.assertTrue(mock_treat_login.called)
</snippet></ROW><ROW><id>19535611</id><snippet>request = self.factory.post(
    reverse("login"), {"username":"login", "password":"pwd"})

response = login(request

mock_treat_login.assert_called_once_with(request, "login", "pwd)
</snippet></ROW><ROW><id>19535811</id><snippet>data = """
ID: ID/123456-00000003c
Value2: 1382386949.12
Value3: 00420903237127
Value4: 21

ID: ID/654431-0000000a
Value2: 1382386943.1032
Value3: 004989353474713
Value4: 33"""

myData = {}
for line in data.split("\n"):
    if line:
        key, value = line.split(": ")
        myData.setdefault(key, [])
        myData[key].append(value)

def get_values_of(actualKey):
    return myData[actualKey]

print get_values_of("ID")
print get_values_of("Value2")
print get_values_of("Value3")
print get_values_of("Value4")
</snippet></ROW><ROW><id>19535811</id><snippet>['ID/123456-00000003c', 'ID/654431-0000000a']
['1382386949.12', '1382386943.1032']
['00420903237127', '004989353474713']
['21', '33']
</snippet></ROW><ROW><id>19535853</id><snippet>from threading import Event

class Foo(object):

    def __init__(self):
        # the stop event is initially set to false, use .set() to set it true
        self.stop_event = Event()

    def func(self):
        while not self.stop_event.is_set():
           # your code
</snippet></ROW><ROW><id>19535853</id><snippet>obj</snippet></ROW><ROW><id>19535853</id><snippet>obj.stop_event.set()
</snippet></ROW><ROW><id>19535896</id><snippet>import sys, os, re
import logging

from tornado.ioloop import IOLoop
from tornado.iostream import IOStream
from tornado.tcpserver import TCPServer
</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page2</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page2</snippet></ROW><ROW><id>19535937</id><snippet>page2</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page2</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page2</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page1</snippet></ROW><ROW><id>19535937</id><snippet>page2</snippet></ROW><ROW><id>19535999</id><snippet>-I C:\Python27\include -I C:\Python27\Lib\site-packages\numpy\core\include</snippet></ROW><ROW><id>19536388</id><snippet>repr</snippet></ROW><ROW><id>19536388</id><snippet>str</snippet></ROW><ROW><id>19536388</id><snippet>&gt;&gt;&gt; repr(math.radians(0.000001))
'1.7453292519943295e-08'
&gt;&gt;&gt; str(math.radians(0.000001))
'1.74532925199e-08'
</snippet></ROW><ROW><id>19536388</id><snippet>print</snippet></ROW><ROW><id>19536388</id><snippet>str</snippet></ROW><ROW><id>19536388</id><snippet>repr</snippet></ROW><ROW><id>19536388</id><snippet>None</snippet></ROW><ROW><id>19536412</id><snippet>from django.core.mail import EmailMessage

msg = EmailMessage(
                       'Test',
                       'asdfasdfasdf&lt;br&gt;asdfasfasdfasdf&lt;br&gt;asdfasdfasdf',
                       'sender@example.com',
                       ['receiver@example.com', ]
                  )
msg.content_subtype = "html"
msg.send()
</snippet></ROW><ROW><id>19536718</id><snippet>_name</snippet></ROW><ROW><id>19536718</id><snippet>_inherit</snippet></ROW><ROW><id>19536718</id><snippet>starstream.customers</snippet></ROW><ROW><id>19536718</id><snippet>res.partner</snippet></ROW><ROW><id>19536718</id><snippet>osv.Model</snippet></ROW><ROW><id>19536718</id><snippet>osv.osv</snippet></ROW><ROW><id>19536718</id><snippet>osv.osv</snippet></ROW><ROW><id>19536718</id><snippet>starstream.customers</snippet></ROW><ROW><id>19536718</id><snippet>res.partners</snippet></ROW><ROW><id>19536718</id><snippet>_name</snippet></ROW><ROW><id>19536718</id><snippet>_table</snippet></ROW><ROW><id>19536718</id><snippet>res.partner</snippet></ROW><ROW><id>19537059</id><snippet>g = df.groupby("A").apply(lambda x: pd.concat((x["B"], x["C"])))
k = g.reset_index()
k["i"] = k1.index
k["rn"] = k1.groupby("A")["i"].rank()
k.pivot_table(rows="A", cols="rn", values=0)

# output
# rn   1   2   3   4   5   6
# A                         
# 1   10  12  11  22  20   8
# 2   10  11  10  13 NaN NaN
# 3   14  10 NaN NaN NaN NaN
</snippet></ROW><ROW><id>19537059</id><snippet>g = df.groupby("A").apply(lambda x: pd.concat((x["B"], x["C"])))</snippet></ROW><ROW><id>19537059</id><snippet>df</snippet></ROW><ROW><id>19537059</id><snippet>A</snippet></ROW><ROW><id>19537059</id><snippet>B</snippet></ROW><ROW><id>19537059</id><snippet>C</snippet></ROW><ROW><id>19537059</id><snippet>A   
1  0    10
   1    12
   2    11
   0    22
   1    20
   2     8
2  3    10
   4    11
   3    10
   4    13
3  5    14
   5    10
</snippet></ROW><ROW><id>19537059</id><snippet>k = g.reset_index()</snippet></ROW><ROW><id>19537059</id><snippet>    A  level_1   0
0   1        0  10
1   1        1  12
2   1        2  11
3   1        0  22
4   1        1  20
5   1        2   8
6   2        3  10
7   2        4  11
8   2        3  10
9   2        4  13
10  3        5  14
11  3        5  10
</snippet></ROW><ROW><id>19537059</id><snippet>k["i"] = k1.index</snippet></ROW><ROW><id>19537059</id><snippet>    A  level_1   0   i
0   1        0  10   0
1   1        1  12   1
2   1        2  11   2
3   1        0  22   3
4   1        1  20   4
5   1        2   8   5
6   2        3  10   6
7   2        4  11   7
8   2        3  10   8
9   2        4  13   9
10  3        5  14  10
11  3        5  10  11
</snippet></ROW><ROW><id>19537059</id><snippet>k["rn"] = k1.groupby("A")["i"].rank()</snippet></ROW><ROW><id>19537059</id><snippet>A</snippet></ROW><ROW><id>19537059</id><snippet>row_number() over(partition by A order by i)</snippet></ROW><ROW><id>19537059</id><snippet>    A  level_1   0   i  rn
0   1        0  10   0   1
1   1        1  12   1   2
2   1        2  11   2   3
3   1        0  22   3   4
4   1        1  20   4   5
5   1        2   8   5   6
6   2        3  10   6   1
7   2        4  11   7   2
8   2        3  10   8   3
9   2        4  13   9   4
10  3        5  14  10   1
11  3        5  10  11   2
</snippet></ROW><ROW><id>19537059</id><snippet>k.pivot_table(rows="A", cols="rn", values=0)</snippet></ROW><ROW><id>19537059</id><snippet>rn   1   2   3   4   5   6
A                         
1   10  12  11  22  20   8
2   10  11  10  13 NaN NaN
3   14  10 NaN NaN NaN NaN
</snippet></ROW><ROW><id>19537213</id><snippet>Quaternion</snippet></ROW><ROW><id>19537213</id><snippet>numpy.object</snippet></ROW><ROW><id>19537213</id><snippet>dtype</snippet></ROW><ROW><id>19537213</id><snippet>PyArray_SimpleNew(..., NPY_OBJECT)</snippet></ROW><ROW><id>19537213</id><snippet>Quaternion</snippet></ROW><ROW><id>19537213</id><snippet>Quaternion</snippet></ROW><ROW><id>19537213</id><snippet>Quaternion</snippet></ROW><ROW><id>19537213</id><snippet>PyQuaternion</snippet></ROW><ROW><id>19537213</id><snippet>typedef struct {
    PyObject_HEAD
    Quaternion *q;
}PyQuaternion;

static PyTypeObject PyQuaternion_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                        /*ob_size*/
    "Quaternion",                             /*tp_name*/
    sizeof(PyQuaternion),                     /*tp_basicsize*/
/* ... */
};


static PyObject *
PyQuaternion_new(PyTypeObject *type, PyObject *args, PyObject *kwds){
/* ... */
};

static int 
PyQuaternion_init(PyQuaternion *self, PyObject *args, PyObject *kwds){
/* ... */
};

static void PyQuaternion_dealloc(PyQuaternion *self){
/* ... */
};
</snippet></ROW><ROW><id>19537213</id><snippet>PyQuaternionType</snippet></ROW><ROW><id>19537213</id><snippet>PyQuaternions</snippet></ROW><ROW><id>19537213</id><snippet>Quaternions</snippet></ROW><ROW><id>19537213</id><snippet>static PyObject *
PyQuaternion_New(Quaternion *q){
    PyQuaternion *self;
    self = (PyQuaternion *)PyQuaternion_Type.tp_new(type, NULL, NULL);
    self-&gt;q = q; 
    return (PyObject *)self;
}
</snippet></ROW><ROW><id>19537213</id><snippet>self-&gt;q</snippet></ROW><ROW><id>19537213</id><snippet>PyQuaternion_dealloc</snippet></ROW><ROW><id>19537213</id><snippet>PyQuaternion_dealloc</snippet></ROW><ROW><id>19537213</id><snippet>self-&gt;q</snippet></ROW><ROW><id>19537213</id><snippet>PyQuaternion_New</snippet></ROW><ROW><id>19537213</id><snippet>Quaternion</snippet></ROW><ROW><id>19537213</id><snippet>dtype = numpy.object</snippet></ROW><ROW><id>19537282</id><snippet>from csv import reader
csv_reader = reader(open("C:/text.txt","r"), quotechar="\"")

for row in csv_reader:
    print row

['391788', 'HP Deskjet 3050 scanner always seems to break', "&lt;p&gt;I'm running a Windows 7 64 blah blah blah........ake this work permanently?&lt;/p&gt;\n\n&lt;p&gt;Update: It might have something to do with my computer. It seems to work much better on another computer, windows 7 laptop. Not sure exactly what the deal is, but I'm still looking into it...&lt;/p&gt;\n", 'windows-7 printer hp']
</snippet></ROW><ROW><id>19537630</id><snippet>Person()</snippet></ROW><ROW><id>19537630</id><snippet>firstname</snippet></ROW><ROW><id>19537630</id><snippet>list_of_records = [Person(*line.split()) for line in f]
</snippet></ROW><ROW><id>19537630</id><snippet>&gt;&gt;&gt; '\n'.split()
[]
</snippet></ROW><ROW><id>19537630</id><snippet>Person(*[])</snippet></ROW><ROW><id>19537630</id><snippet>Person()</snippet></ROW><ROW><id>19537630</id><snippet>firstname=None</snippet></ROW><ROW><id>19537630</id><snippet>list_of_records = [Person(*line.split()) for line in f if line.strip()]
</snippet></ROW><ROW><id>19537630</id><snippet>None</snippet></ROW><ROW><id>19537630</id><snippet>def searchFName(self, matchString):
    return bool(self.fname) and matchString.lower() in self.fname.lower()
</snippet></ROW><ROW><id>19537630</id><snippet>bool(self.fname)</snippet></ROW><ROW><id>19537630</id><snippet>False</snippet></ROW><ROW><id>19537630</id><snippet>None</snippet></ROW><ROW><id>19537630</id><snippet>False</snippet></ROW><ROW><id>19537630</id><snippet>&gt;&gt;&gt; p = Person()
&gt;&gt;&gt; p.fname is None
True
&gt;&gt;&gt; p.searchFName('foo')
False
</snippet></ROW><ROW><id>19537635</id><snippet>POST /en_US/hi/search/findhotels/index.htm?WT.bid=Home,,,find_button HTTP/1.1
Host: www3.hilton.com
Connection: keep-alive
Content-Length: 475
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Origin: http://www3.hilton.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Referer: http://www3.hilton.com/en/index.html
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Cookie: mmcore.tst=0.626; ClrCSTO=T; ClrSSID=1382526492268-11812; ClrOSSID=1382526492268-11812; ClrSCD=1382526492268; mmid=-1914085652%7CAQAAAAq0Q+DZtwkAAA%3D%3D; mmcore.pd=-1914085652%7CAQAAAAq0Q+DZtwkAAA%3D%3D; mmcore.srv=ldnvwcgus01; K3R7=3U24QMiCUbjeh65LoEI31TTjisY8czr4zkIUe06gsA4A5lc0bIKrEhQ; GWSESSIONID=qYDpSnSLNFnJ5CrJrwlSWW7CNBHL7vXSMndGmnxghGns1rLjt2lX!-1490734837; __atuvc=1%7C43; mm_pc_HHonorsPoints=false; mm_pers_storage=loggedin%3Ano%7CStayDuration%3A1-2%20nights%7CDaysToBooking%3A0-1%7CSatStay%3Ano%7CChildren%3Ano%7CBrand%3Ahi%7CHHonorsPoints%3Afalse%7CFlexDates%3Afalse%7CPromoCode%3Ano%7Cproperties8%3Ano%7Chotelcode%3Ano; WT_FPC=id=6f7c5181-8354-430b-b943-9bb95bf2c75c:lv=1382490515002:ss=1382490495203
</snippet></ROW><ROW><id>19537635</id><snippet>searchQuery=N.Y.C&amp;arrivalDate=23+Oct+2013&amp;departureDate=24+Oct+2013&amp;_flexibleDates=on&amp;numberOfRooms=1&amp;numberOfAdults%5B0%5D=1&amp;numberOfChildren%5B0%5D=0&amp;numberOfAdults%5B1%5D=1&amp;numberOfChildren%5B1%5D=0&amp;numberOfAdults%5B2%5D=1&amp;numberOfChildren%5B2%5D=0&amp;numberOfAdults%5B3%5D=1&amp;numberOfChildren%5B3%5D=0&amp;promoCode=&amp;groupCode=&amp;corporateId=&amp;_travelAgentRate=on&amp;_aaaRate=on&amp;_aarpRate=on&amp;_seniorRate=on&amp;_governmentRate=on&amp;offerId=&amp;bookButton=false&amp;searchType=ALL&amp;roomKeyEnable=true
</snippet></ROW><ROW><id>19537635</id><snippet>from socket import *
s = socket()

POST = 'searchQuery=N.Y.C&amp;arrivalDate=23+Oct+2013&amp;departureDate=......'

header = ''
header += 'POST /en_US/hi/search/findhotels/index.htm?WT.bid=Home,,,find_button HTTP/1.1\r\n'
header += 'Host: www3.hilton.com\r\n'
header += 'Connection: keep-alive\r\n'
header += 'Content-Length: ' + str(len(POST)) + '\r\n'
header += 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n'
header += 'Origin: http://www3.hilton.com\r\n'
header += 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) \r\n'
header += 'Chrome/30.0.1599.101 Safari/537.36\r\n'
header += 'Content-Type: application/x-www-form-urlencoded\r\n'
header += 'Referer: http://www3.hilton.com/en/index.html\r\n'
header += 'Accept-Encoding: gzip,deflate,sdch\r\n'
header += 'Accept-Language: en-US,en;q=0.8\r\n'
header += '\r\n'

s.connect(('www3.hilton.com', 80))
s.send(header+POST)
print(s.recv(8192))
</snippet></ROW><ROW><id>19537635</id><snippet>POST</snippet></ROW><ROW><id>19537635</id><snippet>urlencode(key)=urlencode(val)&amp;</snippet></ROW><ROW><id>19537635</id><snippet>=</snippet></ROW><ROW><id>19537635</id><snippet>&amp;</snippet></ROW><ROW><id>19538315</id><snippet>minidom.parse()</snippet></ROW><ROW><id>19538315</id><snippet>xml.minidom.parseString()</snippet></ROW><ROW><id>19538315</id><snippet>xmldoc = minidom.parseString(sampleXML)
</snippet></ROW><ROW><id>19538315</id><snippet>xml.minidom</snippet></ROW><ROW><id>19538315</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>19538315</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>19538315</id><snippet>lxml</snippet></ROW><ROW><id>19538445</id><snippet>translation = range(26)
random.shuffle(translation)  # ②
random_string = ''.join(chr(
  translation[random.randint(0, random.randint(1, 25))] + ord('a'))  # ①
  for _dummy in range(1000))
</snippet></ROW><ROW><id>19538445</id><snippet>randint(randint(…))</snippet></ROW><ROW><id>19538445</id><snippet>translation</snippet></ROW><ROW><id>19538445</id><snippet>[5, 18, 22, 16, 3, 20, 2, 4, 19, 24, 9, 21, 12, 15, 7, 0, 25, 11, 14, 17, 10, 8, 13, 6, 1, 23]
</snippet></ROW><ROW><id>19538445</id><snippet>random_string</snippet></ROW><ROW><id>19538445</id><snippet>f = [ 0 ] * 25</snippet></ROW><ROW><id>19538445</id><snippet>for c in random_string: f[ord(c) - ord('a')] += 1</snippet></ROW><ROW><id>19538445</id><snippet>zip(*reversed(sorted(zip(f, range(26)))))[1]</snippet></ROW><ROW><id>19538445</id><snippet>(18, 5, 22, 16, 3, 20, 2, 4, 19, 24, 12, 21, 15, 9, 0, 7, 25, 14, 17, 10, 11, 13, 8, 1, 23, 6)
</snippet></ROW><ROW><id>19538559</id><snippet>usage</snippet></ROW><ROW><id>19538559</id><snippet>usage[3]</snippet></ROW><ROW><id>19538559</id><snippet>usage.percent</snippet></ROW><ROW><id>19538559</id><snippet>psutil.phymem_usage().percent</snippet></ROW><ROW><id>19539002</id><snippet>inlineformset_factory</snippet></ROW><ROW><id>19539075</id><snippet>{% if errors %}
   {% for key, error_list in errors.iteritems %} 
       {{key}} : {{error_list}}
   {% endfor %} 
{% endif %}
</snippet></ROW><ROW><id>19539075</id><snippet>{% if errors %}
   {% for key in errors %} 
       {{key}} : {{errors}}
   {% endfor %} 
{% endif %}
</snippet></ROW><ROW><id>19539075</id><snippet>items</snippet></ROW><ROW><id>19539075</id><snippet>iteritems</snippet></ROW><ROW><id>19539133</id><snippet>data</snippet></ROW><ROW><id>19539133</id><snippet>is_valid()</snippet></ROW><ROW><id>19539133</id><snippet>is_valid()</snippet></ROW><ROW><id>19539133</id><snippet>object</snippet></ROW><ROW><id>19539133</id><snippet>Keyboard</snippet></ROW><ROW><id>19539133</id><snippet>serializer = CommentSerializer(data=data)
serializer.is_valid()
# True
serializer.object
# &lt;Comment object at 0x10633b2d0&gt;
</snippet></ROW><ROW><id>19539248</id><snippet>row[3]</snippet></ROW><ROW><id>19539248</id><snippet>IndexError</snippet></ROW><ROW><id>19539248</id><snippet>cut</snippet></ROW><ROW><id>19539248</id><snippet>row[3]</snippet></ROW><ROW><id>19539248</id><snippet>try:
    print cut[1]
except IndexError:
    print '-- unexpected input --', row[3]
</snippet></ROW><ROW><id>19539248</id><snippet>next()</snippet></ROW><ROW><id>19539248</id><snippet>with open('root_diff.txt', 'rU') as dmr:
    coordinates_tsv = csv.reader(dmr, delimiter='\t')

    next(coordinates_tsv, None)  # skip first row, the header

    for row in coordinates_tsv:
</snippet></ROW><ROW><id>19539248</id><snippet>IndexError</snippet></ROW><ROW><id>19539248</id><snippet>row[3]</snippet></ROW><ROW><id>19539585</id><snippet>n = np.append(n, np.repeat(np.nan, 20))
</snippet></ROW><ROW><id>19539585</id><snippet>np.repeat</snippet></ROW><ROW><id>19539585</id><snippet>np.zeros(20) + np.nan</snippet></ROW><ROW><id>19539585</id><snippet>In [1]: timeit np.zeros(10000) + np.nan
100000 loops, best of 3: 16.1 µs per loop

In [2]: timeit np.repeat(np.nan, 10000)
10000 loops, best of 3: 70.8 µs per loop
</snippet></ROW><ROW><id>19539585</id><snippet>np.append</snippet></ROW><ROW><id>19539585</id><snippet>In [3]: timeit np.append(n, n)
100000 loops, best of 3: 5.56 µs per loop

In [4]: timeit np.hstack((n, n))
100000 loops, best of 3: 7.87 µs per loop
</snippet></ROW><ROW><id>19539585</id><snippet>np.append(n, np.zeros(20) + np.nan)
</snippet></ROW><ROW><id>19539585</id><snippet>In [42]: timeit np.hstack((n, np.zeros(20) + np.nan))
100000 loops, best of 3: 13.2 µs per loop

In [43]: timeit np.append(n, np.repeat(np.nan, 20))
100000 loops, best of 3: 15.4 µs per loop

In [44]: timeit np.append(n, np.zeros(20) + np.nan)
100000 loops, best of 3: 10.5 µs per loop
</snippet></ROW><ROW><id>19540073</id><snippet>fwbmp.write(bytes([data % 256]))
</snippet></ROW><ROW><id>19540073</id><snippet>min()</snippet></ROW><ROW><id>19540073</id><snippet>fwbmp.write(bytes([min(data, 255)]))
</snippet></ROW><ROW><id>19540073</id><snippet>if data &gt; 255:
    fwbmp.write(bytes(divmod(data, 256)))
else:
    fwbmp.write(bytes([data]))
</snippet></ROW><ROW><id>19540073</id><snippet>0x01</snippet></ROW><ROW><id>19540073</id><snippet>0x00</snippet></ROW><ROW><id>19540073</id><snippet>fwbmp.write(bytes(divmod(data, 256)))
</snippet></ROW><ROW><id>19540122</id><snippet>eval()</snippet></ROW><ROW><id>19540122</id><snippet>exec</snippet></ROW><ROW><id>19540292</id><snippet>tstName</snippet></ROW><ROW><id>19540292</id><snippet>btn = Button(..., command=lambda t=tstName: self.test(t))
</snippet></ROW><ROW><id>19540348</id><snippet>lon = sorted(lon)


bc1 = bc[:,0:97]
bc2 = bc[:,97:]

bc = np.hstack((bc2,bc1))
</snippet></ROW><ROW><id>19540447</id><snippet>!</snippet></ROW><ROW><id>19540447</id><snippet>~</snippet></ROW><ROW><id>19540447</id><snippet>sympy.sympify</snippet></ROW><ROW><id>19540447</id><snippet>In [15]: sympy.sympify("(~SE&amp;D&amp;RS)|(SE&amp;SI)")
Out[15]: Or(And(D, Not(SE), RS), And(SE, SI))
</snippet></ROW><ROW><id>19540851</id><snippet>INSTALLED = ['syncronous', 'alternative']  

for mod_name in INSTALLED:
    try: 
        module = importlib.import_module('servicelibrary.simple.' + mod_name)
        Publisher = getattr(module, 'Publisher')

        if Publisher:
            break  # found, what we needed

    except ImportError:
        continue
</snippet></ROW><ROW><id>19541300</id><snippet>txt.get_window_extent()
</snippet></ROW><ROW><id>19541300</id><snippet>txt</snippet></ROW><ROW><id>19541300</id><snippet>plt.text</snippet></ROW><ROW><id>19541300</id><snippet>import matplotlib.pyplot as plt
from matplotlib.transforms import offset_copy

fig = plt.figure()
ax = plt.axes()
txt = plt.text(0.1,0.5,"My text", transform = ax.transAxes)

fig.canvas.draw()

text_bbox = txt.get_window_extent()
transform_for_second_text = offset_copy(ax.transAxes, fig, 
                                        x=text_bbox.width,
                                        units="dots")

plt.text(0.1,0.5, "Second text", transform=transform_for_second_text, color="r")

plt.show()
</snippet></ROW><ROW><id>19541300</id><snippet>fig.canvas.draw()</snippet></ROW><ROW><id>19541519</id><snippet>zip(a, b, c)</snippet></ROW><ROW><id>19541519</id><snippet>x = np.array(*zip(a, b, c))</snippet></ROW><ROW><id>19541658</id><snippet>Pool.map</snippet></ROW><ROW><id>19541658</id><snippet>map</snippet></ROW><ROW><id>19541658</id><snippet>&gt;&gt;&gt; map(lambda x,y: x+y, "ABC", "DEF")
['AD', 'BE', 'CF']
</snippet></ROW><ROW><id>19541658</id><snippet>Pool.map</snippet></ROW><ROW><id>19541658</id><snippet>chunksize</snippet></ROW><ROW><id>19541658</id><snippet>pool.map(lambda (a,b): compare_clusters(a,b), zip(clusters_1, clusters_2))
</snippet></ROW><ROW><id>19541658</id><snippet>pool.map</snippet></ROW><ROW><id>19541658</id><snippet>map</snippet></ROW><ROW><id>19541658</id><snippet>&gt;&gt;&gt; map(lambda (a,b): a+b, zip("ABC", "DEF"))
['AD', 'BE', 'CF']
</snippet></ROW><ROW><id>19541947</id><snippet>A[:,:,None] * C
</snippet></ROW><ROW><id>19541947</id><snippet>None</snippet></ROW><ROW><id>19541947</id><snippet>newaxis</snippet></ROW><ROW><id>19541947</id><snippet>A.reshape(len(A), -1, 1)*C
</snippet></ROW><ROW><id>19541947</id><snippet>array</snippet></ROW><ROW><id>19542073</id><snippet>d</snippet></ROW><ROW><id>19542073</id><snippet>d</snippet></ROW><ROW><id>19542073</id><snippet>def unique_combos(digits, total, smallest=0):
    if digits*9 &lt; total or digits*smallest &gt; total:
        return
    if digits==1:
        yield [total]
        return

    for i in range(smallest, 10):
        for combo in unique_combos(digits-1, total-i, i):
            yield [i]+combo
</snippet></ROW><ROW><id>19542073</id><snippet>import operator
from collections import Counter
from math import factorial
def npermutations(l):
    """From stackoverflow 16453188"""
    num = factorial(len(l))
    mults = Counter(l).values()
    den = reduce(operator.mul, (factorial(v) for v in mults), 1)
    return num / den
</snippet></ROW><ROW><id>19542073</id><snippet>def answer(digits, total):
    n_or_fewer = sum(npermutations(l) for l in unique_combos(digits, total))
    fewer = sum(npermutations(l) for l in unique_combos(digits-1, total))
    print("There are {} {}-digit numbers with digits summing to {}".format(
        n_or_fewer - fewer,
        digits, total))

if __name__=='__main__':
    answer(4,18)
    answer(10,39)
</snippet></ROW><ROW><id>19542073</id><snippet>C:\Temp&gt;digitsum2.py
There are 615 4-digit numbers with digits summing to 18
There are 307100365 10-digit numbers with digits summing to 39
</snippet></ROW><ROW><id>19542073</id><snippet>def smallest_sum(n, digits, first=1):
    """Find the smallest number with 'digits' digits that sum to 'n'
    Returns the value as a list of digits because that's what we need next anyway"""
    k = max(first,n + 9 - 9*digits)
    assert k &lt;= 9, "Impossible values"
    if digits &gt; 1:
            return [k]+smallest_sum(n-k, digits-1, 0)
    return [k]

def all_sums(digits):
    """Find the next string of digits with the same sum.
    We can do this by finding the last non-zero digit and decrementing it
    then incrementing the previous non-nine, and sorting any digits that
    follow it."""
    yield digits
    while True:
        was = list(digits)
        for i in range(len(digits)-1,-1,-1):
            if digits[i] != 0:
                decrement = i
                break
        else:
            return
        for i in range(decrement-1,-1,-1):
            if digits[i] != 9:
                increment = i
                break
        else:
            return
        digits[decrement] -= 1
        digits[increment] += 1
        if increment &lt; len(digits)-2:
            digits[increment+1:] = digits[increment+1:][::-1]
        assert digits &gt; was
        yield digits

def count(num_digits, total):
    try:
        digits = smallest_sum(total, num_digits)
    except AssertionError:
        return 0
    return sum(1 for _ in all_sums(digits))

if __name__=='__main__':
    print(count(4,18))
    print(count(10,39))
</snippet></ROW><ROW><id>19542083</id><snippet>class Fields(ctypes.Structure):
    _pack_ = 1
    _fields_ = [('x', ctypes.c_uint, 21), ('a', ctypes.c_uint, 11)]
</snippet></ROW><ROW><id>19542297</id><snippet>pool.starmap</snippet></ROW><ROW><id>19542297</id><snippet>def do_comparison(tupl):
    x, y = tupl # unpack arguments
    return compare_clusters(x, y)

pool = Pool()
values = pool.map(do_comparison, itertools.combinations(clusters, 2))
condensed_distance_matrix = [1 / float(v) if v != 0 else 10 for v in values]
</snippet></ROW><ROW><id>19542297</id><snippet>for</snippet></ROW><ROW><id>19542297</id><snippet>append</snippet></ROW><ROW><id>19542297</id><snippet>spectra_names</snippet></ROW><ROW><id>19542297</id><snippet>spectra_names = [c.get_names()[0] for c in clusters]
</snippet></ROW><ROW><id>19542974</id><snippet>input()</snippet></ROW><ROW><id>19542974</id><snippet>isinstance(value, int)</snippet></ROW><ROW><id>19542974</id><snippet>False</snippet></ROW><ROW><id>19542974</id><snippet>value = ''
while not value.strip().isdigit():
     value = input("Please enter the value")
</snippet></ROW><ROW><id>19543008</id><snippet>for a in range(0, len(list_a)):
    for b in range(0, len(list_b)):
        sum_foo = float(sum([x[a][b][0] for x in foo]))
        foobar[a][b].append(sum_foo)
</snippet></ROW><ROW><id>19543173</id><snippet>  +---+---+---+---+
  | T | e | s | t |
  +---+---+---+---+
    0   1   2   3   4
-5 -4  -3  -2  -1  
</snippet></ROW><ROW><id>19543173</id><snippet>s[i:j:k]</snippet></ROW><ROW><id>19543173</id><snippet>s</snippet></ROW><ROW><id>19543173</id><snippet>i</snippet></ROW><ROW><id>19543173</id><snippet>j</snippet></ROW><ROW><id>19543173</id><snippet>k</snippet></ROW><ROW><id>19543173</id><snippet>x = i + n*k</snippet></ROW><ROW><id>19543173</id><snippet>0 &lt;= n &lt; (j-i)/k</snippet></ROW><ROW><id>19543173</id><snippet>i</snippet></ROW><ROW><id>19543173</id><snippet>i+k</snippet></ROW><ROW><id>19543173</id><snippet>i+2*k</snippet></ROW><ROW><id>19543173</id><snippet>i+3*k</snippet></ROW><ROW><id>19543173</id><snippet>j</snippet></ROW><ROW><id>19543173</id><snippet>j</snippet></ROW><ROW><id>19543173</id><snippet>i</snippet></ROW><ROW><id>19543173</id><snippet>j</snippet></ROW><ROW><id>19543173</id><snippet>len(s)</snippet></ROW><ROW><id>19543173</id><snippet>len(s)</snippet></ROW><ROW><id>19543173</id><snippet>i</snippet></ROW><ROW><id>19543173</id><snippet>j</snippet></ROW><ROW><id>19543173</id><snippet>None</snippet></ROW><ROW><id>19543173</id><snippet>k</snippet></ROW><ROW><id>19543173</id><snippet>k</snippet></ROW><ROW><id>19543173</id><snippet>k</snippet></ROW><ROW><id>19543173</id><snippet>None</snippet></ROW><ROW><id>19543173</id><snippet>1</snippet></ROW><ROW><id>19543173</id><snippet>i = len(s) - 2 = 2 
j = None = -1 (end for negative strides, *not* len(s) - 1)
k = -1
</snippet></ROW><ROW><id>19543173</id><snippet>j</snippet></ROW><ROW><id>19543173</id><snippet>x0 = i + 0*k = 2
x1 = i + 1*k = 1
x2 = i + 2*k = 0
</snippet></ROW><ROW><id>19543199</id><snippet>replace</snippet></ROW><ROW><id>19543199</id><snippet>final = str(self.lostfeatures).replace('[array([[','').replace(']], dtype=float32)', '')
</snippet></ROW><ROW><id>19543199</id><snippet>numbers = re.findall('(?P&lt;number&gt;\d+\.\d+)', str(self.lostfeatures))
</snippet></ROW><ROW><id>19543199</id><snippet>lostfeatures[0][0]
</snippet></ROW><ROW><id>19543199</id><snippet>lostfeatures[0]</snippet></ROW><ROW><id>19543199</id><snippet>array([[ 1948.97753906, 1058.23937988]]</snippet></ROW><ROW><id>19543199</id><snippet>lostfeatures[0][0]</snippet></ROW><ROW><id>19543199</id><snippet>[1948.97753906, 1058.23937988]</snippet></ROW><ROW><id>19543819</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
&gt;&gt;&gt; dct = {x:[] for x in lst}
&gt;&gt;&gt; for x,y in enumerate(lst, 1):
...     dct[y].append(x)
...
&gt;&gt;&gt; dct
{1: [1, 5, 9], 2: [2, 6, 10], 3: [3, 7, 11], 4: [4, 8, 12]}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19543819</id><snippet>[0, 4, 8]</snippet></ROW><ROW><id>19543819</id><snippet>[1, 5, 9]</snippet></ROW><ROW><id>19543819</id><snippet>enumerate</snippet></ROW><ROW><id>19543819</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19543819</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dct = defaultdict(list)
&gt;&gt;&gt; for x,y in enumerate(lst, 1):
...     dct[y].append(x)
...
&gt;&gt;&gt; dct
{1: [1, 5, 9], 2: [2, 6, 10], 3: [3, 7, 11], 4: [4, 8, 12]}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19544108</id><snippet>float</snippet></ROW><ROW><id>19544108</id><snippet>numpy</snippet></ROW><ROW><id>19544108</id><snippet>ndarray</snippet></ROW><ROW><id>19544108</id><snippet>float</snippet></ROW><ROW><id>19544108</id><snippet>float</snippet></ROW><ROW><id>19544108</id><snippet>float</snippet></ROW><ROW><id>19544108</id><snippet>ndarray</snippet></ROW><ROW><id>19544152</id><snippet>enum</snippet></ROW><ROW><id>19544152</id><snippet>static final</snippet></ROW><ROW><id>19544152</id><snippet>class Role(object):
    class RoleType(object):
        def __init__(self, maxPlayers):
            self.maxPlayers = maxPlayers

    SOLDIER = RoleType(4)
    DEMOMAN = RoleType(2)
    SCOUT = RoleType(4)
    MEDIC = RoleType(2)
</snippet></ROW><ROW><id>19544152</id><snippet>s = Role.SOLDIER
print s.maxPlayers  # Prints 4
</snippet></ROW><ROW><id>19544152</id><snippet>newRole = Role.RoleType(22)  # as an example
</snippet></ROW><ROW><id>19544274</id><snippet>foo.setConsoleLevel(logging.ERROR)
foo.setFileLevel(logging.INFO)
</snippet></ROW><ROW><id>19544297</id><snippet># New object, newscenario passed to constructor
world_scenario = RealWordScenario(newscenario)
# Another new object, now world_scenario is passed to constructor
scheduler = ConcreteRealWorldScheduler(world_scenario)
# Call the method
variable = scheduler.method()
</snippet></ROW><ROW><id>19544436</id><snippet>(str(x) for x in a)</snippet></ROW><ROW><id>19544436</id><snippet>[str(x) for x in a]</snippet></ROW><ROW><id>19544517</id><snippet>packages</snippet></ROW><ROW><id>19544517</id><snippet>packages=['test_pypi','test_pypi.mdl'],</snippet></ROW><ROW><id>19544517</id><snippet>from setuptools import find_packages
my_packages=find_packages()
</snippet></ROW><ROW><id>19544529</id><snippet>def is_subtuple(tup1, tup2):
    '''Return True if all the elements of tup1 are consecutively in tup2.'''
    if len(tup2) &lt; len(tup1): return False
    try:
        offset = tup2.index(tup1[0])
    except ValueError:
        return False
    # This could be wrong if tup1[0] is in tup2, but doesn't start the subtuple.
    # You could solve this by recurring on the rest of tup2 if this is false, but
    # it doesn't apply to your input data.
    return tup1 == tup2[offset:offset+len(tup1)] 
</snippet></ROW><ROW><id>19544529</id><snippet>l</snippet></ROW><ROW><id>19544529</id><snippet>[t for i, t in enumerate(l) if not any(is_subtuple(t, t2) for t2 in l[i+1:])]
</snippet></ROW><ROW><id>19544529</id><snippet>O(n**2)</snippet></ROW><ROW><id>19544582</id><snippet>list.count()</snippet></ROW><ROW><id>19544582</id><snippet>if myList.count('X') == 2:
    print "count is 2"
</snippet></ROW><ROW><id>19544701</id><snippet>format()</snippet></ROW><ROW><id>19544701</id><snippet>&gt;&gt;&gt; format(1234, ',').replace(',', '.') 
'1.234'
&gt;&gt;&gt; format(12345678, ',').replace(',', '.') 
'12.345.678'
</snippet></ROW><ROW><id>19544701</id><snippet>','</snippet></ROW><ROW><id>19544701</id><snippet>str.format()</snippet></ROW><ROW><id>19544701</id><snippet>&gt;&gt;&gt; 'Some label for the value: {:,}'.format(1234).replace(',', '.')
'Some label for the value: 1,234'
</snippet></ROW><ROW><id>19544701</id><snippet>'n'</snippet></ROW><ROW><id>19544701</id><snippet>LC_NUMERIC</snippet></ROW><ROW><id>19544703</id><snippet>F_i = X^2 + a_i Y^2 + b_i X Y cosZ + c_i X Y sinZ
</snippet></ROW><ROW><id>19544703</id><snippet>F_i = a^2 + X_i b^2 + Y_i a b cos(c) + Z_i a b sin(c)
</snippet></ROW><ROW><id>19544703</id><snippet>F</snippet></ROW><ROW><id>19544703</id><snippet>X</snippet></ROW><ROW><id>19544703</id><snippet>Y</snippet></ROW><ROW><id>19544703</id><snippet>Z</snippet></ROW><ROW><id>19544703</id><snippet>F_0, F_1, ... F_i</snippet></ROW><ROW><id>19544703</id><snippet>a^2</snippet></ROW><ROW><id>19544703</id><snippet>b^2</snippet></ROW><ROW><id>19544703</id><snippet>a b cos(c)</snippet></ROW><ROW><id>19544703</id><snippet>a b sin(c)</snippet></ROW><ROW><id>19544703</id><snippet>d = a^2
e = b^2
f = a b cos(c)
g = a b sin(c)
</snippet></ROW><ROW><id>19544703</id><snippet>F_i = d + e X_i + f Y_i + g Z_i</snippet></ROW><ROW><id>19544703</id><snippet>d</snippet></ROW><ROW><id>19544703</id><snippet>e</snippet></ROW><ROW><id>19544703</id><snippet>f</snippet></ROW><ROW><id>19544703</id><snippet>g</snippet></ROW><ROW><id>19544703</id><snippet>a</snippet></ROW><ROW><id>19544703</id><snippet>b</snippet></ROW><ROW><id>19544703</id><snippet>c</snippet></ROW><ROW><id>19544703</id><snippet>a = sqrt(d)
b = sqrt(e)
c = arctan(g/f)
</snippet></ROW><ROW><id>19544703</id><snippet>F_i = d + e X_i + f Y_i + g Z_i
</snippet></ROW><ROW><id>19544703</id><snippet>|F_0|   |1, X_0, Y_0, Z_0|   |d|
|F_1| = |1, X_1, Y_1, Z_1| * |e|
|F_2|   |1, X_2, Y_2, Z_2|   |f|
|F_3|   |1, X_3, Y_3, Z_3|   |g|
</snippet></ROW><ROW><id>19544703</id><snippet>F = G * m</snippet></ROW><ROW><id>19544703</id><snippet>G</snippet></ROW><ROW><id>19544703</id><snippet>m</snippet></ROW><ROW><id>19544703</id><snippet>d</snippet></ROW><ROW><id>19544703</id><snippet>F</snippet></ROW><ROW><id>19544703</id><snippet>def invert(f, x, y, z):
    G = np.vstack([np.ones_like(x), x, y, z]).T
    m, _, _, _ = np.linalg.lstsq(G, f)

    d, e, f, g = m
    a = np.sqrt(d)
    b = np.sqrt(e)
    c = np.arctan2(g, f) # Note that `c` will be in radians, not degrees
    return a, b, c
</snippet></ROW><ROW><id>19544703</id><snippet>scipy.optimize</snippet></ROW><ROW><id>19544703</id><snippet>scipy.optimize</snippet></ROW><ROW><id>19544703</id><snippet>scipy.optimize.curve_fit</snippet></ROW><ROW><id>19544703</id><snippet>scipy.optimize</snippet></ROW><ROW><id>19544703</id><snippet>observed - predicted</snippet></ROW><ROW><id>19544703</id><snippet>scipy.optimize</snippet></ROW><ROW><id>19544703</id><snippet>a=1, b=1000, c=1e-8</snippet></ROW><ROW><id>19544703</id><snippet>scipy.optimize</snippet></ROW><ROW><id>19544703</id><snippet>a</snippet></ROW><ROW><id>19544703</id><snippet>b</snippet></ROW><ROW><id>19544703</id><snippet>c</snippet></ROW><ROW><id>19544703</id><snippet>p0</snippet></ROW><ROW><id>19544703</id><snippet>curve_fit</snippet></ROW><ROW><id>19544703</id><snippet>a, b, c = 1, 1, 1</snippet></ROW><ROW><id>19544703</id><snippet>a, b, c = 3, 2, 1</snippet></ROW><ROW><id>19544703</id><snippet>curve_fit</snippet></ROW><ROW><id>19544703</id><snippet>ndim x npoints</snippet></ROW><ROW><id>19544703</id><snippet>def func(x, y, z, a, b, c):
    f = (a**2
         + x * b**2
         + y * a * b * np.cos(c)
         + z * a * b * np.sin(c))
    return f
</snippet></ROW><ROW><id>19544703</id><snippet>curve_fit</snippet></ROW><ROW><id>19544703</id><snippet>def nonlinear_invert(f, x, y, z):
    def wrapped_func(observation_points, a, b, c):
        x, y, z = observation_points
        return func(x, y, z, a, b, c)

    xdata = np.vstack([x, y, z])
    model, cov = opt.curve_fit(wrapped_func, xdata, f)
    return model
</snippet></ROW><ROW><id>19544703</id><snippet>import numpy as np
import scipy.optimize as opt

def main():
    nobservations = 4
    a, b, c = 3.0, 2.0, 1.0
    f, x, y, z = generate_data(nobservations, a, b, c)

    print 'Linear results (should be {}, {}, {}):'.format(a, b, c)
    print linear_invert(f, x, y, z)

    print 'Non-linear results (should be {}, {}, {}):'.format(a, b, c)
    print nonlinear_invert(f, x, y, z)

def generate_data(nobservations, a, b, c, noise_level=0.01):
    x, y, z = np.random.random((3, nobservations))
    noise = noise_level * np.random.normal(0, noise_level, nobservations)
    f = func(x, y, z, a, b, c) + noise
    return f, x, y, z

def func(x, y, z, a, b, c):
    f = (a**2
         + x * b**2
         + y * a * b * np.cos(c)
         + z * a * b * np.sin(c))
    return f

def linear_invert(f, x, y, z):
    G = np.vstack([np.ones_like(x), x, y, z]).T
    m, _, _, _ = np.linalg.lstsq(G, f)

    d, e, f, g = m
    a = np.sqrt(d)
    b = np.sqrt(e)
    c = np.arctan2(g, f) # Note that `c` will be in radians, not degrees
    return a, b, c

def nonlinear_invert(f, x, y, z):
    # "curve_fit" expects the function to take a slightly different form...
    def wrapped_func(observation_points, a, b, c):
        x, y, z = observation_points
        return func(x, y, z, a, b, c)

    xdata = np.vstack([x, y, z])
    model, cov = opt.curve_fit(wrapped_func, xdata, f)
    return model

main()
</snippet></ROW><ROW><id>19544766</id><snippet>from collections import OrderedDict
my_list = [[1, 2, 3, 1], [2, 3, 1, 2], [3, 2, 1, 3]]

seen_combos = OrderedDict()
for sublist in my_list:
    unique_elements = frozenset(sublist)
    if unique_elements not in seen_combos:
        seen_combos[unique_elements] = sublist
my_list = seen_combos.values()
</snippet></ROW><ROW><id>19544983</id><snippet>import re
pattern = re.compile("&gt; &gt;.+&lt;br")
print pattern.findall(string)
#  --------------------------------text----------------------
</snippet></ROW><ROW><id>19545046</id><snippet>__import__</snippet></ROW><ROW><id>19545046</id><snippet>importlib</snippet></ROW><ROW><id>19545046</id><snippet>import importlib
settings = importlib.import_module('conf.%s' % i)
</snippet></ROW><ROW><id>19545104</id><snippet>sorted</snippet></ROW><ROW><id>19545104</id><snippet>&gt;&gt;&gt; codes = sorted( d['code'] for d in L )
&gt;&gt;&gt; codes
['AF', 'AM', 'UE']
</snippet></ROW><ROW><id>19545104</id><snippet>sorted</snippet></ROW><ROW><id>19545104</id><snippet>codes = sorted([ d['code'] for d in L ])
</snippet></ROW><ROW><id>19545133</id><snippet>pattern = r'(?&lt;=\n\n\*)[^*]*(?=\*)'
</snippet></ROW><ROW><id>19545133</id><snippet>import re
print re.findall(r'(?&lt;=\n\n\*)[^*]*(?=\*)','\n\n*text here, can be any spaces, etc. etc.*')
</snippet></ROW><ROW><id>19545133</id><snippet>pattern = r'(?&lt;=\n\n)\*[^*]*\*'
</snippet></ROW><ROW><id>19545175</id><snippet>import email
msg = email.message_from_string(raw_email)

print msg['From']
print msg.get_payload(decode=True)
</snippet></ROW><ROW><id>19545175</id><snippet>msg.is_multipart()</snippet></ROW><ROW><id>19545175</id><snippet>msg.get_payload()</snippet></ROW><ROW><id>19545175</id><snippet>mail.fetch</snippet></ROW><ROW><id>19545175</id><snippet>mail.fetch(latest_email_id, "(BODY[HEADER.FIELDS (FROM)])")
</snippet></ROW><ROW><id>19545175</id><snippet>"(UID BODY[TEXT])"</snippet></ROW><ROW><id>19545191</id><snippet>my.cnf</snippet></ROW><ROW><id>19545191</id><snippet>innodb_data_file_path = ibdata1:10M:autoextend:max:512M
</snippet></ROW><ROW><id>19545473</id><snippet>ln -s  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11 /usr/local/include/X11
sudo pip install pil
</snippet></ROW><ROW><id>19545473</id><snippet>xcode-select --install</snippet></ROW><ROW><id>19545563</id><snippet>&lt;exception_obj&gt;.args[0]</snippet></ROW><ROW><id>19545563</id><snippet>'550 /no-such-dir: No such file or directory'</snippet></ROW><ROW><id>19545563</id><snippet>&lt;exception_obj&gt;.args[0][:3]</snippet></ROW><ROW><id>19545563</id><snippet>import ftplib
ftp = ftplib.FTP('ftp.hq.nasa.gov')
ftp.login('anonymous', 'user@example.com')
try:
    ftp.cwd('/no-such-dir')
except ftplib.error_perm as e:
    print('Error {}'.format(e.args[0][:3]))
finally:
    ftp.quit()
</snippet></ROW><ROW><id>19545768</id><snippet>DataFrame</snippet></ROW><ROW><id>19545768</id><snippet>read_csv</snippet></ROW><ROW><id>19545768</id><snippet>d = """
11:24:13,1.518
11:24:13,1.576
11:24:13,1.529
11:24:14,1.529
11:24:14,1.576
11:24:14,1.565
11:24:14,1.553
11:24:15,1.506
11:24:15,1.482
11:24:15,1.541
11:24:15,1.576
11:24:15,1.506
"""

import pandas as pd

# get the data in shape
csvish = map(lambda row: row.split(','), filter(lambda s: s, d.split('\n')))

df = pd.DataFrame(csvish, columns=('time', 'value'))

# convert to sensible types (read_csv can do this implicitly)
df.time = pd.to_datetime(df.time)
df.value = df.value.astype(float)

df.groupby('time').value.mean()
</snippet></ROW><ROW><id>19545768</id><snippet># outputs:

# time
# 2013-10-23 11:24:13    1.54100
# 2013-10-23 11:24:14    1.55575
# 2013-10-23 11:24:15    1.52220
</snippet></ROW><ROW><id>19545768</id><snippet>read_csv</snippet></ROW><ROW><id>19545768</id><snippet>parse_dates</snippet></ROW><ROW><id>19545768</id><snippet>df = pd.read_csv(StringIO.StringIO(d[1:]), header=None, parse_dates=[0])
</snippet></ROW><ROW><id>19545768</id><snippet>DataFrame</snippet></ROW><ROW><id>19545768</id><snippet>np.array</snippet></ROW><ROW><id>19545768</id><snippet>df = pd.DataFrame(np.array([(datetime.datetime.strptime(row[0], "%H:%M:%S"), 
                  row[1]) for row in csvish]), columns=('time', 'value'))
</snippet></ROW><ROW><id>19545792</id><snippet>for</snippet></ROW><ROW><id>19545792</id><snippet>import time

def somecommand(arg):
    1 / 0

def getGsmCode():
    delays = 4, 6,
    for delay in delays:
        try:
            return somecommand('xyz')[0]
        except:
            #print('sleep {}'.format(delay))
            time.sleep(delay)
    return "unknown GSM Operator Error"

print(getGsmCode())
</snippet></ROW><ROW><id>19545917</id><snippet>def __init__(self, node, degree):
</snippet></ROW><ROW><id>19545917</id><snippet>k = Graph(d.keys())
</snippet></ROW><ROW><id>19545917</id><snippet>k = Graph(k, v)
</snippet></ROW><ROW><id>19545938</id><snippet>lang = re.search('^\*+\s*(\[\['
                '((?P&lt;wiki_link&gt;[^]]+?)(\|))?'
                 '(?P&lt;lang_name&gt;.+?)' 
                 '\]\])', line)
</snippet></ROW><ROW><id>19545938</id><snippet>(?P&lt;wiki_link&gt;.+?)</snippet></ROW><ROW><id>19545938</id><snippet>(?P&lt;wiki_link&gt;[^]]+?)</snippet></ROW><ROW><id>19545938</id><snippet>&gt;&gt;&gt; print lang.groupdict()
 {'wiki_link': None, 'lang_name': 'Cilk'}
</snippet></ROW><ROW><id>19546099</id><snippet>[[float(i) for i in j] for j in lst]</snippet></ROW><ROW><id>19546099</id><snippet>[float(i) for i in j]</snippet></ROW><ROW><id>19546099</id><snippet>try</snippet></ROW><ROW><id>19546099</id><snippet>except</snippet></ROW><ROW><id>19546099</id><snippet>1, 2, 34, 56thiswillcrashyourprogramatthemoment, 7, 8, 9</snippet></ROW><ROW><id>19546169</id><snippet>import thirdpartymodule_a
import thirdpartymodule_b

def new_init(self):
    self.a = 43

thirdpartymodule_a.SomeClass.__init__ = new_init

thirdpartymodule_b.dosomething()
</snippet></ROW><ROW><id>19546169</id><snippet>new_init()</snippet></ROW><ROW><id>19546169</id><snippet>old_init = thirdpartymodule_a.SomeClass.__init__
def new_init(self):
    old_init(self)
    self.a = 43
</snippet></ROW><ROW><id>19546222</id><snippet>x</snippet></ROW><ROW><id>19546222</id><snippet>if (x % 2) == 0:
    # x is even
else:
    # x is odd
</snippet></ROW><ROW><id>19546239</id><snippet>from IPy import IP
if '192.168.0.1' in IP('192.168.0.0/30'):
    print "My IP is in the whitelist! Yay!"
</snippet></ROW><ROW><id>19546239</id><snippet>for white_net in myWhiteList:
    if my_ip in white_net:
        print "My IP is in the whitelist! Yay!"
        break
</snippet></ROW><ROW><id>19546239</id><snippet>my_ip = '209.85.128.1'
is_in_whitelist = any([my_ip in white_net for white_net in myWhiteList])
</snippet></ROW><ROW><id>19546264</id><snippet>@app.route('/signup', methods = ['GET', 'POST'])
def signup():

    if g.user is not None and g.user.is_authenticated():
        return redirect(url_for('index'))

    if request.method == 'post':
        captcha_word = session["captcha"]
    else:
        words = open('app/corncob_caps.txt').readlines()
        captcha_word = words[random.randint(1,len(words))]
        session["captcha"] = captcha_word
        captcha_filename = ''.join(random.choice(string.ascii_uppercase + string.digits) for x in range(10)) + '.jpg'
        captcha.gen_captcha(captcha_word.strip(), 'app/os.ttf', 25, 'app/static/' + captcha_filename + '')


    form = SignUpForm(captcha_word)

    if form.validate_on_submit() == False:
        return render_template('signup.html', form = form, filename = captcha_filename)
    else:
        user = User(form.email.data, form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('You have successfully signed up.')
        flash('You may login now.')
        return redirect(url_for('login'))

    return render_template('signup.html', form = form, filename = captcha_filename)
</snippet></ROW><ROW><id>19546332</id><snippet>shelve</snippet></ROW><ROW><id>19546332</id><snippet>import shelve

document_dict = shelve.open('document_dict', writeback=True)

document_dict.update({"doc1": {1:2, 2:10, 10:2, 100: 1},
                      "doc2": {10:2, 20:10, 30:2, 41: 19},
                      "doc3": {1:2, 2:10, 10:2, 100: 1},})

new_dict = {1:2, 2:10, 10:2, 120: 1}
doc = document_dict.get("doc3", {})  # get current value, if any

for item in new_dict:
    doc[item] = doc.get(item, 0) + new_dict[item]   # update version in memory

document_dict["doc3"] = doc  # write modified (or new) entry to disk
document_dict.sync()  #  clear cache

print document_dict

document_dict.close()
</snippet></ROW><ROW><id>19546332</id><snippet>{'doc2': {41: 19, 10: 2, 20: 10, 30: 2},
 'doc3': {120: 1, 1: 4, 2: 20, 100: 1, 10: 4},
 'doc1': {1: 2, 2: 10, 100: 1, 10: 2}}
</snippet></ROW><ROW><id>19546595</id><snippet>#!/usr/local/bin/awk -f 

/topic = / { topic = $NF }    
/ : / { 
    file = topic "___" $1
    system("mkfifo "file)
    print $3 &gt; file
    close(file)
    system("rm "file)
}   
</snippet></ROW><ROW><id>19546595</id><snippet>print</snippet></ROW><ROW><id>19546876</id><snippet>./configure</snippet></ROW><ROW><id>19546876</id><snippet>pyconfig.h</snippet></ROW><ROW><id>19546876</id><snippet>Makefile</snippet></ROW><ROW><id>19546876</id><snippet>config.log</snippet></ROW><ROW><id>19546876</id><snippet>pyconfig.h</snippet></ROW><ROW><id>19546876</id><snippet>HAVE_SIGALTSTACK</snippet></ROW><ROW><id>19546876</id><snippet>#define HAVE_SIGALTSTACK 1
</snippet></ROW><ROW><id>19546876</id><snippet>make</snippet></ROW><ROW><id>19546876</id><snippet>faulthandler</snippet></ROW><ROW><id>19546876</id><snippet>_stack_overflow</snippet></ROW><ROW><id>19546876</id><snippet>&gt;&gt;&gt; import faulthandler
&gt;&gt;&gt; print(hasattr(faulthandler, '_stack_overflow'))
False
</snippet></ROW><ROW><id>19546876</id><snippet>faulthandler</snippet></ROW><ROW><id>19547078</id><snippet>a = np.array([1,2,3,4,5,1,6,1]) 
print np.where(a == a.min())
</snippet></ROW><ROW><id>19547143</id><snippet>import struct
struct.unpack('H', struct.pack('h', number))
</snippet></ROW><ROW><id>19547702</id><snippet>.pyc</snippet></ROW><ROW><id>19547702</id><snippet>print(unittest.__file__)</snippet></ROW><ROW><id>19547702</id><snippet>unittest.py</snippet></ROW><ROW><id>19547702</id><snippet>.pyc</snippet></ROW><ROW><id>19547731</id><snippet>table_1=pd.crosstab(f_dtflt.EW_REGIONCOLLSITE, f_dtflt.COLLECTION_DATE.apply(lambda x: x.strftime("%y %m_%b %y")), margins=True)
</snippet></ROW><ROW><id>19547731</id><snippet>"COLLECTION_DATE    12 10_Oct 12  12 11_Nov 12  12 12_Dec 12  13 01_Jan 13  
EW_REGIONCOLLSITE                                                           
EAST                        825          2108          2280          2757   
WEST                         42           407          1003          2216   
All                         867          2515          3283          4973   

COLLECTION_DATE    13 02_Feb 13  13 03_Mar 13  13 04_Apr 13  13 05_May 13  
EW_REGIONCOLLSITE                                                           
EAST                       2272          1682          1964          1981   
WEST                       2351          2770          2579          3014   
All                        4623          4452          4543          4995   

COLLECTION_DATE    13 06_Jun 13  13 07_Jul 13  13 08_Aug 13  13 09_Sep 13  
EW_REGIONCOLLSITE                                                           
EAST                       1902          2113          2092           975   
WEST                       1823          1506          2011           888   
All                        3725          3619          4103          1863   

COLLECTION_DATE      All  
EW_REGIONCOLLSITE         
EAST               22951  
WEST               20610  
All                43561 "
</snippet></ROW><ROW><id>19547731</id><snippet>def clean_label(label_list, margins='False'):
    ''' This function takes the column index list from a crosstab (or pivot table?) in pandas and removes the 
    part of the label before and including the "_".  This allows the user to order the columns manually by creating
    an alphabetical index followed by "_" and then the label that they would like to use.  For example, a label such as
    ['a_Positive', 'b_Negative'] will be converted to ['Positive', 'Negative'].  Another example would be to order dates
    in a table from ['12 10_Oct 12', '12 11_Nov 12'] to ['Oct 12', 'Nov 12']

    margins = False if the crosstab was created without margins and therefore does not have an "All" at the end of the list
    margins = True if the crosstab was created with margins and therefore has an "All" at the end of the list
    '''
    corrected_list=list()

    # If one creates margins in pivot/crosstab, will get the last column of "All"
    # This has to be removed from the following code or it will throw an error.
    if margins:
        convert_list = label_list[:-1]
    else:
        convert_list = label_list

    for l in convert_list:
        x,y=l.split('_')
        corrected_list.append(y)

    if margins:
        corrected_list.append('Total')  # Renames "All" to "Total"

    return corrected_list  

# Change the labels on the crosstab table
table_1.columns=clean_label(table_1.columns, margins=True)

# Change name of columns
table_1.columns.name = 'Month of Collection'

# Change name of rows
table_1.index.name = 'Region'
</snippet></ROW><ROW><id>19547731</id><snippet>"Month of Collection  Oct 12  Nov 12  Dec 12  Jan 13  Feb 13  Mar 13  Apr 13  
Region                                                                        
EAST                    825    2108    2280    2757    2272    1682    1964   
WEST                     42     407    1003    2216    2351    2770    2579   
All                     867    2515    3283    4973    4623    4452    4543   

Month of Collection  May 13  Jun 13  Jul 13  Aug 13  Sep 13  Total  
Region                                                              
EAST                   1981    1902    2113    2092     975  22951  
WEST                   3014    1823    1506    2011     888  20610  
All                    4995    3725    3619    4103    1863  43561  "
</snippet></ROW><ROW><id>19547879</id><snippet>&gt;&gt;&gt; items = ["List: Name-Here", "List: Name-Here, Here, Here'Here, Here-Here'Here, Here Here Here", "List: Here, Here Here, Here Here Here Here"]
&gt;&gt;&gt; [len(x.split(",")) for x in items]
[1, 5, 3]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19547879</id><snippet>from re import findall

mystr = """
List: Name-Here
List: Name-Here, Here, Here'Here, Here-Here'Here, Here Here Here
List: Here, Here Here, Here Here Here Here
"""

items = findall("List:(.+)", mystr)
for item in items:
    print len(item.split(","))
</snippet></ROW><ROW><id>19547879</id><snippet>1
5
3
</snippet></ROW><ROW><id>19548132</id><snippet>wr.writerows(list_of_DVDsuppliers)
</snippet></ROW><ROW><id>19548132</id><snippet>s</snippet></ROW><ROW><id>19548132</id><snippet>myfile.close
</snippet></ROW><ROW><id>19548132</id><snippet>myfile.close()
</snippet></ROW><ROW><id>19548132</id><snippet>with</snippet></ROW><ROW><id>19548132</id><snippet>with open("pppp.csv", "wb") as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_NONE)
    wr.writerows(list_of_DVDsuppliers)
</snippet></ROW><ROW><id>19548132</id><snippet>a,m,15
w,p,34
</snippet></ROW><ROW><id>19548132</id><snippet>open("pppp.csv", "r", newline='')</snippet></ROW><ROW><id>19548247</id><snippet>FreeLibrary</snippet></ROW><ROW><id>19548247</id><snippet>from ctypes import *

file = CDLL('file.dll')

# do stuff here

handle = file._handle # obtain the DLL handle

windll.kernel32.FreeLibrary(handle)
</snippet></ROW><ROW><id>19548247</id><snippet>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {

  switch( fdwReason ) {
    case DLL_PROCESS_ATTACH:
      puts("DLL loaded");
    break;

    case DLL_PROCESS_DETACH:
      puts("DLL unloaded");
    break;

    case DLL_THREAD_ATTACH:
    break;

    case DLL_THREAD_DETACH:
    break;
  }

  return TRUE;
}

__declspec(dllexport) void function(void) {
  puts("Hello");
}
</snippet></ROW><ROW><id>19548247</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt;
&gt;&gt;&gt; file = CDLL('file.dll')
DLL loaded
&gt;&gt;&gt;
&gt;&gt;&gt; # now it's locked
...
&gt;&gt;&gt; file.function()
Hello
0
&gt;&gt;&gt; windll.kernel32.FreeLibrary(file._handle)
DLL unloaded
1
&gt;&gt;&gt; # not it's unlocked
</snippet></ROW><ROW><id>19548247</id><snippet>dlclose</snippet></ROW><ROW><id>19548247</id><snippet>from ctypes import *

file = CDLL('./file.so')

# do stuff here

handle = file._handle # obtain the SO handle

cdll.LoadLibrary('libdl.so').dlclose(handle)
</snippet></ROW><ROW><id>19548247</id><snippet>#include &lt;stdio.h&gt;

__attribute__((constructor)) void dlentry(void) {
  puts("SO loaded");
}

void function(void) {
  puts("Hello");
}

__attribute__((destructor)) void dlexit(void) {
  puts("SO unloaded");
}
</snippet></ROW><ROW><id>19548247</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; 
&gt;&gt;&gt; file = CDLL('./file.so')
SO loaded
&gt;&gt;&gt; 
&gt;&gt;&gt; file.function()
Hello
6
&gt;&gt;&gt; cdll.LoadLibrary('libdl.so').dlclose(file._handle)
SO unloaded
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19548345</id><snippet>squarer = maker(2)

print(squarer(2)) # outputs 4
print(squarer(4)) # outputs 16
print(squarer(8)) # outputs 64
</snippet></ROW><ROW><id>19548345</id><snippet>N</snippet></ROW><ROW><id>19548345</id><snippet>N</snippet></ROW><ROW><id>19548345</id><snippet>writer = connectmaker("127.0.0.1")
writer("send this text")
writer("send this other text")
</snippet></ROW><ROW><id>19548345</id><snippet>writer()</snippet></ROW><ROW><id>19548345</id><snippet>__init__</snippet></ROW><ROW><id>19548378</id><snippet>wanted_scaffs  = set(['scaffold126', 'scaffold5112'])
files = {name: open(name+'.txt', 'w') for name in wanted_scaffs}
for line in big_file:
    curr_scaff = line.split(' ', 1)[0] # minimal splitting
    if curr_scaff in wanted_scaffs:
        files[key].write(line)
for f in files.values():
    f.close()
</snippet></ROW><ROW><id>19548378</id><snippet>for scaff in wanted_scaffs:
    with open(scaff + '.txt', 'r') as f:
        ... # summarize your data
</snippet></ROW><ROW><id>19548469</id><snippet>def float_like_int(n):
    if round(n, 6) == round(n):
        return int(round(n))
    return n
</snippet></ROW><ROW><id>19548469</id><snippet>9.9999999</snippet></ROW><ROW><id>19548469</id><snippet>10</snippet></ROW><ROW><id>19548555</id><snippet>HTTPConnection.connect():
Connect to the server specified when the object was created.</snippet></ROW><ROW><id>19548555</id><snippet>source_address</snippet></ROW><ROW><id>19548555</id><snippet>from httplib import HTTPConnection
conn = HTTPConnection("www.site.org", 80, timeout=10)
conn.connect()

conn.request("GET", "http://www.site.org/")
resp = conn.getresponse()

data = resp.read()
print(data)
</snippet></ROW><ROW><id>19548555</id><snippet>httplib</snippet></ROW><ROW><id>19548555</id><snippet>urllib2</snippet></ROW><ROW><id>19548598</id><snippet>print( "TEXT" )
print( "\n" )
for i in range(1):
    print "TEXT INPUT REQUIRED:'%s'" % row[i]
print( "\n" )
print( "('%s'));" % row[2]
</snippet></ROW><ROW><id>19548626</id><snippet>iterables = {}
for x in test:
    iterables.setdefault(x[0], []).append(x)
</snippet></ROW><ROW><id>19548626</id><snippet>iterables.values()</snippet></ROW><ROW><id>19548694</id><snippet>class LinksFromDomain(object):
    def __init__(self):
        self._spider_to_domains = {}

    def open_spider(self, spider):
        self._spider_to_domains[spider] = {}

    def close_spider(self, spider):
        # write out a csv file with all the items in some format.
        self._spider_to_domains[spider] = {}

    def process_item(self, item, spider):
        domains_dict = self._spider_to_domains[spider]
        if item['domain'] not in domains_dict:
            domains_dict[item['domain']] = []

        domains_dict[item['domain']].extend(item['links'])
</snippet></ROW><ROW><id>19548724</id><snippet>gunzip</snippet></ROW><ROW><id>19548724</id><snippet>from plumbum.cmd import gunzip
gunzip(filename)
</snippet></ROW><ROW><id>19548724</id><snippet>-</snippet></ROW><ROW><id>19548724</id><snippet>from plumbum.cmd import zcat
(zcat[filename] | second_command['-'])()
</snippet></ROW><ROW><id>19548910</id><snippet>def searchNode(tree, node, path):
    if tree == None:
        return 
    else:
        #print tree.value
        path.append(tree.value) #add to path because we visited
        searchNode(tree.left,node, path)
        searchNode(tree.right,node, path)
        if tree.value == node:
            print "Node " + str(node) + " found!"
            print path
        else:
            path.pop()  #remove from path because we are going back
</snippet></ROW><ROW><id>19548910</id><snippet>searchNode(tree1, 46, [])</snippet></ROW><ROW><id>19548910</id><snippet>path</snippet></ROW><ROW><id>19548910</id><snippet>path</snippet></ROW><ROW><id>19549035</id><snippet>--force-reinstall
</snippet></ROW><ROW><id>19549035</id><snippet>-I, --ignore-installed
</snippet></ROW><ROW><id>19549149</id><snippet>list</snippet></ROW><ROW><id>19549149</id><snippet>my_list[0] #what you were trying to assign to 'a'
my_list[0][0] #the first element in that sub-list
</snippet></ROW><ROW><id>19549149</id><snippet>dict</snippet></ROW><ROW><id>19549149</id><snippet>d = {}
for sublist, meaningful_identifier in zip(my_list, my_meaningful_identifiers):
    d[meaningful_identifier] = sublist
</snippet></ROW><ROW><id>19549175</id><snippet>Text_in=Setdocsprj.objects.all()
res1=Text_in.filter(name=u'Template name')
f1=open('test_gen.txt',"wb")
for j in res1:
    t=j.doc
    f1.write(t)
f1.close()
</snippet></ROW><ROW><id>19549338</id><snippet>GET http://www.google.com/ HTTP/1.1
Host: www.google.com
</snippet></ROW><ROW><id>19549338</id><snippet>Proxy-Authorization</snippet></ROW><ROW><id>19549354</id><snippet>sorted_d = sorted(rows, key=lambda item: item['chapter'])
</snippet></ROW><ROW><id>19549354</id><snippet>sorted_d = sorted(rows, key=lambda item: (item['chapter'], item['theme']))
</snippet></ROW><ROW><id>19549427</id><snippet>re.sub</snippet></ROW><ROW><id>19549427</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = "@ sample This is a sample string $ 1.00 # sample"
&gt;&gt;&gt; re.sub(r'([@#$])(\s+)([a-z0-9])', r'\1\3', strs, flags=re.I)
'@sample This is a sample string $1.00 #sample'
</snippet></ROW><ROW><id>19549735</id><snippet>pyOpenSSL</snippet></ROW><ROW><id>19549735</id><snippet>ssl</snippet></ROW><ROW><id>19549735</id><snippet>Connection</snippet></ROW><ROW><id>19549735</id><snippet>ssl.SSLSocket</snippet></ROW><ROW><id>19549735</id><snippet>SSLv23_METHOD</snippet></ROW><ROW><id>19549735</id><snippet>OP_NO_SSLv2</snippet></ROW><ROW><id>19549735</id><snippet>OP_NO_SSLv3</snippet></ROW><ROW><id>19549735</id><snippet>TLSv1_1_METHOD</snippet></ROW><ROW><id>19549735</id><snippet>TLSv1_2_METHOD</snippet></ROW><ROW><id>19549735</id><snippet>SSLv23_METHOD</snippet></ROW><ROW><id>19549735</id><snippet>OP_NO_SSLv2</snippet></ROW><ROW><id>19549735</id><snippet>OP_NO_SSLv3</snippet></ROW><ROW><id>19549735</id><snippet>OP_NO_TLSv1</snippet></ROW><ROW><id>19549735</id><snippet>pip install bzr+lp:pyopenssl</snippet></ROW><ROW><id>19549735</id><snippet>pip install</snippet></ROW><ROW><id>19549735</id><snippet>pip</snippet></ROW><ROW><id>19549735</id><snippet>$ brew install --universal openssl
$ sudo LDFLAGS=-L/usr/local/opt/openssl/lib CPPFLAGS=-I/usr/local/opt/openssl/include pip-2.6 install pyOpenSSL
$ python2.6
&gt;&gt;&gt; import socket, OpenSSL
&gt;&gt;&gt; OpenSSL.SSL.SSLeay_version(OpenSSL.SSL.SSLEAY_VERSION)
'OpenSSL 1.0.1e 11 Feb 2013'
&gt;&gt;&gt; ctx = OpenSSL.SSL.Context(OpenSSL.SSL.SSLv23_METHOD)
&gt;&gt;&gt; sock = socket.socket()
&gt;&gt;&gt; ssock = OpenSSL.SSL.Connection(ctx, sock)
&gt;&gt;&gt; ssock.connect_ex(('www.ssllabs.com', 443))
0
&gt;&gt;&gt; ssock.send('GET /ssltest/viewMyClient.html HTTP/1.1\r\nHost: www.ssllabs.com\r\n\r\n')
66
&gt;&gt;&gt; ssock.recv(16384)
-- snipped headers for chunked reply
&gt;&gt;&gt; ssock.recv(16384)
'2000\r\n'
&gt;&gt;&gt; d = ssock.recv(16384)
&gt;&gt;&gt; d.find('TLS 1.1')
2324
&gt;&gt;&gt; d.find('TLS 1.0')
2432
&gt;&gt;&gt; d[2324:2432]
'TLS 1.1&lt;/td&gt;\r\n\t\t&lt;td class="tableRight"&gt;Yes&lt;/td&gt;\t\t\t\r\n\t&lt;/tr&gt;\r\n\t&lt;tr class="tableRow"&gt;\r\n\t\t&lt;td class="tableLeft"&gt;'
</snippet></ROW><ROW><id>19549750</id><snippet>In [9]: np.in1d(fake, [0,2,6,8]).reshape(fake.shape)
Out[9]: 
array([[ True, False,  True],
       [False, False, False],
       [ True, False,  True]], dtype=bool)
</snippet></ROW><ROW><id>19549874</id><snippet>CB.lines[0].set_linewidth(10)
</snippet></ROW><ROW><id>19549956</id><snippet>".*"</snippet></ROW><ROW><id>19549956</id><snippet>picnum</snippet></ROW><ROW><id>19549956</id><snippet>ii in picnum</snippet></ROW><ROW><id>19549956</id><snippet>picnum</snippet></ROW><ROW><id>19549956</id><snippet>ii</snippet></ROW><ROW><id>19549956</id><snippet>and</snippet></ROW><ROW><id>19549956</id><snippet>.labels.txt</snippet></ROW><ROW><id>19549956</id><snippet>re</snippet></ROW><ROW><id>19549956</id><snippet>fnmatch</snippet></ROW><ROW><id>19549956</id><snippet>picnum</snippet></ROW><ROW><id>19549956</id><snippet>import re
for file in os.listdir(lbldir):
    if file.endswith('.labels.txt')
        startnum=re.match("\d+",file)
        if startnum and startnum.group(0) in picnum:
            lblpath.append(os.path.abspath(file))
</snippet></ROW><ROW><id>19550021</id><snippet>    if int(synonymous[x]) == 0: 

        nonsyn2 = nonsyn2 + 1
        break
</snippet></ROW><ROW><id>19550025</id><snippet>fisher_exact</snippet></ROW><ROW><id>19550085</id><snippet>float</snippet></ROW><ROW><id>19550085</id><snippet>def get_score(s):
  return struct.unpack('&gt;Q', (u'\0\0\0\0\0\0\0\0' + s[:8])[-8:])[0]
</snippet></ROW><ROW><id>19550085</id><snippet>def get_score(s):
  return struct.unpack('&gt;Q', ('\0\0\0\0\0\0\0\0' + s[:8])[-8:].encode('ascii', 'error'))[0]
</snippet></ROW><ROW><id>19550085</id><snippet>float</snippet></ROW><ROW><id>19550085</id><snippet>def get_score(s):
  return struct.unpack('&gt;d', (u'\0\1' + (u'\0\0\0\0\0\0\0\0' + s[:6])[-6:]).encode('ascii', 'error'))[0]
</snippet></ROW><ROW><id>19550107</id><snippet>import re
text = '&lt;b&gt;foo&amp;bar &lt;a href="http://www.example.com/"&gt;link&lt;/a&gt;&lt;/b&gt;'
re.sub(r'&lt;.+?&gt;', '', text)
# foo&amp;bar link
</snippet></ROW><ROW><id>19550330</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19550365</id><snippet>set2 = filter(lambda item: filtCheck(item, 'Hi'), set1)
</snippet></ROW><ROW><id>19550365</id><snippet>functools.partial</snippet></ROW><ROW><id>19550365</id><snippet>from functools import partial
set2 = filter(partial(filtCheck, filt="Hi"), set1)
</snippet></ROW><ROW><id>19550365</id><snippet>set2 = [item for item in set1 if filtCheck(item, "Hi")]

# or simply

set2 = [item for item in set1 if "Hi" in item]
</snippet></ROW><ROW><id>19550475</id><snippet>topdir = os.path.normpath ( os.path.join (os.path.abspath(sys.argv[0]),   
                    os.pardir, os.pardir, os.pardir) )
</snippet></ROW><ROW><id>19550475</id><snippet>dirs = [ os.path.abspath(sys.argv[0]) ] + [os.pardir] * 3
topdir = reduce(lambda x, y: os.path.join(x, y), dirs)
</snippet></ROW><ROW><id>19550535</id><snippet>$ sudo easy_install pip
$ sudo pip install --upgrade virtualenvwrapper
</snippet></ROW><ROW><id>19550580</id><snippet>f("mat") = f(f("at"))+"m" -&gt; f(f(f("t"))+"a") +"m" -&gt; f("ta") + "m" -&gt; "atm"</snippet></ROW><ROW><id>19550580</id><snippet>f("ta") = f(f("a")) + "t" -&gt; f("a") + "t" -&gt; "at"</snippet></ROW><ROW><id>19550580</id><snippet>f("at") = f(f("t"))+"a"   -&gt; f("t")+"a" - &gt; "ta"</snippet></ROW><ROW><id>19550580</id><snippet>f("t") = "t"</snippet></ROW><ROW><id>19550592</id><snippet>sandra_source.config.from_object(__name__)
</snippet></ROW><ROW><id>19550707</id><snippet>np.transpose</snippet></ROW><ROW><id>19550707</id><snippet> Returns
 ------- p : ndarray
     `a` with its axes permuted.  A view is returned whenever
     possible.
</snippet></ROW><ROW><id>19550707</id><snippet>T = ph.T.copy()</snippet></ROW><ROW><id>19550907</id><snippet>__dict__</snippet></ROW><ROW><id>19550907</id><snippet>__dict__</snippet></ROW><ROW><id>19550907</id><snippet>__dict__.pop</snippet></ROW><ROW><id>19550907</id><snippet>KeyError</snippet></ROW><ROW><id>19550907</id><snippet>AttributeError</snippet></ROW><ROW><id>19551006</id><snippet>query</snippet></ROW><ROW><id>19551006</id><snippet>filter</snippet></ROW><ROW><id>19551006</id><snippet>get</snippet></ROW><ROW><id>19551006</id><snippet>select for update</snippet></ROW><ROW><id>19551020</id><snippet>import csv
inp = csv.reader(open("/tmp/HSN.csv", "r"), delimiter = ',')
for line in inp:
    a = (line[0]) #street name column
    b = int(line[1]) #first house number column
    c = int(line[2]) #last house number column
    for d in range(b, c+1):
        print a, d
</snippet></ROW><ROW><id>19551039</id><snippet>requests</snippet></ROW><ROW><id>19551039</id><snippet>params = {'solution': 'nd', 'path': '', 'file': 'Test.nd', 'dataAccessId': '1',
          'paramid': str(col[0])}
url = 'http://appl.xyz.net:8080/app/content/pq/doQuery'
user = 'abc'
password ='testgo'
data = requests.get(url, auth=(user, password), params=params)
</snippet></ROW><ROW><id>19551281</id><snippet>value</snippet></ROW><ROW><id>19551281</id><snippet>DateTime()</snippet></ROW><ROW><id>19551281</id><snippet>value</snippet></ROW><ROW><id>19551281</id><snippet>DateTime(value) &lt; DateTime()
</snippet></ROW><ROW><id>19551281</id><snippet>value</snippet></ROW><ROW><id>19551429</id><snippet>s.isin(data[0:2].values)
</snippet></ROW><ROW><id>19551609</id><snippet>with open(name, 'w') as o:
    o.write(code)
</snippet></ROW><ROW><id>19551609</id><snippet>with open(name, 'w') as o:
    code = input("blah")
    while (code != "exit")
        o.write('{0}\n'.format(code))
        code = input("blah")
</snippet></ROW><ROW><id>19551621</id><snippet>colours</snippet></ROW><ROW><id>19551621</id><snippet>&lt;select&gt;
{% for colour in colours %}
&lt;option style="background-color:#{{ colour.hex }}"&gt;{{ colour.name }}&lt;/option&gt;
{% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>19551743</id><snippet>s.recv()</snippet></ROW><ROW><id>19551743</id><snippet>close</snippet></ROW><ROW><id>19551743</id><snippet>shutdown</snippet></ROW><ROW><id>19551743</id><snippet>recv</snippet></ROW><ROW><id>19551743</id><snippet>send</snippet></ROW><ROW><id>19551743</id><snippet>close</snippet></ROW><ROW><id>19551743</id><snippet>recv</snippet></ROW><ROW><id>19551743</id><snippet>#Make Guesses
for i in range(int(guesses)):
    print(s.recv(1024).decode())
    currentGuess = sys.stdin.readline()
    s.send(currentGuess.encode())
    print(s.recv(80).decode())
s.close()
</snippet></ROW><ROW><id>19551743</id><snippet>send</snippet></ROW><ROW><id>19551743</id><snippet>recv</snippet></ROW><ROW><id>19551743</id><snippet>recv</snippet></ROW><ROW><id>19551743</id><snippet>send</snippet></ROW><ROW><id>19551743</id><snippet>send</snippet></ROW><ROW><id>19551743</id><snippet>send</snippet></ROW><ROW><id>19551743</id><snippet>sendall</snippet></ROW><ROW><id>19551743</id><snippet>makefile</snippet></ROW><ROW><id>19551743</id><snippet>s.connect(("127.0.0.1", 4007))
f = s.makefile('r+b')
</snippet></ROW><ROW><id>19551743</id><snippet>foo = s.recv(80)
s.send(bar)
</snippet></ROW><ROW><id>19551743</id><snippet>foo = f.readline().strip()
f.write(bar + '\n')
</snippet></ROW><ROW><id>19551743</id><snippet>encode</snippet></ROW><ROW><id>19551743</id><snippet>decode</snippet></ROW><ROW><id>19551743</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>19551743</id><snippet>'cp1252'</snippet></ROW><ROW><id>19551743</id><snippet>UnicodeError</snippet></ROW><ROW><id>19551743</id><snippet>'utf-8'</snippet></ROW><ROW><id>19551743</id><snippet>makefile</snippet></ROW><ROW><id>19551743</id><snippet>f = s.makefile('r+', encoding='utf-8')
</snippet></ROW><ROW><id>19551743</id><snippet>decode</snippet></ROW><ROW><id>19551743</id><snippet>encode</snippet></ROW><ROW><id>19551810</id><snippet>from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

rsa_key = RSA.import(open(verification_key_file, "rb").read())
verifier = PKCS1_v1_5.new(rsa_key)
h = SHA.new(data_to_verify)
if verifier.verify(h, signature_received_with_the_data):
    print "OK"
else:
    print "Invalid"
</snippet></ROW><ROW><id>19551985</id><snippet>nested_list = [['a', 'b'], ['c', 'd'], ['e', 'f']]
another_list = [['name0', 'aaa'], ['name1', 'aab'], ['name2', 'abd'], ['name3', 'abb']]

result = [tuple(sum(1 for c in s if c in lst)
                for lst in nested_list)
          for _, s in another_list]
</snippet></ROW><ROW><id>19551985</id><snippet>result</snippet></ROW><ROW><id>19551985</id><snippet>[(3, 0, 0), (3, 0, 0), (2, 1, 0), (3, 0, 0)]
</snippet></ROW><ROW><id>19551985</id><snippet>result = []
for _, s in another_list:
    item = ()
    for lst in nested_list:
        count = 0
        for c in s:
            if c in lst:
                count += 1
        item += (count,)
    result.append(item)
</snippet></ROW><ROW><id>19551997</id><snippet>perl pdf_hl.pl -f westlaw.pdf -p '\S*ing'</snippet></ROW><ROW><id>19551997</id><snippet>use strict;
use warnings;
use XML::Simple;
use CAM::PDF;
use Getopt::Long;
use Regexp::Assemble;

#####################################################################
#
#  This is PDF highlight mark-up tool.
#  Though fully functional, it's still a prototype proof-of-concept.
#  Please don't feed it with non-pdf files or patterns like '\d*' 
#  (because you probably want '\d+', don't you?).
#  
#  Requires muPDF-tools installed and in the PATH, plus some CPAN modules.
#
#  ToDo:
#  - error handling is primitive if any.
#  - cropped files (CropBox) are processed incorrectly. Fix it.
#  - of course there can be other useful parameters.
#  - allow loading them from file.
#  - allow searching across lines (e.g. for multi-word patterns)
#    and certainly across "spans" within a line (see mudraw output).
#  - multi-color mark-up, not just yellow.
#  - control over output file name.
#  - compress output (use cleanoutput method instead of output,
#    plus more robust (think compressed object streams) compressors 
#    may be useful).
#  - file list processing.
#  - annotations are not just colorful marks on the page, their 
#    dictionaries can contain all sorts of useful information, which may 
#    be extracted automatically further up the food chain i.e. by 
#    whoever consumes these files (date, time, author, comments, actual 
#    text below, etc., etc., plus think of customized appearence streams,
#    placing them on layers, etc..
#  - ???
#
#   Most complexity in the code comes from adding appearance 
#   dictionary (AP). You can safely delete it, because most viewers don't 
#   need AP for standard annotations. Ironically, muPDF-viewer wants it 
#   (otherwise highlight placement is not 100% correct), and since I relied 
#   on muPDF-tools, I thought it be proper to create PDFs consumable by 
#   their viewer... Firefox wants AP too, btw.
#
#####################################################################

my ($file, $csv);
my ($c_flag, $w_flag) = (0, 1);
GetOptions('-f=s' =&gt; \$file,   '-p=s' =&gt; \$csv, 
           '-c!'  =&gt; \$c_flag, '-w!'  =&gt; \$w_flag) 
    and defined($file)
    and defined($csv)
or die "\nUsage: perl $0 -f FILE -p LIST -c -w\n\n",
       "\t-f\t\tFILE\t PDF file to annotate\n",
       "\t-p\t\tLIST\t comma-separated patterns\n",
       "\t-c or -noc\t\t be case sensitive (default = no)\n",
       "\t-w or -now\t\t whole words only (default = yes)\n";
my $re = Regexp::Assemble-&gt;new
    -&gt;add(split(',', $csv))
    -&gt;anchor_word($w_flag)
    -&gt;flags($c_flag ? '' : 'i')
    -&gt;re;
my $xml = qx/mudraw -ttt $file/;
my $tree = XMLin($xml, ForceArray =&gt; [qw/page block line span char/]);
my $pdf = CAM::PDF-&gt;new($file);

sub __num_nodes_list {
    my $precision = shift;
    [ map {CAM::PDF::Node-&gt;new('number', sprintf("%.${precision}f", $_))} @_ ]
}

sub add_highlight {
    my ($idx, $x1, $y1, $x2, $y2) = @_;
    my $p = $pdf-&gt;getPage($idx);

    # mirror vertically to get to normal cartesian plane 
    my ($X1, $Y1, $X2, $Y2) = $pdf-&gt;getPageDimensions($idx);
    ($x1, $y1, $x2, $y2) = ($X1 + $x1, $Y2 - $y2, $X1 + $x2, $Y2 - $y1);
    # corner radius
    my $r = 2;

    # AP appearance stream
    my $s = "/GS0 gs 1 1 0 rg 1 1 0 RG\n";
    $s .= "1 j @{[sprintf '%.0f', $r * 2]} w\n";
    $s .= "0 0 @{[sprintf '%.1f', $x2 - $x1]} ";
    $s .= "@{[sprintf '%.1f',$y2 - $y1]} re B\n";

    my $highlight = CAM::PDF::Node-&gt;new('dictionary', {
        Subtype =&gt; CAM::PDF::Node-&gt;new('label', 'Highlight'),
        Rect =&gt; CAM::PDF::Node-&gt;new('array', 
          __num_nodes_list(1, $x1 - $r, $y1 - $r, $x2 + $r * 2, $y2 + $r * 2)),
        QuadPoints =&gt; CAM::PDF::Node-&gt;new('array', 
            __num_nodes_list(1, $x1, $y2, $x2, $y2, $x1, $y1, $x2, $y1)),
        BS =&gt; CAM::PDF::Node-&gt;new('dictionary', {
            S =&gt; CAM::PDF::Node-&gt;new('label', 'S'),
            W =&gt; CAM::PDF::Node-&gt;new('number', 0),
        }),
        Border =&gt; CAM::PDF::Node-&gt;new('array', 
            __num_nodes_list(0, 0, 0, 0)),
        C =&gt; CAM::PDF::Node-&gt;new('array', 
            __num_nodes_list(0, 1, 1, 0)),

        AP =&gt; CAM::PDF::Node-&gt;new('dictionary', {
            N =&gt; CAM::PDF::Node-&gt;new('reference', 
                $pdf-&gt;appendObject(undef, 
                    CAM::PDF::Node-&gt;new('object',
                        CAM::PDF::Node-&gt;new('dictionary', {
                            Subtype =&gt; CAM::PDF::Node-&gt;new('label', 'Form'),
                            BBox =&gt; CAM::PDF::Node-&gt;new('array',
                              __num_nodes_list(1, -$r, -$r, $x2 - $x1 + $r * 2, 
                                                 $y2 - $y1 + $r * 2)),
                            Resources =&gt; CAM::PDF::Node-&gt;new('dictionary', {
                                ExtGState =&gt; CAM::PDF::Node-&gt;new('dictionary', {
                                    GS0 =&gt; CAM::PDF::Node-&gt;new('dictionary', {
                                        BM =&gt; CAM::PDF::Node-&gt;new('label', 
                                            'Multiply'),
                                    }),
                                }),
                            }),
                            StreamData =&gt; CAM::PDF::Node-&gt;new('stream', $s),
                            Length =&gt; CAM::PDF::Node-&gt;new('number', length $s),
                        }),
                    ),
                ,0),
            ),
        }),
    });

    $p-&gt;{Annots} ||= CAM::PDF::Node-&gt;new('array', []);
    push @{$pdf-&gt;getValue($p-&gt;{Annots})}, $highlight;

    $pdf-&gt;{changes}-&gt;{$p-&gt;{Type}-&gt;{objnum}} = 1
}

my $page_index = 1;
for my $page (@{$tree-&gt;{page}}) {
    for my $block (@{$page-&gt;{block}}) {
        for my $line (@{$block-&gt;{line}}) {
            for my $span (@{$line-&gt;{span}}) {
                my $string = join '', map {$_-&gt;{c}} @{$span-&gt;{char}};
                while ($string =~ /$re/g) {
                    my ($x1, $y1) = 
                        split ' ', $span-&gt;{char}-&gt;[$-[0]]-&gt;{bbox};
                    my (undef, undef, $x2, $y2) = 
                        split ' ', $span-&gt;{char}-&gt;[$+[0] - 1]-&gt;{bbox};
                    add_highlight($page_index, $x1, $y1, $x2, $y2)
                }
            }
        }
    }
    $page_index ++
}
$pdf-&gt;output($file =~ s/(.{4}$)/++$1/r);

__END__
</snippet></ROW><ROW><id>19552092</id><snippet>KeyError</snippet></ROW><ROW><id>19552092</id><snippet>------</snippet></ROW><ROW><id>19552092</id><snippet>split</snippet></ROW><ROW><id>19552092</id><snippet>data</snippet></ROW><ROW><id>19552092</id><snippet>record</snippet></ROW><ROW><id>19552092</id><snippet>[]</snippet></ROW><ROW><id>19552092</id><snippet>record.get('Name', None)</snippet></ROW><ROW><id>19552137</id><snippet>PyCMD</snippet></ROW><ROW><id>19552137</id><snippet>thisptr</snippet></ROW><ROW><id>19552137</id><snippet>self.thisptr</snippet></ROW><ROW><id>19552137</id><snippet>this</snippet></ROW><ROW><id>19552137</id><snippet>__cint__</snippet></ROW><ROW><id>19552137</id><snippet>__cinit__</snippet></ROW><ROW><id>19552137</id><snippet>#include "cmd.h"
int main()
{
    CMD *cmd;
    cmd-&gt;init(10);
    cmd-&gt;test();
}
</snippet></ROW><ROW><id>19552306</id><snippet>DiscreteUniform</snippet></ROW><ROW><id>19552335</id><snippet>def OnSelectMustHave(self,event):        
    info = event.GetData()
    InfoList.append(info)
    def do_select():
          map(lambda x:self.list_ctrl.Select(x,1) ,set(InfoList))

    wx.CallLater(100,do_select)
    print info,InfoList
    return
</snippet></ROW><ROW><id>19552335</id><snippet>def OnSelectMustHave(self,event):        
    info = event.GetData()
    InfoList.append(info)
    map(lambda x:self.list_ctrl.SetItemBackgroundColour(x,wx.LIGHT_GREY) ,set(InfoList))
    print info,InfoList
    return
</snippet></ROW><ROW><id>19552364</id><snippet>def retrieveAddSafe(data, repeat=5):
    """ Attempts to retrieve `data`, swallowing HTTPErrors `repeat` times before
    throwing"""
    for _ in xrange(repeat - 1):
        try:
            return retrieveAdd(data)
        except urllib2.HTTPError:
            time.sleep(5 * 60)

    # if it fails after `repeat` times, allow the error to be raised
    return retrieveAdd(data)

with open('csvlist.csv', 'rb') as data:
    reader = csv.reader(data)
    for count, row in enumerate(reader):
        retrieveAddSafe(row[0])
</snippet></ROW><ROW><id>19552408</id><snippet>FileStorage.stream</snippet></ROW><ROW><id>19552408</id><snippet>FileStorage</snippet></ROW><ROW><id>19552408</id><snippet>save()</snippet></ROW><ROW><id>19552408</id><snippet>from cStringIO import StringIO
inmem_file = StringIO()
file_storage.save(inmem_file)  # save to memory
inmem_file.reset()  # seek back to byte 0, otherwise .read() will return ''
use_with_open_cv(inmem_file)
</snippet></ROW><ROW><id>19552496</id><snippet>regex = '&lt;span id="yfs_l84_' + symbolslist[i] + '"&gt;(.+?)&lt;/span&gt;'
</snippet></ROW><ROW><id>19552496</id><snippet>price = re.findall(pattern, htmltext)
</snippet></ROW><ROW><id>19552496</id><snippet>price = re.findall(pattern, htmltext)[0]
</snippet></ROW><ROW><id>19552496</id><snippet>re.findall</snippet></ROW><ROW><id>19552496</id><snippet>[bla, bla, bla, ...]</snippet></ROW><ROW><id>19552496</id><snippet>while</snippet></ROW><ROW><id>19552496</id><snippet>for symbol in symbols:
    ...
</snippet></ROW><ROW><id>19552568</id><snippet>import sys,os
import pygtk, gtk, gobject

class GTK_Main:
  def __init__(self):
    """ Window """
    button_rc = """
    style "deButton" {
      # Default - Yellow
      bg[NORMAL] = "yellow"
      fg[NORMAL] = "#000000"

      # Mouse-Over - Blue
      fg[PRELIGHT] = "blue"
      bg[PRELIGHT] = "#000000"

      # Click - RED
      bg[ACTIVE] = "red"
      fg[ACTIVE] = "#000000"

    }
    widget "*.deButton" style "deButton"
    """

    window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    window.set_title("Test")
    window.set_default_size(100, 100)
    window.connect("destroy", gtk.main_quit, "WM destroy")
    gtk.rc_parse_string(button_rc)

    hbox_eq = gtk.HBox()

    buttonlist = []

    for i in [1,2,3,4,5,6,7,8,9]:
      b =  gtk.Button( str(i) )

      b.set_name("deButton")
      buttonlist.append(b)
      hbox_eq.pack_start(b, True, True, 0)


    for button in buttonlist:
      print button.get_label()


    window.add(hbox_eq)
    window.show_all()

  def exit(self, widget, data=None):
    gtk.main_quit()


GTK_Main()
gtk.gdk.threads_init()
gtk.main()
</snippet></ROW><ROW><id>19552576</id><snippet>data1,data2
1,6
2,7
3,8
4,9
5,10
</snippet></ROW><ROW><id>19552576</id><snippet>def read_csv_file():
    import csv, os
    this_dir = os.path.abspath(os.path.dirname(__file__))
    csv_file = this_dir+"/sample_data.csv"
    data1_list=[]
    data2_list=[]
    with open(csv_file, 'rb') as csvfile:
        csv_reader = csv.DictReader(csvfile, dialect= 'excel')
        print "1st data row:"
        for csv_row in csv_reader:
            data1_list.append(csv_row["data1"])
            print csv_row["data1"]
            data2_list.append(csv_row["data2"])
    return data1_list, data2_list

def calculate_min(data1):
    from operator import itemgetter
    minimum_data1=min(enumerate(data1), key=itemgetter(1))[1]
    max_data1=max(enumerate(data1), key=itemgetter(1))[1]
    print "the min of the set was: %s"%minimum_data1
    print "the max of the set was: %s"%max_data1
</snippet></ROW><ROW><id>19552576</id><snippet>data1, data2 = read_csv_file()
calculate_min(data1)
</snippet></ROW><ROW><id>19552576</id><snippet>1st data row:
1
2
3
4
5
the min of the set was: 1
the max of the set was: 5
</snippet></ROW><ROW><id>19552641</id><snippet>new_list = [var] * 8
</snippet></ROW><ROW><id>19552641</id><snippet>ob = MyObject()
new_list = [ob] * 8
</snippet></ROW><ROW><id>19552760</id><snippet>data</snippet></ROW><ROW><id>19552760</id><snippet>response = requests.post('https://api.instagram.com/v1/subscriptions/', 
                         data=params)
</snippet></ROW><ROW><id>19552760</id><snippet>params</snippet></ROW><ROW><id>19552760</id><snippet>GET</snippet></ROW><ROW><id>19552760</id><snippet>http://localhost</snippet></ROW><ROW><id>19552979</id><snippet>&lt;</snippet></ROW><ROW><id>19552979</id><snippet>&lt;=</snippet></ROW><ROW><id>19552979</id><snippet>&gt;</snippet></ROW><ROW><id>19552979</id><snippet>&gt;=</snippet></ROW><ROW><id>19552979</id><snippet>&lt;</snippet></ROW><ROW><id>19552979</id><snippet>&lt;=</snippet></ROW><ROW><id>19552979</id><snippet>&gt;</snippet></ROW><ROW><id>19552979</id><snippet>&gt;=</snippet></ROW><ROW><id>19552993</id><snippet>+</snippet></ROW><ROW><id>19552993</id><snippet>import this</snippet></ROW><ROW><id>19553118</id><snippet># Import required alphabet
from Bio.Alphabet import IUPAC

# Pass imported alphabet as an argument for `SeqIO.parse`:
records = list(SeqIO.parse(handle, 'fasta', IUPAC.extended_protein))
</snippet></ROW><ROW><id>19553201</id><snippet>try:
    commandString = [
        'python',
        os.path.join(SCRIPT_DIR, 'ffmpeg.py'),
        '-i', os.path.join('/srv/nfsshare/transcode50', userFolder, directory, title),
        '-d', os.path.join('/srv/nfsshare/transcode50', userFolder, directory),
        '-r', request.POST['framerate'],
        '-p 2', '-f', ",".join(formats), '-t', ",".join(rasters)
    ]

    # call transcode50 script to generate condor_execute.py
    subprocess.check_call(commandString, 
        stdout=open('/srv/nfsshare/transcode50/output.txt', 'w'),
        stderr=subprocess.STDOUT)

except Exception, e:
    # you can do fancier logging, but this is quick
    open('/tmp/test_exception.txt', 'w').write(str(e))
    raise
</snippet></ROW><ROW><id>19553216</id><snippet>def __init__(self,parent,title,...):
      wx.Frame.__init__(self, parent, title=title, style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)
      self.Bind(wx.EVT_CLOSE,self.OnClose)

def OnClose(self,evt):
      print "CLOSE!!!"
      self.Destroy()
</snippet></ROW><ROW><id>19553640</id><snippet>def getvalues(params):
    getter = itemgetter(*params)
    def deco(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if len(args) == 1 and not kwargs and isinstance(args[0], Mapping):
                return func(*getter(args[0]))
            else:
                return func(*args, **kwargs)
        return wrapper
    return deco
</snippet></ROW><ROW><id>19553640</id><snippet>def getvalues(params):
    def deco(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if len(args) == 1 and not kwargs and isinstance(args[0], Mapping):
                return func(**{key: value for key, value in args[0].items() 
                               if key in params})
            else:
                return func(*args, **kwargs)
        return wrapper
    return deco
</snippet></ROW><ROW><id>19553640</id><snippet>getvalues</snippet></ROW><ROW><id>19553640</id><snippet>def getvalues(*params):</snippet></ROW><ROW><id>19553727</id><snippet>val = "1"</snippet></ROW><ROW><id>19553727</id><snippet>val = 1</snippet></ROW><ROW><id>19553727</id><snippet>checkNodeConstraintsOk</snippet></ROW><ROW><id>19553752</id><snippet>import numpy as np
from skimage.io._plugins import freeimage_plugin as fi
image = np.zeros((32, 256, 256), 'uint16')
fi.write_multipage(image, 'multipage.tif')
</snippet></ROW><ROW><id>19553752</id><snippet>import numpy as np
from tifffile import imsave
image = np.zeros((32, 256, 256), 'uint16')
imsave('multipage.tif', image)
</snippet></ROW><ROW><id>19553788</id><snippet>ABBBBBBBBBBBBBE
^-------------^
</snippet></ROW><ROW><id>19553788</id><snippet>ABBBBBBBBBBBBBE
^------------^
</snippet></ROW><ROW><id>19553788</id><snippet>A.*?B</snippet></ROW><ROW><id>19553788</id><snippet>ABBBBBBBBBBBBBE
^^
</snippet></ROW><ROW><id>19553788</id><snippet>F.*?G</snippet></ROW><ROW><id>19553906</id><snippet>uDict</snippet></ROW><ROW><id>19553906</id><snippet>myObj</snippet></ROW><ROW><id>19553906</id><snippet>mList = myObj.objects.all()
for my_obj in mList:
    my_obj.user = uDict.get(my_obj.C)
</snippet></ROW><ROW><id>19553906</id><snippet>currObj.user</snippet></ROW><ROW><id>19553915</id><snippet>is_number</snippet></ROW><ROW><id>19553915</id><snippet>self</snippet></ROW><ROW><id>19553915</id><snippet>if self.is_number(amt):
</snippet></ROW><ROW><id>19553915</id><snippet>is_number</snippet></ROW><ROW><id>19553915</id><snippet>def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

class Bank_Account():
    account = 0

    def deposit(self, amt):
        self.amt = amt
        if is_number(amt):
            return "Invalid Input"
        else:
            self.account += float(amt)
</snippet></ROW><ROW><id>19554105</id><snippet>ix/loc</snippet></ROW><ROW><id>19554105</id><snippet>mydf.loc[ix,'columns_1'] = 45</snippet></ROW><ROW><id>19554166</id><snippet>In [5]: df = DataFrame(dict(date = date_range('20130101',periods=10)))

In [6]: df
Out[6]: 
                 date
0 2013-01-01 00:00:00
1 2013-01-02 00:00:00
2 2013-01-03 00:00:00
3 2013-01-04 00:00:00
4 2013-01-05 00:00:00
5 2013-01-06 00:00:00
6 2013-01-07 00:00:00
7 2013-01-08 00:00:00
8 2013-01-09 00:00:00
9 2013-01-10 00:00:00

In [7]: df['date']+timedelta(hours=2)-datetime.datetime(1970,1,1)
Out[7]: 
0   15706 days, 02:00:00
1   15707 days, 02:00:00
2   15708 days, 02:00:00
3   15709 days, 02:00:00
4   15710 days, 02:00:00
5   15711 days, 02:00:00
6   15712 days, 02:00:00
7   15713 days, 02:00:00
8   15714 days, 02:00:00
9   15715 days, 02:00:00
Name: date, dtype: timedelta64[ns]

In [9]: (df['date']+timedelta(hours=2)-datetime.datetime(1970,1,1)) / np.timedelta64(1,'s')
Out[9]: 
0    1357005600
1    1357092000
2    1357178400
3    1357264800
4    1357351200
5    1357437600
6    1357524000
7    1357610400
8    1357696800
9    1357783200
Name: date, dtype: float64
</snippet></ROW><ROW><id>19554166</id><snippet>np.timedelta64[ns]</snippet></ROW><ROW><id>19554166</id><snippet>timedelta</snippet></ROW><ROW><id>19554166</id><snippet>total_seconds()</snippet></ROW><ROW><id>19554166</id><snippet>In [10]: s = (df['date']+timedelta(hours=2)-datetime.datetime(1970,1,1))

In [11]: s[0]
Out[11]: numpy.timedelta64(1357005600000000000,'ns')
</snippet></ROW><ROW><id>19554166</id><snippet>ns</snippet></ROW><ROW><id>19554166</id><snippet>In [12]: s[0].astype(int)
Out[12]: 1357005600000000000
</snippet></ROW><ROW><id>19554166</id><snippet>In [18]: s[0].astype('timedelta64[s]')
Out[18]: numpy.timedelta64(1357005600,'s')
</snippet></ROW><ROW><id>19554218</id><snippet>session</snippet></ROW><ROW><id>19554218</id><snippet>NameError: name 'session' is not defined
</snippet></ROW><ROW><id>19554218</id><snippet>session</snippet></ROW><ROW><id>19554314</id><snippet>activity = ast.literal_eval(json.dumps(value))  
</snippet></ROW><ROW><id>19554314</id><snippet>value</snippet></ROW><ROW><id>19554314</id><snippet>json.dumps</snippet></ROW><ROW><id>19554314</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>19554314</id><snippet>value</snippet></ROW><ROW><id>19554314</id><snippet>json.loads</snippet></ROW><ROW><id>19554314</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>19554383</id><snippet>dict.__repr__</snippet></ROW><ROW><id>19554383</id><snippet>PYTHONHASHSEED</snippet></ROW><ROW><id>19554383</id><snippet>self.assertEqual()</snippet></ROW><ROW><id>19554383</id><snippet>assertDictEqual()</snippet></ROW><ROW><id>19554383</id><snippet>u'foo'</snippet></ROW><ROW><id>19554383</id><snippet>str</snippet></ROW><ROW><id>19554383</id><snippet>{u'foo': u'bar}</snippet></ROW><ROW><id>19554484</id><snippet>roll</snippet></ROW><ROW><id>19554484</id><snippet>roll</snippet></ROW><ROW><id>19554484</id><snippet>def roll(sides='6'):
</snippet></ROW><ROW><id>19554484</id><snippet>None</snippet></ROW><ROW><id>19554484</id><snippet>def roll(sides=None):
    if sides is None:
        return special_rule()
</snippet></ROW><ROW><id>19554484</id><snippet>None</snippet></ROW><ROW><id>19554484</id><snippet>_sentinel = object()
def roll(sides=_sentinel):
    if sides is _sentinel:
        return special_rule()
</snippet></ROW><ROW><id>19554484</id><snippet>for i in range(sides == ""):
    return random.randint(1,normal_dice)
</snippet></ROW><ROW><id>19554484</id><snippet>sides == ""</snippet></ROW><ROW><id>19554484</id><snippet>for i in range(1,int(sides)):
    return random.randint(1,int(sides))
</snippet></ROW><ROW><id>19554484</id><snippet>sides</snippet></ROW><ROW><id>19554484</id><snippet>"8"</snippet></ROW><ROW><id>19554484</id><snippet>randint(1, 1)</snippet></ROW><ROW><id>19554484</id><snippet>for i in range(int(sides),1):
    print("None")
</snippet></ROW><ROW><id>19554484</id><snippet>None</snippet></ROW><ROW><id>19554484</id><snippet>None</snippet></ROW><ROW><id>19554484</id><snippet>def roll(sides='6'):
    sides = int(sides)
    if sides &gt; 1:
        return random.randint(1, sides)
    else:
        raise ValueError("Can't roll a {}-sided die".format(sides))
</snippet></ROW><ROW><id>19554484</id><snippet>if</snippet></ROW><ROW><id>19554484</id><snippet>return random.randint(1, sides)</snippet></ROW><ROW><id>19554484</id><snippet>ValueError: empty range for randrange() (1, 0, 0)</snippet></ROW><ROW><id>19554484</id><snippet>ValueError: can't roll a 0-sided die</snippet></ROW><ROW><id>19554514</id><snippet>from BeautifulSoup import BeautifulSoup
from pprint import pprint

markup = '''
&lt;p&gt;&lt;a href="/cgi-bin/...00028))"&gt;Rep Armey, Richard K.&lt;/a&gt; [TX-26]
 - 11/9/1999
&lt;br/&gt;&lt;a href="/cgi-bin/...00274))"&gt;Rep Davis, Thomas M.&lt;/a&gt; [VA-11]
 - 11/9/1999
&lt;br/&gt;&lt;a href="/cgi-bin/...00282))"&gt;Rep DeLay, Tom&lt;/a&gt; [TX-22]
 - 11/9/1999
 '''

soup = BeautifulSoup(markup)
</snippet></ROW><ROW><id>19554514</id><snippet>links = soup.findAll('a')
pprint(links)
</snippet></ROW><ROW><id>19554514</id><snippet>[&lt;a href="/cgi-bin/...00028))"&gt;Rep Armey, Richard K.&lt;/a&gt;,
 &lt;a href="/cgi-bin/...00274))"&gt;Rep Davis, Thomas M.&lt;/a&gt;,
 &lt;a href="/cgi-bin/...00282))"&gt;Rep DeLay, Tom&lt;/a&gt;]
</snippet></ROW><ROW><id>19554514</id><snippet>text_0 = links[0].findNextSibling(text=True)
pprint(text_0)
</snippet></ROW><ROW><id>19554514</id><snippet>\n</snippet></ROW><ROW><id>19554514</id><snippet>u' [TX-26]\n - 11/9/1999\n'
</snippet></ROW><ROW><id>19554514</id><snippet>next_text = [ln.findNextSibling(text=True) for ln in links]
pprint(next_text)
</snippet></ROW><ROW><id>19554514</id><snippet>[u' [TX-26]\n - 11/9/1999\n',
 u' [VA-11]\n - 11/9/1999\n',
 u' [TX-22]\n - 11/9/1999\n ']
</snippet></ROW><ROW><id>19554813</id><snippet>import turtle
import math

def triangleBuild(width,height):
    l = ( height**2 + (width/2.0)**2)**0.5
    alfa = math.atan2(height, width/2.0) # To compute alfa
    alfa = math.degrees(alfa)
    alfa = 180.0 - alfa 
    turtle.forward(width)
    turtle.left(alfa)
    turtle.forward(l)
    turtle.left(2*(180-alfa))
    turtle.forward(l)

turtle.penup()
turtle.goto(10,20)
turtle.pendown()

width = 200
height = 100
triangleBuild(width,height)
</snippet></ROW><ROW><id>19554833</id><snippet>raw_input</snippet></ROW><ROW><id>19554833</id><snippet>message = ''
while True:
    ch = sys.stdin.read(1)
    if ch == '\x1b':
        exit(0)
    elif ch == '\n':
        break
    message += ch
</snippet></ROW><ROW><id>19554833</id><snippet>sys.stdin</snippet></ROW><ROW><id>19554833</id><snippet>readline</snippet></ROW><ROW><id>19554833</id><snippet>stdin</snippet></ROW><ROW><id>19554833</id><snippet>raw_input</snippet></ROW><ROW><id>19554833</id><snippet>sys.stdin.isatty()</snippet></ROW><ROW><id>19554833</id><snippet>msvcrt</snippet></ROW><ROW><id>19554833</id><snippet>import sys, msvcrt
assert sys.stdin.isatty(), "Can't run without a console to run on"
message = u''
while True:
    ch = msvcrt.getwche()
    if ch == u'\x1b':
        exit(0)
    elif ch == u'\n':
        break
    message += ch
</snippet></ROW><ROW><id>19554833</id><snippet>raw_input</snippet></ROW><ROW><id>19554833</id><snippet>unicode</snippet></ROW><ROW><id>19554833</id><snippet>str</snippet></ROW><ROW><id>19554833</id><snippet>str</snippet></ROW><ROW><id>19554833</id><snippet>u</snippet></ROW><ROW><id>19554833</id><snippet>getche</snippet></ROW><ROW><id>19554833</id><snippet>getwche</snippet></ROW><ROW><id>19554833</id><snippet>termios</snippet></ROW><ROW><id>19554833</id><snippet>sys.stdin.isatty()</snippet></ROW><ROW><id>19554833</id><snippet>[termios</snippet></ROW><ROW><id>19554833</id><snippet>tty</snippet></ROW><ROW><id>19554833</id><snippet>sys.stdin.buffer</snippet></ROW><ROW><id>19554833</id><snippet>sys.stdin</snippet></ROW><ROW><id>19554833</id><snippet>import sys, termios, tty
assert sys.stdin.isatty(), "Can't run without a console to run on"
fd = sys.stdin.fileno()
stash = termios.tcgetattr(fd)
try:
    tty.setraw(fd)
    newterm = termios.tcgetattr(fd)
    newterm[tty.LFLAG] |= termios.ECHO
    termios.tcsetattr(fd)
    message = b''
    while True:
        ch = sys.stdin.buffer.read(1)
        if ch == b'\x1b':
            exit(0)
        elif ch == b'\n':
            break
        else:
            message += ch
    message = message.decode(sys.stdin.encoding)
finally:
    termios.tcsetattr(fd, termios.TCSANOW, stash)
</snippet></ROW><ROW><id>19554833</id><snippet>unicode</snippet></ROW><ROW><id>19554833</id><snippet>raw_input</snippet></ROW><ROW><id>19554833</id><snippet>str</snippet></ROW><ROW><id>19554833</id><snippet>decode</snippet></ROW><ROW><id>19554833</id><snippet>tty</snippet></ROW><ROW><id>19554833</id><snippet>termios</snippet></ROW><ROW><id>19554833</id><snippet>tty</snippet></ROW><ROW><id>19554833</id><snippet>termios</snippet></ROW><ROW><id>19555002</id><snippet>"channel[]"</snippet></ROW><ROW><id>19555002</id><snippet>&lt;form action="{{ url_for('timeline') }}" method="post"&gt;
   {% for each_tag in tags %}
    &lt;input type="checkbox" name="channel" value="{{each}}" &gt;
   {% endfor %} 
    &lt;button type="submit"&gt; submit &lt;/button&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>19555002</id><snippet>request.form.getlist()</snippet></ROW><ROW><id>19555002</id><snippet>@app.route('/timeline.html', methods=['POST','GET'])
def timeline(request):
    checked = request.form.getlist('channel')

    # do something with checked array

    return render_template('timeline.html')
</snippet></ROW><ROW><id>19555024</id><snippet>lower</snippet></ROW><ROW><id>19555024</id><snippet>()</snippet></ROW><ROW><id>19555024</id><snippet>string.lower()</snippet></ROW><ROW><id>19555024</id><snippet>replay = raw_input('Play again? ').lower()
</snippet></ROW><ROW><id>19555024</id><snippet>if replay.lower() == "yes" or "y":
    #execute
</snippet></ROW><ROW><id>19555024</id><snippet>if replay == 'yes' or replay == 'y':
    #execute
</snippet></ROW><ROW><id>19555024</id><snippet>import sys</snippet></ROW><ROW><id>19555024</id><snippet>sys</snippet></ROW><ROW><id>19555170</id><snippet>import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning,
                        module="pandas", lineno=570)
</snippet></ROW><ROW><id>19555353</id><snippet>import StartGame</snippet></ROW><ROW><id>19555353</id><snippet>Storyline</snippet></ROW><ROW><id>19555353</id><snippet>StartGame1</snippet></ROW><ROW><id>19555353</id><snippet># Storyline.py
def startGame1(currentPokemon):
    print ("Welcome to the H.Q of I.O.D")
    print ("I am Professor Steel.")
    print ("I see you have picked ", currentPokemon)
</snippet></ROW><ROW><id>19555353</id><snippet>startGame</snippet></ROW><ROW><id>19555353</id><snippet>Storyline.startGame1(inputKK)</snippet></ROW><ROW><id>19555353</id><snippet>startGame1</snippet></ROW><ROW><id>19555353</id><snippet>startGame</snippet></ROW><ROW><id>19555408</id><snippet>numpy</snippet></ROW><ROW><id>19555408</id><snippet>array</snippet></ROW><ROW><id>19555587</id><snippet>L = L and L.string
</snippet></ROW><ROW><id>19555587</id><snippet>if L is not None:
    L = L.string
</snippet></ROW><ROW><id>19555587</id><snippet>if L:
    L = L.string
</snippet></ROW><ROW><id>19555587</id><snippet>getattr</snippet></ROW><ROW><id>19555587</id><snippet>L = getattr(L, 'string', None)
</snippet></ROW><ROW><id>19555819</id><snippet>q.save()
</snippet></ROW><ROW><id>19555942</id><snippet>TypeError</snippet></ROW><ROW><id>19555942</id><snippet>int()</snippet></ROW><ROW><id>19555942</id><snippet>input()</snippet></ROW><ROW><id>19555942</id><snippet>str</snippet></ROW><ROW><id>19555942</id><snippet>ValueError</snippet></ROW><ROW><id>19555942</id><snippet>int</snippet></ROW><ROW><id>19555942</id><snippet>while</snippet></ROW><ROW><id>19555942</id><snippet>while True:
    try:
        newamount=int(input('Enter the new amount:'))
        break
    except ValueError:
        print ("error")
</snippet></ROW><ROW><id>19555942</id><snippet>itertools.count</snippet></ROW><ROW><id>19555942</id><snippet>for</snippet></ROW><ROW><id>19555942</id><snippet>from itertools import count
for c in count():
    try:
        newamount=int(input('Enter the new amount:'))
        break
    except ValueError:
        print ("error", c)
</snippet></ROW><ROW><id>19555966</id><snippet>a0 -a1 +a2 -a3 +a4 ...
</snippet></ROW><ROW><id>19555966</id><snippet>a</snippet></ROW><ROW><id>19555966</id><snippet>s0=a0  s1=a0-a1  s2=a0-a1+a2  s3=a0-a1+a2-a3  s4=a0-a1+a2-a3+a4 ...
</snippet></ROW><ROW><id>19555966</id><snippet>(s0+s1)/2  (s1+s2)/2  (s2+s3)/2  (s3+s4)/2 ...
</snippet></ROW><ROW><id>19555966</id><snippet>from math import pi

def leibniz():
    from itertools import count
    s, x = 1.0, 0.0
    for i in count(1, 2):
        x += 4.0*s/i
        s = -s
        yield x

def avg(seq):
    a = next(seq)
    while True:
        b = next(seq)
        yield (a + b) / 2.0
        a = b

base = leibniz()
d1 = avg(base)
d2 = avg(d1)
d3 = avg(d2)

for i in range(20):
    x = next(d3)
    print("{:.6f} {:8.4%}".format(x, (x - pi)/pi))
</snippet></ROW><ROW><id>19555966</id><snippet>3.161905  0.6466%
3.136508 -0.1619%
3.143434  0.0586%
3.140770 -0.0262%
3.142014  0.0134%
3.141355 -0.0076%
3.141736  0.0046%
3.141501 -0.0029%
3.141654  0.0020%
3.141550 -0.0014%
3.141623  0.0010%
3.141570 -0.0007%
3.141610  0.0005%
3.141580 -0.0004%
3.141603  0.0003%
3.141585 -0.0003%
3.141599  0.0002%
3.141587 -0.0002%
3.141597  0.0001%
3.141589 -0.0001%
</snippet></ROW><ROW><id>19555966</id><snippet>&gt;&gt;&gt; next(base)
3.099944032373808
</snippet></ROW><ROW><id>19556082</id><snippet>def random_person(request):
    return HttpResponseRedirect(
        reverse('home.views.film_chart_view') + \
        "?q=" + get_person.short + \
        "&amp;is_random=1"
    )

def film_chart_view(request):
    is_random = 'is_random 'in request.GET
</snippet></ROW><ROW><id>19556082</id><snippet>url(r'^film_chart_view/$', 'home.views.film_chart_view', name ='film_chart_view'),
url(r'^film_chart_view/(?P&lt;is_random&gt;.*)/$', 'home.views.film_chart_view', name ='film_chart_view_random'),
url(r'^random/$', 'home.views.random_person'),


def random_person(request):
    return HttpResponseRedirect(
        reverse('home.views.film_chart_view', kwargs={'is_random': '1'}) + \
        "?q=" + get_person.short
    )
</snippet></ROW><ROW><id>19556082</id><snippet>def film_chart_view(request, is_random=None):
    if is_random:
        ...
</snippet></ROW><ROW><id>19556269</id><snippet>.im_self</snippet></ROW><ROW><id>19556269</id><snippet>matplotlib</snippet></ROW><ROW><id>19556269</id><snippet>mpl_connect()</snippet></ROW><ROW><id>19556269</id><snippet>Foo().callback</snippet></ROW><ROW><id>19556269</id><snippet>mpl_connect()</snippet></ROW><ROW><id>19556269</id><snippet>mpl_connect()</snippet></ROW><ROW><id>19556269</id><snippet>Py_INCREF()</snippet></ROW><ROW><id>19556546</id><snippet>format()</snippet></ROW><ROW><id>19556546</id><snippet>{i:length}</snippet></ROW><ROW><id>19556546</id><snippet>i</snippet></ROW><ROW><id>19556546</id><snippet>length</snippet></ROW><ROW><id>19556546</id><snippet>def dvdprintsoftlist():
    list_of_DVDsuppliers=[["a","m",15],["w","p",34]]
    print(list_of_DVDsuppliers)
    print
    ''' printing the available DVDstocks,supplier's details '''
    print("This is your current list of stock")
    print("Supplier Name\t\tSoftwear Name\t\tAmount")
    print("----------------------------------------------------------------")
    for [name, softname, amount] in list_of_DVDsuppliers:
        print("{0:23} {1:23} {2:5}".format(name, softname, amount))
        print("----------------------------------------------------------------")
    print("")

dvdprintsoftlist()
</snippet></ROW><ROW><id>19556623</id><snippet>$ service apache2 restart</snippet></ROW><ROW><id>19556783</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>19556783</id><snippet>&lt;</snippet></ROW><ROW><id>19556783</id><snippet>&lt;</snippet></ROW><ROW><id>19556783</id><snippet>&amp;</snippet></ROW><ROW><id>19556783</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>19556915</id><snippet>dict</snippet></ROW><ROW><id>19556990</id><snippet>format</snippet></ROW><ROW><id>19556990</id><snippet>{_}</snippet></ROW><ROW><id>19556990</id><snippet>_</snippet></ROW><ROW><id>19556990</id><snippet>KeyError: '_'</snippet></ROW><ROW><id>19556991</id><snippet>key</snippet></ROW><ROW><id>19556991</id><snippet>sorted</snippet></ROW><ROW><id>19556991</id><snippet>list.sort</snippet></ROW><ROW><id>19556991</id><snippet>reverse</snippet></ROW><ROW><id>19556991</id><snippet>True</snippet></ROW><ROW><id>19556991</id><snippet>from operator import mul
print sorted([(3,2,3), (2,2,2), (6,4,1)], key=lambda tup: reduce(mul, tup), reverse=True)
</snippet></ROW><ROW><id>19557306</id><snippet>np.maximum(A,B)</snippet></ROW><ROW><id>19557372</id><snippet>awk</snippet></ROW><ROW><id>19557372</id><snippet>awk '{if ($1&lt;prev){next}}{prev=$1}1' inputfile
</snippet></ROW><ROW><id>19557372</id><snippet>$ awk '{if ($1&lt;prev){next}}{prev=$1}1' inputfile
1      "there"
23489  "abc"
23490  "hello"
23491  "hi"
23492  "stackoverflow"
</snippet></ROW><ROW><id>19557372</id><snippet>prev=$1</snippet></ROW><ROW><id>19557372</id><snippet>prev</snippet></ROW><ROW><id>19557372</id><snippet>if ($1&lt;prev){next}</snippet></ROW><ROW><id>19557372</id><snippet>1</snippet></ROW><ROW><id>19557372</id><snippet>awk '{if ($1&lt;prev){next}}{prev=$1; gsub("\"", "", $2); $2=substr($2,0,3);$2="\""$2"\""}1' inputfile
</snippet></ROW><ROW><id>19557396</id><snippet>commit=False</snippet></ROW><ROW><id>19557396</id><snippet>exclude</snippet></ROW><ROW><id>19557396</id><snippet>fields</snippet></ROW><ROW><id>19557396</id><snippet>class PhotoForm(ModelForm):
    class Meta:
        model = Photo
        exclude = ['location', 'user']
</snippet></ROW><ROW><id>19557477</id><snippet>\n</snippet></ROW><ROW><id>19557477</id><snippet>infile.write(B(i) + '\n')</snippet></ROW><ROW><id>19557510</id><snippet>next in ["taunt", "lure", "yell", "scream", "shout"]</snippet></ROW><ROW><id>19557510</id><snippet>["taunt", "lure", "yell", "scream", "shout"] in next</snippet></ROW><ROW><id>19557547</id><snippet>bin</snippet></ROW><ROW><id>19557547</id><snippet>def bin2(x):
    binary_digits = []

    while x:
        binary_digits.append(x &amp; 1)
        x &gt;&gt;= 1

    return "".join(str(digit) for digit in reversed(binary_digits))
</snippet></ROW><ROW><id>19557845</id><snippet>datetime</snippet></ROW><ROW><id>19557845</id><snippet>try:
    datetime.strptime(clock,'%H%M%S')
except ValueError as e:
    #raise whatever exception you want here, or reraise
</snippet></ROW><ROW><id>19558025</id><snippet>input</snippet></ROW><ROW><id>19558025</id><snippet>inputData</snippet></ROW><ROW><id>19558025</id><snippet>reflace=0
inputData = "55,1,1,1".split(",")
# Now find the first field from comma
inputData[reflace] = round( float( inputData[reflace] ) , 2) + 0.01

print inputData[reflace] ### Will print 55.01

ranges = [(-1,1)]
if any(lower &lt;= inputData[reflace] &lt;= upper for (lower, upper) in ranges):
  print "+ " + inputData
</snippet></ROW><ROW><id>19558059</id><snippet>data = csv.reader(open(alignment_filename,'r'))
data.next()

print all([row[0]&lt;row[1] for row in data])
</snippet></ROW><ROW><id>19558170</id><snippet>.U.E(?:.(?:E(?:..?)?)?)?$</snippet></ROW><ROW><id>19558170</id><snippet>def nested_pattern(s):
    if s:
        return '(?:' + s[0] + nested_pattern(s[1:]) + ')?'
    else:
        return ''

import re
regex = re.compile(r'.U.E' + nested_pattern(r'.E..') + '$')

for word in ('TUB', 'TUBE', 'TEBU', 'TUBES', 'PURETE', 'TUBELEX', 'TUBELESS', 'SURELY'):
    print word, bool(regex.match(word))
</snippet></ROW><ROW><id>19558170</id><snippet>TUB False
TUBE True
TEBU False
TUBES True
PURETE True
TUBELEX True
TUBELESS True
SURELY False
</snippet></ROW><ROW><id>19558508</id><snippet>drop_duplicates</snippet></ROW><ROW><id>19558508</id><snippet>In [11]: df.drop_duplicates(cols=list('ABCD'))
Out[11]: 
   A      B   C      D
0  1  53704  hf  51602
2  1  53704  hf  53802
3  1  53704  ss  53802
5  2  12811  hf  54205
6  2  12811  hx  50503
</snippet></ROW><ROW><id>19558508</id><snippet>In [12]: df.drop_duplicates()
Out[12]: 
   A      B   C      D
0  1  53704  hf  51602
2  1  53704  hf  53802
3  1  53704  ss  53802
5  2  12811  hf  54205
6  2  12811  hx  50503
</snippet></ROW><ROW><id>19558570</id><snippet>thread</snippet></ROW><ROW><id>19558570</id><snippet>threading.Thread</snippet></ROW><ROW><id>19558570</id><snippet>from threading import Thread


def check_url(url):
    # some code

threads = []
for url in url_ip_hash.keys():
    t = Thread(target=check_url, (url, ))
    t.start()
    threads.append(t)

# join all threads
for t in threads:
    t.join()
</snippet></ROW><ROW><id>19558573</id><snippet>"-n"</snippet></ROW><ROW><id>19558573</id><snippet>subprocess.call</snippet></ROW><ROW><id>19558573</id><snippet>subprocess.call(["nice", "-n", "19", "echo", "Hello there"], env=os.environ)
</snippet></ROW><ROW><id>19558707</id><snippet>tail</snippet></ROW><ROW><id>19558707</id><snippet>tac</snippet></ROW><ROW><id>19558707</id><snippet>Popen</snippet></ROW><ROW><id>19558707</id><snippet>filename = '/var/log/nginx/access.log'
# Command to read file from the end
cmd = sys.platform == 'darwin' and ['tail', '-r', filename] or ['tac', filename]
# But if you want read it from beginning, use the following
#cmd = ['cat', filename]

proc = Popen(cmd, close_fds=True, stdout=PIPE, stderr=PIPE)
output = proc.stdout

FORMAT = [
    # 'foo',
    # 'bar',
]
def extract_log_data(line):
    '''Extact data in you log format, normalize it.
    '''
    return dict(zip(FORMAT, line))

csv.register_dialect('nginx', delimiter=' ', quoting=csv.QUOTE_MINIMAL)
lines = csv.reader(output, dialect='nginx')
started_at = dt.datetime.utcnow()
for line in lines:
    data = extract_log_data(line)
    print data
    if (dt.datetime.utcnow() - started_at) &gt;= dt.timedelta(seconds=10):
        break

output.close()
proc.terminate()
</snippet></ROW><ROW><id>19558956</id><snippet>recovery = {'full_path': '/home/michael/Data',
 'items': {'UpgradeToCentOS5': {'full_path': '/home/michael/Data/UpgradeToCentOS5',
                                'type': 'f',
                                'versions': ['current', '09/10/12']},
           'basic_debian': {'full_path': '/home/michael/Data/basic_debian',
                            'type': 'f',
                            'versions': ['current']},
           'deploy.tgz': {'full_path': '/home/michael/Data/deploy.tgz',
                          'type': 'f',
                          'versions': ['current']},
           'firewall': {'full_path': '/home/michael/Data/firewall',
                        'type': 'f',
                        'versions': ['current']},
           'legalholder.sh': {'full_path': '/home/michael/Data/legalholder.sh',
                              'type': 'f',
                              'versions': ['current']},
           'lists': {'full_path': '/home/michael/Data/lists',
                     'items': {'boothosts': {'full_path': '/home/michael/Data/lists/boothosts',
                                             'type': 'f',
                                             'versions': ['current']},
                               'checklist': {'full_path': '/home/michael/Data/lists/checklist',
                                             'type': 'f',
                                             'versions': ['current']},
                               'ns_ip': {'full_path': '/home/michael/Data/lists/ns_ip',
                                         'type': 'f',
                                         'versions': ['current']},
                               'server_info': {'full_path': '/home/michael/Data/lists/server_info',
                                               'type': 'f',
                                               'versions': ['current']},
                               'temp': {'full_path': '/home/michael/Data/lists/temp',
                                        'type': 'f',
                                        'versions': ['current']},
                               'tsm_clients': {'full_path': '/home/michael/Data/lists/tsm_clients',
                                               'type': 'f',
                                               'versions': ['current']}},
                     'type': 'd',
                     'versions': ['current']},
           'salt': {'full_path': '/home/michael/Data/salt',
                    'type': 'f',
                    'versions': ['current']},
           'std-srv': {'full_path': '/home/michael/Data/std-srv',
                       'type': 'f',
                       'versions': ['current']},
           'upgrade_debian_6': {'full_path': '/home/michael/Data/upgrade_debian_6',
                                'type': 'f',
                                'versions': ['current']},
           'using-imaps': {'full_path': '/home/michael/Data/using-imaps',
                           'type': 'f',
                           'versions': ['current']},
           'xiv_online_resize': {'full_path': '/home/michael/Data/xiv_online_resize',
                                 'type': 'f',
                                 'versions': ['current']}},
 'type': 'd',
 'versions': ['current']}

import os

def get_parent_dirs(path):
    parents = []
    x = path.split('/')[1:-1]
    for i in range(len(x)):
        parents.append('/'.join(x[0:i+1]))
    return parents

# Get a list of files and versions from the dictionary
items = []
pending = [recovery]
while pending:
    x = pending.pop(0)
    for item in x['items']:
        item = x['items'][item]
        if item.has_key('items'): # a directory
            pending.append(item)
        else: # a file
            items.append((item['full_path'], item['versions']))
items.sort()

parent_dirs = []
for path, versions in items:

    # Print parent directories if necessary
    for directory in get_parent_dirs(path):
        if not directory in parent_dirs:
            parent_dirs.append(directory)
            print '%s /%s' % (len(directory.split('/'))*'-', os.path.split(directory)[1])

    # Print file versions
    directory, filename = os.path.split(path)
    padding = len(path.split('/'))-1
    print '%s %s' % (padding*'-', filename)
    for version in versions:
        print '%s [] Version: %s' % (' '*padding, version)
</snippet></ROW><ROW><id>19559252</id><snippet>['6000', '3000', '30', '100']
</snippet></ROW><ROW><id>19559252</id><snippet>['6000', '3000', '100', '30']
</snippet></ROW><ROW><id>19559252</id><snippet>def jewel_list(lines):
    jewels = []
    for item in lines:
        jewels.append(item.split())
    jewels = sorted(jewels, reverse= True)
    jewel_dict = {}
    for item in jewels:
        jewel_dict[int(item[1])] = item[0]  # changed line
    return jewel_dict
</snippet></ROW><ROW><id>19559252</id><snippet>The greedy approach would steal $6130 of jewels.
</snippet></ROW><ROW><id>19559319</id><snippet>soup.a['name']
</snippet></ROW><ROW><id>19559319</id><snippet>a</snippet></ROW><ROW><id>19559319</id><snippet>x = """&lt;x&gt;&lt;a name="foo"/&gt;&lt;a name="bar"/&gt;&lt;/x&gt;"""
s = bs4.BeautifulSoup(x)
for a in s.findChildren("a"):
    print(a["name"])
</snippet></ROW><ROW><id>19559398</id><snippet>join</snippet></ROW><ROW><id>19559398</id><snippet>text = ' '.join([lmtzr.lemmatize(word) for word in text.split()])
</snippet></ROW><ROW><id>19559398</id><snippet>text = ' '.join(lmtzr.lemmatize(word) for word in text.split())
</snippet></ROW><ROW><id>19559476</id><snippet>-r file_path</snippet></ROW><ROW><id>19559476</id><snippet>requirements/
  base.txt
  python2.txt
  python3.txt
</snippet></ROW><ROW><id>19559476</id><snippet>-r base.txt
Django==1.4 #python2 only packages
</snippet></ROW><ROW><id>19559476</id><snippet>-r base.txt
Django==1.5 #python3 only packages
</snippet></ROW><ROW><id>19559497</id><snippet>for element in geomShapeCollection:
</snippet></ROW><ROW><id>19559497</id><snippet>for element in db.geomShapeCollectionName.find(timeout=False):
    db.collectionName.update({"coordinates":{"$geoWithin":{"$geometry":element["geometry_part"]}}}, {"$set":{"Update_key": update_value}}, multi = True, timeout=False)
</snippet></ROW><ROW><id>19559664</id><snippet>sudo ARCHFLAGS="-arch i386 -arch x86_64" pip install lxml
</snippet></ROW><ROW><id>19559677</id><snippet>photo</snippet></ROW><ROW><id>19559677</id><snippet>(r"^image/$", ...
(r"^$", ...
</snippet></ROW><ROW><id>19559788</id><snippet>mylist = ['LION', 'tv', 'TIGER', 'keyboard', 'cd-writer','ELEPHANT']
[word for word in mylist if word==word.lower()]
</snippet></ROW><ROW><id>19559812</id><snippet>perl</snippet></ROW><ROW><id>19559812</id><snippet>grep -P '^\d+\t+\S+' infile
</snippet></ROW><ROW><id>19559812</id><snippet>^</snippet></ROW><ROW><id>19559812</id><snippet>\d+</snippet></ROW><ROW><id>19559812</id><snippet>\t+</snippet></ROW><ROW><id>19559812</id><snippet>\S+</snippet></ROW><ROW><id>19559812</id><snippet>1   "hi"
2   "hello"
6   "there" 
7   "there1"
</snippet></ROW><ROW><id>19559857</id><snippet>soup.find_all</snippet></ROW><ROW><id>19559857</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(source_code)
for item in soup.find_all('a'):
    print item['name']
</snippet></ROW><ROW><id>19560027</id><snippet>urlpatterns</snippet></ROW><ROW><id>19560027</id><snippet>url(r'about/', include('about.urls', namespace = 'About_page')), )
</snippet></ROW><ROW><id>19560027</id><snippet>from django.conf.urls import patterns, url
from about import views

urlpatterns = patterns('',
    url(r'^$', views.index, name = 'index'),)
</snippet></ROW><ROW><id>19560027</id><snippet>from django.conf.urls import patterns, include, url

urlpatterns = patterns('',
    url(r'home/', include('home.urls', namespace = 'home')),
    url(r'^about/$', 'about.views.index', name="About_page_index"),
)
</snippet></ROW><ROW><id>19560097</id><snippet>zip</snippet></ROW><ROW><id>19560097</id><snippet>&gt;&gt;&gt; ["{}{:02}".format(b_, a_) for a_, b_ in zip(a, b)]
['asp100', 'asp101', 'asp105', 'asp106', 'asp210', 'asp211']
</snippet></ROW><ROW><id>19560156</id><snippet>import urllib
from bs4 import BeautifulSoup

url = "http://www.microsoft.com/en-us/download/confirmation.aspx?id=17851"
pageurl = urllib.urlopen(url)
soup = BeautifulSoup(pageurl)

urls = []
for d in soup.select("p.start-download [href]"):
    urls.append(d.attrs['href'])

print urls[0]
</snippet></ROW><ROW><id>19560156</id><snippet>urls = [d['href'] for d in soup.select("p.start-download [href]")]

print urls[0]
</snippet></ROW><ROW><id>19560156</id><snippet>urls</snippet></ROW><ROW><id>19560184</id><snippet>import os

def print_file_contents(file_path):
    assert os.path.exists(file_path), "File does not exist: {}".format(file_path)
    with open(file_path) as f:
        print (f.read())

user_input = raw_input("Enter a file path: ") # just input(...) in Python 3+
print_file_contents(user_input)
</snippet></ROW><ROW><id>19560286</id><snippet>&gt;&gt;&gt; func.__code__.co_code
'd\x01\x00}\x00\x00d\x00\x00S'
</snippet></ROW><ROW><id>19560286</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>19560286</id><snippet>d</snippet></ROW><ROW><id>19560286</id><snippet>STORE_FAST</snippet></ROW><ROW><id>19560286</id><snippet>}</snippet></ROW><ROW><id>19560286</id><snippet>dis</snippet></ROW><ROW><id>19560286</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>19560286</id><snippet>co_consts[consti]</snippet></ROW><ROW><id>19560286</id><snippet>co_consts</snippet></ROW><ROW><id>19560286</id><snippet>&gt;&gt;&gt; func.__code__.co_consts
(None, 1)
</snippet></ROW><ROW><id>19560286</id><snippet>dis</snippet></ROW><ROW><id>19560286</id><snippet>1</snippet></ROW><ROW><id>19560286</id><snippet>STORE_FAST</snippet></ROW><ROW><id>19560286</id><snippet>co_varnames[var_num]</snippet></ROW><ROW><id>19560286</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>19560286</id><snippet>1</snippet></ROW><ROW><id>19560286</id><snippet>co_varnames</snippet></ROW><ROW><id>19560286</id><snippet>&gt;&gt;&gt; func.__code__.co_varnames
('x',)
</snippet></ROW><ROW><id>19560286</id><snippet>dis</snippet></ROW><ROW><id>19560286</id><snippet>x</snippet></ROW><ROW><id>19560286</id><snippet>1</snippet></ROW><ROW><id>19560286</id><snippet>x</snippet></ROW><ROW><id>19560286</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>19560286</id><snippet>None</snippet></ROW><ROW><id>19560286</id><snippet>RETURN_VALUE</snippet></ROW><ROW><id>19560286</id><snippet>None</snippet></ROW><ROW><id>19560286</id><snippet>None</snippet></ROW><ROW><id>19560286</id><snippet>return</snippet></ROW><ROW><id>19560286</id><snippet>dis</snippet></ROW><ROW><id>19560286</id><snippet>&gt;&gt;&gt; dis.dis(func)
  2           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (x)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE        
</snippet></ROW><ROW><id>19560286</id><snippet>2</snippet></ROW><ROW><id>19560286</id><snippet>co_lnotab</snippet></ROW><ROW><id>19560286</id><snippet>co_firstlineno</snippet></ROW><ROW><id>19560286</id><snippet>dis</snippet></ROW><ROW><id>19560327</id><snippet>for i in [c for c in coinValueList if c &lt;= change]:
</snippet></ROW><ROW><id>19560327</id><snippet>coins = []
for c in coinValueList:
    if c &lt;= change:
        coins.append(c)

for i in coins:
    #do your stuff
</snippet></ROW><ROW><id>19560707</id><snippet>ctypes</snippet></ROW><ROW><id>19560932</id><snippet>s = x.groupby('ID1').apply(calc)
DataFrame(s.tolist(),index = s.index,columns = ['ID2','top3avg'])
</snippet></ROW><ROW><id>19560932</id><snippet>Out[156]:
                     ID2    top3avg
ID1     
6073165338_1     6073165338  94.5
</snippet></ROW><ROW><id>19560932</id><snippet>def calc(grp):
    return DataFrame([(grp.ID2.iloc[0],grp.score[:2].mean())],columns=['ID2','top3avg'])
</snippet></ROW><ROW><id>19560932</id><snippet>x.groupby('ID1').apply(calc)</snippet></ROW><ROW><id>19560932</id><snippet>                         ID2    top3avg
ID1         
6073165338_1    0    6073165338  94.5
</snippet></ROW><ROW><id>19560949</id><snippet>    from nltk.corpus import stopwords

    cachedStopWords = stopwords.words("english")

    def testFuncOld():
        text = 'hello bye the the hi'
        text = ' '.join([word for word in text.split() if word not in stopwords.words("english")])

    def testFuncNew():
        text = 'hello bye the the hi'
        text = ' '.join([word for word in text.split() if word not in cachedStopWords])

    if __name__ == "__main__":
        for i in xrange(10000):
            testFuncOld()
            testFuncNew()
</snippet></ROW><ROW><id>19561196</id><snippet>cmap_manga[...]
cmap_manga = np.array(cmap_manga)/255.0

ctmp = []
i = 0
while i &lt; len(cmap_manga):
    ctmp.append([cmap_manga[i], cmap_manga[i+1], cmap_manga[i+2]])
    i += 3

mangacm = ListedColormap.ListedColormap(ctmp, name='manga', N=None)
</snippet></ROW><ROW><id>19561220</id><snippet>temp={}
# we want just the unique values here for the dict
for x in enumerate(df2['B'].unique().tolist()):
    val, key = x
    temp[key]=val
temp

Out[106]:
{'a': 0, 'b': 1, 'c': 2, 'd': 3}

# now add this column

In [108]:

df2['C']=df2['B'].map(temp)
df2
Out[108]:
   A  B  C
0  0  a  0
1  1  b  1
2  2  c  2
3  0  d  3

# now pass the two columns to create the sparse matrix:

In [109]:

df2[['A', 'C',]].to_sparse(fill_value=0)
Out[109]:
   A  C
0  0  0
1  1  1
2  2  2
3  0  3
</snippet></ROW><ROW><id>19561504</id><snippet>def bar(self, value=2):
    self.a = value
</snippet></ROW><ROW><id>19561504</id><snippet>value</snippet></ROW><ROW><id>19561504</id><snippet>2</snippet></ROW><ROW><id>19561504</id><snippet>&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar()
&gt;&gt;&gt; foo.a
2
&gt;&gt;&gt; foo.bar(5)
&gt;&gt;&gt; foo.a
5
</snippet></ROW><ROW><id>19561504</id><snippet>import datetime

def ham(now=datetime.datetime.now()):
    print now
</snippet></ROW><ROW><id>19561504</id><snippet>now</snippet></ROW><ROW><id>19561504</id><snippet>bar</snippet></ROW><ROW><id>19561504</id><snippet>&gt;&gt;&gt; ham()
2013-10-24 10:20:26.024775
&gt;&gt;&gt; # wait some time
...
&gt;&gt;&gt; ham()
2013-10-24 10:20:26.024775
</snippet></ROW><ROW><id>19561504</id><snippet>def eggs(param, value=[]):
    value.append(param)
    print value
</snippet></ROW><ROW><id>19561504</id><snippet>eggs(2)</snippet></ROW><ROW><id>19561504</id><snippet>value</snippet></ROW><ROW><id>19561504</id><snippet>2</snippet></ROW><ROW><id>19561504</id><snippet>&gt;&gt;&gt; eggs(2)
[2]
&gt;&gt;&gt; eggs(2)
[2, 2]
&gt;&gt;&gt; eggs(2)
[2, 2, 2]
</snippet></ROW><ROW><id>19561550</id><snippet>from splinter import Browser

with Browser('firefox') as browser:
    browser.visit('http://yourwebsite.com')
    browser.find_by_name('element_name').click()
    do some other stuff...
</snippet></ROW><ROW><id>19561792</id><snippet>stream.statuses.filter(track='Football game',locations='22,70,24,74')
</snippet></ROW><ROW><id>19561792</id><snippet>stream.statuses.filter(track='Football, game',locations='22,70,24,74')
</snippet></ROW><ROW><id>19561819</id><snippet>age</snippet></ROW><ROW><id>19561819</id><snippet>name</snippet></ROW><ROW><id>19561819</id><snippet>&gt;&gt;&gt; uniq = {d['name']: d.get('age') for d in sorted(l, key=lambda d : d.get('age'))}
&gt;&gt;&gt; uniq
{'john': 99, 'mark': 21}
&gt;&gt;&gt; [{'name': k, 'age': v} for k, v in uniq.items()]
[{'age': 99, 'name': 'john'}, {'age': 21, 'name': 'mark'}]
</snippet></ROW><ROW><id>19561822</id><snippet>getLogger</snippet></ROW><ROW><id>19561822</id><snippet>&gt;&gt;&gt; print(effectivehandlers(logger))
[&lt;logging.StreamHandler object at 0x305ad90&gt;, &lt;logging.FileHandler object at 0x305ae10&gt;]
&gt;&gt;&gt; logging.getLogger(name) #the same logger
&lt;logging.Logger object at 0x7fa08fb9b2d0&gt;
&gt;&gt;&gt; print(effectivehandlers(logger))
[&lt;logging.StreamHandler object at 0x305ad90&gt;, &lt;logging.FileHandler object at 0x305ae10&gt;, &lt;logging.StreamHandler object at 0x305ad90&gt;, &lt;logging.FileHandler object at 0x305ae10&gt;]
</snippet></ROW><ROW><id>19561951</id><snippet>axis</snippet></ROW><ROW><id>19561951</id><snippet>1</snippet></ROW><ROW><id>19561951</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = [[[1,2,3],
...       [4,5,6],
...       [7,8,9]],
...      [[9,8,7],
...       [6,5,4],
...       [3,2,1]]]
&gt;&gt;&gt; numpy.delete(a, 2, axis=1)
array([[[1, 2, 3],
        [4, 5, 6]],

       [[9, 8, 7],
        [6, 5, 4]]])
</snippet></ROW><ROW><id>19562057</id><snippet>plt.tight_layout()</snippet></ROW><ROW><id>19562057</id><snippet>plt.tight_layout(rect = [0, 0, 0.4, 1])
</snippet></ROW><ROW><id>19562057</id><snippet>bbox_inches</snippet></ROW><ROW><id>19562057</id><snippet>plt.savefig("test.pdf", format="pdf", bbox_inches = 'tight')
</snippet></ROW><ROW><id>19562292</id><snippet>os.environ</snippet></ROW><ROW><id>19562292</id><snippet>os.environ['ORACLE_HOME'] = 'whatever'
</snippet></ROW><ROW><id>19562435</id><snippet>format</snippet></ROW><ROW><id>19562435</id><snippet>fullInstr = "cp -r /mnt/data/archive/{0}/{1}{2}{3}/{4}* {5}".format(fquery,yquery,mquery,dquery,hquery,out12)
</snippet></ROW><ROW><id>19562524</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>19562783</id><snippet>field</snippet></ROW><ROW><id>19562783</id><snippet>forms.ModelChoiceField</snippet></ROW><ROW><id>19562783</id><snippet>label_from_instance</snippet></ROW><ROW><id>19562783</id><snippet># From the source
class PageModelChoiceField(forms.ModelChoiceField():
    def label_from_instance(self, obj):
        """
        This method is used to convert objects into strings; it's used to
        generate the labels for the choices presented by this object. Subclasses
        can override this method to customize the display of the choices.
        """
        # Then return what you'd like to display
        return "Page{0} - Test{1}".format(obj.pk, obj.test.pk)
</snippet></ROW><ROW><id>19562783</id><snippet>Test</snippet></ROW><ROW><id>19562783</id><snippet>select_related('test')</snippet></ROW><ROW><id>19562783</id><snippet>class QuestionForm(forms.ModelForm):

    page = PageModelChoiceField(
        queryset=Page.objects.select_related('test').all()
    )

    class Meta:
        model = Page


class QuestionAdmin(ModelAdmin):
    class Meta:
        model: Question
        form: QuestionForm
</snippet></ROW><ROW><id>19562783</id><snippet>Page</snippet></ROW><ROW><id>19562783</id><snippet>class Page(models.Model):
    test = models.ForeginKey(Test)

    def __unicode__(self):
        return "Page{0} - Test{1}".format(obj.pk, obj.test.pk)
</snippet></ROW><ROW><id>19562783</id><snippet>Page</snippet></ROW><ROW><id>19562783</id><snippet>print(page_object)</snippet></ROW><ROW><id>19562783</id><snippet>{{ page_object }}</snippet></ROW><ROW><id>19562791</id><snippet>try_login</snippet></ROW><ROW><id>19562791</id><snippet>remember_me</snippet></ROW><ROW><id>19562791</id><snippet>try_login</snippet></ROW><ROW><id>19562791</id><snippet>try_register</snippet></ROW><ROW><id>19562791</id><snippet>remember_me</snippet></ROW><ROW><id>19562791</id><snippet>remember_me</snippet></ROW><ROW><id>19562791</id><snippet>try_register</snippet></ROW><ROW><id>19562798</id><snippet>def longest_ascending(s):
    matches = []
    current = [s[0]]
    for index, character in enumerate(s[1:]):
        if character &gt;= s[index]:
            current.append(character)
        else:
            matches.append(current)
            current = [character]
    matches.append(current)
    return "".join(max(matches, key=len))
</snippet></ROW><ROW><id>19562798</id><snippet>matches</snippet></ROW><ROW><id>19562798</id><snippet>current</snippet></ROW><ROW><id>19562798</id><snippet>enumerate()</snippet></ROW><ROW><id>19562798</id><snippet>0</snippet></ROW><ROW><id>19562823</id><snippet>items = [
    {'label': 'label1', 
     'link': 'link1',
     'children': [
         {'label':'label1.1', 'link': 'link1.1'}, 
         {'label':'label1.2', 'link': 'link1.2'} 
         ]
     },
    {'label': 'label2', 
     'link': 'link2',
     'children': [
         {'label':'label2.1', 'link': 'link2.1'}, 
         {'label':'label2.2', 'link': 'link2.2'} 
         ]
     },
    # etc
    ]
</snippet></ROW><ROW><id>19562823</id><snippet>&lt;nav id="menu"&gt;
    &lt;ul&gt;
        {% for item in items %}
        &lt;li&gt;
           &lt;a href="{{ escape(item['link']) }}"&gt; {{ escape(item['label']) }}&lt;/a&gt;
           {% if 'children' in item %}
           &lt;ul&gt;
             {% for child in item['children'] %}
             &lt;li&gt;
               &lt;a href="{{ escape(child['link']) }}"&gt; {{ escape(child['label']) }}&lt;/a&gt;
             &lt;/li&gt;
             {% end %}
           &lt;/ul&gt;
           {% end %}
        &lt;/li
       {% end %}
    &lt;/ul&gt;
&lt;/nav&gt;
</snippet></ROW><ROW><id>19562898</id><snippet>#!usr/bin/python

import cgi
form = cgi.FieldStorage()
with open ('fileToWrite.txt','w') as fileOutput:
    fileOutput.write(form.getValue('firstname'))
    fileOutput.write(form.getValue'(lastname'))
</snippet></ROW><ROW><id>19562898</id><snippet>sudo chown www-data:www-data fileToWrite.txt</snippet></ROW><ROW><id>19562941</id><snippet>exl_set = set([a.node])
</snippet></ROW><ROW><id>19562941</id><snippet>set()</snippet></ROW><ROW><id>19562941</id><snippet>set([iterable])</snippet></ROW><ROW><id>19562941</id><snippet>iterable</snippet></ROW><ROW><id>19562941</id><snippet>&gt;&gt;&gt; node = ('1456030', '-9221969')
&gt;&gt;&gt; set(node)
set(['1456030', '-9221969'])
&gt;&gt;&gt; set([node])
set([('1456030', '-9221969')])
&gt;&gt;&gt; len(set([node]))
1
</snippet></ROW><ROW><id>19562941</id><snippet>set.add()</snippet></ROW><ROW><id>19562941</id><snippet>exl_set = set()
exl_set.add(a.node)
exl_set.add(b.node)
</snippet></ROW><ROW><id>19563040</id><snippet>class Z:
    def __init__(self):
        self.a, self.b, self.c = 1,2,3

    def it(self):
        for x in self.a, self.b, self.c:
            yield x

z = Z()
for x in z.it():
    if x == 1:
       x = 42 # z.a should be 42? - doesn't work!
</snippet></ROW><ROW><id>19563040</id><snippet>class Z:
    def __init__(self):
        self.a, self.b, self.c = 1,2,3

    def it(self):
        for x in 'abc':
            yield getattr(self, x), lambda y: setattr(self, x, y)

z = Z()
for x, setter in z.it():
    if x == 1:
       setter(42) # works!
</snippet></ROW><ROW><id>19563368</id><snippet>with open(fileName) as f:
    for line in f:
        if line.startswith('Partition line'):
            number=float(line.split(',')[1])
            print number # or do whatever you want with it
        # read other file contents with different if clauses
</snippet></ROW><ROW><id>19563416</id><snippet>plt.tick_params(length=0)</snippet></ROW><ROW><id>19563663</id><snippet>import scipy
row1 = [91,90,51]
row2 = [150,200,155]
row3 = [109,198,172]
data=[row1,row2,row3]
chi2_contingency(data)
scipy.stats.chi2_contingency(data)
</snippet></ROW><ROW><id>19563663</id><snippet>(25.085973274234959, 4.8346447416999636e-05, 4, array([[  66.77631579,   93.10526316,   72.11842105],
       [ 145.35361842,  202.66447368,  156.98190789],
       [ 137.87006579,  192.23026316,  148.89967105]]))
</snippet></ROW><ROW><id>19563663</id><snippet>        Pearson's Chi-squared test

data:  data.table 
X-squared = 25.086, df = 4, p-value = 4.835e-05
</snippet></ROW><ROW><id>19563782</id><snippet>...
except IOError:
    print 'GeoIP.dat not found'  # Print is a function
</snippet></ROW><ROW><id>19563782</id><snippet>print(....)</snippet></ROW><ROW><id>19563814</id><snippet>np.newaxis</snippet></ROW><ROW><id>19563814</id><snippet>f[1, :, np.newaxis]
</snippet></ROW><ROW><id>19563814</id><snippet>np.newaxis</snippet></ROW><ROW><id>19564144</id><snippet>ans = start</snippet></ROW><ROW><id>19564144</id><snippet>Please think of a number between 0 and 100!
Is your secret number 50?
Enter 'h' to indicate the guess is too high. Enter 'l' to indicate the guess is too low. Enter 'c' to indicate I guessed correctly. h
Is your secret number 25?
Enter 'h' to indicate the guess is too high. Enter 'l' to indicate the guess is too low. Enter 'c' to indicate I guessed correctly. h
Is your secret number 25?
Enter 'h' to indicate the guess is too high. Enter 'l' to indicate the guess is too low. Enter 'c' to indicate I guessed correctly. h
Is your secret number 25?
Enter 'h' to indicate the guess is too high. Enter 'l' to indicate the guess is too low. Enter 'c' to indicate I guessed correctly. h
Is your secret number 25?
</snippet></ROW><ROW><id>19564344</id><snippet>dir</snippet></ROW><ROW><id>19564344</id><snippet>__dir__</snippet></ROW><ROW><id>19564344</id><snippet>__dir__</snippet></ROW><ROW><id>19564344</id><snippet>body</snippet></ROW><ROW><id>19564344</id><snippet>dir</snippet></ROW><ROW><id>19564344</id><snippet>class TestClass:
    def __init__(self):
        self.myValue = 0
    def myMethod(self):
        pass
    def __dir__(self):
        return []

class TestClass1:
    def __init__(self):
        self.myValue = 0
    def myMethod(self):
        pass

print dir(TestClass())
print dir(TestClass1())

print dir(TestClass())
print dir(TestClass1())
</snippet></ROW><ROW><id>19564344</id><snippet>[]
['__doc__', '__init__', '__module__', 'myMethod', 'myValue']
</snippet></ROW><ROW><id>19564384</id><snippet>def unpair(iterable):
    p = iter(iterable)
    return chain(next(p, []), (x[1] for x in p))
</snippet></ROW><ROW><id>19564621</id><snippet>&gt;&gt;&gt; a = 10
&gt;&gt;&gt; ++a
10
&gt;&gt;&gt; +a
10
&gt;&gt;&gt; -a
-10
&gt;&gt;&gt; --a
10
</snippet></ROW><ROW><id>19564621</id><snippet>++a == +(+(a))</snippet></ROW><ROW><id>19564621</id><snippet>--a == -(-(a))</snippet></ROW><ROW><id>19564621</id><snippet>&gt;&gt;&gt; ++++++++++a
10
</snippet></ROW><ROW><id>19564621</id><snippet>&gt;&gt;&gt; +-+-+a
10
</snippet></ROW><ROW><id>19564621</id><snippet>a += 1</snippet></ROW><ROW><id>19564621</id><snippet>--a</snippet></ROW><ROW><id>19564692</id><snippet>import cv2
import time

faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_alt.xml')
capture = cv2.VideoCapture(0)
keyPressed = -1
faceFound = []
ts = [0,0,False]

print 'press esc to quit'

while(keyPressed != 27):
    ret, camImage = capture.read()
    cv2.imshow('camImage', camImage)

    try:
        faceRegion = faceCascade.detectMultiScale(camImage)
        if ts[2] == False:
            ts[0] = time.time()
            ts[2] = True
    except TypeError:
        if ts[2] == True:
            ts[1] = time.time()
            ts[2] = False
            faceFound.append([ts[0], ts[1]])
        print 'check if front face is visible to camera'
        pass

    keyPressed = cv2.waitKey(1)
cv2.destroyAllWindows()

for list in faceFound:
    print list[1] - list[0]
</snippet></ROW><ROW><id>19564735</id><snippet>agg = agg[['Condition','ID','BeginEnd3','KnowledgeScore']]
</snippet></ROW><ROW><id>19564735</id><snippet>print agg.index</snippet></ROW><ROW><id>19564735</id><snippet>print agg.columns</snippet></ROW><ROW><id>19564735</id><snippet>reset_index</snippet></ROW><ROW><id>19564735</id><snippet>agg = grouped.mean().reset_index()
</snippet></ROW><ROW><id>19564735</id><snippet>&gt;&gt;&gt; df
   A  B  C
0  0  2  6
1  0  2  7
2  1  3  8
3  1  4  9
&gt;&gt;&gt; grouped = df.groupby(["A", "B"])
&gt;&gt;&gt; agg = grouped.mean()
&gt;&gt;&gt; agg
       C
A B     
0 2  6.5
1 3  8.0
  4  9.0
&gt;&gt;&gt; agg = agg.reset_index()
&gt;&gt;&gt; agg
   A  B    C
0  0  2  6.5
1  1  3  8.0
2  1  4  9.0
</snippet></ROW><ROW><id>19565148</id><snippet>setDaemon()</snippet></ROW><ROW><id>19565148</id><snippet>Downloader</snippet></ROW><ROW><id>19565148</id><snippet>thread.setDaemon = True
</snippet></ROW><ROW><id>19565148</id><snippet>thread.setDaemon(True)
</snippet></ROW><ROW><id>19565148</id><snippet>thread.daemon = True
</snippet></ROW><ROW><id>19565378</id><snippet>def solve(lis, employee_id):
    seen = set()
    for item in lis:
        if item['employee_id'] == employee_id and item['id'] not in seen:
            yield item
            seen.add(item['id'])

print list(solve(ar, 20))
</snippet></ROW><ROW><id>19565378</id><snippet>[{'type': u'remove', 'holiday_status_id': 2, 'employee_id': 20, 'number_of_days': -1.0, 'id': 2},
 {'type': u'add', 'holiday_status_id': 2, 'employee_id': 20, 'number_of_days': 2.5, 'id': 24
</snippet></ROW><ROW><id>19565591</id><snippet>tablist = []
tablabellist = []
layoutlist=[]
self.tablelist = []
Tab = QtGui.QTabWidget()
headerlist = [ 'ID','Question','Answer 1','Answer 2','Answer 3','Difficulty','Statistics','Date Added','Added By','Date Modified']

num_tab_widgets = 10

for i in range(num_tab_widgets):
    tablist.append(QtGui.QWidget())
    Tab.addTab(tablist[i], QtCore.QString('SECTION %s'%chr(ord('A')+i)))
    tablabellist.append(QtGui.QLabel('title'))
    self.tablelist.append(QtGui.QTableWidget())
    setattr(self,'Table%d'%i,self.tablelist[i])
    layoutlist.append(QtGui.QVBoxLayout())

    self.tablelist[i].setColumnCount(len(headerlist))
    self.tablelist[i].setHorizontalHeaderLabels(headerlist)
    self.tablelist[i].setEditTriggers(QtGui.QTableWidget.NoEditTriggers)
    self.tablelist[i].setSelectionBehavior(QtGui.QTableWidget.SelectRows)
    self.tablelist[i].setSelectionMode(QtGui.QTableWidget.SingleSelection)

    layoutlist[i].addWidget(tablabellist[i])
    layoutlist[i].addWidget(self.tablelist[i])
    tablist[i].setLayout(layoutlist[i])

CLayout = QtGui.QVBoxLayout()
CLayout.addWidget(Tab)

Cwidget = QtGui.QWidget()
Cwidget.setLayout(CLayout)    
self.setCentralWidget(Cwidget)
</snippet></ROW><ROW><id>19565925</id><snippet>someModule.factory('bookResource', ['$resource', function($resource) {
    var apiResourceUrl = "/api/v1/book/:bookId/";
    // id - your model instance's id or pk, that is represented in API resource objects.
    var resource = $resource(apiResourceUrl, {bookId: '@id'}, {
        all: {
            method: 'GET', params: {}, // GET params that will included in request.
            isArray: true, // Returned object for this action is an array (miltiple instances).
        },
        get: {
            method: 'GET',
        },
        // [Define custom save method to use PUT instead of POST.][2]
        save: {
            /* But, the PUT request requires the all fields in object.
            Missing fields may cause errors, or be filled in by default values.
            It's like a Django form save.
            */
            method: 'PUT',
        },
        // [Tastypie use POST for create new instances][3]
        create: {
            method: 'POST',
        },
        delete: {
            method: 'DELETE',
        },
        // Some custom increment action. (/api/v1/books/1/?updateViews)
        updateViews: {
            method: 'GET',
            params: {"updateViews": true},
            isArray: false,
        },
    });
}]);

someModule.controller('bookCtrl', ['$scope', '$routeParams', 'bookResource',
  function ($scope, $routeParams, bookResource) {
    if ("bookId" in $routeParams) {
        // Here is single instance (API's detail request)
        var currentBook = bookResource.get({bookId: $routeParams.bookId}, function () {
            // When request finished and `currentBook` has data.

            // Update scope ($apply is important)
            $scope.$apply(function(){
                $scope.currentBook = currentBook;
            });

            // And you can change it in REST way.
            currentBook.title = "New title";
            currentBook.$save(); // Send PUT request to API that updates the instance
            currentBook.$updateViews();
        });
    }

    // Show all books collection on page.
    var allBooks = bookResource.all(function () {
        $scope.$apply(function(){
            $scope.allBooks = allBooks;
        });
    });

    // Create new
    var newBook = new bookResource({
        title: "AngularJS-Learning",
        price: 0,
    });
    newBook.$save();

}]);
</snippet></ROW><ROW><id>19566041</id><snippet>lambda d: len(os.listdir(d))</snippet></ROW><ROW><id>19566041</id><snippet>key</snippet></ROW><ROW><id>19566041</id><snippet>import glob
import os

list_of_folders = glob.glob('path_to_folder/*')
list_of_folders.sort(key=lambda d: len(os.listdir(d)), reverse=True)
</snippet></ROW><ROW><id>19566200</id><snippet>def main():

    (...)
    while True:
        if menu == "1":
            name = input("Enter the name for your HTML-page: ")
            doc = open(name + ".html", 'w')
            menu = input("Press 2 to enter title for the HTML-page\nPress 3 to start entering code in body ")

    (...)
    doc.close()


main ()
</snippet></ROW><ROW><id>19566200</id><snippet>doc = open(name + ".html", 'w')</snippet></ROW><ROW><id>19566200</id><snippet>doc.close()</snippet></ROW><ROW><id>19566575</id><snippet>QFileIconProvider</snippet></ROW><ROW><id>19566575</id><snippet>icon (const QFileInfo  &amp;info)</snippet></ROW><ROW><id>19566597</id><snippet>from ctypes import *
</snippet></ROW><ROW><id>19566597</id><snippet>cdll.LoadLibrary("libc.so.6")
libc = CDLL("libc.so.6")
</snippet></ROW><ROW><id>19566597</id><snippet>from ctypes import *
a = cdll.yourModule.MyIntFunction(9)
</snippet></ROW><ROW><id>19566749</id><snippet>(2, 3)</snippet></ROW><ROW><id>19566749</id><snippet>arg[0]</snippet></ROW><ROW><id>19566749</id><snippet>*args</snippet></ROW><ROW><id>19566749</id><snippet>p.test(*t)
</snippet></ROW><ROW><id>19566749</id><snippet>*arg</snippet></ROW><ROW><id>19566749</id><snippet>def test(self, arg):
</snippet></ROW><ROW><id>19566749</id><snippet>self</snippet></ROW><ROW><id>19566749</id><snippet>arg</snippet></ROW><ROW><id>19566749</id><snippet>arg[0]</snippet></ROW><ROW><id>19566749</id><snippet>arg[1]</snippet></ROW><ROW><id>19566973</id><snippet>__setattr__</snippet></ROW><ROW><id>19566973</id><snippet>__setattr__</snippet></ROW><ROW><id>19566973</id><snippet>__setattr__</snippet></ROW><ROW><id>19566973</id><snippet>__setattr__</snippet></ROW><ROW><id>19566973</id><snippet>self.__dict__</snippet></ROW><ROW><id>19566973</id><snippet>__dict__</snippet></ROW><ROW><id>19566973</id><snippet>self.x</snippet></ROW><ROW><id>19566973</id><snippet>__dict__</snippet></ROW><ROW><id>19566973</id><snippet>len(__slots__)</snippet></ROW><ROW><id>19566973</id><snippet>__setattr__</snippet></ROW><ROW><id>19566973</id><snippet>def __setattr__(self, key, value):
    if key == 'x':
        Foo.__dict__[key].__set__(self, -value)
</snippet></ROW><ROW><id>19566973</id><snippet>__slots__</snippet></ROW><ROW><id>19566973</id><snippet>__dict__</snippet></ROW><ROW><id>19566973</id><snippet>&gt;&gt;&gt; class Bar(object): pass
... 
&gt;&gt;&gt; Bar.__dict__['__dict__']
&lt;attribute '__dict__' of 'Bar' objects&gt;
&gt;&gt;&gt; Bar.__dict__['__dict__'].__get__(Bar(), Bar)
{}
</snippet></ROW><ROW><id>19566973</id><snippet>self.__dict__</snippet></ROW><ROW><id>19566973</id><snippet>Bar.__dict__</snippet></ROW><ROW><id>19566973</id><snippet>type</snippet></ROW><ROW><id>19566973</id><snippet>&gt;&gt;&gt; type.__dict__['__dict__']
&lt;attribute '__dict__' of 'type' objects&gt;
&gt;&gt;&gt; type.__dict__['__dict__'].__get__(Bar, type)
dict_proxy({'__dict__': &lt;attribute '__dict__' of 'Bar' objects&gt;, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'Bar' objects&gt;, '__doc__': None})
</snippet></ROW><ROW><id>19567186</id><snippet>nan</snippet></ROW><ROW><id>19567186</id><snippet>0</snippet></ROW><ROW><id>19567186</id><snippet>numpy.nan_to_num</snippet></ROW><ROW><id>19567186</id><snippet>&gt;&gt;&gt; a = numpy.array([1,2,numpy.nan,4])
&gt;&gt;&gt; numpy.nan_to_num(a)
array([ 1.,  2.,  0.,  4.])
</snippet></ROW><ROW><id>19567186</id><snippet>numpy.isnan</snippet></ROW><ROW><id>19567186</id><snippet>nan</snippet></ROW><ROW><id>19567186</id><snippet>True</snippet></ROW><ROW><id>19567186</id><snippet>False</snippet></ROW><ROW><id>19567186</id><snippet>1</snippet></ROW><ROW><id>19567186</id><snippet>&gt;&gt;&gt; numpy.isnan(a)
array([False, False,  True, False], dtype=bool)
&gt;&gt;&gt; 1 - numpy.isnan(a)
array([ 1.,  1.,  0.,  1.])
</snippet></ROW><ROW><id>19567290</id><snippet>settings.py</snippet></ROW><ROW><id>19567290</id><snippet>USE_L10N=False</snippet></ROW><ROW><id>19567471</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>19567471</id><snippet>datetime.time</snippet></ROW><ROW><id>19567471</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('PT8H30M', 'PT%HH%MM').time()
datetime.time(8, 30)
</snippet></ROW><ROW><id>19567564</id><snippet>submit_line.html</snippet></ROW><ROW><id>19567564</id><snippet>/django/contrib/admin/templates/admin/</snippet></ROW><ROW><id>19567564</id><snippet>/your_templates_folder/admin/submit_line.html</snippet></ROW><ROW><id>19567564</id><snippet>{% if show_delete_link %}
    &lt;p class="deletelink-box"&gt;
        &lt;a href="{% url opts|admin_urlname:'delete' original.pk|admin_urlquote %}" class="deletelink"&gt;
            {% trans "Delete" %}
        &lt;/a&gt;
    &lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>19567564</id><snippet>href</snippet></ROW><ROW><id>19567564</id><snippet>{% if show_delete_link %}
    &lt;p class="deletelink-box"&gt;
        &lt;a href="/your_delete_link/{{ original.pk }}/" class="deletelink"&gt;
            {% trans "Deleted" %}
        &lt;/a&gt;
    &lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>19567573</id><snippet>   def run_test(expr=""):

        try:
            process = sp.Popen('bc',
                               stdin=sp.PIPE,
                               stdout=sp.PIPE,
                               stderr=sp.STDOUT)
            process.stdin.write(expr)
            result = process.stdout.readline()
            process.stdin.close()
            retval = process.wait()
            return result
        except Exception, e:
            print e


# correct expression, returns '4'
print run_test('2+2\n') 

print run_test('2 / 0\n') # now this stops too
</snippet></ROW><ROW><id>19567829</id><snippet>In [22]: import itertools as IT

In [23]: [list(g) for k, g in IT.groupby(
          [1, 2, 3, 0, 4, 5, 0, 0, 6], lambda x: x != 0) if k]
Out[23]: [[1, 2, 3], [4, 5], [6]]
</snippet></ROW><ROW><id>19567933</id><snippet>import pygame, sys
from pygame.locals import *

pygame.init()
width, height = 1000, 600
screen = pygame.display.set_mode((width,height))
pygame.display.set_caption('My game far now :P')
background=pygame.image.load('AE.png')
background = pygame.transform.scale(background, (width,height))
player = pygame.image.load('little.png')
player = pygame.transform.scale(player, (40,40))
px,py = width/2,height/2
movex = movey = 0

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()

    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]: px -= 2
    if keys[pygame.K_RIGHT]: px += 2
    if keys[pygame.K_UP]: py -= 2
    if keys[pygame.K_DOWN]: py += 2

    screen.blit(background, (0,0))    
    screen.blit(player, (px,py))
    pygame.display.update()
</snippet></ROW><ROW><id>19568013</id><snippet>http://services.odata.org/OData.svc/Category(1)/Products?$top=25&amp;$orderby=name
</snippet></ROW><ROW><id>19568018</id><snippet>cur.execute("INSERT INTO websites VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
           [None, qry, strtm] + list_element + [COUNTER, SPAM, EXCERPT, COLLECTION]) 
</snippet></ROW><ROW><id>19568018</id><snippet>list_element</snippet></ROW><ROW><id>19568018</id><snippet>None</snippet></ROW><ROW><id>19568018</id><snippet>'NULL'</snippet></ROW><ROW><id>19568018</id><snippet>None</snippet></ROW><ROW><id>19568018</id><snippet>NULL</snippet></ROW><ROW><id>19568713</id><snippet>__init__</snippet></ROW><ROW><id>19568713</id><snippet>__init__</snippet></ROW><ROW><id>19568713</id><snippet>self.buttonBox</snippet></ROW><ROW><id>19568713</id><snippet>self.menuBar</snippet></ROW><ROW><id>19568713</id><snippet>self.mainPart</snippet></ROW><ROW><id>19568713</id><snippet>buttonBox</snippet></ROW><ROW><id>19568713</id><snippet>menuBar</snippet></ROW><ROW><id>19568713</id><snippet>mainPart</snippet></ROW><ROW><id>19568713</id><snippet>mainWindow</snippet></ROW><ROW><id>19568713</id><snippet>def Quit():</snippet></ROW><ROW><id>19568713</id><snippet>buttonBox.add</snippet></ROW><ROW><id>19568713</id><snippet>if __name__ == '__main__':
    root = Tkinter.Tk()
    parent = Pmw.initialise(root)
    root.title('pCT GUI')
    derp = mainWindow(root) # &lt;--- create your class
    root.mainloop()
</snippet></ROW><ROW><id>19568713</id><snippet>__init__</snippet></ROW><ROW><id>19568713</id><snippet>__init__</snippet></ROW><ROW><id>19568713</id><snippet>self.balloon = Pmw.Balloon(parent)</snippet></ROW><ROW><id>19568713</id><snippet>def __init__(self,parent):
    self.balloon = Pmw.Balloon(parent)        
    self.parent = parent


    def Quit():
        root.destroy()

    menuBar = Pmw.MenuBar(parent,hull_relief = 'raised',hull_borderwidth = 1,balloon = self.balloon)
    menuBar.pack(fill = 'x')

    menuBar.addmenu('Run Control','Calibration,Download Configuration,Number of Triggers,Data Output File,Upload Configuration,Start DAQ,Quit')

    # ...
    # ......
    # All the calls to menuBar in the lines above stay the same

    self.menuBar = menuBar   # This needs to be called AFTER you declare the variable
                             # and make your changes to it.

    mainPart = Tkinter.Label(parent,text = 'GUI',background = 'white',foreground = 'white',padx = 100,pady = 100)
    mainPart.pack(fill = 'both', expand = 1)

    self.mainPart = mainPart  # This needs to be called AFTER you declare the variable
                              # and make your changes to it.

    buttonBox = Pmw.ButtonBox(parent)
    buttonBox.pack(fill = 'x')
    buttonBox.add('Start\nRoot', command = Print('start root'))

    self.buttonBox = buttonBox   # This needs to be called AFTER you declare the variable
                                 # and make your changes to it.
</snippet></ROW><ROW><id>19568812</id><snippet>choose()</snippet></ROW><ROW><id>19568812</id><snippet>return pic</snippet></ROW><ROW><id>19568812</id><snippet>pic</snippet></ROW><ROW><id>19568812</id><snippet>choose()</snippet></ROW><ROW><id>19568812</id><snippet>pic</snippet></ROW><ROW><id>19568812</id><snippet>negative()</snippet></ROW><ROW><id>19568812</id><snippet>main()</snippet></ROW><ROW><id>19568812</id><snippet>def main():
  picture = choose() #The "return pic" in "choose()" assigns picture = pic.
  negative(picture) #You are passing "picture" into negative(), where inside the "negative()", pic = picture.
</snippet></ROW><ROW><id>19569067</id><snippet>inp = """
D : A/B/C/D, -
A : A, 3 PM 
B : A/B, - 
Z : A/B/C/D/Z, 
E : E, 4 PM 
F : E/r/f, - 
G : G, 5 PM """

trans_1 = [ele.split(":")[1].strip().split(",") for ele in inp.splitlines() if ele]

trans_2 = [(ele[0].strip().replace("/", "-&gt;"), ele[1].strip()) for ele in trans_1]

#_dict = {} 

for ele in trans_2:
    if ele[1] != "-":
        #_dict[ele[1]] = []
        print ele[1], "-&gt;", ele[0]
        for inner_ele in trans_2:
            if ele[0] == inner_ele[0][0]:
                #_dict[ele[1]].append(inner_ele[0])
                print "\t", inner_ele[0]

# print _dict
</snippet></ROW><ROW><id>19569067</id><snippet>3 PM -&gt; A
        A-&gt;B-&gt;C-&gt;D
    A
    A-&gt;B
    A-&gt;B-&gt;C-&gt;D-&gt;Z
-&gt; A-&gt;B-&gt;C-&gt;D-&gt;Z
4 PM -&gt; E
    E
    E-&gt;r-&gt;f
5 PM -&gt; G
    G
</snippet></ROW><ROW><id>19569096</id><snippet>httplib2</snippet></ROW><ROW><id>19569096</id><snippet>requests</snippet></ROW><ROW><id>19569096</id><snippet>import requests
session = requests.Session()
response = session.get('https://domain.com/auth?name=USERNAME&amp;pw=PASSWORD')
</snippet></ROW><ROW><id>19569096</id><snippet>Session</snippet></ROW><ROW><id>19569096</id><snippet>...
next_response = session.get('https://domain.com/someOtherPage')
</snippet></ROW><ROW><id>19569103</id><snippet>    def forms_valid(self, form, inlines):
        form.instance.created_by = self.request.user
        return super(PublisherCreateView, self).forms_valid(form, inlines)
</snippet></ROW><ROW><id>19569103</id><snippet>CreateWithInlinesView</snippet></ROW><ROW><id>19569103</id><snippet>BaseCreateWithInlinesView</snippet></ROW><ROW><id>19569103</id><snippet>forms_valid()</snippet></ROW><ROW><id>19569103</id><snippet>form_valid()</snippet></ROW><ROW><id>19569289</id><snippet>artist</snippet></ROW><ROW><id>19569289</id><snippet>ln, = plot(x, y)  # plot actually returns a list of artists, hence the ,
im = imshow(Z)
</snippet></ROW><ROW><id>19569289</id><snippet>remove</snippet></ROW><ROW><id>19569289</id><snippet>ln.remove()
im.remove()
</snippet></ROW><ROW><id>19569584</id><snippet>super()</snippet></ROW><ROW><id>19569584</id><snippet>BobyDog</snippet></ROW><ROW><id>19569584</id><snippet>self</snippet></ROW><ROW><id>19569584</id><snippet>class BobyDog( Dog ):
    def bark( self ):
        super(BobyDog, self).bark()
        print "WoOoOoF!!"
</snippet></ROW><ROW><id>19569584</id><snippet>Dog</snippet></ROW><ROW><id>19569584</id><snippet>object</snippet></ROW><ROW><id>19569584</id><snippet>super()</snippet></ROW><ROW><id>19569584</id><snippet>class Dog(object):
    def bark(self):
        print "WOOF"
</snippet></ROW><ROW><id>19569584</id><snippet>&gt;&gt;&gt; class Dog(object):
...     def bark(self):
...         print "WOOF"
... 
&gt;&gt;&gt; class BobyDog( Dog ):
...     def bark( self ):
...         super(BobyDog, self).bark()
...         print "WoOoOoF!!"
... 
&gt;&gt;&gt; BobyDog().bark()
WOOF
WoOoOoF!!
</snippet></ROW><ROW><id>19569584</id><snippet>self</snippet></ROW><ROW><id>19569584</id><snippet>super()</snippet></ROW><ROW><id>19569584</id><snippet>self</snippet></ROW><ROW><id>19569584</id><snippet>class BobyDog( Dog ):
    def bark( self ):
        BobyDog.bark(self)
        print "WoOoOoF!!"
</snippet></ROW><ROW><id>19569687</id><snippet>daddy</snippet></ROW><ROW><id>19569687</id><snippet>None</snippet></ROW><ROW><id>19569687</id><snippet>daddy.getFoods()</snippet></ROW><ROW><id>19569735</id><snippet>&gt;&gt;&gt; from blinker import signal
&gt;&gt;&gt; from mock import Mock
&gt;&gt;&gt;
&gt;&gt;&gt; def foo():
...     pass
...
&gt;&gt;&gt; t = signal('test')
&gt;&gt;&gt; m = Mock(spec=foo)
&gt;&gt;&gt; m.__name__
&lt;Mock name='mock.__name__' id='4471403152'&gt;
&gt;&gt;&gt; t.connect(m)
&lt;Mock spec='function' id='4471883984'&gt;
&gt;&gt;&gt; t.send()
[(&lt;Mock spec='function' id='4471883984'&gt;, &lt;Mock name='mock()' id='4471404624'&gt;)]
&gt;&gt;&gt; m.called
True
</snippet></ROW><ROW><id>19570079</id><snippet>print type(EMPLOYEE)</snippet></ROW><ROW><id>19570079</id><snippet>str()</snippet></ROW><ROW><id>19570079</id><snippet>str()</snippet></ROW><ROW><id>19570250</id><snippet>In [10]: df = DataFrame([[1,'hi'],[3,4]])

In [11]: df.dtypes
Out[11]: 
0     int64
1    object
dtype: object

In [12]: df.convert_objects(convert_numeric=True)
Out[12]: 
   0   1
0  1 NaN
1  3   4

In [13]: df.convert_objects(convert_numeric=True).unstack().sum()
Out[13]: 8.0
</snippet></ROW><ROW><id>19570278</id><snippet>'</snippet></ROW><ROW><id>19570278</id><snippet>’</snippet></ROW><ROW><id>19570278</id><snippet>mock.method(1, 2, 3, test='wow')
</snippet></ROW><ROW><id>19570298</id><snippet>SELECT column_name
FROM information_schema.table_constraints
     JOIN information_schema.key_column_usage
         USING (constraint_catalog, constraint_schema, constraint_name,
                table_catalog, table_schema, table_name)
WHERE constraint_type = 'PRIMARY KEY'
  AND (table_schema, table_name) = ('yourschema', 'yourtable')
ORDER BY ordinal_position;
</snippet></ROW><ROW><id>19570298</id><snippet>┌─────────────┐
│ column_name │
├─────────────┤
│ a           │
│ b           │
└─────────────┘
</snippet></ROW><ROW><id>19570329</id><snippet>index_pairs = [(ind, subind.strip()) for ind in df.index for subind in ind.split("///")]
old_i, new_i = zip(*index_pairs)
df2 = df.ix[list(old_i)]
df2.index = new_i
</snippet></ROW><ROW><id>19570329</id><snippet>&gt;&gt;&gt; df
             Class
lal              1
eri /// iii      2
aks              3
</snippet></ROW><ROW><id>19570329</id><snippet>&gt;&gt;&gt; index_pairs = [(ind, subind.strip()) for ind in df.index for subind in ind.split("///")]
&gt;&gt;&gt; index_pairs
[('lal', 'lal'), ('eri /// iii', 'eri'), ('eri /// iii', 'iii'), ('aks', 'aks')]
</snippet></ROW><ROW><id>19570329</id><snippet>&gt;&gt;&gt; old_i, new_i = zip(*index_pairs)
&gt;&gt;&gt; old_i
('lal', 'eri /// iii', 'eri /// iii', 'aks')
&gt;&gt;&gt; new_i
('lal', 'eri', 'iii', 'aks')
</snippet></ROW><ROW><id>19570329</id><snippet>df</snippet></ROW><ROW><id>19570329</id><snippet>&gt;&gt;&gt; df2 = df.ix[list(old_i)]
&gt;&gt;&gt; df2
             Class
lal              1
eri /// iii      2
eri /// iii      2
aks              3
</snippet></ROW><ROW><id>19570329</id><snippet>&gt;&gt;&gt; df2.index = new_i
&gt;&gt;&gt; df2
     Class
lal      1
eri      2
iii      2
aks      3
</snippet></ROW><ROW><id>19570420</id><snippet>src/api/python/z3printer.py</snippet></ROW><ROW><id>19570420</id><snippet>set_option(max_args=10000000, max_lines=1000000, max_depth=10000000, max_visited=1000000)
</snippet></ROW><ROW><id>19570431</id><snippet>&gt;&gt;&gt; s=b'\xcdABCDEF\xcd\xdbHIJKLMNOP'.decode('cp850')
&gt;&gt;&gt; s
'═ABCDEF═█HIJKLMNOP'
</snippet></ROW><ROW><id>19570431</id><snippet>.translate</snippet></ROW><ROW><id>19570431</id><snippet>&gt;&gt;&gt; D={}
&gt;&gt;&gt; D['\u2588'] = '\n'   # Make translation entry in dictionary
&gt;&gt;&gt; s.translate(D)
'═ABCDEF═\nHIJKLMNOP'
</snippet></ROW><ROW><id>19570431</id><snippet>&gt;&gt;&gt; s.translate(D).encode('utf8')
b'\xe2\x95\x90ABCDEF\xe2\x95\x90\nHIJKLMNOP'
</snippet></ROW><ROW><id>19570431</id><snippet>with open('out.txt','w',encoding='utf8') as f:
    f.write(s)
</snippet></ROW><ROW><id>19570605</id><snippet>meta={'item': curDatacrowdItem.load_item()}
</snippet></ROW><ROW><id>19570679</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>19570679</id><snippet>io.StringIO</snippet></ROW><ROW><id>19570679</id><snippet>#!/usr/bin/env python2

import pandas as p
from BeautifulSoup import BeautifulSoup
import urllib2
import StringIO

def main():
    url = "URL"
    html = urllib2.urlopen(url)
    soup = BeautifulSoup(html)
    # pre is the tag that the data is within
    tab_sepd_vals = soup.pre.string

    # make the StringIO object
    tsv = StringIO.StringIO(tab_sepd_vals)

    # something like this
    data = p.read_csv(tsv, sep='\t') 

    # then what you had
    process(data)
</snippet></ROW><ROW><id>19570829</id><snippet>defaultdict</snippet></ROW><ROW><id>19570829</id><snippet>from collections import defaultdict
nums = defaultdict(list)
for arr in a:
    key = tuple(arr[:2]) # make the first two floats the key
    nums[key].append( arr[2] ) # append the third float for the given key

a_processed = [[k[0], k[1], sum(vals)/len(vals)] for k, vals in nums.items()]
</snippet></ROW><ROW><id>19570829</id><snippet>[[0.2, 1.1, 0.8], [1.2, 0.3, 0.6], [0.3, 1.4, 0.2], [0.6, 0.4, 0.9], [1.1, 0.5, 0.6666666666666666], [0.6, 0.2, 0.75]]
</snippet></ROW><ROW><id>19570829</id><snippet>a_processed</snippet></ROW><ROW><id>19570829</id><snippet>OrderedDict</snippet></ROW><ROW><id>19570945</id><snippet>query = open('foo.sql', 'r').read()
cursor.execute(query)
</snippet></ROW><ROW><id>19571073</id><snippet>response.replace('&amp;', '&amp;').replace('&lt;', '&lt;').replace('&gt;', '&gt;')</snippet></ROW><ROW><id>19571526</id><snippet>argparse</snippet></ROW><ROW><id>19571526</id><snippet>import argparse

parser = argparse.ArgumentParser(description="Manage the cluster")
parser.add_argument("action", choices=["stop", "start"],
                    help="Action to perform")

args = parser.parse_args()
if args.action == "start":
    start_cluster()
if args.action == "stop":
    stop_cluster()
</snippet></ROW><ROW><id>19571605</id><snippet>ipython</snippet></ROW><ROW><id>19571605</id><snippet>gevent</snippet></ROW><ROW><id>19571605</id><snippet>ipython</snippet></ROW><ROW><id>19571605</id><snippet>ipython</snippet></ROW><ROW><id>19571605</id><snippet>gevent.monkey.patch_all(thread=False)</snippet></ROW><ROW><id>19571605</id><snippet>ipython</snippet></ROW><ROW><id>19571874</id><snippet>x1 ** (4 / 3)</snippet></ROW><ROW><id>19571874</id><snippet>x1</snippet></ROW><ROW><id>19571874</id><snippet>4/3</snippet></ROW><ROW><id>19571874</id><snippet>x1</snippet></ROW><ROW><id>19571968</id><snippet>jac</snippet></ROW><ROW><id>19571968</id><snippet>x[0]</snippet></ROW><ROW><id>19571968</id><snippet>x[1]</snippet></ROW><ROW><id>19571968</id><snippet>    ...
    {'type':'ineq',
        'fun' : lambda x: array([x[0]]),
        'jac' : lambda x: array([1, 0])
        },
    {'type':'ineq',
        'fun' : lambda x: array([x[1]]),
        'jac' : lambda x: array([0, 1])
        },
    {'type':'ineq',
        'fun' : lambda x: array([1 - x[1]]),
        'jac' : lambda x: array([0, -1])
        });
</snippet></ROW><ROW><id>19571981</id><snippet>raw_input</snippet></ROW><ROW><id>19571981</id><snippet>input</snippet></ROW><ROW><id>19571981</id><snippet>raw_input</snippet></ROW><ROW><id>19571981</id><snippet>input</snippet></ROW><ROW><id>19571981</id><snippet>input</snippet></ROW><ROW><id>19571981</id><snippet>eval(input("Username:"))</snippet></ROW><ROW><id>19571981</id><snippet>&gt;&gt;&gt; x = raw_input("Enter Equation:")
Enter Equation: 5 + 3
&gt;&gt;&gt; print repr(x)
'5 + 3'
&gt;&gt;&gt; y = input("Enter Equation:") #this is the same as eval(input(msg)) in py3+
Enter Equation: 5 + 3
&gt;&gt;&gt; print repr(y)
`8`
</snippet></ROW><ROW><id>19572047</id><snippet>pm.ls( type = 'dagPose') 
</snippet></ROW><ROW><id>19572047</id><snippet>all_poses = pm.ls(type = 'dagPose') or []
bind_poses = [k for k in all_poses if k.bindPose.get()]
</snippet></ROW><ROW><id>19572328</id><snippet>import tkinter as Tkinter
</snippet></ROW><ROW><id>19572361</id><snippet>from ast import literal_eval

cns = literal_eval(raw_input("Please enter the data: "))
</snippet></ROW><ROW><id>19572383</id><snippet>to_dict</snippet></ROW><ROW><id>19572383</id><snippet>from_dict</snippet></ROW><ROW><id>19572383</id><snippet>encode</snippet></ROW><ROW><id>19572383</id><snippet>decode</snippet></ROW><ROW><id>19572383</id><snippet>import json

class Event(object):
    __slots__= 'itemName'

    def __init__(self, itemName):
        self.itemName = itemName

    def to_dict(self):
        obj = {}
        obj['itemName'] = self.itemName
        return obj

    @classmethod
    def from_dict(cls, obj):
        e = cls(obj['itemName'])
        return e

class EventPacket(object):
    __slots__= 'pID', 'eventData' 

    def __init__(self, pID, eventData):
        self.pID = pID
        self.eventData = eventData

    def to_dict(self):
        obj = {}
        obj['pID'] = int(self.pID)
        obj['eventData'] = self.eventData.to_dict()

        return obj

    @classmethod
    def from_dict(cls, obj):
        ep = cls(obj['pID'])
        ep.eventData = Event.from_dict(obj['eventData'])
        return ep

example_event = Event('Dflt')
example_packet = EventPacket(1, example_event)

json_string = json.dumps(example_packet.to_dict())

recovered_example_packet = EventPacket.from_dict(json.loads(json_string))
</snippet></ROW><ROW><id>19572481</id><snippet>matchDays = Match.objects.filter(matchDate__gt=startDate, matchDate__lt=endDate).values("jalaliDate").distinct()
</snippet></ROW><ROW><id>19572481</id><snippet>matchDays = Match.objects.filter(matchDate__gt=startDate, matchDate__lt=endDate)
matchDays.query.group_by = ['jalaliDate']
</snippet></ROW><ROW><id>19572530</id><snippet>itertools</snippet></ROW><ROW><id>19572530</id><snippet>import itertools

def combine(*args):
    lists = [arg if isinstance(arg, list) else [arg] for arg in args]
    for a, b, c in itertools.product(*lists):
        Function(a, b, c)

Var1=["a","b"]
Var2=["c","d"]
Var3="e"

combine(Var1, Var2, Var3)
</snippet></ROW><ROW><id>19572622</id><snippet>expression = re.compile('\,[\s\w()-]+\,')
textnode = HTML.body.p.find_all(text=expression)
print expression.search(textnode).group(0)
</snippet></ROW><ROW><id>19572786</id><snippet>view = View(
    Item('object.father.name'),
    Item('object.dog.name'),
    )
</snippet></ROW><ROW><id>19572951</id><snippet>keyboard</snippet></ROW><ROW><id>19572951</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>19572975</id><snippet>.strip</snippet></ROW><ROW><id>19572975</id><snippet>Docstring:
S.strip([chars]) -&gt; string or unicode

Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
</snippet></ROW><ROW><id>19572975</id><snippet>/</snippet></ROW><ROW><id>19572975</id><snippet>In [12]: '/'.join("/stack/overflow".split('/')[:-1])
Out[12]: '/stack'
</snippet></ROW><ROW><id>19572975</id><snippet>In [15]: "/stack/overflow".replace('/overflow', '')
Out[15]: '/stack'
</snippet></ROW><ROW><id>19573058</id><snippet>SELECT * FROM Model ...</snippet></ROW><ROW><id>19573058</id><snippet>Model.objects.filter(...)</snippet></ROW><ROW><id>19573058</id><snippet>Question.objects.filter(module__course__subject__name = 'Mathematics',
                        num_attempts__gt = 20,
                        avg_score__gt = 0).order_by('avg_score')
</snippet></ROW><ROW><id>19573213</id><snippet>factorial</snippet></ROW><ROW><id>19573213</id><snippet>factorial</snippet></ROW><ROW><id>19573213</id><snippet>factorial</snippet></ROW><ROW><id>19573213</id><snippet>self</snippet></ROW><ROW><id>19573213</id><snippet>def foo()</snippet></ROW><ROW><id>19573213</id><snippet>foo</snippet></ROW><ROW><id>19573213</id><snippet>&gt;&gt;&gt; def foo(): return foo()  # infinite recursion
...
&gt;&gt;&gt; def foo(): return foo()  # infinite recursion
... 
&gt;&gt;&gt; foo
&lt;function foo at 0x108e4b500&gt;
&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; del foo
&gt;&gt;&gt; foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
&gt;&gt;&gt; bar
&lt;function foo at 0x108e4b500&gt;
&gt;&gt;&gt; bar()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in foo
NameError: global name 'foo' is not defined
</snippet></ROW><ROW><id>19573213</id><snippet>NameError</snippet></ROW><ROW><id>19573213</id><snippet>foo</snippet></ROW><ROW><id>19573213</id><snippet>bar</snippet></ROW><ROW><id>19573213</id><snippet>foo</snippet></ROW><ROW><id>19573213</id><snippet>&gt;&gt;&gt; def foo():
...     return sys._getframe(0).f_code.co_name
... 
&gt;&gt;&gt; foo()
'foo'
&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; bar()
'foo'
</snippet></ROW><ROW><id>19573228</id><snippet>&gt;&gt;&gt; some_list = ['1','2','3','4']
&gt;&gt;&gt; map(int, some_list)
[1, 2, 3, 4]
</snippet></ROW><ROW><id>19573228</id><snippet>&gt;&gt;&gt; [int(e) for e in some_list]
[1, 2, 3, 4]
</snippet></ROW><ROW><id>19573333</id><snippet>mylist = ['A', 'B', 'C', 'D'] # the full list
indices = [0, 3] # the indices of myList that you want to extract

# Now build and join a new list comprehension using only those indices.
partList = "".join([e for i, e in enumerate(mylist) if i in indices])
print(partList) # &gt;&gt;&gt; AD
</snippet></ROW><ROW><id>19573333</id><snippet>enumerate</snippet></ROW><ROW><id>19573333</id><snippet>partList = "".join([mylist[i] for i in indices])
</snippet></ROW><ROW><id>19573446</id><snippet>np.maximum(np.maximum(orange, apple), banana)
</snippet></ROW><ROW><id>19573446</id><snippet>reduce(np.maximum, [orange,apple,banana])
</snippet></ROW><ROW><id>19573574</id><snippet>&gt;&gt;&gt; 1.1 + 1.1
2.2
&gt;&gt;&gt; 1.1 + 2.3
3.4
&gt;&gt;&gt; 1.1 + 2.2
3.3000000000000003
</snippet></ROW><ROW><id>19573574</id><snippet>&gt;&gt;&gt; 0.1 + 0.1 + 0.1 - 0.3
5.551115123125783e-17
</snippet></ROW><ROW><id>19573574</id><snippet>decimal</snippet></ROW><ROW><id>19573596</id><snippet>[[4.22], [4.12], [3.65], [3.56], ...]</snippet></ROW><ROW><id>19573596</id><snippet>[200, 100, 50, 40,..]</snippet></ROW><ROW><id>19573596</id><snippet>[[int(element[1])] for element in arrResult]
</snippet></ROW><ROW><id>19573596</id><snippet>[[float(element[1])] for element in arrResult]
</snippet></ROW><ROW><id>19573683</id><snippet>response = self.tabledata.insertAll(projectId=PROJECT_ID, datasetId='hunter', tableId='test', body={rows: [{json: {userid: 1, client: 1, type: 1, time: 0.0}}, ...]}).execute()
</snippet></ROW><ROW><id>19573704</id><snippet>mysql.INTEGER</snippet></ROW><ROW><id>19573704</id><snippet>long</snippet></ROW><ROW><id>19573704</id><snippet>SQLalchemy</snippet></ROW><ROW><id>19573704</id><snippet>BigInteger</snippet></ROW><ROW><id>19573704</id><snippet>long</snippet></ROW><ROW><id>19573774</id><snippet>index = pexpect.expect(['test', pexpect.EOF, pexpect.TIMEOUT])
    if index == 0:                                          
        do_something()
    elif index == 1:
        print(pexpect.before)
    elif index == 1:
        print(pexpect.before)
</snippet></ROW><ROW><id>19574029</id><snippet>n</snippet></ROW><ROW><id>19574029</id><snippet>p</snippet></ROW><ROW><id>19574029</id><snippet>n</snippet></ROW><ROW><id>19574029</id><snippet>p</snippet></ROW><ROW><id>19574029</id><snippet>n</snippet></ROW><ROW><id>19574029</id><snippet>42</snippet></ROW><ROW><id>19574029</id><snippet>gdaten[0][2] = "javascript://blah.js"
gdaten[1][2] = "http://hello.com"
gdaten[2][2] = "javascript://moo.js"
</snippet></ROW><ROW><id>19574029</id><snippet>'javascript'</snippet></ROW><ROW><id>19574029</id><snippet>p</snippet></ROW><ROW><id>19574029</id><snippet>urlparse("javascript://blah.js")</snippet></ROW><ROW><id>19574029</id><snippet>n</snippet></ROW><ROW><id>19574029</id><snippet>urlparse("javascript://blah.js")</snippet></ROW><ROW><id>19574029</id><snippet>p</snippet></ROW><ROW><id>19574029</id><snippet>urlparse("http://hello.com")</snippet></ROW><ROW><id>19574029</id><snippet>n</snippet></ROW><ROW><id>19574029</id><snippet>2</snippet></ROW><ROW><id>19574029</id><snippet>urlparse("http://hello.com")</snippet></ROW><ROW><id>19574029</id><snippet>n</snippet></ROW><ROW><id>19574029</id><snippet>gdaten[2][2]</snippet></ROW><ROW><id>19574029</id><snippet>"javascript://moo.js"</snippet></ROW><ROW><id>19574029</id><snippet>try:
    p=urlparse(gdaten[n][2])
    while p.scheme == "javascript" and p.scheme == "mailto" and not p.scheme:
        print(p," was skipped (", gdaten[n][2],")")

        # Skipping to the next value
        n += 1
        p=urlparse(gdaten[n][2])

    print ("check:", gdaten[n][2])
    f = urllib.request.urlopen(gdaten[n][2])
    htmlcode = str(f.read())

...
</snippet></ROW><ROW><id>19574207</id><snippet>;:'"</snippet></ROW><ROW><id>19574207</id><snippet>regex = re.compile("(?i)\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()&lt;&gt;]+|\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\))+(?:\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\)|[^\s`!()\[\]{};:'\".,&lt;&gt;?«»“”‘’]))")
</snippet></ROW><ROW><id>19574207</id><snippet>;:'\"</snippet></ROW><ROW><id>19574207</id><snippet>;:'"</snippet></ROW><ROW><id>19574207</id><snippet>r"raw string syntax"</snippet></ROW><ROW><id>19574207</id><snippet>In [31]: string="foo.com/blah_blah kuhiuh www.example.com"

In [32]: In [29]: regex = re.compile(r"(?i)\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()&lt;&gt;]+|\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\))+(?:\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\)|[^\s`!()\[\]{};:'\".,&lt;&gt;?«»“”‘’]))")

In [33]: regex.findall(string)
Out[33]: [('foo.com/blah_blah', '', '', '', ''), ('www.example.com', '', '', '', '')]
</snippet></ROW><ROW><id>19574232</id><snippet>screen</snippet></ROW><ROW><id>19574232</id><snippet>tmux</snippet></ROW><ROW><id>19574232</id><snippet>tmux</snippet></ROW><ROW><id>19574232</id><snippet>tmux</snippet></ROW><ROW><id>19574232</id><snippet>ipython</snippet></ROW><ROW><id>19574232</id><snippet>&lt;Ctrl+b&gt; d</snippet></ROW><ROW><id>19574232</id><snippet>tmux attach</snippet></ROW><ROW><id>19574232</id><snippet>ipython</snippet></ROW><ROW><id>19574232</id><snippet>screen</snippet></ROW><ROW><id>19574232</id><snippet>&lt;Ctrl+a&gt; &lt;Ctrl+d&gt;</snippet></ROW><ROW><id>19574232</id><snippet>screen -r</snippet></ROW><ROW><id>19574436</id><snippet>fromFd</snippet></ROW><ROW><id>19574436</id><snippet>f = 'oldName.jpg'
with open(f, "rb") as fd:
    img = pexif.JpegFile.fromFd(fd)
print img.exif.primary.ExtendedEXIF.DateTimeOriginal
os.rename(f, 'newName.jpg')
</snippet></ROW><ROW><id>19574436</id><snippet>with</snippet></ROW><ROW><id>19574569</id><snippet>a = np.arange(10).reshape(2,5)
b = np.arange(10, 10).reshape(2,5)
pd.DataFrame({'foo':[42,51], 'arr':[a,b]})
Out[10]: 
                                            arr  foo
0            [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]   42
1  [[10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]   51
</snippet></ROW><ROW><id>19574569</id><snippet>Panel</snippet></ROW><ROW><id>19574751</id><snippet>b</snippet></ROW><ROW><id>19574751</id><snippet>d</snippet></ROW><ROW><id>19574751</id><snippet>b</snippet></ROW><ROW><id>19574751</id><snippet>__init__</snippet></ROW><ROW><id>19574751</id><snippet>super()</snippet></ROW><ROW><id>19574751</id><snippet>class derive(base):
    def __init__(self):
        super().__init__(1)
        print(self.x + 1)
</snippet></ROW><ROW><id>19574751</id><snippet>x</snippet></ROW><ROW><id>19574751</id><snippet>super()</snippet></ROW><ROW><id>19574751</id><snippet>object</snippet></ROW><ROW><id>19574751</id><snippet>base</snippet></ROW><ROW><id>19574766</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19574766</id><snippet>import random</snippet></ROW><ROW><id>19574766</id><snippet>random.py</snippet></ROW><ROW><id>19574994</id><snippet>BODYSTRUCTURE</snippet></ROW><ROW><id>19574999</id><snippet>double[,]</snippet></ROW><ROW><id>19574999</id><snippet>double[][]</snippet></ROW><ROW><id>19574999</id><snippet>static double[]result = { 120, 160, 200 };
static double[][]steeds = {
    new double[] {150,0,255} , //black steed
    new double[] {255,150,0} , //maroon steed
    new double[] {0,255,150}   //white steed
};
public static void Main (string[] args)
{
    Random r = new Random();
    double[] random_steed = steeds[r.Next(steeds.Length)];
    Console.WriteLine(string.Join(",", random_steed)); // might print 255,150,0
}
</snippet></ROW><ROW><id>19575273</id><snippet>l = [os.path.join(dir,x) for x in n]
</snippet></ROW><ROW><id>19575309</id><snippet>from module import variable</snippet></ROW><ROW><id>19575309</id><snippet>variable</snippet></ROW><ROW><id>19575309</id><snippet>from subprocess import Popen, PIPE
proc = Popen(cmd, stdout=PIPE)
</snippet></ROW><ROW><id>19575309</id><snippet>import module</snippet></ROW><ROW><id>19575309</id><snippet>import subprocess
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>19575309</id><snippet>/proc/</snippet></ROW><ROW><id>19575309</id><snippet>sudo</snippet></ROW><ROW><id>19575396</id><snippet>_exclude_from_analytics</snippet></ROW><ROW><id>19575396</id><snippet>from flask import Flask, request

app = Flask(__name__)

def exclude_from_analytics(func):
    func._exclude_from_analytics = True
    return func

@app.route('/a')
@exclude_from_analytics
def a():
    return 'a'

@app.route('/b')
def b():
    return 'b'

@app.before_request
def analytics_view(*args, **kwargs):
    # Default this to whatever you'd like.
    run_analytics = True

    # You can handle 404s differently here if you'd like.
    if request.endpoint in app.view_functions:
        view_func = app.view_functions[request.endpoint]
        run_analytics = not hasattr(view_func, '_exclude_from_analytics')

    print 'Should run analytics on {0}: {1}'.format(request.path, run_analytics)

app.run(debug=True)
</snippet></ROW><ROW><id>19575396</id><snippet>Should run analytics on /a: False
127.0.0.1 - - [24/Oct/2013 15:55:15] "GET /a HTTP/1.1" 200 -
Should run analytics on /b: True
127.0.0.1 - - [24/Oct/2013 15:55:18] "GET /b HTTP/1.1" 200 -
</snippet></ROW><ROW><id>19575497</id><snippet>csv</snippet></ROW><ROW><id>19575497</id><snippet>with open('output.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerows(data)
</snippet></ROW><ROW><id>19575497</id><snippet>data</snippet></ROW><ROW><id>19575497</id><snippet>writer.writerows()</snippet></ROW><ROW><id>19575539</id><snippet>from multiprocessing import Pool
import os

path1 = "some/path"
path2 = "some/other/path"

listing = os.listdir(path1)    

p = Pool(5) # process 5 images simultaneously

def process_fpath(path):
    im = Image.open(path1 + file)    
    im.resize((50,50))                # need to do some more processing here             
    im.save(os.path.join(path2,file), "JPEG")

p.map(process_fpath, listing)
</snippet></ROW><ROW><id>19575539</id><snippet>Thread</snippet></ROW><ROW><id>19575808</id><snippet>./configure --enable-unicode=ucs4
</snippet></ROW><ROW><id>19575808</id><snippet>./configure --help</snippet></ROW><ROW><id>19575808</id><snippet>  --enable-unicode[=ucs[24]]
                          Enable Unicode strings (default is ucs2)
</snippet></ROW><ROW><id>19575945</id><snippet>csv</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    scores = list(reader)
</snippet></ROW><ROW><id>19575945</id><snippet>scores</snippet></ROW><ROW><id>19575945</id><snippet>split</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    scores = [line.strip().split(',') for line in f]
</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    scores = [row[-1] for row in reader]
</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    scores = (row[-1] for row in reader)
    intscores = [int(score) for score in scores]
</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    scores = [int(row[-1]) for row in reader]
</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    scores = (int(row[-1]) for row in reader)
    topscores = sorted(scores, reverse=True)
</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    scores = (int(row[-1]) for row in reader)
    topscores = sorted(scores, reverse=True)
    top10 = topscores[:10]
</snippet></ROW><ROW><id>19575945</id><snippet>heapq</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    scores = (int(row[-1]) for row in reader)
    top10 = heapq.nlargest(10, scores)
</snippet></ROW><ROW><id>19575945</id><snippet>nlargest</snippet></ROW><ROW><id>19575945</id><snippet>sorted</snippet></ROW><ROW><id>19575945</id><snippet>itemgetter</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.reader(f)
    def convert_row(row):
        return [float(row[0])] + [int(value) for value in row[1:]]
    scores = (convert_row(row) for row in reader)
    top10 = heapq.nlargest(10, scores, key=operator.itemgetter(-1))
for record in top10:
    print('time: {} | moves: {} | penalties: {} | score: {}'.format(*record))
</snippet></ROW><ROW><id>19575945</id><snippet>DictReader</snippet></ROW><ROW><id>19575945</id><snippet>with open('highscores.txt', 'rb') as f:
    reader = csv.DictReader(f, fieldnames=('time', 'moves', 'penalties', 'score'))
    def convert_row(row):
        return {k: float(v) if k == 'time' else int(v) for k, v in row.items()}
    scores = [convert_row(row) for row in reader]
    top10 = heapq.nlargest(10, scores, key=operator.itemgetter('score'))
for record in top10:
    print('time: {time} | moves: {moves} | penalties: {penalties} | score: {score}'
          .format(**record))
</snippet></ROW><ROW><id>19575945</id><snippet>format</snippet></ROW><ROW><id>19575945</id><snippet>time</snippet></ROW><ROW><id>19575945</id><snippet>time</snippet></ROW><ROW><id>19575945</id><snippet>score</snippet></ROW><ROW><id>19576013</id><snippet>good_data = data[0,:][data[0,:] == 1.0]
bad_data  = data[0,:][data[0,:] == 0.0]
</snippet></ROW><ROW><id>19576013</id><snippet>numpy.array</snippet></ROW><ROW><id>19576013</id><snippet>numpy.array</snippet></ROW><ROW><id>19576013</id><snippet>good_data = np.array([x for x in data[0,:] if x == 1.0])
</snippet></ROW><ROW><id>19576013</id><snippet>==</snippet></ROW><ROW><id>19576013</id><snippet>=</snippet></ROW><ROW><id>19576013</id><snippet>flag == 1</snippet></ROW><ROW><id>19576013</id><snippet>good_data = [data[n,:][flag == 1] for n in range(data.shape[0])]
</snippet></ROW><ROW><id>19576013</id><snippet>good_data</snippet></ROW><ROW><id>19576013</id><snippet>good_data = [data[n,:][flag == 1].tolist() for n in range(data.shape[0])]
</snippet></ROW><ROW><id>19576013</id><snippet>good_data = data[:, data[0] == 1]
</snippet></ROW><ROW><id>19576046</id><snippet>array</snippet></ROW><ROW><id>19576046</id><snippet>bytearray</snippet></ROW><ROW><id>19576057</id><snippet>def</snippet></ROW><ROW><id>19576057</id><snippet>def</snippet></ROW><ROW><id>19576057</id><snippet>cdef</snippet></ROW><ROW><id>19576057</id><snippet>@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True) 
@cython.profile(True)
cdef double example1(double[:] xi, double[:] a, double[:] b, int D):

    cdef int k
    cdef double theSum = 0.0

    for k in range(D):
        theSum += (xi[k] - a[k]) / (b[k] - a[k])

    return theSum

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.profile(True)
@cython.cdivision(False)
cdef double example2(double[:] xi, double[:] a, double[:] b, int D):

    cdef int k
    cdef double theSum = 0.0

    for k in range(D):
        theSum += (xi[k] - a[k]) / (b[k] - a[k])

    return theSum


def testExamples():
    D = 100000
    x = np.random.rand(D)
    a = np.zeros(D)
    b = np.random.rand(D) + 1

    for i in xrange(10000):
        example1(x, a, b, D)
        example2(x, a, b,D) 
</snippet></ROW><ROW><id>19576057</id><snippet>ncalls  tottime  percall  cumtime  percall filename:lineno(function)
10000    1.546    0.000    1.546    0.000 test.pyx:26(example2)
10000    0.002    0.000    0.002    0.000 test.pyx:11(example1)
</snippet></ROW><ROW><id>19576119</id><snippet>token = 'foo'
chunks = []
current_chunk = []

for line in open('sample_csv.csv'):
   if line.startswith(token) and current_chunk: 
      # if line starts with token and the current chunk is not empty
      chunks.append(current_chunk[:]) #  add not empty chunk to chunks
      current_chunk = [] #  make current chunk blank
   # just append a line to the current chunk on each iteration
   current_chunk.append(line)

chunks.append(current_chunk)  #  append the last chunk outside the loop
</snippet></ROW><ROW><id>19576119</id><snippet>foo
asdf
asdf
foo
foo
asdf
asdf
fooo
</snippet></ROW><ROW><id>19576119</id><snippet>[
    ['foo\n', 'asdf\n', 'asdf\n'], 
    ['foo\n'], 
    ['foo\n', 'asdf\n', 'asdf\n'], 
    ['fooo\n']
]
</snippet></ROW><ROW><id>19576181</id><snippet>Screen</snippet></ROW><ROW><id>19576181</id><snippet>def __init__(self, Screen): &lt;-- the 'Screen' here is causing the issue.
</snippet></ROW><ROW><id>19576181</id><snippet>PEP-8</snippet></ROW><ROW><id>19576385</id><snippet>y = a*x + b
</snippet></ROW><ROW><id>19576385</id><snippet>a</snippet></ROW><ROW><id>19576385</id><snippet>b</snippet></ROW><ROW><id>19576385</id><snippet>a</snippet></ROW><ROW><id>19576385</id><snippet>b</snippet></ROW><ROW><id>19576385</id><snippet>error = sum[(y(i) - (a*x(i) + b))^2]
</snippet></ROW><ROW><id>19576385</id><snippet>a</snippet></ROW><ROW><id>19576385</id><snippet>b</snippet></ROW><ROW><id>19576385</id><snippet>a</snippet></ROW><ROW><id>19576385</id><snippet>b</snippet></ROW><ROW><id>19576465</id><snippet>if num == 1</snippet></ROW><ROW><id>19576465</id><snippet>A,B,C = empty_matrices( 2, 3 ) # sets A, B, C as 3 2x2 matrices
A, = empty_matrices( 2, 1 ) # sets A as a 2x2 matrix
</snippet></ROW><ROW><id>19576672</id><snippet>print</snippet></ROW><ROW><id>19576672</id><snippet>end</snippet></ROW><ROW><id>19576672</id><snippet>print()</snippet></ROW><ROW><id>19576672</id><snippet>str.join</snippet></ROW><ROW><id>19576672</id><snippet>" ".format(str(x) for x in years)</snippet></ROW><ROW><id>19576672</id><snippet>years = range(min_time, max_time + 1, increment_time)

for year in years:
    print(year, end=" ") # prints a space after each value, rather than a newline
print() # add a newline at the end of the row

row_str = " ".join(str(year) for year in years) # join year strings with spaces
print(row_str) # prints whole row in one step, with a newline at the end
</snippet></ROW><ROW><id>19576691</id><snippet>return</snippet></ROW><ROW><id>19576691</id><snippet>def function():
    a = [3, 4, 5, 2, 4]
    b = 1
    c = 0
    for x in range(5):  
        if a[x-1] &gt; b:
            c = c + 1
    return c
</snippet></ROW><ROW><id>19576691</id><snippet>def function(a, b):
    c = 0
    for x in a:
      if x &gt; b:
         c += 1
    return c
</snippet></ROW><ROW><id>19576691</id><snippet>def function(a, b):
    return sum(x &gt; b for x in a)
</snippet></ROW><ROW><id>19576755</id><snippet>lib
 |------ lib.py
 |------ platform_1
 |           |------- _lib.py
 |           
 |------ platform_2
 |           |------- _lib.py
</snippet></ROW><ROW><id>19576755</id><snippet>lib.py</snippet></ROW><ROW><id>19576755</id><snippet># this module becomes the _lib module for one platform of either 1 or 2
if platform == 1:
    from .platform_1._lib import * # python 3 import
if platform == 2:
    from .platform_2._lib import *
</snippet></ROW><ROW><id>19576857</id><snippet>opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0')]
urllib2.install_opener(opener)
</snippet></ROW><ROW><id>19576857</id><snippet>urllib2.urlopen('http://forums.zybez.net/runescape-2007-prices').read().splitlines()
</snippet></ROW><ROW><id>19576857</id><snippet>line.split('/runescape-2007-prices/player/'[1])
</snippet></ROW><ROW><id>19576857</id><snippet>line.split('/runescape-2007-prices/player/')[1]
</snippet></ROW><ROW><id>19576857</id><snippet>import urllib2, threading

opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0')]
urllib2.install_opener(opener)

def readpage():
    data = urllib2.urlopen('http://forums.zybez.net/runescape-2007-prices').read().splitlines()
    for line in data:
        if 'forums.zybez.net/runescape-2007-prices/player/' in line:
            a = line.split('/runescape-2007-prices/player/')[1]
            print(a.split('"&gt;')[0])

t = threading.Timer(5.0, readpage)
t.start()
</snippet></ROW><ROW><id>19576862</id><snippet>request.POST.getall('group_user_id') # This is wrong
</snippet></ROW><ROW><id>19576862</id><snippet>request.POST.getall('group_user_id[]') # This works
</snippet></ROW><ROW><id>19576862</id><snippet>getall</snippet></ROW><ROW><id>19576862</id><snippet>[]</snippet></ROW></DATA>