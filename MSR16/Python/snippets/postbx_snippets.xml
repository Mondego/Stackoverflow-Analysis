<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>11426666</id><snippet>form = MiscQuestionForm(request.POST or None, misc=misc_questions)
</snippet></ROW><ROW><id>11426666</id><snippet>class MiscQuestionForm(BootstrapForm):

    def __init__(self, *args, **kwargs):
        misc = kwargs.pop('misc')
        super(MiscQuestionForm, self).__init__(*args, **kwargs)

        for question in misc:
            if question.answer_type == 1:  # bool
                self.fields['custom_%s' % question.pk] = forms.BooleanField(
                        label=question, required=True)
            else:  # textfield
                self.fields['custom_%s' % question.pk] = forms.CharField(
                        label=question, widget=forms.Textarea,
                        required=True)
</snippet></ROW><ROW><id>11426666</id><snippet>misc</snippet></ROW><ROW><id>11426847</id><snippet>db.test.insert({"x":1,"y":2}, safe=True)
db.test.update({},{"$inc":{"x":1,"y":2}}, safe=True)
</snippet></ROW><ROW><id>11426847</id><snippet>{u'y': 2, u'x': 1, u'_id': ObjectId('4ffd1d8d29277b1606000000')}
 2.05725502968
{u'y': 2, u'x': 1, u'_id': ObjectId('4ffd1d8f29277b1606000001')}
 1.98976802826
{u'y': 20000, u'x': 10000, u'_id': ObjectId('4ffd1d9129277b1606002710')}
 1.96105003357
</snippet></ROW><ROW><id>11427220</id><snippet>import re
regex = re.compile('th.s')
l = ['this', 'is', 'just', 'a', 'test']
matches = [string for string in l if re.match(regex, string)]
</snippet></ROW><ROW><id>11427517</id><snippet>AttributeError</snippet></ROW><ROW><id>11427517</id><snippet>tree</snippet></ROW><ROW><id>11427517</id><snippet>xpath</snippet></ROW><ROW><id>11427517</id><snippet>None</snippet></ROW><ROW><id>11427517</id><snippet>c</snippet></ROW><ROW><id>11427517</id><snippet>xpath</snippet></ROW><ROW><id>11427517</id><snippet>KeyError</snippet></ROW><ROW><id>11427517</id><snippet>tree</snippet></ROW><ROW><id>11427517</id><snippet>tree.xpath()</snippet></ROW><ROW><id>11427517</id><snippet>m</snippet></ROW><ROW><id>11427517</id><snippet>tree.xpath()</snippet></ROW><ROW><id>11427517</id><snippet>tree.xpath()</snippet></ROW><ROW><id>11427517</id><snippet>tree</snippet></ROW><ROW><id>11427517</id><snippet>None</snippet></ROW><ROW><id>11427517</id><snippet>ElementTreeNode</snippet></ROW><ROW><id>11427517</id><snippet>xpath()</snippet></ROW><ROW><id>11427517</id><snippet>AttributeError</snippet></ROW><ROW><id>11427712</id><snippet>for key in bucket.list(prefix='/your/directory/'):
    key.delete()
</snippet></ROW><ROW><id>11427774</id><snippet>ftp://ftp.sec.gov/edgar/daily-index/</snippet></ROW><ROW><id>11427774</id><snippet>urllib.request</snippet></ROW><ROW><id>11427774</id><snippet>ftplib</snippet></ROW><ROW><id>11427774</id><snippet>urlopen(...).read()</snippet></ROW><ROW><id>11428235</id><snippet>.all()</snippet></ROW><ROW><id>11428235</id><snippet>objects</snippet></ROW><ROW><id>11428235</id><snippet>queryset=movies.models.Movie.objects.producers.all()</snippet></ROW><ROW><id>11428310</id><snippet>import ast

resp = '{lhs: "1 U.S. dollar",rhs: "13.3317335 Mexican pesos",error: "",icc: true}'

d = {}
for pair in resp[1:-1].split(','):
    (k,v) = pair.split(':')
    v = v.strip()
    if v == "true":
        v = "True"
    try:
        v = ast.literal_eval(v)
    except:
        print "Couldn't eval " + v
    d[k] = v

print d
</snippet></ROW><ROW><id>11428310</id><snippet>import json

resp = '{lhs: "1 U.S. dollar",rhs: "13.3317335 Mexican pesos",error: "",icc: true}'

s = "{"    
for pair in resp[1:-1].split(','):
    (k,v) = pair.split(':')
    s += '"%s" : %s,' % (k,v)
s = s[:-1] + "}"

print json.loads(s)
</snippet></ROW><ROW><id>11428499</id><snippet>listbox.insert(END, ' '.join([i]+dic[i])
</snippet></ROW><ROW><id>11428499</id><snippet>listbox.insert(END, *(i, dic[i][0], dic[i][1], dic[i][2]))
</snippet></ROW><ROW><id>11428499</id><snippet>listbox.insert(END, i, dic[i][0], dic[i][1], dic[i][2])
</snippet></ROW><ROW><id>11428499</id><snippet>listbox.insert(END, i, *dic[i])
</snippet></ROW><ROW><id>11428499</id><snippet>from Tkinter import *

def update_listbox():
    longest = 20  # initial value acts as minimum width
    for key,value in dic.iteritems():
        entry = '{}: {}'.format(key, (', '.join(value)))
        longest = max(longest, len(entry))
        listbox.insert(END, entry)
    listbox.config(width=longest)  # width in "standard" or average characters

dic = {
    'Foods': ['apple','grape','pizza'],
    'Drinks': ['milk','soda','juice'],
}

root=Tk()
root.title('Listbox')
listbox = Listbox(root)
button = Button(root, text='push', command=update_listbox)
button.pack()
listbox.pack()

root.mainloop()
</snippet></ROW><ROW><id>11428677</id><snippet>def generate_image(fr,to,lat1,lon1,lat2,lon2):
    return spatial_matrix.plot_spatial_data(data_array,data_array.shape[0],data_array.shape[1],float(lon1)/10000,float(lon2)/10000,float(lat1)/10000,float(lat2)/10000,fr,to)
</snippet></ROW><ROW><id>11428677</id><snippet>from yourmodule import generate_image

def overlay():
    background = generate_image(*args) # Or what ever arguments you want.
</snippet></ROW><ROW><id>11428681</id><snippet>&gt;&gt;&gt; s = """&lt;div class="mc fore tabcon"&gt;
                    &lt;ul id="i-detail"&gt;
                        &lt;li title="XXXXXXXXX"&gt;**AAAAAAAAAAA**(what i want to match)&lt;/li&gt;
                        &lt;li&gt;BBBBBBBBB&lt;/li&gt;
                    &lt;/ul&gt;
&lt;/div&gt;"""
&gt;&gt;&gt; parser = etree.XMLParser(ns_clean=True, recover=True)
&gt;&gt;&gt; root = etree.fromstring(s, parser)
&gt;&gt;&gt; for node in root.xpath('//*[@id="i-detail"]/li[1]'):
    print node, node.text


&lt;Element li at 0x12534b8&gt; **AAAAAAAAAAA**(what i want to match)
</snippet></ROW><ROW><id>11428873</id><snippet>connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('POST', '/1/users', json.dumps({
   "username": "cooldude6",
   "password": "p_n7!-e8",
   "phone": "415-392-0202"
 }), {
   "X-Parse-Application-Id": "APP ID",
   "X-Parse-REST-API-Key": "MASTER KEY",
   "Content-Type": "application/json"
 })
result = json.loads(connection.getresponse().read())
</snippet></ROW><ROW><id>11429042</id><snippet>data = [('Apple',      'Coles',      1.50),
        ('Apple',      'Woolworths', 1.60),
        ('Apple',      'IGA',        1.70),
        ('Banana',     'Coles',      0.50),
        ('Banana',     'Woolworths', 0.60),
        ('Banana',     'IGA',        0.70),
        ('Cherry',     'Coles',      5.00),
        ('Date',       'Coles',      2.00),
        ('Date',       'Woolworths', 2.10),
        ('Elderberry', 'IGA',        10.00)]

from itertools import groupby, islice
from operator import itemgetter
from collections import defaultdict

stores = sorted(set(row[1] for row in data))
# probably splitting this up in multiple lines would be more readable
pivot = ((fruit, defaultdict(lambda: None, (islice(d, 1, None) for d in data))) for fruit, data in groupby(sorted(data), itemgetter(0)))

print 'Fruit'.ljust(12), '\t'.join(stores)
for fruit, prices in pivot:
    print fruit.ljust(12), '\t'.join(str(prices[s]) for s in stores)
</snippet></ROW><ROW><id>11429042</id><snippet>Fruit        Coles      IGA     Woolw
Apple        1.5        1.7     1.6
Banana       0.5        0.7     0.6
Cherry       5.0        None    None
Date         2.0        None    2.1
Elderberry   None       10.0    None
</snippet></ROW><ROW><id>11429168</id><snippet>from itertools import islice

binary_map = dict(zip("AB", "10"))  # Equivalent to {"A": "1", "B": "0"}
string_map = {52: "Case 1", 53: "Case 2"}

with open("my_text_file") as f:
    binary_str = "".join(binary_map[x.split()[2]] for x in islice(f, 9, None))

binary_value = int(binary_string, 2)
print string_map[binary_value]
</snippet></ROW><ROW><id>11429168</id><snippet>join</snippet></ROW><ROW><id>11429168</id><snippet>"".join(["A", "B", "C"])</snippet></ROW><ROW><id>11429168</id><snippet>"ABC"</snippet></ROW><ROW><id>11429168</id><snippet>X for Y in Z</snippet></ROW><ROW><id>11429168</id><snippet>islice</snippet></ROW><ROW><id>11429168</id><snippet>f</snippet></ROW><ROW><id>11429168</id><snippet>split</snippet></ROW><ROW><id>11429168</id><snippet>str</snippet></ROW><ROW><id>11429168</id><snippet>"\t"</snippet></ROW><ROW><id>11429168</id><snippet>"\n"</snippet></ROW><ROW><id>11429168</id><snippet>"\r"</snippet></ROW><ROW><id>11429168</id><snippet>"  a \t b\n\t c\n".split()</snippet></ROW><ROW><id>11429168</id><snippet>['a', 'b', 'c']</snippet></ROW><ROW><id>11429168</id><snippet>x.split()[2]</snippet></ROW><ROW><id>11429168</id><snippet>"A"</snippet></ROW><ROW><id>11429168</id><snippet>"B"</snippet></ROW><ROW><id>11429168</id><snippet>binary_map</snippet></ROW><ROW><id>11429168</id><snippet>"1"</snippet></ROW><ROW><id>11429168</id><snippet>"0"</snippet></ROW><ROW><id>11429918</id><snippet>models.py</snippet></ROW><ROW><id>11429918</id><snippet>views.py</snippet></ROW><ROW><id>11429918</id><snippet>settings.py</snippet></ROW><ROW><id>11430192</id><snippet>encode</snippet></ROW><ROW><id>11430192</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>11430192</id><snippet>str</snippet></ROW><ROW><id>11430192</id><snippet>unicode</snippet></ROW><ROW><id>11430192</id><snippet>str</snippet></ROW><ROW><id>11430192</id><snippet>unicode</snippet></ROW><ROW><id>11430192</id><snippet>name = name.decode('utf-8')
</snippet></ROW><ROW><id>11430192</id><snippet>str</snippet></ROW><ROW><id>11430192</id><snippet>unicode</snippet></ROW><ROW><id>11430192</id><snippet>feedparser</snippet></ROW><ROW><id>11430192</id><snippet>unicode</snippet></ROW><ROW><id>11430885</id><snippet> QTreeWidgetItem.__init__ (self, QStringList strings, int type = TreeWidgetItem.Type)
</snippet></ROW><ROW><id>11430885</id><snippet>QTreeWidgetItem</snippet></ROW><ROW><id>11430885</id><snippet>QTreeWidgetItem(str(parent_name))</snippet></ROW><ROW><id>11430885</id><snippet>parent_name</snippet></ROW><ROW><id>11430885</id><snippet>valestimate = QTreeWidgetItem([parent_name])
</snippet></ROW><ROW><id>11430885</id><snippet>parent_name</snippet></ROW><ROW><id>11430885</id><snippet>str()</snippet></ROW><ROW><id>11430885</id><snippet>unicode()</snippet></ROW><ROW><id>11430885</id><snippet>.encode</snippet></ROW><ROW><id>11430885</id><snippet>unicode</snippet></ROW><ROW><id>11430885</id><snippet>str</snippet></ROW><ROW><id>11430885</id><snippet>.decode</snippet></ROW><ROW><id>11430936</id><snippet>findall</snippet></ROW><ROW><id>11430936</id><snippet>&gt;&gt;&gt; re.findall(r'(?=(\w\w))', 'hello')
['he', 'el', 'll', 'lo']
</snippet></ROW><ROW><id>11430936</id><snippet>(?=...)</snippet></ROW><ROW><id>11430936</id><snippet>(?=...)</snippet></ROW><ROW><id>11430936</id><snippet>...</snippet></ROW><ROW><id>11430936</id><snippet>Isaac
  (?=Asimov)</snippet></ROW><ROW><id>11430936</id><snippet>'Isaac '</snippet></ROW><ROW><id>11430936</id><snippet>'Asimov'</snippet></ROW><ROW><id>11430994</id><snippet>a</snippet></ROW><ROW><id>11430994</id><snippet>b</snippet></ROW><ROW><id>11430994</id><snippet>a_app = {3:1, 2:1, 5:1, 4:1}
b_app = {2:2, 4:1}
</snippet></ROW><ROW><id>11430994</id><snippet>for i in b:
    if a_app.has_key(i) and a_app[i] &gt; 0:
        a_app[i] -= 1
</snippet></ROW><ROW><id>11430994</id><snippet>b_app</snippet></ROW><ROW><id>11430994</id><snippet>def f(a, b):
    a_app = {}
    for i in a:
        if not a_app.has_key(i):
            a_app[i] = 0
        a_app[i] += 1
    print a_app
    for i in b:
        print i, '=&gt;',
        if a_app.has_key(i) and a_app[i] &gt; 0:
            a_app[i] -= 1
            print i, ' is in a',
        print '.'

f([1,1,2],[1,1])
f([3,2,5,4],[2,4,2])
f([3,2,2,4],[2,4,2])
f([3,2,5,4],[2,3,2])
</snippet></ROW><ROW><id>11430994</id><snippet>$ python 1.py
{1: 2, 2: 1}
1 =&gt; 1  is in a .
1 =&gt; 1  is in a .
{2: 1, 3: 1, 4: 1, 5: 1}
2 =&gt; 2  is in a .
4 =&gt; 4  is in a .
2 =&gt; .
{2: 2, 3: 1, 4: 1}
2 =&gt; 2  is in a .
4 =&gt; 4  is in a .
2 =&gt; 2  is in a .
{2: 1, 3: 1, 4: 1, 5: 1}
2 =&gt; 2  is in a .
3 =&gt; 3  is in a .
2 =&gt; .
</snippet></ROW><ROW><id>11430994</id><snippet>import collections

def f(a, b):
    a_app = collections.Counter(a)
    for i in b:
        print i, '=&gt;',
        if i in a_app and a_app[i] &gt; 0:
            a_app[i] -= 1
            print i, ' is in a',
        print '.'
    print ''

f([1,1,2],[1,1])
f([3,2,5,4],[2,4,2])
f([3,2,2,4],[2,4,2])
f([3,2,5,4],[2,3,2])
</snippet></ROW><ROW><id>11431303</id><snippet>class parent(wx.Frame):
      def __init__(self, parent):
            ## Ur GUI's code ##

            self.Bind( wx.EVT_CLOSE, self.ParentFrameOnClose )
      def ParentFrameOnClose(self, event):
            self.DestroyChildren()  ## Destroy the children first
            self.Destroy()    ## Destroy the parent then.
</snippet></ROW><ROW><id>11431487</id><snippet>local iconv = require "iconv"
local toGbk = iconv.new("GBK", "UTF-8")
function U2G(s) return toGbk:iconv(s) end

-- assuming the while file is saved in UTF-8, this will output the string in GBK
print(U2G "a朶b")
</snippet></ROW><ROW><id>11431487</id><snippet>loadstring</snippet></ROW><ROW><id>11431956</id><snippet>while not sema.acquire(False):
    # Do a small portion of work…
</snippet></ROW><ROW><id>11431956</id><snippet>for item in work:
    # Keep working…
        # Somewhere deep in the bowels…
        if sema.acquire(False):
            thread.exit()
</snippet></ROW><ROW><id>11432078</id><snippet>S3.py</snippet></ROW><ROW><id>11432078</id><snippet>S3.py</snippet></ROW><ROW><id>11432429</id><snippet>import urllib2
url = 'http://www.example.com/index.html'
req = urllib2.Request(url)
response = urllib2.urlopen(req)
#now you can get the data by response.read()
</snippet></ROW><ROW><id>11432487</id><snippet>cpack --help</snippet></ROW><ROW><id>11432603</id><snippet>-S</snippet></ROW><ROW><id>11432603</id><snippet>site.py</snippet></ROW><ROW><id>11432603</id><snippet>sys.path</snippet></ROW><ROW><id>11432649</id><snippet>create_window</snippet></ROW><ROW><id>11432649</id><snippet>pack</snippet></ROW><ROW><id>11432649</id><snippet>grid</snippet></ROW><ROW><id>11432714</id><snippet>grep</snippet></ROW><ROW><id>11432714</id><snippet>"^\(Added: \|Modified: \|Deleted: \)"</snippet></ROW><ROW><id>11432714</id><snippet>command = ['grep', r'^\(Added: \|Modified: \|Deleted: \)', filename]
</snippet></ROW><ROW><id>11432714</id><snippet>grep</snippet></ROW><ROW><id>11432714</id><snippet>echo</snippet></ROW><ROW><id>11432863</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1,2,3],[4,5,6],[7,8,9]])
&gt;&gt;&gt; print a[2][0]
7
</snippet></ROW><ROW><id>11432948</id><snippet>self.box = {}
for i in xrange(self.number_boxes):
    row = row_number+add
    column = self.column+i
    key = "%d/%d" % (row,column)
    ...
    self.box[key] = Entry(...)
    self.box[key].bind("&lt;Button-1&gt;", lambda event, key=key: self.callback(event, key))
</snippet></ROW><ROW><id>11433058</id><snippet>for row_number, row_data in enumerate(info):
    self.variable = StringVar(...)
</snippet></ROW><ROW><id>11433058</id><snippet>self.variable</snippet></ROW><ROW><id>11433058</id><snippet>for row_number, row_data in enumerate(info):
    var = StringVar(...)
    self.type = OptionMenu(..., command=lambda new_value, variable=var: self.VarMenu(new_value, variable)
</snippet></ROW><ROW><id>11433278</id><snippet>B.bar</snippet></ROW><ROW><id>11433278</id><snippet>self.foo()</snippet></ROW><ROW><id>11433278</id><snippet>self</snippet></ROW><ROW><id>11433278</id><snippet>C</snippet></ROW><ROW><id>11433278</id><snippet>C.foo</snippet></ROW><ROW><id>11433278</id><snippet>self.foo</snippet></ROW><ROW><id>11433278</id><snippet>self</snippet></ROW><ROW><id>11433278</id><snippet>self</snippet></ROW><ROW><id>11433278</id><snippet>(C, B, object)</snippet></ROW><ROW><id>11433278</id><snippet>C.foo</snippet></ROW><ROW><id>11433278</id><snippet>B.foo</snippet></ROW><ROW><id>11433828</id><snippet>Paginator</snippet></ROW><ROW><id>11433828</id><snippet>page</snippet></ROW><ROW><id>11433828</id><snippet>Paginator</snippet></ROW><ROW><id>11433828</id><snippet>Paginator</snippet></ROW><ROW><id>11433828</id><snippet>from django.core.paginator import Paginator

objects = messages.objects.all()
p = Paginator(objects, 10)
page3 = p.page(3)
print page3.object_list
</snippet></ROW><ROW><id>11433911</id><snippet>list.sort()</snippet></ROW><ROW><id>11433911</id><snippet>None</snippet></ROW><ROW><id>11433911</id><snippet>sorted()</snippet></ROW><ROW><id>11433911</id><snippet>result = sorted((trans for trans in my_list if trans.type in types),
                key=lambda x: x.code)
</snippet></ROW><ROW><id>11433911</id><snippet>lambda x: x.code</snippet></ROW><ROW><id>11433911</id><snippet>operator.attrgetter("code")</snippet></ROW><ROW><id>11434078</id><snippet>hashlib</snippet></ROW><ROW><id>11434134</id><snippet>*</snippet></ROW><ROW><id>11434134</id><snippet>|</snippet></ROW><ROW><id>11434151</id><snippet>namedtuple</snippet></ROW><ROW><id>11434151</id><snippet>x</snippet></ROW><ROW><id>11434151</id><snippet>tuple(x)</snippet></ROW><ROW><id>11434151</id><snippet>namedtuple</snippet></ROW><ROW><id>11434337</id><snippet>from django.contrib import admin
from mysite.books.models import Publisher, Author, Book

admin.site.register(Publisher)
admin.site.register(Author)
admin.site.register(Book)
</snippet></ROW><ROW><id>11434552</id><snippet>mytics=['January\n2008', 'February\n2008', 'March\n2008']
</snippet></ROW><ROW><id>11434568</id><snippet>sys.exit(N)</snippet></ROW><ROW><id>11434568</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11434568</id><snippet>run = subprocess.Popen('Name', stdout = subprocess.PIPE, env={'LANG':'C++'})
data, error = run.communicate()
</snippet></ROW><ROW><id>11434568</id><snippet>returncode</snippet></ROW><ROW><id>11434568</id><snippet>run = subprocess.Popen('Name', stdout = subprocess.PIPE, stderr = subprocess.PIPE, env={'LANG':'C++'})
data, error = run.communicate()
</snippet></ROW><ROW><id>11434568</id><snippet>run = subprocess.Popen('Name', stdout = subprocess.PIPE, env={'LANG':'C++'})
data, _ = run.communicate()
</snippet></ROW><ROW><id>11434617</id><snippet>&gt;&gt;&gt; red
array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]])
</snippet></ROW><ROW><id>11434617</id><snippet>&gt;&gt;&gt; red[np.where((red == [0,0,255]).all(axis = 2))] = [0,255,255]
</snippet></ROW><ROW><id>11434617</id><snippet>&gt;&gt;&gt; red
array([[[  0, 255, 255],
        [  0, 255, 255],
        [  0, 255, 255],
        [  0, 255, 255],
        [  0, 255, 255]],

       [[  0, 255, 255],
        [  0, 255, 255],
        [  0, 255, 255],
        [  0, 255, 255],
        [  0, 255, 255]]])
</snippet></ROW><ROW><id>11434617</id><snippet>im2[np.where((im2 == [0,0,255]).all(axis = 2))] = [0,255,255]
</snippet></ROW><ROW><id>11434617</id><snippet>im2[np.where((im2 == [0,255,0]).all(axis = 2))] = [0,255,255]
</snippet></ROW><ROW><id>11434890</id><snippet>import BeautifulSoup

html = """
  &lt;html&gt;&lt;body&gt;
    &lt;h1&gt;My html!&lt;/h1&gt;
    &lt;img src="yourimage1.jpg" /&gt;
    &lt;img src="yourimage1.jpg" /&gt;
  &lt;/body&gt;&lt;/html&gt;
"""

bs = BeautifulSoup.BeautifulSoup(html)
urls = [img["src"] for img in bs.findAll("img")]
</snippet></ROW><ROW><id>11434890</id><snippet>urls == ['yourimage1.jpg', 'yourimage2.jpg']</snippet></ROW><ROW><id>11435014</id><snippet>get src dst</snippet></ROW><ROW><id>11435014</id><snippet>[ftplib][1]</snippet></ROW><ROW><id>11435014</id><snippet>MAX_CONNECTIONS</snippet></ROW><ROW><id>11435097</id><snippet>x=1; for i in *jpg; do counter=$(printf %04d $x); ln "$i" sdhdfd_plate_bg01_v001_fds_fdse_fdfd."$counter".jpg; x=$(($x+1)); done
</snippet></ROW><ROW><id>11435097</id><snippet>for i in *jpg</snippet></ROW><ROW><id>11435097</id><snippet>for i in sdhdfd_plate_bg01_v001_fds_fdse_fdfd.*</snippet></ROW><ROW><id>11435355</id><snippet> -------------------------------
 |    frame 1     |  frame 2   |
 -------------------------------
 |    frame 3     |  nothing   |
 -------------------------------
</snippet></ROW><ROW><id>11435355</id><snippet>frame1</snippet></ROW><ROW><id>11435355</id><snippet>frame3</snippet></ROW><ROW><id>11435355</id><snippet>frame3</snippet></ROW><ROW><id>11435355</id><snippet>columnspan</snippet></ROW><ROW><id>11435355</id><snippet>frame3</snippet></ROW><ROW><id>11435355</id><snippet>frame3.grid(row=1,column=0,columnspan=2)
</snippet></ROW><ROW><id>11435644</id><snippet>paged = context['paged']
</snippet></ROW><ROW><id>11435644</id><snippet>profiles.views.profile_list</snippet></ROW><ROW><id>11435741</id><snippet>myDict["Objective A"] = MyClass.FuncA()
</snippet></ROW><ROW><id>11435741</id><snippet>MyClass.FuncA</snippet></ROW><ROW><id>11435741</id><snippet>myDict["Objective A"] = MyClass.FuncA
myDict["Objective B"] = MyClass.FuncB
</snippet></ROW><ROW><id>11435741</id><snippet>myDict["Objective A"]()
</snippet></ROW><ROW><id>11436147</id><snippet>%feature("autodoc")</snippet></ROW><ROW><id>11436147</id><snippet>%module test

%feature("autodoc", "3");

void foo (int *a, void *bar, double epsilon);
</snippet></ROW><ROW><id>11436147</id><snippet>%pythonprepend</snippet></ROW><ROW><id>11436147</id><snippet>sed</snippet></ROW><ROW><id>11436147</id><snippet>%pythonprepend foo "MARKER"
</snippet></ROW><ROW><id>11436147</id><snippet>sed -ei 's/MARKER/some documentation' test.py
</snippet></ROW><ROW><id>11436147</id><snippet>%pythonprepend</snippet></ROW><ROW><id>11436554</id><snippet>variable.year</snippet></ROW><ROW><id>11436567</id><snippet>import matplotlib.pyplot as plt
print plt.get_backend()
</snippet></ROW><ROW><id>11436567</id><snippet>.py</snippet></ROW><ROW><id>11436567</id><snippet>import sys;print sys.argv</snippet></ROW><ROW><id>11436603</id><snippet>import threading
import time

def timed_output(name, delay, run_event):
    while run_event.is_set():
        time.sleep(delay)
        print name,": New Message!"

if __name__ == "__main__":
    run_event = threading.Event()
    run_event.set()
    d1 = 1
    t1 = threading.Thread(target = timed_output, args = ("bob",d1,run_event))

    d2 = 2
    t2 = threading.Thread(target = timed_output, args = ("paul",d2,run_event))

    t1.start()
    time.sleep(.5)
    t2.start()

    try:
        while 1:
            time.sleep(.1)
    except KeyboardInterrupt:
        print "attempting to close threads. Max wait =",max(d1,d2)
        run_event.clear()
        t1.join()
        t2.join()
        print "threads successfully closed"
</snippet></ROW><ROW><id>11436804</id><snippet>re.search</snippet></ROW><ROW><id>11436804</id><snippet>re.match</snippet></ROW><ROW><id>11436804</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>11436804</id><snippet>re.DOTALL</snippet></ROW><ROW><id>11436804</id><snippet>&gt;&gt;&gt; re.search("[\s]*height\s*=\s*([-]?[\.\d]*)[\s]*tilt\s*=\s*([-]?[\.\d]*)[\s]*\(([\s]*[-]?[\.\d]*)\)[\s]*cen_volume\s*=\s*([-]?[\.\d]*)[\s]*r_volume\s*=\s*([-]?[\.\d]*)[\s]*", v,re.MULTILINE|re.DOTALL).groups()
('0.000211813357854', '0.0', '0.0', '0.000000000600000', '0.000000003000000')
</snippet></ROW><ROW><id>11436825</id><snippet>In [23]: import itertools as iter

In [24]: def pset(lst):
   ....:     comb = (iter.combinations(lst, l) for l in range(len(lst) + 1))
   ....:     return list(iter.chain.from_iterable(comb))
   ....: 


In [25]: pset(lst)
Out[25]: 
[(),
 ('A',),
 ('B',),
 ('C',),
 ('D',),
 ('A', 'B'),
 ('A', 'C'),
 ('A', 'D'),
 ('B', 'C'),
 ('B', 'D'),
 ('C', 'D'),
 ('A', 'B', 'C'),
 ('A', 'B', 'D'),
 ('A', 'C', 'D'),
 ('B', 'C', 'D'),
 ('A', 'B', 'C', 'D')]
</snippet></ROW><ROW><id>11436921</id><snippet>HAYSTACK_CONNECTIONS</snippet></ROW><ROW><id>11436921</id><snippet>pip install git+https://github.com/toastdriven/django-haystack.git#egg=django-haystack
</snippet></ROW><ROW><id>11436921</id><snippet>python setup.py install</snippet></ROW><ROW><id>11436976</id><snippet>chr(160)</snippet></ROW><ROW><id>11436976</id><snippet>NO-BREAK SPACE</snippet></ROW><ROW><id>11436976</id><snippet>unichr(160)</snippet></ROW><ROW><id>11436976</id><snippet>&gt;&gt;&gt; u"hello\u00a0world".replace(unichr(160), "X")
u'helloXworld
</snippet></ROW><ROW><id>11437147</id><snippet>oids = db['ObjectID']
for i, id in enumerate(oids):
    if id != -1
        filter_ind.append(i) 
</snippet></ROW><ROW><id>11437147</id><snippet>filter_ind = [i for i, id in enumerate(oids) if id != '-1']
</snippet></ROW><ROW><id>11437147</id><snippet>dict((key, [val[i] for i in filter_ind]) for key, val in db.iteritems())
</snippet></ROW><ROW><id>11437263</id><snippet>choices=some_queryset</snippet></ROW><ROW><id>11437263</id><snippet>(item.pk, item.__unicode__())
</snippet></ROW><ROW><id>11437263</id><snippet>choices=[(item.pk, item.some_other_method()) for item in some_queryset]
</snippet></ROW><ROW><id>11437772</id><snippet>nf=1</snippet></ROW><ROW><id>11437772</id><snippet>range(1,x)</snippet></ROW><ROW><id>11437772</id><snippet>nf = 1
for x in range (1,11):
    nf *= x
    print x,"\t", stirling(x), "\t\t", nf
</snippet></ROW><ROW><id>11437772</id><snippet>n   Stirling        Factorial
1   0.922137008896      1
2   1.91900435149       2
3   5.83620959135       6
4   23.5061751329       24
5   118.019167958       120
6   710.078184642       720
7   4980.39583161       5040
8   39902.3954527       40320
9   359536.872842       362880
10  3598695.61874       3628800
</snippet></ROW><ROW><id>11437781</id><snippet>map.input.file</snippet></ROW><ROW><id>11437835</id><snippet>import base64
api_key = "4adaaf1bd8caec42a5b007405e829eb0"
url = "http://api.imgur.com/2/upload.json"
fh = open('test.png', 'rb');
base64img = base64.b64encode(fh.read())
r = requests.post(url, data={'key': api_key, 'image':base64img})
</snippet></ROW><ROW><id>11437920</id><snippet>textwrap</snippet></ROW><ROW><id>11437920</id><snippet>import textwrap

with open(outputFile) as file:
     text = file.read()

with open(outputFile, 'w') as file:
     file.write(textwrap.fill(text, width=6))
</snippet></ROW><ROW><id>11438055</id><snippet>normed=True</snippet></ROW><ROW><id>11438055</id><snippet>binarea*binheight</snippet></ROW><ROW><id>11438055</id><snippet>1</snippet></ROW><ROW><id>11438055</id><snippet>H, xedges, yedges = np.histogram2d(coords[:,0], coords[:,1], bins=(50, 50), range=([-10000.0,10000.0],[-10000.0,10000.0]))
H_normalized = H/float(coords.shape[0])
</snippet></ROW><ROW><id>11438477</id><snippet>count</snippet></ROW><ROW><id>11438477</id><snippet>str5='5'
while str5 in your_string
    concatenate '5' with str5

#your string is too long by 1 element
max_string=str5 minus the last '5'
yourstring.count(max_string)
</snippet></ROW><ROW><id>11438483</id><snippet>/home/kalaracey/python2.7/bin/python</snippet></ROW><ROW><id>11438483</id><snippet>chmod -R go+rX /home/kalaracey/python2.7</snippet></ROW><ROW><id>11438483</id><snippet>chmod go+x /home/kalaracey/python2.7/bin/python</snippet></ROW><ROW><id>11438908</id><snippet> with open(outputFile) as file:
</snippet></ROW><ROW><id>11438908</id><snippet>outputFile</snippet></ROW><ROW><id>11438908</id><snippet>open</snippet></ROW><ROW><id>11438908</id><snippet>outputFile.seek(0)</snippet></ROW><ROW><id>11438908</id><snippet>outputFile.read()</snippet></ROW><ROW><id>11438908</id><snippet>r+</snippet></ROW><ROW><id>11438908</id><snippet>with open('OUT'+ID+'.txt','w') as outputFile:#file for result output
    text=''.join(makeList[(start-1):(end-1)])
    outputFile.write(text)
with open('F'+ID+'.txt', 'w') as ff:
    ff.write(textwrap.fill(text, width=6)) #Version of above file with text wrapped to 6 chars.
</snippet></ROW><ROW><id>11438908</id><snippet>def printOutput(start, end, makeList):
    if start == end == None:
        return
    else:
        print start, end

        with open('OUT'+ID+'.txt','w') as outputFile:#file for result output
            text=''.join(makeList[(start-1):(end-1)])
            outputFile.write(text)
        with open('F'+ID+'.txt', 'w') as ff:
            ff.write(textwrap.fill(text, width=6)) #Version of above file with text wrapped to 6 chars.
</snippet></ROW><ROW><id>11438974</id><snippet>if ... else</snippet></ROW><ROW><id>11438974</id><snippet>def reformat(filename):
    mydict = dict()
    feature = ''
    for line in filename:
        m = re.search("\AFeature",line[0])  
        if m:
            feature = line[0]
            mydict[feature] = (line[1:-1])
        else:
            mydict[feature].append(line[0])
print(mydict)
</snippet></ROW><ROW><id>11439320</id><snippet>for i,row in enumerate(Mtx): #same thing as `for i in range(len(Mtx)):`
    Mtx[i][i]=0
    Mtx[i][i]=1-sum(Mtx[i])

    ##could also use (if it makes more sense to you):
    #row[i]=0
    #Mtx[i][i]=1-sum(row)
</snippet></ROW><ROW><id>11439453</id><snippet>user_products_tbl</snippet></ROW><ROW><id>11439453</id><snippet>user_products_tbl = db.Table('user_products', db.metadata,
        db.Column('user_id', db.Integer, db.ForeignKey('users.user_id')),
        db.Column('product_id', db.Integer, db.ForeignKey('products.product_id')),
        schema='main_db'
)
</snippet></ROW><ROW><id>11439505</id><snippet>from books import views
from contact import views
</snippet></ROW><ROW><id>11439505</id><snippet>views</snippet></ROW><ROW><id>11439505</id><snippet>views</snippet></ROW><ROW><id>11439505</id><snippet>contact</snippet></ROW><ROW><id>11439505</id><snippet>import books
import contact

urlpatterns = patterns('',
...
(r'^search/$', books.views.search),
(r'^contact/$', contact.views.contact),
...
</snippet></ROW><ROW><id>11439505</id><snippet>'books.views.search'</snippet></ROW><ROW><id>11439505</id><snippet>from books.views import search
from contact.views import contact
</snippet></ROW><ROW><id>11439601</id><snippet>json.loads</snippet></ROW><ROW><id>11439601</id><snippet>list</snippet></ROW><ROW><id>11439601</id><snippet>dict</snippet></ROW><ROW><id>11439601</id><snippet>dict</snippet></ROW><ROW><id>11439601</id><snippet>ret</snippet></ROW><ROW><id>11439601</id><snippet>mydata = {
    'name': ret['user']['screen_name'],
    'text': ret['text']
}

print mydata['name'], 'wrote', mydata['text'] # or something

# insert mydata into appropriate MongoDB DB/collection here
</snippet></ROW><ROW><id>11439824</id><snippet>close</snippet></ROW><ROW><id>11439824</id><snippet>join</snippet></ROW><ROW><id>11440008</id><snippet>python myapp/views.py</snippet></ROW><ROW><id>11440008</id><snippet>myapp/views.py</snippet></ROW><ROW><id>11440030</id><snippet>&lt;link type="text/css" rel="stylesheet" href="stylesheets/styles.css" /&gt;</snippet></ROW><ROW><id>11440030</id><snippet>http://?????.???/blog/stylesheets/styles.css/</snippet></ROW><ROW><id>11440030</id><snippet>&lt;link type="text/css" rel="stylesheet" href="/stylesheets/styles.css" /&gt;</snippet></ROW><ROW><id>11440030</id><snippet>http://?????.???/stylesheets/styles.css/</snippet></ROW><ROW><id>11440199</id><snippet>sorted()</snippet></ROW><ROW><id>11440199</id><snippet>list()</snippet></ROW><ROW><id>11440199</id><snippet>Cat</snippet></ROW><ROW><id>11440199</id><snippet>.lower()</snippet></ROW><ROW><id>11440252</id><snippet>retval = subprocess.call(
    ['virtualenv', dir_name]
)
if retval == 0:
    # a 0 return code indicates success
    retval = subprocess.call(
        ['{0}/bin/pip'.format(dir_name), 'install', 'processing']
    )
    if retval == 0:
        print "ERROR: Failed to install package 'processing'"
else:
    print "ERROR: Failed to created virtualenv properly."
</snippet></ROW><ROW><id>11440252</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>11440252</id><snippet>subprocess.call</snippet></ROW><ROW><id>11440252</id><snippet>cmdline = ' '.join(['virtualenv', dir_name, '&amp;&amp;', '{0}/bin/pip'.format(dir_name), 'install', 'processing'])
subprocess.call(
    cmdline,
    shell=True
)
</snippet></ROW><ROW><id>11440324</id><snippet>save</snippet></ROW><ROW><id>11440324</id><snippet>class ProfileComment(models.Model):


    def save(self, *args, **kwargs):
      # send email?
      super(ProfileComent, self, *args, **kwargs) # make sure to call parent!
</snippet></ROW><ROW><id>11440503</id><snippet>original</snippet></ROW><ROW><id>11440627</id><snippet>__eq__</snippet></ROW><ROW><id>11440627</id><snippet>__ne__</snippet></ROW><ROW><id>11440627</id><snippet>__eq__</snippet></ROW><ROW><id>11440627</id><snippet>__ne__</snippet></ROW><ROW><id>11440627</id><snippet>__eq__</snippet></ROW><ROW><id>11440627</id><snippet>object</snippet></ROW><ROW><id>11440627</id><snippet>__ne__</snippet></ROW><ROW><id>11440627</id><snippet>object</snippet></ROW><ROW><id>11440890</id><snippet>BGRBGR00
BGRBGR00
</snippet></ROW><ROW><id>11440890</id><snippet>BGRBGR
00BGRB
0000BG // note the extra padding
</snippet></ROW><ROW><id>11440890</id><snippet>640x480
1024x768
etc
</snippet></ROW><ROW><id>11440899</id><snippet>$.ajax({url: 'fetch_page.html', dataType: 'text'}).done(function(html) {
    var dom = $('&lt;html /&gt;').prop('innerHTML', html);
    $('body').append(dom.find('body p'));
    $('head').append(dom.find('script'));
});
</snippet></ROW><ROW><id>11440899</id><snippet>p</snippet></ROW><ROW><id>11440899</id><snippet>body</snippet></ROW><ROW><id>11440899</id><snippet>prop('innerHTML...</snippet></ROW><ROW><id>11440899</id><snippet>.html()</snippet></ROW><ROW><id>11440899</id><snippet>dom</snippet></ROW><ROW><id>11441090</id><snippet>def find_all(target, substring):
    current_pos = target.find(substring)
    while current_pos != -1:
        yield current_pos
        current_pos += len(substring)
        current_pos = target.find(substring, current_pos)
</snippet></ROW><ROW><id>11441090</id><snippet>+ 1</snippet></ROW><ROW><id>11441090</id><snippet>len(substring)</snippet></ROW><ROW><id>11441090</id><snippet>'list(find_all('abbccbb', 'bb'))'</snippet></ROW><ROW><id>11441090</id><snippet>yield</snippet></ROW><ROW><id>11441288</id><snippet>str</snippet></ROW><ROW><id>11441288</id><snippet>d = 'COADREAD ATF7 Missense_Mutation NGXA-AZ-3984 P17544 A436T'
myid, token = d.rsplit(' ', 2)[1:] # will except if can't be unpacked so you know you've got exactly 2 elements...
token = token[1:-1]
</snippet></ROW><ROW><id>11441288</id><snippet>re.match('[A-Z](\d{3})[A-Z]', token[1]) # or similar...</snippet></ROW><ROW><id>11441288</id><snippet>d.rsplit(' ', 2)</snippet></ROW><ROW><id>11441288</id><snippet>' '</snippet></ROW><ROW><id>11441288</id><snippet>['COADREAD ATF7 Missense_Mutation NGXA-AZ-3984', 'P17544', 'A436T']
</snippet></ROW><ROW><id>11441288</id><snippet>d.rsplit(' ', 2)[1:]</snippet></ROW><ROW><id>11441288</id><snippet>['P17544', 'A436T']</snippet></ROW><ROW><id>11441288</id><snippet>myid, token = d.rsplit(' ', 2)[1:]</snippet></ROW><ROW><id>11441288</id><snippet>myid</snippet></ROW><ROW><id>11441288</id><snippet>token = token[1:-1]</snippet></ROW><ROW><id>11441288</id><snippet>print myid, token
# P17544 436
</snippet></ROW><ROW><id>11441288</id><snippet>lookup = {}
for line in file:
    # do steps above so you have myid, token
    lookup[myid] = token
</snippet></ROW><ROW><id>11441372</id><snippet>@contextmanager
def compl(arg, val):
    with simple("one",1):
        with simple("two",2):
            print "enter complex", arg 
            try:
                d[arg] = val
                yield
            finally:
                del d[arg]
                print "exit complex", arg
</snippet></ROW><ROW><id>11441383</id><snippet>for i in range(len(sslist))</snippet></ROW><ROW><id>11441383</id><snippet>xrange</snippet></ROW><ROW><id>11441383</id><snippet>range</snippet></ROW><ROW><id>11441383</id><snippet>lstlen=len(sslist)
sslist = [sum(sslist[i:min(i+grouping,lstlen)]) for i in range(lstlen)]
</snippet></ROW><ROW><id>11442027</id><snippet>${HOME}/Downloads</snippet></ROW><ROW><id>11442027</id><snippet>cd ${HOME}/Downloads
ls # a bunch of stuff is here, one of the files should be TkinterTreectrl-1.0.zip 
unzip TkinterTreectrl-1.0.zip 
cd TkinterTreectrl-1.0
sudo python setup.py install
</snippet></ROW><ROW><id>11442027</id><snippet>&lt;sudo&gt; python setup.py install</snippet></ROW><ROW><id>11442027</id><snippet>.zip    --&gt; unzip filename.zip
.gz     --&gt; gunzip filname.gz
.tar.gz --&gt; tar -xzvf filename.tar.gz
.tgz    --&gt; tar -xzvf filename.tgz
.bz2    --&gt; bunzip2 filename.bz2
</snippet></ROW><ROW><id>11442041</id><snippet>i_data = InverterHistory(...)</snippet></ROW><ROW><id>11442041</id><snippet>InverterHistory</snippet></ROW><ROW><id>11442041</id><snippet>...</snippet></ROW><ROW><id>11442041</id><snippet>if</snippet></ROW><ROW><id>11442041</id><snippet>dict</snippet></ROW><ROW><id>11442041</id><snippet>dict</snippet></ROW><ROW><id>11442041</id><snippet>InverterHistory</snippet></ROW><ROW><id>11442041</id><snippet>params = {
    'inverter': i,
    'recordTime': datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
}
if ac_volts_a:
    params['voltage_ac_a'] = float(ac_volts_a)
if ac_volts_b: 
    params['voltage_ac_b'] = float(ac_volts_b)

# Do the same with all your attributes
# ...

# Then you can create your object and pass it the dictionary you have created
i_data = InverterHistory(**params)
</snippet></ROW><ROW><id>11442041</id><snippet>**params</snippet></ROW><ROW><id>11442041</id><snippet>key: value</snippet></ROW><ROW><id>11442041</id><snippet>key=value</snippet></ROW><ROW><id>11442041</id><snippet>if</snippet></ROW><ROW><id>11442041</id><snippet>True</snippet></ROW><ROW><id>11442041</id><snippet>InverterHistory</snippet></ROW><ROW><id>11442235</id><snippet>for i in range(10):
    if something_happens(i):
        break
else: # no break in any position
    do whatever
</snippet></ROW><ROW><id>11442339</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>11442339</id><snippet>date = models.DateTimeField(default=datetime.datetime.now, editable=False)</snippet></ROW><ROW><id>11442353</id><snippet>with open('file') as f:
    for line in f.readlines():
        l = line.split()
        if l and l[4] == 'Q9C0F0':
            print l[5][1:-1] # or parse int in a more inteligent way
</snippet></ROW><ROW><id>11442571</id><snippet>pytz</snippet></ROW><ROW><id>11442571</id><snippet>&gt;&gt;&gt; tz = pytz.timezone("Asia/Calcutta")
&gt;&gt;&gt; tz
&lt;DstTzInfo 'Asia/Calcutta' HMT+5:53:00 STD&gt;
&gt;&gt;&gt; tz.localize(datetime.datetime(1901, 7, 10, 12, 0))
datetime.datetime(1901, 7, 10, 12, 0, tzinfo=&lt;DstTzInfo 'Asia/Calcutta' HMT+5:53:00 STD&gt;)
&gt;&gt;&gt; tz.localize(datetime.datetime(2012, 7, 10, 12, 0))
datetime.datetime(2012, 7, 10, 12, 0, tzinfo=&lt;DstTzInfo 'Asia/Calcutta' IST+5:30:00 STD&gt;)
</snippet></ROW><ROW><id>11442587</id><snippet>re.sub</snippet></ROW><ROW><id>11442587</id><snippet>re.finditer</snippet></ROW><ROW><id>11442587</id><snippet>.start</snippet></ROW><ROW><id>11442587</id><snippet>.end</snippet></ROW><ROW><id>11442587</id><snippet>bytearray</snippet></ROW><ROW><id>11442587</id><snippet>bits = bytearray(len(text))
for pat in patterns:
    for m in re.finditer(pat, text):
        bits[m.start():m.end()] = 'x' * (m.end()-m.start())
new_string = ''.join(c for c,bit in zip(text, bits) if not bit)
</snippet></ROW><ROW><id>11442593</id><snippet>shared_array += some_other_array</snippet></ROW><ROW><id>11442593</id><snippet>shared_array = shared_array + some_other_array</snippet></ROW><ROW><id>11442593</id><snippet>shared_array</snippet></ROW><ROW><id>11442593</id><snippet>shared_array</snippet></ROW><ROW><id>11442593</id><snippet>global shared_array</snippet></ROW><ROW><id>11442593</id><snippet>shared_array[i,:] = i</snippet></ROW><ROW><id>11442593</id><snippet>shared_array</snippet></ROW><ROW><id>11442593</id><snippet>shared_array = ...</snippet></ROW><ROW><id>11442593</id><snippet>shared_array[...] = ...</snippet></ROW><ROW><id>11442644</id><snippet>fred</snippet></ROW><ROW><id>11442644</id><snippet>setup.py</snippet></ROW><ROW><id>11443058</id><snippet>&amp;</snippet></ROW><ROW><id>11443058</id><snippet>ѐ</snippet></ROW><ROW><id>11443081</id><snippet>from multiprocessing import Manager
manager = Manager()
result_queue = manager.Queue()
</snippet></ROW><ROW><id>11443117</id><snippet>@staticmethod</snippet></ROW><ROW><id>11443117</id><snippet>class myClass:
    #------------------------------------------------------------------------
    @staticmethod
    def myFunction(param1, param2):
        """
        Some work here using param1 and param2
        """
    @staticmethod
    def myFunction2(param1, param2):
        """
        Some work here using param1 and param2
        """
    @staticmethod
    def myFunction3(param1, param2):
        """
        Some work here using param1 and param2
        """

myDict = {}
myDict["key1"] = myClass.myFunction
myDict["key2"] = myClass.myFunction2
myDict["key3"] = myClass.myFunction3
# and so on...
</snippet></ROW><ROW><id>11443117</id><snippet>PARAM1</snippet></ROW><ROW><id>11443117</id><snippet>PARAM2</snippet></ROW><ROW><id>11443117</id><snippet>PARAM1</snippet></ROW><ROW><id>11443117</id><snippet>PARAM2</snippet></ROW><ROW><id>11443117</id><snippet>for k in myDict.keys():
    myDict[k](PARAM1, PARAM2)
</snippet></ROW><ROW><id>11443169</id><snippet>os.system</snippet></ROW><ROW><id>11443169</id><snippet>def Terminal(inputfile, NumParts): 
    command = 'gpmetis ' + inputfile + ' ' + str(NumParts)
    os.system(command)

    outputfile = intputfile + '.part.' + str(NumParts)
    return outputfile
</snippet></ROW><ROW><id>11443169</id><snippet>subprocess</snippet></ROW><ROW><id>11443169</id><snippet>import subprocess
subprocess.call(['gpmetis', inputfile, str(NumParts)])
</snippet></ROW><ROW><id>11443303</id><snippet>from xml.etree.ElementTree import Element, XML, tostring
from timeit import timeit

elist = [e for e in xrange(1000)]

def test_normal():
    eroot = Element('root')
    for e in elist:
        eroot.append(Element("tag", {"attrib" :"%s" %e}))

def test_list():
    eroot = Element('root')
    [eroot.append(Element("tag", {"attrib" :"%s" %e})) for e in elist]


print "etree: %.6f" %timeit(test_normal, number=1000)
print "l-cmp: %.6f" %timeit(test_list, number=1000)

from xml.etree.cElementTree import Element, XML, tostring, fromstring
#from lxml.etree import Element, XML, tostring

print "ctree: %.6f" %timeit(test_normal, number=1000)
print "c-cmp: %.6f" %timeit(test_list, number=1000)

def test_string():
    eroot = "&lt;root&gt;"
    tags = ['&lt;tag attrib="%s" /&gt;' %e for e in elist]
    eroot += ' '.join(tags) + '&lt;/root&gt;'
    tree = fromstring(eroot)

print "strng: %.6f" %timeit(test_string, number=1000)    


etree: 13.302093
l-cmp: 12.276725
ctree: 5.482961
c-cmp: 5.692758
strng: 6.578780
</snippet></ROW><ROW><id>11443347</id><snippet>.</snippet></ROW><ROW><id>11443347</id><snippet>Item</snippet></ROW><ROW><id>11443347</id><snippet>$</snippet></ROW><ROW><id>11443347</id><snippet>pattern = re.compile(r"(Item$\s*4.*)Item$\s*5", re.S | re.M)
</snippet></ROW><ROW><id>11443356</id><snippet>stdout</snippet></ROW><ROW><id>11443356</id><snippet>stderr</snippet></ROW><ROW><id>11443502</id><snippet>sum</snippet></ROW><ROW><id>11443502</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; n = numpy.random.randint(0, 2, size=(3,3))
&gt;&gt;&gt; n
array([[1, 0, 1],
       [0, 1, 1],
       [1, 1, 1]])
&gt;&gt;&gt; n.sum()
7
</snippet></ROW><ROW><id>11443502</id><snippet>&gt;&gt;&gt; n = numpy.random.randint(0, 3, size=(3,3))
&gt;&gt;&gt; n
array([[2, 2, 0],
       [0, 2, 0],
       [1, 1, 0]])
&gt;&gt;&gt; n == 1
array([[False, False, False],
       [False, False, False],
       [ True,  True, False]], dtype=bool)
&gt;&gt;&gt; (n == 1).sum()
2
</snippet></ROW><ROW><id>11443650</id><snippet>object.__complex__(self) 
object.__int__(self) 
object.__long__(self) 
object.__float__(self) 

Called to implement the built-in functions complex(), int(), long(), and float(). 
Should return a value of the appropriate type.
</snippet></ROW><ROW><id>11443721</id><snippet>#!/usr/bin/perl 
use DBI; 
use strict; 

my $dbh = DBI-&gt;connect($your_connect_string) || die qq{Could not connect to $dbase\n};     
my $sql_1 = qq{ select * from table1}; 
my $sql_2 = qq{ select * from table2};
my $sql_3 = qq{ select * from table3};

my $sth_1 = $dbh-&gt;prepare($sql_1); 
my $sth_2 = $dbh-&gt;prepare($sql_2);
my $sth_3 = $dbh-&gt;prepare($sql_3);

$sth_1-&gt;execute();
$sth_2-&gt;execute();
$sth_3-&gt;execute();

while (my $hashref_1 = $sth_1-&gt;selectrow_hashref()) { 
...do something
} 

while (my $hashref_2 = $sth_2-&gt;selectrow_hashref()) { 
...do something
} 

while (my $hashref_3 = $sth_3-&gt;selectrow_hashref()) { 
...do something
} 

$sth_1-&gt;finish(); 
$sth_2-&gt;finish(); 
$sth_3-&gt;finish(); 

$dbh-&gt;disconnect(); 

exit;
</snippet></ROW><ROW><id>11443754</id><snippet>/usr/bin/easy_install-2.7</snippet></ROW><ROW><id>11443754</id><snippet>/usr/bin/python2.7</snippet></ROW><ROW><id>11443754</id><snippet>curl https://raw.github.com/gist/323731/25f99360c7de3f72027d8fd07cb369b1c8756ea6/install_homebrew.rb -o /tmp/install_homebrew.rb
ruby /tmp/install_homebrew.rb
rehash
</snippet></ROW><ROW><id>11443754</id><snippet>brew install gfortran
</snippet></ROW><ROW><id>11443754</id><snippet>sudo easy_install-2.6 pip
</snippet></ROW><ROW><id>11443754</id><snippet>sudo pip-2.6 install numpy
</snippet></ROW><ROW><id>11443754</id><snippet>sudo pip-2.6 install numpy</snippet></ROW><ROW><id>11443754</id><snippet>Requirement already satisfied (use --upgrade to upgrade): numpy in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python</snippet></ROW><ROW><id>11443754</id><snippet>sudo pip-2.6 install --upgrade numpy
</snippet></ROW><ROW><id>11443754</id><snippet>sudo pip-2.6 install scipy
</snippet></ROW><ROW><id>11443913</id><snippet>from itertools import product

mapping = {1:['a','b'], 2:['c','d']}
data = [1, 2]
for combo in product(*(mapping[d] for d in data)):
    print combo
</snippet></ROW><ROW><id>11443913</id><snippet>('a', 'c')
('a', 'd')
('b', 'c')
('b', 'd')
</snippet></ROW><ROW><id>11443913</id><snippet>strings = [''.join(combo) for combo in product(*(mapping[d] for d in data))]
</snippet></ROW><ROW><id>11443913</id><snippet>strings == ['ac', 'ad', 'bc', 'bd']</snippet></ROW><ROW><id>11443944</id><snippet>numbers_sizes = (i*10**exp for exp in range(2, 9) for i in range(1, 10))
for n in numbers_sizes:
    test(n)
</snippet></ROW><ROW><id>11443968</id><snippet>webapp2</snippet></ROW><ROW><id>11443968</id><snippet>application: your_app
version: 1
runtime: python27    #important
api_version: 1
threadsafe: true

handlers:
- url: /.*
  script: your_app.py
</snippet></ROW><ROW><id>11443968</id><snippet>you@your-computer:~/GAE_folder$ python dev_appserver.py /path/to/your/project/directory
</snippet></ROW><ROW><id>11443968</id><snippet>localhost:8080</snippet></ROW><ROW><id>11443968</id><snippet>helloworld.py</snippet></ROW><ROW><id>11443968</id><snippet>def main():
    app.run()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>11444081</id><snippet>&lt;tag&gt;&lt;/tag&gt;</snippet></ROW><ROW><id>11444081</id><snippet>&lt;tag/&gt;</snippet></ROW><ROW><id>11444212</id><snippet>__slots__</snippet></ROW><ROW><id>11444212</id><snippet>__repr__</snippet></ROW><ROW><id>11444212</id><snippet>class Data(object):
    __slots__ = ("beta", "calculated", "function")
    def __init__(self, beta=None, calculated=None, function=None):
        self.beta = beta; self.calculated = calculated; self.function = function

    def __repr__(self):
        return "(%s, %s, %s)"  % (self.beta, self.calculated, self.function)
</snippet></ROW><ROW><id>11444212</id><snippet>&gt;&gt;&gt; Model_1_Dict = {'key1':Data('value1','value2','value3') } 
&gt;&gt;&gt; 
&gt;&gt;&gt; Model_1_Dict
{'key1': (value1, value2, value3)}
&gt;&gt;&gt; Model_1_Dict["key1"].beta = "NewValue"
&gt;&gt;&gt; Model_1_Dict
{'key1': (NewValue, value2, value3)}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11444255</id><snippet>C:\temp&gt;dir pyflakes-0.5.0
 Volume in drive C has no label.
 Volume Serial Number is A421-40B4

 Directory of C:\temp\pyflakes-0.5.0

07/11/2012  06:28 PM    &lt;DIR&gt;          .
07/11/2012  06:28 PM    &lt;DIR&gt;          ..
09/03/2011  10:09 AM    &lt;DIR&gt;          bin
07/11/2012  06:28 PM    &lt;DIR&gt;          build
09/03/2011  09:02 AM             1,057 LICENSE
09/03/2011  09:02 AM             1,696 NEWS.txt
09/03/2011  10:09 AM               763 PKG-INFO
09/03/2011  10:09 AM    &lt;DIR&gt;          pyflakes
09/03/2011  09:30 AM             1,075 setup.py
               4 File(s)          4,591 bytes
               5 Dir(s)  74,326,130,688 bytes free
</snippet></ROW><ROW><id>11444255</id><snippet>setup.py</snippet></ROW><ROW><id>11444255</id><snippet>install</snippet></ROW><ROW><id>11444255</id><snippet>\python27\python.exe setup.py install 
</snippet></ROW><ROW><id>11444255</id><snippet> Writing C:\Python27\Lib\site-packages\pyflakes-0.5.0-py2.7.egg-info
</snippet></ROW><ROW><id>11444255</id><snippet>c:\Python27\Scripts</snippet></ROW><ROW><id>11444255</id><snippet>\Python27\python.exe \Python27\Scripts\pyflakes myfile.py
</snippet></ROW><ROW><id>11444255</id><snippet>c:\Python27\Scripts\pyflakes</snippet></ROW><ROW><id>11444255</id><snippet>C:\dev\python&gt;\Python27\python.exe \Python27\Scripts\pyflakes.py import1.py
Traceback (most recent call last):
  File "\Python27\Scripts\pyflakes.py", line 3, in &lt;module&gt;
    from pyflakes.scripts.pyflakes import main
  File "C:\Python27\Scripts\pyflakes.py", line 3, in &lt;module&gt;
    from pyflakes.scripts.pyflakes import main
ImportError: No module named scripts.pyflakes
</snippet></ROW><ROW><id>11444255</id><snippet>c:\Python27\Lib\site-packages\pyflakes</snippet></ROW><ROW><id>11444255</id><snippet>@echo off
SETLOCAL
if  _%1==_ goto USAGE
%~dp0\python.exe %~dp0\Scripts\pyflakes %*
goto ALL_DONE

:USAGE
  echo usage:  pyflakes ^&lt;file^&gt; [^&lt;optionalargs^&gt;]
  echo run the pyflakes syntax checker on a python source file.

:ALL_DONE
ENDLOCAL
</snippet></ROW><ROW><id>11444288</id><snippet>plt.imshow(np.dstack([ca_map, alpha], ...)
</snippet></ROW><ROW><id>11444288</id><snippet>plt.imshow(np.dstack([ca_map, ca_map, ca_map, alpha], ...)
</snippet></ROW><ROW><id>11444360</id><snippet>requests</snippet></ROW><ROW><id>11444360</id><snippet>import requests
r = requests.post('http://server/myapp/method', data={'aaa': 'bbb'})
</snippet></ROW><ROW><id>11444360</id><snippet>import requests
r = requests.post('http://server/myapp/method',
    data=file('binary_data_file.bin','rb').read())
</snippet></ROW><ROW><id>11444502</id><snippet>for word in t.with_prefix(string): # I assume with_prefix() returns a list of words
    if len(word) == len(string):
       words.append(word)
</snippet></ROW><ROW><id>11444502</id><snippet>words.extend(w for w in t.with_prefix(string) if len(w) == len(string))
</snippet></ROW><ROW><id>11444708</id><snippet>Person.objects.exclude(director__set=None)
</snippet></ROW><ROW><id>11444735</id><snippet>for i in range(start, end+1):
   print i
</snippet></ROW><ROW><id>11444735</id><snippet>+1</snippet></ROW><ROW><id>11444735</id><snippet>end</snippet></ROW><ROW><id>11444735</id><snippet>  range(5, 10)
</snippet></ROW><ROW><id>11444735</id><snippet>  5, 6, 7, 8, 9
</snippet></ROW><ROW><id>11444735</id><snippet>range()</snippet></ROW><ROW><id>11444735</id><snippet>range()</snippet></ROW><ROW><id>11444735</id><snippet>range()</snippet></ROW><ROW><id>11444735</id><snippet>xrange()</snippet></ROW><ROW><id>11444992</id><snippet>15</snippet></ROW><ROW><id>11444992</id><snippet>(15L,)</snippet></ROW><ROW><id>11444992</id><snippet>10**20 - 10**20 + 15</snippet></ROW><ROW><id>11445155</id><snippet>def rgb_to_hex(rgb):
    strValue = '%02x%02x%02x' % rgb
    iValue = int(strValue, 16)
    return iValue

xl.ActiveSheet.Cells(row, column).interior.color = rgb_to_hex((255,255,0))
</snippet></ROW><ROW><id>11445290</id><snippet>None</snippet></ROW><ROW><id>11445290</id><snippet>func_dict = {}
func_dict['str1'] = fun1
func_dict['str2'] = fun2
...
def function_lookup(func_string):
    return func_dict.get(func_string)
</snippet></ROW><ROW><id>11445290</id><snippet>function_lookup(whatever_string_variable)</snippet></ROW><ROW><id>11445290</id><snippet>function_lookup</snippet></ROW><ROW><id>11445521</id><snippet>SEX = [
    ("M","guy"),
    ("F","girl")
]
SEX_DICT = dict(SEX)
</snippet></ROW><ROW><id>11445634</id><snippet>from itertools import groupby
L = ["Ack","Ashley","book","channel","Charlie","David","Eli","George","Zebra"]
D ={v:k for k,v in dictmap.items() for v in v}
groups = itertools.groupby(L, key=lambda x:D.get(x[0]))

for k,g in groups:
    g=list(g)
    if len(g)&gt;1:
        print g,
    else:
        print g[0],
</snippet></ROW><ROW><id>11445666</id><snippet>pylint xyz.py --disable R,C,W,E --enable W0601,W0612
</snippet></ROW><ROW><id>11445666</id><snippet>--generate-rcfile</snippet></ROW><ROW><id>11445666</id><snippet>--rcfile</snippet></ROW><ROW><id>11445666</id><snippet>[MESSAGES CONTROL]
disable=R,C,W,E
enable=W0601,W0612
</snippet></ROW><ROW><id>11445991</id><snippet>import sys
data = [line.strip() for line in open(sys.argv[1],  "rb")]
</snippet></ROW><ROW><id>11445991</id><snippet>.readlines()</snippet></ROW><ROW><id>11446229</id><snippet>@staticmethod</snippet></ROW><ROW><id>11446229</id><snippet>class</snippet></ROW><ROW><id>11446229</id><snippet>class</snippet></ROW><ROW><id>11446229</id><snippet>class</snippet></ROW><ROW><id>11446229</id><snippet>@property</snippet></ROW><ROW><id>11446229</id><snippet>()</snippet></ROW><ROW><id>11446229</id><snippet>class MyModel(models.Model)
    fee = models.DecimalField()
    fee_gst = models.DecimalField()

    @property        
    def fee_total(self):
        return self.fee + self.fee_gst 
</snippet></ROW><ROW><id>11446229</id><snippet>class MyModel(models.Model)
    fee = models.DecimalField()
    fee_gst = models.DecimalField()


    def _fee_total(self):
        return self.fee + self.fee_gst
    fee_total = property(_fee_total)
</snippet></ROW><ROW><id>11447100</id><snippet>    &gt;&gt;&gt; def timeRange(timestr):
    ...     t1, t2 = timestr.split("-")
    ...     timeFormat = "%I:%M%p"
    ...     t1AM = datetime.datetime.strptime(t1 + "AM", timeFormat)
    ...     t1PM = datetime.datetime.strptime(t1 + "PM", timeFormat)
    ...     t2 = datetime.datetime.strptime(t2, timeFormat)
    ...       
    ...     if (t2 - t1AM).seconds &lt; (t2-t1PM).seconds:
    ...         return t1AM.time(), t2.time()
    ...     else:
    ...         return t1PM.time(), t2.time()
    &gt;&gt;&gt; timeRange("11:00-2:00PM")
    (datetime.time(11, 0), datetime.time(14, 0))
    &gt;&gt;&gt; timeRange("4:00-5:00PM")
    (datetime.time(16, 0), datetime.time(17, 0))
    &gt;&gt;&gt; timeRange("11:00-1:00AM")
    (datetime.time(23, 0), datetime.time(1, 0))
    &gt;&gt;&gt; timeRange("11:00-2:00PM")
    (datetime.time(11, 0), datetime.time(14, 0))
    &gt;&gt;&gt; timeRange("12:00-1:00PM")
    (datetime.time(12, 0), datetime.time(13, 0))
</snippet></ROW><ROW><id>11447100</id><snippet>time</snippet></ROW><ROW><id>11447221</id><snippet>zc.buildout</snippet></ROW><ROW><id>11447221</id><snippet>+=</snippet></ROW><ROW><id>11447221</id><snippet>-=</snippet></ROW><ROW><id>11447221</id><snippet>buildout</snippet></ROW><ROW><id>11447221</id><snippet>zc.buildout</snippet></ROW><ROW><id>11447419</id><snippet>event.set()</snippet></ROW><ROW><id>11447419</id><snippet>event.wait()  # waits for event.set()
</snippet></ROW><ROW><id>11447419</id><snippet>lock.acquire() # first time: returns true
lock.acquire() # second time: stalls until lock.release()
</snippet></ROW><ROW><id>11447696</id><snippet>vu.encode</snippet></ROW><ROW><id>11447696</id><snippet>vu = vu.encode('utf-8', 'xmlcharrefreplace')</snippet></ROW><ROW><id>11447745</id><snippet>*</snippet></ROW><ROW><id>11447745</id><snippet>L</snippet></ROW><ROW><id>11447745</id><snippet>hashlib</snippet></ROW><ROW><id>11447745</id><snippet>.digest_size</snippet></ROW><ROW><id>11447745</id><snippet>structspec = '%iL' % (hashlib.hash('md5').digest_size / 4)
struct.unpack(structspec, hashlib.md5(message).digest())
</snippet></ROW><ROW><id>11447745</id><snippet>4</snippet></ROW><ROW><id>11447745</id><snippet>struct.calcsize</snippet></ROW><ROW><id>11447745</id><snippet>L</snippet></ROW><ROW><id>11447745</id><snippet>structspec = '%iL' % (hashlib.hash('md5').digest_size / struct.calcsize('L'))
struct.unpack(structspec, hashlib.md5(message).digest())
</snippet></ROW><ROW><id>11447745</id><snippet>L</snippet></ROW><ROW><id>11447906</id><snippet>f.close</snippet></ROW><ROW><id>11447906</id><snippet>f.close()</snippet></ROW><ROW><id>11447906</id><snippet>with</snippet></ROW><ROW><id>11447906</id><snippet>with open('test.txt') as f:
    pass
# Automatically closes file on with block exit
</snippet></ROW><ROW><id>11447975</id><snippet>all_probs = []

for j in range(max(0, i - max_word_length), i):
    all_probs.append((probs[j] * word_prob(text[j:i]), j))

prob_k, k = max(all_probs)
</snippet></ROW><ROW><id>11448476</id><snippet>from django.db import models
from django.template import Template, Context


class YourModel(models.Model):
    body = models.TextField()

    def render_body(self, context=None):
        template = Template(self.body)
        context = context or {}
        context['object'] = self
        return template.render(Context(context))
</snippet></ROW><ROW><id>11448476</id><snippet>{{ your_model.render_body }}</snippet></ROW><ROW><id>11448476</id><snippet>{{ your_model.body }}</snippet></ROW><ROW><id>11448844</id><snippet>xoauth.py</snippet></ROW><ROW><id>11448844</id><snippet>$ wget http://google-mail-xoauth-tools.googlecode.com/svn/trunk/python/xoauth.py
$ python xoauth.py --generate_oauth_token --user=testing.oauth.1@gmail.com

xoauth.py:74: DeprecationWarning: the sha module is deprecated; use the hashlib module instead
import sha
oauth_token_secret: HFJEvjcTfiXSPxgLzDh-1yaH
oauth_token: 4/EwUxCtY9ye1kdtb4uNJIcaUe9KXl
oauth_callback_confirmed: true
To authorize token, visit this url and follow the directions to generate a verification code:
https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token=4%2FEwUxCtY9ye1kdtb4uNJIcaUe9KXl
Enter verification code: 7XjT15fqk1aNe8152d9oTRcJ
oauth_token: 1/MI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0
oauth_token_secret: NysqNqVTulFsdHpSRrPP56sF
</snippet></ROW><ROW><id>11448844</id><snippet>$ python xoauth.py --test_imap_authentication --user=testing.oauth.1@gmail.com \
 --oauth_token=1/MI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0 --oauth_token_secret=NysqNqVTulFsdHpSRrPP56sF

xoauth.py:74: DeprecationWarning: the sha module is deprecated; use the hashlib module instead
xoauth string (before base64-encoding):
GET https://mail.google.com/mail/b/testing.oauth.1@gmail.com/imap/ oauth_consumer_key="anonymous",oauth_nonce="18010070659685102619",oauth_signature="jTJv%2FAFATpzfq%2BZTLAAxFNmWPi0%3D",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1342084141",oauth_token="1%2FMI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0",oauth_version="1.0"

XOAUTH string (base64-encoded): R0VUIGh0dHBzOi8vbWFpbC5nb29nbGUuY29tL21haWwvYi90ZXN0aW5nLm9hdXRoLjFAZ21haWwuY29tL2ltYXAvIG9hdXRoX2NvbnN1bWVyX2tleT0iYW5vbnltb3VzIixvYXV0aF9ub25jZT0iMTgwMTAwNzA2NTk2ODUxMDI2MTkiLG9hdXRoX3NpZ25hdHVyZT0ialRKdiUyRkFGQVRwemZxJTJCWlRMQUF4Rk5tV1BpMCUzRCIsb2F1dGhfc2lnbmF0dXJlX21ldGhvZD0iSE1BQy1TSEExIixvYXV0aF90aW1lc3RhbXA9IjEzNDIwODQxNDEiLG9hdXRoX3Rva2VuPSIxJTJGTUk2QjJEcUpQNEZFa0RSTFVLckQ1bDQ2c1EwNzU4LTJ1Y0VLQlktRGVCMCIsb2F1dGhfdmVyc2lvbj0iMS4wIg==

09:01.40 &gt; COKI1 AUTHENTICATE XOAUTH
09:01.44 &lt; + 
09:01.45 write literal size 444
09:02.68 &lt; * CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 UIDPLUS COMPRESS=DEFLATE
09:02.68 &lt; COKI1 OK testing.oauth.1@gmail.com Testing Oauth authenticated (Success)
09:02.68 &gt; COKI2 SELECT INBOX
09:03.09 &lt; * FLAGS (\Answered \Flagged \Draft \Deleted \Seen)
09:03.09 &lt; * OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen \*)] Flags permitted.
09:03.09 &lt; * OK [UIDVALIDITY 3] UIDs valid.
09:03.09 &lt; * 3 EXISTS
09:03.09 &lt; * 0 RECENT
09:03.09 &lt; * OK [UIDNEXT 4] Predicted next UID.
09:03.09 &lt; COKI2 OK [READ-WRITE] INBOX selected. (Success)
</snippet></ROW><ROW><id>11448844</id><snippet>virtualenv</snippet></ROW><ROW><id>11448844</id><snippet>$ git clone https://github.com/simplegeo/python-oauth2.git
$ cd python-oauth2/
$ sudo python setup.py install
</snippet></ROW><ROW><id>11448844</id><snippet>import oauth2 as oauth
import oauth2.clients.imap as imaplib

# Set up your Consumer and Token as per usual. Just like any other
# three-legged OAuth request.
consumer = oauth.Consumer('anonymous', 'anonymous')
token = oauth.Token('1/MI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0', 'NysqNqVTulFsdHpSRrPP56sF')

# Setup the URL according to Google's XOAUTH implementation. Be sure
# to replace the email here with the appropriate email address that
# you wish to access.
url = "https://mail.google.com/mail/b/testing.oauth.1@gmail.com/imap/"

conn = imaplib.IMAP4_SSL('imap.googlemail.com')
conn.debug = 4 

# This is the only thing in the API for impaplib.IMAP4_SSL that has 
# changed. You now authenticate with the URL, consumer, and token.
conn.authenticate(url, consumer, token)

# Once authenticated everything from the impalib.IMAP4_SSL class will 
# work as per usual without any modification to your code.
conn.select('INBOX')
print conn.list()


&gt;&gt;&gt; conn.authenticate(url, consumer, token)
20:11.73 &gt; EPKK1 AUTHENTICATE XOAUTH
20:11.78 &lt; + 
20:11.78 write literal size 496
20:11.93 &lt; * CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 UIDPLUS COMPRESS=DEFLATE
20:11.93 &lt; EPKK1 OK testing.oauth.1@gmail.com Testing Oauth authenticated (Success)
&gt;&gt;&gt; conn.select('INBOX')
20:17.47 &gt; EPKK2 SELECT INBOX
20:17.58 &lt; * FLAGS (\Answered \Flagged \Draft \Deleted \Seen)
20:17.58 &lt; * OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen \*)] Flags permitted.
20:17.58 &lt; * OK [UIDVALIDITY 3] UIDs valid.
20:17.58 &lt; * 3 EXISTS
20:17.58 &lt; * 0 RECENT
20:17.58 &lt; * OK [UIDNEXT 4] Predicted next UID.
20:17.58 &lt; EPKK2 OK [READ-WRITE] INBOX selected. (Success)
('OK', ['3'])
&gt;&gt;&gt; print conn.list()
20:20.23 &gt; EPKK3 LIST "" *
20:20.28 &lt; * LIST (\HasNoChildren) "/" "INBOX"
20:20.28 &lt; * LIST (\Noselect \HasChildren) "/" "[Gmail]"
20:20.28 &lt; * LIST (\HasNoChildren) "/" "[Gmail]/All Mail"
20:20.28 &lt; * LIST (\HasNoChildren) "/" "[Gmail]/Drafts"
20:20.28 &lt; * LIST (\HasNoChildren) "/" "[Gmail]/Important"
20:20.28 &lt; * LIST (\HasNoChildren) "/" "[Gmail]/Sent Mail"
20:20.28 &lt; * LIST (\HasNoChildren) "/" "[Gmail]/Spam"
20:20.28 &lt; * LIST (\HasNoChildren) "/" "[Gmail]/Starred"
20:20.28 &lt; * LIST (\HasNoChildren) "/" "[Gmail]/Trash"
20:20.28 &lt; EPKK3 OK Success
('OK', ['(\\HasNoChildren) "/" "INBOX"', '(\\Noselect \\HasChildren) "/" "[Gmail]"', '(\\HasNoChildren) "/" "[Gmail]/All Mail"', '(\\HasNoChildren) "/" "[Gmail]/Drafts"', '(\\HasNoChildren) "/" "[Gmail]/Important"', '(\\HasNoChildren) "/" "[Gmail]/Sent Mail"', '(\\HasNoChildren) "/" "[Gmail]/Spam"', '(\\HasNoChildren) "/" "[Gmail]/Starred"', '(\\HasNoChildren) "/" "[Gmail]/Trash"'])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11448844</id><snippet>import oauth2 as oauth
import oauth2.clients.smtp as smtplib

# Set up your Consumer and Token as per usual. Just like any other
# three-legged OAuth request.
# Set up your Consumer and Token as per usual. Just like any other
# three-legged OAuth request.
consumer = oauth.Consumer('anonymous', 'anonymous')
token = oauth.Token('1/MI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0', 'NysqNqVTulFsdHpSRrPP56sF')

# Setup the URL according to Google's XOAUTH implementation. Be sure
# to replace the email here with the appropriate email address that
# you wish to access.
url = "https://mail.google.com/mail/b/testing.oauth.1@gmail.com/smtp/"

conn = smtplib.SMTP('smtp.googlemail.com', 587)
conn.set_debuglevel(True)
conn.ehlo('test')
conn.starttls()

# Again the only thing modified from smtplib.SMTP is the authenticate
# method, which works identically to the imaplib.IMAP4_SSL method.
conn.authenticate(url, consumer, token)



&gt;&gt;&gt; conn.ehlo('test')
send: 'ehlo test\r\n'
reply: '250-mx.google.com at your service, [142.255.57.49]\r\n'
reply: '250-SIZE 35882577\r\n'
reply: '250-8BITMIME\r\n'
reply: '250-STARTTLS\r\n'
reply: '250 ENHANCEDSTATUSCODES\r\n'
reply: retcode (250); Msg: mx.google.com at your service, [142.255.57.49]
SIZE 35882577
8BITMIME
STARTTLS
ENHANCEDSTATUSCODES
(250, 'mx.google.com at your service, [142.255.57.49]\nSIZE 35882577\n8BITMIME\nSTARTTLS\nENHANCEDSTATUSCODES')
&gt;&gt;&gt; conn.starttls()
send: 'STARTTLS\r\n'
reply: '220 2.0.0 Ready to start TLS\r\n'
reply: retcode (220); Msg: 2.0.0 Ready to start TLS
(220, '2.0.0 Ready to start TLS')
&gt;&gt;&gt; conn.authenticate(url, consumer, token)
send: 'AUTH XOAUTH R0VUIGh0dHBzOi8vbWFpbC5nb29nbGUuY29tL21haWwvYi90ZXN0aW5nLm9hdXRoLjFAZ21haWwuY29tL3NtdHAvIG9hdXRoX2JvZHlfaGFzaD0iMmptajdsNXJTdzB5VmIlMkZ2bFdBWWtLJTJGWUJ3ayUzRCIsb2F1dGhfY29uc3VtZXJfa2V5PSJhbm9ueW1vdXMiLG9hdXRoX25vbmNlPSI4MTEyMDkxNCIsb2F1dGhfc2lnbmF0dXJlPSJSaUFsTGdQWnpBSkNQJTJGWmx5aGRpYU1CV0xiTSUzRCIsb2F1dGhfc2lnbmF0dXJlX21ldGhvZD0iSE1BQy1TSEExIixvYXV0aF90aW1lc3RhbXA9IjEzNDIwODU2NzIiLG9hdXRoX3Rva2VuPSIxJTJGTUk2QjJEcUpQNEZFa0RSTFVLckQ1bDQ2c1EwNzU4LTJ1Y0VLQlktRGVCMCIsb2F1dGhfdmVyc2lvbj0iMS4wIg==\r\n'
reply: '235 2.7.0 Accepted\r\n'
reply: retcode (235); Msg: 2.7.0 Accepted
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11448844</id><snippet>&gt;&gt;&gt; conn.authenticate(url, consumer, token)
send: 'AUTH XOAUTH R0VUIGh0dHBzOi8vbWFpbC5nb29nbGUuY29tL21haWwvYi90ZXN0aW5nLm9hdXRoLjFAZ21haWwuY29tL3NtdHAvIG9hdXRoX2JvZHlfaGFzaD0iMmptajdsNXJTdzB5VmIlMkZ2bFdBWWtLJTJGWUJ3ayUzRCIsb2F1dGhfY29uc3VtZXJfa2V5PSJhbm9ueW1vdXMiLG9hdXRoX25vbmNlPSI2OTg3ODM3NiIsb2F1dGhfc2lnbmF0dXJlPSIlMkZjUGslMkJRVWVJY1RaYXp1ekkwR1FzdkdtbDFBJTNEIixvYXV0aF9zaWduYXR1cmVfbWV0aG9kPSJITUFDLVNIQTEiLG9hdXRoX3RpbWVzdGFtcD0iMTM0MjA4NjAxNCIsb2F1dGhfdG9rZW49IjElMkZNSTZCMkRxSlA0RkVrRFJMVUtyRDVsNDZzUTA3NTgtMnVjRUtCWS1EZUIwIixvYXV0aF92ZXJzaW9uPSIxLjAi\r\n'
reply: '235 2.7.0 Accepted\r\n'
reply: retcode (235); Msg: 2.7.0 Accepted
&gt;&gt;&gt; header = 'To:testing.oauth.1@gmail.com\n' + 'From: testing.oauth.1@gmail.com\n' + 'Subject:testing \n'
&gt;&gt;&gt; msg = header + '\n this is test msg from me \n\n'
&gt;&gt;&gt; conn.sendmail('testing.oauth.1@gmail.com', 'testing.oauth.1@gmail.com', msg)
send: 'mail FROM:&lt;testing.oauth.1@gmail.com&gt; size=107\r\n'
reply: '250 2.1.0 OK gb7sm6540492qab.12\r\n'
reply: retcode (250); Msg: 2.1.0 OK gb7sm6540492qab.12
send: 'rcpt TO:&lt;testing.oauth.1@gmail.com&gt;\r\n'
reply: '250 2.1.5 OK gb7sm6540492qab.12\r\n'
reply: retcode (250); Msg: 2.1.5 OK gb7sm6540492qab.12
send: 'data\r\n'
reply: '354  Go ahead gb7sm6540492qab.12\r\n'
reply: retcode (354); Msg: Go ahead gb7sm6540492qab.12
data: (354, 'Go ahead gb7sm6540492qab.12')
send: 'To:testing.oauth.1@gmail.com\r\nFrom: testing.oauth.1@gmail.com\r\nSubject:testing \r\n\r\n this is test msg from me \r\n\r\n.\r\n'
reply: '250 2.0.0 OK 1342086030 gb7sm6540492qab.12\r\n'
reply: retcode (250); Msg: 2.0.0 OK 1342086030 gb7sm6540492qab.12
data: (250, '2.0.0 OK 1342086030 gb7sm6540492qab.12')
{}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11448844</id><snippet>import oauth2 as oauth
import oauth2.clients.smtp as smtplib

consumer = oauth.Consumer('anonymous', 'anonymous')
token = oauth.Token('1/MI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0', 'NysqNqVTulFsdHpSRrPP56sF')

url = "https://mail.google.com/mail/b/testing.oauth.1@gmail.com/smtp/"

conn = smtplib.SMTP('smtp.googlemail.com', 587)
conn.set_debuglevel(True)
conn.ehlo('test')
conn.starttls()

conn.authenticate(url, consumer, token)

header = 'To:testing.oauth.1@gmail.com\n' + 'From: testing.oauth.1@gmail.com\n' + 'Subject:testing \n'
msg = header + '\n this is test msg from me \n\n'
try:
    conn.sendmail('testing.oauth.1@gmail.com', 'testing.oauth.1@gmail.com', msg)
except Exception as ex:
    print str(ex)
    print 'retying ...'
    conn.authenticate(url, consumer, token)
    conn.sendmail('testing.oauth.1@gmail.com', 'testing.oauth.1@gmail.com', msg)
</snippet></ROW><ROW><id>11448844</id><snippet>xoauth</snippet></ROW><ROW><id>11448844</id><snippet>import time
import smtplib
import xoauth

consumer = xoauth.OAuthEntity('anonymous', 'anonymous')
access_token = xoauth.OAuthEntity('1/MI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0', 'NysqNqVTulFsdHpSRrPP56sF')

xoauth_string = xoauth.GenerateXOauthString(consumer, access_token, 'testing.oauth.1@gmail.com', 'smtp', 'testing.oauth.1@gmail.com', str(xoauth.random.randrange(2**64 - 1)), str(int(time.time())))

smtp_conn = smtplib.SMTP('smtp.gmail.com', 587)
smtp_conn.set_debuglevel(True)
smtp_conn.ehlo()
smtp_conn.starttls()
smtp_conn.ehlo()
smtp_conn.docmd('AUTH', 'XOAUTH ' + xoauth.base64.b64encode(xoauth_string))

header = 'To:testing.oauth.1@gmail.com\n' + 'From: testing.oauth.1@gmail.com\n' + 'Subject:testing \n'
msg = header + '\n this is test msg from me \n\n'
smtp_conn.sendmail('testing.oauth.1@gmail.com', 'testing.oauth.1@gmail.com', msg)
</snippet></ROW><ROW><id>11448844</id><snippet>python-oauth2</snippet></ROW><ROW><id>11448844</id><snippet>import oauth2 as oauth
import oauth2.clients.smtp as smtplib

consumer = oauth.Consumer('anonymous', 'anonymous')
token = oauth.Token('1/MI6B2DqJP4FEkDRLUKrD5l46sQ0758-2ucEKBY-DeB0', 'NysqNqVTulFsdHpSRrPP56sF')

url = "https://mail.google.com/mail/b/testing.oauth.1@gmail.com/smtp/"

conn = smtplib.SMTP('smtp.googlemail.com', 587)
conn.set_debuglevel(True)
conn.ehlo('test')
conn.starttls()
conn.ehlo()
conn.authenticate(url, consumer, token)
header = 'To:testing.oauth.1@gmail.com\n' + 'From: testing.oauth.1@gmail.com\n' + 'Subject:testing \n'
msg = header + '\n this is test msg from me \n\n'
conn.sendmail('testing.oauth.1@gmail.com', 'testing.oauth.1@gmail.com', msg)
</snippet></ROW><ROW><id>11448844</id><snippet>conn.ehlo()</snippet></ROW><ROW><id>11448881</id><snippet>Sendrecv()</snippet></ROW><ROW><id>11448881</id><snippet>sendrecv()</snippet></ROW><ROW><id>11448882</id><snippet>django.views.generic.base.View.as_view</snippet></ROW><ROW><id>11448882</id><snippet>view</snippet></ROW><ROW><id>11448882</id><snippet>view()</snippet></ROW><ROW><id>11448882</id><snippet>dispatch()</snippet></ROW><ROW><id>11448882</id><snippet>django.views.generic.base.View.__init__</snippet></ROW><ROW><id>11448882</id><snippet>django.views.generic.base.View.dispatch</snippet></ROW><ROW><id>11448882</id><snippet>class YourView(SomeView):
    def dispatch(self, request, *args, **kwargs):
        # parse the request here ie.
        self.foo = request.GET.get('foo', False)

        # call the view
        return super(YourView, self).dispatch(request, *args, **kwargs)
</snippet></ROW><ROW><id>11449035</id><snippet>&gt;&gt;&gt; max(((k, len(v)) for k, v in dic.items()), key=lambda x: x[1])
('attacks', 4)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11449746</id><snippet>AllPaths</snippet></ROW><ROW><id>11449746</id><snippet># Get paths to all .py files (relative to build dir)
file(GLOB_RECURSE SubDirs RELATIVE ${CMAKE_BINARY_DIR} "${CMAKE_BINARY_DIR}/*.py")
# Clear the variable AllPaths ready to take the list of results
set(AllPaths)
foreach(SubDir ${SubDirs})
  # Strip the filename from the path
  get_filename_component(SubDir ${SubDir} PATH)
  # Change the path to a semi-colon separated list
  string(REPLACE "/" ";" PathParts ${SubDir})
  # Incrementally rebuild path, appending each partial path to list of results
  set(RebuiltPath ${CMAKE_BINARY_DIR})
  foreach(PathPart ${PathParts})
    set(RebuiltPath "${RebuiltPath}/${PathPart}")
    set(AllPaths ${AllPaths} ${RebuiltPath})
  endforeach()
endforeach()
# Remove duplicates
list(REMOVE_DUPLICATES AllPaths)
</snippet></ROW><ROW><id>11450127</id><snippet>import sys
</snippet></ROW><ROW><id>11450151</id><snippet>myList = sum((item.split() for item in myList), [])
</snippet></ROW><ROW><id>11450151</id><snippet>sum</snippet></ROW><ROW><id>11450151</id><snippet>list</snippet></ROW><ROW><id>11450151</id><snippet>result = []
for item in myList:
    result.extend(item.split())
myList = result
</snippet></ROW><ROW><id>11450312</id><snippet>itemgetter</snippet></ROW><ROW><id>11450312</id><snippet>lambda</snippet></ROW><ROW><id>11450312</id><snippet>sorted_li = sorted(li, key=lambda x: (-x[1], x[0]))
</snippet></ROW><ROW><id>11450312</id><snippet>itemgetter</snippet></ROW><ROW><id>11450581</id><snippet>stats.items()</snippet></ROW><ROW><id>11450581</id><snippet>for time in sorted(stats.keys()):
    formatted_data.append(tuple(stats[time]))
</snippet></ROW><ROW><id>11450607</id><snippet>SCRIPTS = create.py users.py posts.py likes.py blogs.py blog_likes.py

.PHONY: all
all: blogs.db

blogs.db: $(SCRIPTS)
    @for s in $?; do $(PYTHON) $$s; done
</snippet></ROW><ROW><id>11450648</id><snippet>views.py</snippet></ROW><ROW><id>11450648</id><snippet>^$</snippet></ROW><ROW><id>11450648</id><snippet>urlpatterns = patterns('',
        url(r'^/two$', 'myapp2.views.home2', name='home2'),
        url(r'^$', 'myapp1.views.home1', name='home1'),
</snippet></ROW><ROW><id>11450648</id><snippet>http://localhost:8000/two</snippet></ROW><ROW><id>11450648</id><snippet>home2</snippet></ROW><ROW><id>11450648</id><snippet>http://localhost:8000/</snippet></ROW><ROW><id>11450648</id><snippet>home1</snippet></ROW><ROW><id>11450683</id><snippet>import collections

result = collections.defaultdict(list)

for d in dictionaries:
    for k, v in d.items():
        result[k].append(v)
</snippet></ROW><ROW><id>11450713</id><snippet>if all([isinstance(x, int) for x in position, value])
</snippet></ROW><ROW><id>11450713</id><snippet>if all(isinstance(x, int) for x in (position, value))
</snippet></ROW><ROW><id>11450713</id><snippet>raise</snippet></ROW><ROW><id>11450713</id><snippet>__init__</snippet></ROW><ROW><id>11450713</id><snippet>except</snippet></ROW><ROW><id>11450713</id><snippet>def __init__(self, position, value, flag=False):
    if not all(isinstance(x, int) for x in (position, value)):
        raise PointException("Foo value and position must be integers.")

    self.position = position
    self.value = value
    self.point = (position, value)
    self.flag = flag
</snippet></ROW><ROW><id>11451552</id><snippet>self.values = []</snippet></ROW><ROW><id>11451552</id><snippet>numberwritten()</snippet></ROW><ROW><id>11451552</id><snippet>self.values</snippet></ROW><ROW><id>11451552</id><snippet>__init__()</snippet></ROW><ROW><id>11451552</id><snippet>print("Value %i = %s" % (index, self.box[key].get())
</snippet></ROW><ROW><id>11451552</id><snippet># Map items in self.values to strings (necessary if they are not strings).
print("All values: [%s]" % ", ".join(map(str, self.values)))

# Use this if the contents of self.values are strings.
print("All values: [%s]" % ", ".join(self.values))   
</snippet></ROW><ROW><id>11451812</id><snippet>networkx</snippet></ROW><ROW><id>11451812</id><snippet>import networkx as nx
g = nx.DiGraph()
g.add_edges_from( (y,x) for x,y in your_list )
print list(nx.dfs_postorder_nodes(g, '3'))
[u'11', u'10', u'5', u'7', u'6', u'9', u'8', u'4', '3']
</snippet></ROW><ROW><id>11451822</id><snippet>RedirectingFormPlugin</snippet></ROW><ROW><id>11451822</id><snippet>FormPlugin</snippet></ROW><ROW><id>11451822</id><snippet>RedirectingFormPlugin</snippet></ROW><ROW><id>11451822</id><snippet>/logout</snippet></ROW><ROW><id>11451822</id><snippet>RedirectingFormPlugin</snippet></ROW><ROW><id>11451863</id><snippet>import pyodbc
cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER=SQLSRV01;DATABASE=DATABASE;UID=USER;PWD=PASSWORD')
cursor = cnxn.cursor()

cursor.execute("SELECT WORK_ORDER.TYPE,WORK_ORDER.STATUS, WORK_ORDER.BASE_ID, WORK_ORDER.LOT_ID FROM WORK_ORDER")
for row in cursor.fetchall():
    print row
</snippet></ROW><ROW><id>11452661</id><snippet>font.Render("Angle = ? \u03C4".encode('utf8'))
</snippet></ROW><ROW><id>11452799</id><snippet>sed -i -e '/-nan/d' datafile.txt
</snippet></ROW><ROW><id>11452799</id><snippet>for file in data1.txt data2.txt data3.txt; do
    sed -i -e '/-nan/d' $file
done
</snippet></ROW><ROW><id>11452799</id><snippet>find</snippet></ROW><ROW><id>11452799</id><snippet>find . -name "data*.txt" -exec sed -i -e '/-nan/d' {} +
</snippet></ROW><ROW><id>11452959</id><snippet> with open('data.txt') as inf:
    for line in inf:
        line = line.strip()
        line = line.split(':')
        print ':'.join(line[2:])
</snippet></ROW><ROW><id>11452959</id><snippet>'1:alpha:beta'</snippet></ROW><ROW><id>11452959</id><snippet>'beta'</snippet></ROW><ROW><id>11452959</id><snippet>'1:alpha:beta:gamma'</snippet></ROW><ROW><id>11452959</id><snippet>'beta:gamma'</snippet></ROW><ROW><id>11453146</id><snippet>Request</snippet></ROW><ROW><id>11453146</id><snippet>req = urllib2.Request(url + half_url.encode('utf-8'))
</snippet></ROW><ROW><id>11453169</id><snippet>instance.__dict__</snippet></ROW><ROW><id>11453169</id><snippet>from django.db.models import signals

def check_for_url(sender, instance, created, kwargs**):
    for value in instance.__dict__.values():
        if 'http://' in value:
            # do want you want
post_save.connect(check_for_url)
</snippet></ROW><ROW><id>11453235</id><snippet>&gt;&gt;&gt; a = np.array([[1,2,3], [4,5,np.nan], [7,8,9]])
array([[  1.,   2.,   3.],
       [  4.,   5.,  nan],
       [  7.,   8.,   9.]])

&gt;&gt;&gt; a[~np.isnan(a).any(axis=1)]
array([[ 1.,  2.,  3.],
       [ 7.,  8.,  9.]])
</snippet></ROW><ROW><id>11453235</id><snippet>a</snippet></ROW><ROW><id>11453235</id><snippet>np.isnan(a)</snippet></ROW><ROW><id>11453235</id><snippet>True</snippet></ROW><ROW><id>11453235</id><snippet>NaN</snippet></ROW><ROW><id>11453235</id><snippet>False</snippet></ROW><ROW><id>11453235</id><snippet>.any(axis=1)</snippet></ROW><ROW><id>11453235</id><snippet>m*n</snippet></ROW><ROW><id>11453235</id><snippet>n</snippet></ROW><ROW><id>11453235</id><snippet>or</snippet></ROW><ROW><id>11453235</id><snippet>~</snippet></ROW><ROW><id>11453235</id><snippet>True/False</snippet></ROW><ROW><id>11453235</id><snippet>a[  ]</snippet></ROW><ROW><id>11453235</id><snippet>True</snippet></ROW><ROW><id>11453371</id><snippet>parts</snippet></ROW><ROW><id>11453371</id><snippet>eggs</snippet></ROW><ROW><id>11453523</id><snippet>numpy.seterr</snippet></ROW><ROW><id>11453523</id><snippet>    numpy.seterr(invalid='ignore')
</snippet></ROW><ROW><id>11453523</id><snippet>0.j</snippet></ROW><ROW><id>11453523</id><snippet>0.</snippet></ROW><ROW><id>11453523</id><snippet>&gt;&gt;&gt; type(0.j)
&lt;class 'complex'&gt;
&gt;&gt;&gt; type(0.)
&lt;class 'float'&gt;
</snippet></ROW><ROW><id>11453523</id><snippet>&gt;&gt;&gt; erf(complex(1))
(0.84270079294971512+0j)
&gt;&gt;&gt; erf(1)
0.84270079294971478
</snippet></ROW><ROW><id>11453523</id><snippet>    SUBROUTINE CERROR(Z,CER)
C   ...
    Z1=Z
C   ...
    CS=Z1
    CR=Z1
    DO 10 K=1,120
        CR=CR*Z1*Z1/(K+0.5D0)
        CS=CS+CR
        IF (CDABS(CR/CS).LT.1.0D-15) GO TO 15
10  CONTINUE
</snippet></ROW><ROW><id>11453819</id><snippet>import wx

class ChoicePanelTwo(wx.Panel):
    def __init__(self, parent, seed):
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        self.SetBackgroundColour('blue')
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.List = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        for i in range(seed):
            self.List.InsertStringItem(i, str(i))
        sizer.Add(self.List, 1, wx.ALL|wx.EXPAND, 5)
        self.SetSizer(sizer)

class ChoicePanelOne(wx.Panel):
    def __init__(self, parent, seed):
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        self.SetBackgroundColour('green')
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.RegisterList = wx.Choicebook(self, wx.ID_ANY)
        sizer.Add(self.RegisterList, 1, wx.ALL|wx.EXPAND, 5)
        for i in range(seed):
            self.RegisterList.AddPage(ChoicePanelTwo(self.RegisterList, seed*50),  str(i))
        self.SetSizer(sizer)

class TreePanel(wx.Panel):
    def __init__(self, parent, seed):
        wx.Panel.__init__(self, parent, id=wx.ID_ANY)
        self.SetBackgroundColour('cyan')
        self.Choicbook = wx.Choicebook(self, wx.ID_ANY)
        for i in range(seed):
            self.Choicbook.AddPage(ChoicePanelOne(self.Choicbook, seed*2), str(i))
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.Choicbook, 1, wx.ALL|wx.EXPAND, 5)
        self.SetSizer(sizer)

class AppFrame(wx.Frame):
    """ The main frame of the application
    """
    title = 'Application'
    WindowSize = (1024, 768)
    seed = 2

    def __init__(self):
        wx.Frame.__init__(self, None, -1, self.title, size=self.WindowSize, 
                          style=wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.CAPTION|wx.CLOSE_BOX|wx.CLIP_CHILDREN)
        self.create_main_panel()

    def create_main_panel(self):
        self.panel = TreePanel(self, self.seed)        

if __name__ == '__main__':
    app = wx.PySimpleApp()
    app.frame = AppFrame()
    app.frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>11453969</id><snippet>with open('data.txt') as inf:
    for line in inf:
        if "Internet(R) explorer" in line:
            print 'found "Internet(R) explorer" in file.'
</snippet></ROW><ROW><id>11453969</id><snippet>with open('data.txt') as inf:
    for number, line in enumerate(inf, 1):
        if "Internet(R) explorer" in line:
            print 'found "Internet(R) explorer" on line %d.' % number
</snippet></ROW><ROW><id>11453969</id><snippet>1</snippet></ROW><ROW><id>11453969</id><snippet>$ grep "Internet(R) explorer" data.txt
</snippet></ROW><ROW><id>11453969</id><snippet>"Internet(R) explorer"
</snippet></ROW><ROW><id>11453969</id><snippet>-n</snippet></ROW><ROW><id>11453969</id><snippet>$ grep -n "Internet(R) explorer" data.txt
3:"Internet(R) explorer"
</snippet></ROW><ROW><id>11453972</id><snippet>import</snippet></ROW><ROW><id>11454250</id><snippet>{% if join_link %}
    {% include 'join_link.html' %}
{% endif %}
{% if leave_link %}
    {% include 'leave_link.html' %}
{% endif %}
{% if not join_link and not leave_link %}
    you can't join
{% endif %}
</snippet></ROW><ROW><id>11454250</id><snippet>{% if join_link %}
    &lt;a href="{{ join_link }}"&gt;join&lt;/a&gt;
{% endif %}
{% if leave_link %}
    &lt;a href="{{ leave_link }}"&gt;leave&lt;/a&gt;
{% endif %}
{% if not join_link and not leave_link %}
    you can't join
{% endif %}
</snippet></ROW><ROW><id>11454250</id><snippet>self.request.user
self.request.user.is_authenticated() # return True if the user is logged in
</snippet></ROW><ROW><id>11454370</id><snippet>s = '| | +-out\windows-x86-MD-mbcs-vs2008-rel\bin\VisualStudio08-32bit.exe'
print s.split('-', 1)[1]
# out\windows-x86-MD-mbcs-vs2008-relin\VisualStudio08-32bit.exe
</snippet></ROW><ROW><id>11454397</id><snippet>python
&gt;&gt;&gt; from bzrlib import plugin
&gt;&gt;&gt; list_of_bzr_plugin_paths = [os.path.abspath(p)
... for p in plugin.get_standard_plugins_path()]
</snippet></ROW><ROW><id>11454397</id><snippet>$HOME/.bazaar/plugins'</snippet></ROW><ROW><id>11454397</id><snippet>/usr/lib/python2.7/dist-packages/bzrlib/plugins'</snippet></ROW><ROW><id>11454397</id><snippet>    bzr branch lp:bzr-push-and-update 
</snippet></ROW><ROW><id>11454397</id><snippet>bzr branch lp:bzr-push-and-update ~/.bazaar/plugins/push_and_update
</snippet></ROW><ROW><id>11454492</id><snippet>globals()['a']='foo'
print(a)   #prints foo
</snippet></ROW><ROW><id>11454492</id><snippet>def GenerateArray(pers):
    d={}
    for item in pers:
        d['newtest30' + str(item)] = []

    return d
</snippet></ROW><ROW><id>11454492</id><snippet>d=GenerateArray([1,2,3])
test301=d['newtest301']
</snippet></ROW><ROW><id>11454655</id><snippet>bad_values = [value_tuple for value_tuple in 
                  [(myvalue, why_bad(myvalue)) for myvalue in all_values]
              if value_tuple[1]] # value_tuple[1] == why_bad(myvalue)
</snippet></ROW><ROW><id>11454655</id><snippet>filter</snippet></ROW><ROW><id>11454655</id><snippet>bad_values = filter(lambda value_tuple: value_tuple[1],
                    [(myvalue, why_bad(myvalue)) for myvalue in all_values])
</snippet></ROW><ROW><id>11454812</id><snippet>linklist = [el.string for el in soup.findAll('link')]
</snippet></ROW><ROW><id>11454908</id><snippet>for k, v in dicts1.iteritems():
    try:
        dicts2[k] =  type(v)(dicts2[k])
    except (TypeError, ValueError) as e:
        pass # types not compatible
    except KeyError as e:
        pass # No matching key in dict
</snippet></ROW><ROW><id>11454921</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; 
&gt;&gt;&gt; url = 'http://endic.naver.com/search.nhn?isOnlyViewEE=N&amp;query=Rule'
&gt;&gt;&gt; page = urllib2.urlopen(url)
&gt;&gt;&gt; soup = BeautifulSoup(page)
&gt;&gt;&gt; 
&gt;&gt;&gt; playlists = soup.find_all("a", {"playlist": True})
&gt;&gt;&gt; playlists
[&lt;a class="play3 N=a:wrd.listencom,r:3,i:85c05904f36749e6aa9f6fd3f461f63c" href="#" playlist="http://dn-naverdic.ktics.co.kr/naverdic/e883ec39de5d45840c2744705c2918c7/4ffee8ca/naverdic/endic/sound/clear/us/007/007582.mp3"&gt;
&lt;img alt="play" class="play" height="18" src="http://dicimg.naver.com/endic/img/play.gif" width="19"/&gt;
&lt;/a&gt;, &lt;a class="play3 N=a:wrd.listenuk,r:3,i:85c05904f36749e6aa9f6fd3f461f63c" href="#" playlist="http://dn-naverdic.ktics.co.kr/naverdic/7001326345aadc53fa3911f9083065d7/4ffee8ca/naverdic/endic/sound/uk/0990000/0992050.mp3"&gt;
&lt;img alt="play" class="play" height="18" src="http://dicimg.naver.com/endic/img/play.gif" width="19"/&gt;
&lt;/a&gt;]
&gt;&gt;&gt; 
&gt;&gt;&gt; playlists[0].get("playlist")
'http://dn-naverdic.ktics.co.kr/naverdic/e883ec39de5d45840c2744705c2918c7/4ffee8ca/naverdic/endic/sound/clear/us/007/007582.mp3'
</snippet></ROW><ROW><id>11454931</id><snippet>myDlg = MyDialog(*args)
myDlg.ShowModal()
</snippet></ROW><ROW><id>11454931</id><snippet>import wx

########################################################################
class MyDialog(wx.Dialog):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Dialog.__init__(self, None, title="Options")

        radio1 = wx.RadioButton( self, -1, " Radio1 ", style = wx.RB_GROUP )
        radio2 = wx.RadioButton( self, -1, " Radio2 " )
        radio3 = wx.RadioButton( self, -1, " Radio3 " )

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(radio1, 0, wx.ALL, 5)
        sizer.Add(radio2, 0, wx.ALL, 5)
        sizer.Add(radio3, 0, wx.ALL, 5)

        for i in range(3):
            chk = wx.CheckBox(self, label="Checkbox #%s" % (i+1))
            sizer.Add(chk, 0, wx.ALL, 5)
        self.SetSizer(sizer)


########################################################################
class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "wx.Menu Tutorial")

        # Add a panel so it looks the correct on all platforms
        self.panel = wx.Panel(self, wx.ID_ANY)

        menuBar = wx.MenuBar()
        fileMenu = wx.Menu()

        optionsItem = fileMenu.Append(wx.NewId(), "Options", 
                                      "Show an Options Dialog")
        self.Bind(wx.EVT_MENU, self.onOptions, optionsItem)

        exitMenuItem = fileMenu.Append(wx.NewId(), "Exit",
                                       "Exit the application")
        self.Bind(wx.EVT_MENU, self.onExit, exitMenuItem)

        menuBar.Append(fileMenu, "&amp;File")
        self.SetMenuBar(menuBar)

    #----------------------------------------------------------------------
    def onExit(self, event):
        """"""
        self.Close()

    #----------------------------------------------------------------------
    def onOptions(self, event):
        """"""
        dlg = MyDialog()
        dlg.ShowModal()
        dlg.Destroy()

#----------------------------------------------------------------------
# Run the program
if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = MyForm().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>11455297</id><snippet>None</snippet></ROW><ROW><id>11455297</id><snippet>unassigned_items = {k:v for k, v in mydict.viewitems() if v[0] is None}
</snippet></ROW><ROW><id>11455297</id><snippet>dict</snippet></ROW><ROW><id>11455297</id><snippet>dict</snippet></ROW><ROW><id>11455297</id><snippet>unassigned_items</snippet></ROW><ROW><id>11455297</id><snippet>'key'</snippet></ROW><ROW><id>11455297</id><snippet>unassigned_items</snippet></ROW><ROW><id>11455297</id><snippet>if key in unassigned_items:
    do_something()
</snippet></ROW><ROW><id>11455375</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from sklearn.preprocessing import Imputer
&gt;&gt;&gt; # missing_values is the value of your placeholder, strategy is if you'd like mean, median or mode, and axis=0 means it calculates the imputation based on the other feature values for that sample
&gt;&gt;&gt; imp = Imputer(missing_values='NaN', strategy='mean', axis=0)
&gt;&gt;&gt; imp.fit(train)
Imputer(axis=0, copy=True, missing_values='NaN', strategy='mean', verbose=0)
&gt;&gt;&gt; train_imp = imp.transform(train)
</snippet></ROW><ROW><id>11455440</id><snippet>import argparse

foo_default=None    

class BarAction(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        didfoo=getattr(namespace,'foo',foo_default)
        if(didfoo == foo_default):
            parser.error( "foo before bar!")
        else:
            setattr(namespace,self.dest,values)

parser=argparse.ArgumentParser()
parser.add_argument('--foo',default=foo_default)
parser.add_argument('--bar',action=BarAction,help="Only use this if --foo is set")

#testing.
print parser.parse_args('--foo baz'.split())
print parser.parse_args('--foo baz --bar cat'.split())
print parser.parse_args('--bar dog'.split())
</snippet></ROW><ROW><id>11455440</id><snippet>import argparse

parser=argparse.ArgumentParser()
first_action=parser.add_argument('--foo',dest='cat',default=None)

class BarAction(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        didfoo=getattr(namespace,first_action.dest,first_action.default)
        if(didfoo == first_action.default):
            parser.error( "foo before bar!")
        else:
            setattr(namespace,self.dest,values)

parser.add_argument('--bar',action=BarAction,
                    help="Only use this if --foo is set")

#testing.
print parser.parse_args('--foo baz'.split())
print parser.parse_args('--foo baz --bar cat'.split())
print parser.parse_args('--bar dog'.split())
</snippet></ROW><ROW><id>11455440</id><snippet>foo</snippet></ROW><ROW><id>11455440</id><snippet>add_argument</snippet></ROW><ROW><id>11455440</id><snippet>type=</snippet></ROW><ROW><id>11455440</id><snippet>--foo</snippet></ROW><ROW><id>11455440</id><snippet>sys.argv</snippet></ROW><ROW><id>11455440</id><snippet>import sys
if ("--parameter2" in sys.argv) and ("--parameter1" not in sys.argv):
    parser.error("parameter1 must be given if parameter2 is given")
</snippet></ROW><ROW><id>11455440</id><snippet>--parameter1</snippet></ROW><ROW><id>11455440</id><snippet>--p1</snippet></ROW><ROW><id>11455440</id><snippet>if (set(sys.argv).intersection(('--p2',...)) and 
    not set(sys.argv).intersection(('--p1',...)))
</snippet></ROW><ROW><id>11455440</id><snippet>--p2</snippet></ROW><ROW><id>11455440</id><snippet>--p1</snippet></ROW><ROW><id>11455440</id><snippet>option_strings</snippet></ROW><ROW><id>11455440</id><snippet>parser.add_argument(...)</snippet></ROW><ROW><id>11455440</id><snippet>import argparse
import sys   
parser=argparse.ArgumentParser()
action1=parser.add_argument('--foo')
action2=parser.add_argument('--bar',
                            help="Only use this if --foo is set")

argv=set(sys.argv)
if (( argv &amp; set(action2.option_strings) ) and 
      not ( argv &amp; set(action1.option_strings) )):
                #^ set intersection
     parser.error(' or '.join(action1.option_strings)+
                  ' must be given with '+
                  ' or '.join(action2.option_strings))
</snippet></ROW><ROW><id>11455891</id><snippet>numpy</snippet></ROW><ROW><id>11455891</id><snippet>itertools.izip</snippet></ROW><ROW><id>11455891</id><snippet>[i+j for i,j in izip(l1, l2)]</snippet></ROW><ROW><id>11455911</id><snippet>cdef object pylist_to_handles(hs):
    ...
    return &lt;object&gt;o_vect
</snippet></ROW><ROW><id>11455911</id><snippet>cdef vector[int] pylist_to_handles(hs):
</snippet></ROW><ROW><id>11456003</id><snippet>import glob, os
with open('axlspd.txt', "w") as axlspd:
    for f in f in glob.glob('P:\MyDep\Myunit\Mysection\Stuff\Reports\YR*\O*\*\*\*\*.pdf'):
        fpath, fname = os.path.split(f)
        rname, extname = os.path.splitext(fname)
        dirtup = (f, rname)
        axlspd.write(', '.join(dirtup)+'\n')
</snippet></ROW><ROW><id>11456167</id><snippet>i</snippet></ROW><ROW><id>11456167</id><snippet>import contextlib
import codecs

def readfile(path):
    with contextlib.closing( codecs.open( path, 'r', 'utf-8' )) as f:
        for line in f:
            yield line

path = '/path/to/norsk/verbs.txt'

for i in readfile(path):
    print i.encode('utf8')
</snippet></ROW><ROW><id>11456167</id><snippet>$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getfilesystemencoding()
'UTF-8'
</snippet></ROW><ROW><id>11456167</id><snippet>python -c 'import site; print site</snippet></ROW><ROW><id>11456167</id><snippet>def setencoding(): 
    """Set the string encoding used by the Unicode implementation.  The 
    default is 'ascii', but if you're willing to experiment, you can 
    change this.""" 
    encoding = "ascii" # Default value set by _PyUnicode_Init() 
</snippet></ROW><ROW><id>11456167</id><snippet>encoding = "ascii"</snippet></ROW><ROW><id>11456167</id><snippet>encoding = "UTF-8"</snippet></ROW><ROW><id>11456167</id><snippet>encoding = "undefined"</snippet></ROW><ROW><id>11456167</id><snippet>undefined</snippet></ROW><ROW><id>11456251</id><snippet>zip()</snippet></ROW><ROW><id>11456251</id><snippet>name = ['sam', 'john', 'napoleon', 'tanaka', 'ming']
country = ['USA', 'England', 'France', 'Japan', 'China']
age = [23, 41, 19, 16, 55]
for x,y,z in zip(name,country,age):
    print("{0}; {1}; {2}".format(x,y,z))
</snippet></ROW><ROW><id>11456251</id><snippet>map()</snippet></ROW><ROW><id>11456251</id><snippet>mapp=map(lambda x,y,z:"; ".join((x,y,str(z))),name,country,age)
for x in mapp:
    print(x)
</snippet></ROW><ROW><id>11456251</id><snippet>sam; USA; 23
john; England; 41
napoleon; France; 19
tanaka; Japan; 16
ming; China; 55
</snippet></ROW><ROW><id>11456316</id><snippet>except TimeoutException, e:
print e
pass
</snippet></ROW><ROW><id>11456401</id><snippet>ctypes</snippet></ROW><ROW><id>11456401</id><snippet>import ctypes
ctypes.cdll.msvcrt._write(1, 0, 0)
</snippet></ROW><ROW><id>11457042</id><snippet>data.frame</snippet></ROW><ROW><id>11457042</id><snippet>csv</snippet></ROW><ROW><id>11457042</id><snippet>data.frame</snippet></ROW><ROW><id>11457042</id><snippet>DataFrame</snippet></ROW><ROW><id>11457042</id><snippet>data.frame</snippet></ROW><ROW><id>11457218</id><snippet>$ curl -O http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz
$ tar -xf Python-2.7.3.tgz 
$ cd Python-2.7.3
$ cd Tools/i18n/
$ ls
makelocalealias.py  msgfmt.py*          pygettext.py*
</snippet></ROW><ROW><id>11457218</id><snippet>Tools</snippet></ROW><ROW><id>11457218</id><snippet>/Library/Frameworks/Python.framework/Versions/3.2/share/doc/python3.2/examples/Tools
</snippet></ROW><ROW><id>11457254</id><snippet>running_else_if_statement : RULE_OPEN IF CONDITION RULE_CLOSE statements else_if_blocks
    RULE_OPEN ELSE RULE_CLOSE statements RULE_OPEN END RULE_CLOSE
                          ;

else_if_blocks : else_if_block
               | else_if_blocks else_if_block
               ;

else_if_block : RULE_OPEN ELSE_IF CONDITION RULE_CLOSE statements 
              ;
</snippet></ROW><ROW><id>11457254</id><snippet>statement : code
          | data_out
          | rule
          ;
</snippet></ROW><ROW><id>11457254</id><snippet>statements : statement
           ;

statements : statements statement
           ;
</snippet></ROW><ROW><id>11457254</id><snippet>statements : statement
           | statements statement
           ;
</snippet></ROW><ROW><id>11457255</id><snippet>def do_something(fname):
    with open(fname,'rb') as f:
        root = etree.parse(f)
        for lcn in root.xpath("/protein/match[@dbname='PFAM']/lcn"):#find dbname =PFAM
            # Make slightly more robust
            try:
                start = int(lcn.get("start"))#if it is PFAM then look for start value
                end = int(lcn.get("end"))#if it is PFAM then also look for end value
                yield start, end
            except (TypeError , ValueError) as e:
                pass # start/end aren't usable as numbers decide what to do here...

for start, end in do_something():
    do_something_else(start, end)
</snippet></ROW><ROW><id>11457481</id><snippet>pieces = []
item = self.tree.GetSelection()

while self.tree.GetItemParent(item):
  piece = self.tree.GetItemText(item)
  pieces.insert(0, piece)
  item = self.tree.GetItemParent(item)
</snippet></ROW><ROW><id>11457565</id><snippet>opentab[0]</snippet></ROW><ROW><id>11457565</id><snippet>HeuristicSort</snippet></ROW><ROW><id>11457565</id><snippet>HeuristicSort</snippet></ROW><ROW><id>11457592</id><snippet>with open(appdata + r'\Dropbox\bin\Dropbox.exe') as f: pa
</snippet></ROW><ROW><id>11457798</id><snippet>findall</snippet></ROW><ROW><id>11457798</id><snippet>search</snippet></ROW><ROW><id>11457798</id><snippet>re.findall( r'(\w+)=([^;]+)', string, re.I)
</snippet></ROW><ROW><id>11457798</id><snippet>[re.split('=',s) for s in re.split(';',string)]
</snippet></ROW><ROW><id>11457872</id><snippet>Node.getDistnace(newNode, strings, parentD, None, None)

Node.getDistnace(node, None, None, nodeName, nodeDistance)
</snippet></ROW><ROW><id>11457872</id><snippet>arg1, arg2, arg3 = newNode, strings, parentD
Node.getDistnace(arg1, arg2, arg3, None, None)
</snippet></ROW><ROW><id>11457872</id><snippet>Node.getDistnace(node, nodeDistance=nodeDistance, strings=None, parentD=None, nodeName=nodeName)
</snippet></ROW><ROW><id>11457872</id><snippet>nodeDistance</snippet></ROW><ROW><id>11457872</id><snippet>getDistnace</snippet></ROW><ROW><id>11457915</id><snippet>if '.0.html' in name:
</snippet></ROW><ROW><id>11457915</id><snippet>if name.endswith('.0.html'):
</snippet></ROW><ROW><id>11457915</id><snippet>False</snippet></ROW><ROW><id>11457915</id><snippet>index</snippet></ROW><ROW><id>11457981</id><snippet>sum()</snippet></ROW><ROW><id>11457981</id><snippet>list</snippet></ROW><ROW><id>11457981</id><snippet>tuple</snippet></ROW><ROW><id>11457981</id><snippet>&gt;&gt;&gt; b = [[1,2], [3,4], [5,6], 1]
&gt;&gt;&gt; sum(sum(x) if isinstance(x,(list,tuple)) else x for x in b)
22
</snippet></ROW><ROW><id>11457981</id><snippet>total=0
b = [[1,2], [3,4], [5,6], 1]
for i in range(len(b)) :
    if isinstance(b[i],(list,tuple)):
        for j in range(len(b[i])):
            total += b[i][j]
    else:
        total +=b[i]
print total  #prints 22
</snippet></ROW><ROW><id>11457989</id><snippet>.py</snippet></ROW><ROW><id>11457989</id><snippet>~/coding$ cat test.sage 
f(x, y) = 3*x+y
print f(3,4)

~/coding$ sage test.sage 
13
~/coding$ cp test.sage test.py
~/coding$ sage test.py
  File "test.py", line 1
    f(x, y) = 3*x+y
SyntaxError: can't assign to function call
~/coding$ python test.py
  File "test.py", line 1
    f(x, y) = 3*x+y
SyntaxError: can't assign to function call
</snippet></ROW><ROW><id>11458133</id><snippet>universal_newlines=True</snippet></ROW><ROW><id>11458133</id><snippet>Popen</snippet></ROW><ROW><id>11458138</id><snippet>socket.error: [Errno 10061]</snippet></ROW><ROW><id>11458138</id><snippet>from twisted.internet.protocol import Factory
from twisted.protocols.basic import LineReceiver
from twisted.internet import reactor

class Chat(LineReceiver):

    def __init__(self, users):
        self.users = users
        self.name = None
        self.state = "GETNAME"

    def connectionMade(self):
        self.sendLine("What's your name?")

    def connectionLost(self, reason):
        if self.users.has_key(self.name):
            del self.users[self.name]

    def lineReceived(self, line):
        if self.state == "GETNAME":
            self.handle_GETNAME(line)
        else:
            self.handle_CHAT(line)

    def handle_GETNAME(self, name):
        if self.users.has_key(name):
            self.sendLine("Name taken, please choose another.")
            return
        self.sendLine("Welcome, %s!" % (name,))
        self.name = name
        self.users[name] = self
        self.state = "CHAT"

    def handle_CHAT(self, message):
        message = "&lt;%s&gt; %s" % (self.name, message)
        for name, protocol in self.users.iteritems():
            if ':' in message:
                self.exc(message.split(':')[0])
            if protocol != self:
                protocol.sendLine(message)

    def exc(self, cmd):
        print cmd
        if cmd == 'who':
            for i in self.users:
                print i


class ChatFactory(Factory):

    def __init__(self):
        self.users = {} # maps user names to Chat instances

    def buildProtocol(self, addr):
        return Chat(self.users)


reactor.listenTCP(8123, ChatFactory())
reactor.run()
</snippet></ROW><ROW><id>11458274</id><snippet>t = ('275', '54000', '0.0', '5000.0', '0.0')
lst = list(t)
lst[0] = '300'
t = tuple(lst)
</snippet></ROW><ROW><id>11458274</id><snippet>list</snippet></ROW><ROW><id>11458321</id><snippet>unicode</snippet></ROW><ROW><id>11458321</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>11458321</id><snippet>&gt;&gt;&gt; u'\xe4'.encode('utf-8')
'\xc3\xa4'
</snippet></ROW><ROW><id>11458357</id><snippet>set_handle_gzip(True)</snippet></ROW><ROW><id>11458695</id><snippet>sorted()</snippet></ROW><ROW><id>11458695</id><snippet>str.join()</snippet></ROW><ROW><id>11458695</id><snippet>&gt;&gt;&gt; x = 'yellow'
&gt;&gt;&gt; ''.join(sorted(x))
'ellowy'
</snippet></ROW><ROW><id>11458729</id><snippet>def findLastMatch(lines, startNum, elements):
    for i in range(startNum-1, -1, -1): # iterate backwards from startNum-1
        values = lines[i].split(); # split up the line into columns
        if values[2] in elements:  # does column 3 matches one of the elements?
            return values[-3:]     # if so, return the last three columns
    return None # if we got here, there was no match
</snippet></ROW><ROW><id>11458729</id><snippet>continue</snippet></ROW><ROW><id>11458729</id><snippet>elements = [str(e) for e in elements]</snippet></ROW><ROW><id>11458765</id><snippet>usecols= 'None' 
</snippet></ROW><ROW><id>11458765</id><snippet>usecols= None
</snippet></ROW><ROW><id>11458765</id><snippet>usecols</snippet></ROW><ROW><id>11458784</id><snippet>populate</snippet></ROW><ROW><id>11458784</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
from PyQt4 import QtCore, QtGui


class MainWindow(QtGui.QWidget):

    def __init__(self, parent=None):

        self.fileheader_fields=(
            "filetype","fileversion","numframes",
            "framerate","resolution","numbeams",
            "samplerate","samplesperchannel","receivergain",
            "windowstart","winlengthsindex","reverse",
            "serialnumber","date","idstring","ID1","ID2",
            "ID3","ID4","framestart","frameend","timelapse",
            "recordInterval","radioseconds","frameinterval","userassigned"
        )
        # just for test
        self.fileheader = {field: 'value of ' + field 
                           for field in self.fileheader_fields}
        super(MainWindow, self).__init__(parent)
        self.table_widget = QtGui.QTableWidget()
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.table_widget)
        self.setLayout(layout)
        self.populate()

    def populate(self):
        self.table_widget.setRowCount(len(self.fileheader_fields))
        self.table_widget.setColumnCount(2)
        self.table_widget.setHorizontalHeaderLabels(['name', 'value'])
        for i, field in enumerate(self.fileheader_fields):
            name = QtGui.QTableWidgetItem(field)
            value = QtGui.QTableWidgetItem(self.fileheader[field])
            self.table_widget.setItem(i, 0, name)
            self.table_widget.setItem(i, 1, value)


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    wnd = MainWindow()
    wnd.resize(640, 480)
    wnd.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>11458784</id><snippet>from fileheader import FileHeader, Frame
from echogram import QEchogram
from PyQt4.QtGui import *
from PyQt4.QtCore import *
import os, sys


class MainWindow(QWidget):

    def __init__(self, filename, parent=None):
        super(MainWindow, self).__init__(parent)
        # here we are loading file
        # now self.fileheader contains attributes
        self.fileheader = FileHeader(filename)
        self.fileheader_table = QTableWidget()
        layout = QVBoxLayout()
        layout.addWidget(self.fileheader_table)
        self.setLayout(layout)
        self.populate()

    def populate(self):
        self.fileheader_table.setRowCount(len(self.fileheader.fileheader_fields))
        self.fileheader_table.sestColumnCount(2)
        self.fileheader_table.setHorizontalHeaderLabels(['name','value'])
        for i,field in enumerate(self.fileheader.fileheader_fields):
            name=QTableWidgetItem(field)
            value=QTableWidgetItem(getattr(self.fileheader, field))
            self.fileheader_table.setItem(i,0,name)
            self.fileheader_table.setItem(i,1,value)

    if __name__=="__main__":
        app=QApplication(sys.argv)
        filename=str(QFileDialog.getOpenFileName(None,"open  file","C:/vprice/DIDSON/DIDSON  Data","*.ddf"))
        wnd=MainWindow(filename)
        wnd.resize(640,480)
        wnd.show()
        #echoGram=QEchogram()
        #echoGram.initFromFile(filename)
        #fileName="test.png"
        #echoGram.processEchogram()
        #dataH=echoGram.data
        #print "Horizontal data", dataH
</snippet></ROW><ROW><id>11458847</id><snippet>[]</snippet></ROW><ROW><id>11458847</id><snippet>list</snippet></ROW><ROW><id>11458847</id><snippet>array</snippet></ROW><ROW><id>11458847</id><snippet>list</snippet></ROW><ROW><id>11458847</id><snippet>numpy</snippet></ROW><ROW><id>11458847</id><snippet>list</snippet></ROW><ROW><id>11458847</id><snippet>&gt;&gt;&gt; x = range(0, 4)
&gt;&gt;&gt; y = range(4, 8)
&gt;&gt;&gt; ov = range(8, 12)
&gt;&gt;&gt; aa = range(12, 16)
&gt;&gt;&gt; numpy.array([x, y, ov, aa])
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
</snippet></ROW><ROW><id>11458847</id><snippet>&gt;&gt;&gt; numpy.array(zip(x, y, ov, aa))
array([[ 0,  4,  8, 12],
       [ 1,  5,  9, 13],
       [ 2,  6, 10, 14],
       [ 3,  7, 11, 15]])
</snippet></ROW><ROW><id>11458847</id><snippet>array</snippet></ROW><ROW><id>11458847</id><snippet>genfromtxt</snippet></ROW><ROW><id>11458847</id><snippet>&gt;&gt;&gt; a = numpy.array(zip(x, y, ov, aa))
&gt;&gt;&gt; a[a == 1]
array([ 1,  5,  9, 13,  3,  7, 11, 15])
</snippet></ROW><ROW><id>11458847</id><snippet>x</snippet></ROW><ROW><id>11458847</id><snippet>y</snippet></ROW><ROW><id>11458847</id><snippet>ov</snippet></ROW><ROW><id>11458847</id><snippet>aa</snippet></ROW><ROW><id>11458998</id><snippet>/tbody</snippet></ROW><ROW><id>11458998</id><snippet>&lt;tbody&gt;</snippet></ROW><ROW><id>11458998</id><snippet>#productReviews</snippet></ROW><ROW><id>11458998</id><snippet>import urllib2
html = urllib2.urlopen("http://www.amazon.co.uk/product-reviews/B00143ZBHY").read()
from lxml import etree
tree = etree.HTML(html)
r = tree.xpath(".//*[@id='productReviews']/tr/td[1]/div[9]/text()[4]")
print r[0]
</snippet></ROW><ROW><id>11458998</id><snippet>bought this as replacement for the original cover which came with my greenhouse and which ripped in the wind.  so far this seems a good replacement although for some reason it seems slightly too small for my greenhouse so that i cant zip both sides of the front at the same time.  seems sturdier and thicker than the cover i had before so hoping it lasts a bit longer!
</snippet></ROW><ROW><id>11459001</id><snippet>import Tkinter as tkinter

def on_frame_click(e):
    print("frame clicked")

def retag(tag, *args):
    '''Add the given tag as the first bindtag for every widget passed in'''
    for widget in args:
        widget.bindtags((tag,) + widget.bindtags())

tk = tkinter.Tk()
a_frame = tkinter.Frame(tk, bg="red", padx=20, pady=20)
a_label = tkinter.Label(a_frame, text="A Label")
a_button = tkinter.Button(a_frame, text="click me!")
a_frame.pack()
a_label.pack()
a_button.pack()
tk.protocol("WM_DELETE_WINDOW", tk.destroy)
retag("special", a_frame, a_label, a_button)
tk.bind_class("special", "&lt;Button&gt;", on_frame_click)
tk.mainloop()
</snippet></ROW><ROW><id>11459091</id><snippet>repr(args)</snippet></ROW><ROW><id>11459162</id><snippet>try</snippet></ROW><ROW><id>11459162</id><snippet>class MyIntegerTenClass:
    def __int__(self):
        return 10
    def __str__(self):
        return 'ten'
    def __format__(self, format_spec):
        try:
            s = format(str(self), format_spec)
        except ValueError:
            s = format(int(self), format_spec)
        return s
</snippet></ROW><ROW><id>11459162</id><snippet>MyIntegerTenClass</snippet></ROW><ROW><id>11459162</id><snippet>format</snippet></ROW><ROW><id>11459162</id><snippet>&gt;&gt;&gt; print '{0}, {0:s}, {0:d}, {0:02X}, {0:f}'.format(ten)
ten, ten, 10, 0A, 10.000000
</snippet></ROW><ROW><id>11459162</id><snippet>10</snippet></ROW><ROW><id>11459162</id><snippet>ten</snippet></ROW><ROW><id>11459162</id><snippet>    def __format__(self, format_spec):
        try:
            s = format(int(self), format_spec)
        except ValueError:
            s = format(str(self), format_spec)
        return s
</snippet></ROW><ROW><id>11459162</id><snippet>&gt;&gt;&gt; print '{0}, {0:s}, {0:d}, {0:02X}, {0:f}'.format(ten)
10, ten, 10, 0A, 10.000000
</snippet></ROW><ROW><id>11459162</id><snippet>__format__</snippet></ROW><ROW><id>11459162</id><snippet>Formatter</snippet></ROW><ROW><id>11459231</id><snippet>phrase = "hello, world"

while (input("Guess the phrase: ") != phrase):
    print("Incorrect.") //Evaluate the input here
print("Correct") // If the user is successful
</snippet></ROW><ROW><id>11459231</id><snippet>Guess the phrase: a guess
Incorrect.
Guess the phrase: another guess
Incorrect.
Guess the phrase: hello, world
Correct
</snippet></ROW><ROW><id>11459231</id><snippet>def game(phrase_to_guess):
    return input("Guess the phrase: ") == phrase_to_guess

def main():
    phrase = "hello, world"
    while (not(game(phrase))):
        print("Incorrect.")
    print("Correct")

main()
</snippet></ROW><ROW><id>11459412</id><snippet>os.walk</snippet></ROW><ROW><id>11459412</id><snippet>def find_files(root,filename):
    for directory,subdirs,files in os.walk(root):
        if filename in files:
            yield os.join(root,directory,filename)
</snippet></ROW><ROW><id>11459412</id><snippet>def find_files(root,d):
    for directory,subdirs,files in os.walk(root):
        if d in subdirs:
            yield os.join(root,directory,d)
</snippet></ROW><ROW><id>11459459</id><snippet>from flask import Flask, url_for, render_template, redirect
from flask import request # &lt;-- add this

# ... snip setup code ...

# We need to specify the methods that we accept
@app.route("/test-post", methods=["GET","POST"])
def test_post():
    # method tells us if the user submitted the form
    if request.method == "POST":
        name = request.form.name
        email = request.form.email
    return render_template("form_page.html", name=name, email=email)
</snippet></ROW><ROW><id>11459459</id><snippet>GET</snippet></ROW><ROW><id>11459459</id><snippet>POST</snippet></ROW><ROW><id>11459459</id><snippet>request.args</snippet></ROW><ROW><id>11459459</id><snippet>request.form</snippet></ROW><ROW><id>11459459</id><snippet>flask.Request</snippet></ROW><ROW><id>11459520</id><snippet>import multiprocessing
import server

p = multiprocessing.Process(target=server.imageScale, args=(source,destination,scale))
p.start()
p.join()
</snippet></ROW><ROW><id>11459600</id><snippet>with open('newfile.txt','w') as fileinput:
    for start, end in searchPFAM(fname):
        print start, end  
        if start &lt;= end:
            while start &lt;= end:
                result = makeList[start]
                fileinput.write(result)
                start += 1
</snippet></ROW><ROW><id>11459681</id><snippet>str.encode</snippet></ROW><ROW><id>11459681</id><snippet># Save the string as UTF-16 little-endian
f = open('test.txt', 'w')
f.write(u'abcそ'.encode('utf-16le')  # Output will be 8 bytes
f.close()
</snippet></ROW><ROW><id>11460069</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>11460069</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>11460069</id><snippet>pip install chardet (or easy_install chardet)
</snippet></ROW><ROW><id>11460119</id><snippet>In [1]: import numpy as np
In [2]: import numexpr as ne
In [3]: a = np.arange(1000000)
In [4]: timeit ne.evaluate('sin(a)')
100 loops, best of 3: 15.6 ms per loop    
In [5]: timeit np.sin(a)
10 loops, best of 3: 54 ms per loop
</snippet></ROW><ROW><id>11460136</id><snippet>from google.appengine.ext import db
q = db.GqlQuery("SELECT * FROM Song WHERE composer = 'Lennon, John'")
</snippet></ROW><ROW><id>11460249</id><snippet>pack(fill=X</snippet></ROW><ROW><id>11460249</id><snippet>pack_propagate(False)</snippet></ROW><ROW><id>11460249</id><snippet>OuterFrame = Frame(root, height=500, width=400)
InnerFrame = Frame(OuterFrame, borderwidth=3, relief=RAISED)
InnerFrame.pack(side=TOP, fill=X)

# stuff that goes in the y-resizing InnerFrame

OuterFrame.pack_propogate(False)
OuterFrame.pack()
</snippet></ROW><ROW><id>11460257</id><snippet>BeautifulSoup(data, "lxml")
</snippet></ROW><ROW><id>11460458</id><snippet>str</snippet></ROW><ROW><id>11460458</id><snippet>&gt;&gt;&gt; str = some_variable_or_string #this is wrong
&gt;&gt;&gt; str(123.0) #Or this will happen
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>11460458</id><snippet>str_</snippet></ROW><ROW><id>11460458</id><snippet>__str__</snippet></ROW><ROW><id>11460458</id><snippet>str</snippet></ROW><ROW><id>11460458</id><snippet>__str__</snippet></ROW><ROW><id>11460458</id><snippet>__str__</snippet></ROW><ROW><id>11460458</id><snippet>__repr__</snippet></ROW><ROW><id>11460458</id><snippet>__repr__</snippet></ROW><ROW><id>11460458</id><snippet>&lt;module&gt;.&lt;classname&gt; instance at &lt;address&gt;</snippet></ROW><ROW><id>11460458</id><snippet>&lt;module&gt;</snippet></ROW><ROW><id>11460458</id><snippet>self.__class__.__module__</snippet></ROW><ROW><id>11460458</id><snippet>&lt;classname&gt;</snippet></ROW><ROW><id>11460458</id><snippet>self.__class__.__name__</snippet></ROW><ROW><id>11460458</id><snippet>&lt;address&gt;</snippet></ROW><ROW><id>11460458</id><snippet>id(self)</snippet></ROW><ROW><id>11460458</id><snippet>__str__</snippet></ROW><ROW><id>11460458</id><snippet>__unicode__</snippet></ROW><ROW><id>11460458</id><snippet>__bytes__</snippet></ROW><ROW><id>11460458</id><snippet>__str__</snippet></ROW><ROW><id>11460458</id><snippet>__str__</snippet></ROW><ROW><id>11460458</id><snippet>class foo:
    ...
    def __str__(self):
        return unicode(self).encode('utf-8')
</snippet></ROW><ROW><id>11460571</id><snippet>var myNewList = {{!myList}};
</snippet></ROW><ROW><id>11460633</id><snippet>urllib2</snippet></ROW><ROW><id>11460633</id><snippet>JS</snippet></ROW><ROW><id>11460633</id><snippet>GETS</snippet></ROW><ROW><id>11460633</id><snippet>urllib2</snippet></ROW><ROW><id>11460633</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

bostonPage = urllib2.urlopen("http://www.tripadvisor.com/HACSearch?geo=34438#02,1342106684473,rad:S0,sponsors:ABEST_WESTERN,style:Szff_6")
soup = BeautifulSoup(bostonPage)
open('test.html', 'w').write(soup.read())
</snippet></ROW><ROW><id>11460633</id><snippet>test.html</snippet></ROW><ROW><id>11460633</id><snippet>selenium</snippet></ROW><ROW><id>11460633</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; 
&gt;&gt;&gt; bostonPage = urllib2.urlopen("http://www.tripadvisor.com/HACSearch?geo=34438#02,1342106684473,rad:S0,sponsors:ABEST_WESTERN,style:Szff_6")
&gt;&gt;&gt; value = bostonPage.read()
&gt;&gt;&gt; soup = BeautifulSoup(value)
&gt;&gt;&gt; open('test.html', 'w').write(value)
</snippet></ROW><ROW><id>11460682</id><snippet>coverage</snippet></ROW><ROW><id>11460691</id><snippet>import collections
w = collections.deque([1, 2, 3, 4, 5])
print "Deque state is ", w
print "First item in deque is", w[0]
w.rotate(1)
print "Deque state after rotation is ", w
print "First item in deque is", w[0]
</snippet></ROW><ROW><id>11460691</id><snippet>Deque state is  deque([1, 2, 3, 4, 5])
First item in deque is 1 Deque
state after rotation is  deque([5, 1, 2, 3, 4])
First item in deque is 5
</snippet></ROW><ROW><id>11460691</id><snippet>w = [1, 2, 3, 4, 5]
print "List state is ", w
print "First item in list is", w[0]
x = 1 # x is rotation
w0 = w[:-x]
w = w[-x:]
w.extend(w0)
print "List state after rotation is ", w
print "First item in list is", w[0]
</snippet></ROW><ROW><id>11460866</id><snippet>Result = FrMtx * elem
</snippet></ROW><ROW><id>11460876</id><snippet># -*- coding: utf-8 -*-
"""descriptive statistic with case weights

Author: Josef Perktold
"""

import numpy as np
from statsmodels.stats.weightstats import DescrStatsW


np.random.seed(987467)
x = np.random.multivariate_normal([0, 1.], [[1., 0.5], [0.5, 1]], size=20)
weights = np.random.randint(1, 4, size=20)

xlong = np.repeat(x, weights, axis=0)

ds = DescrStatsW(x, weights=weights)

print 'cov bug'
print ds.cov  #BUG

self = ds  #alias to use copied expression
ds_cov = np.dot(self.weights * self.demeaned.T, self.demeaned) / self.sum_weights

print '\nddof=0'
print ds_cov
print np.cov(xlong.T, bias=1)

ds_cov0 = np.dot(self.weights * self.demeaned.T, self.demeaned) / \
              (self.sum_weights - 1)
print '\nddof=1'
print ds_cov0
print np.cov(xlong.T, bias=0)
</snippet></ROW><ROW><id>11460876</id><snippet>cov bug
[[ 0.21577595  0.03563907]
 [ 0.03563907  0.35826816]]

ddof=0
[[ 0.43671986  0.06551506]
 [ 0.06551506  0.66281218]]
[[ 0.43671986  0.06551506]
 [ 0.06551506  0.66281218]]

ddof=1
[[ 0.44821249  0.06723914]
 [ 0.06723914  0.68025461]]
[[ 0.44821249  0.06723914]
 [ 0.06723914  0.68025461]]
</snippet></ROW><ROW><id>11460885</id><snippet>for i, (start, end) in enumerate(searchPFAM(fname)):
    print start, end  
    if start &lt;= end:
        with open('newfile-%s.txt' % i,'w') as fileinput:
            text=''.join(makeList[(start-1):(end-1)])
            fileinput.write(text)
</snippet></ROW><ROW><id>11461048</id><snippet>@staticmethod</snippet></ROW><ROW><id>11461048</id><snippet>class Id_Class(object):    
    new_id   = itertools.count(1000).next
    order_id = itertools.count(1000).next
    person_id= itertools.count(1000).next

    @staticmethod
    def new_id(t):   # t = type of id required
        if t == "Order":
            return Id_Class.order_id()
        elif t == "Person":
            return Id_Class.person_id()
</snippet></ROW><ROW><id>11461064</id><snippet>__builtins__.next</snippet></ROW><ROW><id>11461064</id><snippet>next</snippet></ROW><ROW><id>11461064</id><snippet>for prev, curr, next in neighborhood(list):
    if (prev == desired_value):
        print(prev+" "+next)
        desired_value = __builtins__.next(value_iterator)
</snippet></ROW><ROW><id>11461105</id><snippet>class SchoolResource(ModelResource):
    # fields.ToManyField('APP.api.RelatedResource', 'related name')
    policies = fields.ToManyField('places.api.PolicyResource', 
        attribute=lambda bundle: Policy.objects.filter(school=bundle.obj)[:10]
    )

    class Meta:
        resource_name = 'school'
        queryset = School.objects.all()
        allowed_methods = ['get']
        authorization = DjangoAuthorization()
        authentication = BasicAuthentication()
</snippet></ROW><ROW><id>11461303</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse("people.xml")
top = tree.getroot()

for target in top:
     for x in target:
         if x.tag == 'name': print x.text
</snippet></ROW><ROW><id>11461303</id><snippet>print top[0][0].text
</snippet></ROW><ROW><id>11461303</id><snippet>[target.find('name').text for target in top]
</snippet></ROW><ROW><id>11461549</id><snippet>&gt;&gt;&gt; record = 'raymond   \x32\x12\x08\x01\x08'
&gt;&gt;&gt; name, serialnum, school, gradelevel = unpack('&lt;10sHHb', record)

&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Student = namedtuple('Student', 'name serialnum school gradelevel')
&gt;&gt;&gt; Student._make(unpack('&lt;10sHHb', record))
Student(name='raymond   ', serialnum=4658, school=264, gradelevel=8)
</snippet></ROW><ROW><id>11461549</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; data = "1"*23
&gt;&gt;&gt; fmt = "20c3B"
&gt;&gt;&gt; Rec = namedtuple('Rec', 'text index') 
&gt;&gt;&gt; r = Rec._make([struct.unpack_from(fmt, data)[0:20], struct.unpack_from(fmt, data)[20:]])
&gt;&gt;&gt; r
Rec(text=('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), index=(49, 49, 49))
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11461549</id><snippet>fmt = "20si"</snippet></ROW><ROW><id>11461549</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; data = "1"*24
&gt;&gt;&gt; fmt = "20si"
&gt;&gt;&gt; Rec = namedtuple('Rec', 'text index') 
&gt;&gt;&gt; r = Rec._make(struct.unpack_from(fmt, data))
&gt;&gt;&gt; r
Rec(text='11111111111111111111', index=825307441)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11461574</id><snippet>issubclass</snippet></ROW><ROW><id>11461574</id><snippet>issubclass</snippet></ROW><ROW><id>11461574</id><snippet>class A:
    isA = True

class B(A):
    pass

class C:
    pass

def isA(aclass):
    try:
        return aclass.isA
    except AttributeError:
        return False

print isA(A)
True
print isA(B)
True
print isA(C)
False
</snippet></ROW><ROW><id>11461644</id><snippet>import numpy as np
ts.groupby([by('year'), by('month'), by('day')]).apply(lambda x: np.mean(x))
</snippet></ROW><ROW><id>11461858</id><snippet>lookup['Q9ULI0']</snippet></ROW><ROW><id>11461858</id><snippet>for</snippet></ROW><ROW><id>11461858</id><snippet>print len(lookup['Q9ULI0'])
for item in lookup['Q9ULI0']:
    print item
</snippet></ROW><ROW><id>11461978</id><snippet>sections=config_instance.sections()
ids=[config_instance.get(sec,'id') for sec in sections]
</snippet></ROW><ROW><id>11461978</id><snippet>id1,id2,... = ids
</snippet></ROW><ROW><id>11461978</id><snippet>ids={ sec:config_instance.get(sec,'id') for sec in sections }
print ids['sec1']
</snippet></ROW><ROW><id>11462060</id><snippet>exec()</snippet></ROW><ROW><id>11462060</id><snippet>$output</snippet></ROW><ROW><id>11462060</id><snippet>exec()</snippet></ROW><ROW><id>11462060</id><snippet>$output</snippet></ROW><ROW><id>11462060</id><snippet>from getData import getData
status, description, data = getData()

# Print the values
print("STATUS:", status)
print("DESCRIPTION:", description)
print("DATA:", data)
</snippet></ROW><ROW><id>11462060</id><snippet>exec("python test.py", $output);
var_dump($output);
</snippet></ROW><ROW><id>11462060</id><snippet>print</snippet></ROW><ROW><id>11462060</id><snippet>explode()</snippet></ROW><ROW><id>11462098</id><snippet>pip install --no-install --verbose</snippet></ROW><ROW><id>11462335</id><snippet>import random  

#----------------------------------------------#
def main():  
    my_array = create_list_and_find_max_and_min(10)  
    print the_smart_way(my_array)
#----------------------------------------------#
def create_list_and_find_max_and_min(n):
    my_array = []
    n = input("How many numbers do you want in your array?:")
    for i in range(n):
        my_array.append(random.randint(1,n))
    print "My array is:", my_array
    #----------------------------------------------#
    min = my_array[0]
    for number in my_array:
        if min &gt; number:
            min = number
    print "The minimum value in the array is:", min
    #----------------------------------------------#
    max = my_array[0]
    for number in my_array:
        if max &lt; number:
            max = number
    print "The maximum value in the array is:", max
    return my_array
#----------------------------------------------#
def the_smart_way(my_array):
    # "This one uses the built-in Python functions for min/max..."
    min_my_array = min(my_array)
    max_my_array = max(my_array)
    return min_my_array, max_my_array
#----------------------------------------------#
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11462335</id><snippet>import random  

#----------------------------------------------#
class MyArrayClass(object):
    def create_list_and_find_max_and_min(self, n):
        self.my_array = []
        n = input("How many numbers do you want in your array?:")
        for i in range(n):
            self.my_array.append(random.randint(1,n))
        print "My array is:", self.my_array
        #----------------------------------------------#
        min = self.my_array[0]
        for number in self.my_array:
            if min &gt; number:
                min = number
        print "The minimum value in the array is:", min
        #----------------------------------------------#
        max = self.my_array[0]
        for number in self.my_array:
            if max &lt; number:
                max = number
        print "The maximum value in the array is:", max
    #----------------------------------------------#
    def the_smart_way(self):
        # "This one uses the built-in Python functions for min/max..."
        min_my_array = min(self.my_array)
        max_my_array = max(self.my_array)
        return min_my_array, max_my_array
#----------------------------------------------#
def main():
    my_array = MyArrayClass()
    my_array.create_list_and_find_max_and_min(10)  
    print my_array.the_smart_way()
#----------------------------------------------#
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11462335</id><snippet>create_list_and_fix_max_and_min(10)
create_list_and_fix_max_and_min(20)
# No way to operate on the original array!
</snippet></ROW><ROW><id>11462335</id><snippet>my_array_1 = create_list_and_fix_max_and_min(10)
my_array_2 = create_list_and_fix_max_and_min(20)
the_smart_way(my_array_1)
</snippet></ROW><ROW><id>11462336</id><snippet>;</snippet></ROW><ROW><id>11462336</id><snippet>;</snippet></ROW><ROW><id>11462336</id><snippet>=</snippet></ROW><ROW><id>11462336</id><snippet>=</snippet></ROW><ROW><id>11462336</id><snippet>&gt;&gt;&gt; my_string = "Value1=Product Registered;Value2=Linux;Value3=C:5;C++:5;Value4=43;"
&gt;&gt;&gt; r = re.compile(r'([^;]+)=([^=]+);(?=[^;=]*(?:=|$))')
&gt;&gt;&gt; r.findall(my_string)
[('Value1', 'Product Registered'),
 ('Value2', 'Linux'),
 ('Value3', 'C:5;C++:5'),
 ('Value4', '43')]
</snippet></ROW><ROW><id>11462386</id><snippet>VM</snippet></ROW><ROW><id>11462386</id><snippet>__init__</snippet></ROW><ROW><id>11462386</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>11462386</id><snippet>__init__()</snippet></ROW><ROW><id>11462386</id><snippet>getVMs()</snippet></ROW><ROW><id>11462386</id><snippet>VM</snippet></ROW><ROW><id>11462386</id><snippet>list()</snippet></ROW><ROW><id>11462386</id><snippet>class VM(object):
    def __init__(self, name, os):
        self.name = name
        self.os   = os

def getVMs(user, password, URL):
    passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
    passman.add_password(None, url, user, password)
    auth_NTLM = HTTPNtlmAuthHandler.HTTPNtlmAuthHandler(passman)
    urllib2.install_opener(urllib2.build_opener(auth_NTLM))
    dom = parseString(urllib2.urlopen(url).read())
    for vmnode in dom.getElementsByTagName('d:VM')   # the tag representing a VM
        name = vmnode.getElementsByTagName('d:Name')[0]  # get name of current VM
        name = name.replace('&lt;d:Name&gt;', '').replace('&lt;/d:Name&gt;', '')
        os = vmnode.getElementsByTagName('d:OperatingSystem')[0]   # same for OS
        os = os.replace('&lt;d:OperatingSystem&gt;', '').replace('&lt;/d:OperatingSystem&gt;', ''))
        yield VM(name, os)
</snippet></ROW><ROW><id>11462386</id><snippet>user = r"contoso\administrator"
pass = "apassword"
url  = ("http://scspf:8090/SC2012/VMM/Microsoft.Management.Odata.svc"
        "/VirtualMachines?$filter=VMMServer%20eq%20'scvmm'")

vmlist = list(getVMs(user, pass, url))
</snippet></ROW><ROW><id>11462386</id><snippet>VM</snippet></ROW><ROW><id>11462386</id><snippet>for vm in getVMs(user, pass, url):
    print vm.name, vm.os
</snippet></ROW><ROW><id>11462386</id><snippet>vmdict = {vm.name: vm for vm in getVMs(user, pass, url)}
</snippet></ROW><ROW><id>11462417</id><snippet>{"word": True}</snippet></ROW><ROW><id>11462417</id><snippet>{"contains(word)": 1}</snippet></ROW><ROW><id>11462417</id><snippet>{"word": True, "something something": 1, "something else": "a"}</snippet></ROW><ROW><id>11462516</id><snippet>from flask import request

tags = request.form.get('tags', []) # Where tags is a list of new tags

mongo_collection.update(
    {'_id': ObjectId('4ff1c0d0dec94126a2000000')},
    {'$pushAll': {'tags': tags}},
    )
</snippet></ROW><ROW><id>11462572</id><snippet>/opt/SUNWspro/bin/c99</snippet></ROW><ROW><id>11462572</id><snippet>-xc99</snippet></ROW><ROW><id>11462572</id><snippet>/opt/SUNWspro/bin/cc -xc99 ...</snippet></ROW><ROW><id>11462572</id><snippet>/usr/sfw/bin/gcc</snippet></ROW><ROW><id>11462572</id><snippet>-std=c99</snippet></ROW><ROW><id>11462572</id><snippet>gcc</snippet></ROW><ROW><id>11462572</id><snippet>ld</snippet></ROW><ROW><id>11462572</id><snippet>libc.so</snippet></ROW><ROW><id>11462572</id><snippet>cc</snippet></ROW><ROW><id>11462891</id><snippet>def four_byte_xor(buf, key):
    outl = []
    for i in range(0, len(buf), 4):
        chunk = buf[i:i+4]
        v = struct.unpack(b"=I", chunk)[0]
        v ^= key
        outl.append(struct.pack(b"=I", v))
    return b"".join(outl)
</snippet></ROW><ROW><id>11462891</id><snippet>def four_byte_xor(buf, key):
    key = struct.pack(b"&gt;I", key)
    buf = bytearray(buf)
    for offset in range(0, len(buf), 4):
        for i, byte in enumerate(key):
            buf[offset + i] = chr(buf[offset + i] ^ ord(byte))
    return str(buf)
</snippet></ROW><ROW><id>11463097</id><snippet>def sequence(i=0):
    while True:
        i+=1
        yield i
</snippet></ROW><ROW><id>11463097</id><snippet>sum</snippet></ROW><ROW><id>11463097</id><snippet>sum(1 for i in iterable)</snippet></ROW><ROW><id>11463097</id><snippet>list</snippet></ROW><ROW><id>11463097</id><snippet>tuple</snippet></ROW><ROW><id>11463097</id><snippet>len</snippet></ROW><ROW><id>11463180</id><snippet>the_rest(*the_discriminant)
</snippet></ROW><ROW><id>11463180</id><snippet>d, b, a = discrim(1, 0, -4)
the_rest(d, b, a)
</snippet></ROW><ROW><id>11463260</id><snippet>itertools</snippet></ROW><ROW><id>11463260</id><snippet>itertools.product("ACGT", repeat=8)
</snippet></ROW><ROW><id>11463437</id><snippet>QToolButton</snippet></ROW><ROW><id>11463437</id><snippet>QFrame</snippet></ROW><ROW><id>11463463</id><snippet>new Thread() {
    public void run() {
        YourFunction();//Call your function
    }
}.start();
</snippet></ROW><ROW><id>11463463</id><snippet>Runnable myrunnable = new Runnable() {
    public void run() {
        YourFunction();//Call your function
    }
}

new Thread(myrunnable).start();//Call it when you need to run the function
</snippet></ROW><ROW><id>11463547</id><snippet>'Peter' in 'Peter Pan'</snippet></ROW><ROW><id>11463547</id><snippet>==</snippet></ROW><ROW><id>11463547</id><snippet>'Peter' == d[coursename]['assistant']
</snippet></ROW><ROW><id>11463547</id><snippet>'Peter'.lower() == d[coursename]['assistant'].lower()</snippet></ROW><ROW><id>11463547</id><snippet>in</snippet></ROW><ROW><id>11463547</id><snippet>==</snippet></ROW><ROW><id>11464112</id><snippet>getattr(model, fieldtoget)
</snippet></ROW><ROW><id>11464150</id><snippet>pycassa.util.convert_time_to_uuid</snippet></ROW><ROW><id>11464150</id><snippet>uuid.UUID</snippet></ROW><ROW><id>11464150</id><snippet>UUID('{12345678-1234-5678-1234-567812345678}')

UUID('12345678123456781234567812345678')

UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
</snippet></ROW><ROW><id>11464150</id><snippet>cf.get(UUID('{dbed33be-cc9e-11e1-8080-808080808080}')) # example
</snippet></ROW><ROW><id>11464150</id><snippet>UUID</snippet></ROW><ROW><id>11464172</id><snippet># test.py
from django.core.management import call_command
call_command("dumpdata")
print "\n---"
call_command("dumpdata")
print
</snippet></ROW><ROW><id>11464172</id><snippet>DJANGO_SETTINGS_MODULE=settings python test.py &gt; log.txt
</snippet></ROW><ROW><id>11464172</id><snippet>django.core.management.commands.dumpdata.handle()</snippet></ROW><ROW><id>11464172</id><snippet>(Pdb) list(model.objects.iterator())
*** Error in argument: '(model.objects.iterator())'
(Pdb) p list(model.objects.iterator())
*** DatabaseError: DatabaseError('current transaction is aborted, commands ignored    until end of transaction block\n',)
(Pdb) 
</snippet></ROW><ROW><id>11464172</id><snippet># test.py version 2.0!

#!/usr/bin/env python
# from django.core.management import call_command
import django.core.management as mgmt
from django.db import transaction

''' 
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)
'''

@transaction.commit_manually
def main():
    # mgmt.call_command('dumpdata', use_base_manager=True)
    mgmt.call_command('dumpdata')
    transaction.rollback()
    print
    print '---'
    print
    """ 
    mgmt._commands = None
    import sys
    reload(sys.modules['django.core.management.commands.dumpdata'])
    """
    mgmt.call_command('dumpdata')
    transaction.rollback()
    print

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>11464473</id><snippet>" ".join("A 0006 005C 0078 0030 0034 0046 0030 00".split()[1:-1])
</snippet></ROW><ROW><id>11464473</id><snippet>'0006 005C 0078 0030 0034 0046 0030'
</snippet></ROW><ROW><id>11465121</id><snippet>dt = datetime.datetime.strptime(dateVariable, "%b-%y")
if dt &gt; datetime.now():
    dt = dt - datetime.timedelta(years=100)
</snippet></ROW><ROW><id>11465216</id><snippet>return article_code, date_received, s100rsd, remark_text
</snippet></ROW><ROW><id>11465216</id><snippet>article_code, date_received, s100rsd, remark_text = parse_xml(...)
</snippet></ROW><ROW><id>11465266</id><snippet>is</snippet></ROW><ROW><id>11465266</id><snippet>a</snippet></ROW><ROW><id>11465266</id><snippet>b</snippet></ROW><ROW><id>11465266</id><snippet>&gt;&gt;&gt; a=[1, 2, 3]
&gt;&gt;&gt; b=list(a)
&gt;&gt;&gt; id(a)
3065460108L
&gt;&gt;&gt; id(b)
3073003244L
&gt;&gt;&gt; id(a) == id(b)   # Equivalent to a is b
False
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>11465938</id><snippet>x = string.split("::")[-1]
</snippet></ROW><ROW><id>11465938</id><snippet>string = "682698_62876_26861"
print string.rpartition('_')[0]
</snippet></ROW><ROW><id>11465938</id><snippet>682698_62876
</snippet></ROW><ROW><id>11465974</id><snippet>nosetests C:\path\to\my\unittest.py:test_123</snippet></ROW><ROW><id>11465974</id><snippet>nosetests C:\path\to\my\unittest.py:tests.test_123</snippet></ROW><ROW><id>11466029</id><snippet>class PO(models.Model)
    qty = models.IntegerField(null=True)
    cost = models.IntegerField(null=True)

    @property
    def total(self):
        return self.qty * self.cost
</snippet></ROW><ROW><id>11466033</id><snippet>.xpath()</snippet></ROW><ROW><id>11466033</id><snippet>import urllib2
from lxml import etree

url =  "http://www.example.com/servlet/av/ResultTemplate=AVResult.html"
response = urllib2.urlopen(url)
htmlparser = etree.HTMLParser()
tree = etree.parse(response, htmlparser)
tree.xpath(xpathselector)
</snippet></ROW><ROW><id>11466033</id><snippet>CSSSelector</snippet></ROW><ROW><id>11466033</id><snippet>td.empformbody</snippet></ROW><ROW><id>11466033</id><snippet>from lxml.cssselect import CSSSelector

td_empformbody = CSSSelector('td.empformbody')
for elem in td_empformbody(tree):
    # Do something with these table cells.
</snippet></ROW><ROW><id>11466383</id><snippet>    if (x = 0) {
        // error handling
    }
    else {
        // code that only works for nonzero x
    }
</snippet></ROW><ROW><id>11466631</id><snippet>toolwindow</snippet></ROW><ROW><id>11466631</id><snippet>overrideredirect</snippet></ROW><ROW><id>11466631</id><snippet>type</snippet></ROW><ROW><id>11466631</id><snippet>utility</snippet></ROW><ROW><id>11466631</id><snippet>focus</snippet></ROW><ROW><id>11466826</id><snippet>SELECT column_name
FROM information_schema.columns
WHERE table_name = 'your_table'
    AND column_name LIKE 'word%'
</snippet></ROW><ROW><id>11466826</id><snippet>"SELECT * FROM your_table WHERE " + ' '.join(['%s = 1' % name for name in columns])
</snippet></ROW><ROW><id>11466826</id><snippet>"SELECT * FROM ..."</snippet></ROW><ROW><id>11466855</id><snippet># First read content into an array
# Each item in the array will be a line of the file
with open('filename.txt') as f:
    content = f.readlines()

# Next, parse each line
data = []
for line in content:
    # You might need to split by spaces
    # This takes care of multiple whitespaces, so "data1   data2 data3    data4"
    # Becomes ['data1','data2','data3','data4']
    row = line.split()
    # Or, maybe you will need to split the row up by tabs into an array
    # [] is a list comprehension, strip() will remove extra whitespace
    row = [item.strip() for item in line.split('\t')]
    # Finally, append the row to your data array
    data.append(row)

# Now, print the data back to a file how you'd like
fout = open('output.txt','w')
for row in data:
   # For specific columns
   fout.write('{0} {1} {2} {3}'.format(row[0],row[1],row[7],row[8]))
   # Or, if you just need to remove a couple columns, you might do:
   row.pop(6)
   row.pop(5)
   row.pop(4)
   fout.write(' '.join(row))
</snippet></ROW><ROW><id>11467155</id><snippet>151 # Database router                                                                                                                                       
152 from django.db import connections
153 DATABASE_ROUTERS         = ['core.models.MyDBRouter',]
</snippet></ROW><ROW><id>11467349</id><snippet>import pylab as p

t = p.arange(0.0, 2.0, 0.01)
s = p.sin(2*p.pi*t)

ax=p.subplot(111)
ax.plot(t, s, color='r',linewidth=1.0)
ax.set_ylim(-1,1)
ax.plot(t, s+1, color='g',linewidth=1.0, label="Graph2")
p.show()


ax=p.subplot(111)
ax.plot(t, s, color='r',linewidth=1.0)
ax.set_ybound(-1,1)
ax.plot(t, s+1, color='g',linewidth=1.0, label="Graph2")
p.show()
</snippet></ROW><ROW><id>11467377</id><snippet>WHERE</snippet></ROW><ROW><id>11467377</id><snippet>cursor.execute('SELECT * FROM ...')
cols = [i for i, col in enumerate(cursor.description) if col[0].startswith('word')]
for row in cursor:
    columns = [row[c] for c in cols]
</snippet></ROW><ROW><id>11467377</id><snippet>for row in cursor.fetchall()</snippet></ROW><ROW><id>11467686</id><snippet>it</snippet></ROW><ROW><id>11467686</id><snippet>try:
    next_item = next(it)
except StopIteration:
    # exhausted, handle this case
</snippet></ROW><ROW><id>11467686</id><snippet>class MyIterator(object):
    def __init__(self, iterable):
        self._iterable = iter(iterable)
        self._exhausted = False
        self._cache_next_item()
    def _cache_next_item(self):
        try:
            self._next_item = next(self._iterable)
        except StopIteration:
            self._exhausted = True
    def __iter__(self):
        return self
    def next(self):
        if self._exhausted:
            raise StopIteration
        next_item = self._next_item
        self._cache_next_item()
        return next_item
    def __nonzero__(self):
        return not self._exhausted
</snippet></ROW><ROW><id>11468682</id><snippet>continue</snippet></ROW><ROW><id>11468682</id><snippet>pass</snippet></ROW><ROW><id>11468682</id><snippet>for x in range(y):
    try:
        do_something()
    except SomeException:
        continue
    # The following line will not get executed for the current x value if a SomeException is raised
    do_another_thing() 

for x in range(y):
    try:
        do_something()
    except SomeException:
        pass
    # The following line will get executed regardless of whether SomeException is thrown or not
    do_another_thing() 
</snippet></ROW><ROW><id>11468877</id><snippet>record</snippet></ROW><ROW><id>11468877</id><snippet>qry = meta.Session.query(model.EmpsTable).filter(model.EmpsTable
         .firstname.like(searchQuery))

return {'data': [
         {'file_id':record.file_id, 'filename':
            record.filename, 'links_to' :record.url}
        for record in qry
       ]}
</snippet></ROW><ROW><id>11469075</id><snippet>ip = interp2d(x, y, z); zi = ip(xi, yi)</snippet></ROW><ROW><id>11469075</id><snippet>interp2d</snippet></ROW><ROW><id>11469075</id><snippet>interp2</snippet></ROW><ROW><id>11469104</id><snippet>affine_transform</snippet></ROW><ROW><id>11469104</id><snippet>offset</snippet></ROW><ROW><id>11469183</id><snippet>class GetAttr(type):
    def __getitem__(cls, x):
        return getattr(cls, x)

class Fruit(object):
    __metaclass__ = GetAttr

    Apple = 0
    Pear = 1
    Banana = 2
</snippet></ROW><ROW><id>11469328</id><snippet>open(myfile, 'w')</snippet></ROW><ROW><id>11469400</id><snippet>numpy</snippet></ROW><ROW><id>11469400</id><snippet>numpy.where</snippet></ROW><ROW><id>11469400</id><snippet>x = np.arange(16).reshape((2, 8))
y = np.array([[2], [13]])
z = np.arange(16, 32).reshape((2, 8))
numpy.where(~(x &gt; y).any(axis=0), x, z)
</snippet></ROW><ROW><id>11469400</id><snippet>array([[ 0,  1,  2, 19, 20, 21, 22, 23],
       [ 8,  9, 10, 27, 28, 29, 30, 31]])
</snippet></ROW><ROW><id>11469400</id><snippet>z</snippet></ROW><ROW><id>11469400</id><snippet>x</snippet></ROW><ROW><id>11469400</id><snippet>z</snippet></ROW><ROW><id>11469400</id><snippet>True</snippet></ROW><ROW><id>11469400</id><snippet>~(x &gt; y).any(axis=0)</snippet></ROW><ROW><id>11469400</id><snippet>z</snippet></ROW><ROW><id>11469400</id><snippet>x[:,(x &gt; y).any(axis=0)] = z.T
</snippet></ROW><ROW><id>11469400</id><snippet>&gt;&gt;&gt; z = np.arange(20, 30).reshape((5, 2))
&gt;&gt;&gt; x[:,(x &gt; y).any(axis=0)] = z.T
&gt;&gt;&gt; x
array([[ 0,  1,  2, 20, 22, 24, 26, 28],
       [ 8,  9, 10, 21, 23, 25, 27, 29]])
</snippet></ROW><ROW><id>11469779</id><snippet>columns1 = [row[d] for d in cols if row[d] != '']
                                    ^^^^ ^
</snippet></ROW><ROW><id>11469892</id><snippet>TestC</snippet></ROW><ROW><id>11469892</id><snippet>__init__</snippet></ROW><ROW><id>11469892</id><snippet>__init__</snippet></ROW><ROW><id>11469892</id><snippet>__new__</snippet></ROW><ROW><id>11469892</id><snippet>cls</snippet></ROW><ROW><id>11469892</id><snippet>cls</snippet></ROW><ROW><id>11469892</id><snippet>self.__class__</snippet></ROW><ROW><id>11469892</id><snippet>&gt;&gt;&gt; class A(object):
...   def do(self):
...      print "In class A"
... 
&gt;&gt;&gt; class B(A):
...   def do(self):
...     super(B, self).do()
... 
&gt;&gt;&gt; C = B
&gt;&gt;&gt; C().do()
In class A
&gt;&gt;&gt; class B(object):
...   def do(self):
...      print "in new class B"
... 
&gt;&gt;&gt; C().do()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in do
TypeError: super(type, obj): obj must be an instance or subtype of type
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11469918</id><snippet>ll = [get_value(x) for x in (1, 2, 3)]
</snippet></ROW><ROW><id>11469918</id><snippet>list_a, list_b, list_c = [get_value(x) for x in (1, 2, 3)]
</snippet></ROW><ROW><id>11469918</id><snippet>get_value</snippet></ROW><ROW><id>11469918</id><snippet>params = {'a': 1, 'b': 2, 'c': 3}
result = {k:get_value(v) for k,v in params.iteritems()}
# result == {'a': get_value(1), 'b': get_value(2), 'c': get_value(3)}
</snippet></ROW><ROW><id>11470099</id><snippet>ax.plot_surface(X,Y,z, facecolors=plt.cm.jet(np.clip(fc,0,vmax)*np.max(z)/vmax), cstride=1, rstride=1, vmax=vmax)
</snippet></ROW><ROW><id>11470798</id><snippet>s = self._fmt % record.__dict__
</snippet></ROW><ROW><id>11470798</id><snippet>try:
    s = self._fmt % record.__dict__
except UnicodeError:
    import pdb
    pdb.set_trace()
</snippet></ROW><ROW><id>11470798</id><snippet>try:
    s = self._fmt % record.__dict__
except UnicodeError:
    s = "*** Couldn't log properly: %r against %r" % (self._fmt, record.__dict__)
</snippet></ROW><ROW><id>11471221</id><snippet>MemoryError</snippet></ROW><ROW><id>11471221</id><snippet>def suffixes(stng):
    for i in xrange(len(stng)):
         yield stng[i:]
</snippet></ROW><ROW><id>11471221</id><snippet>suffixes</snippet></ROW><ROW><id>11471369</id><snippet>import wx
import wx.grid


class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "Manager")
        sizer = wx.BoxSizer(wx.VERTICAL)

        overall = wx.grid.Grid(self)
        overall.CreateGrid(5,2)
        sizer.Add(overall, 0, flag=wx.EXPAND)

        self.SetSizer(sizer)
        self.Fit()

app = wx.App(False)
MainFrame().Show()

app.MainLoop()
</snippet></ROW><ROW><id>11471369</id><snippet>import wx

########################################################################
class ChartPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

########################################################################
class MainPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        chart = ChartPanel(self)
        chart.SetBackgroundColour("blue")

        # create some sizers
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        topSizer = wx.BoxSizer(wx.HORIZONTAL)
        # change to VERTICAL if the buttons need to be stacked
        btnSizer = wx.BoxSizer(wx.HORIZONTAL)

        for i in range(3):
            btn = wx.Button(self, label="Button #%s" % (i+1))
            btnSizer.Add(btn, 0, wx.ALL, 5)

        # put the buttons next to the Panel on the top
        topSizer.Add(btnSizer, 0, wx.ALL, 5)
        topSizer.Add(chart, 1, wx.EXPAND)

        mainSizer.Add(topSizer, 1, wx.EXPAND)
        mainSizer.AddSpacer(150,150)
        self.SetSizer(mainSizer)

########################################################################
class MainFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="BoxSizer Example")
        panel = MainPanel(self)
        self.Show()

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>11471855</id><snippet>clean_&lt;name of field&gt;
</snippet></ROW><ROW><id>11471855</id><snippet>clean_file_col</snippet></ROW><ROW><id>11471855</id><snippet>form.is_valid()</snippet></ROW><ROW><id>11471855</id><snippet>clean_cols</snippet></ROW><ROW><id>11471855</id><snippet>cols</snippet></ROW><ROW><id>11471855</id><snippet>clean_col</snippet></ROW><ROW><id>11471855</id><snippet>clean</snippet></ROW><ROW><id>11471855</id><snippet>form.is_valid()</snippet></ROW><ROW><id>11471855</id><snippet>def clean(self):
    cleaned_data = super(Contact_form, self).clean()
    cleaned_file_type = self.cleaned_data.get(file_type)
    # ...
</snippet></ROW><ROW><id>11471855</id><snippet>contact_form = Contact_form()
</snippet></ROW><ROW><id>11471855</id><snippet>contact_form.is_valid()</snippet></ROW><ROW><id>11471855</id><snippet>form = ContactForm(request.POST)</snippet></ROW><ROW><id>11471975</id><snippet>import urllib
import urllib2
import simplejson

url = 'http://en.wikipedia.org/w/api.php'
values = {'action' : 'query',
          'prop' : 'revisions',
          'titles' : 'Jennifer_Aniston',
          'rvprop' : 'content',
          'format' : 'json'}

data = urllib.urlencode(values)
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
json = response.read()
</snippet></ROW><ROW><id>11472048</id><snippet>if dir_key in lines and files in lines:
</snippet></ROW><ROW><id>11472048</id><snippet>if dir_key:</snippet></ROW><ROW><id>11472048</id><snippet>True</snippet></ROW><ROW><id>11472048</id><snippet>dir_key</snippet></ROW><ROW><id>11472048</id><snippet>if True and (files in lines):</snippet></ROW><ROW><id>11472280</id><snippet>urllib</snippet></ROW><ROW><id>11472280</id><snippet>urllib</snippet></ROW><ROW><id>11472305</id><snippet>float(int(dictionary['Field 1']), 1)
</snippet></ROW><ROW><id>11472305</id><snippet>float(&lt;int_value&gt;, 1)</snippet></ROW><ROW><id>11472305</id><snippet>&gt;&gt;&gt; float(1, 1)
Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    float(1, 1)
TypeError: float() takes at most 1 argument (2 given)
</snippet></ROW><ROW><id>11472439</id><snippet>net.tcp</snippet></ROW><ROW><id>11472520</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = '\id hello some random text that can be anything'
&gt;&gt;&gt; match = re.search(r'\\id (\w+)', text)
&gt;&gt;&gt; if match:
        print match.group(1)
</snippet></ROW><ROW><id>11472520</id><snippet>'\id'</snippet></ROW><ROW><id>11472520</id><snippet>re.search(r'\\id\s*(\w+)', text)
</snippet></ROW><ROW><id>11472774</id><snippet>import re
s = '&lt;table style="width: 100%%" bgcolor="%s"&gt;&lt;tr&gt;&lt;td&gt;&lt;font color="%s"&gt;&lt;b&gt;1.23&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'
result = float(re.sub(r"&lt;.?table[^&gt;]*&gt;|&lt;.?t[rd]&gt;|&lt;font[^&gt;]+&gt;|&lt;.?b&gt;", "", s))
</snippet></ROW><ROW><id>11472869</id><snippet>cursor.execute("select function_1() from dual")
cursor.fetchall()
</snippet></ROW><ROW><id>11473042</id><snippet>C:\&gt; assoc .py=Python
C:\&gt; ftype Python="C:\python27\python.exe %0 %*"
</snippet></ROW><ROW><id>11473042</id><snippet>.py</snippet></ROW><ROW><id>11473042</id><snippet>.exe</snippet></ROW><ROW><id>11473042</id><snippet>.py</snippet></ROW><ROW><id>11473042</id><snippet>PATHEXT</snippet></ROW><ROW><id>11473119</id><snippet>libs/adspygoogle</snippet></ROW><ROW><id>11473267</id><snippet>lol</snippet></ROW><ROW><id>11473267</id><snippet>mystring</snippet></ROW><ROW><id>11473267</id><snippet>mystring = []
for line in all_lines:
    if line.startswith('lol '):
        mystring.append(line.replace('lol ', '', 1).lower().rstrip() + '\n')

article = 'this is my saved file\n'+''.join(mystring)+'\nthe end'
</snippet></ROW><ROW><id>11473267</id><snippet>mystring</snippet></ROW><ROW><id>11473267</id><snippet>join</snippet></ROW><ROW><id>11473267</id><snippet>\n</snippet></ROW><ROW><id>11473267</id><snippet>rstrip()</snippet></ROW><ROW><id>11473267</id><snippet>line.replace('lol ', '', 1).lower().rstrip(' ')
</snippet></ROW><ROW><id>11473267</id><snippet>rstrip()</snippet></ROW><ROW><id>11473267</id><snippet>mystring.append(line.replace('lol ', '').lower().rstrip())
</snippet></ROW><ROW><id>11473267</id><snippet>article = 'this is my saved file\n'+'\n'.join(mystring)+'\nthe end'
</snippet></ROW><ROW><id>11473594</id><snippet>from django import forms
class newForm(forms.Form):
    def __init__(self, request):
        my_passed_variable = request.POST['pass_variable']

    a_new_variable = forms.CharField(max_length = 25)

    my_passed_variable = forms.CharField(widget = forms.HiddenInput())
</snippet></ROW><ROW><id>11473594</id><snippet>self.my_passed_variable</snippet></ROW><ROW><id>11473594</id><snippet>my_passed_variable</snippet></ROW><ROW><id>11473594</id><snippet>__init__</snippet></ROW><ROW><id>11473594</id><snippet>my_passed_variable = request.POST['pass_variable']</snippet></ROW><ROW><id>11473594</id><snippet>self.my_passed_variable = request.POST['pass_variable']</snippet></ROW><ROW><id>11473594</id><snippet>__init__</snippet></ROW><ROW><id>11473594</id><snippet>super</snippet></ROW><ROW><id>11473594</id><snippet>from django import forms
class newForm(forms.Form):
    # first, I'm going to put the fields at the top, I think that's more standard
    a_new_variable = forms.CharField(max_length = 25)
    my_passed_variable = forms.CharField(widget = forms.HiddenInput())

    def __init__(self, request, *args, **kwargs):
        super(newForm, self).__init__(*args, **kwargs)
        self.fields['my_passed_variable'].initial = request.POST.get('pass_variable') # don't assume the variable is present!
</snippet></ROW><ROW><id>11473707</id><snippet>[]</snippet></ROW><ROW><id>11473707</id><snippet>(topic, weight)</snippet></ROW><ROW><id>11473707</id><snippet>LsiModel.show_topic</snippet></ROW><ROW><id>11474383</id><snippet>from mypackage import mymodule
do_something_with(mymodule.MY_CONSTANT)

#elsewhere
mymodule.MY_CONSTANT = 'new_value'
</snippet></ROW><ROW><id>11474383</id><snippet>from mypackage.mymodule import MY_CONSTANT

# elsewhere
mymodule.MY_CONSTANT = 'new_value'
</snippet></ROW><ROW><id>11474496</id><snippet>\b</snippet></ROW><ROW><id>11474496</id><snippet>\x08</snippet></ROW><ROW><id>11474496</id><snippet>"N\bNA\bAM\bME\bE"</snippet></ROW><ROW><id>11474496</id><snippet>output = re.sub(r'\x08.', '', output)</snippet></ROW><ROW><id>11474509</id><snippet>"\033[F"</snippet></ROW><ROW><id>11474646</id><snippet>    with open('data1.txt') as f:
        for line in f:
            line=line.split()[:6]
            line=map(lambda x:x[:x.index('.')] if '.' in x else x,line)  #if an element has '.' then
                                                                         #remove that dot else keep the element as it is
            print('\t'.join(line))
</snippet></ROW><ROW><id>11474646</id><snippet>DVL1    03220   NP_004412   VANGL2  02758   Q9ULK5
PAX3    09421   NP_852124   MEOX2   02760   NP_005915
VANGL2  02758   Q9ULK5  MAGI3   11290   NP_001136254
</snippet></ROW><ROW><id>11474646</id><snippet>line=map(lambda x:x[:x.index('.')] if '.' in x else x,line)</snippet></ROW><ROW><id>11474646</id><snippet>line=map(lambda x:x.split('.')[0],line)</snippet></ROW><ROW><id>11474930</id><snippet>eval()</snippet></ROW><ROW><id>11474930</id><snippet>ObjectId</snippet></ROW><ROW><id>11474930</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>11474930</id><snippet>ObjectId()</snippet></ROW><ROW><id>11475052</id><snippet>reduce()</snippet></ROW><ROW><id>11475052</id><snippet>attrmap = {
  "new_key_1": ('subdict1', 'subdict2', 'old_key_1'),
   ...
}

print reduce(lambda x, y: x[y], attrmap[somekey], old_object)
</snippet></ROW><ROW><id>11475090</id><snippet>join</snippet></ROW><ROW><id>11475090</id><snippet>[1,"baz",my_custom_object,my_list].join("foo")</snippet></ROW><ROW><id>11475090</id><snippet>join</snippet></ROW><ROW><id>11475090</id><snippet>list_of_strings='this, is , a, string, separated, by , commas.'.split(',')
</snippet></ROW><ROW><id>11475093</id><snippet>fp.write(str(packet.payload.payload.payload)[:2])</snippet></ROW><ROW><id>11475093</id><snippet>fp.write(str(packet[TCP].payload)[:2])</snippet></ROW><ROW><id>11475093</id><snippet>class SSL(Packet):
  name = "SSL" fields_desc = [ ShortField("firstBytes", None) ]

bind_layers( TCP, SSL, sport=443 )
bind_layers( TCP, SSL, dport=443 )

def handler(packet):
... fp.write(str(packet[SSL]))
</snippet></ROW><ROW><id>11475116</id><snippet>CharField</snippet></ROW><ROW><id>11475116</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>11475116</id><snippet>HiddenInput</snippet></ROW><ROW><id>11475116</id><snippet>mymodel = forms.ModelChoiceField(widget=forms.HiddenInput, queryset=MyModel.objects.all())
</snippet></ROW><ROW><id>11475197</id><snippet>None</snippet></ROW><ROW><id>11475412</id><snippet>for a in range(3):
    result = 'abcd' + a
    opener = open('file.txt', "a")
    print results
    opener.write(results)
    opener.close()
</snippet></ROW><ROW><id>11475412</id><snippet>opener = open('file.txt', "a")
for a in range(3):
    result = 'abcd' + a
    print results
    opener.write(results)
opener.close()
</snippet></ROW><ROW><id>11475412</id><snippet>opener = open('file.txt', "a")
for a in range(3):
    result = 'abcd' + a
    print results
    opener.write(results)
    opener.flush()
opener.close() 
</snippet></ROW><ROW><id>11475642</id><snippet>self.il = wx.ImageList(16, 16)

self.idx1 = self.il.Add(images.Smiles.GetBitmap())
self.sm_up = self.il.Add(images.SmallUpArrow.GetBitmap())
self.sm_dn = self.il.Add(images.SmallDnArrow.GetBitmap())
</snippet></ROW><ROW><id>11475642</id><snippet>def PopulateList(self):
    if 0:
        # for normal, simple columns, you can add them like this:
        self.list.InsertColumn(0, "Artist")
        self.list.InsertColumn(1, "Title", wx.LIST_FORMAT_RIGHT)
        self.list.InsertColumn(2, "Genre")
    else:
        # but since we want images on the column header we have to do it the hard way:
        info = wx.ListItem()
        info.m_mask = wx.LIST_MASK_TEXT | wx.LIST_MASK_IMAGE | wx.LIST_MASK_FORMAT
        info.m_image = -1
        info.m_format = 0
        info.m_text = "Artist"
        self.list.InsertColumnInfo(0, info)

        info.m_format = wx.LIST_FORMAT_RIGHT
        info.m_text = "Title"
        self.list.InsertColumnInfo(1, info)

        info.m_format = 0
        info.m_text = "Genre"
        self.list.InsertColumnInfo(2, info)

    items = musicdata.items()
    for key, data in items:
        index = self.list.InsertImageStringItem(sys.maxint, data[0], self.idx1)
        self.list.SetStringItem(index, 1, data[1])
        self.list.SetStringItem(index, 2, data[2])
        self.list.SetItemData(index, key)
</snippet></ROW><ROW><id>11475645</id><snippet>from posix import *
</snippet></ROW><ROW><id>11475645</id><snippet>_names = sys.builtin_module_names
</snippet></ROW><ROW><id>11475645</id><snippet>posix_stat</snippet></ROW><ROW><id>11475645</id><snippet>os</snippet></ROW><ROW><id>11475645</id><snippet>static PyObject * posix_lstat(PyObject *self, PyObject *args, PyObject *kwargs) // ...
</snippet></ROW><ROW><id>11475772</id><snippet>enumerate</snippet></ROW><ROW><id>11475905</id><snippet>re</snippet></ROW><ROW><id>11475905</id><snippet>article = re.sub(r'(?is)&lt;/html&gt;.+', '&lt;/html&gt;', article)
</snippet></ROW><ROW><id>11475943</id><snippet>def __eq__(self, other):
    return self.name == other.name \
        and self.row == other.row \
        and self.col == other.col \
        and self.up is other.up \
        and self.down is other.down \
        and self.left is other.left \
        and self.right is other.right
</snippet></ROW><ROW><id>11476146</id><snippet>checkprime(1)</snippet></ROW><ROW><id>11476146</id><snippet># Check each factor to see if it is prime or compound
for i in range(0,len(factors)):
    print (factors[i])
    # Why can't I call checkprime here, like this? It works in the console.
    checkprime(factors[i])
</snippet></ROW><ROW><id>11476146</id><snippet>def checkprime(n):
    # Trial division
    for i in range(2,int(sqrt(n)+1)):
        if n/i == int(n/i):
            # Number gives a remainder upon division and therefore is not prime
            isprime = False
            break
        else:
            isprime = True
</snippet></ROW><ROW><id>11476146</id><snippet>n = 1</snippet></ROW><ROW><id>11476146</id><snippet>range(2, int(sqrt(1)+1))</snippet></ROW><ROW><id>11476146</id><snippet>range(2,2)</snippet></ROW><ROW><id>11476146</id><snippet>isprime</snippet></ROW><ROW><id>11476146</id><snippet>range()</snippet></ROW><ROW><id>11476146</id><snippet>range(x,y)</snippet></ROW><ROW><id>11476146</id><snippet>range(2,3) = [2]</snippet></ROW><ROW><id>11476146</id><snippet>range(2,2) = []</snippet></ROW><ROW><id>11476146</id><snippet>findfactors()</snippet></ROW><ROW><id>11476146</id><snippet>1</snippet></ROW><ROW><id>11476146</id><snippet>def findfactors(n):
    # for i in range(1,int(sqrt(n)+1)):
    for i in range(1,n+1):
</snippet></ROW><ROW><id>11476146</id><snippet>2</snippet></ROW><ROW><id>11476146</id><snippet>1</snippet></ROW><ROW><id>11476146</id><snippet>if isprime == True:
        return True
    elif isprime == False:
        return False
</snippet></ROW><ROW><id>11476146</id><snippet>return isprime
</snippet></ROW><ROW><id>11476146</id><snippet>isprime</snippet></ROW><ROW><id>11476146</id><snippet>isprime = True</snippet></ROW><ROW><id>11476146</id><snippet>return True</snippet></ROW><ROW><id>11476146</id><snippet>isprime = False</snippet></ROW><ROW><id>11476146</id><snippet>return False</snippet></ROW><ROW><id>11476146</id><snippet>int(n/i)</snippet></ROW><ROW><id>11476146</id><snippet>n // i</snippet></ROW><ROW><id>11476146</id><snippet>//</snippet></ROW><ROW><id>11476240</id><snippet>is</snippet></ROW><ROW><id>11476240</id><snippet>id</snippet></ROW><ROW><id>11476240</id><snippet>(0-6) is -6</snippet></ROW><ROW><id>11476240</id><snippet>==</snippet></ROW><ROW><id>11476422</id><snippet>7.0</snippet></ROW><ROW><id>11476422</id><snippet>float(7)</snippet></ROW><ROW><id>11476422</id><snippet>a = 7
b = "7"
print float(a)
7.0
print float(b)
7.0
</snippet></ROW><ROW><id>11476472</id><snippet>Site</snippet></ROW><ROW><id>11476472</id><snippet>Site</snippet></ROW><ROW><id>11476472</id><snippet>syncdb</snippet></ROW><ROW><id>11476472</id><snippet>python manage.py shell</snippet></ROW><ROW><id>11476472</id><snippet>&gt;&gt;&gt; from django.contrib.sites.models import Site
&gt;&gt;&gt; Site.objects.create(name='example.com', domain='example.com')
</snippet></ROW><ROW><id>11476472</id><snippet>/admin/</snippet></ROW><ROW><id>11476472</id><snippet>Sites</snippet></ROW><ROW><id>11476588</id><snippet>cmp</snippet></ROW><ROW><id>11476588</id><snippet>cmp</snippet></ROW><ROW><id>11476588</id><snippet>cmp_to_key</snippet></ROW><ROW><id>11476607</id><snippet>    from flask import Blueprint

    mod = Blueprint(blueprint_name, __name__, template_folder="folder_name"
                    static_folder="folder_name")

    @mod.route('/mymodule')
    def view():
         # your code
</snippet></ROW><ROW><id>11476607</id><snippet>    from yourmodule import mod 

    app.register_blueprint(mod)
</snippet></ROW><ROW><id>11476607</id><snippet>current_app</snippet></ROW><ROW><id>11476607</id><snippet>    from flask import current_app
</snippet></ROW><ROW><id>11476667</id><snippet>colors = [(1,1,1)] + [(random(),random(),random()) for i in xrange(255)]
new_map = matplotlib.colors.LinearSegmentedColormap.from_list('new_map', colors, N=256)
</snippet></ROW><ROW><id>11476667</id><snippet>import scipy
from scipy import ndimage
import matplotlib.pyplot as plt
import matplotlib
from random import random

colors = [(1,1,1)] + [(random(),random(),random()) for i in xrange(255)]
new_map = matplotlib.colors.LinearSegmentedColormap.from_list('new_map', colors, N=256)

im = scipy.misc.imread('blobs.jpg',flatten=1)
blobs, number_of_blobs = ndimage.label(im)

plt.imshow(blobs, cmap=new_map)
plt.imsave('jj2.png',blobs, cmap=new_map)
plt.show()
</snippet></ROW><ROW><id>11476723</id><snippet>str.count</snippet></ROW><ROW><id>11476723</id><snippet>&gt;&gt;&gt; nStr = '000123000123'
&gt;&gt;&gt; nStr.count('123')
2
</snippet></ROW><ROW><id>11476723</id><snippet>nStr = '000123000123'
pattern = '123'
count =0
flag=True
start=0
while flag:
    a = nStr.find(pattern,start)  # find() returns -1 if the word is not found, 
                                  #start i the starting index from the search starts(default value is 0)
    if a==-1:          #if pattern not found set flag to False
        flag=False
    else:               # if word is found increase count and set starting index to a+1
        count+=1        
        start=a+1
print(count)
</snippet></ROW><ROW><id>11476802</id><snippet>inotify</snippet></ROW><ROW><id>11476845</id><snippet>__init__.py</snippet></ROW><ROW><id>11476845</id><snippet>setup.py</snippet></ROW><ROW><id>11476845</id><snippet>folderB</snippet></ROW><ROW><id>11476845</id><snippet>python setup.py install</snippet></ROW><ROW><id>11476976</id><snippet>list_strings = ["aa", "bb", "cc"]
combined = ''.join(list_strings)
str_len = 3
chunks = [combined[i:i + str_len] for i in range(0, len(combined), str_len)]
['aab', 'bcc']
</snippet></ROW><ROW><id>11477101</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup("&lt;table id=people&gt;&lt;tr&gt;&lt;td&gt;x&lt;a&gt;y&lt;/a&gt;z&lt;/td&gt;&lt;td&gt;x&lt;a&gt;y&lt;/a&gt;z&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;")
t = soup.findAll("table",id="people")
for table in t:
   rows = table.findAll("tr")
   for tr in rows:
      cols = tr.findAll("td")
      print(','.join([td.text for td in cols]))
</snippet></ROW><ROW><id>11477101</id><snippet>u''.join(map(unicode, td.contents))</snippet></ROW><ROW><id>11477169</id><snippet># my python's a bit rusty, but hopefully this is close
checkboxes = [x for x in form.children() where isinstance(x, QCheckBox)]
</snippet></ROW><ROW><id>11477362</id><snippet>is_hidden</snippet></ROW><ROW><id>11477362</id><snippet>True</snippet></ROW><ROW><id>11477362</id><snippet>template_search_list = [
    "comments/%s/%s/form.html" % (ctype.app_label, ctype.model),
    "comments/%s/form.html" % ctype.app_label,
    "comments/form.html"
]
</snippet></ROW><ROW><id>11477362</id><snippet>form.html</snippet></ROW><ROW><id>11477362</id><snippet>render_comments_form</snippet></ROW><ROW><id>11477362</id><snippet>comments/form.html</snippet></ROW><ROW><id>11477362</id><snippet>form.htm</snippet></ROW><ROW><id>11477594</id><snippet>with</snippet></ROW><ROW><id>11477594</id><snippet>for item in lookup[...]</snippet></ROW><ROW><id>11477594</id><snippet>lookup[unitProtID]</snippet></ROW><ROW><id>11477594</id><snippet>for index, (start, end) in enumerate(searchPFAM(fname)):
    with open('newfile-%s.txt' % index,'w') as fileinput:
        print start, end
        for item in lookup[uniprotID]:
            item, start, end = map(int, (item, start, end)) #You shouldn't be doing this here, you should convert these variables to ints when you first store them in "lookup".
            if start &lt;= item &lt;= end:
                print item
                result = str(item - start)
                fileinput.write("&gt;{0} | at {1} position\n".format(uniprotID, result))
                fileinput.write(''.join(makeList[start-1:end]))
                break #exit loop, move onto next file.
        else:
                fileinput.write("&gt;{0} | N/A\n".format(uniprotID))
                fileinput.write(''.join(makeList[start-1:end]))
</snippet></ROW><ROW><id>11477594</id><snippet>fileinput.write(...)</snippet></ROW><ROW><id>11477594</id><snippet>print ...</snippet></ROW><ROW><id>11477956</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>11477956</id><snippet>from collections import defaultdict

myList = [['hostile', 'angry'], ['elated', 'happy'], ['elated', 'grateful'], ['depressed', 'sad']]  

myDict = defaultdict(list)

for key, value in myList:
    myDict[key].append(value)
</snippet></ROW><ROW><id>11478043</id><snippet>some_str[len(some_str)]</snippet></ROW><ROW><id>11478043</id><snippet>IndexError</snippet></ROW><ROW><id>11478043</id><snippet>len(some_str) - 1</snippet></ROW><ROW><id>11478043</id><snippet>while</snippet></ROW><ROW><id>11478043</id><snippet>while a &lt; len(myString):</snippet></ROW><ROW><id>11478043</id><snippet>string</snippet></ROW><ROW><id>11478043</id><snippet>string</snippet></ROW><ROW><id>11478200</id><snippet>&gt;&gt;&gt; list_string = [ "aaa", "bb", "cc", "dd", "ee"]
&gt;&gt;&gt; str_len = 6
&gt;&gt;&gt; [[''.join(list_string[:i]), ''.join(list_string[i:])] for i in xrange(len(list_string)) if all(1 &lt;= len(s) &lt;= str_len for s in [''.join(list_string[:i]), ''.join(list_string[i:])])]
[['aaabb', 'ccddee']]
</snippet></ROW><ROW><id>11478200</id><snippet>&gt;&gt;&gt; for str_len in range(len(''.join(list_string))):
        print str_len, [[''.join(list_string[:i]), ''.join(list_string[i:])] for i in xrange(len(list_string)) if all(1 &lt;= len(s) &lt;= str_len for s in [''.join(list_string[:i]), ''.join(list_string[i:])])]


0 []
1 []
2 []
3 []
4 []
5 []
6 [['aaabb', 'ccddee']]
7 [['aaabb', 'ccddee'], ['aaabbcc', 'ddee']]
8 [['aaa', 'bbccddee'], ['aaabb', 'ccddee'], ['aaabbcc', 'ddee']]
9 [['aaa', 'bbccddee'], ['aaabb', 'ccddee'], ['aaabbcc', 'ddee'], ['aaabbccdd', 'ee']]
10 [['aaa', 'bbccddee'], ['aaabb', 'ccddee'], ['aaabbcc', 'ddee'], ['aaabbccdd', 'ee']]
</snippet></ROW><ROW><id>11478200</id><snippet>filter</snippet></ROW><ROW><id>11478200</id><snippet>&gt;&gt;&gt; filter(
        lambda res: all(1 &lt;= len(s) &lt;= str_len for s in res),
        [[''.join(list_string[:i]), ''.join(list_string[i:])]
         for i in xrange(len(list_string))])
[['aaabb', 'ccddee']]
</snippet></ROW><ROW><id>11478345</id><snippet>somecmd 'SELECT ... "'"$etag"'", ...'
</snippet></ROW><ROW><id>11478466</id><snippet>ABC+DE(FG+IH)
</snippet></ROW><ROW><id>11478466</id><snippet>['or', ['and', A, B, C], ['and', D, E, ['or', ['and', F, G], ['and', I, H]]]]
</snippet></ROW><ROW><id>11478590</id><snippet>&gt;&gt;&gt; class Class1(object):
...     pass
... 
&gt;&gt;&gt; class Class2(object):
...     pass
... 
&gt;&gt;&gt; def foo(cls):
...     print cls
... 
&gt;&gt;&gt; import random
&gt;&gt;&gt; classes = {'Class1': Class1, 'Class2': Class2}
&gt;&gt;&gt; dynamic_class = classes['Class%d' % random.randint(1, 2)]
&gt;&gt;&gt; foo(dynamic_class())
&lt;__main__.Class1 object at 0x10b44ab50&gt;
</snippet></ROW><ROW><id>11478982</id><snippet>a='"THESE","ARE","WORDS","AND","I","NEED","THEM","IN","A","LIST"'
[i.strip('"') for i in a.split(",")]
['THESE', 'ARE', 'WORDS', 'AND', 'I', 'NEED', 'THEM', 'IN', 'A', 'LIST']
</snippet></ROW><ROW><id>11478982</id><snippet>a=r""""And",'b',"W,B'" """  
ast.literal_eval(a)    # gives the expected and correct
('And', 'b', "W,B'")
</snippet></ROW><ROW><id>11478982</id><snippet>['And', "'b'", 'W', 'B\'" ']
</snippet></ROW><ROW><id>11479005</id><snippet>strength = float(raw_input("Input Strength Stat:"))
str_mod = round(strength/2)
</snippet></ROW><ROW><id>11479005</id><snippet>division</snippet></ROW><ROW><id>11479005</id><snippet>__future__</snippet></ROW><ROW><id>11479005</id><snippet>RPG console&gt; Input Strength Stat: __import__('os').system('rm -r ~')
                                 #^ User input (don't try this!)
</snippet></ROW><ROW><id>11479034</id><snippet>import matplotlib as mpl 
import pyplot as plt
from numpy import arange,meshgrid,sqrt

u,v = arange(-50,51,10),arange(-50,51,10)
u,v = meshgrid(u,v)
x,y = u,v
C = sqrt(u**2 + v**2)
cmap=plt.cm.jet
bounds = [10, 20, 40, 60]
norm = mpl.colors.BoundaryNorm(bounds, cmap.N)
img=plt.barbs(x,y,u,v,C,cmap=cmap,norm=norm)
plt.colorbar(img, cmap=cmap, norm=norm, boundaries=bounds, ticks=bounds)
plt.show()
</snippet></ROW><ROW><id>11479202</id><snippet> "2600 TOWER OAKS BOULEVARD","ROCKVILLE","MD","2085
</snippet></ROW><ROW><id>11479202</id><snippet>def all_but_last_line(file):
    last = next(file)
    for line in file:
        yield last

if __name__ == '__main__':
    with open('fcc-license-view-data-sample.csv', 'rb') as csv_file:
        dialect = csv.Sniffer().sniff(csv_file.read(1024))
        csv_file.seek(0)
        data = csv.DictReader(all_but_last_line(csv_file), dialect=dialect)
        for item in data:
            print item
</snippet></ROW><ROW><id>11479279</id><snippet>sklearn.linear_model.LinearRegression</snippet></ROW><ROW><id>11479279</id><snippet>from sklearn import linear_model
clf = linear_model.LinearRegression()
clf.fit([[getattr(t, 'x%d' % i) for i in range(1, 8)] for t in texts],
        [t.y for t in texts])
</snippet></ROW><ROW><id>11479279</id><snippet>clf.coef_</snippet></ROW><ROW><id>11479279</id><snippet>sklearn.linear_model</snippet></ROW><ROW><id>11479319</id><snippet>QFileDialog.getOpenFileName</snippet></ROW><ROW><id>11479319</id><snippet>QFileDialog</snippet></ROW><ROW><id>11479319</id><snippet>filepath = str(QFileDialog.getOpenFileName())
</snippet></ROW><ROW><id>11479319</id><snippet>QApplication.setStyle</snippet></ROW><ROW><id>11479319</id><snippet>filepath = str(QFileDialog.getOpenFileName(options=QFileDialog.DontUseNativeDialog)))
</snippet></ROW><ROW><id>11479414</id><snippet>self.cells</snippet></ROW><ROW><id>11479414</id><snippet>self.cells = []
for i in xrange(region.cellsPerCol):
    self.cells.append(Cell(self, i))
</snippet></ROW><ROW><id>11479414</id><snippet>list</snippet></ROW><ROW><id>11479414</id><snippet>myList</snippet></ROW><ROW><id>11479414</id><snippet>myList = []
for i in range(10):
    myList.append(i)
</snippet></ROW><ROW><id>11479414</id><snippet>myList = [i for i in range(10)]
</snippet></ROW><ROW><id>11479414</id><snippet>myList = []
for i in range(10):
    if i%2 == 0:     # could be written as "if not i%2" more tersely
       myList.append(i)
</snippet></ROW><ROW><id>11479414</id><snippet>myList = [i for i in range(10) if i%2 == 0]
</snippet></ROW><ROW><id>11479414</id><snippet>data = ['3', '7.4', '8.2']
new_data = [float(n) for n in data]
</snippet></ROW><ROW><id>11479414</id><snippet>new_data
[3.0, 7.4, 8.2]
</snippet></ROW><ROW><id>11479488</id><snippet>.map()</snippet></ROW><ROW><id>11479488</id><snippet>var nonZero = [];
for (var row = startRow; row &lt; startRow + 3; ++row)
  for (var col = startCol; col &lt; startCol + 3; ++col)
    if (grid[row][col] !== 0) nonZero.push(grid[row][col];
</snippet></ROW><ROW><id>11479594</id><snippet>html = '&lt;html&gt; &lt;li id="123"&gt;&lt;/li&gt;&lt;li id="3455"&gt;&lt;/li&gt; &lt;/html&gt;'
soup = BeautifulSoup(html)

attrs = [li['id'] for li in soup.find_all('li')]
</snippet></ROW><ROW><id>11479739</id><snippet>average_inches = total / month
</snippet></ROW><ROW><id>11479739</id><snippet>TypeError: unspupported operand type(s) for /: 'float' and 'str'
</snippet></ROW><ROW><id>11479739</id><snippet>total</snippet></ROW><ROW><id>11479739</id><snippet>month</snippet></ROW><ROW><id>11479739</id><snippet>month</snippet></ROW><ROW><id>11479739</id><snippet>ALL_MONTHS = ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'):
</snippet></ROW><ROW><id>11479739</id><snippet>for month in ALL_MONTHS:
</snippet></ROW><ROW><id>11479739</id><snippet>ALL_MONTHS</snippet></ROW><ROW><id>11479745</id><snippet>class Node(db.Model):
   # some properties and stuff

   @classmethod
   def active_nodes(cls):
       return cls.all().filter('active = ',True)
</snippet></ROW><ROW><id>11479802</id><snippet>int(x = raw_input('x:\n')) #max number
</snippet></ROW><ROW><id>11479802</id><snippet>x = int(raw_input('x:\n')) #max number
</snippet></ROW><ROW><id>11479802</id><snippet>string</snippet></ROW><ROW><id>11479802</id><snippet>int</snippet></ROW><ROW><id>11479903</id><snippet>re.findall(r"[\w']+(?:-[\w']+)*", myString)
</snippet></ROW><ROW><id>11479903</id><snippet>myString = "walk-the-dog can - i - --have -- a- -- look at your pocket-book?"
</snippet></ROW><ROW><id>11479903</id><snippet>['walk-the-dog', 'can', 'i', 'have', 'a', 'look', 'at', 'your', 'pocket-book']
</snippet></ROW><ROW><id>11479983</id><snippet>os.walk()</snippet></ROW><ROW><id>11480011</id><snippet>def prime(num):
    """True if num is prime, false otherwise"""    
    check = True
    #if num in copy:
    #    copy.remove(num)
    for x in range(2,x-1):
        if num % x == 0:
            check = False
            break
    return check
</snippet></ROW><ROW><id>11480075</id><snippet>def word_features(name):
    features = {}
    features["firstletter"] = name[0].lower()
    features["lastletter"] = name[-1].lower()
    for letter in 'abcdefghijklmnopqrstuvwxyz':
        features["count(%s)" % letter] = name.lower().count(letter)
        features["has(%s)" % letter] = (letter in name.lower())
    return features
</snippet></ROW><ROW><id>11480075</id><snippet>&gt;&gt; words = [('Rock', 'Physical Object'), ('Play', 'Action'), ... ]
&gt;&gt;&gt; featuresets = [(word_features(n), g) for (n,g) in words]
&gt;&gt;&gt; train_set, test_set = featuresets[500:], featuresets[:500]
&gt;&gt;&gt; classifier = nltk.NaiveBayesClassifier.train(train_set)
</snippet></ROW><ROW><id>11480075</id><snippet>nltk.classify.accuracy(classifier, test_set)
</snippet></ROW><ROW><id>11480075</id><snippet>classifier.classify(word_features('Gold'))
</snippet></ROW><ROW><id>11480236</id><snippet>[...]</snippet></ROW><ROW><id>11480236</id><snippet>[\(（]</snippet></ROW><ROW><id>11480236</id><snippet>[( ]</snippet></ROW><ROW><id>11480236</id><snippet>[\s+]?</snippet></ROW><ROW><id>11480285</id><snippet>time.timezone</snippet></ROW><ROW><id>11480285</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.timezone
-36000
</snippet></ROW><ROW><id>11480285</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; print timedelta(hours=time.timezone/60/60)
-1 day, 14:00:00
</snippet></ROW><ROW><id>11480371</id><snippet>(?:^|\s)78
</snippet></ROW><ROW><id>11480371</id><snippet>(?: exp )</snippet></ROW><ROW><id>11480389</id><snippet>class Classroom(object):

    def __init__(self, course_list=[]):
        self.course_list = course_list

    def add_course(self, course):
        self.course_list.append(course)
</snippet></ROW><ROW><id>11480389</id><snippet>c1 = Classroom()
c2 = Classroom()

c1.add_course('ENG 101')
c2.add_course('MATH 101')

print c1.course_list
print c2.course_list
</snippet></ROW><ROW><id>11480389</id><snippet>['ENG 101', 'MATH 101']
['ENG 101', 'MATH 101']
</snippet></ROW><ROW><id>11480389</id><snippet>id</snippet></ROW><ROW><id>11480389</id><snippet>print id(c1.course_list)
print id(c2.course_list)
</snippet></ROW><ROW><id>11480389</id><snippet>4299912760
4299912760
</snippet></ROW><ROW><id>11480389</id><snippet>course_list=[]</snippet></ROW><ROW><id>11480389</id><snippet>__init__</snippet></ROW><ROW><id>11480389</id><snippet>def</snippet></ROW><ROW><id>11480389</id><snippet>[]</snippet></ROW><ROW><id>11480389</id><snippet>None</snippet></ROW><ROW><id>11480389</id><snippet>class Classroom2(object):

    def __init__(self, course_list=None):
        self.course_list = course_list or []

    def add_course(self, course):
        self.course_list.append(course)


c1 = Classroom2()
c2 = Classroom2()

c1.add_course('ENG 101')
c2.add_course('MATH 101')

print c1.course_list
print c2.course_list
</snippet></ROW><ROW><id>11480389</id><snippet>['ENG 101']
['MATH 101']
</snippet></ROW><ROW><id>11480495</id><snippet>import itertools

lines = '''1,AF534061.1,T,A
1,K02718.1,T,A
16,AF534061.1,G,-
16,K02718.1,G,-
17,AF534061.1,T,-
17,K02718.1,T,-
18,AF534061.1,A,-
18,K02718.1,A,-
19,AF534061.1,T,-
19,K02718.1,T,-
20,AF534061.1,A,-
20,K02718.1,A,-
21,AF534061.1,A,-
21,K02718.1,A,-
24,AF534061.1,C,T'''.split('\n')

for key, group in itertools.groupby(lines, lambda line: line.partition(',')[0]):
    print ','.join(group)
</snippet></ROW><ROW><id>11480832</id><snippet>@hybrid.property</snippet></ROW><ROW><id>11480832</id><snippet>@value.setter</snippet></ROW><ROW><id>11480832</id><snippet>from sqlalchemy.ext.hybrid import hybrid_property

class SomeClass(object):
    @hybrid_property
    def value(self):
        return self._value

    @value.setter
    def value(self, value):
        self._value = value
</snippet></ROW><ROW><id>11480832</id><snippet>property</snippet></ROW><ROW><id>11480832</id><snippet>setter</snippet></ROW><ROW><id>11480838</id><snippet>os.listdir</snippet></ROW><ROW><id>11480838</id><snippet>with</snippet></ROW><ROW><id>11480838</id><snippet>with open('yourtextfile.txt') as file: #this is like file=open('yourtextfile.txt')
    lines=file.readlines()                   #read all the lines in the file
                                       #when the code executed in the with statement is done, the file is automatically closed, which is why most people use this (no need for .close()).
</snippet></ROW><ROW><id>11480848</id><snippet>BlobProperty</snippet></ROW><ROW><id>11480848</id><snippet>dict</snippet></ROW><ROW><id>11480848</id><snippet>tuple</snippet></ROW><ROW><id>11480956</id><snippet>import shlex
return_code=subprocess.call(shlex.split(meshlabString))
</snippet></ROW><ROW><id>11480956</id><snippet>shlex.split("this 'is a string' with 5 parts") # ['this', 'is a string', 'with', '5', 'parts]
</snippet></ROW><ROW><id>11480956</id><snippet>return_code=subprocess.call(meshlabString,shell=True)
</snippet></ROW><ROW><id>11480956</id><snippet>subprocess.call</snippet></ROW><ROW><id>11480956</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11480999</id><snippet>textvariable</snippet></ROW><ROW><id>11480999</id><snippet>#Create and Place Text Field

def on_variable_trace(*args):
    if entryVariable2.get() == "":
        entryWidget3.configure(state="disable")
    else:
        entryWidget3.configure(state="normal")

entryVariable2 = StringVar()
entryWidget2= Entry(textFrame, textvariable=entryVariable2)
entryWidget2["width"] = 30
entryWidget2.pack(side="top")
entryVariable2.trace("w", on_variable_trace)
</snippet></ROW><ROW><id>11481141</id><snippet>aspect='auto'</snippet></ROW><ROW><id>11481141</id><snippet>imshow</snippet></ROW><ROW><id>11481141</id><snippet>pylab.imshow(SLP,aspect='auto',origin='lower',extent=(ff.min(),ff.max(),AA.min(),AA.max()))
</snippet></ROW><ROW><id>11481247</id><snippet>IN</snippet></ROW><ROW><id>11481247</id><snippet>class SharedItems(db.Model):
  user = db.ReferenceProperty(User, required=True) # logged-in user
  from = db.ReferenceProperty(User, required=True) # who shared it
  item = db.ReferenceProperty(Item, required=True) # the item itself
  posted = db.DateTimeProperty() # when it was shared
</snippet></ROW><ROW><id>11481247</id><snippet>SharedItems</snippet></ROW><ROW><id>11481930</id><snippet>a == b
</snippet></ROW><ROW><id>11481930</id><snippet>==</snippet></ROW><ROW><id>11482347</id><snippet>file.readlines()</snippet></ROW><ROW><id>11482347</id><snippet>readlines()</snippet></ROW><ROW><id>11482347</id><snippet>import zipfile
with zipfile.ZipFile(...) as z:
    with z.open(...) as f:
        for line in f:
            print line
</snippet></ROW><ROW><id>11482347</id><snippet>with</snippet></ROW><ROW><id>11482640</id><snippet>import lxml.html
page = lxml.html.parse('http://www.google.com').getroot()
print page.xpath('//a/@href')
</snippet></ROW><ROW><id>11482702</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; my_string = 'a hello aaaaa hi aaaaaaa bye bbb'
&gt;&gt;&gt; re.sub(r'a+', 'b', my_string)
'b hello b hi b bye bbb'
</snippet></ROW><ROW><id>11482719</id><snippet>'python'</snippet></ROW><ROW><id>11482719</id><snippet>&gt;&gt;&gt; text = "I have a good python book so will become pythonist"
&gt;&gt;&gt; 'python' in text.split()
True
</snippet></ROW><ROW><id>11482787</id><snippet>slugify</snippet></ROW><ROW><id>11482787</id><snippet>?&lt;=</snippet></ROW><ROW><id>11482787</id><snippet>re.sub('[,.?!\t\n ]+', '-', s)
</snippet></ROW><ROW><id>11482787</id><snippet>,.?!\t\n</snippet></ROW><ROW><id>11483162</id><snippet>ioctl()</snippet></ROW><ROW><id>11483162</id><snippet>&gt;&gt;&gt; buf = array.array('h', [0])
&gt;&gt;&gt; fcntl.ioctl(file.fileno(), 0x80016a11, buf)
0
&gt;&gt;&gt; buf[0]
6
</snippet></ROW><ROW><id>11483162</id><snippet>fcntl.ioctl(file.fileno(), 0x80016a11)</snippet></ROW><ROW><id>11483253</id><snippet>cmd</snippet></ROW><ROW><id>11483253</id><snippet>python "path\to\program.py"</snippet></ROW><ROW><id>11483338</id><snippet>__future__</snippet></ROW><ROW><id>11483397</id><snippet>__name</snippet></ROW><ROW><id>11483506</id><snippet>collections.Counter</snippet></ROW><ROW><id>11483506</id><snippet>Counter</snippet></ROW><ROW><id>11483506</id><snippet>("A", "B")</snippet></ROW><ROW><id>11483506</id><snippet>3</snippet></ROW><ROW><id>11483506</id><snippet>c[("A", "B")] += 1</snippet></ROW><ROW><id>11483506</id><snippet>c[("A", "S")] += 1</snippet></ROW><ROW><id>11483921</id><snippet>svm_save_model('libsvm.model', m)
m = svm_load_model('libsvm.model')
</snippet></ROW><ROW><id>11483958</id><snippet>in1d</snippet></ROW><ROW><id>11483958</id><snippet>arange</snippet></ROW><ROW><id>11483958</id><snippet>a</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; a[::-1]
array([10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0])
&gt;&gt;&gt; a = a[::-1]
</snippet></ROW><ROW><id>11483958</id><snippet>intersect1d</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; numpy.intersect1d(a, b)
array([ 2,  7, 10])
</snippet></ROW><ROW><id>11483958</id><snippet>in1d</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; numpy.in1d(a, b)
array([ True, False, False,  True, False, False, False, False,  True,
       False, False], dtype=bool)
</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; numpy.arange(a.shape[0])[numpy.in1d(a, b)]
array([0, 3, 8])
&gt;&gt;&gt; indices = numpy.arange(a.shape[0])[numpy.in1d(a, b)]
&gt;&gt;&gt; a[indices]
array([10,  7,  2])
</snippet></ROW><ROW><id>11483958</id><snippet>nonzero</snippet></ROW><ROW><id>11483958</id><snippet>X</snippet></ROW><ROW><id>11483958</id><snippet>Y</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; numpy.nonzero(numpy.in1d(a, b))
(array([0, 3, 8]),)
</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; numpy.in1d(a, b).nonzero()
(array([0, 3, 8]),)
</snippet></ROW><ROW><id>11483958</id><snippet>a</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; a[numpy.nonzero(numpy.in1d(a, b))]
array([10,  7,  2])
</snippet></ROW><ROW><id>11483958</id><snippet>argwhere</snippet></ROW><ROW><id>11483958</id><snippet>&gt;&gt;&gt; numpy.argwhere(numpy.in1d(a, b))
array([[0],
       [3],
       [8]])
</snippet></ROW><ROW><id>11484057</id><snippet>argparse</snippet></ROW><ROW><id>11484144</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
G = nx.DiGraph()

G.add_node("ROOT")

for i in xrange(5):
    G.add_node("Child_%i" % i)
    G.add_node("Grandchild_%i" % i)
    G.add_node("Greatgrandchild_%i" % i)

    G.add_edge("ROOT", "Child_%i" % i)
    G.add_edge("Child_%i" % i, "Grandchild_%i" % i)
    G.add_edge("Grandchild_%i" % i, "Greatgrandchild_%i" % i)

# write dot file to use with graphviz
# run "dot -Tpng test.dot &gt;test.png"
nx.write_dot(G,'test.dot')

# same layout using matplotlib with no labels
plt.title("draw_networkx")
pos=nx.graphviz_layout(G,prog='dot')
nx.draw(G,pos,with_labels=False,arrows=False)
plt.savefig('nx_test.png')
</snippet></ROW><ROW><id>11484529</id><snippet>ImageChops.invert</snippet></ROW><ROW><id>11484529</id><snippet>import Image

img = Image.open('image.png').convert('RGBA')

r, g, b, a = img.split()

def invert(image):
    return image.point(lambda p: 255 - p)

r, g, b = map(invert, (r, g, b))

img2 = Image.merge(img.mode, (r, g, b, a))

img2.save('image2.png')
</snippet></ROW><ROW><id>11484892</id><snippet>setupUi</snippet></ROW><ROW><id>11484892</id><snippet>setupUi</snippet></ROW><ROW><id>11484892</id><snippet>@classmethod</snippet></ROW><ROW><id>11484892</id><snippet>myappUI.py</snippet></ROW><ROW><id>11484892</id><snippet>class MainWindow(QtGui.QMainWindow, Ui_MainWindow):

    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)

        # create instance attributes to store data
        ...
        self.mothersname = []
        self.birthday = []
        self.placeofbirth = []
        self.nationality = []
        self.address = []
        ...

        r=0
        c=0
        for x in children:
            for i in x:
                newItem = QtGui.QTableWidgetItem(i)
                self.tableWidget.setItem(r, c, newItem)
                r += 1
            r = 0
            c += 1

    def newFile(self):
        ...

    def openFile(self):
        ...

    def Quit(self):
        # Dont force the exit of the app like this.
        # Just close the main window
        # sys.exit(app.exec_())

    # this was in no way a classmethod      
    # @classmethod
    def update2(self): 
        ...

    def actionewchild(self):
        ...
        # if you want to create a form dialog on the fly
        # and kill it after you get results
        form = Form(parent=self)
        form.exec_()

    def lists(self):
        ...

class Form(QtGui.QDialog, Ui_Form):

    def __init__(self, *args, **kwargs):
        super(Form, self).__init__(*args, **kwargs)
        self.setupUi(self)

    def amlist(self):
        ...

if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>11484892</id><snippet>def addtolists(self):
    program.am.append(text)
    instance = MainWindow()
    instance.updatetable()
    dialog.close()  
</snippet></ROW><ROW><id>11484892</id><snippet># this is just a pseudo example of the right direction.
# A method in your MainWindow, starting the child dialog,
# waiting on its results, and updating itself.
def showDialog(self):
    d = MyDialog(self)
    if d.exec_():
        self.updateStuff(d.values)

myAction.triggered.connect(self.showDialog)
</snippet></ROW><ROW><id>11484892</id><snippet>def doupdate(self):
    d = NewChildDlg(self)
    # exec_ shows the dialog modally
    if d.exec_():
        # your dialog didn't have a pre-initialized
        # `text` attribute so it was not safe to assume
        text = d.lineEdit.text()
        # stop using globals. use attributes
        self.am.append(text)
        self.updatetable()
</snippet></ROW><ROW><id>11484892</id><snippet>class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.am = []
        self.courtdate = []
        self.board_number = []
</snippet></ROW><ROW><id>11484892</id><snippet>    def addtolists(self):
        # why use a global here? dialog == self
        # self.accept()
        dialog.accept()        

# you don't need a top level function that
# maintains a global instance and creates the dialog
# It should be the callers responsibility
def main():
    global dialog
    dialog = NewChildDlg()
    dialog.show()
    dialog.exec_()
</snippet></ROW><ROW><id>11484892</id><snippet># either you need the newchilddlg namespace
# or you only want the members...
# newchilddlg.NewChildDlg  vs  NewChildDlg
import newchilddlg
from newchilddlg import *
</snippet></ROW><ROW><id>11484988</id><snippet>namedict = ({"first_name":"Joshua", "last_name":"Drake"},
            {"first_name":"Steven", "last_name":"Foo"},
            {"first_name":"David", "last_name":"Bar"})
</snippet></ROW><ROW><id>11484988</id><snippet>cur = conn.cursor()
cur.executemany("""INSERT INTO bar(first_name,last_name) VALUES (%(first_name)s, %(last_name)s)""", namedict)
</snippet></ROW><ROW><id>11484988</id><snippet>CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3 
------+------+------
  456 | zzz  | 
(1 row) 
</snippet></ROW><ROW><id>11485040</id><snippet>/*

 Need a cookie file (scholar_cookie.txt) like this:

# Netscape HTTP Cookie File
# http://curlm.haxx.se/rfc/cookie_spec.html
# This file was generated by libcurl! Edit at your own risk.

.scholar.google.com     TRUE    /       FALSE   2147483647      GSP     ID=353e8f974d766dcd:CF=2
.google.com     TRUE    /       FALSE   1317124758      PREF    ID=353e8f974d766dcd:TM=1254052758:LM=1254052758:S=_biVh02e4scrJT1H
.scholar.google.co.uk   TRUE    /       FALSE   2147483647      GSP     ID=f3f18b3b5a7c2647:CF=2
.google.co.uk   TRUE    /       FALSE   1317125123      PREF    ID=f3f18b3b5a7c2647:TM=1254053123:LM=1254053123:S=UqjRcTObh7_sARkN

*/
</snippet></ROW><ROW><id>11485087</id><snippet>r'[0,9]'</snippet></ROW><ROW><id>11485087</id><snippet>'[0-9]'</snippet></ROW><ROW><id>11485087</id><snippet>'\d'</snippet></ROW><ROW><id>11485087</id><snippet>[0,9]</snippet></ROW><ROW><id>11485087</id><snippet>\w</snippet></ROW><ROW><id>11485087</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>11485087</id><snippet>[a-zA-Z']</snippet></ROW><ROW><id>11485180</id><snippet>&gt;&gt;&gt; import scipy.stats
&gt;&gt;&gt; scipy.stats.poisson(9.2 * 23).cdf(254-1)
0.99747286634158705
</snippet></ROW><ROW><id>11485180</id><snippet>&gt;&gt;&gt; scipy.stats.poisson(9.2 * 25).cdf(254-50)
0.044301801145630537
</snippet></ROW><ROW><id>11485298</id><snippet>cv2.drawContours()</snippet></ROW><ROW><id>11485298</id><snippet>lineType = -1</snippet></ROW><ROW><id>11485457</id><snippet>from django.conf import settings

def tooltips_format(request):
    return { 'TOOLTIPS_DATE_FORMAT': settings.TOOLTIPS_DATE_FORMAT }
</snippet></ROW><ROW><id>11485457</id><snippet>main/context_processors.py</snippet></ROW><ROW><id>11485457</id><snippet>main</snippet></ROW><ROW><id>11485457</id><snippet>main.context_processors.tooltips_format</snippet></ROW><ROW><id>11485457</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>11485457</id><snippet>{{ invoice.printed|date:TOOLTIPS_DATE_FORMAT }}
</snippet></ROW><ROW><id>11485480</id><snippet>x[1:]=-2*x[1:]/(-0.9*x[1:]-0.9*x[:-1])
</snippet></ROW><ROW><id>11485480</id><snippet>y=-2*x[1:]/(-0.9*x[1:]-0.9*x[:-1])
</snippet></ROW><ROW><id>11485480</id><snippet>x[0]</snippet></ROW><ROW><id>11485480</id><snippet>import numpy as np
x=np.array(iterable)  #pretty easy :) although there could be more efficient ways depending on where "iterable" comes from.
</snippet></ROW><ROW><id>11485560</id><snippet>dicts = []
for item in itemlist:
    d = {}    
    for a in item.attributes.values():
        d[a.name] = a.value
    dicts.append(d)
print dicts
</snippet></ROW><ROW><id>11485907</id><snippet>from PyQt4 import QtCore, QtGui

class Widget(QtGui.QWidget):

    def __init__(self, *args, **kwargs):
        super(Widget, self).__init__(*args, **kwargs)
        self.resize(800,600)

        self.vlayout = QtGui.QVBoxLayout(self)
        self.table = QtGui.QTableView()
        self.vlayout.addWidget(self.table)

        self.hlayout = QtGui.QHBoxLayout()
        self.list1 = QtGui.QListView()
        self.list2 = QtGui.QListView()
        self.list3 = QtGui.QListView()      
        self.hlayout.addWidget(self.list1)
        self.hlayout.addWidget(self.list2)
        self.hlayout.addWidget(self.list3)

        self.vlayout.addLayout(self.hlayout)

        self.model = QtGui.QStandardItemModel(10,10,self)
        self.table.setModel(self.model)

        self.list1.setModel(self.model)
        self.list1.setModelColumn(0)
        self.list2.setModel(self.model)
        self.list2.setModelColumn(1)
        self.list3.setModel(self.model)
        self.list3.setModelColumn(2)

        self.populateTable()

    def populateTable(self):
        for row in xrange(10):
            for col in xrange(10):
                item = QtGui.QStandardItem('%d-%d' % (row, col))
                self.model.setItem(row, col, item)


if __name__ == "__main__":
    import sys
    app = QtGui.QApplication([])
    window = Widget()
    window.show()
    window.raise_()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>11485944</id><snippet>is</snippet></ROW><ROW><id>11485944</id><snippet>-1</snippet></ROW><ROW><id>11485944</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; 
&gt;&gt;&gt; def test_integers():
...     print "-6 is -6 ?", -6 is -6 # True
...     print "(0-6) is -6 ?", (0 - 6) is -6 # False
... 
&gt;&gt;&gt; dis.dis(test_integers)
  2           0 LOAD_CONST               1 ('-6 is -6 ?')
              3 PRINT_ITEM          
              4 LOAD_CONST               2 (-6)
              7 LOAD_CONST               2 (-6)
             10 COMPARE_OP               8 (is)
             13 PRINT_ITEM          
             14 PRINT_NEWLINE       

  3          15 LOAD_CONST               3 ('(0-6) is -6 ?')
             18 PRINT_ITEM          
             19 LOAD_CONST               6 (-6)
             22 LOAD_CONST               2 (-6)
             25 COMPARE_OP               8 (is)
             28 PRINT_ITEM          
             29 PRINT_NEWLINE       
             30 LOAD_CONST               0 (None)
             33 RETURN_VALUE        
</snippet></ROW><ROW><id>11485944</id><snippet>&gt;&gt;&gt; def f():
...     x = 1+2
...     x = 2-3
...     x = 3*4
...     x = 4/5
...     x = 5**6
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_CONST               7 (3)
              3 STORE_FAST               0 (x)

  3           6 LOAD_CONST               8 (-1)
              9 STORE_FAST               0 (x)

  4          12 LOAD_CONST               9 (12)
             15 STORE_FAST               0 (x)

  5          18 LOAD_CONST               4 (4)
             21 LOAD_CONST               5 (5)
             24 BINARY_DIVIDE       
             25 STORE_FAST               0 (x)

  6          28 LOAD_CONST              10 (15625)
             31 STORE_FAST               0 (x)
             34 LOAD_CONST               0 (None)
             37 RETURN_VALUE        
</snippet></ROW><ROW><id>11485971</id><snippet>conn.request_get("/search", args={'q':'Test'}, headers={'Accept':'text/json'})
</snippet></ROW><ROW><id>11486058</id><snippet>import ctypes
class MyStruct(ctypes.Structure):
    _fields_= [('id', ctypes.c_uint),('perm', ctypes.c_uint)]
    def __new__(cls, buf):
        return cls.from_buffer_copy(buf)

    def __init__(self, data):
        pass  ## data is already present in class

ms = MyStruct("\xAA\xAA\xAA\xAA\x11\x11\x11\x11")
print ms.id, ms.perm
</snippet></ROW><ROW><id>11486147</id><snippet>scipy.io.loadmat</snippet></ROW><ROW><id>11486147</id><snippet>matfile['myCell'][0]['myStructField'][0]['myStructField']</snippet></ROW><ROW><id>11486147</id><snippet>h5py</snippet></ROW><ROW><id>11486147</id><snippet>f['myCell'][0]['myStructField'][0]['myStructField']</snippet></ROW><ROW><id>11486174</id><snippet>'_'</snippet></ROW><ROW><id>11486174</id><snippet>for</snippet></ROW><ROW><id>11486174</id><snippet>dummy</snippet></ROW><ROW><id>11486174</id><snippet>ignore</snippet></ROW><ROW><id>11486188</id><snippet>import sys
sys.path.append('/home/markstadt/.local/lib/python/site-packages')
import soundcloud
</snippet></ROW><ROW><id>11486242</id><snippet>while True</snippet></ROW><ROW><id>11486242</id><snippet>break</snippet></ROW><ROW><id>11486242</id><snippet>next_encounter</snippet></ROW><ROW><id>11486242</id><snippet>print next_encounter</snippet></ROW><ROW><id>11486242</id><snippet>url.find</snippet></ROW><ROW><id>11486242</id><snippet>url = url[next_encounter:]
</snippet></ROW><ROW><id>11486242</id><snippet>print</snippet></ROW><ROW><id>11486650</id><snippet>solve_sudoku</snippet></ROW><ROW><id>11486650</id><snippet>grid</snippet></ROW><ROW><id>11486650</id><snippet>def solve_sudoku(grid, row=0, col=0):
    # possible return at the first entry point
    if not check_sudoku(grid): 
        return None

    # only time you would ever NOT get None
    if row &gt; 8: 
        return grid

    ...recurse...

    # come back out when the stack unwinds,
    # and there is no return value other than None
</snippet></ROW><ROW><id>11486650</id><snippet>grid</snippet></ROW><ROW><id>11486650</id><snippet>def solver(aList):
    if aList[0] == 10:
        print "SOLVED!"
        return None

    print "NOT SOLVED..."
    return next(aList)

def next(aList):
    # do some stuff
    # check some stuff
    aList[0] += 1
    return solver(aList)


if __name__ == "__main__":
    data = [0]
    solver(data)
    print data
</snippet></ROW><ROW><id>11486650</id><snippet>checker() -&gt; solver()</snippet></ROW><ROW><id>11486650</id><snippet>None</snippet></ROW><ROW><id>11486650</id><snippet>aList == [0]
solver(aList)
  next(...)
    next(...)
      next(...)
        next(...) 
          #SOLVED
        &lt;- next(...)
      &lt;- next(...)
    &lt;- next(...)
  &lt;- next(...)
&lt;-solver(aList)
aList == [10]
</snippet></ROW><ROW><id>11486650</id><snippet>aList == [0]
solver(aList)
  next(...)
    next(...)
      # SOLVED
      next(...)
        next(...) 
          ...
        &lt;- next(...)
      &lt;- next(...)
    &lt;- next(...)
  &lt;- next(...)
&lt;-solver(aList)
aList == [10]
</snippet></ROW><ROW><id>11486775</id><snippet>hasattr</snippet></ROW><ROW><id>11486775</id><snippet>if hasattr(settings, 'name_of_setting'):
    # the setting exists
else:
    # the setting does not exist
</snippet></ROW><ROW><id>11486836</id><snippet>&gt;&gt;&gt; funcs = []
&gt;&gt;&gt; for x in range(10):
...     def foo():
...         return x
...     funcs.append(foo)
... 
&gt;&gt;&gt; [f() for f in funcs]
[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
</snippet></ROW><ROW><id>11486836</id><snippet>for</snippet></ROW><ROW><id>11486836</id><snippet>x == 9</snippet></ROW><ROW><id>11486836</id><snippet>    threading.Thread(target=lambda: see(i)).start()
</snippet></ROW><ROW><id>11486836</id><snippet>    threading.Thread(target=lambda x=i: see(x)).start()
</snippet></ROW><ROW><id>11486836</id><snippet>Thread</snippet></ROW><ROW><id>11486836</id><snippet>    threading.Thread(target=see, args=(i,)).start()
</snippet></ROW><ROW><id>11487016</id><snippet>line.rstrip().split(",")</snippet></ROW><ROW><id>11487016</id><snippet>split</snippet></ROW><ROW><id>11487051</id><snippet>class Person:
  def __init__ (self, Name, Address, Phone, Height, Weight):
    self.name = Name
    self. Address = Address
    self.Phone = Phone
    self.Height = int(Height) # note
    self.Weight = int(Weight) # note
    self.PoundserPerInch = Height / Weight
</snippet></ROW><ROW><id>11487051</id><snippet>&gt;&gt;&gt; int(3)
3
&gt;&gt;&gt; int(3.14)
3
&gt;&gt;&gt; int("3")
3
</snippet></ROW><ROW><id>11487104</id><snippet>    listoflists.append((list[:], list[0]))
</snippet></ROW><ROW><id>11487104</id><snippet>list</snippet></ROW><ROW><id>11487104</id><snippet>list</snippet></ROW><ROW><id>11487104</id><snippet>listoflists = []
a_list = []
for i in range(0,10):
    a_list.append(i)
    if len(a_list)&gt;3:
        a_list.remove(a_list[0])
        listoflists.append((list(a_list), a_list[0]))
print listoflists
</snippet></ROW><ROW><id>11487104</id><snippet>[:]</snippet></ROW><ROW><id>11487104</id><snippet>list()</snippet></ROW><ROW><id>11487104</id><snippet>[:]</snippet></ROW><ROW><id>11487104</id><snippet>list()</snippet></ROW><ROW><id>11487104</id><snippet>list</snippet></ROW><ROW><id>11487119</id><snippet>&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; t = Timer('[x for x in l[::-1]]', 'l = list(range(100000))')
&gt;&gt;&gt; t.timeit(number=1000)
5.549649953842163
&gt;&gt;&gt; t = Timer('l.reverse(); [x for x in l]', 'l = list(range(100000))')
&gt;&gt;&gt; t.timeit(number=1000)
4.548457145690918
&gt;&gt;&gt; t = Timer('[x for x in reversed(l)]', 'l = list(range(100000))')
&gt;&gt;&gt; t.timeit(number=1000)
4.428632974624634
</snippet></ROW><ROW><id>11487119</id><snippet>l[::-1]</snippet></ROW><ROW><id>11487119</id><snippet>reversed()</snippet></ROW><ROW><id>11487132</id><snippet>fab -f host-test.py foo
[98.98.98.98] Executing task 'foo'
98.98.98.98
98.98.98.98

Done.
</snippet></ROW><ROW><id>11487132</id><snippet>#!/user/bin/env python

from fabric.api import *

env.user = 'mgoose'

@task
@hosts("98.98.98.98")
def foo():
    print(env.host)
    print(env.host_string)
</snippet></ROW><ROW><id>11487201</id><snippet>\x00</snippet></ROW><ROW><id>11487201</id><snippet>&gt;&gt;&gt; length = "\x00\x00\x0c"
&gt;&gt;&gt; struct.unpack('&gt;I', '\x00' + length)
(12,)
</snippet></ROW><ROW><id>11487249</id><snippet>offset or payload is None</snippet></ROW><ROW><id>11487249</id><snippet>if offset is None or payload is None:
</snippet></ROW><ROW><id>11487249</id><snippet>if offset is not None and payload is not None:
    out_buf.write(two_byte_proc(payload, offset))
</snippet></ROW><ROW><id>11487249</id><snippet>offset</snippet></ROW><ROW><id>11487249</id><snippet>payload</snippet></ROW><ROW><id>11487249</id><snippet>if offset and payload:
    out_buf.write(two_byte_proc(payload, offset))
</snippet></ROW><ROW><id>11487249</id><snippet>two_byte_proc</snippet></ROW><ROW><id>11487249</id><snippet>four_byte_proc</snippet></ROW><ROW><id>11487332</id><snippet>inlay = img.crop((x1,y1,x2,y2)).rotate(90)
img.paste(inlay, (x1,y1,x2,y2))
</snippet></ROW><ROW><id>11487364</id><snippet>x</snippet></ROW><ROW><id>11487364</id><snippet>y</snippet></ROW><ROW><id>11487364</id><snippet>PythonXyz</snippet></ROW><ROW><id>11487364</id><snippet>list</snippet></ROW><ROW><id>11487413</id><snippet>child = filter(lambda ch: ch.name == path[0], self._children)[0]
</snippet></ROW><ROW><id>11487413</id><snippet>self._children</snippet></ROW><ROW><id>11487413</id><snippet>lambda ch: ch.name == path[0]</snippet></ROW><ROW><id>11487413</id><snippet>True</snippet></ROW><ROW><id>11487413</id><snippet>False</snippet></ROW><ROW><id>11487428</id><snippet>&gt;&gt;&gt; re.sub(r'Expires=.*?GMT([,;]|$)', '', s)
'Cole_gal_langid=0;  Cole_gal_styleid=4;  Cole_gal_viewid=test;  Cole_gal_appid=gal;  Cole_gal_navk=common.invalidBookmark;  Cole_gal_trans=InvalidBookmark; '
</snippet></ROW><ROW><id>11487429</id><snippet>.commit()</snippet></ROW><ROW><id>11487429</id><snippet># Your cursor is c
# We don't see your connection object, but assuming it is conn...
c.execute("""UPDATE timeid SET timestamp = %d;""", timeup)
conn.commit()
</snippet></ROW><ROW><id>11487429</id><snippet>%s</snippet></ROW><ROW><id>11487429</id><snippet>c.execute("UPDATE timeid SET timestamp = %s;", (timeup,))
conn.commit()
</snippet></ROW><ROW><id>11487429</id><snippet>try/except</snippet></ROW><ROW><id>11487494</id><snippet>float()</snippet></ROW><ROW><id>11487494</id><snippet>&gt;&gt;&gt; acos(5e100)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: math domain error
</snippet></ROW><ROW><id>11487494</id><snippet>fmod()</snippet></ROW><ROW><id>11487494</id><snippet>ValueError</snippet></ROW><ROW><id>11487494</id><snippet>ceil()</snippet></ROW><ROW><id>11487494</id><snippet>floor()</snippet></ROW><ROW><id>11487494</id><snippet>round()</snippet></ROW><ROW><id>11487494</id><snippet>inf</snippet></ROW><ROW><id>11487494</id><snippet>degrees()</snippet></ROW><ROW><id>11487494</id><snippet>log()</snippet></ROW><ROW><id>11487494</id><snippet>log10()</snippet></ROW><ROW><id>11487494</id><snippet>pow()</snippet></ROW><ROW><id>11487494</id><snippet>sqrt()</snippet></ROW><ROW><id>11487494</id><snippet>fabs()</snippet></ROW><ROW><id>11487494</id><snippet>hypot()</snippet></ROW><ROW><id>11487494</id><snippet>radians()</snippet></ROW><ROW><id>11487494</id><snippet>exp()</snippet></ROW><ROW><id>11487494</id><snippet>OverflowError</snippet></ROW><ROW><id>11487494</id><snippet>inf</snippet></ROW><ROW><id>11487494</id><snippet>atan2()</snippet></ROW><ROW><id>11487494</id><snippet>OverflowError</snippet></ROW><ROW><id>11487494</id><snippet>inf</snippet></ROW><ROW><id>11487494</id><snippet>&gt;&gt;&gt; float(10) ** float(100) ** float(100) ** float(1000)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: (34, 'Numerical result out of range')
&gt;&gt;&gt; float(5e500) * float(4e1000)
inf
</snippet></ROW><ROW><id>11487494</id><snippet>safe_dict</snippet></ROW><ROW><id>11487494</id><snippet>import sys

def factorial(n):
    fact = 1
    while (n &gt; 0):
        fact = float(fact) * float(n)
        n -= float(1)
        if float(fact) &gt; sys.float_info.max:
            return "Too big"
    return str(fact)

print factorial(50e500)
</snippet></ROW><ROW><id>11487494</id><snippet>float()</snippet></ROW><ROW><id>11487494</id><snippet>float()</snippet></ROW><ROW><id>11487586</id><snippet>appname</snippet></ROW><ROW><id>11487586</id><snippet>from appname.models import Event
</snippet></ROW><ROW><id>11487609</id><snippet>xbot.py</snippet></ROW><ROW><id>11487609</id><snippet>creator</snippet></ROW><ROW><id>11487609</id><snippet>xbot.py</snippet></ROW><ROW><id>11487609</id><snippet>import util</snippet></ROW><ROW><id>11487609</id><snippet>C:\Users\Luke\Python stuff\AXBot\creator&gt;xbot.py
Traceback (most recent call last):
  File "C:\Users\Luke\Python stuff\AXBot\creator\xbot.py", line 4, in &lt;module&gt;
    import util
ImportError: No module named util
</snippet></ROW><ROW><id>11487609</id><snippet>xbot.py</snippet></ROW><ROW><id>11487609</id><snippet>from . import util</snippet></ROW><ROW><id>11487609</id><snippet>C:\Users\Luke\Python stuff\AXBot\creator&gt;xbot.py
Traceback (most recent call last):
  File "C:\Users\Luke\Python stuff\AXBot\creator\xbot.py", line 3, in &lt;module&gt;
    from . import util
ValueError: Attempted relative import in non-package
</snippet></ROW><ROW><id>11487609</id><snippet>from .. import util</snippet></ROW><ROW><id>11487609</id><snippet>from . import util</snippet></ROW><ROW><id>11487609</id><snippet>xbot.py</snippet></ROW><ROW><id>11487609</id><snippet>xbot.py</snippet></ROW><ROW><id>11487609</id><snippet>util</snippet></ROW><ROW><id>11487609</id><snippet>from AXBot import util</snippet></ROW><ROW><id>11487609</id><snippet>xbot.py</snippet></ROW><ROW><id>11487609</id><snippet>-m</snippet></ROW><ROW><id>11487609</id><snippet>-m</snippet></ROW><ROW><id>11487609</id><snippet>.py</snippet></ROW><ROW><id>11487609</id><snippet>C:\Users\Luke\Python stuff\AXBot\creator&gt;cd ..\..

C:\Users\Luke\Python stuff&gt;python -m AXBot.creator.xbot
1232
</snippet></ROW><ROW><id>11487609</id><snippet>import AXBot.util as util</snippet></ROW><ROW><id>11487609</id><snippet>from AXBot import util</snippet></ROW><ROW><id>11487609</id><snippet>util.py</snippet></ROW><ROW><id>11487609</id><snippet>xbot.py</snippet></ROW><ROW><id>11487609</id><snippet>1232</snippet></ROW><ROW><id>11487743</id><snippet>file</snippet></ROW><ROW><id>11487743</id><snippet>file</snippet></ROW><ROW><id>11487743</id><snippet>file</snippet></ROW><ROW><id>11487743</id><snippet>&gt;&gt;&gt; file
&lt;type 'file'&gt;
&gt;&gt;&gt; file.write("3")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor 'write' requires a 'file' object but received a 'str'
</snippet></ROW><ROW><id>11487743</id><snippet>file</snippet></ROW><ROW><id>11487743</id><snippet>file</snippet></ROW><ROW><id>11487743</id><snippet>"file"</snippet></ROW><ROW><id>11487743</id><snippet>ftp.retrbinary('RETR ' + filename, file.write)
</snippet></ROW><ROW><id>11487743</id><snippet>handleDownload</snippet></ROW><ROW><id>11487743</id><snippet>def handleDownloadMaker(openfile):
    def handleDownload(block):
        openfile.write(block)
        print ".",
    return handleDownload
</snippet></ROW><ROW><id>11487743</id><snippet>ftp.retrbinary('RETR' + filename, handleDownloadMaker(file))
</snippet></ROW><ROW><id>11488144</id><snippet>while True</snippet></ROW><ROW><id>11488144</id><snippet>PixelArray</snippet></ROW><ROW><id>11488148</id><snippet>sys.exit</snippet></ROW><ROW><id>11488155</id><snippet>input</snippet></ROW><ROW><id>11488155</id><snippet>input</snippet></ROW><ROW><id>11488155</id><snippet>raw_input</snippet></ROW><ROW><id>11488155</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>11488155</id><snippet>import ast
x = ast.literal_eval(stdin.readline())
</snippet></ROW><ROW><id>11488237</id><snippet>a = { 'name': 'Jack',
  'age': 24,
  'friends': ['Bob', 'Alice', 'Karen'],
}

b = { 'name': 'Jack',
  'favorite_color': 'blue',
  'friends': ['Daren'],
}

for key in a.keys():
    if key in b:
        if hasattr(a[key], 'extend'):
            a[key].extend(b[key])
        else:
            a[key] = b[key]

print a
</snippet></ROW><ROW><id>11488237</id><snippet>{'age': 24, 'friends': ['Bob', 'Alice', 'Karen', 'Daren'], 'name': 'Jack'}
</snippet></ROW><ROW><id>11488237</id><snippet>a</snippet></ROW><ROW><id>11488237</id><snippet>b</snippet></ROW><ROW><id>11488237</id><snippet>b['friends']</snippet></ROW><ROW><id>11488488</id><snippet>$ python2.6
&gt;&gt;&gt; mylist = [20, 30, 25, 20]
&gt;&gt;&gt; {x for x in mylist if mylist.count(x) &gt;= 2}
  File "&lt;stdin&gt;", line 1
    {x for x in mylist if mylist.count(x) &gt;= 2}
         ^
SyntaxError: invalid syntax

$ python2.7
&gt;&gt;&gt; mylist = [20, 30, 25, 20]
&gt;&gt;&gt; {x for x in mylist if mylist.count(x) &gt;= 2}
set([20])
</snippet></ROW><ROW><id>11488488</id><snippet>set</snippet></ROW><ROW><id>11488488</id><snippet>generator</snippet></ROW><ROW><id>11488488</id><snippet>&gt;&gt;&gt; set(x for x in mylist if mylist.count(x) &gt;= 2)
set([20])
</snippet></ROW><ROW><id>11488515</id><snippet>self</snippet></ROW><ROW><id>11488515</id><snippet>class MyTopWindow:

    def __init__(self):
        self.widget1 = Widget
        self.widget2 = Widget
        self.button = Button

        #self.button.clicked -&gt; self.handler   

    def handler(self):
        self.widget1.someAttribute = 1

button.click() # -&gt; handler()
</snippet></ROW><ROW><id>11488528</id><snippet>1/3</snippet></ROW><ROW><id>11488528</id><snippet>1.0/3.0
</snippet></ROW><ROW><id>11488528</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>11488528</id><snippet>/</snippet></ROW><ROW><id>11488528</id><snippet>//</snippet></ROW><ROW><id>11488807</id><snippet>TemplateDoesNotExist</snippet></ROW><ROW><id>11488807</id><snippet>from google.appengine.ext.webapp import template</snippet></ROW><ROW><id>11488807</id><snippet>_PYTHON27_DEPRECATION = (
'google.appengine.ext.webapp.template is deprecated. Please use another '
'templating system such as django.template or jinja2.')
</snippet></ROW><ROW><id>11488902</id><snippet>import threading;

def work (): 
  threading.Timer(0.25, work).start (); 
  print "stackoverflow";

work (); 
</snippet></ROW><ROW><id>11488902</id><snippet>work</snippet></ROW><ROW><id>11488902</id><snippet>threading.Timer</snippet></ROW><ROW><id>11488902</id><snippet>import threading;

def do_every (interval, worker_func, iterations = 0):
  if iterations != 1:
    threading.Timer (
      interval,
      do_every, [interval, worker_func, 0 if iterations == 0 else iterations-1]
    ).start ();

  worker_func ();

def print_hw ():
  print "hello world";

def print_so ():
  print "stackoverflow"


# call print_so every second, 5 times total
do_every (1, print_so, 5);

# call print_hw two times per second, forever
do_every (0.5, print_hw);
</snippet></ROW><ROW><id>11489016</id><snippet>def create_window(self):
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    self.window.set_position(gtk.WIN_POS_CENTER)
    self.window.connect("key-press-event", self.keypress)
    self.window.connect("focus-out-event", self.cancel)
    self.window.connect("destroy", self.cancel)
    self.entry = gtk.Entry(200)
    button = gtk.Button("go")
    button.connect("clicked", self.command)
    box = gtk.HBox()
    box.add(self.entry)
    box.add(button)
    self.window.add(box)
    self.window.set_keep_above(True)
    self.window.show_all()
    gtk.idle_add(self.bring_to_front)

def bring_to_front(self):
    self.window.present()
</snippet></ROW><ROW><id>11489039</id><snippet>def loop():
    x = [1,2,3,4]
    d = defer.succeed(0)
    for i in x:
        d.addCallback(lambda _, i = i : inlineDeferFunc(i))



11111 1
11111 2
11111 3
11111 4
</snippet></ROW><ROW><id>11489039</id><snippet>i = i</snippet></ROW><ROW><id>11489039</id><snippet>lambda</snippet></ROW><ROW><id>11489039</id><snippet>i</snippet></ROW><ROW><id>11489039</id><snippet>for</snippet></ROW><ROW><id>11489039</id><snippet>&gt;&gt;&gt; def test_closures():
...     i = 2
...     def test():
...         return i
...     i = 3
...     return test
... 
&gt;&gt;&gt; test_closures()()
3
</snippet></ROW><ROW><id>11489179</id><snippet>mylist = []
</snippet></ROW><ROW><id>11489179</id><snippet>while</snippet></ROW><ROW><id>11489179</id><snippet>mylist</snippet></ROW><ROW><id>11489179</id><snippet>...
mylist = []
while (n &lt; 20):
   a, b = b, a + b
   n = a+b
   if n%2 == 0:
       mylist.append(n)

print(sum(mylist))
</snippet></ROW><ROW><id>11489335</id><snippet>%</snippet></ROW><ROW><id>11489335</id><snippet>v1 = 55.39
v2 = -1.15
v3 = 6.54
v4 = 0.00

print '%8.2f   %8.2f' % (v1, v2)
print '%8.2f   %8.2f' % (v3, v4)
</snippet></ROW><ROW><id>11489335</id><snippet>   55.39      -1.15
    6.54       0.00
</snippet></ROW><ROW><id>11489335</id><snippet>print '{:8.2f}  {:8.2f}'.format(v1, v2)
print '{:8.2f}  {:8.2f}'.format(v3, v4)
</snippet></ROW><ROW><id>11489335</id><snippet>.format()</snippet></ROW><ROW><id>11489404</id><snippet>main()</snippet></ROW><ROW><id>11489404</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>11489404</id><snippet>main()</snippet></ROW><ROW><id>11489404</id><snippet>if</snippet></ROW><ROW><id>11489404</id><snippet>object</snippet></ROW><ROW><id>11489404</id><snippet>object</snippet></ROW><ROW><id>11489404</id><snippet>set</snippet></ROW><ROW><id>11489404</id><snippet>import test2

if __name__ == '__main__':
  st = 'a'
  mis = input('puts: ')

  print tes2.rename_me_set(st, mis)
</snippet></ROW><ROW><id>11489404</id><snippet>def rename_me_set(st, obj):
  pics = ['''
  %s
  1st
  ''' % st,
  '''
  %s
  2nd
  ''']

  return pics[obj]
</snippet></ROW><ROW><id>11489468</id><snippet>math</snippet></ROW><ROW><id>11489468</id><snippet>import</snippet></ROW><ROW><id>11489468</id><snippet>__import__()</snippet></ROW><ROW><id>11489468</id><snippet>print id(math)</snippet></ROW><ROW><id>11489468</id><snippet>print id(command)</snippet></ROW><ROW><id>11489468</id><snippet>math.py</snippet></ROW><ROW><id>11489468</id><snippet>__import__()</snippet></ROW><ROW><id>11489468</id><snippet>command = __import__("cmd_" + cstr)
</snippet></ROW><ROW><id>11489468</id><snippet>math.py</snippet></ROW><ROW><id>11489468</id><snippet>cmd_math.py</snippet></ROW><ROW><id>11489515</id><snippet>def types(information):
</snippet></ROW><ROW><id>11489515</id><snippet>Information</snippet></ROW><ROW><id>11489515</id><snippet>objects.all()</snippet></ROW><ROW><id>11489652</id><snippet>import inspect
inspect.getsource(random.gauss)
</snippet></ROW><ROW><id>11489834</id><snippet>calendar.timegm</snippet></ROW><ROW><id>11489834</id><snippet>time.strptime</snippet></ROW><ROW><id>11489834</id><snippet>import calendar
import time

# Time in GMT
x = 'Sat Jul 14 22:05:54 2012'
y = time.strptime(x)
z = calendar.timegm(y)
print z # 1342303554 - the number of seconds since epoch
</snippet></ROW><ROW><id>11489941</id><snippet>EmailMultiAlternatives</snippet></ROW><ROW><id>11489941</id><snippet>email.attach_alternative(body_html, 'text/html')</snippet></ROW><ROW><id>11489941</id><snippet>Content-Type: multipart/alternative;</snippet></ROW><ROW><id>11489941</id><snippet>text/html</snippet></ROW><ROW><id>11489941</id><snippet>python -m smtpd -n -c DebuggingServer localhost:25</snippet></ROW><ROW><id>11490192</id><snippet>create table dummy (
    serial_num integer primary key not null,
    name text
);
</snippet></ROW><ROW><id>11490192</id><snippet>not null</snippet></ROW><ROW><id>11490192</id><snippet>insert into dummy (name) values (?)
</snippet></ROW><ROW><id>11490192</id><snippet>serial_num</snippet></ROW><ROW><id>11490192</id><snippet>serial_num</snippet></ROW><ROW><id>11490204</id><snippet>sudo netstat -lnp|grep 2181</snippet></ROW><ROW><id>11490441</id><snippet>input = ['a', 'b', 'b', 'c', 'c', 'd']
mapping = { v:i for (i, v) in enumerate(sorted(set(input))) }
[ [mapping[v], v] for v in input ]
</snippet></ROW><ROW><id>11490441</id><snippet>[ [d.setdefault(v, len(d)), v] for d in [{}] for v in input ]
</snippet></ROW><ROW><id>11490496</id><snippet>Button(root, text = 'all', command = select_all()).pack()
</snippet></ROW><ROW><id>11490496</id><snippet>Button(root, text='all', command=select_all).pack()
</snippet></ROW><ROW><id>11490496</id><snippet>Checkbutton(root, text = i).pack()</snippet></ROW><ROW><id>11490496</id><snippet>None</snippet></ROW><ROW><id>11490496</id><snippet>None</snippet></ROW><ROW><id>11490496</id><snippet>Button</snippet></ROW><ROW><id>11490496</id><snippet>.pack()</snippet></ROW><ROW><id>11490496</id><snippet>None</snippet></ROW><ROW><id>11490650</id><snippet>smtp.gmail.com:587</snippet></ROW><ROW><id>11490650</id><snippet>server = smtplib.SMTP('10.18.93.128:25')
</snippet></ROW><ROW><id>11490650</id><snippet>starttls()</snippet></ROW><ROW><id>11490650</id><snippet>from</snippet></ROW><ROW><id>11490827</id><snippet>x</snippet></ROW><ROW><id>11491154</id><snippet>self.x</snippet></ROW><ROW><id>11491154</id><snippet>p.x</snippet></ROW><ROW><id>11491154</id><snippet>self.x</snippet></ROW><ROW><id>11491154</id><snippet>x</snippet></ROW><ROW><id>11491154</id><snippet>def __init__(self, x=0, y=0):</snippet></ROW><ROW><id>11491228</id><snippet>GET / HTTP/1.0
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</snippet></ROW><ROW><id>11491406</id><snippet>util</snippet></ROW><ROW><id>11491406</id><snippet>utils</snippet></ROW><ROW><id>11491406</id><snippet>myproj.foo</snippet></ROW><ROW><id>11491406</id><snippet>myproj.bar</snippet></ROW><ROW><id>11491406</id><snippet>myproj.util</snippet></ROW><ROW><id>11491406</id><snippet>myproj.util.http</snippet></ROW><ROW><id>11491406</id><snippet>myproj.util.data</snippet></ROW><ROW><id>11491451</id><snippet>from random import choice
for key in total_values:
    total_values[key] = (total_values[key], choice((True, False)))
</snippet></ROW><ROW><id>11491452</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>11491452</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11491452</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>11491452</id><snippet>projectfoldername.settings</snippet></ROW><ROW><id>11491572</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>11491572</id><snippet>django-admin.py startproject mysite</snippet></ROW><ROW><id>11491866</id><snippet>assertRaises</snippet></ROW><ROW><id>11491866</id><snippet>self.assertRaises(TypeError,testable.joiner, (each,eachy))
</snippet></ROW><ROW><id>11491866</id><snippet>with self.assertRaises(TypeError):
     testable.joiner(each,eachy)
</snippet></ROW><ROW><id>11491866</id><snippet>self.seq2 = [1,2,3]</snippet></ROW><ROW><id>11491940</id><snippet>Project
-- manage.py
-- Project
-- -- views.py
-- -- models.py
-- -- others
-- -- APP1
-- -- -- views.py
-- -- -- models.py
-- -- -- others
-- -- APP2
-- -- -- views.py
-- -- -- models.py
-- -- -- others
-- -- APPX
-- -- -- views.py
-- -- -- models.py
-- -- -- others
</snippet></ROW><ROW><id>11491940</id><snippet>&lt;my project&gt;
-- manage.py
-- &lt;project name&gt;
-- -- urls.py
-- -- models.py &lt;--- User model exists in Django and here you can add informations to the defaut model it is in this file because I suppose it will be used in all your project.
-- -- views.py

-- -- blog    &lt;--- It's an app.
-- -- -- -- views.py 
-- -- -- -- urls.py
-- -- -- -- models.py &lt;--- Posts, Comments are models for the blog, so you explain them here.

-- -- tasks   &lt;--- Another app.
-- -- -- attachments
-- -- -- -- views.py
-- -- -- -- urls.py
-- -- -- -- models.py  &lt;--- Task model for exemple
</snippet></ROW><ROW><id>11492110</id><snippet>import html2text # added to my source
numMessages = len(mail.list()[1])
  for i in range(numMessages):
      for j in mail.retr(i+1)[1]:

          msg = email.message_from_string(html2text.html2text(j)) 
          print msg.get_payload(decode=False)
</snippet></ROW><ROW><id>11492110</id><snippet>charset="iso-8859-1"











BODY {









}


TD {





}


TH {




}


H1 {



}


TABLE,IMG,A {



}










**PO Number:** 35170




**Ship To:**


Tami Curtis


67 E. Spring Creek Pkwy

Providence, UT 84332


4357553197









SKU


Product


Qty






JJ-Panel-Isabella-BK-PRT


Isabella Black Damask Curtains (2 Panels)


1
</snippet></ROW><ROW><id>11492144</id><snippet>def getLine(data, line_no):
    index = -1
    for _ in range(line_no):index = data.index('\n',index+1)
    return data[index+1:data.index('\n',index+1)]
</snippet></ROW><ROW><id>11492312</id><snippet>print 'y' if len(s) &gt; 5 else 'n'
</snippet></ROW><ROW><id>11492312</id><snippet>True</snippet></ROW><ROW><id>11492312</id><snippet>False</snippet></ROW><ROW><id>11492411</id><snippet>x = y = 30
w = h = 100

mask = np.zeros(img.shape[:2],np.uint8)
mask[y:y+h,x:x+w] = 255
res = cv2.bitwise_and(img,img,mask = mask)
</snippet></ROW><ROW><id>11492411</id><snippet>0.16 ms</snippet></ROW><ROW><id>11492411</id><snippet>mask = np.zeros(img.shape,np.uint8)
mask[y:y+h,x:x+w] = img[y:y+h,x:x+w]
</snippet></ROW><ROW><id>11492411</id><snippet>0.032 ms</snippet></ROW><ROW><id>11492411</id><snippet>5 times faster</snippet></ROW><ROW><id>11492527</id><snippet>import scipy.stats as stats

import matplotlib.pyplot as plt
import numpy as np
import numpy.random as rnd

#plot the original distribution
xrng=np.arange(-10,10,.1)
yrng=stats.logistic.pdf(xrng)
plt.plot(xrng,yrng)

#plot the truncated distribution
nrm=stats.logistic.cdf(1)-stats.logistic.cdf(0)
xrng=np.arange(0,1,.01)
yrng=stats.logistic.pdf(xrng)/nrm
plt.plot(xrng,yrng)

#sample using the inverse cdf
yr=rnd.rand(100000)*(nrm)+stats.logistic.cdf(0)
xr=stats.logistic.ppf(yr)
plt.hist(xr,normed=True)

plt.show()
</snippet></ROW><ROW><id>11492675</id><snippet>c:\Python27\Scripts</snippet></ROW><ROW><id>11492675</id><snippet>coverage</snippet></ROW><ROW><id>11492690</id><snippet>content.append(info)</snippet></ROW><ROW><id>11492690</id><snippet>for iframe in soup.find_all('iframe'):
   info = {}
    ...
</snippet></ROW><ROW><id>11492690</id><snippet>for iframe in soup.find_all('iframe'):
    info = {
        "src":    iframe.get('src'),
        "height": iframe.get('height'),
        "width":  iframe.get('width'),
    }
    content.append(info)
</snippet></ROW><ROW><id>11492771</id><snippet>df</snippet></ROW><ROW><id>11492771</id><snippet>&gt;&gt;&gt; from pandas import *
&gt;&gt;&gt; df = DataFrame( np.random.randn(5,3), index = list( "ABCDE"), columns = list("abc") )
&gt;&gt;&gt; df.groupby(lambda x: True).agg({'a' : np.sum, 'b' : np.mean } )
             a         b
True  1.836649 -0.692655
&gt;&gt;&gt; 
&gt;&gt;&gt; df['total'] = 'total'
&gt;&gt;&gt; df.groupby(['total']).agg({'a' : np.sum, 'b' : np.mean } ) 
              a         b
total                    
total  1.836649 -0.692655
</snippet></ROW><ROW><id>11492771</id><snippet>lambda x: True</snippet></ROW><ROW><id>11492946</id><snippet>ProjectEulerFive</snippet></ROW><ROW><id>11492946</id><snippet>find_solution</snippet></ROW><ROW><id>11492946</id><snippet>dis.dis</snippet></ROW><ROW><id>11492946</id><snippet>&gt;&gt;&gt; dis.dis(ProjectEulerFive)
  2           0 LOAD_FAST                0 (m)
              3 STORE_FAST               1 (a)

  3           6 LOAD_CONST               1 (11)
              9 STORE_FAST               2 (start)

  4          12 LOAD_FAST                2 (start)
             15 STORE_FAST               3 (b)

  5          18 SETUP_LOOP              64 (to 85)
        &gt;&gt;   21 LOAD_FAST                3 (b)
             24 LOAD_FAST                0 (m)
             27 COMPARE_OP               0 (&lt;)
             30 POP_JUMP_IF_FALSE       84

  6          33 LOAD_FAST                1 (a)
             36 LOAD_FAST                3 (b)
             39 BINARY_MODULO       
             40 LOAD_CONST               2 (0)
             43 COMPARE_OP               3 (!=)
             46 POP_JUMP_IF_FALSE       71

  7          49 LOAD_FAST                1 (a)
             52 LOAD_FAST                0 (m)
             55 INPLACE_ADD         
             56 STORE_FAST               1 (a)

  8          59 LOAD_FAST                2 (start)
             62 STORE_FAST               3 (b)

  9          65 JUMP_ABSOLUTE           21
             68 JUMP_ABSOLUTE           21

 11     &gt;&gt;   71 LOAD_FAST                3 (b)
             74 LOAD_CONST               3 (1)
             77 INPLACE_ADD         
             78 STORE_FAST               3 (b)
             81 JUMP_ABSOLUTE           21
        &gt;&gt;   84 POP_BLOCK           

 12     &gt;&gt;   85 LOAD_FAST                1 (a)
             88 RETURN_VALUE        
</snippet></ROW><ROW><id>11492946</id><snippet>find_solution</snippet></ROW><ROW><id>11492946</id><snippet>&gt;&gt;&gt; dis.dis(find_solution)
  2           0 SETUP_LOOP              58 (to 61)
              3 LOAD_GLOBAL              0 (xrange)
              6 LOAD_FAST                0 (step)
              9 LOAD_CONST               1 (999999999)
             12 LOAD_FAST                0 (step)
             15 CALL_FUNCTION            3
             18 GET_ITER            
        &gt;&gt;   19 FOR_ITER                38 (to 60)
             22 STORE_DEREF              0 (num)

  3          25 LOAD_GLOBAL              1 (all)
             28 LOAD_CLOSURE             0 (num)
             31 BUILD_TUPLE              1
             34 LOAD_CONST               2 (&lt;code object &lt;genexpr&gt; at 
                                            0x10027eeb0, file "&lt;stdin&gt;", 
                                            line 3&gt;)
             37 MAKE_CLOSURE             0
             40 LOAD_GLOBAL              2 (check_list)
             43 GET_ITER            
             44 CALL_FUNCTION            1
             47 CALL_FUNCTION            1
             50 POP_JUMP_IF_FALSE       19

  4          53 LOAD_DEREF               0 (num)
             56 RETURN_VALUE        
             57 JUMP_ABSOLUTE           19
        &gt;&gt;   60 POP_BLOCK           

  5     &gt;&gt;   61 LOAD_CONST               0 (None)
             64 RETURN_VALUE        
</snippet></ROW><ROW><id>11492946</id><snippet>xrange</snippet></ROW><ROW><id>11492946</id><snippet>all</snippet></ROW><ROW><id>11492946</id><snippet>next</snippet></ROW><ROW><id>11492946</id><snippet>232792560 / 20 == 11639628</snippet></ROW><ROW><id>11492946</id><snippet>%timeit</snippet></ROW><ROW><id>11492946</id><snippet>ipython</snippet></ROW><ROW><id>11492946</id><snippet>&gt;&gt;&gt; def no_call():
...     pass
... 
&gt;&gt;&gt; def calling():
...     no_call()
...     
&gt;&gt;&gt; %timeit no_call()
10000000 loops, best of 3: 107 ns per loop
&gt;&gt;&gt; %timeit calling()
1000000 loops, best of 3: 235 ns per loop
</snippet></ROW><ROW><id>11492946</id><snippet>120 nanoseconds * 11000000 = 1.32 seconds</snippet></ROW><ROW><id>11492946</id><snippet>next</snippet></ROW><ROW><id>11492946</id><snippet>def find_solution(step):
    for num in xrange(step, 999999999, step):
        for n in check_list:
            if num % n != 0:
                break
        else:
            return num
    return None
</snippet></ROW><ROW><id>11492946</id><snippet>find_solution</snippet></ROW><ROW><id>11492946</id><snippet>for/else</snippet></ROW><ROW><id>11492946</id><snippet>xrange</snippet></ROW><ROW><id>11492946</id><snippet>found an answer: 232792560
took 11.2349967957 seconds
</snippet></ROW><ROW><id>11492946</id><snippet>found an answer: 232792560
took 2.12648200989 seconds
</snippet></ROW><ROW><id>11492946</id><snippet>ProjectEulerFive</snippet></ROW><ROW><id>11492946</id><snippet>232792560
took 2.40848493576 seconds
</snippet></ROW><ROW><id>11493077</id><snippet>ListCtrl</snippet></ROW><ROW><id>11493077</id><snippet>wx.LC_LIST</snippet></ROW><ROW><id>11493077</id><snippet>ListBox</snippet></ROW><ROW><id>11493570</id><snippet>$ pip install supervisor
$ echo_supervisord_conf &gt; /etc/supervisord.conf
</snippet></ROW><ROW><id>11493570</id><snippet>  [program:mycoolproc]
  directory=/path/to/my/script/dir
  command=python MyXmlrpcServer.py
</snippet></ROW><ROW><id>11493570</id><snippet>$ supervisord
$ supervisorctl start mycoolproc
</snippet></ROW><ROW><id>11493677</id><snippet>apt-get install build-essential python-dev</snippet></ROW><ROW><id>11493727</id><snippet>user_re = re.compile('&lt;a href(="/(?!(?:user/)?[0-9]+").+)"')

In [74]: [(url,user_re.match(url) and user_re.match(url).group(1)) for url in 
                 ['&lt;a href="/user/15594243"&gt;',
                  '&lt;a href="/user/15594243_"&gt;',
                  '&lt;a href="/user/user15594243"&gt;',
                  '&lt;a href="/user/1"&gt;',
                  '&lt;a href="/user/15594243/add"&gt;',
                  '&lt;a href="/item/15594243"&gt;',
                  '&lt;a href="/a"',
                  '&lt;a href="/15594243"&gt;']]
Out[74]: 
[('&lt;a href="/user/15594243"&gt;', None),
 ('&lt;a href="/user/15594243_"&gt;', '="/user/15594243_'),
 ('&lt;a href="/user/user15594243"&gt;', '="/user/user15594243'),
 ('&lt;a href="/user/1"&gt;', None),
 ('&lt;a href="/user/15594243/add"&gt;', '="/user/15594243/add'),
 ('&lt;a href="/item/15594243"&gt;', '="/item/15594243'),
 ('&lt;a href="/a"', '="/a'),
 ('&lt;a href="/15594243"&gt;', None)]
</snippet></ROW><ROW><id>11493847</id><snippet>__init__</snippet></ROW><ROW><id>11493847</id><snippet>__del__</snippet></ROW><ROW><id>11493847</id><snippet>with</snippet></ROW><ROW><id>11493847</id><snippet>template &lt;typename T&gt;
class B {
public:
    B(T&amp; _t) : t(_t){
        t.bind();
    }
    ~B() {
        t.release();
    }
    T&amp; t;
}
</snippet></ROW><ROW><id>11493847</id><snippet>{
    B&lt;X&gt; bound_x(x);  // x.bind is called
    B&lt;Y&gt; bound_y(y);  // y.bind is called
    // use x and y here
} // bound_x and bound_y is destroyed here 
  // so x.release and y.release is called    
</snippet></ROW><ROW><id>11493877</id><snippet># the txt file I'm trying to extract last words from and write strings into a file
#Hello:there:buddy
#How:areyou:doing
#I:amFine:thanks
#thats:good:I:guess
</snippet></ROW><ROW><id>11493877</id><snippet>x = raw_input("Enter the full path + file name + file extension you wish to use: ")
</snippet></ROW><ROW><id>11493877</id><snippet>ripple</snippet></ROW><ROW><id>11493877</id><snippet>x</snippet></ROW><ROW><id>11493877</id><snippet>file_loc</snippet></ROW><ROW><id>11493877</id><snippet>def ripple(x):
  with open(x) as file:
</snippet></ROW><ROW><id>11493877</id><snippet>open</snippet></ROW><ROW><id>11493877</id><snippet>with open(file_loc, 'r') as r:</snippet></ROW><ROW><id>11493877</id><snippet>r.foo</snippet></ROW><ROW><id>11493877</id><snippet>    for line in file:
      for word in line.split():
        if ':' in word:
</snippet></ROW><ROW><id>11493877</id><snippet>for word in line.split()</snippet></ROW><ROW><id>11493877</id><snippet>["Hello:there:buddy"]</snippet></ROW><ROW><id>11493877</id><snippet>split</snippet></ROW><ROW><id>11493877</id><snippet>"Hello:there:buddy".split(":")</snippet></ROW><ROW><id>11493877</id><snippet>['Hello', 'there', 'buddy']</snippet></ROW><ROW><id>11493877</id><snippet>          try:
            print word.split(':')[-1]
          except (IndexError):
            pass 
</snippet></ROW><ROW><id>11493877</id><snippet>IndexError</snippet></ROW><ROW><id>11493877</id><snippet>ripple(x) 
</snippet></ROW><ROW><id>11493877</id><snippet>ripple(x)</snippet></ROW><ROW><id>11493877</id><snippet>ripple('/home/user/sometext.txt')</snippet></ROW><ROW><id>11493877</id><snippet>import os #for renaming the output file

def ripple(file_loc='/typical/location/while/developing.txt'):
    outfile = "output.".join(os.path.basename(file_loc).split('.'))

    with open(outfile, 'w') as w:
        lines = open(file_loc, 'r').readlines() #everything is one giant list
        w.write('\n'.join([line.split(':')[-1] for line in lines]))

ripple()
</snippet></ROW><ROW><id>11493971</id><snippet>def __init__(self, parent):
    super(MainController, self).__init__(parent)
    ...
</snippet></ROW><ROW><id>11494174</id><snippet>please_die = threading.Event()

# in handler
please_die.set()

# in main thread
please_die.wait()
httpd.shutdown()
</snippet></ROW><ROW><id>11494363</id><snippet>mysql&gt; create database myproject;
</snippet></ROW><ROW><id>11494598</id><snippet>import C</snippet></ROW><ROW><id>11494598</id><snippet>A</snippet></ROW><ROW><id>11494598</id><snippet>from C import blahBlah</snippet></ROW><ROW><id>11494598</id><snippet># A.py
from C import blah

# B.py
import A
A.blah # this will work
</snippet></ROW><ROW><id>11494620</id><snippet>set_printoptions</snippet></ROW><ROW><id>11494620</id><snippet>&gt;&gt;&gt; a = numpy.arange(10, dtype='f8')
&gt;&gt;&gt; a /= 100000
&gt;&gt;&gt; a
array([  0.00000000e+00,   1.00000000e-05,   2.00000000e-05,
         3.00000000e-05,   4.00000000e-05,   5.00000000e-05,
         6.00000000e-05,   7.00000000e-05,   8.00000000e-05,
         9.00000000e-05])
&gt;&gt;&gt; numpy.set_printoptions(suppress=True)
&gt;&gt;&gt; a
array([ 0.     ,  0.00001,  0.00002,  0.00003,  0.00004,  0.00005,
        0.00006,  0.00007,  0.00008,  0.00009])
</snippet></ROW><ROW><id>11494759</id><snippet>pip</snippet></ROW><ROW><id>11494759</id><snippet>easy_install pip</snippet></ROW><ROW><id>11494759</id><snippet>pip install django</snippet></ROW><ROW><id>11495061</id><snippet>&gt;&gt;&gt; def func(foo, bar):
...   print foo, bar
... 
&gt;&gt;&gt; func(bar='quux', foo=42)
42 quux
</snippet></ROW><ROW><id>11495086</id><snippet>lm( y ~ x - 1, data)
</snippet></ROW><ROW><id>11495086</id><snippet>lm(num_rx ~ ridageyr - 1, data=demoq)
</snippet></ROW><ROW><id>11495168</id><snippet>'    def find_nodes(graph):'
'        # get the distinct nodes from the edges'
'        nodes = []'
'        l = len(graph)'
'        for i in range(l):'
'        \tedge = graph[i]'
'        \tn1 = edge[0]'
'        \tn2 = edge[1]'
'        \tif n1 not in nodes:'
'        \t\tnodes.append(n1)'
'        \tif n2 not in nodes:'
'        \t\tnodes.append(n2)'
'    \treturn nodes'
</snippet></ROW><ROW><id>11495168</id><snippet>&gt;&gt;&gt; s = """
...     def find_nodes(graph):
...         # get the distinct nodes from the edges
...         nodes = []
...         l = len(graph)
...         for i in range(l):
...             edge = graph[i]
...             n1 = edge[0]
...             n2 = edge[1]
...             if n1 not in nodes:
...                     nodes.append(n1)
...             if n2 not in nodes:
...                     nodes.append(n2)
...             return nodes
...     
...     graph = ((1,2),(2,3), (3,1))
...     print find_nodes(graph)
... 
... """
</snippet></ROW><ROW><id>11495168</id><snippet>return nodes</snippet></ROW><ROW><id>11495168</id><snippet>python -tt</snippet></ROW><ROW><id>11495415</id><snippet>image/svg+xml</snippet></ROW><ROW><id>11495415</id><snippet>import mimetypes

mimetypes.add_type('image/svg+xml', '.svg')
#                        ^ no s
</snippet></ROW><ROW><id>11495486</id><snippet>setuptools</snippet></ROW><ROW><id>11495486</id><snippet>pkg_resources</snippet></ROW><ROW><id>11495486</id><snippet>docutils &gt;= 0.3

# comment lines and \ continuations are allowed in requirement strings
BazSpam ==1.1, ==1.2, ==1.3, ==1.4, ==1.5, \
    ==1.6, ==1.7  # and so are line-end comments
</snippet></ROW><ROW><id>11495486</id><snippet>docutils</snippet></ROW><ROW><id>11495486</id><snippet>docutils &gt;= 0.3, &lt;=0.5
</snippet></ROW><ROW><id>11495486</id><snippet>docutils &gt;= 0.3, &gt;=0.2</snippet></ROW><ROW><id>11495486</id><snippet>docutils &gt;= 0.3</snippet></ROW><ROW><id>11495486</id><snippet>docutils &gt;= 0.3, &lt;=0.2</snippet></ROW><ROW><id>11495494</id><snippet>s = "(your data as a single multiline string)"

datalines = lambda s: [ln for ln in (line.strip() for line in s.splitlines()) if ln]

_, _, po_number, _, rem = s.split('**')
shipto, data = rem.split('SKU', 1)

po_number = datalines(po_number)[0]
shipto    = '\n'.join(datalines(shipto))
data      = datalines(data)[2:]

res = [[po_number, shipto, sku, prod, qty] for sku,prod,qty in zip(*([iter(data)]*3))]
</snippet></ROW><ROW><id>11495494</id><snippet>[
    ['35102', 'Georgie Clements\n6902 Stonegate Drive\nOdessa, TX 79765\n432-363-8459', 'JJ-Rug-Zebra-PK', 'Zebra Pink Rug', '1'],
    ['35102', 'Georgie Clements\n6902 Stonegate Drive\nOdessa, TX 79765\n432-363-8459', 'JJ-Zebra-PK-Twin-4', 'Zebra Pink 4 Piece Twin Comforter Set', '1'],
    ['35102', 'Georgie Clements\n6902 Stonegate Drive\nOdessa, TX 79765\n432-363-8459', 'JJ-TwinSheets-Zebra-PK', 'Zebra Pink 3 Piece Twin Sheet Set', '1'],
    ['35102', 'Georgie Clements\n6902 Stonegate Drive\nOdessa, TX 79765\n432-363-8459', 'JJ-Memo-Zebra-PK', 'Zebra Pink Memory Board', '1']
</snippet></ROW><ROW><id>11495494</id><snippet>[
    ['35104', 'Angelica Alvarado\n669 66th St.\nSpringfield, OR 97478\n5412322525', 'JJ-CribSheet-Cheetah-PK-PRT', 'Cheetah Pink Print Microsuede Crib Sheet', '1']
]
</snippet></ROW><ROW><id>11495778</id><snippet>def nearby_grid_points(x, y, r=1):
    res = []
    for dy in xrange(-r, r+1):
        res.append([(x+dx, y+dy) for dx in xrange(-r, r+1)])
    return res
</snippet></ROW><ROW><id>11495784</id><snippet>subprocess.STDOUT</snippet></ROW><ROW><id>11495784</id><snippet>-1</snippet></ROW><ROW><id>11495784</id><snippet>stderr=subprocess.STDOUT</snippet></ROW><ROW><id>11495784</id><snippet>subprocess.STDOUT</snippet></ROW><ROW><id>11495784</id><snippet>$ python &gt;/dev/null -c 'import subprocess,sys;subprocess.call(["ls", "/404"],
                        stderr=sys.stdout.buffer)'
</snippet></ROW><ROW><id>11495784</id><snippet>$ python &gt;/dev/null -c 'import subprocess,sys;subprocess.call(["ls", "/404"],
                        stderr=sys.stdout.fileno())'
</snippet></ROW><ROW><id>11495935</id><snippet>p.hp - 10
</snippet></ROW><ROW><id>11495935</id><snippet>p.hp = p.hp - 10
</snippet></ROW><ROW><id>11495935</id><snippet>p.hp -= 10
</snippet></ROW><ROW><id>11495940</id><snippet>textwrap.fill(''.join(makeList[start-1:end],width = 60)
#            ^       ^                                ^
</snippet></ROW><ROW><id>11495940</id><snippet>textwrap.fill(''.join(makeList[start-1:end]),width = 60)
</snippet></ROW><ROW><id>11495984</id><snippet>.ix[]</snippet></ROW><ROW><id>11495984</id><snippet># The left-hand-side does not use .ix, since we're assigning into it.
df[['b','c']] = df.ix[:,'e':'f'].copy()
</snippet></ROW><ROW><id>11495984</id><snippet>.copy()</snippet></ROW><ROW><id>11495984</id><snippet>.ix</snippet></ROW><ROW><id>11495984</id><snippet>df[['b','c']] = df[['e','f']]
</snippet></ROW><ROW><id>11495984</id><snippet>def col_range(df, col1, col2): 
    return list(dfrm.ix[dfrm.index.values[0],col1:col2].index)
</snippet></ROW><ROW><id>11495984</id><snippet>df[col_range(df,'b','d')] = df.ix[:,'e':'g'].copy()
</snippet></ROW><ROW><id>11495984</id><snippet>col_range</snippet></ROW><ROW><id>11495984</id><snippet>.ix</snippet></ROW><ROW><id>11495984</id><snippet>df.ix[0:4,col_range(df,'b','d')] = df.ix[0:4,'e':'g'].values
</snippet></ROW><ROW><id>11495984</id><snippet>[0:4]</snippet></ROW><ROW><id>11495984</id><snippet>[df.index.values[i]:df.index.values[j]]</snippet></ROW><ROW><id>11495984</id><snippet>[df.index.values[i] for i in range(N)]</snippet></ROW><ROW><id>11495984</id><snippet>[df['a']&gt;5]</snippet></ROW><ROW><id>11495984</id><snippet>import numpy as np
my_rows = np.logical_and(df['a'] &gt; 5), df['e'] &lt; 10)
df.ix[my_rows,col_range(df,'b','d')] = df.ix[my_rows,'e':'g'].values
</snippet></ROW><ROW><id>11495984</id><snippet>.ix</snippet></ROW><ROW><id>11495984</id><snippet>df["A"] = np.repeat(False, len(df))
df["A"][df["B"] &gt; 0] = True
</snippet></ROW><ROW><id>11495984</id><snippet>.ix</snippet></ROW><ROW><id>11495984</id><snippet>.ix</snippet></ROW><ROW><id>11496242</id><snippet>itertools.cycle</snippet></ROW><ROW><id>11496242</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a = range(1, 11)
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; b = itertools.cycle([1,2,3])
&gt;&gt;&gt; b
&lt;itertools.cycle object at 0x1004be830&gt;
&gt;&gt;&gt; ans = [i*j for i,j in zip(a,b)]
&gt;&gt;&gt; ans
[1, 4, 9, 4, 10, 18, 7, 16, 27, 10]
</snippet></ROW><ROW><id>11496242</id><snippet>zip</snippet></ROW><ROW><id>11496242</id><snippet>a</snippet></ROW><ROW><id>11496368</id><snippet>try</snippet></ROW><ROW><id>11496368</id><snippet>except</snippet></ROW><ROW><id>11496368</id><snippet>open()</snippet></ROW><ROW><id>11496368</id><snippet>with</snippet></ROW><ROW><id>11496368</id><snippet>try</snippet></ROW><ROW><id>11496368</id><snippet>except IOError</snippet></ROW><ROW><id>11496368</id><snippet>for ...
    try:
        with open(...
           # do stuff
    except IOError:
        # what to do if file not found, or pass
</snippet></ROW><ROW><id>11496368</id><snippet>for</snippet></ROW><ROW><id>11496368</id><snippet>with</snippet></ROW><ROW><id>11496368</id><snippet>try</snippet></ROW><ROW><id>11496368</id><snippet>except</snippet></ROW><ROW><id>11496368</id><snippet>for</snippet></ROW><ROW><id>11496368</id><snippet>'w'</snippet></ROW><ROW><id>11496592</id><snippet>def strpos_r(haystack, needle):
    positions = []
    position = haystack.rfind(needle)

    while position != -1:
        positions.append(position)
        haystack = haystack[:position]
        position = haystack.rfind(needle)

    return positions
</snippet></ROW><ROW><id>11496592</id><snippet>return False</snippet></ROW><ROW><id>11496673</id><snippet>def is_palindrome(s):
    if s == '':
        return True
    else:
        if (ord(s[0]) - ord(s[len(s)-1])) == 0:
            # v-- forgot this here
            return is_palindrome(s[1:len(s)-1])
        else:
            return False
</snippet></ROW><ROW><id>11496910</id><snippet>def treefunction(self, index):
    print index.model().itemFromIndex(index).text()
    # print self.model.itemFromIndex(index).text()
</snippet></ROW><ROW><id>11496910</id><snippet>self.treeView.clicked.connect(self.treefunction)
</snippet></ROW><ROW><id>11496960</id><snippet>None</snippet></ROW><ROW><id>11496960</id><snippet>getFeatures()</snippet></ROW><ROW><id>11496960</id><snippet>def trainAndTest(self,trainingPercent=0.80):
    featureset = self.getFeatures()

...

def _loadNames(self):
    return USSSALoader.getNameList()
</snippet></ROW><ROW><id>11496960</id><snippet>if featureset is None</snippet></ROW><ROW><id>11496960</id><snippet>shuffle</snippet></ROW><ROW><id>11496960</id><snippet>names = USSSALoader.getNameList()
if names is None:
    # raise an exception?
    # do something else?
    # ask the user to do something?
</snippet></ROW><ROW><id>11496960</id><snippet>names = USSSALoader.getNameList()
if names is None:
    raise ValueError("USSSALoader didn't return any "
                     "valid names! Can't continue!")
</snippet></ROW><ROW><id>11496960</id><snippet>USSSALoader.getNameList()</snippet></ROW><ROW><id>11496960</id><snippet>names = USSSALoader.getNameList()
if names is None:
    raise IOError("No USSSALoader file found")
</snippet></ROW><ROW><id>11497032</id><snippet>nd = {}
nd['john'] = 109090
nd['albert'] = 1900
nd['Tim'] = 18000

print sorted(nd.items(), key=lambda x: x[1])
</snippet></ROW><ROW><id>11497032</id><snippet>[('albert', 1900), ('Tim', 18000), ('john', 109090)]
</snippet></ROW><ROW><id>11497032</id><snippet>print map(lambda x: x[0], sorted(nd.items(), key=lambda x: x[1]))
</snippet></ROW><ROW><id>11497032</id><snippet>['albert', 'Tim', 'john']
</snippet></ROW><ROW><id>11497045</id><snippet>u</snippet></ROW><ROW><id>11497045</id><snippet>print session.identity_map</snippet></ROW><ROW><id>11497045</id><snippet>foo</snippet></ROW><ROW><id>11497045</id><snippet>class UserTest(Base):
    ...

    @orm.reconstructor
    def init_on_load(self):
        self.foo = "bar"
</snippet></ROW><ROW><id>11497065</id><snippet>curl -O http://pypi.python.org/packages/source/r/reportlab/reportlab-2.5.tar.gz
tar zxf reportlab-2.5.tar.gz
cd reportlab*
rm -rf src/rl_addons
jython setup.py install
</snippet></ROW><ROW><id>11497209</id><snippet>.</snippet></ROW><ROW><id>11497209</id><snippet>n</snippet></ROW><ROW><id>11497209</id><snippet>^.{3}([^\}]+)
</snippet></ROW><ROW><id>11497209</id><snippet>^.{3}</snippet></ROW><ROW><id>11497209</id><snippet>[^\}]+</snippet></ROW><ROW><id>11497209</id><snippet>^</snippet></ROW><ROW><id>11497209</id><snippet>{{</snippet></ROW><ROW><id>11497209</id><snippet>}}</snippet></ROW><ROW><id>11497209</id><snippet>\{\{([^\}]+)\}\}</snippet></ROW><ROW><id>11497209</id><snippet>[^\{\}]+</snippet></ROW><ROW><id>11497236</id><snippet>def matcher(ex):
    ex = ex.rstrip()
    if re.match(r'^[a-zA-Z0-9][ A-Za-z0-9_-]*$', ex):
        print 'yes'
</snippet></ROW><ROW><id>11497236</id><snippet>|</snippet></ROW><ROW><id>11497236</id><snippet>+</snippet></ROW><ROW><id>11497236</id><snippet>'_'</snippet></ROW><ROW><id>11497236</id><snippet>\w</snippet></ROW><ROW><id>11497391</id><snippet>\n</snippet></ROW><ROW><id>11497391</id><snippet>os</snippet></ROW><ROW><id>11497391</id><snippet>linesep</snippet></ROW><ROW><id>11497404</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>11497404</id><snippet>def load_words(file1):
    answer = collections.defaultdict(list)
    for line in file1:
        line = line.strip()
        if line not in answer[line[0]]:
            answer[line[0]].append(line)
    return answer
</snippet></ROW><ROW><id>11497404</id><snippet>def load_words(file1):
    answer = {}
    for line in file1:
        line = line.strip()
        if line[0] in answer: # or in answer.keys() or in answer.iterkeys()
            if line not in answer[line[0]]:
                answer[line[0]].append(line)
        else:
            answer[line[0]] = [line] # or answer[line[0]] = []; answer[line[0]].append(line)
    return answer
</snippet></ROW><ROW><id>11497626</id><snippet>board = [["1","2","2"],["8*1","2@3","5*6"],["9","5","8"],
         ["2","2","2"],["5*6","6*8","0@2"],["1","2","8"],
         ["1","9","8"],["2*7","7*5","4@2"],["1","3","3"]]

counter = 0

print("+-----------+")

for row in board:
    counter += 1
    print("|%s|" % "|".join(c.center(3) for c in row))
    if counter == 3 or counter == 6 or counter == 9:
        print("+-----------+")
</snippet></ROW><ROW><id>11497626</id><snippet>+-----------+
| 1 | 2 | 2 |
|8*1|2@3|5*6|
| 9 | 5 | 8 |
+-----------+
| 2 | 2 | 2 |
|5*6|6*8|0@2|
| 1 | 2 | 8 |
+-----------+
| 1 | 9 | 8 |
|2*7|7*5|4@2|
| 1 | 3 | 3 |
+-----------+
</snippet></ROW><ROW><id>11497985</id><snippet>BeginDrag()</snippet></ROW><ROW><id>11497985</id><snippet>BeginDrag()</snippet></ROW><ROW><id>11497985</id><snippet>EndDrag()</snippet></ROW><ROW><id>11497985</id><snippet>wx.EVT_LEFT_DOWN</snippet></ROW><ROW><id>11497985</id><snippet>BeginDrag()</snippet></ROW><ROW><id>11497985</id><snippet>wx.EVT_MOTION</snippet></ROW><ROW><id>11497985</id><snippet>wx.EVT_LEFT_UP</snippet></ROW><ROW><id>11497985</id><snippet>EndDrag()</snippet></ROW><ROW><id>11498064</id><snippet>def many_byte_xor(buf, key):
    buf = bytearray(buf)
    for i, bufbyte in enumerate(buf):
        buf[i] = chr(bufbyte ^ ord(key[i % len(key)]))
    return str(buf)
</snippet></ROW><ROW><id>11498064</id><snippet>itertools.cycle</snippet></ROW><ROW><id>11498064</id><snippet>&gt;&gt;&gt; many_byte_xor("AABAA", "AB")
'\x00\x03\x03\x03\x00'
&gt;&gt;&gt; many_byte_xor("ABCDABCD", "ABCD")
'\x00\x00\x00\x00\x00\x00\x00\x00'
&gt;&gt;&gt; many_byte_xor("ABCDABCDA", "ABCD")
'\x00\x00\x00\x00\x00\x00\x00\x00\x00'
&gt;&gt;&gt; many_byte_xor("ABCDABCDAB", "ABCD")
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
&gt;&gt;&gt; many_byte_xor("ABCDABCDAB", "ABC")
'\x00\x00\x00\x05\x03\x01\x02\x06\x02\x03'
</snippet></ROW><ROW><id>11498132</id><snippet>query = "INSERT INTO bm_triesJsons VALUES (%s, %s, %s);"
cur.execute(query, (article_id, revision_number, jsn))
</snippet></ROW><ROW><id>11498132</id><snippet>c = MySQLdb.connection()
print c.escape_string('{"foo":"bar"}')
# {\"foo\":\"bar\"}
</snippet></ROW><ROW><id>11498158</id><snippet>if a &lt; len(str):
</snippet></ROW><ROW><id>11498210</id><snippet>stock</snippet></ROW><ROW><id>11498210</id><snippet>float(stock_value)
</snippet></ROW><ROW><id>11498210</id><snippet># only convert items to float that are not empty strings
stock.extend(float(val) for val in row.strip().split(',') if val.strip())
</snippet></ROW><ROW><id>11498210</id><snippet>stock.append(float(row.strip().split(',')[0]))
</snippet></ROW><ROW><id>11498210</id><snippet>if max(stock) &gt; 735:
    print "%s Minimum" % (stock)
</snippet></ROW><ROW><id>11498250</id><snippet>app.route(path)</snippet></ROW><ROW><id>11498250</id><snippet>inner</snippet></ROW><ROW><id>11498250</id><snippet>hello2</snippet></ROW><ROW><id>11498250</id><snippet>inner</snippet></ROW><ROW><id>11498250</id><snippet>def add1(f):
    def inner(*args, **kwargs):
        return str(f(*args, **kwargs))+'1'
    inner.__name__ = f.__name__
    return inner
</snippet></ROW><ROW><id>11498250</id><snippet>from functools import wraps

def add1(f):
    @wraps(f)
    def inner(*args, **kwargs):
        return str(f(*args, **kwargs))+'1'
    return inner
</snippet></ROW><ROW><id>11498250</id><snippet>wraps</snippet></ROW><ROW><id>11498454</id><snippet>=</snippet></ROW><ROW><id>11498454</id><snippet>b = True
a = b
</snippet></ROW><ROW><id>11498454</id><snippet>temporary_expr_result = True

a = temporary_expr_result
b = temporary_expr_result
</snippet></ROW><ROW><id>11498459</id><snippet>import urllib, urllib2, cookielib, re

zendesk_subdomain = 'mysub'
zendesk_username = '...'
zendesk_password = '...'

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
resp = opener.open('http://%s.zendesk.com/access/unauthenticated' % (zendesk_subdomain))
s = resp.read()
data = dict()
data['authenticity_token'] = re.findall('&lt;input name="authenticity_token" type="hidden" value="([^"]+)"', s)[0]
data['return_to'] = 'http://%s.zendesk.com/login' % zendesk_subdomain
data['user[email]'] = zendesk_username
data['user[password]'] = zendesk_password
data['commit'] = 'Log in'
data['remember_me'] = '1'

opener.open('https://localch.zendesk.com/access/login', urllib.urlencode(data))
</snippet></ROW><ROW><id>11498459</id><snippet>opener.open('http://%s.zendesk.com/rules/new?filter=macro' % zendesk_subdomain)
</snippet></ROW><ROW><id>11498626</id><snippet>producer</snippet></ROW><ROW><id>11498626</id><snippet>fetch</snippet></ROW><ROW><id>11498626</id><snippet>fetch</snippet></ROW><ROW><id>11498626</id><snippet>fetch</snippet></ROW><ROW><id>11499323</id><snippet>    widget = self.gtkBuilder.get_object('OpenGLDrawAreaOpenGLFuBar')
    self.OpenGLGizmo['fubar'] = OPenGLFuBar()
    glarea = gtk.gtkgl.DrawingArea( glconfig=self.glconfig,
                                    share_list=None,
                                    render_type=gtk.gdkgl.RGBA_TYPE)
    self.OpenGLWidget['fubar'] = glarea
    glarea.set_size_request(333, 333)
    red = (1.0, 0.0, 0.0, 0.0)
    glarea.connect_after('realize', self.OpenGLGizmo['fubar'].realize_main)
    glarea.connect('configure_event', self.OpenGLGizmo['fubar'].configure_event)
    glarea.connect('expose_event', self.OpenGLGizmo['fubar'].expose_event)
    glarea.set_flags(gtk.HAS_FOCUS | gtk.CAN_FOCUS)
    glarea.add_events(gtk.gdk.KEY_PRESS_MASK)
    glarea.connect('key_press_event', self.OpenGLGizmo['fubar'].key_callback)
    widget.add(glarea)
    glarea.show()
    glarea.realize()
    glarea.grab_focus()
</snippet></ROW><ROW><id>11499402</id><snippet>pip install -r requirement.txt
</snippet></ROW><ROW><id>11499418</id><snippet>import csv

STOCKS = ['JPM', 'PG', 'GOOG', 'KO']

for stock in STOCKS:
    with open('{}Min.csv'.format(stock)) as csvin:
        for row in csv.reader(csvin):
            if any(col &gt; 731 for col in map(float, row)):
                print '{} minimum'.format(stock)
                break
</snippet></ROW><ROW><id>11499491</id><snippet>HRESULT Process([in] BSTR str, [out, retval] VARIANT *pResult);
</snippet></ROW><ROW><id>11499546</id><snippet>ipython</snippet></ROW><ROW><id>11499546</id><snippet>run script.py</snippet></ROW><ROW><id>11499546</id><snippet>run manage.py shell</snippet></ROW><ROW><id>11499697</id><snippet>CMD</snippet></ROW><ROW><id>11499697</id><snippet>prompt</snippet></ROW><ROW><id>11499697</id><snippet>intro</snippet></ROW><ROW><id>11499697</id><snippet>import cmd

class HelloWorld(cmd.Cmd):
    """Simple command processor example."""

    prompt = 'prompt: '
    intro = "Simple command processor example."
</snippet></ROW><ROW><id>11500106</id><snippet>rel=oauth2-token</snippet></ROW><ROW><id>11500106</id><snippet>Link</snippet></ROW><ROW><id>11500106</id><snippet>Authorization</snippet></ROW><ROW><id>11500106</id><snippet>rel</snippet></ROW><ROW><id>11500106</id><snippet>rel=http://rels.myapi.com/users</snippet></ROW><ROW><id>11500106</id><snippet>rel</snippet></ROW><ROW><id>11500106</id><snippet>http://myapi.com/users</snippet></ROW><ROW><id>11500106</id><snippet>POST</snippet></ROW><ROW><id>11500106</id><snippet>Location</snippet></ROW><ROW><id>11500106</id><snippet>http://myapi.com/users/username</snippet></ROW><ROW><id>11500106</id><snippet>rel</snippet></ROW><ROW><id>11500570</id><snippet>set_defaults</snippet></ROW><ROW><id>11500570</id><snippet>set_default</snippet></ROW><ROW><id>11500577</id><snippet>for i in range(1, 31):
</snippet></ROW><ROW><id>11500577</id><snippet>for d in Data[1:31]: #since you have range(1,31). Do Data[1:] if you just want to skip the first
    OneDate.append(d[0])
    OneClose.append(d[4])
</snippet></ROW><ROW><id>11500577</id><snippet>Data</snippet></ROW><ROW><id>11500577</id><snippet>d</snippet></ROW><ROW><id>11500577</id><snippet>d[4]</snippet></ROW><ROW><id>11500577</id><snippet>if len(d) &gt;= 5:  #check first.
    OneDate.append(d[0])
    OneClose.append(d[4])
</snippet></ROW><ROW><id>11500765</id><snippet>Note</snippet></ROW><ROW><id>11500765</id><snippet>File</snippet></ROW><ROW><id>11500765</id><snippet>Session.flush</snippet></ROW><ROW><id>11500765</id><snippet>relationship</snippet></ROW><ROW><id>11501143</id><snippet>QtCore.QObject.connect(self.pingThread, \
                QtCore.SIGNAL("Data"), \
                self.append_to_text_browser)
</snippet></ROW><ROW><id>11501143</id><snippet>def setupUi(self, *args):
</snippet></ROW><ROW><id>11501271</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>11501325</id><snippet>id</snippet></ROW><ROW><id>11501325</id><snippet>In [19]: a=b=[1,2,3]

In [20]: a
Out[20]: [1, 2, 3]

In [21]: b
Out[21]: [1, 2, 3]

In [22]: a[1]
Out[22]: 2

In [23]: a[1] = 99

In [24]: a
Out[24]: [1, 99, 3]

In [25]: b
Out[25]: [1, 99, 3]

In [26]: id(a)
Out[26]: 27945880

In [27]: id(b)
Out[27]: 27945880

In [28]: a = a[:]   # This is Rebinding 

In [29]: a
Out[29]: [1, 99, 3]

In [30]: id(a)
Out[30]: 27895568  # The id of the variable is changed
</snippet></ROW><ROW><id>11501382</id><snippet>for path, value in objwalk(element):
    if isinstance(value, int):
        parent = element
        for step in path[:-1]:
            parent = parent[step]
        parent[path[-1]] = hex(value)
</snippet></ROW><ROW><id>11501382</id><snippet>&gt;&gt;&gt; element
{'Params': ['Typetext', ['0x10', '0x2'], '0x2'], 'Request': ['0x10', '0x2'], 'Responses': [{'State': 'Positive', 'PDU': ['0x50', '0x2', '0x0']}, {}], 'Service': 'Servicetext'}
</snippet></ROW><ROW><id>11501383</id><snippet>e.update(d)
</snippet></ROW><ROW><id>11501383</id><snippet># Python 2.x
for key, value in e.iteritems():
    if value == '':
        e[key] = d.get(key)

# Python 3.x
for key, value in e.items():
    if value == '':
        e[key] = d.get(key)
</snippet></ROW><ROW><id>11501403</id><snippet>subprocess</snippet></ROW><ROW><id>11501403</id><snippet>import subprocess
cmd = "ifconfig | grep 'inet addr:' | grep -v 127.0.0.1 | cut -d: -f2 | awk '{ print $1}'"
co = subprocess.Popen([cmd], shell = True, stdout = subprocess.PIPE)
ips = co.stdout.read().strip().split("\n")
</snippet></ROW><ROW><id>11501403</id><snippet>ifconfig | grep inet | grep -v inet6 | grep -v 127.0.0.1 | awk '{print $2}' | cut -d\: -f2 | cut -d\  -f1
</snippet></ROW><ROW><id>11501626</id><snippet>unittest</snippet></ROW><ROW><id>11501626</id><snippet>mock</snippet></ROW><ROW><id>11501626</id><snippet>mock</snippet></ROW><ROW><id>11501626</id><snippet>pip install</snippet></ROW><ROW><id>11501626</id><snippet>from unittest.mock import MagicMock
</snippet></ROW><ROW><id>11501626</id><snippet>from mock import MagicMock
</snippet></ROW><ROW><id>11501838</id><snippet>.__init__()</snippet></ROW><ROW><id>11501838</id><snippet>.connect(host, port)</snippet></ROW><ROW><id>11501904</id><snippet>multiprocessing</snippet></ROW><ROW><id>11501904</id><snippet>if __name__ . . .</snippet></ROW><ROW><id>11501912</id><snippet>activate_this.py</snippet></ROW><ROW><id>11501912</id><snippet>sys.path</snippet></ROW><ROW><id>11501912</id><snippet>import sys
import os

old_sys_path = list(sys.path)

virtualenv_path = "/path/to/venv"
activate_this_path = os.path.join(virtualenv_path, "bin", "activate_this.py")

execfile(activate_this_path, dict(__file__=activate_this_path))

# get my module here

# restore sys.path
sys.path = old_sys_path
</snippet></ROW><ROW><id>11501954</id><snippet>__init__.py</snippet></ROW><ROW><id>11501954</id><snippet>.</snippet></ROW><ROW><id>11502011</id><snippet>&gt;&gt;&gt; a = ["A ", "B ", "C "]
&gt;&gt;&gt; a
['A ', 'B ', 'C ']
&gt;&gt;&gt; a = map(lambda x: x.strip(), a)
&gt;&gt;&gt; a
['A', 'B', 'C']
</snippet></ROW><ROW><id>11502011</id><snippet>a = stocks.split('\n')
</snippet></ROW><ROW><id>11502199</id><snippet>a?a?a</snippet></ROW><ROW><id>11502199</id><snippet>"bbbaaa"</snippet></ROW><ROW><id>11502199</id><snippet>a</snippet></ROW><ROW><id>11502199</id><snippet>.*a?a?a</snippet></ROW><ROW><id>11502199</id><snippet>"bbbaaa"</snippet></ROW><ROW><id>11502199</id><snippet>.*</snippet></ROW><ROW><id>11502199</id><snippet>a</snippet></ROW><ROW><id>11502199</id><snippet>\d+h(\d+m)?(\d+s)?|(\d+m)(\d+s)?|(\d+s)
</snippet></ROW><ROW><id>11502199</id><snippet>(?|  | )</snippet></ROW><ROW><id>11502290</id><snippet>a, b = 5 + 4, 5
print a, b
</snippet></ROW><ROW><id>11502301</id><snippet>trans</snippet></ROW><ROW><id>11502301</id><snippet>i18n</snippet></ROW><ROW><id>11502301</id><snippet>trans</snippet></ROW><ROW><id>11502301</id><snippet>.po</snippet></ROW><ROW><id>11502301</id><snippet>.mo</snippet></ROW><ROW><id>11502301</id><snippet>_()</snippet></ROW><ROW><id>11502301</id><snippet>django.utils.translation</snippet></ROW><ROW><id>11502301</id><snippet>.po</snippet></ROW><ROW><id>11502301</id><snippet>.mo</snippet></ROW><ROW><id>11502301</id><snippet>/locale/</snippet></ROW><ROW><id>11502312</id><snippet>import cssutils
sheets = []
for styletag in tree.findAll('style', type='text/css')
    if not styletag.string: # probably an external sheet
        continue
    sheets.append(cssutils.parseStyle(styletag.string))
</snippet></ROW><ROW><id>11502312</id><snippet>cssutil</snippet></ROW><ROW><id>11502508</id><snippet>input</snippet></ROW><ROW><id>11502508</id><snippet>keyup</snippet></ROW><ROW><id>11502621</id><snippet>file_pb2._TEST.values_by_number[1].name
</snippet></ROW><ROW><id>11502621</id><snippet>'ONE'</snippet></ROW><ROW><id>11502621</id><snippet>file_pb2._TEST.values_by_name['ONE'].number
</snippet></ROW><ROW><id>11502621</id><snippet>1</snippet></ROW><ROW><id>11502621</id><snippet>file_pb2.Test.Name(1)
file_pb2.Test.Value('One')
</snippet></ROW><ROW><id>11502806</id><snippet>\x000</snippet></ROW><ROW><id>11502806</id><snippet>\x00</snippet></ROW><ROW><id>11502806</id><snippet>0x00</snippet></ROW><ROW><id>11502806</id><snippet>0</snippet></ROW><ROW><id>11502806</id><snippet>0x30</snippet></ROW><ROW><id>11502806</id><snippet>z = re.compile(r'(\x00[0-5]:)')
</snippet></ROW><ROW><id>11502806</id><snippet>.split()</snippet></ROW><ROW><id>11502806</id><snippet>.findall()</snippet></ROW><ROW><id>11502806</id><snippet>&gt;&gt;&gt; z = re.compile(r'(?:\x00[0-5]:)?(?:(?!\x00[0-5]:).)*', re.S)
&gt;&gt;&gt; z.findall(line)
</snippet></ROW><ROW><id>11502806</id><snippet>(?:\x00[0-5]:)? # Match an optional leading \x000:, \x001: etc.
(?:             # Match...
 (?!\x00[0-5]:) #  as long as we're not at the start of another \x00n:
 .              #  any character (including newlines: re.S)
)*              # any number of times.
</snippet></ROW><ROW><id>11502905</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; url = 'https://www.advertise-example.com/ads/2022/presents'
&gt;&gt;&gt; int(re.search(r'\d+', url).group())
2022
</snippet></ROW><ROW><id>11503140</id><snippet>&gt;&gt;&gt; a * b[c,1,:] + b[c,0,:]
array([[  0,   6,  14,  24],
       [ 16,  26,  38,  52],
       [104, 126, 150, 176],
       [152, 178, 206, 236],
       [336, 374, 414, 456]])
</snippet></ROW><ROW><id>11503200</id><snippet>def flatten(it):
    for x in it:
        if (isinstance(x, collections.Iterable) and
            not isinstance(x, str)):
            for y in flatten(x):
                yield y
        else:
            yield x
</snippet></ROW><ROW><id>11503200</id><snippet>def flatten(it):
    for x in it:
        if (isinstance(x, collections.Iterable) and
            not isinstance(x, str)):
            yield from flatten(x)
        else:
            yield x
</snippet></ROW><ROW><id>11503649</id><snippet>with open(waveform, 'rb') as f:
    reader = csv.reader(f)
    for row in reader:
        print row[:-1]
</snippet></ROW><ROW><id>11503649</id><snippet>columns = ['value']
with open(waveform, 'rb') as f:
    reader = csv.reader(f)
    for row in reader:
        rec = dict(zip(columns, row))
        print rec
</snippet></ROW><ROW><id>11503649</id><snippet>{'value': '-1'}
{'value': '-1'}
{'value': '1'}
{'value': '1'}
</snippet></ROW><ROW><id>11503974</id><snippet>import os

def any_p(iterable):
    for element in iterable:
        if element:
            return True
    return False

include_dirs = ['Dir4/SubDir4.2', 'Dir1/SubDir4.2', 'Dir3', 'Dir2'] # List all your included folder names in that


for root, dirs, files in os.walk( '.' ):
    dirs[:] = [d for d in dirs if any_p(d in os.path.join(root, q_inc) for q_inc in include_dirs)]

    for file in files:
        print file
</snippet></ROW><ROW><id>11503974</id><snippet>include_dirs = ['Dir4/SubDir4.2', 'Dir1/SubDir4.2']
</snippet></ROW><ROW><id>11504114</id><snippet>open()</snippet></ROW><ROW><id>11504114</id><snippet>csv</snippet></ROW><ROW><id>11504123</id><snippet>import os
import tables

path = '/path/to/your/h5_files'
beta = tables.openFile(os.path.join(path, "test2.h5"), mode='w')
</snippet></ROW><ROW><id>11504123</id><snippet>/path/to/your/h5_files/test2.h5</snippet></ROW><ROW><id>11504244</id><snippet>local()</snippet></ROW><ROW><id>11504244</id><snippet>def publicip():
    ip = local("curl -s 'http://checkip.dyndns.org'", capture=True)
</snippet></ROW><ROW><id>11504244</id><snippet>'&lt;html&gt;&lt;head&gt;&lt;title&gt;Current IP Check&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Current IP Address: 1.2.3.4&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>11504244</id><snippet>r = re.compile(r'.*\&lt;body&gt;Current IP Address:\s(.*)\&lt;/body&gt;.*')
final_ip = r.match(ip).group(1)
</snippet></ROW><ROW><id>11504378</id><snippet>DEBUG = True</snippet></ROW><ROW><id>11504378</id><snippet>/static/</snippet></ROW><ROW><id>11504378</id><snippet>DEBUG = False</snippet></ROW><ROW><id>11504378</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>11504378</id><snippet>/static/</snippet></ROW><ROW><id>11504378</id><snippet>collectstatic</snippet></ROW><ROW><id>11504378</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>11504421</id><snippet>print(ip.ev(15, 1975))</snippet></ROW><ROW><id>11504421</id><snippet>ip = RectBivariateSpline(years, service, wage, kx=2, ky=2)</snippet></ROW><ROW><id>11504445</id><snippet>import operator

RecordsByTeam = {}
for r in TeamDict['TeamRecords']:
    RecordsByTeam[r['Team']] = r

for team, rank in sorted(RankDict.items(), key=operator.itemgetter(1)):
    print team
    print rank
    try:        
        print RecordsByTeam[team]
    except KeyError:
        print 'No details could be found for team', team
</snippet></ROW><ROW><id>11504445</id><snippet>try/except</snippet></ROW><ROW><id>11504445</id><snippet>TeamDict</snippet></ROW><ROW><id>11504445</id><snippet>RankDict</snippet></ROW><ROW><id>11504445</id><snippet>'11'</snippet></ROW><ROW><id>11504445</id><snippet>'11'</snippet></ROW><ROW><id>11504445</id><snippet>'2'</snippet></ROW><ROW><id>11504445</id><snippet>'3'</snippet></ROW><ROW><id>11504445</id><snippet>'4'</snippet></ROW><ROW><id>11504471</id><snippet>np.loadtxt("randomfile.txt", dtype=int).reshape((-1, 4))
</snippet></ROW><ROW><id>11504471</id><snippet>array([[10, 20, 30, 40],
       [50, 10, 45, 65]])
</snippet></ROW><ROW><id>11504627</id><snippet>"Overview:"</snippet></ROW><ROW><id>11504627</id><snippet>''.join(list_fields[list_fields.index("Overview:") + 1:])
</snippet></ROW><ROW><id>11504627</id><snippet>list.index()</snippet></ROW><ROW><id>11504627</id><snippet>"Overview:"</snippet></ROW><ROW><id>11504627</id><snippet>"Overview:"</snippet></ROW><ROW><id>11504728</id><snippet>def printValue(value):
    print 'This is the printValue() method. The value is %s'%(value)

def callPrintValue(methodName, *args):
    methodName(*args)
    print 'This is the callPrintValue() method'
</snippet></ROW><ROW><id>11504728</id><snippet>callPrintValue(printValue, "Value to pass to printValue")
</snippet></ROW><ROW><id>11504728</id><snippet>callPrintValue</snippet></ROW><ROW><id>11504793</id><snippet>    1|0,25,some_clob.dat
</snippet></ROW><ROW><id>11504840</id><snippet>def not_none(f):
    def func(*args, **kwargs):
        if any(arg is None for arg in args):
            raise ValueError('function {}: does not take arguments of None'.format(f.__name__))
        return f(*args, **kwargs)
    return func

@not_none
def test(a, b):
    print a, b
</snippet></ROW><ROW><id>11504901</id><snippet>place</snippet></ROW><ROW><id>11504901</id><snippet>grid</snippet></ROW><ROW><id>11504901</id><snippet>lift</snippet></ROW><ROW><id>11504914</id><snippet>import subprocess
subprocess.call(['python', 'your_script.py'])
</snippet></ROW><ROW><id>11504993</id><snippet>def open_url(url):
    pass #Open the url in a browser

for i,url in enumerate(url_list):
    label=tk.Label(frame,text=url)
    label.grid(row=i)
    label.bind("&lt;Button-1&gt;",lambda e,url=url:open_url(url))
</snippet></ROW><ROW><id>11505034</id><snippet>def animate(self):
    self.draw_one_frame()
    self.after(100, self.animate)
</snippet></ROW><ROW><id>11505034</id><snippet>def animate(self):
    if not self.should_stop:
        self.draw_one_frame()
        self.after(100, self.animate)
</snippet></ROW><ROW><id>11505034</id><snippet>self.should_stop</snippet></ROW><ROW><id>11505034</id><snippet>False</snippet></ROW><ROW><id>11505281</id><snippet>ZipFile.writestr()</snippet></ROW><ROW><id>11505391</id><snippet>class PersonResource(SQLAlchemyResource):
    address = ForeignKey(AddressResource, 'address', full=True)
</snippet></ROW><ROW><id>11505391</id><snippet>class Person extends Backbone.Model
  address: new Address
  urlRoot: '/api/v1/person/'
  url: -&gt; return @urlRoot+@id+'/?format=json'
  defaults: { name: 'Anon'}

  parse: (response) -&gt;
     addressResp = response.address || {}
     addressAttr = @address.parse(addressResp)
     @address.set(addressAttr)
     return response

  update: (options) -&gt;
     @set('address',@address.toJSON())
     Backbone.sync 'update', @, options
</snippet></ROW><ROW><id>11505595</id><snippet>versions</snippet></ROW><ROW><id>11505595</id><snippet>[buildout]
versions = myversions

[versions]
python-ldap = 2.3.13
</snippet></ROW><ROW><id>11505595</id><snippet>versions</snippet></ROW><ROW><id>11505595</id><snippet>[buildout]</snippet></ROW><ROW><id>11505595</id><snippet>[versions]</snippet></ROW><ROW><id>11505595</id><snippet>mr.scripty</snippet></ROW><ROW><id>11505595</id><snippet>[buildout]
versions = versions

[versions]
python-ldap = ${dynamic:python-ldap}

[dynamic]
recipe = mr.scripty
python-ldap =
    ... import subprocess
    ... return subprocess.check_output(
    ...    'dpkg-query', '-W', '-f', '${Version}', 'python-ldap').rsplit('-')[0]
</snippet></ROW><ROW><id>11505595</id><snippet>dpkg-query</snippet></ROW><ROW><id>11505774</id><snippet>Flask</snippet></ROW><ROW><id>11505774</id><snippet>Pyramid</snippet></ROW><ROW><id>11505825</id><snippet>reduced_vals</snippet></ROW><ROW><id>11505825</id><snippet>set()</snippet></ROW><ROW><id>11505825</id><snippet>collections.OrderedDict.fromkeys()</snippet></ROW><ROW><id>11505955</id><snippet>from collections import defaultdict

d=defaultdict(list)

dom = parseString(data)
macro=dom.getElementsByTagName('macro')
for node in macro:
    id_name=node.getElementsByTagName('id')[0].toxml()
    id_data=id_name.replace('&lt;id&gt;','').replace('&lt;/id&gt;','')
    print (id_data)
    cl_name=node.getElementsByTagName('cl2')[0].toxml()
    cl_data=cl_name.replace('&lt;cl2&gt;','').replace('&lt;/cl2&gt;','')
    print (cl_data)
    d[id_data].append(cl_data)
</snippet></ROW><ROW><id>11505955</id><snippet>d</snippet></ROW><ROW><id>11505955</id><snippet>id_data</snippet></ROW><ROW><id>11505955</id><snippet>id_data</snippet></ROW><ROW><id>11505955</id><snippet>id_data</snippet></ROW><ROW><id>11505955</id><snippet>d={}
for node in macro:
    ...
    d[id_data]=cl_data
</snippet></ROW><ROW><id>11505955</id><snippet>dict</snippet></ROW><ROW><id>11506061</id><snippet>m = prog.search(somestring)
</snippet></ROW><ROW><id>11506061</id><snippet>555</snippet></ROW><ROW><id>11506061</id><snippet>prog = re.compile(r'555\d555\d555')
</snippet></ROW><ROW><id>11506216</id><snippet>difflib.SequenceMatcher</snippet></ROW><ROW><id>11506216</id><snippet>ntlk</snippet></ROW><ROW><id>11506313</id><snippet>objwalk</snippet></ROW><ROW><id>11506313</id><snippet>def objwalk(obj, path=(), memo=None):
    if memo is None:
        memo = set()
    iterator = None
    if isinstance(obj, dict):
        iterator = iteritems
    elif isinstance(obj, (list, set)) and not isinstance(obj, string_types):
        iterator = enumerate
    if iterator:
        if id(obj) not in memo:
            memo.add(id(obj))
            for path_component, value in iterator(obj):
                if isinstance(value, tuple):
                    obj[path_component] = value = list(value)
                for result in objwalk(value, path + (path_component,), memo):
                    yield result
            memo.remove(id(obj))
    else:
        yield path, obj
</snippet></ROW><ROW><id>11506313</id><snippet>hex</snippet></ROW><ROW><id>11506313</id><snippet>&gt;&gt;&gt; element = {'Request': (16, 2), 'Params': ('Typetext', [16, 2], 2), 'Service': 'Servicetext', 'Responses': ({'State': 'Positive', 'PDU': [80, 2, 0]}, {})}
&gt;&gt;&gt; for path, value in objwalk(element):
...     if isinstance(value, int):
...         parent = element
...         for step in path[:-1]:
...             parent = parent[step]
...         parent[path[-1]] = hex(value)
... 
&gt;&gt;&gt; element
{'Params': ['Typetext', ['0x10', '0x2'], '0x2'], 'Request': ['0x10', '0x2'], 'Responses': [{'State': 'Positive', 'PDU': ['0x50', '0x2', '0x0']}, {}], 'Service': 'Servicetext'}
</snippet></ROW><ROW><id>11506542</id><snippet>url(r'^/someapp/(?P&lt;page_id&gt;\d+)/$', paginas),


def paginas(request, **kwargs):
    id = kwargs.pop('page_id')
    page = get_object_or_404(Page, id=id)
    # etcetera


class Page(models.Model):
    # regular stuff
    def get_absolute_url(self):
        return "/someapp/%d/" % self.id
</snippet></ROW><ROW><id>11506560</id><snippet>&gt;&gt;&gt; ''.join(['H', 'I', 'B'])
'HIB'
</snippet></ROW><ROW><id>11506560</id><snippet>&gt;&gt;&gt; tuple(['H', 'I', 'B'])
</snippet></ROW><ROW><id>11506560</id><snippet>&gt;&gt;&gt; tuple(li)
</snippet></ROW><ROW><id>11506746</id><snippet>#create a QDateTimeEdit object
myDTE = QtGui.QDateTimeEdit()

#get current date and time
now = QtCore.QDateTime.currentDateTime()

#set current date and time to the object
myDTE.setDateTime(now)

#set date only
today = QtCore.QDate.currentDate()
myDTE.setDate(today)

#set time only
this_moment = QtCore.QTime.currentTime()
myDTE.setTime(this_moment)

#set an arbitrary date
some_date = QtCore.QDate(2011,4,22) #Year, Month, Day
myDTE.setDate(some_date)

#set an arbitrary time
some_time = QtCore.QTime(16,33,15) #Hours, Minutes, Seconds (Only H and M required)
myDTE.setTime(some_time)

#set an arbitrary date and time
someDT = QtCore.QDateTime(2011,4,22,16,33,15)
myDTE.setDateTime(someDT)
</snippet></ROW><ROW><id>11506846</id><snippet>itertools.combinations</snippet></ROW><ROW><id>11506846</id><snippet>import itertools as it
points = ('A', 'B', 'C', 'D', 'E')
for pt1, pt2 in it.combinations(points, 2):
    print '{0}-{1}'.format(pt1, pt2)
</snippet></ROW><ROW><id>11506846</id><snippet>A-B
A-C
A-D
A-E
B-C
B-D
B-E
C-D
C-E
D-E
</snippet></ROW><ROW><id>11507172</id><snippet>custom = {
  "get" : {
    'key1' : value1,
    'key2' : value2,
    'key3' : value3,
  },

  "post" : {
    'key1' : value1,
    'key2' : value2,
    'key3' : another_value,
  },
}

try:
    cust_dict = custom[request.POST.get('return_method').strip()]
except KeyError:
    # .. handle invalid value
</snippet></ROW><ROW><id>11507172</id><snippet>request.POST.get('return_method')</snippet></ROW><ROW><id>11507172</id><snippet>.strip()</snippet></ROW><ROW><id>11507378</id><snippet>Natural Language Toolkit</snippet></ROW><ROW><id>11507378</id><snippet>corpus</snippet></ROW><ROW><id>11507378</id><snippet>NLTK</snippet></ROW><ROW><id>11507378</id><snippet>difflib</snippet></ROW><ROW><id>11507408</id><snippet>Flask</snippet></ROW><ROW><id>11507563</id><snippet>(3 + 1e20) - 1e20 = 1e20 - 1e20 = 0
</snippet></ROW><ROW><id>11507563</id><snippet>double</snippet></ROW><ROW><id>11507563</id><snippet>float</snippet></ROW><ROW><id>11507723</id><snippet>scipy.optimize.curve_fit</snippet></ROW><ROW><id>11507723</id><snippet>import numpy
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

# Define some test data which is close to Gaussian
data = numpy.random.normal(size=10000)

hist, bin_edges = numpy.histogram(data, density=True)
bin_centres = (bin_edges[:-1] + bin_edges[1:])/2

# Define model function to be used to fit to the data above:
def gauss(x, *p):
    A, mu, sigma = p
    return A*numpy.exp(-(x-mu)**2/(2.*sigma**2))

# p0 is the initial guess for the fitting coefficients (A, mu and sigma above)
p0 = [1., 0., 1.]

coeff, var_matrix = curve_fit(gauss, bin_centres, hist, p0=p0)

# Get the fitted curve
hist_fit = gauss(bin_centres, *coeff)

plt.plot(bin_centres, hist, label='Test data')
plt.plot(bin_centres, hist_fit, label='Fitted data')

# Finally, lets get the fitting parameters, i.e. the mean and standard deviation:
print 'Fitted mean = ', coeff[1]
print 'Fitted standard deviation = ', coeff[2]

plt.show()
</snippet></ROW><ROW><id>11507867</id><snippet>setup(
    cmdclass = {'build_ext': build_ext},
    ext_modules = [Extension("example", sourcefiles), Extension("example2", sourcefiles2), Extension("example3", sourcefiles3)]
)
</snippet></ROW><ROW><id>11507962</id><snippet>for line in file:
    if line.startswith('TK'):
        item = None
        for item in line.split():
            if item.startwith('ID='):
                # *stuff*

        if item is not None:
            # *stuff*
</snippet></ROW><ROW><id>11507962</id><snippet>item</snippet></ROW><ROW><id>11507962</id><snippet>&gt;&gt;&gt; for i in range(5):
...     print i
... 
0
1
2
3
4
&gt;&gt;&gt;  print 'last:', i
last: 4
</snippet></ROW><ROW><id>11507962</id><snippet>item</snippet></ROW><ROW><id>11507962</id><snippet>item = None</snippet></ROW><ROW><id>11507962</id><snippet>if item is not None</snippet></ROW><ROW><id>11507962</id><snippet>for line in file:
    if line.startswith('TK'):
        lastitem = None
        for item in line.split():
            if item.startwith('ID='):
                lastitem = item
                # *stuff*

        if lastitem is not None:
             # *stuff*
</snippet></ROW><ROW><id>11507962</id><snippet>&gt;&gt;&gt; lasti = None
&gt;&gt;&gt; for i in range(5):
...     if i % 2 == 0:
...         lasti = i
...
&gt;&gt;&gt; lasti
4
</snippet></ROW><ROW><id>11508441</id><snippet>distribute</snippet></ROW><ROW><id>11508441</id><snippet>setuptools</snippet></ROW><ROW><id>11508441</id><snippet>distutils</snippet></ROW><ROW><id>11508441</id><snippet>setuptools</snippet></ROW><ROW><id>11508441</id><snippet>distutils</snippet></ROW><ROW><id>11508441</id><snippet>setuptools</snippet></ROW><ROW><id>11508795</id><snippet>rstrip</snippet></ROW><ROW><id>11508795</id><snippet>i</snippet></ROW><ROW><id>11508795</id><snippet>i</snippet></ROW><ROW><id>11508795</id><snippet>rstrip</snippet></ROW><ROW><id>11508795</id><snippet>&gt;&gt;&gt; vtype = "vidis.fit"
&gt;&gt;&gt; vtype.rstrip("dis.fit")
'v'
&gt;&gt;&gt; vtype.rstrip("ditfs.")
'v'
</snippet></ROW><ROW><id>11508795</id><snippet>&gt;&gt;&gt; vtype.rstrip("ditffffsssss.")
'v'
</snippet></ROW><ROW><id>11508795</id><snippet>rfind</snippet></ROW><ROW><id>11508795</id><snippet>&gt;&gt;&gt; vtype[:vtype.rfind("dis.fit")]
'vi'
</snippet></ROW><ROW><id>11508879</id><snippet>file1 = open(sys.argv[1],"r")
file2 = open(sys.argv[2],"r")
file3 = open(sys.argv[3],"w")

for line1 in file1:
    if '@' in line1:  # line1.startswith('@') is probably better here
        a=line1.lstrip('@').rstrip('\n')
        b=file1.next().rstrip('\n')
        for line2 in file2:
            if '@' in line2:
                c=file2.next().rstrip('\n')
                break
        file3.write("&gt;%s\n%s:%s\n"%(a,b,c))

file1.close()
file2.close()
file3.close()
</snippet></ROW><ROW><id>11508879</id><snippet>lstrip</snippet></ROW><ROW><id>11508879</id><snippet>if line.startswith('@')</snippet></ROW><ROW><id>11508879</id><snippet>if '@' in line</snippet></ROW><ROW><id>11509004</id><snippet>divs = soup.findAll('div', class="two")

for div in divs:
    if div['class'] == ['two']:
        pass # handle class="two"
    else:
        pass # handle other cases, including but not limited to "one two"
</snippet></ROW><ROW><id>11509013</id><snippet>|</snippet></ROW><ROW><id>11509013</id><snippet>or</snippet></ROW><ROW><id>11509013</id><snippet>and</snippet></ROW><ROW><id>11509013</id><snippet>if respStr != "a" | respStr != "b":
</snippet></ROW><ROW><id>11509013</id><snippet>if respStr != ("a" | respStr) != "b":
</snippet></ROW><ROW><id>11509013</id><snippet>!=</snippet></ROW><ROW><id>11509013</id><snippet>x != y != z</snippet></ROW><ROW><id>11509013</id><snippet>x != y and y != z</snippet></ROW><ROW><id>11509013</id><snippet>if respStr != "a" and respStr != "b":
</snippet></ROW><ROW><id>11509013</id><snippet>if "a" != respStr != "b":
</snippet></ROW><ROW><id>11509013</id><snippet>in</snippet></ROW><ROW><id>11509013</id><snippet>if respStr not in ("a", "b"):
</snippet></ROW><ROW><id>11509056</id><snippet>#### Imports unchanged.

import sys 
import datetime 

#### Changing the error checking to be a little simpler.
#### If the number of args is wrong, or the "mode" arg is
#### not a valid option, it will print the error message
#### and exit.

if len(sys.argv) not in (2,3) or sys.argv[2] not in (1,2):
    print 'Incorrect arguments. Usage: &lt;exec&gt; &lt;mode (1) Underlying (2) OrderShoot&gt; &lt;FileName (optional)&gt;'
    sys.exit()  

#### the default previously specified in the original code.

now = datetime.datetime.now()

#### Using ternary logic to set the input file to either
#### the files specified in argv[2] (if it exists), or to
#### the default previously specified in the original code.

FIput = open((sys.argv[2] if len(sys.argv)==3 
                          else now.strftime("%Y%m%d")+'.QE-Metric.log'), 'r');

#### Output file not changed.

FOput = open('ParsedMetrics.txt', 'w');

#### START RE-WRITTEN FUNCTION

def ParseMetrics(file_lines,mode): 

#### The function now takes two params - the lines from the 
#### input file, and the 'mode' - whichever the user selected
#### at run-time. As you can see from the call down below, this
#### is taken straight from argv[1]. 

    if mode == '1':

#### So if we're doing underlying_tick mode, we want to find each tick,
#### then for each tick, sum the preceding order_shoots since the last
#### tick (or start of file for the first tick).

        ticks = [file_lines.index(line) for line in file_lines \
                                        if 'UNDERLYING_TICK' in line]

#### The above list comprehension iterates over file_lines, and creates
#### a list of the indexes to file_lines elements that contain ticks.
#### 
#### Then the following loop iterates over ticks, and for each tick,
#### subtracts the sum of all times for order_shoots that occure prior
#### to the tick, from the time value of the tick itself. Then that
#### value is written to the outfile.

        for tick in ticks:
            sub_time = float(file_lines[tick].split(",")[2]) - \
                       sum([float(line.split(",")[2]) \ 
                       for line in file_lines if "ORDER_SHOOT" in line \
                       and file_lines.index(line) &lt;= tick]
            FOput.write(float(line.split(",")[2]))    

#### if the mode is 2, then it just runs through file_lines and
#### outputs all of the order_shoot time values.

    if mode == '2':
        for line in file_lines:
            if 'ORDER_SHOOT' in line:
                FOput.write(float(line.split(",")[2]))

#### END OF REWRITTEN FUNCTION

#### As you can see immediately below, we pass sys.argv[2] for the
#### mode argument of the ParseMetrics function.

ParseMetrics(FIput.readlines(),sys.argv[2])

print 'Metrics parsed and written to ParsedMetrics.txt' 
</snippet></ROW><ROW><id>11509065</id><snippet>(947835,1125765), (998104,1043096)
</snippet></ROW><ROW><id>11509065</id><snippet>for j in range(n):
    if div_sum[j] &lt; n and div_sum[div_sum[j]] == j and div_sum[j] != j:
</snippet></ROW><ROW><id>11509065</id><snippet>25275024 + 947835 + 998104 == 27220963
</snippet></ROW><ROW><id>11509065</id><snippet>(356408, 399592)
</snippet></ROW><ROW><id>11509065</id><snippet>356408 = 596*598
</snippet></ROW><ROW><id>11509065</id><snippet>int k = (int) Math.sqrt(number);
for (int i = 2; i &lt; k; i++) {
</snippet></ROW><ROW><id>11509065</id><snippet>floor(sqrt(n))</snippet></ROW><ROW><id>11509071</id><snippet>TextField</snippet></ROW><ROW><id>11509071</id><snippet>JsonField</snippet></ROW><ROW><id>11509071</id><snippet>PickleField</snippet></ROW><ROW><id>11509630</id><snippet>for i in rand:
   LL.append(mylist[i])
</snippet></ROW><ROW><id>11509630</id><snippet>LL = [mylist[i] for i in rand]
</snippet></ROW><ROW><id>11509630</id><snippet>LL = [ x for i,x in enumerate(mylist) if i in rand ]
</snippet></ROW><ROW><id>11509630</id><snippet>import random
LL = random.sample(mylist,3)
</snippet></ROW><ROW><id>11509759</id><snippet>[]</snippet></ROW><ROW><id>11509759</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>11509759</id><snippet>data = {k: [] for k in range(2)}
</snippet></ROW><ROW><id>11509759</id><snippet>data = dict((k, []) for k in range(2))
</snippet></ROW><ROW><id>11509793</id><snippet>imap</snippet></ROW><ROW><id>11509793</id><snippet>iabbr</snippet></ROW><ROW><id>11509793</id><snippet>imap</snippet></ROW><ROW><id>11509793</id><snippet>iabbr</snippet></ROW><ROW><id>11509793</id><snippet>iabbr def def:&lt;left&gt;</snippet></ROW><ROW><id>11509793</id><snippet>imap</snippet></ROW><ROW><id>11510156</id><snippet>\n</snippet></ROW><ROW><id>11510156</id><snippet>print "This is on the first line\nThis is on the second line"
</snippet></ROW><ROW><id>11510156</id><snippet>This is on the first line
This is on the second line
</snippet></ROW><ROW><id>11510156</id><snippet>sum = 0
number = float(input('Please enter in a positive number: '))
while number &gt; 0:
    sum = sum + number
    number = float(input('If you are finished please enter a negative number.' + \ 'Otherwise, enter another positive number: ')) #fix this line using the information from the first part of the answer
</snippet></ROW><ROW><id>11510156</id><snippet>number &gt; -1</snippet></ROW><ROW><id>11510257</id><snippet>app</snippet></ROW><ROW><id>11510257</id><snippet>__init__.py</snippet></ROW><ROW><id>11510257</id><snippet>from .. import config</snippet></ROW><ROW><id>11510257</id><snippet>from .. import Gui</snippet></ROW><ROW><id>11510257</id><snippet>from . import LinksGrabber</snippet></ROW><ROW><id>11510436</id><snippet>w</snippet></ROW><ROW><id>11510436</id><snippet>who</snippet></ROW><ROW><id>11510436</id><snippet>last</snippet></ROW><ROW><id>11510436</id><snippet>lastlog</snippet></ROW><ROW><id>11510436</id><snippet>w</snippet></ROW><ROW><id>11510436</id><snippet>who</snippet></ROW><ROW><id>11510436</id><snippet>utmp</snippet></ROW><ROW><id>11510436</id><snippet>utmp</snippet></ROW><ROW><id>11510439</id><snippet>object</snippet></ROW><ROW><id>11510439</id><snippet>&gt;&gt;&gt; class test(object): pass
</snippet></ROW><ROW><id>11510439</id><snippet>&gt;&gt;&gt; class test: pass
</snippet></ROW><ROW><id>11510498</id><snippet>raw_query</snippet></ROW><ROW><id>11510498</id><snippet>.values('field1', 'field2', ...)</snippet></ROW><ROW><id>11510562</id><snippet>$ ls /usr/lib64/libXt.*
/usr/lib64/libXt.so.6.0.0

&gt;&gt;&gt; ctypes.CDLL('libXt.so.6.0.0')
&lt;CDLL 'libXt.so.6.0.0', handle 26b72b0 at 2723c90&gt;
</snippet></ROW><ROW><id>11510627</id><snippet>-s</snippet></ROW><ROW><id>11510627</id><snippet>+s</snippet></ROW><ROW><id>11510627</id><snippet>add_argument</snippet></ROW><ROW><id>11510627</id><snippet>class ToggleAction(argparse.Action):
    def __call__(self, parser, ns, values, option):
        setattr(ns, self.dest, bool("-+".index(option[0])))
ap = ArgumentParser(prefix_chars='-+')
ap.add_argument('-s', '+s', action=ToggleAction, nargs=0)

ap.parse_args(['+s'])
Namespace(s=True)

ap.parse_args(['-s'])
Namespace(s=False)
</snippet></ROW><ROW><id>11510647</id><snippet>[x for x in itertools.product(*variables) if sum(x)==5]
</snippet></ROW><ROW><id>11510647</id><snippet>range</snippet></ROW><ROW><id>11510960</id><snippet>def The_Count(self):
</snippet></ROW><ROW><id>11510960</id><snippet>word_freq = 0
</snippet></ROW><ROW><id>11510960</id><snippet>counter = WordCounter()
print(counter.The_Count())
</snippet></ROW><ROW><id>11511134</id><snippet>new_list = [ x%num for x in old_list]
</snippet></ROW><ROW><id>11511134</id><snippet>map</snippet></ROW><ROW><id>11511134</id><snippet>new_list = map(lambda x: x%num, old_list)
</snippet></ROW><ROW><id>11511134</id><snippet>lambda</snippet></ROW><ROW><id>11511134</id><snippet>def factorize(n):
    out=[]
    for i in range(2,n):
        if(n%i == 0): #first thing to hit this is always prime
            out.append(i) #add it to the list
            out+=factorize(n/i)  #get the list of primes from the other factor and append to this list.
            return out
    else:
        return [n] # n%i was never 0, must be prime.

print factorize(2000)
</snippet></ROW><ROW><id>11511162</id><snippet>ser</snippet></ROW><ROW><id>11511162</id><snippet># declare once 
ser = serial.Serial('COM3', 19200)

class AServer(threading.Thread):
  def __init__(self, port):
    threading.Thread.__init__(self)
    self.port = port

    global se
    self._ser = ser # local reference to global variable
</snippet></ROW><ROW><id>11511408</id><snippet>Group 1: ((1|0)(?!\2))+
Group 2: (1|0)(?!\2)
Group 3: 1|0
</snippet></ROW><ROW><id>11511453</id><snippet>buf = "000000111111222222"
a = np.ndarray(len(buf), np.dtype('&gt;i1'), buf)
e = np.zeros(len(buf) / 6, np.dtype('&gt;i8'))
for i in range(3):
    e.view(dtype='&gt;i2')[i + 1::4] = a.view(dtype='&gt;i2')[i::3]
[hex(x) for x in e]
</snippet></ROW><ROW><id>11511467</id><snippet>with</snippet></ROW><ROW><id>11511467</id><snippet>as</snippet></ROW><ROW><id>11511505</id><snippet>import facebook

token = 'your token'

graph = facebook.GraphAPI(token)
profile = graph.get_object("me")
friends = graph.get_connections("me", "friends")

friend_list = [friend['name'] for friend in friends['data']]

print friend_list
</snippet></ROW><ROW><id>11511531</id><snippet>if hasattr(entity, 'list'):
    a = entity.list[0] # or whatever operation you want
</snippet></ROW><ROW><id>11511615</id><snippet>conn = Connection(ip)</snippet></ROW><ROW><id>11511682</id><snippet>import win32gui

def enum_window_titles():
    def callback(handle, data):
        titles.append(win32gui.GetWindowText(handle))

    titles = []
    win32gui.EnumWindows(callback, None)
    return titles

titles = enum_window_titles()
</snippet></ROW><ROW><id>11511686</id><snippet>ax.set_xticks(ticks=[0,2,4,5,30,50])
</snippet></ROW><ROW><id>11511725</id><snippet>function AddToCart_Clicked(SKU, Quantity)
{
    // code for IE7+, Firefox, Chrome, Opera, Safari
    if(window.XMLHttpRequest)
        xmlhttp=new XMLHttpRequest();
    else// code for IE6, IE5
        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");

    xmlhttp.onreadystatechange=function()
    {
        if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)
        {
            document.getElementById('HeaderShoppingCartlink').innerHTML = 'Shopping Cart (' + xmlhttp.responseText + ')';
        }
    }

    xmlhttp.open("GET","/ProductNavigation/AddToCartJS?SKU=" + SKU + "&amp;Quantity=" + Quantity, true);
    xmlhttp.send();
    }
</snippet></ROW><ROW><id>11511725</id><snippet>@cherrypy.expose
def AddToCartJS(self, SKU, Quantity):
    CurrentShoppingCart = ShoppingCart()
    CartID = CurrentShoppingCart.AddToCart(SKU, Quantity)
    return CurrentShoppingCart.GetCartCount()
</snippet></ROW><ROW><id>11511813</id><snippet>import base64

with open('input.zip', 'rb') as fin, open('output.zip.b64', 'w') as fout:
    base64.encode(fin, fout)
</snippet></ROW><ROW><id>11512106</id><snippet>ADX</snippet></ROW><ROW><id>11512106</id><snippet>r_dataframe</snippet></ROW><ROW><id>11512106</id><snippet>ADX</snippet></ROW><ROW><id>11512106</id><snippet>ADX</snippet></ROW><ROW><id>11512106</id><snippet>row.names</snippet></ROW><ROW><id>11512106</id><snippet>Date</snippet></ROW><ROW><id>11512106</id><snippet>Date</snippet></ROW><ROW><id>11512106</id><snippet>as.xts(r.data.frame)</snippet></ROW><ROW><id>11512106</id><snippet>ADX</snippet></ROW><ROW><id>11512255</id><snippet>getattr</snippet></ROW><ROW><id>11512255</id><snippet>row_id = getattr(row, id_column)
</snippet></ROW><ROW><id>11512258</id><snippet>nx, ny = 10, 3

# compute appropriate bins to histogram the data into
lon_bins = numpy.linspace(lons.min(), lons.max(), nx+1)
lat_bins = numpy.linspace(lats.min(), lats.max(), ny+1)

# Histogram the lats and lons to produce an array of frequencies in each box.
# Because histogram2d does not follow the cartesian convention 
# (as documented in the numpy.histogram2d docs)
# we need to provide lats and lons rather than lons and lats
density, _, _ = numpy.histogram2d(lats, lons, [lat_bins, lon_bins])

# Turn the lon/lat bins into 2 dimensional arrays ready 
# for conversion into projected coordinates
lon_bins_2d, lat_bins_2d = numpy.meshgrid(lon_bins, lat_bins)

# convert the xs and ys to map coordinates
xs, ys = m(lon_bins_2d, lat_bins_2d)

plt.pcolormesh(xs, ys, density)
plt.colorbar(orientation='horizontal')

# overlay the scatter points to see that the density 
# is working as expected
plt.scatter(*m(lons, lats))

plt.show()
</snippet></ROW><ROW><id>11512268</id><snippet>if self.logWin:
    self.logWin.Show()
</snippet></ROW><ROW><id>11512301</id><snippet>ENGINE=MyISAM</snippet></ROW><ROW><id>11512301</id><snippet>__table_args__ = {'mysql_engine':'InnoDB'}</snippet></ROW><ROW><id>11512580</id><snippet>#switch the /usr/bin/python link to point to current python link
cd /usr/bin
rm -f python
ln -s /Library/Frameworks/Python.framework/Versions/Current/bin/python python
</snippet></ROW><ROW><id>11512580</id><snippet>PATH=/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH
export PATH

# needed for virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
</snippet></ROW><ROW><id>11512580</id><snippet>sudo sh setuptools-0.6c11-py2.7.egg

sudo easy_install-2.7 pip

pip install virtualenv
</snippet></ROW><ROW><id>11513204</id><snippet>E:\dev&gt;cd VARESE~1

E:\dev\VARESE~1&gt;python
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'E:\\dev\\VARESE~1'
&gt;&gt;&gt; exit()

E:\dev\VARESE~1&gt;cd ..
E:\dev&gt;cd VAResearchDemo

E:\dev\VAResearchDemo&gt;python
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'E:\\dev\\VAResearchDemo'
&gt;&gt;&gt; exit()
</snippet></ROW><ROW><id>11513204</id><snippet>python</snippet></ROW><ROW><id>11513204</id><snippet>VARESE~1</snippet></ROW><ROW><id>11513204</id><snippet>os.getcwd()</snippet></ROW><ROW><id>11513204</id><snippet>python</snippet></ROW><ROW><id>11513204</id><snippet>python</snippet></ROW><ROW><id>11513204</id><snippet>C:\myfolderisafolder\test</snippet></ROW><ROW><id>11513204</id><snippet>GetLongPathName</snippet></ROW><ROW><id>11513361</id><snippet>dict</snippet></ROW><ROW><id>11513361</id><snippet>dict1 = {'barry': {'gpa':'2.9','major':'biology'},
         'sarah': {'gpa':'3.2','major':'economics'},
         'george': {'gpa':'2.5','major':'english'}}

dict2 = {'john': {'position':'Lecturer','department':'economics'},
         'lisa': {'position':'researcher','department':'physics'},
         'james': {'position':'tutor','department':'english'}}
</snippet></ROW><ROW><id>11513361</id><snippet>dict_results = dict((d['name'], d) for d in dict1[results])
if name in dict_results:
    print dict_results[name]['gpa']
</snippet></ROW><ROW><id>11513373</id><snippet>QGraphicsItem::grabMouse()</snippet></ROW><ROW><id>11513531</id><snippet>import os

for filename in os.listdir('.'):
   print filename
</snippet></ROW><ROW><id>11514054</id><snippet>timeDeltas = []
idxStart = 0
idxEnd =  len(end_time)
for start in start_time:
    for i in range(idxStart, idxEnd)
        delta = 0
        end = end_time[i]
        if end &gt; start:
            delta = end - start
            idxStart = i
        else:
            timeDeltas.append(delta)
            break
</snippet></ROW><ROW><id>11514173</id><snippet>&gt;&gt;&gt; s = "5-9-81-15"          # String to parse
&gt;&gt;&gt; lb = [1, 1, 76, 13]      # List of lower bounds
&gt;&gt;&gt; ub = [17, 37, 89, 27]    # List of upper bounds

&gt;&gt;&gt; vals = [int(x) for x in s.split('-')]   # vals contains [5, 9, 81, 15]

&gt;&gt;&gt; all(x &gt; L and x &lt; U for x, L, U in zip(vals, lb, ub))    # does the check
True
</snippet></ROW><ROW><id>11514173</id><snippet>&gt;&gt;&gt; s = "5-9-90-15"    # fails with the third number
&gt;&gt;&gt; vals = [int(x) for x in s.split('-')]
&gt;&gt;&gt; all(x &gt; L and x &lt; U for x, L, U in zip(vals, lb, ub))
False
</snippet></ROW><ROW><id>11514239</id><snippet>','</snippet></ROW><ROW><id>11514239</id><snippet>print</snippet></ROW><ROW><id>11514239</id><snippet>print "Guess lower!", "You guessed:", guess,
                                           ^
                                           |
</snippet></ROW><ROW><id>11514239</id><snippet>print</snippet></ROW><ROW><id>11514239</id><snippet>from __future__ import print_function  # this needs to go on the first line

guess = 33

print("Guess lower!", "You guessed:", guess, ".", sep="", end="")
print(" You're so close!")
</snippet></ROW><ROW><id>11514239</id><snippet>Guess lower!You guessed:33. You're so close!</snippet></ROW><ROW><id>11514280</id><snippet>def printInfo(patients, nurses, nurseAssistants):
    print 'The number of patients for this shift is:', patients
    print 'The number of nurses needed is:', nurses
    print 'The number of nurses Assistants is:', nurseAssistants

main()
</snippet></ROW><ROW><id>11514280</id><snippet>=</snippet></ROW><ROW><id>11514280</id><snippet>printInfo</snippet></ROW><ROW><id>11514280</id><snippet>nurses = getNurses(patients)
nurseAssistants = getAssistants(nurses)
printInfo(patients, nurses, nurseAssistants)
</snippet></ROW><ROW><id>11514377</id><snippet>stretch = Linear.linear_stretch
</snippet></ROW><ROW><id>11514377</id><snippet>stretch = Linear.linear_stretch()
</snippet></ROW><ROW><id>11514532</id><snippet>listset</snippet></ROW><ROW><id>11514532</id><snippet>attrib_value</snippet></ROW><ROW><id>11514532</id><snippet>listset</snippet></ROW><ROW><id>11514532</id><snippet>bss</snippet></ROW><ROW><id>11514532</id><snippet>attrib_value += [a['href'] for a in list.findAll('a',{'href':True})]
</snippet></ROW><ROW><id>11514532</id><snippet>attrib_value = []</snippet></ROW><ROW><id>11514786</id><snippet>toString()</snippet></ROW><ROW><id>11514786</id><snippet>toString()</snippet></ROW><ROW><id>11514786</id><snippet>var objA = {
    data: 'yay',
    toString: function() {
        return 'value_as_key';
    }
};

var objB = {
    data: 'some other totally data thing',
    toString: function() {
        return 'value_as_key';
    }
}


var foo = {};
foo[objA] = 'abc';
foo[objB] = 'def';
foo['value_as_key'] = 'qwe';
foo.value_as_key = 'omg';

foo[objA];           // 'omg'
foo[objB];           // 'omg'
foo['value_as_key']; // 'omg'
foo.value_as_key;    // 'omg'
</snippet></ROW><ROW><id>11514786</id><snippet>toString()</snippet></ROW><ROW><id>11514786</id><snippet>toString()</snippet></ROW><ROW><id>11514786</id><snippet>({a:123}).toString() // [object Object]
({b:456}).toString() // [object Object]

var foo = {};
foo[{a:123}] = 'wtf';
foo[{asdf:9876}];       // 'wtf'
foo['[object Object]']; // 'wtf
</snippet></ROW><ROW><id>11514844</id><snippet>from pyparsing import *

LPAR,RPAR,COMMA,HASH,COLON = map(Suppress, '(),#:')
ident = Word(alphas+'_', alphanums+'_')
fnumber = Regex(r'[+-]?\d+\.\d*').setParseAction(lambda t:float(t[0]))
inumber = Regex(r'[+-]?\d+').setParseAction(lambda t:int(t[0]))
number = fnumber | inumber
ref_name = Combine("$" + delimitedList(ident, delim=oneOf(". -&gt;"), combine=True))
named_ref = Group(ident("name") + COLON + ref_name("ref"))
unnamed_ref = Group(ref_name("ref"))

IF, ELSE = map(Keyword, "if else".split())

stmt = Forward()

decl = named_ref | unnamed_ref

def setType(typ):
    def parseAction(tokens):
        tokens['type'] = typ
    return parseAction
cond = operatorPrecedence(ref_name | number,
            [
            (oneOf("&lt; == &gt; &lt;= &gt;= !="), 2, opAssoc.LEFT),
            ])
if_else = Group(HASH + IF + LPAR + cond("condition") + RPAR + 
                    LPAR + stmt("then") + RPAR + 
                    Optional(HASH + ELSE + LPAR + stmt("else") + RPAR))

if_else.setParseAction(setType("IF_ELSE"))
decl.setParseAction(setType("DECL"))

stmt &lt;&lt; Group(decl | if_else | (HASH + LPAR + delimitedList(stmt) + RPAR))

section = Group(ident("section_name") + LPAR + Group(ZeroOrMore(stmt))("section_body") + RPAR)

parser = OneOrMore(section)


source = """
preview 
( 
    #if ($e.d.stateFlags == 0) ( 
        $e.d 
    ) #else ( 
        #( $e.d-&gt;scheme, $e.d-&gt;host, $e.d-&gt;path ) 
    ) 
) 
children 
( 
    #( 
        scheme: $c.d-&gt;scheme, 
        host: $c.d-&gt;host, 
        path: $c.d-&gt;path, 
        username: $c.d-&gt;userName, 
        password: $c.d-&gt;password, 
        encodedOriginal: $c.d-&gt;encodedOriginal, 
        query: $c.d-&gt;query, 
        fragment: $c.d-&gt;fragment 
    ) 
)"""


def dump_stmt(tokens, depth=0):
    if 'type' in tokens:
        print tokens.type
        print tokens[0].dump(depth=depth)
    else:
        for stmt in tokens:
            dump_stmt(stmt, depth=depth+1)

for sec in parser.parseString(source):
    print sec.dump()
    print sec.section_name
    for statement in sec.section_body:
        dump_stmt(statement)
    print
</snippet></ROW><ROW><id>11514844</id><snippet>['preview', [[['if', ['$e.d.stateFlags', '==', 0], [['$e.d']], 'else', [[['$e.d-&gt;scheme']], [['$e.d-&gt;host']], [['$e.d-&gt;path']]]]]]]
- section_body: [[['if', ['$e.d.stateFlags', '==', 0], [['$e.d']], 'else', [[['$e.d-&gt;scheme']], [['$e.d-&gt;host']], [['$e.d-&gt;path']]]]]]
- section_name: preview
preview
IF_ELSE
['if', ['$e.d.stateFlags', '==', 0], [['$e.d']], 'else', [[['$e.d-&gt;scheme']], [['$e.d-&gt;host']], [['$e.d-&gt;path']]]]
- condition: ['$e.d.stateFlags', '==', 0]
- else: [[['$e.d-&gt;scheme']], [['$e.d-&gt;host']], [['$e.d-&gt;path']]]
- then: [['$e.d']]
  - type: DECL

['children', [[[['scheme', '$c.d-&gt;scheme']], [['host', '$c.d-&gt;host']], [['path', '$c.d-&gt;path']], [['username', '$c.d-&gt;userName']], [['password', '$c.d-&gt;password']], [['encodedOriginal', '$c.d-&gt;encodedOriginal']], [['query', '$c.d-&gt;query']], [['fragment', '$c.d-&gt;fragment']]]]]
- section_body: [[[['scheme', '$c.d-&gt;scheme']], [['host', '$c.d-&gt;host']], [['path', '$c.d-&gt;path']], [['username', '$c.d-&gt;userName']], [['password', '$c.d-&gt;password']], [['encodedOriginal', '$c.d-&gt;encodedOriginal']], [['query', '$c.d-&gt;query']], [['fragment', '$c.d-&gt;fragment']]]]
- section_name: children
children
DECL
['scheme', '$c.d-&gt;scheme']
  - name: scheme
  - ref: $c.d-&gt;scheme
DECL
['host', '$c.d-&gt;host']
  - name: host
  - ref: $c.d-&gt;host
DECL
['path', '$c.d-&gt;path']
  - name: path
  - ref: $c.d-&gt;path
DECL
['username', '$c.d-&gt;userName']
  - name: username
  - ref: $c.d-&gt;userName
DECL
['password', '$c.d-&gt;password']
  - name: password
  - ref: $c.d-&gt;password
DECL
['encodedOriginal', '$c.d-&gt;encodedOriginal']
  - name: encodedOriginal
  - ref: $c.d-&gt;encodedOriginal
DECL
['query', '$c.d-&gt;query']
  - name: query
  - ref: $c.d-&gt;query
DECL
['fragment', '$c.d-&gt;fragment']
  - name: fragment
  - ref: $c.d-&gt;fragment
</snippet></ROW><ROW><id>11515077</id><snippet>UserWrapper(db.Model):
  user = db.UserProperty()

UserSettings(db.Model):
  ...

# New User
user = users.get_current_user()
new_user_settings = UserSettings(...)
new_user_wrapper = UserWrapper(key=user.nickname(), 
                               parent=new_user_settings, 
                               user=user)

# Login Existing User
user = users.get_current_user()
user_wrapper = UserWrapper.get_by_key_name(user.nickname())
user_settings = user_wrapper.parent()
</snippet></ROW><ROW><id>11515083</id><snippet>graph = facebook.GraphAPI(oauth_access_token)
tags = json.dumps([{'x':50, 'y':50, tag_uid:12345}, {'x':10, 'y':60, tag_text:'a turtle'}])
graph.put_photo(open('img.jpg'), 'Look at this cool photo!', album_id_or_None, tags=tags)
</snippet></ROW><ROW><id>11515325</id><snippet>..\Scripts\pserve.exe development.ini --reload
</snippet></ROW><ROW><id>11515382</id><snippet>stem_word('value') == stem_word('valuing')
</snippet></ROW><ROW><id>11515447</id><snippet>left = arr[0:length/2]
right = arr[length/2+1: length]
</snippet></ROW><ROW><id>11515447</id><snippet>left = arr[:length/2]
right = arr[length/2:]
</snippet></ROW><ROW><id>11515447</id><snippet>i</snippet></ROW><ROW><id>11515447</id><snippet>j</snippet></ROW><ROW><id>11515447</id><snippet>left</snippet></ROW><ROW><id>11515447</id><snippet>right</snippet></ROW><ROW><id>11515493</id><snippet>
def sum_values(data):
    if type(data.values()[0]) != dict:
        return sum(data.values())
    else:
        return sum(sum_values(v) for v in data.values())

def depth_values(data, depth = 0):
    if depth == 0:
        return sum_values(data)
    else:
        return dict(
            (k, depth_values(v, depth-1))
            for k, v in data.items()
        )
</snippet></ROW><ROW><id>11515493</id><snippet>
print depth_values(vehicles, 0) # &gt;&gt; 58
print depth_values(vehicles, 1) # &gt;&gt; {'Holden': 31, 'Ford': 27}
print depth_values(vehicles, 2) # &gt;&gt; {'Holden': {'Commodore': 31}, 'Ford': {'Falcon': 27}}
print depth_values(vehicles, 3) # exceptions
</snippet></ROW><ROW><id>11515614</id><snippet>test = 'abc'
if True:
    raise Exception(test + 'def')
</snippet></ROW><ROW><id>11515705</id><snippet>def = variable.get('abc', {}).get('def',None)
</snippet></ROW><ROW><id>11515870</id><snippet>_('%(inviter)s invited %(invitee)s.') % {'inviter': 'Cathy', 'invitee': 'Thomas'}
             ↓↓↓↓↓↓↓
 u'%(invitee)s 被 %(inviter)s 邀請了.'
</snippet></ROW><ROW><id>11516406</id><snippet>from multiprocessing import Process, Queue
import time

def reader(queue):
    ## Read from the queue
    while True:
        msg = queue.get()         # Read from the queue and do nothing
        if (msg == 'DONE'):
            break

def writer(count, queue):
    ## Write to the queue
    for ii in xrange(0, count):
        queue.put(ii)             # Write 'count' numbers into the queue
    queue.put('DONE')

if __name__=='__main__':
    for count in [10**4, 10**5, 10**6]:
        queue = Queue()   # reader() reads from queue
                          # writer() writes to queue
        reader_p = Process(target=reader, args=((queue),))
        reader_p.daemon = True
        reader_p.start()        # Launch reader() as a separate python process

        _start = time.time()
        writer(count, queue)    # Send a lot of stuff to reader()
        reader_p.join()         # Wait for the reader to finish
        print "Sending %s numbers to Queue() took %s seconds" % (count, 
            (time.time() - _start))
</snippet></ROW><ROW><id>11516682</id><snippet>chcp 65001</snippet></ROW><ROW><id>11516983</id><snippet>rv = "command"
rv_args = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def get_arguments(rv, rv_args):
    arguments = [rv]
    for i in xrange(0, len(rv_args), 2):
        arguments += ["["] + rv_args[i:i+2] + ["]"]

    return arguments

print get_arguments(rv, rv_args)
</snippet></ROW><ROW><id>11516983</id><snippet>['command', '[', 1, 2, ']', '[', 3, 4, ']', '[', 5, 6, ']', '[', 7, 8, ']', '[', 9, 10, ']']
</snippet></ROW><ROW><id>11517025</id><snippet>pysqlite</snippet></ROW><ROW><id>11517359</id><snippet>_ast</snippet></ROW><ROW><id>11517359</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>11517506</id><snippet>is</snippet></ROW><ROW><id>11517703</id><snippet>vpfit95</snippet></ROW><ROW><id>11517703</id><snippet>communicate</snippet></ROW><ROW><id>11517703</id><snippet>proc = subprocess.Popen([vpfitExecutable], stdin=subprocess.PIPE)
proc.communicate(input='your string') 
</snippet></ROW><ROW><id>11517703</id><snippet>communicate</snippet></ROW><ROW><id>11517703</id><snippet>shell=True</snippet></ROW><ROW><id>11518104</id><snippet>pass</snippet></ROW><ROW><id>11518272</id><snippet>def test_func(arg1, *args, **kwargs):
    optional_arg = kwargs.get('optional_arg')
    ...
</snippet></ROW><ROW><id>11518272</id><snippet>&gt;&gt;&gt; test_func("foo", optional_arg="bar", arg1, arg2, ...)
  File "&lt;stdin&gt;", line 1
SyntaxError: non-keyword arg after keyword arg
&gt;&gt;&gt; test_func("foo", arg1, arg2, ..., optional_arg="bar")
...
&gt;&gt;&gt; test_func("foo", arg1, arg2, ...)
...
</snippet></ROW><ROW><id>11518276</id><snippet>import xml.etree.ElementTree as etree

english_tree = etree.parse('en.xml')
french_tree = etree.parse('fr.xml')

# Get the root elements, as they support iteration
# through their children (direct descendants)
english_root = english_tree.getroot()
french_root = french_tree.getroot()

# Iterate through the direct descendants of the root
# elements in both trees in parallel.
for en, fr in zip(english_root, french_root):
   assert en.tag == fr.tag # check for the same structure
   if en.tag == 'id':
       assert en.text == fr.text # check for the same id

   elif en.tag == 'string':
       if fr.text is None:
           fr.text = en.text
           print en.text      # displaying what was replaced

etree.dump(french_tree)
</snippet></ROW><ROW><id>11518276</id><snippet>import xml.etree.ElementTree as etree

english_tree = etree.parse('en.xml')
french_tree = etree.parse('fr.xml')

for en, fr in zip(english_tree.iter(), french_tree.iter()):
   assert en.tag == fr.tag        # check if the structure is the same
   if en.tag == 'id':
       assert en.text == fr.text  # identification must be the same
   elif en.tag == 'string':
       if fr.text is None:
           fr.text = en.text
           print en.text          # display the inserted text

# Write the result to the output file.
with open('fr2.xml', 'w') as fout:
    fout.write(etree.tostring(french_tree.getroot()))
</snippet></ROW><ROW><id>11518276</id><snippet>import xml.etree.ElementTree as etree

def find_translation(tree, id_):
    # Search fot the GH element with the given identification, and return
    # its translation if found. Otherwise None is returned implicitly.
    for gh in tree.iter('GH'):
       id_elem = gh.find('./id')
       if id_ == id_elem.text:
           # The related GH element found.
           # Find metadata entry, extract the translation.
           # Warning! This is simplification for the fixed position 
           # of the Translation entry.
           me = gh.find('./metadata/entry')
           assert len(me) == 2     # metadata/entry has two elements
           cl1 = me[0]
           assert cl1.text == 'Translation'
           cl2 = me[1]

           return cl2.text


# Body of the program. --------------------------------------------------

english_tree = etree.parse('en.xml')
french_tree = etree.parse('fr.xml')

for gh in french_tree.iter('GH'): # iterate through the GH elements only 
   # Get the identification of the GH section
   id_elem = gh.find('./id')      
   id_ = id_elem.text

   # Find and check the metadata entry, extract the French translation.
   # Warning! This is simplification for the fixed position of the Translation 
   # entry.
   me = gh.find('./metadata/entry')
   assert len(me) == 2     # metadata/entry has two elements
   cl1 = me[0]
   assert cl1.text == 'Translation'
   cl2 = me[1]
   fr_translation = cl2.text

   # If the French translation is empty, put there the English translation
   # from the related element.
   if cl2.text is None:
       cl2.text = find_translation(english_tree, id_)


with open('fr2.xml', 'w') as fout:
   fout.write(etree.tostring(french_tree.getroot()).decode('utf-8'))
</snippet></ROW><ROW><id>11518390</id><snippet>Voltage</snippet></ROW><ROW><id>11518390</id><snippet>Resistance</snippet></ROW><ROW><id>11518390</id><snippet>ForeignKey</snippet></ROW><ROW><id>11518390</id><snippet>Device</snippet></ROW><ROW><id>11518401</id><snippet>import json 
output = json.dumps(d_target)

f = open("myfile", 'w')
f.write(output)
f.close()
</snippet></ROW><ROW><id>11518401</id><snippet>from elementtree import ElementTree as ETree
ET = ETree
ET.xml_declaration = "true"
products = ET.Element("products")
properties = ET.Element("properties")
products.append(properties)
products.attrib["xmlns"] = "http://schema.example.com/product_data_1.0"
update = ET.Element("update")
delete = ET.Element("delete")
products.append(delete)
products.append(update)
</snippet></ROW><ROW><id>11518401</id><snippet> &lt;products xmlns="http://schema.example.com/product_data_1.0"&gt;
      &lt;properties /&gt;
      &lt;delete /&gt;
      &lt;update /&gt;
 &lt;/products&gt;
</snippet></ROW><ROW><id>11518401</id><snippet>output = ET.tostring(products, "utf-8")
f = open("xml", 'w')
f.write(output)
f.close()
</snippet></ROW><ROW><id>11518762</id><snippet>unittest</snippet></ROW><ROW><id>11518762</id><snippet>unittest.py</snippet></ROW><ROW><id>11518762</id><snippet>unittest</snippet></ROW><ROW><id>11518762</id><snippet>__init__.py</snippet></ROW><ROW><id>11518762</id><snippet>unittest</snippet></ROW><ROW><id>11518762</id><snippet>list</snippet></ROW><ROW><id>11518762</id><snippet>dict</snippet></ROW><ROW><id>11518762</id><snippet>map</snippet></ROW><ROW><id>11518945</id><snippet>import sys
import socket
from time import sleep
import threading

class ConnectionThread ( threading.Thread ):
    def __init__(self):
        self.ip = raw_input ("please insert host ip: ")
        self.port = input ("please insert port to fuzz: ")
        self.header = raw_input ("please enter the header you want to fuzz, put &amp; in the place you want to fuzz: ")
        self.packet = raw_input ("what string would you like to fuzz the header with? : ")
        self.multi = input ("in what jumps would you liike to multiply the string ? : ")
        self.process = input ("please insert number of threads: ")
        self.host = self.ip, self.port
        self.char = self.packet * self.multi
        self.a = 1

    def run ( self ):
        while self.a &gt; 0:
            try:
                s = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
                s.connect((self.host))
                self.header = self.header.replace("&amp;", self.packet)
                s.send(self.header)
                s.settimeout(7)
                data = s.recv(4)
                if data &gt; 0:
                    print "got awnser"
                else:
                    print "no awnser"   
                sleep(0.1) 
                print "Fuzzing With:", header
                self.header = self.header.replace (self.packet, "&amp;")
                self.packet = self.char + self.packet 
                s.close()
            except Exception as e:
                print e   
                s.close()
                sys.exit(0)

for x in xrange ( ConnectionThread.process ):
   ConnectionThread().start()
</snippet></ROW><ROW><id>11518987</id><snippet>order_by</snippet></ROW><ROW><id>11518987</id><snippet>class Project(Base):
    # ...
    submissions = relationship('Submission',
        backref='Project', order_by='Submission.timestamp')
</snippet></ROW><ROW><id>11519239</id><snippet>s = paramiko.SSHClient()
s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
s.connect("xxx.xxx.xxx.xxx",22,username=xxx,password='',timeout=4)

sftp = s.open_sftp()
sftp.put('/home/me/file.ext', '/remote/home/file.ext')
</snippet></ROW><ROW><id>11519320</id><snippet>one</snippet></ROW><ROW><id>11519320</id><snippet>     try:
         obj = db.session.query(Job).filter_by(uuid=job_uuuid).one()
     except NoResultFound:
         raise
     except MultipleResultsFound:
         raise RuntimeError('Got more than one job by UUID.')
     else:  
         db.session.delete(obj)
         db.session.commit()
</snippet></ROW><ROW><id>11519570</id><snippet>[tag.attrs for tag in soup.findAll(True) if tag.string]
</snippet></ROW><ROW><id>11519570</id><snippet>.findAll(True)</snippet></ROW><ROW><id>11519570</id><snippet>.attr</snippet></ROW><ROW><id>11519570</id><snippet>.string</snippet></ROW><ROW><id>11519686</id><snippet>Queue</snippet></ROW><ROW><id>11519686</id><snippet>@cherrypy.expose
def interlocked(self, _=None):
    cherrypy.response.headers["Content-Type"] = "text/event-stream;charset=utf-8"
    if _:
        data = 'retry: 400\ndata: ' + str(self.isInterlocked) + '\n\n'
        return data
    else:
        def content():
            data = 'retry: 400\ndata: ' + str(self.isInterlocked) + '\n\n'
            return data
        return content()
interlocked._cp_config = {'response.stream': True, 'tools.encode.encoding':'utf-8'}
</snippet></ROW><ROW><id>11519819</id><snippet>max</snippet></ROW><ROW><id>11519819</id><snippet>sum</snippet></ROW><ROW><id>11519819</id><snippet>max(x, key=sum)
</snippet></ROW><ROW><id>11519819</id><snippet>&gt;&gt;&gt; x = [[1,2,3], [4,5,6], [7,8,9], [2,2,0]]
&gt;&gt;&gt; max(x, key=sum)
[7, 8, 9]
</snippet></ROW><ROW><id>11519819</id><snippet>&gt;&gt;&gt; def mymaxfunction(item):
...     return sum(map(int, item))
...
&gt;&gt;&gt; max([['1', '2', '3'], ['7', '8', '9']], key=mymaxfunction)
['7', '8', '9']
</snippet></ROW><ROW><id>11519914</id><snippet>.split</snippet></ROW><ROW><id>11519914</id><snippet>x = "Hi there and hello there";
var array = x.split(" ");
</snippet></ROW><ROW><id>11519914</id><snippet>array[0]
array[1]
array[2]
</snippet></ROW><ROW><id>11519914</id><snippet>console.log(array[0]);
alert(array[0]);
</snippet></ROW><ROW><id>11520163</id><snippet>int**</snippet></ROW><ROW><id>11520163</id><snippet>ctypes.POINTER(ctypes.POINTER(ctypes.c_int))
</snippet></ROW><ROW><id>11520163</id><snippet>ctypes.c_int * width * height
</snippet></ROW><ROW><id>11520163</id><snippet>m.data = (ctypes.c_int * width * height)()
</snippet></ROW><ROW><id>11520163</id><snippet>height</snippet></ROW><ROW><id>11520163</id><snippet>width</snippet></ROW><ROW><id>11520163</id><snippet>c_int</snippet></ROW><ROW><id>11520163</id><snippet>m.data = new int[width][height];
</snippet></ROW><ROW><id>11520163</id><snippet>m.data = (int**) malloc(sizeof(int) * width * height)
</snippet></ROW><ROW><id>11520265</id><snippet>&gt;&gt;&gt; def my_func(*args):
...     return sum(args)
...
&gt;&gt;&gt; my_func(1,2,3,4)
10
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11520265</id><snippet>&gt;&gt;&gt; def my_func(*args):
...   return reduce((lambda x, y: x + y), args)
...
&gt;&gt;&gt; my_func(1,2,3,4)
10
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11520265</id><snippet>lambda</snippet></ROW><ROW><id>11520265</id><snippet>sum</snippet></ROW><ROW><id>11520265</id><snippet>key</snippet></ROW><ROW><id>11520265</id><snippet>max</snippet></ROW><ROW><id>11520265</id><snippet>sum</snippet></ROW><ROW><id>11520367</id><snippet>xrange(len(list_of_items))</snippet></ROW><ROW><id>11520367</id><snippet>zip</snippet></ROW><ROW><id>11520367</id><snippet>(this,next)</snippet></ROW><ROW><id>11520367</id><snippet>A,B,C,D = [],[],[],[]
for this_,next_ in zip(matrix_x,matrix_x[1:]):
    A.append(this_[:n])
    B.append(this_[n:])
    C.append(next_[:n])
    D.append(next_[n:])
</snippet></ROW><ROW><id>11520367</id><snippet>zip</snippet></ROW><ROW><id>11520367</id><snippet>zip</snippet></ROW><ROW><id>11520367</id><snippet>A,B,C,D = zip(*((this_[:n],this_[n:],next_[:n],next_[n:])
                  for this_,next_ in zip(matrix_x,matrix_x[1:])))
</snippet></ROW><ROW><id>11520453</id><snippet>import traceback
import inspect
import gc

def giveupthefunc(frame):
    code  = frame.f_code
    globs = frame.f_globals
    functype = type(lambda: 0)
    funcs = []
    for func in gc.get_referrers(code):
        if type(func) is functype:
            if getattr(func, "func_code", None) is code:
                if getattr(func, "func_globals", None) is globs:
                    funcs.append(func)
                    if len(funcs) &gt; 1:
                        return None
    return funcs[0] if funcs else None


def AssertTrue(expr, reason=None):
    print traceback.format_stack()[-2]
    frame = inspect.currentframe().f_back
    func = giveupthefunc(frame)
    if func:
        source = inspect.getsourcelines(func)
        i = source[1]
        for line in source[0]:
            print i, ":", line,
            i += 1



def my_fun():
    AssertTrue(1 == 2,
             reason='One is not equal to two')

my_fun()
</snippet></ROW><ROW><id>11520453</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python /Users/xxxx/Documents/PycharmProjects/scratchpad/test.py
  File "/Users/xxxx/Documents/PycharmProjects/scratchpad/test.py", line 35, in my_fun
    reason='One is not equal to two')

33 : def my_fun():
34 :     AssertTrue(1 == 2,
35 :              reason='One is not equal to two')
</snippet></ROW><ROW><id>11520540</id><snippet>remove</snippet></ROW><ROW><id>11520540</id><snippet>&gt;&gt;&gt; a = [0, 2, 2, 3]
&gt;&gt;&gt; a.remove(2)
&gt;&gt;&gt; a
[0, 2, 3]
</snippet></ROW><ROW><id>11520540</id><snippet>del</snippet></ROW><ROW><id>11520540</id><snippet>&gt;&gt;&gt; a = [3, 2, 2, 1]
&gt;&gt;&gt; del a[1]
[3, 2, 1]
</snippet></ROW><ROW><id>11520540</id><snippet>pop</snippet></ROW><ROW><id>11520540</id><snippet>&gt;&gt;&gt; a = [4, 3, 5]
&gt;&gt;&gt; a.pop(1)
3
&gt;&gt;&gt; a
[4, 5]
</snippet></ROW><ROW><id>11520540</id><snippet>&gt;&gt;&gt; a = [4, 5, 6]
&gt;&gt;&gt; a.remove(7)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: list.remove(x): x not in list
&gt;&gt;&gt; del a[7]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range
&gt;&gt;&gt; a.pop(7)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: pop index out of range
</snippet></ROW><ROW><id>11520582</id><snippet>input()</snippet></ROW><ROW><id>11520582</id><snippet>raw_input()</snippet></ROW><ROW><id>11520582</id><snippet>a = int(a)</snippet></ROW><ROW><id>11520582</id><snippet>def get_cube_dims():
    x = int( raw_input('Enter x:') )
    y = int( raw_input('Enter y:') )
    z = int( raw_input('Enter z:') )
    print 'The volume is: {}'.format(x*y*z)
</snippet></ROW><ROW><id>11520674</id><snippet>a = [ 1, 2, 3]
def myfunc(a, b, c):
    return a + b + c

print myfunc(*a)
</snippet></ROW><ROW><id>11520748</id><snippet>$</snippet></ROW><ROW><id>11520748</id><snippet>vi</snippet></ROW><ROW><id>11520748</id><snippet>od -cx yourfile</snippet></ROW><ROW><id>11520768</id><snippet>word</snippet></ROW><ROW><id>11520768</id><snippet>def filter_list(li, word):
    return sorted((elem for elem in li if word.lower() in elem.lower()), key=len)
</snippet></ROW><ROW><id>11521085</id><snippet>from gluon.custom_import import track_changes
track_changes(True)
</snippet></ROW><ROW><id>11521545</id><snippet>def get_direction_db(self.nod_id1, self.nod_id2):
    cursor = connection.cursor()
    cursor.execute("SELECT GETDIRECTIONDB(262,265) from sys.dual")
    result = cursor.fetchall()
    return result[0]  # or whatever

class MyModel(models.Model):
    nod_id1 = models.ForeignKey('Eonodes',..)
    nod_id2 = models.ForeignKey('Eonodes',..)
    directiondb = models.IntegerField()

    def save(self, *args, **kwargs):
        self.directiondb = get_direction_db(self.nod_id1, self.nod_id2)
        super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>11521976</id><snippet>class mytime(object):

    def __init__(self, h, m):
        self.h = h
        self.m = m

    def __add__(self, other):
        return mytime(self.h + other.h, self.m + other.m)

    def __repr__(self):
        return '%i:%i' % (self.h, self.m)
</snippet></ROW><ROW><id>11521976</id><snippet>a = mytime(10, 10)        
b = mytime(2, 22)
print a + b 
</snippet></ROW><ROW><id>11521976</id><snippet>l = [a, b]
print sum(l)
</snippet></ROW><ROW><id>11521976</id><snippet>sum</snippet></ROW><ROW><id>11521976</id><snippet>0</snippet></ROW><ROW><id>11521976</id><snippet>0 + mytime(10, 10)    
</snippet></ROW><ROW><id>11521976</id><snippet>__radd__</snippet></ROW><ROW><id>11521976</id><snippet>x + y</snippet></ROW><ROW><id>11521976</id><snippet>x.__add__(y)</snippet></ROW><ROW><id>11521976</id><snippet>y.__radd__(x)</snippet></ROW><ROW><id>11521976</id><snippet>def __radd__(self, other):
    return mytime(self.h, self.m)
</snippet></ROW><ROW><id>11521976</id><snippet>sum</snippet></ROW><ROW><id>11521976</id><snippet>other</snippet></ROW><ROW><id>11521983</id><snippet>|</snippet></ROW><ROW><id>11522389</id><snippet>cmdline = [
    'avconv',
    '-i',
    'concat:/tmp/BABAR_AND_THE_A-011A-hts-a-v1-cc3651d01841d748_Layer6/6148_Period1/segment0.ts|/tmp/BABAR_AND_THE_A-011A-hts-a-v1-cc3651d01841d748_Layer6/6148_Period1/segment1.ts',
    '-vcodec',
    'copy',
    '-acodec',
    'copy',
    '/tmp/test1.ts',
]
subprocess.call(cmdline)
</snippet></ROW><ROW><id>11522398</id><snippet>src</snippet></ROW><ROW><id>11522398</id><snippet>src</snippet></ROW><ROW><id>11522398</id><snippet>sys.path</snippet></ROW><ROW><id>11522398</id><snippet>import src #this imports the base package
from src.foo2.foo2 import *

...
</snippet></ROW><ROW><id>11523032</id><snippet>from itertools import chain

full_result = {}

for blah in chain.from_iterable(d.itervalues() for d in (API1, API2, API3)):
    for d in blah:
        full_result[d['url']] = {
            'title': d['title'],
            'snippet': d['snippet'],
            'score': ScoredResults[d['url']]
        }

print full_result
</snippet></ROW><ROW><id>11523128</id><snippet>decimal</snippet></ROW><ROW><id>11523128</id><snippet>mpmath</snippet></ROW><ROW><id>11523128</id><snippet>decimal</snippet></ROW><ROW><id>11523128</id><snippet>sqrt</snippet></ROW><ROW><id>11523128</id><snippet>math</snippet></ROW><ROW><id>11523128</id><snippet>from decimal import *
import math

getcontext().prec = 30
num = Decimal(1) / Decimal(7)

print("   math.sqrt: {0}".format(Decimal(math.sqrt(num))))
print("decimal.sqrt: {0}".format(num.sqrt()))
</snippet></ROW><ROW><id>11523128</id><snippet>   math.sqrt: 0.37796447300922719758631274089566431939601898193359375
decimal.sqrt: 0.377964473009227227214516536234
actual value: 0.3779644730092272272145165362341800608157513118689214
</snippet></ROW><ROW><id>11523128</id><snippet>decimal</snippet></ROW><ROW><id>11523162</id><snippet># main.py
import lib
deviceid = 123
lib.get_a()

# lib.py
import main
def get_a():
    print main.deviceid
</snippet></ROW><ROW><id>11523162</id><snippet># main.py
import lib
deviceid = 123
lib.get_a(deviceid)

# lib.py
def get_a(deviceid):
    print deviceid
</snippet></ROW><ROW><id>11523245</id><snippet>[range(0,10)]</snippet></ROW><ROW><id>11523245</id><snippet>plt.plot(range(0,10), dictionary[key],'bo-')
</snippet></ROW><ROW><id>11523682</id><snippet>mp.Process()</snippet></ROW><ROW><id>11523682</id><snippet>multiprocessing.Process([group[, target[, name[, args[, kwargs]]]]])
</snippet></ROW><ROW><id>11523682</id><snippet>jobs.append(mp.Process(group=None, target=G_Sim, args=(lmbda,mu,c,skip_cost,simulation_time,Policy,warmup_period,False,)))
</snippet></ROW><ROW><id>11523785</id><snippet>import urllib2
data = urllib2.urlopen("some_url")
html_data = data.read()
soup = BeautifulSoup(html_data)

for a in soup.findAll('a',href=True):
    print a['href']
</snippet></ROW><ROW><id>11524002</id><snippet>def parsePage(self, response):
    hxs = HtmlXPathSelector(response)
    urls_list_odd_id = hxs.select('//table[@class="iCIMS_JobsTable"]/tr/td[@class="iCIMS_JobsTableOdd iCIMS_JobsTableField_1"]/a/@href').extract()
    print urls_list_odd_id,"&gt;&gt;&gt;&gt;&gt;&gt;&gt;odddddd&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"
    urls_list_even_id = hxs.select('//table[@class="iCIMS_JobsTable"]/tr/td[@class="iCIMS_JobsTableEven iCIMS_JobsTableField_1"]/a/@href').extract()
    print urls_list_odd_id,"&gt;&gt;&gt;&gt;&gt;&gt;&gt;Evennnn&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"

    if not urls_list_odd_id or not urls_list_odd_id:
        from scrapy.shell import inspect_response
        inspect_response(response)

    urls_list = []
    urls_list.extend(urls_list_odd_id)
    urls_list.extend(urls_list_even_id)
    for i in urls_list:
        yield Request(i.encode('utf-8'), callback=self.parseJob)
</snippet></ROW><ROW><id>11524002</id><snippet>view(response)</snippet></ROW><ROW><id>11524152</id><snippet>from datetime import datetime
now = datetime.now()
</snippet></ROW><ROW><id>11524152</id><snippet>datetime.strptime</snippet></ROW><ROW><id>11524152</id><snippet># I'm just creating a datetime in 3 hours... (you'd use output from above)
from datetime import timedelta
run_at = now + timedelta(hours=3)
delay = (run_at - now).total_seconds()
</snippet></ROW><ROW><id>11524152</id><snippet>delay</snippet></ROW><ROW><id>11524152</id><snippet>threading.Timer</snippet></ROW><ROW><id>11524152</id><snippet>threading.Timer(delay, self.update).start()
</snippet></ROW><ROW><id>11524228</id><snippet>&lt;LIMIT GET&gt;</snippet></ROW><ROW><id>11524228</id><snippet>&lt;LIMIT GET POST&gt;</snippet></ROW><ROW><id>11524534</id><snippet>s</snippet></ROW><ROW><id>11524534</id><snippet>0</snippet></ROW><ROW><id>11524534</id><snippet>amount</snippet></ROW><ROW><id>11524534</id><snippet>s += float(amount)
</snippet></ROW><ROW><id>11524534</id><snippet>csv</snippet></ROW><ROW><id>11524613</id><snippet>sys.last_value</snippet></ROW><ROW><id>11524613</id><snippet>In [8]: 1/0
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)

/home/ubuntu/&lt;ipython console&gt; in &lt;module&gt;()

ZeroDivisionError: integer division or modulo by zero

In [11]: sys.last_value
Out[11]: ZeroDivisionError('integer division or modulo by zero',)
</snippet></ROW><ROW><id>11524746</id><snippet>base</snippet></ROW><ROW><id>11524746</id><snippet>a = np.arange(50)
b = a.reshape((5, 10))
print (b.base is a)
</snippet></ROW><ROW><id>11524746</id><snippet>np.may_share_memory</snippet></ROW><ROW><id>11524746</id><snippet>print (np.may_share_memory(a, b))
</snippet></ROW><ROW><id>11524746</id><snippet>print (b.flags['OWNDATA'])  #False -- apparently this is a view
e = np.ravel(b[:, 2])
print (e.flags['OWNDATA'])  #True -- Apparently this is a new numpy object.
</snippet></ROW><ROW><id>11524978</id><snippet>mytext = """Some text
Some more text
etc...
"""
</snippet></ROW><ROW><id>11525205</id><snippet>terminal_widget</snippet></ROW><ROW><id>11525205</id><snippet>import atexit

from IPython.zmq.ipkernel import IPKernelApp
from IPython.lib.kernel import find_connection_file
from IPython.frontend.qt.kernelmanager import QtKernelManager
from IPython.frontend.qt.console.rich_ipython_widget import RichIPythonWidget
from IPython.utils.traitlets import TraitError
from PyQt4 import QtGui, QtCore

def event_loop(kernel):
    kernel.timer = QtCore.QTimer()
    kernel.timer.timeout.connect(kernel.do_one_iteration)
    kernel.timer.start(1000*kernel._poll_interval)

def default_kernel_app():
    app = IPKernelApp.instance()
    app.initialize(['python', '--pylab=qt'])
    app.kernel.eventloop = event_loop
    return app

def default_manager(kernel):
    connection_file = find_connection_file(kernel.connection_file)
    manager = QtKernelManager(connection_file=connection_file)
    manager.load_connection_file()
    manager.start_channels()
    atexit.register(manager.cleanup_connection_file)
    return manager

def console_widget(manager):
    try: # Ipython v0.13
        widget = RichIPythonWidget(gui_completion='droplist')
    except TraitError:  # IPython v0.12
        widget = RichIPythonWidget(gui_completion=True)
    widget.kernel_manager = manager
    return widget

def terminal_widget(**kwargs):
    kernel_app = default_kernel_app()
    manager = default_manager(kernel_app)
    widget = console_widget(manager)

    #update namespace                                                           
    kernel_app.shell.user_ns.update(kwargs)

    kernel_app.start()
    return widget

app = QtGui.QApplication([])
widget = terminal_widget(testing=123)
widget.show()
app.exec_()
</snippet></ROW><ROW><id>11525469</id><snippet>print(err.args[1])
</snippet></ROW><ROW><id>11525531</id><snippet>os.system("C:\\FIOCheck\\xutil.exe  -i get phy" +HBEA + "&gt;C:\\FIOCheck\\HBEAResult.txt")
</snippet></ROW><ROW><id>11525531</id><snippet>os.system("C:\\FIOCheck\\xutil.exe  -i get phy " +HBEA + "&gt;C:\\FIOCheck\\HBEAResult.txt")
</snippet></ROW><ROW><id>11525531</id><snippet>cmd = "C:\\FIOCheck\\xutil.exe  -i get phy " +HBEA + "&gt;C:\\FIOCheck\\HBEAResult.txt"
print cmd
os.system(cmd)
</snippet></ROW><ROW><id>11526153</id><snippet>between_dates = dict([(d[2], (d[0], d[1])) for d in datepairs1])
second_dict = {}
for m in mv:
    key = m[7]
    second_dict.setdefault(key ,[])  # this creates the key with an empty list inside if it doesn't exists yet
    second_dict[key].append((m[0], m[8]))
</snippet></ROW><ROW><id>11526153</id><snippet>between_dates = {'C1': ('21 05 01', '04 06 01'), ....}
second_dict = {'C1': [('05/13/2012', '13 05 12'), ('05/13/2012', '13 05 12')]}
</snippet></ROW><ROW><id>11526153</id><snippet>datetime.strptime('02 06 2011', '%d %m %Y')</snippet></ROW><ROW><id>11526153</id><snippet>visits_between_dates=[]
for key, bd in between_dates.items():
    if second_dict.get(key, None):  # This will ask if the se
        for sl  in second_dict.values():
            if not sl in visits_between_dates and bd[0]&lt;= sl[1] &lt;= bd[1]:
                visitsbetweendates.append(sl)
</snippet></ROW><ROW><id>11526266</id><snippet>-B</snippet></ROW><ROW><id>11526311</id><snippet>from maya import cmds
import math

dags = ['obj']
attrs = ['sx', 'sy', 'sz']
tol = 0.001

for dag in dags:
    frames = [frame for frame in cmds.keyframe(dag, q=1)]
    for frame in frames:
        attrib_vals = [cmds.getAttr(dag+'.'+attr, time=frame) for attr in attrs]
        length = math.sqrt(sum(attr_val * attr_val for attr_val in attrib_vals))
        if length &lt; tol:
            cmds.setKeyframe(dag, at=attrs, t=[frame], v=0)
</snippet></ROW><ROW><id>11526365</id><snippet>top</snippet></ROW><ROW><id>11526559</id><snippet>def has_prop1(cls):
    @property
    def prop1(self):
        return self._prop1

    cls.prop1 = prop1

    return cls

@has_prop1
class A(object):
    pass
</snippet></ROW><ROW><id>11526559</id><snippet>@has_prop1
@has_prop2
class B(object):
    pass
</snippet></ROW><ROW><id>11526559</id><snippet>def has_many_properties(cls):
    return has_prop1(has_prop2(has_prop3(cls)))

@has_many_properties
class C(object):
    pass
</snippet></ROW><ROW><id>11526773</id><snippet>raise Exception("A custom message as to why you raised this.")
</snippet></ROW><ROW><id>11526806</id><snippet> # Class variables updated by _fix_up_properties()
 _properties = None
</snippet></ROW><ROW><id>11526806</id><snippet>  @classmethod
  def _fix_up_properties(cls):
  """Fix up the properties by calling their _fix_up() method.

  Note: This is called by MetaModel, but may also be called manually
  after dynamically updating a model class.
  """
</snippet></ROW><ROW><id>11526995</id><snippet>[[seconds1, flowdata1, key1], [seconds2, flowdata2, key2], ...]</snippet></ROW><ROW><id>11526995</id><snippet>super_list.sort()</snippet></ROW><ROW><id>11526995</id><snippet>seconds</snippet></ROW><ROW><id>11526995</id><snippet>key</snippet></ROW><ROW><id>11526995</id><snippet>sort</snippet></ROW><ROW><id>11526995</id><snippet>super_list.sort(key=lambda row: row[0]) #sort by seconds field
</snippet></ROW><ROW><id>11527011</id><snippet>import random</snippet></ROW><ROW><id>11527011</id><snippet>random.seed(n)</snippet></ROW><ROW><id>11527011</id><snippet>random</snippet></ROW><ROW><id>11527199</id><snippet>requests</snippet></ROW><ROW><id>11527199</id><snippet>import requests
response = requests.get(url)
html = response.text
</snippet></ROW><ROW><id>11527199</id><snippet>response = mechanize.urlopen("http://foo.bar.com/")
html = response.read() # or readlines 
</snippet></ROW><ROW><id>11527204</id><snippet>data = {}
    for line in inlist:
        k, v = [x.strip() for x in line.split('\t')]
        data[k] = v

    for line in infile:
        infilecolumns = line.strip().split('\t')

        value1 = data.get(infilecolumns[2])
        value2 = data.get(infilecolumns[5])

        if value1:
            infilecolumns[2] = value1
        if value2:
            infilecolumns[5] = value2

        outfile.write('\t'.join(infilecolumns) + '\n')
</snippet></ROW><ROW><id>11527270</id><snippet>pyfits.header.Header</snippet></ROW><ROW><id>11527270</id><snippet>import pyfits

keys = ['SIMPLE', 'TELESCOP', 'INSTRUME', 'OBJECTS', 'RA_OBJ', 'DEV_OBJ']

hdulist = pyfits.open("data.fits")
header = hdulist[0].header
for k in keys:
    print k, "=", header[k]
</snippet></ROW><ROW><id>11527270</id><snippet>asciitable</snippet></ROW><ROW><id>11527270</id><snippet>numpy</snippet></ROW><ROW><id>11527270</id><snippet>import asciitable
import numpy as np

keys = ['RA', 'DEC']
data = {}

# Initialize "data" with empty lists for each key
for k in keys:
    data[k] = []

# Collect all data in the "data" dictionary
for i in range(0, 50):
    data['RA'].append(np.array(i))
    data['DEC'].append(np.array(i+1))

asciitable.write(data, "coords.dat", names=keys)
</snippet></ROW><ROW><id>11527379</id><snippet>containment</snippet></ROW><ROW><id>11527379</id><snippet>@notfound_view_config(containment=Foo)
def notfound(request):
    return HTTPNotFound('no views for Foo detected for view %s' % request.view_name)
</snippet></ROW><ROW><id>11527431</id><snippet>import os, re
path = 'C:/Temp/Folder1/allTexts'
listing = os.listdir(path)
for infile in listing:
    text = open(path + '/' + infile).read()
    match = re.search('&lt;div id="text-interesting1"&gt;', text)
    if match is None:
        continue
    start = match.start()
    end = re.search('&lt;div id="text-interesting2"&gt;', text).start()
    print text[start:end]
</snippet></ROW><ROW><id>11527844</id><snippet>Video</snippet></ROW><ROW><id>11527844</id><snippet>ForeignKey</snippet></ROW><ROW><id>11527844</id><snippet>Channel</snippet></ROW><ROW><id>11527844</id><snippet>ManyToManyField</snippet></ROW><ROW><id>11527844</id><snippet>Video</snippet></ROW><ROW><id>11527872</id><snippet>import re
ss = 'Mandrake 9.2 (32 bit)'
new_line = re.sub(r'\(.*?\)','',ss)  #'Mandrake 9.2 '
</snippet></ROW><ROW><id>11527872</id><snippet>new_line = re.sub(r'(?:\d+(?:\.\d+)*\s*)?(?:\(.*?\))?','',ss)
</snippet></ROW><ROW><id>11527872</id><snippet>number.number.number...</snippet></ROW><ROW><id>11527947</id><snippet>telnetlib.Telnet.__init__(self, host, port, timeout)
</snippet></ROW><ROW><id>11527947</id><snippet>self</snippet></ROW><ROW><id>11527947</id><snippet>telnet.Telnet.__init__</snippet></ROW><ROW><id>11527947</id><snippet>&gt;&gt;&gt; Test.__init__
&lt;unbound method Test.__init__&gt;
&gt;&gt;&gt; Test().__init__
&lt;bound method Test.__init__ of &lt;__main__.Test instance at 0x7fb54c984e18&gt;&gt;
&gt;&gt;&gt; Test.__init__()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method __init__() must be called with Test instance as first argument (got nothing instead)
</snippet></ROW><ROW><id>11528216</id><snippet>def print_counter(val, msg):
    print "%s[%d] %s" % (" "*val, val, msg)

def answer_solve_sudoku(__grid, counter=0):

    res = check_sudoku(__grid)
    if res is None or res is False:
        return res

    grid = copy.deepcopy(__grid)

    for row in xrange(9):
        for col in xrange(9):
            if grid[row][col] == 0:
                for n in xrange(1, 10):
                    grid[row][col] = n
                    print_counter(counter,"test: (row %d, col %d) = %d" % (row,col,n))
                    new = answer_solve_sudoku(grid, counter+1)
                    if new is not False:
                        print_counter(counter, "answer_solve_sudoku() solved: returning")
                        return new
                # backtrack
                print_counter(counter, "backtrack")
                return False

    print_counter(counter, "**SOLVED! Returning back up to top**")
    return grid

from pprint import pprint 
solution = answer_solve_sudoku(easy_grid)
pprint(solution)
</snippet></ROW><ROW><id>11528216</id><snippet>answer_solve_sudoku</snippet></ROW><ROW><id>11528216</id><snippet>[0] test: (row 0, col 2) = 1
[0] test: (row 0, col 2) = 2
[0] test: (row 0, col 2) = 3
[0] test: (row 0, col 2) = 4
 [1] test: (row 0, col 3) = 1
  [2] test: (row 0, col 4) = 1
  [2] test: (row 0, col 4) = 2
  [2] test: (row 0, col 4) = 3
    ... 
         [45] test: (row 7, col 7) = 8
         [45] test: (row 7, col 7) = 9
         [45] backtrack
        [44] test: (row 7, col 5) = 6
        [44] test: (row 7, col 5) = 7
    ... 
               [51] test: (row 8, col 6) = 6
               [51] test: (row 8, col 6) = 7
                [52] **SOLVED! Returning back up to top**
               [51] answer_solve_sudoku() solved: returning
              [50] answer_solve_sudoku() solved: returning
             [49] answer_solve_sudoku() solved: returning
    ... 
  [2] answer_solve_sudoku() solved: returning
 [1] answer_solve_sudoku() solved: returning
[0] answer_solve_sudoku() solved: returning
</snippet></ROW><ROW><id>11528216</id><snippet>answer_solve_sudoku</snippet></ROW><ROW><id>11528216</id><snippet>new = answer_solve_sudoku(grid)</snippet></ROW><ROW><id>11528293</id><snippet>sys.argv</snippet></ROW><ROW><id>11528293</id><snippet>$ARGV</snippet></ROW><ROW><id>11528293</id><snippet>&lt;input name="foo" type="number" required&gt;
</snippet></ROW><ROW><id>11528293</id><snippet>  // ...
  &lt;input name="foo" id="foo"&gt;
&lt;/form&gt;
&lt;script&gt;
  // ...
  Validator.add("foo", type="number", required=true)
&lt;/script&gt;
</snippet></ROW><ROW><id>11528293</id><snippet>#(document).ready</snippet></ROW><ROW><id>11528306</id><snippet>#allocate memory (np.empty would work too and be marginally faster, 
#                 but probably not worth mentioning).
a=np.zeros((3000,300),dtype=np.float32)  
with open(filename) as f:
    for i,line in enumerate(f):
        a[i,:]=map(np.float32,line.split()) 
</snippet></ROW><ROW><id>11528306</id><snippet>map</snippet></ROW><ROW><id>11528306</id><snippet>a=np.zeros((3000,300),dtype=np.float32)  
with open(filename) as f:
    for i,line in enumerate(f):
        a[i,:]=line.split() 
</snippet></ROW><ROW><id>11528306</id><snippet>import numpy as np

def func1():   #No map -- And pretty speedy :-).
    a=np.zeros((3000,300),dtype=np.float32)
    with open('junk.txt') as f:
        for i,line in enumerate(f):
            a[i,:]=line.split()

def func2():
    a=np.zeros((3000,300),dtype=np.float32)
    with open('junk.txt') as f:
        for i,line in enumerate(f):
            a[i,:]=map(np.float32,line.split())

def func3():
    a=np.zeros((3000,300),dtype=np.float32)
    with open('junk.txt') as f:
        for i,line in enumerate(f):
            a[i,:]=map(float,line.split())

import timeit

print timeit.timeit('func1()',setup='from __main__ import func1',number=3)  #1.36s
print timeit.timeit('func2()',setup='from __main__ import func2',number=3)  #11.53s
print timeit.timeit('func3()',setup='from __main__ import func3',number=3)  #1.72s
</snippet></ROW><ROW><id>11528424</id><snippet>def foo(max_depth = 10, cur_depth=0):
    if cur_depth &gt;= max_depth:
        return BASE_CASE

    else:
        return foo(max_depth, cur_depth+1)
</snippet></ROW><ROW><id>11528490</id><snippet>source = cv2.imread() # source is numpy array 
bitmap = cv.CreateImageHeader((source.shape[1], source.shape[0]), cv.IPL_DEPTH_8U, 3)
cv.SetData(bitmap, source.tostring(), 
           source.dtype.itemsize * 3 * source.shape[1])
</snippet></ROW><ROW><id>11528490</id><snippet>bitmap</snippet></ROW><ROW><id>11528490</id><snippet>cv2.cv.iplimage</snippet></ROW><ROW><id>11528581</id><snippet>numpy</snippet></ROW><ROW><id>11528581</id><snippet>numpy</snippet></ROW><ROW><id>11528581</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = np.array([1, 2, 1, 3, 3, 3, 0])
&gt;&gt;&gt; [item for item, count in Counter(a).iteritems() if count &gt; 1]
[1, 3]
</snippet></ROW><ROW><id>11528581</id><snippet>iteritems</snippet></ROW><ROW><id>11528775</id><snippet>sticky=tk.E</snippet></ROW><ROW><id>11528775</id><snippet>myframe.grid_propagate(False)</snippet></ROW><ROW><id>11528775</id><snippet>columnspan</snippet></ROW><ROW><id>11528775</id><snippet>import Tkinter as tk
root = tk.Tk()
frames = []
for i in range(3):
    f = tk.Frame(root)
    f.grid(row=i, column=0, columnspan=i+1, sticky=tk.E)
    frames.append(f)

#Now, you can add buffer spaces (frames) into the grid at 
# `row=0,column=0`, `row=0,column=1` and `row=1,column=1` if you need it. 

root.mainloop()
</snippet></ROW><ROW><id>11528775</id><snippet>+----+-----+-----+
|    |     |     |
+----+-----+-----+
|    |           |
+----+-----------+
|                |
+----------------+
</snippet></ROW><ROW><id>11528975</id><snippet>for i in range(0, 20):
    address = 'http://www.google.com/search?q=%s&amp;num=100&amp;hl=en&amp;start=%s' % (urllib.quote_plus(query), i)
</snippet></ROW><ROW><id>11528975</id><snippet>str</snippet></ROW><ROW><id>11528975</id><snippet>%s</snippet></ROW><ROW><id>11528975</id><snippet>join</snippet></ROW><ROW><id>11528975</id><snippet>join</snippet></ROW><ROW><id>11529142</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d import axes3d
</snippet></ROW><ROW><id>11529352</id><snippet>with open('data.txt') as inf:
  for lc, line in enumerate(inf):  # lc - current line count
    if lc &gt;= 2: # netstat usually has 2 lines of header info
      print ' '.join(line.split()[3:5]) # cols 3-4 are the addresses
</snippet></ROW><ROW><id>11529474</id><snippet>'userrequest'=request</snippet></ROW><ROW><id>11529474</id><snippet>Form(schema, buttons=('Actualizar',), userrequest=request)
</snippet></ROW><ROW><id>11529474</id><snippet>Form</snippet></ROW><ROW><id>11529474</id><snippet>field.Field</snippet></ROW><ROW><id>11529474</id><snippet>deform.Form</snippet></ROW><ROW><id>11529474</id><snippet>def d_validator(node, value):
    if not value:
        raise Invalid(node, 'Enter a Password')
    if len(value) &lt; 5:
        raise Invalid(node, 'Invalid Length')
    userid = authenticated_userid(get_current_request())
    dbsession = DBSession()
    userInfo = dbsession.query(User).filter(_and(User.id==userid, User.password == value)).first()
    if not userInfo:
        raise Invalid(node, 'Invalid password')
</snippet></ROW><ROW><id>11529989</id><snippet>second_append</snippet></ROW><ROW><id>11530066</id><snippet>dhcp.DHCPOptions</snippet></ROW><ROW><id>11530367</id><snippet>    |-----|
    |  P1 |
    -------
O1  |  2  | 2
    -------
O2  |  1  | 1
    -------
O3  |  2  | 2
    -------
O4  |  1  | 1
    -------
       6  
</snippet></ROW><ROW><id>11530367</id><snippet>    |-----|-----|
    |  P1 |  P2 |
    -------------
O1  |  2  |  1  | 3
    -------------
O2  |  1  |  2  | 3
    -------------
O3  |  2  |  2  | 4
    -------------
O4  |  1  |  2  | 3
    -------------
       6     7  
</snippet></ROW><ROW><id>11530604</id><snippet>class Person(object):
    def __init__(self, fn, ln, address):
        self.uid    = Id_Class.new_id("Person")
        self.f_name = fn
        self.l_name = ln
        self.address = address

class Address(object):
    def __init__(self, st, sub):
        self.uid    = Id_Class.new_id("Address")
        self.street = st
        self.suburb = sub

hm = Address('Queen St.', 'Sydney')

s = Person('John', 'Doe', hm)
</snippet></ROW><ROW><id>11530769</id><snippet>print [z for z in range(10000) if all(z%k==0 for k in range(1,10))]
&gt;&gt;&gt; [0, 2520, 5040, 7560]
</snippet></ROW><ROW><id>11530848</id><snippet>for i in range(len(a)):
    if a[i] &gt; max:
        max = a[i]
        maxIndex = i
</snippet></ROW><ROW><id>11530889</id><snippet>dedent</snippet></ROW><ROW><id>11530889</id><snippet>textwrap</snippet></ROW><ROW><id>11531071</id><snippet>np.empty((n,6))</snippet></ROW><ROW><id>11531071</id><snippet>ones</snippet></ROW><ROW><id>11531071</id><snippet>zeros</snippet></ROW><ROW><id>11531071</id><snippet>lstname1 = np.arange(3)
lstname2 = 22*np.arange(3)
np.vstack((lstname1,lstname2)).T
# returns
array([[ 0,  0],
       [ 1, 22],
       [ 2, 44]])
#or
np.hstack((lstname1[:,np.newaxis],lstname2[:,np.newaxis]))
array([[ 0,  0],
       [ 1, 22],
       [ 2, 44]])
</snippet></ROW><ROW><id>11531071</id><snippet>np.empty((rows,cols))</snippet></ROW><ROW><id>11531071</id><snippet>In [36]: big = np.vstack((lstname1,lstname2)).T

In [37]: smaller = big[:2]

In [38]: smaller[:,1]=33

In [39]: smaller
Out[39]: 
array([[ 0, 33],
       [ 1, 33]])
In [40]: big
Out[40]: 
array([[ 0, 33],
       [ 1, 33],
       [ 2, 44]])
</snippet></ROW><ROW><id>11531071</id><snippet>smaller.fill(0)</snippet></ROW><ROW><id>11531326</id><snippet>pre</snippet></ROW><ROW><id>11531326</id><snippet>prev_ind = [j for (pre, j) in seen]  # &lt;---mystery culprit
</snippet></ROW><ROW><id>11531326</id><snippet>prev_ind = [j for (pre2, j) in seen] 
</snippet></ROW><ROW><id>11531510</id><snippet>urllib.request.urlretrieve("http://scholar.google.com" + url, filename)
</snippet></ROW><ROW><id>11531510</id><snippet>http://scholar.google.com</snippet></ROW><ROW><id>11531510</id><snippet>url</snippet></ROW><ROW><id>11531510</id><snippet>http://scholar.google.com</snippet></ROW><ROW><id>11531510</id><snippet>urillib</snippet></ROW><ROW><id>11531510</id><snippet>scholar.google.comhttp</snippet></ROW><ROW><id>11531510</id><snippet>url</snippet></ROW><ROW><id>11531510</id><snippet>print</snippet></ROW><ROW><id>11531510</id><snippet>print</snippet></ROW><ROW><id>11531627</id><snippet>mypythonscript.py &gt; /where/to/save.txt</snippet></ROW><ROW><id>11531627</id><snippet>#!/usr/bin/env python
import urllib
import json
import codecs

search = urllib.urlopen("http://search.twitter.com/search.json?q="+"android&amp;rpp=100")

with codecs.open('/tmp/fap.txt', 'a+', 'utf8') as f:
    dict = json.loads(search.read())
    for result in dict["results"]:
        f.write('# %s\n' % result["text"])
</snippet></ROW><ROW><id>11531717</id><snippet>class App:
    generating = False
    def __init__(self, master):
        self.master=master

        #Initializing frames
        self.buttonFrame = Frame(master, background='light gray')
        self.loadingFrame = Frame(master, background='light gray')
        self.loadingFrame.grid(row=0)
        self.buttonFrame.grid(row=1)
        self.anim = Gif(self.loadingFrame, '4Y9UJ.gif')
        self.anim.pack()
##        self.update_Thread = threading.Thread(target=time.sleep, args=(5,))

        self.buttonSetup()

    def buttonSetup(self):
        #ALL THE BUTTONS
        self.generateBt = Button(self.buttonFrame, text="Generate!", command=self.generate, background='light gray', highlightbackground='light gray')
        self.generateBt.pack(side=LEFT)
        self.quitBt = Button(self.buttonFrame, text="Quit!", fg="red", command=self.buttonFrame.quit, background='light gray', highlightbackground='light gray')
        self.quitBt.pack(side=LEFT)

    def wait_generate(self):
        if self.update_Thread.isAlive():
            self.master.after(500, self.wait_generate)
        else:
            tkMessageBox.showinfo("Complete", "Report generation completed!")
            self.reset()

    def generate(self):
        self.hideForGen()
        self.update_Thread = threading.Thread(target=time.sleep, args=(5,))
        self.update_Thread.start()
##        while(self.update_Thread.isAlive()):
##            self.master.update_idletasks()
##        self.reset()
##        self.master.update_idletasks()
##        tkMessageBox.showinfo("Complete", "Report generation completed!")
        self.wait_generate()

    def hideForGen(self):
        self.buttonFrame.grid_forget()

    def reset(self):
        self.buttonFrame.grid(row=1)
</snippet></ROW><ROW><id>11531772</id><snippet>fh = open("erase_me.txt", "w")
fh.write("Hello there!")
fh.close()

# Writes "Hello there!" to 'erase_me.txt'
# tcsh-13: cat erase_me.txt
# Hello there!tcsh-14: 
</snippet></ROW><ROW><id>11531772</id><snippet>import os
fh = open("erase_me.txt", "w")
fh.write("Hello there!")

# Whoops!  Something bad happened and my program bombed!
os._exit(1)

fh.close()

# tcsh-19: cat erase_me.txt
# tcsh-20: ll erase_me.txt 
# -rw-r--r-- 1 me us 0 Jul 17 15:41 erase_me.txt
# (Notice file length = 0) 
</snippet></ROW><ROW><id>11531786</id><snippet>&lt;thead&gt;
    &lt;tr&gt;
    ....
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt; ... &lt;/tr&gt;
    &lt;tr&gt; ... &lt;/tr&gt;
&lt;/tbody&gt;
&lt;tfoot&gt;
    &lt;tr&gt;
       &lt;td&gt;Total&lt;/td&gt;&lt;td&gt; ... &lt;/td&gt; ...
    &lt;/tr&gt;
&lt;/tfoot&gt;
</snippet></ROW><ROW><id>11531970</id><snippet>name</snippet></ROW><ROW><id>11531970</id><snippet>name</snippet></ROW><ROW><id>11531970</id><snippet>&lt;form&gt;
&lt;div class="family"&gt;
    &lt;input name="age_1" value=0&gt;  &lt;input name="sibling1" value="name?"&gt;
    &lt;hr /&gt;
&lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>11531970</id><snippet>$("form").on('blur',"input[name^='age']:last", function() {
    var name = parseInt(this.name.slice(-1), 10)
    $('.family:last').clone().insertAfter(".family:last");
    $('.family:last').find('input[name^="age"]').attr('name', 'age_'+(name+1)).val("")
})
</snippet></ROW><ROW><id>11531981</id><snippet>urllib.request.FancyURLopener</snippet></ROW><ROW><id>11531981</id><snippet>urlinfo</snippet></ROW><ROW><id>11531981</id><snippet>import urllib.request
from urllib.request import FancyURLopener


class FixFancyURLOpener(FancyURLopener):

    def http_error_default(self, url, fp, errcode, errmsg, headers):
        if errcode == 403:
            raise ValueError("403")
        return super(FixFancyURLOpener, self).http_error_default(
            url, fp, errcode, errmsg, headers
        )

# Monkey Patch
urllib.request.FancyURLopener = FixFancyURLOpener

url = "http://scholar.google.com/scholar.bib?q=info:K7uZdMSvdQ0J:scholar.google.com/&amp;output=citation&amp;hl=en&amp;as_sdt=1,14&amp;ct=citation&amp;cd=0"
urllib.request.urlretrieve(url, "cite0.bib")
</snippet></ROW><ROW><id>11531981</id><snippet>urllib.request.urlopen</snippet></ROW><ROW><id>11531981</id><snippet>fp = urllib.request.urlopen('http://scholar.google.com/scholar.bib?q=info:K7uZdMSvdQ0J:scholar.google.com/&amp;output=citation&amp;hl=en&amp;as_sdt=1,14&amp;ct=citation&amp;cd=0')
with open("citi0.bib", "w") as fo:
    fo.write(fp.read())
</snippet></ROW><ROW><id>11532410</id><snippet>python-mode</snippet></ROW><ROW><id>11532536</id><snippet>Person.tick</snippet></ROW><ROW><id>11532536</id><snippet>for spell in self.spellTimers:
            self.spellTimers[spell]['tick'] += 1
</snippet></ROW><ROW><id>11532536</id><snippet>for spell_timer in self.spellTimers.itervalues():
            spell_timer['tick'] += 1
</snippet></ROW><ROW><id>11532536</id><snippet>for thing in Thing.List.values():
            if thing:
                if "person" in thing.attrs:
                    if "spawner" in thing.attrs:
                        thing.tick()
</snippet></ROW><ROW><id>11532536</id><snippet>for thing in Thing.List.itervalues():
            if thing and "person" in thing.attrs 
                     and "spawner" in thing.attrs:
                    thing.tick()
</snippet></ROW><ROW><id>11532536</id><snippet>from spells import cast,spellmaker
</snippet></ROW><ROW><id>11532536</id><snippet>#spell cooldown timer
self.timers['cooldown'] -= 1
if self.timers['cooldown'] &lt; 0:
    self.timers['cooldown'] = 0
</snippet></ROW><ROW><id>11532536</id><snippet>#spell cooldown timer
self.timers['cooldown'] = max(0, self.timers['cooldown']-1)
</snippet></ROW><ROW><id>11532536</id><snippet>    #Check if self is doing ranged attack, and then increase timer (ready their weapon)
    self.timers['ranged'] += 1
    if self.timers['ranged'] &gt;= int((self.stats['dex']*-1.1)+60+2):
        self.timers['ranged'] = int((self.stats['dex']*-1.1)+60+1)
    if self.timers['ranged'] == int((self.stats['dex']*-1.1)+60):
        self.timers['ranged'] = int((self.stats['dex']*-1.1)+60+1)
</snippet></ROW><ROW><id>11532536</id><snippet>if</snippet></ROW><ROW><id>11532536</id><snippet>elif</snippet></ROW><ROW><id>11532536</id><snippet>self.somedict['name']</snippet></ROW><ROW><id>11532881</id><snippet>autoblend</snippet></ROW><ROW><id>11532881</id><snippet>set_options</snippet></ROW><ROW><id>11532881</id><snippet>suds.client.Client(url, autoblend=True)
</snippet></ROW><ROW><id>11533066</id><snippet>with open('command.fort.13', 'w') as outFile:
    with open('command.info', 'r') as com, open('fort.13', 'r') as fort13:
        outFile.write(com.read())
        outFile.write(fort13.read())
</snippet></ROW><ROW><id>11533066</id><snippet>import shutil
with open('command.fort.13', 'w') as outFile:
    with open('command.info', 'r') as com, open('fort.13', 'r') as fort13:
        shutil.copyfileobj(com, outFile)
        shutil.copyfileobj(fort13, outFile)
</snippet></ROW><ROW><id>11533303</id><snippet>big_dict = {}
for k in dicts[0]:
    big_dict[k] = [d[k] for d in dicts]
</snippet></ROW><ROW><id>11533303</id><snippet>dict</snippet></ROW><ROW><id>11533303</id><snippet>dicts</snippet></ROW><ROW><id>11533303</id><snippet>{ k:[d[k] for d in dicts] for k in dicts[0] }
</snippet></ROW><ROW><id>11533303</id><snippet>dict((k, [d[k] for d in dicts]) for k in dicts[0])
</snippet></ROW><ROW><id>11533795</id><snippet>for p in psutil.process_iter():
    if p.name == 'calc.exe':
        p.kill()
</snippet></ROW><ROW><id>11533967</id><snippet>class Class2(object):
    def __init__(self):
        self.c1 = Class1()
        self.c1.function1()
</snippet></ROW><ROW><id>11534140</id><snippet>[(y, x/y) for y in range(1, int(sqrt(x))+1) if x%y == 0]
</snippet></ROW><ROW><id>11534140</id><snippet>range()</snippet></ROW><ROW><id>11534140</id><snippet>int</snippet></ROW><ROW><id>11534140</id><snippet>sqrt()</snippet></ROW><ROW><id>11534140</id><snippet>float</snippet></ROW><ROW><id>11534140</id><snippet>In [24]: s
Out[24]: [(1, 20), (2, 10), (4, 5)]
</snippet></ROW><ROW><id>11534140</id><snippet>In [25]: import operator
</snippet></ROW><ROW><id>11534140</id><snippet>In [26]: reduce(operator.add, s, ())
Out[26]: (1, 20, 2, 10, 4, 5)
</snippet></ROW><ROW><id>11534140</id><snippet>In [27]: list(reduce(operator.add, s, ()))
Out[27]: [1, 20, 2, 10, 4, 5]
</snippet></ROW><ROW><id>11534140</id><snippet>reduce</snippet></ROW><ROW><id>11534140</id><snippet>operator.add</snippet></ROW><ROW><id>11534140</id><snippet>itertools.chain</snippet></ROW><ROW><id>11534163</id><snippet>the_app.SetTopWindow(wxFrameObject)
wxFrameObject.Maximize()
</snippet></ROW><ROW><id>11534308</id><snippet>map</snippet></ROW><ROW><id>11534308</id><snippet>sum(int(x) for x in b)
</snippet></ROW><ROW><id>11534308</id><snippet>sum(map(int, b))
</snippet></ROW><ROW><id>11534611</id><snippet>return lst[0] if len(lst) == 1 else lst
</snippet></ROW><ROW><id>11534775</id><snippet>[dict(zip(d, vals)) for vals in zip(*d.values())]
</snippet></ROW><ROW><id>11534775</id><snippet>&gt;&gt;&gt; d = {'y': ['a', 'b', 'c'], 'x': [0, 1, 2]}
&gt;&gt;&gt; [dict(zip(d, vals)) for vals in zip(*d.values())]
[{'y': 'a', 'x': 0}, {'y': 'b', 'x': 1}, {'y': 'c', 'x': 2}]
</snippet></ROW><ROW><id>11534836</id><snippet>def</snippet></ROW><ROW><id>11535263</id><snippet>import logging

logging.basicConfig(filename="test.log", level=logging.DEBUG)
logger = logging.getLogger("testlogger")

for i in range(0, 1000000):
    logger.info("iteration: %d", i)
</snippet></ROW><ROW><id>11535263</id><snippet>python -m cProfile testlogging.py
</snippet></ROW><ROW><id>11535263</id><snippet>57000501 function calls in 137.072 seconds

Ordered by: standard name

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.000    0.000 UserDict.py:4(__init__)
    1    0.000    0.000    0.000    0.000 __init__.py:1044(_fixupParents)
    1    0.000    0.000    0.000    0.000 __init__.py:1085(Logger)
    2    0.000    0.000    0.000    0.000 __init__.py:1100(__init__)
    1    0.000    0.000    0.000    0.000 __init__.py:1112(setLevel)
.....    .....    .....    .....    ..... ...............................
</snippet></ROW><ROW><id>11535263</id><snippet>{method 'write' of 'file' objects}</snippet></ROW><ROW><id>11535263</id><snippet>{method 'flush' of 'file' objects}</snippet></ROW><ROW><id>11535263</id><snippet>percall</snippet></ROW><ROW><id>11535263</id><snippet>tottime</snippet></ROW><ROW><id>11535349</id><snippet>general_table</snippet></ROW><ROW><id>11535349</id><snippet>driver.find_elements_by_xpath(("//*[@class='general_table']/div")</snippet></ROW><ROW><id>11535349</id><snippet>for(int i=1;i&lt;=list.length;i++){
    String text1 = driver.find_element_by_xpath("//*[@class='general_table']/div["+i+"]/div[1]").text;
    String text2 = driver.find_element_by_xpath("//*[@class='general_table']/div["+i+"]/div[2]").text;
}
</snippet></ROW><ROW><id>11535500</id><snippet>from ctypes import *
test = cdll.LoadLibrary("test")
test.function_test.argtypes = [
    c_int, POINTER(c_double), POINTER(c_int)
]

def Py_function_test(arraysize):
    _c_readingarray = (c_double*arraysize)()
    _c_actualarraysize = c_int()
    test.function_test(arraysize, _c_readingarray, byref(_c_actualarraysize))
    return _c_readingarray, _c_actualarraysize.value

array, size = Py_function_test(10)
print list(array), size
</snippet></ROW><ROW><id>11535500</id><snippet>void function_test(int Arraysize, double readingArray[], int *Actual_rraysize)
{
    int i;
    *Actual_rraysize = Arraysize/2;
    for(i=0;i&lt;*Actual_rraysize;i++)
        readingArray[i] = i;
}
</snippet></ROW><ROW><id>11535500</id><snippet>[0.0, 1.0, 2.0, 3.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0] 5
</snippet></ROW><ROW><id>11535584</id><snippet>class Seeder:
    def __init__(self):
        self.seeds = set()
        self.cache = dict()

    def get_seed(self, word):
        LIMIT = 2
        seed = self.cache.get(word,None)
        if seed is not None:
            return seed
        for seed in self.seeds:
            if self.distance(seed, word) &lt;= LIMIT:
                self.cache[word] = seed
                return seed
        self.seeds.add(word)
        self.cache[word] = word
        return word

    def distance(self, s1, s2):
        l1 = len(s1)
        l2 = len(s2)
        matrix = [range(zz,zz + l1 + 1) for zz in xrange(l2 + 1)]
        for zz in xrange(0,l2):
            for sz in xrange(0,l1):
                if s1[sz] == s2[zz]:
                    matrix[zz+1][sz+1] = min(matrix[zz+1][sz] + 1, matrix[zz][sz+1] + 1, matrix[zz][sz])
                else:
                    matrix[zz+1][sz+1] = min(matrix[zz+1][sz] + 1, matrix[zz][sz+1] + 1, matrix[zz][sz] + 1)
        return matrix[l2][l1]

import itertools

def group_similar(words):
    seeder = Seeder()
    words = sorted(words, key=seeder.get_seed)
    groups = itertools.groupby(words, key=seeder.get_seed)
    return [list(v) for k,v in groups]
</snippet></ROW><ROW><id>11535584</id><snippet>import pprint

print pprint.pprint(group_similar([
    'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have',
    'I', 'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you',
    'do', 'at', 'this', 'but', 'his', 'by', 'from', 'they', 'we',
    'say', 'her', 'she', 'or', 'an', 'will', 'my', 'one', 'all',
    'would', 'there', 'their', 'what', 'so', 'up', 'out', 'if',
    'about', 'who', 'get', 'which', 'go', 'me', 'when', 'make',
    'can', 'like', 'time', 'no', 'just', 'him', 'know', 'take',
    'people', 'into', 'year', 'your', 'good', 'some', 'could',
    'them', 'see', 'other', 'than', 'then', 'now', 'look',
    'only', 'come', 'its', 'over', 'think', 'also', 'back',
    'after', 'use', 'two', 'how', 'our', 'work', 'first', 'well',
    'way', 'even', 'new', 'want', 'because', 'any', 'these',
    'give', 'day', 'most', 'us'
]), width=120)
</snippet></ROW><ROW><id>11535584</id><snippet>[['after'],
 ['also'],
 ['and', 'a', 'in', 'on', 'as', 'at', 'an', 'one', 'all', 'can', 'no', 'want', 'any'],
 ['back'],
 ['because'],
 ['but', 'about', 'get', 'just'],
 ['first'],
 ['from'],
 ['good', 'look'],
 ['have', 'make', 'give'],
 ['his', 'her', 'if', 'him', 'its', 'how', 'us'],
 ['into'],
 ['know', 'new'],
 ['like', 'time', 'take'],
 ['most'],
 ['of', 'I', 'it', 'for', 'not', 'he', 'you', 'do', 'by', 'we', 'or', 'my', 'so', 'up', 'out', 'go', 'me', 'now'],
 ['only'],
 ['over', 'our', 'even'],
 ['people'],
 ['say', 'she', 'way', 'day'],
 ['some', 'see', 'come'],
 ['the', 'be', 'to', 'that', 'this', 'they', 'there', 'their', 'them', 'other', 'then', 'use', 'two', 'these'],
 ['think'],
 ['well'],
 ['what', 'who', 'when', 'than'],
 ['with', 'will', 'which'],
 ['work'],
 ['would', 'could'],
 ['year', 'your']]
</snippet></ROW><ROW><id>11535846</id><snippet>$HOME</snippet></ROW><ROW><id>11535846</id><snippet>$HOME</snippet></ROW><ROW><id>11535846</id><snippet>$HOME</snippet></ROW><ROW><id>11535846</id><snippet>matplotlibrc</snippet></ROW><ROW><id>11535846</id><snippet>matplotlibrc</snippet></ROW><ROW><id>11535846</id><snippet>~/.matplotlib/matplotlibrc</snippet></ROW><ROW><id>11536506</id><snippet>User</snippet></ROW><ROW><id>11536506</id><snippet>hosting</snippet></ROW><ROW><id>11536506</id><snippet>blank=True, null=True</snippet></ROW><ROW><id>11536506</id><snippet>hosting = models.ForeignKey('Event', related_name='User_hosting',
                            blank=True, null=True)
</snippet></ROW><ROW><id>11536599</id><snippet>MozillaCookieJar._really_load</snippet></ROW><ROW><id>11536599</id><snippet>f.readline()</snippet></ROW><ROW><id>11536599</id><snippet>re.search</snippet></ROW><ROW><id>11536599</id><snippet>"#( Netscape)? HTTP Cookie File"</snippet></ROW><ROW><id>11536599</id><snippet>cookies.txt</snippet></ROW><ROW><id>11536599</id><snippet>open(filename)</snippet></ROW><ROW><id>11536599</id><snippet>\n</snippet></ROW><ROW><id>11536599</id><snippet>&gt;&gt;&gt; f = open('cookies.txt')
&gt;&gt;&gt; line = f.readline()
&gt;&gt;&gt; line
'# Netscape HTTP Cookie File\n'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search("#( Netscape)? HTTP Cookie File", line)
&lt;_sre.SRE_Match object at 0x10fecfdc8&gt;
</snippet></ROW><ROW><id>11536599</id><snippet>line</snippet></ROW><ROW><id>11536599</id><snippet>\n</snippet></ROW><ROW><id>11536599</id><snippet>cookiejar</snippet></ROW><ROW><id>11536599</id><snippet>pdb</snippet></ROW><ROW><id>11536599</id><snippet>http.cookiejar</snippet></ROW><ROW><id>11536599</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; import http.cookiejar
&gt;&gt;&gt; jar = http.cookiejar.MozillaCookieJar('cookies.txt')
&gt;&gt;&gt; pdb.run('jar.load()')
&gt;&gt;&gt; pdb.run('jar.load()')
&gt; &lt;string&gt;(1)&lt;module&gt;()
(Pdb) s
--Call--
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1759)load()
-&gt; def load(self, filename=None, ignore_discard=False, ignore_expires=False):
(Pdb) s
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1761)load()
-&gt; if filename is None:
(Pdb) s
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1762)load()
-&gt; if self.filename is not None: filename = self.filename
(Pdb) s
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1765)load()
-&gt; f = open(filename)
(Pdb) n
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1766)load()
-&gt; try:
(Pdb) 
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1767)load()
-&gt; self._really_load(f, filename, ignore_discard, ignore_expires)
(Pdb) s
--Call--
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1989)_really_load()
-&gt; def _really_load(self, f, filename, ignore_discard, ignore_expires):
(Pdb) s
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1990)_really_load()
-&gt; now = time.time()
(Pdb) n
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1992)_really_load()
-&gt; magic = f.readline()
(Pdb) 
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1993)_really_load()
-&gt; if not self.magic_re.search(magic):
(Pdb) 
&gt; /opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/http/cookiejar.py(1999)_really_load()
-&gt; try:
</snippet></ROW><ROW><id>11536599</id><snippet>step</snippet></ROW><ROW><id>11536599</id><snippet>next</snippet></ROW><ROW><id>11536599</id><snippet>self.magic_re.search(magic)</snippet></ROW><ROW><id>11536629</id><snippet>current_process</snippet></ROW><ROW><id>11536629</id><snippet>from multiprocessing import Process, current_process

def somefunc():
    print current_process().name

if __name__ == '__main__':
    p = Process(target=somefunc)
    p.start()
    print p.name
</snippet></ROW><ROW><id>11536794</id><snippet>python -m pkg.tests.core_test
</snippet></ROW><ROW><id>11536914</id><snippet>d=np.arange(10)
masks = [d&gt;5, d % 2 == 0, d&lt;8]
</snippet></ROW><ROW><id>11536914</id><snippet>total_mask = reduce(np.logical_and, masks)
</snippet></ROW><ROW><id>11536914</id><snippet>total_mask = masks[0] &amp; masks[1] &amp; masks[2]
</snippet></ROW><ROW><id>11537071</id><snippet>fit</snippet></ROW><ROW><id>11537071</id><snippet>inertia_</snippet></ROW><ROW><id>11537071</id><snippet>KMeans</snippet></ROW><ROW><id>11537071</id><snippet>&gt;&gt;&gt; from sklearn.datasets import load_iris
&gt;&gt;&gt; from sklearn.cluster import KMeans
&gt;&gt;&gt; iris = load_iris()
&gt;&gt;&gt; km = KMeans(3).fit(iris.data)
&gt;&gt;&gt; km.inertia_
78.940841426146108
</snippet></ROW><ROW><id>11537193</id><snippet>a = [1, 10, 40]
b = [15, 30]

srcs = [a, b]
dsts = [[], []]
prev_which = -1
while all(srcs):
    which = int(srcs[0][0] &gt; srcs[1][0])
    elem = srcs[which].pop(0)
    if prev_which != which:
        dsts[which].append(elem)
    prev_which = which
for src, dst in zip(srcs,dsts):
    if src:
        dst.append(src.pop(0))
a, b = dsts
</snippet></ROW><ROW><id>11537193</id><snippet>a = [1, 40]
b = [15]
</snippet></ROW><ROW><id>11537193</id><snippet>a = [3, 4, 6, 7, 8, 9]
b = [1, 2, 5, 10]
</snippet></ROW><ROW><id>11537193</id><snippet>[3, 6]</snippet></ROW><ROW><id>11537193</id><snippet>[1, 5, 10]</snippet></ROW><ROW><id>11537193</id><snippet>import itertools as it
import operator as op

a = [3, 4, 6, 7, 8, 9]
b = [1, 2, 5, 10]
srcs = [a, b]
dsts = [[], []]

for which, elems in it.groupby(sorted((x, i) for i in (0,1) for x in srcs[i]), key=op.itemgetter(1)):
    dsts[which].append(next(elems)[0])
a, b = dsts
</snippet></ROW><ROW><id>11537986</id><snippet>def calculate_area(self, length)
    return self.length*self.width
</snippet></ROW><ROW><id>11538023</id><snippet>import win32com.client
import pywintypes

o = win32com.client.Dispatch("Outlook.Application")
ns = o.GetNamespace("MAPI")
profile = ns.Folders.Item("Profile Name")
contacts = profile.Folders.Item("Contacts")
</snippet></ROW><ROW><id>11538295</id><snippet>TheFunction(*N_items)</snippet></ROW><ROW><id>11538295</id><snippet>In [88]: def TheFunction(*N_items):
   ....:     print N_items
   ....:

In [89]: TheFunction(1)
(1,)

In [90]: TheFunction(1,2,3)
(1, 2, 3)

In [91]: TheFunction(1,2,3,4,5)
(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>11538295</id><snippet>*</snippet></ROW><ROW><id>11538295</id><snippet>In [92]: l = [1,2,3,4,5]

In [93]: TheFunction(*l)
(1, 2, 3, 4, 5)

In [94]: l = [1,2]

In [95]: TheFunction(*l)
(1, 2)
</snippet></ROW><ROW><id>11538438</id><snippet>&gt;&gt;&gt; for inputs,outputs in testcases:
...     print '%r, %r' % (inputs, outputs)

([0.5, 0.4, 0.3], 'HHTH'), [0.4166666666666667, 0.432, 0.42183098591549295, 0.43639398998330553]
([0.14, 0.32, 0.42, 0.81, 0.21], 'HHHTTTHHH'), [0.5255789473684211, 0.6512136991788505, 0.7295055220497553, 0.6187139453483192, 0.4823974597714815, 0.3895729901052968, 0.46081730193074644, 0.5444108434105802, 0.6297110187222278]
([0.14, 0.32, 0.42, 0.81, 0.21], 'TTTHHHHHH'), [0.2907741935483871, 0.25157009005730924, 0.23136284577678012, 0.2766575695593804, 0.3296000585271367, 0.38957299010529806, 0.4608173019307465, 0.5444108434105804, 0.6297110187222278]
([0.12, 0.45, 0.23, 0.99, 0.35, 0.36], 'THHTHTTH'), [0.28514285714285714, 0.3378256513026052, 0.380956725493104, 0.3518717367468537, 0.37500429586037076, 0.36528605387582497, 0.3555106542906013, 0.37479179323540324]
([0.03, 0.32, 0.59, 0.53, 0.55, 0.42, 0.65], 'HHTHTTHTHHT'), [0.528705501618123, 0.5522060353798126, 0.5337142767315369, 0.5521920592821695, 0.5348391689038525, 0.5152373451083692, 0.535385450497415, 0.5168208803156963, 0.5357708613431963, 0.5510509656933194, 0.536055356823069]
</snippet></ROW><ROW><id>11538438</id><snippet>)</snippet></ROW><ROW><id>11538438</id><snippet>print '%r, %r)' % (inputs, outputs)
</snippet></ROW><ROW><id>11538782</id><snippet>map( Something, [1,2,3,4] )
</snippet></ROW><ROW><id>11538822</id><snippet>correct_solve</snippet></ROW><ROW><id>11538822</id><snippet>buggy_solve</snippet></ROW><ROW><id>11538822</id><snippet>buggy_solve</snippet></ROW><ROW><id>11538822</id><snippet>return</snippet></ROW><ROW><id>11538822</id><snippet>buggy_solve</snippet></ROW><ROW><id>11538822</id><snippet>return</snippet></ROW><ROW><id>11538866</id><snippet>self.data</snippet></ROW><ROW><id>11538866</id><snippet>collections.defaultdict(dict)</snippet></ROW><ROW><id>11538866</id><snippet>defaultdict</snippet></ROW><ROW><id>11538866</id><snippet>self.data[self.stringvar1.get()][date] = (
    int(self.total.get()), int(self.resources.get()))
</snippet></ROW><ROW><id>11538866</id><snippet>defaultdict</snippet></ROW><ROW><id>11538866</id><snippet>KeyError</snippet></ROW><ROW><id>11538866</id><snippet>dict</snippet></ROW><ROW><id>11538866</id><snippet>setdefault()</snippet></ROW><ROW><id>11538866</id><snippet>self.data.setdefault(self.stringvar1.get(), {})[date] = (
    int(self.total.get()), int(self.resources.get()))
</snippet></ROW><ROW><id>11539095</id><snippet>numpy.searchsorted</snippet></ROW><ROW><id>11539095</id><snippet>In : before
Out:
array([[ 1,  1,  2],
       [ 1,  3,  4],
       [ 1,  5,  6],
       [ 2,  7,  8],
       [ 3,  9, 10],
       [ 3, 11, 12],
       [ 3, 13, 14]])

In : diff = before[before[:,0].searchsorted(x[:,0])]

In : diff[:,0] = 0

In : before - diff
Out:
array([[1, 0, 0],
       [1, 2, 2],
       [1, 4, 4],
       [2, 0, 0],
       [3, 0, 0],
       [3, 2, 2],
       [3, 4, 4]])
</snippet></ROW><ROW><id>11539095</id><snippet>In : before
Out:
array([[ 1,  1,  2],
       [ 1,  3,  4],
       [ 1,  5,  6],
       [ 2,  7,  8],
       [ 3,  9, 10],
       [ 3, 11, 12],
       [ 3, 13, 14]])

In : before[:,0].searchsorted(x[:,0])
Out: array([0, 0, 0, 3, 4, 4, 4])
</snippet></ROW><ROW><id>11539095</id><snippet>In : diff = before[before[:,0].searchsorted(x[:,0])]

In : diff
Out:
array([[ 1,  1,  2],
       [ 1,  1,  2],
       [ 1,  1,  2],
       [ 2,  7,  8],
       [ 3,  9, 10],
       [ 3,  9, 10],
       [ 3,  9, 10]])
</snippet></ROW><ROW><id>11539095</id><snippet>0</snippet></ROW><ROW><id>11539095</id><snippet>In : diff[:,0] = 0

In : diff
Out:
array([[ 0,  1,  2],
       [ 0,  1,  2],
       [ 0,  1,  2],
       [ 0,  7,  8],
       [ 0,  9, 10],
       [ 0,  9, 10],
       [ 0,  9, 10]])
</snippet></ROW><ROW><id>11539095</id><snippet>In : before - diff
Out:
array([[1, 0, 0],
       [1, 2, 2],
       [1, 4, 4],
       [2, 0, 0],
       [3, 0, 0],
       [3, 2, 2],
       [3, 4, 4]])
</snippet></ROW><ROW><id>11539227</id><snippet>for x in gen:
    # whatever
</snippet></ROW><ROW><id>11539227</id><snippet>if gen</snippet></ROW><ROW><id>11539227</id><snippet>True</snippet></ROW><ROW><id>11539528</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>11539528</id><snippet>parse()</snippet></ROW><ROW><id>11539528</id><snippet>ElementTree</snippet></ROW><ROW><id>11539528</id><snippet>tree.parse(...)</snippet></ROW><ROW><id>11539528</id><snippet>def parse(self, source, parser=None):
    if not hasattr(source, "read"):
        source = open(source, "rb")
    if not parser:
        parser = XMLParser(target=TreeBuilder())
    while 1:
        data = source.read(65536)
        if not data:
            break
        parser.feed(data)
    self._root = parser.close()
    return self._root
</snippet></ROW><ROW><id>11539528</id><snippet>codecs.open(filename, encoding='utf-8')</snippet></ROW><ROW><id>11539528</id><snippet>xml.etree.ElementTree.parse(...)</snippet></ROW><ROW><id>11539528</id><snippet>ElementTree</snippet></ROW><ROW><id>11539528</id><snippet>codecs.open(...)</snippet></ROW><ROW><id>11539528</id><snippet>tree.write(f)</snippet></ROW><ROW><id>11539528</id><snippet>tree.write(filename, encoding='utf-8')</snippet></ROW><ROW><id>11539545</id><snippet>gdbm, dbhash, bsddb, dumbdbm</snippet></ROW><ROW><id>11539545</id><snippet>sqlite3</snippet></ROW><ROW><id>11539545</id><snippet>sqlite3</snippet></ROW><ROW><id>11539545</id><snippet>bsddb</snippet></ROW><ROW><id>11539545</id><snippet>nelem</snippet></ROW><ROW><id>11539660</id><snippet>class Method(object):
    def __init__(self, app):
        self.app = app

    def __call__(self):
        self.app.something()
        return True

class App(object):
    def __init__(self):
        self.g = Method(self)
</snippet></ROW><ROW><id>11539660</id><snippet>self</snippet></ROW><ROW><id>11539660</id><snippet>Method</snippet></ROW><ROW><id>11539660</id><snippet>App</snippet></ROW><ROW><id>11539660</id><snippet>import sys

class Method(object):
    def __init__(self):
        parent = sys._getframe(1) # Calling context
        locals_ = frame.f_locals
        assert ('self' in locals_,
            'Method objects can only be instanciated inside instance methods')
        self.app = locals_['self']
</snippet></ROW><ROW><id>11539665</id><snippet>STATIC_ROOT = '/home/coat/www/site/app/static/'
</snippet></ROW><ROW><id>11539665</id><snippet>import os.path
import posixpath

PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..')

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

# fix STATICFILES_DIRS too
</snippet></ROW><ROW><id>11539665</id><snippet>/home/coat/www/site/app/static/</snippet></ROW><ROW><id>11539665</id><snippet>/static/</snippet></ROW><ROW><id>11539665</id><snippet>/home/coat/www/site/app/static/</snippet></ROW><ROW><id>11539665</id><snippet>/static/</snippet></ROW><ROW><id>11539665</id><snippet>location ^~ /static/ {
    alias /home/coat/www/site/app/static/;
}
</snippet></ROW><ROW><id>11539756</id><snippet>d = {}
for assignment in s.split(","):
    name, value = assignment.split("=")
    d[name.strip()] = float(value)
</snippet></ROW><ROW><id>11539756</id><snippet>exec s.replace(",", "\n")
</snippet></ROW><ROW><id>11539781</id><snippet>import sys

tasks = {}
def task (f):
    tasks[f.__name__] = f
    return f

def showHelp ():
    print('Available tasks:')
    for name, task in tasks.items():
        print('  {0}: {1}'.format(name, task.__doc__))

def main ():
    if len(sys.argv) &lt; 2 or sys.argv[1] not in tasks:
        showHelp()
        return

    print('Executing task {0}.'.format(sys.argv[1]))
    tasks[sys.argv[1]]()
</snippet></ROW><ROW><id>11539781</id><snippet>from pymake import task, main

@task
def print_foo():
    '''Prints foo'''
    print('foo')

@task
def print_hello_world():
    '''Prints hello world'''
    print('Hello World!')

@task
def print_both():
    '''Prints both'''
    print_foo()
    print_hello_world()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11539882</id><snippet>itertools</snippet></ROW><ROW><id>11539882</id><snippet>&gt;&gt;&gt; from itertools import cycle, islice
&gt;&gt;&gt; def roundrobin(*iterables):
        "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
        # Recipe credited to George Sakkis
        pending = len(iterables)
        nexts = cycle(iter(it).next for it in iterables)
        while pending:
            try:
                for next in nexts:
                    yield next()
            except StopIteration:
                pending -= 1
                nexts = cycle(islice(nexts, pending))


&gt;&gt;&gt; for x in roundrobin("ABCD", "12"):
        print x


A
1
B
2
C
D
</snippet></ROW><ROW><id>11539999</id><snippet>import csv

with open('data.txt', 'rb') as inf:
     data = list(csv.reader(inf, skipinitialspace=True))
     data = [i for i in data if i] ## add to deal w/ blank lines in data file
</snippet></ROW><ROW><id>11539999</id><snippet>data</snippet></ROW><ROW><id>11539999</id><snippet>[['Current Date &amp; Time',
  'Trans',
  'Elapsed Time',
  'Response Time',
  'Trans Rate',
  ''],
 ['Wed Jul 18 10:03:1', '5', '0.37 sec', '0.00 sec', '13.51 t/s', ''],
 ['Wed Jul 18 10:03:5', '5', '0.45 sec', '0.00 sec', '11.11 t/s', ''],
 ['Wed Jul 18 10:04:0', '5', '0.91 sec', '0.00 sec', '5.49 t/s', ''],
 ['Wed Jul 18 10:22:4', '12', '0.79 sec', '0.00 sec', '15.19 t/s', ''],
 ['Wed Jul 18 10:23:0', '12', '0.56 sec', '0.00 sec', '21.43 t/s', ''],
 ['Wed Jul 18 10:23:1', '12', '0.53 sec', '0.00 sec', '22.64 t/s', '']]
</snippet></ROW><ROW><id>11539999</id><snippet>data[2][1]</snippet></ROW><ROW><id>11539999</id><snippet>data[3][2]</snippet></ROW><ROW><id>11539999</id><snippet>'5'
</snippet></ROW><ROW><id>11539999</id><snippet>5</snippet></ROW><ROW><id>11539999</id><snippet>int(data[2][1])</snippet></ROW><ROW><id>11539999</id><snippet>data = [i for i in data if i]</snippet></ROW><ROW><id>11540324</id><snippet>dll</snippet></ROW><ROW><id>11540538</id><snippet>&lt;signal name="delete-event" handler="on_destroy" swapped="no"/&gt;
</snippet></ROW><ROW><id>11540900</id><snippet>from pysnmp.entity.rfc3413.oneliner import cmdgen
from pysnmp.proto import rfc1902
cmdgen.CommandGenerator().setCmd(
    cmdgen.CommunityData('my-agent', 'public', 1),
    cmdgen.UdpTransportTarget(('192.168.0.1', 161)),
    ((1,3,6,1,2,1,69,1,1,3,0), rfc1902.Integer(1))
)
</snippet></ROW><ROW><id>11541374</id><snippet>$elemMatch</snippet></ROW><ROW><id>11541447</id><snippet>select()</snippet></ROW><ROW><id>11541447</id><snippet>recvfrom()</snippet></ROW><ROW><id>11541447</id><snippet>SO_RCVBUF</snippet></ROW><ROW><id>11541447</id><snippet>EWOULDBLOCK</snippet></ROW><ROW><id>11541447</id><snippet>select()</snippet></ROW><ROW><id>11541447</id><snippet>recvmmsg(2)</snippet></ROW><ROW><id>11541450</id><snippet>type</snippet></ROW><ROW><id>11541450</id><snippet>argparse.Action</snippet></ROW><ROW><id>11541450</id><snippet>import argparse
from argparse import ArgumentParser
import os.path

def is_valid_file(parser, arg):
    if not os.path.exists(arg):
       parser.error("The file %s does not exist!"%arg)
    else:
       return open(arg,'r')  #return an open file handle


parser = ArgumentParser(description="ikjMatrix multiplication")    
parser.add_argument("-i", dest="filename", required=True,
    help="input file with two matrices", metavar="FILE",
    type=lambda x: is_valid_file(parser,x))
args = parser.parse_args()

A, B = read(args.filename)
C = ikjMatrixProduct(A, B)
printMatrix(C)
</snippet></ROW><ROW><id>11541461</id><snippet> return Request('http://www.example.com/servlet/av/search&amp;SiteName=page2',
                meta={'forwarding_hrefs': response.meta['forwarding_hrefs']},
                callback=self.parseJob)    
</snippet></ROW><ROW><id>11541461</id><snippet> return Request('http://www.example.com/servlet/av/search&amp;SiteName=page2',
                meta={'forwarding_hrefs': forwarding_hrefs},
                callback=self.parseJob)  
</snippet></ROW><ROW><id>11541628</id><snippet>for i in range(4):
    ax.plot([VecStart_x[i], VecEnd_x[i]], [VecStart_y[i],VecEnd_y[i]],zs=[VecStart_z[i],VecEnd_z[i]])
</snippet></ROW><ROW><id>11541660</id><snippet>&gt;&gt;&gt; list(set(['a', 'b', 'c', 'c', 'a', 'd', 'p', 'p']))
['a', 'p', 'c', 'b', 'd']
</snippet></ROW><ROW><id>11541660</id><snippet>&gt;&gt;&gt; from collections import OrderedDict 
&gt;&gt;&gt; OrderedDict.fromkeys(['a', 'b', 'c', 'c', 'a', 'd', 'p', 'p']).keys()
['a', 'b', 'c', 'd', 'p']
</snippet></ROW><ROW><id>11541722</id><snippet>a=[5]</snippet></ROW><ROW><id>11541722</id><snippet>a[0] = 1
</snippet></ROW><ROW><id>11541722</id><snippet>append</snippet></ROW><ROW><id>11541722</id><snippet>+=</snippet></ROW><ROW><id>11541722</id><snippet>a.append(2)
a += [2]
</snippet></ROW><ROW><id>11541722</id><snippet>a = [0] * 4
</snippet></ROW><ROW><id>11542154</id><snippet>&gt;&gt;&gt; socket.htonl((-2147418112) &amp; 0xffffffff)
384L
</snippet></ROW><ROW><id>11542154</id><snippet>'&lt;I'</snippet></ROW><ROW><id>11542154</id><snippet>'&gt;I'</snippet></ROW><ROW><id>11542154</id><snippet>'!I'</snippet></ROW><ROW><id>11542200</id><snippet>mywidget.bind(...)</snippet></ROW><ROW><id>11542200</id><snippet>return "break"</snippet></ROW><ROW><id>11542200</id><snippet>return "break"</snippet></ROW><ROW><id>11542200</id><snippet>return "break"</snippet></ROW><ROW><id>11542301</id><snippet>user_choices = {}
i = 1  
print '\nPhone listings:\n'  
for record in pBook:  
    key = i
    user_choices[key] = record 
    i += 1  
    print str(key) + ')', record + ':', 'Home', pBook[record]['home'] + ',', 'Cell', pBook[record]['cell']  
print '' 
</snippet></ROW><ROW><id>11542301</id><snippet>print pBook[user_choices[4]]['cell']</snippet></ROW><ROW><id>11542664</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11542764</id><snippet>help()</snippet></ROW><ROW><id>11543264</id><snippet>pickle</snippet></ROW><ROW><id>11543264</id><snippet>c.execute("CREATE TABLE first_table(int id, varchar(255) text, additional fields)")
c.execute("CREATE TABLE names_table(int id, int num, varchar(255) name)")
</snippet></ROW><ROW><id>11543264</id><snippet>first_table</snippet></ROW><ROW><id>11543264</id><snippet>names_table</snippet></ROW><ROW><id>11543264</id><snippet>id</snippet></ROW><ROW><id>11543264</id><snippet>first_table</snippet></ROW><ROW><id>11543264</id><snippet>num</snippet></ROW><ROW><id>11543264</id><snippet>SELECT name FROM names_table 
WHERE id=?
ORDER BY num
</snippet></ROW><ROW><id>11543264</id><snippet>first_table</snippet></ROW><ROW><id>11543303</id><snippet># Pull start and end dates from form
# ...
# Build a constraint if `start` and / or `end` have been set.
created = None
if start and end:
    created = sa.sql.between(msg.c.create_time_stamp, 
        start.replace(hour=0, minute=0, second=0),
        end.replace(hour=23, minute=59, second=59))
elif start:
    created = (msg.c.create_time_stamp &gt;= 
               start.replace(hour=0, minute=0, second=0))
elif end:
    created = (msg.c.create_time_stamp &lt;= 
               end.replace(hour=23, minute=59, second=59))

# More complex `from_` object built here, elided for example
# [...]
# Final query build
query = sa.select([unit.c.eli_uid], from_obj=[from_])
query = query.column(count(msg.c.id).label('sent'))
query = query.where(current_store)
if created:
    query = query.where(created)
</snippet></ROW><ROW><id>11543363</id><snippet>urlparse</snippet></ROW><ROW><id>11543363</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; url = 'http://www.example.com/servlet/av/jd?ai=782&amp;ji=2553120&amp;sn=I'
&gt;&gt;&gt; query_string = urlparse.urlparse(url).query
&gt;&gt;&gt; query_dict = urlparse.parse_qs(query_string)
&gt;&gt;&gt; query_dict
{'ai': ['782'], 'ji': ['2553120'], 'sn': ['I']}
&gt;&gt;&gt; int(query_dict['ji'])
2553120
</snippet></ROW><ROW><id>11543480</id><snippet>raw_input</snippet></ROW><ROW><id>11543480</id><snippet>TypeError</snippet></ROW><ROW><id>11543480</id><snippet>False</snippet></ROW><ROW><id>11543480</id><snippet>var=int(raw_input('Enter the block number'))</snippet></ROW><ROW><id>11543539</id><snippet>lazy='dynamic'</snippet></ROW><ROW><id>11543539</id><snippet>boardSet</snippet></ROW><ROW><id>11543539</id><snippet>dynamic</snippet></ROW><ROW><id>11543539</id><snippet>class User(...):
    ...
    boardSet = db.relationship('BoardSet', secondary=boardset_user_association_table, backref='user', lazy='dynamic')

myuser = session.query(User).get(1)
boardsets = myuser.boardSet.order_by(BoardSet.created)
</snippet></ROW><ROW><id>11543539</id><snippet>sorted(myuser.boardSet, key=lambda bs: bs.created)</snippet></ROW><ROW><id>11543637</id><snippet>annotate</snippet></ROW><ROW><id>11543637</id><snippet>(A,C)</snippet></ROW><ROW><id>11543637</id><snippet>import numpy as np
import matplotlib.pyplot as plt
menMeans   = (5, 15, 30, 40)
menStd     = (2, 3, 4, 5)
ind  = np.arange(4)    # the x locations for the groups
width= 0.7
labels = ('A', 'B', 'C', 'D')

# Pull the formatting out here
bar_kwargs = {'width':width,'color':'y','linewidth':2,'zorder':5}
err_kwargs = {'zorder':0,'fmt':None,'lw':2,'ecolor':'k'}

X = ind+width/2

fig, ax = plt.subplots()
ax.p1 = plt.bar(ind, menMeans, **bar_kwargs)
ax.errs = plt.errorbar(X, menMeans, yerr=menStd, **err_kwargs)


# Custom function to draw the diff bars

def label_diff(i,j,text,X,Y):
    x = (X[i]+X[j])/2
    y = 1.1*max(Y[i], Y[j])
    dx = abs(X[i]-X[j])

    props = {'connectionstyle':'bar','arrowstyle':'-',\
                 'shrinkA':20,'shrinkB':20,'lw':2}
    ax.annotate(text, xy=(X[i],y+7), zorder=10)
    ax.annotate('', xy=(X[i],y), xytext=(X[j],y), arrowprops=props)

# Call the function
label_diff(0,1,'p=0.0370',X,menMeans)
label_diff(1,2,'p&lt;0.0001',X,menMeans)
label_diff(2,3,'p=0.0025',X,menMeans)


plt.ylim(ymax=60)
plt.xticks(X, labels, color='k')
plt.show()
</snippet></ROW><ROW><id>11544138</id><snippet>test2 = test[2:]                #take last two numbers
</snippet></ROW><ROW><id>11544138</id><snippet>if test == test[::-1]:
</snippet></ROW><ROW><id>11544138</id><snippet>1000</snippet></ROW><ROW><id>11544138</id><snippet>c</snippet></ROW><ROW><id>11544226</id><snippet>TestCase.setUp()</snippet></ROW><ROW><id>11544396</id><snippet>import inspect
last_frame = inspect.stack()[1]
print 'Module imported from file:line_no = %s:%i' % last_frame[1:3]
</snippet></ROW><ROW><id>11544407</id><snippet>first, second = None, None</snippet></ROW><ROW><id>11544643</id><snippet>env = Environment()

env.SConscript('src/SConscript', 'env')
</snippet></ROW><ROW><id>11544643</id><snippet>Import('env')
</snippet></ROW><ROW><id>11544643</id><snippet>env = env.Clone()
</snippet></ROW><ROW><id>11544725</id><snippet>&gt;&gt;&gt; unicode('\x80abc', errors='strict')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
UnicodeDecodeError: 'ascii' codec can't decode byte 0x80 in position 0:
                    ordinal not in range(128)
&gt;&gt;&gt; unicode('\x80abc', errors='replace')
u'\ufffdabc'
&gt;&gt;&gt; unicode('\x80abc', errors='ignore')
u'abc'
</snippet></ROW><ROW><id>11544971</id><snippet>DetailView</snippet></ROW><ROW><id>11544971</id><snippet>class MyDetailView(DetailView):
    context = {}

    def get(self, request, *args, **kwargs):
        self._process(request, *args, **kwargs)

        if 'redirect' in self.context:
            return HttpResponseRedirect(self.context['redirect'])

        else:
            return self._render(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        self._process(request, *args, **kwargs)

        if 'redirect' in self.context:
            return HttpResponseRedirect(self.context['redirect'])

        elif self.context['form'].is_valid():
            self._get_hook('_pre_save')(request, *args, **kwargs)
            return self._save(request, *args, **kwargs)

        else:
            return self._render(request, *args, **kwargs)

    def _process(self, request, *args, **kwargs):
        form = getattr(app.forms, '%sForm' % self.model.__name__)

        if kwargs['pk'] != 'new':  # READ/UPDATE
            self.object = self.get_object(request, *args, **kwargs)

            self._get_hook('_auth')(request, *args, **kwargs)

            if not self.object:  # user not authorized for this entity
                return {'redirect': reverse(
                    '%s_list' % self.model.__name__.lower())}

        self.context['form'] = form(
            data=request.POST if request.method == 'POST' else None,
            instance=self.object if hasattr(self, 'object') else None)

        self._get_hook('_post_process')(request, *args, **kwargs)

    def _get_hook(self, hook_name):
        try:
            return getattr(self, '%s_hook' % hook_name)
        except AttributeError, e:
            def noop(*args, **kwargs):
                pass
            return noop
</snippet></ROW><ROW><id>11544971</id><snippet>_get_hook</snippet></ROW><ROW><id>11544971</id><snippet>class ComplexDetailView(MyDetailView):
    def _post_process_hook(self, request, *args, **kwargs):
        # here I can add stuff to self.context using 
        # self.model, self.object, request.POST or whatever
</snippet></ROW><ROW><id>11545006</id><snippet>if m:  #only execute this if a match was found
   print m.group()  #m.group() is the portion of the string that matches your regex.
</snippet></ROW><ROW><id>11545114</id><snippet>for key,group in itertools.groupby(dirtup2,operator.itemgetter(2)):
    newlist=sorted(group,key=operator.itemgetter(1),reverse=True)
    tuple_with_max=newlist[0]
    print tuple_with_max
</snippet></ROW><ROW><id>11545159</id><snippet>import Tkinter

class TkExample(Tkinter.Frame):
   def __init__(self, parent):
      Tkinter.Frame.__init__(self, parent)
      self.init_ui()

   def init_ui(self):
      self.pack()
      text_box = Tkinter.Text(self)
      text_box.pack()
      text_box.bind("&lt;Key&gt;", self.update_size)

   def update_size(self, event):
      widget_width = 0
      widget_height = float(event.widget.index(Tkinter.END))
      for line in event.widget.get("1.0", Tkinter.END).split("\n"):
         if len(line) &gt; widget_width:
            widget_width = len(line)+1
      event.widget.config(width=widget_width, height=widget_height)

if __name__ == '__main__':
    root = Tkinter.Tk()
    TkExample(root)
    root.mainloop()
</snippet></ROW><ROW><id>11545239</id><snippet>class tivoRemote(Plugin):

    def __init__(self):
        self.tivo_address = '192.168.0.9'
        self.tivo_name = ''
        self.tivo_swversions = {}
        self.have_zc = True
        self.captions_on = False
        self.sock = None
        self.outer = None


    def connect(self):
        """ Connect to the TiVo within five seconds or report error. """
        try:
            sock = socket.socket()
            sock.settimeout(5)
            sock.connect((tivo_address, 31339))
            sock.settimeout(None)
        except Exception, msg:
            msg = 'Could not connect to %s:\n%s' % (tivo_name, msg)
            print(msg)
        self.sock = sock

    def send(self, message):
        """ The core output function, called from irsend(). Re-connect if
            necessary (including restarting the status_update thread), send
            message, sleep, and check for errors.
        """

        if not self.sock:
            self.connect()
            thread.start_new_thread(status_update, ()) # status_update must be some global at this point
        try:
            self.sock.sendall(message)
            time.sleep(0.1)
        except Exception, msg:
            error_window(str(msg))


    def irsend(self, *codes):
        """ Expand a command sequence for send(). """
        for each in codes:
            self.send('IRCODE %s\r' % each)


    @register("en-US", ".*Change.*Channel.*")
    def channelChanger(self, speech, language, matchedRegex):
            if language == 'en-US':
                    answer = self.ask(u"Which channel would you like?")
                    self.say(u"Ok, one moment..".format(answer))
                    self.connect()
                    self.irsend(answer)
            self.complete_request()
</snippet></ROW><ROW><id>11545239</id><snippet>self</snippet></ROW><ROW><id>11545331</id><snippet>&gt;&gt;&gt; class Foo:
    instances = {}
    def __init__(self, id):
        self.id = id
        Foo.instances[id] = self # or self.instances[id], if you prefer

&gt;&gt;&gt; for i in range(6): # Notice range expression used here!
    Foo(i)

&lt;__main__.Foo object at 0x980a40c&gt;
&lt;__main__.Foo object at 0x981c16c&gt;
&lt;__main__.Foo object at 0x980ed6c&gt;
&lt;__main__.Foo object at 0x980eeac&gt;
&lt;__main__.Foo object at 0x9819f4c&gt;
&lt;__main__.Foo object at 0x9819b0c&gt;
&gt;&gt;&gt; Foo.instances
{0: &lt;__main__.Foo object at 0x980a40c&gt;, 1: &lt;__main__.Foo object at 0x981c16c&gt;, 2: &lt;__main__.Foo object at 0x980ed6c&gt;, 3: &lt;__main__.Foo object at 0x980eeac&gt;, 4: &lt;__main__.Foo object at 0x9819f4c&gt;, 5: &lt;__main__.Foo object at 0x9819b0c&gt;}
</snippet></ROW><ROW><id>11545334</id><snippet>input = [(0, 'Ok.  I just '), (-1, 'need to write '), (0, 'out a random bunch of text\nand then keep going.  I'), (-1, ' just'), (0, " did an enter to see how that goes and all\nthe rest of it.  I know I need.  Here's a skipped line.\n\nThen there is more and "), (-1, 't'), (0, 'hen there was the thing.')]

top_3 = [filtered_change[1] for filtered_change in sorted(sorted(enumerate(input), key=lambda change: len(change[1][1]), reverse=True)[:3])]
</snippet></ROW><ROW><id>11545334</id><snippet>indexed_changes = enumerate(input)
indexed_and_sorted_by_length = sorted(indexed_changes, key=lambda change: len(change[1][1]), reverse=True)
largest_3_indexed_changes = indexed_and_sorted_by_length[:3]
largest_3_indexed_sorted_by_index = sorted(largest_3_indexed_changes)
largest_3_changes_in_original_order = [indexed_change[1] for indexed_change in largest_3_indexed_sorted_by_index]
</snippet></ROW><ROW><id>11545451</id><snippet>subprocess.Popen(['ssh','server','netstat','-a'],stdout=file1)
</snippet></ROW><ROW><id>11545611</id><snippet>textEdit = QtGui.QTextEdit()
scrollArea = QtGui.QScrollArea(MainWindow)
scrollArea.setWidget(textEdit)
</snippet></ROW><ROW><id>11545611</id><snippet>QLabel *imageLabel = new QLabel;
QImage image("happyguy.png");
imageLabel-&gt;setPixmap(QPixmap.fromImage(image));

scrollArea = new QScrollArea;
scrollArea-&gt;setBackgroundRole(QPalette.Dark);
scrollArea-&gt;setWidget(imageLabel);
</snippet></ROW><ROW><id>11545853</id><snippet>contact_form</snippet></ROW><ROW><id>11545853</id><snippet>render_to_response</snippet></ROW><ROW><id>11545853</id><snippet>render_to_response</snippet></ROW><ROW><id>11545853</id><snippet>def contact(request):
    if request.method == 'POST':
        form = contact_form(data=request.POST)
        if form.is_valid():
            ...
    else:
        form = contact_form() # An unbound form
        return render_to_response('contact.html', {'form' : form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>11545920</id><snippet>import json
from glob import glob
from pymongo import Connection

db = Connection().test

for filename in glob('~/Tweets/*.txt'):
    with open(filename) as fp:
        doc = json.load(fp)

    db.tweets.save(doc)
</snippet></ROW><ROW><id>11546008</id><snippet># Input
a=[{'count2': 34, 'user': 2},
 {'count4': 233, 'user': 2},
 {'count2': 234, 'user': 4},
 {'count4': 344, 'user': 5}]

# Get set of unique users
u=list(set([x['user'] for x in a]))

# Create a blank list of dictionaries for the result
r=[{}] * len(u)

# Iterate over input and add the dictionaries together
for x in a:
    r[u.index(x['user'])] = dict(r[u.index(x['user'])].items() + x.items())


&gt;&gt;&gt; r
[{'count2': 34, 'user': 2, 'count4': 233}, {'count2': 234, 'user': 4}, {'count4': 344, 'user': 5}]
</snippet></ROW><ROW><id>11546115</id><snippet>def not_self_validator(value):
  #is checks for same address(pointer) whereas == will call the equality method
  if value._my_entity is value:
    logging.warn('attempted to set object to itself')
    raise ValueError('Unable to set an object to itself')
</snippet></ROW><ROW><id>11546189</id><snippet>PlaylistManager</snippet></ROW><ROW><id>11546189</id><snippet>class PlaylistManager(models.Manager):
    def add_playlist(self, name):
        playlist = Playlist(name=name) # this line changed
        playlist.save()
        return playlist
</snippet></ROW><ROW><id>11546224</id><snippet>import time
import MySQLdb # also not currently used
import tweepy
from textwrap import TextWrapper # not used currently
from getpass import getpass

# define the format for messages here to avoid repetition
OUT_STR = '''
Status : %(text)s
Author : %(author)s
Date/Time : %(date)s
Source : %(source)s
Geo : %(geo)s


-----------------------------------------------------------------------------


'''

class StockTweetListener(tweepy.StreamListener):
    def __init__(self, target):
        super(StockTweetListener, self).__init__();
        self.target = target
        # status_wrapper = TextWrapper(width=60, initial_indent=' ',
        #                             subsequent_indent=' ')
        # This isn't used in the current code. But, if you were going
        # to use it, you'd need to assign it to self.status_wrapper;
        # otherwise the variable would be local to this __init__ method
        # and inaccessible from anything else.

    def on_status(self, status):
        try:
            msg = OUT_STR % {
                'text': status.text,
                'author': status.author.screen_name,
                'date': status.created_at,
                'source': status.source,
                'geo': status.geo,
            }
            print msg
            self.target.write(msg)
            # use self.target here. self is one of the paramaters to this
            # method and refers to the object; because you assigned to its
            # .target attribute before, you can use it here.

        except UnicodeDecodeError:
            # Catch any unicode errors while printing to console
            # and just ignore them to avoid breaking application.
            print "Record Skipped"

    def on_error(self, status_code):
        print 'An error has occured! Status code = %s' % status_code
        return True # keep stream alive

    def on_timeout(self):
        print 'Snoozing Zzzzzz'

def main():
    username = raw_input('Twitter username: ')
    password = getpass('Twitter password: ')
    stock = raw_input('Name of Stocks(comma seperated): ')
    stock_list = [u for u in stock.split(',')]
    follow_list = None # ??? you don't seem to define this variable

    # open results.txt here and name it f locally. once code flow leaves
    # the with statement, in this case only through an exception happening
    # that jumps you out of the while loop, the file will be closed.
    with open('results.txt', 'w') as f:
         while True:
             stream = tweepy.Stream(
                            username, password,
                            StockTweetListener(f), # passes the file to __init__
                                                   # as the "target" argument
                            timeout=None)
             stream.filter(follow_list, stock_list)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        quit()
</snippet></ROW><ROW><id>11546271</id><snippet>$ ls ../env/lib/python2.7/site-packages/pinax_theme_bootstrap/templates/account/ 
base.html             password_delete_done.html       password_set.html
email.html            password_delete.html            signup.html
language_change.html  password_reset_done.html        _signup_sidebar.html
login.html            password_reset_from_key.html    _terms.html
_login_sidebar.html   password_reset.html             timezone_change.html
logout.html           password_reset_key_message.txt  verification_sent.html
password_change.html  password_reset_message.txt
</snippet></ROW><ROW><id>11546285</id><snippet>continue</snippet></ROW><ROW><id>11546285</id><snippet>for x in OrderedList:
    if x in ResultList1:
        print x, '1'
        continue
    if x in ResultList2:
        print x, '2'
        continue
    if x in ResultList3:
        print x, '3'
        continue
</snippet></ROW><ROW><id>11546285</id><snippet>elif</snippet></ROW><ROW><id>11546338</id><snippet>int</snippet></ROW><ROW><id>11546338</id><snippet>def can_be_int(obj):
    try:
        int(obj)
    except (TypeError, ValueError):
        return False
    return True

headers = [header for header in tmp_dict.keys() if not can_be_int(header)]
</snippet></ROW><ROW><id>11546338</id><snippet>float</snippet></ROW><ROW><id>11546338</id><snippet>int</snippet></ROW><ROW><id>11546338</id><snippet>coerce(0, obj)</snippet></ROW><ROW><id>11546338</id><snippet>int(obj)</snippet></ROW><ROW><id>11546338</id><snippet>0 + obj and 1 * obj</snippet></ROW><ROW><id>11546338</id><snippet>headers = [header for header in tmp_dict.keys() if not str(header).isdigit()]
</snippet></ROW><ROW><id>11546338</id><snippet>isinstance()</snippet></ROW><ROW><id>11546338</id><snippet>type() == int</snippet></ROW><ROW><id>11546380</id><snippet>object.__getattribute__(instance, '__dict__')
</snippet></ROW><ROW><id>11546636</id><snippet># Open the file.
myfile = open('names.txt', 'r')

#Count the lines in the file
totalLines = len(myfile.readlines()):

# Close the file.
myfile.close()
</snippet></ROW><ROW><id>11546734</id><snippet># Anyone can execute
chmod +x helloworld.py

# Only the file owner can execute
chmod u+x helloworld.py
</snippet></ROW><ROW><id>11546881</id><snippet>call_command</snippet></ROW><ROW><id>11546881</id><snippet>from django.core.management import call_command

output = open(output_filename,'w') # Point stdout at a file for dumping data to.
call_command('dumpdata','model_name',format='json',indent=3,stdout=output)
output.close()
</snippet></ROW><ROW><id>11546881</id><snippet>--stdout=filename.json</snippet></ROW><ROW><id>11546881</id><snippet>manage.py: error: no such option: --stdout</snippet></ROW><ROW><id>11546886</id><snippet>PLAYLIST = 'playlist'
class PlaylistTest(TestCase):
    def insert_playlist(playlist_name=PLAYLIST):
        Playlist.objects.add_playlist(playlist_name)

    def test_add_one_video_to_playlist(self):
        self.insert_playlist()
        self.assertEqual(Playlist.objects.count(), 1, msg='playlist count is not 1, it is ' + str(Playlist.objects.count()))
</snippet></ROW><ROW><id>11546886</id><snippet>self</snippet></ROW><ROW><id>11546886</id><snippet>PLAYLIST = 'playlist'
class PlaylistTest(TestCase):
    def insert_playlist(self, playlist_name=PLAYLIST): # added self as first parameter here
        Playlist.objects.add_playlist(playlist_name)

    def test_add_one_video_to_playlist(self):
        self.insert_playlist()
        self.assertEqual(Playlist.objects.count(), 1, msg='playlist count is not 1, it is ' + str(Playlist.objects.count()))
</snippet></ROW><ROW><id>11546900</id><snippet>class someclass(object):
    def __init__(self):
        self.hope = []
        self.seconds = []
    def appendtoseconds(self):
        self.hope.append(self.date)
        for those in self.hope:
            date = those
            pattern = '%m/%d/%Y'
            epoch = int(time.mktime(time.strptime(date, pattern)))
            self.seconds.append(epoch)
        print self.seconds
</snippet></ROW><ROW><id>11546903</id><snippet>runInteraction</snippet></ROW><ROW><id>11546975</id><snippet>import csv

with open('input.csv') as fin, open('output.csv', 'wb') as fout:
    csvin = csv.reader(fin)
    csvout = csv.writer(fout)
    for row in csvin:
        for colno, col in enumerate(row):
            if col.strip() == '.':
                row[colno] = ''
        csvout.writerow(row)
</snippet></ROW><ROW><id>11546979</id><snippet>kwargs</snippet></ROW><ROW><id>11546979</id><snippet>Process</snippet></ROW><ROW><id>11546979</id><snippet>pool = [multiprocessing.Process(target=stretch, args= (shared_arr,slice(i, i+step)),kwargs=args) for i in range (0, y, step)]
</snippet></ROW><ROW><id>11547275</id><snippet>self.set_size_request(300, 300)</snippet></ROW><ROW><id>11547275</id><snippet>__init__</snippet></ROW><ROW><id>11547371</id><snippet>.js</snippet></ROW><ROW><id>11547371</id><snippet>.html</snippet></ROW><ROW><id>11547371</id><snippet>var data = { json: "object here" };</snippet></ROW><ROW><id>11547729</id><snippet>* 1000</snippet></ROW><ROW><id>11547729</id><snippet>x</snippet></ROW><ROW><id>11547729</id><snippet>2.74775004387
2.7489669323
</snippet></ROW><ROW><id>11547729</id><snippet>sorted()</snippet></ROW><ROW><id>11547729</id><snippet>sorted()</snippet></ROW><ROW><id>11547729</id><snippet>list.sort()</snippet></ROW><ROW><id>11547729</id><snippet>sorted()</snippet></ROW><ROW><id>11547729</id><snippet>sorted()</snippet></ROW><ROW><id>11547729</id><snippet>a = list(x)
a.sort()
</snippet></ROW><ROW><id>11547858</id><snippet>__init__()</snippet></ROW><ROW><id>11547858</id><snippet>**kwargs</snippet></ROW><ROW><id>11547858</id><snippet>class Base(object):
    def __init__(self, name, data):
        # store name and data

class Derived(Base):
    def __init__(self, **kwargs):
        Base.__init__(self, **kwargs)

Derived(name="Peter", data=42)
</snippet></ROW><ROW><id>11547966</id><snippet>import inspect
import parser

# this flatten function is by mike c fletcher
def flatten(l, ltypes=(list, tuple)):
    ltype = type(l)
    l = list(l)
    i = 0
    while i &lt; len(l):
        while isinstance(l[i], ltypes):
            if not l[i]:
                l.pop(i)
                i -= 1
                break
            else:
                l[i:i + 1] = l[i]
        i += 1
    return ltype(l)

# function we're interested in
def a():
    current_func = eval(inspect.stack()[0][3])
    last_frame = inspect.stack()[1]
    calling_code = last_frame[4][0]
    syntax_tree = parser.expr(calling_code)
    syntax_tree_tuple = parser.st2tuple(syntax_tree)
    flat_syntax_tree_tuple = flatten(syntax_tree_tuple)
    list_of_strings = filter(lambda s: type(s)==str,flat_syntax_tree_tuple)
    list_of_valid_strings = []
    for string in list_of_strings:
        try:
            st = parser.expr(string)
            list_of_valid_strings.append(string)
        except:
            pass
    list_of_candidates = filter(lambda s: eval(s)==current_func, list_of_valid_strings)
    print list_of_candidates

# other function
def c():
    pass

a()
b=a
a(),b(),c()
a(),c()
c(),b()
</snippet></ROW><ROW><id>11547966</id><snippet>['a']
['a', 'b']
['a', 'b']
['a']
['b']
</snippet></ROW><ROW><id>11547989</id><snippet>import tornado.ioloop
import tornado.httpclient

class Fetcher(object):
    def __init__(self, ioloop):
        self.ioloop = ioloop
        self.client = tornado.httpclient.AsyncHTTPClient(io_loop=ioloop)

    def fetch(self, url):
        self.client.fetch(url, self.handle_response)

    @property
    def active(self):
        """True if there are active fetching happening"""

        return len(self.client.active) != 0

    def handle_response(self, response):
        if response.error:
            print "Error:", response.error
        else:
            print "Got %d bytes" % (len(response.body))

        if not self.active:
            self.ioloop.stop()

def main():
    ioloop = tornado.ioloop.IOLoop.instance()
    ioloop.add_callback(scrapeEverything)
    ioloop.start()

def scrapeEverything():
    fetcher = Fetcher(tornado.ioloop.IOLoop.instance())

    listOfIds = [23423, 52356, 63462, 34673, 67436]

    for id in listOfIds:
        fetcher.fetch("http://mydatasite.com/?data_id=%d" % id)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11548224</id><snippet>NaN</snippet></ROW><ROW><id>11548351</id><snippet>get(key, defaultVar)</snippet></ROW><ROW><id>11548351</id><snippet>'details'</snippet></ROW><ROW><id>11548351</id><snippet>SmallDict = {d['name']:{'department':d['department'],'details':d.get('details','No details available')} for d in LargeDict['results']}
</snippet></ROW><ROW><id>11548754</id><snippet>logging.getLogger().setLevel(logging.INFO)
</snippet></ROW><ROW><id>11549246</id><snippet>def = 'str'</snippet></ROW><ROW><id>11549246</id><snippet>LIMIT 1</snippet></ROW><ROW><id>11549246</id><snippet>def</snippet></ROW><ROW><id>11549246</id><snippet>SELECT DISTINCT 'Table1' AS table_name FROM Table1 WHERE def = 'str'
 UNION ALL
SELECT DISTINCT 'Table2' FROM Table2 WHERE def = 'str'
 UNION ALL
SELECT DISTINCT 'Table3' FROM Table3 WHERE def = 'str'
</snippet></ROW><ROW><id>11549246</id><snippet>def</snippet></ROW><ROW><id>11549246</id><snippet>def</snippet></ROW><ROW><id>11549246</id><snippet>SHOW TABLES</snippet></ROW><ROW><id>11549246</id><snippet>def</snippet></ROW><ROW><id>11549246</id><snippet>SELECT table_name
  FROM information_schema.columns
 WHERE table_schema = DATABASE()
   AND column_name = 'def'
 GROUP BY table_name
 ORDER BY table_name
</snippet></ROW><ROW><id>11549294</id><snippet>unicode</snippet></ROW><ROW><id>11549294</id><snippet>{'foo': u'bar'}
</snippet></ROW><ROW><id>11549600</id><snippet>request.content.read()</snippet></ROW><ROW><id>11549600</id><snippet>from twisted.internet import reactor
from twisted.web.client import Agent
from twisted.web.http_headers import Headers

from twisted.web.client import FileBodyProducer
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol
from pprint import pformat

class BeginningPrinter(Protocol):
    def __init__(self, finished):
        self.finished = finished
        self.remaining = 1024 * 10

    def dataReceived(self, bytes):
        if self.remaining:
            display = bytes[:self.remaining]
            print 'Some data received:'
            print display
            self.remaining -= len(display)

    def connectionLost(self, reason):
        print 'Finished receiving body:', reason.getErrorMessage()
        self.finished.callback(None)

class SaveContents(Protocol):
    def __init__(self, finished, filesize, filename):
        self.finished = finished
        self.remaining = filesize
        self.outfile = open(filename, 'wb')

    def dataReceived(self, bytes):
        if self.remaining:
            display = bytes[:self.remaining]
            self.outfile.write(display)
            self.remaining -= len(display)
        else:
            self.outfile.close()

    def connectionLost(self, reason):
        print 'Finished receiving body:', reason.getErrorMessage()
        self.outfile.close()
        self.finished.callback(None)

agent = Agent(reactor)
f = open('70935-new_barcode.pdf', 'rb')
body = FileBodyProducer(f)
d = agent.request(
    'POST',
    'http://127.0.0.1:8080?filename=test.pdf',
    Headers({'User-Agent': ['Twisted Web Client Example'],
             'Content-Type': ['multipart/form-data; boundary=1024'.format()]}),
    body)

def cbRequest(response):
    print 'Response version:', response.version
    print 'Response code:', response.code
    print 'Response phrase:', response.phrase
    print 'Response headers:'
    print 'Response length:', response.length
    print pformat(list(response.headers.getAllRawHeaders()))
    finished = Deferred()
    response.deliverBody(SaveContents(finished, response.length, 'test2.pdf'))
    return finished
d.addCallback(cbRequest)

def cbShutdown(ignored):
    reactor.stop()
d.addBoth(cbShutdown)

reactor.run()
</snippet></ROW><ROW><id>11549600</id><snippet>from twisted.web import server, resource
from twisted.internet import reactor
import os

# multi part encoding example: http://marianoiglesias.com.ar/python/file-uploading-with-multi-part-encoding-using-twisted/
class Simple(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        return "{0}".format(request.args.keys())
    def render_POST(self, request):
        with open(request.args['filename'][0], 'wb') as fd:
            fd.write(request.content.read())
        request.setHeader('Content-Length', os.stat(request.args['filename'][0]).st_size)
        with open(request.args['filename'][0], 'rb') as fd:
            request.write(fd.read())
        request.finish()
        return server.NOT_DONE_YET

site = server.Site(Simple())
reactor.listenTCP(8080, site)
reactor.run()
</snippet></ROW><ROW><id>11549805</id><snippet>@route("/testDbOne", sqlalchemy=dict(keyword='dbone'))
def testUserOne(dbone):
    return "no error here"

@route("/testDbTwo", sqlalchemy=dict(keyword='dbtwo'))
def testDbTwo(dbtwo):
    return "no error here"
</snippet></ROW><ROW><id>11549819</id><snippet>adduser</snippet></ROW><ROW><id>11549819</id><snippet>useradd</snippet></ROW><ROW><id>11549819</id><snippet>adduser</snippet></ROW><ROW><id>11549819</id><snippet>subprocess.call()</snippet></ROW><ROW><id>11549941</id><snippet>btnHnd= win32api.FindWindowEx(hwnd, 0 , "Button", "#Title")
</snippet></ROW><ROW><id>11550052</id><snippet>defaultdict</snippet></ROW><ROW><id>11550052</id><snippet>intervalx = xsize / xsegment #Get the size of the chunks
intervaly = ysize / ysegment #Get the size of the chunks

#Setup to segment the image storing the start values and key into a dictionary.
xstart = 0
ystart = 0

output = []

for y in xrange(0, ysize, intervaly):
    numberofrows = intervaly if y + (intervaly * 2) &lt; ysize else ysize -y
    for x in xrange(0, xsize, intervalx):
        numberofcolumns = intervalx if x + (intervalx * 2) &lt; xsize else xsize -x
        lst = [x, y, numberofcolumns, numberofrows]
        output.append(lst)

        #If it doesn't make any difference to your program, the above 2 lines could read:
        #tple = (x, y, numberofcolumns, numberofrows)
        #output.append(tple)

        #This will be slightly more efficient 
        #(tuple creation is faster than list creation)
        #and less memory hungry.  In other words, if it doesn't need to be a list due
        #to other constraints (e.g. you append to it later), you should make it a tuple.
</snippet></ROW><ROW><id>11550052</id><snippet>offset_list=output[5]</snippet></ROW><ROW><id>11550052</id><snippet>offset_list=d[5][0]</snippet></ROW><ROW><id>11550101</id><snippet>&lt;corpus&gt;.words()</snippet></ROW><ROW><id>11550101</id><snippet>FreqDist</snippet></ROW><ROW><id>11550319</id><snippet>*args</snippet></ROW><ROW><id>11550319</id><snippet>**kwargs</snippet></ROW><ROW><id>11550319</id><snippet>*args</snippet></ROW><ROW><id>11550319</id><snippet>def test_var_args(farg, *args):
    print "formal arg:", farg
    for arg in args:
        print "another arg:", arg

test_var_args(1, "two", 3)
</snippet></ROW><ROW><id>11550319</id><snippet>formal arg: 1
another arg: two
another arg: 3
</snippet></ROW><ROW><id>11550319</id><snippet>**kwargs</snippet></ROW><ROW><id>11550319</id><snippet>def test_var_kwargs(farg, **kwargs):
    print "formal arg:", farg
    for key in kwargs:
        print "another keyword arg: %s: %s" % (key, kwargs[key])

test_var_kwargs(farg=1, myarg2="two", myarg3=3)
</snippet></ROW><ROW><id>11550319</id><snippet>formal arg: 1
another keyword arg: myarg2: two
another keyword arg: myarg3: 3
</snippet></ROW><ROW><id>11550426</id><snippet>from dateutil.rrule import DAILY, rrule, MO, TU, WE, TH, FR

def daterange(start_date, end_date):
  return rrule(DAILY, dtstart=start_date, until=end_date, byweekday=(MO,TU,WE,TH,FR))
</snippet></ROW><ROW><id>11550506</id><snippet>serve_forever()</snippet></ROW><ROW><id>11550506</id><snippet>manager.start()</snippet></ROW><ROW><id>11550506</id><snippet>BaseManager</snippet></ROW><ROW><id>11550506</id><snippet>SyncManager</snippet></ROW><ROW><id>11550506</id><snippet>from multiprocessing import Queue
from multiprocessing.managers import SyncManager

HOST = ''
PORT0 = 5011
PORT1 = 5012
PORT2 = 5013
AUTHKEY = 'authkey'

name0 = 'qm0'
name1 = 'qm1'
name2 = 'qm2'

description = 'Queue Server'

def CreateQueueServer(HOST, PORT, AUTHKEY, name = None, description = None):
    name = name
    description = description
    q = Queue()

    class QueueManager(SyncManager):
        pass


    QueueManager.register('get_queue', callable = lambda: q)
    QueueManager.register('get_name', callable = name)
    QueueManager.register('get_description', callable = description)
    manager = QueueManager(address = (HOST, PORT), authkey = AUTHKEY)
    manager.start() # This actually starts the server

    return manager

# Start three queue servers
qm0 = CreateQueueServer(HOST, PORT0, AUTHKEY, name0, description)
qm1 = CreateQueueServer(HOST, PORT1, AUTHKEY, name1, description)
qm2 = CreateQueueServer(HOST, PORT2, AUTHKEY, name2, description)

raw_input("return to end")
</snippet></ROW><ROW><id>11550506</id><snippet>from multiprocessing.managers import SyncManager

HOST = ''
PORT0 = 5011
PORT1 = 5012
PORT2 = 5013
AUTHKEY = 'authkey'

def QueueServerClient(HOST, PORT, AUTHKEY):
    class QueueManager(SyncManager):
        pass
    QueueManager.register('get_queue')
    QueueManager.register('get_name')
    QueueManager.register('get_description')
    manager = QueueManager(address = (HOST, PORT), authkey = AUTHKEY)
    manager.connect() # This starts the connected client
    return manager

# create three connected managers
qc0 = QueueServerClient(HOST, PORT0, AUTHKEY)
qc1 = QueueServerClient(HOST, PORT1, AUTHKEY)
qc2 = QueueServerClient(HOST, PORT2, AUTHKEY)
# Get the queue objects from the clients
q0 = qc0.get_queue()
q1 = qc1.get_queue()
q2 = qc2.get_queue()
# put stuff in the queues
q0.put('some stuff')
q1.put('other stuff')
q2.put({1:123, 2:'abc'})
# check their sizes
print 'q0 size', q0.qsize()
print 'q1 size', q1.qsize()
print 'q2 size', q2.qsize()

# pull some stuff and print it
print q0.get()
print q1.get()
print q2.get()
</snippet></ROW><ROW><id>11550506</id><snippet>dictionary[0] = something</snippet></ROW><ROW><id>11550506</id><snippet>dictionary.update([(key, value), (otherkey, othervalue)])</snippet></ROW><ROW><id>11550506</id><snippet>dictionary.get(key)</snippet></ROW><ROW><id>11550558</id><snippet>x1 = win32com.client.DispatchEx("Excel.Application")
x2 = win32com.client.DispatchEx("Excel.Application")
wb1 = x1.Workbooks.Open(.....
wb2 = x2.Workbooks.Open(.....
</snippet></ROW><ROW><id>11550670</id><snippet>class ACL(db.Model):
  user = db.UserProperty()
  permissions = db.ListProperty(str) # there are lots of other ways to store the permissions as well
</snippet></ROW><ROW><id>11550670</id><snippet>User                  Permissions
admin@example.com     ['ADMIN_VIEWER', 'ADMIN_EDITOR']
</snippet></ROW><ROW><id>11550670</id><snippet>user = users.get_current_user()
acl = db.GqlQuery("SELECT * FROM ACL WHERE user = :1", user).get()
if 'ADMIN_VIEWER' in acl.permissions:
  # continue
else:
  # unauthorized
</snippet></ROW><ROW><id>11550772</id><snippet>print re.findall(r'\W+', DATA)  # note, UPPER-case "W"
</snippet></ROW><ROW><id>11550772</id><snippet>[', ', ' - ', ' ', ' ', ' ', ' ', '!?']
</snippet></ROW><ROW><id>11550772</id><snippet>\W+</snippet></ROW><ROW><id>11550772</id><snippet>\w+</snippet></ROW><ROW><id>11550772</id><snippet>   \w  Matches word characters, i.e., letters, digits, and underscores.
   \W  Matches non-word characters, i.e., the negated version of \w
</snippet></ROW><ROW><id>11550901</id><snippet>def escape(htmlstring):
    escapes = {'\"': '"',
               '\'': ''',
               '&lt;': '&lt;',
               '&gt;': '&gt;'}
    # This is done first to prevent escaping other escapes.
    htmlstring = htmlstring.replace('&amp;', '&amp;')
    for seq, esc in escapes.iteritems():
        htmlstring = htmlstring.replace(seq, esc)
    return htmlstring
</snippet></ROW><ROW><id>11550901</id><snippet>&amp;</snippet></ROW><ROW><id>11550901</id><snippet>'</snippet></ROW><ROW><id>11550901</id><snippet>"</snippet></ROW><ROW><id>11550901</id><snippet>&lt;</snippet></ROW><ROW><id>11550901</id><snippet>&gt;</snippet></ROW><ROW><id>11551056</id><snippet>new_from_stream</snippet></ROW><ROW><id>11551056</id><snippet>from gi.repository import Gtk
from gi.repository.GdkPixbuf import Pixbuf
import urllib2

url = 'http://lolcat.com/images/lolcats/1338.jpg'
response = urllib2.urlopen(url)
fname = url.split("/")[-1]
f = open(fname, "wb")
f.write(response.read())
f.close()
response.close()
image = Gtk.Image()
image.set_from_pixbuf(Pixbuf.new_from_file(fname))
</snippet></ROW><ROW><id>11551089</id><snippet>isoformat()</snippet></ROW><ROW><id>11551089</id><snippet>1342648659.223746</snippet></ROW><ROW><id>11551089</id><snippet>&gt;&gt; from datetime import datetime
&gt;&gt; datetime.fromtimestamp(1342648659.223746).isoformat()
== '2012-07-18T23:57:39.223746'
</snippet></ROW><ROW><id>11551089</id><snippet>&gt;&gt; datetime.utcnow().isoformat()
== '2012-07-19T00:06:45.724468'
</snippet></ROW><ROW><id>11551089</id><snippet>Z</snippet></ROW><ROW><id>11551089</id><snippet>strftime</snippet></ROW><ROW><id>11551089</id><snippet>&gt;&gt; datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
== '2012-07-18T22:11:05Z'
</snippet></ROW><ROW><id>11551091</id><snippet>client = SSHClient()
client.load_system_host_keys()
client.connect('ssh.example.com')
stdin, stdout, stderr = client.exec_command('ls -l')
</snippet></ROW><ROW><id>11551091</id><snippet>connect()</snippet></ROW><ROW><id>11551091</id><snippet>connect(self, hostname, port=22, username=None, password=None,
        pkey=None, key_filename=None, timeout=None, allow_agent=True,
        look_for_keys=True, compress=False)
</snippet></ROW><ROW><id>11551619</id><snippet>setsebool -P httpd_can_network_connect on
</snippet></ROW><ROW><id>11552007</id><snippet>try:
    run_code1()
except TypeError:
    run_code2()
    return None   # The finally block is run before the method returns
finally:
    other_code()
</snippet></ROW><ROW><id>11552007</id><snippet>try:
    run_code1()
except TypeError:
    run_code2()
    return None   

other_code()  # This doesn't get run if there's an exception.
</snippet></ROW><ROW><id>11552007</id><snippet>run_code1()</snippet></ROW><ROW><id>11552007</id><snippet>TypeError</snippet></ROW><ROW><id>11552007</id><snippet>continue</snippet></ROW><ROW><id>11552007</id><snippet>break</snippet></ROW><ROW><id>11552282</id><snippet>&gt;&gt;&gt; from pyparsing import *
&gt;&gt;&gt; integer = Word(nums)
&gt;&gt;&gt; expr = Suppress("data:") + ZeroOrMore(integer) + StringEnd()
</snippet></ROW><ROW><id>11552282</id><snippet>&gt;&gt;&gt; expr.parseString("data: 1 2 3").asList()
['1', '2', '3']
</snippet></ROW><ROW><id>11552282</id><snippet>&gt;&gt;&gt; expr.parseString("data:").asList()
[]
</snippet></ROW><ROW><id>11552282</id><snippet>&gt;&gt;&gt; expr.parseString("data: 4 Z 6 7").asList()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\python26\lib\site-packages\pyparsing-1.5.6-py2.6.egg\pyparsing.py", line 1032, in parseString
    raise exc
pyparsing.ParseException: Expected end of text (at char 12), (line:1, col:13)
</snippet></ROW><ROW><id>11552350</id><snippet>raw_input()</snippet></ROW><ROW><id>11552350</id><snippet>time.sleep()</snippet></ROW><ROW><id>11552350</id><snippet>import time
print("something")
time.sleep(5.5)    # pause 5.5 seconds
print("something")
</snippet></ROW><ROW><id>11552543</id><snippet>‚Äô</snippet></ROW><ROW><id>11553086</id><snippet>from suffix_trees import SuffixTree
t = SuffixTree("mississippi")
t = None
</snippet></ROW><ROW><id>11553086</id><snippet>==8800== 1,413 (32 direct, 1,381 indirect) bytes in 1 blocks are definitely lost in loss record 1,265 of 1,374
==8800==    at 0x4A0884D: malloc (vg_replace_malloc.c:263)
==8800==    by 0xBE70AEC: make_helper (suffix_tree.c:193)
==8800==    by 0xBE704B2: SuffixTree_init (python_bindings.c:240)
==8800==    by 0x3F98C9867B: ??? (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98C49A7D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98CD71D6: PyEval_CallObjectWithKeywords (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98C5EB45: ??? (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98C49A7D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98CD93F2: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98CDDB2E: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98C6D7B5: ??? (in /usr/lib64/libpython2.7.so.1.0)
==8800==    by 0x3F98C49A7D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0)
</snippet></ROW><ROW><id>11553086</id><snippet>make_helper()</snippet></ROW><ROW><id>11553086</id><snippet>malloc</snippet></ROW><ROW><id>11553086</id><snippet>free</snippet></ROW><ROW><id>11553086</id><snippet>/* FIXME: deallocation of this guy! */
static PyTypeObject SuffixTreeType = {
    PyObject_HEAD_INIT(NULL)
    .tp_name      = "_suffix_tree.SuffixTree",
    /* ... */
    .tp_new       = SuffixTree_new,
};
</snippet></ROW><ROW><id>11553368</id><snippet>MyModel.objects.filter(options__regex=r'a : b')
MyModel.objects.filter(options__regex=r'.*c : d')
</snippet></ROW><ROW><id>11553407</id><snippet>STARTER = "Hello World"
FILENAME = "data.txt"
TARGET = "Blah="

with open(FILENAME) as f:
    value = None
    start_seen = False
    for line in f:
        if line.strip() == STARTER:
            start_seen = True
            continue

        if TARGET in line and start_seen:
            _,value = line.split('=')
            break

if value is not None:
    print "Got value %d" % int(value)
else:
    print "Nothing found"
</snippet></ROW><ROW><id>11553456</id><snippet>Ui_Dialog</snippet></ROW><ROW><id>11553456</id><snippet>QDialog</snippet></ROW><ROW><id>11553456</id><snippet>accept</snippet></ROW><ROW><id>11553456</id><snippet>class MyDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(MyDialog, self).__init__(parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        # use new style signals
        self.ui.buttonBox.accepted.connect(self.accept)
        self.ui.buttonBox.rejected.connect(self.reject)

    def accept(self):
        if self.ui.radioButton.isChecked(): # no need to do ==True
            #Call continuous grabber
            print "Grabbing continuously"
        else:
            #Call trigger server
            print "Grabbing triggered"
        super(MyDialog, self).accept()  # call the accept method of QDialog. 
                                           # super is needed 
                                           # since we just override the accept method
</snippet></ROW><ROW><id>11553456</id><snippet>def begin_grab(self):
    self.GrabIm=MyDialog(self)
    self.GrabIm.exec_()  # exec_() for modal dialog
                           # show() for non-modal dialog
</snippet></ROW><ROW><id>11553456</id><snippet>accept/reject</snippet></ROW><ROW><id>11553456</id><snippet>class MyDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(MyDialog, self).__init__(parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        # use new style signals
        self.ui.buttonBox.accepted.connect(self.accept)
        self.ui.buttonBox.rejected.connect(self.reject)
</snippet></ROW><ROW><id>11553456</id><snippet>def begin_grab(self):
    self.GrabIm=MyDialog(self)
    if self.GrabIm.exec_():  # this will be True if dialog is 'accept'ed, False otherwise
        if self.GrabIm.ui.radioButton.isChecked():
            #Call continuous grabber
            print "Grabbing continuously"
        else:
            #Call trigger server
            print "Grabbing triggered"
</snippet></ROW><ROW><id>11553457</id><snippet>     ...
     for event in pygame.event.get(KEYDOWN):
        if event.key==K_ESCAPE:
            terminate()
        else:
            currentChar = event.unicode
            guesses +=checkChar(usrWord)
            print(currentChar)
            print(screenWord)
            msg = ''.join(screenWord)

    # Clean background
    hangmanSurfaceObj.fill(bgColor)

    # Then blit message
    msgSurfaceObj = fontObj.render(msg, False, blackColor)
    msgRectObj = msgSurfaceObj.get_rect()
    msgRectObj.topleft = (10, 20)
    hangmanSurfaceObj.blit(msgSurfaceObj, msgRectObj)

    ...
</snippet></ROW><ROW><id>11553457</id><snippet>hangmanSurfaceObj.fill(blueColor, pygame.Rect(400,0,640,480))
</snippet></ROW><ROW><id>11553589</id><snippet>with open("commentsfordjango.txt", "wb") as f:
    f.write(fullcomment.encode('utf8'))
</snippet></ROW><ROW><id>11553589</id><snippet>with open("commentsfordjango.txt", "rb") as f:
    for line in f.read().decode("utf-8").splitlines():
        cursor.execute("INSERT INTO polls_poll (commenttext, pos, neu, neg) VALUES (%s, 0, 0, 0)", line)
</snippet></ROW><ROW><id>11553631</id><snippet>def _compare_dict(self, d1, d2):
    """
    Compares two dictionaries of floating point numbers
    for equality.
    """
    if len(d1) != len(d2): # comparing `.keys()` is futile and slow
        return False
    try:
        return all(abs(d1[k] - d2[k]) &lt; sys.float_info.epsilon for k in d1)
    except KeyError:
        return False
</snippet></ROW><ROW><id>11553631</id><snippet>-2</snippet></ROW><ROW><id>11553631</id><snippet>2</snippet></ROW><ROW><id>11553807</id><snippet>&lt;method selector='execute:'&gt;
&lt;arg index='0' type='@?' function_pointer='true'&gt;
&lt;arg type='@'/&gt;
&lt;arg type64='Q' type='I'/&gt;
&lt;retval type='v'/&gt;
&lt;/arg&gt;
&lt;/method&gt;
</snippet></ROW><ROW><id>11553807</id><snippet>&lt;method selector='execute:'&gt;
&lt;arg index='0' type='@?' block='true'&gt;
&lt;arg type='@'/&gt;
&lt;arg type64='Q' type='I'/&gt;
&lt;retval type='v'/&gt;
&lt;/arg&gt;
&lt;/method&gt;
</snippet></ROW><ROW><id>11553877</id><snippet>&gt;&gt;&gt; object() &gt; 0
Traceback (most recent call last):
  File "&lt;pyshell#320&gt;", line 1, in &lt;module&gt;
    object() &gt; 0
TypeError: unorderable types: object() &gt; int()
</snippet></ROW><ROW><id>11553877</id><snippet>None &lt; Numbers &lt; [Other types in alphabetical order]
</snippet></ROW><ROW><id>11553877</id><snippet>int</snippet></ROW><ROW><id>11553877</id><snippet>bool</snippet></ROW><ROW><id>11553877</id><snippet>float</snippet></ROW><ROW><id>11553877</id><snippet>complex</snippet></ROW><ROW><id>11553877</id><snippet>instance</snippet></ROW><ROW><id>11553877</id><snippet>None</snippet></ROW><ROW><id>11553877</id><snippet>Numbers</snippet></ROW><ROW><id>11553882</id><snippet>thread.start_new_thread(self.upload, (request.content.read(),))
</snippet></ROW><ROW><id>11554253</id><snippet>pyalsaaudio</snippet></ROW><ROW><id>11554403</id><snippet>.dylib</snippet></ROW><ROW><id>11554403</id><snippet>.so</snippet></ROW><ROW><id>11554403</id><snippet>/usr/lib/libc.dylib</snippet></ROW><ROW><id>11554403</id><snippet>libc.dylib</snippet></ROW><ROW><id>11554413</id><snippet>ca_certs</snippet></ROW><ROW><id>11554413</id><snippet>ssl</snippet></ROW><ROW><id>11554413</id><snippet>notBefore</snippet></ROW><ROW><id>11554413</id><snippet>notAfter</snippet></ROW><ROW><id>11554413</id><snippet>ssl</snippet></ROW><ROW><id>11554429</id><snippet>Desktop</snippet></ROW><ROW><id>11554429</id><snippet>pwd = os.getcwd()
working_path = 'C:\\Users\\grayson\\Desktop'
</snippet></ROW><ROW><id>11554429</id><snippet>pwd</snippet></ROW><ROW><id>11554429</id><snippet>working_path</snippet></ROW><ROW><id>11554429</id><snippet>working_path = 'C:/Users/grayson/Desktop'</snippet></ROW><ROW><id>11554429</id><snippet># BEFORE
def create_folders():
    for fol in folders.keys():
        fol_name = folders[fol]
        if not os.path.isdir(fol_name):
            os.mkdir(fol_name)
</snippet></ROW><ROW><id>11554429</id><snippet>working_path</snippet></ROW><ROW><id>11554429</id><snippet># AFTER
def create_folders():
    for fol_name in folders.itervalues():
        fol_path = os.path.join(working_path, fol_name)
        if not os.path.isdir(fol_path):
            os.mkdir(fol_path)
</snippet></ROW><ROW><id>11554429</id><snippet>Desktop</snippet></ROW><ROW><id>11554429</id><snippet># BEFORE
split_name = fname.split('.')
exten = split_name[len(split_name)-1]
</snippet></ROW><ROW><id>11554429</id><snippet># AFTER
exten = fname.split('.')[-1]
</snippet></ROW><ROW><id>11554429</id><snippet># BEFORE
if exten == 'pdf':
    shutil.move(wp + '\\' + fname, wp + '\\' + folders['pdf'])
elif exten == 'jpg' or exten == 'png' or exten == 'gif':
    shutil.move(wp + '\\' + fname, wp + '\\' + folders['img'])
else:
    print 'Sumin else'
</snippet></ROW><ROW><id>11554429</id><snippet># AFTER
src = os.path.join(wp, fname)
key = None

if exten == 'pdf':
    key = 'pdf'
elif exten in ('jpg', 'png', 'gif'):
    key = 'img'

if key:
    shutil.move(src, os.path.join(wp, folders['img'], fname))
else:
    print 'Sumin else'
</snippet></ROW><ROW><id>11554630</id><snippet>with open('in.txt', 'r') as f:
  for line in f:
    for s in line.split(' '):
      num = int(s)
      print num
</snippet></ROW><ROW><id>11554630</id><snippet>for line in f</snippet></ROW><ROW><id>11554630</id><snippet>read() all</snippet></ROW><ROW><id>11554630</id><snippet>readlines</snippet></ROW><ROW><id>11554729</id><snippet>class UserProfile(UserenaBaseProfile):

        user = models.OneToOneField(User, unique=True)
        city = models.CharField(max_length=32, blank=True, null=True)
</snippet></ROW><ROW><id>11554729</id><snippet>AUTH_PROFILE_MODULE = 'accounts.UserProfile'
</snippet></ROW><ROW><id>11554861</id><snippet>admin_password_reset</snippet></ROW><ROW><id>11554861</id><snippet>&lt;h3&gt;&lt;a href="{% url 'admin_password_reset' %}"&gt;Forgot your password?&lt;/a&gt;&lt;/h3&gt;</snippet></ROW><ROW><id>11555509</id><snippet>with open('filename.txt') as fp:
    for line in fp:
        print line
</snippet></ROW><ROW><id>11555509</id><snippet>with</snippet></ROW><ROW><id>11555509</id><snippet>with</snippet></ROW><ROW><id>11556029</id><snippet>repr()</snippet></ROW><ROW><id>11556029</id><snippet>import csv, re

data="""
\x00cRPLY01  IREQ    0000011
N00    \x009FDXSPD01"CASH","","",10219575.34,0.00,0,"000000000000773"
\x00EFDXSPD01"CAD","CANADA DOLLAR","CU",-14564.52,0.00,0,"000000000000773"
\x00PFDXSPD01"CCTUSD","CURRENCY CONTRACT - USD","CC",3644.00,0.00,0,"000000000000773"
\x00QFDXSPD01"CCTUSD","CURRENCY CONTRACT - USD","CC",-3641.07,0.00,0,"000000000000773"
\x00PFDXSPD01"CCTUSD","CURRENCY CONTRACT - USD","CC",1457.00,0.00,0,"000000000000773"
\x00QFDXSPD01"CCTUSD","CURRENCY CONTRACT - USD","CC",-1456.43,0.00,0,"000000000000773"
\x00DFDXSPD01"CD5427","JOHN CD","CD",100000.00,197.95,0,"000000000000773"
\x00LFDXSPD01"CP5427","COMMERCIAL PAPER","CP",9925000.00,0.00,0,"000000000000773"
\x00JFDXSPD01"FS5427","JOHNFORSTOCK","FS",81000.00,10000.00,0,"000000000000773"
\x00FFDXSPD01"FUT5427","JOHNFUTURE","FT",264000.00,0.00,0,"000000000000773"
\x00BFDXSPD01"JKSTOCK","JK STOCK","S",31500.00,0.00,0,"000000000000773"
\x00LFDXSPD01"MB5427","JOHN MUNI BOND","M",255000.00,15611.92,0,"000000000000773"
\x00QFDXSPD01"MBS5427","JOHNMORTGAGEBACKED","G1",996500.00,2916.67,0,"000000000000773"
\x00EFDXSPD01"OPT5427","JOHNOPTION","O",464000.00,0.00,0,"000000000000773"
\x00CFDXSPD01"TB5427","TREASURY BILL","TI",0.00,0.00,0,"000000000000773"
\x00HFDXSPD01"UB5427","JOHN BOND","G",2994000.00,13281.26,0,"000000000000773"
\x009FDXSPD01"UNITS","UNITS","S",0.00,0.00,0,"000000000000773"
\x00\x13CHKP01  N0000000170'"""

lines = data.split('\x00')
for line in lines:
    try:
        pos = line.index('"')
        print 'ROW:', next(csv.reader([line[pos:]]))
    except ValueError as e:
        try:
            print 'OTH:', line[next(re.finditer('RPLY|CHKP', line)).start():].split()
        except StopIteration as e:
            print 'XXX:', line
</snippet></ROW><ROW><id>11556029</id><snippet>OTH: XXX: 

OTH: ['RPLY01', 'IREQ', '0000011', 'N00']
ROW: ['CASH', '', '', '10219575.34', '0.00', '0', '000000000000773']
ROW: ['CAD', 'CANADA DOLLAR', 'CU', '-14564.52', '0.00', '0', '000000000000773']
ROW: ['CCTUSD', 'CURRENCY CONTRACT - USD', 'CC', '3644.00', '0.00', '0', '000000000000773']
...
ROW: ['TB5427', 'TREASURY BILL', 'TI', '0.00', '0.00', '0', '000000000000773']
ROW: ['UB5427', 'JOHN BOND', 'G', '2994000.00', '13281.26', '0', '000000000000773']
ROW: ['UNITS', 'UNITS', 'S', '0.00', '0.00', '0', '000000000000773']
OTH: ['CHKP01', "N0000000170'"]
</snippet></ROW><ROW><id>11556140</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax = plt.axes()


points_with_annotation = []
for i in range(10):
    point, = plt.plot(i, i, 'o', markersize=10)

    annotation = ax.annotate("Mouseover point %s" % i,
        xy=(i, i), xycoords='data',
        xytext=(i + 1, i), textcoords='data',
        horizontalalignment="left",
        arrowprops=dict(arrowstyle="simple",
                        connectionstyle="arc3,rad=-0.2"),
        bbox=dict(boxstyle="round", facecolor="w", 
                  edgecolor="0.5", alpha=0.9)
        )
    # by default, disable the annotation visibility
    annotation.set_visible(False)

    points_with_annotation.append([point, annotation])


def on_move(event):
    visibility_changed = False
    for point, annotation in points_with_annotation:
        should_be_visible = (point.contains(event)[0] == True)

        if should_be_visible != annotation.get_visible():
            visibility_changed = True
            annotation.set_visible(should_be_visible)

    if visibility_changed:        
        plt.draw()

on_move_id = fig.canvas.mpl_connect('motion_notify_event', on_move)

plt.show()
</snippet></ROW><ROW><id>11556231</id><snippet>(r'^home/$', myapp.views.index)
</snippet></ROW><ROW><id>11556231</id><snippet>&lt;a href="{% url myapp.views.index %}&gt;some text&lt;/a&gt;
</snippet></ROW><ROW><id>11556231</id><snippet>&lt;a href="{% url 'myapp.views.index' %}&gt;some text&lt;/a&gt;
</snippet></ROW><ROW><id>11556460</id><snippet>import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
np.random.seed(0)

x = np.random.normal(size=200)
y = np.random.normal(size=200)
v = np.sqrt(x**2+y**2)

xg, yg = np.mgrid[x.min():x.max():100j, y.min():y.max():100j]
vg = griddata((x, y), v, (xg, yg), method='cubic')
plt.contourf(xg, yg, vg)
plt.scatter(x, y, c=v)
plt.show()
</snippet></ROW><ROW><id>11556542</id><snippet>from test import meetinghandler</snippet></ROW><ROW><id>11556542</id><snippet>test</snippet></ROW><ROW><id>11556542</id><snippet>/home/rohit/test/</snippet></ROW><ROW><id>11556542</id><snippet>test</snippet></ROW><ROW><id>11556812</id><snippet>res = service.cse().list(
     q='lectures',
     cx='013036536707430787589:_pqjad5hr1a',
     num=10, #Valid values are integers between 1 and 10, inclusive.
).execute() 

next_response = service.cse().list(
     q='lectures',
     cx='013036536707430787589:_pqjad5hr1a',
     num=10,
     start=res['queries']['nextPage'][0]['startIndex'],
).execute() 
</snippet></ROW><ROW><id>11556817</id><snippet>'select * from table offset %s limit %s order by %s' % (0,5,'sort_column')
</snippet></ROW><ROW><id>11556817</id><snippet>WHERE var = %s</snippet></ROW><ROW><id>11556959</id><snippet>t1 = Thread(target=distantEcho)
t2 = Thread(target=firstShout)
</snippet></ROW><ROW><id>11556998</id><snippet>def on_change_bool1(self, cr, uid, ids, bool1):
    return {'value':{'bool1':bool1,'bool2':False}}
</snippet></ROW><ROW><id>11556998</id><snippet>def on_change_bool2(self, cr, uid, ids, bool2):
    return {'value':{'bool2': bool2,'bool1':False}}
</snippet></ROW><ROW><id>11557147</id><snippet>PostgreSQL</snippet></ROW><ROW><id>11557147</id><snippet>MySQL</snippet></ROW><ROW><id>11557330</id><snippet>Mask</snippet></ROW><ROW><id>11557330</id><snippet>get_at</snippet></ROW><ROW><id>11557330</id><snippet>pygame.mask.from_surface</snippet></ROW><ROW><id>11557330</id><snippet>def sub(u, v):
  return [ u[i]-v[i] for i in range(len(u)) ]
</snippet></ROW><ROW><id>11557330</id><snippet># create mask from surface
mask = pygame.mask.from_surface(building.surface)

# translate the position of the missile,
# since the top left coordinate of the mask is always (0, 0)
rel_point = sub(missile.position, building.position)
try: 
    if mask.get_at(rel_point): 
        # point in mask
        do_something()
except IndexError: 
    pass
</snippet></ROW><ROW><id>11557580</id><snippet>Signal.send(sender, **kwargs)

Signal.send_robust(sender, **kwargs)
</snippet></ROW><ROW><id>11557580</id><snippet># not the real word code.
Signal.send(User, raw_password="xxx")

# raw password stays in **kwargs

def create_user_profile(sender, instance, created, **kwargs):

if created:
      //here i want user password unencrypted where I pass that parameter to this
      raw_pass = kwargs.get('raw_password')
</snippet></ROW><ROW><id>11557970</id><snippet>term</snippet></ROW><ROW><id>11557970</id><snippet>pattern = re.compile("(%s)" % "|".join(re.escape(term) for term in dictionary))
</snippet></ROW><ROW><id>11557970</id><snippet>pattern.finditer</snippet></ROW><ROW><id>11559122</id><snippet>"{} and {}".format("string", 1)
</snippet></ROW><ROW><id>11559488</id><snippet>print</snippet></ROW><ROW><id>11559488</id><snippet>import sys,timeit
class ClassAccess(object):
    y = 1
    def __init__(self):
        print(ClassAccess.y)

class SelfAccess(object):
    y = 1
    def __init__(self):
        print(self.y)

ca = timeit.timeit(ClassAccess, number=100000)
sa = timeit.timeit(SelfAccess, number=100000)

sys.stderr.write(str(ca) + "\n")
sys.stderr.write(str(sa) + "\n")
</snippet></ROW><ROW><id>11559488</id><snippet>0.640013933182
0.628859043121
</snippet></ROW><ROW><id>11559649</id><snippet>def dict_to_args(d, prefix=()):
    for k, v in d.iteritems():
        if isinstance(v, dict):
            for x in dict_to_args(v, prefix + (k,)):
                yield x
        else:
            yield ".".join(prefix + (k,)) + ":" + v
</snippet></ROW><ROW><id>11559649</id><snippet>&gt;&gt;&gt; list(dict_to_args(dic))
['x2:val3', 'x1.x2:val1']
</snippet></ROW><ROW><id>11559936</id><snippet>logscale</snippet></ROW><ROW><id>11559936</id><snippet>logspace</snippet></ROW><ROW><id>11559936</id><snippet>import pylab as plt
import numpy as np

x=np.arange(1,1e5)

# Normal plot
#plt.plot(x,x,'o-')

# Log plot
idx=np.logspace(0,np.log10(len(x)),10).astype('int')-1
plt.plot(x[idx],x[idx],'o-')
plt.xscale('log')
plt.yscale('log')
plt.show()
</snippet></ROW><ROW><id>11560147</id><snippet>soaplib</snippet></ROW><ROW><id>11560147</id><snippet> var_dump($client-&gt;__getFunctions());
 var_dump($client-&gt;__getTypes());
</snippet></ROW><ROW><id>11560147</id><snippet>class SayHelloStruct {
    function __construct($name, $times) {
        $this-&gt;name = $name;
        $this-&gt;times = $times;
    }
}

$struct = new SayHelloStruct("Dave", 5);
// here "say_hello" is not the method name but the name of the struct
$soapstruct = new SoapVar($struct, SOAP_ENC_OBJECT, "say_hello");
$param = new SoapParam($soapstruct, "say_hello");

var_dump($client-&gt;say_hello($param));
</snippet></ROW><ROW><id>11560147</id><snippet>$struct = (object)array("name" =&gt; "Dave", "times" =&gt; 5);
// here "say_hello" is not the method name but the name of the struct
$soapstruct = new SoapVar($struct, SOAP_ENC_OBJECT, "say_hello");
$param = new SoapParam($soapstruct, "say_hello");

var_dump($client-&gt;say_hello($param));
</snippet></ROW><ROW><id>11560147</id><snippet>SoapParam</snippet></ROW><ROW><id>11560225</id><snippet>}</snippet></ROW><ROW><id>11560417</id><snippet>ProxyPass /x/tool/text http://X.Y.Z.A/x/tool/test-my
ProxyPassReverse /x/tool/text http://X.Y.Z.A/x/tool/test-my
</snippet></ROW><ROW><id>11560417</id><snippet>ProxyPassReverse</snippet></ROW><ROW><id>11560417</id><snippet>ProxyPassReverseCookieDomain</snippet></ROW><ROW><id>11560417</id><snippet>ProxyPassReverseCookiePath</snippet></ROW><ROW><id>11560417</id><snippet>ProxyRequests</snippet></ROW><ROW><id>11560856</id><snippet>'Location'</snippet></ROW><ROW><id>11560856</id><snippet>'302 Found'</snippet></ROW><ROW><id>11561040</id><snippet>from django.db import models

class QuerySetManager(models.Manager):
    def get_query_set(self):
        return self.model.QuerySet(self.model)



# Using it in a model:

from django.db.models.query import QuerySet    

class Entry(models.Model):
   ...
   objects = QuerySetManager()
   ...
   class QuerySet(QuerySet):
        def chckactive(self):            
            return self.filter(active=True)


#   Entry.objects.all().chckactive()
</snippet></ROW><ROW><id>11561359</id><snippet>inspect</snippet></ROW><ROW><id>11561359</id><snippet>inspect</snippet></ROW><ROW><id>11561359</id><snippet>g</snippet></ROW><ROW><id>11561359</id><snippet>f()</snippet></ROW><ROW><id>11561359</id><snippet>f</snippet></ROW><ROW><id>11561499</id><snippet>__init__</snippet></ROW><ROW><id>11561499</id><snippet>Symbol</snippet></ROW><ROW><id>11561499</id><snippet>str</snippet></ROW><ROW><id>11561499</id><snippet>__init__</snippet></ROW><ROW><id>11561499</id><snippet>__init__</snippet></ROW><ROW><id>11561499</id><snippet>__init__</snippet></ROW><ROW><id>11561923</id><snippet>from subprocess import Popen, PIPE

cat_proc = '/usr/bin/cat'

consumers = (Popen([cat_proc], stdin = PIPE, stdout = open('consumer1', 'w')),
             Popen([cat_proc], stdin = PIPE, stdout = open('consumer2', 'w')),
             Popen([cat_proc], stdin = PIPE, stdout = open('consumer3', 'w'))
)


with open('inputfile', 'r') as infile:
   for byte in infile:
       for consumer in consumers:
           consumer.stdin.write(byte)
</snippet></ROW><ROW><id>11561923</id><snippet>from subprocess import Popen, PIPE

cat_proc = '/usr/bin/cat'

consumers = (Popen([cat_proc], stdin = PIPE, stdout = open('consumer1', 'w')),
             Popen([cat_proc], stdin = PIPE, stdout = open('consumer2', 'w')),
             Popen([cat_proc], stdin = PIPE, stdout = open('consumer3', 'w'))
)

producer = Popen([cat_proc, 'inputfile'], stdout = PIPE)

while True:
    byte = producer.stdout.read(1024)
    if not byte: break
    for consumer in consumers:
        consumer.stdin.write(byte)
</snippet></ROW><ROW><id>11562009</id><snippet>tolist()</snippet></ROW><ROW><id>11562009</id><snippet>int32</snippet></ROW><ROW><id>11562009</id><snippet>int</snippet></ROW><ROW><id>11562009</id><snippet>&gt;&gt;&gt; list(np.arange(5))
[0, 1, 2, 3, 4]
&gt;&gt;&gt; type(list(np.arange(5)))
&lt;type 'list'&gt;
&gt;&gt;&gt; type(list(np.arange(5))[0])
&lt;type 'numpy.int32'&gt;
&gt;&gt;&gt; np.arange(5).tolist()
[0, 1, 2, 3, 4]
&gt;&gt;&gt; type(np.arange(5).tolist())
&lt;type 'list'&gt;
&gt;&gt;&gt; type(np.arange(5).tolist()[0])
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>11562009</id><snippet>tolist()</snippet></ROW><ROW><id>11562044</id><snippet>ModelState</snippet></ROW><ROW><id>11562044</id><snippet>class ModelState(object):
    """
    A class for storing instance state
    """
    def __init__(self, db=None):
        self.db = db
        # If true, uniqueness validation checks will consider this a new, as-yet-unsaved object.
        # Necessary for correct validation of new instances of objects with explicit (non-auto) PKs.
        # This impacts validation only; it has no effect on the actual save.
        self.adding = True
</snippet></ROW><ROW><id>11562044</id><snippet>Model</snippet></ROW><ROW><id>11562044</id><snippet>db</snippet></ROW><ROW><id>11562044</id><snippet>db</snippet></ROW><ROW><id>11562044</id><snippet>adding</snippet></ROW><ROW><id>11562125</id><snippet>perl</snippet></ROW><ROW><id>11562125</id><snippet>script.pl</snippet></ROW><ROW><id>11562125</id><snippet>#!/usr/bin/env perl

use warnings;
use strict;
use File::Basename qw|basename|;

die qq{Usage: perl $0 &lt;real|trial&gt;\n} unless @ARGV == 1;

my $real = $ARGV[0] eq q|real| ? 1 : 0;

## Filter filenames from the directory that match criteria of OP.
my @files = grep { -d $_ &amp;&amp; m/\A(\d+)\s-\s.*\1/ } map { basename $_ } &lt;./*&gt;;

## Get numbers in reverse mode to substitute them later in filenames .
my @nums = map { m/\A(\d+)/; $1 || 0 } reverse @files;

## Process all files, change the number of the file and rename it.
for my $file ( @files ) { 
    (my $new_file = $file) =~ s/\A(\d+)/shift @nums/e;

    if ( $real ) { 
        rename $file, $new_file or warn qq|WARN: Couldn't rename "$file"\n|;
    }   
    else {
        printf qq|%s\n|, qq|rename "$file" "$new_file"|;
    }   
}
</snippet></ROW><ROW><id>11562125</id><snippet>ls -1
</snippet></ROW><ROW><id>11562125</id><snippet>1 - file1file
2 - fi2le
3 - fileeee3
4 - fou4r
5 -  donttouch
6 -  donttouch5either
script.pl
</snippet></ROW><ROW><id>11562125</id><snippet>perl script.pl
</snippet></ROW><ROW><id>11562125</id><snippet>ls -1
</snippet></ROW><ROW><id>11562125</id><snippet>1 - fou4r
2 - fileeee3
3 - fi2le
4 - file1file
5 -  donttouch
6 -  donttouch5either
script.pl
</snippet></ROW><ROW><id>11562125</id><snippet>real</snippet></ROW><ROW><id>11562125</id><snippet>trial</snippet></ROW><ROW><id>11562125</id><snippet>print</snippet></ROW><ROW><id>11562125</id><snippet>perl script.pl real
</snippet></ROW><ROW><id>11562125</id><snippet>perl script.pl trial
</snippet></ROW><ROW><id>11562138</id><snippet>*x</snippet></ROW><ROW><id>11562138</id><snippet>x</snippet></ROW><ROW><id>11562138</id><snippet>%</snippet></ROW><ROW><id>11562138</id><snippet>print "%d %d %d %d" % tuple(x)
</snippet></ROW><ROW><id>11562189</id><snippet>amqp.h</snippet></ROW><ROW><id>11562334</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen('http://yahoo.com').read()
soup = BeautifulSoup(page)
counter = 0
for img in soup.find_all('img'):
    with open("image" + str(counter),'wb') as f:
        f.write(urllib2.urlopen(img['src']).read())
    counter += 1
</snippet></ROW><ROW><id>11562786</id><snippet>r"(?&lt;=\/)[^(\/)]+(?=(\.jpg HTTP))"</snippet></ROW><ROW><id>11562786</id><snippet>re</snippet></ROW><ROW><id>11563309</id><snippet>print timeit.Timer('''
d.sum(axis=0)
''', '''
import numpy as np
a = range(200)
b = range(199,-1,-1)
c = range(1,201)
d = np.array([a,b,c])''').timeit(number = 1000)
</snippet></ROW><ROW><id>11563414</id><snippet>def update(val):
    frame = numpy.around(sframe.val)
    l.set_data(data[frame,:,:])
</snippet></ROW><ROW><id>11563511</id><snippet>repeat.py</snippet></ROW><ROW><id>11563511</id><snippet>shell=True</snippet></ROW><ROW><id>11563511</id><snippet>shell=True</snippet></ROW><ROW><id>11563542</id><snippet>Series.apply</snippet></ROW><ROW><id>11563542</id><snippet>Series.map</snippet></ROW><ROW><id>11563542</id><snippet>pandas.lib.map_infer</snippet></ROW><ROW><id>11563542</id><snippet>numpy.vectorize</snippet></ROW><ROW><id>11563929</id><snippet>import bisect

def f(x):
    funcs = [do_something_1, do_something_2, do_something_3, do_something_4]
    funcs[bisect.bisect_left([.1, 1, 10], x)]()
</snippet></ROW><ROW><id>11563935</id><snippet>while True:
    ln = p.stdout.readline()
    if '' == ln:
        break
    m = re.search("Thread (?P&lt;id&gt;\d+)", ln);
    if m:
        # use m.group() to extract information
        # e.g. m.group('id') will hold the 12345 from "Thread 12345"
</snippet></ROW><ROW><id>11563935</id><snippet>#!/usr/bin/python

import subprocess
from time import gmtime, strftime

p = subprocess.Popen(["ping", "-c", "3", "-i", "2", "127.0.0.1"],
                 stdout=subprocess.PIPE)

for ln in p.stdout:
    print strftime("%H:%M:%S", gmtime()) + " received " + ln

# Now I start the same process again, reading the input the other way.

p = subprocess.Popen(["ping", "-c", "3", "-i", "2", "127.0.0.1"],
                 stdout=subprocess.PIPE)

while True:
    ln = p.stdout.readline()
    if '' == ln:
            break
    print strftime("%H:%M:%S", gmtime()) + " received " + ln
</snippet></ROW><ROW><id>11563935</id><snippet>(nothing for the first six seconds)
15:40:10 received PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
15:40:10 received 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.037 ms
15:40:10 received 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.034 ms
15:40:10 received 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.031 ms
15:40:10 received
15:40:10 received --- 127.0.0.1 ping statistics ---
15:40:10 received 3 packets transmitted, 3 received, 0% packet loss, time 3998ms
15:40:10 received rtt min/avg/max/mdev = 0.031/0.034/0.037/0.002 ms

15:40:10 received PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
15:40:10 received 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.041 ms
15:40:12 received 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.039 ms
15:40:14 received 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.035 ms
15:40:14 received
15:40:14 received --- 127.0.0.1 ping statistics ---
15:40:14 received 3 packets transmitted, 3 received, 0% packet loss, time 3999ms
15:40:14 received rtt min/avg/max/mdev = 0.035/0.038/0.041/0.005 ms
</snippet></ROW><ROW><id>11564064</id><snippet>NOFOLLOW_RE = re.compile(u'&lt;a (?![^&gt;]*rel=["\']nofollow[\'"])'\
                         u'(?![^&gt;]*href=["\']http://mysite\.com(/[^\'"]*)?[\'"])',
                         re.U|re.I)
</snippet></ROW><ROW><id>11564064</id><snippet>NOFOLLOW_RE = re.compile(u'&lt;a (?![^&gt;]*rel=["\']nofollow[\'"])'\
                         u'(?![^&gt;]*href=["\'](?:https?://mysite\.com(?:/[^\'"]*)|/[^\'"]*|#[^\'"]*)[\'"])',
                         re.U|re.I)
</snippet></ROW><ROW><id>11564064</id><snippet>NOFOLLOW_RE = re.compile(u'&lt;a (?P&lt;link&gt;(?![^&gt;]*rel=["\']nofollow[\'"])'\
                         u'(?![^&gt;]*href=["\'](?:https?://mysite\.com(?:/[^\'"]*)|/[^\'"]*|#[^\'"]*)[\'"]).*?&lt;/a&gt;)',
                         re.U|re.I)
...
response.content = NOFOLLOW_RE.sub(u'&lt;noindex&gt;&lt;a rel="nofollow" \g&lt;link&gt;&lt;/noindex&gt;', your_html)
</snippet></ROW><ROW><id>11564074</id><snippet>'/favicon.ico'</snippet></ROW><ROW><id>11564074</id><snippet>'/{userurl}'</snippet></ROW><ROW><id>11564323</id><snippet>sort()</snippet></ROW><ROW><id>11564323</id><snippet>sort()</snippet></ROW><ROW><id>11564323</id><snippet>key=xxx</snippet></ROW><ROW><id>11564323</id><snippet>cmp=xxx</snippet></ROW><ROW><id>11564323</id><snippet>sort()</snippet></ROW><ROW><id>11564323</id><snippet>def topological_sort(source):
    """perform topo sort on elements.

    :arg source: list of ``(name, [list of dependancies])`` pairs
    :returns: list of names, with dependancies listed first
    """
    pending = [(name, set(deps)) for name, deps in source]        
    emitted = []        
    while pending:
        next_pending = []
        next_emitted = []
        for entry in pending:
            name, deps = entry
            deps.difference_update(emitted)
            if deps:
                next_pending.append(entry)
            else:
                yield name
                emitted.append(name) # &lt;-- not required, helps preserve original order
                next_emitted.append(name)
        if not next_emitted:
            raise ValueError("cyclic/missing dependancy detected: %r" % (next_pending,))
        pending = next_pending
        emitted = next_emitted
</snippet></ROW><ROW><id>11564323</id><snippet>cmp()</snippet></ROW><ROW><id>11564323</id><snippet>key=xxx</snippet></ROW><ROW><id>11564497</id><snippet>frame.set_focus()</snippet></ROW><ROW><id>11564497</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>11564497</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>11564497</id><snippet>self.canvas.bind("&lt;Button-1&gt;", lambda _: self.focus_set())
</snippet></ROW><ROW><id>11564497</id><snippet>CustomWidget.__init__</snippet></ROW><ROW><id>11564497</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>11564562</id><snippet>http://localhost:5000/tx/checkme/?filepathz=" + path; (Note the '?')
</snippet></ROW><ROW><id>11564562</id><snippet>http://localhost:5000/tx/checkme/" + path</snippet></ROW><ROW><id>11564562</id><snippet>@app.route('/tx/checkme/&lt;filepathz&gt;')
def checkme(filepathz):
      return render_template('init.html', txc_version=filepathz) # You can use this variable directly since you got it as a function arguement.
</snippet></ROW><ROW><id>11564645</id><snippet>Item.created</snippet></ROW><ROW><id>11564645</id><snippet>DateTimeField</snippet></ROW><ROW><id>11564645</id><snippet>Item.created</snippet></ROW><ROW><id>11564645</id><snippet>ForeignKey</snippet></ROW><ROW><id>11564645</id><snippet>DateTime</snippet></ROW><ROW><id>11564645</id><snippet># From http://lightbird.net/dbe/todo_list.html#adding-multiple-items

class DateTime(models.Model):
    datetime = models.DateTimeField(auto_now_add=True)
    def __unicode__(self):
        return unicode(self.datetime)

class Item(models.Model):
    name = models.CharField(max_length=60)
    created = models.ForeignKey(DateTime)
    priority = models.IntegerField(default=0)
    difficulty = models.IntegerField(default=0)
    done = models.BooleanField(default=False)
</snippet></ROW><ROW><id>11564960</id><snippet>sudo gcc whatever.c -I/dir/*
</snippet></ROW><ROW><id>11564970</id><snippet>#!/usr/bin/env perl
use strict;
use warnings;
use English qw( -no_match_vars );

my %times;

$OFS = " ";

open my $file, "&lt;", "file2" or die "Failed to open file2 ($!)";
while (&lt;$file&gt;)
{
    my($key,$value) = split;
    $times{$key} = $value;
}
close $file;

while (&lt;&gt;)
{
    if (/^get_time file/)
    {
        my(@words) = split;
        my($keycol) = $words[$#words];
        $words[2] = $times{$keycol} if defined $times{$keycol};
        print @words, "\n";
        next;
    }
    print;
}
</snippet></ROW><ROW><id>11564970</id><snippet>.X1X.
.X2X.
.X3X.
get_time file 10 -max 5 -min 0 abcde
get_time file 9 -max 5 -min 0 abfdf
get_time file 9 -max 5 -avg 3 -min 0 xyyxx
get_time file 10 -max 5 -min 0 abcxx
.X4X.
.X5X.
.X6X.
</snippet></ROW><ROW><id>11564970</id><snippet>abcde 8
abfdf 8.5
xyyxx 7.5
abcxx 9
</snippet></ROW><ROW><id>11564970</id><snippet>.X1X.
.X2X.
.X3X.
get_time file 8 -max 5 -min 0 abcde 
get_time file 8.5 -max 5 -min 0 abfdf 
get_time file 7.5 -max 5 -avg 3 -min 0 xyyxx 
get_time file 9 -max 5 -min 0 abcxx 
.X4X.
.X5X.
.X6X.
</snippet></ROW><ROW><id>11565031</id><snippet>tuple</snippet></ROW><ROW><id>11565031</id><snippet>namedtuple</snippet></ROW><ROW><id>11565031</id><snippet>p.x</snippet></ROW><ROW><id>11565031</id><snippet>p[0]</snippet></ROW><ROW><id>11565031</id><snippet>tuple</snippet></ROW><ROW><id>11565031</id><snippet>verbose</snippet></ROW><ROW><id>11565031</id><snippet>Point</snippet></ROW><ROW><id>11565031</id><snippet>from collections import namedtuple

class Point(namedtuple('Point', 'x y z')):
    __slots__ = ()  # prevent creation of instance dictionaries to save memory
    point_count = 0  # instance counter

    def __init__(self, *args):
        super(Point, self).__init__(*args)
        Point.point_count += 1

    def distance(self, other):
        return sum((self[i]-other[i])**2 for i in xrange(len(self))) ** 0.5

    def copy_point(self, distance):
        'create another Point at distance from the self Point'
        return Point(*[dimension+distance for dimension in self])

p1 = Point(0, 0, 0)
print 'p1:', p1
p2 = p1.copy_point(20)
print 'p2: Point(%s)' % ', '.join(str(p2[i]) for i in xrange(len(p2)))
print 'distance p1 &lt;-&gt; p2: %.3f' % p1.distance(p2)
</snippet></ROW><ROW><id>11565031</id><snippet>p1: Point(x=1, y=2, z=3)
p2: Point(21, 22, 23)
distance p1 &lt;-&gt; p2: 34.641
</snippet></ROW><ROW><id>11565031</id><snippet>namedtuple</snippet></ROW><ROW><id>11565031</id><snippet>__getitem__()</snippet></ROW><ROW><id>11565031</id><snippet>__str__()</snippet></ROW><ROW><id>11565031</id><snippet>__init__()</snippet></ROW><ROW><id>11565031</id><snippet>namedtuple</snippet></ROW><ROW><id>11565127</id><snippet>re.sub()</snippet></ROW><ROW><id>11565127</id><snippet>&gt;&gt;&gt; term = "Lizards and Amphibians not salamander or newt"
&gt;&gt;&gt; re.sub(r"\b(not|or|and)\b", lambda m: m.group().upper(), term)
'Lizards AND Amphibians NOT salamander OR newt'
</snippet></ROW><ROW><id>11565127</id><snippet>&gt;&gt;&gt; " ".join(s.upper() if s.lower() in ["and", "or", "not"] else s
...          for s in term.split())
'Lizards AND Amphibians NOT salamander OR newt'
</snippet></ROW><ROW><id>11565127</id><snippet>And</snippet></ROW><ROW><id>11565179</id><snippet>Keyword</snippet></ROW><ROW><id>11565179</id><snippet>Literal</snippet></ROW><ROW><id>11565179</id><snippet>parseAll=True</snippet></ROW><ROW><id>11565307</id><snippet>import os

os.system("cls")
</snippet></ROW><ROW><id>11565493</id><snippet>isinstance</snippet></ROW><ROW><id>11565493</id><snippet>if isinstance(y, someClass):
    # do stuff
</snippet></ROW><ROW><id>11565681</id><snippet>pip install mysql-python</snippet></ROW><ROW><id>11565681</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; connection = MySQLdb.connect(database='test')
&gt;&gt;&gt; cursor = connection.cursor()
&gt;&gt;&gt; cursor.execute('SELECT * FROM users WHERE firstname = %s',('somename',))
&gt;&gt;&gt; results = cursor.fetchall()
&gt;&gt;&gt; for i in results:
       print i
</snippet></ROW><ROW><id>11565736</id><snippet>//opf:meta[@name='calibre:user_metadata:#origfieldvalue']
</snippet></ROW><ROW><id>11565955</id><snippet>ms.listSubscribe(
    id=settings.MAILCHIMP_NEWSLETTER_LIST_ID,
    email_address=self.user.email,
    merge_vars={'FNAME': self.user.first_name,
        'LNAME': self.user.last_name,
        'GROUPINGS': [
            {'id': 9917,
            'groups': 'food service operator',},]},
    double_optin=False,
    update_existing=True,
)  
</snippet></ROW><ROW><id>11565987</id><snippet>def gui(item):
    if item == 'a':
       pass # do something with a
    elif item == 'b':
       pass # do something with b
</snippet></ROW><ROW><id>11565987</id><snippet>filemenu.add_command(label='Item-a', command=lambda : gui('a'))
filemenu.add_command(label='Item-b', command=lambda : gui('b'))
</snippet></ROW><ROW><id>11566057</id><snippet>self.redirect('/sucess')
</snippet></ROW><ROW><id>11566057</id><snippet>self.redirect('/success?email=' + email + '&amp;product=' + product)
</snippet></ROW><ROW><id>11566057</id><snippet>email = self.request.get('email')
product = self.request.get('product')
</snippet></ROW><ROW><id>11566208</id><snippet>i</snippet></ROW><ROW><id>11566208</id><snippet>i</snippet></ROW><ROW><id>11566208</id><snippet>i=3
def foo():
    print i
i=4
foo()  #prints 4, when you expected 3
</snippet></ROW><ROW><id>11566208</id><snippet>i=3
def foo(i=i):
    print i
i=4
foo()  #prints 3, you're happy now.
</snippet></ROW><ROW><id>11566208</id><snippet>canvas.tag_bind(self.optionThumbsDisp[i],"&lt;Button-1&gt;", lambda x,i=i: self.changeWallpaper(canvas,w,h,(i+1))
</snippet></ROW><ROW><id>11566296</id><snippet>    @app.route('/url_which_handles_form_data/', methods=['POST'])
    def handle_data():
        projectpath = request.form.projectFilePath
        #your code


    &lt;form action="localhost/url_which_handles_form_data" method="Post"&gt;
    your code
    &lt;/form&gt;
</snippet></ROW><ROW><id>11566313</id><snippet>float value = bp::extract&lt;float&gt;(someArray[someindex]);
</snippet></ROW><ROW><id>11566604</id><snippet>SELECT *
FROM yourtable
WHERE date_and_time = (SELECT MAX(date_and_time) FROM yourtable)
</snippet></ROW><ROW><id>11566986</id><snippet>Popen</snippet></ROW><ROW><id>11566986</id><snippet>shell=True</snippet></ROW><ROW><id>11566986</id><snippet>omp</snippet></ROW><ROW><id>11566986</id><snippet>import shlex
omp_cmd = 'omp -h %s -u %s -w %s -p %s -X %s' %(self.host_IP, self.username, self.password, self.port, temp_xml)
xmlResult = Popen(shlex.split(omp_cmd), stdout=PIPE, stderr=STDOUT)
</snippet></ROW><ROW><id>11566986</id><snippet>import shlex
omp_cmd = 'omp -h %s -u %s -w %s -p %s -X -' %(self.host_IP, self.username, self.password)
with open(temp_xml) as stdin:
    xmlResult = Popen(shlex.split(omp_cmd), stdin=stdin, stdout=PIPE, stderr=STDOUT)
</snippet></ROW><ROW><id>11567036</id><snippet>from tastypie.api import Api

api = Api()

api.register(SessionResource())

urlpatterns += patterns('',
    (r'^api/', include(api.urls)),
)
</snippet></ROW><ROW><id>11567085</id><snippet>BaseSpider.start_requests</snippet></ROW><ROW><id>11567095</id><snippet>f.close()</snippet></ROW><ROW><id>11567095</id><snippet>f.close</snippet></ROW><ROW><id>11567095</id><snippet>close()</snippet></ROW><ROW><id>11567095</id><snippet>for line in f:
   print f
</snippet></ROW><ROW><id>11567095</id><snippet>for line in f:
   print line
</snippet></ROW><ROW><id>11567095</id><snippet>with</snippet></ROW><ROW><id>11567095</id><snippet>with open('file.txt') as f:
   # put file related actions here
   for line in f:
      print line
</snippet></ROW><ROW><id>11567265</id><snippet>continue</snippet></ROW><ROW><id>11567265</id><snippet>try:
    yield int(item)
    continue
except (ValueError, TypeError) as WrongTypeError:
    pass
</snippet></ROW><ROW><id>11567265</id><snippet>continue</snippet></ROW><ROW><id>11567265</id><snippet>def type_convert(data):
    for item in data:
        try:
            yield int(item)
            continue
        except (ValueError, TypeError) as WrongTypeError:
            pass
        try:
            yield float(item)
            continue
        except (ValueError, TypeError) as WrongTypeError:
            pass
        yield item


for a in type_convert(['a','1','1.0']):
    print (a)
</snippet></ROW><ROW><id>11567310</id><snippet>&gt;&gt;&gt; b = [28, 4, 56, 4, 59, 4, 62, 4, 57, 4, 32, 0, 28, 4, 48, 4, 60, 4, 67, 4, 59, 4, 53, 4, 32, 0, 62, 4, 66, 4, 32, 0, 28, 4, 48, 4, 57, 4, 56, 4, 44, 0, 32, 0, 49, 0, 49, 0, 32, 0, 79, 4, 61, 4, 50, 4, 48, 4, 64, 4, 79, 4, 32, 0, 49, 0, 57, 0, 52, 0, 52, 0, 46, 0, 0, 0]
&gt;&gt;&gt; bytes(b).decode("utf-16")
'Милой Мамуле от Майи, 11 января 1944.\x00'
</snippet></ROW><ROW><id>11567310</id><snippet>&gt;&gt;&gt; b = [28, 4, 56, 4, 59, 4, 62, 4, 57, 4, 32, 0, 28, 4, 48, 4, 60, 4, 67, 4, 59, 4, 53, 4, 32, 0, 62, 4, 66, 4, 32, 0, 28, 4, 48, 4, 57, 4, 56, 4, 44, 0, 32, 0, 49, 0, 49, 0, 32, 0, 79, 4, 61, 4, 50, 4, 48, 4, 64, 4, 79, 4, 32, 0, 49, 0, 57, 0, 52, 0, 52, 0, 46, 0, 0, 0]
&gt;&gt;&gt; "".join(chr(c) for c in b).decode("utf-16")
u'\u041c\u0438\u043b\u043e\u0439 \u041c\u0430\u043c\u0443\u043b\u0435 \u043e\u04
42 \u041c\u0430\u0439\u0438, 11 \u044f\u043d\u0432\u0430\u0440\u044f 1944.\x00'
</snippet></ROW><ROW><id>11567650</id><snippet>')'</snippet></ROW><ROW><id>11567650</id><snippet>if</snippet></ROW><ROW><id>11567650</id><snippet>check(sum(numlist[row][col:col+4])
                                  ^
</snippet></ROW><ROW><id>11567650</id><snippet>check(sum(numlist[row][col:col+4]))
                                  ^
</snippet></ROW><ROW><id>11567679</id><snippet>isdigit()</snippet></ROW><ROW><id>11567679</id><snippet>import sys

if len(sys.argv) &gt; 1:
    for e in sys.argv:
        if e.isdigit():
            # all characters in e are digits and there is at least one character in e
        else:
            # it is possibly your filename argument
</snippet></ROW><ROW><id>11567679</id><snippet>import argparse
parser = argparse.ArgumentParser(description = 'A simple description')

parser.add_argument('-f', action = 'store', dest =  'filename', required = False)
parser.add_argument('-n', action = 'store', dest = 'n', required = True, type=int)

arguments = parser.parse_args()

print arguments.n
print arguments.filename
</snippet></ROW><ROW><id>11567896</id><snippet>unmatched open brace in list</snippet></ROW><ROW><id>11568022</id><snippet>&gt;&gt;&gt; import rpy2.interactive as r
&gt;&gt;&gt; r.importr("utils")
&gt;&gt;&gt; package_name = "DirichletReg"
&gt;&gt;&gt; r.packages.utils.install_packages(package_name)
</snippet></ROW><ROW><id>11568071</id><snippet>window.console.log("Message")
</snippet></ROW><ROW><id>11568381</id><snippet>session.query(Entry).join(Entry.tags).filter(Tag.id==1).count()
</snippet></ROW><ROW><id>11568381</id><snippet>session.query(Entry).with_parent(mytag, "entries").count()
</snippet></ROW><ROW><id>11568393</id><snippet>multiprocessing</snippet></ROW><ROW><id>11568427</id><snippet>{% autoescape off %}
var x={{json_var}}
{% endautoescape %}
</snippet></ROW><ROW><id>11568457</id><snippet>CREATE INDEX table_name_index_source ON table_name Source;</snippet></ROW><ROW><id>11568457</id><snippet>CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ name ] ON table [ USING method ]
    ( { column | ( expression ) } [ COLLATE collation ] [ opclass ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
    [ WITH ( storage_parameter = value [, ... ] ) ]
    [ TABLESPACE tablespace ]
    [ WHERE predicate ]
</snippet></ROW><ROW><id>11568596</id><snippet>class SaveContents(Protocol):
    def __init__(self, finished, filesize, filename):
        self.finished = finished
        self.remaining = filesize
        self.outfile = open(filename, 'wb')

    def dataReceived(self, bytes):
        if self.remaining:
            display = bytes[:self.remaining]
            self.outfile.write(display)
            self.remaining -= len(display)
        else:
            self.outfile.close()

    def connectionLost(self, reason):
        print 'Finished receiving body:', reason.getErrorMessage()
        self.outfile.close()
        self.finished.callback(None)
</snippet></ROW><ROW><id>11568596</id><snippet>self.finished.callback(None)</snippet></ROW><ROW><id>11568596</id><snippet>self.finished.callback(self.response)</snippet></ROW><ROW><id>11568596</id><snippet>init</snippet></ROW><ROW><id>11568596</id><snippet>class SaveContents(Protocol):
    def __init__(self, finished, response, filesize, filename):
        self.finished = finished
        self.remaining = filesize
        self.response = response
        self.outfile = open(filename, 'wb')

    def dataReceived(self, bytes):
        if self.remaining:
            display = bytes[:self.remaining]
            self.outfile.write(display)
            self.remaining -= len(display)
        else:
            self.outfile.close()

    def connectionLost(self, reason):
        print 'Finished receiving body:', reason.getErrorMessage()
        self.outfile.close()
        self.finished.callback(self.response)
</snippet></ROW><ROW><id>11568596</id><snippet>None</snippet></ROW><ROW><id>11568680</id><snippet>time.py</snippet></ROW><ROW><id>11568680</id><snippet>time</snippet></ROW><ROW><id>11568680</id><snippet>time.py</snippet></ROW><ROW><id>11568680</id><snippet>time.pyc</snippet></ROW><ROW><id>11569056</id><snippet>f.write(requests.get(img.attrib['src']).content)</snippet></ROW><ROW><id>11569466</id><snippet>from glob import iglob
import os.path
import pymongo
import json

for fname in iglob(os.path.expanduser('~/Tweets/*.txt')):
    with open(fname) as fin:
        tweets = json.load(fin)
        for tweet in tweets:
            db.tweets.insert(tweet)
</snippet></ROW><ROW><id>11569466</id><snippet>.load</snippet></ROW><ROW><id>11569466</id><snippet>.loads</snippet></ROW><ROW><id>11569466</id><snippet>.load()</snippet></ROW><ROW><id>11569466</id><snippet>.loads()</snippet></ROW><ROW><id>11569466</id><snippet>db.tweets.insert</snippet></ROW><ROW><id>11569466</id><snippet>tweets = db.tweets</snippet></ROW><ROW><id>11569503</id><snippet>glob</snippet></ROW><ROW><id>11569503</id><snippet>import glob
import os
print '\n'.join(glob.iglob(os.path.join(mypath, "KRAS_P01446_3GFT_*")))
</snippet></ROW><ROW><id>11569503</id><snippet>os.listdir</snippet></ROW><ROW><id>11569503</id><snippet>mylist = ["hi_there", "bye_there","hello_there"]
print '\n'.join(s for s in mylist if s.startswith("hi"))
</snippet></ROW><ROW><id>11569562</id><snippet>#! /usr/bin/env python
from flask_root import applicaiton

if __name__ == '__main__':
    application.manager.run()
</snippet></ROW><ROW><id>11569562</id><snippet>from flask_root.application import db
</snippet></ROW><ROW><id>11569562</id><snippet>./application.py runserver
</snippet></ROW><ROW><id>11569562</id><snippet>from application import db
...
</snippet></ROW><ROW><id>11569562</id><snippet>from . import db
...
</snippet></ROW><ROW><id>11569572</id><snippet>b</snippet></ROW><ROW><id>11569572</id><snippet>for x in ()</snippet></ROW><ROW><id>11569572</id><snippet>a = (x for x in range(3))
for i in a:
    b = (x for x in range(2))
    for j in b:
        print (i,j)
</snippet></ROW><ROW><id>11569656</id><snippet>import time
def some_view(request):
    for i in range(1, 31):
        request.response.body_file.write(".")
        time.sleep(1)
</snippet></ROW><ROW><id>11569656</id><snippet>/questions/123454</snippet></ROW><ROW><id>11569656</id><snippet>/questions/123454/badges</snippet></ROW><ROW><id>11569656</id><snippet>/questions/123454/related</snippet></ROW><ROW><id>11569656</id><snippet>$(function () {
    $("#badges-partial").load("/questions/123454/badges");
    $("#related-partial").load("/questions/123454/related");
});
</snippet></ROW><ROW><id>11569664</id><snippet>CREATE TABLE tag_relationships (
    tag_child_id INTEGER NOT NULL REFERENCES tags (id) ON UPDATE CASCADE ON DELETE CASCADE,
    tag_parent_id INTEGER NOT NULL REFERENCES tags (id) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (tag_child_id, tag_parent_id)
);
</snippet></ROW><ROW><id>11569664</id><snippet>tag_child_id  tag_parent_id
A             B
A             C
C             D
</snippet></ROW><ROW><id>11569664</id><snippet>A             B
A             C
A             D
C             D
</snippet></ROW><ROW><id>11569664</id><snippet>(A, D)</snippet></ROW><ROW><id>11569728</id><snippet>@staticmethod
def expose (widget, event):
    if 'gtk.Layout' in str(type(widget)):
        cr=widget.bin_window.cairo_create()
    else:
        cr = widget.window.cairo_create()
    cr.set_operator(cairo.OPERATOR_CLEAR)
    cr.rectangle(event.area)
    cr.fill()
    cr.set_operator(cairo.OPERATOR_OVER)
    try:
        widget.rgba
    except AttributeError:
        widget.rgba=(0.0,0.0,0.0,0.0)
    cr.set_source_rgba(*widget.rgba)
    cr.rectangle(event.area)
    cr.fill()  
</snippet></ROW><ROW><id>11569938</id><snippet>request.user</snippet></ROW><ROW><id>11569938</id><snippet>Publisher</snippet></ROW><ROW><id>11569938</id><snippet>Publisher.objects.get(**{Publisher._meta.get_ancestor_link(User).name: request.user})
</snippet></ROW><ROW><id>11569938</id><snippet>id</snippet></ROW><ROW><id>11569938</id><snippet>Publisher.objects.get(id = request.user.id)
</snippet></ROW><ROW><id>11569999</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>11569999</id><snippet>from PyQt4 import QtCore, QtGui
import your_generated_module

class MyMain(QtGui.QMainWindow, your_generated_module.Ui_MainWindow)
    def __init__(self, parent=None):
        super(MyMain, self).__init__(parent)
        self.setupUi(self)  
        # example of an event - pushbutton
        self.connect(self.pushButton, 
                     QtCore.SIGNAL("clicked()"),
                     self.test_print)

    def test_print():
        print "It worked!"    

def main():
   app = qtgui.QApplication(sys.argv)
   main_window = MyMain()
   main_window.show()
   app.exec_()

if __name__ == '__main__':
   main()
</snippet></ROW><ROW><id>11570060</id><snippet>document.getElementById('id_distance').value</snippet></ROW><ROW><id>11570060</id><snippet>document.getElementById('id_distance').value = &lt;some_var&gt;;</snippet></ROW><ROW><id>11570205</id><snippet>itemChanged(QTableWidgetItem *)</snippet></ROW><ROW><id>11570205</id><snippet>*</snippet></ROW><ROW><id>11570205</id><snippet>self.connect(self.tblData, SIGNAL('itemChanged(QTableWidgetItem *)'), self.updatePlot)
</snippet></ROW><ROW><id>11570205</id><snippet>self.tblData.itemChanged.connect(self.updatePlot)
</snippet></ROW><ROW><id>11570218</id><snippet>mydata = {}
varname = 'var'
mydata[varname] = 33
</snippet></ROW><ROW><id>11570218</id><snippet>dict</snippet></ROW><ROW><id>11570218</id><snippet>globals()</snippet></ROW><ROW><id>11570218</id><snippet>locals()</snippet></ROW><ROW><id>11570218</id><snippet>color=''
if X==0:
     color='WHITE'
elif X==1:
etc.
</snippet></ROW><ROW><id>11570218</id><snippet>COLORS = ('WHITE', 'RED', 'BLACK')
x = 2
try:
    color = COLORS[x]
except IndexError:
    color = 'DEFAULT COLOR'
</snippet></ROW><ROW><id>11570218</id><snippet>COLORS</snippet></ROW><ROW><id>11570218</id><snippet>COLORS = {0: 'WHITE', 1: 'RED', 2: 'BLACK'}
x = 2
color = COLORS.get(x, 'DEFAULT COLOR')
</snippet></ROW><ROW><id>11570251</id><snippet>d</snippet></ROW><ROW><id>11570251</id><snippet>0</snippet></ROW><ROW><id>11570251</id><snippet>99</snippet></ROW><ROW><id>11570251</id><snippet>d</snippet></ROW><ROW><id>11570251</id><snippet>values</snippet></ROW><ROW><id>11570251</id><snippet>d[i] == values[i]</snippet></ROW><ROW><id>11570251</id><snippet>values[array]
</snippet></ROW><ROW><id>11570251</id><snippet>array</snippet></ROW><ROW><id>11570251</id><snippet>array[:] = values[array]
</snippet></ROW><ROW><id>11570297</id><snippet>os.kill</snippet></ROW><ROW><id>11570297</id><snippet>os.kill(pid, signal.SIGINT)
</snippet></ROW><ROW><id>11570522</id><snippet>str.capitalize</snippet></ROW><ROW><id>11570522</id><snippet>unicode.capitalize</snippet></ROW><ROW><id>11570522</id><snippet>from operator import methodcaller
capitalize = methodcaller('capitalize')
</snippet></ROW><ROW><id>11570522</id><snippet>class mystr(str):
    def lower(self):
        return self.upper()

&gt;&gt;&gt; s = mystr('abc')
&gt;&gt;&gt; s.lower()
'ABC'

&gt;&gt;&gt; lower = methodcaller('lower')
&gt;&gt;&gt; lower(s)
'ABC'

&gt;&gt;&gt; str.lower(s)
'abc'
</snippet></ROW><ROW><id>11570522</id><snippet>split_tab = methodcaller('split', '\t')
split_comma = methodcaller('split', ',')
</snippet></ROW><ROW><id>11570528</id><snippet>beanstalk.reserve(timeout=0)</snippet></ROW><ROW><id>11570528</id><snippet>timeout=None</snippet></ROW><ROW><id>11570528</id><snippet>None</snippet></ROW><ROW><id>11570683</id><snippet>full_dehydrate</snippet></ROW><ROW><id>11570683</id><snippet>full=True</snippet></ROW><ROW><id>11570683</id><snippet>full=False</snippet></ROW><ROW><id>11570745</id><snippet>tree</snippet></ROW><ROW><id>11570745</id><snippet>tree = {'0': {'A': {'B': {'C': {}}},
              'D': {'E': {},
                    'F': {}}}}
</snippet></ROW><ROW><id>11570745</id><snippet>paths()</snippet></ROW><ROW><id>11570745</id><snippet>def paths(tree, cur=()):
    if not tree:
        yield cur
    else:
        for n, s in tree.items():
            for path in paths(s, cur+(n,)):
                yield path
</snippet></ROW><ROW><id>11570745</id><snippet>&gt;&gt;&gt; list(paths(tree))
[('0', 'A', 'B', 'C'), ('0', 'D', 'E'), ('0', 'D', 'F')]
</snippet></ROW><ROW><id>11570792</id><snippet>fname</snippet></ROW><ROW><id>11570792</id><snippet>glob.glob()</snippet></ROW><ROW><id>11570792</id><snippet>os.listdir()</snippet></ROW><ROW><id>11570792</id><snippet>import csv

matching20 = []

for fname in ('file1.csv', 'file2.csv', 'file3.csv'):
    with open(fname) as fin:
        csvin = csv.reader(fin)
        next(csvin) # &lt;--- if you want to skip header row
        for row in csvin:
            if row[20] == 'value':
                matching20.append(row) # or do something with it here
</snippet></ROW><ROW><id>11570792</id><snippet>csv.DictReader</snippet></ROW><ROW><id>11571113</id><snippet>write</snippet></ROW><ROW><id>11571113</id><snippet>dstack</snippet></ROW><ROW><id>11571113</id><snippet>song = seq1 + seq2 + seq3 # Assumes seqs are of same length
</snippet></ROW><ROW><id>11571384</id><snippet>condondict= dict(A=['GCT','GCC','GCA','GCG'],
C=['TGT','TGC'],
D=['GAT','GAC'],
E=['GAA','GAG'],
F=['TTT','TTC'],
G=['GGT','GGC','GGA','GGG'],
H=['CAT','CAC'],
I=['ATT','ATC','ATA'],
K=['AAA','AAG'],
L=['TTA','TTG','CTT','CTC','CTA','CTG'],
M=['ATG'],
N=['AAT','AAC'],
P=['CCT','CCC','CCA','CCG'],
Q=['CAA','CAG'],
R=['CGT','CGC','CGA','CGG','AGA','AGG'],
S=['TCT','TCC','TCA','TCG','AGT','AGC'],
T=['ACT','ACC','ACA','ACG'],
V=['GTT','GTC','GTA','GTG'],
W=['TGG'],
Y=['TAT','TAC'])
</snippet></ROW><ROW><id>11571384</id><snippet>defaultdict()</snippet></ROW><ROW><id>11571384</id><snippet>if key not in mydict.keys():
    mydict[key] = []
mydict[key].append(something)
</snippet></ROW><ROW><id>11571384</id><snippet>defaultdict()</snippet></ROW><ROW><id>11571384</id><snippet>for aminoacid, sequence in condondict.iteritems():
    # do stuff with with data...
</snippet></ROW><ROW><id>11571405</id><snippet>self.current_user = None
self.current_id = None
self.kernel_info = None
self.cwd = None
self.perm_cwd = None
self.uptime = 'Unknown'

try:
    self.current_user = source[0]
    self.current_id = source[1]
    self.kernel_info = source[2]
    self.cwd = source[3]
    self.perm_cwd = source[4]
    self.uptime = source[5]
except IndexError:
    pass
</snippet></ROW><ROW><id>11571405</id><snippet>None</snippet></ROW><ROW><id>11571405</id><snippet>def get_index_with_default(seq, index, default=None):
    try:
        return seq[index]
    except:
        return default
</snippet></ROW><ROW><id>11571405</id><snippet>self.uptime = get_index_with_default(source, 5, 'Unknown')
</snippet></ROW><ROW><id>11571416</id><snippet>&gt;&gt;&gt; {k: v for k, v in tupled_dict.iteritems() if 'a' in k}
{('a', 1): 1, ('a', 2): 0}
</snippet></ROW><ROW><id>11571416</id><snippet>&gt;&gt;&gt; tupled_dict = {k: v for k, v in tupled_dict.iteritems() if 'a' not in k}
&gt;&gt;&gt; tupled_dict
{('b', 1): 1, ('c', 4): 0}
</snippet></ROW><ROW><id>11571455</id><snippet>communicate</snippet></ROW><ROW><id>11571455</id><snippet>proc = subprocess.Popen(["myprog.exe"], stdin=subprocess.PIPE)
stdout, stderr = proc.communicate('my input')
</snippet></ROW><ROW><id>11571589</id><snippet>enter code here

import StringIO

graph.put_photo(StringIO.StringIO(output), 'Look at this cool photo!')
</snippet></ROW><ROW><id>11571683</id><snippet>httplib</snippet></ROW><ROW><id>11571683</id><snippet>import httplib

HOST = 'staging.linkpt.net'
API_URL = '/lpc/servlet/lppay'
PORT = 1129
CERTFILE = 'my_cert_file.pem'

headers = { 'User-Agent'     : 'Rico',
            'Content-type'   : 'text/xml; charset=\"UTF-8\"',
            'Content-length' : len(xml_str),
          }

conn = httplib.HTTPSConnection(HOST, PORT, cert_file = CERTFILE)
conn.putrequest("POST", API_URL)
conn.putheader(headers)
conn.endheaders()
conn.send(xml_str)
response = conn.getresponse()
</snippet></ROW><ROW><id>11571683</id><snippet>Malformed or unrecognized request.</snippet></ROW><ROW><id>11571812</id><snippet>vars</snippet></ROW><ROW><id>11571812</id><snippet>for arg, value in sorted(vars(args).items()):
    logging.info("Argument %s: %r", arg, value)
</snippet></ROW><ROW><id>11572104</id><snippet>import wx
class MyCustomFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id)
        self.Bind(wx.EVT_PAINT,self.OnPaint)
    def OnPaint(self,evt):
        self.dc = dc = wx.PaintDC(self)
        p1 = [0,0]
        p2 = [500,0]
        for i in range(100):
            dc.DrawLine(p1[0],p1[1],p2[0],p2[1])
            p1 = [p1[0],p1[1]+5]
            p2 = [p2[0],p2[1]+5]
        p1=[0,0]
        p2 = [0,500]
        for i in range(100):
            dc.DrawLine(p1[0],p1[1],p2[0],p2[1])
            p1 = [p1[0]+5,p1[1]]
            p2 = [p2[0]+5,p2[1]]
if __name__ == "__main__":
    a = wx.App(redirect=False)
    f = MyCustomFrame(None,-1)
    #f.OnPaint(None) --- dont do this!!!
    f.Show()
    a.MainLDop()
</snippet></ROW><ROW><id>11572104</id><snippet>    def OnPaint(self,evt):
        self.dc = dc = wx.PaintDC(self)
        verticle_lines = [(i*5,0,i*5,500) for i in range(100)]
        horizontal_lines = [(0,i*5,500,i*5) for i in range(100)]
        dc.DrawLineList(horizontal_lines+verticle_lines)
</snippet></ROW><ROW><id>11572104</id><snippet>import  wx
class   MyCustomPanel(wx.Panel):
    def __init__(self,parent,id):
        wx.Panel.__init__(self,parent,id)
        self.sz =   wx.GridSizer(5,5,0,0)
        for i   in  range(25):
            self.sz.Add(wx.StaticText(self,-1,str(i)))
        self.SetSizer(self.sz)
        self.Bind(wx.EVT_PAINT,self.OnPaint)
    def OnPaint(self,evt):
        self.dc =   dc  =   wx.PaintDC(self)
        w,h = self.sz.GetSize()
        nr = self.sz.GetRows()
        nc = self.sz.GetCols()
        cell_w = float(w)/nc
        cell_h = float(h)/nr
        hlines = [(0,i*cell_h,w,i*cell_h)for i in range(nr+1)]
        vlines = [(i*cell_w,0,i*cell_w,h)for i in range(nc+1)]
        self.dc.DrawLineList(hlines+vlines)

if  __name__    ==  "__main__":
    a   =   wx.App(redirect=False)
    f1 = wx.Frame(None,-1)
    f   =   MyCustomPanel(f1,-1)
    #f.OnPaint(None)
    f1.Show()
    a.MainLoop()
</snippet></ROW><ROW><id>11572104</id><snippet>import  wx
class SimplePanel(wx.Panel):
    def __init__(self,parent,id,str_val):
        wx.Panel.__init__(self,parent,id,style=wx.SIMPLE_BORDER)
        self.sz = wx.BoxSizer()
        self.sz.Add(wx.StaticText(self,-1,str_val),0,wx.ALIGN_CENTER)
        self.SetSizer(self.sz)
class   MyCustomPanel(wx.Panel):
    def __init__(self,parent,id):

        wx.Panel.__init__(self,parent,id)
        self.sz =   wx.GridSizer(5,5,0,0)
        for i   in  range(25):
            self.sz.Add(SimplePanel(self,-1,str(i)),0,wx.GROW)
        self.SetSizer(self.sz)

if  __name__    ==  "__main__":
    a   =   wx.App(redirect=False)
    f1 = wx.Frame(None,-1)
    f   =   MyCustomPanel(f1,-1)
    #f.OnPaint(None)
    f1.Show()
    a.MainLoop()
</snippet></ROW><ROW><id>11572172</id><snippet>for x in seq:
    if cond(x):
        break
else:
    print "Didn't find an x I liked!"
</snippet></ROW><ROW><id>11572267</id><snippet>widget_item.setData(0, Qt.UserRole, QVariant(instance_item))
widget_item.data(0, Qt.UserRole).toPyObject()
</snippet></ROW><ROW><id>11572267</id><snippet>import sip
sip.setapi('QVariant', 2)
</snippet></ROW><ROW><id>11572267</id><snippet>widget_item.setData(0, Qt.UserRole, instance_item)
widget_item.data(0, Qt.UserRole)  # original python object
</snippet></ROW><ROW><id>11572267</id><snippet>sip.setapi('QString', 2)</snippet></ROW><ROW><id>11572751</id><snippet>my_cool_dict = {}
for element in some_parent_element:
    my_cool_dict[element.tag] = element.text
</snippet></ROW><ROW><id>11572751</id><snippet>some_parent_element</snippet></ROW><ROW><id>11572751</id><snippet>&lt;question&gt;
    &lt;title&gt;How do I make a `dict` from XML in Python?&lt;/title&gt;
    &lt;tags&gt;python xml&lt;/tags&gt;
    &lt;body&gt;Lorem ipsum dolor sit amet.&lt;/body&gt;
&lt;/question&gt;
</snippet></ROW><ROW><id>11572751</id><snippet>for key in my_cool_dict:
    print '{0} = {1}'.format(key, my_cool_dict[key])
</snippet></ROW><ROW><id>11572751</id><snippet>body = Lorem ipsum dolor sit amet.
tags = python xml
title = How do I make a `dict` from XML in Python?
</snippet></ROW><ROW><id>11572812</id><snippet>@facebook_authorization_required(permissions=["publish_actions"])
def ViewPage (request):
    user_access_token = request.facebook.user.oauth_token.token
    ....

    graph = GraphAPI(access_token)
</snippet></ROW><ROW><id>11572812</id><snippet>request.facebook.user.oauth_token</snippet></ROW><ROW><id>11572812</id><snippet>object</snippet></ROW><ROW><id>11572812</id><snippet>request.facebook.user.oauth_token.token will give you the access token
</snippet></ROW><ROW><id>11573237</id><snippet>SELECT a, b, c
FROM table_x
UNION
SELECT d,e,f
FROM table_y
</snippet></ROW><ROW><id>11573237</id><snippet>def getItems():
    cursor.execute(query1)
    for row in cursor.fetchall():
        yield row
    cursor.execute(query2)
    for row in cursor.fetchall():
        yield row

gen = getItems()

for item in gen:
    ...
</snippet></ROW><ROW><id>11573753</id><snippet>if use_reloader and not os.environ.get('WERKZEUG_RUN_MAIN'):
    logger.warning('startup: pid %d is the werkzeug reloader' % os.getpid())
else:
    logger.warning('startup: pid %d is the active werkzeug' % os.getpid()
    # my real init code is invoked from here
</snippet></ROW><ROW><id>11573927</id><snippet>rrdtool info &lt;file.rrd&gt;</snippet></ROW><ROW><id>11573927</id><snippet>rrdtool dump &lt;file.rrd&gt;</snippet></ROW><ROW><id>11573946</id><snippet>ftp.retrbinary('RETR %s' % filename, file.write)
</snippet></ROW><ROW><id>11573964</id><snippet>in</snippet></ROW><ROW><id>11573964</id><snippet>__eq__</snippet></ROW><ROW><id>11573964</id><snippet>__hash__</snippet></ROW><ROW><id>11573964</id><snippet>class foo(object):
    def __init__(self, x,y,z):
         self.x = x
         self.y = y
         self.z = z

    def __eq__(self, other):
        return (self.x, self.z) == (other.x, other.z)

    def __hash__(self):
        return hash((self.x, self.z))
</snippet></ROW><ROW><id>11573964</id><snippet>foo(1,2,3) == foo(1,8,3)</snippet></ROW><ROW><id>11573964</id><snippet>in</snippet></ROW><ROW><id>11574223</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; list=["A","B","C"]
&gt;&gt;&gt; listitem = random.randint(0,len(list))
&gt;&gt;&gt; list[listitem]
'A'
&gt;&gt;&gt; listitem = random.randint(0,len(list))
&gt;&gt;&gt; list[listitem]
'B'
</snippet></ROW><ROW><id>11574223</id><snippet>&gt;&gt;&gt; random.choice(list)
'B'
&gt;&gt;&gt; random.choice(list)
'B'
&gt;&gt;&gt; random.choice(list)
'A'
&gt;&gt;&gt; random.choice(list)
'C'
</snippet></ROW><ROW><id>11574646</id><snippet>buffer = create_string_buffer(REQUIRED_BUFSIZE)
mydll.WLGenLicenseKeyW(u"A.N. Body", u"ACME", u"APC44567", None, None, 0, 0, None, 0, 0, 0, buffer)
</snippet></ROW><ROW><id>11574646</id><snippet>argtypes</snippet></ROW><ROW><id>11574646</id><snippet>mydll.WLGenLicenseKeyW.argtypes = [c_wchar_t,c_wchar_t,c_wchar_t,c_wchar_t,c_wchar_t,c_int,c_int,c_void_p,c_int,c_int,c_int,c_char_p]
</snippet></ROW><ROW><id>11574646</id><snippet>SYSTEMTIME</snippet></ROW><ROW><id>11574646</id><snippet>mydll = WinDLL(dll)
</snippet></ROW><ROW><id>11574816</id><snippet>import pygments</snippet></ROW><ROW><id>11574816</id><snippet>mypackages</snippet></ROW><ROW><id>11574816</id><snippet>from mypackages import pygments</snippet></ROW><ROW><id>11574869</id><snippet>User</snippet></ROW><ROW><id>11574869</id><snippet>google.appengine.api.users</snippet></ROW><ROW><id>11574962</id><snippet>try:
    a = a
except NameError:
    a = "new"
</snippet></ROW><ROW><id>11575180</id><snippet>    return "%s({'a':1, 'b':2 })" % _GET_PARAMS('callback')
</snippet></ROW><ROW><id>11575362</id><snippet>raise forms.ValidationError("This field throws an error")
</snippet></ROW><ROW><id>11575472</id><snippet>__int__</snippet></ROW><ROW><id>11575472</id><snippet>class Test:
    def __init__(self, i):
        self.i = i
    def __int__(self):
        return self.i * 2

t = Test(5)
print( int(t) )
</snippet></ROW><ROW><id>11575473</id><snippet>ig = Symbol('ig')
ig = flux(x, I, r)
</snippet></ROW><ROW><id>11575473</id><snippet>ig</snippet></ROW><ROW><id>11575473</id><snippet>flux</snippet></ROW><ROW><id>11575473</id><snippet>const*x/(x-const)</snippet></ROW><ROW><id>11575473</id><snippet>In [5]: integrate(a*x/(b*x+c), x)
Out[5]: 

  ⎛         ⎛ 2        ⎞⎞
  ⎜x   c⋅log⎝b ⋅x + b⋅c⎠⎟
a⋅⎜─ - ─────────────────⎟
  ⎜b            2       ⎟
  ⎝            b        ⎠
</snippet></ROW><ROW><id>11575745</id><snippet>import threading
import time
import urllib2

block_sz = 8192
num_threads = 1
url = "http://192.168.1.1/bigfile2"
secDownload = 30

class DownloadFileThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

        self.u = urllib2.urlopen(url)
        self.file_size_dl = 0


    def run(self):
        while True:
            buffer = self.u.read(block_sz)
            if not buffer:
                raise 'There is nothing to read. You should have bigger file or smaller time'

            self.file_size_dl += len(buffer)


if __name__ == "__main__":
    print 'Download from url ' + url + ' use in ' + str(num_threads)  + ' to download. test time ' + str(secDownload)  
        threads = []
        for i in range(num_threads):
            downloadThread = DownloadFileThread()
            downloadThread.daemon = True
            threads.append(downloadThread)
        for i in range(num_threads):
            threads[i].start()
        time.sleep(secDownload)

        sumBytes=0
        for i in range(num_threads):
            sumBytes = sumBytes +  threads[i].file_size_dl
        print sumBytes
        print str(sumBytes/(secDownload *1000000)) + 'MBps'
</snippet></ROW><ROW><id>11576019</id><snippet>tuple</snippet></ROW><ROW><id>11576019</id><snippet>list</snippet></ROW><ROW><id>11576019</id><snippet>set</snippet></ROW><ROW><id>11576019</id><snippet>dict</snippet></ROW><ROW><id>11576019</id><snippet>collections</snippet></ROW><ROW><id>11576019</id><snippet>collections.abc.Container</snippet></ROW><ROW><id>11576019</id><snippet>collections.Container</snippet></ROW><ROW><id>11576019</id><snippet>in</snippet></ROW><ROW><id>11576019</id><snippet>__contains__</snippet></ROW><ROW><id>11576019</id><snippet>x in y</snippet></ROW><ROW><id>11576019</id><snippet>y</snippet></ROW><ROW><id>11576019</id><snippet>file</snippet></ROW><ROW><id>11576019</id><snippet>deepcopy</snippet></ROW><ROW><id>11576019</id><snippet>iter(lambda: random.choice(range(6)), 0)</snippet></ROW><ROW><id>11576019</id><snippet>in</snippet></ROW><ROW><id>11576019</id><snippet>Collections.abc.Container</snippet></ROW><ROW><id>11576019</id><snippet>__contains__</snippet></ROW><ROW><id>11576019</id><snippet>in</snippet></ROW><ROW><id>11576019</id><snippet>Collections.abc.Container</snippet></ROW><ROW><id>11576019</id><snippet>__contains__</snippet></ROW><ROW><id>11576019</id><snippet>isinstance(x, collections.abc.Container)</snippet></ROW><ROW><id>11576019</id><snippet>x</snippet></ROW><ROW><id>11576019</id><snippet>in</snippet></ROW><ROW><id>11576019</id><snippet>__contains__</snippet></ROW><ROW><id>11576019</id><snippet>isinstance(x, collections.abc.Container)</snippet></ROW><ROW><id>11576019</id><snippet>Container</snippet></ROW><ROW><id>11576037</id><snippet>'x' * 100000 # or,

''.join('x' for x in xrange(100000)) # or,

from itertools import repeat
''.join(repeat('x', times=100000))
</snippet></ROW><ROW><id>11576037</id><snippet>from string import ascii_letters
from random import choice
''.join(choice(ascii_letters) for _ in xrange(100000))
</snippet></ROW><ROW><id>11576037</id><snippet>import os
s = os.urandom(100000)
</snippet></ROW><ROW><id>11576584</id><snippet>tkinter.Button.__init__(self, master,**k)
</snippet></ROW><ROW><id>11576584</id><snippet>Button</snippet></ROW><ROW><id>11576584</id><snippet>master</snippet></ROW><ROW><id>11576705</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11576705</id><snippet>.pth</snippet></ROW><ROW><id>11576705</id><snippet>sys.path</snippet></ROW><ROW><id>11576705</id><snippet>sys.path</snippet></ROW><ROW><id>11576705</id><snippet>site.addsitedir()</snippet></ROW><ROW><id>11576705</id><snippet>.pth</snippet></ROW><ROW><id>11576705</id><snippet>sys.path</snippet></ROW><ROW><id>11576705</id><snippet>sys.path.insert(0, '/path/to/the.egg')</snippet></ROW><ROW><id>11576715</id><snippet>import argparse
parser = argparse.ArgumentParser()

# Init sub-command
parser_init = subparsers.add_parser('init', help='initialize the things')
parser_init.add_argument(...)

# Help sub-command
parser_help = subparsers.add_parser('help', help='help me!')
parser_help.add_argument(...)
</snippet></ROW><ROW><id>11577812</id><snippet>if item == 'encode_b64':
    process = base64.encodestring
elif item == 'encode_url':
    process = urllib.quote_plus
else:
    process = default_encode

def default_encode(s):
    s.encode("hex")
...
bottomtext.insert(INSERT, process(var))
</snippet></ROW><ROW><id>11577812</id><snippet>mapping = {"encode_b64": base64.encodestring,
           "encode_url": urllib.quote_plus}
process = mapping.get(item, default_encode)
</snippet></ROW><ROW><id>11578092</id><snippet>dict</snippet></ROW><ROW><id>11578092</id><snippet>class Struct(dict):
    """Python Objects that act like Javascript Objects"""
    def __init__(self, *args, **kwargs):
        super(Struct, self).__init__(*args, **kwargs)
        self.__dict__ = self
</snippet></ROW><ROW><id>11578092</id><snippet>o = Struct(x=10)
o.y = 20
o['z'] = 30
print o.x, o['y'], o.z
</snippet></ROW><ROW><id>11578250</id><snippet>i = mainstr.find(mainstr[0], i+1)</snippet></ROW><ROW><id>11578250</id><snippet>i</snippet></ROW><ROW><id>11578250</id><snippet>for ... else: j += 1</snippet></ROW><ROW><id>11578250</id><snippet>j</snippet></ROW><ROW><id>11578250</id><snippet>import os

def string_similarity(string, _cp=os.path.commonprefix):
    return sum(len(_cp([string, string[i:]])) for i in xrange(len(string)))

for _ in xrange(int(raw_input())):
    print string_similarity(raw_input())
</snippet></ROW><ROW><id>11578250</id><snippet>def string_similarity(string):
    len_string = len(string)
    total = len_string # similarity with itself
    for i in xrange(1, len_string):
        for n, c in enumerate(string[i:]):
            if c != string[n]:
                break
        else:
            n += 1

        total += n
    return total
</snippet></ROW><ROW><id>11578250</id><snippet>def string_similarity(string):
    len_string = len(string)
    total = len_string # similarity with itself
    i = 0
    while True:
        i = string.find(string[0], i+1)
        if i == -1:
            break
        n = 0
        for n in xrange(1, len_string-i):
            if string[i+n] != string[n]:
                break
        else:
            n += 1

        total += n
    return total
</snippet></ROW><ROW><id>11578330</id><snippet>date</snippet></ROW><ROW><id>11578330</id><snippet>{{ sale.validity|date:"d-m-Y"}} 
</snippet></ROW><ROW><id>11578342</id><snippet>from xlwt import *

w = Workbook() 
ws = w.add_sheet('Image')
ws.insert_bitmap('python.bmp', 2, 2)

w.save('image.xls')
</snippet></ROW><ROW><id>11578672</id><snippet>application: myapp
version: 1
runtime: python27
api_version: 1
threadsafe: true
handlers:
   - url: /.*
    script: myapp.app
</snippet></ROW><ROW><id>11578672</id><snippet>import webapp2

class MainPage(webapp2.RequestHandler):
  def get(self):
    self.response.headers['Content-Type'] = 'text/plain'
    self.response.out.write('Hello, WebApp World!')

app = webapp2.WSGIApplication([('/', MainPage)])

""" Old code:
def main():
  run_wsgi_app(app)

if __name__ == '__main__':
  main()
"""
</snippet></ROW><ROW><id>11579125</id><snippet>kill -9</snippet></ROW><ROW><id>11579125</id><snippet>SIGKILL</snippet></ROW><ROW><id>11579125</id><snippet>SIGINT</snippet></ROW><ROW><id>11579125</id><snippet>SIGINT</snippet></ROW><ROW><id>11579125</id><snippet>kill -2</snippet></ROW><ROW><id>11579125</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>11579139</id><snippet>function getClosestCity(Coordinate location){
    bestCity = cities[0];
    foreach(city in cities){
        if (distance(bestCity.location, location) &lt; distance(city.location, location)){
            bestCity = city;
        }
    }
    return bestCity;
}
</snippet></ROW><ROW><id>11579347</id><snippet>Query</snippet></ROW><ROW><id>11579347</id><snippet>lazy='dynamic'</snippet></ROW><ROW><id>11579347</id><snippet>_resources = relationship("EnvironmentResource",
    cascade="all, delete-orphan",
    lazy='dynamic',
    passive_deletes=True)
</snippet></ROW><ROW><id>11579834</id><snippet>matplotlib.pyplot.ticklabel_format</snippet></ROW><ROW><id>11579834</id><snippet>import matplotlib.pyplot as plt
...
plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
</snippet></ROW><ROW><id>11579834</id><snippet>a x 10^b</snippet></ROW><ROW><id>11580001</id><snippet>d1 = d1 + timedelta(hours=1);</snippet></ROW><ROW><id>11580002</id><snippet>if key in dict:</snippet></ROW><ROW><id>11580002</id><snippet>for key in mylist:
    if key in mydict1:
        print 'Key %s in dict 1' % key
    elif key in mydict2:
        print 'Key %s in dict 2' % key
    else:
        print 'Key %s not in dictionaries' % key
</snippet></ROW><ROW><id>11580002</id><snippet>def print_keys_from_list_in_dicts(key_list, dict_list):
    indexed_dict_list = enumerate(dict_list)
    for key in key_list:
        found_in_list = []
        for index, dict in indexed_dict_list:
            if key in dict:
                found_in_list.append(index)
        print 'Key %s found in dicts %s.' % (key, found_in_list)

print_keys_from_list_in_dicts(mylist, [mydict1, mydict2])
</snippet></ROW><ROW><id>11580042</id><snippet>socket.getfqdn()</snippet></ROW><ROW><id>11580457</id><snippet>self.menuBar.EnableTop(0, False)
</snippet></ROW><ROW><id>11580632</id><snippet> // Reorder date fields
  function reorder( dateFieldId ) {

    var grp = $('#'+dateFieldId).children();
    var cnt = grp.length;

    var temp = grp[0];
    grp[0] = grp[1];
    grp[1] = temp;

    $(grp).remove();
    $('#'+dateFieldId).append($(grp));
  }
</snippet></ROW><ROW><id>11580714</id><snippet>.communicate()</snippet></ROW><ROW><id>11580714</id><snippet>tilenames = ['File1', 'File2', ...]
web_url = http://...

for t in tilenames:
    try:
        open(t, 'r')
    except IOError:
        print 'file %s not found.' % (t)
        command = ['wget', '-P', './SRTM/', web_url + t ]
        p = Popen(command, stdout=subprocess.PIPE)
        stdout, stderr = p.communicate()

print "Done"
</snippet></ROW><ROW><id>11580714</id><snippet>communicate</snippet></ROW><ROW><id>11580714</id><snippet>stdout</snippet></ROW><ROW><id>11580714</id><snippet>None</snippet></ROW><ROW><id>11580714</id><snippet>PIPE</snippet></ROW><ROW><id>11580774</id><snippet>'\t'</snippet></ROW><ROW><id>11580774</id><snippet>'\\t'</snippet></ROW><ROW><id>11580774</id><snippet>dir C:\Users\blahblahblah\src\test_cases\archive\CreateDelete_archive_info.csv
</snippet></ROW><ROW><id>11580799</id><snippet>&lt;ButtonPress-1&gt;</snippet></ROW><ROW><id>11580799</id><snippet>&lt;ButtonRelease-1&gt;</snippet></ROW><ROW><id>11580799</id><snippet>&lt;B1-Motion&gt;</snippet></ROW><ROW><id>11581118</id><snippet>print()</snippet></ROW><ROW><id>11581118</id><snippet>message</snippet></ROW><ROW><id>11581118</id><snippet>a</snippet></ROW><ROW><id>11581118</id><snippet>open</snippet></ROW><ROW><id>11581118</id><snippet>open("logfile.log", "a")
</snippet></ROW><ROW><id>11581118</id><snippet>NameError</snippet></ROW><ROW><id>11581118</id><snippet>a</snippet></ROW><ROW><id>11581118</id><snippet>import inspect
import logging

def function_logger(file_level, console_level = None):
    function_name = inspect.stack()[1][3]
    logger = logging.getLogger(function_name)
    logger.setLevel(logging.DEBUG) #By default, logs all messages

    if console_level != None:
        ch = logging.StreamHandler() #StreamHandler logs to console
        ch.setLevel(console_level)
        ch_format = logging.Formatter('%(asctime)s - %(message)s')
        ch.setFormatter(ch_format)
        logger.addHandler(ch)

    fh = logging.FileHandler("{0}.log".format(function_name))
    fh.setLevel(file_level)
    fh_format = logging.Formatter('%(asctime)s - %(lineno)d - %(levelname)-8s - %(message)s')
    fh.setFormatter(fh_format)
    logger.addHandler(fh)

    return logger

def f1():
    f1_logger = function_logger(logging.DEBUG, logging.ERROR)
    f1_logger.debug('debug message')
    f1_logger.info('info message')
    f1_logger.warn('warn message')
    f1_logger.error('error message')
    f1_logger.critical('critical message')

def f2():
    f2_logger = function_logger(logging.WARNING)
    f2_logger.debug('debug message')
    f2_logger.info('info message')
    f2_logger.warn('warn message')
    f2_logger.error('error message')
    f2_logger.critical('critical message')

def main():
    f1()
    f2()
    logging.shutdown()

main()
</snippet></ROW><ROW><id>11581118</id><snippet>function_logger</snippet></ROW><ROW><id>11581118</id><snippet>f1()</snippet></ROW><ROW><id>11581118</id><snippet>DEBUG</snippet></ROW><ROW><id>11581118</id><snippet>f1.log</snippet></ROW><ROW><id>11581118</id><snippet>ERROR</snippet></ROW><ROW><id>11581118</id><snippet>f2()</snippet></ROW><ROW><id>11581118</id><snippet>WARNING</snippet></ROW><ROW><id>11581118</id><snippet>f2.log</snippet></ROW><ROW><id>11581118</id><snippet>2012-07-20 10:46:38,950 - f1  - error message
2012-07-20 10:46:38,953 - f1  - critical message
</snippet></ROW><ROW><id>11581118</id><snippet>f1.log</snippet></ROW><ROW><id>11581118</id><snippet>f2.log</snippet></ROW><ROW><id>11581118</id><snippet>2012-07-20 10:46:38,950 - 26 - DEBUG    - debug message
2012-07-20 10:46:38,950 - 27 - INFO     - info message
2012-07-20 10:46:38,950 - 28 - WARNING  - warn message
2012-07-20 10:46:38,950 - 29 - ERROR    - error message
2012-07-20 10:46:38,953 - 30 - CRITICAL - critical message
</snippet></ROW><ROW><id>11581118</id><snippet>2012-07-20 10:46:38,960 - 36 - WARNING  - warn message
2012-07-20 10:46:38,960 - 37 - ERROR    - error message
2012-07-20 10:46:38,960 - 38 - CRITICAL - critical message
</snippet></ROW><ROW><id>11581604</id><snippet>def foo(value=VALUE):
</snippet></ROW><ROW><id>11581604</id><snippet>B</snippet></ROW><ROW><id>11581604</id><snippet>foo</snippet></ROW><ROW><id>11581604</id><snippet>VALUE</snippet></ROW><ROW><id>11581604</id><snippet>foo</snippet></ROW><ROW><id>11581604</id><snippet>default = 3
def foo(x=default): pass
</snippet></ROW><ROW><id>11581604</id><snippet>foo</snippet></ROW><ROW><id>11581604</id><snippet>global default
default = 4
</snippet></ROW><ROW><id>11581604</id><snippet>def foo(value=None):
    self.value = self.VALUE if value is None else value
</snippet></ROW><ROW><id>11581604</id><snippet>self.value = value or self.VALUE
</snippet></ROW><ROW><id>11581604</id><snippet>0</snippet></ROW><ROW><id>11581604</id><snippet>[]</snippet></ROW><ROW><id>11581604</id><snippet>{}</snippet></ROW><ROW><id>11581604</id><snippet>VALUE</snippet></ROW><ROW><id>11581604</id><snippet>def foo(**kwargs):
    self.value = kwargs.get("value", self.VALUE)
</snippet></ROW><ROW><id>11581604</id><snippet>None</snippet></ROW><ROW><id>11581604</id><snippet>object()</snippet></ROW><ROW><id>11581604</id><snippet>foo</snippet></ROW><ROW><id>11581629</id><snippet>import numpy as np, numpy.random
nx = 100
ny = 101
bx = 3
by = 4
arr = np.random.uniform(size = (nx * bx, ny * by))
arr = np.ma.masked_array(arr,arr&lt;.1)
rebinarr = np.swapaxes(arr.reshape(nx, bx, ny, by), 1, 2).reshape(nx, ny, bx * by).mean(axis=2)
print rebinarr.shape
&gt;&gt; (100,101)
</snippet></ROW><ROW><id>11581827</id><snippet>my_package/
    __init__.py
        from .foo import myfunc
    foo.py
        def myfunc(): pass
</snippet></ROW><ROW><id>11581827</id><snippet>from .foo import myfunc</snippet></ROW><ROW><id>11581827</id><snippet>foo</snippet></ROW><ROW><id>11581827</id><snippet>myfunc</snippet></ROW><ROW><id>11581827</id><snippet>__init__.py</snippet></ROW><ROW><id>11581827</id><snippet>foo</snippet></ROW><ROW><id>11581827</id><snippet>_foo</snippet></ROW><ROW><id>11581917</id><snippet>import os
from contextlib import contextmanager

@contextmanager
def suppress_output(fd):
    """
    Suppress output to the given ``fd``::

       with suppress_fd(sys.stderr):
           # in this block any output to standard error is suppressed

    ``fd`` is an integral file descriptor, or any object with a ``fileno()``
    method.
    """
    if hasattr(fd, 'fileno'):
        # we were given a file-like object with an underlying fd
        if hasattr(fd, 'flush'):
            # flush Python-side buffers before redirecting
            fd.flush()
        # get the fd to redirect
        fd = fd.fileno()

    # duplicate the file descriptor to restore it eventually
    oldfd = os.dup(fd)
    try:
        # open the trash can
        devnull = os.open(os.devnull, os.O_WRONLY)
        try:
            # point the file descriptor to the trash can
            os.dup2(devnull, fd)
        finally:
            # close the old trash can descriptor, we don't need it anymore
            # since the fd now points to the trash can
            os.close(devnull)
        # enter the callers block
        yield
        # restore the file descriptor
        os.dup2(oldfd, fd)
    finally:
        # close the duplicated copy of the original fd, we don't need it
        # anymore now that fd is restored
        os.close(oldfd)
</snippet></ROW><ROW><id>11581917</id><snippet>import sys

with suppress_output(sys.stderr):
    import pynotify
</snippet></ROW><ROW><id>11581961</id><snippet>$ psql -d mydb
psql (9.1.4)
Type "help" for help.

mydb=# SELECT t.oid, typarray FROM pg_type t JOIN pg_namespace ns ON typnamespace = ns.oid WHERE typname = 'hstore';
 oid | typarray 
-----+----------
(0 rows)

mydb=# \dx
                 List of installed extensions
  Name   | Version |   Schema   |         Description          
---------+---------+------------+------------------------------
 plpgsql | 1.0     | pg_catalog | PL/pgSQL procedural language
(1 row)

mydb=# create extension hstore;
WARNING:  =&gt; is deprecated as an operator name
DETAIL:  This name may be disallowed altogether in future versions of PostgreSQL.
CREATE EXTENSION
mydb=# \dx
                           List of installed extensions
  Name   | Version |   Schema   |                   Description                    
---------+---------+------------+--------------------------------------------------
 hstore  | 1.0     | public     | data type for storing sets of (key, value) pairs
 plpgsql | 1.0     | pg_catalog | PL/pgSQL procedural language
(2 rows)

mydb=# SELECT t.oid, typarray FROM pg_type t JOIN pg_namespace ns ON typnamespace = ns.oid WHERE typname = 'hstore';
  oid  | typarray 
-------+----------
 58800 |    58805
(1 row)
</snippet></ROW><ROW><id>11582124</id><snippet>import logging

logger = logging.getLogger('simple_example')
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)
# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
fh.setFormatter(formatter)
# add the handlers to logger
logger.addHandler(ch)
logger.addHandler(fh)

# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warn('warn message')
logger.error('error message')
logger.critical('critical message')
</snippet></ROW><ROW><id>11582247</id><snippet>\w</snippet></ROW><ROW><id>11582247</id><snippet>\w</snippet></ROW><ROW><id>11582247</id><snippet>\w</snippet></ROW><ROW><id>11582247</id><snippet>[]</snippet></ROW><ROW><id>11582247</id><snippet>[\w\&amp;æ]+
</snippet></ROW><ROW><id>11582247</id><snippet>[\W\&amp;æ]+
</snippet></ROW><ROW><id>11582247</id><snippet>\w</snippet></ROW><ROW><id>11582247</id><snippet>\W</snippet></ROW><ROW><id>11582495</id><snippet>my_func</snippet></ROW><ROW><id>11582531</id><snippet>.txt</snippet></ROW><ROW><id>11582531</id><snippet>with open('filename.txt') as file:
    for line in file:
        if len(line.split()) == 5:
            #do something- these lines are the right length (assuming the line includes the '#' sign)
</snippet></ROW><ROW><id>11582722</id><snippet>def microtime(dt):
    time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0 
</snippet></ROW><ROW><id>11583110</id><snippet>if sys.argv[3].lower() == "gl":
    input_file_path = "V:\\test"
</snippet></ROW><ROW><id>11583496</id><snippet>class SoftballRoster(object):

    def __init__(self, first_name, last_name, team, position):

        self._first_name = first_name
        self._last_name = last_name 
        self._team = team
        self._position = position

    def first_name(self): 
        return self._first_name.capitalize()
    first_name = property(first_name)

    def last_name(self): 
        return self._last_name.capitalize()
    last_name = property(last_name)

    # another option is to use the decorator syntax:

    @property 
    def team(self): 
        return self._team

    @property
    def last_name(self):
        return self._position
</snippet></ROW><ROW><id>11583588</id><snippet>&gt;&gt;&gt; def foo(**kwargs):
    for arg_name in kwargs:
        return kwargs[arg_name], arg_name


&gt;&gt;&gt; foo(fib=1)
(1, 'fib')
</snippet></ROW><ROW><id>11583588</id><snippet>__name__</snippet></ROW><ROW><id>11583788</id><snippet>jon@minerva:~$ sudo apt-get install python-psycopg2
[sudo] password for jon: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Suggested packages:
  python-psycopg2-doc
The following NEW packages will be installed
  python-psycopg2
0 upgraded, 1 newly installed, 0 to remove and 334 not upgraded.
Need to get 153 kB of archives.
</snippet></ROW><ROW><id>11583788</id><snippet>apt-get update</snippet></ROW><ROW><id>11583968</id><snippet>s = """TrnIq: Thread on CPU 37
TrnIq: Thread on CPU 37 but will be moved to CPU 44
IP-Thread on CPU 33
FANOUT Thread on CPU 37
Filter-Thread on CPU 38 but will be moved to CPU 51
TRN TMR Test 2 Supervisor Thread on CPU 34
HomographyWarp Traking Thread[0] on CPU 26"""

for line in s.splitlines():
    words = line.split()
    if not ("CPU" in words and "on" in words): continue # skip uninteresting lines
    prefix_words = words[:words.index("on")+1]
    prefix = ' '.join(prefix_words)
    cpu = int(words[-1])
    print (prefix, cpu)
</snippet></ROW><ROW><id>11583968</id><snippet>('TrnIq: Thread on', 37)
('TrnIq: Thread on', 44)
('IP-Thread on', 33)
('FANOUT Thread on', 37)
('Filter-Thread on', 51)
('TRN TMR Test 2 Supervisor Thread on', 34)
('HomographyWarp Traking Thread[0] on', 26)
</snippet></ROW><ROW><id>11584012</id><snippet>all()</snippet></ROW><ROW><id>11584012</id><snippet>all()</snippet></ROW><ROW><id>11584012</id><snippet>In [8]: alist = [3] + [0] * 2**20    # alist bigger, with an early odd

In [10]: %timeit all_even(alist)
1000000 loops, best of 3: 309 ns per loop

In [11]: %timeit all_even_bad(alist)
10 loops, best of 3: 133 ms per loop

In [12]: %timeit all(val &amp; 1 == 0 for val in alist)
1000000 loops, best of 3: 891 ns per loop
</snippet></ROW><ROW><id>11584012</id><snippet>all()</snippet></ROW><ROW><id>11584012</id><snippet>all_even()</snippet></ROW><ROW><id>11584277</id><snippet>target.write('\n'.join((line1,line2,line3))+'\n')
</snippet></ROW><ROW><id>11584277</id><snippet>lines=(line1,line2,line3)
target.write( '\n'.join(lines) + '\n')
</snippet></ROW><ROW><id>11584277</id><snippet>lines=(line1, line2, line3)
target.write('\n'.join(lines))
target.write('\n')
</snippet></ROW><ROW><id>11584277</id><snippet>join</snippet></ROW><ROW><id>11584338</id><snippet>for line in f:
    copy.write(line)
</snippet></ROW><ROW><id>11584338</id><snippet>&gt;&gt;&gt; for line in f:
        print line,
</snippet></ROW><ROW><id>11584353</id><snippet>getPieceAtLocation(char file, int rank)
</snippet></ROW><ROW><id>11584353</id><snippet>Piece p = getPieceAtLocation('e', 2);
</snippet></ROW><ROW><id>11584353</id><snippet>getPieceAtLocation</snippet></ROW><ROW><id>11584410</id><snippet>seek</snippet></ROW><ROW><id>11584410</id><snippet> dumpFile.seek(0)
</snippet></ROW><ROW><id>11584410</id><snippet>dumpFile</snippet></ROW><ROW><id>11584410</id><snippet>dump = = subprocess.Popen(dumpPars,stdout=subprocess.PIPE)
stdoutdata,_ = dump.communicate()  #now parse stdoutdata
</snippet></ROW><ROW><id>11584485</id><snippet>join()</snippet></ROW><ROW><id>11584485</id><snippet>" ".join(hxs.select('//div[@class="cat"]/p|//div[@class="entry"]').extract())
</snippet></ROW><ROW><id>11584547</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>11584547</id><snippet>os.sytem</snippet></ROW><ROW><id>11584547</id><snippet>os.system</snippet></ROW><ROW><id>11584547</id><snippet>newfile = "namePart1" + dictionary[key] + "namePart2"
shutil.copyfile("cfn5e10_1.lp", newfile)
</snippet></ROW><ROW><id>11584666</id><snippet>some_dict['some_key']
</snippet></ROW><ROW><id>11584666</id><snippet>some_object.some_attribute
</snippet></ROW><ROW><id>11584666</id><snippet>str(...)</snippet></ROW><ROW><id>11584666</id><snippet>CG11710</snippet></ROW><ROW><id>11584666</id><snippet>for row in reader:
    if row['gene_id'] == 'CG11710':
        writer.writerow(row)
</snippet></ROW><ROW><id>11584785</id><snippet>msg</snippet></ROW><ROW><id>11584785</id><snippet>object</snippet></ROW><ROW><id>11584785</id><snippet>msgGroup</snippet></ROW><ROW><id>11584785</id><snippet>msg</snippet></ROW><ROW><id>11584785</id><snippet>msgGroup</snippet></ROW><ROW><id>11584785</id><snippet>msg</snippet></ROW><ROW><id>11584785</id><snippet>makeGroup</snippet></ROW><ROW><id>11584785</id><snippet>text</snippet></ROW><ROW><id>11584785</id><snippet>self.text</snippet></ROW><ROW><id>11584785</id><snippet>msgGroup</snippet></ROW><ROW><id>11584785</id><snippet>msg</snippet></ROW><ROW><id>11584785</id><snippet>msgGroup</snippet></ROW><ROW><id>11584785</id><snippet>msg</snippet></ROW><ROW><id>11584785</id><snippet>for msg in self.msg_list:
    print msg.text
</snippet></ROW><ROW><id>11584785</id><snippet>()</snippet></ROW><ROW><id>11584785</id><snippet>foo = self.makeGroup # assigning makeGroup to a variable
bar = self.makeGroup() # calling makeGroup, then assigning the result of that call to a variable
</snippet></ROW><ROW><id>11584812</id><snippet>lst.sort(key=lambda x:x[2], reverse=True)
</snippet></ROW><ROW><id>11584812</id><snippet>import operator
lst.sort(key=operater.itemgetter(2), reverse=True)
</snippet></ROW><ROW><id>11584812</id><snippet>lst.sort(key=lambda x: (-x[2],x[0])) #relying on tuples
</snippet></ROW><ROW><id>11584812</id><snippet>x[2]</snippet></ROW><ROW><id>11584812</id><snippet>lst.sort(key=lambda x: x[0])
lst.sort(key=lambda x: x[2], reversed=True)
</snippet></ROW><ROW><id>11585468</id><snippet>if re.search(b"enum " + enum_name.encode('utf-8'), line):
    ...
</snippet></ROW><ROW><id>11585468</id><snippet>enum_name.encode('utf-8')</snippet></ROW><ROW><id>11585468</id><snippet>bytes</snippet></ROW><ROW><id>11585809</id><snippet>Image</snippet></ROW><ROW><id>11585809</id><snippet>im</snippet></ROW><ROW><id>11585809</id><snippet>Image.open</snippet></ROW><ROW><id>11585809</id><snippet>numpy</snippet></ROW><ROW><id>11585809</id><snippet>Image.getdata()</snippet></ROW><ROW><id>11585840</id><snippet>&gt;&gt;&gt; def func(x):
...     x[0] = 2 # Mutating the object affects the object outside the function
&gt;&gt;&gt; myList = [1]
&gt;&gt;&gt; func(myList)
&gt;&gt;&gt; myList # myList has changed
[2]
&gt;&gt;&gt; def func(x):
...     x = 2 # rebinding name has no effect outside the function
&gt;&gt;&gt; myList = [1]
&gt;&gt;&gt; func(myList)
&gt;&gt;&gt; myList # myList is unaffected
[1]
</snippet></ROW><ROW><id>11585840</id><snippet>name = value</snippet></ROW><ROW><id>11585840</id><snippet>name = value</snippet></ROW><ROW><id>11585840</id><snippet>globals()</snippet></ROW><ROW><id>11585840</id><snippet>name = value</snippet></ROW><ROW><id>11585840</id><snippet>obj.prop = value</snippet></ROW><ROW><id>11585840</id><snippet>obj[0] = value</snippet></ROW><ROW><id>11585840</id><snippet>obj += value</snippet></ROW><ROW><id>11585874</id><snippet>import operator
import sys

py3k = sys.version_info[0] &gt; 2

a = dict()
b = dict()
a[1,3] = 5, 6, 7
b[1,4] = 5, 9, 7

if(py3k):
  a_tuple = next(iter(a.values()))
  b_tuple = next(iter(b.values()))
else:
  a_tuple = a.values()[0]
  b_tuple = b.values()[0]

cmp_key=operator.itemgetter(0,2)
if cmp_key(a_tuple) == cmp_key(b_tuple):
  print('Equal')
</snippet></ROW><ROW><id>11585874</id><snippet>next</snippet></ROW><ROW><id>11585874</id><snippet>iter</snippet></ROW><ROW><id>11585878</id><snippet>arr - 3</snippet></ROW><ROW><id>11585878</id><snippet>arr</snippet></ROW><ROW><id>11585878</id><snippet>arr = arr - 3</snippet></ROW><ROW><id>11585878</id><snippet>arr</snippet></ROW><ROW><id>11585878</id><snippet>arr</snippet></ROW><ROW><id>11585878</id><snippet>foo</snippet></ROW><ROW><id>11585878</id><snippet>arr</snippet></ROW><ROW><id>11585878</id><snippet>arr -= 3</snippet></ROW><ROW><id>11585878</id><snippet>arr</snippet></ROW><ROW><id>11585989</id><snippet>goog = [12,132,124,234,234]
msft = [432,23,234,54,23]
</snippet></ROW><ROW><id>11585989</id><snippet>stock_vals = {'goog':[12,132,124,234,234], 'msft':[432,23,234,54,23]}
</snippet></ROW><ROW><id>11585989</id><snippet>stock_vals[stock_name][day_index]
</snippet></ROW><ROW><id>11585989</id><snippet>{'goog', 'msft', ...}</snippet></ROW><ROW><id>11585989</id><snippet>[0, 6]</snippet></ROW><ROW><id>11586112</id><snippet>from lxml import etree
xml = """&lt;IssueTracking&gt;
  &lt;Issue&gt;
    &lt;SequenceNum&gt;123&lt;/SequenceNum&gt;
    &lt;Subject&gt;Subject of Ticket 123&lt;/Subject&gt;
    &lt;Description&gt;Line 1 in Description field of Ticket 123.
Line 2 in Description field of Ticket 123.
Line 3 in Description field of Ticket 123.&lt;/Description&gt;
  &lt;/Issue&gt;
  &lt;Issue&gt;
    &lt;SequenceNum&gt;124&lt;/SequenceNum&gt;
    &lt;Subject&gt;Subject of Ticket 124&lt;/Subject&gt;
    &lt;Description&gt;Line 1 in Description field of Ticket 124.
Line 2 in Description field of Ticket 124.
Line 3 in Description field of Ticket 124.&lt;/Description&gt;
  &lt;/Issue&gt;
&lt;/IssueTracking&gt;
"""

root = etree.fromstring(xml)
for issue in root.findall('Issue'):
    as_list = [issue.find(n).text for n in ('SequenceNum', 'Subject', 'Description')]
    as_list[2] = as_list[2].split('\n')
    print as_list
</snippet></ROW><ROW><id>11586112</id><snippet>['123', 'Subject of Ticket 123', ['Line 1 in Description field of Ticket 123.', 'Line 2 in Description field of Ticket 123.', 'Line 3 in Description field of Ticket 123.']]
['124', 'Subject of Ticket 124', ['Line 1 in Description field of Ticket 124.', 'Line 2 in Description field of Ticket 124.', 'Line 3 in Description field of Ticket 124.']]
</snippet></ROW><ROW><id>11586238</id><snippet>|sort</snippet></ROW><ROW><id>11586238</id><snippet>(case_sensitive=False)
</snippet></ROW><ROW><id>11586238</id><snippet>{% for source,number in sources.items()|sort(case_sensitive=False) %}
</snippet></ROW><ROW><id>11586593</id><snippet>animated=True</snippet></ROW><ROW><id>11586672</id><snippet>import numpy as np
from rpy2.robjects import r
import pandas.rpy.common as com
from pandas import DataFrame
a = np.array([range(5), range(5)])
df = DataFrame(a)
df = com.convert_to_r_dataframe(df)
r.assign("foo", df)
r("save(foo, file='here.gzip', compress=TRUE)")
</snippet></ROW><ROW><id>11586672</id><snippet>R</snippet></ROW><ROW><id>11586672</id><snippet>&gt; load("here.gzip")
&gt; foo
  X0 X1 X2 X3 X4
0  0  1  2  3  4
1  0  1  2  3  4
</snippet></ROW><ROW><id>11586672</id><snippet>pandas</snippet></ROW><ROW><id>11586672</id><snippet>rpy2</snippet></ROW><ROW><id>11586672</id><snippet>from rpy2.robjects import r
from rpy2.robjects.numpy2ri import numpy2ri
a = np.array([[i*2147483647**2 for i in range(5)], range(5)], dtype="uint64")
a = np.array(a, dtype="float64") # &lt;- convert to double precision numeric since R doesn't have unsigned ints
ro = numpy2ri(a)
r.assign("bar", ro)
r("save(bar, file='another.gzip', compress=TRUE)")
</snippet></ROW><ROW><id>11586672</id><snippet>R</snippet></ROW><ROW><id>11586672</id><snippet>&gt; load("another.gzip")
&gt; bar
     [,1]         [,2]         [,3]         [,4]         [,5]
[1,]    0 4.611686e+18 9.223372e+18 1.383506e+19 1.844674e+19
[2,]    0 1.000000e+00 2.000000e+00 3.000000e+00 4.000000e+00
</snippet></ROW><ROW><id>11586758</id><snippet>mask = pygame.mask.from_surface(self.getNextFrame(), 0)
</snippet></ROW><ROW><id>11586758</id><snippet>0</snippet></ROW><ROW><id>11586758</id><snippet>mask = pygame.mask.Mask(self.getNextFrame().get_size())
mask.fill()
</snippet></ROW><ROW><id>11587184</id><snippet>first</snippet></ROW><ROW><id>11587184</id><snippet>with open('inFile.txt', 'r') as inFile, open('outFile.txt', 'w') as outFile:
    outFile.write(inFile.readline()) #always print the header
    for line in inFile:
        nums = line.split()
        if len(nums) &gt;= 4: #Checks to make sure a fourth column exists.
            outFile.write(nums[3] + "\n") #print the 4th column of each row
</snippet></ROW><ROW><id>11587184</id><snippet>with open('inFile.txt', 'r') as inFile, open('outFile.txt', 'w') as outFile:
</snippet></ROW><ROW><id>11587184</id><snippet>with</snippet></ROW><ROW><id>11587184</id><snippet>with</snippet></ROW><ROW><id>11587184</id><snippet>with open(somefile, 'r') as f:
    with open(someotherfile, 'w') as g:
        #code here.
</snippet></ROW><ROW><id>11587184</id><snippet>outFile.write(inFile.readline()) #always print the header
</snippet></ROW><ROW><id>11587184</id><snippet>file</snippet></ROW><ROW><id>11587184</id><snippet>readline()</snippet></ROW><ROW><id>11587184</id><snippet>for line in inFile:
</snippet></ROW><ROW><id>11587184</id><snippet>file</snippet></ROW><ROW><id>11587184</id><snippet>for</snippet></ROW><ROW><id>11587240</id><snippet>except</snippet></ROW><ROW><id>11587240</id><snippet>except socket.timeout:</snippet></ROW><ROW><id>11587247</id><snippet>import sys,traceback

try:
    assert True
    assert 7 == 7
    assert 1 == 2
    # many more statements like this
except AssertionError:
    _,_,tb = sys.exc_info()
    traceback.print_tb(tb) # Fixed format

    tbInfo = traceback.extract_tb(tb)
    filename,line,func,text = tbInfo[-1]
    print ('An error occurred on line ' + str(line) + ' in statement ' + text)
    exit(1)
</snippet></ROW><ROW><id>11587389</id><snippet>&gt;&gt;&gt; def moveLeadingItem(tokens):
...     first = tokens[0]
...     del tokens[0]
...     tokens[-1].insert(0,first)
... 
&gt;&gt;&gt; Sentence.setParseAction(moveLeadingItem)
&gt;&gt;&gt; print Sentence.parseString("testA foobar testB testC")
['foobar', ['testA', 'testB', 'testC']]
</snippet></ROW><ROW><id>11587623</id><snippet>&gt;&gt;&gt; var = [0] + range(1, 10)
</snippet></ROW><ROW><id>11587623</id><snippet>extend</snippet></ROW><ROW><id>11587623</id><snippet>[0]</snippet></ROW><ROW><id>11587623</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</snippet></ROW><ROW><id>11587623</id><snippet>+</snippet></ROW><ROW><id>11587623</id><snippet>[0]</snippet></ROW><ROW><id>11587623</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</snippet></ROW><ROW><id>11587623</id><snippet>extend</snippet></ROW><ROW><id>11587623</id><snippet>+</snippet></ROW><ROW><id>11587727</id><snippet>_npfindmethods</snippet></ROW><ROW><id>11587727</id><snippet>a.c:24:5: warning: braces around scalar initializer [enabled by default]
a.c:24:5: warning: (near initialization for '_npfindmethods') [enabled by default]
a.c:24:5: warning: initialization from incompatible pointer type [enabled by default]
a.c:24:5: warning: (near initialization for '_npfindmethods') [enabled by default]
(...)
</snippet></ROW><ROW><id>11587727</id><snippet>_npfindmethods</snippet></ROW><ROW><id>11587727</id><snippet>static PyMethodDef _npfindmethods[] = {
    {"add", py_add, METH_VARARGS, py_add_doc},
    {NULL, NULL, 0, NULL}
};
</snippet></ROW><ROW><id>11587727</id><snippet>py_add_doc</snippet></ROW><ROW><id>11587727</id><snippet>static char py_add_doc[] = "Adds two numbers.";
</snippet></ROW><ROW><id>11587727</id><snippet>pynpfind.c</snippet></ROW><ROW><id>11587727</id><snippet>#include "Python.h"
#include "npfind.h"

static char py_add_doc[] = "Adds two numbers.";
static PyObject* py_add(PyObject* self, PyObject* args)
{
    int a, b, r;

    if (!PyArg_ParseTuple(args, "ii", &amp;a, &amp;b))
    {
        return NULL;
    }

    r = a + b;

    return Py_BuildValue("i", r);
}

static PyMethodDef _npfindmethods[] = {
    {"add", py_add, METH_VARARGS, py_add_doc},
    {NULL, NULL, 0, NULL}
};

void init_npfind(void)
{
    PyObject* mod;
    mod = Py_InitModule("_npfind", _npfindmethods);
}
</snippet></ROW><ROW><id>11587781</id><snippet>get(key[, default])</snippet></ROW><ROW><id>11587781</id><snippet>Results2.get('A', 20)</snippet></ROW><ROW><id>11588287</id><snippet>power()</snippet></ROW><ROW><id>11588287</id><snippet>n</snippet></ROW><ROW><id>11588287</id><snippet>def power(f, n):
    def wrapped(x):
        for i in range(n):
            x = f(x)
        return x
    return wrapped
</snippet></ROW><ROW><id>11588376</id><snippet>import math

# Build a cost dictionary, assuming Zipf's law and cost = -math.log(probability).
words = open("words-by-frequency.txt").read().split()
wordcost = dict((k,math.log((i+1)*math.log(len(words)))) for i,k in enumerate(words))
maxword = max(len(x) for x in words)

def infer_spaces(s):
    """Uses dynamic programming to infer the location of spaces in a string
    without spaces."""

    # Find the best match for the i first characters, assuming cost has
    # been built for the i-1 first characters.
    # Returns a pair (match_cost, match_length).
    def best_match(i):
        candidates = enumerate(reversed(cost[max(0, i-maxword):i]))
        return min((c + wordcost.get(s[i-k-1:i], 9e999), k+1) for k,c in candidates)

    # Build the cost array.
    cost = [0]
    for i in range(1,len(s)+1):
        c,k = best_match(i)
        cost.append(c)

    # Backtrack to recover the minimal-cost string.
    out = []
    i = len(s)
    while i&gt;0:
        c,k = best_match(i)
        assert c == cost[i]
        out.append(s[i-k:i])
        i -= k

    return " ".join(reversed(out))
</snippet></ROW><ROW><id>11588376</id><snippet>s = 'thumbgreenappleactiveassignmentweeklymetaphor'
print(infer_spaces(s))
</snippet></ROW><ROW><id>11588505</id><snippet>\x97</snippet></ROW><ROW><id>11588550</id><snippet>out = []
foo = soup.findAll("th")
for bar in foo:
    if bar.find(text"Age"):
        out.append(bar)
</snippet></ROW><ROW><id>11588900</id><snippet>web.setHtml(html)</snippet></ROW><ROW><id>11588900</id><snippet>print_report</snippet></ROW><ROW><id>11588915</id><snippet>from django.conf import settings

def myview(request):
    settings.TEMPLATE_STRING_IF_INVALID = '%s' # '%s' will get expanded to the variable name that was not found
    ...
    template = render(request, 'myview.html', {})
    settings.TEMPLATE_STRING_IF_INVALID = ''
    return template
</snippet></ROW><ROW><id>11588984</id><snippet>Character</snippet></ROW><ROW><id>11588984</id><snippet>def</snippet></ROW><ROW><id>11588984</id><snippet>random_character()</snippet></ROW><ROW><id>11588984</id><snippet>Character</snippet></ROW><ROW><id>11588984</id><snippet>Character</snippet></ROW><ROW><id>11588984</id><snippet>__str__</snippet></ROW><ROW><id>11588984</id><snippet>Character</snippet></ROW><ROW><id>11588984</id><snippet>char</snippet></ROW><ROW><id>11588984</id><snippet>Character</snippet></ROW><ROW><id>11588984</id><snippet>print(char)</snippet></ROW><ROW><id>11588984</id><snippet>pickle</snippet></ROW><ROW><id>11589000</id><snippet>dfrm</snippet></ROW><ROW><id>11589000</id><snippet>dfrm['Category']</snippet></ROW><ROW><id>11589000</id><snippet>for elem in dfrm['Category'].unique():
    dfrm[str(elem)] = dfrm['Category'] == elem
</snippet></ROW><ROW><id>11589000</id><snippet>cat_names = {1:'Some_Treatment', 2:'Full_Treatment', 3:'Control'}
for elem in dfrm['Category'].unique():
    dfrm[cat_names[elem]] = dfrm['Category'] == elem
</snippet></ROW><ROW><id>11589000</id><snippet>str()</snippet></ROW><ROW><id>11589035</id><snippet>def key_press_wrapper():
    your_function1()
    your_function2()
</snippet></ROW><ROW><id>11589035</id><snippet>from Tkinter import *

def key_press_wrapper():
    your_function1()
    your_function2()
root=Tk()
root.bind('&lt;Return&gt;',key_press_wrapper)
</snippet></ROW><ROW><id>11589338</id><snippet>class CronTab(object):
    def __init__(self, *events):
        self.events = events
        for event in self.events:
             event.kwargs['cron'] = self
# rest of the calss remains unmodified
</snippet></ROW><ROW><id>11589338</id><snippet>True</snippet></ROW><ROW><id>11589338</id><snippet>class CronTab(object):
    def __init__(self, *events, marshalls=None):
        self.events = events
        if marshalls is not None:
            # marshalls must be a list of callables that return True or False
            self.marshalls = marshalls
        else
            self.marshalls = []

    def run(self):
        t=datetime(*datetime.now().timetuple()[:5])
        while 1:
            for e in self.events:
                if all([x(e) for x in self.marshalls]):
                    e.check(t)

            t += timedelta(minutes=1)
            while datetime.now() &lt; t:
                time.sleep((t - datetime.now()).seconds)
</snippet></ROW><ROW><id>11589338</id><snippet>reduce</snippet></ROW><ROW><id>11589338</id><snippet>check</snippet></ROW><ROW><id>11589338</id><snippet>class CronTab(object):
    def __init__(self, *events, marshalls=None):
        self.events = events
        self.marshalls = dict()
        if marshalls is not None:
            # marshalls must be a list of callables that return True or False
            self.marshalls['__general'] = marshalls
        else
            self.marshalls['__general'] = []

    # event is a string with the name of the event you want to marshall
    # or None if you want to marshall all of them 
    def register(self, callback, event=None):
        if event = None:
            self.marshalls['__general'].append(callback)
        else:
            self.marshalls.setdefault(event, list()).append(callback)

    def run(self):
        t=datetime(*datetime.now().timetuple()[:5])
        while 1:
            for e in self.events:
                if all([x(e) for x in self.marshalls['__general']]) and
                   all([x(e) for x in self.marshalls[e.name]]):
                    # the above assumes e.name exists (not in reference implementation)
                    e.check(t)

        t += timedelta(minutes=1)
        while datetime.now() &lt; t:
            time.sleep((t - datetime.now()).seconds)
</snippet></ROW><ROW><id>11589630</id><snippet>def __init__(self, data):
    for name, func in data.items():
        setattr(self, name, func)
</snippet></ROW><ROW><id>11589630</id><snippet>self.func</snippet></ROW><ROW><id>11589630</id><snippet>self.dunc</snippet></ROW><ROW><id>11589630</id><snippet>data</snippet></ROW><ROW><id>11589659</id><snippet>f.writelines(' '.join(row) + '\n' for row in mat)
</snippet></ROW><ROW><id>11589659</id><snippet>f.write('\n'.join(' '.join(row) for row in mat))
</snippet></ROW><ROW><id>11589659</id><snippet>f.writelines(' '.join(str(elem) for elem in row) + '\n' for row in mat)
</snippet></ROW><ROW><id>11589659</id><snippet>file.writelines()</snippet></ROW><ROW><id>11589659</id><snippet>for row in mat:
    f.write(' '.join(row) + '\n')
</snippet></ROW><ROW><id>11589779</id><snippet>*_new()</snippet></ROW><ROW><id>11589779</id><snippet>GtkWindow</snippet></ROW><ROW><id>11589779</id><snippet>gtk_window_new()</snippet></ROW><ROW><id>11589779</id><snippet>type</snippet></ROW><ROW><id>11589779</id><snippet>Gtk.Window</snippet></ROW><ROW><id>11589779</id><snippet># this is very close to how it's done in C using get_*/set_* accessors.
window = Gtk.Window(Gtk.WindowType.TOPLEVEL)
window.set_title("Hello")

# setting properties as keyword arguments to the constructor
window = Gtk.Window(type=Gtk.WindowType.TOPLEVEL, title="Hello")

# set_properties() can be used to set properties after construction
window = Gtk.Window()
window.set_properties(title="Hello")
</snippet></ROW><ROW><id>11589891</id><snippet>os.mkdir</snippet></ROW><ROW><id>11589891</id><snippet>os.mkdir(path [, mode=0777])
</snippet></ROW><ROW><id>11589891</id><snippet>os.chown</snippet></ROW><ROW><id>11589891</id><snippet>os.chown(path, uid, gid)
</snippet></ROW><ROW><id>11589891</id><snippet>import os
original_user = os.environ.get('SUDO_USER')
original_uid = os.environ.get('SUDO_UID')
original_gid = os.environ.get('SUDO_GID')
</snippet></ROW><ROW><id>11589935</id><snippet> &lt;img src="/disp?key={{image_key}}" /&gt;
</snippet></ROW><ROW><id>11589935</id><snippet> &lt;img src="/disp?key=AC3CK3333KCCK2K213" /&gt;
</snippet></ROW><ROW><id>11589935</id><snippet>&lt;img ... /&gt;</snippet></ROW><ROW><id>11589935</id><snippet>&lt;img ...&gt;&lt;/img&gt;</snippet></ROW><ROW><id>11589935</id><snippet>&lt;img .../&gt;&lt;/img&gt;</snippet></ROW><ROW><id>11589935</id><snippet>    else:
        self.response.headers['Content-Type'] = "image/png"
        return self.response.out.write("/static/unknown.gif")
</snippet></ROW><ROW><id>11589935</id><snippet>"/static/unknown.gif"</snippet></ROW><ROW><id>11589935</id><snippet>"/disp?key=..."</snippet></ROW><ROW><id>11589935</id><snippet>&lt;domain&gt;/disp?key=...</snippet></ROW><ROW><id>11589983</id><snippet>$('#vote_tally').load('/vote_up/3452/');
</snippet></ROW><ROW><id>11589983</id><snippet>@app.route('/vote_up/&lt;this_record&gt;')
def vote_up(this_record):
    if already_voted_for(this_record):
        return """&lt;script type="text/javascript"&gt;
                       alert('You can only vote once');
            &lt;/script&gt;{0}""".format(count_votes_for(this_record))

    vandalisms.update({'_id':bson.objectid.ObjectId(this_record)}, 
              {"$inc" : { "votes": 1 }}, upsert=True)

    return count_votes_for(this_record)
</snippet></ROW><ROW><id>11590401</id><snippet>DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

AWS_ACCESS_KEY_ID = 'access-id'
AWS_SECRET_ACCESS_KEY = 'secret-key'
AWS_STORAGE_BUCKET_NAME = 'bucket-name'
AWS_PRELOAD_METADATA = True # necessary to fix manage.py collectstatic command to only upload changed files instead of all files
</snippet></ROW><ROW><id>11590401</id><snippet>STATIC_URL = 'https://bucket-name.s3.amazonaws.com/static/'
ADMIN_MEDIA_PREFIX = 'https://bucket-name.s3.amazonaws.com/static/admin/'
</snippet></ROW><ROW><id>11590401</id><snippet>MEDIA_URL = 'https://bucket-name.s3.amazonaws.com/media/'
STATIC_URL = 'https://bucket-name.s3.amazonaws.com/static/'
</snippet></ROW><ROW><id>11590401</id><snippet>&lt;link href='{{ STATIC_URL }}css/styles.css' type='text/css' rel='stylesheet'&gt;
</snippet></ROW><ROW><id>11590415</id><snippet>assigned_layers = correspondinglayerbuff = 0
tuple_of_tuples = moduleconfigcopy = ((0, 1), (0, 0, 1), (0, 1))
dimension = moduledimension
MOD_BUFFER = modulebuffer = 'buffer'
c_buff = moduleconbuff = 0
</snippet></ROW><ROW><id>11590415</id><snippet>try... except</snippet></ROW><ROW><id>11590415</id><snippet>while assigned_layers &lt;= len(self.layers):
    for element_tuple in tuple_of_tuples:
        for item in element_tuple:
            if item: # in python, 0 is treated as boolean False, 1 or any other value is treated as boolean True.
                dimension = [layerbuff + str(assigned_layers)] #what is layerbuff?
                modules_dict = {
                    1: pybrain.GaussianLayer(dimension),
                    2: pybrain.LinearLayer(dimension),
                    3: pybrain.LSTMLayer(dimension),
                    4: pybrain.SigmoidLayer(dimension),
                    5: pybrain.TanhLayer(dimension)
                    } # Notice how this dict is much easier to read.

                vars()[MOD_BUFFER + str(assigned_layers)] = modules_dict[c_buff]  #modules_dict is a dict and not a callable object
                c_buff = 0
                assigned_layers +=1
                #No need for continue here, since that's what the if...else does here.
            else:
                element_tuple = element_tuple[1:] #what is this for?
                print 'Invalid: ', tuple_of_tuples, element_tuple
</snippet></ROW><ROW><id>11590415</id><snippet>vars()[MOD_BUFFER + str(assigned_layers)] = modules_dict[c_buff]  #modules_dict is a dict and not a callable object
</snippet></ROW><ROW><id>11590415</id><snippet>modules_dict(moduleconbuff)</snippet></ROW><ROW><id>11590415</id><snippet>TypeError</snippet></ROW><ROW><id>11590623</id><snippet>const.py</snippet></ROW><ROW><id>11590742</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11590742</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>11590742</id><snippet>p = Popen(['airodump-ng', …], stdin=PIPE, stdout=PIPE, stderr=PIPE)
</snippet></ROW><ROW><id>11590742</id><snippet>stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>11590742</id><snippet>airodump-ng</snippet></ROW><ROW><id>11590742</id><snippet>os.devnull</snippet></ROW><ROW><id>11590742</id><snippet>airodump-ng</snippet></ROW><ROW><id>11590742</id><snippet>devnull = os.open(os.devnull, os.O_WRONLY)
p = Popen(['airodump-n', …], stdout=devnull, stderr=devnull)
</snippet></ROW><ROW><id>11590929</id><snippet>SectionName</snippet></ROW><ROW><id>11590929</id><snippet>SectionName :</snippet></ROW><ROW><id>11590929</id><snippet>;</snippet></ROW><ROW><id>11590929</id><snippet>,</snippet></ROW><ROW><id>11590929</id><snippet>"Name"     = JSON Grammar
"Author"   = Arsène von Wyss
"Version"  = 1.0
"About"    = 'Grammar for JSON data, following http://www.json.org/'
! and compliant with http://www.ietf.org/rfc/rfc4627

"Start Symbol" = &lt;Json&gt;
"Case Sensitive" = True
"Character Mapping" = 'Unicode'

! ------------------------------------------------- Sets

{Unescaped} = {All Valid} - {&amp;1 .. &amp;19} - ["\]
{Hex} = {Digit} + [ABCDEFabcdef]
{Digit9} = {Digit} - [0]

! ------------------------------------------------- Terminals

Number = '-'?('0'|{Digit9}{Digit}*)('.'{Digit}+)?([Ee][+-]?{Digit}+)?
String = '"'({Unescaped}|'\'(["\/bfnrt]|'u'{Hex}{Hex}{Hex}{Hex}))*'"'

! ------------------------------------------------- Rules

&lt;Json&gt; ::= &lt;Object&gt;
         | &lt;Array&gt;

&lt;Object&gt; ::= '{' '}'
           | '{' &lt;Members&gt; '}'

&lt;Members&gt; ::= &lt;Pair&gt;
            | &lt;Pair&gt; ',' &lt;Members&gt;

&lt;Pair&gt; ::= String ':' &lt;Value&gt;

&lt;Array&gt; ::= '[' ']'
          | '[' &lt;Elements&gt; ']'

&lt;Elements&gt; ::= &lt;Value&gt;
             | &lt;Value&gt; ',' &lt;Elements&gt;

&lt;Value&gt; ::= String
          | Number
          | &lt;Object&gt;
          | &lt;Array&gt;
          | true
          | false
          | null
</snippet></ROW><ROW><id>11591367</id><snippet>str.format()</snippet></ROW><ROW><id>11591367</id><snippet>**</snippet></ROW><ROW><id>11591367</id><snippet>def __str__(self):
    return textwrap.dedent('''\
    Commit: {uid}

    {message}
    ''').format(**self.__dict__)
</snippet></ROW><ROW><id>11591492</id><snippet>select()</snippet></ROW><ROW><id>11591492</id><snippet>select()</snippet></ROW><ROW><id>11591492</id><snippet>select()</snippet></ROW><ROW><id>11591492</id><snippet>open()</snippet></ROW><ROW><id>11591492</id><snippet>open</snippet></ROW><ROW><id>11591492</id><snippet>read(8)</snippet></ROW><ROW><id>11591492</id><snippet>buffering</snippet></ROW><ROW><id>11591492</id><snippet>open</snippet></ROW><ROW><id>11591492</id><snippet>mode</snippet></ROW><ROW><id>11591492</id><snippet>rb</snippet></ROW><ROW><id>11591492</id><snippet>select</snippet></ROW><ROW><id>11591492</id><snippet>os.open()</snippet></ROW><ROW><id>11591492</id><snippet>os.O_RDONLY|os.O_NONBLOCK</snippet></ROW><ROW><id>11591555</id><snippet>yaml.load(fileToBeParsed)</snippet></ROW><ROW><id>11591555</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>11591555</id><snippet>requests</snippet></ROW><ROW><id>11591991</id><snippet>sqlite&gt; select datetime('now', 'utc');
2012-07-21 09:58:21
sqlite&gt; select datetime('now', 'localtime');
2012-07-21 13:58:33
</snippet></ROW><ROW><id>11591995</id><snippet>result = xsdPathsMap[xmlRootName]
a.modelerFunction = result # this is just kind of weird
</snippet></ROW><ROW><id>11591995</id><snippet>a</snippet></ROW><ROW><id>11591995</id><snippet>a.createModel()
</snippet></ROW><ROW><id>11591995</id><snippet>result(a)
</snippet></ROW><ROW><id>11591995</id><snippet>__call__</snippet></ROW><ROW><id>11591995</id><snippet>class MyModelingFunction(object):
    ...

    def __call__(self, *args, **kwargs):
        """do something when I'm called"""
</snippet></ROW><ROW><id>11592093</id><snippet>def everythird():
    queryset = get_foo(person)  #First queryset
    promoted_foo = get_promoted_foo()  #Second queryset
    for (counter,(s,p)) in enumerate(itertools.izip(queryset,promoted_foo)):
    if counter%3==0 and promoted_foo:
        yield promoted_foo
    elif queryset:
        yield queryset
</snippet></ROW><ROW><id>11592279</id><snippet>int('00480065006C006C006F00200077006F0072006C00640021', 16)
6896377547970387516320582441726837832153446723333914657L
</snippet></ROW><ROW><id>11592279</id><snippet>ValueError</snippet></ROW><ROW><id>11592279</id><snippet>int('af', 16)
175

int('ah', 16)
 ...
ValueError: invalid literal for int() with base 16: 'ah'
</snippet></ROW><ROW><id>11592279</id><snippet>0..9</snippet></ROW><ROW><id>11592279</id><snippet>a-f/A-F</snippet></ROW><ROW><id>11592279</id><snippet>string.hexdigits</snippet></ROW><ROW><id>11592279</id><snippet>'0123456789abcdefABCDEF'</snippet></ROW><ROW><id>11592279</id><snippet>import string
all(c in string.hexdigits for c in s)
</snippet></ROW><ROW><id>11592279</id><snippet>True</snippet></ROW><ROW><id>11592279</id><snippet>False</snippet></ROW><ROW><id>11592279</id><snippet>s</snippet></ROW><ROW><id>11592279</id><snippet>s = 'af'
all(c in string.hexdigits for c in s)
True

s = 'ah'
all(c in string.hexdigits for c in s)
False
</snippet></ROW><ROW><id>11592279</id><snippet>int()</snippet></ROW><ROW><id>11592279</id><snippet>0x</snippet></ROW><ROW><id>11592279</id><snippet>set(string.hexdigits)</snippet></ROW><ROW><id>11592490</id><snippet>unicode.decode</snippet></ROW><ROW><id>11592490</id><snippet>encode</snippet></ROW><ROW><id>11592490</id><snippet>decode</snippet></ROW><ROW><id>11592490</id><snippet>decode</snippet></ROW><ROW><id>11592490</id><snippet>isinstance</snippet></ROW><ROW><id>11592598</id><snippet>showPageContent</snippet></ROW><ROW><id>11592598</id><snippet>page</snippet></ROW><ROW><id>11592598</id><snippet>showPageContent</snippet></ROW><ROW><id>11592598</id><snippet>self.page</snippet></ROW><ROW><id>11592598</id><snippet>page</snippet></ROW><ROW><id>11592598</id><snippet>showPageContent</snippet></ROW><ROW><id>11592598</id><snippet>page = self.notebook.insert(pageName)
self.showPageContent(page)
</snippet></ROW><ROW><id>11592758</id><snippet>__new__</snippet></ROW><ROW><id>11592758</id><snippet>__metaclass__</snippet></ROW><ROW><id>11592758</id><snippet>__new__</snippet></ROW><ROW><id>11592758</id><snippet>__new__</snippet></ROW><ROW><id>11592758</id><snippet>__init__</snippet></ROW><ROW><id>11592758</id><snippet>__new__</snippet></ROW><ROW><id>11592758</id><snippet>import</snippet></ROW><ROW><id>11592758</id><snippet>cls.__subclasses</snippet></ROW><ROW><id>11592758</id><snippet>entry_points</snippet></ROW><ROW><id>11593089</id><snippet>def some_view(request):
    if request.method == 'POST':
        some_id = 1

        form = SomeForm(data=request.POST, some_id=some_id)
</snippet></ROW><ROW><id>11593089</id><snippet>class SomeForm(ModelForm):
    def __init__(self, *args, **kwargs):
        if 'some_id' in kwargs:
            self.some_id = kwargs.pop('some_id')

        super(SomeForm, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>11593392</id><snippet>import os
rand_string = os.urandom(8)
</snippet></ROW><ROW><id>11593493</id><snippet>timedelta</snippet></ROW><ROW><id>11593493</id><snippet>t1 = t2 // i
</snippet></ROW><ROW><id>11593493</id><snippet>timedelta</snippet></ROW><ROW><id>11593493</id><snippet>numpy</snippet></ROW><ROW><id>11593493</id><snippet>timedelta</snippet></ROW><ROW><id>11593493</id><snippet>tdMicrosecs = td.microseconds + 1000.0 * td.seconds + 86400000000.0 * td.days
tdQuotient = tdMicrosecs / i
</snippet></ROW><ROW><id>11593493</id><snippet>tdMicrosecs</snippet></ROW><ROW><id>11593537</id><snippet>try:</snippet></ROW><ROW><id>11593554</id><snippet>websockify 8169 localhost:8168
</snippet></ROW><ROW><id>11593554</id><snippet>browser -&gt; (websockets) -&gt; websockify port 8169 -&gt; (tcp) -&gt; server port localhost:8168
</snippet></ROW><ROW><id>11593774</id><snippet>unsigned int c;
(c) &gt;&gt; 8
</snippet></ROW><ROW><id>11593774</id><snippet>int c;
((c) &gt;&gt; 8) &amp; 0xffffff
</snippet></ROW><ROW><id>11593774</id><snippet>$crc32 = ((int)($crc32&gt;&gt;8) &amp; 0xffffff) ^ $crc_array[$index];
</snippet></ROW><ROW><id>11593861</id><snippet>export LANG="en_US.UTF-8"
</snippet></ROW><ROW><id>11593934</id><snippet>/.*</snippet></ROW><ROW><id>11593934</id><snippet>self.response.write()</snippet></ROW><ROW><id>11593934</id><snippet>print</snippet></ROW><ROW><id>11593934</id><snippet>def get(self):
    if self.request.path == '/foo':
        # here i write something out
        # but you would serve a template
        self.response.write('urlpath is /foo')
    elif self.request.path == '/bar':
        self.response.write('urlpath is /bar')
    else:
        self.response.write('urlpath is %s' %self.request.path)
</snippet></ROW><ROW><id>11593934</id><snippet>WSGIApplication</snippet></ROW><ROW><id>11593934</id><snippet>app = webapp2.WSGIApplication([('/', MainPage),
                               ('/foo', FooHandler),
                               ('/bar', BarHandler),
                               ('/.*', CatchEverythingElseHandler)], debug=True)
</snippet></ROW><ROW><id>11594170</id><snippet>from sys import argv
open(argv[2], 'w').write(open(argv[1]).read())
</snippet></ROW><ROW><id>11594310</id><snippet>folder</snippet></ROW><ROW><id>11594310</id><snippet>@app.route("/folder/&lt;folder_name&gt;/")
def folder(folder_name):
    # do something with folder_name
    pass
</snippet></ROW><ROW><id>11594310</id><snippet>&lt;a href="{% url_for('folder', folder_name=folder) %}"&gt;{{ folder }}&lt;/a&gt;
</snippet></ROW><ROW><id>11594310</id><snippet>folder</snippet></ROW><ROW><id>11594367</id><snippet>repr()</snippet></ROW><ROW><id>11594367</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>11594368</id><snippet>setup.py</snippet></ROW><ROW><id>11594368</id><snippet>lib</snippet></ROW><ROW><id>11594368</id><snippet>wx</snippet></ROW><ROW><id>11594368</id><snippet>import wx
import wx.lib
from wx.lib import buttons
</snippet></ROW><ROW><id>11594368</id><snippet>setup.py</snippet></ROW><ROW><id>11594368</id><snippet>install_requires</snippet></ROW><ROW><id>11594368</id><snippet>wxPython</snippet></ROW><ROW><id>11594368</id><snippet>wx</snippet></ROW><ROW><id>11594368</id><snippet>wx</snippet></ROW><ROW><id>11594368</id><snippet>import wx.lib</snippet></ROW><ROW><id>11594613</id><snippet>def __init__(self, *a, **kw):
    super(MySpider, self).__init__(*a, **kw)
    # your code here
</snippet></ROW><ROW><id>11594613</id><snippet>class MySpider(CrawlSpider):
    name = "company"
    allowed_domains = ["site.com"]
    start_urls = ["http://www.site.com"]

    def __init__(self, *a, **kw):
        super(MySpider, self).__init__(*a, **kw)
        dispatcher.connect(self.spider_closed, signals.spider_closed)
</snippet></ROW><ROW><id>11594636</id><snippet>KeyboardInterruptException</snippet></ROW><ROW><id>11594636</id><snippet>try … except</snippet></ROW><ROW><id>11594636</id><snippet>while True:
   try:
       input = int(raw_input('Pick a number in range 1-10 &gt;&gt;&gt; '))
   except ValueError: # just catch the exceptions you know!
       print 'That\'s not a number!'
   else:
       if 1 &lt;= input &lt; 10: # this is faster
           break
       else:
           print 'Out of range. Try again'
</snippet></ROW><ROW><id>11594636</id><snippet>try … except</snippet></ROW><ROW><id>11594637</id><snippet>import json
with open("logfile.json", "r") as logfile:
    records = json.load(logfile)
</snippet></ROW><ROW><id>11594637</id><snippet>[u"2000-01-01T00:30:15+00:00",
 u"2000-01-01T00:30:16+00:00",
 ...
 ]
</snippet></ROW><ROW><id>11594637</id><snippet>import datetime
for record in records:
    datepart, _ = record.split("T")
    date = datetime.datetime.strptime(datepart, "%Y-%m-%d")
</snippet></ROW><ROW><id>11594637</id><snippet>import collections
import datetime
date_bins = collections.defaultdict(list)
for record in records:
    datepart, _ = record.split("T")
    date = datetime.datetime.strptime(datepart, "%Y-%m-%d")
    date_bins[date].append(record)
</snippet></ROW><ROW><id>11594637</id><snippet>for date in date_bins:
    print "activations on %s: %s"%(date, len(date_bins[date]))
</snippet></ROW><ROW><id>11595108</id><snippet>app = webapp2.WSGIApplication([('/', MainPage),
                               ('/profile/&lt;profile_id&gt;', ProfilePage),])
</snippet></ROW><ROW><id>11595108</id><snippet>'/profile/&lt;profile_id&gt;'</snippet></ROW><ROW><id>11595108</id><snippet>route template</snippet></ROW><ROW><id>11595108</id><snippet>profile_id</snippet></ROW><ROW><id>11595108</id><snippet>&lt;name[:regex]&gt;</snippet></ROW><ROW><id>11595108</id><snippet>'/profile/&lt;user_id:\d+&gt;/'</snippet></ROW><ROW><id>11595108</id><snippet>/profile/1024/</snippet></ROW><ROW><id>11595133</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sample = "javascript:ColdFusion.Window.show('theformats');ColdFusion.navigate('exportformats.cfm?id=1900067&amp;expformat=bibtex','theformats');"
&gt;&gt;&gt; regex = r"javascript:ColdFusion\.Window\.show\('theformats'\);ColdFusion.navigate\('([^']+)','theformats'\);"
&gt;&gt;&gt; print re.match(regex, sample).group(1)
'exportformats.cfm?id=1900067&amp;expformat=bibtex'
</snippet></ROW><ROW><id>11595193</id><snippet>import urllib
f = urllib.urlopen(imgUrl)
with open("tides.gif", "wb") as imgFile:
    imgFile.write(f.read())
# you won't get to this print until you've downloaded
# all of the image at imgUrl or an exception is raised
print "Got it!"
</snippet></ROW><ROW><id>11595299</id><snippet>cpu_alert</snippet></ROW><ROW><id>11595299</id><snippet>from PyQt4 import QtGui, QtCore, QtSql
import time

class Window(QtGui.QDialog):

    update_ready = QtCore.pyqtSignal()

    def __init__(self):
        super(Window, self).__init__()

        self.layout = QtGui.QVBoxLayout(self)
        self.table = QtGui.QTableView()
        self.layout.addWidget(self.table)

        self.db = QtSql.QSqlDatabase.addDatabase("QMYSQL")
        self.db.setHostName("server")
        self.db.setDatabaseName("db")
        self.db.setUserName("user")
        self.db.setPassword("pass")
        self.db.open()

        self.model = QtSql.QSqlTableModel(self, self.db)
        self.model.setTable("cpu_alert")
        self.model.setEditStrategy(self.model.OnManualSubmit)
        self.model.setQuery(QtSql.QSqlQuery("""
            SELECT *
            FROM cpu_alert
            WHERE date = (SELECT MAX(date) FROM cpu_alert)"""))
        self.model.select()

        self.table.setModel(self.model)

        self.button = QtGui.QPushButton("Select")
        self.layout.addWidget(self.button)

        self.button.clicked.connect(self.model.select)
        self.update_ready.connect(self.model.select)

        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.cpu_alert_checker)
        # check every second
        self.timer.start(1000*1)

        # this is only for the temp time test
        self._now = time.time()

    def cpu_alert_checker(self):
        # You would do whatever check you want 
        # in this function
        if time.time() - self._now &gt; 5:
            print "Update ready!"
            # emit this signal if the table should refresh
            self.update_ready.emit()
            self._now = time.time()
</snippet></ROW><ROW><id>11595539</id><snippet>out.dump()</snippet></ROW><ROW><id>11595539</id><snippet>&gt;&gt;&gt; print out.dump()
[['123', 'FOOBAR', ['testA', 'testB']]]
- Sentence: ['123', 'FOOBAR', ['testA', 'testB']]
  - Modifier_Group: ['testA', 'testB']
    - Modifier: testB
  - Name: FOOBAR
  - Prefix: 123
</snippet></ROW><ROW><id>11595539</id><snippet>&gt;&gt;&gt; print out.Sentence.keys()
['Modifier_Group', 'Prefix', 'Name']
&gt;&gt;&gt; print out.Sentence['Prefix']
123
</snippet></ROW><ROW><id>11595539</id><snippet>&gt;&gt;&gt; print out.Sentence.Name
FOOBAR
&gt;&gt;&gt; print out.Sentence.Prefix
123
</snippet></ROW><ROW><id>11595569</id><snippet>os.environ["LANG"] = "en_US.UTF-8"
os.environ["LC_ALL"] = "en_US.UTF-8"
</snippet></ROW><ROW><id>11595632</id><snippet>function IntNoise(32-bit integer: x)</snippet></ROW><ROW><id>11595632</id><snippet>def intnoise(x):
</snippet></ROW><ROW><id>11595632</id><snippet>x = (x &lt;&lt; 13) ^ x
</snippet></ROW><ROW><id>11595632</id><snippet>7ffffff</snippet></ROW><ROW><id>11595632</id><snippet>0x</snippet></ROW><ROW><id>11595632</id><snippet>return ( 1.0 - ( (x * (x * x * 15731 + 789221) + 1376312589) &amp; 0x7fffffff) / 1073741824.0)
</snippet></ROW><ROW><id>11595632</id><snippet>def intnoise(x):
    x = (x &lt;&lt; 13) ^ x
    return (1.0 - ((x * (x * x * 15731 + 789221) + 1376312589) &amp; 0x7fffffff) / 1073741824.0)
</snippet></ROW><ROW><id>11595679</id><snippet>def is_power(n: int, base: int) -&gt; bool:
    if n == 0:
        return false
    while (n % base == 0):
        n //= base
    #     ^^ note two slashes
    return n == 1
</snippet></ROW><ROW><id>11595679</id><snippet>/</snippet></ROW><ROW><id>11595679</id><snippet>/</snippet></ROW><ROW><id>11595679</id><snippet>//</snippet></ROW><ROW><id>11595679</id><snippet>/</snippet></ROW><ROW><id>11595679</id><snippet>3.0 ** 34 == 16677181699666569
          == 0b111011001111111100111011110011000100000011001010001001
</snippet></ROW><ROW><id>11595679</id><snippet>             0b111011001111111100111011110011000100000011001010001000
                                                                    ^
          == 16677181699666568
</snippet></ROW><ROW><id>11595789</id><snippet>groupby</snippet></ROW><ROW><id>11595789</id><snippet>from itertools import groupby

L = [2, 2, 3, 4, 4, 10]

L.sort()
for key, iterator in groupby(L):
    print key, list(iterator)
</snippet></ROW><ROW><id>11595789</id><snippet>groupby</snippet></ROW><ROW><id>11595789</id><snippet>list(iterator)</snippet></ROW><ROW><id>11595789</id><snippet>&gt;&gt;&gt; [list(it) for key, it in groupby(sorted(L))]
[[2, 2], [3], [4, 4], [10]]
</snippet></ROW><ROW><id>11596035</id><snippet>y/x</snippet></ROW><ROW><id>11596035</id><snippet>numpy.linalg.lstsq</snippet></ROW><ROW><id>11596035</id><snippet>coeff = numpy.transpose([x*x, x])
((a, b), _, _, _) = numpy.linalg.lstsq(coeff, y)
polynomial = numpy.poly1d([a, b, 0])
</snippet></ROW><ROW><id>11596054</id><snippet>.filter</snippet></ROW><ROW><id>11596054</id><snippet>    import sqlalchemy as sql

    session = sql.orm.sessionmaker( bind=sql.create_engine( 'sqlite:///sql.db' ) )
    Bob = session.query( Names ).filter( Names.name == "bob" )
</snippet></ROW><ROW><id>11596126</id><snippet>$.ajax({
  type: 'POST',
  url: url,
  data: data,
  success: success,
  dataType: dataType
});
</snippet></ROW><ROW><id>11596126</id><snippet>{"post-form":postcontent}</snippet></ROW><ROW><id>11596126</id><snippet>$.ajax({
   url: '/post',
   type: 'POST',
   data: 'post-form='+postcontent,
   dataType: 'text',
   success: function(response, textStatus, jqXHR) {
     alert("Yay!");
   },
   error: function(jqXHR, textStatus, errorThrown){
     alert(textStatus, errorThrown);
  }
});
</snippet></ROW><ROW><id>11596422</id><snippet>https://hibernate.onjira.com/si/jira.issueviews:issue-xml/HHH-1050/HHH-1050.xml
</snippet></ROW><ROW><id>11596605</id><snippet>TransactionTestCase</snippet></ROW><ROW><id>11596605</id><snippet>Creating test database for alias 'default'...
....INFO:root:adding video title - title, url - url1
.INFO:root:adding video title - title, url - myurl
INFO:root:video is already added to playlist, will not re-add - &lt;Playlist id:1, name:playlist, date_created:2012-07-21 23:25:15.411728+00:00, deleted:False&gt;, &lt;Video id:1, title:title, url:myurl&gt;
.INFO:root:adding video title - title, url - url
.INFO:root:playlist created: &lt;Playlist id:1, name:playlist, date_created:2012-07-21 23:25:15.904582+00:00, deleted:False&gt;, &lt;User: test&gt;
INFO:root:playlist created: &lt;Playlist id:2, name:playlist1, date_created:2012-07-21 23:25:15.912512+00:00, deleted:False&gt;, &lt;User: test&gt;
.INFO:root:playlist created: &lt;Playlist id:1, name:playlist, date_created:2012-07-21 23:25:16.230842+00:00, deleted:False&gt;, &lt;User: test&gt;
INFO:root:Playlist already exists: &lt;Playlist id:1, name:playlist, date_created:2012-07-21 23:25:16.230842+00:00, deleted:False&gt;, &lt;User: test&gt;
.INFO:root:playlist created: &lt;Playlist id:1, name:playlist, date_created:2012-07-21 23:25:16.861322+00:00, deleted:False&gt;, &lt;User: user1&gt;
INFO:root:playlist created: &lt;Playlist id:2, name:playlist, date_created:2012-07-21 23:25:16.866924+00:00, deleted:False&gt;, &lt;User: user2&gt;
.
----------------------------------------------------------------------
Ran 10 tests in 2.427s

OK
Destroying test database for alias 'default'...
</snippet></ROW><ROW><id>11596676</id><snippet>encode</snippet></ROW><ROW><id>11596676</id><snippet>decode</snippet></ROW><ROW><id>11596676</id><snippet>0x61</snippet></ROW><ROW><id>11596676</id><snippet>0xc0\xb1</snippet></ROW><ROW><id>11596855</id><snippet>import urllib, urllib2, cookielib

# cookie storage
cj = cookielib.CookieJar()
opener = urllib2.build_opener(
    urllib2.HTTPCookieProcessor(cj),
    urllib2.HTTPRedirectHandler
    )
# Useragent
opener.addheaders.append(('User-agent','Mozilla/4.0'))

url = 'http://www.okcupid.com/login'
login_data = urllib.urlencode({
    'username':'myusername',
    'password':'mypassword',
    })

req = urllib2.Request(url,login_data)
resp = opener.open(req)
the_page = resp.read()

print the_page
</snippet></ROW><ROW><id>11596880</id><snippet>SITE_ID = 1
INSTALLED_APPS = (
    ...
    'django.contrib.sites',
    ...
}
</snippet></ROW><ROW><id>11596880</id><snippet>SITE_ID</snippet></ROW><ROW><id>11597213</id><snippet>z_values = {
    1: X1,
    42: X2,
    }

Z = z_values[V]
</snippet></ROW><ROW><id>11597390</id><snippet>__doc__</snippet></ROW><ROW><id>11597390</id><snippet>__doc__</snippet></ROW><ROW><id>11597460</id><snippet>parent</snippet></ROW><ROW><id>11597460</id><snippet>parent</snippet></ROW><ROW><id>11597460</id><snippet>super(Example, self).__init__(parent)</snippet></ROW><ROW><id>11597460</id><snippet>QtGui.QDialog.__init__(self, parent)</snippet></ROW><ROW><id>11597460</id><snippet>super</snippet></ROW><ROW><id>11597460</id><snippet>self</snippet></ROW><ROW><id>11597460</id><snippet>QtGui.QDialog</snippet></ROW><ROW><id>11597460</id><snippet>Example</snippet></ROW><ROW><id>11597460</id><snippet>self</snippet></ROW><ROW><id>11597460</id><snippet>QtGui.QDialog.__init__</snippet></ROW><ROW><id>11597460</id><snippet>self</snippet></ROW><ROW><id>11597460</id><snippet>parent</snippet></ROW><ROW><id>11597460</id><snippet>super</snippet></ROW><ROW><id>11597460</id><snippet>QWidget</snippet></ROW><ROW><id>11597460</id><snippet>QDialog</snippet></ROW><ROW><id>11597460</id><snippet>QDialog</snippet></ROW><ROW><id>11597460</id><snippet>QWidget</snippet></ROW><ROW><id>11597460</id><snippet>__init__</snippet></ROW><ROW><id>11597574</id><snippet>import socket
import os, os.path
import time

sockfile = "./communicate.sock"

if os.path.exists( sockfile ):
  os.remove( sockfile )

print "Opening socket..."

server = socket.socket( socket.AF_UNIX, socket.SOCK_STREAM )
server.bind(sockfile)
server.listen(5)

print "Listening..."
while True:
  conn, addr = server.accept()

  print 'accepted connection'

  while True: 

    data = conn.recv( 1024 )
    if not data:
        break
    else:
        print "-" * 20
        print data
        if "DONE" == data:
            break
print "-" * 20
print "Shutting down..."

server.close()
os.remove( sockfile )

print "Done"
</snippet></ROW><ROW><id>11597574</id><snippet>npm install npmlog</snippet></ROW><ROW><id>11597574</id><snippet>var net = require('net')
  , log = require('npmlog')
  , sockfile = './communicate.sock'
  ;

var client = net.connect( { path: sockfile });

client
  .on('connect', function () {
    log.info('client', 'client connected');
    client.write('hello server');
  })
  .on('data', function (data) {
    log.info('client', 'Data: %s', data.toString());
    client.end(); 
  })
  .on('error', function (err) {
    log.error('client', err);
  })
  .on('end', function () {
    log.info('client', 'client disconnected');
  })
  ;
</snippet></ROW><ROW><id>11597748</id><snippet>min((idx for idx in indexes if not visited[idx]), key=lambda idx: dist[idx])
</snippet></ROW><ROW><id>11597911</id><snippet>s = ['manny',
     'mo',
     'jack',
]
</snippet></ROW><ROW><id>11597911</id><snippet>s = ['manny',
     'mo',
     'jack',
     'roger',
]
</snippet></ROW><ROW><id>11597911</id><snippet>  s = ['manny',
       'mo',
       'jack',
+      'roger',
  ]
</snippet></ROW><ROW><id>11597911</id><snippet>  s = ['manny',
       'mo',
-      'jack'
+      'jack',
+      'roger'
  ]
</snippet></ROW><ROW><id>11598106</id><snippet>get</snippet></ROW><ROW><id>11598106</id><snippet>profile_name</snippet></ROW><ROW><id>11598106</id><snippet>profile_name</snippet></ROW><ROW><id>11598106</id><snippet>current_user</snippet></ROW><ROW><id>11598106</id><snippet>   def get(self, profile_name):
        current_user = str(self.user.name)
        profile_name = current_user
</snippet></ROW><ROW><id>11598106</id><snippet>imgs</snippet></ROW><ROW><id>11598106</id><snippet>imgs</snippet></ROW><ROW><id>11598368</id><snippet>C:\Users\username\Desktop\MyApp</snippet></ROW><ROW><id>11598368</id><snippet>C:\Users\username\Desktop\MyApp\Static</snippet></ROW><ROW><id>11598368</id><snippet>/Users/username/Desktop/datafolder/pics/pic1.png</snippet></ROW><ROW><id>11598368</id><snippet>C:\Users\username\Desktop\MyApp\Static\Users\username\Desktop\datafolder\pics\pic1.png</snippet></ROW><ROW><id>11598368</id><snippet>static_folder</snippet></ROW><ROW><id>11598368</id><snippet>app = Flask(static_folder='C:\\Some\\Directory')
</snippet></ROW><ROW><id>11598511</id><snippet>foo</snippet></ROW><ROW><id>11598793</id><snippet>object_hook</snippet></ROW><ROW><id>11598793</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt;
&gt;&gt;&gt; class Person(object):
...     firstName = ""
...     lastName = ""
...
&gt;&gt;&gt;
&gt;&gt;&gt; def as_person(d):
...     p = Person()
...     p.__dict__.update(d)
...     return p
...
&gt;&gt;&gt;
&gt;&gt;&gt; s = '{ "firstName" : "John", "lastName" : "Smith" }'
&gt;&gt;&gt; o = json.loads(s, object_hook=as_person)
&gt;&gt;&gt;
&gt;&gt;&gt; type(o)
&lt;class '__main__.Person'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; o.firstName
u'John'
&gt;&gt;&gt;
&gt;&gt;&gt; o.lastName
u'Smith'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11598800</id><snippet>new.py</snippet></ROW><ROW><id>11598800</id><snippet>Documents</snippet></ROW><ROW><id>11598800</id><snippet>axes.py</snippet></ROW><ROW><id>11598800</id><snippet>new</snippet></ROW><ROW><id>11598800</id><snippet>new.py</snippet></ROW><ROW><id>11598800</id><snippet>new</snippet></ROW><ROW><id>11598928</id><snippet>&gt;&gt;&gt; l = ['1\t2,3\t4,5', '61\t7,8\t9,0']
&gt;&gt;&gt; [[i[0]]+[e.split(',') for e in i[1:]] for i in [x.split() for x in l]]
[['1', ['2', '3'], ['4', '5']], ['61', ['7', '8'], ['9', '0']]]
</snippet></ROW><ROW><id>11599261</id><snippet>lst = zip(list1, list2, list3)

print(lst[0])
&gt;&gt;&gt; ('slide1', 1, 'banana')

# in case you need a list, not a tuple
slide1 = list(lst[0])
</snippet></ROW><ROW><id>11599344</id><snippet>import sqlite3
conn = sqlite3.connect('Database/testDB.db')
</snippet></ROW><ROW><id>11599344</id><snippet>sqlite3</snippet></ROW><ROW><id>11599344</id><snippet>sqlite3</snippet></ROW><ROW><id>11599538</id><snippet>class LoginPage(object):

    def __init__(self, testcase):
        self.tc = testcase

    def login(self, username, password, at_login_page=False):
        if not at_login_page:
            self.tc.browser.get(self.tc.ROOT + '/login')

        self.tc.browser.find_element_by_id('id_username').send_keys(username)
        self.tc.browser.find_element_by_id('id_password').send_keys(password)
        login_button = self.tc.browser.find_element_by_id('login-button').click()
</snippet></ROW><ROW><id>11599538</id><snippet>    login_page = site_pages.LoginPage(self)
    login_page.login(self.username, self.password)
</snippet></ROW><ROW><id>11599812</id><snippet>STATICFILES_DIRS = (os.path.join(STATIC_ROOT, ''),)
</snippet></ROW><ROW><id>11599812</id><snippet>site_media</snippet></ROW><ROW><id>11599812</id><snippet>images'</snippet></ROW><ROW><id>11599812</id><snippet>127.0.0.1:8000/static/images/something.jpg</snippet></ROW><ROW><id>11599812</id><snippet>.../site_media/images/images/something.jpg</snippet></ROW><ROW><id>11600399</id><snippet>site-packages</snippet></ROW><ROW><id>11600399</id><snippet>python -m site
</snippet></ROW><ROW><id>11600399</id><snippet>python -m site --help
</snippet></ROW><ROW><id>11600399</id><snippet>sys.path</snippet></ROW><ROW><id>11600399</id><snippet>python -c "import sys; print ('\n').join(sys.path)"
</snippet></ROW><ROW><id>11600752</id><snippet>parse_qs(urlparse(url).query, keep_blank_values=True)
# {'param2': ['2'], 'param1': ['']}
</snippet></ROW><ROW><id>11600836</id><snippet>class Test:

  def get_dynamic_value():
    return 'dynamic'

  dynamic_value = get_dynamic_value()
</snippet></ROW><ROW><id>11600836</id><snippet>class Test:

  def get_dynamic_value():
    return 'dynamic'

  dynamic_value = get_dynamic_value()
  del get_dynamic_value
</snippet></ROW><ROW><id>11600836</id><snippet>class Test:

  @property
  def dynamic_value(self):
    return 'dynamic'
</snippet></ROW><ROW><id>11600892</id><snippet>bar = dict(foo)
</snippet></ROW><ROW><id>11600892</id><snippet>bar = foo.copy()
</snippet></ROW><ROW><id>11601233</id><snippet>C:\Python32\python.exe C:\Users\Sam\Desktop\Test.py for python 3+
C:\Python27\python.exe C:\Users\Sam\Desktop\Test.py for python 2
</snippet></ROW><ROW><id>11601267</id><snippet>boost::python</snippet></ROW><ROW><id>11601357</id><snippet>self.ui.PlotWidget.canvas.draw()
</snippet></ROW><ROW><id>11601466</id><snippet># Read rawImage from a file, but in reality will have it from TCPServer
f = open('frame.png', "rb")
rawImage = f.read()
f.close()

# Convert rawImage to Mat
pilImage = Image.open(StringIO(rawImage));
npImage = np.array(pilImage)
matImage = cv.fromarray(npImage)

#show it
cv.NamedWindow('display')
cv.MoveWindow('display', 10, 10)
cv.ShowImage('display', matImage)
cv. WaitKey(0) 
</snippet></ROW><ROW><id>11601545</id><snippet>__dict__</snippet></ROW><ROW><id>11601545</id><snippet>__slots__ = []
</snippet></ROW><ROW><id>11601613</id><snippet>get_readonly_fields</snippet></ROW><ROW><id>11601613</id><snippet>class MyAdmin(admin.ModelAdmin):

    def get_readonly_fields(self, request, obj=None):
        if obj and obj.another_field == 'cant_change_amount':
            return self.readonly_fields + ['amount']
        return self.readonly_fields
</snippet></ROW><ROW><id>11601658</id><snippet>\s*</snippet></ROW><ROW><id>11601658</id><snippet>pattern = r'(?&lt;=\d)\s*,\s*(?=\d)'
</snippet></ROW><ROW><id>11601776</id><snippet>void buffrepr(const char * buff, const int size, char * result, const int resultSize)
{
  while (size &amp;&amp; resultSize)
  {
    int print_count = snprintf(result, resultSize, "%X", *buff); 
    resultSize -= print_count;
    result += print_count;
    --size;
    ++buff;

    if (size &amp;&amp; resultSize)
    {
      int print_count = snprintf(result, resultSize, " ");
      resultSize -= print_count;
      result += print_count;
    }
  }
}
</snippet></ROW><ROW><id>11601991</id><snippet>zipped = zip(filename, human_rating, …)
zipped.sort()
for row in zipped:
     print "{:&gt;6s}{:&gt;5.1f}…".format(*row)
</snippet></ROW><ROW><id>11601991</id><snippet>filename, human_rating, … = zip(*zipped)
</snippet></ROW><ROW><id>11602224</id><snippet>blob()</snippet></ROW><ROW><id>11602224</id><snippet>blob</snippet></ROW><ROW><id>11602238</id><snippet>update_data</snippet></ROW><ROW><id>11602238</id><snippet>@classmethod</snippet></ROW><ROW><id>11602238</id><snippet>self</snippet></ROW><ROW><id>11602238</id><snippet>update_data</snippet></ROW><ROW><id>11602238</id><snippet>@classmethod</snippet></ROW><ROW><id>11602405</id><snippet>def cap(s, l):
    return s if len(s)&lt;=l else s[0:l-3]+'...'
</snippet></ROW><ROW><id>11602894</id><snippet>mod_wsgi.so</snippet></ROW><ROW><id>11602894</id><snippet>/Program Files/Apache Software Foundation/Apache22/modules</snippet></ROW><ROW><id>11602894</id><snippet>httpd.conf</snippet></ROW><ROW><id>11602894</id><snippet>LoadModule ...</snippet></ROW><ROW><id>11602894</id><snippet>LoadModule wsgi_module modules/mod_wsgi.so</snippet></ROW><ROW><id>11602894</id><snippet>apache</snippet></ROW><ROW><id>11602894</id><snippet>django.wsgi</snippet></ROW><ROW><id>11602894</id><snippet>apache_mydjango.conf</snippet></ROW><ROW><id>11602894</id><snippet>httpd.conf</snippet></ROW><ROW><id>11602894</id><snippet>Include "d:/projects/mysite/apache_django_wsgi.conf"</snippet></ROW><ROW><id>11602894</id><snippet>django.wsgi</snippet></ROW><ROW><id>11602894</id><snippet>import os, sys

sys.path.append('d:/projects/mysite')
os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
</snippet></ROW><ROW><id>11602894</id><snippet>apache_djang_wsgi.conf</snippet></ROW><ROW><id>11602894</id><snippet>Alias /images/ "d:/projects/mysite/templates/images/"
&lt;Directory "d:/projects/mysite/images&gt;
Order allow,deny
Allow from all
&lt;/Directory&gt;

WSGIScriptAlias / "d:/projects/mysite/apache/django.wsgi"

&lt;Directory "d:/projects/mysite/apache"&gt;
Allow from all
&lt;/Directory&gt;

&lt;VirtualHost *:80&gt;
    DocumentRoot d:/projects/mysite
    ServerName 127.0.0.1

&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>11602894</id><snippet>mysite/
        mysite/
                 settings.py
                 urls.py, wsgi.py.
        manage.py
        &lt;apache&gt; / apache_django_wsgi.conf, django.wsgi
</snippet></ROW><ROW><id>11602947</id><snippet>def foo():
    with settings(host_string='apycat'):
        run(...)
</snippet></ROW><ROW><id>11602947</id><snippet>def bar():
    run(...)

def foo():
    execute(bar, hosts=['apycat'])
</snippet></ROW><ROW><id>11603028</id><snippet>env.hosts = ['user@host1.com', 'user@host2.com']

@task
def test():
    print '%(user)s@%(host)s' % (env)

    if env.host == 'host1.com':
        id = 1
    elif ...

    run('echo "%s"' % (id))
</snippet></ROW><ROW><id>11603079</id><snippet>app = webapp2.WSGIApplication(debug = os.environ['SERVER_SOFTWARE'].startswith('Dev'), config=config.webapp2_config)

app.error_handlers[404] = handle_error
app.error_handlers[500] = handle_error
routes.add_routes(app)
</snippet></ROW><ROW><id>11603093</id><snippet>import re

fp = open("csv.txt", "r")
while True:
    line = fp.readline()
    if '' == line:
            break
    line    = line.strip()
    fields  = re.split("\s+", fp.readline().strip())
    print "\"%s\",%s,%s" % ( line, fields[0], fields[1] )
fp.close()
</snippet></ROW><ROW><id>11603093</id><snippet>"Content of odd line",Number1,Number2
</snippet></ROW><ROW><id>11603148</id><snippet>IS_IN_SET</snippet></ROW><ROW><id>11603148</id><snippet>IS_IN_DB</snippet></ROW><ROW><id>11603148</id><snippet>options()</snippet></ROW><ROW><id>11603148</id><snippet>&gt;&gt;&gt; db.mytable.myfield.requires = IS_IN_SET(['apple', 'banana', 'orange'])
&gt;&gt;&gt; print db.mytable.myfield.requires.options()
[('', ''), ('apple', 'apple'), ('banana', 'banana'), ('orange', 'orange')]
</snippet></ROW><ROW><id>11603159</id><snippet>self.data_stream = struct.unpack_from('&gt;{}H'.format(self.rows*self.columns), data_file)
</snippet></ROW><ROW><id>11603159</id><snippet>for rowno, cols in enumerate(self.data_stream[i:i+self.columns] for i in xrange(0, len(self.data_stream), self.columns)):
    for colno, col in enumerate(cols):
        # col == value, (rowno, colno) = index
        if col == 0:
            pass # do something
        else:
            pass # do something else
</snippet></ROW><ROW><id>11603248</id><snippet>s = 'a b   c   d      e'
</snippet></ROW><ROW><id>11603248</id><snippet>' '.join(s.split())
'a b c d e'
</snippet></ROW><ROW><id>11603248</id><snippet>['a', 'b', 'c', 'd', 'e']</snippet></ROW><ROW><id>11603248</id><snippet>split()</snippet></ROW><ROW><id>11603378</id><snippet>import</snippet></ROW><ROW><id>11603378</id><snippet>.py</snippet></ROW><ROW><id>11603378</id><snippet>.py[co]</snippet></ROW><ROW><id>11603378</id><snippet>1/3 == int(0)</snippet></ROW><ROW><id>11603378</id><snippet>QQ(1)/QQ(3)</snippet></ROW><ROW><id>11603378</id><snippet>from sage.all import *</snippet></ROW><ROW><id>11603378</id><snippet>load</snippet></ROW><ROW><id>11603378</id><snippet>attach</snippet></ROW><ROW><id>11603378</id><snippet>.py</snippet></ROW><ROW><id>11603378</id><snippet>.sage</snippet></ROW><ROW><id>11603378</id><snippet>.pyx</snippet></ROW><ROW><id>11603378</id><snippet>.spyx</snippet></ROW><ROW><id>11603378</id><snippet>.m</snippet></ROW><ROW><id>11603378</id><snippet>.py</snippet></ROW><ROW><id>11603378</id><snippet>y=17</snippet></ROW><ROW><id>11603378</id><snippet>y</snippet></ROW><ROW><id>11603378</id><snippet>int</snippet></ROW><ROW><id>11603378</id><snippet>.sage</snippet></ROW><ROW><id>11603378</id><snippet>y=17</snippet></ROW><ROW><id>11603378</id><snippet>y</snippet></ROW><ROW><id>11603378</id><snippet>Integer</snippet></ROW><ROW><id>11603378</id><snippet>import jbom</snippet></ROW><ROW><id>11603378</id><snippet>load</snippet></ROW><ROW><id>11603378</id><snippet>.sage</snippet></ROW><ROW><id>11603378</id><snippet>sage.all</snippet></ROW><ROW><id>11603513</id><snippet>&lt;li class="pager-last last"&gt;
&lt;a href="/software-licenses/gpl?page=4" title="Go to last page"&gt;last »&lt;/a&gt;
&lt;/li&gt;
</snippet></ROW><ROW><id>11603513</id><snippet>from urlparse import urlparse, parse_qs
for pageno in xrange(1, int(parse_qs(urlparse(url).query)['page'][0]) + 1):
    pass # do something useful here like building a url string with pageno
</snippet></ROW><ROW><id>11603616</id><snippet>friend_x</snippet></ROW><ROW><id>11603616</id><snippet>Relationship</snippet></ROW><ROW><id>11603616</id><snippet>through</snippet></ROW><ROW><id>11603616</id><snippet>class Relationship(models.Model):
    social_clique = models.ForeignKey(Social_Clique)
    friend_0 = models.ForeignKey(Friend, related_name='friend_0')
    friend_1 = models.ForeignKey(Friend, related_name='friend_1')

class Friend(models.Model):
    ... other fields ...
    friends = models.ManyToManyField('Friend', through=Relationship)
</snippet></ROW><ROW><id>11603616</id><snippet>me</snippet></ROW><ROW><id>11603616</id><snippet>my_friend</snippet></ROW><ROW><id>11603616</id><snippet>Relationship.objects.get(friend_0=me, friend_1=my_friend)
</snippet></ROW><ROW><id>11603616</id><snippet>me.friend_0.filter(friend1=my_friend)
</snippet></ROW><ROW><id>11603616</id><snippet>me.friends.all()
</snippet></ROW><ROW><id>11603632</id><snippet>lats</snippet></ROW><ROW><id>11603632</id><snippet>lons</snippet></ROW><ROW><id>11603632</id><snippet>for page in files:
    file = open(dir + '/' + page)
    lats = []
    lons = []
    for line in file:
        ...
</snippet></ROW><ROW><id>11603764</id><snippet>sheet.cell_type(rowno, colno) in (xlrd.XL_CELL_EMPTY, xlrd.XL_CELL_BLANK)</snippet></ROW><ROW><id>11603764</id><snippet>u''</snippet></ROW><ROW><id>11603764</id><snippet>row_values</snippet></ROW><ROW><id>11603764</id><snippet>row(n)</snippet></ROW><ROW><id>11603764</id><snippet>Cell</snippet></ROW><ROW><id>11603764</id><snippet>.value</snippet></ROW><ROW><id>11603764</id><snippet>.cell_type</snippet></ROW><ROW><id>11603769</id><snippet>wsgi</snippet></ROW><ROW><id>11604152</id><snippet>Timer</snippet></ROW><ROW><id>11604152</id><snippet>timing.isExpired</snippet></ROW><ROW><id>11604152</id><snippet>import time
TIMEOUT = 60 * 5

class Timer ():
    def __init__(self):
        self.timeout = time.time()+TIMEOUT
    def isExpired (self):
        return time.time() &gt; self.timeout


def main():
    timing = Timer()
    while 1:
        if timing.isExpired():
            print "Expired"
            return
        else:
            print "Not expired"
            print "sleeping for 1 second"
            time.sleep(1)
</snippet></ROW><ROW><id>11604248</id><snippet>code</snippet></ROW><ROW><id>11604248</id><snippet>class MainPage(webapp.RequestHandler):
    def get(self):
        content = Content.get(…)
        self.response.headers['Content-Type'] = 'application/octet-stream'
        self.response.out.write(content.code)
</snippet></ROW><ROW><id>11604248</id><snippet>Content-Type</snippet></ROW><ROW><id>11604248</id><snippet>Content-Disposition</snippet></ROW><ROW><id>11604248</id><snippet>headers['Content-Disposition'] = 'attachment; filename=some_filename.txt'</snippet></ROW><ROW><id>11604426</id><snippet>yield</snippet></ROW><ROW><id>11604426</id><snippet>for thing</snippet></ROW><ROW><id>11604426</id><snippet>for thing in root[thing_field]:
    yield thing
</snippet></ROW><ROW><id>11604426</id><snippet>def blah():
    for i in xrange(5):
        yield i + 3

numbers = blah()
print next(numbers)
# lots of other code here...
# now we need the next value
print next(numbers)
</snippet></ROW><ROW><id>11604576</id><snippet>- if there are rows with that y:
    - sort all rows with that y in that page using their x
    - start with j = 0, and for each text chunk:
       - write (x - j) spaces
       - write the chunk
       - set j equal to x plus the length of the chunk
- output a carriage return and continue
</snippet></ROW><ROW><id>11604656</id><snippet>sudo port select --set python python27</snippet></ROW><ROW><id>11604661</id><snippet>size, w, h</snippet></ROW><ROW><id>11604661</id><snippet>VIDEORESIZE</snippet></ROW><ROW><id>11604709</id><snippet>return</snippet></ROW><ROW><id>11604747</id><snippet>.pythonrc.py</snippet></ROW><ROW><id>11604747</id><snippet>import atexit 
import os 
import readline 
import rlcompleter 

history = os.path.expanduser('~/.python_history') 
readline.read_history_file(history) 
readline.parse_and_bind('tab: complete')
# The added line
readline.set_history_length(200)
atexit.register(readline.write_history_file, history)
</snippet></ROW><ROW><id>11604767</id><snippet>    elif i == "1":
        if current.right is None:
            current.right = BSTNode(i)
        current = current.right
    elif i == "0":
        if root.left is None:
            current.left = BSTNode(i)
        current = current.left
</snippet></ROW><ROW><id>11604833</id><snippet>and</snippet></ROW><ROW><id>11604833</id><snippet>return username and USER_RE.match(username)
</snippet></ROW><ROW><id>11604833</id><snippet>if username:
    return USER_RE.match(username)
else:
    return username
</snippet></ROW><ROW><id>11604833</id><snippet>username</snippet></ROW><ROW><id>11604833</id><snippet>match</snippet></ROW><ROW><id>11604833</id><snippet>None</snippet></ROW><ROW><id>11604833</id><snippet>valid_username</snippet></ROW><ROW><id>11604837</id><snippet>/rest/</snippet></ROW><ROW><id>11604837</id><snippet>class ApplicationRoot(object):

    def __getitem__(self, name):
        if name == "rest":
            return RestAPIRoot(parent=self, name=name)
        ...
</snippet></ROW><ROW><id>11604837</id><snippet>containment</snippet></ROW><ROW><id>11604837</id><snippet>GET /users/123</snippet></ROW><ROW><id>11604837</id><snippet>GET /users/123/json</snippet></ROW><ROW><id>11604837</id><snippet>POST /users/123</snippet></ROW><ROW><id>11604837</id><snippet>POST /users/123/json</snippet></ROW><ROW><id>11604837</id><snippet>GET /users/123/xml</snippet></ROW><ROW><id>11604837</id><snippet>GET /users/123</snippet></ROW><ROW><id>11604837</id><snippet>GET /users/123?format=json</snippet></ROW><ROW><id>11604837</id><snippet>request_param</snippet></ROW><ROW><id>11604837</id><snippet>xhr</snippet></ROW><ROW><id>11604837</id><snippet>HTTP_X_REQUESTED_WITH</snippet></ROW><ROW><id>11604837</id><snippet>accept</snippet></ROW><ROW><id>11604837</id><snippet>HTTP_ACCEPT</snippet></ROW><ROW><id>11604995</id><snippet>frames[f]</snippet></ROW><ROW><id>11604995</id><snippet>int_val_list = [int(value) for value in frames[f]]
</snippet></ROW><ROW><id>11605024</id><snippet>&gt;&gt;&gt; print [len(s) for s in 'a0ddb0gf0'.split('0')]
[1, 3, 2, 0]
</snippet></ROW><ROW><id>11605024</id><snippet>&gt;&gt;&gt; print [len(s) for s in 'a0ddb0gf0'.split('0') if s]
[1, 3, 2]
</snippet></ROW><ROW><id>11605167</id><snippet>x[:,1]</snippet></ROW><ROW><id>11605167</id><snippet>x[:,2] *= x[:,1]</snippet></ROW><ROW><id>11605167</id><snippet>x[:,1] = np.where( x[:,0] &gt; 5, 0, 4 )</snippet></ROW><ROW><id>11605198</id><snippet>for k, v in my_dict.items():
    my_dict[k] = str(sum(int(c) for c in v))
</snippet></ROW><ROW><id>11605259</id><snippet>'%f' % your_var
</snippet></ROW><ROW><id>11605259</id><snippet>'%0.10f' % your_var
</snippet></ROW><ROW><id>11605448</id><snippet>-e</snippet></ROW><ROW><id>11605448</id><snippet>├── projectname
│   ├── projectname
│   │   ├── __init__.py
│   │   └── anotherfile.py
│   └── setup.py
</snippet></ROW><ROW><id>11605448</id><snippet>projectname</snippet></ROW><ROW><id>11605448</id><snippet>Ansible</snippet></ROW><ROW><id>11605448</id><snippet>-e</snippet></ROW><ROW><id>11605448</id><snippet>pip install -e git://github.com/lorin/ansible.git#egg=ansible
</snippet></ROW><ROW><id>11605463</id><snippet>web.config.debug = False
</snippet></ROW><ROW><id>11605463</id><snippet>db.printing = False
</snippet></ROW><ROW><id>11605491</id><snippet>item_sizes = [ITEM_SIZE_SMALL, ITEM_SIZE_MEDIUM, ITEM_SIZE_LARGE]

def get_item_weights(distance):
    return [1010000 - distance, 1000000 - abs((505000-distance)*2), distance]
</snippet></ROW><ROW><id>11605491</id><snippet>import random

random.seed()

def get_random_index(weights):
    n = random.randint(1, sum(weights))
    cumsum = 0
    for index, weight in enumerate(weights):
        cumsum += weight
        if n &lt;= cumsum:
            return index

def get_random_size(distance):
    return item_sizes[get_random_index(get_item_weights(distance))]
</snippet></ROW><ROW><id>11605491</id><snippet>itemSize = get_random_size(distanceToRing)
</snippet></ROW><ROW><id>11605803</id><snippet>zip</snippet></ROW><ROW><id>11605803</id><snippet>out.writerows(zip(*data))
</snippet></ROW><ROW><id>11605803</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>11605803</id><snippet>''</snippet></ROW><ROW><id>11605919</id><snippet>from Tkinter import *
import tkFileDialog

root = Tk()

top = Toplevel()
top.wm_attributes('-topmost', 1)
top.withdraw()
top.protocol('WM_DELETE_WINDOW', top.withdraw)

def do_dialog():
    oldFoc = top.focus_get()
    print tkFileDialog.askdirectory()    
    if oldFoc: oldFoc.focus_set()

b0 = Button(top, text='choose dir', command=do_dialog)
b0.pack(padx=100, pady=100)

def popup():
    top.deiconify()
    b0.focus_set()

b1 = Button(root, text='popup', command=popup)
b1.pack(padx=100, pady=100)
root.mainloop()
</snippet></ROW><ROW><id>11606031</id><snippet>import zipfile
import StringIO

output = StringIO.StringIO()

with zipfile.ZipFile(output, 'w') as myzip:
    myzip.writestr('file1.txt', 'aaaaaaaaa')
    myzip.writestr('file2.txt', 'bbbbbbbbb')
    myzip.writestr('file3.txt', 'ccccccccc')
</snippet></ROW><ROW><id>11606031</id><snippet>output.getvalue()</snippet></ROW><ROW><id>11606031</id><snippet>Content-type: application/zip
Content-disposition: attachment; filename=test.zip
</snippet></ROW><ROW><id>11606151</id><snippet>?file</snippet></ROW><ROW><id>11606151</id><snippet>fo &lt;- file('foo.txt', 'r+') // see  ?file for more details on the parameters
</snippet></ROW><ROW><id>11606151</id><snippet>fo</snippet></ROW><ROW><id>11606151</id><snippet>?file</snippet></ROW><ROW><id>11606151</id><snippet>See Also</snippet></ROW><ROW><id>11606151</id><snippet>Examples</snippet></ROW><ROW><id>11606151</id><snippet>See Also</snippet></ROW><ROW><id>11606151</id><snippet>readLines</snippet></ROW><ROW><id>11606151</id><snippet>readBin</snippet></ROW><ROW><id>11606151</id><snippet>scan</snippet></ROW><ROW><id>11606151</id><snippet>seek</snippet></ROW><ROW><id>11606151</id><snippet>?seek</snippet></ROW><ROW><id>11606151</id><snippet>seek</snippet></ROW><ROW><id>11606151</id><snippet>where = NA</snippet></ROW><ROW><id>11606151</id><snippet>seek(fo)
</snippet></ROW><ROW><id>11606151</id><snippet>?file</snippet></ROW><ROW><id>11606151</id><snippet>??file</snippet></ROW><ROW><id>11606199</id><snippet>tag['onmouseover']
</snippet></ROW><ROW><id>11606215</id><snippet>range(n)
</snippet></ROW><ROW><id>11606243</id><snippet>c</snippet></ROW><ROW><id>11606243</id><snippet>f</snippet></ROW><ROW><id>11606243</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>11606243</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list1
['a', 'a', 'b', 'b', 'c', 'c', 'f', 'f', 'd', 'd', 'e', 'e', 'f', 'f', 'g', 'g', 'c', 'c']
&gt;&gt;&gt; [k for k, g in itertools.groupby(list1)]
['a', 'b', 'c', 'f', 'd', 'e', 'f', 'g', 'c']
</snippet></ROW><ROW><id>11606608</id><snippet>script</snippet></ROW><ROW><id>11606608</id><snippet>write_script</snippet></ROW><ROW><id>11606608</id><snippet>encode('ascii')</snippet></ROW><ROW><id>11606608</id><snippet>cxfreeze</snippet></ROW><ROW><id>11606608</id><snippet>setuptools</snippet></ROW><ROW><id>11606608</id><snippet>entry_points</snippet></ROW><ROW><id>11606608</id><snippet>setup.py</snippet></ROW><ROW><id>11606608</id><snippet>scripts</snippet></ROW><ROW><id>11606608</id><snippet>entry_points={'console_scripts':['helloscript = helloscript:main'] }
</snippet></ROW><ROW><id>11606608</id><snippet>console_script</snippet></ROW><ROW><id>11606608</id><snippet>helloscript.py</snippet></ROW><ROW><id>11606608</id><snippet>exe</snippet></ROW><ROW><id>11606608</id><snippet>Script</snippet></ROW><ROW><id>11606608</id><snippet>cxfreeze</snippet></ROW><ROW><id>11606871</id><snippet>war</snippet></ROW><ROW><id>11606871</id><snippet>http://myserver/add_options/1</snippet></ROW><ROW><id>11606871</id><snippet>1</snippet></ROW><ROW><id>11606871</id><snippet>war</snippet></ROW><ROW><id>11606871</id><snippet>war</snippet></ROW><ROW><id>11606871</id><snippet>class base_option(models.Model):
    warval = models.ForeignKey(war)
    caption = models.CharField(max_length=20)
    user = models.ForeignKey(User)

class text_option(base_option):
    text = models.TextField(blank=True,null=True)

class url_option(base_option):
    url = models.URLField(blank=True,null=True)
</snippet></ROW><ROW><id>11606910</id><snippet>&lt;field_name&gt;__&lt;filter_name&gt;=&lt;value_or_values&gt;</snippet></ROW><ROW><id>11606910</id><snippet>box=&lt;number&gt;,&lt;number&gt;,...,&lt;number&gt;</snippet></ROW><ROW><id>11606910</id><snippet>box__exact=...</snippet></ROW><ROW><id>11606910</id><snippet>box</snippet></ROW><ROW><id>11606910</id><snippet>location</snippet></ROW><ROW><id>11606910</id><snippet>withinbox</snippet></ROW><ROW><id>11606910</id><snippet>location__withinbox=&lt;values&gt;</snippet></ROW><ROW><id>11606910</id><snippet>obj_get</snippet></ROW><ROW><id>11606910</id><snippet>obj_get_list</snippet></ROW><ROW><id>11606910</id><snippet>build_filters</snippet></ROW><ROW><id>11606910</id><snippet>{ 'withinbox' : 'point__within' }
</snippet></ROW><ROW><id>11606910</id><snippet>Polygon</snippet></ROW><ROW><id>11606910</id><snippet>apply_filters</snippet></ROW><ROW><id>11607542</id><snippet>URLError</snippet></ROW><ROW><id>11607542</id><snippet>urlopen</snippet></ROW><ROW><id>11607542</id><snippet>urlopen</snippet></ROW><ROW><id>11607542</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>11608002</id><snippet>FS=""</snippet></ROW><ROW><id>11608002</id><snippet>awk -f foo.awk foo.txt</snippet></ROW><ROW><id>11608002</id><snippet>BEGIN {
    FS=""
    k["A"]=0.2; k["G"]=0.5; k["L"]=0.14; k["M"]=0.70
    k["R"]=0.55; k["C"]=0.48; k["H"]=1.00; k["K"]=0.4
}

/^&gt;/{
    $1=""
    name=$0
    next
}

{
    s=0
    for (i=1; i&lt;=NF; i++) {
      s+=k[$(i)]
    }
    printf "%s - %.3f\n", name, s/NF
}
</snippet></ROW><ROW><id>11608225</id><snippet>subprocess.call(["path/to/app"] + arg)
</snippet></ROW><ROW><id>11608419</id><snippet>let</snippet></ROW><ROW><id>11608419</id><snippet>___ for..in</snippet></ROW><ROW><id>11608419</id><snippet>if ___</snippet></ROW><ROW><id>11608419</id><snippet>..for ___ in...</snippet></ROW><ROW><id>11608419</id><snippet>[ (x,fx) for x,fx in ( (y,f(y) for y in iterable ) if fx ]</snippet></ROW><ROW><id>11608419</id><snippet>[(x,f(x) for x in iterable if f(x)]</snippet></ROW><ROW><id>11608419</id><snippet>((y,fy) for y in iterable)</snippet></ROW><ROW><id>11608419</id><snippet>x,fx</snippet></ROW><ROW><id>11608419</id><snippet>x,fx,ffx</snippet></ROW><ROW><id>11608419</id><snippet>x,fx</snippet></ROW><ROW><id>11608419</id><snippet>def xfx(iterable):
    for x in iterable:
        fx = f(x)
        if fx:
            yield (x,fx)

xfx(exampleIterable)
</snippet></ROW><ROW><id>11608419</id><snippet>f</snippet></ROW><ROW><id>11608419</id><snippet>[ (x,f(x)) for x in iterable if f(x) ]
</snippet></ROW><ROW><id>11608419</id><snippet>f</snippet></ROW><ROW><id>11608419</id><snippet>@memoized</snippet></ROW><ROW><id>11608419</id><snippet>f</snippet></ROW><ROW><id>11608419</id><snippet>filterTrue(
    (lambda fx=f(x): (x,fx) if fx else None)() for x in iterable
)
</snippet></ROW><ROW><id>11608419</id><snippet>None</snippet></ROW><ROW><id>11608455</id><snippet>a = doc.getElementsByTagName('string')
for i in range(len(a)):
    if i == 0:
        a[i].firstChild.nodeValue = myvalue1
    if i == 7:
        a[i].firstChild.nodeValue = myvalue2
    if i == 9:
        a[i].firstChild.nodeValue = myvalue3
</snippet></ROW><ROW><id>11608544</id><snippet>list(set(['bad']))
</snippet></ROW><ROW><id>11608565</id><snippet>import pygame
import sys
import time

pygame.init()

size = (pygame.display.Info().current_w, pygame.display.Info().current_h)
black = 0, 0, 0

screen = pygame.display.set_mode(size)

ball = pygame.image.load("ball.gif")
ballrect = ball.get_rect()

screen.fill(black)
screen.blit(ball, ballrect)
pygame.display.flip()

time.sleep(5)
</snippet></ROW><ROW><id>11608565</id><snippet>SDL_NOMOUSE=1 python ./ball.py
</snippet></ROW><ROW><id>11608694</id><snippet>.__globals__</snippet></ROW><ROW><id>11608694</id><snippet>all()</snippet></ROW><ROW><id>11608694</id><snippet>any()</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>m</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>m.unit()</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>m.bind()</snippet></ROW><ROW><id>11608694</id><snippet>"bind"</snippet></ROW><ROW><id>11608694</id><snippet>.__dict__</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>m=</snippet></ROW><ROW><id>11608694</id><snippet>*args</snippet></ROW><ROW><id>11608694</id><snippet>**kwargs</snippet></ROW><ROW><id>11608694</id><snippet>"m"</snippet></ROW><ROW><id>11608694</id><snippet>class Monad(object):
    def __init__(self, *args, **kwargs):
        # init from each arg.  Try three things:
        # 0) if it has a ".__dict__" attribute, update from that.
        # 1) if it looks like a key/value tuple, insert value for key.
        # 2) else, just see if the whole thing is a dict or similar.
        # Other instances of class Monad() will be handled by (0)
        for x in args:
            if hasattr("__dict__", x):
                self.__dict__.update(x.__dict__)
            else:
                try:
                    key, value = x
                    self.__dict__[key] = value
                except TypeError:
                    self.__dict__.update(x)
        self.__dict__.update(kwargs)


def __identity(x):
    return x

def __callt(v, f):
    return f(v)

def __callt_maybe(v, f):
    if v:
        return f(v)
    else:
        return None

m_identity = Monad(bind=__callt, unit=__identity)
m_maybe = Monad(bind=__callt_maybe, unit=__identity)

def m_chain(*fns, **kwargs):
    """what this function does is not relevant to the question"""
    m = kwargs.get("m", m_identity)
    def m_chain_link(chain_expr, step):
        return lambda v: m.bind(chain_expr(v), step)
    return reduce(m_chain_link, fns, m.unit)

print(m_chain(lambda x: 2*x, lambda x:2*x, m=m_identity)(2)) # prints 8
print(m_chain(lambda x: None, lambda x:2*x, m=m_maybe)(2)) # prints None
</snippet></ROW><ROW><id>11608694</id><snippet>m_chain()</snippet></ROW><ROW><id>11608694</id><snippet>m = kwargs.get("m", m_identity)</snippet></ROW><ROW><id>11608694</id><snippet>m_identity</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>m.some_name()</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>m</snippet></ROW><ROW><id>11608694</id><snippet>some_name</snippet></ROW><ROW><id>11608694</id><snippet>.__dict__</snippet></ROW><ROW><id>11608694</id><snippet>some_name</snippet></ROW><ROW><id>11608694</id><snippet>globals()</snippet></ROW><ROW><id>11608694</id><snippet>m.some_name()</snippet></ROW><ROW><id>11608694</id><snippet>m</snippet></ROW><ROW><id>11608694</id><snippet>some_name</snippet></ROW><ROW><id>11608694</id><snippet>some_name</snippet></ROW><ROW><id>11608694</id><snippet>m</snippet></ROW><ROW><id>11608694</id><snippet>some_name</snippet></ROW><ROW><id>11608694</id><snippet>m.</snippet></ROW><ROW><id>11608694</id><snippet>.__getattr__()</snippet></ROW><ROW><id>11608694</id><snippet>sys._getframe()</snippet></ROW><ROW><id>11608694</id><snippet>.__getattr__()</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>name</snippet></ROW><ROW><id>11608694</id><snippet>.__dict__</snippet></ROW><ROW><id>11608694</id><snippet>sys._getframe(1).f_locals</snippet></ROW><ROW><id>11608694</id><snippet>globals()</snippet></ROW><ROW><id>11608694</id><snippet>Monad</snippet></ROW><ROW><id>11608694</id><snippet>def __getattr__(self, name):
    # if __getattr__() is being called, locals() were already checked
    d = sys._getframe(1).f_locals
    if name in d:
        return d[name]

    d = globals()
    if name in d:
        return d[name]

    mesg = "name '%s' not found in monad, locals, or globals" % name
    raise NameError, mesg
</snippet></ROW><ROW><id>11609209</id><snippet>ast</snippet></ROW><ROW><id>11609209</id><snippet>ast.get_docstring</snippet></ROW><ROW><id>11609209</id><snippet>root = ast.parse('''
def foo():
    """the foo function"""
    pass
''')
for node in ast.walk(root):
    if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.Module)):
        if (node.body and isinstance(node.body[0], ast.Expr) and
            isinstance(node.body[0].value, ast.Str)):
            print node.body[0].value.lineno, node.body[0].value.s
</snippet></ROW><ROW><id>11609209</id><snippet>node.body[1].lineno</snippet></ROW><ROW><id>11609209</id><snippet>pass</snippet></ROW><ROW><id>11609569</id><snippet>None</snippet></ROW><ROW><id>11609569</id><snippet>(0, None)</snippet></ROW><ROW><id>11609569</id><snippet>(0, 1)</snippet></ROW><ROW><id>11609569</id><snippet>(x if x is not None else y for x,y in my_data)
</snippet></ROW><ROW><id>11609569</id><snippet>&gt;&gt;&gt; my_data = ((3, 4), (None, 4), (5, 8), (None, 1), (0, None), (0, 1))
&gt;&gt;&gt; [x or y for x,y in my_data]
[3, 4, 5, 1, None, 1]
&gt;&gt;&gt; [x if x is not None else y for x,y in my_data]
[3, 4, 5, 1, 0, 0]
</snippet></ROW><ROW><id>11609737</id><snippet>(...)
elif diff == 32 and start_point / 16 == 6 and not board[end_point + 16] and not board[end_point]:
    (...)

elif diff == 32 and start_point / 16 == 1 and not board[end_point + 16] and not board[end_point]:
    (...)
</snippet></ROW><ROW><id>11609737</id><snippet>board</snippet></ROW><ROW><id>11609737</id><snippet>board = [...]

def xy288(field):
    """Converts from (col, row) to [0...127]"""
    return field[0] * 16 + field[1]

def is_white(field):
    board[xy288(field)] &lt;=8

def row(field):
    return field[0]

def col(field):
    return field[1]

def is_pawn(field):
    return board[xy288(field)] % 8 == PAWN

def is_empty(field):
    return board[xy288(field)] == 0

def valid_move(start, end):
    # use tuples for encoding start and end, ie. start = (4,7)
    if is_pawn(start):
        direction = 1 if is_white(start) else -1
        if col(start) == col(end) and \
           row(start) == row(end) + 2*direction and \
           is_empty(end) and \
           is_empty((row(start) + direction, col(start)):
           pass
</snippet></ROW><ROW><id>11609770</id><snippet>&gt;&gt;&gt; 'C:\Program Files\Android\android-sdk\platform-tools\aapt.exe'
'C:\\Program Files\\Android\x07ndroid-sdk\\platform-tools\x07apt.exe'
&gt;&gt;&gt; 'C:\\Program Files\\Android\\android-sdk\\platform-tools\\aapt.exe'
'C:\\Program Files\\Android\\android-sdk\\platform-tools\\aapt.exe'
&gt;&gt;&gt; print 'C:\\Program Files\\Android\\android-sdk\\platform-tools\\aapt.exe'
C:\Program Files\Android\android-sdk\platform-tools\aapt.exe
</snippet></ROW><ROW><id>11609770</id><snippet>\a</snippet></ROW><ROW><id>11609770</id><snippet>r</snippet></ROW><ROW><id>11609770</id><snippet>&gt;&gt;&gt; r'C:\Program Files\Android\android-sdk\platform-tools\aapt.exe'
'C:\\Program Files\\Android\\android-sdk\\platform-tools\\aapt.exe'
</snippet></ROW><ROW><id>11609921</id><snippet>$</snippet></ROW><ROW><id>11609921</id><snippet>:</snippet></ROW><ROW><id>11609921</id><snippet>users:123</snippet></ROW><ROW><id>11609921</id><snippet>%s</snippet></ROW><ROW><id>11610011</id><snippet>point.x</snippet></ROW><ROW><id>11610011</id><snippet>point.y</snippet></ROW><ROW><id>11610011</id><snippet>point[0], point[1]</snippet></ROW><ROW><id>11610011</id><snippet>point</snippet></ROW><ROW><id>11610011</id><snippet>x, y = get_point(foo)
</snippet></ROW><ROW><id>11610011</id><snippet>point.x</snippet></ROW><ROW><id>11610011</id><snippet>point.y</snippet></ROW><ROW><id>11610011</id><snippet>__dict__</snippet></ROW><ROW><id>11610011</id><snippet>namdetuple</snippet></ROW><ROW><id>11610102</id><snippet>os.execl</snippet></ROW><ROW><id>11610102</id><snippet>exec</snippet></ROW><ROW><id>11610102</id><snippet>FD_CLOEXEC</snippet></ROW><ROW><id>11610102</id><snippet>fcntl</snippet></ROW><ROW><id>11610102</id><snippet>fcntl.fcntl(socket, fcntl.F_SETFD, fcntl.fcntl(socket, fcntl.F_GETFD) | fcntl.FD_CLOEXEC)
</snippet></ROW><ROW><id>11610162</id><snippet>class ContactForm(forms.Form):
    # Everything as before.
    ...

    def clean_recipients(self):
        data = self.cleaned_data['recipients']
        if "fred@example.com" not in data:
            raise forms.ValidationError("You have forgotten about Fred!")

        # Always return the cleaned data, whether you have changed it or
        # not.
        return data
</snippet></ROW><ROW><id>11610355</id><snippet>tags = fields.ToManyField('django_app.api.TagsResource', attribute=lambda bundle: bundle.obj.tags.filter(tags__deleted=0))</snippet></ROW><ROW><id>11610503</id><snippet>mapping = {'encode_b64': base64.encodestring, 'encode_url': urllib.quote_plus, 'encode_hex': lambda s: s.encode('hex')}
</snippet></ROW><ROW><id>11610503</id><snippet>def hexencode(s):
   return s.encode("hex")
mapping = {'encode_b64': base64.encodestring, 'encode_url': urllib.quote_plus, 'encode_hex': hexencode}
</snippet></ROW><ROW><id>11610525</id><snippet>ser = serial.Serial()
ser.baudrate = 19200
ser.port = 0
ser.timeout = 2 #By default, this is set to None
ser.open()
</snippet></ROW><ROW><id>11610701</id><snippet>import pylab as plt

x=[12, 13, 14, 15, 16]
y=[14, 15, 16, 17, 18]

xticks=[12,13,14,15,16]

fig=plt.figure()
ax=fig.add_subplot(111)
ax.plot(x,y,'o-')

ax.set_xticks(xticks)
ax.set_xticklabels(xticks[:-1]+[""])
plt.show()
</snippet></ROW><ROW><id>11610701</id><snippet>for label in ax.get_xticklabels():
    pass
label.set_visible(False)
</snippet></ROW><ROW><id>11610785</id><snippet>PyObject_CallFunction</snippet></ROW><ROW><id>11611205</id><snippet>from collections import defaultdict
data = defaultdict(list)
for line in inmap:
    k, v = (x.strip() for x in line.split('\t'))
    data[k].append(v)
</snippet></ROW><ROW><id>11611205</id><snippet>defaultdict</snippet></ROW><ROW><id>11611205</id><snippet>list</snippet></ROW><ROW><id>11611205</id><snippet>&gt;&gt;&gt; data
defaultdict(&lt;type 'list'&gt;, {'23301': ['Q8NDI1', 'A8K930'], 
'64343': ['H7BXU6', 'Q9H6S1', 'C9JB40'], '266743': ['Q8IUM7']})
</snippet></ROW><ROW><id>11611457</id><snippet>&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="xml" /&gt;

  &lt;xsl:template match="*"&gt;
    &lt;xsl:copy&gt;
    &lt;xsl:copy-of select="@*"/&gt;
    &lt;xsl:apply-templates select="*"/&gt;
      &lt;xsl:sort select="(@name | text())[1]"/&gt;
    &lt;/xsl:apply-templates&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>11611469</id><snippet>try:
    xmlschema.assertValid(xml_to_validate)
except etree.DocumentInvalid, xml_errors:
    pass
print "List of errors:\r\n", xml_errors.error_log
</snippet></ROW><ROW><id>11611749</id><snippet># in urls.py
url(r'^custom-reset/$', 'myapp.views.custom_password_reset', name='custom_password_reset'),

# in views.py
from django.contrib.auth.views import password_reset
def custom_password_reset(request, *args, **kwargs):
    # Do your custom processing of the args and kwargs
    return password_reset(request, *args, **kwargs)
</snippet></ROW><ROW><id>11611774</id><snippet>==</snippet></ROW><ROW><id>11611774</id><snippet>is</snippet></ROW><ROW><id>11611774</id><snippet>intern()</snippet></ROW><ROW><id>11611774</id><snippet>Immutable = basestring, tuple, numbers.Number, frozenset
# ...
if not isinstance(x, Immutable):    # Exclude types known to be immutable
</snippet></ROW><ROW><id>11611946</id><snippet>def a(x=[]):
    x.append(1)
    print x


a()
a()
a()
a()
</snippet></ROW><ROW><id>11611946</id><snippet>[1]
[1, 1]
[1, 1, 1]
[1, 1, 1, 1]
</snippet></ROW><ROW><id>11611946</id><snippet>class LandingPageOverview(ListView):
    model = LandingPage
    context_object_name = 'landingpages'
    template_name = 'landingpage/overview.html'

    @property
    def queryset(self):
        return LandingPage.objects.filter(language=translation.get_language())
</snippet></ROW><ROW><id>11611946</id><snippet>l = LandingPageOverview()
l.queryset
</snippet></ROW><ROW><id>11611971</id><snippet>button</snippet></ROW><ROW><id>11611971</id><snippet>textarea</snippet></ROW><ROW><id>11612033</id><snippet>import base64
import hashlib

future = datetime.datetime.now() + datetime.timedelta(minutes=5)
url = "/securedir/file.txt"
timestamp = str(time.mktime(future.timetuple()))
security = base64.b64encode(hashlib.md5( secret ).digest()).replace('+', '-').replace('/', '_').replace("=", "")
data = str(url) + "?st=" + str(security) + "&amp;e=" + str(timestamp)
</snippet></ROW><ROW><id>11612033</id><snippet>/securedir/file.txt?st=PIrEk4JX5gJPTGmvqJG41g&amp;e=1324527723
</snippet></ROW><ROW><id>11612347</id><snippet>rc('text.latex', preamble='\usepackage{sfmath}')
</snippet></ROW><ROW><id>11612409</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "INSERT INTO addresses VALUES ('1','1','CUCKOO'S NEST','CUCKOO'S NEST STREET');"
&gt;&gt;&gt; def repl(m):
    if m.group(1) in ('(', ',') or m.group(2) in (',', ')'):
        return m.group(0)
    return m.group(1) + "''" + m.group(2)

&gt;&gt;&gt; re.sub("(.)'(.)", repl, s)
"INSERT INTO addresses VALUES ('1','1','CUCKOO''S NEST','CUCKOO''S NEST STREET');"
</snippet></ROW><ROW><id>11612409</id><snippet>re.sub("((?&lt;![(,])'(?![,)]))", "''", s)
</snippet></ROW><ROW><id>11612542</id><snippet>str</snippet></ROW><ROW><id>11612542</id><snippet>for (code,value,unit) in tuples:
    if isinstance(value,str): 
        #Do for this item
    else:
        #Do for each item
        for x in value:
             if isinstance(value,str):
                  #Do for this item
             else:
                  #Do for each item
                  for x in value:
</snippet></ROW><ROW><id>11612611</id><snippet>s = r'''
Lorem ipsum '\n' ipsum lorem

And this is new paragraph.
'''

print(s.replace('\n', ''))

-&gt;"Lorem ipsum '\n' ipsum loremAnd this is new paragraph."
</snippet></ROW><ROW><id>11612624</id><snippet>class=MsoNormal</snippet></ROW><ROW><id>11612624</id><snippet>class="MsoNormal"</snippet></ROW><ROW><id>11612806</id><snippet>setup.py</snippet></ROW><ROW><id>11612806</id><snippet>import mypackage</snippet></ROW><ROW><id>11612806</id><snippet>bin</snippet></ROW><ROW><id>11612806</id><snippet>../mypackage/</snippet></ROW><ROW><id>11612806</id><snippet>bin</snippet></ROW><ROW><id>11612810</id><snippet>x or y</snippet></ROW><ROW><id>11613083</id><snippet>Reward</snippet></ROW><ROW><id>11613083</id><snippet>project</snippet></ROW><ROW><id>11613083</id><snippet>for rw in form_list[2].save(commit=False):
    rw.project = project
    rw.save()
</snippet></ROW><ROW><id>11613184</id><snippet>from itertools import chain

(chunk.group(1).strip(punctuation) 
 for chunk in chain.from_iterable(sep2.finditer(line) for line in file))
</snippet></ROW><ROW><id>11613184</id><snippet>for line in file:
    for chunk in sep2.finditer(line):
        yield chunk.group(1).strip(punctuation)
</snippet></ROW><ROW><id>11613304</id><snippet>def sparse_table_elements(cells, columns, rows):
    ncells = len(cells)
    non_zeros = list()
    for nrow in range(0, ncells, columns):
         row = cells[nrow:nrow+columns]
         for ncol, cell in enumerate(row):
             if cell:
                 non_zeros.append([ncol, nrow, cell])
    return non_zeros
</snippet></ROW><ROW><id>11613304</id><snippet>itertools.product(xrange(self.rows), xrange(self.columns))
</snippet></ROW><ROW><id>11613304</id><snippet>[(0, 0), (0, 1), ...]</snippet></ROW><ROW><id>11613304</id><snippet>stream_data[column + row * self.rows]
</snippet></ROW><ROW><id>11613404</id><snippet>&gt;&gt;&gt; keys = ['k1', 'k2', 'k3', 'k4']
&gt;&gt;&gt; data = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
&gt;&gt;&gt; print dict(zip(keys, zip(*data)))
{'k3': (3, 7, 11, 15), 'k2': (2, 6, 10, 14), 'k1': (1, 5, 9, 13), 'k4': (4, 8, 12, 16)}
</snippet></ROW><ROW><id>11613404</id><snippet>&gt;&gt;&gt; print dict(zip(keys, [list(i) for i in zip(*data)]))
</snippet></ROW><ROW><id>11613404</id><snippet>fromkeys</snippet></ROW><ROW><id>11613404</id><snippet>my_dict = { k : [] for k in keys }
</snippet></ROW><ROW><id>11613404</id><snippet>my_dict</snippet></ROW><ROW><id>11613404</id><snippet>&gt;&gt;&gt; my_dict = dict.fromkeys(keys, [])
&gt;&gt;&gt; my_dict
{'k3': [], 'k2': [], 'k1': [], 'k4': []}
&gt;&gt;&gt; my_dict['k3'].append(1)
&gt;&gt;&gt; my_dict
{'k3': [1], 'k2': [1], 'k1': [1], 'k4': [1]}
</snippet></ROW><ROW><id>11613404</id><snippet>&gt;&gt;&gt; my_dict = dict((k, []) for k in keys )
&gt;&gt;&gt; my_dict
{'k3': [], 'k2': [], 'k1': [], 'k4': []}
&gt;&gt;&gt; my_dict['k3'].append(1)
&gt;&gt;&gt; my_dict
{'k3': [1], 'k2': [], 'k1': [], 'k4': []}
</snippet></ROW><ROW><id>11613500</id><snippet>CountHands(Hands_Played)
print "Number of Hands Played: %s" % Hands_Played
</snippet></ROW><ROW><id>11613500</id><snippet>Hands_Played = CountHands(Hands_Played)
print "Number of Hands Played: %s" % Hands_Played
</snippet></ROW><ROW><id>11613500</id><snippet>0</snippet></ROW><ROW><id>11613500</id><snippet>if "starts." in Hand_History_File:
</snippet></ROW><ROW><id>11613500</id><snippet>if "starts." in line:
</snippet></ROW><ROW><id>11613500</id><snippet>Hand_History_File.close()</snippet></ROW><ROW><id>11613500</id><snippet>with</snippet></ROW><ROW><id>11613500</id><snippet>def CountHands():
    Hands_Played = 0
    with open(r"C:\xxxxx\blah_blah.txt") as Hand_History_File:
       for line in Hand_History_File:  # process file line-by-line
           if "starts." in line:
              Hands_Played +=  1
    return Hands_Played


Hands_Played = CountHands(Hands_Played)
print "Number of Hands Played: %s" % Hands_Played
</snippet></ROW><ROW><id>11613500</id><snippet>r</snippet></ROW><ROW><id>11613500</id><snippet>open</snippet></ROW><ROW><id>11613500</id><snippet>+=</snippet></ROW><ROW><id>11613500</id><snippet>with</snippet></ROW><ROW><id>11613603</id><snippet>FONT</snippet></ROW><ROW><id>11613603</id><snippet>size</snippet></ROW><ROW><id>11613603</id><snippet> </snippet></ROW><ROW><id>11613603</id><snippet>&lt;jobs&gt;</snippet></ROW><ROW><id>11613603</id><snippet>&lt;/jobs&gt;</snippet></ROW><ROW><id>11613697</id><snippet>__init__()</snippet></ROW><ROW><id>11613697</id><snippet>self</snippet></ROW><ROW><id>11613697</id><snippet>None</snippet></ROW><ROW><id>11613697</id><snippet>__new__()</snippet></ROW><ROW><id>11613697</id><snippet>__new__</snippet></ROW><ROW><id>11613697</id><snippet>clone</snippet></ROW><ROW><id>11613697</id><snippet>__getstate__()</snippet></ROW><ROW><id>11613697</id><snippet>__setstate__()</snippet></ROW><ROW><id>11613697</id><snippet>copy</snippet></ROW><ROW><id>11613883</id><snippet>for form in formset:
    form.instance.user = user
    form.instance.warval = warval
</snippet></ROW><ROW><id>11614183</id><snippet>chain()</snippet></ROW><ROW><id>11614183</id><snippet>row = ['string1', 'string2']
row.extend(t.string3[-7:] for t in tobject)
</snippet></ROW><ROW><id>11614301</id><snippet>import re
regex=re.compile(r'.*FOO.*V7[^\d].*\.txt')
print filter(lambda x: regex.match(x), glob.glob("*"))
</snippet></ROW><ROW><id>11614301</id><snippet>glob</snippet></ROW><ROW><id>11614301</id><snippet>os.listdir()</snippet></ROW><ROW><id>11614301</id><snippet>glob</snippet></ROW><ROW><id>11614301</id><snippet>glob.glob('*FOO*V7[!0123456789]*')
</snippet></ROW><ROW><id>11614863</id><snippet>rename()</snippet></ROW><ROW><id>11614863</id><snippet>rename(2)</snippet></ROW><ROW><id>11614863</id><snippet>open(2)</snippet></ROW><ROW><id>11614863</id><snippet>O_CREAT</snippet></ROW><ROW><id>11615063</id><snippet>len(line1) &lt;= 3</snippet></ROW><ROW><id>11615063</id><snippet>spl1</snippet></ROW><ROW><id>11615068</id><snippet>set(data1) &amp; set(data2)
</snippet></ROW><ROW><id>11615068</id><snippet>&amp;</snippet></ROW><ROW><id>11615068</id><snippet>.intersection</snippet></ROW><ROW><id>11615068</id><snippet>set(data1).intersection(data2)
</snippet></ROW><ROW><id>11615214</id><snippet>format=</snippet></ROW><ROW><id>11615214</id><snippet>Spinbox(root, from_=00, to=45, increment=15, format="%02.0f")
</snippet></ROW><ROW><id>11615484</id><snippet>student</snippet></ROW><ROW><id>11615484</id><snippet>student</snippet></ROW><ROW><id>11615484</id><snippet>key</snippet></ROW><ROW><id>11615484</id><snippet>python</snippet></ROW><ROW><id>11615484</id><snippet>student</snippet></ROW><ROW><id>11615580</id><snippet>os.system("start /wait cmd /c {command}")
</snippet></ROW><ROW><id>11615760</id><snippet>from scipy.weave import converters

def inlineTimeStep(self, dt=0.0):
    """Takes a time step using inlined C code -- this version uses
    blitz arrays."""
    g = self.grid
    nx, ny = g.u.shape
    dx2, dy2 = g.dx**2, g.dy**2
    dnr_inv = 0.5/(dx2 + dy2)
    u = g.u

    code = """
           #line 120 "laplace.py" (This is only useful for debugging)
           double tmp, err, diff;
           err = 0.0;
           for (int i=1; i&lt;nx-1; ++i) {
               for (int j=1; j&lt;ny-1; ++j) {
                   tmp = u(i,j);
                   u(i,j) = ((u(i-1,j) + u(i+1,j))*dy2 +
                             (u(i,j-1) + u(i,j+1))*dx2)*dnr_inv;
                   diff = u(i,j) - tmp;
                   err += diff*diff;
               }
           }
           return_val = sqrt(err);
           """
    # compiler keyword only needed on windows with MSVC installed
    err = weave.inline(code,
                       ['u', 'dx2', 'dy2', 'dnr_inv', 'nx', 'ny'],
                       type_converters=converters.blitz,
                       compiler = 'gcc')
    return err
</snippet></ROW><ROW><id>11616065</id><snippet>shutil.copytree()</snippet></ROW><ROW><id>11616065</id><snippet>copytree()</snippet></ROW><ROW><id>11616065</id><snippet>ignore</snippet></ROW><ROW><id>11616065</id><snippet>ignore</snippet></ROW><ROW><id>11616065</id><snippet>copytree()</snippet></ROW><ROW><id>11616065</id><snippet>shutil.copytree()</snippet></ROW><ROW><id>11616065</id><snippet>copytree()</snippet></ROW><ROW><id>11616065</id><snippet>linkto = os.readlink(srcname); os.symlink(linkto, dstname)</snippet></ROW><ROW><id>11616065</id><snippet>copytree()</snippet></ROW><ROW><id>11616162</id><snippet>Tkinter</snippet></ROW><ROW><id>11616162</id><snippet>grid</snippet></ROW><ROW><id>11616162</id><snippet>bad = tk.Button(frame).grid()  #"bad" is None since .grid returns None

good = tk.Button(frame)
good.grid()
</snippet></ROW><ROW><id>11616179</id><snippet>$("#test td").each(function() {
    if ($(this).html() == "0") {
        $(this).html("");
    }
});
</snippet></ROW><ROW><id>11616179</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>11616179</id><snippet>$(".noZeroAllowed").each(function() {
    if ($(this).html() == "0") {
        $(this).html("");
    }
});
</snippet></ROW><ROW><id>11616179</id><snippet>&lt;table id="test"&gt;
    &lt;tr&gt;
        &lt;td class="noZeroAllowed"&gt;10&lt;/td&gt;
        &lt;td class="noZeroAllowed"&gt;5&lt;/td&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="noZeroAllowed"&gt;11&lt;/td&gt;
        &lt;td class="noZeroAllowed"&gt;0&lt;/td&gt;
        &lt;td&gt;9&lt;/td&gt;
        &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>11616179</id><snippet>&lt;table id="test"&gt;
    &lt;tr&gt;
        &lt;td class="noZeroAllowed"&gt;10 0 foobar 0&lt;/td&gt;
        &lt;td class="noZeroAllowed"&gt;5&lt;/td&gt;
        &lt;td&gt;0, 0, 0&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>11616179</id><snippet>\b</snippet></ROW><ROW><id>11616179</id><snippet>0.5</snippet></ROW><ROW><id>11616179</id><snippet>$(".noZeroAllowed").each(function() {
    var newStr = $(this).html().replace(/\b0\b/g, "");
    $(this).html(newStr);
});
</snippet></ROW><ROW><id>11616179</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>11616179</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>11616179</id><snippet>$(".noZeroAllowed").each(function() {
    var zeros = new Array;
    var b = $(this).find("b");
    for (var i = 0; i &lt; b.length; i++) {
        $(b[i])
        if ($(b[i]).html() == "0") {
            zeros.push(b[i]);
        }
    }
    for (var i = 0; i &lt; zeros.length - 1; i++) {
        $(zeros[i]).html("");
    }
});
</snippet></ROW><ROW><id>11616324</id><snippet>affiliate_item</snippet></ROW><ROW><id>11616324</id><snippet>update_affiliate_item</snippet></ROW><ROW><id>11616324</id><snippet>if affiliate_item:
</snippet></ROW><ROW><id>11616324</id><snippet>if affiliate_item and affiliate_item.has_key('id'):
</snippet></ROW><ROW><id>11616351</id><snippet>import cv
cvcapture = cv.CaptureFromFile("movie.mpg")
cv.GetCaptureProperty(cvcapture,cv.CV_CAP_PROP_FRAME_COUNT)
</snippet></ROW><ROW><id>11616351</id><snippet>cv.GetCaptureProperty(cvcapture,cv.CV_CAP_PROP_FPS)
</snippet></ROW><ROW><id>11616394</id><snippet>email = models.EmailField
</snippet></ROW><ROW><id>11616394</id><snippet>email = models.EmailField()
</snippet></ROW><ROW><id>11616394</id><snippet>django.db.models.Model</snippet></ROW><ROW><id>11616394</id><snippet>EmailField</snippet></ROW><ROW><id>11616442</id><snippet>product_list = db.GqlQuery("SELECT * FROM Post")
</snippet></ROW><ROW><id>11616442</id><snippet>product_list = ndb.gql("SELECT * FROM Post")
</snippet></ROW><ROW><id>11616497</id><snippet>for line in infile:
    columns = line.strip().split()
    for x in data[columns[0]]:
        for y in data[columns[1]]:
            print x, y
</snippet></ROW><ROW><id>11616497</id><snippet>itertools.product()</snippet></ROW><ROW><id>11616500</id><snippet>finditer</snippet></ROW><ROW><id>11616500</id><snippet>MatchObject</snippet></ROW><ROW><id>11616500</id><snippet>.group()</snippet></ROW><ROW><id>11616500</id><snippet>.group(0)</snippet></ROW><ROW><id>11616500</id><snippet>.group(1)</snippet></ROW><ROW><id>11616500</id><snippet>.group()</snippet></ROW><ROW><id>11616500</id><snippet>.group(0)</snippet></ROW><ROW><id>11616500</id><snippet>\d</snippet></ROW><ROW><id>11616500</id><snippet>d</snippet></ROW><ROW><id>11616500</id><snippet>r''</snippet></ROW><ROW><id>11616500</id><snippet>.findall()</snippet></ROW><ROW><id>11616500</id><snippet>r'((\d)\2*)'</snippet></ROW><ROW><id>11616500</id><snippet>(\d)\2*</snippet></ROW><ROW><id>11616500</id><snippet>\d</snippet></ROW><ROW><id>11616500</id><snippet>.findall()</snippet></ROW><ROW><id>11616643</id><snippet>return</snippet></ROW><ROW><id>11616643</id><snippet>def combination(K, L):
    if K&lt;=0:
        yield []
        return    #  &lt;--- hmmm
</snippet></ROW><ROW><id>11616643</id><snippet>return</snippet></ROW><ROW><id>11616643</id><snippet>return</snippet></ROW><ROW><id>11616643</id><snippet>StopIteration</snippet></ROW><ROW><id>11616643</id><snippet>return</snippet></ROW><ROW><id>11616643</id><snippet>K &lt;= 0</snippet></ROW><ROW><id>11616643</id><snippet>StopIteration</snippet></ROW><ROW><id>11616643</id><snippet>return</snippet></ROW><ROW><id>11616643</id><snippet>for</snippet></ROW><ROW><id>11616643</id><snippet>def combination(K, L):
    if K&lt;=0:
        yield []
    else:
        for i in range(len(L)):
            thisone = L[i:i+1]
            for another in combination(K-1, L[i+1:]):
                yield thisone + another
</snippet></ROW><ROW><id>11616643</id><snippet>def combination2(K, L):
    result = []
    if K &lt;= 0:
        result.append([])
    else:
        for i in range(len(L)):
            thisone = L[i:i + 1]
            for another in combination2(K - 1, L[i + 1:]):
                result.append(thisone + another)
    return result
</snippet></ROW><ROW><id>11616649</id><snippet>--- bug-3.txt   2012-07-23 15:25:42
+++ FILE    2012-07-23 15:25:42
@@ -1,8 +1,10 @@
  +
  +                        %3)+Lorem
  +
  +                        %4)+Lorem
  +
  +                        %5)+Lorem
  +
+ +                        %6)+Lorem
+ +
  +
</snippet></ROW><ROW><id>11616649</id><snippet>strip()</snippet></ROW><ROW><id>11616687</id><snippet>map(f, it)</snippet></ROW><ROW><id>11616687</id><snippet>[f(x) for x in it]</snippet></ROW><ROW><id>11616958</id><snippet>d = {name: re.compile("%s=[a-z]+&amp;" % name) for name in a}
</snippet></ROW><ROW><id>11617059</id><snippet>ImageField</snippet></ROW><ROW><id>11617449</id><snippet>gevent.spawn_later</snippet></ROW><ROW><id>11617578</id><snippet>import zipfile

def isdir(z, name):
    return any(x.startswith("%s/" % name.rstrip("/")) for x in z.namelist())

f = zipfile.ZipFile("sample.zip", "r")
print isdir(f, "a")
print isdir(f, "a/b")
print isdir(f, "a/X")
</snippet></ROW><ROW><id>11617578</id><snippet>any(x.startswith("%s/" % name.rstrip("/")) for x in z.namelist())
</snippet></ROW><ROW><id>11617578</id><snippet>$ mkdir -p a/b/c/d
$ touch a/X
$ zip -r sample.zip a
adding: a/ (stored 0%)
adding: a/X (stored 0%)
adding: a/b/ (stored 0%)
adding: a/b/c/ (stored 0%)
adding: a/b/c/d/ (stored 0%)

$ python z.py
True
True
False
</snippet></ROW><ROW><id>11617660</id><snippet>ieobj.Document.Frames[framName].document.Frames[innerFrame]
</snippet></ROW><ROW><id>11617660</id><snippet>ieobj.Document.Frames[framName].document.Frames[innerFrame].document.forms[myForm][textBox].value="someval"
</snippet></ROW><ROW><id>11617682</id><snippet>index_col</snippet></ROW><ROW><id>11617682</id><snippet>parse_dates</snippet></ROW><ROW><id>11617682</id><snippet>from datetime import datetime
import pandas as pd
parse = lambda x: datetime.strptime(x, '%Y%m%d %H')
pd.read_csv("..\\file.csv",  parse_dates = [['YYYYMMDD', 'HH']], 
            index_col = 0, 
            date_parser=parse)
</snippet></ROW><ROW><id>11617732</id><snippet>from pkg_resources import WorkingSet , DistributionNotFound
working_set = WorkingSet()

# Printing all installed modules
print tuple(working_set)

# Detecting if module is installed
try:
    dep = working_set.require('paramiko&gt;=1.0')
except DistributionNotFound:
    pass

# Installing it (anyone knows a better way?)
from setuptools.command.easy_install import main as install
install(['django&gt;=1.2'])
</snippet></ROW><ROW><id>11617779</id><snippet>grid.py</snippet></ROW><ROW><id>11617779</id><snippet>libsvm</snippet></ROW><ROW><id>11617779</id><snippet>optparse</snippet></ROW><ROW><id>11617779</id><snippet>gnuplot</snippet></ROW><ROW><id>11617779</id><snippet>process_options</snippet></ROW><ROW><id>11617779</id><snippet>gnuplot = Popen(gnuplot_exe,stdin = PIPE).stdin
</snippet></ROW><ROW><id>11617779</id><snippet>redraw()</snippet></ROW><ROW><id>11617779</id><snippet>main()</snippet></ROW><ROW><id>11617841</id><snippet>for i in xrange(10):
    frame.bind(str(i), my_handler)
</snippet></ROW><ROW><id>11617841</id><snippet>range</snippet></ROW><ROW><id>11617841</id><snippet>xrange</snippet></ROW><ROW><id>11617868</id><snippet>sudo apt-get install libncurses5-dev libreadline5-dev

uninstall your current ruby version.
sudo apt-get install libreadline-dev
rvm install 1.9.3-p194 --with-readline-dir=/usr/include/readline
</snippet></ROW><ROW><id>11618050</id><snippet>pip</snippet></ROW><ROW><id>11618050</id><snippet>virtualenv.py</snippet></ROW><ROW><id>11618050</id><snippet>C:\Python27\;C:\Python27\Scripts\</snippet></ROW><ROW><id>11618050</id><snippet>distribute_setup.py</snippet></ROW><ROW><id>11618050</id><snippet>get-pip.py</snippet></ROW><ROW><id>11618050</id><snippet>python distribute_setup.py</snippet></ROW><ROW><id>11618050</id><snippet>python get-pip.py</snippet></ROW><ROW><id>11618050</id><snippet>pip install virtualenv</snippet></ROW><ROW><id>11618050</id><snippet>pip install virtualenvwrapper-win</snippet></ROW><ROW><id>11618050</id><snippet>pyassoc</snippet></ROW><ROW><id>11618050</id><snippet>WORKON_HOME=%USERPROFILE%\Envs</snippet></ROW><ROW><id>11618050</id><snippet>mkvirtualenv --distribute SOWL
&gt;&gt;&gt;(SOWL) C:\Users\User&gt;
</snippet></ROW><ROW><id>11618052</id><snippet>&gt;&gt;&gt; a = numpy.array([(1, 2, 3), (4, 5, 6)], dtype=[('time', '&lt;u8'), 
                                                   ('timeStr', '|S27'), 
                                                   ('person', '|S24')])
&gt;&gt;&gt; a.dtype.names
('time', 'timeStr', 'person')
</snippet></ROW><ROW><id>11618052</id><snippet>&gt;&gt;&gt; with open('data.txt', 'w') as datafile:
...     datafile.write(', '.join(a.dtype.names) + '\n')
...     numpy.savetxt(datafile, a, '%i, %s, %s')
</snippet></ROW><ROW><id>11618052</id><snippet>data.txt</snippet></ROW><ROW><id>11618052</id><snippet>time, timeStr, person
1, 2, 3
4, 5, 6
</snippet></ROW><ROW><id>11618052</id><snippet>', '.join(a.dtype.names)</snippet></ROW><ROW><id>11618052</id><snippet>header</snippet></ROW><ROW><id>11618052</id><snippet>numpy</snippet></ROW><ROW><id>11618052</id><snippet>gzip</snippet></ROW><ROW><id>11618052</id><snippet>numpy</snippet></ROW><ROW><id>11618052</id><snippet>&gt;&gt;&gt; with gzip.GzipFile('data.gz', 'w') as datafile:
...     datafile.write(', '.join(a.dtype.names) + '\n')
...     numpy.savetxt(datafile, a, '%i, %s, %s')
... 
</snippet></ROW><ROW><id>11618052</id><snippet>data.gz</snippet></ROW><ROW><id>11618057</id><snippet>import subprocess
a=2
b=3
commandString = "/home/usr/bin/R --no-save --quiet --slave --args " + str(a) + " " + str(b) + " &lt; /path/to/webcalc.R"
# This is BAD PRACTICE, but necessary in this instance,
# if my assumptions of R are correct.
retval = subprocess.call(commandString, shell=True)
</snippet></ROW><ROW><id>11618130</id><snippet>file1list</snippet></ROW><ROW><id>11618130</id><snippet>file2list</snippet></ROW><ROW><id>11618130</id><snippet>for entry1 in file1list:
    for entry2 in file2list:
        if(np.all(np.abs(entry1[1:7] - entry2[1:7]) &gt; tol)):
            print entry1,entry2
</snippet></ROW><ROW><id>11618130</id><snippet>file1list = [ np.array(entry) for entry in file1list ]
</snippet></ROW><ROW><id>11618130</id><snippet>file2list</snippet></ROW><ROW><id>11618130</id><snippet>file2list=sorted(file2list,key=operator.itemgetter(1,2,3,4,5,6))
for entry1 in file1list:
    for entry2 in file2list:
        d=np.abs(entry1[1:7]-entry2[1:7])
        if(np.all(d &lt; tol)):
            print entry1,entry2
        elif(d[0] &gt; tol):
            break 
</snippet></ROW><ROW><id>11618198</id><snippet>socket.gethostbyname()</snippet></ROW><ROW><id>11618198</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.gethostbyname('google.com')
'74.125.224.198'
&gt;&gt;&gt; socket.gethostbyname('foo')           # no host 'foo' exists on the network
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
socket.gaierror: [Errno 8] nodename nor servname provided, or not known
</snippet></ROW><ROW><id>11618198</id><snippet>def hostname_resolves(hostname):
    try:
        socket.gethostbyname(hostname)
        return 1
    except socket.error:
        return 0
</snippet></ROW><ROW><id>11618198</id><snippet>&gt;&gt;&gt; hostname_resolves('google.com')
1
&gt;&gt;&gt; hostname_resolves('foo')
0
</snippet></ROW><ROW><id>11618200</id><snippet>query = QtSql.QSqlQuery() 
query.prepare('INSERT Test VALUES(?); SELECT SCOPE_IDENTITY()') 
query.bindValue(0, 'Test') 

query.exec_() 

while query.next(): 
    last_inserted_id = query.value(0) 
</snippet></ROW><ROW><id>11618280</id><snippet>urlpatterns = patterns('',
    url(r'^user/', include('registration.urls'),
    url(r'^user/', include('profile.urls'),
)
</snippet></ROW><ROW><id>11618353</id><snippet>with open('file.csv') as file:
    second_line = list(file)[1]

with open('out.csv', mode = 'w') as file:
    file.write(second_line)
</snippet></ROW><ROW><id>11618384</id><snippet>import pylab as pl
import datetime

data = """0 14-11-2003
1 15-03-1999
12 04-12-2012
33 09-05-2007
44 16-08-1998
55 25-07-2001
76 31-12-2011
87 25-06-1993
118 16-02-1995
119 10-02-1981
145 03-05-2014"""

values = []
dates = []

for line in data.split("\n"):
    x, y = line.split()
    values.append(int(x))
    dates.append(datetime.datetime.strptime(y, "%d-%m-%Y").date())

fig = pl.figure()
ax = pl.subplot(111)
ax.bar(dates, values, width=100)
ax.xaxis_date()
</snippet></ROW><ROW><id>11618384</id><snippet>strptime</snippet></ROW><ROW><id>11618384</id><snippet>fig = pl.figure()
ax = pl.subplot(111)
ax.bar(range(len(dates)), values)
</snippet></ROW><ROW><id>11618384</id><snippet>set_ticks</snippet></ROW><ROW><id>11618384</id><snippet>fig = pl.figure()
ax = pl.subplot(111)
width=0.8
ax.bar(range(len(dates)), values, width=width)
ax.set_xticks(np.arange(len(dates)) + width/2)
ax.set_xticklabels(dates, rotation=90)
</snippet></ROW><ROW><id>11618492</id><snippet>is</snippet></ROW><ROW><id>11618531</id><snippet>import BeautifulSoup
soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;span title="Funstuff" class="thisClass"&gt;Fun Text&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;')
print soup.html.body.span['title']
print soup.find('span', {"class": "thisClass"})['title']
</snippet></ROW><ROW><id>11618603</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>11618603</id><snippet>from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup('&lt;html&gt;&lt;tr&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;Color Digest&lt;/td&gt;&lt;td&gt;THE DIGEST&lt;/td&gt;&lt;/tr&gt;&lt;/html&gt;')
for cell in soup.html.tr.findAll('td'):
    if 'Color Digest' == cell.text:
         print cell.nextSibling.text
</snippet></ROW><ROW><id>11618620</id><snippet>import argparse

parser = argparse.ArgumentParser()

#-db DATABASE -u USERNAME -p PASSWORD -size 20000
parser.add_argument("-host", "--hostname", dest = "hostname", default = "xyz.edu", help="Server name")
parser.add_argument("-db", "--database", dest = "db", default = "ding_dong", help="Database name")
parser.add_argument("-u", "--username",dest ="username", help="User name")
parser.add_argument("-p", "--password",dest = "password", help="Password")
parser.add_argument("-size", "--binsize",dest = "binsize", help="Size", type=int)

args = parser.parse_args()

print( "Hostname {} db {} User {} Password {} size {} ".format(
        args.hostname,
        args.db,
        args.username,
        args.password,
        args.binsize
        ))
def ConnectToDB():
    print ('Trying to connect to mySQL server')
    # Try to connect to the database
    try:
        con=sql.connect(host=args.hostname, user= args.username, passwd= args.password)
        print ('\nConnected to Database\n')

    # If we cannot connect to the database, send an error to the user and exit the program.
    except sql.Error:
        print ("Error %d: %s" % (sql.Error.args[0],sql.Error.args[1]))
        sys.exit(1)

    return con
</snippet></ROW><ROW><id>11618652</id><snippet>numpy.zeros(200)</snippet></ROW><ROW><id>11618652</id><snippet>numpy.array(200)</snippet></ROW><ROW><id>11618652</id><snippet>globals()[local_name]</snippet></ROW><ROW><id>11618652</id><snippet>vars(config)[local_name]</snippet></ROW><ROW><id>11618652</id><snippet>eval</snippet></ROW><ROW><id>11618652</id><snippet>#config.py
dec={'pair':np.zeros(200), 'community':np.zeros(200)}
</snippet></ROW><ROW><id>11618652</id><snippet>a=config.dec[name]
a[i:]+=1
</snippet></ROW><ROW><id>11618652</id><snippet>dec_pair</snippet></ROW><ROW><id>11618652</id><snippet>dec_community</snippet></ROW><ROW><id>11618652</id><snippet>config.py</snippet></ROW><ROW><id>11618652</id><snippet>dec_pair=np.zeros(200)
dec_community=np.zeros(200)
dec={'pair':dec_pair, 'community':dec_community}
</snippet></ROW><ROW><id>11618652</id><snippet>i</snippet></ROW><ROW><id>11618652</id><snippet>i</snippet></ROW><ROW><id>11618785</id><snippet>e[0].text_content()</snippet></ROW><ROW><id>11619022</id><snippet>def _b2motion(x, y):
    lb.scan_dragto(x, (-y/3)) #here
    _select(y)
    return 'break'
</snippet></ROW><ROW><id>11619058</id><snippet>update_render</snippet></ROW><ROW><id>11619058</id><snippet>update_render</snippet></ROW><ROW><id>11619058</id><snippet>Deferred</snippet></ROW><ROW><id>11619058</id><snippet>callback</snippet></ROW><ROW><id>11619058</id><snippet>self.client_data</snippet></ROW><ROW><id>11619058</id><snippet>Deferred</snippet></ROW><ROW><id>11619058</id><snippet>Deferred</snippet></ROW><ROW><id>11619058</id><snippet>twisted.web.server.NOT_DONE_YET</snippet></ROW><ROW><id>11619058</id><snippet>render_GET</snippet></ROW><ROW><id>11619075</id><snippet>with open('test.csv') as in_file, open('new.csv', 'w') as out_file:
    for line in csv.reader(in_file, delimiter='$'):
        out_file.write(','.join(sorted(line)[2:])+'\n')
</snippet></ROW><ROW><id>11619075</id><snippet>in_file</snippet></ROW><ROW><id>11619075</id><snippet>out_file</snippet></ROW><ROW><id>11619075</id><snippet>$</snippet></ROW><ROW><id>11619075</id><snippet>in_file</snippet></ROW><ROW><id>11619075</id><snippet>,</snippet></ROW><ROW><id>11619075</id><snippet>\n</snippet></ROW><ROW><id>11619075</id><snippet>$</snippet></ROW><ROW><id>11619075</id><snippet>[2:]</snippet></ROW><ROW><id>11619200</id><snippet>datetime.combine</snippet></ROW><ROW><id>11619200</id><snippet>time</snippet></ROW><ROW><id>11619200</id><snippet>dateobject = datetime.date.today()
datetime.combine(dateobject, datetime.time())
</snippet></ROW><ROW><id>11619200</id><snippet>datetime.time.min</snippet></ROW><ROW><id>11619200</id><snippet>datetime.combine(dateobject, datetime.time.min)
</snippet></ROW><ROW><id>11619200</id><snippet>datetime.time()</snippet></ROW><ROW><id>11619200</id><snippet>datetime.time.min</snippet></ROW><ROW><id>11619210</id><snippet>group(0)</snippet></ROW><ROW><id>11619210</id><snippet>code.group(0)
</snippet></ROW><ROW><id>11619210</id><snippet>lookup = defaultdict(list)
wholelookup = defaultdict(list)

mydata = open('summaryfile.txt')
for line in csv.reader(mydata, delimiter='\t'):
    code = re.match('[a-z](\d+)[a-z]', line[-1], re.I)
    if code: 
        lookup[line[-2]].append(code.group(1))
        wholelookup[line[-2]].append(code.group(0))
</snippet></ROW><ROW><id>11619210</id><snippet>wholelookup['Q14591']
</snippet></ROW><ROW><id>11619210</id><snippet>lookup['Q14591']
</snippet></ROW><ROW><id>11619338</id><snippet># mediamanager/models.py

import re

from django.conf import settings

def get_filetypes_re(mm_filetypes=settings.MM_FILETYPES):
    filetypes_re = {}
    for key, exts in settings.MM_FILETYPES.items():
    filetypes_re[key] = re.compile(r'({})'.format('|'.join(exts)))
    return filetypes_re 
</snippet></ROW><ROW><id>11619338</id><snippet>MM_FILETYPES={'image': ['jpg', 'png', 'gif'],
                        'document': ['pdf', 'txt'],
                        'audio': ['mp3', 'wav']})

def test_filetype_re(self):
    filetypes_re = mediamanager.models.get_filetypes_re(mm_filetypes=MM_FILETYPES)
    filetypes_re_exp = {'image': '(jpg|png|gif)',
                        'document': '(pdf|txt)',
                        'audio': '(mp3|wav)'}

    for key, value in filetypes_re_exp.items():
        self.assertEqual(value, filetypes_re[key].pattern)
</snippet></ROW><ROW><id>11619701</id><snippet># Usually a simpler error message without newlines
print &gt;&gt;sys.stderr, e.message
# If your message is overly complex, with newlines -- pick a line to print and process it
#print &gt;&gt;sys.stderr, e.message.split('\n')[-1].strip()
# Kill the process
sys.exit(1)
</snippet></ROW><ROW><id>11619701</id><snippet>print &gt;&gt;sys.stderr, malformatedStr.replace("\\n", "\n")
</snippet></ROW><ROW><id>11619725</id><snippet>&gt;&gt;&gt; s ="""line1
line2
line3
line4
line5
line6
line7
line8"""
&gt;&gt;&gt; s1, s2 = s[:len(s)//2], s[len(s)//2:]
&gt;&gt;&gt; '\n'.join([' '.join(x) for x in zip(s1.split('\n'),s2[1:].split('\n'))])
'line1 line5\nline2 line6\nline3 line7\nline4 line8'
</snippet></ROW><ROW><id>11619725</id><snippet>zip</snippet></ROW><ROW><id>11619725</id><snippet>join</snippet></ROW><ROW><id>11619909</id><snippet>\((?P&lt;property_key&gt;\w+)(?:\s+"(?P&lt;property_value&gt;\w+)")?\)
</snippet></ROW><ROW><id>11620013</id><snippet>Installing with the zip file

The available locations for the zip files are:

Sourceforge download
After downloading the zip file:

Eclipse 3.4 onwards

Extract the contents of the zip file in the eclipse/dropins folder and restart Eclipse.

Before Eclipse 3.4

Extract the contents of the zip file on top of Eclipse, making sure the plugins folder     is extracted on top of the 
eclipse/plugins folder and the features is on top of the eclipse/features folder.
After that, restart Eclipse with the '-clean' flag, so that Eclipse finds out about it.
</snippet></ROW><ROW><id>11620047</id><snippet>num_pages = Math.Ceil( T / I ) # ceil(100/10) = 10 pages
cur_page = P # 0

start = I*P # 10 * 0 = 0
end = start + ipp # 0 + 10 = 10
if end &gt; total: # false
  end = total

items = allitems[start:end] # this page's items
</snippet></ROW><ROW><id>11620047</id><snippet>num_pages = Math.Ceil( T / I ) # ceil(322/50) = 7 pages
cur_page = P # 6

start = I*P # 50 * 6 = 300
end = start + ipp # 300 + 50 = 350
if end &gt; total: # true 
  end = total # end = 322, not 350

items = allitems[start:end] # this page's items
</snippet></ROW><ROW><id>11620047</id><snippet>def show_items():
    T = len(data) # not sure where your data comes from, or if you have to process a query first...
    P = request.vars.page # e.g. http://blah.com/show_items?page=0
    I = request.vars.ipp # e.g. http://blah.com/show_items?page=0&amp;ipp=50

    #now the code from before...
    num_pages = Math.Ceil( T / I ) # ceil(100/10) = 10 pages
    cur_page = P # 0

    start = I*P # 10 * 0 = 0
    end = start + ipp # 0 + 10 = 10
    if end &gt; total: # false
      end = total

    items = allitems[start:end] # this page's items

    return dict(
      data=items,
      start=start,
      end=end,
      total=total,
      prev=page-1 if page &gt; 0 else None, # set to None if page =0
      next=page+1 if page &lt; num_pages else None, # set to None if page == num_pages
    )
</snippet></ROW><ROW><id>11620047</id><snippet>{{ extend 'layout.html' }}

{{ if not total &gt; 0: }}
  No results
{{ else: }}
  &lt;div id='items-container'&gt;
    &lt;div id='items-nav'&gt;
      &lt;span class='header'&gt;Showing {{=start}} to {{=end} of {{=total}}&lt;/span&gt;&lt;br /&gt;
      {{ if prev != None: }}
      &lt;a href='show_items?ipp={{=ipp}}&amp;page={{=prev}}' class='prev p-nav' style='float: left'&gt;&lt; Prev&lt;/a&gt;
      {{ pass }}

      {{ if next != None: }}
      &lt;a href='show_items?ipp={{=ipp}}&amp;page={{=next}}' class='next p-nav' style='float: right'&gt;Next &gt;&lt;/a&gt;
      {{ pass }}
    &lt;/div&gt;

    {{ for item in items: }}
    &lt;div class='item'&gt;
      {{=item.title}}&lt;br /&gt;
      {{=item.description}}&lt;br /&gt;
      Put whatever else about the item...
    &lt;/div&gt;
    {{ pass }}

  &lt;/div&gt;
{{ pass }}
</snippet></ROW><ROW><id>11620052</id><snippet>n</snippet></ROW><ROW><id>11620052</id><snippet>for num in range(1,101):
    prime = True
    for i in range(2,num):
        if (num%i==0):
            prime = False
    if prime:
       print num
</snippet></ROW><ROW><id>11620052</id><snippet>for num in range(1,101):
    if all(num%i!=0 for i in range(2,num)):
       print num
</snippet></ROW><ROW><id>11620052</id><snippet>import math
for num in range(1,101):
    if all(num%i!=0 for i in range(2,int(math.sqrt(num))+1)):
       print num
</snippet></ROW><ROW><id>11620174</id><snippet>011</snippet></ROW><ROW><id>11620174</id><snippet>8**1 + 8**0</snippet></ROW><ROW><id>11620174</id><snippet>0100</snippet></ROW><ROW><id>11620174</id><snippet>8**2</snippet></ROW><ROW><id>11620174</id><snippet>027</snippet></ROW><ROW><id>11620174</id><snippet>2*8**1 + 7*8**0</snippet></ROW><ROW><id>11620262</id><snippet>var data = google.visualization.arrayToDataTable({{ list_a|json|safe }})
</snippet></ROW><ROW><id>11620262</id><snippet>json</snippet></ROW><ROW><id>11620335</id><snippet>gnome-terminal --disable-factory</snippet></ROW><ROW><id>11620413</id><snippet>liasta = range(1, 1001)
</snippet></ROW><ROW><id>11620413</id><snippet>range()</snippet></ROW><ROW><id>11620413</id><snippet>0</snippet></ROW><ROW><id>11620413</id><snippet>1</snippet></ROW><ROW><id>11620413</id><snippet>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

&gt;&gt;&gt; range(1, 11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

&gt;&gt;&gt; range(0, 30, 5)
[0, 5, 10, 15, 20, 25]
</snippet></ROW><ROW><id>11620530</id><snippet>worker</snippet></ROW><ROW><id>11620530</id><snippet>worker</snippet></ROW><ROW><id>11620530</id><snippet>q.get()</snippet></ROW><ROW><id>11620530</id><snippet>worker</snippet></ROW><ROW><id>11620530</id><snippet>q.join()</snippet></ROW><ROW><id>11620530</id><snippet>q.task_done</snippet></ROW><ROW><id>11620638</id><snippet>a = Button.grid(...)
</snippet></ROW><ROW><id>11620638</id><snippet>grid</snippet></ROW><ROW><id>11620638</id><snippet>Button</snippet></ROW><ROW><id>11620638</id><snippet>Button</snippet></ROW><ROW><id>11620638</id><snippet>Button</snippet></ROW><ROW><id>11620638</id><snippet>grid</snippet></ROW><ROW><id>11620638</id><snippet>a = Button(...)
a.grid(...)
</snippet></ROW><ROW><id>11620638</id><snippet>pack</snippet></ROW><ROW><id>11620638</id><snippet>grid</snippet></ROW><ROW><id>11620638</id><snippet>grid</snippet></ROW><ROW><id>11620638</id><snippet>pack</snippet></ROW><ROW><id>11620638</id><snippet>mainloop</snippet></ROW><ROW><id>11620638</id><snippet>grid</snippet></ROW><ROW><id>11620638</id><snippet>pack</snippet></ROW><ROW><id>11620638</id><snippet>place</snippet></ROW><ROW><id>11620638</id><snippet>a = Button(...)
a.grid(...)
b = Button(...)
b.grid(...)
...
</snippet></ROW><ROW><id>11620638</id><snippet>a = Button(...)
b = Button(...)
...
a.grid(...)
b.grid(...)
</snippet></ROW><ROW><id>11620885</id><snippet>#!/usr/bin/ruby

@x = 5
def test
    puts "x = #{@x}"
end
</snippet></ROW><ROW><id>11620885</id><snippet>#!/usr/bin/ruby

x = 5
test = lambda do
    puts "x = #{x}"
end

test.call
</snippet></ROW><ROW><id>11620885</id><snippet>#!/usr/bin/ruby

x = 5
test = Proc.new do
    puts "x = #{x}"
end

test.call
</snippet></ROW><ROW><id>11620982</id><snippet>x = x[numpy.logical_not(numpy.isnan(x))]
</snippet></ROW><ROW><id>11621173</id><snippet>dj_database_url</snippet></ROW><ROW><id>11621173</id><snippet>DATABASE_URL</snippet></ROW><ROW><id>11621341</id><snippet>extern "C"  __declspec(dllexport) void foo(MyStruct *ret)
{
    MyStruct s = {0, 0}
    *ret = s;
}
</snippet></ROW><ROW><id>11621341</id><snippet>class MyStruct(ctypes.Structure):
    _fields_ = [("a", ctypes.c_uint),
                ("b", ctypes.c_uint),
                ("c", ctypes.c_void_p)]

mylib = ctypes.cdll.LoadLibrary('mylibrary')
foo = mylib.foo
foo.argtypes = [ctypes.POINTER(MyStruct)]

x = MyStruct()
foo(ctypes.byref(x))
# x should now have the return value from the C code
</snippet></ROW><ROW><id>11621423</id><snippet>def func2(msg):
    return 'result of func2("' + func1(msg) + '")'

def func1(msg):
    return 'result of func1("' + msg + '")'

print func1('test')
print func2('test')
</snippet></ROW><ROW><id>11621423</id><snippet>result of func1("test")
result of func2("result of func1("test")")
</snippet></ROW><ROW><id>11621445</id><snippet>.readlines()</snippet></ROW><ROW><id>11621445</id><snippet># non-lazy
with open(input_fname) as in_f, open(output_fname, "w") as out_f:
    bytes = in_f.read()
    out_f.write(bytes)

# also non-lazy
with open(input_fname) as in_f, open(output_fname, "w") as out_f:
    lines = in_f.readlines()
    for line in lines:
        out_f.write(line)

# lazy
with open(input_fname) as in_f, open(output_fname, "w") as out_f:
    for line in in_f:  # only gets one line at a time
        out_f.write(line) # write each line as we get it
</snippet></ROW><ROW><id>11621445</id><snippet>yield</snippet></ROW><ROW><id>11621445</id><snippet>def db_rows(database_name):
    # code to open the database goes here
    # write a loop that reads rows
        # inside the loop, use yield on each row
        yield row
    # code to close the database goes here

for row in db_rows(database_name):
    # do something with the row
</snippet></ROW><ROW><id>11621475</id><snippet>stripper = fileParts([len(fileParts)-2]
                                       ^
</snippet></ROW><ROW><id>11621475</id><snippet>)</snippet></ROW><ROW><id>11621475</id><snippet>stripper = fileParts([len(fileParts)-2])
                                       ^
</snippet></ROW><ROW><id>11621656</id><snippet>csv.reader()</snippet></ROW><ROW><id>11621656</id><snippet>wholelookup</snippet></ROW><ROW><id>11621656</id><snippet>line</snippet></ROW><ROW><id>11621656</id><snippet>code.group(0)</snippet></ROW><ROW><id>11621656</id><snippet>code.group(0)</snippet></ROW><ROW><id>11621656</id><snippet>line[-1]</snippet></ROW><ROW><id>11621656</id><snippet>wholelookup[line[-2]].append(line)
</snippet></ROW><ROW><id>11621656</id><snippet>line</snippet></ROW><ROW><id>11621656</id><snippet>s = ' '.join(line)
wholelookup[line[-2]].append(s)
</snippet></ROW><ROW><id>11621656</id><snippet>lookup = defaultdict(list)
wholelookup = defaultdict(list)
pat = re.compile('[a-z](\d+)[a-z]', re.I)

with open('summaryfile.txt') as mydata:
    for s_line in mydata:
        values = s_line.split('\t')
        code = re.match(pat, values[-1])
        if code: 
            lookup[values[-2]].append(code.group(1))
            wholelookup[values[-2]].append(s_line)
</snippet></ROW><ROW><id>11621771</id><snippet>'a'</snippet></ROW><ROW><id>11621771</id><snippet>'r'</snippet></ROW><ROW><id>11621771</id><snippet>'a'</snippet></ROW><ROW><id>11621790</id><snippet>Query</snippet></ROW><ROW><id>11621790</id><snippet>import datetime
from google.appengine.ext import db

q = db.Query(DateTest)

# This month
month = datetime.datetime.today().replace(day=1, hour=0, minute=0, second=0, microsecond=0)

q.filter('dateAdded &gt;= ', month)
results = q.fetch(10)
</snippet></ROW><ROW><id>11621851</id><snippet>awk</snippet></ROW><ROW><id>11621851</id><snippet>xxxxxxxx</snippet></ROW><ROW><id>11621851</id><snippet>awk '
    BEGIN {
        OFS = "\t";
    }

    FNR == NR {
        b[ $1 ] = $2 "\t" $3;
        next;
    }

    FNR &lt; NR {
        str = ($1 in b) ? b[ $1 ] : "xxxxxxxx";
        print $2, $3, $1, str;
    }
' fileB fileA
</snippet></ROW><ROW><id>11621851</id><snippet>2.1     3       foo1    2.0     2.9
3.1     3       foo2    2.1     3
4.1     3       foo3    xxxxxxxx
2.1     3       foo4    2.1     3
3.1     3       foo5    xxxxxxxx
</snippet></ROW><ROW><id>11621940</id><snippet>\\.\</snippet></ROW><ROW><id>11621940</id><snippet>\\.\COM10</snippet></ROW><ROW><id>11622099</id><snippet>sub-process</snippet></ROW><ROW><id>11622099</id><snippet>output,error=your_process.communicate()
</snippet></ROW><ROW><id>11622099</id><snippet>_</snippet></ROW><ROW><id>11622099</id><snippet>shlex</snippet></ROW><ROW><id>11622099</id><snippet>var="mypythonprogram.py argument1 argument2"</snippet></ROW><ROW><id>11622099</id><snippet>arguments=shlex.split(var)</snippet></ROW><ROW><id>11622170</id><snippet>from SomeModule import *
</snippet></ROW><ROW><id>11622170</id><snippet>import numpy as np
</snippet></ROW><ROW><id>11622170</id><snippet>from numpy import dot
</snippet></ROW><ROW><id>11622247</id><snippet>requests</snippet></ROW><ROW><id>11622247</id><snippet>patch</snippet></ROW><ROW><id>11622247</id><snippet>get</snippet></ROW><ROW><id>11622247</id><snippet>get = mock.Mock()
text = get.return_value.text = "hey I got this")
with mock.patch("my_module.requests.get", get):
    resource = get_some_resource()
self.assertEqual(resource, text.upper())
</snippet></ROW><ROW><id>11622349</id><snippet># Split out the filename for easier refactoring
r_script = '/home/usr/webapps/simple/htdocs/webcalc.R'
# We can give an iterable to subprocess.call()
command_args = ['/home/usr/bin/R', '-f', r_script, '--no-save', '--quiet', '--slave', '--args', str(nnodes),
    str(size)]
# And since we don't need shell features like '&lt;', shell=True goes away!
subprocess.call(command_args)
</snippet></ROW><ROW><id>11622562</id><snippet>match</snippet></ROW><ROW><id>11622562</id><snippet>p.search(a)</snippet></ROW><ROW><id>11622565</id><snippet>df['A'].ix[0]</snippet></ROW><ROW><id>11622565</id><snippet>df['A'].ix[10]
df['A'].irow(0)
</snippet></ROW><ROW><id>11622565</id><snippet>df['A'].ix[0]</snippet></ROW><ROW><id>11622565</id><snippet>df['A'].ix[0]</snippet></ROW><ROW><id>11622565</id><snippet>df2=df.reset_index()
</snippet></ROW><ROW><id>11622565</id><snippet>df2['A'].ix[0]</snippet></ROW><ROW><id>11622565</id><snippet>drop=True</snippet></ROW><ROW><id>11622590</id><snippet>def add_paths</snippet></ROW><ROW><id>11622590</id><snippet>def __init__</snippet></ROW><ROW><id>11622590</id><snippet>add_paths</snippet></ROW><ROW><id>11622590</id><snippet>__init__</snippet></ROW><ROW><id>11622590</id><snippet>def</snippet></ROW><ROW><id>11622654</id><snippet>argparse</snippet></ROW><ROW><id>11622654</id><snippet>optparse</snippet></ROW><ROW><id>11622678</id><snippet>import nltk.data, nltk.tag
tagger = nltk.data.load(nltk.tag._POS_TAGGER)
</snippet></ROW><ROW><id>11622678</id><snippet>nltk.pos_tag</snippet></ROW><ROW><id>11622678</id><snippet>tagger.tag</snippet></ROW><ROW><id>11622725</id><snippet>&gt;&gt;&gt; pattern = re.compile(".*stop\s+(\w+\s+){0,10}mail(?!(\s+stop|(.*mail stop))).*")
&gt;&gt;&gt; print(pattern.search("please stop the mail, I want the mail to stop"))
&lt;_sre.SRE_Match object at 0x15c43c0&gt;
&gt;&gt;&gt; print(pattern.search("please stop the mail stop"))
None
&gt;&gt;&gt; print(pattern.search("please stop the mail, and I want the mail stop"))
None
</snippet></ROW><ROW><id>11622769</id><snippet>read_csv</snippet></ROW><ROW><id>11622769</id><snippet>np.mmap</snippet></ROW><ROW><id>11622769</id><snippet>iterator=True, chunksize=1000</snippet></ROW><ROW><id>11622769</id><snippet>pd.concat</snippet></ROW><ROW><id>11622977</id><snippet>xl = win32com.client.DispatchEx("Excel.Application")
wb = xl.workbooks.open("C:\file.xlsm")
xl.run("file.xlsm!macro")
xl.Visible = True
wb.Close(savechanges=1)
xl.Quit()
</snippet></ROW><ROW><id>11623078</id><snippet>for image in Image.objects.all():
        image_data = serialize_image(image)
        myfile.write(image_data)
        all_tags = image.tag_set.all()
        tag_data = serialize_tag(all_tags)
        myfile.write(tag_data)
</snippet></ROW><ROW><id>11623083</id><snippet>import os
os.environ['PDBVIEWER'] = 'C:/Program Files (x86)/University of Illinois/VMD/vmd.exe'

from MMTK import *
molecule = Molecule('water')
molecule.view()
</snippet></ROW><ROW><id>11623319</id><snippet>0</snippet></ROW><ROW><id>11623319</id><snippet>(0, 2, 4, 6, 8, ...)
</snippet></ROW><ROW><id>11623394</id><snippet>from matplotlib import pyplot as plt
import numpy as np
randn = np.random.randn
from pandas import *

idx = Index(arange(1,11))
df = DataFrame(randn(10, 5), index=idx, columns=['A', 'B', 'C', 'D', 'E'])
vals = np.around(df.values,2)
normal = plt.normalize(vals.min()-1, vals.max()+1)

fig = plt.figure(figsize=(15,8))
ax = fig.add_subplot(111, frameon=True, xticks=[], yticks=[])

the_table=plt.table(cellText=vals, rowLabels=df.index, colLabels=df.columns, 
                    colWidths = [0.03]*vals.shape[1], loc='center', 
                    cellColours=plt.cm.hot(normal(vals)))
</snippet></ROW><ROW><id>11623423</id><snippet>fill</snippet></ROW><ROW><id>11623423</id><snippet>broadcast</snippet></ROW><ROW><id>11623423</id><snippet>broadcast_arrays</snippet></ROW><ROW><id>11623423</id><snippet>&gt;&gt;&gt; a = numpy.arange(9).reshape(3, 3)
&gt;&gt;&gt; numpy.broadcast_arrays(a, 1)[1]
array([[1, 1, 1],
       [1, 1, 1],
       [1, 1, 1]])
</snippet></ROW><ROW><id>11623423</id><snippet>&gt;&gt;&gt; numpy.broadcast_arrays(a, [1, 2, 3])[1]
array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])
</snippet></ROW><ROW><id>11623423</id><snippet>ufunc</snippet></ROW><ROW><id>11623423</id><snippet>&gt;&gt;&gt; %timeit 1 + a * 0
10000 loops, best of 3: 23.2 us per loop
&gt;&gt;&gt; %timeit numpy.broadcast_arrays(a, 1)[1]
10000 loops, best of 3: 52.3 us per loop
</snippet></ROW><ROW><id>11623423</id><snippet>fill</snippet></ROW><ROW><id>11623423</id><snippet>&gt;&gt;&gt; %timeit b = numpy.empty_like(a, dtype='i8'); b.fill(1)
100000 loops, best of 3: 6.59 us per loop
</snippet></ROW><ROW><id>11623423</id><snippet>ones</snippet></ROW><ROW><id>11623423</id><snippet>&gt;&gt;&gt; %timeit numpy.broadcast_arrays(a, numpy.arange(100))[1]
10000 loops, best of 3: 53.4 us per loop
&gt;&gt;&gt; %timeit (1 + a * 0) * numpy.arange(100)
10000 loops, best of 3: 45.9 us per loop
&gt;&gt;&gt; %timeit b = numpy.ones_like(a, dtype='i8'); b * numpy.arange(100)
10000 loops, best of 3: 28.9 us per loop
</snippet></ROW><ROW><id>11623446</id><snippet>fileinput</snippet></ROW><ROW><id>11623446</id><snippet>import fileinput

f = fileinput.input('C:foobar', inplace=1)
for line in f:
    line = line.replace('&amp;nbsp;', ' ')
    print line,
f.close()
print 'done'
</snippet></ROW><ROW><id>11623446</id><snippet>backup=</snippet></ROW><ROW><id>11623446</id><snippet>C:foobar</snippet></ROW><ROW><id>11623763</id><snippet>CN=Configuration,DC=intranet,DC=sinotrans</snippet></ROW><ROW><id>11623763</id><snippet>import win32com.client

adoConnection = win32com.client.Dispatch('ADODB.Connection')
adoCommand = win32com.client.Dispatch('ADODB.Command')
adoRecordset = win32com.client.Dispatch('ADODB.Recordset')

adoConnection.Provider = 'ADSDSOObject'
adoConnection.Properties('User ID').Value = 'user'
adoConnection.Properties('Password').Value = 'password'
adoConnection.Properties('Encrypt Password').Value = True
adoConnection.Properties('ADSI Flag').Value = 1 
adoConnection.Open('Active Directory Provider')

adoCommand.ActiveConnection = adoConnection
adoCommand.Properties('Page Size').Value = 1000

ldap = '''\
SELECT cn, mail
From 'LDAP://CN=Configuration,DC=abc,DC=com'
WHERE legacyExchangeDN = '/o=abc/ou=first administrative group/cn=configuration/cn=servers/cn=myserver/cn=microsoft public mdb'
'''

adoCommand.CommandText = ldap
adoRecordset.Open(adoCommand)
while not adoRecordset.EOF:
    print('{} {}'.format(adoRecordset('cn'), adoRecordset('mail')))
    adoRecordset.MoveNext()
adoRecordset.Close()

adoConnection.Close()
</snippet></ROW><ROW><id>11623841</id><snippet>__init__</snippet></ROW><ROW><id>11623841</id><snippet>self.a</snippet></ROW><ROW><id>11623841</id><snippet>__init__</snippet></ROW><ROW><id>11623841</id><snippet>func1</snippet></ROW><ROW><id>11623841</id><snippet>func2</snippet></ROW><ROW><id>11623841</id><snippet>__new__</snippet></ROW><ROW><id>11623841</id><snippet>obj = A.__new__(args)
obj.a = "test value"
obj.func1()
</snippet></ROW><ROW><id>11623841</id><snippet>__init__</snippet></ROW><ROW><id>11623841</id><snippet>__init__</snippet></ROW><ROW><id>11623841</id><snippet>__init__</snippet></ROW><ROW><id>11623841</id><snippet>__init__</snippet></ROW><ROW><id>11623841</id><snippet>__init__</snippet></ROW><ROW><id>11623841</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, num):
...         self.numSquared = self.square(num)
...     
...     @staticmethod
...     def square(num):
...         return num**2
&gt;&gt;&gt; Foo.square(2) # you can test the square "method" this way without instantiating Foo
4
&gt;&gt;&gt; Foo(8).numSquared
64
</snippet></ROW><ROW><id>11624055</id><snippet>&gt;&gt;&gt; item = [{'position': 0}, {'position': 4}]
&gt;&gt;&gt; min(set(range(10)) - set(x['position'] for x in item))
1
</snippet></ROW><ROW><id>11624055</id><snippet>(x['position'] for x in item))</snippet></ROW><ROW><id>11624157</id><snippet>vars()</snippet></ROW><ROW><id>11624157</id><snippet>vars()</snippet></ROW><ROW><id>11624157</id><snippet>__init__</snippet></ROW><ROW><id>11624157</id><snippet>vars()</snippet></ROW><ROW><id>11624157</id><snippet>getattr</snippet></ROW><ROW><id>11624157</id><snippet>setattr</snippet></ROW><ROW><id>11624157</id><snippet>vars</snippet></ROW><ROW><id>11624157</id><snippet>vars</snippet></ROW><ROW><id>11624157</id><snippet>__init__</snippet></ROW><ROW><id>11624157</id><snippet> self.connections = {}
 self.connections[1] = "This is connection 1"
</snippet></ROW><ROW><id>11624157</id><snippet> self.connections[1]
</snippet></ROW><ROW><id>11624266</id><snippet>In [44]: str = "ABCD"

In [45]: [elem.encode("hex") for elem in str]
Out[45]: ['41', '42', '43', '44']
</snippet></ROW><ROW><id>11624266</id><snippet>In [49]: import array

In [50]: print array.array('B', "ABCD")
array('B', [65, 66, 67, 68])
</snippet></ROW><ROW><id>11624445</id><snippet>itertools.combinations</snippet></ROW><ROW><id>11624445</id><snippet>from itertools import combinations

for i, j in combinations(self.objects, 2):
    if pygame.sprite.collide_rect(i, j):
        grid.collisions.append(Collision(i, j))
</snippet></ROW><ROW><id>11624445</id><snippet>aSet = set([1,2,3,4])
list(combinations(aSet, 2))
# [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
</snippet></ROW><ROW><id>11624445</id><snippet>combinations</snippet></ROW><ROW><id>11624511</id><snippet>    [('/', FrontPageHandler),
</snippet></ROW><ROW><id>11624511</id><snippet>    [('/shell', FrontPageHandler),
</snippet></ROW><ROW><id>11624511</id><snippet>- url: /shell.*
  script: shell.py
</snippet></ROW><ROW><id>11624600</id><snippet>&lt;body&gt;
%from mydictfile import * &lt;-- importing mydict here
%include subpage1 mydict  
...other stuff ...
&lt;/body&gt;
</snippet></ROW><ROW><id>11624600</id><snippet>mydict = {
message: "Hello World",
...other template vars ... 
}
</snippet></ROW><ROW><id>11624698</id><snippet>import pylab as pl
from matplotlib import ticker
from datetime import date

dates = [date(2012,7,10), date(2012,8,5), date(2012,9,4)]
values = [1,2,3]

def format_date(x, pos=None):
    return pl.num2date(x).strftime('%Y-%m-%d')

gca().xaxis.set_major_formatter(ticker.FuncFormatter(format_date))

# Generate the Scatter Plot.
scatter(dates,values,s=20,color='tomato');
gcf().autofmt_xdate()
</snippet></ROW><ROW><id>11624875</id><snippet>url(r"^(.*)$"</snippet></ROW><ROW><id>11624875</id><snippet>urls.py</snippet></ROW><ROW><id>11624875</id><snippet>startswith()</snippet></ROW><ROW><id>11624875</id><snippet>302</snippet></ROW><ROW><id>11624875</id><snippet>303</snippet></ROW><ROW><id>11624875</id><snippet>404</snippet></ROW><ROW><id>11624916</id><snippet>self._use_dynamic_x()</snippet></ROW><ROW><id>11624916</id><snippet>import pylab as pl
from pandas import *
import datetime
df = DataFrame([1,1], index =  [ datetime.datetime(2012,1,1), datetime.datetime(2012,9,1) ] )
df.plot()
pl.xticks(rotation=90)
</snippet></ROW><ROW><id>11624927</id><snippet>import random
from multiprocessing import Pool
from functools import wraps

def retry(f):
    @wraps(f)
    def wrapped(*args, **kwargs):
        while True:
            try:
                return f(*args, **kwargs)
            except ValueError:
                pass
    return wrapped

@retry
def f(x):
    if random.getrandbits(1):
        raise ValueError("Retry this computation")
    return x*x

p = Pool(5)
# If one of these f(x) calls fails, retry it with another (or same) process
p.map(f, [1,2,3])
</snippet></ROW><ROW><id>11625016</id><snippet>kill()</snippet></ROW><ROW><id>11625016</id><snippet>g = gevent.spawn_later(5, function)
g.kill()
</snippet></ROW><ROW><id>11625061</id><snippet>allclose</snippet></ROW><ROW><id>11625061</id><snippet>isinf</snippet></ROW><ROW><id>11625061</id><snippet>def allclose(x, y, rtol=1.e-5, atol=1.e-8):
    return all(less_equal(abs(x-y), atol + rtol * abs(y)))
</snippet></ROW><ROW><id>11625061</id><snippet>rtol</snippet></ROW><ROW><id>11625061</id><snippet>atol</snippet></ROW><ROW><id>11625314</id><snippet>sum</snippet></ROW><ROW><id>11625314</id><snippet>import operator
reduce(operator.add, seq)
</snippet></ROW><ROW><id>11625314</id><snippet>add</snippet></ROW><ROW><id>11625314</id><snippet>sum</snippet></ROW><ROW><id>11625314</id><snippet>add</snippet></ROW><ROW><id>11625314</id><snippet>sum</snippet></ROW><ROW><id>11625314</id><snippet>+</snippet></ROW><ROW><id>11625314</id><snippet>sum</snippet></ROW><ROW><id>11625314</id><snippet>sum( [SimpleLoc1, SimpleLoc2, SimpleLoc3], start=ComplexLoc() )
</snippet></ROW><ROW><id>11625314</id><snippet>__contains__</snippet></ROW><ROW><id>11625314</id><snippet>__iter__</snippet></ROW><ROW><id>11625314</id><snippet>__len__</snippet></ROW><ROW><id>11625314</id><snippet>__or__</snippet></ROW><ROW><id>11625314</id><snippet>+</snippet></ROW><ROW><id>11625314</id><snippet>__and__</snippet></ROW><ROW><id>11625314</id><snippet>xrange</snippet></ROW><ROW><id>11625314</id><snippet>[start, end)</snippet></ROW><ROW><id>11625314</id><snippet>SimpleLoc</snippet></ROW><ROW><id>11625314</id><snippet>CompoundLoc</snippet></ROW><ROW><id>11625363</id><snippet>if key_id:
    conn.execute("DELETE FROM temporary_data_key WHERE key='{0}'".format(guid))
</snippet></ROW><ROW><id>11625525</id><snippet>c_final[:,i]</snippet></ROW><ROW><id>11625525</id><snippet>np.dot(a,b)</snippet></ROW><ROW><id>11625525</id><snippet>(2,2)</snippet></ROW><ROW><id>11625525</id><snippet>c_final[:,i]</snippet></ROW><ROW><id>11625525</id><snippet>(2,1)</snippet></ROW><ROW><id>11625525</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.ones((2,2))
&gt;&gt;&gt; b = np.ones((2,1))
&gt;&gt;&gt; c_final = np.zeros((2,10))
&gt;&gt;&gt; np.dot(a,b)
array([[ 2.],
       [ 2.]])
&gt;&gt;&gt; np.dot(a,b).shape
(2, 1)
&gt;&gt;&gt; c_final[:,0]
array([ 0.,  0.])
&gt;&gt;&gt; c_final[:,0].shape
(2,)
&gt;&gt;&gt; np.broadcast(c_final[:,0],np.dot(a,b)).shape
(2, 2)
</snippet></ROW><ROW><id>11625525</id><snippet>np.dot(a,b)</snippet></ROW><ROW><id>11625525</id><snippet>np.squeeze</snippet></ROW><ROW><id>11625525</id><snippet>&gt;&gt;&gt; c_final[:,0] = np.dot(a,b).squeeze()
</snippet></ROW><ROW><id>11625779</id><snippet>&amp;[a-z]+;</snippet></ROW><ROW><id>11625779</id><snippet>import os, re
</snippet></ROW><ROW><id>11625779</id><snippet>def ignore_open( p ):
  temf = 'temp_file'
  with open(temf,'wt') as temp:
    o = open(p,'r')
    temp.write(re.sub("\&amp;[^\;]+;",'', o.read()))
  rs = open(temf)
  os.unlink(temf)
  return rs
</snippet></ROW><ROW><id>11625779</id><snippet>&gt;&gt;&gt; parser.parse(ignore_open(xmlFilePath))
</snippet></ROW><ROW><id>11625926</id><snippet>dt.datetime.strptime(s, '%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>11626138</id><snippet>&gt;&gt;&gt; def main():
...     def sub():
...         a=5
...         print a
... 
&gt;&gt;&gt; main.__code__.co_consts
(None, &lt;code object sub at 0x2111ad0, file "&lt;stdin&gt;", line 2&gt;)
&gt;&gt;&gt; exec main.__code__.co_consts[1]
5
</snippet></ROW><ROW><id>11626373</id><snippet>itertools.chain</snippet></ROW><ROW><id>11626373</id><snippet>open</snippet></ROW><ROW><id>11626373</id><snippet>import fileinput
for line in fileinput.input(['file1.txt', 'file2.txt']):
    print line
</snippet></ROW><ROW><id>11626373</id><snippet>from contextlib import closing

with closing(fileinput.input(['file1.txt', 'file2.txt'])) as infiles:
    for line in infiles:
        pass # stuff
</snippet></ROW><ROW><id>11626445</id><snippet>QString</snippet></ROW><ROW><id>11626445</id><snippet>unicode</snippet></ROW><ROW><id>11626445</id><snippet>str</snippet></ROW><ROW><id>11626445</id><snippet>QVariant</snippet></ROW><ROW><id>11626445</id><snippet>QByteArray</snippet></ROW><ROW><id>11626445</id><snippet>bytes</snippet></ROW><ROW><id>11626445</id><snippet>bytearray</snippet></ROW><ROW><id>11626445</id><snippet>QTableModel</snippet></ROW><ROW><id>11626445</id><snippet>QListModel</snippet></ROW><ROW><id>11626445</id><snippet>QAbstractTableModel</snippet></ROW><ROW><id>11626445</id><snippet>QAbstractListModel</snippet></ROW><ROW><id>11626890</id><snippet>match</snippet></ROW><ROW><id>11626890</id><snippet>search</snippet></ROW><ROW><id>11626890</id><snippet>\d</snippet></ROW><ROW><id>11626890</id><snippet>matches = re.search(r'\d+', theURL)
</snippet></ROW><ROW><id>11626983</id><snippet>from lxml.etree import etree</snippet></ROW><ROW><id>11626983</id><snippet>from lxml import etree</snippet></ROW><ROW><id>11626983</id><snippet>lxml.etree.getroot(...)</snippet></ROW><ROW><id>11626983</id><snippet>lxml.</snippet></ROW><ROW><id>11626983</id><snippet>getroot()</snippet></ROW><ROW><id>11626983</id><snippet>etree.parse</snippet></ROW><ROW><id>11627410</id><snippet>request.POST['fieldname']</snippet></ROW><ROW><id>11627410</id><snippet>form = cgi.FieldStorage()
# for multiple elements with same name or elements with multiple values
a_list = form.getlist("multiple_select_input")
# For single value elements
if "single_value_input" in form:
    x = form["single_value_input"].value
else:
    x = "default value"
# or
x = form.getvalue("single_value_input", "default value")
</snippet></ROW><ROW><id>11627903</id><snippet>GetQuadrangleSubPix</snippet></ROW><ROW><id>11627903</id><snippet>theta</snippet></ROW><ROW><id>11627903</id><snippet>from cv2 import cv
import numpy as np

def subimage(image, centre, theta, width, height):
   output_image = cv.CreateImage((width, height), image.depth, image.nChannels)
   mapping = np.array([[np.cos(theta), -np.sin(theta), centre[0]],
                       [np.sin(theta), np.cos(theta), centre[1]]])
   map_matrix_cv = cv.fromarray(mapping)
   cv.GetQuadrangleSubPix(image, output_image, map_matrix_cv)
   return output_image
</snippet></ROW><ROW><id>11627903</id><snippet>GetQuadrangleSubPix</snippet></ROW><ROW><id>11627903</id><snippet>im = cv.LoadImage('owl.jpg')
patch = subimage(im, (110, 125), np.pi / 6.0, 100, 200)
cv.SaveImage('patch.jpg', patch)
</snippet></ROW><ROW><id>11627995</id><snippet>import traceback
try:
    ... your script ...
except:
    traceback.print_exc()

raw_input("Press Enter to close") # Python 2
input("Press Enter to close") # Python 3
</snippet></ROW><ROW><id>11629006</id><snippet>DictCursor</snippet></ROW><ROW><id>11629006</id><snippet>cur = con.cursor(MySQLdb.cursors.DictCursor)
</snippet></ROW><ROW><id>11629116</id><snippet>class option(models.Model):
    warval =models.ForeignKey(war, null=True)
    value = models.CharField(max_length=10)
</snippet></ROW><ROW><id>11629352</id><snippet>csv.DictReader</snippet></ROW><ROW><id>11629352</id><snippet>with open('in.csv') as fin, open('out.csv', 'wb') as fout:
   csvin = csv.reader(fin)
   csvout = csv.writer(fout)
   try:
       header = next(csvin)
       csvout.writerow(header)
   except StopIeration as e:
       pass # empty file - either handle, or we'll just continue and drop out of loop

   for row in csvin:
       csvout.writerow(row) # do some real work here...
</snippet></ROW><ROW><id>11629366</id><snippet>[[[b_n, b_p, b_s[-4:]], change, [a_n, a_p, a_s[:4]]]
 for (b_n, b_p, b_s), change, (a_n, a_p, a_s) in results]
</snippet></ROW><ROW><id>11629366</id><snippet>zip</snippet></ROW><ROW><id>11629366</id><snippet>slice</snippet></ROW><ROW><id>11629366</id><snippet>[[[num, position, text[op]]
  for (num, position, text), op in zip(chunk, [slice(-4, None), slice(None), slice(4)])]
 for chunk in results]
</snippet></ROW><ROW><id>11629384</id><snippet>__add__</snippet></ROW><ROW><id>11629384</id><snippet>__getattr__</snippet></ROW><ROW><id>11629384</id><snippet>__add__ = (10).__add__</snippet></ROW><ROW><id>11629384</id><snippet>def __add__(self, *args): return self.data.__add__(*args)
def __sub__(self, *args): return self.data.__sub__(*args)
# ...
</snippet></ROW><ROW><id>11629526</id><snippet>mapping</snippet></ROW><ROW><id>11629526</id><snippet>process = mapping.get(item, default_encode)
</snippet></ROW><ROW><id>11629526</id><snippet>if encodinghex in process:
</snippet></ROW><ROW><id>11629526</id><snippet>in</snippet></ROW><ROW><id>11629526</id><snippet>Iterable</snippet></ROW><ROW><id>11629526</id><snippet>mapping.get()</snippet></ROW><ROW><id>11629526</id><snippet>if process == encodinghex:
</snippet></ROW><ROW><id>11629526</id><snippet>base64.encodestring, urllib.quote_plus, encodinghex, base64.decodestring, urllib.unquote_plus, decodinghex</snippet></ROW><ROW><id>11629562</id><snippet>summing_period</snippet></ROW><ROW><id>11629562</id><snippet>datetime</snippet></ROW><ROW><id>11629562</id><snippet>&gt;&gt;&gt; timedelta(days=datetime.now())
TypeError: unsupported type for timedelta days component: datetime.datetime

&gt;&gt;&gt; timedelta(days=5)
datetime.timedelta(5)
</snippet></ROW><ROW><id>11629586</id><snippet>&lt;data&gt;</snippet></ROW><ROW><id>11629586</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>11629586</id><snippet>data = '''&lt;data&gt;
    &lt;from&gt;A&lt;/from&gt;
    &lt;to&gt;B&lt;/to&gt;
    &lt;data&gt;
        &lt;name&gt;EXAMPLE ONE&lt;/name&gt;
        &lt;info&gt;
            &lt;some_data&gt;1&lt;/some_data&gt;
            &lt;more_data&gt;2&lt;/more_data&gt;
        &lt;/info&gt;
        &lt;random&gt;
            &lt;some_tag&gt;
            &lt;/foobar&gt;
            &lt;foo&gt;
                &lt;bar /&gt;
           &lt;/foo&gt;
        &lt;/random&gt;
    &lt;/data&gt;
    &lt;data&gt;
        &lt;name&gt;EXAMPLE TWO&lt;/name&gt;
        &lt;info&gt;
            &lt;some_data&gt;3&lt;/some_data&gt;
            &lt;more_data&gt;4&lt;/more_data&gt;
        &lt;/info&gt;
        &lt;random&gt;
            &lt;some_tag&gt;
            &lt;/foobar&gt;
            &lt;foo&gt;
                &lt;bar /&gt;
           &lt;/foo&gt;
        &lt;/random&gt;
   &lt;/data&gt;
&lt;/data&gt;
&lt;data&gt;
    &lt;from&gt;C&lt;/from&gt;
    &lt;to&gt;D&lt;/to&gt;
    &lt;data&gt;
        &lt;name&gt;EXAMPLE&lt;/name&gt;
        &lt;info&gt;
            &lt;some_data&gt;1&lt;/some_data&gt;
            &lt;more_data&gt;2&lt;/more_data&gt;
        &lt;/info&gt;
        &lt;random&gt;
            &lt;some_tag&gt;
            &lt;/foobar&gt;
            &lt;foo&gt;
                &lt;bar /&gt;
           &lt;/foo&gt;
        &lt;/random&gt;
    &lt;/data&gt;
 &lt;/data&gt;'''
</snippet></ROW><ROW><id>11629586</id><snippet>from BeautifulSoup import BeautifulSoup
from pprint import pprint

store = {}
key = ()

soup = BeautifulSoup(data)

recs = soup.findAll('data')

for rec in recs:
    if rec.find('from'):
        key = (rec.find('from').text, 
               rec.find('to').text)
    else:
        item = {}
        item['name'] = rec.find('name').text
        item['some_data'] = rec.find('info').find('some_data').text
        item['more_data'] = rec.find('info').find('more_data').text
        if store.has_key(key):
            store[key].append(item)
        else:
            store[key] = [ item ]

pprint(store)
</snippet></ROW><ROW><id>11629586</id><snippet>{(u'A', u'B'): [{'more_data': u'2',
                 'name': u'EXAMPLE ONE',
                 'some_data': u'1'},
                {'more_data': u'4',
                 'name': u'EXAMPLE TWO',
                 'some_data': u'3'}],
 (u'C', u'D'): [{'more_data': u'2', 'name': u'EXAMPLE', 'some_data': u'1'}]}
</snippet></ROW><ROW><id>11629609</id><snippet>list</snippet></ROW><ROW><id>11629609</id><snippet>list</snippet></ROW><ROW><id>11629609</id><snippet>if n in list == True:</snippet></ROW><ROW><id>11629609</id><snippet>1 in [0, 1] == True</snippet></ROW><ROW><id>11629609</id><snippet>False</snippet></ROW><ROW><id>11629609</id><snippet>1 in [0,1] == True</snippet></ROW><ROW><id>11629609</id><snippet>1 in [0,1] and [0,1] == True</snippet></ROW><ROW><id>11629609</id><snippet>if n in li:</snippet></ROW><ROW><id>11629609</id><snippet>if n not in li:</snippet></ROW><ROW><id>11629609</id><snippet>Error</snippet></ROW><ROW><id>11629609</id><snippet>li = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]

def find_prime(li, n):
    if n in li:
        print "It's in there already."
    else:
        li.append(n)
        print "It's in there now."
</snippet></ROW><ROW><id>11629846</id><snippet>-e</snippet></ROW><ROW><id>11629846</id><snippet>pip install -e git+https://bitbucket.org/DataGreed/django-paramfield.git#egg=django-paramfield</snippet></ROW><ROW><id>11629846</id><snippet>pip freeze</snippet></ROW><ROW><id>11629846</id><snippet>-e</snippet></ROW><ROW><id>11629846</id><snippet>/path/to/venv/src/packagename</snippet></ROW><ROW><id>11629846</id><snippet>python setup.py deploy</snippet></ROW><ROW><id>11629846</id><snippet>python setup.py install</snippet></ROW><ROW><id>11629859</id><snippet>from scrapy import log
from scrapy.contrib.spiders import XMLFeedSpider
from myproject.items import TestItem

class MySpider(XMLFeedSpider):
    name = 'example.com'
    allowed_domains = ['example.com']
    start_urls = ['http://www.example.com/feed.xml']
    iterator = 'iternodes' # This is actually unnecesary, since it's the default value
    itertag = 'item'

    def parse_node(self, response, node):
        log.msg('Hi, this is a &lt;%s&gt; node!: %s' % (self.itertag, ''.join(node.extract())))

        item = Item()
        item['id'] = node.select('@id').extract()
        item['name'] = node.select('name').extract()
        item['description'] = node.select('description').extract()
        return item
</snippet></ROW><ROW><id>11629859</id><snippet>def get_file(self, dir, url, name):
    s = urllib2.urlopen(url)
    f = open('xml/test.xml','w')
    meta = s.info()
    file_size = int(meta.getheaders("Content-Length")[0])
    print "Downloading: %s Bytes: %s" % (name, file_size)
    current_file_size = 0
    block_size = 4096
    while True:
        buf = s.read(block_size)
        if not buf:
            break
        current_file_size += len(buf)
        f.write(buf)
        status = ("\r%10d  [%3.2f%%]" %
                 (current_file_size, current_file_size * 100. / file_size))
        status = status + chr(8)*(len(status)+1)
        sys.stdout.write(status)
        sys.stdout.flush()
    f.close()
    print "\nDone getting feed"
    return 1
</snippet></ROW><ROW><id>11629859</id><snippet>for event, elem in iterparse('xml/test.xml'):
        if elem.tag == "properties":
            print elem.text
</snippet></ROW><ROW><id>11630016</id><snippet>if any(n % x == 0 for x in mylist):
    print "Not Prime"
</snippet></ROW><ROW><id>11630087</id><snippet>key</snippet></ROW><ROW><id>11630087</id><snippet>min()</snippet></ROW><ROW><id>11630087</id><snippet>from functools import partial

def distance_squared(x, y):
    return (x[0] - y[0])**2 + (x[1] - y[1])**2

print min(big_list, key=partial(distance_squared, list_a))
</snippet></ROW><ROW><id>11630115</id><snippet>aes</snippet></ROW><ROW><id>11630115</id><snippet>from Crypto.Cipher import AES
from Crypto.Hash import SHA256

def sha1(text):
    s = SHA256.new()
    s.update(text)
    return s.hexdigest()

aes = AES.new('JG9A90cqiveJ8K7n', AES.MODE_CFB, 'g4vhFIR1KncRIyvO')

text = 'This is some text that will be encrypted'
encrypted_text = aes.encrypt(text)

aes = AES.new('JG9A90cqiveJ8K7n', AES.MODE_CFB, 'g4vhFIR1KncRIyvO')
decrypted_text = aes.decrypt(encrypted_text)

print 'Original:\t' + sha1(text)
print 'Encrypted:\t' + sha1(encrypted_text)
print 'Decrypted:\t' + sha1(decrypted_text)
</snippet></ROW><ROW><id>11630180</id><snippet>3</snippet></ROW><ROW><id>11630180</id><snippet>0:0</snippet></ROW><ROW><id>11630180</id><snippet>1:1</snippet></ROW><ROW><id>11630180</id><snippet>2:2</snippet></ROW><ROW><id>11630180</id><snippet>string.count(s, "")</snippet></ROW><ROW><id>11630180</id><snippet>s.count("")</snippet></ROW><ROW><id>11630180</id><snippet>len(s) + 1</snippet></ROW><ROW><id>11630180</id><snippet>string.count()</snippet></ROW><ROW><id>11630180</id><snippet>def count(s, sub):
    result = 0
    for i in range(len(s) + 1 - len(sub)):
        result += (s[i:i + len(sub)] == sub)
    return result
</snippet></ROW><ROW><id>11630421</id><snippet>--script-dir=DIR, -s DIR</snippet></ROW><ROW><id>11630421</id><snippet>--install-option</snippet></ROW><ROW><id>11630421</id><snippet>pip</snippet></ROW><ROW><id>11630421</id><snippet>develop</snippet></ROW><ROW><id>11630421</id><snippet>python2.6</snippet></ROW><ROW><id>11630421</id><snippet>sys</snippet></ROW><ROW><id>11630421</id><snippet>
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.prefix
&gt;&gt;&gt; sys.exec_prefix
</snippet></ROW><ROW><id>11630421</id><snippet>distutils.sysconfig</snippet></ROW><ROW><id>11630449</id><snippet>%</snippet></ROW><ROW><id>11630449</id><snippet>printf()</snippet></ROW><ROW><id>11630449</id><snippet>s</snippet></ROW><ROW><id>11630449</id><snippet>%(name)s</snippet></ROW><ROW><id>11630449</id><snippet>stringification' formats, i.e.</snippet></ROW><ROW><id>11630449</id><snippet>or</snippet></ROW><ROW><id>11630449</id><snippet>.format()</snippet></ROW><ROW><id>11630565</id><snippet>subprocess</snippet></ROW><ROW><id>11630565</id><snippet>anotherprogram.exe</snippet></ROW><ROW><id>11630565</id><snippet>cat</snippet></ROW><ROW><id>11630565</id><snippet>s='''
Username: Bob
Password: Coolness

'''

from subprocess import Popen,PIPE
p = Popen(['cat','-'], stdin=PIPE, stdout=PIPE)
stdoutdata, _ = p.communicate(s)
</snippet></ROW><ROW><id>11630565</id><snippet>-</snippet></ROW><ROW><id>11630565</id><snippet>anotherprogram.exe</snippet></ROW><ROW><id>11630848</id><snippet>clean_value</snippet></ROW><ROW><id>11630848</id><snippet>self.cleaned_data</snippet></ROW><ROW><id>11630848</id><snippet>self.data</snippet></ROW><ROW><id>11630848</id><snippet>self.data</snippet></ROW><ROW><id>11630848</id><snippet>value</snippet></ROW><ROW><id>11630848</id><snippet>form-0-</snippet></ROW><ROW><id>11630848</id><snippet>def clean_value(self):
    value = self.cleaned_data['value']
    if value == 'lol@lol.co':
        raise forms.ValidationError("This can't be your email address")
    return value
</snippet></ROW><ROW><id>11630860</id><snippet>.fetchone()</snippet></ROW><ROW><id>11630860</id><snippet>from itertools import chain
try:
    first_row = next(results)
    for row in chain((first_row,), results):
        pass # do something
except StopIteration as e:
    pass # 0 results
</snippet></ROW><ROW><id>11631096</id><snippet>main</snippet></ROW><ROW><id>11631096</id><snippet>attach database 'Capacity.db' as WeekAgo;
drop table if exists main.maximums;
create table main.maximums (Element TEXT UNIQUE, Score NUMBER , Report TEXT);
insert into main.maximums (Element, Score, Report) select * from WeekAgo.maximums;
</snippet></ROW><ROW><id>11631244</id><snippet>GI</snippet></ROW><ROW><id>11631288</id><snippet>os.startfile()</snippet></ROW><ROW><id>11631366</id><snippet>data is not None or data != ""</snippet></ROW><ROW><id>11631366</id><snippet>data is not None and data != ""</snippet></ROW><ROW><id>11631366</id><snippet>elif counter == 3 and data:</snippet></ROW><ROW><id>11632185</id><snippet>from collections import Counter
c1 = Counter({'item1': 4, 'item2':2, 'item3': 5, 'item4': 3})
c2 = Counter({'item1': 6, 'item2':2, 'item3': 1, 'item5': 9})
c3 = {}
for c in (c1, c2):
    for k,v in c.iteritems():
        c3.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>11632185</id><snippet>c3</snippet></ROW><ROW><id>11632185</id><snippet>{'item1': [4, 6], 'item2': [2, 2], 'item3': [5, 1], 'item4': [3], 'item5': [9]}</snippet></ROW><ROW><id>11632508</id><snippet>class FixtureSuite(unittest.TestSuite):
    def run(self, result, debug=False):
        socket.setdefaulttimeout(30)
        super().run(result, debug)
        socket.setdefaulttimeout(None)
...
suite1 = unittest.TestSuite(testCases)
suite2 = FixtureSuite(testCases)
fullSuite = unittest.TestSuite([suite1,suite2])
unittest.TextTestRunner(verbosity=2).run(fullSuite)
</snippet></ROW></DATA>