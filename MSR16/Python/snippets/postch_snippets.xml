<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>13477453</id><snippet>.png</snippet></ROW><ROW><id>13477453</id><snippet>.jpg</snippet></ROW><ROW><id>13477453</id><snippet>bc = barcode('qrcode',
    'Hello Barcode Writer In Pure PostScript.',
    options=dict(version=9, eclevel='M'), 
    margin=10, data_mode='8bits')
bc.save('yourfile.jpg')
</snippet></ROW><ROW><id>13477453</id><snippet>bc.save('yourfile.jpg', 'JPEG')
</snippet></ROW><ROW><id>13477453</id><snippet>gs</snippet></ROW><ROW><id>13477518</id><snippet>In [1]: keys = ['Orange','Blue','Green']

In [2]: colors={key:[] for key in keys}

In [3]: colors
Out[3]: {'Blue': [], 'Green': [], 'Orange': []}
</snippet></ROW><ROW><id>13477518</id><snippet>In [4]: colors=dict((key,[]) for key in keys)

In [5]: colors
Out[5]: {'Blue': [], 'Green': [], 'Orange': []}
</snippet></ROW><ROW><id>13477577</id><snippet>zip()</snippet></ROW><ROW><id>13477577</id><snippet>In [7]: lis=['abc' , 'def', 'ghi']

In [9]: [list(x) for x in zip(*lis)]
Out[9]: [['a', 'd', 'g'], ['b', 'e', 'h'], ['c', 'f', 'i']]
</snippet></ROW><ROW><id>13477577</id><snippet>map()</snippet></ROW><ROW><id>13477577</id><snippet>In [11]: map(list,zip(*lis))
Out[11]: [['a', 'd', 'g'], ['b', 'e', 'h'], ['c', 'f', 'i']]
</snippet></ROW><ROW><id>13477708</id><snippet>groupby</snippet></ROW><ROW><id>13477708</id><snippet>for key, group in IT.groupby(reader, key = mykey):
</snippet></ROW><ROW><id>13477708</id><snippet>reader</snippet></ROW><ROW><id>13477708</id><snippet>mykey</snippet></ROW><ROW><id>13477708</id><snippet>def mykey(row):
    return (row['mrn'], row['specimen_id'], row['lab_num'])
</snippet></ROW><ROW><id>13477708</id><snippet>reader</snippet></ROW><ROW><id>13477708</id><snippet>mykey</snippet></ROW><ROW><id>13477708</id><snippet>group</snippet></ROW><ROW><id>13477708</id><snippet>row</snippet></ROW><ROW><id>13477708</id><snippet>line.rstrip("\n").split("\t")</snippet></ROW><ROW><id>13477708</id><snippet>row[3]</snippet></ROW><ROW><id>13477708</id><snippet>row['lab_num']</snippet></ROW><ROW><id>13477708</id><snippet>import itertools as IT
import csv

inFile = 'curious.dat'
outFile = 'curious.out'

def mykey(row):
    return (row['mrn'], row['specimen_id'], row['lab_num'])

fieldnames = 'mrn specimen_id date    lab_num Bilirubin   Lipase  Calcium Magnesium   Phosphate'.split()

with open(inFile, 'rb') as ifd:
    reader = csv.DictReader(ifd, delimiter = '\t')
    with open(outFile, 'wb') as ofd:
        writer = csv.DictWriter(
            ofd, fieldnames, delimiter = '\t', lineterminator = '\n', )
        writer.writeheader()
        for key, group in IT.groupby(reader, key = mykey):
            new = {}
            row = next(group)
            for key in ('mrn', 'specimen_id', 'date', 'lab_num'):
                new[key] = row[key]
                new[row['labtest']] = row['result_val']                
            for row in group:
                new[row['labtest']] = row['result_val']
            writer.writerow(new)
</snippet></ROW><ROW><id>13477708</id><snippet>mrn specimen_id date    lab_num Bilirubin   Lipase  Calcium Magnesium   Phosphate
4419529 1614487 26.2675 5802791G    0.1             
3319529 1614487 26.2675 5802791G    0.3 153 8.1 2.1 4
5713871 682571  56.0779 9732266E                    4.1
</snippet></ROW><ROW><id>13477801</id><snippet>template_dir = os.path.abspath(
               os.path.join(os.path.dirname(__file__),
                            '../Frontend/templates'))
</snippet></ROW><ROW><id>13477954</id><snippet>type(1).__name__</snippet></ROW><ROW><id>13478041</id><snippet>def reportCSV(t):
    result = []
    for t_key, t_value in t.iteritems():
        for p_key, p_value in t_value.iteritems():
            for w_key, w_value in p_value.iteritems():
                row_data = t_key, p_key, w_key, w_value
                result.append(','.join(row_data))
    return '\n'.join(result)
</snippet></ROW><ROW><id>13478041</id><snippet>iteritems()</snippet></ROW><ROW><id>13478240</id><snippet>str_array</snippet></ROW><ROW><id>13478240</id><snippet>def mykey(text):
    numtxt, name = text.rsplit('-',1)
    numtxt = int(numtxt.replace('-',''))
    return (numtxt, name)

new_str = sorted(str_array, key = mykey)
</snippet></ROW><ROW><id>13478240</id><snippet>In [30]: sorted(['12-34-5678-09-PHOTO', '12-34-5678-09-MOTOR', '12-04-5678-09-PHOTO', ], key = mykey)
Out[30]: ['12-04-5678-09-PHOTO', '12-34-5678-09-MOTOR', '12-34-5678-09-PHOTO']
</snippet></ROW><ROW><id>13478240</id><snippet>sorted</snippet></ROW><ROW><id>13478240</id><snippet>str_array</snippet></ROW><ROW><id>13478240</id><snippet>str_array.sort(key = mykey)
</snippet></ROW><ROW><id>13478276</id><snippet>movie_records = sorted([(m['total_tickets'], m) for m in db.movies.find()])

# Select distinct on total_tickets
distinct_records = []
prev = None
while movie_records:
    record = movie_records.pop(0)
    if record[0] != prev:
        prev = record[0]
        distinct_records.append(record[1])

for index, movie in enumerate(distinct_records):
    tickets_pvalue = 1 - (index + 1.0) / len(distinct_records)
    shows.update({"id": movie["id"]},
                 {'$set': {"total_tickets_pvalue": tickets_pvalue}})
</snippet></ROW><ROW><id>13478338</id><snippet>x == 1 # x is less than 10, so it is doubled
x == 2 # x is less than 10, so it is doubled
x == 4 # x is less than 10, so it is doubled
x == 8 # x is less than 10, so it is doubled
x == 16 # now x is greater than 10, so it is not doubled again
</snippet></ROW><ROW><id>13478390</id><snippet>get()</snippet></ROW><ROW><id>13478390</id><snippet># Here we don't have to compare to anything because a match will return True
if result.get('Tags', None):
    dtags = result["Tags"]
    dotags = '#' + ' #'.join(dtags)
else:
    dotags = ""
</snippet></ROW><ROW><id>13478503</id><snippet>obj = RSA
</snippet></ROW><ROW><id>13478503</id><snippet>obj</snippet></ROW><ROW><id>13478503</id><snippet>RSA</snippet></ROW><ROW><id>13478503</id><snippet>RSA</snippet></ROW><ROW><id>13478503</id><snippet>obj().fast_powering(…)
</snippet></ROW><ROW><id>13478503</id><snippet>RSA</snippet></ROW><ROW><id>13478503</id><snippet>fast_powering</snippet></ROW><ROW><id>13478503</id><snippet>RSA</snippet></ROW><ROW><id>13478503</id><snippet>__init__</snippet></ROW><ROW><id>13478503</id><snippet>&gt;&gt;&gt; class RSA:
...   def __init__(self):
...     print("foo")
... 
&gt;&gt;&gt; obj = RSA
&gt;&gt;&gt; obj() is obj()
foo
foo
False
</snippet></ROW><ROW><id>13478503</id><snippet>obj() is obj()</snippet></ROW><ROW><id>13478503</id><snippet>&gt;&gt;&gt; class RSA:
...   def __init__(self):
...     print("foo")
... 
&gt;&gt;&gt; obj = RSA()
foo
&gt;&gt;&gt; obj is obj
True
</snippet></ROW><ROW><id>13478726</id><snippet>QWebPage</snippet></ROW><ROW><id>13478726</id><snippet>userAgentForUrl</snippet></ROW><ROW><id>13478726</id><snippet>QWebView</snippet></ROW><ROW><id>13478726</id><snippet>setPage</snippet></ROW><ROW><id>13479041</id><snippet>sys.path.append(os.path.join(os.path.abspath('.'), 'backend'))
</snippet></ROW><ROW><id>13479058</id><snippet>indices = [i for i, x in enumerate(my_list) if x == "whatever"]</snippet></ROW><ROW><id>13479058</id><snippet># Create an empty list
indices = []
# Step through your target list, pulling out the tuples you mention above
for index, value in enumerate(my_list):
    # If the current value matches something, append the index to the list
    if value == 'whatever':
        indices.append(index)
</snippet></ROW><ROW><id>13479058</id><snippet>for</snippet></ROW><ROW><id>13479058</id><snippet>In [1]: my_list = [['one', 'two'], ['three', 'four', 'two']]

In [2]: l = [item for inner_list in my_list for item in inner_list if item == 'two']

In [3]: l
Out[3]: ['two', 'two']
</snippet></ROW><ROW><id>13479058</id><snippet>l = []
for inner_list in my_list:
  for item in inner_list:
    if item == 'two':
      l.append(item)
</snippet></ROW><ROW><id>13479195</id><snippet>round()</snippet></ROW><ROW><id>13479195</id><snippet>In [23]: round(66.66666666666,4)
Out[23]: 66.6667

In [24]: round(1.29578293,6)
Out[24]: 1.295783
</snippet></ROW><ROW><id>13479195</id><snippet>round()</snippet></ROW><ROW><id>13479218</id><snippet>im = PIL.Image.open(fname)
try:
    im.tag[37724]
    layers = True
except:
    layers = False
</snippet></ROW><ROW><id>13479289</id><snippet>supervisord</snippet></ROW><ROW><id>13479500</id><snippet>'example2.log'</snippet></ROW><ROW><id>13479500</id><snippet>from logging_tree import printout  # pip install logging_tree
printout()
</snippet></ROW><ROW><id>13479500</id><snippet>FileHandler()</snippet></ROW><ROW><id>13479500</id><snippet>logging.basicConfig()</snippet></ROW><ROW><id>13479500</id><snippet>handlers</snippet></ROW><ROW><id>13479500</id><snippet>handlers</snippet></ROW><ROW><id>13479743</id><snippet>Links = WykopLinks(API)
TypeError: 'module' object is not callable
</snippet></ROW><ROW><id>13479743</id><snippet>WykopLinks</snippet></ROW><ROW><id>13479743</id><snippet>WykopLinks</snippet></ROW><ROW><id>13479947</id><snippet>\w+</snippet></ROW><ROW><id>13479947</id><snippet>In [37]: strs
Out[37]: 'FX0XST001ALF89  OLIGO: Bacillus_cand1=ATGCGGTTCAAAATGTTATC      \nFILE:/home/AAFC-AAC/fungs/biodiversity/pipelines/454PipelineOutput/v7_newest_testrun_full/rs75/plate1/FX0XST001.MID13/FX0XST001.MID13.sff.trim.fasta    \nProject: SAGES  SFF: FX0XST001  SFF.MID: FX0XST001.MID13    \nPlate: 1.1     MID_all: MID13   MID: 13 Sample: BK104   \nCollector: BK   Year: 2008  Week:   Year_Week:  \nLocation: Ottawa_ON     City: Ottawa    Province: ON    Crop:   \nTreatment:    Substrate_all: Air    Substrate: Air  Target: Bacteria    \nForward Primer: Bac16S27F   Reverse Primer: Bac16S690R  Taq: T'

In [38]: re.findall(r"\w+:\s\w+",strs)
Out[38]: 
['OLIGO: Bacillus_cand1',
 'Project: SAGES',
 'SFF: FX0XST001',
 'MID: FX0XST001',
 'Plate: 1',
 'MID_all: MID13',
 'MID: 13',
 'Sample: BK104',
 'Collector: BK',
 'Year: 2008',
 'Location: Ottawa_ON',
 'City: Ottawa',
 'Province: ON',
 'Substrate_all: Air',
 'Substrate: Air',
 'Target: Bacteria',
 'Primer: Bac16S27F',
 'Primer: Bac16S690R',
 'Taq: T']
</snippet></ROW><ROW><id>13479947</id><snippet>In [39]: dict(x.split(":") for x in  re.findall(r"\w+:\s\w+",strs))
Out[39]: 
{'City': ' Ottawa',
 'Collector': ' BK',
 'Location': ' Ottawa_ON',
 'MID': ' 13',
 'MID_all': ' MID13',
 'OLIGO': ' Bacillus_cand1',
 'Plate': ' 1',
 'Primer': ' Bac16S690R',
 'Project': ' SAGES',
 'Province': ' ON',
 'SFF': ' FX0XST001',
 'Sample': ' BK104',
 'Substrate': ' Air',
 'Substrate_all': ' Air',
 'Taq': ' T',
 'Target': ' Bacteria',
 'Year': ' 2008'}
</snippet></ROW><ROW><id>13479969</id><snippet>import csv, simplejson, decimal, codecs

data = open("in.csv")
reader = csv.DictReader(data, delimiter=",", quotechar='"')

with codecs.open("out.json", "w", encoding="utf-8") as out:
   for r in reader:
      for k, v in r.items():
         # make sure nulls are generated
         if not v:
            r[k] = None
         # parse and generate decimal arrays
         elif k == "loc":
            r[k] = [decimal.Decimal(n) for n in v.strip("[]").split(",")]
         # generate a number
         elif k == "geonameid":
            r[k] = int(v)
      out.write(simplejson.dumps(r, ensure_ascii=False, use_decimal=True)+"\n")
</snippet></ROW><ROW><id>13480110</id><snippet>&lt;synced&gt;</snippet></ROW><ROW><id>13480110</id><snippet>from __future__ import unicode_literals
from xml.etree import cElementTree as etree

tree = etree.parse('sync_list.xml')
synced = tree.find('synced')
for filename in ["file\u00b9", "file2", "file3"]:
    sfile = etree.SubElement(synced, "sfile", name="Filename")
    sfile.text = filename

tree.write('sync_list_appended.xml', encoding='utf-8', xml_declaration=True)
</snippet></ROW><ROW><id>13480133</id><snippet>extends</snippet></ROW><ROW><id>13480133</id><snippet> {% extends base_template %}
</snippet></ROW><ROW><id>13480133</id><snippet>from jinja2 import Environment, Template, FileSystemLoader
env = Environment(loader = FileSystemLoader(["../templatedir"])
t = env.get_template("child.html")
print t.render(base_template="parent_template.html")
</snippet></ROW><ROW><id>13480139</id><snippet>try:
1
try:
1+1=2 -&gt;fail-&gt;id-1=1
try:
1+1=2 -&gt;fail-&gt;id-1=1
try:
1+1=2 -&gt;fail-&gt;id-1=1
try:
1+1=2 -&gt;fail-&gt;id-1=1
....
</snippet></ROW><ROW><id>13480397</id><snippet>import fnmatch
import os

path = os.path.expanduser('~/documents')
tree = ET.parse("sync_list.xml")
root = tree.getroot()
synced = [elt.text for elt in root.findall('synced/sfile')]
for filename in os.listdir(path):
    if fnmatch.fnmatch(filename, '*.blah') and filename not in synced:
        filename = os.path.join(path, filename)
</snippet></ROW><ROW><id>13480466</id><snippet>i = 1
n = 100
while i&lt;n:
    print x1, x2
    m =  (f(x2)- f(x1))/(x2-x1)
    b = f(x2) - m*(x2) 
    p = -b/m #root for this line

    # are we close enough?
    if abs(f(p)) &lt; epsilon:
        print ('The root is at ',p,'after',i,'iterations')
        break
    i+= 1

    x1 = x2
    x2 = p
</snippet></ROW><ROW><id>13480466</id><snippet>1 2
2 1.52648748495
1.52648748495 1.75820676726
1.75820676726 1.7754676477
('The root is at ', 1.7724406948343991, 'after', 4, 'iterations')
</snippet></ROW><ROW><id>13480504</id><snippet>from yourscriptname import a
</snippet></ROW><ROW><id>13480504</id><snippet>.py</snippet></ROW><ROW><id>13480504</id><snippet>foo.py</snippet></ROW><ROW><id>13480504</id><snippet>foo</snippet></ROW><ROW><id>13480752</id><snippet>linelist</snippet></ROW><ROW><id>13480752</id><snippet>[[*,*,*,TXT1],[TXT2],[TXT3],[*,*,*,TXT4],...]</snippet></ROW><ROW><id>13480752</id><snippet>newoutput = []
for item in linelist:
   if len(item) == 1:
       newoutput[-1][-1] += item[0]
   else:
       newoutput.append(item)
</snippet></ROW><ROW><id>13480752</id><snippet>[
    [*,*,*,TXT1+TXT2+TXT3],
    ...
]
</snippet></ROW><ROW><id>13480752</id><snippet>&gt;&gt;&gt; a
[['.', '.', '.', 'a'], ['b'], ['c'], ['.', '.', '.', 'd'], ['.', '.', '.', 'e']]

&gt;&gt;&gt; newoutput = []
&gt;&gt;&gt; for item in a:
...   if len(item) == 1:
...     newoutput[-1][-1] += item[0]
...   else:
...     newoutput.append(item)
...
&gt;&gt;&gt; newoutput
[['.', '.', '.', 'abc'], ['.', '.', '.', 'd'], ['.', '.', '.', 'e']]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13480857</id><snippet>from collections import deque
def survivor(names, step):     
    circle = deque(names)
    while len(circle) &gt; 1:
        circle.rotate(1-step)
        print circle.popleft()
    return circle[0]
</snippet></ROW><ROW><id>13480857</id><snippet>In [17]: crew = ["Andrew", "Brenda", "Craig", "Deidre",
   ....: "Edward", "Felicity", "Greg", "Harriet"]

In [18]: survivor(crew, 2)
Brenda
Deidre
Felicity
Harriet
Craig
Greg
Edward
Out[18]: 'Andrew'

In [19]: survivor(crew, 3)
Craig
Felicity
Andrew
Edward
Brenda
Harriet
Deidre
Out[19]: 'Greg'
</snippet></ROW><ROW><id>13480927</id><snippet>__instancecheck__</snippet></ROW><ROW><id>13481049</id><snippet>StringIO</snippet></ROW><ROW><id>13481049</id><snippet>import sys
import re
from StringIO import StringIO

def test():
    overwrite = raw_input("The file exists, overwrite? ")
    notify = raw_input("This file is marked for notifies.  Notify?")
    sys.__stdout__.write("Overwrite: %s, Notify: %s" % (overwrite,notify))

class Catcher(object):
    def __init__(self, stdin):
        self.stdin = stdin

    def write(self, msg):
        if re.search("The file exists, overwrite?", msg):
            self.stdin.truncate(0)
            self.stdin.write('yes\n')
            self.stdin.seek(0)
        if re.search("This file is marked for notifies.  Notify?", msg):
            self.stdin.truncate(0)
            self.stdin.write('no\n')
            self.stdin.seek(0)

sys.stdin = StringIO()
sys.stdout = Catcher(sys.stdin)
test()
</snippet></ROW><ROW><id>13481256</id><snippet>import re

re.findall(r'[a-zA-Z]+',input_string)
</snippet></ROW><ROW><id>13481256</id><snippet>regexp=re.compile(r'[a-zA-Z]+')
regexp.findall(test)
</snippet></ROW><ROW><id>13481256</id><snippet>re.findall(r'[a-zA-Z']+',input_string)
</snippet></ROW><ROW><id>13481440</id><snippet>i += 1

i += 1

i = 1 if j == 2 else 0
</snippet></ROW><ROW><id>13481512</id><snippet>daemon</snippet></ROW><ROW><id>13481512</id><snippet>queue</snippet></ROW><ROW><id>13481512</id><snippet>daemon</snippet></ROW><ROW><id>13481512</id><snippet>queue.join</snippet></ROW><ROW><id>13481512</id><snippet>Queue</snippet></ROW><ROW><id>13481684</id><snippet>sorted(myDict.iteritems(), key=lambda x: x[1][0][1])
</snippet></ROW><ROW><id>13481684</id><snippet>iteritems</snippet></ROW><ROW><id>13481684</id><snippet>x[1][0][1]</snippet></ROW><ROW><id>13481697</id><snippet>str(span.contents)</snippet></ROW><ROW><id>13481697</id><snippet>__str__</snippet></ROW><ROW><id>13481697</id><snippet>span.contents</snippet></ROW><ROW><id>13481729</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>13481729</id><snippet>print</snippet></ROW><ROW><id>13481729</id><snippet>unicode</snippet></ROW><ROW><id>13481729</id><snippet>unicode</snippet></ROW><ROW><id>13481729</id><snippet>str</snippet></ROW><ROW><id>13481729</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>13481729</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>13481729</id><snippet>None</snippet></ROW><ROW><id>13481729</id><snippet>print</snippet></ROW><ROW><id>13481729</id><snippet>unicode</snippet></ROW><ROW><id>13481729</id><snippet>ascii</snippet></ROW><ROW><id>13481729</id><snippet>unicode</snippet></ROW><ROW><id>13481729</id><snippet>unicode</snippet></ROW><ROW><id>13481729</id><snippet>PYTHONIOENCODING=utf-8
</snippet></ROW><ROW><id>13481729</id><snippet>ascii</snippet></ROW><ROW><id>13481758</id><snippet>doc = QWebView.page().mainFrame().documentElement()
male = doc.findFirst("input[id=signup-gender-male]")
male.setAttribute("checked", "true")
</snippet></ROW><ROW><id>13482056</id><snippet>python &lt;script&gt;</snippet></ROW><ROW><id>13482056</id><snippet>python</snippet></ROW><ROW><id>13482056</id><snippet>/path/to/file.py</snippet></ROW><ROW><id>13482056</id><snippet>PATH</snippet></ROW><ROW><id>13482056</id><snippet>file.py</snippet></ROW><ROW><id>13482056</id><snippet>C:\Folder\Folder2\My_Python_Files</snippet></ROW><ROW><id>13482056</id><snippet>PATH</snippet></ROW><ROW><id>13482056</id><snippet>SET PATH=%PATH%;C:\path\to\project
</snippet></ROW><ROW><id>13482165</id><snippet>data.Created_Date.day - data.Created_Date.day
AttributeError: 'Series' object has no attribute 'day'
</snippet></ROW><ROW><id>13482165</id><snippet>apply</snippet></ROW><ROW><id>13482165</id><snippet>In [111]: df['sub'] = df.apply(lambda x: x['Created_Date'].day - x['Closed_Date'].day, axis=1)

In [112]: df[['Created_Date','Closed_Date','sub']]
Out[112]: 
         Created_Date         Closed_Date  sub
0 2009-01-07 00:00:00 2009-01-01 00:00:00    6
1                 NaT 2009-01-01 00:00:00    9
2 2009-01-01 00:00:00 2009-01-01 00:00:00    0
3 2009-01-01 00:00:00 2009-01-01 00:00:00    0
4 2009-01-01 00:00:00 2009-01-01 00:00:00    0
5 2009-01-12 00:00:00 2009-01-01 00:00:00   11
6 2009-01-12 00:00:00 2009-01-01 00:00:00   11
7 2009-01-07 00:00:00 2009-01-01 00:00:00    6
8 2009-01-10 00:00:00 2009-01-01 00:00:00    9
9 2009-01-07 00:00:00 2009-01-01 00:00:00    6
</snippet></ROW><ROW><id>13482165</id><snippet>NaT</snippet></ROW><ROW><id>13482165</id><snippet>In [114]: df.ix[1][1].day # NaT.day
Out[114]: -1
</snippet></ROW><ROW><id>13482165</id><snippet>.days</snippet></ROW><ROW><id>13482165</id><snippet>NaT</snippet></ROW><ROW><id>13482165</id><snippet>In [115]: df['sub2'] = df.apply(lambda x: (x['a'] - x['b']).days, axis=1)

In [116]: df['sub2'][1]
Out[116]: 92505
</snippet></ROW><ROW><id>13482169</id><snippet>SIGINT</snippet></ROW><ROW><id>13482169</id><snippet>close</snippet></ROW><ROW><id>13482169</id><snippet>stdin</snippet></ROW><ROW><id>13482169</id><snippet>nc</snippet></ROW><ROW><id>13482169</id><snippet>nc</snippet></ROW><ROW><id>13482169</id><snippet>lookup_client.send_signal(subprocess.signal.SIGINT)</snippet></ROW><ROW><id>13482169</id><snippet>lookup_client.stdin.close()</snippet></ROW><ROW><id>13482169</id><snippet>nc</snippet></ROW><ROW><id>13482169</id><snippet>#!/usr/bin/env python
import subprocess
lookup_server = subprocess.Popen("nc -l 5050", shell=True)
lookup_client = subprocess.Popen("nc localhost 5050", shell=True, stdin=subprocess.PIPE) 
print lookup_client.poll()
lookup_client.stdin.write("magic\n")
lookup_client.stdin.close()
print lookup_client.poll()
lookup_server.wait()
print "Lookup server terminated properly"
</snippet></ROW><ROW><id>13482169</id><snippet>None
None
magic
Lookup server terminated properly
</snippet></ROW><ROW><id>13482169</id><snippet>None</snippet></ROW><ROW><id>13482169</id><snippet>0</snippet></ROW><ROW><id>13482169</id><snippet>magic</snippet></ROW><ROW><id>13482169</id><snippet>communicate</snippet></ROW><ROW><id>13482169</id><snippet>#!/usr/bin/env python
import subprocess
lookup_server = subprocess.Popen("nc -l 5050", shell=True)
lookup_client = subprocess.Popen("nc localhost 5050", shell=True, stdin=subprocess.PIPE) 
print lookup_client.communicate("magic\n")
lookup_server.wait()
print "Lookup server terminated properly"
</snippet></ROW><ROW><id>13482169</id><snippet>shell=True</snippet></ROW><ROW><id>13482169</id><snippet>subprocess.Popen(["nc", "-l", "5050"], shell=True)</snippet></ROW><ROW><id>13482169</id><snippet>/bin/sh -c 'nc' -l 5050</snippet></ROW><ROW><id>13482169</id><snippet>sh</snippet></ROW><ROW><id>13482169</id><snippet>shell=True</snippet></ROW><ROW><id>13482169</id><snippet>lookup_client.send_signal(subprocess.signal.SIGINT)
print lookup_client.poll()
</snippet></ROW><ROW><id>13482169</id><snippet>SIGINT</snippet></ROW><ROW><id>13482169</id><snippet>poll</snippet></ROW><ROW><id>13482169</id><snippet>wait</snippet></ROW><ROW><id>13482169</id><snippet>poll</snippet></ROW><ROW><id>13482169</id><snippet>poll</snippet></ROW><ROW><id>13482169</id><snippet>SIGINT</snippet></ROW><ROW><id>13482169</id><snippet>time.sleep(5)</snippet></ROW><ROW><id>13482169</id><snippet>signal</snippet></ROW><ROW><id>13482169</id><snippet>communicate</snippet></ROW><ROW><id>13482265</id><snippet>(x, y)</snippet></ROW><ROW><id>13482265</id><snippet>food = {}
for i in range(amount):
    coords = randint(100, 700), randint(100, 700)
    if coords not in food:
        food[coords] = [
            i,   #identifier
            100, # energy
        ]
</snippet></ROW><ROW><id>13482300</id><snippet>struct</snippet></ROW><ROW><id>13482300</id><snippet>struct</snippet></ROW><ROW><id>13482300</id><snippet>struct.unpack</snippet></ROW><ROW><id>13482374</id><snippet>sorted</snippet></ROW><ROW><id>13482374</id><snippet>sorted_by_medals = sorted(list_of_medals, key=lambda tup: (-tup[1], tup[0]))
</snippet></ROW><ROW><id>13482460</id><snippet>In [1]: import numpy as np
In [2]: image = np.arange(16).reshape(4, 4)
In [3]: ylin = np.array([0, 3, 2, 2])
In [4]: xsam = np.array([2, 3, 0, 1])
In [5]: newarr = image[ylin, xsam]
In [6]: newarr
array([ 2, 15,  8,  9])
</snippet></ROW><ROW><id>13482708</id><snippet>body</snippet></ROW><ROW><id>13482708</id><snippet>lastTwoWords = body.split()[-2:]
</snippet></ROW><ROW><id>13482708</id><snippet>['Run', 'newscript88.py']</snippet></ROW><ROW><id>13482708</id><snippet>join</snippet></ROW><ROW><id>13482708</id><snippet>os.startfile(' '.join(lastTwoWords))
</snippet></ROW><ROW><id>13482708</id><snippet>lastLine = body.split('\n')[-1]
lastTwoWords = lastLine.split(None, 1)
</snippet></ROW><ROW><id>13482755</id><snippet>QuerySet</snippet></ROW><ROW><id>13482755</id><snippet>order_by</snippet></ROW><ROW><id>13482755</id><snippet>profiles = [specific_user.userprofile] + [profile for profile in UserProfile.objects.filter(myfilter=whatever).exclude(id=specific_user.userprofile.id)]
</snippet></ROW><ROW><id>13482791</id><snippet>__init__</snippet></ROW><ROW><id>13482791</id><snippet>def __init__(self,numin,xes,vees,masses):
    self.stars = []
    self.numstars = numin
    for n in range(numin):
        self.stars.append(Star(xes[n],vees[n],masses[n]))
</snippet></ROW><ROW><id>13482791</id><snippet>stars</snippet></ROW><ROW><id>13482791</id><snippet>stars</snippet></ROW><ROW><id>13482791</id><snippet>stars</snippet></ROW><ROW><id>13482791</id><snippet>history</snippet></ROW><ROW><id>13482791</id><snippet>self.velstep</snippet></ROW><ROW><id>13482791</id><snippet>self.xstep</snippet></ROW><ROW><id>13482791</id><snippet>Star</snippet></ROW><ROW><id>13482791</id><snippet>gal.time_stepper(0.1)[:]</snippet></ROW><ROW><id>13482791</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>13482791</id><snippet>history=[]
for n in range(100):
    history.append(copy.deepcopy(gal.time_stepper(.1)))
</snippet></ROW><ROW><id>13482990</id><snippet>requests</snippet></ROW><ROW><id>13483012</id><snippet>doc = search.Document(doc_id=&lt;entity_key_as_string&gt;, fields=fields)
</snippet></ROW><ROW><id>13483012</id><snippet>options = search.QueryOptions(ids_only=True)
query   = search.Query(query_string=query_string, options=options)
</snippet></ROW><ROW><id>13483118</id><snippet>Data.Time.LocalTime</snippet></ROW><ROW><id>13483118</id><snippet>todSec . localTimeOfDay . utcToLocalTime utc
</snippet></ROW><ROW><id>13483170</id><snippet>import django
</snippet></ROW><ROW><id>13483170</id><snippet>$&gt; easy_install pip


$&gt; pip uninstall django
$&gt; pip install django
</snippet></ROW><ROW><id>13483170</id><snippet>C:\Python26\Scripts\django-admin.py</snippet></ROW><ROW><id>13483170</id><snippet>c:\python26</snippet></ROW><ROW><id>13483170</id><snippet>C:\Python26</snippet></ROW><ROW><id>13483170</id><snippet>C:\Python26\Scripts</snippet></ROW><ROW><id>13483339</id><snippet>import matplotlib
matplotlib.rcParams['xtick.major.pad'] = 8 # defaults are 4
matplotlib.rcParams['ytick.major.pad'] = 8 
</snippet></ROW><ROW><id>13483339</id><snippet>[x|y]tick.minor.pad</snippet></ROW><ROW><id>13483339</id><snippet>[x|y]tick.direction</snippet></ROW><ROW><id>13483339</id><snippet>'out'</snippet></ROW><ROW><id>13483464</id><snippet>$file = "gw/gateway.py"
if (file_exists($file)) {
    $gw_file_sz = filesize($file);
    $filesz1 = floor($gw_file_sz/256);
    $filesz2 = $gw_file_sz%256;
}
$binarydata = pack("C*", 0x01, $year1, $year2, $day1, $day2, $min1, $min2, $sec, 
    0x00, 0x3f, 0x02, 0x00, 0x1c, 0x2c , 0x4c, 0xdf, 0xcb,
    0x02, 0x00, 0x1c, 0x2c , 0x5c, 0xe8, 0x41,
    0x04, 0x00, 0x1c, 0x2c , 0x5c, 0xe4, 0x38,
    0x02, 0x00, 0x1c, 0x2c , 0x5c, 0xe3, 0x7b,
    0x02, 0x00, 0x1c, 0x2c , 0x4c, 0xdf, 0xbf,
    0x02, 0x00, 0x1c, 0x2c , 0x5c, 0xe7, 0xd7,
    0x02, 0x00, 0x1c, 0x2c , 0x4c, 0xdf, 0x64,
    0x02, 0x00, 0x1c, 0x2c , 0x5c, 0xe7, 0x7a,
    0x02, 0x00, 0x1c, 0x2c , 0x5c, 0xe8, 0x22,
    0x08, $filesz1, $filesz2);

echo $binarydata;
echo file_get_contents($file);
</snippet></ROW><ROW><id>13483547</id><snippet>Button</snippet></ROW><ROW><id>13483547</id><snippet>class Button(object):
    yourself = 'yourself'
    def __init__(self, code, args):
        self.code = code
        self.args = [self if arg is yourself else arg for arg in args]
</snippet></ROW><ROW><id>13483547</id><snippet>engine.createElement((0, 0), Button(code=engine.killElement, args=(Button.yourself,)))
</snippet></ROW><ROW><id>13483547</id><snippet>None</snippet></ROW><ROW><id>13483547</id><snippet>0</snippet></ROW><ROW><id>13483547</id><snippet>''</snippet></ROW><ROW><id>13483547</id><snippet>yourself</snippet></ROW><ROW><id>13483547</id><snippet>None</snippet></ROW><ROW><id>13483547</id><snippet>object</snippet></ROW><ROW><id>13483547</id><snippet>object()</snippet></ROW><ROW><id>13483547</id><snippet>func_code</snippet></ROW><ROW><id>13483547</id><snippet>Ellipsis</snippet></ROW><ROW><id>13483547</id><snippet>type(Ellipsis)</snippet></ROW><ROW><id>13483547</id><snippet>ellipsis</snippet></ROW><ROW><id>13483547</id><snippet>__getitem__</snippet></ROW><ROW><id>13483547</id><snippet>slice</snippet></ROW><ROW><id>13483547</id><snippet>func_code</snippet></ROW><ROW><id>13483547</id><snippet>__init__</snippet></ROW><ROW><id>13483576</id><snippet>minidom.parse()</snippet></ROW><ROW><id>13483576</id><snippet>import os
from xml.dom import minidom

doc = minidom.parse(os.path.join('config', productline + '.xml'))
</snippet></ROW><ROW><id>13483576</id><snippet>minidom</snippet></ROW><ROW><id>13483576</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>13483576</id><snippet>lxml</snippet></ROW><ROW><id>13483756</id><snippet>exec</snippet></ROW><ROW><id>13483756</id><snippet>partial</snippet></ROW><ROW><id>13483756</id><snippet>curry</snippet></ROW><ROW><id>13483756</id><snippet>exec</snippet></ROW><ROW><id>13483756</id><snippet>partial</snippet></ROW><ROW><id>13483756</id><snippet>five = my_partial('five', len, 'hello')
</snippet></ROW><ROW><id>13483756</id><snippet>@curry</snippet></ROW><ROW><id>13483756</id><snippet>partial</snippet></ROW><ROW><id>13483756</id><snippet>functools.wraps</snippet></ROW><ROW><id>13483756</id><snippet>curry</snippet></ROW><ROW><id>13483756</id><snippet>functools.wraps</snippet></ROW><ROW><id>13483756</id><snippet>curry(len)</snippet></ROW><ROW><id>13483756</id><snippet>update_wrapper</snippet></ROW><ROW><id>13483756</id><snippet>wraps</snippet></ROW><ROW><id>13483756</id><snippet>update_wrapper</snippet></ROW><ROW><id>13483756</id><snippet>(*args)</snippet></ROW><ROW><id>13483756</id><snippet>(*args, **kw)</snippet></ROW><ROW><id>13483756</id><snippet>TypeError</snippet></ROW><ROW><id>13483756</id><snippet>foo</snippet></ROW><ROW><id>13483756</id><snippet>curry(foo)</snippet></ROW><ROW><id>13483756</id><snippet>**kw</snippet></ROW><ROW><id>13483756</id><snippet>partial</snippet></ROW><ROW><id>13483756</id><snippet>curry</snippet></ROW><ROW><id>13483756</id><snippet>foo</snippet></ROW><ROW><id>13483756</id><snippet>curry</snippet></ROW><ROW><id>13483756</id><snippet>def __call__(self, *args):
    if len(args) + len(self.curried_args) &gt; self.fn.func_code.co_argcount:
        raise TypeError('%s() takes exactly %d arguments (%d given)' %
                        (self.fn.func_name, self.fn.func_code.co_argcount,
                         len(args) + len(self.curried_args)))
    self.curried_args += args
    if len(self.curried_args) == self.fn.func_code.co_argcount:
        return self.fn(*self.curried_args)
    else:
        return self
</snippet></ROW><ROW><id>13483921</id><snippet>In [71]: p = re.compile(r'{PakBusPort_(.*?)}')

In [72]: p.findall(res)
Out[72]: ['somename']
</snippet></ROW><ROW><id>13483921</id><snippet>PakBusPort_</snippet></ROW><ROW><id>13483921</id><snippet>In [73]: p = re.compile(r'{(PakBusPort_.*?)}')

In [74]: p.findall(res)
Out[74]: ['PakBusPort_somename']
</snippet></ROW><ROW><id>13483921</id><snippet>}</snippet></ROW><ROW><id>13484046</id><snippet>reactor.run()</snippet></ROW><ROW><id>13484046</id><snippet>reactor.addSystemEventTrigger('before', 'shutdown', client.disconnect)</snippet></ROW><ROW><id>13484128</id><snippet>[]</snippet></ROW><ROW><id>13484128</id><snippet>def __init__(self, var1=None):
    if var1 is None:
        var1 = []
    ....
</snippet></ROW><ROW><id>13484128</id><snippet>var1</snippet></ROW><ROW><id>13484128</id><snippet>None</snippet></ROW><ROW><id>13484191</id><snippet>r</snippet></ROW><ROW><id>13484191</id><snippet>text</snippet></ROW><ROW><id>13484191</id><snippet>f.write(r.text.encode('UTF-8'))</snippet></ROW><ROW><id>13484245</id><snippet>from functools import wraps

def notifier(f):
    @wraps(f)
    def wrapped(*args, **kwargs)
        res = f(*args, **kwargs)
        print "notify somebody..."
        return res
    return wrapped

@notifier
def original():
    print "original work"

# or: original = notifier(original)

original()
</snippet></ROW><ROW><id>13484245</id><snippet>original work
notify somebody...
</snippet></ROW><ROW><id>13484541</id><snippet>define factors(n)
  f := 2
  while f * f &lt;= n
    if n % f == 0
      output f
      n := n / f
    else
      f := f + 1
  output n
</snippet></ROW><ROW><id>13484552</id><snippet>tell application "Finder"
    activate
    display dialog "Now it works!"
end tell
</snippet></ROW><ROW><id>13484552</id><snippet>osascript -e 'display dialog "Now it will not work."'
</snippet></ROW><ROW><id>13484552</id><snippet>osascript -e 'tell application "Finder"' -e 'activate' -e 'display dialog "Now it works!"' -e 'end tell'
</snippet></ROW><ROW><id>13484579</id><snippet>doLater(func)</snippet></ROW><ROW><id>13484579</id><snippet>setTimeout(func, 0)</snippet></ROW><ROW><id>13484579</id><snippet>doLater</snippet></ROW><ROW><id>13484579</id><snippet>wx</snippet></ROW><ROW><id>13484579</id><snippet>SafeYield</snippet></ROW><ROW><id>13484579</id><snippet>yieldToOtherTasks</snippet></ROW><ROW><id>13484579</id><snippet>processNextEvent</snippet></ROW><ROW><id>13484579</id><snippet>doLater</snippet></ROW><ROW><id>13484579</id><snippet>threading.Thread</snippet></ROW><ROW><id>13484579</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>13484615</id><snippet>input()</snippet></ROW><ROW><id>13484615</id><snippet>str</snippet></ROW><ROW><id>13484615</id><snippet>weight = float(input("How much do you weigh (in pounds)?"))
</snippet></ROW><ROW><id>13484615</id><snippet>height = float(input("What is your height (in inches)?"))
</snippet></ROW><ROW><id>13484615</id><snippet>input()</snippet></ROW><ROW><id>13484615</id><snippet>float</snippet></ROW><ROW><id>13484766</id><snippet>datalist = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

def getColumn(col_num, data):
    column = []
    for i in range (0, len(data)):
        row = data[i]
        column.append(row[col_num])
    return column
</snippet></ROW><ROW><id>13484766</id><snippet>getColumn(1, datalist)
Out[9]: [2, 5, 8]
</snippet></ROW><ROW><id>13484766</id><snippet>getColumn</snippet></ROW><ROW><id>13484766</id><snippet>getColumn</snippet></ROW><ROW><id>13484766</id><snippet>datalist</snippet></ROW><ROW><id>13484766</id><snippet>datalist</snippet></ROW><ROW><id>13484927</id><snippet>tempfile</snippet></ROW><ROW><id>13484927</id><snippet>mkstemp</snippet></ROW><ROW><id>13484927</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>13484927</id><snippet>mktemp</snippet></ROW><ROW><id>13484927</id><snippet>urandom</snippet></ROW><ROW><id>13484927</id><snippet>md5</snippet></ROW><ROW><id>13484927</id><snippet>''.join(random.choice(my_charset) for _ in range(8))</snippet></ROW><ROW><id>13484927</id><snippet>urlsafe_b64encode(os.urandom(6))</snippet></ROW><ROW><id>13484927</id><snippet>mkstemp</snippet></ROW><ROW><id>13484927</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>13484956</id><snippet>Any existing row delegate for row will be removed, but not deleted.
QAbstractItemView does not take ownership of delegate.
</snippet></ROW><ROW><id>13484956</id><snippet>...    

class TableView(QtGui.QTableView):
    def __init__(self):
        QtGui.QTableView.__init__(self)
        colours = [
            QtGui.QColor(255,0,0),
            QtGui.QColor(0,255,0),
            QtGui.QColor(0,0,255),
            ]
        self._delegates = [
            ListDelegate(["#FF0000","#00FF00","#0000FF"]),
            ListDelegate(["#FF0000","#0000FF"]),
            ]
        for row in range(len(colours)):
            self.setItemDelegateForRow(
                row, self._delegates[bool(row % 2)])
        self.setModel(PaletteListModel(colours))

if __name__ == '__main__':

    app = QtGui.QApplication(sys.argv)
    app.setStyle("plastique")

    table = TableView()
    table.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13485059</id><snippet>def display(theMap):
    print("PLAYER MAP")
    for row in theMap:
        for col in row:
            print(col)
        print()
    print()
</snippet></ROW><ROW><id>13485059</id><snippet>print(col)</snippet></ROW><ROW><id>13485059</id><snippet>print(col, end=' ')</snippet></ROW><ROW><id>13485059</id><snippet>def display(theMap):
    print("PLAYER MAP")
    for row in theMap:
        print(' '.join(row))
    print()
</snippet></ROW><ROW><id>13485059</id><snippet>def display(theMap):
    print("PLAYER MAP")
    print('\n'.join(' '.join(row) for row in theMap))
    print()
</snippet></ROW><ROW><id>13485059</id><snippet>def loadMap():
    return [
        ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J"),
        ("-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"),
        ("|r|","| |", "| |", "| |", "| |", "| |", "| |", "| |", "| |", "| |", "|"),
        ("-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-")]
</snippet></ROW><ROW><id>13485059</id><snippet>for i in range(something)</snippet></ROW><ROW><id>13485059</id><snippet>theMap = loadMap()
assert(all(len(row) == len(theMap[0]) for row in theMap))
</snippet></ROW><ROW><id>13485059</id><snippet>def display(mapWidth, playerPosition):
    print('PLAYER MAP')
    # Display the first line. This is the header, with a label for each of the
    # mapWidth columsn, with a space between each label, and an extra space at
    # the start, like ' 0 1 2 3 4'. The ' '.join(s) creates a new string by 
    # putting a space between each element of s. The '012...XYZ'[:mapWidth] 
    # just takes the first mapWidth characters of the longer string. 
    print(' ' + ' '.join('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:mapWidth]))

    # Display the second line. This is just a '-' for each column, with a space
    # between each, and an extra space at the start, like ' - - - - -'. The join
    # works the same as above; the '-' * mapWidth creates a string with mapWidth
    # copies of '-'.
    print(' ' + ' '.join('-' * mapWidth))

    # Display the third line. This is the trickiest. This is cell for each column,
    # where the first playerPosition cells are '| |', the playerPositionth is 
    # '|r|', and the rest are again '| |', with no space between them. It seemed
    # simpler to treat this as a group of playerPosition+1 '|' characters with 
    # spaces between, an 'r' character, and a group of mapWidth-playerPosition
    # '|' characters with spaces between again, but there are various different 
    # ways of printing something equivalent. The only new thing here is the 
    # end='' keyword argument--without that, each print ends with a newline.
    print(' '.join('|' * (playerPosition + 1)), end='')
    print('r', end='')
    print(' '.join('|' * (mapWidth - playerPosition)))

    # Fourth line, same as the second.
    print(' ' + ' '.join('-' * mapWidth))
    print()
</snippet></ROW><ROW><id>13485059</id><snippet>join</snippet></ROW><ROW><id>13485059</id><snippet>print</snippet></ROW><ROW><id>13485059</id><snippet>def display(mapWidth, playerPosition):
    print('PLAYER MAP')
    print(' ' + ' '.join('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:mapWidth]))
    print(' -' * mapWidth)
    print(' '.join('|' * (playerPosition + 1)) +
          'r' +
          ' '.join('|' * (mapWidth - playerPosition)))
    print(' -' * mapWidth)
    print()
</snippet></ROW><ROW><id>13485059</id><snippet>' ' + ' '.join('-' * 8)</snippet></ROW><ROW><id>13485059</id><snippet>' -' * 8</snippet></ROW><ROW><id>13485059</id><snippet>   # Print mapWidth '|' characters, each followed by a ' ', except for the one
   # at the player position, which is followed by an 'r'. Then we still need one
   # more '|' at the end.
   print(''.join('|' + (' ' if i != playerPosition else 'r') 
                 for i in range(mapWidth) + '|')
</snippet></ROW><ROW><id>13485059</id><snippet>    cellsBeforePlayer = '| ' * playerPosition
    cellsWithPlayer = cellsBeforePlayer + '|r|'
    cellsToEnd = cellsWithPlayer + '| ' * (mapWidth - playerPosition)
    print(cellsToEnd)
</snippet></ROW><ROW><id>13485059</id><snippet>&gt;&gt;&gt; display(MAX_COLUMN - MIN_COLUMN + 1, 3)
PLAYER MAP
 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J
 - - - - - - - - - - - - - - - - - - - -
| | | |r| | | | | | | | | | | | | | | | |
 - - - - - - - - - - - - - - - - - - - -
</snippet></ROW><ROW><id>13485059</id><snippet>MIN_COLUMN</snippet></ROW><ROW><id>13485059</id><snippet>MAX_COLUMN</snippet></ROW><ROW><id>13485059</id><snippet>COLUMNS=20</snippet></ROW><ROW><id>13485059</id><snippet>+ 1</snippet></ROW><ROW><id>13485059</id><snippet>def display(playerPosition):
    print('PLAYER MAP')
    print(' ' + ' '.join('0123456789ABCDEFGHIJ'))
    print(' -' * 20)
    print(' '.join('|' * (playerPosition + 1)) +
          'r' +
          ' '.join('|' * (20 - playerPosition)))
    print(' -' * 20)
    print()
</snippet></ROW><ROW><id>13485059</id><snippet>display</snippet></ROW><ROW><id>13485059</id><snippet>loadMap</snippet></ROW><ROW><id>13485059</id><snippet>theMap[2][playerPosition] = '| |'
playerPosition += stepsMoved
theMap[2][playerPosition] = '|r|'
display(theMap)
</snippet></ROW><ROW><id>13485059</id><snippet>playerPosition += stepsMoved
display(playerPosition)
</snippet></ROW><ROW><id>13485154</id><snippet>float</snippet></ROW><ROW><id>13485154</id><snippet>numpy.float64</snippet></ROW><ROW><id>13485154</id><snippet>dtype</snippet></ROW><ROW><id>13485154</id><snippet>np.float64</snippet></ROW><ROW><id>13485154</id><snippet>whiten</snippet></ROW><ROW><id>13485154</id><snippet>np.column_stack()</snippet></ROW><ROW><id>13485154</id><snippet>def mean_impute(self):
    imputed = np.column_stack(self.masked[:,i].filled(self.masked[:,i].mean()) 
               for i in range(np.shape(self.masked)[1]))
    self.imputed = np.array(imputed, dtype=np.float64)
</snippet></ROW><ROW><id>13485154</id><snippet>pandas</snippet></ROW><ROW><id>13485154</id><snippet>fill_na()</snippet></ROW><ROW><id>13485154</id><snippet>imputed = self.masked.fillna(self.masked.mean())
</snippet></ROW><ROW><id>13485302</id><snippet>itertools.imap</snippet></ROW><ROW><id>13485302</id><snippet>L</snippet></ROW><ROW><id>13485302</id><snippet>L</snippet></ROW><ROW><id>13485302</id><snippet>L = ['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>13485302</id><snippet>L</snippet></ROW><ROW><id>13485302</id><snippet>+-------+---------+
| index | element |
+-------+---------+
|   0   |   'a'   |
+-------+---------+
|   1   |   'b'   |
+-------+---------+
|   2   |   'c'   |
+-------+---------+
|   3   |   'd'   |
+-------+---------+
</snippet></ROW><ROW><id>13485302</id><snippet>L</snippet></ROW><ROW><id>13485302</id><snippet>L</snippet></ROW><ROW><id>13485302</id><snippet>L[3]</snippet></ROW><ROW><id>13485302</id><snippet>L</snippet></ROW><ROW><id>13485302</id><snippet>L[s]</snippet></ROW><ROW><id>13485302</id><snippet>L</snippet></ROW><ROW><id>13485302</id><snippet>for elem in L:
    print elem
</snippet></ROW><ROW><id>13485302</id><snippet>for i in range(len(L)): # lookup range() and len()
    print L[i]
</snippet></ROW><ROW><id>13485741</id><snippet>?par</snippet></ROW><ROW><id>13485741</id><snippet>xaxs</snippet></ROW><ROW><id>13485741</id><snippet>par(xaxs="r")       #The default  
plot(1:10, 1:10)
</snippet></ROW><ROW><id>13485741</id><snippet>abline(v=1-(diff(range(1:10)))*0.04, col="red")
abline(v=10+(diff(range(1:10)))*0.04, col="red")
</snippet></ROW><ROW><id>13485815</id><snippet>def getsanityresults(xmlfile):
    testresult=[]
    dom = minidom.parse(xmlfile)
    data=dom.getElementsByTagName('Sanity_Results')
    textnode = data[0].childNodes[0]
    testresults=textnode.data
    for line in testresults.splitlines():
        line = line.strip('\r,\n')
        line = re.sub(r'(http://[^\s]+|//[^\s]+|\\\\[^\s]+)', r'&lt;a href="\1"&gt;\1&lt;/a&gt;', line)
        testresult.append(line) 
    return '&lt;br&gt;'.join(testresult)
</snippet></ROW><ROW><id>13486083</id><snippet>def pickClass():
    valid_classes = ["FIGHTER", "MAGE", "THIEF"]
    while True:
        print('What class are you? FIGHTER, MAGE, or THIEF?')
        classChoice = raw_input()
        if classChoice not in valid_classes:
            print("Invalid class")
        else:
            print("Are you sure you want to be a %s?" % classChoice)
            while True:
                _confirm = raw_input()
                if _confirm == 'YES':
                    print('So be it.')
                    return classChoice
                elif _confirm == 'NO':
                    break
                else:
                    print('YES or NO only!')
</snippet></ROW><ROW><id>13486171</id><snippet>EVT_IDLE</snippet></ROW><ROW><id>13486171</id><snippet>EVT_SIZE</snippet></ROW><ROW><id>13486171</id><snippet>EVT_IDLE</snippet></ROW><ROW><id>13486171</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self,None)
        self.resized = False # the dirty flag
        self.Bind(wx.EVT_SIZE,self.OnSize)
        self.Bind(wx.EVT_IDLE,self.OnIdle)

    def OnSize(self,event):
        self.resized = True # set dirty

    def OnIdle(self,event):
        if self.resized: 
            # take action if the dirty flag is set
            print "New size:", self.GetSize()
            self.resized = False # reset the flag

app = wx.PySimpleApp()
frame = Frame().Show()
app.MainLoop()
</snippet></ROW><ROW><id>13486171</id><snippet>EVT_SIZE</snippet></ROW><ROW><id>13486171</id><snippet>EVT_MOVE</snippet></ROW><ROW><id>13487007</id><snippet>classmethod</snippet></ROW><ROW><id>13487007</id><snippet>self</snippet></ROW><ROW><id>13487007</id><snippet>cls</snippet></ROW><ROW><id>13487007</id><snippet>self</snippet></ROW><ROW><id>13487007</id><snippet>klass</snippet></ROW><ROW><id>13487007</id><snippet>self.__class__()</snippet></ROW><ROW><id>13487007</id><snippet>cls()</snippet></ROW><ROW><id>13487007</id><snippet>Derived</snippet></ROW><ROW><id>13487007</id><snippet>Derived.CallMe()</snippet></ROW><ROW><id>13487007</id><snippet>Base</snippet></ROW><ROW><id>13487007</id><snippet>Base.CallMe()</snippet></ROW><ROW><id>13487007</id><snippet>@classmethod
def CallMe(cls):     # signature changed
    out = []
    models = something()
    for model in models:
        newobj = cls()    # create instances of cls
        newobj.model = model
        out.append(newobj)
    return out
</snippet></ROW><ROW><id>13487094</id><snippet>import subprocess
subprocess.call('ffmpeg -i video.mp4 video.flv') # check the ffmpeg command line :)
</snippet></ROW><ROW><id>13487580</id><snippet>def main():
    config = Configurator()
    config.add_route('user', '/users/{uid}')
    return config.make_wsgi_app()

@view_config(route_name='user', renderer='user_template.mako')
def user_view(request):
    uid = request.matchdict['uid']
    user = find_user(request, uid)
    if user is None:
        raise HTTPNotFound
    return {'user': user}

def find_user(request, uid):
    return request.db.query(User).filter_by(id=uid).first()
</snippet></ROW><ROW><id>13487580</id><snippet>matchdict</snippet></ROW><ROW><id>13487580</id><snippet>db</snippet></ROW><ROW><id>13487580</id><snippet>class Test_user_view(unittest.TestCase):
    def test_it(self):
        req = DummyRequest()
        req.db = DummyDB()
        req.matchdict = {'uid': '3'}
        result = user_view(req)
        self.assertEqual(result['user'].id, 3)
</snippet></ROW><ROW><id>13487580</id><snippet>DummyDB</snippet></ROW><ROW><id>13487580</id><snippet>find_user</snippet></ROW><ROW><id>13487636</id><snippet>import sys

def display(track):
    c=0
    for c in range(0,20,1):
        sys.stdout.write(track[c])
    print()

def initialize():
    c=0
    track = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t"]
    return track

level= initialize()
display(level)
</snippet></ROW><ROW><id>13487636</id><snippet>track</snippet></ROW><ROW><id>13487636</id><snippet>initialize</snippet></ROW><ROW><id>13487636</id><snippet>display</snippet></ROW><ROW><id>13487636</id><snippet>display</snippet></ROW><ROW><id>13487636</id><snippet>for r in range (0, (MAX_ROW+1), 1):   #LOOPS1
     for c in range (0, (MAX_COLUMN+1), 1):
         sys.stdout.write(city[r][c])
     print()
 print()
</snippet></ROW><ROW><id>13487636</id><snippet>sys.stdout.write(city[r][c])</snippet></ROW><ROW><id>13487636</id><snippet>def display (city):
   print("CITY LEVEL")
   for row in city:
      for c in row:
         print c,
      print
   print
</snippet></ROW><ROW><id>13487636</id><snippet>initialize</snippet></ROW><ROW><id>13487636</id><snippet>for r in range (0, (MAX_ROW+1), 1):
</snippet></ROW><ROW><id>13487636</id><snippet>r</snippet></ROW><ROW><id>13487636</id><snippet>    city.append([])#appends an empty list to city
</snippet></ROW><ROW><id>13487636</id><snippet>city</snippet></ROW><ROW><id>13487636</id><snippet>    for c in range (0, (MAX_COLUMN+1), 1):
</snippet></ROW><ROW><id>13487636</id><snippet>c</snippet></ROW><ROW><id>13487636</id><snippet>        city[r].append(" ")
</snippet></ROW><ROW><id>13487636</id><snippet>def initialize():
   city = [
       # 0   1   2   3   4   5   6   7   8   9
       ["#","#","#","#","#","#","#","#","#","#"], # 0
       ["#","@"," "," "," "," "," "," ","u","#"], # 1
       ["#"," "," ","b","b"," "," "," ","X","#"], # 2
       ["#"," "," ","b","b"," "," "," "," ","#"], # 3
       ["#"," "," "," "," "," "," "," ","b","#"], # 4
       ["#","u"," ","u","u","u","u","u","u","#"], # 5
       ["#","b"," "," "," "," "," "," "," ","#"], # 6
       ["#"," "," "," "," ","b"," ","b"," ","#"], # 7
       ["#"," "," "," ","b"," "," "," "," ","#"], # 8
       ["#","#","#","#","#","#","#","#","#","#"], # 9
   ]
   return city
</snippet></ROW><ROW><id>13487636</id><snippet>initialize</snippet></ROW><ROW><id>13487636</id><snippet>for</snippet></ROW><ROW><id>13487636</id><snippet>city.append([])#appends an empty list to city
</snippet></ROW><ROW><id>13487636</id><snippet>city</snippet></ROW><ROW><id>13487636</id><snippet>[]
</snippet></ROW><ROW><id>13487636</id><snippet>city</snippet></ROW><ROW><id>13487636</id><snippet>[[]]
</snippet></ROW><ROW><id>13487636</id><snippet>[0]
</snippet></ROW><ROW><id>13487636</id><snippet>city.append("Jim")
</snippet></ROW><ROW><id>13487636</id><snippet>["Jim"]
</snippet></ROW><ROW><id>13487660</id><snippet>sudo pip install Cython==0.17.1
</snippet></ROW><ROW><id>13487893</id><snippet>number_primes = 10
prime_list = [True]*number_primes

for i in range (2, number_primes):    #check from 2 upwards
  if prime_list[i]:                   #If not prime, don't need to bother about searching
    j = 2
    while j*i &lt; number_primes:        # Filter out all factors of i (2...n * prime)
      prime_list[j*i] = False
      j+=1
</snippet></ROW><ROW><id>13488311</id><snippet>myclass</snippet></ROW><ROW><id>13488311</id><snippet>AddSub</snippet></ROW><ROW><id>13488311</id><snippet>AddSub()</snippet></ROW><ROW><id>13488311</id><snippet>AddSub</snippet></ROW><ROW><id>13488311</id><snippet>myclass</snippet></ROW><ROW><id>13488311</id><snippet>try_block</snippet></ROW><ROW><id>13488311</id><snippet>def try_block(value):
    try:
        value.set_x(whatever())
    except ValueError:
        pass
</snippet></ROW><ROW><id>13488311</id><snippet>myAddSub = AddSub() # create the instance
try_block(myAddSub) # pass it to the function
</snippet></ROW><ROW><id>13488311</id><snippet>AddSub</snippet></ROW><ROW><id>13488311</id><snippet>AddSub</snippet></ROW><ROW><id>13488311</id><snippet>def __init__(self):
    self._x = 0
    self._y = 0
</snippet></ROW><ROW><id>13488311</id><snippet>__init__</snippet></ROW><ROW><id>13488311</id><snippet>def __init__(self, x=0, y=0):
    self._x = x
    self._y = y
</snippet></ROW><ROW><id>13488311</id><snippet>AddSub</snippet></ROW><ROW><id>13488311</id><snippet>a = AddSub()     # gets default 0 value for both _x and _y
b = AddSub(5)    # gets default 0 value for _y
c = AddSub(y=5)  # gets default 0 value for _x
d = AddSub(2, 3) # no defaults!
</snippet></ROW><ROW><id>13488311</id><snippet>try_block</snippet></ROW><ROW><id>13488311</id><snippet>def exception_prone_task():
    while True: # loops forever, or until a "return" or "break" statement happens
         try:
             result = do_stuff_that_might_raise_an_exception()
             return result # you only get here if no exception happened

         except WhateverExceptions as e:
             report_about_about_the_exceptions(e)
</snippet></ROW><ROW><id>13488535</id><snippet>.query()</snippet></ROW><ROW><id>13488535</id><snippet>key</snippet></ROW><ROW><id>13488535</id><snippet>row.key.id()
</snippet></ROW><ROW><id>13488588</id><snippet>COOKIES_ENABLED = True</snippet></ROW><ROW><id>13488588</id><snippet>'scrapy.contrib.downloadermiddleware.cookies.CookiesMiddleware'</snippet></ROW><ROW><id>13488588</id><snippet>DOWNLOADER_MIDDLEWARES = {
    'myproject.middlewares.CustomDownloaderMiddleware': 543,
    'scrapy.contrib.downloadermiddleware.cookies.CookiesMiddleware': 700 # &lt;-
}
</snippet></ROW><ROW><id>13488588</id><snippet>DOWNLOADER_MIDDLEWARES_BASE</snippet></ROW><ROW><id>13488588</id><snippet>COOKIES_ENABLED = True</snippet></ROW><ROW><id>13488588</id><snippet>COOKIES_DEBUG = True</snippet></ROW><ROW><id>13488777</id><snippet>for line in f:
   data = line.strip('\n').split('|')
   #do something here with data
</snippet></ROW><ROW><id>13488865</id><snippet>regex</snippet></ROW><ROW><id>13488865</id><snippet>In [13]: with open("filelists.txt") as f:
    for line in f:
        data=re.findall(r"_H\d+_M\d+_S\d+",line)
        if data:
            print [x.strip("HMS") for x in data[0].split("_")[1:]]
   ....:             
['1', '1', '1']
['1', '1', '2']
['2', '1', '1']
['2', '1', '2']
</snippet></ROW><ROW><id>13488870</id><snippet>menu.Append(...)</snippet></ROW><ROW><id>13488870</id><snippet>m_cluster = wx.MenuItem(menu, -1, "&amp;Cluster\tAlt-C", "Cluster Options.")
m_cluster.SetTextColour(colour)
menu.AppendItem(m_cluster)
</snippet></ROW><ROW><id>13488943</id><snippet>rowid</snippet></ROW><ROW><id>13488943</id><snippet>rowid</snippet></ROW><ROW><id>13488943</id><snippet>id</snippet></ROW><ROW><id>13488943</id><snippet>INTEGER PRIMARY KEY</snippet></ROW><ROW><id>13488943</id><snippet>DELETE FROM testing</snippet></ROW><ROW><id>13489153</id><snippet>In [9]: set("aabbcc")
Out[9]: set(['a', 'c', 'b'])

In [10]: set(zip("aabbcc", [1, 1, 5, 5, 2, 2]))
Out[10]: set([('a', 1), ('c', 2), ('b', 5)])
</snippet></ROW><ROW><id>13489153</id><snippet>def is_bijection(seq1, seq2):
    distinct1 = set(seq1)
    distinct2 = set(seq2)
    distinctMappings = set(zip(seq1, seq2))
    return len(distinct1) == len(distinctMappings) and len(distinct2) == len(distinctMappings)
</snippet></ROW><ROW><id>13489327</id><snippet>static_url</snippet></ROW><ROW><id>13489327</id><snippet>def CF_static(request, path):
    return request.static_url('cistromeprimerscanner:templates/static/%s'%pth)
config.add_request_method(CF_static)
</snippet></ROW><ROW><id>13489327</id><snippet>${request.CF_static('logo.png')}
</snippet></ROW><ROW><id>13489327</id><snippet>add_request_method</snippet></ROW><ROW><id>13489327</id><snippet>set_request_property</snippet></ROW><ROW><id>13489351</id><snippet>return</snippet></ROW><ROW><id>13489351</id><snippet>ret</snippet></ROW><ROW><id>13489351</id><snippet>def bar(first, second, third, **options):
    if options.get("action") == "sum":
        print "The sum is: %d" % (first + second + third)

    if options.get("ret") == "first":
        return first

result = bar(1, 2, 3, action = "sum", ret = "first")
print "Result: %d" % result
</snippet></ROW><ROW><id>13489416</id><snippet>table = [[True] * 11] * 7
</snippet></ROW><ROW><id>13489416</id><snippet>True</snippet></ROW><ROW><id>13489416</id><snippet>table = [[True] * 11 for _ in range(7)]
</snippet></ROW><ROW><id>13489696</id><snippet>response</snippet></ROW><ROW><id>13489696</id><snippet>geturl()</snippet></ROW><ROW><id>13489696</id><snippet>In [13]: response.geturl()
Out[13]: 'http://mobile.trenitalia.com/(S(saaizweqpa3q5yvnd4qjytii))/W2/ViaggiaTrenoXHTML.aspx'
</snippet></ROW><ROW><id>13489936</id><snippet>a</snippet></ROW><ROW><id>13489936</id><snippet>__init__</snippet></ROW><ROW><id>13489936</id><snippet>B</snippet></ROW><ROW><id>13489936</id><snippet>__getattr__</snippet></ROW><ROW><id>13489936</id><snippet>a</snippet></ROW><ROW><id>13489936</id><snippet>__init__</snippet></ROW><ROW><id>13489936</id><snippet>class B(object):
    def __init__(self):
        self.a = A()
</snippet></ROW><ROW><id>13489936</id><snippet>__getattr__</snippet></ROW><ROW><id>13489936</id><snippet>class B(object):
    def __getattr__(self, attr):
        if attr == 'a':
            self.a = A()
            return self.a
        raise AttributeError(attr)
</snippet></ROW><ROW><id>13489936</id><snippet>class B(object):
    _a = None

    @property
    def a(self):
        if self._a is None:
            self._a = A()
        return self._a
</snippet></ROW><ROW><id>13489936</id><snippet>__getattr__</snippet></ROW><ROW><id>13489936</id><snippet>A()</snippet></ROW><ROW><id>13489936</id><snippet>self</snippet></ROW><ROW><id>13489936</id><snippet>A()</snippet></ROW><ROW><id>13490252</id><snippet>bin/test</snippet></ROW><ROW><id>13490252</id><snippet>zc.recipe.testrunner</snippet></ROW><ROW><id>13490252</id><snippet>collective.xmltestreport</snippet></ROW><ROW><id>13490252</id><snippet>eggs</snippet></ROW><ROW><id>13490252</id><snippet>[test]</snippet></ROW><ROW><id>13490252</id><snippet>test-packages</snippet></ROW><ROW><id>13490252</id><snippet>[buildout]</snippet></ROW><ROW><id>13490252</id><snippet>development.cfg</snippet></ROW><ROW><id>13490252</id><snippet>-s</snippet></ROW><ROW><id>13490252</id><snippet>bin/test</snippet></ROW><ROW><id>13490252</id><snippet>bin/test -s collective.z3cform.wizard
</snippet></ROW><ROW><id>13490601</id><snippet>&gt;&gt;&gt; print "\\num{{{0:.2g}}}".format(1e9)
\num{1e+09}
</snippet></ROW><ROW><id>13490601</id><snippet>.repace("+", "")</snippet></ROW><ROW><id>13490601</id><snippet>siunitx</snippet></ROW><ROW><id>13490601</id><snippet>def latex_float(f):
    float_str = "{0:.2g}".format(f)
    if "e" in float_str:
        base, exponent = float_str.split("e")
        return r"{0} \times 10^{{{1}}}".format(base, int(exponent))
    else:
        return float_str
</snippet></ROW><ROW><id>13490601</id><snippet>&gt;&gt;&gt; latex_float(1e9)
'1 \\times 10^{9}'
</snippet></ROW><ROW><id>13490617</id><snippet>gevent.Pool.map</snippet></ROW><ROW><id>13490617</id><snippet>def process(params):
    param1, param2 = params
    ...
</snippet></ROW><ROW><id>13490617</id><snippet>pool.map</snippet></ROW><ROW><id>13490617</id><snippet>results = pool.map(lambda args: process(*args), jobs)
</snippet></ROW><ROW><id>13490646</id><snippet>subprocess.call</snippet></ROW><ROW><id>13490646</id><snippet>from concurrent.futures import ThreadPoolExecutor

with ThreadPoolExecutor(max_workers=2) as executor:
    for n in range(processors):
        name = "sql%i" % (n + 1)
        if os.path.exists(name):
            future = executor.submit(loadData, name)
</snippet></ROW><ROW><id>13490664</id><snippet>site = ''.join(hxs.select("//h1[@class='state']/text()").extract()).strip()
</snippet></ROW><ROW><id>13490664</id><snippet>h1</snippet></ROW><ROW><id>13490664</id><snippet>/text()</snippet></ROW><ROW><id>13490664</id><snippet>h1</snippet></ROW><ROW><id>13490664</id><snippet>childs</snippet></ROW><ROW><id>13490664</id><snippet>//text()</snippet></ROW><ROW><id>13490980</id><snippet>$ ./configure --prefix=~/mydir
$ make
$ make install
</snippet></ROW><ROW><id>13490980</id><snippet>virtualen.py</snippet></ROW><ROW><id>13490980</id><snippet>$ ~/mydir/bin/python virtualenv.py my_environment
</snippet></ROW><ROW><id>13490980</id><snippet>my_environment</snippet></ROW><ROW><id>13490980</id><snippet>source my_environment/bin/activate</snippet></ROW><ROW><id>13490980</id><snippet>python</snippet></ROW><ROW><id>13490980</id><snippet>pip</snippet></ROW><ROW><id>13491181</id><snippet>def flatten_dict(d):
    for k,v in d.items():
        if isinstance(v, dict):
            for item in flatten_dict(v):
                yield [k]+item
        else:
            yield v

flattened = list(flatten_dict(test))
</snippet></ROW><ROW><id>13491398</id><snippet>show_records = sorted([(m['total_tweets'], m) for m in db.individual.find()])
</snippet></ROW><ROW><id>13491398</id><snippet>[(1, {'total_tweets': 1}), (2, {'total_tweets': 2}]</snippet></ROW><ROW><id>13491398</id><snippet>show = show_records[index]
</snippet></ROW><ROW><id>13491398</id><snippet>(2, {'total_tweets': 2})</snippet></ROW><ROW><id>13491398</id><snippet>(2, {'total_tweets': 2})['total_tweets']
</snippet></ROW><ROW><id>13491398</id><snippet>(2, {'total_tweets': 2})[1]['total_tweets']
</snippet></ROW><ROW><id>13491434</id><snippet>importlib</snippet></ROW><ROW><id>13491434</id><snippet>globals()</snippet></ROW><ROW><id>13491434</id><snippet>import importlib

userModule = raw_input("Which module to import? ")

mod = importlib.import_module('signal')
names = mod.__all__ if hasattr(mod, '__all__') else dir(mod)
g = globals()
for name in names:
    g[name] = getattr(mod, name)
del g, name, names, mod, importlib
</snippet></ROW><ROW><id>13491531</id><snippet>{% if user.is_authenticated %}
    &lt;!-- display nav bar for the logged in user --&gt;
{% else %}
    &lt;!-- display login form or whatever you need --&gt;
{% endif %}
</snippet></ROW><ROW><id>13491678</id><snippet>eval()</snippet></ROW><ROW><id>13491678</id><snippet>eval()</snippet></ROW><ROW><id>13491678</id><snippet>__builtins__</snippet></ROW><ROW><id>13491678</id><snippet>eval()</snippet></ROW><ROW><id>13491678</id><snippet>__builtin__</snippet></ROW><ROW><id>13491678</id><snippet>dict</snippet></ROW><ROW><id>13491678</id><snippet>a</snippet></ROW><ROW><id>13491678</id><snippet>locals</snippet></ROW><ROW><id>13491678</id><snippet>eval('a == "a"', {}, a)
</snippet></ROW><ROW><id>13491681</id><snippet>tour1</snippet></ROW><ROW><id>13491681</id><snippet>In [89]: tour1 = tuple(tuple((a,b) for a in nodes )for b in nodes)

In [90]: tour1
Out[90]: 
(((20, 20), (21, 20), (22, 20), (23, 20), (24, 20), (25, 20)),
 ((20, 21), (21, 21), (22, 21), (23, 21), (24, 21), (25, 21)),
 ((20, 22), (21, 22), (22, 22), (23, 22), (24, 22), (25, 22)),
 ((20, 23), (21, 23), (22, 23), (23, 23), (24, 23), (25, 23)),
 ((20, 24), (21, 24), (22, 24), (23, 24), (24, 24), (25, 24)),
 ((20, 25), (21, 25), (22, 25), (23, 25), (24, 25), (25, 25)))
</snippet></ROW><ROW><id>13491726</id><snippet>error_code</snippet></ROW><ROW><id>13491726</id><snippet>error_code</snippet></ROW><ROW><id>13491726</id><snippet>code</snippet></ROW><ROW><id>13491726</id><snippet>with self.assertRaises(SystemExit) as cm:
    do_something()

the_exception = cm.exception
self.assertEqual(the_exception.code, 3)
</snippet></ROW><ROW><id>13491911</id><snippet>shell = True</snippet></ROW><ROW><id>13491911</id><snippet>mid</snippet></ROW><ROW><id>13491911</id><snippet>"/dev/null; rm -rf /"</snippet></ROW><ROW><id>13491911</id><snippet>awk</snippet></ROW><ROW><id>13491911</id><snippet>mid</snippet></ROW><ROW><id>13491911</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>13491911</id><snippet>awk</snippet></ROW><ROW><id>13491911</id><snippet>cmd = """sort -n -r -k5 %s |
      head -n 500|
      awk 'OFS="\t"{{if($2-{1}&gt;0){{print $1,$2-{1},$3+{1},$4,$5}}}}'""" % \
      (summit, top_count)

with open(filename) as file
    for line in subprocess.check_output(cmd, shell=True):
        print &gt;&gt;file, line
</snippet></ROW><ROW><id>13491950</id><snippet>import re
a = re.sub(u'[|•]', ',', a)
</snippet></ROW><ROW><id>13491950</id><snippet>re.sub(pattern, repl, string, max=0)
</snippet></ROW><ROW><id>13491950</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>13491950</id><snippet>a = u"6• 918417•12"
a = re.sub(u"[|•]", ",", a)
</snippet></ROW><ROW><id>13492112</id><snippet>&lt;(?P&lt;tagname&gt;[^\s]+)\s[^&gt;]*
</snippet></ROW><ROW><id>13492112</id><snippet>REWRITE_LINKS</snippet></ROW><ROW><id>13492112</id><snippet>REWRITE_LINKS = re.compile(r'(&lt;(?P&lt;tagname&gt;[^\s]+)\s[^&gt;]*(?P&lt;attr&gt;action|href|src)=["\'](?P&lt;uri&gt;\S+?)["\'])', re.IGNORECASE)
</snippet></ROW><ROW><id>13492112</id><snippet>if attr.lower() == 'src':</snippet></ROW><ROW><id>13492303</id><snippet>patterns</snippet></ROW><ROW><id>13492303</id><snippet>django.conf.urls.__init__.py</snippet></ROW><ROW><id>13492303</id><snippet>list</snippet></ROW><ROW><id>13492303</id><snippet>tuple</snippet></ROW><ROW><id>13492303</id><snippet>url</snippet></ROW><ROW><id>13492459</id><snippet>cookie = self.STRIP_RE.sub('', request.META.get('HTTP_COOKIE', ''))
</snippet></ROW><ROW><id>13492459</id><snippet>cookie=self.STRIP_RE.sub(",request.META.get('HTTP_COOKIE',"))
                         ^                                ^
</snippet></ROW><ROW><id>13492466</id><snippet>i['grade.good']</snippet></ROW><ROW><id>13492466</id><snippet>i['grade']['good']</snippet></ROW><ROW><id>13492466</id><snippet>In [11]: d = {"grades" : {"good": "40", "bad":"22"}}

In [12]: d['grades']['good']
Out[12]: '40'

In [13]: total= int(d['grades']['good']) + int(d['grades']['bad'])

In [14]: total
Out[14]: 62
</snippet></ROW><ROW><id>13492466</id><snippet>In [21]: d = {"grades" : {"good": "40.0", "bad":"22.0"}}

In [22]: print float(d['grades']['good']) + float(d['grades']['bad'])
62.0
</snippet></ROW><ROW><id>13492630</id><snippet>(\S+){2,50}
</snippet></ROW><ROW><id>13492630</id><snippet>\S+</snippet></ROW><ROW><id>13492630</id><snippet>\S{2,50}
</snippet></ROW><ROW><id>13492661</id><snippet>functools.wraps()</snippet></ROW><ROW><id>13492661</id><snippet>my_custom_decorator</snippet></ROW><ROW><id>13492661</id><snippet>from functools import wraps

def my_custom_decorator(func):
    @wraps(func)
    def __inner():
        return func()
    return __inner
</snippet></ROW><ROW><id>13492661</id><snippet>task</snippet></ROW><ROW><id>13492661</id><snippet>task</snippet></ROW><ROW><id>13492661</id><snippet>__inner</snippet></ROW><ROW><id>13492661</id><snippet>functools.wraps()</snippet></ROW><ROW><id>13492661</id><snippet>func</snippet></ROW><ROW><id>13492661</id><snippet>task()</snippet></ROW><ROW><id>13492914</id><snippet>v-verr</snippet></ROW><ROW><id>13492914</id><snippet>log(x)</snippet></ROW><ROW><id>13492914</id><snippet>x&lt;=0</snippet></ROW><ROW><id>13492914</id><snippet>verr&gt;=v</snippet></ROW><ROW><id>13492914</id><snippet>verr=.999v</snippet></ROW><ROW><id>13492914</id><snippet>import matplotlib.pyplot as plt
import numpy as np

s=[19.0, 20.0, 21.0, 22.0, 24.0]
v=np.array([36.5, 66.814250000000001, 130.17750000000001, 498.57466666666664, 19.41])
verr=np.array([0.28999999999999998, 80.075044597909169, 71.322124839818571,     650.11015891565125, 0.02])
verr2 = np.array(verr)
verr2[verr&gt;=v] = v[verr&gt;=v]*.999999
plt.errorbar(s,v,yerr=[verr2,verr])
plt.ylim(1E1,1E4)
plt.yscale('log')
plt.show()
</snippet></ROW><ROW><id>13492947</id><snippet>S</snippet></ROW><ROW><id>13492947</id><snippet>T</snippet></ROW><ROW><id>13492947</id><snippet>i</snippet></ROW><ROW><id>13492947</id><snippet>T[i:i+len(S)] == S</snippet></ROW><ROW><id>13492947</id><snippet>S</snippet></ROW><ROW><id>13492947</id><snippet>T[i:i] = '' = S</snippet></ROW><ROW><id>13492947</id><snippet>T.index('')</snippet></ROW><ROW><id>13492947</id><snippet>index</snippet></ROW><ROW><id>13492947</id><snippet>T[0:0] = ''</snippet></ROW><ROW><id>13492947</id><snippet>list</snippet></ROW><ROW><id>13492947</id><snippet>tuple</snippet></ROW><ROW><id>13492947</id><snippet>&gt;&gt;&gt; (1,2,3).index(())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: tuple.index(x): x not in tuple
&gt;&gt;&gt; [1,2,3].index([1,2])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: [1, 2] is not in list
&gt;&gt;&gt; [] in [1,2,3]
False
</snippet></ROW><ROW><id>13492947</id><snippet>list</snippet></ROW><ROW><id>13492947</id><snippet>tuple</snippet></ROW><ROW><id>13492947</id><snippet>list</snippet></ROW><ROW><id>13492947</id><snippet>tuple</snippet></ROW><ROW><id>13492947</id><snippet>((1,2),1,2).index((1,2))</snippet></ROW><ROW><id>13492947</id><snippet>index</snippet></ROW><ROW><id>13492998</id><snippet>def __init__(self, first=1, second=2, third=3, fourth=None, fifth=None):
    if first is None:
        first = 0
    else:
        self.first = first
</snippet></ROW><ROW><id>13492998</id><snippet>None</snippet></ROW><ROW><id>13492998</id><snippet>None</snippet></ROW><ROW><id>13493309</id><snippet>filename</snippet></ROW><ROW><id>13493309</id><snippet>filename = ('C:\\python\\abc')
</snippet></ROW><ROW><id>13493349</id><snippet>class BaseLink(models.Model):
     name               = models.CharField(max_length=50)
     slug               = models.SlugField(unique = True)
     level              = models.IntegerField(default='1')
     vectorImage        = models.TextField(blank = True, null=True)
     parent             = models.TextField(default='index')

     def __unicode__(self):
        return self.name

     class Meta:
         abstract = True

class Link(BaseLink):
    pass


class Content(BaseLink):
     context            = models.TextField()
</snippet></ROW><ROW><id>13493390</id><snippet>sys.argv</snippet></ROW><ROW><id>13493603</id><snippet>ElementTree.fromstring(d[0]['data'].encode('utf-8')
</snippet></ROW><ROW><id>13493603</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree
&gt;&gt;&gt; p = ElementTree.fromstring(u'&lt;p&gt;found "\u62c9\u67cf \u591a\u516c \u56ed"&lt;/p&gt;'.encode('utf8'))
&gt;&gt;&gt; p.text
u'found "\u62c9\u67cf \u591a\u516c \u56ed"'
&gt;&gt;&gt; print p.text
found "拉柏 多公 园"
</snippet></ROW><ROW><id>13493626</id><snippet>numpy</snippet></ROW><ROW><id>13493626</id><snippet>with open('data_file.dat') as in_file, open('output', 'w') as out_file:
    for line in in_file:
         data = float(line.strip())
         print &gt;&gt; outfile "'w040_0731.QR'", '1666.000', data, '0.10000', '7' 
</snippet></ROW><ROW><id>13493650</id><snippet>splrep</snippet></ROW><ROW><id>13493650</id><snippet>splrep</snippet></ROW><ROW><id>13493650</id><snippet>s</snippet></ROW><ROW><id>13493677</id><snippet>soup.find('p', class_='scroll-down')
</snippet></ROW><ROW><id>13493677</id><snippet>p</snippet></ROW><ROW><id>13493677</id><snippet>.extract()</snippet></ROW><ROW><id>13493677</id><snippet>&gt;&gt;&gt; soup.find('p', class_='scroll-down').extract()
&lt;p class="scroll-down"&gt; &lt;a href="#main-desc" onclick="Effect.ScrollTo(
'main-desc', { duration:'0.2'}); return false;"&gt;Full Description&lt;/a&gt; &lt;/p&gt;
&gt;&gt;&gt; print soup

&lt;div class="short-description std "&gt;
&lt;em&gt;Android Apps Security&lt;/em&gt; provides guiding principles for how to 
best design and develop Android apps with security in mind. The book explores 
techniques that developers can use to build additional layers of security into 
their apps beyond the security controls provided by Android itself.             
&lt;/div&gt;
</snippet></ROW><ROW><id>13493677</id><snippet>.extract()</snippet></ROW><ROW><id>13493677</id><snippet>.decompose()</snippet></ROW><ROW><id>13493929</id><snippet>def reverseTranslation(d):
    return dict((v1,[k for k,v in d.iteritems() if v1 in v])
                for v1 in set(sum(d.values(),[])))
</snippet></ROW><ROW><id>13493974</id><snippet>sudo port install portaudio
</snippet></ROW><ROW><id>13494180</id><snippet>self.hey=wx.TextCtrl(panel,-1,"",pos=(60,10), size=(100,25))
</snippet></ROW><ROW><id>13494180</id><snippet>def getPdb(self,event):
    dlg = wx.FileDialog(self, "Choose a file", os.getcwd(), "", "*.*", wx.OPEN)
    mypath = ''
    if dlg.ShowModal() == wx.ID_OK:
        path = dlg.GetPath()
        mypath=os.path.basename(path)
    dlg.Destroy()

    if mypath:
        self.hey.Clear()
        self.hey.AppendText(mypath)
    return
</snippet></ROW><ROW><id>13494191</id><snippet>''.join(list_of_chars)
</snippet></ROW><ROW><id>13494191</id><snippet>''.join(['h', 'e', 'l', 'l', 'o'])
=&gt; 'hello'
</snippet></ROW><ROW><id>13494359</id><snippet>ADMINS = ( ('John Doe','some_email@that-isnt-just-g.com') )
</snippet></ROW><ROW><id>13494359</id><snippet>ADMINS = [ ('John Doe','some_email@that-isnt-just-g.com') ]
</snippet></ROW><ROW><id>13494359</id><snippet>ADMINS = ( ('John Doe','some_email@that-isnt-just-g.com'), )
</snippet></ROW><ROW><id>13494818</id><snippet>from django.db.models import Max

Complaint.objects.annotate(max=Max('responseletter__date_response')).order_by('-max')
</snippet></ROW><ROW><id>13494889</id><snippet>class MyClass(object):
    def __init__(self, **kwargs): # variable named arguments
        for k, v in kwargs.items():
           setattr(self, k, v) # set the value of self.k to v, same as self.k = v


test = MyClass(param1="param1", param2="param2")
print test.param1 # "param1"
</snippet></ROW><ROW><id>13495125</id><snippet>{{ MEDIA_URL }}/favicon.ico</snippet></ROW><ROW><id>13495557</id><snippet>manage.py</snippet></ROW><ROW><id>13495557</id><snippet>django-admin.py startproject myprojectname</snippet></ROW><ROW><id>13495871</id><snippet>frame = int(self.nframes * value)
</snippet></ROW><ROW><id>13495871</id><snippet>frame</snippet></ROW><ROW><id>13495973</id><snippet>def __eq__(self,other):
    return self.name == self.count
</snippet></ROW><ROW><id>13495973</id><snippet>def __eq__(self,other):
    return self.name == other.name
</snippet></ROW><ROW><id>13496070</id><snippet>for x in ['foo', 'bar', 'ray', 'mee']:
    random_list.append(getattr(model_instance, x))
</snippet></ROW><ROW><id>13496073</id><snippet>-rsx</snippet></ROW><ROW><id>13496073</id><snippet>py.test --help</snippet></ROW><ROW><id>13496073</id><snippet>-r chars            show extra test summary info as specified by chars
                    (f)ailed, (E)error, (s)skipped, (x)failed, (X)passed.
</snippet></ROW><ROW><id>13496077</id><snippet>a = []
b = iter(a)
print a, b # -&gt; [] &lt;listiterator object at ...&gt;
</snippet></ROW><ROW><id>13496077</id><snippet>for i in a: ...
</snippet></ROW><ROW><id>13496077</id><snippet>__iter__()</snippet></ROW><ROW><id>13496077</id><snippet>.next()</snippet></ROW><ROW><id>13496077</id><snippet>__next__()</snippet></ROW><ROW><id>13496077</id><snippet>.__iter__()</snippet></ROW><ROW><id>13496244</id><snippet>def getstuff():
    return raw_input("Enter your result")

theresult = getstuff()
print theresult
</snippet></ROW><ROW><id>13496244</id><snippet>global</snippet></ROW><ROW><id>13496247</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.randint(100000000000,999999999999)
544234865004L
</snippet></ROW><ROW><id>13496247</id><snippet>&gt;&gt;&gt; "%0.12d" % random.randint(0,999999999999)
'023432326286'
</snippet></ROW><ROW><id>13496247</id><snippet>import random

def rand_x_digit_num(x, leading_zeroes=True):
    if not leading_zeroes:
        return random.randint(10**(x-1), 10**x-1)
    else:
        if x &gt; 6000:
            return ''.join([str(random.randint(0, 9)) for i in xrange(x)])
        else:
            return str("%0." + str(x) + "d") % random.randint(0, 10**x-1)
</snippet></ROW><ROW><id>13496247</id><snippet>&gt;&gt;&gt; rand_x_digit_num(5)
'97225'
&gt;&gt;&gt; rand_x_digit_num(5, False)
15470
&gt;&gt;&gt; rand_x_digit_num(10)
'8273890244'
&gt;&gt;&gt; rand_x_digit_num(10)
'0019234207'
&gt;&gt;&gt; rand_x_digit_num(10, False)
9140630927L
</snippet></ROW><ROW><id>13496247</id><snippet>def timer(x):
        s1 = datetime.now()
        a = ''.join([str(random.randint(0, 9)) for i in xrange(x)])
        e1 = datetime.now()
        s2 = datetime.now()
        b = str("%0." + str(x) + "d") % random.randint(0, 10**x-1)
        e2 = datetime.now()
        print "a took %s, b took %s" % (e1-s1, e2-s2)
</snippet></ROW><ROW><id>13496247</id><snippet>&gt;&gt;&gt; timer(1000)
a took 0:00:00.002000, b took 0:00:00
&gt;&gt;&gt; timer(10000)
a took 0:00:00.021000, b took 0:00:00.064000
&gt;&gt;&gt; timer(100000)
a took 0:00:00.409000, b took 0:00:04.643000
&gt;&gt;&gt; timer(6000)
a took 0:00:00.013000, b took 0:00:00.012000
&gt;&gt;&gt; timer(2000)
a took 0:00:00.004000, b took 0:00:00.001000
</snippet></ROW><ROW><id>13496423</id><snippet>if "startingBalance" in i.tag:
</snippet></ROW><ROW><id>13496423</id><snippet>   for i in fiscalYear:
       for subele in i:   
           if "startingBalance" in subele.tag:
               print("found something")
               if subele.attrib['account'] == accountNr:
                    startingBalance = subele.attrib['balance']
                    #etc, etc
</snippet></ROW><ROW><id>13496679</id><snippet>myarray = rand(5,5,5)
name = 'myarray'+myarray.shape+'.txt'
np.savetxt(name,myarray.flatten())
</snippet></ROW><ROW><id>13496825</id><snippet>In [218]: mystr =  "4a65737573"

In [219]: for i in range(0, len(mystr), 2):
   .....:     print mystr[i:i+4]
   .....:     
4a65
6573
7375
7573
73
</snippet></ROW><ROW><id>13497094</id><snippet>expecting</snippet></ROW><ROW><id>13497094</id><snippet>[]</snippet></ROW><ROW><id>13497094</id><snippet>\[</snippet></ROW><ROW><id>13497094</id><snippet>prompts = []
prompts += expect('Are you sure.*', 'N')
with expecting(prompts):
    sudo("/something.sh apply /some.file" , user="someuser")
</snippet></ROW><ROW><id>13497094</id><snippet>hide('commands')</snippet></ROW><ROW><id>13497094</id><snippet>something.sh</snippet></ROW><ROW><id>13497227</id><snippet>def cycles(a):
    return [ a[i:] + a[:i] for i in range(len(a)) ]
</snippet></ROW><ROW><id>13497227</id><snippet>b in cycles(a)
</snippet></ROW><ROW><id>13497227</id><snippet>set_cycles = set(cycles(a))
b in set_cycles
</snippet></ROW><ROW><id>13497227</id><snippet>any( b == a[i:]+a[:i] for i in range(len(a)))
</snippet></ROW><ROW><id>13497227</id><snippet>cycles</snippet></ROW><ROW><id>13497928</id><snippet>some_func</snippet></ROW><ROW><id>13497931</id><snippet>log</snippet></ROW><ROW><id>13497931</id><snippet>x=0</snippet></ROW><ROW><id>13497931</id><snippet>def safe_ln(x):
    if x &lt;= 0:
        return 0
    return math.log(x)
</snippet></ROW><ROW><id>13497931</id><snippet>np.log</snippet></ROW><ROW><id>13497931</id><snippet>math.log</snippet></ROW><ROW><id>13497931</id><snippet>def safe_ln(x, minval=0.0000000001):
    return np.log(x.clip(min=minval))
</snippet></ROW><ROW><id>13498131</id><snippet>cnx.commit()
</snippet></ROW><ROW><id>13498131</id><snippet>()</snippet></ROW><ROW><id>13498131</id><snippet>cursor.close</snippet></ROW><ROW><id>13498135</id><snippet>def myPostOrder(root, par=None):
    if root:
        root.parent = par
        myPostOrder(root.left, root)
        myPostOrder(root.right, root)
</snippet></ROW><ROW><id>13498226</id><snippet>def slit_cc(rest):
    for i in range(1, 4): # country_code size
        presumed_cc = rest[0:i]
        country_handler = splitter_mapping[i].get(presumed_cc):
        if country_handler:
            return [country_handler, presumed_cc, rest]

    return None # shouldn't happen
</snippet></ROW><ROW><id>13498226</id><snippet>splitter_mapping</snippet></ROW><ROW><id>13498227</id><snippet>class</snippet></ROW><ROW><id>13498227</id><snippet>Bar</snippet></ROW><ROW><id>13498227</id><snippet>__cache</snippet></ROW><ROW><id>13498227</id><snippet>__new__</snippet></ROW><ROW><id>13498227</id><snippet>__cache</snippet></ROW><ROW><id>13498341</id><snippet>list1.extend(list2)</snippet></ROW><ROW><id>13498500</id><snippet>for k in range(10):
    a[k] = td[:] 
</snippet></ROW><ROW><id>13498500</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; el = [1, 2, 3]
&gt;&gt;&gt; d[0] = el
&gt;&gt;&gt; d[1] = el
&gt;&gt;&gt; map(id, d.values())
[28358416, 28358416]
</snippet></ROW><ROW><id>13498549</id><snippet>logging</snippet></ROW><ROW><id>13498549</id><snippet>buffering</snippet></ROW><ROW><id>13498549</id><snippet>open</snippet></ROW><ROW><id>13498549</id><snippet>&gt;&gt;&gt; a = open('/tmp/bar', 'w')
&gt;&gt;&gt; a.write('hi\n')
</snippet></ROW><ROW><id>13498549</id><snippet>$ cat /tmp/bar
$
</snippet></ROW><ROW><id>13498549</id><snippet>&gt;&gt;&gt; a = open('/tmp/bar', 'w', 0)
&gt;&gt;&gt; a.write('hi\n')
</snippet></ROW><ROW><id>13498549</id><snippet>$ cat /tmp/var
hi
$
</snippet></ROW><ROW><id>13498549</id><snippet>logging</snippet></ROW><ROW><id>13499196</id><snippet>&gt;&gt;&gt; start = 0
&gt;&gt;&gt; end = 300
&gt;&gt;&gt; step = 100
&gt;&gt;&gt; [[1 + x, step + x] for x in range(start, end, step)]
[[1, 100], [101, 200], [201, 300]]
</snippet></ROW><ROW><id>13499439</id><snippet>for char in w:
    if w not in digits:
      ^^^
</snippet></ROW><ROW><id>13499439</id><snippet>for char in w:
    if char not in digits: 
       ^^^^
</snippet></ROW><ROW><id>13499463</id><snippet>#line contains JSON string
data = json.loads(line)
# ...
derivedIds = data['derivedFrom']
if not isinstance(derivedIds, list):
    derivedIds = [derivedIds]
for deid in derivedIds:
</snippet></ROW><ROW><id>13499505</id><snippet>lookup = {}
with open("champions.txt") as f:
    for line in f:
        line = line.rstrip().split('-', 1)
        if not line: continue # skip any blank lines

        name = line[0].strip()
        lookup[name.lower()] = name
        if len(line) == 2:  # any alternative names given?
            for item in line[1].split(','):
                lookup[item.strip()] = name

print 'lookup table:'
for alt_name, real_name in sorted(lookup.items()):
    print '{}: {}'.format(alt_name, real_name)
print

while True:
    print "which champ (Enter to quit): "  # ask user for input
    value = raw_input().lower()  # get the input and make it lowercase
    if not value: break

    real_name = lookup.get(value)
    if real_name:
        print 'found:', value, '--&gt;', real_name
    else:
        print 'error: no match for', value
</snippet></ROW><ROW><id>13499516</id><snippet>form.process(session=None, formname='test')
</snippet></ROW><ROW><id>13499516</id><snippet>session=None</snippet></ROW><ROW><id>13499516</id><snippet>session=None</snippet></ROW><ROW><id>13499516</id><snippet>form.errors</snippet></ROW><ROW><id>13499516</id><snippet>session=None</snippet></ROW><ROW><id>13499516</id><snippet>&lt;input name="_formkey" type="hidden" value="{{=formkey}}" /&gt;
</snippet></ROW><ROW><id>13499516</id><snippet>def test():
    ...
    return dict(formkey=form.formkey)
</snippet></ROW><ROW><id>13499678</id><snippet> ArticleFormSet = formset_factory(ArticleForm, extra=2, max_num=1)
</snippet></ROW><ROW><id>13499704</id><snippet>QAbstractButton</snippet></ROW><ROW><id>13499704</id><snippet>QPushButton</snippet></ROW><ROW><id>13499704</id><snippet>QRadioButton</snippet></ROW><ROW><id>13499704</id><snippet>QCheckBox</snippet></ROW><ROW><id>13499704</id><snippet>QGroupBox</snippet></ROW><ROW><id>13499704</id><snippet>QFrame</snippet></ROW><ROW><id>13499704</id><snippet>QWidget</snippet></ROW><ROW><id>13499704</id><snippet>btngroup.py</snippet></ROW><ROW><id>13499704</id><snippet>from PyQt4 import QtGui, QtCore
from btngroup_ui import Ui_ButtonGroup

class Window(QtGui.QWidget, Ui_ButtonGroup):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.setupUi(self)
        self.buttonGroup = QtGui.QButtonGroup(self)
        for button in self.buttonBox.findChildren(QtGui.QAbstractButton):
            self.buttonGroup.addButton(button)
        self.buttonGroup.buttonClicked.connect(self.handleButtonClicked)

    def handleButtonClicked(self, button):
        print('"%s" was clicked' % button.text())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13499704</id><snippet>btngroup_ui.py</snippet></ROW><ROW><id>13499704</id><snippet># -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'btngroup.ui'
#
# Created: Wed Nov 21 17:50:42 2012
#      by: PyQt4 UI code generator 4.9.5
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

class Ui_ButtonGroup(object):
    def setupUi(self, ButtonGroup):
        ButtonGroup.setObjectName(_fromUtf8("ButtonGroup"))
        ButtonGroup.resize(240, 167)
        self.horizontalLayout = QtGui.QHBoxLayout(ButtonGroup)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.buttonBox = QtGui.QWidget(ButtonGroup)
        self.buttonBox.setObjectName(_fromUtf8("buttonBox"))
        self.verticalLayout = QtGui.QVBoxLayout(self.buttonBox)
        self.verticalLayout.setMargin(0)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.buttonA = QtGui.QPushButton(self.buttonBox)
        self.buttonA.setObjectName(_fromUtf8("buttonA"))
        self.verticalLayout.addWidget(self.buttonA)
        self.buttonB = QtGui.QPushButton(self.buttonBox)
        self.buttonB.setObjectName(_fromUtf8("buttonB"))
        self.verticalLayout.addWidget(self.buttonB)
        self.buttonC = QtGui.QPushButton(self.buttonBox)
        self.buttonC.setObjectName(_fromUtf8("buttonC"))
        self.verticalLayout.addWidget(self.buttonC)
        self.buttonD = QtGui.QPushButton(self.buttonBox)
        self.buttonD.setObjectName(_fromUtf8("buttonD"))
        self.verticalLayout.addWidget(self.buttonD)
        self.horizontalLayout.addWidget(self.buttonBox)

        self.retranslateUi(ButtonGroup)
        QtCore.QMetaObject.connectSlotsByName(ButtonGroup)

    def retranslateUi(self, ButtonGroup):
        ButtonGroup.setWindowTitle(QtGui.QApplication.translate("ButtonGroup", "Button Group", None, QtGui.QApplication.UnicodeUTF8))
        self.buttonA.setText(QtGui.QApplication.translate("ButtonGroup", "Button A", None, QtGui.QApplication.UnicodeUTF8))
        self.buttonB.setText(QtGui.QApplication.translate("ButtonGroup", "Button B", None, QtGui.QApplication.UnicodeUTF8))
        self.buttonC.setText(QtGui.QApplication.translate("ButtonGroup", "Button C", None, QtGui.QApplication.UnicodeUTF8))
        self.buttonD.setText(QtGui.QApplication.translate("ButtonGroup", "Button D", None, QtGui.QApplication.UnicodeUTF8))
</snippet></ROW><ROW><id>13499789</id><snippet>nosetests --with-coverage --cover-package=herokuapp
</snippet></ROW><ROW><id>13499853</id><snippet>functools.partial()</snippet></ROW><ROW><id>13499853</id><snippet>from functools import partial

mapfunc = partial(my_function, ip=ip)
map(mapfunc, volume_ids)
</snippet></ROW><ROW><id>13499853</id><snippet>partial()</snippet></ROW><ROW><id>13499881</id><snippet>q1.join(s, a1.age==s.columns.age).all()
</snippet></ROW><ROW><id>13499881</id><snippet>ON user_1.age = anon_1.age</snippet></ROW><ROW><id>13499894</id><snippet>set(first).intersection(second, third) # fourth, fifth, etc...
&gt;&gt;&gt; set([1, 2, 3]).intersection([2, 3, 4], [3, 4, 5])
set([3])
</snippet></ROW><ROW><id>13499894</id><snippet>&gt;&gt;&gt; set([1, 2, 3]) &amp; set([4]).union([5])
set([2])
</snippet></ROW><ROW><id>13499894</id><snippet>def in_all(fst, *rst):
    return set(fst).intersection(*rst)

def in_any(fst, *rst):
    it = iter(rst)
    return set(fst) &amp; set(next(it, [])).union(*it)
</snippet></ROW><ROW><id>13500013</id><snippet>if request.method == 'POST':
    form = SubmitTask(task.file_required, request.POST, request.FILES)
    ...
else:
    form = SubmitTask(task.file_required, ...)

data['form'] = form
</snippet></ROW><ROW><id>13500080</id><snippet>&lt;div id="postswrapper"&gt;
           &lt;div class="item"&gt;content&lt;/div&gt;
           &lt;div id="loadmoreajaxloader" style="display:none;"&gt;&lt;center&gt;&lt;img src="ajax-loader.gif" /&gt;&lt;/center&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;script type="text/javascript"&gt;
        var pageCounter = 2;
        $(window).scroll(function()
        {
            if (pageCounter &gt; 0)
            {
                if($(window).scrollTop() == $(document).height() - $(window).height())
                {
                    $('div#loadmoreajaxloader').show();
                    $.ajax({  url: "./page/" + pageCounter , success: function(html)  {
                            if(html)
                            {
                                $("#postswrapper").append(html);
                                $('div#loadmoreajaxloader').hide();
                                pageCounter++;
                            }else
                            {
                                pageCounter = -1;
                                $('div#loadmoreajaxloader').html('&lt;center&gt;No more posts to show.&lt;/center&gt;');
                            }
                        }
                    });
                    pageCounter = -1;
                }
            }
        });
    &lt;/script&gt;
</snippet></ROW><ROW><id>13500080</id><snippet>class Page(webapp2.RequestHandler):
    def get(self,page):
        numberOfPages = int(page)
        records_query = db.GqlQuery("SELECT * FROM Record order by date desc")
        records = records_query.fetch(numberOfPages * 10)
        records = records[((numberOfPages- 1) * 10):]
        if len(records) &gt; 0:
            template_values = {
             'records': records,
            }
            path = os.path.join(os.path.dirname(__file__), 'posts.html')
            self.response.out.write(template.render(path, template_values))
</snippet></ROW><ROW><id>13500080</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% for record in records %}
&lt;div class="oneRecord"&gt;
    &lt;img src="{{ record.imageCacheURL }}" /&gt;
    &lt;a href ="./{{ record.imageID }}"&gt; {{ record.title|escape }}&lt;/a&gt;
&lt;/div&gt;
{% endfor %}
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13500304</id><snippet>repr()</snippet></ROW><ROW><id>13500304</id><snippet>repr()</snippet></ROW><ROW><id>13500304</id><snippet>print</snippet></ROW><ROW><id>13500304</id><snippet>str()</snippet></ROW><ROW><id>13500304</id><snippet>print repr(raw)</snippet></ROW><ROW><id>13500304</id><snippet>&gt;&gt;&gt; "'\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00g\\xc4|\\x00\\x00\\x00\\x00\\x00'"
"'\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00g\\xc4|\\x00\\x00\\x00\\x00\\x00'"
&gt;&gt;&gt; print "'\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00g\\xc4|\\x00\\x00\\x00\\x00\\x00'"
'\x04\x00\x00\x00\x00\x00\x00\x00g\xc4|\x00\x00\x00\x00\x00'
&gt;&gt;&gt; print repr("'\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00g\\xc4|\\x00\\x00\\x00\\x00\\x00'")
"'\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00g\\xc4|\\x00\\x00\\x00\\x00\\x00'"
</snippet></ROW><ROW><id>13500863</id><snippet># http://plumberjack.blogspot.de/2010/10/supporting-alternative-formatting.html
class BraceMessage(object):
    def __init__(self, fmt, *args, **kwargs):
        self.fmt = fmt
        self.args = args
        self.kwargs = kwargs

    def __str__(self):
        return self.fmt.format(*self.args, **self.kwargs)

_F = BraceMessage
</snippet></ROW><ROW><id>13500863</id><snippet>logger.debug(_F("foo {0} {quux}", bar, quux=baz))
</snippet></ROW><ROW><id>13500863</id><snippet>logutils</snippet></ROW><ROW><id>13500952</id><snippet>sendmail</snippet></ROW><ROW><id>13500952</id><snippet>def sendmail(toaddy, msg):  
    debuglevel = 0
    smtp = SMTP()
    smtp.set_debuglevel(debuglevel)
    smtp.connect('YOUR.MAIL.SERVER', 26)
    smtp.login('USERNAME@DOMAIN', 'PASSWORD')
    fromaddy = 'USERNAME@DOMAIN'
    smtp.sendmail(fromaddy, toaddy, msg)
    smtp.quit()
</snippet></ROW><ROW><id>13501135</id><snippet>cmp</snippet></ROW><ROW><id>13501135</id><snippet>key</snippet></ROW><ROW><id>13501135</id><snippet>print sorted(mydict.iteritems(), key=lambda (k,v): float(v[0])/v[1])
</snippet></ROW><ROW><id>13501135</id><snippet>print sorted(mydict.iteritems(), key=lambda (k,v): sum(v))
</snippet></ROW><ROW><id>13501135</id><snippet>cmp</snippet></ROW><ROW><id>13501135</id><snippet>return cmp(sx,sy)
</snippet></ROW><ROW><id>13501135</id><snippet>itemgetter</snippet></ROW><ROW><id>13501135</id><snippet>from operator import itemgetter

print sorted(mydict.iteritems(), key=itemgetter(1), cmp=cmpRatio)
</snippet></ROW><ROW><id>13501135</id><snippet>key_ops = {
    'sum': lambda (k,v): sum(v),
    'ratio': lambda (k,v): float(v[0])/v[1]),
}

def print_op(aDict, opName):
    print sorted(aDict.iteritems(), key=key_ops[opName])

... # some place later in code
print_op(mydict, 'sum')
</snippet></ROW><ROW><id>13501146</id><snippet>from string import maketrans

def encrypt(s, scheme):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    translation = maketrans(alphabet, scheme)
    return s.translate(translation)
</snippet></ROW><ROW><id>13501146</id><snippet>translate</snippet></ROW><ROW><id>13501158</id><snippet>In [2]: for line in s.splitlines():
   ...:     print repr(line)
   ...:     
''
'    class A:'
'    \tdef LoadPosition(self):'
'\t        FILE = open(\'a.txt\', "r+")'
'    \t'
'\t\t    i = 0'
'    \t    for node in self.nodes:'
'    \t    \tline = FILE.readline()'
'    \t    \tif i == 0:'
'    \t    \t\tscaling_factor == float(line)'
'    \t    \t\ti += 1'
'    \t    \telse:'
"    \t    \t\ttmpn, tmpx, tmpy, tmpa = line.split('\t')"
'\t       \t     \tnode.id = tmpn'
'   \t\t         \tnode.coordinate_x = float(tmpx)'
'   \t\t         \tnode.coordinate_y = float(tmpy)'
'   \t\t     \t    node.area = int(tmpa)'
'\t\t    FILE.close()'
</snippet></ROW><ROW><id>13501158</id><snippet>python -tt yourfilenamehere.py</snippet></ROW><ROW><id>13501211</id><snippet>firsWithPath = fileWithPath.replace('"', '')
</snippet></ROW><ROW><id>13501211</id><snippet>firsWithPath = fileWithPath.strip('"')
</snippet></ROW><ROW><id>13501211</id><snippet>'\\'</snippet></ROW><ROW><id>13501211</id><snippet>os.path.sep</snippet></ROW><ROW><id>13501211</id><snippet>'\\'</snippet></ROW><ROW><id>13501467</id><snippet>STATIC_ROOT = "Absolute path to your static directory" (Example: /home/your_app/static)
STATIC_URL = "/static/" (Could be anything you would like to use)
</snippet></ROW><ROW><id>13501467</id><snippet>{{STATIC_URL}}/file_path_from_static_directory/
</snippet></ROW><ROW><id>13501467</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>13501513</id><snippet>.write</snippet></ROW><ROW><id>13501513</id><snippet>unicode</snippet></ROW><ROW><id>13501513</id><snippet>str</snippet></ROW><ROW><id>13501513</id><snippet>.encode</snippet></ROW><ROW><id>13501513</id><snippet>str</snippet></ROW><ROW><id>13501513</id><snippet>print</snippet></ROW><ROW><id>13501513</id><snippet>str</snippet></ROW><ROW><id>13501513</id><snippet>f.write(textwrap.dedent(the_string).encode('utf-8'))</snippet></ROW><ROW><id>13501513</id><snippet>import sys
f.write(textwrap.dedent(the_string).encode(sys.getdefaultencoding()))
</snippet></ROW><ROW><id>13501788</id><snippet>app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
</snippet></ROW><ROW><id>13501788</id><snippet>app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://username:password@server.site.com/database'
</snippet></ROW><ROW><id>13502123</id><snippet>raw</snippet></ROW><ROW><id>13502123</id><snippet>g</snippet></ROW><ROW><id>13502123</id><snippet>|</snippet></ROW><ROW><id>13502123</id><snippet>\xc4</snippet></ROW><ROW><id>13502123</id><snippet>raw</snippet></ROW><ROW><id>13502123</id><snippet>[4, 0, 0, 0, 0, 0, 0, 0, 103, 196, 124, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>13502123</id><snippet>&gt;&gt;&gt; values = [4, 0, 0, 0, 0, 0, 0, 0, 103, 196, 124, 0, 0, 0, 0, 0]
&gt;&gt;&gt; as_characters = ''.join(chr(c) for c in values)
&gt;&gt;&gt; as_characters
'\x04\x00\x00\x00\x00\x00\x00\x00g\xc4|\x00\x00\x00\x00\x00'
&gt;&gt;&gt; len(as_characters)
16
</snippet></ROW><ROW><id>13502123</id><snippet>raw</snippet></ROW><ROW><id>13502123</id><snippet>as_characters</snippet></ROW><ROW><id>13502123</id><snippet>pkt[1].sprintf('%Padding.loadr%')</snippet></ROW><ROW><id>13502291</id><snippet>global_array1 = []
global_array2 = []

def myfunc(aResult, anArray):
  global global_array1
  global global_array2

  for a in anArray:
      if a:
          result = global_array1
      else:
          result = global_array2

      # do something hhere
      result.append(aResult)

anArray = [True, True, False]

myfunc(1, anArray)
myfunc(2, anArray)
myfunc(3, anArray)

print 'global_array1:', global_array1
print 'global_array2:', global_array2
</snippet></ROW><ROW><id>13502291</id><snippet>global_array1: [1, 1, 2, 2, 3, 3]
global_array2: [1, 2, 3]
</snippet></ROW><ROW><id>13502480</id><snippet>$.fx.speeds._default = 1000;
$(function() {
    $( "#dialog" ).dialog({
        autoOpen: false,
        show: "slide",
        hide: "fade"
    });
});
$(document).ready(function(){
  $("#selectable").children("li").each(function() {
      $(this).mouseover(function(){
          $(this).css("background-color","#FECA40");
      });
      $(this).mouseout(function(){
          $(this).css("background-color","white");
      });
      $(this).click(function(){
          // if no dialog has been created for this li
          if (!$(this).data('dialog')) {
              // initialize one
              $(this).data('dialog', 
                  $('&lt;div /&gt;')
                      //.text($(this).text()) // set the text of the dialog
                      .load('someurl.php?file=' + encodeURIComponent($(this).text())) // set content by ajax request
                      .dialog({autoOpen: false})
              );
          }
          var dlg = $(this).data('dialog');
          dlg.dialog( "open" );
          return false;
    });
  });
});
</snippet></ROW><ROW><id>13502635</id><snippet>search</snippet></ROW><ROW><id>13502635</id><snippet>import os, re

NUM_RE = re.compile(r'\d+')

for name in os.listdir('.'):
    match = NUM_RE.search(name)
    if match is None or match.start() == 0:
        continue  # no number or number already at start
    newname = match.group(0) + name[:match.start()] + name[match.end():]
    print 'renaming', name, 'to', newname
    #os.rename(name, newname)
</snippet></ROW><ROW><id>13502635</id><snippet>match.group(0)</snippet></ROW><ROW><id>13502635</id><snippet>foo2.txt</snippet></ROW><ROW><id>13502635</id><snippet>02foo.txt</snippet></ROW><ROW><id>13502635</id><snippet>12bar.txt</snippet></ROW><ROW><id>13502715</id><snippet>try .. catch</snippet></ROW><ROW><id>13502715</id><snippet>try:
  function1()
  function2()
  function3()
  function4()
except database.error as e:
  print 'Database error occured'
</snippet></ROW><ROW><id>13502825</id><snippet>while True:
    #loop1
    while True:
       #do something
       with open("some.file") as f:
            if f.read() == "loop2":
                break
     #loop2
     while True:
        #do something
        with open("some.file") as f:
            if f.read() == "loop1":
                break
</snippet></ROW><ROW><id>13503011</id><snippet>_print_rows</snippet></ROW><ROW><id>13503011</id><snippet>csv.reader</snippet></ROW><ROW><id>13503011</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; filename = 'first_class_profile.csv'
&gt;&gt;&gt; reader = csv.reader(filename) # whoops! should have passed opened_file
&gt;&gt;&gt; for row in reader:
...     print row
...
['f']
['i']
['r']
['s']
['t']
['_']
['c']
['l']
['a']
['s']
['s']
['_']
['p']
['r']
['o']
['f']
['i']
['l']
['e']
['.']
['c']
['s']
['v']
</snippet></ROW><ROW><id>13503134</id><snippet># assuming you have values each on separate line
values = []
for line in open('path-to-the-file'):
    values.append(line)
    # might want to implement stripping newlines and such in here
    # by using line.strip() or .rstrip()

# or perhaps more than one value in a line, with some separator
values = []
for line in open('path-to-the-file'):
    # e.g. ':' as a separator
    separator = ':'
    line = line.split(separator)
    for value in line:
        values.append(value)

# or all in one line with separators
values = open('path-to-the-file').read().split(separator)
# might want to use .strip() on this one too, before split method
</snippet></ROW><ROW><id>13503252</id><snippet>def __init__(self):
    ...
    self.items = {'1':['a','b','c'],'2':['d','e','f'],'3':['g','h','i']}
    self.Combobox_1.activated[str].connect(self.on_combo_activated)
    ...

...

def on_combo_activated(self, text):
    self.Combobox_2.clear()
    self.Combobox_2.addItems(self.items[text])
</snippet></ROW><ROW><id>13503277</id><snippet>import types

def f(x, y=2):
    return x,y

g = types.FunctionType(f.func_code, f.func_globals, name = f.func_name,
                       argdefs = f.func_defaults,
                       closure = f.func_closure)
print(f(1))
print(g(1))
assert f is not g
</snippet></ROW><ROW><id>13503277</id><snippet>(1, 2)
(1, 2)
</snippet></ROW><ROW><id>13503411</id><snippet>lib</snippet></ROW><ROW><id>13503411</id><snippet>.a</snippet></ROW><ROW><id>13503411</id><snippet>-lcrvs_pic 
</snippet></ROW><ROW><id>13503464</id><snippet>args.avg_window</snippet></ROW><ROW><id>13503464</id><snippet>int()</snippet></ROW><ROW><id>13503464</id><snippet>set_xlim(int(args.avg_window), right=1)
</snippet></ROW><ROW><id>13503561</id><snippet>badpoints = np.array(ginput(n=0))
index_badpoints = np.argmin(abs(np.subtract(badpoints[:,0],yeardays)),axis=1)
</snippet></ROW><ROW><id>13503778</id><snippet>ValueError</snippet></ROW><ROW><id>13503778</id><snippet>TypeError</snippet></ROW><ROW><id>13503778</id><snippet>a = 4</snippet></ROW><ROW><id>13503778</id><snippet>color[0]</snippet></ROW><ROW><id>13503778</id><snippet>color[0]</snippet></ROW><ROW><id>13503778</id><snippet>254</snippet></ROW><ROW><id>13503778</id><snippet>color[0]</snippet></ROW><ROW><id>13503778</id><snippet>a</snippet></ROW><ROW><id>13503778</id><snippet>-4</snippet></ROW><ROW><id>13503778</id><snippet>color[0]</snippet></ROW><ROW><id>13503778</id><snippet>250</snippet></ROW><ROW><id>13503778</id><snippet>4</snippet></ROW><ROW><id>13503778</id><snippet>&gt;&gt;&gt; from itertools import izip, cycle
&gt;&gt;&gt; a = range(0, 20, 4) + range(20, 0, -4)
&gt;&gt;&gt; b = range(0, 20, 3) + range(20, 0, -3)
&gt;&gt;&gt; c = range(0, 20, 2) + range(20, 0, -2)
&gt;&gt;&gt; test = izip(cycle(a), cycle(b), cycle(c))
&gt;&gt;&gt; for i in range(30):
    print next(test)

(0, 0, 0)
(4, 3, 2)
(8, 6, 4)
(12, 9, 6)
(16, 12, 8)
(20, 15, 10)
(16, 18, 12)
(12, 20, 14)
(8, 17, 16)
(4, 14, 18)
(0, 11, 20)
(4, 8, 18)
(8, 5, 16)
(12, 2, 14)
(16, 0, 12)
(20, 3, 10)
(16, 6, 8)
(12, 9, 6)
(8, 12, 4)
(4, 15, 2)
(0, 18, 0)
(4, 20, 2)
(8, 17, 4)
(12, 14, 6)
(16, 11, 8)
(20, 8, 10)
(16, 5, 12)
(12, 2, 14)
(8, 0, 16)
(4, 3, 18)
</snippet></ROW><ROW><id>13503782</id><snippet>import collections

class FrequencyString(str):
    @property
    def normalized(self):
        try:
            return self._normalized
        except AttributeError:
            self._normalized = normalized = ''.join(sorted(collections.Counter(self).elements()))
            return normalized

    def __eq__(self, other):
        return self.normalized == other.normalized

    def __hash__(self):
        return hash(self.normalized)
</snippet></ROW><ROW><id>13503817</id><snippet>__file__</snippet></ROW><ROW><id>13503817</id><snippet>os.path.dirname(os.path.realpath(__file__))
</snippet></ROW><ROW><id>13503817</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>13503859</id><snippet>required</snippet></ROW><ROW><id>13503859</id><snippet>class RegisterForm(forms.Form):
    username = forms.CharField(
        widget = forms.TextInput(attrs = {'placeholder': 'username'}),
        required = True)
    email = forms.EmailField(
        widget = forms.TextInput(attrs = {'placeholder': 'email'}),
        required = True)
    password = forms.CharField(
        widget = forms.PasswordInput(attrs = {'placeholder': 'password'}),
        required = True)
    password_repeat = forms.CharField(
        widget = forms.PasswordInput(attrs = {'placeholder': 'retype password'}),
        required = True)
</snippet></ROW><ROW><id>13503859</id><snippet>initial = ''</snippet></ROW><ROW><id>13503859</id><snippet>views.py</snippet></ROW><ROW><id>13503859</id><snippet>cleaned_data</snippet></ROW><ROW><id>13503859</id><snippet>clean</snippet></ROW><ROW><id>13503859</id><snippet>clean</snippet></ROW><ROW><id>13503859</id><snippet>clean_&lt;fieldname&gt;</snippet></ROW><ROW><id>13503859</id><snippet>clean_password_repeat</snippet></ROW><ROW><id>13503859</id><snippet>clean</snippet></ROW><ROW><id>13503859</id><snippet>class RegisterForm(forms.Form):
    # field definitions (above)

    def clean(self):
        password = self.cleaned_data['password']
        password_repeat = self.cleaned_data['password_repeat']
        if password != password_repeat:
            raise forms.ValidationError(u"Passwords do not match.")
        return cleaned_data
</snippet></ROW><ROW><id>13503876</id><snippet>root</snippet></ROW><ROW><id>13503876</id><snippet>dirs</snippet></ROW><ROW><id>13503876</id><snippet>root</snippet></ROW><ROW><id>13503876</id><snippet>files</snippet></ROW><ROW><id>13503876</id><snippet>root</snippet></ROW><ROW><id>13503876</id><snippet>import os
import csv

# Open the csv and write headers.
with open("Subject_Task_Count.csv",'wb') as out:
    outwriter = csv.writer(out)
    outwriter.writerow(['Directory','FilesInDir','FilesIncludingSubdirs'])

    # Track total number of files in each subdirectory by absolute path
    totals = {}

    # topdown=False iterates lowest level (leaf) subdirectories first.
    # This way I can collect grand totals of files per subdirectory.
    for path,dirs,files in os.walk('.',topdown=False):
        files_in_current_directory = len(files)

        # Start with the files in the current directory and compute a
        # total for all subdirectories, which will be in the `totals`
        # dictionary already due to topdown=False.
        files_including_subdirs = files_in_current_directory
        for d in dirs:
            fullpath = os.path.abspath(os.path.join(path,d))

            # On my Windows system, Junctions weren't included in os.walk,
            # but would show up in the subdirectory list.  this try skips
            # them because they won't be in the totals dictionary.
            try:
                files_including_subdirs += totals[fullpath]
            except KeyError as e:
                print 'KeyError: {} may be symlink/junction'.format(e)

        totals[os.path.abspath(path)] = files_including_subdirs
        outwriter.writerow([path,files_in_current_directory,files_including_subdirs])
</snippet></ROW><ROW><id>13504133</id><snippet>another_fun</snippet></ROW><ROW><id>13504133</id><snippet>self</snippet></ROW><ROW><id>13504133</id><snippet>some_fun</snippet></ROW><ROW><id>13504133</id><snippet>another_fun</snippet></ROW><ROW><id>13504133</id><snippet>def MultiplyBy(x):
    def M(y):
        return x * y
    return M

Double = MultiplyBy(2)
Triple = MultiplyBy(3)

print Double(10), Triple(10)
</snippet></ROW><ROW><id>13504133</id><snippet>20 30</snippet></ROW><ROW><id>13504243</id><snippet>athlete_list</snippet></ROW><ROW><id>13504243</id><snippet>Athlete</snippet></ROW><ROW><id>13504243</id><snippet>.name</snippet></ROW><ROW><id>13504243</id><snippet>.age</snippet></ROW><ROW><id>13504243</id><snippet>.sport</snippet></ROW><ROW><id>13504243</id><snippet>[ {'name': 'bob'}, {'name': 'jim'}, {'name': 'joe'} ]
</snippet></ROW><ROW><id>13504404</id><snippet>NgramModel</snippet></ROW><ROW><id>13504404</id><snippet>NgramModel</snippet></ROW><ROW><id>13504404</id><snippet>def __init__(self, n, train, pad_left=True, pad_right=False,
                 estimator=None, *estimator_args, **estimator_kwargs): 
</snippet></ROW><ROW><id>13504404</id><snippet>estimator</snippet></ROW><ROW><id>13504404</id><snippet>estimator</snippet></ROW><ROW><id>13504404</id><snippet>pad_left</snippet></ROW><ROW><id>13504632</id><snippet>test</snippet></ROW><ROW><id>13504632</id><snippet>is</snippet></ROW><ROW><id>13504632</id><snippet>==</snippet></ROW><ROW><id>13504632</id><snippet>import sys

print id(sys.argv[1])
print id('test')
</snippet></ROW><ROW><id>13504632</id><snippet>140335994263232
140335994263424
</snippet></ROW><ROW><id>13504632</id><snippet>is</snippet></ROW><ROW><id>13504632</id><snippet>==</snippet></ROW><ROW><id>13504632</id><snippet>True</snippet></ROW><ROW><id>13504632</id><snippet>argv</snippet></ROW><ROW><id>13504632</id><snippet>False</snippet></ROW><ROW><id>13504632</id><snippet>argv</snippet></ROW><ROW><id>13504632</id><snippet>is</snippet></ROW><ROW><id>13504632</id><snippet>is</snippet></ROW><ROW><id>13504632</id><snippet>In [1]: 256 is 255 + 1
Out[1]: True

In [2]: 257 is 256 + 1
Out[2]: False

In [3]: -5 is -4 - 1
Out[3]: True

In [4]: -6 is -5 - 1
Out[4]: False
</snippet></ROW><ROW><id>13504757</id><snippet>interp1d()</snippet></ROW><ROW><id>13504757</id><snippet>spline</snippet></ROW><ROW><id>13504757</id><snippet>bspleval()</snippet></ROW><ROW><id>13504757</id><snippet>fitpack</snippet></ROW><ROW><id>13504757</id><snippet>from scipy.interpolate import interp1d
import numpy as np

nx, ny, nz = 30, 40, 50
x = np.arange(0, nz, 1.0)
y = np.random.randn(nx, ny, nz)
new_x = np.random.random_integers(1, (nz-1)*10, size=(nx, ny))/10.0

def original_interpolation(x, y, new_x):
    result = np.empty(y.shape[:-1])
    for i in xrange(nx):
        for j in xrange(ny):
            f = interp1d(x, y[i, j], axis=-1, kind=3)
            result[i, j] = f(new_x[i, j])
    return result

def fast_interpolation(x, y, new_x):
    from scipy.interpolate._fitpack import _bspleval
    f = interp1d(x, y, axis=-1, kind=3)
    xj,cvals,k = f._spline
    result = np.empty_like(new_x)
    for (i, j), value in np.ndenumerate(new_x):
        result[i, j] = _bspleval(value, x, cvals[:, i, j], k, 0)
    return result

r1 = original_interpolation(x, y, new_x)
r2 = fast_interpolation(x, y, new_x)

&gt;&gt;&gt; np.allclose(r1, r2)
True

%timeit original_interpolation(x, y, new_x)
%timeit fast_interpolation(x, y, new_x)
1 loops, best of 3: 3.78 s per loop
100 loops, best of 3: 15.4 ms per loop
</snippet></ROW><ROW><id>13504868</id><snippet>super(EnemyBullet, self).__init__()</snippet></ROW><ROW><id>13504868</id><snippet>ShipBullet</snippet></ROW><ROW><id>13504868</id><snippet>super</snippet></ROW><ROW><id>13504870</id><snippet>freq_unigrams.keys()</snippet></ROW><ROW><id>13504870</id><snippet>unigram_list = freq_unigrams.keys()[:1000]
</snippet></ROW><ROW><id>13504870</id><snippet>freq_unigrams.keys()</snippet></ROW><ROW><id>13504897</id><snippet>ref_data.stories = stories_dict
</snippet></ROW><ROW><id>13504897</id><snippet>del ref_data.stories # remove the attribute
del ref_data # delete the instance and all of its attributes
</snippet></ROW><ROW><id>13504897</id><snippet>del</snippet></ROW><ROW><id>13504902</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>13504938</id><snippet>ET.SubElement(parent_node,type)</snippet></ROW><ROW><id>13504938</id><snippet>parent_node</snippet></ROW><ROW><id>13504938</id><snippet>import lxml.etree as ET

def main():
  root = ET.Element('baseURL')
  myList = [1,2,3]
  children = []
  for x in myList:
    children.append( ET.SubElement(root, "link_"+str(x)) )

  for y in myList:
     ET.SubElement( children[0], "child_"+str(y) )
</snippet></ROW><ROW><id>13504938</id><snippet> node = root[0]
 for y in myList:
   ET.SubElement( node, "child_"+str(y) )
</snippet></ROW><ROW><id>13504938</id><snippet> node = root.xpath("/baseURL/link_0")[0]
 for y in myList:
   ET.SubElement( node, "child_"+str(y) )
</snippet></ROW><ROW><id>13505137</id><snippet>dir</snippet></ROW><ROW><id>13505137</id><snippet>print dir("this is a string")

['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__
format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__get
slice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mo
d__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',
 '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook
__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center',
 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index
', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper',
'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', '
rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', '
strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
</snippet></ROW><ROW><id>13505137</id><snippet>__eq__</snippet></ROW><ROW><id>13505144</id><snippet>def</snippet></ROW><ROW><id>13505144</id><snippet>def get_word():
</snippet></ROW><ROW><id>13505225</id><snippet>PARTY_INDICES</snippet></ROW><ROW><id>13505225</id><snippet>PARTY_INDICIES</snippet></ROW><ROW><id>13505225</id><snippet>def voting_plurality(votes):
    sums = dict(zip(INDEX_TO_NAME.values(), [0] * len(INDEX_TO_NAME)))
    for vote in votes:
        if vote in sums:
            sums[vote] += 1
        else:
            print "Bad vote: %s" % vote
    votes_by_index = sorted([(NAME_TO_INDEX[k], v) for k, v in sums.items()])
    votes_by_rank = sorted(votes_by_index, key=lambda x: x[1], reverse=True)
    votes_by_parts = [item[1] for item in votes_by_index]
    highest_votes = INDEX_TO_NAME[votes_by_rank[0][0]]
    return (highest_votes, votes_by_parts)
</snippet></ROW><ROW><id>13505292</id><snippet>features['contains(%s)' % word] = (word in document_words)
</snippet></ROW><ROW><id>13505292</id><snippet>features[word] = (word in document)
</snippet></ROW><ROW><id>13505292</id><snippet>"i love this city"</snippet></ROW><ROW><id>13505292</id><snippet>import nltk.tokenize as tokenize
import nltk
import random
random.seed(3)

def bag_of_words(words):
    return dict([word, True] for word in words)

def document_features(document): 
    features = {}
    for word in word_features:
        features[word] = (word in document)
        # features['contains(%s)' % word] = (word in document_words)
    return features

movie_reviews = nltk.corpus.movie_reviews

documents = [(set(movie_reviews.words(fileid)), category)
             for category in movie_reviews.categories()
             for fileid in movie_reviews.fileids(category)]
random.shuffle(documents)

all_words = nltk.FreqDist(w.lower() for w in movie_reviews.words())
word_features = all_words.keys()[:2000] 

train_set = [(document_features(d), c) for (d, c) in documents[:200]]

classifier = nltk.NaiveBayesClassifier.train(train_set)

classifier.show_most_informative_features()
for word in ('love', 'hate'):
    # No hope in passing the tests if word is not in word_features
    assert word in word_features
    print('probability {w!r} is positive: {p:.2%}'.format(
        w = word, p = classifier.prob_classify({word : True}).prob('pos')))

tests = ["i love this city",
         "i hate this city"]

for test in tests:
    words = tokenize.word_tokenize(test)
    feats = bag_of_words(words)
    print('{s} =&gt; {c}'.format(s = test, c = classifier.classify(feats)))
</snippet></ROW><ROW><id>13505292</id><snippet>Most Informative Features
                   worst = True              neg : pos    =     15.5 : 1.0
              ridiculous = True              neg : pos    =     11.5 : 1.0
                  batman = True              neg : pos    =      7.6 : 1.0
                   drive = True              neg : pos    =      7.6 : 1.0
                   blame = True              neg : pos    =      7.6 : 1.0
                terrible = True              neg : pos    =      6.9 : 1.0
                  rarely = True              pos : neg    =      6.4 : 1.0
                 cliches = True              neg : pos    =      6.0 : 1.0
                       $ = True              pos : neg    =      5.9 : 1.0
               perfectly = True              pos : neg    =      5.5 : 1.0
probability 'love' is positive: 61.52%
probability 'hate' is positive: 36.71%
i love this city =&gt; pos
i hate this city =&gt; neg
</snippet></ROW><ROW><id>13505411</id><snippet>import requests

proxies = {
  "http": "10.10.1.10:3128",
  "https": "10.10.1.10:1080",
}

requests.get("http://example.org", proxies=proxies)
</snippet></ROW><ROW><id>13505432</id><snippet>iterator</snippet></ROW><ROW><id>13505579</id><snippet>from subprocess import Popen, PIPE, check_output
from tempfile import TemporaryFile

cmd1 = ['echo', 'Hi']
cmd2 = ['tr', '[:lower:]', '[:upper:]']
cmd3 = ['tr', '[:upper:]', '[:lower:]']

with TemporaryFile() as f:
    p = Popen(cmd1, stdout=f)
    ret_code = p.wait()
    f.flush()
    f.seek(0)
    out2 = Popen(cmd2, stdin=f, stdout=PIPE).stdout.read()
    f.seek(0)
    out3 = Popen(cmd3, stdin=f, stdout=PIPE).stdout.read()
    print out2, out3
</snippet></ROW><ROW><id>13505579</id><snippet>HI
hi
</snippet></ROW><ROW><id>13505677</id><snippet>sudo apt-get install python-imaging
</snippet></ROW><ROW><id>13505677</id><snippet>sudo apt-get install libjpeg-dev libjpeg62 libjpeg62-dev zlib1g-dev libfreetype6 libfreetype6-dev
pip install PIL
</snippet></ROW><ROW><id>13505677</id><snippet>apt-get install python-imaging</snippet></ROW><ROW><id>13505677</id><snippet>--------------------------------------------------------------------
PIL 1.1.7 TEST SUMMARY 
--------------------------------------------------------------------
Python modules loaded from /usr/lib/python2.7/dist-packages/PIL
Binary modules loaded from /usr/lib/python2.7/dist-packages/PIL
--------------------------------------------------------------------
--- PIL CORE support ok
*** TKINTER support not installed
--- JPEG support ok
--- ZLIB (PNG/ZIP) support ok
--- FREETYPE2 support ok
--- LITTLECMS support ok
--------------------------------------------------------------------
</snippet></ROW><ROW><id>13505677</id><snippet>apt-get purge python-imaging</snippet></ROW><ROW><id>13505712</id><snippet>That's only true when x&lt;y and x&gt;0</snippet></ROW><ROW><id>13505712</id><snippet>&lt;</snippet></ROW><ROW><id>13505712</id><snippet>&gt;</snippet></ROW><ROW><id>13505712</id><snippet>That's all folks!</snippet></ROW><ROW><id>13505754</id><snippet>*args</snippet></ROW><ROW><id>13505754</id><snippet>**kwargs</snippet></ROW><ROW><id>13505760</id><snippet>getattr</snippet></ROW><ROW><id>13505760</id><snippet>actions = {
           STATES.IDLE   : None          ,
           STATES.FIRED  : 'start_moving',
           STATES.MOVING : 'move'        ,
           STATES.RESET  : 'reset'       ,
          }

[...]

def update(self):
    method_name = self.__class__.actions[self.state]
    if method_name and callable(getattr(self, method_name)):
        getattr(self, method_name)(self)
</snippet></ROW><ROW><id>13505760</id><snippet>class Bullet(gameobject.GameObject):

    FRAME  = pygame.Rect(23, 5, 5, 5)
    STATES = config.Enum('IDLE', 'FIRED', 'MOVING', 'RESET')

    action_names = {
                     STATES.IDLE   : None          ,
                     STATES.FIRED  : 'start_moving',
                     STATES.MOVING : 'move'        ,
                     STATES.RESET  : 'reset'       ,
                    }

    def __init__(self):
        gameobject.GameObject.__init__(self)
        self.image = config.SPRITES.subsurface(self.__class__.FRAME)
        self.rect  = self.__class__.START_POS.copy()
        self.state = self.__class__.STATES.IDLE

        # Update actions table using getattr, so we get the correct
        # method for subclasses.
        self.actions = {}
        for state, method_name in self.action_names.items():
            if method_name and callable(getattr(self, method_name)):
                self.actions[state] = getattr(self, method_name)
            else:
                self.actions[state] = lambda self: None


    def update(self):
        self.actions[self.state]()
</snippet></ROW><ROW><id>13505760</id><snippet>__init__</snippet></ROW><ROW><id>13505760</id><snippet>getattr</snippet></ROW><ROW><id>13505760</id><snippet>Bullet.__init__</snippet></ROW><ROW><id>13505966</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; s = "E:/John/2012/practice/question11"
&gt;&gt;&gt; os.path.split(s)
('E:/John/2012/practice', 'question11')
</snippet></ROW><ROW><id>13505966</id><snippet>os.path.split()</snippet></ROW><ROW><id>13505966</id><snippet>str.split()</snippet></ROW><ROW><id>13505966</id><snippet>&gt;&gt;&gt; def rec_split(s):
...     rest, tail = os.path.split(s)
...     if rest == '':
...         return tail,
...     return rec_split(rest) + (tail,)
...
&gt;&gt;&gt; rec_split(s)
('E:', 'John', '2012', 'practice', 'question11')
</snippet></ROW><ROW><id>13506004</id><snippet>...execute("""SELECT id FROM table WHERE name = '%s'""", name)
</snippet></ROW><ROW><id>13506090</id><snippet>if (old_list[0] not in new_list):
</snippet></ROW><ROW><id>13506090</id><snippet>if (old_list[0] not in old_list[1:]):
</snippet></ROW><ROW><id>13506148</id><snippet>append</snippet></ROW><ROW><id>13506148</id><snippet>append</snippet></ROW><ROW><id>13506148</id><snippet>r = np.append(r, float(line[index]))</snippet></ROW><ROW><id>13506650</id><snippet>subprocess.call</snippet></ROW><ROW><id>13506650</id><snippet>os.execv</snippet></ROW><ROW><id>13506650</id><snippet>subprocess.call(['/usr/bin/notify-send', 'App Title', 'Message'])</snippet></ROW><ROW><id>13506724</id><snippet>import subprocess
subprocess.call(["tar","-cf", "O.tar", "./O"])
</snippet></ROW><ROW><id>13506988</id><snippet>bayesList = [('E', 0.1667), ('M', 0.1667), ...]
</snippet></ROW><ROW><id>13506988</id><snippet>newBayes = [(person, prob * normalizeFactor) for person, prob in bayesList]
</snippet></ROW><ROW><id>13507034</id><snippet>RuntimeError</snippet></ROW><ROW><id>13507034</id><snippet>import functools

def memoize(func):
    cache = {}
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        key = args, tuple(sorted(kwargs.items()))
        if key in cache:
            return cache[key]
        else:
            result = func(*args, **kwargs)
            if not callable(result):
                cache[key] = result
            return result
    return wrapper

@memoize
def _addup(n):
    if n &lt; 2:
        return n
    else:
        try:
            result = _addup(n - 1)
        except RuntimeError:
            return lambda: _addup(n)
        else:
            return result if callable(result) else result + n

def addup(n):
    result = _addup(n)
    while callable(result):
        while callable(result):
            result = result()
        result = _addup(n)
    return result

assert addup(5000) == sum(xrange(5001))
</snippet></ROW><ROW><id>13507034</id><snippet># memoize function as above, or you can probably use functools.lru_cache

class UnwindStack(Exception):
    pass

@memoize
def _addup(n):
    if n &lt; 2:
        return n
    else:
        try:
            return _addup(n - 1) + n
        except RuntimeError:
            raise UnwindStack(lambda: _addup(n))

def _try(func, *args, **kwargs):
    try:
        return func(*args, **kwargs)
    except UnwindStack as e:
        return e[0]

def addup(n):
    result = _try(_addup, n)
    while callable(result):
        while callable(result):
            result = _try(result)
        result = _try(_addup, n)
    return result
</snippet></ROW><ROW><id>13507274</id><snippet>u'\r\n 212\r\n jobs containing php in xxxx \r\n '
</snippet></ROW><ROW><id>13507274</id><snippet>u'\r212\rjobs containing php in xxxx '
</snippet></ROW><ROW><id>13507274</id><snippet>212</snippet></ROW><ROW><id>13507274</id><snippet>jobs...</snippet></ROW><ROW><id>13507274</id><snippet>212</snippet></ROW><ROW><id>13507274</id><snippet>\r\n</snippet></ROW><ROW><id>13507274</id><snippet>\n</snippet></ROW><ROW><id>13507274</id><snippet>cleaned_mydata = re.sub(r'\s+', ' ', mydata[0].strip())
</snippet></ROW><ROW><id>13507733</id><snippet>socket</snippet></ROW><ROW><id>13507733</id><snippet>from ipaddr import ipaddr
raw = '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
ip = ipaddr.IPv6Address(ipaddr.Bytes(raw))

print "IP is: " + str(ip)

original = bytes(ip.packed)

print "Original raw bytes: " + repr(original)
</snippet></ROW><ROW><id>13507805</id><snippet>cd</snippet></ROW><ROW><id>13507805</id><snippet>example.py</snippet></ROW><ROW><id>13507805</id><snippet>exampledir</snippet></ROW><ROW><id>13507805</id><snippet>python -m cProfile -o example.profile example.py</snippet></ROW><ROW><id>13507805</id><snippet>cd</snippet></ROW><ROW><id>13507805</id><snippet>python runsnake.py exampledir/example.profile</snippet></ROW><ROW><id>13507805</id><snippet>psutil</snippet></ROW><ROW><id>13507805</id><snippet>psutil.Process</snippet></ROW><ROW><id>13507805</id><snippet>myProcess = psutil.Process(os.getpid())</snippet></ROW><ROW><id>13507805</id><snippet>myProcess.get_memory_info()</snippet></ROW><ROW><id>13507805</id><snippet>myProcess.get_ext_memory_info()</snippet></ROW><ROW><id>13507805</id><snippet>myProcess.get_memory_percent()</snippet></ROW><ROW><id>13507805</id><snippet>easy_install</snippet></ROW><ROW><id>13507805</id><snippet>pip</snippet></ROW><ROW><id>13507805</id><snippet>example.py</snippet></ROW><ROW><id>13507805</id><snippet>from meliae import scanner # [[source](http://www.vrplumber.com/programming/runsnakerun/)]
scanner.dump_all_objects( filename ) # you can pass a file-handle if you prefer
</snippet></ROW><ROW><id>13507805</id><snippet>runsnakemem fpath</snippet></ROW><ROW><id>13507805</id><snippet>fpath</snippet></ROW><ROW><id>13507910</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; def bin_slice(L, min, max):
...     i = bisect.bisect_left(L, min)
...     j = bisect.bisect(L, max)
...     return L[i:j]
... 
&gt;&gt;&gt; bin_slice([1,2,3,4,5,6,7,8,9], 3, 6)
[3, 4, 5, 6]
&gt;&gt;&gt; bin_slice([500,757,2412,10000,123123], 600, 5000)
[757, 2412]
</snippet></ROW><ROW><id>13507910</id><snippet>bisect</snippet></ROW><ROW><id>13507910</id><snippet>bisect</snippet></ROW><ROW><id>13507910</id><snippet>j</snippet></ROW><ROW><id>13507910</id><snippet>lo</snippet></ROW><ROW><id>13507910</id><snippet>bisect</snippet></ROW><ROW><id>13507910</id><snippet>j = bisect.bisect(L, max, i)
</snippet></ROW><ROW><id>13508927</id><snippet>QuerySet</snippet></ROW><ROW><id>13508927</id><snippet>class Kid(models.Model):
    mom = models.ForeignKey('Mom')
    name = models.CharField…

class Mom(models.Model):
    name = models.CharField…
</snippet></ROW><ROW><id>13508927</id><snippet>Mom.objects.filter(kid__name='Jhonny')
</snippet></ROW><ROW><id>13508927</id><snippet>Kid.objects.filter(mom__name='Lucy')
</snippet></ROW><ROW><id>13508999</id><snippet># img is a 2D ndarray
# K is the size of sums to calculate using sliding window
row_sums = numpy.zeros_like(img)
for i in range( img.shape[0] ):
    if i &gt; K:
        row_sums[i,:] = row_sums[i-1,:] - img[i-K-1,:] + img[i,:]
    elif i &gt; 1:
        row_sums[i,:] = row_sums[i-1,:] + img[i,:]
    else: # i == 0
        row_sums[i,:] = img[i,:]

col_sums = numpy.zeros_like(img)
for j in range( img.shape[1] ):
    if j &gt; K:
        col_sums[:,j] = col_sums[:,j-1] - row_sums[:,j-K-1] + row_sums[:,j]
    elif j &gt; 1:
        col_sums[:,j] = col_sums[:,j-1] + row_sums[:,j]
    else: # j == 0
        col_sums[:,j] = row_sums[:,j]

# here col_sums[i,j] should be equal to numpy.sum(img[i-K:i, j-K:j]) if i &gt;=K and j &gt;= K
# first K rows and columns in col_sums contain partial sums and can be ignored
</snippet></ROW><ROW><id>13509070</id><snippet>import webapp2

class UpdateHandler(webapp2.RequestHandler):
    def get(self, version):
        # Do something for version

app = webapp2.WSGIApplication(
    [(r'/update/(\d+)', UpdateHandler)], 
    debug=True)
</snippet></ROW><ROW><id>13509111</id><snippet>angles = {'east':0, 'northeast':np.pi/4, 'north':np.pi/2, 'northwest':3*np.pi/4,
          'west':np.pi, 'southwest':5*np.pi/4, 'south':3*np.pi/2, 'southeast':7*np.pi/4}
wind_angle = np.array([angles[i] for i in wind])
</snippet></ROW><ROW><id>13509111</id><snippet>import numpy as np
from matplotlib import cm
from matplotlib import pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

wind_dirs = ['east', 'northeast', 'north', 'northwest',
             'west', 'southwest', 'south', 'southeast']
# data
speed = np.random.uniform(0,1.25,100)
temp = np.random.uniform(-10,20,100)
wind = [wind_dirs[i] for i in np.random.randint(8, size=100)]

#transform data to cartesian
angles = {'east':0, 'northeast':np.pi/4, 'north':np.pi/2, 'northwest':3*np.pi/4,
          'west':np.pi, 'southwest':5*np.pi/4, 'south':3*np.pi/2, 'southeast':7*np.pi/4}
wind_angle = np.array([angles[i] for i in wind])
X,Y = speed*np.cos(wind_angle),speed*np.sin(wind_angle)

ax.scatter3D(X, Y, temp, c = temp, cmap=cm.bwr)
ax.set_zlabel('Temp')
plt.show()
</snippet></ROW><ROW><id>13509174</id><snippet>app = wx.App()
window = DataLoggerWindow()
import threading
class WindowThread(threading.Thread):
    def run(self):
        window.Show()
        app.MainLoop()
WindowThread().start()
</snippet></ROW><ROW><id>13509174</id><snippet>MainLoop</snippet></ROW><ROW><id>13509229</id><snippet>dict</snippet></ROW><ROW><id>13509229</id><snippet>it = iter(tuple_)
dictionary = dict(zip(it, it))
</snippet></ROW><ROW><id>13509229</id><snippet>zip(it, it)</snippet></ROW><ROW><id>13509229</id><snippet>dict</snippet></ROW><ROW><id>13509229</id><snippet>zip</snippet></ROW><ROW><id>13509229</id><snippet>itertools.izip</snippet></ROW><ROW><id>13509229</id><snippet>t[i]</snippet></ROW><ROW><id>13509229</id><snippet>[i + 1]</snippet></ROW><ROW><id>13509382</id><snippet>request.param</snippet></ROW><ROW><id>13509382</id><snippet>user</snippet></ROW><ROW><id>13509382</id><snippet>set_driver</snippet></ROW><ROW><id>13509382</id><snippet>import pytest

@pytest.fixture(params=[True, False])
def user(request):
    return request.param

class TestHello:
    @pytest.fixture(autouse=True)
    def set_driver(self, user):
        print "set_driver sees", user

    def test_method(self):
        assert 0
</snippet></ROW><ROW><id>13509382</id><snippet>set_driver</snippet></ROW><ROW><id>13509382</id><snippet>user</snippet></ROW><ROW><id>13509382</id><snippet>import pytest

@pytest.fixture(params=[True, False], scope="module")
def user(request):
    return request.param

@pytest.fixture(autouse=True)
def set_driver(request):
    if "user" in request.fixturenames:
        user = request.getfuncargvalue("user")
        print "set_driver sees", user


def test_function(user):
    assert 0

def test_function_nouser():
    assert 0
</snippet></ROW><ROW><id>13509498</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>13509498</id><snippet>&gt; CREATE VIRTUAL TABLE test USING fts3(content TEXT);
&gt; INSERT INTO test VALUES('&lt;p&gt;Isn''t this &lt;font face="Comic Sans"&gt;funny&lt;/font&gt;?');
&gt; INSERT INTO test VALUES('blah');
&gt; SELECT snippet(test) FROM test WHERE content MATCH 'funny';
p&gt;Isn't this &lt;font face="Comic Sans"&gt;&lt;b&gt;funny&lt;/b&gt;&lt;/font&gt;?
&gt; SELECT snippet(test) FROM test WHERE content MATCH 'font';
p&gt;Isn't this &lt;&lt;b&gt;font&lt;/b&gt; face="Comic Sans"&gt;funny&lt;/&lt;b&gt;font&lt;/b&gt;&gt;?
</snippet></ROW><ROW><id>13509498</id><snippet>snippet</snippet></ROW><ROW><id>13509498</id><snippet>&lt;b&gt;...</snippet></ROW><ROW><id>13509498</id><snippet>offsets</snippet></ROW><ROW><id>13509523</id><snippet>None</snippet></ROW><ROW><id>13509523</id><snippet>(lambda x: x and x - 1)((str.find(substr) + 1) or None)
</snippet></ROW><ROW><id>13509523</id><snippet>&gt;&gt;&gt; (lambda x: x and x - 1)(('abcd'.find('b') + 1) or None)
1
&gt;&gt;&gt; (lambda x: x and x - 1)(('abcd'.find('_') + 1) or None)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13509636</id><snippet>pattern = re.compile(r"^@\w+\{"+key+r",.*?^\}", re.S | re.M)
content_modified = re.sub(pattern, "", content)
</snippet></ROW><ROW><id>13509636</id><snippet>S</snippet></ROW><ROW><id>13509636</id><snippet>.</snippet></ROW><ROW><id>13509636</id><snippet>M</snippet></ROW><ROW><id>13509636</id><snippet>^</snippet></ROW><ROW><id>13509636</id><snippet>{}</snippet></ROW><ROW><id>13509702</id><snippet>win32com</snippet></ROW><ROW><id>13509702</id><snippet>Application</snippet></ROW><ROW><id>13509702</id><snippet>Public Sub NewWordApp()

    'Create variables to reference objects
    '(This line is not needed in Python; you don't need to declare variables 
    'or their types before using them)
    Dim wordApp As Word.Application, wordDoc As Word.Document

    'Create a new instance of a Word Application object
    '(Another difference - in VBA you use Set for objects and simple assignment for 
    'primitive values. In Python, you use simple assignment for objects as well.)
    Set wordApp = New Word.Application

    'Show the application
    wordApp.Visible = True

    'Create a new document in the application
    Set wordDoc = wordApp.Documents.Add()

    'Set the text of the first paragraph
    '(A Paragraph object doesn't have a Text property. Instead, it has a Range property
    'which refers to a Range object, which does have a Text property.)
    wordDoc.Paragraphs(1).Range.Text = "Hello, World!"

End Sub
</snippet></ROW><ROW><id>13509702</id><snippet>import win32com.client

#Create an instance of Word.Application
wordApp = win32com.client.Dispatch('Word.Application')

#Show the application
wordApp.Visible = True

#Create a new document in the application
wordDoc = wordApp.Documents.Add()

#Set the text of the first paragraph
wordDoc.Paragraphs(1).Range.Text = "Hello, World!"
</snippet></ROW><ROW><id>13510496</id><snippet>if False in [a, b, c, d]
</snippet></ROW><ROW><id>13510496</id><snippet>for i in [a, b, c, d]:
    if i == False:
        return True
return False
</snippet></ROW><ROW><id>13510496</id><snippet>False</snippet></ROW><ROW><id>13510496</id><snippet>False</snippet></ROW><ROW><id>13510496</id><snippet>if</snippet></ROW><ROW><id>13510496</id><snippet>None</snippet></ROW><ROW><id>13510496</id><snippet>if not all([a, b, c, d])
</snippet></ROW><ROW><id>13510496</id><snippet>for i in [a, b, c, d]:
    if not i:
        return True
return False
</snippet></ROW><ROW><id>13510788</id><snippet>...</snippet></ROW><ROW><id>13510788</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>13510788</id><snippet>class</snippet></ROW><ROW><id>13510788</id><snippet>...</snippet></ROW><ROW><id>13510788</id><snippet>    &gt;&gt;&gt; class A(MyClass):
    ...     def __init__(self):
    ...         super(A, self).__init__()
    ...
</snippet></ROW><ROW><id>13511226</id><snippet>in</snippet></ROW><ROW><id>13511226</id><snippet>for i in database:
    if "number" in i:
        x.append(i["number"])
</snippet></ROW><ROW><id>13511584</id><snippet>inv = csv.DictReader(open('file.csv')):
for i in inv:
  print ('%-20s %-90s OnHand: %-10s OnOrder: %-10s') % (i['MODEL_NUMBER'],i['PRODUCT_NAME'],i['TOTAL_ONHAND'],i['TOTAL_ON_ORDER'])
</snippet></ROW><ROW><id>13511584</id><snippet>l = ['MODEL_NUMBER','PRODUCT_NAME','TOTAL_ONHAND','TOTAL_ON_ORDER']</snippet></ROW><ROW><id>13511584</id><snippet>print ('%-20s %-90s OnHand: %-10s OnOrder: %-10s') % (i[l[0]],i[l[1]],i[l[2]],i[l[3]])
</snippet></ROW><ROW><id>13511643</id><snippet>PIL</snippet></ROW><ROW><id>13511643</id><snippet>import PIL.EpsImagePlugin
PIL.EpsImagePlugin.Ghostscript = mioGhostscript
</snippet></ROW><ROW><id>13511643</id><snippet>"- &gt;/dev/null 2&gt;/dev/null"
</snippet></ROW><ROW><id>13511643</id><snippet>- &gt;/dev/null 2&gt;/dev/null</snippet></ROW><ROW><id>13511643</id><snippet>"- &gt;/dev/null 2&gt;/dev/null"
</snippet></ROW><ROW><id>13511643</id><snippet>"-" 
</snippet></ROW><ROW><id>13511643</id><snippet>stdin</snippet></ROW><ROW><id>13511643</id><snippet>def mioGhostscript(tile, size, fp):
    """Render an image using Ghostscript (Unix only)"""

    # Unpack decoder tile
    decoder, tile, offset, data = tile[0]
    length, bbox = data

    import tempfile, os

    file = tempfile.mktemp()

    # Build ghostscript command
    command = ["gs",
        "-q",                    # quite mode
        "-g%dx%d" % size,        # set output geometry (pixels)
        "-dNOPAUSE -dSAFER",     # don't pause between pages, safe mode
        "-sDEVICE=ppmraw",       # ppm driver
        "-sOutputFile=%s" % file,# output file
        "-"
    ]

    #command = shlex.split(string.join(command))
    # push data through ghostscript

    try:
        #gs = os.popen(command, "w")

        args = command#['gs','-dSAFER','-dNOPAUSE','-dBATCH','-sDEVICE=jpeg','-sOutputFile=/home/user/output2.jpg /home/user/downloads/test.pdf']
        gs = subprocess.Popen( args, stdout = PIPE, stderr = STDOUT, stdin=PIPE )
        # adjust for image origin
        if bbox[0] != 0 or bbox[1] != 0:
            #gs.write("%d %d translate\n" % (-bbox[0], -bbox[1]))
            gs.stdin.write("%d %d translate\n" % (-bbox[0], -bbox[1]))
        fp.seek(offset)
        while length &gt; 0:
            s = fp.read(8192)
            if not s:
                break
            length = length - len(s)
            gs.stdin.write(s)
        gs.communicate()[0]
        status = gs.stdin.close()
        #status = gs.close()
        #if status:
        #   raise IOError("gs failed (status %d)" % status)
        im = Image.core.open_ppm(file)
    finally:
        try: os.unlink(file)
        except: pass

    return im

import PIL.EpsImagePlugin
PIL.EpsImagePlugin.Ghostscript = mioGhostscript
</snippet></ROW><ROW><id>13512060</id><snippet>import compileall

compileall.compile_dir('D:/FAS/config', force=True)
</snippet></ROW><ROW><id>13512113</id><snippet>.rstrip('\n')</snippet></ROW><ROW><id>13512113</id><snippet>len(line.rstrip('\n'))
</snippet></ROW><ROW><id>13512190</id><snippet>Popen(['/bin/bash', '-c', 'cat &lt;(%s)' % cmd])
</snippet></ROW><ROW><id>13512431</id><snippet>shlex.split()</snippet></ROW><ROW><id>13512431</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('cat /etc/hosts | grep hostname')
['cat', '/etc/hosts', '|', 'grep', 'hostname']
</snippet></ROW><ROW><id>13512431</id><snippet>subprocess</snippet></ROW><ROW><id>13512431</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.check_output('cat /etc/hosts | grep dahn', shell=True)
'127.0.0.1\tdahnlocal.internal.int\n'
</snippet></ROW><ROW><id>13512431</id><snippet>shell</snippet></ROW><ROW><id>13512431</id><snippet>True</snippet></ROW><ROW><id>13512444</id><snippet>checkbutton.ticked = true</snippet></ROW><ROW><id>13512444</id><snippet>class CheckbuttonPlus(Checkbutton):
    def __init__(self, text, command, padx, justify, ticked=False):
        super().__init__(text, command, padx, justify)
        self.ticked = ticked
</snippet></ROW><ROW><id>13512444</id><snippet>not ticked</snippet></ROW><ROW><id>13512521</id><snippet>ofile</snippet></ROW><ROW><id>13512521</id><snippet>word</snippet></ROW><ROW><id>13512521</id><snippet>&gt;&gt;&gt; open('/dev/null', 'wb').write(u'ä')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe4' in position 0:
                    ordinal not in range(128)
</snippet></ROW><ROW><id>13512521</id><snippet>ofile</snippet></ROW><ROW><id>13512521</id><snippet>io.open</snippet></ROW><ROW><id>13512521</id><snippet>'wt'</snippet></ROW><ROW><id>13512521</id><snippet>&gt;&gt;&gt; import io
&gt;&gt;&gt; io.open('/dev/null', 'wt', encoding='utf-8').write(u'ä')
1L
</snippet></ROW><ROW><id>13512521</id><snippet>codecs.open</snippet></ROW><ROW><id>13512521</id><snippet>encode</snippet></ROW><ROW><id>13512831</id><snippet>test.id()</snippet></ROW><ROW><id>13512885</id><snippet>close</snippet></ROW><ROW><id>13512885</id><snippet>GeneratorExit</snippet></ROW><ROW><id>13512885</id><snippet>except</snippet></ROW><ROW><id>13512885</id><snippet>def closable_listgen(data):
    try:
        for each in data:
            if type(each) is int:
                yield str(each)
            elif type(each) is list:
                g = closable_listgen(each)
                try:
                    for i in g:
                        yield i
                except GeneratorExit:
                    g.close()
                    raise
            else:
                continue
    except GeneratorExit:
        print("cleaning up")
        raise
</snippet></ROW><ROW><id>13512885</id><snippet>yield from</snippet></ROW><ROW><id>13512885</id><snippet>close</snippet></ROW><ROW><id>13512885</id><snippet>def closable_listgen33(data):
    try:
        for each in data:
            if type(each) is int:
                yield str(each)
            elif type(each) is list:
                g = closable_listgen33(each)
                yield from g
            else:
                continue
    except GeneratorExit:
        print("cleaning up")
        raise
</snippet></ROW><ROW><id>13512885</id><snippet>class list_gen_class(object):
    def __init__(self, data):
        self.iterator = iter(data)
        self.child = None

    def __iter__(self):
        return self

    def __next__(self):
        while True:
            if self.child:
                try:
                    return next(self.child)
                except StopIteration:
                    self.child = None

            value = next(self.iterator)
            if isinstance(value, int):
                return str(value)
            elif isinstance(value, list):
                self.child = list_gen_class(value)

    def close(self):
        if self.child:
            self.child.close()

        print("cleaning up")
</snippet></ROW><ROW><id>13512960</id><snippet>map()</snippet></ROW><ROW><id>13512960</id><snippet>map()</snippet></ROW><ROW><id>13512960</id><snippet>v = [interp(x, y, i) for i in u]
</snippet></ROW><ROW><id>13512960</id><snippet>map()</snippet></ROW><ROW><id>13512960</id><snippet>functools.partial()</snippet></ROW><ROW><id>13512960</id><snippet>interp()</snippet></ROW><ROW><id>13512960</id><snippet>x</snippet></ROW><ROW><id>13512960</id><snippet>y</snippet></ROW><ROW><id>13512960</id><snippet>import functools
f = functools.partial(interp, x, y)
v = list(map(f, u))
</snippet></ROW><ROW><id>13513307</id><snippet>buzz_graph%5Btitle%5D</snippet></ROW><ROW><id>13513307</id><snippet>buzz_graph[title]</snippet></ROW><ROW><id>13513307</id><snippet>request.GET['buzz_graph[title]']
</snippet></ROW><ROW><id>13513307</id><snippet>request.GET['buzz_graph['title']']</snippet></ROW><ROW><id>13513391</id><snippet>proxy_set_header X-GeoIP-Country $geoip_country_name;
proxy_set_header X-GeoIP-City    $geoip_city;
</snippet></ROW><ROW><id>13513654</id><snippet>splprep()</snippet></ROW><ROW><id>13513654</id><snippet>p</snippet></ROW><ROW><id>13513654</id><snippet>import numpy as np
import scipy.interpolate as interp

def interpolate_polyline(polyline, num_points):
    duplicates = []
    for i in range(1, len(polyline)):
        if np.allclose(polyline[i], polyline[i-1]):
            duplicates.append(i)
    if duplicates:
        polyline = np.delete(polyline, duplicates, axis=0)
    tck, u = interp.splprep(polyline.T, s=0)
    u = np.linspace(0.0, 1.0, num_points)
    return np.column_stack(interp.splev(u, tck))
</snippet></ROW><ROW><id>13513654</id><snippet>&gt;&gt;&gt; B = interpolate_polyline(A, 100)
&gt;&gt;&gt; B.shape
(100, 2)
&gt;&gt;&gt; plot(B[:, 0], B[:, 1])
</snippet></ROW><ROW><id>13514127</id><snippet>class MyFormatter(Formatter):
    def format_field(self, value, format_spec):
        if format_spec == 't':  # Truncate and render as int
            return str(int(value))
        return super(MyFormatter, self).format_field(value, format_spec)

MyFormatter().format("{0} {1:t}", "Hello", 4.567)  # returns "Hello 4"
</snippet></ROW><ROW><id>13514298</id><snippet>NN = N/2.0
for kx, ky, kz in product(freq, freq, freq):
    k = int(np.sqrt(kx**2 + ky**2 + kz**2) + 0.5)
    if k &lt; NN:
        yaxes[field][k] += A[kx][ky][kz]
</snippet></ROW><ROW><id>13514298</id><snippet>     65 LOAD_GLOBAL              3 (int) 
     68 LOAD_FAST                2 (k) 
     71 LOAD_CONST               3 (0.5) 
     74 BINARY_ADD           
     75 CALL_FUNCTION            1 
</snippet></ROW><ROW><id>13514298</id><snippet>     75 LOAD_FAST                2 (k)
</snippet></ROW><ROW><id>13514298</id><snippet>     78 LOAD_GLOBAL              4 (N) 
     81 LOAD_CONST               4 (2.0) 
     84 BINARY_TRUE_DIVIDE   
</snippet></ROW><ROW><id>13514298</id><snippet>     78 LOAD_GLOBAL              4 (NN)
</snippet></ROW><ROW><id>13514416</id><snippet>neato</snippet></ROW><ROW><id>13514416</id><snippet>neato</snippet></ROW><ROW><id>13514416</id><snippet>import networkx as nx
import numpy as np
import string

dt = [('len', float)]
A = np.array([(0, 0.3, 0.4, 0.7),
               (0.3, 0, 0.9, 0.2),
               (0.4, 0.9, 0, 0.1),
               (0.7, 0.2, 0.1, 0)
               ])*10
A = A.view(dt)

G = nx.from_numpy_matrix(A)
G = nx.relabel_nodes(G, dict(zip(range(len(G.nodes())),string.ascii_uppercase)))    

G = nx.to_agraph(G)

G.node_attr.update(color="red", style="filled")
G.edge_attr.update(color="blue", width="2.0")

G.draw('/tmp/out.png', format='png', prog='neato')
</snippet></ROW><ROW><id>13514670</id><snippet>month_list</snippet></ROW><ROW><id>13514670</id><snippet>(Q(ad_date__month=month) for month in month_list)
</snippet></ROW><ROW><id>13514670</id><snippet>Table.objects.filter(*(Q(ad_date__month=month) for month in month_list))
</snippet></ROW><ROW><id>13514670</id><snippet>import operator
q_objects = (Q(ad_date__month=month) for month in month_list)
Table.objects.filter(reduce(operator.or_, q_objects))
</snippet></ROW><ROW><id>13514728</id><snippet>class Console</snippet></ROW><ROW><id>13514728</id><snippet>with</snippet></ROW><ROW><id>13514728</id><snippet>__enter__</snippet></ROW><ROW><id>13514728</id><snippet>__exit__</snippet></ROW><ROW><id>13514728</id><snippet>class CM(object):
    def __init__(self, arg):
         print 'Initializing arg .. with', arg
    def __enter__(self):
         print 'Entering CM'
    def __exit__(self, type, value, traceback):
         print 'Exiting CM'
         if type is IndexError:
             print 'Oh! .. an Index Error! .. must handle this'
             print 'Lets see what the exception args are ...', value.args
             return True
</snippet></ROW><ROW><id>13514728</id><snippet>with CM(10) as x:
    print 'Within CM'
</snippet></ROW><ROW><id>13514728</id><snippet>Initializing arg .. with 10
Entering CM
Within CM
Exiting CM
</snippet></ROW><ROW><id>13514728</id><snippet>__exit__</snippet></ROW><ROW><id>13514728</id><snippet>None</snippet></ROW><ROW><id>13514728</id><snippet>with CM(10) as x:
    print 'Within CM'
    raise IndexError(1, 2, 'dang!')
</snippet></ROW><ROW><id>13514728</id><snippet> Initializing arg .. with 10
 Entering CM
 Within CM
 Exiting CM
 Oh! .. an Index Error! .. must handle this
 Lets see what the exception args are ... (1, 2, 'dang!')
</snippet></ROW><ROW><id>13514743</id><snippet>dict</snippet></ROW><ROW><id>13514743</id><snippet>hash()</snippet></ROW><ROW><id>13514743</id><snippet>hash(4)</snippet></ROW><ROW><id>13514743</id><snippet>4</snippet></ROW><ROW><id>13514743</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>13514743</id><snippet>45</snippet></ROW><ROW><id>13514743</id><snippet>45</snippet></ROW><ROW><id>13514743</id><snippet>45</snippet></ROW><ROW><id>13514743</id><snippet>perturb = slot = hash
while slot_is_full and item_in_slot_is_not_equal_to_key:
    slot = (5*slot) + 1 + perturb
    perturb &gt;&gt;= 5
</snippet></ROW><ROW><id>13514743</id><snippet>__hash__()</snippet></ROW><ROW><id>13514743</id><snippet>__eq__()</snippet></ROW><ROW><id>13514743</id><snippet>dict</snippet></ROW><ROW><id>13514743</id><snippet>==</snippet></ROW><ROW><id>13514743</id><snippet>__cmp__()</snippet></ROW><ROW><id>13514743</id><snippet>__eq__()</snippet></ROW><ROW><id>13514769</id><snippet>"SELECT name FROM sqlite_master WHERE type='table'"</snippet></ROW><ROW><id>13514769</id><snippet>import sqlite3
import contextlib
import os

filename = ...
with contextlib.closing(sqlite3.connect(filename)) as conn:
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    for tablerow in cursor.fetchall():
        table = tablerow[0]
        cursor.execute("SELECT * FROM {t}".format(t = table))
        for row in cursor:
            for field in row.keys():
                print(table, field, row[field])
</snippet></ROW><ROW><id>13514788</id><snippet>print '%0.12f'%n
</snippet></ROW><ROW><id>13514788</id><snippet>&gt;&gt;&gt; x = 1.123456789012345
&gt;&gt;&gt; x
1.123456789012345
&gt;&gt;&gt; print x
1.12345678901
</snippet></ROW><ROW><id>13514788</id><snippet>x.__repr__() 
</snippet></ROW><ROW><id>13514788</id><snippet>print x.__str__()
</snippet></ROW><ROW><id>13515108</id><snippet>textfile.write(".widget1" + line)</snippet></ROW><ROW><id>13515108</id><snippet>textfile.write(line)</snippet></ROW><ROW><id>13515108</id><snippet>textfile.write(line.strip())</snippet></ROW><ROW><id>13515154</id><snippet>cmd = 'ping 192.168.1.1'
output = subprocess.check_output(cmd.split())
</snippet></ROW><ROW><id>13515229</id><snippet>DELETE</snippet></ROW><ROW><id>13515292</id><snippet>mashape</snippet></ROW><ROW><id>13515292</id><snippet>python path</snippet></ROW><ROW><id>13515292</id><snippet>import mashape</snippet></ROW><ROW><id>13515292</id><snippet>setup.py</snippet></ROW><ROW><id>13515292</id><snippet>setup.py</snippet></ROW><ROW><id>13515292</id><snippet>`pip install -e git+git://github.com/YourFork/mashape-python-client-library.git#egg=mashape`
</snippet></ROW><ROW><id>13515292</id><snippet>YourFork</snippet></ROW><ROW><id>13515372</id><snippet>tuple = ('SOMEVALUE', 'SOME OTHER VALUE')
'SELECT * FROM WHEREEVER WHERE COLUMN1 = '?' AND COLUMN2 = '?', (TUPLE)'
</snippet></ROW><ROW><id>13515372</id><snippet>PluCode = str(s.attributes['PluCode'].value)
TicketNumber = str(s.attributes['TicketNumber'].value)
Time = str(s.attributes['Time'].value)
Date = str(s.attributes['Date'].value)
StoreNumber = str(s.attributes['StoreNumber'].value)
PosNo = str(s.attributes['PosNo'].value)
Qty = str(s.attributes['Qty'].value)
SequenceNbr = str(s.attributes['SequenceNbr'].value)
</snippet></ROW><ROW><id>13515372</id><snippet>(u'01100158059642', u'1055', u'2012-09-12', u'13:30:05', u'0700', u'1', u'1', u'28010')
</snippet></ROW><ROW><id>13515372</id><snippet>('01100158059642', '1055', '2012-09-12', '13:30:05', '0700', '1', '1', '28010') 
</snippet></ROW><ROW><id>13515372</id><snippet>db2 "select * from trickledb.trickledb" 
PLUCOD         TICKETNO  DATE       TIME     STORENO  POSNO  QTY  SEQNO
-------------- --------- ---------- -------- -------- ------ ---- -----
01100158059642 1055      2012-09-12 13:30:05 0700     1      1    28010
</snippet></ROW><ROW><id>13515537</id><snippet>__str__</snippet></ROW><ROW><id>13515537</id><snippet>str</snippet></ROW><ROW><id>13515537</id><snippet>self</snippet></ROW><ROW><id>13515537</id><snippet>for c in self:
</snippet></ROW><ROW><id>13515537</id><snippet>for c in iter(self):
</snippet></ROW><ROW><id>13515537</id><snippet>__str__()</snippet></ROW><ROW><id>13515537</id><snippet>for c in self.__str__():
</snippet></ROW><ROW><id>13515537</id><snippet>str()</snippet></ROW><ROW><id>13515537</id><snippet>for c in str(self):
</snippet></ROW><ROW><id>13515591</id><snippet>csv</snippet></ROW><ROW><id>13515591</id><snippet>import csv
import collections

a = 'path/to/a'
b = 'path/to/b'
output = 'output/path'

pos = collections.defaultdict(list)

with open(b) as csvin:
    reader = csv.DictReader(csvin, delimiter='\t')
    for line in reader:
        pos[line['POS']].append(line['Sample_ID'])

with open(a) as csvin, open(output, 'wb') as csvout:
    reader = csv.DictReader(csvin, delimiter='\t')
    writer = csv.DictWriter(csvout, fieldnames=reader.fieldnames, delimiter='\t')
    writer.writeheader()
    for line in reader:
        fields = pos.get(line['POS'], [])
        for field in fields:
            line[field] = 'NA'
        writer.writerow(line)
</snippet></ROW><ROW><id>13515688</id><snippet>ln.split()[-1]</snippet></ROW><ROW><id>13515688</id><snippet>set_log = set(ln.split()[-1] for ln in log_file)
</snippet></ROW><ROW><id>13515688</id><snippet>strip()</snippet></ROW><ROW><id>13515688</id><snippet>split()</snippet></ROW><ROW><id>13515779</id><snippet>START_ELEMENT</snippet></ROW><ROW><id>13515779</id><snippet>END_ELEMENT</snippet></ROW><ROW><id>13515779</id><snippet>START_ELEMENT
CHARACTERS
END_ELEMENT
</snippet></ROW><ROW><id>13515779</id><snippet>from xml.dom.pulldom import CHARACTERS, START_ELEMENT, parse

doc = parse("bible.xml")
text_expected = False
for event, node in doc:
    print event, node
    if text_expected:
        text_expected = False
        if event != CHARACTERS:
            # strange .. there should be some
            continue
        print node.data
    else:
        text_expected = (event == START_ELEMENT) and (node.localName == "b")
</snippet></ROW><ROW><id>13515779</id><snippet>bible.xml</snippet></ROW><ROW><id>13515779</id><snippet>&lt;a&gt;
    &lt;b&gt;c1&lt;/b&gt;
    &lt;b&gt;c2&lt;/b&gt;
&lt;/a&gt;
</snippet></ROW><ROW><id>13515779</id><snippet>c1
c2
</snippet></ROW><ROW><id>13515779</id><snippet>strip()</snippet></ROW><ROW><id>13515779</id><snippet>CHARACTERS</snippet></ROW><ROW><id>13515779</id><snippet>CHARACTERS</snippet></ROW><ROW><id>13515881</id><snippet>import sys
import inspect
import collections
_stdout = sys.stdout

Record = collections.namedtuple(
    'Record',
    'frame filename line_number function_name lines index')

class MyStream(object):
    def __init__(self, target):
        self.target = target
    def write(self, text):
        if text.strip():
            record = Record(*inspect.getouterframes(inspect.currentframe())[1])        
            self.target.write(
                '{f} {n}: '.format(f = record.filename, n = record.line_number))
        self.target.write(text)

sys.stdout = MyStream(sys.stdout)

def foo():
    print('Hi')

foo()
</snippet></ROW><ROW><id>13515881</id><snippet>/home/unutbu/pybin/test.py 20: Hi
</snippet></ROW><ROW><id>13515881</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>13515881</id><snippet>from __future__ import print_function
import sys
import inspect
import collections

Record = collections.namedtuple(
    'Record',
    'frame filename line_number function_name lines index')

def myprint(text):
    if text.strip():
        record = Record(*inspect.getouterframes(inspect.currentframe())[1])        
        sys.stdout.write('{f} {n}: '.format(f = record.filename, n = record.line_number))
    sys.stdout.write(text + '\n')

def foo():
    print('Hi')

print = myprint
foo()
</snippet></ROW><ROW><id>13515881</id><snippet>inspect.currentframe</snippet></ROW><ROW><id>13515881</id><snippet>sys._getframe</snippet></ROW><ROW><id>13515902</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>13515902</id><snippet>"lxml"</snippet></ROW><ROW><id>13515902</id><snippet>lxml</snippet></ROW><ROW><id>13515902</id><snippet>input</snippet></ROW><ROW><id>13515902</id><snippet>input</snippet></ROW><ROW><id>13515902</id><snippet>"xml"</snippet></ROW><ROW><id>13515920</id><snippet>def http_proxy_connect(address, proxy = None, auth = None, headers = {}):
  """
  Establish a socket connection through an HTTP proxy.

  Arguments:
    address (required)     = The address of the target
    proxy (def: None)      = The address of the proxy server
    auth (def: None)       = A tuple of the username and password used for authentication
    headers (def: {})      = A set of headers that will be sent to the proxy

  Returns:
    A 3-tuple of the format:
      (socket, status_code, headers)
    Where `socket' is the socket object, `status_code` is the HTTP status code that the server
     returned and `headers` is a dict of headers that the server returned.
  """
  import socket
  import base64

  def valid_address(addr):
    """ Verify that an IP/port tuple is valid """
    return isinstance(addr, (list, tuple)) and len(addr) == 2 and isinstance(addr[0], str) and isinstance(addr[1], (int, long))

  if not valid_address(address):
    raise ValueError('Invalid target address')

  if proxy == None:
    s = socket.socket()
    s.connect(address)
    return s, 0, {}

  if not valid_address(proxy):
    raise ValueError('Invalid proxy address')

  headers = {
    'host': address[0]
  }

  if auth != None:
    if isinstance(auth, str):
      headers['proxy-authorization'] = auth
    elif auth and isinstance(auth, (tuple, list)):
      if len(auth) == 1:
        raise ValueError('Invalid authentication specification')

      t = auth[0]
      args = auth[1:]

      if t.lower() == 'basic' and len(args) == 2:
        headers['proxy-authorization'] = 'Basic ' + base64.b64encode('%s:%s' % args)
      else:
        raise ValueError('Invalid authentication specification')
    else:
      raise ValueError('Invalid authentication specification')

  s = socket.socket()
  s.connect(proxy)
  fp = s.makefile('r+')

  fp.write('CONNECT %s:%d HTTP/1.0\r\n' % address)
  fp.write('\r\n'.join('%s: %s' % (k, v) for (k, v) in headers.items()) + '\r\n\r\n')
  fp.flush()

  statusline = fp.readline().rstrip('\r\n')

  if statusline.count(' ') &lt; 2:
    fp.close()
    s.close()
    raise IOError('Bad response')
  version, status, statusmsg = statusline.split(' ', 2)
  if not version in ('HTTP/1.0', 'HTTP/1.1'):
    fp.close()
    s.close()
    raise IOError('Unsupported HTTP version')
  try:
    status = int(status)
  except ValueError:
    fp.close()
    s.close()
    raise IOError('Bad response')

  response_headers = {}

  while True:
    tl = ''
    l = fp.readline().rstrip('\r\n')
    if l == '':
      break
    if not ':' in l:
      continue
    k, v = l.split(':', 1)
    response_headers[k.strip().lower()] = v.strip()

  fp.close()
  return (s, status, response_headers)
</snippet></ROW><ROW><id>13516004</id><snippet>In [1]: import networkx as nx

In [2]: G=nx.Graph()

In [3]: G.add_node(1,color='red',size=75)

In [4]: G.add_node(2,color='blue',size=33)

In [5]: import json

In [6]: json.dumps(G.nodes(data=True))  # all nodes
Out[6]: '[[1, {"color": "red", "size": 75}], [2, {"color": "blue", "size": 33}]]'

In [7]: json.dumps((1,G.node[1])) # (node, data) tuple
Out[7]: '[1, {"color": "red", "size": 75}]'
</snippet></ROW><ROW><id>13516362</id><snippet>.flush()</snippet></ROW><ROW><id>13516362</id><snippet>.write()</snippet></ROW><ROW><id>13516362</id><snippet>.read()</snippet></ROW><ROW><id>13516362</id><snippet>"Hello"</snippet></ROW><ROW><id>13516362</id><snippet>.read()</snippet></ROW><ROW><id>13516362</id><snippet>.flush()</snippet></ROW><ROW><id>13516362</id><snippet>.read()</snippet></ROW><ROW><id>13516454</id><snippet>dir()</snippet></ROW><ROW><id>13516454</id><snippet>.</snippet></ROW><ROW><id>13516454</id><snippet>dir(type(testClass))</snippet></ROW><ROW><id>13516497</id><snippet>NotImplemented</snippet></ROW><ROW><id>13516497</id><snippet>__ne__</snippet></ROW><ROW><id>13516497</id><snippet>True</snippet></ROW><ROW><id>13516497</id><snippet>False</snippet></ROW><ROW><id>13516497</id><snippet>a != b</snippet></ROW><ROW><id>13516497</id><snippet>NotImplemented</snippet></ROW><ROW><id>13516497</id><snippet>b != a</snippet></ROW><ROW><id>13516497</id><snippet>!=</snippet></ROW><ROW><id>13516497</id><snippet>do_richcompare</snippet></ROW><ROW><id>13516497</id><snippet>TypeError()</snippet></ROW><ROW><id>13516595</id><snippet>tostring</snippet></ROW><ROW><id>13516595</id><snippet>bytes</snippet></ROW><ROW><id>13516595</id><snippet>for table in tables:
    tableString = html.tostring(table)
    filename = r'c:\Users\ahn_133\Desktop\appleTables\Apple-' +str(count)+ '.htm'
    with open(filename, 'wb') as fileref:
        #                 ^
        fileref.write(tableString)
    count+=1
</snippet></ROW><ROW><id>13516733</id><snippet>msvcrt.getch()</snippet></ROW><ROW><id>13516733</id><snippet>from msvcrt import getch
letter1 = getch()
letter2 = getch()        
print("Pressed", letter1, "and", letter2)
</snippet></ROW><ROW><id>13516733</id><snippet>import sys, tty, termios
def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch

letter1 = getch()
letter2 = getch()        
print("Pressed", letter1, "and", letter2)
</snippet></ROW><ROW><id>13516794</id><snippet>MultiClassifierI</snippet></ROW><ROW><id>13516794</id><snippet>DictVectorizer</snippet></ROW><ROW><id>13516794</id><snippet>from sklearn.feature_extraction import DictVectorizer

X_train_raw = [{'a': 1}, {'b': 1}, {'c': 1}]
y_train = [('first',), ('second',), ('first', 'second')]

v = DictVectorizer()
X_train = v.fit_transform(X_train_raw)

clf = OneVsRestClassifier(MultinomialNB())
clf.fit(X_train, y_train)
</snippet></ROW><ROW><id>13516794</id><snippet>X_test = v.transform(X_test_raw)</snippet></ROW><ROW><id>13516794</id><snippet>sklearn.pipeline.Pipeline</snippet></ROW><ROW><id>13516794</id><snippet>DictVectorizer</snippet></ROW><ROW><id>13516904</id><snippet>synclimit</snippet></ROW><ROW><id>13516904</id><snippet>processed = 0
for filename in os.listdir(filepath):
    if not filename.endswith('.txt') or filename in synched:
        continue
    # process
    processed += 1
    if processed &gt;= synclimit:
        break  # done for today.
</snippet></ROW><ROW><id>13516904</id><snippet>os.listdir()</snippet></ROW><ROW><id>13516904</id><snippet>synced = set(elt.text for elt in root.findall('synced/sfile'))
to_process = [f for f in os.listdir(filepath) if f.endswith('.txt') and f not in synched]

for filename in to_process[:synclimit]:
    # process
</snippet></ROW><ROW><id>13516904</id><snippet>.endswith('.txt')</snippet></ROW><ROW><id>13517099</id><snippet>csv</snippet></ROW><ROW><id>13517099</id><snippet>int(row[1])</snippet></ROW><ROW><id>13517099</id><snippet>with open("file.csv")) as fin:
    headerline = fin.next()
    total = 0
    for row in csv.reader(fin):
        total += int(row[1])
    print total
</snippet></ROW><ROW><id>13517099</id><snippet>sum()</snippet></ROW><ROW><id>13517099</id><snippet>with open("file.csv")) as fin:
    fin.next()
    total = sum(int(r[1]) for r in csv.reader(fin))
</snippet></ROW><ROW><id>13517099</id><snippet>for col in row[1]:</snippet></ROW><ROW><id>13517099</id><snippet>row[1]</snippet></ROW><ROW><id>13517099</id><snippet>1</snippet></ROW><ROW><id>13517099</id><snippet>2</snippet></ROW><ROW><id>13517099</id><snippet>&gt;&gt;&gt; for c in '123':
...     print repr(c)
...
'1'
'2'
'3'
</snippet></ROW><ROW><id>13517105</id><snippet>manage.py</snippet></ROW><ROW><id>13517105</id><snippet>#!/usr/bin/env python
import os
import sys 

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "your_project.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)
</snippet></ROW><ROW><id>13517105</id><snippet>os.environ.setdefault</snippet></ROW><ROW><id>13517142</id><snippet>query = (
    session.query(Post)
           .join(Post.tags)     # It's necessary to join the "children" of Post
           .filter(Post.date_out.between(start_date, end_date))
           # here comes the magic: 
           # you can filter with Tag, even though it was not directly joined)
           .filter(Tag.accepted == 1)
)
</snippet></ROW><ROW><id>13517386</id><snippet>autocommit</snippet></ROW><ROW><id>13517386</id><snippet>.save()</snippet></ROW><ROW><id>13517386</id><snippet>post_save</snippet></ROW><ROW><id>13517386</id><snippet>post_save</snippet></ROW><ROW><id>13517386</id><snippet>save_base</snippet></ROW><ROW><id>13517386</id><snippet>django/db/models/base.py</snippet></ROW><ROW><id>13517386</id><snippet>post_save</snippet></ROW><ROW><id>13517386</id><snippet>.save()</snippet></ROW><ROW><id>13517386</id><snippet>django.middleware.transaction.TransactionMiddleware</snippet></ROW><ROW><id>13517386</id><snippet>autocommit</snippet></ROW><ROW><id>13517386</id><snippet>post_save</snippet></ROW><ROW><id>13517481</id><snippet>r'\b[#@]{name}\b'.format(name=re.escape('Obama'))
</snippet></ROW><ROW><id>13517481</id><snippet>[%@]</snippet></ROW><ROW><id>13517481</id><snippet>(?:#|@)</snippet></ROW><ROW><id>13517481</id><snippet>\b</snippet></ROW><ROW><id>13517481</id><snippet>#</snippet></ROW><ROW><id>13517481</id><snippet>@</snippet></ROW><ROW><id>13517481</id><snippet>obama</snippet></ROW><ROW><id>13517481</id><snippet>*</snippet></ROW><ROW><id>13517481</id><snippet>#</snippet></ROW><ROW><id>13517481</id><snippet>@</snippet></ROW><ROW><id>13517481</id><snippet>obama</snippet></ROW><ROW><id>13517633</id><snippet>user</snippet></ROW><ROW><id>13517633</id><snippet>def user(repo, language, page):
</snippet></ROW><ROW><id>13517633</id><snippet> user['followers']
</snippet></ROW><ROW><id>13517633</id><snippet>dictionary</snippet></ROW><ROW><id>13517633</id><snippet>dictionary = {'language_search': language, 'page': page, 'followers': repo['followers'], 'github_repo': repo['name'],'forked?': repo['fork'], 'forks': repo['forks'], 'github_owner': repo['owner'], 'language': repo['language'], 'created_at': repo['created_at'], 'forks': repo['forks'], 'followers': user['followers']}
</snippet></ROW><ROW><id>13517633</id><snippet>dictionary = {
    'language_search': language, 
    'page': page,
    'followers': repo['followers'],
    'github_repo': repo['name'],
    'forked?': repo['fork'],
    'forks': repo['forks'],
    'github_owner': repo['owner'],
    'language': repo['language'],
    'created_at': repo['created_at'],
    'forks': repo['forks'],
    'followers': user['followers']  # `user` is a function, what did you mean instead?
}
</snippet></ROW><ROW><id>13517633</id><snippet>user</snippet></ROW><ROW><id>13517633</id><snippet>  if user.get('email'):    # Will also throw the error
    dictionary_2 = {'email': user['email']}  # as will this
    for key in fields_user:
      if user.has_key(key):                  # and this
        dictionary[key] = user[key]          # and here
</snippet></ROW><ROW><id>13517633</id><snippet>user</snippet></ROW><ROW><id>13517947</id><snippet>import networkx as nx
import numpy as np
import matplotlib.pyplot as plt

G = nx.Graph()
G.add_edges_from(
    [('A', 'B'), ('A', 'C'), ('D', 'B'), ('E', 'C'), ('E', 'F'),
     ('B', 'H'), ('B', 'G'), ('B', 'F'), ('C', 'G')])

val_map = {'A': 1.0,
           'D': 0.5714285714285714,
           'H': 0.0}

values = [val_map.get(node, 0.25) for node in G.nodes()]

nx.draw(G, cmap = plt.get_cmap('jet'), node_color = values)
plt.show()
</snippet></ROW><ROW><id>13517947</id><snippet>values</snippet></ROW><ROW><id>13517947</id><snippet>G.nodes()</snippet></ROW><ROW><id>13517947</id><snippet>values</snippet></ROW><ROW><id>13517947</id><snippet>G.nodes()</snippet></ROW><ROW><id>13518128</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; filter(lambda x: not (x.startswith('__') and x.endswith('__')), [a for (a, b) in inspect.getmembers(MyClass, lambda x : (not inspect.ismethod(x) and not inspect.isbuiltin(x)) )])
['attr1', 'attr2', 'attr3']
</snippet></ROW><ROW><id>13518128</id><snippet>inspect.getmembers</snippet></ROW><ROW><id>13518128</id><snippet>inspect.getmembers</snippet></ROW><ROW><id>13518128</id><snippet>__dict__</snippet></ROW><ROW><id>13518128</id><snippet>__dict__</snippet></ROW><ROW><id>13518146</id><snippet> In [55]: dfu = df.unstack("STK_ID")

 In [56]: fig, axes = subplots(2,1)

 In [57]: dfu.plot(ax=axes[0], kind="bar")
 Out[57]: &lt;matplotlib.axes.AxesSubplot at 0xb53070c&gt;

 In [58]: dfu.plot(ax=axes[1])
 Out[58]: &lt;matplotlib.axes.AxesSubplot at 0xb60e8cc&gt;
</snippet></ROW><ROW><id>13518290</id><snippet>In [74]: df = pd.DataFrame.from_records(dat).set_index(0)

In [75]: counts = df.groupby(lambda x: floor(x / 0.5) * 0.5).count()

In [76]: counts
Out[76]: 
       1
0.0   12
0.5    3
2.5    3
5.5    4
8.5    2
18.5   1
19.0   1
21.0   1
22.0   1
</snippet></ROW><ROW><id>13518290</id><snippet>In [77]: counts.reindex(np.arange(0, 22, 0.5)).fillna(0)
Out[73]: 
       1
0.0   12
0.5    3
1.0    0
1.5    0
2.0    0
2.5    3
3.0    0
3.5    0
4.0    0

etc ...
</snippet></ROW><ROW><id>13518370</id><snippet>Room</snippet></ROW><ROW><id>13518370</id><snippet>Building</snippet></ROW><ROW><id>13518370</id><snippet>Apartment</snippet></ROW><ROW><id>13518370</id><snippet>Building</snippet></ROW><ROW><id>13518370</id><snippet>Farmstead</snippet></ROW><ROW><id>13518370</id><snippet>Farmstead</snippet></ROW><ROW><id>13518370</id><snippet>Building</snippet></ROW><ROW><id>13518370</id><snippet>Room</snippet></ROW><ROW><id>13518423</id><snippet>a = [1,2,3]
b = [4,a,5]
c = [6,b,7]

def add_to(input, output):
    for x in input:
        if isinstance(x, list):
            add_to(x, output)
        else:
            output.append(x)

result = []

add_to(c, result) # now result = [6, 4, 1, 2, 3, 5, 7]
</snippet></ROW><ROW><id>13518423</id><snippet>def flatten(input):
    for x in input:
        if isinstance(x, list):
            for y in flatten(x):
                yield y
        else:
            yield x

result = list(flatten(c))
</snippet></ROW><ROW><id>13518459</id><snippet>getattr</snippet></ROW><ROW><id>13518459</id><snippet>def __getattr__(self, name):
    try:
        return getattr(self.arr, name)
    except:
        self.arr = np.array(self.arr)
        return getattr(self.arr, name)
</snippet></ROW><ROW><id>13518459</id><snippet>__getitem__</snippet></ROW><ROW><id>13518459</id><snippet>[]</snippet></ROW><ROW><id>13518459</id><snippet>def __getitem__(self, args):
    try:
        return self.arr[args]
    except:
        self.arr = np.array(self.arr)
        return self.arr[args]
</snippet></ROW><ROW><id>13518633</id><snippet>class ExampleClass:
    name = "Example Object"

a = ExampleClass() # Init new instance of ExampleClass
print(a.name) # a doesn't own an attribute called "name"
print(ExampleClass.name) # --&gt; "Example Object"
</snippet></ROW><ROW><id>13518633</id><snippet>ExampleClass</snippet></ROW><ROW><id>13518633</id><snippet>name</snippet></ROW><ROW><id>13518633</id><snippet>Example Object</snippet></ROW><ROW><id>13518633</id><snippet>a = ExampleClass()</snippet></ROW><ROW><id>13518633</id><snippet>__init__</snippet></ROW><ROW><id>13518633</id><snippet>class ExampleClass:
    def __init__(self):
        self.name = "Example Class"

a = ExampleClass() # Init new instance of ExampleClass
print(a.name) # --&gt; "Example Class"
print(ExampleClass.name) # --&gt; ERROR: Exampleclass.name doesn't exist
</snippet></ROW><ROW><id>13518633</id><snippet>ExampleClass</snippet></ROW><ROW><id>13518633</id><snippet>__init__</snippet></ROW><ROW><id>13518633</id><snippet>self</snippet></ROW><ROW><id>13518633</id><snippet>self.name = "Example Class"</snippet></ROW><ROW><id>13518633</id><snippet>name</snippet></ROW><ROW><id>13518633</id><snippet>class ExampleClass:
    def __init__(self):
        self.name = "Example Class"

    @property
    def name(self):
        if not self._name:
            pass #blabla code here
        return self._name

    @name.setter
    def name(self, value):
        #blabla more code
        self._name = value
</snippet></ROW><ROW><id>13518633</id><snippet>__init__</snippet></ROW><ROW><id>13518633</id><snippet>name</snippet></ROW><ROW><id>13518633</id><snippet>def __init__(self, name="Example Object"):
    self.name = name
</snippet></ROW><ROW><id>13518642</id><snippet>def print_all(d):
    if isintance(d, dict):
        for k,v in sorted(d.items()):
            print k
            print_all(v)
    else:
        print d
</snippet></ROW><ROW><id>13518779</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x=np.array([[1, 1],
...    [2, 1],
...    [2, 2],
...    [1, 2],
...    [0, 1]])
&gt;&gt;&gt; np.all(x==[0,1], axis=1)
array([False, False, False, False,  True], dtype=bool)
&gt;&gt;&gt; np.where(np.all(x==[0,1], axis=1))
(array([4]),)
&gt;&gt;&gt; np.where(np.any(x!=[0,1], axis=1))
(array([0, 1, 2, 3]),)
</snippet></ROW><ROW><id>13518805</id><snippet>Subwindow</snippet></ROW><ROW><id>13518805</id><snippet>list_windows</snippet></ROW><ROW><id>13518805</id><snippet>def list_subwindows():
    import gc
    gc.collect()
    print 'Subwindows: ',
    for subwindow in subwindows:
        sw = subwindow()
        if sw:
            print sw,
    print ''
</snippet></ROW><ROW><id>13518867</id><snippet>header   = ['LowerLevel','Term','J','UpperLevel','Term','J']
prefixes = ['lower', 'upper']

def prefixed(header):
    prefix = ''

    for h in header:
        for p in prefixes:
            if h.lower().startswith(p):
                prefix, h = h[:len(p)], h[len(p):]
        yield prefix + h

print list(prefixed(header))
</snippet></ROW><ROW><id>13518867</id><snippet>$ ./lower.py
['LowerLevel', 'LowerTerm', 'LowerJ', 'UpperLevel', 'UpperTerm', 'UpperJ']
</snippet></ROW><ROW><id>13518902</id><snippet>re.match</snippet></ROW><ROW><id>13518902</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s=r"""99-my-name-is-John-Smith-6376827-%^-1-2-767980716"""
&gt;&gt;&gt; re.match('.*?([0-9]+)$', s).group(1)
'767980716'
</snippet></ROW><ROW><id>13518902</id><snippet>re.finditer</snippet></ROW><ROW><id>13518902</id><snippet>&gt;&gt;&gt; next(re.finditer(r'\d+$', s)).group(0)
'767980716'
</snippet></ROW><ROW><id>13518902</id><snippet>.*?</snippet></ROW><ROW><id>13518902</id><snippet>[0-9]</snippet></ROW><ROW><id>13518902</id><snippet>\d</snippet></ROW><ROW><id>13518902</id><snippet>()</snippet></ROW><ROW><id>13518902</id><snippet>group(1)</snippet></ROW><ROW><id>13518902</id><snippet>+</snippet></ROW><ROW><id>13518902</id><snippet>$</snippet></ROW><ROW><id>13519132</id><snippet>.threads_init()</snippet></ROW><ROW><id>13519132</id><snippet>.threads_enter()</snippet></ROW><ROW><id>13519132</id><snippet>.threads_leave()</snippet></ROW><ROW><id>13519132</id><snippet>multiprocessing</snippet></ROW><ROW><id>13519132</id><snippet>threading</snippet></ROW><ROW><id>13519132</id><snippet>multiprocessing.Queue()</snippet></ROW><ROW><id>13519132</id><snippet>def do_something(self):
    while True:
        #get a list of a lot of things
        #Do stuff with each item in the list
        #show me on the gui whats going on
        self.data_queue.put("Yo! Here I'm")
</snippet></ROW><ROW><id>13519132</id><snippet>def __init__(self, ...):
    # ...
    self.data_queue = Queue()
    gobject.timeout_add(100, self.update_text) 
</snippet></ROW><ROW><id>13519132</id><snippet>def update_text(self):
    # receive updates from the child process here
    try:
        data = self.data_queue.get_nowait()
    except Empty:
        pass # nothing at this time
    else:
        self.register_data(data)
    return True
</snippet></ROW><ROW><id>13519132</id><snippet>gobject.io_add_watch()</snippet></ROW><ROW><id>13519138</id><snippet>bool</snippet></ROW><ROW><id>13519138</id><snippet>if (results.short 
    and not results.verbose 
    and not results.verbose2 
    and not results.list 
    and not results.true):
</snippet></ROW><ROW><id>13519181</id><snippet>pyuic</snippet></ROW><ROW><id>13519181</id><snippet>-x, --execute</snippet></ROW><ROW><id>13519181</id><snippet>pyuic</snippet></ROW><ROW><id>13519181</id><snippet>ui</snippet></ROW><ROW><id>13519181</id><snippet>ui</snippet></ROW><ROW><id>13519181</id><snippet>v1.ui</snippet></ROW><ROW><id>13519181</id><snippet>v2.ui</snippet></ROW><ROW><id>13519181</id><snippet>pyuic4 -o v1.py v1.ui
pyuic4 -o v2.py v2.ui
</snippet></ROW><ROW><id>13519181</id><snippet>main.py</snippet></ROW><ROW><id>13519181</id><snippet>main.py</snippet></ROW><ROW><id>13519181</id><snippet>from PyQt4 import QtGui
from v1 import Ui_Form1
from v2 import Ui_Form2

class Form1(QtGui.QWidget, Ui_Form1):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.setupUi(self)
        self.button1.clicked.connect(self.handleButton)
        self.window2 = None

    def handleButton(self):
        if self.window2 is None:
            self.window2 = Form2(self)
        self.window2.show()

class Form2(QtGui.QWidget, Ui_Form2):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.setupUi(self)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Form1()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13519181</id><snippet>objectName</snippet></ROW><ROW><id>13519181</id><snippet>pyuic</snippet></ROW><ROW><id>13519570</id><snippet>Entry</snippet></ROW><ROW><id>13519570</id><snippet>import Tkinter as Tk
root = Tk.Tk()

ent = Tk.Entry(root, state='readonly')
var = Tk.StringVar()
var.set('Some text')
ent.config(textvariable=var, relief='flat')
ent.pack()
root.mainloop()
</snippet></ROW><ROW><id>13519570</id><snippet>Text</snippet></ROW><ROW><id>13519570</id><snippet>from Tkinter import *

root = Tk()
T = Text(root, height=2, width=30, bg='lightgrey', relief='flat')
T.insert(END, "Just a text Widget\nin two lines\n")
T.config(state=DISABLED) # forbid text edition
T.pack()
mainloop()
</snippet></ROW><ROW><id>13519858</id><snippet>min(dictionary.values())
</snippet></ROW><ROW><id>13519858</id><snippet>sorted(dictionary.values())[0]
</snippet></ROW><ROW><id>13519858</id><snippet>Runtime Error</snippet></ROW><ROW><id>13519858</id><snippet>pop</snippet></ROW><ROW><id>13519858</id><snippet>Key Error</snippet></ROW><ROW><id>13519883</id><snippet>file = open("data.txt","r")

def data(file):
    dic = {}
    for line in file:
        # If line not blank
        if line.strip() != '':
            key,value = line.split(":")
            if key == 'RootObject':
                dic[key] = value.strip()
            elif key == 'Object':
                # Get the Object value i.e Earth, Moon, Sun                
                obj = value.strip()
                # Create entry with obj key and blank dictionary value
                dic[obj]={}
            else:
                # Populate the blank dictionary with key, value pairs
                dic[obj][key] = value.strip()
    return dic

planets = data(file)

# Usage
print planets
print planets['Earth']
print planets['Earth']['Radius']
</snippet></ROW><ROW><id>13519883</id><snippet># The whole dictionary 
{'Sun': {'Satellites': 'Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune,Ceres,Pluto,Haumea,Makemake,Eris', 'Orbital Radius': '0', 'Radius': '20890260'}, 'Moon': {'Orbital Radius': '18128500', 'Radius': '1737000.10', 'Period': '27.321582'}, 'Earth': {'Satellites': 'Moon', 'Orbital Radius': '77098290', 'Radius': '6371000.0', 'Period': '365.256363004'}}

# The Earth dictionary
{'Satellites': 'Moon', 'Orbital Radius': '77098290', 'Radius': '6371000.0', 'Period': '365.256363004'}

# The Earth's radius
6371000.0
</snippet></ROW><ROW><id>13519892</id><snippet>def get_functions(count):
    ccfarrays=map(lambda: [], range(count))
    def get_nth_func(n):
        def ccf1(binnum):
            for i in datarange:
                ccf=((a[i]-xbar)*(c[(i-binnum)]-ybar))/(norm*stdevx*stdevy)
                parray.append(ccf)
                calc=sum(parray)
            ccfarray[n].append(calc)
            del parray[:]
            return ccfarray[n]
        return ccf1
    return map(get_nth_func, range(count)
</snippet></ROW><ROW><id>13519892</id><snippet>f = get_functions(20)
</snippet></ROW><ROW><id>13519892</id><snippet>f[6](binnum)
</snippet></ROW><ROW><id>13519931</id><snippet>import sys
from PyQt4 import QtCore

def directory_changed(path):
    print('Directory Changed: %s' % path)

def file_changed(path):
    print('File Changed: %s' % path)

app = QtCore.QCoreApplication(sys.argv)

paths = [
    '/path/to',
    '/path/to/files_1',
    '/path/to/files_2',
    '/path/to/files_3',
    ]

fs_watcher = QtCore.QFileSystemWatcher(paths)
fs_watcher.directoryChanged.connect(directory_changed)
fs_watcher.fileChanged.connect(file_changed)

sys.exit(app.exec_())
</snippet></ROW><ROW><id>13519998</id><snippet>expr = re.compile ( r"expr1|expr2|expr3" )</snippet></ROW><ROW><id>13519998</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

expr = re.compile(
    r'(?P&lt;day1&gt;\d{1,2})/(?P&lt;month1&gt;\d{1,2}) -(?P&lt;year&gt;\d{2})|(?P&lt;day2&gt;\d{1,2})/(?P&lt;month2&gt;\d{1,2})|(?P&lt;year3&gt;\d{4})-(?P&lt;month3&gt;\d{2})-(?P&lt;day3&gt;\d{2})')


def get_dates(datestring):
    """Try to extract all dates from certain strings.

    Arguments:
    - `datestring`: A string containing dates.
    """

    found_dates = []
    matches = expr.finditer(datestring)
    for match in matches:
        if match.group('day1'):
            found_dates.append({'day': match.group('day1'),
                                 'month': match.group('month1') })
        elif match.group('day2'):
            found_dates.append({'day': match.group('day2'),
                                'month': match.group('month2')})
        elif match.group('day3'):
            found_dates.append({'day': match.group('day3'),
                                'month': match.group('month3'),
                                'year': match.group('year3')})
        else:
            raise Exception("wtf?")
    return found_dates

if __name__ == '__main__':
    dates = get_dates('1/2 -13, 5/3 &amp; 2012-11-22')
    for date in dates:
        print date
</snippet></ROW><ROW><id>13520411</id><snippet>def test_negative_factor(self):
   assert result 

def test_discontinuity(self):
   assert raise exception if x == undefined_value
</snippet></ROW><ROW><id>13520486</id><snippet>import requests
import requests.auth

class HTTPProxyDigestAuth(requests.auth.HTTPDigestAuth):
    def handle_407(self, r):
        """Takes the given response and tries digest-auth, if needed."""

        num_407_calls = r.request.hooks['response'].count(self.handle_407)

        s_auth = r.headers.get('Proxy-authenticate', '')

        if 'digest' in s_auth.lower() and num_407_calls &lt; 2:

            self.chal = requests.auth.parse_dict_header(s_auth.replace('Digest ', ''))

            # Consume content and release the original connection
            # to allow our new request to reuse the same one.
            r.content
            r.raw.release_conn()

            r.request.headers['Authorization'] = self.build_digest_header(r.request.method, r.request.url)
            r.request.send(anyway=True)
            _r = r.request.response
            _r.history.append(r)

            return _r

        return r

    def __call__(self, r):
        if self.last_nonce:
            r.headers['Proxy-Authorization'] = self.build_digest_header(r.method, r.url)
        r.register_hook('response', self.handle_407)
        return r
</snippet></ROW><ROW><id>13520486</id><snippet>proxies = {
    "http" :"192.168.20.130:8080",
    "https":"192.168.20.130:8080",
}
auth = HTTPProxyDigestAuth("username", "password")

# HTTP
r = requests.get("http://www.google.co.jp/", proxies=proxies, auth=auth)
r.status_code # 200 OK

# HTTPS
r = requests.get("https://www.google.co.jp/", proxies=proxies, auth=auth)
r.status_code # 200 OK
</snippet></ROW><ROW><id>13520518</id><snippet>class DotDict(dict):
    """
    a dictionary that supports dot notation 
    as well as dictionary access notation 
    usage: d = DotDict() or d = DotDict({'val1':'first'})
    set attributes: d.val2 = 'second' or d['val2'] = 'second'
    get attributes: d.val2 or d['val2']
    """
    __getattr__ = dict.__getitem__
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__

    def __init__(self, dct):
        for key, value in dct.items():
            if hasattr(value, 'keys'):
                value = DotDict(value)
            self[key] = value


dct = {'scalar_value':1, 'nested_dict':{'value':2, 'nested_nested': {'x': 21}}}
dct = DotDict(dct)

print dct.nested_dict.nested_nested.x
</snippet></ROW><ROW><id>13520860</id><snippet>import sys
import time
import itertools

for c in itertools.cycle('/-\|'):
    sys.stdout.write('\r' + c)
    sys.stdout.flush()
    time.sleep(0.2)
</snippet></ROW><ROW><id>13521028</id><snippet> web: bin/python -m CGIHTTPServer $PORT
</snippet></ROW><ROW><id>13521174</id><snippet>def replace_element(li, ch, num, repl):
    last_found = 0
    for _ in range(num):
        last_found = li.index(ch, last_found+1)
    li[li.index(ch, last_found)] = repl
</snippet></ROW><ROW><id>13521174</id><snippet>replace_element(appl, 'a', 2, ' ')
</snippet></ROW><ROW><id>13521174</id><snippet>ValueError: 'a' is not in list
</snippet></ROW><ROW><id>13521234</id><snippet>{% url 'bar-url' 1 2 %}
</snippet></ROW><ROW><id>13521234</id><snippet>urlpatterns = patterns('',
    url(r'^/foo/(?P&lt;parameter&gt;\d+)/, include('bar.urls')),
)
</snippet></ROW><ROW><id>13521234</id><snippet>urlpatterns = patterns('',
    (r'^/bar/$, 'bar.views.index'),
    url(r'^/bar/(?P&lt;parameter2&gt;\d+)/$, 'bar.views.detail', name='bar-url'),
)
</snippet></ROW><ROW><id>13521234</id><snippet>foo-url</snippet></ROW><ROW><id>13521234</id><snippet>urlpatterns = patterns('',
    url(r'^/foo/(?P&lt;parameter&gt;\d+)/$, 'another.views.foo', name='foo'),
    url(r'^/foo/(?P&lt;parameter&gt;\d+)/, include('bar.urls')),
)
</snippet></ROW><ROW><id>13521234</id><snippet>$</snippet></ROW><ROW><id>13521333</id><snippet>socket.SOCK_STREAM</snippet></ROW><ROW><id>13521333</id><snippet>s[0:10]</snippet></ROW><ROW><id>13521333</id><snippet>s[10:20]</snippet></ROW><ROW><id>13521333</id><snippet>socket.send</snippet></ROW><ROW><id>13521333</id><snippet>socket.SOCK_STREAM</snippet></ROW><ROW><id>13521333</id><snippet>from scapy.all import *

import socket
host = '192.168.0.x' #replace with your IP
my_port = 3002
message = "some string I want to send in chunks"

def chunks(lst, n):
    "Yield successive n-sized chunks from lst"
    for i in xrange(0, len(lst), n):
        yield lst[i:i+n]

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, my_port))
ss=StreamSocket(client_socket,Raw)
for chunk in chunks(message, 10):
    print "sending: " + chunk
    ss.send(Raw(chunk) )

client_socket.close()
</snippet></ROW><ROW><id>13521333</id><snippet>import socket
my_port=3002
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("", my_port))
server_socket.listen(5)
client_socket, address = server_socket.accept()
while (True):
    data = client_socket.recv(512)
    if (data):
        print data
    else:
        break
</snippet></ROW><ROW><id>13521339</id><snippet>u'0'</snippet></ROW><ROW><id>13521339</id><snippet>'0'</snippet></ROW><ROW><id>13521339</id><snippet>0</snippet></ROW><ROW><id>13521396</id><snippet>a</snippet></ROW><ROW><id>13521396</id><snippet>n</snippet></ROW><ROW><id>13521396</id><snippet>a = [ [ '~' for _ in range(n) ] for _ in range(n) ]
</snippet></ROW><ROW><id>13521507</id><snippet>info = {}
with open('scoring_info.txt') as input:
    for line in input:
        player, stats, outcome, date = (item.strip() for item in line.split('-', 3))
        stats = dict(zip(('kills', 'deaths', 'assists'), map(int, stats.split('/'))))
        date = tuple(map(int, date.split('-')))
        info[player] = dict(zip(('stats', 'outcome', 'date'), (stats, outcome, date)))

print 'info:'
for player, record in info.items():
    print '  player %r:' % player
    for field, value in record.items():
        print '    %s: %s' % (field, value)

# sample usage
print
player = 'Fizz'
print '%s had %s kills in the game' % (player, info[player]['stats']['kills'])
</snippet></ROW><ROW><id>13521507</id><snippet>info:
  player 'Shyvana':
    date: (2012, 11, 22)
    outcome: Loss
    stats: {'assists': 5, 'kills': 12, 'deaths': 4}
  player 'Miss Fortune':
    date: (2012, 11, 22)
    outcome: Win
    stats: {'assists': 3, 'kills': 12, 'deaths': 4}
  player 'Fizz':
    date: (2012, 11, 22)
    outcome: Win
    stats: {'assists': 5, 'kills': 12, 'deaths': 4}

Fizz had 12 kills in the game
</snippet></ROW><ROW><id>13521507</id><snippet>Struct</snippet></ROW><ROW><id>13521507</id><snippet>struct</snippet></ROW><ROW><id>13521507</id><snippet>class Struct(object):
    """ generic container object """
    def __init__(self, **kwds): # keyword args define attribute names and values
        self.__dict__.update(**kwds)

info2 = {}
with open('scoring_info.txt') as input:
    for line in input:
        player, stats, outcome, date = (item.strip() for item in line.split('-', 3))
        stats = dict(zip(('kills', 'deaths', 'assists'), map(int, stats.split('/'))))
        victory = (outcome.lower() == 'win') # change to T/F
        date = dict(zip(('year','month','day'), map(int, date.split('-'))))
        info2[player] = Struct(champ_name=player, stats=Struct(**stats),
                               victory=victory, date=Struct(**date))
print
print 'info2:'
for rec in info2.values():
    print '  player %r:' % rec.champ_name
    print '    stats: kills=%s, deaths=%s, assists=%s' % (
          rec.stats.kills, rec.stats.deaths, rec.stats.assists)
    print '    victorious: %s' % rec.victory
    print '    date: %d-%02d-%02d' % (rec.date.year, rec.date.month, rec.date.day)

# sample usage
print
player = 'Fizz'
print '%s had %s kills in the game' % (player, info2[player].stats.kills)
</snippet></ROW><ROW><id>13521507</id><snippet>info2:
  player 'Shyvana':
    stats: kills=12, deaths=4, assists=5
    victorious: False
    date: 2012-11-22
  player 'Miss Fortune':
    stats: kills=12, deaths=4, assists=3
    victorious: True
    date: 2012-11-22
  player 'Fizz':
    stats: kills=12, deaths=4, assists=5
    victorious: True
    date: 2012-11-22

Fizz had 12 kills in the game
</snippet></ROW><ROW><id>13521511</id><snippet>Facebook</snippet></ROW><ROW><id>13521511</id><snippet>facebook</snippet></ROW><ROW><id>13521511</id><snippet>*</snippet></ROW><ROW><id>13521511</id><snippet>facebook.&lt;your_method&gt;</snippet></ROW><ROW><id>13521729</id><snippet>sim_map_training</snippet></ROW><ROW><id>13521729</id><snippet>import sim_map_training  # =  sim_map_training = sys.modules['sim_map_training']
reload(sim_map_training)
</snippet></ROW><ROW><id>13521739</id><snippet>bin/python</snippet></ROW><ROW><id>13521775</id><snippet>{{ form.email }}
</snippet></ROW><ROW><id>13521846</id><snippet>print "{:%}".format(0.1)
#10.000000%
</snippet></ROW><ROW><id>13521846</id><snippet>print "{:.0%}".format(0.1)
#10%
</snippet></ROW><ROW><id>13521846</id><snippet>"play the {instrument} all {moment}, even if my {instrument} is old".format(moment='day', instrument='guitar')
#'play the guitar all day, even if my guitar is old'
</snippet></ROW><ROW><id>13521846</id><snippet>"the real component is {0.real} and the imaginary one is {0.imag}".format(3+4j)
#'the real component is 3.0 and the imaginary one is 4.0'
</snippet></ROW><ROW><id>13521883</id><snippet>no_players = input("How many people are playing? ")
players = []
for _ in range(int(no_players)):
    name = input("What is your name? ")
    players.append(Player(name))
</snippet></ROW><ROW><id>13521883</id><snippet>[Player(...), Player(...), ...]</snippet></ROW><ROW><id>13521883</id><snippet>players[2]</snippet></ROW><ROW><id>13521883</id><snippet>for player in players:</snippet></ROW><ROW><id>13522115</id><snippet>import numpy as np
import pylab as plt

imageArray2Dmesh = np.mean(mesh_reshape, axis=2);
plt.figure()
plt.pcolor(imageArray2Dmesh, cmap = ,cmap=plt.cm.pink)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>13522156</id><snippet>(sample, label)</snippet></ROW><ROW><id>13522156</id><snippet>label</snippet></ROW><ROW><id>13522194</id><snippet>animation</snippet></ROW><ROW><id>13522194</id><snippet>hyper-ui</snippet></ROW><ROW><id>13522194</id><snippet>state-machine</snippet></ROW><ROW><id>13522368</id><snippet>MovieTree.get(word).append(line)</snippet></ROW><ROW><id>13522381</id><snippet>__init__</snippet></ROW><ROW><id>13522381</id><snippet>import unittest

class Test(unittest.TestCase):
    def __init__(self, methodName = 'runTest'):
        unittest.TestCase.__init__(self, methodName)
        self.data = range(5)

    def test_getitem(self):
        self.assertEqual(self.data[1],1)

    def test_reversed(self):
        self.assertEqual(list(reversed(self.data)),[4,3,2,1,0])

if __name__ == '__main__':
    import sys
    sys.argv.insert(1,'--verbose')
    unittest.main(argv = sys.argv)
</snippet></ROW><ROW><id>13522381</id><snippet>% test.py
test_getitem (__main__.Test) ... ok
test_reversed (__main__.Test) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</snippet></ROW><ROW><id>13522500</id><snippet>file.readline()</snippet></ROW><ROW><id>13522500</id><snippet>with open('/your/file.txt') as f:
  for line in f:
    s = line.rstrip().split(': ')
    # etc
</snippet></ROW><ROW><id>13522536</id><snippet>data = np.genfromtxt(
    fname,
    names = True, #  If `names` is True, the field names are read from the first valid line
    comments = '#', # Skip characters after #
    delimiter = '\t', # tab separated values
    dtype = None)  # guess the dtype of each column
</snippet></ROW><ROW><id>13522536</id><snippet>import numpy as np
import os
fname = os.path.expanduser('~/test/data')
data = np.genfromtxt(
    fname,
    names = True, #  If `names` is True, the field names are read from the first valid line
    comments = '#', # Skip characters after #
    delimiter = '\t', # tab separated values
    dtype = None)  # guess the dtype of each column
print(data)
# [(1.2, 5.3, 2.8, 9.5) (3.1, 4.5, 1.1, 6.7) (1.2, 5.3, 2.8, 9.5)
#  (3.1, 4.5, 1.1, 6.7) (1.2, 5.3, 2.8, 9.5) (3.1, 4.5, 1.1, 6.7)]

print(data['1'])
# [ 1.2  3.1  1.2  3.1  1.2  3.1]
</snippet></ROW><ROW><id>13522644</id><snippet>loc = {}    
for x in range(N):
    for y in range(M):
        loc.setdefault(matrix[x][y], []).append((x,y))
</snippet></ROW><ROW><id>13522759</id><snippet>def find_one_shortest_path(graph, now, target, path_info):
    if now == target:
        print path_info
        return
    for each neighbor_point of graph[now]:
        path_info.append(neighbor_point) 
        find_one_shortest_path(graph, neighbor_point, target, path_info) #recursion
        path_info.pop(-1) #backtracking

def all_shortest_paths(graph, starting_point, ending_point):
    disS = [] # shortest path from S
    disT = [] # shortest path from T
    new_graph = []
    disS = Dijkstra(graph, starting_point)
    disT = Dijkstra(graph, endinng_point)
    for each edge&lt;a, b&gt; in graph:
        if disS[a] + w&lt;a, b&gt; + disT[b] == disS[ending_point]:
            new_graph.add(&lt;a, b&gt;)
    find_one_shortest_path(new_graph, starting_point, ending_point, []) 
</snippet></ROW><ROW><id>13522879</id><snippet>def nest_search(nest, hold=None):
    if hold is None:
        hold = []
    for item in nest:
        if isinstance(item, int):
            hold.append(item)
        if isinstance(item, list):
            nest_search(item, hold)
    return hold
</snippet></ROW><ROW><id>13522879</id><snippet>list</snippet></ROW><ROW><id>13522879</id><snippet>def nest_search_gen(nest):
    for item in nest:
        if isinstance(item, int):
            yield item
        if isinstance(item, list):
            yield from nest_search_gen(item)
</snippet></ROW><ROW><id>13522879</id><snippet>yield from</snippet></ROW><ROW><id>13522879</id><snippet>for i in nest_search_gen(item):
    yield i
</snippet></ROW><ROW><id>13523288</id><snippet>x - y + 2z =  5
    y -  z = -1
         z =  3
</snippet></ROW><ROW><id>13523288</id><snippet>A x = b
</snippet></ROW><ROW><id>13523288</id><snippet>A = np.array([[ 1, -1,  2],
              [ 0,  1, -1],
              [ 0,  0,  1]])
</snippet></ROW><ROW><id>13523288</id><snippet>b = np.array([5,-1,3])
</snippet></ROW><ROW><id>13523288</id><snippet>x</snippet></ROW><ROW><id>13523288</id><snippet>np.linalg.solve</snippet></ROW><ROW><id>13523288</id><snippet>import numpy as np

A = np.array([(1, -1, 2),(0,1,-1),(0,0,1)])
b = np.array([5,-1,3])
x = np.linalg.solve(A,b)
</snippet></ROW><ROW><id>13523288</id><snippet>print(x)
# [ 1.  2.  3.]
</snippet></ROW><ROW><id>13523288</id><snippet>A x = b</snippet></ROW><ROW><id>13523288</id><snippet>print(np.dot(A,x))
# [ 5. -1.  3.]

assert np.allclose(np.dot(A,x), b)
</snippet></ROW><ROW><id>13523339</id><snippet>def ballPickerTwo():

    a = random.randint(1, 59)

    b = a        
    while b == a:
        b = random.randint(1, 59)

    c = b
    while c == b or c == a:
        c = random.randint(1, 59)

    d = c
    while d == c or d == b or d == a:
        d = random.randint(1, 59)

    ...
</snippet></ROW><ROW><id>13523347</id><snippet>companies={'white house black market', 'macy','nordstrom','filene','walmart'}
</snippet></ROW><ROW><id>13523347</id><snippet>companies=['white house black market', 'macy','nordstrom','filene','walmart']
</snippet></ROW><ROW><id>13523407</id><snippet>pip install -e git+git://github.com/YourUsername/forked-django-app.git#egg=forked-django-app
</snippet></ROW><ROW><id>13523407</id><snippet>mezzanine.accounts.urls</snippet></ROW><ROW><id>13523407</id><snippet>models.py</snippet></ROW><ROW><id>13523480</id><snippet>filetypes</snippet></ROW><ROW><id>13523480</id><snippet>filepath = askopenfilename(filetypes = [
    ('Text Files', '.txt'),
    ('Python Scripts', '.py'),
    ('INI Files', '.ini')
])
</snippet></ROW><ROW><id>13523765</id><snippet>&gt;&gt;&gt; def by_three(n):
...     orig_num = n
...     if (isinstance(orig_num, int) and orig_num%3 == 0 ):
...         cube(orig_num)
...     else:
...         print "False"
... 
&gt;&gt;&gt; def cube(orig_num):
...     cube = orig_num**3
...     print cube
...     return
... 
&gt;&gt;&gt; by_three(11)
False
&gt;&gt;&gt; by_three(12)
1728
&gt;&gt;&gt; by_three(13)
False
</snippet></ROW><ROW><id>13523765</id><snippet>def by_three(n): return False if n % 3 else cube(n)

def cube(n): return n**3

by_three(11)
by_three(12)
by_three(13)
</snippet></ROW><ROW><id>13523765</id><snippet>&gt;&gt;&gt; def by_three(n): return False if n % 3 else cube(n)
... 
&gt;&gt;&gt; def cube(n): return n**3
... 
&gt;&gt;&gt; by_three(11)
False
&gt;&gt;&gt; by_three(12)
1728
&gt;&gt;&gt; by_three(13)
False
</snippet></ROW><ROW><id>13523903</id><snippet>re</snippet></ROW><ROW><id>13523903</id><snippet>ast</snippet></ROW><ROW><id>13523903</id><snippet>In [1]: import ast

In [2]: any_string = "[u'02', u'03', u'04', u'05']"

In [3]: my_list = ast.literal_eval(any_string)

In [4]: type(my_list)
Out[4]: &lt;type 'list'&gt;

In [5]: my_list
Out[5]: [u'02', u'03', u'04', u'05']

In [6]: for item in my_list:
   ...:     print item
   ...:
   ...:
02
03
04
05
</snippet></ROW><ROW><id>13524148</id><snippet>db.words.update({"_id": "the_word" }, {"$inc": {"frequency": 1}}, true)
</snippet></ROW><ROW><id>13524244</id><snippet>new</snippet></ROW><ROW><id>13524244</id><snippet>multiply()</snippet></ROW><ROW><id>13524244</id><snippet>new = ''</snippet></ROW><ROW><id>13524244</id><snippet>new</snippet></ROW><ROW><id>13524244</id><snippet>+</snippet></ROW><ROW><id>13524244</id><snippet>'a' + 'b' =&gt; 'ab'
</snippet></ROW><ROW><id>13524244</id><snippet>'1' + '2' =&gt; '12'
</snippet></ROW><ROW><id>13524244</id><snippet>new = ''
new + str(var) =&gt; '' + '3' =&gt; '3'
</snippet></ROW><ROW><id>13524244</id><snippet>def multiplyBy3(lst):
    newList = [] #create an empty list
    for i in range(len(lst)):
        newList.append(lst[i] * 3)
    return newList
</snippet></ROW><ROW><id>13524244</id><snippet>def multiplyBy3(lst):
    newList = [] 
    for item in lst: #iterate over the elements of the list
        newList.append(item * 3)
    return newList
</snippet></ROW><ROW><id>13524244</id><snippet>def multiplyBy3(lst):
    return [item * 3 for item in lst] #construct a new list of item * 3.
</snippet></ROW><ROW><id>13524323</id><snippet>import subprocess
import re
import sys

print('Dry run:')
cmd = 'rsync -az --stats --dry-run ' + sys.argv[1] + ' ' + sys.argv[2]
proc = subprocess.Popen(cmd,
                        shell=True,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,)

remainder = proc.communicate()[0]
mn = re.findall(r'Number of files: (\d+)', remainder)
total_files = int(mn[0])
print('Number of files: ' + str(total_files))

print('Real rsync:')
cmd = 'rsync -avz  --progress ' + sys.argv[1] + ' ' + sys.argv[2]
proc = subprocess.Popen(cmd,
                        shell=True,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,)

while True:
             output = proc.stdout.readline()
if 'to-check' in output:
             m = re.findall(r'to-check=(\d+)/(\d+)', output)
             progress = (100 * (int(m[0][1]) - int(m[0][0]))) / total_files
             sys.stdout.write('\rDone: ' + str(progress) + '%')
             sys.stdout.flush()
             if int(m[0][0]) == 0:
                      break

print('\rFinished')
</snippet></ROW><ROW><id>13524323</id><snippet>stdout</snippet></ROW><ROW><id>13524323</id><snippet>progress webservice/API</snippet></ROW><ROW><id>13524323</id><snippet>progress webservice/API</snippet></ROW><ROW><id>13524523</id><snippet>from types import MethodType

def func(*x):
    print('func:', x)


class ABC:
    def __init__(self, f):
        self.f1 = MethodType(f, self, self.__class__)

    def f2(*x):
        print('f2:', x)

if __name__ == '__main__':
    a = ABC(func)
    print a.f1(10)
    print a.f2(10)
    a.f3 = MethodType(func, a, ABC)
    print a.f3(10)
</snippet></ROW><ROW><id>13524523</id><snippet>&gt;&gt;&gt; ABC.f4 = MethodType(func, None, ABC)
&gt;&gt;&gt; a.f4(1)
('func:', (&lt;__main__.ABC instance at 0x02AA8AD0&gt;, 1))
</snippet></ROW><ROW><id>13524758</id><snippet>random</snippet></ROW><ROW><id>13524758</id><snippet>[random.random() for _ in range(0, 10)]</snippet></ROW><ROW><id>13524758</id><snippet>import random

collection = mongodb["collection_name"]

rand = random.random()  # rand will be a floating point between 0 to 1.
random_record = collection.find_one({ 'random' =&gt; { '$gte' =&gt; rand } })
</snippet></ROW><ROW><id>13524908</id><snippet>import paramiko

def test_ssh(host, username, password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(host, username=username, password=password)
</snippet></ROW><ROW><id>13524908</id><snippet>test_ssh('10.0.0.10', 'myuser', 'mypassword')
</snippet></ROW><ROW><id>13524908</id><snippet>socket.error: [Errno 113] No route to host
</snippet></ROW><ROW><id>13524908</id><snippet>paramiko.AuthenticationException: Authentication failed.
</snippet></ROW><ROW><id>13524914</id><snippet>python</snippet></ROW><ROW><id>13524914</id><snippet>myscript.py</snippet></ROW><ROW><id>13524914</id><snippet>python</snippet></ROW><ROW><id>13524914</id><snippet>python myscript.py
</snippet></ROW><ROW><id>13524914</id><snippet>myscript.py</snippet></ROW><ROW><id>13524914</id><snippet>python</snippet></ROW><ROW><id>13524914</id><snippet>C:\Python27\Python.exe</snippet></ROW><ROW><id>13524914</id><snippet>autoit</snippet></ROW><ROW><id>13524914</id><snippet>ShellExecute ( "myscript.py" ) 
</snippet></ROW><ROW><id>13524914</id><snippet>myscript.py</snippet></ROW><ROW><id>13524914</id><snippet>RunWait("C:\Python27\Python.exe myscript.py")
</snippet></ROW><ROW><id>13524914</id><snippet>C:\Python27\Python.exe</snippet></ROW><ROW><id>13525134</id><snippet>retCode = retCode and subprocess.call([cmd], cwd=path)
</snippet></ROW><ROW><id>13525134</id><snippet>subprocess.call</snippet></ROW><ROW><id>13525134</id><snippet>False</snippet></ROW><ROW><id>13525134</id><snippet>not</snippet></ROW><ROW><id>13525134</id><snippet>retcode = subprocess.call([cmd], cwd=path)
if retcode != 0:
     print ("failed ...")
     break  # or not break if you want to continue anyway
</snippet></ROW><ROW><id>13525348</id><snippet>a = np.arange(1000)
l = np.hstack(([1, 44, 66, 33, 90], np.arange(200, 300), np.arange(500, 600)))
a[l] = 22
</snippet></ROW><ROW><id>13525348</id><snippet>%timeit a[np.hstack(([1, 44, 66, 33, 90], np.arange(200, 300), np.arange(500, 600)))] = 22
10000 loops, best of 3: 39.5 us per loop

%timeit a[[1, 44, 66, 33, 90]] = 22; a[200:300] = 22; a[500:600] = 22
100000 loops, best of 3: 18.4 us per loop
</snippet></ROW><ROW><id>13525483</id><snippet>os.system()</snippet></ROW><ROW><id>13525483</id><snippet>sys.stdin, sys.stout</snippet></ROW><ROW><id>13525483</id><snippet>import os, sys, commands
from subprocess import Popen, PIPE

var1 = sys.argv[1] 
var2 = sys.argv[2] 
(var3, tError) = Popen(['osascript', '/Setup.scpt', var1, var2], stdout=PIPE).communicate()
print var1
print var2
print var3
</snippet></ROW><ROW><id>13525483</id><snippet>osascript</snippet></ROW><ROW><id>13525483</id><snippet>string</snippet></ROW><ROW><id>13525483</id><snippet>list</snippet></ROW><ROW><id>13525541</id><snippet>a.py</snippet></ROW><ROW><id>13525541</id><snippet>from views import function1, function2

def a_function_one():
   ...
   #call function1 from views
   function1()
</snippet></ROW><ROW><id>13525599</id><snippet>python</snippet></ROW><ROW><id>13525599</id><snippet>subprocess</snippet></ROW><ROW><id>13525599</id><snippet>sys.argv</snippet></ROW><ROW><id>13525599</id><snippet>argparse</snippet></ROW><ROW><id>13525599</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>13525816</id><snippet>.execute()</snippet></ROW><ROW><id>13525816</id><snippet>__iter__()</snippet></ROW><ROW><id>13525816</id><snippet>yield</snippet></ROW><ROW><id>13525816</id><snippet>return self</snippet></ROW><ROW><id>13525816</id><snippet>.next()</snippet></ROW><ROW><id>13525816</id><snippet>yield</snippet></ROW><ROW><id>13525816</id><snippet>StopIteration</snippet></ROW><ROW><id>13525816</id><snippet>class MessagesIterator(object):
    def __init__(self, pk_start, pk_stop):
        self.pk_start, self.pk_stop = pk_start, pk_stop
        self.cursor = db.query("pk&gt;? and pk&lt;?", (pk_start, pk_stop))

    def __iter__(self):
        return self

    def next(self):
        return next(self.cursor)  # raises StopIteration when done

    def length(self):
        return self.cursor.rowcount

    def move_to(self, pk_start):
        # Validate pk_start perhaps
        self.pk_start = pk_start
        self.cursor = db.query("pk&gt;? and pk&lt;?", (self.pk_start, self.pk_stop))
</snippet></ROW><ROW><id>13525899</id><snippet>logger = logger or logging.getLogger('dummy') #without configuring dummy before.
</snippet></ROW><ROW><id>13525899</id><snippet>null</snippet></ROW><ROW><id>13525899</id><snippet>class DummyObject():
    def __init__(self):
        pass
    def __getattr__(self, name):
        return (lambda *x: None)

logger = logger or DummyObject()
</snippet></ROW><ROW><id>13525899</id><snippet>if logger:
    logger.debug("abc")
</snippet></ROW><ROW><id>13525962</id><snippet>A()</snippet></ROW><ROW><id>13525962</id><snippet>B()</snippet></ROW><ROW><id>13525962</id><snippet>A()</snippet></ROW><ROW><id>13525962</id><snippet>B()</snippet></ROW><ROW><id>13525962</id><snippet>RETURN</snippet></ROW><ROW><id>13525962</id><snippet>def A():
    print 'Processing in A!'

def B():

    choice = ''
    print 'Processing in B!'

    while choice.lower().strip() != 'r':    
        choice = raw_input("Press R to repeat, RETURN to exit: ").lower().strip()            
        if choice == '':
            return False
        if choice  == 'r':
            return True

while B():
    A()
</snippet></ROW><ROW><id>13525962</id><snippet>Processing in B!
Press R to repeat, RETURN to exit: R
Processing in A!
Processing in B!
Press R to repeat, RETURN to exit: r
Processing in A!
Processing in B!
Press R to repeat, RETURN to exit: notR
Press R to repeat, RETURN to exit: 
</snippet></ROW><ROW><id>13525962</id><snippet>lower()</snippet></ROW><ROW><id>13525962</id><snippet>r</snippet></ROW><ROW><id>13525962</id><snippet>R</snippet></ROW><ROW><id>13525962</id><snippet>strip()</snippet></ROW><ROW><id>13526005</id><snippet>def</snippet></ROW><ROW><id>13526005</id><snippet>__init__</snippet></ROW><ROW><id>13526005</id><snippet>None</snippet></ROW><ROW><id>13526005</id><snippet>class Dummy(object):
    def __init__(self, mylist=None):
        self.mylist = mylist if mylist is not None else []
</snippet></ROW><ROW><id>13527137</id><snippet>u"ö"</snippet></ROW><ROW><id>13527137</id><snippet>"ö"</snippet></ROW><ROW><id>13527137</id><snippet>locale</snippet></ROW><ROW><id>13527137</id><snippet>print e</snippet></ROW><ROW><id>13527137</id><snippet>str(e)</snippet></ROW><ROW><id>13527137</id><snippet>["å"]</snippet></ROW><ROW><id>13527137</id><snippet>__str__</snippet></ROW><ROW><id>13527137</id><snippet>__repr__</snippet></ROW><ROW><id>13527137</id><snippet>repr(some_list)</snippet></ROW><ROW><id>13527137</id><snippet>repr</snippet></ROW><ROW><id>13527137</id><snippet>repr(string)</snippet></ROW><ROW><id>13527137</id><snippet>&gt;&gt;&gt; print u"ö"
ö
&gt;&gt;&gt; print repr(u"ö")
u'\xf6'
&gt;&gt;&gt; print repr("ö")
'\xc3\xb6'
</snippet></ROW><ROW><id>13527500</id><snippet>&gt;&gt;&gt; s = '[00451] Kayle - 2/3/15 - Win - 2012-11-22'

&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match(r'\[(\d+)\]', s).group(1)
00451
</snippet></ROW><ROW><id>13527706</id><snippet>numpy</snippet></ROW><ROW><id>13527706</id><snippet>$ python -mtimeit "from random import randint" "randint(1, 3800000)"
100000 loops, best of 3: 9.14 usec per loop
</snippet></ROW><ROW><id>13527706</id><snippet>$ python -mtimeit "from numpy import random" "random.randint(1, 3800000)"
100000 loops, best of 3: 3.6 usec per loop
</snippet></ROW><ROW><id>13528382</id><snippet>i + 3</snippet></ROW><ROW><id>13528382</id><snippet>&gt;&gt;&gt; my_str = "ABCDEF"
&gt;&gt;&gt; length = len(my_str)

&gt;&gt;&gt; for i in range(length):
        print my_str[(i + 3) % length],


D E F A B C
</snippet></ROW><ROW><id>13528382</id><snippet>i = 3</snippet></ROW><ROW><id>13528382</id><snippet>i + 3 = 6</snippet></ROW><ROW><id>13528382</id><snippet>6 % 6 = 0</snippet></ROW><ROW><id>13528382</id><snippet>Recursion</snippet></ROW><ROW><id>13528382</id><snippet>def shift_cipher_noloop(plain, i):

    if(plain == ""):
        return ""

    else:
        # Iterate with your string, moving first character to last on each iteration
        if len(plain) &gt; 3 and i &gt; 0: 
            return shift_cipher_noloop(plain[1:] + plain[0], i - 1)

        else:
            # else Will be executed when either len &lt;= 3, or `i &lt;= 0`.
            # when (i &lt;= 0) is true, you have created a new string, 
            # with each character shifted by `original i` indices. 
            # So, just return it.

            return plain


x = "ABCDEF"
index_to_shift = 3
y = shift_cipher_noloop(x, len(x) - index_to_shift)

print(y)
</snippet></ROW><ROW><id>13528382</id><snippet>DEFABC
</snippet></ROW><ROW><id>13528382</id><snippet>method</snippet></ROW><ROW><id>13528382</id><snippet>len(plain) &lt;= 3</snippet></ROW><ROW><id>13528445</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = "'8255'"
# note - this still works if it was '"8255"'
&gt;&gt;&gt; ast.literal_eval(s)
'8255'
&gt;&gt;&gt; int(ast.literal_eval(s))
8255
</snippet></ROW><ROW><id>13528445</id><snippet>&gt;&gt;&gt; s = '8255'
&gt;&gt;&gt; type(ast.literal_eval(s))
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>13528654</id><snippet>data</snippet></ROW><ROW><id>13528654</id><snippet>r = requests.post(Request_URL, data=serviceRequest)
</snippet></ROW><ROW><id>13528654</id><snippet>data = serviceRequest.copy()
data.update(pageContext)
r = requests.post(Request_URL, data=data)
</snippet></ROW><ROW><id>13528667</id><snippet>ballx = WIDTH / 2
bally = HEIGHT / 2
ball_vel = [1, 1]
ball_pos =(ballx, bally)
</snippet></ROW><ROW><id>13528667</id><snippet>ball_pos = (ballx,bally)
</snippet></ROW><ROW><id>13528732</id><snippet>self.args</snippet></ROW><ROW><id>13528732</id><snippet>self.kwargs</snippet></ROW><ROW><id>13528732</id><snippet>self.kwargs['pk']</snippet></ROW><ROW><id>13529047</id><snippet>dict</snippet></ROW><ROW><id>13529047</id><snippet>with open('myfile.txt') as fin:
    lines = [line.split() for line in fin]
</snippet></ROW><ROW><id>13529047</id><snippet>[['Xantippe', '09:00', '11:00'], ['Erica', '10:00', '12:06'], ['Marcia', '09:30', '11:45'], ['Elizabeth', '10:15', '12:10'], ['Angela', '11:30', '13:45'], ['Freda', '12:00', '14:20'], ['Maria', '12:30', '14:10']]
</snippet></ROW><ROW><id>13529047</id><snippet>.sort</snippet></ROW><ROW><id>13529047</id><snippet>list</snippet></ROW><ROW><id>13529047</id><snippet>itemgetter</snippet></ROW><ROW><id>13529047</id><snippet>from operator import itemgetter
lines.sort(key=itemgetter(2))
</snippet></ROW><ROW><id>13529047</id><snippet>[['Xantippe', '09:00', '11:00'], ['Marcia', '09:30', '11:45'], ['Erica', '10:00', '12:06'], ['Elizabeth', '10:15', '12:10'], ['Angela', '11:30', '13:45'], ['Maria', '12:30', '14:10'], ['Freda', '12:00', '14:20']]
</snippet></ROW><ROW><id>13529047</id><snippet>with open('output.txt', 'w') as fout:
    for el in lines:
        fout.write('{0}\n'.format(' '.join(el)))
</snippet></ROW><ROW><id>13529116</id><snippet>from copy import deepcopy
list1.append(deepcopy(list2))
</snippet></ROW><ROW><id>13529704</id><snippet>execute='/bin/bash'</snippet></ROW><ROW><id>13529704</id><snippet>file_contents = '...'
p = Popen(['/bin/bash', '-c', "cat &lt;(cat&lt;&lt;'EOF_CFG'\n%s\nEOF_CFG\n)" % file_contents])
</snippet></ROW><ROW><id>13529816</id><snippet>L3 = list(set(L).difference(L2))
</snippet></ROW><ROW><id>13529816</id><snippet>&gt;&gt;&gt; L=['list1','list2','list3']
&gt;&gt;&gt; L2=['list2']
&gt;&gt;&gt; set(L).difference(L2)
set(['list1', 'list3'])
&gt;&gt;&gt; list(set(L).difference(L2))
['list1', 'list3']
</snippet></ROW><ROW><id>13529860</id><snippet>auto_now</snippet></ROW><ROW><id>13529860</id><snippet>auto_now_add</snippet></ROW><ROW><id>13529860</id><snippet>DateField.auto_now</snippet></ROW><ROW><id>13529860</id><snippet>DateField.auto_now_add</snippet></ROW><ROW><id>13529915</id><snippet>for</snippet></ROW><ROW><id>13529915</id><snippet>&gt;&gt;&gt; for i, (x1, x2) in enumerate(zip([1,2,3], [3,4,5])):
...     print i, x1, x2
... 
0 1 3
1 2 4
2 3 5
</snippet></ROW><ROW><id>13530084</id><snippet>serialized</snippet></ROW><ROW><id>13530084</id><snippet>serialized = encodeURIComponent(serialized);
var link = "http://host.com/?data=" + serialized;
</snippet></ROW><ROW><id>13530101</id><snippet>setup.py</snippet></ROW><ROW><id>13530101</id><snippet>distutils.commands</snippet></ROW><ROW><id>13530101</id><snippet>setup.py</snippet></ROW><ROW><id>13530101</id><snippet>entry_points = """
[distutils.commands]
compile_catalog = babel.messages.frontend:compile_catalog
extract_messages = babel.messages.frontend:extract_messages
init_catalog = babel.messages.frontend:init_catalog
update_catalog = babel.messages.frontend:update_catalog
"""
</snippet></ROW><ROW><id>13530101</id><snippet>python setup.py commandname</snippet></ROW><ROW><id>13530101</id><snippet>from distutils.cmd import Command</snippet></ROW><ROW><id>13530101</id><snippet>babel.messages.frontend</snippet></ROW><ROW><id>13530101</id><snippet>from distutils.cmd import Command
from distutils.errors import DistutilsOptionError


class compile_catalog(Command):
    """Catalog compilation command for use in ``setup.py`` scripts."""

    # Description shown in setup.py --help-commands
    description = 'compile message catalogs to binary MO files'
    # Options available for this command, tuples of ('longoption', 'shortoption', 'help')
    # If the longoption name ends in a `=` it takes an argument
    user_options = [
        ('domain=', 'D',
         "domain of PO file (default 'messages')"),
        ('directory=', 'd',
         'path to base directory containing the catalogs'),
        # etc.
    ]
    # Options that don't take arguments, simple true or false options.
    # These *must* be included in user_options too, but without a = equals sign
    boolean_options = ['use-fuzzy', 'statistics']

    def initialize_options(self):
        # Set a default for each of your user_options (long option name)

    def finalize_options(self):
        # verify the arguments and raise DistutilOptionError if needed

    def run(self):
        # Do your thing here.
</snippet></ROW><ROW><id>13530125</id><snippet>db.update('category', where='category_name = $category_name', vars=webInput, **webInput)
</snippet></ROW><ROW><id>13530125</id><snippet>webInput</snippet></ROW><ROW><id>13530125</id><snippet>$category_name</snippet></ROW><ROW><id>13530125</id><snippet>vars</snippet></ROW><ROW><id>13530143</id><snippet>queryset.count</snippet></ROW><ROW><id>13530143</id><snippet>queryset.count()</snippet></ROW><ROW><id>13530177</id><snippet>Image</snippet></ROW><ROW><id>13530177</id><snippet>Image</snippet></ROW><ROW><id>13530177</id><snippet>__init__.py</snippet></ROW><ROW><id>13530177</id><snippet>Image</snippet></ROW><ROW><id>13530177</id><snippet>script_image</snippet></ROW><ROW><id>13530177</id><snippet>from Image import script_image
</snippet></ROW><ROW><id>13530449</id><snippet>&gt;&gt;&gt; pprint(zip(data, a))
[('k', 'http://www.xyz.com/jhuh7287'),
 ('some small string here', 'http://www.hjuk.com/kashjh716'),
 ('so med string here', 'http://www.psudjg.com/9279jshkoh'),
 ('some string here', 'http://www.xyz.com/jhuh7287'),
 ('l', 'http://www.xyz.com/9289jhjbg')]

&gt;&gt;&gt; [ (av, dv) for av, dv in zip(a, data) if len(av) &gt; 1 and tempstring in av]
[('http://www.xyz.com/jhuh7287', 'k'), ('http://www.xyz.com/jhuh7287', 'some string here'), ('http://www.xyz.com/9289jhjbg', 'l')]
</snippet></ROW><ROW><id>13530449</id><snippet>selectors = (tempstring in dv for av, dv in izip(a, data) if len(av) &gt; 1)
</snippet></ROW><ROW><id>13530449</id><snippet>is</snippet></ROW><ROW><id>13530461</id><snippet>return</snippet></ROW><ROW><id>13530461</id><snippet>newTime</snippet></ROW><ROW><id>13530461</id><snippet>import datetime

def timeDiff(time1,time2):
    timeA = datetime.datetime.strptime(time1, "%H:%M")
    timeB = datetime.datetime.strptime(time2, "%H:%M")
    newTime = timeA - timeB
    return newTime.seconds/60   

print timeDiff('15:59','15:53'), 'minutes'

&gt;&gt;&gt; 6 minutes
</snippet></ROW><ROW><id>13530461</id><snippet>newTime = timeB - timeA</snippet></ROW><ROW><id>13530462</id><snippet>([1-8])(?:.+?)\1
</snippet></ROW><ROW><id>13530462</id><snippet>\1</snippet></ROW><ROW><id>13530462</id><snippet>first</snippet></ROW><ROW><id>13530462</id><snippet>([1-8])</snippet></ROW><ROW><id>13530653</id><snippet>LC_COLLATE</snippet></ROW><ROW><id>13530653</id><snippet>\l+</snippet></ROW><ROW><id>13530653</id><snippet>psql</snippet></ROW><ROW><id>13530653</id><snippet>locale</snippet></ROW><ROW><id>13530653</id><snippet>-- results may vary depending on your OS/libc
SELECT 'P 0' &lt; 'P! ' COLLATE "C"; -- returns true
SELECT 'P 0' &lt; 'P! ' COLLATE "en_GB"; -- returns false
</snippet></ROW><ROW><id>13530746</id><snippet>char*</snippet></ROW><ROW><id>13530746</id><snippet>def unstuff(self, s):
    return s.replace('\xFE\xDC', '\xFC').replace('\xFE\xDD', '\xFE').replace('\xFE\xDE', '\xFE')
def stuff(self, s):
    return s.replace('\xFC', '\xFE\xDC').replace('\xFD', '\xFE\xDD').replace('\xFE', '\xFE\xDE')
</snippet></ROW><ROW><id>13530746</id><snippet>def unstuff(data):
    i = iter(data)
    dic = {'\xDC' : '\xFC', '\xDD' : '\xFD', '\xFE' : '\xDE'}
    while True:
        d = i.next()  # throws StopIteration on the end
        if d == '\xFE':
            d2 = i.next()
            if d2 in dic:
                yield dic[d2]
            else:
                yield '\xFE'
                yield d2
        else:
            yield d

def stuff(data):
    i = iter(data)
    dic = { '\xFC' : '\xDC', '\xFD' : '\xDD', '\xFE' : '\xDE' }
    while True: 
        d = i.next() # throws StopIteration on the end
        if d in dic:
            yield '\xFE'
            yield dic[d]
        else:
            yield d

def main():
    s = 'hello\xFE\xDCWorld'
    unstuffed = "".join(unstuff(s))
    stuffed = "".join(stuff(unstuffed))
    print s, unstuffed, stuffed

    # also possible
    for c in unstuff(s):
        print ord(c)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13530746</id><snippet>stuff()</snippet></ROW><ROW><id>13530746</id><snippet>unstuff()</snippet></ROW><ROW><id>13530746</id><snippet>print</snippet></ROW><ROW><id>13530746</id><snippet>socket.send</snippet></ROW><ROW><id>13530746</id><snippet>"".join()</snippet></ROW><ROW><id>13530746</id><snippet>0xFE 0x__</snippet></ROW><ROW><id>13530746</id><snippet>import re

s = 'hello\xFE\xDCWorld' # our test-string

# read: FE DC or FE DD or FE DE
unstuff   = re.compile('\xFE\xDC|\xFE\xDD|\xFE\xDE')
# read: 
#  - use this pattern to match against the string
#  - replace what you have found (m.groups(0), whole match) with
#    char(ord(match[1])^0x20)
unstuffed = unstuff.sub(lambda m: chr(ord(m.group(0)[1])^0x20), s)

# same thing, other way around
stuff   = re.compile('\xFC|\xFD|\xFE')
stuffed = stuff.sub(lambda m: '\xFE' + chr(ord(m.group(0))^0x20), unstuffed)

print s, unstuffed, stuffed
</snippet></ROW><ROW><id>13530746</id><snippet>s.replace(..).replace(..).replace(..)</snippet></ROW><ROW><id>13530746</id><snippet>stuff</snippet></ROW><ROW><id>13530746</id><snippet>unstuff</snippet></ROW><ROW><id>13530746</id><snippet>generate random binary data as a string
while less_than_a_second:
    unstuff(stuff(random_data))
    count += 1
return time_needed / count
</snippet></ROW><ROW><id>13530822</id><snippet>lines.sort(key=itemgetter(2), reverse=True)
</snippet></ROW><ROW><id>13530822</id><snippet>lines.reverse()
</snippet></ROW><ROW><id>13530822</id><snippet>reversed(lines)
</snippet></ROW><ROW><id>13530833</id><snippet>|</snippet></ROW><ROW><id>13530833</id><snippet>#!/bin/bash
pylint -f parseable src/apps/api | tee $1/pylint.out
</snippet></ROW><ROW><id>13530833</id><snippet>&lt;exec&gt;</snippet></ROW><ROW><id>13530833</id><snippet>&lt;target name="pylint" description="Pylint"&gt;
    &lt;exec executable="pylint.sh"&gt;
        &lt;arg line="${basedir}"/&gt;
    &lt;/exec&gt;
&lt;/target&gt;
</snippet></ROW><ROW><id>13530833</id><snippet>.bat</snippet></ROW><ROW><id>13531087</id><snippet>i = 5     # create int(5) instance, bind it to i
j = i     # bind j to the same int as i
j = 3     # create int(3) instance, bind it to j
print i   # i still bound to the int(5), j bound to the int(3)
</snippet></ROW><ROW><id>13531087</id><snippet>i = [1,2,3]   # create the list instance, and bind it to i
j = i         # bind j to the same list as i
i[0] = 5      # change the first item of i
print j       # j is still bound to the same list as i
</snippet></ROW><ROW><id>13531185</id><snippet>request.cookies</snippet></ROW><ROW><id>13531185</id><snippet>dict</snippet></ROW><ROW><id>13531185</id><snippet>if 'country' in request.cookies:
    # do something
else:
    # do something else
</snippet></ROW><ROW><id>13531261</id><snippet>import json

respone = []
for row in z['rows']:
    for key, dict_list in row.iteritems():
        count = dict_list[1]
        year = dict_list[2]
        response.append({'count': count['v'], 'year' : year['v']})

 print json.dumps(response)
</snippet></ROW><ROW><id>13531261</id><snippet>[{'count': u'995', 'year': u'1600'},
 {'count': u'942', 'year': u'1607'},
 {'count': u'937', 'year': u'1599'},
 {'count': u'894', 'year': u'1598'},
 {'count': u'848', 'year': u'1592'},
 {'count': u'841', 'year': u'1590'},
 {'count': u'786', 'year': u'1603'},
 {'count': u'779', 'year': u'1609'},
 {'count': u'762', 'year': u'1597'},
 {'count': u'753', 'year': u'1594'},
 {'count': u'740', 'year': u'1596'},
 {'count': u'738', 'year': u'1612'},
 {'count': u'718', 'year': u'1590'},
 {'count': u'717', 'year': u'1610'},
 {'count': u'715', 'year': u'1602'},
 {'count': u'680', 'year': u'1606'},
 {'count': u'674', 'year': u'1603'},
 {'count': u'639', 'year': u'1603'},
 {'count': u'637', 'year': u'1603'},
 {'count': u'634', 'year': u'1590'},
 {'count': u'633', 'year': u'1599'},
 {'count': u'616', 'year': u'1596'},
 {'count': u'614', 'year': u'1596'},
 {'count': u'612', 'year': u'1595'},
 {'count': u'607', 'year': u'1603'},
 {'count': u'579', 'year': u'1593'},
 {'count': u'570', 'year': u'1600'},
 {'count': u'541', 'year': u'1599'},
 {'count': u'525', 'year': u'1608'},
 {'count': u'520', 'year': u'1599'},
 {'count': u'518', 'year': u'1602'},
 {'count': u'486', 'year': u'1595'},
 {'count': u'470', 'year': u'1593'},
 {'count': u'433', 'year': u'1609'},
 {'count': u'429', 'year': u'1607'},
 {'count': u'421', 'year': u'1611'},
 {'count': u'399', 'year': u'1592'},
 {'count': u'363', 'year': u'0'},
 {'count': u'353', 'year': u'1594'},
 {'count': u'287', 'year': u'1609'},
 {'count': u'106', 'year': u'0'},
 {'count': u'57', 'year': u'1609'}]
</snippet></ROW><ROW><id>13531261</id><snippet>json.dumps</snippet></ROW><ROW><id>13531310</id><snippet>except ValueError,e</snippet></ROW><ROW><id>13531310</id><snippet>e</snippet></ROW><ROW><id>13531310</id><snippet>e</snippet></ROW><ROW><id>13531310</id><snippet>if e.message != "...""
</snippet></ROW><ROW><id>13531310</id><snippet>def catch(msg):
    try:
        raise ValueError(msg)
    except ValueError as e:
        if e.message != "foo":
            raise
        else:
            print("caught!")

catch("foo")
catch("bar")
</snippet></ROW><ROW><id>13531310</id><snippet>macdat</snippet></ROW><ROW><id>13531310</id><snippet>ValueError</snippet></ROW><ROW><id>13531310</id><snippet>macdat</snippet></ROW><ROW><id>13531310</id><snippet>ValueError</snippet></ROW><ROW><id>13531310</id><snippet>class MyValueError(ValueError): pass
</snippet></ROW><ROW><id>13531310</id><snippet>MyValueError</snippet></ROW><ROW><id>13531310</id><snippet>ValueError</snippet></ROW><ROW><id>13531310</id><snippet>except ValueError</snippet></ROW><ROW><id>13531324</id><snippet>def displayTrack(position):

    output='|'#value given to output
    track=[' ']*20# track is initially just a bunch of empty spaces
    track[position]= 'r'#AND track also contains an r icon
    print(' -'*20)#these are the top and bottom borders
    print(' 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J')#these represent each individual cell

    for i in range(len(track)):
        output= output +track[i] +'|'#append a "|" before and after each empty space " "
    print (output)#print the result
    print(' -'*20)
</snippet></ROW><ROW><id>13531589</id><snippet>FittingSetItem.fitting_pack</snippet></ROW><ROW><id>13531589</id><snippet>ForeignKey</snippet></ROW><ROW><id>13531589</id><snippet>fitting_packs = FittingPack.objects.filter(fittingsetitem__fitting_pack__isnull=False)
</snippet></ROW><ROW><id>13531589</id><snippet>.distinct()</snippet></ROW><ROW><id>13531589</id><snippet>fittingsetitem</snippet></ROW><ROW><id>13531589</id><snippet>fitting_set_item</snippet></ROW><ROW><id>13531636</id><snippet>channel_token = self.session.get('channel_token')
    if channel_token is None: # if the session user does not have a channel token
        user_id = str(uuid.uuid4()).replace("-",'')
        channel_token = channel.create_channel(user_id)
        self.session['channel_token'] = channel_token
        self.session['user_id'] = user_id
</snippet></ROW><ROW><id>13531636</id><snippet>user_id</snippet></ROW><ROW><id>13531730</id><snippet>MyModel._meta.fields
</snippet></ROW><ROW><id>13531730</id><snippet>name</snippet></ROW><ROW><id>13531730</id><snippet>verbose_name</snippet></ROW><ROW><id>13531734</id><snippet>subDir</snippet></ROW><ROW><id>13531734</id><snippet>__init__.py</snippet></ROW><ROW><id>13531734</id><snippet>subDir</snippet></ROW><ROW><id>13531734</id><snippet>from subDir import x</snippet></ROW><ROW><id>13531772</id><snippet>os.mkfifo()</snippet></ROW><ROW><id>13531907</id><snippet> self.rtmpsink = gst.parse_launch("rtmpsink location='rtmp://x.x.x.x/live/myStream'")
</snippet></ROW><ROW><id>13531907</id><snippet> self.rtmpsink = gst.parse_launch("rtmpsink location=rtmp://x.x.x.x/live/myStream")
</snippet></ROW><ROW><id>13531914</id><snippet>event.scancode</snippet></ROW><ROW><id>13531914</id><snippet>event.unicode</snippet></ROW><ROW><id>13531914</id><snippet>import pygame, os
from pygame.locals import *

pygame.init()
screen = pygame.display.set_mode((640, 480))
keymap = {}

while True:
    event = pygame.event.wait()
    if event.type == KEYDOWN:
        keymap[event.scancode] = event.unicode
        print 'keydown %s pressed' % event.unicode
        if (event.key == K_ESCAPE):
            os._exit(0)

    if event.type == KEYUP:
        print 'keyup %s pressed' % keymap[event.scancode]
</snippet></ROW><ROW><id>13531914</id><snippet>keydown d pressed
keyup d pressed
keydown e pressed
keyup e pressed
</snippet></ROW><ROW><id>13531966</id><snippet>property</snippet></ROW><ROW><id>13531966</id><snippet>Ten</snippet></ROW><ROW><id>13531966</id><snippet>class Ten(models.Model):
    nine = models.ForeignKey(Nine)

    @property
    def one(self):
        return self.nine.eight.seven.six.five.four.three.two.one
</snippet></ROW><ROW><id>13531966</id><snippet>Ten</snippet></ROW><ROW><id>13531966</id><snippet>One</snippet></ROW><ROW><id>13532009</id><snippet>import paramiko

client = paramiko.SSHClient()

client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

client.connect('127.0.0.1')

stdin, stdout, stderr = client.exec_command('date')

for line in stdout:
    print line,
print
</snippet></ROW><ROW><id>13532009</id><snippet>Fri Nov 23 17:36:09 EET 2012
</snippet></ROW><ROW><id>13532161</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r'(?&lt;=[^\s])\s')
&gt;&gt;&gt; regex.split('this  is a   string')
['this', ' is', 'a', '  string']
</snippet></ROW><ROW><id>13532161</id><snippet>(?&lt;=...)  #lookbehind.  Only match if the `...` matches before hand
[^\s]     #Anything that isn't whitespace
\s        #single whitespace character
</snippet></ROW><ROW><id>13532161</id><snippet>regex = re.compile(r'(?&lt;!\s)\s')
</snippet></ROW><ROW><id>13532210</id><snippet>urllib3</snippet></ROW><ROW><id>13532210</id><snippet>except TypeError as exc</snippet></ROW><ROW><id>13532210</id><snippet>urllib3</snippet></ROW><ROW><id>13532381</id><snippet>    p = PatchCollection(patches, match_original = True)
</snippet></ROW><ROW><id>13532439</id><snippet>threading.RLock()</snippet></ROW><ROW><id>13532683</id><snippet>zlib-devel</snippet></ROW><ROW><id>13532683</id><snippet>python-imaging</snippet></ROW><ROW><id>13532744</id><snippet>tee</snippet></ROW><ROW><id>13532744</id><snippet>islice</snippet></ROW><ROW><id>13532744</id><snippet>next</snippet></ROW><ROW><id>13532744</id><snippet>def pairwise_deque(iterator, n=2):
    it = chain(iterator, repeat(None, n - 1))
    d = collections.deque(islice(it, n - 1), maxlen=n)
    for a in it:
      d.append(a)
      yield tuple(d)
</snippet></ROW><ROW><id>13532744</id><snippet>iter</snippet></ROW><ROW><id>13532744</id><snippet>iterator</snippet></ROW><ROW><id>13532789</id><snippet>print('Synchronous:')
start1 = time.time()
synchronous()
end1 = time.time()
print "%.2gs" % (end1-start1)

print('Asynchronous:')
start2 = time.time()
asynchronous()
end2 = time.time()
print "%.2gs" % (end2-start2)
</snippet></ROW><ROW><id>13532789</id><snippet>ubuntu@ip:/tmp$ python gevent_as.py
Synchronous:
1.1s
Asynchronous:
0.057s
</snippet></ROW><ROW><id>13533115</id><snippet>a = bar(5)
</snippet></ROW><ROW><id>13533115</id><snippet>class GroupedAttribute(object):
    def __init__(self, group, obj):
        self.group = group
        self.obj = obj
    def __get__(self, obj, owner):
        return self.obj
    def __set__(self, obj, value):
        self.obj = value
</snippet></ROW><ROW><id>13533115</id><snippet>class GroupedAttribute(object):
    def __init__(self, group, obj):
        self.group = group
        self.obj = obj
    def __get__(self, obj, owner):
        return self.obj
    def __set__(self, obj, value):
        self.obj = value

class AttributeGroup(object):
    def __call__(self, obj):
        return GroupedAttribute(self, obj)
    def __get__(self, obj, owner):
        return BoundAttributeGroup(self, obj, owner)

class BoundAttributeGroup(object):
    def __init__(self, group, obj, owner):
        self.group = group
        self.obj = obj
        self.owner = owner
    def __dir__(self):
        items = dir(self.owner if self.obj is None else self.obj)
        return [item for item in items if
                getattr(self.owner.__dict__.get(item, None),
                        'group', None) is self.group]
</snippet></ROW><ROW><id>13533115</id><snippet>class MyClass(object):
    bar = AttributeGroup()
    a = bar(5)
    b = bar("foo")
    c = False
dir(MyClass.bar)    # ['a', 'b']
</snippet></ROW><ROW><id>13533180</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse(source)
root = tree.getroot()
ET.tostring(root)
</snippet></ROW><ROW><id>13533180</id><snippet>source</snippet></ROW><ROW><id>13533180</id><snippet>ET.tostring(doc)</snippet></ROW><ROW><id>13533533</id><snippet>logmsg</snippet></ROW><ROW><id>13533533</id><snippet>    log_file.write(logmsg)
</snippet></ROW><ROW><id>13533533</id><snippet>logmsg</snippet></ROW><ROW><id>13533533</id><snippet>message</snippet></ROW><ROW><id>13533533</id><snippet>    log_file.write(message)
</snippet></ROW><ROW><id>13533755</id><snippet>import re
data = open('input.txt').read()
data = re.sub(r"    'Step([0-9]+)' =&gt;\s+{\s+action\s+=&gt; ", r"    '\1'     =&gt; ", data)
data = re.sub(r"',\s+pass\s+[^,]+,", "", data)
data = re.sub(r"',\s+accept_multi_match\s+[^,]+,", "", data)
data = re.sub(r"\n +#.*\n", "\n", data)
data = re.sub(r"',\s+fail\s+[^,]+,", "", data)
data = re.sub(r"',\s+matchtype\s+[^,]+,", "", data)
data = re.sub(r"',\s+inputstring\s+=&gt; '", ",", data)
data = re.sub(r"\s+matchstring\s+=&gt; '", ",", data)
data = re.sub(r"\n        },", "',", data)
open('output.txt', 'w').write(data)
</snippet></ROW><ROW><id>13533755</id><snippet>[settings]
email_to=people
special_websurf_processing=1
period_0_1_only=1
crc_recheck=0

[macro]
%::WebSurfRules =
    (
    '1'     =&gt; 'NAVIGATE,http://www.tda-sgft.com/TdaWeb/jsp/fondos/Fondos.tda',',
    '2'     =&gt; 'CLICK_REFERENCE,phHttpDest-&gt;\{\'FirstClick\'\}',
    '3'     =&gt; 'CLICK_REFERENCE,phHttpDest-&gt;\{\'SecondClick\'\}',',
    '4'     =&gt; 'CLICK_REFERENCE,phHttpDest-&gt;\{\'DealClick\'\}',
    '5'     =&gt; 'CLICK_REFERENCE,phHttpDest-&gt;\{\'LinkClick2\'\}',
    '6'     =&gt; 'CLICK_REFERENCE,phHttpDest-&gt;\{\'DocClick\'\}',',
    '7'     =&gt; 'CLICK_DOWNLOAD_OK',',
    );

...
</snippet></ROW><ROW><id>13533832</id><snippet>import mymodule</snippet></ROW><ROW><id>13533832</id><snippet>if __name__ == '__main__':
    ...
</snippet></ROW><ROW><id>13533832</id><snippet>python mymodule.py
</snippet></ROW><ROW><id>13533832</id><snippet>import</snippet></ROW><ROW><id>13533832</id><snippet>file2</snippet></ROW><ROW><id>13533832</id><snippet>import file2</snippet></ROW><ROW><id>13533832</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>13533832</id><snippet>file2.py</snippet></ROW><ROW><id>13533832</id><snippet>file2</snippet></ROW><ROW><id>13533863</id><snippet>sys.argv</snippet></ROW><ROW><id>13533863</id><snippet>-</snippet></ROW><ROW><id>13533863</id><snippet>args = [ '&lt;stdin&gt;:'+x[2:] if x.startswith('-:') else x for x in sys.argv[1:] ]
opt_struct = parser.parse_args(args)
</snippet></ROW><ROW><id>13533863</id><snippet>&lt;stdin&gt;</snippet></ROW><ROW><id>13533863</id><snippet>-</snippet></ROW><ROW><id>13533863</id><snippet>:</snippet></ROW><ROW><id>13533863</id><snippet>optparse</snippet></ROW><ROW><id>13533863</id><snippet>argparse</snippet></ROW><ROW><id>13533863</id><snippet>sys.argv</snippet></ROW><ROW><id>13534096</id><snippet>from flask import request
country_code = request.environ.get('GEOIP_COUNTRY_CODE')
</snippet></ROW><ROW><id>13534187</id><snippet>QMetaObject</snippet></ROW><ROW><id>13534187</id><snippet>m = QtGui.QFrame.staticMetaObject
m.enumerator(m.indexOfEnumerator('Shadow')).valueToKey(QtGui.QFrame.Sunken)
'Sunken'
</snippet></ROW><ROW><id>13534187</id><snippet>QPrinter</snippet></ROW><ROW><id>13534187</id><snippet>QPrinter</snippet></ROW><ROW><id>13534187</id><snippet>int</snippet></ROW><ROW><id>13534187</id><snippet>isinstance</snippet></ROW><ROW><id>13534187</id><snippet>page_sizes = dict((n, x) for x, n in vars(QtGui.QPrinter).items() if
                  isinstance(n, QtGui.QPrinter.PageSize))
page_sizes[QtGui.QPrinter.A4]
'A4'
</snippet></ROW><ROW><id>13534268</id><snippet>input[0]</snippet></ROW><ROW><id>13534298</id><snippet>def countdown(n):
    # counting down the recursive way! 
    if n &gt; 0:
        print n
        countdown(n-1)
    else:
        return
</snippet></ROW><ROW><id>13534298</id><snippet>countdown(10)</snippet></ROW><ROW><id>13534298</id><snippet>10, 9, 8,.., 2, 1</snippet></ROW><ROW><id>13534298</id><snippet>countdown</snippet></ROW><ROW><id>13534298</id><snippet>n</snippet></ROW><ROW><id>13534298</id><snippet>n-1</snippet></ROW><ROW><id>13534298</id><snippet>n=0</snippet></ROW><ROW><id>13534298</id><snippet>recursive</snippet></ROW><ROW><id>13534298</id><snippet>def recursive_print(dic):

    if len(dic) &gt; 0:                  # If dictionaries in library &gt; 0 
        print dic.keys()[0]           # Print the key i.e Earth
        print dic[dic.keys()[0]]      # Print the dictionary value for i.e Earth
        dic.popitem()                 # Remove the Earth dictionary from library
        recursive_print(dic)          # Recursive call 
    else:
        return                        # Printed all, return up the stack.


planets = data(file)
recursive_print(planets)
</snippet></ROW><ROW><id>13534298</id><snippet>quickdraw</snippet></ROW><ROW><id>13534298</id><snippet>quickdraw</snippet></ROW><ROW><id>13534298</id><snippet>Orbital Radius</snippet></ROW><ROW><id>13534298</id><snippet>max([planet[key]['Orbital Radius'] for key in planet])

&gt;&gt;&gt; 8595000

scale = gridsize/max([planet[key]['Orbital Radius'] for key in planet])
</snippet></ROW><ROW><id>13534410</id><snippet>memcache</snippet></ROW><ROW><id>13534410</id><snippet>pickle</snippet></ROW><ROW><id>13534410</id><snippet>cPickle</snippet></ROW><ROW><id>13534410</id><snippet>add</snippet></ROW><ROW><id>13534410</id><snippet>_set_with_policy</snippet></ROW><ROW><id>13534410</id><snippet>_set_multi_async_with_policy</snippet></ROW><ROW><id>13534410</id><snippet>_set_multi_async_with_policy</snippet></ROW><ROW><id>13534410</id><snippet>mapping</snippet></ROW><ROW><id>13534410</id><snippet>for key, value in mapping.iteritems():
  server_key = _key_string(key, key_prefix, user_key)
  stored_value, flags = _validate_encode_value(value, self._do_pickle)
</snippet></ROW><ROW><id>13534410</id><snippet>_validate_encode_value</snippet></ROW><ROW><id>13534410</id><snippet>int</snippet></ROW><ROW><id>13534410</id><snippet>bool</snippet></ROW><ROW><id>13534410</id><snippet>str</snippet></ROW><ROW><id>13534410</id><snippet>else:
  stored_value = do_pickle(value)
  flags |= TYPE_PICKLED
</snippet></ROW><ROW><id>13534410</id><snippet>content = list(all_content.run(batch_size=5, limit=5))
</snippet></ROW><ROW><id>13534410</id><snippet>Batcher</snippet></ROW><ROW><id>13534410</id><snippet>  def __getstate__(self):
    raise pickle.PicklingError(
        'Pickling of datastore_query.Batch is unsupported.')
</snippet></ROW><ROW><id>13534410</id><snippet>datastore_query</snippet></ROW><ROW><id>13534410</id><snippet>PicklingError</snippet></ROW><ROW><id>13534410</id><snippet>__getstate__</snippet></ROW><ROW><id>13534410</id><snippet>__getstate__</snippet></ROW><ROW><id>13534410</id><snippet>__setstate__</snippet></ROW><ROW><id>13534513</id><snippet>index</snippet></ROW><ROW><id>13534513</id><snippet>try-except</snippet></ROW><ROW><id>13534513</id><snippet>lst = ["fairly","blue","car"]
x = "fairly"
try:
   print lst.index(x)
except ValueError:
   print "{0} not in list".format(x)
</snippet></ROW><ROW><id>13534633</id><snippet>TypeError</snippet></ROW><ROW><id>13534633</id><snippet>ValueError</snippet></ROW><ROW><id>13534658</id><snippet>set $country $cookie_country;

if ($country == '') {
    set $country $geoip_country_code;
    add_header Set-Cookie country=$geoip_country_code; 
}

uwsgi_param GEOIP_COUNTRY $country;
</snippet></ROW><ROW><id>13534692</id><snippet>CREATE_NEW_CONSOLE</snippet></ROW><ROW><id>13534692</id><snippet>import subprocess

p = subprocess.Popen('a.bat', creationflags=subprocess.CREATE_NEW_CONSOLE)
</snippet></ROW><ROW><id>13534692</id><snippet>shell=True</snippet></ROW><ROW><id>13534692</id><snippet>shell=True</snippet></ROW><ROW><id>13534692</id><snippet>CREATE_NEW_CONSOLE</snippet></ROW><ROW><id>13534692</id><snippet>COMMAND.COM</snippet></ROW><ROW><id>13534709</id><snippet>from five import grok
from plone.directives import form
from plone.directives import dexterity

class BusinessTransactionFormAddForm(dexterity.AddForm):
    grok.name('ebpls.app.businesstransactionform')
    form.wrap(False)
</snippet></ROW><ROW><id>13534717</id><snippet>inch</snippet></ROW><ROW><id>13534717</id><snippet>float.__new__()</snippet></ROW><ROW><id>13534717</id><snippet>__new__(cls)</snippet></ROW><ROW><id>13534717</id><snippet>__new__</snippet></ROW><ROW><id>13534717</id><snippet>super()</snippet></ROW><ROW><id>13534717</id><snippet>def __new__(cls, arg=0.0):
    return super(inch, cls).__new__(cls, arg*0.0254)
</snippet></ROW><ROW><id>13534717</id><snippet>__new__</snippet></ROW><ROW><id>13534717</id><snippet>inch</snippet></ROW><ROW><id>13534717</id><snippet>float.__new__</snippet></ROW><ROW><id>13534717</id><snippet>__new__(cls, ...)</snippet></ROW><ROW><id>13534717</id><snippet>cls</snippet></ROW><ROW><id>13534717</id><snippet>float.__new__(cls, value)</snippet></ROW><ROW><id>13534717</id><snippet>cls</snippet></ROW><ROW><id>13534717</id><snippet>value</snippet></ROW><ROW><id>13534717</id><snippet>float.__new__(...)</snippet></ROW><ROW><id>13534717</id><snippet>float</snippet></ROW><ROW><id>13534717</id><snippet>inch()</snippet></ROW><ROW><id>13534717</id><snippet>float()</snippet></ROW><ROW><id>13534717</id><snippet>float()</snippet></ROW><ROW><id>13534717</id><snippet>float.__new__()</snippet></ROW><ROW><id>13534717</id><snippet>inch</snippet></ROW><ROW><id>13534717</id><snippet>inch()</snippet></ROW><ROW><id>13534817</id><snippet>In [167]: foo[rsum&lt;165][:,csum&gt;80]
Out[167]: 
array([[ 6,  7,  8,  9, 10],
       [12, 14, 16, 18, 20]])
</snippet></ROW><ROW><id>13534817</id><snippet>In [168]: %timeit foo[rsum&lt;165][:,csum&gt;80]
100000 loops, best of 3: 9.66 us per loop

In [170]: %timeit foo[np.ix_(rsum&lt;165, csum&gt;80)]
100000 loops, best of 3: 16.4 us per loop
</snippet></ROW><ROW><id>13534817</id><snippet>foo</snippet></ROW><ROW><id>13534817</id><snippet>In [31]: np.multiply.outer(range(1,6),range(1,11))
Out[31]: 
array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20],
       [ 3,  6,  9, 12, 15, 18, 21, 24, 27, 30],
       [ 4,  8, 12, 16, 20, 24, 28, 32, 36, 40],
       [ 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]])

In [32]: %timeit np.multiply.outer(range(1,6),range(1,11))
100000 loops, best of 3: 14.2 us per loop

In [33]: %timeit np.array([[(i+1)*(j+1) for i in range(10)] for j in range(5)])
10000 loops, best of 3: 26.6 us per loop
</snippet></ROW><ROW><id>13534891</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
data_tuples = [
    ('4084036', '1', '2006-12-22 22:46:35'),
    ('4084938', '1', '2006-12-23 16:19:13'),
    ('4084938', '2', '2006-12-23 16:20:23'),
    ('4084939', '1', '2006-12-23 16:29:14'),
    ('4084954', '1', '2006-12-23 16:28:28'),
    ('4250653', '1', '2007-02-12 21:58:53'),
    ('4250657', '1', '2007-03-12 21:58:53')]
datatypes = [('col1', 'i4'), ('col2', 'i4'), ('date', 'S20')]
data = np.array(data_tuples, dtype=datatypes)
col1 = data['col1']
dates = mdates.num2date(mdates.datestr2num(data['date']))
fig, ax1 = plt.subplots()
ax1.bar(dates, col1)
fig.autofmt_xdate()
</snippet></ROW><ROW><id>13534891</id><snippet>data_tuples = []
for row in cursor:
    data_tuples.append(row)
</snippet></ROW><ROW><id>13534941</id><snippet>list.remove</snippet></ROW><ROW><id>13534941</id><snippet>&gt;&gt;&gt; class Ball(object): pass
... 
&gt;&gt;&gt; balls = [ Ball() for _ in range(10) ]
&gt;&gt;&gt; balls
[&lt;__main__.Ball object at 0xe5350&gt;, &lt;__main__.Ball object at 0xe52b0&gt;, &lt;__main__.Ball object at 0xe5250&gt;, &lt;__main__.Ball object at 0xe5370&gt;, &lt;__main__.Ball object at 0xe5390&gt;, &lt;__main__.Ball object at 0xe53b0&gt;, &lt;__main__.Ball object at 0xe53d0&gt;, &lt;__main__.Ball object at 0xe5410&gt;, &lt;__main__.Ball object at 0xe5430&gt;, &lt;__main__.Ball object at 0xe5450&gt;]
&gt;&gt;&gt; balls.remove(balls[4])
&gt;&gt;&gt; balls
[&lt;__main__.Ball object at 0xe5350&gt;, &lt;__main__.Ball object at 0xe52b0&gt;, &lt;__main__.Ball object at 0xe5250&gt;, &lt;__main__.Ball object at 0xe5370&gt;, &lt;__main__.Ball object at 0xe53b0&gt;, &lt;__main__.Ball object at 0xe53d0&gt;, &lt;__main__.Ball object at 0xe5410&gt;, &lt;__main__.Ball object at 0xe5430&gt;, &lt;__main__.Ball object at 0xe5450&gt;]
&gt;&gt;&gt; len(balls)
9
</snippet></ROW><ROW><id>13534941</id><snippet>Ball</snippet></ROW><ROW><id>13534941</id><snippet>to_remove = [x for x in balls if x.times_bounced &gt; N]
for x in to_remove:
    balls.remove(x)
</snippet></ROW><ROW><id>13534941</id><snippet>balls = [ x for x in balls if x.times_bounced &lt;= N ]
</snippet></ROW><ROW><id>13534941</id><snippet>balls[:] = [ x for x in balls if x.times_bounced &lt;= N ]
</snippet></ROW><ROW><id>13535110</id><snippet>gmpy2.sqrt()</snippet></ROW><ROW><id>13535308</id><snippet>line = 'This is a group of words that include #this and @that but not ME ME'

words = line.split()

result = []

pos = 0
try:
    while True:
        if words[pos].startswith(('#', '@')):
            result.append(words[pos])
            pos += 1
        elif words[pos] == 'ME':
            result.append('ME ' + words[pos + 1])
            pos += 2
        else:
            pos += 1
except IndexError:
    pass

print result
</snippet></ROW><ROW><id>13535344</id><snippet>ftp.cwd(..)</snippet></ROW><ROW><id>13535552</id><snippet>for i, j in dict.iteritems():
    newNumber = phoneNum.replace(i, j)
    print "Number: ",newNumber
</snippet></ROW><ROW><id>13535552</id><snippet>for i, j in dict.iteritems():
    phoneNum = phoneNum.replace(i, j)
    print "Number: ",newNumber
</snippet></ROW><ROW><id>13535552</id><snippet>newNumber</snippet></ROW><ROW><id>13535552</id><snippet>newNumber</snippet></ROW><ROW><id>13535552</id><snippet>phoneNum</snippet></ROW><ROW><id>13535552</id><snippet>phoneNum</snippet></ROW><ROW><id>13535555</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13535555</id><snippet>lst = [(1, 'a'), (2, 'b'), (2, 'c'), (3, 'd'), (3, 'e')]
lst.sort(key=lambda x: x[0])  #Only necessary if your list isn't sorted already.
new_lst = [list(v) for k,v in itertools.groupby(lst,key=lambda x:x[0])]
</snippet></ROW><ROW><id>13535555</id><snippet>operator.itemgetter(0)</snippet></ROW><ROW><id>13535555</id><snippet>lambda</snippet></ROW><ROW><id>13535555</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; lst = [(1, 'a'), (2, 'b'), (2, 'c'), (3, 'd'), (3, 'e')]
&gt;&gt;&gt; lst.sort(key=lambda x: x[0])
&gt;&gt;&gt; new_lst = [list(v) for k,v in itertools.groupby(lst,key=lambda x:x[0])]
&gt;&gt;&gt; new_lst
[[(1, 'a')], [(2, 'b'), (2, 'c')], [(3, 'd'), (3, 'e')]]
</snippet></ROW><ROW><id>13535718</id><snippet>ftp.microsoft.com</snippet></ROW><ROW><id>13535776</id><snippet>component.Component()</snippet></ROW><ROW><id>13535776</id><snippet>Component</snippet></ROW><ROW><id>13535776</id><snippet>component.py#component.Component</snippet></ROW><ROW><id>13535785</id><snippet>if re.match(r'your_regex', your_string):
    return your_string
else:
    return 'failed'
</snippet></ROW><ROW><id>13535785</id><snippet>re.match</snippet></ROW><ROW><id>13535785</id><snippet>[]</snippet></ROW><ROW><id>13535785</id><snippet>{}</snippet></ROW><ROW><id>13535785</id><snippet>()</snippet></ROW><ROW><id>13535785</id><snippet>0</snippet></ROW><ROW><id>13535785</id><snippet>''</snippet></ROW><ROW><id>13535785</id><snippet>None</snippet></ROW><ROW><id>13535785</id><snippet>False</snippet></ROW><ROW><id>13535785</id><snippet>True</snippet></ROW><ROW><id>13535951</id><snippet>obj[key] = val</snippet></ROW><ROW><id>13535951</id><snippet>float</snippet></ROW><ROW><id>13535951</id><snippet>regular expression</snippet></ROW><ROW><id>13535951</id><snippet>if re.match('^[0-9.]+$',val):  # If the value only contains digits or a . 
    obj[key] = float(val)      # Store it as a float not a string
else: 
    obj[key] = val             # Else store as string 
</snippet></ROW><ROW><id>13535951</id><snippet>re</snippet></ROW><ROW><id>13535951</id><snippet>import re</snippet></ROW><ROW><id>13535951</id><snippet>0's</snippet></ROW><ROW><id>13535951</id><snippet>1's</snippet></ROW><ROW><id>13536070</id><snippet>adodbapi.connect(r'Provider=SQLOLEDB;Data Source=COMPUTERNAME\SQLEXPRESS;Initial Catalog=Test;User ID=COMPUTERNAME\USERNAME; Password=PASSWORD;Integrated Security=SSPI')
</snippet></ROW><ROW><id>13536125</id><snippet># This assumes coordinates refer to the top-left of the desired viewport

# Since this is not the case, first invert the object's y to make it so:
object_y = room_size[1] - object.y

camera.x = max(0, object.x - window.size[0] / 2)
camera.y = max(0, object_y - window.size[1] / 2)

if camera.x + window.size[0] &gt; room_size[0]:
    camera.x = room_size[0]  - window.size[0]
if camera.y + window.size[1] &gt; room_size[1]:
    camera.y = room_size[1]  - window.size[1]

# Again, since you're using bottom-left coordinate system, invert the y:
camera.y = room_size[1] - camera.y
</snippet></ROW><ROW><id>13536241</id><snippet>dict</snippet></ROW><ROW><id>13536241</id><snippet>id</snippet></ROW><ROW><id>13536241</id><snippet>dct[id(lst)] = lst
</snippet></ROW><ROW><id>13536241</id><snippet>id(lst) in dct</snippet></ROW><ROW><id>13536312</id><snippet>In [186]: i = 2; n = 30; range(i**2, n+1, i)
Out[186]: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
</snippet></ROW><ROW><id>13536332</id><snippet>8bit</snippet></ROW><ROW><id>13536332</id><snippet>binary</snippet></ROW><ROW><id>13536332</id><snippet>email.utils.encode_rfc2231</snippet></ROW><ROW><id>13536446</id><snippet>def deterministicMode(selection,position,time,energy):
    random.seed()  # &lt;-- Add this line right here

    if selection=='w' or selection =='W':
        energy= energy
        position= position+1
        time=time+
</snippet></ROW><ROW><id>13536468</id><snippet>%edit</snippet></ROW><ROW><id>13536468</id><snippet>In [1]: def foo(x):
   ...:     print x
   ...:     
In [2]: %edit _i1
</snippet></ROW><ROW><id>13536480</id><snippet>&gt;&gt;&gt; my_list = [[(1, 'a')], [(2, 'b'), (2, 'c')], [(3, 'd'), (3, 'e')]]
&gt;&gt;&gt; 
&gt;&gt;&gt; def search(val):
        for index, inner_list in enumerate(my_list):
            for nested_tuple in inner_list:
                if val in nested_tuple:
                    return index


&gt;&gt;&gt; search('a')
0
&gt;&gt;&gt; search('c')
1
&gt;&gt;&gt; search('e')
2
</snippet></ROW><ROW><id>13536665</id><snippet>arr + (arr == 0)
</snippet></ROW><ROW><id>13536722</id><snippet>list(v)</snippet></ROW><ROW><id>13536912</id><snippet>PyCFunction_New</snippet></ROW><ROW><id>13536912</id><snippet>#include &lt;python.h&gt;

static PyObject *my_callback(PyObject *ignore, PyObject *args)
{
  /* ... */
}

static struct PyMethodDef callback_descr = {
  "function_name",
  (PyCFunction) my_callback,
  METH_VARARGS,                 /* or METH_O, METH_NOARGS, etc. */
  NULL
};

static PyObject *py_callback;

...
py_callback = PyCFunction_New(&amp;callback_descr, NULL);
</snippet></ROW><ROW><id>13536912</id><snippet>c_to_python</snippet></ROW><ROW><id>13536912</id><snippet>tp_call</snippet></ROW><ROW><id>13536912</id><snippet>typedef struct {
  PyObject_HEAD
  static PyObject (*callback)(PyObject *, PyObject *);
} CallbackObject;

static PyObject *
callback_call(CallbackObject *self, PyObject *args, PyObject *kwds)
{
  return self-&gt;callback(args, kwds);
}

static PyTypeObject CallbackType = {
    PyObject_HEAD_INIT(NULL)
    0,                          /*ob_size*/
    "Callback",                 /*tp_name*/
    sizeof(CallbackObject),     /*tp_basicsize*/
    0,                          /*tp_itemsize*/
    0,                          /*tp_dealloc*/
    0,                          /*tp_print*/
    0,                          /*tp_getattr*/
    0,                          /*tp_setattr*/
    0,                          /*tp_compare*/
    0,                          /*tp_repr*/
    0,                          /*tp_as_number*/
    0,                          /*tp_as_sequence*/
    0,                          /*tp_as_mapping*/
    0,                          /*tp_hash */
    (ternaryfunc) callback_call, /*tp_call*/
    0,                          /*tp_str*/
    0,                          /*tp_getattro*/
    0,                          /*tp_setattro*/
    0,                          /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT,         /*tp_flags*/
};

PyObject *
c_to_python(PyObject (*callback)(PyObject *, PyObject *))
{
  CallbackObject *pycallback = PyObject_New(CallbackObject, &amp;CallbackType);
  if (pycallback)
    pycallback-&gt;callback = callback;
  return pycallback;
}
</snippet></ROW><ROW><id>13536912</id><snippet>user_data</snippet></ROW><ROW><id>13536912</id><snippet>CallbackObject</snippet></ROW><ROW><id>13536914</id><snippet>using</snippet></ROW><ROW><id>13536914</id><snippet>class A
{
    public:
        void func(int a);
        virtual void func(int a,int b);
};

class  B : public A
{
    public:
        //using A::func;
        virtual void func(int a,int b);
};
</snippet></ROW><ROW><id>13536914</id><snippet>b = B()
b.func(1)    # failed
b.func(1,2)
</snippet></ROW><ROW><id>13536914</id><snippet>using</snippet></ROW><ROW><id>13536914</id><snippet>using</snippet></ROW><ROW><id>13537053</id><snippet>'(?![spuz(ih)])[a-z]'
</snippet></ROW><ROW><id>13537053</id><snippet>'(?![spuz]|ih)[a-z]'
</snippet></ROW><ROW><id>13537053</id><snippet>'^[a-z]*(?&lt;![a-z][spuz]|ih)s$'
</snippet></ROW><ROW><id>13537053</id><snippet>'^[a-z]*(?&lt;![spuz])(?&lt;!ih)s$'
</snippet></ROW><ROW><id>13537321</id><snippet>return (reverse('tags',[str(self.slug)]) 
</snippet></ROW><ROW><id>13537321</id><snippet>return (reverse('tags',[str(self.slug)]))
</snippet></ROW><ROW><id>13537328</id><snippet>re.search</snippet></ROW><ROW><id>13537328</id><snippet>re.findall</snippet></ROW><ROW><id>13537328</id><snippet>re.finditer</snippet></ROW><ROW><id>13537484</id><snippet>itertools</snippet></ROW><ROW><id>13537484</id><snippet>from itertools import product
</snippet></ROW><ROW><id>13537484</id><snippet>product</snippet></ROW><ROW><id>13537484</id><snippet>itertools</snippet></ROW><ROW><id>13537484</id><snippet>import itertools
</snippet></ROW><ROW><id>13537484</id><snippet>itertools</snippet></ROW><ROW><id>13537484</id><snippet>itertools</snippet></ROW><ROW><id>13537484</id><snippet>chain</snippet></ROW><ROW><id>13537484</id><snippet>itertools.chain</snippet></ROW><ROW><id>13537526</id><snippet>primes</snippet></ROW><ROW><id>13537526</id><snippet>import</snippet></ROW><ROW><id>13537526</id><snippet>p</snippet></ROW><ROW><id>13537526</id><snippet>primes_dict</snippet></ROW><ROW><id>13537526</id><snippet>p.primes_dict</snippet></ROW><ROW><id>13537526</id><snippet>from primes import primes_dict
</snippet></ROW><ROW><id>13537587</id><snippet>range</snippet></ROW><ROW><id>13537587</id><snippet>xrange</snippet></ROW><ROW><id>13537587</id><snippet>map</snippet></ROW><ROW><id>13537587</id><snippet>xrange</snippet></ROW><ROW><id>13537587</id><snippet>xrange</snippet></ROW><ROW><id>13537587</id><snippet>range</snippet></ROW><ROW><id>13537587</id><snippet>range</snippet></ROW><ROW><id>13537587</id><snippet>[i for i in range(10)]</snippet></ROW><ROW><id>13537587</id><snippet>0</snippet></ROW><ROW><id>13537614</id><snippet>dik = dict(zip(dato,otro))
</snippet></ROW><ROW><id>13537614</id><snippet>dik</snippet></ROW><ROW><id>13537614</id><snippet>dik.update(zip(dato,otro))
</snippet></ROW><ROW><id>13537614</id><snippet>zip</snippet></ROW><ROW><id>13537614</id><snippet>a = [ 1 , 2 , 3 , 4 ]
b = ['a','b','c','d']
zip(a,b)   #=&gt;   [(1,'a'),(2,'b'),(3,'c'),(4,'d')] #(This is actually a zip-object on python 3.x)
</snippet></ROW><ROW><id>13537614</id><snippet>zip</snippet></ROW><ROW><id>13537614</id><snippet>zip(a,b,c)</snippet></ROW><ROW><id>13537614</id><snippet>dict</snippet></ROW><ROW><id>13537614</id><snippet>key-value</snippet></ROW><ROW><id>13537614</id><snippet>tuple</snippet></ROW><ROW><id>13537614</id><snippet>key</snippet></ROW><ROW><id>13537614</id><snippet>value</snippet></ROW><ROW><id>13537692</id><snippet>from flask import Flask, Blueprint

app = Flask(__name__)
bp = Blueprint('main', __name__)

@bp.route('/')
def hello(lang):
    return 'Hello ' + lang + '!'

app.register_blueprint(bp, url_defaults={'lang': 'en'})
app.register_blueprint(bp, url_prefix='/&lt;lang&gt;')

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>13537692</id><snippet>lang</snippet></ROW><ROW><id>13537813</id><snippet>new_array = np.zeros((4, 12, 3))
new_array[:, :8, :] = old_array
</snippet></ROW><ROW><id>13537871</id><snippet>__func__</snippet></ROW><ROW><id>13537871</id><snippet>&gt;&gt;&gt; A.foo
&lt;unbound method A.foo&gt;
&gt;&gt;&gt; A.foo.__func__
&lt;function foo at 0x00BC5F70&gt;
&gt;&gt;&gt; class B(object):
...   foo = A.foo.__func__
...
&gt;&gt;&gt; B().foo()
"blah"
</snippet></ROW><ROW><id>13537893</id><snippet>file_to_words</snippet></ROW><ROW><id>13537893</id><snippet>Class</snippet></ROW><ROW><id>13537893</id><snippet>file_to_words</snippet></ROW><ROW><id>13537893</id><snippet>def</snippet></ROW><ROW><id>13537906</id><snippet>line</snippet></ROW><ROW><id>13537906</id><snippet>line = 'http://www.example.com | div, id=doctext'
url, args = line.split(' | ', 1)
args = args.split(',')
name = args[0]
params = dict([param.strip().split('=') for param in args[1:]])
print(name)
print(params)
</snippet></ROW><ROW><id>13537906</id><snippet>div
{'id': 'doctext'}
</snippet></ROW><ROW><id>13537906</id><snippet>soup.find</snippet></ROW><ROW><id>13537906</id><snippet>html = urllib2.urlopen(url).read()
soup = BeautifulSoup(html)
html_section = str(soup.find(name, **params))
</snippet></ROW><ROW><id>13537906</id><snippet>doctext</snippet></ROW><ROW><id>13537906</id><snippet>args = args.split(',')
</snippet></ROW><ROW><id>13537906</id><snippet>text</snippet></ROW><ROW><id>13537906</id><snippet>line</snippet></ROW><ROW><id>13537906</id><snippet>'http://www.example.com | ["div", {"id": "doctext"}]'
</snippet></ROW><ROW><id>13537906</id><snippet>import json
line = 'http://www.example.com | ["div", {"id": "doctext"}]'
url, arguments = line.split('|', 1)
url = url.strip()
arguments = json.loads(arguments)
args = []
params = {}
for item in arguments:
    if isinstance(item, dict):
        params = item
    else:
        args.append(item)

print(args)
print(params)
</snippet></ROW><ROW><id>13537906</id><snippet>[u'div']
{u'id': u'doctext'}
</snippet></ROW><ROW><id>13537906</id><snippet>soup.find</snippet></ROW><ROW><id>13537906</id><snippet>html_section = str(soup.find(*args, **params))
</snippet></ROW><ROW><id>13537906</id><snippet>name</snippet></ROW><ROW><id>13537906</id><snippet>attrs</snippet></ROW><ROW><id>13537906</id><snippet>recursive</snippet></ROW><ROW><id>13537906</id><snippet>text</snippet></ROW><ROW><id>13537906</id><snippet>name</snippet></ROW><ROW><id>13537943</id><snippet># matrices.py
# This optional case study solves each of the following problems.  Each
# solution uses the solutions to the preceding problems.

# 1) Multiply two matrices
# 2) Invert a matrix
# 3) Solve a system of linear equations
# 4) Fit an exact polynomial to a list of points
# 5) Find the coefficients of the polynomial for a power sum

# This last problem needs a little explaining.  Consider this power sum:
# 1 + 2 + ... + n.  We know this equals n(n+1)/2.  We can represent this
# quadratic function by its coefficients alone, as [1/2, 1/2, 0] (ignoring
# integer division in this explanation).

# Now, the sum of the squares is: 1**2 + 2**2 + ... + n**2.  This is a cubic
# equation.  It happens to be [1/3, 1/2, 1/6, 0].  That is:
# 1**2 + ... + n**2 = (1/3)n**3 + (1/2)n**2 + (1/6)n

# In fact, for positive integer k, 1**k + ... + n**k is a (k+1)-degree
# polynomial.  The problem we are solving is to write a function which takes
# this number k, and returns the coefficients of that polynomial.

# Also, our approach for matrix multiplication needs some slight explaining.
# We basically use Gauss-Jordan Elimination to get reduced row echelon form
# while applying the same elementary row operations to an identity matrix -- in
# so doing, the identity matrix is transformed into the inverse of the original
# matrix.  Amazing!

import copy
from fractions import Fraction

def copyMatrix(m):
    return copy.deepcopy(m)

def makeIdentity(n):
    result = make2dList(n,n)
    for i in xrange(n):
        result[i][i] = Fraction(1, 1)
    return result

def testMakeIdentity():
    print "Testing makeIdentity...",
    i3 = [[1,0,0],[0,1,0],[0,0,1]]
    assert(i3 == makeIdentity(3))
    print "Passed!"

def multiplyMatrices(a, b):
    # confirm dimensions
    aRows = len(a)
    aCols = len(a[0])
    bRows = len(b)
    bCols = len(b[0])
    assert(aCols == bRows) # belongs in a contract 
    rows = aRows
    cols = bCols
    # create the result matrix c = a*b
    c = make2dList(rows, cols)
    # now find each value in turn in the result matrix
    for row in xrange(rows):
        for col in xrange(cols):
            dotProduct = Fraction(0, 1)
            for i in xrange(aCols):
                dotProduct += a[row][i]*b[i][col]
            c[row][col] = dotProduct
    return c

def testMultiplyMatrices():
    print "Testing multiplyMatrices...",
    a = [ [ 1, 2, 3],
          [ 4, 5, 6 ] ]
    b = [ [ 0, 3],
          [ 1, 4],
          [ 2, 5] ]
    c = [ [ 8, 26],
          [17, 62 ] ]
    observedC = multiplyMatrices(a, b)
    assert(observedC == c)
    print "Passed!"

def multiplyRowOfSquareMatrix(m, row, k):
    n = len(m)
    rowOperator = makeIdentity(n)
    rowOperator[row][row] = k
    return multiplyMatrices(rowOperator, m)

def testMultiplyRowOfSquareMatrix():
    print "Testing multiplyRowOfSquareMatrix...",
    a = [ [ 1, 2 ],
          [ 4, 5  ] ]
    assert(multiplyRowOfSquareMatrix(a, 0, 5) == [[5, 10], [4, 5]])
    assert(multiplyRowOfSquareMatrix(a, 1, 6) == [[1, 2], [24, 30]])
    print "Passed!"

def addMultipleOfRowOfSquareMatrix(m, sourceRow, k, targetRow):
    # add k * sourceRow to targetRow of matrix m
    n = len(m)
    rowOperator = makeIdentity(n)
    rowOperator[targetRow][sourceRow] = k
    return multiplyMatrices(rowOperator, m)

def testAddMultipleOfRowOfSquareMatrix():
    print "Testing addMultipleOfRowOfSquareMatrix...",
    a = [ [ 1, 2 ],
          [ 4, 5  ] ]
    assert(addMultipleOfRowOfSquareMatrix(a, 0, 5, 1) == [[1, 2], [9, 15]])
    assert(addMultipleOfRowOfSquareMatrix(a, 1, 6, 0) == [[25, 32], [4, 5]])
    print "Passed!"

def invertMatrix(m):
    n = len(m)
    assert(len(m) == len(m[0]))
    inverse = makeIdentity(n) # this will BECOME the inverse eventually
    for col in xrange(n):
        # 1. make the diagonal contain a 1
        diagonalRow = col
        assert(m[diagonalRow][col] != 0) # @TODO: actually, we could swap rows
                                         # here, or if no other row has a 0 in
                                         # this column, then we have a singular
                                         # (non-invertible) matrix.  Let's not
                                         # worry about that for now.  :-)
        k = Fraction(1,m[diagonalRow][col])
        m = multiplyRowOfSquareMatrix(m, diagonalRow, k)
        inverse = multiplyRowOfSquareMatrix(inverse, diagonalRow, k)
        # 2. use the 1 on the diagonal to make everything else
        #    in this column a 0
        sourceRow = diagonalRow
        for targetRow in xrange(n):
            if (sourceRow != targetRow):
                k = -m[targetRow][col]
                m = addMultipleOfRowOfSquareMatrix(m, sourceRow, k, targetRow)
                inverse = addMultipleOfRowOfSquareMatrix(inverse, sourceRow,
                                                         k, targetRow)
    # that's it!
    return inverse

def testInvertMatrix():
    print "Testing invertMatrix...",
    a = [ [ 1, 2 ], [ 4, 5  ] ]
    aInverse = invertMatrix(a)
    identity = makeIdentity(len(a))
    assert (almostEqualMatrices(identity, multiplyMatrices(a, aInverse)))
    a = [ [ 1, 2, 3], [ 2, 5, 7 ], [3, 4, 8 ] ]
    aInverse = invertMatrix(a)
    identity = makeIdentity(len(a))
    assert (almostEqualMatrices(identity, multiplyMatrices(a, aInverse)))
    print "Passed!"

def solveSystemOfEquations(A, b):
    return multiplyMatrices(invertMatrix(A), b)

def testSolveSystemOfEquations():
    print "Testing solveSystemOfEquations...",
    # 3x + 2y - 2z = 10
    # 2x - 4y + 8z =  0
    # 4x + 4y - 7z = 13
    # x = 2, y = 3, z = 1
    A = [ [3,  2, -2],
          [2, -4,  8],
          [4,  4, -7] ]
    b = [ [ 10 ],
          [  0 ],
          [ 13 ] ]
    observedX = solveSystemOfEquations(A,b)
    expectedX = [ [ 2 ],
                  [ 3 ],
                  [ 1 ] ]
    assert(almostEqualMatrices(observedX, expectedX))
    print "Passed!"

def fitExactPolynomial(pointList):
    n = len(pointList)
    degree = n - 1
    # 1. make A
    A = make2dList(n,n)
    for row in xrange(n):
        for col in xrange(n):
            x = pointList[row][0]
            exponent = degree - col
            A[row][col] = x**exponent
    # 2. make b
    b = make2dList(n,1)
    for row in xrange(n):
        y = pointList[row][1]
        b[row][0] = y
    # use system solver to find solution
    return solveSystemOfEquations(A, b)

def testFitExactPolynomial():
    print "Testing fitPolynomialExactly...",
    def f(x): return 3*x**3 + 2*x**2 + 4*x + 1
    expected = [[3], [2], [4], [1]]
    pointList = [(1,f(1)), (2,f(2)), (5,f(5)), (-3,f(-3))]
    observed = fitExactPolynomial(pointList)
    assert(almostEqualMatrices(observed, expected))    
    print "Passed!"

def findCoefficientsOfPowerSum(k):
    # Assume f(n) = 1**k + ... + n**k
    # We argued by handwaving-ish-calculusy-stuff that f(n) is
    # a polynomial of degree (k+1)
    # We need (k+2) points to fit just such a polynomial
    pointList = []
    y = 0    
    for n in xrange(1,k+3):
        x = Fraction(n, 1)
        # y = 1**k + ... + n**k
        y += x**k
        pointList += [(x,y)]
    return fitExactPolynomial(pointList)

def testFindCoefficientsOfPowerSum():
    print "Testing findCoefficientsOfPowerSum..."
    # Not a formal test here, just printing the answers.
    # Check here for expected values:
    # http://mathworld.wolfram.com/PowerSum.html
    for k in xrange(10):
        print "k = %d:" % k,
        printMatrix(findCoefficientsOfPowerSum(k))
    print "Passed!"

def almostEqualMatrices(m1, m2):
    # verifies each element in the two matrices are almostEqual to each other
    # (and that the two matrices have the same dimensions).
    if (len(m1) != len(m2)): return False
    if (len(m1[0]) != len(m2[0])): return False
    for row in xrange(len(m1)):
        for col in xrange(len(m1[0])):
            if not almostEqual(m1[row][col], m2[row][col]):
                return False
    return True

def almostEqual(d1, d2):
    epsilon = 0.00001
    return abs(d1 - d2) &lt; epsilon

def make2dList(rows, cols):
    a=[]
    for row in xrange(rows): a += [[0]*cols]
    return a

def printMatrix(a):
    def valueStr(value):
        if (isinstance(value, Fraction)):
            (num, den) = (value.numerator, value.denominator)
            if ((num == 0) or (den == 1)): return str(num)
            else: return str(num) + "/" + str(den)
        else:
            return str(value)
    def maxItemLength(a):
        maxLen = 0
        rows = len(a)
        cols = len(a[0])
        for row in xrange(rows):
            for col in xrange(cols):
                maxLen = max(maxLen, len(valueStr(a[row][col])))
        return maxLen
    if (a == []):
        # So we don't crash accessing a[0]
        print []
        return
    rows = len(a)
    cols = len(a[0])
    fieldWidth = maxItemLength(a)
    print "[",
    for row in xrange(rows):
        if (row &gt; 0) and (len(a[row-1]) &gt; 1): print "\n  ",
        print "[",
        for col in xrange(cols):
            if (col &gt; 0): print ",",
            # The next 2 lines print a[row][col] with the given fieldWidth
            format = "%" + str(fieldWidth) + "s"
            print format % valueStr(a[row][col]),
        print "]",
    print "]"


def main():
    testMakeIdentity()
    testMultiplyMatrices()
    testMultiplyRowOfSquareMatrix()
    testAddMultipleOfRowOfSquareMatrix()
    testInvertMatrix()
    testSolveSystemOfEquations()
    testFitExactPolynomial()
    testFindCoefficientsOfPowerSum()

main()
</snippet></ROW><ROW><id>13537980</id><snippet>pip</snippet></ROW><ROW><id>13537980</id><snippet>distribute</snippet></ROW><ROW><id>13537980</id><snippet>pip</snippet></ROW><ROW><id>13537980</id><snippet>pip</snippet></ROW><ROW><id>13537980</id><snippet>requirements.txt</snippet></ROW><ROW><id>13537980</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>13537980</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>13537980</id><snippet>virtualenv</snippet></ROW><ROW><id>13538172</id><snippet>import hashlib
h = hashlib.sha512()

text = 'beruk makye'
text_compare = '3beruk makye'
text_compare_hash = h.update(text_compare)
text_compare_hash = h.hexdigest()

ids = [1,2,3]
texts = []
bool_text = []
bool_text_hash = []

for id in ids:
    texts.append(str(id) + text)

for i in texts:
    hash = hashlib.sha512(i).hexdigest()
    print i, hash, hash == text_compare_hash
</snippet></ROW><ROW><id>13538210</id><snippet>sum</snippet></ROW><ROW><id>13538210</id><snippet>&gt;&gt;&gt; x = [1,2,5]
&gt;&gt;&gt; y = [2,3,9]
&gt;&gt;&gt; sum(x+y)
22
</snippet></ROW><ROW><id>13538210</id><snippet>sum(x) + sum(y)
</snippet></ROW><ROW><id>13538210</id><snippet>sum(itertools.chain(x,y))
</snippet></ROW><ROW><id>13538210</id><snippet>sum</snippet></ROW><ROW><id>13538210</id><snippet>+</snippet></ROW><ROW><id>13538210</id><snippet>x+y
</snippet></ROW><ROW><id>13538210</id><snippet>[1,2,5,2,3,9]
</snippet></ROW><ROW><id>13538210</id><snippet>sum</snippet></ROW><ROW><id>13538210</id><snippet>&gt;&gt;&gt; lists = [x,y]
&gt;&gt;&gt; sum(sum(lst) for lst in lists)
22
</snippet></ROW><ROW><id>13538210</id><snippet>lists</snippet></ROW><ROW><id>13538210</id><snippet>sum(itertools.chain.from_iterable(lists))
</snippet></ROW><ROW><id>13538309</id><snippet>a = 'foo'
b = a
print b is a  #True -- They *are the same object*
</snippet></ROW><ROW><id>13538309</id><snippet>b = 'bar'
b is a  #False -- they're not longer the same object because you assigned a new object to b
</snippet></ROW><ROW><id>13538309</id><snippet>a = [1]
b = a
b[0] = 'foo'
print a  #What?? 'a' changed?
</snippet></ROW><ROW><id>13538309</id><snippet>a</snippet></ROW><ROW><id>13538309</id><snippet>b</snippet></ROW><ROW><id>13538309</id><snippet>a</snippet></ROW><ROW><id>13538309</id><snippet>b</snippet></ROW><ROW><id>13538309</id><snippet>a</snippet></ROW><ROW><id>13538433</id><snippet>__getattribute__</snippet></ROW><ROW><id>13538433</id><snippet>__getattribute__</snippet></ROW><ROW><id>13538433</id><snippet>object</snippet></ROW><ROW><id>13538433</id><snippet>self</snippet></ROW><ROW><id>13538433</id><snippet>type(self).__getattribute__(self, attr)</snippet></ROW><ROW><id>13538433</id><snippet>super(C, self).__getattribute__(attr)</snippet></ROW><ROW><id>13538433</id><snippet>object.__getattribute__()</snippet></ROW><ROW><id>13538433</id><snippet>__dict__</snippet></ROW><ROW><id>13538433</id><snippet>super()</snippet></ROW><ROW><id>13538433</id><snippet>Foo.bar()</snippet></ROW><ROW><id>13538433</id><snippet>super(Foo, self).bar</snippet></ROW><ROW><id>13538433</id><snippet>Foo.bar</snippet></ROW><ROW><id>13538446</id><snippet>globals</snippet></ROW><ROW><id>13538446</id><snippet>locals</snippet></ROW><ROW><id>13538446</id><snippet>a = 1
print globals()['a']  #1
</snippet></ROW><ROW><id>13538446</id><snippet>globals</snippet></ROW><ROW><id>13538446</id><snippet>locals</snippet></ROW><ROW><id>13538446</id><snippet>locals()['button1']</snippet></ROW><ROW><id>13538794</id><snippet>pid = os.fork()
if pid == 0:
    print("I am the child!")
else:
    print("I am the parent!")
</snippet></ROW><ROW><id>13538849</id><snippet> a,b,c = loadtxt("data.dat", usecols(0,1,2), unpack=True)
 a,b,c = (a,b,c) if usi.shape else ([a], [b], [c])
</snippet></ROW><ROW><id>13539256</id><snippet>&gt;&gt;&gt; myDict = {'Sun': {'Object': 'Sun', 'Satellites': 'Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune,Ceres,Pluto,Haumea,Makemake,Eris', 'Orbital Radius': '0', 'RootObject': 'Sun', 'Radius': '20890260'}, 'Moon': {'Object': 'Moon', 'Orbital Radius': '18128500', 'Period': '27.321582', 'Radius': '1737000.10'}, 'Earth': {'Object': 'Earth', 'Satellites': 'Moon', 'Orbital Radius': '77098290', 'Period': '365.256363004', 'Radius': '6371000.0'}}
&gt;&gt;&gt; for body in myDict:
...      myDict[body]['Radius'] = float(myDict[body]['Radius'])
...      myDict[body]['Orbital Radius'] = float(myDict[body]['Orbital Radius'])
&gt;&gt;&gt; myDict
13: {'Earth': {'Object': 'Earth',
           'Orbital Radius': 77098290.0,
           'Period': '365.256363004',
           'Radius': 6371000.0,
           'Satellites': 'Moon'},
 'Moon': {'Object': 'Moon',
          'Orbital Radius': 18128500.0,
          'Period': '27.321582',
          'Radius': 1737000.1},
 'Sun': {'Object': 'Sun',
         'Orbital Radius': 0.0,
         'Radius': 20890260.0,
         'RootObject': 'Sun',
         'Satellites': 'Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune,Ceres,Pluto,Haumea,Makemake,Eris'}}
</snippet></ROW><ROW><id>13539360</id><snippet>abc_</snippet></ROW><ROW><id>13539360</id><snippet>(abc_)?
</snippet></ROW><ROW><id>13539360</id><snippet>r'foo_(abc_)?bar'
</snippet></ROW><ROW><id>13539360</id><snippet>.rstrip('_')</snippet></ROW><ROW><id>13539360</id><snippet>r'foo_(?:(abc)_)?bar'
</snippet></ROW><ROW><id>13539360</id><snippet>[_|]</snippet></ROW><ROW><id>13539360</id><snippet>[_|]</snippet></ROW><ROW><id>13539788</id><snippet>startdate.replace()</snippet></ROW><ROW><id>13539788</id><snippet>timedelta</snippet></ROW><ROW><id>13539788</id><snippet>from datetime import date, timedelta
# Get input here...
while startdate &lt; date(int(endyear), int(endmonth), int(endday)):
    print startdate
    startdate += timedelta(days=1)
</snippet></ROW><ROW><id>13539961</id><snippet>stats = hotshot.stats.load("stones.prof")
stats.strip_dirs()
stats.sort_stats('time', 'calls')
readable_str = xprint_stats(stats, 20)

import pstats
def xprint_stats(self, *amount):
    x = ""
    for filename in self.files:
        x += " " + filename
    #if self.files: print &gt;&gt; self.stream
    # ?
    indent = ' ' * 8
    for func in self.top_level:
        #print &gt;&gt; self.stream, indent, xfunc_get_function_name(func)
        x += indent + pstats.func_get_function_name(func)

    #print &gt;&gt; self.stream, indent, self.total_calls, "function calls",
    x +=  indent + str(self.total_calls) + " function calls" + " "
    if self.total_calls != self.prim_calls:
        #print &gt;&gt; self.stream, "(%d primitive calls)" % self.prim_calls,
        x += "(%d primitive calls)" % self.prim_calls + " "
    #print &gt;&gt; self.stream, "in %.3f seconds" % self.total_tt
    #print &gt;&gt; self.stream
    x +=  "in %.3f seconds" % self.total_tt + "\n"
    #width, list = stats.get_print_list(amount)
    msg, width, list = xget_print_list(stats, amount)
    x += msg

    if list:
        #self.print_title()
        x += "\n" + '   ncalls  tottime  percall  cumtime  percall filename:lineno(function)'
        x += "\n"
        for func in list:
            #self.print_line(func)
            x +=  xprint_line(self, func) + "\n"
#        print &gt;&gt; self.stream
#        print &gt;&gt; self.stream
    #return self
    return x

def xprint_line(self, func):  
    x = ""
    cc, nc, tt, ct, callers = self.stats[func]
    c = str(nc)
    if nc != cc:
        c = c + '/' + str(cc)
#    print &gt;&gt; self.stream, c.rjust(9),
#    print &gt;&gt; self.stream, f8(tt),
    x +=  c.rjust(9) + " "
    x +=  pstats.f8(tt) + " "
    if nc == 0:
        #print &gt;&gt; self.stream, ' '*8,
       x +=  ' '*8 
    else:
        #print &gt;&gt; self.stream, f8(float(tt)/nc),
        x +=  pstats.f8(float(tt)/nc) + " "
    #print &gt;&gt; self.stream, f8(ct),
    x +=  pstats.f8(ct) + " "
    if cc == 0:
        #print &gt;&gt; self.stream, ' '*8,
        x +=  ' '*8
    else:
        #print &gt;&gt; self.stream, f8(float(ct)/cc),
        x +=   pstats.f8(float(ct)/cc) + " "
    #print &gt;&gt; self.stream, func_std_string(func)
    x +=  pstats.func_std_string(func) + " "
    return x

def xget_print_list(self, sel_list):
    width = self.max_name_len
    if self.fcn_list:
        stat_list = self.fcn_list[:]
        msg = "   Ordered by: " + self.sort_type + '\n'
    else:
        stat_list = self.stats.keys()
        msg = "   Random listing order was used\n"

    for selection in sel_list:
        stat_list, msg = self.eval_print_amount(selection, stat_list, msg)

    count = len(stat_list)

    if not stat_list:
        return 0, stat_list
    #print &gt;&gt; self.stream, msg
    if count &lt; len(self.stats):
        width = 0
        for func in stat_list:
            if  len(pstats.func_std_string(func)) &gt; width:
                width = len(pstats.func_std_string(func))
    #return width+2, stat_list
    return msg, width+2, stat_list
</snippet></ROW><ROW><id>13540134</id><snippet>disco/worker/classic/func.py</snippet></ROW><ROW><id>13540134</id><snippet>str()</snippet></ROW><ROW><id>13540134</id><snippet>&gt;&gt;&gt; str(u'\xb4')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xb4' in position 0: ordinal not in range(128)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13540134</id><snippet>unicodedata</snippet></ROW><ROW><id>13540134</id><snippet>import json
import unicodedata
f = open('file.json')
for line in f:
    r = json.loads(line).get('text')
    s = unicodedata.normalize('NFD', r).encode('ascii', 'ignore')
    print r
    print s
</snippet></ROW><ROW><id>13540134</id><snippet>@CataDuarte8 No! avÃ­seme cuando vaya ah salir para yo salir igual!
@CataDuarte8 No! aviseme cuando vaya ah salir para yo salir igual!
</snippet></ROW><ROW><id>13540134</id><snippet>map()</snippet></ROW><ROW><id>13540134</id><snippet>def map(line, params):
    r = simplejson.loads(line).get('text')
    s = unicodedata.normalize('NFD', r).encode('ascii', 'ignore')
    for word in s.split():
        yield word, 1
</snippet></ROW><ROW><id>13540261</id><snippet>ssh root@&lt;vm-client-ip&gt; "shutdown -h now"
</snippet></ROW><ROW><id>13540261</id><snippet>sleep 10</snippet></ROW><ROW><id>13540261</id><snippet>#!/bin/bash

ssh root@&lt;vm-client-ip&gt; "shutdown -h now"
sleep 10
</snippet></ROW><ROW><id>13540287</id><snippet>os.rename(filename, filename[7:])
</snippet></ROW><ROW><id>13540287</id><snippet>"colon-"</snippet></ROW><ROW><id>13540287</id><snippet>filename[6:]</snippet></ROW><ROW><id>13540287</id><snippet>os.rename(filename, filename.split('-')[1])
</snippet></ROW><ROW><id>13540368</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import datetime as dt

x = np.array([dt.datetime(2012, 10, 19, 10, 0, 0),
              dt.datetime(2012, 10, 19, 10, 0, 1),
              dt.datetime(2012, 10, 19, 10, 0, 2),
              dt.datetime(2012, 10, 19, 10, 0, 3)])

y = np.array([1, 3, 4, 2])

fig, (ax1, ax2) = plt.subplots(nrows = 2, sharex = True)
ax1.plot(x, y, 'b-')
ax2.plot(x, 1.0/y, 'r-')
plt.show()
</snippet></ROW><ROW><id>13540396</id><snippet>in</snippet></ROW><ROW><id>13540396</id><snippet>.index()</snippet></ROW><ROW><id>13540396</id><snippet>timeit</snippet></ROW><ROW><id>13540396</id><snippet>in</snippet></ROW><ROW><id>13540396</id><snippet>.index()</snippet></ROW><ROW><id>13540396</id><snippet>$ python -mtimeit -s 'a = list(range(10000))' '5000 in a'
10000 loops, best of 3: 107 usec per loop
$ python -mtimeit -s 'a = list(range(10000))' 'a.index(5000)'
10000 loops, best of 3: 111 usec per loop
</snippet></ROW><ROW><id>13540396</id><snippet>set()</snippet></ROW><ROW><id>13540396</id><snippet>$ python -mtimeit -s 'a = set(range(10000))' '5000 in a'
10000000 loops, best of 3: 0.108 usec per loop
</snippet></ROW><ROW><id>13540724</id><snippet>getcanvas()</snippet></ROW><ROW><id>13540724</id><snippet>turtle</snippet></ROW><ROW><id>13540724</id><snippet>getcanvas()</snippet></ROW><ROW><id>13540724</id><snippet>_canvas</snippet></ROW><ROW><id>13540724</id><snippet>&lt;Tkinter.Canvas instance&gt;</snippet></ROW><ROW><id>13540724</id><snippet>winfo_width()</snippet></ROW><ROW><id>13540724</id><snippet>winfo_height()</snippet></ROW><ROW><id>13540746</id><snippet>&gt;&gt; names=['Peter', 'Tom',  'Carl', 'Edward', 'Jake', 'Joe',  'Ken']
&gt;&gt; times=[10.01,    9.89,   9.91,    9.88,    9.91,   9.91,   9.90]
&gt;&gt;&gt; name_time_dict = dict(zip(names,times))
&gt;&gt; name_time_dict
'Ken': 9.9000000000000004, 'Jake': 9.9100000000000001, 'Edward': 9.8800000000000008,     Joe': 9.9100000000000001, 'Carl': 9.9100000000000001, 'Tom': 9.8900000000000006, 'Peter': 10.01}
&gt;&gt;&gt; times.sort()
&gt;&gt;&gt; times.index(name_time_dict['Joe'])+1
&gt;&gt;&gt; 4
&gt;&gt;&gt; times.index(name_time_dict['Peter'])+1
&gt;&gt;&gt; 7
</snippet></ROW><ROW><id>13541300</id><snippet>get_child()</snippet></ROW><ROW><id>13541422</id><snippet>pandas</snippet></ROW><ROW><id>13541422</id><snippet>pandas</snippet></ROW><ROW><id>13541422</id><snippet>ma.csv</snippet></ROW><ROW><id>13541422</id><snippet>&gt;&gt;&gt; import pandas as pn
&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; df = pn.read_csv('fut.csv', index_col=2, parse_dates=[2])
&gt;&gt;&gt; pn.rolling_mean(df['CLOSE'], window=7)
yyyymmdd
2005-03-29         NaN
2005-03-30         NaN
2005-03-31         NaN
2005-04-01         NaN
2005-04-04         NaN
2005-04-05         NaN
2005-04-06    0.121429
2005-04-07    0.120429
2005-04-08    0.119429
2005-04-11    0.118571
2005-04-12    0.117857
2005-04-13    0.117429
2005-04-14    0.117000
2005-04-15    0.116571
2005-04-18    0.116714
2005-04-19    0.117286
2005-04-20    0.117571
2005-04-21    0.117857
2005-04-22    0.118143
2005-04-25    0.118429
2005-04-26    0.118714
&gt;&gt;&gt;
&gt;&gt;&gt; pn.rolling_mean(df['CLOSE'], window=7)[date(2005,4,26)]
0.11871428571428572
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13541422</id><snippet>df</snippet></ROW><ROW><id>13541422</id><snippet>pandas</snippet></ROW><ROW><id>13541422</id><snippet>DataFrame</snippet></ROW><ROW><id>13541422</id><snippet>DataFrame</snippet></ROW><ROW><id>13541422</id><snippet>pandas</snippet></ROW><ROW><id>13541422</id><snippet>SYMBOL,DESCRIPTION,yyyymmdd,OPEN,HIGH,LOW,CLOSE,tmp1,tmp2,tmp3,tmp4
AC-057,Ethanol CBOT (Pit) Liq Cont,20050329,0.121,0.123,0.121,0.123,47,233,32,219
AC-057,Ethanol CBOT (Pit) Liq Cont,20050330,0.124,0.124,0.122,0.122,68,233,0,219
AC-057,Ethanol CBOT (Pit) Liq Cont,20050331,0.123,0.123,0.123,0.123,68,246,57,226
AC-057,Ethanol CBOT (Pit) Liq Cont,20050401,0.122,0.122,0.122,0.122,5,241,5,221
AC-057,Ethanol CBOT (Pit) Liq Cont,20050404,0.12,0.12,0.12,0.12,1,240,0,220
AC-057,Ethanol CBOT (Pit) Liq Cont,20050405,0.12,0.12,0.12,0.12,5,241,0,220
AC-057,Ethanol CBOT (Pit) Liq Cont,20050406,0.12,0.12,0.12,0.12,4,241,2,220
AC-057,Ethanol CBOT (Pit) Liq Cont,20050407,0.119,0.119,0.116,0.116,30,233,23,209
AC-057,Ethanol CBOT (Pit) Liq Cont,20050408,0.115,0.115,0.115,0.115,35,217,34,194
AC-057,Ethanol CBOT (Pit) Liq Cont,20050411,0.117,0.117,0.117,0.117,5,217,0,194
AC-057,Ethanol CBOT (Pit) Liq Cont,20050412,0.117,0.117,0.117,0.117,5,217,2,194
AC-057,Ethanol CBOT (Pit) Liq Cont,20050413,0.117,0.117,0.117,0.117,9,217,0,194
AC-057,Ethanol CBOT (Pit) Liq Cont,20050414,0.117,0.117,0.117,0.117,9,217,0,194
AC-057,Ethanol CBOT (Pit) Liq Cont,20050415,0.117,0.117,0.117,0.117,9,218,4,190
AC-057,Ethanol CBOT (Pit) Liq Cont,20050418,0.117,0.117,0.117,0.117,5,218,0,190
AC-057,Ethanol CBOT (Pit) Liq Cont,20050419,0.119,0.119,0.119,0.119,5,218,5,190
AC-057,Ethanol CBOT (Pit) Liq Cont,20050420,0.119,0.119,0.119,0.119,0,218,0,190
AC-057,Ethanol CBOT (Pit) Liq Cont,20050421,0.119,0.119,0.119,0.119,5,218,0,190
AC-057,Ethanol CBOT (Pit) Liq Cont,20050422,0.119,0.119,0.119,0.119,5,223,0,190
AC-057,Ethanol CBOT (Pit) Liq Cont,20050425,0.119,0.119,0.119,0.119,0,223,0,190
AC-057,Ethanol CBOT (Pit) Liq Cont,20050426,0.119,0.119,0.119,0.119,0,223,0,190
</snippet></ROW><ROW><id>13541731</id><snippet>uploader = models.ForeignKey('auth.User')
</snippet></ROW><ROW><id>13541957</id><snippet>gtk.main()
</snippet></ROW><ROW><id>13541957</id><snippet>gtk</snippet></ROW><ROW><id>13541957</id><snippet>import gtk
import webkit

class App(object):
    def __init__(self):
        win = gtk.Window()
        win.connect("destroy", self.destroy)
        web = webkit.WebView()
        web.open("http://www.google.com")
        win.add(web)
        web.show()
        win.show()
    def destroy(self, widget, data = None):
        gtk.main_quit()
app = App()
gtk.main()
</snippet></ROW><ROW><id>13542189</id><snippet>DictReader</snippet></ROW><ROW><id>13542189</id><snippet>reader</snippet></ROW><ROW><id>13542189</id><snippet>import csv

inv = csv.DictReader(open('ireport.txt', 'rU'), dialect='excel', delimiter="\t")

for row in inv:
    try:
      if int(row['TOTAL_ON_ORDER']) &gt;= 1:
          print ('%-20s %-100s OnHand: %-4s OnOrder: %-4s') % (row['MODEL_NUMBER'],row['PRODUCT_NAME'],row['TOTAL_ONHAND'],row['TOTAL_ON_ORDER'])
    except Exception as Err:
      print row['TOTAL_ON_ORDER'],Err
      break #if you want to end the function)
</snippet></ROW><ROW><id>13542373</id><snippet>threading.Event</snippet></ROW><ROW><id>13542373</id><snippet>import functools
import threading

def run_in_threads(*functions):
    threads = []

    for function in functions:
        thread = threading.Thread(target = function)
        thread.daemon = True
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()

def __print_infinite_loop(value, event):
    while not event.is_set():
        print(value)

def __print_my_value_n_times(value, n, event):
    for i in range(n):
        print(value)
    event.set()

if __name__ == "__main__":
    event = threading.Event()
    infinite_loop = functools.partial(__print_infinite_loop, "xyz", event)
    my_values = functools.partial(__print_my_value_n_times, "123", 10, event)
    run_in_threads(infinite_loop, my_values)
</snippet></ROW><ROW><id>13542521</id><snippet>int(rows)</snippet></ROW><ROW><id>13542521</id><snippet>rows</snippet></ROW><ROW><id>13542521</id><snippet>str</snippet></ROW><ROW><id>13542521</id><snippet>rows</snippet></ROW><ROW><id>13542521</id><snippet>int</snippet></ROW><ROW><id>13542521</id><snippet>integer</snippet></ROW><ROW><id>13542521</id><snippet>range</snippet></ROW><ROW><id>13542521</id><snippet>int(rows)
for i in range(rows):  // rows used here is still a string
</snippet></ROW><ROW><id>13542521</id><snippet>for i in range(int(rows)):
</snippet></ROW><ROW><id>13542675</id><snippet>np.mgrid[[slice(row[0], row[1], n*1j) for row, n in zip(bounds, n_bins)]]
</snippet></ROW><ROW><id>13542675</id><snippet>import numpy as np
D = 3
n_bins =  100*np.ones(D)
bounds = np.repeat([(0,1)], D, axis = 0)

result = np.mgrid[[slice(row[0], row[1], n*1j) for row, n in zip(bounds, n_bins)]]
ans = np.mgrid[0:1:100j,0:1:100j,0:1:100j]

assert np.allclose(result, ans)
</snippet></ROW><ROW><id>13542675</id><snippet>np.ogrid</snippet></ROW><ROW><id>13542675</id><snippet>np.mgrid</snippet></ROW><ROW><id>13542813</id><snippet>from mechanize import Browser
from BeautifulSoup import BeautifulSoup


me = open('C:\Python27\myfile.csv')
mech = Browser()

for url in me.readlines():
    ...
</snippet></ROW><ROW><id>13542813</id><snippet>for url in reader:
    ...
</snippet></ROW><ROW><id>13542878</id><snippet>import Robot
myRobot = Robot.Robot(...)
</snippet></ROW><ROW><id>13542878</id><snippet>Robot</snippet></ROW><ROW><id>13542878</id><snippet>from ... import</snippet></ROW><ROW><id>13542878</id><snippet>from Robot import Robot
myRobot = Robot(...)
</snippet></ROW><ROW><id>13542878</id><snippet>Robot.HelloWorld</snippet></ROW><ROW><id>13542878</id><snippet>HelloWorld</snippet></ROW><ROW><id>13542878</id><snippet>from Robot import Robot, HelloWorld
myRobot = Robot(...)
HelloWorld()
</snippet></ROW><ROW><id>13542974</id><snippet>.index()</snippet></ROW><ROW><id>13542974</id><snippet>ascii_uppercase</snippet></ROW><ROW><id>13542974</id><snippet>from itertools import islice, cycle
from string import ascii_uppercase

def func(start='A', length=1, source=ascii_uppercase):
    src = list(source)
    idx = src.index(start)
    cyc = cycle(src[idx:] + src[:idx])
    return ''.join(islice(cyc, length))

&gt;&gt;&gt; func(length=10)
'ABCDEFGHIJ'
&gt;&gt;&gt; func(length=10, start='X')
'XYZABCDEFG'
&gt;&gt;&gt; func()
'A'
&gt;&gt;&gt; func(length=3)
'ABC'
</snippet></ROW><ROW><id>13543673</id><snippet>tulemused</snippet></ROW><ROW><id>13543673</id><snippet>None</snippet></ROW><ROW><id>13543673</id><snippet>x-www-form-urlencoded</snippet></ROW><ROW><id>13543673</id><snippet>'tulemused='</snippet></ROW><ROW><id>13543673</id><snippet>xmlhttp.send("tulemused=" + tulemused);
</snippet></ROW><ROW><id>13543708</id><snippet>filter('username =', username.lower())</snippet></ROW><ROW><id>13543708</id><snippet>users = User.all().fetch(1000000)
for user in users :
    if user.username != user.username.lower() :
        user.username = user.username.lower()
        user.put()  # save back to db only if changed
</snippet></ROW><ROW><id>13543708</id><snippet>fetch(offset,count)</snippet></ROW><ROW><id>13543763</id><snippet>%</snippet></ROW><ROW><id>13543763</id><snippet>"""INSERT INTO headers (articleNumber, subject, poster,
                        date, id, reference, size, lines)
          VALUES ('?', '?', '?',
                  '?', '?','?', '?', '?')"""
</snippet></ROW><ROW><id>13543763</id><snippet>%</snippet></ROW><ROW><id>13543763</id><snippet>%d</snippet></ROW><ROW><id>13543763</id><snippet>%s</snippet></ROW><ROW><id>13543763</id><snippet>?</snippet></ROW><ROW><id>13543763</id><snippet>%</snippet></ROW><ROW><id>13543763</id><snippet>execute</snippet></ROW><ROW><id>13543763</id><snippet>database.execute("""
    INSERT INTO headers (articleNumber, subject, poster,
                         date, id, reference, size, lines)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)""", # note: comma, not %
     argumentList)
</snippet></ROW><ROW><id>13543917</id><snippet>my_string.lower()</snippet></ROW><ROW><id>13543966</id><snippet>import numpy as np

x = 2.0
while True:
    if 6.0/(x+16) &gt; 2.0/(x+4): break
    x = np.nextafter(x, x+1)   
print(repr(x))
</snippet></ROW><ROW><id>13543966</id><snippet>2.0000000000000009
</snippet></ROW><ROW><id>13543966</id><snippet>x</snippet></ROW><ROW><id>13543966</id><snippet>x</snippet></ROW><ROW><id>13543966</id><snippet>6.0/(x+16) &gt; 2.0/(x+4)
</snippet></ROW><ROW><id>13543966</id><snippet>dᵢ</snippet></ROW><ROW><id>13543992</id><snippet>import xml.etree.cElementTree as ET
tree = ET.parse('test.xml')
for elem in tree.getiterator():
    if elem.tag=='{http://www.namespace.co.uk}AssetEquipment':
        output={}
        for elem1 in list(elem):
            if elem1.tag=='{http://www.namespace.co.uk}Active':
                output['Active']=elem1.text
            if elem1.tag=='{http://www.namespace.co.uk}Direction':
                output['Direction']=elem1.text
            if elem1.tag=='{http://www.namespace.co.uk}Location':
                for elem2 in list(elem1):
                    if elem2.tag=='{http://www.namespace.co.uk}RoomLocation':
                        for elem3 in list(elem2):
                            if elem3.tag=='{http://www.namespace.co.uk}Room':
                                output['Room']=elem3.text
        print output
</snippet></ROW><ROW><id>13544022</id><snippet>theta</snippet></ROW><ROW><id>13544022</id><snippet>import math
def angle_wrt_x(A,B):
    """Return the angle between B-A and the positive x-axis.
    Values go from 0 to pi in the upper half-plane, and from 
    0 to -pi in the lower half-plane.
    """
    ax, ay = A
    bx, by = B
    return math.atan2(by-ay, bx-ax)

def dist(A,B):
    ax, ay = A
    bx, by = B
    return math.hypot(bx-ax, by-ay)

A = (560023.44957588764, 6362057.3904932579)
B = (560036.44957588764, 6362071.8904932579)
theta = angle_wrt_x(A, B)
d = dist(A, B)
print(theta)
print(d)
</snippet></ROW><ROW><id>13544022</id><snippet>0.839889619638  # radians
19.4743420942
</snippet></ROW><ROW><id>13544022</id><snippet>atan2</snippet></ROW><ROW><id>13544043</id><snippet>Bob,100
Jane,500
Jerry,10
Bill,5
James,5000
Sara,250
</snippet></ROW><ROW><id>13544043</id><snippet>f = open("scores.txt", "r")
scores = []
for line in f:
    line = line.strip()
    if not line:
        continue
    name, score = line.strip().split(",")
    scores.append((name.strip(), int(score.strip())))

print scores
"""
[('Bob', 100),
 ('Jane', 500),
 ('Jerry', 10),
 ('Bill', 5),
 ('James', 5000),
 ('Sara', 250)]
"""
</snippet></ROW><ROW><id>13544043</id><snippet>scores.sort(reverse=True, key=lambda item: item[1])
top5 = scores[:5]
</snippet></ROW><ROW><id>13544043</id><snippet>lambda</snippet></ROW><ROW><id>13544141</id><snippet>if q == '':
</snippet></ROW><ROW><id>13544141</id><snippet>if len(q) == 0:
</snippet></ROW><ROW><id>13544156</id><snippet>f(x)</snippet></ROW><ROW><id>13544156</id><snippet>a</snippet></ROW><ROW><id>13544156</id><snippet>In [1]: def f(x):
   ...:     a = 2.5
   ...:     return a * x**2
   ...: 

In [2]: f(3)
Out[2]: 22.5
</snippet></ROW><ROW><id>13544156</id><snippet>In [3]: def f(x):
   ...:     return str(x**2) + 'a'
   ...: 

In [4]: f(3)
Out[4]: '9a'
</snippet></ROW><ROW><id>13544156</id><snippet>Polynomial</snippet></ROW><ROW><id>13544263</id><snippet>    output = file(LOG_FILE, 'a')
    args = shlex.split(self.command_video())
    return subprocess.call(args, stdout=output, stderr=output)
</snippet></ROW><ROW><id>13544303</id><snippet>Pet</snippet></ROW><ROW><id>13544303</id><snippet>HouseDog</snippet></ROW><ROW><id>13544303</id><snippet>PetRock</snippet></ROW><ROW><id>13544303</id><snippet>getNumberOfDresses</snippet></ROW><ROW><id>13544303</id><snippet>getNumberOfToys</snippet></ROW><ROW><id>13544340</id><snippet>In [138]: foo = np.array([[ 3.5,  0. ,  2.5,  2. ,  0. ,  1. ,  0. ],
                          [ 0. ,  3. ,  2.5,  2. ,  0. ,  0. ,  0.5],
                          [ 3.5,  0. ,  0. ,  0. ,  1.5,  0. ,  0.5]])
In [141]: mask = foo != 0

In [142]: foo[mask] = foo[mask]+5

In [143]: foo
Out[143]: 
array([[ 8.5,  0. ,  7.5,  7. ,  0. ,  6. ,  0. ],
       [ 0. ,  8. ,  7.5,  7. ,  0. ,  0. ,  5.5],
       [ 8.5,  0. ,  0. ,  0. ,  6.5,  0. ,  5.5]])
</snippet></ROW><ROW><id>13544437</id><snippet>&gt;&gt;&gt; my_dict = {1:2, 3:4}
&gt;&gt;&gt; my_dict
{1: 2, 3: 4}
&gt;&gt;&gt; 
&gt;&gt;&gt; del my_dict[0]  # try to delete `key: 1`

Traceback (most recent call last):
  File "&lt;pyshell#18&gt;", line 1, in &lt;module&gt;
    del my_dict[0]
KeyError: 0
&gt;&gt;&gt; del my_dict[1]  # Access by key value.
&gt;&gt;&gt; my_dict   # dict after deleting key 
{3: 4}
&gt;&gt;&gt; my_dict[1]   # Trying to access deleted key.

Traceback (most recent call last):
  File "&lt;pyshell#26&gt;", line 1, in &lt;module&gt;
    my_dict[1]
KeyError: 1
</snippet></ROW><ROW><id>13544437</id><snippet>KeyError</snippet></ROW><ROW><id>13544437</id><snippet>in</snippet></ROW><ROW><id>13544437</id><snippet>&gt;&gt;&gt; my_dict = {1:2 , 3:4}
&gt;&gt;&gt; 4 in my_dict
False
&gt;&gt;&gt; 1 in my_dict
True
</snippet></ROW><ROW><id>13544439</id><snippet>connection = httplib.HTTPConnection(...)
connection.request(...)
connection.request(...)
</snippet></ROW><ROW><id>13544439</id><snippet>import SocketServer
from SimpleXMLRPCServer import SimpleXMLRPCServer
from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler
import xmlrpclib

class AsyncXMLRPCServer(SocketServer.ThreadingMixIn,SimpleXMLRPCServer): pass

# Create server
server = AsyncXMLRPCServer(('', 8888), SimpleXMLRPCRequestHandler)
server.register_introspection_functions()

def call_waste():
    # Each call to this function creates its own serverproxy.
    # If this function is called by concurrent threads, each thread
    # will safely have its own serverproxy.
    s = xmlrpclib.ServerProxy('http://localhost:9999')
    s.waste_time()
    return True

server.register_function(call_waste, 'call_waste')
server.serve_forever()
</snippet></ROW><ROW><id>13544606</id><snippet>QWebKit</snippet></ROW><ROW><id>13544606</id><snippet>doc = webview.page().mainFrame().documentElement()
option = doc.findFirst('select[name="birthday_m"] &gt; option[value="3"]')
</snippet></ROW><ROW><id>13544606</id><snippet>selected</snippet></ROW><ROW><id>13544606</id><snippet>option.setAttribute('selected', 'true')
</snippet></ROW><ROW><id>13544606</id><snippet>webview.reload()</snippet></ROW><ROW><id>13544606</id><snippet>select</snippet></ROW><ROW><id>13544606</id><snippet>doc = webview.page().mainFrame().documentElement()
select = doc.findFirst('select[name="birthday_m"]')
</snippet></ROW><ROW><id>13544606</id><snippet>select.evaluateJavaScript('this.selectedIndex = 3')
</snippet></ROW><ROW><id>13544650</id><snippet>axes</snippet></ROW><ROW><id>13544650</id><snippet>np.loadtxt</snippet></ROW><ROW><id>13544650</id><snippet>np.loadtxt</snippet></ROW><ROW><id>13544650</id><snippet>data</snippet></ROW><ROW><id>13544650</id><snippet>data = np.loadtxt(filename)
data = np.atleast_2d(data)
</snippet></ROW><ROW><id>13544661</id><snippet>request</snippet></ROW><ROW><id>13544837</id><snippet>+=</snippet></ROW><ROW><id>13544837</id><snippet>x</snippet></ROW><ROW><id>13544837</id><snippet>x += newList</snippet></ROW><ROW><id>13544837</id><snippet>x.extend(newList)
x = x
</snippet></ROW><ROW><id>13544837</id><snippet>x += other</snippet></ROW><ROW><id>13544837</id><snippet>y = x.__iadd__(other)
x = y
</snippet></ROW><ROW><id>13544848</id><snippet>class WebPage(QWebPage):
    def userAgentForUrl(self, url):
        return "Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1"

class Browser(QWebView):
    def __init__(self):
        QWebView.__init__(self)
        self.setPage(WebPage())
</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict(dict)</snippet></ROW><ROW><id>13544886</id><snippet>In [7]: from collections import defaultdict

In [8]: lovedsongs = defaultdict(lambda: defaultdict(dict))

In [9]: lovedsongs['OAR']['Blackrock'] = 1

In [10]: lovedsongs['Timati']['Moj Put'] = 1

In [11]: lovedsongs
Out[11]: defaultdict(&lt;function &lt;lambda&gt; at 0x24e5ed8&gt;, {'Timati': defaultdict(&lt;type 'dict'&gt;, {'Moj Put': 1}), 'OAR': defaultdict(&lt;type 'dict'&gt;, {'Blackrock': 1})})

In [12]: lovedsongs['Not']['Found']
Out[12]: {}

In [13]: if lovedsongs['Not']['Found'] == 1:
   ....:     print 'Found it'
   ....:
   ....:

In [14]: if lovedsongs['OAR']['Blackrock'] == 1:
   ....:     print 'Found it'
   ....:
   ....:
Found it
</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict(lambda: defaultdict(dict))</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict</snippet></ROW><ROW><id>13544886</id><snippet>In [1]: from collections import defaultdict

In [2]: d = defaultdict(int)

In [3]: d['one'] = 1

In [4]: d['two'] = 2

In [5]: d
Out[5]: defaultdict(&lt;type 'int'&gt;, {'two': 2, 'one': 1})

In [6]: d['one']
Out[6]: 1

In [7]: d['three']
Out[7]: 0
</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict</snippet></ROW><ROW><id>13544886</id><snippet>int</snippet></ROW><ROW><id>13544886</id><snippet>0</snippet></ROW><ROW><id>13544886</id><snippet>0</snippet></ROW><ROW><id>13544886</id><snippet>str</snippet></ROW><ROW><id>13544886</id><snippet>''</snippet></ROW><ROW><id>13544886</id><snippet>dict</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict(dict)</snippet></ROW><ROW><id>13544886</id><snippet>In [13]: d = defaultdict(dict)

In [14]: d['three']['more']
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)

/path/&lt;ipython console&gt; in &lt;module&gt;()

KeyError: 'more'
</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict</snippet></ROW><ROW><id>13544886</id><snippet>int</snippet></ROW><ROW><id>13544886</id><snippet>int()</snippet></ROW><ROW><id>13544886</id><snippet>lambda</snippet></ROW><ROW><id>13544886</id><snippet>lambda</snippet></ROW><ROW><id>13544886</id><snippet>defaultdict(dict)</snippet></ROW><ROW><id>13544896</id><snippet>import psutil
processors = psutil.NUM_CPUS
print processors
&gt;&gt;&gt; 4
</snippet></ROW><ROW><id>13544929</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13544929</id><snippet>In [1]: from itertools import groupby
In [2]: alist = [[1, 'AAA0'], [2, 'AAAA1'], [3, 'BB2BB2'],
   ...: [4, 'A3A3'], [5, 'A3A3']]
In [3]: key = lambda x: x[1].count('A')
In [4]: for k, g in groupby(sorted(alist, key=key), key=key):
    print k, tuple(g)
   ...:     
0 ([3, 'BB2BB2'],)
2 ([4, 'A3A3'], [5, 'A3A3'])
3 ([1, 'AAA0'],)
4 ([2, 'AAAA1'],)
</snippet></ROW><ROW><id>13545089</id><snippet> i iL iP iR    Area
 0  6  8  0   203.000
 1  6  8  0   211.875
 2  6  8  0   205.800
 3  6 10  0   206.250
 4  7 12  0   190.362
 5  8  0  1   203.000
 6 10  0  4   201.385
 7  0  1  6   203.000
 8  0  3  6   205.827
 9  0  3  6   205.640
10  0  4  7   187.451
11  0  4  7   189.750
12  1  6  8   203.000
</snippet></ROW><ROW><id>13545089</id><snippet>mostfar()</snippet></ROW><ROW><id>13545089</id><snippet>mx, my</snippet></ROW><ROW><id>13545089</id><snippet>mostfar()</snippet></ROW><ROW><id>13545089</id><snippet>mx,my = -1,0</snippet></ROW><ROW><id>13545089</id><snippet>mostfar()</snippet></ROW><ROW><id>13545089</id><snippet>if mx*rx + my*ry &gt;= best</snippet></ROW><ROW><id>13545089</id><snippet>#!/usr/bin/python
import math

hull = [(23.45, 57.39), (23.45, 60.39), (24.45, 63.39),
        (26.95, 68.39), (28.45, 69.89), (34.95, 71.89),
        (36.45, 71.89), (37.45, 70.39), (37.45, 64.89),
        (36.45, 63.39), (34.95, 61.39), (26.95, 57.89),
        (25.45, 57.39), (23.45, 57.39)]

def mostfar(j, n, s, c, mx, my): # advance j to extreme point
    xn, yn = hull[j][0], hull[j][1]
    rx, ry = xn*c - yn*s, xn*s + yn*c
    best = mx*rx + my*ry
    while True:
        x, y = rx, ry
        xn, yn = hull[(j+1)%n][0], hull[(j+1)%n][1]
        rx, ry = xn*c - yn*s, xn*s + yn*c
        if mx*rx + my*ry &gt;= best:
            j = (j+1)%n
            best = mx*rx + my*ry
        else:
            return (x, y, j)

n = len(hull)
iL = iR = iP = 1                # indexes left, right, opposite
pi = 4*math.atan(1)
for i in range(n-1):
    dx = hull[i+1][0] - hull[i][0]
    dy = hull[i+1][1] - hull[i][1]
    theta = pi-math.atan2(dy, dx)
    s, c = math.sin(theta), math.cos(theta)
    yC = hull[i][0]*s + hull[i][1]*c

    xP, yP, iP = mostfar(iP, n, s, c, 0, 1)
    if i==0: iR = iP
    xR, yR, iR = mostfar(iR, n, s, c,  1, 0)
    xL, yL, iL = mostfar(iL, n, s, c, -1, 0)
    area = (yP-yC)*(xR-xL)

    print '    {:2d} {:2d} {:2d} {:2d} {:9.3f}'.format(i, iL, iP, iR, area)
</snippet></ROW><ROW><id>13545089</id><snippet>Min rectangle:  187.451   18.037   10.393   10    0    4    7
</snippet></ROW><ROW><id>13545089</id><snippet># add after pi = ... line:
minRect = (1e33, 0, 0, 0, 0, 0, 0) # area, dx, dy, i, iL, iP, iR

# add after area = ... line:
    if area &lt; minRect[0]:
        minRect = (area, xR-xL, yP-yC, i, iL, iP, iR)

# add after print ... line:
print 'Min rectangle:', minRect
# or instead of that print, add:
print 'Min rectangle: ',
for x in ['{:3d} '.format(x) if isinstance(x, int) else '{:7.3f} '.format(x) for x in minRect]:
    print x,
print
</snippet></ROW><ROW><id>13545125</id><snippet>gamefield.table</snippet></ROW><ROW><id>13545125</id><snippet>gamefield</snippet></ROW><ROW><id>13545125</id><snippet>__getitem__</snippet></ROW><ROW><id>13545125</id><snippet>__setitem__</snippet></ROW><ROW><id>13545125</id><snippet>table</snippet></ROW><ROW><id>13545125</id><snippet>gamefield</snippet></ROW><ROW><id>13545300</id><snippet>import couchdb

conn = couchdb.Server('http://localhost:5984')
db = conn['test1']

doc = {'name': 'testfile'}
db.save(doc)
db.put_attachment(doc, data, filename="test.txt.tgz")
</snippet></ROW><ROW><id>13545398</id><snippet>    row = []
    helper = m.find('&lt;td&gt;&lt;a href="d?k=', helper)
    if helper == -1:
        break
    helper += 17
    end_helper = m.find('"&gt;', helper)
</snippet></ROW><ROW><id>13545428</id><snippet>pkg_resources.iter_entry_points</snippet></ROW><ROW><id>13545428</id><snippet>entry_points</snippet></ROW><ROW><id>13545428</id><snippet>setup.py</snippet></ROW><ROW><id>13545428</id><snippet>setup.py develop</snippet></ROW><ROW><id>13545428</id><snippet>[myapp.myclasses]
classentry1 = myapp.mymodule:myclassname1
classentry2 = myapp.mymodule:myclassname2
</snippet></ROW><ROW><id>13545428</id><snippet>setup.py</snippet></ROW><ROW><id>13545428</id><snippet>babel.checkers</snippet></ROW><ROW><id>13545428</id><snippet>babel.extractors</snippet></ROW><ROW><id>13545428</id><snippet>babel.messages.checkers:_find_checkers</snippet></ROW><ROW><id>13545428</id><snippet>babel.messages.extract:extract</snippet></ROW><ROW><id>13545428</id><snippet>setup.py</snippet></ROW><ROW><id>13545428</id><snippet>pkg_resources.working_set</snippet></ROW><ROW><id>13545428</id><snippet>working_set.entries</snippet></ROW><ROW><id>13545428</id><snippet>working_set.entry_keys</snippet></ROW><ROW><id>13545428</id><snippet>entries</snippet></ROW><ROW><id>13545428</id><snippet>working_set.by_key</snippet></ROW><ROW><id>13545428</id><snippet>pkg_resources.Distribution</snippet></ROW><ROW><id>13545428</id><snippet>Distribution</snippet></ROW><ROW><id>13545428</id><snippet>working_set.by_key['package.name'] = yourdistribution</snippet></ROW><ROW><id>13545428</id><snippet>Distribution</snippet></ROW><ROW><id>13545428</id><snippet>yourdistribution = Distribution(project_name='package.name')
yourdistribution._ep_map = {'myapp.myclasses', {
    'classentry1': entrypointinstance_for_classentry1,
    'classentry2': entrypointinstance_for_classentry2,
}}
</snippet></ROW><ROW><id>13545428</id><snippet>_ep_map</snippet></ROW><ROW><id>13545428</id><snippet>setup.py</snippet></ROW><ROW><id>13545428</id><snippet>python setup.py develop</snippet></ROW><ROW><id>13545509</id><snippet>def search(name):
    for d in (t[0] for t in dicts):
        if name in d: return d[name]
</snippet></ROW><ROW><id>13545509</id><snippet>def search(name):
    for d, _ in dicts:
        if name in d: return d[name]
</snippet></ROW><ROW><id>13545887</id><snippet>Grid.ForceRefresh</snippet></ROW><ROW><id>13545954</id><snippet>collections.Counter</snippet></ROW><ROW><id>13545954</id><snippet>In [1]: lst = [['1','2','3','4'],['1','1','1','1'],['1','2','3','4']]
In [2]: from collections import Counter
In [3]: from operator import itemgetter
In [4]: max((Counter(l).most_common(1)[0] for l in lst), key=itemgetter(1))[0]
Out[4]: '1'
</snippet></ROW><ROW><id>13545954</id><snippet>In [5]: max(((max(set(l), key=l.count), l) for l in lst),
   ...: key=lambda x: x[1].count(x[0]))[0]
Out[5]: '1'
</snippet></ROW><ROW><id>13546013</id><snippet>__init__</snippet></ROW><ROW><id>13546013</id><snippet>super</snippet></ROW><ROW><id>13546013</id><snippet>class Subclass(Superclass):
    def __init__(self):
        Superclass.__init__(self) 

class Subclass(Superclass):
    def __init__(self):
        super(Subclass, self).__init__()
</snippet></ROW><ROW><id>13546160</id><snippet>from collections import defaultdict

data = [ {'Artist':'Madonna', 'album':'Ray of Light', 'title':'Substitute for love'},
         ....
         {'Artist':'U2', 'album':'Acthung Baby', 'title':'Until the end of the world'}
      ]   

tree_data = defaultdict(lambda: defaultdict(list))

for d in data:
    tree_data[d['Artist']][d['album']].append(d['title'])
</snippet></ROW><ROW><id>13546160</id><snippet>for artist in tree_data.keys():
    print(artist)
    for album, titles in tree_data[artist].iteritems():
        print("\t" + album)
        for title in titles:
            print ("\t\t" + title)
</snippet></ROW><ROW><id>13546366</id><snippet>a = [['a'],['b']]

a = [item for list in a for item in list]
print a
&gt;&gt;&gt;['a', 'b']
</snippet></ROW><ROW><id>13546485</id><snippet>class A(object):
    def do_something(self):
        print id(self), "called"

class B(object):
    def get_a(self):
        return A()

class Proxy(object):
    def __init__(self, objs):
        self._objs = objs

    def __getattr__(self, name):
        def func(*args, **kwargs):
            return Proxy([getattr(o, name)(*args, **kwargs) for o in self._objs])
        return func

collection = [B(), B()]

proxy = Proxy(collection)
proxy.get_a().do_something()
</snippet></ROW><ROW><id>13546485</id><snippet>4455571152 called
4455571216 called
</snippet></ROW><ROW><id>13546494</id><snippet>subprocess.Popen(["java -mx256m -jar ../sphinx4-1.0beta5/bin/HelloWorld.jar"], cwd=r'path', shell=True)
</snippet></ROW><ROW><id>13546762</id><snippet>0</snippet></ROW><ROW><id>13546762</id><snippet>import networkx as nx
import matplotlib.pyplot as plt

def flatline(iterable):
    for line in iterable:
        for val in line.split():
            yield float(val)

with open(filename, 'r') as f:
    G = nx.balanced_tree(r = 2, h = 100, create_using = nx.DiGraph())
    for (a, b), val in zip(G.edges(), flatline(f)):
        G[a][b]['weight'] = val

# print(G.edges(data = True))

pred, distance = nx.dijkstra_predecessor_and_distance(G, 0)

# Find leaf whose distance from `0` is smallest
min_dist, leaf = min((distance[node], node) 
                     for node, degree in G.out_degree_iter()
                     if degree == 0)
nx.draw(G)
plt.show()
</snippet></ROW><ROW><id>13546787</id><snippet>print doc['coordinates']['coordinates']
</snippet></ROW><ROW><id>13546787</id><snippet>doc</snippet></ROW><ROW><id>13546787</id><snippet>coordinates</snippet></ROW><ROW><id>13546787</id><snippet>coordinates</snippet></ROW><ROW><id>13546787</id><snippet>type</snippet></ROW><ROW><id>13546787</id><snippet>print doc['coordinates']['point']</snippet></ROW><ROW><id>13546787</id><snippet>lat, long</snippet></ROW><ROW><id>13546787</id><snippet>lat, long = doc['coordinates']['coordinates']
</snippet></ROW><ROW><id>13546840</id><snippet>int()</snippet></ROW><ROW><id>13546840</id><snippet>with open('background_tiles.txt', 'r') as f:
    contents = f.readlines()

for line in contents:
    for c in line.split():
        self.type = int(c)
</snippet></ROW><ROW><id>13546840</id><snippet>with</snippet></ROW><ROW><id>13546840</id><snippet>readlines</snippet></ROW><ROW><id>13546840</id><snippet>split()</snippet></ROW><ROW><id>13546960</id><snippet>strptime()</snippet></ROW><ROW><id>13546960</id><snippet>datetime</snippet></ROW><ROW><id>13546960</id><snippet>datetime</snippet></ROW><ROW><id>13546960</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>13546960</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>13547094</id><snippet>from package.module1 import class1
</snippet></ROW><ROW><id>13547094</id><snippet>from .module1 import class1
</snippet></ROW><ROW><id>13547094</id><snippet>.</snippet></ROW><ROW><id>13547236</id><snippet>from PyQt4 import QtGui
from PyQt4.QtCore import (QTime, QTimer, Qt, SIGNAL)
</snippet></ROW><ROW><id>13547260</id><snippet>edges = [('a', 'b'), ('a', 'b'), ('a', 'c')]
</snippet></ROW><ROW><id>13547260</id><snippet>from collections import defaultdict

matrix = defaultdict(int)
for edge in edges:
    matrix[edge] += 1

print matrix['a', 'b']
</snippet></ROW><ROW><id>13547260</id><snippet>2
</snippet></ROW><ROW><id>13547260</id><snippet>from collections import defaultdict

adj_list = defaultdict(lambda: defaultdict(lambda: 0))
for start, end in edges:
    adj_list[start][end] += 1

print adj_list['a']
</snippet></ROW><ROW><id>13547260</id><snippet>{'c': 1, 'b': 2}
</snippet></ROW><ROW><id>13547396</id><snippet>&gt;&gt;&gt; n = 17**987273 # 1.2 million digits number

&gt;&gt;&gt; digits = int(math.log10(n))

&gt;&gt;&gt; k = digits - 24 # i.e. first 24 digits

&gt;&gt;&gt; n / (10 ** k)
9953043281569299242668853L
</snippet></ROW><ROW><id>13547396</id><snippet>n // (10 ** k)</snippet></ROW><ROW><id>13547396</id><snippet>%timeit s = str(n)[:24]
1 loops, best of 3: 57.7 s per loop

%timeit n/10**(int(math.log10(n))-24)
1 loops, best of 3: 412 ms per loop


# With a 200K digits number (51x faster)

%timeit s = str(n)[:24]
1 loops, best of 3: 532 ms per loop

%timeit n/10**(int(math.log10(n))-24)
100 loops, best of 3: 10.4 ms per loop


# With a 20K digits number (19x faster)

%timeit s = str(n)[:24]
100 loops, best of 3: 5.4 ms per loop

%timeit n/10**(int(math.log10(n))-24)
1000 loops, best of 3: 272 us per loop
</snippet></ROW><ROW><id>13547758</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:ns0="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://schemas.microsoft.com/sharepoint/soap/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;SOAP-ENV:Header/&gt;
   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:UpdateList&gt;
         &lt;ns1:listName&gt;D538A29D-6DD4-423A-9E7D-2697917BDA78&lt;/ns1:listName&gt;
         &lt;ns1:updateFields&gt;
            &lt;Fields&gt;
               &lt;Method ID="1"&gt;
                  &lt;Field Type="Text" Name="myText" DisplayName="myText" Description="new desc"/&gt;
               &lt;/Method&gt;
            &lt;/Fields&gt;
         &lt;/ns1:updateFields&gt;
      &lt;/ns1:UpdateList&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</snippet></ROW><ROW><id>13547758</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:ns0="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://schemas.microsoft.com/sharepoint/soap/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;SOAP-ENV:Header/&gt;
   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:UpdateList&gt;
         &lt;ns1:listName&gt;D538A29D-6DD4-423A-9E7D-2697917BDA78&lt;/ns1:listName&gt;
         &lt;ns1:updateFields&gt;
            &lt;Fields&gt;
               &lt;Method ID="1"&gt;
                  &lt;Field Type="Calculated" DisplayName="myCalcAdd" Name="myCalcAdd" ResultType="Number" ReadOnly="TRUE"&gt;
                     &lt;Formula&gt;=Jan*0.5&lt;/Formula&gt;
                     &lt;FormulaDisplayNames&gt;=Jan*0.5&lt;/FormulaDisplayNames&gt;
                     &lt;FieldRefs&gt;
                        &lt;FieldRef Name="Jan"/&gt;
                     &lt;/FieldRefs&gt;
                  &lt;/Field&gt;
               &lt;/Method&gt;
            &lt;/Fields&gt;
         &lt;/ns1:updateFields&gt;
      &lt;/ns1:UpdateList&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</snippet></ROW><ROW><id>13547758</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:ns0="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://schemas.microsoft.com/sharepoint/soap/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;SOAP-ENV:Header/&gt;
   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:UpdateList&gt;
         &lt;ns1:listName&gt;D538A29D-6DD4-423A-9E7D-2697917BDA78&lt;/ns1:listName&gt;
         &lt;ns1:newFields&gt;
            &lt;Fields&gt;
               &lt;Method ID="1"&gt;
                  &lt;Field Type="Text" Name="myTextAdd" DisplayName="myTextAdd" Description="My first added field"/&gt;
               &lt;/Method&gt;
            &lt;/Fields&gt;
         &lt;/ns1:newFields&gt;
      &lt;/ns1:UpdateList&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</snippet></ROW><ROW><id>13547758</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:ns0="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://schemas.microsoft.com/sharepoint/soap/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;SOAP-ENV:Header/&gt;
   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:UpdateList&gt;
         &lt;ns1:listName&gt;D538A29D-6DD4-423A-9E7D-2697917BDA78&lt;/ns1:listName&gt;
         &lt;ns1:newFields&gt;
            &lt;Fields&gt;
               &lt;Method ID="1" AddToView=""&gt;
                  &lt;Field Type="Calculated" DisplayName="myCalcAdd" ResultType="Number"&gt;
                     &lt;Formula&gt;=Jan*0.5&lt;/Formula&gt;
                     &lt;FormulaDisplayNames&gt;=Jan*0.5&lt;/FormulaDisplayNames&gt;
                     &lt;FieldRefs&gt;
                        &lt;FieldRef Name="Jan"/&gt;
                     &lt;/FieldRefs&gt;
                  &lt;/Field&gt;
               &lt;/Method&gt;
            &lt;/Fields&gt;
         &lt;/ns1:newFields&gt;
      &lt;/ns1:UpdateList&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</snippet></ROW><ROW><id>13547774</id><snippet>b</snippet></ROW><ROW><id>13547774</id><snippet>a</snippet></ROW><ROW><id>13547774</id><snippet>if doc==None:
   pass
else:
   a=get_coords(doc['coordinates']['coordinates'])
   print b
</snippet></ROW><ROW><id>13547774</id><snippet>doc</snippet></ROW><ROW><id>13547774</id><snippet>doc</snippet></ROW><ROW><id>13547774</id><snippet>coordinates</snippet></ROW><ROW><id>13547795</id><snippet>foo[filter] == foo[filter.nonzero()]</snippet></ROW><ROW><id>13547795</id><snippet>filter</snippet></ROW><ROW><id>13547795</id><snippet>[]</snippet></ROW><ROW><id>13547795</id><snippet>foo[1, 2, 3]</snippet></ROW><ROW><id>13547795</id><snippet>foo[(1, 2, 3)]</snippet></ROW><ROW><id>13547795</id><snippet>foo[:, something]</snippet></ROW><ROW><id>13547795</id><snippet>foo[:, something[0], something[1]]</snippet></ROW><ROW><id>13547795</id><snippet>foo[(slice[None], (something[0], something[1]))]</snippet></ROW><ROW><id>13547795</id><snippet>filter</snippet></ROW><ROW><id>13547795</id><snippet>foo[:, filter[0]]

# OR
index = (slice(None),) + filter.nonzero()
foo[index]
</snippet></ROW><ROW><id>13547888</id><snippet>import sys</snippet></ROW><ROW><id>13547888</id><snippet>sys.path.insert(0,"/path to your thesis folder/thesis_program")</snippet></ROW><ROW><id>13547888</id><snippet>GE_Test.py</snippet></ROW><ROW><id>13547888</id><snippet>import sys
sys.path.insert(0,"/path to your thesis folder/thesis_program")
from utils import execute
from classes import Grammatical_Evolution
</snippet></ROW><ROW><id>13547888</id><snippet>os.path.abspath('./thesis_program')</snippet></ROW><ROW><id>13547888</id><snippet>test_files</snippet></ROW><ROW><id>13547888</id><snippet>thesis_folder</snippet></ROW><ROW><id>13547888</id><snippet>import os, sys
lib_path = os.path.abspath('./thesis_program')
sys.path.insert(0,lib_path)
</snippet></ROW><ROW><id>13547929</id><snippet>threading</snippet></ROW><ROW><id>13547929</id><snippet>def run_progress_bar(finished_event):
    chars = itertools.cycle(r'-\|/')
    while not finished_event.is_set():
        sys.stdout.write('\rWorking ' + next(chars))
        sys.stdout.flush()
        finished_event.wait(0.2)


# somewhere else...
finished_event = threading.Event()
progress_bar_thread = threading.Thread(target=run_progress_bar, args=(finished_event,))
progress_bar_thread.start()
# do stuff
finished_event.set()
progress_bar_thread.join()
</snippet></ROW><ROW><id>13548002</id><snippet>c = [['YES', 'NO', 'YES', 'YES'],
     ['NO', 'NO', 'YES', 'NO'],
     ['YES', 'YES', 'YES', 'YES']]

INDICES = ['red', 'green', 'blue', 'yellow']
</snippet></ROW><ROW><id>13548002</id><snippet>INDICES</snippet></ROW><ROW><id>13548002</id><snippet>INDICES</snippet></ROW><ROW><id>13548002</id><snippet>zip</snippet></ROW><ROW><id>13548002</id><snippet>zip(*c)
#[('YES', 'NO', 'YES'),
# ('NO', 'NO', 'YES'),
# ('YES', 'YES', 'YES'),
# ('YES', 'NO', 'YES')]
</snippet></ROW><ROW><id>13548002</id><snippet>results = zip(INDICES, zip(*c))
#[('red', ('YES', 'NO', 'YES')),
# ('green', ('NO', 'NO', 'YES')),
# ('blue', ('YES', 'YES', 'YES')),
# ('yellow', ('YES', 'NO', 'YES'))]
</snippet></ROW><ROW><id>13548002</id><snippet>results</snippet></ROW><ROW><id>13548002</id><snippet>totals = [(ind, answers.count('YES')) for ind,answers in results]
#[('red', 2), ('green', 1), ('blue', 3), ('yellow', 2)]
</snippet></ROW><ROW><id>13548002</id><snippet>max</snippet></ROW><ROW><id>13548002</id><snippet>max(totals, key=lambda x: x[1])
#('blue', 3)
</snippet></ROW><ROW><id>13548002</id><snippet>max</snippet></ROW><ROW><id>13548002</id><snippet>key</snippet></ROW><ROW><id>13548002</id><snippet>1</snippet></ROW><ROW><id>13548002</id><snippet>max</snippet></ROW><ROW><id>13548002</id><snippet>totals = ((ind, answers.count('YES')) for ind,answers in results)
#&lt;generator object &lt;genexpr&gt; at 0x102581fa0&gt;
max(totals, key=lambda x: x[1])
#('blue', 3)
</snippet></ROW><ROW><id>13548002</id><snippet>max(((ind, answers.count('YES')) for (ind,answers) in zip(INDICES, zip(*c))), 
    key=lambda x: x[1])
</snippet></ROW><ROW><id>13548058</id><snippet>path</snippet></ROW><ROW><id>13548058</id><snippet>instance.path</snippet></ROW><ROW><id>13548058</id><snippet>get_file_path</snippet></ROW><ROW><id>13548058</id><snippet>save</snippet></ROW><ROW><id>13548276</id><snippet>__name__</snippet></ROW><ROW><id>13548699</id><snippet>inp = set(raw_input("Please enter the scrable letters you have: "))
with open('/usr/share/dict/words', 'r') as words:
    for word in words:
        if inp &lt;= set(word):
            print word,
</snippet></ROW><ROW><id>13548736</id><snippet>cards.py</snippet></ROW><ROW><id>13548736</id><snippet>blackjack.py</snippet></ROW><ROW><id>13548736</id><snippet>import</snippet></ROW><ROW><id>13548736</id><snippet># blackjack.py
import cards
</snippet></ROW><ROW><id>13548736</id><snippet>cards</snippet></ROW><ROW><id>13548736</id><snippet>cards.&lt;name&gt;</snippet></ROW><ROW><id>13548736</id><snippet>Deck</snippet></ROW><ROW><id>13548736</id><snippet># blackjack.py
import cards
mydeck = cards.Deck()
</snippet></ROW><ROW><id>13548736</id><snippet>from &lt;X&gt; import &lt;Y&gt;</snippet></ROW><ROW><id>13548736</id><snippet># blackjack.py
from cards import Deck  # or, to import everything, "from cards import *"
mydeck = Deck()
</snippet></ROW><ROW><id>13548736</id><snippet>cards.Deck</snippet></ROW><ROW><id>13548736</id><snippet>Deck</snippet></ROW><ROW><id>13548736</id><snippet>Hand</snippet></ROW><ROW><id>13548736</id><snippet>give</snippet></ROW><ROW><id>13548736</id><snippet>Deck</snippet></ROW><ROW><id>13548736</id><snippet>cards</snippet></ROW><ROW><id>13548736</id><snippet>class Deck(Hand):
    # ...
    def number_cards_used(self):
         return 52 - len(self.cards)
</snippet></ROW><ROW><id>13548736</id><snippet>cards.py</snippet></ROW><ROW><id>13548736</id><snippet>Deck</snippet></ROW><ROW><id>13548736</id><snippet># blackjack.py
def get_number_cards_used_from_deck(deck):
    return 52 - len(deck.cards)
</snippet></ROW><ROW><id>13548736</id><snippet># blackjack.py
import cards
mydeck = cards.Deck()
# ...
# Do other operations with deck
# ...
cards_used = get_number_cards_used_from_deck(mydeck)
</snippet></ROW><ROW><id>13548736</id><snippet>card_count</snippet></ROW><ROW><id>13548736</id><snippet>class Hand(object):
   # ...
   # other code
   # ....

   def card_count(self):
       return len(self.cards)
</snippet></ROW><ROW><id>13548736</id><snippet>sum(map(lambda h: h.card_count(), list_of_hands))
</snippet></ROW><ROW><id>13548736</id><snippet>Deck</snippet></ROW><ROW><id>13548736</id><snippet>Hand</snippet></ROW><ROW><id>13548736</id><snippet>class Deck(Hand):
    # ...
    # other code
    # ...

    def __init__(self):
        self.populate()
        self.used_cards = []

    def give(self, card, other_hand):
        self.used_cards.append(card)
        super(Deck, self).give(card, other_hand)

    def number_cards_used(self):
        return len(self.used_cards)
</snippet></ROW><ROW><id>13548866</id><snippet>        print("fillcircle",400,200,planets['Sun']['Radius']*scale)
        print("text ", "\"Sun\"",x+planets['Sun']['Radius']*scale,y)
             def planets:
                    if ~~~~~
</snippet></ROW><ROW><id>13549092</id><snippet>import operator
from collections import defaultdict
listoflists = [['A', 'B', 'C', 'D'], ['B', 'A', 'C', 'D'], ['B', 'C', 'D', 'A']]

def borda(listoflists):
   outdict = defaultdict(int)
   for item in listoflists:
      outdict[item[0]] += 3
      outdict[item[1]] += 2
      outdict[item[2]] += 1

   highestitem = max(outdict.iteritems(), key=operator.itemgetter(1))[0]
   outlist = [outdict[item[0]] for item in sorted(outdict.keys())]

   return (highestitem, outlist)
</snippet></ROW><ROW><id>13549092</id><snippet>import</snippet></ROW><ROW><id>13549092</id><snippet>import</snippet></ROW><ROW><id>13549092</id><snippet>listoflists = [['A', 'B', 'C', 'D'], ['B', 'A', 'C', 'D'], ['B', 'C', 'D', 'A']]

def borda(listoflists):
    outdict = {}
    for singlelist in listoflists:
        # Below, we're just turning singlelist around in order to
        # make use of index numbers from enumerate to add to the scores
        for index, item in enumerate(singlelist[2::-1]):
            if item not in outdict:
                outdict[item] = index + 1
            else:
                outdict[item] += index + 1

    highestitem = max(outdict.iteritems(), key=lambda i: i[1])[0]
    outlist = [outdict[item[0]] for item in sorted(outdict.keys())]

    return (highestitem, outlist)
</snippet></ROW><ROW><id>13549755</id><snippet>static</snippet></ROW><ROW><id>13549755</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>13549755</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>13549755</id><snippet>collectstatic</snippet></ROW><ROW><id>13549755</id><snippet>static</snippet></ROW><ROW><id>13549755</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>13549755</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>13549755</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>13549755</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>13549755</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>13549755</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>13549755</id><snippet>STATIC_URL</snippet></ROW><ROW><id>13549755</id><snippet>collectstatic</snippet></ROW><ROW><id>13549755</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>13549755</id><snippet>STATICFILE_DIRS</snippet></ROW><ROW><id>13549755</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>13549755</id><snippet>FileField</snippet></ROW><ROW><id>13549755</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>13550300</id><snippet>__init__.py</snippet></ROW><ROW><id>13550428</id><snippet>blah = [ [1,2,3], [1,3,2] ]

for bla in blah:
    print ' '.join(map(str, bla))
</snippet></ROW><ROW><id>13550428</id><snippet>map</snippet></ROW><ROW><id>13550428</id><snippet>for bla in blah:
    print ' '.join(str(n) for n in bla)
</snippet></ROW><ROW><id>13550428</id><snippet>for bla in blah:
    print '{} {} {}'.format(*bla)
</snippet></ROW><ROW><id>13550436</id><snippet>Base</snippet></ROW><ROW><id>13550436</id><snippet>#---- This is the third-party module ----#

class Base(object):
  def foo(self):
    print 'original foo'

class One(Base):
  def bar(self):
    self.foo()

class Two(Base):
  def bar(self):
    self.foo()

#---- This is your module ----#

# Test the original
One().bar()
Two().bar()

# Monkey-patch and test
def Base_foo(self):
  print 'monkey-patched foo'

Base.foo = Base_foo

One().bar()
Two().bar()
</snippet></ROW><ROW><id>13550436</id><snippet>original foo
original foo
monkey-patched foo
monkey-patched foo
</snippet></ROW><ROW><id>13550527</id><snippet>list(im.getdata())
</snippet></ROW><ROW><id>13550527</id><snippet>for pixel in iter(im.getdata()):
    print pixel
</snippet></ROW><ROW><id>13550615</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>13550615</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>13550615</id><snippet>import numpy as np
data = np.genfromtxt('e:\dir1\datafile.csv', delimiter=',', skip_header=10,
                     skip_footer=10, names=['x', 'y', 'z'])
</snippet></ROW><ROW><id>13550615</id><snippet>names=True</snippet></ROW><ROW><id>13550615</id><snippet>ax1.plot(data['x'], data['y'], color='r', label='the data')
</snippet></ROW><ROW><id>13550615</id><snippet>ipython</snippet></ROW><ROW><id>13550615</id><snippet>spider</snippet></ROW><ROW><id>13550975</id><snippet>layers = []
counter = 0
while True:
    layer = pkt.getlayer(counter)
    if (layer != None):
        print layer.name
        layers.append(layer.name)
    else:
        break
    counter += 1

print "Layers are:\t\t",layers
</snippet></ROW><ROW><id>13551018</id><snippet>QStackedWidget</snippet></ROW><ROW><id>13551018</id><snippet>from PyQt4 import QtCore, QtGui


class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.central_widget = QtGui.QStackedWidget()
        self.setCentralWidget(self.central_widget)
        login_widget = LoginWidget(self)
        login_widget.button.clicked.connect(self.login)
        self.central_widget.addWidget(login_widget)
    def login(self):
        logged_in_widget = LoggedWidget(self)
        self.central_widget.addWidget(logged_in_widget)
        self.central_widget.setCurrentWidget(logged_in_widget)


class LoginWidget(QtGui.QWidget):
    def __init__(self, parent=None):
        super(LoginWidget, self).__init__(parent)
        layout = QtGui.QHBoxLayout()
        self.button = QtGui.QPushButton('Login')
        layout.addWidget(self.button)
        self.setLayout(layout)
        # you might want to do self.button.click.connect(self.parent().login) here


class LoggedWidget(QtGui.QWidget):
    def __init__(self, parent=None):
        super(LoggedWidget, self).__init__(parent)
        layout = QtGui.QHBoxLayout()
        self.label = QtGui.QLabel('logged in!')
        layout.addWidget(self.label)
        self.setLayout(layout)



if __name__ == '__main__':
    app = QtGui.QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()
</snippet></ROW><ROW><id>13551018</id><snippet>QMainWindow.setCentralWidget</snippet></ROW><ROW><id>13551018</id><snippet>login</snippet></ROW><ROW><id>13551018</id><snippet>login</snippet></ROW><ROW><id>13551018</id><snippet>LoginScreen</snippet></ROW><ROW><id>13551018</id><snippet>LoginScreen</snippet></ROW><ROW><id>13551018</id><snippet>QStackedWidget</snippet></ROW><ROW><id>13551033</id><snippet>def search_entries():
    found = 0
    search = raw_input("Please enter the person's name: ")
    for line in open('addbook.txt', 'r').readlines():
        if search in line:
            found = 1
        if found &gt;= 1:
            print line
            found = found + 1
            if found == 4: break
</snippet></ROW><ROW><id>13551061</id><snippet>with ...</snippet></ROW><ROW><id>13551061</id><snippet>gethostbyaddr</snippet></ROW><ROW><id>13551061</id><snippet>from string import rstrip
from socket import gethostbyaddr

with open('csv_list.csv', 'r') as csv_file:
    for line in csv_file:
        ip = line.strip()
        try:
            dns_name = gethostbyaddr(ip)
            print "IP: %s, DNS Name: %s" % (ip, dns_name[0])
        except Exception, e:
            print "IP: %s, DNS lookup error: %s" % (ip, e)
</snippet></ROW><ROW><id>13551061</id><snippet>1.2.3.4
8.8.8.8
4.4.4.4
bad IP
1.2.3
</snippet></ROW><ROW><id>13551061</id><snippet>IP: 1.2.3.4, DNS lookup error: [Errno 1] Unknown host
IP: 8.8.8.8, DNS Name: google-public-dns-a.google.com
IP: 4.4.4.4, DNS lookup error: [Errno 1] Unknown host
IP: bad IP, DNS lookup error: [Errno 8] nodename nor servname provided, or not known
IP: 1.2.3, DNS lookup error: [Errno 1] Unknown host
</snippet></ROW><ROW><id>13551851</id><snippet>class UserAdmin(sqlamodel.ModelView):
    searchable_columns = ('username', 'email')
    excluded_list_columns = ['password']
    list_columns = ('username', 'email')
    form_columns = ('username', 'email')

    def scaffold_form(self):
        form_class = super(UserAdmin, self).scaffold_form()
        form_class.password = wtf.TextField('Password')
        return form_class
</snippet></ROW><ROW><id>13552107</id><snippet>the_deletion_func</snippet></ROW><ROW><id>13552107</id><snippet>self</snippet></ROW><ROW><id>13552256</id><snippet>test.Open / test.Open.shift()</snippet></ROW><ROW><id>13552256</id><snippet>shift</snippet></ROW><ROW><id>13552456</id><snippet>BinaryTree</snippet></ROW><ROW><id>13552456</id><snippet>import networkx as nx
import itertools as IT
import matplotlib.pyplot as plt

class BinaryTree(object):
   def __init__(self, data):
      self.data = data
      self.right = None
      self.left = None
      self.name = None
   def edgelist(self, counter = IT.count().next):
       self.name = counter() if self.name is None else self.name
       for node in (self.left, self.right):       
           if node:
               node.name = counter() if node.name is None else node.name
               yield (self.name, node.name)
       for node in (self.left, self.right):
           if node:
               for n in node.edgelist(counter):
                   yield n

tree = [BinaryTree(i) for i in range(5)]        
tree[0].left = tree[1]
tree[0].right = tree[2]
tree[2].left = tree[3]
tree[2].right = tree[4]

edgelist = list(tree[0].edgelist())
print(edgelist)   

G = nx.Graph(edgelist)
nx.draw_spectral(G)
plt.show()
</snippet></ROW><ROW><id>13552456</id><snippet>[(0, 1), (0, 2), (2, 3), (2, 4)]
</snippet></ROW><ROW><id>13552513</id><snippet>obj, created = Person.objects.get_or_create(first_name='John', 
    last_name='Lennon', defaults={'birthday': date(1940, 10, 9)})
</snippet></ROW><ROW><id>13552513</id><snippet>vote, created = Vote.objects.get_or_create(
    voted_by = request.user,
    vote_type = vtype.get(field_name),
    defaults = dict(
        voted_for_id = mobj.shared_by_id,
        shared_object_id = oid
      )
    )
</snippet></ROW><ROW><id>13552592</id><snippet>A="2+3+4"
A=A.replace('+', " + ")
A=A.split()
</snippet></ROW><ROW><id>13552592</id><snippet>A="2+3+4"
A=list(A)
</snippet></ROW><ROW><id>13552592</id><snippet>A="123+456"</snippet></ROW><ROW><id>13552592</id><snippet>['1','2','3','+','4','5','6']</snippet></ROW><ROW><id>13552592</id><snippet>['123','+','456']</snippet></ROW><ROW><id>13552784</id><snippet>&gt;&gt;&gt; import spwd
&gt;&gt;&gt; spwd.getspnam('root')
spwd.struct_spwd(sp_nam='root', sp_pwd='!', sp_lstchg=15238, sp_min=0, sp_max=99999, sp_warn=7, sp_inact=-1, sp_expire=-1, sp_flag=-1)
</snippet></ROW><ROW><id>13552784</id><snippet>/etc/shadow</snippet></ROW><ROW><id>13552808</id><snippet>from google.appengine.ext import deferred

  def do_something_expensive(a, b, c=None):
      logging.info("Doing something expensive!")
      # Do your work here

  # Somewhere else
  deferred.defer(do_something_expensive, "Hello, world!", 42, c=True)
</snippet></ROW><ROW><id>13552945</id><snippet>n</snippet></ROW><ROW><id>13552945</id><snippet>iterable</snippet></ROW><ROW><id>13552945</id><snippet>def nth(iterable, n, default=None):
    "Returns the nth item or a default value"
    return next(islice(iterable, n, None), default)
</snippet></ROW><ROW><id>13552945</id><snippet>first = nth(iteration, 0)
tenth = nth(iteration, 8)  # since we've already taken one
hundredth = nth(iteration, 89)  # since we've already taken ten
# etc
</snippet></ROW><ROW><id>13552945</id><snippet>tee</snippet></ROW><ROW><id>13552945</id><snippet>nth</snippet></ROW><ROW><id>13553268</id><snippet>% if request.url == request.route_url('my_route_name')
##do stuff
%endif
</snippet></ROW><ROW><id>13553362</id><snippet>def parse_datetime(warrant_issued):
   try:
      warrant_issued_no = datetime.strptime(warrant_issued, '%m/%d/%Y')
   except ValueError:
      warrant_issued_no = ''

warrants_issued = [ parse_datetime(cell.get_text().strip()) for cell in cells ]
</snippet></ROW><ROW><id>13553483</id><snippet>1.php</snippet></ROW><ROW><id>13553483</id><snippet>UnicodeDecodeError: 'gb2312' codec can't decode bytes in position 99-100:
  illegal multibyte sequence
</snippet></ROW><ROW><id>13553483</id><snippet>errors='replace'</snippet></ROW><ROW><id>13553483</id><snippet>mode='rU'</snippet></ROW><ROW><id>13553483</id><snippet>file_old=open('1.php', mode='rU', encoding='gb2312', errors='replace')
</snippet></ROW><ROW><id>13553483</id><snippet>U+FFFD REPLACEMENT CHARACTER</snippet></ROW><ROW><id>13553483</id><snippet>&lt;!doctype html&gt;
&lt;html&gt;&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
</snippet></ROW><ROW><id>13553483</id><snippet>呶</snippet></ROW><ROW><id>13553483</id><snippet>㎜</snippet></ROW><ROW><id>13553483</id><snippet>iconv</snippet></ROW><ROW><id>13553483</id><snippet>file_old=open('1.php', mode='rU', encoding='big5', errors='strict')
file_new=open('2.php', mode='w', encoding='utf-8')
file_new.write(file_old.read())
</snippet></ROW><ROW><id>13553483</id><snippet>1.php</snippet></ROW><ROW><id>13553483</id><snippet>&lt;meta charset="gb2312"&gt;</snippet></ROW><ROW><id>13553483</id><snippet>&lt;meta charset="gbk"&gt;</snippet></ROW><ROW><id>13553483</id><snippet>㎜</snippet></ROW><ROW><id>13553483</id><snippet>file_old=open('1.php', mode='rU', encoding='gbk', errors='strict')
</snippet></ROW><ROW><id>13553588</id><snippet>client = requests.session(config={'verbose': sys.stderr})

# Retrieve the CSRF token first
client.get(URL)  # sets the cookie
csrftoken = client.cookies['csrftoken']

login_data = dict(username=EMAIL, password=PASSWORD, csrfmiddlewaretoken=csrftoken)
r = client.post(URL, data=login_data, headers={"Referer": "foo"})
</snippet></ROW><ROW><id>13553764</id><snippet>def elimina_client(self):
    with open("clienti.txt","r") as f:
        lines=f.readlines()

    with open("clienti.txt","w") as f:  
        [f.write(line) for line in lines if line.strip() ]
</snippet></ROW><ROW><id>13554182</id><snippet>UserSizer.Add( upperSizer, 0, wx.EXPAND, 5 )
</snippet></ROW><ROW><id>13554182</id><snippet>UserSizer.Add( lowerSizer, 0, 0, 5 )
</snippet></ROW><ROW><id>13554182</id><snippet>    # -*- coding: utf-8 -*-

###########################################################################
## Python code generated with wxFormBuilder (version Oct  8 2012)
## http://www.wxformbuilder.org/
##
## PLEASE DO "NOT" EDIT THIS FILE!
###########################################################################

import os
import wx
import wx.xrc
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import \
    FigureCanvasWxAgg as FigureCanvas, \
    NavigationToolbar2WxAgg as NavigationToolbar
#from numpy import arange, sin, pi

###########################################################################
## Class MainFrame
###########################################################################

class MainFrame ( wx.Frame ):

    def __init__( self, parent ):
        wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"计算机插值 v0.1", pos = wx.DefaultPosition, size = wx.Size( 508,530 ), style = wx.DEFAULT_FRAME_STYLE|wx.FRAME_SHAPED|wx.TAB_TRAVERSAL )

        self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )
        self.SetForegroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_3DLIGHT ) )

        ####################################################################
        self.MainMenu = wx.MenuBar( 0 )
        self.File = wx.Menu()
        self.SaveAs = wx.MenuItem( self.File, wx.ID_ANY, u"另存为...", wx.EmptyString, wx.ITEM_NORMAL )
        self.File.AppendItem( self.SaveAs )

        self.Exit = wx.MenuItem( self.File, wx.ID_ANY, u"退出...", wx.EmptyString, wx.ITEM_NORMAL )
        self.File.AppendItem( self.Exit )

        self.MainMenu.Append( self.File, u"文件" )

        self.About_M = wx.Menu()
        self.About = wx.MenuItem( self.About_M, wx.ID_ANY, u"关于", wx.EmptyString, wx.ITEM_NORMAL )
        self.About_M.AppendItem( self.About )

        self.MainMenu.Append( self.About_M, u"关于" )

        self.SetMenuBar( self.MainMenu )

        ####################################################################
        MainSizer = wx.BoxSizer( wx.VERTICAL )

        self.MainPanel = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        UserSizer = wx.BoxSizer( wx.VERTICAL )

        upperSizer = wx.BoxSizer( wx.HORIZONTAL )
        ####################################################################

        self.TextExplanation = wx.StaticText( self.MainPanel, wx.ID_ANY, u"请在下面输入框内输入要插值的数，以空格间隔。\n输入范围在(1.2, 2.0)。", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.TextExplanation.Wrap( -1 )
        upperSizer.Add( self.TextExplanation, 0, wx.ALL, 20 )


        upperSizer.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )

        RadioBoxInterpolationChoices = [ u"线性插值", u"抛物线插值" ]
        self.RadioBoxInterpolation = wx.RadioBox( self.MainPanel, wx.ID_ANY, u"插值种类", wx.DefaultPosition, wx.DefaultSize, RadioBoxInterpolationChoices, 1, wx.RA_SPECIFY_COLS )
        self.RadioBoxInterpolation.SetSelection( 1 )
        upperSizer.Add( self.RadioBoxInterpolation, 0, wx.ALL, 5 )


        UserSizer.Add( upperSizer, 0, wx.EXPAND, 5 )

        lowerSizer = wx.BoxSizer( wx.HORIZONTAL )

        self.TextCtrVal = wx.TextCtrl( self.MainPanel, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_PROCESS_ENTER )
        lowerSizer.Add( self.TextCtrVal, 0, wx.ALL, 20 )


        lowerSizer.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )

        self.ButtonCal = wx.Button( self.MainPanel, wx.ID_ANY, u"计算", wx.DefaultPosition, wx.DefaultSize, 0 )
        lowerSizer.Add( self.ButtonCal, 0, wx.ALL, 20 )

        self.ButtonCls = wx.Button( self.MainPanel, wx.ID_ANY, u"清空", wx.DefaultPosition, wx.DefaultSize, 0 )
        lowerSizer.Add( self.ButtonCls, 0, wx.ALL, 20 )


        UserSizer.Add( lowerSizer, 0, 0, 5 )

        PlotSizer = wx.BoxSizer( wx.VERTICAL )

        #################################################
        p1 = PlotPanel(self)
        PlotSizer.Add(p1, 1, wx.EXPAND |wx.ALL,1)

        #################################################
        UserSizer.Add( PlotSizer, 1, wx.EXPAND, 5 )


        self.MainPanel.SetSizer( UserSizer )
        self.MainPanel.Layout()
        UserSizer.Fit( self.MainPanel )
        MainSizer.Add( self.MainPanel, 1, wx.EXPAND |wx.ALL, 1 )


        self.SetSizer( MainSizer )
        self.Layout()

        self.Centre( wx.BOTH )

        # Connect Events
        self.Bind( wx.EVT_MENU, self.SaveAsFile, id = self.SaveAs.GetId() )
        self.Bind( wx.EVT_MENU, self.ExitNow, id = self.Exit.GetId() )
        self.Bind( wx.EVT_MENU, self.Dialog, id = self.About.GetId() )
        self.TextCtrVal.Bind( wx.EVT_TEXT_ENTER, self.Calculate )
        self.ButtonCal.Bind( wx.EVT_BUTTON, self.Calcualte )
        self.ButtonCls.Bind( wx.EVT_BUTTON, self.ClearPlot )

        # Necessary varibles
        selection = self.RadioBoxInterpolation.GetSelection()

    def __del__( self ):
        pass

    # Virtual event handlers, overide them in your derived class
    def SaveAsFile( self, event ):
        event.Skip()

    def ExitNow( self, event ):
        self.Close(True)

    def Dialog( self, event ):
        dlg = wx.MessageDialog( self, u"Test", u"Test", wx.OK)
        dlg.ShowModal()
        dlg.Destroy()

    def Calculate( self, event ):
        event.Skip()

    def Calcualte( self, event ):
        event.Skip()

    def ClearPlot( self, event ):
        event.Skip()

###########################################################################
## Class PlotPanel
###########################################################################

class PlotPanel(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent, -1,size=(300,530))
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.figure = matplotlib.figure.Figure(figsize=(5,4))
        self.axes = self.figure.add_subplot(111)
        self.y_max = 2.0
        self.canvas = FigureCanvas(self,-1,self.figure)

        self.sizer.Add(self.canvas,proportion =1, border = 5,flag = wx.ALL | wx.EXPAND)
        self.SetSizer(self.sizer)

if __name__ == '__main__':
    app = wx.PySimpleApp()
    app.frame = MainFrame(None)
    app.frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>13554254</id><snippet>'listings.models.Listing'</snippet></ROW><ROW><id>13554254</id><snippet>'listings.Listing'</snippet></ROW><ROW><id>13554254</id><snippet>'users.models.User'</snippet></ROW><ROW><id>13554254</id><snippet>'users.User'</snippet></ROW><ROW><id>13554254</id><snippet>'auth.User'</snippet></ROW><ROW><id>13554254</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>13554493</id><snippet>&gt;&gt;&gt; class C:
        def function(self):
            text = inspect.stack()[1][4][0].strip().split('.')
            return '{0} calls {1}'.format(*text)

&gt;&gt;&gt; myVar = C()
&gt;&gt;&gt; myVar.function()
'myVar calls function()'
</snippet></ROW><ROW><id>13554601</id><snippet>click()</snippet></ROW><ROW><id>13554601</id><snippet>A</snippet></ROW><ROW><id>13554601</id><snippet>evaluateJavaScript()</snippet></ROW><ROW><id>13554601</id><snippet>alert()</snippet></ROW><ROW><id>13554601</id><snippet>click</snippet></ROW><ROW><id>13554601</id><snippet>null</snippet></ROW><ROW><id>13554601</id><snippet>link.evaluateJavaScript('this.click')
</snippet></ROW><ROW><id>13554601</id><snippet>def _loadComplete(self):
    page = self.page()
    doc = page.currentFrame().documentElement()
    link = doc.findFirst('#link-signup')
    if link and not link.isNull():
        self.load(QUrl.fromEncoded(link.attribute('href').toAscii()))
</snippet></ROW><ROW><id>13554601</id><snippet>def _loadComplete(self):
    page = self.page()
    doc = page.currentFrame().documentElement()
    link = doc.findFirst('#link-signup')
    if link and not link.isNull():
        pos = link.geometry().center()
        self._doMouseClick(page, pos)
    else:
        print "Link not found"

@staticmethod
def _doMouseClick(obj, pos):
    # mouse down
    evt = QMouseEvent(QEvent.MouseButtonPress, pos, 
                            Qt.LeftButton, Qt.LeftButton, Qt.NoModifier)
    QApplication.sendEvent(obj, evt)
    # mouse up
    evt = QMouseEvent(QEvent.MouseButtonRelease, pos, 
                            Qt.LeftButton, Qt.LeftButton, Qt.NoModifier)
    QApplication.sendEvent(obj, evt)
</snippet></ROW><ROW><id>13554601</id><snippet>def _loadComplete(self):
    page = self.page()
    doc = page.currentFrame().documentElement()
    link = doc.findFirst('#link-signup')
    if link and not link.isNull():
        link.evaluateJavaScript("""
            var e = document.createEvent('MouseEvents');
            e.initEvent('click', true, true);
            this.dispatchEvent(e);  
        """)  
</snippet></ROW><ROW><id>13554665</id><snippet>from datetime import datetime

def convertTime(s):
    print datetime.strptime(s, '%H%M').strftime('%I:%M%p').lower()
</snippet></ROW><ROW><id>13554665</id><snippet>hours = input[0:2]
minutes = input[2:4]
</snippet></ROW><ROW><id>13554665</id><snippet>hours = int(hours)
minutes = int(minutes)
</snippet></ROW><ROW><id>13554665</id><snippet>hours, minutes = int(input[0:2]), int(input[2:4])
</snippet></ROW><ROW><id>13554665</id><snippet>hours</snippet></ROW><ROW><id>13554665</id><snippet>hours</snippet></ROW><ROW><id>13554665</id><snippet>hours==0</snippet></ROW><ROW><id>13554665</id><snippet>if hours &gt; 12:
    afternoon = True
    hours -= 12
else:
    afternoon = False
    if hours == 0:
        # Special case
        hours = 12
</snippet></ROW><ROW><id>13554665</id><snippet>print '{hours}:{minutes:02d}{postfix}'.format(
    hours=hours,
    minutes=minutes,
    postfix='pm' if afternoon else 'am'
)
</snippet></ROW><ROW><id>13554665</id><snippet>def convertTime(input):
    h, m = int(input[0:2]), int(input[2:4])

    postfix = 'am'

    if h &gt; 12:
        postfix = 'pm'
        h -= 12

    print '{}:{:02d}{}'.format(h or 12, m, postfix)

convertTime('0000') 
convertTime('1337') 
convertTime('0429') 
convertTime('2359') 
convertTime('1111') 
</snippet></ROW><ROW><id>13554665</id><snippet>12:00am
1:37pm
4:29am
11:59pm
11:11am
</snippet></ROW><ROW><id>13554773</id><snippet>except</snippet></ROW><ROW><id>13554773</id><snippet>def scrape_all_pages(alphabet):
    try:
        pages = get_all_urls(alphabet)
    except IndexError: #IndexError is an example
        ## LOG THE ERROR IF THAT FAILS.

    for page in pages:
        try:
            scrape_table(page)
        except IndexError: # IndexError is an example
            ## LOG THE ERROR IF THAT FAILS and continue this loop
</snippet></ROW><ROW><id>13555008</id><snippet>A</snippet></ROW><ROW><id>13555008</id><snippet>In [4]: base64.b64decode('aHR0cDovLzR1ZnJlZS50ay9tZWRpYTcyMzY0Ni9mdWVuZi8wMzYubXAz')
Out[4]: 'http://4ufree.tk/media723646/fuenf/036.mp3'
</snippet></ROW><ROW><id>13555044</id><snippet>a.join()</snippet></ROW><ROW><id>13555044</id><snippet>b.start()</snippet></ROW><ROW><id>13555044</id><snippet>a=CallSomebody(call, 'Ghostbusters!')
a.daemon=True
b=CallSomebody(call, 'The Exorcist!')
b.daemon=True
a.start()
b.start()
a.join()
b.join()
</snippet></ROW><ROW><id>13555087</id><snippet>Password</snippet></ROW><ROW><id>13555087</id><snippet>''</snippet></ROW><ROW><id>13555087</id><snippet>bruteForce3</snippet></ROW><ROW><id>13555087</id><snippet>Password</snippet></ROW><ROW><id>13555087</id><snippet>xLenN</snippet></ROW><ROW><id>13555087</id><snippet>Password != PasswordIn</snippet></ROW><ROW><id>13555087</id><snippet>while</snippet></ROW><ROW><id>13555087</id><snippet>while</snippet></ROW><ROW><id>13555087</id><snippet>while</snippet></ROW><ROW><id>13555087</id><snippet>Password</snippet></ROW><ROW><id>13555087</id><snippet>continue</snippet></ROW><ROW><id>13555167</id><snippet>fileNameTemplate = r'C:\documents\Plot{0:02d}.png'

for subdir,dirs,files in os.walk(rootdir):
    for count, file in enumerate(files):
        # Generate a plot in `pl`
        pl.savefig(fileNameTemplate.format(count), format='png')
        pl.clf()  # Clear the figure for the next loop
</snippet></ROW><ROW><id>13555167</id><snippet>enumerate()</snippet></ROW><ROW><id>13555222</id><snippet>data</snippet></ROW><ROW><id>13555222</id><snippet>n</snippet></ROW><ROW><id>13555222</id><snippet>i</snippet></ROW><ROW><id>13555222</id><snippet>abs(data[start]-data[end])</snippet></ROW><ROW><id>13555222</id><snippet>e</snippet></ROW><ROW><id>13555222</id><snippet>i</snippet></ROW><ROW><id>13555222</id><snippet>i</snippet></ROW><ROW><id>13555222</id><snippet>data</snippet></ROW><ROW><id>13555222</id><snippet>data</snippet></ROW><ROW><id>13555222</id><snippet>i</snippet></ROW><ROW><id>13555328</id><snippet>from itertools import islice

def window(seq, n=2):
    "Returns a sliding window (of width n) over data from the iterable"
    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
    it = iter(seq)
    result = tuple(islice(it, n))
    if len(result) == n:
        yield result    
    for elem in it:
        result = result[1:] + (elem,)
        yield result

def check_ranges(lst):
    return any(a[1] &lt; b[1] for a, b in window(sorted(lst)))
</snippet></ROW><ROW><id>13555328</id><snippet>window</snippet></ROW><ROW><id>13555328</id><snippet>&gt;&gt;&gt; def check_ranges(lst):
...     return any(a[1] &lt; b[1] for a, b in window(sorted(lst)))
... 
&gt;&gt;&gt; check_ranges([(7,16),(6,17),(5,18),(4,19)])
False
&gt;&gt;&gt; check_ranges([(5,16),(6,17),(5,18),(4,19)])
True
</snippet></ROW><ROW><id>13555328</id><snippet>&lt;</snippet></ROW><ROW><id>13555328</id><snippet>&lt;=</snippet></ROW><ROW><id>13555350</id><snippet>lxml</snippet></ROW><ROW><id>13555350</id><snippet>from bs4 import BeautifulSoup as BS
import urllib2

soup = BS(urllib2.urlopen("./test.html").read())
contents = [str(x.text) for x in soup.find(id="start_dateid").find_all('option')]
</snippet></ROW><ROW><id>13555350</id><snippet>id='start_dateid'</snippet></ROW><ROW><id>13555350</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>13555350</id><snippet>id</snippet></ROW><ROW><id>13555350</id><snippet>id</snippet></ROW><ROW><id>13555350</id><snippet>&lt;option&gt;</snippet></ROW><ROW><id>13555350</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>13555350</id><snippet>&lt;option&gt;</snippet></ROW><ROW><id>13555557</id><snippet>self.planets</snippet></ROW><ROW><id>13555557</id><snippet>Planet</snippet></ROW><ROW><id>13555557</id><snippet>mass</snippet></ROW><ROW><id>13555557</id><snippet>name</snippet></ROW><ROW><id>13555557</id><snippet>print</snippet></ROW><ROW><id>13555557</id><snippet>str</snippet></ROW><ROW><id>13555557</id><snippet>str</snippet></ROW><ROW><id>13555557</id><snippet>__str__</snippet></ROW><ROW><id>13555557</id><snippet>Planet</snippet></ROW><ROW><id>13555557</id><snippet>__str__</snippet></ROW><ROW><id>13555564</id><snippet>top.append()</snippet></ROW><ROW><id>13555564</id><snippet>top.append()</snippet></ROW><ROW><id>13555564</id><snippet>&gt;&gt;&gt; [].append(0) is None
True
</snippet></ROW><ROW><id>13555564</id><snippet>.append()</snippet></ROW><ROW><id>13555564</id><snippet>top</snippet></ROW><ROW><id>13555564</id><snippet>top.append(listTop[i])
bottom.append(listBottom[i])
foobar(depth+1, top, bottom)
</snippet></ROW><ROW><id>13555564</id><snippet>n=len(listTop)</snippet></ROW><ROW><id>13555650</id><snippet>app</snippet></ROW><ROW><id>13555650</id><snippet>index</snippet></ROW><ROW><id>13555650</id><snippet>index.html</snippet></ROW><ROW><id>13555650</id><snippet>app = webapp2.WSGIApplication([('/', MainPage)])
</snippet></ROW><ROW><id>13555650</id><snippet>index</snippet></ROW><ROW><id>13555650</id><snippet>/index.html</snippet></ROW><ROW><id>13555650</id><snippet>/</snippet></ROW><ROW><id>13555650</id><snippet>index.html</snippet></ROW><ROW><id>13555650</id><snippet>app = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/index\.html', MainPage)
])
</snippet></ROW><ROW><id>13555650</id><snippet>index.html</snippet></ROW><ROW><id>13555650</id><snippet>index.</snippet></ROW><ROW><id>13555650</id><snippet>/</snippet></ROW><ROW><id>13555650</id><snippet>app = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/index\..*', MainPage)
])
</snippet></ROW><ROW><id>13555848</id><snippet>line = reader.next()
for next_line in reader:
    # Do your processing
    line = next_line
# Now do whatever needs to be done with the very last line
</snippet></ROW><ROW><id>13556232</id><snippet>BigramAssocMeasures</snippet></ROW><ROW><id>13556232</id><snippet>pos_tag()</snippet></ROW><ROW><id>13556232</id><snippet>Tree.parse()</snippet></ROW><ROW><id>13556232</id><snippet>text.similar()</snippet></ROW><ROW><id>13556322</id><snippet>while cursor.alive:
    try:
        doc = yield motor.Op(cursor.next_object)
        global mile

        if doc: ...............
</snippet></ROW><ROW><id>13556619</id><snippet>raw_input</snippet></ROW><ROW><id>13556619</id><snippet>import sys
x = raw_input('Enter katakana: ').decode(sys.stdin.encoding)
</snippet></ROW><ROW><id>13556619</id><snippet>x</snippet></ROW><ROW><id>13556619</id><snippet>ascii</snippet></ROW><ROW><id>13556675</id><snippet>children = []</snippet></ROW><ROW><id>13556675</id><snippet>def __init__(self, ..., children = None):
    if children is None: children = []
</snippet></ROW><ROW><id>13556732</id><snippet>In [95]: soup = BeautifulSoup(content)

In [96]: soup.find("span", {"class": "egV2_archivedDateEnded"})
Out[96]: &lt;span class="egV2_archivedDateEnded"&gt;STARTS&lt;/span&gt;

In [97]: soup.find("span", {"class": "egV2_archivedDateEnded"}).next
Out[97]: u'STARTS'

In [98]: soup.find("span", {"class": "egV2_archivedDateEnded"}).next.next
Out[98]: u'Fri 23 Nov,10:00AM'
</snippet></ROW><ROW><id>13556732</id><snippet>In [99]: soup.find("span", {"class": "egV2_archivedDateEnded"}).nextSibling
Out[99]: u'Fri 23 Nov,10:00AM'
</snippet></ROW><ROW><id>13556834</id><snippet>numpy.vectorize</snippet></ROW><ROW><id>13556834</id><snippet>numpy.vectorize</snippet></ROW><ROW><id>13556897</id><snippet>ascii_count % 1000</snippet></ROW><ROW><id>13556897</id><snippet>%</snippet></ROW><ROW><id>13556897</id><snippet>ab</snippet></ROW><ROW><id>13556897</id><snippet>ba</snippet></ROW><ROW><id>13556897</id><snippet>for character_index in range(0,len(character_list)):
        ascii_count += ord(character_list[character_index])
</snippet></ROW><ROW><id>13556897</id><snippet>for character in character_list:
        ascii_count += ord(character)
</snippet></ROW><ROW><id>13556928</id><snippet>x</snippet></ROW><ROW><id>13556928</id><snippet>@staticmethod
def deep_list(x):
    """fully copies trees of tuples to a tree of lists.
       deep_list( (1,2,(3,4)) ) returns [1,2,[3,4]]"""
    if type(x)!=type( () ):
        return x
    return map(deep_list,x)
</snippet></ROW><ROW><id>13556928</id><snippet>def deep_list(self):
    """fully copies trees of tuples to a tree of lists.
       deep_list( (1,2,(3,4)) ) returns [1,2,[3,4]]"""
    if type(self.x)!=type( () ):
        return self.x
    return map(deep_list, self.x)
</snippet></ROW><ROW><id>13556928</id><snippet>list</snippet></ROW><ROW><id>13556928</id><snippet>self</snippet></ROW><ROW><id>13556928</id><snippet>def deep_list(self):
    """fully copies trees of tuples to a tree of lists.
       deep_list( (1,2,(3,4)) ) returns [1,2,[3,4]]"""
    if type(self)!=type( () ):
        return self
    return map(deep_list, self)
</snippet></ROW><ROW><id>13556984</id><snippet>print "inside aaa" # bbb, ccc</snippet></ROW><ROW><id>13556984</id><snippet>a</snippet></ROW><ROW><id>13556984</id><snippet>$ python aaa/a.py 
inside aaa
inside bbb
inside aaa
Traceback (most recent call last):
  File "aaa/a.py", line 2, in &lt;module&gt;
    from bbb.b import b_method
  File "/Users/user/Desktop/project/bbb/b.py", line 2, in &lt;module&gt;
    from aaa.a import a_method
  File "/Users/user/Desktop/project/aaa/a.py", line 2, in &lt;module&gt;
    from bbb.b import b_method
ImportError: cannot import name b_method
</snippet></ROW><ROW><id>13556984</id><snippet>a.py</snippet></ROW><ROW><id>13556984</id><snippet>b.py</snippet></ROW><ROW><id>13556984</id><snippet>b</snippet></ROW><ROW><id>13556984</id><snippet>a</snippet></ROW><ROW><id>13556984</id><snippet>bbb</snippet></ROW><ROW><id>13556984</id><snippet>b</snippet></ROW><ROW><id>13556984</id><snippet>b_method</snippet></ROW><ROW><id>13556984</id><snippet>import bbb</snippet></ROW><ROW><id>13557048</id><snippet>join</snippet></ROW><ROW><id>13557048</id><snippet>wx</snippet></ROW><ROW><id>13557048</id><snippet>AppInstance.MainLoop()</snippet></ROW><ROW><id>13557050</id><snippet>def plot_normalized(agged, show_errorbars, filename):
  combined = {}
  for k in agged:
    combined[k] = agged[k]['CPS_norm_mean']
  combined = pandas.DataFrame(combined)

  ax=combined.plot()

  if show_errorbars:
    for k in agged:
      plt.errorbar(
        x=agged[k].index,
        y=agged[k]['CPS_norm_mean'],
        yerr=agged[k]['CPS_norm_std'],
        label = k #added
      )

  if show_errorbars: #try this, dirty fix
   labels, handles = ax.get_legend_handles_labels()
   N = len(handles)/2
   plt.legend(labels[:N], handles[N:])

  #Why does the fix work?:
  #labels, handles = ax.get_legend_handles_labels()
  #print handles
  #out:
  #[u'Blank', u'H9A', u'Q180K', u'Wildtype', 'Q180K', 'H9A', 'Wildtype', 'Blank']
  #Right half has correct order, these are the labels from label=k above in errorplot



  plt.xlabel('Time')
  plt.ylabel('CPS/Absorbency')
  plt.title('CPS/Absorbency vs. Time')
  plt.savefig(filename)
</snippet></ROW><ROW><id>13557206</id><snippet>for o in objects:
    with files.open(o, 'r') as f:
        data_list = []

        chunk = f.read(1000)

        while chunk != "":
            data_list.append(chunk)
            chunk = f.read(1000)

        data = "".join(data_list)

        """ once completed, write """
        zfile.writestr(o.encode('utf-8'),data)
</snippet></ROW><ROW><id>13557305</id><snippet>aggregate</snippet></ROW><ROW><id>13557305</id><snippet>count()</snippet></ROW><ROW><id>13557305</id><snippet>from django.db.models import Sum
total_points = Player.objects.aggregate(Sum('points'))['points__sum']
num_matches = Match.objects.count()
average_points_per_match = total_points / num_matches
</snippet></ROW><ROW><id>13557386</id><snippet>post_save</snippet></ROW><ROW><id>13557386</id><snippet>save()</snippet></ROW><ROW><id>13557386</id><snippet>counter = IntegerField(default=0)</snippet></ROW><ROW><id>13557386</id><snippet>Nation</snippet></ROW><ROW><id>13557386</id><snippet>Entry</snippet></ROW><ROW><id>13557386</id><snippet>from django.db.models.signals import post_save

# Your models ...

def increase_nation_counter(instance, created, **kwargs):
    if created: # Just increase counter if it's a new Entry
        instance.nation.counter += 1
        instance.nation.save()

post_save.connect(increase_nation_counter, sender=Entry)
</snippet></ROW><ROW><id>13557386</id><snippet>Nation</snippet></ROW><ROW><id>13557386</id><snippet>Nation.objects.order_by('-counter')
</snippet></ROW><ROW><id>13557438</id><snippet>def isabcde(s):
    filtered = [i for i in s.lower() if i in 'abcdefghijklmnopqrstuvxyz']
    for i in range(len(filtered) - 1):
        if filtered[i] &gt; filtered[i+1]:
            return print(s, "is not abcdearian")
    return print(s,  "is abcdearian")

while True:
    try:
        s = input("The string? ")
    except EOFError:
        break
    except TypeError:
        break
    isabcde(s)
</snippet></ROW><ROW><id>13557438</id><snippet>    for i in range(len(filtered) - 1):
        if filtered[i] &gt; filtered[i+1]:
</snippet></ROW><ROW><id>13557438</id><snippet>    if all([i[0] &lt; i[1] for i in zip(filtered,filtered[1:]) :
</snippet></ROW><ROW><id>13557605</id><snippet>delimiter</snippet></ROW><ROW><id>13557605</id><snippet>writer = csv.writer(csvfile,delimiter=';')
</snippet></ROW><ROW><id>13557605</id><snippet>csv.writer</snippet></ROW><ROW><id>13557965</id><snippet>range(55)</snippet></ROW><ROW><id>13557965</id><snippet>range(size)</snippet></ROW><ROW><id>13558153</id><snippet>str='/Apath1/Bpath2/Cpath3/0-1-2-3-4-5-something.otherhing'
print str[str.find("-")-1:str.rfind("-")]
</snippet></ROW><ROW><id>13558153</id><snippet>rfind</snippet></ROW><ROW><id>13558153</id><snippet>str='/Apath1/Bpath2/Cpath3/0-1-2-3-4-5-something.otherhing'
str = os.path.basename(str)
print str[str.find("-")-1:str.rfind("-")]
</snippet></ROW><ROW><id>13558153</id><snippet>basename</snippet></ROW><ROW><id>13558153</id><snippet>basename</snippet></ROW><ROW><id>13558153</id><snippet>print str[:str.rfind("-")]
</snippet></ROW><ROW><id>13558200</id><snippet>'''

JP

Attempt to get multiple updating of matplotlibs working.
Uses WX to create an 'almost' gui with a mpl in the middle of it.
Data can be queued to this object - or you can directly plot to it.

Probably will have some limitations atm
- only really thinking about 2d plots for now -
but presumably can work around this for other implimentations.
- the working code seems to need to be put into another thread.
Tried to put the wx mainloop into another thread,
but it seemed unhappy. :(



Classes of Interest :
    GraphData - A silly class that holds data to be plotted.
    PlotFigure - Class of wx frame type.
        Holds a mpl figure in it + queue to queue data to.
        The frame will plot the data when it refreshes it's canvas

    ThreadSimulation - This is not to do with the plotting
                        it is a test program.


Modified version of:

Copyright (C) 2003-2005 Jeremy O'Donoghue and others

License: This work is licensed under the PSF. A copy should be included
with this source code, and is also available at
http://www.python.org/psf/license.html

'''
import threading
import collections
import time

import numpy as np

import matplotlib
matplotlib.use('WXAgg')



from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg
from matplotlib.backends.backend_wx import NavigationToolbar2Wx

from matplotlib.figure import Figure

import wx







class GraphData(object):
    '''
        A silly class that holds data to be plotted.
    '''
    def __init__(self, xdatainit, ydatainit):

        self.xdata = xdatainit
        self.ydata = ydatainit

class PlotFigure(wx.Frame):

    def __init__(self ):
        '''
            Initialises the frame.
        '''
        wx.Frame.__init__(self, None, -1, "Test embedded wxFigure")

        self.timerid = wx.NewId()

        self.fig = Figure((5,4), 75)
        self.canvas = FigureCanvasWxAgg(self, -1, self.fig)
        self.toolbar = NavigationToolbar2Wx(self.canvas)
        self.toolbar.Realize()

        # On Windows, default frame size behaviour is incorrect
        # you don't need this under Linux
        tw, th = self.toolbar.GetSizeTuple()
        fw, fh = self.canvas.GetSizeTuple()
        self.toolbar.SetSize(wx.Size(fw, th))

        # Now put all into a sizer
        sizer = wx.BoxSizer(wx.VERTICAL)
        # This way of adding to sizer allows resizing
        sizer.Add(self.canvas, 1, wx.LEFT|wx.TOP|wx.GROW)
        # Best to allow the toolbar to resize!
        sizer.Add(self.toolbar, 0, wx.GROW)
        self.SetSizer(sizer)
        self.Fit()
        wx.EVT_TIMER(self, self.timerid, self.onTimer)

        self.dataqueue = collections.deque()

        # Add an axes and a line to the figure.
        self.axes = self.fig.add_subplot(111)
        self.line, = self.axes.plot([],[])

    def GetToolBar(self):
        '''
            returns default toolbar.
        '''
        return self.toolbar

    def onTimer(self, evt):
        '''
            Every timer period this is called.

            Want to redraw the canvas.
        '''
        #print "onTimer"
        if len(self.dataqueue) &gt; 0 :
            data = self.dataqueue.pop()

            x = data.xdata
            y = data.ydata

            xmax = max(x)
            xmin = min(x)

            ymin = round(min(y), 0) - 1
            ymax = round(max(y), 0) + 1

            self.axes.set_xbound(lower=xmin, upper=xmax)
            self.axes.set_ybound(lower=ymin, upper=ymax)

            self.line.set_xdata(x)
            self.line.set_ydata(y)

        # Redraws the canvas - does this even if the data isn't updated...
        self.canvas.draw()


    def onEraseBackground(self, evt):
        '''
        this is supposed to prevent redraw flicker on some X servers...
        '''
        pass


class ThreadSimulation(threading.Thread):
    '''
    Simulation Thread - produces data to be displayed in the other thread.
    '''

    def __init__(self,  nsimloops, datastep, pltframe, slowloop = 0):
        threading.Thread.__init__(self)

        self.nsimloops = nsimloops
        self.datastep = datastep
        self.pltframe = pltframe
        self.slowloop=slowloop

    def run(self):
        '''
        This is the simulation function.
        '''
        nsimloops = self.nsimloops
        datastep = self.datastep
        pltframe = self.pltframe

        print 'Sim Thread: Starting.'
        tstart = time.time()               # for profiling

        # Define Data to share between threads.
        x  = np.arange(0,2*np.pi,datastep)            # x-array
        y  = np.sin(x )

        # Queues up the data and removes previous versions.
        pltframe.dataqueue.append(GraphData(x,y))
        for i in range(len(pltframe.dataqueue)-1):
            pltframe.dataqueue.popleft()
        pltframe.dataqueue

        for i in np.arange(1, nsimloops):


            x = x + datastep
            y = np.sin(x)

            # Queues up the data and removes previous versions.
            pltframe.dataqueue.append(GraphData(x,y))
            for i in range(len(pltframe.dataqueue)-1):
                pltframe.dataqueue.popleft()
            #pltframe.dataqueue

            if self.slowloop &gt; 0 :
                time.sleep(self.slowloop)



        tstop= time.time()
        print 'Sim Thread: Complete.'
        print 'Av Loop Time:' , (tstop-tstart)/ nsimloops

if __name__ == '__main__':


    # Create the wx application.
    app = wx.PySimpleApp()

    # Create a frame with a plot inside it.
    pltframe = PlotFigure()
    pltframe1 = PlotFigure()

    # Initialise the timer - wxPython requires this to be connected to
    # the receiving event handler

    t = wx.Timer(pltframe, pltframe.timerid)
    t.Start(100)

    pltframe.Show()
    pltframe1.Show()

    npoints = 100
    nsimloops = 20000
    datastep = 2 * np.pi/ npoints
    slowloop = .1

    #Define and start application thread
    thrd = ThreadSimulation(nsimloops, datastep, pltframe,slowloop)
    thrd.setDaemon(True)
    thrd.start()

    pltframe1.axes.plot(np.random.rand(10),np.random.rand(10))

    app.MainLoop()
</snippet></ROW><ROW><id>13558312</id><snippet>while True:
    data = connection.recv(16)
    if data:
        connection.sendall(str(client_address[1]) + " said " + data)
</snippet></ROW><ROW><id>13558312</id><snippet>while True:
    data = connection.recv(16)
    if not data:
        break
    connection.sendall(str(client_address[1]) + " said " + data)
</snippet></ROW><ROW><id>13558312</id><snippet>select.select</snippet></ROW><ROW><id>13558330</id><snippet>from math import atan2, cos, pi, sin

class GetMinimumAreaRectangle(object):
    """ functor to find length, width, and area of the smallest rectangular
        area of the given convex hull """
    def __call__(self, hull):
        self.hull = hull
        mostfar = self._mostfar  # local reference
        n = len(hull)
        min_area = 10**100  # huge value
        iL = iR = iP = 1  # indexes left, right, opposite
#        print '    {:&gt;2s} {:&gt;2s} {:&gt;2s} {:&gt;2s} {:&gt;9s}'.format(
#                   'i', 'iL', 'iP', 'iR', 'area')
        for i in xrange(n-1):
            dx = hull[i+1][0] - hull[i][0]  # distance on x axis
            dy = hull[i+1][1] - hull[i][1]  # distance on y axis
            theta = pi-atan2(dy, dx)   # get orientation angle of the edge
            s, c = sin(theta), cos(theta)
            yC = hull[i][0]*s + hull[i][1]*c
            xP, yP, iP = mostfar(iP, n, s, c, 0, 1)
            if i==0: iR = iP
            xR, yR, iR = mostfar(iR, n, s, c,  1, 0)
            xL, yL, iL = mostfar(iL, n, s, c, -1, 0)
            l, w = (yP-yC), (xR-xL)
            area = l*w
#            print '    {:2d} {:2d} {:2d} {:2d} {:9.3f}'.format(i, iL, iP, iR, area)
            if area &lt; min_area:
                min_area, min_length, min_width = area, l, w
        return (min_length, min_width, min_area)

    def _mostfar(self, j, n, s, c, mx, my):
        """ advance j to extreme point """
        hull = self.hull  # local reference
        xn, yn = hull[j][0], hull[j][1]
        rx, ry = xn*c - yn*s, xn*s + yn*c
        best = mx*rx + my*ry
        while True:
            x, y = rx, ry
            xn, yn = hull[(j+1)%n][0], hull[(j+1)%n][1]
            rx, ry = xn*c - yn*s, xn*s + yn*c
            if mx*rx + my*ry &gt;= best:
                j = (j+1)%n
                best = mx*rx + my*ry
            else:
                return (x, y, j)

if __name__ == '__main__':

    hull= [(560023.44957588764, 6362057.3904932579),
           (560023.44957588764, 6362060.3904932579),
           (560024.44957588764, 6362063.3904932579),
           (560026.94957588764, 6362068.3904932579),
           (560028.44957588764, 6362069.8904932579),
           (560034.94957588764, 6362071.8904932579),
           (560036.44957588764, 6362071.8904932579),
           (560037.44957588764, 6362070.3904932579),
           (560037.44957588764, 6362064.8904932579),
           (560036.44957588764, 6362063.3904932579),
           (560034.94957588764, 6362061.3904932579),
           (560026.94957588764, 6362057.8904932579),
           (560025.44957588764, 6362057.3904932579),
           (560023.44957588764, 6362057.3904932579)]

    gmar = GetMinimumAreaRectangle()  # create functor object
    print "dimensions and area of smallest enclosing rectangular area:"
    print "  {:.3f}(L) x {:.3f}(W) = {:.3f} area".format(*gmar(hull))  # use it
</snippet></ROW><ROW><id>13558330</id><snippet>dimensions and area of smallest enclosing rectangular area:
  10.393(L) x 18.037(W) = 187.451 area
</snippet></ROW><ROW><id>13558428</id><snippet>class BetterWeekArchiveView(WeekArchiveView):
    from django.views.generic.dates import _get_next_prev_month
    def get_next_week(self, date):
       """
        Get the next valid week.
        """
        from datetime import timedelta
        next = date + timedelta(days=7)
        return _get_next_prev_month(self, next, is_previous=False, use_first_day=False)

    def get_previous_week(self, date):
       """
       Get the previous valid week.
       """
       from datetime import timedelta
       prev = date - timedelta(days=7)
       return _get_next_prev_month(self, prev, is_previous=True, use_first_day=False)

    def get_dated_items(self):
        """
        Return (date_list, items, extra_context) for this request.
        Inject next_week and previous_week into extra_context.
        """
        result = super(BetterWeekArchiveView, self).get_dated_items()
        extra_context = result[2]
        date = extra_context['week']

        extra_context.update({
         'next_week': self.get_next_week(date),
          'previous_week': self.get_previous_week(date),
          })

         return result
</snippet></ROW><ROW><id>13558457</id><snippet>  while threading.activeCount() &gt;1:
      pass
  else:
      print 'All done!'
      f.close()
</snippet></ROW><ROW><id>13558806</id><snippet>#A = adjacency matrix, u = vertex u, v = vertex v
def weight(A, u, v):
    return A[u][v]

#A = adjacency matrix, u = vertex u
def adjacent(A, u):
    L = []
    for x in range(len(A)):
        if A[u][x] &gt; 0 and x &lt;&gt; u:
            L.insert(0,x)
    return L

#Q = min queue
def extractMin(Q):
    q = Q[0]
    Q.remove(Q[0])
    return q

#Q = min queue, V = vertex list
def decreaseKey(Q, K):
    for i in range(len(Q)):
        for j in range(len(Q)):
            if K[Q[i]] &lt; K[Q[j]]:
                s = Q[i]
                Q[i] = Q[j]
                Q[j] = s

#V = vertex list, A = adjacency list, r = root
def prim(V, A, r):
    u = 0
    v = 0

    # initialize and set each value of the array P (pi) to none
    # pi holds the parent of u, so P(v)=u means u is the parent of v
    P=[None]*len(V)

    # initialize and set each value of the array K (key) to some large number (simulate infinity)
    K = [999999]*len(V)

    # initialize the min queue and fill it with all vertices in V
    Q=[0]*len(V)
    for u in range(len(Q)):
        Q[u] = V[u]

    # set the key of the root to 0
    K[r] = 0
    decreaseKey(Q, K)    # maintain the min queue

    # loop while the min queue is not empty
    while len(Q) &gt; 0:
        u = extractMin(Q)    # pop the first vertex off the min queue

        # loop through the vertices adjacent to u
        Adj = adjacent(A, u)
        for v in Adj:
            w = weight(A, u, v)    # get the weight of the edge uv

            # proceed if v is in Q and the weight of uv is less than v's key
            if Q.count(v)&gt;0 and w &lt; K[v]:
                # set v's parent to u
                P[v] = u
                # v's key to the weight of uv
                K[v] = w
                decreaseKey(Q, K)    # maintain the min queue
    return P

A = [ [0,  4,  0,  0,  0,  0,   0,  8,  0],
      [4,  0,  8,  0,  0,  0,   0, 11,  0],
      [0,  8,  0,  7,  0,  4,   0,  0,  2],
      [0,  0,  7,  0,  9, 14,   0,  0,  0],
      [0,  0,  0,  9,  0, 10,   0,  0,  0],
      [0,  0,  4, 14, 10,  0,   2,  0,  0],
      [0,  0,  0,  0,  0,  2,   0,  1,  6],
      [8, 11,  0,  0,  0,  0,   1,  0,  7],
      [0,  0,  2,  0,  0,  0,   6,  7,  0]]
V = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ]

P = prim(V, A, 0)
print P

[None, 0, 5, 2, 3, 6, 7, 0, 2]
</snippet></ROW><ROW><id>13558992</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--mode')
p = parser.parse_args()
print(p)
</snippet></ROW><ROW><id>13558992</id><snippet>python test.py --mode=
</snippet></ROW><ROW><id>13559069</id><snippet>set</snippet></ROW><ROW><id>13559069</id><snippet>&amp;</snippet></ROW><ROW><id>13559069</id><snippet>print list(set(a) &amp; set(b))
</snippet></ROW><ROW><id>13559111</id><snippet>BlobProperty</snippet></ROW><ROW><id>13559111</id><snippet>class Card(db.Model):
    name = db.StringProperty(required = True)
    image = db.BlobProperty()
    description = db.TextProperty(required = True)
    submitted = db.DateTimeProperty(auto_now_add = True)
</snippet></ROW><ROW><id>13559111</id><snippet>image</snippet></ROW><ROW><id>13559111</id><snippet>my_card = Card()
# Other properties defined here...
my_image = self.request.get('image')
card.image = db.Blob(my_image)
my_card.put()
</snippet></ROW><ROW><id>13559448</id><snippet>language =  request.form['language']
</snippet></ROW><ROW><id>13559448</id><snippet>language =  form.language.data
</snippet></ROW><ROW><id>13559567</id><snippet>static_dir</snippet></ROW><ROW><id>13559567</id><snippet>app.yaml</snippet></ROW><ROW><id>13559567</id><snippet>os</snippet></ROW><ROW><id>13559567</id><snippet>upload_stuff</snippet></ROW><ROW><id>13559567</id><snippet>class MainPage(webapp2.RequestHandler):
  def get(self):
    path = os.path.join(os.path.dirname(__file__), 'upload_stuff')
    for filename in os.listdir(path):
      # Here you can do what you need with the files
      self.response.out.write(filename)
</snippet></ROW><ROW><id>13559586</id><snippet>request_uri</snippet></ROW><ROW><id>13559586</id><snippet>def request_uri(uri, method='GET', params={}, headers={}):
</snippet></ROW><ROW><id>13559675</id><snippet>import mechanize

FILE_URL = 'http://mit.edu/img/MIT_logo.gif'
DESTINATION = '/tmp/lol.gif'

br = mechanize.Browser()
br.retrieve(FILE_URL, DESTINATION)
</snippet></ROW><ROW><id>13560241</id><snippet>import Tkinter</snippet></ROW><ROW><id>13560241</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>13560241</id><snippet>Tkinter.LEFT</snippet></ROW><ROW><id>13560394</id><snippet>ListProperty</snippet></ROW><ROW><id>13560394</id><snippet>dict</snippet></ROW><ROW><id>13560394</id><snippet>ListProperty</snippet></ROW><ROW><id>13560394</id><snippet>str</snippet></ROW><ROW><id>13560394</id><snippet>class MyEntity(db.Model):
  name = db.StringProperty()
  description = db.TextProperty()
  word_list = db.ListProperty()
</snippet></ROW><ROW><id>13560394</id><snippet>new_entity = MyEntity()
new_entity.word_list = ['word1', 1, 'word2', 2, 'word3', 10]
</snippet></ROW><ROW><id>13560394</id><snippet>word_list</snippet></ROW><ROW><id>13560394</id><snippet>WordScore</snippet></ROW><ROW><id>13560394</id><snippet>class WordScore(db.Model):
  word = db.StringProperty()
  score = db.IntegerProperty()
</snippet></ROW><ROW><id>13560394</id><snippet>WordScore</snippet></ROW><ROW><id>13560394</id><snippet># Pull the 'other' entity (this would be your main class as defined above)
q = OtherEntity.all()
q.filter('name =', 'Someone')
my_entity = q.get()

# Create new score
ws = WordScore(parent=my_entity)
ws.word = 'dog'
ws.score = 2
ws.put()
</snippet></ROW><ROW><id>13560394</id><snippet>dog</snippet></ROW><ROW><id>13560394</id><snippet># Get key of 'Someone'
q = OtherEntity.all()
q.filter('name =', 'Someone')
my_entity = q.get().key()

# Now get the score
ws = WordScore.all()
ws.filter('word = ', 'dog').ancestor(my_entity)
word_score = ws.get().score
</snippet></ROW><ROW><id>13560403</id><snippet>stat_keys += [self.request.get(k) for k in ('stat_one', 'stat_two', 'stat_three', 'stat_four')]
</snippet></ROW><ROW><id>13560403</id><snippet>stat_keys += map(self.request.get, ('stat_one', 'stat_two', 'stat_three', 'stat_four')))
</snippet></ROW><ROW><id>13560403</id><snippet>map(stat_keys.append, map(self.request.get, ('stat_one', 'stat_two', 'stat_three', 'stat_four')))
</snippet></ROW><ROW><id>13560449</id><snippet>idx.sort</snippet></ROW><ROW><id>13560449</id><snippet>cmp</snippet></ROW><ROW><id>13560449</id><snippet>strcmp</snippet></ROW><ROW><id>13560449</id><snippet>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main() {
    char* test1 = "ovided by The Internet Classics Archive";
    char* test2 = "rovided by The Internet Classics Archive.";
    printf("%d\n", strcmp(test1, test2));
}
</snippet></ROW><ROW><id>13560449</id><snippet>test1 = "ovided by The Internet Classics Archive";
test2 = "rovided by The Internet Classics Archive."
print(cmp(test1, test2))
</snippet></ROW><ROW><id>13560449</id><snippet>-3</snippet></ROW><ROW><id>13560449</id><snippet>-1</snippet></ROW><ROW><id>13560449</id><snippet>C</snippet></ROW><ROW><id>13560449</id><snippet>strcmp</snippet></ROW><ROW><id>13560449</id><snippet>qsort</snippet></ROW><ROW><id>13560449</id><snippet>strcmp</snippet></ROW><ROW><id>13560449</id><snippet>[-1, 0, 1]</snippet></ROW><ROW><id>13560449</id><snippet>printf</snippet></ROW><ROW><id>13560449</id><snippet>pstrcmp</snippet></ROW><ROW><id>13560449</id><snippet>-3</snippet></ROW><ROW><id>13560449</id><snippet>3</snippet></ROW><ROW><id>13560449</id><snippet>Save</snippet></ROW><ROW><id>13560449</id><snippet>cmp</snippet></ROW><ROW><id>13560449</id><snippet>memoryview</snippet></ROW><ROW><id>13560449</id><snippet>-1</snippet></ROW><ROW><id>13560449</id><snippet>print(cmp(memoryview(test1), memoryview(test2)))
</snippet></ROW><ROW><id>13560581</id><snippet>^[a-zA-Z0-9@\.+-_\/\\]+$</snippet></ROW><ROW><id>13560581</id><snippet>max_length</snippet></ROW><ROW><id>13560581</id><snippet>class CustomChangeForm(forms.ModelForm):
    username = forms.RegexField(
        label=_("Username"), max_length=30, regex=r"^[a-zA-Z0-9@\.+-_\/\\]+$",
        help_text = _("Required. 30 characters or fewer. Letters, digits and "
                      "@.+-_/\ only."),
        error_messages = {
            'invalid': _("This value may contain only letters, numbers and "
                         "@.+-_/\ characters.")}),
        max_length=30)
        ....
</snippet></ROW><ROW><id>13560581</id><snippet>from django.contrib.auth.forms import UserChangeForm

class CustomChangeForm(UserChangeForm):
    username = forms.RexField(
        ...
</snippet></ROW><ROW><id>13560879</id><snippet>def get_songs(requested_username):
    songs = db.GqlQuery('SELECT * FROM Song WHERE username=:1 ORDER BY created DESC', requested_username)
    return songs
</snippet></ROW><ROW><id>13560879</id><snippet>def get_songs(requested_username):
    songs = Song.all()
    songs.filter('username =', requested_username).order('-created')
    return songs
</snippet></ROW><ROW><id>13560879</id><snippet>songs</snippet></ROW><ROW><id>13560879</id><snippet>songs = get_songs(requested_username)
for song in songs:
  # Do stuff here...
</snippet></ROW><ROW><id>13560956</id><snippet>.encode("utf8")</snippet></ROW><ROW><id>13560956</id><snippet>original_string.decode('original_encoding').encode('utf-8')</snippet></ROW><ROW><id>13560956</id><snippet>'Compa\xf1\xeda Dominicana de Tel\xe9fonos, C. por A. - CODETEL'.decode("iso8859-1").encode("utf8")
</snippet></ROW><ROW><id>13561267</id><snippet>test</snippet></ROW><ROW><id>13561267</id><snippet>dis.dis(test)</snippet></ROW><ROW><id>13561267</id><snippet> 3           0 SETUP_LOOP              30 (to 33)
             3 LOAD_GLOBAL              0 (range)
             6 LOAD_CONST               1 (1000)
             9 CALL_FUNCTION            1
            12 GET_ITER
       &gt;&gt;   13 FOR_ITER                16 (to 32)
            16 STORE_FAST               0 (i)

 4          19 LOAD_GLOBAL              1 (count)   # start of increment
            22 LOAD_CONST               2 (1)
            25 BINARY_ADD
            26 STORE_GLOBAL             1 (count)   # end of increment
            29 JUMP_ABSOLUTE           13
       &gt;&gt;   32 POP_BLOCK
       &gt;&gt;   33 LOAD_CONST               0 (None)
            36 RETURN_VALUE
</snippet></ROW><ROW><id>13561267</id><snippet>count += 1</snippet></ROW><ROW><id>13561267</id><snippet>4          19 LOAD_GLOBAL              1 (count)
           22 LOAD_CONST               2 (1)
           25 INPLACE_ADD
           26 STORE_GLOBAL             1 (count)
</snippet></ROW><ROW><id>13561621</id><snippet>
pip install git+https://github.com/other-repository/project.git@remote_branch_name
</snippet></ROW><ROW><id>13561621</id><snippet>
pip install --user git+https://github.com/d1b/pip.git@fix_pip_build_directory
</snippet></ROW><ROW><id>13561621</id><snippet>
pip install --user git+https://github.com/d1b/pip.git@d89b5803db2b520e754b9b26b771d22121738637
</snippet></ROW><ROW><id>13561805</id><snippet>html_added_field = ''
error_added_field = None
if request.method == 'POST':
    html_added_field = request.POST.get('extra_field_name')\
    if form.is_valid():
        pass
    else:
        error_added_field = _('Error')

context = {'html_added_field':html_added_field,'error_added_field':error_added_field}
</snippet></ROW><ROW><id>13561805</id><snippet>&lt;input type="text" value="{{ html_added_field }}" /&gt;{% if error_added_field %}&lt;div class="error"&gt;{{ error_added_field }}&lt;/div&gt;{% endif %}
</snippet></ROW><ROW><id>13561955</id><snippet>data = InputFile.read()
</snippet></ROW><ROW><id>13561955</id><snippet>data</snippet></ROW><ROW><id>13561955</id><snippet>str</snippet></ROW><ROW><id>13561955</id><snippet>offset</snippet></ROW><ROW><id>13561955</id><snippet>InputFile.seek(xx)</snippet></ROW><ROW><id>13561955</id><snippet>offset = xx</snippet></ROW><ROW><id>13561955</id><snippet>InputFile.seek(xx, 1)</snippet></ROW><ROW><id>13561955</id><snippet>offset += xx</snippet></ROW><ROW><id>13561955</id><snippet>magic_number = base64.b64decode("GIhTSuBask6y60iLI2VwIg==")
offset = magic_number_offset = data.find(magic_number)
offset -= 72
</snippet></ROW><ROW><id>13561955</id><snippet>re</snippet></ROW><ROW><id>13561955</id><snippet>pattern = re.compile("[^\xFF]\xFF*$")
offset = pattern.search(data, endpos=offset).start() + 1
</snippet></ROW><ROW><id>13561955</id><snippet>offset -= 3
blob_size_bin = data[offset:offset+3]
blob_size_hex = binascii.b2a_hex(blob_size_bin)
blob_size_dec = int(blob_size_hex, 16)
offset = magic_number_offset - 72
blob = data[offset:offset+blob_size_dec]
</snippet></ROW><ROW><id>13561955</id><snippet>mmap</snippet></ROW><ROW><id>13561955</id><snippet>reversed_data = data[::-1]</snippet></ROW><ROW><id>13561955</id><snippet>[^\ff]</snippet></ROW><ROW><id>13562005</id><snippet>QCoreApplication.sendEvent</snippet></ROW><ROW><id>13562005</id><snippet>bool QCoreApplication.sendEvent (QObject receiver, QEvent event)</snippet></ROW><ROW><id>13562005</id><snippet>QMouseEvent event(QEvent.MouseButtonPress, pos, 0, 0, 0);
QApplication.sendEvent(mainWindow, &amp;event);
</snippet></ROW><ROW><id>13562005</id><snippet>postEvent</snippet></ROW><ROW><id>13562005</id><snippet>notify</snippet></ROW><ROW><id>13562203</id><snippet>file</snippet></ROW><ROW><id>13562203</id><snippet>.extractfile()</snippet></ROW><ROW><id>13562203</id><snippet>tarfile.TarFile()</snippet></ROW><ROW><id>13562203</id><snippet>import tarfile

with tarfile.open(path) as tf:
    for entry in tf:  # list each entry one by one
        fileobj = tf.extractfile(entry)
        # fileobj is now an open file object. Use `.read()` to get the data.
        # alternatively, loop over `fileobj` to read it line by line.
</snippet></ROW><ROW><id>13562559</id><snippet>getattr</snippet></ROW><ROW><id>13562559</id><snippet>action = getattr(a, convert)
</snippet></ROW><ROW><id>13563012</id><snippet>qa = session.query(ChildA)
qb = session.query(ChildB)
# @note: *qa* and *qb* may include other filters etc, 
# but assuming they do not contain joins on *Parent*
subquery = qb.subquery()
qry = qa.join(Parent).join(subquery)
</snippet></ROW><ROW><id>13563025</id><snippet>col.update({'id': user[0]}, {'$set': user}, True)
</snippet></ROW><ROW><id>13563025</id><snippet>col.update({'_id': user[0]['_id']}, {'$set': user}, True)
</snippet></ROW><ROW><id>13563025</id><snippet>{'$set': user}</snippet></ROW><ROW><id>13563025</id><snippet>safe=True</snippet></ROW><ROW><id>13563025</id><snippet>success = col.update({'id': user[0]}, {'$set': user}, True, safe=True)
print success
</snippet></ROW><ROW><id>13563055</id><snippet>combinations</snippet></ROW><ROW><id>13563055</id><snippet>import itertools

def pairwise(input):
    for values in input.itervalues():
        for pair in itertools.combinations(values.iteritems(), 2):
            yield dict(pair)
</snippet></ROW><ROW><id>13563055</id><snippet>list()</snippet></ROW><ROW><id>13563055</id><snippet>list(pairwise(pleio))
</snippet></ROW><ROW><id>13563055</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(list(pairwise(pleio)))
[{'enf2': ['48', 'free'], 'enf3': ['34', 'set']},
 {'enf1': ['54', 'set'], 'enf3': ['34', 'set']},
 {'enf3': ['34', 'set'], 'enf4': ['12', 'free']},
 {'enf1': ['54', 'set'], 'enf2': ['48', 'free']},
 {'enf2': ['48', 'free'], 'enf4': ['12', 'free']},
 {'enf1': ['54', 'set'], 'enf4': ['12', 'free']}]
</snippet></ROW><ROW><id>13563055</id><snippet>from itertools import combinations

for paired in (dict(p) for v in pleio.itervalues() for p in combinations(v.iteritems(), 2)):
    print paired
</snippet></ROW><ROW><id>13563055</id><snippet>&gt;&gt;&gt; for paired in (dict(p) for v in pleio.itervalues() for p in combinations(v.iteritems(), 2)):
...     print paired
... 
{'enf3': ['34', 'set'], 'enf2': ['48', 'free']}
{'enf3': ['34', 'set'], 'enf1': ['54', 'set']}
{'enf3': ['34', 'set'], 'enf4': ['12', 'free']}
{'enf2': ['48', 'free'], 'enf1': ['54', 'set']}
{'enf2': ['48', 'free'], 'enf4': ['12', 'free']}
{'enf1': ['54', 'set'], 'enf4': ['12', 'free']}
</snippet></ROW><ROW><id>13563055</id><snippet>.itervalues()</snippet></ROW><ROW><id>13563055</id><snippet>.iteritems()</snippet></ROW><ROW><id>13563055</id><snippet>.values()</snippet></ROW><ROW><id>13563055</id><snippet>.items()</snippet></ROW><ROW><id>13563536</id><snippet>catformInstance</snippet></ROW><ROW><id>13563536</id><snippet>    for name in request.POST.getlist('name'):
        catform = CategoryForm({'name': name}, instance=Category())
        catform.save()
</snippet></ROW><ROW><id>13563536</id><snippet>name</snippet></ROW><ROW><id>13563536</id><snippet>POST</snippet></ROW><ROW><id>13563536</id><snippet>name</snippet></ROW><ROW><id>13563536</id><snippet>name</snippet></ROW><ROW><id>13563776</id><snippet>render_inlines</snippet></ROW><ROW><id>13563908</id><snippet>F(x,y,z) = 0</snippet></ROW><ROW><id>13563908</id><snippet>import numpy as np
from enthought.mayavi import mlab

x, y, z = np.ogrid[-3:3:100j, -3:3:100j, -3:3:100j]
F = x**2/3**2 + y**2/2**2 + z**2/4**2 - 1
mlab.contour3d(F, contours = [0])
mlab.show()
</snippet></ROW><ROW><id>13563984</id><snippet>memoryview()</snippet></ROW><ROW><id>13563984</id><snippet>__lt__</snippet></ROW><ROW><id>13563984</id><snippet>__gt__</snippet></ROW><ROW><id>13563984</id><snippet>NotImplemented</snippet></ROW><ROW><id>13563984</id><snippet>&gt;&gt;&gt; memoryview("abc").__lt__(memoryview('bca'))
NotImplemented
&gt;&gt;&gt; memoryview("abc").__gt__(memoryview('bca'))
NotImplemented
</snippet></ROW><ROW><id>13563984</id><snippet>TypeError</snippet></ROW><ROW><id>13563984</id><snippet>&lt;</snippet></ROW><ROW><id>13563984</id><snippet>&gt;</snippet></ROW><ROW><id>13563984</id><snippet>&gt;&gt;&gt; memoryview("abc").__eq__(memoryview('bca'))
False
&gt;&gt;&gt; memoryview("abc").__eq__(memoryview('abc'))
True
&gt;&gt;&gt; memoryview("abc").__ne__(memoryview('abc'))
False
&gt;&gt;&gt; memoryview("abc").__ne__(memoryview('bca'))
True
</snippet></ROW><ROW><id>13563984</id><snippet>.tobytes()</snippet></ROW><ROW><id>13563984</id><snippet>.tolist()</snippet></ROW><ROW><id>13564098</id><snippet>yv</snippet></ROW><ROW><id>13564098</id><snippet>mpeg7</snippet></ROW><ROW><id>13564229</id><snippet>stack = [(0, {})]  # indentation level, top-level entry
entry = stack[-1][1]

for line in input:
    line = line.strip()
    if not line: continue

    indentation = len(input) - len(input.lstrip())
    if indentation &gt; stack[-1][0]:  # indented further? New entry
        entry = stack[-1][1]['data'] = {}
        stack.append((indentation, entry)) # push
    else:
        while indentation &lt; stack[-1][0]:  # indentation dropped
            del stack[-1]       # pop
            entry = stack[-1][1]

    # process line and add to entry

result = stack[0][1]
</snippet></ROW><ROW><id>13565051</id><snippet>DESCENDING</snippet></ROW><ROW><id>13565051</id><snippet>ASCENDING</snippet></ROW><ROW><id>13565051</id><snippet>sort</snippet></ROW><ROW><id>13565051</id><snippet>from pymongo import DESCENDING
people = db.people.find({"classes": {'$gt': 0}}).sort('people.0.age', DESCENDING)
</snippet></ROW><ROW><id>13565051</id><snippet>[(p['people'][0]['age'], p) for p in people]
</snippet></ROW><ROW><id>13565141</id><snippet>(r'^admin/', include(admin.site.urls)), 
</snippet></ROW><ROW><id>13565141</id><snippet>SyntaxError</snippet></ROW><ROW><id>13565323</id><snippet>self</snippet></ROW><ROW><id>13565323</id><snippet>__init__()</snippet></ROW><ROW><id>13565323</id><snippet>__enter__()</snippet></ROW><ROW><id>13565323</id><snippet>__enter__</snippet></ROW><ROW><id>13565323</id><snippet>__exit__</snippet></ROW><ROW><id>13565323</id><snippet>class MyClass(object):
    def __enter__(self):
        if moon_phase &gt; 0:
            self.returnval = 123
        else:
            self.returnval = 456
        return self.returnval

    def __exit__(self, *args):
        number = self.returnval
        print 'End of block with', number
</snippet></ROW><ROW><id>13565374</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>13565374</id><snippet>item1</snippet></ROW><ROW><id>13565374</id><snippet>item2</snippet></ROW><ROW><id>13565374</id><snippet>In [21]: l = ["item1", "item2", "item3", "item3", "item3", "item1", "item2", "item4", "item4", "item4"]

In [22]: for k,g in groupby(l):
    print "{0}:{1}".format(k,len(list(g)))
   ....:     
item1:1
item2:1
item3:3
item1:1
item2:1
item4:3
</snippet></ROW><ROW><id>13565493</id><snippet>.dockWidgetArea(&lt;QDockWidget&gt;)</snippet></ROW><ROW><id>13565493</id><snippet>QMainWindow</snippet></ROW><ROW><id>13565586</id><snippet>unittest</snippet></ROW><ROW><id>13565586</id><snippet>import unittest

def stradd(a, b):
    return a + b

class test_hello(unittest.TestCase):
    def test_1(self):
        self.assertEqual(stradd("a", "b"), "ab")


def run_my_tests(test_case):
    case = unittest.TestLoader().loadTestsFromTestCase(test_case)
    result = unittest.TestResult()
    case(result)
    if result.wasSuccessful():
        return True
    else:
        print("Some tests failed!")
        for test, err in result.failures + result.errors:
            print(test)
            print(err)
        return False


if run_my_tests(test_hello):
    # All tests passed, so we can run our programm.
    print(stradd("Hello, ", "world"))
</snippet></ROW><ROW><id>13565586</id><snippet>run_my_tests</snippet></ROW><ROW><id>13565586</id><snippet>True</snippet></ROW><ROW><id>13565586</id><snippet>$ python myscript.py 
Hello, world

$ # And now the test fails...
$ python myscript.py 
Some tests failed!
test_1 (__main__.test_hello)
Traceback (most recent call last):
  File "myscript.py", line 8, in test_1
    self.assertEqual(stradd("a", "c"), "ab")
AssertionError: 'ac' != 'ab'
</snippet></ROW><ROW><id>13565984</id><snippet>LIKE</snippet></ROW><ROW><id>13565984</id><snippet>LIKE</snippet></ROW><ROW><id>13565984</id><snippet>%</snippet></ROW><ROW><id>13565984</id><snippet>SELECT id FROM foo WHERE randomKey LIKE 'af202%'
</snippet></ROW><ROW><id>13565984</id><snippet>%</snippet></ROW><ROW><id>13565984</id><snippet>LIKE 'af202%'</snippet></ROW><ROW><id>13565984</id><snippet>LIKE %af202'</snippet></ROW><ROW><id>13565984</id><snippet>LIKE '%af202%'</snippet></ROW><ROW><id>13566076</id><snippet>r''</snippet></ROW><ROW><id>13566076</id><snippet>find = r'\]\n'
replace = r']'
text = re.sub(find, replace, text)
</snippet></ROW><ROW><id>13566076</id><snippet>re</snippet></ROW><ROW><id>13566484</id><snippet>TestClass().printIt()</snippet></ROW><ROW><id>13566623</id><snippet>closest_events = []
for t in no1:
    #sort
    i = np.argsort(np.abs(t['time']-no2['time']))
    # select only events with the same no_of_interest_time and electrode
    i = i[(no2['electrode']==t['electrode']) &amp;
          (no2['no_of_interest_time']==t['no_of_interest_time'])]
    closest = i[0] if len(i)&gt;0 else np.nan
    closest_events.append(closest)
</snippet></ROW><ROW><id>13566623</id><snippet>no1</snippet></ROW><ROW><id>13566623</id><snippet>no2</snippet></ROW><ROW><id>13566623</id><snippet>i</snippet></ROW><ROW><id>13566623</id><snippet>i</snippet></ROW><ROW><id>13566623</id><snippet>NaN</snippet></ROW><ROW><id>13566892</id><snippet>MinAreaRect2()</snippet></ROW><ROW><id>13566892</id><snippet>BoxPoints()</snippet></ROW><ROW><id>13566892</id><snippet>s = points     # points = original data set
n = len(s)
cx = sum(zip(*s)[0])/n
cy = sum(zip(*s)[1])/n
points = map(lambda p: (p[0]-cx, p[1]-cy), s)
# Now points = translated data set
</snippet></ROW><ROW><id>13566892</id><snippet>zip(*s)</snippet></ROW><ROW><id>13566892</id><snippet>cx = int(sum(zip(*s)[0])/n)</snippet></ROW><ROW><id>13566892</id><snippet>cy = int(sum(zip(*s)[1])/n)</snippet></ROW><ROW><id>13566892</id><snippet>      ox         oy      T cx      T cy    height     width     theta
       0          0    6.2500    7.7500   11.5709   13.7281  -78.6901
      64        125    6.2500    7.7500   11.5709   13.7281  -78.6901
     256        625    6.2500    7.7501   11.5709   13.7281  -78.6901
    1024       3125    6.2500    7.7500   11.5709   13.7281  -78.6901
    4096      15625    6.2500    7.7510   11.5709   13.7281  -78.6901
   16384      78125    6.2500    7.7578   11.5709   13.7281  -78.6901
   65536     390625    6.2500    7.7812   11.5709   13.7281  -78.6901
  262144    1953125    6.3125    7.7500   11.5709   13.7281  -78.6901
 1048576    9765625    6.2500    8.0000   11.5709   13.7281  -78.6901
 4194304   48828125    7.0000   11.0000   12.0000   14.0000  -90.0000
16777216  244140625    8.0000   15.0000   16.0000   14.0000  -90.0000
67108864 1220703125    8.0000  -21.0000   16.0000    0.0000   -0.0000
</snippet></ROW><ROW><id>13566892</id><snippet>#!/usr/bin/python
import cv
base = [(1,1), (0,4), (2,9), (5,11), (8,14), (13,9), (14,4), (12,3), (2,1), (1,1)]
ox, oy, boxes = 0, 0, []
print '        ox         oy      T cx      T cy    height     width     theta'
for i in range(3,15):
    poly = map(lambda p: (p[0]+ox, p[1]+oy), base)
    (x,y), (w,h), th = cv.MinAreaRect2(poly)
    boxes.append((ox, oy, cv.BoxPoints(((x,y),(w,h),th))))
    print ('{:10d} {:10d} {:9.4f} {:9.4f} {:9.4f} {:9.4f} {:9.4f}'.format(
            ox, oy, x-ox, y-oy, w, h, th))
    ox, oy = 4**i, 5**i

print '\n        ox         oy       T x       T y       T x       T y       T x       T y       T x       T y'
for (ox, oy, box) in boxes:
    print '{:10d} {:10d}'.format(ox, oy),
    for p in box:
        print '{:9.4f} {:9.4f}'.format(p[0]-ox, p[1]-oy),
    print
</snippet></ROW><ROW><id>13567150</id><snippet>&gt;&gt;&gt; factarr*cplxarr.real + (1j)*cplxarr.imag
array([ 0.5+2.j,  1.8+1.j,  1.4-2.j])
</snippet></ROW><ROW><id>13567150</id><snippet>np.vectorize</snippet></ROW><ROW><id>13567150</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('factarr*cplxarr.real+(1j)*cplxarr.imag',setup='from __main__ import factarr,cplxarr')
21.008132934570312
&gt;&gt;&gt; timeit('f(cplxarr.real * factarr, cplxarr.imag)',setup='from __main__ import factarr,cplxarr; import numpy as np; f=np.vectorize(np.complex)')
46.52931499481201
</snippet></ROW><ROW><id>13567150</id><snippet>np.complex</snippet></ROW><ROW><id>13567150</id><snippet>complex</snippet></ROW><ROW><id>13567150</id><snippet>&gt;&gt;&gt; timeit('f(cplxarr.real * factarr, cplxarr.imag)',setup='from __main__ import  factarr,cplxarr; import numpy as np; f=np.vectorize(complex)')
44.87726283073425
</snippet></ROW><ROW><id>13567150</id><snippet>&gt;&gt;&gt; timeit.timeit('a = cplxarr.copy(); a.real *= factarr ',setup='from __main__ import factarr,cplxarr')
8.336654901504517
</snippet></ROW><ROW><id>13567150</id><snippet>&gt;&gt;&gt; a = cplxarr.copy()
&gt;&gt;&gt; a.real *= factarr 
&gt;&gt;&gt; a
array([ 0.5+2.j,  1.8+1.j,  1.4-2.j])
</snippet></ROW><ROW><id>13567388</id><snippet>numpy.sum</snippet></ROW><ROW><id>13567388</id><snippet>axis</snippet></ROW><ROW><id>13567388</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = numpy.arange(12).reshape(4,3)
&gt;&gt;&gt; a.sum(axis=0)
array([18, 22, 26])
</snippet></ROW><ROW><id>13567388</id><snippet>&gt;&gt;&gt; a.sum(axis=1)
array([ 3, 12, 21, 30])
</snippet></ROW><ROW><id>13567388</id><snippet>numpy.mean</snippet></ROW><ROW><id>13567388</id><snippet>numpy.cumsum</snippet></ROW><ROW><id>13567388</id><snippet>numpy.std</snippet></ROW><ROW><id>13567388</id><snippet>axis</snippet></ROW><ROW><id>13567388</id><snippet>ndarray</snippet></ROW><ROW><id>13567388</id><snippet>axis</snippet></ROW><ROW><id>13567445</id><snippet>definitions.py</snippet></ROW><ROW><id>13567445</id><snippet>variable1 = 3
variable2 = 'stuff'

def spam(arg1):
    return 'spam' + arg1

def eggs(arg1,arg2):
    return 'eggs' + arg1 + arg2
</snippet></ROW><ROW><id>13567445</id><snippet>class Definitions():
    def __init__():
        self.variable1 = 3
        self.variable2 = 'stuff'

    def spam(self,arg1):
        return 'spam' + arg1

    def eggs(self,arg1,arg2):
        return 'eggs' + arg1 + arg2
</snippet></ROW><ROW><id>13567445</id><snippet>main.py</snippet></ROW><ROW><id>13567445</id><snippet>import definitions

for parameter in xrange(0,10):
    defs = definitions.Definitions()
    defs.variable1 = parameter

    # do some stuff and store the result

# compare the various results
</snippet></ROW><ROW><id>13567445</id><snippet>spam('mail')</snippet></ROW><ROW><id>13567445</id><snippet>defs.spam('mail')</snippet></ROW><ROW><id>13567741</id><snippet>d_order</snippet></ROW><ROW><id>13567741</id><snippet>def store_exception(exception, line_number, some_string):
    data = {
        'timestamp'  : datetime.now(),
        'line_number': line_number,
        'message'    : exception,
        'string'     : some_string
    }

    d_order = ['timestamp', 'line_number', 'message', 'string']

    with open('some/path.csv', 'w') as csvfile:
        linewriter = csv.DictWriter(csvfile, d_order, delimiter='|',
                            quotechar='"', quoting=csv.QUOTE_MINIMAL)
        linewriter.writerow(data)
</snippet></ROW><ROW><id>13568006</id><snippet>In [32]: line = '1   80,982  163,8164    170,2620    145,648 200,8021    173,2069    92,647  26,4122 140,546 11,1913 160,6461    27,7905 40,9047 150,2183    61,9146 159,7420    198,1724    114,508 104,6647    30,4612 99,2367 138,7896    169,8700    49,2437 125,2909    117,2597    55,6399'

In [33]: tok = line.split()

In [34]: {int(tok[0]): dict(map(int, t.split(',')) for t in tok[1:])}
Out[34]: 
{1: {11: 1913,
  26: 4122,
  27: 7905,
  30: 4612,
  40: 9047,
  49: 2437,
  55: 6399,
  61: 9146,
  ...
</snippet></ROW><ROW><id>13568006</id><snippet>int(tok[0])</snippet></ROW><ROW><id>13568006</id><snippet>(... for t in tok[1:])</snippet></ROW><ROW><id>13568006</id><snippet>t</snippet></ROW><ROW><id>13568006</id><snippet>t.split(',')</snippet></ROW><ROW><id>13568006</id><snippet>map(int, ...)</snippet></ROW><ROW><id>13568006</id><snippet>(map(int, t.split(',')) for t in tok[1:])</snippet></ROW><ROW><id>13568006</id><snippet>dict(...)</snippet></ROW><ROW><id>13568018</id><snippet>results = []
for elem in tree.getiterator():
    if elem.tag=='{http://www.namespace.co.uk}AssetEquipment':
        output={}
        results.append(output)
        ...
</snippet></ROW><ROW><id>13568018</id><snippet>def isactive():
    for output in results:
        print output.get("Active")
</snippet></ROW><ROW><id>13568143</id><snippet>from subprocess import Popen, PIPE

#function that takes the sqlCommand and connectString and retuns the output and #error string (if any)

def runSqlQuery(sqlCommand, connectString):

session = Popen(['sqlplus', '-S', connectString], stdin=PIPE, stdout=PIPE, stderr=PIPE)
session.stdin.write(sqlCommand)
return session.communicate()
</snippet></ROW><ROW><id>13568176</id><snippet>from copy import copy

def squaredError(a, b):
    r = copy(a)

    for i in range(len(a)):
        r[i] -= b[i]
        r[i] *= r[i]

    return sum(r)

given = [0, 1, 2, 3, 4, 5]
A = [0.1, 0.9, 2, 3.3, 3.6, 5.1]
B = [-0.1, 0.9, 2.1, 3.1, 3.9, 5]
C = [0, 1.1, 2, 2.9, 4, 5.1]

print squaredError(given, A)
print squaredError(given, B)
print squaredError(given, C)

match = min(map(lambda x: (squaredError(given, x), x), [A,B,C]))[1]
print match
</snippet></ROW><ROW><id>13568221</id><snippet>urlparse</snippet></ROW><ROW><id>13568221</id><snippet>In [43]: path = 'ngs.pradhi.com:/upload'

In [44]: path.split(':')[0]
Out[44]: 'ngs.pradhi.com'
</snippet></ROW><ROW><id>13568221</id><snippet>paramiko</snippet></ROW><ROW><id>13568548</id><snippet>data = job_data.get_parsed_dictionary()

columns = ', '.join(data.keys())
parameters = ', '.join(['%({0})s'.format(k) for k in data.keys()])
query = 'INSERT INTO jobs ({columns}) VALUES ({parameters})'.format(columns=columns, parameters=parameters)

cursor.execute(query, data)
</snippet></ROW><ROW><id>13568548</id><snippet>.get_parsed_dictionary()</snippet></ROW><ROW><id>13568548</id><snippet>dict</snippet></ROW><ROW><id>13568573</id><snippet>indices</snippet></ROW><ROW><id>13568765</id><snippet>sum</snippet></ROW><ROW><id>13568765</id><snippet>dict.keys()</snippet></ROW><ROW><id>13568765</id><snippet>def average_daily_views(movie_id, customer_id, data):
    daily_values = [data[movie_id][date][customer_id] for date in data[movie_id]]
    return sum(daily_values)/len(daily_values)
</snippet></ROW><ROW><id>13568765</id><snippet>def get_averages(data):
    result = [average_daily_views(movie, customer, data) for customer in 
              data[movie] for movie in data]
</snippet></ROW><ROW><id>13568891</id><snippet>if form.is_valid():
    instance = form.save(commit=False)
    instance.commonObject = pk.loads(request.session.get('commonObject'))
    instance.save()
    return self.add_success(request, instance)
</snippet></ROW><ROW><id>13569055</id><snippet>pickle</snippet></ROW><ROW><id>13569055</id><snippet>unpickle</snippet></ROW><ROW><id>13569055</id><snippet>import pickle
class Foo(object): pass

a = Foo()
with open('data.pickle','wb') as f:
    pickle.dump(a,f)
</snippet></ROW><ROW><id>13569055</id><snippet>Foo</snippet></ROW><ROW><id>13569055</id><snippet>Foo</snippet></ROW><ROW><id>13569129</id><snippet>from celery import Celery
from celery import task  

celery = Celery('tasks', broker='amqp://guest@localhost//') #!

import os

os.environ[ 'DJANGO_SETTINGS_MODULE' ] = "proj.settings"

@task()
def add_photos_task( lad_id ):
...
</snippet></ROW><ROW><id>13569129</id><snippet>celery -A tasks worker --loglevel=info
</snippet></ROW><ROW><id>13569530</id><snippet>math.sqrt</snippet></ROW><ROW><id>13569530</id><snippet>global pFact</snippet></ROW><ROW><id>13569530</id><snippet>def factor(x):
    n = int(x)
    if n &lt; 1:
        raise ValueError("Argument must be positive")

    factors = []
    d = 2

    while d*d &lt;= n:
        while n%d == 0:
            n = n // d
            factors.append(d)
        d += 1
    if n&gt;1:
        factors.append(n)
    return factors
</snippet></ROW><ROW><id>13569789</id><snippet>import sys
import requests

URL = 'https://portal.bitcasa.com/login'

client = requests.session(config={'verbose': sys.stderr})

# Retrieve the CSRF token first
client.get(URL)  # sets cookie
csrftoken = client.cookies['csrftoken']

login_data = dict(username=EMAIL, password=PASSWORD, csrfmiddlewaretoken=csrftoken, next='/')
r = client.post(URL, data=login_data, headers=dict(Referer=URL))
</snippet></ROW><ROW><id>13569791</id><snippet>Connections = {}
Connections['host1'] = createConnection("&lt;Some IP&gt;", &lt;Some Port&gt;, 5)
Connections['host2'] = createConnection("&lt;Some Other IP&gt;", &lt;Some Port&gt;, 5)
</snippet></ROW><ROW><id>13569791</id><snippet>Connections['host1'].send("Hello World")
</snippet></ROW><ROW><id>13569791</id><snippet>class ConnManager(object):
  def __init__(self, host, port, timeout)
    self._conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_TCP)
    self._conn.connect((host, port))

  def sendOne(self, data):
    self._conn.send(data)

  def sendTwo(self, data):
    self._conn.send(data)
</snippet></ROW><ROW><id>13570099</id><snippet>None</snippet></ROW><ROW><id>13570099</id><snippet>Py_None</snippet></ROW><ROW><id>13570099</id><snippet>PyObject* Py_None</snippet></ROW><ROW><id>13570099</id><snippet>None</snippet></ROW><ROW><id>13570099</id><snippet>Py_RETURN_NONE</snippet></ROW><ROW><id>13570099</id><snippet>Py_None</snippet></ROW><ROW><id>13570114</id><snippet>django.db.backends.mysql</snippet></ROW><ROW><id>13570114</id><snippet>settings.py</snippet></ROW><ROW><id>13570114</id><snippet>DATABASES</snippet></ROW><ROW><id>13570780</id><snippet>random_dict2 = random_dict.copy()
</snippet></ROW><ROW><id>13570780</id><snippet>random_dict2</snippet></ROW><ROW><id>13570780</id><snippet>random_dict</snippet></ROW><ROW><id>13570780</id><snippet>def addOnlyOneValue(random_dict):
    print({key: value+1 for key, value in random_dict.items()})
</snippet></ROW><ROW><id>13570909</id><snippet>.update()</snippet></ROW><ROW><id>13570909</id><snippet>None</snippet></ROW><ROW><id>13570909</id><snippet>.pop()</snippet></ROW><ROW><id>13570909</id><snippet>dict</snippet></ROW><ROW><id>13570909</id><snippet>dict</snippet></ROW><ROW><id>13570909</id><snippet>x.update(x.pop('sub'))
</snippet></ROW><ROW><id>13570909</id><snippet>&gt;&gt;&gt; x = dict(_id=0, sub=dict(a=1, b=2))
&gt;&gt;&gt; x.update(x.pop('sub'))
&gt;&gt;&gt; x
{'a': 1, '_id': 0, 'b': 2}
</snippet></ROW><ROW><id>13570909</id><snippet>def inplace_flatten(d):
    keys = list(d.keys())
    for k in keys:
        if isinstance(d[k], dict):
            inplace_flatten(d[k])
            d.update(d.pop(k))
</snippet></ROW><ROW><id>13570977</id><snippet>[[0. for i in range(m+1)] for j in range(n+1)]
</snippet></ROW><ROW><id>13570977</id><snippet>numpy</snippet></ROW><ROW><id>13570977</id><snippet>array</snippet></ROW><ROW><id>13570977</id><snippet>numpy</snippet></ROW><ROW><id>13570977</id><snippet>numpy.zeros((m+1, n+1))
</snippet></ROW><ROW><id>13571010</id><snippet>set_cookie()</snippet></ROW><ROW><id>13571010</id><snippet>get_cookie()</snippet></ROW><ROW><id>13571082</id><snippet>#!/usr/bin/python

from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
import unittest

class GoogleTest(unittest.TestCase):
    def test_basic_search(self):
        # Create a new instance of the Firefox driver
        driver = webdriver.Firefox()
        driver.implicitly_wait(10)

        # go to the google home page
        driver.get("http://www.google.com")

        # find the element that's name attribute is q (the google search box)
        inputElement = driver.find_element_by_name("q")

        # type in the search
        inputElement.send_keys("Cheese!")

        # submit the form (although google automatically searches 
        # now without submitting)
        inputElement.submit()

        # the page is ajaxy so the title is originally this:
        original_title = driver.title

        try:
            # we have to wait for the page to refresh, the last thing 
            # that seems to be updated is the title
            WebDriverWait(driver, 10).until(lambda driver :  
                                     driver.title != original_title)
            self.assertIn("cheese!", driver.title.lower())

            # You should see "cheese! - Google Search"
            print driver.title
        finally:
            driver.quit()

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>13571082</id><snippet>driver = webdriver.Chrome()
driver = webdriver.Firefox()
driver = webdriver.Ie()
</snippet></ROW><ROW><id>13571082</id><snippet>python &lt;script_name.py&gt;
</snippet></ROW><ROW><id>13571082</id><snippet>!#/usr/bin/python</snippet></ROW><ROW><id>13571082</id><snippet>if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>13571082</id><snippet>./selenium_test.py</snippet></ROW><ROW><id>13571082</id><snippet>python -m unittest selenium_test.GoogleTest
</snippet></ROW><ROW><id>13571166</id><snippet>file</snippet></ROW><ROW><id>13571166</id><snippet>root</snippet></ROW><ROW><id>13571166</id><snippet>with open('output.txt','w') as fout:
    for root, subFolders, files in os.walk(rootdir):
        if 'data.txt' in files:
            with open(os.path.join(root, 'data.txt'), 'r') as fin:
                for lines in fin:
                    dosomething()
</snippet></ROW><ROW><id>13571207</id><snippet>sorted_random_list()</snippet></ROW><ROW><id>13571207</id><snippet>new_list = random_list(n)
insertion_sort(new_list)
return new_list
</snippet></ROW><ROW><id>13571207</id><snippet>my_list</snippet></ROW><ROW><id>13571207</id><snippet>random_list()</snippet></ROW><ROW><id>13571207</id><snippet>random_list(n)</snippet></ROW><ROW><id>13571207</id><snippet>sorted_random_list()</snippet></ROW><ROW><id>13571278</id><snippet>scipy.stats.kurtosis()</snippet></ROW><ROW><id>13571278</id><snippet>scipy.stats.kurtosis()</snippet></ROW><ROW><id>13571278</id><snippet>np.sqrt()</snippet></ROW><ROW><id>13571278</id><snippet>kurtosis(testdata, False, False)</snippet></ROW><ROW><id>13571278</id><snippet>In [51]: def kurt(obs):
   ....:     num = np.sum((obs - mean(obs)) ** 4)/ len(obs)
   ....:     denom = variance(obs) ** 2  # avoid losing precision with np.sqrt call
   ....:     return num / denom
</snippet></ROW><ROW><id>13571390</id><snippet>{{site}}/accounts/activate/{{ activation_key }}/
</snippet></ROW><ROW><id>13571390</id><snippet>SITE_ID</snippet></ROW><ROW><id>13571390</id><snippet>settings.py</snippet></ROW><ROW><id>13571390</id><snippet>site</snippet></ROW><ROW><id>13571390</id><snippet>djangoproject.com</snippet></ROW><ROW><id>13571390</id><snippet>SITE_ID</snippet></ROW><ROW><id>13571829</id><snippet>.</snippet></ROW><ROW><id>13571829</id><snippet>PATTERN = re.compile(r"(?:.|\n\s)+")
</snippet></ROW><ROW><id>13571936</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>13572024</id><snippet>&gt;&gt;&gt; p = 3
&gt;&gt;&gt; range(p)
[0, 1, 2]
</snippet></ROW><ROW><id>13572024</id><snippet>snakefield.table[self.x - 0 * b][self.y - 0 * c] = self.sign  # &lt;-- this one
snakefield.table[self.x - 1 * b][self.y - 1 * c] = self.sign
snakefield.table[self.x - 2 * b][self.y - 2 * c] = self.sign
</snippet></ROW><ROW><id>13572024</id><snippet>p</snippet></ROW><ROW><id>13572024</id><snippet>p - 1</snippet></ROW><ROW><id>13572024</id><snippet>&gt;&gt;&gt; range(1, p + 1)
[1, 2, 3]
</snippet></ROW><ROW><id>13572081</id><snippet>iter</snippet></ROW><ROW><id>13572081</id><snippet>next</snippet></ROW><ROW><id>13572081</id><snippet>irofile = iter(rofile)
for line in irofile:
    print line
    if(line == 'foo'):
        line = next(irofile)  #BEWARE, This could raise StopIteration!
        print line
</snippet></ROW><ROW><id>13572081</id><snippet>iter</snippet></ROW><ROW><id>13572081</id><snippet>file</snippet></ROW><ROW><id>13572081</id><snippet>list</snippet></ROW><ROW><id>13572232</id><snippet>elapsed_time = rounds * native_speed</snippet></ROW><ROW><id>13572232</id><snippet>native_speed = 12000 / .143 = 83916 iterations/second</snippet></ROW><ROW><id>13572232</id><snippet>83916 * .350 = 29575 rounds</snippet></ROW><ROW><id>13572232</id><snippet>elapsed_time = (2 ** rounds) * native_speed</snippet></ROW><ROW><id>13572232</id><snippet>native_speed = (2 ** 12) / .405 = 10113 iterations/second</snippet></ROW><ROW><id>13572232</id><snippet>log(10113 * .350, 2) = 11.79 rounds</snippet></ROW><ROW><id>13572232</id><snippet>rounds=11</snippet></ROW><ROW><id>13572232</id><snippet>rounds=12</snippet></ROW><ROW><id>13572232</id><snippet>$ python choose_rounds.py -h
usage: python choose_rounds.py &lt;hash_name&gt; [&lt;target_in_milliseconds&gt;]

$ python choose_rounds.py pbkdf2_sha512 350
hash............: pbkdf2_sha512
speed...........: 83916 iterations/second
target time.....: 350 ms
target rounds...: 29575  

$ python choose_rounds.py bcrypt 350
hash............: bcrypt
speed...........: 10113 iterations/second
target time.....: 350 ms
target rounds...: 11 (200ms -- 150ms faster than requested)
target rounds...: 12 (400ms -- 50ms slower than requested)
</snippet></ROW><ROW><id>13572232</id><snippet> days * dollars = 2**(n-31) * rounds
</snippet></ROW><ROW><id>13572232</id><snippet>days</snippet></ROW><ROW><id>13572232</id><snippet>dollars</snippet></ROW><ROW><id>13572232</id><snippet>n</snippet></ROW><ROW><id>13572232</id><snippet>2**(32-31)*30000/2000</snippet></ROW><ROW><id>13572232</id><snippet>31</snippet></ROW><ROW><id>13572232</id><snippet>2**-31</snippet></ROW><ROW><id>13572232</id><snippet>46</snippet></ROW><ROW><id>13572549</id><snippet>nltk</snippet></ROW><ROW><id>13572640</id><snippet>import numpy as np
a = np.array([1,2,2,1]).reshape(2,2)
# palette must be given in sorted order
palette = [1, 2]
# key gives the new values you wish palette to be mapped to.
key = np.array([0, 10])
index = np.digitize(a.reshape(-1,), palette)-1
print(key[index].reshape(a.shape))
</snippet></ROW><ROW><id>13572640</id><snippet>[[ 0 10]
 [10  0]]
</snippet></ROW><ROW><id>13572640</id><snippet>import numpy as np
import random
palette = np.arange(8)
key = palette**2
a = np.array([random.choice(palette) for i in range(514*504)]).reshape(514,504)

def using_unique():
    palette, index = np.unique(a, return_inverse = True)
    return key[index].reshape(a.shape)

def using_digitize():
    index = np.digitize(a.reshape(-1,), palette)-1
    return key[index].reshape(a.shape)

if __name__ == '__main__':
    assert np.allclose(using_unique(), using_digitize())
</snippet></ROW><ROW><id>13572640</id><snippet>% python -mtimeit -s 'import test as t' 't.using_digitize()'
100 loops, best of 3: 6.62 msec per loop
% python -mtimeit -s 'import test as t' 't.using_unique()'
10 loops, best of 3: 45.3 msec per loop
</snippet></ROW><ROW><id>13572767</id><snippet>import re
soup = BeautifulSoup(urllib2.urlopen(url).read(),"lxml");
for item in soup.find_all("td", { "class" : re.compile(r"^(s|sb)$") })
</snippet></ROW><ROW><id>13572767</id><snippet>^</snippet></ROW><ROW><id>13572767</id><snippet>(s|sb)</snippet></ROW><ROW><id>13572767</id><snippet>'s'</snippet></ROW><ROW><id>13572767</id><snippet>'sb'</snippet></ROW><ROW><id>13572767</id><snippet>$</snippet></ROW><ROW><id>13572798</id><snippet>|</snippet></ROW><ROW><id>13572798</id><snippet>or</snippet></ROW><ROW><id>13572798</id><snippet>and</snippet></ROW><ROW><id>13572798</id><snippet>or</snippet></ROW><ROW><id>13572798</id><snippet>&amp;</snippet></ROW><ROW><id>13572798</id><snippet>|</snippet></ROW><ROW><id>13572952</id><snippet>def recur_method(self, key=None, val=None):
    if key is None and val is None:
       raise exception("You fail it")
</snippet></ROW><ROW><id>13572952</id><snippet>None</snippet></ROW><ROW><id>13572952</id><snippet>sentinel = object()
def recur_method(self, key=sentinel, val=sentinel):
    if key is sentinel and val is sentinel:
       raise exception("You fail it")
</snippet></ROW><ROW><id>13573175</id><snippet>with open(full_path, 'a+') as csvfile:
    linewriter = csv.DictWriter(csvfile, fieldorder, delimiter='|',
                            quotechar='"', quoting=csv.QUOTE_MINIMAL)
    linewriter.writerow(data)
</snippet></ROW><ROW><id>13573175</id><snippet>def scrape_table(url, linewriter):
    # do scraping to get data
    linewriter.writerow(data)
</snippet></ROW><ROW><id>13573175</id><snippet>with open(full_path, 'a+') as csvfile:
    linewriter = csv.DictWriter(csvfile, fieldorder, delimiter='|',
                            quotechar='"', quoting=csv.QUOTE_MINIMAL)

    for url in a_bunch_of_urls:
        scrape_table(url, linewriter)
</snippet></ROW><ROW><id>13573197</id><snippet>key</snippet></ROW><ROW><id>13573197</id><snippet>sorted</snippet></ROW><ROW><id>13573197</id><snippet>iteritems()</snippet></ROW><ROW><id>13573197</id><snippet>(key, value)</snippet></ROW><ROW><id>13573197</id><snippet>lambda (x, y): y['position']</snippet></ROW><ROW><id>13573197</id><snippet>y['position']</snippet></ROW><ROW><id>13573197</id><snippet>position</snippet></ROW><ROW><id>13573197</id><snippet>In [35]: statuses = {
            'pending' : {'status_for':'all', 'position':1},
            'cancelled' : {'status_for':'all','position':2},
            'approved' : {'status_for':'owner', 'position':1},
            'rejected - owner' : {'status_for':'owner', 'position':2},
            'accepted' : {'status_for':'dev', 'position':1},
            'rejected - developer' : {'status_for':'dev', 'position':3},
            'closed' : {'status_for':'dev', 'position':5},
            }

In [44]: for s in sorted(statuses.iteritems(), key=lambda (x, y): y['position']):
   ....:     print s
   ....:
   ....:
('accepted', {'position': 1, 'status_for': 'dev'})
('approved', {'position': 1, 'status_for': 'owner'})
('pending', {'position': 1, 'status_for': 'all'})
('rejected - owner', {'position': 2, 'status_for': 'owner'})
('cancelled', {'position': 2, 'status_for': 'all'})
('rejected - developer', {'position': 3, 'status_for': 'dev'})
('closed', {'position': 5, 'status_for': 'dev'})
</snippet></ROW><ROW><id>13573647</id><snippet>libmysqlclient</snippet></ROW><ROW><id>13573647</id><snippet>libmysqlclient16</snippet></ROW><ROW><id>13573647</id><snippet>MySQLdb</snippet></ROW><ROW><id>13574107</id><snippet>class Dynamic(db.Model):                                                                        # key : name
    name = db.StringProperty() 
    blob_ref = blobstore.BlobReferenceProperty()
    serving_url = db.LinkProperty()

dyn= Dynamic.get_by_key_name(key_name)
try :                                                                               # get url with size = 0, do not save it
    dyn.serving_url = images.get_serving_url(dyn.blob_ref, size=None, secure_url=True)
except DeadlineExceededError : 
    try :             # sometimes this request fails, retry. This always works fine
        dyn.serving_url = images.get_serving_url(dyn.blob_ref, size=None, secure_url=True)
    except DeadlineExceededError :
        logging.error('Image API get_serving_url deadline error after retry' %(dyn.key().name()))                        
                return None
    dyn.put()
</snippet></ROW><ROW><id>13574221</id><snippet># FRAME 1 ##########################################################
self.frame1 = gtk.Frame()
self.contentTable.attach(self.frame1, 0, 1, 0, 1,
gtk.FILL | gtk.EXPAND, gtk.EXPAND | gtk.SHRINK | gtk.FILL, 0, 0)
</snippet></ROW><ROW><id>13574336</id><snippet>todays_lunch</snippet></ROW><ROW><id>13574336</id><snippet>today's dinner</snippet></ROW><ROW><id>13574336</id><snippet>&gt;&gt;&gt;todays_dinner - todays_lunch &lt; timeofday
True
</snippet></ROW><ROW><id>13574510</id><snippet>def reorder(s, word, delta):
  words = s.split()
  oldpos = words.index(word)
  words.insert(oldpos+delta, words.pop(oldpos))
  return ' '.join(words)

print reorder('The quick brown fox jumps over the lazy dog', 'quick', 2)
</snippet></ROW><ROW><id>13574589</id><snippet>def singleton(cls):
    class C(cls):
        _instance = None
        def __new__(c, *args, **kwargs):
            if type(c._instance) != c:
                c._instance = cls.__new__(c, *args, **kwargs)
            return c._instance
    C.__name__ = cls.__name__
    return C
</snippet></ROW><ROW><id>13574589</id><snippet>__new__()</snippet></ROW><ROW><id>13574629</id><snippet>numpy.where</snippet></ROW><ROW><id>13574629</id><snippet>&gt;&gt;&gt; fvd_exists = a['first_visit_date'] != ''
&gt;&gt;&gt; np.where(fvd_exists, a['trainer_managing'], a['trainer_operator'])
array(['"06DA1B3-Lebanon NH"', '"06405B2-Lebanon NH"',
       '"0643D38-Hanover NH"', '"06CB8CF-Hanover NH"',
       '"06D26AD-Hanover NH"', '"06388B2-Lebanon NH"',
       ...
</snippet></ROW><ROW><id>13574629</id><snippet>a</snippet></ROW><ROW><id>13574629</id><snippet>fvd_exists</snippet></ROW><ROW><id>13574629</id><snippet>fromarrays</snippet></ROW><ROW><id>13574629</id><snippet>&gt;&gt;&gt; a = np.recfromcsv('test.csv')
&gt;&gt;&gt; b = a[a['first_visit_date'] != '']
&gt;&gt;&gt; has_op = b['trainer_operator'] != ''
&gt;&gt;&gt; trainer_col = np.where(name, b.trainer_operator, b.trainer_managing)
&gt;&gt;&gt; np.rec.fromarrays([b.id, b.enrollment_date, trainer_col],
...                   names=['id', 'enrollment_date', 'trainer'])
rec.array([('1536D', '12-Feb-12', '"06DA1B3-Lebanon NH"'),
       ('F15D', '18-May-12', '"06405B2-Lebanon NH"'),
       ('8096', '8-Aug-12', '"0643D38-Hanover NH"'),
       ('A036', '1-Apr-12', '"06CB8CF-Hanover NH"'),
       ('8944', '19-Feb-12', '"06D26AD-Hanover NH"'),
       ('1004E', '8-Jun-12', '"06388B2-Lebanon NH"'),
       ('16D87', '3-Jul-12', '"0649597-White River VT"'),
       ('30D7', '11-Nov-12', '"06D95A3-Hanover NH"'),
       ('3AE2', '21-Feb-12', '"06405B2-Lebanon NH"'),
       ('B0FE', '17-Feb-12', '"06D1B9D-Hartland VT"'),
       ('127A1', '11-Dec-11', '"064456E-Hanover NH"'),
       ('161FF', '20-Feb-12', '"0643D38-Hanover NH"'),
       ('475B', '25-Sep-12', '"06D26AD-Hanover NH"'),
       ('151A3', '7-Mar-12', '"06388B2-Lebanon NH"'),
       ('D31B', '18-Dec-11', '"06405B2-Lebanon NH"'),
       ('20F5', '8-Jul-12', '"0669C50-Randolph VT"'),
       ('C6DC', '19-Dec-11', '"0649597-White River VT"'),
       ('177F8', '20-Aug-12', '"063B208-Randolph VT"'),
       ('553E', '11-Oct-12', '"06D95A3-Hanover NH"'),
       ('12D5F', '18-Jul-12', '"0649597-White River VT"'),
       ('11795', '27-Feb-12', '"0643D38-Hanover NH"'),
       ('17B43', '11-Aug-12', ''),
       ('16C99', '11-Aug-12', '"06D3206-Hanover NH"')], 
      dtype=[('id', '|S5'), ('enrollment_date', '|S9'), ('trainer', '|S24')])
</snippet></ROW><ROW><id>13574717</id><snippet>def popular(letter):
    '''(dict of {tuple of (str, str, str, str): int}) -&gt; dict of {str:int}
    '''
    my_dictionary = {}
    for alphabet, picks in letter.items():
        if alphabet[0] in my_dictionary:
            my_dictionary[alphabet[0]] += picks
        else:
            my_dictionary[alphabet[0]] = picks
    return my_dictionary
</snippet></ROW><ROW><id>13574717</id><snippet>&gt;&gt;&gt; letter = {('A','B','C','D'):3, 
... ('A','C','B','D'):2,
... ('B','D','C','A'):4,
... ('D','C','B','A'):3,
... ('C','B','A','D'):1,
... ('C','D','A','B'):1}
&gt;&gt;&gt; popular(letter)
{'A': 5, 'C': 2, 'B': 4, 'D': 3}
</snippet></ROW><ROW><id>13574717</id><snippet>from collections import defaultdict
def popular(letter):
    my_dictionary = defaultdict(int)
    for alphabet, picks in letter.items():
        my_dictionary[alphabet[0]] += picks
    return dict(my_dictionary)
</snippet></ROW><ROW><id>13574723</id><snippet>MM/DD,YEAR</snippet></ROW><ROW><id>13574723</id><snippet>print(lastTime.strftime('%m/%d,%Y'))
</snippet></ROW><ROW><id>13574723</id><snippet>MM-DD-YEAR</snippet></ROW><ROW><id>13574723</id><snippet>print(lastTime.strftime('%m-%d-%Y'))
</snippet></ROW><ROW><id>13574723</id><snippet>lastTime</snippet></ROW><ROW><id>13574723</id><snippet>lastTime.month, lastTime.day, lastTime.year
</snippet></ROW><ROW><id>13574801</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>13574801</id><snippet>tables = soup.findAll('table')</snippet></ROW><ROW><id>13574801</id><snippet>names = []
cdict = {0:[], 1:[]} # dictionary of "td positions to contents"

tables = soup.findAll('table')
for tt in tables[1].find_all('tr')[1:]: # skip first &lt;tr&gt; since it is the header
    names.append(tt.find_all('th')[0]) # 1st column is a th with the name
    for k, v in cdict.items():
        # append the &lt;td&gt;text&lt;/td&gt; of column k to the corresponding list
        v.append(tt.find_all('td')[k].text)
</snippet></ROW><ROW><id>13574801</id><snippet>for i in xrange(len(names)):
    print names[i], int(cdict[0][i]) + int(cdict[1][i])
</snippet></ROW><ROW><id>13574817</id><snippet>import Image
import ImageDraw
img = Image.open(...).convert('RGBA')

x = ['10', '30', '70']
y = ['15', '45', '90']

# convert values to ints
x = map(int, x)
y = map(int, y)

img2 = img.copy()
draw = ImageDraw.Draw(img2)
draw.polygon(zip(x,y), fill = "wheat")

img3 = Image.blend(img, img2, 0.5)
img3.save('/tmp/out.png')
</snippet></ROW><ROW><id>13574817</id><snippet>draw.polygon</snippet></ROW><ROW><id>13574817</id><snippet>def polygon(self, xy, fill=None, outline=None):
</snippet></ROW><ROW><id>13574817</id><snippet>fill</snippet></ROW><ROW><id>13574817</id><snippet>outline</snippet></ROW><ROW><id>13574817</id><snippet>In [38]: draw.polygon?
...
File:       /usr/lib/python2.7/dist-packages/PIL/ImageDraw.py
</snippet></ROW><ROW><id>13574817</id><snippet>img</snippet></ROW><ROW><id>13574817</id><snippet>alpha</snippet></ROW><ROW><id>13574817</id><snippet>out = image1 * (1.0 - alpha) + image2 * alpha
</snippet></ROW><ROW><id>13574886</id><snippet>szPath</snippet></ROW><ROW><id>13574886</id><snippet>('szPath', c_wchar*MAX_PATH)
</snippet></ROW><ROW><id>13574886</id><snippet>WCHAR szPath[MAX_PATH];
</snippet></ROW><ROW><id>13574886</id><snippet>MAX_PATH</snippet></ROW><ROW><id>13574886</id><snippet>MAX_PATH</snippet></ROW><ROW><id>13574886</id><snippet>from ctypes.wintypes import MAX_PATH
</snippet></ROW><ROW><id>13575200</id><snippet>yield from comb(...)
</snippet></ROW><ROW><id>13575200</id><snippet>for out in comb(...):
    yield out
</snippet></ROW><ROW><id>13575200</id><snippet>NameError</snippet></ROW><ROW><id>13575200</id><snippet>_stack</snippet></ROW><ROW><id>13575200</id><snippet>@supergenerator</snippet></ROW><ROW><id>13575200</id><snippet>def flatten(seq, levels=1):
    for level in range(levels):
        seq = itertools.chain.from_iterable(seq)
    return seq
</snippet></ROW><ROW><id>13575200</id><snippet>def a():
    yield 1
    yield 2
    yield 3
def b():
    yield a()
def c():
    yield b()
def d():
    yield c()

for i in flatten(d(), 3):
    print i
</snippet></ROW><ROW><id>13575200</id><snippet>lambda x: isinstance(list)</snippet></ROW><ROW><id>13575200</id><snippet>comb</snippet></ROW><ROW><id>13575200</id><snippet>tuple</snippet></ROW><ROW><id>13575200</id><snippet>collapse</snippet></ROW><ROW><id>13575279</id><snippet>C:\PythonXX\python.exe path\to\script.py</snippet></ROW><ROW><id>13575569</id><snippet>while x != 'q' or 'Q' :
</snippet></ROW><ROW><id>13575569</id><snippet>Q</snippet></ROW><ROW><id>13575569</id><snippet>True</snippet></ROW><ROW><id>13575569</id><snippet>while x != 'q' and x != 'Q' :
</snippet></ROW><ROW><id>13575609</id><snippet>itertools.izip()</snippet></ROW><ROW><id>13575609</id><snippet>for item1, item2 in itertools.izip(my_list, my_list[1:]):
    # do something...
</snippet></ROW><ROW><id>13575609</id><snippet>enumerate()</snippet></ROW><ROW><id>13575609</id><snippet>for index, item in enumerate(my_list):
    # do something...
</snippet></ROW><ROW><id>13575609</id><snippet>None</snippet></ROW><ROW><id>13575609</id><snippet>previous = None
for item in my_list:
    if previous is None:
        previous = item
        continue
    # do something...
</snippet></ROW><ROW><id>13575643</id><snippet>slice</snippet></ROW><ROW><id>13575643</id><snippet>split</snippet></ROW><ROW><id>13575643</id><snippet>rsplit</snippet></ROW><ROW><id>13575719</id><snippet>while winning_party == '':
    total_votes = sum(d.values())    # Recompute the total before each iteration.
    for key, vote in d.items():
        if d[key] &gt; 0.5 * total_votes:
            winning_party = key
            return winning_party

    min_party = min(d, key=d.get)    # Find key having minimum votes.
    del d[min_party]                 # Delete it.
</snippet></ROW><ROW><id>13575747</id><snippet>ipython --pylab</snippet></ROW><ROW><id>13575747</id><snippet>show()</snippet></ROW><ROW><id>13575747</id><snippet>draw()</snippet></ROW><ROW><id>13575747</id><snippet>Agg</snippet></ROW><ROW><id>13575747</id><snippet>~/.matplotlib/matplotlibrc</snippet></ROW><ROW><id>13575747</id><snippet>backend      : Agg
</snippet></ROW><ROW><id>13575747</id><snippet>ipython</snippet></ROW><ROW><id>13575747</id><snippet>--pylab</snippet></ROW><ROW><id>13575747</id><snippet>ipython --pylab=qt
</snippet></ROW><ROW><id>13575776</id><snippet>A.mean(axis=0)
</snippet></ROW><ROW><id>13575776</id><snippet>A = np.dstack(list_of_arrays)  # Combine the 2D arrays along a new 3rd dimension
A.mean(axis=2)                 # Calculate the means along that new dimension
</snippet></ROW><ROW><id>13575913</id><snippet>#from 'foo_bar' to 'FooBar'
def lower_case_underscore_to_camel_case(self, string):
  print string
  class_ = string.__class__
  return class_.join(class_('.'), map(class_.capitalize, string.split('_')))
</snippet></ROW><ROW><id>13575913</id><snippet>return class_('.').join(map(class_.capitalize, string.split('_')))
</snippet></ROW><ROW><id>13575913</id><snippet>Foo.Bar</snippet></ROW><ROW><id>13575913</id><snippet>foo_bar</snippet></ROW><ROW><id>13575964</id><snippet>random.choice</snippet></ROW><ROW><id>13575964</id><snippet>import random
random.choice([1,4,7,9,13,42])
</snippet></ROW><ROW><id>13576037</id><snippet>import itertools

# NodeTree
class Node(object):
    def __init__(self, name):
        self.name = name
        self.children = []

    def add_child(self, child_node):
        self.children.append(child_node)

    def __repr__(self):
        if not self.children:
            return '&lt;%s/&gt;' % self.name
        else:
            children = ''.join([repr(child) for child in self.children])
            return '&lt;%s&gt;%s&lt;/%s&gt;' % (self.name, children, self.name)

# create_T(d)
def create_tree(tree_dict):
    # find which node is the top of the tree (assume it is well-formed)
    all_leaves = set(itertools.chain(*tree_dict.values()))
    top_of_the_tree = set(tree_dict.keys()) - all_leaves

    def get_node(name):
        node = Node(name)
        for child_name in tree_dict[name]:
            node.add_child(get_node(child_name))
        return node
    return get_node(top_of_the_tree.pop())

print create_tree({'a': ['b', 'c'],
                   'b': ['d'],
                   'c': ['e'],
                   'd': [],
                   'e': [],
                   'f': ['a']})
</snippet></ROW><ROW><id>13576037</id><snippet>   &lt;f&gt;&lt;a&gt;&lt;b&gt;&lt;d/&gt;&lt;/b&gt;&lt;c&gt;&lt;e/&gt;&lt;/c&gt;&lt;/a&gt;&lt;/f&gt;
</snippet></ROW><ROW><id>13576172</id><snippet>def remove_indices(numbers, indices):
    result = []
    i=0
    for j in sorted(indices):
        result += numbers[i:j]
        i = j+1
    result += numbers[i:]
    return result
</snippet></ROW><ROW><id>13576190</id><snippet>import Image, cv
cv_im = cv.CreateImage((320,200), cv.IPL_DEPTH_8U, 1)
pi = Image.fromstring("L", cv.GetSize(cv_im), cv_im.tostring())
</snippet></ROW><ROW><id>13576268</id><snippet>str.split</snippet></ROW><ROW><id>13576268</id><snippet>list</snippet></ROW><ROW><id>13576268</id><snippet>for line in file:
    left,right = line.split('(',1)
    hexvalues = right.split(')')[0]
    hex1,hex2 = hexvalues.split(',')
</snippet></ROW><ROW><id>13576268</id><snippet>import re
&gt;&gt;&gt; re.findall(r'\(([^)]+)',"this.is(0xffaabb,0x112214)")
['0xffaabb,0x112214']
</snippet></ROW><ROW><id>13576420</id><snippet>$ curl http://localhost:8000/_ah/login -d "email=youremail@here.com&amp;action=Log+In" -c -
</snippet></ROW><ROW><id>13576420</id><snippet>localhost FALSE / FALSE 0 dev_appserver_login "youremail@here.com:False:0123456789101112"
</snippet></ROW><ROW><id>13576420</id><snippet>curl -H 'content-type:application/json' \
    -d '{"name":"test1"}' \
    -b "dev_appserver_login="youremail@here.com:False:0123456789101112"" \
    http://localhost:8080/api.context_create
</snippet></ROW><ROW><id>13576562</id><snippet>dict</snippet></ROW><ROW><id>13576562</id><snippet>MessageField</snippet></ROW><ROW><id>13576562</id><snippet>Message</snippet></ROW><ROW><id>13576562</id><snippet>{'amount': 31, 'type': 'fish', mine: False}
</snippet></ROW><ROW><id>13576562</id><snippet>from protorpc import messages
class MyCatch(messages.Message):
  amount = messages.IntegerField(1)
  type = messages.StringField(2)
  mine = messages.BooleanField(3)
</snippet></ROW><ROW><id>13576562</id><snippet>messages.MessageField(MyCatch, index, ...)
</snippet></ROW><ROW><id>13576562</id><snippet>dict</snippet></ROW><ROW><id>13576562</id><snippet>json</snippet></ROW><ROW><id>13576562</id><snippet>ensure_ascii=True</snippet></ROW><ROW><id>13576562</id><snippet>str</snippet></ROW><ROW><id>13576562</id><snippet>BytesField</snippet></ROW><ROW><id>13576562</id><snippet>import json

class MyMessage(messages.Message):
   some_dict = messages.BytesField(1)

my_dict = {'amount': 31, 'type': 'fish', mine: False}
message = MyMessage(some_dict=json.dumps(my_dict, ensure_ascii=True))
</snippet></ROW><ROW><id>13576562</id><snippet>ensure_ascii</snippet></ROW><ROW><id>13576562</id><snippet>True</snippet></ROW><ROW><id>13576562</id><snippet>pickle</snippet></ROW><ROW><id>13576562</id><snippet>pickle.dumps</snippet></ROW><ROW><id>13576562</id><snippet>json.dumps</snippet></ROW><ROW><id>13576562</id><snippet>pickle.dumps</snippet></ROW><ROW><id>13576562</id><snippet>ensure_ascii=True</snippet></ROW><ROW><id>13576591</id><snippet>Set size =   6,  Number max =  20   NPE method
  0.042s  Sizes: [200, 1534, 67]
  0.281s  Sizes: [400, 6257, 618]
  0.890s  Sizes: [600, 13908, 2043]
  2.097s  Sizes: [800, 24589, 4620]
  4.387s  Sizes: [1000, 39035, 9689]

Set size =   6,  Number max =  20   jwpat7 method
  0.041s  Sizes: [200, 1534, 67]
  0.077s  Sizes: [400, 6257, 618]
  0.167s  Sizes: [600, 13908, 2043]
  0.330s  Sizes: [800, 24589, 4620]
  0.590s  Sizes: [1000, 39035, 9689]
</snippet></ROW><ROW><id>13576591</id><snippet>#!/usr/bin/python
from random import sample, seed
import time
nsets,   ndelta,  ncount, setsize  = 200, 200, 5, 6
topnum, ranSeed, shoSets, shoUnion = 20, 1234, 0, 0
seed(ranSeed)
print 'Set size = {:3d},  Number max = {:3d}'.format(setsize, topnum)

for casenumber in range(ncount):
    t0 = time.time()
    sets, sizes, ssum = [], [0]*nsets, [0]*(nsets+1);
    for i in range(nsets):
        sets.append(set(sample(xrange(topnum), setsize)))

    if shoSets:
        print 'sets = {},  setSize = {},  top# = {},  seed = {}'.format(
            nsets, setsize, topnum, ranSeed)
        print 'Sets:'
        for s in sets: print s

    # Method by jwpat7
    def accrue(u, bset, csets):
        for i, c in enumerate(csets):
            y = u + [c]
            yield y
            boc = bset|c
            ts = [s for s in csets[i+1:] if boc.isdisjoint(s)]
            for v in accrue (y, boc, ts):
                yield v

    # Method by NPE
    def comb(input, lst = [], lset = set()):
        if lst:
            yield lst
        for i, el in enumerate(input):
            if lset.isdisjoint(el):
                for out in comb(input[i+1:], lst + [el], lset | set(el)):
                    yield out

    # Uncomment one of the following 2 lines to select method
    #for u in comb (sets):
    for u in accrue ([], set(), sets):
        sizes[len(u)-1] += 1
        if shoUnion: print u
    t1 = time.time()
    for t in range(nsets-1, -1, -1):
        ssum[t] = sizes[t] + ssum[t+1]
    print '{:7.3f}s  Sizes:'.format(t1-t0), [s for (s,t) in zip(sizes, ssum) if t&gt;0]
    nsets += ndelta
</snippet></ROW><ROW><id>13576591</id><snippet>accrue</snippet></ROW><ROW><id>13576591</id><snippet>(u, bset, csets)</snippet></ROW><ROW><id>13576591</id><snippet>accrue</snippet></ROW><ROW><id>13576591</id><snippet>def accrue(csets, u=[], bset=set()):</snippet></ROW><ROW><id>13576591</id><snippet>for v in accrue (ts, y, boc):</snippet></ROW><ROW><id>13576591</id><snippet>accrue</snippet></ROW><ROW><id>13576591</id><snippet>[accrue(listofsets)]</snippet></ROW><ROW><id>13576591</id><snippet>ValueError: zero length field name in format</snippet></ROW><ROW><id>13576591</id><snippet># change:
    print "Set size = {:3d}, Number max = {:3d}".format(setsize, topnum)
# to:
    print "Set size = {0:3d}, Number max = {1:3d}".format(setsize, topnum)
</snippet></ROW><ROW><id>13576656</id><snippet>twill.commands.url</snippet></ROW><ROW><id>13576656</id><snippet>/auth/login/?next=%2Fadmin%2F</snippet></ROW><ROW><id>13576656</id><snippet>/auth/login       # Match this literal string
/?                # followed by zero or one slash
next=%2Fadmin%2F  # followed by this literal string
</snippet></ROW><ROW><id>13576656</id><snippet>/auth/login/next=%2Fadmin%2F</snippet></ROW><ROW><id>13576656</id><snippet>/auth/loginnext=%2Fadmin%2F</snippet></ROW><ROW><id>13576656</id><snippet>/auth/login/?next=%2Fadmin%2F</snippet></ROW><ROW><id>13576656</id><snippet>url(r"/auth/login/\?next=%2Fadmin%2F")</snippet></ROW><ROW><id>13576804</id><snippet>QuerySet</snippet></ROW><ROW><id>13576804</id><snippet>UserSocialAuth</snippet></ROW><ROW><id>13576804</id><snippet>tokens = [x.tokens for x in instance]
</snippet></ROW><ROW><id>13576804</id><snippet>get</snippet></ROW><ROW><id>13576804</id><snippet>filter</snippet></ROW><ROW><id>13576804</id><snippet>instance = UserSocialAuth.objects.get(user=request.user, provider='facebook') 
token = instance.tokens
</snippet></ROW><ROW><id>13576804</id><snippet>oauth_token</snippet></ROW><ROW><id>13576804</id><snippet>oauth_token_secret</snippet></ROW><ROW><id>13576876</id><snippet>In [255]: a = a.reset_index()

In [256]: a
Out[256]: 
   id1 id2  col1  to_merge_on
0    1   a     1            2
1    1   b     3            4
2    2   a     1            2
3    2   b     3            4

In [271]: c = pd.merge(a, b, how="left")

In [272]: c
Out[272]: 
   id1 id2  col1  to_merge_on  col2
0    1   a     1            2   NaN
1    2   a     1            2   NaN
2    2   b     3            3     2
3    1   b     3            4   NaN

In [273]: c = c.set_index(['id1','id2'])

In [274]: c
Out[274]: 
         col1  to_merge_on  col2
id1 id2                         
1   a       1            2   NaN
2   a       1            2   NaN
    b       3            3     2
1   b       3            4   NaN
</snippet></ROW><ROW><id>13576979</id><snippet>&gt;&gt;&gt; a=10**12
&gt;&gt;&gt; v=(2*(a/2)+1)**2
&gt;&gt;&gt; log(v,2)
79.72627427729958
</snippet></ROW><ROW><id>13577022</id><snippet>&lt;form action="{% url add store.store_name %}" method="post"&gt;
</snippet></ROW><ROW><id>13577217</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13577217</id><snippet>with open(datafile) as f:
    file_sorted = sorted((ast.literal_eval(x) for x in f),
                         key=lambda z:(int(z[1]),z[0]),
                         reverse=True)
</snippet></ROW><ROW><id>13577217</id><snippet>(ast.literal_eval(x) for x in f)  #turn each line in your file into a tuple
key=lambda z:(int(z[1]),z[0])     #function to determine how things are sorted.  Basically
                                  #sort as tuples:  `( int(z[1]),z[0] )`
reverse=True                      #descending order instead of ascending
</snippet></ROW><ROW><id>13577411</id><snippet>(?=RE)</snippet></ROW><ROW><id>13577411</id><snippet>(?P&lt;name&gt;RE)</snippet></ROW><ROW><id>13577411</id><snippet>(?P=name)</snippet></ROW><ROW><id>13577411</id><snippet>/"(?&gt;.*)"/.match('"Quote"') #=&gt; nil
</snippet></ROW><ROW><id>13577411</id><snippet>re.search(r'"(?=(?P&lt;tmp&gt;.*))(?P=tmp)"', '"Quote"') # =&gt; None
</snippet></ROW><ROW><id>13577411</id><snippet>"</snippet></ROW><ROW><id>13577411</id><snippet>re.search(r'"(?=(?P&lt;tmp&gt;[A-Za-z]*))(?P=tmp)"', '"Quote"').groupdict()
# =&gt; {'tmp': 'Quote'}
</snippet></ROW><ROW><id>13577411</id><snippet>re.search(r'"(?=(.*))\1"', '"Quote"') # =&gt; None
</snippet></ROW><ROW><id>13577411</id><snippet>perlre</snippet></ROW><ROW><id>13577411</id><snippet>(?&gt;...)</snippet></ROW><ROW><id>13577411</id><snippet>perlre</snippet></ROW><ROW><id>13577411</id><snippet>[nelhage@anarchique:~/tmp]$ cat re.py
import re
import timeit


re_1 = re.compile(r'''\(
                           (
                             [^()]+           # x+
                           |
                             \( [^()]* \)
                           )+
                       \)
                   ''', re.X)
re_2 = re.compile(r'''\(
                           (
                             (?=(?P&lt;tmp&gt;[^()]+ ))(?P=tmp) # Emulate (?&gt; x+)
                           |
                             \( [^()]* \)
                           )+
                       \)''', re.X)

print timeit.timeit("re_1.search('((()' + 'a' * 25)",
                    setup  = "from __main__ import re_1",
                    number = 10)

print timeit.timeit("re_2.search('((()' + 'a' * 25)",
                    setup  = "from __main__ import re_2",
                    number = 10)
</snippet></ROW><ROW><id>13577411</id><snippet>[nelhage@anarchique:~/tmp]$ python re.py
96.0800571442
7.41481781006e-05
</snippet></ROW><ROW><id>13577811</id><snippet>self.button = Button(text="Send",width=8,command=clicky)</snippet></ROW><ROW><id>13577811</id><snippet>command</snippet></ROW><ROW><id>13577811</id><snippet>bind</snippet></ROW><ROW><id>13577811</id><snippet>command</snippet></ROW><ROW><id>13577811</id><snippet>bind</snippet></ROW><ROW><id>13577811</id><snippet>command</snippet></ROW><ROW><id>13577811</id><snippet>Button</snippet></ROW><ROW><id>13577811</id><snippet>bind</snippet></ROW><ROW><id>13578055</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>13578055</id><snippet>lxml</snippet></ROW><ROW><id>13578055</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>13578055</id><snippet>lxml</snippet></ROW><ROW><id>13578055</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>13578055</id><snippet>lxml</snippet></ROW><ROW><id>13578055</id><snippet>lxml</snippet></ROW><ROW><id>13578199</id><snippet>test</snippet></ROW><ROW><id>13578199</id><snippet>make_birthday_list</snippet></ROW><ROW><id>13578199</id><snippet>def test(count):
    return [random.randint(1, 365) for x in range(count)]
</snippet></ROW><ROW><id>13578199</id><snippet>l</snippet></ROW><ROW><id>13578199</id><snippet>1</snippet></ROW><ROW><id>13578199</id><snippet>the_list</snippet></ROW><ROW><id>13578199</id><snippet>def duplicates(the_list):
    return len(the_list)!=len(set(the_list))
</snippet></ROW><ROW><id>13578199</id><snippet>num_samples = 10000
for count in range(100):
    dup = 0
    for test_number in range(num_samples):
        the_list = make_birthday_list(count)
        if duplicates(the_list):
            dup += 1
    print(count, dup/num_samples)   # / returns a float in Python3
</snippet></ROW><ROW><id>13578337</id><snippet>import numpy as np
with open('matrix.txt', 'r') as f:
    x = []
    for line in f:
        x.append(map(int, line.split()))
print x
print np.array(x)
</snippet></ROW><ROW><id>13578337</id><snippet>1 2 3 4
5 6 7 8
9 8 7 6
</snippet></ROW><ROW><id>13578337</id><snippet>[[1, 2, 3, 4], [5, 6, 7, 8], [9, 8, 7, 6]]
[[1 2 3 4]
 [5 6 7 8]
 [9 8 7 6]]
</snippet></ROW><ROW><id>13578337</id><snippet>print np.loadtxt('matrix.txt')</snippet></ROW><ROW><id>13578337</id><snippet>[[ 1.  2.  3.  4.]
 [ 5.  6.  7.  8.]
 [ 9.  8.  7.  6.]]
</snippet></ROW><ROW><id>13578355</id><snippet>Browser.form</snippet></ROW><ROW><id>13578355</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; br = mechanize.Browser()
&gt;&gt;&gt; response = br.open("default.aspx")
&gt;&gt;&gt; print br.form
None
&gt;&gt;&gt; br.select_form(nr=0)
&gt;&gt;&gt; print br.form
&lt;form1 POST default.aspx application/x-www-form-urlencoded
  &lt;HiddenControl(__VIEWSTATE=/wEPDwUKLTcxNTg3NzEzMQ9kFgQCAQ9kFgICCA8WAh4EaHJlZgUJZ3JlZW4uY3NzZAIDD2QWBgIHDw8WAh4EVGV4dAUjWW91ciBJUCBBZGRyZXNzIGlzIDogMjAzLjI5LjE1OS4xMzRkZAIJDxBkZBYBZmQCCw8WAh4HVmlzaWJsZWgWEAIDDxYCHwJoZAIFDxYCHwJoZAIHDxYCHwJoZAIPDxYCHgV2YWx1ZQUKMTEvMjcvMjAxMmQCEQ8PFgIfAQVKPHNlbGVjdCBpZD0iUEwiIG5hbWU9IlBheWVlTGlzdCI+PG9wdGlvbiB2YWx1ZT0iYWxsIj5BbGw8L29wdGlvbj48L3NlbGVjdD5kZAITDxYCHwMFCjExLzI3LzIwMTJkAhUPFgIfAwUKMTEvMjcvMjAxMmQCFw8PFgIfAQVMPHNlbGVjdCBpZD0iUEwyIiBuYW1lPSJQYXllZUxpc3QyIj48b3B0aW9uIHZhbHVlPSJhbGwiPkFsbDwvb3B0aW9uPjwvc2VsZWN0PmRkZDTdDxIlMu2gUsdr7GPbmUOQ3xzg) (readonly)&gt;
  &lt;HiddenControl(__EVENTVALIDATION=/wEWBwKfnIxpAsCktrgLAr2x1tEIAubH1rAKAtWJze8HAvCR5qcGAsjWwOgISMYAcE5r11vGAeoqgWzW0JGk2e4=) (readonly)&gt;
  &lt;SelectControl(ThemeList=[*Green, Blue, Red, Orange, Yellow, Violet])&gt;&gt;
</snippet></ROW><ROW><id>13578355</id><snippet>__EVENTTARGET</snippet></ROW><ROW><id>13578355</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; br = mechanize.Browser()
&gt;&gt;&gt; br.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 5.2; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11')]
&gt;&gt;&gt; br.open("login.aspx")
&lt;response_seek_wrapper at 0x201c290 whose wrapped object = &lt;closeable_response at 0x2017758 whose fp = &lt;socket._fileobject object at 0x1fb4ad0&gt;&gt;&gt;
&gt;&gt;&gt; br.select_form(nr=0)
&gt;&gt;&gt; br.form.set_all_readonly(False) # allow us to modify hidden form elements
&gt;&gt;&gt; br["__EVENTTARGET"] = "TransactBtn"
&gt;&gt;&gt; br["AccountID"] = "id"
&gt;&gt;&gt; br["UserName"] = "user"
&gt;&gt;&gt; br["Password"] = "pass"
&gt;&gt;&gt; response = br.submit()
&gt;&gt;&gt; [line for line in response.readlines() if 'ErrorMsg' in line]
['                &lt;span id="ErrorMsg"&gt;Account ID is numeric.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;\r\n']
</snippet></ROW><ROW><id>13578777</id><snippet>auth_fail_action: unauthorized</snippet></ROW><ROW><id>13578777</id><snippet>unauthorized</snippet></ROW><ROW><id>13578777</id><snippet>redirect</snippet></ROW><ROW><id>13578777</id><snippet>Users</snippet></ROW><ROW><id>13578777</id><snippet>/</snippet></ROW><ROW><id>13578777</id><snippet>from google.appengine.api import users
import webapp2

class MyHandler(webapp2.RequestHandler):
    def get(self):
        user = users.get_current_user()
        if user:
            # Do stuff here for logged-in users
        else:
            # Redirect if user is None, which is the case for non-logged-in users
            self.redirect('/')
</snippet></ROW><ROW><id>13578780</id><snippet>QGridLayout</snippet></ROW><ROW><id>13578780</id><snippet>class WindowSapper(QtGui.QMainWindow):

    def __init__(self, parent=None):
        QtGui.QMainWindow.__init__(self,parent)
        self.resize(450,350)
        self.centralwidget = QtGui.QWidget()
        self.setCentralWidget(self.centralwidget)

        self.vLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.hLayout = QtGui.QHBoxLayout()

        self.gridLayout = QtGui.QGridLayout()
        self.gridLayout.setSpacing(0)

        # center the grid with stretch on both sides
        self.hLayout.addStretch(1)
        self.hLayout.addLayout(self.gridLayout)
        self.hLayout.addStretch(1)

        self.vLayout.addLayout(self.hLayout)
        # push grid to the top of the window
        self.vLayout.addStretch(1)

        self.buttons = []
        for i in xrange(10):
            l=[]
            for j in xrange(10):
                b=QtGui.QPushButton()
                b.setFixedSize(40,30)
                l.append(b)
                self.gridLayout.addWidget(b, i, j)
                self.gridLayout.setColumnMinimumWidth(j, 40)
            self.buttons.append(l)
            self.gridLayout.setRowMinimumHeight(i, 26)
</snippet></ROW><ROW><id>13578838</id><snippet>In [49]: re.sub(r'href="([^"]*?)([.]php)?"', r'href="\1.php"', 'href="url.php"')
Out[49]: 'href="url.php"'

In [50]: re.sub(r'href="([^"]*?)([.]php)?"', r'href="\1.php"', 'href="url"')
Out[50]: 'href="url.php"'
</snippet></ROW><ROW><id>13578838</id><snippet>(.+?)(?!php)</snippet></ROW><ROW><id>13578838</id><snippet>url.php</snippet></ROW><ROW><id>13578838</id><snippet>(.+?)</snippet></ROW><ROW><id>13578838</id><snippet>url.php</snippet></ROW><ROW><id>13578838</id><snippet>.+?</snippet></ROW><ROW><id>13578943</id><snippet>In [33]: bool(re.match('he', 'Hello', re.I))
Out[33]: True

In [34]: bool(re.match('el', 'Hello', re.I))
Out[34]: False
</snippet></ROW><ROW><id>13578943</id><snippet>tolower()</snippet></ROW><ROW><id>13578943</id><snippet>In [38]: s = 'A' * 2000

In [39]: %timeit s.lower().startswith('he')
10000 loops, best of 3: 41.3 us per loop

In [40]: %timeit bool(re.match('el', s, re.I))
100000 loops, best of 3: 2.06 us per loop
</snippet></ROW><ROW><id>13578943</id><snippet>In [41]: p = re.compile('he', re.I)

In [42]: %timeit p.match(s)
1000000 loops, best of 3: 351 ns per loop
</snippet></ROW><ROW><id>13578943</id><snippet>In [43]: %timeit s[:2].lower() == 'he'
1000000 loops, best of 3: 287 ns per loop
</snippet></ROW><ROW><id>13578943</id><snippet>In [44]: %timeit (s[0] == 'h' or s[0] == 'H') and (s[1] == 'e' or s[1] == 'E')
1000000 loops, best of 3: 189 ns per loop
</snippet></ROW><ROW><id>13579091</id><snippet>\n</snippet></ROW><ROW><id>13579091</id><snippet>\n</snippet></ROW><ROW><id>13579091</id><snippet>gp(r'set title "My plot title is very long, \n so it needs two lines"')
#  ^ The leading r makes it a raw string.
</snippet></ROW><ROW><id>13579175</id><snippet>Any arguments passed to as_view() will override attributes set on the class.
</snippet></ROW><ROW><id>13579175</id><snippet>form_class = None   
http_method_names = ['get', 'post', 'put', 'delete', 'head', 'options', 'trace']
initial = {}    
model = None
</snippet></ROW><ROW><id>13579361</id><snippet>csv2rec()</snippet></ROW><ROW><id>13579361</id><snippet>csv2rec(input, names=['tag', 'count'], comments="something")      
</snippet></ROW><ROW><id>13579524</id><snippet>/welcome.*</snippet></ROW><ROW><id>13579524</id><snippet>app.yaml</snippet></ROW><ROW><id>13579524</id><snippet>signup.app</snippet></ROW><ROW><id>13579524</id><snippet>/signup</snippet></ROW><ROW><id>13579524</id><snippet>/welcome</snippet></ROW><ROW><id>13579524</id><snippet>signup.app</snippet></ROW><ROW><id>13579524</id><snippet>app = webapp2.WSGIApplication([('/signup',SignUpHandler),
                               ('/welcome',WelcomeHandler)]
                               ,debug=True)
</snippet></ROW><ROW><id>13579524</id><snippet>/signup.*</snippet></ROW><ROW><id>13579524</id><snippet>app.yaml</snippet></ROW><ROW><id>13579524</id><snippet>/signup/</snippet></ROW><ROW><id>13579524</id><snippet>app.yaml</snippet></ROW><ROW><id>13579524</id><snippet>main.app</snippet></ROW><ROW><id>13579980</id><snippet>while</snippet></ROW><ROW><id>13579980</id><snippet>target</snippet></ROW><ROW><id>13579980</id><snippet>while</snippet></ROW><ROW><id>13579980</id><snippet>score = 0
numberAsked = 0
while numberAsked &lt; target:
    qnNum = randint(0, len(Questions))
    correct = askQuestion(Questions[qnNum], Answers[qnNum])
    numberAsked = numberAsked + 1
    if correct == "quit" :
        break
    elif correct :
        score=score+1
    del Questions[qnNum]
    del Answers[qnNum]
</snippet></ROW><ROW><id>13579980</id><snippet>numberAsked</snippet></ROW><ROW><id>13579980</id><snippet>target</snippet></ROW><ROW><id>13579980</id><snippet>Questions</snippet></ROW><ROW><id>13579980</id><snippet>target</snippet></ROW><ROW><id>13580644</id><snippet>login</snippet></ROW><ROW><id>13580644</id><snippet>br._ua_handlers['_cookies'].cookiejar</snippet></ROW><ROW><id>13580644</id><snippet>class MyWorker(object):
    def __init__(self):
        self._br = mechanize.Browser()
        self._br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]

    def login(self):
        self._br.open(login_url)
        self._br.select_form(nr=0)
        self._br.form.set_all_readonly(False)
        self._br["__EVENTTARGET"] = "TransactBtn"
        self._br["AccountID"] = id
        self._br["UserName"] = username
        self._br["Password"] = password   
        self._br.submit()
</snippet></ROW><ROW><id>13580712</id><snippet>where ts_column &gt;= timestamp '2012-11-11 T00:00:00+0000'
</snippet></ROW><ROW><id>13580712</id><snippet>timestamp</snippet></ROW><ROW><id>13580712</id><snippet>to_timestamp</snippet></ROW><ROW><id>13580712</id><snippet>where ts_column &gt;= to_timestamp('2012-11-11 00:00:00', 'yyyy-mm-dd hh24:mi:ss');
</snippet></ROW><ROW><id>13581124</id><snippet>.setStyleSheet</snippet></ROW><ROW><id>13581124</id><snippet>b.setStyleSheet('background-color: blue;')
</snippet></ROW><ROW><id>13581222</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>13581222</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>13581222</id><snippet>stdin</snippet></ROW><ROW><id>13581222</id><snippet>stdout</snippet></ROW><ROW><id>13581222</id><snippet>pdftk</snippet></ROW><ROW><id>13581222</id><snippet>stdin</snippet></ROW><ROW><id>13581222</id><snippet>pdftk</snippet></ROW><ROW><id>13581222</id><snippet>import subprocess

command = ['pdftk', '-', 'dump_data_fields']
p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
output, errorout = p.communicate(input=new_doc_data)
</snippet></ROW><ROW><id>13581222</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>13581222</id><snippet>stdout</snippet></ROW><ROW><id>13581222</id><snippet>stderr</snippet></ROW><ROW><id>13581222</id><snippet>input</snippet></ROW><ROW><id>13581222</id><snippet>.communicate()</snippet></ROW><ROW><id>13581222</id><snippet>new_doc</snippet></ROW><ROW><id>13581222</id><snippet>new_doc.read()</snippet></ROW><ROW><id>13581222</id><snippet>new_doc_data</snippet></ROW><ROW><id>13581222</id><snippet>new_doc</snippet></ROW><ROW><id>13581445</id><snippet>valueChanged</snippet></ROW><ROW><id>13581445</id><snippet>sliderMoved</snippet></ROW><ROW><id>13581445</id><snippet>import sys
from PyQt4.QtCore import Qt
from PyQt4.QtGui import QApplication, QWidget, QSlider, QLabel, QVBoxLayout

class Widget(QWidget):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)

        self.v_layout = QVBoxLayout()

        self.slider = QSlider()
        self.slider.setOrientation(Qt.Horizontal)
        self.label = QLabel('Slider at position 0')

        self.v_layout.addWidget(self.label)
        self.v_layout.addWidget(self.slider)

        self.setLayout(self.v_layout)

        self.slider.valueChanged.connect(self.slider_moved)

    def keyPressEvent(self, event):
        if event.key()==Qt.Key_Right:
            self.slider.setValue(self.slider.value() + 1)
        elif event.key()==Qt.Key_Left:
            self.slider.setValue(self.slider.value() - 1)
        else:
            QWidget.keyPressEvent(self, event)

    def slider_moved(self, position):
        self.label.setText('Slider at position %d' % position)


if __name__ == '__main__':
  app = QApplication(sys.argv)

  widget = Widget()
  widget.show()

  sys.exit(app.exec_())
</snippet></ROW><ROW><id>13581445</id><snippet>keyPressEvent</snippet></ROW><ROW><id>13581445</id><snippet>valueChanged</snippet></ROW><ROW><id>13581498</id><snippet>def get_fetch_all():
    urls = ["http://www.example.com/", "http://mirror.example.com/"]
    ctx = ndb.get_context()
    futures = [ctx.urlfetch(url) for url in urls]
    results = ndb.Future.wait_all(futures)
    # do something with results here
</snippet></ROW><ROW><id>13581498</id><snippet>@ndb.tasklet
def get_data_and_store(url):
    ctx = ndb.get_context()
    # until we don't receive result here, this function is "paused", allowing other 
    # parallel tasks to work. when data will be fetched, control will be returned
    result = yield ctx.urlfetch("http://www.google.com/") 
    if result.status_code == 200:
        store = Storage(data=result.content)
        # async job to put data
        yield store.put_async()
        raise ndb.Return(True)
    else:
        raise ndb.Return(False)
</snippet></ROW><ROW><id>13581633</id><snippet>.split()</snippet></ROW><ROW><id>13581633</id><snippet>.findall()</snippet></ROW><ROW><id>13581633</id><snippet>&gt;&gt;&gt; reg.split(s)
['', ' asd 12 ', ' sfd g ', '']
</snippet></ROW><ROW><id>13581633</id><snippet>&gt;&gt;&gt; filter(None, reg.split(s))
[' asd 12 ', ' sfd g ']
</snippet></ROW><ROW><id>13581633</id><snippet>list(filter(None, reg.split(s)))</snippet></ROW><ROW><id>13581633</id><snippet>filter()</snippet></ROW><ROW><id>13581730</id><snippet>pd.DataFrame.from_dict()</snippet></ROW><ROW><id>13581730</id><snippet>In [57]: user_dict
Out[57]:
{12: {'Category 1': {'att_1': 1, 'att_2': 'whatever'},
  'Category 2': {'att_1': 23, 'att_2': 'another'}},
 15: {'Category 1': {'att_1': 10, 'att_2': 'foo'},
  'Category 2': {'att_1': 30, 'att_2': 'bar'}}}

In [58]: user_ids = []

In [59]: frames = []

In [60]: for user_id, d in user_dict.iteritems():
   ....:     user_ids.append(user_id)
   ....:     frames.append(pd.DataFrame.from_dict(d, orient='index'))

In [61]: pd.concat(frames, keys=user_ids)
Out[61]:
               att_1     att_2
12 Category 1      1  whatever
   Category 2     23   another
15 Category 1     10       foo
   Category 2     30       bar
</snippet></ROW><ROW><id>13581902</id><snippet>randlist = [randon.random() for i in range(n)]
total = sum(randlist)
randlist = [i/total for i in randlist]
</snippet></ROW><ROW><id>13581936</id><snippet>&gt;&gt;&gt; import scipy
&gt;&gt;&gt; scipy.misc
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'misc'
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; import scipy.misc
&gt;&gt;&gt; scipy.misc.imsave
&lt;function imsave at 0x19cfa28&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13581936</id><snippet>scipy</snippet></ROW><ROW><id>13581979</id><snippet>\</snippet></ROW><ROW><id>13581979</id><snippet>db.trngl_advertiser_agegroup .insert({'id': row[0],'userid':row[1], 'ageid':row[2], 'age_value':row[3], 'created':row[4],  'modified':row[5]})
</snippet></ROW><ROW><id>13581979</id><snippet>db.trngl_advertiser_agegroup .insert({
    'id': row[0],
    'userid':row[1], 
    'ageid':row[2], 
    'age_value':row[3],
    'created':row[4],
    'modified':row[5]
})
</snippet></ROW><ROW><id>13582115</id><snippet>a = [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 34, 40, 45, 46, 50, 55]
# zip() creates tuples of two consecutive values 
# (it zips lists of different length by truncating longer list(s))
# then tuples with first value and difference are placed in 'diff' list
diff = [(x, y-x) for x, y in zip(a, a[1:])]
# now pick only elements with changed difference 
result = []
for pair in diff:
    if not len(result) or result[-1][1]!=pair[1]: # -1 to take last element
        result.append(pair)
</snippet></ROW><ROW><id>13582143</id><snippet>cmd1 | cmd2
</snippet></ROW><ROW><id>13582143</id><snippet>named pipe</snippet></ROW><ROW><id>13582143</id><snippet>tail</snippet></ROW><ROW><id>13582143</id><snippet>tail --follow=textfile.txt --retry | mycmd 
# wait for data to be appended to the file and output new data to mycmd

cmd1 &gt;&gt; textfile.txt # append output to file
</snippet></ROW><ROW><id>13582143</id><snippet>tail</snippet></ROW><ROW><id>13582143</id><snippet>tail</snippet></ROW><ROW><id>13582143</id><snippet>tail</snippet></ROW><ROW><id>13582143</id><snippet>tail</snippet></ROW><ROW><id>13582143</id><snippet>tail</snippet></ROW><ROW><id>13582201</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>13582201</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("45.5")
45.5
&gt;&gt;&gt; ast.literal_eval("3")
3
&gt;&gt;&gt; ast.literal_eval("John")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/ast.py", line 68, in literal_eval
    return _convert(node_or_string)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/ast.py", line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
</snippet></ROW><ROW><id>13582431</id><snippet>import sys, os
import matplotlib.pyplot as plt

path = sys.path[0]
sizes = [(12,3,), (4,3,)]
x =  range(20)


for i, size in enumerate(sizes):
    fig = plt.figure(figsize = size, dpi = 80, facecolor='white', edgecolor=None,linewidth=0.0, frameon=True, subplotpars=None)
    ax = fig.add_subplot(111)
    ax.plot(x)
    plt.ylabel ('Some label')

    plt.tight_layout()

    fig.savefig(os.path.join(path, 'size_'+str(i)+'.png'), dpi=80,facecolor=fig.get_facecolor(), edgecolor=None, papertype=None, format='png',transparent=False)
</snippet></ROW><ROW><id>13582431</id><snippet>fig.subplots_adjust(right=0.9, left=0.1, top=0.9, bottom=0.1, wspace=0.2)
</snippet></ROW><ROW><id>13583024</id><snippet>kl.aggregate(np.sum)</snippet></ROW><ROW><id>13583024</id><snippet>&gt;&gt;&gt; df = DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
&gt;&gt;&gt;                         'foo', 'bar', 'foo', 'foo'],
...                  'B' : ['one', 'one', 'two', 'three',
...                         'two', 'two', 'one', 'three'],
...                  'C' : randn(8), 'D' : randn(8)})
&gt;&gt;&gt; grouped = df.groupby('A')
&gt;&gt;&gt; grouped
&lt;pandas.core.groupby.DataFrameGroupBy object at 0x04E2F630&gt;
&gt;&gt;&gt; test = grouped.aggregate(np.sum)
&gt;&gt;&gt; test
            C         D
A                      
bar -1.852376  2.204224
foo -3.398196 -0.045082
</snippet></ROW><ROW><id>13583111</id><snippet>sum</snippet></ROW><ROW><id>13583111</id><snippet>sumA1 = data[:,2].sum
</snippet></ROW><ROW><id>13583111</id><snippet>sumA1 = data[:,2].sum()
</snippet></ROW><ROW><id>13583251</id><snippet>import sys, os
import matplotlib.pyplot as plt

path = sys.path[0]
sizes = [(12,3,), (4,3,)]
x =  range(20)


for i, size in enumerate(sizes):
    fig = plt.figure(figsize = size, dpi = 80, facecolor='white',edgecolor=None,linewidth=0.0, frameon=True, subplotpars=None)
    ax = fig.add_subplot(111)
    ax.plot(x)
    plt.ylabel ('Some label')
    plt.tight_layout()

    make_invisible = True
    if (make_invisible):
        xticks = ax.xaxis.get_major_ticks()
        xticks[0].label1.set_visible(False)
        xticks[-1].label1.set_visible(False)

plt.show()
</snippet></ROW><ROW><id>13583436</id><snippet>import</snippet></ROW><ROW><id>13583436</id><snippet>sys.modules</snippet></ROW><ROW><id>13583436</id><snippet>import</snippet></ROW><ROW><id>13583436</id><snippet>sys.modules</snippet></ROW><ROW><id>13583436</id><snippet>reload</snippet></ROW><ROW><id>13583436</id><snippet>sys.modules</snippet></ROW><ROW><id>13583436</id><snippet>foo.bar.baz</snippet></ROW><ROW><id>13583436</id><snippet>sys.modules</snippet></ROW><ROW><id>13583436</id><snippet>foo</snippet></ROW><ROW><id>13583436</id><snippet>foo.bar</snippet></ROW><ROW><id>13583436</id><snippet>foo.bar.baz</snippet></ROW><ROW><id>13583436</id><snippet>time</snippet></ROW><ROW><id>13584151</id><snippet>import os
os.system('C:\bin\Tcl\bin\tclsh.exe')
</snippet></ROW><ROW><id>13584151</id><snippet>import os
os.system(r'C:\bin\Tcl\bin\tclsh.exe')
</snippet></ROW><ROW><id>13584151</id><snippet>import os
os.system('C:\\bin\\Tcl\\bin\\tclsh.exe')
</snippet></ROW><ROW><id>13585328</id><snippet>PressLogReader</snippet></ROW><ROW><id>13585328</id><snippet>APPDATA</snippet></ROW><ROW><id>13585328</id><snippet>APP_DIRNAME = 'PressLogReader'

if not os.path.exists(os.path.join(os.environ['APPDATA'],APP_DIRNAME)):
    os.mkdir(os.path.join(os.environ['APPDATA'],APP_DIRNAME))
</snippet></ROW><ROW><id>13585328</id><snippet>os.path.exists(file_path)</snippet></ROW><ROW><id>13585328</id><snippet>os.path.exists(os.path.join(os.environ['APPDATA'], APP_DIRNAME))</snippet></ROW><ROW><id>13585328</id><snippet>os.path.exists(os.path.join(os.environ['APPDATA'], APP_DIRNAME, 'PressLogReader.conf'))</snippet></ROW><ROW><id>13585419</id><snippet>.findall()</snippet></ROW><ROW><id>13585419</id><snippet>.finditer()</snippet></ROW><ROW><id>13585419</id><snippet>print [m.groupdict() for m in re.finditer('toto=(?P&lt;toto&gt;\d+)\,\sbip=(?P&lt;bip&gt;\w+)', my_str)]
</snippet></ROW><ROW><id>13585419</id><snippet>[{'toto': '1', 'bip': 'xyz'}, {'toto': '15', 'bip': 'abu'}]
</snippet></ROW><ROW><id>13585419</id><snippet>.finditer()</snippet></ROW><ROW><id>13585419</id><snippet>.groupdict()</snippet></ROW><ROW><id>13585552</id><snippet>subprocess</snippet></ROW><ROW><id>13585691</id><snippet>enumerate</snippet></ROW><ROW><id>13585691</id><snippet>for i, candidate in enumerate(chain, 1):
    if i % 100 == 0:
        print("%d'th candidate: %s" % (i, candidate))
    # perform actual work
</snippet></ROW><ROW><id>13585696</id><snippet>counts = {}
for f in filenames:
    for val in [s.strip() for s in open(f).readlines()]:
        counts[val] = counts.get(val, 0) + 1
</snippet></ROW><ROW><id>13585785</id><snippet>/var/www/cgi-bin/cgi101.py</snippet></ROW><ROW><id>13585785</id><snippet>ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    &lt;Directory "/usr/lib/cgi-bin"&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;
</snippet></ROW><ROW><id>13585785</id><snippet>AddHandler</snippet></ROW><ROW><id>13585785</id><snippet>ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    &lt;Directory "/usr/lib/cgi-bin"&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Order allow,deny
        Allow from all
        AddHandler cgi-script .cgi .py
    &lt;/Directory&gt;
</snippet></ROW><ROW><id>13585785</id><snippet>/var/www</snippet></ROW><ROW><id>13585785</id><snippet>/usr/lib/cgi-bin/cgi101.py</snippet></ROW><ROW><id>13586069</id><snippet>a = axes([.65, .6, .2, .2], axisbg='y')
n, bins, patches = hist(s, 400, normed=1)
title('Probability')
setp(a, xticks=[], yticks=[])
</snippet></ROW><ROW><id>13586069</id><snippet>test.py</snippet></ROW><ROW><id>13586069</id><snippet>.65</snippet></ROW><ROW><id>13586069</id><snippet>.3</snippet></ROW><ROW><id>13586069</id><snippet>a = axes([.35, .6, .2, .2], axisbg='y')
</snippet></ROW><ROW><id>13586069</id><snippet>python test.py
</snippet></ROW><ROW><id>13586069</id><snippet>axes</snippet></ROW><ROW><id>13586069</id><snippet>n, bins, patches = hist(s, 400, normed=1)
</snippet></ROW><ROW><id>13586069</id><snippet>semilogx(data[3:8,1],data[3:8,2])</snippet></ROW><ROW><id>13586069</id><snippet>title('Probability')</snippet></ROW><ROW><id>13586069</id><snippet>setp(a, xticks=[], yticks=[])</snippet></ROW><ROW><id>13586069</id><snippet>#</snippet></ROW><ROW><id>13586069</id><snippet># setp(a, xticks=[], yticks=[])
</snippet></ROW><ROW><id>13586069</id><snippet>setp(a, xticks=[], yticks=[])</snippet></ROW><ROW><id>13586069</id><snippet>a</snippet></ROW><ROW><id>13586069</id><snippet>from pylab import *</snippet></ROW><ROW><id>13586069</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>13586069</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>13586069</id><snippet>from pylab import *</snippet></ROW><ROW><id>13586069</id><snippet>import numpy as np</snippet></ROW><ROW><id>13586069</id><snippet>from numpy import *</snippet></ROW><ROW><id>13586069</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>13586069</id><snippet>plt.</snippet></ROW><ROW><id>13586069</id><snippet>axes</snippet></ROW><ROW><id>13586069</id><snippet>setp</snippet></ROW><ROW><id>13586069</id><snippet>plt</snippet></ROW><ROW><id>13586069</id><snippet>ax2 = plt.axes([.65, .6, .2, .2], axisbg='y')
ax2.semilogx(t[3:8],s[3:8])
plt.setp(ax2, xticks=[], yticks=[])
</snippet></ROW><ROW><id>13586069</id><snippet>from numpy import *
import os
import matplotlib.pyplot as plt
data = loadtxt(os.getcwd()+txtfl[0], skiprows=1)
fig1 = plt.figure()
ax1 = fig1.add_subplot(111)
ax1.semilogx(data[:,1],data[:,2])

ax2 = plt.axes([.65, .6, .2, .2], axisbg='y')
ax2.semilogx(data[3:8,1],data[3:8,2])
plt.setp(ax2, xticks=[], yticks=[])

plt.show()
</snippet></ROW><ROW><id>13586625</id><snippet>OrderedDict</snippet></ROW><ROW><id>13586931</id><snippet>print u.read()
print user_stream['error']
</snippet></ROW><ROW><id>13586931</id><snippet>{
  "error": {
    "message": "Malformed access token AAACEdEose0cBAM0CipLFjIDZCysqmGyZCRJ6x4JsdSVkb177lM0UNMWqSYZA9BmBY0h3PbUiIJppQCbDZD",
    "type": "OAuthException",
    "code": 190
  }
</snippet></ROW><ROW><id>13587165</id><snippet>tkinter</snippet></ROW><ROW><id>13587165</id><snippet>affinity</snippet></ROW><ROW><id>13587165</id><snippet>threadbox</snippet></ROW><ROW><id>13587165</id><snippet>safetkinter</snippet></ROW><ROW><id>13587193</id><snippet>escapeshellarg</snippet></ROW><ROW><id>13587193</id><snippet>//usage python my.py var1 var2
$libre = 'python ../../../../root/py/my.py '.escapeshellarg($var1).' '.escapeshellarg($var2).'';
echo exec($libre );
</snippet></ROW><ROW><id>13587198</id><snippet>class tweet(object):
    def __init__(self, text):
        self.text = text
        self.retweets = 0
    def retweet(self):
        self.retweets += 1
    def __repr__(self):
        return "(%i)" % (self.retweets)
    def __hash__(self):
        return hash(self.text)

class person(object):
    def __init__(self, name):
        self.name = name
        self.tweets = dict()

    def __repr__(self):
        return "%s : %s" % (self.name, self.tweets)

    def new_tweet(self, text):
        self.tweets[text] = tweet(text)

    def retweet(self, text):
        self.tweets[text].retweet()

M = person("mac389")
M.new_tweet('foo')
M.new_tweet('bar')
M.retweet('foo')
M.retweet('foo')

print M
</snippet></ROW><ROW><id>13587198</id><snippet>mac389 : {'foo': (2), 'bar': (0)}
</snippet></ROW><ROW><id>13587250</id><snippet>
DataFrame(df1.values + df2.values, df1.index, df1.columns)
</snippet></ROW><ROW><id>13587290</id><snippet>input()</snippet></ROW><ROW><id>13587290</id><snippet>eval(raw_input(prompt))</snippet></ROW><ROW><id>13587290</id><snippet>eval()</snippet></ROW><ROW><id>13587290</id><snippet>&gt;&gt;&gt; a=1 
&gt;&gt;&gt; input('--:)')
--:) a+1
2
</snippet></ROW><ROW><id>13587290</id><snippet>a=2</snippet></ROW><ROW><id>13587290</id><snippet>exec()</snippet></ROW><ROW><id>13587290</id><snippet>&gt;&gt;&gt; exec(raw_input())
a=2
&gt;&gt;&gt; a
2
</snippet></ROW><ROW><id>13587302</id><snippet>session</snippet></ROW><ROW><id>13587302</id><snippet>Query</snippet></ROW><ROW><id>13587302</id><snippet>relationship</snippet></ROW><ROW><id>13587302</id><snippet>class MessageModel(Base):
    __tablename__ = 'messages'
    player_id = Column(Integer,ForeignKey('chats.id'), nullable=False)
    message = Column(String(2000), nullable=False)
    time = Column(TIMESTAMP, server_default=func.now())
    player = relationship(PlayerModel, backref="messages")
</snippet></ROW><ROW><id>13587302</id><snippet>results = (session.query(PlayerModel)
                  .join(PlayerModel.messages)
                  .values(PlayerModel.username,
                          MessageModel.message,
                          MessageModel.time))
# results will be a generator object

# This seems a bit convoluted, but here you go.
resultlist = []
for username, message, time in results:
    resultlist.append({'message': message,
                       'username': username,
                       'time': time})
</snippet></ROW><ROW><id>13587339</id><snippet>@app.route("/contact/", methods=("GET", "POST"))
def contact():
    """Contact view"""
    form = ContactForm()
    if form.validate_on_submit():
        sender = "%s &lt;%s&gt;" % (form.name.data, form.email.data)
        subject = "Message from %s" % form.name.data
        message = form.message.data
        body = render_template('emails/contact.html', sender=sender,
                               message=message)
        email_admin(subject, body)
        flash("Your message has been sent. Thank you!", "success")
    else:
        flash_errors(form)

    return render_template("contact.html",
                       form=form)
</snippet></ROW><ROW><id>13587463</id><snippet>f = urllib.urlopen("http://www.canyouseeme.org/")
html_doc = f.read()
f.close()
m = re.search('(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)',html_doc)
ip = m.group(0)
</snippet></ROW><ROW><id>13587463</id><snippet>geoip = pygeoip.GeoIP("GeoIPCountry.dat", pygeoip.STANDARD)
result = geoip.record_by_addr(ip)
</snippet></ROW><ROW><id>13587497</id><snippet>contour(im, levels=[245], colors='black', origin='image')
</snippet></ROW><ROW><id>13587880</id><snippet>import numpy as np
X = np.arange(200) - 100.  
Y = (np.exp(-(X/10)**2) + np.exp(-((np.abs(X)-50.)/2)**2)/3.) * np.cos(X * 10.)
</snippet></ROW><ROW><id>13587880</id><snippet>window_length = 30 # number of point for the window
variance = np.array([np.var(Y[i-window_length / 2.: i+window_length/2.]) for i in range(200)])
</snippet></ROW><ROW><id>13587880</id><snippet>idx = np.where(variance &gt; 0.5 * np.max(variance))

X_min = np.min(X[idx])
# -14.0
X_max = np.max(X[idx])
# 15.0
</snippet></ROW><ROW><id>13587880</id><snippet>Y_modified = np.where(variance &gt; 0.5 * np.max(variance), Y, 0)
</snippet></ROW><ROW><id>13588172</id><snippet>a = 'birthday'
[a[:i] for i in range(2,len(a)+1)]
</snippet></ROW><ROW><id>13588172</id><snippet>['bi', 'bir', 'birt', 'birth', 'birthd', 'birthda', 'birthday']
</snippet></ROW><ROW><id>13588172</id><snippet>prefix_dict[word] = [word[:i] for i in range(2,len(word)+1)]
</snippet></ROW><ROW><id>13588244</id><snippet>import socket
def createConnetion(host, port):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((host, port))
  return sock
</snippet></ROW><ROW><id>13588353</id><snippet>class MyModel(object) : pass
modelClass = MyModel()

class ModelResource(object):
    def mymethod(self):
        print('got here')

Meta = type('Meta', (object, ), {'allowed_methods': ['get']})

def add_mymethod(cls):
    def mymethod(self):
        super(cls, self).mymethod()
    cls.mymethod = mymethod
    return cls

name = modelClass.__class__.__name__ + "Resource"
MyModelResource = add_mymethod(type(name, (ModelResource, ),
                                    {'Meta':Meta, }))

print(MyModelResource.Meta)
# &lt;class '__main__.Meta'&gt;

m = MyModelResource()
m.mymethod()
# got here
</snippet></ROW><ROW><id>13588353</id><snippet>Meta</snippet></ROW><ROW><id>13588353</id><snippet>MyModelResource</snippet></ROW><ROW><id>13588353</id><snippet>MyModelResource</snippet></ROW><ROW><id>13588353</id><snippet>MyModelResource.__dict__</snippet></ROW><ROW><id>13588353</id><snippet>inst.mymethod</snippet></ROW><ROW><id>13588353</id><snippet>MyModelResource</snippet></ROW><ROW><id>13588353</id><snippet>super</snippet></ROW><ROW><id>13588353</id><snippet>super(MyModelResource, self).mymethod()
</snippet></ROW><ROW><id>13588353</id><snippet>MyModelResource</snippet></ROW><ROW><id>13588353</id><snippet>mymethod</snippet></ROW><ROW><id>13588353</id><snippet>super(self.__class_, self).mymethod()
</snippet></ROW><ROW><id>13588353</id><snippet>super</snippet></ROW><ROW><id>13588353</id><snippet>MyModelResource</snippet></ROW><ROW><id>13588353</id><snippet>mymethod</snippet></ROW><ROW><id>13588548</id><snippet>def searchWord(letters, word):
    count = 0
    for l in letters:
        count += word.count(l)

    return count

words = ['hello', 'world'];
letters = ['l', 'o']

currentWord  = None
currentCount = 0

for w in words:
    n = searchWord(letters, w)

    print "word:\t", w, " count:\t", n

    if n &gt; currentCount:
        currentWord = w
        currentCount = n

print "highest word count:", currentWord
</snippet></ROW><ROW><id>13588593</id><snippet>from PIL import Image, ImageDraw
from math import pi

RED, GREEN, YELLOW = (255, 0, 0), (0, 255, 0), (127, 127, 0)
SIZE = (500, 500)

def overlap(ellipse1, ellipse2):
    im1 = Image.new("RGB", SIZE)
    ImageDraw.Draw(im1).ellipse(ellipse1, fill=RED)
    im2 = Image.new("RGB", SIZE)
    ImageDraw.Draw(im2).ellipse(ellipse2, fill=GREEN)
    im3 = Image.blend(im1, im2, 0.5)
    im3.show()
    im3.save('test.png', "png")
    return [count for count, color in im3.getcolors() if color == YELLOW][0]

area1 = overlap((0, 50, 500, 450), (50, 50, 450, 450))
area2 = pi * (200**2)
print "overlap calc:" , area1
print "exact area:  " , area2
print "percent diff:" , ((area1 - area2)/area2)*100
</snippet></ROW><ROW><id>13588593</id><snippet>overlap calc: 126196
exact area:   125663.706144
percent diff: 0.423585992124
</snippet></ROW><ROW><id>13588657</id><snippet>numpy</snippet></ROW><ROW><id>13588657</id><snippet>/usr/local/lib/</snippet></ROW><ROW><id>13588657</id><snippet>/usr/lib/pythonX.Y</snippet></ROW><ROW><id>13588657</id><snippet>pip</snippet></ROW><ROW><id>13588657</id><snippet>easy_install</snippet></ROW><ROW><id>13588657</id><snippet>/usr/local/lib/pythonX.Y</snippet></ROW><ROW><id>13588657</id><snippet>/usr/local/lib/python2.7/dist-packages</snippet></ROW><ROW><id>13588657</id><snippet>usercustomize.py</snippet></ROW><ROW><id>13588769</id><snippet>data = json.loads(getWeatherCondition("London"))
</snippet></ROW><ROW><id>13588861</id><snippet>copy</snippet></ROW><ROW><id>13588861</id><snippet>b = A[3,:].copy()
</snippet></ROW><ROW><id>13588902</id><snippet>x = '123 Main St'
y = '123 MAIN ST'

new_x = x.lower()
new_y = y.lower()



if new_x == new_y :
   print "correct"
else:
   print "incorrect"
</snippet></ROW><ROW><id>13588963</id><snippet>Cmd.exe</snippet></ROW><ROW><id>13588963</id><snippet>setup.exe</snippet></ROW><ROW><id>13588963</id><snippet>./configure &amp;&amp; make &amp;&amp; make install</snippet></ROW><ROW><id>13589276</id><snippet>from Tkinter import *

root = Tk()
global colour
global colourselection 
global count 
colour = ""
colourselection= ['red', 'blue']
count = 1

def start(parent):
    Tk.after(parent, 1000, change)

def change():
    global colour 
    global colourselection
    global count 
    if (count &lt; 2 ):
        colour = colourselection[count]
        button.configure(bg = colour)
        count + 1
    else:
        colour = colourselection[count]
        button.configure(bg = colour)
        count = 1 
    start(root)



button = Button(text = 'start', command = lambda: start(root))
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>13589283</id><snippet>Deferred.chainDeferred</snippet></ROW><ROW><id>13589283</id><snippet>When you chain a deferred d2 to another deferred d1 with d1.chainDeferred(d2),
you are making d2 participate in the callback chain of d1. Thus any event that
fires d1 will also fire d2.
</snippet></ROW><ROW><id>13589283</id><snippet>d1</snippet></ROW><ROW><id>13589283</id><snippet>d</snippet></ROW><ROW><id>13589283</id><snippet>d2</snippet></ROW><ROW><id>13589283</id><snippet>l</snippet></ROW><ROW><id>13589283</id><snippet>d2</snippet></ROW><ROW><id>13589283</id><snippet>l</snippet></ROW><ROW><id>13589283</id><snippet>new_f</snippet></ROW><ROW><id>13589283</id><snippet>new_f</snippet></ROW><ROW><id>13589283</id><snippet>d2</snippet></ROW><ROW><id>13589283</id><snippet>l</snippet></ROW><ROW><id>13589283</id><snippet>new_f</snippet></ROW><ROW><id>13589283</id><snippet>Deferred</snippet></ROW><ROW><id>13589283</id><snippet>If the errback does returns a Failure or raise an exception, then that is passed
to the next errback, and so on.
</snippet></ROW><ROW><id>13589551</id><snippet>In [1]: my_array = arange(10)

In [2]: where((my_array &gt; 3) &amp; (my_array &lt; 7))
Out[2]: (array([4, 5, 6]),)

In [3]: where(logical_and(my_array &gt; 3, my_array &lt; 7))
Out[3]: (array([4, 5, 6]),)
</snippet></ROW><ROW><id>13589551</id><snippet>and</snippet></ROW><ROW><id>13589551</id><snippet>&amp;</snippet></ROW><ROW><id>13589551</id><snippet>&amp;</snippet></ROW><ROW><id>13589551</id><snippet>*</snippet></ROW><ROW><id>13589551</id><snippet>In [4]: where((my_array &gt; 3) * (my_array &lt; 7))
Out[4]: (array([4, 5, 6]),)
</snippet></ROW><ROW><id>13589643</id><snippet>scris</snippet></ROW><ROW><id>13589643</id><snippet>row_test.append(scris[0:7])
</snippet></ROW><ROW><id>13589643</id><snippet>row_test += scris[0:7]
</snippet></ROW><ROW><id>13589643</id><snippet>row_test.extend(scris[0:7])
</snippet></ROW><ROW><id>13589643</id><snippet>l</snippet></ROW><ROW><id>13589643</id><snippet>l = [1,2,3]          #    l = [1,2,3]
l.extend([4,5])      #now l = [1,2,3,4,5]
l.append([6,7])      #now l = [1,2,3,4,5,[6,7]]
l.extend('hi there') #raises an exception
</snippet></ROW><ROW><id>13589643</id><snippet>some_list.append(some_item)</snippet></ROW><ROW><id>13589643</id><snippet>some_item</snippet></ROW><ROW><id>13589643</id><snippet>some_list</snippet></ROW><ROW><id>13589643</id><snippet>some_item</snippet></ROW><ROW><id>13589643</id><snippet>some_list.extend(some_item)</snippet></ROW><ROW><id>13589643</id><snippet>some_item</snippet></ROW><ROW><id>13589643</id><snippet>some_list</snippet></ROW><ROW><id>13589643</id><snippet>some_item</snippet></ROW><ROW><id>13589643</id><snippet>[['1','2','3'],['4','5','6'],['7','8','9']]</snippet></ROW><ROW><id>13589643</id><snippet>123,456,789</snippet></ROW><ROW><id>13589643</id><snippet>fisier_text_knife.writerow(row_test)
</snippet></ROW><ROW><id>13589643</id><snippet>csv_friendly = [''.join(l) for l in row_test]
fisier_text_knife.writerow(csv_friendly)
</snippet></ROW><ROW><id>13589723</id><snippet>sorted(list1, key=lambda x: re.sub('[^A-Za-z]+', '', x).lower())
</snippet></ROW><ROW><id>13589745</id><snippet>id       type_name
1        cat
2        dog
3        monkey
</snippet></ROW><ROW><id>13589745</id><snippet>id       name          type
1        kitty         1
2        fido          2
3        rover         2
4        mr banannas   3
</snippet></ROW><ROW><id>13589745</id><snippet>class YourModel(models.Model):
    first_property = models.FileField()
    second_property = models.ImageField()

    def clean(self)
        from django.core.exceptions import ValidationError
        if self.first_property.name not in ['', None] and \
           self.second_property.name not in ['', None]:
            raise ValidationError('Cannot have a first_property and a second_property!.')  
</snippet></ROW><ROW><id>13589849</id><snippet>if tx_avt &gt;= 100: tx = 1 
elif tx_avt &gt;= 50: tx = 2 
elif tx_avt &gt;= 25: tx = 3
elif tx_avt &gt;= 12.5: tx = 4 
else: tx = 5
</snippet></ROW><ROW><id>13589849</id><snippet>if tx_avt &gt;= 100</snippet></ROW><ROW><id>13589849</id><snippet>tx_avt &lt; 100</snippet></ROW><ROW><id>13589849</id><snippet>tx_avt &lt; 100</snippet></ROW><ROW><id>13589849</id><snippet>elif tx_avt &lt; 100 and tx_avt &gt;= 50:</snippet></ROW><ROW><id>13589849</id><snippet>elif</snippet></ROW><ROW><id>13590066</id><snippet>&gt;&gt;&gt; 'fef2.'[2:4]
'f2'
</snippet></ROW><ROW><id>13590066</id><snippet>&gt;&gt;&gt; word
'HelpA'
&gt;&gt;&gt; word[4]
'A'
&gt;&gt;&gt; word[0:2]
'He'
&gt;&gt;&gt; word[2:4]
'lp'
</snippet></ROW><ROW><id>13590066</id><snippet>&gt;&gt;&gt; word[:2]    # The first two characters
'He'
&gt;&gt;&gt; word[2:]    # Everything except the first two characters
'lpA'
</snippet></ROW><ROW><id>13590280</id><snippet>#!/usr/bin/env python

reservations = [
    # [DHCP SERVER, IP ADDRESS, MAC ADDRESS, HOSTNAME, DESCRIPTION]
    ['server1','172.16.0.120','31872fcefa33','wks120.domain.net','Description of client'],
    ['server1','172.16.0.125','4791ca3d7279','wks125.domain.net','Description of client'],
    ['server1','172.16.0.132','6035a71c930c','wks132.domain.net','Description of client'],
]

def reservationlist(reservations, serverpattern, addresspattern, hostpattern,
        start, end):
    result = []
    for i in range(start, end + 1):
        result.append([
            serverpattern % i,
            addresspattern % i,
            '[no mac]',
            hostpattern % i,
            'Unregistered'])

    for reservation in reservations:
        index = int(reservation[1].split('.')[3]) - start
        result[index] = reservation

    return result

print reservationlist(
    reservations,
    'server%d',
    '172.16.0.%d',
    'wks%d.domain.net',
    120,
    132)
</snippet></ROW><ROW><id>13590280</id><snippet>[['server1', '172.16.0.120', '31872fcefa33', 'wks120.domain.net', 'Description of client'],
['server121', '172.16.0.121', '[no mac]', 'wks121.domain.net', 'Unregistered'],
['server122', '172.16.0.122', '[no mac]', 'wks122.domain.net', 'Unregistered'],
['server123', '172.16.0.123', '[no mac]', 'wks123.domain.net', 'Unregistered'],
['server124', '172.16.0.124', '[no mac]', 'wks124.domain.net', 'Unregistered'],
['server1', '172.16.0.125', '4791ca3d7279', 'wks125.domain.net', 'Description of client'],
['server126', '172.16.0.126', '[no mac]', 'wks126.domain.net', 'Unregistered'],
['server127', '172.16.0.127', '[no mac]', 'wks127.domain.net', 'Unregistered'],
['server128', '172.16.0.128', '[no mac]', 'wks128.domain.net', 'Unregistered'],
['server129', '172.16.0.129', '[no mac]', 'wks129.domain.net', 'Unregistered'],
['server130', '172.16.0.130', '[no mac]', 'wks130.domain.net', 'Unregistered'],
['server131', '172.16.0.131', '[no mac]', 'wks131.domain.net', 'Unregistered'],
['server1', '172.16.0.132', '6035a71c930c', 'wks132.domain.net', 'Description of client']]
</snippet></ROW><ROW><id>13590280</id><snippet>#!/usr/bin/env python

reservations = [
    # [DHCP SERVER, IP ADDRESS, MAC ADDRESS, HOSTNAME, DESCRIPTION]
    ['server1','172.16.0.120','31872fcefa33','wks120.domain.net','Description of client'],
    ['server1','172.16.0.125','4791ca3d7279','wks125.domain.net','Description of client'],
    ['server1','172.16.0.132','6035a71c930c','wks132.domain.net','Description of client'],
]

def addr_to_int(address):
    """Convert an IP address to a 32-bit int"""
    a, b, c, d = map(int, address.split('.'))
    return a * 256 * 256 * 256 + b * 256 * 256 + c * 256 + d

def int_to_addr(value):
    """Convert a 32-bit int into a tuple of its IPv4 byte values"""
    return value &gt;&gt; 24, value &gt;&gt; 16 &amp; 255, value &gt;&gt; 8 &amp; 255, value &amp; 255

def reservationlist(reservations, serverpattern, addresspattern, hostpattern,
        start, end):

    reservationdict = dict((addr_to_int(item[1]), item)
            for item in reservations)
    startint = addr_to_int(start)
    endint = addr_to_int(end)
    for i in range(startint, endint + 1):
        try:
            item = reservationdict[i]
        except KeyError:
            addressbytes = int_to_addr(i)
            item = [
                serverpattern.format(*addressbytes),
                addresspattern.format(*addressbytes),
                '[no mac]',
                hostpattern.format(*addressbytes),
                'Unregistered']
        yield item

for entry in reservationlist(
    reservations,
    'server{3}',
    '172.16.{2}.{3}',
    'wks{3}.domain.net',
    '172.16.0.120',
    '172.16.1.132'):
    print entry
</snippet></ROW><ROW><id>13590280</id><snippet>yield</snippet></ROW><ROW><id>13590280</id><snippet>reservationlist()</snippet></ROW><ROW><id>13590280</id><snippet>dict</snippet></ROW><ROW><id>13590280</id><snippet>string.format</snippet></ROW><ROW><id>13590280</id><snippet>int_to_addr</snippet></ROW><ROW><id>13590280</id><snippet>AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDD
</snippet></ROW><ROW><id>13590280</id><snippet>AAAAAAAA, BBBBBBBB, CCCCCCCC, DDDDDDDD
</snippet></ROW><ROW><id>13590280</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>13590280</id><snippet>value &gt;&gt; 24</snippet></ROW><ROW><id>13590280</id><snippet>value &gt;&gt; 16</snippet></ROW><ROW><id>13590280</id><snippet>value &gt;&gt; 8</snippet></ROW><ROW><id>13590280</id><snippet>value &amp; 255</snippet></ROW><ROW><id>13590309</id><snippet>def lifecycle(population, i):
    if i == 100:
        return ...
    ...
    return lifecycle(new_population, i + 1)
</snippet></ROW><ROW><id>13590659</id><snippet>for x in range(0, 9):
    if expression(random.uniform(0.0, 1.0) &lt; 0.416667):
        print "A wins"
    else:
        print "B wins"
</snippet></ROW><ROW><id>13590768</id><snippet>itertools.count()</snippet></ROW><ROW><id>13590768</id><snippet>itertools.chain()</snippet></ROW><ROW><id>13590768</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>13590768</id><snippet>In [14]: from itertools import *

In [15]: c=count(1)

In [16]: lis=[0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1]

In [17]: list(chain(*[list(g) if k!=1 else [next(c)]*len(list(g)) for k,g in groupby(lis)]))

Out[17]: [0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 3, 0, 4, 4]
</snippet></ROW><ROW><id>13590768</id><snippet>sum(1 for _ in g)</snippet></ROW><ROW><id>13590768</id><snippet>len(list(g))</snippet></ROW><ROW><id>13590768</id><snippet>In [27]: def func(l):
    c=count(1)
    for k,g in groupby(l):
        if k==1:
            for x in [next(c)]*sum(1 for _ in g):
                yield x
        else:
            for x in g:
                yield x
   ....:                 

In [28]: list(func(lis))
Out[28]: [0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 3, 0, 4, 4]
</snippet></ROW><ROW><id>13590846</id><snippet>l = [4, 4, 4, 4]
</snippet></ROW><ROW><id>13590846</id><snippet>l = [4, 4, 4]
</snippet></ROW><ROW><id>13590846</id><snippet>def remove(l,o):  
    new_list = []  
    for i in l:        
        if i != o:
            new_list.append(i)       
    return new_list
</snippet></ROW><ROW><id>13590846</id><snippet>def remove(l,o)
    new_list = [item for item in l if item != o]
</snippet></ROW><ROW><id>13590918</id><snippet>ORACLE_HOME</snippet></ROW><ROW><id>13590918</id><snippet>cx_Oracle</snippet></ROW><ROW><id>13590918</id><snippet>$ORACLE_HOME/network/admin</snippet></ROW><ROW><id>13590918</id><snippet>%ORACLE_HOME%\network\admin</snippet></ROW><ROW><id>13590918</id><snippet>tnsnames.ora</snippet></ROW><ROW><id>13590943</id><snippet>class dia2(csv.Dialect):
    delimiter = '\t' # delimiter should be only 1-char
    quotechar = '"'
    escapechar = None
    doublequote = True
    skipinitialspace = False
    lineterminator = '\r\n'
    quoting = 1
writer = csv.writer(response, dialect=dia2)
...
</snippet></ROW><ROW><id>13590943</id><snippet>data[i] = "%10s" % data[i]
</snippet></ROW><ROW><id>13591084</id><snippet>sys.setprofile()</snippet></ROW><ROW><id>13591084</id><snippet>sys.settrace()</snippet></ROW><ROW><id>13591139</id><snippet>der</snippet></ROW><ROW><id>13591139</id><snippet>splev</snippet></ROW><ROW><id>13591139</id><snippet>ddy = splev(X, tck, der=2)
</snippet></ROW><ROW><id>13591139</id><snippet>x</snippet></ROW><ROW><id>13591139</id><snippet>X</snippet></ROW><ROW><id>13591139</id><snippet>def parabolic_interpolation(p1, p2, p3):
    x1, y1 = p1
    x2, y2 = p2
    x3, y3 = p3

    denom = (x1-x2)*(x1-x3)*(x2-x3);
    a = (x3*(y2-y1)+x2*(y1-y3)+x1*(y3-y2))/denom
    b = (x3*x3*(y1-y2)+x2*x2*(y3-y1)+x1*x1*(y2-y3))/denom
    c = (x2*x3*(x2-x3)*y1+x3*x1*(x3-x1)*y2+x1*x2*(x1-x2)*y3)/denom

    xv = -b/(2*a)
    yv = c-b**2/(4*a)

    return (xv, yv)  # coordinates of the vertex
</snippet></ROW><ROW><id>13591272</id><snippet>Database.update()</snippet></ROW><ROW><id>13591272</id><snippet>doc</snippet></ROW><ROW><id>13591272</id><snippet>doc</snippet></ROW><ROW><id>13591272</id><snippet>db.update(doc.values(), all_or_nothing=True)
</snippet></ROW><ROW><id>13591285</id><snippet>for row in listReply.get('rows', []):
</snippet></ROW><ROW><id>13591285</id><snippet>for</snippet></ROW><ROW><id>13591285</id><snippet>if 'rows' in listReply:
    for row in listReply['rows']:
        ...
</snippet></ROW><ROW><id>13591421</id><snippet>utf-8-sig</snippet></ROW><ROW><id>13591421</id><snippet>import codecs

bytes = min(32, os.path.getsize(filename))
raw = open(filename, 'rb').read(bytes)

if raw.startswith(codecs.BOM_UTF8):
    encoding = 'utf-8-sig'
else:
    result = chardet.detect(raw)
    encoding = result['encoding']

infile = open(filename, mode, encoding=encoding)
data = infile.read()
infile.close()

print(data)
</snippet></ROW><ROW><id>13591474</id><snippet>ffmpeg -f image2 -r 1/5 -i image%05d.png -vcodec mpeg4 -y movie.mp4
</snippet></ROW><ROW><id>13591474</id><snippet>-r 24</snippet></ROW><ROW><id>13591539</id><snippet>def getData(self):
    lock = Lock()
    lock.acquire()
    if self.dataStart &gt; self.dataLimit:
       return False
    lock.release()

    data = "data from A :: "+str(self.dataStart)+" Accessor thread :: "+thread.threadId
    time.sleep(0.5)
</snippet></ROW><ROW><id>13591539</id><snippet>with</snippet></ROW><ROW><id>13591539</id><snippet>with lock:
    # Do stuff
</snippet></ROW><ROW><id>13591742</id><snippet>from xml.dom.minidom import parseString

XML = """
&lt;nodeA&gt;
    &lt;nodeB&gt;Text hello&lt;/nodeB&gt;
    &lt;nodeC&gt;&lt;noText&gt;&lt;/noText&gt;&lt;/nodeC&gt;
&lt;/nodeA&gt;
"""


def replaceText(node, newText):
    if node.firstChild.nodeType != node.TEXT_NODE:
        raise Exception("node does not contain text")

    node.firstChild.replaceWholeText(newText)

def main():
    doc = parseString(XML)

    node = doc.getElementsByTagName('nodeB')[0]
    replaceText(node, "Hello World")

    print doc.toxml()

    try:
        node = doc.getElementsByTagName('nodeC')[0]
        replaceText(node, "Hello World")
    except:
        print "error"


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13591801</id><snippet>sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer
</snippet></ROW><ROW><id>13591801</id><snippet>Compiling with an SDK that doesn't seem to exist: /Developer/SDKs/MacOSX10.6.sdk
</snippet></ROW><ROW><id>13591801</id><snippet>sudo ln -s /Developer/SDKs/MacOSX10.8.sdk MacOSX10.6.sdk
</snippet></ROW><ROW><id>13591813</id><snippet>content</snippet></ROW><ROW><id>13591813</id><snippet>import lxml.etree as ET

content = '''\
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!DOCTYPE html&gt;
&lt;h:html xmlns:h="http://www.w3.org/1999/xhtml" xmlns:ml="http://foo"&gt;
  &lt;h:head&gt;
    &lt;h:title&gt;MathJax Test Page&lt;/h:title&gt;
    &lt;h:script type="text/javascript"&gt;&lt;![CDATA[
      function test() {
        alert(document.getElementsByTagName("p").length);
      };
    ]]&gt;&lt;/h:script&gt;
  &lt;/h:head&gt;
  &lt;h:body onload="test();"&gt;
    &lt;h:p&gt;test&lt;/h:p&gt;
    &lt;ml:foo&gt;&lt;/ml:foo&gt;
  &lt;/h:body&gt;
&lt;/h:html&gt;
'''
dom = ET.fromstring(content)

xslt = '''\
&lt;xsl:stylesheet version="1.0"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="xml" indent="no"/&gt;

&lt;!-- identity transform for everything else --&gt;
&lt;xsl:template match="/|comment()|processing-instruction()|*|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates /&gt;
    &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;!-- remove NS from XHTML elements --&gt;
&lt;xsl:template match="*[namespace-uri() = 'http://www.w3.org/1999/xhtml']"&gt;
    &lt;xsl:element name="{local-name()}"&gt;
      &lt;xsl:apply-templates select="@*|node()" /&gt;
    &lt;/xsl:element&gt;
&lt;/xsl:template&gt;

&lt;!-- remove NS from XHTML attributes --&gt;
&lt;xsl:template match="@*[namespace-uri() = 'http://www.w3.org/1999/xhtml']"&gt;
    &lt;xsl:attribute name="{local-name()}"&gt;
      &lt;xsl:value-of select="." /&gt;
    &lt;/xsl:attribute&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
'''

xslt_doc = ET.fromstring(xslt)
transform = ET.XSLT(xslt_doc)
dom = transform(dom)

print(ET.tostring(dom, pretty_print = True, 
                  encoding = 'utf-8'))
</snippet></ROW><ROW><id>13591813</id><snippet>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;MathJax Test Page&lt;/title&gt;
    &lt;script type="text/javascript"&gt;
      function test() {
        alert(document.getElementsByTagName("p").length);
      };
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body onload="test();"&gt;
    &lt;p&gt;test&lt;/p&gt;
    &lt;ml:foo xmlns:ml="http://foo"/&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13591950</id><snippet>&gt;m = re.search(r"Date\((\d+)\+", 'Date(1354011247940+0000)')
&gt;print(datetime.datetime.fromtimestamp(int(m.group(1))/1000.0).strftime('%Y-%m-%d %H:%M:%S'))
2012-11-27 12:14:07
</snippet></ROW><ROW><id>13592002</id><snippet>&gt;&gt;&gt; def trisum(n, csum):
...     while True:                     # change recursion to a while loop
...         if n == 0:
...             return csum
...         n, csum = n - 1, csum + n   # update parameters instead of tail recursion

&gt;&gt;&gt; trisum(1000,0)
500500
</snippet></ROW><ROW><id>13592105</id><snippet>import couchdb
from couchdb.http import urljoin
from couchdb.client import _encode_view_options
server = couchdb.Server()
db = server['blog']
res = db.view('posts/by_author', key='Mike', reduce=False, include_docs=True)
print urljoin(res.view.resource.url, **_encode_view_options(res.options))
</snippet></ROW><ROW><id>13592105</id><snippet>http://localhost:5984/blog/_design/posts/_view/by_author?key=%22Mike%22&amp;reduce=false&amp;include_docs=true</snippet></ROW><ROW><id>13592105</id><snippet>_encode_view_options</snippet></ROW><ROW><id>13592105</id><snippet>key</snippet></ROW><ROW><id>13592105</id><snippet>startkey</snippet></ROW><ROW><id>13592105</id><snippet>endkey</snippet></ROW><ROW><id>13592134</id><snippet>update(delta)</snippet></ROW><ROW><id>13592134</id><snippet>update</snippet></ROW><ROW><id>13592134</id><snippet>draw()</snippet></ROW><ROW><id>13592234</id><snippet>np.diff</snippet></ROW><ROW><id>13592234</id><snippet>d = np.diff(points, axis=0)
</snippet></ROW><ROW><id>13592234</id><snippet>np.hypot</snippet></ROW><ROW><id>13592234</id><snippet>segdists = np.hypot(d[:,0], d[:,1])
</snippet></ROW><ROW><id>13592234</id><snippet>segdists = np.sqrt((d ** 2).sum(axis=1))
</snippet></ROW><ROW><id>13592376</id><snippet>helloworld = Blueprint('helloworld', __name__, static_folder='static')
</snippet></ROW><ROW><id>13592376</id><snippet>url_for('helloworld.static', filename='module.js')
</snippet></ROW><ROW><id>13592376</id><snippet>url_for('static', filename='module.js')
</snippet></ROW><ROW><id>13592680</id><snippet>import eventlet
from eventlet.green import urllib2
from eventlet.timeout import Timeout

url5 = 'http://ipv4.download.thinkbroadband.com/5MB.zip'
url10 = 'http://ipv4.download.thinkbroadband.com/10MB.zip'

urls = [url5, url5, url10, url10, url10, url5, url5]

def fetch(url):
    response = bytearray()
    with Timeout(60, False):
        response = urllib2.urlopen(url).read()
    return url, len(response)

pool = eventlet.GreenPool()
for url, length in pool.imap(fetch, urls):
    if (not length):
        print "%s: timeout!" % (url)
    else:
        print "%s: %s" % (url, length)
</snippet></ROW><ROW><id>13592680</id><snippet>http://ipv4.download.thinkbroadband.com/5MB.zip: 5242880
http://ipv4.download.thinkbroadband.com/5MB.zip: 5242880
http://ipv4.download.thinkbroadband.com/10MB.zip: timeout!
http://ipv4.download.thinkbroadband.com/10MB.zip: timeout!
http://ipv4.download.thinkbroadband.com/10MB.zip: timeout!
http://ipv4.download.thinkbroadband.com/5MB.zip: 5242880
http://ipv4.download.thinkbroadband.com/5MB.zip: 5242880
</snippet></ROW><ROW><id>13592767</id><snippet>data = randint(10,size=2000)
</snippet></ROW><ROW><id>13592767</id><snippet>%%timeit
[ i for i in data if i&gt;7 ]
# 1.8 ms per loop
</snippet></ROW><ROW><id>13592767</id><snippet>data2 = sorted(data)
import bisect

%%timeit
data2[bisect.bisect(data2,7):]
# 13.6 us per loop
</snippet></ROW><ROW><id>13592767</id><snippet>import numpy as np
adata = np.array(data)

%%timeit
adata[adata&gt;7]
# 28.5 us per loop
</snippet></ROW><ROW><id>13592767</id><snippet>adata.sort()

%%timeit
adata[adata.searchsorted(7):]
# 2.1 us per loop
</snippet></ROW><ROW><id>13592817</id><snippet>file_list[index_of_your_element].split('.')[0]</snippet></ROW><ROW><id>13592817</id><snippet>file_list = ['bar.py',  'foo.py', 'foo.pyc', 'fooBar', 'fooBar.py', 'tar.py', 'tar.pyc']
print l[5].split('.')[0] == 'tar'
</snippet></ROW><ROW><id>13592817</id><snippet>true</snippet></ROW><ROW><id>13592993</id><snippet>data = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet']
first = data[0]
while data:
    a, b = data[0], data[-1]
    data = data[1:-1]
    print '{} -&gt; {}'.format(a, b)
    print '{} -&gt; {}'.format(b, data[0] if data else first)
</snippet></ROW><ROW><id>13592993</id><snippet>data</snippet></ROW><ROW><id>13592993</id><snippet>data = [line.strip() for line in open(filename)]
</snippet></ROW><ROW><id>13592993</id><snippet>import sys
data = [line.strip() for line in sys.stdin]
</snippet></ROW><ROW><id>13592993</id><snippet>import sys
import collections

data = collections.deque(line.strip() for line in sys.stdin)
first = data[0]
while data:
    a, b = data.popleft(), data.pop()
    print '{} -&gt; {}'.format(a, b)
    print '{} -&gt; {}'.format(b, data[0] if data else first)
</snippet></ROW><ROW><id>13593108</id><snippet>ManyToManyField</snippet></ROW><ROW><id>13593108</id><snippet>ForeignKey</snippet></ROW><ROW><id>13593108</id><snippet>models.ForeignKey('self')</snippet></ROW><ROW><id>13593108</id><snippet>proArguments = models.ManyToManyField("self", verbose_name="Pro arguments")
contraArguments = models.ManyToManyField("self", verbose_name="Contra arguments")
</snippet></ROW><ROW><id>13593230</id><snippet>__str__()</snippet></ROW><ROW><id>13593230</id><snippet>def __str__(self):
    return ('Name: {name}\n'
        'Poisoned: {poisoned}\n'
        # etc.
    ).format(**self.__dict__)
</snippet></ROW><ROW><id>13594055</id><snippet>for</snippet></ROW><ROW><id>13594114</id><snippet>class Person(object):
    def __init__(self,firstname,lastname):
        self.firstname=firstname
        self.lastname=lastname
</snippet></ROW><ROW><id>13594114</id><snippet>mystructure=Person('firstname','lastname')
</snippet></ROW><ROW><id>13594114</id><snippet>mystructure.firstname</snippet></ROW><ROW><id>13594114</id><snippet>mystructure.lastname</snippet></ROW><ROW><id>13594114</id><snippet>class Person(object):
    firstname=None
    lastname=None
</snippet></ROW><ROW><id>13594114</id><snippet>Person.firstname="firstname"
Person.lastname="lastname"
</snippet></ROW><ROW><id>13594114</id><snippet>Person={'firstname':None,'lastname':None}
</snippet></ROW><ROW><id>13594114</id><snippet>Person['firstname']="firstname"
Person['lastname']="lastname"
</snippet></ROW><ROW><id>13594120</id><snippet>shape_last = x.shape[-1]
x.reshape((-1, shape_last))[np.arange(y.size), y.flatten()] = 1
</snippet></ROW><ROW><id>13594120</id><snippet>y</snippet></ROW><ROW><id>13594120</id><snippet>array([[[ 0.,  0.,  0.,  1.],
        [ 0.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  0.]],

       [[ 0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  1.],
        [ 0.,  1.,  0.,  0.]]])
</snippet></ROW><ROW><id>13594120</id><snippet>x</snippet></ROW><ROW><id>13594120</id><snippet>y</snippet></ROW><ROW><id>13594120</id><snippet>reshape</snippet></ROW><ROW><id>13594120</id><snippet>flatten</snippet></ROW><ROW><id>13594148</id><snippet>import re
</snippet></ROW><ROW><id>13594202</id><snippet>rexBackticked = re.compile(r'`(\S.*?\S?)`')
</snippet></ROW><ROW><id>13594202</id><snippet>enpara</snippet></ROW><ROW><id>13594202</id><snippet>cspara</snippet></ROW><ROW><id>13594202</id><snippet>enlst = rexBackticked.findall(enpara)
cslst = rexBackticked.findall(cspara)
</snippet></ROW><ROW><id>13594202</id><snippet>if set(enlst) != set(cslst) or len(enlst) != len(cslst):
</snippet></ROW><ROW><id>13594202</id><snippet>cspara</snippet></ROW><ROW><id>13594202</id><snippet>    dlst = enlst[:]   # copy
    for s in cslst:
        if s in dlst:
            dlst.remove(s)
</snippet></ROW><ROW><id>13594202</id><snippet>dlst</snippet></ROW><ROW><id>13594202</id><snippet>def buildRex(self, lst):
    '''Build a regular expression mathing substrings from the lst.'''

    # Build a list of escaped unique substrings from the input list.
    # The order is not important now as it must be corrected later.
    lst2 = [re.escape(s) for s in set(lst)]

    # Join the escaped substrings to form the regular expression
    # pattern, build the regular expression, and return it. There could
    # be longer paterns that contain shorter patterns. The longer patterns
    # should be matched first. This way, the lst2 must be reverse sorted
    # by the length of the patterns.
    pat = '|'.join(sorted(lst2, key=len, reverse=True))
    rex = re.compile(pat)
    return rex
</snippet></ROW><ROW><id>13594202</id><snippet>cspara</snippet></ROW><ROW><id>13594202</id><snippet>    rex = self.buildRex(dlst)
    cspara, n = rex.subn(r'`\g&lt;0&gt;`', cspara)
</snippet></ROW><ROW><id>13594202</id><snippet>n</snippet></ROW><ROW><id>13594213</id><snippet>multiprocessing</snippet></ROW><ROW><id>13594213</id><snippet>threading</snippet></ROW><ROW><id>13594213</id><snippet>threading.Thread</snippet></ROW><ROW><id>13594213</id><snippet>global time_master</snippet></ROW><ROW><id>13594213</id><snippet>multiprocessing</snippet></ROW><ROW><id>13594213</id><snippet>threading</snippet></ROW><ROW><id>13594213</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>13594213</id><snippet>multiprocessing</snippet></ROW><ROW><id>13594403</id><snippet>p[people][0]</snippet></ROW><ROW><id>13594403</id><snippet>db.people.find({"classes": {'$gt': 0}, 'people.0' : { '$exists' : True}})
</snippet></ROW><ROW><id>13594519</id><snippet>A = np.array([1,2,3])
A_counts = np.array([3,3,3])
A_powers = np.array([[3],[4],[5]])
B_nodup = np.power(A, A_powers)
B_list = [ np.transpose( np.tile( B_nodup[:,i], (A_counts[i], 1) ) ) for i in range(A.shape[0]) ]
B = np.hstack( B_list )
</snippet></ROW><ROW><id>13594519</id><snippet>B_list = [ np.tile( B_nodup[:,i], (A_counts[i], 1) ) for i in range(A.shape[0]) ]
B = np.transpose( np.vstack( B_list ) )
</snippet></ROW><ROW><id>13594519</id><snippet>&gt;&gt;&gt; A=np.array([1,1,1,2,2,2,3,3,3])
&gt;&gt;&gt; B = np.power(A,[[3],[4],[5]])
&gt;&gt;&gt; B
array([[  1,   1,   1,   8,   8,   8,  27,  27,  27],
       [  1,   1,   1,  16,  16,  16,  81,  81,  81],
       [  1,   1,   1,  32,  32,  32, 243, 243, 243]])
</snippet></ROW><ROW><id>13594533</id><snippet>uk_users = User.objects(country='uk')
</snippet></ROW><ROW><id>13594533</id><snippet>uk_female_users = User.objects(country='uk').filter(gender='f')
</snippet></ROW><ROW><id>13594564</id><snippet>exponent</snippet></ROW><ROW><id>13594564</id><snippet>exponent[0]</snippet></ROW><ROW><id>13594564</id><snippet>exponent[0][i]</snippet></ROW><ROW><id>13594564</id><snippet>L = identity(len(l))
for i in xrange(len(l)):
    L[i][i] = exponent[i]
</snippet></ROW><ROW><id>13594564</id><snippet>L = diag(exponent)
</snippet></ROW><ROW><id>13594596</id><snippet>currentIndex</snippet></ROW><ROW><id>13594596</id><snippet>addLevel</snippet></ROW><ROW><id>13594596</id><snippet>QModelIndex</snippet></ROW><ROW><id>13594596</id><snippet>currentIndex</snippet></ROW><ROW><id>13594596</id><snippet>QComboBox</snippet></ROW><ROW><id>13594596</id><snippet>class LevelListModel(QAbstractListModel):
    # [skipped]
    def addLevel(self,level):
        self.beginInsertRows(QModelIndex(), len(self.levelList), len(self.levelList))
        self.levelList.append(level)
        self.endInsertRows()
        return self.index(len(self.levelList)-1)
</snippet></ROW><ROW><id>13594596</id><snippet>newLevel = Level (self.levelListModel.rowCount() + 1)
newIndex = self.levelListModel.addLevel(newLevel)
self.ui.levelComboBox.setCurrentIndex(newIndex)
</snippet></ROW><ROW><id>13594596</id><snippet>[begin|end]ResetModel</snippet></ROW><ROW><id>13594596</id><snippet>[begin|end]InsertRows</snippet></ROW><ROW><id>13594596</id><snippet>[begin|end]RemoveRows</snippet></ROW><ROW><id>13594623</id><snippet>python script.py</snippet></ROW><ROW><id>13594623</id><snippet>script.py</snippet></ROW><ROW><id>13594623</id><snippet>.py</snippet></ROW><ROW><id>13594625</id><snippet>*/1 * * * * /home/pi/ipsender.py &gt; /home/pi/ipsender.log 2&gt;&amp;1
</snippet></ROW><ROW><id>13594625</id><snippet>print 'starting'</snippet></ROW><ROW><id>13594700</id><snippet>site.cfg.example</snippet></ROW><ROW><id>13594700</id><snippet>site.cfg</snippet></ROW><ROW><id>13594700</id><snippet>[DEFAULT]
library_dirs = /usr/projects/infmodels/gfairchild/packages/lib:/usr/local/lib
include_dirs = /usr/projects/infmodels/gfairchild/packages/include:/usr/local/include
</snippet></ROW><ROW><id>13594700</id><snippet>LDFLAGS</snippet></ROW><ROW><id>13594700</id><snippet>site.cfg</snippet></ROW><ROW><id>13594763</id><snippet>requirements.txt</snippet></ROW><ROW><id>13594763</id><snippet>postinstall</snippet></ROW><ROW><id>13594763</id><snippet>import foo ; foopath = foo.__file__</snippet></ROW><ROW><id>13594955</id><snippet>c:cmap</snippet></ROW><ROW><id>13594955</id><snippet>  &lt;xsl:apply-templates select="c:concept"/&gt;
</snippet></ROW><ROW><id>13594955</id><snippet>cmap</snippet></ROW><ROW><id>13594955</id><snippet>concept</snippet></ROW><ROW><id>13594955</id><snippet>  &lt;xsl:apply-templates select="c:map/c:concept-list/c:concept"/&gt;
</snippet></ROW><ROW><id>13594955</id><snippet>  &lt;xsl:apply-templates select=".//c:concept"/&gt;
</snippet></ROW><ROW><id>13594955</id><snippet>concept</snippet></ROW><ROW><id>13594955</id><snippet>c:concept</snippet></ROW><ROW><id>13594955</id><snippet>xmlns="http://graphml.graphdrawing.org/xmlns"</snippet></ROW><ROW><id>13594955</id><snippet>&lt;node&gt;</snippet></ROW><ROW><id>13594955</id><snippet>xmlns=""</snippet></ROW><ROW><id>13595031</id><snippet>% if mydict.get('somekey'):
    ${mydict['somekey'][0]['hellothere']}&lt;/td&gt;&lt;/tr&gt;
% endif
</snippet></ROW><ROW><id>13595044</id><snippet>default_flow_style</snippet></ROW><ROW><id>13595044</id><snippet>&gt;&gt;&gt; print yaml.dump([1,2,3], default_flow_style=False)
- 1
- 2
- 3
</snippet></ROW><ROW><id>13595171</id><snippet>def contains_multiple(string, substrings):
    count = 0

    for substring in substrings:
        if substring in string:
            count += 1
            if count &gt; 1:
                return True

    return False

for line in data:
    if contains_multiple(line, my_list):
        ...
</snippet></ROW><ROW><id>13595232</id><snippet>unicode_escape</snippet></ROW><ROW><id>13595232</id><snippet># Original sentence:

&gt;&gt;&gt; s = "Gib mir bitte Erk\u00e4ltung"

&gt;&gt;&gt; print s
Gib mir bitte Erk\u00e4ltung

&gt;&gt;&gt; print repr(s)
'Gib mir bitte Erk\\u00e4ltung'


# Converted sentence:

&gt;&gt;&gt; sc = s.decode('unicode_escape')

&gt;&gt;&gt; print sc
Gib mir bitte Erkältung

&gt;&gt;&gt; print repr(sc)
u'Gib mir bitte Erk\xe4ltung'
</snippet></ROW><ROW><id>13595517</id><snippet>def recursive_bin(i):
    if i == 0:
        return ''
    elif i &lt; 0:
        return '-' + recursive_bin(-i)
    else:
        return recursive_bin(i&gt;&gt;1) + str(i&amp;1)
</snippet></ROW><ROW><id>13595517</id><snippet>bin()</snippet></ROW><ROW><id>13595517</id><snippet>i&amp;1</snippet></ROW><ROW><id>13595517</id><snippet>i</snippet></ROW><ROW><id>13595517</id><snippet>0</snippet></ROW><ROW><id>13595517</id><snippet>1</snippet></ROW><ROW><id>13595517</id><snippet>i&gt;&gt;1</snippet></ROW><ROW><id>13595517</id><snippet>i</snippet></ROW><ROW><id>13595517</id><snippet># 6 is 110 in binary
recursive_bin(6)
recursive_bin(6&gt;&gt;1) + str(6 &amp; 1)        -&gt; recursive_bin(3) + '0'
recursive_bin(3&gt;&gt;1) + str(3 &amp; 1) + '0'  -&gt; recursive_bin(1) + '1' + '0'
recursive_bin(1&gt;&gt;1) + str(1 &amp; 1) + '10' -&gt; recursive_bin(0) + '1' + '10'
recursive_bin(0) + '110'                -&gt; '' + '110'
# Final result is '110', since the base case of 0 returns an empty string
</snippet></ROW><ROW><id>13595600</id><snippet>]</snippet></ROW><ROW><id>13595600</id><snippet>Rank[Person:Height]</snippet></ROW><ROW><id>13595600</id><snippet>dbRef</snippet></ROW><ROW><id>13595600</id><snippet>:</snippet></ROW><ROW><id>13595600</id><snippet>functionCall</snippet></ROW><ROW><id>13595600</id><snippet>]</snippet></ROW><ROW><id>13595600</id><snippet>dbRef = Combine(Word(alphas) + ":" + Word(alphas, alphas+"-_./") + \
    Optional(" " + Word(alphas) + " " + Word(alphas)))
</snippet></ROW><ROW><id>13595600</id><snippet>functionCall</snippet></ROW><ROW><id>13595600</id><snippet>expr</snippet></ROW><ROW><id>13595600</id><snippet>-</snippet></ROW><ROW><id>13595600</id><snippet>dbRef</snippet></ROW><ROW><id>13595600</id><snippet>expr</snippet></ROW><ROW><id>13595697</id><snippet>ET.tostring</snippet></ROW><ROW><id>13595697</id><snippet>.write</snippet></ROW><ROW><id>13595697</id><snippet>ElementTree</snippet></ROW><ROW><id>13595755</id><snippet>for name in 'a', 'b', 'c':
  try:
    thing = getattr(obj, name)
  except AttributeError:
    pass
  else:
    break
</snippet></ROW><ROW><id>13595947</id><snippet>CheckListCtrlMixin</snippet></ROW><ROW><id>13595947</id><snippet>def OnCheckItem(self, index, flag):
    "flag is True if the item was checked, False if unchecked"
    pass
</snippet></ROW><ROW><id>13595947</id><snippet>CheckListCtrl</snippet></ROW><ROW><id>13595947</id><snippet>self.pluginlist.OnCheckItem = self.on_check_item
</snippet></ROW><ROW><id>13595974</id><snippet>data-</snippet></ROW><ROW><id>13595974</id><snippet>&lt;li data-externalfile="whatever.html"&gt;Whatever&lt;/li&gt;
</snippet></ROW><ROW><id>13595974</id><snippet>.load('whatever.html')</snippet></ROW><ROW><id>13595974</id><snippet>.load(($this).attr("data-externalfile"))
</snippet></ROW><ROW><id>13596447</id><snippet>def __str__(self):
    local_data = self.__dict__.copy()

    local_data['status'] = "[POISONED]" if self.poisoned else ""

    local_data['weapon'] = " " if not self.weapon else ','.join(self.weapon)

    return ('NAME: {name} {status}\n' \
            'XP:   {xp}\n' \
            'HP:   {hit_points}\n' \
            'SP:   {spell_points}\n' \
            'STR:  {strength}\n' \
            'DEX:  {dexterity}\n' \
            'WEAPON: {weapon}\n' \
            'SPELL:  {spell}\n' \
            'ITEM:   {item}\n' \
            'AURA:   {aura}\n' \
            ).format(**local_data)
</snippet></ROW><ROW><id>13596447</id><snippet>self.status</snippet></ROW><ROW><id>13596469</id><snippet>list</snippet></ROW><ROW><id>13596469</id><snippet>l.append</snippet></ROW><ROW><id>13596469</id><snippet>(l, list.append)</snippet></ROW><ROW><id>13596469</id><snippet>l</snippet></ROW><ROW><id>13596469</id><snippet>l</snippet></ROW><ROW><id>13596469</id><snippet>list.append</snippet></ROW><ROW><id>13596469</id><snippet>l.append</snippet></ROW><ROW><id>13596469</id><snippet>&gt;&gt;&gt; s.add(list.append)
</snippet></ROW><ROW><id>13596469</id><snippet>&gt;&gt;&gt; s.add((l, list.append))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>13596488</id><snippet>records = {}

for line in data:
    # parsing codes

    # store player -&gt; gameid mappings to the index
    if player not in records:
        records[player] = []
    records[player].append(info)

print records['Sona']
# this should print out list of games played with Sona
</snippet></ROW><ROW><id>13596559</id><snippet>self.conn.put_mapping('modelresult', current_mapping, index=self.index_name)
</snippet></ROW><ROW><id>13596559</id><snippet>self.conn.put_mapping(doc_type='modelresult', mapping=current_mapping, index=self.index_name)
</snippet></ROW><ROW><id>13596711</id><snippet>p=subprocess.Popen('du -sh /tmp/*', shell=True)
</snippet></ROW><ROW><id>13596996</id><snippet>r.get()</snippet></ROW><ROW><id>13596996</id><snippet>amr = lview.map_async(return_len, get_dir_list('C:\\test_folder','xsd','xml'))
</snippet></ROW><ROW><id>13596996</id><snippet>for r in amr:
    print r
</snippet></ROW><ROW><id>13596996</id><snippet>for i,r in enumerate(amr):
    print i, r 
</snippet></ROW><ROW><id>13596996</id><snippet>reduce</snippet></ROW><ROW><id>13596996</id><snippet>summary_result = reduce(myfunc, amr)
</snippet></ROW><ROW><id>13596996</id><snippet>map_async(...,ordered=False)</snippet></ROW><ROW><id>13596996</id><snippet>@parallel.require("module")</snippet></ROW><ROW><id>13596996</id><snippet>%px import xml.etree.cElementTree as cElementTree</snippet></ROW><ROW><id>13597111</id><snippet>f</snippet></ROW><ROW><id>13597111</id><snippet>for line in open('file', 'r'):
    print line
</snippet></ROW><ROW><id>13597376</id><snippet>awk</snippet></ROW><ROW><id>13597376</id><snippet>httpry -other -args -here | awk '{print $7}' &gt; outfile.txt
</snippet></ROW><ROW><id>13597380</id><snippet>from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response

def upload_file(request):
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            if check_pdf(request.FILES['file'].name):
                return HttpResponseRedirect('/success/url/')
            else:
                return HttpResponseRedirect('/invalid_pdf/url/')
    else:
        form = UploadFileForm()
    return render_to_response('upload.html', {'form': form})
</snippet></ROW><ROW><id>13597403</id><snippet>print "i is equal to %d." % i
</snippet></ROW><ROW><id>13597403</id><snippet>.format()</snippet></ROW><ROW><id>13597403</id><snippet>&gt;&gt;&gt; print "i is equal to {}".format(i)
i is equal to 5
</snippet></ROW><ROW><id>13597403</id><snippet>&gt;&gt;&gt; print "i={0}, a.k.a. 'i is equal to {0}.'".format(i)
i=5, a.k.a. 'i is equal to 5.'
</snippet></ROW><ROW><id>13597413</id><snippet>WSGIScriptAlias /wsgi z:\i4\importicus\wsgi\importicus.wsgi</snippet></ROW><ROW><id>13597532</id><snippet>pip install webhelpers
</snippet></ROW><ROW><id>13597532</id><snippet>"""
helpers.py
Import all webhelpers that you want to have access to
"""
from webhelpers.html.tags import stylesheet_link
</snippet></ROW><ROW><id>13597532</id><snippet>import helpers

@route('/')
def index():
    return Template("template_name").render(h=helpers)
</snippet></ROW><ROW><id>13597532</id><snippet>${h.stylesheet_link("some_link_url_text")}
</snippet></ROW><ROW><id>13597776</id><snippet>bool()</snippet></ROW><ROW><id>13597776</id><snippet>&gt;&gt;&gt; weapon = []
&gt;&gt;&gt; bool(weapon) == True
False
&gt;&gt;&gt; weapon.append("sword")
&gt;&gt;&gt; bool(weapon) == True
True
</snippet></ROW><ROW><id>13597776</id><snippet>if</snippet></ROW><ROW><id>13597776</id><snippet>while</snippet></ROW><ROW><id>13597776</id><snippet>bool</snippet></ROW><ROW><id>13597776</id><snippet>&gt;&gt;&gt; if weapon == True:  # weapon isn't equal to True
...     print "True"
... 
&gt;&gt;&gt; if weapon:
...     print "True"
... 
True
</snippet></ROW><ROW><id>13597844</id><snippet>&gt;&gt;&gt; max(days_dictionary, key=days_dictionary.get)
'mon'
&gt;&gt;&gt; [days_dictionary.get(k, 0) for k in days_week]
[3, 0, 2, 0, 2, 1]
</snippet></ROW><ROW><id>13597844</id><snippet>collections.Counter</snippet></ROW><ROW><id>13597844</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; days_week = ['mon', 'tues', 'wed', 'thurs', 'fri', 'sat']
&gt;&gt;&gt; random_list = [random.choice(days_week) for x in range(10)]
&gt;&gt;&gt; random_list
['wed', 'mon', 'mon', 'tues', 'tues', 'mon', 'wed', 'mon', 'wed', 'sat']
&gt;&gt;&gt; c = Counter(random_list)
&gt;&gt;&gt; c.most_common(1)[0][0]
'mon'
&gt;&gt;&gt; [c.get(k, 0) for k in days_week]
[4, 2, 3, 0, 0, 1]
&gt;&gt;&gt; c.most_common(1)[0][0], [c.get(k, 0) for k in days_week]
('mon', [4, 2, 3, 0, 0, 1])
</snippet></ROW><ROW><id>13597865</id><snippet>form_valid</snippet></ROW><ROW><id>13597865</id><snippet>Form.clean</snippet></ROW><ROW><id>13597865</id><snippet>Form.clean_FOO</snippet></ROW><ROW><id>13597865</id><snippet>def form_valid(self, request, *args, **kwargs):
    is_actually_valid = some_custom_logic()
    if not is_actually_valid:
        return self.form_invalid(request, *args, **kwargs)
</snippet></ROW><ROW><id>13597937</id><snippet>from subprocess import call
call(["open", "hi.jpg"])
</snippet></ROW><ROW><id>13597939</id><snippet>In [17]: employees = {'joe': ['100', 0], 'sue': ['200', 0]}
In [18]: x = 'joe'
In [19]: i = 0
In [20]: employees[x][i]
Out[20]: '100'
</snippet></ROW><ROW><id>13597987</id><snippet>QBoxLayout</snippet></ROW><ROW><id>13597987</id><snippet>QBoxLayout.LeftToRight</snippet></ROW><ROW><id>13597987</id><snippet>self</snippet></ROW><ROW><id>13597987</id><snippet>layout = QBoxLayout()</snippet></ROW><ROW><id>13598076</id><snippet>__import__</snippet></ROW><ROW><id>13598076</id><snippet>new_module = __import__(modulename)
</snippet></ROW><ROW><id>13598709</id><snippet>.%f</snippet></ROW><ROW><id>13598709</id><snippet>In [5]: import time

In [6]: d2 = '2012-11-07 13:41:13.138807'

In [7]: d1 = time.strptime(d2, '%Y-%m-%d %H:%M:%S.%f')

In [8]: d1
Out[8]: time.struct_time(tm_year=2012, tm_mon=11, tm_mday=7, tm_hour=13, tm_min=41, tm_sec=13, tm_wday=2, tm_yday=312, tm_isdst=-1)
</snippet></ROW><ROW><id>13598709</id><snippet>%f</snippet></ROW><ROW><id>13598709</id><snippet>datetime</snippet></ROW><ROW><id>13598709</id><snippet>time</snippet></ROW><ROW><id>13598709</id><snippet>In [20]: import time

In [21]: d2 = '2012-11-07 13:41:13.138807'

In [22]: d2_noms = d2.split('.')[0]

In [23]: d1 = time.strptime(d2_noms, '%Y-%m-%d %H:%M:%S')

In [24]: d1
Out[24]: time.struct_time(tm_year=2012, tm_mon=11, tm_mday=7, tm_hour=13, tm_min=41, tm_sec=13, tm_wday=2, tm_yday=312, tm_isdst=-1)
</snippet></ROW><ROW><id>13598839</id><snippet>my_loader = jinja2.ChoiceLoader([
        app.jinja_loader,
        jinja2.FileSystemLoader(['/flaskapp/userdata', \
                                 '/flaskapp/templates']),
    ])
app.jinja_loader = my_loader
</snippet></ROW><ROW><id>13598839</id><snippet>render_template('%s/template1/hello.html' % username)
</snippet></ROW><ROW><id>13599005</id><snippet>import sys
sys.path.append('C:/python/files/folder1')

import a
import a1
</snippet></ROW><ROW><id>13599005</id><snippet>import os
import sys

dir_of_interest = 'C:/python/files/folder1'
modules = {}

sys.path.append(dir_of_interest)
for module in os.listdir(dir_of_interest):
    if '.py' in module and '.pyc' not in module:
        current = module.replace('.py', '')
        modules[current] = __import__(current)
</snippet></ROW><ROW><id>13599005</id><snippet>module_name.thing</snippet></ROW><ROW><id>13599005</id><snippet>modules["module_name"].thing</snippet></ROW><ROW><id>13599342</id><snippet>super()</snippet></ROW><ROW><id>13599342</id><snippet>__set__()</snippet></ROW><ROW><id>13599500</id><snippet>Task.objects.filter(owner = current_user)
</snippet></ROW><ROW><id>13599500</id><snippet>from django.contrib import admin
from models import MyModel

class TaskAdmin(admin.ModelAdmin): 

    def queryset(self, request): 
        return super(TaskAdmin, self).queryset(request).filter(owner = request.user)

admin.site.register(Task, TaskAdmin)
</snippet></ROW><ROW><id>13599632</id><snippet>requirements.txt</snippet></ROW><ROW><id>13599632</id><snippet>requirements.txt</snippet></ROW><ROW><id>13599632</id><snippet>requirements.txt</snippet></ROW><ROW><id>13599632</id><snippet>requirements-dev.txt</snippet></ROW><ROW><id>13599632</id><snippet>app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get(
    'DATABASE_URL', 'sqlite:////tmp/test.db')
</snippet></ROW><ROW><id>13599632</id><snippet>DATABASE_URL</snippet></ROW><ROW><id>13599632</id><snippet>os.environ.get</snippet></ROW><ROW><id>13599710</id><snippet>.zfill()</snippet></ROW><ROW><id>13599710</id><snippet>&gt;&gt;&gt; '100'.zfill(5)
'00100'
</snippet></ROW><ROW><id>13599710</id><snippet>&gt;&gt;&gt; '{0:05b}'.format(4)
'00100'
</snippet></ROW><ROW><id>13599710</id><snippet>:05b</snippet></ROW><ROW><id>13599710</id><snippet>str.format()</snippet></ROW><ROW><id>13599710</id><snippet>format()</snippet></ROW><ROW><id>13599710</id><snippet>{0:..}</snippet></ROW><ROW><id>13599710</id><snippet>&gt;&gt;&gt; format(4, '05b')
'00100'
</snippet></ROW><ROW><id>13599742</id><snippet>sys.argv</snippet></ROW><ROW><id>13599742</id><snippet>PySys_SetArgvEx(argc, argv, updatepath)</snippet></ROW><ROW><id>13599742</id><snippet>Py_Initialize()</snippet></ROW><ROW><id>13599843</id><snippet>foo[np.ix_(row_criteria, col_criteria, [0])] += 5
</snippet></ROW><ROW><id>13599843</id><snippet>import numpy as np
A = np.arange(25).reshape([5, 5])
print A[[0, 2, 4], [0, 2, 4]]
# [0, 12, 24]

# The above example gives the the elements A[0, 0], A[2, 2], A[4, 4]
# But what if I want the "outer product?" ie for [[0, 2, 4], [1, 3]] i want
# A[0, 1], A[0, 3], A[2, 1], A[2, 3], A[4, 1], A[4, 3]
print A[np.ix_([0, 2, 4], [1, 3])]
# [[ 1  3]
#  [11 13]
#  [21 23]]
</snippet></ROW><ROW><id>13599843</id><snippet>np.ix_</snippet></ROW><ROW><id>13599843</id><snippet>i, j = np.ix_([0, 2, 4], [1, 3])
print i.shape
# (3, 1)
print j.shape
# (1, 2)
</snippet></ROW><ROW><id>13600370</id><snippet>@app.route('/static/css/')</snippet></ROW><ROW><id>13600389</id><snippet>break</snippet></ROW><ROW><id>13600389</id><snippet>lines = []
with open(FILENAME, 'r') as ballots:
    foundriding = False
    ballots.next()  # skip first line
    for line in ballots:
        if line.rstrip() == 'Riding ' + riding:
            foundriding = True
            continue
        if not foundriding: 
            continue
        line = line.rstrip()
        if line and not line.startswith('Riding '):
            lines.append(line)
        else:
            break
</snippet></ROW><ROW><id>13600389</id><snippet>Riding &lt;number&gt;</snippet></ROW><ROW><id>13600389</id><snippet>foundriding</snippet></ROW><ROW><id>13600389</id><snippet>lines</snippet></ROW><ROW><id>13600389</id><snippet>Riding</snippet></ROW><ROW><id>13600389</id><snippet>itertools.takewhile()</snippet></ROW><ROW><id>13600389</id><snippet>from itertools import takewhile
with open(FILENAME, 'r') as ballots:
    ballots.next()  # skip first line
    for line in takewhile(lambda l: l.rstrip() != 'Riding ' + riding, ballots):
        pass  # skip lines
    lines = [l.rstrip() for l in takewhile(lambda l: l.rstrip() and not l.startswith('Riding '), ballots)]
</snippet></ROW><ROW><id>13600389</id><snippet>takewhile</snippet></ROW><ROW><id>13600389</id><snippet>Riding</snippet></ROW><ROW><id>13600389</id><snippet>lines</snippet></ROW><ROW><id>13600389</id><snippet>ballots</snippet></ROW><ROW><id>13600389</id><snippet>.readline()</snippet></ROW><ROW><id>13600389</id><snippet>.readline()</snippet></ROW><ROW><id>13600389</id><snippet>ballot.readline()</snippet></ROW><ROW><id>13600389</id><snippet>ballotiterator = iter(ballots.readline, '')
</snippet></ROW><ROW><id>13600389</id><snippet>ballotiterator</snippet></ROW><ROW><id>13600389</id><snippet>ballots</snippet></ROW><ROW><id>13600389</id><snippet>for line in ballots</snippet></ROW><ROW><id>13600389</id><snippet>ballots.next()</snippet></ROW><ROW><id>13600389</id><snippet>takewhile(..., ballots)</snippet></ROW><ROW><id>13600393</id><snippet>validators</snippet></ROW><ROW><id>13600393</id><snippet>models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], default=5, help_text='integers 1 to 10')
</snippet></ROW><ROW><id>13600441</id><snippet>__import__</snippet></ROW><ROW><id>13600441</id><snippet>imp_obj = __import__('re')
</snippet></ROW><ROW><id>13600441</id><snippet>import</snippet></ROW><ROW><id>13600441</id><snippet>exec('import re')</snippet></ROW><ROW><id>13600441</id><snippet>exec</snippet></ROW><ROW><id>13601157</id><snippet>def IsInRange(n, r=("8X5000", "8X5099")):
    (minr, maxr) = [[int(i) for i in l.split('X')] for l in r]
    p = len(r[0]) - r[0].find('X')

    nl = (n // 10**p, n % 10**(p-1))
    fInRange = all([minr[i] &lt;= nl[i] &lt;= maxr[i] for i in range(2)])
    return fInRange
</snippet></ROW><ROW><id>13601157</id><snippet>minr = [8, 5000]
maxr = [8, 5099]
</snippet></ROW><ROW><id>13601157</id><snippet>nl = (5, 5049)
</snippet></ROW><ROW><id>13601157</id><snippet>def main():
    t1 = timeit.timeit('MultiRange.in_range(985000)', setup='import MultiRange', number=10000)
    t2 = timeit.timeit('MultiRange.IsInRange(985000)', setup='import MultiRange', number=10000)

    print t1, t2
    print float(t2)/float(t1), 1 - float(t2)/float(t1)        
</snippet></ROW><ROW><id>13601157</id><snippet>ranges=("8X5000", "8X5999")
</snippet></ROW><ROW><id>13601157</id><snippet>in_range</snippet></ROW><ROW><id>13601157</id><snippet>class IsInRange5(object):
    def __init__(self, r=("8X5000", "8X5099")):
        ((self.minr0, self.minr1), (self.maxr0, self.maxr1)) = [[int(i) for i in l.split('X')] for l in r]
        pos = len(r[0]) - r[0].find('X')
        self.basel = 10**(pos-1)
        self.baseh = self.basel*10
        self.ir = range(2)

    def __contains__(self, n):
        return self.minr0 &lt;= n // self.baseh &lt;= self.maxr0 and \
            self.minr1 &lt;= n % self.basel &lt;= self.maxr1
</snippet></ROW><ROW><id>13601349</id><snippet>primes = list(historic(26))
primes = {c : primes[ord(c) - ord('a')] for c in string.lowercase}

def prime_hash2(s):
   res = 1
   for c in s:
      res = res * primes[c]
   return res
</snippet></ROW><ROW><id>13602029</id><snippet>...
ready = gevent.event.Event()
ready.clear()

def callback():
    ready.set()

lst = [gevent.spawn(first), gevent.spawn(second)]
for g in lst:
    g.link(callback)

ready.wait()
...
</snippet></ROW><ROW><id>13602121</id><snippet>E</snippet></ROW><ROW><id>13602121</id><snippet>E</snippet></ROW><ROW><id>13602121</id><snippet>python manage.py test someapp.TestCaseClassName
</snippet></ROW><ROW><id>13602121</id><snippet>python manage.py test someapp.TestCaseClassName.test_method
</snippet></ROW><ROW><id>13602160</id><snippet>SENDING_MAIL_LISTENER="$PYTHON ./rajesh/script.py -s \"$SUBJECT_LISTENER\" -p \"$BODY_LISTENER\" -r \"$CONTACT_NAME\""
</snippet></ROW><ROW><id>13602196</id><snippet>abs(x-y)</snippet></ROW><ROW><id>13602196</id><snippet>In [1]: abs(1-2)
Out[1]: 1

In [2]: abs(2-1)
Out[2]: 1
</snippet></ROW><ROW><id>13602272</id><snippet>numpy.arange(len(array))</snippet></ROW><ROW><id>13602272</id><snippet>bindices_zero = (array == 0)
</snippet></ROW><ROW><id>13602272</id><snippet>indices_zero = numpy.arange(len(array))[bindices_zero]
</snippet></ROW><ROW><id>13602272</id><snippet>indices_nonzero = numpy.arange(len(array))[~bindices_zero]
</snippet></ROW><ROW><id>13602395</id><snippet>not</snippet></ROW><ROW><id>13602395</id><snippet>__nonzero__</snippet></ROW><ROW><id>13602395</id><snippet>True</snippet></ROW><ROW><id>13602395</id><snippet>False</snippet></ROW><ROW><id>13602395</id><snippet>~</snippet></ROW><ROW><id>13602395</id><snippet>__not__</snippet></ROW><ROW><id>13602395</id><snippet>&amp;</snippet></ROW><ROW><id>13602395</id><snippet>|</snippet></ROW><ROW><id>13602395</id><snippet>and</snippet></ROW><ROW><id>13602395</id><snippet>or</snippet></ROW><ROW><id>13602395</id><snippet>if</snippet></ROW><ROW><id>13602395</id><snippet>np.isfinite</snippet></ROW><ROW><id>13602395</id><snippet>np.bool_</snippet></ROW><ROW><id>13602395</id><snippet>bool</snippet></ROW><ROW><id>13602395</id><snippet>np.bool_</snippet></ROW><ROW><id>13602395</id><snippet>np.True_</snippet></ROW><ROW><id>13602395</id><snippet>np.False_</snippet></ROW><ROW><id>13602395</id><snippet>True</snippet></ROW><ROW><id>13602395</id><snippet>False</snippet></ROW><ROW><id>13602395</id><snippet>~</snippet></ROW><ROW><id>13602509</id><snippet>continue</snippet></ROW><ROW><id>13602509</id><snippet>sum += celldict[num][key]</snippet></ROW><ROW><id>13602509</id><snippet>for d in celldict.values():
    d['AB'] = d.get('A',0) + d.get('B',0)
</snippet></ROW><ROW><id>13602644</id><snippet>True</snippet></ROW><ROW><id>13602644</id><snippet>False</snippet></ROW><ROW><id>13602644</id><snippet>and</snippet></ROW><ROW><id>13602644</id><snippet>or</snippet></ROW><ROW><id>13602644</id><snippet>and</snippet></ROW><ROW><id>13602644</id><snippet>or</snippet></ROW><ROW><id>13602864</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns
# ... the rest of your URLconf goes here ...
urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>13602895</id><snippet>MODULEPATH = os.path.dirname(__file__)

template = open(os.path.join(MODULEPATH, 'templates/sometemplate.tpl').read()
</snippet></ROW><ROW><id>13602895</id><snippet>__file__</snippet></ROW><ROW><id>13602895</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>13603268</id><snippet>doubles = dict()

for x in range(1, 13):
    doubles[x] = x * 2
</snippet></ROW><ROW><id>13603268</id><snippet>locals()</snippet></ROW><ROW><id>13603268</id><snippet>&gt;&gt;&gt; for x in range(1, 13):
...     locals()['double_{0}'.format(x)] = x * 2
... 
&gt;&gt;&gt; double_3
6
</snippet></ROW><ROW><id>13603331</id><snippet>(\S+ \S+)(?=\s{2,}READY)
</snippet></ROW><ROW><id>13603392</id><snippet>dir()</snippet></ROW><ROW><id>13603392</id><snippet>__dir__()</snippet></ROW><ROW><id>13603392</id><snippet>def __dir__(self):
    res = dir(type(self)) + list(self.__dict__.keys())
    res.extend(['dynamic1', 'dynamic2'])
    return res
</snippet></ROW><ROW><id>13603392</id><snippet>import inspect
import functools


class _Default(object):
    def __init__(self, repr):
        self._repr = repr
    def __repr__(self):
        return self._repr


def _buildFacade(name, spec, docstring):
    """Build a facade function, matching the decorated method in signature.

    Note that defaults are replaced by instances of _Default, and _curried
    will reconstruct these to preserve mutable defaults.

    """
    args = inspect.formatargspec(
        formatvalue=lambda v: '=_Default({0!r})'.format(repr(v)), *spec)
    callargs = inspect.formatargspec(formatvalue=lambda v: '', *spec)
    return 'def {0}{1}:\n    """{2}"""\n    return _curried{3}'.format(
        name, args, docstring, callargs)


def add_docs(tool):
    spec = inspect.getargspec(tool)
    args, defaults = spec[0], spec[3]

    arglen = len(args)
    if defaults is not None:
        defaults = zip(args[arglen - len(defaults):], defaults)
        arglen -= len(defaults)

    def _curried(*args, **kw):
        # Reconstruct keyword arguments
        if defaults is not None:
            args, kwparams = args[:arglen], args[arglen:]
            for positional, (key, default) in zip(kwparams, defaults):
                if isinstance(positional, _Default):
                    kw[key] = default
                else:
                    kw[key] = positional

        return tool(*args, **kw)

    name = tool.__name__
    doc = 'Showing help for {0}()'.format(name)
    facade_globs = dict(_curried=_curried, _Default=_Default)
    exec _buildFacade(name, spec, doc) in facade_globs

    wrapped = facade_globs[name]
    wrapped = functools.update_wrapper(wrapped, tool,
        assigned=filter(lambda w: w != '__doc__', functools.WRAPPER_ASSIGNMENTS))

    return facade_globs[name]
</snippet></ROW><ROW><id>13603392</id><snippet>&gt;&gt;&gt; def foo(bar, spam='eggs', foobarred={}):
...     foobarred[bar] = spam
...     print foobarred
... 
&gt;&gt;&gt; documented = add_docs(foo)
&gt;&gt;&gt; help(documented)
Help on function foo:

foo(bar, spam='eggs', foobarred={})
    Showing help for foo()

&gt;&gt;&gt; documented('monty', 'python')
{'monty': 'python'}
&gt;&gt;&gt; documented('Eric', 'Idle')
{'Eric': 'Idle', 'monty': 'python'}
</snippet></ROW><ROW><id>13603392</id><snippet>_Default</snippet></ROW><ROW><id>13603392</id><snippet>functools.update_wrapper</snippet></ROW><ROW><id>13603392</id><snippet>__doc__</snippet></ROW><ROW><id>13603510</id><snippet>lambda</snippet></ROW><ROW><id>13603510</id><snippet>&gt;&gt;&gt; def do_and_print(t1, t2):
    print 't1 is', t1
    print 't2 is', t2
    return t1+t2

&gt;&gt;&gt; reduce(do_and_print, ((1,2), (3,4), (5,)))
t1 is (1, 2)
t2 is (3, 4)
t1 is (1, 2, 3, 4)
t2 is (5,)
(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>13604206</id><snippet>finally</snippet></ROW><ROW><id>13604206</id><snippet>try:
    while True:
        do_stuff()
except KeyboardInterrupt:
    pass
finally:
    cleanup()
</snippet></ROW><ROW><id>13604243</id><snippet>handler</snippet></ROW><ROW><id>13604243</id><snippet>def my_handler(x):
    x = &lt;whatever&gt;
</snippet></ROW><ROW><id>13604243</id><snippet>my_handler(&lt;anything&gt;)</snippet></ROW><ROW><id>13604274</id><snippet>dev_sda1 = boto.ec2.blockdevicemapping.EBSBlockDeviceType()
dev_sda1.size = 50 # size in Gigabytes
bdm = boto.ec2.blockdevicemapping.BlockDeviceMapping()
bdm['/dev/sda1'] = dev_sda1 
</snippet></ROW><ROW><id>13604274</id><snippet>run_instances</snippet></ROW><ROW><id>13604274</id><snippet>reservation = ec2.run_instances( image_id=AMI_ID, 
                                 key_name=EC2_KEY_HANDLE, 
                                 instance_type=INSTANCE_TYPE,
                                 security_groups = [ SECGROUP_HANDLE, ],
                                 block_device_map = bdm)
</snippet></ROW><ROW><id>13604405</id><snippet>def intersect(a, b):
    """Intersection of a and b."""
    return (k for k in a if k in b)

def dot(a, b):
    """Dot product of values in a and b."""
    return sum((a[k] * b[k]) for k in intersect(a, b))

def l2norm(a):
    """L2 norm, aka Euclidean length, of a regarded as a vector."""
    return sqrt(sum(v ** 2 for v in a.itervalues()))

def similarity(a, b):
    """Cosine similarity of a and b."""
    return dot(a, b) / (l2norm(a) * l2norm(b))
</snippet></ROW><ROW><id>13604543</id><snippet>mysql_store_result()</snippet></ROW><ROW><id>13604543</id><snippet>mysql_use_result()</snippet></ROW><ROW><id>13604543</id><snippet>COMMIT</snippet></ROW><ROW><id>13604543</id><snippet>ROLLBACK</snippet></ROW><ROW><id>13604636</id><snippet>hashlib</snippet></ROW><ROW><id>13604636</id><snippet>{hash: string}</snippet></ROW><ROW><id>13604636</id><snippet>dict</snippet></ROW><ROW><id>13605025</id><snippet>g++ code.cpp -lboost_python -lboost_system
</snippet></ROW><ROW><id>13605077</id><snippet>bisect</snippet></ROW><ROW><id>13605077</id><snippet>sqlite3</snippet></ROW><ROW><id>13605527</id><snippet>proc = subprocess.Popen((["svn.exe", "list", "Https://127.0.0.1:443/svn/Repos"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
print proc.communicate(‘t\n’)[0]
</snippet></ROW><ROW><id>13605527</id><snippet>p = subprocess.Popen("echo t |", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
p1 = subprocess.Popen(["svn.exe", "list", "Https://127.0.0.1:443/svn/Repos"], shell=True, **stdin=p.stdout**, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
output = p1[0]
</snippet></ROW><ROW><id>13605527</id><snippet>echo t | svnmucc mkdir d:\temp</snippet></ROW><ROW><id>13605662</id><snippet>L</snippet></ROW><ROW><id>13605662</id><snippet>long</snippet></ROW><ROW><id>13605662</id><snippet>int</snippet></ROW><ROW><id>13605662</id><snippet>long</snippet></ROW><ROW><id>13605662</id><snippet>int</snippet></ROW><ROW><id>13605662</id><snippet>long</snippet></ROW><ROW><id>13605662</id><snippet>long</snippet></ROW><ROW><id>13605662</id><snippet>0 + 0L</snippet></ROW><ROW><id>13605662</id><snippet>0L</snippet></ROW><ROW><id>13605804</id><snippet>master, slave = pty.openpty()
tokenizer = subprocess.Popen(script, shell=True stdin=subprocess.PIPE, stdout=slave)
stdin_handle = process.stdin
stdout_handle = os.fdopen(master)
</snippet></ROW><ROW><id>13605804</id><snippet>stdin_handle.write(input)
stdout_handle.readline() #gets the processed input
</snippet></ROW><ROW><id>13606826</id><snippet>fileno</snippet></ROW><ROW><id>13606826</id><snippet>1..24</snippet></ROW><ROW><id>13606826</id><snippet>range</snippet></ROW><ROW><id>13606826</id><snippet>fileno = 1    
while fileno &lt; 24:
  #  do stuff
  # just remember to increment at the end, you control when the loop returns
  fileno += 1
</snippet></ROW><ROW><id>13606898</id><snippet>df.groupby(['p1', 'p2']).mean()
</snippet></ROW><ROW><id>13606898</id><snippet>df.groupby(['p1', 'p2']).mean()['result'].reset_index()
</snippet></ROW><ROW><id>13607111</id><snippet>subprocess</snippet></ROW><ROW><id>13607111</id><snippet>multiprocessing</snippet></ROW><ROW><id>13607111</id><snippet>threading</snippet></ROW><ROW><id>13607111</id><snippet>multiprocessing</snippet></ROW><ROW><id>13607520</id><snippet>${request.static_url('/data/uploads/a_named_file')}
</snippet></ROW><ROW><id>13607520</id><snippet>static</snippet></ROW><ROW><id>13607520</id><snippet>/data/uploads</snippet></ROW><ROW><id>13607520</id><snippet>myapp</snippet></ROW><ROW><id>13607544</id><snippet>\</snippet></ROW><ROW><id>13607544</id><snippet>{}</snippet></ROW><ROW><id>13607544</id><snippet>import re
from pprint import pprint

info = {}
records = []
with open('stats4.txt') as data:
    for line in data:
        gameid = [item.strip('[') for item in line.split(']')]
        del gameid[-1]
        gameidstr = ''.join(gameid)
        gameid = gameidstr
        line = line[7:]
        player, stats, outcome, date = [item.strip() for item in line.split('-', 3)]
        stats = dict(zip(('kills', 'deaths', 'assists'), map(int, stats.split('/'))))
        date = tuple(map(int, date.split('-')))
        info[player] = dict(zip(('gameid', 'player', 'stats', 'outcome', 'date'),
                                (gameid, player, stats, outcome, date)))
        records.append(tuple((gameid, info[player])))

#print "\n\n", info, "\n\n" #print the info dictionary just to see
pprint(info)
champ = raw_input("Champ's name: ") #get champion name
#print info[champ].get('stats').get('kills'), "\n\n"
#print "[%s] %s - %s/%s/%s - %s-%s-%s" % (
#       info[champ].get('gameid'), champ, info[champ].get('stats').get('kills'),
#       info[champ].get('stats').get('deaths'), info[champ].get('stats').get('assists'),
#       info[champ].get('date')[0], info[champ].get('date')[1],
#       info[champ].get('date')[2])
#print "\n\n"
#print info[champ].values()

i = 0
for item in records: #this prints out all records
    print "\n", "[%s] %s - %s/%s/%s - %s - %s-%s-%s" % (
                 records[i][0], records[i][1]['player'], records[i][1]['stats']['kills'],
                 records[i][1]['stats']['deaths'], records[i][1]['stats']['assists'],
                 records[i][1]['outcome'], records[i][1]['date'][0],
                 records[i][1]['date'][1], records[i][1]['date'][2])
    i = i + 1

print "\n" + "*" * 50
i = 0
search = []
for item in records:
    if champ in records[i][1]['player']:
        search.append(records[i][1])
    i = i + 1
if not search:
    print "no match"
    exit()

s = 0
for item in search:
        print "\n[%s] %s - %s/%s/%s - %s - %s-%s-%s" % (search[s]['gameid'],
              search[s]['player'], search[s]['stats']['kills'],
              search[s]['stats']['deaths'], search[s]['stats']['assists'],
              search[s]['outcome'], search[s]['date'][0], search[s]['date'][1],
              search[s]['date'][2])
        s = s + 1
</snippet></ROW><ROW><id>13607654</id><snippet>import pylab as plt

xs = [1, 2, 1, 4, 3, 2]
ys = [1, 3, 2, 2, 3, 1]
labels = [1, 1, 0, 2, 1, 3]

label_dict = {0: 'r', 1: 'k', 2: 'b', 3: 'g'}
legend_dict = {0: 'foo', 1: 'bar', 2: 'baz', 3: 'biff'}

seen = set()
for x, y, label in zip(xs, ys, labels):
    if label not in seen:
        plt.scatter(x, y, c=label_dict.get(label), label=legend_dict.get(label))
    else:
        plt.scatter(x, y, c=label_dict.get(label))
    seen.add(label)

plt.legend()
plt.show()
</snippet></ROW><ROW><id>13607654</id><snippet>seen = set()
for x, y, label in zip(xs, ys, labels):
    plt.scatter(x, y, c=label_dict.get(label), label=legend_dict.get(label) if label not in seen else None)
    seen.add(label)
</snippet></ROW><ROW><id>13607654</id><snippet>plot</snippet></ROW><ROW><id>13607654</id><snippet>import numpy as np
import pylab as plt

xs = [1, 2, 1, 4, 3, 2]
ys = [1, 3, 2, 2, 3, 1]
labels = [1, 1, 0, 2, 1, 3]

xs = np.array(xs)
ys = np.array(ys)
labels = np.array(labels)

labels_masks =( (x,(labels == x)) for x in set(labels))
data_dict = dict( (lbl,(xs[mask],ys[mask])) for lbl,mask in labels_masks )


label_dict = {0: 'r', 1: 'k', 2: 'b', 3: 'g'}
legend_dict = {0: 'foo', 1: 'bar', 2: 'baz', 3: 'biff'}

for label,data in data_dict.items():
    x,y = data
    plt.scatter(x,y,c=label_dict.get(label),label=legend_dict.get(label))

plt.legend()
plt.show()
</snippet></ROW><ROW><id>13607810</id><snippet>celldict</snippet></ROW><ROW><id>13607810</id><snippet>json.dumps({'success': True, 'data': celldict.values()})
</snippet></ROW><ROW><id>13607810</id><snippet>Week</snippet></ROW><ROW><id>13607810</id><snippet>celldict</snippet></ROW><ROW><id>13607810</id><snippet>for d in celldict.itervalues():
    celldict['Week'] = '1238'
</snippet></ROW><ROW><id>13607810</id><snippet>json.dumps({'success': True, 'data': [dict(d, Week='1238') for d in celldict.values()]})
</snippet></ROW><ROW><id>13607810</id><snippet>&gt;&gt;&gt; print json.dumps({'success': True, 'data': [dict(d, Week='1238') for d in celldict.values()]}, indent=4)
{
    "data": [
        {
            "OUT3FA_5": 24, 
            "Week": "1238", 
            "Total_IN1": 22, 
            "IN1": 59
        }, 
        {
            "OUT3FA_5": 12, 
            "Week": "1238", 
            "Total_IN1": 37, 
            "IN1": 37
        }
    ], 
    "success": true
}
</snippet></ROW><ROW><id>13607810</id><snippet>1224</snippet></ROW><ROW><id>13607810</id><snippet>1225</snippet></ROW><ROW><id>13607810</id><snippet>json.dumps({'success': True, 'data': [dict(d, Week=k) for k, d in celldict.iteritems()]})
</snippet></ROW><ROW><id>13607810</id><snippet>{
    "data": [
        {
            "OUT3FA_5": 24, 
            "Week": "1225", 
            "Total_IN1": 22, 
            "IN1": 59
        }, 
        {
            "OUT3FA_5": 12, 
            "Week": "1224", 
            "Total_IN1": 37, 
            "IN1": 37
        }
    ], 
    "success": true
}
</snippet></ROW><ROW><id>13607844</id><snippet>CallPolicy</snippet></ROW><ROW><id>13607844</id><snippet>Container</snippet></ROW><ROW><id>13607844</id><snippet>Iterator</snippet></ROW><ROW><id>13607844</id><snippet>CallPolicy</snippet></ROW><ROW><id>13607844</id><snippet>// This policy is used for methods returning items that require object to be
// kept as long as return thing is alive.
// It stores reference in attribute named Property_::name
template &lt;typename Property_, class BasePolicy_ = boost::python::default_call_policies&gt;
struct store_parent_reference: public BasePolicy_
{
    template &lt;class ArgumentPackage&gt;
    static PyObject* postcall(ArgumentPackage const&amp; args_, PyObject* result)
    {
        result = BasePolicy_::postcall(args_, result);

        PyObject* parent = detail::get_prev&lt; std::size_t(1) &gt;::execute(args_, result);
        PyObject* child = result;

        if( PyObject_SetAttrString( child, Property_::name, parent ) == -1 )
        {
            std::ostringstream err;
            err &lt;&lt; "store_parent_reference::postcall could not set attribute `"                    &lt;&lt; Property_::name
                &lt;&lt; "` on newly allocated object `"
                &lt;&lt; extract&lt;std::string&gt;( object( handle&lt;&gt;(borrowed(child))).attr("__str__")() )()
                &lt;&lt; "`";
            throw std::runtime_error(err.str());
        }



        return result;
    }
};


// This policy is used for methods returning "sibling" in the meaning both the returned object
// and one that has this method called on require "parent" object to be alive.
//
// It copies reference to "parent" to attribute named ChildProperty_::name
// from "original" object's attribute named SiblingProperty_::name
template &lt;typename ChildProperty_, typename SiblingProperty_ = ChildProperty_, class BasePolicy_ = boost::python::default_call_policies&gt;
struct copy_parent_from_sibling: public BasePolicy_
{
    template &lt;class ArgumentPackage&gt;
    static PyObject* postcall(ArgumentPackage const&amp; args_, PyObject* result)
    {
        result = BasePolicy_::postcall(args_, result);

        PyObject* sibling = detail::get_prev&lt; std::size_t(1) &gt;::execute(args_, result);
        PyObject* new_child = result;

        PyObject* parent = PyObject_GetAttrString( sibling, SiblingProperty_::name );

        if( parent == NULL )
        {
            std::ostringstream err;
            err &lt;&lt; "copy_parent_from_sibling::postcall could not get attribute `"
                &lt;&lt; SiblingProperty_::name
                &lt;&lt; "` from sibling `"
                &lt;&lt; extract&lt;std::string&gt;( object( handle&lt;&gt;(borrowed(sibling))).attr("__str__")() )()
                &lt;&lt; "` to set up attribute `"
                &lt;&lt; ChildProperty_::name
                &lt;&lt; "` of returned object which is `"
                &lt;&lt; extract&lt;std::string&gt;( object( handle&lt;&gt;(borrowed(new_child))).attr("__str__")() )()
                &lt;&lt; "`";
            throw std::runtime_error(err.str());
        }

        if( PyObject_SetAttrString( new_child, ChildProperty_::name, parent ) == -1 )
        {
            std::ostringstream err;
            err &lt;&lt; "copy_parent_from_sibling::postcall could not set attribute `"
                &lt;&lt; ChildProperty_::name
                &lt;&lt; "` on returned object which is `"
                &lt;&lt; extract&lt;std::string&gt;( object( handle&lt;&gt;(borrowed(new_child))).attr("__str__")() )()
                &lt;&lt; "`";
            throw std::runtime_error(err.str());
        }

        Py_DECREF(parent);

        return result;
    }
};
</snippet></ROW><ROW><id>13607844</id><snippet>struct ContainerProperty {
    static const char * const name;
};
const char * const ContainerProperty::name = "__container"

class_&lt;Container&gt;("Container", ...)
    .def("__iter__", &amp;Container::__iter__, store_parent_reference&lt; ContainerProperty &gt;() )
;

class_&lt;Iterator&gt;("Iterator", ...)
    .def("next", &amp;Iterator::__next__, copy_parent_from_sibling&lt; ContainerProperty &gt;() )
;

class_&lt;Item&gt;("Item", ...)
;
</snippet></ROW><ROW><id>13607844</id><snippet>boost::python</snippet></ROW><ROW><id>13607844</id><snippet>store_parent_reference</snippet></ROW><ROW><id>13607844</id><snippet>return_internal_reference</snippet></ROW><ROW><id>13607844</id><snippet>copy_parent_from_sibling</snippet></ROW><ROW><id>13608095</id><snippet>import glob
import os.path
import shutil
files_dirs = glob.glob(r'C:\Users\vanstrie\Desktop\ntnu\SCHEMA\2012\07_paper\results\*')
for d in files_dirs:
    head,tail = os.path.split(d)
    try:
        if (0 &lt; int(tail) &lt; 41) and (len(tail) == 3):  #don't want to delete `\results\3\onsets` I guess...
           print("about to delete:",d)
           shutil.rmtree(os.path.join(d,'onsets'),ignore_errors=True)
    except ValueError:  #apparently we got a non-integer.  Leave that directory.
        pass
</snippet></ROW><ROW><id>13608179</id><snippet>foods = { 1 : ("Snickers", "One size", 1200, 100) }
</snippet></ROW><ROW><id>13608179</id><snippet>for code, (name, size, calories, cents) in foods.iteritems():
    print "%s \t %s \t %s \t %s \t %s " % (code, name, size, calories, cents) 
</snippet></ROW><ROW><id>13608179</id><snippet>orders = []
orders.append((code, number))
</snippet></ROW><ROW><id>13608179</id><snippet>orders = {}
orders[code] = number
</snippet></ROW><ROW><id>13608179</id><snippet>food</snippet></ROW><ROW><id>13608179</id><snippet>dict</snippet></ROW><ROW><id>13608205</id><snippet>for i, i_list  in [(a, a_list), (b, b_list)]:
    if i == arg:
        if arg not in i_list:
            do_something(arg)
        break
else:
    do_something_else(arg)
</snippet></ROW><ROW><id>13608205</id><snippet>a</snippet></ROW><ROW><id>13608205</id><snippet>a_list</snippet></ROW><ROW><id>13608205</id><snippet>b</snippet></ROW><ROW><id>13608205</id><snippet>b_list</snippet></ROW><ROW><id>13608205</id><snippet>for....else</snippet></ROW><ROW><id>13608205</id><snippet>a, b, a_list, b_list</snippet></ROW><ROW><id>13608205</id><snippet>d[a] = a_list</snippet></ROW><ROW><id>13608205</id><snippet>for k, v  in d.items():
    if k == arg:
        if arg not in v:
            do_something(arg)
        break
else:
    do_something_else(arg)
</snippet></ROW><ROW><id>13608205</id><snippet>a</snippet></ROW><ROW><id>13608205</id><snippet>b</snippet></ROW><ROW><id>13608455</id><snippet>for person in json.loads(user_stream):
    if person['name'] == user:
        id = person['id']
        break
else:
    # The else branch is only ever reached if no match was found
    raise ValueError('No such person')
</snippet></ROW><ROW><id>13608455</id><snippet>dict</snippet></ROW><ROW><id>13608455</id><snippet>name_to_id = {p['name']: p['id'] for p in json.loads(user_stream)}
</snippet></ROW><ROW><id>13608455</id><snippet>id</snippet></ROW><ROW><id>13608455</id><snippet>id = name_to_id.get(name)  # if name is not found, id will be None
</snippet></ROW><ROW><id>13608455</id><snippet>from collections import defaultdict

name_to_id = defaultdict(list)
for person in json.loads(user_stream):
    name_to_id[person['name']).append(person['id'])

# lookup
ids = name_to_id.get(name, [])  # list of ids, defaults to empty
</snippet></ROW><ROW><id>13608606</id><snippet>import ftplib
import traceback

n="name of upload"
ftp = ftplib.FTP()
ftp.connect("website.com", "21")
print ftp.getwelcome()
try:
    try:
    ftp.login("user", "password")
    ftp.cwd("public_html/test")
    f = open("test.JPG", "rb")
    name= str(n)+".jpg"
    ftp.storbinary('STOR ' + name, f)
    f.close()
finally:
    ftp.quit()
except:
    traceback.print_exc()
</snippet></ROW><ROW><id>13608648</id><snippet>stackplot</snippet></ROW><ROW><id>13608648</id><snippet>&gt;&gt;&gt; a=[0,3,6]
&gt;&gt;&gt; b=[0,3,4]
&gt;&gt;&gt; c=[1, 7]
&gt;&gt;&gt; 
&gt;&gt;&gt; x = [0,1,3,4,6,7]
&gt;&gt;&gt; 
&gt;&gt;&gt; ya = []
&gt;&gt;&gt; 
&gt;&gt;&gt; val = 0
&gt;&gt;&gt; for i in x:
...     if i in a:
...         val += 1
...         ya.append(val)
...     else:
...         ya.append(val)
... 
&gt;&gt;&gt; ya
[1, 1, 2, 2, 3, 3]
</snippet></ROW><ROW><id>13608779</id><snippet>WSGIPythonPath C:/Users/ShabeerSheffa/workspace/ApacheDemo

&lt;VirtualHost apachedemo.com:8888&gt;
    ServerName apachedemo.com
    WSGIScriptAlias / C:/Users/ShabeerSheffa/workspace/ApacheDemo/ApacheDemo/wsgi.py

    &lt;Directory C:/Users/ShabeerSheffa/workspace/ApacheDemo&gt;
        &lt;Files wsgi.py&gt;
            Order deny,allow
            Allow from all
        &lt;/Files&gt;
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;

&lt;VirtualHost apachedemo2.com:8888&gt;
    ServerName apachedemo2.com
    WSGIScriptAlias / C:/Users/ShabeerSheffa/workspace/ApacheDemo/apachedemo2/wsgi.py

    &lt;Directory C:/Users/ShabeerSheffa/workspace/ApacheDemo&gt;
        &lt;Files wsgi.py&gt;
            Order deny,allow
            Allow from all
        &lt;/Files&gt;
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>13608959</id><snippet>&gt;&gt;&gt; def foo(s):
...     return id(s)
...
&gt;&gt;&gt; x = 'blah'
&gt;&gt;&gt; id(x) == foo(x)
True
</snippet></ROW><ROW><id>13608959</id><snippet>&gt;&gt;&gt; def bar(s):
...     return s + '!'
...
&gt;&gt;&gt; x = 'blah'
&gt;&gt;&gt; x = bar(x)
&gt;&gt;&gt; x
'blah!'
</snippet></ROW><ROW><id>13609124</id><snippet>lxml</snippet></ROW><ROW><id>13609124</id><snippet>lxml</snippet></ROW><ROW><id>13609124</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>13609124</id><snippet>data/song</snippet></ROW><ROW><id>13609124</id><snippet>data</snippet></ROW><ROW><id>13609124</id><snippet>{*}</snippet></ROW><ROW><id>13609124</id><snippet>from lxml import etree

tree = etree.parse(URL)  # lxml can load URLs for you
songs = tree.findall('{*}song')
for song in songs:
    print song.attrib['title']
</snippet></ROW><ROW><id>13609124</id><snippet>{*}</snippet></ROW><ROW><id>13609124</id><snippet>.nsmap</snippet></ROW><ROW><id>13609124</id><snippet>tree</snippet></ROW><ROW><id>13609124</id><snippet>namespace = tree.nsmap[None]
songs = tree.findall('{%s}song' % namespace)
</snippet></ROW><ROW><id>13609190</id><snippet>BufAdd</snippet></ROW><ROW><id>13609190</id><snippet>BufWinEnter</snippet></ROW><ROW><id>13609190</id><snippet>au BufWinEnter * call My_dir(expand("&lt;afile&gt;"))
</snippet></ROW><ROW><id>13609242</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.category(u'\u0803')
'Lo'
&gt;&gt;&gt; unicodedata.name(u'\u0803')
'SAMARITAN LETTER DALAT'
&gt;&gt;&gt; unicodedata.category(u'\u03CF')
'Lu'
&gt;&gt;&gt; unicodedata.name(u'\u03CF')
'GREEK CAPITAL KAI SYMBOL'
</snippet></ROW><ROW><id>13609712</id><snippet>foo_parser = subparsers.add_parser('foo', aliases=['f'])
</snippet></ROW><ROW><id>13609740</id><snippet>__import__</snippet></ROW><ROW><id>13609740</id><snippet>import sys
print sys.argv
module = __import__(sys.argv[1])
print module.__file__ 
</snippet></ROW><ROW><id>13609752</id><snippet>./his2xyz.py HISTORY the_output_file.xyz
</snippet></ROW><ROW><id>13610112</id><snippet>{
    "cmd": ["/opt/local/bin/python", "-u", "$file"],
    "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
    "selector": "source.python"
}
</snippet></ROW><ROW><id>13610179</id><snippet>upload_to='uploaded_images/%Y/%m/%d',
</snippet></ROW><ROW><id>13610179</id><snippet>http://site/admin/auth/user</snippet></ROW><ROW><id>13610179</id><snippet>&lt;a href="uploaded_images/2012/11/28/file.ext"&gt;Anchor&lt;/a&gt;
</snippet></ROW><ROW><id>13610179</id><snippet>http://site/admin/auth/user/uploaded_images/2012/11/28/file.ext
</snippet></ROW><ROW><id>13610179</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>13610179</id><snippet>MEDIA_URL = '/media/' (the slash at the beginning points to the domain root)
</snippet></ROW><ROW><id>13610179</id><snippet>MEDIA_URL = 'http://domain/media/' (might be redundant)
</snippet></ROW><ROW><id>13610228</id><snippet>s1 == {'0': s2}</snippet></ROW><ROW><id>13610228</id><snippet>s2 == {'0': s1}</snippet></ROW><ROW><id>13610228</id><snippet>s1 == s2</snippet></ROW><ROW><id>13610228</id><snippet>s1 == s2 --&gt; s1['0'] == s2['0'] --&gt; s2 == s1 --&gt; s2['0'] == s1['0'] --&gt; s1 == s2 --&gt; ...
</snippet></ROW><ROW><id>13610228</id><snippet>s1 in [s2]</snippet></ROW><ROW><id>13610228</id><snippet>s2 in [s1]</snippet></ROW><ROW><id>13610228</id><snippet>current in fsm["accepting"]</snippet></ROW><ROW><id>13610228</id><snippet>current in fsm["accepting"]</snippet></ROW><ROW><id>13610228</id><snippet>any(s is current for s in fsm["accepting"])
</snippet></ROW><ROW><id>13610228</id><snippet>states = {"s1": {"0": "s2", "1": "s1"},
          "s2": {"0": "s1", "1": "s2"}}
machine = {"start": "s1", "accepting": ["s1"]}

def recognize(fsm, in_string):
    return do_recognize(fsm, fsm["start"], in_string)

def do_recognize(fsm, current, in_string):
    if len(in_string) == 0:
        return current in fsm["accepting"]
    return do_recognize(fsm, states[current][in_string[0]], in_string[1:])
</snippet></ROW><ROW><id>13610322</id><snippet>import</snippet></ROW><ROW><id>13610322</id><snippet>__all__</snippet></ROW><ROW><id>13610322</id><snippet>__init__</snippet></ROW><ROW><id>13610322</id><snippet>import scapy.all</snippet></ROW><ROW><id>13610322</id><snippet>from scapy import all</snippet></ROW><ROW><id>13610322</id><snippet>from scapy.all import</snippet></ROW><ROW><id>13610322</id><snippet>sys.modules</snippet></ROW><ROW><id>13610322</id><snippet>import</snippet></ROW><ROW><id>13610322</id><snippet>scapy.py</snippet></ROW><ROW><id>13610322</id><snippet>import scapy</snippet></ROW><ROW><id>13610322</id><snippet>all</snippet></ROW><ROW><id>13610341</id><snippet>str()</snippet></ROW><ROW><id>13610341</id><snippet>str()</snippet></ROW><ROW><id>13610341</id><snippet>str()</snippet></ROW><ROW><id>13610341</id><snippet>b''</snippet></ROW><ROW><id>13610341</id><snippet>str()</snippet></ROW><ROW><id>13610341</id><snippet>str()</snippet></ROW><ROW><id>13610341</id><snippet>def f(o, encoding=None, errors=None):
    if encoding is None and errors is None:
        return o.__str__()

    if isinstance(o, str):
        raise TypeError('decoding str is not supported')

    if not isinstance(o, (bytes, bytesarray)):
        raise TypeError('coercing to str: need bytes, bytearray'
             'or buffer-like object, %s found' % type(o).__name__)
    return o.decode(encoding, errors)
</snippet></ROW><ROW><id>13610392</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = [[[ ['green', 'blue', 'red' ] ]]]
&gt;&gt;&gt; print np.squeeze(a)
['green' 'blue' 'red']
</snippet></ROW><ROW><id>13610392</id><snippet>squeeze()</snippet></ROW><ROW><id>13610529</id><snippet>day_dictionary={'mon':0,'tues':0,'wed':0,'thurs':0,'fri':0,'sat':0,'sun':0}
for i in random_day_list:
     for position, day in enumerate(i):
         if day in day_dictionary:
             day_dictionary[day] += (6 - position)
</snippet></ROW><ROW><id>13610699</id><snippet>group_id = Group.objects.get(id=1)
</snippet></ROW><ROW><id>13610699</id><snippet>group_id</snippet></ROW><ROW><id>13610699</id><snippet>Group</snippet></ROW><ROW><id>13610699</id><snippet>Group</snippet></ROW><ROW><id>13610699</id><snippet>name</snippet></ROW><ROW><id>13610699</id><snippet>permissions</snippet></ROW><ROW><id>13610699</id><snippet>group_id.groups.add(new_user)
</snippet></ROW><ROW><id>13610699</id><snippet>groups</snippet></ROW><ROW><id>13610699</id><snippet>User</snippet></ROW><ROW><id>13610699</id><snippet>Group</snippet></ROW><ROW><id>13610699</id><snippet>new_user.groups.add(group_id)
</snippet></ROW><ROW><id>13610700</id><snippet>plt.plot(x, y1, label='Line One')
plt.plot(x, y2, label='Line Two')
plt.legend(loc='best')
</snippet></ROW><ROW><id>13610700</id><snippet>label</snippet></ROW><ROW><id>13610700</id><snippet>legend()</snippet></ROW><ROW><id>13610700</id><snippet>loc</snippet></ROW><ROW><id>13610827</id><snippet>In [4]: l = ['ESZ12', 'ESH13', 'ESM13', 'ESU13', 'ESZ13']

In [5]: print('(' + ', '.join('"%s"' % el for el in l) + ')')
("ESZ12", "ESH13", "ESM13", "ESU13", "ESZ13")
</snippet></ROW><ROW><id>13610851</id><snippet>readparam()</snippet></ROW><ROW><id>13610851</id><snippet>import re</snippet></ROW><ROW><id>13610851</id><snippet>readparam()</snippet></ROW><ROW><id>13610851</id><snippet>import re</snippet></ROW><ROW><id>13610851</id><snippet>libfun.py</snippet></ROW><ROW><id>13610851</id><snippet>master.py</snippet></ROW><ROW><id>13610851</id><snippet>re</snippet></ROW><ROW><id>13610851</id><snippet>master.py</snippet></ROW><ROW><id>13611079</id><snippet>with open('file.txt') as f:
for line in f:
  a, b, c = map(int, line.split())
</snippet></ROW><ROW><id>13611079</id><snippet> file                = open(filename)
 file_data           = file.readlines()
</snippet></ROW><ROW><id>13611079</id><snippet> file_data = ['23 33 45', '91 81 414', '28 0 4 ', '7 9 14', '8 9 17', '1 1 3', '38 19 84']
</snippet></ROW><ROW><id>13611079</id><snippet>  from numpy import fromstring
  data = [fromstring(i, dtype=float, sep=' ') for i in file_data ]
</snippet></ROW><ROW><id>13611102</id><snippet>s.stdout</snippet></ROW><ROW><id>13611102</id><snippet>repr()</snippet></ROW><ROW><id>13611102</id><snippet>print s.stdout</snippet></ROW><ROW><id>13611102</id><snippet>subprocess.call()</snippet></ROW><ROW><id>13611171</id><snippet>!=</snippet></ROW><ROW><id>13611171</id><snippet>if ":" in tag:
</snippet></ROW><ROW><id>13611209</id><snippet>for result in request.user.results.all():
    data.append(dict([(word.type.type, word. word) for word in result.word.all()]))
</snippet></ROW><ROW><id>13611209</id><snippet>zip</snippet></ROW><ROW><id>13611343</id><snippet>with open('file.txt') as f:
   for line in f:
      a, b, c = map(int, line.split())
      ...
</snippet></ROW><ROW><id>13611642</id><snippet>lambda</snippet></ROW><ROW><id>13611642</id><snippet>lambda</snippet></ROW><ROW><id>13611642</id><snippet>card</snippet></ROW><ROW><id>13611642</id><snippet>card</snippet></ROW><ROW><id>13611642</id><snippet>lambda</snippet></ROW><ROW><id>13611642</id><snippet>card</snippet></ROW><ROW><id>13611642</id><snippet>for card in [list of cards]</snippet></ROW><ROW><id>13611642</id><snippet>card</snippet></ROW><ROW><id>13611642</id><snippet>list of cards</snippet></ROW><ROW><id>13611642</id><snippet>card</snippet></ROW><ROW><id>13611642</id><snippet>for card in [list of card objects]:
    if card.attribute == test_condition:
        canvas.tag_bind(
            card.item, #this is the item id stored in the PlayingCard.item variable
            &lt;Event Sequence&gt;,
            lambda x, card = card: event_handler(card)
            )
</snippet></ROW><ROW><id>13611710</id><snippet>#:match-select cadr</snippet></ROW><ROW><id>13611710</id><snippet>regexp-match</snippet></ROW><ROW><id>13611710</id><snippet>(regexp-match* #rx"{(.*?)}" text #:match-select cadr)
</snippet></ROW><ROW><id>13611710</id><snippet>#:match-select</snippet></ROW><ROW><id>13611710</id><snippet>car</snippet></ROW><ROW><id>13611710</id><snippet>cadr</snippet></ROW><ROW><id>13611710</id><snippet>caddr</snippet></ROW><ROW><id>13611710</id><snippet>regexp-match*</snippet></ROW><ROW><id>13611749</id><snippet>defaults</snippet></ROW><ROW><id>13611749</id><snippet>get_or_create</snippet></ROW><ROW><id>13611749</id><snippet>defaults = {'added_by': request.user}
obj, created = SocialGroupMembers.objects.get_or_create(
        social_group=social_group, profile=profile, defaults=defaults)
</snippet></ROW><ROW><id>13612128</id><snippet>preview</snippet></ROW><ROW><id>13612128</id><snippet>completeopt</snippet></ROW><ROW><id>13612128</id><snippet>:set completeopt</snippet></ROW><ROW><id>13612128</id><snippet>completeopt=menu,preview</snippet></ROW><ROW><id>13612128</id><snippet>menu</snippet></ROW><ROW><id>13612128</id><snippet>preview</snippet></ROW><ROW><id>13612128</id><snippet>set completeopt-=preview
</snippet></ROW><ROW><id>13612128</id><snippet>                        *'completeopt'* *'cot'*
'completeopt' 'cot' string  (default: "menu,preview")
            global
            {not available when compiled without the
            |+insert_expand| feature}
            {not in Vi}
    A comma separated list of options for Insert mode completion
    |ins-completion|.  The supported values are:

       menu     Use a popup menu to show the possible completions.  The
            menu is only shown when there is more than one match and
            sufficient colors are available.  |ins-completion-menu|

       menuone  Use the popup menu also when there is only one match.
            Useful when there is additional information about the
            match, e.g., what file it comes from.

       longest  Only insert the longest common text of the matches.  If
            the menu is displayed you can use CTRL-L to add more
            characters.  Whether case is ignored depends on the kind
            of completion.  For buffer text the 'ignorecase' option is
            used.

       preview  Show extra information about the currently selected
            completion in the preview window.  Only works in
            combination with "menu" or "menuone".
</snippet></ROW><ROW><id>13612148</id><snippet>Unum</snippet></ROW><ROW><id>13612148</id><snippet>eval</snippet></ROW><ROW><id>13612148</id><snippet>from unum.units import * # Load a number of common units.
distance = 100*m
time = eval('9.683*s')
speed = distance / time
print(speed)
</snippet></ROW><ROW><id>13612148</id><snippet>eval</snippet></ROW><ROW><id>13612148</id><snippet>_</snippet></ROW><ROW><id>13612148</id><snippet>eval</snippet></ROW><ROW><id>13612148</id><snippet>*</snippet></ROW><ROW><id>13612148</id><snippet>*</snippet></ROW><ROW><id>13612148</id><snippet>import unum.units
safe_dict = dict((x,y) for x,y in unum.units.__dict__.items() if '__' not in x)
safe_dict['__builtins__'] = None

def convert(s):
    if '__' in s:
       raise ValueError("Won't do this with underscores...it's unsafe")
    return eval(s,safe_dict)
</snippet></ROW><ROW><id>13612148</id><snippet>__</snippet></ROW><ROW><id>13612192</id><snippet>is</snippet></ROW><ROW><id>13612192</id><snippet>==</snippet></ROW><ROW><id>13612192</id><snippet>if planet_type == "mineral":
</snippet></ROW><ROW><id>13612192</id><snippet>is</snippet></ROW><ROW><id>13612192</id><snippet>==</snippet></ROW><ROW><id>13612192</id><snippet>is</snippet></ROW><ROW><id>13612350</id><snippet>train</snippet></ROW><ROW><id>13612490</id><snippet>sys.exit()</snippet></ROW><ROW><id>13612490</id><snippet>SystemExit</snippet></ROW><ROW><id>13612490</id><snippet>thread.interrupt_main()</snippet></ROW><ROW><id>13612490</id><snippet>os._exit()</snippet></ROW><ROW><id>13612527</id><snippet>pydoc</snippet></ROW><ROW><id>13612527</id><snippet>    Python27\Lib\pydoc.py
</snippet></ROW><ROW><id>13612527</id><snippet>help</snippet></ROW><ROW><id>13612527</id><snippet>doc</snippet></ROW><ROW><id>13612527</id><snippet>render_doc</snippet></ROW><ROW><id>13612527</id><snippet>import sys
import pydoc

plainSysDoc = pydoc.plain((pydoc.render_doc(sys)))
print plainSysDoc
</snippet></ROW><ROW><id>13612527</id><snippet>pydoc sys
</snippet></ROW><ROW><id>13612759</id><snippet># new style method 1; unpack the axes
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, sharex=True, sharey=True)
ax1.plot(x)
</snippet></ROW><ROW><id>13612759</id><snippet># new style method 2; use an axes array
fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)
axs[0,0].plot(x)
</snippet></ROW><ROW><id>13612759</id><snippet>matplotlib</snippet></ROW><ROW><id>13612759</id><snippet># old style
fig = plt.figure()
ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222, sharex=ax1, sharey=ax1)
ax3 = fig.add_subplot(223, sharex=ax1, sharey=ax1)
ax3 = fig.add_subplot(224, sharex=ax1, sharey=ax1)
</snippet></ROW><ROW><id>13612798</id><snippet>sim_test = Sim(host,user,password,database)
</snippet></ROW><ROW><id>13612798</id><snippet>__init__</snippet></ROW><ROW><id>13612798</id><snippet>#!/usr/bin/python
import MySQLdb

class Sim(object):
    def __init__(self, host, user, password, database):  #New method!!
        self.host = host
        self.user = user
        self.password = password
        self.database = database

    def print_db_parameters(self):
         print "Host = %s" %self.host
         print "User = %s" %self.user
         print "Password = %s" %self.password
         print "Database = %s" %self.database

def main():
    host = "localhost"
    user = "root"
    password = "root"
    database = "ARISTEIA_vax"
    sim_test = Sim(host,user,password,database)
    sim_test.print_db_parameters()

if __name__ == "__main__":
    main()   
</snippet></ROW><ROW><id>13613065</id><snippet>&gt;&gt;&gt; x = [1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; all(el==1 for el in x)
True
</snippet></ROW><ROW><id>13613065</id><snippet>all</snippet></ROW><ROW><id>13613065</id><snippet>all</snippet></ROW><ROW><id>13613065</id><snippet>&gt;&gt;&gt; x = [1, 0, 1, 1, 1, 0]
&gt;&gt;&gt; all(x)
False
</snippet></ROW><ROW><id>13613065</id><snippet>timeit</snippet></ROW><ROW><id>13613065</id><snippet>              all(el==1 for el in x): 0.0003 0.0008 0.7903 0.0804 0.0005 0.0006
                       x==[1]*len(x): 0.0002 0.0003 0.0714 0.0086 0.0045 0.0554
         not([1 for y in x if y!=1]): 0.0003 0.0005 0.4142 0.1117 0.1100 1.1630
                set(x).issubset({1}): 0.0003 0.0005 0.2039 0.0409 0.0476 0.5310
y = set(x); len(y)==1 and y.pop()==1:   WA   0.0006 0.2043 0.0517 0.0409 0.4170
                   max(x)==1==min(x):   RE   0.0006 0.4574 0.0460 0.0917 0.5466
                 tuple(set(x))==(1,):   WA   0.0006 0.2046 0.0410 0.0408 0.4238
not(bool(filter(lambda y: y!=1, x))):   WA     WA     WA   0.0004 0.0004 0.0004
                              all(x): 0.0001 0.0001 0.0839   WA   0.0001   WA  
</snippet></ROW><ROW><id>13613065</id><snippet>              all(el==1 for el in x): 0.0003 0.0008 0.7175 0.0751 0.0006 0.0006
                       x==[1]*len(x): 0.0002 0.0003 0.0741 0.0110 0.0094 0.1015
         not([1 for y in x if y!=1]): 0.0001 0.0003 0.3908 0.0948 0.0954 0.9840
                set(x).issubset({1}): 0.0003 0.0005 0.2084 0.0422 0.0420 0.4198
y = set(x); len(y)==1 and y.pop()==1:   WA   0.0006 0.2083 0.0421 0.0418 0.4178
                   max(x)==1==min(x):   RE   0.0006 0.4568 0.0442 0.0866 0.4937
                 tuple(set(x))==(1,):   WA   0.0006 0.2086 0.0424 0.0421 0.4202
not(bool(filter(lambda y: y!=1, x))): 0.0004 0.0011 0.9809 0.1936 0.1925 2.0007
                              all(x): 0.0001 0.0001 0.0811   WA   0.0001   WA  
</snippet></ROW><ROW><id>13613065</id><snippet>              all(el==1 for el in x): 0.0013 0.0093 0.4148 0.0508 0.0036 0.0038
                       x==[1]*len(x): 0.0006 0.0009 0.4557 0.0575 0.0177 0.1368
         not([1 for y in x if y!=1]): 0.0009 0.0015 175.10 7.0742 6.4390 714.15 # No, this wasn't run 1000 times. Had to time it separately.
                set(x).issubset({1}): 0.0010 0.0020 0.0657 0.0138 0.0139 0.1303
y = set(x); len(y)==1 and y.pop()==1:   WA   0.0011 0.0651 0.0137 0.0137 0.1296
                   max(x)==1==min(x):   RE   0.0011 0.5892 0.0615 0.1171 0.5994
                 tuple(set(x))==(1,):   WA   0.0014 0.0656 0.0163 0.0142 0.1302
not(bool(filter(lambda y: y!=1, x))): 0.0030 0.0081 0.2171 0.0689 0.0680 0.7599
                              all(x): 0.0011 0.0044 0.0230   WA   0.0013   WA  
</snippet></ROW><ROW><id>13613065</id><snippet>[] # True
[1]*6 # True
[1]*10000 # True
[1]*1000+[2]*1000 # False
[0]*1000+[1]*1000 # False
[random.randint(1, 2) for _ in range(20000)] # False
</snippet></ROW><ROW><id>13613065</id><snippet>WA</snippet></ROW><ROW><id>13613065</id><snippet>RE</snippet></ROW><ROW><id>13613065</id><snippet>x==[1]*len(x)</snippet></ROW><ROW><id>13613073</id><snippet>mile</snippet></ROW><ROW><id>13613073</id><snippet>&gt;&gt;&gt; "1" &lt; 100
False
&gt;&gt;&gt; "1" == 1
False
</snippet></ROW><ROW><id>13613073</id><snippet>elif</snippet></ROW><ROW><id>13613073</id><snippet>if</snippet></ROW><ROW><id>13613073</id><snippet>&lt; 300</snippet></ROW><ROW><id>13613073</id><snippet>&gt;=300</snippet></ROW><ROW><id>13613104</id><snippet>cursor.execute("INSERT INTO table VALUES ?", args)
</snippet></ROW><ROW><id>13613104</id><snippet>table</snippet></ROW><ROW><id>13613104</id><snippet>args</snippet></ROW><ROW><id>13613104</id><snippet>args="name; DELETE table"
</snippet></ROW><ROW><id>13613375</id><snippet>filenames = ['file1.txt', 'file2.txt', ...]
with open('path/to/output/file', 'w') as outfile:
    for fname in filenames:
        with open(fname) as infile:
            for line in infile:
                outfile.write(line)
</snippet></ROW><ROW><id>13613375</id><snippet>filenames = ['file1.txt', 'file2.txt', ...]
with open('path/to/output/file', 'w') as outfile:
    for fname in filenames:
        with open(fname) as infile:
            outfile.write(infile.read())
</snippet></ROW><ROW><id>13613375</id><snippet>filenames = ['file1.txt', 'file2.txt', ...]
with open('path/to/output/file', 'w') as outfile:
    for line in itertools.chain.from_iterable(itertools.imap(open, filnames)):
        outfile.write(line)
</snippet></ROW><ROW><id>13613503</id><snippet>from suds.plugin import MessagePlugin
from suds.sax.attribute import Attribute

class SoapFixer(MessagePlugin):
    def marshalled(self, context):
        # Alter the envelope so that the xsd namespace is allowed
        context.envelope.nsprefixes['xsd'] = 'http://www.w3.org/2001/XMLSchema'
        # Go through every node in the document and apply the fix function to patch up incompatible XML. 
        context.envelope.walk(self.fix_any_type_string)
    def fix_any_type_string(self, element):
        """Used as a filter function with walk in order to fix errors.
        If the element has a certain name, give it a xsi:type=xsd:int. Note that the nsprefix xsd must also
         be added in to make this work."""

        # Fix elements which have these names
        fix_names = ['Value', 'anotherelementname']
        if element.name in fix_names:
            element.attributes.append(Attribute('xsi:type', 'xsd:int'))


plugin=SoapFixer()
</snippet></ROW><ROW><id>13613503</id><snippet>client = suds.client.Client("http://127.0.0.1:8099/TagValueWriteService?wsdl",plugins=[plugin])
</snippet></ROW><ROW><id>13613627</id><snippet>v1 = V1Meta()

past_date = '2012-11-01'

query = (v1.Story
           .where(Number="S-01211")
           .asof('2012-11-01')
           .select('Number', 'Name', 'Owners.Name', 'Scope.Name')
        )

for story in query:
    print story.data['Scope.Name']   # prints current value
</snippet></ROW><ROW><id>13613668</id><snippet>keys()</snippet></ROW><ROW><id>13613668</id><snippet>__str__</snippet></ROW><ROW><id>13613668</id><snippet>print</snippet></ROW><ROW><id>13613668</id><snippet>keys()</snippet></ROW><ROW><id>13613668</id><snippet>__str__</snippet></ROW><ROW><id>13613668</id><snippet>"dict_keys"</snippet></ROW><ROW><id>13613668</id><snippet>In [1]: diff_dict = {'easy': 0.2, 'medium': 0.1, 'hard': 0.05}

In [2]: print('Here are the 3 possible choices:', diff_dict.keys())
Here are the 3 possible choices: dict_keys(['medium', 'hard', 'easy'])

In [3]: diff_dict.keys().__str__()
Out[3]: "dict_keys(['medium', 'hard', 'easy'])"
</snippet></ROW><ROW><id>13613668</id><snippet>str.join</snippet></ROW><ROW><id>13613668</id><snippet>In [4]: print('Here are the 3 possible choices:', ', '.join(diff_dict))
Here are the 3 possible choices: medium, hard, easy
</snippet></ROW><ROW><id>13613668</id><snippet>__str__</snippet></ROW><ROW><id>13613668</id><snippet>__str__</snippet></ROW><ROW><id>13613812</id><snippet>foo</snippet></ROW><ROW><id>13613812</id><snippet>with open('output.file','w') as f:
    f.write(foo)
</snippet></ROW><ROW><id>13613812</id><snippet>f</snippet></ROW><ROW><id>13613812</id><snippet>f</snippet></ROW><ROW><id>13613812</id><snippet>def unzip():
    os.chdir("C:/Users/Luke/Desktop/Cache")
    files = os.listdir(".")
    for x in (files):
        ifh = open((x), "rb")
        byte1 = ifh.read(1)
        byte2 = ifh.read(1)
        if byte1 == b'\x1f' and byte2 == b'\x8b':
            os.rename((x), (x) + ".gz")
            file = gzip.open((x), "rb")
            contents = file.read()   
            with open('output.file','w') as ofh:
                ofh.write(contents)
</snippet></ROW><ROW><id>13613847</id><snippet>str.replace()</snippet></ROW><ROW><id>13613847</id><snippet>&gt;&gt;&gt; str1 = "blah"
&gt;&gt;&gt; str2 = "new"
&gt;&gt;&gt; "testblah".replace(str1, str1+str2)
'testblahnew'
&gt;&gt;&gt; "testblahtest".replace(str1, str1+str2)
'testblahnewtest'
&gt;&gt;&gt; "test".replace(str1, str1+str2)
'test'
&gt;&gt;&gt; "blahtestblah".replace(str1, str1+str2)
'blahnewtestblahnew'
</snippet></ROW><ROW><id>13614199</id><snippet>import google</snippet></ROW><ROW><id>13614199</id><snippet>from __future__ import absolute_import
from .google import appengine # (or  from google import appengine)
</snippet></ROW><ROW><id>13614425</id><snippet>os.walk('.')</snippet></ROW><ROW><id>13614425</id><snippet>.</snippet></ROW><ROW><id>13614425</id><snippet>for</snippet></ROW><ROW><id>13614425</id><snippet>os.path.join(dirpath, filename)</snippet></ROW><ROW><id>13614425</id><snippet>os.stat(pathname)</snippet></ROW><ROW><id>13614425</id><snippet>stat</snippet></ROW><ROW><id>13614425</id><snippet>pathname</snippet></ROW><ROW><id>13614425</id><snippet>st_ctime</snippet></ROW><ROW><id>13614425</id><snippet>st_birthtime</snippet></ROW><ROW><id>13614425</id><snippet>starttime - create time &lt;= X * 60</snippet></ROW><ROW><id>13614617</id><snippet>Document.createTextNode()</snippet></ROW><ROW><id>13614617</id><snippet>Node.appendChild()</snippet></ROW><ROW><id>13614617</id><snippet>def setText(doc, node, newText):
    textnode = doc.createTextNode(newText)
    node.appendChild(textnode)
</snippet></ROW><ROW><id>13614617</id><snippet>doc</snippet></ROW><ROW><id>13614617</id><snippet>setText(doc, node, "textinsidetest2")
</snippet></ROW><ROW><id>13614617</id><snippet>makenode</snippet></ROW><ROW><id>13614617</id><snippet>test()</snippet></ROW><ROW><id>13614617</id><snippet>before: &lt;test&gt;&lt;test2/&gt;&lt;/test&gt;
after:  &lt;test&gt;&lt;test2&gt;textinsidetest2&lt;/test2&gt;&lt;/test&gt;
</snippet></ROW><ROW><id>13614853</id><snippet>dict.update</snippet></ROW><ROW><id>13614853</id><snippet>dict.update</snippet></ROW><ROW><id>13614853</id><snippet>[{'color': 'blue', 'kind': 'pencil', 'rating': 'high'}, {'season': 'winter'}, {'color': 'red', 'kind': 'truck', 'rating': 'low'},  {'season': 'spring'}]
</snippet></ROW><ROW><id>13614853</id><snippet>dict([(score, ResultForm.CHOICES[r.season][1])])
</snippet></ROW><ROW><id>13614853</id><snippet>{score: ResultForm.CHOICES[r.season][1]}
</snippet></ROW><ROW><id>13614853</id><snippet>for result in request.user.results.all():
    data.append(dict((str(word.type.type), str(word.word)) for word in result.word.all()))
    data[-1].update( {score: ResultForm.CHOICES[r.season][1]} )
</snippet></ROW><ROW><id>13614945</id><snippet>DictReader()</snippet></ROW><ROW><id>13614945</id><snippet>fruit_wanted = ['fruit'] + ["'%s'" % f for f in fruit_wanted.split(',')]
outfile = csv.DictWriter(open(outputfile, 'wb'), fields=fruit_wanted)
fruit_wanted = set(fruit_wanted)

for row in csv.DictReader(open(inputfile, 'rb')):
    row = {k: row[k] for k in row if k in fruit_wanted}
    outfile.writerow(row)
</snippet></ROW><ROW><id>13615090</id><snippet>print</snippet></ROW><ROW><id>13615090</id><snippet>print</snippet></ROW><ROW><id>13615090</id><snippet>print str(k), ",", str(j)</snippet></ROW><ROW><id>13615090</id><snippet>print</snippet></ROW><ROW><id>13615090</id><snippet>def foo(*args):
    return ' '.join(map(str, args))
</snippet></ROW><ROW><id>13615090</id><snippet>foo('a', 'b', 'c')</snippet></ROW><ROW><id>13615090</id><snippet>'a b c'</snippet></ROW><ROW><id>13615090</id><snippet>foo('a' + 'b' + 'c')</snippet></ROW><ROW><id>13615090</id><snippet>'abc'</snippet></ROW><ROW><id>13615090</id><snippet>'abc'</snippet></ROW><ROW><id>13615180</id><snippet>numpy</snippet></ROW><ROW><id>13615180</id><snippet>list</snippet></ROW><ROW><id>13615180</id><snippet>list</snippet></ROW><ROW><id>13615180</id><snippet>bitarray</snippet></ROW><ROW><id>13615180</id><snippet>bits3d = [[bitarray.bitarray(1000) for y in range(1000)] for x in range(1000)]
myvalue = bits3d[x][y][z]
</snippet></ROW><ROW><id>13615180</id><snippet>bits3d = bitarray.bitarray(1000*1000*1000)
myvalue = bits3d[x + y*1000 + z*1000*1000]
</snippet></ROW><ROW><id>13615180</id><snippet>bits3d = BitArray(1000, 1000, 1000)
myvalue = bits3d[x, y, z]
</snippet></ROW><ROW><id>13615180</id><snippet>class Jagged3DBitArray(object):
    def __init__(self, xsize, ysize, zsize):
        self.lll = [[bitarray(zsize) for y in range(ysize)] 
                    for x in range(xsize)]
    def __getitem__(self, key):
        x, y, z = key
        return self.lll[x][y][z]
    def __setitem__(self, key, value):
        x, y, z = key
        self.lll[x][y][z] = value

class Fixed3DBitArray(object):
    def __init__(self, xsize, ysize, zsize):
        self.xsize, self.ysize, self.zsize = xsize, ysize, zsize
        self.b = bitarray(xsize * ysize * zsize)
    def __getitem__(self, key):
        x, y, z = key
        return self.b[x + y * self.ysize + z * self.ysize * self.zsize]
    def __setitem__(self, key, value):
        x, y, z = key
        self.b[x + y * self.ysize + z * self.ysize * self.zsize] = value
</snippet></ROW><ROW><id>13615180</id><snippet>bitarray</snippet></ROW><ROW><id>13615180</id><snippet>list</snippet></ROW><ROW><id>13615180</id><snippet>numpy</snippet></ROW><ROW><id>13615186</id><snippet>my_byte_string.decode('utf-8')
</snippet></ROW><ROW><id>13615186</id><snippet>print (rc.so.decode('utf-8') + "\n",file=o)
</snippet></ROW><ROW><id>13615281</id><snippet>u</snippet></ROW><ROW><id>13615281</id><snippet>\u2013</snippet></ROW><ROW><id>13615281</id><snippet>–</snippet></ROW><ROW><id>13615281</id><snippet>–
-  # Notice how one is longer than the other
</snippet></ROW><ROW><id>13615353</id><snippet>if any("1" in str(x) for x in self.users):
   print "True"
</snippet></ROW><ROW><id>13615353</id><snippet>if any("1" == x.userID for x in self.users):
   print True
</snippet></ROW><ROW><id>13615353</id><snippet>User</snippet></ROW><ROW><id>13615353</id><snippet>ID</snippet></ROW><ROW><id>13615353</id><snippet>class User(object):
    def __eq__(self,other):
       return self.userID == other
   #other methods here
</snippet></ROW><ROW><id>13615353</id><snippet>__contains__</snippet></ROW><ROW><id>13615353</id><snippet>in</snippet></ROW><ROW><id>13615353</id><snippet>if "1" in self.users:
   print "True"
</snippet></ROW><ROW><id>13615440</id><snippet>In [9]: df[['cuepos', 'targetpos', 'soa']].drop_duplicates()
Out[9]: 
     cuepos  targetpos        soa
0         2          2   0.400000
1         2          1   0.400000
2         1          1  -0.100000
3         1          1   0.400000
4         1          2  -0.100000
5         1          1   0.100000
8         2          2  -0.100000
12        1          2   0.400000
18        2          2   0.100000
24        2          1  -0.100000
52       85         85  85.689698
77       -3         -3  -3.265563
117     -83        -83 -83.869535
133      11         11  11.225720
26      -88        -88 -88.206486
31      -48        -48 -48.634430
34       63         63  63.157160
55       85         85  85.841413
80      -61        -61 -61.812236
86      -61        -61 -61.891543
89       87         87  87.215989
92       80         80  80.226447
94       58         58  58.204967
126      71         71  71.912378
128      60         60  60.154749
132       8          8   8.476819
139      65         65  65.626850
141      54         54  54.554612
11      -61        -61 -61.800551
39      -33        -33 -33.771084
46       76         76  76.373127
52      -37        -37 -37.064064
55      -44        -44 -44.847510
60      -70        -70 -70.332081
62       61         61  61.735423
63       75         75  75.201113
69       58         58  58.845140
94      -79        -79 -79.815161
109     -29        -29 -29.062383
111     -51        -51 -51.356056
117     -83        -83 -83.879358
123      21         21  21.075946
135     -31        -31 -31.183030
143       6          6   6.928400
4       -17        -17 -17.511389
11       57         57  57.490227
18      -88        -88 -88.447288
36       78         78  78.397278
39      -14        -14 -14.673170
42       52         52  52.107845
49      -87        -87 -87.773396
50       60         60  60.495264
71       33         33  33.756600
74      -61        -61 -61.969217
84       18         18  18.548979
85       -8         -8  -8.475269
98      -59        -59 -59.815514
101     -80        -80 -80.384548
114     -39        -39 -39.031321
119      71         71  71.873576
121     -86        -86 -86.863720
128      68         68  68.729972
130     -34        -34 -34.233129
140      82         82  82.759221
0       -75        -75 -75.839334
15       67         67  67.326223
34      -57        -57 -57.679345
35      -74        -74 -74.535290
42      -48        -48 -48.026567
67       85         85  85.191812
75       72         72  72.877565
80       -7         -7  -7.484698
99       -9         -9  -9.389620
118     -44        -44 -44.208168
130      73         73  73.235472
143      58         58  58.442172
56       22         22  22.364050
67      -85        -85 -85.505145
95       60         60  60.621240
109      54         54  54.220262
111      87         87  87.809107
112     -81        -81 -81.435704
114      71         71  71.640124
119     -22        -22 -22.176304
120      27         27  27.977155
121      56         56  56.923978
128      57         57  57.820305
133      22         22  22.101345
11       61         61  61.882729
13       58         58  58.591805
28       57         57  57.156343
78      -80        -80 -80.706399
80       49         49  49.592969
81      -37        -37 -37.092464
101     -36        -36 -36.895517
124      17         17  17.272663
128      51         51  51.094356
137     -89        -89 -89.411393
140     -64        -64 -64.180244
36       -8         -8  -8.871026
44      -73        -73 -73.103972
47       -9         -9  -9.281091
49       -2         -2  -2.842961
51       87         87  87.608103
85       24         24  24.658481
90      -53        -53 -53.910388
98       82         82  82.385620
120      79         79  79.276744
127     -43        -43 -43.971857
130      13         13  13.949059
</snippet></ROW><ROW><id>13615500</id><snippet>all()</snippet></ROW><ROW><id>13615500</id><snippet>get_query_set</snippet></ROW><ROW><id>13615500</id><snippet>class TermsManager(models.Manager):
    def get_query_set(self):
        return super(TermsManager, self).get_query_set().filter(condition_here)
</snippet></ROW><ROW><id>13615500</id><snippet>all()</snippet></ROW><ROW><id>13615500</id><snippet>all()</snippet></ROW><ROW><id>13615500</id><snippet>use_for_related_fields = True</snippet></ROW><ROW><id>13615500</id><snippet>use_for_related_fields</snippet></ROW><ROW><id>13615500</id><snippet>class FilteredTermsManager(models.Manager):
    def get_query_set(self):
        return super(TermsManager, self).get_query_set().filter(condition_here)

class Term(models.Model):
    allTerms = models.Manger() # Establish this as the default/automatic manager
    objects = FilteredTermsManager()

    name = models.CharField(max_length=255)
</snippet></ROW><ROW><id>13615500</id><snippet>Term.allTerms.all()</snippet></ROW><ROW><id>13615500</id><snippet>Channel</snippet></ROW><ROW><id>13615500</id><snippet>Term</snippet></ROW><ROW><id>13615500</id><snippet>Object</snippet></ROW><ROW><id>13615617</id><snippet>elif event.type==pygame.MOUSEBUTTONDOWN and event.button==LEFT:
  print "You pressed the left mouse button at (%d,%d)" %event.pos
  screen.set_at((event.pos.x, event.pos.y), pygame.Color(255,0,0,255))
</snippet></ROW><ROW><id>13615664</id><snippet>if creative['Creative_Type'] == 'ImageCreative':
  for var in creative['creativeTemplateVariableValues']:
    ...
</snippet></ROW><ROW><id>13615802</id><snippet>ctypes</snippet></ROW><ROW><id>13615802</id><snippet>import ctypes
import time

SendInput = ctypes.windll.user32.SendInput

# C struct redefinitions 
PUL = ctypes.POINTER(ctypes.c_ulong)
class KeyBdInput(ctypes.Structure):
    _fields_ = [("wVk", ctypes.c_ushort),
                ("wScan", ctypes.c_ushort),
                ("dwFlags", ctypes.c_ulong),
                ("time", ctypes.c_ulong),
                ("dwExtraInfo", PUL)]

class HardwareInput(ctypes.Structure):
    _fields_ = [("uMsg", ctypes.c_ulong),
                ("wParamL", ctypes.c_short),
                ("wParamH", ctypes.c_ushort)]

class MouseInput(ctypes.Structure):
    _fields_ = [("dx", ctypes.c_long),
                ("dy", ctypes.c_long),
                ("mouseData", ctypes.c_ulong),
                ("dwFlags", ctypes.c_ulong),
                ("time",ctypes.c_ulong),
                ("dwExtraInfo", PUL)]

class Input_I(ctypes.Union):
    _fields_ = [("ki", KeyBdInput),
                 ("mi", MouseInput),
                 ("hi", HardwareInput)]

class Input(ctypes.Structure):
    _fields_ = [("type", ctypes.c_ulong),
                ("ii", Input_I)]

# Actuals Functions

def PressKey(hexKeyCode):

    extra = ctypes.c_ulong(0)
    ii_ = Input_I()
    ii_.ki = KeyBdInput( hexKeyCode, 0x48, 0, 0, ctypes.pointer(extra) )
    x = Input( ctypes.c_ulong(1), ii_ )
    SendInput(1, ctypes.pointer(x), ctypes.sizeof(x))

def ReleaseKey(hexKeyCode):

    extra = ctypes.c_ulong(0)
    ii_ = Input_I()
    ii_.ki = KeyBdInput( hexKeyCode, 0x48, 0x0002, 0, ctypes.pointer(extra) )
    x = Input( ctypes.c_ulong(1), ii_ )
    SendInput(1, ctypes.pointer(x), ctypes.sizeof(x))


def AltTab():
    '''
    Press Alt+Tab and hold Alt key for 2 seconds in order to see the overlay
    '''

    PressKey(0x012) #Alt
    PressKey(0x09) #Tab
    ReleaseKey(0x09) #~Tab

    time.sleep(2)       
    ReleaseKey(0x012) #~Alt


if __name__ =="__main__":

    AltTab()
</snippet></ROW><ROW><id>13615814</id><snippet>class UserProfileadmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == 'hub':
            kwargs['queryset'] = Airports.objects.filter(hub=True)
        return super(UserProfileadmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
</snippet></ROW><ROW><id>13616006</id><snippet>first_names = []
for n in names:
    first_names.append(n.split()[0])
</snippet></ROW><ROW><id>13616006</id><snippet>first_names = [n.split()[0] for n in names]
</snippet></ROW><ROW><id>13616006</id><snippet>first = lambda n : n.split()[0]
first_names = [first(name) for name in names]
</snippet></ROW><ROW><id>13616006</id><snippet>first = lambda n : n.split()[0]
first_names = map(first,names)
</snippet></ROW><ROW><id>13616006</id><snippet>from operator import itemgetter
first_names = map(itemgetter(0), map(str.split, names))
</snippet></ROW><ROW><id>13616006</id><snippet>time n0;time n1; time n2; time n3; time n4</snippet></ROW><ROW><id>13616006</id><snippet>real    0m8.433s
user    0m7.064s
sys     0m1.288s

real    0m8.213s
user    0m6.852s
sys     0m1.300s

real    0m8.581s
user    0m7.240s
sys     0m1.264s

real    0m8.374s
user    0m7.164s
sys     0m1.140s

real    0m11.890s
user    0m10.101s
sys     0m1.672s
</snippet></ROW><ROW><id>13616093</id><snippet>import numpy, scipy, scipy.ndimage, scipy.interpolate, numpy.fft, math

# create simple square
img = numpy.zeros( (10, 10) )
img[1:9, 1:9] = 1
img[2:8, 2:8] = 0

# find contour
x, y = numpy.nonzero(img)

# find center point and conver to polar coords
x0, y0 = numpy.mean(x), numpy.mean(y)
C = (x - x0) + 1j * (y - y0)
angles = numpy.angle(C)
distances = numpy.absolute(C)
sortidx = numpy.argsort( angles )
angles = angles[ sortidx ]
distances = distances[ sortidx ]

# copy first and last elements with angles wrapped around. needed so can interpolate over full range -pi to pi
angles = numpy.hstack(([ angles[-1] - 2*math.pi ], angles, [ angles[0] + 2*math.pi ]))
distances = numpy.hstack(([distances[-1]], distances, [distances[0]]))

# interpolate to evenly spaced angles
f = scipy.interpolate.interp1d(angles, distances)
angles_uniform = scipy.linspace(-math.pi, math.pi, num=100, endpoint=False) 
distances_uniform = f(angles_uniform)

# fft and inverse fft
fft_coeffs = numpy.fft.rfft(distances_uniform)
# zero out all but lowest 10 coefficients
fft_coeffs[11:] = 0
distances_fit = numpy.fft.irfft(fft_coefs)

# plot results
import matplotlib.pyplot as plt
plt.polar(angles, distances)
plt.polar(angles_uniform, distances_uniform)
plt.polar(angles_uniform, distances_fit)
plt.show()
</snippet></ROW><ROW><id>13616270</id><snippet>class SessionMiddleware(object):
    def process_request(self, request):
        engine = import_module(settings.SESSION_ENGINE)
        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME, None)
        request.session = engine.SessionStore(session_key)
</snippet></ROW><ROW><id>13616270</id><snippet>import mycustomsessionbackend as myengine

class MyCustomSessionMiddleware(object):
    def process_request(self, request):
        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME, None)
        request.session = myengine.SessionStore(session_key, request)

...

# mycustomsessionbackend.py
class SessionStore(SessionBase):
    def __init__(self, session_key=None, request=None):
        super(SessionStore, self).__init__(session_key)
        self.request = request
</snippet></ROW><ROW><id>13616272</id><snippet>while quantity &gt; 0:
</snippet></ROW><ROW><id>13616324</id><snippet>&gt;&gt;&gt; def abs_diff(x, y):
&gt;&gt;&gt;     return abs(x - y)
</snippet></ROW><ROW><id>13616324</id><snippet>&gt;&gt;&gt; df['Diff'] = abs_diff(df['S1'], df['S2'])

&gt;&gt;&gt; df

   S1  S2  Diff
A   1   4     3
B   5   5     0
C   0   6     6
</snippet></ROW><ROW><id>13616324</id><snippet>&gt;&gt;&gt; df['Diff']

A    3
B    0
C    6
Name: Diff
</snippet></ROW><ROW><id>13616324</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>13616382</id><snippet>In [9]: df['col1'][df['col1']&gt;=1]
Out[9]: 
1    1
2    2
Name: col1

In [10]: df[df['col1']&gt;=1]
Out[10]: 
   col1  col2
1     1    11
2     2    12

In [11]: df[(df['col1']&gt;=1)&amp;(df['col1']&lt;=1)]
Out[11]: 
   col1  col2
1     1    11
</snippet></ROW><ROW><id>13616382</id><snippet>In [11]: def b(x, col, op, n): 
    return op(x[col],n)

In [27]: def f(x, *b):
    return x[(np.logical_and(*b))]

In [30]: b1 = b(df, 'col1', ge, 1)

In [31]: b2 = b(df, 'col1', le, 1)

In [32]: f(df, b1, b2)
Out[32]: 
   col1  col2
1     1    11
</snippet></ROW><ROW><id>13616484</id><snippet>{}.get('test1',{}).get('test2','hrmm')</snippet></ROW><ROW><id>13616484</id><snippet>&gt;&gt;&gt; box = 1,
&gt;&gt;&gt; box
(1,)
&gt;&gt;&gt; type(box)
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>13616592</id><snippet>threading</snippet></ROW><ROW><id>13616592</id><snippet>multiprocessing</snippet></ROW><ROW><id>13616592</id><snippet>threading</snippet></ROW><ROW><id>13616592</id><snippet>import multiprocessing as something</snippet></ROW><ROW><id>13616592</id><snippet>import threading as something</snippet></ROW><ROW><id>13616697</id><snippet>trucks = {}
trucks['0300'] = ['a']
trucks['0300'].append('c')
trucks['0300'].extend(['c','d'])

aTruck = trucks['0300']
</snippet></ROW><ROW><id>13616697</id><snippet>from collections import defaultdict

trucks = defaultdict(list)
trucks['0300']
# []
</snippet></ROW><ROW><id>13616697</id><snippet>trucks = defaultdict(list)
trucks['0300'].append('a')
</snippet></ROW><ROW><id>13616697</id><snippet>defaultdict</snippet></ROW><ROW><id>13616697</id><snippet>max</snippet></ROW><ROW><id>13616697</id><snippet>d = {'a':10, 'b':5, 'c':50}
print max(d.iteritems(), key=lambda (k,v): v)
# ('c', 50)
d['c'] = 1
print max(d.iteritems(), key=lambda (k,v): v)
# ('a', 10)
</snippet></ROW><ROW><id>13616697</id><snippet>operator</snippet></ROW><ROW><id>13616697</id><snippet>from operator import itemgetter
...
print max(d.iteritems(), key=itemgetter(1))
#('c', 50)
</snippet></ROW><ROW><id>13616697</id><snippet>itemgetter</snippet></ROW><ROW><id>13616697</id><snippet>d = {'a': range(1,5), 'b': range(2,4), 'c': range(5,7)}
print max(d.iteritems(), key=lambda (k,v): sum(v))
# ('c', [5, 6])
</snippet></ROW><ROW><id>13616817</id><snippet>s = [ [0] * 4] * 4
</snippet></ROW><ROW><id>13616817</id><snippet>s = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
</snippet></ROW><ROW><id>13616817</id><snippet>&gt;&gt;&gt; s = [ [0] * 4] * 4
&gt;&gt;&gt; s
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; s[0][0] += 1
&gt;&gt;&gt; s
[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]
&gt;&gt;&gt; s = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; s
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; s[0][0] += 1
&gt;&gt;&gt; s
[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13616817</id><snippet>s = [ [0] * 4] * 4</snippet></ROW><ROW><id>13616817</id><snippet>v = [0]*4; s=[v,v,v,v]</snippet></ROW><ROW><id>13616824</id><snippet>current</snippet></ROW><ROW><id>13616824</id><snippet>while</snippet></ROW><ROW><id>13616824</id><snippet>numbers</snippet></ROW><ROW><id>13616824</id><snippet>current</snippet></ROW><ROW><id>13616824</id><snippet>while len(numbers) &gt; 0:
    current = numbers[0]
    print current
    primes.append(current)
    numbers.remove(current)
</snippet></ROW><ROW><id>13616951</id><snippet>'["CSO22"]'</snippet></ROW><ROW><id>13616951</id><snippet>body = {'hosts': ["CSO22"]}
</snippet></ROW><ROW><id>13617178</id><snippet>import subprocess

cmd = subprocess.Popen(['cd', '/home/time/tmprcc;', 'ino', 'build;',
                        'ino', 'upload;'], stdout=subprocess.PIPE)

while cmd.poll() is None:
    new_output = cmd.stdout.readline()
    do_something_function(new_output)
</snippet></ROW><ROW><id>13617414</id><snippet>collections.Counter</snippet></ROW><ROW><id>13617414</id><snippet>c = Counter(mylist)
duplicates = [ x for x,y in c.items() if y &gt; 1 ]
</snippet></ROW><ROW><id>13617414</id><snippet>O(n)</snippet></ROW><ROW><id>13617414</id><snippet>O(n)</snippet></ROW><ROW><id>13617414</id><snippet>O(2n) == O(n)</snippet></ROW><ROW><id>13617740</id><snippet>import re
a = " this is a demonstration sentence. "
print(re.sub(r'''(?x)      # VERBOSE mode
             (             # 
              ^            # start of string
              \s*          # zero-or-more whitespaces 
              \w           # followed by an alphanumeric character
              )        
             |             # OR
             (
             \w            # an alphanumeric character
             \S*           # zero-or-more non-space characters
             \s*           # zero-or-more whitespaces
             $             # end of string
             )
             ''',
             lambda m: m.group().title(),
             a))
</snippet></ROW><ROW><id>13617740</id><snippet> This is a demonstration Sentence. 
</snippet></ROW><ROW><id>13617803</id><snippet>for i in gridz:
    if i &lt; 16:
        Grid[i] = screen.blit(imgBlock, (i*spritesize,resmulti*56))
    elif i &gt; 15 and i &lt; 32:
        Grid[i] = screen.blit(imgBlock, ((i-16)*spritesize,spritesize+resmulti*56))
    ...
</snippet></ROW><ROW><id>13617803</id><snippet>for i in gridz:
     Grid[1] = screen.blitimgBlock(imgBlock, (i % 16) * spritesize, spritesize+resmulti*56))
</snippet></ROW><ROW><id>13617850</id><snippet>putenv('PYTHONPATH=x');
exec("/home/my_user_name/local/Python-2.7/bin/python test.py", $output, $ret_code);
</snippet></ROW><ROW><id>13617949</id><snippet>FILE_UPLOAD_HANDLER</snippet></ROW><ROW><id>13617949</id><snippet>("django.core.files.uploadhandler.MemoryFileUploadHandler",
 "django.core.files.uploadhandler.TemporaryFileUploadHandler",)
</snippet></ROW><ROW><id>13617949</id><snippet>form.save()</snippet></ROW><ROW><id>13617949</id><snippet>form</snippet></ROW><ROW><id>13617949</id><snippet>upload_to</snippet></ROW><ROW><id>13617949</id><snippet>form.save()</snippet></ROW><ROW><id>13617949</id><snippet>uploaded_file = request.FILES['file']
</snippet></ROW><ROW><id>13617949</id><snippet>request.FILES</snippet></ROW><ROW><id>13617949</id><snippet>form = MyModelFormWithFileField(request.POST, None)
</snippet></ROW><ROW><id>13617949</id><snippet>uploaded_file</snippet></ROW><ROW><id>13617949</id><snippet>form</snippet></ROW><ROW><id>13617949</id><snippet>request.FILES</snippet></ROW><ROW><id>13617949</id><snippet>form.save()</snippet></ROW><ROW><id>13618162</id><snippet>queryset.filter(EstEndTime__lte=now)
</snippet></ROW><ROW><id>13618162</id><snippet>EstEndTime</snippet></ROW><ROW><id>13618162</id><snippet>est_end_time</snippet></ROW><ROW><id>13618275</id><snippet>subprocess.call(["java", "-cp", "/home/me/somepath/file.jar", ..., "-someflag", "somevalue"])
</snippet></ROW><ROW><id>13618275</id><snippet>java -cp /home/me/somepath/file.jar ... "-someflag somevalue"
</snippet></ROW><ROW><id>13618333</id><snippet>add</snippet></ROW><ROW><id>13618333</id><snippet>remove</snippet></ROW><ROW><id>13618333</id><snippet>RLock</snippet></ROW><ROW><id>13618333</id><snippet>class LockProxy(object):
    def __init__(self, obj):
        self.__obj = obj
        self.__lock = RLock()
        # RLock because object methods may call own methods
    def __getattr__(self, name):
        def wrapped(*a, **k):
            with self.__lock:
                getattr(self.__obj, name)(*a, **k)
        return wrapped

lockedset = LockProxy(set([1,2,3]))
</snippet></ROW><ROW><id>13618333</id><snippet>class LockedSet(set):
    """A set where add() and remove() are thread-safe"""

    def __init__(self, *args, **kwargs):
        self._lock = Lock()
        super(LockedSet, self).__init__(*args, **kwargs)

    def add(self, elem):
        with self._lock:
            super(LockedSet, self).add(elem)

    def remove(self, elem):
        with self._lock:
            super(LockedSet, self).remove(elem)
</snippet></ROW><ROW><id>13618333</id><snippet>def locked_method(method):
    """Method decorator. Requires a lock object at self._lock"""
    def newmethod(self, *args, **kwargs):
        with self._lock:
            return method(self, *args, **kwargs)
    return newmethod

class DecoratorLockedSet(set):
    def __init__(self, *args, **kwargs):
        self._lock = Lock()
        super(DecoratorLockedSet, self).__init__(*args, **kwargs)

    @locked_method
    def add(self, *args, **kwargs):
        return super(DecoratorLockedSet, self).add(elem)

    @locked_method
    def remove(self, *args, **kwargs):
        return super(DecoratorLockedSet, self).remove(elem)
</snippet></ROW><ROW><id>13618333</id><snippet>def lock_class(methodnames, lockfactory):
    return lambda cls: make_threadsafe(cls, methodnames, lockfactory)

def lock_method(method):
    if getattr(method, '__is_locked', False):
        raise TypeError("Method %r is already locked!" % method)
    def locked_method(self, *arg, **kwarg):
        with self._lock:
            return method(self, *arg, **kwarg)
    locked_method.__name__ = '%s(%s)' % ('lock_method', method.__name__)
    locked_method.__is_locked = True
    return locked_method


def make_threadsafe(cls, methodnames, lockfactory):
    init = cls.__init__
    def newinit(self, *arg, **kwarg):
        init(self, *arg, **kwarg)
        self._lock = lockfactory()
    cls.__init__ = newinit

    for methodname in methodnames:
        oldmethod = getattr(cls, methodname)
        newmethod = lock_method(oldmethod)
        setattr(cls, methodname, newmethod)

    return cls


@lock_class(['add','remove'], Lock)
class ClassDecoratorLockedSet(set):
    @lock_method # if you double-lock a method, a TypeError is raised
    def frobnify(self):
        pass
</snippet></ROW><ROW><id>13618333</id><snippet>__getattribute__</snippet></ROW><ROW><id>13618333</id><snippet>class AttrLockedSet(set):
    def __init__(self, *args, **kwargs):
        self._lock = Lock()
        super(AttrLockedSet, self).__init__(*args, **kwargs)

    def __getattribute__(self, name):
        if name in ['add','remove']:
            # note: makes a new callable object "lockedmethod" on every call
            # best to add a layer of memoization
            lock = self._lock
            def lockedmethod(*args, **kwargs):
                with lock:
                    return super(AttrLockedSet, self).__getattribute__(name)(*args, **kwargs)
            return lockedmethod
        else:
            return super(AttrLockedSet, self).__getattribute__(name)
</snippet></ROW><ROW><id>13618333</id><snippet>__new__</snippet></ROW><ROW><id>13618333</id><snippet>class NewLockedSet(set):
    def __new__(cls, *args, **kwargs):
        # modify the class by adding new unbound methods
        # you could also attach a single __getattribute__ like above
        for membername in ['add', 'remove']:
            def scoper(membername=membername):
                # You can also return the function or use a class
                def lockedmethod(self, *args, **kwargs):
                    with self._lock:
                        m = getattr(super(NewLockedSet, self), membername)
                        return m(*args, **kwargs)
                lockedmethod.__name__ = membername
                setattr(cls, membername, lockedmethod)
        self = super(NewLockedSet, cls).__new__(cls, *args, **kwargs)
        self._lock = Lock()
        return self
</snippet></ROW><ROW><id>13618333</id><snippet>__metaclass__</snippet></ROW><ROW><id>13618333</id><snippet>def _lockname(classname):
    return '_%s__%s' % (classname, 'lock')

class LockedClass(type):
    def __new__(mcls, name, bases, dict_):
        # we'll bind these after we add the methods
        cls = None
        def lockmethodfactory(methodname, lockattr):
            def lockedmethod(self, *args, **kwargs):
                with getattr(self, lockattr):
                    m = getattr(super(cls, self), methodname)
                    return m(*args,**kwargs)
            lockedmethod.__name__ = methodname
            return lockedmethod
        lockattr = _lockname(name)
        for methodname in ['add','remove']:
            dict_[methodname] = lockmethodfactory(methodname, lockattr)
        cls = type.__new__(mcls, name, bases, dict_)
        return cls

    def __call__(self, *args, **kwargs):
        #self is a class--i.e. an "instance" of the LockedClass type
        instance = super(LockedClass, self).__call__(*args, **kwargs)
        setattr(instance, _lockname(self.__name__), Lock())
        return instance



class MetaLockedSet(set):
    __metaclass__ = LockedClass
</snippet></ROW><ROW><id>13618333</id><snippet>def LockedClassMetaFactory(wrapmethods):
    class LockedClass(type):
        def __new__(mcls, name, bases, dict_):
            # we'll bind these after we add the methods
            cls = None
            def lockmethodfactory(methodname, lockattr):
                def lockedmethod(self, *args, **kwargs):
                    with getattr(self, lockattr):
                        m = getattr(super(cls, self), methodname)
                        return m(*args,**kwargs)
                lockedmethod.__name__ = methodname
                return lockedmethod
            lockattr = _lockname(name)
            for methodname in wrapmethods:
                dict_[methodname] = lockmethodfactory(methodname, lockattr)
            cls = type.__new__(mcls, name, bases, dict_)
            return cls

        def __call__(self, *args, **kwargs):
            #self is a class--i.e. an "instance" of the LockedClass type
            instance = super(LockedClass, self).__call__(*args, **kwargs)
            setattr(instance, _lockname(self.__name__), Lock())
            return instance
    return LockedClass

class MetaFactoryLockedSet(set):
    __metaclass__ = LockedClassMetaFactory(['add','remove'])
</snippet></ROW><ROW><id>13618333</id><snippet>try...finally</snippet></ROW><ROW><id>13618333</id><snippet>Lock()</snippet></ROW><ROW><id>13618381</id><snippet>content.decode('utf-8')</snippet></ROW><ROW><id>13618381</id><snippet>content.decode('utf-8-sig')
</snippet></ROW><ROW><id>13618381</id><snippet>pdftotext</snippet></ROW><ROW><id>13618705</id><snippet>In [7]: [['13/03/2012', ['a']], ['13/03/2012', ['b', 'c', 'd']], ['13/03/2012', ['e', 'f']], ['26/03/2012', ['f']], ['02/04/2012', ['a']], ['09/04/2012', ['b']]]

In [8]: d= {}

In [9]: for item in l:
   ...:     if d.has_key(item[0]):
   ...:         d[item[0]].extend(item[1])
   ...:     else:
   ...:         d[item[0]] = item[1]
   ...:

In [10]: d
Out[10]:
{'02/04/2012': ['a'],
 '09/04/2012': ['b'],
 '13/03/2012': ['a', 'b', 'c', 'd', 'e', 'f'],
 '26/03/2012': ['f']}

In [11]: [[k,v] for k,v in d.items()]
Out[11]:
[['02/04/2012', ['a']],
 ['09/04/2012', ['b']],
 ['26/03/2012', ['f']],
 ['13/03/2012', ['a', 'b', 'c', 'd', 'e', 'f']]]
</snippet></ROW><ROW><id>13618723</id><snippet>print "lat = %s" %result['lat']
print "lng = %s" %result['lng']
print "name = %s" %result['name']
print 'address = %s' %result['address']
</snippet></ROW><ROW><id>13618723</id><snippet>for val in "lat lng name address".split():
    print "%s = %s" %(val, result[val])
</snippet></ROW><ROW><id>13618941</id><snippet>ctypes</snippet></ROW><ROW><id>13618941</id><snippet>dl</snippet></ROW><ROW><id>13618941</id><snippet>import dl
dl.open("/lib/libc.so.6").call("time")
</snippet></ROW><ROW><id>13618941</id><snippet>sym</snippet></ROW><ROW><id>13619069</id><snippet>from collections import defaultdict

def canonical_form(word):
    return tuple(sorted(word))

anagrams = defaultdict(list)

for word in open("/usr/share/dict/words"):
    word = word.lower().strip()
    anagrams[canonical_form(word)].append(word)

while True:
    print anagrams[canonical_form(raw_input())]
</snippet></ROW><ROW><id>13619194</id><snippet>workerThread.wait()</snippet></ROW><ROW><id>13619194</id><snippet>QCoreApplication.processEvents()</snippet></ROW><ROW><id>13619213</id><snippet>', '.join(['%s']*n)</snippet></ROW><ROW><id>13619213</id><snippet>n</snippet></ROW><ROW><id>13619213</id><snippet>&gt;&gt;&gt; ', '.join(['%s']*7)
'%s, %s, %s, %s, %s, %s, %s'

&gt;&gt;&gt; 'INSERT INTO tablename(col1,col2,col3,col4,col5,col6,col7) VALUES (' + ', '.join(['%s']*7) + ');'
'INSERT INTO tablename(col1,col2,col3,col4,col5,col6,col7) VALUES (%s, %s, %s, %s, %s, %s, %s);'
</snippet></ROW><ROW><id>13619213</id><snippet>psycopg</snippet></ROW><ROW><id>13619213</id><snippet>VALUES</snippet></ROW><ROW><id>13619456</id><snippet>from functools import wraps

def live_doc(func):
    template = func.__doc__
    @wraps(func)
    def wrapper(*args, **kwargs):
        ret_val = func(*args, **kwargs)
        args_pretty = ", ".join(repr(a) for a in args)
        kw_pretty = ", ".join("%s=%r" % (k, v) for k, v in kwargs.items())
        signature = ", ".join(x for x in (args_pretty, kw_pretty) if x)
        name =  func.__name__
        wrapper.__doc__ = template % locals()
        return ret_val
    return wrapper

@live_doc
def f(x, y):
    """%(name)s was called with %(signature)s and returned %(ret_val)r."""
    return x + len(y)
</snippet></ROW><ROW><id>13619456</id><snippet>f</snippet></ROW><ROW><id>13619456</id><snippet>help(f)</snippet></ROW><ROW><id>13619456</id><snippet>Help on function f in module __main__:

f(*args, **kwargs)
    %(name)s was called with %(signature)s and returned %(ret_val)r.
</snippet></ROW><ROW><id>13619456</id><snippet>f(*args, **kwargs)
    f was called with 3, 'marty' and returned 8.
</snippet></ROW><ROW><id>13619456</id><snippet>kwargs</snippet></ROW><ROW><id>13619456</id><snippet>@live_doc
def q(*args, **kwargs):
    """%(name)s was called with %(signature)s and returned %(ret_val)r."""
    return len(args) + len(kwargs)

&gt;&gt;&gt; q(1, 2, 3, a=7, b="foo")
5
&gt;&gt;&gt; help(q)
q(*args, **kwargs)
    q was called with 1, 2, 3, a=7, b='foo' and returned 5.
</snippet></ROW><ROW><id>13619456</id><snippet>wrapper</snippet></ROW><ROW><id>13619465</id><snippet>def define_own_property(attr, key):
    def prop(self):
        return getattr(self, attr)[key]
    return property(prop)

class MyClass(object):
    def __init__(self, data):
        self.data = data

    version = define_own_property("data", "version")
</snippet></ROW><ROW><id>13619465</id><snippet>version = ...</snippet></ROW><ROW><id>13619465</id><snippet>define_own_property</snippet></ROW><ROW><id>13619653</id><snippet>tempfile.TemporaryFile</snippet></ROW><ROW><id>13619653</id><snippet>tempfile.NamedTemporaryFile</snippet></ROW><ROW><id>13619653</id><snippet>TemporaryFile()</snippet></ROW><ROW><id>13619653</id><snippet>tempfile.SpooledTemporaryFile</snippet></ROW><ROW><id>13619653</id><snippet>TemporaryFile()</snippet></ROW><ROW><id>13619653</id><snippet>max_size</snippet></ROW><ROW><id>13619653</id><snippet>fileno()</snippet></ROW><ROW><id>13619653</id><snippet>TemporaryFile()</snippet></ROW><ROW><id>13619653</id><snippet>&gt;&gt;&gt; with TemporaryFile() as f:
    f.write('abcdefg')
    f.seek(0)  # go back to the beginning
    print(f.read())


abcdefg
</snippet></ROW><ROW><id>13619903</id><snippet>def submit_form(request):
   if request.method == 'POST':
         form = Form(request.POST)
         if not form.has_changed():
             #Generate Error 
</snippet></ROW><ROW><id>13619911</id><snippet>class csv(CsvModel):
    mfr_code = adaptor_fields.CharField()
    main_photo_url = adaptor_fields.CharField()
    name = adaptor_fields.CharField()
    product_url = adaptor_fields.CharField()
    vendor = adaptor_fields.CharField(prepare=get_or_create_vendor)
    type = adaptor_fields.CharField(prepare=get_or_create_type)
    subtype = adaptor_fields.IgnoredField()
    description = adaptor_fields.CharField()
    specs = adaptor_fields.CharField()
    tags = adaptor_fields.CharField()
    stock = adaptor_fields.IntegerField(prepare=get_stock_value)
    price = adaptor_fields.IntegerField(prepare=format_usd)

    class Meta:
        delimiter = ','
        dbModel = Product
        update = {
            'keys': ['name']   # or mfr_code, main_photo_url, etc..., price
        }
</snippet></ROW><ROW><id>13619913</id><snippet>#!/usr/bin/python

import sys

d = {}
line_list=[]
alist=[]
f = open(sys.argv[3], 'r') # Persisted Dictionary File

for line in f:
    line = line.strip()
    if line =="":
        continue
    alist = line.split()
    key = alist[0]
    value = alist[1]
    d[str(key)] = str(value)
    alist=[]
f.close()

fr = open(sys.argv[1], 'r') # source file
fw = open(sys.argv[2]+"/masked_"+sys.argv[1], 'w') # Target Directory Location

for line in fr:
    line = line.strip()
    if line == "":
        continue
    columns = line.strip().split('|')
    if columns[0].find("@") &gt; 1:
        looking_for = columns[0] # this is what we need to search
    else:
        looking_for = "Dummy@dummy.com"
    if looking_for in d:
        # by default, iterating over a dictionary will return keys
            new_line = d[looking_for]+'|'+'|'.join(columns[1:])
            line_list.append(new_line)
    else:
        new_idx = str(len(d)+1)
        d[looking_for] = new_idx
        kv = open(sys.argv[3], 'a')
        kv.write(looking_for+" "+new_idx+'\n')
        kv.close()
        new_line = d[looking_for]+'|'+'|'.join(columns[1:])
        line_list.append(new_line)
fw.writelines(line_list)
</snippet></ROW><ROW><id>13620328</id><snippet>function consolidate() {
  var agents = [['John', 'sheet_id'],
                ['Mary', 'sheet_id'],
                ['Tom', 'sheet_id']];
  var numAgents = agents.length;
  var array1 = [];
  var array2 = [];
  var array3 = [];
  var array4 = [];
  var masterSheet = SpreadsheetApp.getActive().getSheetByName('MASTER');
  var sheetName = 'WEEK ' + (masterSheet.getRange('A1').getValue());
  var temp;

  for (var i = 0; i &lt; numAgents; i++) {
    temp = SpreadsheetApp.openById(agents[i][1]).getSheetByName(sheetName).getRange('D41:D49').getValues();
    array1.push([agents[i][0]]);
    array2.push([temp[4][0], temp[0][0]]);
    array3.push([temp[7][0], temp[8][0]]);
    array4.push([temp[6][0]]);
  }

  masterSheet.getRange(2, 1, numAgents, 1).setValues(array1);
  masterSheet.getRange(2, 4, numAgents, 2).setValues(array2);
  masterSheet.getRange(2, 9, numAgents, 2).setValues(array3);
  masterSheet.getRange(2, 14, numAgents, 1).setValues(array4);
}
</snippet></ROW><ROW><id>13620428</id><snippet>python "C:\Program Files\Google\google_appengine\appcfg.py" download_data --url=http://cayotkanawa.appspot.com/_ah/
remote_api --filename=datasave.csv
</snippet></ROW><ROW><id>13620831</id><snippet>Sachin Shekhar R</snippet></ROW><ROW><id>13620831</id><snippet>Sachin Shekhar R</snippet></ROW><ROW><id>13620831</id><snippet>&lt;pluginManagement&gt;&lt;plugins&gt;</snippet></ROW><ROW><id>13620831</id><snippet>&lt;pluginManagement&gt;</snippet></ROW><ROW><id>13620831</id><snippet>&lt;plugins&gt;</snippet></ROW><ROW><id>13620831</id><snippet>&lt;build&gt;
&lt;plugins&gt;
            &lt;plugin&gt;
               &lt;!-- plugins here--&gt;
            &lt;/plugin&gt;
&lt;/plugins&gt;
&lt;pluginManagement&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt;
            &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt;
            &lt;version&gt;1.0.0&lt;/version&gt;
            &lt;configuration&gt;
                &lt;lifecycleMappingMetadata&gt;
                    &lt;pluginExecutions&gt;
                        &lt;pluginExecution&gt;
                            &lt;pluginExecutionFilter&gt;
                                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
                                &lt;versionRange&gt;[1.2.1,)&lt;/versionRange&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;exec&lt;/goal&gt;
                                &lt;/goals&gt;
                            &lt;/pluginExecutionFilter&gt;
                            &lt;action&gt;
                                &lt;ignore/&gt;
                            &lt;/action&gt;
                        &lt;/pluginExecution&gt;
                    &lt;/pluginExecutions&gt;
                &lt;/lifecycleMappingMetadata&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/pluginManagement&gt;
&lt;/build&gt;
</snippet></ROW><ROW><id>13620831</id><snippet>Problems</snippet></ROW><ROW><id>13620831</id><snippet>Mark goal exec as ignored in Eclipse build in Eclipse references (experimental)</snippet></ROW><ROW><id>13620831</id><snippet>&lt;lifecycleMappingMetadata&gt;</snippet></ROW><ROW><id>13620831</id><snippet>workspace/.metadata/.plugins/org.eclipse.m2e.core/lifecycle-mapping-metadata.xml</snippet></ROW><ROW><id>13620853</id><snippet>outFile = "ExampleFile.txt", "w"
</snippet></ROW><ROW><id>13620853</id><snippet>tuple</snippet></ROW><ROW><id>13620853</id><snippet>file</snippet></ROW><ROW><id>13620853</id><snippet>outFile = open('ExampleFile.txt','w')
</snippet></ROW><ROW><id>13620853</id><snippet>with open('ExampleFile.txt','w') as outFile:
    #...
</snippet></ROW><ROW><id>13620853</id><snippet>outFile.write("The number is", example,+ "\n")
</snippet></ROW><ROW><id>13620853</id><snippet>,+</snippet></ROW><ROW><id>13620853</id><snippet>file.write</snippet></ROW><ROW><id>13620853</id><snippet>outFile.write("The number is {0}\n".format(example))
</snippet></ROW><ROW><id>13620853</id><snippet>outFile.write("The number is %s\n"%(example))
</snippet></ROW><ROW><id>13620874</id><snippet>WM_WTSSESSION_CHANGE</snippet></ROW><ROW><id>13620874</id><snippet>WTS_SESSION_LOGOFF</snippet></ROW><ROW><id>13620874</id><snippet>WTS_SESSION_LOCK</snippet></ROW><ROW><id>13621574</id><snippet>__init__</snippet></ROW><ROW><id>13621574</id><snippet>a = Foo()
</snippet></ROW><ROW><id>13621575</id><snippet>In [18]: doc.xpath(u'.//th[div[text()="Cash &amp; Short Term Investments"]]/following-sibling::td/text()')
Out[18]: ['   144,841', '   169,760', '   189,252', '    86,743', '    57,379']
</snippet></ROW><ROW><id>13621575</id><snippet>In [19]: def func(doc,txt):
    ...:     exp=u'.//th[div[text()="{0}"]]'\
    ...:         u'/following-sibling::td/text()'.format(txt)
    ...:     return [i.strip() for i in doc.xpath(exp)]

In [20]: func(doc,u'Total Accounts Receivable')
Out[20]: ['338,594', '270,133', '214,169', '244,940', '236,331']
</snippet></ROW><ROW><id>13621575</id><snippet>dict</snippet></ROW><ROW><id>13621575</id><snippet>In [21]: d={}

In [22]: for i in doc.xpath(u'.//tbody/tr'):
    ...:     if len(i.xpath(u'.//th/div/text()')):
    ...:         d[i.xpath(u'.//th/div/text()')[0]]=\
    ...:         [e.strip() for e in i.xpath(u'.//td/text()')]

In [23]: d.items()[:3]
Out[23]: 
[('Accounts Receivables, Gross',
     ['344,241', '274,894', '218,255', '247,600', '238,596']),
 ('Short-Term Investments', 
     ['27,165', '26,067', '24,400', '851', '159']),
 ('Cash &amp; Short Term Investments',
     ['144,841', '169,760', '189,252', '86,743', '57,379'])] 
</snippet></ROW><ROW><id>13621578</id><snippet>ROOT_URLCONF</snippet></ROW><ROW><id>13621578</id><snippet>effbot.urls</snippet></ROW><ROW><id>13621578</id><snippet>.py</snippet></ROW><ROW><id>13621578</id><snippet>HOST_MIDDLEWARE_URLCONF_MAP</snippet></ROW><ROW><id>13621578</id><snippet>ROOT_URLCONF</snippet></ROW><ROW><id>13621578</id><snippet>HOST_MIDDLEWARE_URLCONF_MAP = { 
    "mysite1.com": "effbot.urls1", 
    #"mysite2.com": "effbot.urls2" 
} 
</snippet></ROW><ROW><id>13621619</id><snippet>import imp
modl = imp.load_source('modulename', '/path/to/module.py')
</snippet></ROW><ROW><id>13621677</id><snippet>response['Content-Disposition']</snippet></ROW><ROW><id>13621677</id><snippet>'attachment; filename="somefilename.pdf"'</snippet></ROW><ROW><id>13621677</id><snippet>pdf_data</snippet></ROW><ROW><id>13621677</id><snippet>from django.http import HttpResponse

def serve_pdf_view(request):
    pdf_data = magically_create_pdf()
    return HttpResponse(pdf_data, content_type='application/pdf')
</snippet></ROW><ROW><id>13621768</id><snippet>.endswith()</snippet></ROW><ROW><id>13621768</id><snippet>select([tabledef]).where(tabledef.c.column_code.endswith('AX'))
</snippet></ROW><ROW><id>13621768</id><snippet>session.query(mappedobject).filter(mappedobject.column_code.endswith('AX'))
</snippet></ROW><ROW><id>13621768</id><snippet>column_code.endswith()</snippet></ROW><ROW><id>13621768</id><snippet>AX</snippet></ROW><ROW><id>13621768</id><snippet>RIGHT()</snippet></ROW><ROW><id>13621768</id><snippet>from sqlalchemy.sql.expression import func

select([tabledef]).where(func.right(tabledef.c.column_code, 2) == 'AX')
</snippet></ROW><ROW><id>13621768</id><snippet>func.right()</snippet></ROW><ROW><id>13621768</id><snippet>RIGHT(column_code, 2)</snippet></ROW><ROW><id>13621780</id><snippet>Mock()</snippet></ROW><ROW><id>13621780</id><snippet>id</snippet></ROW><ROW><id>13621780</id><snippet> class MyClassMockFactory():
     _id = 0

     def get_mock_object(self, *args,**kwargs):
        mock = Mock(MyClass, autospec = True)
        self._attach_mock_property(mock , 'x', kwargs['x'])
        self._attach_mock_property(mock , 'y', kwargs['y'])
        self._attach_mock_property(mock , 'id', MyClassMockFactory._id)
        MyClassMockFactory._id += 1
        return mock

     def _attach_mock_property(self, mock_object, name, value):
         p = PropertyMock(return_value=value)
         setattr(type(mock_object), name, p)
</snippet></ROW><ROW><id>13621780</id><snippet>MyClass()</snippet></ROW><ROW><id>13621780</id><snippet>class TestMyClass(TestCase):
     mock_factory = MyClassMockFactory()

     @patch('MyClass',side_effect=mock_factory.get_mock_object)
     test_my_class(self,*args):
         obj0 = MyClass()
         obj1 = MyClass(1.0,2.2)
         obj0.calc_x_times_y()
         # Assertions
         obj0.calc_x_times_y.assert_called_once_with()
         self.assertEqaul(obj0.id, 0)
         self.assertEqaul(obj1.id, 1)
</snippet></ROW><ROW><id>13621920</id><snippet>Ui_Frame</snippet></ROW><ROW><id>13621920</id><snippet>Frame</snippet></ROW><ROW><id>13621920</id><snippet>class Ui_Frame(QtGui.QWidget):
    def __init__(self, parent=None):
        # Here, you should call the inherited class' init, which is QDialog
        QtGui.QWidget.__init__(self, parent)
        xlist = [1,2,3]
        y = "Default"
        self.setupUi(xlist,y)

    def setupUi(self, xlist, y):
        self.setObjectName(_fromUtf8("Frame"))
        self.resize(800, 400)
        self.tableWidget = QtGui.QTableWidget(self)
        ...
</snippet></ROW><ROW><id>13622368</id><snippet>class B(A):
    def __init__(self, arg1, *ignored):
        # `ignored` is.. ignored
        A.__init__(self, arg1, None)
</snippet></ROW><ROW><id>13622368</id><snippet>A.__init__()</snippet></ROW><ROW><id>13622368</id><snippet>None</snippet></ROW><ROW><id>13622368</id><snippet>__deepcopy__</snippet></ROW><ROW><id>13622432</id><snippet>def records(file_path):
    with open(file_path) as f:
        chunk = []
        for line in f:
            if 'name' in line:
                if chunk:
                    yield chunk
                chunk = [line]
            else:
                chunk.append(line)
        if chunk:
            yield chunk

for record in records('data.txt'):
    print '--------'
    print ''.join(record)
</snippet></ROW><ROW><id>13622432</id><snippet>--------
    name:
    Class:
    Subject:

--------
    name:
    Class:
    Subject:
</snippet></ROW><ROW><id>13622534</id><snippet>open(r'F:\abc.c')
</snippet></ROW><ROW><id>13622534</id><snippet>r</snippet></ROW><ROW><id>13622534</id><snippet>\a</snippet></ROW><ROW><id>13622553</id><snippet>s = s[:-6] if s.endswith('000000') else s
</snippet></ROW><ROW><id>13622553</id><snippet>def rstrip_chars(s, chars):
    return s[:-len(chars)] if s.endswith(chars) else s

s = rstrip_chars(s, '000000')
</snippet></ROW><ROW><id>13622852</id><snippet>import re
import itertools as it

text = "&lt;h&gt; This is a string. &lt;/H&gt;&lt;p&gt; This is another part. &lt;/P&gt;"

cnt = it.count()
print re.sub(r"&lt;/?\w+&gt;", lambda x: '{{{}}}'.format(next(cnt)), text)
</snippet></ROW><ROW><id>13622852</id><snippet>{0} This is a string. {1}{2} This is another part. {3}
</snippet></ROW><ROW><id>13622852</id><snippet>cnt = it.count()</snippet></ROW><ROW><id>13622852</id><snippet>import re
import itertools as it

text = "&lt;h&gt; This is a string. &lt;/H&gt;&lt;p&gt; This is another part. &lt;/P&gt;"

cnt = it.count()
d = {}
def replace(tag, d, cnt):
    if tag not in d:
        d[tag] = '{{{}}}'.format(next(cnt))
    return d[tag]
print re.sub(r"(&lt;/?\w+&gt;)", lambda x: replace(x.group(1), d, cnt), text)
print d
</snippet></ROW><ROW><id>13622852</id><snippet>{0} This is a string. {1}{2} This is another part. {3}
{'&lt;/P&gt;': '{3}', '&lt;h&gt;': '{0}', '&lt;p&gt;': '{2}', '&lt;/H&gt;': '{1}'}
</snippet></ROW><ROW><id>13622917</id><snippet>def list_gen(n):
    i=0
    while i&lt;n:
        yield i
        i += 1
</snippet></ROW><ROW><id>13622917</id><snippet>next()</snippet></ROW><ROW><id>13622917</id><snippet>iter</snippet></ROW><ROW><id>13622917</id><snippet>for i in something</snippet></ROW><ROW><id>13622917</id><snippet>def list_gen(n):
    return range(n)

def list_gen(n):
    return xrange(n)
</snippet></ROW><ROW><id>13622917</id><snippet>list</snippet></ROW><ROW><id>13622917</id><snippet>xrange</snippet></ROW><ROW><id>13622917</id><snippet>list</snippet></ROW><ROW><id>13622917</id><snippet>xrange</snippet></ROW><ROW><id>13622917</id><snippet>range</snippet></ROW><ROW><id>13622917</id><snippet>xrange</snippet></ROW><ROW><id>13622917</id><snippet>list</snippet></ROW><ROW><id>13622917</id><snippet>range</snippet></ROW><ROW><id>13622917</id><snippet>xrange</snippet></ROW><ROW><id>13622917</id><snippet>list</snippet></ROW><ROW><id>13622917</id><snippet>for</snippet></ROW><ROW><id>13622917</id><snippet>xrange</snippet></ROW><ROW><id>13622917</id><snippet>list</snippet></ROW><ROW><id>13622917</id><snippet>range</snippet></ROW><ROW><id>13622917</id><snippet>range</snippet></ROW><ROW><id>13622917</id><snippet>import timeit

ns = [1,2,3, 5, 10, 50, 100]
print 'n', '\t', 'range', '\t', 'xrange'
for n in ns:
    t1 = timeit.timeit("for i in range({}): pass".format(n))
    t2 = timeit.timeit("for i in xrange({}): pass".format(n))
    print n, '\t', t1, '\t', t2
</snippet></ROW><ROW><id>13622917</id><snippet>n       range           xrange
1       0.566222990493  0.418698436395
2       0.594136874362  0.477882061758
3       0.630704800817  0.488603362929
5       0.725149288913  0.540597548519
10      0.90297752809   0.687031507818
50      2.44493085566   1.89102105759
100     4.31189321914   3.33713522433
</snippet></ROW><ROW><id>13623051</id><snippet>template</snippet></ROW><ROW><id>13623051</id><snippet>webapp</snippet></ROW><ROW><id>13623051</id><snippet>from google.appengine.ext.webapp import template
</snippet></ROW><ROW><id>13623051</id><snippet>webapp2</snippet></ROW><ROW><id>13623051</id><snippet>webapp</snippet></ROW><ROW><id>13623051</id><snippet>webapp</snippet></ROW><ROW><id>13623271</id><snippet>xy = 23
a = eval(raw_input("Enter a variable"))
print (a)
</snippet></ROW><ROW><id>13623271</id><snippet>dict</snippet></ROW><ROW><id>13623271</id><snippet>eval</snippet></ROW><ROW><id>13623271</id><snippet>help(eval)</snippet></ROW><ROW><id>13623467</id><snippet>text
py.test --cov-report term --cov=. test.py
</snippet></ROW><ROW><id>13623467</id><snippet>--cov</snippet></ROW><ROW><id>13623467</id><snippet>--cov</snippet></ROW><ROW><id>13623467</id><snippet>test.py</snippet></ROW><ROW><id>13623467</id><snippet>pytest.py</snippet></ROW><ROW><id>13623467</id><snippet>test.py</snippet></ROW><ROW><id>13623535</id><snippet>unset PYTHONHOME</snippet></ROW><ROW><id>13623676</id><snippet>map()</snippet></ROW><ROW><id>13623676</id><snippet>list(map(self.do_someting,range(10)))
</snippet></ROW><ROW><id>13623960</id><snippet>from PIL import Image

im = np.array(Image.open('input_image.jpg').convert('L'))

xpixels = im.shape[1]
ypixels = im.shape[0]

dpi = 72
scalefactor = 1

xinch = xpixels * scalefactor / dpi
yinch = ypixels * scalefactor / dpi

fig = plt.figure(figsize=(xinch,yinch))

ax = plt.axes([0, 0, 1, 1], frame_on=False, xticks=[], yticks=[])

contour(im, levels=[240], colors='black', origin='image')

plt.savefig('same_size.png', dpi=dpi)
</snippet></ROW><ROW><id>13624281</id><snippet>#include</snippet></ROW><ROW><id>13624281</id><snippet>../web/engine.py
../web/templates/home.tmpl
../web/templates/header.tmpl
../web/templates/footer.tmpl
../web/css/main.css
../web/js/main.js
</snippet></ROW><ROW><id>13624313</id><snippet>from pyparsing import *

LBRACE,RBRACE,SEMI,QUOTE = map(Suppress,'{};"')
ipAddress = Combine(Word(nums) + ('.' + Word(nums))*3)
hexint = Word(hexnums,exact=2)
macAddress = Combine(hexint + (':'+hexint)*5)
hdwType = Word(alphanums)

yyyymmdd = Combine((Word(nums,exact=4)|Word(nums,exact=2))+
                    ('/'+Word(nums,exact=2))*2)
hhmmss = Combine(Word(nums,exact=2)+(':'+Word(nums,exact=2))*2)
dateRef = oneOf(list("0123456"))("weekday") + yyyymmdd("date") + \
                                                        hhmmss("time")

startsStmt = "starts" + dateRef + SEMI
endsStmt = "ends" + (dateRef | "never") + SEMI
tstpStmt = "tstp" + dateRef + SEMI
tsfpStmt = "tsfp" + dateRef + SEMI
hdwStmt = "hardware" + hdwType("type") + macAddress("mac") + SEMI
uidStmt = "uid" + QuotedString('"')("uid") + SEMI
bindingStmt = "binding" + Word(alphanums) + Word(alphanums) + SEMI

leaseStatement = startsStmt | endsStmt | tstpStmt | tsfpStmt | hdwStmt | \
                                                        uidStmt | bindingStmt
leaseDef = "lease" + ipAddress("ipaddress") + LBRACE + \
                            Dict(ZeroOrMore(Group(leaseStatement))) + RBRACE

input = open(DHCPLEASEFILE).read()
with open(OUTPUTFILE, 'w') as output:
    for lease, start, stop in leaseDef.scanString(input):
        if lease.hardware.mac != mac:
            output.write(input[start:stop])
</snippet></ROW><ROW><id>13624313</id><snippet>dhcp.leases</snippet></ROW><ROW><id>13624313</id><snippet>scanString()</snippet></ROW><ROW><id>13624313</id><snippet>scanString()</snippet></ROW><ROW><id>13624313</id><snippet>.hardware.mac</snippet></ROW><ROW><id>13624313</id><snippet>AttributeError</snippet></ROW><ROW><id>13624313</id><snippet>start</snippet></ROW><ROW><id>13624313</id><snippet>stop</snippet></ROW><ROW><id>13624643</id><snippet>Bar = superClassCreator()</snippet></ROW><ROW><id>13624643</id><snippet>foo</snippet></ROW><ROW><id>13624643</id><snippet>Bar</snippet></ROW><ROW><id>13624643</id><snippet>foo</snippet></ROW><ROW><id>13624643</id><snippet>import foo

foo.Bar = superClassCreator()
</snippet></ROW><ROW><id>13624643</id><snippet>import foo

generatedClass = superClassCreator()
setattr(foo, generatedClass.__name__, generatedClass)
</snippet></ROW><ROW><id>13624643</id><snippet>foo</snippet></ROW><ROW><id>13624643</id><snippet>globals()</snippet></ROW><ROW><id>13624643</id><snippet>generatedClass = superClassCreator()
globals()[generatedClass.__name__] = generatedClass
del generatedClass
</snippet></ROW><ROW><id>13624643</id><snippet>del</snippet></ROW><ROW><id>13624643</id><snippet>generatedClass</snippet></ROW><ROW><id>13625274</id><snippet>file -i</snippet></ROW><ROW><id>13625791</id><snippet>devInfo.pDevExtensions.contents.szProductName</snippet></ROW><ROW><id>13625791</id><snippet>DEVINFO</snippet></ROW><ROW><id>13625791</id><snippet>DEVEXTENSION</snippet></ROW><ROW><id>13625791</id><snippet>CapWords</snippet></ROW><ROW><id>13625791</id><snippet>CAPS</snippet></ROW><ROW><id>13626588</id><snippet>test</snippet></ROW><ROW><id>13626588</id><snippet>class Prueba(unittest.TestCase):

    def setUp(self):
        pass
    def testPrintsTrue(self):
        self.assertTrue(True)
</snippet></ROW><ROW><id>13626588</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>13626588</id><snippet>test</snippet></ROW><ROW><id>13626595</id><snippet>def injector():
    while True:
        try:
            print 'a'
            v = yield
            print 'b', v
            yield v
            print 'c'
        except GeneratorExit:
            print 'exit'
            break

g = injector()

print 'send none'
g.send(None)
</snippet></ROW><ROW><id>13626595</id><snippet>.send()</snippet></ROW><ROW><id>13626595</id><snippet>a</snippet></ROW><ROW><id>13626595</id><snippet>None</snippet></ROW><ROW><id>13626595</id><snippet>print 'send 2'
g.send(2)
</snippet></ROW><ROW><id>13626595</id><snippet>v = 2</snippet></ROW><ROW><id>13626595</id><snippet>2</snippet></ROW><ROW><id>13626595</id><snippet>v</snippet></ROW><ROW><id>13626595</id><snippet>g.send()</snippet></ROW><ROW><id>13626595</id><snippet>v</snippet></ROW><ROW><id>13626595</id><snippet>print 'receiving'
v = g.next()
</snippet></ROW><ROW><id>13626595</id><snippet>c</snippet></ROW><ROW><id>13626595</id><snippet>a</snippet></ROW><ROW><id>13626595</id><snippet>None</snippet></ROW><ROW><id>13626595</id><snippet>print 'received', v
</snippet></ROW><ROW><id>13626595</id><snippet>None</snippet></ROW><ROW><id>13626595</id><snippet>v</snippet></ROW><ROW><id>13626595</id><snippet>g = injector()

print 'send none'
g.send(None)
print 'send 2'
v = g.send(2)
print 'received', v

g.close()
</snippet></ROW><ROW><id>13626595</id><snippet>from contextlib import closing
with closing(injector()) as g:
    print 'send none'
    g.send(None)
    print 'send 2'
    v = g.send(2)
    print 'received', v
</snippet></ROW><ROW><id>13627191</id><snippet>&gt;&gt;&gt; import unittest
&gt;&gt;&gt; unittest.sys
&lt;module 'sys' (built-in)&gt;
&gt;&gt;&gt; unittest.types
&lt;module 'types' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/types.pyc'&gt;
&gt;&gt;&gt; dir(unittest)
['FunctionTestCase', 'TestCase', 'TestLoader', 'TestProgram', 'TestResult', 'TestSuite', 'TextTestRunner', '_CmpToKey', '_TextTestResult', '_WritelnDecorator', '__all__', '__author__', '__builtins__', '__doc__', '__email__', '__file__', '__metaclass__', '__name__', '__package__', '__unittest', '__version__', '_makeLoader', '_strclass', 'defaultTestLoader', 'findTestCases', 'getTestCaseNames', 'main', 'makeSuite', 'os', 'sys', 'time', 'traceback', 'types']
</snippet></ROW><ROW><id>13627191</id><snippet>__all__</snippet></ROW><ROW><id>13627191</id><snippet>from modulename import *</snippet></ROW><ROW><id>13627191</id><snippet>__init__.py</snippet></ROW><ROW><id>13627191</id><snippet>api.py</snippet></ROW><ROW><id>13627191</id><snippet>mod_2.numpy</snippet></ROW><ROW><id>13627191</id><snippet>sys.modules['numpy']</snippet></ROW><ROW><id>13627191</id><snippet>numpy</snippet></ROW><ROW><id>13627191</id><snippet>import numpy</snippet></ROW><ROW><id>13627402</id><snippet>&lt;html&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body style="width: 100%; height: 100%;"&gt;

    &lt;div style="top: 50%; left: 50%; position: absolute;"&gt;
        &lt;div&gt;Centered text&lt;/div&gt;
    &lt;/div&gt;

  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13627467</id><snippet>?</snippet></ROW><ROW><id>13627467</id><snippet>%s</snippet></ROW><ROW><id>13627500</id><snippet>&gt;&gt;&gt; s = '{ Field1:Value Field2:Value Field1:Value } Field4:Value {Field5:Value    }'
&gt;&gt;&gt; for insider in re.findall(r'{((?:\s*Field\d+:Value\s*)*)}', s):
    new = re.sub(r'\s*Field(\d+):(\w+)\s*', r' NewField\1:\2', insider)
    s = s.replace(insider, new)

&gt;&gt;&gt; s
'{ NewField1:Value NewField2:Value NewField1:Value} Field4:Value { NewField5:Value}'
</snippet></ROW><ROW><id>13627526</id><snippet>struct_time</snippet></ROW><ROW><id>13627526</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>13627526</id><snippet>import datetime
import time

total_time = datetime.timedelta()
for k in root.findall('TC'):
    ttt= k.get('time')
    s = time.strptime(ttt, "%H:%M:%S")
    total_time = total_time + datetime.timedelta(
        hours=s.tm_hour, minutes=s.tm_minute, seconds=s.tm_second)
</snippet></ROW><ROW><id>13627526</id><snippet>struct_time</snippet></ROW><ROW><id>13627526</id><snippet>.strptime()</snippet></ROW><ROW><id>13627526</id><snippet>total_time</snippet></ROW><ROW><id>13627526</id><snippet>datetime.timedelta()</snippet></ROW><ROW><id>13627526</id><snippet>.total_seconds()</snippet></ROW><ROW><id>13627526</id><snippet>print total_time.total_seconds()
</snippet></ROW><ROW><id>13627562</id><snippet>Resource.putChild</snippet></ROW><ROW><id>13627562</id><snippet>getChild</snippet></ROW><ROW><id>13627562</id><snippet>class Calendar(Resource):
   def getChild(self, name, request):
       return YearPage(int(name))
</snippet></ROW><ROW><id>13627562</id><snippet>YearPage</snippet></ROW><ROW><id>13627562</id><snippet>Callback</snippet></ROW><ROW><id>13627621</id><snippet>end=" "</snippet></ROW><ROW><id>13627621</id><snippet>print (i.name, end=" ")</snippet></ROW><ROW><id>13627621</id><snippet>In [2]: for i in range(5):
   ...:     print(i,end=" ")
   ...:     
0 1 2 3 4 
</snippet></ROW><ROW><id>13627621</id><snippet>print()</snippet></ROW><ROW><id>13627621</id><snippet>print(value, ..., sep=' ', end='\n', file=sys.stdout)

Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep:  string inserted between values, default a space.
end:  string appended after the last value, default a newline.
</snippet></ROW><ROW><id>13627881</id><snippet>def a():
    globals()['something'] = 'bob'
</snippet></ROW><ROW><id>13627933</id><snippet># Get folder path containing text files
file_list = glob.glob(source_dir + '/*.TXT')
data = []
for file_path in file_list:
    data.append(
        np.genfromtxt(file_path, delimiter=',', skip_header=3, skip_footer=18))
# now you can access it outside the "for loop..."
for d in data:
    print d
</snippet></ROW><ROW><id>13628455</id><snippet>self.login(request, user)
</snippet></ROW><ROW><id>13628455</id><snippet>authenticate(username=user, password=pwd)
</snippet></ROW><ROW><id>13628695</id><snippet>variable</snippet></ROW><ROW><id>13628695</id><snippet>0</snippet></ROW><ROW><id>13628695</id><snippet>False</snippet></ROW><ROW><id>13628695</id><snippet>[]</snippet></ROW><ROW><id>13628695</id><snippet>()</snippet></ROW><ROW><id>13628695</id><snippet>if</snippet></ROW><ROW><id>13628695</id><snippet>variable is not None</snippet></ROW><ROW><id>13628695</id><snippet>variable</snippet></ROW><ROW><id>13628801</id><snippet>a = a[1:] + [45]
</snippet></ROW><ROW><id>13628825</id><snippet>if 10000 &lt;= number &lt;= 30000:
    pass
</snippet></ROW><ROW><id>13629066</id><snippet>os.walk()</snippet></ROW><ROW><id>13629066</id><snippet>datafiles = [(root, [os.path.join(root, f) for f in files)
    for root, dirs, files in os.walk(datadir)]
</snippet></ROW><ROW><id>13629066</id><snippet>root</snippet></ROW><ROW><id>13629066</id><snippet>setup.py</snippet></ROW><ROW><id>13629115</id><snippet>numpy.in1d()</snippet></ROW><ROW><id>13629115</id><snippet>In [6]: np.in1d(a, [14, 16, 18])
Out[6]: array([False, False, False,  True, False,  True, False], dtype=bool)
</snippet></ROW><ROW><id>13629135</id><snippet>$ /etc/init.d/celerybeat restart
$ /etc/init.d/celeryd restart
$ service celeryd restart
</snippet></ROW><ROW><id>13629295</id><snippet>p</snippet></ROW><ROW><id>13629295</id><snippet>float</snippet></ROW><ROW><id>13629295</id><snippet>int</snippet></ROW><ROW><id>13629295</id><snippet>r</snippet></ROW><ROW><id>13629295</id><snippet>numpy.float64</snippet></ROW><ROW><id>13629295</id><snippet>In [23]: map(type, p)
Out[23]: [float, float, float, int]

In [24]: map(type, r)
Out[24]: [numpy.float64, numpy.float64, numpy.float64, numpy.float64]
</snippet></ROW><ROW><id>13629295</id><snippet>float64</snippet></ROW><ROW><id>13629295</id><snippet>q</snippet></ROW><ROW><id>13629295</id><snippet>In [22]: p == r
Out[22]: True
</snippet></ROW><ROW><id>13629478</id><snippet>def find_items_within(l1, l2, dist):
    l1.sort()
    l2.sort()
    b = 0
    e = 0
    ans = []
    for a in l1:
        while b &lt; len(l2) and a - l2[b] &gt; dist:
            b += 1
        while e &lt; len(l2) and l2[e] - a &lt;= dist:
            e += 1
        ans.extend([(a,x) for x in l2[b:e]])
    return ans
</snippet></ROW><ROW><id>13629478</id><snippet>m = n*n</snippet></ROW><ROW><id>13629482</id><snippet>def rad_type(particle):

   my_dict = {}

   for (k, v) in particle.items():
        if (k[0] in my_dict):
            my_dict[k[0]] += v
        else:
            my_dict[k[0]] = v

   return my_dict  
</snippet></ROW><ROW><id>13629482</id><snippet>def filter(dict):
        filter1 = rad_type(dict)
        i = 0
        for k ,val in dict.items():
              dict[k] = filter1[k[0]]
              i +=1
        mini_key = [k for k , val in filter1.items() if val == min([value for key ,  value in filter1.items()])][0] 
        filter2 = {tuple(y for y in key if y != mini_key):value for key, value in dict.items()}
        filter3 = rad_type(filter2)
        return filter3  
</snippet></ROW><ROW><id>13629482</id><snippet>result = filter(particle)  
</snippet></ROW><ROW><id>13629482</id><snippet>{'ALPHA': 5, 'BETA': 8, 'GAMMA': 3}
</snippet></ROW><ROW><id>13629486</id><snippet>ssh-keygen -q -N '' -C 'generated key' -t rsa -f /path/to/key
</snippet></ROW><ROW><id>13629719</id><snippet>cdef class ListSlice(object):
    cdef object seq
    cdef Py_ssize_t start, end

    def __init__(self, seq, Py_ssize_t start, Py_ssize_t end):
        self.seq = seq
        self.start = start
        self.end = end

    def __iter__(self):
        return self

    def __next__(self):
        if self.start == self.end:
            raise StopIteration()
        r = self.seq[self.start]
        self.start += 1
        return r
</snippet></ROW><ROW><id>13630436</id><snippet>func_start = time.time()

print 'Function finishes in: %.3f ms' % ((time.time() - func_start) * 1000)
</snippet></ROW><ROW><id>13630436</id><snippet>timeit</snippet></ROW><ROW><id>13630436</id><snippet>default_timer()</snippet></ROW><ROW><id>13630516</id><snippet>_caches</snippet></ROW><ROW><id>13630516</id><snippet>from django.core.cache.backends import locmem
print locmem._caches
</snippet></ROW><ROW><id>13630528</id><snippet>SyntaxError: can't assign to function call
</snippet></ROW><ROW><id>13630528</id><snippet>for value.lower() in search_key):
</snippet></ROW><ROW><id>13630528</id><snippet>if all(value in mp3meta for value in [value.lower() for value in search_key]) :
</snippet></ROW><ROW><id>13630715</id><snippet>from django.db.models import F

Entry.objects.filter(user_has_read).update(views=F('views') + 1)
</snippet></ROW><ROW><id>13630806</id><snippet>dtype = object</snippet></ROW><ROW><id>13630806</id><snippet>&gt;&gt;&gt; arr = np.ndarray((10,4),dtype = object)
&gt;&gt;&gt; arr[:,0] = int(10)
&gt;&gt;&gt; arr[:,1:] = float(10)
&gt;&gt;&gt; arr
array([[10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0],
       [10, 10.0, 10.0, 10.0]], dtype=object)
</snippet></ROW><ROW><id>13630806</id><snippet>&gt;&gt;&gt; arr / 3
array([[3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333],
       [3, 3.33333333333, 3.33333333333, 3.33333333333]], dtype=object)
</snippet></ROW><ROW><id>13630806</id><snippet>numpy.recarray</snippet></ROW><ROW><id>13630806</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.recarray(10,dtype=[('x',int),('y',float,4)])
&gt;&gt;&gt; arr[:] = 0
&gt;&gt;&gt; arr
rec.array([(0, array([ 0.,  0.,  0.,  0.])), (0, array([ 0.,  0.,  0.,  0.])),
           (0, array([ 0.,  0.,  0.,  0.])), (0, array([ 0.,  0.,  0.,  0.])),
           (0, array([ 0.,  0.,  0.,  0.])), (0, array([ 0.,  0.,  0.,  0.])),
           (0, array([ 0.,  0.,  0.,  0.])), (0, array([ 0.,  0.,  0.,  0.])),
           (0, array([ 0.,  0.,  0.,  0.])), (0, array([ 0.,  0.,  0.,  0.]))], 
  dtype=[('x', '&lt;i4'), ('y', '&lt;f8', (4,))])
&gt;&gt;&gt; arr['x']
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
&gt;&gt;&gt; arr['y']
array([[ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>13630806</id><snippet>&gt;&gt;&gt; arr['x'] += 2
&gt;&gt;&gt; arr['y'] += 2
</snippet></ROW><ROW><id>13631043</id><snippet>alpha_list</snippet></ROW><ROW><id>13631043</id><snippet>alpha_list = np.log(alpha_list)
</snippet></ROW><ROW><id>13631043</id><snippet>import matplotlib.pyplot as plt
import numpy as np

alpha_list=[1e-11,1e-10,1e-10,5*1e-10,8*1e-10,1e-8,1e-8,5*1e-8,8*1e-6,1e-6,1e-6,5*1e-6,8*1e-6,1e-4,1e-4,5*1e-4,8*1e-4,1e-3,1e-3,5*1e-3,6*1e-3,8*1e-3]
alpha_list = np.log(alpha_list)
eigRange = np.linspace(0,19,20)

eigenvalues,alphaa  = np.meshgrid(eigRange,alpha_list )
normCostTrain = np.random.random((len(alpha_list),len(eigRange)))

fig = plt.figure()
DatavmaxTrain = np.max(normCostTrain)
DatavminTrain = np.min(normCostTrain)

plt.scatter(eigenvalues,alphaa,s = 130, c=normCostTrain,cmap=plt.get_cmap('PuOr'),
            vmin=DatavminTrain, vmax=DatavmaxTrain, alpha=0.70) #-----for train 

cb1=plt.colorbar()
cb1.set_label("normalized square error")

plt.title("Train ")
plt.xlabel("No. of Eigenvalues")
plt.ylabel("Log(Regularization parameter)")
plt.show()
</snippet></ROW><ROW><id>13631043</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.cm as cm
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')

alpha_list = [1e-11, 1e-10, 1e-10, 5*1e-10, 8*1e-10, 1e-8, 1e-8, 5*1e-8, 8*1e-6,
              1e-6, 1e-6, 5*1e-6, 8*1e-6, 1e-4, 1e-4, 5*1e-4, 8*1e-4, 1e-3, 1e-3,
              5*1e-3, 6*1e-3, 8*1e-3]

alpha_list = np.log(alpha_list)
eigRange = np.linspace(0, 19, 20)

eigenvalues, alphaa  = np.meshgrid(eigRange, alpha_list )
eigenvalues = eigenvalues.ravel()
alphaa = alphaa.ravel()
normCostTrain = np.random.random((len(alpha_list), len(eigRange))).ravel()

DatavmaxTrain = np.max(normCostTrain)
DatavminTrain = np.min(normCostTrain)

PuOr = plt.get_cmap('PuOr')
ax.scatter(eigenvalues, alphaa, normCostTrain,
           c = normCostTrain.ravel(),
           s = 30,
           cmap = PuOr,
           vmin = DatavminTrain,
           vmax = DatavmaxTrain,
           alpha = 0.70
           ) #-----for train

m = cm.ScalarMappable(cmap = PuOr)
m.set_array(normCostTrain)

cb1 = plt.colorbar(m)
cb1.set_label("normalized square error")

plt.title("Train ")
ax.set_xlabel("No. of Eigenvalues")
ax.set_ylabel("Log(Regularization parameter)")
ax.set_zlabel("normalized square error")
plt.show()
</snippet></ROW><ROW><id>13631071</id><snippet>defaultdict</snippet></ROW><ROW><id>13631071</id><snippet>__init__</snippet></ROW><ROW><id>13631071</id><snippet>def updateNgenes(self):
#Updating the number of genes
    self.ngenes = len(self.genes.keys()) 
</snippet></ROW><ROW><id>13631071</id><snippet>len(self.genes.keys())</snippet></ROW><ROW><id>13631071</id><snippet>list</snippet></ROW><ROW><id>13631071</id><snippet>len(self.genes)</snippet></ROW><ROW><id>13631071</id><snippet>ngenes</snippet></ROW><ROW><id>13631071</id><snippet>@property
def ngenes(self):
    return len(self.genes)
</snippet></ROW><ROW><id>13631071</id><snippet>nproteins</snippet></ROW><ROW><id>13631071</id><snippet>Gene</snippet></ROW><ROW><id>13631071</id><snippet>class Species:
    '''This structure contains all the information needed for all genes.
    One specie have several genes, one gene several proteins'''

    def __init__(self, name):
        self.name = name #name of the GENE
        self.genes = {}

    def addProtein(self, gene, protname, len):
        #Converting a line from the input file into a protein and/or an exon
        if gene not in self.genes:
            self.genes[gene] = Gene(gene) 
        self.genes[gene].proteins[protname] = Protein(protname, len)

    @property
    def ngenes(self):
        return len(self.genes)

class Protein:
    #The class protein contains information about the length of the protein and a list with it's exons (with it's own attributes)
    def __init__(self, name, len):
        self.name = name
        self.len = len

class Gene:
    #The class gene contains information about the gene and a dict with it's proteins (with it's own attributes)
    def __init__(self, name):
        self.name = name
        self.proteins = {}

    @property
    def nproteins(self):
        return len(self.proteins)
</snippet></ROW><ROW><id>13631295</id><snippet>try-except</snippet></ROW><ROW><id>13631295</id><snippet>def myfunc(x):
    try:
       x = x.splitlines(True)
    except AttributeError:
       pass #likely a file

    for line in x:
       doSomething(line)
</snippet></ROW><ROW><id>13631295</id><snippet>try:
   from cStringIO import StringIO
except ImportError:   #python 3
   from io import StringIO

def myfunc(x):
    try:
       x.seek(0)
    except AttributeError: #likely a string
       x = StringIO(x)

    for line in x:
       doSomething(line)
</snippet></ROW><ROW><id>13631541</id><snippet>g</snippet></ROW><ROW><id>13631541</id><snippet>session</snippet></ROW><ROW><id>13631541</id><snippet>session</snippet></ROW><ROW><id>13631541</id><snippet>g</snippet></ROW><ROW><id>13631541</id><snippet>simple != secure</snippet></ROW><ROW><id>13631541</id><snippet>@app.before_request
def load_user():
    if session["user_id"]:
        user = User.query.filter_by(username=session["user_id"]).first()
    else:
        user = {"name": "Guest"}  # Make it better, use an anonymous User instead

    g.user = user
</snippet></ROW><ROW><id>13631590</id><snippet>float32</snippet></ROW><ROW><id>13631590</id><snippet>float64</snippet></ROW><ROW><id>13631590</id><snippet>&gt;&gt;&gt; src1 = cv2.imread('sudoku.jpg',0)   # load first image in grayscale
&gt;&gt;&gt; src2 = cv2.imread('su1.png',0)      # load second image in grayscale
&gt;&gt;&gt; src1 = np.float32(src1)             # convert first into float32
&gt;&gt;&gt; src2 = np.float32(src2)             # convert second into float32  
&gt;&gt;&gt; ret = cv2.phaseCorrelate(src1,src2) # now calculate the phase correlation
&gt;&gt;&gt; ret
(-0.024777238426224812, 0.0011736626157130559)
</snippet></ROW><ROW><id>13631590</id><snippet>code.opencv.org</snippet></ROW><ROW><id>13631619</id><snippet>Plugin_A</snippet></ROW><ROW><id>13631619</id><snippet>External_Function</snippet></ROW><ROW><id>13631619</id><snippet>Plugin_A</snippet></ROW><ROW><id>13631619</id><snippet>My_apps</snippet></ROW><ROW><id>13631619</id><snippet>Analysis</snippet></ROW><ROW><id>13631619</id><snippet>External_Function</snippet></ROW><ROW><id>13631619</id><snippet>Analysis</snippet></ROW><ROW><id>13631619</id><snippet>Plugin_A.py</snippet></ROW><ROW><id>13631619</id><snippet>def External_Function(self, analysis):
    analysis.Analyze_Stuff()
    print analysis.Amplitudes_1
</snippet></ROW><ROW><id>13631619</id><snippet>My_apps.py</snippet></ROW><ROW><id>13631619</id><snippet>   ...

   def Execute_a_Plugin(self):
       plugins.Plugin_A.External_Function(self, analysis)

if __name__ == "__main__":

    analysis = Analysis()
    plugins = Plugins()
    plugins.Execute_a_Plugin()
</snippet></ROW><ROW><id>13631770</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; a[bisect.bisect_left(a, 6):]
[7, 9]
</snippet></ROW><ROW><id>13631815</id><snippet>[1]: import networkx as nx
[2]: nx.draw?
</snippet></ROW><ROW><id>13631815</id><snippet>**kwds: optional keywords
   See networkx.draw_networkx() for a description of optional keywords.
</snippet></ROW><ROW><id>13631815</id><snippet>[10]: nx.draw_networkx?
</snippet></ROW><ROW><id>13631815</id><snippet>node_color: color string, or array of floats
edge_color: color string, or array of floats
width: float
   Line width of edges (default =1.0)
labels: dictionary
   Node labels in a dictionary keyed by node of text labels (default=None)
</snippet></ROW><ROW><id>13631815</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import networkx as nx
import string

G = nx.generators.erdos_renyi_graph(18, 0.2)
nx.draw(G,
        node_color = np.linspace(0,1,len(G.nodes())),
        edge_color = np.linspace(0,1,len(G.edges())),
        width = 3.0,
        labels = {n:l for n,l in zip(G.nodes(),string.ascii_uppercase)}
        )
plt.show()
</snippet></ROW><ROW><id>13632007</id><snippet>print("{:d}m".format(100+(distance//100)))
</snippet></ROW><ROW><id>13632007</id><snippet>In [16]: distance = 50; "{:d}m".format(100+(distance//100))
Out[16]: '100m'

In [17]: distance = 360; "{:d}m".format(100+(distance//100))
Out[17]: '103m'

In [18]: distance = 3605; "{:d}m".format(100+(distance//100))
Out[18]: '136m'
</snippet></ROW><ROW><id>13632147</id><snippet>meta refresh</snippet></ROW><ROW><id>13632147</id><snippet>&lt;meta http-equiv="refresh" content="20" /&gt;
</snippet></ROW><ROW><id>13632147</id><snippet>&lt;iframe class="realtime-data" src="/cgi-bin/realtime.py"&gt;&lt;/iframe&gt;
</snippet></ROW><ROW><id>13632147</id><snippet>load()</snippet></ROW><ROW><id>13632147</id><snippet>setInterval(function() {
    $('#div_where_html_goes').load('/cgi-bin/realtime.py')
}, 20000); // 20k milliseconds
</snippet></ROW><ROW><id>13632147</id><snippet>&lt;script type="text/javascript"&gt;
// &lt;![CDATA[ &lt;!--
    (function($){
        $(function(){

            setInterval(function() {
                $('#div_where_html_goes').load('/cgi-bin/realtime.py')
            }, 20000); // 20k milliseconds

        })
    })(jQuery);
// --&gt; ]]&gt;
&lt;/script&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>13632225</id><snippet>from flask import Flask, render_template, request
from wtforms import Form, TextField, HiddenField

app = Flask(__name__)

class TestForm(Form):
  fld1 = HiddenField("Field 1")
  fld2 = TextField("Field 2")


@app.route('/', methods=["POST", "GET"])
def index():
  form = TestForm(request.values, fld1="foo", fld2="bar")
  if request.method == 'POST' and form.validate():
    return str(form.data)

  return render_template('experiment.html', form = form)

if __name__ == '__main__':
  app.run()
</snippet></ROW><ROW><id>13632225</id><snippet>&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
    &lt;form method=post action="/exp"&gt;
        {% for field in form %}
            {{field}}
        {% endfor %}
        &lt;input type=submit value="Post"&gt;
    &lt;/form&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13632308</id><snippet>filter(None, map(foo, range(10)))
</snippet></ROW><ROW><id>13632308</id><snippet>map()</snippet></ROW><ROW><id>13632308</id><snippet>itertools.imap()</snippet></ROW><ROW><id>13632308</id><snippet>itertools.ifilter()</snippet></ROW><ROW><id>13632308</id><snippet>itertools.ifilter(None, itertools.imap(foo, range(10)))
</snippet></ROW><ROW><id>13632496</id><snippet>d = {('i2', 'i3'): '4', ('i1',): '1',('i1', 'i3', 'i4'): '6.5', ('i3',): '3',
     ('i1', 'i2', 'i3'): '4.5', ('i2',): '2', ('i4',): '4'}
from itertools import combinations
combos = list(combinations(d, 4)) # you should try combos of different lenghts, 
                                  # from 1 to the number of desired items
</snippet></ROW><ROW><id>13632496</id><snippet>print combos[0]</snippet></ROW><ROW><id>13632496</id><snippet>(('i2', 'i3'), ('i1',), ('i1', 'i3', 'i4'), ('i3',))</snippet></ROW><ROW><id>13632496</id><snippet>sum([float(d[item]) for item in combos[0]])
</snippet></ROW><ROW><id>13632560</id><snippet>map</snippet></ROW><ROW><id>13632560</id><snippet>operator.methodcaller</snippet></ROW><ROW><id>13632560</id><snippet>&gt;&gt;&gt; def foo(*args):
...    print 'foo',args
... 
&gt;&gt;&gt; def bar(*args):
...    print 'bar',args
... 
&gt;&gt;&gt; from operator import methodcaller
&gt;&gt;&gt; 
&gt;&gt;&gt; map(methodcaller('__call__',1,2,3),[foo,bar])
foo (1, 2, 3)
bar (1, 2, 3)
[None, None]
</snippet></ROW><ROW><id>13632560</id><snippet>map</snippet></ROW><ROW><id>13632560</id><snippet>map</snippet></ROW><ROW><id>13632560</id><snippet>[fn() for fn in self.pre]
[fn(val) for fn in self.mid]
</snippet></ROW><ROW><id>13632639</id><snippet>amount = re.findall(r'Above \xC2 (.*?) =', html)
</snippet></ROW><ROW><id>13632740</id><snippet>In [25]: zip(a,b,c,d,e,f,g)
Out[25]: 
[(10, 23, 20, 15, 12, 10, 8),
 (12, 25, 22, 17, 12, 8, 5),
 (12, 27, 21, 17, 12, 8, 4),
 (13, 28, 24, 23, 14, 7, 6),
 (15, 21, 27, 24, 12, 8, 7),
 (12, 24, 23, 26, 13, 7, 8),
 (17, 27, 23, 29, 14, 8, 5),
 (15, 25, 34, 25, 13, 9, 4),
 (12, 24, 23, 25, 12, 10, 3),
 (20, 29, 30, 27, 14, 6, 5),
 (10, 21, 23, 12, 15, 8, 6)]
</snippet></ROW><ROW><id>13632740</id><snippet>p</snippet></ROW><ROW><id>13632740</id><snippet>q</snippet></ROW><ROW><id>13632740</id><snippet>r</snippet></ROW><ROW><id>13632740</id><snippet>In [27]: zipped = zip(a,b,c,d,e,f,g)

In [28]: p,q,r = zipped[0:3]

In [29]: p
Out[29]: (10, 23, 20, 15, 12, 10, 8)

In [30]: q
Out[30]: (12, 25, 22, 17, 12, 8, 5)

In [31]: r
Out[31]: (12, 27, 21, 17, 12, 8, 4)
</snippet></ROW><ROW><id>13632740</id><snippet>08</snippet></ROW><ROW><id>13632847</id><snippet>count = reply['f'][0]['v']</snippet></ROW><ROW><id>13632847</id><snippet>reply</snippet></ROW><ROW><id>13632847</id><snippet>'f'</snippet></ROW><ROW><id>13632847</id><snippet>'rows'</snippet></ROW><ROW><id>13632905</id><snippet>for event in pygame.event.get():</snippet></ROW><ROW><id>13632905</id><snippet>CREEP_SPAWN_TIME = 200 # frames

creep_spawn = CREEP_SPAWN_TIME

clock = pygame.time.Clock()
bg_tile_img = pygame.image.load('images/map/grass.png').convert()
img_rect = bg_tile_img
FIELD_RECT = Rect(50, 50, 300, 300)
CREEP_FILENAMES = [
     'images/player/1.png', 
    'images/player/1.png', 
    'images/player/1.png']
N_CREEPS = 3

creep_images = [
    pygame.image.load(filename).convert_alpha() 
    for filename in CREEP_FILENAMES]
explosion_img = pygame.image.load('images/map/tree.png').convert_alpha()
explosion_images = [
    explosion_img, pygame.transform.rotate(explosion_img, 90)]

creeps = pygame.sprite.RenderPlain()

done = False
while done == False:  # Main loop

    time_passed = clock.tick(60)

    for event in pygame.event.get():
        ...

    creep_spawn -= 1
    if creep_spawn == 0:
        creep_spawn = CREEP_SPAWN_TIME

        # Add new creep
        if len(creeps) &lt; N_CREEPS:
            creeps.add(
                Creep(  screen=screen,
                    creep_image=choice(creep_images), 
                    explosion_images=explosion_images,
                    field=FIELD_RECT,
                    init_position=( randint(FIELD_RECT.left, 
                                            FIELD_RECT.right), 
                                    randint(FIELD_RECT.top, 
                                            FIELD_RECT.bottom)), 
                    init_direction=(choice([-1, 1]), 
                                    choice([-1, 1])),
                    speed=0.03))

    player.update(wall_list)

    draw_background(screen, bg_tile_img)
    for creep in creeps:
        creep.update(time_passed)
        creep.draw()

    movingsprites.draw(screen)
    wall_list.draw(screen)
    pygame.display.flip()
</snippet></ROW><ROW><id>13632970</id><snippet>None</snippet></ROW><ROW><id>13632970</id><snippet>None</snippet></ROW><ROW><id>13632970</id><snippet>sentinel</snippet></ROW><ROW><id>13632970</id><snippet>sentinel = object()
def func(arg=sentinel):
    if arg is sentinel:
       arg = "default"
    do_code()
</snippet></ROW><ROW><id>13632970</id><snippet>Ellipsis</snippet></ROW><ROW><id>13632970</id><snippet>...</snippet></ROW><ROW><id>13632970</id><snippet>*args</snippet></ROW><ROW><id>13632970</id><snippet>def func(*args):
   if len(args) == 3:
       start,stop,step=args
   elif len(args) == 2:
       start,stop = args
       step = None
   elif len(args) == 1:
       stop, = args  #Need the comma here.  Could write `stop = args[0]` instead ...
       step = start = None
   else:
       raise TypeError("Wrong number of arguments!")
</snippet></ROW><ROW><id>13633105</id><snippet>if subprocess.Popen('nmap '+ip+' &gt;&gt; //root/Desktop/Target.txt &amp;&amp; tail /root/Desktop/Target.txt',shell=True).wait() == 0:
</snippet></ROW><ROW><id>13633105</id><snippet>if subprocess.Popen('nmap '+str(ip)+' &gt;&gt; //root/Desktop/Target.txt &amp;&amp; tail /root/Desktop/Target.txt',shell=True).wait() == 0:
</snippet></ROW><ROW><id>13633459</id><snippet>["java", "-Xmx256m", "-jar", "bin/HelloWorld.jar"]</snippet></ROW><ROW><id>13633459</id><snippet>cmd = ["java", "-Xmx256m", "-jar", "bin/HelloWorld.jar"]
cwd = r'/home/karen/sphinx4-1.0beta5-src/sphinx4-1.0beta5/'
p = subprocess.Popen(cmd, cwd=cwd, shell=True, stdout=subprocess.PIPE, bufsize=4024 )

out, err = p.communicate()
print out
</snippet></ROW><ROW><id>13633528</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>13633528</id><snippet>from itertools import groupby
my_list = [[1,2,3,1,2],[1,0,3,1,2],[1,0,0,0,2],[1,0,3,0,2]]
new_list = [[len(list(g)) for k, g in groupby(inner, bool) if k] for inner in my_list]
</snippet></ROW><ROW><id>13633528</id><snippet>&gt;&gt;&gt; new_list
[[5], [1, 3], [1, 1], [1, 1, 1]]
</snippet></ROW><ROW><id>13633528</id><snippet>[1,0,3,1,2]</snippet></ROW><ROW><id>13633528</id><snippet>[1,3]</snippet></ROW><ROW><id>13633591</id><snippet>['a1 a2', 'a3 a5']</snippet></ROW><ROW><id>13633591</id><snippet>'a1 a2'</snippet></ROW><ROW><id>13633591</id><snippet>' a3 a5 a6'</snippet></ROW><ROW><id>13633591</id><snippet>'a3 a5'</snippet></ROW><ROW><id>13633591</id><snippet>' a6'</snippet></ROW><ROW><id>13633591</id><snippet>'a1 a3'</snippet></ROW><ROW><id>13633591</id><snippet>'a1 a5'</snippet></ROW><ROW><id>13633591</id><snippet>r=re.compile(r"(\S{2})(?:\s|$)")
pairs =r.findall("a1 a2 a3 a5 a6")
</snippet></ROW><ROW><id>13633591</id><snippet>pairs = re.findall(r"(\S{2})(?:\s|$)", "a1 a2 a3 a5 a6")
</snippet></ROW><ROW><id>13633591</id><snippet>['a1', 'a2', 'a3', 'a5', 'a6']</snippet></ROW><ROW><id>13633591</id><snippet>for ifirst in range(len(pairs) - 1):
    for second in pairs[ifirst + 1:]:
        print " ".join((pairs[ifirst], second))
</snippet></ROW><ROW><id>13633685</id><snippet>%s</snippet></ROW><ROW><id>13633685</id><snippet>&gt;&gt;&gt; print '%(language)s has %(number)03d quote types.' % \
...       {"language": "Python", "number": 2}
Python has 002 quote types.
</snippet></ROW><ROW><id>13633685</id><snippet>()</snippet></ROW><ROW><id>13633685</id><snippet>%</snippet></ROW><ROW><id>13633685</id><snippet>s</snippet></ROW><ROW><id>13633685</id><snippet>key</snippet></ROW><ROW><id>13633776</id><snippet>In [18]: l = [random.randint(0, 10) for i in range(300)]

In [19]: plot(l)
Out[19]: [&lt;matplotlib.lines.Line2D at 0x9241f60&gt;]

In [20]: plt.xlim(xmin=5)       # I set to start at 5. No label is draw
Out[20]: (5, 300.0)

In [21]: plt.xticks(arange(5, 301, 50))  # this makes the first xtick at left to be 5
                                         # note the max range is 301, otherwise you will never
                                         # get 300 even if you set the appropriate step
</snippet></ROW><ROW><id>13633776</id><snippet>max - min / step</snippet></ROW><ROW><id>13633776</id><snippet>In [38]: plt.xticks(arange(5, 301, 29.5)) 
</snippet></ROW><ROW><id>13633861</id><snippet>In [53]: strs="# Nmap done at Tue Nov 27 10:09:18 2012 -- 512 IP addresses (17 hosts up) scanned in 143.58 seconds"

In [55]: re.findall("(\d+)\s+IP address",strs)
Out[55]: ['512']

In [56]: re.findall("(\d+)\s+hosts up",strs)
Out[56]: ['17']
</snippet></ROW><ROW><id>13633979</id><snippet>for sub_list in my_list:
    for dx in (0, -1):
        while sub_list and sub_list[dx] == 0:
            sub_list.pop(dx)
</snippet></ROW><ROW><id>13634420</id><snippet>original_dict</snippet></ROW><ROW><id>13634420</id><snippet>original_dict[runners]</snippet></ROW><ROW><id>13634420</id><snippet>runner_list = original_dict["runners"]
for runner in runner_list:
   name_you_are_looking_for = runner["name"]
</snippet></ROW><ROW><id>13634549</id><snippet>def split_a_list_at_zeros(L):
    ...
    return the_split_list

my_list = [split_a_list_at_zeros(item) for item in my_list]
</snippet></ROW><ROW><id>13634549</id><snippet>from itertools import groupby
def split_a_list_at_zeros(L):
    return [list(g) for k, g in groupby(L, key=lambda x:x!=0) if k]
</snippet></ROW><ROW><id>13634643</id><snippet>import wmi
import time

time_to_sleep  = 30

c = wmi.WMI()
process_info = {}    

while True:
    for process in c.Win32_Process ():
            id = process.ProcessID
            for p in c.Win32_PerfRawData_PerfProc_Process (IDProcess=id):
                n1, d1 = long (p.PercentProcessorTime), long (p.Timestamp_Sys100NS)
                n0, d0 = process_info.get (id, (0, 0))
                try:
                    percent_processor_time = (float (n1 - n0) / float (d1 - d0)) *100.0
                except ZeroDivisionError:
                    percent_processor_time = 0.0
                process_info[id] = (n1, d1)
                print id, process.Caption, str(percent_processor_time)
    time.sleep(time_to_sleep)
</snippet></ROW><ROW><id>13635021</id><snippet>codecs</snippet></ROW><ROW><id>13635021</id><snippet>&gt;&gt;&gt; line=u'abcش'
&gt;&gt;&gt; line.find(u'ش')
3
</snippet></ROW><ROW><id>13635021</id><snippet>&gt;&gt;&gt; f = codecs.open(r'c:\temp\temp.txt', 'r', 'utf-8-sig')
&gt;&gt;&gt; line = f.readline()
&gt;&gt;&gt; print line
This is a test.ش

&gt;&gt;&gt; line.find(u'\u0634')
15
</snippet></ROW><ROW><id>13635074</id><snippet>lst1, lst2 = zip(*zipped_list)
</snippet></ROW><ROW><id>13635074</id><snippet>*zipped_list</snippet></ROW><ROW><id>13635074</id><snippet>a = [1,2,3]
b = [4,5,6]
</snippet></ROW><ROW><id>13635074</id><snippet>zipped_list = zip(a,b)</snippet></ROW><ROW><id>13635074</id><snippet>[(1,4), (2,5), (3,6)]
</snippet></ROW><ROW><id>13635074</id><snippet>*zipped_list</snippet></ROW><ROW><id>13635074</id><snippet>(1,4), (2,5), (3,6)
</snippet></ROW><ROW><id>13635082</id><snippet>reindex_like()</snippet></ROW><ROW><id>13635082</id><snippet>reindex_like()</snippet></ROW><ROW><id>13635082</id><snippet>dtype</snippet></ROW><ROW><id>13635082</id><snippet>bool</snippet></ROW><ROW><id>13635082</id><snippet>object</snippet></ROW><ROW><id>13635082</id><snippet>&gt;&gt;&gt; series = pandas.Series([1, 2, 3])
&gt;&gt;&gt; x = pandas.Series([True])
&gt;&gt;&gt; x.dtype
dtype('bool')
&gt;&gt;&gt; x = pandas.Series([True]).reindex_like(series)
&gt;&gt;&gt; x.dtype
dtype('object')
</snippet></ROW><ROW><id>13635185</id><snippet>info commands</snippet></ROW><ROW><id>13635185</id><snippet>def main():                                                          
    fout = CleanFile ("options.log_file.log", 'w')                   

    sys.stdout = os.fdopen (sys.stdout.fileno(), 'w', 0)             
    os.dup2 (fout.fileno(), sys.stdout.fileno());                    

    p = pexpect.spawn ('tclsh')                                      
    p.expect (['%',pexpect.EOF])                                     

    p.sendline('ls');                                                
    p.expect (['%',pexpect.EOF])                                     
    ls = p.before                                                    

    p.sendline('info tclversion');                                   
    p.expect (['%',pexpect.EOF])                                     
    tclversion = p.before                                            

    p.sendline('info commands');                                     
    p.expect (['%',pexpect.EOF])                                     
    commands = p.before                                              

    p.sendline('exit');                                              
    p.close()                                                        

    print "Got into tclsh."                                          
    print ls                                                         
    print tclversion                                                 
    print "Got the version\n"                                        
    print commands                                                   
    print "Ended session"                                            
</snippet></ROW><ROW><id>13635185</id><snippet>Got into tclsh.                                                      
 ls                                                                  
options.log_file.log  pexpect_test.py                                

 info tclversion                                                     
8.5                                                                  

Got the version                                                      

 info commands                                           
tell socket subst open eof pwd glob list pid exec auto_load_index time unknown  
eval lassign lrange fblocked lsearch auto_import gets case lappend proc break v 
ariable llength auto_execok return linsert error catch clock info split array i 
f fconfigure concat join lreplace source fcopy global switch auto_qualify updat 
e close cd for auto_load file append lreverse format unload read package set bi 
nary namespace scan apply trace seek while chan flush after vwait dict continue 
 uplevel foreach lset rename fileevent regexp lrepeat upvar encoding expr unset 
 load regsub history interp exit puts incr lindex lsort tclLog string           

Ended session                                                        
</snippet></ROW><ROW><id>13635243</id><snippet>str.title()</snippet></ROW><ROW><id>13635243</id><snippet>In [73]: a, b = "italic","ITALIC"

In [74]: a.title(), b.title()
Out[74]: ('Italic', 'Italic')
</snippet></ROW><ROW><id>13635243</id><snippet>str.title()</snippet></ROW><ROW><id>13635243</id><snippet>S.title() -&gt; string

Return a titlecased version of S, i.e. words start with uppercase
characters, all remaining cased characters have lowercase.
</snippet></ROW><ROW><id>13635275</id><snippet>bruteForceLeft</snippet></ROW><ROW><id>13635275</id><snippet>def bruteForceLeft(selected,index):
    #left is the list of which i need subsets
    if index==len(left):
        #print(selected)
        yield selected
    else:
        #the algorithm stores the selection in a tuple of two lists
        #that's necessary since there's a second list called right as well
        #I think you can just ignore this. Think of selected as a list that
        #contains the current selection, not a tuple that contains the current
        #selection on the right as well as the left side.
        selected[0].append(left[index])
        for s in bruteForceLeft(selected,index+1):
            yield s
        selected[0].pop()
        for s in bruteForceLeft(selected,index+1):
            yield s
</snippet></ROW><ROW><id>13635826</id><snippet>src = mlab.pipeline.scalar_scatter(x,y,z,s)
iso=mlab.pipeline.iso_surface(gs)
</snippet></ROW><ROW><id>13635860</id><snippet>select</snippet></ROW><ROW><id>13635860</id><snippet>def __init__(self):
    self.sockets = [] # add clients here, along with listener
    self.authsockets = [] # add authenticated clients here
    self.buffers = defaultdict(str)

def loop(self):
    r, w, x = select.select([sockets], [sockets], [sockets])
    for sock in r:
        buffers[sock] = buffers[sock] + sock.recv(4096)
        lines = buffers[sock].split('\n')
        if buffers[sock][-1] != '\n':
            buffers[sock], lines = lines[-1], lines[:-1]
        else:
            buffers[sock] = ''
        for line in lines:
            processCommand(sock, line)
    # etc.

def processCommand(self, sock, command):
    if self.isAuthCommand(command):
        if self.isValidAuthCommand(command):
            self.authsockets.append(sock)
        return
    if not sock in self.authsockets:
        return # ignore commands before auth
    self.doNormalThing(command)
</snippet></ROW><ROW><id>13635860</id><snippet>select</snippet></ROW><ROW><id>13635890</id><snippet>input.remove(possible_word)</snippet></ROW><ROW><id>13635890</id><snippet>&gt;&gt;&gt; lst = ['a', 'b', 'c']
&gt;&gt;&gt; for el in lst:
    print el
    lst.remove(el)

a
c
</snippet></ROW><ROW><id>13636193</id><snippet>while True:
  result = pipe.stdout.readline()
  if not result:
    break
  # do something with result
</snippet></ROW><ROW><id>13636193</id><snippet>readline</snippet></ROW><ROW><id>13636193</id><snippet>EOF</snippet></ROW><ROW><id>13636193</id><snippet>use English qw(-no_match_vars);
local $OUTPUT_AUTOFLUSH = 1;
print ...;
</snippet></ROW><ROW><id>13636295</id><snippet>isinstance()</snippet></ROW><ROW><id>13636295</id><snippet>isinstance()</snippet></ROW><ROW><id>13636295</id><snippet>isinstance()</snippet></ROW><ROW><id>13636295</id><snippet>isinstance(var, basestring)</snippet></ROW><ROW><id>13636374</id><snippet>MyClassView</snippet></ROW><ROW><id>13636374</id><snippet>reverse</snippet></ROW><ROW><id>13636374</id><snippet>class MyClassView(View):
    def get(self, request):
        home_url = reverse_lazy('home')
        return render_to_response('home.html', {'home_url': home_url}, 
</snippet></ROW><ROW><id>13636374</id><snippet>reverse</snippet></ROW><ROW><id>13636374</id><snippet>get</snippet></ROW><ROW><id>13636374</id><snippet>sidebar_activeusers</snippet></ROW><ROW><id>13636374</id><snippet>reverse</snippet></ROW><ROW><id>13636374</id><snippet>reverse_lazy</snippet></ROW><ROW><id>13636374</id><snippet>reverse_lazy</snippet></ROW><ROW><id>13636374</id><snippet>from django.core.urlresolvers import reverse_lazy

class MyOtherClassView(View):
    home_url = reverse_lazy('home')

    def get(self, request):
        return render_to_response('home.html', {'home_url':self.home_url}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13636374</id><snippet>home_url</snippet></ROW><ROW><id>13636374</id><snippet>reverse_lazy</snippet></ROW><ROW><id>13636497</id><snippet>pip</snippet></ROW><ROW><id>13636497</id><snippet>virtualenv</snippet></ROW><ROW><id>13636497</id><snippet>virtualenv</snippet></ROW><ROW><id>13636497</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>13636497</id><snippet>requirements.txt</snippet></ROW><ROW><id>13636497</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>13636497</id><snippet>pip install</snippet></ROW><ROW><id>13636497</id><snippet>requirements.txt</snippet></ROW><ROW><id>13636497</id><snippet>pip freeze &gt; requirements.txt</snippet></ROW><ROW><id>13636497</id><snippet>virtualenv</snippet></ROW><ROW><id>13636497</id><snippet>requirements.txt</snippet></ROW><ROW><id>13636689</id><snippet>m &lt; a</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; m = np.array((1, 3, 10, 5))
&gt;&gt;&gt; a = 6
&gt;&gt;&gt; m2 = m &lt; a
&gt;&gt;&gt; m2
array([ True,  True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>13636689</id><snippet>False==0</snippet></ROW><ROW><id>13636689</id><snippet>True==1</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; m3 = m - m2
&gt;&gt;&gt; m3
&gt;&gt;&gt; array([ 0,  2, 10,  4])
</snippet></ROW><ROW><id>13636689</id><snippet>for i in len(x):
  for j in in len(x):
    #!= not so important
    ##earlier question I asked lets me figure that one out
    if i!=j: 
      if x[j] - x[i] &lt; a:
        True
</snippet></ROW><ROW><id>13636689</id><snippet>a</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; a = -2
&gt;&gt;&gt; comparisons = np.array([m - x &lt; a for x in m])
&gt;&gt;&gt; flattened = np.any(comparisons, 0)
&gt;&gt;&gt; flattened
array([ True,  True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>13636689</id><snippet>m</snippet></ROW><ROW><id>13636689</id><snippet>m</snippet></ROW><ROW><id>13636689</id><snippet>m - m.T</snippet></ROW><ROW><id>13636689</id><snippet>numpy</snippet></ROW><ROW><id>13636689</id><snippet>a</snippet></ROW><ROW><id>13636689</id><snippet>any</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; a = -2
&gt;&gt;&gt; m = np.matrix((1, 3, 10, 5))
&gt;&gt;&gt; subtractions = m - m.T
&gt;&gt;&gt; subtractions
matrix([[ 0,  2,  9,  4],
        [-2,  0,  7,  2],
        [-9, -7,  0, -5],
        [-4, -2,  5,  0]])
&gt;&gt;&gt; comparisons = subtractions &lt; a
&gt;&gt;&gt; comparisons
matrix([[False, False, False, False],
        [False, False, False, False],
        [ True,  True, False,  True],
        [ True, False, False, False]], dtype=bool)
&gt;&gt;&gt; np.any(comparisons, 0)
matrix([[ True,  True, False,  True]], dtype=bool)
</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; np.any((m - m.T) &lt; a, 0)
matrix([[ True,  True,  True,  True]], dtype=bool)
</snippet></ROW><ROW><id>13636689</id><snippet>m</snippet></ROW><ROW><id>13636689</id><snippet>m - np.matrix(m).T</snippet></ROW><ROW><id>13636689</id><snippet>numpy</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; m = np.array([[1,2], [3,4]]) # 2x2
&gt;&gt;&gt; m4d = m.reshape(1, 1, 2, 2)  # 1x1x2x2
&gt;&gt;&gt; m4d
array([[[[1, 2],
         [3, 4]]]])
&gt;&gt;&gt; mt4d = m4d.T # 2x2x1x1
&gt;&gt;&gt; mt4d
array([[[[1]],
        [[3]]],
       [[[2]],
        [[4]]]])
&gt;&gt;&gt; subtractions = m - mt4d # 2x2x2x2
&gt;&gt;&gt; subtractions
array([[[[ 0,  1],
         [ 2,  3]],
        [[-2, -1],
         [ 0,  1]]],
       [[[-1,  0],
         [ 1,  2]],
        [[-3, -2],
         [-1,  0]]]])
</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; np.any((m - m.reshape(1, 1, 2, 2).T) &lt; a, 0)
</snippet></ROW><ROW><id>13636689</id><snippet>reshape</snippet></ROW><ROW><id>13636689</id><snippet>m</snippet></ROW><ROW><id>13636689</id><snippet>y</snippet></ROW><ROW><id>13636689</id><snippet>m</snippet></ROW><ROW><id>13636689</id><snippet>x - y &lt; a</snippet></ROW><ROW><id>13636689</id><snippet>x</snippet></ROW><ROW><id>13636689</id><snippet>m</snippet></ROW><ROW><id>13636689</id><snippet>y</snippet></ROW><ROW><id>13636689</id><snippet>y</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; (m - m.max()) &lt; a
</snippet></ROW><ROW><id>13636689</id><snippet>a</snippet></ROW><ROW><id>13636689</id><snippet>&gt;&gt;&gt; np.zeros(m.shape, dtype=bool)
</snippet></ROW><ROW><id>13636689</id><snippet>abs(x - y)</snippet></ROW><ROW><id>13636766</id><snippet>expr</snippet></ROW><ROW><id>13636766</id><snippet>\1</snippet></ROW><ROW><id>13636766</id><snippet>&gt;&gt;&gt; expr = r'\s+([A-Z][a-z]+[A-Z][a-z]+)\s'
&gt;&gt;&gt; parser=re.compile(expr)
&gt;&gt;&gt; parser.sub(repl, mystr)
'this is a string to Test whether&lt;a href="/photos/WikiLink"&gt;WikiLink&lt;/a&gt;will work ProPerly'
</snippet></ROW><ROW><id>13636766</id><snippet>\1</snippet></ROW><ROW><id>13636766</id><snippet>\2</snippet></ROW><ROW><id>13636766</id><snippet>\1</snippet></ROW><ROW><id>13636766</id><snippet>'\1'</snippet></ROW><ROW><id>13636766</id><snippet>'\x01'</snippet></ROW><ROW><id>13636766</id><snippet>g</snippet></ROW><ROW><id>13636766</id><snippet>123\1456</snippet></ROW><ROW><id>13636766</id><snippet>123</snippet></ROW><ROW><id>13636766</id><snippet>456</snippet></ROW><ROW><id>13636766</id><snippet>123</snippet></ROW><ROW><id>13636981</id><snippet>__new__</snippet></ROW><ROW><id>13636981</id><snippet>class Singleton(object):

    def __new__(cls):

        try:
            return cls._instance
        except AttributeError:
            cls._instance = object.__new__(cls)
            return cls._instance
</snippet></ROW><ROW><id>13636981</id><snippet>__new__()</snippet></ROW><ROW><id>13636981</id><snippet>__new__()</snippet></ROW><ROW><id>13636981</id><snippet>__init__()</snippet></ROW><ROW><id>13637005</id><snippet>df['year'] = df['year'].where(source_years!=0,df['year'])
</snippet></ROW><ROW><id>13637040</id><snippet>for myDict in [dict1, dict1, dict3]:
  myDict[key] = value
</snippet></ROW><ROW><id>13637040</id><snippet>for idx, myDict in enumerate([dict1, dict2, dict3]):
  myDict['position'] = idx
</snippet></ROW><ROW><id>13637385</id><snippet>gender()</snippet></ROW><ROW><id>13637385</id><snippet>attributeSelection</snippet></ROW><ROW><id>13637764</id><snippet>\</snippet></ROW><ROW><id>13637764</id><snippet>'</snippet></ROW><ROW><id>13637764</id><snippet>"</snippet></ROW><ROW><id>13637764</id><snippet>"""</snippet></ROW><ROW><id>13637764</id><snippet>"</snippet></ROW><ROW><id>13637764</id><snippet>'</snippet></ROW><ROW><id>13637764</id><snippet>'\''</snippet></ROW><ROW><id>13637764</id><snippet>'</snippet></ROW><ROW><id>13637764</id><snippet>pg_str = "psql -U pword dbname -A -t -c "
sql = """SELECT * FROM "Addresses" WHERE town='london'"""
sql = sql.replace("'", "'\\''")
os_str = pg_str + "'" + sql + "'" + ";"
data = string.split(os.popen(os_str).read())
</snippet></ROW><ROW><id>13637998</id><snippet>def find_stripped(soup, what):
  found = soup.find(what)
  if found != None:
    return found.text.strip()
  # maybe:
  # return ""
</snippet></ROW><ROW><id>13637998</id><snippet>foo_stuff = find_stripped(soup, "foo")</snippet></ROW><ROW><id>13638102</id><snippet>&gt;&gt;&gt; [ x for x in adict.keys() ]
['key3', 'key2', 'key1']
&gt;&gt;&gt; [ adict[x] for x in adict.keys() ]
[{'achar': 'c', 'avalue': 3}, {'achar': 'b', 'avalue': 2}, {'achar': 'a', 'avalue': 1}]
&gt;&gt;&gt; [ adict[x]['avalue'] for x in adict.keys() ]
[3, 2, 1]
&gt;&gt;&gt; sum([ adict[x]['avalue'] for x in adict.keys() ])
6
</snippet></ROW><ROW><id>13638115</id><snippet>enumerate()</snippet></ROW><ROW><id>13638115</id><snippet>with open(filename, "r") as in_f:
    numbers = []
    for line in in_f: 
        line = line.strip() # remove whitespace
        if line: # make sure there is something there
            number_on_line = int(line) 
            numbers.append(number_on_line)
    sum_of_numbers = sum(numbers)
    avg_of_numbers = sum(numbers)/len(numbers)
</snippet></ROW><ROW><id>13638115</id><snippet>csv</snippet></ROW><ROW><id>13638115</id><snippet>import csv
filename = "somefile"
with open(filename, "rb") as in_f: # &lt;-- notice "rb" is used
    reader = csv.reader(in_f)
    for row in reader:
        for col in row:
            # do stuff
            ...
</snippet></ROW><ROW><id>13638146</id><snippet>__getattr__</snippet></ROW><ROW><id>13638146</id><snippet>__dict__</snippet></ROW><ROW><id>13638146</id><snippet>__dict__</snippet></ROW><ROW><id>13638146</id><snippet>self.tool</snippet></ROW><ROW><id>13638146</id><snippet>self.tool.test</snippet></ROW><ROW><id>13638146</id><snippet>__getattr__</snippet></ROW><ROW><id>13638146</id><snippet>self.tool</snippet></ROW><ROW><id>13638146</id><snippet>object</snippet></ROW><ROW><id>13638146</id><snippet>self.tool</snippet></ROW><ROW><id>13638146</id><snippet>__getattr__</snippet></ROW><ROW><id>13638146</id><snippet>class Foo(object):
    def __init__(self):
        self.NameList=[]
        # add new class to ourself
        toolcls = type('tool', (object,), { '__getattr__' : self.__getattr__, } )
        self.tool = toolcls()
        self.NameList.append( "test" )

    # should be called by our newly added "tool" object but is only called sometimes...
    def __getattr__(self, attr):
        # print("__getattr__: (%s, %s)" % (self.__class__.__name__, attr) )
        if( attr in self.NameList ):     
            return( 99 )
        raise AttributeError("--%r object has no attribute %r" % (
            type(self).__name__, attr)) 

foo = Foo()
print( "foo.tool.__getattr__=%d" % foo.tool.__getattr__("test") )
print( "foo.tool.test=%d" % foo.tool.test )    
</snippet></ROW><ROW><id>13638146</id><snippet>foo.tool.__getattr__=99
foo.tool.test=99
</snippet></ROW><ROW><id>13638146</id><snippet>Foo</snippet></ROW><ROW><id>13638146</id><snippet>self.NameList</snippet></ROW><ROW><id>13638146</id><snippet>def __getattr__(self, attr):
    # print("__getattr__: (%s, %s)" % (self.__class__.__name__, attr) )
    if attr == 'NameList':
        raise AttributeError()
    if( attr in self.NameList ):     
        return( 99 )
    raise AttributeError("--%r object has no attribute %r" % (
        type(self).__name__, attr)) 
</snippet></ROW><ROW><id>13638207</id><snippet>def issorted(L):
    return all(x &lt;= y for x, y in zip(L, L[1:]))
</snippet></ROW><ROW><id>13638207</id><snippet>#!/usr/bin/env python3
from string import ascii_lowercase

def abcdearian(s):
    return issorted_recursive([c for c in s.lower() if c in ascii_lowercase])

def issorted_recursive(L):
    return L[0] &lt;= L[1] and issorted_recursive(L[1:]) if len(L) &gt; 1 else True
</snippet></ROW><ROW><id>13638207</id><snippet>issorted_recursive()</snippet></ROW><ROW><id>13638207</id><snippet>len(L) &lt;= 1</snippet></ROW><ROW><id>13638207</id><snippet>True</snippet></ROW><ROW><id>13638207</id><snippet>len(L) &gt; 1</snippet></ROW><ROW><id>13638207</id><snippet>L</snippet></ROW><ROW><id>13638207</id><snippet>L[0] &lt;= L[1]</snippet></ROW><ROW><id>13638207</id><snippet>L[1:]</snippet></ROW><ROW><id>13638207</id><snippet>L[0] &gt; L[1]</snippet></ROW><ROW><id>13638207</id><snippet>while True:
    s = input("String? ")
    if not s:
        break
    print("{} is {}abcdearian".format(s, "" if abcdearian(s) else "not "))
</snippet></ROW><ROW><id>13638207</id><snippet>String? abc is abcdearian
String? bac is not abcdearian
String? 
</snippet></ROW><ROW><id>13638327</id><snippet>t = Thread(target=enqueue_output, args=(p.stdout, q))
</snippet></ROW><ROW><id>13638327</id><snippet>t = threading.Thread(target=enqueue_output, args=(p.stdout, q))
</snippet></ROW><ROW><id>13638327</id><snippet>Thread</snippet></ROW><ROW><id>13638327</id><snippet>threading.Thread</snippet></ROW><ROW><id>13638327</id><snippet>threading</snippet></ROW><ROW><id>13638327</id><snippet>Thread</snippet></ROW><ROW><id>13638487</id><snippet>tail -f</snippet></ROW><ROW><id>13638487</id><snippet>import time

while 1:
    where = file.tell()
    line = file.readline()
    if not line:
        time.sleep(1)
        file.seek(where)
    else:
        print line, # already has newline
</snippet></ROW><ROW><id>13638521</id><snippet>project/
    decorators.py
    views.py
    urls.py

# decorators.py
from django.conf import settings
from django.utils.importlib import import_module
from django.conf.urls.defaults import patterns, url

def URL(path):
    path = r'^%s$' % path[1:]  # Add delimiters and remove opening slash
    def decorator(view):
        urls = import_module(settings.ROOT_URLCONF)
        urls.urlpatterns += patterns('', url(path, view))
        return view
    return decorator

# views.py
from .decorators import URL

@URL('/')
def home(request):
    # your view

@URL('/products')
def products(request):
    # your view


# urls.py
from django.conf.urls import patterns

from . import views  # import the modules with your views

urlpatterns = patterns('',)  # create an empty url dispatcher to append to
</snippet></ROW><ROW><id>13638597</id><snippet>partition_prime_factors</snippet></ROW><ROW><id>13638597</id><snippet>for j in partition_prime_factors(partition_structure, prime_factors):
    pass
</snippet></ROW><ROW><id>13638597</id><snippet>for j in partition_prime_factors(partition_structure, prime_factors):
    yield j
</snippet></ROW><ROW><id>13638650</id><snippet>self</snippet></ROW><ROW><id>13638650</id><snippet>class DownloadView(object):
    def serve_pdf(self, request):
        #pdf_data = magically_create_pdf()

        response = HttpResponse(mimetype='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="/test/angular.pdf"'
        return response
</snippet></ROW><ROW><id>13638650</id><snippet>url(r'download/$', views.DownloadView().serve_pdf, name="pdfdata-ddl" )
</snippet></ROW><ROW><id>13638757</id><snippet>SO_BROADCAST</snippet></ROW><ROW><id>13638757</id><snippet>s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
</snippet></ROW><ROW><id>13638757</id><snippet>SO_REUSEPORT</snippet></ROW><ROW><id>13638757</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>13638987</id><snippet>exclude</snippet></ROW><ROW><id>13638987</id><snippet>suggestions = Photo.objects.exclude(id=p.id).order_by('?')[:10]
</snippet></ROW><ROW><id>13639213</id><snippet>Preferences -&gt; Key Bindings - User</snippet></ROW><ROW><id>13639213</id><snippet>{
    "keys": ["f5"],
    "command": "run_existing_window_command", "args":
    {
        "id": "repl_python_run",
        "file": "config/Python/Main.sublime-menu"
    }
}
</snippet></ROW><ROW><id>13639255</id><snippet>long PyInt_AsLong(PyObject *io)</snippet></ROW><ROW><id>13639255</id><snippet>long PyInt_AsLong(PyObject *io)</snippet></ROW><ROW><id>13639272</id><snippet>import requests
sess = requests.session()
sess.post("http://somesite.com/someform.php", data={"username": "me", "password": "pass"})
#Everything after that POST will retain the login session
print sess.get("http://somesite.com/otherpage.php").text
</snippet></ROW><ROW><id>13639272</id><snippet>from requests.utils import cookiejar_from_dict as jar
cookies = jar(sess.cookies)
</snippet></ROW><ROW><id>13639272</id><snippet>pickle.load(file)</snippet></ROW><ROW><id>13639272</id><snippet>cj</snippet></ROW><ROW><id>13639272</id><snippet>for cookie in cj:
    if cookie.is_expired():
        #re-attain session
</snippet></ROW><ROW><id>13639272</id><snippet>if any(c.is_expired() for c in cj)</snippet></ROW><ROW><id>13639558</id><snippet>iteritems()</snippet></ROW><ROW><id>13639558</id><snippet>value</snippet></ROW><ROW><id>13639558</id><snippet>iteritems()</snippet></ROW><ROW><id>13639608</id><snippet>http://...</snippet></ROW><ROW><id>13639608</id><snippet>response['Content-Disposition'] = 'attachment; filename="http://localhost/static/pdfs/angular.pdf"'
</snippet></ROW><ROW><id>13639608</id><snippet>response['Content-Disposition'] = 'attachment; filename="angular.pdf"'
</snippet></ROW><ROW><id>13639608</id><snippet>...
def serve_pdf(self, request):
  from django.core.servers.basehttp import FileWrapper
  # your code

  wrapper      = FileWrapper(open(your_pdf_file_path))
  response     = HttpResponse(wrapper,'application/pdf')
  response['Content-Length']      = os.path.getsize(your_pdf_file_path)    
  response['Content-Disposition'] = 'attachment; filename="angular.pdf"'
  return response
</snippet></ROW><ROW><id>13639670</id><snippet>String.prototype.format = function() {
    var args = arguments;
    this.unkeyed_index = 0;
    return this.replace(/\{(\w*)\}/g, function(match, key) { 
        if (key === '') {
            key = this.unkeyed_index;
            this.unkeyed_index++
        }
        if (key == +key) {
            return args[key] !== 'undefined'
                ? args[key]
                : match;
        } else {
            for (var i = 0; i &lt; args.length; i++) {
                if (typeof args[i] === 'object' &amp;&amp; typeof args[i][key] !== 'undefined') {
                    return args[i][key];
                }
            }
            return match;
        }
    }.bind(this));
};

"hello {} and {}".format("you", "bob");
"hello {0} and {1}".format("you", "bob");
"hello {0} and {1} and {a}".format("you", "bob", {a:"mary"});
"hello {0} and {1} and {a} and {2}".format("you", "bob", "jill", {a:"mary"});
</snippet></ROW><ROW><id>13639845</id><snippet>ScalarFormatter</snippet></ROW><ROW><id>13639845</id><snippet>from matplotlib import rc
rc('text', usetex=True)
rc('font', size=20)

import matplotlib.pyplot as plt
from matplotlib.ticker import ScalarFormatter

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111)
ax.semilogx(range(100))
ax.xaxis.set_major_formatter(ScalarFormatter())
plt.show()
</snippet></ROW><ROW><id>13639993</id><snippet>import pickle

class model(dict):
    pass

a = model()
pickled = pickle.dumps(a)
b = pickle.loads(pickled)

print type(a), a
print type(b), b
</snippet></ROW><ROW><id>13639993</id><snippet>&lt;class '__main__.model'&gt; {}
&lt;class '__main__.model'&gt; {}
</snippet></ROW><ROW><id>13639993</id><snippet>import pickle

class model(dict):
    def save(self):
        with open("model.dict", "wb") as f:
            pickle.dump(self, f)

    def load(self): 
        with open("model.dict") as f:
            return pickle.load(f)

#comment after first run
test = model()
test['South Park'] = 'Comedy Central'
test.save()
print type(test), test

#uncomment after first run
test2 = model().load()
print type(test2), test2
</snippet></ROW><ROW><id>13639993</id><snippet>__reduce__</snippet></ROW><ROW><id>13640181</id><snippet>import xml.etree.cElementTree as ET

file_path = "/path/to/your/test.xml"
context = ET.iterparse(file_path, events=("start", "end")) #Probably we could use only the start tag
# turn it into an iterator
context = iter(context)
on_members_tag = False

for event, elem in context:
    tag = elem.tag
    value = elem.text
    if value :
        value = value.encode('utf-8').strip()       
    if event == 'start' :
        if tag == "row" :
            attribs = elem.attrib
            print "This is the campaignID %s and this is the adGroupID" % (attribs['campaignID'] , attribs['adGroupID'])

    elem.clear() #Save memory!
</snippet></ROW><ROW><id>13640378</id><snippet>@importicus_main.route('/')
def application():
  return "Hello World! INSIDE"
</snippet></ROW><ROW><id>13640378</id><snippet># /blog/1 would be a valid URL here
@importicus_main.route('/blog/&lt;int:post_id&gt;')
def blog_post(post_id):
  return "This would be blog post number %s" % post_id
</snippet></ROW><ROW><id>13640839</id><snippet>def m(s):
  return [s*[0] for _ in xrange(s)]
</snippet></ROW><ROW><id>13640857</id><snippet>&lt;record id="view_category_list" model="ir.ui.view"&gt;
        &lt;field name="name"&gt;res.partner.category.tree&lt;/field&gt;
        &lt;field name="model"&gt;res.partner.category&lt;/field&gt;
        &lt;field name="type"&gt;tree&lt;/field&gt;
        &lt;field name="field_parent"&gt;child_ids&lt;/field&gt;
        &lt;field name="arch" type="xml"&gt;
            &lt;tree string="Partner Categories"&gt;
                &lt;field name="name"/&gt;
                &lt;field name="parent_id" invisible="1"/&gt;
            &lt;/tree&gt;
        &lt;/field&gt;
&lt;/record&gt;

&lt;record id="action_category_list" model="ir.actions.act_window"&gt;
        &lt;field name="name"&gt;Tree Structure&lt;/field&gt;
        &lt;field name="type"&gt;ir.actions.act_window&lt;/field&gt;
        &lt;field name="res_model"&gt;res.partner.category&lt;/field&gt;
        &lt;field name="view_type"&gt;tree&lt;/field&gt;
        &lt;field name="view_id" ref="view_category_list"/&gt;
        &lt;field name="domain"&gt;[('parent_id','=',False)]&lt;/field&gt;
&lt;/record&gt;

&lt;menuitem 
    name="Tree structure" 
    action="action_category_list" 
    id="menuitem_category_list" 
    parent="club_menu"/&gt;
</snippet></ROW><ROW><id>13641134</id><snippet>\n\n</snippet></ROW><ROW><id>13641134</id><snippet>zip</snippet></ROW><ROW><id>13641134</id><snippet>s = """Row 1
apple
bob
cat
dog
ear
fun

Row 2
glow
horse
idea
joke
kick
lemon

Row 3
money
new
odd
park
queen
run"""

lines = s.split('\n\n')
for line in lines:
    words = line.splitlines()
    print([ [i, j] for i, j in zip(words[1::2], words[2::2]) ])

[['apple', 'bob'], ['cat', 'dog'], ['ear', 'fun']]
[['glow', 'horse'], ['idea', 'joke'], ['kick', 'lemon']]
[['money', 'new'], ['odd', 'park'], ['queen', 'run']]
</snippet></ROW><ROW><id>13641170</id><snippet>sysctl -A | grep shm
</snippet></ROW><ROW><id>13641170</id><snippet>sudo vim /etc/sysctl.conf
</snippet></ROW><ROW><id>13641170</id><snippet>kern.sysv.shmmax=564777216
kern.sysv.shmmin=1
kern.sysv.shmmni=700
kern.sysv.shmseg=128
kern.sysv.shmall=131072
</snippet></ROW><ROW><id>13641170</id><snippet>ipcs -m -b
</snippet></ROW><ROW><id>13641170</id><snippet>for n in `ipcs -b -m | egrep ^m | awk '{ print $2; }'`; do ipcrm -m $n; done
</snippet></ROW><ROW><id>13641329</id><snippet>__contains__</snippet></ROW><ROW><id>13641329</id><snippet>Card</snippet></ROW><ROW><id>13641329</id><snippet>c1 = Card("H", "A")
c2 = Card("H", "A")

print c1 == c2 # False!
</snippet></ROW><ROW><id>13641329</id><snippet>__eq__</snippet></ROW><ROW><id>13641329</id><snippet>Card</snippet></ROW><ROW><id>13641329</id><snippet>__ne__</snippet></ROW><ROW><id>13641329</id><snippet>!=</snippet></ROW><ROW><id>13641329</id><snippet>def __eq__(self, other):
    return self.suit == other.suit and self.rank == other rank

def __ne__(self, other):
    return not self == other
</snippet></ROW><ROW><id>13641329</id><snippet>Card</snippet></ROW><ROW><id>13641329</id><snippet>card.get_suit</snippet></ROW><ROW><id>13641329</id><snippet>card.suit</snippet></ROW><ROW><id>13641329</id><snippet>Property</snippet></ROW><ROW><id>13641514</id><snippet> {% for d in a|make_list %}{{d}}{%if forloop.counter == 1 %}.{%endif%}{%endfor%}
</snippet></ROW><ROW><id>13641514</id><snippet># sample filter
def todollars(value):
    val = int(value)
    return "%.2f" % val/100.0
</snippet></ROW><ROW><id>13641514</id><snippet>{{ a|todollars }}
</snippet></ROW><ROW><id>13641514</id><snippet>1.00</snippet></ROW><ROW><id>13641514</id><snippet>100</snippet></ROW><ROW><id>13641593</id><snippet>web: gunicorn myapp.wsgi -b 0.0.0.0:$PORT --timeout 600
celeryd: python manage.py celeryd -E -B --loglevel=INFO
</snippet></ROW><ROW><id>13641737</id><snippet>titles = [hxs.select('//tr[@class="index class_tr group-6487"] | //tr[@class="index class_tr group-6488"] | //tr[@class="index class_tr group-6489"]')]
</snippet></ROW><ROW><id>13641848</id><snippet>'http://'</snippet></ROW><ROW><id>13641848</id><snippet>print</snippet></ROW><ROW><id>13641848</id><snippet>page_contents = getpage("http://www.radioreference.com/apps/audio/?ctid=5586")
</snippet></ROW><ROW><id>13641848</id><snippet>for line in page_contents.readlines():
    print line
</snippet></ROW><ROW><id>13642030</id><snippet>sys.arvg[0]</snippet></ROW><ROW><id>13642030</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>13642030</id><snippet>import</snippet></ROW><ROW><id>13642030</id><snippet>sys</snippet></ROW><ROW><id>13642186</id><snippet>importlib</snippet></ROW><ROW><id>13642186</id><snippet>import sys
s = sys.argv[lastIndex]
def is_save(s):
    #test if s is a valid argument
    return True or False

if is_save(s):
    exec('from %s import *'%s)
</snippet></ROW><ROW><id>13642186</id><snippet>is_save</snippet></ROW><ROW><id>13642186</id><snippet>exec</snippet></ROW><ROW><id>13642186</id><snippet>eval</snippet></ROW><ROW><id>13642622</id><snippet>vi .bashrc</snippet></ROW><ROW><id>13642622</id><snippet>vim .bashrc</snippet></ROW><ROW><id>13642622</id><snippet>os.system</snippet></ROW><ROW><id>13642622</id><snippet>vi</snippet></ROW><ROW><id>13642708</id><snippet>class Parent(Base):
    __tablename__ = 'parents'
    # ...

    @hybrid_property
    def child_count(self):
        #return len(self.children)   # @note: use when non-dynamic relationship
        return self.children.count()# @note: use when dynamic relationship

    @child_count.expression
    def child_count(cls):
        return (select([func.count(Child.child_id)]).
                where(Child.parent_id == cls.parent_id).
                label("child_count")
                )

    @hybrid_method
    def child_count_ex(self, stime, etime):
        return len([_child for _child in self.children
            if stime &lt;= _child.time &lt;= etime ])

    @child_count_ex.expression
    def child_count_ex(cls, stime, etime):
        return (select([func.count(Child.child_id)]).
                where(Child.parent_id == cls.parent_id).
                where(Child.time &gt;= stime).
                where(Child.time &lt;= etime).
                label("child_count")
                )


# usage of expressions:
stime, etime = datetime.datetime(2012, 1, 1), datetime.datetime(2012, 1, 31)
qry = session.query(Parent)
#qry = qry.filter(Parent.child_count &gt; 2)
qry = qry.filter(Parent.child_count_ex(stime, etime) &gt; 0)
</snippet></ROW><ROW><id>13642865</id><snippet>plot(range(80))
xlabel('foo')
ylabel('bar')
legend(['myline'])
axis([0, 80, 0, 120])
savefig('sample.pdf')
</snippet></ROW><ROW><id>13642865</id><snippet>png</snippet></ROW><ROW><id>13642865</id><snippet>'sample.png'</snippet></ROW><ROW><id>13642894</id><snippet>def animate(*args)</snippet></ROW><ROW><id>13642894</id><snippet>def animate(framenumber, *args)</snippet></ROW><ROW><id>13642894</id><snippet>def animate(framenumber, *args, **kwargs)</snippet></ROW><ROW><id>13642894</id><snippet>i</snippet></ROW><ROW><id>13642894</id><snippet>x</snippet></ROW><ROW><id>13642894</id><snippet>animate</snippet></ROW><ROW><id>13642894</id><snippet>global</snippet></ROW><ROW><id>13642894</id><snippet>fargs</snippet></ROW><ROW><id>13642894</id><snippet>FuncAnimation</snippet></ROW><ROW><id>13642894</id><snippet>x = x[1:] + [i]</snippet></ROW><ROW><id>13642894</id><snippet>[i]</snippet></ROW><ROW><id>13642894</id><snippet>x[1:]</snippet></ROW><ROW><id>13642894</id><snippet>x</snippet></ROW><ROW><id>13642894</id><snippet>x</snippet></ROW><ROW><id>13642894</id><snippet>x[:-1] = x[1:]; x[-1] = i</snippet></ROW><ROW><id>13643085</id><snippet>setattr</snippet></ROW><ROW><id>13643085</id><snippet>&gt;&gt;&gt; class Myclass:
    def __init__(self, ID):
        self.ID = ID
        self.at1 = "ok"
        self.at2 = "ok"
        self.at3 = "ok"
        self.at4 = "ok"

    def __str__(self):
    return str((self.at1, self.at2, self.at3, self.at4))

    def unused(self, unused):
    for attr in unused:
            setattr(self, attr, 'N/A')
    print self


&gt;&gt;&gt; unused = ["at1","at3"]
&gt;&gt;&gt; for i in range(3):
    m = Myclass(i)
    m.unused(unused)


('N/A', 'ok', 'N/A', 'ok')
('N/A', 'ok', 'N/A', 'ok')
('N/A', 'ok', 'N/A', 'ok')
</snippet></ROW><ROW><id>13643170</id><snippet>conftest.py</snippet></ROW><ROW><id>13643170</id><snippet>python_files</snippet></ROW><ROW><id>13643170</id><snippet>test_*.py</snippet></ROW><ROW><id>13643170</id><snippet>conftest.py</snippet></ROW><ROW><id>13643170</id><snippet>from sonoftest import pytest_addoption, cmdopt
</snippet></ROW><ROW><id>13643258</id><snippet>Please, learn SQL and Syntex then work on :
Your answer is:

For Insert Data into table
============================    
query = "INSERT INTO present_list(from,to) values('a'.'b')"; 
       print query
       cur.execute(query)

For Update Data into table
============================

query = "Update present_list set from='a', to='b'"; 
       print query
       cur.execute(query)
</snippet></ROW><ROW><id>13643284</id><snippet>--dist-dir=[differentdir]</snippet></ROW><ROW><id>13643284</id><snippet>python setup.py sdist --help</snippet></ROW><ROW><id>13643284</id><snippet>  --dist-dir (-d)   directory to put the source distribution archive(s) in
                    [default: dist]
</snippet></ROW><ROW><id>13643284</id><snippet>package_dir</snippet></ROW><ROW><id>13643284</id><snippet>setup()</snippet></ROW><ROW><id>13643284</id><snippet>package_dir = {'': 'src'},
</snippet></ROW><ROW><id>13643355</id><snippet>class Shared:
    def __init__(self):
        print("Init shared")

    def do_stuff(self, from_mod):
        print("Do stuff from {0}. I am instance {1}".format(from_mod, self))

shared = Shared()
</snippet></ROW><ROW><id>13643355</id><snippet>import shared

shared.shared.do_stuff("foo")
</snippet></ROW><ROW><id>13643355</id><snippet>import foo
import shared

shared.shared.do_stuff("bar")
</snippet></ROW><ROW><id>13643355</id><snippet>&gt;&gt;&gt; Init shared
&gt;&gt;&gt; Do stuff from foo. I am instance &lt;shared.Shared instance at 0x10046df38&gt;
&gt;&gt;&gt; Do stuff from bar. I am instance &lt;shared.Shared instance at 0x10046df38&gt;
</snippet></ROW><ROW><id>13643355</id><snippet>database_module</snippet></ROW><ROW><id>13643460</id><snippet>mask = ~np.isnan(varx) &amp; ~np.isnan(vary)
slope, intercept, r_value, p_value, std_err = stats.linregress(varx[mask], vary[mask])
</snippet></ROW><ROW><id>13643599</id><snippet>os.path.walk</snippet></ROW><ROW><id>13643732</id><snippet>import BaseHTTPServer
</snippet></ROW><ROW><id>13643900</id><snippet>all_possible</snippet></ROW><ROW><id>13643900</id><snippet>check_possible()</snippet></ROW><ROW><id>13643900</id><snippet>all_possible = check_matches(all_possible)
</snippet></ROW><ROW><id>13643904</id><snippet>main_handler.make_secure_val
</snippet></ROW><ROW><id>13643904</id><snippet>make_secure_val
</snippet></ROW><ROW><id>13643926</id><snippet>re</snippet></ROW><ROW><id>13643926</id><snippet>read()</snippet></ROW><ROW><id>13643926</id><snippet>readlines()</snippet></ROW><ROW><id>13643926</id><snippet>"\n".join(list_of_strings)</snippet></ROW><ROW><id>13643926</id><snippet>from urllib2 import urlopen
import re

contents = urlopen("http://www.radioreference.com/apps/audio/?ctid=5586").read()

playlist_pattern = r'link = "([^"]+)" \+ a.id \+ "([^"]+\.asx)'
feed_pattern = r'href="/apps/audio/\?feedId=(\d+)"&gt;&lt;span class="px13"&gt;([^&lt;]+)'
pattern = playlist_pattern + ".*" + feed_pattern

playlist, asx, feed, title = re.search(pattern, contents, re.DOTALL).groups()

streamURL = "http://www.radioreference.com" + playlist + feed + asx

print title
print streamURL
</snippet></ROW><ROW><id>13643926</id><snippet>Eastern Metro Area Fire
http://www.radioreference.com/scripts/playlists/1/11065/0-5417090148.asx
</snippet></ROW><ROW><id>13643926</id><snippet>playlist_pattern</snippet></ROW><ROW><id>13643926</id><snippet>feed_pattern</snippet></ROW><ROW><id>13643926</id><snippet>link = "stuff"</snippet></ROW><ROW><id>13644048</id><snippet>setup(windows=[{
                "script" : "openFisca.pyw"
                }], 
      options={"py2exe" : {"includes" : ["sip", "encodings.*", "numpy.*"],
                           "packages": ["france","tunisia"],
                           "dist_dir": dist_dir,
                           "bundle_files":3,
                           "dll_excludes": ["MSVCP90.dll"]
                           }}, 
      data_files=data_files)
</snippet></ROW><ROW><id>13644055</id><snippet>random.randint(0, lower)</snippet></ROW><ROW><id>13644055</id><snippet>higher</snippet></ROW><ROW><id>13644055</id><snippet>computer_guess = random.randint(higher, 101)</snippet></ROW><ROW><id>13644055</id><snippet>higher</snippet></ROW><ROW><id>13644055</id><snippet>lower</snippet></ROW><ROW><id>13644055</id><snippet>import random

computer_tries = 0
player_number = None
computer_guess = random.randint(1, 100)

print(
    """
    Welcome Player to the fabulous number guessing game.
    Please allow me to show you my incredible deduction skills
    """)

question = None
lower = 0 # initial lower guess
higher = 101  # initial higher guess
while question != ("yes"):
    question = input("Has the player picked a number? ")
    question = question.lower()
    if question == "yes":
        print("\nI will now guess your number!!!\n")
        while player_number == None:
            computer_tries += 1
            print(computer_guess, "\n")
            confirmation = input("Is this the correct number? ")
            confirmation = confirmation.lower()
            if confirmation == "yes":
                player_number = computer_guess
                if computer_tries &lt; 2:
                    print("I did it! I guessed your number was", computer_guess,
                           "and it only \ntook me", computer_tries,
                           "try to get it right!")
                else:
                    print("I did it! I guessed your number was", computer_guess,
                           "and it only \ntook me", computer_tries,
                           "tries to get it right!")
            else:
                higher_lower = None
                while higher_lower not in ("higher", "lower"):
                    higher_lower = input("Is my guess higher or lower"
                                + " than your number? ")
                    higher_lower = higher_lower.lower()
                    if higher_lower == "higher":
                        higher = computer_guess
                        computer_guess = random.randint(lower+1, higher-1)
                    elif higher_lower == "lower":
                        lower = computer_guess
                        computer_guess = random.randint(lower+1, higher-1)
                    else:
                        print("Please choose either higher or lower.")
                    print("DEBUG: number must be " + str(lower) + " &lt; x &lt; " + str(higher))


input("\n\nPress the enter key to exit")
</snippet></ROW><ROW><id>13644253</id><snippet>workon myenv
cd node-v0.4.8
./configure –prefix=“/path/to/myenv/”
make
make install
</snippet></ROW><ROW><id>13644253</id><snippet>workon myenv
git clone git://github.com/isaacs/npm.git
cd npm
make
make install
</snippet></ROW><ROW><id>13644256</id><snippet>replace</snippet></ROW><ROW><id>13644302</id><snippet>frame = bytearray(frame)
for i in range(len(mask)):
    frame[i] ^= mask[i]
</snippet></ROW><ROW><id>13644606</id><snippet>SymbolManager</snippet></ROW><ROW><id>13644606</id><snippet>class SimbolManager: 
      ^^^^^^
</snippet></ROW><ROW><id>13644620</id><snippet>_client = None

def get_client():
    global _client
    if _client is None:
        _client = MyXmpp()
    return _client

@celery.task
def send_jabber(message):
    get_client().send_admin_xmpp(message)
</snippet></ROW><ROW><id>13644620</id><snippet>from celery import Celery, Task
from celery.utils import cached_property

class XmppTask(Task):
    Client = MyXmpp
    abstract = True

    def __call__(self, *args, **kwargs):
        # passes self argument to the task body
        return super(XmppTask, self).__call__(self, *args, **kwargs)

    @cached_property
    def client(self):
        return self.Client()


celery = Celery()
@celery.task(base=XmppTask):
def send_jabber(self, message):
    return self.client.send_admin_xmpp(message)
</snippet></ROW><ROW><id>13644707</id><snippet>this_page.object_list</snippet></ROW><ROW><id>13644707</id><snippet>paginator</snippet></ROW><ROW><id>13644707</id><snippet>'paginator'</snippet></ROW><ROW><id>13644707</id><snippet>paginator</snippet></ROW><ROW><id>13644707</id><snippet>oblect_list</snippet></ROW><ROW><id>13644707</id><snippet>this_page</snippet></ROW><ROW><id>13644707</id><snippet>&lt;ul class="article-list"&gt;
    {% for object in this_page.object_list %}
       ... your rendering code ...
    {%endfor%}
&lt;/ul&gt;
</snippet></ROW><ROW><id>13644707</id><snippet>{% for object in this_page %}
    ...
{%endfor%}
</snippet></ROW><ROW><id>13644827</id><snippet>files.listdir()</snippet></ROW><ROW><id>13645124</id><snippet>cursor.execute("SELECT name FROM username WHERE name=?", (name,))
</snippet></ROW><ROW><id>13645124</id><snippet>name = raw_input("Please enter your username: ")
query = "SELECT * FROM username WHERE name=? ORDER BY {0}".format(column_name)
cursor.execute(query, (name,))
for row in cursor:
    print row
</snippet></ROW><ROW><id>13645220</id><snippet>from itertools import groupby
from operator import itemgetter

with open('somefile.txt') as fin:
    lines = ( line.split() for line in fin )
    for key, values in groupby(lines, itemgetter(0)):
        print 'Key', key, 'has values'
        for value in values:
            print value
</snippet></ROW><ROW><id>13645220</id><snippet>list</snippet></ROW><ROW><id>13645298</id><snippet>StopIteration</snippet></ROW><ROW><id>13645298</id><snippet>next()</snippet></ROW><ROW><id>13645298</id><snippet>next</snippet></ROW><ROW><id>13645298</id><snippet>units.next()</snippet></ROW><ROW><id>13645298</id><snippet>units.next()</snippet></ROW><ROW><id>13645298</id><snippet>StopIteration</snippet></ROW><ROW><id>13645298</id><snippet>scraper.get_units()</snippet></ROW><ROW><id>13645298</id><snippet>get_units()</snippet></ROW><ROW><id>13645298</id><snippet>class Scraper(object):
    def get_units(self):
        for i in some_stuff:
            bla = do_some_processing()
            bla *= 2  # random stuff
            yield bla
</snippet></ROW><ROW><id>13645298</id><snippet>Scraper().get_units()</snippet></ROW><ROW><id>13645298</id><snippet>next()</snippet></ROW><ROW><id>13645298</id><snippet>yield</snippet></ROW><ROW><id>13645298</id><snippet>get_units</snippet></ROW><ROW><id>13645298</id><snippet>next()</snippet></ROW><ROW><id>13645298</id><snippet>StopIteration</snippet></ROW><ROW><id>13645370</id><snippet>for w in range(x):
    s="s"+str(w)
    self.s.deleteLater()
</snippet></ROW><ROW><id>13645370</id><snippet>s</snippet></ROW><ROW><id>13645370</id><snippet>self.s</snippet></ROW><ROW><id>13645370</id><snippet>self.edits = []
for w in range(x):
    s = "s"+str(w)
    s = QtGui.QLineEdit(self)
    s.setGeometry(QtCore.QRect(15, y, 20, 40))
    s.setObjectName(_fromUtf8(s))   
    s_name.show()
    self.edits.append(s)
    y += 40
</snippet></ROW><ROW><id>13645370</id><snippet>for s in self.edits:
    s.deleteLater()
</snippet></ROW><ROW><id>13645615</id><snippet>print("Hello {Name}, good {Time}.".format(**dic1))
</snippet></ROW><ROW><id>13645615</id><snippet>__add__</snippet></ROW><ROW><id>13645615</id><snippet>&gt;&gt;&gt; [45,3] + "foo"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only concatenate list (not "str") to list
</snippet></ROW><ROW><id>13645615</id><snippet>&gt;&gt;&gt; "foo" + [45,3]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot concatenate 'str' and 'list' objects
</snippet></ROW><ROW><id>13645708</id><snippet>createHouses</snippet></ROW><ROW><id>13645708</id><snippet>i["fn"] = [legendaryfn[count]]
i["house"] = [houseGen()]
</snippet></ROW><ROW><id>13645708</id><snippet>list</snippet></ROW><ROW><id>13645708</id><snippet>str</snippet></ROW><ROW><id>13645708</id><snippet>x['fn']+" "+x['sn']</snippet></ROW><ROW><id>13645708</id><snippet>x['fn']</snippet></ROW><ROW><id>13645708</id><snippet>list</snippet></ROW><ROW><id>13645708</id><snippet>i["fn"] = legendaryfn[count]
i["house"] = houseGen()
</snippet></ROW><ROW><id>13646263</id><snippet>from abc import ABCMeta, abstractmethod

class Abstract(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def foo(self):
        pass

Abstract()
&gt;&gt;&gt; TypeError: Can not instantiate abstract class Abstract with abstract methods foo

class B(Abstract):
    pass

B()
&gt;&gt;&gt; TypeError: Can not instantiate abstract class B with abstract methods foo
</snippet></ROW><ROW><id>13646369</id><snippet>self.divided</snippet></ROW><ROW><id>13646369</id><snippet>property</snippet></ROW><ROW><id>13646369</id><snippet>class Foo(object):
    number1 = 0
    number2 = 0

    @property
    def divided(self):
        return self.number1 / self.number2
</snippet></ROW><ROW><id>13646575</id><snippet>split</snippet></ROW><ROW><id>13646575</id><snippet>use strict;
use warnings;

my @line;
while (&lt;&gt;) {
    push @line, $_;            # add line to buffer
    next if @line &lt; 2;         # skip unless buffer is full
    print proc(@line), "\n";   # process and print 
    shift @line;               # remove used line 
}

sub proc {
    my @a = split ' ', shift;   # line 1
    my @b = split ' ', shift;   # line 2
    my $x = ($a[6]-$b[6]);      # calculate the diffs
    my $y = ($a[7]-$b[7]);
    my $z = ($a[8]-$b[8]);
    my $dist = sprintf "%.1f",                # format the number
                   sqrt($x**2+$y**2+$z**2);   # do the calculation
    return "$a[3]-$b[3]\t$dist"; # return the string for printing
}
</snippet></ROW><ROW><id>13646575</id><snippet>GLN-HIS 3.8
HIS-ASN 3.8
ASN-GLU 3.9
GLU-VAL 3.8
</snippet></ROW><ROW><id>13646575</id><snippet>/\t/</snippet></ROW><ROW><id>13646575</id><snippet>' '</snippet></ROW><ROW><id>13646871</id><snippet>Field('event_instance_id', 'reference event_instance')
</snippet></ROW><ROW><id>13646967</id><snippet>it = iter(function, sentinel)
</snippet></ROW><ROW><id>13646967</id><snippet>function()</snippet></ROW><ROW><id>13646967</id><snippet>== sentinel</snippet></ROW><ROW><id>13646967</id><snippet>None</snippet></ROW><ROW><id>13646967</id><snippet>rand_iter = lambda start, end: iter(random.randint(start, end), None)
rand_bytes = rand_iter(0, 256)
</snippet></ROW><ROW><id>13646967</id><snippet>iter_mystate = iter(getstate, None)
</snippet></ROW><ROW><id>13646967</id><snippet>getstate()</snippet></ROW><ROW><id>13646967</id><snippet>None</snippet></ROW><ROW><id>13646967</id><snippet>iter_mystate = iter(getstate, object())
</snippet></ROW><ROW><id>13647285</id><snippet>add_entries</snippet></ROW><ROW><id>13647285</id><snippet>show_entries</snippet></ROW><ROW><id>13647285</id><snippet>class AddQueries(flask.views.MethodView):
  @utils.login_required
  def get(self):
    return flask.render_template('add-queries.html')

  def post(self):
    db = get_db()
    db.execute('insert into entries (title, columns, query, notes, tags) values (?, ?, ?, ?, ?)',
    [request.form['title'],
     request.form['columns'],
     request.form['query'],
     request.form['notes'],
     request.form['tags']
    ])
    db.commit()
    flash('New entry was successfully posted')
    return flask.render_template('search-queries.html')
</snippet></ROW><ROW><id>13647285</id><snippet>POST</snippet></ROW><ROW><id>13647285</id><snippet>AddQueries</snippet></ROW><ROW><id>13647285</id><snippet>ShowQueries</snippet></ROW><ROW><id>13647285</id><snippet>show_entries()</snippet></ROW><ROW><id>13647366</id><snippet>from xml.dom.minidom import Document
import copy
import re
from collections import OrderedDict

class d2x:
    ''' Converts Dictionary to XML '''
    def __init__(self, structure):
        self.doc = Document()
        if len(structure) == 1:
            rootName = str(structure.keys()[0])
            self.root = self.doc.createElement(rootName)
            self.doc.appendChild(self.root)
            self.build(self.root, structure[rootName])

    def build(self, father, structure):
        if type(structure) == dict:
            for k in structure:
                tag = self.doc.createElement(k)
                father.appendChild(tag)
                self.build(tag, structure[k])
        elif type(structure) == OrderedDict:
            for k in structure:
                tag = self.doc.createElement(k)
                father.appendChild(tag)
                self.build(tag, structure[k])

        elif type(structure) == list:
            grandFather = father.parentNode
            tagName = father.tagName
            grandFather.removeChild(father)
            for l in structure:
                tag = self.doc.createElement(tagName)
                self.build(tag, l)
                grandFather.appendChild(tag)

        else:
            data = str(structure)
            tag = self.doc.createTextNode(data)
            father.appendChild(tag)

    def display(self):
        # I render from the root instead of doc to get rid of the XML header
        #return self.root.toprettyxml(indent="  ")
        return self.root.toxml()

class SolaceNode:
    ''' a sub dictionary builder '''
    def __init__(self):
        self.__dict__ = OrderedDict()
    def __getattr__(self, name):
        name = re.sub("_", "-", name)
        try:
            return self.__dict__[name]
        except:
            self.__dict__[name] = SolaceNode()
            return self.__dict__[name]
    def __str__(self):
        return str(self.__dict__)
    def __repr__(self):
        return str(self.__dict__)
    def __call__(self, *args, **kwargs):
        return self.__dict__
    def __setattr__(self, name, value):
        name = re.sub("_", "-", name)
        self.__dict__[name] = value

class SolaceXMLBuilder(object):
    ''' main dictionary builder

    Any dot-name-space like calling of a instance of SolaceXMLBuilder will create
    nested dictionary keys. These are converted to XML whenever the instance 
    representation is called ( __repr__ ) 

    Example

    a=SolaceXMLBuilder()
    a.foo.bar.baz=2
    str(a)
    '&lt;rpc semp-version="soltr/5_5"&gt;\n&lt;foo&gt;&lt;bar&gt;&lt;baz&gt;2&lt;/baz&gt;&lt;/bar&gt;&lt;/foo&gt;&lt;/rpc&gt;'

    '''
    def __init__(self):
        self.__dict__ = OrderedDict()
        self.__setattr__ = None
    def __getattr__(self, name):
        name = re.sub("_", "-", name)
        try:
            return self.__dict__[name]
        except:
            self.__dict__[name] = SolaceNode()
            return self.__dict__[name]
    def __repr__(self):
        # Show XML
        myxml = d2x(eval(str(self.__dict__)))
        # I had to conjur up my own header cause solace doesnt like &lt;/rpc&gt; to have attribs
        #return str('&lt;rpc semp-version="soltr/5_5"&gt;\n%s&lt;/rpc&gt;' % myxml.display())
        return str('&lt;rpc semp-version="soltr/5_5"&gt;\n%s&lt;/rpc&gt;' % myxml.display())
    def __call__(self, *args, **kwargs):
        return self.__dict__
    # def __setattr__(self, name, value):
    #   raise Exception('no you cant create assignments here, only on sub-elements')



if __name__ == '__main__':
    x = SolaceXMLBuilder()
    x.create.message_vpn.vpn_name='NEWVPN'
    print(x)

    # &lt;?xml version="1.0" ?&gt;
    # &lt;rpc semp-version="soltr/5_5"&gt;
    #   &lt;create&gt;
    #     &lt;message-vpn&gt;
    #       &lt;vpn-name&gt;
    #         NEWVPN
    #       &lt;/vpn-name&gt;
    #     &lt;/message-vpn&gt;
    #   &lt;/create&gt;
    # &lt;/rpc semp-version="soltr/5_5"&gt;   

    x=SolaceXMLBuilder()
    x.message_vpn.vpn_name='NEWVPN'
    x.message_vpn.no.feature_X
    print(x)

    # &lt;?xml version="1.0" ?&gt;
    # &lt;rpc semp-version="soltr/5_5"&gt;
    #   &lt;message-vpn&gt;
    #     &lt;vpn-name&gt;
    #       NEWVPN
    #     &lt;/vpn-name&gt;
    #     &lt;no&gt;
    #       &lt;feature-X/&gt;
    #     &lt;/no&gt;
    #   &lt;/message-vpn&gt;
    # &lt;/rpc semp-version="soltr/5_5"&gt;


    # &gt;&gt;&gt; client = SolaceAPI('pt1')
    # &gt;&gt;&gt; xml = SolaceXMLBuilder()
    # &gt;&gt;&gt; xml.create.message_vpn.vpn_name='NEWVPN'
    # &gt;&gt;&gt; client.rpc(str(xml))
    # {u'rpc-reply': {u'execute-result': {u'@code': u'ok'}, u'@semp-version': u'soltr/5_5'}}
</snippet></ROW><ROW><id>13647368</id><snippet>quote</snippet></ROW><ROW><id>13647368</id><snippet>def log_and_execute(cursor, sql, *args):
    s = sql
    if len(args) &gt; 0:
        # generates SELECT quote(?), quote(?), ...
        cursor.execute("SELECT " + ", ".join(["quote(?)" for i in args]))
        quoted_values = cursor.fetchone()
        for quoted_value in quoted_values:
            s = s.replace('?', quoted_value, 1)
    print "SQL command: " + s
    cursor.execute(sql, args)
</snippet></ROW><ROW><id>13647368</id><snippet>?</snippet></ROW><ROW><id>13647445</id><snippet>In [5]: df2 = DataFrame(dict(
                 (L, df[df['series'] == L]['value'].values)
                       for L in df['series'].unique()))

In [6]: df2
Out[6]: 
   A  B  C
0  0  0  5
1  1  0  4
2  2  1  3
3  3  2  2
4  4  4  1
</snippet></ROW><ROW><id>13647445</id><snippet>'step'</snippet></ROW><ROW><id>13647445</id><snippet>In [7]: df2.index.name = 'step'
Out[7]: 
      A  B  C
step         
0     0  0  5
1     1  0  4
2     2  1  3
3     3  2  2
4     4  4  1

In [8]: df2.plot()
</snippet></ROW><ROW><id>13647784</id><snippet>glob.glob</snippet></ROW><ROW><id>13647784</id><snippet>list</snippet></ROW><ROW><id>13647784</id><snippet>list(glob.iglob('*'))
</snippet></ROW><ROW><id>13647876</id><snippet>translation['translations'][0]['translatedText']
</snippet></ROW><ROW><id>13647876</id><snippet>for trans in translation['translations']:
    print trans['translatedText']
</snippet></ROW><ROW><id>13648212</id><snippet>itertools.cycle</snippet></ROW><ROW><id>13648212</id><snippet>itertools.islice</snippet></ROW><ROW><id>13648212</id><snippet>from itertools import islice, cycle
always_30_results = islice(cycle(result_set), 30))
for result in always_30_results:
    print result # or whatever
</snippet></ROW><ROW><id>13648354</id><snippet>z</snippet></ROW><ROW><id>13648354</id><snippet>z().test_x()
</snippet></ROW><ROW><id>13648354</id><snippet>class Z(X):
    z = 1

z = Z
z.test_x()
</snippet></ROW><ROW><id>13648376</id><snippet>class NewUser(Exception):
    pass

@view_config(context=NewUser)
def new_user_exception(request):
    return HTTPFound(request.route_path('new_user'))
</snippet></ROW><ROW><id>13648376</id><snippet>new_user_exception</snippet></ROW><ROW><id>13648376</id><snippet>from pyramid_persona.views import login

@view_config(route_name='login')
def new_login(request):
    response = login(request)
    if response.status == 200: #the login worked
        # tweak the response
    return response
</snippet></ROW><ROW><id>13648708</id><snippet>['Fri Jan 13 12:00:00 2012', 'Mon Jan 16 11:00:00 2012']
Average =  Fri Jan 13 23:30:00 2012
['Fri Jan 13 12:00:00 2012', 'Mon Jan 16 13:00:00 2012']
Average =  Mon Jan 16 00:30:00 2012
['Fri Jan 13 14:17:58 2012', 'Sat Jan 14 1:2:3 2012', 'Sun Jan 15 4:5:6 2012', 'Mon Jan 16 11:03:29 2012', 'Wed Jan 18 14:27:17 2012', 'Mon Jan 23 10:02:12 2012', 'Mon Jan 30 10:02:12 2012']
Average =  Thu Jan 19 16:46:37 2012
['Fri Jan 14 14:17:58 2011', 'Mon Jan 17 11:03:29 2011', 'Wed Jan 19 14:27:17 2011', 'Mon Jan 24 10:02:12 2011']
Average =  Wed Jan 19 00:27:44 2011
</snippet></ROW><ROW><id>13648708</id><snippet>from time import strptime, mktime, localtime, asctime
from math import floor

def averageBusinessDay (dates):
    f = [mktime(strptime(x)) for x in dates]
    h = [x for x in f if localtime(x).tm_wday &lt; 5]  # Get rid of weekend days
    bweek, cweek, dweek = 3600*24*5, 3600*24*7, 3600*24*2    
    e = localtime(h[0])  # Get struct_time for first item
    # fm is first Monday in local time
    fm = mktime((e.tm_year, e.tm_mon, e.tm_mday-e.tm_wday, 0,0,0,0,0,0))
    i = [x-fm for x in h]  # Subtract leading Monday
    j = [x-floor(x/cweek)*dweek for x in i]  # Squeeze out weekends
    avx = sum(j)/len(j)
    avt = asctime(localtime(avx+floor(avx/bweek)*dweek+fm))
    return avt

def atest(dates):
    print dates
    print 'Average = ', averageBusinessDay (dates)

atest(['Fri Jan 13 12:00:00 2012', 'Mon Jan 16 11:00:00 2012'])
atest(['Fri Jan 13 12:00:00 2012', 'Mon Jan 16 13:00:00 2012'])
atest(['Fri Jan 13 14:17:58 2012', 'Sat Jan 14 1:2:3 2012', 'Sun Jan 15 4:5:6 2012', 'Mon Jan 16 11:03:29 2012', 'Wed Jan 18 14:27:17 2012', 'Mon Jan 23 10:02:12 2012', 'Mon Jan 30 10:02:12 2012'])
atest(['Fri Jan 14 14:17:58 2011', 'Mon Jan 17 11:03:29 2011', 'Wed Jan 19 14:27:17 2011', 'Mon Jan 24 10:02:12 2011'])
</snippet></ROW><ROW><id>13648749</id><snippet>integer = 3

for power in range(1,6):
    a = (integer ** (1.0/power))
    if math.ceil(a) == a:
        print a, power

&gt;&gt; 3.0 1
</snippet></ROW><ROW><id>13648814</id><snippet>scipy.stats.pearsonr(x, y)
</snippet></ROW><ROW><id>13648814</id><snippet>x : 1D array

y : 1D array the same length as x
Returns :   

(Pearson’s correlation coefficient, :

    2-tailed p-value)
</snippet></ROW><ROW><id>13649013</id><snippet>a.lstrip(' ')</snippet></ROW><ROW><id>13649013</id><snippet>a = "   \r\t\n\tfoo bar baz qua   \n"
print "Leading spaces", len(a) - len(a.lstrip())
&gt;&gt;&gt; Leading spaces 7
print "Leading spaces", len(a) - len(a.lstrip(' '))
&gt;&gt;&gt; Leading spaces 3
</snippet></ROW><ROW><id>13649155</id><snippet>[a-z]{1,2}[0-9][a-z0-9]?
</snippet></ROW><ROW><id>13649155</id><snippet>[a-z]{1,2}[0-9][a-z0-9]?(?=/?$)
</snippet></ROW><ROW><id>13649155</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; postcode = re.compile("[a-z]{1,2}[0-9][a-z0-9]?(?=/?$)")
&gt;&gt;&gt; string1= "www.xyz.com/abcdab15/"
&gt;&gt;&gt; string2 = "www.xyz.com/adbdd9"
&gt;&gt;&gt; re.findall(postcode, string1)
['ab15']
&gt;&gt;&gt; re.findall(postcode, string2)
['dd9']
</snippet></ROW><ROW><id>13649333</id><snippet>file_out.write("%s %s %s %s %s %s" % (ID,A,B,C,D,E)+ "\n")
</snippet></ROW><ROW><id>13649333</id><snippet>   file_out.write("%s %s %s %s %s %s\n" % (ID,A,B,C,D,E))
</snippet></ROW><ROW><id>13649333</id><snippet>file_out.write(" ".join(["%s" %i for i in [A, B, C, D, E]]))
</snippet></ROW><ROW><id>13649376</id><snippet>itertools.product()</snippet></ROW><ROW><id>13649376</id><snippet>from itertools import product
import string

pools = [string.ascii_uppercase]*3 + [string.digits]*2
names = (''.join(c) for c in product(*pools) if c[-2:] != ('0', '0'))
# next(names) will give you the next unused name
</snippet></ROW><ROW><id>13649376</id><snippet>&gt;&gt;&gt; next(names)
'AAA01'
&gt;&gt;&gt; next(names)
'AAA02'
&gt;&gt;&gt; next(names)
'AAA03'
</snippet></ROW><ROW><id>13649431</id><snippet>random</snippet></ROW><ROW><id>13649431</id><snippet>random.random</snippet></ROW><ROW><id>13649431</id><snippet>from random import random</snippet></ROW><ROW><id>13649631</id><snippet>def is_netfile(fname, netfs):
    fname = path.realpath(fname)
    netfs = path.realpath(netfs)
    if path.commonprefix([ netfs, fname ]) == netfs:
        return True
    else:
        return False
</snippet></ROW><ROW><id>13649631</id><snippet>start_dir = '/some/starting/dir'
net1 = '/some/network/filesystem'
remote_files = []

for root, dirs, files in os.walk(start_dir):
    for f in files:
        if is_netfile( path.join(root,f), net1):
            remote_files.append( path.join(root,f))

print remote_files
</snippet></ROW><ROW><id>13649702</id><snippet>&gt;&gt;&gt; a, b = 10, 20
&gt;&gt;&gt; a, b
(10, 20)
&gt;&gt;&gt; b, a = a, b
&gt;&gt;&gt; a, b
(20, 10)
&gt;&gt;&gt; a, b = a*b, a/b
&gt;&gt;&gt; a, b
(200, 2)
</snippet></ROW><ROW><id>13649702</id><snippet>&gt;&gt;&gt; def t(self): a,b=20,20
... 
&gt;&gt;&gt; dis.dis(t)
  1           0 LOAD_CONST               2 ((20, 20))
              3 UNPACK_SEQUENCE          2
              6 STORE_FAST               1 (a)
              9 STORE_FAST               2 (b)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>13649811</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
# Make random number generation consistent between runs
np.random.seed(5)

def main():
    numlines, numpoints = 2, 3
    lines = np.random.random((numlines, numpoints, 2))

    fig, ax = plt.subplots()
    for line in lines:
        # Add "num" additional segments to the line
        segments, color_scalar = interp(line, num=20)
        coll = LineCollection(segments)
        coll.set_array(color_scalar)
        ax.add_collection(coll)
    plt.show()

def interp(data, num=20):
    """Add "num" additional points to "data" at evenly spaced intervals and
    separate into individual segments."""
    x, y = data.T
    dist = np.hypot(np.diff(x - x.min()), np.diff(y - y.min())).cumsum()
    t = np.r_[0, dist] / dist.max()

    ti = np.linspace(0, 1, num, endpoint=True)
    xi = np.interp(ti, t, x)
    yi = np.interp(ti, t, y)

    # Insert the original vertices
    indices = np.searchsorted(ti, t)
    xi = np.insert(xi, indices, x)
    yi = np.insert(yi, indices, y)

    return reshuffle(xi, yi), ti

def reshuffle(x, y):
    """Reshape the line represented by "x" and "y" into an array of individual
    segments."""
    points = np.vstack([x, y]).T.reshape(-1,1,2)
    points = np.concatenate([points[:-1], points[1:]], axis=1)
    return points

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13649811</id><snippet>main</snippet></ROW><ROW><id>13649811</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
# Make random number generation consistent between runs
np.random.seed(5)

def main():
    numlines, numpoints = 2, 3
    points = np.random.random((numlines, numpoints, 2))

    # Add "num" additional segments to each line
    segments, color_scalar = zip(*[interp(item, num=20) for item in points])

    segments = np.vstack(segments)
    color_scalar = np.hstack(color_scalar)

    fig, ax = plt.subplots()
    coll = LineCollection(segments)
    coll.set_array(color_scalar)
    ax.add_collection(coll)

    plt.show()

def interp(data, num=20):
    """Add "num" additional points to "data" at evenly spaced intervals and
    separate into individual segments."""
    x, y = data.T
    dist = np.hypot(np.diff(x - x.min()), np.diff(y - y.min())).cumsum()
    t = np.r_[0, dist] / dist.max()

    ti = np.linspace(0, 1, num, endpoint=True)
    xi = np.interp(ti, t, x)
    yi = np.interp(ti, t, y)

    # Insert the original vertices
    indices = np.searchsorted(ti, t)
    xi = np.insert(xi, indices, x)
    yi = np.insert(yi, indices, y)

    return reshuffle(xi, yi), ti

def reshuffle(x, y):
    """Reshape the line represented by "x" and "y" into an array of individual
    segments."""
    points = np.vstack([x, y]).T.reshape(-1,1,2)
    points = np.concatenate([points[:-1], points[1:]], axis=1)
    return points

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13649811</id><snippet>Took 10.866694212 sec with a single collection
Took 28.594727993 sec with multiple collections
</snippet></ROW><ROW><id>13649811</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
import time
# Make random number generation consistent between runs
np.random.seed(5)

def main():
    numlines, numpoints = 10000, 3
    lines = np.random.random((numlines, numpoints, 2))

    # Overly simplistic timing, but timeit is overkill for this exmaple
    tic = time.time()
    single_collection(lines).savefig('/tmp/test_single.png')
    toc = time.time()
    print 'Took {} sec with a single collection'.format(toc-tic)

    tic = time.time()
    multiple_collections(lines).savefig('/tmp/test_multiple.png')
    toc = time.time()
    print 'Took {} sec with multiple collections'.format(toc-tic)

def single_collection(lines):
    # Add "num" additional segments to each line
    segments, color_scalar = zip(*[interp(item, num=20) for item in lines])
    segments = np.vstack(segments)
    color_scalar = np.hstack(color_scalar)

    fig, ax = plt.subplots()
    coll = LineCollection(segments)
    coll.set_array(color_scalar)
    ax.add_collection(coll)
    return fig

def multiple_collections(lines):
    fig, ax = plt.subplots()
    for line in lines:
        # Add "num" additional segments to the line
        segments, color_scalar = interp(line, num=20)
        coll = LineCollection(segments)
        coll.set_array(color_scalar)
        ax.add_collection(coll)
    return fig

def interp(data, num=20):
    """Add "num" additional points to "data" at evenly spaced intervals and
    separate into individual segments."""
    x, y = data.T
    dist = np.hypot(np.diff(x - x.min()), np.diff(y - y.min())).cumsum()
    t = np.r_[0, dist] / dist.max()

    ti = np.linspace(0, 1, num, endpoint=True)
    xi = np.interp(ti, t, x)
    yi = np.interp(ti, t, y)

    # Insert the original vertices
    indices = np.searchsorted(ti, t)
    xi = np.insert(xi, indices, x)
    yi = np.insert(yi, indices, y)

    return reshuffle(xi, yi), ti

def reshuffle(x, y):
    """Reshape the line represented by "x" and "y" into an array of individual
    segments."""
    points = np.vstack([x, y]).T.reshape(-1,1,2)
    points = np.concatenate([points[:-1], points[1:]], axis=1)
    return points

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13650240</id><snippet>jar</snippet></ROW><ROW><id>13650240</id><snippet>java</snippet></ROW><ROW><id>13650240</id><snippet>jar</snippet></ROW><ROW><id>13650240</id><snippet>cmd = 'jar uf ' + jarfile + " " + skin_image
</snippet></ROW><ROW><id>13650254</id><snippet>range</snippet></ROW><ROW><id>13650254</id><snippet>for k in range(1,180/4 + 1):
</snippet></ROW><ROW><id>13650309</id><snippet>is</snippet></ROW><ROW><id>13650309</id><snippet>is</snippet></ROW><ROW><id>13650309</id><snippet>is</snippet></ROW><ROW><id>13650309</id><snippet>is not</snippet></ROW><ROW><id>13650309</id><snippet>x is y</snippet></ROW><ROW><id>13650309</id><snippet>x</snippet></ROW><ROW><id>13650309</id><snippet>y</snippet></ROW><ROW><id>13650309</id><snippet>==</snippet></ROW><ROW><id>13650309</id><snippet>print x == y
</snippet></ROW><ROW><id>13650309</id><snippet>True</snippet></ROW><ROW><id>13650309</id><snippet>x</snippet></ROW><ROW><id>13650309</id><snippet>y</snippet></ROW><ROW><id>13650309</id><snippet>x[0] = 4
print y  # prints [1, 2, 3]
print x == y  # prints False
</snippet></ROW><ROW><id>13650309</id><snippet>id()</snippet></ROW><ROW><id>13650309</id><snippet>x</snippet></ROW><ROW><id>13650309</id><snippet>y</snippet></ROW><ROW><id>13650309</id><snippet>&gt;&gt;&gt; id(x)
4401064560
&gt;&gt;&gt; id(y)
4401098192
</snippet></ROW><ROW><id>13650309</id><snippet>y</snippet></ROW><ROW><id>13650309</id><snippet>x</snippet></ROW><ROW><id>13650309</id><snippet>&gt;&gt;&gt; x = y
&gt;&gt;&gt; id(x)
4401064560
&gt;&gt;&gt; id(y)
4401064560
&gt;&gt;&gt; x is y
True
</snippet></ROW><ROW><id>13650309</id><snippet>is</snippet></ROW><ROW><id>13650309</id><snippet>True</snippet></ROW><ROW><id>13650313</id><snippet>datetime</snippet></ROW><ROW><id>13650313</id><snippet>date_list = [my_dt_ob.year, my_dt_ob.month, my_dt_ob.day, my_dt_ob.hour, my_dt_ob.minute, my_dt_ob.second]
</snippet></ROW><ROW><id>13650917</id><snippet>name</snippet></ROW><ROW><id>13650917</id><snippet>import types
def buildMethod(name, instance):
    def namefunc(self, *args, **kwargs):
        print "My name is %s" % name
        print "__called, args=%r, **kwargs=%r" % (args, kwargs)
    namefunc.__name__ = name
    setattr(instance, name, types.MethodType(namefunc, instance, type(instance)))

f = foo()
names = ["a","b","c"]
for name in names:
    buildMethod(name, f)
</snippet></ROW><ROW><id>13650917</id><snippet>&gt;&gt;&gt; f.a
&lt;bound method instance.a of &lt;__main__.foo instance at 0x100d8e560&gt;&gt;
&gt;&gt;&gt; f.a.__name__
'a'
&gt;&gt;&gt; f.a()
My name is a
__called, args=(), **kwargs={}
&gt;&gt;&gt; f.b()
My name is b
__called, args=(), **kwargs={}
&gt;&gt;&gt; f.c()
My name is c
__called, args=(), **kwargs={}
</snippet></ROW><ROW><id>13651134</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>13651134</id><snippet>Date DATE</snippet></ROW><ROW><id>13651134</id><snippet>CREATE TABLE test_table (Id  INTEGER PRIMARY KEY, Date DATE)
</snippet></ROW><ROW><id>13651134</id><snippet>datetime.date</snippet></ROW><ROW><id>13651134</id><snippet>TIMESTAMP</snippet></ROW><ROW><id>13651134</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13651134</id><snippet>CREATE TABLE test_table (Id  INTEGER PRIMARY KEY, Date TIMESTAMP)
</snippet></ROW><ROW><id>13651185</id><snippet>[...somewhere into your parser...]
self.localcontext.update({'external_rows': session.query(MyObject).filter_by(foo='baz')})
</snippet></ROW><ROW><id>13651185</id><snippet>self.localcontext.updarte({'external_rows': self._get_myrows_from_csv()})
</snippet></ROW><ROW><id>13651185</id><snippet>_get_myrows_from_csv</snippet></ROW><ROW><id>13651314</id><snippet>id = raw_input("Enter the Station ID")
query = "select foo from bar where station={station_id}"
cursor.execute(query.format(station_id=id))
</snippet></ROW><ROW><id>13651314</id><snippet>?</snippet></ROW><ROW><id>13651314</id><snippet>%s</snippet></ROW><ROW><id>13651314</id><snippet>id = raw_input("Enter the Station ID")
query = "select foo from bar where station=%s"
cursor.execute(query, [id])
</snippet></ROW><ROW><id>13651314</id><snippet>cx_Oracle</snippet></ROW><ROW><id>13651314</id><snippet>cx_Oracle.paramstyle</snippet></ROW><ROW><id>13651314</id><snippet>query = "select foo from bar where station=:station_id"
cursor.execute(query, station_id=id)
</snippet></ROW><ROW><id>13651349</id><snippet>from scapy.error import Scapy_Exception</snippet></ROW><ROW><id>13651349</id><snippet>try:
   ...:     pkts = rdpcap('./ms_dns.enc')
   ...: except Scapy_Exception as msg:
   ...:     print msg, "Hi there!!"
   ...: 
         Not a pcap capture file (bad magic) Hi there!!
</snippet></ROW><ROW><id>13651382</id><snippet>GameBoard()
</snippet></ROW><ROW><id>13651382</id><snippet>GameBoard</snippet></ROW><ROW><id>13651382</id><snippet>GameBoard().destroy()
</snippet></ROW><ROW><id>13651382</id><snippet>destroy()</snippet></ROW><ROW><id>13651382</id><snippet>_close()</snippet></ROW><ROW><id>13651382</id><snippet>self</snippet></ROW><ROW><id>13651382</id><snippet>def _close(self):
    self.destroy()
</snippet></ROW><ROW><id>13651382</id><snippet>self.master.destroy()</snippet></ROW><ROW><id>13651382</id><snippet>self.quit()</snippet></ROW><ROW><id>13651382</id><snippet>def _close(self):
    self.quit()
</snippet></ROW><ROW><id>13651670</id><snippet>act_on_namespace(dir())</snippet></ROW><ROW><id>13651670</id><snippet>inspect</snippet></ROW><ROW><id>13651752</id><snippet>"%s"</snippet></ROW><ROW><id>13651752</id><snippet>"%s     "</snippet></ROW><ROW><id>13651752</id><snippet>'123456'</snippet></ROW><ROW><id>13651752</id><snippet>&gt;&gt;&gt; '%s'.ljust(7)
'%s     '
&gt;&gt;&gt; _ % '123456'
'123456     '
</snippet></ROW><ROW><id>13651752</id><snippet>&gt;&gt;&gt; ('%s' % '123456').ljust(7)
'123456
</snippet></ROW><ROW><id>13651824</id><snippet>logA = 'thing.txt'
cmdpipe = os.popen(
    'copy "C:\\upe\\' + logA + '"' + ' "C:\\upe\\log.txt"')
</snippet></ROW><ROW><id>13651824</id><snippet>logA = 'thing.txt'
cmdpipe = os.popen('copy "C:\\upe\\{}" "C:\\upe\\log.txt"'.format(logA))
</snippet></ROW><ROW><id>13652035</id><snippet>In [15]: s = 'some text   with \tspaces  between'

In [16]: timeit re.sub(r'(\w)(\s+)(\w)', '\\1 \\3', s)
10000 loops, best of 3: 30.5 us per loop

In [17]: timeit re.sub(r'(\w)(\s+?)(\w)', '\\1 \\3', s)
10000 loops, best of 3: 24.9 us per loop
</snippet></ROW><ROW><id>13652158</id><snippet>re.sub</snippet></ROW><ROW><id>13652158</id><snippet>re.sub(r'\[\[(?:[^\]|]*\|)?([^\]|]*)\]\]', r'\1', line)
</snippet></ROW><ROW><id>13652158</id><snippet>\1</snippet></ROW><ROW><id>13652158</id><snippet>?:</snippet></ROW><ROW><id>13652158</id><snippet>]</snippet></ROW><ROW><id>13652158</id><snippet>\[\[        # match two literal [
(?:         # start optional non-capturing subpattern for pre-| text
   [^\]|]   # this looks a bit confusing but it is a negated character class
            # allowing any character except for ] and |
   *        # zero or more of those
   \|       # a literal |
)?          # end of subpattern; make it optional
(           # start of capturing group 1 - the text you want to keep
    [^\]|]* # the same character class as above
)           # end of capturing group
\]\]        # match two literal ]
</snippet></ROW><ROW><id>13652214</id><snippet>re.search()</snippet></ROW><ROW><id>13652214</id><snippet>re.findall()</snippet></ROW><ROW><id>13652214</id><snippet>re.match()</snippet></ROW><ROW><id>13652214</id><snippet>In [9]: seq2 = 'ggggugcccQgcuagagaZgacagu'

In [10]: re.findall(r'[^GaAgUuCc]',seq2)
Out[10]: ['Q', 'Z']
</snippet></ROW><ROW><id>13652256</id><snippet>def spam(self,y):
    print self.x, y
</snippet></ROW><ROW><id>13652262</id><snippet>In [52]: import pandas as pd

In [53]: dates = pd.DatetimeIndex(['2010-10-17', '2011-05-13', "2012-01-15"])

In [54]: dates.year
Out[54]: array([2010, 2011, 2012], dtype=int32)
</snippet></ROW><ROW><id>13652361</id><snippet>sudo ln -s /usr/lib/libpq.5.4.dylib /usr/lib/libpq.5.dylib
</snippet></ROW><ROW><id>13652390</id><snippet>from multiprocessing import Manager

queue = Manager().Queue()
</snippet></ROW><ROW><id>13652394</id><snippet>str</snippet></ROW><ROW><id>13652394</id><snippet>out</snippet></ROW><ROW><id>13652394</id><snippet>ret</snippet></ROW><ROW><id>13652394</id><snippet>out = ""</snippet></ROW><ROW><id>13652394</id><snippet>ret = ""</snippet></ROW><ROW><id>13652571</id><snippet>&gt;&gt;&gt; import bs4
&gt;&gt;&gt; blah = '&lt;div id="test"&gt;&lt;p&gt;one&lt;/p&gt;&lt;/div&gt;&lt;div id="okay"&gt;&lt;p&gt;something&lt;/p&gt;&lt;/div&gt;'
&gt;&gt;&gt; soup = bs4.BeautifulSoup(blah)
&gt;&gt;&gt; soup('div', {'id': 'test'})[0].extract()
&lt;div id="test"&gt;&lt;p&gt;one&lt;/p&gt;&lt;/div&gt;
&gt;&gt;&gt; soup
&lt;html&gt;&lt;body&gt;&lt;div id="okay"&gt;&lt;p&gt;something&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>13652819</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import random

nsteps = 10000000
draws = np.random.randint(0,2,size=nsteps)
steps = np.where(draws&gt;0,1,-1)
walk = steps.cumsum()
plt.plot(arange(nsteps), array(walk), 'r-')
plt.title("Big Set Random Walk with $\pm1$ steps")
plt.show()
</snippet></ROW><ROW><id>13653128</id><snippet>count = 3
for line in filtered_input:
    if "silence.wav" in line:
        count = 0
    else:
        count += 1

    if count &lt;= 2:
        filtered_output.write(line)
</snippet></ROW><ROW><id>13653142</id><snippet>tags__id__in</snippet></ROW><ROW><id>13653142</id><snippet>tags = Tags.objects.filter(id__in=[ids])
for tag in tags:
    print tag.name
</snippet></ROW><ROW><id>13653142</id><snippet>tags__id__in</snippet></ROW><ROW><id>13653142</id><snippet>photos = Photo.objects.filter(status=1).order_by('-position')
for photo in photos:
    tags = photo.tags.all()
    for tag in tags:
        print tag.name
</snippet></ROW><ROW><id>13653192</id><snippet>while True:
    try:
        conn.request("GET",someString,'',headers)
        response = conn.getresponse()
    except httplib.HTTPException, e:
        conn.connect()
        continue
    break
</snippet></ROW><ROW><id>13653249</id><snippet>pandas.concat</snippet></ROW><ROW><id>13653249</id><snippet>import pandas as PD
from pandas.util.testing import rands

data = [PD.Series([rands(4) for j in range(6)],
                  index = PD.date_range('1/1/2000', periods = 6),
                  name = 'col'+str(i)) for i in range(4)]

df = PD.concat(data, axis = 1, keys = [s.name for s in data])
print(df)
</snippet></ROW><ROW><id>13653249</id><snippet>            col0  col1  col2  col3
2000-01-01  GqcN  Lwlj  Km7b  XfaA
2000-01-02  lhNC  nlSm  jCYu  XLVb
2000-01-03  sSRz  PFby  C1o5  0BJe
2000-01-04  khZb  Ny9p  crUY  LNmc
2000-01-05  hmLp  4rVp  xF2P  OmD9
2000-01-06  giah  psQb  T5RJ  oLSh
</snippet></ROW><ROW><id>13653283</id><snippet>.</snippet></ROW><ROW><id>13653283</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>13653283</id><snippet>.</snippet></ROW><ROW><id>13653283</id><snippet>%2E</snippet></ROW><ROW><id>13653283</id><snippet>requests</snippet></ROW><ROW><id>13653283</id><snippet>params = {
      'version'='0.12',
      'language'='en',
      ...
      }
params = urllib.urlencode(params)
params = params.replace('.', '%2E')
resp = requests.get('?'.join(url, params), config={'encode_uri': False})
</snippet></ROW><ROW><id>13653283</id><snippet>encode_uri</snippet></ROW><ROW><id>13653283</id><snippet>False</snippet></ROW><ROW><id>13653283</id><snippet>requests</snippet></ROW><ROW><id>13653368</id><snippet>for key in sorted(my_dict, key=operator.itemgetter(1,0)):
    print(my_dict[key])
</snippet></ROW><ROW><id>13653383</id><snippet>json.dumps()</snippet></ROW><ROW><id>13653383</id><snippet>def js_format(cars):
   new_cars = ['{0!s}|{1}'.format(slugify(car)), car) for car in cars]
   return json.dumps(new_cars)
</snippet></ROW><ROW><id>13653383</id><snippet>&gt;&gt;&gt; js_format(dodge)
'["avenger|Avenger", "caliber|Caliber", "caravan|Caravan", "challenger|Challenger", "colt|Colt", "d150|D150", "d250|D250", "d350|D350", "dakota|Dakota", "dart|Dart", "daytona|Daytona", "durango|Durango", "durango-hybrid|Durango Hybrid", "dynasty|Dynasty", "grand-caravan|Grand Caravan", "intrepid|Intrepid", "journey|Journey", "magnum|Magnum", "monaco|Monaco", "neon|Neon", "nitro|Nitro", "omni|Omni", "raider|Raider", "ram-1500|Ram 1500", "ram-2500|Ram 2500", "ram-3500|Ram 3500", "ram-50|Ram 50", "ram-van|Ram Van", "ram-wagon|Ram Wagon", "ramcharger|Ramcharger", "shadow|Shadow", "sprinter|Sprinter", "srt-viper|SRT Viper", "spirit|Spirit", "stealth|Stealth", "stratus|Stratus", "viper|Viper", "w150|W150", "w250|W250", "w350|W350"]'
</snippet></ROW><ROW><id>13653430</id><snippet>asr.set_property('lm', '/home/user/mylanguagemodel.lm')
</snippet></ROW><ROW><id>13653430</id><snippet>asr.set_property('hmm', '/home/user/acoustic_model_folder')
</snippet></ROW><ROW><id>13653538</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date = "15/03/2012"
&gt;&gt;&gt; datetime.datetime.strptime(date, "%d/%m/%Y")
datetime.datetime(2012, 3, 15, 0, 0)
&gt;&gt;&gt; hour = "13:01"
&gt;&gt;&gt; datetime.datetime.strptime(hour, "%H:%M")
datetime.datetime(1900, 1, 1, 13, 1)
&gt;&gt;&gt; datetime.datetime.strptime(date + " " + hour, "%d/%m/%Y %H:%M")
datetime.datetime(2012, 3, 15, 13, 1)

&gt;&gt;&gt; date = "1/4/2012"
&gt;&gt;&gt; hour = "3:01"
&gt;&gt;&gt; datetime.datetime.strptime(date + " " + hour, "%d/%m/%Y %H:%M")
datetime.datetime(2012, 4, 1, 3, 1)
</snippet></ROW><ROW><id>13653539</id><snippet>call1</snippet></ROW><ROW><id>13653539</id><snippet>(gdb) break call1
</snippet></ROW><ROW><id>13653539</id><snippet>(gdb) break test.c:call1
</snippet></ROW><ROW><id>13653628</id><snippet>utf8data = data.encode('UTF-8')
open('file.gif', 'w').write(utf8data)
</snippet></ROW><ROW><id>13653701</id><snippet>&lt;MeshHeadingList&gt;
  &lt;MeshHeading&gt;
    &lt;DescriptorName MajorTopicYN="N"&gt;ADP Ribose Transferases&lt;/DescriptorName&gt;
    &lt;QualifierName MajorTopicYN="Y"&gt;genetics&lt;/QualifierName&gt;
  &lt;/MeshHeading&gt;
  &lt;MeshHeading&gt;
    &lt;DescriptorName MajorTopicYN="N"&gt;Acinetobacter&lt;/DescriptorName&gt;
    &lt;QualifierName MajorTopicYN="Y"&gt;drug effects&lt;/QualifierName&gt;
    &lt;QualifierName MajorTopicYN="Y"&gt;genetics&lt;/QualifierName&gt;
  &lt;/MeshHeading&gt;
  ..
</snippet></ROW><ROW><id>13653740</id><snippet>&gt;&gt;&gt; text = """
... "This", she said, "is the 3rd time I've had to tell you".
... """
</snippet></ROW><ROW><id>13653740</id><snippet>str.split()</snippet></ROW><ROW><id>13653740</id><snippet>&gt;&gt;&gt; text.split()
['"This",', 'she', 'said,', '"is', 'the', '3rd', 'time', "I've", 'had', 'to',
 'tell', 'you".']
</snippet></ROW><ROW><id>13653740</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; word = re.compile(r"\b\w+\b")
&gt;&gt;&gt; re.findall(word, text)
['This', 'she', 'said', 'is', 'the', '3rd', 'time', 'I', 've', 'had', 'to',
 'tell', 'you']
</snippet></ROW><ROW><id>13653740</id><snippet>\b</snippet></ROW><ROW><id>13653740</id><snippet>\w</snippet></ROW><ROW><id>13653740</id><snippet>"I've"</snippet></ROW><ROW><id>13653740</id><snippet>&gt;&gt;&gt; ap_word = re.compile(r"\b\w+(?:'\w+)*\b")
&gt;&gt;&gt; re.findall(ap_word, text)
['This', 'she', 'said', 'is', 'the', '3rd', 'time', "I've", 'had', 'to',
 'tell', 'you']
</snippet></ROW><ROW><id>13653740</id><snippet>(?:[...])</snippet></ROW><ROW><id>13653740</id><snippet>"mixed-case"</snippet></ROW><ROW><id>13653829</id><snippet>keys = []
data = {}
names = {}

for line in open('file1', 'r'):
    keys.append(line.strip())
    data[line.strip()] = []

for line in open('file2', 'r'):
    name, key = line.strip().split()
    if key in data:
        data[key].append(name)
        names[name] = key

for line in open('file3', 'r'):
    nickname, name = line.strip().split()
    if name in names:
        data[names[name]].append(nickname)

with open('file4', 'w') as file4:
    for key in keys:
        file4.write('&gt;{0} {1}\n'.format(key, ' '.join(data[key])))
</snippet></ROW><ROW><id>13653866</id><snippet>args</snippet></ROW><ROW><id>13653866</id><snippet>threading.Thread</snippet></ROW><ROW><id>13653866</id><snippet>(q)</snippet></ROW><ROW><id>13653866</id><snippet>q</snippet></ROW><ROW><id>13653866</id><snippet>(q,)</snippet></ROW><ROW><id>13654110</id><snippet>-t</snippet></ROW><ROW><id>13654110</id><snippet>LIST</snippet></ROW><ROW><id>13654110</id><snippet>ls</snippet></ROW><ROW><id>13654179</id><snippet>return template('hello_template', name=name, request=request)
</snippet></ROW><ROW><id>13654181</id><snippet>int</snippet></ROW><ROW><id>13654181</id><snippet>string</snippet></ROW><ROW><id>13654181</id><snippet>str</snippet></ROW><ROW><id>13654181</id><snippet>formatting</snippet></ROW><ROW><id>13654181</id><snippet>print("Ok. You're balance is now at " + balanceAfterStrength + " skill points.")
</snippet></ROW><ROW><id>13654181</id><snippet>print("Ok. You're balance is now at {} skill points.".format(balanceAfterStrength))
</snippet></ROW><ROW><id>13654181</id><snippet>print("Ok. You're balance is now at " + str(balanceAfterStrength) + " skill points.")
</snippet></ROW><ROW><id>13654181</id><snippet>,</snippet></ROW><ROW><id>13654181</id><snippet>print</snippet></ROW><ROW><id>13654181</id><snippet>+</snippet></ROW><ROW><id>13654181</id><snippet>print("Ok. You're balance is now at ", balanceAfterStrength, " skill points.")
</snippet></ROW><ROW><id>13654236</id><snippet>os.getlogin()</snippet></ROW><ROW><id>13654236</id><snippet>path = os.path.join('..','Documents and Settings',os.getuser(),'Desktop')</snippet></ROW><ROW><id>13654236</id><snippet>path = os.path.join('..','Documents and Settings',getpass.getuser(),'Desktop')</snippet></ROW><ROW><id>13654389</id><snippet>pearsonr()</snippet></ROW><ROW><id>13654389</id><snippet>corrxy = pearsonr(x,y)[0]
</snippet></ROW><ROW><id>13654389</id><snippet>numpy.corrcoef()</snippet></ROW><ROW><id>13654489</id><snippet>"Segmentation fault (core dumped)"</snippet></ROW><ROW><id>13654489</id><snippet>SIGSEGV</snippet></ROW><ROW><id>13654489</id><snippet>ctypes</snippet></ROW><ROW><id>13654489</id><snippet>q</snippet></ROW><ROW><id>13654489</id><snippet>"Segmentation fault (core dumped)"</snippet></ROW><ROW><id>13654489</id><snippet>print line</snippet></ROW><ROW><id>13654489</id><snippet>print "And I'm OK"</snippet></ROW><ROW><id>13654489</id><snippet>Segmentation fault</snippet></ROW><ROW><id>13654490</id><snippet>UnboundLocalError: local variable 'meetings' referenced before assignment
</snippet></ROW><ROW><id>13654490</id><snippet>meetings</snippet></ROW><ROW><id>13654490</id><snippet>meetings_outside = []

def clean_old():
    meetings_inside = [meeting for meeting in meetings_inside if time.mktime(meeting) &gt;= time.localtime()]
</snippet></ROW><ROW><id>13654490</id><snippet>meetings_inside</snippet></ROW><ROW><id>13654490</id><snippet>meetings_inside</snippet></ROW><ROW><id>13654490</id><snippet>meetings</snippet></ROW><ROW><id>13654490</id><snippet>nonlocal meetings</snippet></ROW><ROW><id>13654490</id><snippet>meetings</snippet></ROW><ROW><id>13654490</id><snippet>nonlocal</snippet></ROW><ROW><id>13654490</id><snippet>global</snippet></ROW><ROW><id>13654490</id><snippet>meetings</snippet></ROW><ROW><id>13654490</id><snippet>meetings = []

def clean_old():
    global meetings
    meetings = [meeting for meeting in meetings if time.mktime(meeting) &gt;= time.localtime()]

clean_old()
print meetings
</snippet></ROW><ROW><id>13654490</id><snippet>[]
</snippet></ROW><ROW><id>13654490</id><snippet>meetings</snippet></ROW><ROW><id>13654490</id><snippet>import time

def main():
    meetings = []

    def clean_old():
        global meetings
        meetings = [meeting for meeting in meetings if time.mktime(meeting) &gt;= time.localtime()]

    clean_old()
    print meetings

main()
</snippet></ROW><ROW><id>13654490</id><snippet>NameError: global name 'meetings' is not defined
</snippet></ROW><ROW><id>13654490</id><snippet> meetings[:] = [meeting for meeting in meetings if time.mktime(meeting) &gt;= time.localtime()]
</snippet></ROW><ROW><id>13654490</id><snippet>meetings</snippet></ROW><ROW><id>13654490</id><snippet>list</snippet></ROW><ROW><id>13654490</id><snippet>:</snippet></ROW><ROW><id>13654993</id><snippet>import textwrap

def createfile():
    var = """\
          #!/bin/sh
          echo ${test}
          """
    var = textwrap.dedent(var)
    funcToCreateScript(filename, var)
</snippet></ROW><ROW><id>13654993</id><snippet>\</snippet></ROW><ROW><id>13655200</id><snippet>mc3p</snippet></ROW><ROW><id>13655200</id><snippet>sadimusi/mc3p</snippet></ROW><ROW><id>13655200</id><snippet>mc3p</snippet></ROW><ROW><id>13655271</id><snippet>pd.to_datetime</snippet></ROW><ROW><id>13655271</id><snippet>In [1]: import pandas as pd

In [2]: pd.to_datetime('2008-02-27')
Out[2]: datetime.datetime(2008, 2, 27, 0, 0)
</snippet></ROW><ROW><id>13655271</id><snippet>df.index = pd.to_datetime(df.index)
</snippet></ROW><ROW><id>13655271</id><snippet>df['date_col'] = df['date_col'].apply(pd.to_datetime)
</snippet></ROW><ROW><id>13655382</id><snippet>browser.find_elements_by_xpath(
    "//span[contains(text(), 'secs') or contains(text(), 'mins') or contains(text(), 'hrs')]")
</snippet></ROW><ROW><id>13655397</id><snippet>c</snippet></ROW><ROW><id>13655397</id><snippet>",+".join(c.rsplit("+", 1))
</snippet></ROW><ROW><id>13655397</id><snippet>import re
parts = re.split("([\+\-])", c)
parts.insert(3, ',')
print "".join(parts[1:])
</snippet></ROW><ROW><id>13655397</id><snippet>+27.5916,+086.5640'
</snippet></ROW><ROW><id>13655397</id><snippet>&gt;&gt;&gt; c = "+27.5916-086.5640"
&gt;&gt;&gt; parts = re.split("([\+\-])", c)
&gt;&gt;&gt; parts.insert(3, ',')
&gt;&gt;&gt; "".join(parts[1:])
'+27.5916,-086.5640'
</snippet></ROW><ROW><id>13655422</id><snippet>from contextlib import contextmanager
import inspect

@contextmanager
def ErrorManaged():
    try:
        yield
    except Exception as e:
        print e



def get_units():
    for x in range(-5,5):
        print(x)

        if x % 3 == 0:
            raise Exception("x nope")

        for y in range(-5,5):
            print("\t{}".format(y))

            if y % 3 == 0:
            raise Exception("y nope")

            for z in range(-5,5):
                print("\t\t{}".format(z))

                if z % 3 == 0:
                    raise Exception("z nope")


import re

def modify_get_units(get_units):    
    lines = inspect.getsourcelines(get_units)[0]
    add = "with ErrorManaged():\n"
    new = []
    tabsize = 0
    for c in lines[1]:
        if c == " ":
            tabsize += 1
        else:
            break

    count = 0
    for line in lines:
        new.append(" " * tabsize * count + line)
        m = re.match(r"^(\s+)for\s[()\w,]+\sin\s[^ :\n]+:\n$",line)
        if m:
            count += 1
            new.append(m.group(1) + " " * tabsize * count + add)

    return "".join(new)

oldfunc = inspect.getsource(get_units)
newfunc = modify_get_units(get_units)

#printing function bodies to show results

print(oldfunc)
print("\n\n\n")
print(newfunc)


#re-declare get_units
exec newfunc

#execute, but now now
#get_units()
</snippet></ROW><ROW><id>13655422</id><snippet>toon@ToonAlfrinkPC ~ $ python test.py
def get_units():
    for x in range(-5,5):
        print(x)

        if x % 3 == 0:
            raise Exception("x nope")

        for y in range(-5,5):
            print("\t{}".format(y))

            if y % 3 == 0:
                raise Exception("y nope")

            for z in range(-5,5):
                print("\t\t{}".format(z))

                if z % 3 == 0:
                    raise Exception("z nope")





def get_units():
    for x in range(-5,5):
        with ErrorManaged():
            print(x)

            if x % 3 == 0:
                raise Exception("x nope")

            for y in range(-5,5):
                with ErrorManaged():
                    print("\t{}".format(y))

                    if y % 3 == 0:
                        raise Exception("y nope")

                    for z in range(-5,5):
                        with ErrorManaged():
                            print("\t\t{}".format(z))

                            if z % 3 == 0:
                                raise Exception("z nope")
</snippet></ROW><ROW><id>13655483</id><snippet>python manage.py reset instaton</snippet></ROW><ROW><id>13655483</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>13655500</id><snippet>self.resizer.connect('motion-notify-event', self.on_resize)
</snippet></ROW><ROW><id>13655500</id><snippet>def on_resize(self, widget, event):
    if Gdk.ModifierType.BUTTON1_MASK &amp; event.get_state() != 0:
        mouse_y = event.device.get_position()[2]
        new_height = mouse_y - self.get_position()[1]
        if new_height &gt; 0:
            self.resize(self.get_allocation().width, new_height)
            self.show()
</snippet></ROW><ROW><id>13655546</id><snippet>from selenium import webdriver

fp = webdriver.FirefoxProfile()

fp.set_preference("browser.download.folderList",2)
fp.set_preference("javascript.enabled", False)

browser = webdriver.Firefox(firefox_profile=fp)
</snippet></ROW><ROW><id>13655546</id><snippet>webdriver</snippet></ROW><ROW><id>13655546</id><snippet>Firefox &gt; Preferences &gt; Content</snippet></ROW><ROW><id>13655546</id><snippet>enable javascript</snippet></ROW><ROW><id>13655681</id><snippet>filename = "myFile.txt"
outputFile = open(filename, "w")
string = "WWWW 2 77777 54 M 888 90 6.7 100 No yyy kk 888 zz F too yy 8.8 123 xxx yyy pp"
outputFile.write("\n".join(item for item in string.split(" ")))
outputFile.close()
</snippet></ROW><ROW><id>13655681</id><snippet>myFile.txt</snippet></ROW><ROW><id>13655681</id><snippet>WWWW
2
77777
54
M
888
90
6.7
100
No
yyy
kk
888
zz
F
too
yy
8.8
123
xxx
yyy
pp
</snippet></ROW><ROW><id>13655820</id><snippet>li = ['sea','mountain','desert',
      'Emma','Cathy','Kate',
      'ii','uuuuuuuuuuuuuuuuuuu','aaa',
      'round','flat','sharp',
      'blueberry','banana','apple',
      'red','purple','white',
      'hen','tiger']

a,b = divmod(len(li),3)
itn = iter(li).next
print ''.join('%s\t%s\t%s\n' % (itn(),itn(),itn())
              for i in xrange(a))\
      + ('%s\t%s\t\n' % (itn(),itn()) if b==2
         else '%s\t\n' % itn() if b==1
         else '')
</snippet></ROW><ROW><id>13655820</id><snippet>sea mountain    desert
Emma    Cathy   Kate
ii  uuuuuuuuuuuuuuuuuuu aaa
round   flat    sharp
blueberry   banana  apple
red purple  white
hen tiger   
</snippet></ROW><ROW><id>13655820</id><snippet>li = ['sea','mountain','desert',
      'Emma','Cathy','Kate',
      'HH','VVVVVVV','AAA',
      'round','flat','sharp',
      'blueberry','banana','apple',
      'red','purple','white',
      'hen','tiger']

maxel = max(len(el) for el in li)
a,b = divmod(len(li),3)
itn = iter(li).next
form = '%%-%ds\t%%-%ds\t%%-%ds\n' % (maxel,maxel,maxel)
print ''.join(form % (itn(),itn(),itn())
              for i in xrange(a))\
      + ('%%-%ds\t%%-%ds\t\n' %(maxel,maxel) % (itn(),itn()) if b==2
         else '%%-%ds\t\n' % ma% itn() if b==1
         else '')
</snippet></ROW><ROW><id>13655820</id><snippet>sea         mountain    desert   
Emma        Cathy       Kate     
HH          VVVVVVV     AAA      
round       flat        sharp    
blueberry   banana      apple    
red         purple      white    
hen         tiger       
</snippet></ROW><ROW><id>13655820</id><snippet>li = ['sea','mountain','desert',
      'Emma','Cathy','Kate',
      'HH','VVVVVVV','AAA',
      'round','flat','sharp',
      'nut','banana','apple',
      'red','purple','white',
      'hen','tiger']

maxel0 = max(len(li[i]) for i in xrange(0,len(li),3)) 
maxel1 = max(len(li[i]) for i in xrange(1,len(li),3))
maxel2 = max(len(li[i]) for i in xrange(2,len(li),3))
a,b = divmod(len(li),3)
itn = iter(li).next
form = '%%-%ds\t%%-%ds\t%%-%ds\n' % (maxel0,maxel1,maxel2)
print ''.join(form % (itn(),itn(),itn())
              for i in xrange(a))\
      + ('%%-%ds\t%%-%ds\t\n' %(maxel0,maxel1) % (itn(),itn()) if b==2
         else '%%-%ds\t\n' % maxel0 % itn() if b==1
         else '')
</snippet></ROW><ROW><id>13655820</id><snippet>sea     mountain    desert
Emma    Cathy       Kate  
HH      VVVVVVV     AAA   
round   flat        sharp 
nut     banana      apple 
red     purple      white 
hen     tiger       
</snippet></ROW><ROW><id>13655820</id><snippet>nc</snippet></ROW><ROW><id>13655820</id><snippet>from itertools import imap,islice

li = ['sea','mountain','desert',
      'Emma','Cathy','Kate',
      'HH','VVVVVVV','AAA',
      'round','flat','sharp',
      'nut','banana','apple',
      'heeeeeeeeeeen','tiger','snake'
      'red','purple','white',
      'atlantic','pacific','antarctic',
      'Bellini']

print 'len of li == %d\n' % len(li)

def cols_print(li,nc):
    maxel = tuple(max(imap(len,islice(li,st,None,nc)))
                  for st in xrange(nc))

    nblines,tail = divmod(len(li),nc)
    stakes = (nc-1)*['%%-%ds\t'] + ['%%-%ds']
    form = ''.join(stakes) % maxel

    itn = iter(li).next

    print '\n'.join(form % tuple(itn() for g in xrange(nc))
                  for i in xrange(nblines)) 
    if tail:
        print ''.join(stakes[nc-tail:]) % maxel[0:tail] % tuple(li[-tail:]) + '\n'
    else:
        print


for nc in xrange(3,8):
    cols_print(li,nc)
    print '-----------------------------------------------------------'
</snippet></ROW><ROW><id>13655820</id><snippet>len of li == 24

sea             mountain    desert  
Emma            Cathy       Kate    
HH              VVVVVVV     AAA     
round           flat        sharp   
nut             banana      apple   
heeeeeeeeeeen   tiger       snakered
purple          white       atlantic
pacific         antarctic   Bellini 

-----------------------------------------------------------
sea         mountain    desert      Emma         
Cathy       Kate        HH          VVVVVVV      
AAA         round       flat        sharp        
nut         banana      apple       heeeeeeeeeeen
tiger       snakered    purple      white        
atlantic    pacific     antarctic   Bellini      

-----------------------------------------------------------
sea             mountain    desert      Emma    Cathy
Kate            HH          VVVVVVV     AAA     round
flat            sharp       nut         banana  apple
heeeeeeeeeeen   tiger       snakered    purple  white
atlantic        pacific     antarctic   Bellini

-----------------------------------------------------------
sea     mountain    desert      Emma            Cathy       Kate    
HH      VVVVVVV     AAA         round           flat        sharp   
nut     banana      apple       heeeeeeeeeeen   tiger       snakered
purple  white       atlantic    pacific         antarctic   Bellini 

-----------------------------------------------------------
sea     mountain        desert  Emma        Cathy   Kate    HH      
VVVVVVV AAA             round   flat        sharp   nut     banana  
apple   heeeeeeeeeeen   tiger   snakered    purple  white   atlantic
pacific antarctic       Bellini

-----------------------------------------------------------
</snippet></ROW><ROW><id>13655820</id><snippet>maxel = tuple(max(imap(len,islice(li,st,None,nc)))+2
</snippet></ROW><ROW><id>13655820</id><snippet>from itertools import imap,islice

li = ['sea','mountain','desert',
      'Emma','Cathy','Kate',
      'HH','VVVVVVV','AAA',
      'round','flat','sharp',
      'nut','banana','apple',
      'heeeeeeeeeeen','tiger','snake'
      'red','purple','white',
      'atlantic','pacific','antarctic',
      'Bellini']

print 'len of li == %d\n' % len(li)
def cols_print(li,nc):
    maxel = tuple(max(imap(len,islice(li,st,None,nc)))+2
                  for st in xrange(nc))

    nblines,tail = divmod(len(li),nc)
    stakes = nc*['%%-%ds']
    form = ''.join(stakes) % maxel

    itn = iter(li).next

    print '\n'.join(form % tuple(itn() for g in xrange(nc))
                  for i in xrange(nblines)) 
    if tail:
        print ''.join(stakes[nc-tail:]) % maxel[0:tail] % tuple(li[-tail:]) + '\n'
    else:
        print


for nc in xrange(3,8):
    cols_print(li,nc)
    print 'mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm'
</snippet></ROW><ROW><id>13655820</id><snippet>len of li == 24

sea            mountain   desert    
Emma           Cathy      Kate      
HH             VVVVVVV    AAA       
round          flat       sharp     
nut            banana     apple     
heeeeeeeeeeen  tiger      snakered  
purple         white      atlantic  
pacific        antarctic  Bellini   

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
sea       mountain  desert     Emma           
Cathy     Kate      HH         VVVVVVV        
AAA       round     flat       sharp          
nut       banana    apple      heeeeeeeeeeen  
tiger     snakered  purple     white          
atlantic  pacific   antarctic  Bellini        

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
sea            mountain  desert     Emma     Cathy  
Kate           HH        VVVVVVV    AAA      round  
flat           sharp     nut        banana   apple  
heeeeeeeeeeen  tiger     snakered   purple   white  
atlantic       pacific   antarctic  Bellini  

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
sea     mountain  desert    Emma           Cathy      Kate      
HH      VVVVVVV   AAA       round          flat       sharp     
nut     banana    apple     heeeeeeeeeeen  tiger      snakered  
purple  white     atlantic  pacific        antarctic  Bellini   

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
sea      mountain       desert   Emma      Cathy   Kate   HH        
VVVVVVV  AAA            round    flat      sharp   nut    banana    
apple    heeeeeeeeeeen  tiger    snakered  purple  white  atlantic  
pacific  antarctic      Bellini  

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
</snippet></ROW><ROW><id>13655915</id><snippet>if success:
    return HttpResponse('&lt;body&gt;&lt;p&gt;SUCCESS&lt;/p&gt;&lt;/body&gt;')
</snippet></ROW><ROW><id>13655915</id><snippet>$.post(url, data, function(data) {

      if(data=="ERROR") {

         alert("THERE WAS AN ERROR");

      } else {

         $('tip').append(data)
      }
});
</snippet></ROW><ROW><id>13656001</id><snippet>In [14]: L = [['lorem', ['a', 'b', 'c', 'd']], ['ipsum', ['e']], ['dolor', ['f', 'g']], ['sit', ['h', 'i']]]

In [15]: '; '.join("%s (%s)" %(elem[0], " + ".join(elem[1])) for elem in L)
Out[15]: 'lorem (a + b + c + d); ipsum (e); dolor (f + g); sit (h + i)'
</snippet></ROW><ROW><id>13656001</id><snippet>In [18]: L = [(e[0], " + ".join(e[1])) for e in L]

In [19]: L
Out[19]: 
[('lorem', 'a + b + c + d'),
 ('ipsum', 'e'),
 ('dolor', 'f + g'),
 ('sit', 'h + i')]

In [20]: '; '.join("%s (%s)" %(e[0], e[1]) for e in L)
Out[20]: 'lorem (a + b + c + d); ipsum (e); dolor (f + g); sit (h + i)'
</snippet></ROW><ROW><id>13656171</id><snippet>m1.small</snippet></ROW><ROW><id>13656171</id><snippet>t1.micro</snippet></ROW><ROW><id>13656212</id><snippet>genList()</snippet></ROW><ROW><id>13656212</id><snippet>def genList(self, numList=None):
    if numList is None:
        numList = []

    if self.leftChild != 'none':
        self.leftChild.genList(numList)

    numList.append(self.Value)

    if self.rightChild != 'none':
        self.rightChild.genList(numList)

    return numList

results = rootNode.genList()
</snippet></ROW><ROW><id>13656212</id><snippet>'none'</snippet></ROW><ROW><id>13656212</id><snippet>None</snippet></ROW><ROW><id>13656212</id><snippet>None</snippet></ROW><ROW><id>13656212</id><snippet>In [1]: %cpaste
Pasting code; enter '--' alone on the line to stop or use Ctrl-D.
:&gt;&gt;&gt; import BinTreeNode as BTN
:&gt;&gt;&gt; node1 = BTN.BinaryTreeNode(5)
:&gt;&gt;&gt; node2 = BTN.BinaryTreeNode(2)
:&gt;&gt;&gt; node3 = BTN.BinaryTreeNode(12)
:&gt;&gt;&gt; node3 = BTN.BinaryTreeNode(16)
:&gt;&gt;&gt; node4 = BTN.BinaryTreeNode(4)
:&gt;&gt;&gt; node5 = BTN.BinaryTreeNode(13)
:&gt;&gt;&gt; node1.addChild(node2)
:&gt;&gt;&gt; node1.addChild(node3)
:&gt;&gt;&gt; node1.addChild(node4)
:&gt;&gt;&gt; node1.addChild(node5)
:&lt;EOF&gt;

In [2]: node4.genList()
Out[2]: [4]

In [3]: node1.genList()
Out[3]: [2, 4, 5, 13, 16]
</snippet></ROW><ROW><id>13656407</id><snippet>AddHandler x-application/mako-template .mako
Action x-application/mako-template /mako-handler
WSGIScriptAlias /mako-handler /usr/local/lib/cgi-bin/myscript.py
</snippet></ROW><ROW><id>13656552</id><snippet>from gi.repository import Gtk, Gdk

window = Gtk.Window()
window.connect("destroy", Gtk.main_quit)
screen = Gdk.Screen.get_default()
css_provider = Gtk.CssProvider()
css_provider.load_from_path('style.css')
priority = Gtk.STYLE_PROVIDER_PRIORITY_USER
context = Gtk.StyleContext()
context.add_provider_for_screen(screen, css_provider, priority)
entry = Gtk.Entry(text='Testing..')
window.add(entry)
window.show_all()
Gtk.main()
</snippet></ROW><ROW><id>13656552</id><snippet>GtkEntry {
    color: red;
    background: blue;
}
</snippet></ROW><ROW><id>13656634</id><snippet>'a'</snippet></ROW><ROW><id>13656668</id><snippet>\r</snippet></ROW><ROW><id>13656668</id><snippet>\n</snippet></ROW><ROW><id>13656668</id><snippet>\r\n</snippet></ROW><ROW><id>13656668</id><snippet>'U'</snippet></ROW><ROW><id>13656668</id><snippet>&gt;&gt;&gt; open('test_newlines.txt', 'rb').read()
'a\rb\nc\r\nd'
&gt;&gt;&gt; list(open('test_newlines.txt'))
['a\rb\n', 'c\r\n', 'd']
&gt;&gt;&gt; list(open('test_newlines.txt', 'U'))
['a\n', 'b\n', 'c\n', 'd']
&gt;&gt;&gt; open('test_newlines.txt').readlines()
['a\rb\n', 'c\r\n', 'd']
&gt;&gt;&gt; open('test_newlines.txt', 'U').readlines()
['a\n', 'b\n', 'c\n', 'd']
&gt;&gt;&gt; open('test_newlines.txt').read().split()
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>13656811</id><snippet>(</snippet></ROW><ROW><id>13656811</id><snippet>)</snippet></ROW><ROW><id>13656901</id><snippet>sum([val[-2] * val[-1] for val in a.values()])
</snippet></ROW><ROW><id>13656976</id><snippet>item1 = [] 
for line in item:
    for w in words:
        line = line.replace(w, '')
    item1.append(line)
</snippet></ROW><ROW><id>13656976</id><snippet>gg</snippet></ROW><ROW><id>13656976</id><snippet>line</snippet></ROW><ROW><id>13656976</id><snippet>it</snippet></ROW><ROW><id>13656976</id><snippet>item</snippet></ROW><ROW><id>13656976</id><snippet>line</snippet></ROW><ROW><id>13656976</id><snippet>w</snippet></ROW><ROW><id>13656976</id><snippet>replace</snippet></ROW><ROW><id>13656976</id><snippet>replace</snippet></ROW><ROW><id>13656976</id><snippet>re.sub</snippet></ROW><ROW><id>13656976</id><snippet>import re

item1 = [] 
for line in item:
    for w in words:
        line = re.sub(r'\b%s\b' % w, '', line)  # '\b' is a word boundry
    item1.append(line)
</snippet></ROW><ROW><id>13656985</id><snippet>import urllib2, httplib
httplib.HTTPConnection._http_vsn = 10
httplib.HTTPConnection._http_vsn_str = 'HTTP/1.0'
print urllib2.urlopen('http://localhost/').read()
</snippet></ROW><ROW><id>13656985</id><snippet>127.0.0.1 - - [01/Dec/2012:09:10:27 +0300] "GET / HTTP/1.1" 200 454 "-" "Python-urllib/2.7"
127.0.0.1 - - [01/Dec/2012:09:16:32 +0300] "GET / HTTP/1.0" 200 454 "-" "Python-urllib/2.7"
</snippet></ROW><ROW><id>13657089</id><snippet>def getsize():
    size = input('size?')
    return size

def makebox(size):
    # Some code goes here
</snippet></ROW><ROW><id>13657089</id><snippet>makebox()</snippet></ROW><ROW><id>13657089</id><snippet>makebox(getsize())  
</snippet></ROW><ROW><id>13657217</id><snippet>multiprocessing</snippet></ROW><ROW><id>13657217</id><snippet>class Worker:
    def run(self, msg):
        print '%s, it works!' % msg
</snippet></ROW><ROW><id>13657217</id><snippet>def run(msg):
    print '%s, it works!' % msg
</snippet></ROW><ROW><id>13657725</id><snippet>=</snippet></ROW><ROW><id>13657725</id><snippet>a, b = b, a
</snippet></ROW><ROW><id>13657725</id><snippet>a, b = 1, 2
a = b, a
</snippet></ROW><ROW><id>13657725</id><snippet>(2, 1)</snippet></ROW><ROW><id>13657725</id><snippet>a = b = c = 1
</snippet></ROW><ROW><id>13657725</id><snippet>a</snippet></ROW><ROW><id>13657725</id><snippet>1</snippet></ROW><ROW><id>13657725</id><snippet>b</snippet></ROW><ROW><id>13657725</id><snippet>c</snippet></ROW><ROW><id>13657725</id><snippet>a=a,b=b,c</snippet></ROW><ROW><id>13657725</id><snippet>a = 1</snippet></ROW><ROW><id>13657725</id><snippet>b = 2</snippet></ROW><ROW><id>13657725</id><snippet>c = 3</snippet></ROW><ROW><id>13657725</id><snippet>b, c</snippet></ROW><ROW><id>13657725</id><snippet>(2, 3)</snippet></ROW><ROW><id>13657725</id><snippet>a</snippet></ROW><ROW><id>13657725</id><snippet>a = (2, 3)</snippet></ROW><ROW><id>13657725</id><snippet>a, b</snippet></ROW><ROW><id>13657725</id><snippet>a = 2</snippet></ROW><ROW><id>13657725</id><snippet>b = 3</snippet></ROW><ROW><id>13657725</id><snippet>a = 2</snippet></ROW><ROW><id>13657725</id><snippet>b = 3</snippet></ROW><ROW><id>13657725</id><snippet>c = 3</snippet></ROW><ROW><id>13657725</id><snippet>b=a,b=b,c</snippet></ROW><ROW><id>13657725</id><snippet>a = 1</snippet></ROW><ROW><id>13657725</id><snippet>b = 2</snippet></ROW><ROW><id>13657725</id><snippet>c = 3</snippet></ROW><ROW><id>13657725</id><snippet>b = (2, 3)</snippet></ROW><ROW><id>13657725</id><snippet>b = 3</snippet></ROW><ROW><id>13657725</id><snippet>c=a,b=b,c</snippet></ROW><ROW><id>13657725</id><snippet>a = 1</snippet></ROW><ROW><id>13657725</id><snippet>b = 2</snippet></ROW><ROW><id>13657725</id><snippet>c = 3</snippet></ROW><ROW><id>13657725</id><snippet>c = (2, 3)</snippet></ROW><ROW><id>13657725</id><snippet>a = 2</snippet></ROW><ROW><id>13657725</id><snippet>b = 3</snippet></ROW><ROW><id>13657725</id><snippet>c = (2, 3)</snippet></ROW><ROW><id>13657725</id><snippet>d=a,b=b,c</snippet></ROW><ROW><id>13657725</id><snippet>a = 1</snippet></ROW><ROW><id>13657725</id><snippet>b = 2</snippet></ROW><ROW><id>13657725</id><snippet>c = 3</snippet></ROW><ROW><id>13657725</id><snippet>d</snippet></ROW><ROW><id>13657725</id><snippet>dis.dis()</snippet></ROW><ROW><id>13657725</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def f(): a=a,b=b,c
... 
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_FAST                0 (b)
              3 LOAD_GLOBAL              0 (c)
              6 BUILD_TUPLE              2
              9 DUP_TOP             
             10 STORE_FAST               1 (a)
             13 UNPACK_SEQUENCE          2
             16 STORE_FAST               1 (a)
             19 STORE_FAST               0 (b)
             22 LOAD_CONST               0 (None)
             25 RETURN_VALUE        
</snippet></ROW><ROW><id>13657725</id><snippet>BUILD_TUPLE</snippet></ROW><ROW><id>13657725</id><snippet>DUP_TOP</snippet></ROW><ROW><id>13657725</id><snippet>STORE_FAST</snippet></ROW><ROW><id>13657725</id><snippet>a</snippet></ROW><ROW><id>13657725</id><snippet>UNPACK_SEQUENCE</snippet></ROW><ROW><id>13657725</id><snippet>a</snippet></ROW><ROW><id>13657725</id><snippet>b</snippet></ROW><ROW><id>13657728</id><snippet>user = Element('user')
user.append((Element.fromstring('&lt;user username="admin" fullname="admin" password="xx"  uid="1000"/&gt;')))
</snippet></ROW><ROW><id>13657728</id><snippet>from xml.etree.ElementTree import Element</snippet></ROW><ROW><id>13657749</id><snippet>http://scitools.org.uk/cartopy/docs/latest/matplotlib/introductory_examples</snippet></ROW><ROW><id>13657749</id><snippet>plt.contourf(lons, lats, data, transform=ccrs.Geodetic())
</snippet></ROW><ROW><id>13657749</id><snippet>plt.contourf(lons, lats, data, transform=ccrs.PlateCarree())
</snippet></ROW><ROW><id>13657871</id><snippet>&gt;&gt;&gt; import cPickle
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; class MyObject(object):
...     def __init__(self, val):
...             self.val = val
...     def method(self):
...             print self.val
... 
&gt;&gt;&gt; timeit.timeit('cPickle.dumps(MyObject(100), 0)', 'from __main__ import cPickle, MyObject')
17.654622077941895
&gt;&gt;&gt; timeit.timeit('cPickle.dumps(MyObject(100), 1)', 'from __main__ import cPickle, MyObject')
14.536609172821045
&gt;&gt;&gt; timeit.timeit('cPickle.dumps(MyObject(100), 2)', 'from __main__ import cPickle, MyObject')
8.885567903518677
</snippet></ROW><ROW><id>13657871</id><snippet>&gt;&gt;&gt; dumped = cPickle.dumps(MyObject(100), 0)
&gt;&gt;&gt; timeit.timeit('cPickle.loads(dumped)', 'from __main__ import cPickle, dumped')
4.6161839962005615
&gt;&gt;&gt; dumped = cPickle.dumps(MyObject(100), 1)
&gt;&gt;&gt; timeit.timeit('cPickle.loads(dumped)', 'from __main__ import cPickle, dumped')
4.351701021194458
&gt;&gt;&gt; dumped = cPickle.dumps(MyObject(100), 2)
&gt;&gt;&gt; timeit.timeit('cPickle.loads(dumped)', 'from __main__ import cPickle, dumped')
2.3936450481414795
</snippet></ROW><ROW><id>13657871</id><snippet>fetch_sku2spu_dict</snippet></ROW><ROW><id>13657871</id><snippet>dict</snippet></ROW><ROW><id>13657871</id><snippet>&gt;&gt;&gt; mydict = dict(zip(range(100), range(100)))
&gt;&gt;&gt; timeit.timeit('cPickle.dumps(mydict, 0)', 'from __main__ import cPickle, mydict')
46.335021018981934
&gt;&gt;&gt; timeit.timeit('cPickle.dumps(mydict, 1)', 'from __main__ import cPickle, mydict')
7.913743019104004
&gt;&gt;&gt; timeit.timeit('cPickle.dumps(mydict, 2)', 'from __main__ import cPickle, mydict')
7.798863172531128
</snippet></ROW><ROW><id>13657871</id><snippet>&gt;&gt;&gt; dumped = cPickle.dumps(mydict, 0)
&gt;&gt;&gt; timeit.timeit('cPickle.loads(dumped)', 'from __main__ import cPickle, dumped')
32.81050395965576
&gt;&gt;&gt; dumped = cPickle.dumps(mydict, 1)
&gt;&gt;&gt; timeit.timeit('cPickle.loads(dumped)', 'from __main__ import cPickle, dumped')
13.997781038284302
&gt;&gt;&gt; dumped = cPickle.dumps(mydict, 2)
&gt;&gt;&gt; timeit.timeit('cPickle.loads(dumped)', 'from __main__ import cPickle, dumped')
14.006750106811523
</snippet></ROW><ROW><id>13657871</id><snippet>&gt;&gt;&gt; mydict = dict(zip(range(100), range(100)))
&gt;&gt;&gt; timeit.timeit('pickle.dumps(mydict,0)', 'from __main__ import pickle, mydict', number=10000)
2.9552500247955322
&gt;&gt;&gt; timeit.timeit('pickle.dumps(mydict,1)', 'from __main__ import pickle, mydict', number=10000)
3.831756830215454
&gt;&gt;&gt; timeit.timeit('pickle.dumps(mydict,2)', 'from __main__ import pickle, mydict', number=10000)
3.842888116836548
</snippet></ROW><ROW><id>13657871</id><snippet>&gt;&gt;&gt; dumped = pickle.dumps(mydict, 0)
&gt;&gt;&gt; timeit.timeit('pickle.loads(dumped)', 'from __main__ import pickle, dumped', number=10000)
2.988792896270752
&gt;&gt;&gt; dumped = pickle.dumps(mydict, 1)
&gt;&gt;&gt; timeit.timeit('pickle.loads(dumped)', 'from __main__ import pickle, dumped', number=10000)
1.2793281078338623
&gt;&gt;&gt; dumped = pickle.dumps(mydict, 2)
&gt;&gt;&gt; timeit.timeit('pickle.loads(dumped)', 'from __main__ import pickle, dumped', number=10000)
1.5425071716308594
</snippet></ROW><ROW><id>13658155</id><snippet>before_request</snippet></ROW><ROW><id>13658155</id><snippet>g</snippet></ROW><ROW><id>13658155</id><snippet>before_request</snippet></ROW><ROW><id>13658155</id><snippet>g</snippet></ROW><ROW><id>13658178</id><snippet>random.shuffle</snippet></ROW><ROW><id>13658178</id><snippet>TypeError</snippet></ROW><ROW><id>13658178</id><snippet>import random, unittest

class TestSequenceFunctions(unittest.TestCase):
    def test_shuffle(self):
        self.assertRaises(TypeError, random.shuffle, (1,2,3))

unittest.main()
</snippet></ROW><ROW><id>13658306</id><snippet>In [13]: os.path.dirname('urse/project/kb/use.js')
Out[13]: 'urse/project/kb'
</snippet></ROW><ROW><id>13658306</id><snippet>os.sep</snippet></ROW><ROW><id>13658306</id><snippet>os.path</snippet></ROW><ROW><id>13658507</id><snippet>import django.contrib.gis.gdal</snippet></ROW><ROW><id>13658507</id><snippet>__init__.py</snippet></ROW><ROW><id>13658507</id><snippet>import libgdal</snippet></ROW><ROW><id>13658507</id><snippet>gdal</snippet></ROW><ROW><id>13658507</id><snippet>gdal</snippet></ROW><ROW><id>13658507</id><snippet>gdal_full_version</snippet></ROW><ROW><id>13658507</id><snippet>libgdal</snippet></ROW><ROW><id>13658507</id><snippet>libgdal</snippet></ROW><ROW><id>13658507</id><snippet>&gt;&gt;&gt; import django.contrib.gis.gdal
&gt;&gt;&gt; print django.contrib.gis.gdal.gdal_full_version()
GDAL 1.6.3, released 2009/11/19
</snippet></ROW><ROW><id>13658507</id><snippet>&gt;&gt;&gt; import django.contrib.gis.gdal.libgdal
&gt;&gt;&gt; print django.contrib.gis.gdal.libgdal.gdal_full_version()
GDAL 1.6.3, released 2009/11/19
</snippet></ROW><ROW><id>13658526</id><snippet>table</snippet></ROW><ROW><id>13658526</id><snippet>table[x]</snippet></ROW><ROW><id>13658526</id><snippet>[
  ["0", ... ,"0"],
  ["0", ... ,"0"],
  ..
  ..
  ["0", ... ,"0"]
]
</snippet></ROW><ROW><id>13658526</id><snippet>(x,y)</snippet></ROW><ROW><id>13658560</id><snippet>fib(5) expands to fib(4)+fib(3)
  fib(4) expands to fib(3)+fib(2)
    fib(3) expands to fib(2)+fib(1)
      fib(2) expands to fib(1)+fib(0)
        fib(1) evaluates to 1
        fib(0) evaluates to 1
      fib(1) evaluates to 1
    fib(2) expands to fib(1)+fib(0)
      fib(1) evaluates to 1
      fib(0) evaluates to 1
  fib(3) expands to fib(2)+fib(1)
    fib(2) expands to fib(1)+fib(0)
      fib(1) evaluates to 1
      fib(0) evaluates to 1
    fib(1) evaluates to 1
</snippet></ROW><ROW><id>13658583</id><snippet>import re
d = {'account_id':'a_value','group_id':'g_value','other_id':'o_value' }

tests = (r'^settings/usergroups/(?P&lt;group_id&gt;\d+)/cargroups/$',
         r'^settings/usergroups/(?P&lt;group_id&gt;\d+)/other/(?P&lt;other_id&gt;\d+)/$',
         r'^settings/account/(?P&lt;account_id&gt;\d+)/other/(?P&lt;other_id&gt;\d+)/$',
         r'^settings/usergroups/(?P&lt;group_id&gt;(\d+|\w))/other/(?P&lt;other_id&gt;\d+)/$'
         )
metapat = r'\(\?P&lt;(.*?)&gt;.*?\)'
for t in tests:
      result = re.sub(metapat, r'{\1}', t)
      if result:
            print(result.format(**d))
</snippet></ROW><ROW><id>13658583</id><snippet>^settings/usergroups/g_value/cargroups/$
^settings/usergroups/g_value/other/o_value/$
^settings/account/a_value/other/o_value/$
^settings/usergroups/g_value)/other/o_value/$
</snippet></ROW><ROW><id>13658583</id><snippet>re</snippet></ROW><ROW><id>13659153</id><snippet>&gt;&gt;&gt; a
[0, 1, 0, 1]
&gt;&gt;&gt; int(''.join(str(i) for i in a), 2)
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13659301</id><snippet>take()</snippet></ROW><ROW><id>13659301</id><snippet>In [87]: m = np.random.random((6, 2))

In [88]: m
Out[88]: 
array([[ 0.6641412 ,  0.31556053],
       [ 0.11480163,  0.00143887],
       [ 0.4677745 ,  0.43055324],
       [ 0.49749099,  0.15678506],
       [ 0.48024596,  0.65701218],
       [ 0.48952677,  0.97089177]])

In [89]: m.take([0, 2, 5], axis=0)
Out[89]: 
array([[ 0.6641412 ,  0.31556053],
       [ 0.4677745 ,  0.43055324],
       [ 0.48952677,  0.97089177]])
</snippet></ROW><ROW><id>13659308</id><snippet>    signin_page = "/signin/"
    self.response.write('&lt;form action="%s"&gt;
                         &lt;input type="submit" value="Login to Google"&gt;&lt;/form&gt;'
                         % signin_page)
</snippet></ROW><ROW><id>13659308</id><snippet> class SignInHandler(webapp2.RequestHandler):
    def get(self):
        self.redirect(users.create_login_url(self.request.uri))
</snippet></ROW><ROW><id>13659308</id><snippet> application = webapp2.WSGIApplication([('/', IndexPageHandler),
                                        ('/signin/', SignInHandler),],)
</snippet></ROW><ROW><id>13659630</id><snippet>Opinions</snippet></ROW><ROW><id>13659630</id><snippet>Opinions</snippet></ROW><ROW><id>13659630</id><snippet>filter_horizontal</snippet></ROW><ROW><id>13659630</id><snippet>filter_vertical</snippet></ROW><ROW><id>13659735</id><snippet>glBindAttribLocation</snippet></ROW><ROW><id>13659735</id><snippet>_POSITION</snippet></ROW><ROW><id>13659735</id><snippet>_COLOR</snippet></ROW><ROW><id>13659735</id><snippet>glGetAttribLocation</snippet></ROW><ROW><id>13659735</id><snippet>GL_QUADS</snippet></ROW><ROW><id>13660074</id><snippet>itertools</snippet></ROW><ROW><id>13660074</id><snippet>def grouper(n, iterable, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>13660074</id><snippet>for paired in grouper(2, inputlist):
    # paired is a tuple of two elements from the inputlist at a time.
</snippet></ROW><ROW><id>13660074</id><snippet>grouper</snippet></ROW><ROW><id>13660074</id><snippet>newlist = list(grouper(2, inputlist))
</snippet></ROW><ROW><id>13660082</id><snippet>import re

ss = """commit a8c11fcee68881dfb86095aa36290fb304047cf1
log size 110
Author: XXXXXX XXXXXXXX &lt;XXXXXXXXXXXXXXX@XXXXX.XXX&gt;
Date:   Tue, 10 Apr 2012 11:19:44 +0300

    First commit
3       0       README.MD
blablah bla
commit 12458777AFDRE1254
log size 170
   Author: Jim Bluefish &lt;jimblfsh@gmail.com&gt;
Date   :   Yesterday 21:45:01 +0800
  A key with whitespace :       A_stupid_value    

    Funny commit
  From far from you
457      popo       not_README.MD"""

n = 0
print ('------ DISPLAY OF THE TEXT ------\n'
       ' col 1: index of line,\n'
       ' col 2: number of chars in the line\n'
       ' col 3: total of the numbers of chars of lines\n'
       ' col 4: repr(line)\n')
for j,line in enumerate(ss.splitlines(1)):
    n += len(line)
    print '%2d  %2d  %3d  %r' % (j,len(line),n,line)


print '=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-='
print '\n\n\n------ ANALYSER 2 OF THE TEXT ------'

regx1 = re.compile('^commit +(.+) *\r?\n'
                   'log size +(\d+) *\r?\n'
                   '((?:^ *.+?(?&lt;! ) *: *.+(?&lt;! ) *\r?\n)+)'
                   '((?:.*\r?\n(?!commit))+)',
                   re.MULTILINE)

regx2 = re.compile('^ *(.+?)(?&lt;! ) *: *(.+)(?&lt;! ) *\r?\n',
                   re.MULTILINE)

for mat in regx1.finditer(ss):

    commit_value,logsize,dicolines,msg = mat.groups()

    print ('\ncommit_value == %s\n'
           'logsize == %s'
           % (commit_value,logsize))

    print 'dictionary :\n',dict(regx2.findall(dicolines))

    actual_log_message = msg[0:int(logsize)-len(dicolines)].strip(' \r\n')
    print 'actual_log_message ==',repr(actual_log_message)
</snippet></ROW><ROW><id>13660082</id><snippet>------ DISPLAY OF THE TEXT ------
 col 1: index of line,
 col 2: number of chars in the line
 col 3: total of the numbers of chars of lines
 col 4: repr(line)

 0  48   48  'commit a8c11fcee68881dfb86095aa36290fb304047cf1\n'
 1  13   61  'log size 110\n'
 2  52  113  'Author: XXXXXX XXXXXXXX &lt;XXXXXXXXXXXXXXX@XXXXX.XXX&gt;\n'
 3  40  153  'Date:   Tue, 10 Apr 2012 11:19:44 +0300\n'
 4   1  154  '\n'
 5  17  171  '    First commit\n'
 6  26  197  '3       0       README.MD\n'
 7  12  209  'blablah bla\n'
 8  25  234  'commit 12458777AFDRE1254\n'
 9  13  247  'log size 170\n'
10  45  292  '   Author: Jim Bluefish &lt;jimblfsh@gmail.com&gt;\n'
11  36  328  'Date   :   Yesterday 21:45:01 +0800\n'
12  51  379  '  A key with whitespace :       A_stupid_value    \n'
13   1  380  '\n'
14  17  397  '    Funny commit\n'
15  20  417  '  From far from you\n'
16  33  450  '457      popo       not_README.MD'



------ ANALYSER OF THE TEXT ------

commit_value == a8c11fcee68881dfb86095aa36290fb304047cf1
logsize == 110
dico :
{'Date': 'Tue, 10 Apr 2012 11:19:44 +0300', 'Author': 'XXXXXX XXXXXXXX &lt;XXXXXXXXXXXXXXX@XXXXX.XXX&gt;'}
actual_log_message == 'First commit'


commit_value == 12458777AFDRE1254
logsize == 170
dico :
{'Date': 'Yesterday 21:45:01 +0800', 'A key with whitespace': 'A_stupid_value', 'Author': 'Jim Bluefish &lt;jimblfsh@gmail.com&gt;'}
actual_log_message == 'Funny commit\n  From far from you'
</snippet></ROW><ROW><id>13660083</id><snippet>0</snippet></ROW><ROW><id>13660083</id><snippet>def setElement(l, index, element):
    '''Change the element from given list(l) at given index.'''
    if l[index] != 0:
        raise Exception("Attempt to overwrite %s instead of 0" %l[index])
    else:
        l[index] = element
</snippet></ROW><ROW><id>13660083</id><snippet>setElement(&lt;list&gt;, &lt;index&gt;, &lt;element&gt;)</snippet></ROW><ROW><id>13660083</id><snippet> In[1]: a = [0, 0, 0, 0, 0, 0, 0]

 In[2]: setElement(a, 2, 3)

 In[3]: setElement(a, len(a)-1, "Last Element!")

 In[4]: setElement(a, len(a)-1, 53)
Out[4]: Attempt to overwrite "Last Element!" instead of 0

 In[5]: print(a)
Out[5]: [0, 0, 3, 0, 0, 0, "Last Element"]
</snippet></ROW><ROW><id>13660266</id><snippet>'''</snippet></ROW><ROW><id>13660266</id><snippet>"""</snippet></ROW><ROW><id>13660266</id><snippet>longstring = """\
You can use multiple lines
and newlines
are preserved
"""
</snippet></ROW><ROW><id>13660266</id><snippet>\</snippet></ROW><ROW><id>13660266</id><snippet>You</snippet></ROW><ROW><id>13660266</id><snippet>&gt;&gt;&gt; longstring = """\
... You can use multiple lines
... and newlines
... are preserved
... """
&gt;&gt;&gt; print longstring
You can use multiple lines
and newlines
are preserved
</snippet></ROW><ROW><id>13660323</id><snippet>C-c C-\</snippet></ROW><ROW><id>13660323</id><snippet>TkAgg</snippet></ROW><ROW><id>13660323</id><snippet>C-c
C-c</snippet></ROW><ROW><id>13660323</id><snippet>   import numpy as np
   import matplotlib as mpl
   mpl.use('TkAgg') # do this before importing pyplot
   import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>13660323</id><snippet>plt.ion()</snippet></ROW><ROW><id>13660323</id><snippet>"""
http://stackoverflow.com/q/13660042/190597
Simple circular box simulator, part of part_sim
Restructure to import into gravity() or coloumb () or wind() or pressure()
Or to use all forces: sim_full()
Note: Implement crashing as backbone to all forces
"""

import Tkinter as tk
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.figure as mplfig
import scipy.spatial.distance as dist
import matplotlib.backends.backend_tkagg as tkagg

class App(object):
    def __init__(self, master):
        self.master = master
        self.fig = mplfig.Figure(figsize = (5, 4), dpi = 100)
        self.ax = self.fig.add_subplot(111)
        self.canvas = canvas = tkagg.FigureCanvasTkAgg(self.fig, master)
        canvas.get_tk_widget().pack(side = tk.TOP, fill = tk.BOTH, expand = 1)
        self.toolbar = toolbar = tkagg.NavigationToolbar2TkAgg(canvas, master)
        self.button = button = tk.Button(master, text = 'Quit', command = master.quit)
        button.pack(side = tk.BOTTOM)
        toolbar.update()
        self.update = self.animate().next
        master.after(10, self.update) 
        canvas.show()

    def animate(self):
        N = 100                                             #Number of particles
        R = 10000                                           #Box width
        pR= 5                                               #Particle radius

        r = np.random.randint(0, R, (N,2))                  #Position vector
        v = np.random.randint(-R/100,R/100,(N,2))           #velocity vector
        a = np.array([0,-10])                               #Forces
        v_limit = R/2                                       #Speedlimit

        line, = self.ax.plot([],'o')
        line2, = self.ax.plot([],'o')                           #Track a particle
        self.ax.set_xlim(0, R+pR)
        self.ax.set_ylim(0, R+pR)        

        while True:
            v=v+a                                           #Advance
            r=r+v

            #Collision tests
            r_hit_x0 = np.where(r[:,0]&lt;0)                   #Hit floor?
            r_hit_x1 = np.where(r[:,0]&gt;R)                   #Hit roof?
            r_hit_LR = np.where(r[:,1]&lt;0)                   #Left wall?
            r_hit_RR = np.where(r[:,1]&gt;R)                   #Right wall?

            #Stop at walls
            r[r_hit_x0,0] = 0
            r[r_hit_x1,0] = R
            r[r_hit_LR,1] = 0
            r[r_hit_RR,1] = R

            #Reverse velocities
            v[r_hit_x0,0] = -0.9*v[r_hit_x0,0]
            v[r_hit_x1,0] = -v[r_hit_x1,0]
            v[r_hit_LR,1] = -0.95*v[r_hit_LR,1]
            v[r_hit_RR,1] = -0.99*v[r_hit_RR,1]

            #Collisions
            D = dist.squareform(dist.pdist(r))
            ind1, ind2 = np.where(D &lt; pR)
            unique = (ind1 &lt; ind2)
            ind1 = ind1[unique]
            ind2 = ind2[unique]

            for i1, i2 in zip(ind1, ind2):
                eps = np.random.rand()
                vtot= v[i1,:]+v[i2,:]
                v[i1,:] = -(1-eps)*vtot
                v[i2,:] = -eps*vtot

            line.set_ydata(r[:,1])
            line.set_xdata(r[:,0])
            line2.set_ydata(r[:N/5,1])
            line2.set_xdata(r[:N/5,0])
            self.canvas.draw()
            self.master.after(1, self.update) 
            yield

def main():
    root = tk.Tk()
    app = App(root)
    tk.mainloop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13660744</id><snippet>list_of_dicts = [{'hello': 'goodbye'}, {'yes': 'no'}]
out_path= "/docs/outfile.txt"
out_file = open(out_path, 'wb')

fieldnames = sorted(list(set(k for d in list_of_dicts for k in d)))
writer = csv.DictWriter(out_file, fieldnames=fieldnames, dialect='excel')

writer.writeheader() # Assumes Python &gt;= 2.7
for row in list_of_dicts:
    writer.writerow(row)
out_file.close()
</snippet></ROW><ROW><id>13660744</id><snippet>list_of_dicts</snippet></ROW><ROW><id>13660744</id><snippet>fieldnames</snippet></ROW><ROW><id>13660744</id><snippet>fieldnames = reader.fieldnames</snippet></ROW><ROW><id>13660744</id><snippet>for</snippet></ROW><ROW><id>13660744</id><snippet>writer.writerows(list_of_dicts)</snippet></ROW><ROW><id>13660744</id><snippet>with</snippet></ROW><ROW><id>13660744</id><snippet>list_of_dicts = [{'hello': 'goodbye'}, {'yes': 'no'}]
out_path= "/docs/outfile.txt"

fieldnames = sorted(list(set(k for d in list_of_dicts for k in d)))

with open(out_path, 'wb') as out_file:
    writer = csv.DictWriter(out_file, fieldnames=fieldnames, dialect='excel')
    writer.writeheader()
    writer.writerows(list_of_dicts)
</snippet></ROW><ROW><id>13660819</id><snippet>plt.autoscale()</snippet></ROW><ROW><id>13660819</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data1, data2 = np.random.random((2,10,10))

fig, ax = plt.subplots()
ax.imshow(data1, extent=[-10, 0, -10, 0])
ax.imshow(data2, extent=[10, 20, 10, 20])

plt.show()
</snippet></ROW><ROW><id>13660819</id><snippet>autoscale</snippet></ROW><ROW><id>13660819</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data1, data2 = np.random.random((2,10,10))

fig, ax = plt.subplots()
ax.imshow(data1, extent=[-10, 0, -10, 0])
ax.imshow(data2, extent=[10, 20, 10, 20])

ax.autoscale()

plt.show()
</snippet></ROW><ROW><id>13660977</id><snippet>m1</snippet></ROW><ROW><id>13660977</id><snippet>m2</snippet></ROW><ROW><id>13660977</id><snippet>m1 = QtGui.QMenu("Menu 1")
m2 = QtGui.QMenu("Notes", m1)
</snippet></ROW><ROW><id>13660982</id><snippet>re.sub(r'(\d+)', '\n\\1', input)
</snippet></ROW><ROW><id>13660982</id><snippet>&gt;&gt;&gt; print(re.sub(r'(\d+)', r'\n\1', input))

1 blahblahblah 
2 sdsdsdsdsd 
3 uuuuuu 
4 eeee 
5 abcdef
</snippet></ROW><ROW><id>13660982</id><snippet>(\d+)</snippet></ROW><ROW><id>13661005</id><snippet>valfmt</snippet></ROW><ROW><id>13661005</id><snippet>valfmt='%0.0f'</snippet></ROW><ROW><id>13661005</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.widgets import Slider

class ChangingPlot(object):
    def __init__(self):
        self.inc = 0.5

        self.fig, self.ax = plt.subplots()
        self.sliderax = self.fig.add_axes([0.2, 0.02, 0.6, 0.03],
                                          axisbg='yellow')

        self.slider = Slider(self.sliderax, 'Value', 0, 10, valinit=self.inc)
        self.slider.on_changed(self.update)
        self.slider.drawon = False

        x = np.arange(0, 10.5, self.inc)
        self.ax.plot(x, x, 'ro')
        self.dot, = self.ax.plot(self.inc, self.inc, 'bo', markersize=18)

    def update(self, value):
        value = int(value / self.inc) * self.inc
        self.dot.set_data([[value],[value]])
        self.slider.valtext.set_text('{}'.format(value))
        self.fig.canvas.draw()

    def show(self):
        plt.show()

p = ChangingPlot()
p.show()
</snippet></ROW><ROW><id>13661005</id><snippet>matplotlib.widgets.Slider</snippet></ROW><ROW><id>13661005</id><snippet>Slider.set_val</snippet></ROW><ROW><id>13661005</id><snippet>class DiscreteSlider(Slider):
    """A matplotlib slider widget with discrete steps."""
    def __init__(self, *args, **kwargs):
        """Identical to Slider.__init__, except for the "increment" kwarg.
        "increment" specifies the step size that the slider will be discritized
        to."""
        self.inc = kwargs.pop('increment', 0.5)
        Slider.__init__(self, *args, **kwargs)

    def set_val(self, val):
        discrete_val = int(val / self.inc) * self.inc
        # We can't just call Slider.set_val(self, discrete_val), because this 
        # will prevent the slider from updating properly (it will get stuck at
        # the first step and not "slide"). Instead, we'll keep track of the
        # the continuous value as self.val and pass in the discrete value to
        # everything else.
        xy = self.poly.xy
        xy[2] = discrete_val, 1
        xy[3] = discrete_val, 0
        self.poly.xy = xy
        self.valtext.set_text(self.valfmt % discrete_val)
        if self.drawon: 
            self.ax.figure.canvas.draw()
        self.val = val
        if not self.eventson: 
            return
        for cid, func in self.observers.iteritems():
            func(discrete_val)
</snippet></ROW><ROW><id>13661005</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.widgets import Slider

class ChangingPlot(object):
    def __init__(self):
        self.inc = 0.5

        self.fig, self.ax = plt.subplots()
        self.sliderax = self.fig.add_axes([0.2, 0.02, 0.6, 0.03],
                                          axisbg='yellow')

        self.slider = DiscreteSlider(self.sliderax, 'Value', 0, 10, 
                                     increment=self.inc, valinit=self.inc)
        self.slider.on_changed(self.update)

        x = np.arange(0, 10.5, self.inc)
        self.ax.plot(x, x, 'ro')
        self.dot, = self.ax.plot(self.inc, self.inc, 'bo', markersize=18)

    def update(self, value):
        self.dot.set_data([[value],[value]])

    def show(self):
        plt.show()

class DiscreteSlider(Slider):
    """A matplotlib slider widget with discrete steps."""
    def __init__(self, *args, **kwargs):
        """Identical to Slider.__init__, except for the "increment" kwarg.
        "increment" specifies the step size that the slider will be discritized
        to."""
        self.inc = kwargs.pop('increment', 0.5)
        Slider.__init__(self, *args, **kwargs)

    def set_val(self, val):
        discrete_val = int(val / self.inc) * self.inc
        # We can't just call Slider.set_val(self, discrete_val), because this 
        # will prevent the slider from updating properly (it will get stuck at
        # the first step and not "slide"). Instead, we'll keep track of the
        # the continuous value as self.val and pass in the discrete value to
        # everything else.
        xy = self.poly.xy
        xy[2] = discrete_val, 1
        xy[3] = discrete_val, 0
        self.poly.xy = xy
        self.valtext.set_text(self.valfmt % discrete_val)
        if self.drawon: 
            self.ax.figure.canvas.draw()
        self.val = val
        if not self.eventson: 
            return
        for cid, func in self.observers.iteritems():
            func(discrete_val)


p = ChangingPlot()
p.show()
</snippet></ROW><ROW><id>13661127</id><snippet>field.table.index((self.x-v*b, self.y-v*c))
</snippet></ROW><ROW><id>13661127</id><snippet>(1, 4)</snippet></ROW><ROW><id>13661127</id><snippet>field.table</snippet></ROW><ROW><id>13661127</id><snippet>field.table[1][4]</snippet></ROW><ROW><id>13661127</id><snippet>growth</snippet></ROW><ROW><id>13661127</id><snippet>field.table[self.x-v*b]</snippet></ROW><ROW><id>13661127</id><snippet>self.y-v*c</snippet></ROW><ROW><id>13661127</id><snippet>"0"</snippet></ROW><ROW><id>13661127</id><snippet>0</snippet></ROW><ROW><id>13661127</id><snippet>growth</snippet></ROW><ROW><id>13661497</id><snippet>context.get_priority_display()
</snippet></ROW><ROW><id>13661565</id><snippet>Thumbnail</snippet></ROW><ROW><id>13661565</id><snippet>load</snippet></ROW><ROW><id>13661565</id><snippet>source</snippet></ROW><ROW><id>13661565</id><snippet>generate</snippet></ROW><ROW><id>13661565</id><snippet>ImageField</snippet></ROW><ROW><id>13661565</id><snippet>generate</snippet></ROW><ROW><id>13661565</id><snippet>generate</snippet></ROW><ROW><id>13661565</id><snippet>IOError</snippet></ROW><ROW><id>13661565</id><snippet>0</snippet></ROW><ROW><id>13661565</id><snippet>Thumbnail</snippet></ROW><ROW><id>13661565</id><snippet>Thumbnail</snippet></ROW><ROW><id>13661565</id><snippet>generate</snippet></ROW><ROW><id>13661565</id><snippet># Example from your code #
def generate(self, size=None, fit=True):
    ...
    # The first time you do this, it will read
    # self.source to the end, because in Django, you
    # are passing a file-like object.
    image = Image.open(self.source)

# this will work the first time
generate()
# uh oh. self.source was a file object that is at the end
generate() # crash
</snippet></ROW><ROW><id>13661565</id><snippet>from cStringIO import StringIO
from PIL import Image

class Thumbnail(object):

    SIZE = (50, 50)

    def __init__(self, source):
        self.source = source
        self.output = None

        self._pilImage = Image.open(self.source)

    def generate(self, size=None, fit=True):
        if not size:
            size = self.SIZE

        if not isinstance(size, tuple):
            raise TypeError('Thumbnail class: The size parameter must be an instance of a tuple.')

        # resize properties
        box = size
        factor = 1
        image = self._pilImage.copy()

        # Convert to RGB if necessary
        if image.mode not in ('L', 'RGB'): 
            image = image.convert('RGB')
        while image.size[0]/factor &gt; 2*box[0] and image.size[1]*2/factor &gt; 2*box[1]:
            factor *=2
        if factor &gt; 1:
            image.thumbnail((image.size[0]/factor, image.size[1]/factor), Image.NEAREST)

        #calculate the cropping box and get the cropped part
        if fit:
            x1 = y1 = 0
            x2, y2 = image.size
            wRatio = 1.0 * x2/box[0]
            hRatio = 1.0 * y2/box[1]
            if hRatio &gt; wRatio:
                y1 = int(y2/2-box[1]*wRatio/2)
                y2 = int(y2/2+box[1]*wRatio/2)
            else:
                x1 = int(x2/2-box[0]*hRatio/2)
                x2 = int(x2/2+box[0]*hRatio/2)
            image = image.crop((x1,y1,x2,y2))

        #Resize the image with best quality algorithm ANTI-ALIAS
        image.thumbnail(box, Image.ANTIALIAS)

        # save image to memory
        temp_handle = StringIO()
        image.save(temp_handle, 'png')
        temp_handle.seek(0)

        self.output = temp_handle

        return self

    def get_output(self):
        self.output.seek(0)
        return self.output.read()
</snippet></ROW><ROW><id>13661565</id><snippet>Thumbnail(src).generate((200, 200)).get_output()</snippet></ROW><ROW><id>13661565</id><snippet>source</snippet></ROW><ROW><id>13661565</id><snippet>output</snippet></ROW><ROW><id>13661565</id><snippet>output</snippet></ROW><ROW><id>13661565</id><snippet>Thumbnail</snippet></ROW><ROW><id>13661565</id><snippet>output</snippet></ROW><ROW><id>13661565</id><snippet># your code #
    # this is assigning the most recently processed
    # object to the class level. shared among all.
    self.output = temp_handle

    return self

def get_output(self):
    # always read the shared class level
    return self.output.read()
</snippet></ROW><ROW><id>13661565</id><snippet>def save(self, commit=True):
    instance = super(ImageForm, self).save(commit=True)

    thumb = Thumbnail(instance.src)

    instance.r128 = SimpleUploadedFile(
        instance.src.name,
        thumb.generate((128, 128)).get_output(),
        content_type='image/png'
    )

    instance.r200 = SimpleUploadedFile(
        instance.src.name,
        thumb.generate((200, 200)).get_output(),
        content_type='image/png'
    )
</snippet></ROW><ROW><id>13661565</id><snippet>Thumbnail</snippet></ROW><ROW><id>13661593</id><snippet>  sudo gunicorn app:app --bind unix:/tmp/gunicorn_flask.sock -w 4 -D
</snippet></ROW><ROW><id>13661593</id><snippet>    upstream flask_server {
        # swap the commented lines below to switch between socket and port
        server unix:/tmp/gunicorn_flask.sock fail_timeout=0;
        #server 127.0.0.1:5000 fail_timeout=0;
    }
    server {
        listen 80;
        server_name www.example.com;
        return 301 $scheme://example.com$request_uri;
    }

    server {
        listen 80;
        client_max_body_size 4G;
        server_name example.com;

        keepalive_timeout 5;

        # path for static files
        location  /static {
            alias /path/to/static;
            autoindex on;
            expires max;
        }

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;

            if (!-f $request_filename) {
                proxy_pass http://flask_server;
                break;
            }
        }
    }

}
</snippet></ROW><ROW><id>13661622</id><snippet>.bash_login</snippet></ROW><ROW><id>13661622</id><snippet>python</snippet></ROW><ROW><id>13661622</id><snippet>/usr/bin</snippet></ROW><ROW><id>13661634</id><snippet>def isInAlphabeticalOrder(word):
    for i in range(len(word) - 1):
        if word[i] &gt; word[i + 1]:
            return False
    return True
</snippet></ROW><ROW><id>13661661</id><snippet>datetime.time.min</snippet></ROW><ROW><id>13661661</id><snippet>datetime.time.max</snippet></ROW><ROW><id>13661661</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.time.min
datetime.time(0, 0)
&gt;&gt;&gt; datetime.time.max
datetime.time(23, 59, 59, 999999)
</snippet></ROW><ROW><id>13661661</id><snippet>datetime.date</snippet></ROW><ROW><id>13661661</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13661661</id><snippet>&gt;&gt;&gt; datetime.datetime.combine(datetime.date.today(), datetime.time.max)
datetime.datetime(2012, 12, 1, 23, 59, 59, 999999)
</snippet></ROW><ROW><id>13661661</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13661661</id><snippet>.combine()</snippet></ROW><ROW><id>13661661</id><snippet>.date()</snippet></ROW><ROW><id>13661661</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13661661</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13661661</id><snippet>&gt;&gt;&gt; datetime.datetime.combine(datetime.datetime.now().date(), datetime.time.min)
datetime.datetime(2012, 12, 1, 0, 0)
</snippet></ROW><ROW><id>13661661</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>13661661</id><snippet>today = datetime.date.today()
lastweek = today - datetime.timedelta(days=7)
for i in range(7):
    aday = lastweek + datetime.timedelta(days=i)
    first = datetime.datetime.combine(aday, datetime.time.min)
    last = datetime.datetime.combine(aday, datetime.time.max)
    print first, last
</snippet></ROW><ROW><id>13661880</id><snippet>import gtk, os.path

def keypress(win, event):
    if event.keyval == gtk.keysyms.F11:
        win.is_fullscreen = not getattr(win, 'is_fullscreen', False)
        action = win.fullscreen if win.is_fullscreen else win.unfullscreen
        action()
        label.set_visible(not win.is_fullscreen)

win = gtk.Window()
win.connect("delete-event", gtk.main_quit)
win.connect('key-press-event', keypress)
image = gtk.image_new_from_stock(gtk.STOCK_ABOUT, gtk.ICON_SIZE_DIALOG)
label = gtk.Label(('test ' * 20 + '\n') * 20)
vbox = gtk.HBox()
vbox.add(label)
vbox.add(image)
win.add(vbox)
win.show_all()
gtk.main()
</snippet></ROW><ROW><id>13662098</id><snippet>class Example(object):
    def __init__(self):
        self.x = 5

    def addYtoX(self, y):
        return self.x + y
</snippet></ROW><ROW><id>13662098</id><snippet>property</snippet></ROW><ROW><id>13662136</id><snippet>A</snippet></ROW><ROW><id>13662136</id><snippet>b</snippet></ROW><ROW><id>13662136</id><snippet>b</snippet></ROW><ROW><id>13662136</id><snippet>A</snippet></ROW><ROW><id>13662136</id><snippet>A[i] = A[i]/float(A[i,i])
b[i] = b[i]/float(A[i,i])
</snippet></ROW><ROW><id>13662136</id><snippet>divisor = A[i,i]
A[i] = A[i]/float(divisor)
b[i] = b[i]/float(divisor)
</snippet></ROW><ROW><id>13662136</id><snippet>A[l] -= A[i]*A[l,i]
b[l] -= b[i]*A[l,i]
</snippet></ROW><ROW><id>13662136</id><snippet>multiplier = A[l,i]
A[l] -= A[i]*multiplier
b[l] -= b[i]*multiplier
</snippet></ROW><ROW><id>13662136</id><snippet>b</snippet></ROW><ROW><id>13662136</id><snippet>b[i]</snippet></ROW><ROW><id>13662136</id><snippet>1.0</snippet></ROW><ROW><id>13662136</id><snippet>0.0</snippet></ROW><ROW><id>13662136</id><snippet>b[i]</snippet></ROW><ROW><id>13662136</id><snippet>b[l]</snippet></ROW><ROW><id>13662443</id><snippet>dict</snippet></ROW><ROW><id>13662443</id><snippet>list</snippet></ROW><ROW><id>13662443</id><snippet>def json_serialize(ip, mac, nic):
    net_info = []
    for ipaddr, macaddr, nicname in zip(ip, mac, nic):
        net_info.append({
            'interface_name': nicaddr,
            'mac': macaddr,
            'ip': ipaddr
        })
    return json.dumps({'net_info': net_info})
</snippet></ROW><ROW><id>13662443</id><snippet>{</snippet></ROW><ROW><id>13662443</id><snippet>}</snippet></ROW><ROW><id>13662443</id><snippet>print json_serialize(ip, mac, nic)[1:-1]
</snippet></ROW><ROW><id>13662513</id><snippet>a = range(5)
list(itertools.chain(*[[x, x] if x % 2 == 1 else [x] for x in a]))
# =&gt; [0, 1, 1, 2, 3, 3, 4]
</snippet></ROW><ROW><id>13662513</id><snippet>[[x, x] if x % 2 == 1 else [x] for x in a] # =&gt; [[0], [1, 1], [2], [3, 3], [4]]
</snippet></ROW><ROW><id>13662513</id><snippet>itertools.chain</snippet></ROW><ROW><id>13662796</id><snippet>&gt;&gt;&gt; inList = [1,2,3,4,5]
&gt;&gt;&gt; inDict = {1:5, 2:2, 3:4, 4:1, 5:3}
&gt;&gt;&gt; sorted(inList, key=lambda x: inDict.get(x,0))
[4, 2, 5, 3, 1]
</snippet></ROW><ROW><id>13662796</id><snippet>sorted()</snippet></ROW><ROW><id>13662809</id><snippet>%Y</snippet></ROW><ROW><id>13662809</id><snippet>time = '2012-03-01T00:05:55+00:00'
datetime.strptime(time, "%Y-%m-%dT%H:%M:%S+00:00")
# =&gt; datetime.datetime(2012, 3, 1, 0, 5, 55)
</snippet></ROW><ROW><id>13662809</id><snippet>strftime()</snippet></ROW><ROW><id>13662809</id><snippet>strptime()</snippet></ROW><ROW><id>13662938</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
points, = ax.plot(range(10), 'ro')
ax.axis([-1, 10, -1, 10])

# Get the x and y data and transform it into pixel coordinates
x, y = points.get_data()
xy_pixels = ax.transData.transform(np.vstack([x,y]).T)
xpix, ypix = xy_pixels.T

# In matplotlib, 0,0 is the lower left corner, whereas it's usually the upper 
# right for most image software, so we'll flip the y-coords...
width, height = fig.canvas.get_width_height()
ypix = height - ypix

print 'Coordinates of the points in pixel coordinates...'
for xp, yp in zip(xpix, ypix):
    print '{x:0.2f}\t{y:0.2f}'.format(x=xp, y=yp)

# We have to be sure to save the figure with it's current DPI
# (savfig overrides the DPI of the figure, by default)
fig.savefig('test.png', dpi=fig.dpi)
</snippet></ROW><ROW><id>13662938</id><snippet>Coordinates of the points in pixel coordinates...
125.09  397.09
170.18  362.18
215.27  327.27
260.36  292.36
305.45  257.45
350.55  222.55
395.64  187.64
440.73  152.73
485.82  117.82
530.91  82.91
</snippet></ROW><ROW><id>13662968</id><snippet>In [7]: headers = {}
In [8]: headers['User-Agent'] = "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.27 Safari/537.17"
In [9]: r = requests.get('http://www.google.com/searchbyimage?image_url=http://i.imgur.com/j3shP.jpg', headers=headers)
</snippet></ROW><ROW><id>13662968</id><snippet>h9fVq52EM&amp;tbnh=0&amp;tbnw=0&amp;prev=/search%3Fq%3D%26tbm%3Disch%26tbo%3Du&amp;zoom=1&amp;q=&amp;usg=__ZgK5jfDBcK04SU2bfmNK5FCj6t8=&amp;docid=xg1LDwTq_rx2VM&amp;sa=X&amp;ei=cFu6UIPgI-7q0QHi54DYAQ&amp;ved=0CH0Q1Rc"&gt;&lt;img src="http://t3.gstatic.com/images?q=tbn:ANd9GcRZymll5oKgx8oqrdojY6ATda9pY5yWzG0JzsGcf7AA739px2wEYy_jYA" alt="Wine-throated Hummingbird" border=0 height=116 style="margin-left:-30px;" width=173&gt;&lt;/a&gt;&lt;/div&gt;&lt;a href="/imgres?imgurl=http://ibc.lynxeds.com/files/imagecache/photo_940/pictures/Eisermann_Atthis_ellioti.jpg&amp;imgrefurl=http://ibc.lynxeds.com/photo/wine-throated-hummingbird-atthis-ellioti/displaying-male&amp;h=162&amp;w=242&amp;sz=5&amp;tbnid=3xjh-h9fVq52EM&amp;tbnh=0&amp;tbnw=0&amp;prev=/search%3Fq%3D%26tbm%3Disch%26tbo%3Du&amp;zoom=1&amp;q=&amp;usg=__ZgK5jfDBcK04SU2bfmNK5FCj6t8=&amp;docid=xg1LDwTq_rx2VM&amp;sa=X&amp;ei=cFu6UIPgI-7q0QHi54DYAQ&amp;ved=0CH4QuhM"class="fl ellip" style="color:#999;font-size:11px;display:inline-block;text-align:right;width:100%"&gt;ibc.lynxeds.com&lt;/a&gt;&lt;/div&gt;&lt;div class=krable data-ved="0CH0Q1Rc" style="float:right;margin:5px 0 4px"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="kno-desc kno-fb-ctx"&gt;&lt;div &gt;The Wine-Throated Hummingbird is a species of hummingbird in the Trochilidae family. It is found in El Salvador, Guatemala, Honduras, and Mexico. Its natural habitats are subtropical or tropical moist montane forests. &lt;a href="http://en.wikipedia.org/wiki/Wine-throated_Hummingbird" class="fl q" style="color:#999;font-size:11px"  onmousedown="return rwt(this,\'\',\'\',\'\',\'17\',\'AFQjCNH07EpIAh31_2ubTIQThRNfQluC8g\',\'\',\'0CH8QmhMoADAQ\',\'\',\'\',event)"&gt;&lt;span class=kno-desca&gt;Wikipedia&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=krable data-ved="0CH8QmhM" style="margin:2px 0 4px"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=rhsl5 style=clear:both&gt;&lt;/div&gt;&lt;div class="kno-ft kno-xs"&gt;&lt;table class="kno-fs ts"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;width:100%"&gt;&lt;div class="kno-f kno-fb-ctx"&gt;&lt;span class=krable data-ved="0CIIBEMsTKAA" style="margin:0 0 5px"&gt;&lt;/span&gt;&lt;span class="kno-fh "&gt;&lt;a href="/search?hl=en&amp;tbo=d&amp;q=wine+throated+hummingbird+scientific+name&amp;sa=X&amp;ei=cFu6UIPgI-7q0QHi54DYAQ&amp;ved=0CIEBEOgT" class=fl style=color:#000&gt;Scientific name&lt;/a&gt;: &lt;/span&gt;&lt;span class="kno-fv"&gt;&lt;span class="kno-fv-vq fl" data-vq="/search?hl=en&amp;tbo=d&amp;q=%22wine-throated+hummingbird%22+%22scientific+name%22+%22atthis+ellioti%22&amp;stick=H4sIAAAAAAAAAAEtANL_AHvTx-gAAAAQCAMiCi9tLzAydnRyNnJAAcWxzJB1fpUio0i895QopmaQvkAE23M00C0AAAA"&gt;Atthis ellioti&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="kno-f kno-fb-ctx"&gt;&lt;span class=krable data-ved="0CIQBEMsTKAE" style="margin:0 0 5px"&gt;&lt;/span&gt;
</snippet></ROW><ROW><id>13662978</id><snippet>def parse_bin(s):
    return int(s[1:], 2) / 2.**(len(s) - 1)
</snippet></ROW><ROW><id>13662978</id><snippet>def parse_bin(s):
    t = s.split('.')
    return int(t[0], 2) + int(t[1], 2) / 2.**len(t[1])
</snippet></ROW><ROW><id>13662978</id><snippet>In [56]: parse_bin('10.11')
Out[56]: 2.75
</snippet></ROW><ROW><id>13663010</id><snippet>battleinput==raw_input('Elf :: ')</snippet></ROW><ROW><id>13663010</id><snippet>battleinput=raw_input('Elf ::')</snippet></ROW><ROW><id>13663010</id><snippet>battleinput</snippet></ROW><ROW><id>13663010</id><snippet>battleinput</snippet></ROW><ROW><id>13663010</id><snippet>if battleinput.lower() == ...</snippet></ROW><ROW><id>13663010</id><snippet>raw_input()</snippet></ROW><ROW><id>13663010</id><snippet>print("asd")</snippet></ROW><ROW><id>13663010</id><snippet>print "asd"</snippet></ROW><ROW><id>13663010</id><snippet>cmd_attack = "attack"
cmd_protect = "protect"
cmd_help = "help"


def tf_elf_battle_merc():
    battleinput=input('Elf :: ') # Use raw_input() for Python 2
    # You don't need the globals here
    if battleinput.lower()==cmd_attack.lower():
        print("attack")
    elif battleinput.lower()==cmd_help.lower():
        print("help")

tf_elf_battle_merc()
</snippet></ROW><ROW><id>13663017</id><snippet>with open('1.txt') as f1, open('2.txt') as f2, open('3.txt') as f3:
    for line in zip(f1,f2,f3):
        print ' '.join(e.strip() for e in line)
</snippet></ROW><ROW><id>13663017</id><snippet>a b g j
c d h k
e f i l
</snippet></ROW><ROW><id>13663328</id><snippet>adjustable='box-forced'</snippet></ROW><ROW><id>13663328</id><snippet>adjustable='box'</snippet></ROW><ROW><id>13663328</id><snippet>subplot_kw</snippet></ROW><ROW><id>13663328</id><snippet>subplots</snippet></ROW><ROW><id>13663328</id><snippet>Figure</snippet></ROW><ROW><id>13663328</id><snippet>Axes</snippet></ROW><ROW><id>13663328</id><snippet>subplot_kw</snippet></ROW><ROW><id>13663328</id><snippet>setp</snippet></ROW><ROW><id>13663328</id><snippet>for item in sequence: item.set(**kwargs)</snippet></ROW><ROW><id>13663328</id><snippet>set</snippet></ROW><ROW><id>13663328</id><snippet>set</snippet></ROW><ROW><id>13663328</id><snippet>setp</snippet></ROW><ROW><id>13663328</id><snippet>import matplotlib.pyplot as plt

fig, axes = plt.subplots(ncols=3, sharex=True, sharey=True)
plt.setp(axes.flat, aspect=1.0, adjustable='box-forced')

axes[0].plot(range(50))

plt.show()
</snippet></ROW><ROW><id>13663335</id><snippet>scrypt(n,r,p,salt,pwd)</snippet></ROW><ROW><id>13663339</id><snippet>scratch = open("mcs_scratch.txt","wb")
scratch.write(str(y))
scratch = open("mcs_scratch.txt","r")
y = str(scratch.read())
</snippet></ROW><ROW><id>13663399</id><snippet>try:
    import Submodule.Class1 as Class1
except ImportError:
    import Class1
</snippet></ROW><ROW><id>13663637</id><snippet>import re

ss =  '''Princess Maria Amelia of Brazil (1831–1853)


was the daughter of Dom Pedro I,
founder of Brazil's independence and its first emperor,

and Amelie of Leuchtenberg.



The only child from her father's second marriage,
Maria Amelia was born in France
following Pedro I's 1831 abdication in favor of his son Dom Pedro II.

Before Maria Amelia was a month old, Pedro I left for Portugal
to restore its crown to his eldest daughter Dona Maria II.
He defeated his brother Miguel I (who had usurped Maria II's throne),
only to die a few months later of tuberculosis.


'''

def select_lines(input,regx = re.compile('((?:^.+\n)+)',re.MULTILINE)):
    return [x.splitlines() for x in regx.findall(input)]

for sl in  select_lines(ss):
    print sl
    print
</snippet></ROW><ROW><id>13663637</id><snippet>['Princess Maria Amelia of Brazil (1831\x961853)']

['was the daughter of Dom Pedro I,', "founder of Brazil's independence and its first emperor,"]

['and Amelie of Leuchtenberg.']

["The only child from her father's second marriage,", 'Maria Amelia was born in France', "following Pedro I's 1831 abdication in favor of his son Dom Pedro II."]

['Before Maria Amelia was a month old, Pedro I left for Portugal', 'to restore its crown to his eldest daughter Dona Maria II.', "He defeated his brother Miguel I (who had usurped Maria II's throne),", 'only to die a few months later of tuberculosis.']

[['2', '3'], ['5', '6', '7', '8'], ['11']]
</snippet></ROW><ROW><id>13663637</id><snippet>li = [ '', '2', '3', '', '5', '6', '7', '8', '', '', '11']

lo = ['5055','','','2','54','87','','1','2','5','8','','']

lu = ['AAAAA','BB','','HU','JU','GU']

def selines(L):
    ye = []
    for x in L:
        if x:
            ye.append(x)
        elif ye:
            yield ye ; ye = []
    if ye:
        yield ye



for lx in (li,lo,lu):
    print lx
    print list(selines(lx))
    print
</snippet></ROW><ROW><id>13663637</id><snippet>['', '2', '3', '', '5', '6', '7', '8', '', '', '11']
[['2', '3'], ['5', '6', '7', '8'], ['11']]

['5055', '', '', '2', '54', '87', '', '1', '2', '5', '8', '', '']
[['5055'], ['2', '54', '87'], ['1', '2', '5', '8']]

['AAAAA', 'BB', '', 'HU', 'JU', 'GU']
[['AAAAA', 'BB'], ['HU', 'JU', 'GU']]
</snippet></ROW><ROW><id>13663683</id><snippet>import sys, time
from subprocess import call

from django.conf import settings
from django.utils import autoreload

from django.core.management.commands.runserver import Command

def convert_less():
    status = call([settings.CONVERT_LESS, settings.LESS_DIR, settings.CSS_DIR])
    if status != 0:
        exit(1)

def reloader_thread():
    autoreload.ensure_echo_on()
    while autoreload.RUN_RELOADER:
        convert_less()
        if autoreload.code_changed():
            sys.exit(3) # force reload
        time.sleep(1)

autoreload.reloader_thread = reloader_thread
</snippet></ROW><ROW><id>13663687</id><snippet>x</snippet></ROW><ROW><id>13663687</id><snippet>dot(A, x)</snippet></ROW><ROW><id>13663687</id><snippet>x</snippet></ROW><ROW><id>13663687</id><snippet>In [7]: x = array([[1], [1]])

In [8]: x
Out[8]: 
array([[1],
       [1]])

In [9]: dot(A, x)
Out[9]: 
array([[ 2],
       [ 5],
       [-3]])
</snippet></ROW><ROW><id>13663687</id><snippet>A</snippet></ROW><ROW><id>13663687</id><snippet>numpy.matrix</snippet></ROW><ROW><id>13663687</id><snippet>In [10]: A = matrix(A)

In [11]: A * x
Out[11]: 
matrix([[ 2],
        [ 5],
        [-3]])
</snippet></ROW><ROW><id>13663832</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>13663832</id><snippet>itertools.islice</snippet></ROW><ROW><id>13663832</id><snippet>test.txt</snippet></ROW><ROW><id>13663832</id><snippet>&gt;&gt;&gt; import itertools, numpy
&gt;&gt;&gt; with open('test.txt') as t_in:
...     numpy.genfromtxt(itertools.islice(t_in, 3))
... 
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,   8.,   9.,  10.],
       [ 11.,  12.,  13.,  14.,  15.]])
</snippet></ROW><ROW><id>13663832</id><snippet>numpy</snippet></ROW><ROW><id>13663832</id><snippet>genfromtxt</snippet></ROW><ROW><id>13663832</id><snippet>skip_footer</snippet></ROW><ROW><id>13663832</id><snippet>&gt;&gt;&gt; numpy.genfromtxt('test.txt', skip_footer=2)
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,   8.,   9.,  10.],
       [ 11.,  12.,  13.,  14.,  15.]])
</snippet></ROW><ROW><id>13663832</id><snippet>islice</snippet></ROW><ROW><id>13663832</id><snippet>&gt;&gt;&gt; def get(nlines, islice=itertools.islice):
...     with open('test.txt') as t_in:
...         numpy.genfromtxt(islice(t_in, nlines))
...         
&gt;&gt;&gt; %timeit get(3)
1000 loops, best of 3: 338 us per loop
&gt;&gt;&gt; %timeit numpy.genfromtxt('test.txt', skip_footer=997)
100 loops, best of 3: 4.92 ms per loop
&gt;&gt;&gt; %timeit get(300)
100 loops, best of 3: 5.04 ms per loop
&gt;&gt;&gt; %timeit numpy.genfromtxt('test.txt', skip_footer=700)
100 loops, best of 3: 8.48 ms per loop
&gt;&gt;&gt; %timeit get(999)
100 loops, best of 3: 16.2 ms per loop
&gt;&gt;&gt; %timeit numpy.genfromtxt('test.txt', skip_footer=1)
100 loops, best of 3: 16.7 ms per loop
</snippet></ROW><ROW><id>13663947</id><snippet>RFC822</snippet></ROW><ROW><id>13663947</id><snippet>BODYSTRUCTURE</snippet></ROW><ROW><id>13663947</id><snippet>imaplib</snippet></ROW><ROW><id>13664015</id><snippet>str</snippet></ROW><ROW><id>13664015</id><snippet>unicode</snippet></ROW><ROW><id>13664015</id><snippet>unicode</snippet></ROW><ROW><id>13664015</id><snippet>str</snippet></ROW><ROW><id>13664015</id><snippet>unicode</snippet></ROW><ROW><id>13664015</id><snippet>str</snippet></ROW><ROW><id>13664015</id><snippet>str_start = html.index(u'Aproxim\xe1damente ')</snippet></ROW><ROW><id>13664015</id><snippet>html</snippet></ROW><ROW><id>13664015</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>13664015</id><snippet>str_start</snippet></ROW><ROW><id>13664015</id><snippet>u'Aproxim\xe1damente '</snippet></ROW><ROW><id>13664015</id><snippet>from urllib2 import Request, urlopen

url = 'http://guiasamarillas.com.mx/buscador/?actividad=Chedraui&amp;localidad=&amp;id_page=1'
post = None
headers = {'User-Agent':'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2)'}          
req = Request(url, post, headers)
conn = urlopen(req)

html = conn.read().decode('utf-8')

str_start = html.index(u'Aproxim\xe1damente ')
str_end = html.find(' resultados', str_start + 16)
print html[str_start+16:str_end] 
</snippet></ROW><ROW><id>13664021</id><snippet>numpy, scipy, psutil, matplotlib, etc</snippet></ROW><ROW><id>13664038</id><snippet>import re

file = open("file","r")                       

for line in file:                                 
    if re.search('-&gt;',line):
        print ' '.join(re.findall('[0-9]+',line))
</snippet></ROW><ROW><id>13664038</id><snippet>90 11 25
90 21 23
90 31 17
90 41 12
90 51 1
90 62 50
90 72 7
90 82 27
90 92 9
90 102 43
</snippet></ROW><ROW><id>13664038</id><snippet>python test.py &gt; newfile</snippet></ROW><ROW><id>13664179</id><snippet>INSERT OR IGNORE</snippet></ROW><ROW><id>13664358</id><snippet>cols = ['a', 'b', 'c']
csv.writerow([''] + cols)
for name, values in data.iteritems():
    csv.writerow([name] + [values.get(c, 0) for c in cols])
</snippet></ROW><ROW><id>13664418</id><snippet>Thread1</snippet></ROW><ROW><id>13664418</id><snippet>Thread2</snippet></ROW><ROW><id>13664418</id><snippet>for</snippet></ROW><ROW><id>13664418</id><snippet>x = 0</snippet></ROW><ROW><id>13664418</id><snippet>Thread1</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>x + 1</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>0</snippet></ROW><ROW><id>13664418</id><snippet>1</snippet></ROW><ROW><id>13664418</id><snippet>Thread1</snippet></ROW><ROW><id>13664418</id><snippet>Thread2</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>0</snippet></ROW><ROW><id>13664418</id><snippet>Thread2</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>x - 1</snippet></ROW><ROW><id>13664418</id><snippet>-1</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>0</snippet></ROW><ROW><id>13664418</id><snippet>-1</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>Thread1</snippet></ROW><ROW><id>13664418</id><snippet>x + 1</snippet></ROW><ROW><id>13664418</id><snippet>1</snippet></ROW><ROW><id>13664418</id><snippet>1</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>x</snippet></ROW><ROW><id>13664418</id><snippet>0</snippet></ROW><ROW><id>13664418</id><snippet>1</snippet></ROW><ROW><id>13664898</id><snippet>employees = []
for i in xrange(1,10):
    employees.append(employee("some name %s" % i))

employees[4].name
</snippet></ROW><ROW><id>13664917</id><snippet>Win in 5 moves    1440     0.6%
Win in 6 moves    5328     2.1%
Win in 7 moves    47952   18.8%
Win in 8 moves    72576   28.4%
Win in 9 moves    81792   32.1%
Draw              46080   18.1%    
Total             255168 100.0%
</snippet></ROW><ROW><id>13664972</id><snippet>import json
from itertools import imap
# order_key = [2,0,3,4,1] 

formatter = "prefix {} \n".format

def reorder(x):
    return (x[2],x[0],x[3],x[4],x[1])

with open('file.jsons') as f:
    f.writelines( imap(formatter,
                       imap(json.dumps,
                            (reorder[row) for row in data_in ))))
</snippet></ROW><ROW><id>13664972</id><snippet>order_key = [2,0,3,4,1]

exec('def reorder(x):\n    return (%s)'
     % ' , '.join( 'x[%d]' % i for i in (order_key)))

cn = (111,444 ,000,222,333)
cv = ['a1', 'a4', 'a0', 'a2', 'a3']
cx = ('one','four','zero','two','three')

print map(reorder,(cn,cv,cx))
</snippet></ROW><ROW><id>13664972</id><snippet>[(0, 111, 222, 333, 444), ('a0', 'a1', 'a2', 'a3', 'a4'),('zero', 'one', 'second', 'third', 'four')]
</snippet></ROW><ROW><id>13665067</id><snippet>longitude</snippet></ROW><ROW><id>13665067</id><snippet>0</snippet></ROW><ROW><id>13665067</id><snippet>360</snippet></ROW><ROW><id>13665067</id><snippet>mydata</snippet></ROW><ROW><id>13665185</id><snippet>return</snippet></ROW><ROW><id>13665185</id><snippet>import sys
from PIL import Image, ImageOps

PAT_SIZE = (8, 10)
NUMS = 3
FIRST_NUM_OFFSET = 5
NUM_OFFSET = (1, 3)


NUMBERS = []
for i in xrange(10):
    try:
        NUMBERS.append(Image.open('n%d.png' % i).load())
    except IOError:
        print "I do not know the pattern for the number %d." % i
        NUMBERS.append(None)


def magic(fname):
    captcha = ImageOps.grayscale(Image.open(fname))
    im = captcha.load()

    # Split numbers
    num = []
    for n in xrange(NUMS):
        x1, y1 = (FIRST_NUM_OFFSET + n * (NUM_OFFSET[0] + PAT_SIZE[0]),
                NUM_OFFSET[1])
        num.append(captcha.crop((x1, y1, x1 + PAT_SIZE[0], y1 + PAT_SIZE[1])))

    # If you want to save the split numbers:
    #for i, n in enumerate(num):
    #    n.save('%d.png' % i)

    def sqdiff(a, b):
        if None in (a, b): # XXX This is here just to handle missing pattern.
            return float('inf')

        d = 0
        for x in xrange(PAT_SIZE[0]):
            for y in xrange(PAT_SIZE[1]):
                d += (a[x, y] - b[x, y]) ** 2
        return d

    # Calculate a dummy sum of squared differences between the patterns
    # and each number. We assume the smallest diff is the number in the
    # "captcha".
    result = []
    for n in num:
        n_sqdiff = [(sqdiff(p, n.load()), i) for i, p in enumerate(NUMBERS)]
        result.append(min(n_sqdiff)[1])
    return result

print magic(sys.argv[1])
</snippet></ROW><ROW><id>13665189</id><snippet>" as fa   sdf sdfsdf ".replace(" ", "")</snippet></ROW><ROW><id>13665189</id><snippet>timeit</snippet></ROW><ROW><id>13665189</id><snippet>python -m timeit '"".join(" as fa   sdf sdfsdf ".split())'</snippet></ROW><ROW><id>13665189</id><snippet>1000000 loops, best of 3: 0.554 usec per loop</snippet></ROW><ROW><id>13665189</id><snippet>python -m timeit '" as fa   sdf sdfsdf ".replace(" ", "")'</snippet></ROW><ROW><id>13665189</id><snippet>1000000 loops, best of 3: 0.405 usec per loop</snippet></ROW><ROW><id>13665193</id><snippet>for i in range(len(t)):
    row = [[ e.a, e.b, e.c, ...] + [e.z[0], e.z[1], e.z[2], ...] for e in t[i]]
    t.writerow(row)
</snippet></ROW><ROW><id>13665348</id><snippet>div.comments { display: none}
.slide1 div.comments {display: block}
.slide2 div.comments {display: block}
/*etc ...*/
</snippet></ROW><ROW><id>13665498</id><snippet>re</snippet></ROW><ROW><id>13665498</id><snippet>import re

if re.match(r'^.*_v\d+\.txt$', filename):
    pass  # valid
else:
    pass  # invalid
</snippet></ROW><ROW><id>13665498</id><snippet>^</snippet></ROW><ROW><id>13665498</id><snippet>.*</snippet></ROW><ROW><id>13665498</id><snippet>_v</snippet></ROW><ROW><id>13665498</id><snippet>_v</snippet></ROW><ROW><id>13665498</id><snippet>\d+</snippet></ROW><ROW><id>13665498</id><snippet>\.txt</snippet></ROW><ROW><id>13665498</id><snippet>.txt</snippet></ROW><ROW><id>13665498</id><snippet>$</snippet></ROW><ROW><id>13665637</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>13665637</id><snippet>&lt;= 127</snippet></ROW><ROW><id>13665637</id><snippet>&gt;= 192</snippet></ROW><ROW><id>13665637</id><snippet>LENGTH_BY_PREFIX = [
  (0xC0, 2), # first byte mask, total codepoint length
  (0xE0, 3), 
  (0xF0, 4),
  (0xF8, 5),
  (0xFC, 6),
]

def codepoint_length(first_byte):
    if first_byte &lt; 128:
        return 1 # ASCII
    for mask, length in LENGTH_BY_PREFIX:
        if first_byte &amp; mask == mask:
            return length
    assert False, 'Invalid byte %r' % first_byte

def cut_to_bytes_length(unicode_text, byte_limit):
    utf8_bytes = unicode_text.encode('UTF-8')
    cut_index = 0
    while cut_index &lt; len(utf8_bytes):
        step = codepoint_length(ord(utf8_bytes[cut_index]))
        if cut_index + step &gt; byte_limit:
            # can't go a whole codepoint further, time to cut
            return utf8_bytes[:cut_index]
        else:
            cut_index += step
    # length limit is longer than our bytes strung, so no cutting
    return utf8_bytes
</snippet></ROW><ROW><id>13665637</id><snippet>.decode()</snippet></ROW><ROW><id>13665637</id><snippet>unicode_text = u"هيك بنكون" # note that the literal here is Unicode

print cut_to_bytes_length(unicode_text, 100).decode('UTF-8')
print cut_to_bytes_length(unicode_text, 10).decode('UTF-8')
print cut_to_bytes_length(unicode_text, 5).decode('UTF-8')
print cut_to_bytes_length(unicode_text, 4).decode('UTF-8')
print cut_to_bytes_length(unicode_text, 3).decode('UTF-8')
print cut_to_bytes_length(unicode_text, 2).decode('UTF-8')

# This returns empty strings, because an Arabic letter
# requires at least 2 bytes to represent in UTF-8.
print cut_to_bytes_length(unicode_text, 1).decode('UTF-8')
</snippet></ROW><ROW><id>13665764</id><snippet>easy_install paste</snippet></ROW><ROW><id>13665764</id><snippet>python setup.py develop</snippet></ROW><ROW><id>13665912</id><snippet>import re

otuid2clusteridlist = dict()
finallist = otuid2clusteridlist
clusterid2denoiseidlist = dict()
known_clusters = dict()

#first block, also = finallist we append all other blocks into.
for line in open('cluster_97.ucm', 'r'):
    lineArray = re.split('\s+',line)
    otuid = lineArray[0]
    clusterid = lineArray[3]
    if otuid in otuid2clusteridlist:
        otuid2clusteridlist[otuid].append(clusterid)
    else:
        otuid2clusteridlist[otuid] = list()
        otuid2clusteridlist[otuid].append(clusterid)

    # remeber the clusters
    known_clusters[clusterid] = otuid2clusteridlist[otuid]

#second block, higher tier needs to expand previous blocks hash
for line in open('denoise.ucm_test', 'r'):
    lineArray = re.split('\s+', line)
    clusterid = lineArray[4]
    denoiseid = lineArray[3]
    if clusterid in clusterid2denoiseidlist:
        clusterid2denoiseidlist[clusterid].append(denoiseid)
    else:
        clusterid2denoiseidlist[clusterid] = list()
        clusterid2denoiseidlist[clusterid].append(denoiseid)

    # match the cluster and update as needed
    matched_cluster = known_clusters.setdefault(clusterid, [])
    if denoiseid not in matched_cluster:
        matched_cluster.append(denoiseid)



#print/return function for testing (will convert to write out later)
for key in finallist:
    print "OTU:", key, "has", len(finallist[key]), "sequence(s) which", "=", finallist[key]
</snippet></ROW><ROW><id>13665912</id><snippet>clusterid2denoiseidlist</snippet></ROW><ROW><id>13665912</id><snippet>known_clusters</snippet></ROW><ROW><id>13665985</id><snippet>range</snippet></ROW><ROW><id>13665985</id><snippet>xrange</snippet></ROW><ROW><id>13665985</id><snippet>str</snippet></ROW><ROW><id>13665985</id><snippet>str</snippet></ROW><ROW><id>13665985</id><snippet>myset = set(["first", "second", "third", "fourth", "fifth"])
for i in myset:
    print i
</snippet></ROW><ROW><id>13665985</id><snippet>second
fifth
fourth
third
first
</snippet></ROW><ROW><id>13665985</id><snippet>str</snippet></ROW><ROW><id>13665985</id><snippet>"this is the song that never ends"[::-1]
</snippet></ROW><ROW><id>13665985</id><snippet>'sdne reven taht gnos eht si siht'
</snippet></ROW><ROW><id>13666001</id><snippet>"names":["D","T","O","H","L","C",]
</snippet></ROW><ROW><id>13666001</id><snippet>"C"</snippet></ROW><ROW><id>13666001</id><snippet>In [1]: import json as j

In [2]: data = '{"c":[{"xy":{"xstart":0,"xend":5,"ystart":1,"yend":5},"names":["D","T","O","H","L","C"],"co":["rgb(0,0,128)"]}],"Values":{"D":["11/30/2012"],"T":["09:44:00"],"O":["5848.40"],"H":["5848.40"],"L":["5847.45"],"C":["5848.40"]}}'

In [3]: json_data = j.loads(data)

In [4]: json_data['c'][0]
Out[4]:
{u'co': [u'rgb(0,0,128)'],
 u'names': [u'D', u'T', u'O', u'H', u'L', u'C'],
 u'xy': {u'xend': 5, u'xstart': 0, u'yend': 5, u'ystart': 1}}
</snippet></ROW><ROW><id>13666019</id><snippet>bool()</snippet></ROW><ROW><id>13666019</id><snippet>True</snippet></ROW><ROW><id>13666019</id><snippet>False</snippet></ROW><ROW><id>13666019</id><snippet>bool()</snippet></ROW><ROW><id>13666019</id><snippet>&gt;&gt;&gt; bool
&lt;type 'bool'&gt;
&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; bool(1) is bool('true')
True
&gt;&gt;&gt; True = False
&gt;&gt;&gt; True
False
&gt;&gt;&gt; True is False
True
&gt;&gt;&gt; False is bool()
True
&gt;&gt;&gt; True = bool(1)
&gt;&gt;&gt; True is bool(1)
True
&gt;&gt;&gt; True is False
False
&gt;&gt;&gt; True is bool()
False
&gt;&gt;&gt; bool()
False
&gt;&gt;&gt; True is bool(2)
True
&gt;&gt;&gt; True is bool('true')
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13666019</id><snippet>True = 'something'</snippet></ROW><ROW><id>13666019</id><snippet>True</snippet></ROW><ROW><id>13666019</id><snippet>__builtins__</snippet></ROW><ROW><id>13666019</id><snippet>__builtins__</snippet></ROW><ROW><id>13666019</id><snippet>&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__']
&gt;&gt;&gt; True is __builtins__.True
True
&gt;&gt;&gt; True = 'redefined'
&gt;&gt;&gt; __builtins__.True is True
False
&gt;&gt;&gt; del True
&gt;&gt;&gt; __builtins__.True is True
True
</snippet></ROW><ROW><id>13666019</id><snippet>True</snippet></ROW><ROW><id>13666019</id><snippet>False</snippet></ROW><ROW><id>13666098</id><snippet>self.response.out.write('&lt;img src="/images/image.png"&gt;')
</snippet></ROW><ROW><id>13666098</id><snippet>jinja_environment = jinja2.Environment(autoescape=True,
                    loader=jinja2.FileSystemLoader(os.path.join(os.path.dirname(__file__),'static', 'html')))
</snippet></ROW><ROW><id>13666106</id><snippet>file.read()</snippet></ROW><ROW><id>13666106</id><snippet>open()</snippet></ROW><ROW><id>13666106</id><snippet>reactor.deferToThread()</snippet></ROW><ROW><id>13666106</id><snippet>twisted.web.static.File</snippet></ROW><ROW><id>13666106</id><snippet>-itsoffset</snippet></ROW><ROW><id>13666236</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>13666236</id><snippet>STATIC_URL</snippet></ROW><ROW><id>13666236</id><snippet>python manage.py collectstatic</snippet></ROW><ROW><id>13666236</id><snippet>contrib.admin</snippet></ROW><ROW><id>13666236</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>13666272</id><snippet>return winner, [value for value in results.values()])
</snippet></ROW><ROW><id>13666272</id><snippet>return winner, list(results.values())
</snippet></ROW><ROW><id>13666377</id><snippet>argv</snippet></ROW><ROW><id>13666377</id><snippet>script = argv[0]
filename = argv[1]
</snippet></ROW><ROW><id>13666377</id><snippet>script, filename = argv
</snippet></ROW><ROW><id>13666377</id><snippet>filename</snippet></ROW><ROW><id>13666377</id><snippet>filename = argv
</snippet></ROW><ROW><id>13666377</id><snippet>filename</snippet></ROW><ROW><id>13666377</id><snippet>script, filename = argv
print("Script:", script)  # Prints script name
print("Filename:", filename)  # Prints the first argument

filename = argv
print("Filname:", filename)  # Prints something like ["my-script.py", "my-file.txt"]
</snippet></ROW><ROW><id>13666428</id><snippet>item = 'ATK1'
animal = 'Homo sapien' 
search_string = item+"[Gene] AND "+animal+"[Organism] AND mRNA[Filter] AND RefSeq[Filter]"
</snippet></ROW><ROW><id>13666428</id><snippet>handle = Entrez.esearch(db="nucleotide", term=search_string)
record = Entrez.read(handleA)
ids = record['IdList']
</snippet></ROW><ROW><id>13666428</id><snippet>seq_id = ids[0] #you must implement an if to deal with &lt;0 or &gt;1 cases
handle = Entrez.efetch(db="nucleotide", id=seq_id, rettype="fasta", retmode="text")
record = handleA.read()
</snippet></ROW><ROW><id>13666428</id><snippet>out_handle = open('myfasta.fasta', 'w')
out_handle.write(record.rstrip('\n'))
</snippet></ROW><ROW><id>13666473</id><snippet>DISK IO</snippet></ROW><ROW><id>13666473</id><snippet>wmi</snippet></ROW><ROW><id>13666473</id><snippet>pywin32</snippet></ROW><ROW><id>13666473</id><snippet>DISK QUEUE LENGTH</snippet></ROW><ROW><id>13666473</id><snippet>from win32pdh import *
import time

while True:
    path = MakeCounterPath((None,"PhysicalDisk","_Total",None,0,"Avg. Disk Queue Length"),0)
    query_handle = OpenQuery()
    counter_handle = AddCounter(query_handle, path)
    query_handle = OpenQuery()
    counter_handle = AddCounter(query_handle, path)
    CollectQueryData(query_handle)
    time.sleep(2)
    CollectQueryData(query_handle)
    (counter_type, value) = GetFormattedCounterValue(counter_handle, PDH_FMT_DOUBLE)
    print value
    CloseQuery(query_handle)
</snippet></ROW><ROW><id>13666473</id><snippet>DISK IO</snippet></ROW><ROW><id>13666473</id><snippet>iotop</snippet></ROW><ROW><id>13666473</id><snippet>/proc/diskstats</snippet></ROW><ROW><id>13666473</id><snippet>def diskstats_parse(dev=None):
    file_path = '/proc/diskstats'
    result = {}

    # ref: http://lxr.osuosl.org/source/Documentation/iostats.txt
    columns_disk = ['m', 'mm', 'dev', 'reads', 'rd_mrg', 'rd_sectors',
                    'ms_reading', 'writes', 'wr_mrg', 'wr_sectors',
                    'ms_writing', 'cur_ios', 'ms_doing_io', 'ms_weighted']

    columns_partition = ['m', 'mm', 'dev', 'reads', 'rd_sectors', 'writes', 'wr_sectors']

    lines = open(file_path, 'r').readlines()
    for line in lines:
        if line == '': continue
        split = line.split()
        if len(split) == len(columns_disk):
            columns = columns_disk
        elif len(split) == len(columns_partition):
            columns = columns_partition
        else:
            # No match
            continue

        data = dict(zip(columns_disk, split))
        if dev != None and dev != data['dev']:
            continue
        for key in data:
            if key != 'dev':
                data[key] = int(data[key])
        result[data['dev']] = data

    return result
</snippet></ROW><ROW><id>13666548</id><snippet>func_list = []

def listed_func(func):
    func_list.append(func)
    return func

@listed_func
def foo1():
   pass

@listed_func
def foo2():
   pass
</snippet></ROW><ROW><id>13666548</id><snippet>func_dict = {}

def collected_func(func):
    func_dict[func.__name__] = func
    return func
</snippet></ROW><ROW><id>13666548</id><snippet>func_dict = {}

def collected_func(func):
    key = int("".join(c for c in func.__name__ if c.isdigit()))
    func_dict[key] = func
    return func
</snippet></ROW><ROW><id>13666548</id><snippet>func_dict = {}

def collected_func(key):
    def decorator(func):
        func_dict[key] = func
        return func
    return decorator

@collected_func(12)
def foo():
    pass
</snippet></ROW><ROW><id>13666663</id><snippet>@app.route('/compute/&lt;function&gt;', methods=['GET']) 
def compute(function): 
   if function == 'average':
      return ComputeAverage(request.args.get('list_of_averages'))
</snippet></ROW><ROW><id>13666791</id><snippet>(r'object/(?P&lt;page&gt;\d+)/$','listing')
</snippet></ROW><ROW><id>13666791</id><snippet>def listing(request,page):
    contact_list = Contacts.objects.all()
    paginator = Paginator(contact_list, 25) # Show 25 contacts per page

    # page = request.GET.get('page') not needed
    try:
        contacts = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        contacts = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        contacts = paginator.page(paginator.num_pages)

    return render_to_response('list.html', {"contacts": contacts})
</snippet></ROW><ROW><id>13666928</id><snippet>n_set = [1.0,3.2,4.5,8.2,1.3,2.2,5.6,9.8,2.4,5.5,6.7]

prev = None
result = []
current = []
for x in n_set:
    if prev is not None and x &lt; prev:
        # Next element is smaller than previous element.
        # The current group is finished.
        result.append(current)

        # Start a new group.
        current = [x]
    else:
        # Add the element to the current group.
        current.append(x)

    # Remember the value of the current element.
    prev = x

# Append the last group to the result.
result.append(current)

print result 
</snippet></ROW><ROW><id>13666928</id><snippet>[[1.0, 3.2, 4.5, 8.2], [1.3, 2.2, 5.6, 9.8], [2.4, 5.5, 6.7]]
</snippet></ROW><ROW><id>13666994</id><snippet>import matplotlib.pyplot as plt
fig, ax1 = plt.subplots()
x = [50,500,1500,2500];
y = [72,414,1,13]
ax1.plot(x, y, 'bo')
plt.show()
</snippet></ROW><ROW><id>13667003</id><snippet>python</snippet></ROW><ROW><id>13667003</id><snippet>tkinter</snippet></ROW><ROW><id>13667072</id><snippet>stdin.readline()</snippet></ROW><ROW><id>13667072</id><snippet>raw_input</snippet></ROW><ROW><id>13667072</id><snippet>from sys import stdin
T = int(stdin.readline())
</snippet></ROW><ROW><id>13667072</id><snippet>data = raw_input().splitlines() 
#(or data = sys.stdin.read().splitlines() or data = list(sys.stdin.readlines()))

T = int(data[0])
S = (s.split() for s in data[1:])
</snippet></ROW><ROW><id>13667134</id><snippet>set</snippet></ROW><ROW><id>13667134</id><snippet>In [32]: str1 = 'caars'

In [33]: str2 = 'rats'

In [34]: set(str1) == set(str2)
Out[34]: False

In [35]: str3 = 'racs'

In [36]: set(str1) == set(str3)
Out[36]: True
</snippet></ROW><ROW><id>13667150</id><snippet>snippet .
       self.
</snippet></ROW><ROW><id>13667239</id><snippet>pip -r req.txt</snippet></ROW><ROW><id>13667255</id><snippet>td/strong/text()</snippet></ROW><ROW><id>13667255</id><snippet>]</snippet></ROW><ROW><id>13667255</id><snippet>xpath('//td[strong[text()="Total Assets"]]/following-sibling::td/strong/text()')
</snippet></ROW><ROW><id>13667255</id><snippet>&gt;&gt;&gt; tree.xpath('//td[strong[text()="Total Assets"]]/following-sibling::td/strong/text()')
[u'1,684,948\xa0\xa0', u'1,468,283\xa0\xa0', u'1,327,358\xa0\xa0']
</snippet></ROW><ROW><id>13667255</id><snippet>&lt;strong&gt;</snippet></ROW><ROW><id>13667255</id><snippet>normalize-space</snippet></ROW><ROW><id>13667255</id><snippet>text()</snippet></ROW><ROW><id>13667255</id><snippet>xpath('//td[strong[normalize-space(text())="Total Assets"]]/following-sibling::td/strong/text()')
</snippet></ROW><ROW><id>13667294</id><snippet>map(''.join, lists_of_letters)</snippet></ROW><ROW><id>13667294</id><snippet>In [1]: lists_of_letters = [["m", "y"], ["d", "o", "g"], ["s", "k", "i", "p"]]
In [2]: map(''.join, lists_of_letters)
Out[2]: ['my', 'dog', 'skip']
</snippet></ROW><ROW><id>13667294</id><snippet>''.join</snippet></ROW><ROW><id>13667294</id><snippet>In [3]: ''.join
Out[3]: &lt;built-in method join of str object at 0x100258620&gt;
</snippet></ROW><ROW><id>13667330</id><snippet>class ConversationManager(models.Manager):
    def has_all(self, participants):
        # Start with all conversations
        reducedQs = self.get_query_set()
        for p in participants:
            # Reduce to conversations that have a participant "p" 
            reducedQs = reducedQs.filter(participants__id=p.id)
        return reducedQs
</snippet></ROW><ROW><id>13667366</id><snippet>f.subs(x, 0)</snippet></ROW><ROW><id>13667577</id><snippet>import re
header = re.sub("(?&lt;==)[^;]* [^;]*", r'"\g&lt;0&gt;"', header)
</snippet></ROW><ROW><id>13667577</id><snippet>=</snippet></ROW><ROW><id>13667577</id><snippet>;</snippet></ROW><ROW><id>13667577</id><snippet>&gt;&gt;&gt; header = 'test=a b c; Path=/; Expires=a b c; HttpOnly'
&gt;&gt;&gt; re.sub("(?&lt;==)[^;]* [^;]*", r'"\g&lt;0&gt;"', header)
'test="a b c"; Path=/; Expires="a b c"; HttpOnly'
&gt;&gt;&gt; header = "workgroup_session_id=ilDJtR0rE1AG28C9ZxKLHj8TBtcT89sw; Path=/; Expires=Sun, 02-Dec-2012 5:57:25 GMT; HttpOnly"
&gt;&gt;&gt; re.sub("(?&lt;==)[^;]* [^;]*", r'"\g&lt;0&gt;"', header)
'workgroup_session_id=ilDJtR0rE1AG28C9ZxKLHj8TBtcT89sw; Path=/; Expires="Sun, 02-Dec-2012 5:57:25 GMT"; HttpOnly'
</snippet></ROW><ROW><id>13667646</id><snippet>prices</snippet></ROW><ROW><id>13667646</id><snippet>for k in prices[:]:
    if k == '':
        prices.remove(k)
    elif int(k) &lt;= 50:
        prices.remove(k)
</snippet></ROW><ROW><id>13667646</id><snippet>prices[:] = [p for p in prices if p and int(p) &gt; 50]
</snippet></ROW><ROW><id>13667862</id><snippet>mode=</snippet></ROW><ROW><id>13667862</id><snippet>more=</snippet></ROW><ROW><id>13667862</id><snippet>tar = tarfile.open(fileobj=p.stdout, mode='r|')
</snippet></ROW><ROW><id>13667862</id><snippet>.tell()</snippet></ROW><ROW><id>13667862</id><snippet>for entry in tar:
    # test if this is a file you want.
    if entry.name in files:
        f = tar.extractfile(entry) 
</snippet></ROW><ROW><id>13667862</id><snippet>.getnames()</snippet></ROW><ROW><id>13667862</id><snippet>.getmember()</snippet></ROW><ROW><id>13667862</id><snippet>.getmembers()</snippet></ROW><ROW><id>13668045</id><snippet>ElementTree</snippet></ROW><ROW><id>13668045</id><snippet>.findall()</snippet></ROW><ROW><id>13668045</id><snippet>def final_xml(self,username):
    users = self.root.findall("user")
    for user in users:
        if user.attrib.get('username') == 'user1':
            break
    else:
        raise ValueError('No such user')

    # `user` is now set to the correct element
    self.root.remove(user)
    print user
    tree = ET.ElementTree(self.root)
    tree.write("msl.xml") 
</snippet></ROW><ROW><id>13668090</id><snippet>  {% range number from 3 to 6 %}
      {{ number }}
      (...)
  {% endrange %}
</snippet></ROW><ROW><id>13668190</id><snippet>intprices.sort()</snippet></ROW><ROW><id>13668190</id><snippet>None</snippet></ROW><ROW><id>13668190</id><snippet>sorted( intprices )</snippet></ROW><ROW><id>13668190</id><snippet>intprices</snippet></ROW><ROW><id>13668190</id><snippet>intprices.sort()</snippet></ROW><ROW><id>13668337</id><snippet>\r\n</snippet></ROW><ROW><id>13668337</id><snippet>\n\n</snippet></ROW><ROW><id>13668337</id><snippet>\r\n</snippet></ROW><ROW><id>13668337</id><snippet>sys.stdout.write(...)</snippet></ROW><ROW><id>13668337</id><snippet>print "Header: Value\r\n",</snippet></ROW><ROW><id>13668372</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; [[k,c[k]] for k in Counter([i[0] for i in dates])]
[['2012-12-01', 1], ['2012-12-02', 14], ['2012-12-03', 2], ['2012-12-05', 1], ['
2012-12-06', 1], ['2012-12-07', 1], ['2012-12-08', 1], ['2012-12-09', 1], ['2012
-12-11', 1]]
</snippet></ROW><ROW><id>13668372</id><snippet>defaultdict</snippet></ROW><ROW><id>13668372</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for i in dates:
...    d[i[0]] += 1
...
&gt;&gt;&gt; [[k,d[k]] for k in d]
[['2012-12-01', 1], ['2012-12-02', 14], ['2012-12-03', 2], ['2012-12-05', 1], ['
2012-12-06', 1], ['2012-12-07', 1], ['2012-12-08', 1], ['2012-12-09', 1], ['2012
-12-11', 1]]
</snippet></ROW><ROW><id>13668755</id><snippet># This Python file uses the following encoding: utf-8
s = 'ExÃ©cutive'
print s.decode('utf-8')
</snippet></ROW><ROW><id>13668774</id><snippet>raw</snippet></ROW><ROW><id>13669030</id><snippet>while gtk.events_pending():
        gtk.main_iteration()
</snippet></ROW><ROW><id>13669051</id><snippet>.communicate()</snippet></ROW><ROW><id>13669051</id><snippet>Popen</snippet></ROW><ROW><id>13669051</id><snippet>stdout</snippet></ROW><ROW><id>13669051</id><snippet>.communicate()</snippet></ROW><ROW><id>13669051</id><snippet>.close()</snippet></ROW><ROW><id>13669051</id><snippet>stdout</snippet></ROW><ROW><id>13669051</id><snippet>.communicate()</snippet></ROW><ROW><id>13669051</id><snippet>.wait()</snippet></ROW><ROW><id>13669051</id><snippet>tar.close()
p.stdout.close()
p.wait()
</snippet></ROW><ROW><id>13669051</id><snippet>tar.close()</snippet></ROW><ROW><id>13669051</id><snippet>p.stdout</snippet></ROW><ROW><id>13669051</id><snippet>.close()</snippet></ROW><ROW><id>13669205</id><snippet>#!/usr/bin/python

print("Blah!")
</snippet></ROW><ROW><id>13669205</id><snippet>$ ./test.py 
bash: ./test.py: /usr/bin/python^M: bad interpreter: No such file or directory
</snippet></ROW><ROW><id>13669205</id><snippet>$ ./test.py 
</snippet></ROW><ROW><id>13669225</id><snippet>beautifulsoup4</snippet></ROW><ROW><id>13669225</id><snippet>.tar.gz</snippet></ROW><ROW><id>13669225</id><snippet>bs4</snippet></ROW><ROW><id>13669265</id><snippet>lambda</snippet></ROW><ROW><id>13669265</id><snippet>&gt;&gt;&gt; f = lambda: 'foo'
&gt;&gt;&gt; print f()
foo
</snippet></ROW><ROW><id>13669265</id><snippet>sorted()</snippet></ROW><ROW><id>13669265</id><snippet>key</snippet></ROW><ROW><id>13669265</id><snippet>lambda</snippet></ROW><ROW><id>13669265</id><snippet>sorted()</snippet></ROW><ROW><id>13669265</id><snippet>&gt;&gt;&gt; sorted(['Some', 'words', 'sort', 'differently'])
['Some', 'differently', 'sort', 'words']
</snippet></ROW><ROW><id>13669265</id><snippet>key</snippet></ROW><ROW><id>13669265</id><snippet>&gt;&gt;&gt; def lowercased(word): return word.lower()
...
&gt;&gt;&gt; lowercased('Some')
'some'
&gt;&gt;&gt; sorted(['Some', 'words', 'sort', 'differently'], key=lowercased)
['differently', 'Some', 'sort', 'words']
</snippet></ROW><ROW><id>13669265</id><snippet>def lowercased()</snippet></ROW><ROW><id>13669265</id><snippet>sorted()</snippet></ROW><ROW><id>13669265</id><snippet>&gt;&gt;&gt; sorted(['Some', 'words', 'sort', 'differently'], key=def lowercased(word): return word.lower())
  File "&lt;stdin&gt;", line 1
    sorted(['Some', 'words', 'sort', 'differently'], key=def lowercased(word): return word.lower())
                                                           ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>13669265</id><snippet>lambda</snippet></ROW><ROW><id>13669265</id><snippet>sorted()</snippet></ROW><ROW><id>13669265</id><snippet> &gt;&gt;&gt; sorted(['Some', 'words', 'sort', 'differently'], key=lambda word: word.lower())
['differently', 'Some', 'sort', 'words']
</snippet></ROW><ROW><id>13669394</id><snippet>os.isatty()</snippet></ROW><ROW><id>13669394</id><snippet>stdout</snippet></ROW><ROW><id>13669394</id><snippet>&gt;&gt;&gt; import sys, os
&gt;&gt;&gt; os.isatty(sys.stdout.fileno())
True
</snippet></ROW><ROW><id>13669394</id><snippet>sys.stdout</snippet></ROW><ROW><id>13669394</id><snippet>.fileno()</snippet></ROW><ROW><id>13669551</id><snippet>key=</snippet></ROW><ROW><id>13669551</id><snippet>max()</snippet></ROW><ROW><id>13669551</id><snippet>max(d, key=lambda k: d[k])
</snippet></ROW><ROW><id>13669551</id><snippet>operators.itemgetter</snippet></ROW><ROW><id>13669551</id><snippet>import operators
max(d, key=operators.itemgetter(d))
</snippet></ROW><ROW><id>13669551</id><snippet>d.get</snippet></ROW><ROW><id>13669551</id><snippet>max(d, key=d.get)
</snippet></ROW><ROW><id>13669646</id><snippet>top</snippet></ROW><ROW><id>13669646</id><snippet>self.top</snippet></ROW><ROW><id>13669646</id><snippet>self.top = Toplevel()
...
self.top.withdraw()
</snippet></ROW><ROW><id>13669702</id><snippet>shell</snippet></ROW><ROW><id>13669702</id><snippet>CreateProcess</snippet></ROW><ROW><id>13669715</id><snippet>self.my_color = "red"
...
self.canvas.create_rectangle(..., fill=my_color)
</snippet></ROW><ROW><id>13669715</id><snippet>self.my_color = "green"
self.canvas.itemconfigure("all", fill=self.my_color)
</snippet></ROW><ROW><id>13669799</id><snippet>r''</snippet></ROW><ROW><id>13669799</id><snippet>repr()</snippet></ROW><ROW><id>13669799</id><snippet>r''</snippet></ROW><ROW><id>13669799</id><snippet>r''</snippet></ROW><ROW><id>13669799</id><snippet>&gt;&gt;&gt; r'String with \n escape ignored'
'String with \\n escape ignored'
&gt;&gt;&gt; 'String with \\n escape ignored'
'String with \\n escape ignored'
</snippet></ROW><ROW><id>13669799</id><snippet>r''</snippet></ROW><ROW><id>13669799</id><snippet>r''</snippet></ROW><ROW><id>13669799</id><snippet>\n</snippet></ROW><ROW><id>13669799</id><snippet>&gt;&gt;&gt; r'String with \n escape ignored' == 'String with \\n escape ignored'
True
</snippet></ROW><ROW><id>13669799</id><snippet>repr()</snippet></ROW><ROW><id>13669799</id><snippet>&gt;&gt;&gt; print 'String'
String
&gt;&gt;&gt; print repr('String')
'String'
&gt;&gt;&gt; 'String'
'String'
&gt;&gt;&gt; repr('String')
"'String'"
</snippet></ROW><ROW><id>13669799</id><snippet>repr()</snippet></ROW><ROW><id>13669799</id><snippet>repr()</snippet></ROW><ROW><id>13669799</id><snippet>"</snippet></ROW><ROW><id>13669799</id><snippet>repr()</snippet></ROW><ROW><id>13669799</id><snippet>String</snippet></ROW><ROW><id>13669799</id><snippet>r''</snippet></ROW><ROW><id>13669799</id><snippet>repr()</snippet></ROW><ROW><id>13669799</id><snippet>repr()</snippet></ROW><ROW><id>13669799</id><snippet>&gt;&gt;&gt; print repr(1)
1
&gt;&gt;&gt; repr(1)
'1'
</snippet></ROW><ROW><id>13669799</id><snippet>1</snippet></ROW><ROW><id>13669799</id><snippet>'1'</snippet></ROW><ROW><id>13669799</id><snippet>1</snippet></ROW><ROW><id>13669898</id><snippet> elif arr[mid]&gt;x and arr[mid-1]&gt;x:
    modBinarySearch(arr[0:mid],x)
else: 
    modBinarySearch(arr[mid:1],x)
</snippet></ROW><ROW><id>13670154</id><snippet>JSON.stringify</snippet></ROW><ROW><id>13670154</id><snippet>    $.post(
            "/projects/vote/", 
            {msg: JSON.stringify(obj)},
            function(data) {
                //alert("Data Loaded: " + data);
                alert(data);
    });
</snippet></ROW><ROW><id>13670154</id><snippet>'msg'</snippet></ROW><ROW><id>13670154</id><snippet>request.POST</snippet></ROW><ROW><id>13670154</id><snippet>    def view(request):
          return HttpResponse(request.POST['msg'], mimetype="application/json")
</snippet></ROW><ROW><id>13670154</id><snippet>JSON.stringify</snippet></ROW><ROW><id>13670414</id><snippet>import scipy.optimize as optimize

def f(c):
    return sqrt(c[0]**2 + c[1]**2 + c[2]**2)

result = optimize.minimize(f, [1,1,1])
print(result)
</snippet></ROW><ROW><id>13670855</id><snippet>member = session.query(Member).filter(Member.name == membername).one()
session.delete(member)
</snippet></ROW><ROW><id>13670855</id><snippet>passive_deletes=True
</snippet></ROW><ROW><id>13670855</id><snippet>ondelete='CASCADE'
</snippet></ROW><ROW><id>13670855</id><snippet>def page_query(q):
    while True:
        r = False
        for elem in q.limit(1000):
            r = True
            yield elem
        if not r:
            break

for chunk in page_query(query):
    # Do something with the chunk if needed
    session.delete(chunk)
session.commit()
</snippet></ROW><ROW><id>13671428</id><snippet>registered_info_elements = {}
@classmethod
def register_variant(cls):
    cls.registered_info_elements[cls.type.default] = cls
@classmethod
def dispatch_hook(cls, pkt=None, *args, **kargs):
    if pkt:
        t = ord(pkt[0])
        return cls.registered_info_elements.get(t, cls)
    return cls
</snippet></ROW><ROW><id>13671428</id><snippet>&gt;&gt;&gt; pkt.show2()
###[ IP ]###
  version= 4L
  ihl= 5L
  tos= 0x0
  len= 46
  id= 1
  flags= 
  frag= 0L
  ttl= 64
  proto= udp
  chksum= 0x7607
  src= 1.1.1.90
  dst= 1.1.1.92
  \options\
###[ UDP ]###
     sport= 2123
     dport= 2123
     len= 26
     chksum= 0x52da
###[ GTPv2 ]###
        version= 2L
        flags= 
        type= echo_request
        length= 14
        sequence= 0x8ce2a1
        spare2= 0
        \info_elements\
         |###[ GTPv2 Recovery IE ]###
         |  type= recovery
         |  length= 1
         |  spare= 0L
         |  instance= 0L
         |  recovery= 37
         |###[ GTPv2 Sending Node Features IE ]###
         |  type= node_features
         |  length= 1
         |  spare= 0L
         |  instance= 0L
         |  node_features= PRN+MABR+NTSR
</snippet></ROW><ROW><id>13671453</id><snippet>local</snippet></ROW><ROW><id>13671453</id><snippet>global</snippet></ROW><ROW><id>13671453</id><snippet>global knife_taken
knife_taken = True
</snippet></ROW><ROW><id>13671453</id><snippet>return knife_taken

# later on
kitchen(knife_taken)
</snippet></ROW><ROW><id>13671453</id><snippet>game_state = {}

game_state['knife_taken'] = False

def kitchen():
    if not game_state['knife_taken']:
        print "Take the knife!"
        game_state['knife_taken'] = True
    else:
        print "Nothing to see here."

kitchen()
kitchen()
</snippet></ROW><ROW><id>13671567</id><snippet>while swag:</snippet></ROW><ROW><id>13671567</id><snippet>swag</snippet></ROW><ROW><id>13671567</id><snippet>swag</snippet></ROW><ROW><id>13671567</id><snippet>True</snippet></ROW><ROW><id>13671567</id><snippet>swag</snippet></ROW><ROW><id>13671567</id><snippet>False</snippet></ROW><ROW><id>13671579</id><snippet>def find_use(**kwargs):
   query = selector(**kwargs) 
   ...do something to query...
</snippet></ROW><ROW><id>13671579</id><snippet>find_use</snippet></ROW><ROW><id>13671579</id><snippet>kwargs</snippet></ROW><ROW><id>13671579</id><snippet>def foo(**kwargs):
    print(kwargs)    
foo(a = 'happy', g = 'birthday')
</snippet></ROW><ROW><id>13671579</id><snippet>{'a': 'happy', 'g': 'birthday'}
</snippet></ROW><ROW><id>13671579</id><snippet>def bar(a, g):
    print(a)
    print(g)
</snippet></ROW><ROW><id>13671579</id><snippet>bar(**{'a': 'happy', 'g': 'birthday'})  # like selector(**kwargs)
</snippet></ROW><ROW><id>13671579</id><snippet>happy
birthday
</snippet></ROW><ROW><id>13671693</id><snippet>find</snippet></ROW><ROW><id>13671693</id><snippet>-exec</snippet></ROW><ROW><id>13671693</id><snippet>find /path/to/Main -type f -name "*.txt" -exec python2.7 ../getDOC.py {} \; -exec sleep 10 \;
</snippet></ROW><ROW><id>13671693</id><snippet>find</snippet></ROW><ROW><id>13671693</id><snippet>find</snippet></ROW><ROW><id>13671693</id><snippet>/path/to/Main</snippet></ROW><ROW><id>13671693</id><snippet>find</snippet></ROW><ROW><id>13671693</id><snippet>-type f</snippet></ROW><ROW><id>13671693</id><snippet>-name "*.txt"</snippet></ROW><ROW><id>13671693</id><snippet>.txt</snippet></ROW><ROW><id>13671693</id><snippet>*</snippet></ROW><ROW><id>13671693</id><snippet>-exec ... \;</snippet></ROW><ROW><id>13671693</id><snippet>python2.7 ../getDOC.py {};</snippet></ROW><ROW><id>13671693</id><snippet>{}</snippet></ROW><ROW><id>13671693</id><snippet>find</snippet></ROW><ROW><id>13671693</id><snippet>sleep 10</snippet></ROW><ROW><id>13671720</id><snippet>from Repository import Repository

__all__ = ['Repository']

def main(path):
    import sys
    _module_ = sys.modules[__name__]
    if hasattr(_module_, 'WORKING_PATH'):
        for m in __all__:
            if __name__ + "." + m in sys.modules:
                m = sys.modules[__name__ + "." + m]
                reload(m)
    else:
        _module_.WORKING_PATH = path

if __name__ == 'yap':
    print "yap loaded"
</snippet></ROW><ROW><id>13671869</id><snippet> System.Diagnostics.Process proc = new System.Diagnostics.Process();
        proc.StartInfo.FileName = "ping.exe";
        proc.StartInfo.Arguments = "8.8.8.8";


        proc.StartInfo.RedirectStandardOutput = true;
        proc.StartInfo.UseShellExecute = false;
        proc.StartInfo.CreateNoWindow = true;
        proc.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;

        proc.Start();
       StreamReader q = proc.StandardOutput;
       while (!proc.HasExited)
         Console.WriteLine(q.ReadLine());

        Console.ReadKey();
</snippet></ROW><ROW><id>13671995</id><snippet>clock = pygame.time.Clock()

direction = (0,0)

while True:    # main loop

   for event in pygame.event.get():

        if event.type == KEYDOWN:
            if event.key == K_RIGHT:
                direction = (3, 0)
            elif event.key == K_LEFT:
                direction = (-3, 0)
            elif event.key == K_UP:
                direction = (0, 3)
            elif event.key == K_DOWN:
                direction = (0, -3)
            else:
                print "Unrecognized key"

        if event.type == KEYUP:
            direction = (0, 0)

    screen.fill((255,255,255))

    for sprite in sprites:
        rimage = sprite[1].getimage()

        if sprite[2] is None:

            # Check if new position is inside the screen
            new_pos = x + direction[0], y + direction[1]
            if new_pos[0] + rimage.get_width() &lt; screen_width:
                x = new_pos[0]
            if new_pos[1] + rimage.get_height() &lt; screen_height:
                y = new_pos[1]

            # Draw the sprite
            sprite[1].update(time)
            screen.blit(rimage, (x,y))
            if sprite[1].isfinished() == True:
                sprite[1].reset()
                last_dir = direction

    #update player sprite movement
    #update player sprite animation
    #update rest of game map

    time = pygame.time.get_ticks()

    pygame.display.update()

    clock.tick(40)  # Keep game running at 40 fps
</snippet></ROW><ROW><id>13672033</id><snippet>&gt;&gt;&gt; a = ['NO YES NO NO', 'YES YES NO YES', 'NO NO YES NO', ]
&gt;&gt;&gt; [s.split() for s in a]
[['NO', 'YES', 'NO', 'NO'], ['YES', 'YES', 'NO', 'YES'], ['NO', 'NO', 'YES', 'NO']]
</snippet></ROW><ROW><id>13672111</id><snippet>class Person:
    ID = itertools.count()
    def __init__(self, name, parent=None, level=0):
        self.id = self.__class__.ID.next() # next(self.__class__.ID) in python 2.6+
        self.parent = parent
        self.name = name
        self.level = level
        self.children = []

def createTree(d, parent=None, level=0):
    if d:
        member = Person(d['parent'], parent, level)
        level = level + 1
        member.children = [createTree(child, member, level) for child in d['children']]
        return member

t = createTree(my_tree)          # my_tree is the name of your dictionary
def printout(parent, indent=0):
    print '\t'*indent, parent.name
    for child in parent.children:
        printout(child, indent+1)        
printout(t)
</snippet></ROW><ROW><id>13672111</id><snippet>import itertools</snippet></ROW><ROW><id>13672111</id><snippet>def flatten(parent):
    L = [parent]
    for child in parent.children:
        L += flatten(child)
    return L
flattened_tree = flatten(t)
print "All members: ", [person.name for person in flattened_tree]
print "Number of members:", len(flattened_tree)
print "Number of levels:", max([person.level for person in flattened_tree]) + 1
cooper = flattened_tree[6]
cooper_fl = flatten(cooper)
print "Members below Cooper: ", [person.name for person in cooper_fl]
print "Number:", len(cooper_fl)
levels = [person.level for person in cooper_fl]
print "Number of levels:", max(levels) - min(levels) + 1
</snippet></ROW><ROW><id>13672230</id><snippet>s = simulation
s.addGroup("teapotarmy")
...
</snippet></ROW><ROW><id>13672230</id><snippet>from contextlib import contextmanager
import inspect

class some_class:
    def test(self):
        print("test!")

@contextmanager
def map_to_local(inst, locals):
    methods = inspect.getmembers(inst, inspect.ismethod)
    for name, method in methods:
        locals[name] = method
    yield
    for name, method in methods:
        del locals[name]

inst = some_class()
with map_to_local(inst, locals()):
    test()
</snippet></ROW><ROW><id>13672419</id><snippet>gobject.idle_add</snippet></ROW><ROW><id>13672419</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>13672419</id><snippet>while gtk.events_pending (): gtk.main_iteration (False)</snippet></ROW><ROW><id>13672516</id><snippet>(\Noselect \HasChildren) "/" "[Gmail]"
(\HasChildren \HasNoChildren \Trash) "/" "[Gmail]/Caixote do Lixo"
(\HasNoChildren \Flagged) "/" "[Gmail]/Com estrela"
(\HasChildren \HasNoChildren \Sent) "/" "[Gmail]/Correio enviado"
(\HasChildren \HasNoChildren \Important) "/" "[Gmail]/Importante"
(\HasChildren \HasNoChildren \Drafts) "/" "[Gmail]/Rascunhos"
(\HasNoChildren \Junk) "/" "[Gmail]/Spam"
(\HasChildren \HasNoChildren \All) "/" "[Gmail]/Todo o correio"
</snippet></ROW><ROW><id>13672546</id><snippet>set</snippet></ROW><ROW><id>13672546</id><snippet>&gt;&gt;&gt; x = range(20)
&gt;&gt;&gt; k = 5
&gt;&gt;&gt; list(set(x) - set(x[::k]))
[1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19]
</snippet></ROW><ROW><id>13672616</id><snippet>res = list(set(a)^set(b))
</snippet></ROW><ROW><id>13672926</id><snippet>a = [['1','2','3','4'],['1','2','3','4'],['1','2','3','4']]
b = [ [int(j) for j in i] for i in a]
</snippet></ROW><ROW><id>13673061</id><snippet>from multiprocessing import Pool

def f(x):
    return x*x

pool = Pool(processes=4)
print pool.map(f, range(10))
</snippet></ROW><ROW><id>13673061</id><snippet>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>13673061</id><snippet>from multiprocessing import Pool
import time, pprint

def fun(av, bv):
    time.sleep(0.1)
    return (av, bv)

def data_stream(a, b):
    for i, av in enumerate(a):
        for j, bv in enumerate(b):
            yield (i, j), (av, bv)

def proxy(args):
    return args[0], fun(*args[1])

a = range(100, 400, 100)
b = range(100, 400, 100)
Y = {}

pool = Pool(processes=4)
results = pool.map(proxy, data_stream(a, b))
for k,v in results:
    Y[k] = v

pprint.pprint(Y)
</snippet></ROW><ROW><id>13673061</id><snippet>{(0, 0): (100, 100),
 (0, 1): (100, 200),
 (0, 2): (100, 300),
 (1, 0): (200, 100),
 (1, 1): (200, 200),
 (1, 2): (200, 300),
 (2, 0): (300, 100),
 (2, 1): (300, 200),
 (2, 2): (300, 300)}
</snippet></ROW><ROW><id>13673061</id><snippet>processes=1</snippet></ROW><ROW><id>13673061</id><snippet>processes=4</snippet></ROW><ROW><id>13673133</id><snippet>&gt;&gt;&gt; x = "qwertyui"
&gt;&gt;&gt; chunks, chunk_size = len(x), len(x)/4
&gt;&gt;&gt; [ x[i:i+chunk_size] for i in range(0, chunks, chunk_size) ]
['qw', 'er', 'ty', 'ui']
</snippet></ROW><ROW><id>13673211</id><snippet>Comment.objects.filter(user__in=self.get_following())
</snippet></ROW><ROW><id>13673381</id><snippet>class ParseFailureError(Exception):
    def __init__(self, line):
        self.line = line.rstrip()

    def __str__(self):
        return "line \"{0}\"  might have failed to parse".format(self.line)
</snippet></ROW><ROW><id>13673381</id><snippet>try:
    ...
except SomeException as exception:
    raise ParseFailureError(line) from exception
</snippet></ROW><ROW><id>13673381</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
NameError: name 'x' is not defined

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 4, in &lt;module&gt;
__main__.ParseFailureException: line "blah" might have failed to parse
</snippet></ROW><ROW><id>13673381</id><snippet>NameError</snippet></ROW><ROW><id>13673381</id><snippet>SomeError</snippet></ROW><ROW><id>13673381</id><snippet>except</snippet></ROW><ROW><id>13673381</id><snippet>from</snippet></ROW><ROW><id>13673381</id><snippet>traceback.format_exc()</snippet></ROW><ROW><id>13673478</id><snippet># default delimiter is , and default quotechar is "
&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('eggs.csv', newline='') as csvfile:
...     spamreader = csv.reader(csvfile)
...     for row in spamreader:
...         print(', '.join(row))
Spam, Spam, Spam, Spam, Spam, Baked Beans
Spam, Lovely Spam, Wonderful Spam
</snippet></ROW><ROW><id>13673601</id><snippet>[el if sum(x, el) &lt; 5 else el + 1 for el in elements]
</snippet></ROW><ROW><id>13673601</id><snippet>cities = {"London": (10, 15), "New York": (20, 50)}
def find_closest_city(location):
    ...

city_count = collections.Counter([find_closest_city(el) for el in elements])
</snippet></ROW><ROW><id>13673693</id><snippet>Errno 48</snippet></ROW><ROW><id>13673693</id><snippet>5000</snippet></ROW><ROW><id>13673693</id><snippet>404</snippet></ROW><ROW><id>13673693</id><snippet>app</snippet></ROW><ROW><id>13673693</id><snippet>views</snippet></ROW><ROW><id>13673693</id><snippet>__init__.py</snippet></ROW><ROW><id>13673693</id><snippet>from flask import Flask
app = Flask(__name__)

import yourapplication.views
</snippet></ROW><ROW><id>13673693</id><snippet>from yourapplication import app

@app.route('/')
def index():
    return 'Hello World!'
</snippet></ROW><ROW><id>13673693</id><snippet>__init__.py</snippet></ROW><ROW><id>13673827</id><snippet>itertools.takewhile()</snippet></ROW><ROW><id>13673827</id><snippet>&gt;&gt;&gt; int("".join(itertools.takewhile(str.isdigit, "10pizzas")))
10
</snippet></ROW><ROW><id>13673827</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>13673827</id><snippet>&gt;&gt;&gt; ["".join(x) for _, x in itertools.groupby("dfsd98sd8f68as7df56", key=str.isdigit)]
['dfsd', '98', 'sd', '8', 'f', '68', 'as', '7', 'df', '56']
</snippet></ROW><ROW><id>13673827</id><snippet>&gt;&gt;&gt; int("".join("".join(x) for is_number, x in itertools.groupby("dfsd98sd8f68as7df56", key=str.isdigit) if is_number is True))
98868756
</snippet></ROW><ROW><id>13673937</id><snippet>s = ["element1", (3, "element2"), (2, "element3")]
result = sum(([x] if type(x) != tuple else x[0]*[x[1]] for x in s), [])
</snippet></ROW><ROW><id>13673937</id><snippet>def bb(x):
    for n in x:
        if isinstance(n, str):
            print(n)
        elif isinstance(n, tuple):
            count, value = n
            for i in range(count):
                print(value)
</snippet></ROW><ROW><id>13673937</id><snippet>def bb_gen(x):
    for n in x:
        if isinstance(n, str):
            yield n
        elif isinstance(n, tuple):
            count, value = n
            for i in range(count):
                yield value

for value in bb_gen(s):
    print value
</snippet></ROW><ROW><id>13673946</id><snippet>select()</snippet></ROW><ROW><id>13673946</id><snippet>sqlalchemy.sql.select()</snippet></ROW><ROW><id>13673946</id><snippet>select()</snippet></ROW><ROW><id>13673946</id><snippet>Select</snippet></ROW><ROW><id>13673946</id><snippet>.select()</snippet></ROW><ROW><id>13673946</id><snippet>whereclause</snippet></ROW><ROW><id>13673946</id><snippet>WHERE</snippet></ROW><ROW><id>13673946</id><snippet>WHERE [columnname]</snippet></ROW><ROW><id>13673946</id><snippet>table.select()</snippet></ROW><ROW><id>13673946</id><snippet>table.select(table.c.name != None)
</snippet></ROW><ROW><id>13673946</id><snippet>SELECT * FROM tablename WHERE tablename.name IS NOT NULL;
</snippet></ROW><ROW><id>13673946</id><snippet>*</snippet></ROW><ROW><id>13673946</id><snippet>table</snippet></ROW><ROW><id>13673946</id><snippet>select()</snippet></ROW><ROW><id>13674047</id><snippet>isinstance()</snippet></ROW><ROW><id>13674047</id><snippet>.splitlines()</snippet></ROW><ROW><id>13674047</id><snippet>if hasattr(arg1, 'splitlines'):
    arg1 = arg1.splitlines()
if hasattr(arg2, 'splitlines'):
    arg2 = arg2.splitlines()
# now arg1 and arg2 are presumed to be lists.
</snippet></ROW><ROW><id>13674191</id><snippet>self.data = np.split(self.merge(data, new_data), 2)
</snippet></ROW><ROW><id>13674494</id><snippet>In [89]: import pandas as pd

In [90]: df = pd.DataFrame(data).T

In [91]: df.columns = [c[0] for c in characteristics]

In [92]: df
Out[92]: 
        commits  intended h  actual h
User 1        1           2         3
User 2        5           8        10
User 3       80          75       100
User 4       65          80        45

In [93]: colors = [c[1] for c in characteristics]

In [94]: df.sort_index(ascending=False).plot(kind='barh', color=colors)
</snippet></ROW><ROW><id>13674562</id><snippet>CombinedDict.items()</snippet></ROW><ROW><id>13674562</id><snippet>CombinedDict.iteritems()</snippet></ROW><ROW><id>13674562</id><snippet>key, values</snippet></ROW><ROW><id>13674809</id><snippet>&gt;&gt;&gt; x = "\xc3\xb4".decode('utf-8')
&gt;&gt;&gt; x
u'\xf4'
&gt;&gt;&gt; x + 'a'
u'\xf4a'
&gt;&gt;&gt; 'a' + x
u'a\xf4'
&gt;&gt;&gt; 'a %s' % x
u'a \xf4'
&gt;&gt;&gt; 'a {}'.format(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt; UnicodeEncodeError: 'ascii' codec 
  can't encode character u'\xf4' in position 0: ordinal not in range(128)
&gt;&gt;&gt; u'a {}'.format(x)
u'a \xf4'
&gt;&gt;&gt; print u"Foo bar {}".format(x)
Foo bar ô
</snippet></ROW><ROW><id>13674809</id><snippet>print</snippet></ROW><ROW><id>13674809</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp852'
&gt;&gt;&gt; u'\xf4'.encode('cp852')
'\x93'
</snippet></ROW><ROW><id>13674809</id><snippet>|</snippet></ROW><ROW><id>13675011</id><snippet>for l in TheFile:
   i += 1
   print i
   this_line = TheFile.next()
</snippet></ROW><ROW><id>13675011</id><snippet>l</snippet></ROW><ROW><id>13675011</id><snippet>TheFile.next()</snippet></ROW><ROW><id>13675011</id><snippet>this_line = TheFile.next()</snippet></ROW><ROW><id>13675011</id><snippet>this_line = l</snippet></ROW><ROW><id>13675073</id><snippet>sys.byteorder</snippet></ROW><ROW><id>13675073</id><snippet>np.savez</snippet></ROW><ROW><id>13675073</id><snippet>import io
content = io.BytesIO()
np.savez(content, x=x, y=y)
content.seek(0)
</snippet></ROW><ROW><id>13675073</id><snippet>content</snippet></ROW><ROW><id>13675073</id><snippet>data = np.load(content)
</snippet></ROW><ROW><id>13675108</id><snippet>blastx_cline = NcbiblastxCommandline(cmd='blastn', query="queryfile.fas", db="newtest.db", evalue=0.00000001, outfmt=5, out="opuntia.xml")
</snippet></ROW><ROW><id>13675157</id><snippet>import csv
f = open('test.csv', 'wb')
out = csv.writer(f, delimiter=",")
out.writerow([u"value1", u"value2", u"value3"])
f.close()
</snippet></ROW><ROW><id>13675157</id><snippet>open('test.csv', 'wb')</snippet></ROW><ROW><id>13675157</id><snippet>f</snippet></ROW><ROW><id>13675157</id><snippet>f.close()</snippet></ROW><ROW><id>13675223</id><snippet>\b</snippet></ROW><ROW><id>13675223</id><snippet>\b</snippet></ROW><ROW><id>13675223</id><snippet>foo = Bar()</snippet></ROW><ROW><id>13675223</id><snippet>\b</snippet></ROW><ROW><id>13675223</id><snippet>B</snippet></ROW><ROW><id>13675223</id><snippet>foo = $Bar()</snippet></ROW><ROW><id>13675223</id><snippet>\b</snippet></ROW><ROW><id>13675223</id><snippet>$</snippet></ROW><ROW><id>13675223</id><snippet>\b</snippet></ROW><ROW><id>13675223</id><snippet>(?=\b|\B\$)</snippet></ROW><ROW><id>13675223</id><snippet>for classname in allowed_classes:
    line = re.sub(r'^([^\'"]*(?:([\'"])[^\'"]*\2)*[^\'"]*)(?=\b|\B\$)(%s\s*\()' % classname, r'\1new \3', line)
</snippet></ROW><ROW><id>13675223</id><snippet>classname</snippet></ROW><ROW><id>13675223</id><snippet>$</snippet></ROW><ROW><id>13675223</id><snippet>classname</snippet></ROW><ROW><id>13675223</id><snippet>\b</snippet></ROW><ROW><id>13675223</id><snippet>classname</snippet></ROW><ROW><id>13675223</id><snippet>$</snippet></ROW><ROW><id>13675223</id><snippet>$</snippet></ROW><ROW><id>13675223</id><snippet>\B\$</snippet></ROW><ROW><id>13675223</id><snippet>$</snippet></ROW><ROW><id>13675403</id><snippet>k = list[0:j]</snippet></ROW><ROW><id>13675403</id><snippet>split</snippet></ROW><ROW><id>13675403</id><snippet># Using with ensures that the file is properly closed when you're done
with open('filename.txt', 'rb') as f:
  d = {}
  # Here we use readlines() to split the file into a list where each element is a line
  for line in f.readlines():
    # Now we split the file on `x`, since the part before the x will be
    # the key and the part after the value
    line = line.split('x')
    # Take the line parts and strip out the spaces, assigning them to the variables
    # Once you get a bit more comfortable, this works as well:
    # key, value = [x.strip() for x in line] 
    key = line[0].strip()
    value = line[1].strip()
    # Now we check if the dictionary contains the key; if so, append the new value,
    # and if not, make a new list that contains the current value
    # (For future reference, this is a great place for a defaultdict :)
    if key in d:
      d[key].append(value)
    else:
      d[key] = [value]

print d
# {'AAA': ['111', '112'], 'AAC': ['123'], 'AAB': ['111']}
</snippet></ROW><ROW><id>13675403</id><snippet>rb</snippet></ROW><ROW><id>13675403</id><snippet>line = line.split(b'x')</snippet></ROW><ROW><id>13675403</id><snippet>with open('filename.txt', 'rU') as f:</snippet></ROW><ROW><id>13675403</id><snippet>with open('filename.txt', 'r') as f:</snippet></ROW><ROW><id>13675435</id><snippet>sys.path</snippet></ROW><ROW><id>13675435</id><snippet>C:\Users\USER\Modules</snippet></ROW><ROW><id>13675435</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13675435</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13675435</id><snippet>C:\Users\USER\Modules</snippet></ROW><ROW><id>13675517</id><snippet>l1 = [[1,2,3,4], [10,11,12]]
l2 = [[-1,-2,-3,-4], [-10,-11,-12]]

print [zip(a,b) for a,b in zip(l1,l2)]
</snippet></ROW><ROW><id>13675614</id><snippet>command = self._test</snippet></ROW><ROW><id>13675614</id><snippet>self._test</snippet></ROW><ROW><id>13675614</id><snippet>self._test("A")</snippet></ROW><ROW><id>13675614</id><snippet>None</snippet></ROW><ROW><id>13675614</id><snippet>return</snippet></ROW><ROW><id>13675614</id><snippet>self._test("A")</snippet></ROW><ROW><id>13675614</id><snippet>lambda: self._test("A")</snippet></ROW><ROW><id>13675614</id><snippet>functools.partial(self._test, "A")</snippet></ROW><ROW><id>13675614</id><snippet>GameBoard.__init__</snippet></ROW><ROW><id>13675614</id><snippet>def _f():
    self._test("A")
self.__buttonA1 = Button(self.__buttonPane,text = "A1",command = _f)
</snippet></ROW><ROW><id>13675646</id><snippet>QThread</snippet></ROW><ROW><id>13675646</id><snippet>Queue</snippet></ROW><ROW><id>13675646</id><snippet>QTextCursor</snippet></ROW><ROW><id>13675978</id><snippet>import ast
ast.literal_eval("{'x':1, 'y':2}")
=&gt; {'y': 2, 'x': 1}
</snippet></ROW><ROW><id>13675978</id><snippet>eval()</snippet></ROW><ROW><id>13675978</id><snippet>literal_eval</snippet></ROW><ROW><id>13675995</id><snippet>"bye"</snippet></ROW><ROW><id>13675995</id><snippet>"quitting!"</snippet></ROW><ROW><id>13675995</id><snippet>sleep</snippet></ROW><ROW><id>13675995</id><snippet>sleep</snippet></ROW><ROW><id>13676046</id><snippet>d</snippet></ROW><ROW><id>13676046</id><snippet>downloadImage()</snippet></ROW><ROW><id>13676046</id><snippet>concurrent.futures</snippet></ROW><ROW><id>13676046</id><snippet>futures</snippet></ROW><ROW><id>13676046</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>13676046</id><snippet>#!/usr/bin/env python
import urllib
from multiprocessing import Pool
from posixpath import basename
from urllib import unquote
from urlparse import urlsplit


download_dir = "grabNew"

def url2filename(url):
    return basename(unquote(urlsplit(url).path).decode('utf-8'))

def download_image(url):
    filename = None
    try:
        filename = os.path.join(download_dir, url2filename(url))
        return urllib.urlretrieve(url, filename), None
    except Exception as e:
        return (filename, None), e

def main():
    pool = Pool(processes=10)
    for (filename, headers), error in pool.imap_unordered(download_image, get_urls()):
        pass # do something with the downloaded file or handle an error

if __name__ == "__main__":
   main()
</snippet></ROW><ROW><id>13676118</id><snippet>fields = [(d['FieldName'], d.get('FieldValue', '')) for d in your_list]
</snippet></ROW><ROW><id>13676213</id><snippet>import collections

def isPalindrome(s):
    return s.lower() == s[::-1].lower()

def anagramchk(word,chkword):
    return sorted(word.lower()) == sorted(chkword.lower())

def allAnagrams(dictfilepath):
    answer = collections.defaultdict(list)
    with open(dictfilepath) as dictfile:
        for line in dictfile:
            word = line.strip().lower()
            answer[''.join(sorted(word))].append(word)
    return answer

def fetchAllAnagrams(wordin, anagrams):
    return anagrams[''.join(sorted(wordin.lower()))]

def main(dictfilepath, palsfilepath):
    anagrams = allAnagrams(dictfilepath)
    with open(palsfilepath) as palfile:
        for line in palfile:
            word = line.strip().lower()
            if isPalindrome(word):
                for anagram in anagrams[''.join(sorted(word))]:
                    if isPalindrome(anagram):
                        print "%s is an anagram of %s" %(anagram, word)
</snippet></ROW><ROW><id>13676213</id><snippet>'path/to/dictfile'</snippet></ROW><ROW><id>13676213</id><snippet>'path/to/palsfile'</snippet></ROW><ROW><id>13676213</id><snippet>main</snippet></ROW><ROW><id>13676213</id><snippet>main('path/to/dictfile', 'path/to/palsfile')
</snippet></ROW></DATA>