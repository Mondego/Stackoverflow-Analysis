15434661Di2015UniqueSeparatorWindows.UI.Xaml.Window.Current.CoreWindow.KeyDown += (sender, arg) =>Di2015NewLine        {Di2015NewLine            if (arg.VirtualKey == Windows.System.VirtualKey.Enter)Di2015NewLine            {Di2015NewLine                //Your login methodDi2015NewLine            }Di2015NewLineDi2015NewLine        };Di2015NewLine
15434675Di2015UniqueSeparatorRegisterHotKey()
15434675Di2015UniqueSeparatorHandle
15434675Di2015UniqueSeparatorShowInTaskbar = false
15434675Di2015UniqueSeparatorRegisterHotKey(this.Handle, MYACTION_HOTKEY_ID, 0, (int) Keys.F9);Di2015NewLine
15434675Di2015UniqueSeparatorNativeWindow
15434675Di2015UniqueSeparatorpublic sealed class HotkeyManager : NativeWindow, IDisposableDi2015NewLine{Di2015NewLine    public HotkeyManager()Di2015NewLine    {Di2015NewLine        CreateHandle(new CreateParams());Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void WndProc(ref Message m)Di2015NewLine    {Di2015NewLine        if (m.Msg == Constants.WM_HOTKEY)Di2015NewLine        {Di2015NewLine             //handle hotkey messageDi2015NewLine        }Di2015NewLine        base.WndProc(ref m);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        DestroyHandle();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15435187Di2015UniqueSeparatorinterface IFooDi2015NewLine{Di2015NewLine  string A { get; set; }Di2015NewLine}Di2015NewLineclass Foo : IFooDi2015NewLine{Di2015NewLine  public string A { get; set; }Di2015NewLine  public string B { get; set; }Di2015NewLine}Di2015NewLine
15435187Di2015UniqueSeparatorPropertyInfo
15435187Di2015UniqueSeparatorB
15435187Di2015UniqueSeparator  var fooProps = typeof(Foo).GetProperties();Di2015NewLine  var implementedProps = typeof(Foo).GetInterfaces().SelectMany(i => i.GetProperties());Di2015NewLine  var onlyInFoo = fooProps.Select(prop => prop.Name).Except(implementedProps.Select(prop => prop.Name)).ToArray();Di2015NewLine  var fooPropsFiltered = fooProps.Where(x => onlyInFoo.Contains(x.Name));Di2015NewLine
15435300Di2015UniqueSeparatorItemsPanel
15435300Di2015UniqueSeparatorCanvas
15435300Di2015UniqueSeparatorCanvas
15435300Di2015UniqueSeparatorItemTemplate
15435300Di2015UniqueSeparatorItemsControl
15435300Di2015UniqueSeparator<ContentPresenter>
15435300Di2015UniqueSeparatorContentPresenter
15435300Di2015UniqueSeparatorItemContainerStyle
15435300Di2015UniqueSeparatorImage
15435300Di2015UniqueSeparator<ItemsControl ItemsSource="{Binding MyCollectionOfImages}">Di2015NewLine    <!-- ItemsPanelTemplate -->Di2015NewLine    <ItemsControl.ItemsPanel>Di2015NewLine        <ItemsPanelTemplate>Di2015NewLine            <Canvas />Di2015NewLine        </ItemsPanelTemplate>Di2015NewLine    </ItemsControl.ItemsPanel>Di2015NewLineDi2015NewLine    <!-- ItemContainerStyle -->Di2015NewLine    <ItemsControl.ItemContainerStyle>Di2015NewLine        <Style>Di2015NewLine            <Setter Property="Canvas.Left" Value="{Binding posX}" />Di2015NewLine            <Setter Property="Canvas.Top" Value="{Binding posY}" />Di2015NewLine        </Style>Di2015NewLine    </ItemsControl.ItemContainerStyle>Di2015NewLineDi2015NewLine    <!-- ItemTemplate -->Di2015NewLine    <ItemsControl.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <Image x:Name="{Binding Path=fileName}"Di2015NewLine                   Source="{Binding Path=fileName}"Di2015NewLine                   MouseDown="Img_MouseDown" Di2015NewLine                   MouseUp="Img_MouseUp" /> Di2015NewLine        </DataTemplate>Di2015NewLine    </ItemsControl.ItemTemplate>Di2015NewLine</ItemsControl>Di2015NewLine
15435365Di2015UniqueSeparatorpublic static void HelperExtension(this A a)Di2015NewLine{Di2015NewLine    B b = a as B;Di2015NewLine    if(b != null)Di2015NewLine       HelperExtension(b);Di2015NewLine    elseDi2015NewLine       //the rest of the method.Di2015NewLine}Di2015NewLine
15435365Di2015UniqueSeparatorSwitch
15435365Di2015UniqueSeparatorDictionary<Type, Action<A>>
15435365Di2015UniqueSeparatordynamic
15435365Di2015UniqueSeparatorA
15435365Di2015UniqueSeparatorpublic static void HelperExtension(this A a)Di2015NewLine{Di2015NewLine    ExtenstionImplementation((dynamic)a);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void ExtenstionImplementation(A a){...}Di2015NewLineprivate static void ExtenstionImplementation(B a){...}Di2015NewLineprivate static void ExtenstionImplementation(C a){...}Di2015NewLine
15435417Di2015UniqueSeparatorvar result = new { prop1 = "hello", prop2 = "world", prop3 = new int[] {1,2,3} };Di2015NewLine
15435417Di2015UniqueSeparatorint[] array = new int[] {1,2,3};Di2015NewLinevar result = new { prop1 = "hello", prop2 = "world", prop3 = array};Di2015NewLine
15435614Di2015UniqueSeparatorif (conditionMet == true)Di2015NewLine{Di2015NewLine    foreach(Occ occ in r.Occs)Di2015NewLine    {Di2015NewLine        occ.ratetocharge = occ.ratetocharge - 50;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15435681Di2015UniqueSeparatorA
15435681Di2015UniqueSeparatorB
15435681Di2015UniqueSeparatorRestriction+A
15435681Di2015UniqueSeparatorRestriction+B
15435681Di2015UniqueSeparatorRestriction
15435681Di2015UniqueSeparatorConsoleApplication
15435681Di2015UniqueSeparatorConsoleApplication.Restriction+A
15435681Di2015UniqueSeparatorA
15435866Di2015UniqueSeparatorvar results = listResx.Items.Cast<ListViewItem>()Di2015NewLine      .Where(x => x.Subitems.Cast<ListViewItem.ListViewSubItem>()Di2015NewLine                  .Any(si => si.Text.Contains(textQuery.Text)Di2015NewLine            );Di2015NewLine
15435866Di2015UniqueSeparatorresults
15435866Di2015UniqueSeparatorforeach (var d in results)Di2015NewLine{Di2015NewLine    ListViewItem lvi = new ListViewItem();Di2015NewLine    foreach(ListViewItem.ListViewSubItem si in d.SubItems)Di2015NewLine    {Di2015NewLine        lvi.SubItems.Add(si.Text);Di2015NewLine    }Di2015NewLine    listQuery.Items.Add(lvi);Di2015NewLine}Di2015NewLine
15435966Di2015UniqueSeparator$('#<%=txtbox.ClientID%>').val(response.d);
15435980Di2015UniqueSeparatorText
15435980Di2015UniqueSeparatorSelectedDate
15435980Di2015UniqueSeparatorDateTime?
15435980Di2015UniqueSeparatorDateTime
15435980Di2015UniqueSeparatorToString
15435980Di2015UniqueSeparatord
15435980Di2015UniqueSeparatorstring str = m_dDate.Date.ToString("d", m_UsCulture);Di2015NewLine
15435980Di2015UniqueSeparatorDateTime.ToShortDateString()
15435980Di2015UniqueSeparatorToString
15436030Di2015UniqueSeparator <asp:sqlDataSource ID="EmployeeDetailsSqlDataSource" Di2015NewLine   SelectCommand="select [UserName], [MonthlyHourLimit] from [UserData] where UserName= @UserName"Di2015NewLineDi2015NewLine   InsertCommand="IINSERT INTO [UserData] ([UserName], [MonthlyHourLimit]) VALUES (@UserName, @MonthlyHourLimit);"Di2015NewLineDi2015NewLine   ConnectionString="<%$ ConnectionStrings:MyConnection %>"Di2015NewLine   RunAt="server">Di2015NewLineDi2015NewLine   <SelectParameters>Di2015NewLine      <asp:Parameter Name="UserName" Type="Int32" DefaultValue="0" />Di2015NewLine   </SelectParameters>Di2015NewLineDi2015NewLine   <InsertParameters>Di2015NewLine      <asp:Parameter Name="UserName" Direction="Input" Type="String" />Di2015NewLine      <asp:Parameter Name="MonthlyHourLimit" Direction="Input" Type="String" />Di2015NewLine   </InsertParameters>Di2015NewLineDi2015NewLine </asp:sqlDataSource>Di2015NewLine
15436030Di2015UniqueSeparator  <asp:Ð¡ontrolParameter Name="UserName" ControlId="ddlUserNames" PropertyName="SelectedValue"/>Di2015NewLineDi2015NewLine  ...Di2015NewLineDi2015NewLine  <asp:DropdownListDi2015NewLine      ID="ddlUserNames"Di2015NewLine      runat="server"Di2015NewLine      Autopostback="True">Di2015NewLine      <asp:Listitem Selected="True">Users</asp:Listitem>Di2015NewLine      <asp:Listitem Value="Peter">Peter</asp:Listitem>Di2015NewLine      <asp:Listitem Value="Jessica">Jessica</asp:Listitem>Di2015NewLine  </asp:Dropdownlist>Di2015NewLine
15436030Di2015UniqueSeparator <asp:sqlDataSource ID="EmployeeDetailsSqlDataSource" Di2015NewLine                    SelectCommand="select [UserName], [MonthlyHourLimit] from [UserData] where UserName= @UserName"Di2015NewLine                    InsertCommand="IINSERT INTO [UserData] ([UserName], [MonthlyHourLimit]) VALUES (@UserName, @MonthlyHourLimit);"Di2015NewLineDi2015NewLine                    ConnectionString="<%$ ConnectionStrings:MyConnection %>"Di2015NewLine                    RunAt="server">Di2015NewLine      <SelectParameters>Di2015NewLine          <asp:Parameter Name="UserName" Type="Int32" DefaultValue="0" />Di2015NewLine      </SelectParameters>Di2015NewLine      <InsertParameters>Di2015NewLine          <asp:ControlParameter Name="UserName" ControlId="txtUserName" Direction="Input" Type="String" />Di2015NewLine          <asp:ControlParameter Name="MonthlyHourLimit" ControlId="txtMonthlyHourLimit" Direction="Input" Type="String" />Di2015NewLine      </InsertParameters>Di2015NewLine </asp:sqlDataSource>Di2015NewLineDi2015NewLine <asp:TextBox runat="server" ID="txtUserName" /> Di2015NewLine <asp:TextBox runat="server" ID="txtMonthlyHourLimit" />Di2015NewLine
15436094Di2015UniqueSeparatorpublic bool IsValidString(string s)Di2015NewLine{Di2015NewLine  string[] strs = s.Split(' ');Di2015NewLine  int i = 0;Di2015NewLine  if (strs.Length != 2)Di2015NewLine    return false;Di2015NewLine  return (int.TryParse(strs[1], out i);Di2015NewLine}Di2015NewLine
15436094Di2015UniqueSeparatorRegex
15436193Di2015UniqueSeparatorToolStripDropDownButton
15436193Di2015UniqueSeparatorToolStripButton
15436193Di2015UniqueSeparatorToolStripItem
15436193Di2015UniqueSeparatorvar button = ((btnSoles as ToolStripItem) as ToolStripButton);Di2015NewLine
15436193Di2015UniqueSeparatorbtnSoles
15436193Di2015UniqueSeparatorToolStripItem
15436193Di2015UniqueSeparatorvar item = (ToolStripItem)btnSoles;Di2015NewLine
15436193Di2015UniqueSeparatorToolStripButton
15436193Di2015UniqueSeparatorToolStripItem
15436193Di2015UniqueSeparatoras
15436193Di2015UniqueSeparatorvar button = btnSoles as ToolStripButton;Di2015NewLine
15436193Di2015UniqueSeparatornull
15436193Di2015UniqueSeparatorbtnSoles
15436193Di2015UniqueSeparatorToolStripButton
15436193Di2015UniqueSeparatorToolStripDropDownButton
15436193Di2015UniqueSeparatornull
15436360Di2015UniqueSeparatorDescendants
15436360Di2015UniqueSeparatorx
15436360Di2015UniqueSeparatorDocuments
15436360Di2015UniqueSeparatorElements
15436360Di2015UniqueSeparatorDescendants
15436417Di2015UniqueSeparatorSELECT CASE(FREIGHT_PRICE AS FLOAT)
15436417Di2015UniqueSeparatordouble collectionCharge = (double)cmdCheck.ExecuteScalar();Di2015NewLine
15436676Di2015UniqueSeparatorHasFlag
15436676Di2015UniqueSeparatorHasFlag = (GivenFlag & Value) == GivenFlag;Di2015NewLineDi2015NewLine//"Anything" AND 0 == 0  --> always trueDi2015NewLine
15436740Di2015UniqueSeparatorSelect
15436740Di2015UniqueSeparatorWhere
15436740Di2015UniqueSeparatorSelect
15436740Di2015UniqueSeparatorWhere
15436740Di2015UniqueSeparatorSum
15436740Di2015UniqueSeparatorvar sum = dc.myTables.Sum(...);  // Always eager Di2015NewLine
15436899Di2015UniqueSeparator()
15437019Di2015UniqueSeparator    private IQueryable<T> FilterByCategory<T>Di2015NewLine                (IQueryable<T> items, IEnumerable<int> filter, Di2015NewLine                 Func<T, int> categorySelector)Di2015NewLine    {Di2015NewLine        return items.Where(i => filter.Contains(categorySelector(i)));Di2015NewLine    }Di2015NewLine
15437019Di2015UniqueSeparator        var source = Enumerable.Empty<One>().AsQueryable();Di2015NewLine        var filter = Enumerable.Empty<int>();Di2015NewLineDi2015NewLine        var filtered = FilterByCategory(source, filter, s => s.CategoryId);Di2015NewLine
15437169Di2015UniqueSeparatoruser2
15437169Di2015UniqueSeparator   Guid result;Di2015NewLine    if(Guid.TryParse(user2, out result))Di2015NewLine    {Di2015NewLine    //success (result variable has been assigned the Guid value)Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine    //errorDi2015NewLine    }Di2015NewLine
15437169Di2015UniqueSeparatorGuid user2; Di2015NewLineif(Guid.TryParse("UserName", out user2))Di2015NewLine{Di2015NewLine UserName(user2)Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine//do whatever you need to report the errorDi2015NewLine}Di2015NewLine
15437169Di2015UniqueSeparatorGuid
15437169Di2015UniqueSeparatorGuid.TryParse
15437207Di2015UniqueSeparator(from a in GetCtx().ApplicationDi2015NewLine where identifiers.Contains(SqlFunctions.StringConvert((double)a.os) + ":" + a.osIdentifier)Di2015NewLine select a.id).ToList();Di2015NewLine
15437274Di2015UniqueSeparatorLEFT JOIN Table2
15437274Di2015UniqueSeparatorLEFT JOIN (Select id, locationId from table2 group by id, locationId having count(*) = 1) as table2
15437288Di2015UniqueSeparatorpublic Form3 : FormDi2015NewLine{Di2015NewLine    public Form1 Parent { get; set; }Di2015NewLineDi2015NewLine    // TODO: Replace object with the proper type.Di2015NewLine    public object SomeComboboxValueDi2015NewLine    {Di2015NewLine                    // TODO: Replace with the value you want to access.Di2015NewLine        get { return SomeComboBox.PropertyYouWantToAccess; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Form3()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Form3(Form1 form1)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Parent = form1; Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic Form1 : FormDi2015NewLine{Di2015NewLine    private Form3 _form3;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine        :this(new Form3())Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public Form1(Form3 form3)Di2015NewLine    {Di2015NewLine        _form3 = form3;Di2015NewLine        _form3.Parent = this;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15437288Di2015UniqueSeparatorApplication.Run(new Form1());
15437485Di2015UniqueSeparatorMenuStrip[] mstrip = new MenuStrip[] Di2015NewLine{Di2015NewLine    msO1,msO2, msO3, msP1, msP2, msP3 // add other menus here when neededDi2015NewLine};Di2015NewLine
15437485Di2015UniqueSeparator   for(int x = 0; x < menus.Length; x++)Di2015NewLine      mstrip[x].Visible = false;Di2015NewLine
15437485Di2015UniqueSeparator    for (int x = 0; x < splt.Length; x++)Di2015NewLine    {Di2015NewLine        int menuIndex;Di2015NewLine        if(Int32.TryParse(splt[x], out menuIndex))Di2015NewLine        {Di2015NewLine            menuIndex--;Di2015NewLine            if(menuIndex >= 0 && menuIndex < mstrip.Length)Di2015NewLine                mstrip[menuIndex].Visible = true;Di2015NewLine       }Di2015NewLine    }Di2015NewLine
15437561Di2015UniqueSeparatorName
15437561Di2015UniqueSeparatorColumnAttribute
15437561Di2015UniqueSeparator[Table("PdfMeta")]Di2015NewLinepublic class MetaDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public int Id { get; set; }Di2015NewLineDi2015NewLine    [Column("TotalPages")]Di2015NewLine    public int TotalPages { get; set; }Di2015NewLineDi2015NewLine    [Column("PdfPath")]Di2015NewLine    public string PdfUri { get; set; }Di2015NewLineDi2015NewLine    [Column("ImagePath")]Di2015NewLine    public string ImageUri { get; set; }Di2015NewLineDi2015NewLine    [Column("SplittedPdfPath")]Di2015NewLine    public string SplittedFolderUri { get; set; }Di2015NewLine}Di2015NewLine
15437561Di2015UniqueSeparatorColumnAttribute
15437561Di2015UniqueSeparatorColumnAttribute
15437658Di2015UniqueSeparatorrecurring background tasks in ASP.NET applications
15437740Di2015UniqueSeparatorTask.Factory.StartNew((Action) delegate()Di2015NewLine{Di2015NewLine    // this code is now executing on a new thread.Di2015NewLine    nowthen now = new nowthen();Di2015NewLine    now.dosomething(withthis);Di2015NewLineDi2015NewLine    // to update the UI from here, you must use Invoke to make the call on UI threadDi2015NewLine    textBox1.Invoke((Action) delegate()Di2015NewLine    {Di2015NewLine          textBox1.Text = "This update occurs on the UI thread";Di2015NewLine    });Di2015NewLine});Di2015NewLine
15437794Di2015UniqueSeparatorout
15437794Di2015UniqueSeparatorout
15437794Di2015UniqueSeparatorTuple<T1,T2>
15437794Di2015UniqueSeparatorpublic Tuple<MasterItemsCls, ReturnValueCls> MyFunction()Di2015NewLine{Di2015NewLine    // Do stuffDi2015NewLine    return new Di2015NewLine    Tuple<MasterItemsCls, ReturnValueCls>(myMasterItemsCls, myReturnValueCls);Di2015NewLine}Di2015NewLine
15437794Di2015UniqueSeparatorTuple<T1,T2>
15437794Di2015UniqueSeparatorItem1
15437794Di2015UniqueSeparatorItem2
15437794Di2015UniqueSeparatorTuple<T1,T2>
15437794Di2015UniqueSeparatorMasterItemsCls
15437794Di2015UniqueSeparatorReturnValueCls
15437812Di2015UniqueSeparatorc
15437812Di2015UniqueSeparatorParameterExpression
15437812Di2015UniqueSeparatorConstantExpression
15437812Di2015UniqueSeparatorcommand
15437812Di2015UniqueSeparator(_sender, _e) => this.EventAssistant(_sender, _e, _c)Di2015NewLine// The expression expects "_c" to be a parameter of the lambda, which is whyDi2015NewLine// you're getting that exceptionDi2015NewLine
15437812Di2015UniqueSeparatorvar c = Expression.Parameter(typeof(Command), "command");Di2015NewLine
15437812Di2015UniqueSeparatorvar c = Expression.Constant(command);Di2015NewLine
15437812Di2015UniqueSeparator(_sender, _e) => this.EventAssistant(_sender, _e, command)Di2015NewLine
15438008Di2015UniqueSeparatorList<Key> _keys = new List<Key>();
15438008Di2015UniqueSeparator        var t = new System.Timers.Timer(500);    //you may try using an smaller valueDi2015NewLine        t.Elapsed += t_Elapsed;Di2015NewLine        t.Start();Di2015NewLine
15438008Di2015UniqueSeparatort_Elapsed
15438008Di2015UniqueSeparatorDispatcherTimer
15438008Di2015UniqueSeparatorSystem.Timers
15438008Di2015UniqueSeparator    void t_Elapsed(object sender, System.Timers.ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        if (_keys.Count > 0)Di2015NewLine        {Di2015NewLine             //Here get all keys and play the sound using threadsDi2015NewLine             _keys.Clear();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15438008Di2015UniqueSeparatorvoid OnKeyDownMethod(object sender, KeyPressedEventArgs e)  //not sure this is the name of the EventArgs classDi2015NewLine {Di2015NewLine    _keys.Add(e.Key);    //need to checkDi2015NewLine }Di2015NewLine
15438093Di2015UniqueSeparatorjoin c
15438093Di2015UniqueSeparatorb
15438093Di2015UniqueSeparatorBees
15438093Di2015UniqueSeparatora
15438093Di2015UniqueSeparatorfrom a in ADi2015NewLinejoin b in B on a.aId equals  b.aId into BeesDi2015NewLineselect new { a.id, Bees, Di2015NewLine    Cees = from b in Bees Di2015NewLine    join c in C on b.bId equals c.bIdDi2015NewLine    select v}Di2015NewLine
15438093Di2015UniqueSeparatorfrom a in ADi2015NewLinejoin b in B on a.aId equals b.aIdDi2015NewLinejoin c in C on b.bId equals c.bIdDi2015NewLineselect new { a.id, b, c}Di2015NewLine
15438180Di2015UniqueSeparatorSQLite.cs
15438180Di2015UniqueSeparatorSQLite3
15438180Di2015UniqueSeparatorpublic static extern Result Config (ConfigOption option);Di2015NewLine
15438180Di2015UniqueSeparatorConfigOption
15438180Di2015UniqueSeparatorpublic enum ConfigOption : intDi2015NewLine{Di2015NewLine    SingleThread = 1,Di2015NewLine    MultiThread = 2,Di2015NewLine    Serialized = 3Di2015NewLine}Di2015NewLine
15438232Di2015UniqueSeparatorpbDialog.ShowDialog( ProgressBar, this );Di2015NewLine
15438388Di2015UniqueSeparatorstartDate
15438388Di2015UniqueSeparatorendDate
15438388Di2015UniqueSeparatorbool FilterDate(YourEntityType x)Di2015NewLine{Di2015NewLine    return EntityFunctions.TruncateTime(x.Date.Value) >= EntityFunctions.TruncateTime(startDate) &&Di2015NewLine           EntityFunctions.TruncateTime(x.Date.Value) <= EntityFunctions.TruncateTime(endDate));Di2015NewLine}Di2015NewLine
15438388Di2015UniqueSeparatorvar results = myobjects.Where(FilterDate);Di2015NewLine
15438388Di2015UniqueSeparatorstartDate
15438388Di2015UniqueSeparatorendDate
15438388Di2015UniqueSeparatorstatic Func<YourEntityType, bool> CreateFilter(DateTime startDate, DateTime endDate)Di2015NewLine{Di2015NewLine     Func<YourEntityType, bool> func = x => EntityFunctions.TruncateTime(x.Date.Value) >= EntityFunctions.TruncateTime(startDate) &&Di2015NewLineEntityFunctions.TruncateTime(x.Date.Value) <= EntityFunctions.TruncateTime(endDate));Di2015NewLine     return func;Di2015NewLine}Di2015NewLine
15438388Di2015UniqueSeparatorvar results = myobjects.Where(CreateFilter(startDate, endDate));Di2015NewLine
15438487Di2015UniqueSeparatorif (!a.Except(predefined).Any())Di2015NewLine{Di2015NewLine    // predefined contains every element of aDi2015NewLine    // (Way to read this: there is no element of a which isn't also in predefined)Di2015NewLine}Di2015NewLine
15438487Di2015UniqueSeparatorAll
15438487Di2015UniqueSeparatorContains
15438487Di2015UniqueSeparatorAll
15438487Di2015UniqueSeparatorContains
15438487Di2015UniqueSeparatorHashSet<T>
15438487Di2015UniqueSeparatorpredefined
15438487Di2015UniqueSeparatorvar predefinedSet = new HashSet<string>(predefined);Di2015NewLine...Di2015NewLineDi2015NewLineif (predefinedSet.IsSupersetOf(a))Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15438488Di2015UniqueSeparatorweb.config
15438488Di2015UniqueSeparatorroleenvironmentchanging
15438488Di2015UniqueSeparatorroleenvironmentchanging
15438515Di2015UniqueSeparatorprivate void contextMenuStrip1_Opening(object sender, System.ComponentModel.CancelEventArgs e) {Di2015NewLine  var contextMenu = (sender as ContextMenuStrip);Di2015NewLine  if (contextMenu != null) {Di2015NewLine    var sourceControl = contextMenu.SourceControl;Di2015NewLine    contextMenuStrip1.Items.Clear();Di2015NewLine    //contextMenuStrip1.Items.Add(...);Di2015NewLine  }Di2015NewLine}Di2015NewLine
15438553Di2015UniqueSeparator            HttpFileCollection fileCollection = Request.Files;Di2015NewLine            List<byte[]> imgs = new List<byte[]>();Di2015NewLine            for (int i = 0; i < fileCollection.Count; i++)Di2015NewLine            {Di2015NewLine                HttpPostedFile uploadfile = fileCollection[i];Di2015NewLine                byte[] imageBytes = new byte[uploadfile.InputStream.Length];Di2015NewLine                uploadfile.InputStream.Read(imageBytes, 0, imageBytes.Length);Di2015NewLine                if(imageBytes.Length > 0)Di2015NewLine                    imgs.Add(imageBytes);Di2015NewLine            }Di2015NewLine
15438590Di2015UniqueSeparatorImage newImage = new Bitmap(pngImage.Width + 4, pngImage.Height+4);Di2015NewLineGraphics g = Graphics.FromImage(newImage);Di2015NewLine
15438608Di2015UniqueSeparatorif(!IsPostBack)Di2015NewLine{Di2015NewLine        SqlConnection conn = new SqlConnection(WebConfigurationManager.ConnectionStrings["RaiseFantasyLeagueConnectionString"].ConnectionString);Di2015NewLine        SqlCommand cmd = new SqlCommand("[dbo].[GetUsersProfile]", conn);Di2015NewLine        cmd.CommandType = CommandType.StoredProcedure;Di2015NewLineDi2015NewLine        string userId = Membership.GetUser().ProviderUserKey.ToString();Di2015NewLine        SqlParameter userIDParam = new SqlParameter("@userId", userId);Di2015NewLineDi2015NewLine        cmd.Parameters.Add(userIDParam);Di2015NewLineDi2015NewLine        conn.Open();Di2015NewLine        SqlDataReader dReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);Di2015NewLine        while (dReader.Read())Di2015NewLine        {Di2015NewLine            FirstName.Text = (dReader["ManagerFirstName"].ToString());Di2015NewLine            Surname.Text = (dReader["ManagerSurname"].ToString());Di2015NewLine            TeamName.Text = (dReader["TeamName"].ToString());Di2015NewLine            StadiumName.Text = (dReader["TeamStadium"].ToString());Di2015NewLine            Email.Text = (dReader["Email"].ToString());Di2015NewLine            Reminder.Checked = (bool)dReader["RecieveReminder"];Di2015NewLine            Prediction.Checked = (bool)dReader["RecieveSummary"];Di2015NewLine        }Di2015NewLine        dReader.Close();Di2015NewLine        conn.Close();Di2015NewLine}Di2015NewLine
15438637Di2015UniqueSeparatorConcurrentQueue<T>
15438637Di2015UniqueSeparatorBlockingCollection<T>.Dispose()
15438638Di2015UniqueSeparatorWhere
15438638Di2015UniqueSeparator_EmailList = _RecordOwnerEmailListDi2015NewLine  .Union(_SubmissionEmailList)Di2015NewLine  .Where(address => !String.IsNullOrEmpty(address))Di2015NewLine  .ToList();Di2015NewLine
15438713Di2015UniqueSeparatorchild
15438713Di2015UniqueSeparatornull
15438713Di2015UniqueSeparatorNode
15438713Di2015UniqueSeparatorbool ChildCreated(Node parent, int childIndex)Di2015NewLine{Di2015NewLine    return parent.child[childIndex] != null;Di2015NewLine}Di2015NewLine
15438713Di2015UniqueSeparatorvar created = Enumerable.Range(0, node.child.Length).Where(i => ChildCreated(node, i)).ToList();Di2015NewLineif (!created.Any())Di2015NewLine{Di2015NewLine    Console.WriteLine("No children created.");Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Console.WriteLine("Children {0} created, all others aren't.", string.Join(", ", created));Di2015NewLine}Di2015NewLine
15439069Di2015UniqueSeparatorasync
15439069Di2015UniqueSeparatorawait
15439069Di2015UniqueSeparatorasync
15439069Di2015UniqueSeparatorawait
15439100Di2015UniqueSeparatorPage.IsPostBack
15439100Di2015UniqueSeparatorIsPostBack
15439100Di2015UniqueSeparator_isCrossPagePostBack
15439100Di2015UniqueSeparatortrue
15439100Di2015UniqueSeparator_requestValueCollection
15439100Di2015UniqueSeparatornull
15439100Di2015UniqueSeparatorIsPostBack
15439100Di2015UniqueSeparatortrue
15439100Di2015UniqueSeparatorIsPostBack
15439198Di2015UniqueSeparatorreturn context.Table1s.GroupBy(i => i.Policy)Di2015NewLine                      .Select(g => g.First())Di2015NewLine                      .Orderby(i => i.Policy)Di2015NewLine                      .Skip(endingRecord).Take(page)Di2015NewLine                      .ToList();Di2015NewLine
15439198Di2015UniqueSeparatorSELECT [t4].[test], [t4].[Name], [t4].[Policy], [t4].[Amount], [t4].[Date]Di2015NewLineFROM (Di2015NewLine    SELECT ROW_NUMBER() OVER (ORDER BY [t3].[Policy]) AS [ROW_NUMBER], [t3].[test], [t3].[Name], [t3].[Policy], [t3].[Amount], [t3].[Date]Di2015NewLine    FROM (Di2015NewLine        SELECT [t0].[Policy]Di2015NewLine        FROM Table1s AS [t0]Di2015NewLine        GROUP BY [t0].[Policy]Di2015NewLine        ) AS [t1]Di2015NewLine    OUTER APPLY (Di2015NewLine        SELECT TOP (1) 1 AS [test], [t2].[Name], [t2].[Policy], [t2].[Amount], [t2].[Date]Di2015NewLine        FROM Table1s AS [t2]Di2015NewLine        WHERE (([t1].[Policy] IS NULL) AND ([t2].[Policy] IS NULL)) OR (([t1].[Policy] IS NOT NULL) AND ([t2].[Policy] IS NOT NULL) AND ([t1].[Policy] = [t2].[Policy]))Di2015NewLine        ) AS [t3]Di2015NewLine    ) AS [t4]Di2015NewLineWHERE [t4].[ROW_NUMBER] BETWEEN @p0 + 1 AND @p0 + @p1Di2015NewLineORDER BY [t4].[ROW_NUMBER]Di2015NewLine
15439203Di2015UniqueSeparatorPerson
15439203Di2015UniqueSeparatorPerson
15439272Di2015UniqueSeparatorCancellationToken
15439272Di2015UniqueSeparatortoken.ThrowIfCancellationRequested()
15439367Di2015UniqueSeparatorList<string>
15439367Di2015UniqueSeparatorpublic static List<string> GetLinks()Di2015NewLine{Di2015NewLine    string query = string.Format("SELECT Link FROM Linkovi");Di2015NewLine    List<string> result = new List<string>();Di2015NewLine    try {Di2015NewLine        conn.Open();Di2015NewLine        command.CommandText = query;Di2015NewLine        SqlDataReader reader = command.ExecuteReader();Di2015NewLine        while (reader.Read()) {Di2015NewLine            result.Add(reader["Link"].ToString());Di2015NewLine        }Di2015NewLine        reader.Close();Di2015NewLine    } finally {Di2015NewLine        conn.Close();Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
15439367Di2015UniqueSeparatorRepeater
15439367Di2015UniqueSeparatorHyperLink
15439367Di2015UniqueSeparator<asp:Repeater ID="LinkDisplay" runat="server">Di2015NewLine<ItemTemplate>Di2015NewLine    <asp:HyperLink ID="TheLink" runat="server"Di2015NewLine        NavigateUrl='<%#Container.DataItem%>' Text='<%#Container.DataItem%>'>Di2015NewLine    </asp:HyperLink>Di2015NewLine</ItemTemplate>Di2015NewLine</asp:Repeater>Di2015NewLine
15439367Di2015UniqueSeparatorPage_Load
15439367Di2015UniqueSeparatorvoid Page_Load(object sender, EventArgs e) {Di2015NewLine    service1.WebServiceLinks a1 = new service1.WebServiceLinks();Di2015NewLine    LinkDisplay.DataSource = a1.GetLinks();Di2015NewLine    LinkDisplay.DataBind();Di2015NewLine}Di2015NewLine
15439510Di2015UniqueSeparatorPropertyInfo[] myProperties = c.GetType().GetProperties(BindingFlags.Public |Di2015NewLine                                                    BindingFlags.SetProperty |Di2015NewLine                                                    BindingFlags.Instance);Di2015NewLineDi2015NewLineforeach (PropertyInfo item in myProperties)Di2015NewLine{Di2015NewLine    if (item.CanRead)Di2015NewLine        Console.Write("Can read");Di2015NewLineDi2015NewLine    if (item.CanWrite)Di2015NewLine        Console.Write("Can write");Di2015NewLine}Di2015NewLine
15439597Di2015UniqueSeparatorvar mkeys = Regex.Match(logLine, @"Summary[^\\[]+\\[(?<mkeys>[^\\]]+\\]").Groups["mkeys"].ValueDi2015NewLine
15439799Di2015UniqueSeparator string path = System.String.Empty;Di2015NewLine if (image == true)Di2015NewLine     path = Server.MapPath("~/Files/Images") + e.FileName;Di2015NewLine elseDi2015NewLine     path = Server.MapPath("~/Files/Docs") + e.FileName;Di2015NewLine
15439876Di2015UniqueSeparator"00246 // For MOD/S3M/XM/IT/MID sequenced formats only."
15439938Di2015UniqueSeparatorEnumerable.Any()
15439938Di2015UniqueSeparatorforeach (var items in RowModels) {Di2015NewLine   if(items.GetType().GetProperties().Any(prop => prop.Name == "TRId") ) Di2015NewLine    {Di2015NewLine           // do something...Di2015NewLine    }Di2015NewLine}Di2015NewLine
15439938Di2015UniqueSeparatorforeach (var items in RowModels) {Di2015NewLine   if(items.GetType().GetProperty("TRId") != null) Di2015NewLine    {Di2015NewLine           // do something...Di2015NewLine    }Di2015NewLine}Di2015NewLine
15439938Di2015UniqueSeparatorRowModels
15439938Di2015UniqueSeparatorforeach (var items in RowModels.OfType<YourType>())Di2015NewLine{Di2015NewLine   // do somethingDi2015NewLine}Di2015NewLine
15439938Di2015UniqueSeparatorOfType<T>()
15439947Di2015UniqueSeparatorDropDownList[] adult=new DropDownList[6];Di2015NewLineDropDownList[] child = new DropDownList[6];Di2015NewLine
15440109Di2015UniqueSeparatorpublic class EmployeeDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string SureName { get; set; }Di2015NewLineDi2015NewLine    [ForeignKey("Company"), Required]Di2015NewLine    public int CompanyID { get; set; }Di2015NewLineDi2015NewLine    public virtual Company Company { get; set; }Di2015NewLine}Di2015NewLine
15440381Di2015UniqueSeparatorconst string Domain = "ServerAddress:389";Di2015NewLineconst string constrParts = @"OU=Users,DC=domain,DC=com";Di2015NewLineconst string Username = @"someusername";Di2015NewLinePrincipalContext principalContext = new PrincipalContext(ContextType.Domain, Domain, constrParts);Di2015NewLineUserPrincipal userPrincipal = UserPrincipal.FindByIdentity(principalContext,  username);Di2015NewLine
15440448Di2015UniqueSeparatorpublic class FooDi2015NewLine{Di2015NewLine    public event Action<string> Bar;Di2015NewLine    public Foo(Action<string> initialHandler)Di2015NewLine    {Di2015NewLine        Bar += initialHandler;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15440448Di2015UniqueSeparatornull
15440448Di2015UniqueSeparatorinitialHandler
15440706Di2015UniqueSeparatorPage_Unload
15440709Di2015UniqueSeparatorstring[] result = Regex.Split("test123tersre23", @"(?<=\\d)(?=[a-zA-Z])|(?<=[a-zA-Z])(?=\\d)");Di2015NewLine
15440801Di2015UniqueSeparatorInvoke
15440801Di2015UniqueSeparatorInvoke
15440801Di2015UniqueSeparatorInvoke
15440864Di2015UniqueSeparatorbyte[] digits = new byte[n];Di2015NewLine
15440864Di2015UniqueSeparatorfor(int i = 1; i <= n; i++)Di2015NewLine   digits[i-1] = (byte)i; // index is 0-basedDi2015NewLine
15440997Di2015UniqueSeparator[assembly:InternalsVisibleTo("NameOfYourUnitTestProject")]Di2015NewLine
15441166Di2015UniqueSeparatorvoid
15441166Di2015UniqueSeparatorTask
15441166Di2015UniqueSeparatorParseSpecific
15441166Di2015UniqueSeparatorawait QueryWebPage(v)
15441166Di2015UniqueSeparatorawait Task.Run(() => _handler.ParseSpecific(mUrls));Di2015NewLine
15441166Di2015UniqueSeparatorTask
15441166Di2015UniqueSeparatorTask.Run
15441166Di2015UniqueSeparatorpublic async void DoWork()Di2015NewLine{Di2015NewLine    RequestHandler _handler = new RequestHandler();Di2015NewLine    string[] mUrls;Di2015NewLine    await _handler.ParseSpecific(mUrls);Di2015NewLine    Console.WriteLine("Done...");Di2015NewLine}Di2015NewLine
15441166Di2015UniqueSeparatorpublic async TaskParseSpecific(string[] urls)Di2015NewLine{Di2015NewLine    foreach(string v in urls)Di2015NewLine    {Di2015NewLine        // Refactored for readability, although I'm not sure it reallyDi2015NewLine        // makes sense now that it's clearer! Are you sure this is whatDi2015NewLine        // you want?Di2015NewLine        var page = await QueryWebPage(v);Di2015NewLine        Queue.Add(new Query(page, false);Di2015NewLine    }Di2015NewLineDi2015NewLine    Queue.CompleteAdding();Di2015NewLine    await ConsumerTask;Di2015NewLine    await ParseAll(true);Di2015NewLine}Di2015NewLine
15441166Di2015UniqueSeparatorReinit
15441166Di2015UniqueSeparatorConsumerTask
15441166Di2015UniqueSeparatorConsume
15441262Di2015UniqueSeparatorTask.Factory.StartNew(StartJob(job.Id));Di2015NewLine
15441262Di2015UniqueSeparatorTask.Factory.StartNew(StartJob(job.Id), TaskCreationOptions.LongRunning);Di2015NewLine
15441351Di2015UniqueSeparatorjoin
15441351Di2015UniqueSeparatorvar orderedByIDList = from k in resultsDi2015NewLinejoin l in dataContext.VideosDi2015NewLineon k equals l.IdDi2015NewLineselect l;Di2015NewLine
15441351Di2015UniqueSeparatorvar myList = (from l in dataContext.VideosDi2015NewLinewhere results.Contains(l.ID)Di2015NewLineselect l).ToList(); //grab data and resolve to list or arrayDi2015NewLineDi2015NewLinevar orderedByIDList = from k in resultsDi2015NewLinejoin l in myListDi2015NewLineon k equals l.IdDi2015NewLineselect l; //result type IEnumerable<Video>Di2015NewLine
15441429Di2015UniqueSeparatorDataControlRowState
15441429Di2015UniqueSeparatorFlagsAttribute
15441429Di2015UniqueSeparatorRowState
15441429Di2015UniqueSeparatorDataControlRowState.Alternate
15441429Di2015UniqueSeparatorDataControlRowState.Edit
15441429Di2015UniqueSeparatorif
15441429Di2015UniqueSeparatorif ((e.Row.RowState & DataControlRowState.Edit) == DataControlRowState.Edit && e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine
15441429Di2015UniqueSeparatorEdit
15441488Di2015UniqueSeparatorpublic class StackOverflow_15441384Di2015NewLine{Di2015NewLine    const string XML = @"<StartLot>Di2015NewLine                               <fileCreationDate level=""7"">201301132210</fileCreationDate>Di2015NewLine                               <fmtVersion level=""7"">3.0</fmtVersion>Di2015NewLine                            </StartLot>";Di2015NewLine    public class StartLotDi2015NewLine    {Di2015NewLine        [XmlElement("fileCreationDate")]Di2015NewLine        public LevelAndValue FileCreationDate { get; set; }Di2015NewLine        [XmlElement("fmtVersion")]Di2015NewLine        public LevelAndValue FmtVersion { get; set; }Di2015NewLine    }Di2015NewLine    public class LevelAndValueDi2015NewLine    {Di2015NewLine        [XmlAttribute("level")]Di2015NewLine        public string Level { get; set; }Di2015NewLine        [XmlText]Di2015NewLine        public string Value { get; set; }Di2015NewLine    }Di2015NewLine    public static void Test()Di2015NewLine    {Di2015NewLine        XmlSerializer xs = new XmlSerializer(typeof(StartLot));Di2015NewLine        StartLot sl = (StartLot)xs.Deserialize(new MemoryStream(Encoding.UTF8.GetBytes(XML)));Di2015NewLine        Console.WriteLine("FCD.L = {0}", sl.FileCreationDate.Level);Di2015NewLine        Console.WriteLine("FCD.V = {0}", sl.FileCreationDate.Value);Di2015NewLine        Console.WriteLine("FV.L = {0}", sl.FmtVersion.Level);Di2015NewLine        Console.WriteLine("FV.V = {0}", sl.FmtVersion.Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15441492Di2015UniqueSeparatorstring path = @"\\\\server1\\folder\\child";Di2015NewLineDi2015NewLinevar uri = new Uri(path);Di2015NewLineDi2015NewLinestring newPath = @"\\\\server2" + uri.AbsolutePath.Replace('/', '\\\\');Di2015NewLineDi2015NewLinevar x = new Uri(newPath);Di2015NewLine
15441494Di2015UniqueSeparator//a[@id='UserLink']/text()
15441494Di2015UniqueSeparator//a[@id='PointLink']/text()
15441494Di2015UniqueSeparatortr
15441494Di2015UniqueSeparatorstring UserName = row.SelectSingleNode("td[@class='tbl_col1']/a[@id='UserLink']/text()").InnerText;Di2015NewLinestring Points = row.SelectSingleNode("td[@class='tbl_col2']/a[@id='PointLink']/text()").InnerText;Di2015NewLine
15441494Di2015UniqueSeparatorvar UserTable = doc.DocumentNode.SelectNodes("//div[@id='mainDiv']/table[@id='tbl']/tbody/tr");Di2015NewLineforeach (var row in UserTable)Di2015NewLine{Di2015NewLine    if (row.Attributes["data-source"] != null)Di2015NewLine    {Di2015NewLine        string Source = row.Attributes["data-source"].Value;Di2015NewLine        string UserName = row.SelectSingleNode("td[@class='tbl_col1']/a[@id='UserLink']/text()").InnerText;Di2015NewLine        string Points = row.SelectSingleNode("td[@class='tbl_col2']/a[@id='PointLink']/text()").InnerText;Di2015NewLine        Console.WriteLine(Source + "\\t" + UserName + "\\t" + Points);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15441574Di2015UniqueSeparatorTask<>
15441574Di2015UniqueSeparator public async void ButtonClick(object sender, RoutedEventArgs args)Di2015NewLine {Di2015NewLine     Connection result = await restClient.Connect(this.UserId.Text, this.Password.Text);Di2015NewLineDi2015NewLine      //... do something with resultDi2015NewLine }Di2015NewLine
15441574Di2015UniqueSeparatorasync
15441574Di2015UniqueSeparatorawait
15441574Di2015UniqueSeparatorTask<Connection>
15441574Di2015UniqueSeparatorConnection
15441574Di2015UniqueSeparatorAutoResetEvent
15441710Di2015UniqueSeparatorXmlArrayItem
15441710Di2015UniqueSeparator<DIDL-Lite .....>Di2015NewLine    <Items>Di2015NewLine       <item id="28" parentID="19" restricted="1">Di2015NewLine        ......Di2015NewLine       </item>Di2015NewLine       <item id="29" parentID="19" restricted="1">Di2015NewLine        ......Di2015NewLine       </item>Di2015NewLine    </Items>Di2015NewLine</DIDL-Lite>Di2015NewLine
15441710Di2015UniqueSeparator<Items>...</Items>
15441710Di2015UniqueSeparator<item>
15441710Di2015UniqueSeparator[XmlArrayItem("item", typeof(ServiceListTypeService), IsNullable = false)]Di2015NewLine
15441710Di2015UniqueSeparatorServiceListtypeService
15441710Di2015UniqueSeparator[XmlRoot("DIDL-Lite", Namespace = "urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/")]Di2015NewLinepublic class DIDLLiteDi2015NewLine{Di2015NewLine    [XmlElement("item")]Di2015NewLine    public ContainerItem Item { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class ContainerItemDi2015NewLine{Di2015NewLine    [XmlAttribute("id")]Di2015NewLine    public string id { get; set; }Di2015NewLineDi2015NewLine    [XmlAttribute("parentID")]Di2015NewLine    public string parentID { get; set; }Di2015NewLineDi2015NewLine    [XmlAttribute("restricted")]Di2015NewLine    public string restricted { get; set; }Di2015NewLineDi2015NewLine    [XmlAttribute("searchable")]Di2015NewLine    public string searchable { get; set; }Di2015NewLineDi2015NewLine    // you were missing these elements and their namespaceDi2015NewLineDi2015NewLine    [XmlElement(Namespace = "http://purl.org/dc/elements/1.1/")]Di2015NewLine    public string creator { get; set; }Di2015NewLine    [XmlElement(Namespace = "http://purl.org/dc/elements/1.1/")]Di2015NewLine    public string date { get; set; }Di2015NewLine    [XmlElement(Namespace = "http://purl.org/dc/elements/1.1/")]Di2015NewLine    public string title { get; set; }Di2015NewLine}Di2015NewLine
15441752Di2015UniqueSeparatorthis.box.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));Di2015NewLinethis.box.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));Di2015NewLine
15441752Di2015UniqueSeparatorthis.box.ColumnCount = 2;Di2015NewLinethis.box.RowCount = 2;Di2015NewLinethis.box.Controls.Add(this.chart, 0, 0);Di2015NewLinethis.box.Controls.Add(this.text, 0, 1);Di2015NewLineDi2015NewLinethis.box.SetColumnSpan(this.chart, 2);Di2015NewLineDi2015NewLinethis.text.Anchor = System.Windows.Forms.AnchorStyles.None;Di2015NewLine
15441752Di2015UniqueSeparatorthis.box.SetColumnSpan(this.text, 2);Di2015NewLine
15441868Di2015UniqueSeparatorSELECT ID FROM my_core.my_table WHERE rownum <= 1Di2015NewLine
15441868Di2015UniqueSeparatorthis: SELECT TOP N .... WHERE ...Di2015NewLine                 |Di2015NewLine                 +------------------------------+Di2015NewLine                                                vDi2015NewLineto:   SELECT       .... WHERE ... AND rownum <= NDi2015NewLine
15442034Di2015UniqueSeparatorShipmentReceiptLineItem
15442034Di2015UniqueSeparatorElement(...)
15442034Di2015UniqueSeparatorXDocument xdoc = XDocument.Load("FirstPart.xml");Di2015NewLineXNamespace tns = "urn:rosettanet:specification:interchange:ShipmentReceiptNotification:xsd:schema:02.01";Di2015NewLinexdoc.Root.Add(XDocument.Load("RepeatingPart.xml")Di2015NewLine                       .RootDi2015NewLine                       .Element(tns + "ShipmentReceiptLineItem")Di2015NewLine                       .Elements());Di2015NewLine
15442034Di2015UniqueSeparatorXDocument repeatingDoc = XDocument.Load("RepeatingPart.xml");Di2015NewLineXNamespace tns = "urn:rosettanet:specification:interchange:ShipmentReceiptNotification:xsd:schema:02.01";    Di2015NewLinevar elementsToAdd = repeatingDoc.RootDi2015NewLine                                .Element(tns + "ShipmentReceiptLineItem")Di2015NewLine                                .Elements());Di2015NewLinevar mainDoc = XDocument.Load("FirstPart.xml");Di2015NewLinemainDoc.Root.Add(elementsToAdd);Di2015NewLine
15442034Di2015UniqueSeparatorrepeatingDoc
15442133Di2015UniqueSeparatorDisplayFor
15442133Di2015UniqueSeparatorDisplayFor
15442133Di2015UniqueSeparatorHiddenFor
15442171Di2015UniqueSeparatorMp3FileReader
15442171Di2015UniqueSeparatorWaveFileWriter
15442171Di2015UniqueSeparatorMemoryStream mp3Buffered = new MemoryStream();Di2015NewLineusing (var responseStream = resp.GetResponseStream())Di2015NewLine{Di2015NewLine    byte[] buffer = new byte[65536];Di2015NewLine    int bytesRead = responseStream.Read(buffer, 0, buffer.Length);Di2015NewLine    while (bytesRead > 0)Di2015NewLine    {Di2015NewLine        mp3Buffered.Write(buffer, 0, bytesRead);Di2015NewLine        bytesRead = responseStream.Read(buffer, 0, buffer.Length);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinemp3Buffered.Position = 0;Di2015NewLineusing (var mp3Stream = new Mp3FileReader(mp3Buffered))Di2015NewLine{    Di2015NewLine    WaveFileWriter.CreateWaveFile("file.wav", mp3Stream);Di2015NewLine}Di2015NewLine
15442171Di2015UniqueSeparatorWaveFormatConversion
15442461Di2015UniqueSeparatorFile.Create
15442461Di2015UniqueSeparatorusing
15442461Di2015UniqueSeparatorFileMode.OpenOrCreate
15442578Di2015UniqueSeparatorvar resultList = MasterList.Where(x => x.id == textQuery.Text || x.en == textQuery.Text || x.fr == textQuery.Text || x.es == textQuery.Text).ToList();Di2015NewLine
15442597Di2015UniqueSeparatorGetList
15442597Di2015UniqueSeparatorIQueryable
15442597Di2015UniqueSeparatorGetAll
15442597Di2015UniqueSeparator_dbSet.AsQueryable()
15442597Di2015UniqueSeparatorDbSet<T>
15442597Di2015UniqueSeparatorIQueryable<T>
15442597Di2015UniqueSeparator_dbSet
15442597Di2015UniqueSeparatorDbContext
15442597Di2015UniqueSeparatorDbContext
15442597Di2015UniqueSeparator_dbContext
15442598Di2015UniqueSeparatorName
15442598Di2015UniqueSeparatorFrameworkElement
15442725Di2015UniqueSeparatorFile.ReadAllLines()
15442725Di2015UniqueSeparator        System.Console.WriteLine("users.ul exists: " + File.Exists("users.ul"));Di2015NewLineDi2015NewLine        // Check the status of users.ul. If it exists, fill the user dictionary with its data.Di2015NewLine        if (File.Exists("users.ul")) {Di2015NewLine            var lines = File.ReadAllLines("users.ul");Di2015NewLine            // Usernames are listed first in users.ul, and are followed by a period and then the password associated with that username.Di2015NewLine            var users = lines.Select(o => o.Split('.'))Di2015NewLine                        .Where(o => o.Length == 2)Di2015NewLine                        .Select(o => new User(o[0].Trim(), o[1].Trim());Di2015NewLineDi2015NewLine            System.Console.WriteLine("count: " + users.Count());Di2015NewLine        }Di2015NewLine
15442775Di2015UniqueSeparatorvar list = Enumerable.Range(1, n)Di2015NewLine                     .Select(i => new DerivedType {Di2015NewLine                                 x = "x" + i,Di2015NewLine                                 y = "y" + i,Di2015NewLine                                 z = "z" + iDi2015NewLine                             })Di2015NewLine                     .ToList<BaseType>();Di2015NewLine
15442775Di2015UniqueSeparatorvar list = Enumerable.Range(1, n)Di2015NewLine                     .Select(i => (BaseType) new DerivedType {Di2015NewLine                                 x = "x" + i,Di2015NewLine                                 y = "y" + i,Di2015NewLine                                 z = "z" + iDi2015NewLine                             })Di2015NewLine                     .ToList();Di2015NewLine
15442775Di2015UniqueSeparatorDerivedType
15442775Di2015UniqueSeparatornew List<BaseType>Di2015NewLine{Di2015NewLine    new DerivedType("x1", "y1", "z1"),Di2015NewLine    new DerivedType("x2", "y2", "z2"),Di2015NewLine    new DerivedType("x3", "y3", "z3"),Di2015NewLine    new DerivedType("x4", "y4", "z4"),Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15442904Di2015UniqueSeparatorAutoUpdateDotNET
15442914Di2015UniqueSeparatorKEYEVENTF_UNICODE
15442914Di2015UniqueSeparatork.type = (int)InputType.INPUT_KEYBOARD;Di2015NewLinek.ki.wScan = 'Ã¶';Di2015NewLinek.ki.wVk = 0;Di2015NewLinek.ki.dwFlags = (int)KEYEVENTF.UNICODE | (int)KEYEVENTF.KEYDOWN;Di2015NewLinek.ki.dwExtraInfo = GetMessageExtraInfo();Di2015NewLine
15442914Di2015UniqueSeparatorOem3
15442992Di2015UniqueSeparator"Copy to Output Directory"
15443227Di2015UniqueSeparatorpublic class Csv : IDisposableDi2015NewLine{Di2015NewLine    private StreamReader streadReader;Di2015NewLine    private StreamWriter streamWriter;Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        if (streadReader != null)Di2015NewLine        {Di2015NewLine            streadReader.Dispose();Di2015NewLine        }Di2015NewLineDi2015NewLine        if (streamWriter != null)Di2015NewLine        {Di2015NewLine            streamWriter.Dispose();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15443247Di2015UniqueSeparatorif (e.KeyChar=='.' && (obj.Text.IndexOf('.')>0 || obj.Text.Length==0))Di2015NewLine
15443365Di2015UniqueSeparator_sign
15443365Di2015UniqueSeparatorif ((this._sign ^ other._sign) < 0)Di2015NewLine    return this._sign >= 0 ? 1 : -1;Di2015NewLine
15443365Di2015UniqueSeparatorint
15443365Di2015UniqueSeparatorbyte
15443365Di2015UniqueSeparatorbool
15443365Di2015UniqueSeparatorInt16
15443415Di2015UniqueSeparatordatagridview
15443415Di2015UniqueSeparatorColumnHeaderMouseClick
15443415Di2015UniqueSeparator    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        dataGridView1.ColumnHeaderMouseClick += dataGridView1_ColumnHeaderMouseClick;Di2015NewLine    }Di2015NewLine
15443415Di2015UniqueSeparator    private void dataGridView1_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)Di2015NewLine    {Di2015NewLine        dataGridView1.ClearSelection();Di2015NewLine    }Di2015NewLine
15443553Di2015UniqueSeparatorSingle()
15443553Di2015UniqueSeparatorreturn query.Single();Di2015NewLine
15443553Di2015UniqueSeparatorSingleOrDefault()
15443553Di2015UniqueSeparatorreturn query.SingleOrDefault();Di2015NewLine
15443553Di2015UniqueSeparatorSingleOrDefault
15443553Di2015UniqueSeparatorSingle
15443553Di2015UniqueSeparatorFirst()
15443553Di2015UniqueSeparatorFirstOrDefault
15443761Di2015UniqueSeparatorStreamWriter
15443761Di2015UniqueSeparatorSystem.IO.StreamWriter file = new System.IO.StreamWriter("\\hereIam.txt");Di2015NewLinefile.WriteLine(lines);Di2015NewLine
15443762Di2015UniqueSeparatorAccountController
15443845Di2015UniqueSeparatorDirSearch
15443845Di2015UniqueSeparatorDirSearch
15443845Di2015UniqueSeparatorprivate void Button_Click_1(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    string sourcePath = @"C:\\temp\\";Di2015NewLine    this.DirSearch(sourcePath);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void DirSearch(string sDir) Di2015NewLine{Di2015NewLine    try Di2015NewLine    {Di2015NewLine        foreach (string f in Directory.GetFiles(sDir, txtFile.Text)) Di2015NewLine        {Di2015NewLine            lstFilesFound.Items.Add(f);Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (string d in Directory.GetDirectories(sDir)) Di2015NewLine        {Di2015NewLine            this.DirSearch(d);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (System.Exception excpt)Di2015NewLine    {Di2015NewLine        listBox1.Items.Add(ex.Message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15444019Di2015UniqueSeparatorchecked
15444019Di2015UniqueSeparatorunchecked
15444075Di2015UniqueSeparator    foreach (string file in Directory.EnumerateFiles(sourceFolder))Di2015NewLine    {Di2015NewLine        File.Copy(file, Path.Combine(destinationFolder, Path.GetFileName(file)), true);Di2015NewLine    }Di2015NewLine
15444091Di2015UniqueSeparatorroutes.MapHttpRoute(Di2015NewLine   name: "API Default",Di2015NewLine   routeTemplate: "api/{controller}/{id}",Di2015NewLine   defaults: new { id = RouteParameter.Optional }Di2015NewLine);Di2015NewLine
15444091Di2015UniqueSeparatorWebApiConfig.cs
15444091Di2015UniqueSeparatorApp_Start
15444150Di2015UniqueSeparatorentity
15444150Di2015UniqueSeparatordynamic
15444150Di2015UniqueSeparatorobject
15444150Di2015UniqueSeparatorobject
15444150Di2015UniqueSeparatordynamic
15444150Di2015UniqueSeparatorobject
15444150Di2015UniqueSeparatorALBUM
15444150Di2015UniqueSeparatorBOOK
15444150Di2015UniqueSeparatorId
15444150Di2015UniqueSeparatorvar entityId = entity.Id;Di2015NewLine
15444150Di2015UniqueSeparatorentity
15444150Di2015UniqueSeparatordynamic
15444150Di2015UniqueSeparatorobject
15444389Di2015UniqueSeparatorDoSomething(CancellationToken)
15444389Di2015UniqueSeparatorasync
15444389Di2015UniqueSeparatorawait
15444389Di2015UniqueSeparatorTask
15444389Di2015UniqueSeparatorTask
15444389Di2015UniqueSeparatorTask
15444723Di2015UniqueSeparator[isAuthorized(enRoles = new oRoles[]{oRoles.StudentLookup, oRoles.StaffLookup })]Di2015NewLine
15444723Di2015UniqueSeparator bool bFlag = enRoles.ToList().Any( r => AuthCheck.CheckUser(httpContext, r));Di2015NewLine
15444798Di2015UniqueSeparatorDoSomeDatabaseStuff
15444798Di2015UniqueSeparatorform.submit()
15444798Di2015UniqueSeparatorform
15444798Di2015UniqueSeparator$('#your-non-submit-button').click(function() {Di2015NewLine    $.ajax({Di2015NewLine        url: '@Url.Action("ChangeDBPost")',Di2015NewLine        contentType: 'application/json; charset=utf-8',Di2015NewLine        data: JSON.stringify({ 'parameter1': $('input[name="parameter1"]').val(), ... }),Di2015NewLine        success: function(result) {Di2015NewLine            $('form').submit();Di2015NewLine        }Di2015NewLine    });Di2015NewLine});Di2015NewLine
15444825Di2015UniqueSeparatorOpenFileDialog
15444825Di2015UniqueSeparatorusing (FileDialog fileDialog = new OpenFileDialog()) {Di2015NewLine  if (DialogResult.Ok == fileDialog.ShowDialog()) {Di2015NewLine    string fileName = fileDialog.FileName;Di2015NewLine    ...Di2015NewLine  }Di2015NewLine}Di2015NewLine
15444825Di2015UniqueSeparatorFolderBrowseDialog
15444825Di2015UniqueSeparatorvar dialog = new System.Windows.Forms.FolderBrowserDialog();Di2015NewLineSystem.Windows.Forms.DialogResult result = dialog.ShowDialog();Di2015NewLine
15444968Di2015UniqueSeparatorpublic static TResult DoStuffWithThings<TContainer, TResult>(Di2015NewLine    this TContainer container,Di2015NewLine    Func<TContainer, TResult> getSomething)Di2015NewLine
15444968Di2015UniqueSeparatorpublic static IntermediateResult<T> DoStuffWithThings<T>(this T container)Di2015NewLineDi2015NewLinepublic class IntermediateResult<T>Di2015NewLine{Di2015NewLine    public WithReturnType<TResult>()Di2015NewLine}Di2015NewLine
15444968Di2015UniqueSeparatorvar result = container.DoStuffWithThings().WithReturnType<Result>();Di2015NewLine
15445197Di2015UniqueSeparatorClass A
15445197Di2015UniqueSeparatorArray 1
15445197Di2015UniqueSeparatorArray 1
15445197Di2015UniqueSeparatorClass A
15445197Di2015UniqueSeparatorclass ADi2015NewLine{Di2015NewLineint[] array1;Di2015NewLineDi2015NewLinepublic int[] TheArrayDi2015NewLine  {Di2015NewLine    get { return array1; }Di2015NewLine    set { array1 = value; }Di2015NewLine  }Di2015NewLine}Di2015NewLine
15445197Di2015UniqueSeparatorclass BDi2015NewLineDi2015NewLinevoid myMethod() {Di2015NewLine int[] array2 = A.TheArray;Di2015NewLine}Di2015NewLine
15445235Di2015UniqueSeparator*
15445235Di2015UniqueSeparator/
15445235Di2015UniqueSeparator+
15445235Di2015UniqueSeparator-
15445235Di2015UniqueSeparator    [DllImport(@"Graphics.dll")]Di2015NewLine    public static extern vec2 operator * (vec2 a, vec2 other);Di2015NewLineDi2015NewLine    [DllImport(@"Graphics.dll")]Di2015NewLine    public static extern vec2 operator / (vec2 a, vec2 other);Di2015NewLine
15445323Di2015UniqueSeparatorvoid CheckBox_Click_1(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    var cb = sender as CheckBox;Di2015NewLine    dynamic itemVM = cb.DataContext;Di2015NewLine    var id = itemVM.Id;Di2015NewLine}Di2015NewLine
15445448Di2015UniqueSeparatorAny
15445448Di2015UniqueSeparatordictionary.Any(kvp=>kvp.Value.Contains("Hello"))Di2015NewLine
15445617Di2015UniqueSeparatorDouble key = Convert.ToDouble(Request.QueryString["key"]);Di2015NewLineDi2015NewLinevar query = from p in db.VERSIONs where p.vr_key == key select p;Di2015NewLine
15445766Di2015UniqueSeparatorrichTextBox1.ContextMenu = contextMenu ; Di2015NewLine
15445778Di2015UniqueSeparator  tryDi2015NewLine  {Di2015NewLine      ...Di2015NewLine  }Di2015NewLine  catch (Exception e)Di2015NewLine  {Di2015NewLine      foreach(String s in StringExtension.Wrap(e.Message, Console.Out.BufferWidth))Di2015NewLine      {Di2015NewLine          Console.WriteLine(s);Di2015NewLine      }Di2015NewLine  }Di2015NewLine
15445778Di2015UniqueSeparatorpublic class StringExtensionDi2015NewLine{Di2015NewLine    public static List<String> Wrap(string text, int maxLength)Di2015NewLine    ...Di2015NewLine
15445778Di2015UniqueSeparatorpublic static class StringExtension Di2015NewLine{Di2015NewLine    public static List<String> Wrap(this string text, int maxLength)Di2015NewLine    ...Di2015NewLine
15445778Di2015UniqueSeparator    foreach(String s in e.Message.Wrap(Console.Out.BufferWidth))Di2015NewLine    {Di2015NewLine        Console.WriteLine(s);Di2015NewLine    }Di2015NewLine
15446308Di2015UniqueSeparatorUser aUser = null;Di2015NewLinetry {Di2015NewLine            while (dbReader.Read())Di2015NewLine            {Di2015NewLine                if (dbReader.HasRows)Di2015NewLine                {Di2015NewLine                    MessageBox.Show("Login successful!");Di2015NewLine                    aUser = new User();Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    MessageBox.Show("Login failed");Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLinecatch (Exception e) {Di2015NewLine                        MessageBox.Show(e.ToString());Di2015NewLine                    }Di2015NewLinefinally {Di2015NewLine          return aUser;Di2015NewLine}Di2015NewLine
15446432Di2015UniqueSeparatorSetFocusOnError="true"Di2015NewLine
15446432Di2015UniqueSeparator <asp:RequiredFieldValidator ID="RequiredFieldValidator2" SetFocusOnError="true" ...Di2015NewLine
15446440Di2015UniqueSeparatorWebSecurity.CreateAccount("xx", "xx", true)Di2015NewLine
15446440Di2015UniqueSeparatorclass AccountsControllerDi2015NewLine{Di2015NewLine   WebSecurity.CreateAccount("xx", "xx", true);Di2015NewLine}Di2015NewLine
15446459Di2015UniqueSeparatorasync
15446526Di2015UniqueSeparatorconfirm(...)
15446526Di2015UniqueSeparator<script>Di2015NewLine$(function() {Di2015NewLine  $( "#dialog-confirm" ).dialog({Di2015NewLine    resizable: false,Di2015NewLine    height:140,Di2015NewLine    modal: true,Di2015NewLine    buttons: {Di2015NewLine      "Yes": function() {Di2015NewLine        // whatever you want to run when user clicks 'yes'.Di2015NewLine        ...Di2015NewLine        $( this ).dialog( "close" );Di2015NewLine      },Di2015NewLine      "No": function() {Di2015NewLine        $( this ).dialog( "close" );Di2015NewLine      }Di2015NewLine    }Di2015NewLine  });Di2015NewLine});Di2015NewLine</script>Di2015NewLine<div id="dialog-confirm">Di2015NewLine   ...Di2015NewLine</div>Di2015NewLine
15446526Di2015UniqueSeparatorfunction show() {Di2015NewLine    return confirm('Chnages you made will be lost. Do you want to continue?');Di2015NewLine}Di2015NewLine
15446570Di2015UniqueSeparatorpublic MyLine(ShapeContainer container) : base(container)Di2015NewLine{Di2015NewLine    label = new Label() { Text = "Ali_Sarshogh" };Di2015NewLine    label.Location = new Point(0, 0);Di2015NewLine    label.Size = new Size(100, 14);Di2015NewLine    this.Controls.Add(label);Di2015NewLine}Di2015NewLine
15446570Di2015UniqueSeparatorDesigner.cs
15446667Di2015UniqueSeparator        var list = new List<string[]>();Di2015NewLine        list.Add(new string[] { "1", "zzz", "z" });Di2015NewLine        list.Add(new string[] { "1", "aaa", "x" });Di2015NewLine        list.Add(new string[] { "1", "b", "y" });Di2015NewLine        list.Add(new string[] { "1", "c", "3" });Di2015NewLineDi2015NewLine        var orderedList = list.OrderBy(e => e[2]);Di2015NewLine
15446781Di2015UniqueSeparatorThread.Sleep
15446781Di2015UniqueSeparatorThread.Sleep
15446781Di2015UniqueSeparatorApplication.Run
15446781Di2015UniqueSeparatorThread.Sleep
15446781Di2015UniqueSeparatorThread.Sleep
15446781Di2015UniqueSeparatorThread.Sleep
15446781Di2015UniqueSeparatorMicrosoft.VisualBasic
15446781Di2015UniqueSeparatorfrmSplashScreen
15446807Di2015UniqueSeparatorpublic void button1_Click(object sender)Di2015NewLine{Di2015NewLine    List<string> files = listBoxFiles.Items.OfType<string>().ToList();Di2015NewLine    string key = textBoxFileToSearch.Text;Di2015NewLine    backgroundWorkerSearch.RunWorkerAsync(new Tupple<List<string>,string>(files, key));Di2015NewLine}Di2015NewLineDi2015NewLinevoid backgroundWorkerSearch_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine     var state = e.Argument as Tupple<List<string>,string>;Di2015NewLine     List<string> files = state.Item1;Di2015NewLine     string key = state.Item2;Di2015NewLine     // You can now access the needed data.Di2015NewLine     List<string> searchResult = new List<string>();Di2015NewLine     // ...Di2015NewLine     e.Result = searchResult;Di2015NewLine}Di2015NewLineDi2015NewLinevoid backgroundWorkerSearch_RunWorkerCompleted(RunWorkerCompletedEventArgs e)Di2015NewLine{Di2015NewLine     List<string> searchResult = e.Result;Di2015NewLine     // Show result in the UI thread.Di2015NewLine} Di2015NewLine
15446921Di2015UniqueSeparator.ShowDialog()
15446921Di2015UniqueSeparatorDialogResult
15446921Di2015UniqueSeparatorShow()
15446921Di2015UniqueSeparatorupdatestatus
15446921Di2015UniqueSeparatorupdatestatus
15446921Di2015UniqueSeparatorupdatestatus
15446921Di2015UniqueSeparatorUpdateStatus
15446921Di2015UniqueSeparatorpublic MainMovement : FormDi2015NewLine{Di2015NewLine    public event EventHandler Updated;Di2015NewLine    private void OnUpdateStatus()Di2015NewLine    {Di2015NewLine        if (Updated != null)Di2015NewLine        {Di2015NewLine            Updated(this, new EventArgs());Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private String updatestatus;Di2015NewLine    public String UpdateStatusDi2015NewLine    {Di2015NewLine        get { return updatestatus; }Di2015NewLine        private set Di2015NewLine        {Di2015NewLine            updatestatus = value;Di2015NewLine            OnUpdateStatus();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // rest of your child form code Di2015NewLine}Di2015NewLineDi2015NewLinepublic ParentForm : FormDi2015NewLine{Di2015NewLine    public void MethodInYourExample()Di2015NewLine    {Di2015NewLine        // other code?Di2015NewLine        MainMovement child = new MainMovement(new_dat, required_time, number);Di2015NewLine        child.Updated += ChildUpdated;Di2015NewLine        child.TopLevel = false;Di2015NewLine        this.pnlmain.Controls.Add(child);Di2015NewLine        child.Show();Di2015NewLine        child.BringToFront();Di2015NewLine    }Di2015NewLineDi2015NewLine    void ChildUpdated(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var child = sender as MainMovement;Di2015NewLine        string updatingc = child.UpdateStatus;Di2015NewLine        //rest of your codeDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
15446996Di2015UniqueSeparatorclass="content-b"
15446996Di2015UniqueSeparatorcontet-b
15446996Di2015UniqueSeparatorNextSibling
15446996Di2015UniqueSeparatorforeach
15446996Di2015UniqueSeparatorvar nodes = bodyNode.SelectNodes("//div[@class='contet-b']").ToList();Di2015NewLinefor( int i =0; i < nodes.Count; i++)Di2015NewLine{Di2015NewLine    var link = nodes[i];Di2015NewLine    if (link.InnerText.Contains("Name"))Di2015NewLine    {Di2015NewLine        textBox1.Text += "Name : ";Di2015NewLine        if (i + 1 < nodes.Count)Di2015NewLine        {Di2015NewLine            // append the value of next matching `div` nodeDi2015NewLine            textBox1.Text += nodes[i + 1].InnerText.Trim();Di2015NewLine            i++; // skip this nodeDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15447228Di2015UniqueSeparatorIXmlSerializable
15447228Di2015UniqueSeparatornew
15447228Di2015UniqueSeparatorpublic class SomethingDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLineDi2015NewLine    public string Text { get; set; }Di2015NewLineDi2015NewLine    public IEnumerable<string> Colors { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MySerializableSomething : Something, IXmlSerializableDi2015NewLine{Di2015NewLine    public new List<string> Colors { get; set; }Di2015NewLineDi2015NewLine    public MySerializableSomething()Di2015NewLine    {Di2015NewLine        Colors = new List<string>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public XmlSchema GetSchema()Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ReadXml(XmlReader reader)Di2015NewLine    {Di2015NewLine        while (reader.Read())Di2015NewLine        {Di2015NewLine            switch (reader.LocalName)Di2015NewLine            {Di2015NewLine                case "Id": Id = reader.ReadElementContentAsInt(); break;Di2015NewLine                case "Text": Text = reader.ReadElementContentAsString(); break;Di2015NewLine                case "Color": Colors.Add(reader.ReadElementContentAsString()); break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteXml(XmlWriter writer)Di2015NewLine    {Di2015NewLine        writer.WriteElementString("Id", Id.ToString());Di2015NewLine        writer.WriteElementString("Text", Text);Di2015NewLineDi2015NewLine        writer.WriteStartElement("Colors");Di2015NewLineDi2015NewLine        foreach (var color in Colors)Di2015NewLine        {Di2015NewLine            writer.WriteElementString("Color", color);Di2015NewLine        }Di2015NewLineDi2015NewLine        writer.WriteEndElement();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15447228Di2015UniqueSeparatorIEnumerable<string>
15447270Di2015UniqueSeparatorAction
15447270Di2015UniqueSeparatorAction
15447270Di2015UniqueSeparatorFunc<string>
15447270Di2015UniqueSeparatorpublic static string GetSource(WebRequest request, Func<string> failureCallback) {Di2015NewLine    // DOING WORK HERE WITH REQUESTDi2015NewLine    if(!(WORK IS SUCCESSFULL))Di2015NewLine    {Di2015NewLine        return failureCallback();Di2015NewLine    }Di2015NewLine    return "";Di2015NewLine}Di2015NewLine
15447270Di2015UniqueSeparatorpublic static string GetFoo() {Di2015NewLine    string source = GameInfoUtil.GetSource(repairRequest, () => {Di2015NewLine        return "0"; // this line gives errorDi2015NewLine    });Di2015NewLine}Di2015NewLine
15447270Di2015UniqueSeparatorpublic static string GetFoo() {Di2015NewLine    string source = GameInfoUtil.GetSource(repairRequest, XXXYYYZZZ);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static string XXXYYYZZZ()Di2015NewLine{Di2015NewLine    return "0";Di2015NewLine}Di2015NewLine
15447270Di2015UniqueSeparatorreturn "0"
15447298Di2015UniqueSeparatornull
15447298Di2015UniqueSeparatorDataContext
15447298Di2015UniqueSeparatorDbContext
15447298Di2015UniqueSeparatorpublic class DataInitializer : DropCreateDatabaseAlways<DataContext>Di2015NewLine{Di2015NewLine    // optionally override Seed methodDi2015NewLine}Di2015NewLine
15447298Di2015UniqueSeparatorDatabase.SetInitializer(new DataInitializer());Di2015NewLine
15447298Di2015UniqueSeparatorDropCreateDatabaseIfModelChanges
15447473Di2015UniqueSeparator=
15447473Di2015UniqueSeparator#
15447473Di2015UniqueSeparator<asp:TemplateField HeaderText='<%# Application["Actions"].ToString() %>'>Di2015NewLine
15447573Di2015UniqueSeparatorthis.marjaTableAdapter.FillBy(this.bankDataSet10.marja);Di2015NewLine
15447742Di2015UniqueSeparator@{ var groups = lst.GroupBy(x => x.Value); }Di2015NewLineDi2015NewLine@foreach (var group in groups)Di2015NewLine{Di2015NewLine    var aliasString = String.Join(",", group.Select(x => x.Alias));Di2015NewLine    <p>@aliasString</p>Di2015NewLine    <p>- @group.Key</p>Di2015NewLine}Di2015NewLine
15447924Di2015UniqueSeparatorpublic Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            //navigate to you destination Di2015NewLine            webBrowser1.Navigate("https://www.certiport.com/portal/SSL/Login.aspx");Di2015NewLine        }Di2015NewLine        bool is_sec_page = false;Di2015NewLine        private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine        {Di2015NewLine            if (!is_sec_page)Di2015NewLine            {Di2015NewLine                //get page element with idDi2015NewLine                webBrowser1.Document.GetElementById("c_Username").InnerText = "username";Di2015NewLine                webBrowser1.Document.GetElementById("c_Password").InnerText = "pass";Di2015NewLine                //login in to account(fire a login button promagatelly)Di2015NewLine                webBrowser1.Document.GetElementById("c_LoginBtn_c_CommandBtn").InvokeMember("click");Di2015NewLine                is_sec_page = true;Di2015NewLine            }Di2015NewLine            //secound page(if correctly aotanticateDi2015NewLine            elseDi2015NewLine            {Di2015NewLine                //intract with sec page elements with theire ids and so onDi2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine
15447924Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine     webBrowser1.Navigate(new Uri("https://www.certiport.com/portal/SSL/Login.aspx"));Di2015NewLine            }Di2015NewLine            bool is_sec_page = false;Di2015NewLine            mshtml.HTMLDocument htmldoc;Di2015NewLine            private void webBrowser1_LoadCompleted(object sender, NavigationEventArgs e)Di2015NewLine            {Di2015NewLine                htmldoc = webBrowser1.Document as mshtml.HTMLDocument;Di2015NewLine                if (!is_sec_page)Di2015NewLine                {Di2015NewLine                    //get page element with idDi2015NewLine                    htmldoc.getElementById("c_Username").innerText = "username";Di2015NewLine                    //orDi2015NewLine                    //htmldoc.getElementById("c_Username")..SetAttribute("value", "username");Di2015NewLine                    htmldoc.getElementById("c_Password").innerText = "pass";Di2015NewLine                    //login in to account(fire a login button promagatelly)Di2015NewLine                    htmldoc.getElementById("c_LoginBtn_c_CommandBtn").InvokeMember("click");Di2015NewLine                    is_sec_page = true;Di2015NewLine                }Di2015NewLine                //secound page(if correctly aotanticateDi2015NewLine                elseDi2015NewLine                {Di2015NewLine                    //intract with sec page elements with theire ids and so onDi2015NewLine                }Di2015NewLine            }Di2015NewLine
15448041Di2015UniqueSeparatorstring
15448041Di2015UniqueSeparatorfloat
15448041Di2015UniqueSeparatorWhere(p =>p.NapsaRate.Equals(txtnapsaserach.Text))Di2015NewLine
15448041Di2015UniqueSeparatorprivate void txtnapsaserach_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     float value;Di2015NewLine     if (!float.TryParse(txtnapsaserach.Text, out value))Di2015NewLine         return; // return if text cannot be parsed as float numberDi2015NewLineDi2015NewLine     if (value > 0)Di2015NewLine     {Di2015NewLine        var napsatabs = napsaTableBindingSource.List as List<NapsaTable>;Di2015NewLine        napsaTableBindingSource.DataSource = Di2015NewLine            napsatabs.Where(p =>p.NapsaRate == value).ToList();Di2015NewLine     }Di2015NewLine}Di2015NewLine
15448041Di2015UniqueSeparatorpublic override bool Equals(object obj)Di2015NewLine{Di2015NewLine    if (!(obj is float))Di2015NewLine    {Di2015NewLine        return false; // your case if obj is stringDi2015NewLine    }Di2015NewLine    float f = (float) obj;Di2015NewLine    return ((f == this) || (IsNaN(f) && IsNaN(this)));Di2015NewLine}Di2015NewLine
15448285Di2015UniqueSeparatorvar _result =   from r1 in dtResults.AsEnumerable()Di2015NewLine                group r1 by newDi2015NewLine                {Di2015NewLine                    ID = r1.Field<int>("ID"),Di2015NewLine                    Age = r1.Field<int>("Age"),Di2015NewLine                    LastName =  r1.Field<int>("LastName"),Di2015NewLine                    FirstName = r1.Field<int>("FirstName"),Di2015NewLine                    Sex =  r1.Field<int>("Sex"),Di2015NewLine                    Class =  r1.Field<int>("class"),Di2015NewLine                    Father_Name =  r1.Field<int>("Father_Name"),Di2015NewLine                    Mother_Name =  r1.Field<int>("Mother_Name")Di2015NewLine                } into gDi2015NewLine                select newDi2015NewLine                {Di2015NewLine                    ID = g.Key.ID,Di2015NewLine                    Age = g.Key.Age,Di2015NewLine                    LastName =  g.Key.LastName,Di2015NewLine                    FirstName = g.Key.FirstName,Di2015NewLine                    Sex =  g.Key.Sex,Di2015NewLine                    Class =  g.Key.Class,Di2015NewLine                    Father_Name =  g.Key.Father_Name,Di2015NewLine                    Mother_Name =  g.Key.Mother_Name,Di2015NewLine                    TotalMark = g.Sum(x => x.Field<int>("Marks"))Di2015NewLine                }Di2015NewLine
15448326Di2015UniqueSeparatorpublic class PostDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public int AuthorId { get; set; }Di2015NewLineDi2015NewLine    public string AuthorFirstName { get; set; }Di2015NewLine    public string AuthorLastName { get; set; }Di2015NewLine    public string PostText { get; set; }Di2015NewLine}Di2015NewLine
15448621Di2015UniqueSeparatorVALUESDi2015NewLine(   @CalligraphyNeeded, @Comments , @NameEnglish Di2015NewLine   ,@JobTitleEnglish , @NameArabic , @JobTitleArabicDi2015NewLine   ,@BOBOX , @HomePhoneNumber Di2015NewLine   ,@FAXNumber , @OfficePhoneNumber , @MobileNumberDi2015NewLine   ,@Email  Di2015NewLine)Di2015NewLine
15448643Di2015UniqueSeparatorif (dReader.Read()){  Di2015NewLine
15448643Di2015UniqueSeparatorif (dReader.HasRows){Di2015NewLine
15448643Di2015UniqueSeparatorRead()
15448643Di2015UniqueSeparatorif
15448643Di2015UniqueSeparatorRead()
15448643Di2015UniqueSeparatorwhile
15448643Di2015UniqueSeparatorHasRows
15448716Di2015UniqueSeparator  switch (ArcType)Di2015NewLine        {Di2015NewLine            case ArcType.Horizantal :Di2015NewLine                g.DrawArc(Pens.Black, 0, 15, 15, 15, 0, -180); Di2015NewLine                break; Di2015NewLine            case ArcType.Vertical:Di2015NewLine                g.DrawArc(Pens.Black, 0, 15, 15,15, -90,180);                    Di2015NewLine                break;Di2015NewLine        } Di2015NewLine
15448749Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "BlogPostDetails",Di2015NewLine    "posts/{id}/{title}",Di2015NewLine    new { controller = "Posts", action = "Details" }Di2015NewLine);Di2015NewLine
15448749Di2015UniqueSeparatortitle
15448749Di2015UniqueSeparator// /Models/BlogPost.csDi2015NewLinepublic class BlogPostDi2015NewLine{Di2015NewLine    public string Heading { get; set; }Di2015NewLine    public string Text { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine// /Controllers/PostsControllerDi2015NewLinepublic class PostsController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Details(string id)Di2015NewLine    {Di2015NewLine        BlogPost model = GetModel(id);Di2015NewLineDi2015NewLine        if (model == null)Di2015NewLine            return new HttpNotFoundResult();Di2015NewLineDi2015NewLine        return View(model);Di2015NewLine    }Di2015NewLineDi2015NewLine    private BlogPost GetModel(string blogPostId)Di2015NewLine    {Di2015NewLine        // Getting blog post with the given Id from the databaseDi2015NewLine    }Di2015NewLine}Di2015NewLine
15448749Di2015UniqueSeparator@model [Root namespace].Models.BlogPost;Di2015NewLineDi2015NewLine<article>Di2015NewLine    <h2>@Model.Heading</h2>Di2015NewLine    <p>@Model.Text</p>Di2015NewLine</article>Di2015NewLine
15448823Di2015UniqueSeparatorORDER BY
15448823Di2015UniqueSeparator<direct_select_statement:multiple_rows> ::=Di2015NewLine    <query_expression> [ <order_by_clause> ]Di2015NewLine
15448823Di2015UniqueSeparator<query_expression> ::= <non-join_query_expression> | <joined_table>Di2015NewLine
15448823Di2015UniqueSeparatorUNION
15448823Di2015UniqueSeparator<non-join_query_expression>    ::= Di2015NewLine     <non-join_query_term>Di2015NewLine |     <query_expression> UNION [ ALL ] [ <corresponding_spec> ] <query_term>Di2015NewLine |     <query_expression> EXCEPT [ ALL ] [ <corresponding_spec> ] <query_term>Di2015NewLine
15448823Di2015UniqueSeparatorORDER BY
15448823Di2015UniqueSeparatorUNION ALL
15448823Di2015UniqueSeparatorUNION
15448829Di2015UniqueSeparatorlblnoOfStudents.Text = counter.ToString();Di2015NewLine
15448829Di2015UniqueSeparator+=
15448829Di2015UniqueSeparatorlblnoOfStudents.Text += counter.ToString();Di2015NewLine
15448897Di2015UniqueSeparator        SmtpClient SmtpServer = new SmtpClient("smtp.live.com");Di2015NewLine        var mail = new MailMessage();Di2015NewLine        mail.From = new MailAddress("email@hotmail.com");Di2015NewLine        mail.To.Add("ToGmail.com");Di2015NewLine        mail.Subject = "Your Sub";Di2015NewLine        mail.IsBodyHtml = true;Di2015NewLine        string htmlBody;Di2015NewLine        htmlBody = "HTML code";Di2015NewLine        mail.Body = htmlBody;Di2015NewLine        SmtpServer.Port = 587;Di2015NewLine        SmtpServer.UseDefaultCredentials = false;Di2015NewLine        SmtpServer.Credentials = new System.Net.NetworkCredential("email@hotmail.com", "YourPassword");Di2015NewLine        SmtpServer.EnableSsl = true;Di2015NewLine        SmtpServer.Send(mail);Di2015NewLine
15448905Di2015UniqueSeparatorIt.IsAny<>()
15448905Di2015UniqueSeparatormockLessonplannerAFactory.Setup(s => s.Create(It.IsAny<DateTime>(), It.IsAny<DateTime>(), It.IsAny<IEnumerable<TimeTable>>(), It.IsAny<TimeTable.WeekType>(), It.IsAny<DayOfWeek>(), null)).Returns(periods);Di2015NewLine
15448905Di2015UniqueSeparatorIt.IsAny<>()
15449131Di2015UniqueSeparator[TypeConverter(typeof (LengthConverter))]Di2015NewLinepublic double HeightDi2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine    return (double) this.GetValue(FrameworkElement.HeightProperty);Di2015NewLine  }Di2015NewLine  setDi2015NewLine  {Di2015NewLine    this.SetValue(FrameworkElement.HeightProperty, (object) value);Di2015NewLine  }Di2015NewLine}Di2015NewLine
15449131Di2015UniqueSeparator[TypeConverter(typeof (LengthConverter))]Di2015NewLinepublic double ContentHeightDi2015NewLine{Di2015NewLine    get { return GetValue(ContentHeightProperty); }Di2015NewLine    set { SetValue(ContentHeightProperty, value); }Di2015NewLine}Di2015NewLine
15449157Di2015UniqueSeparatorbool isChecked = ((CheckBox)row.FindControl("chkSelect")).Checked;Di2015NewLine
15449157Di2015UniqueSeparatorbool isChecked = ((System.Web.UI.HtmlControls.HtmlInputCheckBox)grd_proforma_bill.HeaderRow.FindControl("Checkbox2")).Checked;Di2015NewLine
15449159Di2015UniqueSeparatorbuilder.RegisterType<ProductService>().As<IProductService>();Di2015NewLine
15449159Di2015UniqueSeparatorIProductService
15449159Di2015UniqueSeparatorProductService
15449159Di2015UniqueSeparatorIProductService
15449159Di2015UniqueSeparatorProductService
15449159Di2015UniqueSeparatorusing (var container = builder.Build())Di2015NewLine{Di2015NewLine    container.Resolve<IProductService>().DoSomething();Di2015NewLine}Di2015NewLine
15449159Di2015UniqueSeparatorResolve<ProductService>
15449159Di2015UniqueSeparatorbuilder.RegisterType<ProductService>().AsSelf();Di2015NewLine
15449236Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    // New instance fieldDi2015NewLine    private string _path = null;Di2015NewLineDi2015NewLine    private void OnBrowseFileClick(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        // Notice the use of the instance fieldDi2015NewLine        _path = OpenFile(); Di2015NewLine    }Di2015NewLineDi2015NewLine    // OpenFile implementation here...Di2015NewLineDi2015NewLine    private void btnCreateReport_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        string filename = "st_NodataSet.xls"; //Dummy DataDi2015NewLine        string functionName = "functionName"; //Dummy DataDi2015NewLineDi2015NewLine        AnalyzerCore.ViewModel.ReportGeneratorVM reportGeneratorVM = new AnalyzerCore.ViewModel.ReportGeneratorVM();Di2015NewLine        // Reuse the instance field hereDi2015NewLine        reportGeneratorVM.ReportGenerator(filename, functionName, _path); Di2015NewLine    }Di2015NewLine}Di2015NewLine
15449336Di2015UniqueSeparatortempItems.OrderBy(i => i.Distance)Di2015NewLine         .Take(20)Di2015NewLine         .ToList()Di2015NewLine         .ForEach(z => chemists.Add(z));Di2015NewLine
15449336Di2015UniqueSeparatorvar items = tempItems.OrderBy(i => i.Distance).Take(20);Di2015NewLineforeach(var item in items)Di2015NewLine{Di2015NewLine    chemists.Add(item);Di2015NewLine}Di2015NewLine
15449479Di2015UniqueSeparatorpublic class Storage Di2015NewLine{Di2015NewLine   private Dictionary<Key, DomainObject> dict;Di2015NewLineDi2015NewLine   public Storage()Di2015NewLine   {Di2015NewLine      dict = new Dictionary<Key, DomainObject>(Key.Comparer.Instance)Di2015NewLine   }Di2015NewLineDi2015NewLine   public DomainObject Get(uint a, uint b)Di2015NewLine   {Di2015NewLine      DomainObject obj;Di2015NewLine      dict.TryGetValue(new Key(a,b), out obj);Di2015NewLine      return obj;Di2015NewLine   }Di2015NewLineDi2015NewLine   internal struct Key Di2015NewLine   {Di2015NewLine       internal readonly uint a;Di2015NewLine       internal readonly uint b;Di2015NewLineDi2015NewLine       public Key(uint a, uint b)Di2015NewLine       {Di2015NewLine          this.a = a;Di2015NewLine          this.b = b;Di2015NewLine       }     Di2015NewLineDi2015NewLine       internal class Comparer : IEqualityComparer<Key>Di2015NewLine       {Di2015NewLine           internal static readonly Comparer Instance = new Comparer();Di2015NewLine           private Comparer(){}Di2015NewLineDi2015NewLine           public bool Equals(Key x, Key y)Di2015NewLine           {  Di2015NewLine               return x.a == y.a && x.b == y.b;Di2015NewLine           }  Di2015NewLineDi2015NewLine           public int GetHashCode(Key x)Di2015NewLine           {    Di2015NewLine              return (int)((x.a & 0xffff) << 16) | (x.b & 0xffff));Di2015NewLine           }Di2015NewLine       } Di2015NewLine   }  Di2015NewLine}Di2015NewLine
15449539Di2015UniqueSeparatorlong
15449539Di2015UniqueSeparatorDictionary
15449539Di2015UniqueSeparatorDictionary<string, object>
15449539Di2015UniqueSeparatorobject o = dict["wantedid"];Di2015NewLineif (o is long)Di2015NewLine{Di2015NewLine    long wantedid = (long)o;Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
15449539Di2015UniqueSeparatorlong
15449539Di2015UniqueSeparatorDictionary<string, long>
15449851Di2015UniqueSeparator[Serializable()]Di2015NewLinepublic class CameraDi2015NewLine{Di2015NewLine    public string name;Di2015NewLine    public int index;Di2015NewLine    public double distance;Di2015NewLine    public List<string> CameraList { get; set; }Di2015NewLineDi2015NewLine    private GMarkerGoogle _marker;Di2015NewLine    [XmlIgnore()]Di2015NewLine    public GMarkerGoogle MarkerDi2015NewLine    {Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _marker = value;Di2015NewLine            MarkerPosition = _marker.position;Di2015NewLine            MarkerRotation = _marker.rotation;Di2015NewLine        }Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (_marker == null)Di2015NewLine            {Di2015NewLine                _marker = new GMarkerGoogle(MarkerPosition, MarkerRotation);Di2015NewLine            }Di2015NewLineDi2015NewLine            return _marker;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public double MarkerPosition { get; set; }Di2015NewLine    public double MarkerRotation { get; set; }Di2015NewLineDi2015NewLine    public Camera()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
15449969Di2015UniqueSeparatorGetColumnWidths
15449969Di2015UniqueSeparatorGetRowHeights
15449969Di2015UniqueSeparatorPoint? GetRowColIndex(TableLayoutPanel tpl, Point point)Di2015NewLine{Di2015NewLine    if (point.X > tlp.Width || point.Y > tlp.Height)Di2015NewLine        return null;Di2015NewLineDi2015NewLine    int w = tlp.Width;Di2015NewLine    int h = tlp.Height;Di2015NewLine    int[] widths = tlp.GetColumnWidths();Di2015NewLineDi2015NewLine    int i;Di2015NewLine    for (i = widths.Length - 1; i >= 0 && point.X < w; i--)Di2015NewLine        w -= widths[i];Di2015NewLine    int col = i + 1;Di2015NewLineDi2015NewLine    int[] heights = tlp.GetRowHeights();Di2015NewLine    for (i = heights.Length - 1; i >= 0 && point.Y < h; i--)Di2015NewLine        h -= heights[i];Di2015NewLineDi2015NewLine    int row = i + 1;Di2015NewLineDi2015NewLine    return new Point(col, row);Di2015NewLine}Di2015NewLine
15449969Di2015UniqueSeparatorprivate void tableLayoutPanel1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var cellPos = GetRowColIndex(Di2015NewLine        tableLayoutPanel1,Di2015NewLine        tableLayoutPanel1.PointToClient(Cursor.Position));Di2015NewLine}Di2015NewLine
15449974Di2015UniqueSeparatorItems
15449974Di2015UniqueSeparatorChildren
15449974Di2015UniqueSeparator<UserControl.DataContext>Di2015NewLine    <local:NodeViewModel  />Di2015NewLine</UserControl.DataContext>Di2015NewLine<Grid>Di2015NewLine    <Grid.Resources>Di2015NewLine        <DataTemplate x:Key="notSelectedItemTemplate" DataType="{x:Type local:NodeViewModel}" >Di2015NewLine            <Grid>Di2015NewLine                <Grid.RowDefinitions>Di2015NewLine                    <RowDefinition Height="20*" />Di2015NewLine                </Grid.RowDefinitions>Di2015NewLine                <Grid.ColumnDefinitions>Di2015NewLine                    <ColumnDefinition Width="100*" />Di2015NewLine                    <ColumnDefinition Width="100*" />Di2015NewLine                    <ColumnDefinition Width="100*" />Di2015NewLine                </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine                <TextBlock Grid.Column="0" Text="{Binding Id}"></TextBlock>Di2015NewLine                <TextBlock Grid.Column="1" Text="----"></TextBlock>Di2015NewLine                <TextBlock Grid.Column="2" Text="{Binding Name}"></TextBlock>Di2015NewLine            </Grid>Di2015NewLine        </DataTemplate>Di2015NewLineDi2015NewLine        <DataTemplate x:Key="selectedItemTemplate" DataType="{x:Type local:NodeViewModel}">Di2015NewLine            <Grid Height="Auto" Background="SkyBlue" TextElement.Foreground="Black">Di2015NewLine                <Grid.RowDefinitions>Di2015NewLine                    <!--<RowDefinition Height="Auto"></RowDefinition>-->Di2015NewLine                    <RowDefinition Height="Auto"></RowDefinition>Di2015NewLine                    <RowDefinition Height="Auto"></RowDefinition>Di2015NewLine                </Grid.RowDefinitions>Di2015NewLine                <Grid.ColumnDefinitions>Di2015NewLine                    <ColumnDefinition Width="20"></ColumnDefinition>Di2015NewLine                    <ColumnDefinition Width="Auto"></ColumnDefinition>Di2015NewLine                </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine                <!--<TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding Id}"></TextBlock>-->Di2015NewLine                <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding Name}"></TextBlock>Di2015NewLine                <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding Description}"></TextBlock>Di2015NewLine            </Grid>Di2015NewLine        </DataTemplate>Di2015NewLine    </Grid.Resources>Di2015NewLineDi2015NewLine    <TreeView Height="Auto" HorizontalAlignment="Stretch" Margin="10" VerticalAlignment="Stretch" Width="Auto" ItemsSource="{Binding Children}">Di2015NewLine        <TreeView.Resources>Di2015NewLine            <!-- remove normal selected item background -->Di2015NewLine            <SolidColorBrush Color="Transparent" x:Key="{x:Static SystemColors.HighlightBrushKey}"/>Di2015NewLine        </TreeView.Resources>Di2015NewLine        <TreeView.ItemContainerStyle>Di2015NewLine            <Style TargetType="{x:Type TreeViewItem}">Di2015NewLine                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />Di2015NewLine            </Style>Di2015NewLine        </TreeView.ItemContainerStyle>Di2015NewLine        <TreeView.ItemTemplate>Di2015NewLine            <HierarchicalDataTemplate DataType="{x:Type local:NodeViewModel}" ItemsSource="{Binding Children}">Di2015NewLine                <ContentPresenter x:Name="item" ContentTemplate="{StaticResource notSelectedItemTemplate}" />Di2015NewLine                <HierarchicalDataTemplate.Triggers>Di2015NewLine                    <DataTrigger Binding="{Binding IsSelected}" Value="True">Di2015NewLine                        <Setter TargetName="item" Property="ContentTemplate" Value="{StaticResource selectedItemTemplate}" />Di2015NewLine                    </DataTrigger>Di2015NewLine                </HierarchicalDataTemplate.Triggers>Di2015NewLine            </HierarchicalDataTemplate>Di2015NewLine        </TreeView.ItemTemplate>Di2015NewLine    </TreeView>Di2015NewLine</Grid>Di2015NewLine
15449974Di2015UniqueSeparatorpublic class NodeViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    private void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (this.PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLineDi2015NewLine    private ObservableCollection<NodeViewModel> _children;Di2015NewLine    public ObservableCollection<NodeViewModel> Children { get { return _children; } set { _children = value; OnPropertyChanged("Children"); } }Di2015NewLineDi2015NewLineDi2015NewLine    private string _id;Di2015NewLine    public string Id { get { return _id; } set { _id = value; OnPropertyChanged("ID"); } }Di2015NewLine    private string _name;Di2015NewLine    public string Name { get { return _name; } set { _name = value; OnPropertyChanged("ID"); } }Di2015NewLine    private string _description;Di2015NewLine    public string Description { get { return _description; } set { _description = value; OnPropertyChanged("Description"); } }Di2015NewLine    private bool _isExpanded;Di2015NewLine    public bool IsExpanded { get { return _isExpanded; } set { _isExpanded = value; OnPropertyChanged("IsExpanded"); } }Di2015NewLine    private bool _isSelected;Di2015NewLine    public bool IsSelected { get { return _isSelected; } set { _isSelected = value; OnPropertyChanged("IsSelected"); } }Di2015NewLine    public bool HasChildren  // perhaps this can be replaced by HasItems in TemplatedParent?Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (Children != null)Di2015NewLine            {Di2015NewLine                Children.Any();Di2015NewLine            }Di2015NewLineDi2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static bool _setData = true; // hack for example dataDi2015NewLineDi2015NewLine    public NodeViewModel()Di2015NewLine    {Di2015NewLine        if (_setData)Di2015NewLine        {Di2015NewLine            _setData = false;Di2015NewLine            SetExampleData();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void SetExampleData()Di2015NewLine    {Di2015NewLine        Children = new ObservableCollection<NodeViewModel>()Di2015NewLine        {Di2015NewLine            new NodeViewModel() { Name = "1", Description = "One"    },Di2015NewLine            new NodeViewModel() { Name = "2", Description = "Two"    },Di2015NewLine            new NodeViewModel() { Name = "3", Description = "Three"  },Di2015NewLine            new NodeViewModel() { Name = "4", Description = "Four"   },Di2015NewLine            new NodeViewModel() { Name = "5", Description = "Five"   },Di2015NewLine            new NodeViewModel() { Name = "6", Description = "Six"    },Di2015NewLine            new NodeViewModel() { Name = "7", Description = "Seven"  },Di2015NewLine            new NodeViewModel() { Name = "8", Description = "Eight"  }Di2015NewLine        };Di2015NewLineDi2015NewLine        Children[0].Children = new ObservableCollection<NodeViewModel>() Di2015NewLine        {  Di2015NewLine            new NodeViewModel() { Name = "1.1", Description="One.One" },Di2015NewLine            new NodeViewModel() { Name = "1.2", Description="One.Two" },Di2015NewLine            new NodeViewModel() { Name = "1.3", Description="One.Three" }Di2015NewLine        };Di2015NewLineDi2015NewLine        Children[0].Children[0].Children = new ObservableCollection<NodeViewModel>() Di2015NewLine        {  Di2015NewLine            new NodeViewModel() { Name = "1.1.1", Description="One.One.One" },Di2015NewLine            new NodeViewModel() { Name = "1.1.2", Description="One.One.Two" },Di2015NewLine        };Di2015NewLineDi2015NewLine        Children[1].Children = new ObservableCollection<NodeViewModel>() Di2015NewLine        {  Di2015NewLine            new NodeViewModel() { Name = "2.1", Description="Two.One" },Di2015NewLine            new NodeViewModel() { Name = "2.2", Description="Two.Two" },Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
15449980Di2015UniqueSeparatorsender
15449980Di2015UniqueSeparatormyTextBox.KeyDown += new KeyEventHandler(TextBox_KeyDown);Di2015NewLineDi2015NewLineprivate void TextBox_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    //the sender will be a TextBox here, but perform a check to avoid null exceptionDi2015NewLine    TextBox tb = sender as TextBox;Di2015NewLine    if(tb != null)Di2015NewLine    {Di2015NewLine       //your textbox codeDi2015NewLine    }Di2015NewLine}Di2015NewLine
15450106Di2015UniqueSeparatorInitializeComponent()
15450106Di2015UniqueSeparatorInitializeComponent
15450106Di2015UniqueSeparatorbtnX
15450106Di2015UniqueSeparatorlblHeader
15450145Di2015UniqueSeparator  var e = Encoding.GetEncoding("Windows-1252");Di2015NewLine  var s = e.GetString(new byte[] { 154 });Di2015NewLineDi2015NewLine  Console.OutputEncoding = Encoding.GetEncoding("Windows-1252");Di2015NewLineDi2015NewLine  Console.WriteLine(s);Di2015NewLine
15450360Di2015UniqueSeparatorSource
15450360Di2015UniqueSeparatorImage
15450360Di2015UniqueSeparatorItemTemplate
15450360Di2015UniqueSeparator<FlipView.ItemTemplate>Di2015NewLine   <DataTemplate>Di2015NewLine       <Image Source="{Binding}" />Di2015NewLine   </DataTemplate>Di2015NewLine</FlipView.ItemTemplate>Di2015NewLineDi2015NewLineflipView.ItemsSource = imageUrls;Di2015NewLine
15450401Di2015UniqueSeparatorFoo
15450401Di2015UniqueSeparatorFunc<Foo> someFunc = o =>Di2015NewLine{Di2015NewLine    return new Foo { A = "A new instance of o?" };Di2015NewLine};Di2015NewLine
15450401Di2015UniqueSeparatorTuple<bool, Foo>
15450401Di2015UniqueSeparatorbool
15450401Di2015UniqueSeparatorFunc<Tuple<bool, Foo>> someFunc = o =>Di2015NewLine{Di2015NewLine    return Tuple.Create(true, new Foo { A = "A new instance of o?" });Di2015NewLine};Di2015NewLine
15450401Di2015UniqueSeparatorFunc
15450401Di2015UniqueSeparatorout
15450401Di2015UniqueSeparatordelegate TResult FuncOut<T, TResult>(out T arg);Di2015NewLine
15450401Di2015UniqueSeparatorFuncOut<Foo, bool> someFunc = (out Foo o) =>Di2015NewLine{Di2015NewLine     o = new Foo { A = "A new instance of o?" };Di2015NewLine     return true;Di2015NewLine};Di2015NewLineDi2015NewLineFoo foo;Di2015NewLinevar result = someFunc(out foo);Di2015NewLine
15450416Di2015UniqueSeparator//We can use, for example, two files with the same dimensions, e.g. 100x100Di2015NewLineImage<Gray, byte> A = new Image<Gray, byte>("imgA_100x100.jpg");Di2015NewLineImage<Gray, byte> B = new Image<Gray, byte>("imgB_100x100.jpg");Di2015NewLineDi2015NewLine//The image C will be the result of point-by-point multiplicationDi2015NewLine//We need to initialize itDi2015NewLineImage<Gray, byte> C = new Image<Gray, byte>(A.Width, A.Height);Di2015NewLine
15450416Di2015UniqueSeparatorCvInvoke.cvMul(A.Ptr, B.Ptr, C.Ptr, scale);Di2015NewLine
15450416Di2015UniqueSeparatorscale
15450416Di2015UniqueSeparatorC[i, j] = A[i, j] * B[i, j] * scaleDi2015NewLine
15450599Di2015UniqueSeparatorthis.MainMap.Position
15450697Di2015UniqueSeparator@Html.Raw(Html.RenderListTag("CMS", "Index", "Home", true))
15450709Di2015UniqueSeparatorjQuery
15450781Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Controls;Di2015NewLineusing System.Windows.Data;Di2015NewLineusing System.Windows.Documents;Di2015NewLineusing System.Windows.Input;Di2015NewLineusing System.Windows.Media;Di2015NewLineusing System.Windows.Media.Imaging;Di2015NewLineusing System.Windows.Navigation;Di2015NewLineusing System.Windows.Shapes;Di2015NewLineDi2015NewLinenamespace WpfApplication2Di2015NewLine{Di2015NewLine    [Serializable()]Di2015NewLine    public class ChildDi2015NewLine    {Di2015NewLine        public string Property1 { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Serializable()]Di2015NewLine    public class TestClassDi2015NewLine    {Di2015NewLineDi2015NewLine        public int Property1 { get; set; }Di2015NewLine        public string Property2 { get; set; }Di2015NewLine        public DateTime Property3 { get; set; }Di2015NewLine        public Child Child { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Interaction logic for MainWindow.xamlDi2015NewLine    /// </summary>Di2015NewLine    public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            TestClass testClass = new TestClass()Di2015NewLine            {Di2015NewLine                Property1 = 1,Di2015NewLine                Property2 = "test",Di2015NewLine                Property3 = DateTime.Now,Di2015NewLine                Child = new Child()Di2015NewLine                {Di2015NewLine                     Property1 = "test", Di2015NewLine                }Di2015NewLine            };Di2015NewLineDi2015NewLine            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter formatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();Di2015NewLine            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();Di2015NewLine            formatter.Serialize(memoryStream, testClass);Di2015NewLineDi2015NewLine            memoryStream.Position = 0;Di2015NewLine            TestClass deserialized = formatter.Deserialize(memoryStream) as TestClass;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15450783Di2015UniqueSeparatorEquals
15450783Di2015UniqueSeparatorGetHashCode
15450783Di2015UniqueSeparatorHashSet
15450783Di2015UniqueSeparatorDictionary
15450783Di2015UniqueSeparatorEquals
15450783Di2015UniqueSeparatorpublic override int GetHashCode()Di2015NewLine{Di2015NewLine    return StringComparer.InvariantCulture.GetHashCode(this.Name);Di2015NewLine}Di2015NewLine
15450823Di2015UniqueSeparatorMarshalByRefObject
15450823Di2015UniqueSeparatorContextBoundObject
15450823Di2015UniqueSeparatorIMessageSink
15451076Di2015UniqueSeparator var results = from myRow in dsPac.AsEnumerable()Di2015NewLine               where myRow.Field<string>("Package_Name").Equals(lblPackageName.Text)Di2015NewLine               select new { Holiday_ID = myRow["Holiday_ID"],Di2015NewLine                            Holiday_Description = myRow["Holiday_Description"],Di2015NewLine                            Holiday_Date = myRow["Holiday_Date"] };Di2015NewLine
15451183Di2015UniqueSeparator...Di2015NewLineConsole.ForegroundColor = ConsoleColor.Black;Di2015NewLineStopWatch sw = new Stopwatch();Di2015NewLinesw.Start();Di2015NewLinestring strPassword = Console.ReadLine();Di2015NewLinesw.Stop()Di2015NewLineTimeSpan ts = sw.Elapsed;Di2015NewLinestring strTPassword = "testpwd";Di2015NewLineif (strPassword == strTPassword)Di2015NewLine{Di2015NewLine    Console.ForegroundColor = ConsoleColor.Gray;Di2015NewLine    Console.WriteLine("You are logged in after " + ts.Milliseconds.ToString() + " milliseconds");Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine.....Di2015NewLine
15451277Di2015UniqueSeparatorlastFaceTrackSucceeded
15451277Di2015UniqueSeparatorLastFaceTrackSucceeded
15451277Di2015UniqueSeparatorSkeletonFaceTracker
15451373Di2015UniqueSeparatorvar date = new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Utc);Di2015NewLinesession.Advanced.LuceneQuery<object>().WhereLessThan("LastModified", date);Di2015NewLine
15451373Di2015UniqueSeparatorsession.Advanced.LuceneQuery<object>()Di2015NewLine                .Where("LastModified: {NULL TO 2012-12-31T00:00:00.0000000Z}")Di2015NewLine
15451373Di2015UniqueSeparatordateTime.ToString("o")
15451373Di2015UniqueSeparator{ TO }
15451373Di2015UniqueSeparator[ TO ]
15451373Di2015UniqueSeparator]
15451373Di2015UniqueSeparatorLastModified
15451373Di2015UniqueSeparatorLastModified
15451607Di2015UniqueSeparator new Matrix(new int[,] {{1, 2, 3,}, {1, 2, 3}});Di2015NewLine
15451607Di2015UniqueSeparatorint
15451607Di2015UniqueSeparator new Matrix(new [,] {{1, 2, 3,}, {1, 2, 3}});Di2015NewLine
15451635Di2015UniqueSeparatorint prev = number[0];Di2015NewLineConsole.WriteLine("Element is " + prev);Di2015NewLinefor (int i = 1; i < Array_Size; i++)Di2015NewLine{ Di2015NewLine    int cur = number[i];Di2015NewLine    if (cur != prev)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Element is " + cur);Di2015NewLine        prev = cur;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15451839Di2015UniqueSeparatorINSERT INTO LMNormal (upc, cert_code, description, ..., unitofmeasure)Di2015NewLineSELECT upc, cert_code, description, ..., unitofmeasureDi2015NewLineFROM   products Di2015NewLineWHERE  (modified >= @now) and (advertised = @false)Di2015NewLine
15451968Di2015UniqueSeparatorActivator.CreateInstance
15451968Di2015UniqueSeparatorpublic class ManagerDi2015NewLine{Di2015NewLine    private List<baseClass> _workers = new List<baseClass>();Di2015NewLineDi2015NewLine    public void Initialize(ClassType type)Di2015NewLine    {Di2015NewLine        string assemblyName = Assembly.GetExecutingAssembly().GetName().Name;Di2015NewLine        Type objType = Type.GetType(string.Format("{0}.{1},{0}", assemblyName, type.ToString()));Di2015NewLine        var correctChild =  (baseClass)Activator.CreateInstance(objType);Di2015NewLine        _workers.Add(correctChild);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15451969Di2015UniqueSeparator<style>
15452104Di2015UniqueSeparatorRectangle newRect = new Rectangle(Di2015NewLine  pictureBox1.Location.X + 10, Di2015NewLine  pictureBox1.Location.Y, Di2015NewLine  pictureBox1.Width, Di2015NewLine  pictureBox1.Heigth);Di2015NewLine
15452191Di2015UniqueSeparatorWhere
15452191Di2015UniqueSeparatoris
15452191Di2015UniqueSeparatorList<content> rows = PlaceHolder_ForEntries.Controls.Cast<Control>().Where(c => c is TextBox || c is DropDownList)Di2015NewLine        .Select(txt => newDi2015NewLine        {Di2015NewLine            Txt = txt,Di2015NewLine            Number = new String(txt.ID.SkipWhile(c => !Char.IsDigit(c)).ToArray())Di2015NewLine        })Di2015NewLine        .GroupBy(x => x.Number)Di2015NewLine        .Select(g => new contentDi2015NewLine        {Di2015NewLine            carclass = g.First(x => x.Txt.ID.StartsWith("DropDownlist_CarClass")).Txt.SelectedValue,Di2015NewLine            name = g.First(x => x.Txt.ID.StartsWith("TextBox_Name")).Txt.Text,Di2015NewLine            memberNo = g.First(x => x.Txt.ID.StartsWith("TextBox_MemberNo")).Txt.Text,Di2015NewLine            points = int.Parse(g.First(x => x.Txt.ID.StartsWith("TextBox_Points")).Txt.Text)Di2015NewLine        })Di2015NewLine        .ToList();Di2015NewLine
15452387Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public Guid EmployeeId { get; set; }Di2015NewLine    public int Year { get; set; }Di2015NewLine    public int Month { get; set; }Di2015NewLineDi2015NewLine    public ItemViewModel[] Items { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ItemViewModelDi2015NewLine{Di2015NewLine    public int TotalHours { get; set; }Di2015NewLine    public int TotalMinutes { get; set; }Di2015NewLine}Di2015NewLine
15452387Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult UpdateEmployeeClockedHoursByProvider(MyViewModel model)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15452387Di2015UniqueSeparatorid
15452387Di2015UniqueSeparatorname
15452387Di2015UniqueSeparator<% using (Html.BeginForm("UpdateEmployeeClockedHoursByProvider", null, FormMethod.Post, new { id = "myForm" })) { %>Di2015NewLine    <table>Di2015NewLine        <thead>Di2015NewLine            <tr>Di2015NewLine                <th>Clocked Date</th>Di2015NewLine                <th>Total Hours</th>Di2015NewLine                <th>Total Minutes</th>Di2015NewLine            <tr>Di2015NewLine        </thead>Di2015NewLine        <tbody>Di2015NewLine            <% for (var i = 0; i < Model.Count; i++) { %>Di2015NewLine            <tr>Di2015NewLine                <td>Di2015NewLine                    <%= Html.DisplayFor(x => x[i].ClockedDate) %>Di2015NewLine                </td>Di2015NewLine                <td>Di2015NewLine                    <%= Html.TextBoxFor(Di2015NewLine                        x => x[i].TotalHours, Di2015NewLine                        new { Di2015NewLine                            type = "number", Di2015NewLine                            placeholder = "Hours", Di2015NewLine                            @class = "total-hours" Di2015NewLine                        }Di2015NewLine                    ) %>Di2015NewLine                </td>Di2015NewLine                <td>Di2015NewLine                    <%= Html.TextBoxFor(Di2015NewLine                        x => x[i].TotalMinutes, Di2015NewLine                        new { Di2015NewLine                            type = "number", Di2015NewLine                            placeholder = "Minutes", Di2015NewLine                            @class = "total-minutes" Di2015NewLine                        }Di2015NewLine                    ) %>Di2015NewLine                </td>                    Di2015NewLine            </tr>Di2015NewLine        <% } %>Di2015NewLine        </tbody>Di2015NewLine    </table>Di2015NewLineDi2015NewLine    <button type="submit">Save</button>Di2015NewLine<% } %>Di2015NewLine
15452387Di2015UniqueSeparator.submit
15452387Di2015UniqueSeparator$(document).on('#myForm', 'submit', function () {Di2015NewLine    var items = [];Di2015NewLine    $('table tbody tr').each(function() {Di2015NewLine        items.push({Di2015NewLine            totalHours: $(this).find('td input.total-hours').val(),Di2015NewLine            totalMinutes: $(this).find('td input.total-minutes').val()Di2015NewLine        });Di2015NewLine    });Di2015NewLineDi2015NewLine    var data = {Di2015NewLine        employeeId: employeeId, // <!-- It's not very clear from your code where is this supposed to come fromDi2015NewLine        year: $('#year').val(),Di2015NewLine        month: $('#month').val(),Di2015NewLine        items: itemsDi2015NewLine    };Di2015NewLineDi2015NewLine    $.ajax({Di2015NewLine        url: this.action,Di2015NewLine        type: this.method,Di2015NewLine        contentType: 'application/json',Di2015NewLine        data: JSON.stringify(data),Di2015NewLine        success: function (result) {Di2015NewLine            // TODO: here you could handle the response from the serverDi2015NewLine            alert('Your request has been successfully processed.');Di2015NewLine        },Di2015NewLine        error: function (xhr, ajaxOptions, thrownError) {Di2015NewLine            alert(xhr.status);Di2015NewLine            alert(thrownError);Di2015NewLine        }Di2015NewLine    });Di2015NewLineDi2015NewLine    return false;Di2015NewLine});Di2015NewLine
15452387Di2015UniqueSeparator.on()
15452387Di2015UniqueSeparator.live()
15452507Di2015UniqueSeparatorvar input = "www.google.com;www.yahoo.com;www.gmail.com";Di2015NewLinevar result = string.Join(";", input.Split(';').Select(x => string.Format("<a>{0}</a>",x)));Di2015NewLine
15452520Di2015UniqueSeparatorif (iNum == n1 + 1 || iNum == n2 + 1 || iNum == n3 + 1 || iNum == n4 + 1 || iNum == n1 - 1 || iNum == n2 - 1 || iNum == n3 - 1 || iNum == n4 - 1)Di2015NewLine{Di2015NewLine    Console.WriteLine(prod);Di2015NewLine}Di2015NewLine
15452520Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    string number = "731671...52963450";Di2015NewLineDi2015NewLine    char[] numCharArray = number.ToCharArray();Di2015NewLine    int maxProduct = 0; // initial valueDi2015NewLineDi2015NewLine    for (int i = 0; i < numCharArray.Length - 5 /* Fix IndexOutOfRange (see Matthew Fahrbach's answer) */; i++)Di2015NewLine    {Di2015NewLine        // ...Di2015NewLineDi2015NewLine        int prod = iNum * n1 * n2 * n3 * n4;Di2015NewLine        if (prod > maxProd)Di2015NewLine        {Di2015NewLine            maxProd = prod;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    Console.WriteLine(maxProd);Di2015NewLine}Di2015NewLine
15452554Di2015UniqueSeparatorPopulateCommand = new RelayCommand(Di2015NewLine    () =>Di2015NewLine        {Di2015NewLine            Populate();Di2015NewLine            RaisePropertyChanged(() => Id);Di2015NewLine        });Di2015NewLine
15452554Di2015UniqueSeparatorIsSynchronizedWithCurrentItem=true
15452710Di2015UniqueSeparatorvar a = "Data is provided to test only string";Di2015NewLinevar b = "test only string";Di2015NewLineDi2015NewLineif (a.Contains(b))Di2015NewLine     MessageBox.Show("yes");Di2015NewLine
15452783Di2015UniqueSeparatorcontentType
15452783Di2015UniqueSeparator{controller}/{action}
15452783Di2015UniqueSeparatorData
15452783Di2015UniqueSeparator$.ajax({Di2015NewLine    url: '@Url.Action("SearchCustomer")',Di2015NewLine    type: 'GET',Di2015NewLine    data: { 'name': name, 'id': customerId },Di2015NewLine    success: function (result) {Di2015NewLine        $(result.Data).each(function () {Di2015NewLineDi2015NewLine        });Di2015NewLine    }Di2015NewLine});Di2015NewLine
15452783Di2015UniqueSeparatorvar customers = tr.SearchCustomers(name, id);Di2015NewLine
15452783Di2015UniqueSeparatorCustomer
15452876Di2015UniqueSeparator using (ShoppingDataContext data = new ShoppingDataContext())Di2015NewLine {Di2015NewLine     Customer newCustomer = new Customer()Di2015NewLine     {Di2015NewLine         CustomerFirstname = TextBoxFirstName.Text,Di2015NewLine         CustomerLastname = TextBoxLastname.Text,Di2015NewLine         CustomerEmail = TextBoxEmail.Text,Di2015NewLine         Username = TextBoxusername.Text,Di2015NewLine         CustomerPassword = TextBoxPassword.TextDi2015NewLine     };Di2015NewLineDi2015NewLine     //now I'd like to be proven wrong here, but I believe you need to insertDi2015NewLine     //and submit at this pointDi2015NewLine     data.Customers.InsertOnSubmit(newCustomer);Di2015NewLine     data.SubmitChanges();Di2015NewLineDi2015NewLine     CustomerAddress newaddress = new CustomerAddress()Di2015NewLine     {Di2015NewLine          CustomerID = NewCustomer.CustomerID,Di2015NewLine          Address1 = TextBoxAddress1.Text,Di2015NewLine          Address2 = TextBoxAddress2.Text,Di2015NewLine          City = TextBoxCity.Text,Di2015NewLine          State = TextBoxState.Text,Di2015NewLine          Pincode = TextBoxPincode.Text,Di2015NewLine     };Di2015NewLine     //add new address to your customer and saveDi2015NewLine     newCustomer.CustomerAddresses.Add(newAddress);Di2015NewLine     //it has been a while since I used linq2sql so you may need one of these:Di2015NewLine     //newCustomer.CustomerAddresses.InsertOnSubmit(newAddress);Di2015NewLine     //newCustomer.CustomerAddresses.Attach(newAddress);Di2015NewLine     //basically use intellisense to help you figure out the right one, you mightDi2015NewLine     //have some trial and error hereDi2015NewLine     data.SubmitChanges();Di2015NewLineDi2015NewLine     System.Web.Security.Membership.CreateUser(TextBoxusername.Text, TextBoxPassword.Text);Di2015NewLineDi2015NewLine     PanelRegister.Visible = false;Di2015NewLine     ConfimPanel.Visible = true;Di2015NewLineDi2015NewLine  }Di2015NewLine
15452876Di2015UniqueSeparatorusing(TransactionScope scope = new TransactionScope())Di2015NewLine{Di2015NewLine  using(ShoppingDataContext data = new ShoppingDataContext())Di2015NewLine  {Di2015NewLine    //the rest of your codeDi2015NewLine  }Di2015NewLine}Di2015NewLine
15452879Di2015UniqueSeparatorstring className = "MyClass";Di2015NewLinestring namespaceName = "MyNamespace.MyInternalNamespace";Di2015NewLine
15452879Di2015UniqueSeparatorMyNamespace.MyInternalNamespace.MyClass
15452879Di2015UniqueSeparatorvar myObj = Activator.CreateInstance(namespaceName, className);Di2015NewLine
15452879Di2015UniqueSeparatorvar myObj = Activator.CreateInstance(Type.GetType(namespaceName + className));Di2015NewLine
15452886Di2015UniqueSeparatorobfuscate
15452886Di2015UniqueSeparator.Net Reactor
15452886Di2015UniqueSeparatorThemida
15452904Di2015UniqueSeparatorMyClass<int>
15452904Di2015UniqueSeparatorMyClass<SomethingElse>
15452904Di2015UniqueSeparatorT1
15452904Di2015UniqueSeparatorT2
15452904Di2015UniqueSeparatordynamic
15453066Di2015UniqueSeparatorTOP(n)
15453066Di2015UniqueSeparator"select TOP(10) Name Di2015NewLinefrom Drug Di2015NewLinewhere Name Di2015NewLinelike '" + Dname + "%' "Di2015NewLine
15453217Di2015UniqueSeparatorallterms.Count
15453217Di2015UniqueSeparatorList
15453217Di2015UniqueSeparatorCount + 1
15453217Di2015UniqueSeparatorallterms
15453217Di2015UniqueSeparator10
15453217Di2015UniqueSeparator0 - 9
15453217Di2015UniqueSeparator1 - 10
15453217Di2015UniqueSeparatorindex 0
15453217Di2015UniqueSeparatorindex 10
15453217Di2015UniqueSeparatorfor (int i = 0; i < allterms.Count; i++ )Di2015NewLine{Di2015NewLine    excelApp.Cells[i + 1, 1] = allterms[i];Di2015NewLine}Di2015NewLine
15453379Di2015UniqueSeparator.Elements("Chapter")
15453379Di2015UniqueSeparatorxdoc
15453379Di2015UniqueSeparator.Descendants("Chapter")
15453379Di2015UniqueSeparatorIEnumerable<XElement> elem_list = from e in xdoc.Descendants("Chapter")Di2015NewLine                                  where (string) e.Attribute("chapter-no") == "1"Di2015NewLine                                  select e;Di2015NewLine
15453379Di2015UniqueSeparatorIEnumerable<XElement> elem_list = from e in xdoc.Root.Element("chapters").Elements("Chapter")Di2015NewLine                                  where (string) e.Attribute("chapter-no") == "1"Di2015NewLine                                  select e;Di2015NewLine
15453379Di2015UniqueSeparatorXPath
15453379Di2015UniqueSeparatorxdoc.XPathSelectElements("root/chapters/Chapter[@chapter-no=1]");Di2015NewLine
15453379Di2015UniqueSeparatorusing System.Xml.XPath;
15453451Di2015UniqueSeparatorwith data as (Di2015NewLine  select * from ( valuesDi2015NewLine  (1,11,cast('2013/03/12' as smalldatetime)),Di2015NewLine  (1,15,cast('2013/03/13' as smalldatetime)),Di2015NewLine  (1,11,cast('2013/03/14' as smalldatetime)),Di2015NewLine  (1,12,cast('2013/03/15' as smalldatetime))Di2015NewLine  ) data(PlayerId,Score,[Date])Di2015NewLine) Di2015NewLineselectDi2015NewLine  this.*,Di2015NewLine  Prev = isnull(prev.Score,0),Di2015NewLine  tick = case when this.Score > isnull(prev.Score,0) then 'Up' else 'Down' endDi2015NewLinefrom data thisDi2015NewLineleft join data prev Di2015NewLine    on prev.PlayerId = this.PlayerIdDi2015NewLine   and prev.[Date]     = this.[Date] - 1Di2015NewLine
15453451Di2015UniqueSeparatorPlayerId    Score       Date                    Prev        tickDi2015NewLine----------- ----------- ----------------------- ----------- ----Di2015NewLine1           11          2013-03-12 00:00:00     0           UpDi2015NewLine1           15          2013-03-13 00:00:00     11          UpDi2015NewLine1           11          2013-03-14 00:00:00     15          DownDi2015NewLine1           12          2013-03-15 00:00:00     11          UpDi2015NewLine
15453461Di2015UniqueSeparatorvar result =Di2015NewLine  l.Where(c => c.ParentID == 0)Di2015NewLine   .Select(c => new {Menu = c, Sub = l.Where(ci => ci.ParentID == c.ID).OrderBy(s => s.OrderM)})Di2015NewLine   .OrderBy(ao => ao.Menu.OrderM)Di2015NewLine   .SelectMany(ao => ao.Sub.Count() == 0 ? new List<C> {ao.Menu} : new List<C> {ao.Menu}.Concat(ao.Sub));Di2015NewLine
15453613Di2015UniqueSeparatorName
15453613Di2015UniqueSeparator    Matrix mat01 = new Matrix();Di2015NewLine    mat01.Name = "mat01";Di2015NewLine    list_matrix.Add(mat01);Di2015NewLineDi2015NewLine    Matrix mat02 = new Matrix(3);Di2015NewLine    mat02.Name = "mat02";Di2015NewLine    list_matrix.Add(mat02);Di2015NewLine
15453613Di2015UniqueSeparatorforeach (Matrix mat in list_matrix)Di2015NewLine{Di2015NewLine    Console.WriteLine("Matrix {0} has {1} Rows and {2} Columns", Di2015NewLine        mat.Name, Di2015NewLine        mat.countRows(), Di2015NewLine        mat.countColumns());Di2015NewLine}Di2015NewLine
15453613Di2015UniqueSeparator    [Test]Di2015NewLine    public void CreateMatrix()Di2015NewLine    {Di2015NewLine        var matrixVariableName = new Matrix(new [,] {{1, 2, 3,}, {1, 2, 3}});Di2015NewLine        Assert.AreEqual("matrixVariableName", GetVariableName(() => matrixVariableName));Di2015NewLine    }Di2015NewLineDi2015NewLine    static string GetVariableName<T>(Expression<Func<T>> expr)Di2015NewLine    {Di2015NewLine        var body = (MemberExpression)expr.Body;Di2015NewLineDi2015NewLine        return body.Member.Name;Di2015NewLine    }Di2015NewLine
15454077Di2015UniqueSeparatorprivate static ISet<int> CalcSumsOfTwoNums2(IEnumerable<int> nums)Di2015NewLine{Di2015NewLine    // get List<int> from nums to get info about collection lengthDi2015NewLine    var source = nums.ToList();Di2015NewLineDi2015NewLine    // proper iterationDi2015NewLine    var data = source.Take(source.Count - 1)Di2015NewLine                     .SelectMany((e, ix) => source.Skip(ix)Di2015NewLine                                                  .Take(source.Count - 1 - ix)Di2015NewLine                                                  .Select(i => new { e, i }))Di2015NewLine                     .Select(x => x.e + x.i)Di2015NewLine                     .Where(x => x < MAX);Di2015NewLineDi2015NewLine    // return HashSet instead of IEnumerable<int>Di2015NewLine    return new HashSet<int>(data);Di2015NewLine}Di2015NewLine
15454136Di2015UniqueSeparatorpublic class Sub: ICloneableDi2015NewLine{Di2015NewLine    struct datenStructDi2015NewLine    {Di2015NewLine        internal int studentsNumber;Di2015NewLine        internal int unassaignedStudent;Di2015NewLine        internal string name;Di2015NewLine    }Di2015NewLineDi2015NewLine    private datenStruct USE;Di2015NewLineDi2015NewLine    int studentsNumber;Di2015NewLineDi2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get { return USE.name; }Di2015NewLine        set { USE.name = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    private Sub(datenStruct struc)Di2015NewLine    {Di2015NewLine        this.USE = struc;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Sub(string name, int number)Di2015NewLine    {Di2015NewLine        this.USE = new datenStruct();Di2015NewLine        this.USE.name = name;Di2015NewLine        this.USE.studentsNumber = number;Di2015NewLine        this.USE.unassaignedStudent = number;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Assigne(int count)Di2015NewLine    {Di2015NewLine        //stuffDi2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object Clone()Di2015NewLine    {Di2015NewLine        var copie = new datenStruct();Di2015NewLineDi2015NewLine        copie.name = USE.name;Di2015NewLine        copie.unassaignedStudent = USE.unassaignedStudent;Di2015NewLine        copie.studentsNumber = USE.studentsNumber;Di2015NewLineDi2015NewLine        return new Sub(copie);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15454136Di2015UniqueSeparatorpublic class Room: ICloneableDi2015NewLine{Di2015NewLine    struct datenStructDi2015NewLine    {Di2015NewLine        internal int studentsNumber;Di2015NewLine        internal int full;Di2015NewLine        internal string name;Di2015NewLine        internal int freeSeats;Di2015NewLine        internal List<Sub> subjects;Di2015NewLine        internal Dictionary<Sub, int> variations;Di2015NewLine    }Di2015NewLineDi2015NewLine    private datenStruct USE;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// the list of subjectsDi2015NewLine    /// </summary>Di2015NewLine    internal List<Sub> SubjectsDi2015NewLine    {Di2015NewLine        get { return USE.subjects; }Di2015NewLine        set { USE.subjects = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Room(string name, int number)Di2015NewLine    {Di2015NewLine        this.USE = new datenStruct();Di2015NewLineDi2015NewLine        this.USE.name = name;Di2015NewLine        this.USE.studentsNumber = number;Di2015NewLine        this.USE.full = 0;Di2015NewLine        this.USE.subjects = new List<Sub>();Di2015NewLine        this.USE.variations = new Dictionary<Sub, int>();Di2015NewLine        this.USE.freeSeats = number;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Room(int number)Di2015NewLine    {Di2015NewLine        this.USE = new datenStruct();Di2015NewLineDi2015NewLine        this.USE.studentsNumber = number;Di2015NewLine        this.USE.full = 0;Di2015NewLine        this.USE.subjects = new List<Sub>();Di2015NewLine        this.USE.variations = new Dictionary<Sub, int>();Di2015NewLine        this.USE.freeSeats = number;Di2015NewLine    }Di2015NewLineDi2015NewLine    private Room(datenStruct struc)Di2015NewLine    {Di2015NewLine        USE = struc;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool addSubject(Sub sbj)Di2015NewLine    {Di2015NewLine        //also stuffDi2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool addPartialSubject(Sub sbj)Di2015NewLine    {Di2015NewLine        //stuffDi2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object Clone()Di2015NewLine    {Di2015NewLine        var copie = new datenStruct();Di2015NewLineDi2015NewLine        copie.studentsNumber = USE.studentsNumber;Di2015NewLine        copie.full = USE.full;Di2015NewLine        copie.freeSeats = USE.freeSeats;Di2015NewLine        var SubListCopie = new List<Sub>();Di2015NewLineDi2015NewLine        foreach (Sub origSub in USE.subjects)Di2015NewLine            SubListCopie.Add((Sub)origSub.Clone());Di2015NewLineDi2015NewLine        copie.subjects = SubListCopie;Di2015NewLineDi2015NewLine        var SubDictCopie = new Dictionary<Sub, int>();Di2015NewLineDi2015NewLine        foreach (KeyValuePair<Sub, int> KvP in USE.variations)Di2015NewLine            SubDictCopie.Add((Sub)KvP.Key.Clone(),KvP.Value);Di2015NewLineDi2015NewLine        copie.variations = SubDictCopie;Di2015NewLineDi2015NewLine        return new Room(copie);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15454136Di2015UniqueSeparatorpublic class Period: ICloneableDi2015NewLine{Di2015NewLine    struct datenStructDi2015NewLine    {Di2015NewLine        internal List<Room> rooms;Di2015NewLine        internal List<Sub> subjects;Di2015NewLine        internal string name;Di2015NewLine        internal int conflicts;Di2015NewLine    }Di2015NewLineDi2015NewLine    private datenStruct USE;Di2015NewLineDi2015NewLineDi2015NewLine    internal List<Sub> SubjectsDi2015NewLine    {Di2015NewLine        get { return USE.subjects; }Di2015NewLine        set { USE.subjects = value; }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Create an instance of class PeriodDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="rooms">the rooms in this Period</param>Di2015NewLine    public Period(List<Room> rooms)Di2015NewLine    {Di2015NewLine        this.USE.conflicts = 0;Di2015NewLine        this.USE.rooms = rooms;Di2015NewLine        this.USE.subjects = new List<Sub>();Di2015NewLine        fillSubjects(ref USE.rooms, ref USE.subjects);Di2015NewLine    }Di2015NewLineDi2015NewLine    private Period(datenStruct struc)Di2015NewLine    {Di2015NewLine        USE = struc;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Fill the subjects in the rooms to the list of subjectsDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="rooms">referance to the list of the rooms</param>Di2015NewLine    /// <param name="subjects">referance to the list of the subjects</param>Di2015NewLine    private void fillSubjects(ref List<Room> rooms, ref List<Sub> subjects)Di2015NewLine    {Di2015NewLine        foreach (var room in rooms)Di2015NewLine        {Di2015NewLine            foreach (var subject in room.Subjects)Di2015NewLine            {Di2015NewLine                if (!subjects.Exists(s => s.Name == subject.Name))Di2015NewLine                    subjects.Add(subject);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Adds the given subject to the period if there is a place in any roomDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="s">the subject to add</param>Di2015NewLine    /// <returns>true if there is space for this subject and added, otherwise false</returns>Di2015NewLine    public bool AddSubject(Sub s)Di2015NewLine    {Di2015NewLine        foreach (var room in USE.rooms)Di2015NewLine        {Di2015NewLine            if (room.addSubject(s))Di2015NewLine            {Di2015NewLine                //stuffDi2015NewLine            }Di2015NewLine            elseDi2015NewLine                if (room.addPartialSubject(s))Di2015NewLine                {Di2015NewLine                    //stuffDi2015NewLine                }Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    private int CalculateConflictions(Sub s)Di2015NewLine    {Di2015NewLine        //also a lot of stuff Di2015NewLine        return 1;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object Clone()Di2015NewLine    {Di2015NewLine        var copie = new datenStruct();Di2015NewLineDi2015NewLine        copie.name = USE.name;Di2015NewLine        copie.conflicts = USE.conflicts;Di2015NewLineDi2015NewLine        var RoomListCopie = new List<Room>();Di2015NewLineDi2015NewLine        foreach (Room origSub in USE.rooms)Di2015NewLine            RoomListCopie.Add((Room)origSub.Clone());Di2015NewLineDi2015NewLine        copie.rooms = RoomListCopie;Di2015NewLineDi2015NewLineDi2015NewLine        var SubListCopie = new List<Sub>();Di2015NewLineDi2015NewLine        foreach (Sub origSub in USE.subjects)Di2015NewLine            SubListCopie.Add((Sub)origSub.Clone());Di2015NewLineDi2015NewLine        copie.subjects = SubListCopie;Di2015NewLineDi2015NewLine        return new Period(copie);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15454136Di2015UniqueSeparatorpublic class Structure : IDisposable,ICloneableDi2015NewLine{Di2015NewLine    struct datenStructDi2015NewLine    {Di2015NewLine        internal int days;Di2015NewLine        internal int subjectCount;Di2015NewLine        internal int periods;Di2015NewLine        internal Period[,] schedualArray;Di2015NewLine        internal List<Room> rooms;Di2015NewLine    }Di2015NewLineDi2015NewLine    private datenStruct USE;Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// the number of days in the SchedualDi2015NewLine    /// </summary>Di2015NewLine    public int DaysDi2015NewLine    {Di2015NewLine        get { return USE.days; }Di2015NewLine        set { USE.days = value; }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    internal List<Room> RoomsDi2015NewLine    {Di2015NewLine        get { return USE.rooms; }Di2015NewLine        set { USE.rooms = value; }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Creates an instance of the Structure objectDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="rooms">a list of the rooms in the Schedual</param>Di2015NewLine    public Structure(int days, int periods, List<Room> rooms)Di2015NewLine    {Di2015NewLine        this.USE.days = days;Di2015NewLine        this.USE.periods = periods;Di2015NewLine        this.USE.rooms = rooms;Di2015NewLine        this.USE.schedualArray = new Period[days, periods];Di2015NewLine        this.USE.subjectCount = 0;Di2015NewLine        for (int i = 0; i < days; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < periods; j++)Di2015NewLine            {Di2015NewLine                USE.schedualArray[i, j] = new Period(CloneList(ref rooms)); //here i cloned the list to be in the safe side and it didn't work alsoDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private Structure(datenStruct struc) Di2015NewLine    {Di2015NewLine        this.USE = struc;Di2015NewLine    }Di2015NewLineDi2015NewLine    internal bool AddSubject(Sub subject, int day, int period)Di2015NewLine    {Di2015NewLine        //add the subject into inner lists (room)Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void PrintStruct()Di2015NewLine    {Di2015NewLine        for (int i = 0; i < USE.days; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < USE.periods; j++)Di2015NewLine            {Di2015NewLine                foreach (var subject in USE.schedualArray[i, j].Subjects)Di2015NewLine                {Di2015NewLine                    Console.Write("\\t\\t");Di2015NewLine                }Di2015NewLine                Console.Write("\\t\\t");Di2015NewLine            }Di2015NewLine            Console.WriteLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public List<Room> CloneList(ref List<Room> rooms)Di2015NewLine    {Di2015NewLine        var lst = new List<Room>();Di2015NewLine        foreach (var room in rooms)Di2015NewLine        {Di2015NewLine            lst.Add((Room)room.Clone());Di2015NewLine        }Di2015NewLine        return lst;Di2015NewLine    }Di2015NewLineDi2015NewLine    internal void RemoveSubject(Sub subject)Di2015NewLine    {Di2015NewLine        //..................Di2015NewLine    }Di2015NewLineDi2015NewLine    #region IDisposable MembersDi2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine       // GC.Collect(g, GCCollectionMode.Forced);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    public object Clone()Di2015NewLine    {Di2015NewLine        var copie =new datenStruct();Di2015NewLineDi2015NewLine        copie.days = USE.days;Di2015NewLine        copie.subjectCount = USE.subjectCount;Di2015NewLine        copie.periods = USE.periods;Di2015NewLineDi2015NewLineDi2015NewLine        var RoomListCopie = new List<Room>();Di2015NewLineDi2015NewLine        foreach (Room origSub in USE.rooms)Di2015NewLine            RoomListCopie.Add((Room)origSub.Clone());Di2015NewLineDi2015NewLine        copie.rooms = RoomListCopie;Di2015NewLineDi2015NewLineDi2015NewLine        copie.schedualArray = new Period[copie.days, copie.periods];Di2015NewLine        for (int i = 0; i < copie.days; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < copie.periods; j++)Di2015NewLine            {Di2015NewLine                copie.schedualArray[i, j] = new Period(CloneList(ref copie.rooms));Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return new Structure(copie);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15454198Di2015UniqueSeparatorpublic class FooFactory : IFooFactoryDi2015NewLine{Di2015NewLine    // allows us to Get things from the kernel, but not add new bindings etc.Di2015NewLine    private readonly IResolutionRoot resolutionRoot;Di2015NewLineDi2015NewLine    public FooFactory(IResolutionRoot resolutionRoot)Di2015NewLine    {Di2015NewLine        this.resolutionRoot = resolutionRoot;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IFoo CreateFoo()Di2015NewLine    {Di2015NewLine        return this.resolutionRoot.Get<IFoo>();Di2015NewLine    }Di2015NewLineDi2015NewLine    // or if you want to specify a value at runtime...Di2015NewLineDi2015NewLine    public IFoo CreateFoo(string myArg)Di2015NewLine    {Di2015NewLine        return this.resolutionRoot.Get<IFoo>(new ConstructorArgument("myArg", myArg));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Foo : IFoo { ... }Di2015NewLineDi2015NewLinepublic class NeedsFooAtRuntimeDi2015NewLine{Di2015NewLine    public NeedsFooAtRuntime(IFooFactory factory)Di2015NewLine    {Di2015NewLine        this.foo = factory.CreateFoo("test");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineBind<IFooFactory>().To<FooFactory>();Di2015NewLineBind<IFoo>().To<Foo>();Di2015NewLine
15454213Di2015UniqueSeparator  strSelectCmd = "SELECT Area_ID, StationId, SystemId, CCNumber, LineNumber, RTUNumber, SRTUNumber, Description, SDescription FROM RTU_ADDRESS where Area_ID="+cbxMyCombox.SelectedIndex;Di2015NewLine
15454271Di2015UniqueSeparatorforeach (var item in level1Element.Descendants("item"))Di2015NewLine    item.Value; // this contains szt and mlDi2015NewLine
15454651Di2015UniqueSeparatormyQueue
15454651Di2015UniqueSeparatorstatic
15454651Di2015UniqueSeparatorstatic Queue myQueue = new Queue();
15454651Di2015UniqueSeparatorService1
15454654Di2015UniqueSeparatorprivate static Dictionary<Type, object> RegisteredWorkers = new Dictionary<Type, object>();Di2015NewLineDi2015NewLinepublic static void RegisterWorker(object worker)Di2015NewLine{Di2015NewLine    var handled = from iface in worker.GetType().GetInterfaces()Di2015NewLine                  where iface.IsGenericTypeDi2015NewLine                  where iface.GetGenericTypeDefinition() == typeof(Worker<>)Di2015NewLine                  select iface.GetGenericArguments()[0];Di2015NewLine    foreach (var type in handled)Di2015NewLine        if (!RegisteredWorkers.ContainsKey(type))Di2015NewLine            RegisteredWorkers[type] = worker;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void ProcessWorkItem(WorkItem item)Di2015NewLine{Di2015NewLine    object handler = RegisteredWorkers[item.getType()];Di2015NewLine    Type workerType = typeof(Worker<>).MakeGenericType(item.GetType());Di2015NewLine    MethodInfo processMethod = workerType.GetMethod("Process");Di2015NewLine    processMethod.Invoke(handler, new object[] { item });Di2015NewLine}Di2015NewLine
15454654Di2015UniqueSeparatorAction<IWorkItem>
15454654Di2015UniqueSeparatorpublic void RegisterHandler(object handler)Di2015NewLine{Di2015NewLine    var handled = from iface in handler.GetType().GetInterfaces()Di2015NewLine                  where iface.IsGenericTypeDi2015NewLine                  where iface.GetGenericTypeDefinition() == typeof(IWorker<>)Di2015NewLine                  select iface.GetGenericArguments()[0];Di2015NewLineDi2015NewLine    foreach (var type in handled)Di2015NewLine    {Di2015NewLine        if (!RegisteredWorkers.ContainsKey(type))Di2015NewLine        {Di2015NewLine            Action<IWorkItem> handleAction = HandlerAction(type, handler);Di2015NewLine            RegisteredWorkers[type] = handleAction;Di2015NewLine        }Di2015NewLine    }   Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Process(IWorkItem item)Di2015NewLine{Di2015NewLine    Action<IWorkItem> handleAction = RegisteredWorkers[item.GetType()];Di2015NewLine    handleAction(item);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static Action<IWorkItem> HandlerAction(Type itemType, object handler)Di2015NewLine{Di2015NewLine    var paramExpr = Expression.Parameter(typeof(IWorkItem));Di2015NewLine    var castExpr = Expression.Convert(paramExpr, itemType);Di2015NewLine    MethodInfo processMethod = typeof(IWorker<>).MakeGenericType(itemType).GetMethod("Process");Di2015NewLine    var invokeExpr = Expression.Call(Expression.Constant(handler), processMethod, castExpr);Di2015NewLineDi2015NewLine    var lambda = Expression.Lambda<Action<IWorkItem>>(invokeExpr, paramExpr);Di2015NewLine    return lambda.Compile();Di2015NewLine}Di2015NewLine
15454658Di2015UniqueSeparator//tr[td[1]//input[@disabled]]Di2015NewLine
15454658Di2015UniqueSeparator/td[2]/a
15454658Di2015UniqueSeparator//tr[td[1]//input[@disabled]]/td[2]/aDi2015NewLine
15454720Di2015UniqueSeparator    HasKey(pc => new { pc.ProductId, pc.CategoryId});Di2015NewLine
15454720Di2015UniqueSeparatort => new { t.Id1, t.Id2 }
15454720Di2015UniqueSeparatorFunction(t) New From { t.Id1, t.Id2 }
15454967Di2015UniqueSeparatorReadVoorraad
15454967Di2015UniqueSeparatorSqlConnection conn = null;Di2015NewLineSqlDataReader rdr = null;Di2015NewLineDi2015NewLinetry {Di2015NewLine    conn = new SqlConnection(...);Di2015NewLineDi2015NewLine    ...Di2015NewLine} catch (Exception e) {Di2015NewLine    Console.WriteLine("Error: " + e.Message);Di2015NewLine    throw;Di2015NewLine} finally {Di2015NewLine    if (rdr != null) { rdr.Close(); }Di2015NewLine    if (conn != null) { conn.Close(); }Di2015NewLine}Di2015NewLine
15454990Di2015UniqueSeparatorpublic string SqlDi2015NewLine{Di2015NewLine    get { return _sql; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        if (value == _sql) return;Di2015NewLine        OnPropertyChanged("Sql");Di2015NewLine        _sql = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15454990Di2015UniqueSeparatorPropertyChanged
15454990Di2015UniqueSeparatorSql
15454990Di2015UniqueSeparator_sql
15454990Di2015UniqueSeparatorPropertyChanged
15455078Di2015UniqueSeparatorfor (int i = 0; i < 100000000; i++)Di2015NewLine    y += t.X;Di2015NewLine
15455078Di2015UniqueSeparator0000005a  xor         r11d,r11d                           ; i = 0Di2015NewLine0000005d  mov         eax,dword ptr [rbx+0Ch]             ; read t.XDi2015NewLine00000060  add         r11d,4                              ; i += 4Di2015NewLine00000064  cmp         r11d,5F5E100h                       ; test i < 100000000Di2015NewLine0000006b  jl          0000000000000060                    ; for (;;)Di2015NewLine
15455078Di2015UniqueSeparatorsw.Stop();Di2015NewLineConsole.WriteLine("{0} msec, {1}", sw.ElapsesMilliseconds, y);Di2015NewLine
15455078Di2015UniqueSeparator0000005d  xor         ebp,ebp                             ; y = 0Di2015NewLine0000005f  mov         eax,dword ptr [rbx+0Ch]          Di2015NewLine00000062  movsxd      rdx,eax                             ; rdx = t.XDi2015NewLine00000065  nop         word ptr [rax+rax+00000000h]        ; align branch targetDi2015NewLine00000070  lea         rax,[rdx+rbp]                       ; y += t.XDi2015NewLine00000074  lea         rcx,[rax+rdx]                       ; y += t.XDi2015NewLine00000078  lea         rax,[rcx+rdx]                       ; y += t.XDi2015NewLine0000007c  lea         rbp,[rax+rdx]                       ; y += t.XDi2015NewLine00000080  add         r11d,4                              ; i += 4Di2015NewLine00000084  cmp         r11d,5F5E100h                       ; test i < 100000000Di2015NewLine0000008b  jl          0000000000000070                    ; for (;;)Di2015NewLine
15455078Di2015UniqueSeparatory += t.X: 125 msecDi2015NewLiney += t.Y: 125 msecDi2015NewLine
15455110Di2015UniqueSeparatorDistinct
15455110Di2015UniqueSeparatorvar ddquery = (from dd in db.PRODUCTs select dd.pr_product).Distinct().ToList();Di2015NewLine
15455110Di2015UniqueSeparatorDataTextField
15455110Di2015UniqueSeparatorDataValueField
15455110Di2015UniqueSeparatorDataSource
15455110Di2015UniqueSeparatorList<string>
15455110Di2015UniqueSeparatorproduct.DataSource = ddquery;                Di2015NewLineproduct.DataBind();Di2015NewLine
15455220Di2015UniqueSeparatorControl.Invoke
15455220Di2015UniqueSeparatorBackgroundWorker
15455220Di2015UniqueSeparatorThreadPool
15455220Di2015UniqueSeparatorTaskFactory
15455220Di2015UniqueSeparator    semaphore = true;Di2015NewLine    int i = 0;Di2015NewLine    int j = 0;Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        semaphore = true;Di2015NewLine        ExecuteAsync(()=>Di2015NewLine            {Di2015NewLine                while (semaphore)Di2015NewLine                {Di2015NewLine                    //Dispatch a call to the UI thread to change the labelDi2015NewLine                    Invoke((MethodInvoker)(() => ChangeLabel(label1, i.ToString())));Di2015NewLine                    i++;Di2015NewLine                    Thread.Sleep(50);Di2015NewLine                    if (i > 5000)Di2015NewLine                    {Di2015NewLine                        i = 0;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            });Di2015NewLine    }Di2015NewLineDi2015NewLine    //Executes a function on a ThreadPool threadDi2015NewLine    private void ExecuteAsync(Action action)Di2015NewLine    {Di2015NewLine        ThreadPool.QueueUserWorkItem(Di2015NewLine            obj => action());Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ChangeLabel(Label label, string labelText)Di2015NewLine    {Di2015NewLine        label.Text = labelText;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        semaphore = false;Di2015NewLine        ExecuteAsync(() =>Di2015NewLine                {Di2015NewLine                    while (!semaphore)Di2015NewLine                    {Di2015NewLine                        //Dispatch a call to the UI thread to change the labelDi2015NewLine                        Invoke((MethodInvoker)(() => ChangeLabel(label2, j.ToString())));Di2015NewLine                        j++;Di2015NewLine                        Thread.Sleep(50);Di2015NewLine                        if (j > 5000)Di2015NewLine                        {Di2015NewLine                            i = 0;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                });Di2015NewLine    }Di2015NewLine
15455229Di2015UniqueSeparatorFiddler.FiddlerApplication.BeforeRequest += sess=>Di2015NewLine    {Di2015NewLine        Console.WriteLine("URL: " + sess.fullUrl);Di2015NewLine        sess.bBufferResponse = true;Di2015NewLine    };Di2015NewLineDi2015NewLineDi2015NewLineFiddler.FiddlerApplication.Startup(8877, true, true);Di2015NewLineDi2015NewLineConsole.ReadLine();Di2015NewLineDi2015NewLineFiddler.FiddlerApplication.Shutdown();Di2015NewLineSystem.Threading.Thread.Sleep(750);Di2015NewLine
15455231Di2015UniqueSeparatorintegrated security=true
15455231Di2015UniqueSeparatorUser Id=[username];Di2015NewLinePassword=[password];
15455547Di2015UniqueSeparatorclass PDi2015NewLine{Di2015NewLine    Foo foo = whatever;Di2015NewLine    foo.bar();Di2015NewLine}Di2015NewLine
15455547Di2015UniqueSeparatorclass PDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Foo foo = whatever;Di2015NewLine        foo.bar();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15455584Di2015UniqueSeparatorI
15455584Di2015UniqueSeparatorK
15455584Di2015UniqueSeparatorK ExecuteStoredProcedure<I, K>(...)Di2015NewLine
15455704Di2015UniqueSeparatorvar t = tweet.GetType();Di2015NewLineforeach (var p in t.GetProperties())Di2015NewLine{Di2015NewLine    Console.WriteLine(p.Name);Di2015NewLine}Di2015NewLineforeach (var f in t.GetFields())Di2015NewLine{Di2015NewLine    Console.WriteLine(f.Name);Di2015NewLine}Di2015NewLine
15455704Di2015UniqueSeparatorPropertyInfo
15455704Di2015UniqueSeparatorFieldInfo
15455967Di2015UniqueSeparatorAnimation
15455967Di2015UniqueSeparatorAnimation
15455967Di2015UniqueSeparatorTimeLine
15455967Di2015UniqueSeparatorAttachedProperty
15455967Di2015UniqueSeparatorAnimation
15455967Di2015UniqueSeparator <Storyboard x:Key="ProgressAnimation" Timeline.DesiredFrameRate="30" ...........Di2015NewLine
15455967Di2015UniqueSeparatorResource
15455967Di2015UniqueSeparatorBrushes
15455967Di2015UniqueSeparatorStaticResource
15456003Di2015UniqueSeparatorImage
15456003Di2015UniqueSeparatorpictureBox1.Image = Properties.Resources.face2;Di2015NewLine
15456003Di2015UniqueSeparatorpictureBox1.ImageLocation = pictureid + ".jpg"; //assuming you include it in the same folder as the exeDi2015NewLine
15456003Di2015UniqueSeparatorImage face2 = Image.FromFile(pictureid + ".jpg");Di2015NewLinepictureBox1.Image = face2;Di2015NewLine
15456016Di2015UniqueSeparatoropenLogin.Show()
15456016Di2015UniqueSeparatoropenLogin.ShowDialog()
15456126Di2015UniqueSeparatorCountdownEvent countdown = new CountdownEvent(files.Count()); 
15456126Di2015UniqueSeparatorcountdown.Wait()
15456126Di2015UniqueSeparatorTask.WaitAll(tasks)
15456126Di2015UniqueSeparatorforeach (var f in files)Di2015NewLine{Di2015NewLine    Task.Run(() =>Di2015NewLine    {Di2015NewLine         var whateveryDoWithIt = f.File; Di2015NewLine    }Di2015NewLine}
15456126Di2015UniqueSeparatorforeach (var f in files)Di2015NewLine{Di2015NewLine    var ftemp = f;Di2015NewLine    Task.Run(() =>Di2015NewLine    {Di2015NewLine         var whateveryDoWithIt = ftemp.File; Di2015NewLine    }Di2015NewLine}
15456213Di2015UniqueSeparatorResponse.Redirect("/page.aspx?_rnd=" + RndNumber);Di2015NewLine
15456213Di2015UniqueSeparatorRndNumber
15456306Di2015UniqueSeparatorUser.IsInRole()
15456306Di2015UniqueSeparator if(User.IsInRole("admin"))Di2015NewLine    return _db.Items;Di2015NewLine else Di2015NewLine {Di2015NewLine    string name = User.Identity.Name;Di2015NewLine    return _db.Items.Where(d => d.CreatedBy.Equals(name)));Di2015NewLine }Di2015NewLine
15456306Di2015UniqueSeparatorUser.Identity.Name
15456306Di2015UniqueSeparatorUser.Identity
15456359Di2015UniqueSeparatorJintEngine engine = new JintEngine();Di2015NewLine// source should be a string containing the contents of your JavaScript fileDi2015NewLineengine.Run(source);Di2015NewLineengine.SetParameter("altitudeKm", altitudeKm);Di2015NewLineengine.SetParameter("latitudeDegrees", latitudeDegrees);Di2015NewLineengine.SetParameter("longitudeDegrees", "longitudeDegrees");Di2015NewLineengine.SetParameter("yearFloat", yearFloat);Di2015NewLinevar result = engine.Run(@"Di2015NewLine    var wmm = new WorldMagneticModel();Di2015NewLine    return wmm.declination(altitudeKm, latitudeDegrees, longitudeDegrees, yearFloat);Di2015NewLine");Di2015NewLinereturn result;Di2015NewLine
15456681Di2015UniqueSeparatorViewBox
15456681Di2015UniqueSeparator<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        x:Class="WpfApplication13.MainWindow"Di2015NewLine        Title="MainWindow" x:Name="UI" Width="459" Height="293"  >Di2015NewLine    <Viewbox Stretch="Uniform">Di2015NewLine        <Grid Width="1024" Height="768" >Di2015NewLine            <All your content .....Di2015NewLine        </Grid>Di2015NewLine    </Viewbox>Di2015NewLine</Window>Di2015NewLine
15456772Di2015UniqueSeparatorpublic enum ActivityStateDi2015NewLine{Di2015NewLine    Sending,Di2015NewLine    Receiving,Di2015NewLine    IdleDi2015NewLine}Di2015NewLineDi2015NewLinepublic interface IDataTransferManagerDi2015NewLine{Di2015NewLine    // This event will fire when the activity state changes.Di2015NewLine    // note that Action<T> is introduced in .NET 3.5Di2015NewLine    // if you're using .NET 2.0, you can use a delegate.Di2015NewLine    event Action<ActivityState> DataActivityStateChange;Di2015NewLineDi2015NewLineDi2015NewLine    void Send(byte[] data);Di2015NewLine    //byte[] Receive(); Di2015NewLine    // ... more methods ... //Di2015NewLineDi2015NewLine}Di2015NewLine
15456772Di2015UniqueSeparatorpublic class TcpConnection : IDataTransferManagerDi2015NewLine{Di2015NewLine    public event Action<ActivityState> DataActivityStateChange;Di2015NewLineDi2015NewLine    public void Send(byte[] data)Di2015NewLine    {Di2015NewLine        // we're sending data. fire the change eventDi2015NewLine        FireDataActivityStateChange(ActivityState.Sending);Di2015NewLineDi2015NewLine        //TODO: send the dataDi2015NewLineDi2015NewLine        // we're done sending. Fire the change eventDi2015NewLine        FireDataActivityStateChange(ActivityState.Idle);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    private void FireDataActivityStateChange(ActivityState state)Di2015NewLine    {Di2015NewLine        // helper method, so I don't have to check the event Di2015NewLine        // to avoid null reference exceptions.Di2015NewLine        if (DataActivityStateChange != null)Di2015NewLine            DataActivityStateChange(state);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
15456772Di2015UniqueSeparatorclass MyForm // :FormDi2015NewLine{Di2015NewLine    IDataTransferManager dataManager;Di2015NewLineDi2015NewLine    public MyForm()Di2015NewLine    {   // here, usually an instance will be passed in, Di2015NewLine        // so there's only one instance throughout the application.Di2015NewLine        // let's new up an instance for explanation purposes.Di2015NewLine        dataManager = new TcpConnection();Di2015NewLineDi2015NewLine        dataManager.DataActivityStateChange += (state) => Di2015NewLine        {Di2015NewLine            // NOTE: if you don't like inline, Di2015NewLine            // you can point this labda to a method.Di2015NewLineDi2015NewLine            switch (state)Di2015NewLine            {Di2015NewLine                case ActivityState.Sending:Di2015NewLine                    // change the image to the spinning toilet ballDi2015NewLine                    break;Di2015NewLine                case ActivityState.Receiving:Di2015NewLine                    // change the image to the spinning toilet ball, but reverse :PDi2015NewLine                    break;Di2015NewLine                case ActivityState.Idle:Di2015NewLine                    // hide it ?Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
15457091Di2015UniqueSeparatorasync void
15457091Di2015UniqueSeparatorasync
15457091Di2015UniqueSeparatorTask.WhenAll
15457091Di2015UniqueSeparatorpublic async static Task<Uri> VerifyFtpAsync(IPAddress ip)Di2015NewLine{Di2015NewLine  tryDi2015NewLine  {Di2015NewLine    ...Di2015NewLine    return serverUri;Di2015NewLine  }Di2015NewLine  catch (WebException)Di2015NewLine  {Di2015NewLine    return null;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinevar ipTasks = ips.Select(ip => VerifyFtpAsync(ip));Di2015NewLinevar allResults = await Task.WhenAll(ipTasks);Di2015NewLinevar result = allResults.Where(url => url != null).ToArray();Di2015NewLine
15457298Di2015UniqueSeparatorprivate List<Card> NewDeck(Suit CardSuit, FaceValue CardValue, int iValue)Di2015NewLine{Di2015NewLine   for (int i = 0; i <= 3; i++) Di2015NewLine   {Di2015NewLine       for (int j = 0; j <= 12; j++) Di2015NewLine       {Di2015NewLine           Card newCard = new Card(AllSuit [i], AllFaces[j], iValue[j]);Di2015NewLine       }Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLine var AllSuit = new Suit[]Di2015NewLine    {Di2015NewLine      Suit.Spades,Di2015NewLine      Suit.Hearts,Di2015NewLine      Suit.Clubs,Di2015NewLine      Suit.DiamondsDi2015NewLine    };Di2015NewLineDi2015NewLine    //Do the same for AllFaces...Di2015NewLine
15457352Di2015UniqueSeparatorHtml.ActionLink(article.Title, Di2015NewLine                "Item",   // <-- ActionMethodDi2015NewLine                "Login",  // <-- Controller Name.Di2015NewLine                new { ItemID = Model.ItemID }, // <-- Route arguments.Di2015NewLine                null  // <-- htmlArguments .. which are none. You need this valueDi2015NewLine                      //     otherwise you call the WRONG method ...Di2015NewLine                )Di2015NewLine
15457531Di2015UniqueSeparatorinterfaces.dll
15457531Di2015UniqueSeparatorinterfaces.dll
15457531Di2015UniqueSeparatorinterfaces.dll
15457531Di2015UniqueSeparatorinterfaces.dll
15457557Di2015UniqueSeparatorList<string> matches = new List<string>(); Di2015NewLineDirectoryInfo C = new DirectoryInfo("C:\\\\");Di2015NewLinevar rootFiles = C.GetFiles();Di2015NewLinevar rootDirs = C.GetDirectories("*", SearchOption.TopDirectoryOnly).Where(dir => !dir.Name.Equals("System Volume Information") && !dir.Name.Equals("RECYCLER") && !dir.Name.Equals("WINDOWS"));Di2015NewLineDi2015NewLineforeach (var rf in rootFiles)Di2015NewLine{Di2015NewLine    if (rf.Name.Equals("MCRInstaller.exe"))Di2015NewLine    {Di2015NewLine        matches.Add(rf.FullName);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineforeach (var rdir in rootDirs)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        var dirFiles = rdir.GetFiles("*", SearchOption.AllDirectories);Di2015NewLineDi2015NewLine        foreach (var aFile in dirFiles)Di2015NewLine        {Di2015NewLine            if (aFile.Name.Equals("MCRInstaller.exe"))Di2015NewLine            {Di2015NewLine                matches.Add(aFile.FullName);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (UnauthorizedAccessException err)Di2015NewLine    {Di2015NewLine        using (StreamWriter errLog = File.AppendText("errors.log"))Di2015NewLine        {Di2015NewLine            string dt = "[" + DateTime.Now + "]: ";Di2015NewLine            errLog.Write(dt);Di2015NewLine            errLog.Write(err.StackTrace);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineforeach (string match in matches)Di2015NewLine{Di2015NewLine    //do some stuff with your list of matchesDi2015NewLine}Di2015NewLine
15457604Di2015UniqueSeparatorprivate short ConvertBytes(byte a, byte b, boolean flip){Di2015NewLineDi2015NewLine    ByteBuffer byteBuffer = ByteBuffer.allocate(2);Di2015NewLine    byteBuffer.order(ByteOrder.LITTLE_ENDIAN);Di2015NewLine    byteBuffer.put(a);Di2015NewLine    byteBuffer.put(b);Di2015NewLine    short num = byteBuffer.getShort(0);Di2015NewLineDi2015NewLine    //this.Weight = num;Di2015NewLine    int num2 = 0x3720 - num;Di2015NewLine    if (num2 > -1){Di2015NewLine        return (short)num2;Di2015NewLine    }Di2015NewLine    return 1;Di2015NewLine}Di2015NewLine
15457712Di2015UniqueSeparatorfor (int i = 0; i < dataTable.Rows.Count; i++)Di2015NewLine{Di2015NewLine    var tempRow = dataTable.Rows[i];Di2015NewLine    var temp = dataTable.Rows[i][0];Di2015NewLine    for (int j = 0; j < dataTable.Rows.Count; j++)Di2015NewLine    {Di2015NewLine        DataRow rows = dataTable.Rows[j];Di2015NewLine        if (temp == rows[0].ToString())Di2015NewLine        {Di2015NewLine            tempdatatable.Rows.Add(tempRow[0], tempRow[1]);Di2015NewLine            dataTable.Rows.Remove(rows);      //Update happen hereDi2015NewLine        }Di2015NewLine        tempdatatable.DefaultView.Sort = "gscitations DESC";Di2015NewLine        dataGridView1.DataSource = tempdatatable;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15457775Di2015UniqueSeparatorGetSampleAsync
15457775Di2015UniqueSeparatorprivate void OnMoreDataDownloaded(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // We're on an arbitrary thread, so instead of reportingDi2015NewLine    // a sample here we should just pulse.Di2015NewLine    lock (buffering_lock) {Di2015NewLine        is_buffering = false;Di2015NewLine        Monitor.Pulse(buffering_lock);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprotected override void GetSampleAsync()Di2015NewLine{Di2015NewLine    while (we_need_more_data) {Di2015NewLine        lock (buffering_lock) {Di2015NewLine            is_buffering = true;Di2015NewLine            while (is_buffering) {Di2015NewLine                Monitor.Wait(buffering_lock);Di2015NewLine            }Di2015NewLine    }Di2015NewLineDi2015NewLine    // code code codeDi2015NewLine    ReportGetSampleCompleted(sample);Di2015NewLine}Di2015NewLine
15457969Di2015UniqueSeparator<tr id="thisRowId">Di2015NewLine  .Di2015NewLine  .Di2015NewLine  .Di2015NewLine <td>Di2015NewLine    <a id="deleteBtn" data-rowId="thisRowId">delete</a>Di2015NewLine </td>Di2015NewLine<tr>Di2015NewLine
15457969Di2015UniqueSeparator$('#deleteBtn').click(function(){Di2015NewLineDi2015NewLinevar id =   $(this).data('rowId'); // or use $(this).closest('tr').attr('id');Di2015NewLineDi2015NewLine$.ajax({Di2015NewLineurl: "controller/action",Di2015NewLinetype: 'Delete', // assuming your action is marked with HttpDelete Attribute or do not need this option if action is marked with HttpGet attributeDi2015NewLinedata: {'id' : "'" + id  "'"} // pass in id hereDi2015NewLinesuccess : yoursuccessfunctionDi2015NewLine});Di2015NewLineDi2015NewLine};Di2015NewLine
15457975Di2015UniqueSeparator.app
15457975Di2015UniqueSeparatorContent/MacOS/[name]
15457975Di2015UniqueSeparatorSystem.Diagnosticts.Process.Start("/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal");Di2015NewLine
15457975Di2015UniqueSeparatorSystem.Diagnostics.Process.Start("/Applications/TextEdit.app/Contents/MacOS/TextEdit");Di2015NewLine
15457975Di2015UniqueSeparatorContents/MacOS
15457975Di2015UniqueSeparator/usr/local/bin/mono
15457975Di2015UniqueSeparator/usr/bin/mono
15457975Di2015UniqueSeparatorSystem.Diagnostics.Process.Start("/usr/bin/local/mono /Users/Ilya/Projects/SomeApp.exe");Di2015NewLine
15457975Di2015UniqueSeparator.exe
15458175Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Form2 frm = new Form2();Di2015NewLine    frm.FormClosed+= Form2Closed;Di2015NewLine    frm.Show();Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate void Form2Closed(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //frm has been closedDi2015NewLine}Di2015NewLine
15458216Di2015UniqueSeparatorsealed
15458216Di2015UniqueSeparatorprivate
15458216Di2015UniqueSeparatorsealed
15458236Di2015UniqueSeparatorException ex = null;Di2015NewLinetryDi2015NewLine{Di2015NewLine    //Do workDi2015NewLine}Di2015NewLinecatch (SqlException sqlEx)Di2015NewLine{Di2015NewLine    ex = sqlEx;Di2015NewLine    if (ex.Number == -2)Di2015NewLine    {Di2015NewLine       //..Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        //..Di2015NewLine    }Di2015NewLine}Di2015NewLinecatch (Exception generalEx)Di2015NewLine{Di2015NewLine  ex = generalEx;Di2015NewLine}Di2015NewLinefinally()Di2015NewLine{Di2015NewLine  if (ex != null) debugLogGeneralException(ex);Di2015NewLine}Di2015NewLine
15458281Di2015UniqueSeparatorusing System.Linq
15458281Di2015UniqueSeparatorToList()
15458281Di2015UniqueSeparatorIEnumerable<T>
15458450Di2015UniqueSeparatorvar sortedItems = items.OrderBy(i => i.c1);Di2015NewLine
15458450Di2015UniqueSeparatorIEnumerable<ABC>
15458450Di2015UniqueSeparatorToList
15458450Di2015UniqueSeparatorList<ABC> sortedItems = items.OrderBy(i => i.c1).ToList();Di2015NewLine
15458711Di2015UniqueSeparatorconst
15458711Di2015UniqueSeparatorconst
15458711Di2015UniqueSeparatorconst
15458711Di2015UniqueSeparatorreadonly
15458889Di2015UniqueSeparatorNullable.GetUnderlyingType(objProperty.PropertyType)
15458889Di2015UniqueSeparatorToString()
15458889Di2015UniqueSeparatorType.GetType(...)
15458889Di2015UniqueSeparatorelse
15458889Di2015UniqueSeparatorType.GetType(objProperty.PropertyType.ToString())
15458889Di2015UniqueSeparatorobjProperty.PropertyType
15458944Di2015UniqueSeparatorBitmapImage
15458944Di2015UniqueSeparatorvar file = await StorageFile.GetFileFromPathAsync(filepath);Di2015NewLinevar stream = await file.OpenReadAsync();Di2015NewLinevar bitmap = new BitmapImage();Di2015NewLineawait bitmap.SetSourceAsync(stream);Di2015NewLine
15459129Di2015UniqueSeparatorFormClosingEventArgs.CloseReason
15459129Di2015UniqueSeparatorCloseReason.UserClosing
15459129Di2015UniqueSeparatorCloseReason.ApplicationExitCall
15459129Di2015UniqueSeparatorCloseReason
15459222Di2015UniqueSeparatorpublic void SpecialList <T>() Di2015NewLine
15459222Di2015UniqueSeparatorvoid
15459222Di2015UniqueSeparatorT
15459222Di2015UniqueSeparatorpublic void MyGenericMethod<TOther>()Di2015NewLine{Di2015NewLine    List<T> x = new List<TOther>();Di2015NewLine}Di2015NewLine
15459222Di2015UniqueSeparatorpublic SpecialList()Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15459222Di2015UniqueSeparatorList<T>
15459222Di2015UniqueSeparatorList <T>
15459372Di2015UniqueSeparatorstart a timer
15459372Di2015UniqueSeparatorRegisterWaitForSingleObject
15459372Di2015UniqueSeparatorThreadPool.RegisterWaitForSingleObject(Di2015NewLine    new AutoResetEvent(false),Di2015NewLine    (state, timedOut) =>Di2015NewLine    {Di2015NewLine        // this callback will execute 24 hours laterDi2015NewLine        // here you could perform your database updateDi2015NewLine    },Di2015NewLine    null,Di2015NewLine    TimeSpan.FromHours(24),Di2015NewLine    trueDi2015NewLine);Di2015NewLine
15459769Di2015UniqueSeparatoron
15459769Di2015UniqueSeparator$("body").on('click', '#resultDiv', function(e) { });Di2015NewLine
15459769Di2015UniqueSeparatorresultDiv_1
15459769Di2015UniqueSeparatorresultDiv_2
15459769Di2015UniqueSeparator$("body").on('click', 'div[id^=resultDiv]', function(e) { });Di2015NewLine
15459769Di2015UniqueSeparatoraddClass
15459769Di2015UniqueSeparatorremoveClass
15459769Di2015UniqueSeparator<div id="resultDiv" class="result" data-some-var="some-param">Di2015NewLine    click meDi2015NewLine</div>   Di2015NewLine
15459769Di2015UniqueSeparator$("body").on('click', '.result', function(e) {Di2015NewLine    var param = $(this).attr('data-some-var');Di2015NewLine    //send or do something different according to the paramDi2015NewLine});Di2015NewLine
15459815Di2015UniqueSeparator<VisualStateManager.VisualStateGroups>Di2015NewLine    <VisualStateGroup x:Name="BorderStates">Di2015NewLineDi2015NewLine        <VisualState x:Name="BorderHighlight">Di2015NewLine            <Storyboard> ... </Storyboard>Di2015NewLine        </VisualState>Di2015NewLineDi2015NewLine        <VisualState x:Name="BorderNormal">Di2015NewLine            <Storyboard> ...  </Storyboard>Di2015NewLine        </VisualState>Di2015NewLineDi2015NewLine    </VisualStateGroup>Di2015NewLine    ...Di2015NewLine</VisualStateManager.VisualStateGroups>Di2015NewLine
15459815Di2015UniqueSeparatorprotected override void OnMouseEnter(MouseEventArgs e)Di2015NewLine{Di2015NewLine    VisualStateManager.GoToState(this, "BorderHighlight, false);Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnMouseLeave(MouseEventArgs e)Di2015NewLine{Di2015NewLine    VisualStateManager.GoToState(this, "BorderNormal, false);Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15459870Di2015UniqueSeparatorvar query = (from p in parentsDi2015NewLine             from c in p.ChildrenDi2015NewLine             select c)Di2015NewLine            .Distinct();Di2015NewLine
15460162Di2015UniqueSeparatorint lastRow = yourDataGridView.Rows.Count - 1;Di2015NewLineobject last_order_ID = yourDataGridView.Rows[lastRow].Cells["order_ID"].Value;Di2015NewLineyourTextBox.Text = Convert.ToString(last_order_ID);Di2015NewLine
15460285Di2015UniqueSeparator        String stringToSend = "123456";Di2015NewLine        serialPort1.Write(stringToSend.ToCharArray(), 0, stringToSend.Length);Di2015NewLine
15460363Di2015UniqueSeparator        Dog dog = new Dog("Bowser");Di2015NewLineDi2015NewLine        WeakReference dogRef = new WeakReference(dog);Di2015NewLine        Console.WriteLine(dogRef.IsAlive);Di2015NewLineDi2015NewLine        dog = null;Di2015NewLine        GC.Collect();Di2015NewLineDi2015NewLine        Console.WriteLine(dogRef.IsAlive);Di2015NewLine
15460582Di2015UniqueSeparatorDefaultMessageBufferSize
15460582Di2015UniqueSeparatorIConfigurationManager
15460582Di2015UniqueSeparatorGlobalHost.Configuration.DefaultMessageBufferSize = 2000;Di2015NewLine
15460582Di2015UniqueSeparatorDefaultMessageBufferSize
15460582Di2015UniqueSeparatorPersistentConnection
15460690Di2015UniqueSeparatorSemaphore
15460690Di2015UniqueSeparatorconst int MaxThreads = 4;Di2015NewLineSemaphore sem = new Semaphore(MaxThreads, MaxThreads);Di2015NewLinewhile (Queue.HasItems())Di2015NewLine{Di2015NewLine    sem.WaitOne();Di2015NewLine    var item = Queue.Dequeue();Di2015NewLine    Threadpool.QueueUserWorkItem(ProcessItem, item); // see belowDi2015NewLine}Di2015NewLine// When the queue is empty, you have to wait for all processingDi2015NewLine// threads to complete.Di2015NewLine// If you can acquire the semaphore MaxThreads times, all workers are doneDi2015NewLineint count = 0;Di2015NewLinewhile (count < MaxThreads)Di2015NewLine{Di2015NewLine    sem.WaitOne();Di2015NewLine    ++count;Di2015NewLine}Di2015NewLineDi2015NewLine// the code to process an itemDi2015NewLinevoid ProcessItem(object item)Di2015NewLine{Di2015NewLine    // cast the item to whatever type you need,Di2015NewLine    // and process it.Di2015NewLine    // when done processing, release the semaphoreDi2015NewLine    sem.Release();Di2015NewLine}Di2015NewLine
15460690Di2015UniqueSeparatorTask
15460690Di2015UniqueSeparatorThreadpool.QueueUserWorkItem
15460690Di2015UniqueSeparatorTask
15460690Di2015UniqueSeparatorQueueUserWorkItem
15460690Di2015UniqueSeparatorTask
15460723Di2015UniqueSeparatorSearch
15460723Di2015UniqueSeparatorname = name
15460723Di2015UniqueSeparatoronlyActive = true
15460723Di2015UniqueSeparatorSearch(name);Di2015NewLine
15460723Di2015UniqueSeparatorSearch(name, from: 1, to: 2);Di2015NewLine
15460799Di2015UniqueSeparator<Image Name="Image" Source="{Binding SourceUri}" Stretch="Fill"/>Di2015NewLine
15460799Di2015UniqueSeparatorScaleTransform
15460799Di2015UniqueSeparatorTranslateTransform
15460799Di2015UniqueSeparatorLayoutTransform
15460799Di2015UniqueSeparator<Grid SizeChanged="Grid_SizeChanged">Di2015NewLine    <Image Name="image" Source="{Binding SourceUri}">Di2015NewLine        <Image.LayoutTransform>Di2015NewLine            <ScaleTransform x:Name="scale"/>Di2015NewLine        </Image.LayoutTransform>Di2015NewLine    </Image>Di2015NewLine</Grid>Di2015NewLine
15460799Di2015UniqueSeparatorprivate void Grid_SizeChanged(object sender, SizeChangedEventArgs e)Di2015NewLine{Di2015NewLine    scale.ScaleX = e.NewSize.Width / image.Source.Width;Di2015NewLine    scale.ScaleY = e.NewSize.Height / image.Source.Height;Di2015NewLine}Di2015NewLine
15460805Di2015UniqueSeparator1
15460805Di2015UniqueSeparator12
15460805Di2015UniqueSeparatorselect  *Di2015NewLinefrom    CategoriesDi2015NewLinewhere   len(Category) <= 2Di2015NewLine
15460847Di2015UniqueSeparatorANDs
15460847Di2015UniqueSeparatorvar v1 = shifted & 0xfff; //3Di2015NewLinevar v2 = (shifted >> 12) & 0x1f; //2Di2015NewLinevar v3 = (shifted >> 17) & 0x1f; //1Di2015NewLinevar v4 = (shifted >> 22);Di2015NewLine
15461029Di2015UniqueSeparatorText
15461029Di2015UniqueSeparatornum1.Text = RandomClass.Next(1,6).ToString();Di2015NewLine
15461084Di2015UniqueSeparatorCreateDatabaseIfNotExists<TContext>Di2015NewLineDropCreateDatabaseAlways<TContext>Di2015NewLine
15461084Di2015UniqueSeparatorpublic class ContextInitializer : CreateDatabaseIfNotExists<Context>Di2015NewLine{Di2015NewLine    protected override void Seed(Context ctx)Di2015NewLine    {Di2015NewLine         // any seed dataDi2015NewLineDi2015NewLine    } Di2015NewLineDi2015NewLine}Di2015NewLine
15461084Di2015UniqueSeparatorprotected void Application_Start()Di2015NewLine{Di2015NewLine    AreaRegistration.RegisterAllAreas();Di2015NewLine    WebApiConfig.Register(GlobalConfiguration.Configuration);Di2015NewLine    FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);Di2015NewLine    RouteConfig.RegisterRoutes(RouteTable.Routes);Di2015NewLine    BundleConfig.RegisterBundles(BundleTable.Bundles);Di2015NewLine    AuthConfig.RegisterAuth();Di2015NewLine    AutoMapperConfig.RegisterConfig();Di2015NewLineDi2015NewLine    Database.SetInitializer(new ContextInitializer());Di2015NewLineDi2015NewLine    using (var context = new Context())Di2015NewLine    {Di2015NewLine        context.Database.Initialize(false);Di2015NewLine    }Di2015NewLineDi2015NewLine    if (!WebSecurity.Initialized)Di2015NewLine    {Di2015NewLine        WebSecurity.InitializeDatabaseConnection(Di2015NewLine            connectionStringName: "DefaultConnection", Di2015NewLine            userTableName: "User", Di2015NewLine            userIdColumn: "Id", Di2015NewLine            userNameColumn: "Email", Di2015NewLine            autoCreateTables: false);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15461128Di2015UniqueSeparatorTaskScheduler
15461128Di2015UniqueSeparatorasync
15461344Di2015UniqueSeparatorrobot
15461344Di2015UniqueSeparatorFighterBot
15461344Di2015UniqueSeparatorIRobot
15461344Di2015UniqueSeparatorFuel
15461344Di2015UniqueSeparatorFighterBot
15461344Di2015UniqueSeparatorvar robot3 = robot as FighterBot;Di2015NewLine
15461346Di2015UniqueSeparator    <Canvas Grid.Row="1" Grid.Column="1" ClipToBounds="True">Di2015NewLine        <TextBlock IsHitTestVisible="True" Opacity="0.5" Text="sdfsdfdsfdfhfkjahslkjfhsafhsakjhflkjsahflkjsahdflkjhsadfsdfkgljdsfkgjfdsjgdshf" />Di2015NewLine    </Canvas>Di2015NewLine
15461450Di2015UniqueSeparatorDataKeyNames
15461450Di2015UniqueSeparatorGridView
15461586Di2015UniqueSeparatorpublic ActionResult SomeAction()Di2015NewLine{Di2015NewLine    FormsAuthentication.SetAuthCookie("test", true);    Di2015NewLine    return RedirectToAction("FooBar");Di2015NewLine}Di2015NewLine
15461586Di2015UniqueSeparatorUser.Identity.Name
15461586Di2015UniqueSeparatorUser.Identity.Name
15461586Di2015UniqueSeparatorFormsAuthentication.SetAuthCookie
15461740Di2015UniqueSeparatorCanvas.SetLeft(c1, 25);Di2015NewLine
15461899Di2015UniqueSeparatorHandleProcessCorruptedStateExceptions
15461989Di2015UniqueSeparator public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            _Form1 = this;Di2015NewLine        }Di2015NewLine        public static Form1 _Form1;Di2015NewLineDi2015NewLine        public CheckBox chk { get { return checkBox1; } }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            Form2 gg = new Form2();Di2015NewLine            gg.ShowDialog();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
15461989Di2015UniqueSeparatorpublic partial class Form2 : FormDi2015NewLine    {Di2015NewLineDi2015NewLine        public Form2()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            this.FormClosed += new FormClosedEventHandler(Form2_FormClosed);Di2015NewLine        }Di2015NewLineDi2015NewLine        void Form2_FormClosed(object sender, FormClosedEventArgs e)Di2015NewLine        {Di2015NewLine            Form1._Form1.chk.Checked = false;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
15462001Di2015UniqueSeparatorprivate List<Card> NewDeck(Suit CardSuit, FaceValue CardValue, int iValue)Di2015NewLine
15462001Di2015UniqueSeparatorreturn NewDeck(Suit.Spades, FaceValue.Ace, iValue1);Di2015NewLine
15462001Di2015UniqueSeparatorprivate List<Card> NewDeck()Di2015NewLine
15462267Di2015UniqueSeparator    public void ProcessData()Di2015NewLine    {Di2015NewLine        int i = 1;Di2015NewLine        foreach(var item in File.ReadLines(path)) //This line has been editedDi2015NewLine        {Di2015NewLine            DataRow dtRow= dataTable.NewRow();Di2015NewLine            dtRow["ID"]= .... //some code here;Di2015NewLine            dtRow["Name"]= .... //some code here;Di2015NewLine            dtRow["Age"]= .... //some code here;Di2015NewLine            if (i%25 == 0) //you can change the 25 here to something elseDi2015NewLine            {Di2015NewLine                SaveData(/* table name */, /* dataTable */);Di2015NewLine            }Di2015NewLine            i++;Di2015NewLine        }Di2015NewLine        SaveData(/* table name */, /* dataTable */);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void SaveData(string tableName, DataTable dataTable )Di2015NewLine    {Di2015NewLine        //Some code HereDi2015NewLine        //After dumping data to DB, clear DataTableDi2015NewLine        dataTable.Rows.Clear();Di2015NewLine    }Di2015NewLine
15462275Di2015UniqueSeparatorObservableCollection
15462275Di2015UniqueSeparator.NET 4
15462275Di2015UniqueSeparatorBindingList
15462332Di2015UniqueSeparatorSystem.Web.Routing
15462332Di2015UniqueSeparatorIRouteHandler : IHttpHandler
15462332Di2015UniqueSeparatorGlobal.asax
15462332Di2015UniqueSeparatorSystem.Web.HttpApplication
15462332Di2015UniqueSeparatorApplication_Start
15462332Di2015UniqueSeparatorvoid Application_Start(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Code that runs on application startupDi2015NewLine    RouteTable.Routes.MapPageRoute("routeName",Di2015NewLine    "{controller}/{action}", "~/Store/View.aspx");Di2015NewLine}Di2015NewLine
15462332Di2015UniqueSeparatorIRouteHandler
15462332Di2015UniqueSeparatorIHttpHandler.ProcessRequest
15462332Di2015UniqueSeparatorApplication_BeginRequest
15462332Di2015UniqueSeparatorSystem.Web.Routing
15462332Di2015UniqueSeparatorUrlRoutingModule
15462332Di2015UniqueSeparatorIRouteHandler
15462332Di2015UniqueSeparatorIHttpHandler
15462332Di2015UniqueSeparatorStaticFileHandler
15462332Di2015UniqueSeparatorSystem.Web.Page
15462332Di2015UniqueSeparator.ashx
15462495Di2015UniqueSeparatorvar receivedConnectionStrings = objServiceClient.getConStrings("Oracle");Di2015NewLine
15462495Di2015UniqueSeparatorreceivedConnectionStrings
15462643Di2015UniqueSeparatornew Thread(() =>Di2015NewLine    {Di2015NewLine        function();Di2015NewLine    }){IsBackground = true}.Start();Di2015NewLine
15462648Di2015UniqueSeparatorIActionValidator<IActionSomething>
15462648Di2015UniqueSeparatorIActionValidator<IActionSomething>
15462648Di2015UniqueSeparatorIActionValidator<IAction>
15462648Di2015UniqueSeparatorT
15462648Di2015UniqueSeparatorin
15462648Di2015UniqueSeparatorIActionValidator<IAction>
15462648Di2015UniqueSeparatorv
15462648Di2015UniqueSeparatorValidate
15462648Di2015UniqueSeparatorValidate(IAction action, out string failure);Di2015NewLine
15462648Di2015UniqueSeparatorv
15462648Di2015UniqueSeparatorIActionValidator<IActionSomething>
15462648Di2015UniqueSeparatorIAction
15462648Di2015UniqueSeparatorv
15462648Di2015UniqueSeparatorIActionSomething
15462648Di2015UniqueSeparatorIActionValidator<IActionSomething>
15462711Di2015UniqueSeparatorWin32Exception
15462711Di2015UniqueSeparatorcatch (Win32Exception e)Di2015NewLine{  Di2015NewLine    Console.WriteLine("ErrorCode: {0}", e.ErrorCode);Di2015NewLine}Di2015NewLine
15462791Di2015UniqueSeparatorSession["name"] = TextBox1.Text.ToString();    Di2015NewLineDi2015NewLineLabel1.Text = Session["name"].ToString()Di2015NewLine
15462791Di2015UniqueSeparatorLabel1
15462791Di2015UniqueSeparatorSession[key]
15462791Di2015UniqueSeparatorobject
15462791Di2015UniqueSeparatorLabel1
15462791Di2015UniqueSeparatorSystem.Web.UI.WebControlers.Label
15462791Di2015UniqueSeparatoruser
15462791Di2015UniqueSeparatorusername
15462821Di2015UniqueSeparator>
15462821Di2015UniqueSeparator<
15462821Di2015UniqueSeparatorstring GetCommand()Di2015NewLine{Di2015NewLine    switch (rblShowRecords.SelectedItem.Text)Di2015NewLine    {Di2015NewLine        case "Show Active/Completed":Di2015NewLine            return ConfigurationManager.AppSettings["SelectAllRecords"].ToString();Di2015NewLine        case "Show Active":Di2015NewLine            return  ConfigurationManager.AppSettings["SelectActiveRecords"].ToString();Di2015NewLine        case "Show Completed":Di2015NewLine            return  ConfigurationManager.AppSettings["SelectCompletedRecords"].ToString();Di2015NewLine        default:Di2015NewLine            return "";Di2015NewLine    }Di2015NewLine}Di2015NewLine
15462821Di2015UniqueSeparatorif (IsPostBack) Di2015NewLine{ Di2015NewLine    CEDatabaseSource.SelectCommand = GetCommand();Di2015NewLine    CEDatabaseSource.DataBind(); Di2015NewLine}Di2015NewLine
15462821Di2015UniqueSeparatorprotected void rblShowRecords_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    CEDatabaseSource.SelectCommand = GetCommand();Di2015NewLine    CEDatabaseSource.DataBind(); //Commit the changes to the data source.Di2015NewLine    gvRecordList.DataBind(); //Update the GridViewDi2015NewLine}Di2015NewLine
15463024Di2015UniqueSeparatorServicePointManager.DefaultConnectionLimit
15463024Di2015UniqueSeparatorDefaultConnectionLimit
15463038Di2015UniqueSeparatorusing (var client = new SmtpClient("smtp.gmail.com", 587)Di2015NewLine{Di2015NewLine  Credentials = new NetworkCredential("yourmail@gmail.com", "yourpassword"),Di2015NewLine  EnableSsl = trueDi2015NewLine})Di2015NewLine{Di2015NewLine  client.Send("frommail@gmail.com", "tomail@gmail.com", "subject", message);Di2015NewLine}Di2015NewLine
15463104Di2015UniqueSeparatorDeck
15463104Di2015UniqueSeparatorprivate List<Card> NewDeck()
15463104Di2015UniqueSeparatorNewDeck().Add(newCard);
15463104Di2015UniqueSeparatorList<Card>
15463104Di2015UniqueSeparatorNewDeck()
15463104Di2015UniqueSeparatorList<Card> myDeck = new List<Card>();
15463104Di2015UniqueSeparatorNewDeck().Add(newCard);
15463104Di2015UniqueSeparatormyDeck.Add(newCard);
15463104Di2015UniqueSeparatorreturn NewDeck();
15463104Di2015UniqueSeparatorreturn myDeck;
15463105Di2015UniqueSeparatorpublic class ProjectDi2015NewLine{Di2015NewLine    public virtual int Id { get; set; }Di2015NewLineDi2015NewLine    public virtual string Name { get; set; }Di2015NewLineDi2015NewLine    public override bool Equals(Object obj) Di2015NewLine    {Di2015NewLine        if (obj is Project)Di2015NewLine        {Di2015NewLine            var that = obj as Project;Di2015NewLine            return this.Id == that.Id && this.Name == that.Name;Di2015NewLine        }Di2015NewLineDi2015NewLine        return false; Di2015NewLine    }Di2015NewLine}Di2015NewLine
15463176Di2015UniqueSeparatorstype
15463176Di2015UniqueSeparatorquery
15463176Di2015UniqueSeparatorquery = "SELECT [id], [st_rollno], [st_name], [theory], [ttotal], [lab], [ltotal] FROM [Attendence_Subject_Wise] WHERE (([branch_name] = @branch_name) AND ([scode] = @scode) AND ([sem_no] = @sem_no) AND ([sess_no] = @sess_no)) ORDER BY [st_rollno]";Di2015NewLine
15463176Di2015UniqueSeparatorquery = "SELECT [id], [st_rollno], [st_name], [theory], [ttotal], [lab], [ltotal], '' as tutorial, '' as tutotal FROM [Attendence_Subject_Wise] WHERE (([branch_name] = @branch_name) AND ([scode] = @scode) AND ([sem_no] = @sem_no) AND ([sess_no] = @sess_no)) ORDER BY [st_rollno]";Di2015NewLine
15463176Di2015UniqueSeparatorprotected void GridView_DataBound(object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine    if (stype.Equals("T-L"))Di2015NewLine    {Di2015NewLine        MyGridView.Columns[7].Visible = false;Di2015NewLine        MyGridView.Columns[8].Visible = false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15463176Di2015UniqueSeparator<GridView ID="MyGridView" OnDataBound="GridView_DataBound">Di2015NewLine
15463442Di2015UniqueSeparatorpublic string FirstName { get; set; }Di2015NewLine
15463442Di2015UniqueSeparatorproperty
15463442Di2015UniqueSeparatorfields
15463528Di2015UniqueSeparatorpublic LoginPage()Di2015NewLine{Di2015NewLine    this.InitializeComponent();Di2015NewLine    // Register for the window resize eventDi2015NewLine    Window.Current.SizeChanged += WindowSizeChanged;  Di2015NewLine}Di2015NewLine
15463528Di2015UniqueSeparatorprivate void WindowSizeChanged(object sender, Windows.UI.Core.WindowSizeChangedEventArgs e)Di2015NewLine{Di2015NewLine    // Obtain view state by explicitly querying for itDi2015NewLine    ApplicationViewState viewState = ApplicationView.Value;Di2015NewLine    if (viewState == ApplicationViewState.Filled)Di2015NewLine    {Di2015NewLine        System.Diagnostics.Debug.WriteLine("viewState is Filled");Di2015NewLine    }Di2015NewLine    else if (viewState == ApplicationViewState.FullScreenLandscape)Di2015NewLine    {Di2015NewLine        System.Diagnostics.Debug.WriteLine("viewState is FullScreenLandscape");Di2015NewLine    }Di2015NewLine    else if (viewState == ApplicationViewState.Snapped)Di2015NewLine    {Di2015NewLine        System.Diagnostics.Debug.WriteLine("viewState is Snapped");Di2015NewLine        //Activate the Snapped stateDi2015NewLine        VisualStateManager.GoToState(this, "Snapped", true);Di2015NewLine    }Di2015NewLine    else if (viewState == ApplicationViewState.FullScreenPortrait)Di2015NewLine    {Di2015NewLine        System.Diagnostics.Debug.WriteLine("viewState is FullScreenPortrait");Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        System.Diagnostics.Debug.WriteLine("viewState is something unexpected");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15463549Di2015UniqueSeparatorResponse.Redirect("downloadfile.aspx?" + ...);Di2015NewLine
15463549Di2015UniqueSeparatorlocation.href = "downloadfile.aspx?" + ...;Di2015NewLine
15463600Di2015UniqueSeparatorVector3
15463600Di2015UniqueSeparatorVector4
15463779Di2015UniqueSeparatorMargin.Top
15463779Di2015UniqueSeparatorMargin.Left
15463779Di2015UniqueSeparatorellipse.Margin = new Thickness(left, top, 0, 0);Di2015NewLine
15463956Di2015UniqueSeparatorExitReadLock()
15463956Di2015UniqueSeparatorSynchronizationLockException
15463956Di2015UniqueSeparatorrwlock.EnterReadLock();Di2015NewLinerwlock.ExitReadLock();Di2015NewLine// This should throw a SynchronizationLockException but doesn'tDi2015NewLinerwlock.ExitReadLock();Di2015NewLine// At this point, rwlock.CurrentReaderCount = 0x0fffffffDi2015NewLine
15463956Di2015UniqueSeparatorExitReadLock()
15463956Di2015UniqueSeparatorEnterReadLock()
15463956Di2015UniqueSeparatorReaderWriterLockSlim
15463956Di2015UniqueSeparatorLockRecursionPolicy.NoRecursion
15463956Di2015UniqueSeparatorLockRecursionPolicy.SupportsRecursion
15463956Di2015UniqueSeparatorExitReadLock()
15463956Di2015UniqueSeparatorvar reader = new Thread(() =>Di2015NewLine{Di2015NewLine    var entered = false;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        rwlock.EnterReadLock();Di2015NewLine        entered = true;Di2015NewLine        s_logger.Info("Enter");Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        if (entered) rwlock.ExitReadLock();Di2015NewLine    }Di2015NewLine});Di2015NewLine
15463999Di2015UniqueSeparator   List<Card> shuffledDeck = new List<Card> ();Di2015NewLineDi2015NewLine   while (myDeck.Count > 0)Di2015NewLine   {Di2015NewLine      int c = myDeck.Count;Di2015NewLineDi2015NewLine      int n = rNumber.Next (0, c);Di2015NewLine      var value = myDeck[n];Di2015NewLine      shuffledDeck.Add(value);Di2015NewLine      myDeck.Remove(value);Di2015NewLineDi2015NewLine   }Di2015NewLine
15464082Di2015UniqueSeparatorprotected void gvRecordList_RowEditing(object sender, System.Web.UI.WebControls.GridViewEditEventArgs e)Di2015NewLine{Di2015NewLine    gvRecordList.EditIndex = e.NewEditIndex;Di2015NewLine    gvRecordList.DataSource = yourDataSource;Di2015NewLine    gvRecordList.DataBind();Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprotected void gvRecordList_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    gvRecordList.EditIndex = -1; // this is waht you need to do to reset your GridView from Edit ModeDi2015NewLine    gvRecordList.DataSource = yourDataSource;Di2015NewLine    gvRecordList.DataBind();Di2015NewLine}Di2015NewLine
15464116Di2015UniqueSeparatorCount() > 0
15464116Di2015UniqueSeparatorAny
15464116Di2015UniqueSeparatorr => r.UsersDi2015NewLine      .Count(u => u.UserName == user.Identity.Name) > 0Di2015NewLine
15464116Di2015UniqueSeparatorr => r.UsersDi2015NewLine      .Any(u => u.UserName == user.Identity.Name)Di2015NewLine
15464252Di2015UniqueSeparatorstatic class DerivedClassDi2015NewLine{Di2015NewLine    public static string GetVal()Di2015NewLine    {Di2015NewLine        return GetValInternal();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string GetValInternal()Di2015NewLine    {Di2015NewLine        return "Hello";Di2015NewLine    }Di2015NewLine}Di2015NewLine
15464252Di2015UniqueSeparatorclass SomeClassDi2015NewLine{Di2015NewLine    private static class DerivedClassDi2015NewLine    {Di2015NewLine        public static string GetVal()Di2015NewLine        {Di2015NewLine            return "Hello";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15464252Di2015UniqueSeparatorclass SomeClassDi2015NewLine{Di2015NewLine    private static string GetVal()Di2015NewLine    {Di2015NewLine        return "Hello";Di2015NewLine    }Di2015NewLine}Di2015NewLine
15464482Di2015UniqueSeparatorsplitArray = Regex.Split(subject, Di2015NewLine    @"\\t        # Match a tabDi2015NewLine    (?=         # if the following regex matches after it:Di2015NewLine     (?:        # Match...Di2015NewLine      [^""]*""  # Any number of non-quotes, followed by a quoteDi2015NewLine      [^""]*""  # ditto, to ensure an even number of quotesDi2015NewLine     )*         # Repeat as many times as neededDi2015NewLine     [^""]*     # Then match any remaining non-quote charactersDi2015NewLine     $          # until the end of the string.Di2015NewLine    )           # End of lookahead assertion", Di2015NewLine    RegexOptions.IgnorePatternWhitespace);Di2015NewLine
15464517Di2015UniqueSeparatorpublic static
15464517Di2015UniqueSeparatorclass
15464517Di2015UniqueSeparatorpublic class AClassDi2015NewLine{Di2015NewLine    public void DoSomething() {}Di2015NewLine    public static void DoSomethingElse() {}Di2015NewLine}Di2015NewLine
15464517Di2015UniqueSeparatorAClass.DoSomethingElse(); // no object reference requiredDi2015NewLineAClass.DoSomething(); // will give compiler error, since you have no object reference.Di2015NewLinevar anObject = new AClass();Di2015NewLineanObject.DoSomething(); // will work fine.Di2015NewLineanObject.DoSomethingElse(); // compile error (thx hvd).Di2015NewLine
15464558Di2015UniqueSeparatorprivate IMovieRepository _Repository;Di2015NewLineDi2015NewLine[Inject]Di2015NewLinepublic MovieController(IMovieRepository repository)Di2015NewLine{Di2015NewLine    _Repository = repository;Di2015NewLine}Di2015NewLine
15464632Di2015UniqueSeparatorModel
15464632Di2015UniqueSeparatorpublic class TagDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    [DatabaseGeneratedAttribute(DatabaseGeneratedOption.Identity)]Di2015NewLine    public int TagId { get; set; }Di2015NewLineDi2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public virtual ICollection<Synonym> Synonyms { get; set; }Di2015NewLine}Di2015NewLine
15464632Di2015UniqueSeparatorpublic class SynonymDi2015NewLine{Di2015NewLine    [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]Di2015NewLine    [HiddenInput(DisplayValue = false)]Di2015NewLine    public int SynonymId { get; set; }Di2015NewLineDi2015NewLine    [ForeignKey("Tag"), DatabaseGenerated(DatabaseGeneratedOption.None)]Di2015NewLine    public int TagId { get; set; }Di2015NewLineDi2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public virtual Tag Tag { get; set; }Di2015NewLine}Di2015NewLine
15464638Di2015UniqueSeparatorvar integers = "123456";Di2015NewLinevar enumOfInts = integers.ToCharArray().Select(x => Char.GetNumericValue(x));Di2015NewLine
15464687Di2015UniqueSeparatoruser
15464687Di2015UniqueSeparatorselect count(*) from [user] ....Di2015NewLine
15464687Di2015UniqueSeparatorcmd.CommandText="select count(*) from [user] where Username=@uname " + Di2015NewLine                "and Password=@upass";Di2015NewLinecmd.Parameters.AddWithValue("@uname", txt_user.Text)Di2015NewLinecmd.Parameters.AddWithValue("@upass", txt_pass.Text);Di2015NewLineint count =Convert.ToInt16(cmd.ExecuteScalar());Di2015NewLine......Di2015NewLine
15464687Di2015UniqueSeparatorprotected void  btn_log_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine   using(SqlConnection con = new SqlConnection(@"Data Source=.\\SQLEXPRESS;AttachDbFilename=" +Di2015NewLine                                 @"C:\\Users\\Sony\\Documents\\Library\\App_Data\\Library.mdf;" + Di2015NewLine                                 @"Integrated Security=True;User Instance=True")Di2015NewLine    {Di2015NewLine        con.Open();Di2015NewLine        using(SqlCommand cmd = new SqlCommand("select count(*) from [user] where "+ Di2015NewLine                                   "Username=@uname and Password=@upass", con)Di2015NewLine        {Di2015NewLine            cmd.Parameters.AddWithValue("@uname", txt_user.Text)Di2015NewLine            cmd.Parameters.AddWithValue("@upass", txt_pass.Text);Di2015NewLine            int count =Convert.ToInt16(cmd.ExecuteScalar());Di2015NewLine            ......Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15465017Di2015UniqueSeparatornew
15465123Di2015UniqueSeparatorforeach(char c in key){    Di2015NewLine    if(c==letter1){Di2015NewLine        newKey.Append(letter2);Di2015NewLine    }else if(c==letter2){Di2015NewLine        newKey.Append(letter1);Di2015NewLine    }else{Di2015NewLine        newKey.Append(c);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15465180Di2015UniqueSeparatorSendTweetWithMedia
15465449Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Console.Title = "Datetime checker";Di2015NewLine            Console.Write("Enter the date and time to launch from: ");Di2015NewLine            DateTime time1 = DateTime.Parse(Console.ReadLine());Di2015NewLine            Console.WriteLine();Di2015NewLine            Console.Write("Enter the time to take off: ");Di2015NewLine            TimeSpan time2 = TimeSpan.Parse(Console.ReadLine());Di2015NewLine            DateTime launch = time1.Subtract(time2);Di2015NewLine            Console.WriteLine("The launch time is: {0}", launch.ToString());Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15465500Di2015UniqueSeparatorDefaultValue
15465500Di2015UniqueSeparatorpublic class AssignmentContentItemDi2015NewLine{Di2015NewLine    [JsonProperty("Id")]Di2015NewLine    public string Id { get; set; }Di2015NewLine    [JsonProperty("Qty")]Di2015NewLine    public int Quantity { get; set; }Di2015NewLineDi2015NewLine    public AssignmentContentItem()Di2015NewLine    {Di2015NewLine        this.Quantity = 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15465500Di2015UniqueSeparatorAssignmentContentItem item =Di2015NewLine    JsonConvert.DeserializeObject<AssignmentContentItem>("{\\"Id\\":\\"Q0\\"}");Di2015NewLine
15465500Di2015UniqueSeparatorAssignmentContentItem
15465500Di2015UniqueSeparatorQuantity
15465500Di2015UniqueSeparator1
15465635Di2015UniqueSeparatorpublic class CustomValidationAttribute : ValidationAttributeDi2015NewLine{Di2015NewLine    public string MeaningfulValidationInfo { get; set; }Di2015NewLineDi2015NewLine    protected override ValidationResult IsValid(object value, ValidationContext validationContext)Di2015NewLine    {Di2015NewLine        // do whatever meaningful with MeaningfulValidationInfo Di2015NewLine        return base.IsValid(value, validationContext);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15465635Di2015UniqueSeparator[CustomValidationAttribute(MeaningfulValidationInfo = "blah")]Di2015NewLinepublic ActionResult Index()Di2015NewLine{Di2015NewLine    return View();Di2015NewLine}Di2015NewLine
15465635Di2015UniqueSeparator    public class LoginModelDi2015NewLine    {Di2015NewLine        [Required]Di2015NewLine        [EmailAddress]Di2015NewLine        public string EmailAddress { get; set; }Di2015NewLine        [Required]Di2015NewLine        public string Password { get; set; }Di2015NewLine        [Required]Di2015NewLine        [Compare("Password")]Di2015NewLine        [Display(Name = "Confirm password")]Di2015NewLine        public string ConfirmPassword { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15465657Di2015UniqueSeparator?<=
15465657Di2015UniqueSeparator"(?<=\\\\bthe) "Di2015NewLine
15465657Di2015UniqueSeparator"the"
15465657Di2015UniqueSeparator\\\\b
15465657Di2015UniqueSeparator\\b
15465657Di2015UniqueSeparator"bathe"
15465657Di2015UniqueSeparator   v     v     v   v     v    v   v    vDi2015NewLinethe quick brown fox jumps over the lazy dogDi2015NewLine
15465657Di2015UniqueSeparator"the"
15465657Di2015UniqueSeparator\\\\b
15465657Di2015UniqueSeparator"the "
15465657Di2015UniqueSeparator"the"
15465657Di2015UniqueSeparator"quick "
15465657Di2015UniqueSeparator"...k"
15465671Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Linq;Di2015NewLine
15465671Di2015UniqueSeparator    float[] randomValues = new float[ARRAY_LENGTH]; //Array of random numbersDi2015NewLine    GCHandle handle = GCHandle.Alloc(randomValues, GCHandleType.Pinned);Di2015NewLine    var randPtr = handle.AddrOfPinnedObject();Di2015NewLine    KernelWrapper.ImageNoiseFilter(ptr, image.Width, image.Height, randPtr);Di2015NewLine
15465671Di2015UniqueSeparatorstatic void ImageNoiseFilter(System::IntPtr imageData, int imageWidth, int imageHeight, System::IntPtr randValPtr);Di2015NewLine
15465671Di2015UniqueSeparatorvoid KernelWrapper::ImageNoiseFilter(System::IntPtr imageData, int imageWidth, int imageHeight, System::IntPtr randValues){Di2015NewLine    RunImageNoiseFilterKernel((Format24bppRgb*)((int)imageData), imageWidth, imageHeight, (float*) ((int) randValues));Di2015NewLine}Di2015NewLine
15465698Di2015UniqueSeparatornew Child()
15465698Di2015UniqueSeparatornew XyzChild
15465794Di2015UniqueSeparatorXDocument.Load
15465794Di2015UniqueSeparatorXDocument
15465794Di2015UniqueSeparatorvar dox = XDocument.Load("Input.txt");Di2015NewLine
15465794Di2015UniqueSeparatorvar response = (from a in dox.Root.Elements("answer")Di2015NewLine                where (string)a.Attribute("ID") == "ANSWER_1"Di2015NewLine                from r in a.Element("responses").Elements("response")Di2015NewLine                where (int)r.Attribute("id") == 1Di2015NewLine                select r).FirstOrDefault();Di2015NewLine
15465794Di2015UniqueSeparatorvar response = dox.XPathSelectElement("answers/answer[@ID='ANSWER_1']/responses/response[@id='1']");Di2015NewLine
15465868Di2015UniqueSeparatorCanvas.Left
15465868Di2015UniqueSeparatorCanvas.Top
15465868Di2015UniqueSeparatordouble left = Canvas.GetLeft(obj) + 20;Di2015NewLinedouble top = Canvas.GetTop(obj) + 20;Di2015NewLineCanvas.SetLeft(obj, left);Di2015NewLineCanvas.SetTop(obj, top);Di2015NewLine
15465868Di2015UniqueSeparator<UserControl ... KeyDown="OnKeyDown">Di2015NewLine    <Canvas>Di2015NewLine        <Rectangle Name="obj" .../>Di2015NewLine    </Canvas>Di2015NewLine</UserControl>Di2015NewLine
15465868Di2015UniqueSeparatorprivate void OnKeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    switch (e.Key)Di2015NewLine    {Di2015NewLine        case Key.Right:Di2015NewLine            Canvas.SetLeft(obj, Canvas.GetLeft(obj) + 20);Di2015NewLine            break;Di2015NewLine        // more hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
15465957Di2015UniqueSeparatorItemTemplate
15465957Di2015UniqueSeparator<controls:AutoCompleteBox x:Name="autoCompleteBox1"        Di2015NewLine      FilterMode="Contains"              Di2015NewLine      IsTextCompletionEnabled="True">Di2015NewLine    <controls:AutoCompleteBox.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBlock Text="{Binding Title}" />Di2015NewLine        </DataTemplate>Di2015NewLine    </controls:AutoCompleteBox.ItemTemplate>Di2015NewLine</controls:AutoCompleteBox>Di2015NewLine
15465985Di2015UniqueSeparator<asp:DropDownList AutoPostBack="True" ID="DropDownListDB" runat="server" Height="20px" SelectedIndexChanged="DropDownListDB_SelectedIndexChanged">Di2015NewLine
15465985Di2015UniqueSeparatorDropDownListDB.SelectedIndexChanged += DrowpDownListDB_SelectedIndexChanged;Di2015NewLine
15465990Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLinenamespace WindowsFormsApplication6Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLine        int amount;Di2015NewLine        private void textBox1_TextChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            amount = 5;Di2015NewLine            amount = amount + textBox1.Text.Length;            Di2015NewLine            label1.Text = amount.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15466065Di2015UniqueSeparatorvar data =Di2015NewLine    XDocument.Parse(xml)Di2015NewLine    .RootDi2015NewLine    .Element("response")Di2015NewLine    .Element("data")Di2015NewLine    .Elements("row")Di2015NewLine    .Select(row =>Di2015NewLine        newDi2015NewLine        {Di2015NewLine            Id = Int32.Parse(row.Element("id").Value),Di2015NewLine            Parameters = newDi2015NewLine            {Di2015NewLine                IpAddress = row.Element("parameters").Element("ipaddress").Value,Di2015NewLine                port = Int32.Parse(row.Element("parameters").Element("port").Value),Di2015NewLine            },Di2015NewLine            Status = newDi2015NewLine            {Di2015NewLine                MemFree = Int32.Parse(row.Element("status").Element("memfree").Value),Di2015NewLine            },Di2015NewLine        });Di2015NewLine
15466237Di2015UniqueSeparatorvar items = new List<string>() {Di2015NewLine    "David Johnson", "John Davidson", "John Willians", "David Beckham", "Al Green"Di2015NewLine};Di2015NewLineDi2015NewLinevar queryString = "David John";Di2015NewLinevar queryItems = queryString.Split(new char[] { ' ' });Di2015NewLineDi2015NewLinevar results = items.Where(x => queryItems.All(q => x.Contains(q))).ToList();Di2015NewLine
15466237Di2015UniqueSeparatorList<Owner>
15466237Di2015UniqueSeparatorvar results = items.Where(x => queryItems.All(q => x.FirstName.Contains(q) ||Di2015NewLine                                                   x.LastName.Contains(q)))Di2015NewLine                   .ToList();Di2015NewLine
15466542Di2015UniqueSeparatorPlanPackageBegin
15466542Di2015UniqueSeparatorPlanPackageBeginEventArgs
15466542Di2015UniqueSeparatorState
15466542Di2015UniqueSeparatorState
15466542Di2015UniqueSeparatorRequestState
15466542Di2015UniqueSeparatorPlan()
15466542Di2015UniqueSeparatorLaunchAction.Install
15466542Di2015UniqueSeparatorState
15466542Di2015UniqueSeparatorRequestState.Present
15466542Di2015UniqueSeparatorRequestState
15466542Di2015UniqueSeparatorRequestState.Absent
15466932Di2015UniqueSeparatorMainWindow.xaml
15466932Di2015UniqueSeparatorTimbre.cs:line 137
15466932Di2015UniqueSeparator.pdb
15467105Di2015UniqueSeparatorallensCroftEntities1.Attach(ObjectIndex);Di2015NewLineallensCroftEntities1.DeleteObject(ObjectIndex);Di2015NewLine
15467105Di2015UniqueSeparatorBookings_Loaded
15467105Di2015UniqueSeparatorWpfApplication7.AllensCroftEntities1 allensCroftEntities1 = new WpfApplication7.AllensCroftEntities1();Di2015NewLine
15467113Di2015UniqueSeparatorDataNavigateUrlFormatString
15467113Di2015UniqueSeparatorDataBind
15467113Di2015UniqueSeparatorGridView
15467113Di2015UniqueSeparator// I'm assuming this is the 1st column, as it was in your grid exampleDi2015NewLineHyperLinkField hfield = grdvSeats.Columns[0] as HyperLinkField;           Di2015NewLinestring urlFormat = "~/CheckOut.aspx?id={0}&eID=" + eventID.ToString();Di2015NewLinehfield.DataNavigateUrlFormatString = urlFormat;Di2015NewLine
15467113Di2015UniqueSeparatorDataNavigateUrlFormatString
15467140Di2015UniqueSeparator// ----------------------------------------------------------------------Di2015NewLinepublic void GapFinder()Di2015NewLine{Di2015NewLine  // base periodsDi2015NewLine  TimePeriodCollection basePeriods = new TimePeriodCollection();Di2015NewLine  basePeriods.Add( new TimeRange( new DateTime( 2012, 1, 1 ), new DateTime( 2012, 1, 10 ) ) );Di2015NewLine  basePeriods.Add( new TimeRange( new DateTime( 2012, 1, 11 ), new DateTime( 2012, 1, 25 ) ) );Di2015NewLine  ITimePeriodCollection combinedBasePeriods = new TimePeriodCombiner<TimeRange>().CombinePeriods( basePeriods );Di2015NewLineDi2015NewLine  // test periodsDi2015NewLine  TimePeriodCollection testPeriods = new TimePeriodCollection();Di2015NewLine  testPeriods.Add( new TimeRange( new DateTime( 2012, 1, 2 ), new DateTime( 2012, 1, 7 ) ) );Di2015NewLine  testPeriods.Add( new TimeRange( new DateTime( 2012, 1, 8 ), new DateTime( 2012, 1, 9 ) ) );Di2015NewLine  testPeriods.Add( new TimeRange( new DateTime( 2012, 1, 15 ), new DateTime( 2012, 1, 30 ) ) );Di2015NewLine  ITimePeriodCollection combinedTestPeriods = new TimePeriodCombiner<TimeRange>().CombinePeriods( testPeriods );Di2015NewLineDi2015NewLine  // gapsDi2015NewLine  TimePeriodCollection gaps = new TimePeriodCollection();Di2015NewLine  foreach ( ITimePeriod basePeriod in combinedBasePeriods )Di2015NewLine  {Di2015NewLine    gaps.AddAll( new TimeGapCalculator<TimeRange>().GetGaps( combinedTestPeriods, basePeriod ) );Di2015NewLine  }Di2015NewLine  foreach ( ITimePeriod gap in gaps )Di2015NewLine  {Di2015NewLine    Console.WriteLine( "Gap: " + gap );Di2015NewLine  }Di2015NewLine} // GapFinderDi2015NewLine
15467270Di2015UniqueSeparatorint calibrate_to_file(points* pontos, int length);Di2015NewLine
15467270Di2015UniqueSeparatorstatic extern int calibrate_to_file([MarshalAs(UnmanagedType.LPArray)]] Point[] pontos, int length);Di2015NewLine
15467401Di2015UniqueSeparatorTask.Factory.StartNewDi2015NewLine(Di2015NewLine    () =>Di2015NewLine    {Di2015NewLine        if (BfScrapper.Instance.CanStart)Di2015NewLine            BfScrapper.Instance.StartTask(brwser);Di2015NewLine    },Di2015NewLine    CancellationToken.None,Di2015NewLine    TaskCreationOptions.None,Di2015NewLine    TaskScheduler.FromCurrentSynchronizationContext()Di2015NewLine);Di2015NewLine
15467513Di2015UniqueSeparator    PageParser.GetCompiledPageInstance(context.Request.Path, context.Request.PhysicalPath, context )Di2015NewLine         .ProcessRequest( context );Di2015NewLine
15468052Di2015UniqueSeparatorstring[] strArr = editText.Text.Split('\\n');Di2015NewLine
15468173Di2015UniqueSeparatorSqlFunctions.StringConvert
15468173Di2015UniqueSeparatorvar data = db.Clients.Select(c => Di2015NewLine    SqlFunctions.StringConvert((double)c.Id) + ":" + c.Firstname);Di2015NewLine
15468173Di2015UniqueSeparatorvar data = db.Clients.Select(c => { c.Id, c.Firstname });Di2015NewLineforeach (var item in data)Di2015NewLine{Di2015NewLine    var stringData = String.Format("{0}:{1}", item.Id, item.Firstname);Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15468520Di2015UniqueSeparatorrunat="Server"
15468520Di2015UniqueSeparator<img runat="server" id="img31" />Di2015NewLine
15468520Di2015UniqueSeparator((HtmlImage)img31).Src = "data1/images/31.jpg";Di2015NewLine
15468533Di2015UniqueSeparatorvar input = "The quick \\"brown\\" fox jumps over the \\"lazy\\" dog";Di2015NewLinevar output = input.Replace("\\"", string.Empty);Di2015NewLine// output == "The quick brown fox jumps over the lazy dog"Di2015NewLine
15468533Di2015UniqueSeparatorRegEx.Replace
15468533Di2015UniqueSeparatorvar input = "The quick \\"brown\\" fox jumps over the \\"lazy\\" dog";Di2015NewLinevar output = RegEx.Replace(input, "\\"[^\\"]*\\"", string.Empty);Di2015NewLine// output == "The quick  fox jumps over the  dog"Di2015NewLine
15468594Di2015UniqueSeparatorclick
15468594Di2015UniqueSeparatorlive
15468594Di2015UniqueSeparatoron
15468594Di2015UniqueSeparator$(".sliderPopupOpener").click(function () {Di2015NewLine    $("#sliderPopup").dialog("open");Di2015NewLine});Di2015NewLine
15468594Di2015UniqueSeparator$(body).on("click", ".sliderPopupOpener", function(){Di2015NewLine    $("#sliderPopup").dialog("open");Di2015NewLine});Di2015NewLine
15468594Di2015UniqueSeparatorstring sliderPopupFunction = @" <script type=""text/javascript""> Di2015NewLine                                    $(function () { Di2015NewLine                                        jQuery(function () {Di2015NewLine                                            $(""#sliderPopup"").dialog(""open""); Di2015NewLine                                        }Di2015NewLine                                     });Di2015NewLine                                </script>";Di2015NewLine
15468594Di2015UniqueSeparatorstring sliderPopupFunction = @" <script type=""text/javascript""> Di2015NewLine                                    $(""#sliderPopup"").dialog(""open""); Di2015NewLine                                </script>";Di2015NewLine
15468594Di2015UniqueSeparatorsliderPopup
15468594Di2015UniqueSeparator#sliderPopup
15468594Di2015UniqueSeparatorsliderPopup.ClientID
15468594Di2015UniqueSeparatorsliderPopup
15468594Di2015UniqueSeparator$("#sliderPopup").dialog().dialog("open");Di2015NewLine
15468724Di2015UniqueSeparatorprivate void Form1_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    switch (e.KeyCode )Di2015NewLine    {Di2015NewLine        case Keys.NumPad1:Di2015NewLine            if (checkBox1.Checked)Di2015NewLine                checkBox1.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox1.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad2:Di2015NewLine            if (checkBox2.Checked)Di2015NewLine                checkBox2.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox2.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad3:Di2015NewLine            if (checkBox3.Checked)Di2015NewLine                checkBox3.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox3.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad4:Di2015NewLine            if (checkBox4.Checked)Di2015NewLine                checkBox4.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox4.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad5:Di2015NewLine            if (checkBox5.Checked)Di2015NewLine                checkBox5.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox5.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad6:Di2015NewLine            if (checkBox6.Checked)Di2015NewLine                checkBox6.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox6.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad7:Di2015NewLine            if (checkBox7.Checked)Di2015NewLine                checkBox7.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox7.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad8:Di2015NewLine            if (checkBox8.Checked)Di2015NewLine                checkBox8.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox8.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        case Keys.NumPad9:Di2015NewLine            if (checkBox9.Checked)Di2015NewLine                checkBox9.Checked = false;Di2015NewLine            elseDi2015NewLine                checkBox9.Checked = true;Di2015NewLineDi2015NewLine            break;Di2015NewLine        default:Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15468724Di2015UniqueSeparatorvoid checkBox_CheckedChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    CheckBox cb = (CheckBox)sender;Di2015NewLineDi2015NewLine    switch(cb.Name)Di2015NewLine    {Di2015NewLine        case "checkBox1":Di2015NewLine            if (cb.Checked)Di2015NewLine                // Method to use when checkBox1 is checkedDi2015NewLine            elseDi2015NewLine                // Method to use when checkBox1 is uncheckedDi2015NewLineDi2015NewLineDi2015NewLine            break;Di2015NewLineDi2015NewLine        case "checkBox2":Di2015NewLine            if (cb.Checked)Di2015NewLine                // Method to use when checkBox2 is checkedDi2015NewLine            elseDi2015NewLine                // Method to use when checkBox2 is uncheckedDi2015NewLineDi2015NewLine            break;Di2015NewLineDi2015NewLine        case "checkBox3":Di2015NewLine            if (cb.Checked)Di2015NewLine                // Method to use when checkBox3 is checkedDi2015NewLine            elseDi2015NewLine                // Method to use when checkBox3 is uncheckedDi2015NewLineDi2015NewLine            break;Di2015NewLineDi2015NewLine        default:Di2015NewLine            break;Di2015NewLineDi2015NewLine        //Implement your other checkBox's the same way.Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
15468849Di2015UniqueSeparatorasp:PlaceHolder
15468849Di2015UniqueSeparator <asp:PlaceHolder id="ImagePlaceHolder" runat="server"/>Di2015NewLine
15468849Di2015UniqueSeparatorvar literal = new LiteralControl("<li><img src=data1/images/31.jpg alt=31 title=31 id=wows1_0/></li>");Di2015NewLineImagePlaceHolder.Controls.Add(literal);Di2015NewLine
15468849Di2015UniqueSeparatorPlaceHolder
15468849Di2015UniqueSeparatorLiteralControl
15468945Di2015UniqueSeparator    var imageFiles = Directory.EnumerateFiles(@"C:\\Temp", "*.bmp", SearchOption.TopDirectoryOnly).ToList();Di2015NewLine    var lst = new List<Bitmap>();Di2015NewLine    foreach (var imageFile in imageFiles)Di2015NewLine    {Di2015NewLine        lst.Add(new Bitmap(imageFile));Di2015NewLine    }Di2015NewLine
15469031Di2015UniqueSeparatorTextBox
15469031Di2015UniqueSeparatorAttatchedProperty
15469031Di2015UniqueSeparatorDataGrid
15469031Di2015UniqueSeparatorTextBox
15469031Di2015UniqueSeparatorAttatchedProperty
15469031Di2015UniqueSeparatorCell
15469031Di2015UniqueSeparatorCell
15469031Di2015UniqueSeparatorIMultiValueConverter
15469031Di2015UniqueSeparatorCell
15469031Di2015UniqueSeparatorText
15469031Di2015UniqueSeparatorAttachedProperties
15469031Di2015UniqueSeparatorConverter
15469031Di2015UniqueSeparatorAttachedProperty
15469031Di2015UniqueSeparatorSearchValue
15469031Di2015UniqueSeparatorTextBox
15469031Di2015UniqueSeparatorText
15469031Di2015UniqueSeparator <DataGrid local:DataGridTextSearch.SearchValue="{Binding ElementName=SearchBox, Path=Text, UpdateSourceTrigger=PropertyChanged}" Di2015NewLine
15469031Di2015UniqueSeparatorStyle
15469031Di2015UniqueSeparatorDataGridCell
15469031Di2015UniqueSeparatorAttachedProperty
15469031Di2015UniqueSeparatorIsTextMatch
15469031Di2015UniqueSeparatorIMultiValueConverter
15469031Di2015UniqueSeparatorSearchValue
15469031Di2015UniqueSeparator<Setter Property="local:DataGridTextSearch.IsTextMatch">Di2015NewLine    <Setter.Value>Di2015NewLine        <MultiBinding Converter="{StaticResource SearchValueConverter}">Di2015NewLine            <Binding RelativeSource="{RelativeSource Self}" Path="Content.Text" />Di2015NewLine            <Binding RelativeSource="{RelativeSource Self}" Path="(local:DataGridTextSearch.SearchValue)" />Di2015NewLine        </MultiBinding>Di2015NewLine    </Setter.Value>Di2015NewLine</Setter>Di2015NewLine
15469031Di2015UniqueSeparatorCells
15469031Di2015UniqueSeparatorIsTextMatch
15469031Di2015UniqueSeparatorTrigger
15469031Di2015UniqueSeparator<Style.Triggers>Di2015NewLine    <Trigger Property="local:DataGridTextSearch.IsTextMatch" Value="True">Di2015NewLine        <Setter Property="Background" Value="Orange" />Di2015NewLine    </Trigger>Di2015NewLine</Style.Triggers>Di2015NewLine
15469031Di2015UniqueSeparatornamespace WpfApplication17Di2015NewLine{Di2015NewLine    public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            for (int i = 0; i < 20; i++)Di2015NewLine            {Di2015NewLine                TestData.Add(new TestClass { MyProperty = GetRandomText(), MyProperty2 = GetRandomText(), MyProperty3 = GetRandomText() });Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private string GetRandomText()Di2015NewLine        {Di2015NewLine            return System.IO.Path.GetFileNameWithoutExtension(System.IO.Path.GetRandomFileName());Di2015NewLine        }Di2015NewLineDi2015NewLine        private ObservableCollection<TestClass> _testData = new ObservableCollection<TestClass>();Di2015NewLine        public ObservableCollection<TestClass> TestDataDi2015NewLine        {Di2015NewLine            get { return _testData; }Di2015NewLine            set { _testData = value; }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TestClassDi2015NewLine    {Di2015NewLine        public string MyProperty { get; set; }Di2015NewLine        public string MyProperty2 { get; set; }Di2015NewLine        public string MyProperty3 { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class DataGridTextSearchDi2015NewLine    {Di2015NewLine        // Using a DependencyProperty as the backing store for SearchValue.  This enables animation, styling, binding, etc...Di2015NewLine        public static readonly DependencyProperty SearchValueProperty =Di2015NewLine            DependencyProperty.RegisterAttached("SearchValue", typeof(string), typeof(DataGridTextSearch),Di2015NewLine                new FrameworkPropertyMetadata(string.Empty, FrameworkPropertyMetadataOptions.Inherits));Di2015NewLineDi2015NewLine        public static string GetSearchValue(DependencyObject obj)Di2015NewLine        {Di2015NewLine            return (string)obj.GetValue(SearchValueProperty);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void SetSearchValue(DependencyObject obj, string value)Di2015NewLine        {Di2015NewLine            obj.SetValue(SearchValueProperty, value);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Using a DependencyProperty as the backing store for IsTextMatch.  This enables animation, styling, binding, etc...Di2015NewLine        public static readonly DependencyProperty IsTextMatchProperty =Di2015NewLine            DependencyProperty.RegisterAttached("IsTextMatch", typeof(bool), typeof(DataGridTextSearch), new UIPropertyMetadata(false));Di2015NewLineDi2015NewLine        public static bool GetIsTextMatch(DependencyObject obj)Di2015NewLine        {Di2015NewLine            return (bool)obj.GetValue(IsTextMatchProperty);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void SetIsTextMatch(DependencyObject obj, bool value)Di2015NewLine        {Di2015NewLine            obj.SetValue(IsTextMatchProperty, value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class SearchValueConverter : IMultiValueConverterDi2015NewLine    {Di2015NewLine        public object Convert(object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine        {Di2015NewLine            string cellText = values[0] == null ? string.Empty : values[0].ToString();Di2015NewLine            string searchText = values[1] as string;Di2015NewLineDi2015NewLine            if (!string.IsNullOrEmpty(searchText) && !string.IsNullOrEmpty(cellText))Di2015NewLine            {Di2015NewLine                return cellText.ToLower().StartsWith(searchText.ToLower());Di2015NewLine            }Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine        {Di2015NewLine            return null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15469031Di2015UniqueSeparator<Window x:Class="WpfApplication17.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:local="clr-namespace:WpfApplication17"Di2015NewLine        Title="MainWindow" Height="350" Width="525" Name="UI">Di2015NewLineDi2015NewLine    <StackPanel DataContext="{Binding ElementName=UI}">Di2015NewLine        <TextBox Name="SearchBox" />Di2015NewLine        <DataGrid x:Name="grid" local:DataGridTextSearch.SearchValue="{Binding ElementName=SearchBox, Path=Text, UpdateSourceTrigger=PropertyChanged}" Di2015NewLine                  ItemsSource="{Binding TestData}" >Di2015NewLine            <DataGrid.Resources>Di2015NewLine                <local:SearchValueConverter x:Key="SearchValueConverter" />Di2015NewLine                <Style TargetType="{x:Type DataGridCell}">Di2015NewLine                    <Setter Property="local:DataGridTextSearch.IsTextMatch">Di2015NewLine                        <Setter.Value>Di2015NewLine                            <MultiBinding Converter="{StaticResource SearchValueConverter}">Di2015NewLine                                <Binding RelativeSource="{RelativeSource Self}" Path="Content.Text" />Di2015NewLine                                <Binding RelativeSource="{RelativeSource Self}" Path="(local:DataGridTextSearch.SearchValue)" />Di2015NewLine                            </MultiBinding>Di2015NewLine                        </Setter.Value>Di2015NewLine                    </Setter>Di2015NewLine                    <Style.Triggers>Di2015NewLine                        <Trigger Property="local:DataGridTextSearch.IsTextMatch" Value="True">Di2015NewLine                            <Setter Property="Background" Value="Orange" />Di2015NewLine                        </Trigger>Di2015NewLine                    </Style.Triggers>Di2015NewLine                </Style>Di2015NewLine            </DataGrid.Resources>Di2015NewLine        </DataGrid>Di2015NewLine    </StackPanel>Di2015NewLine</Window>Di2015NewLine
15469031Di2015UniqueSeparatorDataGridRow
15469031Di2015UniqueSeparatorDataGridCell
15469031Di2015UniqueSeparator  <Style TargetType="{x:Type DataGridRow}">Di2015NewLine
15469031Di2015UniqueSeparatorIMultiValueConverter
15469031Di2015UniqueSeparatorDataContext
15469031Di2015UniqueSeparator<MultiBinding Converter="{StaticResource SearchValueConverter}">Di2015NewLine    <Binding RelativeSource="{RelativeSource Self}" Path="DataContext.MyProperty" />Di2015NewLine    <Binding RelativeSource="{RelativeSource Self}" Path="(local:DataGridTextSearch.SearchValue)" />Di2015NewLine</MultiBinding>Di2015NewLine
15469031Di2015UniqueSeparatorTrigger
15469031Di2015UniqueSeparatorIsSelected
15469031Di2015UniqueSeparatorRow
15469031Di2015UniqueSeparator<Style.Triggers>Di2015NewLine    <Trigger Property="local:DataGridTextSearch.IsTextMatch" Value="True">Di2015NewLine        <Setter Property="IsSelected" Value="True" />Di2015NewLine    </Trigger>Di2015NewLine</Style.Triggers>Di2015NewLine
15469031Di2015UniqueSeparator <DataGrid x:Name="grid" local:DataGridTextSearch.SearchValue="{Binding ElementName=SearchBox, Path=Text, UpdateSourceTrigger=PropertyChanged}" Di2015NewLine              ItemsSource="{Binding TestData}" >Di2015NewLine        <DataGrid.Resources>Di2015NewLine            <local:SearchValueConverter x:Key="SearchValueConverter" />Di2015NewLine            <Style TargetType="{x:Type DataGridRow}">Di2015NewLine                <Setter Property="local:DataGridTextSearch.IsTextMatch">Di2015NewLine                    <Setter.Value>Di2015NewLine                        <MultiBinding Converter="{StaticResource SearchValueConverter}">Di2015NewLine                            <Binding RelativeSource="{RelativeSource Self}" Path="DataContext.MyProperty" />Di2015NewLine                            <Binding RelativeSource="{RelativeSource Self}" Path="(local:DataGridTextSearch.SearchValue)" />Di2015NewLine                        </MultiBinding>Di2015NewLine                    </Setter.Value>Di2015NewLine                </Setter>Di2015NewLine                <Style.Triggers>Di2015NewLine                    <Trigger Property="local:DataGridTextSearch.IsTextMatch" Value="True">Di2015NewLine                        <Setter Property="IsSelected" Value="True" />Di2015NewLine                    </Trigger>Di2015NewLine                </Style.Triggers>Di2015NewLine            </Style>Di2015NewLine        </DataGrid.Resources>Di2015NewLine    </DataGrid>Di2015NewLine
15469227Di2015UniqueSeparatorvar AustinLabel = new google.maps.InfoWindow({Di2015NewLine                    content: "<%=zipCentroid[i]%>" + "<br/>" + "<%=colorCount[i]%>" + "<%=layerType%>", Di2015NewLine                    position: new google.maps.LatLng(<%=zipLat[i]%>, <%=zipLong[i]%>)Di2015NewLine                });Di2015NewLine
15469247Di2015UniqueSeparatorvar tcpClient = new TcpClient(hostName, port);Di2015NewLinevar stream = new SslStream(tcpClient.GetStream(), false, (sender, certificate, chain, errors) => true, null); //little hackDi2015NewLinestream.AuthenticateAsClient(hostName);Di2015NewLine//from now on you may write your usual stuff on the streamDi2015NewLine
15469301Di2015UniqueSeparatorcmd.CommandText = "insert into Table1 (id,Position) values (@id,@Position)";Di2015NewLineDi2015NewLinecmd.parameters.addwithvalue("@id", textBox1.Text);Di2015NewLinecmd.parameters.addwithvalue("@Position", combobox1.selectedvalue);Di2015NewLine
15469301Di2015UniqueSeparatorcmd = new OleDbCommand("insert into FWINFOS (ID,Name,Gender,DateOfBirth,Race,WorkingPlace,PassportNO,DateOfExpire,[Position],Photo) " +Di2015NewLine                   "values('" + textBox5.Text + "','" + textBox1.Text + "','" + textBox2.Text + Di2015NewLine                   "','" + dateTimePicker1.Value + "','" + textBox3.Text + "','" + textBox4.Text + Di2015NewLine                   "','" + textBox6.Text + "','" + dateTimePicker2.Value + "',@Position,@Photo)", con);Di2015NewLine
15469517Di2015UniqueSeparatorStoryboard
15469517Di2015UniqueSeparatorLine.X2
15469517Di2015UniqueSeparatorLine.Y2
15469517Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <Canvas Name="myCanvas">Di2015NewLine        <Button Canvas.Left="248" Canvas.Top="222" Content="Button" Height="23" Name="button1" Width="75" Click="button1_Click" />Di2015NewLine    </Canvas>Di2015NewLine</Window>Di2015NewLine
15469517Di2015UniqueSeparatorprivate void button1_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    Line line = new Line();Di2015NewLine    myCanvas.Children.Add(line);Di2015NewLine    line.Stroke = Brushes.Red;Di2015NewLine    line.StrokeThickness = 2;Di2015NewLine    line.X1 = 0;Di2015NewLine    line.Y1 = 0;Di2015NewLine    Storyboard sb = new Storyboard();Di2015NewLine    DoubleAnimation da = new DoubleAnimation(line.Y2 , 100, new Duration(new TimeSpan(0, 0, 1)));Di2015NewLine    DoubleAnimation da1 = new DoubleAnimation(line.X2, 100, new Duration(new TimeSpan(0, 0, 1)));Di2015NewLine    Storyboard.SetTargetProperty(da, new PropertyPath("(Line.Y2)"));Di2015NewLine    Storyboard.SetTargetProperty(da1, new PropertyPath("(Line.X2)"));Di2015NewLine    sb.Children.Add(da);Di2015NewLine    sb.Children.Add(da1);Di2015NewLineDi2015NewLine    line.BeginStoryboard(sb);Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
15469633Di2015UniqueSeparatornode.Attributes["id"].Value;
15469633Di2015UniqueSeparatorthevaluethatiwantvariable
15469689Di2015UniqueSeparatorCommonProperties.targets
15469689Di2015UniqueSeparator<!-- delay sign the assembly if the PrivateKeyPath property is not specified -->Di2015NewLine<PropertyGroup Condition=" '$(PrivateKeyPath)' == '' And '$(PrivateKeyName)' == ''">Di2015NewLine    <AssemblyOriginatorKeyFile>..\\public_key.snk</AssemblyOriginatorKeyFile>Di2015NewLine    <DelaySign>true</DelaySign>Di2015NewLine</PropertyGroup>Di2015NewLineDi2015NewLine<!-- sign the assembly using the specified key file containing both the private and public keys -->Di2015NewLine<PropertyGroup Condition=" '$(PrivateKeyPath)' != '' ">Di2015NewLine    <AssemblyOriginatorKeyFile>$(PrivateKeyPath)</AssemblyOriginatorKeyFile>Di2015NewLine    <DelaySign>false</DelaySign>Di2015NewLine</PropertyGroup>Di2015NewLineDi2015NewLine<!-- sign the assembly using the specified key container containing both the private and public keys -->Di2015NewLine<PropertyGroup Condition=" '$(PrivateKeyName)' != '' ">Di2015NewLine    <AssemblyOriginatorKeyFile></AssemblyOriginatorKeyFile>Di2015NewLine    <DelaySign>false</DelaySign>Di2015NewLine</PropertyGroup>Di2015NewLine
15469689Di2015UniqueSeparator  <PropertyGroup>Di2015NewLine    <DelaySign>false</DelaySign>Di2015NewLine    <SignAssembly>false</SignAssembly>Di2015NewLine  </PropertyGroup>Di2015NewLine
15469723Di2015UniqueSeparatorstruct RoutingCodeDi2015NewLine{Di2015NewLine  private readonly string routingCode;    Di2015NewLine  RoutingCode(string prefix, string service, string sender)Di2015NewLine  {Di2015NewLine    // Validate prefix, service, sender stringsDi2015NewLine    // ...Di2015NewLine    if (isInvalid) throw ArgumentException();Di2015NewLine    this.routingCode = prefix + service + sender;Di2015NewLine  }Di2015NewLineDi2015NewLine  public string IsValid Di2015NewLine  {Di2015NewLine    get { return this.routingCode != null; }Di2015NewLine  }Di2015NewLineDi2015NewLine  // Gets the validated routing code.Di2015NewLine  public string RoutingDi2015NewLine  {Di2015NewLine    get { return this.routingCode; }Di2015NewLine  }Di2015NewLineDi2015NewLine  public int RoutingLengthDi2015NewLine  {Di2015NewLine    get { return this.routingCode == null ? 0 : this.routingCode.Length; }Di2015NewLine  }Di2015NewLine}Di2015NewLine
15470033Di2015UniqueSeparatorprint start.name;Di2015NewLinevar next = start.next;Di2015NewLineDi2015NewLinewhile (next) {Di2015NewLine  print next.name;Di2015NewLine  next = next.next;Di2015NewLine}Di2015NewLine
15470326Di2015UniqueSeparatorMyClass mc = new MyClass();Di2015NewLinePropertyInfo[] allProps = mc.GetType()Di2015NewLine    .GetProperties()Di2015NewLine    .Where(x => x.Name != "propHead" && x.Name != "propControl")Di2015NewLine    .ToArray();Di2015NewLine
15470326Di2015UniqueSeparatorpublic class CustomAttribute : AttributeDi2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLineMyClass mc = new MyClass();Di2015NewLinePropertyInfo[] allProps = mc.GetType()Di2015NewLine    .GetProperties()Di2015NewLine    .Where(x => x.GetCustomAttributes(typeof(CustomAttribute)).Length > 0)Di2015NewLine    .ToArray();Di2015NewLine
15470476Di2015UniqueSeparatorvar list = (from p in personsDi2015NewLine            select new Di2015NewLine                   {Di2015NewLine                   Name = p.Name,Di2015NewLine                   DocumentCode = p.Document.CodeDi2015NewLine                   }).ToList();Di2015NewLineDi2015NewLinedgvPersona.DataSource = list;Di2015NewLine
15470476Di2015UniqueSeparatorId
15470547Di2015UniqueSeparatorSelected Ellipse
15470547Di2015UniqueSeparator    private void CheckPoint(object sender, System.Windows.Input.MouseEventArgs e)Di2015NewLine    {Di2015NewLine      var selectedEllipse = sender as Ellipse;Di2015NewLineDi2015NewLine      if(selectedEllipse!=null)Di2015NewLine        {Di2015NewLine          //Your code hereDi2015NewLine        }Di2015NewLine    }Di2015NewLine
15470826Di2015UniqueSeparatorpublic IEnumerable<IEnumerable<T>> GetPowerSet<T>(this IList<T> list)Di2015NewLine{Di2015NewLine    return from m in Enumerable.Range(0, 1 << list.Count)Di2015NewLine           from i in Enumerable.Range(0, list.Count)Di2015NewLine           where (m & (1 << i)) != 0Di2015NewLine           select list[i];Di2015NewLine}Di2015NewLine
15470826Di2015UniqueSeparator<<
15470826Di2015UniqueSeparatorpublic IEnumerable<string> GetPermutations(IList<string> strings)Di2015NewLine{Di2015NewLine    return from s in strings.GetPowerSet()Di2015NewLine           select string.Concat(s);Di2015NewLine}Di2015NewLine
15470826Di2015UniqueSeparator{"", "a", "b", "c", "ab", "ac", "bc", "abc"}
15470826Di2015UniqueSeparatorpublic IEnumerable<string> GetPermutations(IList<string> strings)Di2015NewLine{Di2015NewLine    return from s in strings.GetPowerSet()Di2015NewLine           let str = string.Concat(s)Di2015NewLine           where str.Length > 0 // exclude null set resultDi2015NewLine           select str;Di2015NewLine}Di2015NewLine
15470826Di2015UniqueSeparatorpublic IEnumerable<string> GetPermutations(IList<string> strings)Di2015NewLine{Di2015NewLine    return from s in strings.GetPowerSet().Skip(1)Di2015NewLine           select string.Concat(s);Di2015NewLine}Di2015NewLine
15470860Di2015UniqueSeparatorpublic partial class Add_Order : FormDi2015NewLine{Di2015NewLine    public Add_Order()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLine    public List<string> GetData()Di2015NewLine    {Di2015NewLine        List<string> list = new List<string>();Di2015NewLine        list.Add(textBox3.Text);Di2015NewLine        list.Add(label6.Text);Di2015NewLine        list.Add(textBox2.Text);Di2015NewLine        list.Add(textBox1.Text);Di2015NewLine        return list;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15470860Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Add_Order add = new Add_Order();Di2015NewLine    add.ShowDialog();Di2015NewLineDi2015NewLine    ListViewItem item = new ListViewItem();Di2015NewLine    List<string> data = add.GetData();Di2015NewLine    item.Text = data[0];Di2015NewLine    item.SubItems.Add(data[1]);Di2015NewLine    item.SubItems.Add(data[2]);Di2015NewLine    item.SubItems.Add(data[3]);Di2015NewLine    item.SubItems.Add(data[0]);Di2015NewLine    listView2.Items.Add(item);Di2015NewLine}Di2015NewLine
15471207Di2015UniqueSeparatorDataSet ds =DataAccessLayer.ExeSelectQuery(sQuery);Di2015NewLine            tryDi2015NewLine            {Di2015NewLineDi2015NewLine  if(ds .Tables[0].Rows.Count>0)Di2015NewLine                {Di2015NewLine  string sUserName = "";Di2015NewLine                string sPassword = "";Di2015NewLine                 sUserName =   ds.Tables[0].Rows[0]["Username"].ToString();Di2015NewLine                 sPassword =   ds.Tables[0].Rows[0]["Password"].ToString();Di2015NewLinesendMail( sUserName, sPassword);Di2015NewLine                } Di2015NewLine            }Di2015NewLine
15471272Di2015UniqueSeparatorfiles
15471272Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Upload(IEnumerable<HttpPostedFileBase> files)Di2015NewLine{Di2015NewLine    ....Di2015NewLine}Di2015NewLine
15471272Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public IEnumerable<HttpPostedFileBase> Files { get; set; }Di2015NewLine}Di2015NewLine
15471272Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Upload(MyViewModel model)Di2015NewLine{Di2015NewLine    ....Di2015NewLine}Di2015NewLine
15471272Di2015UniqueSeparator<input type="file" name="files" />Di2015NewLine<input type="file" name="files" />Di2015NewLine<input type="file" name="files" />Di2015NewLine...Di2015NewLine
15471272Di2015UniqueSeparatorPLUpload
15471272Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Upload(int? chunk, string name)Di2015NewLine{Di2015NewLine    var fileUpload = Request.Files[0];Di2015NewLine    var uploadPath = Server.MapPath("~/App_Data");Di2015NewLine    chunk = chunk ?? 0;Di2015NewLine    using (var fs = new FileStream(Path.Combine(uploadPath, name), chunk == 0 ? FileMode.Create : FileMode.Append))Di2015NewLine    {Di2015NewLine        var buffer = new byte[fileUpload.InputStream.Length];Di2015NewLine        fileUpload.InputStream.Read(buffer, 0, buffer.Length);Di2015NewLine        fs.Write(buffer, 0, buffer.Length);Di2015NewLine    }Di2015NewLine    return Json(new { message = "chunk uploaded", name = name });Di2015NewLine}Di2015NewLine
15471284Di2015UniqueSeparator    private bool _working = false;Di2015NewLine    private void view_RowStyle(object sender, RowStyleEventArgs e)Di2015NewLine    {Di2015NewLine      if(_working) return;Di2015NewLineDi2015NewLine      var view = sender as GridView;Di2015NewLine      if (view != null)Di2015NewLine      {Di2015NewLine        int lastRowIndex = (view.GridControl.DataSource as BindingSource).Count;Di2015NewLine        if (view.IsRowVisible(lastRowIndex) == RowVisibleState.Visible)Di2015NewLine        {Di2015NewLine          _working = true;Di2015NewLine          //go get more rows.Di2015NewLine          _working = false;Di2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine
15471284Di2015UniqueSeparatorBindingSource
15471284Di2015UniqueSeparatorRowStyle
15471420Di2015UniqueSeparatordictionary
15471420Di2015UniqueSeparatorpublic static readonly Dictionary<Type, string> aliases = new Dictionary<Type, string>()Di2015NewLine{Di2015NewLine    { typeof(string), "string" },Di2015NewLine    { typeof(int), "int" },Di2015NewLine    { typeof(byte), "byte" },Di2015NewLine    { typeof(sbyte), "sbyte" },Di2015NewLine    { typeof(short), "short" },Di2015NewLine    { typeof(ushort), "ushort" },Di2015NewLine    { typeof(long), "long" },Di2015NewLine    { typeof(uint), "uint" },Di2015NewLine    { typeof(ulong), "ulong" },Di2015NewLine    { typeof(float), "float" },Di2015NewLine    { typeof(double), "double" },Di2015NewLine    { typeof(decimal), "decimal" },Di2015NewLine    { typeof(object), "object" },Di2015NewLine    { typeof(bool), "bool" },Di2015NewLine    { typeof(char), "char" }Di2015NewLine};Di2015NewLine
15471492Di2015UniqueSeparatorpublic class DropDownItem<T>{Di2015NewLine  public string Display{get;set;}Di2015NewLine  public T Value{get;set;}Di2015NewLine}Di2015NewLine
15471492Di2015UniqueSeparatorDictionary<T>
15471985Di2015UniqueSeparatorsomeInstruction
15471985Di2015UniqueSeparatorsomeInstruction
15471985Di2015UniqueSeparatorSomeClass
15471985Di2015UniqueSeparatorpublic static class SomeClassExtensionsDi2015NewLine{Di2015NewLine    public static async Task DoPeriodicWorkAsync(Di2015NewLine                                       this SomeClass someInstruction,Di2015NewLine                                       TimeSpan dueTime, Di2015NewLine                                       TimeSpan interval, Di2015NewLine                                       CancellationToken token)Di2015NewLine    {Di2015NewLine        //Create and return the task hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
15471985Di2015UniqueSeparatorsomeInstruction
15471985Di2015UniqueSeparatorTask
15471985Di2015UniqueSeparatorpublic static class PeriodicRunnerDi2015NewLine{Di2015NewLinepublic static async Task DoPeriodicWorkAsync(Di2015NewLine                                Action workToPerform,Di2015NewLine                                TimeSpan dueTime, Di2015NewLine                                TimeSpan interval, Di2015NewLine                                CancellationToken token)Di2015NewLine{Di2015NewLine  // Initial wait time before we begin the periodic loop.Di2015NewLine  if(dueTime > TimeSpan.Zero)Di2015NewLine    await Task.Delay(dueTime, token);Di2015NewLineDi2015NewLine  // Repeat this loop until cancelled.Di2015NewLine  while(!token.IsCancellationRequested)Di2015NewLine  {Di2015NewLine    workToPerform();Di2015NewLineDi2015NewLine    // Wait to repeat again.Di2015NewLine    if(interval > TimeSpan.Zero)Di2015NewLine      await Task.Delay(interval, token);       Di2015NewLine  }Di2015NewLine}Di2015NewLine}Di2015NewLine
15471985Di2015UniqueSeparatorPeriodicRunner.DoPeriodicWorkAsync(MethodToRun, dueTime, interval, token);Di2015NewLineDi2015NewLinevoid MethodToRun()Di2015NewLine{Di2015NewLine    //Code to run goes hereDi2015NewLine}Di2015NewLine
15471985Di2015UniqueSeparatorPeriodicRunner.DoPeriodicWorkAsync(() => { /*Put the code to run here */},Di2015NewLine   dueTime, interval, token);Di2015NewLine
15472306Di2015UniqueSeparator factory = new ChannelFactory<IContract>(binding,Di2015NewLine                new EndpointAddress(address, EndpointIdentity.CreateX509CertificateIdentity(serviceCertificate)));Di2015NewLine factory.Credentials.ServiceCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.PeerOrChainTrust;Di2015NewLine factory.Credentials.UserName.UserName = "admin";Di2015NewLine factory.Credentials.UserName.Password = "qwerty";Di2015NewLine channel = factory.CreateChannel();Di2015NewLine
15472377Di2015UniqueSeparator@using RandomProject.Helpers;Di2015NewLine
15472377Di2015UniqueSeparatorpublic class yourViewModelDi2015NewLine{Di2015NewLine      public IEnumerable<Quantity> Selections {get;set;}Di2015NewLine}Di2015NewLine
15472597Di2015UniqueSeparatorRight-to-left mark
15472597Di2015UniqueSeparatorU+200F
15472597Di2015UniqueSeparatorLeft-to-right mark
15472710Di2015UniqueSeparatorList<AX> Do<AX,BX>(List<BX> b, Func<AX,int?,BX> make) where AX : A, BX : B {Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15472710Di2015UniqueSeparatormake
15472710Di2015UniqueSeparatorvar listB2 = new List<B2>();Di2015NewLinevar res = Do(listB2, (a, num) => num.HasValue ? new B2(a, num.Value) : B2(a));Di2015NewLine
15472774Di2015UniqueSeparatorletter-character
15472774Di2015UniqueSeparatorcombining-character
15472774Di2015UniqueSeparatordecimal-digit-character
15472774Di2015UniqueSeparatorconnecting-character
15472774Di2015UniqueSeparatorformatting-character
15472774Di2015UniqueSeparatorvar charInfo = Enumerable.Range(0, 0x110000)Di2015NewLine                         .Where(x => x < 0x00d800 || x > 0x00dfff)Di2015NewLine                         .Select(char.ConvertFromUtf32)Di2015NewLine                         .GroupBy(s => char.GetUnicodeCategory(s, 0))Di2015NewLine                         .ToDictionary(g => g.Key);Di2015NewLineDi2015NewLineforeach (var ch in charInfo[UnicodeCategory.LowercaseLetter])Di2015NewLine{Di2015NewLine    Console.Write(ch);Di2015NewLine}Di2015NewLine
15472838Di2015UniqueSeparatorpublic class T2Di2015NewLine{Di2015NewLine    private T1 _t1Reference;Di2015NewLineDi2015NewLine    public int A2;Di2015NewLine    public int B2;Di2015NewLineDi2015NewLine    public T2(T1 t1Reference)Di2015NewLine    {Di2015NewLine       _t1Reference = t1Reference;    Di2015NewLine    }Di2015NewLineDi2015NewLine    public void T2Method()Di2015NewLine    {Di2015NewLine       //Access _t1Reference here Di2015NewLine    }Di2015NewLine}Di2015NewLine
15472838Di2015UniqueSeparatorpublic class T2Di2015NewLine{Di2015NewLine    public int A2;Di2015NewLine    public int B2;Di2015NewLineDi2015NewLine    public void T2Method(T1 t1Reference)Di2015NewLine    {Di2015NewLine       //Access t1Reference here Di2015NewLine    }Di2015NewLine}Di2015NewLine
15472965Di2015UniqueSeparatorNullReferenceException
15472965Di2015UniqueSeparatorsecretKey
15472965Di2015UniqueSeparatorIDUser
15472965Di2015UniqueSeparatorconnectionName
15472965Di2015UniqueSeparatorretrieve
15472965Di2015UniqueSeparatornull
15472979Di2015UniqueSeparatorprivate: Control ^ getFocused(Control::ControlCollection ^controls)Di2015NewLine{Di2015NewLine    for each (Control ^c in controls)Di2015NewLine    {Di2015NewLine        if (c->Focused)Di2015NewLine        {Di2015NewLine            return c;Di2015NewLine        }Di2015NewLine        else if (c->ContainsFocus)Di2015NewLine        {Di2015NewLine            return getFocused(c->Controls);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return nullptr;Di2015NewLine}Di2015NewLine
15473038Di2015UniqueSeparatorContainer container = new ContainerDi2015NewLine{Di2015NewLine    Data = new Dictionary<string, object> { { "Text", "Hello world" } }Di2015NewLine};Di2015NewLineDi2015NewLinestring jsonText = JsonConvert.SerializeObject(container);Di2015NewLineDi2015NewLinevar obj = JsonConvert.DeserializeObject<ExpandoObject>(jsonText, new ExpandoObjectConverter());Di2015NewLine
15473038Di2015UniqueSeparatorExpandoObject
15473038Di2015UniqueSeparatorDeserializeObject
15473038Di2015UniqueSeparatorExpandoObjectConverter
15473038Di2015UniqueSeparatorJson.Net
15473038Di2015UniqueSeparatorContainer
15473038Di2015UniqueSeparatorExpandoObjectConverter
15473038Di2015UniqueSeparatorData
15473038Di2015UniqueSeparator[JsonConverter(typeof(ExpandoObjectConverter))]
15473038Di2015UniqueSeparatorvar obj = JsonConvert.DeserializeObject<Container>(jsonText);Di2015NewLine
15473038Di2015UniqueSeparatorData
15473038Di2015UniqueSeparatorExpandoObject
15473038Di2015UniqueSeparatorobj
15473038Di2015UniqueSeparatorContainer
15473183Di2015UniqueSeparatorvar results = d1.Where(x => d2.ContainsKey(x.Key)).Select(x => x.Value).ToList();Di2015NewLine
15473183Di2015UniqueSeparatorvar results = d1.Where(x => d2.ContainsKey(x.Key)).ToDictionary(x => x.Key, x => x.Value);Di2015NewLine
15473340Di2015UniqueSeparatortextBox1.Text = string.Format("{0:#,##0.00}", double.Parse(textBox1.Text));Di2015NewLine
15473340Di2015UniqueSeparatortextBox1.Text = string.Format(System.Globalization.CultureInfo.GetCultureInfo("id-ID"), "{0:#,##0.00}", double.Parse(textBox1.Text));Di2015NewLine
15473343Di2015UniqueSeparator<asp:DataList ID="dlistDetails" runat="server" DataKeyField="KeyID"Di2015NewLine              RepeatColumns="3" Width="100%" Di2015NewLine              AlternatingItemStyle-BackColor="Wheat" CaptionAlign="Top">Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:Label ID="lbl" runat="server" Text='<%# Eval("Name1") + "(" +  Eval("Name2") + ")"%>' /> Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:DataList>Di2015NewLine
15473506Di2015UniqueSeparatorRun()
15473506Di2015UniqueSeparatorstatic
15473506Di2015UniqueSeparatorpublic static class FooDi2015NewLine{Di2015NewLine    public static void Run(Biz biz)Di2015NewLine    {Di2015NewLine        //base on the biz object do some task hereDi2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
15473601Di2015UniqueSeparator??
15473601Di2015UniqueSeparatorNullable<T>
15473601Di2015UniqueSeparator?
15473606Di2015UniqueSeparatorIEnumerable<Photo>photos = session.Query<Photo>().Where(x => x.Property == p).ToList();   Di2015NewLine
15473608Di2015UniqueSeparatorSystem.Windows.Forms.Form.WindowState
15473608Di2015UniqueSeparatorFormWindowState.Maximized
15473696Di2015UniqueSeparator<StyleCopSettings Version="4.3">Di2015NewLine    <GlobalSettings>Di2015NewLine        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>Di2015NewLine    </GlobalSettings>Di2015NewLine
15473769Di2015UniqueSeparatorRegex = new Regex("(\\d+)(years?)");Di2015NewLineDi2015NewLineMatch match = regex.Match(ss);Di2015NewLineif(match.Success)Di2015NewLine{Di2015NewLine  string s = match.Groups[1];Di2015NewLine  string s1 = match.Groups[2];Di2015NewLine}Di2015NewLine
15473861Di2015UniqueSeparator    NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();Di2015NewLine    foreach (NetworkInterface ni in nics)Di2015NewLine    {Di2015NewLine        if (ni.OperationalStatus == OperationalStatus.Up)Di2015NewLine        {Di2015NewLine            IPAddressCollection ips = ni.GetIPProperties().DnsAddresses;Di2015NewLine            foreach (System.Net.IPAddress ip in ips)Di2015NewLine            {Di2015NewLine                MessageBox.Show(ip.ToString());Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15474075Di2015UniqueSeparatorList<Int32> lstindex = new List<Int32>();Di2015NewLineString[] splt = txtSelect.Text.Split(',');Di2015NewLineDi2015NewLine// initialize list of indexed for textboxDi2015NewLineforeach (String str in splt)Di2015NewLine{Di2015NewLine    lstindex.Add(Convert.ToInt32(str) - 1);Di2015NewLine}Di2015NewLineDi2015NewLine// for each menuDi2015NewLineforeach (ToolStripMenuItem mnItem in msMenus.Items)Di2015NewLine{Di2015NewLine     // for each menu itemDi2015NewLine    foreach (ToolStripItem item in mnItem.DropDown.Items)Di2015NewLine    {Di2015NewLine        // if index of item is in the list of indexed, set visible to false, otherwise to trueDi2015NewLine        item.Visible = lstindex.Contains(mnItem.DropDown.Items.IndexOf(item)) ? false : true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15474177Di2015UniqueSeparatorpublic interface ICommandHandler<in TCommand, TResult> where TCommand : ICommandDi2015NewLine{Di2015NewLine    ICommandResult<TResult> Execute( TCommand command );Di2015NewLine}Di2015NewLine
15474177Di2015UniqueSeparatorICommandResult<TResult>
15474177Di2015UniqueSeparatorpublic interface ICommandHandler<in TCommand, TCommandResult, TResult> Di2015NewLine    where TCommand : ICommandDi2015NewLine    where TCommandResult: ICommandResult<TResult>Di2015NewLine{Di2015NewLine    TCommandResult Execute( TCommand command );Di2015NewLine}Di2015NewLine
15474187Di2015UniqueSeparatorint GetSumString(string s)Di2015NewLine{Di2015NewLine  // Convert everything to int[], easier that way in .NETDi2015NewLine  var numbersOrg = s.Select(t => int.Parse(t.ToString())).ToArray();Di2015NewLineDi2015NewLine  // Its possible to optimize by using ienumerable and lazy evaluation i guess, but I'm lazy :)Di2015NewLine  var queue = new Queue<int[]>();Di2015NewLine  queue.Enqueue(numbersOrg);Di2015NewLineDi2015NewLine  while (queue.Any())Di2015NewLine  {Di2015NewLine      var numbers = queue.Dequeue();   Di2015NewLineDi2015NewLine      var firstHalf = numbers.Take(numbers.Length / 2).Sum();Di2015NewLine      var secondHalf = numbers.Skip(numbers.Length / 2).Sum();Di2015NewLine      // It must be of even length (% 2) and the sum of the first half must be equal to the last half.Di2015NewLine      if (numbers.Length % 2 == 0 && firstHalf == secondHalf)Di2015NewLine          return numbers.Length;Di2015NewLineDi2015NewLine      // Console.WriteLine("tried: " + string.Join("", numbers) + " gave (" + firstHalf + "," + secondHalf + ")");Di2015NewLine      // Only enqueue when we have something left in the arrayDi2015NewLine      if (numbers.Length > 1)Di2015NewLine      {Di2015NewLine          queue.Enqueue(numbers.Take(numbers.Length - 1).ToArray());Di2015NewLine          queue.Enqueue(numbers.Skip(1).ToArray());Di2015NewLine      }Di2015NewLine  }Di2015NewLine  return 0;Di2015NewLine}Di2015NewLine
15474212Di2015UniqueSeparator int stateOptionValue = (int)((StatusOptionMetadata)optionMeta).State;Di2015NewLine
15474487Di2015UniqueSeparatorarr_val[3] = "200";Di2015NewLine
15474508Di2015UniqueSeparatorconst
15474508Di2015UniqueSeparatorsomeString
15474508Di2015UniqueSeparatorprivate readonly someString = X.foo + Y.bar;Di2015NewLine
15474508Di2015UniqueSeparatorconst
15474508Di2015UniqueSeparatorY.bar
15474508Di2015UniqueSeparatorconst
15474508Di2015UniqueSeparatorToString()
15474539Di2015UniqueSeparatorpargrph.Margin = new Thickness(0);Di2015NewLinepargrph.Padding = new Thickness(0);Di2015NewLine
15474562Di2015UniqueSeparatorRenderText(TextRenderInfo)
15474562Di2015UniqueSeparatorRenderListener
15474562Di2015UniqueSeparatorSimpleTextExtractionStrategy
15474562Di2015UniqueSeparatorlastBaseLine
15474562Di2015UniqueSeparatorfirstcharacter_baseline
15474562Di2015UniqueSeparatorlastFontSize
15474562Di2015UniqueSeparatorlastFont
15474562Di2015UniqueSeparatorLocationTextExtractionStrategy
15474562Di2015UniqueSeparatorif
15474562Di2015UniqueSeparatortext_second
15474562Di2015UniqueSeparatordifference = curBaseline[Vector.I2] - curBaseline[Vector.I2]
15474562Di2015UniqueSeparatorif
15474562Di2015UniqueSeparator[...]Di2015NewLineelse if (curBaseline[Vector.I2] < lastBaseLine[Vector.I2])Di2015NewLine{Di2015NewLine    if (curAscentLine[Vector.I2] < lastDescentLine[Vector.I2])Di2015NewLine    {Di2015NewLine        firstcharacter_baseline = character_baseline;Di2015NewLine        this.result.Append("<br/>");Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        difference = firstcharacter_baseline - curBaseline[Vector.I2];Di2015NewLine        text_second.SetTextRise(difference);Di2015NewLineDi2015NewLine        if (difference == 0)Di2015NewLine        {Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            SupSubFlag = 2;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine[...]Di2015NewLine
15474562Di2015UniqueSeparatorVector.I1
15474595Di2015UniqueSeparatorvar query = Di2015NewLine    from p in table.AsEnumerable()Di2015NewLine    group p by new {Di2015NewLine         Address1 = p.Field<string>("address1"),Di2015NewLine         Address2 = p.Field<string>("address2"),Di2015NewLine         Address3 = p.Field<string>("address3"),Di2015NewLine         City = p.Field<string>("city"),Di2015NewLine         State = p.Field<string>("state"),Di2015NewLine         Postcode = p.Field<string>("postcode"),Di2015NewLine         Country = p.Field<string>("country")Di2015NewLine    } into gDi2015NewLine    select new { Di2015NewLine        Address = g.Key, Di2015NewLine        TotalWeight = g.Sum(x => x.Field<int>("weight"))Di2015NewLine    };Di2015NewLine
15474763Di2015UniqueSeparatorIEqualityComparer<T>
15474763Di2015UniqueSeparatorEquals
15474763Di2015UniqueSeparatorx = { "A", 10 },Di2015NewLiney = { "A", 20 },Di2015NewLinez = { "B", 20 }Di2015NewLine
15474763Di2015UniqueSeparatorx
15474763Di2015UniqueSeparatory
15474763Di2015UniqueSeparatory
15474763Di2015UniqueSeparatorz
15474763Di2015UniqueSeparatorx
15474763Di2015UniqueSeparatorz
15474763Di2015UniqueSeparatorIEqualityComparer<T>
15474818Di2015UniqueSeparatorShoppingItem
15474818Di2015UniqueSeparator[SQLite.PrimaryKey, SQLite.AutoIncrement]Di2015NewLinepublic int Id {get; set;}Di2015NewLine
15474920Di2015UniqueSeparatorClientID
15474920Di2015UniqueSeparatorgetElementById
15474920Di2015UniqueSeparatorbody
15474920Di2015UniqueSeparator<script type ="text/javascript" language="javascript">Di2015NewLine      function MyFunction()Di2015NewLine      {Di2015NewLine          document.getElementById("<%= Label8.ClientID %>").style.display = 'none';    Di2015NewLine      }Di2015NewLine</script>Di2015NewLine
15474970Di2015UniqueSeparator      var amountInHand = 15;Di2015NewLineDi2015NewLine        var possiblities = "LLLWLLLL";Di2015NewLine        var lastBet = 1;Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        foreach (char c in possiblities)Di2015NewLine        {Di2015NewLine            if (c == 'W')Di2015NewLine            {Di2015NewLine                amountInHand = amountInHand + lastBet;Di2015NewLine                lastBet = 1;Di2015NewLine            }Di2015NewLine            else if (c == 'L')Di2015NewLine            {Di2015NewLine                amountInHand = amountInHand - lastBet;Di2015NewLine                lastBet = lastBet * 2;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
15475051Di2015UniqueSeparatorCompareValidator1.ValueToCompare = DateTime.Today.ToString("MM/dd/yyyy");Di2015NewLine
15475254Di2015UniqueSeparatorEditText zipcode = FindViewById<EditText>(Resource.Id.zipcode);Di2015NewLinezipcode.InputType = Android.Text.InputTypes.ClassNumber;Di2015NewLinebool numberMode = true;Di2015NewLinezipcode.TextChanged += (object sender, Android.Text.TextChangedEventArgs e) => {Di2015NewLine    if(zipcode.Text.Length == 4){Di2015NewLine        if(numberMode){Di2015NewLine            numberMode = false;Di2015NewLine            zipcode.Text = zipcode.Text + " ";Di2015NewLine            zipcode.SetSelection(zipcode.Text.Length);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    if(zipcode.Text.Length > 4){Di2015NewLine        numberMode = false;Di2015NewLine        zipcode.InputType = Android.Text.InputTypes.ClassText;Di2015NewLine    }Di2015NewLineDi2015NewLine    if(zipcode.Text.Length <= 4){Di2015NewLine        numberMode = true;Di2015NewLine        zipcode.InputType = Android.Text.InputTypes.ClassNumber;Di2015NewLine    }Di2015NewLine};Di2015NewLine
15475274Di2015UniqueSeparatorAssembly service = Assembly.GetAssembly(typeof(ProjectInstaller));Di2015NewLinestring assemblyPath = service.Location;Di2015NewLineConfiguration config = ConfigurationManager.OpenExeConfiguration(assemblyPath);Di2015NewLineKeyValueConfigurationCollection mySettings = config.AppSettings.Settings;Di2015NewLineprocessInstaller.Account = (ServiceAccount)Enum.Parse(typeof(ServiceAccount), mySettings["Account"].Value);Di2015NewLine
15475433Di2015UniqueSeparatorspace
15475433Di2015UniqueSeparator,
15475433Di2015UniqueSeparator.
15475433Di2015UniqueSeparator-
15475433Di2015UniqueSeparatorstring[] splitArray = s1.Split(',','-','.',' ');Di2015NewLine
15475487Di2015UniqueSeparator<%
15475487Di2015UniqueSeparator<div class="Version">Di2015NewLine    <label><%=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();%></label>                        Di2015NewLine</div>Di2015NewLine
15475684Di2015UniqueSeparatormethod
15475684Di2015UniqueSeparatorAdd
15475684Di2015UniqueSeparatorRemove
15475684Di2015UniqueSeparatorcomboBox1_SelectedIndexChanged
15475684Di2015UniqueSeparatorcomboBox2_SelectedIndexChanged
15475684Di2015UniqueSeparatorprivate void Add(ListControl dropDownList, EventHandler handlerMethodName)Di2015NewLine{Di2015NewLine   dropDownList.OnSelectedIndexChanged += handlerMethodName;Di2015NewLine   //some logic hereDi2015NewLine}Di2015NewLineDi2015NewLineprivate void Remove(ListControl dropDownList, EventHandler handlerMethodName)Di2015NewLine{Di2015NewLine   dropDownList.OnSelectedIndexChanged -= handlerMethodName;Di2015NewLine   //some logic hereDi2015NewLine}Di2015NewLine
15475684Di2015UniqueSeparatorDropDownList
15475684Di2015UniqueSeparatorASP.NET
15475684Di2015UniqueSeparatorComboBox
15475684Di2015UniqueSeparatorWinForms
15475730Di2015UniqueSeparatorApplication
15475730Di2015UniqueSeparatorTestAccount
15475730Di2015UniqueSeparatorTestAccounts
15475730Di2015UniqueSeparatorApplication
15475730Di2015UniqueSeparatorSelectMany
15475730Di2015UniqueSeparatorDbSet.Where(a => a.ApplicationId == applicationId)Di2015NewLine     .SelectMany(app => app.TestAccounts)Di2015NewLine     .ToList();Di2015NewLine
15475730Di2015UniqueSeparatorTestAccounts
15475730Di2015UniqueSeparatorIQueryable<Application>
15475730Di2015UniqueSeparatorToList
15475730Di2015UniqueSeparatorICollection<T>
15475730Di2015UniqueSeparatorList<T>
15475730Di2015UniqueSeparatorICollection<T>
15475742Di2015UniqueSeparatorSqlDataSource
15475742Di2015UniqueSeparator<asp:QueryStringParameter Name="SId" QueryStringField="SId" />Di2015NewLine
15475742Di2015UniqueSeparator<asp:ControlParameter ControlID="tbId" PropertyName="Text" Name="tbId" />Di2015NewLine
15475742Di2015UniqueSeparatorprotected void btnSearch_Click(object sender, EventArgs e)Di2015NewLine{     Di2015NewLine    string SId = tbId.Text;Di2015NewLine    SqlDataSource1.DataBind();Di2015NewLine}Di2015NewLine
15475742Di2015UniqueSeparatorSqlDataSource
15475840Di2015UniqueSeparator^\\d+[\\.,]?\\d*$
15475840Di2015UniqueSeparator^
15475840Di2015UniqueSeparator\\d+
15475840Di2015UniqueSeparator[\\.,]?
15475840Di2015UniqueSeparator\\d*
15475840Di2015UniqueSeparator$
15475841Di2015UniqueSeparatorvar d = new int?[]{null,null};Di2015NewLined.Sum().Dump(); //0Di2015NewLine
15475841Di2015UniqueSeparatorEnumerable.Sum()
15475841Di2015UniqueSeparatornull
15475980Di2015UniqueSeparator     string data = " %04F%02%BC%94%BA%15%E3%AA%08%00%7FF%00";Di2015NewLineDi2015NewLine     // You need to pick an encoding -- are these things ASCII?Di2015NewLine     var encoding = Encoding.ASCII;Di2015NewLine     var values = new List<byte>();Di2015NewLineDi2015NewLine     // Walk over the data (note that we don't increment here).Di2015NewLine     for (int i = 0; i < data.Length;)Di2015NewLine     {Di2015NewLine        // Is this the start of an escaped byte?Di2015NewLine        if (data[i] == '%')Di2015NewLine        {Di2015NewLine           // Grab the two characters after the '%'.Di2015NewLine           var escaped = data.Substring(i + 1, 2);Di2015NewLine           //Console.WriteLine(escaped);Di2015NewLineDi2015NewLine           // Convert them to a byte.Di2015NewLine           byte value = Convert.ToByte(escaped, 16);Di2015NewLine           values.Add(value);Di2015NewLineDi2015NewLine           // Increment over the three characters making up the escaped byte.Di2015NewLine           i += 3;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine           // It's a non-escaped character.Di2015NewLine           var plain = data[i];Di2015NewLine           //Console.WriteLine(plain);Di2015NewLineDi2015NewLine           // Convert it to a single byte.Di2015NewLine           byte[] bytes = encoding.GetBytes(new[] { plain });Di2015NewLine           Debug.Assert(bytes.Length == 1);Di2015NewLine           byte value = bytes[0];Di2015NewLineDi2015NewLine           values.Add(value);Di2015NewLineDi2015NewLine           // Increment over that character.Di2015NewLine           i += 1;Di2015NewLine        }Di2015NewLine     }Di2015NewLineDi2015NewLine     // Print it out, in hex, separated by commas.Di2015NewLine     Console.WriteLine(string.Join(", ",Di2015NewLine                       values.Select(v => string.Format("{0:X2}", v))));Di2015NewLineDi2015NewLine     // Alternatively...Di2015NewLine     Console.WriteLine(BitConverter.ToString(values.ToArray()));Di2015NewLine
15476186Di2015UniqueSeparatorusing (var stream = new memoryStream(bytes))Di2015NewLine{Di2015NewLine  var document = XDocument.Load(stream);Di2015NewLine  ...Di2015NewLine}Di2015NewLine
15476186Di2015UniqueSeparatorusing (var stream = new MemoryStream())Di2015NewLineusing (var writer = XmlWriter.Create(stream))Di2015NewLine{Di2015NewLine  writer.Settings.Encoding = new UTF8Encoding(false);Di2015NewLine  document.WriteTo(writer);Di2015NewLine  var bytesWithoutBOM = stream.ToArray();Di2015NewLine}Di2015NewLine
15476266Di2015UniqueSeparatora || bDi2015NewLine
15476266Di2015UniqueSeparatorbool
15476266Di2015UniqueSeparatorif(a || b)Di2015NewLine
15476266Di2015UniqueSeparatorif
15476266Di2015UniqueSeparator||
15476266Di2015UniqueSeparatorreturn
15476266Di2015UniqueSeparatorreturn (a || b);Di2015NewLine
15476266Di2015UniqueSeparatora || b
15476266Di2015UniqueSeparatorreturn
15476278Di2015UniqueSeparatorTemplateField
15476278Di2015UniqueSeparatorItemField
15476278Di2015UniqueSeparatorColumn
15476278Di2015UniqueSeparator<asp:TemplateField HeaderStyle-Font-Bold="true" HeaderText="Holding Register " Visible="false">Di2015NewLine                    <ItemTemplate>Di2015NewLine                        <asp:Label Text='<%# DataBinder.Eval(Container.DataItem, "Holding_Register")%>' ID="lblUserId"Di2015NewLine                            runat="server"></asp:Label>Di2015NewLine                    </ItemTemplate>Di2015NewLine                </asp:TemplateField>Di2015NewLine                <asp:TemplateField HeaderStyle-Font-Bold="true" HeaderText="Description" Visible="false">Di2015NewLine                    <ItemTemplate>Di2015NewLine                        <asp:Label Text='<%# DataBinder.Eval(Container.DataItem, "Description")%>' ID="lblUserId"Di2015NewLine                            runat="server"></asp:Label>Di2015NewLine                    </ItemTemplate>Di2015NewLine                </asp:TemplateField>Di2015NewLine
15476287Di2015UniqueSeparatorRelativeSource
15476287Di2015UniqueSeparatorElementName
15476287Di2015UniqueSeparatorDataContext
15476287Di2015UniqueSeparator<Image x:Name="myImage" Source="c:\\Pictures\\Airplane.jpg" DataContext="{Binding RelativeSource={RelativeSource Self}}" Width="50" Height="50">Di2015NewLine    <Image.ToolTip>Di2015NewLine        <Image Width="300" Height="300" Source="{Binding Path=Source}"/>Di2015NewLine    </Image.ToolTip>Di2015NewLine</Image>Di2015NewLine
15476301Di2015UniqueSeparatorArrayList
15476301Di2015UniqueSeparatorpublic int SaveSelectedOffers(object[] offers, int selectedRows)Di2015NewLine
15476301Di2015UniqueSeparatorprivate void offersAvailableSubmit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    object[] options = new object[3];Di2015NewLine    options[0] = "item 1";Di2015NewLine    options[1] = "item 2";Di2015NewLine    options[2] = "item 2";Di2015NewLineDi2015NewLine    int rowsAffected = serviceCaller.SaveSelectedOffers(options, rowCount); Di2015NewLine}Di2015NewLine
15476301Di2015UniqueSeparatoroptions
15476301Di2015UniqueSeparatorobject[] options = new object[] { "item 1", "item 2", "item 3" };Di2015NewLine
15476598Di2015UniqueSeparatorthis
15476598Di2015UniqueSeparator@Html.CheckBoxFor(m => m.third[i].chk, new {onchange="test(this)"})Di2015NewLine
15476598Di2015UniqueSeparatorfunction test(item){Di2015NewLine    alert(item.checked)Di2015NewLine}Di2015NewLine
15476628Di2015UniqueSeparatorwhile (true)Di2015NewLine{Di2015NewLine    // This will run foreverDi2015NewLine    if (!thEnroll.IsAlive)Di2015NewLine        break;Di2015NewLine}Di2015NewLine
15476724Di2015UniqueSeparator        lbl.SetCurrentValue(BackgroundProperty,Di2015NewLine                                   new SolidColorBrush(Color.FromRgb(System.Convert.ToByte(121),Di2015NewLine                                                                     System.Convert.ToByte(43),Di2015NewLine                                                                     System.Convert.ToByte(15))));Di2015NewLine
15476814Di2015UniqueSeparatorRegex = new Regex("((?:\\d*\\.)?\\d+)(years?)");Di2015NewLine
15476997Di2015UniqueSeparatorconst string xmlns = "http://schemas.microsoft.com/developer/msbuild/2003";Di2015NewLinevoid Main()Di2015NewLine{Di2015NewLine     var dir = @"C:\\proj\\catalyst\\source";Di2015NewLine     var xmlns = "http://schemas.microsoft.com/developer/msbuild/2003";Di2015NewLine     foreach( var configFile in Directory.EnumerateFiles(dir,"*.csproj",SearchOption.AllDirectories))Di2015NewLine     {              Di2015NewLine        var doc = XDocument.Load(configFile);               Di2015NewLine        var paths = doc.Descendants(XName.Get("OutputPath",xmlns));Di2015NewLine        foreach(var path in paths)Di2015NewLine        {Di2015NewLine            path.Value = "\\"$(SolutionDir)$(ConfigurationName)\\$(PlatformName)\\"";Di2015NewLine        }Di2015NewLine        doc.Save(configFile);Di2015NewLine     }Di2015NewLine}Di2015NewLine
15477045Di2015UniqueSeparatorRedirectToAction
15477045Di2015UniqueSeparatorreturn RedirectToAction("ThankYou","Account",new {msg="success"});Di2015NewLine
15477045Di2015UniqueSeparatorpublic ActionResult ThankYou(string msg)Di2015NewLine{Di2015NewLine  var vm=YourSuccessViewModel();Di2015NewLine  if(msg="success") // you may do a null checking before accessing this valueDi2015NewLine  {Di2015NewLine    vm.Message="Saved Successfully";Di2015NewLine  }Di2015NewLine  return View(vm);  Di2015NewLine}Di2015NewLine
15477045Di2015UniqueSeparatorTempData["UserMsg"] = "Saved Successfully";Di2015NewLinereturn RedirectToAction("ThankYou","Account");Di2015NewLine
15477045Di2015UniqueSeparatorThankYou
15477045Di2015UniqueSeparatorpublic ActionResult ThankYou(string msg)Di2015NewLine{Di2015NewLine   var msg = TempData["UserMsg"] as string; Di2015NewLine   //to do  : do what you want with the message and return the view.Di2015NewLine}Di2015NewLine
15477064Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        DataContext="{Binding RelativeSource={RelativeSource Self}}"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <ListView ItemsSource="{Binding Animals}">Di2015NewLine        <ListView.View>Di2015NewLine            <GridView>Di2015NewLine                <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}"/>Di2015NewLine                <GridViewColumn Header="Enclosure" DisplayMemberBinding="{Binding Enclosure.Name}"/>Di2015NewLine                <GridViewColumn Header="Taste good?" DisplayMemberBinding="{Binding TastesGood}">Di2015NewLine                    <GridViewColumn.CellTemplate>Di2015NewLine                        <DataTemplate>Di2015NewLine                            <CheckBox Checked="{Binding}"/>Di2015NewLine                        </DataTemplate>Di2015NewLine                    </GridViewColumn.CellTemplate>Di2015NewLine                </GridViewColumn>Di2015NewLine            </GridView>Di2015NewLine        </ListView.View>Di2015NewLine    </ListView>Di2015NewLine</Window>Di2015NewLine
15477064Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Collections.ObjectModel;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Controls;Di2015NewLineusing System.Windows.Data;Di2015NewLineusing System.Windows.Documents;Di2015NewLineusing System.Windows.Input;Di2015NewLineusing System.Windows.Media;Di2015NewLineusing System.Windows.Media.Imaging;Di2015NewLineusing System.Windows.Navigation;Di2015NewLineusing System.Windows.Shapes;Di2015NewLineDi2015NewLinenamespace WpfApplication1Di2015NewLine{Di2015NewLine    public class Animal : DependencyObject, INotifyPropertyChangedDi2015NewLine    {Di2015NewLine        Enclosure enclosure;Di2015NewLineDi2015NewLine        public string NameDi2015NewLine        {Di2015NewLine            get { return (string)GetValue(NameProperty); }Di2015NewLine            set { SetValue(NameProperty, value); }Di2015NewLine        }Di2015NewLine        public static readonly DependencyProperty NameProperty = DependencyProperty.Register("Name", typeof(string), typeof(Animal), new PropertyMetadata(null));Di2015NewLineDi2015NewLine        public bool TastesGoodDi2015NewLine        {Di2015NewLine            get { return (bool)GetValue(TastesGoodProperty); }Di2015NewLine            set { SetValue(TastesGoodProperty, value); }Di2015NewLine        }Di2015NewLine        public static readonly DependencyProperty TastesGoodProperty = DependencyProperty.Register("TastesGood", typeof(bool), typeof(Animal), new PropertyMetadata(false));Di2015NewLineDi2015NewLine        public Enclosure EnclosureDi2015NewLine        {Di2015NewLine            get { return enclosure; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                enclosure = value;Di2015NewLine                PropertyChangedEventHandler temp = PropertyChanged;Di2015NewLine                if (temp != null)Di2015NewLine                {Di2015NewLine                    temp(this, new PropertyChangedEventArgs("Enclosure"));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Enclosure : DependencyObjectDi2015NewLine    {Di2015NewLine        public string NameDi2015NewLine        {Di2015NewLine            get { return (string)GetValue(NameProperty); }Di2015NewLine            set { SetValue(NameProperty, value); }Di2015NewLine        }Di2015NewLine        public static readonly DependencyProperty NameProperty = DependencyProperty.Register("Name", typeof(string), typeof(Enclosure), new PropertyMetadata(null));Di2015NewLineDi2015NewLine        public string LocationDi2015NewLine        {Di2015NewLine            get { return (string)GetValue(LocationProperty); }Di2015NewLine            set { SetValue(LocationProperty, value); }Di2015NewLine        }Di2015NewLine        public static readonly DependencyProperty LocationProperty = DependencyProperty.Register("Location", typeof(string), typeof(Enclosure), new PropertyMetadata(null));Di2015NewLine    }Di2015NewLineDi2015NewLine    public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        public ObservableCollection<Animal> AnimalsDi2015NewLine        {Di2015NewLine            get { return (ObservableCollection<Animal>)GetValue(AnimalsProperty); }Di2015NewLine            set { SetValue(AnimalsProperty, value); }Di2015NewLine        }Di2015NewLine        public static readonly DependencyProperty AnimalsProperty = DependencyProperty.Register("Animals", typeof(ObservableCollection<Animal>), typeof(MainWindow), new PropertyMetadata(null));Di2015NewLineDi2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            Animals = new ObservableCollection<Animal>();Di2015NewLine            Animals.Add(new Animal() { Name = "Cow", TastesGood = true, Enclosure = null });Di2015NewLine            Animals.Add(new Animal()Di2015NewLine            {Di2015NewLine                Name = "Chicken",Di2015NewLine                TastesGood = true,Di2015NewLine                Enclosure =Di2015NewLine                    new Enclosure()Di2015NewLine                    {Di2015NewLine                        Name = "chicken coop",Di2015NewLine                        Location = "outside"Di2015NewLine                    }Di2015NewLine            });Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15477113Di2015UniqueSeparatorproCraneVertices[2] =  realCraneVertices[1].Clone();Di2015NewLine
15477291Di2015UniqueSeparatorGridView
15477291Di2015UniqueSeparatorListView
15477306Di2015UniqueSeparatorSetUserMeta
15477306Di2015UniqueSeparatorpublic static void SetBuddyData(string pUserToken, BuddyData pMetaValue, Action<bool> callback)Di2015NewLine{Di2015NewLine    SetUserMeta(pUserToken, "SavedGameData", callback);Di2015NewLine}Di2015NewLine
15477306Di2015UniqueSeparatorSetBuddyData
15477306Di2015UniqueSeparatorSetBuddyData("my user token", myBundle, isLoggedIn => HandleUserLogin(isLoggedIn));Di2015NewLine
15477306Di2015UniqueSeparatorHandleUserLogin
15477306Di2015UniqueSeparatorcallback(rValue);
15477306Di2015UniqueSeparatorSetUserMeta
15477306Di2015UniqueSeparatorpublic static void HandleUserLogin(bool isLogged)Di2015NewLine{Di2015NewLine   Console.WriteLine("user is {0} logged in", isLogged ? "" : "not");Di2015NewLine}Di2015NewLine
15477306Di2015UniqueSeparatorSetBuddyData
15477306Di2015UniqueSeparatorSetBuddyData("my user token", myBundle, HandleUserLogin);Di2015NewLine
15477442Di2015UniqueSeparatorFileOutputStream
15477442Di2015UniqueSeparatorSystem.IO.FileStream
15477442Di2015UniqueSeparatorfor
15477442Di2015UniqueSeparatorc:\\
15477442Di2015UniqueSeparator  //I don't know what you're doing with this variable so I'm just setting it to somethingDi2015NewLine  int nPaginasPDF = 10;Di2015NewLineDi2015NewLine  //I can't write to my C: drive so I'm saving to the desktopDi2015NewLine  string saveFolder = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);Di2015NewLineDi2015NewLine  //Set the default file nameDi2015NewLine  saveFileDialog1.FileName = "name.pdf";Di2015NewLineDi2015NewLine  //If the user presses "OK"Di2015NewLine  if (saveFileDialog1.ShowDialog() == DialogResult.OK) {Di2015NewLine      //Create a bitmap and save it to diskDi2015NewLine      using (Bitmap bitmap = new Bitmap(panel1.ClientSize.Width, panel1.ClientSize.Height)) {Di2015NewLine          panel1.DrawToBitmap(bitmap, panel1.ClientRectangle);Di2015NewLine          //Path.Combine is a safer way to build file pathesDi2015NewLine          bitmap.Save(System.IO.Path.Combine(saveFolder, nPaginasPDF + ".bmp"), ImageFormat.Bmp);Di2015NewLine      }Di2015NewLineDi2015NewLine      //Create a new file stream instance with some locks for safetyDi2015NewLine      using (var fs = new System.IO.FileStream(saveFileDialog1.FileName, System.IO.FileMode.Create, System.IO.FileAccess.Write, System.IO.FileShare.None)) {Di2015NewLine          //Create our iTextSharp documentDi2015NewLine          using (var doc = new Document()) {Di2015NewLine              //Bind a PdfWriter to the Document and FileStreamDi2015NewLine              using (var writer = PdfWriter.GetInstance(doc, fs)) {Di2015NewLine                  //Open the document for writingDi2015NewLine                  doc.Open();Di2015NewLine                  //Get an instance of our imageDi2015NewLine                  iTextSharp.text.Image image1 = iTextSharp.text.Image.GetInstance(System.IO.Path.Combine(saveFolder, nPaginasPDF + ".bmp"));Di2015NewLine                  //Sacle itDi2015NewLine                  image1.ScalePercent(23f);Di2015NewLine                  //Add a new pageDi2015NewLine                  doc.NewPage();Di2015NewLine                  //Add our image to the documentDi2015NewLine                  doc.Add(image1);Di2015NewLineDi2015NewLine                  //Close our document for writingDi2015NewLine                  doc.Close();Di2015NewLine              }Di2015NewLine          }Di2015NewLine      }Di2015NewLine  }Di2015NewLine
15477531Di2015UniqueSeparator<Window x:Class="gregory.bmclub.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <StackPanel>Di2015NewLine        <TextBox Text="{Binding TextSearch,UpdateSourceTrigger=PropertyChanged}"/>Di2015NewLine        <ListView Height="380" HorizontalAlignment="Left" Name="lsNames" VerticalAlignment="Top" Width="170" Di2015NewLine             ScrollViewer.VerticalScrollBarVisibility="Visible" Di2015NewLine             ScrollViewer.HorizontalScrollBarVisibility="Visible" Di2015NewLine             SelectedItem="{Binding SelectedEmployee}" Di2015NewLine             ItemsSource="{Binding View}" Grid.RowSpan="2" Grid.Row="1">Di2015NewLine            <!--ItemsSource changed to "View"-->Di2015NewLine            <ListView.View>Di2015NewLine                <GridView>Di2015NewLine                    <GridViewColumn Header="FirstName" DisplayMemberBinding="{Binding FirstName}" Width="80" />Di2015NewLine                    <GridViewColumn Header="Surname" DisplayMemberBinding="{Binding Surname}" Width="80" />Di2015NewLine                </GridView>Di2015NewLine            </ListView.View>Di2015NewLine        </ListView>Di2015NewLine    </StackPanel>Di2015NewLine</Window>Di2015NewLine
15477531Di2015UniqueSeparatorusing System.Windows;Di2015NewLineDi2015NewLinenamespace gregory.bmclubDi2015NewLine{Di2015NewLine    public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            DataContext = new EmployeeListViewModel();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15477531Di2015UniqueSeparatornamespace gregory.bmclubDi2015NewLine{Di2015NewLine    public class EmployeeViewModelDi2015NewLine    {Di2015NewLine        string firstname;Di2015NewLineDi2015NewLine        public string FirstNameDi2015NewLine        {Di2015NewLine            get { return firstname; }Di2015NewLine            set { firstname = value; }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15477531Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Collections.ObjectModel;Di2015NewLineusing System.Windows.Data;Di2015NewLineusing System.ComponentModel;Di2015NewLineDi2015NewLinenamespace gregory.bmclubDi2015NewLine{Di2015NewLine    class EmployeeListViewModel : INotifyPropertyChangedDi2015NewLine    {Di2015NewLine        #region INotifyPropertyChangedDi2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine        public void OnPropertyChanged(String info)Di2015NewLine        {Di2015NewLine            if (PropertyChanged != null)Di2015NewLine            {Di2015NewLine                PropertyChanged(this, new PropertyChangedEventArgs(info));Di2015NewLine            }Di2015NewLine        }Di2015NewLine        #endregionDi2015NewLineDi2015NewLine        public EmployeeListViewModel()//modified to publicDi2015NewLine        {Di2015NewLine            EmployeeList = new ObservableCollection<EmployeeViewModel>(GetEmployees());Di2015NewLine            this._view = new ListCollectionView(this.employeeList);Di2015NewLine        }Di2015NewLineDi2015NewLine        #region nonModifiedCodeDi2015NewLineDi2015NewLine        private ListCollectionView _employeeCol;Di2015NewLine        public ICollectionView EmployeeCollectionDi2015NewLine        {Di2015NewLine            get { return this._employeeCol; }Di2015NewLine        }Di2015NewLineDi2015NewLine        private ObservableCollection<EmployeeViewModel> employeeList;Di2015NewLine        public ObservableCollection<EmployeeViewModel> EmployeeListDi2015NewLine        {Di2015NewLine            get { return employeeList; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                employeeList = value;Di2015NewLine                OnPropertyChanged("EmployeeList");Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private ListCollectionView _view;Di2015NewLine        public ICollectionView ViewDi2015NewLine        {Di2015NewLine            get { return this._view; }Di2015NewLine        }Di2015NewLineDi2015NewLine        private string _TextSearch;Di2015NewLine        public string TextSearchDi2015NewLine        {Di2015NewLine            get { return _TextSearch; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _TextSearch = value;Di2015NewLine                OnPropertyChanged("TextSearch");Di2015NewLineDi2015NewLine                if (String.IsNullOrEmpty(value))Di2015NewLine                    View.Filter = null;Di2015NewLine                elseDi2015NewLine                    View.Filter = new Predicate<object>(o => ((EmployeeViewModel)o).FirstName == value);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        //created for testingDi2015NewLine        private List<EmployeeViewModel> GetEmployees()Di2015NewLine        {Di2015NewLine            var mylist = new List<EmployeeViewModel>();Di2015NewLine            mylist.Add(new EmployeeViewModel() { FirstName = "nummer1" });Di2015NewLine            mylist.Add(new EmployeeViewModel() { FirstName = "nummer2" });Di2015NewLineDi2015NewLine            return mylist;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15477535Di2015UniqueSeparatorFileInfo
15477535Di2015UniqueSeparatorFullName
15477535Di2015UniqueSeparatorvar fullNames = files.Select(file => file.FullName).ToArray();Di2015NewLine
15477535Di2015UniqueSeparatorFileInfo[] files = null;Di2015NewLinestring path = @"C:\\temp";Di2015NewLineDirectoryInfo folder = new DirectoryInfo(path);Di2015NewLinefiles = folder.GetFiles("*.*", SearchOption.AllDirectories);Di2015NewLineDi2015NewLine//you need string from FileInfo to denote full pathDi2015NewLineIEnumerable<string> fullNames = files.Select(file => file.FullName);Di2015NewLineDi2015NewLineConsole.WriteLine ( string.Join(Environment.NewLine, fullNames ) );Di2015NewLine
15477535Di2015UniqueSeparatorC:\\temp\\1.dot Di2015NewLineC:\\temp\\1.jpg Di2015NewLineC:\\temp\\1.png Di2015NewLineC:\\temp\\1.txt Di2015NewLineC:\\temp\\2.png Di2015NewLineC:\\temp\\a.xml Di2015NewLine...Di2015NewLine
15477535Di2015UniqueSeparatorstring path = @"C:\\temp";Di2015NewLineDirectoryInfo folder = new DirectoryInfo(path);Di2015NewLinevar directories = folder.GetDirectories("*.*", SearchOption.AllDirectories);Di2015NewLineDi2015NewLineDi2015NewLineIEnumerable<string> directoriesWithDot = Di2015NewLine directories.Where(dir => dir.Name.Contains("."))Di2015NewLine            .Select(dir => dir.FullName);Di2015NewLineDi2015NewLineDi2015NewLineIEnumerable<string> filesInDirectoriesWithoutDot = Di2015NewLine directories.Where(dir => !dir.Name.Contains("."))Di2015NewLine            .SelectMany(dir => dir.GetFiles("*.*", SearchOption.TopDirectoryOnly))Di2015NewLine            .Select(file => file.FullName);Di2015NewLineDi2015NewLineDi2015NewLineConsole.WriteLine ( string.Join(Environment.NewLine, directoriesWithDot.Union(filesInDirectoriesWithoutDot) ) );Di2015NewLine
15477608Di2015UniqueSeparatorSELECT
15477608Di2015UniqueSeparatorID         Name                 DateDi2015NewLine1          Bob                  1/1/2013Di2015NewLine2          Bill                 1/3/2013Di2015NewLine3          Andy                 2/1/2013Di2015NewLine...Di2015NewLine
15477608Di2015UniqueSeparatorID
15477608Di2015UniqueSeparatorvar rows = table.Select().Take(10);Di2015NewLine_id = (int)rows.Last()["ID"];Di2015NewLine
15477608Di2015UniqueSeparatorID
15477608Di2015UniqueSeparator_id
15477608Di2015UniqueSeparatorID
15477608Di2015UniqueSeparatorvar rows = table.Select("ID > " + _id).Take(10);Di2015NewLine_id = (int)rows.Last()["ID"];Di2015NewLine
15477608Di2015UniqueSeparatorName
15477608Di2015UniqueSeparatorvar rows = table.Select("", "Name").Take(10);Di2015NewLine_name = rows.Last()["Name"] as string;Di2015NewLine
15477608Di2015UniqueSeparatorName
15477608Di2015UniqueSeparatorName
15477608Di2015UniqueSeparator_name
15477608Di2015UniqueSeparatorvar rows = table.Select("Name > '" + _name + "'", "Name").Take(10);Di2015NewLine_name = rows.Last()["Name"] as string;Di2015NewLine
15477608Di2015UniqueSeparatorName
15477608Di2015UniqueSeparatorTake(10)
15477608Di2015UniqueSeparator10
15477608Di2015UniqueSeparatorID
15477608Di2015UniqueSeparatorName
15477608Di2015UniqueSeparatorSelect
15477608Di2015UniqueSeparatorDataTable
15477643Di2015UniqueSeparator~/Content/logo.png
15477643Di2015UniqueSeparator<img src="http://www.example.com/logo.png" />Di2015NewLine
15477643Di2015UniqueSeparatorcid:
15477643Di2015UniqueSeparator<img src="cid:logo.png" />Di2015NewLine
15477643Di2015UniqueSeparator<img src="data:image/x-icon,%00%00%01%00%01%00%10%10%00%00%01%00%20%00h%04%00%00%16%00%00%00(%00%00%00%10%00%00%00%20%00%00%00%01%00%20%00%00%00%00%00%00%00%00%00%13%0B%00%00%13%0B%00%00%00%00%00%00%00%00%00%00%00%00%00%00llm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FF%00%00%00%00%00%00%00%00llm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FF%00%00%00%00%00%00%00%00llm%FFllm%FF%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00llm%FFllm%FF%00%00%00%00%00%00%00%00llm%FFllm%FF%00%00%00%00llm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FF%00%00%00%00llm%FFllm%FF%00%00%00%00%00%00%00%00llm%FFllm%FF%00%00%00%00llm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FFllm%FF%00%00%00%00llm%FFllm%FF%00%00%00%00%00%00%00%00llm%FFllm%FF%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00Tx%9B%14Ox%A0%3CJx%A4dDx%AA%91Lx%A2%19llm%FFllm%FF%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00Kx%A3%0F%3Cx%B1R%3Ex%B0%84%3Ex%B0%B9%3Ex%B0%DE%3Ex%B0%FF%3Fx%AF%FFAw%AD%FFBv%AB%FFDw%A9%3E%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%3Dx%B0*Ax%AD%FFAx%AD%FFAx%AD%FFBw%AB%ECEv%A9%C0Cw%AB%85%3B%7B%B3T*%83%C5R%15%8D%DCY%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%3Fx%AF%09Bx%ACsDv%AAQDv%AA%2B%3B%7B%B3%08%00%00%00%00%18%8C%D9%0C%09%93%E8r%03%97%EF%E2%02%97%EE%FF%00%99%F2%1B%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%09%93%E8%19%03%97%EE%82%03%96%EE%ED%05%95%EC%FF%04%97%EB%EC%09%91%EA%82%1Dx%E6N%20r%E9%02%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%0F%91%E1%02%02%97%EE%24%03%97%EE%86%05%96%EC%F3%06%95%EB%FF%06%95%EB%EB%04%98%EB%83%0D%8C%E9%10'm%E5L%2Fc%E4%FC.d%E4%81%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%04%96%ED%09%06%95%EB%D5%06%95%EB%FF%06%95%EB%E9%06%96%EB%7C%04%98%EB%17%00%00%00%00%2Bg%E46.d%E4%F8%2Cf%E4%F8%2Cf%E4D%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%06%95%EBl%06%95%EB~%05%96%EB%15%00%00%00%00%00%00%00%00-d%E4%22-e%E4%E5%2Cf%E4%FF%2Cf%E4X%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00.c%E4%0F%2Ce%E4%CB%2Cf%E4%FF%2Cf%E4%7B%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00.c%E4%02%2Cf%E4%AD%2Cf%E4%FF%2Cf%E4%A1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00.d%E4%02%2Cf%E4%93%2Cf%E4%FF%2Cf%E4%C0%2Cf%E4%07%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80%01%00%00%80%01%F0%BF%9F%F9%00%00%90%09%00%00%90%09%00%00%9F%01%00%00%E0%07%00%00%E0%07%00%00%E0%83%00%00%FE%01%00%00%F0%01%00%00%F0!%00%00%F8%C3%FF%FF%FF%87%FF%FF%FF%0F%00%00%FE%0F%00%00" />Di2015NewLine
15477663Di2015UniqueSeparatorpublic bool PositionModifiedByUserDi2015NewLine{ /* implement IPropertyChanged if need to bind to this property */ }Di2015NewLineDi2015NewLine// use this property from codeDi2015NewLinepublic double PositionDi2015NewLine{Di2015NewLine    get { return m_position ; }Di2015NewLine    set { SetPropertyValue ("PositionUI", ref m_position, value) ;Di2015NewLine          PositionModifiedByUser = false ; }Di2015NewLine}Di2015NewLineDi2015NewLine// bind to this property from the UIDi2015NewLinepublic double PositionUIDi2015NewLine{Di2015NewLine    get { return m_position ; }Di2015NewLine    set { if (SetPropertyValue ("PositionUI", ref m_position, value))Di2015NewLine          PositionModifiedByUser = true ; }Di2015NewLine}Di2015NewLine
15477706Di2015UniqueSeparatorListView
15477706Di2015UniqueSeparatorAdapter
15477706Di2015UniqueSeparatorEditText
15477706Di2015UniqueSeparatorArrayAdapter
15477706Di2015UniqueSeparatorvar myAdapter = new ArrayAdapter(this, Resource.Layout.SimpleListItem1, contactArr);Di2015NewLine
15477706Di2015UniqueSeparatorListView
15477706Di2015UniqueSeparatorcontactView.Adapter = myAdapter;Di2015NewLine
15477706Di2015UniqueSeparatorTextViewItem.xml
15477706Di2015UniqueSeparator<?xml version="1.0" encoding="UTF-8"?>Di2015NewLine<TextView xmlns:android="http://schemas.android.com/apk/res/android" Di2015NewLine    android:id="@+id/textItem" Di2015NewLine    android:textSize="44sp"       Di2015NewLine    android:layout_width="fill_parent" Di2015NewLine    android:layout_height="wrap_content" />Di2015NewLine
15477706Di2015UniqueSeparatorvar myAdapter = new ArrayAdapter(this, Resource.Layout.TextViewItem, contactArr);Di2015NewLine
15477914Di2015UniqueSeparatorTransformBlock(...)
15477914Di2015UniqueSeparatorTransformFinalBlock(...)
15477914Di2015UniqueSeparatorHash
15477914Di2015UniqueSeparatorHashAlgorithm
15477914Di2015UniqueSeparatorTransformBlock
15477914Di2015UniqueSeparatorHashAlogrithm
15477914Di2015UniqueSeparatorCanReuseTransform
15477914Di2015UniqueSeparatorbyte[] ComputerHash(byte[])
15477980Di2015UniqueSeparatorEmptyMask
15477980Di2015UniqueSeparatorSPBasePermissions.ViewPages
15477980Di2015UniqueSeparatorEmptyMask
15477980Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum SPBasePermissionsDi2015NewLine{Di2015NewLine    EmptyMask =                 0Ã0000000000000000,Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15478115Di2015UniqueSeparator<img width="100" src="data:@item.ImageMimeType;base64,@(Convert.ToBase64String(item.Image))" />Di2015NewLine
15478123Di2015UniqueSeparatorpublic interface IGetData {Di2015NewLine  string GetData(parameters ...);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyUserControl : UserControl, IGetData {Di2015NewLine  ...Di2015NewLine}Di2015NewLine
15478123Di2015UniqueSeparatorIGetData getable = activeCtrl as IGetData;Di2015NewLineif (getable != null) {Di2015NewLine  var data = getable.GetData(...);Di2015NewLine  // do stuff with dataDi2015NewLine} else {Di2015NewLine  throw new ApplicationException("activeCtrl was null or didn't implement IGetData");Di2015NewLine}Di2015NewLine
15478123Di2015UniqueSeparator// newUc implements IGetData, not hActiveUsrCtrlDi2015NewLineIGetData newUc = hActiveUsrCtrl.GetActiveUsrCtrl(pareâânt.appInfo.catalogId, parent);Di2015NewLinepUserControlContainer.Controls.Add((Control)newUc);Di2015NewLineDi2015NewLinevar data = newUc.GetData(parameters ...);Di2015NewLine
15478191Di2015UniqueSeparator[XmlRoot(ElementName = "ROOT")]Di2015NewLinepublic class RootDi2015NewLine{Di2015NewLine    public int id { get; set; }Di2015NewLine    public int serial { get; set; }Di2015NewLine    public string date { get; set; }Di2015NewLineDi2015NewLine    [XmlArray(ElementName = "ITEMS")]Di2015NewLine    [XmlArrayItem("ITEM")]Di2015NewLine    public List<RootItem> Items { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RootItemDi2015NewLine{Di2015NewLine    public string name { get; set; }Di2015NewLine    public string idd { get; set; }Di2015NewLine    public string pd { get; set; }Di2015NewLine    public string ed { get; set; }Di2015NewLine}Di2015NewLine
15478285Di2015UniqueSeparatorRowState
15478285Di2015UniqueSeparatorSetAdded
15478285Di2015UniqueSeparatorSetModified
15478285Di2015UniqueSeparatorDelete
15478285Di2015UniqueSeparatorRowState
15478285Di2015UniqueSeparatorAcceptChanges
15478285Di2015UniqueSeparatorAcceptChanges
15478285Di2015UniqueSeparatorDataRow
15478285Di2015UniqueSeparatorDataTable
15478285Di2015UniqueSeparatorrow["field"] = "New Value";Di2015NewLine
15478285Di2015UniqueSeparatorRowState
15478285Di2015UniqueSeparatorModified
15478285Di2015UniqueSeparatorOriginal
15478285Di2015UniqueSeparatorRowState
15478343Di2015UniqueSeparatorman enc
15478343Di2015UniqueSeparator-iv
15478343Di2015UniqueSeparator-k
15478343Di2015UniqueSeparator-K
15478343Di2015UniqueSeparatorEncoding.ASCII.GetBytes
15478343Di2015UniqueSeparatorEncoding.UTF8.GetBytes/GetString
15478343Di2015UniqueSeparator-k
15478343Di2015UniqueSeparator-nosalt
15478343Di2015UniqueSeparatorman EVP_BytesToKey
15478343Di2015UniqueSeparatorHash0 = ''Di2015NewLineHash1 = MD5(Hash0 + Password + Salt)Di2015NewLineHash2 = MD5(Hash1 + Password + Salt)Di2015NewLineHash3 = MD5(Hash2 + Password + Salt)Di2015NewLineDi2015NewLineKey = Hash1 + Hash2Di2015NewLineIV = Hash3Di2015NewLine
15478395Di2015UniqueSeparatormethod = delegate(params object[] args)Di2015NewLine{Di2015NewLine    ...Di2015NewLine};Di2015NewLine
15478518Di2015UniqueSeparatorattachment.Body
15478518Di2015UniqueSeparatorforeach(var attachment in message.FindAllAttachments())Di2015NewLine{Di2015NewLine    long byteSize = attachment.Body.Length;Di2015NewLine}Di2015NewLine
15478708Di2015UniqueSeparatorBaseAddress = new Uri(args[0]);Di2015NewLineusing (ServiceHost host = new ServiceHost(typeof(Namespace.Classname), BaseAddress))Di2015NewLine{Di2015NewLine  ServiceMetadataBehavior smb = new ServiceMetadataBehavior();Di2015NewLine  smb.HttpGetEnabled = true;Di2015NewLine  smb.MetadataExporter.PolicyVersion = PolicyVersion.Policy15;Di2015NewLine  host.Description.Behaviors.Add(smb);Di2015NewLine  host.AddServiceEndpoint(typeof(Namespace.IInterface), new BasicHttpBinding(), args[0]);Di2015NewLine  host.Open();Di2015NewLine
15478815Di2015UniqueSeparatorpublic void populateRTF(string yourRTFString)Di2015NewLine{Di2015NewLine    MemoryStream memStream = new MemoryStream(ASCIIEncoding.Default.GetBytes(yourRTFString));Di2015NewLine    yourRichTextBox.Selection.Load(memStream, DataFormats.Rtf);Di2015NewLine}Di2015NewLine
15478815Di2015UniqueSeparatorpopulateRTF(rtf)
15478815Di2015UniqueSeparatorstring rtf = @"{\\rtf1\\ansi\\ansicpg1252\\uc1\\htmautsp\\deff2{\\fonttbl{\\f0\\fcharset0 Times New Roman;}{\\f2\\fcharset0 Segoe UI;}}{\\colortbl\\red0\\green0\\blue0;\\red255\\green255\\blue255;}\\loch\\hich\\dbch\\pard\\plain\\ltrpar\\itap0{\\lang1033\\fs18\\f2\\cf0 \\cf0\\ql{\\f2 {\\ltrch HOOFDDORP - Het zou helemaal niet noodzakelijk zijn voor }{\\i\\ltrch SimCity }{\\ltrch om altijd met het internet verbonden te zijn, omdat er geen simulatie op de servers plaatsvindt. }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}}}"Di2015NewLine
15478870Di2015UniqueSeparatorvar query = from person in container.people Di2015NewLine            select person;Di2015NewLineDi2015NewLineif (userWantsStartsWith)Di2015NewLine{Di2015NewLine    query = from p in queryDi2015NewLine            where p.Name.Contains(some_criterion)Di2015NewLine            select p;Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    query = from p in queryDi2015NewLine            where p.Name.StartsWith(some_criterion)Di2015NewLine            select p;Di2015NewLine}Di2015NewLine
15478870Di2015UniqueSeparatorvar stringFunction = Lambda.Expression((string s1, string s2) => s1.Contains(s2));Di2015NewLineDi2015NewLineif (userWantsStartsWith)Di2015NewLine{Di2015NewLine    stringFunction = Lambda.Expression((string s1, string s2) => s1.StartsWith(s2));Di2015NewLine}Di2015NewLineDi2015NewLinevar query = from p in container.people.AsExpandable()Di2015NewLine            where stringFunction.Invoke(p.Name, some_criterion)Di2015NewLine            select p;Di2015NewLine
15478934Di2015UniqueSeparatorvoid WithLogging(Action action)Di2015NewLine{Di2015NewLine    // set up logging hereDi2015NewLine    action();Di2015NewLine    // save results hereDi2015NewLine}Di2015NewLine
15478934Di2015UniqueSeparatorWithLogging(() =>Di2015NewLine{Di2015NewLine    //do some things hereDi2015NewLine});Di2015NewLine
15479277Di2015UniqueSeparatorif (!String.IsNullOrEmpty(Request.ServerVariables["HTTP_X_ORIGINAL_URL"])) Di2015NewLine{ Di2015NewLine     Form.Action = Request.ServerVariables["HTTP_X_ORIGINAL_URL"]; Di2015NewLine}Di2015NewLine
15479294Di2015UniqueSeparatorAndroidGCMPushNotification apnGCM = new AndroidGCMPushNotification();Di2015NewLineDi2015NewLinestring strResponse =Di2015NewLineapnGCM.SendNotification(deviceID,Di2015NewLine"Test Push Notification message ")Di2015NewLine
15479349Di2015UniqueSeparatorPropertyTypeOmitter
15479349Di2015UniqueSeparatorpublic void Test()Di2015NewLine{Di2015NewLine    var fixture = new Fixture();Di2015NewLine    fixture.Customizations.Add(Di2015NewLine        new PropertyTypeOmitter(Di2015NewLine            typeof(ExtensionDataObject)));Di2015NewLineDi2015NewLine    var person = fixture.CreateAnonymous<Person>();Di2015NewLine}Di2015NewLineDi2015NewLineinternal class PropertyTypeOmitter : ISpecimenBuilderDi2015NewLine{Di2015NewLine    private readonly Type type;Di2015NewLineDi2015NewLine    internal PropertyTypeOmitter(Type type)Di2015NewLine    {Di2015NewLine        if (type == null)Di2015NewLine            throw new ArgumentNullException("type");Di2015NewLineDi2015NewLine        this.type = type;Di2015NewLine    }Di2015NewLineDi2015NewLine    internal Type TypeDi2015NewLine    {Di2015NewLine        get { return this.type; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public object Create(object request, ISpecimenContext context)Di2015NewLine    {Di2015NewLine        var propInfo = request as PropertyInfo;Di2015NewLine        if (propInfo != null && propInfo.PropertyType == type)Di2015NewLine            return new OmitSpecimen();Di2015NewLineDi2015NewLine        return new NoSpecimen(request);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15479511Di2015UniqueSeparator    private void calcResults()Di2015NewLine    {Di2015NewLine       MakePath(id, results.GetType(), _resultCount);Di2015NewLine       MakePath(id, "XYZ", _resultSICount)Di2015NewLine    }Di2015NewLineDi2015NewLine    private string MakePath(string subFolder, Type type, int index)Di2015NewLine    {Di2015NewLine        return MakePath(subFolder, type.Name, index);Di2015NewLine    }Di2015NewLineDi2015NewLine    private string MakePath(string subFolder, string tempFileName, int index)Di2015NewLine    {Di2015NewLine        string dir = System.IO.Path.Combine(_outputDir, subFolder);Di2015NewLine        string fileName = string.Format("{0} {1} {2}.xml",Di2015NewLine               tempFileName, _dateTimeSource.Now.ToString(DATE_FORMAT), index.ToString());Di2015NewLine        return System.IO.Path.Combine(dir, fileName);Di2015NewLine    }Di2015NewLine
15479581Di2015UniqueSeparatorPanel
15479581Di2015UniqueSeparatorPanel
15479581Di2015UniqueSeparatorthis.Controls
15479581Di2015UniqueSeparator       int spacing = 75;Di2015NewLine        int columns = 6;Di2015NewLineDi2015NewLine        //Use your variable above to create the arrayDi2015NewLine        Label[][] map = new Label[columns][];Di2015NewLineDi2015NewLine        for (int i = 0; i < columns; i++) {Di2015NewLine            //Create a new sub arrayDi2015NewLine            map[i] = new Label[columns];Di2015NewLine            for (int j = 0; j < columns; j++) {Di2015NewLine                map[i][j] = new Label();Di2015NewLine                map[i][j].AutoSize = true;Di2015NewLine                map[i][j].BackColor = Color.Black;Di2015NewLine                map[i][j].Location = new Point(i * spacing, j * spacing);Di2015NewLine                map[i][j].Name = "map" + i.ToString() + "," + j.ToString();Di2015NewLine                map[i][j].Width = spacing;Di2015NewLine                map[i][j].Height = spacing;Di2015NewLine                map[i][j].TabIndex = 0;Di2015NewLine                map[i][j].Text = "test" + i.ToString() + j.ToString();Di2015NewLine            }Di2015NewLine            //Add the range to the panelDi2015NewLine            panel1.Controls.AddRange(map[i]);Di2015NewLine        }Di2015NewLine
15479648Di2015UniqueSeparator    Enter the Name of the file : <asp:TextBox ID="txtFilter" runat="server"></asp:TextBox>Di2015NewLine        <asp:Button ID="btnShow"Di2015NewLine            runat="server" Text="ShowData" onclick="btnShow_Click" />Di2015NewLine
15479648Di2015UniqueSeparator        protected void btnShow_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine         ShowData();Di2015NewLine        }Di2015NewLineDi2015NewLine        public void ShowData()Di2015NewLine        {Di2015NewLine            string FilterValue = txtFilter.Text.ToUpper();Di2015NewLine            DirectoryInfo dirInfo = new DirectoryInfo(Server.MapPath(""));Di2015NewLineDi2015NewLine            FileInfo[] info = dirInfo.GetFiles("*.zip");            //Get FileInfo and Save it a FileInfo[] ArrayDi2015NewLineDi2015NewLine            List<Getfiles> _items = new List<Getfiles>();          // Define a List with Two coloumsDi2015NewLineDi2015NewLine            foreach (FileInfo file in info) //Loop the FileInfo[] ArrayDi2015NewLine               _items.Add(new Getfiles { Name = file.Name, LastWriteTime = file.LastWriteTime.ToString("MM/dd/yyyy") });  // Save the Name and LastwriteTime to ListDi2015NewLineDi2015NewLineDi2015NewLine           //you can use Any one the Filtered list from the below...Di2015NewLineDi2015NewLine            var tlistFiltered = _items.Where(item => item.Name.ToUpper() == FilterValue); // Find the File by their File NameDi2015NewLine            var tlistFiltered1 = _items.Where(item => item.Name.ToUpper().Contains(FilterValue)); // Find the file that Contains Specific word in its File NameDi2015NewLine            var tlistFiltered2 = _items.Where(item => item.Name.ToUpper().StartsWith(FilterValue));// Find tha File that StartsWith Some Specific WordDi2015NewLineDi2015NewLineDi2015NewLine            articleList.DataSource = tlistFiltered; //Assign the DataSource to DataGridDi2015NewLine            articleList.DataBind();Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public class GetfilesDi2015NewLine        {Di2015NewLine            public string Name { get; set; }Di2015NewLine            public string LastWriteTime { get; set; }Di2015NewLine        }Di2015NewLine
15479655Di2015UniqueSeparatorclass AUTDi2015NewLine{Di2015NewLine   public Guid ID { get; set; }Di2015NewLine   public string Name { get; set; }Di2015NewLineDi2015NewLine  public Engineer Engineer { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass InstallationSetupDi2015NewLine{Di2015NewLine    public virtual AUT ApplicationUnderTesting { get; set; }Di2015NewLine    public int ApplicationUnderTestingId {get; set;}   <--- Add this.Di2015NewLineDi2015NewLine   public Guid ID { get; set; }Di2015NewLine// Loads of properties etcDi2015NewLine}Di2015NewLineDi2015NewLineclass EngineerDi2015NewLine{Di2015NewLine public Guid ID { get; set; }Di2015NewLine public string Name { get; set; }Di2015NewLine}Di2015NewLine
15479767Di2015UniqueSeparatorSolrQueryByDistance
15479862Di2015UniqueSeparatorSELECT last_insert_rowid()
15479862Di2015UniqueSeparatorShoppingItem
15479862Di2015UniqueSeparatorvar si = new ShoppingItem() {Di2015NewLine  Name = anItem,Di2015NewLine  Shop = aShop,Di2015NewLine  isActive = aIsActive,Di2015NewLine};Di2015NewLinedb.Insert(si);Di2015NewLinereturn si.Id;Di2015NewLine
15480016Di2015UniqueSeparatorprotected void DocumentList_Click(object sender, BulletedListEventArgs e)Di2015NewLine{Di2015NewLine     ListItem li = DocumentList.Items[e.Index];Di2015NewLine     Sting filepath = li.Value;Di2015NewLine     Sting filename = li.Text;Di2015NewLineDi2015NewLine}Di2015NewLine
15480016Di2015UniqueSeparator<asp:BulletedList ID="DocumentList" runat="server" Di2015NewLineDisplayMode="LinkButton" onclick="DocumentList_Click">Di2015NewLine    <asp:ListItem Value="Documents/testpage.pdf" >test page</asp:ListItem>Di2015NewLine    <asp:ListItem Value="Documents/testpage2.pdf" >test page 2</asp:ListItem>Di2015NewLine</asp:BulletedList>Di2015NewLine
15480016Di2015UniqueSeparatorprotected void DocumentList_Click(object sender, BulletedListEventArgs e)Di2015NewLine{Di2015NewLine     ListItem li = DocumentList.Items[e.Index];Di2015NewLine     Sting filepath = li.Value;Di2015NewLine     Sting filename = System.IO.Path.GetFileName(li.Value);Di2015NewLineDi2015NewLine}Di2015NewLine
15480063Di2015UniqueSeparatorBlockingCollection<T>
15480063Di2015UniqueSeparatorvar queue = new BlockingCollection<Action>();Di2015NewLineDi2015NewLine//put work to do in the queueDi2015NewLinefor (int i = 0; i < 10; i++)Di2015NewLine    queue.Add(() => ProcessImage());Di2015NewLinequeue.CompleteAdding();Di2015NewLineDi2015NewLine//create two workersDi2015NewLinefor (int i = 0; i < 2; i++)Di2015NewLine{Di2015NewLine    Task.Factory.StartNew(() =>Di2015NewLine    {Di2015NewLine        foreach (var action in queue.GetConsumingEnumerable())Di2015NewLine            action();Di2015NewLine    });Di2015NewLine}Di2015NewLineDi2015NewLine//to cancel the work, empty the queueDi2015NewLineTask.Delay(5000)Di2015NewLine    .ContinueWith(t =>Di2015NewLine    {Di2015NewLine        queue.GetConsumingEnumerable().Count();Di2015NewLine    });Di2015NewLine
15480148Di2015UniqueSeparatorEnumerateFiles
15480176Di2015UniqueSeparator    public static string LambdaToString<T>(Expression<Func<T, bool>> expression)Di2015NewLine    {Di2015NewLineDi2015NewLine        var replacements = new Dictionary<string, string>();Di2015NewLine        WalkExpression(replacements, expression);Di2015NewLineDi2015NewLineDi2015NewLine        string body = expression.Body.ToString();Di2015NewLineDi2015NewLine        foreach (var parm in expression.Parameters)Di2015NewLine        {Di2015NewLine            var parmName = parm.Name;Di2015NewLine            var parmTypeName = parm.Type.Name;Di2015NewLine            body = body.Replace(parmName + ".", parmTypeName + ".");Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var replacement in replacements)Di2015NewLine        {Di2015NewLine            body = body.Replace(replacement.Key, replacement.Value);    Di2015NewLine        }Di2015NewLineDi2015NewLine        return body;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void WalkExpression(Dictionary<string, string> replacements, Expression expression)Di2015NewLine    {Di2015NewLine        switch (expression.NodeType)Di2015NewLine        {Di2015NewLine            case ExpressionType.MemberAccess:Di2015NewLine                string replacementExpression = expression.ToString();Di2015NewLine                if (replacementExpression.Contains("value("))Di2015NewLine                {Di2015NewLine                    string replacementValue = Expression.Lambda(expression).Compile().DynamicInvoke().ToString();Di2015NewLine                    if (!replacements.ContainsKey(replacementExpression))Di2015NewLine                    {Di2015NewLine                        replacements.Add(replacementExpression, replacementValue.ToString());Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                break;Di2015NewLineDi2015NewLine            case ExpressionType.GreaterThan:Di2015NewLine            case ExpressionType.GreaterThanOrEqual:Di2015NewLine            case ExpressionType.LessThan:Di2015NewLine            case ExpressionType.LessThanOrEqual:Di2015NewLine            case ExpressionType.OrElse:Di2015NewLine            case ExpressionType.AndAlso:Di2015NewLine            case ExpressionType.Equal:Di2015NewLine                var bexp = expression as BinaryExpression;Di2015NewLine                WalkExpression(replacements, bexp.Left);Di2015NewLine                WalkExpression(replacements, bexp.Right);Di2015NewLine                break;Di2015NewLineDi2015NewLine            case ExpressionType.Call:Di2015NewLine                var mcexp = expression as MethodCallExpression;Di2015NewLine                foreach (var argument in mcexp.Arguments)Di2015NewLine                {Di2015NewLine                    WalkExpression(replacements, argument);Di2015NewLine                }Di2015NewLine                break;Di2015NewLineDi2015NewLine            case ExpressionType.Lambda:Di2015NewLine                var lexp = expression as LambdaExpression;Di2015NewLine                WalkExpression(replacements, lexp.Body);Di2015NewLine                break;Di2015NewLineDi2015NewLine            case ExpressionType.Constant:Di2015NewLine                //do nothingDi2015NewLine                break;Di2015NewLineDi2015NewLine            default:Di2015NewLine                Trace.WriteLine("Unknown type");Di2015NewLine                break;Di2015NewLine        }Di2015NewLine
15480226Di2015UniqueSeparatorhttp://tempuri.org/sdnList.xsd
15480226Di2015UniqueSeparatorxDoc.Element(xNS + "sdnList")Di2015NewLine    .Element(xNS + "publshInformation")Di2015NewLine    .Element(xNS + "Publish_Date").Value;Di2015NewLine
15480302Di2015UniqueSeparatortest1, 1  Di2015NewLine"""hello world""", 10  Di2015NewLinetest2, 2Di2015NewLine
15480402Di2015UniqueSeparatorconst string abstractStatement = @"SELECT * FROM CLIENT WHERE CLINO = '0000001'";Di2015NewLineusing (var db = new MyDataContext())Di2015NewLine  var col = db.ExecuteQuery<CLIENTALL>(abstractStatement).ToList();Di2015NewLine
15480402Di2015UniqueSeparatorCLIENTALL
15480565Di2015UniqueSeparator    [__DynamicallyInvokable]Di2015NewLine    public static Encoding UTF8Di2015NewLine    {Di2015NewLine      [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries"), __DynamicallyInvokable] getDi2015NewLine      {Di2015NewLine        if (Encoding.utf8Encoding == null)Di2015NewLine          Encoding.utf8Encoding = (Encoding) new UTF8Encoding(true);Di2015NewLine        return Encoding.utf8Encoding;Di2015NewLine      }Di2015NewLine    }Di2015NewLine
15480627Di2015UniqueSeparatorclass Fruit {}Di2015NewLineclass Apple : Fruit { } // Apple inherits from FruitDi2015NewLineclass Program {Di2015NewLine  static void Main() {Di2015NewLine    Apple apple = new Apple(); // Instantiating a new AppleDi2015NewLine  }Di2015NewLine}Di2015NewLine
15481008Di2015UniqueSeparatorEncoding
15481008Di2015UniqueSeparatorEncoding
15481130Di2015UniqueSeparator    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]Di2015NewLine    public delegate void TestDelegate(string info);Di2015NewLine
15481130Di2015UniqueSeparator    typedef void (__stdcall * TESTCALLBACK_FUNCTION )(char* msg);Di2015NewLine
15481130Di2015UniqueSeparator   unmanaged.put_TestCallBack(new TestDelegate(this.Test));Di2015NewLine
15481192Di2015UniqueSeparator<ComboBox ItemsSource="{Binding Path=Main.CollectionTwo, Source={StaticResource Locator}}" />Di2015NewLine
15481263Di2015UniqueSeparatorpublic int var1;Di2015NewLinepublic char var2;Di2015NewLine
15481263Di2015UniqueSeparatorprivate
15481295Di2015UniqueSeparatorcmd.Parameters.AddWithValue
15481295Di2015UniqueSeparatorcmd.Parameters.Clear()
15481295Di2015UniqueSeparatorforeach (DataRow row in fstathotel.Rows)Di2015NewLine{Di2015NewLine    cmd.CommandText = @"insert into fstathote values (" + Convert.ToInt32(row["mpe"]) + ",'" + Convert.ToDateTime(row["date"]) + "','" + row["type"].ToString() + "',?,'" + Convert.ToDateTime(row["edate"]) + "')";Di2015NewLine    cmd.Parameters.Clear(); // Clear the parameter list Di2015NewLine    cmd.Parameters.AddWithValue("parmSlot1", Decimal.Parse(row["value"].ToString()));Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
15481369Di2015UniqueSeparatorpublic class SomeControllerDi2015NewLine{Di2015NewLine    public SomeController() : this( new SomeObj(new configuration(), new SomethingElse(new SomethingElseToo())) ) Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    publiv SomeController(SomeObj obj)Di2015NewLine    {Di2015NewLine        this.obj = obj;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15481392Di2015UniqueSeparator<httpErrors>
15481392Di2015UniqueSeparatorweb.config
15481392Di2015UniqueSeparatornull
15481413Di2015UniqueSeparatorText
15481413Di2015UniqueSeparatornull
15481413Di2015UniqueSeparatorString.Empty
15481413Di2015UniqueSeparatorif (String.IsNullOrEmpty(maskedTextBox1.Text))Di2015NewLine{Di2015NewLine    //no inputDi2015NewLine}Di2015NewLine
15481475Di2015UniqueSeparatorPage.Controls.Add(link);//Will add control in pageDi2015NewLinecell.Controls.Add(link);//Will add control in table cellDi2015NewLine
15481541Di2015UniqueSeparatorRoles.IsUserInRole( String roleName )Di2015NewLine
15481541Di2015UniqueSeparatorif ( Roles.IsUserInRole( "Manager" ) )Di2015NewLine{Di2015NewLine    Response.Redirect( "~/ManagerLandingPage.aspx" );Di2015NewLine}Di2015NewLine
15481611Di2015UniqueSeparatorConvert.ChangeType
15481611Di2015UniqueSeparatorreturn output.Select(x => (T) Convert.ChangeType(x, typeof(T)))Di2015NewLine             .ToList();Di2015NewLine
15481611Di2015UniqueSeparatorIConvertible
15481611Di2015UniqueSeparatorTypeConverter
15481650Di2015UniqueSeparatorList<T>
15481650Di2015UniqueSeparatorIEnumerable<T>
15481650Di2015UniqueSeparatorx => s.Exists(y => y == x.id)
15481650Di2015UniqueSeparatorContains
15481650Di2015UniqueSeparatorExists
15481833Di2015UniqueSeparatorList<Data> decodedData = JSON.Decode<DataList>(Request["data"])Di2015NewLine
15481833Di2015UniqueSeparatorvar decodedData = JSON.Decode<List<Data>>(Request["data"])Di2015NewLinevar myDataList = new DataList() { data = decodedData; }Di2015NewLine
15481908Di2015UniqueSeparator@"..."
15481908Di2015UniqueSeparator...
15481908Di2015UniqueSeparatorExecute(@"System.Console.WriteLine(""Hello World"");")
15481908Di2015UniqueSeparatorExecute()
15481908Di2015UniqueSeparatorSystem.Console.WriteLine("Hello World");
15481908Di2015UniqueSeparatorStreamReader
15481908Di2015UniqueSeparator@"System.Console.WriteLine(""Hello World"");"
15481908Di2015UniqueSeparator@"System.Console.WriteLine(""Hello World"");"
15481908Di2015UniqueSeparator@"@""System.Console.WriteLine(""""Hello World"""");""""
15481908Di2015UniqueSeparatorExecute()
15482068Di2015UniqueSeparatorBlockingCollection<T>
15482068Di2015UniqueSeparatorvar queue = new BlockingCollection<PriceBookData>();Di2015NewLineDi2015NewLineTask.Factory.StartNew(() =>Di2015NewLine{Di2015NewLine    while (true)Di2015NewLine    {Di2015NewLine        byte[] zmqBuffer = new byte[102400];Di2015NewLine        int messageLength;Di2015NewLine        socket.Receive(zmqBuffer);Di2015NewLine        byte[] message = new byte[messageLength];Di2015NewLine        Buffer.BlockCopy(zmqBuffer, 0, message, 0, messageLength);Di2015NewLine        PriceBookData priceBook = PriceBookData.CreateBuilder().MergeFrom(message).Build();Di2015NewLine        double Type = priceBook.GetPb(0).QuoteType;Di2015NewLine        queue.Add(priceBook);Di2015NewLine    }Di2015NewLine}, TaskCreationOptions.LongRunning);Di2015NewLineDi2015NewLineTask.Factory.StartNew(() =>Di2015NewLine{Di2015NewLine    foreach (var item in queue.GetConsumingEnumerable())Di2015NewLine    {Di2015NewLine        //do stuff with itemDi2015NewLine    }Di2015NewLine}, TaskCreationOptions.LongRunning);Di2015NewLine
15482115Di2015UniqueSeparator[ValueConversion(typeof(bool?), typeof(bool))]Di2015NewLinepublic class Converter : IValueConverterDi2015NewLine{Di2015NewLine    #region IValueConverter MembersDi2015NewLineDi2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        if (targetType != typeof(bool?))Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException("The target must be a nullable boolean");Di2015NewLine        }Di2015NewLine        bool? b = (bool?)value;Di2015NewLine        return b.HasValue && b.Value;Di2015NewLine    } Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        return value;Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
15482150Di2015UniqueSeparator        Uri u = new Uri(url);Di2015NewLine        ServicePoint sp = ServicePointManager.FindServicePoint(u);Di2015NewLineDi2015NewLine        string groupName = Guid.NewGuid().ToString();Di2015NewLine        HttpWebRequest req = HttpWebRequest.Create(u) as HttpWebRequest;Di2015NewLine        req.ConnectionGroupName = groupName;Di2015NewLineDi2015NewLine        using (WebResponse resp = req.GetResponse())Di2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLine        sp.CloseConnectionGroup(groupName);Di2015NewLine        byte[] key = sp.Certificate.GetPublicKey();Di2015NewLineDi2015NewLine        return key;Di2015NewLine
15482161Di2015UniqueSeparatorXmlDocument xmldoc = new XmlDocument();Di2015NewLinexmldoc.Load(@"c:\\test.txt");Di2015NewLineDi2015NewLineXmlNamespaceManager ns = new XmlNamespaceManager(xmldoc.NameTable);Di2015NewLinens.AddNamespace("msbld", "http://schemas.microsoft.com/developer/msbuild/2003");Di2015NewLineXmlNode node = xmldoc.SelectSingleNode("//msbld:TheNodeIWant", ns);Di2015NewLineDi2015NewLineif (node != null)Di2015NewLine{Di2015NewLine    MessageBox.Show(node.InnerText);Di2015NewLine}Di2015NewLine
15482172Di2015UniqueSeparatorvar lookup = request.FrameList.ToLookup(f => f.type);Di2015NewLine
15482172Di2015UniqueSeparatorDictionary
15482172Di2015UniqueSeparatorvar dict = request.FrameListDi2015NewLine                  .GroupBy(f => f.type)Di2015NewLine                  .ToDictionary(g => g.Key, g => g.ToList());Di2015NewLine
15482172Di2015UniqueSeparatorOrderBy
15482172Di2015UniqueSeparatorvar dict = request.FrameListDi2015NewLine                  .GroupBy(f => f.type)Di2015NewLine                  .ToDictionary(g => g.Key, Di2015NewLine                                g => g.OrderBy(f => f.trueDate)Di2015NewLine                                      .ToList());Di2015NewLine
15482218Di2015UniqueSeparatorAjax Developpement
15482218Di2015UniqueSeparatorUpdatePanel control
15482218Di2015UniqueSeparatorTriggers
15482218Di2015UniqueSeparatorUpdate Method
15482241Di2015UniqueSeparatorpublic void Insert (string text, Excel.Worksheet ws, string column){Di2015NewLine    OleDbCommand cmd0 = new OleDbCommand("DELETE FROM ["+ws.Name+"$] where /*column1*/ = '' AND /*column2*/ = '' /*...*/ AND /*columnN*/ = ''", _oleConn);Di2015NewLineDi2015NewLine    cmd0.ExecuteNonQuery();Di2015NewLineDi2015NewLine    OleDbCommand cmd1 = new OleDbCommand("INSERT INTO ["+ws.Name+"$] " +Di2015NewLine                       "([" + column + "]) VALUES(' " + text + " ')", _oleConn);Di2015NewLineDi2015NewLine    cmd1.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
15482292Di2015UniqueSeparatorHKLM\\System\\CurrentControlSet\\Control\\Session Manager\\PendingFileRenameOperationsDi2015NewLine
15482292Di2015UniqueSeparatorHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\RebootPending
15482338Di2015UniqueSeparatorprivate Timer timer;Di2015NewLineprivate void Run()Di2015NewLine{Di2015NewLine    ...Di2015NewLine    timer = new Timer(WriteStuff, null, 0, 100);Di2015NewLine}Di2015NewLine
15482338Di2015UniqueSeparatorBlockingCollection
15482338Di2015UniqueSeparatorConcurrentQueue
15482338Di2015UniqueSeparatorBlockingCollection
15482338Di2015UniqueSeparatorConcurrentQueue
15482338Di2015UniqueSeparatorConcurrentQueue
15482338Di2015UniqueSeparatorBlockingCollection
15482338Di2015UniqueSeparatorEnqueue
15482338Di2015UniqueSeparatorAdd
15482338Di2015UniqueSeparatorfor (int i = 0; i < 5; i++)Di2015NewLine{Di2015NewLine    foreach (var pipe in _pipes)Di2015NewLine    {Di2015NewLine        pipe.Value.Add(Di2015NewLine            new TestObject { Name = DateTime.Now.ToString("o") + "-" + i });Di2015NewLine    }Di2015NewLine}Di2015NewLine
15482551Di2015UniqueSeparatorServiceTplString
15482551Di2015UniqueSeparatorServiceTplString
15482551Di2015UniqueSeparatorServiceTplString = Resources.StartLabelDi2015NewLine
15482551Di2015UniqueSeparatorServiceTplString = Resources.StopLabelDi2015NewLine
15482551Di2015UniqueSeparatorprivate string serviceTplString;Di2015NewLineDi2015NewLinepublic string ServiceTplStringDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return serviceTplString;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        serviceTplString = value;Di2015NewLine        OnPropertyChanged("ServiceTplString");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15482580Di2015UniqueSeparatorType[]
15482580Di2015UniqueSeparatorconstructor
15482580Di2015UniqueSeparatorarray represent the order of Parameter
15482580Di2015UniqueSeparatorConstructor
15482580Di2015UniqueSeparatorpublic class MyClass1Di2015NewLine  {Di2015NewLine      public MyClass1(){}Di2015NewLine      public MyClass1(int i){}Di2015NewLine  }Di2015NewLine
15482580Di2015UniqueSeparatorType[] types = new Type[1];Di2015NewLinetypes[0] = typeof (long);Di2015NewLineDi2015NewLineConstructorInfo constructorInfo = typeof (MyClass1).GetConstructor(types);Di2015NewLine
15482580Di2015UniqueSeparatorconstructorInfo
15482580Di2015UniqueSeparatornull
15482580Di2015UniqueSeparatorconstructor
15482580Di2015UniqueSeparatorlong
15482614Di2015UniqueSeparator    string sql = "delete from [Login] where UserName = " + comboBox1.SelectedText.ToString();Di2015NewLine
15482614Di2015UniqueSeparator'text'
15482614Di2015UniqueSeparator    string sql = "delete from [Login] where UserName = @UserName"Di2015NewLine
15482614Di2015UniqueSeparatorcommand.Parameters.AddWithValue("@UserName", comboBox1.SelectedText.ToString());Di2015NewLine
15482894Di2015UniqueSeparatorÂ¤.*?Â¤
15482894Di2015UniqueSeparatorÂ¤
15482894Di2015UniqueSeparatorÂ¤(.*?)Â¤
15482894Di2015UniqueSeparatorMatch.Groups()
15482894Di2015UniqueSeparatorstring pattern = @"Â¤(.*?)Â¤";Di2015NewLinestring input = "Hello Â¤NameÂ¤, do you speak Â¤SomeLanguageÂ¤?";Di2015NewLineMatchCollection matches = Regex.Matches(input, pattern);Di2015NewLineList<string> l = new List<string>();Di2015NewLineforeach (Match match in matches) {Di2015NewLine     l.add(match.Groups[1].Value);Di2015NewLine}Di2015NewLine
15482936Di2015UniqueSeparatorPageResult
15482936Di2015UniqueSeparatorXmlSerializer
15482936Di2015UniqueSeparatorPageResult
15482989Di2015UniqueSeparatorinternal static class ProgramDi2015NewLine{Di2015NewLine    private static void Main()Di2015NewLine    {Di2015NewLine        var deriver = new Rfc2898DeriveBytes("apples and oranges", 100, 20);Di2015NewLine        Program.WriteArray(deriver, 5);Di2015NewLine        Program.WriteArray(deriver, 10);Di2015NewLine        Program.WriteArray(deriver, 20);Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void WriteArray(Rfc2898DeriveBytes source, int count)Di2015NewLine    {Di2015NewLine        source.Reset();Di2015NewLine        Console.WriteLine(string.Join(" ", source.GetBytes(count).Select(b => b.ToString())));Di2015NewLine    }Di2015NewLine}Di2015NewLine
15482989Di2015UniqueSeparator208 194 113 91 125Di2015NewLine208 194 113 91 125 157 138 234 20 151Di2015NewLine208 194 113 91 125 157 138 234 20 151 159 151 23 94 11 210 38 101 186 143Di2015NewLine
15483050Di2015UniqueSeparatorpublic static void PlayWordAudio(Word word, AxWMPLib.AxWindowsMediaPlayer player)Di2015NewLine    {Di2015NewLine        string tempFile = Path.GetTempFileName() + ".wav";Di2015NewLineDi2015NewLine        MemoryStream stream = new MemoryStream(word.Audio);Di2015NewLineDi2015NewLine        using (Stream fileStream = File.OpenWrite(tempFile))Di2015NewLine        {Di2015NewLine            stream.WriteTo(fileStream);Di2015NewLine        }Di2015NewLineDi2015NewLine        player.URL = tempFile;Di2015NewLineDi2015NewLine        RunDelayed(5000, File.Delete, tempFile); //if we delete file immediately then clip sometimes would not be playedDi2015NewLine    }        Di2015NewLineDi2015NewLine    public delegate void DelayedFuncion(string param);Di2015NewLineDi2015NewLine    public static void RunDelayed(int delay, DelayedFuncion function, string param = null)Di2015NewLine    {Di2015NewLine        System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();Di2015NewLineDi2015NewLine        DelayedArgs args = new DelayedArgs() { delayedFunction = function, param = param };Di2015NewLine        timer.Tag = args;Di2015NewLine        timer.Tick += TimerElapsed;            Di2015NewLine        timer.Interval = delay;Di2015NewLineDi2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void TimerElapsed(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        System.Windows.Forms.Timer timer = sender as System.Windows.Forms.Timer;Di2015NewLine        timer.Stop();Di2015NewLine        DelayedArgs args = timer.Tag as DelayedArgs;Di2015NewLine        args.delayedFunction(args.param);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    class DelayedArgsDi2015NewLine{Di2015NewLine    public Util.DelayedFuncion delayedFunction;Di2015NewLine    public string param;Di2015NewLine}Di2015NewLine
15483244Di2015UniqueSeparatorSystem.Timer
15483244Di2015UniqueSeparator.Tick
15483244Di2015UniqueSeparatorTimer.Elapsed
15483244Di2015UniqueSeparatormyTimer.Elapsed += new EventHandler(MyTimer_Tick);Di2015NewLine
15483244Di2015UniqueSeparatorDictiory<DataGridViewRow, Timer>
15483244Di2015UniqueSeparatorprivate Dictionary<DataGridViewRow, System.Timers.Timer> timers = new Dictionary<DataGridViewRow, System.Timers.Timer>();Di2015NewLineDi2015NewLineprivate void dataGridView1_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)Di2015NewLine{Di2015NewLine    var myTimer = new System.Timers.Timer();Di2015NewLine    myTimer.Interval = 30000;Di2015NewLine    myTimer.Elapsed += new ElapsedEventHandler(MyTimer_Tick);Di2015NewLine    myTimer.Enabled = true;Di2015NewLineDi2015NewLine    // Potential bug source: If you programmatically add multiple rows at once,Di2015NewLine    // a timer is only added to the first rowDi2015NewLine    timers.Add(dataGridView1.Rows[e.RowIndex], myTimer);Di2015NewLine}Di2015NewLine
15483244Di2015UniqueSeparatortimers
15483244Di2015UniqueSeparatortimers.RemoveAt(rowIndex)
15483539Di2015UniqueSeparatorMyTable
15483539Di2015UniqueSeparatorSomeTable
15483539Di2015UniqueSeparatorCssClass
15483539Di2015UniqueSeparatorMyTable
15483539Di2015UniqueSeparatorToList()
15483539Di2015UniqueSeparatorCssClass
15483539Di2015UniqueSeparatorMyTable
15483539Di2015UniqueSeparatorSomeTable
15483727Di2015UniqueSeparatorAutoPostBack="True"
15483727Di2015UniqueSeparatorbase_ddl
15483727Di2015UniqueSeparatorsecondary_ddl.Items.Clear();Di2015NewLineIList<InfoContainer> info = getInfoBasedOnSelected(base_ddl.Value);Di2015NewLinesecondary_ddl.DataTextField = "name";Di2015NewLinesecondary_ddl.DataValueField = "value";Di2015NewLinesecondary_ddl.DataSource = info;Di2015NewLinesecondary_ddl.DataBind();Di2015NewLine
15483822Di2015UniqueSeparatorList<string> mList = new List<string>();Di2015NewLineDi2015NewLinefor (int i = 0; i < _CAUSE.Length; i = i + 2)Di2015NewLine{Di2015NewLine    mList.Add(_CAUSE.Substring(i, 2));Di2015NewLine}Di2015NewLineDi2015NewLinereturn mList;Di2015NewLine
15483847Di2015UniqueSeparator^<img src\\s?=\\s?([^\\s]+).*/>$Di2015NewLine
15483855Di2015UniqueSeparatorAMOUNT
15483855Di2015UniqueSeparatorNULL
15483855Di2015UniqueSeparatorNULL
15483855Di2015UniqueSeparatorNULL
15483918Di2015UniqueSeparator        var publishSettingsFile =Di2015NewLine        @"C:\\yourPublishSettingsFilePathGoesHere";Di2015NewLineDi2015NewLine        XDocument xdoc = XDocument.Load(publishSettingsFile);Di2015NewLineDi2015NewLine        var managementCertbase64string =Di2015NewLine            xdoc.Descendants("PublishProfile").Single().Attribute("ManagementCertificate").Value;Di2015NewLineDi2015NewLine        var managementCert = new X509Certificate2(Di2015NewLine            Convert.FromBase64String(managementCertbase64string));Di2015NewLineDi2015NewLine        // If you have more than one subscription, you'll need to change thisDi2015NewLine        string subscriptionId = xdoc.Descendants("Subscription").First().Attribute("Id").Value;Di2015NewLine        string desiredStorageService = "yourStorageServiceName";Di2015NewLineDi2015NewLine        var req = (HttpWebRequest)WebRequest.Create(Di2015NewLine            string.Format("https://management.core.windows.net/{0}/services/storageservices/{1}/keys",Di2015NewLine                                            subscriptionId,Di2015NewLine                                            desiredStorageService));Di2015NewLine        req.Headers["x-ms-version"] = "2012-08-01";Di2015NewLine        req.ClientCertificates.Add(managementCert);Di2015NewLineDi2015NewLine        XNamespace xmlns = "http://schemas.microsoft.com/windowsazure";Di2015NewLineDi2015NewLine        XDocument response = XDocument.Load(req.GetResponse().GetResponseStream());Di2015NewLineDi2015NewLine        Console.WriteLine("Primary key: " + response.Descendants(xmlns + "Primary").First().Value);Di2015NewLine        Console.WriteLine("Secondary key: " + response.Descendants(xmlns + "Secondary").First().Value);Di2015NewLineDi2015NewLine        Console.Read();Di2015NewLine
15483931Di2015UniqueSeparatorHashMap<int> bookmarks = new HashMap<int>();Di2015NewLinefor (int i = 0; i < scintilla1.Lines.Count; i++)Di2015NewLine{Di2015NewLine    bookmarks.Add(scintilla1.Markers.FindNextMarker(i).Number);Di2015NewLine}Di2015NewLineDi2015NewLineforeach (var bookmark in bookmarks)Di2015NewLine{Di2015NewLine    MessageBox.Show(bookmark.ToString());Di2015NewLine}Di2015NewLine
15483931Di2015UniqueSeparatorFindNextMarker
15483931Di2015UniqueSeparatorHashMap<int> bookmarks = new HashMap<int>();Di2015NewLineint nextBookmark = 0;Di2015NewLineDi2015NewLinewhile (nextBookmark != UInt32.MaxValue)Di2015NewLine{Di2015NewLine    nextBookmark = scintilla1.Markers.FindNextMarker(nextBookmark).Line;Di2015NewLine    if (nextBookmark != UInt32.MaxValue)Di2015NewLine    {Di2015NewLine        bookmarks.Add(nextBookmark);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineforeach (var bookmark in bookmarks)Di2015NewLine{Di2015NewLine    MessageBox.Show(bookmark.ToString());Di2015NewLine}Di2015NewLine
15483931Di2015UniqueSeparatorpublic List<Marker> GetMarkers(int line)
15483931Di2015UniqueSeparatorforeach (var bookmark in scintilla1.Markers.GetMarkers(0))Di2015NewLine{Di2015NewLine    MessageBox.Show(bookmark.Line.ToString());Di2015NewLine}Di2015NewLine
15484165Di2015UniqueSeparatorif (Banner.Text == "Yes")Di2015NewLine{Di2015NewLine    BannerText.Show();Di2015NewLine    label12.Show();Di2015NewLine}Di2015NewLineelse Di2015NewLine{Di2015NewLine    BannerText.Hide();Di2015NewLine    label12.Hide();Di2015NewLine}Di2015NewLine
15484165Di2015UniqueSeparatorelse
15484174Di2015UniqueSeparatorDataRow
15484174Di2015UniqueSeparatorComboBox
15484174Di2015UniqueSeparatorDataRow
15484174Di2015UniqueSeparatorID
15484174Di2015UniqueSeparatorName
15484174Di2015UniqueSeparatorName
15484174Di2015UniqueSeparatorDisplayMemberPath
15484174Di2015UniqueSeparatorSelectedValuePath
15484174Di2015UniqueSeparatorDataItem.PropertyName
15484174Di2015UniqueSeparatorDataRow.ID
15484174Di2015UniqueSeparatorDataRow.Name
15484174Di2015UniqueSeparatorDisplayMemberPath
15484174Di2015UniqueSeparator<TextBlock Text="{Binding DisplayMemberPathValue}" />Di2015NewLine
15484174Di2015UniqueSeparatorKeyValuePair<int,string>
15484174Di2015UniqueSeparatorComboBoxItem
15484174Di2015UniqueSeparatorcomboBox1.SelectedValuePath = "Key";Di2015NewLinecomboBox1.DisplayMemberPath = "Value";Di2015NewLineDi2015NewLineforeach (DataRow item in ds.Tables[0].Rows)Di2015NewLine{Di2015NewLine    comboBox1.Items.Add(Di2015NewLine        new KeyValuePair<int,string>((int)item["ID"], row["Name"] as string));Di2015NewLine}Di2015NewLine
15484209Di2015UniqueSeparator3/10/2013 2:02:11 AM CDT == 3/10/2013 8:02:11 AM UTC == 3/10/2013 3:02:11 AM CDT
15484209Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace TimeZoneSampleDi2015NewLine{Di2015NewLine    public static class ProgramDi2015NewLine    {Di2015NewLine        public static void Main()Di2015NewLine        {Di2015NewLine            DateTime t = DateTime.Parse("3/10/2013 2:02:11 AM");Di2015NewLine            Console.WriteLine(t);Di2015NewLine            Console.WriteLine(t.ToUniversalTime());Di2015NewLine            Console.WriteLine(t.ToUniversalTime().ToLocalTime());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15484209Di2015UniqueSeparator3/10/2013 2:02:11 AMDi2015NewLine3/10/2013 8:02:11 AMDi2015NewLine3/10/2013 3:02:11 AMDi2015NewLine
15484227Di2015UniqueSeparatorBitmapPropertySet properties = await encoder.BitmapProperties.GetPropertiesAsync("/appext/Data");Di2015NewLineproperties = new BitmapPropertySet()Di2015NewLine{Di2015NewLine    {Di2015NewLine        "/appext/Application",Di2015NewLine        new BitmapTypedValue(Iso8859.Default.GetBytes("NETSCAPE2.0"), Windows.Foundation.PropertyType.UInt8Array)Di2015NewLine    },Di2015NewLine    { Di2015NewLine        "/appext/Data",Di2015NewLine        new BitmapTypedValue(new byte[] { 3, 1, 0, 0, 0 }, Windows.Foundation.PropertyType.UInt8Array)Di2015NewLine    },Di2015NewLine};Di2015NewLineDi2015NewLineawait encoder.BitmapProperties.SetPropertiesAsync(properties);Di2015NewLine
15484310Di2015UniqueSeparatorBase.SomeThing
15484310Di2015UniqueSeparatorBase.SomeThing
15484324Di2015UniqueSeparatorList<string[]> csv = new List<string[]>();Di2015NewLineDi2015NewLineforeach (string line in lines)Di2015NewLine{Di2015NewLine    csv.Add(line.Split(','));Di2015NewLine}Di2015NewLine
15484324Di2015UniqueSeparatorvar csv = lines.Select(l => l.Split(',')Di2015NewLine                            .Select((s,i)=>new {s,i})Di2015NewLine                            .ToDictionary(x=>"Col" + (x.i+1), x=>x.s));Di2015NewLine
15484324Di2015UniqueSeparatorvar lines = csvString.Split(new char[] { '\\n', '\\r' }, StringSplitOptions.RemoveEmptyEntries);Di2015NewLinevar cols = lines[0].Split(',');Di2015NewLinevar csv = lines.Skip(1)Di2015NewLine               .Select(l => l.Split(',')Di2015NewLine                             .Select((s, i) => new {s,i})Di2015NewLine                             .ToDictionary(x=>cols[x.i],x=>x.s));Di2015NewLineDi2015NewLinevar json = new JavaScriptSerializer().Serialize(csv);Di2015NewLine
15484335Di2015UniqueSeparatortempList = targetFileList.Select((item, index) => Di2015NewLine    new { Value = item, Index = index }).Where(x => x.Value == baselineFilename);Di2015NewLine
15484335Di2015UniqueSeparatorvar indexes = tempList.Select(x => x.Index).ToList();Di2015NewLine
15484335Di2015UniqueSeparatorcurrentTargetFiles = tempList.Select(x => x.Value).ToList();Di2015NewLine
15484335Di2015UniqueSeparatorindexes[0]
15484335Di2015UniqueSeparatorcurrentTargetFiles[0]
15484450Di2015UniqueSeparatordouble ConvertToDouble(int wholePart, int fractionalPart)Di2015NewLine{Di2015NewLine    return wholePart + fractionalPart / 1000000d;Di2015NewLine}Di2015NewLine
15484450Di2015UniqueSeparatordouble
15484450Di2015UniqueSeparatordecimal
15484450Di2015UniqueSeparatordecimal ConvertToDouble(int wholePart, int fractionalPart)Di2015NewLine{Di2015NewLine    return wholePart + fractionalPart / 1000000m;Di2015NewLine}Di2015NewLine
15484469Di2015UniqueSeparatordiv.deletePhone
15484469Di2015UniqueSeparator0px
15484469Di2015UniqueSeparator#div1 ul li .deletePhone{Di2015NewLinebackground-image:  url(http://localhost/TheEatTel/public/images/close.png);Di2015NewLinebackground-repeat: no-repeat;Di2015NewLineheight:100px; /*some height value*/Di2015NewLine}Di2015NewLine
15484469Di2015UniqueSeparatorvar phone
15484469Di2015UniqueSeparatordiv.deletePhone
15484469Di2015UniqueSeparator$("#div1 ul").append("<li><div class='deletePhone'>"+phone+"</div></li>");Di2015NewLine
15484746Di2015UniqueSeparatorRandom RandomClass = new Random();Di2015NewLineList<int> list = new List<int>();Di2015NewLineDi2015NewLinefor (int i = 0; i < 10; i++)Di2015NewLine    list.Add(RandomClass.Next(1, 49));Di2015NewLinelist.Sort();Di2015NewLineDi2015NewLine// If you need to reverse it...Di2015NewLinelist.Reverse();Di2015NewLine
15484746Di2015UniqueSeparatorList<string>
15484746Di2015UniqueSeparatorprivate static int CompareValues(string x, string y)Di2015NewLine{Di2015NewLine    if (x == null)Di2015NewLine        return y == null ? 0 : -1;Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        if (y == null)Di2015NewLine           return 1;Di2015NewLine        elseDi2015NewLine        {Di2015NewLine           int left = Int32.Parse(x);Di2015NewLine           int right = Int32.Parse(y);Di2015NewLineDi2015NewLine           if (left > right)Di2015NewLine               return 1;Di2015NewLine           else if (left < right)Di2015NewLine               return -1;Di2015NewLine           elseDi2015NewLine               return 0;Di2015NewLine        }Di2015NewLine     }Di2015NewLine }Di2015NewLine
15484746Di2015UniqueSeparatorSort()
15484746Di2015UniqueSeparator list.Sort(CompareValues);Di2015NewLine
15484824Di2015UniqueSeparator<Window.DataContext>Di2015NewLine    <local:ViewModel />Di2015NewLine</Window.DataContext>Di2015NewLine<Window.Resources>Di2015NewLine    <DataTemplate DataType="{x:Type local:Test1ViewModel}">Di2015NewLine        <local:Test1View />Di2015NewLine    </DataTemplate>Di2015NewLine</Window.Resources>Di2015NewLine<Grid>Di2015NewLine    <ContentControl Content="{Binding ContentModel}" />Di2015NewLine</Grid>Di2015NewLine
15484824Di2015UniqueSeparator<UserControl x:Class="WpfApplication1.Test1View" Di2015NewLine             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Di2015NewLine             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">Di2015NewLine    <StackPanel>Di2015NewLine        <TextBlock Text="{Binding Name}" Background="Beige" Padding="5"  />Di2015NewLine        <TextBlock Text="{Binding Address}" Background="PeachPuff" Padding="5" />Di2015NewLine    </StackPanel>Di2015NewLine</UserControl>Di2015NewLine
15484824Di2015UniqueSeparatorpublic class ViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    private void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (this.PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLineDi2015NewLine    private Test1ViewModel _contentModel;Di2015NewLine    public Test1ViewModel ContentModel { get { return _contentModel; } set { _contentModel = value; OnPropertyChanged("ContentModel"); } }Di2015NewLineDi2015NewLine    public ViewModel()Di2015NewLine    {Di2015NewLine        this.ContentModel = new Test1ViewModel() { Name = "John Higgins", Address = "Wishaw" };Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class Test1ViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private string _name;Di2015NewLine    public string Name { get { return _name; } set { _name = value; OnPropertyChanged("Name"); } }Di2015NewLineDi2015NewLine    private string _address;Di2015NewLine    public string Address { get { return _address; } set { _address = value; OnPropertyChanged("Address"); } }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    private void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (this.PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
15484838Di2015UniqueSeparator    Console.Write("{0}\\t\\t{1}\\t\\t{2}\\t{3}\\t{4}\\t{5}\\n", dayNames[i],Di2015NewLine     bCalories[i], lCalories[i], dCalories[i], dayTotal[i] + m);Di2015NewLine
15484838Di2015UniqueSeparator{4}
15484838Di2015UniqueSeparator    Console.WriteLine("{0}\\t\\t{1}\\t\\t{2}\\t{3}\\t{4}", dayNames[i],Di2015NewLine     bCalories[i], lCalories[i], dCalories[i], dayTotal[i] + m);Di2015NewLine
15484838Di2015UniqueSeparatorConsole.WriteLine
15484838Di2015UniqueSeparatorConsole.Write
15484838Di2015UniqueSeparator\\n
15484866Di2015UniqueSeparator    protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine        {Di2015NewLine            e.Row.Cells[1].CssClass = "controlbackcolor";Di2015NewLine            e.Row.Cells[3].CssClass = "controlbackcolor";Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15484913Di2015UniqueSeparatorField.Index.NOT_ANALYZED
15484913Di2015UniqueSeparatorField.Index.ANALYZED
15484913Di2015UniqueSeparatorAnalyzer
15484913Di2015UniqueSeparatorTerm
15484913Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing Lucene.Net.Analysis;Di2015NewLineusing Lucene.Net.Analysis.Standard;Di2015NewLineusing Lucene.Net.Documents;Di2015NewLineusing Lucene.Net.Index;Di2015NewLineusing Lucene.Net.Search;Di2015NewLineusing Lucene.Net.Store;Di2015NewLineDi2015NewLinenamespace ConsoleApplication2Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            RAMDirectory dir = new RAMDirectory();Di2015NewLine            var perFieldAnalyzer = new PerFieldAnalyzerWrapper(new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_30));Di2015NewLine            perFieldAnalyzer.AddAnalyzer("ExactTitle", new LowercaseKeywordAnalyzer());Di2015NewLineDi2015NewLine            IndexWriter indexWriter = new IndexWriter(dir, perFieldAnalyzer, IndexWriter.MaxFieldLength.UNLIMITED);Di2015NewLineDi2015NewLine            Document reportDoc = new Document();Di2015NewLine            Field exactTitleField = new Field("ExactTitle", Di2015NewLine                                                "Test Abc", Di2015NewLine                                                Field.Store.NO,Di2015NewLine                                                Field.Index.ANALYZED);Di2015NewLineDi2015NewLine            reportDoc.Add(exactTitleField);Di2015NewLine            indexWriter.AddDocument(reportDoc);Di2015NewLine            indexWriter.Commit();Di2015NewLineDi2015NewLine            IndexSearcher searcher = new IndexSearcher(indexWriter.GetReader());Di2015NewLineDi2015NewLine            var term = new Term("ExactTitle", "test abc"); //note: for this to work this way you need to always lower case the search tooDi2015NewLine            var exactQuery = new TermQuery(term);Di2015NewLineDi2015NewLine            var hits = searcher.Search(exactQuery, null, 25, Sort.RELEVANCE);Di2015NewLine            Console.WriteLine(hits.TotalHits); // prints "1"Di2015NewLine            Console.ReadLine();Di2015NewLineDi2015NewLine            indexWriter.Close();Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public class LowercaseKeywordAnalyzer : AnalyzerDi2015NewLine        {Di2015NewLineDi2015NewLine            public override TokenStream TokenStream(string fieldName, System.IO.TextReader reader)Di2015NewLine            {Di2015NewLine                TokenStream tokenStream = new KeywordTokenizer(reader);Di2015NewLine                tokenStream = new LowerCaseFilter(tokenStream);Di2015NewLine                return tokenStream;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15484950Di2015UniqueSeparatorBiDi
15484950Di2015UniqueSeparatorBiDi
15484950Di2015UniqueSeparatorusing (WordprocessingDocument doc =Di2015NewLine   WordprocessingDocument.Open(@"test.docx", true))Di2015NewLine{Di2015NewLine  Paragraph p = doc.MainDocumentPart.Document.Body.ChildElements.First<Paragraph>();Di2015NewLineDi2015NewLine  if(p == null)Di2015NewLine  {Di2015NewLine    Console.Out.WriteLine("Paragraph not found.");Di2015NewLine    return;Di2015NewLine  }Di2015NewLineDi2015NewLine  ParagraphProperties pp = p.ChildElements.First<ParagraphProperties>();Di2015NewLineDi2015NewLine  if (pp == null)Di2015NewLine  {Di2015NewLine    pp = new ParagraphProperties();Di2015NewLine    p.InsertBefore(pp, p.First());Di2015NewLine  }Di2015NewLineDi2015NewLine  BiDi bidi = new BiDi();Di2015NewLine  pp.Append(bidi);Di2015NewLineDi2015NewLine}Di2015NewLine
15484966Di2015UniqueSeparatorTabLayoutStyle
15484966Di2015UniqueSeparatortabCtrl1.TabLayoutStyle = TabLayoutStyle.SingleRowSizeToFit;Di2015NewLine
15485112Di2015UniqueSeparatorWhere
15485112Di2015UniqueSeparator.Where(t => t.Content is Image && !(t.Content as Image).Private)Di2015NewLine
15485112Di2015UniqueSeparatorInclude
15485112Di2015UniqueSeparatorAuthor
15485112Di2015UniqueSeparatorImage
15485112Di2015UniqueSeparatorInclude
15485112Di2015UniqueSeparatorContent
15485112Di2015UniqueSeparatorAuthor
15485112Di2015UniqueSeparatorContent
15485112Di2015UniqueSeparatorTag
15485112Di2015UniqueSeparatorInclude
15485112Di2015UniqueSeparatorvar tags = context.TagsDi2015NewLine    .Where(t => t.Content is Image && !(t.Content as Image).Private)Di2015NewLine    .Select(t => newDi2015NewLine    {Di2015NewLine        Tag = t,Di2015NewLine        Image = t.Content as Image, // possibly this line is not neededDi2015NewLine        Author = (t.Content as Image).Author,Di2015NewLine        Person = t.PersonDi2015NewLine    })Di2015NewLine    .AsEnumerable()Di2015NewLine    .Select(x => x.Tag)Di2015NewLine    .ToList();Di2015NewLine
15485112Di2015UniqueSeparatorAsNoTracking
15485112Di2015UniqueSeparatorContent
15485112Di2015UniqueSeparatorContent.Author
15485112Di2015UniqueSeparatorPerson
15485112Di2015UniqueSeparatorInclude
15485382Di2015UniqueSeparatorpeople.RemoveAt(listView1.SelectedItems[0].Index); // removes item from people LIST.Di2015NewLinelistView1.Items.Remove(listView1.SelectedItems[0]); // removes item/person from LISTVIEWDi2015NewLine
15485451Di2015UniqueSeparatorPictureBox.Image
15485451Di2015UniqueSeparatordr[4]
15485451Di2015UniqueSeparatorbyte[]
15485451Di2015UniqueSeparatorbyte []
15485451Di2015UniqueSeparatorusing (MemoryStream ms = new MemoryStream((byte[])dr[4]))Di2015NewLine{Di2015NewLine    pictureBox1.Image= Image.FromStream(ms);Di2015NewLine}Di2015NewLine
15485487Di2015UniqueSeparatorLEFT JOIN
15485487Di2015UniqueSeparatorSELECT Table1.Data1,Di2015NewLine       Table2.Data2,Di2015NewLine       Table3.Data3,Di2015NewLine       Table4.Data4Di2015NewLineFROM   Table1 Di2015NewLineLEFT JOIN Table2 Di2015NewLine    ON Table1.REF2 = Table2.Ref2ID Di2015NewLineLEFT JOIN Table3 Di2015NewLine    ON Table1.REF2 = Table3.Ref3ID Di2015NewLineLEFT JOIN Table4 Di2015NewLine    ON Table1.REF2 = Table4.Ref4IDDi2015NewLineWHERE  REF1 = '01'Di2015NewLine
15485500Di2015UniqueSeparatorvar result = recordsDi2015NewLine    .SelectMany(r => new[] { r, new Record { // 1Di2015NewLine           SellerID = r.BuyerID, Di2015NewLine           BuyerID = r.SellerID, Di2015NewLine           Assets = r.Assets.Select(a => new Asset { Di2015NewLine                        AssetID = a.AssetID, Di2015NewLine                        Amount = -a.AmountDi2015NewLine                    }).ToList() }})Di2015NewLine    .GroupBy(r => new { r.SellerID, r.BuyerID }) // 2Di2015NewLine    .Select(g => new { // 3Di2015NewLine           Seller = g.Key.SellerID,Di2015NewLine           Buyer = g.Key.BuyerID,Di2015NewLine           Assets = g.SelectMany(r => r.Assets)Di2015NewLine                     .GroupBy(a => a.AssetID)Di2015NewLine                     .Select(ag => new { Di2015NewLine                         AssetID = ag.Key,Di2015NewLine                         Amount = ag.Sum(a => a.Amount) })Di2015NewLine                     .Where(x => x.Amount > 0) });Di2015NewLine
15485500Di2015UniqueSeparatorSelectMany
15485500Di2015UniqueSeparatorRecord
15485500Di2015UniqueSeparatorAsset
15485511Di2015UniqueSeparatorreturn ( 100 * TotalCorrect )  / TotalQuestions;Di2015NewLine
15485511Di2015UniqueSeparatorpublic int Score()Di2015NewLine{Di2015NewLine    return (int)(( (decimal)TotalCorrect / TotalQuestions ) * 100);Di2015NewLine}Di2015NewLine
15485687Di2015UniqueSeparatorIDisposable.Dispose()
15485687Di2015UniqueSeparatorusing
15485687Di2015UniqueSeparator.Include
15485762Di2015UniqueSeparatorBoolean assignedFirst = false;Di2015NewLineDi2015NewLinewhile (results.Read()) {Di2015NewLine  if (!assignedFirst) {Di2015NewLine    textBox1.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine    assignedFirst = true;Di2015NewLine  }Di2015NewLine  ListItem newItem = new ListItem();Di2015NewLine  newItem.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine  newItem.Value = results["ID"].ToString();Di2015NewLine}Di2015NewLine
15485762Di2015UniqueSeparatorInt32 i = 0;Di2015NewLinewhile (results.Read()) {Di2015NewLine  switch(i) {Di2015NewLine    case 0: Di2015NewLine      textBox1.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine      break;Di2015NewLine    case 1:Di2015NewLine      textBox2.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine      break;Di2015NewLine    case 2:Di2015NewLine      textBox3.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine      break;Di2015NewLine    case 3:Di2015NewLine      textBox4.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine      break;Di2015NewLine    case 4:Di2015NewLine      textBox5.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine      break;Di2015NewLine  }Di2015NewLine  i++;Di2015NewLineDi2015NewLine      ListItem newItem = new ListItem();Di2015NewLine      newItem.Text = results["TEXT_CONTENT"].ToString();Di2015NewLine      newItem.Value = results["ID"].ToString();Di2015NewLineDi2015NewLine}Di2015NewLine
15485826Di2015UniqueSeparatorRegex.Replace("\\"MIKE YANICK\\",\\"412 A AVE \\"E\\",\\" \\",\\"NADIEN PA\\",\\" \\",\\"190445468\\"",Di2015NewLine    "(?<=\\")([^,]*)(?=\\")",Di2015NewLine    m => m.Value.Replace("\\"", string.Empty)) ;Di2015NewLine
15485826Di2015UniqueSeparator"MIKE YANICK","412 A AVE E"," ","NADIEN PA"," ","190445468"Di2015NewLine
15485869Di2015UniqueSeparatorProfile
15485869Di2015UniqueSeparatorProfileViewModel
15485869Di2015UniqueSeparatorProfileVM
15485869Di2015UniqueSeparatorProfile
15485869Di2015UniqueSeparatorSelectList
15485869Di2015UniqueSeparatorDropDownListFor
15485869Di2015UniqueSeparatorViewBag
15485869Di2015UniqueSeparatorpublic string Photo { get; set; }Di2015NewLinepublic HttpPostedFileBase PhotoUpload { get; set; }Di2015NewLine
15485869Di2015UniqueSeparatorPhotoUpload
15485869Di2015UniqueSeparatorPhoto
15485869Di2015UniqueSeparator@Html.TextBoxFor(m => m.PhotoUpload, new { type = "file" })Di2015NewLine
15485869Di2015UniqueSeparatorif (model.PhotoUpload.ContentLength > 0) {Di2015NewLine    // A file was uploadedDi2015NewLine    var fileName = Path.GetFileName(model.PhotoUpload.FileName);Di2015NewLine    var path = Path.Combine(Server.MapPath(uploadPath), fileName);Di2015NewLine    model.PhotoUpload.SaveAs(path);Di2015NewLine    model.Photo = uploadPath + fileName;Di2015NewLine}Di2015NewLine
15485869Di2015UniqueSeparatoruploadPath
15485869Di2015UniqueSeparator~/uploads/profile/photos
15485869Di2015UniqueSeparatormodel
15485869Di2015UniqueSeparatorProfileViewModel
15485869Di2015UniqueSeparatorvar profile = AutoMapper.Mapper.Map<Profile>(model);Di2015NewLine
15485869Di2015UniqueSeparatorvar profile = db.Profiles.Find(userId);Di2015NewLine...Di2015NewLineAutomapper.Mapper.Map(model, profile);Di2015NewLine
15485869Di2015UniqueSeparatorPhotoUpload
15485869Di2015UniqueSeparatorPhoto
15485869Di2015UniqueSeparatorPhoto
15485869Di2015UniqueSeparatorif (ModelState.IsValid)
15485869Di2015UniqueSeparatorvar validTypes = new[] { "image/jpeg", "image/pjpeg", "image/png", "image/gif" };Di2015NewLineif (!validTypes.Contains(model.PhotoUpload.ContentType))Di2015NewLine{Di2015NewLine    ModelState.AddModelError("PhotoUpload", "Please upload either a JPG, GIF, or PNG image.");Di2015NewLine}Di2015NewLine
15485887Di2015UniqueSeparatorconst string quote = "\\""; Di2015NewLineconst string space = " ";Di2015NewLineconst string equals = "=";Di2015NewLinexmlString =  Name + equals + space + quote + dataList[i].ToString() + quote + space;Di2015NewLine
15485887Di2015UniqueSeparatorToString
15485887Di2015UniqueSeparatorToString
15485887Di2015UniqueSeparatorString.Format
15485887Di2015UniqueSeparatorconst string xmlAttributeFormat = "{0} = \\"{1}\\" ";Di2015NewLinestring xmlString = String.Format(xmlAttributeFormat, Name, dataList[i]);Di2015NewLine
15486037Di2015UniqueSeparator//Assumes i is declared somewhere else Di2015NewLinefor (i ; i < smss.Count; i++)Di2015NewLine{Di2015NewLine    if (smss[i].Attributes["body"].InnerText.Contains(searchText))Di2015NewLine    {Di2015NewLine        txtName.Text = smss[i].Attributes["body"].InnerText +Di2015NewLine                       smss[i].Attributes["time"].Value;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15486109Di2015UniqueSeparatorSystem.Diagnostics.Process.Start(@"iexplore.exe", "\\"C:\\\\textfile.txt\\"");Di2015NewLine
15486109Di2015UniqueSeparatorHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\http\\shell\\open\\command
15486109Di2015UniqueSeparatorProcess.Start(..)
15486115Di2015UniqueSeparatorDi2015NewLinegwmi -q "select * from win32_computersystem"Di2015NewLine</pre>
15486250Di2015UniqueSeparatorGL_TRIANGLES
15486250Di2015UniqueSeparator0, 1, 2,   0, 2, 3,  0, 3, 4, ...Di2015NewLine
15486300Di2015UniqueSeparatorvar time = 3669905128; // Time value in ticksDi2015NewLinevar days = Math.floor(time/(24*60*60*10000000)); // Math.floor() rounds a number downwards to the nearest whole integer, which in this case is the value representing the dayDi2015NewLinevar hours = Math.round((time/(60*60*10000000)) % 24); // Math.round() rounds the number up or downDi2015NewLinevar mins = Math.round((time/(60*10000000)) % 60);Di2015NewLineDi2015NewLineconsole.log('days: ' + days);   Di2015NewLineconsole.log('hours: ' + hours);   Di2015NewLineconsole.log('mins: ' + mins);Di2015NewLine
15486360Di2015UniqueSeparatorDescription
15486467Di2015UniqueSeparator<code>Di2015NewLineDi2015NewLinedecimal num = 123.456m;Di2015NewLineNumberFormatInfo ci = CultureInfo.CurrentCulture.NumberFormat;Di2015NewLineci.CurrencyDecimalSeparator = " "; // You can't use string.Empty here, as it throws an exception.Di2015NewLinestring str = num.ToString("N", ci).Replace(" ", string.Empty);Di2015NewLineDi2015NewLine</code>Di2015NewLine
15486756Di2015UniqueSeparator//Method 1 fix by setting a default value.Di2015NewLinetryDi2015NewLine{Di2015NewLine    Main_Box.BackColor = Color.FromArgb(Properties.Settings.Default.TCP_BackgroundR, Properties.Settings.Default.TCP_BackgroundG, Properties.Settings.Default.TCP_BackgroundB);Di2015NewLine}Di2015NewLinecatch (ArgumentException)Di2015NewLine{Di2015NewLine    //If a invalid color was read in from the config file use white insteadDi2015NewLine    Main_Box.BackColor = Color.White;Di2015NewLine}Di2015NewLineDi2015NewLine//Method 2 fix by clamping values.Di2015NewLineint red = Math.Min(Math.Max(Properties.Settings.Default.TCP_BackgroundR, 0), 255);Di2015NewLineint green = Math.Min(Math.Max(Properties.Settings.Default.TCP_BackgroundG, 0), 255);Di2015NewLineint blue = Math.Min(Math.Max(Properties.Settings.Default.TCP_BackgroundB, 0), 255);Di2015NewLineMain_Box.BackColor = Color.FromArgb(red, green, blue);Di2015NewLine
15486756Di2015UniqueSeparatorFromArgb
15486790Di2015UniqueSeparatorvar
15486790Di2015UniqueSeparatorvar
15486790Di2015UniqueSeparatorvar employee = new Employee();Di2015NewLine
15486790Di2015UniqueSeparatorvar e = GetEmployees();Di2015NewLine
15486790Di2015UniqueSeparatore
15486790Di2015UniqueSeparatorEmployee
15486790Di2015UniqueSeparatorReallyLongClassName someidentifier = new ReallyLongClassName();Di2015NewLine
15486790Di2015UniqueSeparatorvar explanatoryIdentifier = new ReallyLongClassName();Di2015NewLine
15486908Di2015UniqueSeparator\\ProjectsDi2015NewLine    \\ProjectADi2015NewLine        \\ProjectA.csprojDi2015NewLine    \\ProjectBDi2015NewLine        \\ProjectB.csprojDi2015NewLineDi2015NewLine\\OtherProjectsDi2015NewLine    \\SomethingElseDi2015NewLine        \\SomethingElse.slnDi2015NewLine
15486908Di2015UniqueSeparator\\OtherProjects\\SomethingElse\\SomethingElse.sln
15486908Di2015UniqueSeparator\\Projects\\ProjectA\\ProjectA.csproj
15486908Di2015UniqueSeparatorSolution 'SomethingElse' (1 project)Di2015NewLine  ProjectADi2015NewLine
15486908Di2015UniqueSeparator\\Projects\\ProjectA
15486908Di2015UniqueSeparator\\OtherProjects\\SomethingElse
15486946Di2015UniqueSeparatorvar user = new User { Name = "Joe" };Di2015NewLinesession.Store(user);Di2015NewLineDi2015NewLinevar fooBar = new FooBar { Name = "Whatever" };Di2015NewLinesession.Store(fooBar);Di2015NewLineDi2015NewLineDebug.WriteLine(user.Id);Di2015NewLineDebug.WriteLine(fooBar.Id);Di2015NewLine
15486946Di2015UniqueSeparatorusers/1Di2015NewLineFooBars/1Di2015NewLine
15486946Di2015UniqueSeparatordocumentStore.Conventions.FindTypeTagName = type => type.Name.ToLower();Di2015NewLine
15486946Di2015UniqueSeparatoruser/1Di2015NewLinefoobar/1Di2015NewLine
15486946Di2015UniqueSeparatordocumentStore.Conventions.FindTypeTagName = type =>Di2015NewLine              DocumentConvention.DefaultTypeTagName(type).ToLower();Di2015NewLine
15486946Di2015UniqueSeparatorusers/1Di2015NewLinefoobars/1Di2015NewLine
15486946Di2015UniqueSeparatordocumentStore.Conventions.FindTypeTagName = type =>Di2015NewLine{Di2015NewLine    var s = DocumentConvention.DefaultTypeTagName(type);Di2015NewLine    return s.Substring(0, 1).ToUpper() + s.Substring(1);Di2015NewLine};Di2015NewLine
15486946Di2015UniqueSeparatorUsers/1Di2015NewLineFooBars/1Di2015NewLine
15486946Di2015UniqueSeparatordocumentStore.Conventions.FindTypeTagName = type =>Di2015NewLine{Di2015NewLine    var s = DocumentConvention.DefaultTypeTagName(type);Di2015NewLine    return s.Substring(0, 1).ToLower() + s.Substring(1);Di2015NewLine};Di2015NewLine
15486946Di2015UniqueSeparatorusers/1Di2015NewLinefooBars/1Di2015NewLine
15487156Di2015UniqueSeparatorpublic IQueryable<TE> SelectAll<TE, TKey>(Expression<Func<TE, bool>> predicate, Di2015NewLine            Expression<Func<TE, TKey>> sortExpression, bool orderDescending = false)Di2015NewLine{Di2015NewLine    var list = _ctx.CreateQuery<TE>("[" + typeof(TE).Name + "]")Di2015NewLine                   .AsExpandable().Where(predicate);Di2015NewLineDi2015NewLine    return orderDescending Di2015NewLine        ? list.OrderByDescending(sortExpression) Di2015NewLine        : list.OrderBy(sortExpression);Di2015NewLine}Di2015NewLine
15487156Di2015UniqueSeparatorFunc
15487156Di2015UniqueSeparatorOrderBy
15487156Di2015UniqueSeparatorobject
15487156Di2015UniqueSeparatorint
15487156Di2015UniqueSeparatorint
15487156Di2015UniqueSeparatorobject
15487245Di2015UniqueSeparatorpnl1
15487245Di2015UniqueSeparatorcreatePanels
15487245Di2015UniqueSeparatorPanel
15487245Di2015UniqueSeparator//class level variableDi2015NewLineList<Panel> allPanels = new List<Panel>();Di2015NewLineDi2015NewLine//...   Di2015NewLineDi2015NewLinePanel pnl1 = new Panel();Di2015NewLine//...panel codeDi2015NewLinethis.Controls.Add(pnl1);Di2015NewLineallPanels.add(pnl1);Di2015NewLineDi2015NewLinePanel pnl2 = new Panel();Di2015NewLine//...panel codeDi2015NewLinethis.Controls.Add(pnl2);Di2015NewLineallPanels.add(pnl2);Di2015NewLineDi2015NewLine//..Di2015NewLineprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    foreach(Panel p in allPanels) {Di2015NewLine        while (p.Controls.Count > 0) p.Controls[0].Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15487245Di2015UniqueSeparatorPanels
15487274Di2015UniqueSeparatori
15487274Di2015UniqueSeparatori
15487274Di2015UniqueSeparatori
15487274Di2015UniqueSeparatorfor (int i = 0; i < cmbTo.Items.Count; i++)Di2015NewLine{Di2015NewLine    string st = cmbTo.Items[i].ToString();Di2015NewLine    if (st == "" || st.IndexOf("@") == -1)Di2015NewLine    {               Di2015NewLine        cmbTo.Items.RemoveAt(i);Di2015NewLine        i--;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15487288Di2015UniqueSeparatorList
15487288Di2015UniqueSeparatorIList
15487288Di2015UniqueSeparatorIList values = new ArrayList();
15487288Di2015UniqueSeparatorArrayList
15487288Di2015UniqueSeparatorIList
15487288Di2015UniqueSeparatorArrayList
15487288Di2015UniqueSeparatorArrayList values = new ArrayList()
15487288Di2015UniqueSeparatorvar values = new ArrayList()
15487288Di2015UniqueSeparatorIList
15487304Di2015UniqueSeparatordayOutDateTimePicker.Value.ToString()
15487317Di2015UniqueSeparator<DatePicker Grid.Row="3" Grid.Column="1" Margin="4" Di2015NewLineDisplayDate="{Binding Birthday, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"Di2015NewLineDisplayDateStart="01.01.1900" DisplayDateEnd="{Binding CurrentDate, Mode=OneTime}"/>Di2015NewLine
15487318Di2015UniqueSeparatorclass Container<T>Di2015NewLine{Di2015NewLine    public T Value;Di2015NewLineDi2015NewLine    public Container( T rhs )Di2015NewLine    {Di2015NewLine        Value = rhs;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15487740Di2015UniqueSeparatorvar stringArr = dataTable.Rows[0].ItemArray.Select(x => x.ToString()).ToArray();Di2015NewLine
15487740Di2015UniqueSeparatorDataRow.ItemArray
15487917Di2015UniqueSeparatorbtnClear.Click += delegate {Di2015NewLine    if (nView.Text.Length > 0)Di2015NewLine        nView.Text = nView.Text.Remove(nView.Text.Length - 1, 1);Di2015NewLine};Di2015NewLine
15487977Di2015UniqueSeparatorComboBox
15487977Di2015UniqueSeparatorBackground
15487977Di2015UniqueSeparatorBorder
15487977Di2015UniqueSeparatorTransparent
15487977Di2015UniqueSeparator{StaticResource ComboBoxPopupBackgroundThemeBrush}
15487977Di2015UniqueSeparatorStyle
15487977Di2015UniqueSeparator<StyleDi2015NewLine    x:Key="ComboBoxStyle1"Di2015NewLine    TargetType="ComboBox">Di2015NewLine    <SetterDi2015NewLine        Property="Padding"Di2015NewLine        Value="8,0" />Di2015NewLine    <SetterDi2015NewLine        Property="Foreground"Di2015NewLine        Value="{StaticResource ComboBoxForegroundThemeBrush}" />Di2015NewLine    <SetterDi2015NewLine        Property="Background"Di2015NewLine        Value="{StaticResource ComboBoxBackgroundThemeBrush}" />Di2015NewLine    <SetterDi2015NewLine        Property="BorderBrush"Di2015NewLine        Value="{StaticResource ComboBoxBorderThemeBrush}" />Di2015NewLine    <SetterDi2015NewLine        Property="BorderThickness"Di2015NewLine        Value="{StaticResource ComboBoxBorderThemeThickness}" />Di2015NewLine    <SetterDi2015NewLine        Property="TabNavigation"Di2015NewLine        Value="Once" />Di2015NewLine    <SetterDi2015NewLine        Property="ScrollViewer.HorizontalScrollBarVisibility"Di2015NewLine        Value="Disabled" />Di2015NewLine    <SetterDi2015NewLine        Property="ScrollViewer.VerticalScrollBarVisibility"Di2015NewLine        Value="Auto" />Di2015NewLine    <SetterDi2015NewLine        Property="ScrollViewer.HorizontalScrollMode"Di2015NewLine        Value="Disabled" />Di2015NewLine    <SetterDi2015NewLine        Property="ScrollViewer.VerticalScrollMode"Di2015NewLine        Value="Auto" />Di2015NewLine    <SetterDi2015NewLine        Property="ScrollViewer.IsVerticalRailEnabled"Di2015NewLine        Value="True" />Di2015NewLine    <SetterDi2015NewLine        Property="ScrollViewer.IsDeferredScrollingEnabled"Di2015NewLine        Value="False" />Di2015NewLine    <SetterDi2015NewLine        Property="ScrollViewer.BringIntoViewOnFocusChange"Di2015NewLine        Value="True" />Di2015NewLine    <SetterDi2015NewLine        Property="HorizontalContentAlignment"Di2015NewLine        Value="Stretch" />Di2015NewLine    <SetterDi2015NewLine        Property="FontFamily"Di2015NewLine        Value="{StaticResource ContentControlThemeFontFamily}" />Di2015NewLine    <SetterDi2015NewLine        Property="FontSize"Di2015NewLine        Value="{StaticResource ControlContentThemeFontSize}" />Di2015NewLine    <SetterDi2015NewLine        Property="ItemsPanel">Di2015NewLine        <Setter.Value>Di2015NewLine            <ItemsPanelTemplate>Di2015NewLine                <CarouselPanel />Di2015NewLine            </ItemsPanelTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine    <SetterDi2015NewLine        Property="Template">Di2015NewLine        <Setter.Value>Di2015NewLine            <ControlTemplateDi2015NewLine                TargetType="ComboBox">Di2015NewLine                <Grid>Di2015NewLine                    <Grid.ColumnDefinitions>Di2015NewLine                        <ColumnDefinitionDi2015NewLine                            Width="*" />Di2015NewLine                        <ColumnDefinitionDi2015NewLine                            Width="32" />Di2015NewLine                    </Grid.ColumnDefinitions>Di2015NewLine                    <VisualStateManager.VisualStateGroups>Di2015NewLine                        <VisualStateGroupDi2015NewLine                            x:Name="CommonStates">Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="Normal" />Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="PointerOver">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Background"Di2015NewLine                                        Storyboard.TargetName="Background">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxPointerOverBackgroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="BorderBrush"Di2015NewLine                                        Storyboard.TargetName="Background">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxPointerOverBorderThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Fill"Di2015NewLine                                        Storyboard.TargetName="Highlight">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxSelectedPointerOverBackgroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="Pressed">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Background"Di2015NewLine                                        Storyboard.TargetName="Background">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxPressedBackgroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="BorderBrush"Di2015NewLine                                        Storyboard.TargetName="Background">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxPressedBorderThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Foreground"Di2015NewLine                                        Storyboard.TargetName="ContentPresenter">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxPressedForegroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <DoubleAnimationDi2015NewLine                                        Duration="0"Di2015NewLine                                        To="1"Di2015NewLine                                        Storyboard.TargetProperty="Opacity"Di2015NewLine                                        Storyboard.TargetName="PressedBackground" />Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Foreground"Di2015NewLine                                        Storyboard.TargetName="DropDownGlyph">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxArrowPressedForegroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="Disabled">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Background"Di2015NewLine                                        Storyboard.TargetName="Background">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxDisabledBackgroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="BorderBrush"Di2015NewLine                                        Storyboard.TargetName="Background">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxDisabledBorderThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Foreground"Di2015NewLine                                        Storyboard.TargetName="ContentPresenter">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxDisabledForegroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Foreground"Di2015NewLine                                        Storyboard.TargetName="DropDownGlyph">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxArrowDisabledForegroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                        </VisualStateGroup>Di2015NewLine                        <VisualStateGroupDi2015NewLine                            x:Name="FocusStates">Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="Focused">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <DoubleAnimationDi2015NewLine                                        Duration="0"Di2015NewLine                                        To="1"Di2015NewLine                                        Storyboard.TargetProperty="Opacity"Di2015NewLine                                        Storyboard.TargetName="HighlightBackground" />Di2015NewLine                                    <DoubleAnimationDi2015NewLine                                        Duration="0"Di2015NewLine                                        To="1"Di2015NewLine                                        Storyboard.TargetProperty="Opacity"Di2015NewLine                                        Storyboard.TargetName="Highlight" />Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Foreground"Di2015NewLine                                        Storyboard.TargetName="ContentPresenter">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxFocusedForegroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="FocusedPressed">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Foreground"Di2015NewLine                                        Storyboard.TargetName="ContentPresenter">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxPressedForegroundThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Storyboard.TargetProperty="Fill"Di2015NewLine                                        Storyboard.TargetName="Highlight">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0"Di2015NewLine                                            Value="{StaticResource ComboBoxPressedHighlightThemeBrush}" />Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="Unfocused" />Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="PointerFocused" />Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="FocusedDropDown">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <ObjectAnimationUsingKeyFramesDi2015NewLine                                        Duration="0"Di2015NewLine                                        Storyboard.TargetProperty="Visibility"Di2015NewLine                                        Storyboard.TargetName="PopupBorder">Di2015NewLine                                        <DiscreteObjectKeyFrameDi2015NewLine                                            KeyTime="0">Di2015NewLine                                            <DiscreteObjectKeyFrame.Value>Di2015NewLine                                                <Visibility>Visible</Visibility>Di2015NewLine                                            </DiscreteObjectKeyFrame.Value>Di2015NewLine                                        </DiscreteObjectKeyFrame>Di2015NewLine                                    </ObjectAnimationUsingKeyFrames>Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                        </VisualStateGroup>Di2015NewLine                        <VisualStateGroupDi2015NewLine                            x:Name="DropDownStates">Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="Opened">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <SplitOpenThemeAnimationDi2015NewLine                                        ClosedTargetName="ContentPresenter"Di2015NewLine                                        ContentTranslationOffset="0"Di2015NewLine                                        ContentTargetName="ScrollViewer"Di2015NewLine                                        ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"Di2015NewLine                                        OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"Di2015NewLine                                        OpenedTargetName="PopupBorder"Di2015NewLine                                        OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" />Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                            <VisualStateDi2015NewLine                                x:Name="Closed">Di2015NewLine                                <Storyboard>Di2015NewLine                                    <SplitCloseThemeAnimationDi2015NewLine                                        ClosedTargetName="ContentPresenter"Di2015NewLine                                        ContentTranslationOffset="40"Di2015NewLine                                        ContentTranslationDirection="{Binding TemplateSettings.SelectedItemDirection, RelativeSource={RelativeSource Mode=TemplatedParent}}"Di2015NewLine                                        ContentTargetName="ScrollViewer"Di2015NewLine                                        ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"Di2015NewLine                                        OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"Di2015NewLine                                        OpenedTargetName="PopupBorder"Di2015NewLine                                        OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" />Di2015NewLine                                </Storyboard>Di2015NewLine                            </VisualState>Di2015NewLine                        </VisualStateGroup>Di2015NewLine                    </VisualStateManager.VisualStateGroups>Di2015NewLine                    <BorderDi2015NewLine                        x:Name="Background"Di2015NewLine                        BorderBrush="{TemplateBinding BorderBrush}"Di2015NewLine                        BorderThickness="{TemplateBinding BorderThickness}"Di2015NewLine                        Background="{TemplateBinding Background}"Di2015NewLine                        Grid.ColumnSpan="2" />Di2015NewLine                    <RectangleDi2015NewLine                        x:Name="PressedBackground"Di2015NewLine                        Fill="{StaticResource ComboBoxPressedHighlightThemeBrush}"Di2015NewLine                        Margin="{TemplateBinding BorderThickness}"Di2015NewLine                        Opacity="0" />Di2015NewLine                    <BorderDi2015NewLine                        x:Name="HighlightBackground"Di2015NewLine                        BorderBrush="{StaticResource ComboBoxFocusedBorderThemeBrush}"Di2015NewLine                        BorderThickness="{TemplateBinding BorderThickness}"Di2015NewLine                        Background="{StaticResource ComboBoxFocusedBackgroundThemeBrush}"Di2015NewLine                        Grid.ColumnSpan="2"Di2015NewLine                        Opacity="0" />Di2015NewLine                    <RectangleDi2015NewLine                        x:Name="Highlight"Di2015NewLine                        Fill="{StaticResource ComboBoxSelectedBackgroundThemeBrush}"Di2015NewLine                        Margin="{TemplateBinding BorderThickness}"Di2015NewLine                        Opacity="0" />Di2015NewLine                    <ContentPresenterDi2015NewLine                        x:Name="ContentPresenter"Di2015NewLine                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"Di2015NewLine                        Margin="{TemplateBinding Padding}"Di2015NewLine                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />Di2015NewLine                    <TextBlockDi2015NewLine                        x:Name="DropDownGlyph"Di2015NewLine                        Grid.Column="1"Di2015NewLine                        Foreground="{StaticResource ComboBoxArrowForegroundThemeBrush}"Di2015NewLine                        FontWeight="Bold"Di2015NewLine                        FontSize="{StaticResource ComboBoxArrowThemeFontSize}"Di2015NewLine                        FontFamily="{StaticResource SymbolThemeFontFamily}"Di2015NewLine                        HorizontalAlignment="Right"Di2015NewLine                        IsHitTestVisible="False"Di2015NewLine                        Margin="0,0,6,4"Di2015NewLine                        Text="?"Di2015NewLine                        VerticalAlignment="Center" />Di2015NewLine                    <PopupDi2015NewLine                        x:Name="Popup">Di2015NewLine                        <BorderDi2015NewLine                            x:Name="PopupBorder"Di2015NewLine                            BorderBrush="{StaticResource ComboBoxPopupBorderThemeBrush}"Di2015NewLine                            BorderThickness="{StaticResource ComboBoxPopupBorderThemeThickness}"Di2015NewLine                            Background="Transparent"Di2015NewLine                            HorizontalAlignment="Stretch">Di2015NewLine                            <ScrollViewerDi2015NewLine                                x:Name="ScrollViewer"Di2015NewLine                                BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}"Di2015NewLine                                Foreground="{StaticResource ComboBoxPopupForegroundThemeBrush}"Di2015NewLine                                HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"Di2015NewLine                                HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"Di2015NewLine                                IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"Di2015NewLine                                IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"Di2015NewLine                                IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"Di2015NewLine                                VerticalSnapPointsType="OptionalSingle"Di2015NewLine                                VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"Di2015NewLine                                VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"Di2015NewLine                                VerticalSnapPointsAlignment="Near"Di2015NewLine                                ZoomMode="Disabled">Di2015NewLine                                <ItemsPresenter />Di2015NewLine                            </ScrollViewer>Di2015NewLine                        </Border>Di2015NewLine                    </Popup>Di2015NewLine                </Grid>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
15487983Di2015UniqueSeparatorCommandName
15487983Di2015UniqueSeparatorLinkButton
15487983Di2015UniqueSeparator<asp:LinkButton ID="btnLogin" class="button" runat="server"Di2015NewLineCommandName="Login"><span>Login</span></asp:LinkButton>Di2015NewLineDi2015NewLine.buttonDi2015NewLine{   Di2015NewLine    background: transparent url('/Images/ButtonLeft.gif') no-repeat top left;  Di2015NewLine    display: block;Di2015NewLine    float: left;Di2015NewLine    line-height: 11px; /* 21px (Button Background) = 5px (padding-top) + 11px (font-size) + 5px(padding-bottom) */Di2015NewLine    height: 21px; /* Button Background Height */Di2015NewLine    padding-left: 9px;  Di2015NewLine    text-decoration: none;Di2015NewLine    font-weight: bold;Di2015NewLine    color: white;Di2015NewLine    font-size: 11px;    Di2015NewLine}Di2015NewLineDi2015NewLinea:link.button, a:visited.button, a:active.buttonDi2015NewLine{Di2015NewLine    color: white;Di2015NewLine    text-decoration: none;Di2015NewLine    margin-right: 10px;Di2015NewLine}Di2015NewLineDi2015NewLinea.button:hoverDi2015NewLine{ Di2015NewLine    background-position: bottom left;Di2015NewLine}Di2015NewLineDi2015NewLinea.button span, a.button span Di2015NewLine{Di2015NewLine    background: transparent url('/Images/ButtonRight.gif') no-repeat top right;    Di2015NewLine    display: block;Di2015NewLine    padding: 5px 9px 5px 0; /*Set 9px below to match value of 'padding-left' value above*/Di2015NewLine}Di2015NewLineDi2015NewLinea.button:hover spanDi2015NewLine{ Di2015NewLine    background-position: bottom right;Di2015NewLine    color: white;Di2015NewLine}Di2015NewLine
15488156Di2015UniqueSeparator[MetadataType(typeof(BlogMetadata))]Di2015NewLinepublic partial class BlogDi2015NewLine{Di2015NewLine    // it's possible to add logic and non-mapped properties hereDi2015NewLine}Di2015NewLine
15488156Di2015UniqueSeparatorpublic class BlahMetadataDi2015NewLine{Di2015NewLine    [AllowHtml] Di2015NewLine    public string Content{ get; set; } Di2015NewLine}Di2015NewLine
15488199Di2015UniqueSeparatorprivate void myTextBox_KeyDown(Object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyCode == Keys.Enter)Di2015NewLine    {Di2015NewLine        //you may pass the parameters if you needDi2015NewLine        Button_Click_1(null,null);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15488264Di2015UniqueSeparatorBlockRows
15488264Di2015UniqueSeparatorBlockColumns
15488264Di2015UniqueSeparatorBlockRows
15488264Di2015UniqueSeparatorBlockColumns
15488264Di2015UniqueSeparatorGrid
15488264Di2015UniqueSeparatorPeers
15488264Di2015UniqueSeparatorUnits
15488264Di2015UniqueSeparatorGrid
15488264Di2015UniqueSeparatorGrid
15488324Di2015UniqueSeparatorIDealerController
15488324Di2015UniqueSeparatorDealerService
15488324Di2015UniqueSeparatorDealerService
15488324Di2015UniqueSeparatorIKernel kernel = new StandardKernel();Di2015NewLinekernel.Bind<IDealerController>.To<DefaultDealerController>(); //.InSingletonScope();Di2015NewLinekernel.Bind<DealerService>().ToSelf(); //.InSingletonScope();Di2015NewLineDealerService myServ = kernel.Get<DealerService>();Di2015NewLine
15488324Di2015UniqueSeparatorkernel.Load("*.dll")
15488324Di2015UniqueSeparatorkernel.Bind<IDealerController>Di2015NewLine      .To<SpecialDealerController>()Di2015NewLine      .When(x=> SpecialConditionIsMet());Di2015NewLine
15488384Di2015UniqueSeparatorvar items = new List<char>{'A', 'B', 'C'};Di2015NewLineDi2015NewLinevar perms = from a in itemsDi2015NewLine            from b in itemsDi2015NewLine            from c in itemsDi2015NewLine            from d in itemsDi2015NewLine            select new string(new char[]{a, b, c, d});Di2015NewLine
15488384Di2015UniqueSeparatorAAAA Di2015NewLineAAAB Di2015NewLineAAAC Di2015NewLineAABA Di2015NewLineAABB Di2015NewLine...Di2015NewLine
15488384Di2015UniqueSeparatorvar items = new List<char>{'A', 'B', 'C'};Di2015NewLinevar items2 = new List<char> {'D', 'E', 'F'};Di2015NewLineDi2015NewLinevar perms = from a in itemsDi2015NewLine            from b in itemsDi2015NewLine            from c in items2Di2015NewLine            select new string(new char[]{a, b, c});Di2015NewLine
15488384Di2015UniqueSeparatorIEnumerable<T>
15488384Di2015UniqueSeparatorvar items = new List<char> { 'A', 'B', 'C' };Di2015NewLinevar items2 = new List<char> { 'D', 'E', 'F' };Di2015NewLineDi2015NewLinevar perms = items.SelectMany(a => items, (a, b) => new { a, b })Di2015NewLine            .SelectMany(t => items2, (t, c) => new string(new[] { t.a, t.b, c }));Di2015NewLine
15488491Di2015UniqueSeparatorNotNull
15488491Di2015UniqueSeparatorJetBrains.Annotations.dll
15488491Di2015UniqueSeparator[NotNull]
15488848Di2015UniqueSeparator$("#IframeId").load(function() {Di2015NewLine    $(this).height( $(this).contents().find("#box").height() ); //box can be changed to the id of the element you wantDi2015NewLine});Di2015NewLine
15488955Di2015UniqueSeparatorTo.Add
15488955Di2015UniqueSeparatorMailMessage
15488955Di2015UniqueSeparatorvar from = "me@me.com";Di2015NewLinevar to = "mail1@domain.com,mail2@domain.com,mail3@domain.com";Di2015NewLinevar subject = "My Subject";Di2015NewLinevar body = "Message Body";Di2015NewLinevar message = new MailMessage(from, to, subject, body);Di2015NewLine
15488982Di2015UniqueSeparatorpublic FooReportRecord[] GetFooReport(string fooName)Di2015NewLine{Di2015NewLine    var data = new List<FooReportRecord>();Di2015NewLineDi2015NewLine    // get data based on fooName and populate dataDi2015NewLineDi2015NewLine    return data.ToArray();Di2015NewLine}Di2015NewLine
15488982Di2015UniqueSeparatorvar proxy = new ServiceReference1.CompanyReportClient();Di2015NewLineFooReportRecord[] ls = proxy.GetFooReport("bar");Di2015NewLine
15489103Di2015UniqueSeparatorpublic static VideoFormat H264FormatDi2015NewLine{Di2015NewLine   get{Di2015NewLine         // This if statement can be added in the future without breaking other programs.Di2015NewLine         if(SupportsNewerFormat)Di2015NewLine             return VideoFormat.H265;Di2015NewLineDi2015NewLine         return VideoFormat.H264;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15489368Di2015UniqueSeparatorFileSystemWatcher
15489368Di2015UniqueSeparatorInvoke
15489368Di2015UniqueSeparator private void writeTb(object source, FileSystemEventArgs e)Di2015NewLine {Di2015NewLine    base.Invoke((Action)delegateDi2015NewLine    {Di2015NewLine       textBox1.Text += e.ChangeType + ": " + e.FullPath;Di2015NewLine    });Di2015NewLine }Di2015NewLine
15489416Di2015UniqueSeparatorStream
15489416Di2015UniqueSeparatorStreamWriter
15489416Di2015UniqueSeparatorStreamWriter
15489416Di2015UniqueSeparator   if (!System.IO.File.Exists(pathString)) { System.IO.File.Create(pathString); }Di2015NewLine
15489416Di2015UniqueSeparatorprivate void Create_File(string directory, string filenameWithoutExtension )Di2015NewLine{Di2015NewLine    // You can just call it - it won't matter if it existsDi2015NewLine    System.IO.Directory.CreateDirectory(directory);Di2015NewLineDi2015NewLine    string fileName = filenameWithoutExtension + ".txt";Di2015NewLine    string pathString = System.IO.Path.Combine(directory, fileName);Di2015NewLineDi2015NewLine    using(System.IO.StreamWriter file = new System.IO.StreamWriter(pathString))Di2015NewLine    {Di2015NewLine        file.WriteLine(Some_Method(MP.Mwidth, MP.Mheight, MP.Mtype, "" ));Â Di2015NewLine    }Di2015NewLine}Di2015NewLine
15489416Di2015UniqueSeparatorFile.WriteAllText
15489416Di2015UniqueSeparatorusing
15489416Di2015UniqueSeparatorSome_Method
15489522Di2015UniqueSeparator<!-- -->
15489583Di2015UniqueSeparatorItemsControl
15489583Di2015UniqueSeparator<Window x:Class="MiscSamples.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <ItemsControl ItemsSource="{Binding}">Di2015NewLine        <ItemsControl.ItemsPanel>Di2015NewLine            <ItemsPanelTemplate>Di2015NewLine                <UniformGrid IsItemsHost="True" Rows="3" Columns="3"/>Di2015NewLine            </ItemsPanelTemplate>Di2015NewLine        </ItemsControl.ItemsPanel>Di2015NewLine        <ItemsControl.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <StackPanel>Di2015NewLine                    <TextBox Text="{Binding Name}" Margin="2"/>Di2015NewLine                </StackPanel>Di2015NewLine            </DataTemplate>Di2015NewLine        </ItemsControl.ItemTemplate>Di2015NewLine    </ItemsControl>Di2015NewLine</Window>Di2015NewLine
15489583Di2015UniqueSeparator public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            DataContext = new List<Student>Di2015NewLine                {Di2015NewLine                    new Student() {Name = "James Jeffery"},Di2015NewLine                    new Student() {Name = "Sian Ellis"},Di2015NewLine                    new Student() {Name = "James Jeffery 2"},Di2015NewLine                    new Student() {Name = "Sian Ellis 2"},Di2015NewLine                    new Student() {Name = "James Jeffery 3"},Di2015NewLine                    new Student() {Name = "Sian Ellis 3"},Di2015NewLine                };Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15489630Di2015UniqueSeparatorvar _result =   from a in product_masterDi2015NewLine                where (product.Where(s => s.buyer_user_id == 12))Di2015NewLine                        .Contains(a.product_ID)Di2015NewLine                select a;Di2015NewLine
15489630Di2015UniqueSeparatorvar _result =   (from a in product_masterDi2015NewLine                join b in productDi2015NewLine                    on a.product_id equals b.product_idDi2015NewLine                where b.buyer_user_id == 12Di2015NewLine                select a).Distinct();Di2015NewLine
15489923Di2015UniqueSeparator==
15489923Di2015UniqueSeparator(ARGB=(255, 255, 255, 255))
15489923Di2015UniqueSeparatorBackColor
15489923Di2015UniqueSeparatorprotected override void OnMouseDoubleClick(MouseEventArgs e)Di2015NewLine{Di2015NewLine      //compare ARGB valuesDi2015NewLine      if (this.BackColor.ToArgb() == Color.White.ToArgb())Di2015NewLine      {Di2015NewLine           this.BackColor = Color.Yellow;Di2015NewLineDi2015NewLine      }Di2015NewLine      elseDi2015NewLine      {Di2015NewLine           this.BackColor = Color.White;Di2015NewLine      }Di2015NewLine      base.OnMouseDoubleClick(e);Di2015NewLine}Di2015NewLine
15489943Di2015UniqueSeparator INSERT INTO dbo.School_Student(School_ID, Student_ID)Di2015NewLine     SELECT SC.ID, ST.IDDi2015NewLine     FROM dbo.School AS SCDi2015NewLine     JOIN dbo.Student AS ST ON ST.Student_Name = @studentNameDi2015NewLine                            AND SC.School_Name = @schoolName;Di2015NewLine
15489995Di2015UniqueSeparatorvar previousFrame = new System.Diagnostics.StackTrace(true).GetFrame(1);Di2015NewLine
15490022Di2015UniqueSeparatorSlideDeck
15490022Di2015UniqueSeparatortype
15490022Di2015UniqueSeparatorSlideDeck
15490022Di2015UniqueSeparatortype
15490022Di2015UniqueSeparatorhttp://something.com
15490022Di2015UniqueSeparator<SlideDeck type="SlideDefinitions">Di2015NewLine  <Slide>. . . </Slide>Di2015NewLine  <Slide>. . . </Slide>Di2015NewLine  . . . Di2015NewLine</SlideDeck>Di2015NewLine
15490022Di2015UniqueSeparator<xs:schema Di2015NewLine  xmlns:xs="http://www.w3.org/2001/XMLSchema" Di2015NewLine  xmlns:xy="http://something.com" Di2015NewLine  xmlns="http://something.com"Di2015NewLine  targetNamespace="http://something.com"Di2015NewLine  elementFormDefault="qualified"Di2015NewLine  attributeFormDefault="qualified" >Di2015NewLineDi2015NewLine  <xs:attribute name="type" type="xs:string" />Di2015NewLineDi2015NewLine</xs:schema>Di2015NewLine
15490022Di2015UniqueSeparator<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xy="http://something.com">Di2015NewLine  <xs:import namespace="http://something.com" schemaLocation="typeAttr.xsd"/>Di2015NewLine  <xs:element name="SlideDeck">Di2015NewLine    <xs:complexType>Di2015NewLine      <xs:sequence>Di2015NewLine        <xs:choice maxOccurs="unbounded">Di2015NewLine          <xs:element ref="Slide"/>Di2015NewLine        </xs:choice>Di2015NewLine      </xs:sequence>Di2015NewLine      <xs:attribute ref="xy:type" use="required" />Di2015NewLine    </xs:complexType>Di2015NewLine  </xs:element>Di2015NewLine  <xs:element name="Slide"></xs:element>Di2015NewLine</xs:schema>Di2015NewLine
15490022Di2015UniqueSeparatortype
15490096Di2015UniqueSeparatorwebBrowser1.Navigate(Di2015NewLine    new Uri(Di2015NewLine        textBox1.Text,Di2015NewLine        null,Di2015NewLine        null,Di2015NewLine        "User-Agent: Mozilla 5.0 (Linux; U; Android 2.3.7; zh-cn; MB525 Build MIUI) UC AppleWebKit 534.31 (KHTML, like Gecko) Mobile Safari 534.31",Di2015NewLine        UriKind.AbsoluteDi2015NewLine    )Di2015NewLine);Di2015NewLine
15490096Di2015UniqueSeparatorwebBrowser1.Navigate(Di2015NewLine    new Uri(Di2015NewLine        textBox1.TextDi2015NewLine    ),Di2015NewLine    null,Di2015NewLine    "User-Agent: Mozilla 5.0 (Linux; U; Android 2.3.7; zh-cn; MB525 Build MIUI) UC AppleWebKit 534.31 (KHTML, like Gecko) Mobile Safari 534.31"Di2015NewLine);Di2015NewLine
15490355Di2015UniqueSeparator   private static IEnumerable<Tuple<String,String>> GetPairs(ref DataTable dtr)Di2015NewLine    {Di2015NewLine      var CurrentPairs = dtr.AsEnumerable().Select(t => Tuple.CreateDi2015NewLine                                                  (Di2015NewLine                                                    t.Field<String>("CurrentText"),Di2015NewLine                                                    t.Field<String>("CurrentValue")Di2015NewLine                                                  ));Di2015NewLine      var NewPairs = dtr.AsEnumerable().Select(t => Tuple.CreateDi2015NewLine                                                  (Di2015NewLine                                                    t.Field<String>("OldText"),Di2015NewLine                                                    t.Field<String>("OldValue")Di2015NewLine                                                  ));Di2015NewLineDi2015NewLine      return CurrentPairs.Union(NewPairs);Di2015NewLine    }Di2015NewLine
15490570Di2015UniqueSeparatorString.IsNullOrEmpty(Request.QueryString["type"]);Di2015NewLine
15490654Di2015UniqueSeparatorpublic class Bar : IFoo {Di2015NewLineDi2015NewLine    private IList<int> _integers;Di2015NewLineDi2015NewLine    IEnumerable<int> IFoo.integers {Di2015NewLine        get { return _integers };Di2015NewLine        set { _integers = value as IList<int>; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IList<int> integers {Di2015NewLine        get { return _integers; }Di2015NewLine        set { _integers = vale; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15490654Di2015UniqueSeparatorintegers
15490654Di2015UniqueSeparatorIList<int>
15490654Di2015UniqueSeparatorIEnumerable<int>
15490654Di2015UniqueSeparatorIFoo.integers = new Qux<int>()
15490654Di2015UniqueSeparatorQux : IEnumerable<int>
15490654Di2015UniqueSeparatorQux : IList<int>
15490672Di2015UniqueSeparatorSelectMany
15490672Di2015UniqueSeparatorforeach (var details in activeEvents.SelectMany(e => e.Details))Di2015NewLine{Di2015NewLine    // ... StuffDi2015NewLine}Di2015NewLine
15490672Di2015UniqueSeparatorSureViewEventDetails
15490672Di2015UniqueSeparatoractiveEvents
15490769Di2015UniqueSeparatorPaint
15490769Di2015UniqueSeparatorAnchor
15490769Di2015UniqueSeparatorDock
15490854Di2015UniqueSeparator<configuration>
15490854Di2015UniqueSeparatorweb.config
15490854Di2015UniqueSeparator<location path="LandingPage.aspx">Di2015NewLine    <system.web>Di2015NewLine        <authorization>Di2015NewLine            <allow users="?"/>Di2015NewLine        </authorization>Di2015NewLine    </system.web>Di2015NewLine</location>Di2015NewLine
15490878Di2015UniqueSeparatorMembershipUser muUser = Membership.GetUser(strUsernameToActOn);Di2015NewLinemuUser.IsApproved = false;Di2015NewLineMembership.UpdateUser(muUser);Di2015NewLine
15490921Di2015UniqueSeparatorComboBox
15490921Di2015UniqueSeparatorSelectedItem
15490921Di2015UniqueSeparatorListBox
15490921Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    { Di2015NewLine        InitializeComponent(); Di2015NewLine        Categories.Add(new Category { Name = "Animals", Items = new List<string> { "Dog", "Cat", "Horse" } });Di2015NewLine        Categories.Add(new Category { Name = "Vehicles", Items = new List<string> { "Car", "Truck", "Boat" } });Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private ObservableCollection<Category> _categories = new ObservableCollection<Category>();Di2015NewLine    public ObservableCollection<Category> CategoriesDi2015NewLine    {Di2015NewLine        get { return _categories; }Di2015NewLine        set { _categories = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CategoryDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public List<string> Items { get; set; }Di2015NewLine}Di2015NewLine
15490921Di2015UniqueSeparator<Window x:Class="WpfApplication10.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="525" Name="UI">Di2015NewLineDi2015NewLine        <StackPanel DataContext="{Binding ElementName=UI}">Di2015NewLine            <ComboBox x:Name="combo" ItemsSource="{Binding Categories}" DisplayMemberPath="Name"/>Di2015NewLine            <ListBox ItemsSource="{Binding SelectedItem.Items, ElementName=combo}"/>Di2015NewLine        </StackPanel>Di2015NewLine</Window>Di2015NewLine
15490947Di2015UniqueSeparatorvoid TimerTick(object sender)Di2015NewLine{Di2015NewLine    this.Close();Di2015NewLine}Di2015NewLine
15490947Di2015UniqueSeparatorDateTime.Now
15490947Di2015UniqueSeparatorTimerTick
15490947Di2015UniqueSeparatorForm.Close
15490947Di2015UniqueSeparatorForm.Invoke
15490947Di2015UniqueSeparatorClose
15490947Di2015UniqueSeparatorWaitableTimer
15490947Di2015UniqueSeparatorWaitableTimer
15490947Di2015UniqueSeparatorWaitableTimer
15490947Di2015UniqueSeparatorInvoke
15490947Di2015UniqueSeparatorthis.Invoke((MethodInvoker) delegate { this.Close(); });Di2015NewLine
15490955Di2015UniqueSeparatorGetListSomeObjects()
15491053Di2015UniqueSeparator<input type="button" value="Back" onclick="window.history.back()" />Di2015NewLine
15491053Di2015UniqueSeparator<html>Di2015NewLine  <head>Di2015NewLine    <title>page 1</title>Di2015NewLine  </head>Di2015NewLine  <body>Di2015NewLine    PAGE 1<br />Di2015NewLine    <a href="page2.htm">Jump to page 2</a><br />Di2015NewLine    <a href="page3.htm">Jump to page 3</a><br />Di2015NewLine  </body>Di2015NewLine</html>Di2015NewLine
15491053Di2015UniqueSeparator<html>Di2015NewLine  <head>Di2015NewLine    <title>page 2</title>Di2015NewLine  </head>Di2015NewLine  <body>Di2015NewLine    PAGE 2<br />Di2015NewLine    <a href="page3.htm">Jump to page 3</a><br />Di2015NewLine    <input type="button" value="Back" onclick="window.history.back()" />Di2015NewLine  </body>Di2015NewLine</html>Di2015NewLine
15491053Di2015UniqueSeparator<html>Di2015NewLine  <head>Di2015NewLine    <title>page 3</title>Di2015NewLine  </head>Di2015NewLine  <body>Di2015NewLine    PAGE 3<br />Di2015NewLine    <a href="page1.htm">Jump to page 1</a><br />Di2015NewLine    <input type="button" value="Back" onclick="window.history.back()" />Di2015NewLine  </body>Di2015NewLine</html>Di2015NewLine
15491107Di2015UniqueSeparatorpictureBox1.Image
15491107Di2015UniqueSeparatorpictureBox1.Image.Dispose();Di2015NewLine
15491129Di2015UniqueSeparator<configuration>Di2015NewLine  <connectionStrings>Di2015NewLine    <add name="yourConnectionstringName"Di2015NewLine         providerName="System.Data.SqlClient"Di2015NewLine         connectionString="Data Source=myServerAddress;Initial Catalog=myDataBase;Integrated Security=SSPI;Di2015NewLineUser ID=myDomain\\myUsername;Password=myPassword;"/>Di2015NewLine  </connectionStrings>Di2015NewLine</configuration>Di2015NewLine
15491129Di2015UniqueSeparatorpublic class BloggingContext : DbContextDi2015NewLine{Di2015NewLine    public BloggingContext()Di2015NewLine        : base("name=yourConnectionstringName")Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
15491174Di2015UniqueSeparatorIDynamicParameters
15491174Di2015UniqueSeparatorDictionary
15491174Di2015UniqueSeparatorvar inTerms = new Dapper.DynamicParameters();Di2015NewLineDi2015NewLineinTerms.Add("@p" + (termIndex++), somveValue);Di2015NewLine
15491216Di2015UniqueSeparatorprivate List<IEnemy> Enemies = new List<IEnemy>();Di2015NewLine
15491381Di2015UniqueSeparatorHashSet<SomeType>
15491381Di2015UniqueSeparatorHashSet<object>
15491381Di2015UniqueSeparatorv
15491381Di2015UniqueSeparatorIEnumerable
15491381Di2015UniqueSeparatordynamic cleanHashSet = Activator.CreateInstance(type);Di2015NewLineforeach (object item in (IEnumerable)v)Di2015NewLine{Di2015NewLine    cleanHashSet.Add(Clean(item)); Di2015NewLine}Di2015NewLine
15491381Di2015UniqueSeparatordynamic
15491381Di2015UniqueSeparatorAdd
15491381Di2015UniqueSeparatorobject cleanHashSet = Activator.CreateInstance(type);Di2015NewLinevar method = type.GetMethod("Add");Di2015NewLineforeach (object item in (IEnumerable)v)Di2015NewLine{Di2015NewLine    method.Invoke(cleanHashSet, new object[] { Clean(item) });Di2015NewLine}Di2015NewLine
15491715Di2015UniqueSeparatorhttp://www.facebook.com/dialog/oauth
15491715Di2015UniqueSeparatorhttps://graph.facebook.com/oauth/access_token
15491715Di2015UniqueSeparator        StringBuilder uri = new StringBuilder();Di2015NewLine        uri.Append("https://graph.facebook.com/oauth/access_token?");Di2015NewLine        uri.Append("client_id=" + ClientKey + "&");Di2015NewLine        uri.Append("redirect_uri=" + Curl + "&");Di2015NewLine        uri.Append("scope=offline_access&");Di2015NewLine        uri.Append("client_secret=" + ClientSecret + "&");Di2015NewLine        uri.Append("code=" + OAuthCode);Di2015NewLineDi2015NewLine        HttpWebRequest req = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(uri);Di2015NewLine        req.Headers.Add("Authorization", String.Empty);            Di2015NewLine        req.Method = "POST";Di2015NewLine        req.ServicePoint.Expect100Continue = false;Di2015NewLine        req.ContentLength = 0;Di2015NewLine        req.ContentType = "application/x-www-form-urlencoded";Di2015NewLineDi2015NewLine        HttpWebResponse resp;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            resp = (HttpWebResponse)req.GetResponse();Di2015NewLine            System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream());Di2015NewLine            string result = sr.ReadToEnd().Trim();Di2015NewLine            string[] resultCollection = Regex.Split(result, "&");Di2015NewLine            string access_token = Regex.Split(resultCollection[0], "=")[1];//This is the access tokenDi2015NewLine            //which you want and you can save it to database or some  where for further use.Di2015NewLine        }Di2015NewLine        catch (WebException ex)Di2015NewLine        {Di2015NewLine            resp = (HttpWebResponse)ex.Response;Di2015NewLineDi2015NewLine            //pass on the exceptionDi2015NewLine            throw ex;Di2015NewLine        }Di2015NewLine
15491715Di2015UniqueSeparatorOAuthCode = Request.Params["code"];Di2015NewLine
15491715Di2015UniqueSeparatorString.Empty
15491791Di2015UniqueSeparatorforeach(ListItem item in lstAdded.Items)Di2015NewLine{Di2015NewLine    TheItem = new clsStock();Di2015NewLine    TheItem.AuthId = 5;Di2015NewLine    TheItem.ItemId = Convert.ToInt32(item.Value);Di2015NewLine    TheItem.Cancel = "false";Di2015NewLine    Items.AddOrder(TheItem);Di2015NewLine}Di2015NewLine
15491902Di2015UniqueSeparatorRequest.Url.QueryDi2015NewLine
15491902Di2015UniqueSeparatorInput: http://localhost:96/Cambia3/Temp/Test.aspx?q=item#fragmentDi2015NewLine
15491971Di2015UniqueSeparatorstring fileName = Path.GetFileNameWithoutExtension(path);Di2015NewLinestring firstFourCharacters = fileName.Take(4);Di2015NewLine//Or Di2015NewLine//Check if the fileName.Length >= 4Di2015NewLinestring firstFourCharacters = fileName.Substring(0,4);Di2015NewLine
15492042Di2015UniqueSeparator private void button2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine      timers[launchTime].Enabled = false;Di2015NewLine      timers.Remove(launchTime);Di2015NewLine    }Di2015NewLine
15492078Di2015UniqueSeparatorStringFormat
15492078Di2015UniqueSeparatorTextBlock
15492078Di2015UniqueSeparator<StackPanel>Di2015NewLine    <TextBlock Text="{Binding Value, ElementName=slider/>Di2015NewLine    <TextBlock Text="{Binding Value, ElementName=slider, StringFormat={}{0:0}}" />Di2015NewLine    <Slider x:Name="slider" />Di2015NewLine</StackPanel>Di2015NewLine
15492085Di2015UniqueSeparatorint[] ids = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };Di2015NewLineint families = new int[2][] {Di2015NewLine    new int [] {1, 2, 3},Di2015NewLine    new int [] {8, 9}Di2015NewLine};Di2015NewLinevar itemsToOmit = siblings.Di2015NewLine    Select(family => family.Skip(1)).Di2015NewLine    Aggregate((family1, family2) => family1.Concat(family2));Di2015NewLinevar cleanedIds = ids.Except(itemsToOmit);Di2015NewLine
15492085Di2015UniqueSeparatorfamilies
15492085Di2015UniqueSeparatorfamily
15492085Di2015UniqueSeparator1, 2, 3
15492085Di2015UniqueSeparator8, 9
15492206Di2015UniqueSeparatorvar folder = ApplicationData.Current.LocalFolder;Di2015NewLinevar file = await folder.GetFileAsync("tasks.xml");Di2015NewLinevar readStream = await FileIO.ReadTextAsync(file);Di2015NewLineXElement xElem = XElement.Parse(readStream);Di2015NewLineDi2015NewLineIEnumerable<XElement> singleTask = from task in xElem.Elements("Task")Di2015NewLine                                    where (string)task.Element("Id") == itemDC.IdDi2015NewLine                                    select task;Di2015NewLineforeach (XElement task in singleTask)Di2015NewLine{Di2015NewLine    task.SetElementValue("Finished", "");Di2015NewLine}Di2015NewLineDi2015NewLinefile = await folder.CreateFileAsync("tasks.xml", CreationCollisionOption.ReplaceExisting);Di2015NewLineusing (var writeStream = await file.OpenStreamForWriteAsync())Di2015NewLine{Di2015NewLine    xElem.Save(writeStream);Di2015NewLine}Di2015NewLine
15492206Di2015UniqueSeparatorDateTime
15492206Di2015UniqueSeparatorXmlConvert
15492206Di2015UniqueSeparatortask.SetElementValue("Finished", XmlConvert.ToString(DateTime.Now));Di2015NewLine
15492352Di2015UniqueSeparatorinsert()
15492352Di2015UniqueSeparatorfind()
15492352Di2015UniqueSeparatordeque()
15492352Di2015UniqueSeparatorremoveMin()
15492352Di2015UniqueSeparatorremoveMin()
15492352Di2015UniqueSeparatordequeue()
15492352Di2015UniqueSeparatorremoveMin()
15492352Di2015UniqueSeparatorinsert()
15492352Di2015UniqueSeparatorenqueue()
15492352Di2015UniqueSeparatorisEmpty()
15492352Di2015UniqueSeparator0.5*log(n)
15492352Di2015UniqueSeparatorinsert()
15492352Di2015UniqueSeparatorinsert()
15492352Di2015UniqueSeparator0.5*log(n)
15492352Di2015UniqueSeparatorenqueue
15492352Di2015UniqueSeparatordequeue()
15492352Di2015UniqueSeparatorenqueue()
15492451Di2015UniqueSeparatorproperty.PropertyType
15492451Di2015UniqueSeparatornew List<property.PropertyType>()Di2015NewLine
15492451Di2015UniqueSeparatorActivator.CreateInstance(typeof(List<>).MakeGenericType(collectionElementType))Di2015NewLine
15492451Di2015UniqueSeparatorMap<T>(childElement)
15492451Di2015UniqueSeparatorMap<T>
15492451Di2015UniqueSeparatorMap<T>
15492451Di2015UniqueSeparatorMap<Field
15492451Di2015UniqueSeparatorMap<T>
15492451Di2015UniqueSeparatorpublic T Map<T>(XElement element) where T : class, new()Di2015NewLine{Di2015NewLine    T entity = (T)Activator.CreateInstance(typeof(T));Di2015NewLine    if (element.HasAttributes)Di2015NewLine    {Di2015NewLine        MapXMLAttributesToObject<T>(element, entity);Di2015NewLine    }Di2015NewLine    if (element.HasElements)Di2015NewLine    {Di2015NewLine        foreach (var childElement in element.Elements())Di2015NewLine        {Di2015NewLine            var property = GetProperty<T>(childElement.Name.LocalName);Di2015NewLine            // If the child element has child elements as well, we know this is a collection.Di2015NewLine            if (childElement.HasElements)Di2015NewLine            {Di2015NewLine                // Assume collections are of type IEnumerable<T> or List<T>Di2015NewLine                var collectionElementType = property.PropertyType.GetGenericArguments()[0];Di2015NewLine                // var collectionValue = new List<collectionElementType>()Di2015NewLine                var collectionValue = Activator.CreateInstance(typeof(List<>).MakeGenericType(collectionElementType));Di2015NewLine                foreach (var grandchildElement in childElement.Elements())Di2015NewLine                {Di2015NewLine                    // var collectionElement = this.Map<collectionElementType>(grandchildElement);Di2015NewLine                    var collectionElement = this.GetType().GetMethod("Map").MakeGenericMethod(collectionElementType).Invoke(this, new object[] { grandchildElement });Di2015NewLine                    collectionValue.GetType().GetMethod("Add").Invoke(collectionValue, new object[] { collectionElement });Di2015NewLine                }Di2015NewLine                property.SetValue(entity, collectionValue, null);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // I'm not sure what this should do -- this case doesn't happen in your example.Di2015NewLine                throw new NotImplementedException();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return entity;Di2015NewLine}Di2015NewLine
15492451Di2015UniqueSeparatorNotImplementedException
15492580Di2015UniqueSeparatorbackBufferData
15492580Di2015UniqueSeparatorbackBufferData
15492642Di2015UniqueSeparator    public void SetGreaterRestriction(decimal value)Di2015NewLine    {Di2015NewLine        Greater greaterRestriction = new Greater();Di2015NewLine        greaterRestriction.GreaterValue = value;Di2015NewLine        _specificRestriction = greaterRestriction;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void SetLessRestriction(decimal value)Di2015NewLine    {Di2015NewLine        Less lessRestriction = new Less();Di2015NewLine        lessRestriction.LessValue = value;Di2015NewLine        _specificRestriction = lessRestriction;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void SetRangeRestriction(decimal lessValue, decimal greaterValue)Di2015NewLine    {Di2015NewLine        Range r = new Range();Di2015NewLine        r.GreaterValue = greaterValue;Di2015NewLine        r.LessValue = lessValue;Di2015NewLine        _specificRestriction = r;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Eval(decimal Value2)Di2015NewLine    {Di2015NewLine        return _specificRestriction.Eval(Value2);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /* Nested strategies classes */Di2015NewLineDi2015NewLine    protected abstract class SpecificRestrictionDi2015NewLine    {Di2015NewLine        public abstract bool Eval(decimal Value);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected class Less : SpecificRestrictionDi2015NewLine    {Di2015NewLine        public decimal LessValue { get; set; }Di2015NewLine        public override bool Eval(decimal lessValue)Di2015NewLine        {Di2015NewLine            return lessValue < LessValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected class Greater : SpecificRestrictionDi2015NewLine    {Di2015NewLine        public decimal GreaterValue { get; set; }Di2015NewLine        public override bool Eval(decimal greaterValue)Di2015NewLine        {Di2015NewLine            return greaterValue > GreaterValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected class Range : SpecificRestrictionDi2015NewLine    {Di2015NewLine        public decimal LessValue { get; set; }Di2015NewLine        public decimal GreaterValue { get; set; }Di2015NewLineDi2015NewLine        public override bool Eval(decimal mediumValue)Di2015NewLine        {Di2015NewLine            return LessValue <= mediumValue && mediumValue <= GreaterValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15492675Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@Item", OleDbType.VarChar).Value = items.ItemName1;Di2015NewLine
15492675Di2015UniqueSeparatorExecuteNonQuery()
15492675Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@ItemID", addorder.tbItemID.Text);Di2015NewLinecmd.Parameters.AddWithValue("@ItemName", addorder.tbName.Text);Di2015NewLinecmd.Parameters.AddWithValue("@ItemPrice", addorder.tbPrice.Text);Di2015NewLine
15492679Di2015UniqueSeparatorstring[] docTypes = {"Collegge", "University", "Company", "Banking"};Di2015NewLineXDocument xdoc = XDocument.Load(filePath);Di2015NewLinevar docType = docTypes.FirstOrDefault(type => Di2015NewLine                xdoc.Descendants().Any(n => n.Name.LocalName == type.ToLower()));Di2015NewLine
15492679Di2015UniqueSeparatorstring[] docTypes = {"Collegge", "University", "Company", "Banking"};Di2015NewLineXDocument xdoc = XDocument.Load(filePath);Di2015NewLineXNamespace ns = "http://www.foo.org/2013/bar";Di2015NewLinevar docType = docTypes.FirstOrDefault(type => xdoc.Descendants(ns + type).Any());Di2015NewLine
15492684Di2015UniqueSeparatorint index = 0;Di2015NewLineforeach(DataTableColumn col in DataTable.Columns)Di2015NewLine{Di2015NewLine  col.ColumnName = DataTable.Rows[0][index].ToString();Di2015NewLine  index++;Di2015NewLine}Di2015NewLine
15492843Di2015UniqueSeparatorpublic static T ExecuteNullableScalar<T>(this SqlCommand cmd) where T : structDi2015NewLine{Di2015NewLine    var result = cmd.ExecuteScalar();Di2015NewLine    if (result == DBNull.Value) return default(T);Di2015NewLine    return (T)result;Di2015NewLine}Di2015NewLine
15492843Di2015UniqueSeparatorint value = cmd.ExecuteNullableScalar<int>();Di2015NewLine//new approachDi2015NewLineulong value=cmd.ExecuteNullableScalar<ulong>();Di2015NewLine
15492843Di2015UniqueSeparator myConnection.Open();Di2015NewLine var o = cmd.ExecuteScalar();Di2015NewLine OrderID = (o== DBNull.Value ? 0 :  Convert.ToUInt64(o));Di2015NewLine myConnection.Close();Di2015NewLine
15492843Di2015UniqueSeparatorOrderID = (o== DBNull.Value ? 0 :  Convert.ToUInt64(o));Di2015NewLine
15492930Di2015UniqueSeparatordecode
15492930Di2015UniqueSeparatordecode(value, case1, result1, case2, result2, ..., defaultresult)Di2015NewLine
15492930Di2015UniqueSeparatorselect  decode(supplier_id, 10000, 'IBM',Di2015NewLine                            10001, 'Microsoft',Di2015NewLine                            10002, 'Hewlett Packard',Di2015NewLine                            'Gateway') as resultDi2015NewLinefrom    suppliers;Di2015NewLine
15492930Di2015UniqueSeparatordecode(TableD.Id,null,0,1) = some boolean variable) Di2015NewLine
15492930Di2015UniqueSeparator(itemA.tD.Id != DBNull.Value) == some boolean variableDi2015NewLine
15492976Di2015UniqueSeparator"yyyy-MM-dd HH:ss"Di2015NewLine
15492976Di2015UniqueSeparator"dd/MM/yyyy"Di2015NewLine
15492976Di2015UniqueSeparatorDateTime dt = DateTime.ParseExact(fileDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);Di2015NewLine
15493150Di2015UniqueSeparatorSystem.Data.Entities.ObjectContext
15493150Di2015UniqueSeparatorSystem.Data.Entities.DbContext
15493151Di2015UniqueSeparatorCursor.Current = Cursors.Arrow;Di2015NewLine
15493151Di2015UniqueSeparatorprivate void control_Paint(object sender, PaintEventArgs e)Di2015NewLine{Di2015NewLine    Graphics g = e.Graphics;Di2015NewLine}Di2015NewLine
15493302Di2015UniqueSeparatorSampleDataItem
15493302Di2015UniqueSeparatorbool
15493302Di2015UniqueSeparatorint
15493302Di2015UniqueSeparatorbool
15493302Di2015UniqueSeparatorpublic class SampleDataItem : SampleDataCommonDi2015NewLine{Di2015NewLine    // add flag as last paramDi2015NewLine    public SampleDataItem(String uniqueId, String title, String subtitle, Di2015NewLine        String imagePath, String description, String content, SampleDataGroup group, Di2015NewLine        bool isCustomNav = false)Di2015NewLine    : base(uniqueId, title, subtitle, imagePath, description)Di2015NewLine    {Di2015NewLine        this._content = content;Di2015NewLine        this._group = group;Di2015NewLine        this.IsCustomNav = isCustomNav;Di2015NewLine    }Di2015NewLineDi2015NewLine    // to keep it simple this doesn't handle INotifyPropertyChange, Di2015NewLine    // as does the rest of the properties in this class.Di2015NewLine    public bool IsCustomNav { get; set; }Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
15493302Di2015UniqueSeparatorSampleDataItem
15493302Di2015UniqueSeparatorisCustomNav
15493302Di2015UniqueSeparatorvoid ItemView_ItemClick(object sender, ItemClickEventArgs e)Di2015NewLine{Di2015NewLine    // Navigate to the appropriate destination page, configuring the new pageDi2015NewLine    // by passing required information as a navigation parameterDi2015NewLine    var item = (SampleDataItem)e.ClickedItem;Di2015NewLine    var itemId = item.UniqueId;Di2015NewLineDi2015NewLine    if (item.IsCustomNav == false)Di2015NewLine    {Di2015NewLine        // defaultDi2015NewLine        this.Frame.Navigate(typeof(ItemDetailPage), itemId);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        // custom pageDi2015NewLine        this.Frame.Navigate(typeof(ItemDetailPage2), itemId);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15493302Di2015UniqueSeparatorItemDetailPage
15493302Di2015UniqueSeparatorItemDetailPage2
15493302Di2015UniqueSeparatorbool
15493302Di2015UniqueSeparatorint
15493302Di2015UniqueSeparatorenum
15493302Di2015UniqueSeparatorGroupDetailsPage
15493339Di2015UniqueSeparatorcomboBox1_SelectionChangeCommitted
15493339Di2015UniqueSeparatorcomboBox1_SelectedIndexChanged
15493339Di2015UniqueSeparatorcomboBox1.SelectedValue
15493339Di2015UniqueSeparatorItems collection cannot be modified when the DataSource property is set
15493339Di2015UniqueSeparatorcomboBox2.Items.Clear();
15493339Di2015UniqueSeparatorprivate void comboBox1_SelectionChangeCommitted(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string sql;Di2015NewLine        MySqlConnection conn = new MySqlConnection(sqlString);Di2015NewLine    MySqlDataAdapter adapter = new MySqlDataAdapter();Di2015NewLine    sql = "SELECT brgyname,idbrgy from barangay where idmun=" + comboBox1.SelectedValue;Di2015NewLine    adapter.SelectCommand = new MySqlCommand(sql, conn);Di2015NewLine    DataTable cbBrgy = new DataTable();Di2015NewLine    adapter.Fill(cbBrgy);Di2015NewLine    comboBox2.DataSource = cbBrgy;Di2015NewLine    comboBox2.DisplayMember = "brgyname";Di2015NewLine    comboBox2.ValueMember = "idbrgy";Di2015NewLine}Di2015NewLine
15493420Di2015UniqueSeparatorpublic class AdminAreaHandleErrorAttribute: HandleErrorAttributeDi2015NewLine{Di2015NewLine    public override void OnException(ExceptionContext filterContext)Di2015NewLine    {Di2015NewLine        var area = filterContext.RouteData.Values["area"] as string;Di2015NewLine        if (string.Equals(area, "Admin", StringComparison.InvariantCultureIgnoreCase))Di2015NewLine        {Di2015NewLine            base.OnException(filterContext);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15493420Di2015UniqueSeparatorpublic static void RegisterGlobalFilters(GlobalFilterCollection filters)Di2015NewLine{Di2015NewLine    filters.Add(new AdminAreaHandleError());Di2015NewLine}Di2015NewLine
15493497Di2015UniqueSeparatorHttpWebResponse myResp = (HttpWebResponse)myReq.GetResponse();Di2015NewLine
15493497Di2015UniqueSeparatorWebResponse
15493497Di2015UniqueSeparatorIDisposable
15493497Di2015UniqueSeparatorusing
15493497Di2015UniqueSeparatorStreamReader
15493497Di2015UniqueSeparatorWebResponse
15493497Di2015UniqueSeparatorstring responseString;Di2015NewLineusing (var response = myReq.GetResponse())Di2015NewLine{Di2015NewLine    using (var reader = new StreamReader(response.GetResponseStream())Di2015NewLine    {Di2015NewLine        responseString = reader.ReadToEnd();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15493693Di2015UniqueSeparatorDi2015NewLineInternetExplorerOptions internetExplorerOptions = new InternetExplorerOptionsDi2015NewLine{Di2015NewLine   EnableNativeEvents = trueDi2015NewLine};Di2015NewLineIWebDriver driver = new InternetExplorerDriver(internetExplorerOptions);Di2015NewLine
15493790Di2015UniqueSeparatorstatic class ProgramDi2015NewLine{Di2015NewLine    static void Main(params string[] args)Di2015NewLine    {Di2015NewLine        var service = new Service1();Di2015NewLineDi2015NewLine        if (!Environment.UserInteractive)Di2015NewLine        {Di2015NewLine            var servicesToRun = new ServiceBase[] { service };Di2015NewLine            ServiceBase.Run(servicesToRun);Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("Running as a Console Application");Di2015NewLine        Console.WriteLine(" 1. Run Service");Di2015NewLine        Console.WriteLine(" 2. Other Option");Di2015NewLine        Console.WriteLine(" 3. Exit");Di2015NewLine        Console.Write("Enter Option: ");Di2015NewLineDi2015NewLine        var input = Console.ReadLine();Di2015NewLineDi2015NewLine        switch (input)Di2015NewLine        {Di2015NewLine            case "1":Di2015NewLine                service.Start(args);Di2015NewLine                Console.WriteLine("Running Service - Press Enter To Exit");Di2015NewLine                Console.ReadLine();Di2015NewLine                break;Di2015NewLine            case "2":Di2015NewLine                break;Di2015NewLine        }Di2015NewLine        Console.WriteLine("Closing");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class Service1 : ServiceBaseDi2015NewLine{Di2015NewLine    public Service1() { InitializeComponent(); }Di2015NewLine    public void Start(string[] args) { OnStart(args); }Di2015NewLine    protected override void OnStart(string[] args) { }Di2015NewLine    protected override void OnStop() { }Di2015NewLine}Di2015NewLine
15493975Di2015UniqueSeparatorcommand|parameter, string  <- Esoteric characterDi2015NewLine
15493975Di2015UniqueSeparatorcommand,parameter\\, string <- Escape characterDi2015NewLine
15494043Di2015UniqueSeparatorFile.Copy
15494043Di2015UniqueSeparatorsimilar post
15494043Di2015UniqueSeparatorImageResizer
15494089Di2015UniqueSeparatorClearUnnecessaryData
15494089Di2015UniqueSeparatorViewModel
15494089Di2015UniqueSeparatorfor(int i = MAX_SERIALIZATION_ITEMS; i < EpsItems.Count; )Di2015NewLine{Di2015NewLine    EpsItems.RemoveAt(MAX_SERIALIZATION_ITEMS);Di2015NewLine}Di2015NewLineDi2015NewLinefor(int i = MAX_SERIALIZATION_ITEMS; i < OthItems.Count; )Di2015NewLine{Di2015NewLine    OthItems.RemoveAt(MAX_SERIALIZATION_ITEMS);Di2015NewLine}Di2015NewLine
15494089Di2015UniqueSeparatorApplicationClosing
15494089Di2015UniqueSeparatorprivate void Application_Closing(object sender, ClosingEventArgs e)Di2015NewLine{Di2015NewLine    ViewModel.ClearUnnecessaryData();Di2015NewLineDi2015NewLine    using (var store = IsolatedStorageFile.GetUserStoreForApplication())Di2015NewLine    {Di2015NewLine        using (var stream = new IsolatedStorageFileStream("data.txt", FileMode.Create, FileAccess.Write, store))Di2015NewLine        {Di2015NewLine            var serializer = new XmlSerializer(typeof(AppViewModel.NewsViewModel));Di2015NewLine            serializer.Serialize(stream, ViewModel);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15494120Di2015UniqueSeparatorvar doc = XDocument.Load(filePath);Di2015NewLinevar dict = doc.Root.Elements("city")Di2015NewLine                   .ToDictionary(c => (string)c.Element("CityName"),Di2015NewLine                                 c => (string)c.Element("CityId"));Di2015NewLine
15494120Di2015UniqueSeparatorCityId
15494120Di2015UniqueSeparatorint
15494300Di2015UniqueSeparatorbutton1_Click(button1, null);
15494300Di2015UniqueSeparatorButton button1;Di2015NewLineButton button2;Di2015NewLineDi2015NewLinepublic Form1()Di2015NewLine{Di2015NewLine    button1.Click += new EventHandler(button1_Click);Di2015NewLine    button2.Click += new EventHandler(button2_Click);Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinevoid button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    button1_Click(button1, null);Di2015NewLine}Di2015NewLinepublic void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //Action when click occursDi2015NewLine}Di2015NewLine
15494472Di2015UniqueSeparator finallyDi2015NewLine{Di2015NewLine    GC.Collect(); Di2015NewLine   GC.WaitForPendingFinalizers();Di2015NewLine}Di2015NewLine
15494478Di2015UniqueSeparatorList<T>.Sort
15494478Di2015UniqueSeparatorviewModel.Children.Sort((a, b) => string.Compare(a.Name, b.Name));Di2015NewLine
15494620Di2015UniqueSeparatorlocalhost
15494620Di2015UniqueSeparatorhttp://localhost:2551/Default.aspx
15494620Di2015UniqueSeparator  private void Do()Di2015NewLine        {Di2015NewLine            string app_id = "157873644371675";Di2015NewLine            string app_secret = "c27a10c347af4280720fa3d76c9ae08c";Di2015NewLine            string scope = "publish_stream,manage_pages";Di2015NewLineDi2015NewLine            if (Request["code"] == null)Di2015NewLine            {Di2015NewLine                Response.Redirect(string.Format(Di2015NewLine                    "https://graph.facebook.com/oauth/authorize?client_id={0}&redirect_uri={1}&scope={2}",Di2015NewLine                    app_id, Request.Url.AbsoluteUri, scope));Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                Dictionary<string, string> tokens = new Dictionary<string, string>();Di2015NewLineDi2015NewLine                string url = string.Format("https://graph.facebook.com/oauth/access_token?client_id={0}&redirect_uri={1}&scope={2}&code={3}&client_secret={4}",Di2015NewLine                    app_id, Request.Url.AbsoluteUri, scope, Request["code"].ToString(), app_secret);Di2015NewLineDi2015NewLine                HttpWebRequest request = System.Net.WebRequest.Create(url) as HttpWebRequest;Di2015NewLineDi2015NewLine                using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)Di2015NewLine                {Di2015NewLine                    StreamReader reader = new StreamReader(response.GetResponseStream());Di2015NewLineDi2015NewLine                    string vals = reader.ReadToEnd();Di2015NewLineDi2015NewLine                    foreach (string token in vals.Split('&'))Di2015NewLine                    {Di2015NewLine                        //meh.aspx?token1=steve&token2=jake&...Di2015NewLine                        tokens.Add(token.Substring(0, token.IndexOf("=")),Di2015NewLine                            token.Substring(token.IndexOf("=") + 1, token.Length - token.IndexOf("=") - 1));Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                string access_token = tokens["access_token"];Di2015NewLineDi2015NewLine                var client = new FacebookClient(access_token);Di2015NewLineDi2015NewLine                dynamic parameters = new ExpandoObject();Di2015NewLine                parameters.message = "Check out this funny article";Di2015NewLine                parameters.link = "http://www.natiska.com/article.html";Di2015NewLine                parameters.picture = "http://www.natiska.com/dav.png";Di2015NewLine                parameters.name = "Article Title";Di2015NewLine                parameters.caption = "Caption for the link";Di2015NewLineDi2015NewLine                //446533181408238 is my fan pageDi2015NewLine                client.Post("/446533181408238/feed", parameters);Di2015NewLineDi2015NewLine            }Di2015NewLine              }Di2015NewLine
15494636Di2015UniqueSeparator        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="30" />Di2015NewLine            <RowDefinition Height="30"/>Di2015NewLine            <RowDefinition Height="Auto"/>Di2015NewLine            <RowDefinition Height="23" />Di2015NewLine        </Grid.RowDefinitions>Di2015NewLine
15494728Di2015UniqueSeparatorunsafe {Di2015NewLine  fixed (byte* red = Red, green = Green, blue = Blue, pa = PA2) {Di2015NewLine    byte* r = red, g = green, b = blue, p = pa;Di2015NewLine    for (int i = 0; i < 255; i++) {Di2015NewLine      *p = *r; p++; r++;Di2015NewLine      *p = *g; p++; g++;Di2015NewLine      *p = *b; p++; b++;Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
15494744Di2015UniqueSeparatorMyObject<T>
15494744Di2015UniqueSeparatorT
15494744Di2015UniqueSeparatorclass MyObject<T> : IEquatable<MyObject<T>>Di2015NewLine{Di2015NewLine    private readonly IEqualityComparer<T> comparer;Di2015NewLine    public MyObject(string otherProp, T value, IEqualityComparer<T> comparer)Di2015NewLine    {Di2015NewLine        this.comparer = comparer;Di2015NewLine    }Di2015NewLine    public MyObject(string otherProp, T value)Di2015NewLine        : this(otherProp, value, EqualityComparer<T>.Default)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Equals(MyObject<T> other)Di2015NewLine    {Di2015NewLine        return OtherProp.Equals(other.OtherProp) && comparer.Equals(this.Value, other.Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15494744Di2015UniqueSeparatorIEnumerable<T>
15494744Di2015UniqueSeparatorT
15494790Di2015UniqueSeparatoren-US
15494790Di2015UniqueSeparator100.23
15494790Di2015UniqueSeparatorFrench
15494790Di2015UniqueSeparatorIFormatProvider
15494790Di2015UniqueSeparatoren-US
15494790Di2015UniqueSeparatormyDecimalValue = Convert.ToDecimal(te.Text, CultureInfo.InvariantCulture);Di2015NewLine
15494961Di2015UniqueSeparator<client>Di2015NewLine  <endpoint address="https://gsxws2.apple.com/gsx-ws/services/emea/iphone" binding="basicHttpBinding" bindingConfiguration="GsxWSEmeaIPhoneBinding" contract="AppleGSX.GsxWSEmeaIPhonePort" name="GsxWSEmeaIPhonePort"/>Di2015NewLine</client>Di2015NewLine
15495427Di2015UniqueSeparatorP4Command command = new P4Command(ps, "where", true, files);Di2015NewLineptions opts = new Options();Di2015NewLine
15495522Di2015UniqueSeparatorvar Rows = context.YourTableName.Where(YourCondition).ToArray();Di2015NewLine
15495522Di2015UniqueSeparatorFirst
15495522Di2015UniqueSeparatorWhere
15495522Di2015UniqueSeparatorusing(MyEntities e = new MyEntities)Di2015NewLine{Di2015NewLine    var Row = e.MyTable.First(x => x.UsageRamID = **[ID]**);Di2015NewLineDi2015NewLine    MessageBox.Show("Available=" + Row.Available.ToString() + ",Used=" + Row.Used.ToString();Di2015NewLine}Di2015NewLine
15495522Di2015UniqueSeparatorusing(MyEntities e = new MyEntities)Di2015NewLine{Di2015NewLine    var Rows = e.MyTable.Where(x => x.UsageRamID > 10 &&  x.UsageRamID < 20);Di2015NewLineDi2015NewLine    foreach(var Row in Rows)Di2015NewLine        MessageBox.Show("Available=" + Row.Available.ToString() + ",Used=" + Row.Used.ToString();Di2015NewLine}Di2015NewLine
15495522Di2015UniqueSeparatordb.RamUsage.OrderByDescending(x => x.RamUsageID).First()Di2015NewLine
15495608Di2015UniqueSeparator cmd.CommandText = "SET IDENTITY_INSERT Student ON;" + Di2015NewLine                   "insert into Student(SId,FirstName,LastName,StartDate,EndDate) " + Di2015NewLine                    "values(@id, @firstname, @lastname, @startdate, @enddate);" + Di2015NewLine                    "SET IDENTITY_INSERT Student OFF;" ;Di2015NewLine cmd.Parameters.AddWithValue("@id", SId);Di2015NewLine cmd.Parameters.AddWithValue("@firstname", FirstName);Di2015NewLine cmd.Parameters.AddWithValue("@lastname", LastName);Di2015NewLine cmd.Parameters.AddWithValue("@startdate", StartDate);Di2015NewLine cmd.Parameters.AddWithValue("@enddate", endDate);Di2015NewLine
15495730Di2015UniqueSeparatorCHAT_DATE
15495730Di2015UniqueSeparatorDateTime
15495730Di2015UniqueSeparatorvar query = from t in dataTable.AsEnumerable()Di2015NewLine            where t.Field<DateTime>("CHAT_DATE").Date == new DateTime(2013,03,18)Di2015NewLine            select t;Di2015NewLine
15495730Di2015UniqueSeparatorCHAT_DATE
15495730Di2015UniqueSeparatorvar query = from t in dataTable.AsEnumerable()Di2015NewLine            where DateTime.ParseExact(t.Field<string>("CHAT_DATE"), "MMM d yyyy h:mmtt", CultureInfo.InvariantCulture).Date ==Di2015NewLine            new DateTime(2013,03,18)Di2015NewLine            select t;Di2015NewLine
15495783Di2015UniqueSeparator    public List<string> Split(string src)Di2015NewLine    {Di2015NewLine        List<string> result = new List<string>();Di2015NewLine        int brk = src.IndexOf('{');Di2015NewLine        if (brk < 0)Di2015NewLine        {Di2015NewLine            if (!string.IsNullOrEmpty(src.Trim()))Di2015NewLine                result.Add(src);Di2015NewLine            return result;Di2015NewLine        }Di2015NewLine        string cur = src.Substring(0, brk + 1);Di2015NewLine        string remainder = src.Substring(brk + 1);Di2015NewLine        int countBrk = 1;Di2015NewLine        while (countBrk > 0)Di2015NewLine        {Di2015NewLine            int idxOpened = remainder.IndexOf('{');Di2015NewLine            int idxClosed = remainder.IndexOf('}');Di2015NewLine            if (idxOpened >= 0 && idxOpened < idxClosed)Di2015NewLine            {Di2015NewLine                countBrk++;Di2015NewLine                cur = cur + remainder.Substring(0, idxOpened + 1);Di2015NewLine                remainder = remainder.Substring(idxOpened + 1);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                countBrk--;Di2015NewLine                cur = cur + remainder.Substring(0, idxClosed + 1);Di2015NewLine                remainder = remainder.Substring(idxClosed + 1);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        if (!string.IsNullOrEmpty(cur.Trim()))Di2015NewLine            result.Add(cur);Di2015NewLine        result.AddRange(Split(remainder));Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine
15495822Di2015UniqueSeparatorprivate ObservableCollection<String> _actionList; Di2015NewLineDi2015NewLinepublic ObservableCollection<String> ActionList {Di2015NewLine  get { Di2015NewLine    if (_actionList == null) {Di2015NewLine      _actionList = new ObservableCollection<String>();Di2015NewLine    }Di2015NewLineDi2015NewLine    return actionList; Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void populateActionList(){Di2015NewLine  if (this.action == 0) {Di2015NewLine    ActionList.Clear();Di2015NewLineDi2015NewLine    ActionList.Add("Chinese");Di2015NewLine    ActionList.Add("Indian");Di2015NewLine    ActionList.Add("Malay");Di2015NewLine    ActionList.Add("Indian");Di2015NewLine  }Di2015NewLineDi2015NewLine  if (this.action == 1){Di2015NewLine    ActionList.Clear();Di2015NewLineDi2015NewLine    ActionList.Add("Dog");Di2015NewLine    ActionList.Add("Cats");Di2015NewLine    ActionList.Add("Pigs");Di2015NewLine    ActionList.Add("Horses");Di2015NewLine    ActionList.Add("Fish");Di2015NewLine    ActionList.Add("Lion");Di2015NewLine  }Di2015NewLine}Di2015NewLine
15496070Di2015UniqueSeparator<chartingToolkit:Chart Name="chart1" Title="Chart Title">Di2015NewLine    <chartingToolkit:LineSeries DependentValuePath="Value" IndependentValuePath="Key" ItemsSource="{Binding}">Di2015NewLine        <chartingToolkit:LineSeries.PolylineStyle>Di2015NewLine            <Style TargetType="Polyline">Di2015NewLine                <Setter Property="StrokeDashArray" Value="5 5 5" />Di2015NewLine                <Setter Property="StrokeThickness" Value="2"/>Di2015NewLine            </Style>Di2015NewLine        </chartingToolkit:LineSeries.PolylineStyle>Di2015NewLine        <chartingToolkit:LineSeries.DataPointStyle>Di2015NewLine            <Style TargetType="{x:Type chartingToolkit:LineDataPoint}">Di2015NewLine                <Setter Property="Background" Value="Red"/>Di2015NewLine                <Setter Property="Template" Value="{x:Null}" />Di2015NewLine            </Style>Di2015NewLine        </chartingToolkit:LineSeries.DataPointStyle>Di2015NewLine    </chartingToolkit:LineSeries>Di2015NewLine</chartingToolkit:Chart>Di2015NewLine
15496070Di2015UniqueSeparatorObservableCollection<KeyValuePair<string, int>>
15496082Di2015UniqueSeparatorchecked
15496082Di2015UniqueSeparator $('#App_RunFromUSB').change(function () {Di2015NewLine     alert($('#App_RunFromUSB').is(':checked'));Di2015NewLine });Di2015NewLine
15496102Di2015UniqueSeparatorAuthenticationException
15496102Di2015UniqueSeparatorInvalidCredentialException
15496152Di2015UniqueSeparatorGroupBy
15496152Di2015UniqueSeparator bool flag = s.row.ItemArray.Where(x => x != null)Di2015NewLine            .Where(x => (x is string) && !string.IsNullOrEmpty((string) x))Di2015NewLine            .GroupBy(x => x).Any(g => g.Count() > 1);Di2015NewLine
15496152Di2015UniqueSeparatorGroupBy(x => x)
15496152Di2015UniqueSeparator[ [1, 1], [3, 3] ]Di2015NewLine
15496152Di2015UniqueSeparatorCount
15496171Di2015UniqueSeparatorRxString = serialPort1.ReadExisting();Di2015NewLine
15496214Di2015UniqueSeparator               $.ajax({Di2015NewLine               type: 'POST',Di2015NewLine               url: 'Default.aspx/GetValueDateSummary',Di2015NewLine               contentType: 'application/json;charset=utf-8',Di2015NewLine               dataType: 'json',Di2015NewLine               success: function (response) {Di2015NewLine                   console.log(response);Di2015NewLine                   alert(response.d);Di2015NewLine                   renderTable(response.d);Di2015NewLine               },Di2015NewLine               error: function (errMsg) {Di2015NewLine                   $('#errorMessage').text(errMsg);Di2015NewLine               }Di2015NewLine           });Di2015NewLine
15496247Di2015UniqueSeparator DataTable dt = new DataTable();Di2015NewLineforeach (string word in words)Di2015NewLine            {Di2015NewLine                SqlCommand cmd= new SqlCommand("select * from skills  where (skills  like '%"+word+"%')",con);Di2015NewLine                SqlDataAdapter da = new SqlDataAdapter(cmd); Di2015NewLine                DataTable dt1 = new DataTable();Di2015NewLine                da.Fill(dt1);Di2015NewLine                if (dt!= null)// to check if datatable is empty:-Di2015NewLine                dt.Merge(dt1, false, MissingSchemaAction.Add);Di2015NewLine                elseDi2015NewLine                dt=dt1.copy();// copy one datatable to anotherDi2015NewLine                dt1.clear();Di2015NewLine            }Di2015NewLine
15496247Di2015UniqueSeparatorGridView1.DataSource = dt;Di2015NewLineDi2015NewLineGridView1.DataBind();Di2015NewLine
15496319Di2015UniqueSeparator        [XmlElement("Example2")]Di2015NewLine        public List<Example2Type> Example2Di2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return this.example2Field;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                this.example2Field = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
15496439Di2015UniqueSeparatorViewModel
15496439Di2015UniqueSeparator    private bool _isVisible=true;Di2015NewLineDi2015NewLine    public bool IsVisibleDi2015NewLine    {Di2015NewLine        get { return _isVisible; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _isVisible= value;Di2015NewLine            NotifyPropertyChanged("IsVisible");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15496439Di2015UniqueSeparatorwpf host control
15496439Di2015UniqueSeparatorwinfrom
15496439Di2015UniqueSeparatorvisibility
15496737Di2015UniqueSeparator        List<string> myList1 = new List<string>();Di2015NewLine        List<string> myList2 = new List<string>();Di2015NewLineDi2015NewLine        string rawInput = txtInput.Text;            Di2015NewLineDi2015NewLine        foreach (string line in txtInput.Lines)Di2015NewLine        {Di2015NewLine            string firstPortion = "";Di2015NewLine            string secondPortion = "";Di2015NewLineDi2015NewLine            string[] splitInput = Regex.Split(line, ("\\\\s+"));Di2015NewLine            firstPortion = splitInput[0];Di2015NewLine            secondPortion = splitInput[1];Di2015NewLineDi2015NewLine            myList1.Add(firstPortion);Di2015NewLine            myList2.Add(secondPortion);Di2015NewLineDi2015NewLine            txtOutPut.Text = "modified " + myList1.LastOrDefault() + "  " + myList2.LastOrDefault() + "\\r\\n";Di2015NewLine        }Di2015NewLine
15496744Di2015UniqueSeparatorstring
15496744Di2015UniqueSeparatorCOPYDATA
15496744Di2015UniqueSeparatorlpVoid
15496744Di2015UniqueSeparatorstring
15496744Di2015UniqueSeparatorbyte[]
15496744Di2015UniqueSeparatorIntPtr
15496744Di2015UniqueSeparatorbyte[]
15496744Di2015UniqueSeparatorsarr
15496744Di2015UniqueSeparatorlpVoid
15496744Di2015UniqueSeparatorbyte[]
15496744Di2015UniqueSeparatorEncoding.GetString()
15496784Di2015UniqueSeparatorpublic class PointsDi2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TextAndButtonDi2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Hierarchy<T>Di2015NewLine{Di2015NewLine    T Value { get; set; }Di2015NewLine    Hierarchy<T> Hierarchy { get; set; }Di2015NewLine}Di2015NewLine
15496784Di2015UniqueSeparatorHierarchy<Point>
15496784Di2015UniqueSeparatorHierarchy<TextAndButton>
15496955Di2015UniqueSeparatorconfig.Routes.MapHttpRoute(Di2015NewLine            name: "GetByCoordinatesRoute",Di2015NewLine            routeTemplate: "/GetByCoordinatesRoute/{*coords}",Di2015NewLine            defaults: new { controller = "MyController", action = "GetByCoordinatesRoute" }Di2015NewLineDi2015NewLinepublic ActionResult GetByCoordinatesRoute(string coords)Di2015NewLine{Di2015NewLine    int[][] coordArray = RegEx.Matches("\\[(\\d+),(\\d+)\\]")Di2015NewLine                              .Cast<Match>()Di2015NewLine                              .Select(m => new int[] Di2015NewLine                                      {Di2015NewLine                                          Convert.ToInt32(m.Groups[1].Value),Di2015NewLine                                          Convert.ToInt32(m.Groups[2].Value)Di2015NewLine                                      })Di2015NewLine                              .ToArray();Di2015NewLine}Di2015NewLine
15496955Di2015UniqueSeparatorIModelBinder
15496955Di2015UniqueSeparatorpublic class CoordinateModelBinder : IModelBinderDi2015NewLine{Di2015NewLine    public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)Di2015NewLine    {Di2015NewLine        int[][] result;Di2015NewLine        // similar parsing code as aboveDi2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic ActionResult GetByCoordinatesRoute([ModelBinder(typeof(CoordinateModelBinder))]int[][] coords)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15497035Di2015UniqueSeparatorprotected override void LoadViewState(object state)Di2015NewLine{Di2015NewLine    base.LoadViewState(state);Di2015NewLine    var id = this.ViewState["DynamicControlGeneration"] as string;Di2015NewLine    if (id != null)Di2015NewLine        GenerateDynamicControls(id);Di2015NewLine}Di2015NewLineDi2015NewLineprotected void Button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string id = TextBox1.Text;Di2015NewLine    this.ViewState["DynamicControlGeneration"] = id;Di2015NewLine    GenerateDynamicControls(id);Di2015NewLine}Di2015NewLine
15497071Di2015UniqueSeparatoroptions.Username = "admin";
15497071Di2015UniqueSeparatoroptions.Username = "instil" + @"\\" + "admin";
15497071Di2015UniqueSeparatoroptions.Authority = "ntlmdomain:InsTIL.com";
15497071Di2015UniqueSeparatoroptions.Authority = "ntdlmdomain:InsTIL.com";
15497175Di2015UniqueSeparator/r
15497175Di2015UniqueSeparatortest.exe
15497175Di2015UniqueSeparatortextFile.txt
15497175Di2015UniqueSeparatorConsole.WriteLine
15497175Di2015UniqueSeparatortextFile.txt
15497234Di2015UniqueSeparatorif(!string.IsNullOrEmpty(ListPreviousRecords.SelectedItem.Value ))Di2015NewLine{Di2015NewLine...Di2015NewLine}Di2015NewLine
15497234Di2015UniqueSeparatorAutoPostBack="true"
15497249Di2015UniqueSeparatorXAML
15497249Di2015UniqueSeparatorChart
15497249Di2015UniqueSeparator<chartingToolkit:Chart.Axes>Di2015NewLine    <chartingToolkit:LinearAxis Orientation="Y" Minimum="0" Maximum="100"/>Di2015NewLine</chartingToolkit:Chart.Axes>Di2015NewLine
15497850Di2015UniqueSeparatorprivate void btnForward_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    var p2 = new Presentation_2();Di2015NewLine    this.Close();Di2015NewLine    p2.Show();Di2015NewLine}Di2015NewLine
15497885Di2015UniqueSeparatorSignOut
15497992Di2015UniqueSeparatorOnClientClick
15497992Di2015UniqueSeparatorOnClientClick = "window.open('http://www.hello.com/register.aspx',Di2015NewLine                             '_top',Di2015NewLine                             'Spring Asia - Registration'); return false;"Di2015NewLine
15498039Di2015UniqueSeparatorSQL.Replace("param1", ladleNo);
15498039Di2015UniqueSeparator"param1"
15498039Di2015UniqueSeparator"param10"
15498039Di2015UniqueSeparator"param11"
15498171Di2015UniqueSeparatorSystem.Windows.Forms
15498171Di2015UniqueSeparatorusing System.Windows.Forms;    Di2015NewLinenamespace DemoFormDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Application.Run(new Form1());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15498231Di2015UniqueSeparatorvar orderedList = list.OrderBy(o => string.IsNullOrEmpty(o.Field))Di2015NewLine                      .ThenBy(o => o.Field)Di2015NewLine                      .ToList();Di2015NewLine
15498231Di2015UniqueSeparatorfalse
15498231Di2015UniqueSeparatortrue
15498252Di2015UniqueSeparatorpublic interface ITextReader {Di2015NewLine    string ReadLine();Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface ICsvParser {Di2015NewLine    string[] GetColumns(string line);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CSV {Di2015NewLine    private readonly ITextReader textReader;Di2015NewLine    private readonly ICsvParser csvParser;Di2015NewLineDi2015NewLine    public CSV(ITextReader textReader, ICsvParser csvParser) {Di2015NewLine         this.textReader = textReader;Di2015NewLine         this.csvParser = csvParser;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string[] GetColumns() {                       Di2015NewLine        string[] columns = null;Di2015NewLine        var line = this.textReader.ReadLine();          Di2015NewLineDi2015NewLine        if (!string.IsNullOrEmpty(line)){Di2015NewLine           columns = this.csvParser.GetColumns(line);              Di2015NewLine        }Di2015NewLineDi2015NewLine        return columns;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLine[TestClass]Di2015NewLinepublic class CSVFixture {Di2015NewLine    private Mock<ITextReader> mockTextReader;Di2015NewLine    private Mock<ICsvParser> mockCsvParser;Di2015NewLine    private CSV csv;Di2015NewLineDi2015NewLine    private readonly static string [] Columns = new string[]{};Di2015NewLineDi2015NewLine    [TestInitialize]Di2015NewLine    public void Setup() {Di2015NewLine        mockTextReader = new Mock<ITextReader>();Di2015NewLine        mockCsvParser = new Mock<ICsvParser>();Di2015NewLine        csv = new CSV(mockTextReader.Object, mockCsvParser.Object);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    [TestMethod]Di2015NewLine    public void NullLine() {Di2015NewLine        Execute(null);Di2015NewLine    }Di2015NewLineDi2015NewLine    [TestMethod]Di2015NewLine    public void EmptyLine() {Di2015NewLine        Execute("");Di2015NewLine    }Di2015NewLineDi2015NewLine    [TestMethod]Di2015NewLine    public void PopulatedLine() {Di2015NewLine        Execute("SomeLineValue", Columns);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Execute(string line, string[] expected = null) {Di2015NewLine        mockTextReader.Setup(mk => mk.ReadLine()).Returns(line);Di2015NewLine        mockCsvParser.Setup(mk => mk.GetColumns(line)).Returns(Columns);Di2015NewLineDi2015NewLine        var actual = csv.GetColumns();Di2015NewLineDi2015NewLine        Assert.AreEqual(actual, expected);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
15498284Di2015UniqueSeparatorpublic IHelper Helper { private get; set; }Di2015NewLine...    Di2015NewLinepublic ActionResult SomeAction()Di2015NewLine{Di2015NewLine    var hepler = new Helper();Di2015NewLine    helper.DoStuff();Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15498284Di2015UniqueSeparatorIHelper
15498284Di2015UniqueSeparatorHelper
15498284Di2015UniqueSeparatorHelper
15498284Di2015UniqueSeparatorIHelper
15498284Di2015UniqueSeparatorIDependencyResolver
15498284Di2015UniqueSeparatorpublic class DomainDependencyResolver : IDependencyResolverDi2015NewLine{Di2015NewLine    private readonly IoCContainer Container;Di2015NewLineDi2015NewLine    public DomainDependencyResolver(IoCContainer container)Di2015NewLine    {Di2015NewLine        Container = container;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object GetService(Type serviceType)Di2015NewLine    {Di2015NewLine        if (serviceType.IsAbstract || serviceType.IsInterface)Di2015NewLine            return Container.TryGetInstance(serviceType);Di2015NewLine        elseDi2015NewLine            return Container.GetInstance(serviceType);Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerable<object> GetServices(Type serviceType)Di2015NewLine    {Di2015NewLine        return Container.GetAllInstances()Di2015NewLine                        .Where(s => s.GetType() == serviceType);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15498284Di2015UniqueSeparatorIoCContainer
15498284Di2015UniqueSeparatorGetService
15498284Di2015UniqueSeparatorGetServices
15498284Di2015UniqueSeparatorGlobal.asax.cs
15498284Di2015UniqueSeparatorDependencyResolver.SetResolver(new DomainDependencyResolver(IoCContainerFactory.Current));Di2015NewLine
15498284Di2015UniqueSeparatorIoCContainer
15498284Di2015UniqueSeparatorCurrent
15498284Di2015UniqueSeparatorIoCContainerFactory
15498426Di2015UniqueSeparator  TemplateField t = new TemplateField();Di2015NewLine        DynamicTemplate mt = new DynamicTemplate(ListItemType.Item);Di2015NewLineDi2015NewLine        HtmlImage img = new HtmlImage();Di2015NewLine        img.ID = "btnEdit";Di2015NewLine        img.Src = "~/images/image.gif";Di2015NewLine        img.Alt = "An image";Di2015NewLine        img.Attributes.Add("class", "cssimage");Di2015NewLine        mt.AddControl(img, "Text", "Edit");Di2015NewLine        t.ItemTemplate = mt;Di2015NewLine        t.HeaderText = "Activity";Di2015NewLine        GridView1.Columns.Add(t);Di2015NewLine        GridView1.DataSource = dtOutPutResult;Di2015NewLine        GridView1.DataBind();Di2015NewLine
15498498Di2015UniqueSeparator private void Form1_Load(object sender, System.EventArgs e)Di2015NewLine {Di2015NewLine   ArrayList list = ArrayList.Adapter(comboBox1.Items);Di2015NewLine   list.Sort();Di2015NewLine   // if you want to reverseDi2015NewLine   list.Reverse();Di2015NewLine   comboBox1.SelectedItem=0;Di2015NewLine }Di2015NewLine
15498625Di2015UniqueSeparatorTextBox
15498625Di2015UniqueSeparatorNamingContainer
15498625Di2015UniqueSeparatorContentPlaceHolder
15498625Di2015UniqueSeparatorPreviousPage
15498625Di2015UniqueSeparatorYourPageType page = PreviousPage as YourPageType;Di2015NewLineif(page != null)Di2015NewLine{Di2015NewLine    content.InnerHtml = page.SearchText;Di2015NewLine}Di2015NewLine
15498625Di2015UniqueSeparatorTextBox
15498625Di2015UniqueSeparatorpublic string SearchTextDi2015NewLine{Di2015NewLine    get {  return searchTextBox.Text;  }Di2015NewLine} Di2015NewLine
15498641Di2015UniqueSeparatorpublic class MyList{Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic static class MyZListExtesionDi2015NewLine{Di2015NewLine    public static void DrawSomethingElse(this MyList obj)Di2015NewLine    {Di2015NewLine        // override Draw from hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
15498764Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace TestDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        public static dynamic CompareVal(Foo logic)Di2015NewLine        {Di2015NewLine            switch(logic.ValueType)Di2015NewLine            {Di2015NewLine                case ValueTypes.Integer: return Convert.ToInt32(logic.Value);Di2015NewLine                case ValueTypes.Long:    return Convert.ToInt64(logic.Value);Di2015NewLine                case ValueTypes.Numeric: return Convert.ToDecimal(logic.Value);Di2015NewLine                case ValueTypes.Date:    return Convert.ToDateTime(logic.Value);Di2015NewLine                case ValueTypes.Text:    return logic.Value;Di2015NewLine                case ValueTypes.Bool:    return Convert.ToBoolean(logic.Value);Di2015NewLine            }Di2015NewLine            throw new InvalidProgramException("Unsupported ValueType");Di2015NewLine        }Di2015NewLineDi2015NewLine        public static bool Evaluate(dynamic val, Foo logic)Di2015NewLine        {Di2015NewLine            dynamic cmpval = CompareVal(logic);Di2015NewLineDi2015NewLine            switch(logic.OperatorType)Di2015NewLine            {Di2015NewLine                case OperatorTypes.Equal:          return val == cmpval;Di2015NewLine                case OperatorTypes.Greater:        return val >  cmpval;Di2015NewLine                case OperatorTypes.GreaterOrEqual: return val >= cmpval;Di2015NewLine                case OperatorTypes.Less:           return val <  cmpval;Di2015NewLine                case OperatorTypes.LessOrEqual:    return val <= cmpval;Di2015NewLine            }Di2015NewLineDi2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            //compare compare1 and foo1.Value, output should be false (2 < 3)Di2015NewLine            Debug.Assert(false == Evaluate(3, new Foo Di2015NewLine                        { Di2015NewLine                            Value = "2", Di2015NewLine                            OperatorType = OperatorTypes.GreaterOrEqual, Di2015NewLine                            ValueType = ValueTypes.Long Di2015NewLine                        }));Di2015NewLineDi2015NewLine            //compare compare2 and foo2.Value, output should be true (true = true)Di2015NewLine            Debug.Assert(true == Evaluate(true, new Foo Di2015NewLine                        { Di2015NewLine                            Value = "True", Di2015NewLine                            OperatorType = OperatorTypes.Equal, Di2015NewLine                            ValueType = ValueTypes.Bool Di2015NewLine                        }));Di2015NewLineDi2015NewLine            //compare compare3 and foo3.Value, output should be false (2013-03-19 16:00 < 2013-03-19 15:00)Di2015NewLine            Debug.Assert(false == Evaluate(DateTime.Parse("2013-03-19 15:00"), new Foo Di2015NewLine                        { Di2015NewLine                            Value = "2013-03-19 16:00", Di2015NewLine                            OperatorType = OperatorTypes.Less, Di2015NewLine                            ValueType = ValueTypes.Date Di2015NewLine                        }));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum OperatorTypes : uintDi2015NewLine    {Di2015NewLine        Equal = 1,Di2015NewLine        Greater = 2,Di2015NewLine        GreaterOrEqual = 3,Di2015NewLine        Less = 4,Di2015NewLine        LessOrEqual = 5Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum ValueTypes : uintDi2015NewLine    {Di2015NewLine        None = 0,Di2015NewLine        Integer = 1,Di2015NewLine        Long = 2,Di2015NewLine        Numeric = 3,Di2015NewLine        Date = 4,Di2015NewLine        Text = 5,Di2015NewLine        Bool = 6Di2015NewLine    }Di2015NewLineDi2015NewLine    class FooDi2015NewLine    {Di2015NewLine        public string Value { get; set; }Di2015NewLine        public ValueTypes ValueType { get; set; }Di2015NewLine        public OperatorTypes OperatorType { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15498897Di2015UniqueSeparatorprotected override void OnInvoke(ScheduledTask task)Di2015NewLine{Di2015NewLine   Deployment.Current.Dispatcher.BeginInvoke(() =>Di2015NewLine      {Di2015NewLine          img = new BitmapImage(new Uri(imgLoc, UriKind.Absolute));Di2015NewLine          img.CreateOptions = BitmapCreateOptions.None;Di2015NewLine          img.ImageOpened += img_ImageOpened;Di2015NewLine      });Di2015NewLine}Di2015NewLine
15498925Di2015UniqueSeparatordt
15498925Di2015UniqueSeparatordt
15498925Di2015UniqueSeparatormaintable
15498925Di2015UniqueSeparatorDataTable
15498925Di2015UniqueSeparatordt
15498925Di2015UniqueSeparatordt.Clone()
15498925Di2015UniqueSeparatordt
15498925Di2015UniqueSeparatormaintable
15498925Di2015UniqueSeparatorvar result = maindatatable.AsEnumerable()Di2015NewLine    .Except(dt.AsEnumerable(), new CustomDataRowEqualityComparer());Di2015NewLinevar dt2 = dt.Clone();Di2015NewLineforeach(DataRow mainRow in result)Di2015NewLine{Di2015NewLine    var newRow = dt2.Rows.Add();Di2015NewLine    foreach (DataColumn col in dt2.Columns)Di2015NewLine        newRow[col] = mainRow[col.ColumnName];Di2015NewLine}Di2015NewLine
15498975Di2015UniqueSeparatorMethod not allowed
15498975Di2015UniqueSeparator<system.webserver>Di2015NewLine <httpprotocol>Di2015NewLine  <customheaders>Di2015NewLine   <add name="Access-Control-Allow-Origin" value="*" />Di2015NewLine   <add name="Access-Control-Allow-Headers" value="Content-Type" />Di2015NewLine  </customheaders>Di2015NewLine </httpprotocol>Di2015NewLine</system.webserver>Di2015NewLine
15498975Di2015UniqueSeparator<bindings>Di2015NewLine    <webHttpBinding>Di2015NewLine      <binding maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" />Di2015NewLine    </webHttpBinding>Di2015NewLine</bindings>Di2015NewLine
15499054Di2015UniqueSeparatorstring
15499054Di2015UniqueSeparatorXmlDocument
15499054Di2015UniqueSeparatorstring
15499054Di2015UniqueSeparatorXmlDocument
15499117Di2015UniqueSeparatorvar orderedList = myList.OrderBy(x => x.type)Di2015NewLine                        .ThenByDescending(x => x.name)Di2015NewLine                        .ToList();Di2015NewLine
15499117Di2015UniqueSeparatorvar result = ascendingByType ? myList.OrderBy(x => x.type) :Di2015NewLine                               myList.OrderByDescending(x => x.type);Di2015NewLineDi2015NewLineif (orderByNameRequired)Di2015NewLine{Di2015NewLine    result = ascendingByName ? result.ThenBy(x => x.name) :Di2015NewLine                               result.ThenByDescending(x => x.name);Di2015NewLine}Di2015NewLineDi2015NewLineorderedList = result.ToList();Di2015NewLine
15499117Di2015UniqueSeparatorpublic class CameraComparer : IComparer<Camera>Di2015NewLine{Di2015NewLine    private SortDirection typeSortDirection;Di2015NewLine    private SortDirection nameSortDirection;Di2015NewLineDi2015NewLine    public CameraComparer(SortDirection typeSortDirection, Di2015NewLine                          SortDirection nameSortDirection)Di2015NewLine    {Di2015NewLine        this.typeSortDirection = typeSortDirection;Di2015NewLine        this.nameSortDirection = nameSortDirection;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Compare(Camera x, Camera y)Di2015NewLine    {Di2015NewLine        if (x.Type == y.Type)Di2015NewLine            return x.Name.CompareTo(y.Name) * Di2015NewLine           (nameSortDirection == SortDirection.Ascending ? 1 : -1);Di2015NewLineDi2015NewLine        return x.Type.CompareTo(y.Type) * Di2015NewLine           (typeSortDirection == SortDirection.Ascending ? 1 : -1);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum SortDirectionDi2015NewLine{Di2015NewLine    Ascending,Di2015NewLine    DescendingDi2015NewLine}Di2015NewLine
15499117Di2015UniqueSeparatormyList.Sort(new CameraComparer(SortDirection.Ascending, SortDirection.Descending));Di2015NewLine
15499210Di2015UniqueSeparatorpublic int EstateAgentID {get;set;}Di2015NewLine
15499210Di2015UniqueSeparator@Html.DropDownListFor(model=>model.EstateAgentID , Model.LettingList)Di2015NewLine
15499210Di2015UniqueSeparatorvar agent = viewModel.EstateAgentID ;Di2015NewLine
15499210Di2015UniqueSeparatorpublic ActionResult lettingselect(DropList viewModel,string product)//product is the name of your dropdownDi2015NewLine
15499223Di2015UniqueSeparatornewAreaItem == null
15499223Di2015UniqueSeparatorbool newAreaItemIsNull = (newAreaItem == null);Di2015NewLine
15499223Di2015UniqueSeparatornewAreaItem == null
15499223Di2015UniqueSeparatornewAreaItemIsNull
15499354Di2015UniqueSeparatorRedirectToAction
15499354Di2015UniqueSeparatorreturn RedirectToAction(Di2015NewLine    "ChangePassword",Di2015NewLine    "Account",Di2015NewLine     new { area = "", model = mode });Di2015NewLine
15499435Di2015UniqueSeparatorStartsWith
15499435Di2015UniqueSeparatorstring value
15499435Di2015UniqueSeparatorforeach
15499435Di2015UniqueSeparatorbody
15499435Di2015UniqueSeparatorif(body.Type != typeof(string)) body = Expression.Call(body, "ToString", null);Di2015NewLine
15499435Di2015UniqueSeparatorStartsWith
15499435Di2015UniqueSeparatorbody = Expression.Call(body, "StartsWith", null, Expression.Constant(value));Di2015NewLine
15499435Di2015UniqueSeparatorreturn Expression.Lambda<Func<T, bool>>(body, p);Di2015NewLine
15499435Di2015UniqueSeparator.Where(x => x.Foo.Bar.ToString().StartsWith("1"))Di2015NewLine
15499435Di2015UniqueSeparator"1"
15499435Di2015UniqueSeparator-1
15499435Di2015UniqueSeparator"1"
15499441Di2015UniqueSeparatorContains
15499441Di2015UniqueSeparatorform p in ...Di2015NewLinewhere TEXT_GROUOP.Contains(p.ContType)Di2015NewLine
15499463Di2015UniqueSeparatorDelete from Analysis where AnalysisKey between 34 and 73Di2015NewLine
15499506Di2015UniqueSeparatorvar services =Di2015NewLine    context.ComponentRegistry.Registrations.SelectMany(x => x.Services)Di2015NewLine           .OfType<IServiceWithType>()Di2015NewLine           .Select(x => x.ServiceType); Di2015NewLine
15499516Di2015UniqueSeparatorvar teilnehmerquery = myEntities.Mannschaft.Where( m => m.MNR == 1 )Di2015NewLine                                .SelectMany( m => m.Teilnehmer );Di2015NewLine
15500079Di2015UniqueSeparatorValidationContext
15500079Di2015UniqueSeparatorIServiceProvider
15500129Di2015UniqueSeparatorpublic static bool TryRemove<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key)Di2015NewLine{Di2015NewLine    TValue dummy;Di2015NewLine    return dictionary.TryRemove(key, out dummy);Di2015NewLine}Di2015NewLine
15500453Di2015UniqueSeparatorGC.Collect()
15500453Di2015UniqueSeparatorCLR
15500453Di2015UniqueSeparatorGC
15500453Di2015UniqueSeparatorGC.Collect()
15500491Di2015UniqueSeparatorValue1
15500491Di2015UniqueSeparatordouble[]
15500491Di2015UniqueSeparatorobject
15500491Di2015UniqueSeparatorshort
15500491Di2015UniqueSeparatorint
15500491Di2015UniqueSeparatordouble
15500491Di2015UniqueSeparatorConvert.ToDouble(value)
15500491Di2015UniqueSeparatorshort
15500491Di2015UniqueSeparatorint
15500491Di2015UniqueSeparatordouble
15500491Di2015UniqueSeparatordouble
15500491Di2015UniqueSeparatorValue2
15500577Di2015UniqueSeparatorvar red = new int[]{0,0,0,0,0,0};Di2015NewLinevar blue = new int[]{0,0,0,0,0,0};Di2015NewLineDi2015NewLinevar arrayToUse = redorblue == "red" ? red : blue;Di2015NewLinefor (int i = 0; i < count; i++)Di2015NewLine{Di2015NewLine    var value = arrayToUse[i];Di2015NewLine    // ....Di2015NewLine}Di2015NewLine
15500715Di2015UniqueSeparatorvar doc = new XmlDocument();Di2015NewLinedoc.Load(file);Di2015NewLineDi2015NewLinebool changed = false;Di2015NewLineDi2015NewLineXmlNodeChangedEventHandler handler = (sender, e) => changed = true;Di2015NewLinedoc.NodeChanged += handler;Di2015NewLinedoc.NodeInserted += handler;Di2015NewLinedoc.NodeRemoved += handler;Di2015NewLineDi2015NewLine// do some workDi2015NewLineDi2015NewLineif (changed)Di2015NewLine    doc.Save(file);Di2015NewLine
15500887Di2015UniqueSeparator/ABC(?!123)/Di2015NewLine
15500887Di2015UniqueSeparatorstr
15500887Di2015UniqueSeparatorRegex.IsMatch(str, "ABC(?!123)")Di2015NewLine
15500887Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLinepublic class ExampleDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        string[] strings = {Di2015NewLine            "ABC123",Di2015NewLine            "ABC245", Di2015NewLine            "ABC435",Di2015NewLine            "ABC Oh say can You see"Di2015NewLine        };Di2015NewLine        string pattern = "ABC(?!123)";Di2015NewLine        foreach (string str in strings)Di2015NewLine        {Di2015NewLine            Console.WriteLine(Di2015NewLine                "\\"{0}\\" {1} match.", Di2015NewLine                str, Regex.IsMatch(str, pattern) ? "does" : "does not"Di2015NewLine            );Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15500887Di2015UniqueSeparatorABC
15500887Di2015UniqueSeparator123
15500887Di2015UniqueSeparatorABC
15500887Di2015UniqueSeparator123
15500887Di2015UniqueSeparatorABC
15500887Di2015UniqueSeparatorABC(?!123).
15500887Di2015UniqueSeparatorABC
15500887Di2015UniqueSeparator:P
15501018Di2015UniqueSeparatorStringComparison.Ordinal
15501018Di2015UniqueSeparatorstring x = "uma thurman";Di2015NewLinex.IndexOf("Ã¾", StringComparison.Ordinal).Dump();Di2015NewLine
15501018Di2015UniqueSeparator-1
15501062Di2015UniqueSeparatorvar xml = "<blah><attribute name='entity_uno_id' /></blah>"
15501062Di2015UniqueSeparatorvar xml = "<blah><attribute name='entity_uno_id' />{0}</blah>"
15501062Di2015UniqueSeparatorString fetchy = ...;Di2015NewLineString addity = "<attribute name='entity_duo_id' />";Di2015NewLinereturn String.Format(fetchy, addity);Di2015NewLine
15501062Di2015UniqueSeparator{0}
15501062Di2015UniqueSeparatorpublic static string AddAttributes(this string fetchXml, params string[] attributeNames)Di2015NewLine{Di2015NewLine    return String.Format(fetchXml, String.Join(String.Empty, attributeNames.Select(a => "<attribute name='" + a + "' />")));Di2015NewLine}Di2015NewLine
15501173Di2015UniqueSeparatorGetHashCode
15501173Di2015UniqueSeparatorGetHashCode
15501173Di2015UniqueSeparatorGetHashCode
15501187Di2015UniqueSeparatorif (!xs.CanDeserialize(XmlReader.Create(fs)))Di2015NewLine
15501187Di2015UniqueSeparatorDeserialize
15501187Di2015UniqueSeparatorfs.Position = 0
15501223Di2015UniqueSeparatorcameraPosition = objectPosition + (objectOrientation.Backward * 50);Di2015NewLinecameraTarget = objectPosition;Di2015NewLineDi2015NewLineMatrix cameraArc = Matrix.CreateFromAxisAngle(objectOrientation.Up, orbitYaw) * Matrix.CreateFromAxisAngle(objectOrientation.Right, orbitPitch);//assumes objectOriention is a ortho-normal matrixDi2015NewLineDi2015NewLinecameraPosition = Vector3.Transform(cameraPosition - cameraTarget, cameraArc) + cameraTarget;Di2015NewLineDi2015NewLineview = Matrix.CreateLookAt(cameraPosition, cameraTarget, Vector3.Up);Di2015NewLine
15501223Di2015UniqueSeparatorVector3.Up
15501229Di2015UniqueSeparatorvar
15501229Di2015UniqueSeparatorvar
15501229Di2015UniqueSeparatorDictionary<string, Dictionary<string, string>>
15501229Di2015UniqueSeparatorpublic Dictionary<string, Dictionary<string, string>> info =Di2015NewLine    new Dictionary<string, Dictionary<string, string>>Di2015NewLine    {Di2015NewLine        {Di2015NewLine            "Gen",Di2015NewLine            new Dictionary<string, string>Di2015NewLine            {Di2015NewLine                {"name", "Genesis"},Di2015NewLine                {"chapters", "50"},Di2015NewLine                {"before", ""},Di2015NewLine                {"after", "Exod"}Di2015NewLine            }Di2015NewLine        },Di2015NewLine        {Di2015NewLine            "Exod",Di2015NewLine            new Dictionary<string, string>Di2015NewLine            {Di2015NewLine                {"name", "Exodus"},Di2015NewLine                {"chapters", "40"},Di2015NewLine                {"before", "Gen"},Di2015NewLine                {"after", "Lev"}Di2015NewLine            }Di2015NewLine        }Di2015NewLine    };Di2015NewLine
15501229Di2015UniqueSeparatorvar
15501280Di2015UniqueSeparator/// <summary>  Di2015NewLine/// Performs a search on the supplied string property  Di2015NewLine/// </summary>  Di2015NewLine/// <param name="stringProperty">Property to search upon</param>  Di2015NewLine/// <param name="searchTerm">Search term</param>  Di2015NewLinepublic virtual IQueryable<T> Search(Expression<Func<T, string>> stringProperty, string searchTerm)  Di2015NewLine{  Di2015NewLine    var source = this.RetrieveAll();  Di2015NewLineDi2015NewLine    if (String.IsNullOrEmpty(searchTerm))  Di2015NewLine    {  Di2015NewLine        return source;  Di2015NewLine    }  Di2015NewLineDi2015NewLine    //Create expression to represent T.[property] != null  Di2015NewLine    var isNotNullExpression = Expression.NotEqual(stringProperty.Body, Expression.Constant(null));  Di2015NewLineDi2015NewLine    //Create expression to represent T.[property].Contains(searchTerm)  Di2015NewLine    var searchTermExpression = Expression.Constant(searchTerm);  Di2015NewLine    var checkContainsExpression = Expression.Call(stringProperty.Body, typeof(string).GetMethod("Contains"), searchTermExpression);  Di2015NewLineDi2015NewLine    //Join not null and contains expressions  Di2015NewLine    var notNullAndContainsExpression = Expression.AndAlso(isNotNullExpression, checkContainsExpression);  Di2015NewLineDi2015NewLine    //Build final expression  Di2015NewLine    var methodCallExpression = Expression.Call(typeof (Queryable),   Di2015NewLine                                               "Where",   Di2015NewLine                                               new Type[] {source.ElementType},   Di2015NewLine                                               source.Expression,   Di2015NewLine                                               Expression.Lambda<Func<Club, bool>>(notNullAndContainsExpression, stringProperty.Parameters));  Di2015NewLineDi2015NewLine    return source.Provider.CreateQuery<T>(methodCallExpression);  Di2015NewLine}  Di2015NewLine
15501280Di2015UniqueSeparatormethodCallExpression
15501280Di2015UniqueSeparatorExpression.OrElse()
15501381Di2015UniqueSeparatorpublic class TesteModelBinder2 : DefaultModelBinderDi2015NewLine{Di2015NewLine    protected override void BindProperty(ControllerContext controllerContext, ModelBindingContext bindingContext, System.ComponentModel.PropertyDescriptor propertyDescriptor)Di2015NewLine    {Di2015NewLine          NameValueCollection values = controllerContext.HttpContext.Request.Form;Di2015NewLineDi2015NewLine          if (propertyDescriptor.PropertyType.Equals(typeof(ShortStrOra)))Di2015NewLine          {Di2015NewLine              ShortStrOra value = new ShortStrOra(values[propertyDescriptor.Name]);Di2015NewLine              propertyDescriptor.SetValue(bindingContext.Model, value);Di2015NewLine              return;Di2015NewLine          }Di2015NewLine          else Di2015NewLine            base.BindProperty(controllerContext, bindingContext, propertyDescriptor);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15501381Di2015UniqueSeparatorShortStrOra value = new ShortStrOra(values[propertyDescriptor.Name]);Di2015NewLine
15501381Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult EditMember([ModelBinder(typeof(TesteModelBinder2))]TesteModel model)Di2015NewLine    {Di2015NewLine        return View("Index", model);Di2015NewLine    }Di2015NewLine
15501494Di2015UniqueSeparatorCompositeCreator
15501494Di2015UniqueSeparatorICreator<Tin, Tout>
15501494Di2015UniqueSeparatorIEnumerable<Tout> CreateMany(this IEnumerable<Tin> c)
15501494Di2015UniqueSeparatorICreator
15501494Di2015UniqueSeparatorICreator<IEnumerable, ...>
15501497Di2015UniqueSeparator.csproject
15501557Di2015UniqueSeparatorDelegate
15501557Di2015UniqueSeparatorMulticastDelegate
15501557Di2015UniqueSeparatorDelegate
15501557Di2015UniqueSeparatorMulticastDelegate
15501557Di2015UniqueSeparatorLambdaExpression.Compile
15501557Di2015UniqueSeparatorControl.Invoke
15501557Di2015UniqueSeparatorDelegate
15501557Di2015UniqueSeparatorGetInvocationList
15501557Di2015UniqueSeparatorMulticastDelegate
15501557Di2015UniqueSeparatorDelegate[]
15501557Di2015UniqueSeparatorMulticastDelegate[]
15501658Di2015UniqueSeparatordata = data.Replace("\\\\", "\\\\\\\\");Di2015NewLine
15501658Di2015UniqueSeparatordata = data.Replace(@"\\", @"\\\\");Di2015NewLine
15501929Di2015UniqueSeparator    Excel.Range dataRange = chartSheet.get_Range("B2", "B" + chart.Rows.Count.ToString());Di2015NewLine    dataRange.NumberFormat = "#%";Di2015NewLine    dataRange = chartSheet.get_Range("C2", "C" +   chart.Rows.Count.ToString());Di2015NewLine                        dataRange.NumberFormat = "#%";Di2015NewLineDi2015NewLine    dataRange = chartSheet.get_Range("A1", "C" + chart.Rows.Count.ToString());Di2015NewLineDi2015NewLine    Excel.ChartObjects chartObjects = (Excel.ChartObjects)(excelWorksheet.ChartObjects(Type.Missing));Di2015NewLine    Excel.ChartObject newChartObject = (Excel.ChartObject)chartObjects.Add(0, 600, (100 * chart.Rows.Count), 300);Di2015NewLine    Excel.Chart chartPage = newChartObject.Chart;Di2015NewLineDi2015NewLine    chartPage.SetSourceData(dataRange, Type.Missing);Di2015NewLine    chartPage.ChartType = Excel.XlChartType.xlColumnClustered;Di2015NewLine
15501977Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class WithDatabaseContextDi2015NewLine{Di2015NewLine    private string dbLocation;Di2015NewLine    private BaseDataContextFactory dataContextFactoryDi2015NewLineDi2015NewLine    protected BaseDataContextFactory DataContextFactoryDi2015NewLine    {Di2015NewLine        get { return this.dataContextFactory; }Di2015NewLine    }Di2015NewLineDi2015NewLine    [TestFixtureSetUp]Di2015NewLine    public void FixtureInit()Di2015NewLine    {Di2015NewLine        // Initialize dbLocationDi2015NewLine        // Initialize dataContextFactoryDi2015NewLine    }Di2015NewLineDi2015NewLine    [TestFixtureTearDown]Di2015NewLine    public void FixtureDispose()Di2015NewLine    {Di2015NewLine        // Delete file at dbLocationDi2015NewLine    } Di2015NewLine}Di2015NewLine
15501977Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic void SomeTest : WithDatabaseContextDi2015NewLine{Di2015NewLine    private IFixture fixture;Di2015NewLineDi2015NewLine    [SetUp]Di2015NewLine    public void Init()Di2015NewLine    {Di2015NewLine        this.fixture = new Fixture();Di2015NewLine        this.fixture.Register(Di2015NewLine            () => new ProjectRepository(base.DataContextFactory));Di2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void Doing_something_should_return_something_else()Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
15502047Di2015UniqueSeparatorBackground="Transparent"
15502047Di2015UniqueSeparatorIsHitTestVisible="True"
15502090Di2015UniqueSeparatorWhere
15502090Di2015UniqueSeparatorpublic IQueryable<user> GetShopUsers(int shopId, bool includeArchived = false)Di2015NewLine{Di2015NewLine    var foo = from u in context.UsersDi2015NewLine              where u.Shop_id = shopIdDi2015NewLine              select u;Di2015NewLineDi2015NewLine    if(!includeArchived)Di2015NewLine        foo = foo.Where(u => !u.Archived);  Di2015NewLineDi2015NewLine    return foo;Di2015NewLine}Di2015NewLine
15502127Di2015UniqueSeparatorif (Application["CurrentUsers"] == null)Di2015NewLine    Application["CurrentUsers"] = 0;Di2015NewLineApplication["CurrentUsers"] += 1;Di2015NewLine
15502127Di2015UniqueSeparatorglobal.asax
15502127Di2015UniqueSeparatorprotected void Application_Start(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Application["CurrentUsers"] = 0;Di2015NewLine}Di2015NewLineprotected void Application_End(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Application["CurrentUsers"] = null;Di2015NewLine}Di2015NewLine
15502160Di2015UniqueSeparatorTraceInternal.WriteLine(string)
15502160Di2015UniqueSeparatorDebug.WriteLine Method (String, Object[])
15502160Di2015UniqueSeparatorpublic static void WriteLine(string format, params object[] args)Di2015NewLine{Di2015NewLine   TraceInternal.WriteLine(string.Format((IFormatProvider) CultureInfo.InvariantCulture, format, args));Di2015NewLine}Di2015NewLine
15502160Di2015UniqueSeparatorTrace.WriteLine(string)
15502160Di2015UniqueSeparatorpublic static void WriteLine(string message)Di2015NewLine{Di2015NewLine   TraceInternal.WriteLine(message);Di2015NewLine}Di2015NewLine
15502160Di2015UniqueSeparatorstring.format()
15502303Di2015UniqueSeparator<%= Html.DropDownList("YourControl", Model.YourSource)%>Di2015NewLine
15502303Di2015UniqueSeparatorIEnumerable<YourEntity> result =Di2015NewLine                            from item in GetListSample()Di2015NewLine                            select new YourEntityDi2015NewLine                            {Di2015NewLine                                Text = item.Name,Di2015NewLine                                Value = item.ValueDi2015NewLine                            };Di2015NewLine  model.YourSource= result;Di2015NewLine
15502303Di2015UniqueSeparatorpublic class YourModelDi2015NewLine{Di2015NewLine    public IEnumerable<YourEntity> YourSource{ get; set; }Di2015NewLine}Di2015NewLine
15502373Di2015UniqueSeparator Image labelImage = new Bitmap(419 * ((int)e.Graphics.DpiX / 100), 581 * ((int)e.Graphics.DpiX / 100), e.Graphics);Di2015NewLine
15502537Di2015UniqueSeparator+>
15502537Di2015UniqueSeparator+
15502537Di2015UniqueSeparator>
15502537Di2015UniqueSeparatorRegex.Replace
15502537Di2015UniqueSeparator>
15502537Di2015UniqueSeparator>
15502617Di2015UniqueSeparator%
15502617Di2015UniqueSeparatorstring sql = @"SELECT opd_id AS [OPD No]Di2015NewLine              , opd_date AS DATEDi2015NewLine              , opd_dpt AS DEPARTMENTDi2015NewLine              , opd_pfname AS [FIRST NAME]Di2015NewLine              , opd_plname AS [LAST NAME]Di2015NewLine              , opd_age AS AGEDi2015NewLine              , opd_gender AS GENDERDi2015NewLine              , opd_mob AS [MOBILE NO]Di2015NewLine              , opd_fthrname AS [FATHER NAME]Di2015NewLine              , opd_hsbndname AS [HUSBAND NAME] Di2015NewLine          FROM tbl_OPD Di2015NewLine         WHERE opd_pfname LIKE '%" + fname + @"%'Di2015NewLine            OR opd_plname LIKE '%" + lname + @"%'Di2015NewLine         ORDER BY DATE DESC";Di2015NewLine
15502617Di2015UniqueSeparator  using(SqlCommand cmd = con.CreateCommand())Di2015NewLine  {Di2015NewLine     cmd.Text = @"SELECT opd_id AS [OPD No]Di2015NewLine              , opd_date AS DATEDi2015NewLine              , opd_dpt AS DEPARTMENTDi2015NewLine              , opd_pfname AS [FIRST NAME]Di2015NewLine              , opd_plname AS [LAST NAME]Di2015NewLine              , opd_age AS AGEDi2015NewLine              , opd_gender AS GENDERDi2015NewLine              , opd_mob AS [MOBILE NO]Di2015NewLine              , opd_fthrname AS [FATHER NAME]Di2015NewLine              , opd_hsbndname AS [HUSBAND NAME] Di2015NewLine          FROM tbl_OPD Di2015NewLine         WHERE opd_pfname LIKE '%' + @fname + '%'Di2015NewLine            OR opd_plname LIKE '%' + @lname + '%'Di2015NewLine         ORDER BY DATE DESC"Di2015NewLineDi2015NewLine     cmd.Parameters.AddWithValue(@fname, fname);Di2015NewLine     cmd.Parameters.AddWithValue(@lname, lname);Di2015NewLineDi2015NewLine     cmd.Prepare();Di2015NewLineDi2015NewLine     SqlDataAdapter adp = new SqlDataAdapter(cmd);Di2015NewLine     DataTable dt = new DataTable();Di2015NewLine     adp.Fill(dt);Di2015NewLine  }Di2015NewLine   con.Close();Di2015NewLine
15502849Di2015UniqueSeparator-gcc_flags "-F /path/to/framework -framework AppSupport"Di2015NewLine
15503237Di2015UniqueSeparator<Border>Di2015NewLine    <Border.Background>Di2015NewLine        <VisualBrush TileMode="Tile"Di2015NewLine            Viewport="0,0,50,50" ViewportUnits="Absolute" Di2015NewLine            Viewbox="0,0,50,50" ViewboxUnits="Absolute">Di2015NewLine            <VisualBrush.Visual>Di2015NewLine                <Rectangle Stroke="Darkgray" StrokeThickness="1" Height="50" Width="50"Di2015NewLine                StrokeDashArray="5 3"/>Di2015NewLine            </VisualBrush.Visual>Di2015NewLine        </VisualBrush>Di2015NewLine    </Border.Background>Di2015NewLine</Border>Di2015NewLine
15503482Di2015UniqueSeparatorForm
15503482Di2015UniqueSeparatorpublic class MyForm : FormDi2015NewLine{Di2015NewLine   static private BSTree<string> record = new BSTree<string>();Di2015NewLineDi2015NewLine   public MyForm()Di2015NewLine   {Di2015NewLine      ...Di2015NewLine   }Di2015NewLineDi2015NewLine   ...Di2015NewLine}Di2015NewLine
15503482Di2015UniqueSeparatorMyForm
15503482Di2015UniqueSeparatorMyForm.record
15503482Di2015UniqueSeparatorstatic private BSTree<string> record;
15503482Di2015UniqueSeparatornew BSTree<string>()
15503482Di2015UniqueSeparatorstatic
15503482Di2015UniqueSeparatorpublic static class MyConfigDi2015NewLine{Di2015NewLine   static public BSTree<string> record = new BSTree<string>();Di2015NewLineDi2015NewLine   ...Di2015NewLine}Di2015NewLine
15503482Di2015UniqueSeparatorMyForm
15503482Di2015UniqueSeparatorMyConfig.record
15503482Di2015UniqueSeparatorpublic static class MyConfigDi2015NewLine{Di2015NewLine   static private BSTree<string> record = new BSTree<string>();Di2015NewLine   static public BSTree<string> RecordDi2015NewLine   {Di2015NewLine       get {return record;}Di2015NewLine       set {record = value;}Di2015NewLine   }Di2015NewLine   ...Di2015NewLine}Di2015NewLine
15503482Di2015UniqueSeparatorMyForm
15503482Di2015UniqueSeparatorMyConfig.Record
15503482Di2015UniqueSeparatorrecord
15503511Di2015UniqueSeparatorpublic class MeterValuesGroupDi2015NewLine{Di2015NewLine    List<MeterValues> MeterList { get; set; }Di2015NewLine    int ExtraParameter { get; set; }Di2015NewLine    // whatever additional parameters you need here.Di2015NewLine}Di2015NewLine
15503511Di2015UniqueSeparatorpublic class MeterValuesList : IList<MeterValues>, IXmlSerializableDi2015NewLine{Di2015NewLine    MeterValues[] _MeterList { get; set; }Di2015NewLine    string CommSettings = "Com5:19200,8,n,1";Di2015NewLineDi2015NewLine    public void WriteXml(System.Xml.XmlWriter writer)Di2015NewLine    {Di2015NewLine        writer.WriteAttributeString("CommSettings ", CommSettings );Di2015NewLineDi2015NewLine        foreach (var mv in _MeterList)Di2015NewLine        {Di2015NewLine            // kind of a bad example, but hopefully you get the ideaDi2015NewLine            if (mv== null) Di2015NewLine                return;Di2015NewLine            writer.WriteStartElement("MeterValues");Di2015NewLine            mv.WriteXml(writer);Di2015NewLine            writer.WriteEndElement();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15503647Di2015UniqueSeparatorClose()
15503647Di2015UniqueSeparatorusing
15503647Di2015UniqueSeparatorusing(StreamWriter file = new StreamWriter(@"\\hereIAm.txt"))Di2015NewLine{Di2015NewLine    file.WriteLine(SSCS.ActiveBackgroundThreads.ToString());Di2015NewLine}Di2015NewLine
15503742Di2015UniqueSeparator  if (!IsPostBack)Di2015NewLine   {Di2015NewLine        ScriptManager.RegisterStartupScript(this, this.GetType(), "scr", "setTimeout(function(){document.getElementById('"+btnSave.ClientID+"').click(); return false;}, 180000);", true);Di2015NewLine   }Di2015NewLine
15503860Di2015UniqueSeparatorpublic class EntityRepository<E> : IRepository<E> where E : classDi2015NewLine{Di2015NewLine    public virtual Task Save()Di2015NewLine    {Di2015NewLine        return context.SaveChangesAsync();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class ApplicationBCBase<E> : IEntityBC<E>Di2015NewLine{Di2015NewLine    public virtual Task Save()Di2015NewLine    {Di2015NewLine        return repository.Save();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15503860Di2015UniqueSeparatorawait
15503860Di2015UniqueSeparatorTask
15503860Di2015UniqueSeparatorTask<T>
15503860Di2015UniqueSeparatorpublic async Task<string> Foo()Di2015NewLine{Di2015NewLine    var bar = new Bar();Di2015NewLine    bar.Baz();Di2015NewLine    return await bar.Quux();Di2015NewLine}Di2015NewLine
15503860Di2015UniqueSeparatorpublic Task<string> Foo()Di2015NewLine{Di2015NewLine    var bar = new Bar();Di2015NewLine    bar.Baz();Di2015NewLine    return bar.Quux();Di2015NewLine}Di2015NewLine
15504143Di2015UniqueSeparatorreturntype == typeof(string)Di2015NewLine
15504143Di2015UniqueSeparatorGetType
15504143Di2015UniqueSeparatorGetType
15504320Di2015UniqueSeparatorprivate void ChangeXRLabels(Control control)Di2015NewLine{Di2015NewLine    foreach(Control childControl in control.Controls)Di2015NewLine    {Di2015NewLine         XRLabel label = childControl as XRLabel;Di2015NewLine         if(label != string.Empty)Di2015NewLine            label.Text = "Your Text Value goes Here";Di2015NewLine         else if(childControl.Controls.Count > 0)Di2015NewLine             ChangeXRLabels(childControl);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15504580Di2015UniqueSeparatorworker.ReportProgress(i, "Linenumber " + i + " is now parsed");Di2015NewLine
15504580Di2015UniqueSeparatorprivate void ReplaceAmpersandCompleted(object sender, RunWorkerCompletedEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Error != null) {Di2015NewLine        // Show the user an error message.Di2015NewLine    }Di2015NewLine}Di2015NewLine
15504696Di2015UniqueSeparatorExecuteReader
15504696Di2015UniqueSeparatorExecuteNonQuery
15504696Di2015UniqueSeparatorcommand.ExecuteNonQuery();Di2015NewLine
15504929Di2015UniqueSeparatorAssembly
15504949Di2015UniqueSeparatorWebBrowser
15504949Di2015UniqueSeparatorWindowsFormsHost
15504949Di2015UniqueSeparatorWebBrowser
15504949Di2015UniqueSeparatorWebBrowser
15504949Di2015UniqueSeparatorWebBrowser
15504964Di2015UniqueSeparatorvar alfreds = allPersons.Where(p => p.Name == "Alfred");Di2015NewLineDi2015NewLineforeach(Person p in alfreds)Di2015NewLine{Di2015NewLine    Console.WriteLine("Next {0} Age:{1} DOB:{2}", p.Name, p.Age, p.DOB);Di2015NewLine}Di2015NewLine
15504964Di2015UniqueSeparatorPerson p = allPersons.FirstOrDefault(p => p.Name == "Alfred");Di2015NewLineif(p != null)Di2015NewLine{Di2015NewLine    Console.WriteLine("Next {0} Age:{1} DOB:{2}", p.Name, p.Age, p.DOB);Di2015NewLine}Di2015NewLine
15505004Di2015UniqueSeparatort[0]
15505004Di2015UniqueSeparatort[1]
15505004Di2015UniqueSeparatorreturn (int)Char.GetNumericValue(n[0]) + (int)Char.GetNumericValue(n[1]);Di2015NewLine
15505016Di2015UniqueSeparatorPreviewKeyDown
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatortrue
15505016Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    PreviewKeyDown += new KeyEventHandler(MainWindow_PreviewKeyDown);Di2015NewLine}Di2015NewLineDi2015NewLinevoid MainWindow_PreviewKeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Key == Key.Space)Di2015NewLine    {Di2015NewLine        Log("Intercepted space in preview");Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatortrue
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatortrue
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatorKeyDown
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatorKeyDown
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatortrue
15505016Di2015UniqueSeparatorPreviewKeyDown
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatorHandled
15505016Di2015UniqueSeparatorPreviewX
15505016Di2015UniqueSeparatorX
15505016Di2015UniqueSeparatorbubbling
15505222Di2015UniqueSeparatorvar result = allDetails.Where(detail => detailDi2015NewLine                 .programs.All(x => SpecificPrograms.Contains(x.ID)));Di2015NewLine
15505259Di2015UniqueSeparator  Task.Factory.StartNew(() =>Di2015NewLine  {Di2015NewLine     while (!CheckForSomething())Di2015NewLine        Task.Delay(TimeSpan.FromMinutes(2));Di2015NewLineDi2015NewLine  }).Wait(TimeSpan.FromMinutes(30));Di2015NewLine
15505296Di2015UniqueSeparatorif(ds.Tables[0].Rows.Count > 0)Di2015NewLine{Di2015NewLine    object a = ds.Tables[0].Rows[0]["pic"];Di2015NewLine    string test = a.ToString();Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Response.Write("No rows for the ID=" + passedID;Di2015NewLine}Di2015NewLine
15505400Di2015UniqueSeparatorgetFileContentAsString
15505400Di2015UniqueSeparatorgetFileContentAsList
15505421Di2015UniqueSeparatorpublic void go()Di2015NewLine    {Di2015NewLine        Dispatcher.BeginInvoke(new Action(()=>{Di2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            string acc = "";Di2015NewLine            string proxy = "";Di2015NewLine            if (checkBox1.IsChecked == true || checkBox2.IsChecked == true)Di2015NewLine            {Di2015NewLine                if (checkBox1.IsChecked == true)Di2015NewLine                    Proxy.type = "http";Di2015NewLine                else if (checkBox2.IsChecked == true)Di2015NewLine                    Proxy.type = "socks5";Di2015NewLine                elseDi2015NewLine                    Proxy.type = "none";Di2015NewLine                proxy = rand_proxy();Di2015NewLine            }Di2015NewLine}), null);Di2015NewLine}Di2015NewLine
15505525Di2015UniqueSeparatorDataTable
15505525Di2015UniqueSeparatorDictionary<string, List<DataRow>> CacheData(DataTable t, params string[] fields)Di2015NewLine{Di2015NewLine    Dictionary<string, List<DataRow>> cache = new Dictionary<string, List<DataRow>>();Di2015NewLine    StringBuilder key = new StringBuilder();Di2015NewLineDi2015NewLine    foreach (DataRow r in t.Rows)Di2015NewLine    {Di2015NewLine        key.Clear();Di2015NewLine        foreach (string f in fields)Di2015NewLine        {Di2015NewLine            if (key.Length > 0) { key.Append("_"); }Di2015NewLine            key.Append(Convert.ToString(r[f]);Di2015NewLine        }Di2015NewLineDi2015NewLine        if (!cache.ContainsKey(key.ToString())) { cache.Add(key.ToString(), new List<DataRow>()); }Di2015NewLine        cache[key.ToString()].Add(r);Di2015NewLine    }Di2015NewLine    return cache;Di2015NewLine}Di2015NewLine
15505525Di2015UniqueSeparatorCacheData(table, "id", "data_id", "data");Di2015NewLine
15505525Di2015UniqueSeparatorstring key = "1_2_some data";Di2015NewLine
15505525Di2015UniqueSeparatordictionary[key];Di2015NewLine
15505525Di2015UniqueSeparatorList<DataRow>
15505596Di2015UniqueSeparatorroot
15505596Di2015UniqueSeparatornull
15505596Di2015UniqueSeparatorBTree()
15505596Di2015UniqueSeparatorroot
15505596Di2015UniqueSeparatorpublic BTree() {Di2015NewLine  root = new Artist<T>();Di2015NewLine  root.Name = default(T);Di2015NewLine  root.Members = default(T);Di2015NewLine}Di2015NewLine
15505673Di2015UniqueSeparator<row />Di2015NewLine<row />Di2015NewLine
15505673Di2015UniqueSeparator<rows>Di2015NewLine  <row />Di2015NewLine  <row />Di2015NewLine</rows>Di2015NewLine
15505696Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult YourAction(YourModel model)Di2015NewLine{Di2015NewLine    String dataXml = "<Data>";Di2015NewLine    dataXml += "<firstnamex>" + model.FirstName + "</firstnamex>";Di2015NewLine    dataXml += "<lastnamex>" + model.LastName + "</lastnamex>";Di2015NewLine    dataXml += "</Data>";Di2015NewLineDi2015NewLine    // ...Di2015NewLineDi2015NewLine    return View(model); // or redirect or whateverDi2015NewLine}Di2015NewLine
15505776Di2015UniqueSeparator$.getJSON('http://localhost:55679/RESTService.svc/GetComments?callback=?', function (data) {Di2015NewLine    alert(data.Comments[0].Author);Di2015NewLine});Di2015NewLine
15506001Di2015UniqueSeparatorObservableCollection
15506001Di2015UniqueSeparatorAccountLVM
15506001Di2015UniqueSeparatorPropertyChange
15506001Di2015UniqueSeparatorpublic AccountListViewModel AccountLVMDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return GetAccounts(); Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _AccountLVM = value;Di2015NewLine        OnPropertyChanged("AccountLVM");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineinternal AccountListViewModel GetAccounts()Di2015NewLine{Di2015NewLine    _AccountLVM = new AccountListViewModel();Di2015NewLine    _AccountLVM.AccountList.Clear();Di2015NewLine    foreach (Account i in context.Accounts.Where(x=> x.ApplicationId == this.Id))Di2015NewLine    {Di2015NewLine       AccountViewModel account = new AccountViewModel(i);Di2015NewLine        account.Application = this;Di2015NewLine        _AccountLVM.AccountList.Add(account);Di2015NewLine    }Di2015NewLine    return _AccountLVM;Di2015NewLine}Di2015NewLine
15506001Di2015UniqueSeparatorDataContext="{Binding SelectedApplication.AccountLVM.SelectedAccount}"Di2015NewLine
15506001Di2015UniqueSeparatorAccountLVM
15506001Di2015UniqueSeparatorSelectedAccount
15506001Di2015UniqueSeparatorDataGrid.SelectedItem
15506001Di2015UniqueSeparatorAccountLVM
15506001Di2015UniqueSeparatorPropertyChange
15506001Di2015UniqueSeparator_accountLVM
15506001Di2015UniqueSeparatorGetXxxxx()
15506001Di2015UniqueSeparatorGetAccounts()
15506001Di2015UniqueSeparatorpublic AccountListViewModel AccountLVMDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        if (_accountLVM == null)Di2015NewLine            GetAccounts(); // or _accountLVM = GetAccountLVM();Di2015NewLineDi2015NewLine        return _accountLVM;Di2015NewLine    }Di2015NewLine    set { ... }Di2015NewLine}Di2015NewLine
15506001Di2015UniqueSeparatorDataContext
15506001Di2015UniqueSeparatorDataContext
15506001Di2015UniqueSeparatorSource
15506001Di2015UniqueSeparatorDataContext
15506001Di2015UniqueSeparatorElementName
15506001Di2015UniqueSeparator<TextBox x:Name="txtTitle" ...Di2015NewLine         Text="{Binding ElementName=dtgAccounts, Path=SelectedItem.Title}" />Di2015NewLine
15506001Di2015UniqueSeparatorDataContext
15506001Di2015UniqueSeparatorDataContext="{Binding }"
15506001Di2015UniqueSeparatorDataContext
15506001Di2015UniqueSeparator<ComboBox ItemsSource="{Binding ApplicationList}"Di2015NewLine          SelectedItem="{Binding SelectedApplication}" />Di2015NewLineDi2015NewLine<DataGrid ItemsSource="{Binding SelectedApplication.Accounts}"Di2015NewLine          SelectedItem="{Binding SelectedAccount}" />Di2015NewLineDi2015NewLine<StackPanel DataContext="{Binding SelectedAccount}">Di2015NewLine   ...Di2015NewLine</StackPanel>Di2015NewLine
15506001Di2015UniqueSeparatorDataContext
15506062Di2015UniqueSeparator#include "NativeClass.h"Di2015NewLineDi2015NewLinepublic ref class NativeClassWrapper {Di2015NewLine    NativeClass* m_nativeClass;Di2015NewLineDi2015NewLinepublic:Di2015NewLine    NativeClassWrapper() { m_nativeClass = new NativeClass(); }Di2015NewLine    ~NativeClassWrapper() { delete m_nativeClass; }Di2015NewLine    void Method() {Di2015NewLine        m_nativeClass->Method();Di2015NewLine    }Di2015NewLineDi2015NewLineprotected:Di2015NewLine    // an explicit Finalize() methodâas a failsafeDi2015NewLine    !NativeClassWrapper() { delete m_nativeClass; }Di2015NewLine};Di2015NewLine
15506241Di2015UniqueSeparatorFrameworkElementFactory
15506241Di2015UniqueSeparator<DataGrid AlternationCount="2" AutoGenerateColumns="False" Margin="6,78,9,47" Name="datagrid_Jobs"Di2015NewLine          Loaded="datagrid_Jobs_Loaded">Di2015NewLine    <DataGrid.Columns>Di2015NewLine        <DataGridTextColumn Binding="{Binding Title, Mode=OneWay}" Header="Job" />Di2015NewLine        <DataGridTextColumn Binding="{Binding Mode=TwoWay, Path=Score}" Header="Score" />Di2015NewLine        <DataGridTemplateColumn x:Name="pcColumn" Header="Perecent Complete" />Di2015NewLine    </DataGrid.Columns>Di2015NewLine</DataGrid>Di2015NewLine
15506241Di2015UniqueSeparatorpublic void datagrid_Jobs_Loaded(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    FrameworkElementFactory sliderHolder = new FrameworkElementFactory(typeof(Slider));Di2015NewLine    sliderHolder.SetBinding(Slider.ValueProperty, new Binding("Score") { UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged });Di2015NewLine    sliderHolder.SetValue(Slider.MarginProperty, new Thickness(5));Di2015NewLine    sliderHolder.SetValue(Slider.MaximumProperty, (double)100);Di2015NewLine    sliderHolder.SetValue(Slider.MinimumProperty, (double)0);Di2015NewLine    var dataTemplate = new DataTemplate();Di2015NewLine    dataTemplate.VisualTree = sliderHolder;Di2015NewLine    dataTemplate.DataType = typeof(DataGridTemplateColumn);Di2015NewLine    pcColumn.CellTemplate = dataTemplate;Di2015NewLine}Di2015NewLine
15506299Di2015UniqueSeparatorDim dt As DataTable = New DataTable("myData")Di2015NewLineDim DataFile As FileInfo = New FileInfo("c:\\myspreadsheet.csv")Di2015NewLineDi2015NewLineDim MyConnection As New System.Data.OleDb.OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source='" & DataFile.Directory.FullName & "';Extended Properties='text;HDR=NO';Jet OLEDB:Engine Type=96;")Di2015NewLineDim oledataAdapter As OleDbDataAdapterDi2015NewLineoledataAdapter = New OleDbDataAdapter("SELECT * FROM [" & DataFile.Name & "]", MyConnection)Di2015NewLineDi2015NewLineoledataAdapter.Fill(dt) 'Bind the csv to the data tableDi2015NewLineDi2015NewLine'LOOP AND INSERT HERE...Di2015NewLineFor Each DataRowObj As DataRow In dt.RowsDi2015NewLineDi2015NewLineNextDi2015NewLine
15506350Di2015UniqueSeparator<Import Project="$(MSBuildToolsPath)\\Microsoft.CSharp.targets" />
15506350Di2015UniqueSeparator  <ItemGroup>Di2015NewLine    <LinkedItem Include="@(None)" Condition="'%Link' != ''" />Di2015NewLine  </ItemGroup>Di2015NewLine  <Target Name="CopyLinkedFiles" BeforeTargets="Build" Inputs="@(LinkedItem)" Outputs="@(LinkedItem->'%(Filename)%(Extension)')">Di2015NewLine    <Copy SourceFiles="@(LinkedItem)" DestinationFolder="$(MSBuildProjectDirectory)" />Di2015NewLine  </Target>Di2015NewLine
15506350Di2015UniqueSeparatorItemGroup
15506350Di2015UniqueSeparatorTarget
15506350Di2015UniqueSeparatorBeforeTargets
15506350Di2015UniqueSeparatorInputs
15506350Di2015UniqueSeparatorInputs
15506350Di2015UniqueSeparatorOutputs
15506350Di2015UniqueSeparatorCopy
15506350Di2015UniqueSeparatorWhateverNameYouLike.proj
15506350Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine  <Import Project="$(MSBuildToolsPath)\\Microsoft.CSharp.targets" />Di2015NewLine  <!-- paste the previously shown code here -->Di2015NewLineDi2015NewLine  <!-- you can save yourself some hassle by linking the config file here, but if you really enjoy adding the file as a link to every project, you can skip this line -->Di2015NewLine  <None Include="..\\Common\\Shared.config">Di2015NewLine    <Link>Shared.config</Link>Di2015NewLine  </None>Di2015NewLine</Project>Di2015NewLine
15506350Di2015UniqueSeparator<Import Project="..\\Common\\WhateverNameYouLike.proj" />
15506350Di2015UniqueSeparator</Project>
15506466Di2015UniqueSeparator<configuration>Di2015NewLine  ...Di2015NewLine  <system.web>Di2015NewLine    ......Di2015NewLine    <authentication mode="Windows">Di2015NewLine    </authentication>Di2015NewLine  </system.web>Di2015NewLine  <location path="MyAdminReportController">Di2015NewLine    <system.web>Di2015NewLine      <authorization>Di2015NewLine        <deny users="?" />Di2015NewLine      </authorization>Di2015NewLine    </system.web>Di2015NewLine  </location>Di2015NewLineDi2015NewLine</configuration>Di2015NewLine
15506466Di2015UniqueSeparator[Authorize]Di2015NewLinepublic class MyAdminReportController : ControllerDi2015NewLine{Di2015NewLineDi2015NewLine   //[Authorize]Di2015NewLine   public ActionResult PrivatePage()Di2015NewLine   {Di2015NewLine      return View();Di2015NewLine   }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
15506516Di2015UniqueSeparatorDim lFinal2 = From el In aDi2015NewLine              Group el By Key = New With {Key el.Description, Key el.Activity} Into GroupDi2015NewLine              Select New With {Di2015NewLine                  .Activity = Key.Description,Di2015NewLine                  .Country = Key.Activity,Di2015NewLine                  .MonthCost =Di2015NewLine                      (From k In Group.SelectMany(Function(g) g.MonthCosts.Keys).Distinct()Di2015NewLine                       Select New With {Di2015NewLine                            .Month = k,Di2015NewLine                            .Sum = Group.Sum(Function(g) If(g.MonthCosts.ContainsKey(k), g.MonthCosts(k), 0))Di2015NewLine                       }).ToDictionary(Function(i) i.Month, Function(i) i.Sum)Di2015NewLine              }Di2015NewLine
15506516Di2015UniqueSeparatorDim a As New List(Of EntityTableRow) From {Di2015NewLine    New EntityTableRow With {.Activity = "A", .Description = "D", .MonthCosts = New Dictionary(Of Integer, Double) From {{1, 20}, {2, 20}, {3, 20}}},Di2015NewLine    New EntityTableRow With {.Activity = "A", .Description = "D", .MonthCosts = New Dictionary(Of Integer, Double) From {{2, 20}, {3, 20}, {4, 20}}}Di2015NewLine}Di2015NewLine
15506770Di2015UniqueSeparatorpublic void UpdateTable(int idRecord, YourContext Context)Di2015NewLine{ Di2015NewLine    MyRecord = Context.MyTable.Find(idRecord);Di2015NewLine    myRecord.Column = "New Value";Di2015NewLine    Context.SaveChanges();Di2015NewLine }Di2015NewLine
15506770Di2015UniqueSeparator var MyData = ctx.ObjectContext.TableName.Find(id)Di2015NewLine
15506840Di2015UniqueSeparator<common:LayoutAwarePageDi2015NewLine    ...Di2015NewLine    xmlns:CustomControlName="using:CustomControlNamespace"Di2015NewLine    ...>Di2015NewLine
15506840Di2015UniqueSeparator<Page.Resources>Di2015NewLineDi2015NewLine    <UserControl x:Name="CustomControl">Di2015NewLine       ...Di2015NewLine    </UserControl>Di2015NewLineDi2015NewLine</Page.Resources>Di2015NewLine
15506943Di2015UniqueSeparatorAfterLabelEditEvent
15506943Di2015UniqueSeparatorLabelEditEventArgs
15506943Di2015UniqueSeparatore
15506943Di2015UniqueSeparatore
15506943Di2015UniqueSeparatorItem
15506943Di2015UniqueSeparatorListViewItem
15506943Di2015UniqueSeparatorListView
15506943Di2015UniqueSeparatorItems
15506943Di2015UniqueSeparator// Retrieve the item that is being edited.Di2015NewLineListViewItem item = myListView.Items[e.Item];Di2015NewLine
15506943Di2015UniqueSeparatorListViewItem
15506943Di2015UniqueSeparatorName
15506943Di2015UniqueSeparatorprivate void myListView_AfterLabelEdit(object sender, LabelEditEventArgs e)Di2015NewLine{Di2015NewLine    MessageBox.Show("You Renamed Me to: " + e.Label.ToString());Di2015NewLineDi2015NewLine    if (deviceDictionary.ContainsKey(myListView.Items[e.Item].Name))Di2015NewLine    {Di2015NewLine        MessageBox.Show("Entry updated");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15507291Di2015UniqueSeparator public Comments[] GetComments()Di2015NewLine {Di2015NewLine    .....Di2015NewLine    return new Comments[]{oComment1, oComment2};Di2015NewLine }Di2015NewLine
15507291Di2015UniqueSeparator[OperationContract]Di2015NewLine[WebGet(ResponseFormat = WebMessageFormat.Json)]Di2015NewLinepublic Comments[] GetComments()Di2015NewLine{Di2015NewLine    Comments oComment1 = new Comments();Di2015NewLine    oComment1.Title = "AMaking hay when the sun shines";Di2015NewLine    oComment1.Author = "Plan_A";Di2015NewLine    oComment1.CommentText = "AI like hay almost as much as I like sun. Just joking";Di2015NewLineDi2015NewLine    Comments oComment2 = new Comments();Di2015NewLine    oComment2.Title = "Making hay when the sun shines";Di2015NewLine    oComment2.Author = "Plan_B";Di2015NewLine    oComment2.CommentText = "I like hay almost as much as I like sun. Just joking";Di2015NewLineDi2015NewLine    return new Comments[]{oComment1, oComment2};Di2015NewLine}Di2015NewLine
15507476Di2015UniqueSeparator[first name] [last name]
15507476Di2015UniqueSeparatorAxl RoseDi2015NewLineJoey RamoneDi2015NewLineSteve VaiDi2015NewLineBB KingDi2015NewLine
15507476Di2015UniqueSeparator        StreamReader fileContent = File.OpenText(@"C:\\my-file.txt");Di2015NewLineDi2015NewLine        Console.SetCursorPosition(15, 2);Di2015NewLine        Console.Write("--- Names Table ---");Di2015NewLine        Console.SetCursorPosition(10, 4);Di2015NewLine        Console.Write("First Name");Di2015NewLine        Console.SetCursorPosition(28, 4);Di2015NewLine        Console.Write("Surname");Di2015NewLineDi2015NewLine        int topOffset = 6;Di2015NewLineDi2015NewLine        string currentLine = fileContent.ReadLine();Di2015NewLineDi2015NewLine        while (!string.IsNullOrWhiteSpace(currentLine))Di2015NewLine        {Di2015NewLine            string firstName = currentLine.Split(' ')[0];Di2015NewLine            string lastName = currentLine.Split(' ')[1];Di2015NewLineDi2015NewLine            Console.SetCursorPosition(10, topOffset);Di2015NewLine            Console.Write(firstName);Di2015NewLine            Console.SetCursorPosition(28, topOffset);Di2015NewLine            Console.Write(lastName);Di2015NewLineDi2015NewLine            topOffset += 2;Di2015NewLine            currentLine = fileContent.ReadLine();Di2015NewLine        }Di2015NewLineDi2015NewLine        fileContent.Dispose();Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine
15507636Di2015UniqueSeparatorList<ListViewItem> listItems = Di2015NewLine  ( bSelected ? lvList.SelectedItems.Cast<ListViewItem>().ToList()Di2015NewLine              : lvList.Items.Cast<ListViewItem>().ToList() );Di2015NewLine
15507636Di2015UniqueSeparatorCast
15507984Di2015UniqueSeparatorUNICODE
15507984Di2015UniqueSeparator_UNICODE
15507984Di2015UniqueSeparator/D "UNICODE"
15507984Di2015UniqueSeparator/D "_UNICODE"
15508011Di2015UniqueSeparatorinterface IProxyWithSetterDi2015NewLine{Di2015NewLine    Action<Value> Setter { get; }Di2015NewLine}Di2015NewLine
15508011Di2015UniqueSeparatorclass ProxyWithSetter<T> : ProxyValue, IProxyWithSetter where T : ValueDi2015NewLine{Di2015NewLine    Action<Value> IProxyWithSetter.Setter { get { return x => this.Setter((T)x); } }Di2015NewLineDi2015NewLine    //other thingsDi2015NewLine}Di2015NewLine
15508011Di2015UniqueSeparatorSetter
15508011Di2015UniqueSeparatorT
15508011Di2015UniqueSeparatoras IProxyWithSetter
15508011Di2015UniqueSeparatorSetter(val)
15508072Di2015UniqueSeparatorGetAllPerson
15508072Di2015UniqueSeparatorOfType
15508072Di2015UniqueSeparatorstatic List<HRPerson> GetAllHRPerson()Di2015NewLine{Di2015NewLine    return GetAllPerson().OfType<HRPerson>().ToList();Di2015NewLine}Di2015NewLine
15508072Di2015UniqueSeparatorPerson
15508072Di2015UniqueSeparatorHRPerson
15508072Di2015UniqueSeparatorpublic static class PersonExtensionsDi2015NewLine{Di2015NewLine    public static string GetSomething(this Person person)Di2015NewLine    {Di2015NewLine        // Do something with the given PersonDi2015NewLine    }Di2015NewLine}Di2015NewLine
15508072Di2015UniqueSeparatorPerson
15508072Di2015UniqueSeparatorPerson person = ...;Di2015NewLinestring something = person.GetSomething();Di2015NewLine
15508072Di2015UniqueSeparatorPerson
15508075Di2015UniqueSeparator //labels[i].Size = new Size(100, 20);Di2015NewLine   labels[i].AutoSize = true;Di2015NewLine
15508151Di2015UniqueSeparatorstring ReadQrCode(Bitmap img, int n = 0) {Di2015NewLine    if(n == 4) return null;Di2015NewLineDi2015NewLine    var bandImg = img.Clone(new System.Drawing.Rectangle(0, 0, 375, 375), Di2015NewLine        img.PixelFormat);Di2015NewLine    string text = Process(bandImg);Di2015NewLineDi2015NewLine    if(text == null) {Di2015NewLine        img.RotateFlip(RotateFlipType.Rotate90FlipNone);Di2015NewLine        text = ReadQrCode(img, n + 1);Di2015NewLine    }Di2015NewLineDi2015NewLine    return Text;Di2015NewLine}Di2015NewLine
15508151Di2015UniqueSeparatorstring qrCode;Di2015NewLineusing (var fullImg = new Bitmap(workGif)) {        Di2015NewLine    qrCode = ReadQrCode(bandImg);Di2015NewLine}Di2015NewLine
15508151Di2015UniqueSeparatorstring text = null;Di2015NewLinefor(int i = 0; i < 4; i++) {Di2015NewLine    var bandImg = img.Clone(new System.Drawing.Rectangle(0, 0, 375, 375), Di2015NewLine            img.PixelFormat);Di2015NewLine    text = Process(bandImg)Di2015NewLineDi2015NewLine    if(text != null) break;Di2015NewLine    else img.RotateFlip(RotateFlipType.Rotate90FlipNone);Di2015NewLine}Di2015NewLine
15508187Di2015UniqueSeparator    UserDetails u = new UserDetails();Di2015NewLine    u.username = TextBox1.Text;Di2015NewLine    u.password = TextBox2.Text;Di2015NewLineDi2015NewLine    TrackToolDataContext data = new TrackToolDataContext();Di2015NewLine    data.UserDetails.InsertOnSubmit(u);Di2015NewLine    data.SubmitChanges();Di2015NewLine
15508254Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineusing MonoTouch.UIKit;Di2015NewLineDi2015NewLinenamespace PythonMathDi2015NewLine{Di2015NewLine    class SplitViewControllerDelegate : UISplitViewControllerDelegateDi2015NewLine    {Di2015NewLine        public override bool ShouldHideViewController(Di2015NewLine            UISplitViewController svc,Di2015NewLine            UIViewController viewController,Di2015NewLine            UIInterfaceOrientation inOrientation)Di2015NewLine        {Di2015NewLine            return (! InAppPurchaseModel.Editor.Purchased) ||Di2015NewLine                inOrientation == UIInterfaceOrientation.Portrait ||Di2015NewLine                inOrientation == UIInterfaceOrientation.PortraitUpsideDown;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15508254Di2015UniqueSeparatorvar SplitViewController = new UISplitViewController();Di2015NewLineSplitViewController.Delegate = new SplitViewControllerDelegate ();Di2015NewLine
15508289Di2015UniqueSeparatorString.Format("{0}", x == null ? "<null>": (x == 0 ? "True" : "False"))Di2015NewLine
15508437Di2015UniqueSeparatortextBox.TextChanged += MyClass.MyOtherMethod;Di2015NewLine
15508437Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    public static void MyOtherMethod(object sender, TextChangedEventArgs e)Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
15508447Di2015UniqueSeparatora is sbyteDi2015NewLine
15508447Di2015UniqueSeparatora.GetType() == typeof(sbyte)Di2015NewLine
15508447Di2015UniqueSeparatora.GetType() is sbyte
15508447Di2015UniqueSeparatora.GetType()
15508447Di2015UniqueSeparatorSystem.Type
15508447Di2015UniqueSeparatorSystem.RuntimeType
15508447Di2015UniqueSeparatorsbyte
15508447Di2015UniqueSeparatorsbyte
15508447Di2015UniqueSeparatorsbyte
15508447Di2015UniqueSeparatorValueType
15508447Di2015UniqueSeparatorObject
15508447Di2015UniqueSeparatorpublic static int Nextpow2(double a)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15508447Di2015UniqueSeparatordecimal
15508447Di2015UniqueSeparatordouble
15508447Di2015UniqueSeparatorint indx = 0;Di2015NewLineint p = math.Nextpow2(indx);Di2015NewLine
15508532Di2015UniqueSeparatore
15508532Di2015UniqueSeparatornew Notification()
15508532Di2015UniqueSeparatornotificationList = x.Element("Notifications")Di2015NewLine                    .Elements("Notification")Di2015NewLine                    .Select(e => new Notification()Di2015NewLine                                 {Di2015NewLine                                     href = (string)e.Attribute("href")Di2015NewLine                                     notificationDetails = (DateTime)e.Element("NotificationDate")Di2015NewLine                                     notificationDate = (string)e.Element("NotificationDetails")Di2015NewLine                                     status = (string)e.Element("Status")Di2015NewLine                                     notificationTitle = (string)e.Element("NotificationTitle")Di2015NewLine                                 }Di2015NewLine                    .ToList();Di2015NewLine
15508532Di2015UniqueSeparatornotificationList =Di2015NewLine    (from e in x.Element("Notifications").Elements("Notification")Di2015NewLine     select new Notification()Di2015NewLine            {Di2015NewLine                href = (string)e.Attribute("href")Di2015NewLine                notificationDetails = (DateTime)e.Element("NotificationDate")Di2015NewLine                notificationDate = (string)e.Element("NotificationDetails")Di2015NewLine                status = (string)e.Element("Status")Di2015NewLine                notificationTitle = (string)e.Element("NotificationTitle")Di2015NewLine            })Di2015NewLine    .ToList();Di2015NewLine
15508749Di2015UniqueSeparator(psizeW, psizeH)
15508749Di2015UniqueSeparatorpsizeW
15508749Di2015UniqueSeparatorpsizeH
15508749Di2015UniqueSeparatorvar result = _orderedCollectionDi2015NewLine    .Select(t => t.psizeW == t.psizeH ? Di2015NewLine            string.Format("{0}", t.psizeW) :Di2015NewLine            string.Format("{0}x{1}", t.psizeW, t.psizeH))Di2015NewLine    .ToList();Di2015NewLine
15508883Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Reflection;Di2015NewLineusing Android.Runtime;Di2015NewLineDi2015NewLinenamespace MonoDroid.ActionBar.LibraryDi2015NewLine{Di2015NewLine    //From http://forums.xamarin.com/discussion/comment/5816/#Comment_5816Di2015NewLine    public static class ResourceIdManagerDi2015NewLine    {Di2015NewLine        static bool _idInitialized;Di2015NewLine        public static void UpdateIdValues ()Di2015NewLine        {Di2015NewLine            if (_idInitialized)Di2015NewLine                return;Di2015NewLine            var eass = Assembly.GetExecutingAssembly ();Di2015NewLine            Func<Assembly,Type> f = ass =>Di2015NewLine                ass.GetCustomAttributes (typeof (ResourceDesignerAttribute), true)Di2015NewLine                    .Select (ca => ca as ResourceDesignerAttribute)Di2015NewLine                    .Where (ca => ca != null && ca.IsApplication)Di2015NewLine                    .Select (ca => ass.GetType (ca.FullName))Di2015NewLine                    .Where (ty => ty != null)Di2015NewLine                    .FirstOrDefault ();Di2015NewLine            var t = f (eass);Di2015NewLine            if (t == null)Di2015NewLine                t = AppDomain.CurrentDomain.GetAssemblies ().Select (ass => f (ass)).Where (ty => ty != null).FirstOrDefault ();Di2015NewLine            if (t != null)Di2015NewLine                t.GetMethod ("UpdateIdValues").Invoke (null, new object [0]);Di2015NewLine            _idInitialized = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15508883Di2015UniqueSeparatorResourceIdManager.UpdateIdValues();
15509021Di2015UniqueSeparatorComboBox
15509021Di2015UniqueSeparator<Style x:Key="{x:Type ComboBox}" TargetType="ComboBox">Di2015NewLine    <Setter Property="SnapsToDevicePixels" Value="true"/>Di2015NewLine    <Setter Property="OverridesDefaultStyle" Value="true"/>Di2015NewLine    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>Di2015NewLine    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>Di2015NewLine    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>Di2015NewLine    <Setter Property="MinWidth" Value="120"/>Di2015NewLine    <Setter Property="MinHeight" Value="20"/>Di2015NewLine    <Setter Property="Template">Di2015NewLine        <Setter.Value>Di2015NewLine            <ControlTemplate TargetType="ComboBox">Di2015NewLine                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">Di2015NewLine                    <Grid>Di2015NewLine                        <ToggleButton Di2015NewLine                        Name="ToggleButton" Di2015NewLine                        Template="{StaticResource ComboBoxToggleButton}" Di2015NewLine                        Grid.Column="2" Di2015NewLine                        Focusable="false"Di2015NewLine                        IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"Di2015NewLine                        ClickMode="Press">Di2015NewLine                        </ToggleButton>Di2015NewLine                        <ContentPresenterDi2015NewLine                        Name="ContentSite"Di2015NewLine                        IsHitTestVisible="False" Di2015NewLine                        Content="{TemplateBinding SelectionBoxItem}"Di2015NewLine                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"Di2015NewLine                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"Di2015NewLine                        Margin="3,3,23,3"Di2015NewLine                        VerticalAlignment="Center"Di2015NewLine                        HorizontalAlignment="Left" />Di2015NewLine                        <TextBox x:Name="PART_EditableTextBox"Di2015NewLine                             Style="{x:Null}" Di2015NewLine                             Template="{StaticResource ComboBoxTextBox}" Di2015NewLine                             HorizontalAlignment="Left" Di2015NewLine                             VerticalAlignment="Center" Di2015NewLine                             Margin="3,3,23,3"Di2015NewLine                             Focusable="True" Di2015NewLine                             Background="Transparent"Di2015NewLine                             Visibility="Hidden"Di2015NewLine                             IsReadOnly="{TemplateBinding IsReadOnly}"/>Di2015NewLine                        <Popup Di2015NewLine                        Name="Popup"Di2015NewLine                        Placement="Bottom"Di2015NewLine                        IsOpen="{TemplateBinding IsDropDownOpen}"Di2015NewLine                        AllowsTransparency="True" Di2015NewLine                        Focusable="False"Di2015NewLine                        PopupAnimation="Slide">Di2015NewLine                            <Grid Di2015NewLine                            Name="DropDown"Di2015NewLine                            SnapsToDevicePixels="True"                Di2015NewLine                            MinWidth="{TemplateBinding ActualWidth}"Di2015NewLine                            MaxHeight="{TemplateBinding MaxDropDownHeight}">Di2015NewLine                                <Border Di2015NewLine                                x:Name="DropDownBorder"Di2015NewLine                                Background="{StaticResource WindowBackgroundBrush}"Di2015NewLine                                BorderThickness="1"Di2015NewLine                                BorderBrush="{StaticResource SolidBorderBrush}"/>Di2015NewLine                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">Di2015NewLine                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />Di2015NewLine                                </ScrollViewer>Di2015NewLine                            </Grid>Di2015NewLine                        </Popup>Di2015NewLine                    </Grid>Di2015NewLine                </Border>Di2015NewLine                <ControlTemplate.Triggers>Di2015NewLine                    <Trigger Property="HasItems" Value="false">Di2015NewLine                        <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>Di2015NewLine                    </Trigger>Di2015NewLine                    <Trigger Property="IsEnabled" Value="false">Di2015NewLine                        <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>Di2015NewLine                    </Trigger>Di2015NewLine                    <Trigger Property="IsGrouping" Value="true">Di2015NewLine                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>Di2015NewLine                    </Trigger>Di2015NewLine                    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">Di2015NewLine                        <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>Di2015NewLine                        <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>Di2015NewLine                    </Trigger>Di2015NewLine                    <Trigger Property="IsEditable"Di2015NewLine                             Value="true">Di2015NewLine                        <Setter Property="IsTabStop" Value="false"/>Di2015NewLine                        <Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>Di2015NewLine                        <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>Di2015NewLine                    </Trigger>Di2015NewLine                </ControlTemplate.Triggers>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine    <Style.Triggers>Di2015NewLine    </Style.Triggers>Di2015NewLine</Style>Di2015NewLine
15509021Di2015UniqueSeparator<ComboBox Height="30" Width="150" BorderBrush="Red" BorderThickness="6" />Di2015NewLine
15509021Di2015UniqueSeparator<ComboBox Height="30" Width="150" BorderBrush="Green" BorderThickness="3" />Di2015NewLine
15509087Di2015UniqueSeparatorvar container = builder.Build();Di2015NewLinevar resolver = new AutofacDependencyResolver(container);Di2015NewLineDependencyResolver.SetResolver(resolver);Di2015NewLine
15509087Di2015UniqueSeparatorpublic static IContainer Container { get; set; }Di2015NewLine
15509087Di2015UniqueSeparatorpublic TranslationServiceStringSource(string text) {Di2015NewLine    _text = text;Di2015NewLine    _translator = new MvcApplication.Container.Resolve<ITranslationService>(); Di2015NewLine}Di2015NewLine
15509334Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    int id;Di2015NewLine    static void doStuff()Di2015NewLine    {Di2015NewLine        id++; // <-- Error!Di2015NewLine    }Di2015NewLine}Di2015NewLine
15509334Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    static void doStuff()Di2015NewLine    {Di2015NewLine        var fooBar = new Dictionary<Foo, Bar>(); // Create instanceDi2015NewLine        fooBar.Add(new Foo(), new Bar()); // No error :)Di2015NewLine    }Di2015NewLine}Di2015NewLine
15509334Di2015UniqueSeparatorid
15509334Di2015UniqueSeparatorfoo
15509334Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    int id;Di2015NewLine    static void doStuff()Di2015NewLine    {Di2015NewLine        var foo = new Foo(); // Create instanceDi2015NewLine        foo.id++; // No error :)Di2015NewLine    }Di2015NewLine}Di2015NewLine
15509334Di2015UniqueSeparatorpublic static class ProgramDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        Dictionary<int, Customer> customers = new Dictionary<int, Customer>();Di2015NewLineDi2015NewLine        Customer cust1 = new Customer(1, "Cust 1");Di2015NewLine        Customer cust2 = new Customer(2, "Cust 2");Di2015NewLine        Customer cust3 = new Customer(3, "Cust 3");Di2015NewLineDi2015NewLine        customers.Add(cust1.ID, cust1);Di2015NewLine        customers.Add(cust2.ID, cust2);Di2015NewLine        customers.Add(cust3.ID, cust3);Di2015NewLineDi2015NewLine        foreach (KeyValuePair<int, Customer> custKeyVal in customers)Di2015NewLine        {Di2015NewLine            Console.WriteLine(Di2015NewLine                "Customer ID: {0}, Name: {1}",Di2015NewLine                custKeyVal.Key,Di2015NewLine                custKeyVal.Value.Name);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15509423Di2015UniqueSeparator<example>
15509423Di2015UniqueSeparator<example><code>var s;</code></example>
15509423Di2015UniqueSeparator/// <summary>Di2015NewLine/// This is the summary Di2015NewLine/// </summary>Di2015NewLine/// <example>Di2015NewLine/// <code>var s;</code>Di2015NewLine/// </example>Di2015NewLinepublic string SomeValue { get; set; }Di2015NewLine
15509429Di2015UniqueSeparatorforeach(var member in members)Di2015NewLine{Di2015NewLine    Console.WriteLine(member.MemberId.Id);Di2015NewLine    foreach(var attribute in member.Attributes)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Attribute: {0},\\tValue: {1}", attribute.Identifier.Name, attribute.Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15509646Di2015UniqueSeparatorprivate const uint LVM_FIRST = 0x1000;Di2015NewLineprivate const uint LVM_SETEXTENDEDLISTVIEWSTYLE = LVM_FIRST + 54;Di2015NewLineprivate const uint LVM_GETEXTENDEDLISTVIEWSTYLE = LVM_FIRST + 55;Di2015NewLineprivate const uint LVS_EX_GRIDLINES = 0x00000001;Di2015NewLineDi2015NewLine[DllImport("coredll.dll")]Di2015NewLineprivate static extern uint SendMessage(IntPtr hwnd, uint msg, uint wparam, uint lparam);Di2015NewLineDi2015NewLinepublic void EnableGridlines(ListView listView)Di2015NewLine{Di2015NewLine    var style = SendMessage(Di2015NewLine            listView.Handle,Di2015NewLine            LVM_GETEXTENDEDLISTVIEWSTYLE,Di2015NewLine            0,Di2015NewLine            0);Di2015NewLineDi2015NewLine    style |= LVS_EX_GRIDLINES;Di2015NewLineDi2015NewLine    var style = SendMessage(Di2015NewLine            listView.Handle,Di2015NewLine            LVM_SETEXTENDEDLISTVIEWSTYLE,Di2015NewLine            0,Di2015NewLine            style);    Di2015NewLine}Di2015NewLine
15509764Di2015UniqueSeparatorHasKey(t => t.ParentUK);Di2015NewLineHasKey(t => t.Sequence);Di2015NewLine
15509764Di2015UniqueSeparatorHasKey(t => new { t.ParentUK, t.Sequence });Di2015NewLine
15509764Di2015UniqueSeparatorHasKey(t => t.Sequence)
15509764Di2015UniqueSeparatorHasKey(t => t.ParentUK)
15509764Di2015UniqueSeparatorSequence
15509791Di2015UniqueSeparatorSystem.Object
15509791Di2015UniqueSeparatorobject
15509791Di2015UniqueSeparatorobject o;Di2015NewLine
15509791Di2015UniqueSeparatoro
15509791Di2015UniqueSeparatorobject
15509834Di2015UniqueSeparator <serviceThrottling maxConcurrentCalls="100" maxConcurrentInstances="100"/>Di2015NewLine
15509834Di2015UniqueSeparatorServiceHost host = new ServiceHost(typeof(MyService));Di2015NewLineDi2015NewLinestring msg = "Service Behaviors:" + Environment.NewLine;Di2015NewLineforeach (IServiceBehavior behavior in host.Description.Behaviors)Di2015NewLine{Di2015NewLine    msg += behavior.ToString() + Environment.NewLine;Di2015NewLineDi2015NewLine    if (behavior is ServiceThrottlingBehavior)Di2015NewLine    {Di2015NewLine        ServiceThrottlingBehavior serviceThrottlingBehavior = (ServiceThrottlingBehavior)behavior;Di2015NewLine        msg += "     maxConcurrentSessions =   " + serviceThrottlingBehavior.MaxConcurrentSessions.ToString() + Environment.NewLine;Di2015NewLine    }Di2015NewLine}Di2015NewLineEventLog.WriteEntry("My Log Source", msg,  EventLogEntryType.Information);Di2015NewLine
15509898Di2015UniqueSeparatorFameMappingEntry.SaveFameDBMap(toSaveIdentifiers);
15509898Di2015UniqueSeparatorvar childTask = parentTask.ContinueWith((pt) =>Di2015NewLine{Di2015NewLine   FameMappingEntry.SaveFameDBMap(toSaveIdentifiers);Di2015NewLine}, TaskContinuationOptions.OnlyOnRanToCompletion);Di2015NewLine
15510010Di2015UniqueSeparatorclass PunchInfoDi2015NewLine{  Di2015NewLine    public PunchInfo(DateTime time, int id)Di2015NewLine    {Di2015NewLine        Id = id;Di2015NewLine        Time = time;Di2015NewLine    }Di2015NewLine    public DateTime Time;Di2015NewLine    public int Id;Di2015NewLine}Di2015NewLineDi2015NewLineDictionary<string, List<PunchInfo>> Devices;Di2015NewLineint Count = 0;Di2015NewLineconst int Limit = 1000000;Di2015NewLineconst int LowerLimit = 90 * Limit / 100;Di2015NewLinevoid SaveRecord(string device, int id, DateTime time)Di2015NewLine{Di2015NewLine   PunchInfo info = new PunchInfo(time, id);Di2015NewLine   List<PunchInfo> list;Di2015NewLine   if (!Devices.TryGetValue(device, out list))Di2015NewLine   {Di2015NewLine      list = new List<PunchInfo>();Di2015NewLine      Devices.Add(device, list);Di2015NewLine   }Di2015NewLine   list.Add(info);Di2015NewLine   Count++;Di2015NewLine   if (Count >= Limit)Di2015NewLine   {Di2015NewLine       List<string> writeDevices = new List<string>();Di2015NewLine       foreach(KeyValuePair<string, List<PunchInfo>> item in Devices)Di2015NewLine       {Di2015NewLine           writeDevices.Add(item.Key);Di2015NewLine           Count -= item.Value.Count;Di2015NewLine           if (Count < LowerLimit) break;Di2015NewLine       }Di2015NewLineDi2015NewLine       foreach(string device in writeDevices)Di2015NewLine       {Di2015NewLine          List<PunchInfo> list = Devices[device];Di2015NewLine          Devices.Remove(device);Di2015NewLine          SaveDevices(device, list);Di2015NewLine       }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevoid SaveAllDevices()Di2015NewLine{Di2015NewLine    foreach(KeyValuePair<string, List<PunchInfo>> item in Devices)Di2015NewLine        SaveDevices(item.Key, item.Value);Di2015NewLine    Devices.Clear();Di2015NewLine}Di2015NewLine
15510068Di2015UniqueSeparatorvar model = new Model();Di2015NewLinevar session = engine.CreateSession(model);Di2015NewLinevar submission = session.CompileSubmission<dynamic>(script);Di2015NewLineforeach (Model data in models)Di2015NewLine{Di2015NewLine    model.InputA = data.InputA;Di2015NewLine    model.InputB = data.InputB;Di2015NewLine    model.Factor = data.Factor;Di2015NewLineDi2015NewLine    dynamic result = submission.Execute();Di2015NewLine    Console.WriteLine("{0} {1} {2}", result.Î£, result.Î, result.Î»);Di2015NewLine}Di2015NewLine
15510206Di2015UniqueSeparatorforeach
15510206Di2015UniqueSeparatorforeach(var vehicle in vehicles)Di2015NewLine{Di2015NewLine    if(damaged.Contains(vehicle.VinN) Di2015NewLine    {Di2015NewLine        damagedGoods.Add(new Vehicle{});Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        goodGoods.Add(new Vehicle{});Di2015NewLine    }Di2015NewLine}Di2015NewLine
15510206Di2015UniqueSeparatorList
15510206Di2015UniqueSeparatorHashSet
15510206Di2015UniqueSeparatorContains
15510206Di2015UniqueSeparatorHashSet<Vins> damaged = new HashSet<Vins>(ReadFile());Di2015NewLine
15510288Di2015UniqueSeparator<asp:GridView ID="GridViewTopics" runat="server" AutoGenerateColumns="False" DataKeyNames="Id"Di2015NewLine    GridLines="Horizontal" OnRowEditing="GridViewTopics_RowEditing" CssClass="gridstyle" OnRowCancelingEdit="GridViewTopics_RowCancelingEdit" OnRowUpdating="GridViewTopics_RowUpdating"Di2015NewLine    Style="margin-left: 30px;" Width="230px">Di2015NewLine    <Columns>Di2015NewLine        <asp:TemplateField HeaderText="Topics">Di2015NewLine            <ItemTemplate>Di2015NewLine                <asp:Label ID="LabelTopicName" runat="server" Text='<%# Eval("Name") %>'></asp:Label>Di2015NewLine            </ItemTemplate>Di2015NewLine            <EditItemTemplate>Di2015NewLine                <asp:TextBox ID="TextBoxEditTopicName" runat="server" Text='<%# Bind("Name") %>'></asp:TextBox>Di2015NewLine            </EditItemTemplate>Di2015NewLine        </asp:TemplateField>Di2015NewLine        <asp:CommandField ButtonType="Link" ShowEditButton="true"/>Di2015NewLine    </Columns>Di2015NewLine    <HeaderStyle CssClass="headerclass" />Di2015NewLine</asp:GridView>Di2015NewLine
15510288Di2015UniqueSeparatorprotected void Page_Load(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLineif (!Page.IsPostBack) {Di2015NewLine    GridViewTopics.DataSource = GetSomeSampleData();Di2015NewLine    GridViewTopics.DataBind();Di2015NewLine}Di2015NewLine}Di2015NewLineprivate DataTable GetSomeSampleData()Di2015NewLine{Di2015NewLine    DataTable dt = new DataTable();Di2015NewLine    dt.Columns.Add("Name");Di2015NewLine    dt.Columns.Add("Id");Di2015NewLine    for (index = 1; index <= 10; index++) {Di2015NewLine        DataRow dr = dt.NewRow();Di2015NewLine        dr("Id") = index;Di2015NewLine        dr("Name") = "SomeName" + index.ToString();Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine  }Di2015NewLine    return dt;Di2015NewLine}Di2015NewLineDi2015NewLineprotected void GridViewTopics_RowEditing(object sender, GridViewEditEventArgs e)Di2015NewLine{Di2015NewLine   GridViewTopics.DataSource = GetSomeSampleData();Di2015NewLine   GridViewTopics.EditIndex = e.NewEditIndex;Di2015NewLine   GridViewTopics.DataBind();Di2015NewLine}Di2015NewLineprotected void GridViewTopics_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)Di2015NewLine{Di2015NewLine//Handle accordinglyDi2015NewLine}Di2015NewLineprotected void GridViewTopics_RowUpdating(object sender, GridViewUpdateEventArgs e)Di2015NewLine{Di2015NewLine//Handle accordinglyDi2015NewLine}Di2015NewLine
15510412Di2015UniqueSeparatorSDA.Fill(dt)
15510412Di2015UniqueSeparator...Di2015NewLineSqlDataAdapter SDA = ...Di2015NewLineif (SDA.Fill(dt) == 0)Di2015NewLine...Di2015NewLine
15510496Di2015UniqueSeparatorGrid
15510496Di2015UniqueSeparatorItemTemplate
15510496Di2015UniqueSeparatorListBox
15510496Di2015UniqueSeparatorGrid.DataContext
15510496Di2015UniqueSeparatorSmartTextItemModel
15510496Di2015UniqueSeparatorprivate void SmartTextElement_Tap(object sender, System.Windows.Input.GestureEventArgs e)Di2015NewLine{Di2015NewLine    var grid = sender as Grid;Di2015NewLine    if (grid == null)Di2015NewLine        return;Di2015NewLineDi2015NewLine   var item = grid.DataContext as SmartTextItemModel;Di2015NewLine   if (item == null)Di2015NewLine        return;Di2015NewLineDi2015NewLine   item.// Navigate to url...Di2015NewLine}Di2015NewLine
15510522Di2015UniqueSeparatorREPLACE INTO
15510522Di2015UniqueSeparatorDELETE
15510522Di2015UniqueSeparatorINSERT
15510522Di2015UniqueSeparatorINSERT IGNORE INTO users (uid, username, screenname, ...)Di2015NewLine  VALUES (@...)Di2015NewLine  ON DUPLICATE KEY UPDATE uid=VALUES(uid), username=VALUES(username), ...Di2015NewLine
15510522Di2015UniqueSeparatorON DUPLICATE KEY
15510534Di2015UniqueSeparatorbitm.DecodePixelWidth = 200;Di2015NewLinebitm.DecodePixelHeight = 100;Di2015NewLine
15510534Di2015UniqueSeparatorprivate void LoadImagesAsync()Di2015NewLine        {Di2015NewLine            IEnumerable<string> images = System.IO.Directory.GetFiles(IMAGE_FOLDER, "*.jpg").Skip(_PageNumber * NUMBER_OF_IMAGES).Take(NUMBER_OF_IMAGES);Di2015NewLineDi2015NewLine            for (int i = 0; i < NUMBER_OF_IMAGES; i++)Di2015NewLine            {Di2015NewLine                int j = i;Di2015NewLine                var bitm = new BitmapImage();Di2015NewLineDi2015NewLine                bitm.BeginInit();Di2015NewLine                bitm.CacheOption = BitmapCacheOption.OnLoad;Di2015NewLine                bitm.UriSource = new Uri(images.ElementAt(i));Di2015NewLine                bitm.DecodePixelWidth = 200;Di2015NewLine                bitm.DecodePixelHeight = 100;Di2015NewLine                bitm.EndInit();Di2015NewLineDi2015NewLine                ImageBrush brush = new ImageBrush(bitm);Di2015NewLine                brush.Freeze();Di2015NewLineDi2015NewLine                this.Dispatcher.BeginInvoke(new Action(() => Di2015NewLine                {Di2015NewLine                    Grid grid = (Grid)grd_photoBox.Children[j];Di2015NewLineDi2015NewLine                    var rectangle = (from e in grid.Children.OfType<Rectangle>()Di2015NewLine                                        where e is RectangleDi2015NewLine                                        select e).First();Di2015NewLineDi2015NewLine                    rectangle.Fill = brush;Di2015NewLine                }));Di2015NewLine            }Di2015NewLine        }Di2015NewLine
15510792Di2015UniqueSeparatorlistBox3.Items.Add(pair.Value.MEM);Di2015NewLine
15510792Di2015UniqueSeparatormem
15510792Di2015UniqueSeparatornew Book(txtIsbn.Text, txtArtist.Text)Di2015NewLine
15510792Di2015UniqueSeparatortxtArtist.Text
15510792Di2015UniqueSeparatorArtist
15510792Di2015UniqueSeparatortxtIsbn.Text
15510792Di2015UniqueSeparatorMEM
15510868Di2015UniqueSeparatoraFoo
15510900Di2015UniqueSeparatorConvert.FromBase64String
15510900Di2015UniqueSeparatorBitmap.FromStream(new MemoryStream(bytearray));
15510900Di2015UniqueSeparatorpublic class AClassDi2015NewLine{Di2015NewLine    public Bitmap image;Di2015NewLine    public int i;Di2015NewLine}Di2015NewLineDi2015NewLineBitmap bmp = (Bitmap)Bitmap.FromFile(@"......");Di2015NewLinevar json = JsonConvert.SerializeObject(new AClass() { image = bmp, i = 666 }, Di2015NewLine                                       new ImageConverter());Di2015NewLineDi2015NewLinevar aclass = JsonConvert.DeserializeObject<AClass>(json, new ImageConverter());Di2015NewLine
15510900Di2015UniqueSeparatorImageConverter
15510900Di2015UniqueSeparatorpublic class ImageConverter : Newtonsoft.Json.JsonConverterDi2015NewLine{Di2015NewLine    public override bool CanConvert(Type objectType)Di2015NewLine    {Di2015NewLine        return objectType == typeof(Bitmap);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        var m = new MemoryStream(Convert.FromBase64String((string)reader.Value));Di2015NewLine        return (Bitmap)Bitmap.FromStream(m);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        Bitmap bmp = (Bitmap)value;Di2015NewLine        MemoryStream m = new MemoryStream();Di2015NewLine        bmp.Save(m, System.Drawing.Imaging.ImageFormat.Jpeg);Di2015NewLineDi2015NewLine        writer.WriteValue(Convert.ToBase64String(m.ToArray()));Di2015NewLine    }Di2015NewLine}Di2015NewLine
15510971Di2015UniqueSeparatorFinished
15510971Di2015UniqueSeparatorVisibility.Visible
15510971Di2015UniqueSeparatorVisibility.Collapsed
15510971Di2015UniqueSeparator<TextBlock Visibility="{Binding Finished,Di2015NewLine                        Converter={StaticResource BoolToVisibilityConverter}}"/>Di2015NewLine
15510971Di2015UniqueSeparatorpublic class GenderConverter: IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        if (value is bool)Di2015NewLine            return (bool)value ? Visibility.Visible : Visibility.Collapsed;Di2015NewLine        elseDi2015NewLine            return Visibility.Collapsed;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15510971Di2015UniqueSeparatorConverterParameter
15510971Di2015UniqueSeparatorVisibility.Visible
15510988Di2015UniqueSeparator            HttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://mydomain.cc/saveimage.php");Di2015NewLine            request.Method = "POST";Di2015NewLine            request.ContentType = "application/x-www-form-urlencoded";Di2015NewLine            string postData = String.Format("image={0}", myBase64EncodedImage);   Di2015NewLineDi2015NewLine            // Getting the request stream.Di2015NewLine            request.BeginGetRequestStreamDi2015NewLine                (result =>Di2015NewLine                {Di2015NewLine                    // Sending the request.Di2015NewLine                    using (var requestStream = request.EndGetRequestStream(result))Di2015NewLine                    {Di2015NewLine                        using (StreamWriter writer = new StreamWriter(requestStream))Di2015NewLine                        {Di2015NewLine                            writer.Write(postData);Di2015NewLine                            writer.Flush();Di2015NewLine                        }Di2015NewLine                    }Di2015NewLineDi2015NewLine                    // Getting the response.Di2015NewLine                    request.BeginGetResponse(responseResult =>Di2015NewLine                    {Di2015NewLine                        var webResponse = request.EndGetResponse(responseResult);Di2015NewLine                        using (var responseStream = webResponse.GetResponseStream())Di2015NewLine                        {Di2015NewLine                            using (var streamReader = new StreamReader(responseStream))Di2015NewLine                            {Di2015NewLine                                string srresult = streamReader.ReadToEnd();Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }, null);Di2015NewLine                }, null);Di2015NewLine        }Di2015NewLine
15510988Di2015UniqueSeparator<?Di2015NewLinefunction base64_to_image( $imageData, $outputfile ) {Di2015NewLine    /* encode & write data (binary) */Di2015NewLine    $ifp = fopen( $outputfile, "wb" );Di2015NewLine    fwrite( $ifp, base64_decode( $imageData ) );Di2015NewLine    fclose( $ifp );Di2015NewLine    /* return output filename */Di2015NewLine    return( $outputfile );Di2015NewLine}       Di2015NewLineDi2015NewLineif (isset($_POST['image'])) {Di2015NewLine    base64_to_jpeg($_POST['image'], "my_path_to_store_images.jpg");Di2015NewLine}Di2015NewLineelseDi2015NewLine    die("no image data found");Di2015NewLine?>Di2015NewLine
15510988Di2015UniqueSeparatorbyte[] image = Convert.FromBase64String(str);Di2015NewLine
15511003Di2015UniqueSeparatorBufferedWaveProvider
15511003Di2015UniqueSeparatorBufferedWaveProvider
15511003Di2015UniqueSeparatorSerializable
15511003Di2015UniqueSeparatorSerializableBufferedWaveProvider
15511176Di2015UniqueSeparatorGetVersionEx
15511176Di2015UniqueSeparatorwProductType
15511176Di2015UniqueSeparatorVER_NT_SERVER
15511176Di2015UniqueSeparatorVER_NT_WORKSTATION
15511176Di2015UniqueSeparatorWin32_OperatingSystem
15511176Di2015UniqueSeparatorProductType
15511207Di2015UniqueSeparatorMessageBox
15511207Di2015UniqueSeparatorprivate void pictureBox1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine       if(MessageBox.Show("Are you really sure you want to run the program?", "Notification", MessageBoxButtons.OKCancel) == DialogResult.OK)Di2015NewLine         Process.Start("C:\\\\something.exe");Di2015NewLine    }Di2015NewLine
15511268Di2015UniqueSeparatorOrganizationServiceProxy orgserv;    Di2015NewLineusing(var xrm = new XrmServiceContext(orgserv))Di2015NewLine    {Di2015NewLine     //Opportunity currentOpportunity = ...Di2015NewLineDi2015NewLine     IQueryable<ActivityPointer> activityPointers = xrm.ActivityPointerSet.Where(a =>Di2015NewLine       a.RegardingObjectId == currentOpportunity.ToEntityReference());Di2015NewLine    }Di2015NewLine
15511450Di2015UniqueSeparatorConcurrentDictionary<T,U>
15511450Di2015UniqueSeparatorDictionary<T,U>
15511450Di2015UniqueSeparatorSortedList<T,U>
15511450Di2015UniqueSeparatorDictionary<T,U>
15511450Di2015UniqueSeparatorSortedList<T,U>
15511455Di2015UniqueSeparator<ComboBox IsEnabled="{Binding RelativeSource=Di2015NewLine   {RelativeSource Mode=Self}, Path=ItemsSource.Count}"/>Di2015NewLine
15511455Di2015UniqueSeparator<Style TargetType="ComboBox" x:Key="ComboStyle">Di2015NewLine    <Setter Property="IsEnabled" Value="{Binding RelativeSource=Di2015NewLine       {RelativeSource Mode=Self}, Path=ItemsSource.Count}"/>Di2015NewLine</Style>Di2015NewLine
15511455Di2015UniqueSeparatorComboBox cbo = new ComboBox();Di2015NewLinecbo.ItemsSource = MyData;Di2015NewLinecbo.Style = Resources["ComboStyle"] as Style;Di2015NewLine
15511498Di2015UniqueSeparatorpublic class DriverDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    ...Di2015NewLine    public virtual ICollection<Car> Drives  { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CarDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    ...Di2015NewLine    public virtual ICollection<Driver> DrivenBy { get; set; }Di2015NewLine}Di2015NewLine
15511501Di2015UniqueSeparatorinternal
15511501Di2015UniqueSeparatorpublic
15511501Di2015UniqueSeparatorinternal
15511528Di2015UniqueSeparatorTask<TResult>
15511528Di2015UniqueSeparatorSchedule()
15511528Di2015UniqueSeparatorTaskCompletionSource
15511528Di2015UniqueSeparatorAction
15511528Di2015UniqueSeparatorSchedule()
15511528Di2015UniqueSeparatorTask
15511528Di2015UniqueSeparatorpublic class RequestSchedulerDi2015NewLine{Di2015NewLine    private readonly BlockingCollection<Action> m_queue = new BlockingCollection<Action>();Di2015NewLineDi2015NewLine    public RequestScheduler()Di2015NewLine    {Di2015NewLine        this.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Start()Di2015NewLine    {Di2015NewLine        Task.Factory.StartNew(() =>Di2015NewLine        {Di2015NewLine            foreach (var action in m_queue.GetConsumingEnumerable())Di2015NewLine            {Di2015NewLine                action();Di2015NewLine            }Di2015NewLine        }, TaskCreationOptions.LongRunning);Di2015NewLine    }Di2015NewLineDi2015NewLine    public Task<TResult> Schedule<TResult>(IOperation<TResult> operation)Di2015NewLine    {Di2015NewLine        var tcs = new TaskCompletionSource<TResult>();Di2015NewLineDi2015NewLine        Action action = () =>Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                tcs.SetResult(ProcessItem(operation));Di2015NewLine            }Di2015NewLine            catch (Exception e)Di2015NewLine            {Di2015NewLine                tcs.SetException(e);Di2015NewLine            }Di2015NewLine        };Di2015NewLineDi2015NewLine        m_queue.Add(action);Di2015NewLineDi2015NewLine        return tcs.Task;Di2015NewLine    }Di2015NewLineDi2015NewLine    private T ProcessItem<T>(IOperation<T> operation)Di2015NewLine    {Di2015NewLine        // whateverDi2015NewLine    }Di2015NewLine}Di2015NewLine
15511544Di2015UniqueSeparatorTask
15511544Di2015UniqueSeparatorContinueWith
15511544Di2015UniqueSeparatorpublic class SimpleWorkQueueDi2015NewLine{Di2015NewLine    private Task _main = null;Di2015NewLineDi2015NewLine    public void AddTask(Action task)Di2015NewLine    {Di2015NewLine        if (_main == null)Di2015NewLine        {Di2015NewLine            _main = new Task(task);Di2015NewLine            _main.Start();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Action<Task> next = (t) => task();Di2015NewLine            _main = _main.ContinueWith(next);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15511544Di2015UniqueSeparatorAddTask()
15511544Di2015UniqueSeparatorpublic class PrioritizedWorkQueueDi2015NewLine{Di2015NewLine    List<Action> _queuedWork;Di2015NewLine    object _queueLocker;Di2015NewLine    Thread _workerThread;Di2015NewLineDi2015NewLine    public PrioritizedWorkQueue()Di2015NewLine    {Di2015NewLine        _queueLocker = new object();Di2015NewLine        _queuedWork = new List<Action>();Di2015NewLineDi2015NewLine        _workerThread = new Thread(LookForWork);Di2015NewLine        _workerThread.IsBackground = true;Di2015NewLine        _workerThread.Start();Di2015NewLine    }Di2015NewLine    private void LookForWork()Di2015NewLine    {Di2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            Action work;Di2015NewLine            lock (_queueLocker)Di2015NewLine            {Di2015NewLine                while (!_queuedWork.Any()) { Monitor.Wait(_queueLocker); }Di2015NewLineDi2015NewLine                work = _queuedWork.First();Di2015NewLine                _queuedWork.RemoveAt(0);Di2015NewLine            }Di2015NewLine            work();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddTask(Action task, bool highPriority)Di2015NewLine    {Di2015NewLine        lock (_queueLocker)Di2015NewLine        {Di2015NewLine            if (highPriority)Di2015NewLine            {Di2015NewLine                _queuedWork.Insert(0, task);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                _queuedWork.Add(task);Di2015NewLine            }Di2015NewLine            Monitor.Pulse(_queueLocker);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
15511686Di2015UniqueSeparator<div id="progressBarArea" class="progress-bar orange stripes">Di2015NewLine        <asp:Label ID="progressBarText" runat="server" Visible="true" Text="49%" CssClass="progressBarText"></asp:Label>Di2015NewLine        <span id="progressBarPercentage" style="width:<%=percentageLevelComplete %>%"></span>Di2015NewLine        <p class="align-center">Points Until Next Level: <asp:Label id="pointsUntilNextLevelLabel" runat="server" Text="0" CssClass="pointsUntilNextLevelLabel"></asp:Label></p>Di2015NewLine    </div>Di2015NewLine
15511693Di2015UniqueSeparatorfor (int i = 0; i < tmpCheckedListBox.Items.Count; i++)Di2015NewLine{Di2015NewLine   tmpCheckedListBox.SetItemChecked(i, true);Di2015NewLine   chkListBox_ItemCheck(tmpCheckedListBox.Items[i],null);Di2015NewLine}Di2015NewLine
15511693Di2015UniqueSeparatorEventArgs.Empty
15511693Di2015UniqueSeparatornull
15511693Di2015UniqueSeparatorfor (int i = 0; i < tmpCheckedListBox.Items.Count; i++)Di2015NewLine{Di2015NewLine   var args = new ItemCheckEventArgs(i,true,tmpCheckedListBox.GetItemChecked(i));Di2015NewLineDi2015NewLine   tmpCheckedListBox.SetItemChecked(i, true);Di2015NewLine   chkListBox_ItemCheck(tmpCheckedListBox.Items[i],args);Di2015NewLine}Di2015NewLine
15511697Di2015UniqueSeparatorText
15511697Di2015UniqueSeparatorRtf
15511697Di2015UniqueSeparatorClipboard.SetText(rb.Rtf, TextDataFormat.Rtf);Di2015NewLinerng.Paste()Di2015NewLine
15511707Di2015UniqueSeparatorX
15511707Di2015UniqueSeparatorY
15511707Di2015UniqueSeparatorRectangle's
15511707Di2015UniqueSeparatorwidth
15511707Di2015UniqueSeparatorheight
15511707Di2015UniqueSeparatorint left = prevPoint.X < e.Location.X ? prevPoint.X : e.Location.X;Di2015NewLineint top = prevPoint.Y < e.Location.Y ? prevPoint.Y : e.Location.Y;Di2015NewLinegraphics.DrawRectangle(mainPen, left, top, Math.Abs(e.Location.X - prevPoint.X), Math.Abs(e.Location.Y - prevPoint.Y));Di2015NewLine
15511993Di2015UniqueSeparatorxmlns="http://api.uclassify.com/1/ResponseSchema"
15511993Di2015UniqueSeparatorXNamespace ns = "http://api.uclassify.com/1/ResponseSchema";Di2015NewLinevar list = doc.Root.Descendants(ns + "class")Di2015NewLine                .Select(element => element.Value)Di2015NewLine                .ToList();Di2015NewLine
15511993Di2015UniqueSeparatorclass
15511993Di2015UniqueSeparator"class"
15511993Di2015UniqueSeparatorDescendants()
15511993Di2015UniqueSeparatorns
15511993Di2015UniqueSeparatorDictionary<string,double> dictionary = doc.Root.Descendants(ns + "class")Di2015NewLine                .ToDictionary(Di2015NewLine                    element => element.Attribute("className").Value,Di2015NewLine                    element => double.Parse(element.Attribute("p").Value));Di2015NewLineDi2015NewLineforeach(var item in dictionary)Di2015NewLine{Di2015NewLine    Console.WriteLine(string.Format("{0}: {1}", item.Key, item.Value));Di2015NewLine}Di2015NewLine
15511993Di2015UniqueSeparatorclassName
15511993Di2015UniqueSeparatorclass
15511993Di2015UniqueSeparatorp
15511993Di2015UniqueSeparatordouble
15512082Di2015UniqueSeparatorSetBuffer
15512082Di2015UniqueSeparatorbyte[] buffer = m_ClientSendQueue.Dequeue();Di2015NewLineDi2015NewLinem_ClientSendArgs.SetBuffer(buffer, 0, buffer.Length);Di2015NewLine
15512082Di2015UniqueSeparatorbyte[] buffer = m_ClientSendQueue.Dequeue();Di2015NewLineDi2015NewLineBuffer.BlockCopy(buffer, 0, m_ClientSendBuffer, 0, buffer.Length);Di2015NewLineDi2015NewLinem_ClientSendArgs.SetBuffer(0, buffer.Length);Di2015NewLine
15512184Di2015UniqueSeparator enum ReqStatusDi2015NewLine
15512184Di2015UniqueSeparatorpublic enum class ReqStatus {Di2015NewLine    // etc...Di2015NewLine}Di2015NewLine
15512188Di2015UniqueSeparatorALTER DATABASE MyDb SET RESTRICTED_USER WITH ROLLBACK IMMEDIATE;Di2015NewLineUSE MyDb;Di2015NewLineALTER DATABASE MyDb SET SINGLE_USER WITH ROLLBACK IMMEDIATE;Di2015NewLineUSE tempdb;Di2015NewLineDROP DATABASE MyDb;Di2015NewLine
15512188Di2015UniqueSeparatorUSE tempdb;
15512188Di2015UniqueSeparatorDROP
15512530Di2015UniqueSeparatorprotected override void OnStartupNextInstance(StartupNextInstanceEventArgs e) {Di2015NewLine    //...Di2015NewLine    switch (command.ToLowerInvariant()) {Di2015NewLine        // etc..Di2015NewLine        default:Di2015NewLine            base.OnStartupNextInstance(e);   // Brings it to the frontDi2015NewLine            System.Windows.Forms.MessageBox.Show("Argument not supported");Di2015NewLine            break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15512536Di2015UniqueSeparatorDi2015NewLine// Create a DataTable Di2015NewLineDataTable dt = new DataTable(...)Di2015NewLine// Configure the SqlCommand and SqlParameter.Di2015NewLineSqlCommand insertCommand = new SqlCommand(Di2015NewLine    "your TVP store procedure", connection);Di2015NewLineinsertCommand.CommandType = CommandType.StoredProcedure;Di2015NewLineSqlParameter tvpParam = insertCommand.Parameters.AddWithValue(Di2015NewLine    "@tvp", dt);Di2015NewLinetvpParam.SqlDbType = SqlDbType.Structured;Di2015NewLine</pre>
15512604Di2015UniqueSeparatorvar connection = new System.Data.OleDb.OleDbConnection(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\\BC207\\test.accdb")Di2015NewLine
15512691Di2015UniqueSeparator ComboBox comboBox1 = new ComboBox { Height = 18, Width = 100, FontSize = 9.5 };Di2015NewLineDi2015NewLine CompositeCollection compositeCollection = new CompositeCollection();Di2015NewLine compositeCollection.Add(NameClass.NoName);Di2015NewLineDi2015NewLine CollectionContainer collectionContainer = new CollectionContainer();Di2015NewLine collectionContainer.Collection = ItemsSource1;Di2015NewLineDi2015NewLine compositeCollection.Add(collectionContainer);Di2015NewLineDi2015NewLine comboBox1.ItemsSource = compositeCollection;Di2015NewLine
15512936Di2015UniqueSeparatorAction<T>()
15512936Di2015UniqueSeparatorFunc<T>
15512936Di2015UniqueSeparatorpublic void TakeADelegate(Action<string> action, string str)Di2015NewLine{Di2015NewLine  action(str);Di2015NewLine}Di2015NewLine
15512936Di2015UniqueSeparatorthis.TakeADelegate((string s) => { ... do work here ...})Di2015NewLine
15512940Di2015UniqueSeparatorSelectedIndex
15512940Di2015UniqueSeparatorValue
15512940Di2015UniqueSeparator<StackPanel>Di2015NewLine    <ListBox SelectedIndex="{Binding Value, ElementName=slider}">Di2015NewLine        <ListBoxItem>1</ListBoxItem>Di2015NewLine        <ListBoxItem>2</ListBoxItem>Di2015NewLine        ...Di2015NewLine        <ListBoxItem>10</ListBoxItem>Di2015NewLine    </ListBox>Di2015NewLine    <Slider Name="slider" Minimum="0" Maximum="9"/>Di2015NewLine</StackPanel>Di2015NewLine
15512940Di2015UniqueSeparatorMaximum
15512995Di2015UniqueSeparatorOrange
15512995Di2015UniqueSeparatorpublic
15512995Di2015UniqueSeparatorApples
15512995Di2015UniqueSeparatorOrange
15513000Di2015UniqueSeparatorSelectedRows
15513000Di2015UniqueSeparatorint rowIndex = Convert.ToInt32(e.CommandArgument); // Get the current rowDi2015NewLineint bigStore = Convert.ToInt32(grdOrder.Rows[rowIndex].Cells[2].Text);Di2015NewLine
15513246Di2015UniqueSeparatorGroupConsecutive
15513246Di2015UniqueSeparatorList<Day> days = new List<Day>Di2015NewLine{Di2015NewLine    new Day { Name = "Sunday", Hours= "8am - 9pm" },Di2015NewLine    new Day { Name = "Monday", Hours= "8am - 10pm" },Di2015NewLine    new Day { Name = "Tuesday", Hours= "8am - 10pm" },Di2015NewLine    new Day { Name = "Wednesday", Hours= "8am - 10pm" },Di2015NewLine    new Day { Name = "Thursday", Hours= "9am - 10pm" },Di2015NewLine    new Day { Name = "Friday", Hours= "8am - 11pm" },Di2015NewLine    new Day { Name = "Saturday", Hours= "8am - 11pm" },Di2015NewLine};Di2015NewLineDi2015NewLinevar query = from g in days.GroupConsequtive(d => d.Hours)Di2015NewLine            select new {Di2015NewLine                Name = g.Count() == 1 ? g.First().Name :Di2015NewLine                       String.Format("{0}-{1}", g.First().Name.Substring(0, 3), g.Last().Name.Substring(0, 3)),Di2015NewLine                Hours = g.KeyDi2015NewLine            };Di2015NewLine
15513246Di2015UniqueSeparatorforeach (var item in query)            Di2015NewLine    Console.WriteLine("{0} {1}", item.Name, item.Hours);Di2015NewLine
15513246Di2015UniqueSeparatorSunday 8am - 9pmDi2015NewLineMon-Wed 8am - 10pmDi2015NewLineThursday 9am - 10pmDi2015NewLineFri-Sat 8am - 11pmDi2015NewLine
15513246Di2015UniqueSeparatorpublic static class LazyExtensionsDi2015NewLine{Di2015NewLine    public static IEnumerable<IGrouping<TKey, TElement>> GroupConsecutive<TKey, TElement>(Di2015NewLine        this IEnumerable<TElement> source, Func<TElement, TKey> keySelector)Di2015NewLine    {Di2015NewLine        if (!source.Any())Di2015NewLine            yield break;Di2015NewLineDi2015NewLine        var comparer = Comparer<TKey>.Default;Di2015NewLine        Grouping<TKey, TElement> group = null;Di2015NewLineDi2015NewLine        foreach (var item in source)Di2015NewLine        {Di2015NewLine            var key = keySelector(item);Di2015NewLineDi2015NewLine            if (group == null)Di2015NewLine                group = new Grouping<TKey, TElement>(key);Di2015NewLineDi2015NewLine            if (comparer.Compare(group.Key, key) != 0)Di2015NewLine            {Di2015NewLine                yield return group;Di2015NewLine                group = new Grouping<TKey, TElement>(key);Di2015NewLine            }Di2015NewLineDi2015NewLine            group.Elements.Add(item);Di2015NewLine        }Di2015NewLineDi2015NewLine        yield return group;Di2015NewLine    }Di2015NewLineDi2015NewLine    private class Grouping<TKey, TElement> : IGrouping<TKey, TElement>Di2015NewLine    {Di2015NewLine        public Grouping(TKey key)Di2015NewLine        {Di2015NewLine            Key = key;Di2015NewLine            Elements = new List<TElement>();Di2015NewLine        }Di2015NewLineDi2015NewLine        public List<TElement> Elements { get; private set; }Di2015NewLine        public TKey Key { get; private set; }Di2015NewLineDi2015NewLine        public IEnumerator<TElement> GetEnumerator()Di2015NewLine        {Di2015NewLine            return Elements.GetEnumerator();Di2015NewLine        }Di2015NewLineDi2015NewLine        IEnumerator IEnumerable.GetEnumerator()Di2015NewLine        {Di2015NewLine            return GetEnumerator();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15513253Di2015UniqueSeparatorItemTemplate
15513253Di2015UniqueSeparatorItemContainerStyle
15513253Di2015UniqueSeparator"[Selected Table]"
15513253Di2015UniqueSeparator <ComboBox ItemsSource="{Binding Items}">Di2015NewLine    <ComboBox.ItemTemplate>Di2015NewLine        <!-- The template for the SelectedItem -->Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBlock Text="[Selected Table]" />Di2015NewLine        </DataTemplate>Di2015NewLine    </ComboBox.ItemTemplate>Di2015NewLine    <ComboBox.ItemContainerStyle>Di2015NewLine        <!-- The style for the dropdown items -->Di2015NewLine        <Style TargetType="{x:Type ComboBoxItem}">Di2015NewLine            <Setter Property="Template">Di2015NewLine                <Setter.Value>Di2015NewLine                     <!-- Add dataTemplate here if you are binding to complex object -->Di2015NewLine                    <ControlTemplate TargetType="{x:Type ContentControl}">Di2015NewLine                        <TextBlock Text="{Binding}"/>Di2015NewLine                    </ControlTemplate>Di2015NewLine                </Setter.Value>Di2015NewLine            </Setter>Di2015NewLine        </Style>Di2015NewLine    </ComboBox.ItemContainerStyle>Di2015NewLine</ComboBox>Di2015NewLine
15513253Di2015UniqueSeparator<Window x:Class="WpfApplication9.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="132" Width="278" Name="UI">Di2015NewLineDi2015NewLine    <StackPanel DataContext="{Binding ElementName=UI}">Di2015NewLine        <ComboBox ItemsSource="{Binding Items}">Di2015NewLine            <ComboBox.ItemTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <TextBlock Text="[Selected Table]" />Di2015NewLine                </DataTemplate>Di2015NewLine            </ComboBox.ItemTemplate>Di2015NewLine            <ComboBox.ItemContainerStyle>Di2015NewLine                <Style TargetType="{x:Type ComboBoxItem}">Di2015NewLine                    <Setter Property="Template">Di2015NewLine                        <Setter.Value>Di2015NewLine                            <ControlTemplate TargetType="{x:Type ContentControl}">Di2015NewLine                                <TextBlock Text="{Binding}"/>Di2015NewLine                            </ControlTemplate>Di2015NewLine                        </Setter.Value>Di2015NewLine                    </Setter>Di2015NewLine                </Style>Di2015NewLine            </ComboBox.ItemContainerStyle>Di2015NewLine        </ComboBox>Di2015NewLine    </StackPanel>Di2015NewLine</Window>Di2015NewLine
15513253Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow() Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Items.Add("Item1");Di2015NewLine        Items.Add("Item2");Di2015NewLine        Items.Add("Item3");Di2015NewLine        Items.Add("Item4");Di2015NewLine    }Di2015NewLineDi2015NewLine    private ObservableCollection<string> _items = new ObservableCollection<string>();Di2015NewLine    public ObservableCollection<string> ItemsDi2015NewLine    {Di2015NewLine        get { return _items; }Di2015NewLine        set { _items = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15513253Di2015UniqueSeparator<Window x:Class="WpfApplication17.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:local="clr-namespace:WpfApplication17"Di2015NewLine        Title="MainWindow" Height="350" Width="500" Name="UI">Di2015NewLine    <StackPanel DataContext="{Binding ElementName=UI}">Di2015NewLine        <ComboBox x:Name="combo" ItemsSource="{Binding Items}">Di2015NewLine            <ComboBox.ItemTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <TextBlock>Di2015NewLine                        <TextBlock.Style>Di2015NewLine                            <Style TargetType="TextBlock">Di2015NewLine                                <Setter Property="Text" Value="{Binding}" />Di2015NewLine                                <Style.Triggers>Di2015NewLine                                    <DataTrigger Binding="{Binding IsDropDownOpen, ElementName=combo}" Value="false">Di2015NewLine                                        <Setter Property="Text" Value="{Binding MyText, ElementName=UI}" />Di2015NewLine                                    </DataTrigger>Di2015NewLine                                </Style.Triggers>Di2015NewLine                            </Style>Di2015NewLine                        </TextBlock.Style>Di2015NewLine                    </TextBlock>Di2015NewLine                </DataTemplate>Di2015NewLine            </ComboBox.ItemTemplate>Di2015NewLine        </ComboBox>Di2015NewLine    </StackPanel>Di2015NewLine
15513253Di2015UniqueSeparatorpublic partial class MainWindow : Window, INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private string _myText;Di2015NewLine    private ObservableCollection<string> _items = new ObservableCollection<string>();Di2015NewLineDi2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Items.Add("Item1");Di2015NewLine        Items.Add("Item2");Di2015NewLine        Items.Add("Item3");Di2015NewLine        Items.Add("Item4");Di2015NewLine        MyText = "StackOverflow";Di2015NewLine    }Di2015NewLineDi2015NewLine    public string MyTextDi2015NewLine    {Di2015NewLine        get { return _myText; }Di2015NewLine        set { _myText = value; OnPropertyChanged("MyText"); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public ObservableCollection<string> ItemsDi2015NewLine    {Di2015NewLine        get { return _items; }Di2015NewLine        set { _items = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    public void OnPropertyChanged(string e)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(e));Di2015NewLine    }Di2015NewLine}Di2015NewLine
15513257Di2015UniqueSeparatorvoid Method2(string file_name, byte[] file)Di2015NewLine{Di2015NewLine    var path = file_name;Di2015NewLine    int file_size_int = file.Length;Di2015NewLine    if (File.Exists(path))Di2015NewLine    {Di2015NewLine        File.Delete(path);Di2015NewLine    }Di2015NewLine    FileStream create = File.OpenWrite(path);Di2015NewLine    var attributes = File.GetAttributes(path);Di2015NewLine    File.SetAttributes(path, attributes | FileAttributes.Temporary);Di2015NewLine    create.Close();Di2015NewLine    Process p = Process.Start(path);Di2015NewLineDi2015NewLine    while (!p.HasExited)  Di2015NewLine    {Di2015NewLine        Thread.Sleep(100);  Di2015NewLine    }Di2015NewLineDi2015NewLine    File.Delete(path);Di2015NewLine}Di2015NewLine
15513257Di2015UniqueSeparatorFile.SetAttributes(@path, attributes | FileAttributes.ReadOnly|FileAttributes.Temporary);
15513257Di2015UniqueSeparatorFile.SetAttributes(@path, attributes | FileAttributes.Temporary);
15513365Di2015UniqueSeparatorOrmLiteAuthRepository
15513365Di2015UniqueSeparatorRedisAuthRepository
15513365Di2015UniqueSeparatorInMemoryAuthRepository
15513365Di2015UniqueSeparatorMongoDBAuthRepository
15513365Di2015UniqueSeparatorRavenUserAuthRepository
15513365Di2015UniqueSeparatorNHibernateUserAuthRepository
15513365Di2015UniqueSeparatorMemoryCacheClient
15513365Di2015UniqueSeparatorRedisClient
15513365Di2015UniqueSeparatorPooledRedisClientManager
15513365Di2015UniqueSeparatorBasicRedisClientManager
15513365Di2015UniqueSeparatorMemcachedClientCache
15513365Di2015UniqueSeparatorAzureCacheClient
15513365Di2015UniqueSeparatorvar appSettings = new AppSettings();Di2015NewLine
15513365Di2015UniqueSeparatorPlugins.Add(new AuthFeature(Di2015NewLine    () => new CustomUserSession(), //Use your own typed Custom UserSession typeDi2015NewLine    new IAuthProvider[] {Di2015NewLine        new CredentialsAuthProvider(),              //HTML Form post of UserName/Password credentialsDi2015NewLine        new TwitterAuthProvider(appSettings),       //Sign-in with TwitterDi2015NewLine        new FacebookAuthProvider(appSettings),      //Sign-in with FacebookDi2015NewLine        new DigestAuthProvider(appSettings),        //Sign-in with Digest AuthDi2015NewLine        new BasicAuthProvider(),                    //Sign-in with Basic AuthDi2015NewLine        new GoogleOpenIdOAuthProvider(appSettings), //Sign-in with Google OpenIdDi2015NewLine        new YahooOpenIdOAuthProvider(appSettings),  //Sign-in with Yahoo OpenIdDi2015NewLine        new OpenIdOAuthProvider(appSettings),       //Sign-in with Custom OpenIdDi2015NewLine    }));Di2015NewLine
15513365Di2015UniqueSeparatorPlugins.Add(new RegistrationFeature());Di2015NewLine
15513365Di2015UniqueSeparator//container.RegisterAs<CustomRegistrationValidator, IValidator<Registration>>();Di2015NewLine
15513365Di2015UniqueSeparatorvar connStr = appSettings.Get("SQLSERVER_CONNECTION_STRING", //AppHarbor or Local connection stringDi2015NewLine    ConfigUtils.GetConnectionString("UserAuth"));Di2015NewLinecontainer.Register<IDbConnectionFactory>(Di2015NewLine    new OrmLiteConnectionFactory(connStr, //ConnectionString in Web.ConfigDi2015NewLine        SqlServerOrmLiteDialectProvider.Instance) {Di2015NewLine            ConnectionFilter = x => new ProfiledDbConnection(x, Profiler.Current)Di2015NewLine        });Di2015NewLine
15513365Di2015UniqueSeparatorIUserAuthRepository
15513365Di2015UniqueSeparator//Use OrmLite DB Connection to persist the UserAuth and AuthProvider infoDi2015NewLinecontainer.Register<IUserAuthRepository>(c =>Di2015NewLine    new OrmLiteAuthRepository(c.Resolve<IDbConnectionFactory>())); Di2015NewLine
15513365Di2015UniqueSeparator//Drop and re-create all Auth and registration tablesDi2015NewLinevar authRepo = (OrmLiteAuthRepository)container.Resolve<IUserAuthRepository>();Di2015NewLineif (appSettings.Get("RecreateAuthTables", false))Di2015NewLine    authRepo.DropAndReCreateTables(); Di2015NewLineelseDi2015NewLine    authRepo.CreateMissingTables(); //Create only the missing tablesDi2015NewLine
15513650Di2015UniqueSeparator  <log4net>Di2015NewLine    <appender name="Console" type="log4net.Appender.ConsoleAppender">Di2015NewLine      <threshold value="ERROR"/>Di2015NewLine      <layout type="log4net.Layout.PatternLayout">Di2015NewLine        <!-- Pattern to output the caller's file name and line number -->Di2015NewLine        <conversionPattern value="%5level [%thread] (%file:%line) - %message%newline" />Di2015NewLine      </layout>Di2015NewLine    </appender>Di2015NewLine    <appender name="File" type="log4net.Appender.FileAppender">Di2015NewLine      <threshold value="DEBUG"/>Di2015NewLine      <file value="test.log" />Di2015NewLine      <appendToFile value="false" />Di2015NewLine      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />Di2015NewLine      <layout type="log4net.Layout.PatternLayout">Di2015NewLine        <conversionPattern value="%5level [%thread] (%file:%line) - %message%newline" />Di2015NewLine      </layout>Di2015NewLine    </appender>Di2015NewLineDi2015NewLine    <root>Di2015NewLine      <appender-ref ref="Console" />Di2015NewLine      <appender-ref ref="File" />Di2015NewLine    </root>Di2015NewLine  </log4net>Di2015NewLine
15513717Di2015UniqueSeparatorprivate static void PeriodicWait() {Di2015NewLine    Stopwatch stopwatch = new Stopwatch();Di2015NewLineDi2015NewLine    while (true) {Di2015NewLine        stopwatch.Restart();Di2015NewLine        _handle.Reset();Di2015NewLine        bool result = _handle.WaitOne(5000);Di2015NewLine        stopwatch.Stop();Di2015NewLine        Console.WriteLine("After WaitOne: {0}. Waited for {1}ms", result ? "success" : "failure",Di2015NewLine                            stopwatch.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void PeriodicSignal() {Di2015NewLine    while (true) {Di2015NewLine        _handle.Set();Di2015NewLine        Thread.Sleep(800);   // Simulate workDi2015NewLine    }Di2015NewLine}Di2015NewLine
15513789Di2015UniqueSeparatorstring.Format()
15513789Di2015UniqueSeparatorsqlDS_ItemTable.SelectCommand = string.Format("Select tblOrders.OrderId, tblItem.ItemName, tblOrders.DateOrdered from tblItem, tblOrders where tblItem.ItemId = tblOrders.ItemId AND tblOrders.AuthId = {0}", SessionAuthId);Di2015NewLine
15513789Di2015UniqueSeparatorprivate void DataCall(string SessionAuthId)Di2015NewLine{Di2015NewLine    // your method here...Di2015NewLine}Di2015NewLine
15513834Di2015UniqueSeparatorpublic EKCalendar (IntPtr handle);Di2015NewLinepublic EKCalendar (NSObjectFlag t);Di2015NewLinepublic EKCalendar (NSCoder coder);Di2015NewLine
15513834Di2015UniqueSeparatorEKCalendar.Create
15513834Di2015UniqueSeparatorEKEntityType
15513834Di2015UniqueSeparatorEvent
15513834Di2015UniqueSeparatorReminder
15513834Di2015UniqueSeparatorEKEventStore
15513836Di2015UniqueSeparatorstring[] elements = getXPath(textNode).Split(new char[1] { '/' });Di2015NewLinereturn String.Join("/", elements, 0, elements.Length-2);Di2015NewLine
15513861Di2015UniqueSeparator/// <summary>Di2015NewLine/// general explanation for TempAngleDi2015NewLine/// </summary>    Di2015NewLinedouble TempAngle = 1;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// general explanation for AngleCountDown Di2015NewLine/// </summary>Di2015NewLinedouble AngleCountDown = HalfSight;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// general explanation for sightanglefromcopterDi2015NewLine/// </summary>Di2015NewLinedouble SightAngleFromCopter = 0;Di2015NewLine
15513887Di2015UniqueSeparatorbreak
15513887Di2015UniqueSeparatorpublic void Do(string workGif)Di2015NewLine{Di2015NewLine    // ...Di2015NewLine    string qrInfo;Di2015NewLine    using (var fullImg = new Bitmap(workGif))Di2015NewLine    {Di2015NewLine        for (int i = 0; i < 4; i++)Di2015NewLine        {Di2015NewLine            // Does the image contain a QR code?Di2015NewLine            qrInfo = Process(fullImg);Di2015NewLine            if (qrInfo = null)Di2015NewLine                // No QR code found. Rotate the image.Di2015NewLine                fullImg.RotateFlip(RotateFlipType.Rotate90FlipNone);Di2015NewLine            elseDi2015NewLine                // QR code found. Break out of the loop.Di2015NewLine                break;Di2015NewLine        }Di2015NewLine        if (qrInfo == null)Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException(Di2015NewLine                "The document contains no QR code.");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    MessageBox.Show(qrInfo);Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
15513887Di2015UniqueSeparatorProcess
15513887Di2015UniqueSeparatorprivate Image GetCornerImage(Image sourceImage)Di2015NewLine{Di2015NewLine    return sourceImage.Clone(new Rectangle(0, 0, 375, 375), sourceImage.PixelFormat);Di2015NewLine}Di2015NewLineDi2015NewLinepublic string Process(Bitmap bitmap)Di2015NewLine{Di2015NewLine    var cornerImg = GetCornerImage(bitmap);Di2015NewLineDi2015NewLine    var reader = new com.google.zxing.qrcode.QRCodeReader();Di2015NewLine    LuminanceSource source = new RGBLuminanceSource(Di2015NewLine        cornerImg, cornerImg.Width, cornerImg.Height);Di2015NewLine    var binarizer = new HybridBinarizer(source);Di2015NewLine    var binBitmap = new BinaryBitmap(binarizer);Di2015NewLine    return reader.decode(binBitmap).Text;Di2015NewLine}Di2015NewLine
15514024Di2015UniqueSeparatord3.json("tryusa.json", function (json) { Di2015NewLine    uk.selectAll("path")Di2015NewLine    .data(json.features) Di2015NewLine    .enter().Di2015NewLine    .append("svg:path")Di2015NewLine    .attr("d", path)Di2015NewLine    .attr("Response.Redirect", "Default.aspx")Di2015NewLine    .append("svg:title")Di2015NewLine    .text(function (d) { return d.properties.name; })Di2015NewLine    .on("click", function () { window.open("Default3.aspx") }) Di2015NewLine});Di2015NewLine
15514024Di2015UniqueSeparatoron
15514024Di2015UniqueSeparatorsvg:title
15514024Di2015UniqueSeparatoron
15514024Di2015UniqueSeparatord3.json("tryusa.json", function (json) { Di2015NewLine    uk.selectAll("path")Di2015NewLine    .data(json.features) Di2015NewLine    .enter().Di2015NewLine    .append("svg:path")Di2015NewLine    .attr("d", path)Di2015NewLine    .attr("Response.Redirect", "Default.aspx")Di2015NewLine    .on("click", function () { window.open("Default3.aspx") })Di2015NewLine    .append("svg:title")Di2015NewLine    .text(function (d) { return d.properties.name; }) Di2015NewLine});Di2015NewLine
15514024Di2015UniqueSeparatorappend
15514044Di2015UniqueSeparatorSystem.Windows.Media.MediaPlayer
15514044Di2015UniqueSeparatorWindowsBase
15514044Di2015UniqueSeparatorPresentationCore
15514044Di2015UniqueSeparatorprivate void pictureBox20_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    const bool loopPlayer = true;Di2015NewLine    if (label30.Text == "Waiting 15.wav")Di2015NewLine    {Di2015NewLine        MessageBox.Show("No beat loaded");Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    var player = new System.Windows.Media.MediaPlayer();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        player.Open(new Uri(label51.Text));Di2015NewLine        if(loopPlayer)Di2015NewLine            player.MediaEnded += MediaPlayer_Loop;Di2015NewLine        player.Play();Di2015NewLine    }Di2015NewLine    catch (FileNotFoundException)Di2015NewLine    {Di2015NewLine        MessageBox.Show("File has been moved." + "\\n" + "Please relocate it now!");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15514044Di2015UniqueSeparatorMediaEnded
15514044Di2015UniqueSeparatorvoid MediaPlayer_Loop(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    MediaPlayer player = sender as MediaPlayer;Di2015NewLine    if (player == null)Di2015NewLine        return;Di2015NewLineDi2015NewLine    player.Position = new TimeSpan(0);Di2015NewLine    player.Play();Di2015NewLine}Di2015NewLine
15514237Di2015UniqueSeparatorPaint
15514237Di2015UniqueSeparatorOnPaint
15514237Di2015UniqueSeparatorPaint
15514237Di2015UniqueSeparatorGraphics
15514237Di2015UniqueSeparatorImage
15514237Di2015UniqueSeparatorImage image = /* ... */;Di2015NewLineusing (Graphics g = Graphics.FromImage(image))Di2015NewLine{Di2015NewLine    g.DrawLine(myPen, pointA, pointB);Di2015NewLine}Di2015NewLinepicture1.Image = image;Di2015NewLine
15514237Di2015UniqueSeparatorGetPixel
15514237Di2015UniqueSeparatorImage
15514529Di2015UniqueSeparatordouble
15514529Di2015UniqueSeparator0
15514529Di2015UniqueSeparator1
15514529Di2015UniqueSeparator0
15514529Di2015UniqueSeparator100
15514529Di2015UniqueSeparatornormalise
15514529Di2015UniqueSeparator0-1
15514529Di2015UniqueSeparatordouble progress = 0.0;Di2015NewLinedouble max = 100.0;Di2015NewLineDi2015NewLineprogress = 0.0/max;  // = 0.0Di2015NewLinepi.Value = progress;Di2015NewLineDi2015NewLineprogress = 50.0/max; // = 0.5Di2015NewLinepi.Value = progress;Di2015NewLineDi2015NewLineprogress = 100.0/max; // = 1.0Di2015NewLinepi.Value = progress;Di2015NewLine
15514529Di2015UniqueSeparator0 and 1
15514568Di2015UniqueSeparatorprivate static List<string[]> DivideStrings(int expectedStringsPerArray, string[] allStrings)Di2015NewLine{Di2015NewLine    List<string[]> arrays = new List<string[]>();Di2015NewLineDi2015NewLine    int arrayCount = allStrings.Length / expectedStringsPerArray;Di2015NewLineDi2015NewLine    int elemsRemaining = allStrings.Length;Di2015NewLine    for (int arrsRemaining = arrayCount; arrsRemaining >= 1; arrsRemaining--)Di2015NewLine    {Di2015NewLine        int elementCount = elemsRemaining / arrsRemaining;Di2015NewLineDi2015NewLine        string[] array = CopyPart(allStrings, elemsRemaining - elementCount, elementCount);Di2015NewLine        arrays.Insert(0, array);Di2015NewLineDi2015NewLine        elemsRemaining -= elementCount;Di2015NewLine    }Di2015NewLineDi2015NewLine    return arrays;Di2015NewLine}Di2015NewLine
15514568Di2015UniqueSeparatorprivate static T[] CopyPart<T>(T[] array, int index, int length)Di2015NewLine{Di2015NewLine    T[] newArray = new T[length];Di2015NewLine    Array.Copy(array, index, newArray, 0, length);Di2015NewLine    return newArray;Di2015NewLine}Di2015NewLine
15514568Di2015UniqueSeparatorconst int count = 23;Di2015NewLineconst int estimate = 7;Di2015NewLinestring[] strings = Enumerable.Range(1, count).Select(s => s.ToString()).ToArray();Di2015NewLinevar list = DivideStrings(estimate, strings);Di2015NewLineforeach (var arr in list)Di2015NewLine    Console.WriteLine(String.Join(" ", arr));Di2015NewLine
15514733Di2015UniqueSeparatorSave(...)
15514733Di2015UniqueSeparatorFileStream
15514733Di2015UniqueSeparatorSave
15514733Di2015UniqueSeparatorusing (var fStream = new FileStream(Path.Combine(userDir, "iconName.ico"), FileMode.OpenOrCreate, FileAccess.Write))Di2015NewLine{Di2015NewLine    Properties.Resources.iconName.Save(fStream);Di2015NewLine}Di2015NewLine
15514775Di2015UniqueSeparatorChart
15514775Di2015UniqueSeparatorList<Chart> charts = new List<Chart>();Di2015NewLine
15514775Di2015UniqueSeparatorcharts.Add(new Chart());Di2015NewLine
15514775Di2015UniqueSeparatorfor (int i = 0; i < charts.Count; i++)Di2015NewLine{Di2015NewLine    charts[i].Series.Clear();Di2015NewLine}Di2015NewLine
15514775Di2015UniqueSeparatorcharts
15514775Di2015UniqueSeparatorList<Chart> charts = new List<Charts>()Di2015NewLine{Di2015NewLine    new Chart(),Di2015NewLine    new Chart(),Di2015NewLine    existingChart1,Di2015NewLine    existingChart2Di2015NewLine};Di2015NewLine
15514775Di2015UniqueSeparatorChart[] arrayOfCharts = new []Di2015NewLine{Di2015NewLine    new Chart(),Di2015NewLine    new Chart(),Di2015NewLine    existingChart1,Di2015NewLine    existingChart2Di2015NewLine};Di2015NewLine
15514775Di2015UniqueSeparatorAddRange
15514775Di2015UniqueSeparatorcharts.AddRange(arrayOfCharts);Di2015NewLine
15514775Di2015UniqueSeparatorAdd
15515002Di2015UniqueSeparator    public void DijkstraAlgorithm(List<Node> graph)Di2015NewLine    {Di2015NewLineDi2015NewLine        List<DA> _algorithmList = new List<DA>(); //track the node cost/positioningDi2015NewLine        DA _nodeToExamine = new DA(); //this is the node we're currently looking at.Di2015NewLine        bool flag = true; //for exting the while loop laterDi2015NewLineDi2015NewLine        foreach (var node in graph)Di2015NewLine        {Di2015NewLine            _algorithmList.Add(new DA(node));Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var children in _algorithmList[0].Name.Neighbors) //just starting at the first nodeDi2015NewLine        {Di2015NewLine            for (int i = 0; i < _algorithmList.Count; i++)Di2015NewLine            {Di2015NewLine                if (children.Name == _algorithmList[i].Name)Di2015NewLine                {Di2015NewLine                    _algorithmList[i].Parent = _algorithmList[0].Name;Di2015NewLine                    _algorithmList[i].Cost = children.Miles;Di2015NewLine                    _algorithmList[0].Complete = true;Di2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        while (flag) //loop through the rest to organizeDi2015NewLine        {Di2015NewLine            _algorithmList = _algorithmList.OrderBy(x => x.Cost).ToList(); //sort by shortest pathDi2015NewLineDi2015NewLine            for (int i = 0; i < _algorithmList.Count; i++) //loop through each looking for a node that isn't completeDi2015NewLine            {Di2015NewLine                if (_algorithmList[i].Complete == false)Di2015NewLine                {Di2015NewLine                    _nodeToExamine = _algorithmList[i];Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                if (i == 13) //if the counter reaches 13 then we have completed all nodes and should bail out of the loopDi2015NewLine                    flag = false;Di2015NewLine            }Di2015NewLine            if (_nodeToExamine.Name.Neighbors.Count == 0) //set any nodes that do not have children to be completeDi2015NewLine            {Di2015NewLine                _nodeToExamine.Complete = true;Di2015NewLine            }Di2015NewLineDi2015NewLine            foreach (var children in _nodeToExamine.Name.Neighbors) //loop through the children/neighbors to see if there's one with a shorter pathDi2015NewLine            {Di2015NewLine                for (int i = 0; i < _algorithmList.Count; i++) Di2015NewLine                {Di2015NewLine                    if (children.Name == _algorithmList[i].Name)Di2015NewLine                    {Di2015NewLine                        if (_nodeToExamine.Cost + children.Miles < _algorithmList[i].Cost) //found a better pathDi2015NewLine                        {Di2015NewLine                            _algorithmList[i].Parent = _nodeToExamine.Name;Di2015NewLine                            _algorithmList[i].Cost = _nodeToExamine.Cost + children.Miles;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                _nodeToExamine.Complete = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        PrintDijkstraAlgoirthm(_algorithmList);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public void PrintDijkstraAlgoirthm(List<DA> _finalList)Di2015NewLine    {Di2015NewLine        foreach (var item in _finalList)Di2015NewLine        {Di2015NewLine           if (item.Parent != null)Di2015NewLine                Console.WriteLine("{0} ---> {1}: {2}", item.Parent.Name, item.Name.Name, item.Cost);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15515078Di2015UniqueSeparatorpublic class UserDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public int? GroupId { get; set; }Di2015NewLine    [InverseProperty("Users")]Di2015NewLine    public virtual Group group { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class GroupDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public int? OwnerId { get; set; }Di2015NewLine    public User Owner { get; set; }Di2015NewLine    public virtual ICollection<User> Users { get; set; } Di2015NewLine}Di2015NewLine
15515204Di2015UniqueSeparatorvar c = (Excel.IconSetCondition)excelWorksheet.get_Range(cell).FormatConditions.AddIconSetCondition();Di2015NewLinec.SetFirstPriority();Di2015NewLinec.ShowIconOnly = false;Di2015NewLinec.IconSet = book.IconSets[Excel.XlIconSet.xl3TrafficLights2];Di2015NewLinevar yellowIcon = c.IconCriteria[2];Di2015NewLineyellowIcon.Type = Excel.XlConditionValueTypes.xlConditionValueNumber;Di2015NewLineyellowIcon.Value = Convert.ToDouble(yellow);Di2015NewLineyellowIcon.Operator = (int)Excel.XlFormatConditionOperator.xlGreaterEqual;Di2015NewLineDi2015NewLinevar greenIcon = c.IconCriteria[3];Di2015NewLinegreenIcon.Type = Excel.XlConditionValueTypes.xlConditionValueNumber;Di2015NewLinegreenIcon.Value = Convert.ToDouble(green);Di2015NewLinegreenIcon.Operator = (int)Excel.XlFormatConditionOperator.xlGreaterEqual;Di2015NewLine
15515426Di2015UniqueSeparatorTask
15515426Di2015UniqueSeparatorBeginInvoke
15515426Di2015UniqueSeparatorThreadPool.SetMinThreads(50, 0);
15515426Di2015UniqueSeparatorbtnGo_Click
15515702Di2015UniqueSeparatorUnsafeNativeMethods
15515813Di2015UniqueSeparatorlog-on as NetworkService
15515813Di2015UniqueSeparatorconnectionString
15515813Di2015UniqueSeparator<connectionStrings><add name="myEntities" Di2015NewLine                        connectionString="metadata=res://*/myDbase.csdlDi2015NewLine                        |res://*/myDbase.ssdl|res://*/myDbase.msl;provider=System.Data.SqlClient;Di2015NewLine                        provider connection string="data source=PCName\\SQLEXPRESS;Di2015NewLine                        initial catalog=myDbase;user id=myusername;password=2143;MultipleActiveResultSets=True;integrated security=true;App=EntityFramework"" Di2015NewLine                        providerName="System.Data.EntityClient" />Di2015NewLine</connectionStrings>Di2015NewLine
15515836Di2015UniqueSeparator<?phpDi2015NewLineset_include_path(get_include_path() . PATH_SEPARATOR ."lib");Di2015NewLineinclude('File/X509.php');Di2015NewLineDi2015NewLine$p12cert = array();Di2015NewLine$fp=fopen("cert/netclient.p12","r");Di2015NewLine$priv_key=fread($fp,8192);Di2015NewLinefclose($fp);Di2015NewLineopenssl_pkcs12_read($priv_key, $p12cert, "abcdefg");Di2015NewLineDi2015NewLine$x509 = new File_X509();Di2015NewLine$x509->loadX509($p12cert["cert"]);Di2015NewLine$pubkey = $x509->getPublicKey();Di2015NewLine$pubkey->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);Di2015NewLine$verified_phpseclib = $pubkey->verify($hash_request, base64_decode(req("signature"))) ? "verified" : "diff";Di2015NewLine
15516433Di2015UniqueSeparatorRoles.AddUserToRole(userName, roleName);Di2015NewLine
15516433Di2015UniqueSeparatorRoles.RemoveUserFromRole(userName, roleName);Di2015NewLine
15516852Di2015UniqueSeparatorcreate table dbo.SD_ShippingDetailsDi2015NewLine(Di2015NewLine  ID int identity primary key,Di2015NewLine  ShippingID int not null,Di2015NewLine  Weight varchar(20) not null,Di2015NewLine  Height varchar(20),Di2015NewLine  TotalBoxes varchar(20),Di2015NewLine  Price numeric(18,2),Di2015NewLine  unique (ShippingID, Weight)Di2015NewLine);Di2015NewLine
15516852Di2015UniqueSeparatorcreate procedure dbo.SD_Insert_ShippingDetailsDi2015NewLine  @PBMXML as xmlDi2015NewLineasDi2015NewLineDi2015NewLineupdate dbo.SD_ShippingDetails Di2015NewLineset Height = T.N.value('(Height/text())[1]', 'varchar(20)'),Di2015NewLine    TotalBoxes = T.N.value('(TotalBoxes/text())[1]', 'varchar(20)'),Di2015NewLine    Price = T.N.value('(Price/text())[1]', 'numeric(18,2)')Di2015NewLinefrom @PBMXML.nodes('Root/ShippingBox') as T(N)Di2015NewLinewhere ShippingID = T.N.value('(ShippingID/text())[1]', 'int') andDi2015NewLine      Weight = T.N.value('(Weight/text())[1]', 'varchar(20)');Di2015NewLineDi2015NewLineinsert into dbo.SD_ShippingDetails(ShippingID, Weight, Height, TotalBoxes, Price)Di2015NewLineselect T.N.value('(ShippingID/text())[1]', 'int'),Di2015NewLine       T.N.value('(Weight/text())[1]', 'varchar(20)'),Di2015NewLine       T.N.value('(Height/text())[1]', 'varchar(20)'),Di2015NewLine       T.N.value('(TotalBoxes/text())[1]', 'varchar(20)'),Di2015NewLine       T.N.value('(Price/text())[1]', 'numeric(18,2)')Di2015NewLinefrom @PBMXML.nodes('Root/ShippingBox') as T(N)Di2015NewLinewhere not exists (Di2015NewLine                 select *Di2015NewLine                 from dbo.SD_ShippingDetailsDi2015NewLine                 where ShippingID = T.N.value('(ShippingID/text())[1]', 'int') andDi2015NewLine                       Weight = T.N.value('(Weight/text())[1]', 'varchar(20)')Di2015NewLine                 );Di2015NewLine
15516929Di2015UniqueSeparator|
15516929Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    public static Foo operator |(Foo left, Foo right) Di2015NewLine    {Di2015NewLine       return new Foo(...);Di2015NewLine    }Di2015NewLineDi2015NewLine    // some more examplesDi2015NewLine    public static Foo operator |(Foo left, SomeEnum right) Di2015NewLine    {Di2015NewLine       return new Foo(...);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Foo operator |(Foo left, int right) Di2015NewLine    {Di2015NewLine       return new Foo(...);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15516929Di2015UniqueSeparatorFoo test = new Foo();Di2015NewLineFoo res = test | SomeEnum.EnumValue | someInt;Di2015NewLine
15516929Di2015UniqueSeparatorres |= SomeEnum.EnumValueDi2015NewLine
15516932Di2015UniqueSeparator        <TextBlock x:Name="tbref" Visibility="Collapsed"/>Di2015NewLine        <RichTextBox >Di2015NewLine            <RichTextBox.Template>Di2015NewLine                <ControlTemplate>Di2015NewLine                    <StackPanel Orientation="Horizontal">Di2015NewLine                        <HyperlinkButton  x:Name="txtnam" Content="{Binding  Text,ElementName=tbref}" HorizontalAlignment="Left" VerticalAlignment="Center" />Di2015NewLine                        <TextBox  Width="200"/>Di2015NewLine                    </StackPanel>Di2015NewLine                </ControlTemplate>Di2015NewLine            </RichTextBox.Template>Di2015NewLine        </RichTextBox>Di2015NewLine
15516932Di2015UniqueSeparator        private void lst_SelectionChanged_1(object sender, SelectionChangedEventArgs e)Di2015NewLine        {Di2015NewLine         var selectedString = lst.SelectedItem;Di2015NewLine         tbref.Text = selectedString.ToString(); Di2015NewLine        }Di2015NewLine
15516980Di2015UniqueSeparatorvar statusDetails = xDoc.XPathSelectElements(@"Status/StatusMsg/StatusDetail/Sequence[text()=2]/../Message");Di2015NewLine
15516980Di2015UniqueSeparatortext()
15516980Di2015UniqueSeparator/..
15516980Di2015UniqueSeparatorToList()
15516980Di2015UniqueSeparatorSingleOrDefault
15516980Di2015UniqueSeparatorXElement
15516980Di2015UniqueSeparatorvar results = from sd in xDoc.Root.Elements("StatusMsg").Elements("StatusDetail")Di2015NewLine              let s = sd.Element("Sequence")Di2015NewLine              where s != null && ((string)s).Trim() == "2"Di2015NewLine              select (string)sd.Element("Message");Di2015NewLine
15516980Di2015UniqueSeparatorresults = xDoc.Root.Elements("StatusMsg").Elements("StatusDetail")Di2015NewLine              .Select(sd => new { sd, s = sd.Element("Sequence") })Di2015NewLine              .Where(x => x.s != null && ((string)x.s).Trim() == "2")Di2015NewLine              .Select(x => (string)x.sd.Element("Message"))Di2015NewLine
15516980Di2015UniqueSeparator.Where(x => x != null)
15516980Di2015UniqueSeparatornull
15516980Di2015UniqueSeparatorStatusDetail
15516980Di2015UniqueSeparatorSeqience == 2
15516980Di2015UniqueSeparatorMessage
15517100Di2015UniqueSeparatorOpenGL
15517100Di2015UniqueSeparatorDirectX
15517100Di2015UniqueSeparatorAlt+Tab
15517199Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="identity"></param>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static async Task<IStorageFile> FileFromPicker(string identity)Di2015NewLine    {Di2015NewLine        FileOpenPicker picker = new FileOpenPicker();Di2015NewLineDi2015NewLine        setFileTypes(picker);Di2015NewLineDi2015NewLine        picker.SuggestedStartLocation = PickerLocationId.PicturesLibrary;Di2015NewLine        picker.ViewMode = PickerViewMode.Thumbnail;Di2015NewLine        picker.SettingsIdentifier = identity;Di2015NewLineDi2015NewLine        var storageFile = await picker.PickSingleFileAsync();Di2015NewLineDi2015NewLine        return storageFile;Di2015NewLine    }Di2015NewLine
15517412Di2015UniqueSeparatorprivate void AddGrids()Di2015NewLine{Di2015NewLine    for (int i = 0; i < 10; i++)Di2015NewLine    {Di2015NewLine        Grid grid = new GridDi2015NewLine        {Di2015NewLine            HorizontalAlignment = HorizontalAlignment.Left,Di2015NewLine            VerticalAlignment = VerticalAlignment.Top,Di2015NewLine            Height = 100,Di2015NewLine            Width = 100,Di2015NewLine            Background = new SolidColorBrush(Color.FromArgb(255, 245, 245, 220)),Di2015NewLine            Margin = new Thickness("margin calculated by your algorithm")Di2015NewLine        };Di2015NewLine        LayoutRoot.Children.Add(grid);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15517489Di2015UniqueSeparatorTreeNode
15517489Di2015UniqueSeparatorEnabled
15517489Di2015UniqueSeparatorTriStateTreeView
15517489Di2015UniqueSeparatorcase 0: CheckBoxRenderer.DrawCheckBox(chkGraphics, new Point(0, 1), CheckBoxState.UncheckedNormal);Di2015NewLinebreak;Di2015NewLinecase 1: CheckBoxRenderer.DrawCheckBox(chkGraphics, new Point(0, 1), CheckBoxState.CheckedNormal);Di2015NewLinebreak;Di2015NewLinecase 2: CheckBoxRenderer.DrawCheckBox(chkGraphics, new Point(0, 1), CheckBoxState.MixedNormal);Di2015NewLinebreak;Di2015NewLine
15517489Di2015UniqueSeparatorStateImageList
15517489Di2015UniqueSeparatorSystem.Windows.Forms.VisualStyles
15517489Di2015UniqueSeparatorCheckBoxState.UncheckedDisabled
15517489Di2015UniqueSeparatorCheckBoxState.CheckedDisabled
15517489Di2015UniqueSeparatorCheckBoxState.MixedDisabled
15517489Di2015UniqueSeparatorCheckedDisabled
15517489Di2015UniqueSeparatorStateImageIndex
15517489Di2015UniqueSeparatorTreeNode
15517489Di2015UniqueSeparatormyNode.StateImageIndex = (int)CheckedState.CheckedDisabled;
15517489Di2015UniqueSeparatorTriStateTreeView
15517489Di2015UniqueSeparatorWindows.Forms.TreeView
15517489Di2015UniqueSeparatorif(e.Node.StateImageIndex == (int)CheckedState.CheckedDisabled || ... ) return;
15517521Di2015UniqueSeparatorstring strQuery = EncodePasswordToBase64("insert ....Di2015NewLine
15517521Di2015UniqueSeparatorstring strQuery = "insert into admin( USERNAME,PASSWORD) values('" + txtUserName.Text + Di2015NewLine                   "','" +  EncodePasswordToBase64(txtPassword.Text) + "')");Di2015NewLine
15517521Di2015UniqueSeparatorstring strQuery = "insert into admin( USERNAME,PASSWORD) values(@pUserName, @pPassword)";Di2015NewLineSqlCommand cmd = new SqlCommand(strQuery);Di2015NewLinecmd.Parameters.AddWithValue("@pUserName", txtUserName.Text");Di2015NewLinecmd.Parameters.AddWithValue("@pPassword", EncodePasswordToBase64(txtPassword.Text))Di2015NewLine
15517544Di2015UniqueSeparatorIEnumerable.ToList()
15517544Di2015UniqueSeparatorIEnumerable<T>.ToList()
15517544Di2015UniqueSeparatorToList()
15517544Di2015UniqueSeparatorList(IEnumerable<T> collection)
15517544Di2015UniqueSeparatorIEnumerable<T>
15517544Di2015UniqueSeparatorT[]
15517544Di2015UniqueSeparatorAs
15517544Di2015UniqueSeparatorTo
15517544Di2015UniqueSeparatorAs
15517544Di2015UniqueSeparatorAsEnumerable()
15517544Di2015UniqueSeparatorTo
15517544Di2015UniqueSeparatorToList()
15517544Di2015UniqueSeparatorTo
15517544Di2015UniqueSeparatorAs
15517544Di2015UniqueSeparatorList<T>
15517544Di2015UniqueSeparatorList<T>
15517544Di2015UniqueSeparatorList<T>
15517544Di2015UniqueSeparatorCapacity
15517544Di2015UniqueSeparatorCount
15517544Di2015UniqueSeparatorList<T>
15517544Di2015UniqueSeparatorCapacity
15517544Di2015UniqueSeparatorCount
15517544Di2015UniqueSeparatorList<T>
15517544Di2015UniqueSeparator<= Capacity
15517544Di2015UniqueSeparatorCapacity
15517544Di2015UniqueSeparatorList<T>
15517659Di2015UniqueSeparatorwhere
15517659Di2015UniqueSeparatorSelect
15517659Di2015UniqueSeparatorvar results = db.EmpQualificationsDi2015NewLine                   .Where(r=> r.EMPLOYEE_ID == 10)Di2015NewLine                   .Select(EmpQu => Di2015NewLine                             new {Di2015NewLine                                 EMP_QUALI_ID = EmpQu.EMP_QUALI_ID,Di2015NewLine                                 EMPLOYEE_ID = EmpQu.EMPLOYEE_ID, Di2015NewLine                                 })Di2015NewLine                   .OrderBy(D => D.EMP_QUALI_ID);Di2015NewLine
15517705Di2015UniqueSeparator        System.Data.OleDb.OleDbConnection mCon;  Di2015NewLine        mCon = new System.Data.OleDb.OleDbConnection();Di2015NewLine        mCon.ConnectionString = ("Provider=Microsoft.ACE.OLEDB.12.0;data source=" + pathOfFile + ";Extended Properties=\\"Excel 12.0;HDR=YES\\";");Di2015NewLine        System.Data.OleDb.OleDbCommand Command = new System.Data.OleDb.OleDbCommand();Di2015NewLine        DataTable DTable = new DataTable();            Di2015NewLine        string strSelectQuery, mstrDBTable;Di2015NewLine        System.Data.OleDb.OleDbDataAdapter DataAdapter = new System.Data.OleDb.OleDbDataAdapter();            Di2015NewLineDi2015NewLine        strSelectQuery = "SELECT * FROM [" + YourSheetName + "]"; Di2015NewLine      // YourSheetName is the sheet in xls from where you want to load data e.g Sheet1$Di2015NewLine        if (mCon.State == ConnectionState.Closed)Di2015NewLine        {Di2015NewLine            mCon.Open();Di2015NewLine        }Di2015NewLine        DataAdapter = new System.Data.OleDb.OleDbDataAdapter(strSelectQuery, mCon);Di2015NewLine        DataAdapter.Fill(DTable );Di2015NewLine        mCon.Close();Di2015NewLine
15517705Di2015UniqueSeparatorfor(int i = 0; i<Dtable.Rows.Count;i++)Di2015NewLine{Di2015NewLine    string str = Dtable.Rows[i][1].ToString();Di2015NewLine    string YourNumber = str.Substring((str.IndexOf('=') + 1), (str.IndexOf('%') - str.IndexOf('=')-1));Di2015NewLine}Di2015NewLine
15517825Di2015UniqueSeparator// controllerDi2015NewLineActionResult MyAction()Di2015NewLine{Di2015NewLine    if (!User.Identity.IsAuthenticated)Di2015NewLine    {Di2015NewLine        ViewBag.MenuControl = "Menu/NotLoggedIn"Di2015NewLine    } Di2015NewLine    else if (User.IsInRole("Administrator"))Di2015NewLine    {Di2015NewLine        ViewBag.MenuControl = "Menu/Administrator"Di2015NewLine    } Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        ViewBag.MenuControl = "Menu/LoggedIn"Di2015NewLine    }Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLine// viewDi2015NewLine@Html.Partial(ViewBag.MenuControl);Di2015NewLine
15517825Di2015UniqueSeparatorActionResult RenderMenu()Di2015NewLine{Di2015NewLine    string template;Di2015NewLine    if (!User.Identity.IsAuthenticated)Di2015NewLine    {Di2015NewLine        template = "Menu/NotLoggedIn"Di2015NewLine    } Di2015NewLine    else if (User.IsInRole("Administrator"))Di2015NewLine    {Di2015NewLine        template = "Menu/Administrator"Di2015NewLine    } Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        template = "Menu/LoggedIn"Di2015NewLine    }Di2015NewLineDi2015NewLine    return View(template);Di2015NewLine}Di2015NewLineDi2015NewLine// viewDi2015NewLine@Html.Action("RenderMenu", "MenuController")Di2015NewLine
15518003Di2015UniqueSeparatorLINQ
15518003Di2015UniqueSeparatorList<OrderTime> _orders = new List<OrderTime>();Di2015NewLine// _orders.Add(...);Di2015NewLinevar _result = _orders.OrderBy(x  => x.StarTime);Di2015NewLine
15518052Di2015UniqueSeparator0.123
15518052Di2015UniqueSeparator0
15518052Di2015UniqueSeparator1 + 1
15518052Di2015UniqueSeparator2
15518052Di2015UniqueSeparator2.0
15518052Di2015UniqueSeparator3 / 2
15518052Di2015UniqueSeparator1
15518052Di2015UniqueSeparator1.5
15518052Di2015UniqueSeparator/=
15518052Di2015UniqueSeparator// eitherDi2015NewLineif (123.0 / 1000 > 0)Di2015NewLine// orDi2015NewLineif (123 / 1000.0 > 0)Di2015NewLine// orDi2015NewLineif (123.0 / 1000.0 > 0)Di2015NewLine
15518052Di2015UniqueSeparator.0
15518052Di2015UniqueSeparatorif ((double)a / b > 0)Di2015NewLine
15518068Di2015UniqueSeparatorComboBox
15518068Di2015UniqueSeparatorSelectedIndexChanged/SelectedValueChanged
15518068Di2015UniqueSeparatorprivate void comboBox1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var comboBox = sender as ComboBox;Di2015NewLine    if (comboBox.SelectedItem != null)Di2015NewLine    {Di2015NewLine        string selectedItem = comboBox.SelectedItem.ToString();Di2015NewLine        comboBox.Items = myDataSource.Where(x => x.StartsWith(selectedItem.Substring(0, 2))Di2015NewLine                                              && x.Length.Equals(selectedItem.Length));Di2015NewLine    }Di2015NewLine}Di2015NewLine
15518150Di2015UniqueSeparatorint number  = 10;Di2015NewLineint[] intArray = new[] { 1, 32, 10, 5, 65, 6, 10, 10 };Di2015NewLinevar allIndexes = intArray.Select((r,i)=> new {value = r, index = i})Di2015NewLine                         .Where(r=> r.value == number)Di2015NewLine                         .Select(r=> r.index);Di2015NewLine
15518150Di2015UniqueSeparatorallIndexes
15518150Di2015UniqueSeparator2,6 and 7
15518281Di2015UniqueSeparatorclient.Close();
15518376Di2015UniqueSeparatorPage_Load
15518620Di2015UniqueSeparator<asp:DropDownList id="ddlBranch" runat="server" AutoPostBack="true" OnSelectedIndexChanged="ddlBranch_onSelectIndexChanged"/>Di2015NewLine<asp:ListItem Value="1">Finance</asp:ListItem>Di2015NewLine<asp:ListItem Value="2">Information Technology</asp:ListItem>Di2015NewLine</asp:DropDownList>Di2015NewLine<br/>Di2015NewLine<br/>Di2015NewLineDi2015NewLine<asp:GridView id="GridView1" runat="server">Di2015NewLine
15518620Di2015UniqueSeparatorprotected void ddlist_onSelectIndexChanged(object sender, EventArgs e)Di2015NewLine {Di2015NewLine           string selectedBranch=ddlBranch.SelectedItem.Text;Di2015NewLineDi2015NewLine           DataSet dsBranchDetails=GetDataForBranch(selectedBranch);Di2015NewLineDi2015NewLine            GridView1.DataSource=dsBranchDetails;Di2015NewLine            GridView1DataBind();Di2015NewLine }Di2015NewLineDi2015NewLineDi2015NewLinepublic DataSet GetDataForBranch(string selectedBranch)Di2015NewLine{Di2015NewLine //     your codeDi2015NewLine}Di2015NewLine
15518673Di2015UniqueSeparatorfilter
15518673Di2015UniqueSeparatorstring.Format("[Start] = '{0}'", appointmentStart);Di2015NewLine
15518673Di2015UniqueSeparator[Start] = '02/04/2013 10:00:00'
15518673Di2015UniqueSeparatorstring.Format("[Start] = '{0}'", appointmentStart.ToString("g"));Di2015NewLine
15518673Di2015UniqueSeparator[Start] = '02/04/2013 10:00'
15518673Di2015UniqueSeparatorfr-FR
15518869Di2015UniqueSeparatortransform.Load(Server.MapPath("/XML/a.xsl"));  Di2015NewLine
15518881Di2015UniqueSeparatorDateTime elapsedTime = DateTime.Now - StartTime.Di2015NewLine
15518896Di2015UniqueSeparatorworkChart.ChartStyle = 209;Di2015NewLine
15519334Di2015UniqueSeparatorChangeCode
15519334Di2015UniqueSeparatorChangeCode
15519334Di2015UniqueSeparatorChangeCode1
15519334Di2015UniqueSeparatorCustomControlClickMe
15519334Di2015UniqueSeparatorChangeCode1.CustomControlClickMe += new ClickMe(button2_Click);Di2015NewLine
15519334Di2015UniqueSeparatorUserControls.CommonControls.ChangeCode. += new ClickMe(button2_Click);
15519334Di2015UniqueSeparator.
15519334Di2015UniqueSeparatorUserControls.CommonControls.ChangeCode.
15519334Di2015UniqueSeparator.CustomControlClickMe
15519485Di2015UniqueSeparator<appSettings>Di2015NewLine     <add key="DocumentationLocation" value="E:\\img\\imgProfile" />Di2015NewLine</appSettings>Di2015NewLine
15519485Di2015UniqueSeparatorstring savePath = ConfigurationSettings.AppSettings["DocumentationLocation"];Di2015NewLineDi2015NewLinestring filename = Path.GetFileName(FileUploadControl.FileName);Di2015NewLineFileUploadControl.SaveAs(savePath + filename);Di2015NewLine
15519526Di2015UniqueSeparatorBindingSource bs = new BindingSource();Di2015NewLineDi2015NewLinebs.Datasource = dt;Di2015NewLine
15519526Di2015UniqueSeparatordataGridView1.DataSource = bs;Di2015NewLine
15519526Di2015UniqueSeparatorusing (OleDbConnection con = new OleDbConnection(connectionString))Di2015NewLine                {Di2015NewLine                    var adaptor = new OleDbDataAdapter();Di2015NewLine                    adaptor.SelectCommand = new OleDbCommand(""SELECT * FROM [StopMaster]", con);Di2015NewLineDi2015NewLine                var cbr = new OleDbCommandBuilder(adaptor);Di2015NewLineDi2015NewLine                cbr.GetDeleteCommand();Di2015NewLine                cbr.GetInsertCommand();Di2015NewLine                cbr.GetUpdateCommand();Di2015NewLineDi2015NewLine                tryDi2015NewLine                {Di2015NewLine                    con.Open();Di2015NewLine                    adaptor.Update(dt);Di2015NewLine                }Di2015NewLine                catch (OleDbException ex)Di2015NewLine                {Di2015NewLine                    MessageBox.Show(ex.Message, "OledbException Error");Di2015NewLine                }Di2015NewLine                catch (Exception x)Di2015NewLine                {Di2015NewLine                    MessageBox.Show(x.Message, "Exception Error");Di2015NewLine                }Di2015NewLine            }Di2015NewLine
15519744Di2015UniqueSeparatorEntityObject
15519753Di2015UniqueSeparatorfor (int i = 0; i < validTypes.Length; i++)Di2015NewLine
15519753Di2015UniqueSeparatorstring[] stringArray = { "text1", "text2", "text3", "text4" };Di2015NewLinestring value = "text3";Di2015NewLineint pos = Array.IndexOf(stringArray, value);Di2015NewLineif (pos >- 1)Di2015NewLine{Di2015NewLine    // the array contains the string and the pos variableDi2015NewLine    // will have its position in the arrayDi2015NewLine}Di2015NewLine
15519753Di2015UniqueSeparator string[] validTypes = { "bmp", "gif"};Di2015NewLine string ext = System.IO.Path.GetExtension(FileUpload1.PostedFile.FileName);Di2015NewLine int pos = Array.IndexOf(validTypes , ext );Di2015NewLine if(pos>=0)Di2015NewLine {Di2015NewLine     string path = @"~\\Images\\"; Di2015NewLine     string comPath = Server.MapPath(path + "\\\\" + FileUpload1.FileName);Di2015NewLine     if (!File.Exists(comPath))Di2015NewLine     {Di2015NewLine         FileUpload1.PostedFile.SaveAs(comPath);Di2015NewLine         Label1.Text = "File uploaded";Di2015NewLine     }Di2015NewLine     elseDi2015NewLine     {Di2015NewLine         Label1.Text = "Existed";Di2015NewLine     }Di2015NewLine }Di2015NewLine elseDi2015NewLine {Di2015NewLine    Label1.Text = "Invalid File." + string.Join(",", validTypes);Di2015NewLine }Di2015NewLine
15519816Di2015UniqueSeparator// Build graphDi2015NewLinevar customer = new Customer(...);Di2015NewLinecustomer.LegalAddress = new Address(...);Di2015NewLinevar account = new Account();Di2015NewLineaccount.Customer = customer;Di2015NewLinevar order = new Order();Di2015NewLineorder.BuyerAccount = account;Di2015NewLine// Here all Navigation properties updatedDi2015NewLine// and state of all entities set to AddedDi2015NewLine_orderRepository.Add(order); Di2015NewLine// Here all entities inserted in transaction, PK and FK updatedDi2015NewLinecontext.SaveChanges();Di2015NewLine
15520004Di2015UniqueSeparatortypeof(MyUserControl).BaseType.GetGenericArguments()[0]Di2015NewLine
15520146Di2015UniqueSeparatorvoid SaveCheckedPermissions(int _JobID, System.Windows.Forms.TreeNode RootNode)Di2015NewLine{Di2015NewLine    using (WFMDBEntities _DBContext = new WFMDBEntities())Di2015NewLine    {Di2015NewLine        tbl_JobPermission _JopPermissionHelperVar;Di2015NewLineDi2015NewLine        foreach (System.Windows.Forms.TreeNode aNode in RootNode.Nodes)Di2015NewLine        {Di2015NewLine            if (aNode.Checked == true)Di2015NewLine            {Di2015NewLine                int _tempJobPermID;Di2015NewLine                int.TryParse(aNode.Name, out _tempJobPermID);Di2015NewLine                _JopPermissionHelperVar = new tbl_JobPermission();Di2015NewLine                _JopPermissionHelperVar.Tbljob = _JobID;Di2015NewLine                if (aNode.Name.Contains('_'))Di2015NewLine                {Di2015NewLine                    int _tempSpecialJobPermID;Di2015NewLine                    int.TryParse(aNode.Parent.Name, out _tempSpecialJobPermID);Di2015NewLine                    if (_JobPermissions.Where(x => x.TblPremition == _tempSpecialJobPermID).FirstOrDefault() != null)Di2015NewLine                    {Di2015NewLine                        _JobPermissions.Where(x => x.TblPremition == _tempSpecialJobPermID).FirstOrDefault().TblPremition = _tempSpecialJobPermID;Di2015NewLine                        if (aNode.Name.ToLower().Contains("add"))Di2015NewLine                        {Di2015NewLine                            _JobPermissions.Where(x => x.TblPremition == _tempSpecialJobPermID).FirstOrDefault().AllowNew = true;Di2015NewLine                        }Di2015NewLine                        else if (aNode.Name.ToLower().Contains("update"))Di2015NewLine                        {Di2015NewLine                            _JobPermissions.Where(x => x.TblPremition == _tempSpecialJobPermID).FirstOrDefault().AllowUpdate = true;Di2015NewLine                        }Di2015NewLine                        else if (aNode.Name.ToLower().Contains("delete"))Di2015NewLine                        {Di2015NewLine                            _JobPermissions.Where(x => x.TblPremition == _tempSpecialJobPermID).FirstOrDefault().AllowDelete = true;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    if (_JobPermissions.Where(x => x.TblPremition == _tempJobPermID).FirstOrDefault() == null)Di2015NewLine                    {Di2015NewLine                        _JopPermissionHelperVar.TblPremition = _tempJobPermID;Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLineDi2015NewLine                if (_JobPermissions.Where(x => x.TblPremition == _JopPermissionHelperVar.TblPremition && x.Tbljob == _JopPermissionHelperVar.Tbljob).ToList().Count < 1)Di2015NewLine                {Di2015NewLine                    _JobPermissions.Add(_JopPermissionHelperVar);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            SaveCheckedPermissions(_JobID, aNode);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15520172Di2015UniqueSeparatorSelectMany
15520172Di2015UniqueSeparatorfrom row in ds.Tables.Cast<DataTable>().SelectMany(t => t.AsEnumerable())Di2015NewLine// filter, etc Di2015NewLineselect rowDi2015NewLine
15520172Di2015UniqueSeparatords.Tables.Cast<DataTable>().SelectMany(t => t.AsEnumerable())Di2015NewLine
15520349Di2015UniqueSeparatorList
15520349Di2015UniqueSeparatorpublic class ContainerDi2015NewLine{Di2015NewLine    public IList<string> Items { get; set; }Di2015NewLineDi2015NewLine    public Container()Di2015NewLine    {Di2015NewLine        Items = new List<string>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15520349Di2015UniqueSeparatorprivate IList<string> items = new List<string>();Di2015NewLinepublic IList<string> ItemsDi2015NewLine{Di2015NewLine    get { return items; }Di2015NewLine    set { items = value; }Di2015NewLine}Di2015NewLine
15520349Di2015UniqueSeparatorvar container = new Container() { Items = { "Test" } };
15520349Di2015UniqueSeparator.Add()
15520349Di2015UniqueSeparatornew List<string>
15520349Di2015UniqueSeparatornull
15520349Di2015UniqueSeparatorNullReferenceException
15520409Di2015UniqueSeparator splitted = Regex.Split(text,@"\\bat\\s*\\b"); Di2015NewLine
15520409Di2015UniqueSeparatorsplitted : string [] = [|""; "Metadata "; "quota "; "what "; "batter"|]Di2015NewLine
15520409Di2015UniqueSeparatorList<string> splitted = Regex.Split(phrase, @"\\bat\\s*\\b",StringSplitOptions.RemoveEmptyEntries);Di2015NewLineDi2015NewLinesplitted : string [] = [| "Metadata "; "quota "; "what "; "batter"|]Di2015NewLine
15520531Di2015UniqueSeparatorDecodeFrom64(txtPassword.Text)Di2015NewLine
15520531Di2015UniqueSeparatortxtPassword.Text
15520531Di2015UniqueSeparatorpublic string DecodeFrom64(string password)Di2015NewLine{Di2015NewLine    return System.Text.UTF8.GetString(Convert.FromBase64String(password));Di2015NewLine}Di2015NewLine
15520531Di2015UniqueSeparatorbyte[] encData_byte = new byte[password.Length];Di2015NewLineencData_byte = System.Text.Encoding.UTF8.GetBytes(password);Di2015NewLinestring encodedData = Convert.ToBase64String(encData_byte);Di2015NewLine
15520531Di2015UniqueSeparatorConvert.ToBase64String
15520531Di2015UniqueSeparatorConvert.FromBase64String
15520531Di2015UniqueSeparatorSystem.Text.Encoding.UTF8.GetBytes
15520531Di2015UniqueSeparatorSystem.Text.UTF8.GetString
15520531Di2015UniqueSeparatorSystem.Text.UTF8.GetString(Convert.FromBase64String(password));Di2015NewLine
15520539Di2015UniqueSeparatorpublic SqlConnection baseConnectionDi2015NewLine{Di2015NewLine    get { return new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString); }Di2015NewLine}Di2015NewLine
15520539Di2015UniqueSeparatorprivate SqlConnection _baseConnection;Di2015NewLinepublic SqlConnection BaseConnectionDi2015NewLine{Di2015NewLine    get { return _baseConnection = _baseConnection ?? new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString); }Di2015NewLine}Di2015NewLine
15520539Di2015UniqueSeparatorreturn _baseConnection = _baseConnection ?? new SqlConnection()
15520539Di2015UniqueSeparator??
15520539Di2015UniqueSeparator_baseConnection
15520539Di2015UniqueSeparatorBaseConnection
15520539Di2015UniqueSeparatorBaseClass
15520693Di2015UniqueSeparator $(document).ready(function () {Di2015NewLine     $('#App_RunFromUSB').change(function () {Di2015NewLine         if ($('#App_RunFromUSB:checked').length > 0) {Di2015NewLine             $('#jj').show('1000');Di2015NewLine         } else {Di2015NewLine             $('#jj').hide('1000');Di2015NewLine         }Di2015NewLine     });Di2015NewLineDi2015NewLine     $('#SelectBox').change(function () {Di2015NewLine      var Value = '';Di2015NewLine             var text = '' Di2015NewLineDi2015NewLine         $("#SelectBox option:selected").each(function () {Di2015NewLine            Value+=$(this).val();Di2015NewLine             text +=$(this).text();Di2015NewLine             $("#selectedValues").append(Value + ": " + text + "<br />");Di2015NewLine         });Di2015NewLine      alert(text);Di2015NewLine         $('#hidden1').val(text);Di2015NewLineDi2015NewLine     });Di2015NewLineDi2015NewLine });Di2015NewLine
15520745Di2015UniqueSeparatorList<Func<bool>> constraints = new List<Func<bool>> ();Di2015NewLineDi2015NewLine// add your functionsDi2015NewLineconstraints.Add(check1);Di2015NewLineconstraints.Add(check2);Di2015NewLineDi2015NewLine// and then determine if all of them return trueDi2015NewLinebool allTrue = constraints.All (c => c());Di2015NewLineDi2015NewLine// or maybe if any are trueDi2015NewLinebool anyTrue = constraints.Any(c => c());Di2015NewLine
15520941Di2015UniqueSeparatorLINQ
15520941Di2015UniqueSeparatorvar tranModel = from r in tblResult.Tables[0]Di2015NewLine                select new TransactionModel Di2015NewLine                {Di2015NewLine                   transId = r.Field<int>("transID"),Di2015NewLine                   clientId = r.Field<int>("clientId"),Di2015NewLine                   clientName = r.Field<string>("ClientName")Di2015NewLine                }Di2015NewLine
15520941Di2015UniqueSeparator.NET 2.0.
15520941Di2015UniqueSeparatorLINQBridge
15520941Di2015UniqueSeparatortblResult
15520941Di2015UniqueSeparatorTransactionModel
15520941Di2015UniqueSeparator List<TransactionModel> tModels = new List<TransactionModel>();Di2015NewLine foreach (var row in tblResult.Tables[0].Rows) Di2015NewLine {Di2015NewLine     tModels.Add(new TransactionModel Di2015NewLine                 {Di2015NewLine                   transId = row["TransId"],Di2015NewLine                   clientId = row["ClientId"],     Di2015NewLine                   clientName = row["clientName"]Di2015NewLine                 });Di2015NewLine }Di2015NewLine
15521008Di2015UniqueSeparatorSystem.CodeDom.Compiler Di2015NewLineSystem.Reflection.EmitDi2015NewLine
15521008Di2015UniqueSeparatorCommand pattern
15521069Di2015UniqueSeparatordouble
15521069Di2015UniqueSeparatorSystem.Numerics.BigInteger
15521069Di2015UniqueSeparatorpublic static BigInteger Parse(string value)Di2015NewLine
15521069Di2015UniqueSeparatorimport System.Numerics.BigInteger;Di2015NewLineBigInteger.Parse("98765432109876543210987654321098999").ToString(); // note, no dotDi2015NewLine
15521069Di2015UniqueSeparatorX
15521069Di2015UniqueSeparatorX * 100
15521069Di2015UniqueSeparatorX + Y = ZDi2015NewLineDi2015NewLineX*100 + Y*100 = Z*100Di2015NewLine
15521069Di2015UniqueSeparatorX * Y = ZDi2015NewLineDi2015NewLine(X*100) * (Y*100) = Z*100 <--- WRONGDi2015NewLine
15521069Di2015UniqueSeparatorX * Y = ZDi2015NewLineDi2015NewLine(X*100) * (Y*100) = Z*100*100Di2015NewLineDi2015NewLineZ * 100 = (X*100) * (Y*100) / 100Di2015NewLine
15521089Di2015UniqueSeparator"8FCC44" -> "8F", "CC", "44"Di2015NewLine
15521089Di2015UniqueSeparatorfor
15521089Di2015UniqueSeparatorfor (int i = 0; i < a.Length; i += 2)Di2015NewLine
15521089Di2015UniqueSeparatori
15521089Di2015UniqueSeparatorInt32.Parse
15521089Di2015UniqueSeparatorConvert.ToInt32(a.Substring(i, 2), 16);Di2015NewLine
15521089Di2015UniqueSeparatorint[] b = new int[a.Length / 2];Di2015NewLine
15521089Di2015UniqueSeparatorstring a = "8FCC44";Di2015NewLineint[] b = new int[a.Length / 2];Di2015NewLineDi2015NewLinefor (int i = 0, int j = 0; i < a.Length; i += 2, j++)Di2015NewLine    b[j] = Convert.ToInt32(a.Substring(i, 2), 16);Di2015NewLine
15521135Di2015UniqueSeparatorpublic void TextBox1_Validating(object sender, CancelEventArgs args)Di2015NewLine{Di2015NewLine    // handle the eventDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic void RegisterEvent()Di2015NewLine{Di2015NewLine    CancelEventHandler handler = (CancelEventHandler)Delegate.CreateDelegate(Di2015NewLine        typeof(CancelEventHandler), Di2015NewLine        this,Di2015NewLine        "TextBox1_Validating");Di2015NewLine    textBox1.Validating += handler;Di2015NewLine}Di2015NewLine
15521203Di2015UniqueSeparatorListView
15521203Di2015UniqueSeparator// Add required columnsDi2015NewLinelistView1.Columns.Add("DMC");Di2015NewLinelistView1.Columns.Add("Tech Name");Di2015NewLinelistView1.Columns.Add("Info Name");Di2015NewLinelistView1.Columns.Add("Status");Di2015NewLinelistView1.Columns.Add("Notes");Di2015NewLineDi2015NewLineXDocument doc = XDocument.Load(CSDBpath + projectName + "\\\\Data.xml");Di2015NewLineDi2015NewLineforeach (var dm in doc.Descendants("dataModule"))Di2015NewLine{Di2015NewLine    ListViewItem item = new ListViewItem( new string[]Di2015NewLine    {Di2015NewLine        dm.Element("DMC").Value,Di2015NewLine        dm.Element("techName").Value,Di2015NewLine        dm.Element("infoName").Value,Di2015NewLine        dm.Element("status").Value,Di2015NewLine        dm.Element("notes").ValueDi2015NewLine    });Di2015NewLine    listView1.Items.Add(item);Di2015NewLine}Di2015NewLine
15521293Di2015UniqueSeparatorGroupBy
15521293Di2015UniqueSeparatorFirstProp
15521293Di2015UniqueSeparatorFirst
15521293Di2015UniqueSeparator list.GroupBy(x => x.FirstProp).Select(g => g.First())Di2015NewLine
15521349Di2015UniqueSeparatorRoundedRect
15521349Di2015UniqueSeparatorUIButton
15521349Di2015UniqueSeparatorUIButtonType.Custom
15521463Di2015UniqueSeparatorTextChanged
15521463Di2015UniqueSeparatorText
15521463Di2015UniqueSeparatorTextBox txtEdit = new TextBox();Di2015NewLinetxtEdit.TextChanged += txtEdit_TextChanged;Di2015NewLineDi2015NewLineprivate void txtEdit_TextChanged(object sender, TextChangedEventArgs e)Di2015NewLine{Di2015NewLine    if (comboBoxYou.Text == txtEdit.Text) Di2015NewLine    {Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    else if ((sender as TextBox).Text.Contains("[") || (sender as TextBox).Text.Contains("]"))Di2015NewLine    {Di2015NewLine        MessageBox.Show("Cannot enter '[' or ']' characters!", "", MessageBoxButton.OK, MessageBoxImage.Information);Di2015NewLine        (sender as TextBox).Text = "";Di2015NewLine    }Di2015NewLine}Di2015NewLine
15521524Di2015UniqueSeparator"Resources.Designer.cs"
15521524Di2015UniqueSeparatorSystem.Resources.ResourceManager
15521524Di2015UniqueSeparatorResourceSet
15521534Di2015UniqueSeparatorDateTime.UtcNow
15521534Di2015UniqueSeparatorDateTime utcTime = new DateTime(2013, 03, 25, 10, 20, 00);Di2015NewLineTimeZoneInfo usersTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");Di2015NewLineDateTime usersLocalTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, usersTimeZone);Di2015NewLineConsole.WriteLine(utcTime.ToString("hh:mm:ss");Di2015NewLineConsole.WriteLine(usersLocalTime.ToString("hh:mm:ss");Di2015NewLine
15521534Di2015UniqueSeparatorTimeZoneInfo.GetSystemTimeZones()Di2015NewLine
15521534Di2015UniqueSeparator10:20:00Di2015NewLine05:20:00Di2015NewLine
15521747Di2015UniqueSeparatorSelectMany
15521747Di2015UniqueSeparatorElements
15521747Di2015UniqueSeparator//xml variable contains string representation of your xmlDi2015NewLine//use XDocument.Load(filePath) to load xml having path to a fileDi2015NewLinevar nodes = XDocument.Parse(xml)Di2015NewLine                     .Descendants("Knowledge")Di2015NewLine                     .Elements("Group")Di2015NewLine                     .Elements("Item");Di2015NewLineDi2015NewLinevar queryKnowledge = from item in nodesDi2015NewLine                             select newDi2015NewLine                             {Di2015NewLine                                 Group = (string)item.Parent.Attribute("name"),Di2015NewLine                                 Name = (string)item.Attribute("name"),Di2015NewLine                                 Level = (string)item.Attribute("level")Di2015NewLine                             };Di2015NewLine
15521747Di2015UniqueSeparatorGroup                  Name             Level Di2015NewLineMethods and Techniques OO               1 Di2015NewLineMethods and Techniques Dataflow Diagram 4 Di2015NewLineMethods and Techniques null             5 Di2015NewLineLanguages              C#               1 Di2015NewLineLanguages              Delphi           1 Di2015NewLineLanguages              Visual Basic     4 Di2015NewLine
15521747Di2015UniqueSeparatornull
15521747Di2015UniqueSeparatornaeme
15521747Di2015UniqueSeparatorAsQueryable
15521747Di2015UniqueSeparatorSelect
15521747Di2015UniqueSeparatorvar nodes = XDocument.Parse(xml).Descendants("Item");Di2015NewLine
15521889Di2015UniqueSeparatorusing (StreamWriter writer = new StreamWriter(@"\\\\IPADDRESS\\directories\\file.txt") Di2015NewLine{Di2015NewLine    writer.Write("Word ");Di2015NewLine}Di2015NewLine
15521889Di2015UniqueSeparatorFile.ReadAllLines(@"\\\\IPADDRESS\\directories\\file.txt");Di2015NewLine
15521889Di2015UniqueSeparator/* Download File */Di2015NewLine    public void download(string remoteFile, string localFile)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            /* Create an FTP Request */Di2015NewLine            ftpRequest = (FtpWebRequest)FtpWebRequest.Create(host + "/" + remoteFile);Di2015NewLine            /* Log in to the FTP Server with the User Name and Password Provided */Di2015NewLine            ftpRequest.Credentials = new NetworkCredential(user, pass);Di2015NewLine            /* When in doubt, use these options */Di2015NewLine            ftpRequest.UseBinary = true;Di2015NewLine            ftpRequest.UsePassive = true;Di2015NewLine            ftpRequest.KeepAlive = true;Di2015NewLine            /* Specify the Type of FTP Request */Di2015NewLine            ftpRequest.Method = WebRequestMethods.Ftp.DownloadFile;Di2015NewLine            /* Establish Return Communication with the FTP Server */Di2015NewLine            ftpResponse = (FtpWebResponse)ftpRequest.GetResponse();Di2015NewLine            /* Get the FTP Server's Response Stream */Di2015NewLine            ftpStream = ftpResponse.GetResponseStream();Di2015NewLine            /* Open a File Stream to Write the Downloaded File */Di2015NewLine            FileStream localFileStream = new FileStream(localFile, FileMode.Create);Di2015NewLine            /* Buffer for the Downloaded Data */Di2015NewLine            byte[] byteBuffer = new byte[bufferSize];Di2015NewLine            int bytesRead = ftpStream.Read(byteBuffer, 0, bufferSize);Di2015NewLine            /* Download the File by Writing the Buffered Data Until the Transfer is Complete */Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                while (bytesRead > 0)Di2015NewLine                {Di2015NewLine                    localFileStream.Write(byteBuffer, 0, bytesRead);Di2015NewLine                    bytesRead = ftpStream.Read(byteBuffer, 0, bufferSize);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            catch (Exception ex) { Console.WriteLine(ex.ToString()); }Di2015NewLine            /* Resource Cleanup */Di2015NewLine            localFileStream.Close();Di2015NewLine            ftpStream.Close();Di2015NewLine            ftpResponse.Close();Di2015NewLine            ftpRequest = null;Di2015NewLine        }Di2015NewLine        catch (Exception ex) { Console.WriteLine(ex.ToString()); }Di2015NewLine        return;Di2015NewLine    }Di2015NewLine
15521955Di2015UniqueSeparatorOracleCommand
15521955Di2015UniqueSeparatorCommandText
15522013Di2015UniqueSeparatorvar strPrev="";Di2015NewLinevar strNext="";Di2015NewLineswitch(Request.QueryString["p"])Di2015NewLine{Di2015NewLine  case "about":Di2015NewLine    strPrev="last";Di2015NewLine    strNext="contact";Di2015NewLine    break;Di2015NewLine  case "contact":Di2015NewLine    strPrev="about";Di2015NewLine    strNext="last";Di2015NewLine    break;Di2015NewLine  case "last":Di2015NewLine    strPrev="contact";Di2015NewLine    strNext="about";Di2015NewLine}Di2015NewLine
15522013Di2015UniqueSeparatorvar pages = new string[] { "about", "contact", "last" };Di2015NewLinevar index = Array.IndexOf(pages, Request.QueryString["p"]);Di2015NewLinevar previousPage = pages[(index + pages.Length - 1) % pages.Length];Di2015NewLinevar nextPage = pages[(index + 1) % pages.Length];Di2015NewLine
15522013Di2015UniqueSeparatorArray.IndexOf
15522228Di2015UniqueSeparatorResponse.Write()
15522228Di2015UniqueSeparator<script>window.open...</script>
15522228Di2015UniqueSeparatorPage.ClientScript.RegisterStartUpScript()
15522314Di2015UniqueSeparatorvar
15522366Di2015UniqueSeparatorDataValueField
15522366Di2015UniqueSeparatorDataTextField
15522366Di2015UniqueSeparatorddlMobile.DataSource = ds1.Tables["AUser"];Di2015NewLineddlMobile.DataValueField = "CountryCode";Di2015NewLineddlMobile.DataTextField = "CountryName";Di2015NewLineddlMobile.DataBind();Di2015NewLine
15522387Di2015UniqueSeparatorpublic static int StrToIntDef(string s, int @default)Di2015NewLine{Di2015NewLine    int number;Di2015NewLine    if (int.TryParse(s, out number))Di2015NewLine        return number;Di2015NewLine    return @default;Di2015NewLine}Di2015NewLine
15522387Di2015UniqueSeparator@
15522387Di2015UniqueSeparatornumber
15522387Di2015UniqueSeparatorout
15522387Di2015UniqueSeparatorpublic static bool TryParse(Di2015NewLine    string s,Di2015NewLine    NumberStyles style,Di2015NewLine    IFormatProvider provider,Di2015NewLine    out int resultDi2015NewLine)Di2015NewLine
15522387Di2015UniqueSeparatorNumberStyles
15522387Di2015UniqueSeparatorNone
15522387Di2015UniqueSeparatorAllowLeadingWhite
15522387Di2015UniqueSeparatorAllowTrailingWhite
15522387Di2015UniqueSeparatorAllowLeadingSign
15522387Di2015UniqueSeparatorAllowTrailingSign
15522387Di2015UniqueSeparatorAllowParentheses
15522387Di2015UniqueSeparatorAllowDecimalPoint
15522387Di2015UniqueSeparatorAllowThousands
15522387Di2015UniqueSeparatorAllowExponent
15522387Di2015UniqueSeparatorAllowCurrencySymbol
15522387Di2015UniqueSeparatorAllowHexSpecifier
15522387Di2015UniqueSeparatorInteger
15522387Di2015UniqueSeparatorHexNumber
15522387Di2015UniqueSeparatorNumber
15522387Di2015UniqueSeparatorFloat
15522387Di2015UniqueSeparatorCurrency
15522387Di2015UniqueSeparatorAny
15522387Di2015UniqueSeparatorstring hex = "AB";Di2015NewLineint hexInt = int.Parse(hex, NumberStyles.HexNumber);Di2015NewLine
15522387Di2015UniqueSeparatorstring number = "  (2)  ";Di2015NewLineint castedNumber = int.Parse(num, NumberStyles.AllowParentheses |                        Di2015NewLine    NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite);Di2015NewLine
15522506Di2015UniqueSeparatorbyte[] bytes = Encoding.ASCII.GetBytes("K");Di2015NewLine
15522524Di2015UniqueSeparatorDataGridView.ReadOnly
15522524Di2015UniqueSeparatortrue
15522524Di2015UniqueSeparatorReadOnly
15522524Di2015UniqueSeparatorfalse
15522524Di2015UniqueSeparatorDataGridView.ReadOnly
15522524Di2015UniqueSeparatorfalse
15522524Di2015UniqueSeparatorDataGridViewRow.Tag
15522524Di2015UniqueSeparatorReadOnly
15522524Di2015UniqueSeparatorDataGridViewRow.Tag
15522524Di2015UniqueSeparatortrue
15522524Di2015UniqueSeparatorDataGridView.ReadOnlyChanged
15522524Di2015UniqueSeparatorvoid DataGridView_ReadOnlyChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    DataGridView dataGridView = (DataGridView) sender;Di2015NewLine    if (!dataGridView.ReadOnly)Di2015NewLine    {Di2015NewLine        // DataGridView.ReadOnly has just been set to false, so we need to Di2015NewLine        // restore each row's readonly state.Di2015NewLine        foreach(DataGridViewRow row in dataGridView.Rows)Di2015NewLine        {Di2015NewLine            if (row.Tag != null && ((bool)row.Tag))Di2015NewLine            {Di2015NewLine                row.ReadOnly = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15522524Di2015UniqueSeparatorDataGridView
15522524Di2015UniqueSeparatorReadOnly
15522524Di2015UniqueSeparatorDataGridView.ReadOnly
15522524Di2015UniqueSeparatortrue
15522524Di2015UniqueSeparatorDataGridView.EditMode
15522524Di2015UniqueSeparatorDataGridViewEditMode.EditProgramatically
15522524Di2015UniqueSeparatorDataGridView.ReadOnly
15522524Di2015UniqueSeparatortrue
15522880Di2015UniqueSeparatorHyperlink
15522880Di2015UniqueSeparatorHyperlink
15522880Di2015UniqueSeparatorLabel
15523027Di2015UniqueSeparatorif
15523027Di2015UniqueSeparatorpublic boolean isYes() {Di2015NewLine    return someValue.equals("yes");Di2015NewLine}Di2015NewLine
15523027Di2015UniqueSeparatorif
15523027Di2015UniqueSeparatorsomeValue
15523027Di2015UniqueSeparator"yes"
15523027Di2015UniqueSeparatortrue
15523027Di2015UniqueSeparatorsomeValue
15523027Di2015UniqueSeparator"Yes"
15523027Di2015UniqueSeparator"no"
15523027Di2015UniqueSeparator"bananas"
15523027Di2015UniqueSeparator""
15523027Di2015UniqueSeparatorfalse
15523027Di2015UniqueSeparatorsomeValue
15523027Di2015UniqueSeparatornull
15523027Di2015UniqueSeparatorNullPointerException
15523069Di2015UniqueSeparatorGetNestedTypes
15523069Di2015UniqueSeparatortypeof(MyType)Di2015NewLine    .GetNestedTypes()Di2015NewLine    .Where(type => type.IsEnum)Di2015NewLine
15523121Di2015UniqueSeparator    public byte[] ToByteArray(float[,] nmbs)Di2015NewLine    {Di2015NewLine        byte[] nmbsBytes = new byte[nmbs.GetLength(0) * nmbs.GetLength(1)*4];Di2015NewLine        int k = 0;Di2015NewLine        for (int i = 0; i < nmbs.GetLength(0); i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < nmbs.GetLength(1); j++)Di2015NewLine            {Di2015NewLine                byte[] array = BitConverter.GetBytes(nmbs[i, j]);Di2015NewLine                for (int m = 0; m < array.Length; m++)Di2015NewLine                {Di2015NewLine                    nmbsBytes[k++] = array[m];Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return nmbsBytes;Di2015NewLine    }Di2015NewLine
15523121Di2015UniqueSeparator    public float[,] ToFloatArray(byte [] nmbsBytes)Di2015NewLine    {Di2015NewLine        float[,] nmbs = new float[nmbsBytes.Length /4 / 2, 2];Di2015NewLine        int k = 0;Di2015NewLine        for (int i = 0; i < nmbs.GetLength(0); i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < nmbs.GetLength(1); j++)Di2015NewLine            {Di2015NewLine                nmbs[i, j] = BitConverter.ToSingle(nmbsBytes,k);Di2015NewLine                k += 4;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return nmbs;Di2015NewLine    }Di2015NewLine
15523227Di2015UniqueSeparator<%# Utils.UserUtils.showNiceDesc(Eval("about")) %>Di2015NewLine
15523487Di2015UniqueSeparator// hypotetical code !Di2015NewLinenamespace My.NamespaceDi2015NewLine{Di2015NewLine    private class MyClassDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
15523487Di2015UniqueSeparatorMy.Namespace
15523487Di2015UniqueSeparatorMy.Namespace
15523487Di2015UniqueSeparatorMyClass
15523487Di2015UniqueSeparator// hypotetical code !Di2015NewLinenamespace My.NamespaceDi2015NewLine{Di2015NewLine    public class AnotherClassDi2015NewLine    {Di2015NewLine        private hisClass = new MyClass();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15523496Di2015UniqueSeparatorBuy_Sell
15523496Di2015UniqueSeparatorSELECT TradeNo, Buy_Sell_Types.Name, TradeQty, Market_Price Di2015NewLineFROM tradeFileDi2015NewLineJOIN Buy_Sell_Types ON tradeFile.Buy_Sell = Buy_Sell_Types.PrimaryKeyDi2015NewLine
15523496Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    da=new SqlDataAdapter("SELECT TradeNo, Buy_Sell, TradeQty, Market_Price FROM tradeFile", conn);Di2015NewLine    DataSet ds=new DataSet();Di2015NewLine    da.Fill(ds);Di2015NewLine    gvTrade.dataSource = ds.Tables[0].AsEnumerable()Di2015NewLine             .Select(d => new Di2015NewLine             {Di2015NewLine                 TradeNo = d.Field<int>("TradeNo"),Di2015NewLine                 Buy_Sell = d.Field<int>("Buy_Sell") == 1 ? "Buy" : "Sell",Di2015NewLine                 TradeQty = d.Field<int>("TradeQty"),Di2015NewLine                 Market_Price = d.Field<double>("MarketPrice")Di2015NewLine             }); Di2015NewLine}Di2015NewLinecatch(Exception ex)Di2015NewLine{Di2015NewLine    MessageBox.Show(ex.Message);Di2015NewLine}Di2015NewLine
15523547Di2015UniqueSeparatorDropDownList
15523547Di2015UniqueSeparator@Html.DropDownListFor(m => m.season.ClubId, ViewBag.ClubId)Di2015NewLine
15523547Di2015UniqueSeparatorpublic SelectList Clubs { get; set; }Di2015NewLine
15523547Di2015UniqueSeparatorModel.Clubs = new SelectList(clubs, "ClubId", "Name", season.ClubId);Di2015NewLine
15523547Di2015UniqueSeparator@Html.DropDownListFor(m => m.season.ClubId, Model.Clubs)Di2015NewLine
15523583Di2015UniqueSeparatorbutton1.Name = "test" + button2.Name[button2.Name.Length-1];Di2015NewLine
15523583Di2015UniqueSeparatorbutton1.Name  = string.Format("test{0}", button2.Name[button2.Name.Length-1]);Di2015NewLine
15523590Di2015UniqueSeparatorSys.WebForms.PageRequestManager.getInstance().add_pageLoaded();Di2015NewLine
15523590Di2015UniqueSeparator$(document).ready() {.. }Di2015NewLine
15523590Di2015UniqueSeparatorSys.WebForms.PageRequestManager.getInstance().add_pageLoaded(yourAutoCompleteInitializationFunction);Di2015NewLineDi2015NewLinefunction yourAutoCompleteInitializationFunction() {Di2015NewLine$(".searchinput").autocomplete({Di2015NewLine                    source: function (request, response) {Di2015NewLine                        $.ajax({Di2015NewLine                            type: "POST",Di2015NewLine                            contentType: "application/json; charset=utf-8",Di2015NewLine                            url: "PredictiveSearch.asmx/GetAllPredictions",Di2015NewLine                            data: "{'keywordStartsWith':'" + request.term + "'}",Di2015NewLine                            dataType: "json",Di2015NewLine                            async: true,Di2015NewLine                            success: function (data) {Di2015NewLine                                response(data.d);Di2015NewLineDi2015NewLine                            },Di2015NewLine                            error: function (result) {Di2015NewLine                                alert("Due to unexpected errors we were unable to load data");Di2015NewLine                            }Di2015NewLine                        });Di2015NewLine                    },Di2015NewLine                    minLength: 1Di2015NewLine                });Di2015NewLine}Di2015NewLine
15523651Di2015UniqueSeparator <asp:CustomValidator ID="CustomValidator9" runat="server" ErrorMessage="Please select you height" Di2015NewLine                    ClientValidationFunction = "ValidateHeight" Display="Dynamic" ValidateEmptyText="true"></asp:CustomValidator> Di2015NewLine
15523651Di2015UniqueSeparator<script type="text/javascript">Di2015NewLineDi2015NewLine    function ValidateHeight(sender, args) {Di2015NewLineDi2015NewLine        var drpHeight = $('#<%=drpHeight.ClientID%>').val();Di2015NewLineDi2015NewLine        if (drpHeight == "CMs") {Di2015NewLineDi2015NewLine            if ($('#<%=txtCm.ClientID%>').val().length > 0) {Di2015NewLine                args.IsValid = true;Di2015NewLine                return;Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine            else {Di2015NewLine                args.IsValid = false;Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        else if (drpHeight == "Feet") {Di2015NewLineDi2015NewLine            var drpFeet = $('#<%=drpFeet.ClientID%>').val();Di2015NewLine            var drpInches = $('#<%=drpInches.ClientID%>').val();Di2015NewLineDi2015NewLine            if (drpFeet == -1 || drpInches == -1) {Di2015NewLine                args.IsValid = false;Di2015NewLine                return;                    Di2015NewLine            }Di2015NewLine            else {Di2015NewLine                args.IsValid = true;Di2015NewLine                return;Di2015NewLine            }Di2015NewLine        }            Di2015NewLineDi2015NewLine        }Di2015NewLine</script>Di2015NewLine
15523660Di2015UniqueSeparatorEditingControl.KeyPress
15523660Di2015UniqueSeparator    private string pattern = "^[0-9]{0,2}$";Di2015NewLineDi2015NewLine    private void dataGridView1_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)Di2015NewLine    {Di2015NewLine        dataGridView1.EditingControl.KeyPress -= EditingControl_KeyPress;Di2015NewLine        dataGridView1.EditingControl.KeyPress += EditingControl_KeyPress;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EditingControl_KeyPress(object sender, KeyPressEventArgs e)Di2015NewLine    {Di2015NewLine        if (!char.IsControl(e.KeyChar))Di2015NewLine        {Di2015NewLine            Control editingControl = (Control)sender;Di2015NewLine            if (!Regex.IsMatch(editingControl.Text + e.KeyChar, pattern))Di2015NewLine                e.Handled = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15523699Di2015UniqueSeparator<div id="form-list-view" class="k-content">Di2015NewLine    <div id="form-list-grid"></div>Di2015NewLine</div>Di2015NewLineDi2015NewLinevar formListDataSource = new kendo.data.DataSource({Di2015NewLine   transport: {Di2015NewLine       read: {Di2015NewLine           url: "@Url.Content(string.Format("{0}/{1}", Html.WebApiBaseUrl(), "Forms"))",Di2015NewLine           dataType: "json"Di2015NewLine       }Di2015NewLine   },Di2015NewLine    schema: {Di2015NewLine        model: {Di2015NewLine            id: "Form",Di2015NewLine            fields: {Di2015NewLine                Form: { type: "string" },Di2015NewLine                Revision: { type: "number" },Di2015NewLine                Status: { type: "string" }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    },Di2015NewLine   pageSize: 10Di2015NewLine});Di2015NewLineDi2015NewLine$("#form-list-grid").kendoGrid({Di2015NewLine    autoBind: false,Di2015NewLine    dataSource: formListDataSource,Di2015NewLine    pageable: true,Di2015NewLine    columns: [Di2015NewLine        {Di2015NewLine            field: "Form",Di2015NewLine            title: "Name"Di2015NewLine        },Di2015NewLine        {Di2015NewLine            field: "Revision",Di2015NewLine            title: "Revision"Di2015NewLine        },Di2015NewLine        {Di2015NewLine            field: "Status",Di2015NewLine            title: "Status"Di2015NewLine        }Di2015NewLine    ]Di2015NewLine});Di2015NewLine
15523700Di2015UniqueSeparatorSelect
15523700Di2015UniqueSeparatorindex
15523700Di2015UniqueSeparatorA[index]
15523700Di2015UniqueSeparatorString[] A = new String[] { "one", "two", "three", "four" };Di2015NewLineint[] idxs = new int[] { 1, 3 };Di2015NewLinevar result = idxs.Select(i => A[i]).ToArray();Di2015NewLineDi2015NewLineforeach(var s in result)Di2015NewLine  Console.WriteLine(s);Di2015NewLine
15523700Di2015UniqueSeparatortwoDi2015NewLinefourDi2015NewLine
15523700Di2015UniqueSeparatorDEMO
15523970Di2015UniqueSeparatorDataRow
15523970Di2015UniqueSeparatorField
15523970Di2015UniqueSeparatorIEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable()Di2015NewLine    .Where(r => !r.Field<int?>("ParentId").HasValue);Di2015NewLine
15523970Di2015UniqueSeparatorEnumerable.Where
15523970Di2015UniqueSeparatorToArray
15523970Di2015UniqueSeparatorDataTable
15523970Di2015UniqueSeparatorCopyToDataTable
15523970Di2015UniqueSeparatorforeach
15523970Di2015UniqueSeparatorforeach(DataRow row in rows)Di2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
15524064Di2015UniqueSeparator/// <summary>Di2015NewLine/// Merges pdf files from a byte listDi2015NewLine/// </summary>Di2015NewLine/// <param name="files">list of files to merge</param>Di2015NewLine/// <returns>memory stream containing combined pdf</returns>Di2015NewLinepublic MemoryStream MergePdfForms(List<byte[]> files)Di2015NewLine{Di2015NewLine    if (files.Count > 1)Di2015NewLine    {Di2015NewLine        string[] names;Di2015NewLine        PdfStamper stamper;Di2015NewLine        MemoryStream msTemp = null;Di2015NewLine        PdfReader pdfTemplate = null;Di2015NewLine        PdfReader pdfFile;Di2015NewLine        Document doc;Di2015NewLine        PdfWriter pCopy;Di2015NewLine        MemoryStream msOutput = new MemoryStream();Di2015NewLineDi2015NewLine        pdfFile = new PdfReader(files[0]);Di2015NewLineDi2015NewLine        doc = new Document();Di2015NewLine        pCopy = new PdfSmartCopy(doc, msOutput);Di2015NewLine        pCopy.PdfVersion = PdfWriter.VERSION_1_7;Di2015NewLineDi2015NewLine        doc.Open();Di2015NewLineDi2015NewLine        for (int k = 0; k < files.Count; k++)Di2015NewLine        {Di2015NewLine            for (int i = 1; i < pdfFile.NumberOfPages + 1; i++)Di2015NewLine            {Di2015NewLine                msTemp = new MemoryStream();Di2015NewLine                pdfTemplate = new PdfReader(files[k]);Di2015NewLineDi2015NewLine                stamper = new PdfStamper(pdfTemplate, msTemp);Di2015NewLineDi2015NewLine                names = new string[stamper.AcroFields.Fields.Keys.Count];Di2015NewLine                stamper.AcroFields.Fields.Keys.CopyTo(names, 0);Di2015NewLine                foreach (string name in names)Di2015NewLine                {Di2015NewLine                    stamper.AcroFields.RenameField(name, name + "_file" + k.ToString());Di2015NewLine                }Di2015NewLineDi2015NewLine                stamper.Close();Di2015NewLine                pdfFile = new PdfReader(msTemp.ToArray());Di2015NewLine                ((PdfSmartCopy)pCopy).AddPage(pCopy.GetImportedPage(pdfFile, i));Di2015NewLine                pCopy.FreeReader(pdfFile);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        pdfFile.Close();Di2015NewLine        pCopy.Close();Di2015NewLine        doc.Close();Di2015NewLineDi2015NewLine        return msOutput;Di2015NewLine    }Di2015NewLine    else if (files.Count == 1)Di2015NewLine    {Di2015NewLine        return new MemoryStream(files[0]);Di2015NewLine    }Di2015NewLineDi2015NewLine    return null;Di2015NewLine}Di2015NewLine
15524104Di2015UniqueSeparator row.Attributes.Add("border-bottom", "solid red 1px");Di2015NewLine
15524118Di2015UniqueSeparatorint? precision = null;Di2015NewLineDi2015NewLineif(row["NUMERIC_PRECISION"] != DBNull.Value) //or whatever you want to do to make sure it actually has a valueDi2015NewLine{Di2015NewLine    //I usually use Convert.ToInt32 since its easier, but it is also more sensativeDi2015NewLine    precision = Convert.ToInt32(row["NUMERIC_PRECISION"]);Di2015NewLine}Di2015NewLine
15524118Di2015UniqueSeparatorConvert
15524189Di2015UniqueSeparatorbool
15524189Di2015UniqueSeparatorbool?
15524189Di2015UniqueSeparator5=null
15524189Di2015UniqueSeparator5<>null
15524232Di2015UniqueSeparatorbytes
15524232Di2015UniqueSeparatorReceive
15524232Di2015UniqueSeparatorReceive
15524232Di2015UniqueSeparatorReceive
15524232Di2015UniqueSeparatorReceive
15524232Di2015UniqueSeparatorReceive
15524232Di2015UniqueSeparatorReceive
15524271Di2015UniqueSeparator  MyAsyncMethod().Di2015NewLine    ContinueWith(t => Console.WriteLine(t.Exception),Di2015NewLine        TaskContinuationOptions.OnlyOnFaulted);Di2015NewLine
15524271Di2015UniqueSeparatorMyAsyncMethod()
15524271Di2015UniqueSeparatorMyAsyncMethod
15524271Di2015UniqueSeparatorawait
15524271Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    await MyAsyncMethod().ConfigureAwait(false);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    Trace.WriteLine(ex);Di2015NewLine}Di2015NewLine
15524271Di2015UniqueSeparatortry
15524271Di2015UniqueSeparatorcatch
15524271Di2015UniqueSeparatorusing
15524271Di2015UniqueSeparatorContinueWith
15524271Di2015UniqueSeparatorConfigureAwait(false)
15524404Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!Page.IsPostBack)Di2015NewLine        {Di2015NewLine            Dictionary<string,string> allowedUrls = LoadAllowedURLs();Di2015NewLineDi2015NewLine            if (!allowedUrls.ContainsKey(Request.Path))Di2015NewLine            {Di2015NewLine                Response.Redirect("Some_default_redirect_page.aspx");   Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
15524473Di2015UniqueSeparatorif(status == 86.09.0009)//...Di2015NewLine
15524473Di2015UniqueSeparatorint
15524520Di2015UniqueSeparatornspm.AddNamespace("d", "urn:PaketniUvozObrazaca_V1_0.xsd");Di2015NewLine
15524520Di2015UniqueSeparatorforeach (XmlNode uposlnik in gip.SelectNodes("//d:PaketniUvozObrazaca/"+Di2015NewLine                                             "d:Obrazac1022", nspm))Di2015NewLine{Di2015NewLine    Console.WriteLine(Di2015NewLine        uposlnik.SelectSingleNode("d:Dio1PodaciOPoslodavcuIPoreznomObvezniku/"+Di2015NewLine                                  "d:ImeIPrezime", nspm).InnerText);Di2015NewLine}Di2015NewLine
15524520Di2015UniqueSeparatorPaketniUvozObrazaca_V1_0
15524520Di2015UniqueSeparatorPaketniUvozObrazaca
15524961Di2015UniqueSeparator<ComboBox ItemsSource="{Binding Path=CorrespondingViewModel.CollectionOne.CollectionTwo, Source={StaticResource Locator}}"> Di2015NewLine
15524961Di2015UniqueSeparator<ComboBox ItemsSource="{Binding CollectionTwo}">Di2015NewLine
15525291Di2015UniqueSeparator<asp:TemplateField HeaderText="Name" SortExpression="Name">Di2015NewLine        <ItemTemplate>Di2015NewLine            <asp:Label runat="server" ID="lblName" Text='<%# Server.HtmlEncode(Convert.ToString(Eval("Bla.Blaat"))) %>' />Di2015NewLine        </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
15525310Di2015UniqueSeparatorpublic bool Save<T>(T entity) where T : classDi2015NewLine{ ... some storage logic ... }Di2015NewLineDi2015NewLinepublic bool Save(SpecificClass entity)Di2015NewLine{ ... special logic ... }Di2015NewLine
15525419Di2015UniqueSeparatorList.Sort(Comparer<T>)
15525419Di2015UniqueSeparatorIComparer<T>
15525419Di2015UniqueSeparatorList.Sort(IComparer<T>)
15525419Di2015UniqueSeparatorclass SortComparer<T>: IComparer<T>Di2015NewLine{Di2015NewLine    private readonly Comparison<T> _compare;Di2015NewLine    public SortComparer(Comparison<T> comp)Di2015NewLine    {Di2015NewLine        _compare = comp;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Compare(T x, T y)Di2015NewLine    {Di2015NewLine        return _compare(x, y);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic Sort(Comparison<T> comp)Di2015NewLine{Di2015NewLine    Sort(new SortComparer(comp));Di2015NewLine}Di2015NewLine
15525419Di2015UniqueSeparatorSort(IComparer<T>)
15525419Di2015UniqueSeparatorIComparer
15525442Di2015UniqueSeparatorstring
15525442Di2015UniqueSeparatorFunc<string> f = () => { return "hello"; };Di2015NewLinestring test = f();Di2015NewLine
15525442Di2015UniqueSeparatorstring test = (new Func<string>(() => { return "hello"; }))();Di2015NewLine
15525460Di2015UniqueSeparatorvar bmp = new Bitmap(pictureBox1.Width, pictureBox1.Height);Di2015NewLineDi2015NewLineusing (var graphics = Graphics.FromImage(bmp))Di2015NewLine{Di2015NewLine    // ...Di2015NewLine    graphics.DrawImage(...);Di2015NewLine    // ...Di2015NewLine}Di2015NewLineDi2015NewLinebmp.Save("c:\\\\test.png", ImageFormat.Png);Di2015NewLine
15525614Di2015UniqueSeparatorfrm
15525614Di2015UniqueSeparatorpublic void SetFormProperties(Form frm){Di2015NewLine    frm.Size = new Size(20,20);Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15525614Di2015UniqueSeparatorvar frm = new Form1();Di2015NewLineSetFormProperties(frm);Di2015NewLine
15525643Di2015UniqueSeparatorMajorUpgrade/@Schedule='afterInstallInitialize'
15525643Di2015UniqueSeparatorMajorUpgrade/@Schedule='afterInstallExecute'
15525643Di2015UniqueSeparatorMajorUpgrade/@Schedule='afterInstallExecuteAgain'
15525643Di2015UniqueSeparatorServiceControl
15525968Di2015UniqueSeparatorSub TestFind()Di2015NewLineDi2015NewLine  Dim myRange As RangeDi2015NewLineDi2015NewLine  Set myRange = ActiveDocument.Content    '    search entire documentDi2015NewLineDi2015NewLine  With myRange.FindDi2015NewLineDi2015NewLine    .Highlight = TrueDi2015NewLineDi2015NewLine    Do While .Execute = True     '   loop while highlighted text is foundDi2015NewLineDi2015NewLine      Debug.Print myRange.Text   '   myRange is changed to contain the found textDi2015NewLineDi2015NewLine    LoopDi2015NewLineDi2015NewLine  End WithDi2015NewLineDi2015NewLineEnd SubDi2015NewLine
15526146Di2015UniqueSeparatorSession
15526146Di2015UniqueSeparatorSession
15526146Di2015UniqueSeparatorSession
15526146Di2015UniqueSeparatorvar cssFile = Session["UserStyle"];Di2015NewLine
15526208Di2015UniqueSeparator  /// Form ADi2015NewLineDi2015NewLineDi2015NewLine       public void loaddata()Di2015NewLine{Di2015NewLine          ////do what you do in load data in order to update data in datagridDi2015NewLine} Di2015NewLine
15526208Di2015UniqueSeparator// Form BDi2015NewLineDi2015NewLine   FormA obj = (FormA)Application.OpenForms["FormA"];Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine          obj.loaddata();Di2015NewLine         datagridview1.update();Di2015NewLine         datagridview1.refresh();            Di2015NewLine        }Di2015NewLine
15526321Di2015UniqueSeparatorvar x = from a in xelement.Descendants("MainItem")Di2015NewLine                          .Descendants()Di2015NewLine        where a.Attribute("value") != null && Di2015NewLine              a.Attribute("value").ValueDi2015NewLine                                  .Equals(txtSifra.Text, Di2015NewLine                                          StringComparison.InvariantCultureIgnoreCase)Di2015NewLine        select a;Di2015NewLineforeach (XElement xEle in x)Di2015NewLine{Di2015NewLine        // items will contain all nodes (inclusive) between MainItem and xEleDi2015NewLine        var items = xEle.AncestorsAndSelf()Di2015NewLine                        .Where(x1 => x1.AncestorsAndSelf("MainItem")Di2015NewLine                                       .Any())Di2015NewLine                        .OrderBy(x1 => x1.Ancestors().Count());Di2015NewLine        var names = items.Attributes("name").Select(a => a.Value).ToArray();Di2015NewLine        Console.WriteLine(string.Join(" - ", names));Di2015NewLine}Di2015NewLine
15526321Di2015UniqueSeparatorTraffic - VendorsDi2015NewLineTraffic - Accounts - Home AccountsDi2015NewLine
15526374Di2015UniqueSeparatorstatic
15526374Di2015UniqueSeparatorpublic event TransmitManagerEventHandler OnTrafficSendingActive;Di2015NewLinepublic event TransmitManagerEventHandler OnTrafficSendingInactive;Di2015NewLine
15526375Di2015UniqueSeparatoritem.m_ItemType
15526375Di2015UniqueSeparatorm_ItemType
15526375Di2015UniqueSeparatorItemType
15526375Di2015UniqueSeparator// your enumDi2015NewLinepublic enum ItemTypeDi2015NewLine{Di2015NewLineÂ  Â  Unknown = 0,Di2015NewLineÂ  Â  //Di2015NewLineÂ  Â  Physical = 1,Di2015NewLineÂ  Â  //Di2015NewLineÂ  Â  Logical = 2,Di2015NewLine}Di2015NewLineDi2015NewLine// your modelDi2015NewLinepublic class ItemToSendDi2015NewLine{Di2015NewLine    pubic ItemType m_ItemType { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine// in your actionDi2015NewLineprivate static List<ItemType> BuildListItem(IEnumerable<ItemToSend> listItemToSend)Di2015NewLine{Di2015NewLine    ...Di2015NewLine      switch (item.m_ItemType)Di2015NewLine      {Di2015NewLine          case ItemType.Unknown:Di2015NewLine             itemToAdd.Type = AnotherEnumValue.Unknown;Di2015NewLine             break;Di2015NewLine          case ItemType.Physical:Di2015NewLine             itemToAdd.Type = AnotherEnumValue.Physical;Di2015NewLine             break;Di2015NewLine          case ItemType.Logical:Di2015NewLine             itemToAdd.Type = AnotherEnumValue.Logical;Di2015NewLine             break;Di2015NewLine      } Di2015NewLine    ...Di2015NewLine}   Di2015NewLine
15526376Di2015UniqueSeparatorif (StartDate.Date == EndDate.Date) { return Hours; }Di2015NewLineelse if (EndDate.Date != CurrentDay.Date) { return DayHours; }Di2015NewLineelse if (StartDate.Date <= CurrentDate.Date && EndDate.Date > CurrentDate.Date) { return Hours % DayHours; }Di2015NewLineelse return 0;Di2015NewLine
15526463Di2015UniqueSeparatorstring myMethod() { return DateTime.Now.ToString(); }Di2015NewLine
15526520Di2015UniqueSeparatorpublic EventHandler ErrorChanged;Di2015NewLine
15526520Di2015UniqueSeparatorpublic event EventHandler ErrorChanged;Di2015NewLine
15526565Di2015UniqueSeparatorEmbed Interop Types
15526565Di2015UniqueSeparatorFalse
15526565Di2015UniqueSeparatorMicrosoft.Office.Interop.Excel
15526696Di2015UniqueSeparatorMyData.Where(d => Field1.Replace(" ","").Contains("ABCDEFG"))Di2015NewLine    .AsEnumerable()Di2015NewLine    .OrderBy(d => Convert.ToInt32(Regex.Split(d.Field2, @"\\D+")[0]))Di2015NewLine    .Take(50)Di2015NewLine    .Select(d => d.Field2);Di2015NewLine
15526731Di2015UniqueSeparatorRichTextBox
15526731Di2015UniqueSeparatoris
15526731Di2015UniqueSeparatorforeach (Control control in this.ActiveMdiChild.Controls)Di2015NewLine{Di2015NewLine    if (control is RichTextBox)Di2015NewLine    {Di2015NewLine        RichTextBox rtfChild = (RichTextBox)control;Di2015NewLine        // From here on you can use rtfChild as any other RichTextBox control.Di2015NewLine    }Di2015NewLine}Di2015NewLine
15526731Di2015UniqueSeparatorRichTextBox
15526731Di2015UniqueSeparatorbool found = false;Di2015NewLineforeach (Control control in this.ActiveMdiChild.Controls)Di2015NewLine{Di2015NewLine    if (control is RichTextBox)Di2015NewLine    {Di2015NewLine        found = true;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineif (found)Di2015NewLine{Di2015NewLine}Di2015NewLine
15526731Di2015UniqueSeparatorRichTextBox
15526731Di2015UniqueSeparatorRichTextBox
15526731Di2015UniqueSeparatornull
15526751Di2015UniqueSeparator        public Form1()Di2015NewLine     {Di2015NewLine         InitializeComponent();Di2015NewLine         InitializeChart();Di2015NewLine     }Di2015NewLineDi2015NewLine    // Steema.TeeChart.Styles.FastLine Series1;Di2015NewLineDi2015NewLine     Timer timer1, timer2,timer3, timer4;Di2015NewLine     Random r;Di2015NewLine     DateTime dt;Di2015NewLine   DateTime[] Xvalues1;Di2015NewLine   double[] Yvalues1; Di2015NewLine     Steema.TeeChart.TChart tChart1, tChart2, tChart3,tChart4;Di2015NewLine     private void InitializeChart()Di2015NewLine     {Di2015NewLineDi2015NewLine         tChart1 = new TChart();Di2015NewLine         tChart2 = new TChart();Di2015NewLine         tChart3 = new TChart();Di2015NewLine         tChart4 = new TChart();Di2015NewLine         this.Controls.Add(tChart1);Di2015NewLine         this.Controls.Add(tChart2);Di2015NewLine         this.Controls.Add(tChart3);Di2015NewLine         this.Controls.Add(tChart4);Di2015NewLineDi2015NewLine         //Initialize Locations and sizeDi2015NewLineDi2015NewLine         this.Width = 908;Di2015NewLine         this.Height = 600;Di2015NewLineDi2015NewLine         //LocationDi2015NewLine         tChart1.Left = 12;Di2015NewLine         tChart1.Top = 53;Di2015NewLine         tChart2.Left = 468;Di2015NewLine         tChart2.Top = 53;Di2015NewLine         tChart3.Left = 12;Di2015NewLine         tChart3.Top = 318;Di2015NewLine         tChart4.Left = 468;Di2015NewLine         tChart4.Top = 318;Di2015NewLineDi2015NewLine         //SizeDi2015NewLine         tChart1.Width = 373;Di2015NewLine         tChart1.Height = 236;Di2015NewLine         tChart2.Width = 373;Di2015NewLine         tChart2.Height = 236;Di2015NewLine         tChart3.Width = 373; Di2015NewLine         tChart3.Height = 236;Di2015NewLine         tChart4.Width = 373;Di2015NewLine         tChart4.Height = 236;      Di2015NewLineDi2015NewLine         tChart1.Aspect.View3D = false;Di2015NewLine         tChart2.Aspect.View3D = false;Di2015NewLine         tChart3.Aspect.View3D = false;Di2015NewLine         tChart4.Aspect.View3D = false;Di2015NewLineDi2015NewLine         tChart1.Legend.Visible = false;Di2015NewLine         tChart2.Legend.Visible = false;Di2015NewLine         tChart3.Legend.Visible = false;Di2015NewLine         tChart4.Legend.Visible = false;Di2015NewLineDi2015NewLineDi2015NewLine         tChart1.Panel.Gradient.Visible = false;Di2015NewLine         tChart2.Panel.Gradient.Visible = false;Di2015NewLine         tChart3.Panel.Gradient.Visible = false;Di2015NewLine         tChart4.Panel.Gradient.Visible = false;Di2015NewLineDi2015NewLineDi2015NewLine         tChart1.Axes.Bottom.AxisPen.Visible = false;Di2015NewLine         tChart2.Axes.Bottom.AxisPen.Visible = false;Di2015NewLine         tChart3.Axes.Bottom.AxisPen.Visible = false;Di2015NewLine         tChart4.Axes.Bottom.AxisPen.Visible = false;Di2015NewLineDi2015NewLine         tChart1.Axes.Left.AxisPen.Visible = false;Di2015NewLine         tChart2.Axes.Left.AxisPen.Visible = false;Di2015NewLine         tChart3.Axes.Left.AxisPen.Visible = false;Di2015NewLine         tChart4.Axes.Left.AxisPen.Visible = false;Di2015NewLineDi2015NewLine         //SeriesDi2015NewLine         tChart1.AutoRepaint = false;Di2015NewLine         tChart2.AutoRepaint = false;Di2015NewLine         tChart3.AutoRepaint = false;Di2015NewLine         tChart4.AutoRepaint = false;Di2015NewLineDi2015NewLine         for (int i = 0; i < 4; i++)Di2015NewLine         {Di2015NewLine             new Steema.TeeChart.Styles.FastLine(tChart1.Chart);Di2015NewLine             new Steema.TeeChart.Styles.FastLine(tChart2.Chart);Di2015NewLine             new Steema.TeeChart.Styles.FastLine(tChart3.Chart);Di2015NewLine             new Steema.TeeChart.Styles.FastLine(tChart4.Chart);Di2015NewLineDi2015NewLine             tChart1[i].XValues.DateTime=true;Di2015NewLine             tChart2[i].XValues.DateTime = true;Di2015NewLine             tChart3[i].XValues.DateTime = true;Di2015NewLine             tChart4[i].XValues.DateTime = true;Di2015NewLine             InitialDataSeries(tChart1[i]);Di2015NewLine             InitialDataSeries(tChart2[i]);Di2015NewLine             InitialDataSeries(tChart3[i]);Di2015NewLine             InitialDataSeries(tChart4[i]);Di2015NewLineDi2015NewLine         }Di2015NewLineDi2015NewLine         //Axes labelsDi2015NewLine         tChart1.Axes.Bottom.Labels.DateTimeFormat = "dd/MM";Di2015NewLine         tChart1.Axes.Bottom.Labels.Angle = 90;Di2015NewLine         tChart2.Axes.Bottom.Labels.DateTimeFormat = "dd/MM";Di2015NewLine         tChart2.Axes.Bottom.Labels.Angle = 90;Di2015NewLine         tChart3.Axes.Bottom.Labels.DateTimeFormat = "dd/MM";Di2015NewLine         tChart3.Axes.Bottom.Labels.Angle = 90;Di2015NewLine         tChart4.Axes.Bottom.Labels.DateTimeFormat = "dd/MM";Di2015NewLine         tChart4.Axes.Bottom.Labels.Angle = 90;Di2015NewLine         tChart1.AutoRepaint = true;Di2015NewLine         tChart2.AutoRepaint = true;Di2015NewLine         tChart3.AutoRepaint = true;Di2015NewLine         tChart4.AutoRepaint = true;Di2015NewLine         tChart1.Refresh();Di2015NewLine         tChart2.Refresh();Di2015NewLine         tChart3.Refresh();Di2015NewLine         tChart4.Refresh();Di2015NewLineDi2015NewLine         //TimerDi2015NewLine         timer1 = new Timer();Di2015NewLine         timer1.Start();Di2015NewLine         timer1.Interval = 100;Di2015NewLine         timer1.Tick += new EventHandler(timer1_Tick);Di2015NewLineDi2015NewLine     }Di2015NewLineDi2015NewLine     void timer1_Tick(object sender, EventArgs e)Di2015NewLine     {Di2015NewLine         //See the chart data updated.Di2015NewLine         tChart1[0].Visible = false;Di2015NewLine         tChart1[1].Visible = false;Di2015NewLine         tChart1[2].Visible = false;Di2015NewLine         PopulateSeries(tChart1[3]);Di2015NewLine         PopulateSeries(tChart2[3]);Di2015NewLine         PopulateSeries(tChart3[3]);Di2015NewLine         PopulateSeries(tChart4[3]);Di2015NewLineDi2015NewLine     }Di2015NewLine     private void PopulateSeries(Steema.TeeChart.Styles.Series Series1)Di2015NewLine     {Di2015NewLine         r = new Random();Di2015NewLine         dt = DateTime.Now;Di2015NewLine         tChart1.AutoRepaint = false;Di2015NewLine         tChart2.AutoRepaint = false;Di2015NewLine         tChart3.AutoRepaint = false;Di2015NewLine         tChart4.AutoRepaint = false; Di2015NewLine         // show only 50 points - delete the restDi2015NewLine         while (Series1.Count > 10000)Di2015NewLine         {Di2015NewLine             Series1.Delete(0);Di2015NewLineDi2015NewLine         }Di2015NewLine         if (Series1.Count > 10000)Di2015NewLine         {Di2015NewLine            Series1.Delete(0);Di2015NewLineDi2015NewLine         }Di2015NewLine         elseDi2015NewLine         {Di2015NewLine             for (int t = 0; t < 100; t++)Di2015NewLine             {Di2015NewLineDi2015NewLine                 Series1.Add(dt, r.Next(1000));Di2015NewLine                 dt = dt.AddSeconds(15);Di2015NewLine             }Di2015NewLine         }Di2015NewLine         tChart1.AutoRepaint = true;Di2015NewLine         tChart2.AutoRepaint = true;Di2015NewLine         tChart3.AutoRepaint = true;Di2015NewLine         tChart4.AutoRepaint = true;Di2015NewLine         tChart1.Refresh();Di2015NewLine         tChart2.Refresh();Di2015NewLine         tChart3.Refresh();Di2015NewLine         tChart4.Refresh();Di2015NewLine     }Di2015NewLineDi2015NewLine     private void InitialDataSeries(Steema.TeeChart.Styles.Series Series1)Di2015NewLine     {    Di2015NewLine         //ArraysDi2015NewLine         dt = DateTime.Now;Di2015NewLine         r = new Random();Di2015NewLine         Xvalues1 = new DateTime[18000];Di2015NewLine         Yvalues1 = new double[18000];Di2015NewLine         (Series1 as Steema.TeeChart.Styles.FastLine).DrawAllPoints = false;Di2015NewLine         for (int j = 0; j < 18000; j++)Di2015NewLine         {Di2015NewLine             Xvalues1[j] = dt;Di2015NewLine             dt = dt.AddSeconds(15);Di2015NewLine             Yvalues1[j] = r.Next(1000);Di2015NewLine         }Di2015NewLineDi2015NewLine         Series1.Add(Xvalues1, Yvalues1);Di2015NewLine     }Di2015NewLine
15526815Di2015UniqueSeparator<Grid DataContext = "{Binding}">
15526815Di2015UniqueSeparatorclass RelayCommand : ICommandDi2015NewLine{Di2015NewLine    private Action<object> _action;Di2015NewLineDi2015NewLine    public RelayCommand(Action<object> action)Di2015NewLine    {Di2015NewLine        _action = action;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region ICommand MembersDi2015NewLineDi2015NewLine    public bool CanExecute(object parameter)Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler CanExecuteChanged;Di2015NewLineDi2015NewLine    public void Execute(object parameter)Di2015NewLine    {Di2015NewLine            _action(parameter);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
15526815Di2015UniqueSeparator    public ICommand BrowseCommand {get; set;}Di2015NewLine    public ICommand SearchCommand {get; set;}Di2015NewLineDi2015NewLine    public ExampleViewModel()Di2015NewLine    {Di2015NewLine        this.BrowseCommand = new RelayCommand(new action<object>(MethodNameEnteredHere);Di2015NewLine        this.SearchCommand = new RelayCommand(new action<object>(OtherMethodNameEnteredHere);Di2015NewLine    }Di2015NewLine
15526815Di2015UniqueSeparator<Grid DataContext = "{Binding}">Di2015NewLine       <Button  Content="Browse" Command="{Binding BrowseCommand}"/>Di2015NewLine       <Button  Content="Search" Command="{Binding SearchCommand}"  />Di2015NewLine </Grid>Di2015NewLine
15526847Di2015UniqueSeparatorusing(MemoryStream stream = new MemoryStream())Di2015NewLineusing(StreamWriter writer = new StreamWriter(stream))Di2015NewLine{Di2015NewLine    writer.Write(s);Di2015NewLine    writer.Flush();Di2015NewLine    stream.Position = 0;Di2015NewLine    return File(stream, "text/csv", "ClusterFMCacheExport.csv");Di2015NewLine}Di2015NewLine
15526847Di2015UniqueSeparatorToCsv()
15526847Di2015UniqueSeparatorstream
15526847Di2015UniqueSeparatorstring
15527064Di2015UniqueSeparatorclass Program {Di2015NewLine    static void Main(string[] args) {Di2015NewLine        List<string> data = new List<string>();Di2015NewLine        foreach (var item in data.FailIfEmpty(new Exception("List is empty"))) {Di2015NewLine            // do stuffDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic static class Extensions {Di2015NewLine    public static IEnumerable<T> FailIfEmpty<T>(this IEnumerable<T> collection, Exception exception) {Di2015NewLine        if (!collection.Any()) {Di2015NewLine            throw exception;Di2015NewLine        }Di2015NewLine        return collection;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15527074Di2015UniqueSeparatorref
15527197Di2015UniqueSeparator    string word = "Aword";Di2015NewLine    if (word.StartsWith("A")) Di2015NewLine    {Di2015NewLine        // do somethingDi2015NewLine    }Di2015NewLine
15527197Di2015UniqueSeparator    public static bool StartsWithAny(this string source, IEnumerable<string> strings)Di2015NewLine    {Di2015NewLine        foreach (var valueToCheck in strings)Di2015NewLine        {Di2015NewLine            if (source.StartsWith(valueToCheck))Di2015NewLine            {Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    if (word.StartsWithAny(new List<string>() { "A", "B", "C" })) Di2015NewLine    {Di2015NewLine        // do somethingDi2015NewLine    }Di2015NewLine
15527197Di2015UniqueSeparator    public static bool StartsWithAny(this string source, IEnumerable<string> strings, out string startsWithValue)Di2015NewLine    {Di2015NewLine        startsWithValue = null;Di2015NewLineDi2015NewLine        foreach (var valueToCheck in strings)Di2015NewLine        {Di2015NewLine            if (source.StartsWith(valueToCheck))Di2015NewLine            {Di2015NewLine                startsWithValue = valueToCheck;Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return false;Di2015NewLine    }Di2015NewLine
15527197Di2015UniqueSeparator    string word = "AWord";Di2015NewLine    string startsWithValue;Di2015NewLine    if (word.StartsWithAny(new List<string>() { "a", "b", "c" }, out startsWithValue))Di2015NewLine    {Di2015NewLine        switch (startsWithValue)Di2015NewLine        {Di2015NewLine            case "A":Di2015NewLine                // Do SomethingDi2015NewLine                break;Di2015NewLineDi2015NewLine            // etc.Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15527355Di2015UniqueSeparatorprivate void cmbValue_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)Di2015NewLine    {Di2015NewLine        ComboBox cmb = sender as ComboBox;Di2015NewLine        cmb.Items.Clear();Di2015NewLineDi2015NewLine        //Iterates through all virtual tablesDi2015NewLine        foreach (TableContainer table in parentTable.ParentVisualQueryBuilder.ListOpenUnjoinedTables)Di2015NewLine        {Di2015NewLine            ComboBoxItem item = new ComboBoxItem();Di2015NewLine            item.MouseMove += item_MouseMove;Di2015NewLineDi2015NewLine            if (table.IsVirtual == false)Di2015NewLine            {Di2015NewLine                item.Content = "[" + table.TableDescription + "]";Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                item.Content = "[" + table.View.Name + "]";Di2015NewLine            }Di2015NewLineDi2015NewLine            item.Tag = table;Di2015NewLine            cmb.Items.Add(item);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15527355Di2015UniqueSeparatorvar comboBoxItem1 = new ComboBoxItem();Di2015NewLinevar comboBoxItem2 = new ComboBoxItem();Di2015NewLinecmb.Items.Add(comboBoxItem1);Di2015NewLinecmb.Items.Add(comboBoxItem2);Di2015NewLineDi2015NewLinecomboBoxItem1.Content = "1";Di2015NewLineDi2015NewLinecomboBoxItem1.MouseMove += (s, args) =>Di2015NewLine{Di2015NewLine    MessageBox.Show("1");Di2015NewLine};Di2015NewLineDi2015NewLinecomboBoxItem2.Content = "2";Di2015NewLinecomboBoxItem2.MouseMove += (s, args) =>Di2015NewLine{Di2015NewLine    MessageBox.Show("2");Di2015NewLine};Di2015NewLine
15527355Di2015UniqueSeparatorvar comboBoxItem1 = new Label();//or use textBolckDi2015NewLinevar comboBoxItem2 = new Label();//or use textBolckDi2015NewLinecombo.Items.Add(comboBoxItem1);Di2015NewLinecombo.Items.Add(comboBoxItem2);Di2015NewLineDi2015NewLinecomboBoxItem1.Content = "1";Di2015NewLineDi2015NewLinecomboBoxItem1.MouseEnter += (s, args) =>Di2015NewLine{Di2015NewLine     MessageBox.Show("1");Di2015NewLine};Di2015NewLineDi2015NewLineDi2015NewLinecomboBoxItem2.Content = "2";Di2015NewLinecomboBoxItem2.MouseEnter += (s, args) =>Di2015NewLine{Di2015NewLine     MessageBox.Show("2");Di2015NewLine};Di2015NewLine
15527396Di2015UniqueSeparator<configuration>Di2015NewLine  <runtime>Di2015NewLine    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">Di2015NewLine      <probing privatePath="C:\\myDLLDirectory\\" />Di2015NewLine    </assemblyBinding>Di2015NewLine  </runtime>Di2015NewLine</configuration>Di2015NewLine
15527457Di2015UniqueSeparatorSSPROP_FASTLOADOPTIONS -> ORDER(Column)
15527497Di2015UniqueSeparator           List<string> myList1 = new List<string>() { "http://www.google.com/?parm=vlue"};Di2015NewLineDi2015NewLine            var uris = myList1.Select(u => new Uri(u));Di2015NewLineDi2015NewLine            foreach (var uri in uris)Di2015NewLine            {Di2015NewLineDi2015NewLine                //"http"Di2015NewLine                var schema = uri.Scheme;Di2015NewLineDi2015NewLine                //www.google.comDi2015NewLine                var host = uri.Host;Di2015NewLineDi2015NewLine                //"?parm=vlue"Di2015NewLine                var query = uri.Query;Di2015NewLine            }Di2015NewLine
15527497Di2015UniqueSeparatorUri.IsWellFormedUriString(myURL, UriKind.RelativeOrAbsolute)Di2015NewLine
15527497Di2015UniqueSeparatorIList<string> wellFormalteUriStrings = myList1.FindAll(url => Uri.IsWellFormedUriString(url, UriKind.Absolute));Di2015NewLine
15527524Di2015UniqueSeparatorLeaderBoardRank
15527524Di2015UniqueSeparatormyObject
15527524Di2015UniqueSeparatorMyObject
15527524Di2015UniqueSeparatorLeaderBoardRank
15527524Di2015UniqueSeparatorvar usersSummary = Context.[myStoredProcedure];Di2015NewLineDi2015NewLinereturn usersSummary.OrderByDescending(x => x.TotalPoints)Di2015NewLine                   .Select((x, i) => new [myObject]Di2015NewLine{Di2015NewLine    UserId = x.UserID,Di2015NewLine    FirstName = x.FirstName,Di2015NewLine    LastName = x.LastName,Di2015NewLine    TotalPoints = x.TotalPoints,Di2015NewLine    LeaderBoardRank = iDi2015NewLine    Email = x.Email,Di2015NewLine    CreatedDate = x.CreatedDateDi2015NewLine}).ToList();Di2015NewLine
15527551Di2015UniqueSeparatorDocument
15527553Di2015UniqueSeparatorresourceDictionary
15527553Di2015UniqueSeparatorIDictionary<TKey, TValue>
15527553Di2015UniqueSeparatorint cell = 1;Di2015NewLineforeach (var item in resourceDictionary)Di2015NewLine{Di2015NewLine    excelSheet.Cells[cell, 1] = item.Key;Di2015NewLine    excelSheet.Cells[cell, 2] = item.Value;Di2015NewLine    cell++;Di2015NewLine}Di2015NewLine
15527627Di2015UniqueSeparatorif not exists (select 1 from Recipients where ID == 1234)Di2015NewLine    insert Recipients (...) values (...)Di2015NewLineif not exists (select 1 from Recipients where ID == 1235)Di2015NewLine    insert Recipients (...) values (...)Di2015NewLine
15527627Di2015UniqueSeparatorHashSet
15527627Di2015UniqueSeparatorHashSet
15527627Di2015UniqueSeparatornot exists
15527627Di2015UniqueSeparatorin
15527657Di2015UniqueSeparatorAssemblyDefinition asm = AssemblyFactory.GetAssembly("myassembly.dll");Di2015NewLineDi2015NewLineforeach (ModuleDefinition module in asm.Modules)Di2015NewLine{Di2015NewLine    Console.WriteLine("Module " + module.Name);Di2015NewLine    Console.WriteLine("IsPE64 " + module.Image.PEOptionalHeader.StandardFields.IsPE64);Di2015NewLine}Di2015NewLine
15527660Di2015UniqueSeparatorComplete
15527660Di2015UniqueSeparatorComplete
15528024Di2015UniqueSeparatorDataTable
15528024Di2015UniqueSeparator//Cast to enumerable of `DataRow` and filter on your conditionDi2015NewLinevar rows = dt.Rows.Cast<DataRow>().Where(row => row["BASELINE_FOLDER"] == baselineSubFolder && row["BASELINE_FILE" == baselineFilenameDi2015NewLine&& row["BASELINE_CHECKSUM"] == baselineChecksum).ToArray();Di2015NewLine//Loop through and remove the rows that meet the conditionDi2015NewLineforeach(DataRow dr in rows)Di2015NewLine{Di2015NewLine  dt.Rows.Remove(dr);Di2015NewLine}Di2015NewLine
15528301Di2015UniqueSeparatorpublic class FooDi2015NewLine{Di2015NewLine    public string Bar { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic void SomeStrangeMethod()Di2015NewLine{Di2015NewLine    Foo foo = new Foo() { Bar = "Hello" };Di2015NewLine    string result = GetName(()=>foo.Bar);  // should return "Bar"Di2015NewLine    Debug.WriteLine(result); // "Bar"Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static string GetName<T>(Expression<Func<T>> expression)Di2015NewLine{Di2015NewLine    return ExtractPropertyName(expression);Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Extracts the name of a property from a suitable LambdaExpression.Di2015NewLine/// </summary>Di2015NewLine/// <param name="propertyExpression">The property expression.</param>Di2015NewLine/// <returns></returns>Di2015NewLinepublic static string ExtractPropertyName(LambdaExpression propertyExpression)Di2015NewLine{Di2015NewLine    if (propertyExpression == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentNullException("propertyExpression");Di2015NewLine    }Di2015NewLineDi2015NewLine    var memberExpression = propertyExpression.Body as MemberExpression;Di2015NewLine    if (memberExpression == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentException(@"Not a member expression", "propertyExpression");Di2015NewLine    }Di2015NewLineDi2015NewLine    var property = memberExpression.Member as PropertyInfo;Di2015NewLine    if (property == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentException(@"Not a property", "propertyExpression");Di2015NewLine    }Di2015NewLineDi2015NewLine    var getMethod = property.GetGetMethod(true);Di2015NewLine    if (getMethod.IsStatic)Di2015NewLine    {Di2015NewLine        throw new ArgumentException(@"Can't be static", "propertyExpression");Di2015NewLine    }Di2015NewLineDi2015NewLine    return memberExpression.Member.Name;Di2015NewLine}Di2015NewLine
15528353Di2015UniqueSeparatorintervalUpdating
15528353Di2015UniqueSeparatorintervalChanged()
15528353Di2015UniqueSeparator    private void nudSeconds_ValueChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        intervalChanged();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void nudMilliseconds_ValueChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        intervalChanged();Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool intervalUpdating = false;Di2015NewLine    private void intervalChanged()Di2015NewLine    {Di2015NewLine        if (intervalUpdating)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        intervalUpdating = true;Di2015NewLineDi2015NewLine        if (nudMilliseconds.Value >= 1000)Di2015NewLine        {Di2015NewLine            var val = (int)nudMilliseconds.Value / 1000;Di2015NewLine            nudSeconds.Value += val;Di2015NewLine            nudMilliseconds.Value = (nudMilliseconds.Value - (val * 1000));Di2015NewLine        }Di2015NewLineDi2015NewLine        if (nudSeconds.Value >= 60)Di2015NewLine        {Di2015NewLine            var val = (int)nudSeconds.Value / 60;Di2015NewLine            nudMinutes.Value += val;Di2015NewLine            nudSeconds.Value = (nudSeconds.Value - (val * 60));Di2015NewLine        }Di2015NewLineDi2015NewLine        intervalUpdating = false;Di2015NewLine    }Di2015NewLine
15528536Di2015UniqueSeparatorpublic static string ClassToString(Object o)Di2015NewLine{Di2015NewLine    Type type = o.GetType();Di2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLine    foreach (FieldInfo field in type.GetFields())Di2015NewLine    {Di2015NewLine        sb.Append(field.Name).AppendLine(": ");Di2015NewLine        sb.AppendLine(field.GetValue(o).ToString());Di2015NewLine    }Di2015NewLine    foreach (PropertyInfo property in type.GetProperties())Di2015NewLine    {Di2015NewLine        sb.Append(property.Name).AppendLine(": ");Di2015NewLine        sb.AppendLine(property.GetValue(o, null).ToString());Di2015NewLine    }Di2015NewLine    return sb.ToString();Di2015NewLine}Di2015NewLine
15528652Di2015UniqueSeparatorin
15528652Di2015UniqueSeparatorIComparable<Person> foo = ...;Di2015NewLineIComparable<Programmer> bar = foo;Di2015NewLine
15528652Di2015UniqueSeparatorin
15528704Di2015UniqueSeparatorwget --recursive --http-user=user --http-password=password --accept=.aspx www.hostname.comDi2015NewLine
15528753Di2015UniqueSeparatorWebRequest
15528860Di2015UniqueSeparatorList<string> ListBoxItems = new List<string>();
15528860Di2015UniqueSeparatorToString
15528860Di2015UniqueSeparator(name + members);Di2015NewLine
15528860Di2015UniqueSeparatorListBoxItems
15528860Di2015UniqueSeparatorList<Artist>
15528860Di2015UniqueSeparatorforeach (string artist in ListBoxItems)Di2015NewLine{Di2015NewLine    listBox1.Items.Add(artist.Name);Di2015NewLine    listBox2.Items.Add(artist.Members);Di2015NewLine}Di2015NewLine
15528860Di2015UniqueSeparatorListBoxNames
15528860Di2015UniqueSeparatorListBoxMembers
15528860Di2015UniqueSeparatorArtistTree
15528860Di2015UniqueSeparatorIEnumerable
15528860Di2015UniqueSeparatorforeach (Artist artist in ArtistTree)Di2015NewLine{Di2015NewLine    listBox1.Items.Add(artist.Name);Di2015NewLine    listBox2.Items.Add(artist.Members);Di2015NewLine}Di2015NewLine
15529082Di2015UniqueSeparator@foreach (string s in Model.ReferralTypeNames)Di2015NewLine{Di2015NewLine    @Html.DisplayFor(m => s)<br />Di2015NewLine}Di2015NewLine
15529440Di2015UniqueSeparatorIEnumerable<XElement>
15529440Di2015UniqueSeparatorXElement
15529440Di2015UniqueSeparatorpublic static void updateStatus(string user, string file, string status)Di2015NewLine{Di2015NewLine    XDocument doc = XDocument.Load(@"C:\\Projects\\ConsoleApp\\XMLDocument.xml");Di2015NewLineDi2015NewLine    var els = from item in doc.Descendants("dataModule")Di2015NewLine              where item.Descendants("DMC").First().Value == fileDi2015NewLine              select item;Di2015NewLineDi2015NewLine    if (els.Count() > 0)Di2015NewLine    {Di2015NewLine        XElement el = els.First();Di2015NewLine        el.SetElementValue("status", status);Di2015NewLine        el.SetElementValue("currentUser", user);Di2015NewLineDi2015NewLine        doc.Save(@"C:\\Projects\\ConsoleApp\\XMLDocument.xml");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15529467Di2015UniqueSeparatorpublic List<LayerClass> PassengerList { get; private set; }Di2015NewLine
15529467Di2015UniqueSeparatorlistBox1.DisplayMember = "P.Name";Di2015NewLinelistBox1.DataSource = plane.PassengerList;Di2015NewLine
15529467Di2015UniqueSeparatorclass LayerClassDi2015NewLine{Di2015NewLine  private Passenger p;Di2015NewLine  private int ID;Di2015NewLineDi2015NewLine  public Passenger PDi2015NewLine  {Di2015NewLine    get { return p; }Di2015NewLine    set { p = value; }Di2015NewLine  }Di2015NewLineDi2015NewLine  public override string ToString() {Di2015NewLine    if (p == null) {Di2015NewLine      return "No Passenger";Di2015NewLine    } else {Di2015NewLine      return p.Name;Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
15529569Di2015UniqueSeparator.ashx
15529569Di2015UniqueSeparatorvar list =Di2015NewLine    from R in new Command("select top 1 o.name [SENDERNAME], view_url [VIEWURL] from MESSAGE m join OPR_SECD o on UPDATED_BY = O.RECNUM where VIEW_URL like 'conversation.aspx%' and DELIVER_TO in (select OPR_INITIAL from OPR_SECD where recnum = @CURRENT_USER_ID) order by m.RECNUM desc")Di2015NewLine        .AddInt("CURRENT_USER_ID", Common.UserID)Di2015NewLine    select new {Di2015NewLine        VIEWURL = R.GetString("VIEWURL"),Di2015NewLine        SENDERNAME = R.GetString("SENDERNAME") };Di2015NewLinecontext.Response.Write(JsonConverter.SeralizeObject(list));Di2015NewLine
15529569Di2015UniqueSeparatorconvDetails: function() {Di2015NewLine    $.ajax({Di2015NewLine        url: BASE_URL + "pages/services/messages.ashx?method=convdetails",Di2015NewLine        async: true,Di2015NewLine        data: {},Di2015NewLine        success: function(data) {Di2015NewLine            $("a.new-message-alert").attr("href", data[0].VIEWURL);Di2015NewLine            $("a.new-message-alert").text("New  message from: " + data[0].SENDERNAME);Di2015NewLine        }Di2015NewLine    });Di2015NewLine}Di2015NewLine
15529719Di2015UniqueSeparatorvar indent = new string(' ', indentLevel * IndentSize);Di2015NewLine
15529719Di2015UniqueSeparatorIndentSize
15529740Di2015UniqueSeparatorprivate List<List<MyClass>> myClasses { get; set; }Di2015NewLine
15529748Di2015UniqueSeparatorCreateChildControls
15529770Di2015UniqueSeparator(?<name>(?<=<!).*?)>(?<namex>.*?(?=<#))Di2015NewLine
15529770Di2015UniqueSeparator|
15529770Di2015UniqueSeparator>
15529770Di2015UniqueSeparatorname>value
15529870Di2015UniqueSeparator        if (e.Row.RowType == DataControlRowType.Footer)Di2015NewLine        {Di2015NewLine            var but = new LinkButton();Di2015NewLine            but.Text = "Save";Di2015NewLine            e.Row.Cells[0].Controls.Add(but);Di2015NewLine        }      Di2015NewLine
15530109Di2015UniqueSeparatornamespace System.Runtime.CompilerServicesDi2015NewLine{Di2015NewLine    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)]Di2015NewLine    public class ExtensionAttribute : AttributeDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
15530109Di2015UniqueSeparatorvolatile
15530170Di2015UniqueSeparatorTask
15530170Di2015UniqueSeparatorThen
15530170Di2015UniqueSeparatorThen
15530170Di2015UniqueSeparatorpublic Task<TBase> Run()Di2015NewLine{Di2015NewLine  return MethodThatReturnsDerivedTask().Then(x => (TBase)x);Di2015NewLine}Di2015NewLine
15530170Di2015UniqueSeparatorTaskCompletionSource<TBase>
15530170Di2015UniqueSeparatorTryCompleteFromCompletedTask
15530170Di2015UniqueSeparatorpublic Task<TBase> Run()Di2015NewLine{Di2015NewLine  var tcs = new TaskCompletionSource<TBase>();Di2015NewLine  MethodThatReturnsDerivedTask().ContinueWith(Di2015NewLine      t => tcs.TryCompleteFromCompletedTask(t),Di2015NewLine      TaskContinuationOptions.ExecuteSynchronously);Di2015NewLine  return tcs.Task;Di2015NewLine}Di2015NewLine
15530170Di2015UniqueSeparatorpublic Task<TBase> Run()Di2015NewLine{Di2015NewLine  var tcs = new TaskCompletionSource<TBase>();Di2015NewLine  MethodThatReturnsDerivedTask().ContinueWith(t =>Di2015NewLine  {Di2015NewLine    if (t.IsFaulted)Di2015NewLine      tcs.TrySetException(t.Exception.InnerExceptions);Di2015NewLine    else if (t.IsCanceled)Di2015NewLine      tcs.TrySetCanceled();Di2015NewLine    elseDi2015NewLine      tcs.TrySetResult(t.Result);Di2015NewLine  }, TaskContinuationOptions.ExecuteSynchronously);Di2015NewLine  return tcs.Task;Di2015NewLine}Di2015NewLine
15530177Di2015UniqueSeparator(?'marker'(T|I)):(?'content'.+)Di2015NewLine
15530177Di2015UniqueSeparator.+
15530177Di2015UniqueSeparator(?'marker'(T|I)):(?'content'.+?)Di2015NewLine
15530177Di2015UniqueSeparator.+?
15530177Di2015UniqueSeparator([A-Z]+:)(((?![A-Z]+:).)+)Di2015NewLine
15530177Di2015UniqueSeparator(?'marker'[A-Z]+:)(?'content'((?![A-Z]+:).)+)Di2015NewLine
15530220Di2015UniqueSeparator-update
15530384Di2015UniqueSeparatorUserControl
15530384Di2015UniqueSeparatorDependencyProperty
15530384Di2015UniqueSeparatorUserControl
15530384Di2015UniqueSeparatorRelativeSource
15530384Di2015UniqueSeparator public static readonly DependencyProperty SomeProperty = DependencyProperty.Register("Some", typeof (SomeValue), typeof (YourUserControl), new PropertyMetadata(default(SomeValue)));Di2015NewLineDi2015NewLine        public SomeValue SomeDi2015NewLine        {Di2015NewLine            get { return (SomeValue) GetValue(SomeProperty); }Di2015NewLine            set { SetValue(SomeProperty, value); }Di2015NewLine        }Di2015NewLine
15530384Di2015UniqueSeparator<TextBox Text="{Binding Some, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}"/>Di2015NewLine
15530687Di2015UniqueSeparatordata: {Di2015NewLine    name: "Joe"Di2015NewLine}Di2015NewLine
15530687Di2015UniqueSeparatordata: JSON.stringify({name: 'Joe'});Di2015NewLine
15530687Di2015UniqueSeparator <behaviors>Di2015NewLine  <endpointBehaviors>Di2015NewLine    <behavior>Di2015NewLine      <webHttp />Di2015NewLine    </behavior>Di2015NewLine  </endpointBehaviors>Di2015NewLine</behaviors>Di2015NewLine
15530687Di2015UniqueSeparator<behavior name="myBehaviorName">Di2015NewLine      <webHttp />Di2015NewLine</behavior>Di2015NewLineDi2015NewLine<service name="MyWCFServices.HelloWorldService"Di2015NewLine         behaviorConfiguration="MyServiceTypeBehaviors">Di2015NewLine    <endpoint address="" binding="webHttpBinding"Di2015NewLine         contract="MyWCFServices.IHelloWorldService" behaviorConfiguration="myBehaviorName"/>Di2015NewLine    <endpoint contract="IMetadataExchange"Di2015NewLine       binding="mexHttpBinding" address="mex"/>Di2015NewLine  </service>Di2015NewLine
15530764Di2015UniqueSeparator              ...     <Path x:Name="Element"Di2015NewLine                            Fill="{Binding Symbol.Fill, Mode=OneTime}" Stroke="{Binding Symbol.BorderBrush, Mode=OneTime}"Di2015NewLine                            StrokeStartLineCap="Round" StrokeThickness="1" Di2015NewLine                            StrokeLineJoin="Round" StrokeEndLineCap="Round"/>   ...Di2015NewLine
15530788Di2015UniqueSeparatorLU
15530788Di2015UniqueSeparatorC#
15530788Di2015UniqueSeparatorstatic double MatrixDeterminant(double[][] matrix)Di2015NewLine{Di2015NewLine  int[] perm;Di2015NewLine  int toggle;Di2015NewLine  double[][] lum = MatrixDecompose(matrix, out perm, out toggle);Di2015NewLine  if (lum == null)Di2015NewLine    throw new Exception("Unable to compute MatrixDeterminant");Di2015NewLine  double result = toggle;Di2015NewLine  for (int i = 0; i < lum.Length; ++i)Di2015NewLine    result *= lum[i][i];Di2015NewLine  return result;Di2015NewLine}Di2015NewLine
15530788Di2015UniqueSeparatorlum[i][j]
15530788Di2015UniqueSeparatorlum[i,j]
15530796Di2015UniqueSeparatorobtainJSON
15530796Di2015UniqueSeparatorpublic void obtainJSON(Object stateInfo)Di2015NewLine{    Di2015NewLine    Dispatcher.BeginInvoke(() => { Di2015NewLine        string url = "http://xxx.xxx.xxx" + stateInfo.ToString();Di2015NewLine        var client = new WebClient();Di2015NewLine        client.DownloadStringCompleted += new DownloadStringCompletedEventHandler(Decrypt);Di2015NewLine        client.DownloadStringAsync(new Uri(url));Di2015NewLine    });    Di2015NewLine}Di2015NewLine
15530796Di2015UniqueSeparatorWebClient
15530796Di2015UniqueSeparatorDispatcherTimer
15530819Di2015UniqueSeparatorDelegate
15530819Di2015UniqueSeparatorAction
15530819Di2015UniqueSeparatorclass Foo { static object target; }Di2015NewLineDi2015NewLinepublic void Call(ILGenerator il, Action action)Di2015NewLine{Di2015NewLine    Foo.target = action.Target;Di2015NewLine    il.Emit(OpCodes.Ldsfld, typeof(Foo).GetField("target");Di2015NewLine    il.Emit(OpCodes.Callvirt, action.Method);Di2015NewLine}Di2015NewLine
15530819Di2015UniqueSeparatorFoo.target
15530838Di2015UniqueSeparatorvar l = list.Split(' ').Skip(1);Di2015NewLine
15530847Di2015UniqueSeparatorList<T>
15530847Di2015UniqueSeparatorpublic static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> expr1, Expression<Func<T, bool>> expr2)Di2015NewLine  {Di2015NewLine     if (expr1 == null) return expr2;Di2015NewLine     var invokedExpr = Expression.Invoke(expr2, expr1.Parameters.Cast<Expression>());Di2015NewLine     return Expression.Lambda<Func<T, bool>>Di2015NewLine              (Expression.OrElse(expr1.Body, invokedExpr), expr1.Parameters);Di2015NewLine  }Di2015NewLine
15530919Di2015UniqueSeparator    public partial class UserControl1 : UserControlDi2015NewLine{Di2015NewLine    public event EventHandler<EventArgs> CreateNewUserControl = null;Di2015NewLine    public static int InstanceCount = 0;Di2015NewLine    public UserControl1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Loaded += new RoutedEventHandler(UserControl1_Loaded);Di2015NewLine    }Di2015NewLineDi2015NewLine    void UserControl1_Loaded(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        InstanceCount++;Di2015NewLine        txtControl.Text = "Control - " + InstanceCount;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        var handler = CreateNewUserControl;Di2015NewLine        if (handler != null)Di2015NewLine         handler.Invoke(sender,e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15530919Di2015UniqueSeparator   <StackPanel x:Name="UserControlTest" Orientation="Vertical" VerticalAlignment="Top" HorizontalAlignment="Right" Grid.Column="1" Grid.RowSpan="2" ScrollViewer.VerticalScrollBarVisibility="Auto" MaxHeight="800" Margin="30">Di2015NewLineDi2015NewLine            <RadChartProject:UserControl1 x:Name="UserControl1"/>Di2015NewLineDi2015NewLine        </StackPanel>Di2015NewLine
15530919Di2015UniqueSeparator      public MainPage()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        UserControl1.CreateNewUserControl += UserControl1_CreateNewUserControl;Di2015NewLine    }Di2015NewLineDi2015NewLine    void UserControl1_CreateNewUserControl(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if(UserControlTest != null)Di2015NewLine        {Di2015NewLine            var control = new UserControl1();Di2015NewLine            control.CreateNewUserControl += UserControl1_CreateNewUserControl;Di2015NewLine            UserControlTest.Children.Add(control);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15530987Di2015UniqueSeparatorByte   0       = SSL record type = 22 (SSL3_RT_HANDSHAKE)Di2015NewLineBytes 1-2      = SSL version (major/minor)Di2015NewLineBytes 3-4      = Length of data in the record (excluding the header itself).Di2015NewLineByte   5       = Handshake typeDi2015NewLineBytes 6-8      = Length of data to follow in this recordDi2015NewLineBytes 9-n      = Command-specific dataDi2015NewLine
15530987Di2015UniqueSeparator0x16 [0x?? 0x??] [0x?? 0x??] 0x01
15530987Di2015UniqueSeparator0x15 0x?? 0x?? 0x00 0x02 0x02 0x28
15530987Di2015UniqueSeparator<NACK>
15531031Di2015UniqueSeparatorparse
15531031Di2015UniqueSeparatorparse: function (data) {Di2015NewLine    var fields = data.Fields;Di2015NewLine    var result = [];Di2015NewLine    $.each(fields, function (index, item) {Di2015NewLine        result.push({field: item })Di2015NewLine    });Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
15531031Di2015UniqueSeparatorGrid
15531031Di2015UniqueSeparator$("#alias-list-grid").kendoGrid({Di2015NewLine    dataSource: aliasListDataSource,Di2015NewLine    pageable  : trueDi2015NewLine});Di2015NewLine
15531031Di2015UniqueSeparatorgrid
15531031Di2015UniqueSeparatorfield
15531031Di2015UniqueSeparatorfield
15531031Di2015UniqueSeparatorvalue
15531066Di2015UniqueSeparatorProcessImage
15531066Di2015UniqueSeparatorHttpContext
15531066Di2015UniqueSeparatorOnBeginAsync
15531066Di2015UniqueSeparatorcontext
15531066Di2015UniqueSeparatorConcurrentQueue
15531066Di2015UniqueSeparatorcontext
15531066Di2015UniqueSeparatorConcurrentQueue
15531066Di2015UniqueSeparatorcontext
15531066Di2015UniqueSeparatorProcessImage
15531066Di2015UniqueSeparatorcontext
15531066Di2015UniqueSeparatorOnEndAsync
15531066Di2015UniqueSeparatorProcessImage
15531066Di2015UniqueSeparatorOnBeginAsync
15531066Di2015UniqueSeparatorOnEndAsync
15531066Di2015UniqueSeparatorcontext
15531066Di2015UniqueSeparatorProcessImage
15531066Di2015UniqueSeparatorcontext
15531066Di2015UniqueSeparatorConcurrentQueue
15531066Di2015UniqueSeparatorIAsyncResult OnBeginAsync(object sender, EventArgs e, Di2015NewLine                          AsyncCallback cb, object extraData)Di2015NewLine{Di2015NewLine    HttpContext context = ((HttpApplication)sender).Context;Di2015NewLine    EnqueueDelegate enqueueDelegate = new EnqueueDelegate(ProcessImage);Di2015NewLineDi2015NewLine    return enqueueDelegate.BeginInvoke(context, cb, extraData);Di2015NewLine}Di2015NewLineDi2015NewLinepublic void OnEndAsync(IAsyncResult result)Di2015NewLine{Di2015NewLine    // Ensure our ProcessImage has completed in the background.Di2015NewLine    while (!result.IsComplete)Di2015NewLine    {Di2015NewLine        System.Threading.Thread.Sleep(1); Di2015NewLine    }Di2015NewLine}Di2015NewLine
15531066Di2015UniqueSeparatorConcurrentQueue<Action> imageOperations
15531066Di2015UniqueSeparatorEnqueue
15531066Di2015UniqueSeparatorEnqueueDelegate
15531066Di2015UniqueSeparatorProcessImageDelegate
15531066Di2015UniqueSeparatorcontext
15531066Di2015UniqueSeparatorProcessImage
15531066Di2015UniqueSeparatorOnBeginAsync
15531066Di2015UniqueSeparatorProcessImage
15531066Di2015UniqueSeparatorOnEndAsync
15531066Di2015UniqueSeparatorProcessImage
15531066Di2015UniqueSeparatorhasAppStarted
15531066Di2015UniqueSeparatorhasModuleInitialized
15531283Di2015UniqueSeparatorIEnumerable<TableProperties> tableProperties = bd.Descendants<TableProperties>().Where(tp => tp.TableCaption != null);Di2015NewLineforeach(TableProperties tProp in tableProperties)Di2015NewLine{Di2015NewLine    if(tProp.TableCaption.Val.Equals("myCaption")) // see comment, this is actually StringValueDi2015NewLine    {Di2015NewLine        // do something for table with myCaptionDi2015NewLine        Table table = (Table) tProp.Parent;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15531517Di2015UniqueSeparatorstring b = "blah {0}", a;Di2015NewLine
15531517Di2015UniqueSeparatorstring b
15531517Di2015UniqueSeparatorstring a
15531517Di2015UniqueSeparatorstring a, b, c, d;Di2015NewLine
15531517Di2015UniqueSeparatorstring b = String.Format("blah {0}", a);Di2015NewLine
15531549Di2015UniqueSeparatorSoapWebService
15531549Di2015UniqueSeparatorpublic class HomeController : ControllerDi2015NewLine{Di2015NewLine    private readonly SoapWebService _db;Di2015NewLineDi2015NewLine    public HomeController()Di2015NewLine        : this(new SoapWebService()) { }Di2015NewLineDi2015NewLine    public HomeController(SoapWebService db)Di2015NewLine    {Di2015NewLine        _db = db;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        return View(_db.GetAllItems("APIKey").ToList());Di2015NewLine    }Di2015NewLine }Di2015NewLine
15531550Di2015UniqueSeparatorpublic ActionResult Submit(string method)Di2015NewLine{Di2015NewLine  return Redirect("Submit"+method);Di2015NewLine}Di2015NewLineDi2015NewLinepublic ActionResult SubmitCrash()Di2015NewLine{Di2015NewLine  return View();Di2015NewLine}Di2015NewLineDi2015NewLinepublic ActionResult SubmitBug()Di2015NewLine{Di2015NewLine  return View();Di2015NewLine}Di2015NewLine
15531550Di2015UniqueSeparator//handles http://MySite/Submit?method=CrashDi2015NewLine[ActionNameWithParameter(Name = "Submit", ParameterName = "method", ParameterValue = "Crash")]Di2015NewLinepublic ActionResult SubmitCrash()Di2015NewLine{Di2015NewLine  return View();Di2015NewLine}Di2015NewLineDi2015NewLine//handles http://MySite/Submit?method=BugDi2015NewLine[ActionNameWithParameter(Name = "Submit", ParameterName = "method", ParameterValue = "Bug")]Di2015NewLinepublic ActionResult SubmitBug()Di2015NewLine{Di2015NewLine  return View();Di2015NewLine}Di2015NewLineDi2015NewLine[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]Di2015NewLinepublic sealed class ActionNameWithParameterAttribute : ActionNameSelectorAttributeDi2015NewLine{Di2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        private set;Di2015NewLine    }Di2015NewLine    public string ParameterNameDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        private set;Di2015NewLine    }Di2015NewLine    public string ParameterValueDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        private set;Di2015NewLine    }Di2015NewLine    public ActionNameAttribute(string name, string parameterName, string parameterValue)Di2015NewLine    {Di2015NewLine        if (string.IsNullOrEmpty(name))Di2015NewLine        {Di2015NewLine            throw new ArgumentException(MvcResources.Common_NullOrEmpty, "name");Di2015NewLine        }Di2015NewLine        this.Name = name;Di2015NewLine        this.ParameterName = parameterName;Di2015NewLine        this.ParameterValue = parameterValue;Di2015NewLine    }Di2015NewLine    public override bool IsValidName(ControllerContext controllerContext, string actionName, MethodInfo methodInfo)Di2015NewLine    {Di2015NewLine        return string.Equals(actionName, this.Name, StringComparison.OrdinalIgnoreCase)Di2015NewLine            && string.Equals(controllerContext.HttpContext.Request.QueryString.Get(ParameterName)Di2015NewLine                , this.ParameterValueDi2015NewLine                , StringComparison.OrdinalIgnoreCase);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15531905Di2015UniqueSeparatorFindControl
15531905Di2015UniqueSeparatorprotected ImageButton FindImageButton(string id)Di2015NewLine{Di2015NewLine    string fullId = "c_ib" + id;Di2015NewLine    return Page.FindControl(fullId) as ImageButton;Di2015NewLine}Di2015NewLine
15531958Di2015UniqueSeparatorPaint
15531958Di2015UniqueSeparatorplayerPanel_Paint
15531958Di2015UniqueSeparatorplayerPanel
15531958Di2015UniqueSeparatorPaint
15531958Di2015UniqueSeparatorplayerPanel_Paint
15531958Di2015UniqueSeparatorInitializeComponent()
15531958Di2015UniqueSeparatorthis.playerPanel.Paint += PaintEventHandler(playerPanel_Paint);Di2015NewLine
15531969Di2015UniqueSeparator[MyAttribute("on PropertyInfo")]Di2015NewLinepublic string ZDi2015NewLine{Di2015NewLine    [MyAttribute("on getter MethodInfo")] get;Di2015NewLine    [MyAttribute("on setter MethodInfo")] set;Di2015NewLine}Di2015NewLine
15531987Di2015UniqueSeparatori
15531987Di2015UniqueSeparatorCount
15531987Di2015UniqueSeparatorvar s = bigList[i].Count;Di2015NewLine
15531987Di2015UniqueSeparatorbigList.Sum(x => x.Count);Di2015NewLine
15532072Di2015UniqueSeparatorConsole.ReadKey(true);
15532201Di2015UniqueSeparatorvar range = worksheet.get_range("A1").CurrentRegion;Di2015NewLineDi2015NewLinexlExcel.ActiveChart.SetSourceData(range);Di2015NewLine
15532201Di2015UniqueSeparatorCurrentRegion
15532345Di2015UniqueSeparatorstring str = "TEXT TEXT TEXT\\n, TEXT TEXT\\t TEXT. TEXT TEXT\\n\\t TEXT TEXT.";Di2015NewLinestr = str.Replace("\\n", "<br/>").Replace("\\t", "<br/></br>");Di2015NewLine
15532345Di2015UniqueSeparator**TEXT TEXT TEXT<br/>, TEXT TEXT<br/></br> TEXT. TEXT TEXT<br/><br/></br>TEXT TEXT.**Di2015NewLine
15532542Di2015UniqueSeparatorenum
15532542Di2015UniqueSeparator.cs
15532542Di2015UniqueSeparatorenum TodoState
15532542Di2015UniqueSeparatorTodoState.cs
15532542Di2015UniqueSeparatorTodoState
15532542Di2015UniqueSeparatorCompletionState
15532544Di2015UniqueSeparatorreturn Request.CreateErrorResponse(HttpStatusCode.BadRequest, this.ModelState)Di2015NewLine
15532674Di2015UniqueSeparatorclass MyInspector : ExplicitlyDeclaredModel {Di2015NewLine    public override bool IsEntity(Type type) {Di2015NewLine        if (type == typeof (BusinessContact))Di2015NewLine            return false;Di2015NewLine        return base.IsEntity(type);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevar mapper = new ModelMapper(new MyInspector());Di2015NewLine
15532692Di2015UniqueSeparatornamespace YourApplicationNamespaceDi2015NewLine{Di2015NewLine    public static class MyOleDbConnectionDi2015NewLine    {Di2015NewLine        public static OleDbConnection OleDbConnection;Di2015NewLineDi2015NewLine        public static void Open()Di2015NewLine        {Di2015NewLine             // Do Something with OleDbConnection.Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void Close()Di2015NewLine        {Di2015NewLine             // Do Something with OleDbConnection.Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15532692Di2015UniqueSeparatorMyOleDbConnection.Open();Di2015NewLineMyOleDbConnection.Close();Di2015NewLine
15532796Di2015UniqueSeparatorTeamNameTextBox
15532796Di2015UniqueSeparatorTeamNameListBox
15532796Di2015UniqueSeparatorif (TeamNameListBox.Items.FindByValue(TeamNameTextBox.Text) == null)Di2015NewLine
15532809Di2015UniqueSeparatorfor (int i = 0; i < MusicList.Count i++)Di2015NewLine{Di2015NewLine    string sName = MusicList[i].songName;Di2015NewLine    string aName = MusicList[i].artistName;Di2015NewLine    FileSaving.WriteLine(sName + ' ' + aName);Di2015NewLine}Di2015NewLine
15532829Di2015UniqueSeparatorvar a1=(Request.Form["a1"]=="on") ? 1 : 0;Di2015NewLine
15532829Di2015UniqueSeparator.checked
15533146Di2015UniqueSeparatordataValueField
15533146Di2015UniqueSeparatordataTextField
15533146Di2015UniqueSeparatorMultiSelectList
15533146Di2015UniqueSeparatorSelectList
15533146Di2015UniqueSeparator  var selectList = new SelectList(new Dictionary<int, int> { { 1, 2 }, { 3, 4} });Di2015NewLineDi2015NewLine  var privateFields = selectList.GetType().BaseType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic);Di2015NewLineDi2015NewLine  privateFields.Single(i => i.Name.Contains("DataTextField"))Di2015NewLine               .SetValue(selectList, "value");Di2015NewLineDi2015NewLine  privateFields.Single(i => i.Name.Contains("DataValueField"))Di2015NewLine               .SetValue(selectList, "key");Di2015NewLine
15533221Di2015UniqueSeparatorif (!string.IsNullOrEmpty(TeamNameTextBox.Text))Di2015NewLine{Di2015NewLine    if (!TeamNameListBox.Items.Contains(TeamNameTextBox.Text))Di2015NewLine    {Di2015NewLine        TeamNameListBox.Items.Add(TeamNameTextBox.Text);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        // item already exists in listboxDi2015NewLine    }Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    // textbox is emptyDi2015NewLine}Di2015NewLine
15533342Di2015UniqueSeparatorpublic class WordsDi2015NewLine{Di2015NewLine    public int spanishindex; Di2015NewLine    string[] EnglishWords = { "Yellow", "Yello", "Yelow", "Yllow", "ellow" };Di2015NewLine    string[] SpanishWords= { "giallo", "giall", "iallo", "gllo", "lo" };Di2015NewLineDi2015NewLine    public String GetRandomWord()Di2015NewLine    {Di2015NewLine        Random randomizer = new Random();Di2015NewLine        index = randomizer.Next(EnglishWords.Length);Di2015NewLine        string randomword = EnglishWords[index]; //<---- this is the fixDi2015NewLine        spanishindex= index;Di2015NewLine        return randomword;Di2015NewLine    }Di2015NewLineDi2015NewLine    public String MatchSpanishWord()Di2015NewLine    {Di2015NewLine        string matchword = SpanishWords[spanishindex];Di2015NewLine        return matchword;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15533355Di2015UniqueSeparatorStudent[] bc = new Student[5];Di2015NewLineDi2015NewLinebc[0] = new Student();Di2015NewLinebc[1] = new Student(9999, "Mary", "Ford");Di2015NewLinebc[2] = new Student(1254, "Andrew", "White");Di2015NewLinebc[3] = new Student(1256, "Liam", "Sharp", " ");Di2015NewLinebc[4] = new Student(1266, "Michael", "Brown", " ");Di2015NewLineDi2015NewLine// Here the sort on the AccountNumDi2015NewLineArray.Sort(bc);Di2015NewLineDi2015NewLine// A StringBuilder instead of the RichTextBox for testing....    Di2015NewLineStringBuilder sb = new StringBuilder();Di2015NewLinefor (int i = 0; i < 5; i++)Di2015NewLine{Di2015NewLine    string bcString = bc[i].studentToString() + "\\r\\n"; Di2015NewLine    sb.Append(bcString);Di2015NewLine}Di2015NewLineConsole.WriteLine(sb.ToString());Di2015NewLine
15533355Di2015UniqueSeparatorclass Student : IComparableDi2015NewLine{Di2015NewLine    .....Di2015NewLineDi2015NewLineDi2015NewLine    public int CompareTo(object obj) Di2015NewLine    {Di2015NewLine        if (obj == null) return 1;Di2015NewLineDi2015NewLine        Student otherStudent = obj as Student;Di2015NewLine        if (otherStudent != null) Di2015NewLine            return this.accountNum.CompareTo(otherStudent.AccountNum);Di2015NewLine        else Di2015NewLine        throw new ArgumentException("Object is not a Student");Di2015NewLine    }Di2015NewLine    ....Di2015NewLineDi2015NewLine}Di2015NewLine
15533487Di2015UniqueSeparatorpartial view
15533487Di2015UniqueSeparator$('.add-item).click(function (e) {Di2015NewLine  e.preventDefault();// prevent the default behavior of the anchorDi2015NewLine  this; //is your friend, it will give you the DOM element which is clickedDi2015NewLine  $(this); // will give you the nicely wrapped jQuery object      Di2015NewLine});Di2015NewLine
15533487Di2015UniqueSeparator<div class="item-wrap">Di2015NewLine  <input type='text' value='10'/>Di2015NewLine  <a href=#' class='no-line add-item'>Add To Cart</a>Di2015NewLine</div>Di2015NewLineDi2015NewLine<div class="item-wrap">Di2015NewLine  <input type='text' value='20'/>Di2015NewLine  <a href='#' class='no-line add-item'>Add To Cart</a>Di2015NewLine</div>Di2015NewLine
15533487Di2015UniqueSeparator$('.add-item).click(function () {Di2015NewLine       var $this = $(this);Di2015NewLine       var $val = $this.closest(':input').val();Di2015NewLine       //will give you 20 or 30 depending upon which one you clickDi2015NewLineDi2015NewLine       //orDi2015NewLine        var $$val = $this.closest('.item-wrap>:input').val();Di2015NewLineDi2015NewLine      //you can write a variety of selectors which can vary in perf Di2015NewLineDi2015NewLine    });Di2015NewLine
15533500Di2015UniqueSeparator//assuming Table1 has a single INT column, Column1 and has one row with value 12345Di2015NewLine//and connectionstring contains a valid connection string to the database.Di2015NewLine    //this automatically starts a transaction for youDi2015NewLinetryDi2015NewLine{Di2015NewLine            using (TransactionScope ts = new TransactionScope())Di2015NewLine            {Di2015NewLine        //you can open as many connections as you like within the scope although they need to be on the same server. And the transaction scope goes out of scope if control leaves this code.Di2015NewLine               using (SqlConnection conn = new SqlConnection(connectionstring))Di2015NewLine               {Di2015NewLine                  conn.Open();Di2015NewLine                  using (SqlCommand comm = new SqlCommand("Insert into Table1(Column1) values(999)")Di2015NewLine                  {Di2015NewLine                    comm.ExecuteNonQuery();Di2015NewLine                  }Di2015NewLine                   using (SqlCommand comm1 = new SqlCommand("DELETE from Table1 where Column1=12345"))Di2015NewLine                   {Di2015NewLine                     comm1.ExecuteNonQuery();Di2015NewLine                   }Di2015NewLine                }//end using connDi2015NewLine               ts.Complete() ; //commit the transaction; Table1 now has 2 rows (12345 and 999) Di2015NewLine            }//end using tsDi2015NewLineDi2015NewLine}Di2015NewLine  catch(Exception ex)Di2015NewLine   {Di2015NewLine     //Transaction is automatically rolled back for you at this point, Table1 retains original row.Di2015NewLine   }Di2015NewLine
15533658Di2015UniqueSeparatorvar confRollUps = db.SaleConfirmationDi2015NewLine              .GroupBy(c => c.OfferId) // Ensure we get a list of unique/distinct offersDi2015NewLine              .Select(g => g.Select(i => new {Di2015NewLine                        OfferId = i.OfferId, Di2015NewLine                        ProductVariety = i.Product.Variety, // "Category" of product, will be the same across products for this offer. i.Product is a SQL Server Navigation property.Di2015NewLine                        OfferPrice = i.Offer.Price, // The price of the product, set per offer. i.Offer is a SQL Server Navigation property.Di2015NewLine                        OfferQty = i.Offer.Quantity, // The quantity of items that are expected to be sold before the offer expiresDi2015NewLine                        OfferDateClose =i.Offer.DateClose, // Date of when the offer expiresDi2015NewLine                        Total =g.Sum(ii => ii.Qty) // Sum up the Qty column, we don't care about ProdIds not matchingDi2015NewLine               }));Di2015NewLine
15534083Di2015UniqueSeparatordata-main
15534083Di2015UniqueSeparator_Layout.cshtml
15534083Di2015UniqueSeparator@section scriptsDi2015NewLine{Di2015NewLine    <script type="text/javascript">Di2015NewLine        require(['Scripts/main'], function () {Di2015NewLine            require([ "views/home-index"] );Di2015NewLine        });Di2015NewLine    </script>Di2015NewLine}Di2015NewLine
15534108Di2015UniqueSeparatorHttpWebRequest
15534108Di2015UniqueSeparatorHttpWebRequest
15534108Di2015UniqueSeparator// Only broke this up for readabilityDi2015NewLinevar uri = new Uri("https://www.dnsdynamic.org/api/?hostname=techno.ns360.info" + Di2015NewLine                  "&myip=127.0.0.1", true);Di2015NewLinevar cache = new CredentialCache();Di2015NewLinecache.Add(uri, "Basic", new NetworkCredential("username", "password"));Di2015NewLineDi2015NewLinevar request = WebRequest.Create(uri);Di2015NewLinerequest.Credentials = cache;Di2015NewLine
15534206Di2015UniqueSeparatorDbSet<Reserve>
15534206Di2015UniqueSeparatorRemove
15534300Di2015UniqueSeparatorNavigating
15534300Di2015UniqueSeparatorDocumentCompleted
15534300Di2015UniqueSeparator#
15534300Di2015UniqueSeparatormyFile.html#customAnchor
15534300Di2015UniqueSeparatorwebBrowser1.Navigating += new WebBrowserNavigatingEventHandler(webBrowser1_Navigating);Di2015NewLinewebBrowser1.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(webBrowser1_DocumentCompleted);Di2015NewLineDi2015NewLineprivate void webBrowser1_Navigating(object sender, WebBrowserNavigatingEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Url.Contains("#")Di2015NewLine    {Di2015NewLine       string[] urlParts = e.Url.Split('#'); // split the string by character #Di2015NewLine       string newUrl = urlParts[0];          // = myFile.htmlDi2015NewLine       _somePrivateField = urlParts[1];      // = customAnchorDi2015NewLineDi2015NewLine       webBrowser1.Navigate(new Uri(newUrl));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine{Di2015NewLine    HtmlElementCollection elements = this.webBrowser1.Document.Body.All;Di2015NewLine    foreach(HtmlElement element in elements){Di2015NewLine       string nameAttribute = element.GetAttribute("Name");Di2015NewLine       if(!string.IsNullOrEmpty(nameAttribute) && nameAttribute == _somePrivateField){Di2015NewLine          element.ScrollIntoView(true);Di2015NewLine          break;Di2015NewLine       }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15534506Di2015UniqueSeparator<SolutionToBuild Include="$(BuildProjectFolderPath)/../../MyVbSolution.sln">Di2015NewLine  <Targets></Targets>Di2015NewLine  <Properties>NoWarn=;</Properties>Di2015NewLine</SolutionToBuild>Di2015NewLine
15534536Di2015UniqueSeparatorif(mode == "PRODUCTION")Di2015NewLine{Di2015NewLine    db = new Database(ConfigurationManager.ConnectionStrings["production-key"]);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    db = new Database(ConfigurationManager.ConnectionStrings["dev-key"]);Di2015NewLine}Di2015NewLine
15534555Di2015UniqueSeparatorDataTemplate
15534555Di2015UniqueSeparatorboolean
15534555Di2015UniqueSeparatorViewModel
15534555Di2015UniqueSeparatorViewModel
15534555Di2015UniqueSeparator<DataTemplate DataType="{x:Type md:User}">Di2015NewLine  <StackPanel>Di2015NewLine    <Image Source="/Images/anon.png" Di2015NewLine           Height="50" Di2015NewLine           Width="50"Di2015NewLine           Margin="0,5,0,0"/>Di2015NewLine    <TextBlock Text="Firstname" Visibility="{Binding ColumnIsCollapsed, Source={StaticResource ViewModel},Converter={StaticResource InvertBoolVisibility}}"/>Di2015NewLine    <TextBlock Text="Lastnamehere" Visibility="{Binding ColumnIsCollapsed, Source={StaticResource ViewModel},Converter={StaticResource InvertBoolVisibility}}"/>Di2015NewLine  </StackPanel>Di2015NewLine</DataTemplate>Di2015NewLine
15534555Di2015UniqueSeparatorpublic class InvertBoolToVisibilityConverter : IValueConverterDi2015NewLine{Di2015NewLine  public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine  {Di2015NewLine    var theBool = (bool)value;Di2015NewLine    if (theBool)Di2015NewLine      return Visibility.Collapsed;Di2015NewLine    elseDi2015NewLine      return Visibility.Visible;Di2015NewLine  }Di2015NewLineDi2015NewLine  public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine  {Di2015NewLine    throw new NotImplementedException();Di2015NewLine  }Di2015NewLine}Di2015NewLine
15534570Di2015UniqueSeparatorSystem.ArgumentOutOfRangeException: No mapping exists from SqlDbType Structured to a known DbType
15534651Di2015UniqueSeparatorRemoveAll
15534651Di2015UniqueSeparatorenemyList.RemoveAll(enemy => enemy.SomeCondition);Di2015NewLine
15534651Di2015UniqueSeparatorwhile
15534651Di2015UniqueSeparatorForeach
15534658Di2015UniqueSeparatorvar data = db.tbl1.Where(w => clientIds == clientid);Di2015NewLineDi2015NewLineif (source != "All")Di2015NewLine    data = data.Where(w => w.Source == source);Di2015NewLine
15534698Di2015UniqueSeparatorpublic class HomeController : ControllerDi2015NewLine{Di2015NewLine    [Authorize(Roles = "Reviewer")]Di2015NewLine    public ActionResult Reviewer()Di2015NewLine    {Di2015NewLine        ViewBag.Title = "Reviewer";Di2015NewLine        return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    [Authorize(Roles="User")]Di2015NewLine    public ActionResult User()Di2015NewLine    {Di2015NewLine        return View();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15534698Di2015UniqueSeparatorpublic class HomeController : ControllerDi2015NewLine{Di2015NewLine    [Authorize(Roles = "Reviewer", "User")]Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        if (User.IsInRole("Reviewer"))Di2015NewLine        {Di2015NewLine            return View("Reviewer");Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return View("User");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15534890Di2015UniqueSeparatorStyle
15534890Di2015UniqueSeparatorStyle
15534890Di2015UniqueSeparatorImage
15534890Di2015UniqueSeparatorStyle
15534890Di2015UniqueSeparatorButtons
15534890Di2015UniqueSeparatorTag
15534890Di2015UniqueSeparatorTag
15534890Di2015UniqueSeparatorDependancyProperty
15534890Di2015UniqueSeparatorDataBinding
15534890Di2015UniqueSeparator <Style TargetType="{x:Type Button}">Di2015NewLine    <Setter Property="Template">Di2015NewLine        <Setter.Value>Di2015NewLine            <ControlTemplate TargetType="{x:Type Button}">Di2015NewLine                <Grid>Di2015NewLine                    <Rectangle x:Name="rect" DataContext="{TemplateBinding Tag}" Style="{DynamicResource rectangle_style}" Cursor="Hand">Di2015NewLine                        <Rectangle.Fill>Di2015NewLine                            <ImageBrush ImageSource="{Binding}" Stretch="UniformToFill"/>Di2015NewLine                        </Rectangle.Fill>Di2015NewLine                    </Rectangle>Di2015NewLine                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content=""/>Di2015NewLine                </Grid>Di2015NewLine                <ControlTemplate.Triggers>Di2015NewLine                    <Trigger Property="IsFocused" Value="True"/>Di2015NewLine                    <Trigger Property="IsDefaulted" Value="True"/>Di2015NewLine                    <Trigger Property="IsMouseOver" Value="True"/>Di2015NewLine                    <Trigger Property="IsPressed" Value="True"/>Di2015NewLine                    <Trigger Property="IsEnabled" Value="False"/>Di2015NewLine                </ControlTemplate.Triggers>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
15534890Di2015UniqueSeparatorfor (int i = 1; i < 6;  ++i)Di2015NewLine{Di2015NewLine    Button btn = new Button();Di2015NewLine    btn.Margin= new Thickness(4,4,4,4);Di2015NewLine    grd.Children.Add(btn);Di2015NewLine    btn.SetValue(Grid.RowProperty, j);Di2015NewLine    btn.SetValue(Grid.ColumnProperty, i);Di2015NewLine    btn.Tag = "The filename for this buttons image";Di2015NewLine}Di2015NewLine
15534972Di2015UniqueSeparatorapp.SaveWorkspace(excelName);
15534972Di2015UniqueSeparatorDo
15534972Di2015UniqueSeparatorusing Microsoft.Office.Interop.Excel;Di2015NewLineDi2015NewLinenamespace SimpleExcelExportDi2015NewLine{Di2015NewLine    class ExportDi2015NewLine    {Di2015NewLine        public Export(bool defaultBackgroundIsWhite)Di2015NewLine        {Di2015NewLine            this.defaultBackgroundIsWhite = defaultBackgroundIsWhite;Di2015NewLineDi2015NewLine            app = new Application();Di2015NewLine            app.Visible = true;Di2015NewLine            workbook = app.Workbooks.Add(1);Di2015NewLine            worksheet = (Worksheet)workbook.Sheets[1];Di2015NewLine        }       Di2015NewLineDi2015NewLine        public void Do(string excelName, System.Windows.Forms.Button[][] array)Di2015NewLine        {Di2015NewLine            for (int i = 0; i <= array.GetUpperBound(0); i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j <= array[i].GetUpperBound(0); j++)Di2015NewLine                {Di2015NewLine                    AddData(i, j, array[i][j]);Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            //app.SaveWorkspace(excelName);Di2015NewLine        }            Di2015NewLineDi2015NewLine        private void AddData(int row, int col, System.Windows.Forms.Button button)Di2015NewLine        {Di2015NewLine            if (button == null) return;Di2015NewLine            row++;Di2015NewLine            col++;Di2015NewLine            Range range = worksheet.Cells[row, col];Di2015NewLine            if (!defaultBackgroundIsWhite)Di2015NewLine            range.Interior.Color = button.BackColor.ToArgb();Di2015NewLine            elseDi2015NewLine                range.Interior.Color = button.BackColor.Name != "Control" ? button.BackColor.ToArgb() : System.Drawing.Color.White.ToArgb();Di2015NewLine            range.NumberFormat = "";Di2015NewLine            worksheet.Cells[row, col] = button.Text;Di2015NewLine        }Di2015NewLineDi2015NewLine        private Application app = null;Di2015NewLine        private Workbook workbook = null;Di2015NewLine        private Worksheet worksheet = null;Di2015NewLine        private Range workSheet_range = null;Di2015NewLine        private bool defaultBackgroundIsWhite;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15534972Di2015UniqueSeparatorprivate void btnExport_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Export ep = new Export(true);Di2015NewLine    ep.Do("test.xsl", buttons);Di2015NewLine}Di2015NewLine
15534993Di2015UniqueSeparator<Window x:Class="MiscSamples.BlinkingWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="ScreenBlink" Height="300" Width="300">Di2015NewLine    <Window.Resources>Di2015NewLine        <Storyboard x:Key="Storyboard" Duration="00:00:05.10" RepeatBehavior="Forever">Di2015NewLine            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Trans1" Storyboard.TargetProperty="ScaleY">Di2015NewLine                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="0"/>Di2015NewLine                <DiscreteDoubleKeyFrame KeyTime="00:00:04.99" Value="0"/>Di2015NewLine                <EasingDoubleKeyFrame KeyTime="00:00:05" Value="1"/>Di2015NewLine                <EasingDoubleKeyFrame KeyTime="00:00:05.1" Value="0"/>Di2015NewLine            </DoubleAnimationUsingKeyFrames>Di2015NewLine            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Trans2" Storyboard.TargetProperty="ScaleY">Di2015NewLine                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="0"/>Di2015NewLine                <DiscreteDoubleKeyFrame KeyTime="00:00:04.99" Value="0"/>Di2015NewLine                <EasingDoubleKeyFrame KeyTime="00:00:05" Value="1"/>Di2015NewLine                <EasingDoubleKeyFrame KeyTime="00:00:05.1" Value="0"/>Di2015NewLine            </DoubleAnimationUsingKeyFrames> Di2015NewLine        </Storyboard>Di2015NewLine    </Window.Resources>Di2015NewLine    <Window.Triggers>Di2015NewLine        <EventTrigger RoutedEvent="Loaded">Di2015NewLine            <EventTrigger.Actions>Di2015NewLine                <BeginStoryboard Storyboard="{StaticResource Storyboard}"/>Di2015NewLine            </EventTrigger.Actions>Di2015NewLine        </EventTrigger>Di2015NewLine    </Window.Triggers>Di2015NewLine    <Grid>Di2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition/>Di2015NewLine            <RowDefinition/>Di2015NewLine        </Grid.RowDefinitions>Di2015NewLineDi2015NewLine        <Rectangle Fill="Black">Di2015NewLine            <Rectangle.RenderTransform>Di2015NewLine                <ScaleTransform ScaleY="0" x:Name="Trans1"/>Di2015NewLine            </Rectangle.RenderTransform>Di2015NewLine        </Rectangle>Di2015NewLine        <Rectangle Fill="Black" Grid.Row="1" RenderTransformOrigin="0.5,1.0">Di2015NewLine            <Rectangle.RenderTransform>Di2015NewLine                <ScaleTransform ScaleY="0" x:Name="Trans2"/>Di2015NewLine            </Rectangle.RenderTransform>Di2015NewLine        </Rectangle>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
15534993Di2015UniqueSeparatorusing System.Windows;Di2015NewLineDi2015NewLinenamespace MiscSamplesDi2015NewLine{Di2015NewLine    public partial class BlinkingWindow : WindowDi2015NewLine    {Di2015NewLine        public BlinkingWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15535024Di2015UniqueSeparatorPictureBoxSizeMode.Zoom
15535024Di2015UniqueSeparatorPictureBox.SizeMode
15535024Di2015UniqueSeparatorPictureBox.SizeMode
15535024Di2015UniqueSeparatormyPictureBox.SizeMode = PictureBoxSizeMode.Zoom;Di2015NewLine
15535024Di2015UniqueSeparatorBitmap
15535024Di2015UniqueSeparatorGraphics.DrawImage
15535044Di2015UniqueSeparatorvar propertyData = from prop in typeof(MyClass).GetProperties()Di2015NewLine                   let voodooOrdinalAttribute = Attribute.GetCustomAttribute(prop, typeof(VoodooOrdinalAttribute)) as VoodooOrdinalAttributeDi2015NewLine                   where voodooOrdinalAttribute != nullDi2015NewLine                   let lineOrder = voodooOrdinalAttribute.OrdinalDi2015NewLine                   orderby lineOrder ascendingDi2015NewLine                   select prop;Di2015NewLine
15535056Di2015UniqueSeparatorLoad
15535056Di2015UniqueSeparatorPDFDocument
15535056Di2015UniqueSeparatorSet PDFDocument = CreateObject("PDF.API.PDFDocument")Di2015NewLine
15535056Di2015UniqueSeparatorLoad
15535056Di2015UniqueSeparatorvoid
15535056Di2015UniqueSeparatorPDFDocument.load "D:\\path\\to\\file_a.pdf"Di2015NewLineSet PDDocumentCatalog = PDFDocument.getDocumentCatalog()Di2015NewLine' ... 'Di2015NewLinePDFDocument.save "D:\\path\\to\\file_b.pdf"Di2015NewLinePDFDocument.closeDi2015NewLine
15535056Di2015UniqueSeparatornamespace PDF.APIDi2015NewLine{Di2015NewLine    public class PDFDocumentDi2015NewLine    {Di2015NewLine        private PDDocument PD;Di2015NewLineDi2015NewLine        public PDFDocument()Di2015NewLine        { //class constructorDi2015NewLine        }Di2015NewLineDi2015NewLine        public void load(string PDFPath)Di2015NewLine        {Di2015NewLine            PD = PDDocument.load(PDFPath);Di2015NewLine        }Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
15535088Di2015UniqueSeparatorInputStream socketInputStream = new ByteArrayInputStream("string".getBytes());Di2015NewLine
15535088Di2015UniqueSeparatorStream socketInputStream = new MemoryStream(Encoding.UTF8.GetBytes("string")); Di2015NewLine
15535088Di2015UniqueSeparatorbytes[] toWrite = Encoding.UTF8.GetBytes("Write to stream");Di2015NewLineStream writeToStream = new MemoryStream();Di2015NewLinewriteToStream.Write(toWrite, 0, toWrite.Length);Di2015NewLine
15535090Di2015UniqueSeparatorfrom entry in SomeTableDi2015NewLinegroup entry by entry.SomeValue into grpDi2015NewLinewhere grp.Sum(x => x.OtherValue) > 0Di2015NewLineselect grp.Key;Di2015NewLine
15535147Di2015UniqueSeparatorif (list.Contains(name))Di2015NewLine
15535147Di2015UniqueSeparatorif (array.Contains(name))Di2015NewLine
15535147Di2015UniqueSeparatorList<T>
15535147Di2015UniqueSeparatorT[]
15535147Di2015UniqueSeparatorIList<T>
15535147Di2015UniqueSeparatorContains
15535147Di2015UniqueSeparatorAny
15535147Di2015UniqueSeparatorif (array.Any(x => x.StartsWith(name))Di2015NewLine
15535152Di2015UniqueSeparatorfor (int i = 0; i < row; i++)Di2015NewLine{   Di2015NewLine     for (int j = 0; j < col; j++)Di2015NewLine     {Di2015NewLine        Range range = worksheet.Cells[i + 2, j + 1];Di2015NewLine        range.Interior.Color = buttons[i][j].BackColor.ToArgb();Di2015NewLine     }Di2015NewLine}Di2015NewLine
15535170Di2015UniqueSeparatorpublic List<Card> PlayerHand;
15535170Di2015UniqueSeparatorHand
15535170Di2015UniqueSeparatornull
15535170Di2015UniqueSeparatorHit
15535170Di2015UniqueSeparatorplayerHand.PlayerHand.Add
15535170Di2015UniqueSeparatorplayerHand.PlayerHand
15535170Di2015UniqueSeparatornull
15535170Di2015UniqueSeparatorAdd
15535170Di2015UniqueSeparatorNullReferenceException
15535307Di2015UniqueSeparatorForm
15535624Di2015UniqueSeparatorSelectElement
15535624Di2015UniqueSeparatorOpenQA.Selenium.Support.UI
15535624Di2015UniqueSeparatorSelectElement selector = new SelectElement(element);Di2015NewLineselector.SelectByIndex(1);Di2015NewLine
15535693Di2015UniqueSeparatorList<Ticket> supportTickets = Di2015NewLine    (from x in doc.Descendants("ticket")Di2015NewLine     select new TicketDi2015NewLine     {Di2015NewLine         ID = x.Element("id").Value,Di2015NewLine         TicketID = x.Element("tid").Value,Di2015NewLine         DeptID = x.Element("deptid").Value,Di2015NewLine         UserID = x.Element("userid").Value,Di2015NewLine         Name = x.Element("name").Value,Di2015NewLine         Email = x.Element("email").Value,Di2015NewLine         Subject = x.Element("subject").Value,Di2015NewLine         Message = x.Element("message").Value,Di2015NewLine     }).ToList();Di2015NewLine
15535701Di2015UniqueSeparatorvar email = "invalidemailasifnasiofnasonfaso@gmail.com";Di2015NewLineTcpClient tClient = new TcpClient("gmail-smtp-in.l.google.com", 25);Di2015NewLinestring CRLF = "\\r\\n";Di2015NewLinebyte[] dataBuffer;Di2015NewLinestring ResponseString;Di2015NewLineNetworkStream netStream = tClient.GetStream();Di2015NewLineStreamReader reader = new StreamReader(netStream);Di2015NewLineResponseString = reader.ReadLine();Di2015NewLine/* Perform HELO to SMTP Server and get Response */Di2015NewLinedataBuffer = BytesFromString("HELO KirtanHere" + CRLF);Di2015NewLinenetStream.Write(dataBuffer, 0, dataBuffer.Length);Di2015NewLineResponseString = reader.ReadLine();Di2015NewLinedataBuffer = BytesFromString("MAIL FROM:<test@gmail.com>" + CRLF);Di2015NewLinenetStream.Write(dataBuffer, 0, dataBuffer.Length);Di2015NewLineResponseString = reader.ReadLine();Di2015NewLine/* Read Response of the RCPT TO Message to know from google if it exist or not */Di2015NewLinedataBuffer = BytesFromString("RCPT TO:<"+email+">"+CRLF);Di2015NewLinenetStream.Write(dataBuffer, 0, dataBuffer.Length);Di2015NewLineResponseString = reader.ReadLine();Di2015NewLineif (GetResponseCode(ResponseString) == 550)Di2015NewLine{Di2015NewLine    Console.WriteLine("Mail Address Does not Exist");Di2015NewLine    Console.WriteLine("Original Error from Smtp Server "+ResponseString);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Console.WriteLine("Original response from Smtp Server "+ResponseString);Di2015NewLine}Di2015NewLine/* QUITE CONNECTION */Di2015NewLinedataBuffer = BytesFromString("QUITE" + CRLF);Di2015NewLinenetStream.Write(dataBuffer, 0, dataBuffer.Length);Di2015NewLinetClient.Close();Di2015NewLine
15535701Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    SmtpClient SmtpServer = new SmtpClient("smtp.live.com"); Di2015NewLine    SmtpServer.EnableSsl = true;Di2015NewLine    SmtpServer.UseDefaultCredentials = false;Di2015NewLine    SmtpServer.Port = 587;Di2015NewLine    SmtpServer.Credentials = new System.Net.NetworkCredential("test@hotmail.com", "password");Di2015NewLine    var message = new MailMessage {Di2015NewLine    From = new MailAddress("asd@hotmail.com"),Di2015NewLine    Subject = "test"Di2015NewLineDi2015NewLine    };Di2015NewLineDi2015NewLine    message.To.Add("sodfinaosidgnoasbeguosebofubasgfsgrsgr@hotmail.com");Di2015NewLine    SmtpServer.Send(message);Di2015NewLine}Di2015NewLinecatch(SmtpException x)Di2015NewLine{Di2015NewLine    //This unfortunately only really calls authentication failuresDi2015NewLine    Console.WriteLine(x.ToString());Di2015NewLine}Di2015NewLine
15535770Di2015UniqueSeparatorlistOfStrings.Where(s => s.Contains('?'));Di2015NewLine
15535851Di2015UniqueSeparatorpublic override void OnAuthorization(HttpActionContext actionContext) {Di2015NewLineDi2015NewLine    ....Di2015NewLineDi2015NewLine    if (!authorized) {Di2015NewLineDi2015NewLine       actionContext.Response =    Di2015NewLine                  actionContext.Request.CreateResponse(Di2015NewLine                                   HttpStatusCode.Unauthorized, Di2015NewLine                                   new  Dictionary<string, string> { Di2015NewLine                                                { "hello", "world" } Di2015NewLine                                   }Di2015NewLine                  );Di2015NewLineDi2015NewLine    }Di2015NewLine
15535851Di2015UniqueSeparator{"hello":"world"}Di2015NewLine
15535851Di2015UniqueSeparatoractionContext.Response
15535883Di2015UniqueSeparatorExpression.Assign
15535883Di2015UniqueSeparatorItsTrue
15535883Di2015UniqueSeparatoritsTrue
15535883Di2015UniqueSeparatorExpression.Quote
15535883Di2015UniqueSeparatorExpression.Constant
15535883Di2015UniqueSeparatorvar result = Expression.Assign(Di2015NewLine    Expression.Property(new_, typeof (Sample).GetProperties()[0]), Di2015NewLine    Expression.Constant(itsTrue, typeof(Expression<ItsTrue>)));Di2015NewLine
15535883Di2015UniqueSeparatorExpression.Quote
15536000Di2015UniqueSeparatorBackground
15536000Di2015UniqueSeparatorCombobox
15536000Di2015UniqueSeparatorDataTemplate
15536000Di2015UniqueSeparatorTransparent
15536070Di2015UniqueSeparator "You have asked for the following accessories: " +Di2015NewLine (MasksCB.Checked  ? System.Environment.NewLine + MasksCB.Text : "") + Di2015NewLine (PartyCB.Checked  ? System.Environment.NewLine + PartyCB.Text : "") + Di2015NewLine ...Di2015NewLine
15536156Di2015UniqueSeparatorSystem.Environment.ExpandEnvironmentVariables
15536156Di2015UniqueSeparatorString concretePath = Environment.ExpandEnvironmentVariables(@"%TEMP%\\myapplication\\data");Di2015NewLine
15536232Di2015UniqueSeparator public class ViewModelLocatorDi2015NewLine {Di2015NewLine    static ViewModelLocator()Di2015NewLine    {Di2015NewLine        ServiceLocator.SetLocatorProvider(() => SimpleIoc.Default);Di2015NewLine        // Register your servicesDi2015NewLine        //...Di2015NewLine        // Register your ViewModelsDi2015NewLine        SimpleIoc.Default.Register<MainViewModel>();Di2015NewLine    }Di2015NewLineDi2015NewLine    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance",Di2015NewLine        "CA1822:MarkMembersAsStatic",Di2015NewLine        Justification = "This non-static member is needed for data binding purposes.")]Di2015NewLine    public MainViewModel MainDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return ServiceLocator.Current.GetInstance<MainViewModel>();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15536232Di2015UniqueSeparator  public class NodeViewModel : ViewModelBaseDi2015NewLine  {Di2015NewLine    private ViewModelLocator locator = new ViewModelLocator();Di2015NewLineDi2015NewLine    public RelayCommand NodeCommandDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return locator.Main.DefaultCommand;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15536245Di2015UniqueSeparatordbDi2015NewLine
15536245Di2015UniqueSeparatoraddressDi2015NewLine
15536245Di2015UniqueSeparatorif (db == null) throw new Exception("The variable db is null.");Di2015NewLine
15536459Di2015UniqueSeparatordouble
15536459Di2015UniqueSeparatorSmallestPositive
15536459Di2015UniqueSeparatorfloat
15536459Di2015UniqueSeparatorDBL
15536459Di2015UniqueSeparatorFLT
15536459Di2015UniqueSeparatordouble
15536459Di2015UniqueSeparatorfloat
15536459Di2015UniqueSeparatorfabs
15536459Di2015UniqueSeparatorfabsf
15536459Di2015UniqueSeparatorfmax
15536459Di2015UniqueSeparatorfmaxf
15536459Di2015UniqueSeparatorSmallestPositive
15536459Di2015UniqueSeparator#include <float.h>Di2015NewLine#include <math.h>Di2015NewLineDi2015NewLine/*  Return the ULP of q.Di2015NewLineDi2015NewLine    This was inspired by Algorithm 3.5 in Siegfried M. Rump, Takeshi Ogita, andDi2015NewLine    Shin'ichi Oishi, "Accurate Floating-Point Summation", _Technical ReportDi2015NewLine    05.12_, Faculty for Information and Communication Sciences, HamburgDi2015NewLine    University of Technology, November 13, 2005.Di2015NewLine*/Di2015NewLinedouble ULP(double q)Di2015NewLine{Di2015NewLine    // SmallestPositive is the smallest positive floating-point number.Di2015NewLine    static const double SmallestPositive = DBL_EPSILON * DBL_MIN;Di2015NewLineDi2015NewLine    /*  Scale is .75 ULP, so multiplying it by any significand in [1, 2) yieldsDi2015NewLine        something in [.75 ULP, 1.5 ULP) (even with rounding).Di2015NewLine    */Di2015NewLine    static const double Scale = 0.75 * DBL_EPSILON;Di2015NewLineDi2015NewLine    q = fabs(q);Di2015NewLineDi2015NewLine    return fmax(SmallestPositive, q - (q - q * Scale));Di2015NewLine}Di2015NewLine
15536580Di2015UniqueSeparatorList<Label> lbls = new List<Label>();Di2015NewLineprivate void create()Di2015NewLine{Di2015NewLine    flowLayoutPanel1.Controls.Clear();Di2015NewLine    //int length = ds.Tables[0].Rows.Count;Di2015NewLine    for (int i = 0; i < 5; i++)Di2015NewLine    {Di2015NewLine        lbl = new Label();Di2015NewLine        lbl.Name = i.ToString();Di2015NewLine        lbl.Text = "Label "+i;Di2015NewLine        lbl.Font = new Font(FontFamily.GenericSansSerif, 10, FontStyle.Regular);Di2015NewLine        lbl.SetBounds(0, 20, 100, 25);Di2015NewLine        lbl.BorderStyle = BorderStyle.FixedSingle;Di2015NewLine        lbls.Add(lbl);   //< -- add the label to the local list of LabelsDi2015NewLine        flowLayoutPanel1.Controls.Add(lbl);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    int i = 0;Di2015NewLine    Export ep = new Export(true);Di2015NewLine    foreach(var lbl in lbls)Di2015NewLine    {Di2015NewLine        i++;Di2015NewLine        ep.AddNames(i,0,lbl);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15536580Di2015UniqueSeparatorpublic void AddNames(int row, int col, System.Windows.Forms.Label lbl)Di2015NewLine{Di2015NewLineif (lbl == null) return;Di2015NewLinerow++;Di2015NewLinecol++;Di2015NewLineRange range = worksheet.Cells[row + 2, col + 2];Di2015NewLinerange.NumberFormat = "";Di2015NewLineworksheet.Cells[row + 2, col + 2] = lbl.Text;Di2015NewLinerow--;Di2015NewLinecol--;Di2015NewLineDi2015NewLine}Di2015NewLine
15536662Di2015UniqueSeparatorTestDataGenerator.GetStubOrderSetting();
15536662Di2015UniqueSeparatorTestDataGenerator.GetStubEmployeeWithOrder();
15536662Di2015UniqueSeparatorTestDataGenerator.GetStubOrderSetting();
15536975Di2015UniqueSeparatorOrderedOffsets.Where(o => o.OffsetDateTime > cpTime).Select(x => x.CPOffset).FirstOrDefault();Di2015NewLine
15537079Di2015UniqueSeparatormakeExternalHttpRequest()
15537079Di2015UniqueSeparatorSystem.Diagnostics.Stopwatch
15537079Di2015UniqueSeparator              tryDi2015NewLine                {Di2015NewLine                    var result = makeExternalHttpRequest();Di2015NewLine                    if(stopwatch.Elapsed > SomeUnreasonableTimespan) Di2015NewLine                          logger.Warn("Task exceeded reasonable execution period." + TaskData);Di2015NewLineDi2015NewLine                    if (!token.IsCancellationRequested)Di2015NewLine                    {Di2015NewLine                        return result;Di2015NewLine                    }Di2015NewLine                }catch(Exception exception)Di2015NewLine                {Di2015NewLineDi2015NewLine                }Di2015NewLineDi2015NewLine                return null;Di2015NewLine
15537151Di2015UniqueSeparator Console.WriteLine("The avg of the variables in the array are: {0}", varianceValue(ref avg));Di2015NewLine
15537151Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    double avg = 0;Di2015NewLine    Console.WriteLine("\\nThe variance of 11, 13, 17, 19, 23 is: {0}", varianceValue(ref avg, 11.0, 13.0, 17.0, 19.0, 23.0));Di2015NewLine   Console.WriteLine("The avg of the variables in the array are: {0}", avg);Di2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLine
15537409Di2015UniqueSeparatordropdownlist1.Items.Insert(0, new ListItem("Select an item", String.Empty));Di2015NewLinedropdownlist1.SelectedIndex = 0;  Di2015NewLine
15537409Di2015UniqueSeparator <asp:DropDownList ID="ddlPersons" runat="server" AppendDataBoundItems="true" DataValueField="ID" DataTextField="Name">Di2015NewLine<asp:ListItem> -- please select person -- </asp:ListItem>Di2015NewLine</asp:DropDownList>Di2015NewLine
15537409Di2015UniqueSeparatorDropDownList2.DataTextField = "coffeeName";
15537409Di2015UniqueSeparatorDataValueField
15537409Di2015UniqueSeparatorCoffeeId
15537485Di2015UniqueSeparatorSendKeys
15537485Di2015UniqueSeparatorSendInput
15537485Di2015UniqueSeparatorSendInput
15537558Di2015UniqueSeparatorvar defaults = NSUserDefaults.StandardUserDefaults;Di2015NewLinedefaults.SetBool (true, "WebKitDeveloperExtras");Di2015NewLinedefaults.Synchronize();Di2015NewLine
15537578Di2015UniqueSeparatorclass New_NodeDi2015NewLine{Di2015NewLine    public GraphClient Node { get; set; }Di2015NewLine}Di2015NewLine
15537578Di2015UniqueSeparatorclass New_NodeDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLine
15537578Di2015UniqueSeparatorgraphClient.Create(new New_Node { Name = "Mike" });Di2015NewLine
15537578Di2015UniqueSeparatorgraphClient.Create
15537578Di2015UniqueSeparatorvar node = new New_Node();Di2015NewLine... think ...Di2015NewLinenode.Name = "Mike";Di2015NewLine... think ...Di2015NewLinegraphClient.Create(node);Di2015NewLine
15537578Di2015UniqueSeparatorgraphClient.Something
15537740Di2015UniqueSeparatorFileStream
15537740Di2015UniqueSeparatorStreamWriter
15537740Di2015UniqueSeparatorIDisposable
15537740Di2015UniqueSeparatorusing
15537740Di2015UniqueSeparatorusing (FileStream fs = new FileStream(destpath + listfiles[j].Name, FileMode.CreateNew))Di2015NewLineusing (StreamWriter writer = new StreamWriter(fs)) {Di2015NewLine   // .. your writing code hereDi2015NewLine}Di2015NewLine
15537816Di2015UniqueSeparatorvar list1 = new List<string>() {"A", "B", "C", "D", "E", "F", "G"};Di2015NewLinevar list2 = new List<string>() { "A", "B", "E","G" };Di2015NewLinevar list3 = new List<string>();Di2015NewLineint j = 0;Di2015NewLinefor(int i=0; i < list1.Count; i++)Di2015NewLine{Di2015NewLine    var item = list1[i];Di2015NewLine    if (item == list2[j])Di2015NewLine    {Di2015NewLine     list3.Add(item);Di2015NewLine     j++;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine      list3.Add(null);Di2015NewLine    }Di2015NewLine }Di2015NewLine
15537862Di2015UniqueSeparatorxlApp.Quit
15537862Di2015UniqueSeparatorQuit
15537862Di2015UniqueSeparatorxlWorkBook.Close(false, misValue, misValue);Di2015NewLinereleaseObject(xlWorkBook);Di2015NewLineDi2015NewLinexlApp.Quit();Di2015NewLinereleaseObject(xlApp);Di2015NewLine
15537862Di2015UniqueSeparatorxlWorkBook = xlApp.Workbooks.Open(...)Di2015NewLinexlWorkBook.Sheets["Markowitz"];Di2015NewLine
15537862Di2015UniqueSeparatorvar books = xlApp.Workbooks;Di2015NewLinebooks.Open(...);Di2015NewLinereleaseObject(books);Di2015NewLineDi2015NewLinevar sheets = xlWorkBook.Sheets;Di2015NewLinexlMarkowitz = (Excel.Worksheet)sheets["Markowitz"];Di2015NewLinexlWeights = (Excel.Worksheet)sheets["Weights"];Di2015NewLinereleaseObject(sheets);Di2015NewLine
15537899Di2015UniqueSeparatorResponse.Cookies["Cookie_SessionID"].Expires = DateTime.Today.AddDays(1);Di2015NewLine
15537957Di2015UniqueSeparatorSELECT * FROM Student WHERE Student.ID ...
15537957Di2015UniqueSeparatorStudent
15537957Di2015UniqueSeparatorID
15537957Di2015UniqueSeparatorPassword
15537975Di2015UniqueSeparatorvar filteredItems = strList.Where(x => (" " + x + " ").Contains(" in "));Di2015NewLine
15537975Di2015UniqueSeparatorvar filteredItems = strList.Where(x => Regex.IsMatch(x, "(^| )in($| )"));Di2015NewLine
15537975Di2015UniqueSeparatorvar filteredItems = strList.Where(x => (" " + x .ToLower() + " ").Contains(" in "));Di2015NewLinevar filteredItems = strList.Where(x => Regex.IsMatch(x, "(^|\\s)in($|\\s)",Di2015NewLine                                                     RegexOptions.IgnoreCase));Di2015NewLine
15537999Di2015UniqueSeparatorOrigin
15537999Di2015UniqueSeparatorRequest header
15537999Di2015UniqueSeparator"Access-Control-Allow-Origin"
15537999Di2015UniqueSeparatorwithCredentials
15537999Di2015UniqueSeparator*
15537999Di2015UniqueSeparatorAccess-Control-Allow-Origin: *Di2015NewLineAccess-Control-Allow-Origin: http://yourdomain.comDi2015NewLine
15537999Di2015UniqueSeparatorAccess-Control-Allow-Origin: http://yourdomain1.comDi2015NewLineAccess-Control-Allow-Origin: http://yourdomain2.comDi2015NewLineAccess-Control-Allow-Origin: http://yourdomain3.comDi2015NewLine
15537999Di2015UniqueSeparatorvar sourceDomain = Request.Headers["Origin"]; //This gives the origin domain for the requestDi2015NewLine     Response.AppendHeader("Access-Control-Allow-Origin", sourceDomain ); //Set the response header with the origin value after validation (if any) .Depending on the type of application you are using syntax may vary.Di2015NewLine
15538160Di2015UniqueSeparatorF = Gm1m2/r*rDi2015NewLine
15538160Di2015UniqueSeparatorFx = F * cos(theta)Di2015NewLineFy = F * sin(theta)Di2015NewLine
15538160Di2015UniqueSeparatorconst double G = 6.67398 * 0.00000000001;Di2015NewLineDi2015NewLinefor (int i = 0; i < particles.Count(); i++)Di2015NewLine{Di2015NewLine    double sumX = 0;Di2015NewLine    double sumY = 0;Di2015NewLineDi2015NewLine    for (int j = 0; j < particles.Count(); j++)Di2015NewLine    {Di2015NewLine        // Don't add attraction to selfDi2015NewLine        if (i == j)Di2015NewLine            continue;Di2015NewLineDi2015NewLine        double distanceX = particles[i].Position.X - particles[j].Position.X;Di2015NewLine        double distanceY = particles[i].Position.Y - particles[j].Position.Y;Di2015NewLine        double r = Math.Sqrt(Math.Pow(distanceX, 2) + Math.Pow(distanceY, 2));Di2015NewLine        double force = G * particles[i].Mass * particles[j].Mass / (r * r);Di2015NewLine        double theta = Math.Tan(distanceY / distanceX);Di2015NewLine        sumX += force * Math.Cos(theta);Di2015NewLine        sumY += force * Math.Sin(theta);Di2015NewLine    }Di2015NewLineDi2015NewLine    double netForce = Math.Sqrt(Math.Pow(sumX, 2) + Math.Pow(sumY, 2));Di2015NewLine    double a = netForce / particles[i].Mass;Di2015NewLine    double aTheta = Math.Tan(sumY / sumX);Di2015NewLineDi2015NewLine    // Here we get accelerations for X and Y.  You can probably figure out velocities from here.Di2015NewLine    double aX = a * Math.Cos(aTheta);Di2015NewLine    double aY = a * Math.Sin(aTheta);Di2015NewLine}Di2015NewLine
15538238Di2015UniqueSeparatorBitmapCacheOption
15538238Di2015UniqueSeparatorbitmap.CacheOption = BitmapCacheOption.None
15538238Di2015UniqueSeparatorElement
15538238Di2015UniqueSeparatorDecodePixelWidth
15538238Di2015UniqueSeparatorBitmap
15538238Di2015UniqueSeparatorbitmap.DecodePixelWidth = 200
15538487Di2015UniqueSeparatorusing
15538487Di2015UniqueSeparatorusing (SqlConnection cn = new SqlConnection(strConnectString))Di2015NewLine{Di2015NewLine    // StuffDi2015NewLine}Di2015NewLine
15538487Di2015UniqueSeparatorSqlConnection cn = null;Di2015NewLinetryDi2015NewLine{Di2015NewLine    cn = new SqlConnection(strConnectString);Di2015NewLine    // StuffDi2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    if (cn != null) cn.Dispose();Di2015NewLine}Di2015NewLine
15538487Di2015UniqueSeparatorcn.Dispose()
15538487Di2015UniqueSeparatorcn
15538487Di2015UniqueSeparatorusing
15538568Di2015UniqueSeparator//Disable the button hereDi2015NewLinesetTimeout("EnableTheButton();", 2000); // put this inside the click eventDi2015NewLine
15538568Di2015UniqueSeparatorfunction EnableTheButton() {Di2015NewLine    // enable the button hereDi2015NewLine}Di2015NewLine
15538593Di2015UniqueSeparator<ComboBox Width="196"  ItemsSource="{Binding Path=FruitKind.FruitList, Source={StaticResource Locator}}" SelectedItem="{Binding Path=FruitKind.FruitObject, Source={StaticResource Locator}, ElementName={Binding Path=FruitIndex}}">Di2015NewLine
15538625Di2015UniqueSeparatorpublic string RemoveFromStart(string s, IEnumerable<string> strings )Di2015NewLine        {Di2015NewLine            foreach (var x in strings.Where(s.StartsWith))Di2015NewLine            {Di2015NewLine                return s.Remove(0, x.Length);Di2015NewLine            }Di2015NewLine            return s;Di2015NewLine        }Di2015NewLine
15538625Di2015UniqueSeparatorvar x = RemoveFromStart("ablah", new[] { "ab", "as", "Ab", "As" });Di2015NewLine
15538625Di2015UniqueSeparatorvar trimmed = RemoveFromStart(Slb, new string[] { "ab", "as", "Ab", "As" });Di2015NewLine
15538672Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    MailMessage message = new MailMessage();Di2015NewLine    SmtpClient smtp = new SmtpClient();Di2015NewLineDi2015NewLine    message.From = new MailAddress("from@gmail.com");Di2015NewLine    message.To.Add(new MailAddress("to@gmail.com"));Di2015NewLine    message.Subject = "Test";Di2015NewLine    message.Body = "Content";Di2015NewLineDi2015NewLine    smtp.Port = 587;Di2015NewLine    smtp.Host = "smtp.gmail.com";Di2015NewLine    smtp.EnableSsl = true;Di2015NewLine    smtp.UseDefaultCredentials = false;Di2015NewLine    smtp.Credentials = new NetworkCredential("from@gmail.com", "pwd");Di2015NewLine    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;Di2015NewLine    smtp.Send(message);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    MessageBox.Show("err: " + ex.Message);Di2015NewLine}Di2015NewLine
15538884Di2015UniqueSeparator<Grid>Di2015NewLine    <Button Width="100" Height="100">Di2015NewLine        <Button.ToolTip>Di2015NewLine            <Controls:MyToolTip >Di2015NewLine                <WindowsFormsHost x:Name="wrapper" Margin="0,0,0,0" Background="{x:Null}" >Di2015NewLine                    <wf:Panel x:Name="previewScreen" BackColor="Purple" Size="200,200" >Di2015NewLine                        <wf:Panel.Controls>Di2015NewLine                            <wf:Label Text="Test"></wf:Label>Di2015NewLine                        </wf:Panel.Controls>                            Di2015NewLine                    </wf:Panel>Di2015NewLine                </WindowsFormsHost>Di2015NewLine            </Controls:MyToolTip>Di2015NewLine        </Button.ToolTip>Di2015NewLine    </Button>Di2015NewLine</Grid>Di2015NewLine
15538889Di2015UniqueSeparatorRange.Value2
15538889Di2015UniqueSeparatorif(Range.Value2 == null)Di2015NewLine{Di2015NewLine  //blah blahDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine  //blah blahDi2015NewLine}Di2015NewLine
15539058Di2015UniqueSeparatorvar propList = Di2015NewLine    from prop in myBookInstance.GetType()Di2015NewLine                               .GetProperties()Di2015NewLine    let attrib = prop.GetCustomAttributes(typeof(MyAttrib), false)Di2015NewLine                     .Cast<MyAttrib>()Di2015NewLine                     .FirstOrDefault()Di2015NewLine    where attrib != null && attrib.isListedDi2015NewLine    select prop;Di2015NewLine
15539132Di2015UniqueSeparatorPropertyInfo[] props = obj.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);Di2015NewLineforeach (PropertyInfo prop in props)Di2015NewLine{Di2015NewLine    Console.WriteLine("Property: " + prop.Name);Di2015NewLine    foreach (CustomAttributeData att in prop.CustomAttributes)Di2015NewLine    {Di2015NewLine        Console.WriteLine("\\tAttribute: " + att.AttributeType.Name);Di2015NewLine        foreach (CustomAttributeTypedArgument arg in att.ConstructorArguments)Di2015NewLine        {Di2015NewLine            Console.WriteLine("\\t\\t" + arg.ArgumentType.Name + ": " + arg.Value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15539132Di2015UniqueSeparatorProperty: OpenedSinceDi2015NewLine        Attribute: JsonPropertyAttributeDi2015NewLine                String: opened_sinceDi2015NewLineProperty: AddedUntilDi2015NewLine        Attribute: JsonPropertyAttributeDi2015NewLine                String: added_untilDi2015NewLineProperty: OpenedUntilDi2015NewLine        Attribute: JsonPropertyAttributeDi2015NewLine                String: opened_untilDi2015NewLineProperty: ArchivedUntilDi2015NewLine        Attribute: JsonPropertyAttributeDi2015NewLine                String: archived_untilDi2015NewLine
15539159Di2015UniqueSeparatorPlayerHand
15539159Di2015UniqueSeparatorICollection<T>
15539159Di2015UniqueSeparator.Clear()
15539159Di2015UniqueSeparatorList<T>
15539159Di2015UniqueSeparatorList<T>
15539159Di2015UniqueSeparatorfor
15539159Di2015UniqueSeparatorfor
15539159Di2015UniqueSeparator        for (int i = PlayerHand.Count - 1; i >= 0; i--)Di2015NewLine        {Di2015NewLine            PlayerHand.RemoveAt(i);Di2015NewLine        }Di2015NewLine
15539512Di2015UniqueSeparatorpublic interface IMovementBehaviorDi2015NewLine{Di2015NewLine    void Move(Enemy enemy);Di2015NewLine}Di2015NewLine
15539512Di2015UniqueSeparatorpublic class ChargingMovementBehavior : IMovementBehavior { ... }Di2015NewLinepublic class MaintainingMovementBehavior : IMovementBehavior { ... }Di2015NewLine
15539512Di2015UniqueSeparatorpublic Enemy(IMovementBehavior movementBehavior) { ... }Di2015NewLine
15539553Di2015UniqueSeparatorvar messageArrayWithOutside = xDoc.Elements("StatusMsg")Di2015NewLine    .Elements("StatusDetail")Di2015NewLine    .Select(Di2015NewLine        x => Di2015NewLine            x.Element("Message") == null ? Di2015NewLine            string.Empty : Di2015NewLine            x.Element("Message").Value.Trim()Di2015NewLine    ).ToArray();Di2015NewLineDi2015NewLinevar textAll = string.Join(", ", messageArrayWithOutside);Di2015NewLine
15539553Di2015UniqueSeparatorOUTSIDE
15539553Di2015UniqueSeparatorA, B, CDi2015NewLine
15539559Di2015UniqueSeparatorclass ObjDi2015NewLine{Di2015NewLine    void Handler( int a, int b ) { }Di2015NewLine    Obj() { Method( "", Handler ); }Di2015NewLine    public void Method<T, U>( T t, Action<U, U> action ) { }Di2015NewLine}Di2015NewLine
15539559Di2015UniqueSeparatorclass ObjDi2015NewLine{Di2015NewLine    double M(string s) { }Di2015NewLine    Obj() { Method( "", M ); }Di2015NewLine    public void Method<T, U>(T t, Func<T, U> f) { }Di2015NewLine}Di2015NewLine
15539559Di2015UniqueSeparatordouble M(string s)
15539655Di2015UniqueSeparatorSingleOrDefault
15539655Di2015UniqueSeparatorvar result = (from myRow in PPLoadedData.AsEnumerable()Di2015NewLine               where myRow.Field<Int32>("Wires.OperationOrder") == wire && Di2015NewLine                     myRow.Field<Int32>("Bonds.OperationOrder") == bondDi2015NewLine               select myRow[svid]).SingleOrDefault();Di2015NewLineif(result != null)Di2015NewLine    // Do stuff with resultDi2015NewLine
15539855Di2015UniqueSeparatorMoreLinq
15539855Di2015UniqueSeparatorDistinct
15539855Di2015UniqueSeparatorfullSubjectList.DistinctBy(x => x.Name).ToList();Di2015NewLine
15539898Di2015UniqueSeparator Regex pattern = new Regex(@"(ads<r>_aimDate50ms\\.Good)|(ads<t>Valid#)|(tactics_priorityT)|(tactics_SelectedADS#)|(ads3bValid#)");Di2015NewLine
15539898Di2015UniqueSeparator#
15539898Di2015UniqueSeparator<
15539898Di2015UniqueSeparator>
15539898Di2015UniqueSeparator.
15539898Di2015UniqueSeparator#
15539898Di2015UniqueSeparator[A-Za-z]*<.>[A-Za-z]*\\.[A-Za-z]*
15539898Di2015UniqueSeparator[A-Za-z]*<.>[A-Za-z]*#
15539898Di2015UniqueSeparator[A-Za-z]*_[A-Za-z]*#
15539898Di2015UniqueSeparator[A-Za-z0-9]*#
15539898Di2015UniqueSeparator(
15539898Di2015UniqueSeparator)
15539898Di2015UniqueSeparator|
15539898Di2015UniqueSeparator Regex pattern = new Regex(@"([A-Za-z]*<.>[A-Za-z]*\\.[A-Za-z]*)|([A-Za-z]*<.>[A-Za-z]*#)|([A-Za-z]*_[A-Za-z]*#)|([A-Za-z0-9]*#)");Di2015NewLine
15540074Di2015UniqueSeparatorStringFormat
15540074Di2015UniqueSeparatorString
15540074Di2015UniqueSeparatorImage
15540074Di2015UniqueSeparatorSource
15540074Di2015UniqueSeparatorUri
15540074Di2015UniqueSeparatorStringFormat
15540074Di2015UniqueSeparatorBinding
15540074Di2015UniqueSeparatorIValueConverter
15540074Di2015UniqueSeparatorstring
15540074Di2015UniqueSeparatorImage
15540074Di2015UniqueSeparatorSource
15540074Di2015UniqueSeparatorpublic class ProvinceNameToImageSourceConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        return string.Format("/CanadaTreeSvc.Interface;component/Resources/img/flags/\\{0\\}.gif", value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetTypes, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15540074Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <local:ProvinceNameToImageSourceConverter x:Key="ImageConverter" />Di2015NewLine</Window.Resources>Di2015NewLineDi2015NewLine..................Di2015NewLineDi2015NewLine   <Image Source="{Binding ProvinceCode, Converter={StaticResource ImageConverter}}" />Di2015NewLine
15540192Di2015UniqueSeparatorUserName
15540192Di2015UniqueSeparatorUserName
15540192Di2015UniqueSeparatorCreateUser()
15540192Di2015UniqueSeparatorMembership.CreateUser(PASSEMAILIDHERE, model.Password, model.Email, null, null, true, null, out createStatus);Di2015NewLine
15540286Di2015UniqueSeparatorfunction onSuccess(e)Di2015NewLine{Di2015NewLine  var response = e.response.data();Di2015NewLine}Di2015NewLine
15540286Di2015UniqueSeparatorreturn json(new{data=text,"text/plain");Di2015NewLine
15540425Di2015UniqueSeparatorStoryboards
15540425Di2015UniqueSeparatorEventTriggers
15540425Di2015UniqueSeparatorStoryboards
15540425Di2015UniqueSeparatorResources
15540425Di2015UniqueSeparator<Page.Resources>Di2015NewLine    <Storyboard x:Name="ballstoryleft">Di2015NewLine        <DoubleAnimation Storyboard.TargetName="balltrans" Storyboard.TargetProperty="TranslateX" Di2015NewLine                         Duration="0:0:0.5" By="-40" FillBehavior="HoldEnd">Di2015NewLine            <DoubleAnimation.EasingFunction>Di2015NewLine                <ElasticEase Oscillations="0" Springiness="1" />Di2015NewLine            </DoubleAnimation.EasingFunction>Di2015NewLine        </DoubleAnimation>Di2015NewLine    </Storyboard>Di2015NewLine    <Storyboard x:Name="ballstoryright">Di2015NewLine        <DoubleAnimation Storyboard.TargetName="balltrans" Storyboard.TargetProperty="TranslateX" Di2015NewLine                         Duration="0:0:0.5" By="40" FillBehavior="HoldEnd">Di2015NewLine            <DoubleAnimation.EasingFunction>Di2015NewLine                <ElasticEase Oscillations="0" Springiness="1" />Di2015NewLine            </DoubleAnimation.EasingFunction>Di2015NewLine        </DoubleAnimation>Di2015NewLine    </Storyboard>Di2015NewLine</Page.Resources>Di2015NewLine
15540549Di2015UniqueSeparatortypeof
15540549Di2015UniqueSeparatorenum Color { Red }Di2015NewLineclass Square Di2015NewLine{Di2015NewLine    Color Color { get; set; }Di2015NewLine    void M()Di2015NewLine    {Di2015NewLine        Type t = Color.GetType(); Di2015NewLine
15540549Di2015UniqueSeparatorFoo x = new Foo();Di2015NewLineobject o = new List<Foo>[] {};Di2015NewLineFoo.StaticMethod();Di2015NewLine
15540549Di2015UniqueSeparatorobject t = Foo; // Assign a Type object to t.Di2015NewLine
15540549Di2015UniqueSeparatorx = y;Di2015NewLine
15540549Di2015UniqueSeparatorM(x); // x is assigned to a formalDi2015NewLineq = new [] { x }; // x is assigned to the first element of an arrayDi2015NewLiney = new Y() { X = x }; // x is assigned to a property of Y.Di2015NewLine
15540641Di2015UniqueSeparator    public int IndexDi2015NewLine    {Di2015NewLine       getDi2015NewLine       {Di2015NewLine          if(ViewState["Index"]==null)Di2015NewLine          {Di2015NewLine             ViewState["Index"]=0;Di2015NewLine          }Di2015NewLine          elseDi2015NewLine          {Di2015NewLine             ViewState["Index"]=int.Parse(ViewState["Index"].ToString())+1;Di2015NewLine          }Di2015NewLineDi2015NewLine          return int.Parse(ViewState["Index"].ToString());    Di2015NewLine       }Di2015NewLine   }Di2015NewLineDi2015NewLine    protected void Button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        HtmlGenericControl newControl = new HtmlGenericControl("div");Di2015NewLine        newControl.ID = "NEWControl"+Index;Di2015NewLine        newControl.InnerHtml = "This is a dynamically created HTML server control.";Di2015NewLineDi2015NewLine        PlaceHolder1.Controls.Add(newControl);Di2015NewLine    }Di2015NewLine
15540651Di2015UniqueSeparator    public static List<string> GetInstalledPrograms()Di2015NewLine    {Di2015NewLine        var result = new List<string>();Di2015NewLine        result.AddRange(GetInstalledProgramsFromRegistry(RegistryView.Registry32));Di2015NewLine        result.AddRange(GetInstalledProgramsFromRegistry(RegistryView.Registry64));Di2015NewLine        return result;Di2015NewLine    } Di2015NewLineDi2015NewLine    private static IEnumerable<string> GetInstalledProgramsFromRegistry(RegistryView registryView)Di2015NewLine    {Di2015NewLine        var result = new List<string>();Di2015NewLineDi2015NewLine        using (RegistryKey key = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, registryView).OpenSubKey(registry_key))Di2015NewLine        {Di2015NewLine            foreach (string subkey_name in key.GetSubKeyNames())Di2015NewLine            {Di2015NewLine                using (RegistryKey subkey = key.OpenSubKey(subkey_name))Di2015NewLine                {Di2015NewLine                    if(IsProgramVisible(subkey))Di2015NewLine                    {Di2015NewLine                        result.Add((string)subkey.GetValue("DisplayName"));Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static bool IsProgramVisible(RegistryKey subkey)Di2015NewLine    {Di2015NewLine        var name = (string)subkey.GetValue("DisplayName");Di2015NewLine        var releaseType = (string)subkey.GetValue("ReleaseType");Di2015NewLine        //var unistallString = (string)subkey.GetValue("UninstallString");Di2015NewLine        var systemComponent = subkey.GetValue("SystemComponent");Di2015NewLine        var parentName = (string)subkey.GetValue("ParentDisplayName");Di2015NewLineDi2015NewLine        returnDi2015NewLine            !string.IsNullOrEmpty(name)Di2015NewLine            && string.IsNullOrEmpty(releaseType)Di2015NewLine            && string.IsNullOrEmpty(parentName)Di2015NewLine            && (systemComponent == null);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15540770Di2015UniqueSeparatorList
15540770Di2015UniqueSeparatorAttachedProperty
15540770Di2015UniqueSeparatorListBox
15540770Di2015UniqueSeparatorListBox.SelectedItems
15540770Di2015UniqueSeparatorAttachedProperty
15540770Di2015UniqueSeparatorWPF
15540770Di2015UniqueSeparatorMVVM
15540770Di2015UniqueSeparatorpublic static class ListBoxExtensionsDi2015NewLine{Di2015NewLine    // Using a DependencyProperty as the backing store for SearchValue.  This enables animation, styling, binding, etc...Di2015NewLine    public static readonly DependencyProperty SelectedItemListProperty =Di2015NewLine        DependencyProperty.RegisterAttached("SelectedItemList", typeof(IList), typeof(ListBoxExtensions),Di2015NewLine            new FrameworkPropertyMetadata(null, new PropertyChangedCallback(OnSelectedItemListChanged)));Di2015NewLineDi2015NewLine    public static IList GetSelectedItemList(DependencyObject obj)Di2015NewLine    {Di2015NewLine        return (IList)obj.GetValue(SelectedItemListProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetSelectedItemList(DependencyObject obj, IList value)Di2015NewLine    {Di2015NewLine        obj.SetValue(SelectedItemListProperty, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void OnSelectedItemListChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        var listbox = d as ListBox;Di2015NewLine        if (listbox != null)Di2015NewLine        {Di2015NewLine            listbox.SelectedItems.Clear();Di2015NewLine            var selectedItems = e.NewValue as IList;Di2015NewLine            if (selectedItems != null)Di2015NewLine            {Di2015NewLine                foreach (var item in selectedItems)Di2015NewLine                {Di2015NewLine                    listbox.SelectedItems.Add(item);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15540770Di2015UniqueSeparator<ListBox ItemsSource="{Binding Items}" SelectionMode="Multiple"Di2015NewLine         local:ListBoxExtensions.SelectedItemList="{Binding SelectedItems}" />Di2015NewLine
15540770Di2015UniqueSeparator<Window x:Class="WpfApplication17.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:local="clr-namespace:WpfApplication17"Di2015NewLine        Title="MainWindow" Height="227" Width="170" Name="UI">Di2015NewLine    <Grid DataContext="{Binding ElementName=UI}">Di2015NewLine        <ListBox ItemsSource="{Binding Items}" SelectionMode="Multiple"Di2015NewLine                 local:ListBoxExtensions.SelectedItemList="{Binding SelectedItems}"  Margin="0,0,0,37"   >Di2015NewLine                 <ListBox.Resources>Di2015NewLine                    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{x:Static SystemColors.HighlightColor}" />Di2015NewLine                    <Style TargetType="ListBoxItem">Di2015NewLine                       <Style.Triggers>Di2015NewLine                          <Trigger Property="IsSelected" Value="True">Di2015NewLine                             <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>Di2015NewLine                          </Trigger>Di2015NewLine                       </Style.Triggers>Di2015NewLine                    </Style>Di2015NewLine                 </ListBox.Resources>Di2015NewLine        </ListBox>Di2015NewLine        <Button Content="Populate SelectedItemList" Click="Button_Click" Height="32" Margin="2,0,1,2" VerticalAlignment="Bottom"/>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
15540770Di2015UniqueSeparatornamespace WpfApplication17Di2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Interaction logic for MainWindow.xamlDi2015NewLine    /// </summary>Di2015NewLine    public partial class MainWindow : Window, INotifyPropertyChangedDi2015NewLine    {Di2015NewLine        private List<string> _selectedItems = new List<string>();Di2015NewLine        private ObservableCollection<string> _items = new ObservableCollection<string> Di2015NewLine        { "Orange", "Mango", "Stawberry", "Pineapple", "Apple", "Grape", "Banana" };Di2015NewLineDi2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        public ObservableCollection<string> ItemsDi2015NewLine        {Di2015NewLine            get { return _items; }Di2015NewLine            set { _items = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public List<string> SelectedItemsDi2015NewLine        {Di2015NewLine            get { return _selectedItems; }Di2015NewLine            set { _selectedItems = value; OnPropertyChanged("SelectedItems"); }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine        {Di2015NewLine            SelectedItems = new List<string> { "Orange", "Pineapple", "Apple" };Di2015NewLine        }Di2015NewLineDi2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine        public void OnPropertyChanged(string e)Di2015NewLine        {Di2015NewLine            if (PropertyChanged != null)Di2015NewLine                PropertyChanged(this, new PropertyChangedEventArgs(e));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class ListBoxExtensionsDi2015NewLine    {Di2015NewLine        // Using a DependencyProperty as the backing store for SearchValue.  This enables animation, styling, binding, etc...Di2015NewLine        public static readonly DependencyProperty SelectedItemListProperty =Di2015NewLine            DependencyProperty.RegisterAttached("SelectedItemList", typeof(IList), typeof(ListBoxExtensions),Di2015NewLine                new FrameworkPropertyMetadata(null, new PropertyChangedCallback(OnSelectedItemListChanged)));Di2015NewLineDi2015NewLine        public static IList GetSelectedItemList(DependencyObject obj)Di2015NewLine        {Di2015NewLine            return (IList)obj.GetValue(SelectedItemListProperty);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void SetSelectedItemList(DependencyObject obj, IList value)Di2015NewLine        {Di2015NewLine            obj.SetValue(SelectedItemListProperty, value);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void OnSelectedItemListChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)Di2015NewLine        {Di2015NewLine            var listbox = d as ListBox;Di2015NewLine            if (listbox != null)Di2015NewLine            {Di2015NewLine                listbox.SelectedItems.Clear();Di2015NewLine                var selectedItems = e.NewValue as IList;Di2015NewLine                if (selectedItems != null)Di2015NewLine                {Di2015NewLine                    foreach (var item in selectedItems)Di2015NewLine                    {Di2015NewLine                        listbox.SelectedItems.Add(item);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15540847Di2015UniqueSeparatorConnectionStrings
15540847Di2015UniqueSeparatorConnectionStringSettings
15540847Di2015UniqueSeparatorSqlConnection
15540847Di2015UniqueSeparatorstring
15540847Di2015UniqueSeparatorconstring
15540847Di2015UniqueSeparatorSqlConnection sql = new SqlConnection(constring.ConnectionString);Di2015NewLine
15540879Di2015UniqueSeparatordecimal totalPrice = 0M;Di2015NewLineint totalItems = 0;Di2015NewLineprotected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine  {Di2015NewLine    ...Di2015NewLineDi2015NewLine   }Di2015NewLine
15540930Di2015UniqueSeparatorvar filtered = unfilteredApps.Where(i => !excludedAppIds.Contains(i.Id)); Di2015NewLine
15540973Di2015UniqueSeparatorvar values = Di2015NewLine    from f in typeof(VideoClipTypeEnum).GetFields()Di2015NewLine    let attr = f.GetCustomAttributes(typeof(ClipTypeDisplayAttribute))Di2015NewLine                .Cast<ClipTypeDisplayAttribute>()Di2015NewLine                .FirstOrDefault()Di2015NewLine    where attr != nullDi2015NewLine    select f;Di2015NewLine
15540973Di2015UniqueSeparatorFieldInfo
15540973Di2015UniqueSeparatorvar values = Di2015NewLine    ... // same as aboveDi2015NewLine    select (VideoClipTypeEnum)f.GetValue(null);Di2015NewLine
15540973Di2015UniqueSeparatorvar values = Di2015NewLine    ... // same as aboveDi2015NewLine    where attr != null && attr.TreatAsPublicTypeDi2015NewLine    ... // same as aboveDi2015NewLine
15540973Di2015UniqueSeparatorVideoClipTypeEnum.TV
15540973Di2015UniqueSeparatorVideoClipTypeEnum
15540973Di2015UniqueSeparatorList<int>
15540973Di2015UniqueSeparatorvar values = Di2015NewLine    (from f in typeof(VideoClipTypeEnum).GetFields()Di2015NewLine     let attr = f.GetCustomAttributes(typeof(ClipTypeDisplayAttribute))Di2015NewLine                 .Cast<ClipTypeDisplayAttribute>()Di2015NewLine                 .FirstOrDefault()Di2015NewLine     where attr != nullDi2015NewLine     select (int)f.GetValue(null))Di2015NewLine    .ToList();Di2015NewLine
15541084Di2015UniqueSeparator  public partial class Form1 : FormDi2015NewLine  {Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine      InitializeComponent();Di2015NewLineDi2015NewLine      gridControl1.DataSource = new List<Structure>Di2015NewLine        {Di2015NewLine          new Structure {Id = 1, Val1 = "nr 1"}, Di2015NewLine          new Structure {Id = 2, Val1 = "nr 2"}, Di2015NewLine          new Structure {Id = 3, Val1 = "nr 3"}Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    private void gridView1_RowStyle(object sender, DevExpress.XtraGrid.Views.Grid.RowStyleEventArgs e)Di2015NewLine    {Di2015NewLine       int myExpectedRowHandle = 1;Di2015NewLine       if (e.RowHandle == myExpectedRowHandle)Di2015NewLine       {Di2015NewLine         e.Appearance.BackColor = Color.Crimson;Di2015NewLine       }Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  public class StructureDi2015NewLine  {Di2015NewLine    public string Val1 { get; set; }Di2015NewLine    public int Id { get; set; }Di2015NewLine  }Di2015NewLine
15541084Di2015UniqueSeparatorRowStyle
15541084Di2015UniqueSeparatorRowCellStyle
15541084Di2015UniqueSeparatorprivate void gridView1_RowCellStyle(object sender, RowCellStyleEventArgs e)Di2015NewLine{Di2015NewLine  int myExpectedRowHandle = 1;Di2015NewLine  if (e.Column != colVal1 || e.RowHandle != myExpectedRowHandle)Di2015NewLine    return;Di2015NewLineDi2015NewLine  e.Appearance.ForeColor = Color.Crimson;Di2015NewLine}Di2015NewLine
15541153Di2015UniqueSeparator MailMessage mail = new MailMessage();Di2015NewLine mail.Subject = "Your Subject";Di2015NewLine mail.From = new MailAddress("senderMailAddress");Di2015NewLine mail.To.Add("ReceiverMailAddress");Di2015NewLine mail.Body = "Hello! your mail content goes here...";Di2015NewLine mail.IsBodyHtml = true;Di2015NewLineDi2015NewLine SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587);Di2015NewLine smtp.EnableSsl = true;Di2015NewLine NetworkCredential netCre = new NetworkCredential("SenderMailAddress","SenderPassword" );Di2015NewLine smtp.Credentials = netCre;Di2015NewLineDi2015NewLine tryDi2015NewLine  {Di2015NewLine   smtp.Send(mail);                Di2015NewLine  }Di2015NewLine  catch (Exception ex)Di2015NewLine  {               Di2015NewLine  }Di2015NewLine
15541236Di2015UniqueSeparatorDbChartReader
15541236Di2015UniqueSeparatortop
15541236Di2015UniqueSeparatorAnimal
15541254Di2015UniqueSeparatorSelect
15541254Di2015UniqueSeparatorIQueryable
15541254Di2015UniqueSeparatorDataSource
15541254Di2015UniqueSeparatorIList
15541254Di2015UniqueSeparatorIListSource
15541254Di2015UniqueSeparatorIBindingList
15541254Di2015UniqueSeparatorIBindingListView
15541254Di2015UniqueSeparatorToList
15541254Di2015UniqueSeparator.Select(d => new {...}).ToList();Di2015NewLine
15541397Di2015UniqueSeparatorRestitution
15541397Di2015UniqueSeparatorFarseerPhysics.Settings.MixRestitution
15541397Di2015UniqueSeparatorpublic static float MixRestitution(float restitution1, float restitution2)Di2015NewLine{Di2015NewLine    return restitution1 > restitution2 ? restitution1 : restitution2;Di2015NewLine}Di2015NewLine
15541397Di2015UniqueSeparatorRestitution
15541459Di2015UniqueSeparatorstring1.ToUpperInvariant().Contains(string2.ToUpperInvariant())Di2015NewLine
15541459Di2015UniqueSeparatorstring1.ToUpper().Contains(string2.ToUpper())Di2015NewLine
15541459Di2015UniqueSeparatorToUpper
15541459Di2015UniqueSeparatorCultureInfo
15541513Di2015UniqueSeparatordata: {Di2015NewLine                json:Di2015NewLine                    JSON.stringify({Di2015NewLine                        name: "John Doe",Di2015NewLine                        phone: "2323454543",Di2015NewLine                        skills: {Di2015NewLine                            code: "php",Di2015NewLine                            design: "photoshop"Di2015NewLine                        }Di2015NewLine                    })Di2015NewLine            }Di2015NewLine
15541513Di2015UniqueSeparator        [HttpPost]Di2015NewLine        public JsonResult Action(string json)Di2015NewLine        {Di2015NewLine            dynamic data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(json);Di2015NewLine            string codeSkills = data.skills.code;Di2015NewLine...Di2015NewLine
15541583Di2015UniqueSeparatorchar
15541583Di2015UniqueSeparatorprivate char[] characters = new char[] { '"', ... };Di2015NewLine
15541671Di2015UniqueSeparatorServerType
15541671Di2015UniqueSeparator1
15541716Di2015UniqueSeparatorcontainer.Register(Di2015NewLine    Component.For<IBatchDataService>().AsWcfClient(WCFEndpoint.FromConfiguration("Internal.IBatchDataService")).LifestyeTransient().Named("wcfBatchDataService"),Di2015NewLine    Component.For<IBatchDataService>().ImplementedBy<BatchDataServiceClient>().AsDefault().DependsOn(Di2015NewLine        Dependency.OnComponent("constructorParameterName", "wcfBatchDataService")Di2015NewLine)Di2015NewLine
15541737Di2015UniqueSeparatorNode
15541737Di2015UniqueSeparatortreeControl.GetDataRecordByNode(e.Node)
15541737Di2015UniqueSeparator(Stamkvoid BoundTree_CustomDrawNodeImages(object sender, DevExpress.XtraTreeList.CustomDrawNodeImagesEventArgs e)Di2015NewLine{Di2015NewLine    var myType = (MyType)BoundTree.GetDataRecordByNode(e.Node);Di2015NewLine    e.StateImageIndex = myType.ImageIndex ?? -1 Di2015NewLine}Di2015NewLine
15541813Di2015UniqueSeparator$('#imgbtnGo').click(function () Di2015NewLine
15541813Di2015UniqueSeparatorimgbtnGo
15541813Di2015UniqueSeparatorClinetID
15541813Di2015UniqueSeparatorClientIDMode="Static"
15541813Di2015UniqueSeparator<asp:ImageButton ID="imgbtnGo" runat="server" ImageUrl="~/image_repository/go_icon.png" ClientIDMode="Static"  />Di2015NewLine
15541975Di2015UniqueSeparatorIEnumerable
15541975Di2015UniqueSeparatorIEnumerator
15541975Di2015UniqueSeparatorpublic IEnumerable<Point[]> GetEdges() { ...code... }Di2015NewLine
15541998Di2015UniqueSeparator  BindingSource bs = new BindingSource();Di2015NewLine  bs.DataSource = dataGridView1.DataSource;Di2015NewLine  bs.Filter = sColumnaDoPrzeszukania + " like '%" + textBox1.Text + "%'";Di2015NewLine  dataGridView1.DataSource = bs;Di2015NewLine
15542188Di2015UniqueSeparatorItem
15542188Di2015UniqueSeparatorSubItems
15542188Di2015UniqueSeparatorListView
15542188Di2015UniqueSeparatorpublic void AddDataToLvw(){Di2015NewLine            ListViewItem item1 = new ListViewItem("item1", 0);Di2015NewLine            item1.SubItems.Add("1");Di2015NewLine            item1.SubItems.Add("3");Di2015NewLineDi2015NewLine            ListViewItem item2 = new ListViewItem("item2", 1);Di2015NewLine            item2.SubItems.Add("4");Di2015NewLine            item2.SubItems.Add("6");Di2015NewLineDi2015NewLine            ListViewItem item3 = new ListViewItem("item3", 0);Di2015NewLine            item3.SubItems.Add("7");Di2015NewLine            item3.SubItems.Add("9");Di2015NewLineDi2015NewLine            // Create columns for the items and subitems.Di2015NewLine            listView1.Columns.Add("Item Column", -2, HorizontalAlignment.Left);Di2015NewLine            listView1.Columns.Add("Column 2", -2, HorizontalAlignment.Left);Di2015NewLine            listView1.Columns.Add("Column 3", -2, HorizontalAlignment.Left);Di2015NewLineDi2015NewLine            listView1.Items.AddRange(new ListViewItem[] { item1, item2, item3 });Di2015NewLineDi2015NewLine}Di2015NewLine
15542188Di2015UniqueSeparator private void GetSubItems()Di2015NewLine    {Di2015NewLine        int total = 0;Di2015NewLine        foreach (ListViewItem item in listView1.Items)Di2015NewLine        {Di2015NewLine            total += Convert.ToInt32(item.SubItems[1].Text);Di2015NewLineDi2015NewLine        }Di2015NewLine        MessageBox.Show(total.ToString());Di2015NewLine    }Di2015NewLine
15542188Di2015UniqueSeparatoritem.SubItems
15542392Di2015UniqueSeparatorasync void
15542392Di2015UniqueSeparatorasync void
15542392Di2015UniqueSeparatorasync void
15542392Di2015UniqueSeparatorasync Task
15542392Di2015UniqueSeparatorpublic async Task GetBrands()Di2015NewLine{Di2015NewLine    // ......Di2015NewLineDi2015NewLine    Brands = await _dataHelper.GetFavoriteBrands();Di2015NewLineDi2015NewLine    // ......Di2015NewLine}Di2015NewLine
15542392Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic async Task AllBrandsTest()Di2015NewLine{Di2015NewLine    BrandsViewModel viewModel = new BrandsViewModel();Di2015NewLine    var task = viewModel.GetBrands();Di2015NewLine    Assert.IsTrue(task.Wait(YOUR_TIMEOUT), "failed to load in time");Di2015NewLine    Assert.IsTrue(viewModel.Brands.Any(), "no brands");Di2015NewLine}Di2015NewLine
15542402Di2015UniqueSeparatorprivate void panel1_Resize(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    panel1.AutoScrollMinSize = new System.Drawing.Size(panel1.Width, panel1.Height);Di2015NewLine}Di2015NewLine
15542407Di2015UniqueSeparatorpublic class Bar : IBarDi2015NewLine{Di2015NewLine    public Bar(IFoo foo)Di2015NewLine    {Di2015NewLine        MyFoo = foo;Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual IFoo MyFoo { get; private set; }Di2015NewLine}Di2015NewLine
15542407Di2015UniqueSeparatorProperties
15542407Di2015UniqueSeparatorComponent.For<IBar>().ImplementedBy<Bar>().LifestyleTransient()Di2015NewLine    .Properties(PropââertyFilter.RequireAll)Di2015NewLine
15542407Di2015UniqueSeparatorPropertiesRequired
15542407Di2015UniqueSeparatorProperties
15542408Di2015UniqueSeparator<UserControlDi2015NewLinex:Class="AppBarGlobal.AppbarContent"Di2015NewLinexmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLinexmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLinexmlns:local="using:AppBarGlobal"Di2015NewLinexmlns:d="http://schemas.microsoft.com/expression/blend/2008"Di2015NewLinexmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"Di2015NewLinemc:Ignorable="d"Di2015NewLined:DesignHeight="300"Di2015NewLined:DesignWidth="400">Di2015NewLineDi2015NewLine<StackPanel Orientation="Horizontal">Di2015NewLine    <ButtonDi2015NewLine        Content="1"Di2015NewLine        Style="{StaticResource AppBarButtonStyle}" />Di2015NewLine    <ButtonDi2015NewLine        Content="2"Di2015NewLine        Style="{StaticResource AppBarButtonStyle}" />Di2015NewLine</StackPanel> </UserControl>Di2015NewLine
15542408Di2015UniqueSeparator    public LayoutAwarePage()Di2015NewLine    {Di2015NewLine        bar = new AppBar();Di2015NewLine        bar.Content = new AppbarContent();Di2015NewLine        this.BottomAppBar = bar;Di2015NewLine        //and the remaining code for the constructor hereafter.Di2015NewLine
15542423Di2015UniqueSeparatorwhere
15542423Di2015UniqueSeparatorWHERE [condition1] AND [condition2]Di2015NewLine
15542423Di2015UniqueSeparatorwhere images.Type.Equals("jpg") && images.ImageSource.Id == 5Di2015NewLine
15542729Di2015UniqueSeparator_aut.CloseOnPlaybackCleanup = false;
15542729Di2015UniqueSeparatorpublic partial class UIMapDi2015NewLine{Di2015NewLine    public ApplicationUnderTest _aut { get; set; }Di2015NewLineDi2015NewLine    public void AUT_Open()Di2015NewLine    {Di2015NewLine         string AUTExecutable = ConfigurationManager.AppSettings["AUTExecutable"];Di2015NewLine         _aut = ApplicationUnderTest.Launch(AUTExecutable );Di2015NewLine         _aut.CloseOnPlaybackCleanup = false;Di2015NewLine    }Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15542756Di2015UniqueSeparator    using (System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient("ares"))Di2015NewLine    {Di2015NewLine       using (System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage())Di2015NewLine       {Di2015NewLine          msg.From = new MailAddress("system@lol.dk");Di2015NewLine          msg.To.Add(new MailAddress("lmy@lol.dk"));Di2015NewLine          msg.Subject = "IBM PUDO";Di2015NewLine          msg.Body = sentFiles.Count() + " attached file(s) has been sent to the customer(s) in question ";Di2015NewLine          msg.IsBodyHtml = true;Di2015NewLine          foreach (string file in sentFiles)Di2015NewLine          {Di2015NewLine              Attachment attachment = new Attachment(file);Di2015NewLine              msg.Attachments.Add(attachment);Di2015NewLine          }Di2015NewLineDi2015NewLine          client.Send(msg);Di2015NewLine        }Di2015NewLine     }Di2015NewLine
15542805Di2015UniqueSeparatorSaveChanges
15542935Di2015UniqueSeparatorIEntityView2
15542935Di2015UniqueSeparatorIEnumerable
15542935Di2015UniqueSeparatorSelect
15542935Di2015UniqueSeparatorIEntity2
15542935Di2015UniqueSeparatorview.Cast<IEntity2>()Di2015NewLine    .Select(c => new A1AllocationHelp1TableDTODi2015NewLine           {Di2015NewLine               RecordStatus = c.RecordStatus,Di2015NewLine               UniqueIdent = c.UniqueIdentDi2015NewLine           })Di2015NewLine    .ToList();Di2015NewLine
15542935Di2015UniqueSeparatorDim view As IEntityView2 = table.DefaultViewDi2015NewLineDim something As List(Of A1AllocationHelp1TableDTO) = _Di2015NewLine(From c In viewDi2015NewLine Select New A1AllocationHelp1TableDTO With _Di2015NewLine      {Di2015NewLine          .RecordStatus = c.IDontExist _Di2015NewLine      }).ToList()Di2015NewLine
15542935Di2015UniqueSeparatorIDontExist
15542935Di2015UniqueSeparatorMissingMemberException: Public member 'IDontExist' on type 'IEntity2' not found.Di2015NewLine   at Microsoft.VisualBasic.CompilerServices.Symbols.Container.GetMembers(String& MemberName, Boolean ReportErrors)Di2015NewLine   at Microsoft.VisualBasic.CompilerServices.NewLateBinding.ObjectLateGet(Object Instance, Type Type, String MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack)Di2015NewLine   at Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet(Object Instance, Type Type, String MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack)Di2015NewLine   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()Di2015NewLine   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)Di2015NewLine   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source) Di2015NewLine
15542976Di2015UniqueSeparatorpublic class DataDi2015NewLine{Di2015NewLine    public Data()Di2015NewLine    {Di2015NewLine        RandomData = new List<String>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ObservableCollection<String> RandomData {get; set;}Di2015NewLine}Di2015NewLine
15542976Di2015UniqueSeparatorpublic class DataViewModelDi2015NewLine{Di2015NewLine    public DataViewModel(Data data)Di2015NewLine    {Di2015NewLine        RandomData = new ReadOnlyObservableCollection<String>(data.RandomData);Di2015NewLine    }Di2015NewLineDi2015NewLine    public ReadOnlyObservableCollection<String> RandomData {get; private set;}Di2015NewLine}Di2015NewLine
15543019Di2015UniqueSeparatorTextBlock dummyTextBlock = new TextBlock();Di2015NewLinedummyTextBlock.FontFamily = new FontFamily("Tahoma");Di2015NewLinedummyTextBlock.FontSize = 18;Di2015NewLinedummyTextBlock.FontStyle = FontStyle.Normal;Di2015NewLinedummyTextBlock.FontWeight = FontWeights.Bold;Di2015NewLinedummyTextBlock.Text = "X";Di2015NewLinedummyTextBlock.Measure(new Size(0,0));Di2015NewLinedummyTextBlock.Arrange(new Rect(0,0,0,0));Di2015NewLinedouble width = dummyTextBlock.ActualWidth;Di2015NewLinedouble height = dummyTextBlock.ActualHeight;Di2015NewLine
15543059Di2015UniqueSeparatorpublic Program(IPropertyService property)Di2015NewLine
15543059Di2015UniqueSeparatorIPropertyService
15543059Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Console.WriteLine("Enter something...");Di2015NewLine    IPropertyService _property = //to be added;Di2015NewLine    _property.TestMethod(Console.ReadLine());Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
15543059Di2015UniqueSeparator//to be added
15543059Di2015UniqueSeparatorpublic class PropertyServiceFactory{Di2015NewLine  public IPropertyService Create(){Di2015NewLine    IPropertyRepository repository = new PropertyRepository();Di2015NewLine    PropertyService service = new PropertyService(repository);Di2015NewLine    return service; Di2015NewLine  }Di2015NewLine}Di2015NewLine
15543059Di2015UniqueSeparatorConsole.WriteLine("Enter something...");Di2015NewLinePropertyServiceFactory factory = new PropertyServiceFactory();Di2015NewLineIPropertyService _property = factory.Create();Di2015NewLine_property.TestMethod(Console.ReadLine());Di2015NewLine
15543059Di2015UniqueSeparatorpublic class PropertyServiceFactory{Di2015NewLine  private readonly IPropertyRepository _repository;Di2015NewLine  public PropertyServiceFactory(IPropertyRepository repository){Di2015NewLine    _repository = repositoryDi2015NewLine  }Di2015NewLine  public IPropertyService Create(){Di2015NewLine    PropertyService service = new PropertyService(_repository);Di2015NewLine    return service; Di2015NewLine  }Di2015NewLine}Di2015NewLine
15543059Di2015UniqueSeparatorConsole.WriteLine("Enter something...");Di2015NewLineIPropertyRepository repository = new PropertyRepository();Di2015NewLinePropertyServiceFactory factory = new PropertyServiceFactory(repository);Di2015NewLineIPropertyService _property = factory.Create();Di2015NewLine_property.TestMethod(Console.ReadLine());Di2015NewLine
15543337Di2015UniqueSeparatorprivate static Order CreateNewOrder(Order order, IList<OfferInfo> offerList, bool updateUser = true)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Guid? senderUserId = null;Di2015NewLineDi2015NewLine        /// Process user first so that, the user details are stored even if there is any error in other areasDi2015NewLine        /// Di2015NewLine        if (updateUser)Di2015NewLine        {Di2015NewLine            VerifyUserDetails(order.User);Di2015NewLineDi2015NewLine            /// Create/update sending user.Di2015NewLine            /// Di2015NewLine            senderUserId = BLUser.UpdateUser(order.User);Di2015NewLine            order.User = null;Di2015NewLine            Logger.WriteLog("Sender user added/updated successfully. UserID:" + senderUserId.ToString());Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            senderUserId = order.UserId;Di2015NewLineDi2015NewLine        /// Add company details before processing the order, so that the company details are stored if there is any error in other areas.Di2015NewLine        /// Di2015NewLine        if (order.Company != null)Di2015NewLine            order.CompanyId = BLCompany.UpdateCompany(order.Company).Id;Di2015NewLineDi2015NewLine        /// Verify and process orderDi2015NewLine        /// Di2015NewLine        VerifyOrderDetails(order, offerList);Di2015NewLineDi2015NewLine        using (IntreatEntities intreat = new IntreatEntities())Di2015NewLine        {Di2015NewLine            /// Find total amount for the orderDi2015NewLine            double orderAmt = 0;Di2015NewLine            double tableOrderAmt = 0;Di2015NewLineDi2015NewLine            order.Amount = 0;Di2015NewLine            foreach (OfferInfo offer in offerList)Di2015NewLine            {Di2015NewLine                orderAmt = (double)((from po in intreat.PartnerOffersDi2015NewLine                                              where po.Id == offer.OfferIdDi2015NewLine                                              select po.Price * offer.Quantity).ToList()).Sum();Di2015NewLine                order.Amount += orderAmt;Di2015NewLineDi2015NewLine                //If isPos, consider for tip calculationDi2015NewLine                if (offer.IsPos)Di2015NewLine                    tableOrderAmt += orderAmt;Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine            //check if tip amount has to be calculated, by checking for the tableorderAmtDi2015NewLine            if ((tableOrderAmt > 0) && (order.TipPercentage != null) && (order.TipPercentage.Value) > 0)Di2015NewLine            {Di2015NewLine                double tipAmt = (tableOrderAmt * (order.TipPercentage.Value * .01));Di2015NewLine                order.TipAmount = Math.Round(tipAmt);Di2015NewLine                order.Amount = (double)(order.Amount + order.TipAmount);Di2015NewLine            }Di2015NewLine            order.CreatedDate = DateTime.Now;Di2015NewLine            order.UserId = (Guid)senderUserId;Di2015NewLine            Logger.WriteLog(string.Format(CultureInfo.InvariantCulture, "order.TableNumber:{0}", order.TableNumber == null ? "(empty)" : order.TableNumber.ToString()));Di2015NewLineDi2015NewLine            /// Create and save order in dbDi2015NewLine            /// Di2015NewLine            intreat.Orders.AddObject(order);Di2015NewLine            intreat.SaveChanges();Di2015NewLine            order.Vouchers.Load();Di2015NewLine            Logger.WriteLog("Order added successfully. OrderId:" + order.Id.ToString(CultureInfo.InvariantCulture));Di2015NewLine        }Di2015NewLine        return order;Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        Logger.WriteLog(ex);Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15543376Di2015UniqueSeparatorActivate
15543450Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    string p = @"d:\\temp\\file.txt";Di2015NewLine    string result;Di2015NewLineDi2015NewLine    Stopwatch sw = new Stopwatch();Di2015NewLine    sw.Start();Di2015NewLine    for(int i = 0; i < 100000; i++)Di2015NewLine    {Di2015NewLine        result = " " + Path.GetFileName(p) + " ";Di2015NewLine    }Di2015NewLine    sw.Stop();Di2015NewLine    Console.WriteLine("PathGetFileName:" + sw.Elapsed.ToString());Di2015NewLine    sw = new Stopwatch();Di2015NewLine    sw.Start();Di2015NewLine    string file = Path.GetFileName(p);Di2015NewLine    for(int i = 0; i < 100000; i++)Di2015NewLine    {Di2015NewLine        result = " " + file + " ";Di2015NewLine    }Di2015NewLine    sw.Stop();Di2015NewLine    Console.WriteLine("string concat:" + sw.Elapsed.ToString());Di2015NewLine}Di2015NewLine
15543450Di2015UniqueSeparatorPathGetFileName: 205632 Di2015NewLineDi2015NewLinestring concat: 65234 Di2015NewLine
15543512Di2015UniqueSeparatorSelectedItem
15543512Di2015UniqueSeparatorpublic class ViewModelThatHostsTheListViewModelDi2015NewLine{Di2015NewLine    // All these properties should have property changed notification, I'm just leaving it out for the exampleDi2015NewLine    public PropertyChangedBase SelectedViewModel { get; set; } Di2015NewLineDi2015NewLine    public object SelectedItem { get; set; }Di2015NewLineDi2015NewLine    // Dictionary to hold last selected item for each VM - you might actually want to track this in the child VMs but this is just one way to do itDi2015NewLine    public Dictionary<PropertyChangedBase, object> _lastSelectedItem = new Dictionary..etc()Di2015NewLineDi2015NewLine    // Keep the dictionary of last selected item up to date when the selected item changesDi2015NewLine    public override void NotifyOfPropertyChange(string propertyName)Di2015NewLine    {Di2015NewLine        if(propertyName == "SelectedItem")Di2015NewLine        {Di2015NewLine            if(_lastSelectedItem.ContainsKey(SelectedViewModel))Di2015NewLine                _lastSelectedItem[SelectedViewModel] = SelectedItem;Di2015NewLine            elseDi2015NewLine                _lastSelectedItem.Add(SelectedViewModel, SelectedItem);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15543512Di2015UniqueSeparator<ListBox x:Name="SelectedViewModel" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" />Di2015NewLine
15543512Di2015UniqueSeparatorDisplayName
15543512Di2015UniqueSeparatorIHaveDisplayName
15543512Di2015UniqueSeparatorList
15543512Di2015UniqueSeparatorListBox
15543512Di2015UniqueSeparatorItemTemplate
15543512Di2015UniqueSeparatorContentControl
15543512Di2015UniqueSeparator<ListBox ItemsSource="{Binding SelectedViewModel.ListItems}" ...etc />Di2015NewLine
15543642Di2015UniqueSeparatorstring s = "for example original text is Apple replace";Di2015NewLineDi2015NewLinevar replaceWord = "Apple";Di2015NewLinevar s2 = s.Replace(replaceWord , new String('X', replaceWord.Length));Di2015NewLine
15543642Di2015UniqueSeparatornew String('X', replaceWord.Length)
15543642Di2015UniqueSeparatorreplaceWord
15543768Di2015UniqueSeparatorpublic WebCrawler(parameter here)Di2015NewLine{Di2015NewLine}Di2015NewLine
15543768Di2015UniqueSeparatorWebCrawler w = new WebCrawler(parameter here);
15543768Di2015UniqueSeparatorInstance Constructors
15543768Di2015UniqueSeparatorDEMO
15543846Di2015UniqueSeparatorBlockingCollection
15543846Di2015UniqueSeparatorConcurrentStack
15543902Di2015UniqueSeparator<Style TargetType="Button">Di2015NewLine<Setter Property="Template">Di2015NewLine    <Setter.Value>Di2015NewLine        <ControlTemplate TargetType="Button">Di2015NewLine            <Grid>Di2015NewLine                <VisualStateManager.VisualStateGroups>Di2015NewLine                    <VisualStateGroup x:Name="CommonStates">Di2015NewLine                        <VisualState x:Name="Normal"/>Di2015NewLine                        <VisualState x:Name="Disabled"/>Di2015NewLine                        <VisualState x:Name="MouseOver">Di2015NewLine                            <Storyboard>Di2015NewLine                                <DoubleAnimation Storyboard.TargetName="mouseOverBackgroundImage" Storyboard.TargetProperty="Opacity" Duration="0:0:0.1" To="1"/>Di2015NewLine                            </Storyboard>Di2015NewLine                        </VisualState>Di2015NewLine                        <VisualState x:Name="Pressed">Di2015NewLine                            <Storyboard>Di2015NewLine                                <DoubleAnimation Storyboard.TargetName="pressedBackgroundImage" Storyboard.TargetProperty="Opacity" Duration="0:0:0.1" To="1"/>Di2015NewLine                            </Storyboard>Di2015NewLine                        </VisualState>Di2015NewLine                    </VisualStateGroup>Di2015NewLine                </VisualStateManager.VisualStateGroups>Di2015NewLine                <Image Name="normalBackgroundImage" Source="{TemplateBinding local:BackgroundImages.NormalBackgroundImage}"/>Di2015NewLine                <Image Name="mouseOverBackgroundImage" Source="{TemplateBinding local:BackgroundImages.MouseOverBackgroundImage}" Opacity="0"/>Di2015NewLine                <Image Name="pressedBackgroundImage" Source="{TemplateBinding local:BackgroundImages.PressedBackgroundImage}" Opacity="0"/>Di2015NewLine                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>Di2015NewLine            </Grid>Di2015NewLine        </ControlTemplate>Di2015NewLine    </Setter.Value>Di2015NewLine</Setter>Di2015NewLine
15543902Di2015UniqueSeparator<Button local:BackgroundImages.NormalBackgroundImage="C:\\Users\\Public\\Pictures\\Sample Pictures\\Tulips.jpg"Di2015NewLine    local:BackgroundImages.MouseOverBackgroundImage="C:\\Users\\Public\\Pictures\\Sample Pictures\\Desert.jpg"Di2015NewLine    local:BackgroundImages.PressedBackgroundImage="C:\\Users\\Public\\Pictures\\Sample Pictures\\Penguins.jpg"Di2015NewLine    Content="Hello"/>Di2015NewLine
15543902Di2015UniqueSeparatorpublic static class BackgroundImagesDi2015NewLine{Di2015NewLinepublic static readonly DependencyProperty NormalBackgroundImageProperty =Di2015NewLine    DependencyProperty.RegisterAttached("NormalBackgroundImage", typeof(ImageSource), typeof(BackgroundImages));Di2015NewLineDi2015NewLinepublic static readonly DependencyProperty MouseOverBackgroundImageProperty =Di2015NewLine    DependencyProperty.RegisterAttached("MouseOverBackgroundImage", typeof(ImageSource), typeof(BackgroundImages));Di2015NewLineDi2015NewLinepublic static readonly DependencyProperty PressedBackgroundImageProperty =Di2015NewLine    DependencyProperty.RegisterAttached("PressedBackgroundImage", typeof(ImageSource), typeof(BackgroundImages));Di2015NewLineDi2015NewLinepublic static ImageSource GetNormalBackgroundImage(DependencyObject obj)Di2015NewLine{Di2015NewLine    return (ImageSource)obj.GetValue(NormalBackgroundImageProperty);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SetNormalBackgroundImage(DependencyObject obj, ImageSource value)Di2015NewLine{Di2015NewLine    obj.SetValue(NormalBackgroundImageProperty, value);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static ImageSource GetMouseOverBackgroundImage(DependencyObject obj)Di2015NewLine{Di2015NewLine    return (ImageSource)obj.GetValue(MouseOverBackgroundImageProperty);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SetMouseOverBackgroundImage(DependencyObject obj, ImageSource value)Di2015NewLine{Di2015NewLine    obj.SetValue(MouseOverBackgroundImageProperty, value);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static ImageSource GetPressedBackgroundImage(DependencyObject obj)Di2015NewLine{Di2015NewLine    return (ImageSource)obj.GetValue(PressedBackgroundImageProperty);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SetPressedBackgroundImage(DependencyObject obj, ImageSource value)Di2015NewLine{Di2015NewLine    obj.SetValue(PressedBackgroundImageProperty, value);Di2015NewLine}Di2015NewLine}Di2015NewLine
15543902Di2015UniqueSeparator<ControlTemplate TargetType="Button">Di2015NewLine<Border Name="border" BorderThickness="0" Di2015NewLine            Background="Transparent">Di2015NewLine      <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />Di2015NewLine</Border>Di2015NewLine<ControlTemplate.Triggers>Di2015NewLine    <Trigger Property="IsMouseOver" Value="True">Di2015NewLine        <Setter Property="Background">Di2015NewLine           <Setter.Value>Di2015NewLine               <ImageBrush ImageSource="/MyProjectName;component/Images/MyImage.jpg" />Di2015NewLine           </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Trigger>Di2015NewLine</ControlTemplate.Triggers>Di2015NewLine
15544009Di2015UniqueSeparatorFactory="System.ServiceModel.Activation.WebServiceHostFactory"Di2015NewLine
15544009Di2015UniqueSeparator<%@ ServiceHost Language="C#" Debug="true" Service="MyNamespace.Service1" CodeBehind="Service1.svc.cs" Factory="System.ServiceModel.Activation.WebServiceHostFactory" %>Di2015NewLine
15544077Di2015UniqueSeparatorFile.Exists()
15544077Di2015UniqueSeparatorfalse
15544077Di2015UniqueSeparator.csv
15544077Di2015UniqueSeparatorheader
15544077Di2015UniqueSeparator        bool exists = File.Exists(file);Di2015NewLine        using (StreamWriter writer = new StreamWriter(file, true))Di2015NewLine        {Di2015NewLine            if(!exists)Di2015NewLine                writer.WriteLine(header);Di2015NewLine            writer.WriteLine(strToSave);Di2015NewLine        }Di2015NewLine
15544159Di2015UniqueSeparatorAttributeExclude=true
15544159Di2015UniqueSeparator[assembly: Trace("Business", AttributeTargetTypes="BusinessLayer.*", AttributePriority = 1)]Di2015NewLine[assembly: Trace(AttributeTargetMembers="Dispose", AttributeExclude = true, AttributePriority = 2)]Di2015NewLine
15544159Di2015UniqueSeparator[assembly: Trace("Business", AttributeTargetTypes="BusinessLayer.*")]Di2015NewLinenamespace BusinessLayerDi2015NewLine{Di2015NewLine  public class Process : IDisposableDi2015NewLine  {Di2015NewLine   public Customer Create(string value) { ... }Di2015NewLine   public void Delete(long id) { ... }Di2015NewLineDi2015NewLine   [Trace(AttributeExclude=true)]Di2015NewLine   public void Dispose() { ... }Di2015NewLine  }Di2015NewLine}Di2015NewLine
15544239Di2015UniqueSeparator<file value="c:\\\\testLogs\\\\TwoProjects-[%processid].txt" />Di2015NewLine
15544239Di2015UniqueSeparator<file type="log4net.Util.PatternString" value="c:\\\\testLogs\\\\TwoProjects-[%processid].txt" />Di2015NewLine
15544448Di2015UniqueSeparator        public void Can_query_after_transaction_is_committed()Di2015NewLine        {Di2015NewLine            var connection = new OrmLiteConnectionFactory(":memory:", true, SqliteDialect.Provider, true);Di2015NewLine            using (var db = connection.OpenDbConnection())Di2015NewLine            {Di2015NewLine                db.DropAndCreateTable<SimpleObject>();Di2015NewLine                using (var trans = db.OpenTransaction()) Di2015NewLine                {Di2015NewLine                   db.Insert(new SimpleObject {test = "test"});Di2015NewLine                   trans.Commit();Di2015NewLine                }Di2015NewLine                Assert.DoesNotThrow(()=> db.Select<SimpleObject>());Di2015NewLine            }Di2015NewLine        }Di2015NewLine
15544500Di2015UniqueSeparatorprivate byte[] ReadByteArrayFromFile(string fileName)Di2015NewLine    {Di2015NewLine        byte[] buffer = null;Di2015NewLineDi2015NewLine        using(FileStream filestrm = new FileStream(fileName, FileMode.Open, FileAccess.Read))Di2015NewLine        using(BinaryReader binaryread = new BinaryReader(filestrm))Di2015NewLine        {Di2015NewLine             long longNumBytes = new FileInfo(fileName).Length;Di2015NewLine             buffer = binaryread.ReadBytes((int)longNumBytes);Di2015NewLine        }Di2015NewLineDi2015NewLine        return buffer;Di2015NewLine    }Di2015NewLine
15544500Di2015UniqueSeparatorusing
15544500Di2015UniqueSeparatorDispose()
15544673Di2015UniqueSeparatorXmlRoot
15544673Di2015UniqueSeparatorSite
15544673Di2015UniqueSeparatorSite
15544673Di2015UniqueSeparatorList<Site>
15544673Di2015UniqueSeparatorXmlRoot
15544673Di2015UniqueSeparatorXmlSerializer
15545044Di2015UniqueSeparatorWhere
15545044Di2015UniqueSeparatorFunc<TSource, bool>
15545044Di2015UniqueSeparatorFunc<KeyValuePair<TKey, TValue>, bool>
15545044Di2015UniqueSeparatorT1
15545044Di2015UniqueSeparatorT2
15545044Di2015UniqueSeparatorstring
15545044Di2015UniqueSeparatorT1
15545044Di2015UniqueSeparatorT2
15545044Di2015UniqueSeparatorTKey
15545044Di2015UniqueSeparatorTValue
15545044Di2015UniqueSeparatorprivate static IDictionary<TKey, TValue> Filter<TKey, TValue>(Di2015NewLine    Func<KeyValuePair<TKey, TValue>, bool> exp, IDictionary<TKey, TValue> col)Di2015NewLine{Di2015NewLine    return col.Where(exp).ToDictionary(r => r.Key, r => r.Value);Di2015NewLine}Di2015NewLine
15545136Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine    private SomeType innerObj = new SomeType();Di2015NewLine    public Bar GetFoo()Di2015NewLine    {Di2015NewLine        return innerObj.GetFoo();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
15545157Di2015UniqueSeparatorString.Format("{0}Search \\"{1}\\" ({2} hits in {3} files)\\n",Di2015NewLine          "\\t",Di2015NewLine          strSearchString,Di2015NewLine          nTotalHits,Di2015NewLine          nNumberOfFiles);Di2015NewLine
15545157Di2015UniqueSeparatorstring.Replace("\\\\t", "\\t")
15545157Di2015UniqueSeparatorstring.Format()
15545323Di2015UniqueSeparatorForm
15545323Di2015UniqueSeparatorCreateBitmapImage()
15545323Di2015UniqueSeparatorImage
15545323Di2015UniqueSeparatorprivate Bitmap CreateBitmapImage(Image image)Di2015NewLine
15545448Di2015UniqueSeparatorWebException
15545448Di2015UniqueSeparatorusing (var response = request.GetResponse())Di2015NewLine{Di2015NewLine    var httpResponse = (HttpWebResponse) response;Di2015NewLine    // Use httpResponse hereDi2015NewLine}Di2015NewLine
15545448Di2015UniqueSeparatoras
15545448Di2015UniqueSeparatorHttpWebResponse
15545448Di2015UniqueSeparatorInvalidCastException
15545448Di2015UniqueSeparatorNullReferenceException
15545486Di2015UniqueSeparatorStreamWriter
15545568Di2015UniqueSeparator@Html.EditorFor(model => model.UserName, new { @readonly = true});Di2015NewLine
15545568Di2015UniqueSeparator@Html.EditorFor(model => model.UserName, new { @readonly = "readonly"});Di2015NewLine
15545664Di2015UniqueSeparatorstring unt = e.Values["UNT_COD"]+"";Di2015NewLine if (unt == "")Di2015NewLine {Di2015NewLine     e.Cancel = true;  Di2015NewLine }Di2015NewLine
15545698Di2015UniqueSeparatorCultureInfo ci = CultureInfo.GetCultureInfo("NL-be");Di2015NewLinedouble d = Convert.ToDouble("1.234,45", ci);Di2015NewLine
15545775Di2015UniqueSeparatorSELECT Di2015NewLineCASE Di2015NewLine  WHEN Status = 1 THEN 'New'Di2015NewLine  WHEN Status = 2 THEN 'Pending'Di2015NewLine  WHEN Status = 3 THEN 'Sent'Di2015NewLineEND as "StatusStr"Di2015NewLineFROMDi2015NewLine...Di2015NewLine;Di2015NewLine
15545827Di2015UniqueSeparatorvar observations = Di2015NewLine    from ob in db.TDTObservations.OfType<TDTSpeedObservation>()Di2015NewLine    select new  {Di2015NewLine       Id = ob.ID,Di2015NewLine       AcademicYearId = ob.Teachers.FirstOrDefault().Classes.FirstOrDefault().AcademicYearID,Di2015NewLine       observationDate = ob.ObservationDate,Di2015NewLine       schoolId = ob.Teachers.FirstOrDefault().Classes.FirstOrDefault().SchoolID,Di2015NewLine       staffId=ob.Teachers.FirstOrDefault().IDDi2015NewLine    };Di2015NewLineDi2015NewLinevar result = from o in observationsDi2015NewLine             group o by o.staffId into gDi2015NewLine             select g.OrderByDescending(x => x.observationDate).First();Di2015NewLine
15545968Di2015UniqueSeparatorprivate BitmapImage bmp=new BitmapImage(new Uri("/....../ebi.png", UriKind.RelativeOrAbsolute);Di2015NewLine
15545968Di2015UniqueSeparatorfor(int i=0; i<...;i++)Di2015NewLine{Di2015NewLine    img = new System.Windows.Controls.Image();  // This makes the difference.Di2015NewLine    img.Source = bmp;Di2015NewLine    dynamicStackPanel.Children.Add(img);Di2015NewLine}Di2015NewLine
15546164Di2015UniqueSeparatormyWorkbook.Close();
15546164Di2015UniqueSeparatorworksheetPart.Worksheet.Save();
15546348Di2015UniqueSeparatorDisplayColorEmoji
15546348Di2015UniqueSeparator<TextBlock TextOptions.DisplayColorEmoji="False">?</TextBlock>Di2015NewLine
15546360Di2015UniqueSeparatorforeach
15546360Di2015UniqueSeparatorGetEnumerator()
15546360Di2015UniqueSeparatorStackTrace
15546360Di2015UniqueSeparatorpublic IEnumerator<string> GetEnumerator()Di2015NewLine{Di2015NewLine    StackTrace stackTrace = new StackTrace();Di2015NewLine    Console.WriteLine(stackTrace.GetFrame(1).GetMethod().Name);Di2015NewLine    return items.GetEnumerator();Di2015NewLine}Di2015NewLine
15546360Di2015UniqueSeparatorGetEnumerator()
15546360Di2015UniqueSeparator[CallerMemberName]
15546360Di2015UniqueSeparatorpublic IEnumerable<string> Iterate([CallerMemberName]string caller = null)Di2015NewLine{Di2015NewLine    Console.WriteLine(caller);Di2015NewLine    return items;Di2015NewLine}Di2015NewLineDi2015NewLineforeach (var myItem in items.Iterate())Di2015NewLine{Di2015NewLine    //..Di2015NewLine}Di2015NewLine
15546374Di2015UniqueSeparatorWrongAnswer
15546374Di2015UniqueSeparatorfrom info in listDi2015NewLinewhere info != nullDi2015NewLineselect newDi2015NewLine{Di2015NewLine    Question = info.QuestionText ?? "Test",Di2015NewLine    CorrectAnswer = info.CorrectAnswer.OptionText ?? "Test",Di2015NewLine    WrongAnswer1  = info.WrongAnswer1 !=null ? info.WrongAnswer1.OptionText : "Test",Di2015NewLine    WrongAnswer2  = info.WrongAnswer2 !=null ? info.WrongAnswer2.OptionText : "Test", Di2015NewLine    WrongAnswer3  = info.WrongAnswer3 !=null ? info.WrongAnswer3.OptionText : "Test"Di2015NewLine};Di2015NewLine
15546374Di2015UniqueSeparatorpublic string DefaultIfNull<TValue>(TValue value, Func<TValue, string> selector) where TValue : classDi2015NewLine{Di2015NewLine    if(value != null)Di2015NewLine        return selector(value);Di2015NewLine    return "Test"; //you can make resut generic tooDi2015NewLine}   Di2015NewLine
15546374Di2015UniqueSeparatorFunc<Answer,string> optionTextSelector = answer => answer.OptionText;Di2015NewLineDi2015NewLinefrom info in listDi2015NewLinewhere info != nullDi2015NewLineselect newDi2015NewLine{Di2015NewLine    Question = info.QuestionText ?? "Test",Di2015NewLine    CorrectAnswer = DefaultIfNull( info.CorrectAnswer, optionTextSelector ),Di2015NewLine    WrongAnswer1  = DefaultIfNull( info.WrongAnswer1,  optionTextSelector ),Di2015NewLine    WrongAnswer2  = DefaultIfNull( info.WrongAnswer2,  optionTextSelector ),Di2015NewLine    WrongAnswer3  = DefaultIfNull( info.WrongAnswer3,  optionTextSelector ),Di2015NewLine};Di2015NewLine
15546486Di2015UniqueSeparatorresults.TaggedOutput
15546486Di2015UniqueSeparatorcm.Run()
15546486Di2015UniqueSeparatorresults
15546486Di2015UniqueSeparatordeppath
15546545Di2015UniqueSeparatorJObject
15546545Di2015UniqueSeparatorIDictionary<string, JToken>
15546545Di2015UniqueSeparatorTryGetValue
15546545Di2015UniqueSeparatorJToken token;Di2015NewLineif (jResult.TryGetValue(TitleTag, out token)) {Di2015NewLine    myObject.Title = (string)token;Di2015NewLine} else {Di2015NewLine    myObject.Title = String.Empty;Di2015NewLine}Di2015NewLine
15546701Di2015UniqueSeparator<ribbon:RibbonComboBox>Di2015NewLine    <ribbon:RibbonGallery SelectedItem="{Binding Path=PropertyToBindTo}">Di2015NewLine        <ribbon:RibbonGalleryCategory ItemsSource="{Binding Source={StaticResource    CollectionOfPossibleChoices}}" />Di2015NewLine    </ribbon:RibbonGallery>Di2015NewLine</ribbon:RibbonComboBox>Di2015NewLine
15546859Di2015UniqueSeparatorstring rootPath = @"path you your root folder";Di2015NewLinevar header = "***********************************" + Environment.NewLine;Di2015NewLineDi2015NewLinevar files = Directory.GetFiles(rootPath, "*.cs", SearchOption.AllDirectories);Di2015NewLineDi2015NewLinevar result = files.Select(path => new { Name = Path.GetFileName(path), Contents = File.ReadAllText(path)})Di2015NewLine                  .Select(info =>   Di2015NewLine                      headerDi2015NewLine                    + "Filename: " + info.Name + Environment.NewLineDi2015NewLine                    + headerDi2015NewLine                    + info.Contents);Di2015NewLineDi2015NewLineDi2015NewLinevar singleStr = string.Join(Environment.NewLine, result);Di2015NewLineConsole.WriteLine ( singleStr );Di2015NewLineFile.WriteAllText(@"C:\\output.txt", singleStr, Encoding.UTF8);Di2015NewLine
15546859Di2015UniqueSeparatorStringBuilder
15546859Di2015UniqueSeparatorSelect
15546915Di2015UniqueSeparatorstring code Di2015NewLine       = @"<script> Di2015NewLine              window.opener.document.getElemenById('buttonID').disabled=false;Di2015NewLine              window.close();Di2015NewLineDi2015NewLine         </script>";Di2015NewLineResponse.Write(code);Di2015NewLineResponse.End();Di2015NewLine
15546915Di2015UniqueSeparatorbuttonID
15546976Di2015UniqueSeparator{"Owner":"s083151",Di2015NewLine "Permissions":"public",Di2015NewLine "Name":"SomeRandomMeeting",Di2015NewLine "Begin":"/Date(1364234400)/",Di2015NewLine "End":"/Date(1364248800)/",Di2015NewLine "Url":"MyRandomUrl"}Di2015NewLine
15546976Di2015UniqueSeparator"\\/Date(1364234400)\\/"Di2015NewLine
15547029Di2015UniqueSeparatorDictionary<string, object>
15547187Di2015UniqueSeparatoren-GB
15547187Di2015UniqueSeparator<%@ Page Language="C#" AutoEventWireup="true" CodeFile="Default.aspx.cs" Di2015NewLineInherits="_Default" Culture = "en-GB" %>Di2015NewLine
15547187Di2015UniqueSeparatorControlToValidate
15547187Di2015UniqueSeparatorControlToCompare
15547187Di2015UniqueSeparatorValueToCompare
15547187Di2015UniqueSeparator <asp:CompareValidator ID="CompareValidator4" runat="server" Di2015NewLine    ControlToValidate="txtEndDate" Di2015NewLine    ControlToCompare="txtStartDate" Di2015NewLine    Type="Date" Operator="GreaterThanEqual"Di2015NewLine    Display="None" ErrorMessage="End Date should be greater than or equal to Start Date." SetFocusOnError="True">Di2015NewLine</asp:CompareValidator>Di2015NewLine
15547212Di2015UniqueSeparator@Html.TextBoxFor(model => model.UserName, new { @readonly = true }) %>Di2015NewLine
15547443Di2015UniqueSeparatorMatchCollection matches = Regex.Matches(s1, @"#\\d+");Di2015NewLineDi2015NewLinestring[] result = matches.Cast<Match>()Di2015NewLine                         .Select(match => match.Value)Di2015NewLine                         .ToArray();Di2015NewLineDi2015NewLineConsole.WriteLine( string.Join(Environment.NewLine, result) );Di2015NewLine
15547443Di2015UniqueSeparators1
15547443Di2015UniqueSeparator#1233Di2015NewLine#343Di2015NewLine#24311Di2015NewLine
15547511Di2015UniqueSeparatorEnter
15547511Di2015UniqueSeparatorLeave
15547627Di2015UniqueSeparatorCarCollectionViewModel
15547627Di2015UniqueSeparatorHondaCollectionViewModelPopulator
15547627Di2015UniqueSeparatorKiaCollectionViewModelPopulator
15547627Di2015UniqueSeparatorIViewModelPopulator<T>
15547627Di2015UniqueSeparator<Page.DataContext>Di2015NewLine    <VM:SearchPageViewModel>Di2015NewLine        <VM:SearchPageViewModel.ViewModelPopulator>Di2015NewLine            <VMP:SearchPageViewModelPopulator />Di2015NewLine        </VM:SearchPageViewModel.ViewModelPopulator>Di2015NewLine    </VM:SearchPageViewModel>Di2015NewLine</Page.DataContext>Di2015NewLine
15547742Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Globalization;Di2015NewLineDi2015NewLinenamespace DemoDi2015NewLine{Di2015NewLine    public static class ProgramDi2015NewLine    {Di2015NewLine        public static void Main(string[] args)Di2015NewLine        {Di2015NewLine            System.Threading.Thread.CurrentThread.CurrentUICulture = new CultureInfo("da-DK");Di2015NewLine            System.Threading.Thread.CurrentThread.CurrentCulture = System.Threading.Thread.CurrentThread.CurrentUICulture;Di2015NewLine            string test = "aaaaaaaaaaaaaaaaaaaa";Di2015NewLine            Console.WriteLine(test.StartsWith("aa"));Di2015NewLine            Console.WriteLine(test.StartsWith("aaa"));Di2015NewLine            Console.WriteLine(test.StartsWith("aaaa"));Di2015NewLine            Console.WriteLine(test.StartsWith("aaaaa"));Di2015NewLine            Console.WriteLine(test.StartsWith("aaaaaa"));Di2015NewLine            Console.WriteLine(test.StartsWith("aaaaaaa"));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15547824Di2015UniqueSeparatorNUnit
15547824Di2015UniqueSeparatorEquals
15547824Di2015UniqueSeparatorclass Person Di2015NewLine{Di2015NewLine    public string Firstname {get; set;}Di2015NewLine    public string Lastname {get; set;} Di2015NewLineDi2015NewLine    public override bool Equals(object other) Di2015NewLine    {Di2015NewLine      var toCompareWith = other as Person;Di2015NewLine      if (toCompareWith == null) Di2015NewLine        return false;Di2015NewLine      return this.Firstname ==  toCompareWith.Firstname && Di2015NewLine          this.Lastname ==  toCompareWith.Lastname; Di2015NewLine    }Di2015NewLine}  Di2015NewLine
15547824Di2015UniqueSeparatorAssert.AreEqual(expectedList.ToAarry(), actualList.ToArray());Di2015NewLine
15548008Di2015UniqueSeparatorif(comboBox2.SelectedValue != null)Di2015NewLine{Di2015NewLine    DataView dv = comboBox1.DataSource as DataView;Di2015NewLine    dv.RowFilter = "pcatid = " + comboBox2.SelectedValue.ToString();Di2015NewLine}Di2015NewLine
15548053Di2015UniqueSeparatorforeach (DataRow dataRow in Table.Rows)Di2015NewLine  {Di2015NewLine   foreach (var item in dataRow.ItemArray)Di2015NewLine   {Di2015NewLine    Console.WriteLine(item);Di2015NewLine   }Di2015NewLine  }Di2015NewLine
15548053Di2015UniqueSeparator DataTable Table = new DataTable("TestTable");Di2015NewLine using(SqlCommand _cmd = new SqlCommand(queryStatement, _con))Di2015NewLine    {        Di2015NewLine       SqlDataAdapter _dap = new SqlDataAdapter(_cmd);Di2015NewLine       _con.Open();Di2015NewLine       _dap.Fill(Table);Di2015NewLine       _con.Close();Di2015NewLineDi2015NewLine      }Di2015NewLine Console.WriteLine(Table.Rows.Count);  Di2015NewLine foreach (DataRow dataRow in Table.Rows)Di2015NewLine      {Di2015NewLine       foreach (var item in dataRow.ItemArray)Di2015NewLine       {Di2015NewLine        Console.WriteLine(item);Di2015NewLine       }Di2015NewLine      }Di2015NewLine
15548063Di2015UniqueSeparator$(document).ready(function () {Di2015NewLine    $('input:radio').each(function (radElem) {Di2015NewLine        var radId = $(this).attr('id');Di2015NewLine        alert(radId);Di2015NewLineDi2015NewLine    });Di2015NewLineDi2015NewLine     $('input:radio').on('click', function () {Di2015NewLine            alert('Clicked');Di2015NewLine        });Di2015NewLine});Di2015NewLine
15548128Di2015UniqueSeparatorWebClient
15548128Di2015UniqueSeparatorController.File
15548128Di2015UniqueSeparatorDownLoadData
15548128Di2015UniqueSeparatorpublic ActionResult GetImage(string fileName)Di2015NewLine{Di2015NewLine    if (!String.IsNullOrEmpty(fileName))Di2015NewLine    {Di2015NewLine        using (WebClient wc = new WebClient())Di2015NewLine        {                   Di2015NewLine            var byteArr= wc.DownloadData(fileName);Di2015NewLine            return File(byteArr, "image/png");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return Content("No file name provided");Di2015NewLine}Di2015NewLine
15548128Di2015UniqueSeparatoryoursitename/yourController/GetImage?fileName="http://somesite.com/logo.pngDi2015NewLine
15548201Di2015UniqueSeparatorComboBox
15548201Di2015UniqueSeparatorObservableCollection<T>
15548201Di2015UniqueSeparatorComboBox
15548201Di2015UniqueSeparatorObservableCollection<Label>
15548201Di2015UniqueSeparatorObservableCollection<string>
15548201Di2015UniqueSeparator<ComboBox x:Name="cmb1" Height="24" Margin="0,27,0,0" VerticalAlignment="Top" Width="131">Di2015NewLine   <ComboBox.ItemTemplate>Di2015NewLine       <DataTemplate>Di2015NewLine           <Label Content="{Binding}"/>Di2015NewLine       </DataTemplate>Di2015NewLine   </ComboBox.ItemTemplate>Di2015NewLine</ComboBox>Di2015NewLine
15548204Di2015UniqueSeparatorForm.ResizeEnd
15548232Di2015UniqueSeparatorvoice_list.setOnItemClickListner(...)Di2015NewLine
15548232Di2015UniqueSeparatorvoice_list.ItemClick += delegate(object sender, ItemEventArgs args)Di2015NewLine       {Di2015NewLine        // When clicked, show a toast with the TextView text  Di2015NewLine        // do what you wantDi2015NewLine       };  Di2015NewLine
15548236Di2015UniqueSeparator$(function(){Di2015NewLine    $("#buttonID").click(function(event) {Di2015NewLine        event.preventDefault();Di2015NewLine        $('<div title="Confirm Box"></div>').dialog({Di2015NewLine            open: function (event, ui) {Di2015NewLine                $(this).html("Yes or No question?");Di2015NewLine            },Di2015NewLine            close: function () {Di2015NewLine                $(this).remove();Di2015NewLine            },Di2015NewLine            resizable: false,Di2015NewLine            height: 140,Di2015NewLine            modal: true,Di2015NewLine            buttons: {Di2015NewLine                'Yes': function () {Di2015NewLine                    $(this).dialog('close');Di2015NewLine                    $.post('url/theValueYouWantToPass');Di2015NewLineDi2015NewLine                },Di2015NewLine                'No': function () {Di2015NewLine                    $(this).dialog('close');Di2015NewLine                    $.post('url/theOtherValueYouWantToPAss');Di2015NewLine                }Di2015NewLine            }Di2015NewLine        });Di2015NewLine    });Di2015NewLine});Di2015NewLine
15548242Di2015UniqueSeparatorSelectedItem
15548242Di2015UniqueSeparatorCombobox.SelectedItem
15548242Di2015UniqueSeparatorRepositories
15548242Di2015UniqueSeparatorSelectedItem
15548242Di2015UniqueSeparatorRepositories = GetData();Di2015NewLineSelectedItem = Repositories.FirstOrDefault();Di2015NewLine
15548242Di2015UniqueSeparator<ComboBox ItemsSource="{Binding Path=SelectedItem}"[...]Di2015NewLine
15548271Di2015UniqueSeparator<DnaLibrary Name="MyExcel Add-In" RuntimeVersion="v4.0">Di2015NewLine    <ExternalLibrary Path="MyExcelLibrary.dll" />Di2015NewLine    <ExternalLibrary Path="AsyncFunctions.dll" />Di2015NewLine</DnaLibrary>Di2015NewLine
15548342Di2015UniqueSeparatorreturn @"Integrated Security=True;Data Source=(local);" +Di2015NewLine                     "Initial Catalog=OfficeSupply";Di2015NewLine
15548388Di2015UniqueSeparatorSoleColorService.All()Di2015NewLine                .GroupBy(x => x.SoleCode)Di2015NewLine                .Select(g => g.First())Di2015NewLine                .ToList();Di2015NewLine
15548388Di2015UniqueSeparatorSoleCode
15548388Di2015UniqueSeparatorSoleColorService.All()Di2015NewLine                .GroupBy(x => x.Sole == null ? string.Empty : x.Sole.Code)Di2015NewLine                .Select(g => g.First())Di2015NewLine                .ToList();Di2015NewLine
15548388Di2015UniqueSeparatorSoleCode
15548388Di2015UniqueSeparatorSoleColorService.All()Di2015NewLine                .AsEnumerable()Di2015NewLine                .GroupBy(x => x.SoleCode)Di2015NewLine                .Select(g => g.First())Di2015NewLine                .ToList();Di2015NewLine
15548399Di2015UniqueSeparatorlet
15548399Di2015UniqueSeparatorvar query =Di2015NewLine(from c in DB.SabtHoghoghsDi2015NewLinejoin aa in DB.SabtHesabKarmands on c.KarmandID equals aa.KarmandIDDi2015NewLinelet x = DB.SabtHesabKarmands.Where(q => q.BabatMah.Year == c.BabatMah.Year &&Di2015NewLine        q.BabatMah.Month == c.BabatMah.Month && q.HesabKarmand.HesabKarmandTypeID == 1)Di2015NewLine        .Sum(aaa => aaa.Tedad * aaa.HesabKarmand.Mablagh)Di2015NewLinelet y = DB.SabtHesabKarmands.Where(q => q.BabatMah.Year == c.BabatMah.Year &&Di2015NewLine        q.BabatMah.Month == c.BabatMah.Month && q.HesabKarmand.HesabKarmandTypeID == 2)Di2015NewLine        .Sum(aaa => aaa.Tedad * aaa.HesabKarmand.Mablagh)Di2015NewLineselect newDi2015NewLine{Di2015NewLine    c.Karmand.FName,Di2015NewLine    c.BabatMah,Di2015NewLineDi2015NewLine    X = x,Di2015NewLine    Y = y,Di2015NewLineDi2015NewLine    Z = y - x,   //how to do this(1)Di2015NewLineDi2015NewLine    karkard = (c.Karmand.ExitTime - c.Karmand.EnterTime).Hours * 30  //how to do this(2)Di2015NewLineDi2015NewLine}).Distinct();Di2015NewLine
15548462Di2015UniqueSeparatorpublic class TextBoxInputMaskBehavior : Behavior<TextBox>Di2015NewLine{Di2015NewLine    private WeakPropertyChangeNotifier _notifier;Di2015NewLineDi2015NewLine    #region DependencyPropertiesDi2015NewLineDi2015NewLine    public static readonly DependencyProperty InputMaskProperty =Di2015NewLine      DependencyProperty.Register("InputMask", typeof(string), typeof(TextBoxInputMaskBehavior), null);Di2015NewLineDi2015NewLine    public string InputMaskDi2015NewLine    {Di2015NewLine        get { return (string)GetValue(InputMaskProperty); }Di2015NewLine        set { SetValue(InputMaskProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static readonly DependencyProperty PromptCharProperty =Di2015NewLine       DependencyProperty.Register("PromptChar", typeof(char), typeof(TextBoxInputMaskBehavior), new PropertyMetadata('_'));Di2015NewLineDi2015NewLine    public char PromptCharDi2015NewLine    {Di2015NewLine        get { return (char)GetValue(PromptCharProperty); }Di2015NewLine        set { SetValue(PromptCharProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static readonly DependencyProperty ResetOnSpaceProperty =Di2015NewLine       DependencyProperty.Register("ResetOnSpace", typeof(bool), typeof(TextBoxInputMaskBehavior), new PropertyMetadata(false));Di2015NewLineDi2015NewLine    public bool ResetOnSpaceDi2015NewLine    {Di2015NewLine        get { return (bool)GetValue(ResetOnSpaceProperty); }Di2015NewLine        set { SetValue(ResetOnSpaceProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    public MaskedTextProvider Provider { get; private set; }Di2015NewLineDi2015NewLineDi2015NewLine    public TextBoxInputMaskBehavior()Di2015NewLine    {Di2015NewLine        //defaultsDi2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnAttached()Di2015NewLine    {Di2015NewLine        base.OnAttached();Di2015NewLine        AssociatedObject.Loaded += AssociatedObjectLoaded;Di2015NewLine        AssociatedObject.PreviewTextInput += AssociatedObjectPreviewTextInput;Di2015NewLine        AssociatedObject.PreviewKeyDown += AssociatedObjectPreviewKeyDown;Di2015NewLineDi2015NewLine        DataObject.AddPastingHandler(AssociatedObject, Pasting);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    protected override void OnDetaching()Di2015NewLine    {Di2015NewLine        base.OnDetaching();Di2015NewLine        AssociatedObject.Loaded -= AssociatedObjectLoaded;Di2015NewLine        AssociatedObject.PreviewTextInput -= AssociatedObjectPreviewTextInput;Di2015NewLine        AssociatedObject.PreviewKeyDown -= AssociatedObjectPreviewKeyDown;Di2015NewLineDi2015NewLine        DataObject.RemovePastingHandler(AssociatedObject, Pasting);Di2015NewLine    }Di2015NewLineDi2015NewLine    /*Di2015NewLine    Mask Character  Accepts  Required?  Di2015NewLine    0  Digit (0-9)  Required  Di2015NewLine    9  Digit (0-9) or space  Optional  Di2015NewLine    #  Digit (0-9) or space  Required  Di2015NewLine    L  Letter (a-z, A-Z)  Required  Di2015NewLine    ?  Letter (a-z, A-Z)  Optional  Di2015NewLine    &  Any character  Required  Di2015NewLine    C  Any character  Optional  Di2015NewLine    A  Alphanumeric (0-9, a-z, A-Z)  Required  Di2015NewLine    a  Alphanumeric (0-9, a-z, A-Z)  Optional  Di2015NewLine       Space separator  Required Di2015NewLine    .  Decimal separator  Required  Di2015NewLine    ,  Group (thousands) separator  Required  Di2015NewLine    :  Time separator  Required  Di2015NewLine    /  Date separator  Required  Di2015NewLine    $  Currency symbol  Required  Di2015NewLineDi2015NewLine    In addition, the following characters have special meaning:Di2015NewLineDi2015NewLine    Mask Character  Meaning  Di2015NewLine    <  All subsequent characters are converted to lower case  Di2015NewLine    >  All subsequent characters are converted to upper case  Di2015NewLine    |  Terminates a previous < or >  Di2015NewLine    \\  Escape: treat the next character in the mask as literal text rather than a mask symbol  Di2015NewLineDi2015NewLine    */Di2015NewLine    void AssociatedObjectLoaded(object sender, System.Windows.RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        this.Provider = new MaskedTextProvider(InputMask, CultureInfo.CurrentCulture);Di2015NewLine        this.Provider.PromptChar = this.PromptChar;Di2015NewLine        this.Provider.SkipLiterals = true;Di2015NewLine        this.Provider.ResetOnSpace = this.ResetOnSpace;Di2015NewLine        this.Provider.Set(AssociatedObject.Text);Di2015NewLineDi2015NewLine        AssociatedObject.Text = GetProviderText();Di2015NewLineDi2015NewLine        //seems the only way that the text is formatted correct, when source is updatedDi2015NewLine        //AddValueChanged for TextProperty in a weak mannerDi2015NewLine        this._notifier = new WeakPropertyChangeNotifier(this.AssociatedObject, TextBox.TextProperty);Di2015NewLine        this._notifier.ValueChanged += new EventHandler(this.UpdateText);          Di2015NewLine    }Di2015NewLine    void AssociatedObjectPreviewTextInput(object sender, System.Windows.Input.TextCompositionEventArgs e)Di2015NewLine    {Di2015NewLine        e.Handled = true;Di2015NewLineDi2015NewLine        this.TreatSelectedText();Di2015NewLineDi2015NewLine        var position = this.GetNextCharacterPosition(AssociatedObject.CaretIndex);Di2015NewLineDi2015NewLine        if (Keyboard.IsKeyToggled(Key.Insert))Di2015NewLine        {Di2015NewLine            if(!this.Provider.Replace(e.Text, position))Di2015NewLine            {Di2015NewLine                System.Media.SystemSounds.Beep.Play();Di2015NewLine                return;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            if(!this.Provider.InsertAt(e.Text, position))Di2015NewLine            {Di2015NewLine                System.Media.SystemSounds.Beep.Play();Di2015NewLine                return;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        var nextposition = this.GetNextCharacterPosition(position + 1);Di2015NewLine        this.RefreshText(nextposition);Di2015NewLine    }Di2015NewLineDi2015NewLine    void AssociatedObjectPreviewKeyDown(object sender, KeyEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Key == Key.Space)//handle the spaceDi2015NewLine        {Di2015NewLine            e.Handled = true;Di2015NewLineDi2015NewLine            this.TreatSelectedText();Di2015NewLine            var position = this.GetNextCharacterPosition(AssociatedObject.CaretIndex);Di2015NewLineDi2015NewLine            if (!this.Provider.InsertAt(" ", position))Di2015NewLine            {Di2015NewLine                System.Media.SystemSounds.Beep.Play();Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            this.RefreshText(AssociatedObject.CaretIndex + 1);Di2015NewLine        }Di2015NewLineDi2015NewLine        if (e.Key == Key.Back && AssociatedObject.CaretIndex > 0)//handle the back spaceDi2015NewLine        {Di2015NewLine            e.Handled = true;Di2015NewLineDi2015NewLine            //wenn etwas markiert war und der nutzer Backspace klickt soll nur das markierte verschwindenDi2015NewLine            if(this.TreatSelectedText())Di2015NewLine            {Di2015NewLine                this.RefreshText(AssociatedObject.CaretIndex);Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            var denDavor = AssociatedObject.CaretIndex - 1;Di2015NewLineDi2015NewLine            if(this.Provider.IsEditPosition(denDavor))Di2015NewLine            {Di2015NewLine                if (!this.Provider.RemoveAt(denDavor))Di2015NewLine                {Di2015NewLine                    System.Media.SystemSounds.Beep.Play();Di2015NewLine                    return;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            this.RefreshText(AssociatedObject.CaretIndex - 1);Di2015NewLine        }Di2015NewLineDi2015NewLine        if (e.Key == Key.Delete)//handle the delete keyDi2015NewLine        {Di2015NewLine            e.Handled = true;Di2015NewLineDi2015NewLine            //wenn etwas markiert war und der nutzer Delete klickt soll nur das markierte verschwindenDi2015NewLine            if (this.TreatSelectedText())Di2015NewLine            {Di2015NewLine                this.RefreshText(AssociatedObject.CaretIndex);Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            var position = AssociatedObject.CaretIndex;Di2015NewLineDi2015NewLine            if (this.Provider.IsEditPosition(position))Di2015NewLine            {Di2015NewLine                if (!this.Provider.RemoveAt(position))Di2015NewLine                {Di2015NewLine                    System.Media.SystemSounds.Beep.Play();Di2015NewLine                    return;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                System.Media.SystemSounds.Beep.Play();Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            this.RefreshText(AssociatedObject.CaretIndex);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Pasting prÃ¼ft ob korrekte Daten reingepastet werdenDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="sender"></param>Di2015NewLine    /// <param name="e"></param>Di2015NewLine    private void Pasting(object sender, DataObjectPastingEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.DataObject.GetDataPresent(typeof(string)))Di2015NewLine        {Di2015NewLine            var pastedText = (string)e.DataObject.GetData(typeof(string));Di2015NewLineDi2015NewLine            this.TreatSelectedText();Di2015NewLineDi2015NewLine            var position = GetNextCharacterPosition(AssociatedObject.CaretIndex);Di2015NewLineDi2015NewLine            if (!this.Provider.InsertAt(pastedText, position))Di2015NewLine            {Di2015NewLine                System.Media.SystemSounds.Beep.Play();Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                this.RefreshText(position);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        e.CancelCommand();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void UpdateText(object sender, EventArgs eventArgs)Di2015NewLine    {Di2015NewLine        //check Provider.Text + TextBox.TextDi2015NewLine        if (this.Provider.ToDisplayString().Equals(AssociatedObject.Text))Di2015NewLine            return;Di2015NewLineDi2015NewLine        //use provider to formatDi2015NewLine        var success = this.Provider.Set(AssociatedObject.Text);Di2015NewLineDi2015NewLine        //ui and mvvm/codebehind should be in syncDi2015NewLine        this.SetText(success ? GetProviderText() : AssociatedObject.Text);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Falls eine Textauswahl vorliegt wird diese entsprechend behandelt.Di2015NewLine    /// </summary>Di2015NewLine    /// <returns>true Textauswahl behandelt wurde, ansonsten falls </returns>Di2015NewLine    private bool TreatSelectedText()Di2015NewLine    {Di2015NewLine        if (AssociatedObject.SelectionLength > 0)Di2015NewLine        {Di2015NewLine            this.Provider.RemoveAt(AssociatedObject.SelectionStart, AssociatedObject.SelectionStart + AssociatedObject.SelectionLength - 1);Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RefreshText(int position)Di2015NewLine    {Di2015NewLine        SetText(GetProviderText());Di2015NewLineDi2015NewLine        AssociatedObject.CaretIndex = position;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void SetText(string text)Di2015NewLine    {Di2015NewLine        AssociatedObject.Text = String.IsNullOrWhiteSpace(text) ? String.Empty : text;Di2015NewLine    }Di2015NewLineDi2015NewLine    private int GetNextCharacterPosition(int caretIndex)Di2015NewLine    {Di2015NewLine        var start = caretIndex;Di2015NewLineDi2015NewLine        var position = this.Provider.FindEditPositionFrom(start, true);Di2015NewLineDi2015NewLine        if (position == -1)Di2015NewLine            return start;Di2015NewLine        elseDi2015NewLine            return position;Di2015NewLine    }Di2015NewLineDi2015NewLine    private string GetProviderText()Di2015NewLine    {Di2015NewLine        //wenn noch gar kein Zeichen eingeben wurde, soll auch nix drin stehenDi2015NewLine        //kÃ¶nnte man noch anpassen wenn man masken in der OberflÃ¤che vllt doch haben will bei nem leeren feldDi2015NewLine        return this.Provider.AssignedEditPositionCount > 0Di2015NewLine                   ? this.Provider.ToDisplayString()Di2015NewLine                   : this.Provider.ToString(false, false);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
15548571Di2015UniqueSeparator Steema.TeeChart.Tools.CursorTool cursorTool1;Di2015NewLine private Steema.TeeChart.Tools.Annotation ann;Di2015NewLine private double xval;Di2015NewLine private void InitializeChart()Di2015NewLine {Di2015NewLine     tChart1.Aspect.View3D = false;Di2015NewLine     //ToolsDi2015NewLine     cursorTool1 = new Steema.TeeChart.Tools.CursorTool(tChart1.Chart);Di2015NewLine     cursorTool1.Style = Steema.TeeChart.Tools.CursorToolStyles.Vertical;Di2015NewLine    // cursorTool1.Pen.Style = System.Drawing.Drawing2D.DashStyle.Dash;Di2015NewLine     cursorTool1.FollowMouse = true;Di2015NewLineDi2015NewLine   //  cursorTool1.OriginalCursor = Cursors.Arrow;Di2015NewLine     ann = new Steema.TeeChart.Tools.Annotation(tChart1.Chart);Di2015NewLine     ann.Shape.Pen.Visible = false;Di2015NewLine     ann.Shape.Shadow.Visible = false;Di2015NewLine     ann.Shape.ShapeStyle = Steema.TeeChart.Drawing.TextShapeStyle.RoundRectangle;Di2015NewLine     //SeriesDi2015NewLine     Steema.TeeChart.Styles.Line line1 = new Steema.TeeChart.Styles.Line(tChart1.Chart);Di2015NewLine     line1.XValues.DateTime = true;Di2015NewLine     line1.DateTimeFormat = "HH:mm:ss";Di2015NewLine     cursorTool1.Series = line1;Di2015NewLine     line1.Stairs = true;Di2015NewLine     line1.XValues.DataMember = "SetTime";Di2015NewLine     line1.YValues.DataMember = "Park Brk Pres Sw1";Di2015NewLine     line1.DataSource = GetDataTable();Di2015NewLineDi2015NewLine    tChart1.Axes.Bottom.Labels.DateTimeFormat = "HH:mm:ss";Di2015NewLine    tChart1.Axes.Bottom.Labels.Style = Steema.TeeChart.AxisLabelStyle.PointValue;Di2015NewLine    tChart1.Export.Data.Excel.Save("C:\\\\Test1.xls");Di2015NewLine    //EventsDi2015NewLine    tChart1.AfterDraw += new PaintChartEventHandler(tChart1_AfterDraw);Di2015NewLine    cursorTool1.Change += new CursorChangeEventHandler(cursorTool1_Change);Di2015NewLine    tChart1.Draw();Di2015NewLine }Di2015NewLineDi2015NewLine//DataTableDi2015NewLine private DataTable GetDataTable()Di2015NewLine {Di2015NewLine     DataTable dataTable1 = new DataTable("DataSet");Di2015NewLine     //Condition to filterDi2015NewLine     //AddColumns in new TableDi2015NewLine     DataColumn xval = new DataColumn("SetTime", typeof(DateTime));Di2015NewLine     DataColumn yval = new DataColumn("Park Brk Pres Sw1", typeof(double));Di2015NewLine     dataTable1.Columns.Add(xval);Di2015NewLine     dataTable1.Columns.Add(yval);Di2015NewLine     DateTime dt = DateTime.Now;Di2015NewLine     for (int i = 0; i < 10; i++)Di2015NewLine     {Di2015NewLine         DataRow newRow = dataTable1.NewRow();Di2015NewLine         newRow[xval] = dt.AddSeconds(i * 5);Di2015NewLine         newRow[yval] = 0;Di2015NewLine         dataTable1.Rows.Add(newRow);Di2015NewLine     }Di2015NewLine     return dataTable1;Di2015NewLine }Di2015NewLine//Calculate Interpolate pointDi2015NewLine private double InterpolateLineSeries(Steema.TeeChart.Styles.Custom series, int firstindex, int lastindex, double xvalue)Di2015NewLine {Di2015NewLine     int index;Di2015NewLine     for (index = firstindex; index <= lastindex; index++)Di2015NewLine     {Di2015NewLine         if (index == -1 || series.XValues.Value[index] > xvalue) break;Di2015NewLine     }Di2015NewLine     // safeguardDi2015NewLine     if (index < 1) index = 1;Di2015NewLine     else if (index >= series.Count) index = series.Count - 1;Di2015NewLine     // y=(y2-y1)/(x2-x1)*(x-x1)+y1Di2015NewLine     double dx = series.XValues[index] - series.XValues[index - 1];Di2015NewLine     double dy = series.YValues[index] - series.YValues[index - 1];Di2015NewLine     if (dx != 0.0) return dy * (xvalue - series.XValues[index - 1]) / dx + series.YValues[index - 1];Di2015NewLine     else return 0.0;Di2015NewLine }Di2015NewLineDi2015NewLine private double InterpolateLineSeries(Steema.TeeChart.Styles.Custom series, double xvalue)Di2015NewLine {Di2015NewLine     return InterpolateLineSeries(series, series.FirstVisibleIndex, series.LastVisibleIndex, xvalue);Di2015NewLine }Di2015NewLine private void cursorTool1_Change(object sender, Steema.TeeChart.Tools.CursorChangeEventArgs e)Di2015NewLine {Di2015NewLine     xval = e.XValue;Di2015NewLine     ann.Text = "";Di2015NewLineDi2015NewLine    this.Text = e.ValueIndex.ToString();Di2015NewLine    foreach (Steema.TeeChart.Styles.Series s in tChart1.Series)Di2015NewLine    {Di2015NewLine        ann.Text += DateTime.FromOADate(s.XValues[e.ValueIndex]).ToString("HH:mm:ss");Di2015NewLine    }Di2015NewLine }Di2015NewLine private void tChart1_AfterDraw(object sender, Steema.TeeChart.Drawing.Graphics3D g)Di2015NewLine {Di2015NewLine     int xs = tChart1.Axes.Bottom.CalcXPosValue(xval);Di2015NewLine     int ys;Di2015NewLine     g.Brush.Visible = true;Di2015NewLine     g.Brush.Solid = true;Di2015NewLine     for (int i = 0; i < tChart1.Series.Count; i++)Di2015NewLineDi2015NewLine         if (tChart1.Series[i] is Steema.TeeChart.Styles.Custom)Di2015NewLine         {Di2015NewLine             ys = tChart1.Series[i].GetVertAxis.CalcYPosValue(InterpolateLineSeries(tChart1.Series[i] as Steema.TeeChart.Styles.Custom, xval));Di2015NewLine             //Draw elipse above cursor tool.Di2015NewLine             g.Brush.Color = tChart1.Series[i].Color;Di2015NewLine             //Draw annotation as label above cursor tool.Di2015NewLine             ann.Top = ys;Di2015NewLine             ann.Left = xs;Di2015NewLine         }Di2015NewLine }Di2015NewLine
15548722Di2015UniqueSeparatorIDictionary
15548722Di2015UniqueSeparatorobject
15548722Di2015UniqueSeparatorbool TryGetNestedValue (this IDictionary dict, out object value, Di2015NewLine    params object[] keys)Di2015NewLine{Di2015NewLine    for(int i = 0; i < keys.Length; i++)Di2015NewLine    {Di2015NewLine        var key = keys[i];Di2015NewLineDi2015NewLine        if (!dict.Contains(key))Di2015NewLine        {Di2015NewLine            value = null;Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (i == keys.Length - 1)Di2015NewLine        {Di2015NewLine            value = dict[key];Di2015NewLine            return true;Di2015NewLine        }Di2015NewLineDi2015NewLine        dict = dict[key];Di2015NewLine    }Di2015NewLineDi2015NewLine    throw new ArgumentException("keys");Di2015NewLine}Di2015NewLine
15548772Di2015UniqueSeparatorSuspendLayout
15548772Di2015UniqueSeparatorResumeLayout
15548772Di2015UniqueSeparator//assuming that this code is within the parent FormDi2015NewLineDi2015NewLineprivate void timer1_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  this.SuspendLayout();Di2015NewLine  picust.Location = new Point(picust.Location.X, picust.Location.Y + 10);Di2015NewLine  picx.Location = new Point(picx.Location.X, picx.Location.Y + 10);Di2015NewLine  picy.Location = new Point(picy.Location.X, picx.Location.Y + 10);Di2015NewLine  this.ResumeLayout();Di2015NewLine}Di2015NewLine
15548833Di2015UniqueSeparator public DataSet bindddl()Di2015NewLine    {Di2015NewLine        DataSet ds1 = new DataSet();Di2015NewLine        SqlConnection con = new SqlConnection(System.Configuration.ConfigurationManager.AppSettings["ConnectionString"]);Di2015NewLine        con.Open();Di2015NewLine        string strQuery = "SELECT CountryName + '(+' + CountryCode + ')' As CountryName,CountryCode from ACountry";Di2015NewLine        SqlCommand cmd = new SqlCommand(strQuery, con);Di2015NewLine        using (SqlDataAdapter da = new SqlDataAdapter(cmd))Di2015NewLine        da.Fill(ds1, "AUser");Di2015NewLineDi2015NewLine        con.Close();Di2015NewLineDi2015NewLine        return ds1;Di2015NewLine    }Di2015NewLine
15548833Di2015UniqueSeparatorBind objbind = new Bind();Di2015NewLineddlCountryCode.DataSource = objbind.bindddl().Tables["AUser"];Di2015NewLine
15548914Di2015UniqueSeparatorDataTable keepTheseRows = table.AsEnumerable()Di2015NewLine    .GroupBy(r => r.Field<int>("LinkId"))Di2015NewLine    .Select(g => g.First())  // takes the first of each group arbitrarilyDi2015NewLine    .CopyToDataTable();Di2015NewLine
15548927Di2015UniqueSeparatorvar items = from item in xdoc.Descendants("item")Di2015NewLine       select newDi2015NewLine       {Di2015NewLine           Title = item.Element("title").Value,Di2015NewLine           Year = item.Element("year").Value,Di2015NewLine           Categories = item.Descendants("categories").Descendants().Select(x=>x.Value).ToList(),Di2015NewLine           Count = item.Element("count").ValueDi2015NewLine       };Di2015NewLine
15549028Di2015UniqueSeparatorPage.Validate();Di2015NewLine
15549028Di2015UniqueSeparatorGridView.RowUpdating
15549028Di2015UniqueSeparatorGridView
15549028Di2015UniqueSeparatorUpdatePanel
15549028Di2015UniqueSeparator.CausesValidation
15549028Di2015UniqueSeparatorPage.IsValid
15549104Di2015UniqueSeparatorusing (var cmd = new SqlCommand())Di2015NewLine{Di2015NewLine    cmd.CommandText = @"CASEDi2015NewLine        WHEN EXISTS (Di2015NewLine            SELECTDi2015NewLine                *Di2015NewLine            FROMDi2015NewLine                TickLog TLDi2015NewLine            WHEREDi2015NewLine                TL.Username = @usernameDi2015NewLine                AND TL.Inserted BETWEEN @date AND DATEADD(DAY, 1, DATEADD(MILLISECOND, -3, @date))Di2015NewLine            ) THEN 1Di2015NewLine        ELSE 0Di2015NewLine    END";Di2015NewLineDi2015NewLine    cmd.Parameters.AddWithValue("@username", username);Di2015NewLine    cmd.Parameters.AddWithValue("@date", DateTime.Date);Di2015NewLineDi2015NewLine    var exists = cmd.ExecuteScalar();Di2015NewLineDi2015NewLine    if (exists != 0)Di2015NewLine    {Di2015NewLine        throw new Exception("already registered");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15549104Di2015UniqueSeparatorEXISTS
15549104Di2015UniqueSeparatorTL.Inserted
15549104Di2015UniqueSeparatorDATEPART
15549344Di2015UniqueSeparatorList<byte[]>
15549344Di2015UniqueSeparator public static List<byte[]> files = new List<byte[]>();Di2015NewLine
15549344Di2015UniqueSeparator// FileUpload1 is the File Upload control declared at the aspx  Di2015NewLinefiles.Add(FileUpload1.FileBytes);Di2015NewLine
15549344Di2015UniqueSeparatorforeach (byte[] bytes in files)Di2015NewLine{Di2015NewLine    ProjDocAttach prjd = new ProjDocAttach();Di2015NewLine    prjd.ProjDocID = _Projectid;Di2015NewLine    prjd.Data = bytes;Di2015NewLine    // Save to databaseDi2015NewLine}Di2015NewLine
15549443Di2015UniqueSeparator<Image Source="{Binding Path=Atype, Converter={StaticResource AtypeToImageConverter}}" Width="100" Height="100"/>Di2015NewLine
15549443Di2015UniqueSeparatorpublic class AtypeToImageConverter: IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        if (targetType != typeof(ImageSource))Di2015NewLine            throw new InvalidOperationException("The target must be an ImageSource");Di2015NewLineDi2015NewLine        BitmapImage result = null;Di2015NewLine        int type = value.ToString();Di2015NewLineDi2015NewLine        switch (type)Di2015NewLine        {Di2015NewLine            case "Good Service":Di2015NewLine                result = new BitmapImage(new Uri("/Images/status_good.png", UriKind.Relative));Di2015NewLine                break;Di2015NewLineDi2015NewLine            case "Minor Delays":Di2015NewLine                result = new BitmapImage(new Uri("/Images/status_minor.png", UriKind.Relative));Di2015NewLine                break;Di2015NewLineDi2015NewLine            //other casesDi2015NewLine        }Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter,Di2015NewLine        System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
15549499Di2015UniqueSeparatorThrottle
15549499Di2015UniqueSeparatorvar autoExpand = Observable.FromEventPattern<DragEventArgs>(tree, "DragOver");Di2015NewLineDi2015NewLineautoExpandDi2015NewLine    .Select(dragEvent => tree.GetNodeFromCoordinates(dragEvent.EventArgs.X, dragEvent.EventArgs.Y))Di2015NewLine    .DistinctUntilChanged()Di2015NewLine    .Throttle(TimeSpan.FromSeconds(1))Di2015NewLine    .ObserveOn(SynchronizationContext.Current)Di2015NewLine    .Subscribe(node => {Di2015NewLine            if (node != null) node.Expand();Di2015NewLine        });Di2015NewLine
15549499Di2015UniqueSeparatortree.GetNodeFromCoordinates()
15549499Di2015UniqueSeparatorSelect
15549499Di2015UniqueSeparatorDistinctUntilChanged
15549499Di2015UniqueSeparatorObserveOn
15549499Di2015UniqueSeparatorThrottle
15549499Di2015UniqueSeparatorObserveOn
15549499Di2015UniqueSeparatorSynchronizationContext.Current
15549499Di2015UniqueSeparatortree.GetNodeFromCoordinates()
15549608Di2015UniqueSeparatorItems.IncludeRecurrences
15549768Di2015UniqueSeparator"ContractType"
15549768Di2015UniqueSeparator_cotreport
15549768Di2015UniqueSeparator_cotreport.Contract
15549768Di2015UniqueSeparatorContract
15549768Di2015UniqueSeparatorContractType
15549768Di2015UniqueSeparator_cotreport
15549768Di2015UniqueSeparatorSystem.Reflection.PropertyInfo property = _cotreport.GetType().GetProperty("Contract");Di2015NewLineproperty.SetValue(_cotreport, COTReportHelper.ContractType.Gold, new object[0]);Di2015NewLine
15549768Di2015UniqueSeparatorvar enumValue = Enum.Parse(typeof(COTReportHelper.ContractType), "Gold");Di2015NewLineproperty.SetValue(_cotreport, enumValue, new object[0]);Di2015NewLine
15549804Di2015UniqueSeparatorvar concrete = IoCContainer.Resolve<IAnswerControlViewModel>();Di2015NewLine
15549804Di2015UniqueSeparatorvar concrete = IoCContainer.Resolve(ModelBindingContext.ModelType);Di2015NewLine
15549839Di2015UniqueSeparatorAccountConfig
15549839Di2015UniqueSeparatorAccount
15549856Di2015UniqueSeparatorText
15549856Di2015UniqueSeparatorTextBox
15549856Di2015UniqueSeparatorDataContext
15549856Di2015UniqueSeparator<TextBox ... Text="{Binding CommSettings, Mode=TwoWay}" />Di2015NewLine
15549856Di2015UniqueSeparatorText
15549856Di2015UniqueSeparatorTextBox
15549856Di2015UniqueSeparatorCommSettings
15549856Di2015UniqueSeparatorDataContext
15549856Di2015UniqueSeparatorC#
15549856Di2015UniqueSeparatorprivate void MenuComm_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    FrmSettings newWindow = new FrmSettings();Di2015NewLine    newWindow.DataContext = mMeasConSettings;Di2015NewLine    newWindow.Show();Di2015NewLine}Di2015NewLine
15549856Di2015UniqueSeparatorDataContext
15549856Di2015UniqueSeparatorDataContext
15549856Di2015UniqueSeparatorTextBox
15549856Di2015UniqueSeparatorDataContext
15549971Di2015UniqueSeparatorpublic class UploadController : ApiController Di2015NewLine{ Di2015NewLine    public async Task<HttpResponseMessage> PostFile() Di2015NewLine    { Di2015NewLine        // Check if the request contains multipart/form-data. Di2015NewLine        if (!Request.Content.IsMimeMultipartContent()) Di2015NewLine        { Di2015NewLine            throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType); Di2015NewLine        } Di2015NewLineDi2015NewLine        string root = HttpContext.Current.Server.MapPath("~/App_Data"); Di2015NewLine        var provider = new MultipartFormDataStreamProvider(root); Di2015NewLineDi2015NewLine        try Di2015NewLine        { Di2015NewLine            StringBuilder sb = new StringBuilder(); // Holds the response body Di2015NewLineDi2015NewLine            // Read the form data and return an async task. Di2015NewLine            await Request.Content.ReadAsMultipartAsync(provider); Di2015NewLineDi2015NewLine            // This illustrates how to get the form data. Di2015NewLine            foreach (var key in provider.FormData.AllKeys) Di2015NewLine            { Di2015NewLine                foreach (var val in provider.FormData.GetValues(key)) Di2015NewLine                { Di2015NewLine                    sb.Append(string.Format("{0}: {1}\\n", key, val)); Di2015NewLine                } Di2015NewLine            } Di2015NewLineDi2015NewLine            // This illustrates how to get the file names for uploaded files. Di2015NewLine            foreach (var file in provider.FileData) Di2015NewLine            { Di2015NewLine                FileInfo fileInfo = new FileInfo(file.LocalFileName); Di2015NewLine                sb.Append(string.Format("Uploaded file: {0} ({1} bytes)\\n", fileInfo.Name, fileInfo.Length)); Di2015NewLine            } Di2015NewLine            return new HttpResponseMessage() Di2015NewLine            { Di2015NewLine                Content = new StringContent(sb.ToString()) Di2015NewLine            }; Di2015NewLine        } Di2015NewLine        catch (System.Exception e) Di2015NewLine        { Di2015NewLine            return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e); Di2015NewLine        } Di2015NewLine    } Di2015NewLineDi2015NewLine}Di2015NewLine
15550020Di2015UniqueSeparatorpublic static Address BuildAddress(string name, int phrase = 10, string country = "USA")Di2015NewLine{Di2015NewLine        var gen = new RandomGenerator();Di2015NewLineDi2015NewLine        var address = Builder<AddressInfo>.CreateNew()Di2015NewLine            .With(x => x.Name = name)Di2015NewLine            .And((x => x.Address1 = gen.Int() + " " + gen.Phrase(10) + " Street"))Di2015NewLine            .And(x => x.City = gen.Phrase(15))Di2015NewLine            .And(x => x.StateOrProvince = gen.Phrase(2))Di2015NewLine            .And(x => x.Country = country)Di2015NewLine            .And(x => x.PostalCode = "32561").Di2015NewLine            Build();Di2015NewLineDi2015NewLine        return address;Di2015NewLine}Di2015NewLine
15550020Di2015UniqueSeparatorClassName.BuilderAddress("my name");Di2015NewLine
15550020Di2015UniqueSeparatorClassName.BuilderAddress("my name", 5);Di2015NewLine
15550020Di2015UniqueSeparatorClassName.BuilderAddress("my name", 7, "Ireland");Di2015NewLine
15550020Di2015UniqueSeparatorpublic static T BuildAddress(string name, int phrase = 10, string country = "USA")Di2015NewLine{Di2015NewLine        var gen = new RandomGenerator();Di2015NewLineDi2015NewLine        var address = Builder<T>.CreateNew()Di2015NewLine            .With(x => x.Name = name)Di2015NewLine            .And((x => x.Address1 = gen.Int() + " " + gen.Phrase(10) + " Street"))Di2015NewLine            .And(x => x.City = gen.Phrase(15))Di2015NewLine            .And(x => x.StateOrProvince = gen.Phrase(2))Di2015NewLine            .And(x => x.Country = country)Di2015NewLine            .And(x => x.PostalCode = "32561").Di2015NewLine            Build();Di2015NewLineDi2015NewLine        return address;Di2015NewLine}Di2015NewLine
15550042Di2015UniqueSeparatorListView
15550042Di2015UniqueSeparatorSelectedIndex
15550042Di2015UniqueSeparatorSelectedIndices
15550042Di2015UniqueSeparatorListView.SelectedIndexCollection indexes = this.ListView1.SelectedIndices;Di2015NewLineDi2015NewLineforeach ( int i in indexes )Di2015NewLine{Di2015NewLine //Di2015NewLine}Di2015NewLine
15550186Di2015UniqueSeparatorGlobalConfiguration.Configuration.Formatters.Clear();Di2015NewLineGlobalConfiguration.Configuration.Formatters.Add(new System.Net.Http.Formatting.XmlMediaTypeFormatter());Di2015NewLine
15550191Di2015UniqueSeparator   bool ignoreEvents = false;Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void checkBox1_CheckedChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            ignoreEvents = true;Di2015NewLine            checkBox2.Checked = checkBox1.Checked ;Di2015NewLine            checkBox3.Checked = checkBox1.Checked;Di2015NewLine            ignoreEvents = false;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void checkBox2_CheckedChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            if (ignoreEvents) return;Di2015NewLine            MessageBox.Show("Changed in 2");Di2015NewLine        }Di2015NewLineDi2015NewLine        private void checkBox3_CheckedChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            if (ignoreEvents) return;Di2015NewLine            MessageBox.Show("Changed in 3");Di2015NewLine        }Di2015NewLine
15550269Di2015UniqueSeparatorXlFileFormat.xlExcel9795
15550269Di2015UniqueSeparatorXlFileFormat.xlWorkbookNormal
15550483Di2015UniqueSeparatorprivate static DateTime GetNextOccurrence(DateTime initialDate, Di2015NewLine                                          DateTime lastOccurrence, Di2015NewLine                                          Periods p)Di2015NewLine{Di2015NewLine    switch (p)Di2015NewLine    {Di2015NewLine        case Periods.Day: return lastOccurrence.AddDays(1);Di2015NewLine        case Periods.Week: return lastOccurrence.AddDays(7);Di2015NewLine        case Periods.BiWeek: return lastOccurrence.AddDays(14);Di2015NewLine        case Periods.Month:Di2015NewLine        case Periods.BiMonth:Di2015NewLine          {Di2015NewLine              DateTime dt = lastOccurrence.AddMonths(p == Periods.Month ? 1 : 2);Di2015NewLine              int maxDays = DateTime.DaysInMonth(dt.Year, dt.Month);Di2015NewLine              int days = Math.Min(initialDate.Day, maxDays);Di2015NewLine              return new DateTime(dt.Year, dt.Month, days);Di2015NewLine          }Di2015NewLine        case Periods.Year: return lastOccurrence.AddYears(1);Di2015NewLine        default: return lastOccurrence;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15550483Di2015UniqueSeparatorAddMonth
15550513Di2015UniqueSeparator<script/>
15550513Di2015UniqueSeparatorKendo.Grid()
15550531Di2015UniqueSeparatorallLists.Add(myList)
15550531Di2015UniqueSeparatorallLists[0]
15550531Di2015UniqueSeparatorList<MyClass>
15550531Di2015UniqueSeparatorallLists[0].Add(new MyClassX());Di2015NewLine
15550531Di2015UniqueSeparatorallLists[0]
15550531Di2015UniqueSeparatorList<MyClassB>
15550531Di2015UniqueSeparatorMyClassX
15550531Di2015UniqueSeparatormyList
15550531Di2015UniqueSeparatorList<MyClass>
15550531Di2015UniqueSeparatorList<MyClass> myList = new List<MyClass>();Di2015NewLinemyList.Add(new MyClassB()); // This works, because MyClassB extends MyClassDi2015NewLineallLists.Add(myList); // This works, tooDi2015NewLine
15550651Di2015UniqueSeparatorstring s =  "AS_!SD 2453iur ks@d9304-52kasd";Di2015NewLineDi2015NewLineMatchCollection matches = Regex.Matches(s, @"\\d+");Di2015NewLineDi2015NewLinestring[] result = matches.Cast<Match>()Di2015NewLine                         .Take(2)Di2015NewLine                         .Select(match => match.Value)Di2015NewLine                         .ToArray();Di2015NewLineDi2015NewLineConsole.WriteLine( string.Join(Environment.NewLine, result) );Di2015NewLine
15550651Di2015UniqueSeparator2453Di2015NewLine9304Di2015NewLine
15550651Di2015UniqueSeparatorint[]
15550651Di2015UniqueSeparatorresult.Select(int.Parse).ToArray();
15550898Di2015UniqueSeparatorchildWindow.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterOwner;
15550898Di2015UniqueSeparatorvar leftField = typeof(Window).GetField("_actualLeft", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);Di2015NewLinevar topField = typeof(Window).GetField("_actualTop", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);Di2015NewLineDi2015NewLinedouble left = (double)leftField.GetValue(parentWindow);Di2015NewLineDi2015NewLinedouble top = (double)topField.GetValue(parentWindow);Di2015NewLine
15550898Di2015UniqueSeparatorparentWindow
15550898Di2015UniqueSeparatorWinForms
15550898Di2015UniqueSeparatorTop
15550898Di2015UniqueSeparatorLeft
15550898Di2015UniqueSeparatordouble top = this.Top;Di2015NewLinedouble left = this.Left;Di2015NewLine
15550898Di2015UniqueSeparatorparentWindow
15550898Di2015UniqueSeparatorchildWindow
15550898Di2015UniqueSeparatorchildWindow
15550898Di2015UniqueSeparatortop
15550898Di2015UniqueSeparatorleft
15550961Di2015UniqueSeparator//Relevant Namespaces:Di2015NewLine//using System.Windows.Baml2006;Di2015NewLine//using System.Xaml;Di2015NewLineDi2015NewLinepublic static List<Stream> GetBamlStreams(AssemblyName skinAssemblyName) Di2015NewLine{ Di2015NewLine    List<Stream> bamlStreams = new List<Stream>(); Di2015NewLine    Assembly skinAssembly = Assembly.Load(skinAssemblyName); Di2015NewLine    string[] resourceDictionaries = skinAssembly.GetManifestResourceNames(); Di2015NewLine    foreach (string resourceName in resourceDictionaries) Di2015NewLine    { Di2015NewLine        ManifestResourceInfo info = skinAssembly.GetManifestResourceInfo(resourceName); Di2015NewLine        if (info.ResourceLocation != ResourceLocation.ContainedInAnotherAssembly) Di2015NewLine        { Di2015NewLine            Stream resourceStream = skinAssembly.GetManifestResourceStream(resourceName); Di2015NewLine            using (ResourceReader reader = new ResourceReader(resourceStream)) Di2015NewLine            { Di2015NewLine                foreach (DictionaryEntry entry in reader) Di2015NewLine                { Di2015NewLine                    //TODO: Figure out if this is a ResourceDictionary I care aboutDi2015NewLine                    //Key will be name of the RD (BrushResources.baml, in your case)Di2015NewLine                    if (IsRelevantResource(entry)) Di2015NewLine                    { Di2015NewLine                         bamlStreams.Add(entry.Value as Stream); Di2015NewLine                    } Di2015NewLine                } Di2015NewLine            } Di2015NewLine        } Di2015NewLine    } Di2015NewLine    return bamlStreams; Di2015NewLine}Di2015NewLine
15550961Di2015UniqueSeparator//If .NET 3.5, need this initialization:Di2015NewLine//Type xamlType = typeof(System.Windows.Markup.XamlReader);Di2015NewLine//LoadBamlMethod = xamlType.GetMethod(LOAD_BAML_METHOD, BindingFlags.NonPublic | BindingFlags.Static);Di2015NewLineDi2015NewLinepublic static T LoadBaml<T>(Stream stream) Di2015NewLine{ Di2015NewLine    //For .net 3.5: Di2015NewLine    //ParserContext parserContext = new ParserContext(); Di2015NewLine    //object[] parameters = new object[] { stream, parserContext, null, false }; Di2015NewLine    //object bamlRoot = LoadBamlMethod.Invoke(null, parameters); Di2015NewLine    //return (T)bamlRoot; Di2015NewLineDi2015NewLine    //For .net 4.0Di2015NewLine    var reader = new Baml2006Reader(stream); Di2015NewLine    var writer = new XamlObjectWriter(reader.SchemaContext); Di2015NewLine    while (reader.Read()) Di2015NewLine            writer.WriteNode(reader); Di2015NewLine    return (T)writer.Result; Di2015NewLine} Di2015NewLine
15550961Di2015UniqueSeparatorprivate void LoadResources() Di2015NewLine{ Di2015NewLine    List<Stream> bamlStreams = GetBamlStreams(FullName); Di2015NewLine    foreach (Stream stream in bamlStreams) Di2015NewLine    { Di2015NewLine        ResourceDictionary rd = LoadBaml<ResourceDictionary>(stream);Di2015NewLine        Application.Current.Resources.MergedDictionaries.Add(rd)Di2015NewLine    } Di2015NewLine} Di2015NewLine
15551077Di2015UniqueSeparator{ get; set; }
15551100Di2015UniqueSeparatorfunction exportMatrix(A)Di2015NewLine% get dimensions Di2015NewLinedimensions  = size(A);Di2015NewLineN_dim       = length(dimensions);Di2015NewLineDi2015NewLine% print variable declaration to consoleDi2015NewLinefprintf('double[')Di2015NewLinefor i = 1:N_dim-1Di2015NewLine    fprintf(',')Di2015NewLineendDi2015NewLine% finish declaration and print rows of matrixDi2015NewLinefprintf('] A= {%s}\\n', exportRow(A, dimensions))Di2015NewLineDi2015NewLinefunction str_out = exportRow(B, dims)Di2015NewLine% recursively print matrixDi2015NewLineDi2015NewLine% init output stringDi2015NewLinestr_out = '';Di2015NewLineDi2015NewLine% have we finished yet?Di2015NewLineif length(dims) > 1Di2015NewLine    % if not, then go to next layerDi2015NewLine    for i=1:dims(1)Di2015NewLine        % this test is just to make sure that we do not reshape aDi2015NewLine        % one-dimensional arrayDi2015NewLine        if length(dims) > 2Di2015NewLine            % print next slice inside curly-bracesDi2015NewLine            str_out = sprintf('%s{ %s },', str_out, exportRow(reshape(B(i,:), dims(2:end)), dims(2:end)) );Di2015NewLine        elseif length(dims) == 2Di2015NewLine            % we are almost at the end, so do not use reshape, but stilDi2015NewLine            % print in curly bracesDi2015NewLine            str_out = sprintf('%s{ %s },', str_out, exportRow(B(i,:), dims(2:end)) );Di2015NewLine        endDi2015NewLine    endDi2015NewLineelseDi2015NewLine    % we have found one of the final layers, so print numbersDi2015NewLine    str_out = sprintf('%f, ', B);Di2015NewLine    % strip last space and commaDi2015NewLine    str_out = str_out(1:end-2);Di2015NewLineendDi2015NewLine% strip final comma and returnDi2015NewLinestr_out = sprintf('%s', str_out(1:end-1));Di2015NewLine
15551100Di2015UniqueSeparatorexportMatrix(rand(2,2,2))Di2015NewLine
15551404Di2015UniqueSeparatorpublic static AccountEnum Direct()Di2015NewLine{Di2015NewLine    return AccountEnum.DIRECT;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static AccountEnum Partner()Di2015NewLine{Di2015NewLine    return AccountEnum.PARTNER;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static AccountEnum Resold()Di2015NewLine{Di2015NewLine    return AccountEnum .RESOLD;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static AccountEnum Referral()Di2015NewLine{Di2015NewLine    return AccountEnum .REFERRAL;Di2015NewLine}Di2015NewLine
15551422Di2015UniqueSeparator        string textTitle = tbxTitle.Text;Di2015NewLine        string textSubtitle = tbxSubtitle.Text;Di2015NewLineDi2015NewLine        string deviceUri = tbxUri.Text;Di2015NewLineDi2015NewLine        string msg =Di2015NewLine            "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>" +Di2015NewLine            "<wp:Notification xmlns:wp=\\"WPNotification\\">" +Di2015NewLine                "<wp:Toast>" +Di2015NewLine                "<wp:Text1>" + textTitle + "</wp:Text1>" +Di2015NewLine                "<wp:Text2>" + textSubtitle + "</wp:Text2>" +Di2015NewLine                "</wp:Toast>" +Di2015NewLine            "</wp:Notification>";Di2015NewLineDi2015NewLine        byte[] msgBytes = new UTF8Encoding().GetBytes(msg);Di2015NewLineDi2015NewLine        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(channelUri);Di2015NewLine        request.Method = WebRequestMethods.Http.Post;Di2015NewLine        request.ContentType = "text/xml";Di2015NewLine        request.ContentLength = msg.Length;Di2015NewLine        request.Headers["X-MessageID"] = Guid.NewGuid().ToString();Di2015NewLine        request.Headers["X-WindowsPhone-Target"] = "toast";Di2015NewLine        request.Headers["X-NotificationClass"] = "2";Di2015NewLineDi2015NewLine        Stream requestStream = request.GetRequestStream();Di2015NewLine        requestStream.Write(msgBytes, 0, msgBytes.Length);Di2015NewLine        requestStream.Close();Di2015NewLine
15551499Di2015UniqueSeparator    public Rect HostRectDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            var transform = _Host.TransformToVisual(this);Di2015NewLine            return new Rect(transform.Transform(new Point(0, 0)), new Point(_Host.ActualWidth, _Host.ActualHeight));Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15551535Di2015UniqueSeparatorEnumerable.TakeWhile
15551535Di2015UniqueSeparatorebayOrderId.TakeWhile(c => char.IsDigit(c));Di2015NewLine
15551583Di2015UniqueSeparatorunsafe
15551636Di2015UniqueSeparatormailItem.SaveAs(savepath);Di2015NewLine
15551636Di2015UniqueSeparatorString savepath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @"\\" + filename + ".msg";Di2015NewLine
15551636Di2015UniqueSeparatorString filename = mailItem.Subject;Di2015NewLinestring invalid = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());Di2015NewLineDi2015NewLineforeach (char c in invalid)Di2015NewLine{Di2015NewLine    filename = filename.Replace(c.ToString(), "");Di2015NewLine}Di2015NewLine
15551649Di2015UniqueSeparatorpublic class e{Di2015NewLineDi2015NewLineDi2015NewLine        string ruta = "";Di2015NewLineDi2015NewLine                foreach(var readText in Directory.GetFiles(@"C:\\dev\\vsprojects\\MvcApplication4\\MvcApplication4", "stringCon.txt", SearchOption.AllDirectories)) {Di2015NewLineDi2015NewLine                    ruta = readText;Di2015NewLine                    ruta = ruta.Replace(@"\\\\", @"\\");Di2015NewLine    //in debugger mode says ruta parameter still having the \\\\ and i cant get the content of the txt fileDi2015NewLine                TextReader ReadTXT_file = new StreamReader(ruta);Di2015NewLine    //and here says that StringConexion is null, why??Di2015NewLine                string StringConexion = ReadTXT_file.ReadLine();//Di2015NewLineDi2015NewLine                ReadTXT_file.Close(); Di2015NewLineDi2015NewLine                }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
15551649Di2015UniqueSeparatorpublic class MyProperClassNameDi2015NewLine{Di2015NewLine    public void MyMethodName()Di2015NewLine    {Di2015NewLine        // do your file text operations hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
15551752Di2015UniqueSeparatorNotifyComplete()
15551752Di2015UniqueSeparatorasync
15551752Di2015UniqueSeparatorprotected override void OnInvoke(ScheduledTask task)Di2015NewLine{Di2015NewLine    Deployment.Current.Dispatcher.BeginInvoke(async () =>Di2015NewLine    {Di2015NewLine      await SavePictureInIsolatedStorage(Di2015NewLine          new Uri(Di2015NewLine              "http://www.petfinder.com/wp-content/uploads/2012/11/101418789-cat-panleukopenia-fact-sheet-632x475.jpg"));Di2015NewLineDi2015NewLine      NotifyComplete();Di2015NewLine     });Di2015NewLine}Di2015NewLine
15551764Di2015UniqueSeparator  ProcessStartInfo start = new ProcessStartInfo();Di2015NewLine  start.FileName = "jar";Di2015NewLine  start.WorkingDirectory =@"C:\\myDir";Di2015NewLine  start.Arguments = @" cf myJar.jar test.zip";**Di2015NewLine  start.UseShellExecute = false;Di2015NewLine  start.RedirectStandardInput = true;Di2015NewLine  start.RedirectStandardOutput = true;Di2015NewLineDi2015NewLine  Process java = new Process();Di2015NewLine  java.StartInfo = start;Di2015NewLine  java.Start();Di2015NewLineDi2015NewLine  var stdOut = java.StandardOutput.ReadToEnd();Di2015NewLine  java.WaitForExit();Di2015NewLine  Console.WriteLine(java.ExitCode.ToString());Di2015NewLine
15551782Di2015UniqueSeparatornew XElement("PipeId",                       // Name of the elementDi2015NewLine    new XAttribute("pid", "4598702C-691E"),  // Attribute of the elementDi2015NewLine    "testvalue")                             // Text content of the elementDi2015NewLine
15551873Di2015UniqueSeparatorGroupBy
15551873Di2015UniqueSeparatorCount
15551873Di2015UniqueSeparatorreturn TicketsDi2015NewLine           .Where(t =>  t.Kategorie != Kategorie.Invalid && t.Kategorie != Kategorie.None && t.Kategorie != null)Di2015NewLine           .GroupBy(t => t.Kategorie.ToString())Di2015NewLine           .Select(g => new KategorieVM() { _name = g.Key, _val = g.Count() });Di2015NewLine
15551912Di2015UniqueSeparator//copy current data tableDi2015NewLineDataTable cloneTable = dt.Copy();Di2015NewLineDi2015NewLineddlEventhistory.Items.Add(new Data { Name = DateTime.Now.ToString(), Value = cloneTable }); Di2015NewLineddlEventhistory.DisplayMember = "Name";Di2015NewLineddlEventhistory.ValueMember = "Value";Di2015NewLine
15551912Di2015UniqueSeparatorprivate void ddlEventhistory_SelectionChangeCommitted(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Assign DataTable of selected ComboBox item to DataGrid.Di2015NewLine    dgEvent.DataSource = (ddlEventhistory.SelectedItem as Data).Value as DataTable;Di2015NewLine}Di2015NewLine
15552220Di2015UniqueSeparatorobject.MemberwiseClone
15552220Di2015UniqueSeparatorTimeDuration
15552220Di2015UniqueSeparatorWithToTime
15552220Di2015UniqueSeparatorpublic TimeDuration WithFromTime(DateTime newFromTime)Di2015NewLine{Di2015NewLine    return new TimeDuration(newFromTime, ToTime);Di2015NewLine}Di2015NewLine
15552287Di2015UniqueSeparatorProcessWidgets2<T>
15552287Di2015UniqueSeparatornew List<Widget>()
15552287Di2015UniqueSeparatorT
15552287Di2015UniqueSeparatorWidget
15552287Di2015UniqueSeparatorList<T>
15552287Di2015UniqueSeparatorIList<T>
15552287Di2015UniqueSeparatorIList<Widget> temp = new List<Widget>();Di2015NewLineWidgetProcessor.ProcessWidgets2<Widget>(temp); // Widget is an IWidget, so this matches constraintsDi2015NewLine
15552287Di2015UniqueSeparatorList<T>
15552287Di2015UniqueSeparatorIList<T>
15552383Di2015UniqueSeparatornamespace RNet_CalculatorDi2015NewLine
15552383Di2015UniqueSeparatorForm1.designer.cs
15552383Di2015UniqueSeparatornamespace Form1Di2015NewLine
15552383Di2015UniqueSeparatorForm1
15552383Di2015UniqueSeparatorRNet_Calculator
15552383Di2015UniqueSeparatorRNET_Calculator
15552383Di2015UniqueSeparatorForm1
15552383Di2015UniqueSeparatorForm1
15552383Di2015UniqueSeparatorRNET_Calculator
15552444Di2015UniqueSeparatorstring[] lines = Regex.Split(str, "@"\\|\\|\\^\\^"); Di2015NewLine
15552509Di2015UniqueSeparatorItemsSource
15552509Di2015UniqueSeparatorDataGrid
15552509Di2015UniqueSeparator<Window ...>Di2015NewLine    <my:UC DataGridItemsSource="{DynamicResource Model1}" />Di2015NewLine    <my:UC DataGridItemsSource="{DynamicResource Model2}" />Di2015NewLine    <my:UC DataGridItemsSource="{DynamicResource Model3}" />Di2015NewLine</Window>Di2015NewLine
15552509Di2015UniqueSeparatorDataGrid.ItemsSource
15552509Di2015UniqueSeparatorElementName=parentName
15552509Di2015UniqueSeparatorRelativeSource=FindAncestor
15552885Di2015UniqueSeparatorDi2015NewLineDi2015NewLine    public delegate void TraceWriterHandler(string message);Di2015NewLineDi2015NewLine    internal class SynchronizedTraceListener : TraceListenerDi2015NewLine    {Di2015NewLine        private TraceWriterHandler messageHandler;Di2015NewLineDi2015NewLine        public SynchronizedTraceListener(TraceWriterHandler writeHandler)Di2015NewLine        {Di2015NewLine            messageHandler = writeHandler;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override void Write(string message)Di2015NewLine        {Di2015NewLine            messageHandler(message);Di2015NewLine        }Di2015NewLineDi2015NewLine        public override void WriteLine(string message)Di2015NewLine        {Di2015NewLine            messageHandler(message + System.Environment.NewLine);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine
15552885Di2015UniqueSeparatorDi2015NewLineDi2015NewLine    [Serializable]Di2015NewLine    public sealed class CrossDomainTracer : MarshalByRefObjectDi2015NewLine    {Di2015NewLine        private CrossDomainTracer remoteTracer;Di2015NewLine        private SynchronizedTraceListener remoteListener;Di2015NewLineDi2015NewLine        public CrossDomainTracer()Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public CrossDomainTracer(AppDomain farDomain)Di2015NewLine        {Di2015NewLine            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);Di2015NewLine            this.remoteTracer = farDomain.CreateInstanceFrom(Assembly.GetExecutingAssembly().Location, typeof(CrossDomainTracer).FullName).Unwrap() as CrossDomainTracer;Di2015NewLine            AppDomain.CurrentDomain.AssemblyResolve -= new ResolveEventHandler(CurrentDomain_AssemblyResolve);Di2015NewLine            if (remoteTracer != null)Di2015NewLine            {Di2015NewLine                remoteTracer.StartListening(this);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void StartListening(CrossDomainTracer farTracer)Di2015NewLine        {Di2015NewLine            this.remoteTracer = farTracer;Di2015NewLine            this.remoteListener = new SynchronizedTraceListener(new TraceWriterHandler(Write));Di2015NewLine            Trace.Listeners.Add(this.remoteListener);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Write(string message)Di2015NewLine        {Di2015NewLine            this.remoteTracer.RemoteWrite("AppDomain(" + AppDomain.CurrentDomain.Id.ToString() +") " + message);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void RemoteWrite(string message)Di2015NewLine        {Di2015NewLine            Trace.Write(message);Di2015NewLine        }Di2015NewLineDi2015NewLine        Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                Assembly assembly = System.Reflection.Assembly.Load(args.Name);Di2015NewLine                if (assembly != null)Di2015NewLine                {Di2015NewLine                    return assembly;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            catch { }Di2015NewLineDi2015NewLine            // Try to load by assembly fullname (path to file)Di2015NewLine            string[] Parts = args.Name.Split(',');Di2015NewLine            string File = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\\\" + Parts[0].Trim() + ".dll";Di2015NewLineDi2015NewLine            return System.Reflection.Assembly.LoadFrom(File);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine
15552885Di2015UniqueSeparatorDi2015NewLineDi2015NewLine    public static class CrossDomainTraceDi2015NewLine    {Di2015NewLine        public static void StartListening(AppDomain remoteDomain)Di2015NewLine        {Di2015NewLine            new CrossDomainTracer(remoteDomain);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine
15552885Di2015UniqueSeparatorDi2015NewLineDi2015NewLine    CrossDomainTrace.StartListening(theFarAppDomain);Di2015NewLineDi2015NewLine
15553073Di2015UniqueSeparatorMessageResourceType = typeof (MyResource), MessageResourceName = "MyResourceKey")Di2015NewLine
15553092Di2015UniqueSeparatorpartial
15553144Di2015UniqueSeparatorNewType
15553144Di2015UniqueSeparatorNewType
15553144Di2015UniqueSeparatorMyObject
15553144Di2015UniqueSeparatordynamic
15553144Di2015UniqueSeparatorforeach (var x in CastedToDynamic)
15553144Di2015UniqueSeparatordynamic
15553144Di2015UniqueSeparator    dynamic found = null;Di2015NewLine    foreach (var x in CastedToDynamic)Di2015NewLine    {Di2015NewLine      if (x.ID == ID)Di2015NewLine      {Di2015NewLine        found = x;Di2015NewLine        break;Di2015NewLine      }Di2015NewLine    }Di2015NewLine
15553144Di2015UniqueSeparator==
15553144Di2015UniqueSeparatorID
15553144Di2015UniqueSeparatorSystem.Guid
15553144Di2015UniqueSeparator==
15553144Di2015UniqueSeparator==
15553183Di2015UniqueSeparator$('#insertcmt').click(function () {Di2015NewLine  $.post('http://localhost:55679/RESTService.svc/InsertComment?callback=', Di2015NewLine    { commenttext: $('#txtarea').val() }, Di2015NewLine    function (data) {Di2015NewLineDi2015NewLine    });Di2015NewLineDi2015NewLine  loadcomments();Di2015NewLine});Di2015NewLine
15553183Di2015UniqueSeparator[WebInvoke(Method = "POST", ResponseFormat = WebMessageFormat.Json)]Di2015NewLine
15553402Di2015UniqueSeparatorDataTrigger
15553402Di2015UniqueSeparatorTextBox.IsReadOnly
15553402Di2015UniqueSeparator<Style ...>Di2015NewLine    <!-- Set Default -->Di2015NewLine    <Setter Property="IsReadOnly" Value="True" />Di2015NewLineDi2015NewLine    <Style.Triggers>Di2015NewLine        <DataTrigger Binding="{Binding Department}" Value="Retail">Di2015NewLine            <Setter Property="IsReadOnly" Value="False" />Di2015NewLine        </DataTrigger>Di2015NewLine    </Style.Triggers>Di2015NewLine</Style>Di2015NewLine
15553402Di2015UniqueSeparatorIsReadOnly="True"
15553402Di2015UniqueSeparatorDataGrid
15553402Di2015UniqueSeparatorTextBox
15553402Di2015UniqueSeparatorDataGridTemplateColumn
15553402Di2015UniqueSeparatorIsReadOnly="True"
15553402Di2015UniqueSeparator<DataGrid ItemsSource="{Binding Path=MyTypeCollection}" Di2015NewLine          AutoGenerateColumns="False"Di2015NewLine          IsReadOnly="True">Di2015NewLineDi2015NewLine    <!-- This could also go in Window.Resources, UserControl.Resources, etc -->Di2015NewLine    <DataGrid.Resources>Di2015NewLine        <Style x:Key="SalesTextBoxStyle" TargetType="{x:Type TextBox}">Di2015NewLine            <!-- Set Default -->Di2015NewLine            <Setter Property="IsReadOnly" Value="True" />Di2015NewLineDi2015NewLine            <Style.Triggers>Di2015NewLine                <DataTrigger Binding="{Binding Department}" Value="Retail">Di2015NewLine                    <Setter Property="IsReadOnly" Value="False" />Di2015NewLine                </DataTrigger>Di2015NewLine            </Style.Triggers>Di2015NewLine        </Style>Di2015NewLine    </DataGrid.Resources>Di2015NewLineDi2015NewLine    <DataGrid.Columns>Di2015NewLine        <DataGridTextColumn Header="Name" Binding="{Binding Path=Name}"/>Di2015NewLine        <DataGridTextColumn Header="Department" Binding="{Binding Path=Department}" />Di2015NewLine        <DataGridTemplateColumn Header="Sales">Di2015NewLine            <DataGridTemplateColumn.CellTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <TextBox Text="{Binding Path=Sales}" Di2015NewLine                             Style="{StaticResource SalesTextBoxStyle}" />Di2015NewLine                </DataTemplate>Di2015NewLine            </DataGridTemplateColumn.CellTemplate>Di2015NewLine        </DataGridTemplateColumn>Di2015NewLine    </DataGrid.Columns>Di2015NewLine</DataGrid>Di2015NewLine
15553402Di2015UniqueSeparatorTextBox
15553402Di2015UniqueSeparatorTextBlock
15553402Di2015UniqueSeparatorDataTemplate
15553402Di2015UniqueSeparatorStackPanel
15553402Di2015UniqueSeparatorTextBlock
15553402Di2015UniqueSeparatorTextBox
15553402Di2015UniqueSeparatorContentControl
15553402Di2015UniqueSeparatorContentTemplate
15553402Di2015UniqueSeparatorDataTrigger
15553402Di2015UniqueSeparator<DataGrid.Resources>Di2015NewLine    <DataTemplate x:Key="TextBoxTemplate">Di2015NewLine        <TextBox Text="{Binding Path=.}" />Di2015NewLine    </DataTemplate>Di2015NewLine</DataGrid.Resources>Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine<DataGridTemplateColumn>Di2015NewLine    <DataGridTemplateColumn.CellTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <ContentControl x:Name="salesControl" Content="{Binding Sales}" />Di2015NewLine            <DataTemplate.Triggers>Di2015NewLine                <DataTrigger Binding="{Binding Department}" Value="Retail">Di2015NewLine                    <Setter TargetName="salesControl" Di2015NewLine                            Property="ContentTemplate" Di2015NewLine                            Value="{StaticResource TextBoxTemplate}" />Di2015NewLine                </DataTrigger>Di2015NewLine            </DataTemplate.Triggers>Di2015NewLine        </DataTemplate>Di2015NewLine    </DataGridTemplateColumn.CellTemplate>Di2015NewLine</DataGridTemplateColumn>Di2015NewLine
15553463Di2015UniqueSeparatorPerson
15553463Di2015UniqueSeparatorpublic class Person Di2015NewLine{Di2015NewLine    public string fname { get; set; }Di2015NewLine    public string mname { get; set; }Di2015NewLine    public string lname { get; set; }Di2015NewLineDi2015NewLine    public string FullNameDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return item.fname + " " + item.mname[0] + " " + item.lname;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Person(string fname, string mname, string lname) Di2015NewLine    {Di2015NewLine        this.fname = fname;Di2015NewLine        this.mname = mname;Di2015NewLine        this.lname = lname;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15553463Di2015UniqueSeparator<ComboBox x:Name="items" Height="22" Width="200" ItemsSource="{Binding} DisplayMemberPath="FullName"/>Di2015NewLine
15553463Di2015UniqueSeparatorPerson
15553463Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    public Guid Id { get; set; }Di2015NewLine    public string FirstName { get; set; }Di2015NewLine    public string MiddleName { get; set; }Di2015NewLine    public string LastName { get; set; }Di2015NewLineDi2015NewLine    public Person()Di2015NewLine    {Di2015NewLine        Id = Guid.NewGuid();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Person(string firstName, string middleName, string lastName)Di2015NewLine    {Di2015NewLine        Id = Guid.NewGuid();Di2015NewLine        FirstName = firstName;Di2015NewLine        MiddleName = middleName;Di2015NewLine        LastName = lastName;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15553463Di2015UniqueSeparatorPersonViewModel
15553463Di2015UniqueSeparatorINotifyPropertyChanged
15553463Di2015UniqueSeparatorpublic class PersonViewModel : ViewModelBaseDi2015NewLine{Di2015NewLine    private Person person { get; set; }Di2015NewLineDi2015NewLine    public Guid Id { get { return person.Id; } }Di2015NewLineDi2015NewLine    public String FirstNameDi2015NewLine    {Di2015NewLine        get { return person.FirstName; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (person.FirstName != value)Di2015NewLine            {Di2015NewLine                person.FirstName = value;Di2015NewLine                RaisePropertyChanged("FirstName");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string MiddleNameDi2015NewLine    {Di2015NewLine        get { return person.MiddleName; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (person.MiddleName != value)Di2015NewLine            {Di2015NewLine                person.MiddleName = value;Di2015NewLine                RaisePropertyChanged("MiddleName");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string LastNameDi2015NewLine    {Di2015NewLine        get { return person.LastName; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (person.LastName != value)Di2015NewLine            {Di2015NewLine                person.LastName = value;Di2015NewLine                RaisePropertyChanged("LastName");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string FullName { get { return LastName + ", " + FirstName + " " + MiddleName; } }Di2015NewLineDi2015NewLine    public PersonViewModel()Di2015NewLine    {Di2015NewLine        person = new Person();Di2015NewLine    }Di2015NewLineDi2015NewLine    public PersonViewModel(Person inPerson)Di2015NewLine    {Di2015NewLine        person = inPerson;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15553463Di2015UniqueSeparatorFullName
15553463Di2015UniqueSeparatorList<PersonViewModel>
15553463Di2015UniqueSeparatorpublic class MainViewModel : ViewModelBaseDi2015NewLine{Di2015NewLine    public List<PersonViewModel> People { get; set; }Di2015NewLineDi2015NewLine    public MainViewModel()Di2015NewLine    {Di2015NewLine        // Get the people list from your data provider (in this case returns IEnumerable<Person>)Di2015NewLine        var peopleList = DataProvider.GetPeople();Di2015NewLineDi2015NewLine        // Wrap each person in a PersonViewModel to make them more UI friendlyDi2015NewLine        People = peopleList.Select(p => new PersonViewModel(p)).ToList();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15553463Di2015UniqueSeparatorComboBox
15553463Di2015UniqueSeparator<Window x:Class="MVVM_Sample.MainWindow"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:vm="clr-namespace:MVVM_Sample.ViewModels"Di2015NewLine    Title="MainWindow" Height="350" Width="525"Di2015NewLine    DataContext="{DynamicResource ViewModel}">Di2015NewLine<Window.Resources>Di2015NewLine    <vm:MainViewModel x:Key="ViewModel" />Di2015NewLine</Window.Resources>Di2015NewLine<Grid>Di2015NewLine    <ComboBox ItemsSource="{Binding People}" DisplayMemberPath="FullName" SelectedValuePath="Id" Height="22" Width="200" />Di2015NewLine</Grid>Di2015NewLine</Window>Di2015NewLine
15553463Di2015UniqueSeparatorMainViewModel
15553463Di2015UniqueSeparatorDataContext
15553483Di2015UniqueSeparatorvar row = dt.Rows[i]; // row contains several columns, you have to get from specific columnDi2015NewLinevar ii = dt.Rows[i]["iiColumnName"];Di2015NewLine
15553483Di2015UniqueSeparatornull
15553483Di2015UniqueSeparatornull
15553483Di2015UniqueSeparatorif (ii == null)Di2015NewLine{Di2015NewLine    test.Text = ii.ToString() + "Test"; // This will throw NullReferenceExceptionDi2015NewLine}Di2015NewLine
15553483Di2015UniqueSeparatornull
15553483Di2015UniqueSeparatornull
15553483Di2015UniqueSeparatorDBNull.Value
15553483Di2015UniqueSeparatorif (ii is DBNull) { /* do something */ }Di2015NewLineif (ii == DBNull.Value) { /* do something */ }Di2015NewLine
15553483Di2015UniqueSeparatorSqlConnection con = new SqlConnection("Initial Catalog=test;Data Source=test;user id=sa;password=****;");Di2015NewLineDataTable dt = new DataTable();Di2015NewLinecon.Open();Di2015NewLineSqlDataAdapter da = new SqlDataAdapter("select * from table1", con);Di2015NewLineDi2015NewLineda.Fill(dt);Di2015NewLineDi2015NewLinefor (int i = 0; i < dt.Rows.Count; i++)Di2015NewLine{Di2015NewLine    DataRow row = dt.Rows[i];Di2015NewLine    int? ii;Di2015NewLine    if (row["iiColumnName"] is DBNull)Di2015NewLine        ii = null;Di2015NewLine    elseDi2015NewLine        ii = (int)row["iiColumnName"];Di2015NewLineDi2015NewLine    if (ii != null)Di2015NewLine        test.Text = ii.ToString() + "Test";Di2015NewLine    elseDi2015NewLine        test.Text = "ii is not set";Di2015NewLine}Di2015NewLine
15553534Di2015UniqueSeparatorString delimitedList = String.Join(",", yourList);Di2015NewLine
15553727Di2015UniqueSeparatorAssembly.Load
15553727Di2015UniqueSeparatorbyte[]
15553727Di2015UniqueSeparatorDocumentFormat.OpenXML.xml
15553727Di2015UniqueSeparatorAppDomain.AssemblyResolve
15554046Di2015UniqueSeparatorpublic delegate void LoadCompletedEventHandler(  object sender,  NavigationEventArgs e);Di2015NewLine
15554046Di2015UniqueSeparatorProgressRing1.IsActive = true; //for progress ringDi2015NewLineProgressBar1.IsIndeterminate = true; //for progress barDi2015NewLine
15554046Di2015UniqueSeparatorWebView1.LoadCompleted += new Windows.UI.Xaml.Navigation.LoadCompletedEventHandler(WebView1_LoadCompleted);Di2015NewLine
15554046Di2015UniqueSeparatorvoid WebView1_LoadCompleted(object sender, Windows.UI.Xaml.Navigation.NavigationEventArgs e)Di2015NewLine{Di2015NewLine//code for hiding progress bar/ringDi2015NewLineProgressRing1.IsActive = false; //for progress ringDi2015NewLineProgressBar1.IsIndeterminate = false; //for progress barDi2015NewLine}Di2015NewLine
15554086Di2015UniqueSeparatorItemClickEventArgs
15554086Di2015UniqueSeparatorPosition
15554086Di2015UniqueSeparatorPosition
15554086Di2015UniqueSeparatorListView
15554086Di2015UniqueSeparatorAdapter
15554086Di2015UniqueSeparatorItemClick
15554086Di2015UniqueSeparatorvar item = _adapter.GetItem(args.Position);Di2015NewLine
15554381Di2015UniqueSeparatorforeach
15554381Di2015UniqueSeparatorForEach
15554381Di2015UniqueSeparatorforeach
15554381Di2015UniqueSeparator// Bad code! Valid, but horribleDi2015NewLineforeach (var z in numbers)Di2015NewLine{Di2015NewLine    z.SetReal(z.real + 1);Di2015NewLine}Di2015NewLine
15554417Di2015UniqueSeparatorprivate SolidColorBrush _redBrush;Di2015NewLineprivate SolidColorBrush IndicatorRedBrushDi2015NewLine{Di2015NewLine    get{ return _redBrush ?? (_redBrush = Di2015NewLine        Application.Current.FindResource("IndicatorRedBrush") as SolidColorBrush)); Di2015NewLine}Di2015NewLineDi2015NewLine... same for white brushDi2015NewLineDi2015NewLinepublic SolidColorBrush ShiftOverageBrush {Di2015NewLine    get {Di2015NewLine        if (ShiftOverage.HasValue && ShiftOverage.Value.Milliseconds < 0) {Di2015NewLine            return IndicatorRedBrush;Di2015NewLine        }Di2015NewLineDi2015NewLine        return IndicatorWhiteBrush;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15554555Di2015UniqueSeparator<%= item.IsValid ? "Yes" : "No"%>Di2015NewLine
15554555Di2015UniqueSeparator<%= Convert.ToString(item.IsValid).Equals("True", StringComparison.InvariantCultureIgnoreCase) ? "Yes" : "No"%>Di2015NewLine
15554679Di2015UniqueSeparator...Di2015NewLine<Path Data="{StaticResource HomeGeometry}" Fill="Red" Stretch="Uniform"/>Di2015NewLine...Di2015NewLine
15554855Di2015UniqueSeparatorforeach (int x in list.OrderBy(i=>Math.abs(i))Di2015NewLine{Di2015NewLine    // Do StuffDi2015NewLine}Di2015NewLine
15554945Di2015UniqueSeparatorvar listOfFoo = myData.Select(x => new {Di2015NewLine    someProperty = x.prop1,Di2015NewLine    someOtherProperty = x.prop2Di2015NewLine});Di2015NewLine
15554950Di2015UniqueSeparator| Name   | Salary  |Di2015NewLine-------------------Di2015NewLine| Alice  | 5,000   |Di2015NewLine| Bob    | 50,000, |Di2015NewLine| 000    | Charlie |Di2015NewLine| 10,000Di2015NewLine
15554950Di2015UniqueSeparator| Name   | Salary  |Di2015NewLine-------------------Di2015NewLine| Alice  | 5,000   |Di2015NewLine| Bob    | 50,000, |Di2015NewLine|        | 000     |Di2015NewLine| Charlie| 10,000  |Di2015NewLine
15555073Di2015UniqueSeparatorData Source=\\\\servername\\sharename\\path\\to\\data\\file.accdb;Di2015NewLine
15555127Di2015UniqueSeparatorSyncField<Entity>
15555127Di2015UniqueSeparatorSyncField<T>Di2015NewLine{Di2015NewLine    T O { get; private set; }Di2015NewLine    T V { get; private set; }Di2015NewLineDi2015NewLine    public bool HasChangedDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (V != null && O != null && O is ICollection)Di2015NewLine            {Di2015NewLine                return ((ICollection)O).Count != ((ICollection)V).Count;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return O != null && !O.Equals(V);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15555281Di2015UniqueSeparatorDateTime.Now
15555292Di2015UniqueSeparator//get the userDi2015NewLinevar idividual = user.Individual.SingleOrDefault(a => a.address == "ABC" && a.city == "MIAMI");Di2015NewLineDi2015NewLineif(idividual != null)Di2015NewLine{Di2015NewLine   idividual.State = "FL";Di2015NewLineDi2015NewLine   //persist user in DB or elsewhereDi2015NewLine}Di2015NewLine
15555292Di2015UniqueSeparator//get the userDi2015NewLinevar idividuals = user.Individual.Where(a => a.address == "ABC" && a.city == "MIAMI").ToList();Di2015NewLineDi2015NewLineindividuals.ForEach(i=>i.State="FL");Di2015NewLine
15555512Di2015UniqueSeparatorDateTime
15555512Di2015UniqueSeparatorDateTime
15555512Di2015UniqueSeparatorToString
15555512Di2015UniqueSeparatorstring formattedDate = result.ToString("dd MMM yyyy");Di2015NewLine
15555561Di2015UniqueSeparatorSmtpClient smtp = new SmtpClient("smtp.gmail.com", 465);Di2015NewLinesmtp.Credentials = new NetworkCredential("mrbk.writely@gmail.com", "***");Di2015NewLinesmtp.EnableSsl = true;Di2015NewLinesmtp.Send(mail);Di2015NewLine
15555711Di2015UniqueSeparatorpublic static List<string> GetNCComments(Stream stream)Di2015NewLine{Di2015NewLine    using (StreamReader sr = new StreamReader(stream))Di2015NewLine    {Di2015NewLine        List<string> result = new List<string>();Di2015NewLine        bool inCS = false; // are we in C# code?Di2015NewLine        int c;Di2015NewLine        while ((c = sr.Read()) != -1)Di2015NewLine        {Di2015NewLine            if (inCS)Di2015NewLine            {Di2015NewLine                switch ((char)c)Di2015NewLine                {Di2015NewLine                    case '#':Di2015NewLine                        if (sr.Peek() == '>') // end of C# blockDi2015NewLine                        {Di2015NewLine                            sr.Read();Di2015NewLine                            inCS = false;Di2015NewLine                        }Di2015NewLine                        break;Di2015NewLine                    case '/':Di2015NewLine                        if (sr.Peek() == '/') // a C# commentDi2015NewLine                            sr.ReadLine(); // skip the whole commentDi2015NewLine                        break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                switch ((char)c)Di2015NewLine                {Di2015NewLine                    case '<':Di2015NewLine                        if (sr.Peek() == '#') // start of C# blockDi2015NewLine                        {Di2015NewLine                            sr.Read();Di2015NewLine                            inCS = true;Di2015NewLine                        }Di2015NewLine                        break;Di2015NewLine                    case ';': // NC commentDi2015NewLine                        string comment = sr.ReadLine();Di2015NewLine                        if (!string.IsNullOrEmpty(comment))Di2015NewLine                            result.Add(comment);Di2015NewLine                        break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15555711Di2015UniqueSeparatorvar comments = GetNCComments(new FileStream(filePath, FileMode.Open, FileAccess.Read));Di2015NewLine
15555711Di2015UniqueSeparator#>
15555718Di2015UniqueSeparatorprivate bool isFirewallEnabled()Di2015NewLine{Di2015NewLine    ProcessStartInfo info = null;Di2015NewLine    string result = string.Empty;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine       using (Process proc = new Process())Di2015NewLine       {Di2015NewLine           string args = string.Format(CultureInfo.InvariantCulture, "advfirewall firewall show rule name=\\"{0}\\"", this.ProductName);Di2015NewLine           info = new ProcessStartInfo("netsh", args);Di2015NewLine           proc.StartInfo = info;Di2015NewLine           proc.StartInfo.UseShellExecute = false;Di2015NewLine           proc.StartInfo.CreateNoWindow = true;Di2015NewLine           proc.StartInfo.RedirectStandardOutput = true;Di2015NewLine           proc.Start();Di2015NewLineDi2015NewLine           while ((result = proc.StandardOutput.ReadLine()) != null)Di2015NewLine           {Di2015NewLine               if (result.Replace(" ", String.Empty) == "Enabled:Yes")Di2015NewLine               {Di2015NewLine                   return true;Di2015NewLine               }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine       MessageBox.Show(ex.Message);Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
15555857Di2015UniqueSeparator#define ChannelBlend_SoftLight(A,B) ((uint8)((B < 128)?(2*((A>>1)+64))*((float)B/255):(255-(2*(255-((A>>1)+64))*(float)(255-B)/255)))) //not very accurateDi2015NewLine
15555857Di2015UniqueSeparator#define ChannelBlend_SoftLight(A,B) (uint8)(((A < 128) ? (2 * ((B >> 1) + 64)) * ((float) A / 255) : (255 - (2 * (255 - ((B >> 1) + 64)) * (float) (255 - A) / 255))));Di2015NewLine
15555867Di2015UniqueSeparatorpublic class StringLabelProvider : NumericLabelProviderBase {Di2015NewLineDi2015NewLine    private List<String> m_Labels;Di2015NewLine    public List<String> Labels {Di2015NewLine        get { return m_Labels; }Di2015NewLine        set { m_Labels = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="ToStringLabelProvider"/> class.Di2015NewLine    /// </summary>Di2015NewLine    public StringLabelProvider(List<String> labels) {                                                Di2015NewLine        Labels = labels;                                    Di2015NewLine    }Di2015NewLineDi2015NewLine    public override UIElement[] CreateLabels(ITicksInfo<double> ticksInfo) {            Di2015NewLineDi2015NewLine        var ticks = ticksInfo.Ticks;Di2015NewLine        Init(ticks);            Di2015NewLineDi2015NewLine        UIElement[] res = new UIElement[ticks.Length];Di2015NewLine        LabelTickInfo<double> tickInfo = new LabelTickInfo<double> { Info = ticksInfo.Info };Di2015NewLine        for (int i = 0; i < res.Length; i++) {Di2015NewLine            tickInfo.Tick = ticks[i];Di2015NewLine            tickInfo.Index = i;Di2015NewLine            string labelText = "";Di2015NewLineDi2015NewLine            labelText = Labels[Convert.ToInt32(tickInfo.Tick)];Di2015NewLineDi2015NewLine            TextBlock label = (TextBlock)GetResourceFromPool();Di2015NewLine            if (label == null) {Di2015NewLine                label = new TextBlock();Di2015NewLine            }Di2015NewLineDi2015NewLine            label.Text = labelText;Di2015NewLineDi2015NewLine            res[i] = label;Di2015NewLineDi2015NewLine            ApplyCustomView(tickInfo, label);Di2015NewLine        }Di2015NewLine        return res;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15555867Di2015UniqueSeparatorStringLabelProvider labelProvider = new StringLabelProvider(yourLabelList);Di2015NewLineyourAxis.LabelProvider = labelProvider;Di2015NewLine
15556058Di2015UniqueSeparatorGetCustomAttributes
15556058Di2015UniqueSeparatorobject[] attr = typeof(MyTestClass).GetMethod("foo").GetCustomAttributes(true);Di2015NewLine
15556099Di2015UniqueSeparatorA
15556099Di2015UniqueSeparatorB
15556099Di2015UniqueSeparatorA
15556099Di2015UniqueSeparatorB
15556099Di2015UniqueSeparatorC
15556099Di2015UniqueSeparatorA
15556099Di2015UniqueSeparatorC
15556099Di2015UniqueSeparatorB
15556099Di2015UniqueSeparatorA
15556099Di2015UniqueSeparatorC.MyListofBs
15556099Di2015UniqueSeparatorAction
15556099Di2015UniqueSeparatorpublic class ADi2015NewLine{ Di2015NewLine    public Event Action<string> FooHandler;Di2015NewLineDi2015NewLine    //...some code that eventually raises FooHandler eventDi2015NewLine}Di2015NewLineDi2015NewLinepublic class BDi2015NewLine{Di2015NewLine    public A a = new A();Di2015NewLineDi2015NewLine    //...some code that calls functions on "a" that might causeDi2015NewLine    //FooHandler event to be raisedDi2015NewLine}Di2015NewLineDi2015NewLinepublic class CDi2015NewLine{Di2015NewLine    private List<B> MyListofBs = new List<B>();Di2015NewLineDi2015NewLine    //...code that causes instances of B to be added to the listDi2015NewLine    //and calls functions on those B instances that might get A.FooHandler raisedDi2015NewLineDi2015NewLine    public void Add(B item)Di2015NewLine    {Di2015NewLine        MyListofBs.Add(item);Di2015NewLine        item.a.FooHandler += EventAction;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Remove(B item)Di2015NewLine    {Di2015NewLine        item.a.FooHandler -= EventAction;Di2015NewLine        MyListofBs.Remove(item);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EventAction(string s)Di2015NewLine    {Di2015NewLine        // This is invoked when "A.FooHandler" is raised for any Di2015NewLine        // item inside the MyListofBs collection.Di2015NewLine    }Di2015NewLine}Di2015NewLine
15556099Di2015UniqueSeparatorC
15556099Di2015UniqueSeparatorpublic class CDi2015NewLine{Di2015NewLine    private List<B> MyListofBs = new List<B>();Di2015NewLineDi2015NewLine    public event Action<string> RelayEvent;Di2015NewLineDi2015NewLine    //...code that causes instances of B to be added to the listDi2015NewLine    //and calls functions on those B instances that might get A.FooHandler raisedDi2015NewLineDi2015NewLine    public void Add(B item)Di2015NewLine    {Di2015NewLine        MyListofBs.Add(item);Di2015NewLine        item.a.FooHandler += EventAction;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Remove(B item)Di2015NewLine    {Di2015NewLine        item.a.FooHandler -= EventAction;Di2015NewLine        MyListofBs.Remove(item);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EventAction(string s)Di2015NewLine    {Di2015NewLine        if(RelayEvent != null)Di2015NewLine        {Di2015NewLine            RelayEvent(s);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15556121Di2015UniqueSeparator<httpRuntime executionTimeout="600" maxRequestLength="512000" />
15556136Di2015UniqueSeparatorConnectionString='<%=GetConnectionString.createConnectionString()%>'Di2015NewLine
15556136Di2015UniqueSeparator<%#
15556136Di2015UniqueSeparator<%=
15556136Di2015UniqueSeparator<%$
15556142Di2015UniqueSeparatorMapper.CreateMap<FatherModel, Father>()Di2015NewLine    .ForMember(x => x.Son, opt => opt.MapFrom(model => model));Di2015NewLineMapper.CreateMap<FatherModel, Son>()Di2015NewLine    .ForMember(x => x.Id, opt => opt.MapFrom(model => model.SonId));Di2015NewLine
15556235Di2015UniqueSeparatorCompile
15556235Di2015UniqueSeparatorcandle.exe
15556235Di2015UniqueSeparatorcsc.exe
15556235Di2015UniqueSeparatorMicrosoft.CSharp.targets
15556235Di2015UniqueSeparatorWix.targets
15556287Di2015UniqueSeparatorserver.execute
15556287Di2015UniqueSeparatorSubsite.SubFile
15556287Di2015UniqueSeparatorserver.execute
15556287Di2015UniqueSeparatorHttpRequest
15556410Di2015UniqueSeparatorbin\\Debug
15556410Di2015UniqueSeparatorbin\\Release
15556410Di2015UniqueSeparatordata source=|DataDirectory|\\testDB.sdf
15556459Di2015UniqueSeparatorSelect
15556459Di2015UniqueSeparatoritem
15556459Di2015UniqueSeparatorindex
15556459Di2015UniqueSeparatorddl.DataSource = arrayOfStrings.Select((text, index) => new { text, index })Di2015NewLine                               .ToList();Di2015NewLineDi2015NewLineddl.DataValueField = "index"; Di2015NewLineddl.DataTextField = "text";Di2015NewLineddl.DataBind();Di2015NewLine
15556555Di2015UniqueSeparator       tryDi2015NewLine        {Di2015NewLineDi2015NewLine            //Get the manager name from the active directoryDi2015NewLine            var domain = System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties().DomainName;Di2015NewLine            using (DirectoryEntry dir = new DirectoryEntry("LDAP://" + domain))Di2015NewLine            {Di2015NewLine                using (DirectorySearcher ds = new DirectorySearcher(dir, "samAccountName=" + requster))Di2015NewLine                {Di2015NewLine                    SearchResult sr = ds.FindOne();Di2015NewLine                    //Exeception occurs on this line below, if the attribute is not set.Di2015NewLine                    string managerName = sr.Properties["Manager"][0].ToString();Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLine
15556707Di2015UniqueSeparator        <asp:Chart ID="Chart1" runat="server" Palette="SeaGreen" BackColor="LightGray" Width="654px">Di2015NewLine            <Series>Di2015NewLineDi2015NewLine            </Series>Di2015NewLine            <ChartAreas>Di2015NewLine                <asp:ChartArea Name="ChartArea1" AlignmentOrientation="Horizontal">Di2015NewLine                </asp:ChartArea>Di2015NewLine            </ChartAreas>Di2015NewLine        </asp:Chart>Di2015NewLine
15556707Di2015UniqueSeparator        //Build Sample Data DataTableDi2015NewLine        DataTable dt = new DataTable();Di2015NewLine        DataColumn dc;Di2015NewLineDi2015NewLine        dc = new DataColumn();Di2015NewLine        dc.ColumnName = "Name";Di2015NewLine        dt.Columns.Add(dc);Di2015NewLineDi2015NewLine        dc = new DataColumn();Di2015NewLine        dc.ColumnName = "Question";Di2015NewLine        dt.Columns.Add(dc);Di2015NewLineDi2015NewLine        dt.Columns.Add("Marks", typeof(int));Di2015NewLineDi2015NewLine        string question = "2D";Di2015NewLineDi2015NewLine        DataRow dr;Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Fred";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 54;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Bill";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 66;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Rhona";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 32;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Peter";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 46;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLineDi2015NewLine        question = "4D";Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Fred";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 89;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Bill";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 99;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Rhona";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 28;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Peter";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 44;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLineDi2015NewLine        question = "3D";Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Fred";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 26;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Bill";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 89;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Rhona";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 73;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLine        dr = dt.NewRow();Di2015NewLine        dr["Name"] = "Peter";Di2015NewLine        dr["Question"] = question;Di2015NewLine        dr["Marks"] = 14;Di2015NewLine        dt.Rows.Add(dr);Di2015NewLineDi2015NewLine        //Sort the datatableDi2015NewLine        DataView dv = dt.DefaultView;Di2015NewLine        dv.Sort = "Question ASC, Name ASC";Di2015NewLine        dt = dv.ToTable();Di2015NewLineDi2015NewLine        DataTable table = new DataTable();Di2015NewLine        table.Columns.Add("Question", typeof(string));Di2015NewLine        foreach (DataRow dr2 in dt.Rows)Di2015NewLine        {Di2015NewLine            //Add user Names to DataTable tableDi2015NewLine            if (!table.Columns.Contains(dr2["Name"].ToString())) {Di2015NewLine                table.Columns.Add(dr2["Name"].ToString(), typeof(int));Di2015NewLine            }Di2015NewLineDi2015NewLine            //Add empty Question rows to DataTableDi2015NewLine            if (table.AsEnumerable().Where(x => x.Field<string>("Question") == dr2["Question"].ToString()).Count() == 0)Di2015NewLine            {Di2015NewLine                table.Rows.Add(dr2["Question"].ToString());Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Loop through all columns and questions and then calculate the markDi2015NewLine        for (int i = 1; i < table.Columns.Count;i++ )Di2015NewLine        {Di2015NewLine            for (int j = 0; j < table.Rows.Count; j++) Di2015NewLine            {Di2015NewLine                string questionName = table.Rows[j][0].ToString();Di2015NewLine                for (int k = 0; k < dt.Rows.Count; k++) Di2015NewLine                {Di2015NewLine                    string userName = table.Columns[i].ColumnName;Di2015NewLine                    table.Rows[j][i] = dt.AsEnumerable().Where(x => x.Field<string>("Name") == userName).Where(y=>y.Field<string>("Question") == questionName).Sum(r => r.Field<int>("Marks"));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        Chart1.Series[seriesName].ChartType = SeriesChartType.Bar;Di2015NewLineDi2015NewLine        //convert datatable to a IEnumerable formDi2015NewLine        var IEtable = (table as System.ComponentModel.IListSource).GetList();Di2015NewLineDi2015NewLine        Chart1.DataBindTable(IEtable, "Question");Di2015NewLine
15556755Di2015UniqueSeparatorUpdateSourceTrigger
15556755Di2015UniqueSeparatorPropertyChanged
15556755Di2015UniqueSeparatorBinding="{Binding IsTrue, UpdateSourceTrigger=PropertyChanged}"Di2015NewLine
15556757Di2015UniqueSeparatorobjects.Where(a => a.property1 == 2 && a.property2 == 3);Di2015NewLine
15556757Di2015UniqueSeparatorobjects.Where(a => a.property1 == 2).Where(a => a.property2 == 3);Di2015NewLine
15556885Di2015UniqueSeparatorHitTestResultCallback
15556885Di2015UniqueSeparatorVisualTreeHelper.GetParent
15556885Di2015UniqueSeparatorHitTestFilterCallback
15556885Di2015UniqueSeparatorVisualTreeHelper.HitTest(Di2015NewLine    Application.Current.MainWindow,Di2015NewLine    obj =>Di2015NewLine    {Di2015NewLine        if (obj is UserControl)Di2015NewLine        {Di2015NewLine            // found itDi2015NewLine            return HitTestFilterBehavior.Stop;Di2015NewLine        }Di2015NewLine        return HitTestFilterBehavior.Continue;Di2015NewLine    },Di2015NewLine    result => HitTestResultBehavior.Continue,Di2015NewLine    new PointHitTestParameters(_currentPoint));Di2015NewLine
15556885Di2015UniqueSeparatorHitTestFilterBehavior.ContinueSkipChildren
15556921Di2015UniqueSeparatorDataKeyField
15556921Di2015UniqueSeparatorDataList
15556921Di2015UniqueSeparatorStaffID
15556921Di2015UniqueSeparator<asp:DataList ID="DataList1" runat="server" DataSourceID="StaffHours" Di2015NewLineDataKeyField = "StaffID" ShowFooter="False" Width="668px" Di2015NewLineHeight="16px" CellPadding="1" CellSpacing="1"">Di2015NewLine
15556921Di2015UniqueSeparatorfor(int index = 0;index < DataList1.Items.Count;index++)Di2015NewLine{Di2015NewLine    int staffID = (int) DataList1.DataKeys[index];Di2015NewLine    DropDownList ddStartShift = (DropDownList) DataList1.Items[index].FindControl("ddStartShift");Di2015NewLine    // etc.Di2015NewLineDi2015NewLine}Di2015NewLine
15556996Di2015UniqueSeparatorxp_cmdshell
15556996Di2015UniqueSeparatorcacls
15556996Di2015UniqueSeparatorcacls "C:\\Data" /e /g Users:rDi2015NewLineDi2015NewLine    cacls      -- Change ACLsDi2015NewLine    "C:\\Data"  -- Directory to changeDi2015NewLine    /e         -- Edit the current ACL instad of replacing itDi2015NewLine    /g Users:r -- Grant the "Users" group read-only accessDi2015NewLine
15556996Di2015UniqueSeparatorcacls
15556996Di2015UniqueSeparatorxp_cmdshell
15557086Di2015UniqueSeparatorDelegate.CreateDelegate
15557086Di2015UniqueSeparatorType, Type, MethodInfo
15557086Di2015UniqueSeparatorDelegate.CreateDelegate(Type, Object, MethodInfo)
15557086Di2015UniqueSeparatortypeof(FormLoader)
15557086Di2015UniqueSeparatorMethodInfo
15557086Di2015UniqueSeparatorType
15557086Di2015UniqueSeparatorType
15557086Di2015UniqueSeparatorFormLoader
15557086Di2015UniqueSeparatorCreateDelegate
15557086Di2015UniqueSeparatorAddEvent
15557092Di2015UniqueSeparatorpublic class ProjectVMDi2015NewLine{Di2015NewLine  public string ProjectName { set;get;}Di2015NewLine  public string ProjectOwner { set;get;}Di2015NewLine  //and other relevant properties ONLY  hereDi2015NewLine}Di2015NewLine
15557092Di2015UniqueSeparatorpublic ActionResult Create()Di2015NewLine{Di2015NewLine  var vm=new ProjectVM();Di2015NewLine  return View(vm);Di2015NewLine}Di2015NewLine
15557092Di2015UniqueSeparator@model ProjectVMDi2015NewLine@using(Html.Beginform())Di2015NewLine{Di2015NewLine  @Html.TextBoxFor(x=>x.ProjectName)Di2015NewLine  <input type="submit" />Di2015NewLine}Di2015NewLine
15557092Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Create(ProjectVM viewModel)Di2015NewLine{Di2015NewLine  if(ModelState.IsValid)Di2015NewLine  {Di2015NewLine    //Create domain model object and set the property values and saveDi2015NewLine     Project proj=new Project();Di2015NewLine     proj.Name=viewModel.ProjectNameDi2015NewLine     proj.ProjectOwner=viewModel.ProjectOwner;Di2015NewLineDi2015NewLine     db.Projects.Add(proj);Di2015NewLine     db.SaveChanges();Di2015NewLine     return RedirectToAction("Created");Di2015NewLine   }Di2015NewLine   return View(viewModel);  //returning your view model objectDi2015NewLine}Di2015NewLine
15557098Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum DayOfWeekDi2015NewLine{Di2015NewLine   Undefined = 0,Di2015NewLine   Mon = 1,Di2015NewLine   Tue = 2,Di2015NewLine   Wed = 4,Di2015NewLine   Thu = 8,Di2015NewLine   Fri = 16,Di2015NewLine   Sat = 32,Di2015NewLine   Sun = 64Di2015NewLine}Di2015NewLineDi2015NewLineDayOfWeek bitmask = DayOfWeek.Mon | DayOfWeek.Wed | DayOfWeek.Sat;Di2015NewLine
15557098Di2015UniqueSeparatorDECLARE @bitmast INT;Di2015NewLineSET @bitmask = 64 | 1 | 16; -- sun, mon, friDi2015NewLineDi2015NewLineSELECT * FROM tblDi2015NewLineWHERE DayOfWeekBitMask & @bitmask = @bitmask;Di2015NewLine
15557098Di2015UniqueSeparatorint bitmask = DayOfWeek.Sun | DayOfWeek.Mon |DayOfWeek.Fri;Di2015NewLinevar query = Context.tbl.Where(r => (r.DayOfWeekBitMask & bitmask) == bitmask);Di2015NewLine
15557098Di2015UniqueSeparatorint bitmask = DayOfWeek.Sun | DayOfWeek.Mon |DayOfWeek.Fri;Di2015NewLinevar item = Context.tbl.First();Di2015NewLineDi2015NewLineitem.DayOfWeekBitMask = bitmask;Di2015NewLineContext.SaveChanges();Di2015NewLine
15557107Di2015UniqueSeparatorDo
15557107Di2015UniqueSeparatorObservable.Timer
15557107Di2015UniqueSeparatorHashSet<string>
15557107Di2015UniqueSeparatorDo
15557107Di2015UniqueSeparatorSubscribe
15557107Di2015UniqueSeparatorDo
15557107Di2015UniqueSeparatorTake
15557107Di2015UniqueSeparatorObservable.Timer
15557107Di2015UniqueSeparatorTake
15557107Di2015UniqueSeparatorAddItem(string item)Di2015NewLine{Di2015NewLine    _mySet.Add(item);Di2015NewLine    Observable.Timer(TimeSpan.FromSeconds(60), _scheduler)Di2015NewLine        .Subscribe(_ => RemoveItem(item));Di2015NewLine}Di2015NewLine
15557156Di2015UniqueSeparatorchar[] result = new char[10];Di2015NewLinefor (int len = 0; len < result.Length; ) {Di2015NewLine   len += serialPort1.Read(result, len, result.Length - len);Di2015NewLine}Di2015NewLine
15557156Di2015UniqueSeparatorstring result = serialPort.ReadLine();Di2015NewLine
15557180Di2015UniqueSeparatorpublic static class IndexAttachedPropertyDi2015NewLine{Di2015NewLineDi2015NewLineDi2015NewLine    #region TabItemIndexDi2015NewLineDi2015NewLine    public static int GetTabItemIndex(DependencyObject obj)Di2015NewLine    {Di2015NewLine        return (int) obj.GetValue(TabItemIndexProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetTabItemIndex(DependencyObject obj, int value)Di2015NewLine    {Di2015NewLine        obj.SetValue(TabItemIndexProperty, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Using a DependencyProperty as the backing store for TabItemIndex.  This enables animation, styling, binding, etc...Di2015NewLine    public static readonly DependencyProperty TabItemIndexProperty =Di2015NewLine        DependencyProperty.RegisterAttached("TabItemIndex", typeof (int), typeof (IndexAttachedProperty),Di2015NewLine                                            new PropertyMetadata(-1));Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region TrackTabItemIndexDi2015NewLineDi2015NewLine    public static bool GetTrackTabItemIndex(DependencyObject obj)Di2015NewLine    {Di2015NewLine        return (bool) obj.GetValue(TrackTabItemIndexProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetTrackTabItemIndex(DependencyObject obj, bool value)Di2015NewLine    {Di2015NewLine        obj.SetValue(TrackTabItemIndexProperty, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Using a DependencyProperty as the backing store for TrackTabItemIndex.  This enables animation, styling, binding, etc...Di2015NewLine    public static readonly DependencyProperty TrackTabItemIndexProperty =Di2015NewLine        DependencyProperty.RegisterAttached("TrackTabItemIndex", typeof (bool), typeof (IndexAttachedProperty),Di2015NewLine                                            new PropertyMetadata(false, TrackTabItemIndexOnPropertyChanged));Di2015NewLineDi2015NewLine    private static void TrackTabItemIndexOnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        var tabControl = GetParent(d, p => p is TabControl) as TabControl;Di2015NewLine        var tabItem = GetParent(d, p => p is TabItem) as TabItem;Di2015NewLine        if (tabControl == null || tabItem == null)Di2015NewLine            return;Di2015NewLine        if (!(bool)e.NewValue)Di2015NewLine            return;Di2015NewLine        int index = tabControl.Items.IndexOf(tabItem.DataContext == null ? tabItem : tabItem.DataContext);Di2015NewLine        SetTabItemIndex(d, index);Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    public static DependencyObject GetParent(DependencyObject item, Func<DependencyObject, bool> condition)Di2015NewLine    {Di2015NewLine        if (item == null)Di2015NewLine            return null;Di2015NewLine        return condition(item) ? item : GetParent(VisualTreeHelper.GetParent(item), condition);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15557180Di2015UniqueSeparator        <TabControl.ItemTemplate>Di2015NewLine            <DataTemplate DataType="{x:Type WpfApplication3:A}">Di2015NewLine                <StackPanel x:Name="tabItemRoot" WpfApplication3:IndexAttachedProperty.TrackTabItemIndex ="True">Di2015NewLine                    <TextBlock Text="{Binding Text}"/>Di2015NewLine                    <TextBlock Text="{Binding Path=(WpfApplication3:IndexAttachedProperty.TabItemIndex), ElementName=tabItemRoot}"/>Di2015NewLineDi2015NewLine                </StackPanel>Di2015NewLine            </DataTemplate>Di2015NewLine        </TabControl.ItemTemplate>Di2015NewLine
15557282Di2015UniqueSeparatorCombined
15557282Di2015UniqueSeparator.
15557282Di2015UniqueSeparator-
15557282Di2015UniqueSeparatorSuffixPart
15557282Di2015UniqueSeparatorPrefixPart
15557282Di2015UniqueSeparatorpublic static string PrefixPart(string str)Di2015NewLine{Di2015NewLine    returnDi2015NewLine        string.Join("(?:", str.Select(i => Regex.Escape(i.ToString())))Di2015NewLine        + string.Join(")?", Enumerable.Repeat(string.Empty, str.Length));Di2015NewLine}Di2015NewLineDi2015NewLinepublic static string SuffixPart(string str)Di2015NewLine{Di2015NewLine    return PrefixPart(new string(str.Reverse().ToArray()));Di2015NewLine}Di2015NewLineDi2015NewLinepublic static string Combined(string str1, string str2)Di2015NewLine{Di2015NewLine    string left = SuffixPart(str1) + ".?" + PrefixPart(str2);Di2015NewLine    string right = SuffixPart(str2) + ".?" + PrefixPart(str1);Di2015NewLine    return string.Format("^{0}|{1}$", left, right);Di2015NewLine}Di2015NewLine
15557303Di2015UniqueSeparatorreturn
15557303Di2015UniqueSeparatorThrow
15557303Di2015UniqueSeparatorSystem.Threading.Tasks
15557303Di2015UniqueSeparator    string yourMethod() Di2015NewLine    {Di2015NewLine        // LoggingDi2015NewLineDi2015NewLine        try Di2015NewLine        {   Di2015NewLine            // prechecks Di2015NewLine        } Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            return "failed" // ok as you have now if no more information is neededDi2015NewLine            // throw; // Can also throw exception which WCF client on other end can catchDi2015NewLine        }     Di2015NewLineDi2015NewLine        Task.Factory.StartNew(() => {Di2015NewLine            IMyContractCallBack callback = OperationContext.Current.GetCallbackChannel<IMyContractCallBack>();Di2015NewLine            // Some processing .....Di2015NewLine            callbackmethod("20% complete", callback);Di2015NewLine            // Some processing .....Di2015NewLine            callbackmethod("40% complete", callback);Di2015NewLine            // Some processing .....Di2015NewLine            callbackmethod("60% complete", callback);Di2015NewLine            // Some processing .....Di2015NewLine            callbackmethod("80% complete", callback);Di2015NewLine            // Some processing .....Di2015NewLine            callbackmethod("100% complete", callback);Di2015NewLine        });Di2015NewLine        return "success";Di2015NewLine   }Di2015NewLine
15557318Di2015UniqueSeparatornewsy
15557318Di2015UniqueSeparatorreturn
15557318Di2015UniqueSeparatorprivate string[] get_news(string URL)Di2015NewLine{Di2015NewLine    XmlTextReader textReader = new XmlTextReader(URL);Di2015NewLine    string[] newsy = null;Di2015NewLine    while (textReader.Read())Di2015NewLine    {Di2015NewLine        if (textReader.NodeType == XmlNodeType.Element)Di2015NewLine        {Di2015NewLine            if (textReader.Name == "news") {Di2015NewLine                string News = textReader.ReadElementContentAsString();Di2015NewLine                newsy = new string[] { News };Di2015NewLine            }Di2015NewLine            if (textReader.Name == "link")Di2015NewLine            {Di2015NewLine                string Link = textReader.ReadElementContentAsString();Di2015NewLine                newsy = new string[] { Link };Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return newsy;Di2015NewLine}Di2015NewLine
15557318Di2015UniqueSeparatornewsy
15557318Di2015UniqueSeparatorwhile
15557318Di2015UniqueSeparatorwhile
15557318Di2015UniqueSeparatornewsy
15557318Di2015UniqueSeparatorName
15557318Di2015UniqueSeparator"news"
15557318Di2015UniqueSeparator"link"
15557318Di2015UniqueSeparatornewsy
15557318Di2015UniqueSeparatornull
15557318Di2015UniqueSeparatorstring[] newsy = new string[] {};Di2015NewLine
15557326Di2015UniqueSeparatorapplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet
15557326Di2015UniqueSeparatorapplication/vnd.ms-excel
15557326Di2015UniqueSeparatorContentType xlsxContent = new ContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"Di2015NewLineforeach (string file in sentFiles)Di2015NewLine{Di2015NewLine    Attachment attachment = new Attachment(file, xlsxContent);Di2015NewLine    msg.Attachments.Add(attachment);Di2015NewLine}Di2015NewLine
15557381Di2015UniqueSeparatorthis
15557381Di2015UniqueSeparatorthis._parser
15557381Di2015UniqueSeparatorclass Foo {Di2015NewLine    private XMLParser _parser;Di2015NewLineDi2015NewLine    // your functions, like btnparse_ClickDi2015NewLine}Di2015NewLine
15557381Di2015UniqueSeparatorprivate void btnparse_Click(object sender, RoutedEventArgs e) Di2015NewLine{Di2015NewLine    XMLParser parser = XMLParser.Instance;Di2015NewLine    ...Di2015NewLine
15557381Di2015UniqueSeparatorprivate void btnparse_Click(object sender, RoutedEventArgs e) Di2015NewLine{Di2015NewLine    var parser = XMLParser.Instance;Di2015NewLine    ...Di2015NewLine
15557404Di2015UniqueSeparatorvar index = 1; //column index to insertDi2015NewLinevar colDef = new ColumnDefinition() { Width=new GridLength(200) };Di2015NewLineMyGrid.ColumnDefinitions.Insert(index, colDef);Di2015NewLine
15557449Di2015UniqueSeparatortry { } catch
15557449Di2015UniqueSeparatorvoid Stop()Di2015NewLine{Di2015NewLine    if (objectListView1.InvokeRequired)Di2015NewLine    {Di2015NewLine         objectListView1.BeginInvoke(new Action(Stop));Di2015NewLine         return;Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach (EquipmentObj obj in this.objectListView1.Objects)Di2015NewLine    {Di2015NewLine        obj.Stop();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15557503Di2015UniqueSeparatorVersion a = new Version("1.0.0.0");Di2015NewLineVersion b = new Version("1.0.0.1");Di2015NewLineDi2015NewLineif (b>a) //evaluates to trueDi2015NewLine    blah blah blahDi2015NewLine
15557503Di2015UniqueSeparatorVersion
15557528Di2015UniqueSeparatorO(n)
15557528Di2015UniqueSeparatormerge
15557579Di2015UniqueSeparatorclass YourControl {Di2015NewLine    public event EventHandler Success;Di2015NewLineDi2015NewLine    protected void OnSuccess() {Di2015NewLine        if(this.Success != null)Di2015NewLine            this.Success(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15557579Di2015UniqueSeparatorclass YourControl {Di2015NewLine    public class YourControlEventArgs: EventArgs {Di2015NewLine        public TimeSpan Elapsed;Di2015NewLine        public YourControlEventArgs(TimeSpan t) {Di2015NewLine            this.Elapsed = t;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler<YourControlEventArgs> Success;Di2015NewLineDi2015NewLine    protected void OnSuccess(TimeSpan t) {Di2015NewLine        if(this.Success != null)Di2015NewLine            this.Success(this, new YourControlEventArgs(t));Di2015NewLine    }Di2015NewLine}Di2015NewLine
15557788Di2015UniqueSeparatorappList
15557788Di2015UniqueSeparatorApplication
15557788Di2015UniqueSeparatorApplication
15557788Di2015UniqueSeparatorfor(var i = 0; i < ds.Tables[0].Rows.Count; i++)Di2015NewLine{Di2015NewLine    DataRow item = ds.Tables[0].Rows[i];Di2015NewLineDi2015NewLine    Appliction app = new Application();Di2015NewLine    app.Name = item["Name"].ToString();Di2015NewLine    app.Confidentiality = int.Parse(item["Conf"].ToString());Di2015NewLine    app.Id = item["ID"].ToString();Di2015NewLine    appList[i] = appDi2015NewLine}Di2015NewLine
15557788Di2015UniqueSeparatori <= x - 1
15557788Di2015UniqueSeparatori < x
15557788Di2015UniqueSeparatoritem["Name"]
15557788Di2015UniqueSeparatoritem["Name"].ToString()
15557788Di2015UniqueSeparatornull.ToString()
15557788Di2015UniqueSeparatorNullReferenceException
15557927Di2015UniqueSeparatorvar distinct = listDi2015NewLine    .Select((str, idx) => new { Str = str, Idx = idx })Di2015NewLine    .GroupBy(pair => new HashSet<char>(pair.Str), HashSet<char>.CreateSetComparer())Di2015NewLine    .Select(grp => grp.OrderBy(p => p.Idx).First())Di2015NewLine    .ToList();Di2015NewLine
15557927Di2015UniqueSeparatorAggregate
15557927Di2015UniqueSeparatorvar distinct = listDi2015NewLine    .Aggregate(new Dictionary<HashSet<char>, string>(HashSet<char>.CreateSetComparer()), (dict, str) =>Di2015NewLine    {Di2015NewLine        var set = new HashSet<char>(str);Di2015NewLine        if (!dict.ContainsKey(set))Di2015NewLine            dict.Add(set, str);Di2015NewLine        return dict;Di2015NewLine    })Di2015NewLine    .ValuesDi2015NewLine    .ToList();Di2015NewLine
15558014Di2015UniqueSeparatorSemaphoreSlim
15558014Di2015UniqueSeparatorstatic readonly SemaphoreSlim Semaphore = new SemaphoreSlim(3);Di2015NewLineDi2015NewLine// operation contractDi2015NewLinepublic async Task Inc(int id)Di2015NewLine{Di2015NewLine    await Semaphore.WaitAsync();Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        Thread.Sleep(100);Di2015NewLine        var result = id + 1;Di2015NewLine        // do further processing using initiator service instance membersDi2015NewLine        // something like Callback.IncResult(result);Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        Semaphore.Release();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15558014Di2015UniqueSeparatorTaskCompletionSource
15558014Di2015UniqueSeparatorTask
15558014Di2015UniqueSeparatorTaskCompletionSource
15558014Di2015UniqueSeparatorprivate static readonly ActionBlock<Message<int>> Block =Di2015NewLine    new ActionBlock<Message<int>>(Di2015NewLine        x => Inc(x),Di2015NewLine        new ExecutionDataflowBlockOptionsDi2015NewLine        {Di2015NewLine            MaxDegreeOfParallelism = 3Di2015NewLine        });Di2015NewLineDi2015NewLinestatic void Inc(Message<int> input)Di2015NewLine{Di2015NewLine    Thread.Sleep(100);Di2015NewLineDi2015NewLine    input.TCS.SetResult(input.Data + 1);Di2015NewLine}Di2015NewLineDi2015NewLine// operation contractDi2015NewLinepublic async Task Inc(int id)Di2015NewLine{Di2015NewLine    var tcs = new TaskCompletionSource<int>();Di2015NewLineDi2015NewLine    Block.Post(new Message<int> { TCS = tcs, Data = id });Di2015NewLineDi2015NewLine    int result = await tcs.Task;Di2015NewLine    // do further processing using initiator service instance membersDi2015NewLine    // something like Callback.IncResult(result);Di2015NewLine}Di2015NewLine
15558052Di2015UniqueSeparatorfor (int j = 0; j <= 12; j++)Di2015NewLine    if(temp_name[j].ToString() != Environment.NewLine)Di2015NewLine     name += temp_name[j];Di2015NewLineDi2015NewLine name += Environment.NewLine;Di2015NewLine
15558052Di2015UniqueSeparatorfor (int j = 13; j <= 24; j++)Di2015NewLine     if (temp_name[j].ToString() != Environment.NewLine)Di2015NewLine         name += temp_name[j];Di2015NewLine
15558052Di2015UniqueSeparatorfor(int j = 12; j < 24; j++)Di2015NewLine    //etcDi2015NewLine
15558052Di2015UniqueSeparatorname += temp_name.Substring(0, 12); // do some checking by the way on length of temp_name!Di2015NewLinename += "<br />";Di2015NewLinename += temp_name.Substring(12, 12); //again, do some checkingDi2015NewLine
15558052Di2015UniqueSeparatorEnvironment.NewLine
15558052Di2015UniqueSeparator"<br />"
15558055Di2015UniqueSeparatorEnum.GetNames(typeof(SportName)) // returns string[]Di2015NewLine
15558055Di2015UniqueSeparatorEnum.GetValues(typeof(SportName)) // returns int[]Di2015NewLine
15558106Di2015UniqueSeparatormodelBuilder.Entity<Preferences>()Di2015NewLine    .Property(p => p.Id)Di2015NewLine    .HasColumnType("CHAR(30)");Di2015NewLine
15558106Di2015UniqueSeparator[Column(TypeName = "CHAR(30)")]
15558106Di2015UniqueSeparator[Column(TypeName="char")][MaxLength(30)]
15558164Di2015UniqueSeparatorpicBoxes
15558164Di2015UniqueSeparatorPictureBox
15558164Di2015UniqueSeparatorPictureBox
15558164Di2015UniqueSeparatorpicBoxes[i] = new MyPictureBox();Di2015NewLine
15558164Di2015UniqueSeparatorpicBoxes[i] = new PictureBox();Di2015NewLine
15558397Di2015UniqueSeparatorSelected
15558397Di2015UniqueSeparatorboolean
15558397Di2015UniqueSeparatorpublic IEnumerable<BrowseVendorModel> BrowseVendors()Di2015NewLine{Di2015NewLine    IQueryable<BrowseVendorModel> viewModel = _db.VendorProfilesDi2015NewLine        .Include("VendorsSelected")Di2015NewLine        .Select(s => new BrowseVendorModelDi2015NewLine        {Di2015NewLine            ProfileID = s.ProfileID,Di2015NewLine            Name = s.Name,Di2015NewLine            CompanyName = s.CompanyName,Di2015NewLine            City = s.City,Di2015NewLine            State = s.State,Di2015NewLine            DateCreated = s.DateCreated,Di2015NewLine            Selected = x.VendorsSelected.Select(s => s.UserName)Di2015NewLine                        .Contains(HttpContext.Current.User.Identity.Name)Di2015NewLine        })Di2015NewLine        .OrderBy(v => v.ProfileID);Di2015NewLineDi2015NewLine    return viewModel;Di2015NewLine}Di2015NewLine
15558506Di2015UniqueSeparatorpublic Form1(List<string> a)Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    myCollection = a;Di2015NewLine}Di2015NewLine
15558506Di2015UniqueSeparatorpublic Form1(List<string> a)Di2015NewLine{Di2015NewLine    Form1();Di2015NewLine    myCollection = a;Di2015NewLine}Di2015NewLine
15558714Di2015UniqueSeparatorpublic void doStuff()Di2015NewLine{Di2015NewLine  AverageValues AVS = new AverageValues();Di2015NewLine  AVS.Bull = "Woof";Di2015NewLine  string path = "C:\\\\users\\\\kjenks11\\\\Averages.txt";Di2015NewLine  using (var NewFile = File.Create(path))Di2015NewLine  {Di2015NewLine    using (var writeIt = new StreamWriter(NewFile))Di2015NewLine    {Di2015NewLine      List<AverageValues> AV = new List<AverageValues> {AVS};Di2015NewLine      foreach (var value in AV)Di2015NewLine      {Di2015NewLine        writeIt.Write(value.Bull);Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
15558777Di2015UniqueSeparatorBitmapImage
15558777Di2015UniqueSeparatorpublic static class BitmapImageExtensionsDi2015NewLine{Di2015NewLine    public static bool IsEqual(this BitmapImage image1, BitmapImage image2)Di2015NewLine    {Di2015NewLine        if (image1 == null || image2 == null)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        return image1.ToBytes().SequenceEqual(image2.ToBytes());Di2015NewLine    }Di2015NewLineDi2015NewLine    public static byte[] ToBytes(this BitmapImage image)Di2015NewLine    {Di2015NewLine        byte[] data = new byte[] { };Di2015NewLine        if (image != null)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                var encoder = new BmpBitmapEncoder();Di2015NewLine                encoder.Frames.Add(BitmapFrame.Create(image));Di2015NewLine                using (MemoryStream ms = new MemoryStream())Di2015NewLine                {Di2015NewLine                    encoder.Save(ms);Di2015NewLine                    data = ms.ToArray();Di2015NewLine                }Di2015NewLine                return data;Di2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return data;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15558777Di2015UniqueSeparatorBitmapImage image1 = ..............Di2015NewLineBitmapImage image2 = ................Di2015NewLineDi2015NewLineif (image1.IsEqual(image2))Di2015NewLine{Di2015NewLine    // same imageDi2015NewLine}Di2015NewLine
15558850Di2015UniqueSeparatorItemView view = new ItemView(int.MaxValue);Di2015NewLineFindItemsResults<Item> findResults;Di2015NewLineview.PropertySet = itempropertyset;Di2015NewLineDi2015NewLineSearchFilter searchFilter = Di2015NewLine   new SearchFilter.IsGreaterThan(ItemSchema.DateTimeReceived, DateTime.Now.AddDays(-3));Di2015NewLineDi2015NewLinefindResults = service.FindItems(WellKnownFolderName.Inbox, searchFilter, view);Di2015NewLine
15558970Di2015UniqueSeparatorimplicit
15558971Di2015UniqueSeparatorif (nullableType == typeof(List<string>))Di2015NewLine{Di2015NewLine    ((List<string>)(prop.GetValue(this, null))).Add(value as string);Di2015NewLine}Di2015NewLine
15558975Di2015UniqueSeparatorString
15558975Di2015UniqueSeparatorstring
15558975Di2015UniqueSeparatorvoid
15558975Di2015UniqueSeparatorif
15558975Di2015UniqueSeparatorwhile
15558975Di2015UniqueSeparatorstatic string rsnREAD(string dbTbl)Di2015NewLine    {Di2015NewLine      string result = string.Empty;Di2015NewLine      using(var machStopDB = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + @"C:\\Users\\sgarner\\Google Drive\\Visual Studio 2012\\Write_to_db\\Write_to_db\\Machine_Stop.accdb");Di2015NewLine      {Di2015NewLine        string str = "SELECT LAST(REASON) AS lastREASON FROM "+dbTbl+"";Di2015NewLine        OleDbCommand rdCmd = new OleDbCommand(str, machStopDB);Di2015NewLine        tryDi2015NewLine        {Di2015NewLine          machStopDB.Open();Di2015NewLine          using(var reader = rdCmd.ExecuteReader())Di2015NewLine          {Di2015NewLine            if(reader.Read())Di2015NewLine            {Di2015NewLine                result = reader[0].ToString();Di2015NewLine            }Di2015NewLine          }Di2015NewLine        }Di2015NewLine        catch (Exception ex) // Sample only. Catch only ones you need.Di2015NewLine        {Di2015NewLine            MessageBox.Show(ex.Message);Di2015NewLine        }Di2015NewLine      }Di2015NewLine      return result;Di2015NewLine    }Di2015NewLine
15559055Di2015UniqueSeparatorvar list = new List<double>(2000000);Di2015NewLine
15559125Di2015UniqueSeparatorGetMemberTypes
15559125Di2015UniqueSeparatorIMemberType
15559125Di2015UniqueSeparatorpublic interface IMemberType {      Di2015NewLine    public string Name { get; set; } // i.e. "Professional"Di2015NewLine    public string Code { get; set; } // i.e. "MEM3"Di2015NewLine}Di2015NewLineDi2015NewLinepublic void ClientCode() {Di2015NewLineDi2015NewLine    // Instantiate a concrete service (calling a factory would be even better).Di2015NewLine    IMembershipService service = new MembershipService();Di2015NewLineDi2015NewLine    // Get the list of MemberTypes exposed by the concrete MembershipService.Di2015NewLine    Collecton<IMemberTypes> types = service.GetMemberTypes();Di2015NewLineDi2015NewLine    // Subscribe to service defined in IMembershipService with "Professional" level, if possible.Di2015NewLine    foreach (IMemeberType type in types) {Di2015NewLine        if ((type.Name == "Professional"))Di2015NewLine            service.SubscribeToAwesomeService(type.Code);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15559151Di2015UniqueSeparator||
15559151Di2015UniqueSeparator&&
15559169Di2015UniqueSeparatorDictionary<string, Func<List<SmartTextItemModel>
15559169Di2015UniqueSeparatorservice_ListOfItems["bingsearch"] = () => MyProgramKernel.Instance.SmartTextViewModel.SmartTextStateModel.BingItemResultsl;Di2015NewLine
15559169Di2015UniqueSeparatorif (service_ListOfItems[searchService]() == null)
15559382Di2015UniqueSeparatorMethodCallExpression
15559382Di2015UniqueSeparatorExpression.Call
15559382Di2015UniqueSeparatorvar unary = new Func<Expression, Expression>(Di2015NewLine    e => Expression.Call(null, typeof(Math).GetMethod("Cos"), e));Di2015NewLine
15559382Di2015UniqueSeparatorExpression.Call
15559382Di2015UniqueSeparatorstatic
15559382Di2015UniqueSeparatore => Expression.Call(typeof(Math).GetMethod("Cos"), e)Di2015NewLine
15559541Di2015UniqueSeparatorILookup<int, Entry> entriesById = entries.ToLookup(e => e.Id);Di2015NewLine
15559541Di2015UniqueSeparatorList<List<Entry>>
15559541Di2015UniqueSeparatorvar listOfLists = entriesById.GroupBy(e => e.Id)Di2015NewLine                             .Select(g => g.ToList())Di2015NewLine                             .ToList();Di2015NewLine
15559542Di2015UniqueSeparatorThe underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel
15559542Di2015UniqueSeparatorinetmgr.exe
15559542Di2015UniqueSeparatorAdvanced Settings
15559542Di2015UniqueSeparatorProcess Model
15559542Di2015UniqueSeparatorIdentity
15559542Di2015UniqueSeparatorApplicationPoolIdentity
15559542Di2015UniqueSeparatorNetworkService
15559718Di2015UniqueSeparator namespace Project3_ConsumptionApplicationDi2015NewLine {Di2015NewLine     ...Di2015NewLine }Di2015NewLine
15559762Di2015UniqueSeparatorPeekingIterator
15559762Di2015UniqueSeparatorIterator
15559762Di2015UniqueSeparatorIterators.peekingIterator
15559892Di2015UniqueSeparatorpublic static function foo($str, &$key)Di2015NewLine                                 ^Di2015NewLine                                 | Pass by referenceDi2015NewLine
15559892Di2015UniqueSeparatorout
15559945Di2015UniqueSeparatorusing (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))Di2015NewLine{Di2015NewLine    if (rdr.HasRows)Di2015NewLine    {Di2015NewLine        while (rdr.Read())Di2015NewLine        {Di2015NewLine            Data.Add(new NewsDi2015NewLine            {Di2015NewLine                strNewsTitle = (string)rdr["NewsTitle"],Di2015NewLine                strNewsDatePosted = (string)rdr["NewsDatePosted"],Di2015NewLine                strNewsDescription = (string)rdr["NewsDescription"],Di2015NewLine                strLocationOfImageURL = (string)rdr["ImageURL"],Di2015NewLine                recordsReturned = Convert.ToInt32(cmd.Parameters["@RecordsFound"].Value) Di2015NewLine            });Di2015NewLine            // NOT AVAILABLE HERE - READER IS OPENDi2015NewLine            // int recordsReturned1 = Convert.ToInt32(cmd.Parameters["@RecordsFound"].Value);Di2015NewLine        }Di2015NewLine        // STILL OPENDi2015NewLine        //int recordsReturned2 = Convert.ToInt32(cmd.Parameters["@RecordsFound"].Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine// Data reader closed and disposed, get output parameter here or neverDi2015NewLineint recordsReturned2 = Convert.ToInt32(cmd.Parameters["@RecordsFound"].Value);Di2015NewLine
15559958Di2015UniqueSeparator[BaseType (typeof (UIView))]Di2015NewLineinterface TapForTapAdView {Di2015NewLine    [Export ("initWithFrame:delegate:")]Di2015NewLine    IntPtr Constructor (RectangleF frame, TapForTapAdViewDelegate d);Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
15560019Di2015UniqueSeparatorlinestring
15560019Di2015UniqueSeparatorlinestring.Length
15560019Di2015UniqueSeparatorparserObject.DecodeFrom64(linestring[17]);
15560019Di2015UniqueSeparatorlinestring.Length
15560019Di2015UniqueSeparatorlinestring
15560019Di2015UniqueSeparatorstring[] linestring = lines.Select(c => c.ToString()).ToArray();Di2015NewLineif(linestring.Length <= 17)Di2015NewLine{Di2015NewLine    //handle malformed fileDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    //complete the processingDi2015NewLine}Di2015NewLine
15560019Di2015UniqueSeparatorlines.Select(c => c.ToString()
15560019Di2015UniqueSeparatorFile.ReadAllLines()
15560031Di2015UniqueSeparatorGroupBox
15560031Di2015UniqueSeparatorGroupBox
15560041Di2015UniqueSeparatorconst
15560041Di2015UniqueSeparatorconst
15560041Di2015UniqueSeparatorstatic
15560041Di2015UniqueSeparatorstatic readonly
15560041Di2015UniqueSeparatorpublic static readonly byte[] longByteArray = new byte[] { 1, 2, 3, 4, 5 };Di2015NewLine
15560041Di2015UniqueSeparatorstatic
15560041Di2015UniqueSeparatorreadonly
15560041Di2015UniqueSeparatorlongByteArray
15560041Di2015UniqueSeparatorDefinitions.longByteArray = new byte[] { 4, 5, 6 };   // Not possible.Di2015NewLine
15560041Di2015UniqueSeparatorDefinitions.longByteArray[3] = 82;                    // Allowed.Di2015NewLine
15560041Di2015UniqueSeparatorReadOnlyCollection<T>
15560041Di2015UniqueSeparatorIEnumerable<T>
15560041Di2015UniqueSeparatorIReadOnlyList<T>
15560059Di2015UniqueSeparator                if (Answer[i - 1] == Guess[j - 1])Di2015NewLine                    d[i, j] = d[i - 1, j - 1];  //no operationDi2015NewLine                elseDi2015NewLine                {Di2015NewLine                    int del = d[i-1, j] + 1;Di2015NewLine                    int ins = d[i, j-1] + 1;Di2015NewLine                    int sub = d[i-1, j-1] + 1;Di2015NewLine                    int op = Math.Min(Math.Min(del, ins), sub);Di2015NewLine                    d[i, j] = op;Di2015NewLine                    if (i == j)Di2015NewLine                    {Di2015NewLine                        if (op == del)Di2015NewLine                            ++deletions;Di2015NewLine                        else if (op == ins)Di2015NewLine                            ++insertions;Di2015NewLine                        elseDi2015NewLine                            ++substitutions;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine
15560069Di2015UniqueSeparator        using (StreamReader sr = new StreamReader("c:/temp/ESMDLOG.csv"))Di2015NewLine        {Di2015NewLine            string currentLine;Di2015NewLine            // currentLine will be null when the StreamReader reaches the end of fileDi2015NewLine            while((currentLine = sr.ReadLine()) != null)Di2015NewLine            {Di2015NewLine                // Search, case insensitive, if the currentLine contains the searched keywordDi2015NewLine                if(currentLine.IndexOf("I/RPTGEN", StringComparison.CurrentCultureIgnoreCase) >= 0)Di2015NewLine                {Di2015NewLine                     Console.WriteLine(currentLine);Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine        }Di2015NewLine
15560103Di2015UniqueSeparator<chord />Di2015NewLine
15560251Di2015UniqueSeparatorContentTemplate
15560251Di2015UniqueSeparatorContentPresenter
15560251Di2015UniqueSeparator<TabControl>Di2015NewLine    <TabControl.Resources>Di2015NewLine        <DataTemplate x:Key="TabTemplate">Di2015NewLine            <Label Content="Name" Name="label1" />                Di2015NewLine        </DataTemplate>Di2015NewLine    </TabControl.Resources>Di2015NewLine    <TabItem Header="Add" Name="tabItem1">Di2015NewLine        <TabItem.ContentTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <Grid Height="213">Di2015NewLine                    <Grid.RowDefinitions>Di2015NewLine                        <RowDefinition Height="*"/>Di2015NewLine                        <RowDefinition Height="*"/>Di2015NewLine                    </Grid.RowDefinitions>Di2015NewLine                    <Button Content="Add" Name="button1" />Di2015NewLine                    <ContentPresenter Grid.Row="1" ContentTemplate="{StaticResource TabTemplate}"/>Di2015NewLine                </Grid>Di2015NewLine            </DataTemplate>Di2015NewLine        </TabItem.ContentTemplate>Di2015NewLine    </TabItem>Di2015NewLine    <TabItem Header="Edit" Name="tabItem2">Di2015NewLine        <TabItem.ContentTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <Grid Height="213">Di2015NewLine                    <Grid.RowDefinitions>Di2015NewLine                        <RowDefinition Height="*"/>Di2015NewLine                        <RowDefinition Height="*"/>Di2015NewLine                    </Grid.RowDefinitions>Di2015NewLine                    <Button Content="Edit" Name="button2" />Di2015NewLine                    <ContentPresenter Grid.Row="1" ContentTemplate="{StaticResource TabTemplate}"/>Di2015NewLine                </Grid>Di2015NewLine            </DataTemplate>Di2015NewLine        </TabItem.ContentTemplate>Di2015NewLine    </TabItem>Di2015NewLine
15560251Di2015UniqueSeparatorContentPresenter
15560304Di2015UniqueSeparatoripAddress = IPAddress.Parse("192.168.0.11");Di2015NewLinemyList = new TcpListener(ipAddress, 8000);Di2015NewLinemyList.Start();Di2015NewLines = myList.AcceptSocket();Di2015NewLine
15560304Di2015UniqueSeparators.Close();Di2015NewLinemyList.Stop();Di2015NewLine
15560328Di2015UniqueSeparatornew
15560328Di2015UniqueSeparatorActivator.CreateInstance
15560328Di2015UniqueSeparatornew T()
15560473Di2015UniqueSeparator    public interface IAnimalDi2015NewLine    {Di2015NewLine        [Obsolete("Animals can't eat anymore", true)]Di2015NewLine        void Eat();Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Animal : IAnimalDi2015NewLine    {Di2015NewLine        [Obsolete("Animals can't eat anymore", true)]Di2015NewLine        public void Eat()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Hello");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15560546Di2015UniqueSeparator    var th = new Thread(() =>Di2015NewLine    {Di2015NewLine        state = 0;Di2015NewLine        br.Navigate(new Uri("http://en.wikipedia.org/wiki/Main_Page"));Di2015NewLine        Application.Run();Di2015NewLine    }Di2015NewLine
15560546Di2015UniqueSeparatorvoid browser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine{Di2015NewLine    var br = sender as WebBrowser;Di2015NewLine    if (state == 0) {Di2015NewLine       // You are now on the main page, set the searchInput and submit clickDi2015NewLine       //...Di2015NewLine       state = 1;Di2015NewLine    }Di2015NewLine    else if (state == 1) {Di2015NewLine       // You are now on the searched page, do whatever you need to doDi2015NewLine       //...Di2015NewLine       // And if you are done:Di2015NewLine       Application.ExitThread();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15560597Di2015UniqueSeparatorint c = rnd.Next(_grid.GetLength(1) - ship.Values.Length);
15560597Di2015UniqueSeparatorint r = rnd.Next(_grid.GetLength(0) - ship.Values.Length);
15560622Di2015UniqueSeparatorprotected void repeaterID_ItemDataBound(object sender, RepeaterItemEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)Di2015NewLine    {Di2015NewLine        ListView listView = e.Item.FindControl("listViewID") as ListView;Di2015NewLine        TextBox textBox = listView.FindControl("textBoxID") as TextBox;Di2015NewLineDi2015NewLine        textBox.Text = listView.StringYoureLookingFor;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15560622Di2015UniqueSeparatorOnItemDataBound
15560662Di2015UniqueSeparatorList<string> keys = new List<string>{"PRODUCTID","PRODUCTCODE"\\*ect*\\}Di2015NewLineDictionary<string,string> dict = new Dictionary<string,string>Di2015NewLinefor (int i = 0; i < keys.Count; i++)Di2015NewLine{Di2015NewLine    dict[keys[i]]=row[i];Di2015NewLine}Di2015NewLine
15560662Di2015UniqueSeparatorfor (int i = 0; i < keys.Count; i++)Di2015NewLine{Di2015NewLine this.GetType().InvokeMember(keys[i],Di2015NewLine     BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetProperty,Di2015NewLine     Type.DefaultBinder, obj, row[i]);Di2015NewLine}Di2015NewLine
15560707Di2015UniqueSeparatornew DocumentStoreDi2015NewLine{Di2015NewLine   Url = "http://your-server:8080",Di2015NewLine   DefaultDatabase = "your-db",Di2015NewLine   Credentials = new NetworkCredentials("foo", "bar");Di2015NewLine}Di2015NewLine
15560754Di2015UniqueSeparatordouble
15560754Di2015UniqueSeparatorclass SqlParamBinding {Di2015NewLine    string Name {get;set;}Di2015NewLine    object Value {get;set;} Di2015NewLine}Di2015NewLinevar lstExpResult = new List<SqlParamBinding> {Di2015NewLine    new SqlParamBinding { Name = "NormalCounter", Value = CountHrs.NormalCounter}Di2015NewLine,   new SqlParamBinding { Name = "SATCounter", Value = CountHrs.SATCounter}Di2015NewLine,   new SqlParamBinding { Name = "SUNCounter", Value = CountHrs.SUNCounter}Di2015NewLine};Di2015NewLineUpdateBooking(bookingSesid, lstExpResult);Di2015NewLine
15560754Di2015UniqueSeparatorlstExpResult
15560754Di2015UniqueSeparatorUpdateBooking
15560754Di2015UniqueSeparatorWHERE NormalCounter=@NormalCounter AND SATCounter=@SATCounter AND ...Di2015NewLine
15560754Di2015UniqueSeparator@NormalCounter
15560754Di2015UniqueSeparator@SATCounter
15560754Di2015UniqueSeparator@SUNCounter
15560754Di2015UniqueSeparatorlstExpResult
15560859Di2015UniqueSeparatorwhile
15560859Di2015UniqueSeparatorwhile (i2 < dataSet1.Tables.Count)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15560859Di2015UniqueSeparatorCount
15560859Di2015UniqueSeparatordataSet1.Tables.Add(table);
15560859Di2015UniqueSeparatordataSet1.WriteXml("MyData.xml")
15560862Di2015UniqueSeparatorvar ex = new Regex("href=\\"(.*)\\" style");Di2015NewLinevar tag = "<a class=\\"button_link\\" href=\\"https://rhystowey.com/account/confirm_email/2842S-B2EB5-136382?t=1&sig=b0dbd522380a21007d8c375iuc583f46a90365d9&iid=am-130280753913638201274485430&ac=1&uid=1284488216&nid=18+308\\" style=\\"border:none;color:#0084b4;text-decoration:none;color:#ffffff;font-size:13px;font-weight:bold;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;\\">Confirm your account now</a>";Di2015NewLineDi2015NewLinevar address = ex.Match(tag).Groups[1].ToString();Di2015NewLine
15560862Di2015UniqueSeparatorGroups[1]
15560862Di2015UniqueSeparatorHTMLDocument mdoc = (HTMLDocument)browser.Document;Di2015NewLinestring innerHtml = mdoc.body.outerText;Di2015NewLinevar ex = new Regex("href=\\"([^\\"\\"]+)\\"");Di2015NewLinevar address = ex.Match(innerHtml).Groups[1].ToString();Di2015NewLine
15560862Di2015UniqueSeparatorhref="..."
15560862Di2015UniqueSeparatorvar matches = (from Match match in ex.Matches(innerHtml) select match.Groups[1].Value).ToList();Di2015NewLine
15560862Di2015UniqueSeparatorList<string>
15560862Di2015UniqueSeparatorvar wantedMatches = matches.Where(m => m.StartsWith("https://rhystowey.com/account/confirm_email/"));Di2015NewLine
15560862Di2015UniqueSeparatorvar ex = new Regex("href=\\"(https://rhystowey\\\\.com/account/confirm_email/[^\\"\\"]+)\\"");Di2015NewLine
15560862Di2015UniqueSeparatorvar ex = new Regex("href=\\"(https://rhystowey\\\\.com/account/confirm_email/[^\\"\\"]+)\\"");Di2015NewLinevar matches = (from Match match in ex.Matches(innerHTML)Di2015NewLine               where match.Groups.Count >= 1Di2015NewLine               select match.Groups[1].Value).ToList();Di2015NewLinevar firstAddress = matches.FirstOrDefault();Di2015NewLine
15560862Di2015UniqueSeparatorfirstAddress
15560937Di2015UniqueSeparatorpublic void Showinlistbox()Di2015NewLine    {      Di2015NewLine        // Add a  listBox named  listBox1 Di2015NewLineDi2015NewLine        // Add ScoreDi2015NewLine        score++;Di2015NewLine        CallRandomQuestion();    Di2015NewLine        //if you want mutual-exclusion lock add lock (listBox1) Di2015NewLine        listBox1.Items.Add(Alphabet);Di2015NewLine     }Di2015NewLine
15560942Di2015UniqueSeparatorEnumerable.ToList<T>(this IEnumumerable<T> e)
15560942Di2015UniqueSeparatorIQueryable<T>
15560942Di2015UniqueSeparatorGetMyClasses
15560942Di2015UniqueSeparatorIQueryable<T>
15560942Di2015UniqueSeparatorIEnumerable<MyClass> GetMyClasses(int id) {Di2015NewLine    return GetQuery().Where(p => p.Id==id); // this always will work as IQueryable and handled by provider (in case of EF - the DB query will be performed)Di2015NewLine}Di2015NewLineDi2015NewLineIEnumerable<MyClass> MoreRestrictions(int id) {Di2015NewLine     return GetMyClasses(id)Di2015NewLine         .ToList(); // result list will be filtered by IdDi2015NewLine}Di2015NewLineDi2015NewLineIEnumerable<MyClass> MoreRestrictions(int id) {Di2015NewLine     return GetMyClasses(id)Di2015NewLine         .Where(x=>x.IsActive) // this where will be performed in memory on results filtered by Id.Di2015NewLine         .ToList(); Di2015NewLine}Di2015NewLine
15560942Di2015UniqueSeparatorToList
15560942Di2015UniqueSeparatorWhere
15560942Di2015UniqueSeparator//There is only one implementation of ToList()Di2015NewLinepublic List<T> ToList<T>(this IEnumerable<T> e) Di2015NewLine{Di2015NewLine    var list = new List<T>();Di2015NewLine    var enumerator = e.GetEnumerator();Di2015NewLine    while (enumerator.MoveNext())Di2015NewLine    {Di2015NewLine        var item = e.Current;Di2015NewLine        list.Add(item);Di2015NewLine    }Di2015NewLine    return list;Di2015NewLine}Di2015NewLineDi2015NewLine//Implementation for IEnumerableDi2015NewLinepublic IEnumerable<T> Where<T>(this IEnumerable<T> e, Predicate predicate) Di2015NewLine{Di2015NewLine    var enumerator = e.GetEnumerator();Di2015NewLine    while (enumerator.MoveNext())Di2015NewLine    {Di2015NewLine        var item = e.Current;Di2015NewLine        if (predicate(item))Di2015NewLine            yield return item;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine//Implementation for IQueryableDi2015NewLinepublic IQueryable<T> Where<T>(this IQueryable<T> e, Expression<Predicate> predicate) Di2015NewLine{Di2015NewLine    MethodBase method = ...; // create generic method of Queryable.Where()Di2015NewLine    return e.ProviderDi2015NewLine        .CreateQuery<T>(Expression.Call(null, method, e.Expression, Expression.Quote(predicate)));Di2015NewLine}Di2015NewLine
15560942Di2015UniqueSeparatorGetEnumerator
15560994Di2015UniqueSeparatorPost
15560994Di2015UniqueSeparatorPostComment
15560994Di2015UniqueSeparatorPost
15560994Di2015UniqueSeparatorJsonConvert.SerializeObject(myObject, Formatting.Indented, Di2015NewLine                            new JsonSerializerSettings { Di2015NewLine                                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore Di2015NewLine                            })Di2015NewLine
15561047Di2015UniqueSeparatorpublic void SomeHelper(this HtmlHelper,[AspMvcController] string controller, [AspMvcAction] string Action, [AspMvcView] string viewName)Di2015NewLine{Di2015NewLine}Di2015NewLine
15561052Di2015UniqueSeparatorstring cmd = string.Format(@" -u{0} -p{1} -h{2} -P{3} {4} < ""{5}""",Di2015NewLine    "Test", "Test2", "server", "1337", "db", "C:\\\\filename.sql");Di2015NewLineDi2015NewLineConsole.WriteLine(cmd);Di2015NewLineConsole.Read();Di2015NewLine
15561052Di2015UniqueSeparator-uTest -pTest2 -hserver -P1337 db < "C:\\filename.sql"
15561212Di2015UniqueSeparatorstring GetWarehousByGrade222(string grade, string paste)Di2015NewLine{Di2015NewLine  if (grade == "00" || grade == "01" || grade == "02" || grade == "03" || grade == "04") {Di2015NewLine    if (Regex.IsMatch(paste, "D..G..DG")) return "1GD";Di2015NewLine    if (Regex.IsMatch(paste, "D..G..DP")) return "1GD";Di2015NewLine    if (Regex.IsMatch(paste, "D..G..D.")) return "1GO";Di2015NewLine    // etc...Di2015NewLine  }Di2015NewLine  return null;Di2015NewLine}Di2015NewLine
15561307Di2015UniqueSeparatorDateTime
15561307Di2015UniqueSeparator?
15561307Di2015UniqueSeparator^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$Di2015NewLine
15561402Di2015UniqueSeparator.NET 2.0
15561402Di2015UniqueSeparatorSystem.dll
15561402Di2015UniqueSeparatorSystem.Net.Mail
15561402Di2015UniqueSeparatorusing (SmtpClient client = new SmtpClient("smtp-server.MyDomain.com"))Di2015NewLine{Di2015NewLine    client.UseDefaultCredentials = true;Di2015NewLineDi2015NewLine    using (MailMessage mail = new MailMessage())Di2015NewLine    {Di2015NewLine        mail.Subject = subject;Di2015NewLine        mail.Body = body;Di2015NewLineDi2015NewLine        mail.From = new MailAddress("MyEmail@MyDomain.com");Di2015NewLine        mail.To.Add("ToThisEmail@MyDomain.com");Di2015NewLineDi2015NewLine        client.Send(mail);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15561402Di2015UniqueSeparatorTarget framework
15561402Di2015UniqueSeparatorApplication
15561402Di2015UniqueSeparatorApp.config
15561402Di2015UniqueSeparator<?xml version="1.0"?>Di2015NewLine<configuration>Di2015NewLine    <startup> Di2015NewLine    <supportedRuntime version="v2.0.50727"/></startup>Di2015NewLine</configuration>Di2015NewLine
15561402Di2015UniqueSeparatorSystem.dll
15561402Di2015UniqueSeparatorAdd Reference
15561402Di2015UniqueSeparatorSystem
15561402Di2015UniqueSeparatorSystem.dll
15561402Di2015UniqueSeparatorAssemblies
15561402Di2015UniqueSeparatorFramework
15561402Di2015UniqueSeparatorOK
15561532Di2015UniqueSeparatorvar wordCount = 0;Di2015NewLinevar line = sr.ReadLine();Di2015NewLinewhile( line != null ) {Di2015NewLine  for( var i = 1; i < line.Length; i++ ) {Di2015NewLine    // Count wordsDi2015NewLine  }Di2015NewLine  line = sr.ReadLine();Di2015NewLine}Di2015NewLine
15561542Di2015UniqueSeparatorSystem.Windows.Forms.Timer
15561542Di2015UniqueSeparator+---------------------------------------+----------------------+---------------------+------------------+Di2015NewLine|                                       | System.Windows.Forms |    System.Timers    | System.Threading |Di2015NewLine+---------------------------------------+----------------------+---------------------+------------------+Di2015NewLine| Timer event runs on what thread?      | UI thread            | UI or worker thread | Worker thread    |Di2015NewLine| Instances are thread safe?            | No                   | Yes                 | No               |Di2015NewLine| Familiar/intuitive object model?      | Yes                  | Yes                 | No               |Di2015NewLine| Requires Windows Forms?               | Yes                  | No                  | No               |Di2015NewLine| Metronome-quality beat?               | No                   | Yes*                | Yes*             |Di2015NewLine| Timer event supports state object?    | No                   | No                  | Yes              |Di2015NewLine| Initial timer event can be scheduled? | No                   | No                  | Yes              |Di2015NewLine| Class supports inheritance?           | Yes                  | Yes                 | No               |Di2015NewLine+---------------------------------------+----------------------+---------------------+------------------+Di2015NewLineDi2015NewLine* Depending on the availability of system resources (for example, worker threads)Di2015NewLine
15561599Di2015UniqueSeparatorImageToStream
15561599Di2015UniqueSeparatorMemoryStream
15561599Di2015UniqueSeparatorprivate string BitmapToByte(Image image)Di2015NewLine{Di2015NewLine    MemoryStream photoStream = ImageToStream(image);Di2015NewLineDi2015NewLine    byte[] bytearray = photoStream.ToArray();Di2015NewLine    string str = Convert.ToBase64String(bytearray);Di2015NewLine    return str;Di2015NewLine}Di2015NewLine
15561612Di2015UniqueSeparator[DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
15561612Di2015UniqueSeparatorDebuggerTypeProxyAttribute
15561612Di2015UniqueSeparatorList<T>
15561612Di2015UniqueSeparatorCollectionDebuggerView<T>
15561744Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLineDi2015NewLine        int i = 1;Di2015NewLineDi2015NewLine        foo(i);Di2015NewLine        Console.Write(i); //i=1;Di2015NewLineDi2015NewLine        Reffoo(ref i);Di2015NewLine        Console.Write(i); //i=2;Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Reffoo(ref int i)Di2015NewLine    {Di2015NewLine        i++;Di2015NewLine    }Di2015NewLineDi2015NewLine    static void foo(int i)Di2015NewLine    {Di2015NewLine        i++;Di2015NewLine    }Di2015NewLine
15561776Di2015UniqueSeparatorif (!Page.IsPostBack)Di2015NewLine{Di2015NewLine    using (SqlConnection conn = new SqlConnection("myconnectionString"))Di2015NewLine    {Di2015NewLine        conn.Open();Di2015NewLine        using (SqlCommand cmmnd = new SqlCommand("", conn))Di2015NewLine        {Di2015NewLine            cmmnd.CommandText = "SELECT * FROM addsetting;";Di2015NewLine            SqlDataReader rdr = cmmnd.ExecuteReader();Di2015NewLineDi2015NewLine            while (rdr.Read())Di2015NewLine            {Di2015NewLine                count++;Di2015NewLine                param = Convert.ToString(rdr["rowno"]);Di2015NewLine                TextBox1.Text = Convert.ToString(rdr["tostudent"]);Di2015NewLine                TextBox2.Text = Convert.ToString(rdr["tofaculty"]);Di2015NewLine                TextBox3.Text = Convert.ToString(rdr["studentday"]);Di2015NewLine                TextBox4.Text = Convert.ToString(rdr["facultyday"]);Di2015NewLine                TextBox5.Text = Convert.ToString(rdr["firstweek"]);Di2015NewLine                TextBox6.Text = Convert.ToString(rdr["secondweek"]);Di2015NewLine                TextBox7.Text = Convert.ToString(rdr["thirdweek"]);Di2015NewLine            }Di2015NewLineDi2015NewLine            rdr.Close();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15561837Di2015UniqueSeparator((HiddenField)this.Parent.FindControl("HiddenFieldPid"))Di2015NewLine                         .Value = ListBox_JobPositions.SelectedValue;Di2015NewLine
15561908Di2015UniqueSeparatora
15561908Di2015UniqueSeparatorselectedID
15561908Di2015UniqueSeparator(from a in allID where selectedID.Contains(a) select a).ToList()Di2015NewLine
15561908Di2015UniqueSeparatora
15561908Di2015UniqueSeparatorselectedID
15561908Di2015UniqueSeparator(from a in allIDDi2015NewLine where selectedID.Any(s => a.Contains(s))Di2015NewLine select a).ToList()Di2015NewLine
15561908Di2015UniqueSeparator{ "a1", "a3", "a5" }
15561922Di2015UniqueSeparatorFoo
15561922Di2015UniqueSeparatorvoid Foo(IList<IShape> c)Di2015NewLine{Di2015NewLine    c.Add(new Square());Di2015NewLine}Di2015NewLine
15561922Di2015UniqueSeparatorList<Circle>
15561922Di2015UniqueSeparatorFoo
15561922Di2015UniqueSeparatorSquare
15561922Di2015UniqueSeparatorIList<T>
15561922Di2015UniqueSeparatorIList<Circle>
15561922Di2015UniqueSeparatorIList<IShape>
15561922Di2015UniqueSeparatorIEnumerable<IShape>
15561922Di2015UniqueSeparatorFoo
15561922Di2015UniqueSeparatorIEnumerable<T>
15561922Di2015UniqueSeparatorIEnumerable<Circle>
15561922Di2015UniqueSeparatorIEnumerable<IShape>
15561922Di2015UniqueSeparatorvoid Bar()Di2015NewLine{Di2015NewLine    // legal in C#:Di2015NewLine    object[] o = new string[10];Di2015NewLine    // fails with ArrayTypeMismatchException: can't store Int in a String[]Di2015NewLine    o[0] = 10;Di2015NewLine}Di2015NewLine
15562005Di2015UniqueSeparatorpublic static byte[] ROL_ByteArray(byte[] arr, int nShift)Di2015NewLine{Di2015NewLine    //Performs bitwise circular shift of 'arr' by 'nShift' bits to the leftDi2015NewLine    //RETURN:Di2015NewLine    //      = ResultDi2015NewLine    byte[] resArr = new byte[arr.Length];Di2015NewLineDi2015NewLine    if(arr.Length > 0)Di2015NewLine    {Di2015NewLine        int nByteShift = nShift / (sizeof(byte) * 8);   //Adjusted after @dasblinkenlight's correctionDi2015NewLine        int nBitShift = nShift % (sizeof(byte) * 8);Di2015NewLineDi2015NewLine        if (nByteShift >= arr.Length)Di2015NewLine            nByteShift %= arr.Length;Di2015NewLineDi2015NewLine        int s = arr.Length - 1;Di2015NewLine        int d = s - nByteShift;Di2015NewLineDi2015NewLine        for (int nCnt = 0; nCnt < arr.Length; nCnt++, d--, s--)Di2015NewLine        {Di2015NewLine            while (d < 0)Di2015NewLine                d += arr.Length;Di2015NewLine            while (s < 0)Di2015NewLine                s += arr.Length;Di2015NewLineDi2015NewLine            byte byteS = arr[s];Di2015NewLineDi2015NewLine            resArr[d] |= (byte)(byteS << nBitShift);Di2015NewLine            resArr[d > 0 ? d - 1 : resArr.Length - 1] |= (byte)(byteS >> (sizeof(byte) * 8 - nBitShift));Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return resArr;Di2015NewLine}Di2015NewLine
15562005Di2015UniqueSeparatorbyte[] arr = new byte[] {Di2015NewLine    Convert.ToByte("11001110", 2),Di2015NewLine    Convert.ToByte("01000100", 2),Di2015NewLine    Convert.ToByte("10100001", 2),Di2015NewLine    };Di2015NewLineDi2015NewLinebyte[] arr2 = Auth.ROL_ByteArray(arr, 1);Di2015NewLineDi2015NewLinestring sss = "";Di2015NewLinefor (int i = 0; i < arr2.Length; i++)Di2015NewLine    sss += Convert.ToString(arr2[i], 2) + ", ";Di2015NewLineDi2015NewLineDebug.WriteLine(sss);Di2015NewLine
15562041Di2015UniqueSeparatorvar config = new HttpSelfHostConfiguration(baseAddress);Di2015NewLineconfig.Services.Replace(typeof(IHttpActionSelector), new MyActionSelector());Di2015NewLine
15562169Di2015UniqueSeparatorGC.KeepAlive(calibrationValidator)
15562169Di2015UniqueSeparatorExecute()
15562198Di2015UniqueSeparatorOdbcSessionStateStore
15562198Di2015UniqueSeparatorSessionStateStoreProviderBase
15562198Di2015UniqueSeparatorCreateNewStoreData
15562198Di2015UniqueSeparatorpublic override SessionStateStoreData CreateNewStoreData(Di2015NewLine      HttpContext context,Di2015NewLine      double timeout)Di2015NewLine
15562198Di2015UniqueSeparatorpublic override SessionStateStoreData CreateNewStoreData(Di2015NewLine    HttpContext context,Di2015NewLine    int timeoutDi2015NewLine)Di2015NewLine
15562198Di2015UniqueSeparatordouble timeout
15562198Di2015UniqueSeparatorint timeout
15562314Di2015UniqueSeparatorXmlDocument doc = new XmlDocument();Di2015NewLinedoc.LoadXml("<book genre='novel' ISBN='1-861001-57-5'>" +Di2015NewLine           "<title>Pride And Prejudice</title>" +Di2015NewLine           "</book>");Di2015NewLineDi2015NewLinestring xPath = "/book/title";Di2015NewLineXmlNode node = doc.SelectSingleNode(xPath);Di2015NewLinenode.InnerText = "new title";Di2015NewLineConsole.WriteLine(doc.OuterXml); //it's changed  Di2015NewLine
15562522Di2015UniqueSeparatorSELECT Date, Name, ID, SUM(Quantity) as QuantityDi2015NewLineFrom EmpTableDi2015NewLineGROUP BY Date, Name, IDDi2015NewLineORDER BY Date ASCDi2015NewLine
15562674Di2015UniqueSeparatorpublic static ICollection<T> Sort<T>(ICollection<T> lines, int columns)Di2015NewLine{Di2015NewLine    var rows = lines.Count/columns;Di2015NewLine    if (rows == 0)Di2015NewLine    {Di2015NewLine        return lines;Di2015NewLine    }Di2015NewLine    return lines.Select((line, i) => new {line, i})Di2015NewLine                .OrderBy(item => item.i < columns*rows ? item.i%rows : rows)Di2015NewLine                .Select(item => item.line)Di2015NewLine                .ToList();Di2015NewLine}Di2015NewLine
15562674Di2015UniqueSeparatorpublic static IEnumerable<T> Sort<T>(IList<T> lines, int columns)Di2015NewLine{Di2015NewLine    var rows = lines.Count/columns;Di2015NewLine    for (var i = 0; i < lines.Count; i++)Di2015NewLine    {Di2015NewLine        var index = rows > 0 && i < columns*rowsDi2015NewLine            ? (i%columns)*rows + i/columnsDi2015NewLine            : i;Di2015NewLine        yield return lines[index];Di2015NewLine    }Di2015NewLine}Di2015NewLine
15562789Di2015UniqueSeparator<Grid Name="Grid1">Di2015NewLine    <Image Tag="Image1" Source="1.png"/>Di2015NewLine    <Image Tag="Image2" Source="2.png"/>Di2015NewLine    <!-- more images -->Di2015NewLine</Grid>Di2015NewLine
15562789Di2015UniqueSeparatorvoid MouseDown(object sender, MouseButtonEventArgs args)Di2015NewLine{Di2015NewLine    foreach (var img in ((Panel)sender).Children.OfType<Image>())Di2015NewLine    {Di2015NewLine        var w = new WriteableBitmap(img, null);Di2015NewLine        var p = args.GetPosition(img);Di2015NewLine        if (w.Pixels[w.PixelWidth * (int)p.Y + (int)p.X] != 0)Di2015NewLine        {Di2015NewLine            MessageBox.Show(string.Format("You clicked {0}!", img.Tag));Di2015NewLine            args.Handled = true;Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15562789Di2015UniqueSeparatorGrid1.AddHandler(UIElement.MouseLeftButtonDownEvent,Di2015NewLine    new MouseButtonEventHandler(MouseDown), false);Di2015NewLine
15562789Di2015UniqueSeparatorusing System.Linq;Di2015NewLineusing System.Windows.Media.Imaging;Di2015NewLine
15562970Di2015UniqueSeparatorusing (SQLiteTransaction SQLiteTrans = connection.BeginTransaction())Di2015NewLine               {Di2015NewLine                   using (SQLiteCommand cmd = connection.CreateCommand())Di2015NewLine                   {Di2015NewLine                     cmd.CommandText = ("update contents set content_1 ='" + paraNode + "' where content_id ='" + Count + "'");Di2015NewLineDi2015NewLineDi2015NewLine                       SQLiteParameter Field1 = cmd.CreateParameter();Di2015NewLine                       SQLiteParameter Field2 = cmd.CreateParameter();Di2015NewLine                       cmd.Parameters.Add(Field1);Di2015NewLine                       cmd.Parameters.Add(Field2);Di2015NewLine                       cmd.ExecuteNonQuery();Di2015NewLine                   }Di2015NewLine                   SQLiteTrans.Commit();Di2015NewLine               }Di2015NewLine
15563298Di2015UniqueSeparatorDataType
15563298Di2015UniqueSeparatorCollection Type
15563298Di2015UniqueSeparatorSystem.Array
15563298Di2015UniqueSeparatorSystem.Collection.Generic.List
15563298Di2015UniqueSeparatorToList
15563298Di2015UniqueSeparatorList<StockData> list = new List<StockData>();Di2015NewLinelist=(myProxy.orderStockData(txtinput1.Text, txtinput2.Text, txtinput3.Text)).ToList();Di2015NewLine
15563357Di2015UniqueSeparatordoc.Save("C:\\\\Sample.xml");Di2015NewLine
15563463Di2015UniqueSeparator    BindingSource source=new BindingSource();Di2015NewLine    source.DataSource=serverList;Di2015NewLine    listBox1.DataSource = source;Di2015NewLine
15563463Di2015UniqueSeparatorlistBox1.DataBind()
15563506Di2015UniqueSeparatorTask
15563506Di2015UniqueSeparatorToString()
15563506Di2015UniqueSeparatorContentResult
15563506Di2015UniqueSeparatorTask
15563506Di2015UniqueSeparatorAsyncController
15563506Di2015UniqueSeparatorControllers
15563506Di2015UniqueSeparatorTask
15563506Di2015UniqueSeparatorAsyncController
15563544Di2015UniqueSeparator var strUser = up.GetProfileValueCollection(PropertyConstants.Responsibility);Di2015NewLine
15564181Di2015UniqueSeparatorSystem.Xml.Serialization.TypeScope.GetEnumeratorElementType(Type type, TypeFlags& flags) +1354352Di2015NewLineSystem.Xml.Serialization.TypeScope.ImportTypeDesc(Type type, MemberInfo memberInfo, Boolean directReference) +5553239Di2015NewLine
15564181Di2015UniqueSeparatorSystem.Xml.Serialization
15564181Di2015UniqueSeparator[NonSerialize]
15564181Di2015UniqueSeparator[XmlIgnore]Di2015NewLinepublic XmlNamespaceManager xmlNS;Di2015NewLine
15564181Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class SiteDi2015NewLine{Di2015NewLine    public string X { get; set; }Di2015NewLineDi2015NewLine    [XmlIgnore]Di2015NewLine    public XmlNamespaceManager xmlNS;Di2015NewLine}Di2015NewLine
15564181Di2015UniqueSeparator    [WebMethod]Di2015NewLine    public Site HelloWorld()Di2015NewLine    {Di2015NewLine        Site toReturn = new Site();Di2015NewLine        toReturn.X = "hello world";Di2015NewLineDi2015NewLine        return toReturn;Di2015NewLine    }Di2015NewLine
15564188Di2015UniqueSeparator[DATE]
15564439Di2015UniqueSeparatorCount
15564439Di2015UniqueSeparatorvar indexedValues = values.Select((value, index) => new { value, index });Di2015NewLine
15564439Di2015UniqueSeparator var adults = people.Where(person => person.Age > 18);Di2015NewLine
15564439Di2015UniqueSeparator var adults = from person in peopleDi2015NewLine              where person.Age > 18Di2015NewLine              select person;Di2015NewLine
15564439Di2015UniqueSeparator var names = people.Where(person => person.Age > 18)Di2015NewLine                   .Select(person => person.Name)Di2015NewLine                   .ToList();Di2015NewLine
15564439Di2015UniqueSeparator var names = (from person in peopleDi2015NewLine              where person.Age > 18Di2015NewLine              select person.Name).ToList();Di2015NewLine
15564439Di2015UniqueSeparatorSelectMany
15564439Di2015UniqueSeparatorlet
15564726Di2015UniqueSeparatorvar listView1 = new ListView();Di2015NewLineDataTable table = new DataTable();Di2015NewLineforeach (ListViewItem item in listView1.Items)Di2015NewLine{Di2015NewLine    table.Columns.Add(item.ToString());Di2015NewLine    foreach (var it in item.SubItems)Di2015NewLine         table.Rows.Add(it.ToString());Di2015NewLine }Di2015NewLine
15564726Di2015UniqueSeparatorpublic void CreateCSVFile(DataTable dt, string strFilePath)Di2015NewLine{Di2015NewLine    StreamWriter sw = new StreamWriter(strFilePath, false);Di2015NewLineDi2015NewLine    int iColCount = dt.Columns.Count;Di2015NewLine    for (int i = 0; i < iColCount; i++)Di2015NewLine    {Di2015NewLine        sw.Write(dt.Columns[i]);Di2015NewLine        if (i < iColCount - 1)Di2015NewLine        {Di2015NewLine            sw.Write(",");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    sw.Write(sw.NewLine);Di2015NewLineDi2015NewLine    foreach (DataRow dr in dt.Rows)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < iColCount; i++)Di2015NewLine        {Di2015NewLine            if (!Convert.IsDBNull(dr[i]))Di2015NewLine            {Di2015NewLine                sw.Write(dr[i].ToString());Di2015NewLine            }Di2015NewLine            if (i < iColCount - 1)Di2015NewLine            {Di2015NewLine                sw.Write(",");Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Write(sw.NewLine);Di2015NewLine    }Di2015NewLine    sw.Close();Di2015NewLine}Di2015NewLine
15564730Di2015UniqueSeparator<Triggers>Di2015NewLine<asp:AsyncPostBackTrigger />Di2015NewLine
15564958Di2015UniqueSeparatormyString.Substring(str.Length-3)Di2015NewLine
15564970Di2015UniqueSeparatorExpressionVisitor
15564970Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Linq.Expressions;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var data = new[] { new Foo { A = "x1", B = "y1", C = "y1" }, new Foo { A = "y2", B = "y2", C = "y2" },Di2015NewLine            new Foo { A = "y3", B = "y3", C = "x3" } }.AsQueryable();Di2015NewLineDi2015NewLine        var result = data.Search("x", x => x.A, x => x.B, x => x.C);Di2015NewLineDi2015NewLine        foreach (var row in result)Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0}, {1}, {2}", row.A, row.B, row.C);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    class FooDi2015NewLine    {Di2015NewLine        public string A { get; set; }Di2015NewLine        public string B { get; set; }Di2015NewLine        public string C { get; set; }Di2015NewLine    }Di2015NewLine    public class SwapVisitor : ExpressionVisitorDi2015NewLine    {Di2015NewLine        private readonly Expression from, to;Di2015NewLine        public SwapVisitor(Expression from, Expression to)Di2015NewLine        {Di2015NewLine            this.from = from;Di2015NewLine            this.to = to;Di2015NewLine        }Di2015NewLine        public override Expression Visit(Expression node)Di2015NewLine        {Di2015NewLine            return node == from ? to : base.Visit(node);Di2015NewLine        }Di2015NewLine        public static Expression Swap(Expression body, Expression from, Expression to)Di2015NewLine        {Di2015NewLine            return new SwapVisitor(from, to).Visit(body);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public static IQueryable<TSource> Search<TSource>(this IQueryable<TSource> source, string searchTerm, params Expression<Func<TSource, string>>[] stringProperties)Di2015NewLine    {Di2015NewLine        if (String.IsNullOrEmpty(searchTerm))Di2015NewLine        {Di2015NewLine            return source;Di2015NewLine        }Di2015NewLine        if (stringProperties.Length == 0) return source.Where(x => false);Di2015NewLineDi2015NewLineDi2015NewLine        // The lamda I would like to reproduce:Di2015NewLine        // source.Where(x => x.[property1].Contains(searchTerm)Di2015NewLine        //                || x.[property2].Contains(searchTerm)Di2015NewLine        //                || x.[property3].Contains(searchTerm)...)Di2015NewLineDi2015NewLine        //Create expression to represent x.[property1].Contains(searchTerm)Di2015NewLine        var searchTermExpression = Expression.Constant(searchTerm);Di2015NewLineDi2015NewLineDi2015NewLine        var param = stringProperties[0].Parameters.Single();Di2015NewLine        Expression orExpression = null;Di2015NewLineDi2015NewLine        //Build a contains expression for each propertyDi2015NewLine        foreach (var stringProperty in stringProperties)Di2015NewLine        {Di2015NewLine            // re-write the property using the param we want to keepDi2015NewLine            var body = SwapVisitor.Swap(stringProperty.Body, stringProperty.Parameters.Single(), param);Di2015NewLineDi2015NewLine            var checkContainsExpression = Expression.Call(Di2015NewLine                body, typeof(string).GetMethod("Contains"), searchTermExpression);Di2015NewLineDi2015NewLine            if (orExpression == null)Di2015NewLine            {Di2015NewLine                orExpression = checkContainsExpression;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {   // composeDi2015NewLine                orExpression = Expression.OrElse(orExpression, checkContainsExpression);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        var lambda = Expression.Lambda<Func<TSource, bool>>(orExpression, param);Di2015NewLine        return source.Where(lambda);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15565073Di2015UniqueSeparatorstring extension = Path.GetExtension(@"C:\\mydir\\file.exe");Di2015NewLine
15565073Di2015UniqueSeparator.exe
15565223Di2015UniqueSeparatorINSERT INTO [Table] ([Name], [Photo]) VALUES (@Name, @Photo);Di2015NewLineSELECT  @@IDENTITYDi2015NewLine
15565223Di2015UniqueSeparatorprivate Nullable<decimal> row1;Di2015NewLineprivate Nullable<decimal> row2;Di2015NewLineDi2015NewLinerow1 = adapter.InsertAndReturtIdentificator("Name1", File.ReadAllBytes(@"Images\\Photo1.jpg")) as Nullable<decimal>;Di2015NewLinerow2 = adapter.InsertAndReturtIdentificator("Name2", File.ReadAllBytes(@"Images\\Photo2.jpg")) as Nullable<decimal>;Di2015NewLineDi2015NewLine... performing test ...Di2015NewLineDi2015NewLineadapter.Delete(Decimal.ToInt32(row1.Value));Di2015NewLineadapter.Delete(Decimal.ToInt32(row2.Value));Di2015NewLine
15565225Di2015UniqueSeparator    private static string Get_now(int minus)Di2015NewLine    {Di2015NewLine        return DateTime.Now.AddMinutes(-minus)Di2015NewLine            .ToString("HH:mm:ss");Di2015NewLine    }Di2015NewLine
15565297Di2015UniqueSeparator$('.input-validation-error').each(function () {Di2015NewLine            this.focus();Di2015NewLine        });Di2015NewLineDi2015NewLine       var inp = $('.input-validation-error:first').get(0);Di2015NewLineDi2015NewLine        if (inp) {Di2015NewLine            inp.focus();Di2015NewLine        }Di2015NewLine
15565301Di2015UniqueSeparatorprivate void btnRefresh_Click_1(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var sb = new StringBuilder("select Party_Code,TradeNo,Scrip_Code,Inst_Type,Expirydate,Strike_price,Option_type,TerminalId,Branch_Id,Buy_Sell,Trade_Qty,Market_Rate,Sauda_Date,OrderNo from tradeFile");Di2015NewLine    if (!string.IsNullOrEmpty(txtSearchPartyCode.Text))Di2015NewLine        sb.AppendFormat(" where Party_Code='{0}'", txtSearchPartyCode.Text);Di2015NewLine    if (!string.IsNullOrEmpty(txtSearchBranchId.Text))Di2015NewLine        sb.AppendFormat(" where Branch_Id='{0}'", txtSearchBrandId.Text);Di2015NewLine    // ...and so on...Di2015NewLine    sb.Append(";");Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        da = new SqlDataAdapter(sb.ToString(), con);Di2015NewLine        DataSet ds = new DataSet();Di2015NewLine        da.Fill(ds);Di2015NewLine        gvTradeFile.DataSource = ds.Tables[0];Di2015NewLine    }Di2015NewLine    catch(Exception ex)Di2015NewLine    {Di2015NewLine       MessageBox.Show(ex.Message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15565389Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential, Di2015NewLine    CharSet=CharSet.Unicode)]Di2015NewLine
15565690Di2015UniqueSeparatorvar example = new Example();Di2015NewLine((INotifyPropertyChanged)example).PropertyChanged += OnAChanged;Di2015NewLine((IExample)example).A = "new string";Di2015NewLine
15565948Di2015UniqueSeparatorvar socket = new WebSocket("ws://localhost:8181/websession", ['chat','superchat']);Di2015NewLineDi2015NewLinesocket.onopen = function()Di2015NewLine{Di2015NewLine    $("div#messages").append("<p class=\\"event\\">Socket is connected.</p>");Di2015NewLine    socket.send("Thanks!");Di2015NewLine};Di2015NewLine
15565948Di2015UniqueSeparatorwebsession
15565948Di2015UniqueSeparator['chat','superchat']
15565948Di2015UniqueSeparatorusing (TcpClient client = listener.AcceptTcpClient())Di2015NewLineusing (NetworkStream stream = client.GetStream())Di2015NewLineusing (StreamReader sr = new StreamReader(stream, Encoding.UTF8))Di2015NewLineusing (StreamWriter sw = new StreamWriter(stream, Encoding.UTF8))Di2015NewLine{Di2015NewLine    Dictionary<string, string> headers = new Dictionary<string, string>();Di2015NewLine    string line = string.Empty;Di2015NewLine    while ((line = sr.ReadLine()) != string.Empty)Di2015NewLine    {Di2015NewLine        string[] tokens = line.Split(new char[] { ':' }, 2);Di2015NewLine        if (!string.IsNullOrWhiteSpace(line) && tokens.Length > 1)Di2015NewLine        {Di2015NewLine            headers[tokens[0]] = tokens[1].Trim();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    string responseKey = "";Di2015NewLine    string key = string.Concat(headers["Sec-WebSocket-Key"], "258EAFA5-E914-47DA-95CA-C5AB0DC85B11");Di2015NewLine    using (SHA1 sha1 = SHA1.Create())Di2015NewLine    {Di2015NewLine        byte[] hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(key));Di2015NewLine        responseKey = Convert.ToBase64String(hash);Di2015NewLine    }Di2015NewLineDi2015NewLine    sw.WriteLine("HTTP/1.1 101 Switching Protocols");Di2015NewLine    sw.WriteLine("Upgrade: websocket");Di2015NewLine    sw.WriteLine("Connection: Upgrade");Di2015NewLine    sw.WriteLine("Sec-WebSocket-Accept: " + responseKey);Di2015NewLine    sw.WriteLine("Sec-WebSocket-Protocol: chat");Di2015NewLine    sw.WriteLine("");Di2015NewLine    sw.Flush();Di2015NewLine}Di2015NewLine
15566039Di2015UniqueSeparatorint
15566039Di2015UniqueSeparatorSystem.Int32
15566039Di2015UniqueSeparatorint i = 1;Di2015NewLineint j = i;Di2015NewLine
15566039Di2015UniqueSeparatorint i = 1;Di2015NewLineobject j = i;Di2015NewLine
15566039Di2015UniqueSeparatorint i = 1;Di2015NewLineIComparable j = i;Di2015NewLine
15566078Di2015UniqueSeparatorif(collectionC.Intersect(collectionA).Any() && collectionC.Intersect(collectionB).Any())Di2015NewLine
15566078Di2015UniqueSeparator.Any() Di2015NewLine
15566078Di2015UniqueSeparatorCount() > 0Di2015NewLine
15566080Di2015UniqueSeparator        <Grid Grid.Row="1">Di2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition Width="100*" />Di2015NewLine            <ColumnDefinition Width="100*" />Di2015NewLine            <ColumnDefinition Width="100*" />Di2015NewLine            <ColumnDefinition Width="100*" />Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="100*" />Di2015NewLine            <RowDefinition Height="100*" />Di2015NewLine            <RowDefinition Height="100*" />Di2015NewLine        </Grid.RowDefinitions>Di2015NewLineDi2015NewLineDi2015NewLine        <Grid Grid.Row="0" Grid.Column="0" >Di2015NewLine            <Grid.ColumnDefinitions>Di2015NewLine                <ColumnDefinition />Di2015NewLine                <ColumnDefinition />Di2015NewLine                <ColumnDefinition />Di2015NewLine            </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine            <StackPanel>Di2015NewLine            </StackPanel>Di2015NewLineDi2015NewLine        </Grid>Di2015NewLine    </Grid>Di2015NewLine
15566184Di2015UniqueSeparatorthis.imgBackground.Source = "filename.jpg";Di2015NewLine
15566184Di2015UniqueSeparatorthis.imgBackground.Source = @"C:\\MyFolder\\MyProject\\filename.jpg";Di2015NewLine
15566184Di2015UniqueSeparatorSource
15566184Di2015UniqueSeparatorSystem.Windows.Media.ImageSource
15566184Di2015UniqueSeparatorBitmapImage bi3 = new BitmapImage();Di2015NewLinebi3.BeginInit();Di2015NewLinebi3.UriSource = new Uri("filename.jpg", UriKind.Relative);Di2015NewLinebi3.EndInit();Di2015NewLinethis.imgBackground.Source = bi3;Di2015NewLine
15566208Di2015UniqueSeparator<div class="description">Di2015NewLine    Imagine some really long description here. It is really long. Imagine some really long description here. It is really long. Imagine some really long description here. It is really long. Imagine some really long description here. It is really long. Imagine some really long description here. It is really long. Di2015NewLine</div>Di2015NewLine
15566208Di2015UniqueSeparator.description {Di2015NewLine    height: 2.5em;Di2015NewLine    overflow: hidden;Di2015NewLine    text-overflow: ellipsis;Di2015NewLine}Di2015NewLineDi2015NewLine.full {Di2015NewLine    height: auto;Di2015NewLine}Di2015NewLine
15566208Di2015UniqueSeparator$('.description').click( function () {Di2015NewLine   $(this).toggleClass('full'); Di2015NewLine});Di2015NewLine
15566226Di2015UniqueSeparator(?m)^\\d+(?:\\.\\d+)*[ \\t]+\\S.*$Di2015NewLine
15566266Di2015UniqueSeparatorToList()
15566266Di2015UniqueSeparatorExpression<Func<T,bool>>
15566266Di2015UniqueSeparatorpublic virtual IList<T> Get(Expression<Func<T, bool>> predicate = null)Di2015NewLine    {Di2015NewLine        // Open NHibernate SessionDi2015NewLine        using (var session = NHibernateHelper.OpenSession())Di2015NewLine            return (predicate != nullDi2015NewLine                       ? session.Query<T>().Where(predicate)Di2015NewLine                       : session.Query<T>()).ToList();Di2015NewLineDi2015NewLine    }Di2015NewLine
15566266Di2015UniqueSeparatorWhere(Func<T,bool>>)
15566266Di2015UniqueSeparatorWhere(Expression<Func<T,bool>>)
15566366Di2015UniqueSeparatorstatic void Main(string[] args) {Di2015NewLine    string connectionString = "Data Source=H....; Di2015NewLine    Initial Catalog=LANDesk;User ID=Mainstc; Password=xxxxxxxx"; Di2015NewLine    // removed Persist Security Info=True; Di2015NewLineDi2015NewLineDi2015NewLine    using(SqlConnection con = new SqlConnection(connectionString))Di2015NewLine    {Di2015NewLine      if (con.State==ConnectionState.Closed)Di2015NewLine      {                      Di2015NewLine          con.Open();   Di2015NewLine      }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
15566366Di2015UniqueSeparatorUsing Statement
15566414Di2015UniqueSeparatorDISTINCT
15566414Di2015UniqueSeparatorSELECT DISTINCT id FROM dDi2015NewLine
15566414Di2015UniqueSeparatorid
15566414Di2015UniqueSeparatorNOT EXISTS
15566414Di2015UniqueSeparatorSELECT DISTINCT id FROM d WHERE NOT EXISTS(SELECT 1 FROM u WHERE u.id = d.id)Di2015NewLine
15566466Di2015UniqueSeparator    protected void Register<T>(string name, Func<IThing<T>> resolver) where T : IModel<T>Di2015NewLine    {Di2015NewLine        Func<object> wrapper =  () => resolver();Di2015NewLine        _registrations.Add(name, wrapper);Di2015NewLine    }Di2015NewLine
15566471Di2015UniqueSeparatorSoleColorService.All()Di2015NewLine                .GroupBy(t => t.Sole.Code)Di2015NewLine                .Select(g => g.First())Di2015NewLine                .Select(x => newDi2015NewLine                {Di2015NewLine                    SoleCode = x.Sole.Code,Di2015NewLine                    SoleName = x.Sole.Name),Di2015NewLine                    SoleId   = x.SoleID)Di2015NewLine                }); Di2015NewLine
15566471Di2015UniqueSeparatorpublic class SoleModelDi2015NewLine{Di2015NewLine    private readonly string _code;Di2015NewLine    private readonly string _name;Di2015NewLine    private readonly int _id;Di2015NewLineDi2015NewLine    public SoleModel(string code, string name, int id)Di2015NewLine    {Di2015NewLine        _code = code;Di2015NewLine        _name = name;Di2015NewLine        _id = id;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Code { get { return _code; } }Di2015NewLine    public string Name { get { return _name; } }Di2015NewLine    public int Id { get { return _id; } }Di2015NewLine}Di2015NewLineDi2015NewLineSoleColorService.All()Di2015NewLine                .GroupBy(t => t.Sole.Code)Di2015NewLine                .Select(g => g.First())Di2015NewLine                .Select(x => new SoleModel(x.Sole.Code, x.Sole.Name x.SoleID)); Di2015NewLine
15566471Di2015UniqueSeparatorvar result = SoleColorService.All()Di2015NewLine                             .GroupBy(t => t.Sole.Code)Di2015NewLine                             .Select(g => g.First())Di2015NewLine                             .Select(x => newDi2015NewLine                             {Di2015NewLine                                 SoleCode = x.Sole.Code,Di2015NewLine                                 SoleName = x.Sole.Name),Di2015NewLine                                 SoleId   = x.SoleID)Di2015NewLine                             }); Di2015NewLinesomeControl.DataSource = result;Di2015NewLine
15566624Di2015UniqueSeparatorprivate double calcCursorGraphX(int clientX)Di2015NewLine{Di2015NewLine    var xAxis = _chart.ChartAreas[CHART_INDEX].AxisX;Di2015NewLine    int xRight = (int) xAxis.ValueToPixelPosition(xAxis.Maximum) - 1;Di2015NewLine    int xLeft = (int) xAxis.ValueToPixelPosition(xAxis.Minimum);Di2015NewLineDi2015NewLine    if (clientX > xRight)Di2015NewLine    {Di2015NewLine        return xAxis.Maximum;Di2015NewLine    }Di2015NewLine    else if (clientX < xLeft)Di2015NewLine    {Di2015NewLine        return xAxis.Minimum;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return xAxis.PixelPositionToValue(clientX);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15566624Di2015UniqueSeparatorprivate int nearestPreceedingValue(double x)Di2015NewLine{Di2015NewLine    var bpData  = _chart.Series[SERIES_INDEX].Points;Di2015NewLine    int bpIndex = bpData.BinarySearch(x, (xVal, point) => Math.Sign(x - point.XValue));Di2015NewLineDi2015NewLine    if (bpIndex < 0)Di2015NewLine    {Di2015NewLine        bpIndex = ~bpIndex;                // BinarySearch() returns the index of the next element LARGER than the target.Di2015NewLine        bpIndex = Math.Max(0, bpIndex-1);  // We want the value of the previous element, so we must decrement the returned index.Di2015NewLine    }                                      // If this is before the start of the graph, use the first valid data point.Di2015NewLineDi2015NewLine    return bpIndex;Di2015NewLine}Di2015NewLine
15566624Di2015UniqueSeparator_chart.Series[SERIES_INDEX].Points
15566624Di2015UniqueSeparator/// <summary>Di2015NewLine/// Searches the entire sorted IList{T} for an element using the specified comparer Di2015NewLine/// and returns the zero-based index of the element.Di2015NewLine/// </summary>Di2015NewLine/// <typeparam name="TItem">The type of the item.</typeparam>Di2015NewLine/// <typeparam name="TSearch">The type of the searched item.</typeparam>Di2015NewLine/// <param name="list">The list to be searched.</param>Di2015NewLine/// <param name="value">The value to search for.</param>Di2015NewLine/// <param name="comparer">The comparer that is used to compare the value with the list items.</param>Di2015NewLine/// <returns>Di2015NewLine/// The zero-based index of item in the sorted IList{T}, if item is found; Di2015NewLine/// otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item,Di2015NewLine/// or - if there is no larger element - the bitwise complement of Count.Di2015NewLine/// </returns>Di2015NewLineDi2015NewLinepublic static int BinarySearch<TItem, TSearch>(this IList<TItem> list, TSearch value, Func<TSearch, TItem, int> comparer)Di2015NewLine{Di2015NewLine    Contract.Requires(list != null);Di2015NewLine    Contract.Requires(comparer != null);Di2015NewLineDi2015NewLine    int lower = 0;Di2015NewLine    int upper = list.Count - 1;Di2015NewLineDi2015NewLine    while (lower <= upper)Di2015NewLine    {Di2015NewLine        int middle = lower + (upper - lower) / 2;Di2015NewLine        int comparisonResult = comparer(value, list[middle]);Di2015NewLineDi2015NewLine        if (comparisonResult < 0)Di2015NewLine        {Di2015NewLine            upper = middle - 1;Di2015NewLine        }Di2015NewLine        else if (comparisonResult > 0)Di2015NewLine        {Di2015NewLine            lower = middle + 1;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return middle;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return ~lower;Di2015NewLine}Di2015NewLine
15566741Di2015UniqueSeparatorpublic static string RenderPartialToString(string controlName, object viewData)Di2015NewLine    {Di2015NewLine        ViewPage viewPage = new ViewPage() { ViewContext = new ViewContext() };Di2015NewLineDi2015NewLine        viewPage.ViewData = new ViewDataDictionary(viewData);Di2015NewLine        viewPage.Controls.Add(viewPage.LoadControl(controlName));Di2015NewLineDi2015NewLine        StringBuilder sb = new StringBuilder();Di2015NewLine        using (StringWriter sw = new StringWriter(sb))Di2015NewLine        {Di2015NewLine            using (HtmlTextWriter tw = new HtmlTextWriter(sw))Di2015NewLine            {Di2015NewLine                viewPage.RenderControl(tw);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLinestring content = RenderPartialToString("myView", myModel);Di2015NewLine
15567021Di2015UniqueSeparatorpublic class UC_TitleBar : UserControlDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty ShowCloseButtonProperty = DependencyProperty.Register("ShowCloseButton", Di2015NewLine                                                    typeof(Boolean), typeof(UC_TitleBar), new FrameworkPropertyMetadata(false));Di2015NewLine    public bool ShowCloseButtonDi2015NewLine    {Di2015NewLine        get { return (bool)GetValue(ShowCloseButtonProperty); }Di2015NewLine        set { SetValue(ShowCloseButtonProperty, value); }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15567124Di2015UniqueSeparatorclass ContextAction : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public string Name;Di2015NewLine    public ICommand Action;Di2015NewLine    public Brush Icon;Di2015NewLine}Di2015NewLine
15567124Di2015UniqueSeparatorObservableCollection<ContextAction> Actions {get;set;}Di2015NewLine
15567124Di2015UniqueSeparator<Grid.ContextMenu>Di2015NewLine    <ContextMenu ItemsSource="{Binding Actions}/>Di2015NewLine
15567175Di2015UniqueSeparator    internal static Int64 GetDirectoryId(string dir)Di2015NewLine    {Di2015NewLine        var handle = CreateFile(dir, FileAccess.Read, FileShare.Read, IntPtr.Zero, FileMode.Open, 0x02000000 | 0x00000080, IntPtr.Zero);Di2015NewLine        var fileStruct = new FILE_ID_BOTH_DIR_INFO();Di2015NewLine        GetFileInformationByHandleEx(handle, FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryInfo, out fileStruct, (uint)Marshal.SizeOf(fileStruct));Di2015NewLine        CloseHandle(handle);Di2015NewLine        var win32Error = Marshal.GetLastWin32Error();Di2015NewLine        if (win32Error != 0)Di2015NewLine            throw new Win32Exception();Di2015NewLineDi2015NewLine        return fileStruct.FileId.QuadPart;Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("kernel32.dll", SetLastError = true)]Di2015NewLine    private static extern bool GetFileInformationByHandleEx(Di2015NewLine        IntPtr hFile,Di2015NewLine        FILE_INFO_BY_HANDLE_CLASS infoClass,Di2015NewLine        out FILE_ID_BOTH_DIR_INFO dirInfo,Di2015NewLine        uint dwBufferSize);Di2015NewLineDi2015NewLine    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]Di2015NewLine    private static extern IntPtr CloseHandle(Di2015NewLine        IntPtr handle);Di2015NewLineDi2015NewLine    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]Di2015NewLine    private static extern IntPtr CreateFile(Di2015NewLine        string lpFileName,Di2015NewLine        [MarshalAs(UnmanagedType.U4)] FileAccess dwDesiredAccess,Di2015NewLine        [MarshalAs(UnmanagedType.U4)] FileShare dwShareMode,Di2015NewLine        IntPtr lpSecurityAttributes,Di2015NewLine        [MarshalAs(UnmanagedType.U4)] FileMode dwCreationDisposition,Di2015NewLine        uint dwFlagsAndAttributes,Di2015NewLine        IntPtr hTemplateFile);Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]Di2015NewLine    private struct FILE_ID_BOTH_DIR_INFODi2015NewLine    {Di2015NewLine        public uint NextEntryOffset;Di2015NewLine        public uint FileIndex;Di2015NewLine        public LARGE_INTEGER CreationTime;Di2015NewLine        public LARGE_INTEGER LastAccessTime;Di2015NewLine        public LARGE_INTEGER LastWriteTime;Di2015NewLine        public LARGE_INTEGER ChangeTime;Di2015NewLine        public LARGE_INTEGER EndOfFile;Di2015NewLine        public LARGE_INTEGER AllocationSize;Di2015NewLine        public uint FileAttributes;Di2015NewLine        public uint FileNameLength;Di2015NewLine        public uint EaSize;Di2015NewLine        public char ShortNameLength;Di2015NewLine        [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = 12)]Di2015NewLine        public string ShortName;Di2015NewLine        public LARGE_INTEGER FileId;Di2015NewLine        [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = 1)]Di2015NewLine        public string FileName;Di2015NewLine    }Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Explicit, Size=8)]Di2015NewLine    private struct LARGE_INTEGERDi2015NewLine    {Di2015NewLine        [FieldOffset(0)]public Int64 QuadPart;Di2015NewLine        [FieldOffset(0)]public UInt32 LowPart;Di2015NewLine        [FieldOffset(4)]public Int32 HighPart;Di2015NewLine    }Di2015NewLineDi2015NewLine    private enum FILE_INFO_BY_HANDLE_CLASSDi2015NewLine    {Di2015NewLine        FileIdBothDirectoryInfo = 10Di2015NewLine    }Di2015NewLine
15567219Di2015UniqueSeparatorMethodInfo
15567219Di2015UniqueSeparatorExpression<Action> fb = () => Simulate.Boolean(true);Di2015NewLineDi2015NewLinevar call = fb.Body as MethodCallExpression;Di2015NewLineDi2015NewLineif (call != null)Di2015NewLine    Console.WriteLine (call.Method.Name); //prints "Boolean" as a stringDi2015NewLine
15567241Di2015UniqueSeparatorFunc<T1, T2>
15567241Di2015UniqueSeparatorpublic class MyCallable<T1, T2> : DynamicObjectDi2015NewLine{Di2015NewLine    private readonly Expression<Func<T1, T2> > _wrapped;Di2015NewLine    private readonly Func<T1, T2> _compiled;Di2015NewLineDi2015NewLine    public MyCallable(Expression<Func<T1, T2>> towrap) Di2015NewLine    { Di2015NewLine        _wrapped = towrap; _compiled = _wrapped.Compile(); Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool TryInvoke(InvokeBinder binder, object[] args, out object result)Di2015NewLine    {Di2015NewLine        if ( (args.Length == 1) && Di2015NewLine             (args[0].GetType() == typeof(T1)))Di2015NewLine        {Di2015NewLine            Console.WriteLine(@"Invoking ""{0}"" on {1}", _wrapped, args[0]);Di2015NewLine            result = _compiled((T1) args[0]);Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            //throw new ArgumentException("Cannot invoke " + _wrapped + " with the arguments passed");Di2015NewLine            result = null;Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15567241Di2015UniqueSeparator// in "TheormProver"Di2015NewLinepublic static dynamic Func<T1, T2>() { return new MyCallable<T1, T2>(arg1 => default(T2)); }Di2015NewLine
15567241Di2015UniqueSeparatorInvoking "arg1 => False" on 0Di2015NewLineInvoking "arg1 => False" on 4Di2015NewLineInvoking "arg1 => 0" on FalseDi2015NewLineInvoking "arg1 => False" on 0Di2015NewLineInvoking "arg1 => 0" on FalseDi2015NewLineInvoking "arg1 => False" on 0Di2015NewLineInvoking "arg1 => 0" on FalseDi2015NewLine
15567241Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineusing System.Dynamic;Di2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    public class MyCallable<T1, T2> : DynamicObjectDi2015NewLine    {Di2015NewLine        private readonly Expression<Func<T1, T2> > _wrapped;Di2015NewLine        private readonly Func<T1, T2> _compiled;Di2015NewLineDi2015NewLine        public MyCallable(Expression<Func<T1, T2>> towrap) Di2015NewLine        { Di2015NewLine            _wrapped = towrap; _compiled = _wrapped.Compile(); Di2015NewLine        }Di2015NewLineDi2015NewLine        public override bool TryInvoke(InvokeBinder binder, object[] args, out object result)Di2015NewLine        {Di2015NewLine            if ( (args.Length == 1) && Di2015NewLine                 (args[0].GetType() == typeof(T1)))Di2015NewLine            {Di2015NewLine                Console.WriteLine(@"Invoking ""{0}"" on {1}", _wrapped, args[0]);Di2015NewLine                result = _compiled((T1) args[0]);Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                //throw new ArgumentException("Cannot invoke " + _wrapped + " with the arguments passed");Di2015NewLine                result = null;Di2015NewLine                return false;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class TheormProverDi2015NewLine    {Di2015NewLine        public static object[] NewTheorm() { return new object[] { 1 }; }Di2015NewLine        public static dynamic Func<T1, T2>() { return new MyCallable<T1, T2>(arg1 => default(T2)); }Di2015NewLine        public static int Int { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var i = 123;Di2015NewLine        var test2 = from t in TheormProver.NewTheorm()Di2015NewLine            let f = TheormProver.Func<int, bool>()Di2015NewLine            let a = TheormProver.IntDi2015NewLine            let g = TheormProver.Func<bool, int>()Di2015NewLine            where !f(a * 2) && g(f(g(f(4)))) == i * a && a < g(f(a))Di2015NewLine            select new { f = f.ToString(), g = g.ToString(), a, asd = "Test extra property" };Di2015NewLineDi2015NewLine        test2.ToList().ForEach(Console.WriteLine);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
15567261Di2015UniqueSeparatorAuthorize
15567261Di2015UniqueSeparator[Authorize(Roles = "Coach, Admin")]Di2015NewLinepublic ActionResult Index(Somemodel model)Di2015NewLine{Di2015NewLine    if (ModelState.IsValid)Di2015NewLine    {Di2015NewLine        dosomestuff()Di2015NewLine    }Di2015NewLine    return View();Di2015NewLine}Di2015NewLine
15567261Di2015UniqueSeparator@if (User.IsInRole("Coach"))Di2015NewLine{Di2015NewLine    <li>This menu will be visible only to users in the Coach role</li>Di2015NewLine}Di2015NewLine
15567509Di2015UniqueSeparatorSystem.Drawing
15567509Di2015UniqueSeparatorSystem.Deployment
15567547Di2015UniqueSeparatorSqlNotificationEventArgs
15567547Di2015UniqueSeparatorOn_SqlBitChanged
15567547Di2015UniqueSeparatorSqlWatcher.SqlWatcher
15567547Di2015UniqueSeparatorsqlWatcher.NewMessage
15567547Di2015UniqueSeparatorOn_SqlBitChanged
15567547Di2015UniqueSeparatorNewMessage
15567547Di2015UniqueSeparatorSqlWatcher.SqlWatcher
15567547Di2015UniqueSeparatorSqlWatcher.Start()
15567547Di2015UniqueSeparatorSqlCommand
15567547Di2015UniqueSeparatorStart
15567547Di2015UniqueSeparatorStop
15567547Di2015UniqueSeparatorStart
15567547Di2015UniqueSeparatorNewMessage
15567547Di2015UniqueSeparatorSqlComamnd.ExecuteQuery()
15567547Di2015UniqueSeparatorInfo
15567547Di2015UniqueSeparatorType
15567547Di2015UniqueSeparatorSource
15567547Di2015UniqueSeparatorOn_SqlBitChanged
15567547Di2015UniqueSeparatorMessageBox.Show("Message Received");
15567547Di2015UniqueSeparatorForm.Invoke
15567547Di2015UniqueSeparatorMessageBox.Show
15567572Di2015UniqueSeparatorversion="2.0"
15567572Di2015UniqueSeparatorxsl:stylesheet
15567572Di2015UniqueSeparatorxsl:transform
15567572Di2015UniqueSeparatorversion="1.0"
15567572Di2015UniqueSeparatorfor-each-group
15567813Di2015UniqueSeparatorIsEmpty
15567813Di2015UniqueSeparatorTryDequeue
15567813Di2015UniqueSeparatorBlockingCollection
15567813Di2015UniqueSeparatorIsEmpty
15567813Di2015UniqueSeparatorCount
15567813Di2015UniqueSeparatorConcurrentQueue
15567813Di2015UniqueSeparatorBlockingCollection
15567943Di2015UniqueSeparator[ProvideAutoLoad("{f1536ef8-92ec-443c-9ed7-fdadf150da82}")]Di2015NewLinepublic sealed class MyFirstPackage : PackageDi2015NewLine
15567943Di2015UniqueSeparatorUICONTEXT_SolutionExists
15567943Di2015UniqueSeparatorBeforeQueryStatus
15567943Di2015UniqueSeparatorText
15567943Di2015UniqueSeparator.vsct
15567943Di2015UniqueSeparatorButtons
15567943Di2015UniqueSeparatorButton
15567943Di2015UniqueSeparatorCommandFlag
15567943Di2015UniqueSeparatorText
15567943Di2015UniqueSeparator<CommandFlag>TextChanges</CommandFlag>Di2015NewLine
15567943Di2015UniqueSeparatorVisibility
15567943Di2015UniqueSeparatorCommandFlag
15567943Di2015UniqueSeparator<CommandFlag>DynamicVisibility</CommandFlag>Di2015NewLine
15568013Di2015UniqueSeparator[Obsolete("Please use LatestGreatest instead.")]Di2015NewLinepublic class OldSchoolDi2015NewLine{Di2015NewLine    private LatestGreatest _Target;Di2015NewLineDi2015NewLine    public OldSchool()Di2015NewLine    {Di2015NewLine        _Target = new LatestGreatest();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DoSomething()Di2015NewLine    {Di2015NewLine        _Target.DoSomething();Di2015NewLine    }Di2015NewLineDi2015NewLine    [Obsolete("Please use LatestGreatest.DoItInSomeOtherWay()")]Di2015NewLine    public void DoTheOldWay()Di2015NewLine    {Di2015NewLine        _Target.DoItInSomeOtherWay();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class LatestGreatestDi2015NewLine{Di2015NewLine    public void DoSomething()Di2015NewLine    {Di2015NewLine        Console.WriteLine("I'm so fresh and cool.");Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DoItInSomeOtherWay()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Let's do it...");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15568026Di2015UniqueSeparator<Button Visibility="{Binding ElementName=userControl1,Path=ShowCloseButton, Mode=TwoWay, Converter={StaticResource BoolToVis}}" x:Name="Button_Close"/>Di2015NewLine
15568077Di2015UniqueSeparatorroutes.MapHttpRoute(Di2015NewLine    name: "ActionApi",Di2015NewLine    routeTemplate: "api/{controller}/{action}/{id}",Di2015NewLine    defaults: new { id = RouteParameter.Optional }Di2015NewLine);Di2015NewLine
15568077Di2015UniqueSeparatorpublic class ProductsController : ApiControllerDi2015NewLine{Di2015NewLine    [HttpGet]Di2015NewLine    public string Details(int id);Di2015NewLine}Di2015NewLine
15568077Di2015UniqueSeparatorpublic class ProductsController : ApiControllerDi2015NewLine{Di2015NewLine    [HttpGet]Di2015NewLine    [ActionName("Thumbnail")]Di2015NewLine    public HttpResponseMessage GetThumbnailImage(int id);Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    [ActionName("Thumbnail")]Di2015NewLine    public void AddThumbnailImage(int id);Di2015NewLine}Di2015NewLine
15568110Di2015UniqueSeparatorApplication
15568110Di2015UniqueSeparatorSplash Screen
15568276Di2015UniqueSeparatorstring colors = "Yellow,Brown";Di2015NewLine        string[] col = colors.Split(',');Di2015NewLine        foreach (ListItem lst in CheckBoxList1.Items)Di2015NewLine        {Di2015NewLine            for (int i = 0; i <= col.Length-1; i++)Di2015NewLine            {Di2015NewLine                if (lst.Text == col[i])Di2015NewLine                {Di2015NewLine                    lst.Selected = true;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
15568276Di2015UniqueSeparatorstring colors
15568280Di2015UniqueSeparatorINotifyPropertyChanged
15568280Di2015UniqueSeparatorObjectMaterialized
15568280Di2015UniqueSeparatorObjectContext
15568280Di2015UniqueSeparator((IObjectContextAdapter)this).ObjectContext.ObjectMaterialized += Di2015NewLinethis.ObjectContext_OnObjectMaterialized;Di2015NewLine
15568280Di2015UniqueSeparatorObjectContext_OnObjectMaterialized(object sender, ObjectMaterializedEventArgs e).Di2015NewLine
15568280Di2015UniqueSeparatorEventArgs
15568363Di2015UniqueSeparatorStringReader
15568363Di2015UniqueSeparatorvar pathToFile = @"C:\\source\\Net4\\Clocks\\Handlers\\XML_Schemas\\test.xsd";Di2015NewLineDi2015NewLinevar reader = new StringReader(File.ReadAllText(pathToFile));Di2015NewLineDi2015NewLineschemas.Add("", XmlReader.Create(reader));Di2015NewLine
15568363Di2015UniqueSeparatorXmlSchemaSet
15568363Di2015UniqueSeparatorschemas.Add("", new XmlTextReader(pathToFile));Di2015NewLine
15568491Di2015UniqueSeparatorBuiltInDocumentProperties
15568491Di2015UniqueSeparatorforeach (DocumentProperty property in Di2015NewLine    Globals.ThisDocument.Application.ActiveDocument.BuiltInDocumentProperties)Di2015NewLine{Di2015NewLine    Trace.TraceInformation("Name: {0}\\tValue: {1}\\tType{2}", Di2015NewLine        property.Name, property.Value, property.Type);Di2015NewLine}Di2015NewLine
15568491Di2015UniqueSeparatorDocumentProperty keywords = Globals.ThisDocument.ApplicationDi2015NewLine    .ActiveDocument.BuiltInDocumentProperties["Keywords"];Di2015NewLineTrace.TraceInformation("Name: {0}\\tValue: {1}\\tType{2}", Di2015NewLine    keywords.Name, keywords.Value, keywords.Type);Di2015NewLine
15568803Di2015UniqueSeparatorUpdate
15568803Di2015UniqueSeparatorEntity
15568803Di2015UniqueSeparatorPlayer
15568803Di2015UniqueSeparatorEntity
15568803Di2015UniqueSeparatorUpdate()
15568803Di2015UniqueSeparatorEntity
15568803Di2015UniqueSeparatorforeach (Entity entity in entityList) { entity.Update(); }Di2015NewLine
15568803Di2015UniqueSeparatorUpdate()
15568803Di2015UniqueSeparatorEntity
15568803Di2015UniqueSeparatorEntity
15568831Di2015UniqueSeparator</cityItems>
15568831Di2015UniqueSeparatorvar xml = XDocument.Parse(str);Di2015NewLineDi2015NewLineFunc<string, string[]> readAllCities = Di2015NewLine                            nodeName => Di2015NewLine                                     xml.Descendants(nodeName)Di2015NewLine                                        .SelectMany(node => node.Elements("city")Di2015NewLine                                                                .Select(v => v.Value))Di2015NewLine                                        .ToArray();Di2015NewLineDi2015NewLineDi2015NewLinestring[] streets  = readAllCities("streetItems");Di2015NewLinestring[] cities  = readAllCities("cityItems");Di2015NewLine
15568831Di2015UniqueSeparatorstring[] cities = xml.Descendants("cityItems")Di2015NewLine                     .SelectMany(node => node.Elements("city")Di2015NewLine                                             .Select(v => v.Value))Di2015NewLine                     .ToArray();Di2015NewLineDi2015NewLineDi2015NewLinestring[] strets = xml.Descendants("streetItems")Di2015NewLine                     .SelectMany(node => node.Elements("city")Di2015NewLine                                             .Select(v => v.Value))Di2015NewLine                     .ToArray();Di2015NewLine
15568906Di2015UniqueSeparatorObservableCollection
15568906Di2015UniqueSeparatorINotifyPropertyChanged
15568906Di2015UniqueSeparatorCollectionChanged
15568906Di2015UniqueSeparatorObservableCollection
15569060Di2015UniqueSeparator@Html.DisplayFor(model => model.user.ResignDate, "UserStatus")Di2015NewLine
15569072Di2015UniqueSeparatorinterface ISpecialFactory<T>Di2015NewLine        where T : ICloneable, IFactory<T>Di2015NewLine
15569072Di2015UniqueSeparatorinterface ISpecialFactory<T> : IFactory<T>Di2015NewLine        where T : ICloneableDi2015NewLine
15569072Di2015UniqueSeparatorpublic class Computer : ICloneableDi2015NewLine{ Di2015NewLine    public object Clone(){ return new Computer(); }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IFactory<T>Di2015NewLine{Di2015NewLine    T Get();    Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IComputerFactory : IFactory<Computer>Di2015NewLine{Di2015NewLine    Computer Get();Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface ISpecialFactory<T>: IFactory<T>Di2015NewLine    where T : ICloneableDi2015NewLine{Di2015NewLine    T Get();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyFactory : IComputerFactory, ISpecialFactory<Computer>Di2015NewLine{Di2015NewLine    public Computer Get()Di2015NewLine    {Di2015NewLine        return new Computer();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15569197Di2015UniqueSeparatorif (!IsPostBack)Di2015NewLine    // Bind the repeaterDi2015NewLine
15569287Di2015UniqueSeparatorms-appx:
15569287Di2015UniqueSeparatorappx:
15569287Di2015UniqueSeparatorStorageFile file = await StorageFile.GetFileFromApplicationUriAsync(Di2015NewLine    new Uri("ms-appx:///Assets/image.png"));Di2015NewLineDi2015NewLineawait file.CopyAsync(ApplicationData.Current.LocalFolder, "image.png");Di2015NewLine
15569314Di2015UniqueSeparatorprivate bool CheckName(List<string> evals, string name, bool all)Di2015NewLine{Di2015NewLine    return all ? !evals.Any(x => !Regex.IsMatch(name, x, RegexOptions.IgnoreCase)) Di2015NewLine                : evals.Any( x => Regex.IsMatch(name, x, RegexOptions.IgnoreCase));Di2015NewLine}Di2015NewLine
15569314Di2015UniqueSeparatorList<string> list = new List<string>();Di2015NewLineDi2015NewLineFunc<string, bool, bool> checkName = (name, all) => allDi2015NewLine    ? !list.Any(x => !Regex.IsMatch(name, x, RegexOptions.IgnoreCase))Di2015NewLine    : list.Any(x => Regex.IsMatch(name, x, RegexOptions.IgnoreCase));Di2015NewLineDi2015NewLinecheckName("filename", true) Di2015NewLine
15569441Di2015UniqueSeparatorFileContent
15569441Di2015UniqueSeparatorStream
15569441Di2015UniqueSeparatorStream
15569441Di2015UniqueSeparatorStream
15569441Di2015UniqueSeparatorbool hasFile = FileUpload1.HasFile;Di2015NewLineDi2015NewLineint fileLen = FileUpload1.PostedFile.ContentLength;Di2015NewLineStream stream = FileUpload1.FileContent;Di2015NewLineDi2015NewLinebyte[] file = new byte[fileLen];Di2015NewLinestream.Read(file, 0, fileLen);Di2015NewLine
15569441Di2015UniqueSeparatornew Attachment(new MemoryStream(file) ...Di2015NewLine
15569441Di2015UniqueSeparatorif
15569441Di2015UniqueSeparatorbool
15569441Di2015UniqueSeparatorif (hasFile)Di2015NewLine
15569451Di2015UniqueSeparatorBinaryFormatter
15569488Di2015UniqueSeparatortableLayoutPanel1.SuspendLayout();Di2015NewLineDi2015NewLinetableLayoutPanel1.RowCount++;Di2015NewLinetableLayoutPanel1.RowStyles.Insert(tableLayoutPanel1.RowCount - 1, new RowStyle(SizeType.AutoSize));Di2015NewLineDi2015NewLinetableLayoutPanel1.SetRow(btnAdd, tableLayoutPanel1.RowCount - 1);Di2015NewLineDi2015NewLinevar control = CreateControl();Di2015NewLinetableLayoutPanel1.Controls.Add(control, 0, tableLayoutPanel1.RowCount - 2);Di2015NewLinetableLayoutPanel1.ResumeLayout();Di2015NewLine
15569518Di2015UniqueSeparatorStringBuilder filter = new StringBuilder();Di2015NewLineDi2015NewLineif(a.checked)Di2015NewLine   filter.Append("filter here");Di2015NewLineDi2015NewLineif(b.checked)Di2015NewLine    filter.Append("filter here");Di2015NewLineDi2015NewLineviews.RowFilter= filter.toString();Di2015NewLine
15569556Di2015UniqueSeparatorWaitForExit()
15569657Di2015UniqueSeparatorList<Func<string>>
15569698Di2015UniqueSeparatorintLast
15569698Di2015UniqueSeparatorstring strOutput = strInput.Substring(strInput.Length - intLast);Di2015NewLine
15569698Di2015UniqueSeparatorstrInput.Length > 1
15569698Di2015UniqueSeparatorstrInput.Substring(i, 1) == @"\\"
15569698Di2015UniqueSeparatorint intLast = 0; // or any default value.
15569841Di2015UniqueSeparator[MetadataType(typeof(BookModel))]
15569902Di2015UniqueSeparatorprivate void clearRedundantSubscriptions()Di2015NewLine{Di2015NewLine    string sql;Di2015NewLine    // Check if there are any entries in customerlist table which point to non-existing listsDi2015NewLine    var list = new List<int>();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        if (DbConnection.ceConnection.State == ConnectionState.Closed)Di2015NewLine            DbConnection.ceConnection.Open();Di2015NewLineDi2015NewLine        sql = "select distinct cl.listid from customerlist cl inner join list l on cl.listid != l.listid";Di2015NewLineDi2015NewLine        SqlCeCommand cmdGetDisusedLists = new SqlCeCommand(sql, DbConnection.ceConnection);Di2015NewLine        SqlCeDataReader reader = cmdGetDisusedLists.ExecuteReader();Di2015NewLine        while (reader.Read())Di2015NewLine        {Di2015NewLine            list.Add(reader.GetInt32(0));Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Error cleaning up list entries." + ex.Message);Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        DbConnection.closeConnection();Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach(var id in list)Di2015NewLine    {Di2015NewLine        DeleteList(id,false);Di2015NewLineDi2015NewLine    }Di2015NewLine    return;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static bool DeleteList(int id, bool display)Di2015NewLine{Di2015NewLine    string sql;Di2015NewLine    string title = "";Di2015NewLine    bool ranOk = false;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        sql = "select ShortDesc from list where listid=" + id;Di2015NewLine        DbFunctions.runSQL(sql, out title);Di2015NewLineDi2015NewLineDi2015NewLine        sql = "delete from list where ListId=" + id;Di2015NewLine        SqlCeCommand cmdDelList = new SqlCeCommand(sql, DbConnection.ceConnection);Di2015NewLine        cmdDelList.ExecuteNonQuery();Di2015NewLine        sql = "delete from customerlist where listid=" + id;Di2015NewLine        SqlCeCommand cmdDelEntries = new SqlCeCommand(sql, DbConnection.ceConnection);Di2015NewLine        cmdDelEntries.ExecuteNonQuery();Di2015NewLine        if (display)Di2015NewLine            General.doneWork(title + " list deleted.");Di2015NewLine        ranOk = true;Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        if (display)Di2015NewLine            MessageBox.Show("Unable to delete list. " + ex.Message);Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine            DbConnection.closeConnection();Di2015NewLine    }Di2015NewLine    return ranOk;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void closeConnection()Di2015NewLine{Di2015NewLine    if (_sqlCeConnection != null)Di2015NewLine        _sqlCeConnection.Close();Di2015NewLine}Di2015NewLine
15570123Di2015UniqueSeparatorbool result=false;Di2015NewLineSqlCommand scCommand = new SqlCommand("usp_CheckEmailMobile", sqlCon);Di2015NewLinescCommand.CommandType = CommandType.StoredProcedure;Di2015NewLinescCommand.Parameters.Add("@Name", SqlDbType.VarChar, 50).Value = txtName.Text;Di2015NewLinescCommand.Parameters.Add("@Email", SqlDbType.NVarChar, 50).Value = txtEmailAddress.Text;Di2015NewLinescCommand.Parameters.Add("@Password ", SqlDbType.NVarChar, 50).Value = txtPassword.Text;Di2015NewLinescCommand.Parameters.Add("@CountryCode", SqlDbType.VarChar.50).Value =ddlCountryCode.SelectedText;Di2015NewLinescCommand.Parameters.Add("@Mobile", SqlDbType.NVarChar, 50).Value = txtMobileNumber.Text;Di2015NewLinescCommand.Parameters.Add("@Result ", SqlDbType.Bit).Direction = ParameterDirection.Output;Di2015NewLinetryDi2015NewLine{Di2015NewLine    if (scCommand.Connection.State == ConnectionState.Closed)Di2015NewLine    {Di2015NewLine        scCommand.Connection.Open();Di2015NewLine    }Di2015NewLine    scCommand.ExecuteNonQuery();Di2015NewLine    result = Convert.ToBoolean(scCommand.Parameters["@Result"].Value);Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLinecatch (Exception)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLinefinallyDi2015NewLine{                Di2015NewLine    scCommand.Connection.Close();Di2015NewLine    Response.Write(result); Di2015NewLine}Di2015NewLine
15570268Di2015UniqueSeparatorFunc<PlayGrid, Color, Shape>
15570268Di2015UniqueSeparatorAction
15570268Di2015UniqueSeparatorvar constList = new List<Func<PlayGrid, Color, Shape>>();Di2015NewLineconstList.Add((pg, c) => new SShape(pg, c));Di2015NewLineDi2015NewLinePlayGrid playgrid = /* however you get this */;Di2015NewLineColor color = /* however you get this */;Di2015NewLinevar shape = constList[randomIdx](playgrid, color);Di2015NewLine
15570287Di2015UniqueSeparatorBindingList
15570287Di2015UniqueSeparatorBindingSource
15570287Di2015UniqueSeparatorprivate class LivingBindingList : BindingList<Producer>Di2015NewLine{Di2015NewLine    public LivingBindingList(List<Producer> source)Di2015NewLine        : base(source.Where(producer => producer.ChangeTracker.State != ObjectState.Deleted).ToList())Di2015NewLine    {Di2015NewLine        rem_cache = source.Where(producer => producer.ChangeTracker.State == ObjectState.Deleted).ToList();Di2015NewLine    }Di2015NewLine    List<Producer> rem_cache;Di2015NewLine    protected override void RemoveItem(int index)Di2015NewLine    {Di2015NewLine        this.Items[index].MarkAsDeleted();Di2015NewLine        this.rem_cache.Add(this.Items[index]);Di2015NewLine        base.RemoveItem(index);Di2015NewLine    }Di2015NewLine    protected override void OnAddingNew(AddingNewEventArgs e)Di2015NewLine    {Di2015NewLine        e.NewObject = new Producer()Di2015NewLine        {Di2015NewLine            NameProducer = "Ð?Ð¾Ð²ÑÐ¹ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸ÑÐµÐ»Ñ",Di2015NewLine            GUID = Guid.NewGuid(),Di2015NewLine            Type = 1,Di2015NewLine            Note = String.EmptyDi2015NewLine        };Di2015NewLine        base.OnAddingNew(e);Di2015NewLine    }Di2015NewLine    internal IEnumerable<Producer> GetAllForSubmit()Di2015NewLine    {Di2015NewLine        return this.Items.Concat(rem_cache);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15570312Di2015UniqueSeparator  if (Request.Url.ToString().Contains("About") == true)Di2015NewLine  {    Di2015NewLine      liContact.Style.Add("color", "#00ff00!important");Di2015NewLine  }Di2015NewLine
15570312Di2015UniqueSeparator!important
15570312Di2015UniqueSeparatorcss
15570312Di2015UniqueSeparator.menu ul {}Di2015NewLine.menu ul li a{padding:9px 10px; display:block; color:#fff; font-size:16px; font-weight:bold;}Di2015NewLine.menu ul li a:hover{color:#00ff00; text-decoration:none; }Di2015NewLineDi2015NewLine.menu ul li.selected a{padding:9px 10px; display:block; color:#00ff00; font-size:16px; Di2015NewLine       font-weight:bold;}Di2015NewLine
15570312Di2015UniqueSeparatorliContact.Attributes.Remove("class");   Di2015NewLineliContact.Attributes.Add("class", "selected");Di2015NewLine
15570312Di2015UniqueSeparator .menu ul li.selected a:hover{padding:9px 10px; display:block; color:#00ff00; font-size:16px; Di2015NewLine       font-weight:bold;}Di2015NewLine
15570439Di2015UniqueSeparatorCurrentManagedThreadId
15570584Di2015UniqueSeparatorfrom person in PersonsDi2015NewLinejoin customer in Customers on person.BusinessEntityID equals customer.PersonIDDi2015NewLinejoin salesOrderHeader in SalesOrderHeaders on customer.CustomerID equals salesOrderHeader.CustomerIDDi2015NewLinewhere salesOrderHeader.SubTotal > 1000Di2015NewLinejoin address in Addresses on salesOrderHeader.BillToAddressID equals address.AddressIDDi2015NewLinewhere address.City == "Melton"Di2015NewLinegroup salesOrderHeader by new { person.FirstName, person.LastName } into g //newDi2015NewLineselect new {Di2015NewLine                g.Key.FirstName,Di2015NewLine                g.Key.LastName,Di2015NewLine                SubTotal = g.Sum(salesOrderHeader => salesOrderHeader.SubTotal),Di2015NewLine            address.CityDi2015NewLine       }Di2015NewLine
15570706Di2015UniqueSeparator#if
15570775Di2015UniqueSeparatorObjectContext
15570775Di2015UniqueSeparatorFunc<T>
15570775Di2015UniqueSeparatorAction<T>
15570775Di2015UniqueSeparatorpublic static Tuple<List<T1>> GetSprocResults<T1>Di2015NewLine    (DataTableReader reader, ObjectContext objectContext)Di2015NewLine{Di2015NewLine    var t1 = objectContext.Translate<T1>(reader).ToList();Di2015NewLineDi2015NewLine    return new Tuple<List<T1>>(t1);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static Tuple<List<T1>, List<T2>> GetSprocResults<T1, T2>Di2015NewLine    (DataTableReader reader, ObjectContext objectContext)Di2015NewLine{Di2015NewLine    var t1 = objectContext.Translate<T1>(reader).ToList();Di2015NewLine    reader.NextResult();Di2015NewLineDi2015NewLine    var t2 = objectContext.Translate<T2>(reader).ToList();Di2015NewLineDi2015NewLine    return new Tuple<List<T1>, List<T2>>(t1, t2);Di2015NewLine}Di2015NewLine
15570775Di2015UniqueSeparator        var result = GetSprocResults<DateTime, int>(reader, objectContext);Di2015NewLineDi2015NewLine        var datesCount = result.Item1.Count;Di2015NewLine        var intCount = result.Item2.Count;Di2015NewLine
15570824Di2015UniqueSeparatorBindingList<YourBusinessObject>()
15570824Di2015UniqueSeparatorinfo.Children
15570824Di2015UniqueSeparatorIVirtualTreeListData.VirtualTreeGetChildNodes()
15570826Di2015UniqueSeparatorBind
15570830Di2015UniqueSeparator8.5.1 Local variable declarations
15570830Di2015UniqueSeparatorIL
15570830Di2015UniqueSeparator .locals init ([0] int32 aa,Di2015NewLine           [1] int32 bb,Di2015NewLine           [2] int32 cc,Di2015NewLine           [3] int32 dd)Di2015NewLine  IL_0000:  nopDi2015NewLine  IL_0001:  ldc.i4.0Di2015NewLine  IL_0002:  stloc.0Di2015NewLine  IL_0003:  ldc.i4.0Di2015NewLine  IL_0004:  stloc.1Di2015NewLine  IL_0005:  ldc.i4.0Di2015NewLine  IL_0006:  stloc.2Di2015NewLine  IL_0007:  ldc.i4.0Di2015NewLine  IL_0008:  stloc.3Di2015NewLine  IL_0009:  retDi2015NewLine
15570830Di2015UniqueSeparatorIL
15570830Di2015UniqueSeparator  .maxstack  1Di2015NewLine  .locals init ([0] int32 aa,Di2015NewLine           [1] int32 bb,Di2015NewLine           [2] int32 cc,Di2015NewLine           [3] int32 dd)Di2015NewLine  IL_0000:  nopDi2015NewLine  IL_0001:  ldc.i4.0Di2015NewLine  IL_0002:  stloc.0Di2015NewLine  IL_0003:  ldc.i4.0Di2015NewLine  IL_0004:  stloc.1Di2015NewLine  IL_0005:  ldc.i4.0Di2015NewLine  IL_0006:  stloc.2Di2015NewLine  IL_0007:  ldc.i4.0Di2015NewLine  IL_0008:  stloc.3Di2015NewLine  IL_0009:  retDi2015NewLine
15570846Di2015UniqueSeparatorConsole.WriteLine (TrackTraceDataArray);Di2015NewLine
15570846Di2015UniqueSeparatorforeach (string s in TrackTraceDataArray)Di2015NewLine    Console.WriteLine (s);Di2015NewLine
15571004Di2015UniqueSeparatorstring strDateStarted = "Thu Jan 03 15:04:29 2013";           Di2015NewLineDateTime datDateStarted;Di2015NewLineDateTime.TryParseExact(strDateStarted, new string[] { "ddd MMM dd HH:mm:ss yyyy" }, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out datDateStarted);Di2015NewLineConsole.WriteLine(datDateStarted);Di2015NewLine
15571011Di2015UniqueSeparatorCommandBehavior.CloseConnection
15571011Di2015UniqueSeparatorstring query = "SELECT * FROM EVERYTHING";Di2015NewLinevar table = new DataTable();Di2015NewLineusing (var cmd = new SqlCeCommand(query, new SqlCeConnection(myConnStr)); {Di2015NewLine  try {Di2015NewLine    cmd.Connection.Open();Di2015NewLine    table.Load(cmd.ExecuteReader());Di2015NewLine  } catch (SqlException err) {Di2015NewLine    Console.WriteLine(err.Message); // <= Put a Break Point here.Di2015NewLine  } finally {Di2015NewLine    cmd.Connection.Close();Di2015NewLine  } Di2015NewLine}Di2015NewLineobject col1 = null;Di2015NewLinestring strCol2 = null;Di2015NewLineif (0 < table.Rows.Count) {Di2015NewLine  col1 = table.Rows[0][0];Di2015NewLine  object obj = table.Rows[0][1];Di2015NewLine  if ((obj != null) && (obj != DBNull.Value)) {Di2015NewLine    strCol2 = obj.ToString();Di2015NewLine  }Di2015NewLine}Di2015NewLine
15571011Di2015UniqueSeparatorRow[0]
15571131Di2015UniqueSeparatorif (theDoc.GetInfo(-1, "/Info") == "")Di2015NewLine    theDoc.SetInfo(-1, "/Info:Ref", theDoc.AddObject("<< >>").ToString());Di2015NewLinetheDoc.SetInfo(-1, "/Info*/Company:Text", "ACME");Di2015NewLine
15571131Di2015UniqueSeparatorif (theDoc.GetInfo(-1, "/Info") == "")Di2015NewLine    theDoc.SetInfo(-1, "/Info:Ref", theDoc.AddObject("<< >>").ToString());Di2015NewLinestring companyName = theDoc.GetInfo(-1, "/Info*/Company:Text");Di2015NewLine
15571322Di2015UniqueSeparatornumbers.Length * numbers.Length * operators.Length
15571322Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine   var numbers = new[] { 10, 9, 100, 73, 3457 };Di2015NewLine   var operators = new [] { "*", "+", "/", "-" };Di2015NewLineDi2015NewLineDi2015NewLine    var r = from n1 in numbersDi2015NewLine            from n2 in numbersDi2015NewLine            from op in operatorsDi2015NewLine            select string.Format("{0} {1} {2} = {3}",Di2015NewLine                                  n1, op, n2,   Perform(n1, op, n2));Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic int Perform(int val1, string @operator, int val2)Di2015NewLine{Di2015NewLine    //main core if your question, consider to extract operators to outer levelDi2015NewLine    var operators = new Dictionary<string, Func<int, int, int>>Di2015NewLine    {Di2015NewLine        {"+", (v1, v2) => v1 + v2},Di2015NewLine        {"/", (v1, v2) => v1 / v2},Di2015NewLine        {"*", (v1, v2) => v1 * v2},Di2015NewLine        {"-", (v1, v2) => v1 - v2},Di2015NewLine    };Di2015NewLineDi2015NewLine    return operators[@operator](val1, val2);Di2015NewLine}Di2015NewLine
15571322Di2015UniqueSeparator10 * 10 = 100 Di2015NewLine10 + 10 = 20 Di2015NewLine10 / 10 = 1 Di2015NewLine10 - 10 = 0 Di2015NewLine10 * 9 = 90 Di2015NewLine....Di2015NewLine
15571356Di2015UniqueSeparator   public Form1()Di2015NewLine   {Di2015NewLine        InitializeComponent();Di2015NewLine        _Test._TestMethod(this);Di2015NewLine   }Di2015NewLine
15571356Di2015UniqueSeparatorclass TestDi2015NewLine{Di2015NewLine    Form1 _frm = null;Di2015NewLineDi2015NewLine    public void _TestMethod(Form1 f)Di2015NewLine    {Di2015NewLine        _frm = f;Di2015NewLine        _frm._MainPublicMethod("Test Message", "Test Text");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15571566Di2015UniqueSeparatorThreadAbortException
15571566Di2015UniqueSeparatorIVsUIShell.ShowMessageBox
15571566Di2015UniqueSeparatorIVsThreadedWaitDialogFactory
15571618Di2015UniqueSeparatornew
15571618Di2015UniqueSeparatorIDictionary
15571618Di2015UniqueSeparatorvirtual
15571618Di2015UniqueSeparatorDictionary<TKey, TValue>
15571618Di2015UniqueSeparatorIDictionary<TKey, TValue
15571618Di2015UniqueSeparatorICollection<KeyValuePair<TKey, TValue>>
15571618Di2015UniqueSeparatorIEnumerable<KeyValuePair<TKey, TValue>>
15571618Di2015UniqueSeparatorpublic class MyDictionary<TKey, TValue> : IDictionary<TKey, TValue>Di2015NewLine{Di2015NewLine    IDictionary<TKey, TValue> dictionary = new Dictionary<TKey, TValue>();Di2015NewLineDi2015NewLine    //LOTS of other methods here, that are required by IDictionary<TKey, TValue>Di2015NewLine    //their implementation would be delegation to dictionary instanceDi2015NewLineDi2015NewLine    public TValue this[TKey key] //implementation of a interfaceDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return dictionary[key];Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            dictionary[key] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15571625Di2015UniqueSeparatorpublic class ModelDi2015NewLine{Di2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15571625Di2015UniqueSeparator       var ObColl = new ObservableCollection<Model>();Di2015NewLineDi2015NewLine        ObColl.Add(new Model() { Name = "John" });Di2015NewLine        ObColl.Add(new Model() { Name = "Karl" });Di2015NewLine        ObColl.Add(new Model() { Name = "Max" });Di2015NewLine        ObColl.Add(new Model() { Name = "Mary" });Di2015NewLine
15571625Di2015UniqueSeparator    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        // Collection which will take your ObservableCollectionDi2015NewLine        var _itemSourceList = new CollectionViewSource() { Source = ObColl };Di2015NewLineDi2015NewLine        // ICollectionView the View/UI part Di2015NewLine        ICollectionView Itemlist = _itemSourceList.View;Di2015NewLineDi2015NewLine        // your FilterDi2015NewLine        var yourCostumFilter= new Predicate<object>(item => ((Model)item).Name.Contains("Max"));Di2015NewLineDi2015NewLine        //now we add our FilterDi2015NewLine        Itemlist.Filter = yourCostumFilter;Di2015NewLineDi2015NewLine        dataGrid1.ItemsSource = Itemlist;Di2015NewLine    }Di2015NewLine
15571625Di2015UniqueSeparator    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        // Collection which will take your FilterDi2015NewLine        var _itemSourceList = new CollectionViewSource() { Source = ObColl };Di2015NewLineDi2015NewLine       //now we add our FilterDi2015NewLine       _itemSourceList.Filter += new FilterEventHandler(yourFilter);Di2015NewLineDi2015NewLine        // ICollectionView the View/UI part Di2015NewLine        ICollectionView Itemlist = _itemSourceList.View;Di2015NewLineDi2015NewLine        dataGrid1.ItemsSource = Itemlist;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void yourFilter(object sender, FilterEventArgs e)Di2015NewLine    {Di2015NewLine        var obj = e.Item as Model;Di2015NewLine        if (obj != null)Di2015NewLine        {Di2015NewLine            if (obj.Name.Contains("Max"))Di2015NewLine                e.Accepted = true;Di2015NewLine            elseDi2015NewLine                e.Accepted = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15571625Di2015UniqueSeparator    // your FilterDi2015NewLine    var yourComplexFilter= new Predicate<object>(ComplexFilter);Di2015NewLineDi2015NewLine    private bool ComplexFilter(object obj)Di2015NewLine    {Di2015NewLine        //your logicDi2015NewLine    }Di2015NewLine
15571648Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static TList BinaryFind<TList>(this IList<TList> list, Func<TList, int> comparer)Di2015NewLine    {Di2015NewLine        if (!list.Any())Di2015NewLine            return default(TList);Di2015NewLineDi2015NewLine        int pivot = list.Count()/2;Di2015NewLine        TList pivotVal = list[pivot];Di2015NewLine        int conditionResult = condition(pivotVal);Di2015NewLine        if (conditionResult == 0) Di2015NewLine            return pivotVal;Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            if (conditionResult < 0) Di2015NewLine                return BinaryFind<TList, TSearchArg>(list.Take(pivot).ToList(), condition);Di2015NewLine            elseDi2015NewLine                return BinaryFind<TList, TSearchArg>(list.Skip(pivot).ToList(), condition);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15571648Di2015UniqueSeparatorKeyframe result = _keyframes.BinaryFind(k => Double.Compare(k.Time, time));Di2015NewLine
15571663Di2015UniqueSeparatorXmlElements
15571663Di2015UniqueSeparatorXmlAttributes CreateXmlAttributesForHierarchyTypes()Di2015NewLine{Di2015NewLine    return XmlAttributesDi2015NewLine    {Di2015NewLine        XmlElements = Di2015NewLine        {Di2015NewLine            new XmlElementAttribute("t", typeof (TType)),Di2015NewLine            new XmlElementAttribute("p", typeof (PType)),Di2015NewLine            new XmlElementAttribute("s", typeof (SType)),Di2015NewLine            new XmlElementAttribute("a", typeof (AType)),Di2015NewLine            new XmlElementAttribute("u", typeof (UType)),Di2015NewLine        }Di2015NewLine    };Di2015NewLine}Di2015NewLine
15571663Di2015UniqueSeparatorType [] typesToOverride = new Type[] Di2015NewLine{Di2015NewLine    typeof(PType),Di2015NewLine    typeof(SType),Di2015NewLine    typeof(AType),Di2015NewLine    typeof(UType),Di2015NewLine    typeof(ItemCollection),Di2015NewLine};Di2015NewLine
15571663Di2015UniqueSeparatorXmlAttributeOverrides
15571663Di2015UniqueSeparatorhierarchyTypeElements
15571663Di2015UniqueSeparatorpublic static XmlAttributeOverrides GetAttributeOverrides(IEnumerable<Type> typesToOverride)Di2015NewLine{Di2015NewLine    var overrides = typesToOverrideDi2015NewLine        .SelectMany(x => x.GetFields())  // Get a flat list of fields from all the typesDi2015NewLine        .Where(f => f.FieldType == typeof (BaseType))  // Must have the right typeDi2015NewLine        .Select(f => newDi2015NewLine        {Di2015NewLine            Field = f,Di2015NewLine            Attributes = GetXmlAttributes(f)Di2015NewLine        })Di2015NewLine        .Where(f => f.Attributes != null)Di2015NewLine        .Aggregate(Di2015NewLine            new XmlAttributeOverrides(),Di2015NewLine            (ov, field) =>Di2015NewLine            { Di2015NewLine                ov.Add(field.Field.DeclaringType, field.Field.Name, field.Attributes); Di2015NewLine                return ov;Di2015NewLine            });Di2015NewLine    return overrides;Di2015NewLine}Di2015NewLine
15571663Di2015UniqueSeparatorAggregate
15571663Di2015UniqueSeparatorXmlAttributeOverrides
15571663Di2015UniqueSeparatorvar attrOverrides = GetAttributeOverrides(TypesToDecorate);Di2015NewLineserializer = new XmlSerializer(typeof(ItemCollection), attrOverrides);Di2015NewLine
15571672Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Xml.Linq;Di2015NewLineDi2015NewLinenamespace xmlTestDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            XDocument doc = XDocument.Load("C:\\\\Users\\\\me\\\\Desktop\\\\so.xml");Di2015NewLine            var personDataDetails = (from p in doc.Descendants().Elements()                                     Di2015NewLine                                     where p.Name.LocalName == "personData"Di2015NewLine                                         select p);Di2015NewLineDi2015NewLine            foreach (var item in personDataDetails)Di2015NewLine            {Di2015NewLine                Console.WriteLine(item.ToString());Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15571700Di2015UniqueSeparatorMailbox
15571700Di2015UniqueSeparatorMailboxDi2015NewLine______Di2015NewLineMailboxIdDi2015NewLineUserId -- who the mailbox belongs toDi2015NewLineMailboxTypeId -- is it an inbox, sent, drafts box...Di2015NewLine
15571700Di2015UniqueSeparatorMessageMailbox
15571700Di2015UniqueSeparatorMessageDi2015NewLine_______Di2015NewLineMessageIdDi2015NewLineMessageTextDi2015NewLine-- .. other fields, e.g. MessageDateDi2015NewLineDi2015NewLineDi2015NewLineMessageMailboxDi2015NewLine______________Di2015NewLineMailboxIdDi2015NewLineMessageIdDi2015NewLine
15571700Di2015UniqueSeparatorMessageMailbox
15571700Di2015UniqueSeparatorMessage
15571704Di2015UniqueSeparatorGridViewRow gvr = (GridViewRow)(((Button)e.CommandSource).NamingContainer);Di2015NewLineint index = gvr.RowIndex;Di2015NewLine
15571704Di2015UniqueSeparatorcommandArgument
15571704Di2015UniqueSeparatorEval("ScrapId")
15571704Di2015UniqueSeparatore
15571704Di2015UniqueSeparatorComandSource
15571704Di2015UniqueSeparatorNamingContainer
15571704Di2015UniqueSeparatorGridViewRow
15571704Di2015UniqueSeparatorGridViewRow
15571704Di2015UniqueSeparatorRowIndex
15571754Di2015UniqueSeparatorm_Head.Next
15571754Di2015UniqueSeparatorTake
15571754Di2015UniqueSeparatorInterlocked.Exchange(ref this.m_Head, this.m_Head.Next)
15571754Di2015UniqueSeparatorm_Head
15571754Di2015UniqueSeparatorTake
15571754Di2015UniqueSeparatorm_Head.Next
15571754Di2015UniqueSeparator==null
15571754Di2015UniqueSeparatorPut
15571754Di2015UniqueSeparatorm_Head.Next
15571754Di2015UniqueSeparator!=null
15571754Di2015UniqueSeparatorTake
15571754Di2015UniqueSeparatorm_Head
15571754Di2015UniqueSeparator==null
15571754Di2015UniqueSeparatorInterlocked.CompareExchange
15571754Di2015UniqueSeparatorPut
15571754Di2015UniqueSeparatorTake
15571754Di2015UniqueSeparatorTake
15571754Di2015UniqueSeparatorgoto retry;
15571754Di2015UniqueSeparatorPut
15571754Di2015UniqueSeparatorEntry.Sentinel
15571754Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLine#pragma warning disable 420Di2015NewLineDi2015NewLinenamespace Tychaia.ThreadingDi2015NewLine{Di2015NewLine    public class TaskPipeline<T>Di2015NewLine    {Di2015NewLine        private int? m_InputThread;Di2015NewLine        private int? m_OutputThread;Di2015NewLine        private volatile Entry m_Head;Di2015NewLineDi2015NewLine        private sealed class EntryDi2015NewLine        {Di2015NewLine            public static readonly Entry Sentinel = new Entry(default(T));Di2015NewLineDi2015NewLine            public readonly T Value;Di2015NewLine            public Entry Next;Di2015NewLineDi2015NewLine            public Entry(T value)Di2015NewLine            {Di2015NewLine                Value = value;Di2015NewLine                Next = null;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates a new TaskPipeline with the current thread beingDi2015NewLine        /// considered to be the input side of the pipeline.  TheDi2015NewLine        /// output thread should call Connect().Di2015NewLine        /// </summary>Di2015NewLine        public TaskPipeline()Di2015NewLine        {Di2015NewLine            this.m_InputThread = Thread.CurrentThread.ManagedThreadId;Di2015NewLine            this.m_OutputThread = null;Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Connects the current thread as the output of the pipeline.Di2015NewLine        /// </summary>Di2015NewLine        public void Connect()Di2015NewLine        {Di2015NewLine            if (this.m_OutputThread != null)Di2015NewLine                throw new InvalidOperationException("TaskPipeline can only have one output thread connected.");Di2015NewLine            this.m_OutputThread = Thread.CurrentThread.ManagedThreadId;Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Puts an item into the queue to be processed.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="value">Value.</param>Di2015NewLine        public void Put(T value)Di2015NewLine        {Di2015NewLine            if (this.m_InputThread != Thread.CurrentThread.ManagedThreadId)Di2015NewLine                throw new InvalidOperationException("Only the input thread may place items into TaskPipeline.");Di2015NewLineDi2015NewLine        retry:Di2015NewLine            // Walk the queued items until we find one thatDi2015NewLine            // has Next set to null.Di2015NewLine            var head = this.m_Head;Di2015NewLine            while (head != null)Di2015NewLine            {Di2015NewLine                if (head.Next != null)Di2015NewLine                    head = head.Next;Di2015NewLine                if (head.Next == null)Di2015NewLine                    break;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (head == null)Di2015NewLine            {Di2015NewLine                if (Interlocked.CompareExchange(ref m_Head, new Entry(value), null) != null)Di2015NewLine                    goto retry;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                if (Interlocked.CompareExchange(ref head.Next, new Entry(value), null) != null)Di2015NewLine                    goto retry;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Takes the next item from the pipeline, or blocks until an itemDi2015NewLine        /// is recieved.Di2015NewLine        /// </summary>Di2015NewLine        /// <returns>The next item.</returns>Di2015NewLine        public T Take()Di2015NewLine        {Di2015NewLine            if (this.m_OutputThread != Thread.CurrentThread.ManagedThreadId)Di2015NewLine                throw new InvalidOperationException("Only the output thread may retrieve items from TaskPipeline.");Di2015NewLineDi2015NewLine            // Wait until there is an item to take.Di2015NewLine            var spin = new SpinWait();Di2015NewLine            while (this.m_Head == null)Di2015NewLine                spin.SpinOnce();Di2015NewLineDi2015NewLine            // Return the item and exchange the current head withDi2015NewLine            // the next item, all in an atomic operation.Di2015NewLine            Entry head = m_Head;Di2015NewLine        retry:Di2015NewLine            Entry next = head.Next;Di2015NewLine            // replace m_Head.Next with a non-null sentinel to ensure Put won't try to reuse itDi2015NewLine            if (Interlocked.CompareExchange(ref head.Next, Entry.Sentinel, next) != next)Di2015NewLine                goto retry;Di2015NewLineDi2015NewLine            m_Head = next;Di2015NewLine            return head.Value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15571842Di2015UniqueSeparatorPanoramaItem currentItem = myPanorama.SelectedItem as PanoramaItem;Di2015NewLineif(currentItem != null)Di2015NewLine{Di2015NewLine   //if you want the name for other reasonsDi2015NewLine   string name = currentItem.Name;Di2015NewLineDi2015NewLine   //Items returns an ItemsCollection objectDi2015NewLine   myPanorama.Items.Remove(currentItem);       Di2015NewLine}Di2015NewLine
15571885Di2015UniqueSeparatorTask.FromResult
15571885Di2015UniqueSeparatorTask.FromResult(false)
15571885Di2015UniqueSeparatorpublic static Task FromResult<T>(T result)Di2015NewLine{Di2015NewLine    var tcs = new TaskCompletionSource<T>();Di2015NewLine    tcs.SetResult(result);Di2015NewLine    return tcs.Task;Di2015NewLine}Di2015NewLine
15571946Di2015UniqueSeparatorMessageBox.Show(dgv_cusData.SelectedRows[0].Index.ToString());Di2015NewLine
15571946Di2015UniqueSeparatorlbl_DetailsLabel.Text = "Details For "+ dgv_cusData.Rows(dgv_cusData.SelectedRows(0).Index).Cells[1].Value;Di2015NewLine
15571954Di2015UniqueSeparatorprivate void MeasureStringMin(PaintEventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    // Set up string. Di2015NewLine    string measureString = "Measure String";Di2015NewLine    Font stringFont = new Font("Arial", 16);Di2015NewLineDi2015NewLine    // Measure string.Di2015NewLine    SizeF stringSize = new SizeF();Di2015NewLine    stringSize = e.Graphics.MeasureString(measureString, stringFont);Di2015NewLineDi2015NewLine    // Draw rectangle representing size of string.Di2015NewLine    e.Graphics.DrawRectangle(new Pen(Color.Red, 1), 0.0F, 0.0F, stringSize.Width, stringSize.Height);Di2015NewLineDi2015NewLine    // Draw string to screen.Di2015NewLine    e.Graphics.DrawString(measureString, stringFont, Brushes.Black, new PointF(0, 0));Di2015NewLine}Di2015NewLine
15571959Di2015UniqueSeparatorViewModelBase
15571959Di2015UniqueSeparatorIsInDesignMode
15571959Di2015UniqueSeparatorMessengerInstance
15571959Di2015UniqueSeparatorINotifyPropertyChanged
15571959Di2015UniqueSeparatorINotifyPropertyChanged
15571959Di2015UniqueSeparatorObservableObject
15571959Di2015UniqueSeparatorObservableObject
15571959Di2015UniqueSeparatorViewModelBase
15571959Di2015UniqueSeparatorObservableObject
15572002Di2015UniqueSeparatorChart2.Parent.Parent.Cells(1).ActivateDi2015NewLine
15572264Di2015UniqueSeparatorfor (int i = listView1.Items.Count - 1; i >= 0; i--)Di2015NewLine{Di2015NewLine    if (listView1.Items[i].Selected)Di2015NewLine    {Di2015NewLine        listView1.Items[i].Remove();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15572264Di2015UniqueSeparatorif (listView1.SelectedItems.Count > 0)Di2015NewLine{Di2015NewLine    var confirmation = MessageBox.Show("Voulez vous vraiment supprimer les stagiaires sÃ©lÃ©ctionnÃ©s?", "Suppression", MessageBoxButtons.YesNo, MessageBoxIcon.Question);Di2015NewLine    if (confirmation == DialogResult.Yes)Di2015NewLine    {Di2015NewLine        for (int i = listView1.SelectedItems.Count - 1; i >= 0; i--)Di2015NewLine        {Di2015NewLine            ListViewItem itm = listView1.SelectedItems[i];Di2015NewLine            listView1.Items[itm.Index].Remove();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineelseDi2015NewLine    MessageBox.Show("aucin stagiaire selectionnes", ...);Di2015NewLine
15572807Di2015UniqueSeparator&
15572807Di2015UniqueSeparatorstring qs = "?artist=singer1+%26+singer2&song=name song"; Di2015NewLineNameValueCollection query = HttpUtility.ParseQueryString(qs);Di2015NewLine
15572963Di2015UniqueSeparatorNSPredicate findStringWithReference = NSPredicate.FromFormat("SELF CONTAINS [cd] %@", new NSObject[] {cRText.StringValue } );Di2015NewLinevar trackTraceContentFiltered = trackTraceContent.Filter(findStringWithReference);Di2015NewLine
15572963Di2015UniqueSeparatorvar array = new string[] { "one", "two", "three" };Di2015NewLinevar filteredResult = array.Where(x => x.Contains("ne");Di2015NewLine
15572987Di2015UniqueSeparatorSequenceEqual
15572987Di2015UniqueSeparatorreturn DbSet.Where(p => p.IdentificationCode.SequenceEqual(bytes)).FirstOrDefault();Di2015NewLine
15572987Di2015UniqueSeparatorreturn DbSet.Where(p => Di2015NewLine                 p.IdentificationCode.Length == bytes.Length && Di2015NewLine                 p.IdentificationCode.Intersect(bytes).Count() == p.IdentificationCode.Length)Di2015NewLine            .FirstOrDefault();Di2015NewLine
15572987Di2015UniqueSeparatorSequenceEqual
15572987Di2015UniqueSeparatorPatient
15573052Di2015UniqueSeparatorforeach (DataGridViewRow row in dataGridView1.Rows)Di2015NewLine        {Di2015NewLine            var now = DateTime.Now;Di2015NewLine            var expirationDate =  DateTime.Parse(row.Cells[0].Value.ToString());Di2015NewLine            var sevenDayBefore = expirationDate.AddDays(-7);Di2015NewLineDi2015NewLine            if (now > sevenDayBefore && now < expirationDate)Di2015NewLine            {Di2015NewLine                row.DefaultCellStyle.BackColor = Color.Yellow;Di2015NewLine            }Di2015NewLine            else if (now > expirationDate)Di2015NewLine            {Di2015NewLine                row.DefaultCellStyle.BackColor = Color.Red;    Di2015NewLine            }Di2015NewLine        }Di2015NewLine
15573212Di2015UniqueSeparatorFindControl
15573212Di2015UniqueSeparatorGridview
15573212Di2015UniqueSeparatorLabel lbl = gv.Rows[rowIndex].FindControl("lblComplete") as Label;Di2015NewLinelbl.Text = Convert.ToString(totalcomplete); Di2015NewLine
15573228Di2015UniqueSeparatorDbSet
15573228Di2015UniqueSeparatorToList()
15573228Di2015UniqueSeparatorISet
15573228Di2015UniqueSeparatorpublic static IList<ISet> BuildSet<T>() Di2015NewLine    where T : class, ISetDi2015NewLine{Di2015NewLine    using (var db = new somethingEntities())Di2015NewLine        return db.Set<T>().ToList();Di2015NewLine}Di2015NewLine
15573228Di2015UniqueSeparatorpublic IEnumerable<ISet> BuildSet<T>(this DbContext context)Di2015NewLine    where T : class, ISetDi2015NewLine{Di2015NewLine    return context.Set<T>().AsEnumerable();Di2015NewLine}Di2015NewLine
15573228Di2015UniqueSeparatorpublic void SomeOperation()Di2015NewLine{Di2015NewLine    using (var db = new somethingEntities())Di2015NewLine    {Di2015NewLine        foreach (var item in db.BuildSet<SimpleSet>())Di2015NewLine        {Di2015NewLine            //do something with itemDi2015NewLine            //SaveChanges() every 100 rows or whateverDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15573395Di2015UniqueSeparator// choose from existng:Di2015NewLinevar data = (from a in Table.AsEnumerable()Di2015NewLine             select new ValueHolderDi2015NewLine             {Di2015NewLine                 Name = a.Field<string>("Colour")Di2015NewLine             }).Distinct().OrderBy(p => p.Name).ToList(); Di2015NewLine// your ownDi2015NewLinevar data = new List<ValueHolder>();Di2015NewLinedata.Add(new ValueHolder("Red"));Di2015NewLinedata.Add(new ValueHolder("Yellow"));Di2015NewLine//..................Di2015NewLineDi2015NewLinevar column = new DataGridViewComboBoxColumn();      Di2015NewLinecolumn.DataSource = data; Di2015NewLinecolumn.ValueMember = "Name"; Di2015NewLinecolumn.DisplayMember = "Name"; Di2015NewLineDi2015NewLinedataGridView1.Columns.Add(column); Di2015NewLine
15573395Di2015UniqueSeparatorclass ValueHolderDi2015NewLine{Di2015NewLine  public string Name{get;set;}Di2015NewLineDi2015NewLine   public ValueHolder(string name)Di2015NewLine   {Di2015NewLine     this.Name = name;Di2015NewLine   }Di2015NewLineDi2015NewLine  // this part may not be necessary without nulls:Di2015NewLine  //public override bool Equals(object obj)Di2015NewLine  //      {Di2015NewLine  //          ValueHolder other = obj as ValueHolder;Di2015NewLine  //          if (other.Name.Equals(this.Name)) return true;Di2015NewLine  //          return false;Di2015NewLine  //      }Di2015NewLineDi2015NewLine  //      public override int GetHashCode()Di2015NewLine  //      {Di2015NewLine  //          return Name == null ? 0 : Name.GetHashCode();Di2015NewLine  //      } Di2015NewLine}Di2015NewLine
15573611Di2015UniqueSeparatorparser
15573611Di2015UniqueSeparatorRenderListener
15573611Di2015UniqueSeparatorRenderImage
15573611Di2015UniqueSeparatorPdfStamper
15573846Di2015UniqueSeparatorPerson john = new Person.Builder()Di2015NewLine    .SetFirstName("John")Di2015NewLine    .SetLastName("Doe")Di2015NewLine    .Build(); //creates an immutable personDi2015NewLine
15573846Di2015UniqueSeparatorRectangle rect = RectangleBuilder.MakeSquare(10).Build();Di2015NewLineCar car = CarBuilder.MakeVolvo().PimpIt().SetColor(Color.Red).Build();Di2015NewLine
15573862Di2015UniqueSeparatorGpsPosition
15573862Di2015UniqueSeparator[DataContract]
15573862Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class GpsPositionDi2015NewLine{Di2015NewLine    private float _lat;Di2015NewLine    private float _lon;Di2015NewLine    private bool _latWasSet;Di2015NewLine    private bool _lonWasSet;Di2015NewLineDi2015NewLine    public GpsPosition(float lat, float lon)Di2015NewLine    {Di2015NewLine        _lat = lat;Di2015NewLine        _lon = lon;Di2015NewLine    }Di2015NewLineDi2015NewLine    [DataMember]Di2015NewLine    public float latDi2015NewLine    {Di2015NewLine        get { return _lat; }Di2015NewLine        private setDi2015NewLine        {Di2015NewLine            _lat = value;Di2015NewLine            _latWasSet = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [DataMember]Di2015NewLine    public float lonDi2015NewLine    {Di2015NewLine        get { return _lon; }Di2015NewLine        private setDi2015NewLine        {Di2015NewLine            _lon = value;Di2015NewLine            _lonWasSet = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [OnDeserialized]Di2015NewLine    void OnDeserialized(StreamingContext ctx)Di2015NewLine    {Di2015NewLine        if (!_latWasSet || _!lonWasSet ||Di2015NewLine            _lat < -90 || _lat > 90 ||Di2015NewLine            _lon < -180 || _lon > 180)Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException("Required property is missing");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15573880Di2015UniqueSeparatorMembership.CreateUser()
15573936Di2015UniqueSeparatorInvoke
15573936Di2015UniqueSeparatorBeginInvoke
15573936Di2015UniqueSeparatorInvoke
15574420Di2015UniqueSeparatorText
15574420Di2015UniqueSeparatorErrorMessage
15574496Di2015UniqueSeparatorDataReader.Read
15574496Di2015UniqueSeparatornull
15574496Di2015UniqueSeparatorInvoke
15574496Di2015UniqueSeparatorvar value = generic.Invoke( null, new object[] {info.Name, reader} );Di2015NewLine
15574586Di2015UniqueSeparator   while (dataReader.Read())Di2015NewLine   {Di2015NewLine        // at every loop, create a new instance of dictionary using the same variableDi2015NewLine        Dictionary<string,string> selectResult = new Dictionary<string, string>();Di2015NewLine        for (int i = 0; i < dataReader.FieldCount; i++)Di2015NewLine        {Di2015NewLine            selectResult.Add(dataReader.GetName(i).ToString(), dataReader.GetValue(i).ToString());Di2015NewLine        }Di2015NewLine        // Adding a different copy of the dictionary in the listDi2015NewLine        allResults.Add(selectResult);Di2015NewLine    }Di2015NewLine
15574586Di2015UniqueSeparator    DataTable dt = new DataTable();Di2015NewLine    dt.Load(dataReader);Di2015NewLine
15574876Di2015UniqueSeparatorprivate void list_MouseDown(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    if ( e.Clicks == 2 )Di2015NewLine        list_MouseDoubleClick(sender, e);Di2015NewLine}Di2015NewLine
15574884Di2015UniqueSeparatorKeyPress
15574884Di2015UniqueSeparatorKeyPressEventArgs.Handled
15574971Di2015UniqueSeparator<Application x:Class="WpfApplication2.App"Di2015NewLine         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine         StartupUri="MainWindow.xaml">Di2015NewLine</Application>Di2015NewLine
15574971Di2015UniqueSeparator public partial class App : ApplicationDi2015NewLine {Di2015NewLine    Window mainWindow; // the instance of your main windowDi2015NewLineDi2015NewLine    protected override void OnStartup(StartupEventArgs e)Di2015NewLine    {Di2015NewLine        mainWindow = new MainWindow();Di2015NewLine        mainWindow.Show();Di2015NewLine    }Di2015NewLine }Di2015NewLine
15574974Di2015UniqueSeparatorcodesarray
15574974Di2015UniqueSeparatordetailcollection.Where (x=> !codesarray.Contains(x.ope_idsku))Di2015NewLine
15575021Di2015UniqueSeparatorGetUserId(string username, bool userIsOnline)
15575021Di2015UniqueSeparatorpublic Guid GetUserId(string username, bool userIsOnline) {Di2015NewLine    using(PrincipalContext pc = new PrincipalContext(ContextType.Domain, "[active directory domain here]")) {Di2015NewLine        var user = UserPrincipal.FindByIdentity(pc, IdentityType.SamAccountName, username);Di2015NewLine        if(user != null)Di2015NewLine            return user.Guid.Value;Di2015NewLine        elseDi2015NewLine            return null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15575021Di2015UniqueSeparatorValidateUser(string userName, string password)
15575021Di2015UniqueSeparatorValidateCredentials()
15575021Di2015UniqueSeparatorPrinicalContext
15575021Di2015UniqueSeparatorpublic bool ValidateUser(string userName, string password) {Di2015NewLine    using (PrincipalContext pc = new PrincipalContext(ContextType.Domain, "[active directory domain here]"))Di2015NewLine    {Di2015NewLine        return pc.ValidateCredentials(userName, password);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15575021Di2015UniqueSeparatorGetUserId()
15575043Di2015UniqueSeparatorpublic interface IDual<TPoint, TDualPoint> Di2015NewLine    where TPoint: IPoint<TPoint>, IDual<TPoint, TDualPoint>Di2015NewLine    where TDualPoint: IPoint<TDualPoint>, IDual<TDualPoint, TPoint>Di2015NewLine{}Di2015NewLine
15575043Di2015UniqueSeparatorpublic interface IPoint<TPoint> Di2015NewLine   where TPoint:IPoint<TPoint> Di2015NewLine{}Di2015NewLineclass TriPoint : IPoint<TriPoint>, IDual<TriPoint,HexPoint>Di2015NewLine{}Di2015NewLineclass HexPoint : IPoint<HexPoint>, IDual<HexPoint,TriPoint> Di2015NewLine{Di2015NewLine   // Normally you would rotate the pointDi2015NewLine   public HexPoint Rotate240(){ return new HexPoint();} Di2015NewLine}Di2015NewLine
15575043Di2015UniqueSeparatorinterface IGrid<TPoint, TDualPoint> Di2015NewLine   where TPoint: IPoint<TPoint>, IDual<TPoint, TDualPoint>  Di2015NewLine   where TDualPoint : IPoint<TDualPoint>, IDual<TDualPoint, TPoint> Di2015NewLine{Di2015NewLine    TDualPoint GetDualPoint(TPoint point);Di2015NewLine}Di2015NewLineclass HexGrid : IGrid<HexPoint, TriPoint>Di2015NewLine{Di2015NewLine    public TriPoint GetDualPoint(HexPoint point)Di2015NewLine    {Di2015NewLine        return new TriPoint();Di2015NewLine    }Di2015NewLine}Di2015NewLineclass TriGrid : IGrid<TriPoint, HexPoint> Di2015NewLine{Di2015NewLine    public HexPoint GetDualPoint(TriPoint point)Di2015NewLine    {Di2015NewLine        return new HexPoint();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15575043Di2015UniqueSeparatorstatic class AlgorithmsDi2015NewLine{  Di2015NewLine   public static IEnumerable<TPoint> TransformShape<TPoint, TDualPoint>(Di2015NewLine      IEnumerable<IDual<TPoint, TDualPoint>> shape, Di2015NewLine      Func<TPoint, TPoint> transform)Di2015NewLine   where TPoint : IPoint<TPoint>, IDual<TPoint, TDualPoint>   Di2015NewLine   where TDualPoint : IPoint<TDualPoint>, IDual<TDualPoint, TPoint> Di2015NewLine   {Di2015NewLine      return Di2015NewLine         from TPoint point in shapeDi2015NewLine            select transform(point);Di2015NewLine   }Di2015NewLineDi2015NewLine   public static IEnumerable<TPoint> TransformShape<TPoint, TDualPoint>(Di2015NewLine      IGrid<TPoint, TDualPoint> grid, Di2015NewLine      IEnumerable<IDual<TPoint, TDualPoint>> shape, Di2015NewLine      Func<TPoint, TPoint> transform)Di2015NewLine   where TPoint : IPoint<TPoint>, IDual<TPoint, TDualPoint>   Di2015NewLine   where TDualPoint : IPoint<TDualPoint>, IDual<TDualPoint, TPoint> Di2015NewLine   {Di2015NewLine      return Di2015NewLine         from TPoint point in shapeDi2015NewLine            //where transform(point) is in gridDi2015NewLine            select transform(point);Di2015NewLine   }Di2015NewLine}Di2015NewLine
15575043Di2015UniqueSeparator  HexGrid hexGrid = new HexGrid();      Di2015NewLine  List<HexPoint> hexPointShape = new List<HexPoint>(); //Add some itemsDi2015NewLineDi2015NewLine  //CompilesDi2015NewLine  var rotatedShape1 = AlgorithmsDi2015NewLine      .TransformShape(Di2015NewLine     hexGrid,Di2015NewLine     hexPointShape, Di2015NewLine     point => point.Rotate240())Di2015NewLine    .ToList();Di2015NewLineDi2015NewLine  //Compiles   Di2015NewLine  var rotatedShape2 = AlgorithmsDi2015NewLine      .TransformShape<HexPoint, TriPoint>(Di2015NewLine     hexPointShape, Di2015NewLine     point => point.Rotate240())Di2015NewLine    .ToList();     Di2015NewLineDi2015NewLine  //Did not compile, but does now!Di2015NewLine  var rotatedShape3 = AlgorithmsDi2015NewLine      .TransformShape(Di2015NewLine      hexPointShape, Di2015NewLine      point => point.Rotate240())Di2015NewLine    .ToList();Di2015NewLine
15575045Di2015UniqueSeparatorDataContext
15575045Di2015UniqueSeparator<TextBox Text="{Binding EmailAddress}" />
15575045Di2015UniqueSeparatorDataContext
15575045Di2015UniqueSeparatorTextBox
15575045Di2015UniqueSeparatorEmailAddress
15575045Di2015UniqueSeparatorDataContext
15575045Di2015UniqueSeparatorDataContext
15575045Di2015UniqueSeparatorpublic SomeConstructor()Di2015NewLine{Di2015NewLine    this.InitializeComponent();Di2015NewLine    this.DataContext = ApplicationParameters.Instance;Di2015NewLine}Di2015NewLine
15575045Di2015UniqueSeparatorDataContext
15575045Di2015UniqueSeparatorElementName
15575045Di2015UniqueSeparatorSource
15575045Di2015UniqueSeparatorSingleton
15575045Di2015UniqueSeparatorText="{Binding Path=EmailAddress, Di2015NewLine               Source={x:Static my:ApplicationParameters.Instance}}"Di2015NewLine
15575045Di2015UniqueSeparatorApplicationParameters.Instance.EmailAddress
15575045Di2015UniqueSeparator<Window ... xmlns:my="clr-namespace:MyNamespace" />Di2015NewLine
15575045Di2015UniqueSeparatorDataContext
15575045Di2015UniqueSeparatorTextBlock
15575045Di2015UniqueSeparatorApplicationParameters.Instance
15575045Di2015UniqueSeparatorEmailAddress
15575106Di2015UniqueSeparatorGeneralPropertyMap<T>
15575106Di2015UniqueSeparatorpublic class GeneralPropertyMap<T> : GeneralPropertyMapDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class GeneralPropertyMapDi2015NewLine{Di2015NewLine    // Only you can implement it:Di2015NewLine    internal GeneralPropertyMap() { }Di2015NewLine}Di2015NewLine
15575106Di2015UniqueSeparatorprivate void TakeGeneralPropertyMap(GeneralPropertyMap[] maps)Di2015NewLine{Di2015NewLine}Di2015NewLine
15575106Di2015UniqueSeparatorGeneralPropertyMap[] maps = new GeneralPropertyMap[3];Di2015NewLinemaps[0] = new GeneralPropertyMap<String>();Di2015NewLinemaps[1] = new GeneralPropertyMap<Integer>();Di2015NewLinemaps[2] = new GeneralPropertyMap<Double>();Di2015NewLineTakeGeneralPropertyMap(maps);Di2015NewLine
15575141Di2015UniqueSeparatorName
15575141Di2015UniqueSeparator[DataMember]
15575141Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class User : ICloneable  Di2015NewLine{Di2015NewLine    [DataMember(Name = "login")]Di2015NewLine    [JsonProperty(PropertyName = "login")]Di2015NewLine    [StringLength(40, ErrorMessage = "The Login value cannot exceed 40 characters. ")]Di2015NewLine    [DefaultValue("")]Di2015NewLine    public String Login { get; set; }Di2015NewLineDi2015NewLine    [DataMember(Name = "id")]Di2015NewLine    [JsonProperty(PropertyName = "id")]Di2015NewLine    public int UserId { get; set; }Di2015NewLine}Di2015NewLine
15575141Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class UserDi2015NewLine{Di2015NewLine    [DataMember]Di2015NewLine    public String Login { get; set; }Di2015NewLine    [DataMember]Di2015NewLine    private String login { get { return this.Login; } set { this.Login = value; } }Di2015NewLineDi2015NewLine    [DataMember]Di2015NewLine    public int UserId { get; set; }Di2015NewLine    [DataMember]Di2015NewLine    private int id { get { return this.UserId; } set { this.UserId = value; } }Di2015NewLine}Di2015NewLine
15575292Di2015UniqueSeparatorpublic void ExecuteAction([InstantHandle] Action action)Di2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLine
15575324Di2015UniqueSeparatorif (dateTo.Minute > 30)Di2015NewLine   minToInt = 30;Di2015NewLineelseDi2015NewLine   minToInt = 00;Di2015NewLineDi2015NewLinedateFrom = DateTime.Now;Di2015NewLinedateTo = DateTime.Now;     Di2015NewLineDi2015NewLineDateTime dateFrom = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, dateFrom.Hour, 00, 00);Di2015NewLineDateTime dateTo = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, dateTo.Hour, minToInt, 00);Di2015NewLineDi2015NewLine////////FROM DATE/////////Di2015NewLineOracleParameter fromDateParameter = new OracleParameter();Di2015NewLinefromDateParameter.OracleDbType = OracleDbType.Date;Di2015NewLinefromDateParameter.Value = dateFrom;Di2015NewLineDi2015NewLine////////TO DATE/////////Di2015NewLineOracleParameter toDateParameter = new OracleParameter();Di2015NewLinetoDateParameter.OracleDbType = OracleDbType.Date;Di2015NewLinetoDateParameter.Value = dateTo;Di2015NewLineDi2015NewLineDi2015NewLinethis.oracleDataAdapter4.SelectCommand = new OracleCommand("Di2015NewLine   SELECT DISTINCT (LOG.RID) FROM LOG WHERE LOG.TIMESTAMP Di2015NewLine   BETWEEN :fromDateParameter Di2015NewLine   AND :fromDateParameter)", oracleConnection4);Di2015NewLineDi2015NewLineoracleDataAdapter4.SelectCommand.Parameters.Add(fromDateParameter);           Di2015NewLineoracleDataAdapter4.SelectCommand.Parameters.Add(toDateParameter);  Di2015NewLinethis.oracleDataAdapter4.Fill(event11);Di2015NewLine
15575335Di2015UniqueSeparatorreturn zzztest()Di2015NewLine
15575408Di2015UniqueSeparatorvar LstPerson = new Array();Di2015NewLinevar person = {};Di2015NewLineDi2015NewLineperson.Id = 1Di2015NewLineperson.name = 'abc'Di2015NewLineDi2015NewLineLstPerson.push(person)Di2015NewLineDi2015NewLinevar param = JSON.stringify(LstPerson); Di2015NewLine
15575408Di2015UniqueSeparator[WebInvoke(Method = "POST", BodyStyle = WebMessageBodyStyle.Bare, Di2015NewLine        RequestFormat=WebMessageFormat.Json, ResponseFormat=WebMessageFormat.Json)]Di2015NewLinepublic Person InsertPerson(List<Person> per)Di2015NewLine
15575512Di2015UniqueSeparatorPRISM WPF Development With MEF
15575709Di2015UniqueSeparatorwhere T : struct
15575709Di2015UniqueSeparatorIEnumerable<char> <==> String
15575709Di2015UniqueSeparatorstring
15575709Di2015UniqueSeparatorchar[]
15575709Di2015UniqueSeparatorstring
15575709Di2015UniqueSeparatorIEnumerable<char>
15575709Di2015UniqueSeparator"foo"
15575709Di2015UniqueSeparatorIEnumerable<bar>
15575709Di2015UniqueSeparatorbar
15575756Di2015UniqueSeparatorG
15575756Di2015UniqueSeparatorselectedValue
15575756Di2015UniqueSeparatordecimal
15575756Di2015UniqueSeparatorvar number = decimal.Parse(selectedValue.Replace("G", ""));Di2015NewLineif (number >= 1.0m && number <= 2.5m)Di2015NewLine{Di2015NewLine    // logic hereDi2015NewLine}Di2015NewLine
15575921Di2015UniqueSeparatorTrace.AutoFlush = true;Di2015NewLine
15575922Di2015UniqueSeparatorpublic class Object1Di2015NewLine{Di2015NewLine    public Object1()Di2015NewLine    {Di2015NewLine        this.Parameters = new List<string>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public TimeSpan? Time { get; set; }Di2015NewLineDi2015NewLine    public List<string> Parameters { get; set; }Di2015NewLineDi2015NewLine    public string ParamDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return string.Join(",", this.Parameters.OrderBy(o => o).ToArray());Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
15575922Di2015UniqueSeparatorvar query = list1.Concat(list2)Di2015NewLine             .GroupBy(x => x.Param) // <- Changed with the new propertiesDi2015NewLine             .Select(g => g.OrderByDescending(x => x.Time).First())Di2015NewLine             .ToList();Di2015NewLine
15575944Di2015UniqueSeparatordate
15575944Di2015UniqueSeparator[date]
15575944Di2015UniqueSeparator"select price, date from Price where Price_type = '{0}' order by date)"Di2015NewLine
15575944Di2015UniqueSeparator"select price, date from Price where Price_type = '{0}' order by date"Di2015NewLine
15575962Di2015UniqueSeparator$(document).ready(function(){Di2015NewLine    $("#<%=apiversion.ClientID%>").attr("name","apiversion");Di2015NewLine});Di2015NewLine
15575962Di2015UniqueSeparatorvar arrayOfNames=[];Di2015NewLinevar actualName=$("#<%=apiversion.ClientID%>").attr("name");Di2015NewLinearrayOfNames=actualName.split('$');Di2015NewLineDi2015NewLinevar whatYouActuallyWant=arrayOfNames[2];// This is the name you have without master page.Di2015NewLine
15575962Di2015UniqueSeparatorfunction pageLoad(sender,args){Di2015NewLine     $("#<%=apiversion.ClientID%>").attr("name","apiversion");Di2015NewLine}Di2015NewLine
15576048Di2015UniqueSeparatorTaskCompletionSource<T>
15576048Di2015UniqueSeparatorTask Latent()Di2015NewLine{Di2015NewLine  var tcs = new TaskCompletionSource<object>();Di2015NewLineDi2015NewLine  ... // Apply some logic here to eventually call "tcs.TrySetResult".Di2015NewLineDi2015NewLine  return tcs.Task;Di2015NewLine}Di2015NewLine
15576048Di2015UniqueSeparatorpublic async Task Do1()Di2015NewLine{Di2015NewLine  Console.WriteLine("Do1::Before");Di2015NewLine  await Latent();Di2015NewLine  Console.WriteLine("Do1::After");Di2015NewLine}Di2015NewLine
15576189Di2015UniqueSeparatoryield
15576189Di2015UniqueSeparatoryield
15576189Di2015UniqueSeparatorpartial
15576189Di2015UniqueSeparatorprivate int _;Di2015NewLineprivate string __;Di2015NewLine// etcDi2015NewLine
15576189Di2015UniqueSeparatoryield
15576279Di2015UniqueSeparatorItemListWrapper
15576279Di2015UniqueSeparatorpublic class ItemListWrapperDi2015NewLine{Di2015NewLine    public List<Item> Contents;Di2015NewLineDi2015NewLine    public void Add(Item item){ item.List = this; this.Contents.Add(item); }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ItemDi2015NewLine{Di2015NewLine   ItemListWrapper List;Di2015NewLine   void DoStuffAndRemove() { this.List.Contents.Remove(this); }Di2015NewLine}Di2015NewLine
15576279Di2015UniqueSeparatorpublic class ItemListWrapperDi2015NewLine{Di2015NewLine    public List<Item> Contents;Di2015NewLineDi2015NewLine    public void DoStuffAndRemove(Item item)Di2015NewLine    { Di2015NewLine        if(this.Contents.Contains(item))Di2015NewLine        {Di2015NewLine            item.DoStuff();Di2015NewLine            this.Contents.Remove(item);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ItemDi2015NewLine{Di2015NewLine   void DoStuff() { ... }Di2015NewLine}Di2015NewLine
15576358Di2015UniqueSeparatorWhatEver.dll.config
15576358Di2015UniqueSeparatorWhatEver.dll.config
15576542Di2015UniqueSeparatorTextBox
15576542Di2015UniqueSeparatorComboBox
15576542Di2015UniqueSeparatorLostFocus
15576542Di2015UniqueSeparator        private void comboBox8_Loaded(object sender, RoutedEventArgs e)Di2015NewLine        {Di2015NewLine            TextBox tb = (TextBox)(sender as ComboBox).Template.FindName("PART_EditableTextBox", (sender as ComboBox));Di2015NewLine            if (tb != null)Di2015NewLine                tb.LostFocus += new RoutedEventHandler(tb_LostFocus);Di2015NewLine        }Di2015NewLineDi2015NewLine        void tb_LostFocus(object sender, RoutedEventArgs e)Di2015NewLine        {Di2015NewLine            ...Di2015NewLine            else if (8int <= 7int && 8int >= 100)Di2015NewLine            {Di2015NewLine                MessageBox.Show("Error description", "Error!", MessageBoxButton.OK, MessageBoxImage.Information);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            ...Di2015NewLine        }Di2015NewLine
15576732Di2015UniqueSeparator<a href="http://google.com">Link to Google</a>Di2015NewLine
15576732Di2015UniqueSeparatorpublic static class ExternalLinkHelperDi2015NewLine{Di2015NewLine    public static MvcHtmlString ExternalLink(this HtmlHelper htmlHelper, string linkText, string externalUrl)Di2015NewLine    {Di2015NewLine        TagBuilder tagBuilder = new TagBuilder("a");Di2015NewLine        tagBuilder.Attributes["href"] = externalUrl;Di2015NewLine        tagBuilder.InnerHtml = linkText;Di2015NewLine        return new MvcHtmlString(tagBuilder.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
15576732Di2015UniqueSeparator@Html.ExternalLink("Link to Google", "http://google.com")Di2015NewLine
15576849Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var token = new CancellationTokenSource();Di2015NewLine        var t = Task.Factory.StartNew(Di2015NewLine            o =>Di2015NewLine            {Di2015NewLine                while (true)Di2015NewLine                    Console.WriteLine("{0}: Processing", DateTime.Now);Di2015NewLine            }, token);Di2015NewLineDi2015NewLine        token.CancelAfter(1000);Di2015NewLine        t.Wait(token.Token);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15576928Di2015UniqueSeparatorstring progFiles = @"C:\\Program Files\\Common Files\\Microsoft Shared\\ink";Di2015NewLinestring keyboardPath = Path.Combine(progFiles, "TabTip.exe");Di2015NewLineDi2015NewLinethis.keyboardProc = Process.Start(keyboardPath);Di2015NewLine
15576952Di2015UniqueSeparatorstores.Stores.Where(o=>o.CompanyID==curCompany.ID).ToList()
15577003Di2015UniqueSeparatorif(lvBrands.SelectedItems.Count > 0)Di2015NewLine{Di2015NewLine//you have something selectedDi2015NewLine}Di2015NewLine
15577038Di2015UniqueSeparatorinterface IViolationFinderDi2015NewLine{Di2015NewLine    IEnumerable<Violation> Search(Di2015NewLine        IEnumerable<RuleDefinition> ruleDefinitions, Di2015NewLine        IEnumerable<Request> requests);Di2015NewLine}Di2015NewLine
15577038Di2015UniqueSeparatorclass ViolationFinder : IViolationFinderDi2015NewLine{Di2015NewLine    public IEnumerable<Violation> Search(IEnumerable<RuleDefinition> ruleDefinitions, IEnumerable<Request> requests)Di2015NewLine    {Di2015NewLine        var violations = new List<Violation>();Di2015NewLine        foreach (var rule in ruleDefinitions)Di2015NewLine        {Di2015NewLine            var requestsMatchingType = requests.Where(r => r.TypeOfThisRequest == rule.ConcerningRequestType);Di2015NewLine            foreach (var firstRequest in requestsMatchingType)Di2015NewLine            {Di2015NewLine                var collidingRequest = requests.FirstOrDefault(secondRequest =>Di2015NewLine                    secondRequest.TimeIndex > firstRequest.TimeIndex &&Di2015NewLine                    Math.Abs(secondRequest.TimeIndex - firstRequest.TimeIndex) < rule.MinimumDistanceBetweenRequests);Di2015NewLineDi2015NewLine                if (collidingRequest != null)Di2015NewLine                {Di2015NewLine                    violations.Add(new ViolationDi2015NewLine                    {Di2015NewLine                        ViolatedRule = rule,Di2015NewLine                        FirstRequest = firstRequest,Di2015NewLine                        SecondRequest = collidingRequestDi2015NewLine                    });Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return violations;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577038Di2015UniqueSeparatorclass ViolationFinder : IViolationFinderDi2015NewLine{Di2015NewLine    public IEnumerable<Violation> Search(IEnumerable<RuleDefinition> ruleDefinitions, IEnumerable<Request> requests)Di2015NewLine    {Di2015NewLine        var violations = new List<Violation>();Di2015NewLine        foreach (RuleDefinition rule in ruleDefinitions)Di2015NewLine        {Di2015NewLine            IEnumerable<Request> requestsMatchingType = requests.Where(r => r.TypeOfThisRequest == rule.ConcerningRequestType);Di2015NewLine            violations.AddRange(Di2015NewLine                FindViolationsInRequests(requestsMatchingType, requests, rule));Di2015NewLine        }Di2015NewLineDi2015NewLine        return violations;Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<Violation> FindViolationsInRequests(Di2015NewLine        IEnumerable<Request> matchingRequests,Di2015NewLine        IEnumerable<Request> allRequest,Di2015NewLine        RuleDefinition rule)Di2015NewLine    {Di2015NewLine        foreach (Request firstRequest in matchingRequests)Di2015NewLine        {Di2015NewLine            var collidingRequest = allRequest.FirstOrDefault(secondRequest =>Di2015NewLine                secondRequest.TimeIndex > firstRequest.TimeIndex &&Di2015NewLine                Math.Abs(secondRequest.TimeIndex - firstRequest.TimeIndex) < rule.MinimumDistanceBetweenRequests);Di2015NewLineDi2015NewLine            if (collidingRequest != null)Di2015NewLine            {Di2015NewLine                yield return new ViolationDi2015NewLine                {Di2015NewLine                    ViolatedRule = rule,Di2015NewLine                    FirstRequest = firstRequest,Di2015NewLine                    SecondRequest = collidingRequestDi2015NewLine                };Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577038Di2015UniqueSeparatorclass ViolationFinder : IViolationFinderDi2015NewLine{Di2015NewLine    public IEnumerable<Violation> Search(IEnumerable<RuleDefinition> ruleDefinitions, IEnumerable<Request> requests)Di2015NewLine    {Di2015NewLine        var violations = new List<Violation>();Di2015NewLine        foreach (RuleDefinition rule in ruleDefinitions)Di2015NewLine        {Di2015NewLine            violations.AddRange(FindViolationsInRequests(requests, rule));Di2015NewLine        }Di2015NewLineDi2015NewLine        return violations;Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<Violation> FindViolationsInRequests(Di2015NewLine        IEnumerable<Request> allRequest,Di2015NewLine        RuleDefinition rule)Di2015NewLine    {Di2015NewLine        foreach (Request firstRequest in FindMatchingRequests(allRequest, rule))Di2015NewLine        {Di2015NewLine            var collidingRequest = allRequest.FirstOrDefault(secondRequest =>Di2015NewLine                secondRequest.TimeIndex > firstRequest.TimeIndex &&Di2015NewLine                Math.Abs(secondRequest.TimeIndex - firstRequest.TimeIndex) < rule.MinimumDistanceBetweenRequests);Di2015NewLineDi2015NewLine            if (collidingRequest != null)Di2015NewLine            {Di2015NewLine                yield return new ViolationDi2015NewLine                {Di2015NewLine                    ViolatedRule = rule,Di2015NewLine                    FirstRequest = firstRequest,Di2015NewLine                    SecondRequest = collidingRequestDi2015NewLine                };Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<Request> FindMatchingRequests(IEnumerable<Request> requests, RuleDefinition rule)Di2015NewLine    {Di2015NewLine        return requests.Where(r => r.TypeOfThisRequest == rule.ConcerningRequestType);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577038Di2015UniqueSeparator    var collidingRequest = allRequest.FirstOrDefault(secondRequest =>Di2015NewLine        secondRequest.TimeIndex > firstRequest.TimeIndex &&Di2015NewLine        Math.Abs(secondRequest.TimeIndex - firstRequest.TimeIndex) < rule.MinimumDistanceBetweenRequests);Di2015NewLine
15577038Di2015UniqueSeparatorclass ViolationFinder : IViolationFinderDi2015NewLine{Di2015NewLine    public IEnumerable<Violation> Search(IEnumerable<RuleDefinition> ruleDefinitions, IEnumerable<Request> requests)Di2015NewLine    {Di2015NewLine        var violations = new List<Violation>();Di2015NewLineDi2015NewLine        foreach (RuleDefinition rule in ruleDefinitions)Di2015NewLine        {Di2015NewLine            violations.AddRange(FindViolationsInRequests(requests, rule));Di2015NewLine        }Di2015NewLineDi2015NewLine        return violations;Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<Violation> FindViolationsInRequests(Di2015NewLine        IEnumerable<Request> allRequest,Di2015NewLine        RuleDefinition rule)Di2015NewLine    {Di2015NewLine        foreach (Request firstRequest in FindMatchingRequests(allRequest, rule))Di2015NewLine        {Di2015NewLineDi2015NewLine            Request collidingRequest = FindCollidingRequest(allRequest, firstRequest, rule.MinimumDistanceBetweenRequests);Di2015NewLineDi2015NewLine            if (collidingRequest != null)Di2015NewLine            {Di2015NewLine                yield return new ViolationDi2015NewLine                {Di2015NewLine                    ViolatedRule = rule,Di2015NewLine                    FirstRequest = firstRequest,Di2015NewLine                    SecondRequest = collidingRequestDi2015NewLine                };Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<Request> FindMatchingRequests(IEnumerable<Request> requests, RuleDefinition rule)Di2015NewLine    {Di2015NewLine        return requests.Where(r => r.TypeOfThisRequest == rule.ConcerningRequestType);Di2015NewLine    }Di2015NewLineDi2015NewLine    private Request FindCollidingRequest(IEnumerable<Request> requests, Request firstRequest, int minimumDistanceBetweenRequests)Di2015NewLine    {Di2015NewLine        return requests.FirstOrDefault(secondRequest => IsCollidingRequest(firstRequest, secondRequest, minimumDistanceBetweenRequests));Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool IsCollidingRequest(Request firstRequest, Request secondRequest, int minimumDistanceBetweenRequests)Di2015NewLine    {Di2015NewLine        return secondRequest.TimeIndex > firstRequest.TimeIndex &&Di2015NewLine               Math.Abs(secondRequest.TimeIndex - firstRequest.TimeIndex) < minimumDistanceBetweenRequests;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577038Di2015UniqueSeparatorclass ViolationFinder : IViolationFinderDi2015NewLine{Di2015NewLine    public IEnumerable<Violation> Search(IEnumerable<RuleDefinition> ruleDefinitions, IEnumerable<Request> requests)Di2015NewLine    {Di2015NewLine        List<Request> requestList = requests.ToList();Di2015NewLine        return ruleDefinitions.SelectMany(rule => FindViolationsInRequests(requestList, rule));Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<Violation> FindViolationsInRequests(IEnumerable<Request> allRequest, RuleDefinition rule)Di2015NewLine    {Di2015NewLine        return FindMatchingRequests(allRequest, rule)Di2015NewLine                .Select(firstRequest => FindSingleViolation(allRequest, firstRequest, rule))Di2015NewLine                .Where(violation => violation != null);Di2015NewLine    }Di2015NewLineDi2015NewLine    private Violation FindSingleViolation(IEnumerable<Request> allRequest, Request request, RuleDefinition rule)Di2015NewLine    {Di2015NewLine        Request collidingRequest = FindCollidingRequest(allRequest, request, rule.MinimumDistanceBetweenRequests);Di2015NewLineDi2015NewLine        if (collidingRequest != null)Di2015NewLine        {Di2015NewLine            return new ViolationDi2015NewLine            {Di2015NewLine                ViolatedRule = rule,Di2015NewLine                FirstRequest = request,Di2015NewLine                SecondRequest = collidingRequestDi2015NewLine            };Di2015NewLine        }Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<Request> FindMatchingRequests(IEnumerable<Request> requests, RuleDefinition rule)Di2015NewLine    {Di2015NewLine        return requests.Where(r => r.TypeOfThisRequest == rule.ConcerningRequestType);Di2015NewLine    }Di2015NewLineDi2015NewLine    private Request FindCollidingRequest(IEnumerable<Request> requests, Request firstRequest, int minimumDistanceBetweenRequests)Di2015NewLine    {Di2015NewLine        return requests.FirstOrDefault(secondRequest => IsCollidingRequest(firstRequest, secondRequest, minimumDistanceBetweenRequests));Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool IsCollidingRequest(Request firstRequest, Request secondRequest, int minimumDistanceBetweenRequests)Di2015NewLine    {Di2015NewLine        return secondRequest.TimeIndex > firstRequest.TimeIndex &&Di2015NewLine               Math.Abs(secondRequest.TimeIndex - firstRequest.TimeIndex) < minimumDistanceBetweenRequests;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577038Di2015UniqueSeparatorpublic IEnumerable<Violation> Search(IEnumerable<RuleDefinition> ruleDefinitions, IEnumerable<Request> requests)Di2015NewLine{Di2015NewLine    List<Request> requestList = requests.ToList();Di2015NewLine    return ruleDefinitions.SelectMany(rule => FindViolationsInRequests(requestList, rule));Di2015NewLine}Di2015NewLine
15577060Di2015UniqueSeparatorBaseAbstractInfoProvider.GetInfoById("media.file", MediaFileID) Di2015NewLine
15577060Di2015UniqueSeparatorBaseAbstractInfoProvider.GetInfoById("cms.node", NodeID). Di2015NewLine
15577077Di2015UniqueSeparatorrequest = (HttpWebRequest)HttpWebRequest.Create(url);Di2015NewLinewebresponse = (HttpWebResponse)request.GetResponse();Di2015NewLineif (webresponse.ContentType.StartsWith("image/"))Di2015NewLine{...}Di2015NewLineif (webresponse.ContentType.StartsWith("text/html"))Di2015NewLine{Di2015NewLine     var resultStream = webresponse.GetResponseStream();Di2015NewLine     doc.Load(resultStream);Di2015NewLine}Di2015NewLine
15577207Di2015UniqueSeparatorRead()
15577207Di2015UniqueSeparatorDataReader
15577207Di2015UniqueSeparatorusing (SqlCeDataReader myReader = cmd.ExecuteReader(CommandBehavior.SingleRow))Di2015NewLine{Di2015NewLine    if (myReader.Read()) // It returns `false` if there is no dataDi2015NewLine    {Di2015NewLine        itemID = myReader.GetString(0);Di2015NewLine        packSize = myReader.GetString(1);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577207Di2015UniqueSeparatorHasRows
15577207Di2015UniqueSeparatorusing (SqlCeDataReader myReader = cmd.ExecuteReader())Di2015NewLine{Di2015NewLine    if (myReader.HasRows)Di2015NewLine    {Di2015NewLine        while (myReader.Read())Di2015NewLine        {Di2015NewLine            // read values from `myReader`Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577265Di2015UniqueSeparatorTextBox.KeyUp
15577265Di2015UniqueSeparatorprivate void textBox1_KeyUp(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Control && e.KeyValue == 49)Di2015NewLine    {Di2015NewLine        if (textBox1.SelectionLength > 0)Di2015NewLine        {Di2015NewLine            textBox1.SelectedText = String.Format("<h1>{0}</h1>", textBox1.SelectedText);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577303Di2015UniqueSeparatornull
15577303Di2015UniqueSeparatorvolume = string.IsNullOrWhitesplace(myRecX[1])Di2015NewLine       ? defaultVolume // <<== You can use any constant hereDi2015NewLine       : Convert.ToInt32(myRecX[1].Replace("volume =", ""))Di2015NewLine
15577341Di2015UniqueSeparatorcommand.ExecuteScalar()
15577421Di2015UniqueSeparator private void btn_submit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    copy_stuff(txt_src.Text, txt_dest.Text);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void copy_stuff(string srcFolder, string destFolder)Di2015NewLine{Di2015NewLine    foreach (string zzz in Directory.GetFiles(srcFolder, "*.zzz", SearchOption.AllDirectories))Di2015NewLine    {Di2015NewLine        string modulePath = Directory.GetParent(zzz).FullName;Di2015NewLine        string moduleName = Directory.GetParent(zzz).Name;Di2015NewLine        Directory.CreateDirectory(destFolder + "\\\\" + moduleName);Di2015NewLine        foreach (string subFolders in Directory.GetDirectories(modulePath, "*", SearchOption.AllDirectories))Di2015NewLine        {Di2015NewLine            string dest = subFolders.Replace(modulePath, destFolder + "\\\\" + moduleName);Di2015NewLine            Directory.CreateDirectory(dest);Di2015NewLine            copy_stuff(subfolders, dest);Di2015NewLine        }Di2015NewLine        foreach (string allFiles in Directory.GetFiles(modulePath, "*.*", SearchOption.AllDirectories))Di2015NewLine        {Di2015NewLine            File.Copy(allFiles, allFiles.Replace(modulePath, destFolder + "\\\\" + moduleName), true);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577425Di2015UniqueSeparatorDbContext
15577425Di2015UniqueSeparatorcontainer.Configuration.LazyLoadingEnabled = false;Di2015NewLine
15577439Di2015UniqueSeparator{x:Type Slider}
15577439Di2015UniqueSeparator{x:Type controls:SliderPicker}
15577439Di2015UniqueSeparatorLeftLabelProperty
15577439Di2015UniqueSeparatorRightLabelProperty
15577439Di2015UniqueSeparatorSlider
15577439Di2015UniqueSeparatorSliderPicker
15577439Di2015UniqueSeparator<Style x:Key="SlickSlider" TargetType="{x:Type controls:SliderPicker}">Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate TargetType="{x:Type controls:SliderPicker}">Di2015NewLine                    ...Di2015NewLine                            <TextBlock Text="{TemplateBinding LeftLabel}" Grid.Row="2" HorizontalAlignment="Left" />Di2015NewLine                            <TextBlock Text="{TemplateBinding RightLabel}" Grid.Row="2" HorizontalAlignment="Right" />Di2015NewLine                        </Grid>Di2015NewLine                    </Border>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine
15577443Di2015UniqueSeparatorLocalDateTime
15577443Di2015UniqueSeparatorZonedDateTime
15577443Di2015UniqueSeparatorInstant
15577443Di2015UniqueSeparator// TODO: Are you sure it *will* be in the invariant culture? No funky dateDi2015NewLine// separators?Di2015NewLine// Note that if all users have the same pattern, you can make this a privateDi2015NewLine// static readonly field somewhereDi2015NewLinevar pattern = LocalDateTimePattern.CreateWithInvariantCulture("yyyy/MM/dd HH:mm");Di2015NewLineDi2015NewLinevar parseResult = pattern.Parse(userSubmittedDateTimeString);Di2015NewLineif (!parseResult.Success)Di2015NewLine{Di2015NewLine    // throw an exception or whatever you want to doDi2015NewLine}Di2015NewLineDi2015NewLinevar localDateTime = parseResult.Value;Di2015NewLineDi2015NewLinevar timeZone = DateTimeZoneProviders.Tzdb[userTimeZone];Di2015NewLineDi2015NewLine// TODO: Consider how you want to handle ambiguous or "skipped" local date/timeDi2015NewLine// values. For example, you might want InZoneStrictly, or provide your own customDi2015NewLine// handler to InZone.Di2015NewLinevar zonedDateTime = localDateTime.InZoneLeniently(timeZone);Di2015NewLineDi2015NewLinevar instant = zonedDateTime.ToInstant();Di2015NewLine
15577523Di2015UniqueSeparatorRegex.Matches(input, "OU=").CountDi2015NewLine
15577532Di2015UniqueSeparatorusing
15577532Di2015UniqueSeparatorSqlConnection
15577532Di2015UniqueSeparatorpublic int GetProductPrice(string productName)Di2015NewLine{Di2015NewLine    // Quite possibly extract the connection creation into a separate methodDi2015NewLine    // to call here.Di2015NewLine    using (var conn = new SqlConnection(...))Di2015NewLine    {Di2015NewLine        conn.Open();Di2015NewLine        using (var command = new SqlCommand(Di2015NewLine            "SELECT ProductPrice FROM Products WHERE ProductName = @ProductName",Di2015NewLine            conn))Di2015NewLine        {Di2015NewLine            command.AddParameter("@ProductName", SqlDbType.VarChar)Di2015NewLine                   .Value = productName;Di2015NewLine            object price = command.ExecuteScalar();Di2015NewLine            // And you'd do the casting hereDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577532Di2015UniqueSeparatorProductPrice
15577532Di2015UniqueSeparatorlong
15577532Di2015UniqueSeparatordecimal
15577532Di2015UniqueSeparatorobject tmp = cmd.ExecuteScalar();Di2015NewLine
15577532Di2015UniqueSeparatorSqlDbType
15577570Di2015UniqueSeparatorstring s = comboBox1.Text;Di2015NewLinestring path_s = Path.GetFileName( Path.GetDirectoryName( path ) );Di2015NewLine
15577751Di2015UniqueSeparatorDrawSubset
15577751Di2015UniqueSeparatormesh.Clone
15577832Di2015UniqueSeparatorint value = 2590123;Di2015NewLinestring text = value.ToString();Di2015NewLine
15577832Di2015UniqueSeparatorstring text = value.ToString(CultureInfo.InvariantCulture);Di2015NewLine
15577832Di2015UniqueSeparator// Note that this won't give pleasant results for negative inputDi2015NewLinestatic IEnumerable<int> GetDigits(int input)Di2015NewLine{Di2015NewLine    // Special case...Di2015NewLine    if (input == 0)Di2015NewLine    {Di2015NewLine        yield return 0;Di2015NewLine        yield break;Di2015NewLine    }Di2015NewLine    while (input != 0)Di2015NewLine    {Di2015NewLine        yield return input % 10;Di2015NewLine        input = input / 10;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577893Di2015UniqueSeparatorModuleInitializer.Run
15577893Di2015UniqueSeparatorpublic static void RegisterAllParsers(Assembly assembly)Di2015NewLine
15577893Di2015UniqueSeparatorLibraryClass.RegisterAllParsers(typeof(SomeTypeInProgram).Assembly);Di2015NewLine
15577929Di2015UniqueSeparator IEnumerable<SelectListItem> stores =Di2015NewLine        from store in database.StoresDi2015NewLine        where store.CompanyID == curCompany.IDDi2015NewLine        select new SelectListItem { Value = store.Name, Text = store.ID };Di2015NewLineDi2015NewLine ViewBag.storeSelector = stores;Di2015NewLine
15577929Di2015UniqueSeparator IEnumerable<SelectListItem> stores = database.StoresDi2015NewLine        .Where(store => store.CompanyID == curCompany.ID)Di2015NewLine        .Select(store => new SelectListItem { Value = store.Name, Text = store.ID });Di2015NewLineDi2015NewLine ViewBag.storeSelector = stores;Di2015NewLine
15577947Di2015UniqueSeparatorpublic int Compare(string x, string y)Di2015NewLine{Di2015NewLine    if (x == y)Di2015NewLine    {Di2015NewLine        return 0;Di2015NewLine    }Di2015NewLine    if (x == "D")Di2015NewLine    {Di2015NewLine        // Unless y is *actually* "B", we can justDi2015NewLine        // pretend that x is "B". (So it will be after any "A", but beforeDi2015NewLine        // any other "Bxyz".)Di2015NewLine        if (y == "B")Di2015NewLine        {Di2015NewLine            return -1;Di2015NewLine        }Di2015NewLine        return "B".CompareTo(y);Di2015NewLine    }Di2015NewLine    // Ditto, basically. Alternatively you could call Compare(y, x)Di2015NewLine    // and invert the result, but *don't* just negate it, as it does theDi2015NewLine    // wrong thing with int.MinValue...Di2015NewLine    if (x == "D")Di2015NewLine    {Di2015NewLine        if (x == "B")Di2015NewLine        {Di2015NewLine            return 1;Di2015NewLine        }Di2015NewLine        return x.CompareTo("B");Di2015NewLine    }Di2015NewLine    return x.CompareTo(y);Di2015NewLine}Di2015NewLine
15577967Di2015UniqueSeparatorDataTable
15577967Di2015UniqueSeparatorPage_Load
15577977Di2015UniqueSeparatorpublic class ProductIndex : AbstractIndexCreationTask<Product,ProductIndex.ProductIndexItem>Di2015NewLine{Di2015NewLine    public class ProductIndexItemDi2015NewLine    {Di2015NewLine        public string Name { get; set; }Di2015NewLineDi2015NewLine        public string CategoryName { get; set; }Di2015NewLineDi2015NewLine        public string CategoryNameAnalyzed { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public ProductIndex()Di2015NewLine    {Di2015NewLine        Map = products => from product in productsDi2015NewLine                          from category in product.CategoriesDi2015NewLine                          select newDi2015NewLine                              {Di2015NewLine                                  product.Name,Di2015NewLine                                  CategoryName = category.Name,Di2015NewLine                                  CategoryNameAnalyzed = category.Name,Di2015NewLine                              };Di2015NewLineDi2015NewLine        Stores.Add(x => x.CategoryName, FieldStorage.Yes);Di2015NewLine        Analyzers.Add(x => x.CategoryNameAnalyzed, "SimpleAnalyzer");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15577977Di2015UniqueSeparatorvar query = _session.Advanced.LuceneQuery<Product>("ProductIndex")Di2015NewLine                            .WaitForNonStaleResults()Di2015NewLine                            .Search("CategoryNameAnalyzed", "heels");Di2015NewLinevar products = query.ToList();Di2015NewLinevar facets = query.ToFacets("facets/ProdctFacets");Di2015NewLine
15578023Di2015UniqueSeparatorStringBuilder
15578023Di2015UniqueSeparatorStringBuilder buildString = new StringBuilder();Di2015NewLineforeach (string[] a in l)Di2015NewLine{Di2015NewLine    int cost = LevenshteinDistance.Compute(a[0], a[1]);Di2015NewLine    buildString.AppendFormat("To change your input: \\n {0} \\n into the correct word: \\n {1} \\n you need to make: \\n {2} changes \\n ".Replace("\\n",      Environment.NewLine),Di2015NewLine        a[0],Di2015NewLine        a[1],Di2015NewLine        cost);Di2015NewLine}Di2015NewLineerrorString = buildString.ToString();Di2015NewLine
15578024Di2015UniqueSeparator_entities.Albums.ToList()
15578024Di2015UniqueSeparator    public IQueryable<Album> Get()Di2015NewLine    {Di2015NewLine        return (from a in _entities.AlbumsDi2015NewLine                select new Album()Di2015NewLine                    {Di2015NewLine                        Id = a.Id,Di2015NewLine                        UserId  = a.UserId,Di2015NewLine                        Name  = a.Name,Di2015NewLine                        Created  = a.Created,Di2015NewLine                        LastEdit  = a.LastEdit,Di2015NewLine                        Description  = a.Description,Di2015NewLine                        Views  = a.Views,Di2015NewLine                        Location  = a.Location,Di2015NewLine                        Photoshoot  = a.Photoshoot,Di2015NewLine                        Cover = (from ai in _imageRepository.Get() where ai.AlbumId == a.Id orderby ai.Cover descending, ai.Id ascending select ai).FirstOrDefault(),Di2015NewLine                    });Di2015NewLine    }Di2015NewLine
15578115Di2015UniqueSeparatorOrdersTableDi2015NewLineOrderID UserDi2015NewLine1       JoeDi2015NewLine
15578115Di2015UniqueSeparatorOrderID
15578115Di2015UniqueSeparatorOrderDetailsTableDi2015NewLineOrderID Key ItemCodeDi2015NewLine1       XXX 1Di2015NewLine1       XXX 2Di2015NewLine
15578139Di2015UniqueSeparatorThread
15578139Di2015UniqueSeparatorstartRange
15578139Di2015UniqueSeparatorfor (int i = 0; i < this.subWorkerThreads.Length; ++i)Di2015NewLine{Di2015NewLine    var copy = startRange;Di2015NewLine    this.subWorkerThreads[i] = new Thread(() => searchItem(copy, this.totalRangePerThread));Di2015NewLine    this.startRange = this.startRange + this.totalRangePerThread;Di2015NewLine}Di2015NewLine
15578165Di2015UniqueSeparatorSystem.Windows.Forms.SendKeys.Send("+(a)")
15578278Di2015UniqueSeparatorHeader="{x:Static yourNamespace:Constants.ColName}"
15578278Di2015UniqueSeparatorConstants.ColName
15578278Di2015UniqueSeparatorBinding
15578278Di2015UniqueSeparatorx:Static
15578278Di2015UniqueSeparatorStaticResources
15578324Di2015UniqueSeparatorAreSimilar
15578324Di2015UniqueSeparatorQueueElement elemA, elemBDi2015NewLinewhile (queueA.Count > 0 && AreSimilar(elemA = queueA.Peek(), elemB = queueB.Peek())) {Di2015NewLine    Debug.Assert(elemA.SomeProperty == elemB.SomeProperty);Di2015NewLine    queueA.Dequeue();Di2015NewLine    queueB.Dequeue();Di2015NewLine}Di2015NewLine
15578324Di2015UniqueSeparatorwhile (queueA.Count > 0)Di2015NewLine{Di2015NewLine    var elemA = queueA.Peek();Di2015NewLine    var elemB = queueB.Peek();Di2015NewLine    if (!AreSimilar(elemA, elemB))Di2015NewLine    {Di2015NewLine        break;Di2015NewLine    }Di2015NewLine    Debug.Assert(elemA.SomeProperty == elemB.SomeProperty);Di2015NewLine    queueA.Dequeue();Di2015NewLine    queueB.Dequeue();Di2015NewLine}Di2015NewLine
15578375Di2015UniqueSeparatorwhere are you declaring filename..?
15578375Di2015UniqueSeparatorDoes the file even exist..?
15578375Di2015UniqueSeparatorSystem.Security.Principal.WindowsIdentity.GetCurrent().Name.ToString();
15578375Di2015UniqueSeparatordomain\\\\username or compuername\\\\username
15578375Di2015UniqueSeparatorFileName
15578435Di2015UniqueSeparatorT[]
15578435Di2015UniqueSeparator    static Random rnd=new Random();Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        double W=12;Di2015NewLine        double M=1.0;Di2015NewLineDi2015NewLine        int N=7;Di2015NewLineDi2015NewLine        double S=W-(N-1)*M;Di2015NewLine        double[] T=new double[N];Di2015NewLineDi2015NewLine        for(int i=0; i<N; i++)Di2015NewLine        {Di2015NewLine            T[i]=rnd.NextDouble()*S;Di2015NewLine        }Di2015NewLine        Array.Sort(T);Di2015NewLine        for(int i=0; i<N; i++)Di2015NewLine        {Di2015NewLine            T[i]+=M*i;Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("{0,8} {1,8}", "#", "Time");Di2015NewLine        for(int i=0; i<N; i++)Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0,8} {1,8:F3}", i+1, T[i]);    Di2015NewLine        }Di2015NewLineDi2015NewLine        // With N=3, Window 12h, Min. Span = 5hDi2015NewLine        //      #     TimeDi2015NewLine        //      1    0.468Di2015NewLine        //      2    5.496Di2015NewLine        //      3   10.529Di2015NewLineDi2015NewLine        // With N=7, Window 12h, Min. Span = 1hDi2015NewLine        //      #     TimeDi2015NewLine        //      1    0.724Di2015NewLine        //      2    2.771Di2015NewLine        //      3    4.020Di2015NewLine        //      4    5.790Di2015NewLine        //      5    7.331Di2015NewLine        //      6    9.214Di2015NewLine        //      7   10.673Di2015NewLine    }Di2015NewLine
15578622Di2015UniqueSeparatorThread.Join()
15578622Di2015UniqueSeparatorControl.Invoke()
15578622Di2015UniqueSeparator if (this.textBox1.InvokeRequired)Di2015NewLine    {Di2015NewLine        SetTextCallback d = new SetTextCallback(WriteString);Di2015NewLine        // BeginInvoke posts message to UI thread asyncronouslyDi2015NewLine        this.BeginInvoke(d, new object[] { text }); Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        this.textBox1.Text = text.ToString();Di2015NewLine    }Di2015NewLine
15578683Di2015UniqueSeparatorSplit
15578683Di2015UniqueSeparatorChar
15578683Di2015UniqueSeparator var values = theCookie.Split(new [] {';', ',', '='}, Di2015NewLine                              StringSplitOptions.RemoveEmptyEntries);Di2015NewLine
15578683Di2015UniqueSeparatorvalues
15578683Di2015UniqueSeparatorToDictionary
15578704Di2015UniqueSeparatorList<T>
15578704Di2015UniqueSeparatorforeach (T obj in this) { }Di2015NewLine
15578704Di2015UniqueSeparatorList<T>
15578704Di2015UniqueSeparatorIList<T>
15578704Di2015UniqueSeparatorList<T>
15578775Di2015UniqueSeparatorTestSuite
15578775Di2015UniqueSeparatornunit.core.dll
15578775Di2015UniqueSeparatornunit.core.dll
15578775Di2015UniqueSeparatorTestSuite
15578775Di2015UniqueSeparator[Suite] Di2015NewLinepublic static IEnumerable SuiteDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        ArrayList suite = new ArrayList();Di2015NewLine        suite.Add(new AddAll());Di2015NewLine        suite.Add(new RemoveAll());Di2015NewLine        return suite;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15578810Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine   public IOutputFormatter Formatter {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLinevar foo = new Foo();Di2015NewLinefoo.Formatter = new GeneralFormatter();Di2015NewLineConsole.WriteLine(foo.formatter.FormatValue("one");Di2015NewLineDi2015NewLinefoo.Formatter = new FizzBuzzFormatter();Di2015NewLineConsole.WriteLine(foo.formatter.FormatValue("one");Di2015NewLine
15578928Di2015UniqueSeparatorpublic class MyViewController : UIViewControllerDi2015NewLine{Di2015NewLine    public MyViewController ()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Foo()Di2015NewLine    {Di2015NewLine        FaceBookSingleton.Instance.DoSomeAction();Di2015NewLine        FaceBookSingleton.Instance.Something = 4;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15578928Di2015UniqueSeparatorFoo()
15578928Di2015UniqueSeparatorpublic interface ISocialMediaWidgetDi2015NewLine{Di2015NewLine    ISocialMediaWidgetResponse DoSomeUnitOfWork();Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class ConcreteSocialMediaWidgetServiceDi2015NewLine{Di2015NewLine    protected readonly ISocialMediaWidget socialMediaWidget;Di2015NewLineDi2015NewLine    public ConcreteSocialMediaWidgetService(ISocialMediaWidget widget)Di2015NewLine    {Di2015NewLine        this.socialMediaWidget = widget;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ISocialMediaWidgetResponse Foo()Di2015NewLine    {Di2015NewLine        return socialMediaWidget.DoUnitOfWork();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15578928Di2015UniqueSeparatorpublic void SocialMediaWidgetTest()Di2015NewLine{   //pseudo codeDi2015NewLine    var testService = new MockObject(ConcreteSocialMediaWidgetService(MockObject_of_ISocialMediaWidget));Di2015NewLine    Assert.Equals(someImplementation_of_ISocialMediaWidgetResponse, testService.Foo());Di2015NewLine}Di2015NewLine
15579085Di2015UniqueSeparator    elseDi2015NewLine    {Di2015NewLine        substitutions = d[i - 1, j - 1] + 1;Di2015NewLine        insertions =  Math.Min(d[i, j - 1] + 1, substitutions);Di2015NewLine        deletion = Math.Min(d[i - 1, j] + 1, insertions);Di2015NewLine        d[i, j] = deletion;Di2015NewLineDi2015NewLine        if (/* whatever */)Di2015NewLine            counter++;Di2015NewLine    }Di2015NewLine
15579242Di2015UniqueSeparator        foreach (RecognizedWordUnit word in e.Result.Words)Di2015NewLine        {Di2015NewLine            int count = 0;Di2015NewLine            count += 1;Di2015NewLine
15579242Di2015UniqueSeparator        int count = 0;Di2015NewLine        foreach (RecognizedWordUnit word in e.Result.Words)Di2015NewLine        {Di2015NewLine            count += 1;Di2015NewLine
15579319Di2015UniqueSeparatormm
15579319Di2015UniqueSeparatorMM
15579319Di2015UniqueSeparatormm
15579319Di2015UniqueSeparatorMM
15579319Di2015UniqueSeparatormm
15579319Di2015UniqueSeparator06
15579319Di2015UniqueSeparator1
15579534Di2015UniqueSeparatorMenu
15579759Di2015UniqueSeparatorLocationWebService objService = new LocationWebService(); // this is proxy class of web service created when you add web referenceDi2015NewLinestring result = objService.GetLocationName(4); //call web methodDi2015NewLine
15579931Di2015UniqueSeparatorSelectedValue
15579931Di2015UniqueSeparatorKeyValuePair<int, int>
15579931Di2015UniqueSeparatorstring value = ((KeyValuePair<int, int>)comboBox1.SelectedValue).Value.ToString();Di2015NewLine
15579931Di2015UniqueSeparatorSelectedValue
15579931Di2015UniqueSeparatorKeyValuePair<int, int>
15579931Di2015UniqueSeparatorDictionary<int, int>
15579931Di2015UniqueSeparatorSelectedValue.ToString()
15579931Di2015UniqueSeparator[1, 202]
15580116Di2015UniqueSeparatorstring str_Checkboxes="";Di2015NewLinestring str_SQL = "SELECT Name, File, Action, Fantasy, Horror, Thriller, Adventure, Animation, Comedy, Crime, Documentary, Drama, Family, Games, Mystery, Romance, SciFi, War FROM tbl_Main WHERE ";Di2015NewLineDi2015NewLine//Loop through each control on the form, we are looking for checkboxesDi2015NewLineforeach (Control c in this.Controls)Di2015NewLine {Di2015NewLine  if(c is CheckBox)Di2015NewLine    {Di2015NewLine      if (((CheckBox)c).Checked)Di2015NewLine        {Di2015NewLine         //Bypass putting AND at the beginning of str_CheckboxesDi2015NewLine         if(str_Checkboxes != "")Di2015NewLine           str_Checkboxes+=" AND ";Di2015NewLine         //Checkbox text is the same as the field name in the databaseDi2015NewLine           str_Checkboxes += (((CheckBox)c).Text) + " = True";Di2015NewLine        }Di2015NewLine     }Di2015NewLine   }Di2015NewLine//build the SQLDi2015NewLinestr_SQL += str_Checkboxes + ";"; Di2015NewLine//Fill the gridDi2015NewLineFill_Grid(str_SQL);Di2015NewLine
15580123Di2015UniqueSeparatorSystem.Security.Cryptography.SHA1 c = System.Security.Cryptography.SHA1.Create();Di2015NewLinebyte[] b = c.ComputeHash(Encoding.UTF8.GetBytes("google.com"));Di2015NewLinelong value = BitConverter.ToInt64(b, 12);Di2015NewLinevalue = IPAddress.HostToNetworkOrder(value);Di2015NewLineDi2015NewLineDebug.WriteLine(value);Di2015NewLine// writes 2172193747348806725Di2015NewLine
15580172Di2015UniqueSeparatorint[] HideCall()Di2015NewLine{Di2015NewLine    return DLL.CallNewMethod();Di2015NewLine}Di2015NewLine
15580172Di2015UniqueSeparatorDLL.CallNewMethod()
15580172Di2015UniqueSeparator// Interface, in an assembly visible to both of the other assemblies.Di2015NewLinepublic interface IDLLInterfaceDi2015NewLine{Di2015NewLine    int[] CallNewMethod();Di2015NewLine}Di2015NewLineDi2015NewLine// Implementation in the main program.Di2015NewLineclass DefaultDLLImplementation : IDLLInterfaceDi2015NewLine{Di2015NewLine    public int[] CallNewMethod()Di2015NewLine    {Di2015NewLine        return new int[5];Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class DLLImplementationDi2015NewLine{Di2015NewLine    public readonly IDLLInterface Instance;Di2015NewLineDi2015NewLine    static DLLImplementation()Di2015NewLine    {Di2015NewLine        // Pseudo-codeDi2015NewLine        if (DllIsAvailable) {Di2015NewLine            Instance = ConstructInstanceFromDllUsingReflection();Di2015NewLine        } else {Di2015NewLine            Instance = new DefaultDLLImplementation();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15580172Di2015UniqueSeparatorDLLImplementation.Instance.CallNewMethod()
15580229Di2015UniqueSeparator   private static Image cropImage(Image img, Rectangle cropArea)Di2015NewLine   {Di2015NewLine       Bitmap bmpImage = new Bitmap(img);Di2015NewLine       Bitmap bmpCrop = bmpImage.Clone(cropArea,Di2015NewLine       bmpImage.PixelFormat);Di2015NewLine       return (Image)(bmpCrop);Di2015NewLine   }Di2015NewLine
15580229Di2015UniqueSeparator   Picturebox P = new Picturebox;Di2015NewLine   P.BackgroundImage = cropImage(ImageThatWillBeCropped, new Rectangle(0,0,50,50));Di2015NewLine
15580280Di2015UniqueSeparatorMMMM dd, yyyy
15580280Di2015UniqueSeparatorDateTime.ParseExact
15580280Di2015UniqueSeparatorDateTime.TryParseExact
15580280Di2015UniqueSeparatorstring input = "20, 2013";Di2015NewLineDateTime value;Di2015NewLineDi2015NewLineif (DateTime.TryParseExact(input, "dd, yyyy", CultureInfo.CurrentCulture, DateTimeStyles.None, out value))Di2015NewLine{Di2015NewLine    string output = value.ToString("dd/MM/yyyy");Di2015NewLine}Di2015NewLine
15580286Di2015UniqueSeparatorinternal class PhoneNumberDi2015NewLine    {Di2015NewLine        private string a;Di2015NewLine        private string m;Di2015NewLine        private string l;Di2015NewLineDi2015NewLine        public PhoneNumber(string a, string m, string l)Di2015NewLine        {Di2015NewLine            // TODO: Complete member initializationDi2015NewLine            this.a = a;Di2015NewLine            this.m = m;Di2015NewLine            this.l = l;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineclass BlockedNumber : PhoneNumberDi2015NewLine{Di2015NewLine    public BlockedNumber(string a, string m, string l)Di2015NewLine        : base(a, m, l) { }Di2015NewLine}Di2015NewLine
15580286Di2015UniqueSeparatorThis code compiles just fine so just like Yuriy stated the issue must be somewhere else.
15580506Di2015UniqueSeparatorbool isPresent = Enum.GetValues(typeof(LicenseTypes))Di2015NewLine                     .Select(e => e.GetDescription())Di2015NewLine                     .Contains("A License");Di2015NewLine
15580520Di2015UniqueSeparator<Canvas Name="canvas" Background="Transparent"Di2015NewLine        MouseLeftButtonDown="Canvas_MouseLeftButtonDown_1">Di2015NewLine    ...Di2015NewLine</Canvas>Di2015NewLine
15580906Di2015UniqueSeparatorvar input = new List<int>() { 0, 1, 2 };Di2015NewLineDi2015NewLinevar output = input.Select(i => (DayOfWeek)Math.Pow(2, ((i + 6) % 7))).ToList();Di2015NewLine
15580906Di2015UniqueSeparator((i + 6) % 7)
15580906Di2015UniqueSeparatorDayOfWeek
15580906Di2015UniqueSeparator64
15580906Di2015UniqueSeparatorint
15580906Di2015UniqueSeparatorvar x = output.Select(i => (int)i).Aggregate((e, i) => e | i);Di2015NewLine
15580906Di2015UniqueSeparatorvar output = input.Select(i => (DayOfWeek)Math.Pow(2, (i - 1) % 7)).ToList();Di2015NewLine
15581025Di2015UniqueSeparatorEnvDTE
15581025Di2015UniqueSeparatorEnvDTE80
15581025Di2015UniqueSeparator    //You need to make a reference to two dlls:Di2015NewLine    envdteDi2015NewLine    envdte80Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    void FormatFiles(List<FileInfo> files)Di2015NewLine    {       Di2015NewLine        //If it throws exeption you may want to retry couple more timesDi2015NewLine        EnvDTE.Solution soln = System.Activator.CreateInstance(Type.GetTypeFromProgID("VisualStudio.Solution.11.0")) as EnvDTE.Solution;Di2015NewLine        //try this if you have Visual Studio 2010Di2015NewLine        //EnvDTE.Solution soln = System.Activator.CreateInstance(Type.GetTypeFromProgID("VisualStudio.Solution.10.0")) as EnvDTE.Solution;Di2015NewLine        soln.DTE.MainWindow.Visible = false;Di2015NewLine        EnvDTE80.Solution2 soln2 = soln as EnvDTE80.Solution2;Di2015NewLine        //Creating Visual Studio projectDi2015NewLine        string csTemplatePath = soln2.GetProjectTemplate("ConsoleApplication.zip", "CSharp");Di2015NewLine        soln.AddFromTemplate(csTemplatePath, tempPath, "FormattingFiles", false);Di2015NewLine        //If it throws exeption you may want to retry couple more timesDi2015NewLine        Project project = soln.Projects.Item(1);Di2015NewLineDi2015NewLine        foreach (FileInfo file in files)Di2015NewLine        {Di2015NewLine            ProjectItem addedItem;Di2015NewLine            bool existingFile = false;Di2015NewLine            int _try = 0;Di2015NewLine            while (true)Di2015NewLine            {            Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    string fileName = file.Name;Di2015NewLine                    _try++;Di2015NewLine                    if (existingFile)Di2015NewLine                    {Di2015NewLine                        fileName = file.Name.Substring(0, (file.Name.Length - file.Extension.Length) - 1);Di2015NewLine                        fileName = fileName + "_" + _try + file.Extension;Di2015NewLine                    }Di2015NewLine                    addedItem = project.ProjectItems.AddFromTemplate(file.FullName, fileName);Di2015NewLine                    existingFile = false;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                catch(Exception ex)Di2015NewLine                {Di2015NewLine                    if (ex.Message.Contains(file.Name) && ex.Message.Contains("already a linked file"))Di2015NewLine                    {Di2015NewLine                        existingFile = true;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            while (true)Di2015NewLine            {Di2015NewLine                //sometimes formatting file might throw an exception. Thats why I am using loop.Di2015NewLine                //usually first time will workDi2015NewLine                tryDi2015NewLine                {Di2015NewLine                    addedItem.Open(Constants.vsViewKindCode);Di2015NewLine                    addedItem.Document.Activate();Di2015NewLine                    addedItem.Document.DTE.ExecuteCommand("Edit.FormatDocument");Di2015NewLine                    addedItem.SaveAs(file.FullName);Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                catchDi2015NewLine                {Di2015NewLine                    //repeatDi2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            soln.Close();Di2015NewLine            soln2.Close();Di2015NewLine            soln = null;Di2015NewLine            soln2 = null;Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLine            //for some reason throws exception. Not all the times.Di2015NewLine            //if this doesn't closes the solution CleanUp() will take care of this thingDi2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            CleanUp();Di2015NewLine        }Di2015NewLine    }   Di2015NewLineDi2015NewLine    void CleanUp()Di2015NewLine    {Di2015NewLine        List<System.Diagnostics.Process> visualStudioProcesses = System.Diagnostics.Process.GetProcesses().Where(p => p.ProcessName.Contains("devenv")).ToList();Di2015NewLine        foreach (System.Diagnostics.Process process in visualStudioProcesses)Di2015NewLine        {Di2015NewLine            if (process.MainWindowTitle == "")Di2015NewLine            {Di2015NewLine                process.Kill();Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        tempPath = System.IO.Path.GetTempPath();Di2015NewLine        tempPath = tempPath + "\\\\FormattingFiles";Di2015NewLine        new DirectoryInfo(tempPath).Delete(true);Di2015NewLine    } Di2015NewLine
15581047Di2015UniqueSeparatorthis.abbr = abbr;Di2015NewLine
15581047Di2015UniqueSeparatorSystem.String
15581047Di2015UniqueSeparatorabbr
15581047Di2015UniqueSeparatorStringBuilder
15581047Di2015UniqueSeparatorStringBuilder x = new StringBuilder("abc");Di2015NewLineDi2015NewLine// Copy the reference...Di2015NewLineStringBuilder y = x;Di2015NewLineDi2015NewLine// This changes data within the object that x's value refers toDi2015NewLinex.Append("def");Di2015NewLineDi2015NewLine// This changes the value of x to refer to a different StringBuilderDi2015NewLinex = new StringBuilder("ghi");Di2015NewLineDi2015NewLineConsole.WriteLine(y); // abcdefDi2015NewLine
15581195Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class SampleFixtureDi2015NewLine{Di2015NewLine  public IEnumerable<int> GetData()Di2015NewLine  {Di2015NewLine    yield return 1;Di2015NewLine    yield return 2;Di2015NewLine    yield return 3;Di2015NewLine  }Di2015NewLineDi2015NewLine  [Test, Factory("GetData")]Di2015NewLine  public void Test(int value)Di2015NewLine  {Di2015NewLine  }Di2015NewLine}Di2015NewLine
15581213Di2015UniqueSeparatorSystem.Windows.Forms
15581213Di2015UniqueSeparatorSystem.Windows.Forms.Control
15581213Di2015UniqueSeparatorSystem.Windows.Control
15581213Di2015UniqueSeparatorInvokeRequired()
15581213Di2015UniqueSeparatorDispatcher.CheckAccess()
15581424Di2015UniqueSeparator    for (int x = 0; x < products.Length; x++)Di2015NewLine    {Di2015NewLine        if (products[x].productID == productChoice)Di2015NewLine        {Di2015NewLine            productprice = products[x].price;Di2015NewLine            CoinChange CC = Service.TotalChange(productprice, amountDeposited);Di2015NewLine            MessageBox.Show("Refund amount:" + "\\r\\n" + "Nickel: " + CC.Nickel.ToString() + "\\r\\n" + "Dime: " +Di2015NewLine                            CC.Dime.ToString() + "\\r\\n" + "Quarter: " + CC.Quarter.ToString());Di2015NewLine            return;  // Found and handled the productDi2015NewLine        }Di2015NewLine    }Di2015NewLine    // If we get here none of the products matchedDi2015NewLine    MessageBox.Show("Invalid product ID.  Please check your catalog and try again.");Di2015NewLine
15581521Di2015UniqueSeparator function line(x0, y0, x1, y1)Di2015NewLine   dx := abs(x1-x0)Di2015NewLine   dy := abs(y1-y0) Di2015NewLine   if x0 < x1 then sx := 1 else sx := -1Di2015NewLine   if y0 < y1 then sy := 1 else sy := -1Di2015NewLine   err := dx-dyDi2015NewLineDi2015NewLine   loopDi2015NewLine     setPixel(x0,y0)Di2015NewLine     if x0 = x1 and y0 = y1 exit loopDi2015NewLine     e2 := 2*errDi2015NewLine     if e2 > -dy then Di2015NewLine       err := err - dyDi2015NewLine       x0 := x0 + sxDi2015NewLine     end ifDi2015NewLine     if e2 <  dx then Di2015NewLine       err := err + dxDi2015NewLine       y0 := y0 + sy Di2015NewLine     end ifDi2015NewLine   end loopDi2015NewLine
15581907Di2015UniqueSeparatorballUpdate
15581907Di2015UniqueSeparatormyThread
15581907Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine    {Di2015NewLine        Graphics paper;Di2015NewLine        Paddle paddle = new Paddle();Di2015NewLine        Ball ball = new Ball();Di2015NewLine        Thread myThread;Di2015NewLine        BallUpdate ballUpdate = new BallUpdate();Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            myThread = new Thread(() => ballUpdate.ballMotion(ball));Di2015NewLine            myThread.Start();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_Paint(object sender, PaintEventArgs e)Di2015NewLine        {Di2015NewLine            paper = e.Graphics;Di2015NewLine            paddle.drawPaddle(paper);Di2015NewLine            ball.drawBall(paper);Di2015NewLineDi2015NewLine        }Di2015NewLine        private void timer1_Tick(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            //ball.moveBall();Di2015NewLine            ball.collide();Di2015NewLine            ball.hitPaddle(paddle.PaddleRec);Di2015NewLine            this.Invalidate();Di2015NewLine        }Di2015NewLine
15581907Di2015UniqueSeparatorif(true)
15581907Di2015UniqueSeparatorwhile(true)
15581907Di2015UniqueSeparatorclass BallUpdateDi2015NewLine{Di2015NewLine    public BallUpdate(){}Di2015NewLineDi2015NewLine    public void ballMotion(Ball x)Di2015NewLine    {Di2015NewLine        while(true)Di2015NewLine        {Di2015NewLine            x.moveBall();Di2015NewLine            Thread.Sleep(10000);Di2015NewLine        }   Di2015NewLine    }Di2015NewLine}Di2015NewLine
15581934Di2015UniqueSeparatorHubConnection.Start
15581934Di2015UniqueSeparatorStart
15581934Di2015UniqueSeparatorInvoke
15581934Di2015UniqueSeparatorHubConnection
15581934Di2015UniqueSeparatorConnecting
15581934Di2015UniqueSeparatorTask
15581934Di2015UniqueSeparatorStart
15581934Di2015UniqueSeparatorIHubProxy.Invoke
15581934Di2015UniqueSeparatorawait
15581934Di2015UniqueSeparatorTask.ContinueWith
15581934Di2015UniqueSeparatorStart
15581934Di2015UniqueSeparatorbuttonAdd
15581934Di2015UniqueSeparatorAddProductView
15581934Di2015UniqueSeparatorHubConnection.Start
15581934Di2015UniqueSeparatorTask<AddProductView> CreateAddProductView()
15581934Di2015UniqueSeparatorAddProductView
15581934Di2015UniqueSeparatorStart
15581934Di2015UniqueSeparator_conn.Start().Wait();Di2015NewLine
15581952Di2015UniqueSeparatorDelegates
15581952Di2015UniqueSeparatorFunc<>s
15581952Di2015UniqueSeparatorAction<>s
15581952Di2015UniqueSeparatorpublic interface IDoSomething {Di2015NewLine    public int Return42();Di2015NewLine    public bool AmIPrettyOrNot(string name);Di2015NewLine    public void Foo();Di2015NewLine} Di2015NewLineDi2015NewLinepublic void Main(String[] args) {Di2015NewLine    DoStuff(new IDoSomething() {Di2015NewLine        public int Return42() { return 42; }Di2015NewLine        public bool AmIPrettyOrNot(string name) { return name == "jerkimball"; }Di2015NewLine        public bool Foo(int x) { ... }Di2015NewLine    });Di2015NewLine}Di2015NewLineDi2015NewLinepublic void DoStuff(IDoSomething something) { ... }Di2015NewLine
15581952Di2015UniqueSeparatorpublic void Main(string[] args)Di2015NewLine{Di2015NewLine    Func<int> returns42 = () => 42;Di2015NewLine    Func<string,bool> amIPretty = name => name == "jerkimball";Di2015NewLine    Action<int> foo = x => {};Di2015NewLine}Di2015NewLine
15581952Di2015UniqueSeparator public class Foo Di2015NewLine {Di2015NewLine     // define the shape of our event handlerDi2015NewLine     public delegate void HandlerForBarEvent(object sender, EventArgs args);Di2015NewLine     // declare our eventDi2015NewLine     public event HandlerForBarEvent BarEvent;Di2015NewLineDi2015NewLine     public void CallBar()Di2015NewLine     {Di2015NewLine         // omitted: check for null or set a default handlerDi2015NewLine         BarEvent(this, new EventArgs());Di2015NewLine     }Di2015NewLine }    Di2015NewLineDi2015NewLine public void Main(string[] args)Di2015NewLine {Di2015NewLine      var foo = new Foo();Di2015NewLine      // declare the handler inline using lambda syntaxDi2015NewLine      foo.BarEvent += (sender, args) => Di2015NewLine      {Di2015NewLine           // do something with sender/argsDi2015NewLine      }Di2015NewLine      foo.CallBar();Di2015NewLine }Di2015NewLine
15581952Di2015UniqueSeparator public void MyHandler(object sender, EventArgs args)Di2015NewLine {Di2015NewLine     // do stuffDi2015NewLine }Di2015NewLine public void Main(string[] args)Di2015NewLine {Di2015NewLine      var foo = new Foo();Di2015NewLine      // that method above is the same "shape" as HandlerForBarEventDi2015NewLine      foo.BarEvent += MyHandler;Di2015NewLine      foo.CallBar();Di2015NewLine }Di2015NewLine
15581952Di2015UniqueSeparatorRunnable
15581952Di2015UniqueSeparatorvar thread = new Thread((Action)(() => Di2015NewLine     {Di2015NewLine         // I'm the threads "run" method!Di2015NewLine     });Di2015NewLinethread.Start();Di2015NewLine
15581952Di2015UniqueSeparatorpublic void processEvents(){Di2015NewLine    for(Event event : eventList)Di2015NewLine        eventList.execute();Di2015NewLine}Di2015NewLine
15581952Di2015UniqueSeparatorpublic void processEvents()Di2015NewLine{Di2015NewLine    // edit: derp, 'event' is a keyword, so I'mDi2015NewLine    // renaming this, since I won't get into whyDi2015NewLine    // you could also use @event...Di2015NewLine    foreach(var evt in eventList)Di2015NewLine    {Di2015NewLine        evt.Execute();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15581985Di2015UniqueSeparator\\{\\n([0-z\\[\\]" ,-\\.=]+;\\n)+\\}Di2015NewLine
15582140Di2015UniqueSeparatorX509Certificate2Collection.getEnumerator()
15582140Di2015UniqueSeparatorX509Certificate2Enumerator
15582140Di2015UniqueSeparatorCurrent
15582140Di2015UniqueSeparatorX509Certificate2
15582140Di2015UniqueSeparatorCurrent
15582141Di2015UniqueSeparatorvar results = Regex.Matches(Coord, @"X=(?<X>-?\\d+.?\\d+)\\s+Y=(?<Y>\\d+.?\\d+)");Di2015NewLineDi2015NewLinefor (int i = 0; i < results.Count; i++)Di2015NewLine{Di2015NewLine    Console.WriteLine(string.Format("X={0} Y={1}", results[i].Groups["X"], results[i].Groups["Y"]));Di2015NewLine}Di2015NewLine
15582269Di2015UniqueSeparatorstring file = File.ReadAllText("a.html"); // gets the htmlDi2015NewLineDi2015NewLineCQ dom = file; // initializes csqueryDi2015NewLineCQ td = dom["td"]; // get all td filesDi2015NewLineDi2015NewLinetd.Each((i,e) => { // go through eachDi2015NewLine    if (e.FirstChild != null) // if element has child (font)Di2015NewLine    {Di2015NewLine        if (e.FirstChild.NodeType != NodeType.TEXT_NODE) // ignore text nodeDi2015NewLine        {Di2015NewLine            if (e.FirstChild.InnerText == "1") // if number is 1Di2015NewLine            {Di2015NewLine                Console.WriteLine(e.NextElementSibling.InnerText); // output the textDi2015NewLine            }Di2015NewLine            if (e.FirstChild.InnerText == "8") // etc etcDi2015NewLine            {Di2015NewLine                Console.WriteLine(e.NextElementSibling.InnerText);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine});Di2015NewLineDi2015NewLineConsole.ReadKey();Di2015NewLine
15582283Di2015UniqueSeparatorprivate List<DiskInfo> GetDiskInfo()Di2015NewLine{Di2015NewLine    List<DiskInfo> disks = new List<DiskInfo>();Di2015NewLine    SelectQuery query = new SelectQuery("SELECT Size, FreeSpace, Name, FileSystem FROM Win32_LogicalDisk WHERE DriveType = 3");Di2015NewLineDi2015NewLine    ManagementObjectSearcher moSearcher = new ManagementObjectSearcher(scope, query);Di2015NewLine    ManagementObjectCollection collection = moSearcher.Get();Di2015NewLine    foreach (ManagementObject res in collection)Di2015NewLine    {Di2015NewLine        float size = Convert.ToSingle(res["Size"]) / 1024f;Di2015NewLine        float usedSpace = size - (Convert.ToSingle(res["FreeSpace"]) / 1024f);Di2015NewLine        DiskInfo di = new DiskInfo();Di2015NewLine        di.Name = res["Name"].ToString();Di2015NewLine        di.Size = ConvertVal(size);Di2015NewLine        di.UsedSpace = ConvertVal(usedSpace);Di2015NewLine        if (size > 0)Di2015NewLine        {Di2015NewLine            di.PercentUsed = ((usedSpace / size) * 100).ToString("N0");Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            di.PercentUsed = "0";Di2015NewLine        }Di2015NewLine        if (res["FileSystem"] != null)Di2015NewLine        {Di2015NewLine            di.FileSystem = res["FileSystem"].ToString();Di2015NewLine            disks.Add(di);Di2015NewLine        }                               Di2015NewLine    }Di2015NewLineDi2015NewLine    return disks;Di2015NewLine}Di2015NewLineDi2015NewLine// handles returning the correct units    Di2015NewLineprivate string ConvertVal(float value)Di2015NewLine    {           Di2015NewLine        float K = value;Di2015NewLine        float M = value / 1024f;Di2015NewLine        float G = M / 1024f;Di2015NewLine        float T = G / 1024f;Di2015NewLine        string unit = "KB";Di2015NewLine        float val = K;            Di2015NewLineDi2015NewLine        if (K >= 1024)Di2015NewLine        {Di2015NewLine            unit = "MB";Di2015NewLine            val = M;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (M >= 1024)Di2015NewLine        {Di2015NewLine            unit = "GB";Di2015NewLine            val = G;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (G >= 1024)Di2015NewLine        {Di2015NewLine            unit = "TB";Di2015NewLine            val = T;Di2015NewLine        }Di2015NewLineDi2015NewLine        return val.ToString("N2") + unit;Di2015NewLine    }Di2015NewLine
15582283Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace ComputerInfo.ModelsDi2015NewLine{Di2015NewLine    public class DiskInfoDi2015NewLine    {Di2015NewLine        public string Name { get; set; }Di2015NewLine        public string Size { get; set; }Di2015NewLine        public string UsedSpace { get; set; }Di2015NewLine        public string PercentUsed { get; set; }Di2015NewLine        public string FileSystem { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15582334Di2015UniqueSeparatorprivate void clearFolderWithFilter(string folderName, string filesToExclude)Di2015NewLine{Di2015NewLine    DirectoryInfo dir = new DirectoryInfo(folderName);Di2015NewLineDi2015NewLine    foreach(FileInfo fi in dir.GetFiles())Di2015NewLine    {Di2015NewLine        if(!fi.Name.Contains(filesToExclude))Di2015NewLine        {Di2015NewLine            // System.Diagnostics.Debug.WriteLine("DELETING file " + fi + " because it does NOT contain '" + filesToExclude + "' ");Di2015NewLine            fi.Delete();Di2015NewLine        } else {Di2015NewLine            // System.Diagnostics.Debug.WriteLine("SAVING file " + fi + " because it contains '" + filesToExclude + "' ");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach (DirectoryInfo di in dir.GetDirectories())Di2015NewLine    {Di2015NewLine        if(!di.Name.Contains(filesToExclude))Di2015NewLine        {Di2015NewLine            // System.Diagnostics.Debug.WriteLine("DELETING directory " + di + " because it does NOT contain '" + filesToExclude + "' ");Di2015NewLine            clearFolderWithFilter(di.FullName, filesToExclude);Di2015NewLine            di.Delete();Di2015NewLine        } else {Di2015NewLine            // System.Diagnostics.Debug.WriteLine("SAVING directory " + di + " because it contains '" + filesToExclude + "' ");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15582334Di2015UniqueSeparatorclearFolderWithFilter(@"C:\\Path\\MyFolder","DoNotDelete_");Di2015NewLine
15582364Di2015UniqueSeparator@Html.ActionLink(Model.Name, "GetMeeting", "ChooseMeeting", new {meetingid = Model.MeetingId}, null)Di2015NewLine
15582364Di2015UniqueSeparatorpublic class ChooseMeeting : ControllerDi2015NewLine{Di2015NewLine    public ActionResult GetMeeting(int meetingid)Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine        return View();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15582373Di2015UniqueSeparatorApp.xaml
15582373Di2015UniqueSeparatorResourceDictionary
15582373Di2015UniqueSeparatorWindow.Resources
15582373Di2015UniqueSeparatorWindow
15582373Di2015UniqueSeparatorThemes
15582373Di2015UniqueSeparatorResourceDictionary
15582373Di2015UniqueSeparatorResourceDictionary
15582373Di2015UniqueSeparatorResouces
15582373Di2015UniqueSeparatorUsercontrol
15582373Di2015UniqueSeparator{StaticResource resourceKey}
15582373Di2015UniqueSeparatorStaticResource
15582373Di2015UniqueSeparatorResource
15582373Di2015UniqueSeparatorResource
15582373Di2015UniqueSeparatorUserControl.Resources
15582373Di2015UniqueSeparatorWindow.Resources
15582373Di2015UniqueSeparatorApplication.Resources
15582373Di2015UniqueSeparator{StaticResource resourceKey}
15582373Di2015UniqueSeparatorFindResource("resourceKey")
15582373Di2015UniqueSeparatorResources["resourceKey"]
15582373Di2015UniqueSeparatorFindResource
15582373Di2015UniqueSeparatorResource
15582373Di2015UniqueSeparatorStaticResource
15582373Di2015UniqueSeparatorm_AnimationHide = (Storyboard)FindResource("AnimationHide");Di2015NewLine
15582373Di2015UniqueSeparatorvar animation = FindResource("AnimationHide") as Storyboard;Di2015NewLineDi2015NewLinem_AnimationHide = animation.Clone();Di2015NewLinem_AnimationHide.Completed += m_AnimationHide_Completed;Di2015NewLine
15582373Di2015UniqueSeparatorx:Shared="false"
15582373Di2015UniqueSeparator<Storyboard x:Key="AnimationHide" x:Shared="false" />Di2015NewLine
15582503Di2015UniqueSeparator"â877495169fa05b9d8639a0ebc42022338f7d2324"Di2015NewLine
15582503Di2015UniqueSeparator"877495169fa05b9d8639a0ebc42022338f7d2324"Di2015NewLine
15582585Di2015UniqueSeparatorlstRoutes = lstRoutes.Where(r => !r.Any(s => s.param1 > 6)).ToList();Di2015NewLine
15582585Di2015UniqueSeparatorlstRoutes.RemoveAll(r => r.Any(s => s.param1 > 6));Di2015NewLine
15582596Di2015UniqueSeparatorTextChanged
15582596Di2015UniqueSeparator//attach handlerDi2015NewLinetextBox1.TextChanged += new EventHandler(textBox1_TextChanged); Di2015NewLineDi2015NewLineprivate void textBox1_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //move the caret to the end to ensure it scrolls right to the bottomDi2015NewLine    textBox1.SelectionStart = textBox1.Text.Length;Di2015NewLineDi2015NewLine    //scroll to the caretDi2015NewLine    textBox1.ScrollToCaret();Di2015NewLine}Di2015NewLine
15582635Di2015UniqueSeparatorCore
15582762Di2015UniqueSeparator\\n
15582762Di2015UniqueSeparator<LineBreak/>
15582762Di2015UniqueSeparatorhelpBlock.Text = "Here is some text. \\n Here is \\n some \\n more.";Di2015NewLine
15582762Di2015UniqueSeparatorHex
15582762Di2015UniqueSeparator <TextBlock Text="Here is some text. Di2015NewLine Here is Di2015NewLine some Di2015NewLine more."/>Di2015NewLine
15582768Di2015UniqueSeparator^(?!\\$?\\d+(?:\\.\\d+)?$).+$Di2015NewLine
15582768Di2015UniqueSeparator(?<!\\$?\\d+(?:\\.\\d+)?)Di2015NewLine
15582800Di2015UniqueSeparatorint i = 0;Di2015NewLineFunc<int> f = ()=>i;Di2015NewLinei = 3;Di2015NewLineConsole.WriteLine(f());Di2015NewLine
15582939Di2015UniqueSeparatorvar item = doc.DocumentNode.SelectSingleNode("//table//tr//tr//td//div//tr//img");Di2015NewLinestring imageSrc = item.GetAttributeValue("src", "");Di2015NewLineConsole.WriteLine(imageSrc);Di2015NewLine
15583044Di2015UniqueSeparatorDim viStart As Long = Now.TicksDi2015NewLine'...Di2015NewLine'...Di2015NewLine'...Di2015NewLineDim viEnd As Long = Now.Ticks - viStartDi2015NewLine
15583097Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    SendHtmlBody(GetHtmlBody());Di2015NewLine}Di2015NewLinevoid SendHtmlBody(string HtmlBody){Di2015NewLine    using(SmtpClient c = new SmtpClient())Di2015NewLine    {Di2015NewLine        //set smtp options hereDi2015NewLine        using(MailMessage msg = new MailMessage("from@replace.me","to@replace.me"))Di2015NewLine        {Di2015NewLine            msg.Subject = "Testing Bulk mail application";Di2015NewLine            msg.Body = HtmlBody;Di2015NewLine            msg.IsBodyHtml = true;Di2015NewLine            //c.Send(msg);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLinestring GetHtmlBody(){Di2015NewLine    string xmlInput = @"<?xml version=""1.0"" encoding=""utf-8"" ?>Di2015NewLine    <EmailTemplate>Di2015NewLine    <subject>Information from xyz</subject>Di2015NewLine    <displayName>abcd</displayName>Di2015NewLine    <Message1>Di2015NewLine        Thanks you for registering to xyz.Di2015NewLine    </Message1>Di2015NewLine    <Copyright>Copyright xyz</Copyright>Di2015NewLine    </EmailTemplate>";Di2015NewLineDi2015NewLine        string xslInput = @"<?xml version=""1.0"" encoding=""ISO-8859-1""?>Di2015NewLine    <xsl:stylesheet version=""1.0""Di2015NewLine    xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">Di2015NewLine    <xsl:template match=""/"">Di2015NewLine    <html>Di2015NewLine    <body>Di2015NewLine        <h5><xsl:value-of select=""EmailTemplate/subject""/></h5>Di2015NewLine        <h5><xsl:value-of select=""EmailTemplate/displayName""/></h5>Di2015NewLine    </body>Di2015NewLine    </html>Di2015NewLine    </xsl:template>Di2015NewLine    </xsl:stylesheet>";Di2015NewLineDi2015NewLine    using (StringReader srt = new StringReader(xslInput)) // xslInput is a string that contains xslDi2015NewLine    using (StringReader sri = new StringReader(xmlInput)) // xmlInput is a string that contains xmlDi2015NewLine    {Di2015NewLine        using (XmlReader xrt = XmlReader.Create(srt))Di2015NewLine        using (XmlReader xri = XmlReader.Create(sri))Di2015NewLine        {Di2015NewLine            XslCompiledTransform xslt = new XslCompiledTransform();Di2015NewLine            xslt.Load(xrt);Di2015NewLine            using (StringWriter sw = new StringWriter())Di2015NewLine            using (XmlWriter xwo = XmlWriter.Create(sw, xslt.OutputSettings)) // use OutputSettings of xsl, so it can be output as HTMLDi2015NewLine            {Di2015NewLine                xslt.Transform(xri, xwo);Di2015NewLine                return sw.ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15583478Di2015UniqueSeparatorsnippet
15583478Di2015UniqueSeparatortested
15583478Di2015UniqueSeparatorWPF
15583478Di2015UniqueSeparatorVB.NET
15583478Di2015UniqueSeparatorImports System.Runtime.InteropServicesDi2015NewLinePublic Class Form1Di2015NewLine            <DllImport("user32.dll", SetLastError:=True, CharSet:=CharSet.Auto)> Private Shared Function SendMessage(ByVal hWnd As IntPtr, ByVal Msg As UInteger, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As IntPtrDi2015NewLine            End FunctionDi2015NewLineDi2015NewLine            Const WM_APPCOMMAND As UInteger = &H319Di2015NewLine            Const APPCOMMAND_VOLUME_UP As UInteger = &HADi2015NewLine            Const APPCOMMAND_VOLUME_DOWN As UInteger = &H9Di2015NewLine            Const APPCOMMAND_VOLUME_MUTE As UInteger = &H8Di2015NewLineDi2015NewLine            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.ClickDi2015NewLine                SendMessage(Me.Handle, WM_APPCOMMAND, &H30292, APPCOMMAND_VOLUME_UP * &H10000)Di2015NewLine            End SubDi2015NewLine            Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.ClickDi2015NewLine                SendMessage(Me.Handle, WM_APPCOMMAND, &H30292, APPCOMMAND_VOLUME_DOWN * &H10000)Di2015NewLine            End SubDi2015NewLine            Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.ClickDi2015NewLine                SendMessage(Me.Handle, WM_APPCOMMAND, &H200EB0, APPCOMMAND_VOLUME_MUTE * &H10000)Di2015NewLine            End SubDi2015NewLineEnd ClassDi2015NewLine
15583555Di2015UniqueSeparatorint[][] Scores = new int[3][];Di2015NewLine
15583555Di2015UniqueSeparatorScores[0] = new int[12];Di2015NewLineScores[1] = new int[8];Di2015NewLineScores[2] = new int[10];Di2015NewLine
15583555Di2015UniqueSeparatorList<>
15583555Di2015UniqueSeparatorList<List<int>> scores = new List<List<int>>();Di2015NewLineDi2015NewLinescores.Add( new List<int>() );Di2015NewLineDi2015NewLineusing( StreamReader section1read = File.OpenText("Section1.txt"))Di2015NewLine{Di2015NewLine    string line;Di2015NewLine    while ((line = section1read.ReadLine()) != null)Di2015NewLine    {Di2015NewLine        scores[0].Add(int.Parse(line));Di2015NewLine    }Di2015NewLine}Di2015NewLine
15583555Di2015UniqueSeparatorusing
15583555Di2015UniqueSeparatorStreamReader.ReadLine()
15583677Di2015UniqueSeparator    Image tappedImage = new Image();Di2015NewLine    tappedImage = e.OriginalSource as Image;Di2015NewLine    textbox.Text = tappedImage.DataContext.ToString();Di2015NewLine
15583691Di2015UniqueSeparatorprevKeyboard
15583691Di2015UniqueSeparatorpublic void Update(GameTime gameTime)Di2015NewLine{Di2015NewLine    keyboard = Keyboard.GetState();Di2015NewLineDi2015NewLine    if (CheckKeyboard(Keys.Up))Di2015NewLine    {Di2015NewLine        if (selected > 0)Di2015NewLine        {Di2015NewLine            selected--;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if (CheckKeyboard(Keys.Down))Di2015NewLine    {Di2015NewLine        if (selected < buttonList.Count - 1)Di2015NewLine        {Di2015NewLine            selected++;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    prevKeyboard = keyboard; // <=========== CHANGE MADE HEREDi2015NewLine}Di2015NewLineDi2015NewLinepublic bool CheckKeyboard(Keys key)Di2015NewLine{Di2015NewLine    return (keyboard.IsKeyDown(key) && prevKeyboard.IsKeyUp(key));Di2015NewLine}Di2015NewLine
15583835Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    MessageBox.Show(ProcesControls(this));Di2015NewLine}Di2015NewLineDi2015NewLineprivate string ProcesControls(Control parent)Di2015NewLine{Di2015NewLine    string s = "";Di2015NewLine    foreach (Control c in parent.Controls)Di2015NewLine    {Di2015NewLine        if (c.HasChildren)Di2015NewLine            s+=ProcesControls(c);Di2015NewLineDi2015NewLine        s += c.Text;Di2015NewLine    }Di2015NewLine    return s;Di2015NewLine}Di2015NewLine
15583919Di2015UniqueSeparatorclass PersonDi2015NewLine{Di2015NewLine    string Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass Employee : PersonDi2015NewLine{Di2015NewLine    string Company { get; set; }Di2015NewLine}Di2015NewLine
15583919Di2015UniqueSeparatorName
15583919Di2015UniqueSeparatorinterface IPolygonDi2015NewLine{Di2015NewLine    double CalculateArea()Di2015NewLine}Di2015NewLineDi2015NewLineclass Rectangle : IPolygonDi2015NewLine{Di2015NewLine    double Width { get; set; }Di2015NewLine    double Height { get; set; }Di2015NewLineDi2015NewLine    double CalculateArea()Di2015NewLine    {Di2015NewLine        return this.Width * this.Height;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Triangle : IPolygonDi2015NewLine{Di2015NewLine    double Base { get; set; }Di2015NewLine    double Height { get; set; }Di2015NewLineDi2015NewLine    double CalculateArea()Di2015NewLine    {Di2015NewLine        return 0.5 * this.Base * this.Height;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15583919Di2015UniqueSeparatorRectangle
15583919Di2015UniqueSeparatorTriangle
15583919Di2015UniqueSeparatorCalculateArea
15583998Di2015UniqueSeparatorseparation of concerns
15583998Di2015UniqueSeparatorView
15583998Di2015UniqueSeparatorApplication Logic
15583998Di2015UniqueSeparatorView
15583998Di2015UniqueSeparatorListBoxItems
15583998Di2015UniqueSeparatorEntity
15583998Di2015UniqueSeparatorAnimations
15583998Di2015UniqueSeparatorSelectedItem
15583998Di2015UniqueSeparatorUI Virtualization
15583998Di2015UniqueSeparatorResolution Independent
15583998Di2015UniqueSeparatorListView
15583998Di2015UniqueSeparatorListBox
15583998Di2015UniqueSeparatorListView
15584141Di2015UniqueSeparator            var selectedTeacher = from t in selectTemp where t.InstructorFullName == teacher select t;Di2015NewLineDi2015NewLineDi2015NewLine            viewModel.Enrollments = selectedTeacher;Di2015NewLine
15584155Di2015UniqueSeparatorvar RecordList = objContext.CategoriesDi2015NewLine    .Select(c => new { DisplayText = c.CatName, Value = c.CategoryId })Di2015NewLine    .ToList();Di2015NewLineRecordList.Insert(0, new { DisplayText = "-- Select --", Value = 0 });Di2015NewLine
15584206Di2015UniqueSeparatorpublic static DateTime GetNistTime()Di2015NewLine{Di2015NewLine    DateTime dt = DateTime.MinValue;Di2015NewLineDi2015NewLine    HttpWebRequest req = (HttpWebRequest)WebRequest.Create("http://....");Di2015NewLine    req.Method = "GET";Di2015NewLine    req.Accept = "text/html, application/xhtml+xml, */*";Di2015NewLine    req.UserAgent = "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)";Di2015NewLine    req.CachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore); //No cachingDi2015NewLine    HttpWebResponse res = (HttpWebResponse)req.GetResponse();Di2015NewLine    if (res.StatusCode == HttpStatusCode.OK)Di2015NewLine    {Di2015NewLine        StreamReader st = new StreamReader(res.GetResponseStream());Di2015NewLine        string html = st.ReadToEnd().ToUpper();Di2015NewLine        string time = Regex.Match(html, @">\\d+:\\d+:\\d+<").Value; //HH:mm:ss formatDi2015NewLine        string date = Regex.Match(html, @">\\w+,\\s\\w+\\s\\d+,\\s\\d+<").Value; //dddd, MMMM dd, yyyyDi2015NewLine        dt= DateTime.Parse((date + " " + time).Replace(">", "").Replace("<", ""));Di2015NewLine    }Di2015NewLineDi2015NewLine    return dt;Di2015NewLine}Di2015NewLine
15584224Di2015UniqueSeparatorid
15584224Di2015UniqueSeparatorCreatedAt
15584224Di2015UniqueSeparatorAutoMapper.Mapper.AssertConfigurationIsValid()
15584224Di2015UniqueSeparatorCreateMap
15584224Di2015UniqueSeparatorDepartments
15584224Di2015UniqueSeparatorname
15584224Di2015UniqueSeparatorvar reg = new Registration { name = dto.name }; // less code than with automapperDi2015NewLineDi2015NewLinereg.Departments = new List<int>(dto.Departments)Di2015NewLine    .ConvertAll(input => Context.Departments.Find(input));Di2015NewLineDi2015NewLineif(reg.Departments.Contains(null)) //a department provided does not exist in the databaseDi2015NewLine    return Request.CreateResponse(HttpStatusCode.BadRequest, "invalid department");Di2015NewLine
15584224Di2015UniqueSeparatorMapper.CreateMap<RegistrationDTO, Registration>()Di2015NewLine   .ForMember(d => d.id, o => o.Ignore())Di2015NewLine   .ForMember(d => d.CreatedAt, o => o.UseValue(DateTime.Now))Di2015NewLine   .ForMember(d => d.Departments, o => o.MapFrom(s => Di2015NewLine   {Di2015NewLine       var dbContext = new MyDbContext();Di2015NewLine       var departments = new List<int>(s.Departments)Di2015NewLine           .ConvertAll(input => dbContext.Departments.Find(input));Di2015NewLine       return departments;Di2015NewLine   }))Di2015NewLine;Di2015NewLine
15584224Di2015UniqueSeparatorDbContext
15584224Di2015UniqueSeparatorDbContext
15584224Di2015UniqueSeparatorRegistration
15584224Di2015UniqueSeparatordbContext.Registrations.Add(reg)
15584224Di2015UniqueSeparatorSaveChanges
15584224Di2015UniqueSeparatorDepartment
15584224Di2015UniqueSeparatorpublic virtual ICollection<SomeOtherEntity> OtherEntities { get; set; }
15584224Di2015UniqueSeparatorpublic virtual SomeOtherEntity OtherEntity { get; set; }
15584224Di2015UniqueSeparatorCreateMap
15584224Di2015UniqueSeparatorIgnore
15584224Di2015UniqueSeparatorvirtual
15584224Di2015UniqueSeparatorvar reg = new RegistrationDi2015NewLine{Di2015NewLine    name = dto.name,Di2015NewLine    prop1 = dto.prop1,Di2015NewLine    prop2 = dto.prop2,Di2015NewLine    ...Di2015NewLine    propN = dto.propNDi2015NewLine};Di2015NewLine
15584224Di2015UniqueSeparatorCreateMap
15584285Di2015UniqueSeparator using (PdfReader reader = new PdfReader(FilePath),PdfReader reader1 = new PdfReader(MapFilePath))Di2015NewLine{Di2015NewLinepass that reader1 object to AddMap method.Di2015NewLine}Di2015NewLine
15584290Di2015UniqueSeparator[HttpPost]Di2015NewLine    public ActionResult Create(Player model)Di2015NewLine    {Di2015NewLine        if (ModelState.IsValid)Di2015NewLine        {Di2015NewLine            using (var db = new EfDb())Di2015NewLine            {Di2015NewLine                //Since you have the username cached, you can check the local EF cache for the object before hitting the db.Di2015NewLine                //var userProfile = db.UserProfiles.Single(u => u.UserName == User.Identity.Name);Di2015NewLine                var userProfile = db.UserProfiles.Local.SingleOrDefault(u => u.UserName == User.Identity.Name) Di2015NewLine                               ?? db.UserProfiles.SingleOrDefault(u => u.UserName == User.Identity.Name);Di2015NewLine                if (userProfile != null)Di2015NewLine                {Di2015NewLine                    var player = new PlayerDi2015NewLine                                     {Di2015NewLine                                         UserProfile = userProfile,                                             Di2015NewLine                                         ....Di2015NewLine                                         ....                                              Di2015NewLine                                     };  Di2015NewLine                    player.TeamId = 5;                      Di2015NewLine                    db.Players.Add(player);                          Di2015NewLineDi2015NewLine                    db.SaveChanges();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        PopulateTeamsDropDownList(model.TeamId);Di2015NewLine        return View(model);Di2015NewLine    }Di2015NewLine
15584382Di2015UniqueSeparatorArrayList<CheckBox> checkboxes = new ArrayList<CheckBox>();Di2015NewLinefor(int i=0;i<5;i++)Di2015NewLine{Di2015NewLine    checkboxes.Add(new CheckBox());Di2015NewLine}Di2015NewLine
15584442Di2015UniqueSeparatorvar StringInput = new Control[] { preInput1, preInput5, postInput1, postInput5};Di2015NewLineint stringCount1 = 0;Di2015NewLineint toto = (ArrayCount + StringInput.Length);Di2015NewLineDi2015NewLineforeach (var c in StringInput)Di2015NewLine{Di2015NewLine  c.Text = Convert.ToString(energyCalculation.Cells[place[xCSV]].Value);Di2015NewLine  xCSV++;Di2015NewLine  //stringCount1++;Di2015NewLine  ArrayCount++;Di2015NewLine}Di2015NewLine
15584465Di2015UniqueSeparatorDECLARE @Bounds AS Geography = GEOMETRY::STGeomFromText('polygon-wkt-here',0)Di2015NewLineDi2015NewLineSELECT columns-listDi2015NewLineFROM   tableDi2015NewLineWHERE  1 = @Bounds.STIntersects(table.point-column)Di2015NewLine
15584659Di2015UniqueSeparatorprivate void UserInfo(string userName, string userEmail, string imageURL);Di2015NewLine
15584659Di2015UniqueSeparatorSystem.Net.WebClient
15584659Di2015UniqueSeparatorprivate void UserInfo(string userName, string userEmail, string imageURL)Di2015NewLine{Di2015NewLine    WebClient client = new WebClient();Di2015NewLine    byte[] imgData = client.DownloadData(imageURL);Di2015NewLineDi2015NewLine    // store imgData in database (code depends on what API you're Di2015NewLine    // using to access the DBDi2015NewLine}Di2015NewLine
15584660Di2015UniqueSeparatorCEmployee<T>
15584660Di2015UniqueSeparatorCEmployee<>
15584660Di2015UniqueSeparatorCEmployee<>
15584660Di2015UniqueSeparatorCEmployee<T>
15584660Di2015UniqueSeparatorT
15584660Di2015UniqueSeparatorIsGenericTypeDefinition
15584660Di2015UniqueSeparatorGetGenericArguments()[0]
15584660Di2015UniqueSeparatorFullName
15584713Di2015UniqueSeparatorclass ImageAndThumbDi2015NewLine{Di2015NewLine    public Image Thumb;Di2015NewLine    public Image Big;Di2015NewLine    private string ImagePath;Di2015NewLine    public ImageAndThumb(string fileName)Di2015NewLine    {         Di2015NewLine        ImagePath = fileName;Di2015NewLine        Image image = Image.FromFile(fileName)Di2015NewLine        Image thumb = img.GetThumbnailImage(200, 200, ()=>false, IntPtr.Zero);Di2015NewLine    }Di2015NewLine    public Image LoadBigImage()Di2015NewLine    {Di2015NewLine        Big = Image.FromFile(ImagePath);Di2015NewLine        return Big;Di2015NewLine    }Di2015NewLine    public void UnloadImage()Di2015NewLine    {Di2015NewLine        Big = null;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
15584713Di2015UniqueSeparatorList<ImageAndThumb> Images = new List<ImageAndThumb>();Di2015NewLine  private void LoadBtn_Click_1(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        OpenFileDialog newDialog = new OpenFileDialog();Di2015NewLine        if (newDialog.ShowDialog() == DialogResult.OK)Di2015NewLine        {Di2015NewLine            Images.Clear();Di2015NewLineDi2015NewLine            string dirPath  = System.IO.Path.GetDirectoryName(newDialog.FileName.ToLower()); Di2015NewLine            DirectoryInfo di = new DirectoryInfo(dirPath);Di2015NewLine            FileInfo[] finfos = di.GetFiles("*.*");Di2015NewLineDi2015NewLine            foreach (FileInfo fi in finfos)Di2015NewLine            {Di2015NewLine                string ext = fi.Extension.ToLower();Di2015NewLine                if ((ext.Equals(".png")) || (ext.Equals(".jpg")) || (ext.Equals(".tif")) ||                  (ext.Equals(".gif")))Di2015NewLine                {Di2015NewLine                    string Filename = fi.FullName;Di2015NewLine                    ImageAndThumb image = new ImageAndThumb(Filename); Di2015NewLine                    Images.Add(image);Di2015NewLine                }Di2015NewLine            } Di2015NewLine        }Di2015NewLineDi2015NewLine        pictureBox3.Image = Images[0].Thumb; // << Much less memory usage;Di2015NewLineDi2015NewLine    }Di2015NewLine
15584713Di2015UniqueSeparatorvoid ShowPicture(int index)Di2015NewLine{Di2015NewLine    Images[index].LoadBigImage();Di2015NewLine    PictureBoxBig.image = Images[index].Big;Di2015NewLine}Di2015NewLinevoid ClosePicture(int index)Di2015NewLine{Di2015NewLine    Images[index].UnloadImage();Di2015NewLine}Di2015NewLine
15584713Di2015UniqueSeparatorint currentPictureIndex = -1;Di2015NewLine    void ShowPicture(int index)Di2015NewLine    {Di2015NewLine        Images[index].LoadBigImage();Di2015NewLine        PictureBoxBig.image = Images[index].Big;Di2015NewLine        if(CurrentPictureIndex > -1) ClosePicture(CurrentPictureIndex);Di2015NewLine        currentPictureIndex = index;Di2015NewLine    }Di2015NewLine
15584762Di2015UniqueSeparatorbool IsGreyScale(Bitmap YourCurrentBitmap)Di2015NewLine{Di2015NewLineColor c;Di2015NewLinefor(int i=0; i < YourCurrentBitmap.Width; i++)Di2015NewLine     for(int j=0; j < YourCurrentBitmap.Height; j++)Di2015NewLine          {Di2015NewLine               c = YourCurrentBitmap.GetPixel(i,j);Di2015NewLine               if(!(c.R == c.G == c.B)) return false;Di2015NewLine          }Di2015NewLinereturn true;Di2015NewLine}Di2015NewLine
15584833Di2015UniqueSeparatorC
15584833Di2015UniqueSeparatorprivate
15584833Di2015UniqueSeparatornew
15584833Di2015UniqueSeparatorprivate new C;Di2015NewLine
15584849Di2015UniqueSeparatorIQueryable<User> users = db.Users;Di2015NewLineDi2015NewLineif(name != null) users = users.Where(u => u.Name == name);Di2015NewLineif(dept != null) users = users.Where(u => u.Dept == dept);Di2015NewLine...Di2015NewLineDi2015NewLinevar page = users.OrderBy(u => u.Name).Take(100).ToList();Di2015NewLine
15584849Di2015UniqueSeparatorWhere
15584849Di2015UniqueSeparatorStringBuilder
15584849Di2015UniqueSeparator...Di2015NewLineif(name != null) {Di2015NewLine    sql.Append(" and u.Name = @name");Di2015NewLine    cmd.Parameters.AddWithValue("name", name);Di2015NewLine}Di2015NewLineif(dept != null) {Di2015NewLine    sql.Append(" and u.Dept = @dept");Di2015NewLine    cmd.Parameters.AddWithValue("dept", dept);Di2015NewLine}Di2015NewLine...Di2015NewLine
15585364Di2015UniqueSeparatorGetPicturesConcurrently()
15585364Di2015UniqueSeparatorprivate void GetPicturesConcurrently()Di2015NewLine{Di2015NewLine    Reset();Di2015NewLineDi2015NewLine    foreach (ListViewItem item in listView1.Items)Di2015NewLine    {Di2015NewLine        var copy = item;Di2015NewLine        BackgroundWorker fileCounter = new BackgroundWorker();Di2015NewLine        fileCounter.DoWork += new DoWorkEventHandler((obj, e) => CountFilesInFolder(copy.Text));Di2015NewLine        fileCounter.RunWorkerCompleted += new RunWorkerCompletedEventHandler((obj, e) => UpdateCountListView(copy.Index));Di2015NewLine        fileCounter.RunWorkerAsync();               Di2015NewLine    }Di2015NewLine}Di2015NewLine
15585364Di2015UniqueSeparatorCountFilesInFolder()
15585364Di2015UniqueSeparatorprivate void CountFilesInFolder(string folder)Di2015NewLine{Di2015NewLine    DirectoryInfo dirInfo = new DirectoryInfo(folder);Di2015NewLineDi2015NewLine    IEnumerable<FileInfo> files = dirInfo.EnumerateFiles();Di2015NewLineDi2015NewLine    int count = files.Count();Di2015NewLineDi2015NewLine    MyFiles.AddOrUpdate(folder, count, (key, oldvalue) => files.Count());Di2015NewLine}Di2015NewLine
15585364Di2015UniqueSeparatorfolder
15585364Di2015UniqueSeparatorMyFiles
15585364Di2015UniqueSeparatorAddOrUpdate
15585364Di2015UniqueSeparatorfiles.Count()
15585364Di2015UniqueSeparatorfolder
15585364Di2015UniqueSeparatorMyFiles
15585364Di2015UniqueSeparatorMyFiles.Add()
15585364Di2015UniqueSeparatorMyFiles.AddOrUpdate()
15585364Di2015UniqueSeparatorfolder
15585364Di2015UniqueSeparatorMyFiles
15585364Di2015UniqueSeparatorMyFiles.AddOrUpdate(folder, count, (key, oldvalue) => count);
15585387Di2015UniqueSeparatorFilesStream
15585875Di2015UniqueSeparatorvar result = from ea in SimEADi2015NewLine         join e in SimEDi2015NewLine         on ea.EmailID equals e.EmailMsgIDDi2015NewLine     where ea.UserId = userIdDi2015NewLine         select new { properties you want here or new object based on properties}Di2015NewLine
15585938Di2015UniqueSeparatorSET @queryDi2015NewLine= 'SELECT empid, name, status, ' + @cols + ' Di2015NewLine   FROM (SELECT empid, name, status, doortime, date + ''_'' + col AS col_names Di2015NewLine         FROM  (SELECT k_userid AS [empid], K_Name AS name, Di2015NewLine                       k_description1 as [status], K_WorktimeUp1 AS [IN], Di2015NewLine                       ktimeDown1 AS OUT, CONVERT(char(10), K_Date, 101) AS date Di2015NewLine                FROM  dbo.kq_report_analyze Di2015NewLine                WHERE (K_Date BETWEEN @dt AND @dt2) Di2015NewLine                GROUP BY K_UserID, K_Name, k_description1, K_Date, K_WorktimeUp1,Di2015NewLine                         K_WorktimeDown1) src  Di2015NewLine   UNPIVOT (doortime FOR col IN ([IN], [OUT])) unpiv) p Di2015NewLine   PIVOT (max(doortime) FOR col_names IN (' + @cols + ')) piv;'Di2015NewLineDi2015NewLineEXEC sp_executesql @query, N'@dt datetime, @dt2 datetime', @dt, @dt2Di2015NewLine
15586000Di2015UniqueSeparatorpublic static IEnumerable<string> YourMethod()Di2015NewLine{Di2015NewLine     string gowtham = "test1,test2,test3";Di2015NewLine     string[] mysamples = gowtham.Split(',');Di2015NewLine     List<string> senum = new List<string>();Di2015NewLineDi2015NewLine     foreach ( string s in mysamples )Di2015NewLine     {Di2015NewLine         senum.Add(s);Di2015NewLine     }Di2015NewLineDi2015NewLine     return senum as IEnumerable<string>;Di2015NewLine}Di2015NewLine
15586000Di2015UniqueSeparatorstring[]
15586000Di2015UniqueSeparatorIEnumerable<T>
15586000Di2015UniqueSeparatorIEnumerable<T>
15586000Di2015UniqueSeparatorpublic static IEnumerable<string> YourMethod()Di2015NewLine{Di2015NewLine     string gowtham = "test1,test2,test3";Di2015NewLine     return gowtham .Split(',');Di2015NewLine}Di2015NewLine
15586138Di2015UniqueSeparatorcmdText
15586138Di2015UniqueSeparator)
15586138Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection(cs))Di2015NewLine{Di2015NewLine   using (SqlCommand command = conn.CreateCommand())Di2015NewLine   {Di2015NewLine      conn.Open();Di2015NewLine      string cmdText = String.Format("INSERT INTO UserFiles VALUES(@userRef, @name1, @name2, @name3, @name4, @name5, @name6)");Di2015NewLine      command.Parameters.AddVithValue("@userRef", obj.userRef.ToString()); Di2015NewLine      command.Parameters.AddVithValue("@name1", name); Di2015NewLine      command.Parameters.AddVithValue("@name2", name); Di2015NewLine      command.Parameters.AddVithValue("@name3", name); Di2015NewLine      command.Parameters.AddVithValue("@name4", name); Di2015NewLine      command.Parameters.AddVithValue("@name5", name); Di2015NewLine      command.Parameters.AddVithValue("@name6", name); Di2015NewLine      command.CommandText = cmdText;Di2015NewLine      command.ExecuteNonQuery();Di2015NewLine      conn.Close();Di2015NewLine   }Di2015NewLine}Di2015NewLine
15586170Di2015UniqueSeparatorpublic class Parent {Di2015NewLine    public int one;Di2015NewLine    public int two;Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Child: Parent {Di2015NewLine    public int three;Di2015NewLine    public int four;Di2015NewLine}Di2015NewLine
15586170Di2015UniqueSeparatorvar child=Di2015NewLine    new Child {Di2015NewLine        one=1,Di2015NewLine        two=2,Di2015NewLine        three=3,Di2015NewLine        four=4Di2015NewLine    };Di2015NewLine
15586176Di2015UniqueSeparator// Obtain a list of properties of string typeDi2015NewLinevar stringProps = OS_ResultDi2015NewLine    .OSResultStructDi2015NewLine    .GetType()Di2015NewLine    .GetProperties()Di2015NewLine    .Where(p => p.PropertyType == typeof(string));Di2015NewLineforeach (var prop in stringProps) {Di2015NewLine    // Use the PropertyInfo object to extract the corresponding valueDi2015NewLine    // from the OS_Result.OSResultStruct objectDi2015NewLine    string val = (string)prop.GetValue(OS_Result.OSResultStruct);Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15586176Di2015UniqueSeparatorIEnumerable<string>
15586176Di2015UniqueSeparatorpublic static IEnumerable<KeyValuePair<string,string>> StringProperties(object obj)Di2015NewLine{Di2015NewLine    return from p in obj.GetType().GetProperties()Di2015NewLine            where p.PropertyType == typeof(string)Di2015NewLine            select new KeyValuePair<string,string>(p.Name, (string)p.GetValue(obj));Di2015NewLine}Di2015NewLine
15586176Di2015UniqueSeparatorpublic static IEnumerable<KeyValuePair<string,T>> PropertiesOfType<T>(object obj)Di2015NewLine{Di2015NewLine    return from p in obj.GetType().GetProperties()Di2015NewLine            where p.PropertyType == typeof(T)Di2015NewLine            select new KeyValuePair<string,T>(p.Name, (T)p.GetValue(obj));Di2015NewLine}Di2015NewLine
15586176Di2015UniqueSeparatorforeach (var property in PropertiesOfType<string>(myObject)) {Di2015NewLine    var name = property.Key;Di2015NewLine    var val = property.Value;Di2015NewLine    ...Di2015NewLine}Di2015NewLine
15586195Di2015UniqueSeparatorref
15586195Di2015UniqueSeparatorpublic Vector3 BiLerp(Di2015NewLine    ref Vector2 _uv, ref Vector3 _00, ref Vector3 _01,Di2015NewLine    ref Vector3 _10, ref Vector3 _11)`Di2015NewLine
15586234Di2015UniqueSeparatorClientRectangle
15586234Di2015UniqueSeparatorClientSize
15586234Di2015UniqueSeparatorForm1_Paint
15586234Di2015UniqueSeparatorprivate void Form1_Paint(object sender, PaintEventArgs e)Di2015NewLine{Di2015NewLine        Form frm = (Form)sender;Di2015NewLine        ControlPaint.DrawBorder(e.Graphics, frm.ClientRectangle,Di2015NewLine        Color.LightBlue, 5, ButtonBorderStyle.Solid,Di2015NewLine        Color.LightBlue, 5, ButtonBorderStyle.Solid,Di2015NewLine        Color.LightBlue, 5, ButtonBorderStyle.Solid,Di2015NewLine        Color.LightBlue, 5, ButtonBorderStyle.Solid);Di2015NewLine}Di2015NewLine
15586234Di2015UniqueSeparatorClientRectangle
15586234Di2015UniqueSeparatorDrawBorder
15586234Di2015UniqueSeparatorClientRectangle
15586596Di2015UniqueSeparator100d = n * x + r, Di2015NewLineDi2015NewLinewhere 100d, n, x, r are integers, and 0 <= r < xDi2015NewLine
15586596Di2015UniqueSeparatord / x = n / 100 + r / 100xDi2015NewLine
15586596Di2015UniqueSeparator0 <= r / x < 1,Di2015NewLine0 <= r / 100x < 0.01Di2015NewLine
15586596Di2015UniqueSeparator(1) n / 100, when r < x / 2, orDi2015NewLine(2) n / 100 + 0.01, when r >= x / 2Di2015NewLine
15586596Di2015UniqueSeparatordiff = d - (n / 100) * x              for (1), orDi2015NewLinediff = d - (n / 100) * x + 0.01 * x   for (2)Di2015NewLine
15586596Di2015UniqueSeparator(n / 100) * x  = d - r/100Di2015NewLine
15586596Di2015UniqueSeparatormax diff = r / 100 + 0.01 * x = (r + x) / 100Di2015NewLine
15586596Di2015UniqueSeparatorx / 2 <= r < x,Di2015NewLine
15586596Di2015UniqueSeparatormax diff = 2 * x * 0.01 = x / 200Di2015NewLine
15586596Di2015UniqueSeparator        decimal number = 100.00M;Di2015NewLineDi2015NewLine        decimal max = decimal.MinValue;Di2015NewLine        decimal min = decimal.MaxValue;Di2015NewLineDi2015NewLine        int maxX = 0;Di2015NewLine        int minX = 0;Di2015NewLineDi2015NewLine        for (int x = 1; x <= number; x++)Di2015NewLine        {Di2015NewLine            var result = number / x;Di2015NewLine            var roundedResult = Math.Round(result, 2, MidpointRounding.AwayFromZero);Di2015NewLine            var roundingDiff = number - (roundedResult * x);Di2015NewLine            if (roundingDiff < min)Di2015NewLine            {Di2015NewLine                min = roundingDiff;Di2015NewLine                minX = x;Di2015NewLine            }Di2015NewLine            if (roundingDiff > max)Di2015NewLine            {Di2015NewLine                max = roundingDiff;Di2015NewLine                maxX = x;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("Max is {0} for {1}", max, maxX);Di2015NewLine        Console.WriteLine("Min is {0} for {1}", min, minX);Di2015NewLine        Console.WriteLine("Delta is {0}", max - min);Di2015NewLine        Console.WriteLine("d / 200 = {0}", number / 200);Di2015NewLine
15586596Di2015UniqueSeparatorMax is 0.40 for 83Di2015NewLineMin is -0.44 for 93Di2015NewLineDelta is 0.84Di2015NewLined / 200 = 0.50Di2015NewLine
15586623Di2015UniqueSeparatorForEach
15586623Di2015UniqueSeparatorFor
15586623Di2015UniqueSeparator for (int i = myTableLayoutPanelControls.Count - 1; i >= 0; --i) Di2015NewLine    myTableLayoutPanelControls[i].Dispose();Di2015NewLine
15586623Di2015UniqueSeparatorDispose
15586623Di2015UniqueSeparatorDispose
15586623Di2015UniqueSeparatorIDisposable
15586623Di2015UniqueSeparatorDispose
15586623Di2015UniqueSeparatorbase
15586623Di2015UniqueSeparatorDispose
15586726Di2015UniqueSeparatorXmlSerializer
15586726Di2015UniqueSeparatorDoctor
15586726Di2015UniqueSeparatorpublic class
15586726Di2015UniqueSeparatorDataContractSerializer
15586727Di2015UniqueSeparatorfor (int j = 0; j < dtNodes.Rows.Count; j++)Di2015NewLine{   string parentid = dtNodes.Rows[j]["parentid"].ToString();Di2015NewLine    TreeNode childNode = new TreeNode(dtNodes.Rows[j]["TITLE"].ToString());Di2015NewLine    CategoryNode.ChildNodes.Add(childNode);Di2015NewLine}Di2015NewLine
15586727Di2015UniqueSeparatorforeach(DataRow drChild in dtNodes.Select("CategoryID=" + categoryid))Di2015NewLine{   Di2015NewLine    TreeNode childNode = new TreeNode(drChild["TITLE"].ToString());Di2015NewLine    CategoryNode.ChildNodes.Add(childNode);Di2015NewLine}Di2015NewLine
15586839Di2015UniqueSeparator_rootVC.TableView.BackgroundView = null;Di2015NewLine
15586839Di2015UniqueSeparatorUITableView
15586839Di2015UniqueSeparatorBackgroundView
15586941Di2015UniqueSeparator.
15586941Di2015UniqueSeparator.*\\bfunction\\b.+?\\bhello\\b.+?\\}Di2015NewLine
15586941Di2015UniqueSeparatorThe regular expression:Di2015NewLine(?s-imx:.*\\bfunction\\b.+?\\bhello\\b.+?\\})Di2015NewLinematches as follows:Di2015NewLineDi2015NewLineNODE                     EXPLANATIONDi2015NewLine----------------------------------------------------------------------Di2015NewLine(?s-imx:                 group, but do not capture (with . matchingDi2015NewLine                         \\n) (case-sensitive) (with ^ and $ matchingDi2015NewLine                         normally) (matching whitespace and #Di2015NewLine                         normally):Di2015NewLine----------------------------------------------------------------------Di2015NewLine  .*                       any character (0 or more times (matchingDi2015NewLine                           the most amount possible))Di2015NewLine----------------------------------------------------------------------Di2015NewLine  \\b                       the boundary between a word char (\\w) andDi2015NewLine                           something that is not a word charDi2015NewLine----------------------------------------------------------------------Di2015NewLine  function                 'function'Di2015NewLine----------------------------------------------------------------------Di2015NewLine  \\b                       the boundary between a word char (\\w) andDi2015NewLine                           something that is not a word charDi2015NewLine----------------------------------------------------------------------Di2015NewLine  .+?                      any character (1 or more times (matchingDi2015NewLine                           the least amount possible))Di2015NewLine----------------------------------------------------------------------Di2015NewLine  \\b                       the boundary between a word char (\\w) andDi2015NewLine                           something that is not a word charDi2015NewLine----------------------------------------------------------------------Di2015NewLine  hello                    'hello'Di2015NewLine----------------------------------------------------------------------Di2015NewLine  \\b                       the boundary between a word char (\\w) andDi2015NewLine                           something that is not a word charDi2015NewLine----------------------------------------------------------------------Di2015NewLine  .+?                      any character (1 or more times (matchingDi2015NewLine                           the least amount possible))Di2015NewLine----------------------------------------------------------------------Di2015NewLine  \\}                       '}'Di2015NewLine----------------------------------------------------------------------Di2015NewLine)                        end of groupingDi2015NewLine----------------------------------------------------------------------Di2015NewLine
15586962Di2015UniqueSeparatorSortedSet<DateTime> splitdates = new SortedSet<DateTime>();Di2015NewLineforeach (var item in _list)Di2015NewLine{Di2015NewLine    splitdates.Add(item.Period.Start);Di2015NewLine    splitdates.Add(item.Period.End);Di2015NewLine}Di2015NewLineDi2015NewLinevar list = splitdates.ToList();Di2015NewLinevar ranges = new List<DateRange>();Di2015NewLinefor (int i = 0; i < list.Count - 1; i++)Di2015NewLine    ranges.Add(new DateRange() { Start = list[i], End = list[i + 1] });Di2015NewLineDi2015NewLinevar result = from range in rangesDi2015NewLine             from c in _listDi2015NewLine             where c.Period.Intersect(range) != nullDi2015NewLine             group c by range into rDi2015NewLine             select new Capacities(r.Key.Start, r.Key.End, r.Sum(a => a.Capacity));Di2015NewLine
15587004Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLinestatic extern uint keybd_event(byte bVk, byte bScan, int dwFlags, int dwExtraInfo);Di2015NewLinepublic static void KeyDown(System.Windows.Forms.Keys key)Di2015NewLine{Di2015NewLine      keybd_event((byte)key, 0x45, 0x0001 | 0, 0);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void KeyUp(System.Windows.Forms.Keys key)Di2015NewLine{Di2015NewLine      keybd_event((byte)key, 0x45, 0x0001 | 0x0002, 0);Di2015NewLine}Di2015NewLine
15587068Di2015UniqueSeparatorHttpContext.Current
15587068Di2015UniqueSeparatorLogicalCallContext
15587068Di2015UniqueSeparator[ThreadLocal]Di2015NewLinepublic static HttpContext Current;Di2015NewLine
15587156Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    var main = new MyForm();Di2015NewLine    //Initialize a new thread with the `DoSomething()` methodDi2015NewLine    //and pass the form as a parameterDi2015NewLine    var thread = new Thread(() => DoSomething(main)) {IsBackground = true};Di2015NewLine    thread.Start();Di2015NewLine    main.ShowDialog();Di2015NewLine}Di2015NewLineDi2015NewLinestatic void DoSomething(MyForm main) {Di2015NewLine    //Update the form titleDi2015NewLine    main.Text = "Hello";Di2015NewLine    //Wait one secondDi2015NewLine    Thread.Sleep(1000);Di2015NewLine    //Update the form title againDi2015NewLine    main.Text = "World";Di2015NewLine}Di2015NewLine
15587398Di2015UniqueSeparatorchart1.ChartAreas[0].AxisX.Interval = 1;Di2015NewLinechart1.ChartAreas[0].AxisX.Minimum = 1;Di2015NewLinechart1.ChartAreas[0].AxisX.Maximum = 30;Di2015NewLine
15587416Di2015UniqueSeparatorTOperation
15587416Di2015UniqueSeparatorIOperation
15587416Di2015UniqueSeparatorListCompetitions
15587416Di2015UniqueSeparatorTOperation
15587416Di2015UniqueSeparatorpublic IOperation GetOperation<TOperation>() where TOperation : IOperationDi2015NewLine{Di2015NewLine    return new ListCompetitions(); Di2015NewLine}Di2015NewLine
15587652Di2015UniqueSeparatorWindows Forms
15587652Di2015UniqueSeparatorDataRow
15587652Di2015UniqueSeparatorctor
15587652Di2015UniqueSeparatorBinding
15587652Di2015UniqueSeparatorDataView dv = row.Table.DefaultView;Di2015NewLinedv.RowFilter = "recordid=" + row["recordid"].ToString();Di2015NewLinedtpRecDate.DataBindings.Add("Value", dv, "recdate");Di2015NewLinedtpLastMod.DataBindings.Add("Value", dv, "lastmod");Di2015NewLine
15587652Di2015UniqueSeparatorrow
15587652Di2015UniqueSeparatorDataRow
15587652Di2015UniqueSeparatordtpRecDate
15587652Di2015UniqueSeparatordtpLastMod
15587652Di2015UniqueSeparatorDateTimePicker
15587867Di2015UniqueSeparatorExecutor
15587867Di2015UniqueSeparatorDoSomething
15587867Di2015UniqueSeparatoraction
15587868Di2015UniqueSeparatorKeyDown
15587868Di2015UniqueSeparatorTab
15587868Di2015UniqueSeparatore.Handled = true
15587868Di2015UniqueSeparatortab
15587868Di2015UniqueSeparatorTabIndex
15587868Di2015UniqueSeparatorprivate void tb_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Key == Key.Tab)Di2015NewLine    {Di2015NewLine        e.Handled = true;Di2015NewLine        LastControl.Focus();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15588020Di2015UniqueSeparatorWebPage
15588020Di2015UniqueSeparatorpublic class WebPagePlus : WebPageDi2015NewLine{Di2015NewLine    public HelperResult RenderZone(int zone) {Di2015NewLine       return this.RenderPage("~/_RenderWidgets.cshtml", new {ZoneId = zone});Di2015NewLine    }Di2015NewLine}Di2015NewLine
15588020Di2015UniqueSeparatorpublic class MyWebPage : WebPagePlus // WebPageDi2015NewLine{Di2015NewLine//...Di2015NewLine}Di2015NewLine
15588092Di2015UniqueSeparatorBackgroundWorker
15588092Di2015UniqueSeparatorProgressChanged
15588092Di2015UniqueSeparatorRunWorkerCompleted
15588132Di2015UniqueSeparatorasync void
15588132Di2015UniqueSeparatorasync Task
15588132Di2015UniqueSeparatorvoid
15588132Di2015UniqueSeparatorTask
15588132Di2015UniqueSeparatorpublic async Task read(string fileName)Di2015NewLine
15588132Di2015UniqueSeparatorawait
15588132Di2015UniqueSeparatorawait yourclass.read("c:\\\\my_filename.txt");Di2015NewLine
15588140Di2015UniqueSeparatorpublic Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        OleDbConnection conn = new OleDbConnection();Di2015NewLine        conn.ConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\\Project\\Learning\\Visual C#\\Form\\WindowsFormsApplication2\\WindowsFormsApplication2\\Test.mdb";Di2015NewLine        conn.Open();Di2015NewLine        string Name = textBox1.Text;Di2015NewLine        OleDbCommand cmmd = new OleDbCommand("INSERT INTO table1 (student) Values(@Name)", conn);Di2015NewLine        if (conn.State == ConnectionState.Open)Di2015NewLine        {Di2015NewLine            cmmd.Parameters.Add("@Name", OleDbType.VarWChar, 20).Value = Name;Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                cmmd.ExecuteNonQuery();Di2015NewLine                MessageBox.Show("DATA ADDED");Di2015NewLine                conn.Close();Di2015NewLine            }Di2015NewLine            catch (OleDbException expe)Di2015NewLine            {Di2015NewLine                MessageBox.Show(expe.Message);Di2015NewLine                conn.Close();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            MessageBox.Show("CON FAILED");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15588237Di2015UniqueSeparatorImage returnImage;Di2015NewLineDi2015NewLineusing (var ms = new MemoryStream(PictureFile))Di2015NewLine{Di2015NewLine    returnImage = Image.FromStream(ms);Di2015NewLine}Di2015NewLine// leaving the using block closes msDi2015NewLineDi2015NewLinevar img = returnImage.Resize(size);Di2015NewLineDi2015NewLine// create new MemoryStream to save the resized imageDi2015NewLinevar resultStream = new MemoryStream();Di2015NewLineimg.Save(resultStream, format);Di2015NewLineDi2015NewLine// rewind the streamDi2015NewLineresultStream.Seek(0, SeekOrigin.Begin);Di2015NewLineDi2015NewLinereturn resultStream;Di2015NewLine
15588271Di2015UniqueSeparatortry-catch
15588271Di2015UniqueSeparatorstring path = Environment.GetFolderPath(Environment.SpecialFolder.Startup);Di2015NewLinetry {        Di2015NewLine    //Program 1Di2015NewLine    Process x = Process.Start(path + "/runtime  \\"C:\\\\Program Files\\\\Company\\\\Config.xml\\" /cmd RunServer");Di2015NewLine}Di2015NewLinecatch {}Di2015NewLinetry {Di2015NewLine    //Program 2Di2015NewLine    Process x = Process.Start(path + " /runtime  \\"C:\\\\Program Files\\\\Company\\\\Config.xml\\" /cmd RunServer");Di2015NewLinecatch {}Di2015NewLinetry  {Di2015NewLine    //Program 3Di2015NewLine    Process x = Process.Start(path + " /runtime  \\"C:\\\\Program Files\\\\Company\\\\Config.xml\\" /cmd RunServer");Di2015NewLinecatch {}Di2015NewLine
15588290Di2015UniqueSeparator<li>@Html.ActionLink("Home", "Index", "Home", null, new { @class = "btn btn-info" })</li>Di2015NewLine
15588290Di2015UniqueSeparatorrouteValues
15588290Di2015UniqueSeparatorhtmlAttributes
15588392Di2015UniqueSeparatorSQLBaseDriver
15588392Di2015UniqueSeparatorOleDbDriver
15588392Di2015UniqueSeparatorReflectionBasedDriver
15588392Di2015UniqueSeparatorpublic class SQLBaseDriver : NHibernate.Driver.ReflectionBasedDriverDi2015NewLine{Di2015NewLine    public SQLBaseDriver()Di2015NewLine        : base("Gupta.SQLBase.Data",Di2015NewLine               "Gupta.SQLBase.Data.SQLBaseConnection",Di2015NewLine               "Gupta.SQLBase.Data.SQLBaseCommand")Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine    public override bool UseNamedPrefixInSqlDi2015NewLine    {Di2015NewLine        get { return true; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool UseNamedPrefixInParameterDi2015NewLine    {Di2015NewLine        get { return false; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string NamedPrefixDi2015NewLine    {Di2015NewLine        get { return ":"; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15588392Di2015UniqueSeparatorpublic class SQLBaseDialect : GenericDialectDi2015NewLine{Di2015NewLine    public override string ForUpdateStringDi2015NewLine    {Di2015NewLine        get { return " "; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool ForUpdateOfColumnsDi2015NewLine    {Di2015NewLine        get { return true; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string GetForUpdateString(string aliases)Di2015NewLine    {Di2015NewLine        return " for update of " + aliases;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool SupportsOuterJoinForUpdateDi2015NewLine    {Di2015NewLine        get { return false; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool SupportsParametersInInsertSelectDi2015NewLine    {Di2015NewLine        get { return false; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15588430Di2015UniqueSeparatorif (index != -1 && pieces[index].Type != PieceType.Rook)Di2015NewLine{Di2015NewLine    allowed = false;Di2015NewLine}Di2015NewLine
15588539Di2015UniqueSeparator    public static string RenderPartialViewToString(Controller thisController, string viewName, object model)Di2015NewLine    {Di2015NewLine        // assign the model of the controller from which this method was called to the instance of the passed controller (a new instance, by the way)Di2015NewLine        thisController.ViewData.Model = model;Di2015NewLineDi2015NewLine        // initialize a string builderDi2015NewLine        using (StringWriter sw = new StringWriter())Di2015NewLine        {Di2015NewLine            // find and load the view or partial view, pass it through the controller factoryDi2015NewLine            ViewEngineResult viewResult = ViewEngines.Engines.FindPartialView(thisController.ControllerContext, viewName);Di2015NewLine            ViewContext viewContext = new ViewContext(thisController.ControllerContext, viewResult.View, thisController.ViewData, thisController.TempData, sw);Di2015NewLineDi2015NewLine            // render itDi2015NewLine            viewResult.View.Render(viewContext, sw);Di2015NewLineDi2015NewLine            //return the razorized view/partial-view as a stringDi2015NewLine            return sw.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15588775Di2015UniqueSeparatorcurrentTenant.ReferencePhotos.ToList()
15588775Di2015UniqueSeparatorArgumentNullException
15588775Di2015UniqueSeparatorcurrentTenant
15588840Di2015UniqueSeparatorCultureInfo.CurrentCulture
15588840Di2015UniqueSeparatorvar x = Single.Parse("0.0000e+000", CultureInfo.InvariantCulture);Di2015NewLine
15588840Di2015UniqueSeparatorru-RU
15588840Di2015UniqueSeparatorCultureInfo.DefaultThreadCurrentCulture = CultureInfo.GetCultureInfo("ru-RU");Di2015NewLinevar x = Single.Parse("0.0000e+000");Di2015NewLine
15588840Di2015UniqueSeparatorfr-FR
15588847Di2015UniqueSeparatorTooltipService.ShowOnDisabled
15588847Di2015UniqueSeparatortrue (by default value is false)
15588847Di2015UniqueSeparatorApp.xaml.cs
15588847Di2015UniqueSeparator    static App()Di2015NewLine    {Di2015NewLine        ToolTipService.ShowOnDisabledProperty.OverrideMetadata(typeof(Control),Di2015NewLine                  new FrameworkPropertyMetadata(true)); Di2015NewLine    }Di2015NewLine
15588899Di2015UniqueSeparator<div id="title"> </div> <br/>Di2015NewLine<div id="description"> </div> <br/>Di2015NewLine
15588899Di2015UniqueSeparator<asp:Panel runat="server" ID="title"> </asp:Panel> <br/>Di2015NewLine<asp:Panel runat="server" ID="description"> </asp:Panel> <br/>Di2015NewLine
15589037Di2015UniqueSeparatorfor (int i = 0; i < temps.Count; i++)Di2015NewLine
15589037Di2015UniqueSeparator>
15589037Di2015UniqueSeparator<
15589089Di2015UniqueSeparatorStreamReader
15589089Di2015UniqueSeparatorTextReader
15589089Di2015UniqueSeparatorBinaryReader
15589089Di2015UniqueSeparatorBinaryReader
15589089Di2015UniqueSeparatorReadUInt32()
15589089Di2015UniqueSeparator921654Di2015NewLine
15589204Di2015UniqueSeparatorstatic class
15589204Di2015UniqueSeparatorpublic static B b = new B();Di2015NewLine
15589204Di2015UniqueSeparatorb
15589204Di2015UniqueSeparatorB
15589204Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine    public static string myStaticString = "";Di2015NewLineDi2015NewLine    public string myInstanceString = "";Di2015NewLine}Di2015NewLine
15589204Di2015UniqueSeparatormyInstanceString
15589204Di2015UniqueSeparatorMyClass myInstance1 = new MyClass();Di2015NewLineMyClass myInstance2 = new MyClass();Di2015NewLinemyInstance1.myInstanceString = "1";Di2015NewLinemyInstance2.myInstanceString = "2";Di2015NewLineConsole.WriteLine(myInstance1.myInstanceString);  // Prints: 1Di2015NewLineConsole.WriteLine(myInstance2.myInstanceString);  // Prints: 2Di2015NewLine
15589204Di2015UniqueSeparatormyStaticString
15589204Di2015UniqueSeparatorMyClass.myStaticString = "1";Di2015NewLineMyClass.myStaticString = "2";Di2015NewLineConsole.WriteLine(MyClass.myStaticString);        // Prints: 2Di2015NewLine
15589204Di2015UniqueSeparatorstring
15589204Di2015UniqueSeparatorB
15589204Di2015UniqueSeparatorstatic
15589403Di2015UniqueSeparatorPage
15589403Di2015UniqueSeparatorUserControl
15589403Di2015UniqueSeparatorFrame
15589403Di2015UniqueSeparator    if (ISFirstRender)Di2015NewLine    {Di2015NewLine        TabItem tabitem = new TabItem();Di2015NewLine        tabitem.Header = "Tab 3";Di2015NewLine        Frame tabFrame = new Frame();Di2015NewLine        Page1 page1 = new Page1();Di2015NewLine        tabFrame.Content = page1;Di2015NewLine        tabitem.Content = tabFrame;Di2015NewLine        pan1.Items.Add(tabitem);Di2015NewLineDi2015NewLine        ISFirstRender = false;Di2015NewLine    }Di2015NewLine
15589444Di2015UniqueSeparatorObservable.Create
15589444Di2015UniqueSeparatorSubject
15589444Di2015UniqueSeparatorvar running = true;Di2015NewLinevar values = new ConcurrentQueue<int>();Di2015NewLinevar query = Observable.Create<int>(obs =>Di2015NewLine{Di2015NewLine    var body = Task.Factory.StartNew(()=>Di2015NewLine    {Di2015NewLine        while(running)Di2015NewLine        {Di2015NewLine            int nextValue;Di2015NewLine            if(values.TryDequeue(out nextValue))Di2015NewLine            {Di2015NewLine                obs.OnNext(nextValue);Di2015NewLine            }Di2015NewLine            Thread.Yield();Di2015NewLine        }Di2015NewLine    });Di2015NewLine    return Disposable.Create(() =>Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            running = false;Di2015NewLine            body.Wait();Di2015NewLine            obs.OnCompleted();            Di2015NewLine        }Di2015NewLine        catch(Exception ex)Di2015NewLine        {Di2015NewLine            obs.OnError(ex);Di2015NewLine        }Di2015NewLine    });Di2015NewLine});Di2015NewLineusing(query.Subscribe(Console.WriteLine))Di2015NewLine{Di2015NewLine    values.Enqueue(1);Di2015NewLine    values.Enqueue(2);Di2015NewLine    values.Enqueue(3);Di2015NewLine    values.Enqueue(4);Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
15589519Di2015UniqueSeparator';DROP --
15589519Di2015UniqueSeparatorSELECT * Di2015NewLineFROM usersTbl Di2015NewLineWHERE username=@uname AND password=''';DROP --'Di2015NewLine
15589519Di2015UniqueSeparatorcommand
15589519Di2015UniqueSeparatorstring pass_val = "'; DROP usersTbl;--";Di2015NewLine
15589519Di2015UniqueSeparatorSELECT * FROM usersTbl WHERE ... AND password='''; DROP usersTbl;--'Di2015NewLine
15589519Di2015UniqueSeparatorSELECT * FROM usersTbl WHERE ... AND password=''; DROP usersTbl;--Di2015NewLine
15589598Di2015UniqueSeparatorExcel Sheet
15589598Di2015UniqueSeparatorprotected void generateExcelSheet_click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Create Excel SheetDi2015NewLine    var sheet = new Worksheet("Hello, world!");Di2015NewLine    sheet.Cells[0, 0] = "Hello,";Di2015NewLine    sheet.Cells["B1"] = "World!";Di2015NewLine    var workbook = new Workbook();Di2015NewLine    workbook.Add(sheet);Di2015NewLineDi2015NewLine    // SaveDi2015NewLine    Response.ContentType = "application/vnd.ms-excel";Di2015NewLine    Response.AppendHeader("Content-Disposition", "attachment; filename=MyExcelSheet.xls");Di2015NewLine    workbook.Save(Response.OutputStream, CompressionLevel.Maximum);Di2015NewLineDi2015NewLine    Response.End();Di2015NewLine}Di2015NewLine
15589598Di2015UniqueSeparatordesigner.aspx
15589598Di2015UniqueSeparator<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="FileDownload.Default" %>Di2015NewLineDi2015NewLine<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">Di2015NewLineDi2015NewLine<html xmlns="http://www.w3.org/1999/xhtml">Di2015NewLine<head runat="server">Di2015NewLine    <title></title>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <form id="form1" runat="server">Di2015NewLine        <asp:Button ID="btnExcel" runat="server" Text="Download Excel Sheet" onclick="generateExcelSheet_click" />Di2015NewLine    </form>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
15589692Di2015UniqueSeparatorvar max = 1000;Di2015NewLinevar rnd = new Random();Di2015NewLineint a, b;Di2015NewLinedoDi2015NewLine{Di2015NewLine    a = rnd.Next(max);Di2015NewLine    b = rnd.Next(max);Di2015NewLine} while (a <= b);Di2015NewLine
15589715Di2015UniqueSeparatorif (dReader.HasRows) {Di2015NewLine    while (dReader.Read()) {Di2015NewLineDi2015NewLine        if ( dReader["gameweekID"].ToString() == currentWeekId ) Di2015NewLine        {    Di2015NewLine            gameweekList.Text += "<div class=\\"somethingSpecial\\"><h4>Gameweek " + Di2015NewLine            (dReader["gameweekID"].ToString()) + "</h4></div>";Di2015NewLine        } Di2015NewLine        else Di2015NewLine        {Di2015NewLine            gameweekList.Text += "<div class=\\"item\\"><h4>Gameweek " + Di2015NewLine            (dReader["gameweekID"].ToString()) + "</h4></div>";Di2015NewLine        }Di2015NewLine    }Di2015NewLine} else {Di2015NewLine    gameweekList.Text = "Error Finding Gameweeks";Di2015NewLine}Di2015NewLinedReader.Close();Di2015NewLineconn.Close();Di2015NewLine
15589739Di2015UniqueSeparatorShellTile.ActiveTiles.First().Update()
15589739Di2015UniqueSeparatorconst string filename = "/LiveTiles/LiveTileRegular.jpg";Di2015NewLine
15589739Di2015UniqueSeparatorconst string filename = "/Shared/ShellContent/LiveTileRegular.jpg";Di2015NewLine
15589770Di2015UniqueSeparatorBackgroundWorker
15589822Di2015UniqueSeparatorvar blogs = _db.Blogs.Include("Category");Di2015NewLine
15589873Di2015UniqueSeparatorusing System;Di2015NewLineusing  System.Runtime.InteropServices;Di2015NewLineDi2015NewLineclass AppDi2015NewLine{Di2015NewLineDi2015NewLine[DllImportAttribute("KERNEL32.DLL", EntryPoint="MoveFileW",SetLastError=true,CharSet=CharSet.Unicode, ExactSpelling=true,Di2015NewLine        CallingConvention=CallingConvention.StdCall)]Di2015NewLinepublic static extern bool MoveFile(String src, String dst);Di2015NewLineDi2015NewLinestatic void Main()Di2015NewLine {Di2015NewLine   MoveFile("import.cs","D:\\\\aa.cs");Di2015NewLine }Di2015NewLine}Di2015NewLine
15589921Di2015UniqueSeparatorsystem.data
15589969Di2015UniqueSeparatorSMO
15590019Di2015UniqueSeparatorprivate void _timer_Tick(object sender, object e)Di2015NewLine{Di2015NewLine    _timer.Stop();Di2015NewLineDi2015NewLine    DrawVideoFrame();    // calls timer.Start() as one the last lineDi2015NewLine}Di2015NewLine
15590170Di2015UniqueSeparatornew
15590170Di2015UniqueSeparatornew
15590265Di2015UniqueSeparatorAssignment operators cannot be overloaded, but +=, for example, is evaluated using +, which can be overloadedDi2015NewLine
15590265Di2015UniqueSeparator+
15590299Di2015UniqueSeparatorobject CurrentName = com.ExecuteScalar();Di2015NewLineif (CurrentName != null && CurrentName != System.DBNull.Value) {Di2015NewLine    {Di2015NewLine        Session["UserAuthentication"] = (string)CurrentName;Di2015NewLine        Session.Timeout = 1;Di2015NewLine        Response.Redirect("Default.aspx");Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        Session["UserAuthentication"] = "";Di2015NewLine    }Di2015NewLine}Di2015NewLine
15590410Di2015UniqueSeparatorId
15590506Di2015UniqueSeparatorwinrt
15590506Di2015UniqueSeparatorStorageFolder temp = Windows.Storage.ApplicationData.Current.TemporaryFolder;Di2015NewLine
15590511Di2015UniqueSeparatorlistViewData.ItemDrag += new ItemDragEventHandler(listView_ItemDrag);Di2015NewLine
15590521Di2015UniqueSeparatorConsole.WriteLine("Enter Name: ");Di2015NewLinethis.name = Console.ReadLine();Di2015NewLinestring sql1 = "INSERT INTO tableName (columnName) VALUES ('" + this.name + "');"Di2015NewLineDataAccess.ExecuteSQL(sql1);Di2015NewLine
15590767Di2015UniqueSeparatorstring sql1 = "insert into items values ( '" + this.name + "')";Di2015NewLine
15590901Di2015UniqueSeparatorpublic interface IThingServiceDi2015NewLine{Di2015NewLine    Thing GetThing(int id);Di2015NewLine    ThingCreationResponse AddThing(ThingCreationRequest request);Di2015NewLine}Di2015NewLine
15590901Di2015UniqueSeparatorThingCreationRequest
15590901Di2015UniqueSeparatorThing
15590901Di2015UniqueSeparatorAddThing
15590901Di2015UniqueSeparatorAddThing
15590901Di2015UniqueSeparatorThing
15590901Di2015UniqueSeparatorThingCreationResponse
15590901Di2015UniqueSeparatorThing
15591165Di2015UniqueSeparatorif (textBox1.Text == null)Di2015NewLine
15591165Di2015UniqueSeparatorif (textBox1.Text == string.Empty)Di2015NewLine
15591165Di2015UniqueSeparatorbutton1.Enabled = (textBox1.Text != string.Empty);Di2015NewLine
15591320Di2015UniqueSeparatorcharts[i].Series[0].CustomProperties = "PointWidth = 1"; // One bar takes a width of 1 unit on the x-axisDi2015NewLinecharts[i].ChartAreas[0].AxisX.Minimum = 0.5; // change!Di2015NewLinecharts[i].ChartAreas[0].AxisX.Maximum = 1.5; // change!Di2015NewLine
15591329Di2015UniqueSeparatorfile.txt
15591329Di2015UniqueSeparatorsystem
15591329Di2015UniqueSeparatornc
15591329Di2015UniqueSeparatorcat file.txt | nc -l 1234Di2015NewLine
15591329Di2015UniqueSeparator1.2.3.4
15591329Di2015UniqueSeparatornc 1.2.3.4 1234 > file.txtDi2015NewLine
15591409Di2015UniqueSeparatorpublic class RawValuesEditingViewModelDi2015NewLine{Di2015NewLine    // Your primary IDDi2015NewLine    public int Pk { get; set; }Di2015NewLineDi2015NewLine    [Required]Di2015NewLine    public int? SelectedCapsulePk { get; set; }Di2015NewLineDi2015NewLine    // Other basic fields as needed for editing on this screenDi2015NewLine    public int Active1 { get; set; }Di2015NewLine    public int Active2 { get; set; }Di2015NewLine    public int Active3 { get; set; }Di2015NewLine    public int Active4 { get; set; }Di2015NewLine    public int Active5 { get; set; }Di2015NewLine    public int KeyActive { get; set; }Di2015NewLine    // blah blah blah....Di2015NewLineDi2015NewLine    // Use this as the source for your Dropdown List for the capsule choiceDi2015NewLine    public IEnumerable<SelectListItem> CapsulesToSelectFromDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return from cap in DatabaseRepository.GetAllCapsules() // or some kind of Repo here.Di2015NewLine                   select new SelectListItem {Di2015NewLine                       Text = cap.Name,Di2015NewLine                       Value = cap.Pk.ToString(),Di2015NewLine                       Selected = (cap.Pk == this.SelectedCapsulePk), Di2015NewLine                   };Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public RawValuesEditingViewModel()Di2015NewLine    {Di2015NewLine        // This constructor is parameter-less because the MVC model binder needs it this way to bind on post back.Di2015NewLine        // You can alter this behavior, but it gets hairy.Di2015NewLine    }Di2015NewLineDi2015NewLine    // Call this method from your Controller to populate the ViewModel fields. Di2015NewLine    public void LoadModelFieldsFromDataObject(int pkToLoadFrom)Di2015NewLine    {Di2015NewLine        // get the underlying database object, from EF in your case.Di2015NewLine        var rawValuesObj = DatabaseRepository.GetRawValueObjectById(pkToLoadFrom);Di2015NewLineDi2015NewLine        // Map your RawValues data object fields to the RawValuesEditingViewModel fields as needed.Di2015NewLine        // Only map the fields you want to present for editing.Di2015NewLine        // Check out "AutoMapper" if you are tired of writing this kind of code :)Di2015NewLine        this.Pk = rawValuesObj.Pk;Di2015NewLine        this.SelectedCapsulePk = rawValuesObj.CapsuleFk; Di2015NewLine        // etc etc etcDi2015NewLine    }Di2015NewLineDi2015NewLine    public void ExecuteRawValuesUpdate(int pk)Di2015NewLine    {Di2015NewLine        // code to persist back to database goes here.Di2015NewLine        // probably you will re-fetch the database object, update its fields from this ViewModels fields, then persist it back thru EF.Di2015NewLine    }Di2015NewLine}Di2015NewLine
15591409Di2015UniqueSeparatorpublic static class DatabaseRepositoryDi2015NewLine{Di2015NewLine    public static List<Capsule> GetAllCapsules()Di2015NewLine    {Di2015NewLine        // your EF calls/whatever go here.Di2015NewLine    }Di2015NewLineDi2015NewLine    public static RawValues GetRawValueObjectById(int pk)Di2015NewLine    {Di2015NewLine        // your EF calls/whatever go here.Di2015NewLine    }Di2015NewLine}Di2015NewLine
15591409Di2015UniqueSeparatorpublic ActionResult RawValues(int pk) Di2015NewLine{Di2015NewLine    var rawValuesVM = new ViewModels.RawValuesEditingViewModel();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        rawValuesVM.LoadModelFieldsFromDataObject(pk);Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        // however you wish to handle a bad lookupDi2015NewLine    }Di2015NewLine    return View(rawValuesVM);Di2015NewLine}Di2015NewLineDi2015NewLine[HttpPost]Di2015NewLinepublic ActionResult RawValues(ViewModels.RawValuesEditingViewModel rawValuesVM, int pk)Di2015NewLine{Di2015NewLine    if (ModelState.IsValid)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            rawValuesVM.ExecuteRawValuesUpdate(pk);Di2015NewLine            // Redirect or something here.Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            ModelState.AddModelError(string.Empty, ex);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return View(rawValuesVM);Di2015NewLine}Di2015NewLine
15591409Di2015UniqueSeparatorRawValuesEditingViewModel
15591409Di2015UniqueSeparator@Html.DropdownListFor(mode => model.SelectedCapsulePk, Model.CapsulesToSelectFrom)Di2015NewLine
15591421Di2015UniqueSeparatorpublic Dictionary<some_enumerator> Occupied_Spaces {Di2015NewLine    get { return _occupied_spaces; }Di2015NewLine    set { _occupied_spaces = value; RecalculateSpaces(); }Di2015NewLine}Di2015NewLine
15591421Di2015UniqueSeparatorOccupied_Spaces
15591421Di2015UniqueSeparatorOccupied_Spaces
15591421Di2015UniqueSeparatorDictionary<,>
15591421Di2015UniqueSeparatorChange
15591421Di2015UniqueSeparatorIDictionary<,>
15591478Di2015UniqueSeparator<div class="main">Di2015NewLine     <asp:ContentPlaceHolder id="mainContent" runat="server">Di2015NewLine     </asp:ContentPlaceHolder">Di2015NewLine</div>Di2015NewLine
15591478Di2015UniqueSeparatorShow.aspx
15591478Di2015UniqueSeparator   <asp:Content id="mains" ContentPlaceHolderId="mainContent">Di2015NewLine         <div class="pagecontent">Di2015NewLine         </div>Di2015NewLine         <div class="description">Di2015NewLine         </div> Di2015NewLine   </asp:Content>Di2015NewLine
15591478Di2015UniqueSeparator<div class="main">Di2015NewLine    <div class="pagecontent">Di2015NewLine    </div>Di2015NewLine    <div class="description">Di2015NewLine    </div>Di2015NewLine</div>Di2015NewLine
15591478Di2015UniqueSeparatorposition:absolute
15591478Di2015UniqueSeparatorposition:absolute
15591484Di2015UniqueSeparatorT.ArrayObjects()
15591484Di2015UniqueSeparatorJsonArrayObjects results = JsonObject.Parse(json).ArrayObjects("results");Di2015NewLinestring url = results[0]["uri"];Di2015NewLineurl.Print(); // /myproject/info.xmlDi2015NewLine
15591484Di2015UniqueSeparatorGetUnescaped()
15591484Di2015UniqueSeparatorSearchResult[] typedResults = JsonObject.Parse(json)Di2015NewLine    .GetUnescaped("results")Di2015NewLine    .FromJson<SearchResult[]>();Di2015NewLineDi2015NewLinetypedResults.PrintDump();Di2015NewLine
15591484Di2015UniqueSeparator[Di2015NewLine    {Di2015NewLine        Uri: /myproject/info.xml,Di2015NewLine        Index: 1,Di2015NewLine        Path: "fn:doc(""/myproject/info.xml"")",Di2015NewLine        Score: 0,Di2015NewLine        Fitness: 0,Di2015NewLine        Confidence: 0,Di2015NewLine        Content: "<root xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns="""" xmlns:search=""http://marklogic.com/appservices/search""><content>Adams Project file</content></root>"Di2015NewLine    }Di2015NewLine]Di2015NewLine
15591669Di2015UniqueSeparatorcalibrate_to_file
15591669Di2015UniqueSeparatorpoints
15591669Di2015UniqueSeparator[DllImportAttribute("DLLTUT.dll", CallingConvention=CallingConvention.Cdecl)]Di2015NewLinepublic static extern void calibrate_to_file(points[] pontos);Di2015NewLine
15591669Di2015UniqueSeparatorpoints[]
15591669Di2015UniqueSeparatorcalibrate_to_file
15591669Di2015UniqueSeparatorcdecl
15591669Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential)]Di2015NewLinepublic struct pointsDi2015NewLine{Di2015NewLine    public double x;Di2015NewLine    public double y;Di2015NewLine    public double z;Di2015NewLine}Di2015NewLine
15591669Di2015UniqueSeparatormapear_kinect_porto
15591697Di2015UniqueSeparatorViewState
15591697Di2015UniqueSeparatorclasses
15591697Di2015UniqueSeparatorPage
15591697Di2015UniqueSeparatorUserControl
15591697Di2015UniqueSeparatorprivate viewstate
15591697Di2015UniqueSeparatorViewState
15591697Di2015UniqueSeparatorpublic property
15591826Di2015UniqueSeparatorDuplicateTokenEx
15591826Di2015UniqueSeparatorLPSECURITY_ATTRIBUTES
15591826Di2015UniqueSeparator^TSecurityAttributes
15591826Di2015UniqueSeparatortokenAttributes
15591826Di2015UniqueSeparatorTSecurityAttributes
15591826Di2015UniqueSeparatorIf Not DuplicateTokenEx(..., @tokenAttributes, ...) thenDi2015NewLine
15591826Di2015UniqueSeparatorAdjustTokenPrivileges
15591826Di2015UniqueSeparatorAdjustTokenPrivileges(newToken, false, ref tokPrivs, 0, IntPtr.Zero, IntPtr.Zero)Di2015NewLine
15591826Di2015UniqueSeparatorAdjustTokenPrivileges(NewToken, False, @TOKPrivs, 0, nil, nil)Di2015NewLine
15592005Di2015UniqueSeparatorpanel1.Dock = DockStyle.Fill
15592005Di2015UniqueSeparatorpanel2.Dock = DockStyle.Fill
15592005Di2015UniqueSeparatorthis.Dock = DockStyle.Fill
15592005Di2015UniqueSeparatorPanel
15592005Di2015UniqueSeparatorForm
15592005Di2015UniqueSeparatorprivate void FormB_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        panel1.Location = panel2.Location = new Point();Di2015NewLine        timer1.Start();Di2015NewLineDi2015NewLine        if (!first)Di2015NewLine        {Di2015NewLine            panel1.Visible = false;Di2015NewLine            panel2.Visible = true;Di2015NewLine            panel2.Dock = DockStyle.Fill;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            panel1.Visible = true;Di2015NewLine            panel2.Visible = false;Di2015NewLine            panel1.Dock = DockStyle.Fill;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15592005Di2015UniqueSeparatorSize
15592005Di2015UniqueSeparatorForm
15592005Di2015UniqueSeparator    private void FormB_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        panel1.Location = panel2.Location = new Point();Di2015NewLine        timer1.Start();Di2015NewLineDi2015NewLine        if (!first)Di2015NewLine        {Di2015NewLine            panel1.Visible = false;Di2015NewLine            panel2.Visible = true;Di2015NewLine            this.Size = new Size(panel2.Size.Width + 16, panel2.Size.Height + 38);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            panel1.Visible = true;Di2015NewLine            panel2.Visible = false;Di2015NewLine            this.Size = new Size(panel1.Size.Width + 16, panel1.Size.Height + 38);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15592098Di2015UniqueSeparatorvar node = Tr_View.FindNode("9");Di2015NewLineTr_View.SelectedNode = node;Di2015NewLine
15592098Di2015UniqueSeparatorusing System.Linq;Di2015NewLineusing System.Collections.Generic;Di2015NewLine...Di2015NewLineIEnumerable<TreeNode> GetAllNodes()Di2015NewLine{Di2015NewLine  Stack<TreeNode> roots = new Stack<TreeNode>(Tr_View.Nodes);Di2015NewLine  while(roots.Count > 0)Di2015NewLine  {Di2015NewLine    var node = roots.Pop();Di2015NewLine    foreach (var child in node.ChildNodes)Di2015NewLine      roots.Push(child);Di2015NewLineDi2015NewLine    yield return node;Di2015NewLine  }Di2015NewLine}Di2015NewLine...Di2015NewLinevar allNodesWithValue9 = GetAllNodes().Where(n => n.Value == "9");Di2015NewLine
15592146Di2015UniqueSeparatorList<Delegate>
15592146Di2015UniqueSeparatorDelegate
15592146Di2015UniqueSeparatorFunc
15592146Di2015UniqueSeparatorFunc
15592146Di2015UniqueSeparatorFunc<TResult>
15592146Di2015UniqueSeparatorFunc<T, TResult>
15592146Di2015UniqueSeparatorAction<T>
15592146Di2015UniqueSeparatorEventHandler
15592146Di2015UniqueSeparatorList<Func<>>
15592146Di2015UniqueSeparatornull
15592146Di2015UniqueSeparator var foo = new Foo(clickHandler: () => ...,Di2015NewLine                   keyHandler: key => ...);Di2015NewLine
15592146Di2015UniqueSeparator var foo = new Foo.Builder {Di2015NewLine               ClickHandler = () => ...,Di2015NewLine               KeyHandler = () => ...Di2015NewLine           }.Build();Di2015NewLine
15592161Di2015UniqueSeparatore.g mywebsite.com/login.php?username=admin?password=MD5HashedPassword
15592377Di2015UniqueSeparatorSuspendLayout
15592377Di2015UniqueSeparatorResumeLayout
15592377Di2015UniqueSeparatorListbox
15592377Di2015UniqueSeparatorCombobox
15592377Di2015UniqueSeparatorButton
15592431Di2015UniqueSeparatorv3
15592431Di2015UniqueSeparatorCirrious.MvvmCross.Plugins.Messenger.dll
15592431Di2015UniqueSeparatorInitializeLastChance
15592431Di2015UniqueSeparatorCirrious.MvvmCross.Plugins.Messenger.PluginLoader.Instance.EnsureLoaded();Di2015NewLine
15592431Di2015UniqueSeparatorpublic class InputIsNeededMessage : MvxMessageDi2015NewLine{Di2015NewLine    public InputIsNeededMessage(object sender) : base(sender) {}Di2015NewLine}Di2015NewLine
15592431Di2015UniqueSeparatorvar messenger = Mvx.Resolve<IMvxMessenger>();Di2015NewLine
15592431Di2015UniqueSeparatormessenger.Publish(new InputIsNeededMessage(this));Di2015NewLine
15592431Di2015UniqueSeparatorvar messenger = Mvx.Resolve<IMvxMessenger>();Di2015NewLine_token = messenger.SubscribeOnMainThread<InputIsNeededMessage>(OnInputIsNeeded);Di2015NewLine
15592431Di2015UniqueSeparator_token
15592431Di2015UniqueSeparatorOnInputIsNeeded
15592431Di2015UniqueSeparatorprivate void OnInputIsNeeded(InputIsNeededMessage message)Di2015NewLine{Di2015NewLine    if (message.Sender != ViewModel)Di2015NewLine        return;Di2015NewLineDi2015NewLine    // do stuff here - you are already on the UI threadDi2015NewLine}Di2015NewLine
15592431Di2015UniqueSeparatorv3
15592431Di2015UniqueSeparatorvNext
15592431Di2015UniqueSeparatorIMessenger
15592431Di2015UniqueSeparatorIMvxMessenger
15592431Di2015UniqueSeparatorBaseMessage
15592431Di2015UniqueSeparatorMvxMessage
15592431Di2015UniqueSeparatorSubscribe
15592431Di2015UniqueSeparatorSubscribeOnMainThread
15592534Di2015UniqueSeparatorSystem.DateTime
15592534Di2015UniqueSeparator[Column(IsDbGenerated = true)]Di2015NewLinepublic DateTime EventTime { get; set; }Di2015NewLine
15592610Di2015UniqueSeparator        Expression<Func<string, bool>> c1 = x => x.Contains("111");Di2015NewLine        Expression<Func<string, bool>> c2 = y => y.Contains("222");Di2015NewLine        var sum = Expression.AndAlso(c1.Body, c2.Body);Di2015NewLine        var sumExpr = Expression.Lambda(sum, c1.Parameters);Di2015NewLine        sumExpr.Compile(); // exception hereDi2015NewLine
15592610Di2015UniqueSeparatorx => x.Contains("...") && y.Contains("...");Di2015NewLine
15592610Di2015UniqueSeparator        Expression<Func<string, bool>> c1 = x => x.Contains("111");Di2015NewLine        Expression<Func<string, bool>> c2 = y => y.Contains("222");Di2015NewLine        var sum = Expression.AndAlso(c1.Body, Expression.Invoke(c2, c1.Parameters[0])); // here is the magicDi2015NewLine        var sumExpr = Expression.Lambda(sum, c1.Parameters);Di2015NewLine        sumExpr.Compile(); //okDi2015NewLine
15592610Di2015UniqueSeparatorinternal static class ProgramDi2015NewLine{Di2015NewLine    public class ProductDi2015NewLine    {Di2015NewLine        public string Name;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var searchStrings = new[] { "111", "222" };Di2015NewLine        var cachedProductList = new List<Product>Di2015NewLine        {Di2015NewLine            new Product{Name = "111 should not match"},Di2015NewLine            new Product{Name = "222 should not match"},Di2015NewLine            new Product{Name = "111 222 should match"},Di2015NewLine        };Di2015NewLineDi2015NewLine        var filterExpressions = new List<Expression<Func<Product, bool>>>();Di2015NewLine        foreach (string searchString in searchStrings)Di2015NewLine        {Di2015NewLine            Expression<Func<Product, bool>> containsExpression = x => x.Name.Contains(searchString); // NOT GOODDi2015NewLine            filterExpressions.Add(containsExpression);Di2015NewLine        }Di2015NewLineDi2015NewLine        var filters = CombinePredicates<Product>(filterExpressions, Expression.AndAlso);Di2015NewLineDi2015NewLine        var query = cachedProductList.AsQueryable().Where(filters);Di2015NewLineDi2015NewLine        var list = query.Take(10).ToList();Di2015NewLine        foreach (var product in list)Di2015NewLine        {Di2015NewLine            Console.WriteLine(product.Name);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Expression<Func<T, bool>> CombinePredicates<T>(IList<Expression<Func<T, bool>>> predicateExpressions, Func<Expression, Expression, BinaryExpression> logicalFunction)Di2015NewLine    {Di2015NewLine        Expression<Func<T, bool>> filter = null;Di2015NewLineDi2015NewLine        if (predicateExpressions.Count > 0)Di2015NewLine        {Di2015NewLine            var firstPredicate = predicateExpressions[0];Di2015NewLine            Expression body = firstPredicate.Body;Di2015NewLine            for (int i = 1; i < predicateExpressions.Count; i++)Di2015NewLine            {Di2015NewLine                body = logicalFunction(body, Expression.Invoke(predicateExpressions[i], firstPredicate.Parameters));Di2015NewLine            }Di2015NewLine            filter = Expression.Lambda<Func<T, bool>>(body, firstPredicate.Parameters);Di2015NewLine        }Di2015NewLineDi2015NewLine        return filter;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15592610Di2015UniqueSeparator222 should not matchDi2015NewLine111 222 should matchDi2015NewLine
15592610Di2015UniqueSeparator        ...Di2015NewLine        foreach (string searchString in searchStrings)Di2015NewLine        {Di2015NewLine            var name = searchString;Di2015NewLine            Expression<Func<Product, bool>> containsExpression = x => x.Name.Contains(name);Di2015NewLine            filterExpressions.Add(containsExpression);Di2015NewLine        }Di2015NewLine        ...Di2015NewLine
15592610Di2015UniqueSeparator111 222 should matchDi2015NewLine
15592690Di2015UniqueSeparatorConsole.Read
15592690Di2015UniqueSeparatorConsole.Read
15592690Di2015UniqueSeparatorConsole.ReadLine
15592690Di2015UniqueSeparatorConvert.ToChar
15592690Di2015UniqueSeparatorToString
15592690Di2015UniqueSeparatorstring key = Convert.ToChar(Console.ReadLine()).ToString();Di2015NewLine
15592690Di2015UniqueSeparatorint intOperand;Di2015NewLineif (!int.TryParse(Console.ReadLine(), out intOperant))Di2015NewLine    Console.WriteLine("You pressed non-numeric key");Di2015NewLine
15592705Di2015UniqueSeparatorForeignKey
15592705Di2015UniqueSeparatorpublic class GuruDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLineDi2015NewLine    public int? IdKotaLahir { get; set; }Di2015NewLineDi2015NewLine    [ForeignKey("IdKotaLahir")]Di2015NewLine    public virtual Kota KotaLahir { get; set; }Di2015NewLine}Di2015NewLine
15592705Di2015UniqueSeparatorpublic class NavigationPropertyConfigurationConventionDi2015NewLine    : IConfigurationConvention<PropertyInfo, NavigationPropertyConfiguration>Di2015NewLine{Di2015NewLine    public void Apply(Di2015NewLine        PropertyInfo propertyInfo, Func<NavigationPropertyConfiguration> configuration)Di2015NewLine    {Di2015NewLine        var foreignKeyProperty = Di2015NewLine            propertyInfo.DeclaringType.GetProperty("Id" + propertyInfo.Name);Di2015NewLineDi2015NewLine        if (foreignKeyProperty != null && configuration().Constraint == null)Di2015NewLine        {Di2015NewLine            var fkConstraint = new ForeignKeyConstraintConfiguration();Di2015NewLine            fkConstraint.AddColumn(foreignKeyProperty);Di2015NewLineDi2015NewLine            configuration().Constraint = fkConstraint;Di2015NewLine        }           Di2015NewLine    }Di2015NewLine}Di2015NewLine
15592736Di2015UniqueSeparatorPresenter
15592736Di2015UniqueSeparatorView
15592736Di2015UniqueSeparatorpresenter class
15592736Di2015UniqueSeparatorview object
15592736Di2015UniqueSeparatorAdjust
15592736Di2015UniqueSeparatorView
15592736Di2015UniqueSeparatorPresenter
15593165Di2015UniqueSeparator AllowUserToAddRows, AllowUserToEditRows Di2015NewLine
15593165Di2015UniqueSeparatorpublic void Form1()Di2015NewLine{Di2015NewLine //here is code of constructorDi2015NewLine .....Di2015NewLine contextMenuStrip1 = new ContextMenuStrip();Di2015NewLine System.Windows.Forms.ToolStripMenuItem copyStripMenuItem;Di2015NewLine copyStripMenuItem = new ToolStripMenuItem();Di2015NewLine this.contextMenuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {Di2015NewLine copyStripMenuItem });Di2015NewLine this.contextMenuStrip1.Name = "contextMenuStrip1";Di2015NewLine this.contextMenuStrip1.Size = new System.Drawing.Size(169, 98);Di2015NewLine copyStripMenuItem.Name = "copyToolStripMenuItem1";Di2015NewLine copyStripMenuItem.Size = new System.Drawing.Size(168, 22);Di2015NewLine copyStripMenuItem.Text = "Copy";Di2015NewLine copyStripMenuItem.Click += new EventHandler(copyStripMenuItem_Click);Di2015NewLineDi2015NewLine dataGridView1.ContextMenuStrip = contextMenuStrip1;Di2015NewLine ....Di2015NewLine }Di2015NewLineDi2015NewLine void copyStripMenuItem_Click(object sender, EventArgs e)Di2015NewLine {Di2015NewLine    CellCopy();Di2015NewLine }Di2015NewLine public void CellCopy()Di2015NewLine {Di2015NewLine    DataGridViewCell cell = dataGridView1.CurrentCell;Di2015NewLine    if (cell != null)Di2015NewLine    {Di2015NewLine       DataGridViewColumn col = dataGridView1.Columns[cell.ColumnIndex];Di2015NewLine            if (col is DataGridViewTextBoxColumn)Di2015NewLine            {Di2015NewLine                if (cell.IsInEditMode)Di2015NewLine                {Di2015NewLine                    TextBox txt = dataGridView1.EditingControl as TextBox;Di2015NewLine                    if (txt != null)Di2015NewLine                        txt.Copy();Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    string val = cell.FormattedValue == null ? "" : cell.FormattedValue.ToString();Di2015NewLine                    if (val == "")Di2015NewLine                        Clipboard.Clear();Di2015NewLine                    elseDi2015NewLine                        Clipboard.SetText(val);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15593165Di2015UniqueSeparator public void Form1_Load(object sender, EventArgs e)Di2015NewLine {  Di2015NewLine  there is some code of constructor hereDi2015NewLine.....Di2015NewLinedataGridView1.CellContentDoubleClick+=new DataGridViewCellEventHandler(dataGridView1_CellContentDoubleClick);Di2015NewLine......Di2015NewLine }Di2015NewLine  void dataGridView3_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e)Di2015NewLine    {Di2015NewLine        CellCopy();Di2015NewLine    }Di2015NewLineDi2015NewLine     /// <summary>Di2015NewLine    /// Copy the current value in the bufferDi2015NewLine    /// </summary>Di2015NewLine    public void CellCopy()Di2015NewLine    {Di2015NewLine        DataGridViewCell cell = dataGridView1.CurrentCell;Di2015NewLine        if (cell != null)Di2015NewLine        {Di2015NewLine            DataGridViewColumn col = dataGridView1.Columns[cell.ColumnIndex];Di2015NewLine            if (col is DGW_NewCellsColumn)Di2015NewLine            {Di2015NewLine                if (cell.IsInEditMode)Di2015NewLine                {Di2015NewLine                    TextBox txt = dataGridView1.EditingControl as TextBox;Di2015NewLine                    if (txt != null)Di2015NewLine                        txt.Copy();Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    string val = cell.FormattedValue == null ? "" :  cell.FormattedValue.ToString();Di2015NewLine                    if (val == "")Di2015NewLine                        Clipboard.Clear();Di2015NewLine                    elseDi2015NewLine                        Clipboard.SetText(val);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15593547Di2015UniqueSeparatorDouble MAX = 0;Di2015NewLinewhile (Condition)Di2015NewLine            {    Di2015NewLineDi2015NewLine                MAX = somecode.....Di2015NewLine                                      .....Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.WriteLine("The OPTIMAL Value : " + MAX); Di2015NewLine
15593610Di2015UniqueSeparator       routes.MapRoute(Di2015NewLine            "Blog",Di2015NewLine            "Blog/{id}",Di2015NewLine            new { controller = "Details", action = "Blog", id=0 }Di2015NewLine        );Di2015NewLine
15593610Di2015UniqueSeparatorDetails
15593610Di2015UniqueSeparatorBlog
15593610Di2015UniqueSeparator       routes.MapRoute(Di2015NewLine            "Blog",Di2015NewLine            "Blog/{postid}/{slug}",Di2015NewLine            new { controller = "Details", action = "Blog", id=0, slug="" } Di2015NewLine        );Di2015NewLine
15593610Di2015UniqueSeparatorDetails
15593610Di2015UniqueSeparatorBlog
15593610Di2015UniqueSeparator/Blog/1287Di2015NewLine
15593610Di2015UniqueSeparator/Blog/1287/how-to-fix-your-routing-engineDi2015NewLine
15593610Di2015UniqueSeparator/questions/15593545/Di2015NewLine
15593610Di2015UniqueSeparator/questions/15593545/asp-net-mvc4-custom-routingDi2015NewLine
15593610Di2015UniqueSeparatorpublic ActionResult Blog (int postid, string slug)Di2015NewLine{Di2015NewLine
15593620Di2015UniqueSeparator</p>Di2015NewLineDi2015NewLine<pre>namespace HymmParserDi2015NewLine{Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    const string TITLE_REGEX = @"\\s*\\d+\\s{2,}[a-zA-Z]+";Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var hymns = new List<Hymn>();Di2015NewLine        //read the fileDi2015NewLine        string[] lines = System.IO.File.ReadAllLines(@"C:\\HymnWords.txt");Di2015NewLineDi2015NewLine        for (int i = 0; i < lines.Count(); i++)Di2015NewLine        {Di2015NewLine            //regex to check for a white space, a number, 2 or more white spaces then words after.Di2015NewLine            if (Regex.IsMatch(lines[i], TITLE_REGEX))Di2015NewLine            {Di2015NewLine                var hymn = new HymnDi2015NewLine                {Di2015NewLine                    //TODO: Add your title parse logic here.Di2015NewLine                    Title = lines[i]Di2015NewLine                };Di2015NewLineDi2015NewLine                //find verses under this hymnDi2015NewLine                for (i++; i < lines.Count(); i++)Di2015NewLine                {Di2015NewLine                    //ensure this line is not a title, else break out of it.Di2015NewLine                    if (Regex.IsMatch(lines[i], TITLE_REGEX))Di2015NewLine                    {Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    //if number only found, this is the start of a verseDi2015NewLine                    if (Regex.IsMatch(lines[i], @"^\\s*\\d+$"))Di2015NewLine                    {Di2015NewLine                        var verse = new Verse(int.Parse(lines[i]));Di2015NewLineDi2015NewLine                        //gather up verse linesDi2015NewLine                        for (i++; i < lines.Count(); i++)Di2015NewLine                        {Di2015NewLine                            //if number only, break.Di2015NewLine                            if (Regex.IsMatch(lines[i], @"\\s*\\d+"))Di2015NewLine                            {Di2015NewLine                                //backup and break, outer loop will increment and miss this new verseDi2015NewLine                                i--;Di2015NewLine                                break;Di2015NewLine                            }Di2015NewLine                            else if (string.IsNullOrWhiteSpace(lines[i]))Di2015NewLine                            {Di2015NewLine                                //if whitespace, then we may have finished the verse, break outDi2015NewLine                                break;Di2015NewLine                            }Di2015NewLine                            elseDi2015NewLine                            {Di2015NewLine                                verse.VerseLines.Add(lines[i]);Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                        hymn.Verses.Add(verse);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                hymns.Add(hymn);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        foreach (var hymn in hymns)Di2015NewLine        {Di2015NewLine            Console.WriteLine(hymn.Title);Di2015NewLine            foreach (var verse in hymn.Verses)Di2015NewLine            {Di2015NewLine                Console.WriteLine(verse.VerseNumber);Di2015NewLine                foreach (var line in verse.VerseLines)Di2015NewLine                {Di2015NewLine                    Console.WriteLine(line);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            Console.WriteLine("\\n");Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("Hymns Found: {0}", hymns.Count);Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class HymnDi2015NewLine{Di2015NewLine    public Hymn()Di2015NewLine    {Di2015NewLine        Verses = new List<Verse>();Di2015NewLine    }Di2015NewLine    public string Title { set; get; }Di2015NewLine    public List<Verse> Verses { set; get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class VerseDi2015NewLine{Di2015NewLine    public Verse(int verseNumber)Di2015NewLine    {Di2015NewLine        VerseNumber = verseNumber;Di2015NewLine        VerseLines = new List<string>();Di2015NewLine    }Di2015NewLine    public int VerseNumber { get; private set; }Di2015NewLine    public List<string> VerseLines { set; get; }Di2015NewLine}Di2015NewLine
15593624Di2015UniqueSeparatorfrom activity in activitiesDi2015NewLinejoin contact in contactsDi2015NewLineon activity.ContactId equals contact.ContactIdDi2015NewLineselect new { activity, contact }; Di2015NewLine
15593624Di2015UniqueSeparatorforeach(var anon in model)Di2015NewLine{Di2015NewLine    anon.activity.contact = anon.contact;Di2015NewLine}Di2015NewLine
15593624Di2015UniqueSeparator.ToList()
15593624Di2015UniqueSeparatormodel.Select(x => { x.activity.contact = x.contact; return activity; }).ToList();Di2015NewLine
15593624Di2015UniqueSeparatorSelect
15593633Di2015UniqueSeparatorReplace("\\"", "")
15593756Di2015UniqueSeparatorFile
15593756Di2015UniqueSeparatorTagLib
15593778Di2015UniqueSeparatorminName
15593778Di2015UniqueSeparatormaxName
15593778Di2015UniqueSeparatorstring.Empty
15593822Di2015UniqueSeparator//recreate the compound viewmodel in the login controllerDi2015NewLine Access viewModel = new Access();Di2015NewLine viewModel.LoginModel = model;Di2015NewLine viewModel.RegisterModel = new RegisterModel();Di2015NewLinereturn View("LoginOrRegister", viewModel); //supposing the view name is LoginOrRegister.cshtmlDi2015NewLineDi2015NewLine//recreate the compound viewmodel in the register controllerDi2015NewLine Access viewModel = new Access();Di2015NewLine viewModel.LoginModel = new LoginModel();Di2015NewLine viewModel.RegisterModel = model;Di2015NewLine return View("LoginOrRegister", viewModel); //supposing the view name is LoginOrRegister.cshtmlDi2015NewLine
15593822Di2015UniqueSeparator@model AccessDi2015NewLine<div class="main-content" style="min-height: 700px;">Di2015NewLine<!-- Login form -->Di2015NewLine@{ Html.RenderPartial("Login", new {model = Model.LoginModel, returnUrl = "?"}) };Di2015NewLineDi2015NewLine<!-- Register form -->Di2015NewLine@{ Html.RenderPartial("Login", "Account", new { model = Model.RegisterModel) }; }Di2015NewLine<div class="clear"></div>Di2015NewLine</div>Di2015NewLine
15593822Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Login(LoginModel model, string returnUrl) Di2015NewLine{Di2015NewLine    if (ModelState.IsValid && WebSecurity.Login(model.UserName, model.Password, persistCookie:     model.RememberMe))Di2015NewLine    {Di2015NewLine    if (Url.IsLocalUrl(returnUrl))Di2015NewLine    {Di2015NewLine        return Redirect(returnUrl);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return RedirectToAction("Index", "Home");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// If we got this far, something failed, redisplay formDi2015NewLineModelState.AddModelError("", "The user name or password provided is incorrect.");Di2015NewLineDi2015NewLine//recreate the compound viewmodel in the login controllerDi2015NewLineAccess viewModel = new Access();Di2015NewLineviewModel.LoginModel = model;Di2015NewLineviewModel.RegisterModel = new RegisterModel();Di2015NewLinereturn View("LoginOrRegister", viewModel);Di2015NewLine}Di2015NewLine
15593822Di2015UniqueSeparatorpublic ActionResult Register(){Di2015NewLine    Access viewModel = new Access();Di2015NewLine    viewModel.LoginModel = new LoginModel();Di2015NewLine    viewModel.RegisterModel = new RegisterModel();Di2015NewLine    return View("LoginOrRegister",viewModel);Di2015NewLine} Di2015NewLine
15593841Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.ComponentModel.Design;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinepublic class DeviceChangeNotifier : Component {Di2015NewLine    public delegate void DeviceChangeDelegate(Message msg);Di2015NewLine    public event DeviceChangeDelegate DeviceChange;Di2015NewLineDi2015NewLine    public DeviceChangeNotifier() {Di2015NewLine        // Add initialization hereDi2015NewLine    }Di2015NewLine    public DeviceChangeNotifier(IContainer container) : this() {Di2015NewLine        // In case you need automatic disposalDi2015NewLine        container.Add(this);Di2015NewLine    }Di2015NewLine    public DeviceChangeNotifier(ContainerControl parentControl) : this() {Di2015NewLine        // In case you want to use it without the designer            Di2015NewLine        this.ContainerControl = parentControl;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ContainerControl ContainerControl {Di2015NewLine        // References the parent formDi2015NewLine        get { return this.parentControl; }Di2015NewLine        set { Di2015NewLine            this.parentControl = value;Di2015NewLine            this.parentControl.HandleCreated += parentControl_HandleCreated;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void parentControl_HandleCreated(object sender, EventArgs e) {Di2015NewLine        // Subclass the form when its handle is createdDi2015NewLine        snooper = new MessageSnooper(this, parentControl.Handle);        Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void OnDeviceChange(Message msg) {Di2015NewLine        // Raise the DeviceChange messageDi2015NewLine        var handler = DeviceChange;Di2015NewLine        if (handler != null) handler(msg);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override ISite Site {Di2015NewLine        // Runs at design time, ensures designer initializes ContainerControl Di2015NewLine        // so we'll have a reference to the parent form without it having to do any workDi2015NewLine        set { Di2015NewLine            base.Site = value;Di2015NewLine            if (value == null) return;Di2015NewLine            IDesignerHost service = value.GetService(typeof(IDesignerHost)) as IDesignerHost;Di2015NewLine            if (service == null) return;Di2015NewLine            IComponent rootComponent = service.RootComponent;Di2015NewLine            this.ContainerControl = rootComponent as ContainerControl;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private ContainerControl parentControl;Di2015NewLine    private MessageSnooper snooper;Di2015NewLine    private const int WM_DESTROY = 0x0002;Di2015NewLine    private const int WM_DEVICECHANGE = 0x0219;Di2015NewLineDi2015NewLine    private class MessageSnooper : NativeWindow {Di2015NewLine        // Subclasses the parent windowDi2015NewLine        public MessageSnooper(DeviceChangeNotifier owner, IntPtr handle) {Di2015NewLine            this.owner = owner;Di2015NewLine            this.AssignHandle(handle);Di2015NewLine        }Di2015NewLine        protected override void WndProc(ref Message m) {Di2015NewLine            if (m.Msg == WM_DESTROY) this.ReleaseHandle();Di2015NewLine            if (m.Msg == WM_DEVICECHANGE) owner.OnDeviceChange(m);Di2015NewLine            base.WndProc(ref m);Di2015NewLine        }Di2015NewLine        private DeviceChangeNotifier owner;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15593954Di2015UniqueSeparatorIDisposable
15593954Di2015UniqueSeparatorWebClient
15593954Di2015UniqueSeparatorHttpWebRequest
15593954Di2015UniqueSeparator            WebClient client = new WebClient();Di2015NewLine            Stream stream = client.OpenRead("http://waps.repli-con.com/services/ivrservices/getUserNameRecording/10000");Di2015NewLine            StreamReader reader = new StreamReader(stream);Di2015NewLineDi2015NewLine            JToken token = JObject.Parse(reader.ReadToEnd().ToString());Di2015NewLineDi2015NewLine            string base64string = token.SelectToken("result").SelectToken("value").ToString();Di2015NewLine            Byte[] b = Convert.FromBase64String(base64string);Di2015NewLine            System.IO.File.WriteAllBytes(@"C:\\Users\\user\\Desktop\\test.wav", b);   Di2015NewLine            stream.Close();Di2015NewLine
15594170Di2015UniqueSeparatorApplication.Exit()
15594170Di2015UniqueSeparatorProgram.KeepRunning
15594725Di2015UniqueSeparatorint[] top5 = array1.Concat(array2).Concat(array3).OrderByDescending(i => i).Take(5).ToArray();Di2015NewLine
15594725Di2015UniqueSeparator List<int> highests = new List<int>(); // Keep the current top 5 sortedDi2015NewLine // Traverse each array. No need to put them together in an int[][]..it's just for simplicityDi2015NewLine foreach (int[] array in new int[][] { array1, array2, array3 }) {Di2015NewLine     foreach (int i in array) {Di2015NewLine         int index = highests.BinarySearch(i); // where should i be?Di2015NewLineDi2015NewLine         if (highests.Count < 5) // if not 5 yet, add anywayDi2015NewLine             highests.Insert(-index - 1, i);Di2015NewLine         else if (index < -1) { // not in top-5 yet, addDi2015NewLine             highests.RemoveAt(0);Di2015NewLine             highests.Insert(-index - 2, i);Di2015NewLine         } else if (index > 0) { // already in top-5, add (duplicate)Di2015NewLine             highests.RemoveAt(0);Di2015NewLine             highests.Insert(index, i);Di2015NewLine         }Di2015NewLine     }Di2015NewLine }Di2015NewLine
15594725Di2015UniqueSeparator List<int> highests = new List<int>();Di2015NewLine foreach (int[] array in new int[][] { array1, array2, array3 }) {Di2015NewLine     foreach (int i in array) {Di2015NewLine         if (highests.Count < 5) { // if not 5 yet, add anywayDi2015NewLine             int index = highests.BinarySearch(i);Di2015NewLine             highests.Insert(-index - 1, i);Di2015NewLine         } else if (highests.First() < i) { // if larger than lowest top-5Di2015NewLine             int index = highests.BinarySearch(i);Di2015NewLine             if (index < -1) { // not in top-5 yet, addDi2015NewLine                highests.RemoveAt(0);Di2015NewLine                highests.Insert(-index - 2, i);Di2015NewLine             } else { // already in top-5, add (duplicate)Di2015NewLine                highests.RemoveAt(0);Di2015NewLine                highests.Insert(index, i);Di2015NewLine             }Di2015NewLine         }Di2015NewLine     }Di2015NewLine}Di2015NewLine
15594766Di2015UniqueSeparatorSaveChanges
15594766Di2015UniqueSeparatornamespace app.ModelsDi2015NewLine{Di2015NewLine    public class Conexion : DbContextDi2015NewLine    {Di2015NewLine        private static Conexion Instance = null;Di2015NewLineDi2015NewLine        private Conexion(string con) : base(con) { }Di2015NewLineDi2015NewLine        public static Conexion MainConexion Di2015NewLine        {Di2015NewLine            getDi2015NewLine            { //error hereDi2015NewLine                if (Instance == null)Di2015NewLine                {Di2015NewLine                    Instance = new Conexion(Di2015NewLine                        @"Server=*****; User Id=***;Password=****; Database=****");Di2015NewLine                }Di2015NewLineDi2015NewLine                return Instance;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public DbSet<label> Labels { get; set; }Di2015NewLineDi2015NewLine        public DbSet<checke_status> CheckStatus { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15594766Di2015UniqueSeparatorMainConexion
15594766Di2015UniqueSeparatorSaveChanges
15594766Di2015UniqueSeparatorSaveChanges
15594766Di2015UniqueSeparatorMainConnection
15594766Di2015UniqueSeparatorConexion
15594766Di2015UniqueSeparatorSaveChanges
15594766Di2015UniqueSeparatorConexion.MainConexion.SaveChanges();Di2015NewLine
15594837Di2015UniqueSeparatorint timeSinceLastFrame = 0;Di2015NewLineint millisecondsPerFrame = 50;Di2015NewLine
15594837Di2015UniqueSeparatormillisecondsPerFrame
15594837Di2015UniqueSeparatorgame.ElapsedGameTime
15594837Di2015UniqueSeparatortimeSinceLastFrame += gameTime.ElapsedGameTime.Milliseconds;Di2015NewLineif (timeSinceLastFrame > millisecondsPerFrame){Di2015NewLine    timeSinceLastFrame -= millisecondsPerFrame;Di2015NewLine    // Increment Current Frame here (See link for implementation)Di2015NewLine}Di2015NewLine
15594837Di2015UniqueSeparatormillisecondsPerFrame
15594972Di2015UniqueSeparatorReturnLabelsAndInputsForIndexations.Labels
15594972Di2015UniqueSeparatorpublic this[string index]Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
15594972Di2015UniqueSeparator<tr>Di2015NewLine    <td>@Indexacion_Labels.Labels</td>Di2015NewLine    <td>@GetInputType(Indexacion_Labels.Input_Type, Indexacion_Labels.Name)</td>Di2015NewLine</tr>Di2015NewLine
15595020Di2015UniqueSeparatorSave
15595020Di2015UniqueSeparatorSave
15595020Di2015UniqueSeparatorSave
15595020Di2015UniqueSeparatorStringReader
15595033Di2015UniqueSeparator <script src="Scripts/jquery-1.4.1.js" type="text/javascript"></script>Di2015NewLine
15595033Di2015UniqueSeparator<script src="http://localhost:50847/Scripts/jquery-1.4.1.js" type="text/javascript"></script>Di2015NewLine
15595203Di2015UniqueSeparatorfor(count of the employees taken from the db){Di2015NewLine  <li><a href="#tabs-count">EMP count</a></li>}Di2015NewLineDi2015NewLinefor(count of the employees taken from the db)Di2015NewLine  {Di2015NewLine     add divs hereDi2015NewLine  }Di2015NewLine
15595318Di2015UniqueSeparatorNavigationCacheMode
15595318Di2015UniqueSeparatorDisabled
15595318Di2015UniqueSeparatorEnabled
15595318Di2015UniqueSeparatorFrame
15595318Di2015UniqueSeparatorLayoutAwarePage
15595369Di2015UniqueSeparatorImage
15595369Di2015UniqueSeparator</FlipView>
15595369Di2015UniqueSeparatorFlipViewItem
15595369Di2015UniqueSeparatorGrid
15595369Di2015UniqueSeparatorUserControl
15595369Di2015UniqueSeparatorUserControl
15595369Di2015UniqueSeparatorDataTemplate
15595504Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    private int i;Di2015NewLine    public int Foo { get { return i++; } } Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class SharedResourcesDi2015NewLine{Di2015NewLine    public static const string SharedString;Di2015NewLine    public static readonly MyClass SharedMyClass;Di2015NewLine}Di2015NewLine
15595504Di2015UniqueSeparatorSharedString
15595504Di2015UniqueSeparatorSharedResources.SharedMyClass.Foo
15595504Di2015UniqueSeparatorInterlocked.Increment
15595515Di2015UniqueSeparatorif (!something) Di2015NewLine{Di2015NewLine  DoFirstThing();Di2015NewLine  if (!otherthing)Di2015NewLine  {Di2015NewLine     DoSechondThing();Di2015NewLine  }Di2015NewLine} Di2015NewLine//continue implicitly happens here anyway.Di2015NewLine
15595710Di2015UniqueSeparatorColor
15595710Di2015UniqueSeparatorColor
15595710Di2015UniqueSeparatorColor
15595710Di2015UniqueSeparatorColor555
15595710Di2015UniqueSeparatorpublic Color555(Color color)Di2015NewLine{Di2015NewLine    _Value = (ushort) ((color.A >= 128 ? 0x8000 : 0x0000) |Di2015NewLine        ((color.R & 0xF8) << 7) | ((color.G & 0xF8) << 2) | (color.B >> 3));Di2015NewLine}Di2015NewLine
15595846Di2015UniqueSeparatorconst string i1Path = @"c:\\my\\i1.jpg";Di2015NewLineconst string i2Path = @"c:\\my\\i2.jpg";Di2015NewLineDi2015NewLinevar i = Image.FromFile(i1Path);Di2015NewLineDi2015NewLinevar i2 = new Bitmap(i);Di2015NewLinei2.Save(i2Path, ImageFormat.Jpeg);Di2015NewLine
15595846Di2015UniqueSeparatorBitmap
15595846Di2015UniqueSeparatorSave
15596095Di2015UniqueSeparatorBindingGroup
15596095Di2015UniqueSeparatorBinding
15596095Di2015UniqueSeparatorBindingGroupName
15596095Di2015UniqueSeparatorWindows.UI.Xaml.Data
15596095Di2015UniqueSeparatorBindingGroup
15596505Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLineclass AppDi2015NewLine{Di2015NewLine  static void Main()Di2015NewLine  {Di2015NewLine    var input = "procurement-notice-1234.html";Di2015NewLine    var pattern = @"procurement-notice-(\\d+).html";Di2015NewLine    var replacement = "/Bids/Details/$1";Di2015NewLine    var res = Regex.Replace(input, pattern, replacement);Di2015NewLine    Console.WriteLine(res);Di2015NewLine    // will output /Bids/Details/1234Di2015NewLine  }Di2015NewLine}Di2015NewLine
15596505Di2015UniqueSeparatorvar matchedURL = redirect.SingleOrDefault(d => Regex.Match(url, d.Key, RegexOptions.Singleline).Success);Di2015NewLineif (matchedURL != null)Di2015NewLine{Di2015NewLine  var result = Regex.Replace(url, matchedURL.Key, matchedURL.Value);Di2015NewLine}Di2015NewLine
15596543Di2015UniqueSeparatorpublic class Media : INotifyPropertyChanged Di2015NewLine{Di2015NewLine   string _name;Di2015NewLine   string Name {Di2015NewLine       get {return _name;} Di2015NewLine       set { _name=value; OnPropertyChanged("Name");}} //OnPropertyChanged is important!Di2015NewLine   ...Di2015NewLine}Di2015NewLine
15596612Di2015UniqueSeparator<ItemsControl x:Name="MyRepliesControl"Di2015NewLine    DataSource="{Binding MyRepliesData}">Di2015NewLineDi2015NewLine    <!-- This is the template for an individual reply.Di2015NewLine         The ItemsControl will create one instance for each reply automatically. -->Di2015NewLine    <ItemsControl.ItemTemplate>Di2015NewLineDi2015NewLine        <!-- 2x2 Reply Grid with a 24-unit margin on the left and right -->Di2015NewLine        <Grid Margin="24,0" ...>Di2015NewLine            ... contents of grid cells, etc. ...Di2015NewLine        </Grid>Di2015NewLineDi2015NewLine    </ItemsControl.ItemTemplate>Di2015NewLineDi2015NewLine</ItemsControl>Di2015NewLine
15596734Di2015UniqueSeparatorDatabase.SetInitializer<YourContextType>(null);Di2015NewLine
15596761Di2015UniqueSeparatorstruct
15596761Di2015UniqueSeparatorstring
15596761Di2015UniqueSeparatorstruct LowerCaseStringDi2015NewLine{Di2015NewLine    public LowerCaseString(string value)Di2015NewLine    {Di2015NewLine        this.value = value.ToLower();Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly string value;Di2015NewLineDi2015NewLine    public static implicit operator LowerCaseString(string value)Di2015NewLine    {Di2015NewLine        return new LowerCaseString(value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return value;Di2015NewLine    }Di2015NewLineDi2015NewLine    â¦ // perhaps implement IEquatable<>, IComparable<>, etc.Di2015NewLine}Di2015NewLine
15596761Di2015UniqueSeparatorFoo("Hello world.");Di2015NewLineDi2015NewLinevoid Foo(LowerCaseString text)Di2015NewLine{Di2015NewLine    Console.WriteLine(text);Di2015NewLine}Di2015NewLine
15596761Di2015UniqueSeparatornew LowerCaseString("Hello world.")
15596761Di2015UniqueSeparatorCultureInfo
15596761Di2015UniqueSeparator.ToLower()
15596761Di2015UniqueSeparatorCurrentCulture
15596761Di2015UniqueSeparatorInvariantCulture
15596926Di2015UniqueSeparatorstring tableName = "[" + fName + " " + lName + "]";Di2015NewLine
15596985Di2015UniqueSeparatorWindow
15596985Di2015UniqueSeparatorpublic class PEXDi2015NewLine{Di2015NewLine public List<PexWindow> Windows { get; set; }//list of windows you can foreach onDi2015NewLine public PEX()Di2015NewLine {Di2015NewLine  Windows = new List<PexWindow>();//constructor to make sure the list can be worked withDi2015NewLine }Di2015NewLineDi2015NewLine private class PexWindowDi2015NewLine {Di2015NewLine  public int Param { get; set; }Di2015NewLine  public string Description { get; set; }Di2015NewLine }Di2015NewLine}Di2015NewLine
15597154Di2015UniqueSeparatorprivate void btnExit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.Close();Di2015NewLine    Form FrmLogin = new FrmLogin();       Di2015NewLine    this.Hide();Di2015NewLine    FrmLogin.Show();Di2015NewLine}Di2015NewLine
15597154Di2015UniqueSeparatorprivate void btnExit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.Close();Di2015NewLine    FrmLogin obj = (FrmLogin)Application.OpenForms["FrmLogin"];Di2015NewLine    this.Hide();Di2015NewLine    obj.Show();Di2015NewLine}Di2015NewLine
15597154Di2015UniqueSeparatorFrmLogin
15597154Di2015UniqueSeparatorobj = (FrmLogin)Application.OpenForms["FrmLogin"];Di2015NewLine
15597154Di2015UniqueSeparatorFrmLogin
15597154Di2015UniqueSeparatorobj
15597214Di2015UniqueSeparatorSystem.Globalization.PersianCalendar
15597214Di2015UniqueSeparatorvar persianCalendar = new System.Globalization.PersianCalendar();Di2015NewLinevar today = DateTime.Today;Di2015NewLinevar nextMonth = persianCalendar.AddMonths(today, 1);Di2015NewLine
15597323Di2015UniqueSeparatortextBox1.Text += lines[4].Replace("word 1 ", string.Empty)Di2015NewLine                         .Replace(":", string.Empty)Di2015NewLine                         .Replace("'", string.Empty)Di2015NewLine                         .Replace(",", string.Empty);Di2015NewLine
15597323Di2015UniqueSeparatorstring[] wordsToBeRemoved = { "word 1", ":", "'", "," };Di2015NewLineDi2015NewLinestring result = lines[4];Di2015NewLineforeach (string toBeRemoved in wordsToBeRemoved) {Di2015NewLine    result = result.Replace(toBeRemoved, string.Empty);Di2015NewLine}Di2015NewLinetextBox1.Text += result;Di2015NewLine
15597459Di2015UniqueSeparatorpokedex.js
15597459Di2015UniqueSeparator$('#pokecry-trigger').click(function() {Di2015NewLine    $('#pokecry').html('<embed src="/pokedex/images/cries/' + $('#identifier').text() + '.mp3" />');Di2015NewLine  });Di2015NewLine
15597459Di2015UniqueSeparatorembed
15597459Di2015UniqueSeparator/pokedex/images/cries/<id>.mp3
15597459Di2015UniqueSeparator#identifier
15597459Di2015UniqueSeparatorstring id = "001"; // found in the markupDi2015NewLinestring url = String.Format("http://pokedream.com/pokedex/images/cries/{0}.mp3", id);Di2015NewLineusing(var cli = new System.Net.WebClient()) Di2015NewLine{Di2015NewLine    var mp3Data = cli.DownloadData(url);Di2015NewLine}Di2015NewLine
15597531Di2015UniqueSeparatorvar Temat = $('#Temat').text();Di2015NewLine
15597531Di2015UniqueSeparator@Html.TextBoxFor(model => model.Password, new { id = "Temat" })Di2015NewLine
15597561Di2015UniqueSeparatorLCycleTimeShift(TimeLineInit[i], ReplaceStage);//passing refernceDi2015NewLinej = 0; k = 0; l = 0; m = 0; n = 0;//Counter Reset to validate the new arrangmentDi2015NewLine
15597561Di2015UniqueSeparatorvar toolsInUse = TimeLineInitDi2015NewLine                    .SelectMany(cycle => cycle.StageDi2015NewLine                    .SelectMany(stage => stage.ToolList.Select(tool => newDi2015NewLine{Di2015NewLine    Cycle = cycle,Di2015NewLine    Stage = stage,Di2015NewLine    Tool = tool.ToolNameDi2015NewLine})));Di2015NewLineDi2015NewLinevar duplicateUse = toolsInUse.Join(toolsInUse, Di2015NewLine                                    x => x.Tool, Di2015NewLine                                    x => x.Tool, Di2015NewLine                                    (a, b) => new { Use = a, Duplicate = b })Di2015NewLine                                .Where(x => x.Use.Cycle != x.Duplicate.Cycle &&Di2015NewLine                                            IsTimeOverLaps(x.Use.Stage.StageSpan, x.Duplicate.Stage.StageSpan));Di2015NewLineDi2015NewLinewhile (duplicateUse.Count() > 0)Di2015NewLine{Di2015NewLine    var item = duplicateUse.First();Di2015NewLineDi2015NewLine    Stage ReplaceStage = item.Use.Stage.DeepCopy();//Taking Copy of stage Span to make time shiftDi2015NewLine    Double TimeDifference = (ReplaceStage.StageSpan.ToTime - ReplaceStage.StageSpan.FromTime).TotalMinutes;//Calculating required time shiftDi2015NewLine    ReplaceStage.StageSpan.FromTime = item.Duplicate.Stage.StageSpan.ToTime;//FromTime changed accordinglyDi2015NewLine    ReplaceStage.StageSpan.ToTime = ReplaceStage.StageSpan.ToTime.AddMinutes(TimeDifference);//To Time Changed accordinglyDi2015NewLine    LCycleTimeShift(item.Use.Cycle, ReplaceStage);//passing refernceDi2015NewLine}Di2015NewLine
15597581Di2015UniqueSeparatorcontext.DatabaseDi2015NewLine       .ExecuteSqlCommand("ALTER TABLE Place ALTER COLUMN Id IDENTITY (1000,1)");Di2015NewLine
15597581Di2015UniqueSeparatorPlace.Id
15597621Di2015UniqueSeparatorMAX_INITIALIZER_LINES
15597621Di2015UniqueSeparator0
15597621Di2015UniqueSeparator/** @cond */ thing to hide from doxygen /** @endcond */
15597784Di2015UniqueSeparatorpublic void Wait(double seconds, Action action) {Di2015NewLine  Timer timer = new Timer();Di2015NewLine  timer.Interval = (int)(seconds * 1000.0);Di2015NewLine  timer.Tick += (s, o) => {Di2015NewLine    timer.Enabled = false;Di2015NewLine    timer.Dispose();Di2015NewLine    action();Di2015NewLine  };Di2015NewLine  timer.Enabled = true;Di2015NewLine}Di2015NewLine
15597784Di2015UniqueSeparatortextbox.text = "Test";Di2015NewLineWait(5.0, () => {Di2015NewLine  textbox.text = "Finish";Di2015NewLine});Di2015NewLine
15597822Di2015UniqueSeparatorobject.GetType()
15597822Di2015UniqueSeparatorElement
15597822Di2015UniqueSeparatorpublic Element(Element sPrevious, Element sNext, object sValue)Di2015NewLine{Di2015NewLine    Previous = sPrevious;Di2015NewLine    Next = sNext;Di2015NewLine    Value = sValue;Di2015NewLine    Type = (sValue != null) ? sValue.GetType() : typeof(object);Di2015NewLine}Di2015NewLine
15597822Di2015UniqueSeparatorSystem.Object
15597822Di2015UniqueSeparatorSystem.Object.GetType()
15597822Di2015UniqueSeparatorsValue
15597822Di2015UniqueSeparatorobject
15597822Di2015UniqueSeparatorsValue
15597822Di2015UniqueSeparatorpublic Element(Element sPrevious, Element sNext, Type type)Di2015NewLine{Di2015NewLine    Previous = sPrevious;Di2015NewLine    Next = sNext;Di2015NewLine    Value = null;Di2015NewLine    Type = type;Di2015NewLine}Di2015NewLine
15597822Di2015UniqueSeparatortypeof()
15597822Di2015UniqueSeparatorType
15597822Di2015UniqueSeparatortypeof()
15597822Di2015UniqueSeparatorType t1 = typeof(string);Di2015NewLineType t2 = typeof(int);Di2015NewLine
15597943Di2015UniqueSeparatorvar actHook = new UserActivityHook();Di2015NewLineDi2015NewLine// hang on eventsDi2015NewLineDi2015NewLineactHook.OnMouseActivity += new MouseEventHandler(MouseMoved);Di2015NewLineactHook.KeyDown += new KeyEventHandler(MyKeyDown);Di2015NewLineactHook.KeyPress += new KeyPressEventHandler(MyKeyPress);Di2015NewLineactHook.KeyUp += new KeyEventHandler(MyKeyUp);Di2015NewLine
15597991Di2015UniqueSeparatorint
15597991Di2015UniqueSeparatorcallee_pop_aggregate_return
15597991Di2015UniqueSeparator__declspec(dllexport) SampleStruct __cdecl SampleMethod(void) Di2015NewLine    __attribute__((callee_pop_aggregate_return(0)));Di2015NewLine    // specifies that caller is responsible for popping the hidden pointerDi2015NewLineDi2015NewLineSampleStruct SampleMethod(void) { Di2015NewLine    return (SampleStruct) { 1, 2 };Di2015NewLine}Di2015NewLine
15598230Di2015UniqueSeparatorxml
15598230Di2015UniqueSeparatorjson
15598249Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine        {Di2015NewLineDi2015NewLine            Thread worker = new Thread(DoBackgroundWork);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void DoBackgroundWork()Di2015NewLine        {Di2015NewLineDi2015NewLineDi2015NewLine            while (true)Di2015NewLine            {Di2015NewLine                //Sleep 10 secondsDi2015NewLine                Thread.Sleep(10000);Di2015NewLineDi2015NewLine                //Do some work and than post to the control using Invoke()Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine
15598268Di2015UniqueSeparatorvoid MergeSort(int[] array, int startIndex, int endIndex){Di2015NewLine...Di2015NewLine}Di2015NewLine
15598324Di2015UniqueSeparatorStackPanel
15598324Di2015UniqueSeparatorGrid
15598324Di2015UniqueSeparatorMargin
15598324Di2015UniqueSeparator<StackPanel>Di2015NewLine    <TextBlock Text="Test 1: " FontSize="20" Margin="12,0" />Di2015NewLineDi2015NewLine    <toolkit:ListPicker x:Name="lpTest1" Margin="12,0">Di2015NewLine      <toolkit:ListPicker.Items>Di2015NewLine         <toolkit:ListPickerItem Content="Value 1"/>Di2015NewLine         <toolkit:ListPickerItem Content="Value 2"/>Di2015NewLine         <toolkit:ListPickerItem Content="Value 3"/>Di2015NewLine         <toolkit:ListPickerItem Content="Value 4"/>Di2015NewLine      </toolkit:ListPicker.Items>Di2015NewLine    </toolkit:ListPicker>Di2015NewLineDi2015NewLine    <TextBlock Text="Test 2: " Margin="12,0" />Di2015NewLineDi2015NewLine    <toolkit:ListPicker x:Name="lpTest2" Margin="12,0">Di2015NewLine      <toolkit:ListPicker.Items>Di2015NewLine         <toolkit:ListPickerItem Content="Value 5" />Di2015NewLine         <toolkit:ListPickerItem Content="Value 6" />Di2015NewLine         <toolkit:ListPickerItem Content="Value 7" />Di2015NewLine         <toolkit:ListPickerItem Content="Value 8" />Di2015NewLine      </toolkit:ListPicker.Items>Di2015NewLine    </toolkit:ListPicker>Di2015NewLine</StackPanel>Di2015NewLine
15598398Di2015UniqueSeparatorprivate void ButtonBase_OnClick(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine        const int CHECKBOX_COLUMN = 4;Di2015NewLine        for (int i = 0; i < MyDataGrid.Items.Count - 1; i++)Di2015NewLine        {Di2015NewLineDi2015NewLine            DataGridCell cell = GetCell(i, CHECKBOX_COLUMN);Di2015NewLine            CheckBox tb = cell.Content as CheckBox;Di2015NewLine            MessageBox.Show(tb.IsChecked.ToString());Di2015NewLine        }Di2015NewLine}Di2015NewLine
15598398Di2015UniqueSeparatorGetCell()
15598505Di2015UniqueSeparator//Create global dictionary of listsDi2015NewLineDictionary<string, List<string> dictionaryOfLists = new Dictionary<string, List<string>();Di2015NewLineDi2015NewLine//Get and create lists from a single methodDi2015NewLinepublic List<string> FindListByName(string stringListName)Di2015NewLine{Di2015NewLine    //If the list we want does not exist yet we can create a blank oneDi2015NewLine    if (!dictionaryOfLists.ContainsKey(stringListName))Di2015NewLine        dictionaryOfLists.Add(stringListName, new List<string>());Di2015NewLineDi2015NewLine    //Return the requested listDi2015NewLine    return dictionaryOfLists[stringListName];Di2015NewLine}Di2015NewLine
15598519Di2015UniqueSeparatorRecord
15598519Di2015UniqueSeparatorShipping = new ShippingData(); // remove this lineDi2015NewLineDelivery = new DeliveryData(); // remove this lineDi2015NewLine
15598519Di2015UniqueSeparatorShippingData
15598519Di2015UniqueSeparatorDeliveryData
15598519Di2015UniqueSeparator0
15598519Di2015UniqueSeparatornull
15598519Di2015UniqueSeparatorusing System.Data.Entity;
15598519Di2015UniqueSeparatorInclude
15598635Di2015UniqueSeparatorDataTemple
15598635Di2015UniqueSeparatorCombobox
15598635Di2015UniqueSeparator<Grid>Di2015NewLine    <Grid.Resources>Di2015NewLine        <DataTemplate x:Key="groupStyle">Di2015NewLine            <TextBlock FontWeight="Bold" Text="{Binding Name}"/>Di2015NewLine        </DataTemplate>Di2015NewLine        <Style TargetType="{x:Type ComboBoxItem}"  x:Key="comboBoxItemStyle">Di2015NewLine            <Setter Property="Template" >Di2015NewLine                <Setter.Value>Di2015NewLine                    <ControlTemplate>Di2015NewLine                        <Label Background="Red" Content="{Binding Item}"/>Di2015NewLine                    </ControlTemplate>Di2015NewLine                </Setter.Value>Di2015NewLine            </Setter>Di2015NewLine        </Style>Di2015NewLine    </Grid.Resources>Di2015NewLine    <ComboBox Height="27" Width="195" DisplayMemberPath="Item" Name="cboGroup"Di2015NewLine              ItemContainerStyle="{StaticResource comboBoxItemStyle}">Di2015NewLine        <ComboBox.GroupStyle>Di2015NewLine            <GroupStyle HeaderTemplate="{StaticResource groupStyle}"/>Di2015NewLine        </ComboBox.GroupStyle>Di2015NewLine    </ComboBox>Di2015NewLine</Grid>Di2015NewLine
15598635Di2015UniqueSeparator public partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        DataContext = this;Di2015NewLineDi2015NewLineDi2015NewLine        ComboBox comboBox1 = new ComboBox();Di2015NewLine        comboBox1.Height = 23;Di2015NewLine        comboBox1.Width = 200;Di2015NewLineDi2015NewLine        GroupStyle style = new GroupStyle();Di2015NewLine        style.HeaderTemplate = (DataTemplate)this.FindResource("groupStyle");Di2015NewLine        comboBox1.GroupStyle.Add(style);Di2015NewLine        comboBox1.DisplayMemberPath = "Item";Di2015NewLine        ObservableCollection<CategoryItem<string>> items = new ObservableCollection<CategoryItem<string>>();Di2015NewLineDi2015NewLine        items.Add(new CategoryItem<string> { Category = "Warm Colors", Item = "Orange" });Di2015NewLine        items.Add(new CategoryItem<string> { Category = "Warm Colors", Item = "Red" });Di2015NewLine        items.Add(new CategoryItem<string> { Category = "Warm Colors", Item = "Pink" });Di2015NewLine        items.Add(new CategoryItem<string> { Category = "Cool Colors", Item = "Blue" });Di2015NewLine        items.Add(new CategoryItem<string> { Category = "Cool Colors", Item = "Purple" });Di2015NewLine        items.Add(new CategoryItem<string> { Category = "Cool Colors", Item = "Green" });Di2015NewLineDi2015NewLine        CollectionViewSource cvs = new CollectionViewSource();Di2015NewLine        cvs.GroupDescriptions.Add(new PropertyGroupDescription("Category"));Di2015NewLine        cvs.Source = items;Di2015NewLineDi2015NewLine        Binding b = new Binding();Di2015NewLine        b.Source = cvs;Di2015NewLine        BindingOperations.SetBinding(Di2015NewLine           comboBox1, ComboBox.ItemsSourceProperty, b);Di2015NewLineDi2015NewLine        myGrid.Children.Add(comboBox1);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CategoryItem<T>Di2015NewLine{Di2015NewLine    public T Item { get; set; }Di2015NewLine    public string Category { get; set; }Di2015NewLine}Di2015NewLine
15598646Di2015UniqueSeparatorfoo.cpp
15598646Di2015UniqueSeparatorfoo.h
15598646Di2015UniqueSeparatorvoid bar(int a, int b);Di2015NewLine
15598646Di2015UniqueSeparatorfoo.cpp
15598646Di2015UniqueSeparator/ZI
15598646Di2015UniqueSeparator/Gm
15598646Di2015UniqueSeparator/EHsc
15598646Di2015UniqueSeparator/RTC
15598646Di2015UniqueSeparator/GR-
15598799Di2015UniqueSeparatorquotation mark("'")
15598799Di2015UniqueSeparatorstring Val1 =TextBox1.Text.Replace("'","''");Di2015NewLine
15598819Di2015UniqueSeparatorVisibleDayOfWeek
15598819Di2015UniqueSeparatorFlags
15598819Di2015UniqueSeparatorVisibleDayOfWeek.Friday
15598819Di2015UniqueSeparatorDayOfWeek.Friday
15598819Di2015UniqueSeparatorpublic IEnumerable<DayOfWeek> ConvertFromVisible(VisibleDayOfWeek visibleDay)Di2015NewLine{Di2015NewLine    if ((visibleDay & VisibleDayOfWeek.Monday) == VisibleDayOfWeek.Monday)Di2015NewLine        yield return DayOfWeek.Monday;Di2015NewLineDi2015NewLine    if ((visibleDay & VisibleDayOfWeek.Tuesday) == VisibleDayOfWeek.Tuesday)Di2015NewLine        yield return DayOfWeek.Tuesday;Di2015NewLineDi2015NewLine    if ((visibleDay & VisibleDayOfWeek.Wednesday) == VisibleDayOfWeek.Wednesday)Di2015NewLine        yield return DayOfWeek.Wednesday;Di2015NewLineDi2015NewLine    if ((visibleDay & VisibleDayOfWeek.Thursday) == VisibleDayOfWeek.Thursday)Di2015NewLine        yield return DayOfWeek.Thursday;Di2015NewLineDi2015NewLine    if ((visibleDay & VisibleDayOfWeek.Friday) == VisibleDayOfWeek.Friday)Di2015NewLine        yield return DayOfWeek.Friday;Di2015NewLineDi2015NewLine    if ((visibleDay & VisibleDayOfWeek.Saturday) == VisibleDayOfWeek.Saturday)Di2015NewLine        yield return DayOfWeek.Saturday;Di2015NewLineDi2015NewLine    if ((visibleDay & VisibleDayOfWeek.Sunday) == VisibleDayOfWeek.Sunday)Di2015NewLine        yield return DayOfWeek.Sunday;Di2015NewLine}Di2015NewLine
15598819Di2015UniqueSeparatorDayOfWeek
15598898Di2015UniqueSeparatorval()
15598898Di2015UniqueSeparatortinyMCE
15598898Di2015UniqueSeparator// Get the HTML contents of the currently active editorDi2015NewLineconsole.debug(tinyMCE.activeEditor.getContent());Di2015NewLineDi2015NewLine// Get the raw contents of the currently active editorDi2015NewLinetinyMCE.activeEditor.getContent({format : 'raw'});Di2015NewLineDi2015NewLine// Get content of a specific editor:Di2015NewLinetinyMCE.get('content id').getContent()Di2015NewLine
15598946Di2015UniqueSeparator enum MyEnum{Di2015NewLine     A,BDi2015NewLine}Di2015NewLineDi2015NewLinevoid Main()Di2015NewLine{Di2015NewLine    MyEnum  myEnum = MyEnum.B; //Assign a variableDi2015NewLineDi2015NewLine    DoSomethingByEnum(myEnum); //Pass myEnumDi2015NewLine    DoSomethingDynamicByValue(myEnum); //pass myEnum to a dynamic parameterDi2015NewLineDi2015NewLine    dynamic dyn = myEnum;      //assign myenum to a dynamic variableDi2015NewLine    DoSomethingDynamicByRef(ref dyn);    //pass it as a referenceDi2015NewLine}Di2015NewLineDi2015NewLineMyEnum DoSomethingByEnum(MyEnum a)Di2015NewLine{Di2015NewLine   return a;Di2015NewLine}Di2015NewLineDi2015NewLinedynamic DoSomethingDynamicByValue(dynamic inputObject)Di2015NewLine{Di2015NewLine   return inputObject;Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinedynamic DoSomethingDynamicByRef(ref  dynamic inputObject)Di2015NewLine{Di2015NewLine  return inputObject;Di2015NewLineDi2015NewLine} Di2015NewLine
15598946Di2015UniqueSeparatorMain:Di2015NewLine  IL_0001:  ldc.i4.1    // MyEnum myEnum = MyEnum.B;Di2015NewLine  IL_0002:  stloc.0     // myEnum popped from evaluation stack and stored in a local variable Di2015NewLine  IL_0003:  ldarg.0     Di2015NewLine  IL_0004:  ldloc.0     // myEnum loaded from local variable at index 0 and passed to the functionDi2015NewLine  IL_0005:  call        DoSomethingByEnumDi2015NewLine  IL_000A:  pop         Di2015NewLine  IL_000B:  ldarg.0     Di2015NewLine  IL_000C:  ldloc.0     // myEnumDi2015NewLine  IL_000D:  box         MyEnum // dynamic dyn = myEnum;  Di2015NewLine                       // myEnum Converted from value type to a true object reference of type dynamicDi2015NewLine  IL_0012:  call        DoSomethingDynamicByValueDi2015NewLine
15598946Di2015UniqueSeparator DoSomethingDynamicByValue:Di2015NewLine    IL_0000:  nop         Di2015NewLine    IL_0001:  ldarg.1     Di2015NewLine    IL_0002:  stloc.0      Di2015NewLine    IL_0003:  br.s        IL_0005Di2015NewLine    IL_0005:  ldloc.0      Di2015NewLine    IL_0006:  ret         Di2015NewLineDi2015NewLineDoSomethingByEnum:Di2015NewLine    IL_0000:  nop         Di2015NewLine    IL_0001:  ldarg.1     Di2015NewLine    IL_0002:  stloc.0      Di2015NewLine    IL_0003:  br.s        IL_0005Di2015NewLine    IL_0005:  ldloc.0     Di2015NewLine    IL_0006:  ret         Di2015NewLine
15598946Di2015UniqueSeparatorMain:Di2015NewLine    IL_0018:  ldloc.0     // myEnumDi2015NewLine    IL_0019:  box         UserQuery.MyEnumDi2015NewLine    IL_001E:  stloc.1     // dynDi2015NewLine    IL_001F:  ldarg.0     Di2015NewLine    IL_0020:  ldloca.s    01 // loads the address of dyn onto the stackDi2015NewLine    IL_0022:  call        UserQuery.DoSomethingDynamicByRefDi2015NewLineDi2015NewLineDoSomethingDynamicByRef:Di2015NewLine   IL_0000:  nop         Di2015NewLine   IL_0001:  ldarg.1     Di2015NewLine   IL_0002:  ldind.ref   //Di2015NewLine   IL_0003:  stloc.0     Di2015NewLine   IL_0004:  br.s        IL_0006Di2015NewLine   IL_0006:  ldloc.0      Di2015NewLine   IL_0007:  retDi2015NewLine
15598946Di2015UniqueSeparator   ldloca.s    01  // loads the address of dyn onto the stackDi2015NewLineDi2015NewLine   ldind.ref       // Loads the object reference at address addr onto the stack as a type ODi2015NewLine
15599143Di2015UniqueSeparatorId  ValueDi2015NewLine1   ADi2015NewLine2   BDi2015NewLine3   CDi2015NewLineDi2015NewLineId  ChildValueDi2015NewLine1   a1Di2015NewLine1   a2Di2015NewLine1   a3Di2015NewLine2   b1Di2015NewLine2   b2Di2015NewLine
15599143Di2015UniqueSeparatorJoin
15599143Di2015UniqueSeparatorId
15599143Di2015UniqueSeparatorValue ChildValueDi2015NewLineA     a1Di2015NewLineA     a2Di2015NewLineA     a3Di2015NewLineB     b1Di2015NewLineB     b2Di2015NewLine
15599143Di2015UniqueSeparatorGroupJoin
15599143Di2015UniqueSeparatorId
15599143Di2015UniqueSeparatorValue  ChildValuesDi2015NewLineA      [a1, a2, a3]Di2015NewLineB      [b1, b2]Di2015NewLineC      []Di2015NewLine
15599143Di2015UniqueSeparatorJoin
15599143Di2015UniqueSeparatorGroupJoin
15599143Di2015UniqueSeparatorJoin
15599143Di2015UniqueSeparatorC
15599143Di2015UniqueSeparatorGroupJoin
15599143Di2015UniqueSeparatorC
15599143Di2015UniqueSeparatorC - null
15599143Di2015UniqueSeparatorIEnumerable<Parent>
15599143Di2015UniqueSeparatorIEnumerable<Child>
15599143Di2015UniqueSeparatorIQueryale
15599143Di2015UniqueSeparatorJoin
15599143Di2015UniqueSeparatorfrom p in ParentDi2015NewLinejoin c in Child on p.Id equals c.IdDi2015NewLineselect new { p.Value, c.ChildValue }Di2015NewLine
15599143Di2015UniqueSeparatorIEnumerable<X>
15599143Di2015UniqueSeparatorValue
15599143Di2015UniqueSeparatorChildValue
15599143Di2015UniqueSeparatorJoin
15599143Di2015UniqueSeparatorGroupJoin
15599143Di2015UniqueSeparatorfrom p in ParentDi2015NewLinejoin c in Child on p.Id equals c.Id into gDi2015NewLineselect new { Parent = p, Children = g }Di2015NewLine
15599143Di2015UniqueSeparatorIEnumerable<Y>
15599143Di2015UniqueSeparatorParent
15599143Di2015UniqueSeparatorIEnumerable<Child>
15599143Di2015UniqueSeparatorGroupJoin
15599143Di2015UniqueSeparatorselect g
15599143Di2015UniqueSeparatorIEnumerable<IEnumerable<Child>>
15599180Di2015UniqueSeparatorList<T>
15599189Di2015UniqueSeparator    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        SetReadonlyControls(groupBox1.Controls);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void SetReadonlyControls(Control.ControlCollection controlCollection)Di2015NewLine    {Di2015NewLine        if (controlCollection == null)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (TextBoxBase c in controlCollection.OfType<TextBoxBase>())Di2015NewLine        {Di2015NewLine            c.ReadOnly = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15599214Di2015UniqueSeparatorfiles.Clear(); Di2015NewLinefiles.Add(new upload(FileName,contenttype,bytes));Di2015NewLine
15599310Di2015UniqueSeparatorMenuItem
15599310Di2015UniqueSeparatorMenuItem
15599310Di2015UniqueSeparatorMenuItem
15599310Di2015UniqueSeparatorMenuItem
15599310Di2015UniqueSeparatorpublic class MenuItem // Pizza MargheritaDi2015NewLine{Di2015NewLine    // ...Di2015NewLine    public virtual ICollection<MenuItemExtras> MenuItemExtras { get; set; }Di2015NewLine    // Possible Extras: Paprika or Ham or MushroomsDi2015NewLine}Di2015NewLine
15599310Di2015UniqueSeparatorOrderMenuItem
15599310Di2015UniqueSeparatorOrder
15599310Di2015UniqueSeparatorItems
15599310Di2015UniqueSeparatorOrderMenuItem
15599310Di2015UniqueSeparatorMenuItem
15599310Di2015UniqueSeparatorpublic class OrderDi2015NewLine{Di2015NewLine    public Guid OrderId { get; set; }Di2015NewLine    public virtual ICollection<OrderMenuItem> Items { get; set; }Di2015NewLine}Di2015NewLine
15599310Di2015UniqueSeparatorOrderMenuItem
15599310Di2015UniqueSeparatorMenuItem
15599310Di2015UniqueSeparatorMenuItemExtras
15599310Di2015UniqueSeparatorpublic class OrderMenuItemDi2015NewLine{Di2015NewLine    public int OrderMenuItemId { get; set; }Di2015NewLineDi2015NewLine    public int OrderId { get; set; }Di2015NewLine    public Order Order { get; set; }Di2015NewLineDi2015NewLine    public int MenuItemId { get; set; }Di2015NewLine    public MenuItem MenuItem { get; set; } // Pizza MargheritaDi2015NewLineDi2015NewLine    public ICollection<MenuItemExtras> MenuItemExtras { get; set; }Di2015NewLine    // Ordered Extras: Paprika and Mushrooms (subset of Possible Extras)Di2015NewLine}Di2015NewLine
15599310Di2015UniqueSeparatormodelBuilder.Entity<OrderMenuItem>()Di2015NewLine    .HasRequired(o => o.Order)Di2015NewLine    .WithMany(o => o.Items)Di2015NewLine    .HasForeignKey(o => o.OrderId);Di2015NewLineDi2015NewLinemodelBuilder.Entity<OrderMenuItem>()Di2015NewLine    .HasRequired(o => o.MenuItem)Di2015NewLine    .WithMany() // a MenuItem can be ordered in many ordersDi2015NewLine    .HasForeignKey(o => o.MenuItemId);Di2015NewLineDi2015NewLinemodelBuilder.Entity<OrderMenuItem>()Di2015NewLine    .HasMany(o => o.MenuItemExtras)Di2015NewLine    .WithMany() // an Extra can be ordered in many ordersDi2015NewLine    .Map(m => {Di2015NewLine        m.ToTable("OrderMenuItemMenuItemExtras");Di2015NewLine        m.MapLeftKey("OrderMenuItemId");Di2015NewLine        m.MapRightKey("MenuItemExtraId");Di2015NewLine    });Di2015NewLine
15599310Di2015UniqueSeparatorOrderMenuItem
15599310Di2015UniqueSeparatorOrderMenuItemId
15599310Di2015UniqueSeparatorOrder
15599310Di2015UniqueSeparatorMenuItem
15599310Di2015UniqueSeparatorOrderMenuItemMenuItemExtras
15599331Di2015UniqueSeparatormyDict[key] = value;Di2015NewLine
15599381Di2015UniqueSeparatorstring output = Regex.Replace(message, @".*\\[", "[");Di2015NewLine
15599412Di2015UniqueSeparatorFetchRequest
15599412Di2015UniqueSeparatorFetchResponse
15599412Di2015UniqueSeparatorOpenIdRelyingParty rp;Di2015NewLinevar request = rp.CreateRequest("https://openid.service.com/");Di2015NewLinerequest.IsExtensionOnly = true;Di2015NewLinevar fetchRequest = new FetchRequest();Di2015NewLinefetchRequest.Attributes.AddRequired("http://openid.service.com/useridentity");Di2015NewLinerequest.AddExtension(fetchRequest);Di2015NewLinerequest.RedirectToProvider();Di2015NewLine
15599412Di2015UniqueSeparatorOpenIdProvider op;Di2015NewLineIRequest request = op.GetRequest();Di2015NewLine/// ...Di2015NewLineIAnonymousRequest anonRequest = request as IAnonymousRequest;Di2015NewLineif (anonRequest != null) {Di2015NewLine    // The key part for this sample snippet is that you make sure the RP askingDi2015NewLine    // is one of your own, since you're not following the typical OpenID flow.Di2015NewLine    if (!IsWhiteListedRealm(hostRequest.Realm)) {Di2015NewLine        anonRequest.IsApproved = false; // reject all RPs that aren't in the whitelistDi2015NewLine    } else {Di2015NewLine        // Perhaps here is where you'll start your double role as an RPDi2015NewLine        // to authenticate the user if there isn't already a FormsAuth cookie.Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinereturn op.PrepareResponse(request).AsActionResult()Di2015NewLine
15599412Di2015UniqueSeparatorOpenIdRelyingParty rp;Di2015NewLinevar response = rp.GetResponse();Di2015NewLineif (response != null) {Di2015NewLine    if (response.Provider.Uri.Authority != "openid.service.com") {Di2015NewLine        throw new Exception(); // only assertions from our own OP are trusted.Di2015NewLine    }Di2015NewLineDi2015NewLine    if (response.Status == AuthenticationStatus.ExtensionsOnly) {Di2015NewLine        var fetchResponse = response.GetExtension<FetchResponse>();Di2015NewLine        string claimedId = fetchResponse.GetAttributeValue("http://openid.service.com/useridentity");Di2015NewLine        FormsAuthentication.RedirectFromLoginPage(claimedId);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15599413Di2015UniqueSeparatorid
15599413Di2015UniqueSeparatorclass
15599413Di2015UniqueSeparatorBeginForm
15599413Di2015UniqueSeparator@using (Html.BeginForm(null, null, new { returnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-vertical login-form", id = "loginform" }))Di2015NewLine{Di2015NewLine    <button type="submit" class="btn green pull-right">Di2015NewLine        Login <i class="m-icon-swapright m-icon-white"></i>Di2015NewLine    </button>Di2015NewLine}Di2015NewLine
15599413Di2015UniqueSeparatorBeginForm
15599413Di2015UniqueSeparatoryours
15599413Di2015UniqueSeparatormine
15599413Di2015UniqueSeparatorrouteValues
15599413Di2015UniqueSeparatorhtmlAttributes
15599513Di2015UniqueSeparatorOnRowDataBound
15599513Di2015UniqueSeparatorgridview
15599513Di2015UniqueSeparatorprotected void surgicalGridView_RowDataBound(object o, GridViewRowEventArgs e)Di2015NewLine{           Di2015NewLine    if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine    {Di2015NewLine         e.Row.Cells[0].Width = new Unit("200px");Di2015NewLine         e.Row.Cells[1].Width = new Unit("400px");Di2015NewLine         // and so onDi2015NewLine    } Di2015NewLine}Di2015NewLine
15599513Di2015UniqueSeparatorGridview
15599513Di2015UniqueSeparator<asp:GridView ...............................Di2015NewLine        onrowdatabound="surgicalGridView_RowDataBound">    // just add this event and execute the above codeDi2015NewLine </asp:GridView>Di2015NewLine
15599563Di2015UniqueSeparatorif (lists.Any(sublist => sublist.Contains(str)))Di2015NewLine
15599605Di2015UniqueSeparatorforeach (var culture in CultureInfo.GetCultures(CultureTypes.SpecificCultures))Di2015NewLine{Di2015NewLine    DateTime result;Di2015NewLine    if (DateTime.TryParseExact(text, "d", culture, DateTimeStyles.None,Di2015NewLine                               out result))Di2015NewLine    {Di2015NewLine        // Valid - return, or whateverDi2015NewLine    }Di2015NewLine}Di2015NewLine
15599605Di2015UniqueSeparatorculture.DateTimeFormat.ShortDatePattern
15599634Di2015UniqueSeparatorabstract class Animal { }Di2015NewLineclass Mammal : Animal { }Di2015NewLineclass Dog : Mammal { }Di2015NewLineclass Reptile : Animal { }Di2015NewLineDi2015NewLineinterface INode<out T> where T : AnimalDi2015NewLine{Di2015NewLine    T MySelf { get; }Di2015NewLine    IEnumerable<INode<T>> Children { get; }Di2015NewLine}Di2015NewLineDi2015NewLineclass Node<T> : INode<T>Di2015NewLine    where T : AnimalDi2015NewLine{Di2015NewLine    public Node() { this.Children = new HashSet<INode<T>>(); }Di2015NewLine    public T MySelf { get; set; }Di2015NewLine    public ISet<INode<T>> Children { get; set; }Di2015NewLine    IEnumerable<INode<T>> INode<T>.Children { get { return this.Children; } }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        // this is a 'typical' setup - to test compiler 'denial' for the Reptile type...Di2015NewLineDi2015NewLine        Node<Mammal> tree = new Node<Mammal>();Di2015NewLine        tree.MySelf = new Mammal();Di2015NewLineDi2015NewLine        var node1 = new Node<Mammal>();Di2015NewLine        tree.Children.Add(node1);Di2015NewLineDi2015NewLine        var node2 = new Node<Dog>();Di2015NewLine        tree.Children.Add(node2);Di2015NewLineDi2015NewLine        var node3 = new Node<Reptile>();Di2015NewLine        // tree.Children.Add(node3); // this fails to compileDi2015NewLineDi2015NewLineDi2015NewLine        // ...and similar just more 'open' - if you 'collect' animals, all are welcomeDi2015NewLineDi2015NewLine        Node<Animal> animals = new Node<Animal>();Di2015NewLine        animals.MySelf = new Mammal();Di2015NewLineDi2015NewLine        INode<Mammal> mamals = new Node<Mammal>();Di2015NewLine        animals.Children.Add(mamals);Di2015NewLineDi2015NewLine        var dogs = new Node<Dog>();Di2015NewLine        animals.Children.Add(dogs);Di2015NewLineDi2015NewLine        INode<Animal> reptiles = new Node<Reptile>();Di2015NewLine        animals.Children.Add(reptiles);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15599656Di2015UniqueSeparatorItemContainerStyle
15599656Di2015UniqueSeparator<DataTemplate x:Key="groupStyle">Di2015NewLine    <TextBlock FontWeight="Bold" Text="{Binding Name}"/>Di2015NewLine</DataTemplate>Di2015NewLine<Style TargetType="{x:Type ComboBoxItem}"  x:Key="comboBoxItemStyle">Di2015NewLine    <Setter Property="Template" >Di2015NewLine        <Setter.Value>Di2015NewLine            <ControlTemplate>Di2015NewLine                <Label Background="Red" Content="{Binding Item}"/>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
15599656Di2015UniqueSeparator ComboBox comboBox1 = new ComboBox();Di2015NewLineDi2015NewLine GroupStyle style = new GroupStyle();Di2015NewLine style.HeaderTemplate = (DataTemplate)this.FindResource("groupStyle");Di2015NewLine comboBox1.GroupStyle.Add(style);Di2015NewLine comboBox1.DisplayMemberPath = "Item";Di2015NewLineDi2015NewLine // Here is what you are looking forDi2015NewLine comboBox1.ItemContainerStyle = (Style)this.FindResource("comboBoxItemStyle");Di2015NewLineDi2015NewLineDi2015NewLine ObservableCollection<CategoryItem<string>> items = new ObservableCollection<CategoryItem<string>>();Di2015NewLineDi2015NewLine CollectionViewSource cvs = new CollectionViewSource();Di2015NewLine cvs.GroupDescriptions.Add(new PropertyGroupDescription("Category"));Di2015NewLine cvs.Source = items;Di2015NewLineDi2015NewLine Binding b = new Binding();Di2015NewLine b.Source = cvs;Di2015NewLine BindingOperations.SetBinding(Di2015NewLine           comboBox1, ComboBox.ItemsSourceProperty, b);Di2015NewLine
15599712Di2015UniqueSeparatorvar epoch = new DateTime(1970,1,1);Di2015NewLinevar ts = TimeSpan.FromSeconds(1332622254);Di2015NewLinevar date = epoch.Add(ts);Di2015NewLine
15599712Di2015UniqueSeparatordate
15599712Di2015UniqueSeparatorvar epoch = new DateTime(1970,1,1);Di2015NewLinevar date = epoch.AddSeconds(1332622254);Di2015NewLine
15599737Di2015UniqueSeparatorList<ListItem> toBeRemoved = new List<ListItem>();Di2015NewLinefor(int i=0; i<chkItems.Items.Count; i++){Di2015NewLine    if(chkItems.Items[i].Selected == true)Di2015NewLine        toBeRemoved.Add(chkItems.Items[i]);Di2015NewLine}Di2015NewLineDi2015NewLinefor(int i=0; i<toBeRemoved.Count; i++){Di2015NewLine    chkItems.Items.Remove(toBeRemoved[i]);Di2015NewLine}Di2015NewLine
15600004Di2015UniqueSeparatortbkLabel.Text = "two mins delay";Di2015NewLineDi2015NewLinevar timer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(2) };Di2015NewLinetimer.Start();Di2015NewLinetimer.Tick += (sender, args) =>Di2015NewLine    {Di2015NewLine        timer.Stop();Di2015NewLine        var page = new Page2();Di2015NewLine        page.Show();Di2015NewLine    };Di2015NewLine
15600004Di2015UniqueSeparatortbkLabel.Text = "two mins delay";Di2015NewLineDi2015NewLineTask.Delay(2000).ContinueWith(_ => Di2015NewLine   { Di2015NewLine     var page = new Page2();Di2015NewLine     page.Show();Di2015NewLine   }Di2015NewLine);Di2015NewLine
15600004Di2015UniqueSeparator// we need to add the async keyword to the method signatureDi2015NewLinepublic async void TheEnclosingMethod()Di2015NewLine{Di2015NewLine    tbkLabel.Text = "two mins delay";Di2015NewLineDi2015NewLine    await Task.Delay(2000);Di2015NewLine    var page = new Page2();Di2015NewLine    page.Show();Di2015NewLine}Di2015NewLine
15600076Di2015UniqueSeparatorid
15600076Di2015UniqueSeparatorresult
15600076Di2015UniqueSeparator// this is probably sharedDi2015NewLineDictionary<int, List<string>> result = new Dictionary<int, List<string>>();Di2015NewLineDi2015NewLine// perhaps this next bit is in a function that gets the attributes for a given tagDi2015NewLineint id = Convert.ToInt32(textReader.GetAttribute("id"));Di2015NewLineresult[id] = new List<string>();Di2015NewLineforeach(string attr in attrs) {Di2015NewLine    result[id].Add(textReader.GetAttribute(attr));Di2015NewLine}Di2015NewLine
15600076Di2015UniqueSeparatorList
15600076Di2015UniqueSeparatorDictionary<int, List<string>>
15600076Di2015UniqueSeparatorint
15600076Di2015UniqueSeparatorList<string>
15600076Di2015UniqueSeparatorstring
15600136Di2015UniqueSeparatorstatic
15600158Di2015UniqueSeparatorstring query = "SELECT * from Table1 WHERE ID=?";Di2015NewLineDi2015NewLineOleDbConnection odc = new OleDbConnection(strConn);Di2015NewLineodc.Open();Di2015NewLineOleDbDataAdapter dAdapter = new OleDbDataAdapter();Di2015NewLineOleDbCommand cmd = new OleDbCommand(query,odc);Di2015NewLineDi2015NewLinecmd.Parameters.Add("?", OleDbType.BSTR, 5).Value ="asdf";Di2015NewLinedAdapter.SelectCommand = cmd;Di2015NewLineDi2015NewLineds = new DataSet();Di2015NewLinedAdapter.Fill(ds);Di2015NewLineDi2015NewLinedataGridView1.DataSource = ds.Tables[0];Di2015NewLine
15600158Di2015UniqueSeparatorstrConn
15600179Di2015UniqueSeparatorlistBox1.Items.SortDescriptions.Add(Di2015NewLine            new System.ComponentModel.SortDescription("",Di2015NewLine            System.ComponentModel.ListSortDirection.Ascending));Di2015NewLine
15600326Di2015UniqueSeparatorHand[] playerCards = new Hand[4]; // or however many players you have.Di2015NewLinefor (int i = 0; i < playerCards.length; i++) {Di2015NewLine   playerCards[i] = new Hand(cards);Di2015NewLine   // all of your initialization, bank, bet amount, etc.Di2015NewLine}Di2015NewLine
15600433Di2015UniqueSeparatorAddresses
15600433Di2015UniqueSeparatorPerson
15600433Di2015UniqueSeparatorCompany
15600433Di2015UniqueSeparatorAddressBooks
15600433Di2015UniqueSeparatorAddresses
15600433Di2015UniqueSeparatorpublic partial class Person : BaseEntity Di2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public int ID { get; set; }Di2015NewLine    public virtual ICollection<AddressBook> AddressBookEntries { get; set; }Di2015NewLineDi2015NewLine    public IEnumerable<Address> AddressesDi2015NewLine    {Di2015NewLine        get { return AddressBookEntries.Select(ab => ab.Address); }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15600433Di2015UniqueSeparatorCompany
15600433Di2015UniqueSeparatorPerson
15600433Di2015UniqueSeparatorCompany
15600433Di2015UniqueSeparatorAddresses
15600433Di2015UniqueSeparatorAddress
15600433Di2015UniqueSeparatorpublic abstract class EntityWithAddresses : BaseEntityDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public int ID { get; set; }Di2015NewLine    public virtual ICollection<Address> Addresses { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class Person : EntityWithAddresses Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class Company : EntityWithAddresses Di2015NewLine{Di2015NewLine}Di2015NewLine
15600433Di2015UniqueSeparatorAddress
15600433Di2015UniqueSeparatorpublic partial class Address : BaseEntityDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public int ID { get; set; }Di2015NewLine    public string Street { get; set; }Di2015NewLine    public string CityName { get; set; }Di2015NewLine    public int? PostalCode { get; set; }Di2015NewLineDi2015NewLine    public virtual ICollection<EntityWithAddresses> EntityWithAddresses { get; set; }Di2015NewLine}Di2015NewLine
15600472Di2015UniqueSeparatorQuadTransformationCalcs.MapQuadToQuad
15600528Di2015UniqueSeparator[DllImport("user32.dll", CharSet = CharSet.Unicode, EntryPoint = "WindowFromPoint")]Di2015NewLinestatic extern IntPtr MyFunc(POINT Point);Di2015NewLine
15600528Di2015UniqueSeparator[MethodImplAttribute(MethodImplOptions.AggressiveInlining)] Di2015NewLinepublic static IntPtr MyFunc(POINT Point)Di2015NewLine{Di2015NewLine    return WindowFromPoint(Point);Di2015NewLine}Di2015NewLine
15600551Di2015UniqueSeparatorSystem.DBNull
15600551Di2015UniqueSeparatorCmdUpdate.Parameters["@SubsetID"].Value = DBNull.Value;Di2015NewLine
15600651Di2015UniqueSeparatorvar Streszczenie_controll = $.parseJSON('<p></p><t></t>');Di2015NewLine
15600651Di2015UniqueSeparator        $.ajaxSetup({Di2015NewLine            contentType: "application/json; charset=utf-8",Di2015NewLine            dataType: "json"Di2015NewLine        });Di2015NewLine
15600697Di2015UniqueSeparatorinitialize
15600847Di2015UniqueSeparatorlstAsset.ValueMember = "Key";Di2015NewLine
15600847Di2015UniqueSeparatorint ush = Convert.ToInt32(lstAsset.SelectedValue.ToString());Di2015NewLine
15601027Di2015UniqueSeparatorvar names = new[] {"A", "B", "C"};Di2015NewLinevar apps = names.Select(x => new Application { Name = x });Di2015NewLineapplications.AddRange(apps);Di2015NewLine
15601222Di2015UniqueSeparator.ShowDialog()
15601222Di2015UniqueSeparatorForm
15601222Di2015UniqueSeparator// la la normal codeDi2015NewLinevar itemSelect = new ItemSelectionForm();Di2015NewLineitemSelect.ShowDialog();Di2015NewLine// Check that they have selected somethingDi2015NewLineif (itemSelect.ItemList.SelectedItem != null)Di2015NewLine{Di2015NewLine    // Item adding codeDi2015NewLine    // ...Di2015NewLine    // Use itemSelect.ItemList.SelectedItem as the selected item from the popup formDi2015NewLine}Di2015NewLine
15601276Di2015UniqueSeparator// assume that System.IO is included (in a using statement)Di2015NewLine// reads the file, changes all leading integers to "Number", and writes the changesDi2015NewLinevoid rewriteNumbers(string file)Di2015NewLine{Di2015NewLine    // get the lines from the fileDi2015NewLine    string[] lines = File.ReadAllLines(file);Di2015NewLine    // for each line, do:Di2015NewLine    for (int i = 0; i < lines.Length; i++)Di2015NewLine    {Di2015NewLine        // trim all number characters from the beginning of the line, andDi2015NewLine        // write "Number" to the beginningDi2015NewLine        lines[i] = "Number" + lines[i].TrimStart('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');Di2015NewLine    }Di2015NewLine    // write the changes back to the fileDi2015NewLine    File.WriteAllLines(file, lines);Di2015NewLine}Di2015NewLine
15601379Di2015UniqueSeparatorConsole.Write
15601379Di2015UniqueSeparatorConsole.WriteLine
15601441Di2015UniqueSeparatorSELECT * Di2015NewLineFROM Circulation Di2015NewLineWHERE sr_no = (SELECT MAX(sr_no)Di2015NewLine               FROM circulation Di2015NewLine               WHERE accessionno = @accessionno)Di2015NewLine
15601441Di2015UniqueSeparatorCirculation
15601441Di2015UniqueSeparatorsr_no
15601441Di2015UniqueSeparatorsr_no
15601910Di2015UniqueSeparatorName = barlist.First(f => f.Id == b.Id).Name;Di2015NewLine
15601910Di2015UniqueSeparatornull
15601910Di2015UniqueSeparatorvar viewModels = foo.Select(f => {Di2015NewLine    var bar = barlist.FirstOrDefault(b => f.Id == b.Id);Di2015NewLineDi2015NewLine    return new ViewModel() { Di2015NewLine        Id = f.Id, Di2015NewLine        Name = bar == null? null : bar.Name Di2015NewLine    };Di2015NewLine});Di2015NewLine
15601910Di2015UniqueSeparatorSingleOrDefault
15601910Di2015UniqueSeparatorFirstOrDefault
15601910Di2015UniqueSeparatorId
15602003Di2015UniqueSeparatorClientContext clientContext = new ClientContext("http://SharePoint/");Di2015NewLinestring serverRelativeUrlOfFile = "SharedDocuments/file.docx";Di2015NewLinestring fileDestinationPath = @"C:\\Documents\\file.docx";Di2015NewLineDi2015NewLineusing (FileInformation sharePointFile =Di2015NewLine    Microsoft.SharePoint.Client.File.OpenBinaryDirect(clientContext, serverRelativeUrlOfFile))Di2015NewLine{Di2015NewLine    using (Stream destFile = System.IO.File.OpenWrite(fileDestinationPath))Di2015NewLine    {Di2015NewLine        byte[] buffer = new byte[8 * 1024];Di2015NewLine        int byteReadInLastRead;Di2015NewLine        while ((byteReadInLastRead = sharePointFile.Stream.Read(buffer, 0, buffer.Length)) > 0)Di2015NewLine        {Di2015NewLine            destFile.Write(buffer, 0, byteReadInLastRead);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineSystem.Diagnostics.Process.Start(@"C:\\Documents\\file.docx");Di2015NewLine
15602003Di2015UniqueSeparator var objShell = new ActiveXObject("Shell.Application");Di2015NewLine var strArguments = "";Di2015NewLine var strDirectory = "";Di2015NewLine var strOperation = "open";Di2015NewLine var intShow = 1;Di2015NewLine objShell.ShellExecute(FileLocation, strArguments, strDirectory, strOperation, intShow);Di2015NewLine
15602171Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Reflection.Emit;Di2015NewLineusing System.IO;Di2015NewLineusing System.Diagnostics;Di2015NewLineDi2015NewLinenamespace ILCompileTestDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            const string ASSEMBLY_NAME = "IL_Test";Di2015NewLineDi2015NewLine            AssemblyBuilder assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(Di2015NewLine                new AssemblyName(ASSEMBLY_NAME), AssemblyBuilderAccess.Save);Di2015NewLine            ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(Di2015NewLine                ASSEMBLY_NAME, "test.exe");Di2015NewLine            TypeBuilder typeBuilder = moduleBuilder.DefineType("Program", Di2015NewLine                TypeAttributes.Class | TypeAttributes.Public);Di2015NewLine            MethodBuilder methodBuilder = typeBuilder.DefineMethod(Di2015NewLine                "Main", MethodAttributes.HideBySig|MethodAttributes.Public | MethodAttributes.Static,Di2015NewLine                typeof(void), new Type[] { typeof(string[]) });Di2015NewLine            ILGenerator gen = methodBuilder.GetILGenerator();Di2015NewLineDi2015NewLine            gen.Emit(OpCodes.Ldstr, "Hello, World!");Di2015NewLine            gen.Emit(OpCodes.Call, typeof(Console).GetMethod("WriteLine", new Type[] { typeof(string) }));Di2015NewLine            gen.Emit(OpCodes.Ldc_I4_1);Di2015NewLine            gen.Emit(OpCodes.Call, typeof(Console).GetMethod("ReadKey", new Type[] { typeof(bool) }));Di2015NewLine            typeBuilder.CreateType();Di2015NewLine            assemblyBuilder.SetEntryPoint(methodBuilder, PEFileKinds.ConsoleApplication);Di2015NewLine            File.Delete("test.exe");Di2015NewLine            assemblyBuilder.Save("test.exe");Di2015NewLineDi2015NewLine            Process.Start("test.exe");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15602198Di2015UniqueSeparatorvar client = new HttpClient();Di2015NewLinevar response = await client.GetAsync(uri);Di2015NewLineif (response.IsSuccessStatusCode)Di2015NewLine{Di2015NewLine    Stream stream = null;Di2015NewLine    StorageFolder localFolder = ApplicationData.Current.TemporaryFolder;Di2015NewLine    StorageFile file = await localFolder.CreateFileAsync("savename.htm",Di2015NewLine        CreationCollisionOption.ReplaceExisting);Di2015NewLine    stream = await file.OpenStreamForWriteAsync();Di2015NewLineDi2015NewLine    await response.Content.CopyToAsync(stream);Di2015NewLine
15602296Di2015UniqueSeparatorListCategories
15602296Di2015UniqueSeparatorBlogController
15602296Di2015UniqueSeparatorCategoryController
15602296Di2015UniqueSeparatorViewBag
15602296Di2015UniqueSeparatorpublic ActionResult ListCategories()Di2015NewLine{Di2015NewLine    ViewBag.Categories = db.Categories;Di2015NewLine}Di2015NewLine
15602296Di2015UniqueSeparator@foreach
15602296Di2015UniqueSeparatorListCategories.cshtml
15602296Di2015UniqueSeparator<h2>Categories</h2>Di2015NewLine<hr/>Di2015NewLine<p>Di2015NewLine    @foreach(Category c in ViewBag.Categories)Di2015NewLine    {Di2015NewLine        <a href="@Url.Action("Category", "Blog", new { id = c.Id })">@c.Name</a><br/>Di2015NewLine    }Di2015NewLine</p>Di2015NewLine
15602296Di2015UniqueSeparator_Layout.cshtml
15602296Di2015UniqueSeparator@Html.Action("ListCategories") Di2015NewLine// or @Html.Action("ListCategories", "CategoryController")Di2015NewLine
15602488Di2015UniqueSeparatorupdate
15602488Di2015UniqueSeparatorcmd.CommandText = "UPDATE [LoginLogTable] SET [LoggedInDate] = ?, [LoggedInTime] = ? where UserName = ?";Di2015NewLinecmd.Parameters.AddWithValue("LoggedInDate", DateTime.Now.ToShortDateString());Di2015NewLinecmd.Parameters.AddWithValue("LoggedInTime", DateTime.Now.ToString("HH:mm"));Di2015NewLinecmd.Parameters.AddWithValue("UserName", txtUserName.Text);Di2015NewLine
15602642Di2015UniqueSeparatorFillContainsWithDetail
15602642Di2015UniqueSeparatorvar intersectionDetail = path1.Data.FillContainsWithDetail(path2.Data);Di2015NewLineDi2015NewLineif (intersectionDetail != IntersectionDetail.NotCalculated &&Di2015NewLine    intersectionDetail != IntersectionDetail.Empty)Di2015NewLine{Di2015NewLine    // collisionDi2015NewLine}Di2015NewLine
15602944Di2015UniqueSeparatorTotal
15602944Di2015UniqueSeparatorTotal
15603100Di2015UniqueSeparatorpublic static void playerOne(int cardOne, int cardTwo)Di2015NewLine
15603100Di2015UniqueSeparatorcards.playerOne();Di2015NewLine
15603100Di2015UniqueSeparatorpublic static void playerOne(int cardOne, int cardTwo)Di2015NewLine{Di2015NewLine    Console.WriteLine(cardOne);Di2015NewLine    Console.WriteLine(cardTwo);Di2015NewLine}Di2015NewLine
15603100Di2015UniqueSeparatorpublic static void playerOne()Di2015NewLine{Di2015NewLine    Console.WriteLine(cardOne);Di2015NewLine    Console.WriteLine(cardTwo);Di2015NewLine}Di2015NewLine
15603137Di2015UniqueSeparatorHashSet<T>
15603137Di2015UniqueSeparatorpublic class StorageDi2015NewLine{Di2015NewLine   private HashSet<Key> set;Di2015NewLineDi2015NewLine   public Storage()Di2015NewLine   {Di2015NewLine      set = new HashSet<Key>(new Key.Comparer());Di2015NewLine   }Di2015NewLineDi2015NewLine   public void Add(string a, string b)Di2015NewLine   {Di2015NewLine      set.Add(new Key{A=a, B=b});Di2015NewLine   }Di2015NewLineDi2015NewLine   public bool Contains(string a, string b)Di2015NewLine   {Di2015NewLine      return set.Contains(new Key{A=a, B=b});Di2015NewLine   }Di2015NewLineDi2015NewLine   internal class KeyDi2015NewLine   {Di2015NewLine       internal String A { get; set; }Di2015NewLine       internal String B { get; set; }Di2015NewLine       internal class Comparer : IEqualityComparer<Key>Di2015NewLine       {Di2015NewLine          public bool Equals(Key x, Key y)Di2015NewLine          {Di2015NewLine             return (x.A == y.A && x.B == y.B) || (x.A == y.B && x.B == y.A);Di2015NewLine          }Di2015NewLine          public int GetHashCode(Key k)Di2015NewLine          {Di2015NewLine             int aHash = k.A.GetHashCode();Di2015NewLine             int bHash = k.B.GetHashCode();Di2015NewLine             // Hash for (x,y) same as hash for (y,x)Di2015NewLine             if (aHash > bHash)Di2015NewLine                return bHash * 37 + aHash;Di2015NewLine             return aHash * 37 + bHash;Di2015NewLine          }Di2015NewLine       }Di2015NewLine   }Di2015NewLineDi2015NewLine}Di2015NewLine
15603179Di2015UniqueSeparatorDatabase.SetInitializer<Context>(new Initializer());Di2015NewLineDatabase.SetInitializer(new DropCreateDatabaseIfModelChanges<Context>());Di2015NewLine
15603179Di2015UniqueSeparatorDatabase.SetInitializer(new DropCreateDatabaseAlways<Context>());Di2015NewLine
15603179Di2015UniqueSeparatorDatabase.SetInitializer<Context>(new Initializer());Di2015NewLine
15603500Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace TestLocationDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0}", Assembly.GetExecutingAssembly().Location);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15603570Di2015UniqueSeparatorpublic virtual TwitterEntities EntitiesDi2015NewLine
15603570Di2015UniqueSeparatorpublic class TwitterEntities : IEnumerable<TwitterEntity>Di2015NewLine
15603673Di2015UniqueSeparatorT
15603673Di2015UniqueSeparatorobject
15603673Di2015UniqueSeparatorIList<object>
15603673Di2015UniqueSeparatorList<Brand>
15603673Di2015UniqueSeparatorList<T>
15603673Di2015UniqueSeparatorList<object>
15603673Di2015UniqueSeparatorList<Brand>
15603673Di2015UniqueSeparatorT
15603673Di2015UniqueSeparatorswitch
15603673Di2015UniqueSeparatorobject
15603673Di2015UniqueSeparatorprivate List<T> ConvertToList<T>(Category cat)Di2015NewLine{            Di2015NewLine    switch (cat)Di2015NewLine    {Di2015NewLine        case Category.Brands:Di2015NewLine            return (List<T>)(object)collection.Brands.ToList<Brand>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15603673Di2015UniqueSeparatorT
15603673Di2015UniqueSeparatorT
15603673Di2015UniqueSeparatorprivate List<Brand> ConvertToBrandList()Di2015NewLine{Di2015NewLine    return collection.Brands.ToList<Brand>();Di2015NewLine}Di2015NewLine
15603673Di2015UniqueSeparatorConvertToList<int>(Category.Brands)
15603778Di2015UniqueSeparatorItemsSwapped
15603778Di2015UniqueSeparatorprivate void Render(object sender, ItemsSwapEventArgs e)Di2015NewLine{Di2015NewLine    Dispatcher.Invoke((Action)(() =>Di2015NewLine        {Di2015NewLine            canvas.Children.Clear();Di2015NewLine            int numberOfElements = e.Data.Length;Di2015NewLineDi2015NewLine            for (int x = 0; x < numberOfElements; x++)Di2015NewLine            {Di2015NewLine                RenderValue(x, e.Data[x]);Di2015NewLine            }Di2015NewLine        }));Di2015NewLine}Di2015NewLine
15603873Di2015UniqueSeparatorServiceProxy1
15603873Di2015UniqueSeparatorServiceClient1
15603873Di2015UniqueSeparatorServiceClient1 : IServiceProxyFactory<ServiceClient1>
15603873Di2015UniqueSeparatorpublic interface IServiceProxyFactory<T>Di2015NewLine{Di2015NewLine    // can have a better name like SetCredentials()Di2015NewLine    T GetServiceProxy();Di2015NewLine}Di2015NewLineDi2015NewLine// Got rid of ServiceProxy1 classDi2015NewLinepublic partial class ServiceClient1 : IServiceProxyFactory<ServiceClient1>Di2015NewLine{Di2015NewLine    public ServiceClient1 GetServiceProxy()Di2015NewLine    {Di2015NewLine        var client = this;Di2015NewLine        // set credentials hereDi2015NewLine        //client.ClientCredentials = "";Di2015NewLine        return client;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class ServiceClient2 : IServiceProxyFactory<ServiceClient2> { ... } Di2015NewLineDi2015NewLinepublic static class ServiceMod<TClient>Di2015NewLine    where TClient : class, ICommunicationObject, IServiceProxyFactory<TClient>, new()Di2015NewLine{Di2015NewLine    public static TReturn Use<TReturn>(Func<TClient, TReturn> codeBlock)Di2015NewLine    {Di2015NewLine        TClient client = default(TClient);Di2015NewLine        bool success = false;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            client = new TClient().GetServiceProxy();Di2015NewLine            TReturn result = codeBlock(client);Di2015NewLine            client.Close();Di2015NewLine            success = true;Di2015NewLine            return result;Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            if (!success)Di2015NewLine            {Di2015NewLine                client.Abort();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15603873Di2015UniqueSeparatorService<ServiceClient1>.Use(svc => svc.Method());Di2015NewLine
15603876Di2015UniqueSeparator$tabcontrol1.SelectTab(0)Di2015NewLine
15603876Di2015UniqueSeparator$control1ToolStripMenuItem.add_Click($control1ToolStripMenuItem_OnClick)Di2015NewLine$control2ToolStripMenuItem.add_Click($control2ToolStripMenuItem_OnClick)Di2015NewLine
15603876Di2015UniqueSeparatorGenerated Form Code
15603876Di2015UniqueSeparator$control1ToolStripMenuItem_OnClick=Di2015NewLine{Di2015NewLine    $tabcontrol1.SelectTab(0)  Di2015NewLine}Di2015NewLineDi2015NewLine$control2ToolStripMenuItem_OnClick=Di2015NewLine{Di2015NewLine    $tabcontrol1.SelectTab(1)  Di2015NewLine}Di2015NewLine
15604098Di2015UniqueSeparatorItem
15604098Di2015UniqueSeparator    private void Button_ItemDetail(object sender, RoutedEventArgs e)Di2015NewLine        var fe = (FrameworkElement)sender;Di2015NewLine        var item = (Item)fe.DataContext;Di2015NewLine        var id = item.Id; // <-------------- id is in the variable idDi2015NewLine    }Di2015NewLine
15604098Di2015UniqueSeparator    private void Button_ItemDetail(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        Button b = (Button)sender;Di2015NewLine        var tb = (TextBlock)b.FindName("IdTextBox");Di2015NewLine        var id = tb.Text; // <-------------- id is in the variable idDi2015NewLine    }Di2015NewLine
15604348Di2015UniqueSeparatorMyAppBaseDi2015NewLine src/Di2015NewLine build/Di2015NewLine BaseAndroidManifest.xmlDi2015NewLine ...Di2015NewLine config/Di2015NewLine   customerA/Di2015NewLine      logo.pngDi2015NewLine      customerA.xmlDi2015NewLine      customerA.propertiesDi2015NewLine   customerB/Di2015NewLine   customerC/Di2015NewLine   ...Di2015NewLine
15604348Di2015UniqueSeparator<copy todir="src_${customer}">Di2015NewLine  <fileset dir="src"/>Di2015NewLine</copy>Di2015NewLine
15604348Di2015UniqueSeparator<!-- Rename main package -->Di2015NewLine<move file="src_${customer}/ch/wizche/myapp" tofile="src_${customer}/ch/wizche/${customer}"/>Di2015NewLine<!-- Replace package imports with the newly one -->Di2015NewLine<replace dir="src_${customer}/" value="ch.wizche.${customer}">Di2015NewLine  <include name="**/*.java"/>Di2015NewLine  <replacetoken>ch.wizche.myapp</replacetoken>Di2015NewLine</replace>Di2015NewLine
15604348Di2015UniqueSeparator<!-- Copy images icon to the drawable folder -->Di2015NewLine<copy file="./configs/${customer}/ic_launcher_l.png" tofile="./res/drawable-ldpi/ic_launcher.png" overwrite="true" verbose="true"/>Di2015NewLine<copy file="./configs/${customer}/ic_launcher_m.png" tofile="./res/drawable-mdpi/ic_launcher.png" overwrite="true" verbose="true"/>Di2015NewLine
15604348Di2015UniqueSeparator <copy file="./BaseAndroidManifest.xml" tofile="./AndroidManifest.xml" overwrite="true" verbose="true"/>Di2015NewLine <replace file="./AndroidManifest.xml" value="ch.wizche.${customer}" token="ch.wizche.myapp"/>Di2015NewLine <replace file="./AndroidManifest.xml" value="android:versionCode="${versionCode}" token="android:versionCode="1"/>Di2015NewLine
15604348Di2015UniqueSeparatormvn install -Dcustomer=customerA -P releaseDi2015NewLine
15604569Di2015UniqueSeparator.sdf
15604569Di2015UniqueSeparatorSqlCeConnection
15604569Di2015UniqueSeparatorSqlCeCommand
15604569Di2015UniqueSeparatorconnectionString
15604569Di2015UniqueSeparatorstring connectionString ="data source=physical path to .sdf file; Di2015NewLine                         password=pwdThtUSet; persist security info=True";Di2015NewLineDi2015NewLineusing (SqlCeConnection yourConnection = new SqlCeConnection(connectionString))Di2015NewLine{Di2015NewLine       ....your logicDi2015NewLine}Di2015NewLine
15604569Di2015UniqueSeparatorlike
15604569Di2015UniqueSeparator     string query = "SELECT * FROM tbl_employees where Username ='" + textBox1.Text + "' AND Password ='" + textBox2.Text +"'";Di2015NewLine      SqlCeDataAdapter dA = new SqlCeDataAdapter(query, yourConnection);Di2015NewLine      DataTable dt = new DataTable();Di2015NewLine      dA.Fill(dt);Di2015NewLineDi2015NewLine      if(dt.Rows.Count>0)Di2015NewLine      {Di2015NewLine          this.Hide();Di2015NewLine          Form2 secondForm = new Form2();Di2015NewLine          secondForm.ShowDialog();Di2015NewLine      }Di2015NewLine
15604734Di2015UniqueSeparator int minScore = 0;Di2015NewLine int maxScore = 0;Di2015NewLine
15604734Di2015UniqueSeparator int minScore = int.MaxValue;Di2015NewLine int maxScore = int.MinValue;Di2015NewLine
15604796Di2015UniqueSeparator        TreeNode root = new TreeNode("Registered");Di2015NewLine        root.Expand();Di2015NewLine        ds.Relations.Add("Regsd", ds.Tables["tRegistered"].Columns["pDate"], ds.Tables["tRegistered"].Columns["pDate"]);Di2015NewLine        foreach (DataRow dr in ds.Tables["tRegistered"].Rows)Di2015NewLine        {Di2015NewLineDi2015NewLine            DateTime dt = Convert.ToDateTime(dr["pDate"]);Di2015NewLine            TreeNode tn = new TreeNode(String.Format("{0:dd-MMM-yyyy}", dt));Di2015NewLine            tn.Expand();Di2015NewLineDi2015NewLine            foreach (DataRow drChild in dr.GetChildRows("Regsd"))Di2015NewLine            {Di2015NewLineDi2015NewLine                TreeNode childTn = new TreeNode(drChild["pId"].ToString() + "- " + drChild["pName"].ToString());Di2015NewLine                childTn.Tag = drChild["pId"];Di2015NewLine                childTN.Expand();Di2015NewLine                tn.Nodes.Add(childTn);Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine            root.Nodes.Add(tn);Di2015NewLine            //root.Expand();      Di2015NewLine        }Di2015NewLine        TreeView1.BeginUpdate();Di2015NewLine        TreeView1.Nodes.Add(root);      //Hard codeDi2015NewLine        TreeView1.EndUpdate();Di2015NewLine
15604879Di2015UniqueSeparatorPublic class MyValuesDi2015NewLine{Di2015NewLine  public string valueA { get; set; }Di2015NewLine  public string valueB { get; set; }Di2015NewLine  public string valueC { get; set; }Di2015NewLine}Di2015NewLine
15604879Di2015UniqueSeparator public List<MyValues> GetInfo()Di2015NewLine   {Di2015NewLine   List<MyValues> listValue=new List<MyValues>();Di2015NewLineDi2015NewLine   // Now here make myValue object and add them into listValue and then returnDi2015NewLine   return listValue;Di2015NewLine   }Di2015NewLine
15604879Di2015UniqueSeparatorList<MyValues> values=GetInfo();Di2015NewLineforeach(MyValue val in values)Di2015NewLine{Di2015NewLine   datagridviewrow.Row.Add(val.ValueA,val.ValueB,val.ValueC)Di2015NewLine}Di2015NewLine
15604879Di2015UniqueSeparator    public List<string> GetInfo()Di2015NewLine    {Di2015NewLine       List<string> myValues=new List<string>{a,b,c}Di2015NewLine       return myValuesDi2015NewLine    }Di2015NewLine
15604879Di2015UniqueSeparatorList<string> rowsValues=GetInfo();Di2015NewLinedatagridview.Rows.Add(rowValues[0],rowValues[1], rowValues[2])Di2015NewLine
15604917Di2015UniqueSeparatorIntPtr pointer = Marshal.AllocHGlobal(1024);Di2015NewLine
15604917Di2015UniqueSeparatorint size = Marshal.SizeOf(typeof(IntPtr));Di2015NewLineIntPtr pointer = Marshal.AllocHGlobal(size);Di2015NewLine
15604917Di2015UniqueSeparatorunsafe code
15604917Di2015UniqueSeparatorProperties
15604917Di2015UniqueSeparatorBuild
15604917Di2015UniqueSeparatorAllow unsafe code
15605028Di2015UniqueSeparatorresult = Task<string>.Factory.FromAsync(Di2015NewLine                instance.BeginGetMyNumber("foo", "bar", "bat", 1, null, null),Di2015NewLine                instance.EndGetMyNumber);Di2015NewLine
15605293Di2015UniqueSeparatorSELECT
15605293Di2015UniqueSeparator'
15605293Di2015UniqueSeparatorvar query = "INSERT INTO OrdersDetail Values (" + OrderId.Text + ", (SELECT IdProduct FROM Products WHERE ProductName = '"+ listBox1.Text + "'), '" + TypeOfProductComboBox.Text + "', '" + OrderQuantity.TextAlign + "', '" + TotalCost.Text + "')");Di2015NewLine
15605293Di2015UniqueSeparatorTotalCost.Text
15605293Di2015UniqueSeparator"..." + OrderQuantity.TextAlign + "', " + Convert.ToDouble(TotalCost.Text) + ")";Di2015NewLine
15605328Di2015UniqueSeparatorForm2 frm = new Form2();Di2015NewLinefrm.chkBox1.CheckedChanged += new EventHandler(this.ReceiveCheckedChanged);Di2015NewLinefrm2.ShowDialog();Di2015NewLine
15605328Di2015UniqueSeparatorprivate void ReceiveCheckedChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   CheckBox chk = sender as CheckBox;Di2015NewLine   if(chk.Checked)Di2015NewLine       this.label1.Text = "Checked";Di2015NewLine   elseDi2015NewLine       this.label1.Text = "UnChecked";Di2015NewLine}Di2015NewLine
15605328Di2015UniqueSeparatorModifiers
15605328Di2015UniqueSeparatorPrivate
15605328Di2015UniqueSeparatorPublic
15605586Di2015UniqueSeparator.Select()
15605586Di2015UniqueSeparatorvar agencyContracts = _agencyContractsRepository.AgencyContractsDi2015NewLine    .GroupBy(ac => newDi2015NewLine                   {Di2015NewLine                       ac.AgencyContractID,Di2015NewLine                       ac.AgencyID,Di2015NewLine                       ac.VendorID,Di2015NewLine                       ac.RegionIDDi2015NewLine                   })Di2015NewLine    .Select(ac => new AgencyContractViewModelDi2015NewLine                   {Di2015NewLine                       AgencyContractId = ac.AgencyContractID,Di2015NewLine                       AgencyId = ac.AgencyID,Di2015NewLine                       VendorId = ac.VendorID,Di2015NewLine                       RegionId = ac.RegionID,Di2015NewLine                       Amount = ac.Sum(acs => acs.Amount),Di2015NewLine                       Fee = ac.Sum(acs => acs.Fee)Di2015NewLine                   });Di2015NewLine
15605657Di2015UniqueSeparator  CityComboBoxEmp.DataSource = CityShow.UseSqlCommand("Select * From City").Tables[0];Di2015NewLine
15605700Di2015UniqueSeparatorIDisposable
15605700Di2015UniqueSeparatorIDisposable
15605700Di2015UniqueSeparatorusing
15605700Di2015UniqueSeparatortry/finally
15605700Di2015UniqueSeparatorDispose()
15605700Di2015UniqueSeparatorIDisposable
15605700Di2015UniqueSeparatorDispose()
15605700Di2015UniqueSeparatorDispose()
15605700Di2015UniqueSeparatorIDisposable
15605854Di2015UniqueSeparatorprivate Dictionary<Properties,String> PropertyToString = EnumDi2015NewLine    .GetValues(typeof(Properties))Di2015NewLine    .Cast<Properties>().Di2015NewLine    .ToDictionary(v => v, v => Enum.GetName(typeof(Properties), v));Di2015NewLineDi2015NewLineprivate Dictionary<String,Properties> StringToProperty = EnumDi2015NewLine    .GetValues(typeof(Properties))Di2015NewLine    .Cast<Properties>().Di2015NewLine    .ToDictionary(v => Enum.GetName(typeof(Properties), v), v => v);Di2015NewLine
15605854Di2015UniqueSeparatorPropertyToString
15605854Di2015UniqueSeparatorString MySResult = Enum.GetName(typeof(Proeprties), Properties.One);Di2015NewLine
15606052Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential)]Di2015NewLinepublic struct Info : IDisposableDi2015NewLine{Di2015NewLine    private IntPtr buf;Di2015NewLine    private int bufLen;Di2015NewLineDi2015NewLine    public Info(byte[] buf) : this() {Di2015NewLine        this.buf = Marshal.AllocHGlobal(buf.Length);Di2015NewLine        Marshal.Copy(buf, 0, this.buf, buf.Length);Di2015NewLine        this.bufLen = buf.Length;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose() {Di2015NewLine        if (buf != IntPtr.Zero) {Di2015NewLine            Marshal.FreeHGlobal(buf);Di2015NewLine            buf= IntPtr.Zero;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15606216Di2015UniqueSeparatorRegistryKey.DeleteSubKeyTree
15606216Di2015UniqueSeparatorusing(RegistryKey regkey = Registry.CurrentUser.OpenSubKey(@"Software\\Policies\\", true))Di2015NewLine{Di2015NewLineDi2015NewLine    if (regkey.OpenSubKey("Google") != null)Di2015NewLine    {Di2015NewLine        regkey.DeleteSubKeyTree("Google");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15606533Di2015UniqueSeparatorDocument oldDoc = itemToReplyTo.GetInspector.WordEditor;Di2015NewLineDocument newDoc = newMailItem.GetInspector.WordEditor;Di2015NewLineDi2015NewLineif (oldDoc != null)Di2015NewLine{Di2015NewLine    Microsoft.Office.Interop.Word.Selection oldSelect = oldDoc.Windows[1].Selection;Di2015NewLine    Microsoft.Office.Interop.Word.Selection newSelect = newDoc.Windows[1].Selection;Di2015NewLineDi2015NewLine    oldSelect.Find.Execute("From:");Di2015NewLine    oldSelect.Collapse(WdCollapseDirection.wdCollapseStart);Di2015NewLine    oldSelect.MoveEnd(WdUnits.wdStory, 1);Di2015NewLine    oldSelect.Copy();Di2015NewLineDi2015NewLine    newSelect.Move(WdUnits.wdStory, 1);Di2015NewLine    newSelect.InlineShapes.AddHorizontalLineStandard();Di2015NewLine    newSelect.Paste();Di2015NewLine    newSelect.Move(WdUnits.wdStory, -1);Di2015NewLine    newSelect.InsertAfter("Reply Text here");Di2015NewLine    newSelect.Find.ClearFormatting();Di2015NewLine    newSelect.Find.Execute(mailItem.SenderEmailAddress);Di2015NewLine}Di2015NewLine
15606907Di2015UniqueSeparatorPatial
15606907Di2015UniqueSeparator@Html.Partial("_Comments", Model.Comments)Di2015NewLine
15606907Di2015UniqueSeparatorCommentController
15606907Di2015UniqueSeparatorAction List(int blogId)Di2015NewLine{Di2015NewLine    // query comments from databaseDi2015NewLine    var model = db.Comments.Where(c => c.BlogId == blogId);Di2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
15606907Di2015UniqueSeparator/Blog/Details.cshtml
15606907Di2015UniqueSeparator@Html.Action("List", "Comment", new { blogId = Model.Id })Di2015NewLine
15606914Di2015UniqueSeparatorIEnumerable<Interaction> matchingInteractions = interactions.Where(Di2015NewLine    i => (i.day==action.day && i.scene == action.scene)Di2015NewLine);Di2015NewLine
15606914Di2015UniqueSeparatorWhere
15606914Di2015UniqueSeparatorIEnumerable
15606914Di2015UniqueSeparatorFirst
15606914Di2015UniqueSeparatorInteraction firstInteraction = interactions.First(Di2015NewLine    i => (i.day==action.day && i.scene == action.scene)Di2015NewLine);Di2015NewLine
15606914Di2015UniqueSeparatorSingle
15606979Di2015UniqueSeparator    [Export(typeof(IShell))]Di2015NewLine    public class MainViewModel : ScreenDi2015NewLine    {Di2015NewLine        public string Path{ get; set; }Di2015NewLineDi2015NewLine        [Import]Di2015NewLine        IWindowManager WindowManager {get; set;}Di2015NewLineDi2015NewLine        public void Open()Di2015NewLine        {Di2015NewLine            OpenFileDialog fd = new OpenFileDialog();Di2015NewLine            fd.Filter = "Text|*.txt|All|*.*";Di2015NewLine            fd.FilterIndex = 1;Di2015NewLineDi2015NewLine            fd.ShowDialog();Di2015NewLineDi2015NewLine            Path= fd.FileName;Di2015NewLine            NotifyOfPropertyChange("Path");Di2015NewLineDi2015NewLine            WindowManager.ShowWindow(new BViewModel(), null, null);Di2015NewLine        }    Di2015NewLine    }Di2015NewLine
15607003Di2015UniqueSeparatorint
15607003Di2015UniqueSeparatoruint
15607003Di2015UniqueSeparatorlong
15607003Di2015UniqueSeparatorint
15607003Di2015UniqueSeparatorlong
15607003Di2015UniqueSeparatorint
15607003Di2015UniqueSeparatorlong
15607003Di2015UniqueSeparatorConsole.WriteLine(new BigInteger(2466250752) << 1);Di2015NewLine// output is 4932501504Di2015NewLine
15607003Di2015UniqueSeparatorConsole.WriteLine(new BigInteger(2466250752) << 1000);Di2015NewLine// output is 26426089082476043843620786304598663584184261590451906619194221930186703343408641580508146166393907795104656740341094823575842096015719243506448572304002696283531880333455226335616426281383175835559603193956495848019208150304342043576665227249501603863012525070634185841272245152956518296810797380454760948170752Di2015NewLine
15607023Di2015UniqueSeparatorMemoryamappedViewAccessors
15607101Di2015UniqueSeparatorvoid
15607101Di2015UniqueSeparatorAction
15607101Di2015UniqueSeparatorprivate Action State1() {Di2015NewLineÂ  Â  if( ... )Di2015NewLineÂ  Â  Â  Â  return State1Inner;Di2015NewLineÂ  Â  elseDi2015NewLineÂ  Â  Â  Â  return State2Inner;Di2015NewLine}Di2015NewLine
15607101Di2015UniqueSeparatorpublic delegate State<T> State<T>(T input);Di2015NewLineDi2015NewLineprivate State<int> State1(int input) {Di2015NewLineÂ  Â  if( ... )Di2015NewLineÂ  Â  Â  Â  return State1;Di2015NewLineÂ  Â  elseDi2015NewLineÂ  Â  Â  Â  return State2;Di2015NewLine}Di2015NewLine
15607293Di2015UniqueSeparatorX
15607293Di2015UniqueSeparatorY
15607293Di2015UniqueSeparatorToExactLocation
15607293Di2015UniqueSeparatorX
15607293Di2015UniqueSeparatorY
15607293Di2015UniqueSeparatorExactLocation
15607293Di2015UniqueSeparatorScreenLocation
15607293Di2015UniqueSeparatorsomeScreenLocation
15607293Di2015UniqueSeparatorToExactLocation
15607293Di2015UniqueSeparatorstruct PointDi2015NewLine{Di2015NewLine    int X;Di2015NewLine    int Y;Di2015NewLine    bool Mutate() { X++; Y++; }Di2015NewLine}Di2015NewLineDi2015NewLineclass FooDi2015NewLine{Di2015NewLine    public readonly Point P;Di2015NewLine    Foo() Di2015NewLine    { Di2015NewLine        P = new Point();Di2015NewLine        P.Mutate();  // impure function on readonly value typeDi2015NewLine    }Di2015NewLine}Di2015NewLine
15607293Di2015UniqueSeparatorMutate()
15607293Di2015UniqueSeparatorP
15607293Di2015UniqueSeparatorP
15607328Di2015UniqueSeparatorEventLog
15607328Di2015UniqueSeparatorServiceInstaller
15607328Di2015UniqueSeparatorEventLog
15607328Di2015UniqueSeparatorMy GBBServiceLog
15607328Di2015UniqueSeparatorif (installer != null)Di2015NewLine{Di2015NewLine    installer.Source = eventSource;Di2015NewLine    installer.Log = "My GBBServiceLog";Di2015NewLine}Di2015NewLine
15607328Di2015UniqueSeparatorService
15607328Di2015UniqueSeparatorMy GBB Service Log
15607328Di2015UniqueSeparatorpublic GBBService()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    EventLog.Source = eventSource;Di2015NewLine    EventLog.Log = "My GBB Service Log"; <--------------Di2015NewLine}Di2015NewLine
15607328Di2015UniqueSeparatorpublic GBBService()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    EventLog.Source = eventSource;Di2015NewLine    EventLog.Log = "My GBBServiceLog";Di2015NewLine}Di2015NewLine
15607385Di2015UniqueSeparator<Target Name="BeforePublish" BeforeTargets="MSDeployPublish">Di2015NewLine  <Exec Command="D:\\Pre.bat" />Di2015NewLine</Target>Di2015NewLine<Target Name="AfterPublish" AfterTargets="MSDeployPublish">Di2015NewLine  <Exec Command="D:\\Post.bat" />Di2015NewLine</Target>Di2015NewLine
15607548Di2015UniqueSeparatorGO
15607548Di2015UniqueSeparatorExecuteSql
15607586Di2015UniqueSeparatorwhere T : class, new()
15607586Di2015UniqueSeparatornew()
15607586Di2015UniqueSeparatorPermission Controller
15607693Di2015UniqueSeparatorTimespan.Parse
15607693Di2015UniqueSeparatorDays:Hours:Minutes
15607693Di2015UniqueSeparatorHours
15607693Di2015UniqueSeparatorTimespan.Parse
15607786Di2015UniqueSeparator//STORED PROCEDURE PARAMETERSDi2015NewLinecmd.Parameters.AddWithValue("@OpenDate", OpenDate);Di2015NewLinecmd.Parameters.AddWithValue("@Broker", broker);Di2015NewLinecmd.Parameters.AddWithValue("@Category", category);Di2015NewLine
15607786Di2015UniqueSeparatorbroker = brokerDDL.SelectedValue;Di2015NewLinecategory = categoryDDL.SelectedValue;Di2015NewLineralGridView.DataSource = CreateRecentlyAddedTable();Di2015NewLineralGridView.DataBind();Di2015NewLine
15607914Di2015UniqueSeparator&&
15607914Di2015UniqueSeparator&
15607914Di2015UniqueSeparatorif (chk != null & chk.Checked)Di2015NewLine
15607914Di2015UniqueSeparatorif (chk != null && chk.Checked)Di2015NewLine
15607914Di2015UniqueSeparatorif(!Page.IsPostBack)Di2015NewLine{Di2015NewLine       //bind hereDi2015NewLine} Di2015NewLine
15607991Di2015UniqueSeparatordesigner.cs
15608138Di2015UniqueSeparatorFINDSTRING(@[System::ErrorDescription], "at", 1)
15608138Di2015UniqueSeparator-1
15608138Di2015UniqueSeparatorFINDSTRING(@[System::ErrorDescription], "at", 1)==0Di2015NewLine   ?Di2015NewLine"Nothing Found"Di2015NewLine   :Di2015NewLineSUBSTRING(Di2015NewLine    @[System::ErrorDescription], Di2015NewLine    1, Di2015NewLine    FINDSTRING(@[System::ErrorDescription], "at", 1)-1Di2015NewLine)Di2015NewLine
15608238Di2015UniqueSeparator__doPostBack
15608238Di2015UniqueSeparatorvar orignalDoPostback = __doPostBack;Di2015NewLinevar lastEventArgument = "";Di2015NewLine__doPostBack = function(eventTarget, eventArgument)Di2015NewLine{Di2015NewLine   lastEventArgument = eventArgument;Di2015NewLine   orignalDoPostback(eventTarget, eventArgument);Di2015NewLine}Di2015NewLine
15608297Di2015UniqueSeparator0x
15608297Di2015UniqueSeparatord
15608297Di2015UniqueSeparatorprivate void ContactNumTextBox_KeyPress(object sender, KeyPressEventArgs e)Di2015NewLine{Di2015NewLine    const char hyphen = (char)0x2D;Di2015NewLine    const char delete = (char)0x08;Di2015NewLine    if (!char.IsNumber(e.KeyChar) && e.KeyChar != hyphen && e.KeyChar!= delete)Di2015NewLine        e.Handled = true; Di2015NewLine}Di2015NewLine
15608301Di2015UniqueSeparator?
15608301Di2015UniqueSeparatorcondition ? first_expression : second_expression;Di2015NewLine
15608301Di2015UniqueSeparatorpublic int StnNo = Convert.ToInt32(lst[3].ToString() == string.Empty ? 0 : Convert.ToInt32(lst[3].ToString()));Di2015NewLine
15608301Di2015UniqueSeparatorpublic int StnNo;Di2015NewLineif (lst[3].ToString() == string.Empty)Di2015NewLine{Di2015NewLine    StnNo = 0;Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    StnNo = Convert.ToInt32(lst[3].ToString());Di2015NewLine}Di2015NewLine
15608505Di2015UniqueSeparatorSystem.DirectoryServices.AccountManagement
15608505Di2015UniqueSeparatorUserPrincipal
15608505Di2015UniqueSeparatorManager
15608505Di2015UniqueSeparatorUserPrincipal
15608505Di2015UniqueSeparator[DirectoryRdnPrefix("CN")]Di2015NewLine[DirectoryObjectClass("Person")]Di2015NewLinepublic class UserPrincipalEx : UserPrincipalDi2015NewLine{Di2015NewLine    // Inplement the constructor using the base class constructor. Di2015NewLine    public UserPrincipalEx(PrincipalContext context) : base(context)Di2015NewLine    { }Di2015NewLineDi2015NewLine    // Implement the constructor with initialization parameters.    Di2015NewLine    public UserPrincipalEx(PrincipalContext context,Di2015NewLine                         string samAccountName,Di2015NewLine                         string password,Di2015NewLine                         bool enabled) : base(context, samAccountName, password, enabled)Di2015NewLine    {} Di2015NewLineDi2015NewLine    // Create the "Department" property.    Di2015NewLine    [DirectoryProperty("department")]Di2015NewLine    public string DepartmentDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (ExtensionGet("department").Length != 1)Di2015NewLine                return string.Empty;Di2015NewLineDi2015NewLine            return (string)ExtensionGet("department")[0];Di2015NewLine        }Di2015NewLine        set { ExtensionSet("department", value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Create the "Manager" property.    Di2015NewLine    [DirectoryProperty("manager")]Di2015NewLine    public string ManagerDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (ExtensionGet("manager").Length != 1)Di2015NewLine                return string.Empty;Di2015NewLineDi2015NewLine            return (string)ExtensionGet("manager")[0];Di2015NewLine        }Di2015NewLine        set { ExtensionSet("manager", value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Implement the overloaded search method FindByIdentity.Di2015NewLine    public static new UserPrincipalEx FindByIdentity(PrincipalContext context, string identityValue)Di2015NewLine    {Di2015NewLine        return (UserPrincipalEx)FindByIdentityWithType(context, typeof(UserPrincipalEx), identityValue);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Implement the overloaded search method FindByIdentity. Di2015NewLine    public static new UserPrincipalEx FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue)Di2015NewLine    {Di2015NewLine        return (UserPrincipalEx)FindByIdentityWithType(context, typeof(UserPrincipalEx), identityType, identityValue);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15608505Di2015UniqueSeparatorUserPrincipalEx
15608505Di2015UniqueSeparatorusing (PrincipalContext ctx = new PrincipalContext(ContextType.Domain))Di2015NewLine{Di2015NewLine    // Search the directory for the new object. Di2015NewLine    UserPrincipalEx inetPerson = UserPrincipalEx.FindByIdentity(ctx, IdentityType.SamAccountName, "someuser");Di2015NewLineDi2015NewLine    // you can easily access the Manager or Department nowDi2015NewLine    string department = inetPerson.Department;Di2015NewLine    string manager = inetPerson.Manager;Di2015NewLine}        Di2015NewLine
15608526Di2015UniqueSeparatorArrayList commonColumns = new ArrayList();Di2015NewLineDi2015NewLinefor (int iServerColumnCount = 0; iServerColumnCount < oDtSeverData .Columns.Count; iServerColumnCount ++)Di2015NewLine{Di2015NewLine  for (int iLocalColumnCount = 0;Di2015NewLine                             iLocalColumnCount < oDtLocalSystemData .Columns.Count;Di2015NewLine                             iLocalColumnCount ++)Di2015NewLine    {Di2015NewLine      if (oDtSeverData .Columns[iServerColumnCount ].ColumnName.ToString()Di2015NewLine             .Equals(oDtLocalSystemData .Columns[iLocalColumnCount].ColumnName.ToString()))Di2015NewLine      {Di2015NewLine         commonColumns.Add(oDtLocalSystemData .Columns[iLocalColumnCount].ColumnName.ToString());Di2015NewLine      }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDataTable oDtData = CompareTwoDataTable(oDtLocalSystemData, oDtSeverData,commonColumns);Di2015NewLineDi2015NewLinepublic DataTable CompareTwoDataTable(DataTable dtOriginalTable, DataTable dtNewTable, ArrayList columnNames)Di2015NewLine    {Di2015NewLine        DataTable filterTable = new DataTable();Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            filterTable = dtNewTable.Copy();Di2015NewLine            string filterCriterial;Di2015NewLine            if (columnNames.Count > 0)Di2015NewLine            {Di2015NewLine                for (int iNewTableRowCount = 0; iNewTableRowCount < dtNewTable.Rows.Count; iNewTableRowCount++)Di2015NewLine                {Di2015NewLine                    filterCriterial = string.Empty;Di2015NewLine                    foreach (string colName in columnNames.ToArray())Di2015NewLine                    {Di2015NewLineDi2015NewLine                        filterCriterial += "ISNULL("+colName.ToString() + ",'')='" + dtNewTable.Rows[iNewTableRowCount][colName].ToString() + "' AND ";Di2015NewLine                    }Di2015NewLine                    filterCriterial = filterCriterial.TrimEnd((" AND ").ToCharArray());Di2015NewLine                    DataRow[] dr = dtOriginalTable.Select(filterCriterial);Di2015NewLine                    if (dr.Length > 0)Di2015NewLine                    {Di2015NewLine                        filterTable.Rows[filterTable.Rows.IndexOf(filterTable.Select(filterCriterial)[0])].Delete();Di2015NewLine                        filterTable.AcceptChanges();Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        return filterTable;Di2015NewLine    }Di2015NewLine
15608526Di2015UniqueSeparator public bool BulkInsertDataTable(string tableName, DataTable dataTable, string[] commonColumns)Di2015NewLine    {Di2015NewLine        bool isSuccuss;Di2015NewLine        tryDi2015NewLine        {Di2015NewLineDi2015NewLine            SqlConnection SqlConnectionObj = GetSQLConnection();Di2015NewLine            SqlBulkCopy bulkCopy = new SqlBulkCopy(SqlConnectionObj, SqlBulkCopyOptions.TableLock | SqlBulkCopyOptions.FireTriggers | SqlBulkCopyOptions.UseInternalTransaction, null);Di2015NewLine            bulkCopy.DestinationTableName = tableName;Di2015NewLine            bulkCopy.ColumnMappings.Clear();Di2015NewLine            for (int iDtColumnCount = 0; iDtColumnCount < dataTable.Columns.Count; iDtColumnCount++)Di2015NewLine            {Di2015NewLine                for (int iArrCount = 0; iArrCount < commonColumns.Length; iArrCount++)Di2015NewLine                {Di2015NewLine                    if (dataTable.Columns[iDtColumnCount].ColumnName.ToString().Equals(commonColumns[iArrCount].ToString()))Di2015NewLine                    {Di2015NewLine                        bulkCopy.ColumnMappings.Add(dataTable.Columns[iDtColumnCount].ColumnName.ToString(),Di2015NewLine                                                    commonColumns[iArrCount].ToString());Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            bulkCopy.WriteToServer(dataTable);Di2015NewLine            isSuccuss = true;Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            isSuccuss = false;Di2015NewLine        }Di2015NewLine        return isSuccuss;Di2015NewLine    }Di2015NewLine
15608590Di2015UniqueSeparatorp.BeginErrorReadLine();Di2015NewLine
15608668Di2015UniqueSeparatorApplication[ "MyVariable" ] = 123.45f;Di2015NewLine
15608668Di2015UniqueSeparatorApplication[ "ValueList" ] = new List<float>();Di2015NewLine( (List<float>)Application[ "ValueList" ] ).Add( 123.45f );Di2015NewLinefloat myValue = ( (List<float>)Application[ "ValueList" ] )[ 0 ];Di2015NewLine
15608819Di2015UniqueSeparatorinterface ICoolInterface : IReactiveNotifyPropertyChangedDi2015NewLine{Di2015NewLine    /* ... */Di2015NewLine}Di2015NewLine
15608902Di2015UniqueSeparator    SqlDataAdapter da = new SqlDataAdapter(cmdMeasureHist);Di2015NewLine    DataTable dt = new DataTable();Di2015NewLine    da.Fill(dt);Di2015NewLineDi2015NewLine    gvHistory.DataSource = dt;Di2015NewLine    gvHistory.DataBind();Di2015NewLine
15608943Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    blocks = new DataManager().GetBlocks();Di2015NewLineDi2015NewLine    if (!IsPostBack)Di2015NewLine    {Di2015NewLine        DayPilotCalendar1.StartDate = Week.FirstWorkingDayOfWeek(DayPilotNavigator1.SelectionStart);Di2015NewLine        DayPilotCalendar1.Days = 7; Di2015NewLineDi2015NewLine        DayPilotCalendar1.DataSource = new DataManager().GetAssignments(DayPilotCalendar1);Di2015NewLine        DayPilotCalendar1.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15608951Di2015UniqueSeparatorprivate void GridViewSale_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)Di2015NewLine  {Di2015NewLine    if (GridViewSale.CurrentCell.ColumnIndex == 4)//Allow only nums for QTY col.Di2015NewLine          {Di2015NewLine              TextBox Qty = e.Control as TextBox;Di2015NewLine              Qty.KeyDown -= OnlyNums_KeyDown;Di2015NewLine              Qty.KeyDown += OnlyNums_KeyDown;Di2015NewLine          }Di2015NewLine  }Di2015NewLineprivate void GridViewSale_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)Di2015NewLine  {Di2015NewLine     if ((e.KeyValue >= 48 && e.KeyValue <= 57) || (e.KeyValue >= 96 && e.KeyValue <= 105))Di2015NewLine          {Di2015NewLine              //Do NothingDi2015NewLine          }Di2015NewLine          elseDi2015NewLine          {Di2015NewLine              cancelEdit = true;Di2015NewLine              GridViewSale.CellBeginEdit -= GridViewSale_CellBeginEdit;Di2015NewLine              GridViewSale.CellBeginEdit += GridViewSale_CellBeginEdit;Di2015NewLine          }Di2015NewLine      }Di2015NewLineprivate void GridViewSale_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)Di2015NewLine  {Di2015NewLine      if (cancelEdit == true)Di2015NewLine      {Di2015NewLine          e.Cancel = true;Di2015NewLine          cancelEdit = false;Di2015NewLine      }Di2015NewLine  } Di2015NewLine
15609174Di2015UniqueSeparatorvar query = EmployeeList.Where(employee => employee.RolesDi2015NewLine                                                   .Any(role => role.Id == roleID))Di2015NewLine                                                   .ToList();Di2015NewLine
15609447Di2015UniqueSeparatornchar
15609447Di2015UniqueSeparatornvarchar
15609447Di2015UniqueSeparatorstring sql = "insert into myTable(Name) values ('" + name + "')";Di2015NewLine
15609504Di2015UniqueSeparatordatetime
15609504Di2015UniqueSeparator string strDateStarted = "19-MAR-13 08.13.27 AM";Di2015NewLine DateTime datDateStarted;Di2015NewLine DateTime.TryParseExact(strDateStarted, new string[] { "dd-MMM-yy hh.mm.ss tt" }, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out datDateStarted);Di2015NewLine Console.WriteLine(datDateStarted);Di2015NewLine
15609508Di2015UniqueSeparatorStream
15609508Di2015UniqueSeparatorSVC
15609508Di2015UniqueSeparatorGlobal.asax
15609508Di2015UniqueSeparatorpublic class Global : System.Web.HttpApplicationDi2015NewLine{Di2015NewLine    RouteTable.Routes.Add(new ServiceRoute("MyApp/rest/Photo", new WebServiceHostFactory(), typeof(PhotoComponent)));Di2015NewLine}  Di2015NewLine
15609508Di2015UniqueSeparator[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]Di2015NewLinepublic class PhotoComponent : Interfaces.IPhotoComponentDi2015NewLine{Di2015NewLine    public bool UploadPhotoStream(string productid, string photoid, Stream fileData)Di2015NewLine    {Di2015NewLine        // some code....Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[ServiceContract]Di2015NewLinepublic interface PhotoComponentDi2015NewLine{Di2015NewLine    [OperationContract]Di2015NewLine    [WebInvoke(UriTemplate = "UploadPhotoStream/{productid}/{photoid}", Method = "POST")]Di2015NewLine    bool UploadPhotoStream(string productid, string photoid, System.IO.Stream fileData);Di2015NewLine}  Di2015NewLine
15609508Di2015UniqueSeparator<services>  Di2015NewLine  <service behaviorConfiguration="Default" name="StackSample.Logic.PhotoComponent">Di2015NewLine    <endpoint behaviorConfiguration="JSON" binding="webHttpBinding" bindingConfiguration="RESTSecureTransfer" contract="StackSample.Interfaces.PhotoComponent" />Di2015NewLine  </service>Di2015NewLine</services>   Di2015NewLine
15609508Di2015UniqueSeparatorhttps://127.0.0.1/MyApp/rest/Photo/UploadPhotoStream/{productid}/{photoid}  Di2015NewLine
15609516Di2015UniqueSeparatorpublic static class ObjectExtensionsDi2015NewLine{Di2015NewLine    public static MemberInfo GetMember<T,R>(this T instance, Di2015NewLine         Expression<Func<T, R>> selector)Di2015NewLine    {Di2015NewLine        var member = selector.Body as MemberExpression;Di2015NewLine        if (member != null)Di2015NewLine        {Di2015NewLine            return member.Member;Di2015NewLine        }Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static T GetAttribute<T>(this MemberInfo meminfo) where T : AttributeDi2015NewLine    {Di2015NewLine       return meminfo.GetCustomAttributes(typeof(T)).FirstOrDefault() as T;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15609516Di2015UniqueSeparatorvar attr = someobject.GetMember(x => x.Height).Di2015NewLine              GetAttribute<DatabaseIdAttribute>();Di2015NewLine
15609516Di2015UniqueSeparatorGetAttribute<T>(this MemberInfo meminfo)
15609647Di2015UniqueSeparatorSELECT  t1.*Di2015NewLineFROM tradeFile t1Di2015NewLineINNER JOINDi2015NewLine(Di2015NewLine    SELECT TradeNo, OrderNODi2015NewLine    FROM tradeFileDi2015NewLine    GROUP BY TradeNo, OrderNODi2015NewLine    HAVING COUNT(*) > 1 Di2015NewLine) AS t2  ON t1.TradeNo = t2.TradeNoDi2015NewLine        AND t1.OrderNo = t2.OrderNO;Di2015NewLine
15609717Di2015UniqueSeparatorCopyToDataTable
15609717Di2015UniqueSeparatorvar newDataTable = (dt.AsEnumerable()Di2015NewLine                     .Where(r=> r.Field<string>("Mcode" == "123")Di2015NewLine                     .Select new Di2015NewLine                           {Di2015NewLine                           stgId = r.Field<int>("stgId"),Di2015NewLine                           fromdate = r.Field<DateTime>("fromdate"),Di2015NewLine                           todate = r.Field<DateTime>("todate"),Di2015NewLine                           colorCode = r.Field<int>("colorCode")Di2015NewLine                           }).CopyToDataTable();Di2015NewLine
15609717Di2015UniqueSeparatorField
15609717Di2015UniqueSeparatorpublic static class CustomLINQtoDataSetMethodsDi2015NewLine{Di2015NewLine    public static DataTable CopyToDataTable<T>(this IEnumerable<T> source)Di2015NewLine    {Di2015NewLine        return new ObjectShredder<T>().Shred(source, null, null);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static DataTable CopyToDataTable<T>(this IEnumerable<T> source,Di2015NewLine                                                DataTable table, LoadOption? options)Di2015NewLine    {Di2015NewLine        return new ObjectShredder<T>().Shred(source, table, options);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class ObjectShredder<T>Di2015NewLine{Di2015NewLine    private System.Reflection.FieldInfo[] _fi;Di2015NewLine    private System.Reflection.PropertyInfo[] _pi;Di2015NewLine    private System.Collections.Generic.Dictionary<string, int> _ordinalMap;Di2015NewLine    private System.Type _type;Di2015NewLineDi2015NewLine    // ObjectShredder constructor.Di2015NewLine    public ObjectShredder()Di2015NewLine    {Di2015NewLine        _type = typeof(T);Di2015NewLine        _fi = _type.GetFields();Di2015NewLine        _pi = _type.GetProperties();Di2015NewLine        _ordinalMap = new Dictionary<string, int>();Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Loads a DataTable from a sequence of objects.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="source">The sequence of objects to load into the DataTable.</param>Di2015NewLine    /// <param name="table">The input table. The schema of the table must match that Di2015NewLine    /// the type T.  If the table is null, a new table is created with a schema Di2015NewLine    /// created from the public properties and fields of the type T.</param>Di2015NewLine    /// <param name="options">Specifies how values from the source sequence will be applied to Di2015NewLine    /// existing rows in the table.</param>Di2015NewLine    /// <returns>A DataTable created from the source sequence.</returns>Di2015NewLine    public DataTable Shred(IEnumerable<T> source, DataTable table, LoadOption? options)Di2015NewLine    {Di2015NewLine        // Load the table from the scalar sequence if T is a primitive type.Di2015NewLine        if (typeof(T).IsPrimitive)Di2015NewLine        {Di2015NewLine            return ShredPrimitive(source, table, options);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Create a new table if the input table is null.Di2015NewLine        if (table == null)Di2015NewLine        {Di2015NewLine            table = new DataTable(typeof(T).Name);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Initialize the ordinal map and extend the table schema based on type T.Di2015NewLine        table = ExtendTable(table, typeof(T));Di2015NewLineDi2015NewLine        // Enumerate the source sequence and load the object values into rows.Di2015NewLine        table.BeginLoadData();Di2015NewLine        using (IEnumerator<T> e = source.GetEnumerator())Di2015NewLine        {Di2015NewLine            while (e.MoveNext())Di2015NewLine            {Di2015NewLine                if (options != null)Di2015NewLine                {Di2015NewLine                    table.LoadDataRow(ShredObject(table, e.Current), (LoadOption)options);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    table.LoadDataRow(ShredObject(table, e.Current), true);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        table.EndLoadData();Di2015NewLineDi2015NewLine        // Return the table.Di2015NewLine        return table;Di2015NewLine    }Di2015NewLineDi2015NewLine    public DataTable ShredPrimitive(IEnumerable<T> source, DataTable table, LoadOption? options)Di2015NewLine    {Di2015NewLine        // Create a new table if the input table is null.Di2015NewLine        if (table == null)Di2015NewLine        {Di2015NewLine            table = new DataTable(typeof(T).Name);Di2015NewLine        }Di2015NewLineDi2015NewLine        if (!table.Columns.Contains("Value"))Di2015NewLine        {Di2015NewLine            table.Columns.Add("Value", typeof(T));Di2015NewLine        }Di2015NewLineDi2015NewLine        // Enumerate the source sequence and load the scalar values into rows.Di2015NewLine        table.BeginLoadData();Di2015NewLine        using (IEnumerator<T> e = source.GetEnumerator())Di2015NewLine        {Di2015NewLine            Object[] values = new object[table.Columns.Count];Di2015NewLine            while (e.MoveNext())Di2015NewLine            {Di2015NewLine                values[table.Columns["Value"].Ordinal] = e.Current;Di2015NewLineDi2015NewLine                if (options != null)Di2015NewLine                {Di2015NewLine                    table.LoadDataRow(values, (LoadOption)options);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    table.LoadDataRow(values, true);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        table.EndLoadData();Di2015NewLineDi2015NewLine        // Return the table.Di2015NewLine        return table;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object[] ShredObject(DataTable table, T instance)Di2015NewLine    {Di2015NewLineDi2015NewLine        FieldInfo[] fi = _fi;Di2015NewLine        PropertyInfo[] pi = _pi;Di2015NewLineDi2015NewLine        if (instance.GetType() != typeof(T))Di2015NewLine        {Di2015NewLine            // If the instance is derived from T, extend the table schemaDi2015NewLine            // and get the properties and fields.Di2015NewLine            ExtendTable(table, instance.GetType());Di2015NewLine            fi = instance.GetType().GetFields();Di2015NewLine            pi = instance.GetType().GetProperties();Di2015NewLine        }Di2015NewLineDi2015NewLine        // Add the property and field values of the instance to an array.Di2015NewLine        Object[] values = new object[table.Columns.Count];Di2015NewLine        foreach (FieldInfo f in fi)Di2015NewLine        {Di2015NewLine            values[_ordinalMap[f.Name]] = f.GetValue(instance);Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (PropertyInfo p in pi)Di2015NewLine        {Di2015NewLine            values[_ordinalMap[p.Name]] = p.GetValue(instance, null);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Return the property and field values of the instance.Di2015NewLine        return values;Di2015NewLine    }Di2015NewLineDi2015NewLine    public DataTable ExtendTable(DataTable table, Type type)Di2015NewLine    {Di2015NewLine        // Extend the table schema if the input table was null or if the value Di2015NewLine        // in the sequence is derived from type T.            Di2015NewLine        foreach (FieldInfo f in type.GetFields())Di2015NewLine        {Di2015NewLine            if (!_ordinalMap.ContainsKey(f.Name))Di2015NewLine            {Di2015NewLine                // Add the field as a column in the table if it doesn't existDi2015NewLine                // already.Di2015NewLine                DataColumn dc = table.Columns.Contains(f.Name) ? table.Columns[f.Name]Di2015NewLine                    : table.Columns.Add(f.Name, f.FieldType);Di2015NewLineDi2015NewLine                // Add the field to the ordinal map.Di2015NewLine                _ordinalMap.Add(f.Name, dc.Ordinal);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        foreach (PropertyInfo p in type.GetProperties())Di2015NewLine        {Di2015NewLine            if (!_ordinalMap.ContainsKey(p.Name))Di2015NewLine            {Di2015NewLine                // Add the property as a column in the table if it doesn't existDi2015NewLine                // already.Di2015NewLine                DataColumn dc = table.Columns.Contains(p.Name) ? table.Columns[p.Name]Di2015NewLine                    : table.Columns.Add(p.Name, p.PropertyType);Di2015NewLineDi2015NewLine                // Add the property to the ordinal map.Di2015NewLine                _ordinalMap.Add(p.Name, dc.Ordinal);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Return the table.Di2015NewLine        return table;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15609781Di2015UniqueSeparatorpublic virtual void Install(IDictionary stateSaver)Di2015NewLine{Di2015NewLine    if (stateSaver == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentException(Res.GetString("InstallNullParameter", new object[] { "stateSaver" }));Di2015NewLine    }Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        this.OnBeforeInstall(stateSaver);Di2015NewLine    }Di2015NewLine    catch (Exception exception)Di2015NewLine    {Di2015NewLine        this.WriteEventHandlerError(Res.GetString("InstallSeverityError"), "OnBeforeInstall", exception);Di2015NewLine        throw new InvalidOperationException(Res.GetString("InstallEventException", new object[] { "OnBeforeInstall", base.GetType().FullName }), exception);Di2015NewLine    }Di2015NewLine    int num = -1;Di2015NewLine    ArrayList list = new ArrayList();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        for (int i = 0; i < this.Installers.Count; i++)Di2015NewLine        {Di2015NewLine            this.Installers[i].Context = this.Context;Di2015NewLine        }Di2015NewLine        for (int j = 0; j < this.Installers.Count; j++)Di2015NewLine        {Di2015NewLine            Installer installer = this.Installers[j];Di2015NewLine            IDictionary dictionary = new Hashtable();Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                num = j;Di2015NewLine                installer.Install(dictionary);Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                list.Add(dictionary);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        stateSaver.Add("_reserved_lastInstallerAttempted", num);Di2015NewLine        stateSaver.Add("_reserved_nestedSavedStates", list.ToArray(typeof(IDictionary)));Di2015NewLine    }Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        this.OnAfterInstall(stateSaver);Di2015NewLine    }Di2015NewLine    catch (Exception exception2)Di2015NewLine    {Di2015NewLine        this.WriteEventHandlerError(Res.GetString("InstallSeverityError"), "OnAfterInstall", exception2);Di2015NewLine        throw new InvalidOperationException(Res.GetString("InstallEventException", new object[] { "OnAfterInstall", base.GetType().FullName }), exception2);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15609781Di2015UniqueSeparatorstateSaver.Add("_reserved_lastInstallerAttempted", num);Di2015NewLinestateSaver.Add("_reserved_nestedSavedStates", list.ToArray(typeof(IDictionary)));Di2015NewLine
15609781Di2015UniqueSeparatorIDictionary dictionary = new Hashtable();Di2015NewLine
15609866Di2015UniqueSeparatorSeedData
15609866Di2015UniqueSeparatorcontainer.RegisterType<SeedData>();Di2015NewLine
15609866Di2015UniqueSeparatorvar a = container.Resolve<SeedData>();Di2015NewLine
15609866Di2015UniqueSeparatornew
15609866Di2015UniqueSeparatorIUow
15609997Di2015UniqueSeparatorforeach (var selectedObject in objectListView1.SelectedObjects) {Di2015NewLine    encClass.sampleFunction(((MyType)selectedObject).Filename, "output here");Di2015NewLine}Di2015NewLine
15610013Di2015UniqueSeparatorDebug
15610013Di2015UniqueSeparatorExceptions...
15610013Di2015UniqueSeparatorCommon Language Runtime Exceptions
15610013Di2015UniqueSeparatorthrown
15610013Di2015UniqueSeparatorcatch
15610013Di2015UniqueSeparatorDebug
15610013Di2015UniqueSeparatorAttach to process
15610013Di2015UniqueSeparatorw3wp.exe
15610025Di2015UniqueSeparatorReflection code against fields looks very different from reflection code against Di2015NewLineproperties (FieldInfo vs. PropertyInfo for starters). So even if you can Di2015NewLinerecompile against the new binary, if you use reflection on that field Di2015NewLineyou're hosed.Di2015NewLine
15610065Di2015UniqueSeparatorerow[0] = dataGridView1.Rows[i].Cells[0].Value == null ? Di2015NewLine          string.Empty : dataGridView1.Rows[i].Cells[0].Value.ToString();Di2015NewLineerow[1] = dataGridView1.Rows[i].Cells[1].Value == null ? Di2015NewLine          string.Empty : dataGridView1.Rows[i].Cells[1].Value.ToString();Di2015NewLineerow[2] = dataGridView1.Rows[i].Cells[2].Value == null ? Di2015NewLine          string.Empty : dataGridView1.Rows[i].Cells[2].Value.ToString();;Di2015NewLine
15610123Di2015UniqueSeparatorFirstOrDefault()
15610123Di2015UniqueSeparatorWhile executing the following LINQ. It used to work in the version 6.3.5:Di2015NewLine
15610123Di2015UniqueSeparator entities.Reclamation.Where(x=> x.idUser == idUser).Select(x=> new {Di2015NewLine    id = x.id,Di2015NewLine    ReclamationReport = x.Report.Count == 0 ? null : x.Report.FirstOrDefault().idDi2015NewLine    });Di2015NewLine
15610132Di2015UniqueSeparatorstring str = @"""How to add doublequotes""";Di2015NewLine
15610132Di2015UniqueSeparatorstring str = "\\"How to add doublequotes\\"";Di2015NewLine
15610594Di2015UniqueSeparatorselect TradeNo, OrderNoDi2015NewLinefrom TradeFile Di2015NewLinegroup by TradeNo, OrderNoDi2015NewLinehaving count(*) > 1Di2015NewLine
15610694Di2015UniqueSeparatorRange
15610694Di2015UniqueSeparatorIf-Range
15610694Di2015UniqueSeparatorContent-Range
15610694Di2015UniqueSeparatorDate
15610694Di2015UniqueSeparatorETag
15610694Di2015UniqueSeparatorContent-Location
15610694Di2015UniqueSeparatorActionResult
15610694Di2015UniqueSeparatorfileReq
15610705Di2015UniqueSeparatorEventAggregator
15610705Di2015UniqueSeparatorCompositePresentationEvent<TEventArgs>
15610705Di2015UniqueSeparatorTEventArgs
15610705Di2015UniqueSeparatorSystem.EventArgs
15610705Di2015UniqueSeparatorTEventArgs
15610705Di2015UniqueSeparatorpublic void HandleExceptionEvent(ExceptionEventArgs eventArgs)Di2015NewLine{Di2015NewLine}Di2015NewLine
15610705Di2015UniqueSeparatorEventAggregator
15610705Di2015UniqueSeparatorevntAgg.GetEvent<ExceptionEvent>.Subscribe(HandleExceptionEvent);Di2015NewLine
15611167Di2015UniqueSeparatorSystem.Action<MyInterface>
15611167Di2015UniqueSeparatorMyInterface
15611167Di2015UniqueSeparatorSystem.Action<T>
15611167Di2015UniqueSeparatorT : MyInterface
15611167Di2015UniqueSeparatorT
15611167Di2015UniqueSeparatorMyInterface
15611167Di2015UniqueSeparatorT
15611167Di2015UniqueSeparatorMyInterface
15611412Di2015UniqueSeparatorsubstring
15611412Di2015UniqueSeparatorcount=0;Di2015NewLinefor(int i=0;i<str.Length;i++)Di2015NewLine{Di2015NewLine if(str.Length%7==0)Di2015NewLine input.Substring(count, 7);Di2015NewLine count++;Di2015NewLine}Di2015NewLine
15611435Di2015UniqueSeparatorIEnumerable<string>
15611435Di2015UniqueSeparatorstring[] splitSpecial(string words, int lenght)Di2015NewLine{Di2015NewLine  // The new result, will be turned into string[]Di2015NewLine  var newSplit = new List<string>();Di2015NewLine  // Split on normal chars, ie newline, space etcDi2015NewLine  var splitted = words.Split();Di2015NewLine  // Start out with nullDi2015NewLine  string word = null;Di2015NewLineDi2015NewLine  for (int i = 0; i < splitted.Length; i++)Di2015NewLine  {Di2015NewLine      // If first word, addDi2015NewLine      if (word == null)Di2015NewLine      {Di2015NewLine          word = splitted[i];Di2015NewLine      }Di2015NewLine      // If too long, addDi2015NewLine      else if (splitted[i].Length + 1 + word.Length > lenght)Di2015NewLine      {Di2015NewLine          newSplit.Add(word);Di2015NewLine          word = splitted[i];Di2015NewLine      }Di2015NewLine      // Else, concatenate and go againDi2015NewLine      elseDi2015NewLine      {Di2015NewLine          word += " " + splitted[i];Di2015NewLine      }Di2015NewLine  }Di2015NewLine  // Flush what we have left, ie the last wordDi2015NewLine  newSplit.Add(word);Di2015NewLineDi2015NewLine  // Convert into string[] (a requirement?)Di2015NewLine  return newSplit.ToArray();Di2015NewLine}Di2015NewLine
15611531Di2015UniqueSeparatorFileSystemWatcher
15611592Di2015UniqueSeparatorCriteria cr = session.createCriteria(table.class);Di2015NewLineDi2015NewLine// To get records matching with AND condistionsDi2015NewLineLogicalExpression andExp = Restrictions.and(cell2, cell3);Di2015NewLinecr.add( andExp );Di2015NewLine
15611592Di2015UniqueSeparator // To get records matching with OR condistionsDi2015NewLine  LogicalExpression orExp = Restrictions.or(cell2, cell3);Di2015NewLine  cr.add( orExp );Di2015NewLineDi2015NewLine List results = cr.list();Di2015NewLine
15611686Di2015UniqueSeparatorTask
15611686Di2015UniqueSeparatorNullReferenceException
15611686Di2015UniqueSeparatorTask task1 = Task.Factory.StartNew (() => { throw null; });Di2015NewLineTask task2 = task1.ContinueWith (ant => Console.Write(ant.Exception());Di2015NewLine
15611686Di2015UniqueSeparatortask1
15611686Di2015UniqueSeparatorStatus
15611686Di2015UniqueSeparatorasyncTask.ContinueWith(task =>Di2015NewLine{Di2015NewLine    // Check task status.Di2015NewLine    switch (task.Status)Di2015NewLine    {Di2015NewLine        // Handle any exceptions to prevent UnobservedTaskException.             Di2015NewLine        case TaskStatus.RanToCompletion:Di2015NewLine            if (asyncTask.Result)Di2015NewLine            {Di2015NewLine                // Do stuff...Di2015NewLine            }Di2015NewLine            break;Di2015NewLine        case TaskStatus.Faulted:Di2015NewLine            if (task.Exception != null)Di2015NewLine                mainForm.progressRightLabelText = task.Exception.InnerException.Message;Di2015NewLine            elseDi2015NewLine                mainForm.progressRightLabelText = "Operation failed!";Di2015NewLine        default:Di2015NewLine            break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15611686Di2015UniqueSeparatortry
15611686Di2015UniqueSeparatorcatch
15611686Di2015UniqueSeparatorResult
15611686Di2015UniqueSeparatortry
15611686Di2015UniqueSeparatorcatch
15611686Di2015UniqueSeparatorint x = 0;Di2015NewLineTask<int> task = Task.Factory.StartNew (() => 7 / x);Di2015NewLinetryDi2015NewLine{Di2015NewLine    task.Wait();Di2015NewLine    // OR.Di2015NewLine    int result = task.Result;Di2015NewLine}Di2015NewLinecatch (AggregateException aggEx)Di2015NewLine{Di2015NewLine    Console.WriteLine(aggEx.InnerException.Message);Di2015NewLine}Di2015NewLine
15611860Di2015UniqueSeparator<StackPanel Orientation="Vertical" Grid.IsSharedSizeScope="True">Di2015NewLine  <Grid Margin="0, 10, 0, 0">Di2015NewLine    <Grid.ColumnDefinitions>Di2015NewLine      <ColumnDefinition SharedSizeGroup="First" Width="40" />Di2015NewLine      <ColumnDefinition SharedSizeGroup="Second" Width="70" />Di2015NewLine    </Grid.ColumnDefinitions>Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine      <RowDefinition />Di2015NewLine    </Grid.RowDefinitions>Di2015NewLine    <TextBlock Grid.Column="0" Grid.Row="0"Di2015NewLine            Text="header 1" />Di2015NewLine    <TextBlock Grid.Column="1" Grid.Row="0"Di2015NewLine            Text="header 2" />Di2015NewLine  </Grid>Di2015NewLine  <ItemsControl ItemsSource="{Binding Entities}">Di2015NewLine    <ItemsControl.ItemTemplate>Di2015NewLine      <DataTemplate>Di2015NewLine        <StackPanel Orientation="Vertical">Di2015NewLine          <Grid Margin="0, 10, 0, 0">Di2015NewLine            <Grid.ColumnDefinitions>Di2015NewLine              <ColumnDefinition SharedSizeGroup="First" />Di2015NewLine              <ColumnDefinition SharedSizeGroup="Second" />Di2015NewLine            </Grid.ColumnDefinitions>Di2015NewLine            <Grid.RowDefinitions>Di2015NewLine              <RowDefinition />Di2015NewLine            </Grid.RowDefinitions>Di2015NewLine            <TextBlock Grid.Column="0" Grid.Row="0"Di2015NewLine               Text="{Binding Property1}" />Di2015NewLine            <TextBlock Grid.Column="1" Grid.Row="0"Di2015NewLine               Text="{Binding Property2}" />Di2015NewLine          </Grid>Di2015NewLine        </StackPanel>Di2015NewLine      </DataTemplate>Di2015NewLine    </ItemsControl.ItemTemplate>Di2015NewLine  </ItemsControl>Di2015NewLine</StackPanel>Di2015NewLine
15611918Di2015UniqueSeparatorDateTime universalFormatDateTime = Convert.ToDateTime(dateTime).ToUniversalTime()Di2015NewLine
15611958Di2015UniqueSeparatorprivate static Random rnd = new Random();Di2015NewLine
15611958Di2015UniqueSeparatorRandom
15611958Di2015UniqueSeparatorRandom
15611958Di2015UniqueSeparatorRandom
15611971Di2015UniqueSeparator<img alt="" src="..\\images\\Feedback.jpg" style="height: 19px; width: 20px"/>
15611971Di2015UniqueSeparatormyImage.ImageUrl=Server.MapPath("Images\\Feedback.jpg");Di2015NewLine
15612048Di2015UniqueSeparator<
15612048Di2015UniqueSeparator^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(?!hotmail|gmail|yahoo)(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$Di2015NewLine
15612048Di2015UniqueSeparator"hotmail,gmail and yahoo"
15612048Di2015UniqueSeparator@
15612048Di2015UniqueSeparator@"^([\\w.-]+)@(\\[(\\d{1,3}\\.){3}|(?!hotmail|gmail|yahoo)(([a-zA-Z\\d-]+\\.)+))([a-zA-Z]{2,4}|\\d{1,3})(\\]?)$"Di2015NewLine
15612061Di2015UniqueSeparatorStackOverflowException
15612182Di2015UniqueSeparatorList<string> ThirdList =  SecondList.Except(FirstList).ToList();Di2015NewLine
15612182Di2015UniqueSeparatorConsole.WriteLine(string.Join(Environment.NewLine, ThirdList));Di2015NewLine
15612182Di2015UniqueSeparatorDebug.WriteLine(string.Join(Environment.NewLine, ThirdList));Di2015NewLine
15612182Di2015UniqueSeparatorusing System.Diagnostics;
15612182Di2015UniqueSeparatorCOM3Di2015NewLine
15612191Di2015UniqueSeparatorRegex regex = new Regex(@"(\\.|[a-z]|[A-Z]|[0-9])*@(\\.|[a-z]|[A-Z]|[0-9])*");Di2015NewLineforeach (Match match in regex.Matches(inputString))Di2015NewLine{Di2015NewLine    // match.Value == "xx@yahoo.com.my"Di2015NewLine    string name = match.Groups[1]; // "xx"Di2015NewLine    string domain = match.Groups[2]; // "yahoo.com.my"Di2015NewLine}Di2015NewLine
15612249Di2015UniqueSeparatorusing
15612249Di2015UniqueSeparatorSqlConnection con = new SqlConnection(connectionString)Di2015NewLinetryDi2015NewLine{Di2015NewLine   con.Open(); <-- open methodDi2015NewLineDi2015NewLine   string queryString = "select * from db";Di2015NewLine   SqlCommand cmd = new SqlCommand(queryString, con);Di2015NewLine   SqlDataReader reader = cmd.ExecuteReader();Di2015NewLine   reader.Read();Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    if (con!= null)Di2015NewLine        ((IDisposable)con).Dispose();Di2015NewLine}Di2015NewLine
15612249Di2015UniqueSeparator((IDisposable)con.Dispose();
15612338Di2015UniqueSeparatorint d
15612449Di2015UniqueSeparatorSaveAs
15612449Di2015UniqueSeparatorstring filename = Path.GetFileName(imgUpload.FileName);Di2015NewLineFileUploadControl.SaveAs(Server.MapPath("~/") + filename);Di2015NewLine
15612577Di2015UniqueSeparatorstream.SetLength(stream.Position);Di2015NewLine
15612597Di2015UniqueSeparatordoc.Descendants("CreditCard")Di2015NewLine   .Where(x => (string)x.Element("Name") == name)Di2015NewLine   .Remove();Di2015NewLine
15612667Di2015UniqueSeparatorC:\\Stuff
15612667Di2015UniqueSeparatorNetwork Service
15612687Di2015UniqueSeparator[DllImport("winspool.drv", CharSet = CharSet.Unicode, SetLastError = true)]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLinepublic static extern bool SetDefaultPrinter(string Name);Di2015NewLine
15612687Di2015UniqueSeparator[DllImport("winspool.drv", CharSet = CharSet.Unicode, SetLastError = true)]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLinepublic static extern bool GetDefaultPrinter(StringBuilder pszBuffer, ref int size);Di2015NewLine
15612687Di2015UniqueSeparatorList<string> printers = PrinterSettings.InstalledPrinters.Cast<string>().ToList();Di2015NewLine
15612914Di2015UniqueSeparator.*
15612914Di2015UniqueSeparator(?s)code start (?<key>[A-Za-z-]*) (?<language>[A-Za-z]*).*?[\\n](?<value>.*)[\\n].*?end code (?<key>[A-Za-z-]*)Di2015NewLine
15612914Di2015UniqueSeparator.*
15612914Di2015UniqueSeparator.*
15612914Di2015UniqueSeparatorvalue
15612914Di2015UniqueSeparator\\n
15612920Di2015UniqueSeparatorwhere
15612920Di2015UniqueSeparatorTransformResults
15613085Di2015UniqueSeparatorUNIQUE
15613093Di2015UniqueSeparator   previewWindow = new Window2();Di2015NewLine   previewWindow.Owner = this;Di2015NewLine   previewWindow.ShowDialog();Di2015NewLine
15613183Di2015UniqueSeparatorpublic static void CopyTo(this Stream source, Stream destination, int bufferSize, CancellationToken cancellationToken)Di2015NewLine{Di2015NewLine    var buffer = new byte[bufferSize];Di2015NewLine    int count;Di2015NewLine    while ((count = source.Read(buffer, 0, buffer.Length)) != 0)Di2015NewLine    {Di2015NewLine        cancellationToken.ThrowIfCancellationRequested();Di2015NewLine        destination.Write(buffer, 0, count);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15613195Di2015UniqueSeparatorMock<T>
15613195Di2015UniqueSeparatorViewModels
15613195Di2015UniqueSeparatorMainViewModel
15613195Di2015UniqueSeparator// Decorate with test fixture attribute so NUnit knows it's a testDi2015NewLine[TestFixture]Di2015NewLineclass MainViewModelTestsDi2015NewLine{           Di2015NewLine    // The interfaces/instances you will need to test with - this is your test subjectDi2015NewLine    MainViewModel _mainVM;Di2015NewLineDi2015NewLine    // You can mock the other interfaces:Di2015NewLine    Mock<IWindowManager> _windowManager;Di2015NewLine    Mock<IEventAggregator> _eventAggregator; Di2015NewLineDi2015NewLine    // Setup method will run at the start of each testDi2015NewLine    [SetUp]Di2015NewLine    public void Setup() Di2015NewLine    {Di2015NewLine        // Mock the window managerDi2015NewLine        _windowManager = new Mock<IWindowManager>();               Di2015NewLineDi2015NewLine        // Mock the event aggregatorDi2015NewLine        _windowManager = new Mock<IEventAggregator>(); Di2015NewLineDi2015NewLine        // Create the main VM injecting the mocked interfacesDi2015NewLine        // Mocking interfaces is always good as there is a lot of freedomDi2015NewLine        // Use mock.Object to get hold of the object, the mock is just a proxy that decorates the original objectDi2015NewLine        _mainVM = new MainViewModel(_windowManager.Object, _eventAggregator.Object);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Create a test to make sure the VM subscribes to the aggregator (a GOOD test, I forget to do this a LOT and this test gives me a slap in the face)Di2015NewLine    [Test]Di2015NewLine    public void Test_SubscribedToEventAggregator()Di2015NewLine    {Di2015NewLine        // Test to make sure subscribe was called on the event aggregator at least onceDi2015NewLine        _eventAggregator.Verify(x => x.Subscribe(_mainVM));Di2015NewLine    }Di2015NewLineDi2015NewLine    // Check that window state toggles ok when it's calledDi2015NewLine    [Test]Di2015NewLine    public void Test_WindowStateTogglesCorrectly()Di2015NewLine    {Di2015NewLine        // Run the aggregator test at the start of each test (this will run as a 'child' test)Di2015NewLine        Test_SubscribedToEventAggregator();Di2015NewLineDi2015NewLine        // Check the default state of the window is NormalDi2015NewLine        Assert.True(_mainVM.WindowState == WindowState.Normal);Di2015NewLineDi2015NewLine        // Toggle itDi2015NewLine        _mainVM.ToggleWindowState();Di2015NewLineDi2015NewLine        // Check it's maximisedDi2015NewLine        Assert.True(_mainVM.WindowState == WindowState.Maximised);Di2015NewLineDi2015NewLine        // Check toggle again for normalDi2015NewLine        _mainVM.ToggleWindowState();Di2015NewLineDi2015NewLine        Assert.True(_mainVM.WindowState == WindowState.Normal);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Test the title changes correctly when the method is calledDi2015NewLine    [Test]Di2015NewLine    public void Test_WindowTitleChanges()Di2015NewLine    {Di2015NewLine         Test_SubscribedToEventAggregator();Di2015NewLineDi2015NewLine         _mainVM.ChangeTitle("test title");Di2015NewLine         Assert.True(_mainVM.Title == "test title");Di2015NewLine    }Di2015NewLine}Di2015NewLine
15613195Di2015UniqueSeparatorChangeTitle
15613195Di2015UniqueSeparatorSubscribe(X)
15613195Di2015UniqueSeparator[SetUp]
15613195Di2015UniqueSeparatorIHandle<T>
15613195Di2015UniqueSeparatorpublic class MainViewModel : IHandle<someEventMessageArgument> // (this is your subscriber interface)Di2015NewLine{ Di2015NewLine    // (and this is the corresponding method)Di2015NewLine    public void Handle(someEventMessageArgument message) Di2015NewLine    { Di2015NewLine        // do something useful maybe change object state or call some methodsDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// Test the method - you don't need to mock any event aggregator behaviour since you have tested that the VM was subscribed to the aggregator. (OK CM might be broken but that's Robs problem :))Di2015NewLine[Test]Di2015NewLineTest_SomeEventDoesWhatYouAreExpecting()Di2015NewLine{Di2015NewLine    _mainVM.Handle(someEventMessageArgument);Di2015NewLineDi2015NewLine    // Assert that what was supposed to happen happened...Di2015NewLine    Assert.True(SomethingHappened);Di2015NewLine}Di2015NewLine
15613278Di2015UniqueSeparatorThread.Sleep();
15613278Di2015UniqueSeparatorif(gameTime.TotalGameTime.TotalMilliseconds > 2300)
15613320Di2015UniqueSeparatoren-US
15613320Di2015UniqueSeparator.
15613320Di2015UniqueSeparatorfr-FR
15613320Di2015UniqueSeparator.
15613320Di2015UniqueSeparatorDateTime.ParseExact
15613320Di2015UniqueSeparatorDateTime.TryParseExact
15613320Di2015UniqueSeparatorConvert.ToDateTime("31.03.2013", CultureInfo.GetCultureInfo("fr-FR"))Di2015NewLine
15613320Di2015UniqueSeparatorDateTime.ParseExact("31.03.2013",Di2015NewLine                    "dd.MM.yyyy",Di2015NewLine                    CultureInfo.InvariantCulture)Di2015NewLine
15613370Di2015UniqueSeparatorCheckBox01
15613370Di2015UniqueSeparatorbok.WeatherRain = CheckBox01.Checked;Di2015NewLine
15613370Di2015UniqueSeparatorDateTimePicker
15613508Di2015UniqueSeparatorAdd
15613508Di2015UniqueSeparatoradd
15613512Di2015UniqueSeparatorMVC
15613590Di2015UniqueSeparatorsbyte
15613590Di2015UniqueSeparatorbyte
15613590Di2015UniqueSeparatorshort
15613590Di2015UniqueSeparatorushort
15613590Di2015UniqueSeparatorint
15613590Di2015UniqueSeparatoruint
15613590Di2015UniqueSeparatorlong
15613590Di2015UniqueSeparatorulong
15613590Di2015UniqueSeparatorchar
15613590Di2015UniqueSeparatorfloat
15613590Di2015UniqueSeparatordouble
15613590Di2015UniqueSeparatordecimal
15613590Di2015UniqueSeparatorbool
15613719Di2015UniqueSeparatorpublic abstract class State<T>Di2015NewLine{Di2015NewLine    public virtual Enter(T item)Di2015NewLine    {Di2015NewLine        // an empty methodDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PlayerState : State<Player>Di2015NewLine{Di2015NewLine    public override Enter(Player pl)Di2015NewLine    {Di2015NewLine        // method implementationDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class GoalkeeperState : State<Goalkeeper>Di2015NewLine{Di2015NewLine    public override Enter(Goalkeeper gk)Di2015NewLine    {Di2015NewLine        // method implementationDi2015NewLine    }Di2015NewLine}Di2015NewLine
15613830Di2015UniqueSeparatorvar line = File.ReadAllLines("FDIASNC")Di2015NewLine               .FirstOrDefault(line => line.StartWith("0128"));Di2015NewLineDi2015NewLineif (line != null)Di2015NewLine{Di2015NewLine    //Do something with this lineDi2015NewLine}Di2015NewLine
15613830Di2015UniqueSeparatorList<string>
15613830Di2015UniqueSeparatorReadAllLines
15613830Di2015UniqueSeparatorIEnumerable<string>
15613830Di2015UniqueSeparatorReadLines
15613897Di2015UniqueSeparatorToList()
15613897Di2015UniqueSeparatorAsEnumerable()
15613897Di2015UniqueSeparatorlst
15613897Di2015UniqueSeparatorlst
15613897Di2015UniqueSeparatorList<anonymous type>
15613897Di2015UniqueSeparatorUnion
15613897Di2015UniqueSeparatorIEnumerable<anonymous type>
15613897Di2015UniqueSeparatorIEnumerable<T>
15613897Di2015UniqueSeparatorList<T>
15613897Di2015UniqueSeparatorAsEnumerable()
15613897Di2015UniqueSeparatorlst
15613897Di2015UniqueSeparatorIEnumerable<anonymous type>
15613960Di2015UniqueSeparatorPath.ChangeExtension
15613960Di2015UniqueSeparatorSystem.IO.File.Move(oldName, newName)
15613960Di2015UniqueSeparatorforeach (string myfile in filePaths)Di2015NewLine{Di2015NewLine    filename = Path.ChangeExtension(myfile, ".txt");Di2015NewLine    System.IO.File.Move(myfile, filename);Di2015NewLine}Di2015NewLine
15614030Di2015UniqueSeparatorfile.zip
15614030Di2015UniqueSeparatorfile.dat
15614065Di2015UniqueSeparatorvar deleteList = currentWhiteListApps.Where(x =>Di2015NewLine                     clientSideWhiteLists.All(y => !x.appID.Equals(y.appID)))Di2015NewLine                                     .ToList();Di2015NewLine
15614103Di2015UniqueSeparatoro.ZipEnd >= iCode
15614103Di2015UniqueSeparatoriCode <= o.ZipEnd
15614211Di2015UniqueSeparatorstring strDate = "25/03/2013";           Di2015NewLineDateTime datDate;Di2015NewLineDateTime.TryParseExact(strDate , new string[] { "dd/MM/yyyy" },Di2015NewLine                       System.Globalization.CultureInfo.InvariantCulture,Di2015NewLine                       System.Globalization.DateTimeStyles.None, out datDate);Di2015NewLineConsole.WriteLine(datDate);Di2015NewLine
15614211Di2015UniqueSeparatorDateTime.Parse(subLine[3])
15614211Di2015UniqueSeparatorDateTime
15614214Di2015UniqueSeparator<telerik:PieSeriesDefinition AxisName="YourName"Di2015NewLine                             ShowItemLabels="True"Di2015NewLine                             ItemLabelFormat="#%{P0}" Di2015NewLine                             RadiusFactor="0.7">Di2015NewLine
15614214Di2015UniqueSeparatorItemLabelFormat
15614214Di2015UniqueSeparatorRadiusFactor
15614214Di2015UniqueSeparatorChartDefaultView.ChartArea
15614214Di2015UniqueSeparator <telerik:ChartArea.AxisY>Di2015NewLine     <telerik:AxisY AxisName="YourName" DefaultLabelFormat="#VAL{p}"/>Di2015NewLine </telerik:ChartArea.AxisY>Di2015NewLine
15614346Di2015UniqueSeparatorSDK Assemblies
15614346Di2015UniqueSeparatorLinkerPleaseInclude
15614346Di2015UniqueSeparatorpublic class LinkerIncludePleaseDi2015NewLine{Di2015NewLine    private void IncludeClick(View view)Di2015NewLine    {Di2015NewLine        view.Click += (s, e) => { };Di2015NewLine    }Di2015NewLineDi2015NewLine    private void IncludeVisibility(View view)Di2015NewLine    {Di2015NewLine        view.Visibility = view.Visibility + 1;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void IncludeRelativeLayout(RelativeLayout relative)Di2015NewLine    {Di2015NewLine        relative.Visibility = ViewStates.Visible;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15614399Di2015UniqueSeparatortraditional: true
15614399Di2015UniqueSeparator$.ajax
15614417Di2015UniqueSeparatorConcurrentQueue
15614417Di2015UniqueSeparatorSemaphoreSlim
15614429Di2015UniqueSeparatorIFile file = (IFile)Activator.CreateInstance(Di2015NewLine    Type.GetType("FileParser.File" + args[0]), new object[] { args });Di2015NewLine
15614429Di2015UniqueSeparatorActivator.CreateInstance
15614684Di2015UniqueSeparatorModel =  MusterConnectionDB.Business.FarbeListe.GetAll();Di2015NewLine
15614684Di2015UniqueSeparator    private void DataPortal_Fetch()Di2015NewLine    {Di2015NewLine        using (var ctx = Csla.Data.ObjectContextManager<Datenbank.TestDBEntities>.GetManager(EntitiesDatabase.Name))Di2015NewLine            ReadData(ctx.ObjectContext.Farben);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ReadData(IEnumerable<Datenbank.Farbe> data)Di2015NewLine    {Di2015NewLine        // Partial Method BeforeReadDataDi2015NewLineDi2015NewLineDi2015NewLine        RaiseListChangedEvents = false;Di2015NewLineDi2015NewLine        foreach (var item in data)Di2015NewLine            this.Add(Farbe.Get(item));Di2015NewLine        RaiseListChangedEvents = true;Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLine
15614684Di2015UniqueSeparator    internal static Farbe Get(Datenbank.Farbe data)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            if (data == null)Di2015NewLine                return null;Di2015NewLineDi2015NewLine            return DataPortal.FetchChild<Farbe>(data);Di2015NewLine        }Di2015NewLine        catch (System.Exception e)Di2015NewLine        {Di2015NewLine            MessageBox.Show(e.ToString()); Di2015NewLine        }Di2015NewLine        return null;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void Child_Fetch(Datenbank.Farbe data)Di2015NewLine    {Di2015NewLineDi2015NewLine        LoadProperty(FarbauswahlNrProperty, data.FarbauswahlNr);Di2015NewLine        LoadProperty(KurztextProperty, data.Kurztext);Di2015NewLine        LoadProperty(RessourceProperty, data.Ressource);Di2015NewLine        LoadProperty(Vari1Property, data.Var1);Di2015NewLine        LoadProperty(Vari2Property, data.Vari2);Di2015NewLineDi2015NewLine    }Di2015NewLine
15614719Di2015UniqueSeparatorprivate void btn_click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   Button button = sender as Button;Di2015NewLine   if(button == null)Di2015NewLine      return;Di2015NewLine   Form form = button.Tag as Form;Di2015NewLine   if(form == null)Di2015NewLine      return;Di2015NewLine   form.MdiParent = this;Di2015NewLine   form.Text = button.Text;Di2015NewLine   form.Show();Di2015NewLine   button.Enabled = false;Di2015NewLine   form.Tag = button;Di2015NewLine   form.FormClosed += FormClosed;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void FormClosed(object sender, FormClosedEventArgs e)Di2015NewLine{Di2015NewLine   Form form = sender as Form;Di2015NewLine   if(form == null)Di2015NewLine      return;Di2015NewLine   Button button = form.Tag as Button;Di2015NewLine   if(button == null)Di2015NewLine      return;Di2015NewLine   button.Enabled = true;Di2015NewLine}Di2015NewLine
15614723Di2015UniqueSeparatorComboBox
15614723Di2015UniqueSeparatorSelectedItem
15614723Di2015UniqueSeparatorSelectedItem
15614723Di2015UniqueSeparatornull
15614723Di2015UniqueSeparatorcomboBox1.SelectedIndex = 3
15614723Di2015UniqueSeparatorsaveProfile
15614723Di2015UniqueSeparatorpublic void saveProfile(string filename, string cpuCount, string RAM , string VRAM , string threads)Di2015NewLine    {Di2015NewLine        string path = folder + "/" + filename;Di2015NewLine        using(StreamWriter sw = new StreamWriter(path)) Di2015NewLine        {Di2015NewLine             sw.WriteLine("cpuCount=" + cpuCount);Di2015NewLine             sw.WriteLine("maxRAM=" + RAM );Di2015NewLine             sw.WriteLine("maxVRAM=" + VRAM );Di2015NewLine             sw.WriteLine("cpuThreads=" + threads);Di2015NewLine        }        Di2015NewLine    }Di2015NewLine
15614723Di2015UniqueSeparatorprivate void button3_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine            string current = profile.currentProfile();Di2015NewLine            string cpuCount = this.comboBox1.SelectedItem.ToString();Di2015NewLine            string RAM =  this.comboBox4.SelectedItem.ToString();Di2015NewLine            string VRAM = this.comboBox2.SelectedItem.ToString();Di2015NewLine            string threads = this.comboBox3.SelectedItem().ToString();Di2015NewLine            profile.saveProfile(current, cpuCount, RAM, VRAM, threads);Di2015NewLine}Di2015NewLine
15614723Di2015UniqueSeparatorprivate void button3_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine            string current = profile.currentProfile();Di2015NewLine            profile.saveProfile(current, this.comboBox1.SelectedItem.ToString(), this.comboBox4.SelectedItem.ToString(), this.comboBox2.SelectedItem.ToString(), this.comboBox3.SelectedItem().ToString());Di2015NewLine}Di2015NewLine
15614768Di2015UniqueSeparatorYourForm.AllowTransparency = true;Di2015NewLine
15614807Di2015UniqueSeparatorpublic class Control : CompositeControl {Di2015NewLineDi2015NewLine  private bool mProperty;Di2015NewLine  private HiddenField hiddenField;Di2015NewLineDi2015NewLineDi2015NewLine  public virtual bool Property {Di2015NewLine    get {Di2015NewLine      return mProperty;Di2015NewLine    }Di2015NewLine    set {Di2015NewLine      mProperty = value;Di2015NewLine      if (contentPanel != null) contentPanel.Visible = value;Di2015NewLine      if (hiddenField != null && hiddenField.Value != value.ToString().ToLower()) hiddenField.Value = value.ToString().ToLower();Di2015NewLine    }Di2015NewLine  }Di2015NewLine  protected override void CreateChildControls() {Di2015NewLine    Controls.Clear();Di2015NewLine    CreateControlHierarchy();Di2015NewLine    ClearChildViewState();Di2015NewLine  }Di2015NewLine  protected virtual void CreateControlHierarchy() {Di2015NewLine    CreateHiddenField();Di2015NewLine    CreateContent();Di2015NewLine  }Di2015NewLineDi2015NewLine  protected virtual void CreateHiddenField() {Di2015NewLine    hiddenField = new HiddenField();Di2015NewLine    hiddenField.ID = "hiddenField";Di2015NewLine    hiddenField.Value = Property.ToString().ToLower();Di2015NewLine    hiddenField.ValueChanged += hiddenField_ValueChanged;Di2015NewLine    Controls.Add(hiddenField);Di2015NewLine  }  Di2015NewLine  protected virtual void CreateContent() {Di2015NewLine    contentPanel = new Panel();Di2015NewLine    contentPanel.ID = "content";Di2015NewLine    contentPanel.Vsiible = Property;Di2015NewLine    Controls.Add(contentPanel);Di2015NewLine  }Di2015NewLine  void hiddenField_ValueChanged(object sender, EventArgs e) {Di2015NewLine    Property = Convert.ToBoolean(hiddenField.Value);Di2015NewLine  }Di2015NewLine  protected override void OnInit(EventArgs e) {Di2015NewLine    EnsureChildControls();Di2015NewLine    base.OnInit(e);Di2015NewLine  }Di2015NewLine}Di2015NewLine
15614831Di2015UniqueSeparator(^\\d{1,3}[A-Z]{0,3}$)|(^\\d{1,3}[A-Z]{0,3}\\/\\d{0,3}[A-Z]{0,3}$)Di2015NewLine
15615121Di2015UniqueSeparatorpublic static string SerializeObject<T>(T obj)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        string xmlString = null;Di2015NewLine        using (MemoryStream memoryStream = new MemoryStream())Di2015NewLine        {Di2015NewLine            XmlSerializerNamespaces ns = new XmlSerializerNamespaces();Di2015NewLine            ns.Add("", "");Di2015NewLine            UTF8Encoding enc = new UTF8Encoding();Di2015NewLine            using (StreamWriter writer = new StreamWriter(memoryStream, enc))Di2015NewLine            {Di2015NewLine                XmlSerializer xs = new XmlSerializer(typeof(T));Di2015NewLine                xs.Serialize(writer, obj, ns);Di2015NewLine            }Di2015NewLine            xmlString = enc.GetString(memoryStream.ToArray());Di2015NewLine            return xmlString;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catchDi2015NewLine    {Di2015NewLine        return string.Empty;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15615260Di2015UniqueSeparatordela_ValueChanged
15615260Di2015UniqueSeparatorSendKeys.Send("Right")
15615275Di2015UniqueSeparatorvar document = XDocument.Load("AppxManifest.xml");Di2015NewLinevar xname = XNamespace.Get("http://schemas.microsoft.com/appx/2010/manifest");Di2015NewLineDi2015NewLinevar fileTypeElements = Di2015NewLine    document.Descendants(xname + "FileTypeAssociation").Descendants().Descendants();Di2015NewLinevar supportedFileExtensions = Di2015NewLine    fileTypeElements.Select(element => element.Value).ToArray();Di2015NewLine
15615298Di2015UniqueSeparator<asp:BoundField DataField="Description" HeaderText="Description"Di2015NewLine   SortExpression="Description" />Di2015NewLine
15615298Di2015UniqueSeparator<asp:TemplateField HeaderText="Description" SortExpression="Description">Di2015NewLine    <ItemTemplate>Di2015NewLine        <div class="readmore"><%# Eval("Description") %></div>Di2015NewLine    </ItemTemplate>                                                Di2015NewLine</asp:TemplateField>Di2015NewLine
15615406Di2015UniqueSeparatorCancellationToken
15615406Di2015UniqueSeparatorCancellationTokenSource cts;Di2015NewLineDi2015NewLineprivate async void ScreenTap(object sender, System.Windows.Input.GestureEventArgs e)Di2015NewLine{Di2015NewLine  if (cts == null)Di2015NewLine  {Di2015NewLine    cts = new CancellationTokenSource();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine      await DoSomethingAsync(cts.Token);Di2015NewLine    }Di2015NewLine    catch (OperationCanceledException)Di2015NewLine    {Di2015NewLine    }Di2015NewLine  }Di2015NewLine  elseDi2015NewLine  {Di2015NewLine    cts.Cancel();Di2015NewLine    cts = null;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprivate async Task DoSomethingAsync(CancellationToken token) Di2015NewLine{Di2015NewLine  playing = true;Di2015NewLine  for (int i = 0; ; count++)Di2015NewLine  {Di2015NewLine    token.ThrowIfCancellationRequested();Di2015NewLine    await doingsomethingAsync(text, token);Di2015NewLine  }Di2015NewLine  playing = false;Di2015NewLine}Di2015NewLine
15615493Di2015UniqueSeparatorforeach (string applicationName in applicationNames)Di2015NewLine        {Di2015NewLine            var app = new Application Di2015NewLine                { Di2015NewLine                    Name = applicationName, Di2015NewLine                    ModifiedDate = DateTime.Now Di2015NewLine                });Di2015NewLine            _uow.Applications.Add(app);Di2015NewLine                foreach (string testAccountName in testAccountNames)Di2015NewLine                {Di2015NewLine                   new TestAccount Di2015NewLine                   { Di2015NewLine                       Application = app ,Di2015NewLine                       Name = applicationName, Di2015NewLine                       ModifiedDate = DateTime.Now Di2015NewLine                   });Di2015NewLine                }Di2015NewLine        }Di2015NewLine
15615659Di2015UniqueSeparatorPdfContentByte pdfData = pdfStamper.GetUnderContent(pageIndex);Di2015NewLine
15615659Di2015UniqueSeparatorPdfContentByte pdfData = pdfStamper.GetOverContent(pageIndex);Di2015NewLine
15615682Di2015UniqueSeparatorreturn valueTextBox.Equals(valueListBox,String.CurrentCultureIgnoreCase);Di2015NewLine
15615682Di2015UniqueSeparatorstring valueTextBox = TextBoxLanguages.Text.Trim();Di2015NewLine
15615725Di2015UniqueSeparator// using NHibernate.Criterion;Di2015NewLine// using NHibernate.Transform;Di2015NewLineDi2015NewLinesession.CreateCriteria<JournalEntry>()Di2015NewLine   .SetProjection(Di2015NewLine       Projections.Sum<JournalEntry>(x => x.DebitAmount).As("Debits"),Di2015NewLine       Projections.Sum<JournalEntry>(x => x.CreditAmount).As("Credits"),Di2015NewLine       // you can use other aggregatesDi2015NewLine       // Projections.RowCount(),Di2015NewLine       // Projections.Max<JournalEntry>(x => x.EffectiveDate)Di2015NewLine    )Di2015NewLine    .SetResultTransformer(Transformers.AliasToBean<JournalEntrySummary>())Di2015NewLine    .UniqueResult<JournalEntrySummary>();Di2015NewLine
15615804Di2015UniqueSeparatorawait
15615804Di2015UniqueSeparatorreturn
15615804Di2015UniqueSeparatorTask<R> Bind<T, R>(Task<T> computation, Func<T, Task<R>> continuation);Di2015NewLineTask<T> Return<T>(T value);Di2015NewLine
15615804Di2015UniqueSeparatorContinueWith
15615804Di2015UniqueSeparatorUnwrap
15615804Di2015UniqueSeparatore
15615804Di2015UniqueSeparatorx
15615804Di2015UniqueSeparatorbody
15615804Di2015UniqueSeparator[| var x = await e; body |] Di2015NewLine   = Bind(e, x => [| body |])Di2015NewLine
15615804Di2015UniqueSeparator[| e |] = (...)
15615804Di2015UniqueSeparatore
15615804Di2015UniqueSeparator(...)
15615804Di2015UniqueSeparatorawait e
15615804Di2015UniqueSeparatorBind
15615804Di2015UniqueSeparatorBind
15615804Di2015UniqueSeparatorBind
15615804Di2015UniqueSeparatore
15615804Di2015UniqueSeparatorTask<T>
15615804Di2015UniqueSeparatorR
15615804Di2015UniqueSeparatorTask<R>
15615804Di2015UniqueSeparatorBind
15615804Di2015UniqueSeparatorreturn
15615804Di2015UniqueSeparator[| return e |]Di2015NewLine   = Return(e)Di2015NewLine
15615804Di2015UniqueSeparatorTask
15615804Di2015UniqueSeparatorBind
15615804Di2015UniqueSeparatorawait
15615804Di2015UniqueSeparatorvar x = await AsyncOperation();Di2015NewLinereturn await x.AnotherAsyncOperation();Di2015NewLine
15615804Di2015UniqueSeparatorBind(AsyncOperation(), x =>Di2015NewLine  Bind(x.AnotherAsyncOperation(), temp =>Di2015NewLine    Return(temp));Di2015NewLine
15615804Di2015UniqueSeparatorBind
15615804Di2015UniqueSeparatorBind
15615804Di2015UniqueSeparatorReturn
15615804Di2015UniqueSeparatorTask<T>
15615804Di2015UniqueSeparatorAsync<T>
15615804Di2015UniqueSeparatorAsync<T> = Action<Action<T>> Di2015NewLine
15615804Di2015UniqueSeparatorAction<T>
15615832Di2015UniqueSeparator        //convert text to htmlDi2015NewLine        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();Di2015NewLine        doc.LoadHtml(inputString);Di2015NewLineDi2015NewLine        // \\w* - means it can start with any alphanumeric charactarDi2015NewLine        // \\s+ - was placed to replace all white spaces (when there is more than one word).Di2015NewLine        // \\b - set bounderies for the keywordDi2015NewLine        const string pattern = @"((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[.\\!\\/\\\\w]*))?)";Di2015NewLineDi2015NewLine        //get all elements text propery except for anchor element Di2015NewLine        var nodes = doc.DocumentNode.SelectNodes("//text()[not(ancestor::a)]") ?? new HtmlAgilityPack.HtmlNodeCollection(null);Di2015NewLineDi2015NewLine        foreach (var node in nodes)Di2015NewLine        {Di2015NewLine            Regex regex = new Regex(pattern, RegexOptions.IgnoreCase);Di2015NewLine            node.InnerHtml = regex.Replace(node.InnerHtml, "<a href=\\"$1\\">$1</a>").Replace("href=\\"www", "href=\\"http://www");Di2015NewLine        }Di2015NewLineDi2015NewLine        return doc.DocumentNode.OuterHtml;Di2015NewLine
15615849Di2015UniqueSeparatorcust.Payment
15615849Di2015UniqueSeparatorCustomer cust = new Customer();Di2015NewLinecust.Payment = new Dictionary<CustomerPayingMode,decimal>();Di2015NewLinecust.Payment.Add(CustomerPayingMode.CreditCard, 1M);Di2015NewLine
15616101Di2015UniqueSeparatorFocus
15616101Di2015UniqueSeparatorOnKeyDown
15616101Di2015UniqueSeparatore.Handled
15616101Di2015UniqueSeparatortrue
15616101Di2015UniqueSeparatorprivate void textBox_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (bIgnoreInput)Di2015NewLine        e.Handled = true;Di2015NewLine}Di2015NewLine
15616101Di2015UniqueSeparatorEnabled
15616101Di2015UniqueSeparatorfalse
15616101Di2015UniqueSeparatorInvokeRequired
15616101Di2015UniqueSeparatorInvoke
15616101Di2015UniqueSeparatorvoid ValidateInput()Di2015NewLine{Di2015NewLine    SetisValidatingState(true);Di2015NewLineDi2015NewLine    System.Threading.Thread workThread = new System.Threading.Thread(delegate() Di2015NewLine        { Di2015NewLine            ////Di2015NewLine            // Validate hereDi2015NewLine            ////Di2015NewLine            SetisValidatingState(false);Di2015NewLine        });Di2015NewLine    workThread.Start();Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinedelegate void SetisValidatingStateDelegate(bool state);Di2015NewLinevoid SetisValidatingState(bool state)Di2015NewLine{Di2015NewLine    if (InvokeRequired)Di2015NewLine    {Di2015NewLine        Invoke(new SetisValidatingStateDelegate(SetisValidatingState), new object[] { state });Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    textBox1.AcceptsTabs = textBox2.AcceptsTabs = textBox3.AcceptsTabs = textBox4.AcceptsTabs = !state; // Disable tab while validating = trueDi2015NewLine    progressBar.visible = state; // show progress while validating = trueDi2015NewLine}Di2015NewLine
15616161Di2015UniqueSeparatorDatatable
15616161Di2015UniqueSeparator using(SqlConnection cn = GetConnection())Di2015NewLine {Di2015NewLine     cn.Open();Di2015NewLine     SqlDataAdapter da = new SqlDataAdapter("SELECT * FROM Customers", cn);Di2015NewLine     DataTable dt = new DataTable();Di2015NewLine     da.Fill(dt);Di2015NewLineDi2015NewLine     // At this point dt is filled with datarows extracted from the database in no particular order Di2015NewLine     // And the DefaultView presents the same record organization (or lack of), but...Di2015NewLineDi2015NewLine     // Order on the default view by CustomerNameDi2015NewLine     dt.DefaultView.Sort = "CustomerName";Di2015NewLine     foreach(DataRowView rv in dt.DefaultView)Di2015NewLine          Console.WriteLine(rv["CustomerName"].ToString();Di2015NewLineDi2015NewLine     // A new dataview with only a certain kind of customers ordered by nameDi2015NewLine     DataView dvSelectedCust = new DataView(dt, "CreditLevel = 1", "CustomerName", DataViewRowState.Unchanged);Di2015NewLine     foreach(DataRowView rv in dvSelectedCust)Di2015NewLine          Console.WriteLine(rv["CustomerName"],ToString();Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine }Di2015NewLine
15616212Di2015UniqueSeparatorvar currentUser = System.Security.Principal.WindowsIdentity.GetCurrent().Name.Split(Di2015NewLine    new [] {"\\\\"}, Di2015NewLine        StringSplitOptions.RemoveEmptyEntries)[1];Di2015NewLine
15616212Di2015UniqueSeparatorDomain
15616212Di2015UniqueSeparatorUser
15616212Di2015UniqueSeparatorvar currentUser2 = System.Security.Principal.WindowsIdentity.GetCurrent().Name;Di2015NewLinevar SplitUser = currentUser2.Split(new string[] { "\\\\" }, StringSplitOptions.RemoveEmptyEntries);Di2015NewLinevar domain = SplitUser[0];Di2015NewLinevar domainUser = SplitUser[1];Di2015NewLine
15616237Di2015UniqueSeparatorwhere T:IGenericOdata<T>Di2015NewLine
15616237Di2015UniqueSeparatorIdataEvents<T>
15616237Di2015UniqueSeparatorIGenericOdata<T>
15616237Di2015UniqueSeparatorT
15616538Di2015UniqueSeparatorstring[] receipt = list().ToArray();Di2015NewLineforeach (string rec in receipt)Di2015NewLine{Di2015NewLine  string quoted_receipt = single_quotation + rec + single_quotation + rec + comma;Di2015NewLine  sw.WriteLine(quoted_receipt);Di2015NewLine  sw.WriteLine(Environment.NewLine);Di2015NewLine}//foreachDi2015NewLine
15616538Di2015UniqueSeparatorList<String> values = list();Di2015NewLinefor (int i = 0; i < values.size(); i++)Di2015NewLine{Di2015NewLine  String rec = values.get(i);Di2015NewLine  StringBuilder quoted_receipt = new StringBuilder();Di2015NewLine  if (i > 0) Di2015NewLine  {Di2015NewLine    // add comma only if the first iteration already passedDi2015NewLine    quoted_receipt.append(comma);Di2015NewLine  }Di2015NewLine  quoted_receipt.append(single_quotation).append(rec).append(single_quotation);Di2015NewLine  sw.WriteLine(quoted_receipt.toString());Di2015NewLine  sw.WriteLine(Environment.NewLine);Di2015NewLine}Di2015NewLine
15616633Di2015UniqueSeparatorCreateBehavior()
15616633Di2015UniqueSeparatornamespace.servicename
15616633Di2015UniqueSeparatorBehaviorExtension
15616633Di2015UniqueSeparatorEndPointBehavior
15616633Di2015UniqueSeparator<system.serviceModel>Di2015NewLineDi2015NewLine<services>Di2015NewLineDi2015NewLine  <serviceDi2015NewLine          name="WcfServiceApp001.Service1"Di2015NewLine          behaviorConfiguration="InternalPayrollBehavior">Di2015NewLine    <endpoint address="" binding="basicHttpBinding"Di2015NewLine              behaviorConfiguration="EndpointBehavior"Di2015NewLine              contract="WcfServiceApp001.IService1"Di2015NewLine              />Di2015NewLine  </service>Di2015NewLine</services>Di2015NewLineDi2015NewLine<behaviors>Di2015NewLine  <serviceBehaviors>Di2015NewLine    <behavior name="InternalPayrollBehavior">Di2015NewLine      <serviceMetadata httpGetEnabled="true"/>Di2015NewLine      <serviceDebug includeExceptionDetailInFaults="true"/>Di2015NewLine    </behavior>Di2015NewLine  </serviceBehaviors>Di2015NewLineDi2015NewLine  <endpointBehaviors>Di2015NewLine    <behavior name="EndpointBehavior">Di2015NewLine      <XMessageValidator validateRequest="True" validateReply="true" validateWSE="true">Di2015NewLine      </XMessageValidator>Di2015NewLine    </behavior>Di2015NewLine  </endpointBehaviors>Di2015NewLine</behaviors>Di2015NewLineDi2015NewLine<extensions>Di2015NewLine  <behaviorExtensions>Di2015NewLine    <add name="XMessageValidator" type="MessageInspectorLibrary.ValidationBehaviorExtensionElement, MessageInspectors, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>Di2015NewLine  </behaviorExtensions>Di2015NewLine</extensions>Di2015NewLineDi2015NewLine<serviceHostingEnvironment multipleSiteBindingsEnabled="false" />Di2015NewLine</system.serviceModel>Di2015NewLine
15616682Di2015UniqueSeparatorEnvironment.GetFolderPath(Environment.SpecialFolder.ApplicationData)Di2015NewLine
15616780Di2015UniqueSeparatorInfo
15616780Di2015UniqueSeparatorDataModification
15616780Di2015UniqueSeparatorparametersModification.QuestionNumber += 1;Di2015NewLine
15616780Di2015UniqueSeparatorEwfPage.scrollPositionForThisResponse
15616780Di2015UniqueSeparatorScrollPosition.TopLeft
15616849Di2015UniqueSeparatorSystemColors.Highlight
15616849Di2015UniqueSeparatorProperties
15616849Di2015UniqueSeparatorDataGridView
15616849Di2015UniqueSeparatorDefaultCellStyle
15616849Di2015UniqueSeparatorAppearance
15616849Di2015UniqueSeparatorSelectionBackColor
15616849Di2015UniqueSeparatorSelectionBackColor
15616849Di2015UniqueSeparatorHighlight
15616849Di2015UniqueSeparatorSystem.Drawing.SystemColors
15616943Di2015UniqueSeparatorEnemy
15616943Di2015UniqueSeparatorKillPoints
15616943Di2015UniqueSeparatorEnemy
15616943Di2015UniqueSeparatorpublic abstract class EnemyDi2015NewLine{Di2015NewLine    public abstract int KillPoints {get;}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class EnemyTeleport : EnemyDi2015NewLine{Di2015NewLine    public override int KillPointsDi2015NewLine    {Di2015NewLine        get{return 6;}Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class EnemyZigZag : EnemyDi2015NewLine{Di2015NewLine    public override int KillPointsDi2015NewLine    {Di2015NewLine        get{return 10;}Di2015NewLine    }Di2015NewLine}Di2015NewLine
15616943Di2015UniqueSeparatorKillPoints
15616943Di2015UniqueSeparatorprivate Enemy EnemyInstance;Di2015NewLineDi2015NewLinevoid Main()Di2015NewLine{Di2015NewLine    EnemyInstance = new EnemyTeleport();Di2015NewLineDi2015NewLine    Console.WriteLine(EnemyInstance.KillPoints);Di2015NewLine}Di2015NewLine
15617029Di2015UniqueSeparator<add name="noendslash" Di2015NewLine            virtualUrl="^(.*)/$" Di2015NewLine            rewriteUrlParameter="IncludeQueryStringForRewrite" Di2015NewLine            redirect="Application"Di2015NewLine            destinationUrl="~$1"Di2015NewLine            ignoreCase="true" />Di2015NewLine
15617051Di2015UniqueSeparatorprotected bool IsUserInLocalGroup(string userName, string group)Di2015NewLine    {Di2015NewLine        using (DirectoryEntry computerEntry = new DirectoryEntry("WinNT://{0},computer".FormatWith(Environment.MachineName)))Di2015NewLine        using(DirectoryEntry groupEntry = computerEntry.Children.Find(group, "Group"))Di2015NewLine        {Di2015NewLine            foreach (object o in (IEnumerable)groupEntry.Invoke("Members"))Di2015NewLine            {Di2015NewLine                using (DirectoryEntry entry = new DirectoryEntry(o))Di2015NewLine                {Di2015NewLine                    if (entry.SchemaClassName.Equals("User", StringComparison.OrdinalIgnoreCase) && entry.Name.Equals(userName, StringComparison.OrdinalIgnoreCase))Di2015NewLine                    {Di2015NewLine                        return true;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
15617082Di2015UniqueSeparatorSystem.Timers.Timer.Stop()
15617087Di2015UniqueSeparatorstring[] randomArray = new string[3] {"1", "2", "3"};Di2015NewLineList<CustomEntity> listOfEntities = randomArray.Select(item => new CustomEntity() { FileName = item } ).ToList();Di2015NewLine
15617094Di2015UniqueSeparatoradd
15617094Di2015UniqueSeparatorremove
15617094Di2015UniqueSeparatorprivate EventHandler onMyEvent;Di2015NewLinepublic event MyEventHandler MyEventDi2015NewLine{Di2015NewLine    addDi2015NewLine    {Di2015NewLine        // run when event handler is added ( += )Di2015NewLine        onMyEvent = (MyEventHandler)Delegate.Combine(onMyEvent, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    removeDi2015NewLine    {Di2015NewLine        // run when event handler is removed ( -= )Di2015NewLine        onMyEvent = (MyEventHandler)Delegate.Remove(onMyEvent, value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15617112Di2015UniqueSeparatorprotected override void OnNavigatedTo(NavigationEventArgs e)Di2015NewLine{Di2015NewLine    if (e.NavigationMode == NavigationMode.Back)Di2015NewLine    {Di2015NewLine        (this.DataContext as MainViewModel).LoadData();Di2015NewLine    }Di2015NewLine}Di2015NewLine
15617113Di2015UniqueSeparatorPerson
15617113Di2015UniqueSeparatorPerson
15617113Di2015UniqueSeparatorPerson
15617113Di2015UniqueSeparatorPersonEfModel
15617113Di2015UniqueSeparatorPerson
15617113Di2015UniqueSeparatorPersonEfModel
15617756Di2015UniqueSeparatorint count = dict.Count(kvp => kvp.Value.Contains("specific value"));Di2015NewLine
15617756Di2015UniqueSeparatorContains()
15617756Di2015UniqueSeparatorSelectMany()
15617756Di2015UniqueSeparatorContains() took: 00:00:04.2299671Di2015NewLineSelectMany() took: 00:00:13.0385700Di2015NewLineContains() took: 00:00:04.1634190Di2015NewLineSelectMany() took: 00:00:12.9052739Di2015NewLineContains() took: 00:00:04.1605812Di2015NewLineSelectMany() took: 00:00:12.8953210Di2015NewLineContains() took: 00:00:04.1356058Di2015NewLineSelectMany() took: 00:00:12.9109115Di2015NewLine
15617756Di2015UniqueSeparatorContains() took: 00:00:16.7422573Di2015NewLineSelectMany() took: 00:00:52.1070692Di2015NewLineContains() took: 00:00:16.7206587Di2015NewLineSelectMany() took: 00:00:52.1910468Di2015NewLineContains() took: 00:00:16.6064611Di2015NewLineSelectMany() took: 00:00:52.1961513Di2015NewLineContains() took: 00:00:16.6167020Di2015NewLineSelectMany() took: 00:00:54.5120003Di2015NewLine
15617756Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace DemoDi2015NewLine{Di2015NewLine    public static class ProgramDi2015NewLine    {Di2015NewLine        [STAThread]Di2015NewLine        public static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var dict = new Dictionary<string, List<string>>();Di2015NewLine            var strings = new List<string>();Di2015NewLineDi2015NewLine            int n1 = 10000;Di2015NewLine            int n2 = 50000;Di2015NewLineDi2015NewLine            for (int i = 0; i < n1; ++i)Di2015NewLine                strings.Add("TEST");Di2015NewLineDi2015NewLine            for (int i = 0; i < n2; ++i)Di2015NewLine                dict.Add(i.ToString(), strings);Di2015NewLineDi2015NewLine            for (int i = 0; i < 4; ++i)Di2015NewLine            {Di2015NewLine                var sw = Stopwatch.StartNew();Di2015NewLine                dict.Count(kvp => kvp.Value.Contains("specific value"));Di2015NewLine                Console.WriteLine("Contains() took: " + sw.Elapsed);Di2015NewLineDi2015NewLine                sw.Restart();Di2015NewLine                dict.Values.SelectMany(v => v).Count(v => v == "specific value");Di2015NewLine                Console.WriteLine("SelectMany() took: " + sw.Elapsed);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15617774Di2015UniqueSeparatorMainView.Channels
15617774Di2015UniqueSeparatorthis.Channels = new List<Channels>;
15617774Di2015UniqueSeparatorthis.Channels = GetMeSomeChannels();
15617774Di2015UniqueSeparatorchannels.Add(channel);
15617774Di2015UniqueSeparatorList<string>
15617774Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLineDi2015NewLineDi2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        List<string> Channels = new List<string>() {"a","b", "c"};Di2015NewLine        AddChannel ac = new AddChannel(Channels);Di2015NewLine                ac.AddSomthing("foo");Di2015NewLineDi2015NewLine                foreach(var s in Channels)Di2015NewLine        {Di2015NewLine            Console.WriteLine(s);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLinepublic class AddChannel Di2015NewLine{Di2015NewLine        private List<string> Channels {get;set;}Di2015NewLine    public AddChannel(List<string> Channels )Di2015NewLine        {Di2015NewLine        this.Channels = Channels ; Di2015NewLine    }Di2015NewLineDi2015NewLine        public void AddSomthing(string s)Di2015NewLine        {Di2015NewLine            this.Channels.Add(s);Di2015NewLine        }Di2015NewLineDi2015NewLine}Di2015NewLine
15617790Di2015UniqueSeparatorORDER BY ... DESC
15617790Di2015UniqueSeparatorSELECT TOP 5 * Di2015NewLineFROM [TableName]Di2015NewLineORDER BY Sr_No DESC;Di2015NewLine
15617810Di2015UniqueSeparatorthe good old divide and conquer
15618047Di2015UniqueSeparatorwhile(true)
15618047Di2015UniqueSeparatorRead
15618047Di2015UniqueSeparatorThread.Sleep(100)
15618047Di2015UniqueSeparatorBeginRead
15618110Di2015UniqueSeparatorMapper.CreateMap<Mouse, Cat>();Di2015NewLine
15618110Di2015UniqueSeparatorTypeMap
15618110Di2015UniqueSeparatorTypeMap
15618110Di2015UniqueSeparatorDestinationType
15618110Di2015UniqueSeparatorSourceType
15618110Di2015UniqueSeparatorTypeMap
15618110Di2015UniqueSeparatorTypeMap FindExplicitlyDefinedTypeMap(Type sourceType, Type destinationType)Di2015NewLine{Di2015NewLine    return this._typeMaps.FirstOrDefault<TypeMap>(x => Di2015NewLine               ((x.DestinationType == destinationType) && Di2015NewLine                (x.SourceType == sourceType)));Di2015NewLine}Di2015NewLine
15618110Di2015UniqueSeparatorTypeMap
15618110Di2015UniqueSeparatorDestinationType
15618110Di2015UniqueSeparatorDog
15618110Di2015UniqueSeparatorSourceType
15618110Di2015UniqueSeparatorMouse
15618156Di2015UniqueSeparatorpublic class ModelDi2015NewLine{Di2015NewLine    public struct BreadCrumbDi2015NewLine    {Di2015NewLine        public string Title;Di2015NewLine        public string Url;Di2015NewLine    }Di2015NewLineDi2015NewLine    public List<BreadCrumb> Breadcrumbs { get; set; }Di2015NewLine}Di2015NewLine
15618156Di2015UniqueSeparator@{ int index = 0; }Di2015NewLine@foreach(var crumb in this.Model.Breadcrumbs)Di2015NewLine{Di2015NewLine    <a href="@(crumb.Url)" title="@(crumb.Title)">@(crumb.Title)</a>Di2015NewLineDi2015NewLine    if(index < this.Model.Breadcrumbs.Count - 1)Di2015NewLine    {Di2015NewLine        <span>></span>Di2015NewLine    }Di2015NewLineDi2015NewLine    index++;Di2015NewLine}Di2015NewLine
15618161Di2015UniqueSeparatortokens{}
15618214Di2015UniqueSeparatorstatic
15618214Di2015UniqueSeparatorextern
15618239Di2015UniqueSeparator<script type="text/javascript" src="/scripts/myscript.js"></javascript>Di2015NewLine
15618239Di2015UniqueSeparator<link rel="stylesheet" href="/styles/mystyle.css" />Di2015NewLine
15618275Di2015UniqueSeparatorhttp://<yourlocalsite>/WebServices/ContentChannelService.asmx
15618390Di2015UniqueSeparatorThread
15618390Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   BackgroundWorker bg1 = new BackgroundWorker();Di2015NewLine   bg1.DoWork += new DoWorkEventHandler(method1);Di2015NewLine   bg1.RunWorkerCompleted += new RunWorkerCompletedEventHandler(method1_Completed);Di2015NewLine   bg1.RunWorkerAsync();Di2015NewLineDi2015NewLine   BackgroundWorker bg2 = new BackgroundWorker();Di2015NewLine   bg2.DoWork += new DoWorkEventHandler(method2);Di2015NewLine   bg2.RunWorkerCompleted += new RunWorkerCompletedEventHandler(method2_Completed);Di2015NewLine   bg2.RunWorkerAsync();Di2015NewLine}Di2015NewLineDi2015NewLinepublic void method1(object Sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine    using (OleDbConnection odbConn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + dbfileName + ";Mode=Read"))Di2015NewLine    {Di2015NewLine        //db manipulation1Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevoid method1_Completed(object sender, RunWorkerCompletedEventArgs e)Di2015NewLine{Di2015NewLine    // Update UI.Di2015NewLine}Di2015NewLineDi2015NewLinepublic void method2(object Sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine    using (OleDbConnection odbConn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + dbfileName + ";Mode=Read"))Di2015NewLine    {Di2015NewLine        //db manipulation1Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevoid method2_Completed(object sender, RunWorkerCompletedEventArgs e)Di2015NewLine{Di2015NewLine    // Update UI.Di2015NewLine}Di2015NewLine
15618400Di2015UniqueSeparator            if (node.Attributes["name"].Value == ("SearchQuery"))Di2015NewLine             node.LastChild.Innertext = textBoxQuery.Text;Di2015NewLine
15618477Di2015UniqueSeparatorPerTransportMessage
15618477Di2015UniqueSeparatorcontainer.Register(Di2015NewLine    ComponentDi2015NewLine        .For<ISomething>()Di2015NewLine        .ImplementedBy<Whatever>()Di2015NewLine        .LifestyleScoped<PerTransportMessage>()Di2015NewLine);Di2015NewLine
15618488Di2015UniqueSeparator.GroupBy(x => new { x.Sole.Code, x.Sole.CountryID })Di2015NewLine
15618488Di2015UniqueSeparatorFirstOrDefault
15618488Di2015UniqueSeparatorGroupBy
15618488Di2015UniqueSeparatorGroupBy
15618488Di2015UniqueSeparatorFirst
15618505Di2015UniqueSeparatorpublic partial class StatusPickerPopoverView : UIViewControllerDi2015NewLine{Di2015NewLine    public StatusPickerPopoverView (IntPtr handle) : base (handle)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public override ViewDidLoad()Di2015NewLine    {Di2015NewLine        base.ViewDidLoad();Di2015NewLineDi2015NewLine        pickerStatus = new UIPickerView();Di2015NewLine        pickerStatus.Model = new StatusPickerViewModel();Di2015NewLine    }Di2015NewLineDi2015NewLine    public class StatusPickerViewModel : UIPickerViewModelDi2015NewLine    {Di2015NewLine        public override int GetComponentCount (UIPickerView picker)Di2015NewLine        {Di2015NewLine            return 1;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override int GetRowsInComponent (UIPickerView picker, int component)Di2015NewLine        {Di2015NewLine            return 5;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override string GetTitle (UIPickerView picker, int row, int component)Di2015NewLine        {Di2015NewLineDi2015NewLine            return "Component " + row.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
15618532Di2015UniqueSeparatorAuthorizedRequestToken requestToken = new AuthorizedRequestToken(oauthToken, pinCode);Di2015NewLine
15618590Di2015UniqueSeparatorRegex rgx = new Regex(@"(^t=[0-9]+,[a-z ]+=([A-Fa-f0-9]{2} ?){8})");Di2015NewLineif(rgx.IsMatch(line.Trim())){Di2015NewLine    //...Di2015NewLine}Di2015NewLine
15618590Di2015UniqueSeparator^t=[0-9]+,[a-z ]+=
15618590Di2015UniqueSeparator([A-Fa-f0-9]{2} ?){8}
15618590Di2015UniqueSeparator$1
15618638Di2015UniqueSeparator[ForeignKey("ImageId")] // Id of parent classDi2015NewLine
15618638Di2015UniqueSeparatorReferencePhoto
15618638Di2015UniqueSeparatorUserId
15618638Di2015UniqueSeparatorsingle instance vs collection
15618638Di2015UniqueSeparatorForeignKey
15618638Di2015UniqueSeparatorForeignKey vs InverseProperty
15618651Di2015UniqueSeparator[ConcurrencyCheck]
15618712Di2015UniqueSeparatornew EndpointHostConfigDi2015NewLine{Di2015NewLine    DefaultContentType = ContentType.Json,Di2015NewLine    EnableFeatures = Feature.NoneDi2015NewLine                            .Add(Feature.Json)Di2015NewLine                            .Add(Feature.PredefinedRoutes),Di2015NewLine    GlobalResponseHeaders = new Dictionary<string, string>(),Di2015NewLine    DefaultRedirectPath = "/documentation"Di2015NewLine}Di2015NewLine
15618763Di2015UniqueSeparatorobject o = new Building(4, "something");Di2015NewLineBuilding c = o as Building;Di2015NewLine
15618763Di2015UniqueSeparatorBuilding o = new Building(4, "something");Di2015NewLine
15618763Di2015UniqueSeparatorpublic void SomeMethod(object o)Di2015NewLine{Di2015NewLine   //you absolutely need a sanity check hereDi2015NewLine   Building c = o as Building;Di2015NewLine   if( c == null )Di2015NewLine      {Di2015NewLine         //throw exception perhapsDi2015NewLine      }Di2015NewLineDi2015NewLine   //this can also be rewritten asDi2015NewLine   Building b = null;Di2015NewLine   if(o != null && o is Building)Di2015NewLine          b = (Building)o;Di2015NewLine   elseDi2015NewLine       //throw exception or log..etcDi2015NewLineDi2015NewLine}Di2015NewLine
15618763Di2015UniqueSeparatorif(o.GetType == typeof(Building))Di2015NewLine    Building buildingCast = o as Building;Di2015NewLine
15618763Di2015UniqueSeparatorBuilding buildingCast = null; //to be able to use outside the ifDi2015NewLineif(o.GetType() == typeof(Building))Di2015NewLine        buildingCast = o as Building;Di2015NewLineDi2015NewLine//you still end up with a null here if cast fails.Di2015NewLine//this is the EXACT procedure of the 'as' operator anywayDi2015NewLine//which does Di2015NewLineBuilding buildingCast = o is Building ? (Building)o : (Building)null;Di2015NewLine
15618769Di2015UniqueSeparatorDataSet ds = new dao_StudentGroup().GetDataSet(null, null, BureauID);Di2015NewLineds.Tables[0].DefaultView.Sort = "grouptitle asc";Di2015NewLineds.Tables[0] = ds.Tables[0].DefaultView.ToTable();Di2015NewLinereturn ds;Di2015NewLine
15618769Di2015UniqueSeparatorpublic DataSet GetAllStudentGroupByBureau(int ? GroupId, int ? BureauID) Di2015NewLine{Di2015NewLine    DataSet ds = new dao_StudentGroup().GetDataSet(null, null, BureauID);Di2015NewLineDi2015NewLine    ds.Tables[0].DefaultView.Sort = "grouptitle asc";        Di2015NewLine    DataTable dt = ds.Tables[0].DefaultView.ToTable();Di2015NewLine    ds.Tables[0].Rows.Clear();Di2015NewLine    foreach (DataRow row in dt.Rows)Di2015NewLine       ds.Tables[0].Rows.Add(row.ItemArray);Di2015NewLineDi2015NewLine    return ds;Di2015NewLine}Di2015NewLine
15618801Di2015UniqueSeparatorpublic interface IOwner {}Di2015NewLineDi2015NewLinepublic interface IStateDi2015NewLine{Di2015NewLine    void Enter(IOwner item);Di2015NewLine}Di2015NewLinepublic class ChaseState : IStateDi2015NewLine{Di2015NewLine    public void Enter(IOwner pl)Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine        //...Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class Player :IOwner { }Di2015NewLinepublic class Something {Di2015NewLine    IOwner owner = new Team();Di2015NewLine    IState globalState = new ChaseState();Di2015NewLine    IState currentState = new DefendState();Di2015NewLineDi2015NewLine    public void Update()Di2015NewLine    {Di2015NewLine        if (globalState != null)Di2015NewLine        {Di2015NewLine            globalState.Enter(owner); Di2015NewLine        }Di2015NewLine        else if (currentState != null)Di2015NewLine        {Di2015NewLine            currentState.Enter(owner);Di2015NewLine        }Di2015NewLine     }Di2015NewLine}Di2015NewLine
15618863Di2015UniqueSeparatorvar result = Di2015NewLinefrom stu in SyStudentDi2015NewLinejoin schsta in syschoolstatus on stu.syschoolstatusid equals schsta.syschoolstatusid //innerDi2015NewLinejoin systa in SyStatus on schsta.SyStatusId equals systa.SyStatusId //innnerDi2015NewLinefrom pic in cmstudentpicture.Where(x => x.systudentid = stu.systudentid).DefaultIfEmpty() //outer Di2015NewLinewhere stu.sycampusid = 6Di2015NewLineselect new{Di2015NewLine    stu,Di2015NewLine    schsta,Di2015NewLine    systa,Di2015NewLine    picDi2015NewLine};Di2015NewLine
15618901Di2015UniqueSeparatorRegex regex = new Regex(@"^(?!411|911|0)\\d{10}$");Di2015NewLine                           +++++++++++++Di2015NewLine
15618910Di2015UniqueSeparatorstandardError
15618910Di2015UniqueSeparatorProcess java = new Process();Di2015NewLinejava.StartInfo.RedirectStandardError = true;Di2015NewLinejava.StartInfo.CreateNoWindow = true;Di2015NewLinejava.StartInfo.UseShellExecute = false;Di2015NewLinejava.StartInfo.FileName = "java";Di2015NewLinejava.StartInfo.Arguments = "-version";Di2015NewLinejava.Start();Di2015NewLineDi2015NewLine// version comes out nullDi2015NewLinestring version = java.StandardError.ReadLine();Di2015NewLineDi2015NewLine// There are probably better ways to extract this data butDi2015NewLine// I want to get it working before I cross that bridge.Di2015NewLinestring versionNumber = version.Substring(16, 1);Di2015NewLineDi2015NewLinejava.Close();Di2015NewLine
15619082Di2015UniqueSeparatorActiveCaption
15619082Di2015UniqueSeparatorByte acR = System.Drawing.SystemColors.ActiveCaption.R;Di2015NewLineByte acG = System.Drawing.SystemColors.ActiveCaption.G;Di2015NewLineByte acB = System.Drawing.SystemColors.ActiveCaption.B;Di2015NewLine
15619266Di2015UniqueSeparatorPrincipalContext ctx = new PrincipalContext(ContextType.Domain);Di2015NewLine
15619266Di2015UniqueSeparatorPrincipalContext ctx = new PrincipalContext(ContextType.Domain, "YOURDOMAINNAME");Di2015NewLine
15619277Di2015UniqueSeparatorToString
15619277Di2015UniqueSeparatorvar result = DateTime.Parse(Di2015NewLine  dReaderGameweekFixtures["fixtureDate"].ToString()Di2015NewLine).ToString("ddd dd");Di2015NewLine
15619359Di2015UniqueSeparatorGetEnumerator()
15619359Di2015UniqueSeparatorforeach (KeyValuePair<Key, Class2>> entry in _MasterFrames)Di2015NewLine    yield return new KeyValuePair<Key1, Class2>(entry.Key.TKeyValue, entry.Value);Di2015NewLine
15619359Di2015UniqueSeparatorKey
15619359Di2015UniqueSeparatorKey1
15619446Di2015UniqueSeparatorWhere (parentID == null && c.ParentID == null) || (parentID == c.ParentID)Di2015NewLine
15619446Di2015UniqueSeparatorWhere (parentID == null) || (parentID == c.ParentID)Di2015NewLine
15619446Di2015UniqueSeparatorWhere (parentID == null) || (parentID != null && parentID == c.ParentID)Di2015NewLine
15619446Di2015UniqueSeparatorParentID = @ParentID
15619446Di2015UniqueSeparatorISNULL
15619449Di2015UniqueSeparatorthis
15619449Di2015UniqueSeparatorref
15619449Di2015UniqueSeparatorthis
15619449Di2015UniqueSeparatorref
15619449Di2015UniqueSeparatorthis
15619449Di2015UniqueSeparatorthis
15619449Di2015UniqueSeparatorref
15619449Di2015UniqueSeparatorref
15619449Di2015UniqueSeparatorthis
15619486Di2015UniqueSeparatorOldStartingIndex
15619486Di2015UniqueSeparatorNotifyCollectionChangeEventArgs
15619486Di2015UniqueSeparatorvar col = new ObservableCollection<string>();Di2015NewLinecol.Add("hello");Di2015NewLinecol.Add("world");Di2015NewLinecol.CollectionChanged += (sender, e) => Console.WriteLine(e.OldStartingIndex);Di2015NewLinecol.RemoveAt(1);Di2015NewLinecol.RemoveAt(0);Di2015NewLine
15619486Di2015UniqueSeparator1Di2015NewLine0Di2015NewLine
15619647Di2015UniqueSeparatorBackColor
15619647Di2015UniqueSeparatorPictureBox
15619647Di2015UniqueSeparatorColor
15619647Di2015UniqueSeparatorPictureBox
15619647Di2015UniqueSeparator// assumes you have NUM_KEYS piano keys / PictureBoxesDi2015NewLineColor[] pianoKeyColors = new Color[NUM_KEYS];Di2015NewLine// fill the pianoKeyColors array with the colors you want,Di2015NewLine// perhaps alternating white-black-white- ...Di2015NewLine// you may want to do that in the constructor for your FormDi2015NewLineDi2015NewLine// you should also store the PictureBox-es in an array, so you can easilyDi2015NewLine// reference the one you wantDi2015NewLineDi2015NewLineprivate void comboBox_selectNote_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // reset all PictureBox-es to the original colorsDi2015NewLine    for (int key = 0; key < NUM_KEYS; key++)Di2015NewLine        pianoKeys[key].BackColor = pianoKeyColors[key];Di2015NewLine    // and then only set the BackColor to Red of keys in the chordDi2015NewLine    switch (comboBox_selectNode.SelectedIndex)Di2015NewLine    {Di2015NewLine        case 0: // C chordDi2015NewLine            pianoKeys[KEY_C1].BackColor = Color.Red;Di2015NewLine            pianoKeys[KEY_E1].BackColor = Color.Red;Di2015NewLine            pianoKeys[KEY_G1].BackColor = Color.RedDi2015NewLine            break;Di2015NewLine        ... and the other cases ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
15619673Di2015UniqueSeparatorYOURSERVER = (DESCRIPTION = (ADDRESS = (PROTOCOL= TCP)Di2015NewLine(Host= <your_server_hostname_or_IP>)(Port= <port>))(CONNECT_DATA = (SID = <DB_instance name>)) )Di2015NewLine
15619673Di2015UniqueSeparatorreturn "Data Source=YOURSERVER; ...Di2015NewLine
15619767Di2015UniqueSeparatorMain
15619767Di2015UniqueSeparatorEnvironment.Exit
15619767Di2015UniqueSeparatorApplication.Exit
15619856Di2015UniqueSeparatorGetAllNetworkInterfaces
15619856Di2015UniqueSeparatorGetIsNetworkAvailable
15620140Di2015UniqueSeparatorone database (shared) in between number of web sites
15620140Di2015UniqueSeparatorfor each Db/table name change - you need a 'code to match'
15620140Di2015UniqueSeparatorIt has to be done at the level of attributes (as @Steven suggested) or fluent configuration.
15620140Di2015UniqueSeparatormega Db
15620140Di2015UniqueSeparatorvariants
15620140Di2015UniqueSeparatorTable
15620140Di2015UniqueSeparatorUpdate-Database -Script
15620140Di2015UniqueSeparatormerge
15620140Di2015UniqueSeparatorone big master script
15620140Di2015UniqueSeparatormigration table
15620146Di2015UniqueSeparator"http://schemas.xmlsoap.org/soap/envelope/"
15620146Di2015UniqueSeparator<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" Di2015NewLine                  xmlns:tem="http://tempuri.org/">Di2015NewLine
15620146Di2015UniqueSeparator<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">Di2015NewLine
15620169Di2015UniqueSeparatorBackground="Transparent"
15620169Di2015UniqueSeparator<Window ...Di2015NewLine   AllowsTransparency="True" Di2015NewLine   WindowStyle="None" Di2015NewLine   Background="Transparent"  >Di2015NewLine
15620205Di2015UniqueSeparator2f
15620205Di2015UniqueSeparatorfloat
15620205Di2015UniqueSeparatorConsole.WriteLine("Division: " + (2f / list.Sum(x => x.Property)));Di2015NewLine
15620205Di2015UniqueSeparator2d
15620205Di2015UniqueSeparatordouble
15620205Di2015UniqueSeparatorConsole.WriteLine("Division: " + (2d / list.Sum(x => x.Property)));Di2015NewLine
15620205Di2015UniqueSeparator2m
15620205Di2015UniqueSeparatordecimal
15620205Di2015UniqueSeparatorConsole.WriteLine("Division: " + (2m / list.Sum(x => x.Property)));Di2015NewLine
15620234Di2015UniqueSeparatorRequestExecutionLevel
15620234Di2015UniqueSeparatorRequireAdministrator
15620341Di2015UniqueSeparator<BaseIntermediateOutputPath>
15620341Di2015UniqueSeparatorobj\\
15620341Di2015UniqueSeparator<PropertyGroup>Di2015NewLine  <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>Di2015NewLine  <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>Di2015NewLine  ...Di2015NewLine  <BaseIntermediateOutputPath>some\\path\\</BaseIntermediateOutputPath>Di2015NewLine</PropertyGroup>Di2015NewLine
15620502Di2015UniqueSeparator<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl<Nullable<System.DateTime>>" %>Di2015NewLine<% if ( Model.HasValue )Di2015NewLine   { %>Di2015NewLine    <%: Html.TextBox( "" , String.Format( "{0:ddd, MMM d, yyyy}" , Model.Value )  )%>Di2015NewLine<% }Di2015NewLine   elseDi2015NewLine   { %>Di2015NewLine   <%: Html.TextBox( "" , String.Format( "{0:ddd, MMM d, yyyy}" , DateTime.Now )  )%>Di2015NewLine<% } %>Di2015NewLine
15620502Di2015UniqueSeparator<%: Html.EditorFor(model => model.nameOfYourField) %> Di2015NewLine
15620582Di2015UniqueSeparator<Canvas Grid.Row="1" Tap="gridTapped">Di2015NewLine    <Image x:Name="ImgA" Source="Assets/A.png" />Di2015NewLine    <Image x:Name="ImgB" Source="Assets/B.png" />Di2015NewLine    <Image x:Name="ImgC" Source="Assets/C.png" />Di2015NewLine</Canvas>Di2015NewLine
15620582Di2015UniqueSeparatorprivate int TopZindex = 10;Di2015NewLineDi2015NewLineprivate void gridTapped(object sender, GestureEventArgs e)Di2015NewLine{Di2015NewLine    var rand = new Random();Di2015NewLine    switch (rand.Next(0, 3))Di2015NewLine    {Di2015NewLine        case 0:Di2015NewLine            Canvas.SetZIndex(this.ImgA, ++TopZindex);Di2015NewLine            break;Di2015NewLine        case 1:Di2015NewLine            Canvas.SetZIndex(this.ImgB, ++TopZindex);Di2015NewLine            break;Di2015NewLine        case 2:Di2015NewLine            Canvas.SetZIndex(this.ImgC, ++TopZindex);Di2015NewLine            break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
15620690Di2015UniqueSeparatorGetRangeMin<float>(0.0f)
15620690Di2015UniqueSeparatorpublic static T GetRangeMin<T>(Expression<Func<T>> value)Di2015NewLine
15620690Di2015UniqueSeparatorvar min = GetRangeMin(() => X);Di2015NewLine
15620690Di2015UniqueSeparatorMemberExpression memberExpression = value.Body as MemberExpression;Di2015NewLineif (null == memberExpression || memberExpression.Member.MemberType != MemberTypes.Property)Di2015NewLine    throw new ArgumentException("Expect a field access", "FieldExpression");Di2015NewLinePropertyInfo propInfo = (PropertyInfo)memberExpression.Member;Di2015NewLine
15620690Di2015UniqueSeparatorGetCustomAttributes
15620690Di2015UniqueSeparatorpropInfo
15620690Di2015UniqueSeparatorAttribute.GetCustomAttributes(propInfo, ...)
15620690Di2015UniqueSeparatorpropInfo.GetCustomAttributes(...)
15620852Di2015UniqueSeparatorpublic class MyEntityDi2015NewLine{Di2015NewLine  // some propsDi2015NewLine}Di2015NewLineDi2015NewLinepublic class MyEntityWithId : MyEntityDi2015NewLine{Di2015NewLine  public int Id { get; set; }Di2015NewLine  // some propsDi2015NewLine}Di2015NewLine
15621090Di2015UniqueSeparatorRegQueryInfoKey
15621090Di2015UniqueSeparator[DllImport("advapi32.dll", EntryPoint="RegQueryInfoKey", CallingConvention=CallingConvention.Winapi, SetLastError=true)]Di2015NewLineextern private static int RegQueryInfoKey(Di2015NewLine    UIntPtr hkey,Di2015NewLine    out StringBuilder lpClass,Di2015NewLine    ref uint lpcbClass,Di2015NewLine    IntPtr lpReserved,Di2015NewLine    out uint lpcSubKeys,Di2015NewLine    out uint lpcbMaxSubKeyLen,Di2015NewLine    out uint lpcbMaxClassLen,Di2015NewLine    out uint lpcValues,Di2015NewLine    out uint lpcbMaxValueNameLen,Di2015NewLine    out uint lpcbMaxValueLen,Di2015NewLine    out uint lpcbSecurityDescriptor,Di2015NewLine    IntPtr lpftLastWriteTime);Di2015NewLine
15621159Di2015UniqueSeparator"time"
15621159Di2015UniqueSeparator"last_visited"
15621159Di2015UniqueSeparatorif (HttpContext.Request.Cookies["last_visited"]==null)Di2015NewLine{Di2015NewLine    HttpCookie cookie = new HttpCookie("last_visited",DateTime.Now.ToString());Di2015NewLine    cookie.Expires = DateTime.Now.AddDays(10);Di2015NewLine    HttpContext.Response.Cookies.Add(cookie);Di2015NewLine}Di2015NewLineelse if(HttpContext.Request.Cookies["last_visited"]!=null)Di2015NewLine{Di2015NewLine    ViewBag.last_visited = HttpContext.Request.Cookies["last_visited"].Value;Di2015NewLine}Di2015NewLine
15621192Di2015UniqueSeparatorgrid1.Children.Remove(excontrol);Di2015NewLine
15621192Di2015UniqueSeparatorRemove
15621239Di2015UniqueSeparatorApplication.Run()
15621239Di2015UniqueSeparatorShow()
15621239Di2015UniqueSeparatorHide()
15621251Di2015UniqueSeparatorprivate IEnumerable<FieldInfo> GetAllFieldsWithAttribute(Type attributeType)Di2015NewLine{Di2015NewLine    return this.GetType().GetFields().Where(Di2015NewLine        f => f.GetCustomAttributes(attributeType, false).Any());Di2015NewLine}Di2015NewLine
15621251Di2015UniqueSeparatorforeach(var s in GetAllFieldsWithAttribute(typeof(ShouldBeInitializedAttribute)))Di2015NewLine
15621251Di2015UniqueSeparatorType
15621251Di2015UniqueSeparatorpublic static IEnumerable<FieldInfo> GetAllFieldsWithAttribute(this Type objectType, Type attributeType)Di2015NewLine{Di2015NewLine    return objectType.GetFields().Where(Di2015NewLine        f => f.GetCustomAttributes(attributeType, false).Any());Di2015NewLine}Di2015NewLine
15621251Di2015UniqueSeparatorthis.GetType().GetAllFieldsWithAttribute(typeof(ShouldBeInitializedAttribute))Di2015NewLine
15621251Di2015UniqueSeparatorGetFields()
15621251Di2015UniqueSeparatorGetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)Di2015NewLine
15621251Di2015UniqueSeparatorobject o = s.GetValue(this);Di2015NewLine
15621290Di2015UniqueSeparatorEnumerable.SelectMany
15621290Di2015UniqueSeparatorList<string> distinctCodes = itemListDi2015NewLine      .SelectMany(x => x.WarehouseInfo)Di2015NewLine      .Select(y => y.LocnCode)Di2015NewLine      .Distinct()Di2015NewLine      .ToList();Di2015NewLine
15621304Di2015UniqueSeparator  INSERT INTO [AccessTable] SELECT * FROM [MS Access;DATABASE=D:\\My Documents\\db2.mdb].[Table2]Di2015NewLine
15621304Di2015UniqueSeparatorstring query_insert = "INSERT INTO Questionnaires_Table " +Di2015NewLine    "(BranchName,Factor,Region,Branch_ID,[Current_Date],No_Employees) " +Di2015NewLine    "SELECT BranchName,Factor,Region,Branch_ID,[Current_Date],No_Employees " +Di2015NewLine    "FROM [MS Access;DATABASE=" + dialog.FileName  + "].Questionnaires_Table " +Di2015NewLine    "Where Branch_ID = @branch";Di2015NewLineDi2015NewLinedbConnDest.Open();Di2015NewLineOleDbCommand cmd_insert = new OleDbCommand(query_insert, dbConnDest);Di2015NewLinecmd_insert.Parameters.AddWithValue("@branch", textBox1.Text);Di2015NewLinecmd.ExecuteNonQuery();Di2015NewLine
15621304Di2015UniqueSeparator"Provider=Microsoft.ACE.OLEDB.12.0;"
15621319Di2015UniqueSeparatorconst
15621319Di2015UniqueSeparatorstatic readonly
15621425Di2015UniqueSeparatorctrl+v
15621425Di2015UniqueSeparator"^{v}"
15621425Di2015UniqueSeparator        textBox1.Focus();Di2015NewLine        SendKeys.Send("^{v}");Di2015NewLine
15621425Di2015UniqueSeparatorSendKeys.Send("^{v}");
15621425Di2015UniqueSeparatortextBox1.Click
15621425Di2015UniqueSeparatortextBox1.Enter
15621633Di2015UniqueSeparatorBaseIntermediateOutputPath
15621633Di2015UniqueSeparatorIntermediateOutputPath
15621633Di2015UniqueSeparator<BaseIntermediateOutputPath>$(BUILD_INTERMEDIATE)\\inter\\</BaseIntermediateOutputPath>Di2015NewLine
15621634Di2015UniqueSeparator<asp:HiddenField ID="hfId" runat="server"  Di2015NewLine    Value='<%# Eval("Id") %>'/>Di2015NewLine<asp:HyperLink ID="myLink" runat="server" Di2015NewLine    Text='<%# Eval("Name") %>' Di2015NewLine    NavigateUrl="/myUrl.aspx" Di2015NewLine    Target="_blank"  />Di2015NewLine<asp:Button ID="btnSubmit" runat="server" Di2015NewLine    Text="Submit" Di2015NewLine    OnClick="BtnClick"Di2015NewLine    Style="display: none;" />Di2015NewLine
15621634Di2015UniqueSeparatorprotected void RptrItemDataBound(object sender, RepeaterItemEventArgs e)Di2015NewLine{Di2015NewLine  if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)Di2015NewLine  {Di2015NewLine    var myId = "";Di2015NewLineDi2015NewLine    var myNameLink = e.Item.FindControl("myLink") as HyperLink;Di2015NewLineDi2015NewLine    if (myNameLink != null)Di2015NewLine    {Di2015NewLine      var submitButton = e.Item.FindControl("btnSubmit") as Button;Di2015NewLineDi2015NewLine      if (submitButton != null)Di2015NewLine      {Di2015NewLine        var submitButtonClientId = submitButton.ClientID;Di2015NewLineDi2015NewLine        myNameLink.Attributes.Add("onclick", "onNameClick('" + submitButtonClientId + "')");Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}//end RptrItemDataBoundDi2015NewLine
15621634Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine  function nameClick(buttonId)Di2015NewLine  {Di2015NewLine    document.getElementById(buttonId).click();Di2015NewLine  }Di2015NewLine</script>Di2015NewLine
15621634Di2015UniqueSeparatorprotected void BtnClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  var btnSelect = sender as Button;Di2015NewLineDi2015NewLine  if (btnSelect == null)Di2015NewLine  {Di2015NewLine    return;Di2015NewLine  }Di2015NewLineDi2015NewLine  var myListItem = (RepeaterItem)btnSelect.DataItemContainer;Di2015NewLineDi2015NewLine  if (myListItem != null)Di2015NewLine  {Di2015NewLine    var hfId = myListItem.FindControl("hfId") as HiddenField;Di2015NewLineDi2015NewLine    if (hfId != null)Di2015NewLine    {Di2015NewLine      var intId = int.Parse(hfId.Value);Di2015NewLineDi2015NewLine      Session["selectedId"] = intId;Di2015NewLine    }//end if (hfId != null)Di2015NewLine  }//end if (myListItem != null)Di2015NewLine}//end btnClickDi2015NewLine
15621765Di2015UniqueSeparatorApplication.Exit();Di2015NewLine
15621765Di2015UniqueSeparatorthis.close();Di2015NewLine
15621765Di2015UniqueSeparatorbool
15621765Di2015UniqueSeparatorflag
15621765Di2015UniqueSeparatorbool
15621765Di2015UniqueSeparatorflag
15621765Di2015UniqueSeparatorflag = true
15621765Di2015UniqueSeparatorfalse
15621765Di2015UniqueSeparatorprotected override void OnFormClosing(FormClosingEventArgs e)Di2015NewLine{Di2015NewLine    if(flag == true)Di2015NewLine         Environment.Exit(0);Di2015NewLine}Di2015NewLine
15621785Di2015UniqueSeparatorRequest
15621785Di2015UniqueSeparatorUrl
15621785Di2015UniqueSeparatorKernal.Bind<IHttpRequest>().To(HttpRequest)
15621785Di2015UniqueSeparatornew Mock<IHttpRequest>()
15621785Di2015UniqueSeparatorHttpRequest
15621785Di2015UniqueSeparatorHttpRequest
15621799Di2015UniqueSeparatorFontWeight
15621799Di2015UniqueSeparator    <Button x:Name="MyButton"Di2015NewLine            Grid.Row="3"Di2015NewLine            Padding="16,10,12,12"Di2015NewLine            FontSize="24"Di2015NewLine            Background="White"Di2015NewLine            HorizontalContentAlignment="Left" >Di2015NewLine            <TextBlock Text="something"Di2015NewLine                       Style="{StaticResource PhoneTextNormalStyle}" Di2015NewLine                       Foreground="#400000"Di2015NewLine                       FontWeight="Thin" />Di2015NewLine        </Button>Di2015NewLine
15621799Di2015UniqueSeparator        <Button x:Name="MyButton"Di2015NewLine                FontWeight="Thin"Di2015NewLine                Grid.Row="3"Di2015NewLine                Content="something"Di2015NewLine                Padding="16,10,12,12"Di2015NewLine                FontSize="24"Di2015NewLine                Background="White"Di2015NewLine                Foreground="#400000"Di2015NewLine                HorizontalContentAlignment="Left" />Di2015NewLine
15621849Di2015UniqueSeparatorMetadataType
15621849Di2015UniqueSeparator[MetadataType(typeof(PayrollMarkupMetadata))Di2015NewLinepublic partial class PayrollMarkup_StateDi2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PayrollMarkupMetadataDi2015NewLine{Di2015NewLine    [UIHint("StatesEditor")]Di2015NewLine    public string State; // Has to have the same type and name as your modelDi2015NewLine    // etc.Di2015NewLine}Di2015NewLine
15621933Di2015UniqueSeparatorLocalOffer.Category
15621933Di2015UniqueSeparatorCategory
15621933Di2015UniqueSeparatorreturn Di2015NewLine    (from o in Table<LocalOffer>() Di2015NewLine     where categories.Contains(o.CategoryId) Di2015NewLine     select o)Di2015NewLine    .Count();Di2015NewLine
15621933Di2015UniqueSeparatorLocalOffer.Category
15621933Di2015UniqueSeparatorIEnumerable<Category>
15621933Di2015UniqueSeparatorreturn Di2015NewLine    (from o in Table<LocalOffer>() Di2015NewLine     where o.Any(c => categories.Contains(c.CategoryId))Di2015NewLine     select o)Di2015NewLine    .Count();Di2015NewLine
15622039Di2015UniqueSeparatorstring
15622039Di2015UniqueSeparatorobject
15622039Di2015UniqueSeparatorstring
15622039Di2015UniqueSeparatorIEnumerable<char>
15622039Di2015UniqueSeparatorobject
15622039Di2015UniqueSeparatorstring
15622039Di2015UniqueSeparatorobject
15622039Di2015UniqueSeparatorIEnumerable<T>
15622039Di2015UniqueSeparatorvoid Foo(object argument)Di2015NewLine{Di2015NewLine    Console.WriteLine("object");Di2015NewLine}Di2015NewLineDi2015NewLinevoid Foo<T>(IEnumerable<T> argument)Di2015NewLine{Di2015NewLine    Console.WriteLine("enumerable T");Di2015NewLine}Di2015NewLineDi2015NewLinevoid Foo(string argument)Di2015NewLine{Di2015NewLine    Console.WriteLine("string");Di2015NewLine}Di2015NewLine
15622039Di2015UniqueSeparatorFoo("hello");Di2015NewLineFoo(1);Di2015NewLineFoo(new int[] { 1 });Di2015NewLine
15622039Di2015UniqueSeparatorstringDi2015NewLineobjectDi2015NewLineenumerable TDi2015NewLine
15622039Di2015UniqueSeparatorvoid Foo(string argument)Di2015NewLine{Di2015NewLine    // Console.WriteLine("string");Di2015NewLine    Foo((object)argument);Di2015NewLine}Di2015NewLine
15622063Di2015UniqueSeparatorSystem.Windows.Forms.Control
15622063Di2015UniqueSeparatorOnPaint
15622063Di2015UniqueSeparatorhWnd
15622226Di2015UniqueSeparatorWindows.Storage
15622366Di2015UniqueSeparatorresult += Convert.ToDouble(row.Cells[2].Value);Di2015NewLine
15622366Di2015UniqueSeparatorif (row.Cells[2].Value != null)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        result += Convert.ToDouble(row.Cells[2].Value);Di2015NewLine    }Di2015NewLine    catch { }Di2015NewLine}Di2015NewLine
15622487Di2015UniqueSeparatorFoo1
15622487Di2015UniqueSeparatorFoo2
15622487Di2015UniqueSeparatorBar
15622487Di2015UniqueSeparatorBar
15622487Di2015UniqueSeparatorFoo1
15622487Di2015UniqueSeparatorFoo2
15622487Di2015UniqueSeparatorBar
15622487Di2015UniqueSeparatorFoo1
15622487Di2015UniqueSeparatorFoo2
15622487Di2015UniqueSeparatorFoo1
15622487Di2015UniqueSeparatorFoo2
15622537Di2015UniqueSeparatorOrderItems
15622537Di2015UniqueSeparatorWarehouseItem
15622537Di2015UniqueSeparatorLocnCode
15622537Di2015UniqueSeparator"A1"
15622537Di2015UniqueSeparatorvar items = itemList.Where(i => i.WarehouseInfo.Any(w => w.LocnCode  == "A1"));Di2015NewLine
15622537Di2015UniqueSeparatorWarehouseItem
15622537Di2015UniqueSeparatorOrderItem
15622537Di2015UniqueSeparatorLocnCode
15622537Di2015UniqueSeparator"A1"
15622537Di2015UniqueSeparatorvar items = itemList.SelectMany(i => i.WarehouseInfo)Di2015NewLine                    .Where(w => w.LocnCode.Equals("A1"));Di2015NewLine
15622537Di2015UniqueSeparatorOrderItems
15622537Di2015UniqueSeparatorWarehouseItem
15622537Di2015UniqueSeparatorLocnCode
15622537Di2015UniqueSeparator"A1"
15622537Di2015UniqueSeparatorWarehouseInfo
15622537Di2015UniqueSeparatorWarehouseItem
15622537Di2015UniqueSeparator    var items = itemList.Where(i => i.WarehouseInfo.Any(w => w.LocnCode  == "A1"))Di2015NewLine                        .Select(i => new OrderItemDi2015NewLine                                     {Di2015NewLine                                         idProduct     = i.idProduct, Di2015NewLine                                         quantity      = i.quantity,Di2015NewLine                                         WarehouseInfo = i.WarehouseInfo.Where(w => w.LocnCode.Equals("A1"));Di2015NewLine                                                                        .ToList()Di2015NewLine                                     }Di2015NewLine                               );Di2015NewLine
15622629Di2015UniqueSeparatorushort[] crc_table = {Di2015NewLine    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,Di2015NewLine    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1efDi2015NewLine};Di2015NewLineDi2015NewLineushort CalculateCrc( byte[] data )Di2015NewLine{Di2015NewLine    int i;Di2015NewLine    ushort crc = 0;Di2015NewLine    int len = data.Length;Di2015NewLineDi2015NewLine    for (int j = 0; j < len; j++)Di2015NewLine    {Di2015NewLine        i = ( crc >> 12 ) ^ ( data[j] >> 4 );Di2015NewLine        crc = (ushort) (crc_table[ i & 0x0F ] ^ ( crc << 4 ));Di2015NewLine        i = ( crc >> 12 ) ^ ( data[j] >> 0 );Di2015NewLine        crc = (ushort) (crc_table[ i & 0x0F ] ^ ( crc << 4 ));Di2015NewLine    }Di2015NewLineDi2015NewLine    return crc;Di2015NewLine}Di2015NewLine
15622641Di2015UniqueSeparatorBarCode
15622641Di2015UniqueSeparatorList<T>
15622641Di2015UniqueSeparatorToString()
15622641Di2015UniqueSeparatorList<T>
15622641Di2015UniqueSeparatorBarCode
15622641Di2015UniqueSeparatorpublic class EanListToStringConverter : IValueConverter {Di2015NewLine   public object Convert(object value, Type targetType, Di2015NewLine                         object parameter, CultureInfo culture) {Di2015NewLine      return String.Join(" ", ((List<Ean>)value).Select(ean => ean.Code));Di2015NewLine   }Di2015NewLine   public object ConvertBack(object value, Type targetType, Di2015NewLine                             object parameter, CultureInfo culture) {Di2015NewLine      return NotSupportedException();Di2015NewLine   }Di2015NewLine}Di2015NewLine
15622641Di2015UniqueSeparator<Grid.Resources>Di2015NewLine    <converters:EanListToStringConverter x:Key="EanListToString"/>Di2015NewLine</Grid.Resources>Di2015NewLine
15622641Di2015UniqueSeparatorBarCode
15622641Di2015UniqueSeparator<DataGridTextColumn Binding="{Binding BarCode, Di2015NewLine    Converter={StaticResource EanListToString}}" Header="BarCodes" />Di2015NewLine
15622892Di2015UniqueSeparatorWindow
15622892Di2015UniqueSeparatorContentControl
15622892Di2015UniqueSeparatorListBox
15622892Di2015UniqueSeparatorUserControl
15622892Di2015UniqueSeparator<Window x:Class="SWS.MainWindow"Di2015NewLine    DataContext="{Binding Main, Source={StaticResource Locator}}"Di2015NewLine    Width="1024"Di2015NewLine    Height="768"Di2015NewLine    MaxWidth="1024"Di2015NewLine    MaxHeight="768">Di2015NewLine    <Grid>Di2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition Width="Auto"/>Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="*" />Di2015NewLine        </Grid.RowDefinitions>Di2015NewLine        <ContentControl Grid.Row="0" Content="{Binding CurrentViewModel}" />Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
15622892Di2015UniqueSeparatorUserControl
15622892Di2015UniqueSeparator<UserControl x:Class="SWS.Views.ProgramView"Di2015NewLine    HorizontalAlignment="Stretch"Di2015NewLine    VerticalAlignment="Stretch">Di2015NewLine    <Grid>Di2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="Auto" />Di2015NewLine            <RowDefinition Height="*" />Di2015NewLine        </Grid.RowDefinitions>Di2015NewLine        ...Di2015NewLine    </Grid>Di2015NewLine</UserControl>Di2015NewLine
15622892Di2015UniqueSeparatorWindow
15622892Di2015UniqueSeparator<Grid.RowDefinitions>...<Grid.RowDefinitions>
15622892Di2015UniqueSeparatorHeight="*"
15622892Di2015UniqueSeparatorHeight
15622892Di2015UniqueSeparatorRowDefinition
15622892Di2015UniqueSeparator<Grid.RowDefinitions>Di2015NewLine    <RowDefinition Height="Auto" />Di2015NewLine    <RowDefinition />Di2015NewLine</Grid.RowDefinitions>Di2015NewLine
15622944Di2015UniqueSeparatorvar form = (Form)Activator.CreateInstance(myType);Di2015NewLineform.ShowDialog();Di2015NewLine
15622948Di2015UniqueSeparatorFlowLayoutPanel
15622948Di2015UniqueSeparatorpanel1
15622948Di2015UniqueSeparatorpanel1.AutoScroll = true;Di2015NewLinepanel1.Dock = DockStyle.Fill; //if you wantDi2015NewLineDi2015NewLineFlowLayoutControl.AutoSize = true;Di2015NewLineFlowLayoutControl.AutoScroll = false;Di2015NewLineFlowLayoutControl.Dock = DockStyle.None;Di2015NewLineFlowLayoutControl.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right;Di2015NewLineFlowLayoutControl.Location = new Point(0,0);Di2015NewLineFlowLayoutControl.Size = new Size(FlowLayoutControl.Width, 0);Di2015NewLine
15623006Di2015UniqueSeparatorCustomer
15623006Di2015UniqueSeparatorint
15623006Di2015UniqueSeparatorstring
15623006Di2015UniqueSeparatorpublic class CustomerLiteDi2015NewLine{Di2015NewLine    public int CustomerId { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLine
15623006Di2015UniqueSeparatorvar liteCustomers = context.CustomersDi2015NewLine                    .Where(c => c.Name.StartsWith("Smith, ")Di2015NewLine                    .Select(c => new CustomerLite()Di2015NewLine                    {Di2015NewLine                        CustomerId = c.CustomerId,Di2015NewLine                        Name = c.NameDi2015NewLine                    })Di2015NewLine                    .ToList();Di2015NewLine
15623006Di2015UniqueSeparatorvar liteCustomers = (from c in context.CustomersDi2015NewLine                     where c.Name.StartsWith("Smith, ")Di2015NewLine                     select new CustomerLite()Di2015NewLine                     {Di2015NewLine                         CustomerId = c.CustomerId,Di2015NewLine                         Name = c.NameDi2015NewLine                     }).ToList();Di2015NewLine
15623120Di2015UniqueSeparator    elseDi2015NewLine    {Di2015NewLine        cmd.Parameters.AddWithValue("@onCampus", 0);Di2015NewLine        cmd.Parameters.AddWithValue("@campusVisitDate",null);  Di2015NewLine    }Di2015NewLine
15623199Di2015UniqueSeparatorm
15623199Di2015UniqueSeparatorm
15623199Di2015UniqueSeparatorIPortion
15623199Di2015UniqueSeparatorint MinIndexInclusive { get; }Di2015NewLineint MaxIndexExclusive { get; }Di2015NewLinedouble FindValue(int index);Di2015NewLine
15623199Di2015UniqueSeparatorArrayPortion
15623199Di2015UniqueSeparatorTreePortion
15623199Di2015UniqueSeparatorTreePortion
15623199Di2015UniqueSeparatorIPortion
15623199Di2015UniqueSeparatorArrayPortion
15623199Di2015UniqueSeparatorTreePortion
15623199Di2015UniqueSeparatorList<IPortion>
15623199Di2015UniqueSeparatorIPortion
15623199Di2015UniqueSeparatorArrayPortion
15623199Di2015UniqueSeparatorRunPortion
15623199Di2015UniqueSeparatorRunPortion
15623430Di2015UniqueSeparatorTimerEventProcessor
15623430Di2015UniqueSeparatorTimer
15623430Di2015UniqueSeparatorcounter
15623430Di2015UniqueSeparatorthis
15623430Di2015UniqueSeparatormyTimer.Enabled
15623430Di2015UniqueSeparatorTimer mytimer = new Timer();Di2015NewLineint counter= 1;Di2015NewLineDi2015NewLineprivate void TimerEventProcessor(object sender, EventArgs e)Di2015NewLine{  Di2015NewLine    this.label1.Text = counter;Di2015NewLine    counter++;Di2015NewLine}Di2015NewLine
15623444Di2015UniqueSeparatorWait
15623444Di2015UniqueSeparatorvoid
15623444Di2015UniqueSeparatorpublic async Task ThrottleRequest(string webservice)Di2015NewLine{Di2015NewLine    if (cache.TryGet(webservice))Di2015NewLine    {Di2015NewLine        var timeToWait = GetTimeToWaitFromSomewhere(); Di2015NewLine        await Wait(timeToWait);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic async Task Wait(TimeSpan timeToWait)Di2015NewLine{Di2015NewLine     await Task.Delay(timeToWait);Di2015NewLine}Di2015NewLine
15623444Di2015UniqueSeparatorWait
15623444Di2015UniqueSeparatorpublic async Task ThrottleRequest(string webservice)Di2015NewLine{Di2015NewLine    if (cache.TryGet(webservice))Di2015NewLine    {Di2015NewLine        var timeToWait = GetTimeToWaitFromSomewhere(); Di2015NewLine        await Task.Delay(timeToWait);Di2015NewLine    }Di2015NewLine}Di2015NewLine
15623444Di2015UniqueSeparatorThrottleRequest
15623444Di2015UniqueSeparatorTask
15623444Di2015UniqueSeparatorWait
15623444Di2015UniqueSeparatorThrottleRequest
15623444Di2015UniqueSeparatorThread.Sleep
15623454Di2015UniqueSeparatorpublic int? ShoeId { get; set; }Di2015NewLine
15623454Di2015UniqueSeparatorShoeId
15623454Di2015UniqueSeparatorShoeShoeId
15623454Di2015UniqueSeparatorShoe
15623454Di2015UniqueSeparatorShoeId
15623454Di2015UniqueSeparatorShoe_ShoeId
15623454Di2015UniqueSeparatorShoeShoeId
15623454Di2015UniqueSeparatorShoe
15623454Di2015UniqueSeparator[ForeignKey("Shoe")]Di2015NewLinepublic int? ShoeShoeId { get; set; }Di2015NewLine
15623506Di2015UniqueSeparator[Table("Section")]Di2015NewLinepublic class SectionDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public virtual int Id { get; set; }Di2015NewLine    public virtual string Description { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[Table("List")]Di2015NewLinepublic class ListDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public virtual int Id { get; set; }Di2015NewLine    [Required]Di2015NewLine    [ForeignKey("Section")]Di2015NewLine    public virtual int SectionId { get; set; }Di2015NewLine    public virtual Section Section { get; set; }Di2015NewLine    [Required]Di2015NewLine    [ForeignKey("IncludedSection")]Di2015NewLine    public virtual int IncludedSectionId { get; set; }Di2015NewLine    public virtual Section IncludedSection { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class SectionContext : DbContextDi2015NewLine{Di2015NewLine    protected override void OnModelCreating(DbModelBuilder modelBuilder)Di2015NewLine    {Di2015NewLine        modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();   Di2015NewLine        base.OnModelCreating(modelBuilder);Di2015NewLine    }Di2015NewLine    public DbSet<Section> Sections { get; set; }Di2015NewLine    public DbSet<List> Lists { get; set; }Di2015NewLine}Di2015NewLine
15623621Di2015UniqueSeparatorSELECT @@IDENTITY
15623621Di2015UniqueSeparatorSELECT @@IDENTITY
15623621Di2015UniqueSeparatorINSERT
15623621Di2015UniqueSeparatorSELECT @@IDENTITY
15623621Di2015UniqueSeparator@@IDENTITY
15623763Di2015UniqueSeparatorpublic interface INamedDi2015NewLine{Di2015NewLine   string Name { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RiverAdapter : INamedDi2015NewLine{Di2015NewLine  private River _river;Di2015NewLine  public string Name { get { return _river.Name; } }Di2015NewLine}Di2015NewLinepublic class CityAdapter : INamedDi2015NewLine{Di2015NewLine  private River _city;Di2015NewLine  public string Name { get { return _city.Name; } }Di2015NewLine}Di2015NewLine
15623763Di2015UniqueSeparatorpublic IEnumerable<INamed> Items { get; set; }Di2015NewLine
15623764Di2015UniqueSeparatorval
15623764Di2015UniqueSeparatorval.ToString
15623764Di2015UniqueSeparatorString.PadLeft
15623764Di2015UniqueSeparatorint leading_width  = 5;Di2015NewLineint decimal_places = 2;Di2015NewLineint val            = 53.4789;Di2015NewLineDi2015NewLinestring str = val.ToString("N" + decimal_places);Di2015NewLinestr = str.PadLeft(leading_width);Di2015NewLine
15623785Di2015UniqueSeparatorusing (System.Drawing.Image img = Image.FromStream(file))Di2015NewLine{Di2015NewLine  imgAnimaha = (System.Drawing.Image)img.Clone();Di2015NewLine}Di2015NewLine
15623987Di2015UniqueSeparatorWorksheets
15623987Di2015UniqueSeparatora.b[1]
15623987Di2015UniqueSeparatora.b["2"]
15623987Di2015UniqueSeparatorpublic SomeType this[int index] { get { ... } }Di2015NewLinepublic SomeType this[string index] { get { ... } }Di2015NewLine
15624063Di2015UniqueSeparator foreach (string applicationName in applicationNames)Di2015NewLine {Di2015NewLine _uow.Applications.Add(Di2015NewLine    new Application Di2015NewLine    { Di2015NewLine        Name = applicationName, Di2015NewLine        ModifiedDate = DateTime.Now,Di2015NewLine        TestAccounts = (from  testAccountName in testAccountNamesDi2015NewLine                        select new TestAccountDi2015NewLine                        { Di2015NewLine                           Name = testAccountName , Di2015NewLine                           ModifiedDate = DateTime.Now Di2015NewLine                       }).ToList()Di2015NewLine    });Di2015NewLine }Di2015NewLine
15624096Di2015UniqueSeparatorConsole.ForegroundColor = (something here);Di2015NewLine
15624096Di2015UniqueSeparatorConsole.ForegroundColor = Di2015NewLine    (ConsoleColor)System.Enum.Parse(typeof(ConsoleColor), USERINPUT);Di2015NewLine
15624096Di2015UniqueSeparatorConsoleColor
15624344Di2015UniqueSeparatorI sleep
15624344Di2015UniqueSeparatorDog barked
15624344Di2015UniqueSeparatorShip will arrive
15624344Di2015UniqueSeparatorSnakes, unlike elephants, are venomous.
15624344Di2015UniqueSeparatorSubject
15624344Di2015UniqueSeparatorAnotherSubject
15624344Di2015UniqueSeparatorVerb
15624344Di2015UniqueSeparatorObject
15624344Di2015UniqueSeparatorSnakes
15624344Di2015UniqueSeparatorelephants
15624344Di2015UniqueSeparatorare
15624344Di2015UniqueSeparatorvenomous
15624416Di2015UniqueSeparatorfile.path
15624416Di2015UniqueSeparatorUri
15624416Di2015UniqueSeparatorfile.path
15624416Di2015UniqueSeparatorc:\\users\\...\\foo.png
15624416Di2015UniqueSeparatorms-appdata:///local/path..to..file.../foo.png
15624416Di2015UniqueSeparatorStorageFile file = await openPicker.PickSingleFileAsync();Di2015NewLineOutputTB.text = file.Name;Di2015NewLineDi2015NewLine// Open a stream for the selected file.Di2015NewLinevar fileStream =Di2015NewLine    await file.OpenAsync(Windows.Storage.FileAccessMode.Read);Di2015NewLineDi2015NewLine// Set the image source to the selected bitmap.Di2015NewLineBitmapImage image = new BitmapImage();Di2015NewLineimage.SetSource(fileStream);Di2015NewLineDi2015NewLineOutputImg.Source = image;Di2015NewLine
15624513Di2015UniqueSeparatorDatabase.SetInitializer(new MigrateDatabaseToLatestVersion<MyDbContext, Configuration>());Di2015NewLine
15624515Di2015UniqueSeparatoremail1[i]
15624515Di2015UniqueSeparatoremail1.Substring(i, 1)
15624515Di2015UniqueSeparatorif (email1[i] == '@' && i + 1 < email1.Length && email1[i + 1] != '@')Di2015NewLine
15624785Di2015UniqueSeparatorpublic class MyBox : TextBoxDi2015NewLine{Di2015NewLine    private readonly DispatcherTimer timer;Di2015NewLineDi2015NewLine    public MyBox()Di2015NewLine    {Di2015NewLine        timer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(1) };Di2015NewLine        timer.Tick += OnTimerTick;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnTextChanged(TextChangedEventArgs e)Di2015NewLine    {Di2015NewLine        timer.Stop();Di2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OnTimerTick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        timer.Stop();Di2015NewLine        // do something hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
15624958Di2015UniqueSeparatorAutoResetEvent
15624958Di2015UniqueSeparatorAutoResetEvent
15624958Di2015UniqueSeparatorInterlocked.CompareExchange
15624958Di2015UniqueSeparatorclass Node<T> { Di2015NewLine  public bool IsMarker;Di2015NewLine  public T Data;Di2015NewLine  public Node<T> Next;Di2015NewLine}Di2015NewLine
15624958Di2015UniqueSeparatorclass Writer<T> {Di2015NewLine  private List<AutoResetEvent> m_list; Di2015NewLine  private Node<T> m_lastMarker;Di2015NewLineDi2015NewLine  public Writer(List<AutoResetEvent> list, Node<T> marker) { Di2015NewLine    m_lastMarker = marker;Di2015NewLine    m_list = list;Di2015NewLine  }Di2015NewLineDi2015NewLine  // Assuming this can't overlap.  If this can overload then you willDi2015NewLine  // need synchronization in this method around the writing of Di2015NewLine  // m_lastMarker      Di2015NewLine  void OnDataRead(T[] items) {Di2015NewLine    if (items.Length == 0) {Di2015NewLine      return;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Build up a linked list of the new data followed by a Di2015NewLine    // Marker to signify the end of the data.  Di2015NewLine    var head = new Node<T>() { Data = items[0] };Di2015NewLine    var current = head;Di2015NewLine    for (int i = 1; i < items.Length; i++) {Di2015NewLine      current.Next = new Node<T>{ Data = items[i] };Di2015NewLine      current = current.Next;Di2015NewLine    }Di2015NewLine    var marker = new Node<T> { IsMarker = true };Di2015NewLine    current.Next = marker;Di2015NewLineDi2015NewLine    // Append the list to the end of the last marker node the writerDi2015NewLine    // created Di2015NewLine    m_lastMarker.Next = head;Di2015NewLine    m_lastMarker = marker;Di2015NewLineDi2015NewLine    // Tell each of the readers that there is new data Di2015NewLine    foreach (var e in m_list) { Di2015NewLine      e.Set();Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
15624958Di2015UniqueSeparatorclass Reader<T> { Di2015NewLine  private AutoResetEvent m_event;Di2015NewLine  private Node<T> m_marker;Di2015NewLineDi2015NewLine  void Go() {Di2015NewLine    while(true) { Di2015NewLine      m_event.WaitOne();Di2015NewLine      var current = m_marker.Next;Di2015NewLine      while (current != null) { Di2015NewLine        if (current.IsMarker) { Di2015NewLine          // Found a new marker.  Always record the marker because it may Di2015NewLine          // be the last marker in the chain Di2015NewLine          m_marker = current;Di2015NewLine        } else { Di2015NewLine          // Actually process the data Di2015NewLine          ProcessData(current.Data);Di2015NewLine        }Di2015NewLine        current = current.Next;Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
15625083Di2015UniqueSeparatorChanging column to 'nullable'
15625083Di2015UniqueSeparatoradding new columns
15625083Di2015UniqueSeparatorshould not delete data
15625083Di2015UniqueSeparatorAdd-Migration
15625083Di2015UniqueSeparatorup
15625083Di2015UniqueSeparatordown
15625119Di2015UniqueSeparatorpublic Form1() {Di2015NewLine  InitializeComponent();Di2015NewLine  toolStripDropDownButton1.MouseEnter += toolStripDropDownButton1_MouseEnter;Di2015NewLine}Di2015NewLineDi2015NewLinevoid toolStripDropDownButton1_MouseEnter(object sender, EventArgs e) {Di2015NewLine  toolStripDropDownButton1.ShowDropDown();Di2015NewLine}Di2015NewLine
