336539Di2015UniqueSeparatorBob b = (Bob).Load("~/customUserControl.ascx");Di2015NewLine
336539Di2015UniqueSeparatorclass Bob : UserControl{Di2015NewLinepublic string User { get; set;}Di2015NewLine}Di2015NewLine
336539Di2015UniqueSeparatorb.User = theuser;Di2015NewLine
336729Di2015UniqueSeparatorbool is64BitProcess = (IntPtr.Size == 8);Di2015NewLinebool is64BitOperatingSystem = is64BitProcess || InternalCheckIsWow64();Di2015NewLineDi2015NewLine[DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.Winapi)]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLineprivate static extern bool IsWow64Process(Di2015NewLine    [In] IntPtr hProcess,Di2015NewLine    [Out] out bool wow64ProcessDi2015NewLine);Di2015NewLineDi2015NewLinepublic static bool InternalCheckIsWow64()Di2015NewLine{Di2015NewLine    if ((Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1) ||Di2015NewLine        Environment.OSVersion.Version.Major >= 6)Di2015NewLine    {Di2015NewLine        using (Process p = Process.GetCurrentProcess())Di2015NewLine        {Di2015NewLine            bool retVal;Di2015NewLine            if (!IsWow64Process(p.Handle, out retVal))Di2015NewLine            {Di2015NewLine                return false;Di2015NewLine            }Di2015NewLine            return retVal;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
336772Di2015UniqueSeparatorMyClass == null
336772Di2015UniqueSeparatormyClass.Property > 0
336772Di2015UniqueSeparatorMyClass == null
336797Di2015UniqueSeparatorusing (StreamReader sr = new StreamReader(path, appropriateEncoding))Di2015NewLine{Di2015NewLine    string line;Di2015NewLine    while ( (line = sr.ReadLine()) != null)Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
336830Di2015UniqueSeparatorpublic static bool IsInRuntimeMode( IComponent component ) {Di2015NewLine    bool ret = IsInDesignMode( component );Di2015NewLine    return !ret;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static bool IsInDesignMode( IComponent component ) {Di2015NewLine    bool ret = false;Di2015NewLine    if ( null != component ) {Di2015NewLine        ISite site = component.Site;Di2015NewLine        if ( null != site ) {Di2015NewLine            ret = site.DesignMode;Di2015NewLine        }Di2015NewLine        else if ( component is System.Windows.Forms.Control ) {Di2015NewLine            IComponent parent = ( (System.Windows.Forms.Control)component ).Parent;Di2015NewLine            ret = IsInDesignMode( parent );Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return ret;Di2015NewLine}Di2015NewLine
336863Di2015UniqueSeparatorSqlConnection conn = null;Di2015NewLineconn = new SqlConnection("yourConnectionString");Di2015NewLineconn.Open();Di2015NewLinestring strSQLCommand = "CREATE VIEW vw_YourView AS SELECT YOurColumn FROM YourTable";Di2015NewLineSqlCommand command = new SqlCommand(strSQLCommand, conn); Di2015NewLinestring returnvalue = (string)command.ExecuteScalar(); Di2015NewLineconn.Close();Di2015NewLine
336913Di2015UniqueSeparatorpublic class Example<TValue>Di2015NewLine{Di2015NewLine    private TValue _value;Di2015NewLine    public TValue ValueDi2015NewLine    {Di2015NewLine        get { return _value; }Di2015NewLine        setDi2015NewLine        {Di2015NewLineDi2015NewLine            if (!object.Equals(_value, value))Di2015NewLine            {Di2015NewLine                _value = value;Di2015NewLine                OnPropertyChanged("Value");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
337008Di2015UniqueSeparatorSystem.Xml.Serialization.XmlSchemaExporter
337091Di2015UniqueSeparatorMethodInfo.GetCurrentMethod().NameDi2015NewLine
337126Di2015UniqueSeparatorwsdl.exe
337143Di2015UniqueSeparatorpublic class OuterDi2015NewLine{Di2015NewLine    private Outer(Builder builder)Di2015NewLine    {Di2015NewLine        // Copy stuffDi2015NewLine    }Di2015NewLineDi2015NewLine    public class BuilderDi2015NewLine    {Di2015NewLine        public Outer Build()Di2015NewLine        {Di2015NewLine            return new Outer(this);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
337171Di2015UniqueSeparatorprivate void resizeThreadSafe(int width, int height)Di2015NewLine{Di2015NewLine    if (this.form.InvokeRequired)Di2015NewLine    {Di2015NewLine        this.form.Invoke(new DelegateSize(resizeThreadSafe,Di2015NewLine            new object[] { width, height });Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    this.form.Size = new Size(width, height);Di2015NewLine    this.form.Location = new Point(0, SystemInformation.MonitorSize // whatever comes nextDi2015NewLine}Di2015NewLine
337246Di2015UniqueSeparatorpublic string FooDi2015NewLine{Di2015NewLine  get;Di2015NewLine  private set;Di2015NewLine}Di2015NewLine
337361Di2015UniqueSeparator      DateTime a = DateTime.Now;Di2015NewLine      DateTime b = a.AddDays(2);Di2015NewLineDi2015NewLine      // ticks are in hnsDi2015NewLine      long ticks = b.Ticks - a.Ticks;Di2015NewLine      long seconds = ticks / 10000000;Di2015NewLine      long minutes = seconds / 60;Di2015NewLine      long hours = minutes / 60;Di2015NewLine      long days = hours / 24;Di2015NewLine
337366Di2015UniqueSeparatornew
337366Di2015UniqueSeparator{
337552Di2015UniqueSeparatorclass Foo {Di2015NewLine  private int bar;Di2015NewLine  public Foo(int bar) { // and any other argsDi2015NewLine      this.bar = bar;Di2015NewLine  }    Di2015NewLine  public void DoStuff() {Di2015NewLine     // ...something involving "bar"Di2015NewLine  } Di2015NewLine}Di2015NewLine...Di2015NewLineFoo foo = new Foo(12);Di2015NewLineThread thread = new Thread(new ThreadStart(foo.DoStuff));Di2015NewLinethread.Start();Di2015NewLine
337565Di2015UniqueSeparatorXMLFile
337565Di2015UniqueSeparatorXDocument doc = XDocument.Parse(MyProject.Properties.Resources.XMLFile);Di2015NewLine
337636Di2015UniqueSeparatorclass Base Di2015NewLine{Di2015NewLine  protected virtual string GetMood() {...}Di2015NewLine}Di2015NewLine
337636Di2015UniqueSeparatorclass Derived : BaseDi2015NewLine{Di2015NewLine  protected override string GetMood() {...}Di2015NewLine}Di2015NewLine
337636Di2015UniqueSeparator  protected sealed override string GetMood() {...}Di2015NewLine
337685Di2015UniqueSeparatorPanel CreatePanelWithDynamicControls() {Di2015NewLine    Panel ret = new Panel();Di2015NewLine    ret.Dock = DockStyle.Fill;Di2015NewLine    // some logic, which initialize content of panelDi2015NewLineDi2015NewLine    return ret;Di2015NewLine}Di2015NewLineDi2015NewLinevoid InitializeDynamicControls() {Di2015NewLine    this.Controls.Clear();Di2015NewLine    Panel pnl = this.CreatePanelWithDynamiControls();Di2015NewLine    this.Controls.Add( pnl );Di2015NewLine}Di2015NewLineDi2015NewLinevoid Form1_Load( object sender, EventArgs e ) {Di2015NewLine    if ( !this.DesignMode ) {Di2015NewLine        this.InitializeDynamicControls();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// I don't know exactly, on which situationDi2015NewLine// do you want reset controlsDi2015NewLinevoid SomeEvent( object sender, EventArgs e ) {Di2015NewLine    this.InitializeDynamicControls();Di2015NewLine}Di2015NewLine
337831Di2015UniqueSeparatorWebClient wClient = new WebClient();Di2015NewLinestring s = wClient.DownloadString(site2);Di2015NewLine
337846Di2015UniqueSeparatorpublic static class ReferenceExtensionsDi2015NewLine{Di2015NewLine    public static TOut IfNotNull<TIn, TOut>(this TIn v, Func<TIn, TOut> f)Di2015NewLine                                    where TIn : class Di2015NewLine                                    where TOut: classDi2015NewLine    {Di2015NewLine        if (v == null)Di2015NewLine            return null;Di2015NewLineDi2015NewLine        return f(v);Di2015NewLine    }Di2015NewLine}Di2015NewLine
337846Di2015UniqueSeparatorvar pixiesDrummer = Music.GetCompany("4ad.com")Di2015NewLine                         .GetBand("Pixes")Di2015NewLine                         .GetMember("David");Di2015NewLine
337846Di2015UniqueSeparatorvar pixiesDrummer = Music.GetCompany("4ad.com")Di2015NewLine                         .IfNotNull(rc => rc.GetBand("Pixes"))Di2015NewLine                         .IfNotNull(band => band.GetMember("David"));Di2015NewLine
337846Di2015UniqueSeparatorpublic static TOut operator| <TIn, TOut>(TIn v, Func<TIn, TOut> f)Di2015NewLine
337846Di2015UniqueSeparatorvar pixiesDrummer = Music.GetCompany("4ad.com")     Di2015NewLine                     | rc => rc.GetBand("Pixes")Di2015NewLine                     | band => band.GetMember("David");Di2015NewLine
337846Di2015UniqueSeparatorlet (|>) x f = f xDi2015NewLine
337846Di2015UniqueSeparatorvar n = Enumerable.Select(numbers, m => m * 2);Di2015NewLine
337846Di2015UniqueSeparatorvar n = numbers.Select(m => m * 2);Di2015NewLine
338308Di2015UniqueSeparatorpublic class BaseEntity {Di2015NewLine    public string MyName() {Di2015NewLine        return this.GetType().NameDi2015NewLine    }Di2015NewLine}Di2015NewLine
338402Di2015UniqueSeparatorthis()
338402Di2015UniqueSeparatorbase()
338760Di2015UniqueSeparatorIMReceiver
338760Di2015UniqueSeparatorCreateLog
338760Di2015UniqueSeparatorMessageReceiver
338760Di2015UniqueSeparatorMessageReceiver
338760Di2015UniqueSeparatorCreateLog
338760Di2015UniqueSeparatorIMReceiver
338760Di2015UniqueSeparatorclass BaseClass{Di2015NewLine  public Log log = Utils.CreateLog();Di2015NewLine}Di2015NewLineclass DerivedClass : BaseClass {Di2015NewLine  public DerivedClass() {Di2015NewLine    log = Utils.CreateLog();Di2015NewLine  }Di2015NewLine}Di2015NewLine
338760Di2015UniqueSeparatornew BaseClass();Di2015NewLine# Log created for BaseClassDi2015NewLineDi2015NewLinenew DerivedClass();Di2015NewLine# Log created for BaseClassDi2015NewLine# Log created for DerivedClassDi2015NewLine
338864Di2015UniqueSeparatorvar sc = new ServiceController() { Name = "SERVICENAME" };Di2015NewLinesc.Start(new string[] { "ARGUMENT" });Di2015NewLinesc.WaitForStatus(ServiceControllerStatus.Running);Di2015NewLine
338991Di2015UniqueSeparatorIDisposable
338991Di2015UniqueSeparatorDispose()
338991Di2015UniqueSeparatorusing
338991Di2015UniqueSeparatorPath.Combine
338991Di2015UniqueSeparatormyEntry.Name
338991Di2015UniqueSeparator    private string UnZipFile(string file, string dirToUnzipTo)Di2015NewLine    {Di2015NewLineDi2015NewLine        string unzippedfile = "";Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            using(Stream inStream = File.OpenRead(file))Di2015NewLine            using (ZipInputStream s = new ZipInputStream(inStream))Di2015NewLine            {Di2015NewLine                ZipEntry myEntry;Di2015NewLine                byte[] data = new byte[4096];Di2015NewLine                while ((myEntry = s.GetNextEntry()) != null)Di2015NewLine                {Di2015NewLine                    string fileWDir = Path.Combine(dirToUnzipTo, myEntry.Name);Di2015NewLine                    string dir = Path.GetDirectoryName(fileWDir);Di2015NewLine                    // note only supports a single level of sub-directories...Di2015NewLine                    if (!Directory.Exists(dir)) Directory.CreateDirectory(dir);Di2015NewLine                    unzippedfile = fileWDir; // note; returns last file if multipleDi2015NewLineDi2015NewLine                    using (FileStream outStream = File.Create(fileWDir))Di2015NewLine                    {Di2015NewLine                        int size;Di2015NewLine                        while ((size = s.Read(data, 0, data.Length)) > 0)Di2015NewLine                        {Di2015NewLine                            outStream.Write(data, 0, size);Di2015NewLine                        }Di2015NewLine                        outStream.Close();Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                s.Close();Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            Console.WriteLine(ex);Di2015NewLineDi2015NewLine        }Di2015NewLine        return (unzippedfile);Di2015NewLine    }Di2015NewLine
339077Di2015UniqueSeparatorIDisposable
339077Di2015UniqueSeparatorIDisposable
339077Di2015UniqueSeparatorDispose()
339077Di2015UniqueSeparatorGC.SuppressFinalize(this)
339077Di2015UniqueSeparatorDispose()
339118Di2015UniqueSeparatorcallvirt
339141Di2015UniqueSeparator1. Convert an HTML into an XHTML with TidyDi2015NewLine2. With the XHTML, use XPath to search for the linkDi2015NewLine    /html/head/link[@type='application/rss+xml']Di2015NewLine
339206Di2015UniqueSeparatorpublic void Each<T>(IEnumerable<T> items, Action<T> action)Di2015NewLine{Di2015NewLine    foreach (var item in items)Di2015NewLine        action(item);Di2015NewLine}Di2015NewLine
339206Di2015UniqueSeparatorEach(myList, i => Console.WriteLine(i));Di2015NewLine
339338Di2015UniqueSeparatorelement => new {Di2015NewLine                ID = element.Attribute("id").Value,Di2015NewLine                Title = element.Element("Title").Value,Di2015NewLine                Body = element.Element("Body").ValueDi2015NewLine               });Di2015NewLine
339369Di2015UniqueSeparatorRegex.Replace(input, @"\\\\(.|$)", "$1");Di2015NewLine
339505Di2015UniqueSeparatorpublic IEnumerable<string[]> CreateEnumerable(StreamReader input)Di2015NewLine{Di2015NewLine    string line;Di2015NewLine    while ((line = input.ReadLine()) != null)Di2015NewLine    {Di2015NewLine        yield return line.Split('þ');Di2015NewLine    }Di2015NewLine}Di2015NewLine
339505Di2015UniqueSeparatorusing (StreamReader sr = new StreamReader("c:\\\\test.file"))Di2015NewLine{Di2015NewLine    var qry = from l in CreateEnumerable(sr).Skip(1)Di2015NewLine              where l[3].Contains("something")Di2015NewLine              select new { Field1 = l[0], Field2 = l[1] };Di2015NewLine    foreach (var item in qry)Di2015NewLine    {Di2015NewLine        Console.WriteLine(item.Field1 + " , " + item.Field2);Di2015NewLine    }Di2015NewLine}Di2015NewLineConsole.ReadLine();Di2015NewLine
339650Di2015UniqueSeparatordecimal
339650Di2015UniqueSeparatorDateTime
339650Di2015UniqueSeparatorTimeSpan
339650Di2015UniqueSeparatorGuid
339650Di2015UniqueSeparatorfloat
339650Di2015UniqueSeparatorint
339650Di2015UniqueSeparatordecimal
339798Di2015UniqueSeparatortt.GetType().GetFields()
339937Di2015UniqueSeparatorInternalsVisibleTo
339979Di2015UniqueSeparatorpublic decimal FindDifference(decimal nr1, decimal nr2)Di2015NewLine{Di2015NewLine  return Math.Abs(nr1 - nr2);Di2015NewLine}Di2015NewLine
340028Di2015UniqueSeparatorvar
340028Di2015UniqueSeparatorvar
340028Di2015UniqueSeparatorIComparer<T>
340150Di2015UniqueSeparatorreturnValue =  ((intervalTop-intervalBottom) * (val-min) / (max-min)) + intervalBottomDi2015NewLine
340164Di2015UniqueSeparatorstring x = @"<document.write(""<SCR""+""IPT TYPE=""'text/javascript' SRC='""+""http""+(window.location.protocol.indexOf('https:')==0?'s':'')+""://""+gDomain+""/""+gDcsId+""/wtid.js""+""'><\\/SCR""+""IPT>"");";Di2015NewLine
340164Di2015UniqueSeparatorvar fromCSharp = {0};Di2015NewLine
340252Di2015UniqueSeparator// Fill the DataSet.Di2015NewLineDataSet ds = new DataSet();Di2015NewLineds.Locale = CultureInfo.InvariantCulture;Di2015NewLineFillDataSet(ds);Di2015NewLineDi2015NewLineList<DataRow> rows = new List<DataRow>();Di2015NewLineDi2015NewLineDataTable contact = ds.Tables["Contact"];Di2015NewLineDi2015NewLine// Get 100 rows from the Contact table.Di2015NewLineIEnumerable<DataRow> query = (from c in contact.AsEnumerable()Di2015NewLine                              select c).Take(100);Di2015NewLineDi2015NewLineDataTable contactsTableWith100Rows = query.CopyToDataTable();Di2015NewLineDi2015NewLine// Add 100 rows to the list.Di2015NewLineforeach (DataRow row in contactsTableWith100Rows.Rows)Di2015NewLine    rows.Add(row);Di2015NewLineDi2015NewLine// Create duplicate rows by adding the same 100 rows to the list.Di2015NewLineforeach (DataRow row in contactsTableWith100Rows.Rows)Di2015NewLine    rows.Add(row);Di2015NewLineDi2015NewLineDataTable table =Di2015NewLine    System.Data.DataTableExtensions.CopyToDataTable<DataRow>(rows);Di2015NewLineDi2015NewLine// Find the unique contacts in the table.Di2015NewLineIEnumerable<DataRow> uniqueContacts =Di2015NewLine    table.AsEnumerable().Distinct(DataRowComparer.Default);Di2015NewLineDi2015NewLineConsole.WriteLine("Unique contacts:");Di2015NewLineforeach (DataRow uniqueContact in uniqueContacts)Di2015NewLine{Di2015NewLine    Console.WriteLine(uniqueContact.Field<Int32>("ContactID"));Di2015NewLine}Di2015NewLine
340526Di2015UniqueSeparatorEqualityComparer<T>
340526Di2015UniqueSeparatorIEqualityComparer<T>
340526Di2015UniqueSeparatorEqualityComparer<T>
340526Di2015UniqueSeparatorIEqualityComparer
340526Di2015UniqueSeparatorreturn x.Id == y.Id && x.Name == y.Name;Di2015NewLine
340526Di2015UniqueSeparatorpublic override bool Equals(Customer x, Customer y)Di2015NewLine{Di2015NewLine    if (object.ReferenceEquals(x, y))Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    if (x == null || y == null)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    return x.Id == y.Id && x.Name == y.Name;Di2015NewLine}Di2015NewLine
340554Di2015UniqueSeparatorBase b = new Derived();Di2015NewLineDerived d = new Derived();Di2015NewLineb.MyMethod(); // Calls Base.MyMethodDi2015NewLined.MyMethod(); // Calls Derived.MyMethodDi2015NewLine
340566Di2015UniqueSeparatorFunc<int>
340566Di2015UniqueSeparatorpublic static void TryCommand(Expression<Func<MyClass,bool>> command,Di2015NewLine                              MyClass c)Di2015NewLine{Di2015NewLine    // Code as before to find the method name etc.Di2015NewLineDi2015NewLine    Func<MyClass, bool> compiled = command.Compile();Di2015NewLineDi2015NewLine    if (!compiled(c))Di2015NewLine    {Di2015NewLine        Console.WriteLine(methodCallExpression.Method.NameDi2015NewLine            + "() failed with error code " + c.GetError());Di2015NewLine    }Di2015NewLine}Di2015NewLine
340566Di2015UniqueSeparatorTryCommand(x => x.SomeMethod(), myClass);Di2015NewLine
340618Di2015UniqueSeparatorpublic delegate void MyClickHandler(object sender, string myValue);Di2015NewLinepublic event MyClickHandler Click = delegate {}; // add empty delegate!Di2015NewLineDi2015NewLine//Let you do this:Di2015NewLinepublic void DoSomething() {Di2015NewLine    Click(this, "foo");Di2015NewLine}Di2015NewLineDi2015NewLine//Instead of this:Di2015NewLinepublic void DoSomething() {Di2015NewLine    if (Click != null) // Unnecessary!Di2015NewLine        Click(this, "foo");Di2015NewLine}Di2015NewLine
340682Di2015UniqueSeparator{get; set;}
340682Di2015UniqueSeparatorclass TestDi2015NewLine{Di2015NewLine    public int n;Di2015NewLine    public int i { get; set; }Di2015NewLine    public void InitAnInt(out int i)Di2015NewLine    {Di2015NewLine        i = 100;Di2015NewLine    }Di2015NewLine    public Test()Di2015NewLine    {Di2015NewLine        InitAnInt(out n); // This is OKDi2015NewLine        InitAnInt(out i); // ERROR: A property or indexer may not be passed Di2015NewLine                          // as an out or ref parameterDi2015NewLine    }Di2015NewLine}Di2015NewLine
340767Di2015UniqueSeparatorpublic void Dispose(bool disposing)Di2015NewLine{Di2015NewLine  if (disposing)Di2015NewLine  {Di2015NewLine     Console.WriteLine("...");Di2015NewLine  }Di2015NewLine  ...Di2015NewLine}Di2015NewLine
341003Di2015UniqueSeparatorSELECT DISTINCTDi2015NewLine     CN.user_idDi2015NewLineFROMDi2015NewLine     dbo.Names NDi2015NewLineINNER JOIN dbo.Connect_Names CN ON CN.name_id = N.name_idDi2015NewLineINNER JOIN dbo.GetTableFromNameList(@names) T ON T.name = N.nameDi2015NewLine
341003Di2015UniqueSeparatorSELECTDi2015NewLine     CN.user_idDi2015NewLineFROMDi2015NewLine     dbo.Names NDi2015NewLineINNER JOIN dbo.Connect_Names CN ON CN.name_id = N.name_idDi2015NewLineINNER JOIN dbo.GetTableFromNameList(@names) T ON T.name = N.nameDi2015NewLineGROUP BY CN.user_idDi2015NewLineHAVING COUNT(*) = (SELECT COUNT(*) FROM dbo.GetTableFromNameList(@names))Di2015NewLine
341147Di2015UniqueSeparator   <asp:ScriptManager ID="smMain" runat="server" />Di2015NewLineDi2015NewLine    <asp:UpdatePanel ID="UpdatePanel1" runat="server" UpdateMode="Always" ChildrenAsTriggers="true" >      Di2015NewLine      <ContentTemplate>Di2015NewLine        <asp:DropDownList ID="DropDownList1" runat="server" AutoPostBack="True"  onselectedindexchanged="DropDownList1_SelectedIndexChanged">Di2015NewLine          <asp:ListItem>item 1</asp:ListItem>Di2015NewLine          <asp:ListItem>item 2</asp:ListItem>Di2015NewLine        </asp:DropDownList>Di2015NewLine      </ContentTemplate>Di2015NewLine    </asp:UpdatePanel>Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    protected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine
341149Di2015UniqueSeparator<see cref="P:System.Collections.ArrayList.Item(System.Int32)" />Di2015NewLine
341200Di2015UniqueSeparatorDateTime.ParseExact(input,"yyyyMMdd HH:mm",null);Di2015NewLine
341565Di2015UniqueSeparator<System.Runtime.CompilerServices.Extension()>
341565Di2015UniqueSeparatorDictionary(Of KeyType, ListType)
341565Di2015UniqueSeparatorValueType
341565Di2015UniqueSeparatorIList(Of TValue)
341702Di2015UniqueSeparatorif(!DidNotPass)Di2015NewLine{    Di2015NewLine    InvalidRoutingCodeFault fault = new InvalidRoutingCodeFault("Invalid Routing Code - No Approval Started");    Di2015NewLine    throw new FaultException<InvalidRoutingCodeFault>(fault, new FaultReason("Invalid Routing Code - No Approval Started"));Di2015NewLine}Di2015NewLine
341771Di2015UniqueSeparatorsession.Linq<Car>.Where(c => c.Manufacturer == "Mercedes").ToList()
341771Di2015UniqueSeparatorsession.Query<Car>.Where(c => c.Manufacturer == "Mercedes").ToList()
341865Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        decimal constant = decimal.MaxValue / 10m;Di2015NewLine        decimal calculated = decimal.MaxValue;Di2015NewLine        calculated /= 10m;Di2015NewLineDi2015NewLine        Console.WriteLine (constant);Di2015NewLine        Console.WriteLine (calculated);        Di2015NewLine    }Di2015NewLine}Di2015NewLine
341865Di2015UniqueSeparator7922816251426433759354395034Di2015NewLine7922816251426433759354395033.5Di2015NewLine
341977Di2015UniqueSeparatorMyStruct ms = new MyStruct();
341977Di2015UniqueSeparatorMyStruct[] array = new MyStruct[1];Di2015NewLineMyStruct ms = array[0];Di2015NewLine
342026Di2015UniqueSeparatorDataSet1 ds = new DataSet1();Di2015NewLineDi2015NewLine//load dataDi2015NewLineDataSet1.ChildTable.SortExpression = "Order";Di2015NewLineDi2015NewLineDataSet1.ParentTableRow parentRow = ds.ParentTable.FindByID(1);Di2015NewLineDataSet1.ChildTableRow[] childRows = parentRow.GetChildTableRows();Di2015NewLineArray.Sort<DataSet1.ChildTableRow>(childRows, new ChildTableCoparer());Di2015NewLine//Enumerate fields is right orderDi2015NewLine
342114Di2015UniqueSeparatorobject
342114Di2015UniqueSeparatorIList
342114Di2015UniqueSeparatorIList list = (IList)actualList;Di2015NewLineobject foo = list[17];Di2015NewLine
342114Di2015UniqueSeparatorCount
342114Di2015UniqueSeparatorint.Parse
342114Di2015UniqueSeparatorCount
342114Di2015UniqueSeparatorint
342178Di2015UniqueSeparator[Serializable]
342178Di2015UniqueSeparatorISerializable
342178Di2015UniqueSeparatorBinaryFormatter
342178Di2015UniqueSeparatorSoapFormatter
342178Di2015UniqueSeparator[Serializable]
342178Di2015UniqueSeparatorIXmlSerializable
342178Di2015UniqueSeparatorpublic
342178Di2015UniqueSeparatorXmlSerializer
342178Di2015UniqueSeparator[DataContract]
342178Di2015UniqueSeparator[MessageContract]
342178Di2015UniqueSeparatorDataContractSerializer
342246Di2015UniqueSeparatorDim x = (From y In context.MyTable _Di2015NewLine         Where y.MyField = value _Di2015NewLine         Select CType(y.MyCounter, Integer?)).MaxDi2015NewLine
342246Di2015UniqueSeparatorvar x = (from y in context.MyTableDi2015NewLine         where y.MyField == valueDi2015NewLine         select (int?)y.MyCounter).Max();Di2015NewLine
342446Di2015UniqueSeparatorXmlSerializer
342446Di2015UniqueSeparatorDataContractSerializer
342446Di2015UniqueSeparatorBinaryFormatter
342548Di2015UniqueSeparator<Grid>Di2015NewLine    <Viewbox VerticalAlignment="Top" HorizontalAlignment="Left">Di2015NewLine
342817Di2015UniqueSeparatorXElement
342817Di2015UniqueSeparatorvar nodes1 = XDocument.Parse(file1).Element("test").Element("nodes");Di2015NewLinevar nodes2 = XDocument.Parse(file2).Element("test").Element("nodes");Di2015NewLineDi2015NewLinenodes1.Nodes().Remove();Di2015NewLinenodes1.Add(nodes2.Nodes());Di2015NewLine
343000Di2015UniqueSeparatorpublic static T2 ExceptionHandler<T1, T2>(RestfulServiceRequest<T1, T2> serviceCall, T1 req)Di2015NewLine
343000Di2015UniqueSeparatorpublic static T2 Invoke<T1, T2>( this T1 req, RestfulServiceRequest<T1, T2> serviceCall)Di2015NewLine
343000Di2015UniqueSeparatorpublic class Initialization :IInitialization {Di2015NewLine    public ApplianceInitResp CreateApplianceServer( ApplianceInitReq req ) {Di2015NewLine        return req.Invoke( r => {Di2015NewLine            // do some workDi2015NewLine            return new ApplianceInitResp();Di2015NewLine        });Di2015NewLine    }Di2015NewLine}Di2015NewLine
343406Di2015UniqueSeparatorpublic static readonly
343406Di2015UniqueSeparatorconst
343478Di2015UniqueSeparatorusing System.Linq;Di2015NewLineDi2015NewLineclass XDi2015NewLine{Di2015NewLine   void Y(IEnumerable<int> collection)Di2015NewLine   {Di2015NewLine      int itemCount = collection.Count();Di2015NewLine   }Di2015NewLine}Di2015NewLine
343552Di2015UniqueSeparator"<foo>"
343640Di2015UniqueSeparatorDebugBreak
343681Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "Default",Di2015NewLine    "{controller}.mvc/{action}/{param1}/{param2}/{param3}"Di2015NewLine    new { controller = "Default", action="Index", param1="", param2="", param3=""});Di2015NewLine
343886Di2015UniqueSeparatorpublic static IEnumerable<Type> GetTypesFromNamespace(Assembly assembly, Di2015NewLine                                               String desiredNamespace)Di2015NewLine{Di2015NewLine    return assembly.GetTypes()Di2015NewLine                   .Where(type => type.Namespace == desiredNamespace);Di2015NewLine}Di2015NewLine
343917Di2015UniqueSeparatorXNodeEqualityComparer
343917Di2015UniqueSeparatorGetHashCode
343917Di2015UniqueSeparatorXNodeEqualityComparer comparer = new XNodeEqualityComparer();Di2015NewLineXDocument doc = XDocument.Load("XmlFile1.xml");Di2015NewLineDictionary<int, XNode> nodeDictionary = new Dictionary<int, XNode>();Di2015NewLineDi2015NewLineforeach (XNode node in doc.Elements("doc").Elements("node"))Di2015NewLine{Di2015NewLine    int hash = comparer.GetHashCode(node);Di2015NewLine    if (nodeDictionary.ContainsKey(hash))Di2015NewLine    {Di2015NewLine        // A duplicate has been found. Execute your logic hereDi2015NewLine        // ...Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        nodeDictionary.Add(hash, node);Di2015NewLine    }Di2015NewLine}Di2015NewLine
343917Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<doc>Di2015NewLine  <node att="A">Blah</node>Di2015NewLine  <node att="A">Blah</node>Di2015NewLine  <node att="B">Di2015NewLine    <inner>Innertext</inner>Di2015NewLine  </node>Di2015NewLine  <node>Blah</node>Di2015NewLine  <node att="B">Di2015NewLine    <inner>Different</inner>Di2015NewLine  </node>Di2015NewLine</doc>Di2015NewLine
343917Di2015UniqueSeparatornodeDictionary
343917Di2015UniqueSeparatorDictionary
343917Di2015UniqueSeparatorContainsKey
343917Di2015UniqueSeparatorXNodeEqualityComparer
343917Di2015UniqueSeparatorGetHashCode
344124Di2015UniqueSeparator.config
344124Di2015UniqueSeparator.testrunconfig
344124Di2015UniqueSeparator.config
344124Di2015UniqueSeparatorbin\\Debug
344124Di2015UniqueSeparator.config
344329Di2015UniqueSeparatorCache.EffectivePrivateBytesLimit
344340Di2015UniqueSeparatorvar matchingProperties = pi.Where(exactNames.Contains(pi.Name) ||Di2015NewLine                          partialNames.Any(name => pi.Name.Contains(name));Di2015NewLineDi2015NewLineforeach (PropertyInfo property in matchingProperties)Di2015NewLine{Di2015NewLine    // StuffDi2015NewLine}Di2015NewLine
344377Di2015UniqueSeparatorclass BaseDi2015NewLine{Di2015NewLine     // Put common stuff in here...Di2015NewLine}Di2015NewLineDi2015NewLineclass Base<T> : Base where T : Base<T>, new()Di2015NewLine{Di2015NewLine    private static T m_instance = new T();Di2015NewLineDi2015NewLine    public static T Instance { get { return m_instance; } }Di2015NewLine}Di2015NewLineDi2015NewLineclass DerivedA : Base<DerivedA> {}Di2015NewLineclass DerivedB : Base<DerivedB> {}Di2015NewLineclass DerivedC : Base<DerivedC> {}Di2015NewLine
344377Di2015UniqueSeparatorList<string>
344377Di2015UniqueSeparatorList<int>
344377Di2015UniqueSeparatorBase<DerivedA>.Instance
344377Di2015UniqueSeparatorDerivedA.Instance
344377Di2015UniqueSeparatorDerivedA.Instance
344377Di2015UniqueSeparatorBase t = DerivedA.Instance;Di2015NewLinet = DerivedB.Instance;Di2015NewLine
344463Di2015UniqueSeparatorHttpContext con = HttpContext.Current;Di2015NewLinecon.Request.Url.ToString()Di2015NewLine
344635Di2015UniqueSeparatorprivate const Choices BackwardsCompatibleThree = (Choices) 3;Di2015NewLine
344764Di2015UniqueSeparator class ProgramDi2015NewLine        {Di2015NewLine            static void Main(string[] args)Di2015NewLine            {Di2015NewLine                XPathDocument saleResults = new XPathDocument( @"salesData.xml" );Di2015NewLine                XPathNavigator navigator = saleResults.CreateNavigator( );Di2015NewLine                XPathExpression selectExpression = navigator.Compile( "sales/item" );Di2015NewLine                XPathExpression sortExpr = navigator.Compile("@sTime");Di2015NewLine                selectExpression.AddSort(sortExpr, new DateTimeComparer());Di2015NewLine                XPathNodeIterator nodeIterator = navigator.Select( selectExpression );            Di2015NewLine                while ( nodeIterator.MoveNext( ) )Di2015NewLine                {Di2015NewLine                    string checkMe = nodeIterator.Current.Value;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            public class DateTimeComparer : IComparerDi2015NewLine            {Di2015NewLine                public int Compare(object x, object y)Di2015NewLine                {Di2015NewLine                    DateTime dt1 = DateTime.Parse( x.ToString( ) );Di2015NewLine                    DateTime dt2 = DateTime.Parse( y.ToString( ) );Di2015NewLine                    return dt1.CompareTo( dt2 );Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
344811Di2015UniqueSeparatorusing System.Linq.Expressions; //in System.Core.dllDi2015NewLineDi2015NewLineExpression BuildExpr(XmlNode xmlNode)Di2015NewLine { switch(xmlNode.Name)Di2015NewLine    { case "Add":Di2015NewLine       { return Expression.Add( BuildExpr(xmlNode.ChildNodes[0])Di2015NewLine                               ,BuildExpr(xmlNode.ChilNodes[1]));Di2015NewLine       } Di2015NewLineDi2015NewLine      /* ... */Di2015NewLineDi2015NewLine    }Di2015NewLine }Di2015NewLine
344859Di2015UniqueSeparatorSELECT *Di2015NewLineFROM syscolumnsDi2015NewLineWHERE id =Di2015NewLine(Di2015NewLine  SELECT idDi2015NewLine  FROM sysobjectsDi2015NewLine  WHERE Name = @ProcNameDi2015NewLine)Di2015NewLine
344859Di2015UniqueSeparatorvar params = Di2015NewLine  db.sysobjectsDi2015NewLine  .Where(o => o.Name == ProcName)Di2015NewLine  .SelectMany(o =>Di2015NewLine    db.syscolumnsDi2015NewLine    .Where(c => c.id == o.id)Di2015NewLine  )Di2015NewLine
345109Di2015UniqueSeparatorvar distinctOwners = (from item in itemsElement.Element("item") Di2015NewLine where itemElements.Attribute("cat") == 1 Di2015NewLineselect item.Attribute("owner")).Distinct();Di2015NewLine
345365Di2015UniqueSeparator    bool lastNotificationWasGotFocus = false;Di2015NewLineDi2015NewLine    protected override void OnControlAdded(ControlEventArgs e)Di2015NewLine    {Di2015NewLine        SubscribeEvents(e.Control);Di2015NewLine        base.OnControlAdded(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnControlRemoved(ControlEventArgs e)Di2015NewLine    {Di2015NewLine        UnsubscribeEvents(e.Control);Di2015NewLine        base.OnControlRemoved(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void SubscribeEvents(Control control)Di2015NewLine    {Di2015NewLine        control.GotFocus += new EventHandler(control_GotFocus);Di2015NewLine        control.LostFocus += new EventHandler(control_LostFocus);Di2015NewLine        control.ControlAdded += new ControlEventHandler(control_ControlAdded);Di2015NewLine        control.ControlRemoved += new ControlEventHandler(control_ControlRemoved);Di2015NewLineDi2015NewLine        foreach (Control innerControl in control.Controls)Di2015NewLine        {Di2015NewLine            SubscribeEvents(innerControl);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void UnsubscribeEvents(Control control)Di2015NewLine    {Di2015NewLine        control.GotFocus -= new EventHandler(control_GotFocus);Di2015NewLine        control.LostFocus -= new EventHandler(control_LostFocus);Di2015NewLine        control.ControlAdded -= new ControlEventHandler(control_ControlAdded);Di2015NewLine        control.ControlRemoved -= new ControlEventHandler(control_ControlRemoved);Di2015NewLineDi2015NewLine        foreach (Control innerControl in control.Controls)Di2015NewLine        {Di2015NewLine            UnsubscribeEvents(innerControl);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void control_ControlAdded(object sender, ControlEventArgs e)Di2015NewLine    {Di2015NewLine        SubscribeEvents(e.Control);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void control_ControlRemoved(object sender, ControlEventArgs e)Di2015NewLine    {Di2015NewLine        UnsubscribeEvents(e.Control);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnGotFocus(EventArgs e)Di2015NewLine    {Di2015NewLine        CheckContainsFocus();Di2015NewLine        base.OnGotFocus(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnLostFocus(EventArgs e)Di2015NewLine    {Di2015NewLine        CheckLostFocus();Di2015NewLine        base.OnLostFocus(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void control_GotFocus(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        CheckContainsFocus();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void control_LostFocus(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        CheckLostFocus();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void CheckContainsFocus()Di2015NewLine    {Di2015NewLine        if (lastNotificationWasGotFocus == false)Di2015NewLine        {Di2015NewLine            lastNotificationWasGotFocus = true;Di2015NewLine            OnContainsFocus();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void CheckLostFocus()Di2015NewLine    {Di2015NewLine        if (ContainsFocus == false)Di2015NewLine        {Di2015NewLine            lastNotificationWasGotFocus = false;Di2015NewLine            OnLostFocus();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OnContainsFocus()Di2015NewLine    {Di2015NewLine        Console.WriteLine("I have the power of focus!");Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OnLostFocus()Di2015NewLine    {Di2015NewLine        Console.WriteLine("I lost my power...");Di2015NewLine    }Di2015NewLine
345464Di2015UniqueSeparatortypeof (IPlugin).Module.FullyQualifiedNameDi2015NewLine
345464Di2015UniqueSeparatorforeach (var type in t.GetInterfaces ()) Di2015NewLine{    Di2015NewLine    Console.WriteLine (type.Module.FullyQualifiedName)Di2015NewLine}Di2015NewLine
345493Di2015UniqueSeparatorobject productName = productAdapter.GetProductName(product_id);Di2015NewLineif ( productName != null )Di2015NewLine{Di2015NewLine    s_product = productName.ToString();Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    s_product = String.Empty;Di2015NewLine}Di2015NewLine
345503Di2015UniqueSeparatorstring s = txtSearch.Text.Trim();Di2015NewLinevar q = from b in db.BlogsDi2015NewLine        where b.BlogContents.Contains(s) || b.BlogTitle.Contains(s)Di2015NewLine        select b;Di2015NewLine
345503Di2015UniqueSeparatortxtSearch
345503Di2015UniqueSeparatorTrim
345503Di2015UniqueSeparators
345503Di2015UniqueSeparator.Text
345503Di2015UniqueSeparator.Trim
345503Di2015UniqueSeparatortxtSearch.Text.Trim()
345523Di2015UniqueSeparator        int value;Di2015NewLine        for (int i = 0; i < 5; i++)Di2015NewLine        {Di2015NewLine            value = i;Di2015NewLine            ThreadPool.QueueUserWorkItem(delegate { Console.WriteLine(value); });Di2015NewLine        }Di2015NewLine        Console.ReadLine();Di2015NewLine
345523Di2015UniqueSeparator        for (int i = 0; i < 5; i++)Di2015NewLine        {Di2015NewLine            int value = i;Di2015NewLine            ThreadPool.QueueUserWorkItem(delegate { Console.WriteLine(value); });Di2015NewLine        }Di2015NewLine        Console.ReadLine();Di2015NewLine
345568Di2015UniqueSeparator            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]Di2015NewLine        public bool Bar {Di2015NewLine            get {Di2015NewLine                try {Di2015NewLine                    return ((bool)(this[this.tableradio.BarColumn]));Di2015NewLine                }Di2015NewLine                catch (global::System.InvalidCastException e) {Di2015NewLine                    throw new global::System.Data.StrongTypingException("The value for column \\'Bar\\' in table \\'radio\\' is DBNull.", e);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            set {Di2015NewLine                this[this.tableradio.BarColumn] = value;Di2015NewLine                this[this.tableradio.FooColumn] = !value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
345607Di2015UniqueSeparatorDi2015NewLineobject o = 1;Di2015NewLineobject z = Enum.ToObject(typeof(E), o); Di2015NewLine
345786Di2015UniqueSeparatorenum Color { Red, Blue }Di2015NewLine
345786Di2015UniqueSeparatorvoid Draw(Color c);Di2015NewLine
345786Di2015UniqueSeparatorColor
345786Di2015UniqueSeparatorvoid Draw(Color? c);Di2015NewLine
345786Di2015UniqueSeparatornull
345786Di2015UniqueSeparatorNone
345836Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        // Getting all instances of notepadDi2015NewLine        // (this is only done once here so start up some notepad instances first)Di2015NewLine        // you may want use GetProcessByPid or GetProcesses and filter them as requiredDi2015NewLine        Process[] processesToWatch = Process.GetProcessesByName("notepad");Di2015NewLineDi2015NewLine        foreach (var process in processesToWatch)Di2015NewLine        {Di2015NewLine            process.EnableRaisingEvents = true;Di2015NewLine            process.Exited +=Di2015NewLine                (s, e) => Console.WriteLine("An instance of notepad exited");Di2015NewLine        }Di2015NewLineDi2015NewLine        Thread watchThread = new Thread(() =>Di2015NewLine            {Di2015NewLine                while (true)Di2015NewLine                {Di2015NewLine                    Process[] processes = Process.GetProcesses();Di2015NewLine                    foreach (var process in processes)Di2015NewLine                    {Di2015NewLine                        Console.WriteLine("{0}:{1}", process.Id, process.ProcessName);Di2015NewLine                    }Di2015NewLine                    // Don't dedicate a thread to this like I'm doing hereDi2015NewLine                    // setup a timer or something similiarDi2015NewLine                    Thread.Sleep(2000);Di2015NewLine                }Di2015NewLine            });Di2015NewLine        watchThread.IsBackground = true;Di2015NewLine        watchThread.Start();Di2015NewLineDi2015NewLine        Console.WriteLine("Polling processes and waiting for notepad process exit events");Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine
345889Di2015UniqueSeparatorIEnumerable<T>
346249Di2015UniqueSeparatorstring path = System.IO.Path.Combine(Environment.CurrentDirectory, Di2015NewLine                                     @"..\\..\\..\\Project2\\xml\\File.xml");Di2015NewLine
346493Di2015UniqueSeparatornamespace MyDefaultNamespace {Di2015NewLine   // original codeDi2015NewLine}Di2015NewLine
346550Di2015UniqueSeparatorContent-Disposition: inline; filename=foo.pdfDi2015NewLine
346614Di2015UniqueSeparatorCOPY model.mdb newdb.mdb
346614Di2015UniqueSeparatorDEL newdb.mdb is the drop
346686Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            FakeMainForm form = new FakeMainForm();Di2015NewLine            form.CreateComponentAndListenForMessage();Di2015NewLine            Console.ReadKey(true);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class FakeMainFormDi2015NewLine    {Di2015NewLine        public FakeMainForm()Di2015NewLine        {Di2015NewLine            Listener.AddListener(MessageRecieved);Di2015NewLine        }Di2015NewLineDi2015NewLine        void MessageRecieved(string msg)Di2015NewLine        {Di2015NewLine            Console.WriteLine("FakeMainForm.MessageRecieved: {0}", msg);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void CreateComponentAndListenForMessage()Di2015NewLine        {Di2015NewLine            ComponentClass component = new ComponentClass();Di2015NewLine            component.PretendToProcessData();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ListenerDi2015NewLine    {Di2015NewLine        private static event Action<string> Notify;Di2015NewLineDi2015NewLine        public static void AddListener(Action<string> handler)Di2015NewLine        {Di2015NewLine            Notify += handler;Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void InvokeListener(string msg)Di2015NewLine        {Di2015NewLine            if (Notify != null) { Notify(msg); }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ComponentClassDi2015NewLine    {Di2015NewLine        public void PretendToProcessData()Di2015NewLine        {Di2015NewLine            Listener.InvokeListener("ComponentClass.PretendToProcessData() was called");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
346772Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    Console.WriteLine("a");Di2015NewLine    yield return 10;Di2015NewLine    Console.WriteLine("b");Di2015NewLine}Di2015NewLinecatch (Something e)Di2015NewLine{Di2015NewLine    Console.WriteLine("Catch block");Di2015NewLine}Di2015NewLineConsole.WriteLine("Post");Di2015NewLine
346772Di2015UniqueSeparatorcase just_before_try_state:Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Console.WriteLine("a");Di2015NewLine    }Di2015NewLine    catch (Something e)Di2015NewLine    {Di2015NewLine        CatchBlock();Di2015NewLine        goto case post;Di2015NewLine    }Di2015NewLine    __current = 10;Di2015NewLine    return true;Di2015NewLineDi2015NewLinecase just_after_yield_return:Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Console.WriteLine("b");Di2015NewLine    }Di2015NewLine    catch (Something e)Di2015NewLine    {Di2015NewLine        CatchBlock();Di2015NewLine    }Di2015NewLine    goto case post;Di2015NewLineDi2015NewLinecase post;Di2015NewLine    Console.WriteLine("Post");Di2015NewLineDi2015NewLineDi2015NewLinevoid CatchBlock()Di2015NewLine{Di2015NewLine    Console.WriteLine("Catch block");Di2015NewLine}Di2015NewLine
346897Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    // try to do "x + (3 * x)"Di2015NewLineDi2015NewLine    var single = BuildSingle<decimal>();Di2015NewLine    var composite = BuildComposite<decimal>();Di2015NewLineDi2015NewLine    Console.WriteLine("{0} vs {1}", single(13.2M), composite(13.2M));Di2015NewLine}Di2015NewLine// utility method to get the 3 as the correct type, since there is not always a "int x T"Di2015NewLinestatic Expression ConvertConstant<TSource, TDestination>(TSource value)Di2015NewLine{Di2015NewLine    return Expression.Convert(Expression.Constant(value, typeof(TSource)), typeof(TDestination));Di2015NewLine}Di2015NewLine// option 1: a single expression tree; this is the most efficientDi2015NewLinestatic Func<T,T> BuildSingle<T>()Di2015NewLine{        Di2015NewLine    var param = Expression.Parameter(typeof(T), "x");Di2015NewLine    Expression body = Expression.Add(param, Expression.Multiply(Di2015NewLine        ConvertConstant<int, T>(3), param));Di2015NewLine    var lambda = Expression.Lambda<Func<T, T>>(body, param);Di2015NewLine    return lambda.Compile();Di2015NewLine}Di2015NewLine// option 2: nested expression trees:Di2015NewLinestatic Func<T, T> BuildComposite<T>()Di2015NewLine{Di2015NewLineDi2015NewLine    // step 1: do the multiply:Di2015NewLine    var paramInner = Expression.Parameter(typeof(T), "inner");Di2015NewLine    Expression bodyInner = Expression.Multiply(Di2015NewLine        ConvertConstant<int, T>(3), paramInner);Di2015NewLine    var lambdaInner = Expression.Lambda(bodyInner, paramInner);Di2015NewLineDi2015NewLine    // step 2: do the add, invoking the existing treeDi2015NewLine    var paramOuter = Expression.Parameter(typeof(T), "outer");Di2015NewLine    Expression bodyOuter = Expression.Add(paramOuter, Expression.Invoke(lambdaInner, paramOuter));Di2015NewLine    var lambdaOuter = Expression.Lambda<Func<T, T>>(bodyOuter, paramOuter);Di2015NewLineDi2015NewLine    return lambdaOuter.Compile();Di2015NewLine}Di2015NewLine
346902Di2015UniqueSeparatorXmlDocument
346902Di2015UniqueSeparator.InnerXml
346902Di2015UniqueSeparatorXElement
346902Di2015UniqueSeparator    StringBuilder sb = new StringBuilder();Di2015NewLine    foreach (var el in foo.Nodes()) sb.AppendLine(el.ToString());Di2015NewLine    string s = sb.ToString();Di2015NewLine
347304Di2015UniqueSeparatorprotected override void Render(HtmlTextWriter writer)Di2015NewLine{Di2015NewLine    base.Render(writer);Di2015NewLine    Response.StatusCode = 404;Di2015NewLine}Di2015NewLine
347304Di2015UniqueSeparator<customErrors mode="On">Di2015NewLine  <error statusCode="404" redirect="404.aspx"/>Di2015NewLine</customErrors>Di2015NewLine
347304Di2015UniqueSeparatorpublic partial class _04 : System.Web.UI.PageDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Response.StatusCode = 404;Di2015NewLine    }Di2015NewLine}Di2015NewLine
347304Di2015UniqueSeparatorHTTP/1.1 404 Not FoundDi2015NewLineServer: Microsoft-IIS/5.1Di2015NewLineDate: Sun, 07 Dec 2008 06:04:13 GMTDi2015NewLineX-Powered-By: ASP.NETDi2015NewLineX-AspNet-Version: 2.0.50727Di2015NewLineCache-Control: privateDi2015NewLineContent-Type: text/html; charset=utf-8Di2015NewLineContent-Length: 533Di2015NewLine
347304Di2015UniqueSeparatorHTTP/1.1 404 Not FoundDi2015NewLineDate: Sun, 07 Dec 2008 06:21:20 GMTDi2015NewLine
347370Di2015UniqueSeparator public class RecipeDetailsDi2015NewLine{Di2015NewLine    public RecipeDetails()Di2015NewLine    {Di2015NewLine        _ingredients = new ObservableCollection<RecipeIngredient>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Name { get; set; }Di2015NewLine    public string Description { get; set; }Di2015NewLineDi2015NewLine    private ObservableCollection<RecipeIngredient> _ingredients;Di2015NewLineDi2015NewLine    private ObservableCollection<RecipeIngredient> IngredientsDi2015NewLine    {Di2015NewLine        get { return _ingredients; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
347466Di2015UniqueSeparator[a-zA-Z0-9]+
347466Di2015UniqueSeparatorString.Split
347474Di2015UniqueSeparatorforeach
347474Di2015UniqueSeparatorRepeater
347474Di2015UniqueSeparatorforeach
347474Di2015UniqueSeparatorRepeater
347474Di2015UniqueSeparatorforeach
347587Di2015UniqueSeparatorSystem.Net.NetworkInformation
347702Di2015UniqueSeparatorpublic void addToList(myOtherClass tmp)Di2015NewLine  {Di2015NewLine    anewList.Add(tmp);Di2015NewLine  }Di2015NewLine
347702Di2015UniqueSeparatormyOtherClass item = new myOtherClass();Di2015NewLineDi2015NewLinefor(int i=0; i < 100; i++)Di2015NewLine{Di2015NewLine  item.Property = i;Di2015NewLine  addToList(item);Di2015NewLine}Di2015NewLine
347702Di2015UniqueSeparatormyOtherClass item = null;Di2015NewLinefor(int i=0; i < 100; i++)Di2015NewLine{Di2015NewLine  item = new myOtherClass();Di2015NewLine  item.Property = i;Di2015NewLine  addToList(item);Di2015NewLine}Di2015NewLine
347907Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine        Mock<ITest> mock = new Mock<ITest>();Di2015NewLine        mock.Expect(m => m.MethodToCheckIfCalled())Di2015NewLine            .Verifiable();Di2015NewLineDi2015NewLine        ClassBeingTested testedClass = new ClassBeingTested();Di2015NewLine        testedClass.WorkMethod(mock.Object);Di2015NewLineDi2015NewLine        mock.Verify(m => m.MethodToCheckIfCalled());Di2015NewLine}Di2015NewLineclass ClassBeingTestedDi2015NewLine{Di2015NewLine    public void WorkMethod(ITest test)Di2015NewLine    {Di2015NewLine        //test.MethodToCheckIfCalled();Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic interface ITestDi2015NewLine{Di2015NewLine    void MethodToCheckIfCalled();Di2015NewLine}Di2015NewLine
348142Di2015UniqueSeparatorpublic abstract class BaseClassDi2015NewLine{Di2015NewLine    public IUnityContainer Container { get; protected set; }Di2015NewLineDi2015NewLine    public BaseClass() : BaseClass(null) {}Di2015NewLineDi2015NewLine    public BaseClass( IUnityContainer container )Di2015NewLine    {Di2015NewLine        this.container = container ?? this.CreateContainer();Di2015NewLine    }Di2015NewLineDi2015NewLine    public abstract IUnityContainer CreateContainer();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DerivedClass : BaseClassDi2015NewLine{Di2015NewLine    public IUnityContainer ChildContainer { get; private set; }Di2015NewLineDi2015NewLine    public DerivedClass() : DerivedClass(null,null) {}Di2015NewLineDi2015NewLine    public DerivedClass( IUnityContainer parent, IUnityContainer child )Di2015NewLine        : BaseClass( parent )Di2015NewLine    {Di2015NewLine        this.ChildContainer = child ?? this.CreateChildContainer();Di2015NewLine    }Di2015NewLineDi2015NewLine    public IUnityContainer CreateContainer()Di2015NewLine    {Di2015NewLine         return new UnityContainer();Di2015NewLine    }Di2015NewLineDi2015NewLine    public IUnityContainer CreateChildContainer()Di2015NewLine    {Di2015NewLine         return this.Container.CreateChildContainer();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
348242Di2015UniqueSeparatorstring MyString = number.ToString("+#;-#");Di2015NewLine
348242Di2015UniqueSeparatorstring MyString = number.ToString("+#;-#;0");Di2015NewLine
348334Di2015UniqueSeparatorvar request = (FtpWebRequest)WebRequest.CreateDi2015NewLine    ("ftp://ftp.domain.com/doesntexist.txt");Di2015NewLinerequest.Credentials = new NetworkCredential("user", "pass");Di2015NewLinerequest.Method = WebRequestMethods.Ftp.GetFileSize;Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    FtpWebResponse response = (FtpWebResponse)request.GetResponse();Di2015NewLine}Di2015NewLinecatch (WebException ex)Di2015NewLine{Di2015NewLine    FtpWebResponse response = (FtpWebResponse)ex.Response;Di2015NewLine    if (response.StatusCode ==Di2015NewLine        FtpStatusCode.ActionNotTakenFileUnavailable)Di2015NewLine    {Di2015NewLine        //Does not existDi2015NewLine    }Di2015NewLine}Di2015NewLine
348334Di2015UniqueSeparatorrequest.UseBinary = true;Di2015NewLine
348334Di2015UniqueSeparatorWebRequestMethods.Ftp.GetDateTimestampDi2015NewLine
348488Di2015UniqueSeparatorprojections.Add(Projections.SqlProjection("1 as PropertyName", new[] {"PropertyName"},Di2015NewLine                                                          new IType[] {NHibernateUtil.Int32}));Di2015NewLine
348800Di2015UniqueSeparatorSystem.DirectoryServices.
348916Di2015UniqueSeparator        int timesheetId = ...Di2015NewLine        DateTime start = ..., end = ...Di2015NewLine        var qry = from timeEntry in ctx.TimeEntriesDi2015NewLine              let date = timeEntry.StartTime.DateDi2015NewLine              where timeEntry.TimesheetId == timesheetIdDi2015NewLine                && date >= startDi2015NewLine                && date <= endDi2015NewLine              group timeEntry by timeEntry.Task.TaskName into grpDi2015NewLine              select new {Di2015NewLine                  TaskName = grp.Key,Di2015NewLine                  Monday = grp.Where(x => x.StartTime.DayOfWeek == DayOfWeek.Monday).Count(),Di2015NewLine                  Tuesday = grp.Where(x => x.StartTime.DayOfWeek == DayOfWeek.Tuesday).Count(),Di2015NewLine                  Wednesday = grp.Where(x => x.StartTime.DayOfWeek == DayOfWeek.Wednesday).Count(),Di2015NewLine                  Thursday = grp.Where(x => x.StartTime.DayOfWeek == DayOfWeek.Thursday).Count(),Di2015NewLine                  Friday = grp.Where(x => x.StartTime.DayOfWeek == DayOfWeek.Friday).Count()Di2015NewLine              };Di2015NewLine
348977Di2015UniqueSeparatorforeach
348977Di2015UniqueSeparatorIEnumerable
348977Di2015UniqueSeparatorIEnumerator
348977Di2015UniqueSeparatorforeach (Foo element in source)Di2015NewLine{Di2015NewLine    // BodyDi2015NewLine}Di2015NewLine
348977Di2015UniqueSeparatorsource
348977Di2015UniqueSeparatorIEnumerable<Foo>
348977Di2015UniqueSeparatorusing (IEnumerator<Foo> iterator = source.GetEnumerator())Di2015NewLine{Di2015NewLine    Foo element;Di2015NewLine    while (iterator.MoveNext())Di2015NewLine    {Di2015NewLine        element = iterator.Current;Di2015NewLine        // BodyDi2015NewLine    }Di2015NewLine}Di2015NewLine
348977Di2015UniqueSeparatorIEnumerator<Foo>
348977Di2015UniqueSeparatorIEnumerable<T>
348977Di2015UniqueSeparatorIEnumerator<T>
348977Di2015UniqueSeparatorpublic IEnumerable<int> EvenNumbers0To10()Di2015NewLine{Di2015NewLine    for (int i=0; i <= 10; i += 2)Di2015NewLine    {Di2015NewLine        yield return i;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// LaterDi2015NewLineforeach (int x in EvenNumbers0To10())Di2015NewLine{Di2015NewLine    Console.WriteLine(x); // 0, 2, 4, 6, 8, 10Di2015NewLine}Di2015NewLine
348977Di2015UniqueSeparatorIEnumerable<T>
348977Di2015UniqueSeparatorpublic class Foo implements IEnumerable<string>Di2015NewLine{Di2015NewLine    public IEnumerator<string> GetEnumerator()Di2015NewLine    {Di2015NewLine        yield return "x";Di2015NewLine        yield return "y";Di2015NewLine    }Di2015NewLineDi2015NewLine    // Explicit interface implementation for nongeneric interfaceDi2015NewLine    IEnumerator IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return GetEnumerator(); // Just return the generic versionDi2015NewLine    }Di2015NewLine}Di2015NewLine
349096Di2015UniqueSeparatorpublic class TestClassDi2015NewLine{Di2015NewLine    public static TestClass operator ??(TestClass  test1, TestClass test2)Di2015NewLine    {Di2015NewLine        return test1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
349244Di2015UniqueSeparatorforeach
349244Di2015UniqueSeparatorSuspendLayout()
349244Di2015UniqueSeparatorResumeLayout()
349244Di2015UniqueSeparatorthis.SuspendLayout();Di2015NewLineDi2015NewLineforeach (FlowLayoutPanel item in _listItems) Di2015NewLine{Di2015NewLine    item.Width = this.Width - 10;Di2015NewLine}Di2015NewLineDi2015NewLinethis.ResumeLayout();Di2015NewLine
349372Di2015UniqueSeparator public class UtilityManagerDi2015NewLine {Di2015NewLine      public Process UtilityProcess { get; private set; }Di2015NewLineDi2015NewLine      private bool _isRunning;Di2015NewLineDi2015NewLine      public UtilityManager() : this(null) {}Di2015NewLineDi2015NewLine      public UtilityManager( Process process )Di2015NewLine      {Di2015NewLine          this. UtilityProcess = process ?? new Process();Di2015NewLine          this._isRunning = false;Di2015NewLine      }Di2015NewLineDi2015NewLine      public void Start()Di2015NewLine      {Di2015NewLine          if (!_isRunning) {Di2015NewLine          var startInfo = new ProcessStartInfo() {Di2015NewLine              CreateNoWindow = true,Di2015NewLine              UseShellExecute = true,Di2015NewLineDi2015NewLine              FileName = _cmdLine,Di2015NewLine              Arguments = _argsDi2015NewLine          };Di2015NewLineDi2015NewLine          this.UtilityProcess.Start(startInfo);Di2015NewLine          _isRunning = true;Di2015NewLineDi2015NewLine      } else {Di2015NewLine          throw new InvalidOperationException("Process already started");Di2015NewLine      }Di2015NewLine }Di2015NewLine
349372Di2015UniqueSeparator [TestMethod]Di2015NewLine public void StartTest()Di2015NewLine {Di2015NewLine      Process proc = new FakeProcess();  // May need to use a wrapper classDi2015NewLine      UtilityManager manager = new UtilityManager( proc );Di2015NewLine      manager.CommandLine = "command";Di2015NewLine      ...Di2015NewLineDi2015NewLine      manager.Start();Di2015NewLineDi2015NewLineDi2015NewLine      Assert.IsTrue( proc.StartCalled );Di2015NewLine      Assert.IsNotNull( proc.StartInfo );Di2015NewLine      Assert.AreEqual( "command", proc.StartInfo.FileName );Di2015NewLine      ...Di2015NewLine }Di2015NewLine
349380Di2015UniqueSeparator            Graphics g = this.tabControl1.TabPages[0].CreateGraphics();Di2015NewLine            SizeF s = g.MeasureString(this.tabControl1.TabPages[0].Text, this.tabControl1.TabPages[0].Font);Di2015NewLine
349575Di2015UniqueSeparatorfunction checkBoxselectedornot()Di2015NewLine{Di2015NewLineDi2015NewLine       var frm=document.forms['aspnetForm'];Di2015NewLine       var flag=false;Di2015NewLine       for(var i=0;i<document.forms[0].length;i++)Di2015NewLine       {Di2015NewLine           if(document.forms[0].elements[i].id.indexOf('chkDownloadSelectedEvent')!=-1)Di2015NewLine           {Di2015NewLine                 if(document.forms[0].elements[i].checked)Di2015NewLine                 {Di2015NewLine                      flag=trueDi2015NewLine                 }  Di2015NewLine           }Di2015NewLine       } Di2015NewLine      if (flag==true)Di2015NewLine      {Di2015NewLine        return trueDi2015NewLine      }elseDi2015NewLine      {Di2015NewLine        alert('Please select at least one Event.')Di2015NewLine        return falseDi2015NewLine      }Di2015NewLineDi2015NewLine}Di2015NewLine
349644Di2015UniqueSeparatorprivate static void FixAlbumArt(FileInfo MyFile)Di2015NewLine{Di2015NewLine  //Find the jpeg file in the directory of the Mp3 FileDi2015NewLine  //We will embed this image into the ID3v2 tagDi2015NewLine  FileInfo[] fiAlbumArt = MyFile.Directory.GetFiles("*.jpg");Di2015NewLine  if (fiAlbumArt.Length < 1)Di2015NewLine  {Di2015NewLine    Console.WriteLine("No Album Art Found in {0}", MyFile.Directory.Name);Di2015NewLine    return;Di2015NewLine  }Di2015NewLine  string AlbumArtFile = fiAlbumArt[0].FullName;Di2015NewLineDi2015NewLine  //Create Mp3 ObjectDi2015NewLine  UltraID3 myMp3 = new UltraID3();Di2015NewLine  myMp3.Read(MyFile.FullName);Di2015NewLine  ID3FrameCollection myArtworkCollection =Di2015NewLine    myMp3.ID3v23Tag.Frames.GetFrames(MultipleInstanceFrameTypes.Picture);Di2015NewLineDi2015NewLine  if (myArtworkCollection.Count > 0)Di2015NewLine  {//Get Rid of the Bad Embedded ArtworkDi2015NewLine    #region Remove All Old ArtworkDi2015NewLine    for (int i = 0; i < myArtworkCollection.Count; i++)Di2015NewLine    {Di2015NewLine      ID3PictureFrame ra = (ID3PictureFrame)myArtworkCollection[0];Di2015NewLine      tryDi2015NewLine      {Di2015NewLine        myMp3.ID3v23Tag.Frames.Remove(FrameTypes.Picture);Di2015NewLine      }Di2015NewLine      catch { }Di2015NewLine    }Di2015NewLine    myArtworkCollection.Clear();Di2015NewLineDi2015NewLine     //Save out our changes so that we are working with theDi2015NewLine    //most up to date file and tagsDi2015NewLine    myMp3.ID3v23Tag.WriteFlag = true;Di2015NewLine    myMp3.Write();Di2015NewLine    myMp3.Read(MyFile.FullName);Di2015NewLine    #endregion Remove All Old ArtworkDi2015NewLine  }Di2015NewLine  //Create a PictureFrame object, pointing it at the image on my PCDi2015NewLine  ID3PictureFrame AlbumArt =Di2015NewLine    new ID3PictureFrame(Di2015NewLine    (System.Drawing.Bitmap)System.Drawing.Bitmap.FromFile(AlbumArtFile),Di2015NewLine    PictureTypes.CoverFront, "Attached picture", TextEncodingTypes.ISO88591);Di2015NewLine  myMp3.ID3v23Tag.Frames.Add(AlbumArt);Di2015NewLine  myMp3.ID3v23Tag.WriteFlag = true;Di2015NewLine  myMp3.Write();Di2015NewLineDi2015NewLine  myMp3 = null;Di2015NewLine}Di2015NewLine
349736Di2015UniqueSeparatorAppendFormat
349736Di2015UniqueSeparatorAppendLine
349736Di2015UniqueSeparatorAppendLine(string.Format(...))
349818Di2015UniqueSeparatorint id = request.QueryString.GetValue<int>("id");Di2015NewLineDateTime date = request.QueryString.GetValue<DateTime>("date");Di2015NewLine
349818Di2015UniqueSeparatorTypeDescriptor
349818Di2015UniqueSeparatorpublic static T GetValue<T>(this NameValueCollection collection, string key)Di2015NewLine{Di2015NewLine    if(collection == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentNullException("collection");Di2015NewLine    }Di2015NewLineDi2015NewLine    var value = collection[key];Di2015NewLineDi2015NewLine    if(value == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentOutOfRangeException("key");Di2015NewLine    }Di2015NewLineDi2015NewLine    var converter = TypeDescriptor.GetConverter(typeof(T));Di2015NewLineDi2015NewLine    if(!converter.CanConvertFrom(typeof(string)))Di2015NewLine    {Di2015NewLine        throw new ArgumentException(String.Format("Cannot convert '{0}' to {1}", value, typeof(T)));Di2015NewLine    }Di2015NewLineDi2015NewLine    return (T) converter.ConvertFrom(value);Di2015NewLine}Di2015NewLine
349919Di2015UniqueSeparatorstatic class PowerSet4<T>Di2015NewLine{Di2015NewLine\static public IEnumerable<IList<T>> powerset(T[] currentGroupList)Di2015NewLine\{Di2015NewLine\\int count = currentGroupList.Length;Di2015NewLine\\Dictionary<long, T> powerToIndex = new Dictionary<long, T>();Di2015NewLine\\long mask = 1L;Di2015NewLine\\for (int i = 0; i < count; i++)Di2015NewLine\\{Di2015NewLine\\\powerToIndex[mask] = currentGroupList[i];Di2015NewLine\\\mask <<= 1;Di2015NewLine\\}Di2015NewLineDi2015NewLine\\Dictionary<long, T> result = new Dictionary<long, T>();Di2015NewLine\\yield return result.Values.ToArray();Di2015NewLineDi2015NewLine\\long max = 1L << count;Di2015NewLine\\for (long i = 1L; i < max; i++)Di2015NewLine\\{Di2015NewLine\\\long key = i & -i;Di2015NewLine\\\if (result.ContainsKey(key))Di2015NewLine\\\\result.Remove(key);Di2015NewLine\\\elseDi2015NewLine\\\\result[key] = powerToIndex[key];Di2015NewLine\\\yield return result.Values.ToArray();Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLine
349947Di2015UniqueSeparator<ListBox Di2015NewLine    VirtualizingStackPanel.IsVirtualizing="True"Di2015NewLine    ItemSource="..."Di2015NewLine    />Di2015NewLine
349959Di2015UniqueSeparatorpublic void GetFileVersion() {Di2015NewLine    // Get the file version for the notepad.Di2015NewLine    FileVersionInfo myFileVersionInfo = FileVersionInfo.GetVersionInfo("%systemroot%\\\\Notepad.exe");Di2015NewLineDi2015NewLine    // Print the file name and version number.Di2015NewLine    textBox1.Text = "File: " + myFileVersionInfo.FileDescription + '\\n' +Di2015NewLine       "Version number: " + myFileVersionInfo.FileVersion;Di2015NewLine }Di2015NewLine
350043Di2015UniqueSeparatorprivate void InvokeHelper(Delegate method, params object[] args)Di2015NewLine
350043Di2015UniqueSeparatorInvokeHelper(foo.MethodA, new object[] { a, b, c});Di2015NewLine
350043Di2015UniqueSeparatorparms
350043Di2015UniqueSeparatorInvokeHelper(foo.MethodA, a, b, c);Di2015NewLine
350043Di2015UniqueSeparatorprivate void InvokeHelper(Action method)Di2015NewLine
350043Di2015UniqueSeparatorInvokeHelper(()=> MyMethodToInvoke(a, b, c));Di2015NewLine
350142Di2015UniqueSeparatorNullReferenceExcpetion
350142Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static string GetDomain(this IIdentity identity)Di2015NewLine    {Di2015NewLine        string s = identity.Name;Di2015NewLine        int stop = s.IndexOf("\\\\");Di2015NewLine        return (stop > -1) ?  s.Substring(0, stop) : string.Empty;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static string GetLogin(this IIdentity identity)Di2015NewLine    {Di2015NewLine        string s = identity.Name;Di2015NewLine        int stop = s.IndexOf("\\\\");Di2015NewLine        return (stop > -1) ? s.Substring(stop + 1, s.Length - stop - 1) : string.Empty;Di2015NewLine    }Di2015NewLine}Di2015NewLine
350142Di2015UniqueSeparatorIIdentity id = HttpContext.Current.User.Identity;Di2015NewLineid.GetLogin();Di2015NewLineid.GetDomain();Di2015NewLine
350374Di2015UniqueSeparatorprivate DateTime GetCacheUtcExpiryDateTime(string cacheKey)Di2015NewLine{Di2015NewLine\object cacheEntry = Cache.GetType().GetMethod("Get", BindingFlags.Instance | BindingFlags.NonPublic).Invoke(Cache, new object[] { cacheKey, 1 });Di2015NewLine\PropertyInfo utcExpiresProperty = cacheEntry.GetType().GetProperty("UtcExpires", BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLine\DateTime utcExpiresValue = (DateTime)utcExpiresProperty.GetValue(cacheEntry, null);Di2015NewLineDi2015NewLine\return utcExpiresValue;Di2015NewLine}Di2015NewLine
350528Di2015UniqueSeparatorList<StatusMessage>
350535Di2015UniqueSeparatorGetWindowThreadProcessId
350535Di2015UniqueSeparatorProcess.GetProcessById
350535Di2015UniqueSeparatorKill
350535Di2015UniqueSeparatorKill
350535Di2015UniqueSeparatorClose
350535Di2015UniqueSeparatorKill
350585Di2015UniqueSeparator   public class DivisionDi2015NewLine    {Di2015NewLine        private int divId;Di2015NewLine        public int DivisionId { get; set; }Di2015NewLineDi2015NewLine        private Collection<Employee> emps;Di2015NewLine        public Collection<Employee> EmployeesDi2015NewLine        { get {return emps?? (emps = new Collection<Employee>(DivisionId));}} Di2015NewLine    }Di2015NewLine
350839Di2015UniqueSeparatorvar q = from X in Choices.Skip((page-1)*pageSize).Take(pageSize)Di2015NewLine        select X;Di2015NewLine
350839Di2015UniqueSeparatorvar q = (from X in ChoicesDi2015NewLine         where x.SomeField == SomeValueDi2015NewLine         select X).Skip((page-1)*pageSize).Take(pageSize);Di2015NewLine
351042Di2015UniqueSeparatorMissingMethodException
351350Di2015UniqueSeparator   private Collection<T> internalCollection;Di2015NewLineDi2015NewLine    public Collection<T> GetDistinctList<T>()Di2015NewLine    {Di2015NewLine        List<string> names = new List<string>();Di2015NewLine        foreach(T thisT in internalCollection)Di2015NewLine           if (!names.Contains(thisT.Name)Di2015NewLine           {Di2015NewLine               names.Add(thisT.Name);Di2015NewLine               yield return thisT;Di2015NewLine           }Di2015NewLine    }Di2015NewLine
351631Di2015UniqueSeparatorDataSet ds = new DataSet();Di2015NewLineds.Tables.Add(new DataTable());Di2015NewLineds.Tables[0].Columns.Add("column_1", typeof(string));Di2015NewLineds.Tables[0].Columns.Add("column_2", typeof(int));Di2015NewLineds.Tables[0].Columns.Add("column_4", typeof(string));Di2015NewLineds.Tables[0].Columns.Add("column_3", typeof(string));Di2015NewLine//set column 3 to be before column 4Di2015NewLineds.Tables[0].Columns[3].SetOrdinal(2);Di2015NewLine
351755Di2015UniqueSeparatorvar periodViewList = Di2015NewLine    (from p in db.DataContext.PeriodsDi2015NewLine    select new PeriodView(Di2015NewLine      p.Name,Di2015NewLine      p.StartDate,Di2015NewLine      p.EndDate,Di2015NewLine      db.DataContext.Invoices.Where(i => i.InvoiceDate >= p.StartDate && i.InvoiceDate <= p.EndDate).Count()Di2015NewLine    )).ToList();Di2015NewLine
351755Di2015UniqueSeparatorpublic PeriodView (string name, DateTime startDate, DateTime endDate, int invoiceCount) {Di2015NewLine...Di2015NewLine}Di2015NewLine
351805Di2015UniqueSeparator [TestMethod]Di2015NewLine public void ConstructorTest()Di2015NewLine {Di2015NewLine      IntPtr handle = new IntPtr(100);Di2015NewLine      MapinfoWindowHandle winHandle = new MapinfoWindowHandle(handle);Di2015NewLine      Assert.AreEqual( handle, ((IWin32Window)winHandle).Handle );Di2015NewLine }Di2015NewLine
351936Di2015UniqueSeparatorpublic static IEnumerable<T> GetRandom<T>( this Table<T> table, int count) where T : class {Di2015NewLine  ...Di2015NewLine}Di2015NewLine
351991Di2015UniqueSeparator< add key="SMTP" value="mail.bhaidar.net" / >Di2015NewLine
352166Di2015UniqueSeparator       var frm=document.forms['aspnetForm'];Di2015NewLine       var flag=false;Di2015NewLine       for(var i=0;i<document.forms[0].length;i++)Di2015NewLine       {Di2015NewLine           if(document.forms[0].elements[i].id.indexOf('chkDownloadSelectedEvent')!=-1)Di2015NewLine           {Di2015NewLine                 if(document.forms[0].elements[i].checked)Di2015NewLine                 {Di2015NewLine                      flag=trueDi2015NewLine                 }  Di2015NewLine           }Di2015NewLine       } Di2015NewLine      if (flag==true)Di2015NewLine      {Di2015NewLine        return trueDi2015NewLine      }elseDi2015NewLine      {Di2015NewLine        alert('Please select at least one Event.')Di2015NewLine        return falseDi2015NewLine      }Di2015NewLineDi2015NewLine}Di2015NewLine
352166Di2015UniqueSeparator            <asp:BoundField ItemStyle-Width ="100px" DataField ="EventStartDate" DataFormatString ="{0:g}" HeaderText ="<%$ Resources:stringsRes, ctl_EventList_StartDate %>" SortExpression ="EventStartDate" HtmlEncode ="true" ItemStyle-Wrap ="false" />Di2015NewLine            <asp:BoundField ItemStyle-Width="100px" DataField="EventDate" DataFormatString="{0:g}" HeaderText="<%$ Resources:stringsRes, ctl_EventList_Date %>"  SortExpression="EventDate" HtmlEncode="true" ItemStyle-Wrap="false" />Di2015NewLine            <asp:ButtonField ItemStyle-Width="150px" ButtonType="Link" DataTextField="EventName" HeaderText="<%$ Resources:stringsRes, ctl_EventList_Event %>"  SortExpression="EventName" CommandName="show_details" CausesValidation="false" />Di2015NewLine            <asp:BoundField DataField="EventLocation" HeaderText="<%$ Resources:stringsRes, ctl_EventList_Location %>" SortExpression="EventLocation" />Di2015NewLine            <asp:TemplateField HeaderText ="Select">Di2015NewLine            <ItemTemplate >Di2015NewLine                <asp:CheckBox ID="chkDownloadSelectedEvent" runat ="server" AutoPostBack ="false" Onclick="eachCheck();"/>                   Di2015NewLineDi2015NewLine            </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine        </Columns>Di2015NewLine        <RowStyle Height="25px" />Di2015NewLine        <HeaderStyle Height="30px"/>Di2015NewLine    </asp:GridView>Di2015NewLine
352210Di2015UniqueSeparatorpublic static void Main()Di2015NewLine{Di2015NewLine    List<Cars> cars = new List<Cars>();Di2015NewLine    List<Animals> animals = new List<Animals>();Di2015NewLine    cars.Add(Cars.Chevrolet);Di2015NewLine    cars.Add(Cars.Honda);Di2015NewLine    cars.Add(Cars.Toyota);Di2015NewLineDi2015NewLine    foreach (Cars value in cars)Di2015NewLine    {Di2015NewLine        // This time the cast is explicit.Di2015NewLine        Animals isItACar = (Animals) value;Di2015NewLine        Console.WriteLine(isItACar.ToString());Di2015NewLine    }Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
352210Di2015UniqueSeparatorforeach
352210Di2015UniqueSeparatorforeach (V v in x)  embedded-statementDi2015NewLine
352210Di2015UniqueSeparator{Di2015NewLine    E e = ((C)(x)).GetEnumerator();Di2015NewLine    try {Di2015NewLine        V v;Di2015NewLine        while (e.MoveNext()) {Di2015NewLine            v = (V)(T)e.Current;Di2015NewLine            embedded-statementDi2015NewLine        }Di2015NewLine    }Di2015NewLine    finally {Di2015NewLine        ... // Dispose eDi2015NewLine    }Di2015NewLine}Di2015NewLine
352421Di2015UniqueSeparatorusing System; // EtcDi2015NewLineDi2015NewLinenamespace Company.Project.FooDi2015NewLine{Di2015NewLine    class BarDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
352551Di2015UniqueSeparatorpublic static byte[] ToXpsDocument(IEnumerable<FixedPage> pages)Di2015NewLine{Di2015NewLine    // XPS DOCUMENTS MUST BE CREATED ON STA THREADS!!!Di2015NewLine    // Note, this is test code, so I don't care about disposing my memory streamsDi2015NewLine    // You'll have to pay more attention to their lifespan.  You might have to Di2015NewLine    // serialize the xps document and remove the package from the package store Di2015NewLine    // before disposing the stream in order to prevent throwing exceptionsDi2015NewLine    byte[] retval = null;Di2015NewLine    Thread t = new Thread(new ThreadStart(() =>Di2015NewLine    {Di2015NewLine        // A memory stream backs our documentDi2015NewLine        MemoryStream ms = new MemoryStream(2048);Di2015NewLine        // a package contains all parts of the documentDi2015NewLine        Package p = Package.Open(ms, FileMode.Create, FileAccess.ReadWrite);Di2015NewLine        // the package store manages packagesDi2015NewLine        Uri u = new Uri("pack://TemporaryPackageUri.xps");Di2015NewLine        PackageStore.AddPackage(u, p);Di2015NewLine        // the document uses our package for storageDi2015NewLine        XpsDocument doc = new XpsDocument(p, CompressionOption.NotCompressed, u.AbsoluteUri);Di2015NewLine        // An xps document is one or more FixedDocuments containing FixedPagesDi2015NewLine        FixedDocument fDoc = new FixedDocument();Di2015NewLine        PageContent pc;Di2015NewLine        foreach (var fp in pages)Di2015NewLine        {Di2015NewLine            // this part of the framework is weak and hopefully will be fixed in 4.0Di2015NewLine            pc = new PageContent();Di2015NewLine            ((IAddChild)pc).AddChild(fp);Di2015NewLine            fDoc.Pages.Add(pc);Di2015NewLine        }Di2015NewLine        // we use the writer to write the fixed document to the xps documentDi2015NewLine        XpsDocumentWriter writer;Di2015NewLine        writer = XpsDocument.CreateXpsDocumentWriter(doc);Di2015NewLine        // The paginator controls page breaks during the writing processDi2015NewLine        // its important since xps document content does not flow Di2015NewLine        writer.Write(fDoc.DocumentPaginator);Di2015NewLine        // Di2015NewLine        p.Flush();Di2015NewLineDi2015NewLine        // this part serializes the doc to a stream so we can get the bytesDi2015NewLine        ms = new MemoryStream();Di2015NewLine        var writer = new XpsSerializerFactory().CreateSerializerWriter(ms);Di2015NewLine        writer.Write(doc.GetFixedDocumentSequence());Di2015NewLineDi2015NewLine        retval = ms.ToArray();Di2015NewLine    }));Di2015NewLine    // Instantiating WPF controls on a MTA thread throws exceptionsDi2015NewLine    t.SetApartmentState(ApartmentState.STA);Di2015NewLine    // adjust as neededDi2015NewLine    t.Priority = ThreadPriority.AboveNormal;Di2015NewLine    t.IsBackground = false;Di2015NewLine    t.Start();Di2015NewLine    //~five seconds to finish or we bailDi2015NewLine    int milli = 0;Di2015NewLine    while (buffer == null && milli++ < 5000)Di2015NewLine        Thread.Sleep(1);Di2015NewLine    //Ditch the threadDi2015NewLine    if(t.IsAlive)Di2015NewLine        t.Abort();Di2015NewLine    // If we time out, we return null.Di2015NewLine    return retval;Di2015NewLine}Di2015NewLine
352666Di2015UniqueSeparatorgzip
353018Di2015UniqueSeparatorclass Container Di2015NewLine{        Di2015NewLine//...        Di2015NewLinepublic void ForEach(Action<MyObj> method) Di2015NewLine{            Di2015NewLine    foreach (MyClass myObj in sequence) method(myObj);        Di2015NewLine}    Di2015NewLine}   Di2015NewLineDi2015NewLine//...    containerObj.ForEach( myobj => myObj.Method() );Di2015NewLine
353134Di2015UniqueSeparatorpublic abstract class MetadataDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Metadata<DataType> : MetaData where DataType : structDi2015NewLine{Di2015NewLine    private DataType mDataType;Di2015NewLine}Di2015NewLine
353160Di2015UniqueSeparatorselect is_nullable Di2015NewLinefrom   sys.columnsDi2015NewLinewhere  object_id = OBJECT_ID('tablename')  Di2015NewLineand    name = 'columnname';Di2015NewLine
353195Di2015UniqueSeparatorDbFoo
353195Di2015UniqueSeparatorFoo
353195Di2015UniqueSeparatorwhere row.DbFoo == SomeConstantDi2015NewLine
353195Di2015UniqueSeparatorpublic IOrderedQueryable<User> AdministratorsDi2015NewLine{Di2015NewLine    get { return Users.Where(x => x.DbUserType == User.UserTypeAdmin)Di2015NewLine             .OrderBy(x => x.Name);Di2015NewLine}Di2015NewLine
353195Di2015UniqueSeparatorUser.UserTypeAdmin
353300Di2015UniqueSeparator .Accounts.OfType<UserAccount>()...Di2015NewLine
353300Di2015UniqueSeparatorpartial class Account : IAccount {Di2015NewLine   // extra code hereDi2015NewLine}Di2015NewLine
353350Di2015UniqueSeparator@"(?is)<SPAN\\b[^>]*>\\s*(<SPAN\\b[^>]*>.*?</SPAN>)\\s*</SPAN>"Di2015NewLine
353435Di2015UniqueSeparatortypeof(Test): 2756msDi2015NewLineTestType (field): 1175msDi2015NewLinetest.GetType(): 3734msDi2015NewLine
353435Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Runtime.CompilerServices;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    const int Iterations = 100000000;Di2015NewLineDi2015NewLine    private static readonly Type TestType = typeof(Test);Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        int total = 0;Di2015NewLine        // Make sure it's JIT-compiledDi2015NewLine        Log(typeof(Test)); Di2015NewLineDi2015NewLine        Stopwatch sw = Stopwatch.StartNew();Di2015NewLine        for (int i = 0; i < Iterations; i++)Di2015NewLine        {Di2015NewLine            total += Log(typeof(Test));Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine("typeof(Test): {0}ms", sw.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        sw = Stopwatch.StartNew();Di2015NewLine        for (int i = 0; i < Iterations; i++)Di2015NewLine        {Di2015NewLine            total += Log(TestType);Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine("TestType (field): {0}ms", sw.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        Test test = new Test();Di2015NewLine        sw = Stopwatch.StartNew();Di2015NewLine        for (int i = 0; i < Iterations; i++)Di2015NewLine        {Di2015NewLine            total += Log(test.GetType());Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine("test.GetType(): {0}ms", sw.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLineDi2015NewLine    // I suspect your real Log method won't be inlined,Di2015NewLine    // so let's mimic that hereDi2015NewLine    [MethodImpl(MethodImplOptions.NoInlining)]Di2015NewLine    static int Log(Type type)Di2015NewLine    {Di2015NewLine        return 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
353450Di2015UniqueSeparatorSendMessage
353450Di2015UniqueSeparatorclass MyClass {Di2015NewLine   IntPtr hwnd;Di2015NewLine   public MyClass(IntPtr hwnd) {Di2015NewLine      this.hwnd = hwnd;Di2015NewLine   }Di2015NewLine   ...Di2015NewLineDi2015NewLine   private void DoStuff()Di2015NewLine   {Di2015NewLine       //n.b. we don't necessarily know if the handle is still validDi2015NewLine       DoSomethingWithTheHandle(hwnd);Di2015NewLine   }Di2015NewLine}Di2015NewLine
353450Di2015UniqueSeparator private void DoOtherStuff() {Di2015NewLine     Form f = new Form();Di2015NewLine     mc = new MyClass(f.Handle);Di2015NewLine }Di2015NewLine
353450Di2015UniqueSeparatorf
353450Di2015UniqueSeparatorDispose
353450Di2015UniqueSeparatorGc.KeepAlive
353450Di2015UniqueSeparatorf
353450Di2015UniqueSeparatormc
353533Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Console.WriteLine("Common Types: " + GetCommonBaseClass(new Type[] {typeof(OleDbCommand), typeof(OdbcCommand), typeof(SqlCommand)}).ToString());   Di2015NewLine}Di2015NewLine
353533Di2015UniqueSeparator    static Type GetCommonBaseClass(Type[] types)Di2015NewLine    {Di2015NewLine        if (types.Length == 0)Di2015NewLine            return (typeof(object));Di2015NewLine        else if (types.Length == 1)Di2015NewLine            return (types[0]);Di2015NewLineDi2015NewLine        // Copy the parameter so we can substitute base class types in the array without messing up the callerDi2015NewLine        Type[] temp = new Type[types.Length];Di2015NewLineDi2015NewLine        for (int i = 0; i < types.Length; i++)Di2015NewLine        {Di2015NewLine            temp[i] = types[i];Di2015NewLine        }Di2015NewLineDi2015NewLine        bool checkPass = false;Di2015NewLineDi2015NewLine        Type tested = null;Di2015NewLineDi2015NewLine        while (!checkPass)Di2015NewLine        {Di2015NewLine            tested = temp[0];Di2015NewLineDi2015NewLine            checkPass = true;Di2015NewLineDi2015NewLine            for (int i = 1; i < temp.Length; i++)Di2015NewLine            {Di2015NewLine                if (tested.Equals(temp[i]))Di2015NewLine                    continue;Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    // If the tested common basetype (current) is the indexed type's base typeDi2015NewLine                    // then we can continue with the test by making the indexed type to be its base typeDi2015NewLine                    if (tested.Equals(temp[i].BaseType))Di2015NewLine                    {Di2015NewLine                        temp[i] = temp[i].BaseType;Di2015NewLine                        continue;Di2015NewLine                    }Di2015NewLine                    // If the tested type is the indexed type's base type, then we need to change all indexed typesDi2015NewLine                    // before the current type (which are all identical) to be that base type and restart this loopDi2015NewLine                    else if (tested.BaseType.Equals(temp[i]))Di2015NewLine                    {Di2015NewLine                        for (int j = 0; j <= i - 1; j++)Di2015NewLine                        {Di2015NewLine                            temp[j] = temp[j].BaseType;Di2015NewLine                        }Di2015NewLineDi2015NewLine                        checkPass = false;Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine                    // The indexed type and the tested type are not relatedDi2015NewLine                    // So make everything from index 0 up to and including the current indexed type to be their base typeDi2015NewLine                    // because the common base type must be further backDi2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        for (int j = 0; j <= i; j++)Di2015NewLine                        {Di2015NewLine                            temp[j] = temp[j].BaseType;Di2015NewLine                        }Di2015NewLineDi2015NewLine                        checkPass = false;Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            // If execution has reached here and checkPass is true, we have found our common base type, Di2015NewLine            // if checkPass is false, the process starts over with the modified typesDi2015NewLine        }Di2015NewLineDi2015NewLine        // There's always at least objectDi2015NewLine        return tested;Di2015NewLine    }Di2015NewLine
353583Di2015UniqueSeparatorpublic void CopyTo(Di2015NewLine    int sourceIndex,Di2015NewLine    char[] destination,Di2015NewLine    int destinationIndex,Di2015NewLine    int countDi2015NewLine)Di2015NewLine
353624Di2015UniqueSeparatorProcessStartInfo si = new ProcessStartInfo("nslookup");Di2015NewLinesi.RedirectStandardInput = true;Di2015NewLinesi.RedirectStandardOutput = true;Di2015NewLineProcess nslookup = new Process(si);Di2015NewLinenslookup.Start();Di2015NewLinenslookup.StandardInput.WriteLine("ls -a mydomain.local");Di2015NewLinenslookup.StandardInput.Flush();Di2015NewLine// use nslookup.StandardOutput stream to read the result.Di2015NewLine
353827Di2015UniqueSeparatorprivate void button1_Click ( object sender, EventArgs e )Di2015NewLine{           Di2015NewLine    if( (ModifierKeys  & Keys.Control) == Keys.Control )Di2015NewLine    {Di2015NewLine        ControlClickMethod();    Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        ClickMethod();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ControlClickMethod()Di2015NewLine{Di2015NewLine    MessageBox.Show( "Control is pressed" );Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ClickMethod()Di2015NewLine{Di2015NewLine    MessageBox.Show ( "Control is not pressed" );Di2015NewLine}Di2015NewLine
353861Di2015UniqueSeparatorFunc<T,string>
353861Di2015UniqueSeparatorpublic static void AppendCollection<T>(this StringBuilder sb, Di2015NewLine                                       IEnumerable<T> collection, Func<T, string> method) {Di2015NewLine   foreach(T x in collection) Di2015NewLine       sb.AppendLine(method(x));Di2015NewLine}Di2015NewLine
353889Di2015UniqueSeparatorOnExceptionAspect
353889Di2015UniqueSeparator[Serializable]Di2015NewLinepublic sealed class LogExceptionAttribute : OnExceptionAspectDi2015NewLine{Di2015NewLine    public override void OnException(MethodExecutionEventArgs eventArgs)Di2015NewLine    {Di2015NewLine        //do some logging hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
353889Di2015UniqueSeparator[Serializable]Di2015NewLine[MulticastAttributeUsage(... Add Appropriate MulticastTargets ...)]Di2015NewLinepublic sealed class LogExceptionAttribute : ExceptionHandlerAspectDi2015NewLine{Di2015NewLine    public override void OnException(MethodExecutionEventArgs eventArgs)Di2015NewLine    {Di2015NewLine        //do some logging hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
353924Di2015UniqueSeparatorHashSet<T>
354063Di2015UniqueSeparator<br />
354063Di2015UniqueSeparator<asp:GridView ID="GridView1" runat="server" DataSourceID="Data">Di2015NewLine<Columns>Di2015NewLine    <asp:BoundField HeaderText="First Line<br />Second Line" DataField="ContactID"Di2015NewLine                HtmlEncode="False" />Di2015NewLine    <asp:BoundField HeaderText="Second" DataField="FirstName" />Di2015NewLine    <asp:BoundField HeaderText="Third<br />Extra" DataField="Title" />Di2015NewLine</Columns>Di2015NewLine</asp:GridView>Di2015NewLine
354063Di2015UniqueSeparator<
354063Di2015UniqueSeparator<
354142Di2015UniqueSeparatorDim variable As TDi2015NewLine' or 'Di2015NewLineDim variable As T = NothingDi2015NewLine' or 'Di2015NewLineDim variable As New T()Di2015NewLine
354142Di2015UniqueSeparatorNew
354142Di2015UniqueSeparatorStructure
354142Di2015UniqueSeparatornull
354142Di2015UniqueSeparatorNothing
354142Di2015UniqueSeparatorstring
354142Di2015UniqueSeparator""
354198Di2015UniqueSeparatorprotected void WindowsAuthentication_OnAuthenticate(object sender, WindowsAuthenticationEventArgs e)Di2015NewLine{Di2015NewLine    if (!Roles.IsUserInRole(e.Identity.Name, "Users"))Di2015NewLine    {Di2015NewLine        Roles.AddUsersToRole(new string[] { e.Identity.Name }, "Users");Di2015NewLine    }Di2015NewLine}Di2015NewLine
354448Di2015UniqueSeparatorprivate void panel1_MouseLeave(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (panel1.GetChildAtPoint(panel1.PointToClient(MousePosition)) == null)Di2015NewLine    {Di2015NewLine        panel1.BackColor = Color.Gray;Di2015NewLine    }Di2015NewLine}Di2015NewLine
354448Di2015UniqueSeparatorprivate void panel1_MouseLeave(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Rectangle screenBounds = new Rectangle(this.PointToScreen(panel1.Location), panel1.Size);Di2015NewLine    if (!screenBounds.Contains(MousePosition))Di2015NewLine    {Di2015NewLine        panel1.BackColor = Color.Gray;Di2015NewLine    }Di2015NewLine}Di2015NewLine
354470Di2015UniqueSeparator{"FirstName":"Martin","LastName":"Mihaylov"}
354470Di2015UniqueSeparator[{"FirstName":"Martin","LastName":"Mihaylov"},{"FirstName":"Emil","LastName":"Stoychev"}]
354470Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class PersonDi2015NewLine{Di2015NewLineDi2015NewLine    [DataMember]Di2015NewLine    public string FirstNameDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine    [DataMember]Di2015NewLine    public string LastNameDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
354470Di2015UniqueSeparatorpublic static string SerializeToJsonString(object objectToSerialize)Di2015NewLine{Di2015NewLine    using (MemoryStream ms = new MemoryStream())Di2015NewLine    {Di2015NewLine        DataContractJsonSerializer serializer =Di2015NewLine        new DataContractJsonSerializer(objectToSerialize.GetType());Di2015NewLine        serializer.WriteObject(ms, objectToSerialize);Di2015NewLine        ms.Position = 0;Di2015NewLineDi2015NewLineDi2015NewLine        using (StreamReader reader = new StreamReader(ms))Di2015NewLine        {Di2015NewLine            return reader.ReadToEnd();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
354470Di2015UniqueSeparatorpublic static T Deserialize<T>(string jsonString)Di2015NewLine{Di2015NewLineDi2015NewLine    using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(jsonString)))Di2015NewLine    {Di2015NewLineDi2015NewLine        DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(T));Di2015NewLineDi2015NewLineDi2015NewLine        return (T)serializer.ReadObject(ms);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
354470Di2015UniqueSeparatorList<Person> persons = Deserialize<List<Person>>( jsonString );Di2015NewLine
354585Di2015UniqueSeparator    IPAddress[] host;Di2015NewLine    IPAddress[] local;Di2015NewLine    bool isLocal = false;Di2015NewLineDi2015NewLine    host = Dns.GetHostAddresses(uri.Host);Di2015NewLine    local = Dns.GetHostAddresses(Dns.GetHostName());Di2015NewLineDi2015NewLine    foreach (IPAddress hostAddress in host)Di2015NewLine    {Di2015NewLine        if (IPAddress.IsLoopback(hostAddress))Di2015NewLine        {Di2015NewLine            isLocal = true;Di2015NewLine            break;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            foreach (IPAddress localAddress in local)Di2015NewLine            {Di2015NewLine                if (hostAddress.Equals(localAddress))Di2015NewLine                {Di2015NewLine                    isLocal = true;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            if (isLocal)Di2015NewLine            {Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
354616Di2015UniqueSeparatorIEnumerable<string>
354616Di2015UniqueSeparatorExpression<Func<string, string, string>>
354616Di2015UniqueSeparatorFunc<string, string, string>
354857Di2015UniqueSeparatorFooSourceDS.ObjectType = typeof(myNamespace.FooSource)Di2015NewLine
354961Di2015UniqueSeparator string q = @"SELECT [t0].[Id], [t0].[CODE] AS [arg0], [t0].[DESC] AS [arg1] FROM [SchemaName].[TableName] AS [t0] WHERE ([t0].[Id] <> @p0)";Di2015NewLine            int fromIndex = q.IndexOf("FROM")+5;Di2015NewLine            int asIndex = q.IndexOf("AS",fromIndex);Di2015NewLine            q = q.Substring(fromIndex, asIndex - fromIndex);Di2015NewLine
355029Di2015UniqueSeparatorstring s;Di2015NewLinedouble epislon = 0.0000001; // or however near zero you want to consider as zeroDi2015NewLineif (Math.Abs(value) < epislon) {Di2015NewLine    int digits = Math.Log10( Math.Abs( value ));Di2015NewLine    // if (digits >= 0) ++digits; // if you care about the exact numberDi2015NewLine    if (digits < -5) {Di2015NewLine       s = string.Format( "{0:0.000000000}", value );Di2015NewLine    }Di2015NewLine    else if (digits < 0) {Di2015NewLine       s = string.Format( "{0:0.00000})", value );Di2015NewLine    }Di2015NewLine    else {Di2015NewLine       s = string.Format( "{0:#,###,###,##0.000}", value );Di2015NewLine    }Di2015NewLine}Di2015NewLineelse {Di2015NewLine    s = "0";Di2015NewLine}Di2015NewLine
355122Di2015UniqueSeparator<input type="text" id="testBox" value="blah" />Di2015NewLine
355186Di2015UniqueSeparatorpublic class EntityDi2015NewLine{Di2015NewLine   public class BuilderDi2015NewLine   {Di2015NewLine     private int _field1;Di2015NewLine     private int _field2;Di2015NewLine     private int _field3;Di2015NewLineDi2015NewLine     public Builder WithField1(int value) { _field1 = value; return this; }Di2015NewLine     public Builder WithField2(int value) { _field2 = value; return this; }Di2015NewLine     public Builder WithField3(int value) { _field3 = value; return this; }Di2015NewLineDi2015NewLine     public Entity Build() { return new Entity(_field1, _field2, _field3); }Di2015NewLine   }Di2015NewLineDi2015NewLine   private int _field1;Di2015NewLine   private int _field2;Di2015NewLine   private int _field3;Di2015NewLineDi2015NewLine   private Entity(int field1, int field2, int field3) Di2015NewLine   {Di2015NewLine     // Set the fields.Di2015NewLine   }Di2015NewLineDi2015NewLine   public int Field1 { get { return _field1; } }Di2015NewLine   public int Field2 { get { return _field2; } }Di2015NewLine   public int Field3 { get { return _field3; } }Di2015NewLineDi2015NewLine   public static Builder Build() { return new Builder(); }Di2015NewLine}Di2015NewLine
355186Di2015UniqueSeparatorEntity myEntity = Entity.Build()Di2015NewLine                   .WithField1(123)Di2015NewLine                   .WithField2(456)Di2015NewLine                   .WithField3(789)Di2015NewLine                  .Build()Di2015NewLine
355276Di2015UniqueSeparatorPage &[Page] of &[Pages]Di2015NewLine
355276Di2015UniqueSeparatorprint ActiveSheet.PageSetup.CenterFooterDi2015NewLine
355276Di2015UniqueSeparatorPage &P of &NDi2015NewLine
355513Di2015UniqueSeparator//user is a DirectoryEntryDi2015NewLineIADsTSUserEx adsiUser = (IADsTSUserEx)user.NativeObject;Di2015NewLine
355736Di2015UniqueSeparatorvar pollAction = '<%=Url.Action("CheckStatus", "MyController") %>';Di2015NewLine
355749Di2015UniqueSeparatorvar processStartInfo = new ProcessStartInfo("someoldapp.exe", "-p someparameters");Di2015NewLineDi2015NewLineprocessStartInfo.UseShellExecute = false;Di2015NewLineprocessStartInfo.ErrorDialog = false;Di2015NewLineDi2015NewLineprocessStartInfo.RedirectStandardError = true;Di2015NewLineprocessStartInfo.RedirectStandardInput = true;Di2015NewLineprocessStartInfo.RedirectStandardOutput = true;Di2015NewLineprocessStartInfo.CreateNoWindow = true;Di2015NewLineDi2015NewLineProcess process = new Process();Di2015NewLineprocess.StartInfo = processStartInfo;Di2015NewLinebool processStarted = process.Start();Di2015NewLineDi2015NewLineStreamWriter inputWriter = process.StandardInput;Di2015NewLineStreamReader outputReader = process.StandardOutput;Di2015NewLineStreamReader errorReader = process.StandardError;Di2015NewLineprocess.WaitForExit();Di2015NewLine
355805Di2015UniqueSeparatorWebClient
355829Di2015UniqueSeparatorMutexSecurity and MutexAccessRule ?Di2015NewLine
355852Di2015UniqueSeparatorlitWeight.Text = Utility.FormatWeight(person.Weight);Di2015NewLine
355977Di2015UniqueSeparatorvar most = list.GroupBy(i=>i).OrderByDescending(grp=>grp.Count())Di2015NewLine      .Select(grp=>grp.Key).First();Di2015NewLine
355977Di2015UniqueSeparatorvar most = (from i in listDi2015NewLine            group i by i into grpDi2015NewLine            orderby grp.Count() descendingDi2015NewLine            select grp.Key).First();Di2015NewLine
355977Di2015UniqueSeparatorpublic static T MostCommon<T>(this IEnumerable<T> list)Di2015NewLine{Di2015NewLine    return ... // previous codeDi2015NewLine}Di2015NewLine
355977Di2015UniqueSeparatorvar most = list.MostCommon();Di2015NewLine
355982Di2015UniqueSeparatorpublic struct user Di2015NewLine{ Di2015NewLine    public string FirstName; Di2015NewLine    public string LastName; Di2015NewLine    public string zilionotherproperties; Di2015NewLine    public bool SearchByLastNameOnly; Di2015NewLine    public datetime date1;Di2015NewLine}Di2015NewLine
356096Di2015UniqueSeparatorpublic class ChildContainer2 : IChildContainerDi2015NewLine{Di2015NewLine    private IUnityContainer _container;Di2015NewLineDi2015NewLine    public ChildContainer(IUnityContainer parent)Di2015NewLine    {Di2015NewLine        _container = parent.CreateChildContainer();Di2015NewLine    }Di2015NewLineDi2015NewLine    public IUnityContainer Container { get { return _container; } }Di2015NewLine}Di2015NewLine
356383Di2015UniqueSeparator/// <summary>Di2015NewLine/// Replaces each occurrence of sPattern in sInput with sReplace. This is done Di2015NewLine/// with the CLR: Di2015NewLine/// new RegEx(sPattern, RegexOptions.Multiline).Replace(sInput, sReplace). Di2015NewLine/// The result of the replacement is the return value.Di2015NewLine/// </summary>Di2015NewLine[SqlFunction(IsDeterministic = true)]Di2015NewLine[return: SqlFacet(MaxSize = -1)]Di2015NewLinepublic static  SqlString FRegexReplace([SqlFacet(MaxSize = -1)]string sInput, Di2015NewLine       string sPattern, string sReplace)Di2015NewLine{Di2015NewLine    return new Regex(sPattern, RegexOptions.Multiline).Replace(sInput, sReplace);Di2015NewLine}Di2015NewLine
356383Di2015UniqueSeparatornvarchar(4000)
356383Di2015UniqueSeparator[return: AttributeName(Parameter=Value, ...)]
356466Di2015UniqueSeparatorAppDomain.CurrentDomain.AssemblyResolveDi2015NewLine
356466Di2015UniqueSeparatorpublic SDKClass()Di2015NewLine{Di2015NewLine  AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(FindAssembly);Di2015NewLine}Di2015NewLineDi2015NewLineprivate Assembly FindAssembly(object sender, ResolveEventArgs args)Di2015NewLine{Di2015NewLine  string assemblyPath = "c:\\PathToAssembly";Di2015NewLine  string assemblyName = args.Name.Substring(0, args.Name.IndexOf(",")) + ".dll";Di2015NewLine  string assemblyFullName = Path.Combine(assemblyPath, assemblyName);Di2015NewLineDi2015NewLine  Assembly theAssembly = Assembly.Load(assemblyFullName);Di2015NewLineDi2015NewLine  return theAssembly;Di2015NewLine}Di2015NewLine
356513Di2015UniqueSeparatordigraph G { Di2015NewLine      size="100,69"Di2015NewLine      center=""Di2015NewLine      ratio=AllDi2015NewLine      node[width=.25,hight=.375,fontsize=12,color=lightblue2,style=filled]Di2015NewLine      1 -> 9;Di2015NewLine      1 -> 11;Di2015NewLine      9 -> 10;Di2015NewLine      11 -> 10;Di2015NewLine      1 [label="Drew.Controls.Map"];Di2015NewLine      9 [label="Drew.Types"];Di2015NewLine      10 [label="nunit.framework"];Di2015NewLine      11 [label="Drew.Util"];Di2015NewLine }Di2015NewLine
356694Di2015UniqueSeparator[assembly: AssemblyVersion("1.0.0.0")]Di2015NewLine[assembly: AssemblyFileVersion("1.0.0.0")]Di2015NewLine
356694Di2015UniqueSeparator[assembly: AssemblyVersion("1.0.*")]Di2015NewLine[assembly: AssemblyFileVersion("1.0.*")]Di2015NewLine
356694Di2015UniqueSeparator[assembly: AssemblyVersion("1.0.*")]Di2015NewLine
356855Di2015UniqueSeparatorvar
356911Di2015UniqueSeparator[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]Di2015NewLinepublic struct Info {Di2015NewLineDi2015NewLine    /// intDi2015NewLine    public int id;Di2015NewLineDi2015NewLine    /// char*Di2015NewLine    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)]Di2015NewLine    public string szName;Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class NativeMethods {Di2015NewLineDi2015NewLine    /// Return Type: Info*Di2015NewLine    ///id: intDi2015NewLine    [System.Runtime.InteropServices.DllImportAttribute("InfoLookup.dll", EntryPoint="LookupInfo")]Di2015NewLinepublic static extern  System.IntPtr LookupInfo(int id) ;Di2015NewLineDi2015NewLine    public static LoopInfoWrapper(int id) {Di2015NewLine       IntPtr ptr = LookupInfo(id);Di2015NewLine       return (Info)(Marshal.PtrToStructure(ptr, typeof(Info));Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
356971Di2015UniqueSeparatornew DomainObject<string>();Di2015NewLine
357158Di2015UniqueSeparatorBinding displayNameBinding = new Binding( "MyAccountService.Accounts[0].DisplayName" );Di2015NewLinedisplayNameBinding.Source = new ObjectDataProvider { ObjectType = typeof(PhoneService), IsDataSource = true };Di2015NewLinedisplayNameBinding.Mode = BindingMode.OneWay;Di2015NewLinethis.DisplayName.SetBinding(Label.ContentProperty, displayNameBinding);Di2015NewLine
357220Di2015UniqueSeparatorWebRequest
357220Di2015UniqueSeparatorContent-Length
357220Di2015UniqueSeparatorHEAD
357220Di2015UniqueSeparatorContent-Length
357340Di2015UniqueSeparatorusing(var db = new ItemMasterDataContext())Di2015NewLine{Di2015NewLine    var s = txtSearch.Text.Trim();Di2015NewLine    var result = from p in db.ITMSTs select p;Di2015NewLineDi2015NewLine    if( result.Any(p=>p.IMITD1.Contains(s))Di2015NewLine         lv.DataSource = result.Where(p=>p.IMITD1.Contains(s))Di2015NewLine    else if ( result.Any(p=>p.IMITD2.Contains(s))Di2015NewLine        lv.DataSource = result.Where(p=>p.IMITD1.Contains(s))Di2015NewLineDi2015NewLine    lv.DataBind();Di2015NewLine}Di2015NewLine
357417Di2015UniqueSeparatorIQueryable<T>
357417Di2015UniqueSeparatorFunc<In, Out>
357417Di2015UniqueSeparatorExpression<Func<In, Out>>
357417Di2015UniqueSeparatorprivate static readonly Expression<Func<CustomerInfo, string>> GetName = c => c.Name;Di2015NewLineDi2015NewLineprivate static readonly Expression<Func<CustomerInfo, ClientEntity>> GetEntity = c => new ClientEntity { Name = c.Name, ... };Di2015NewLine
357417Di2015UniqueSeparatorvar names = customers.Select(GetName);Di2015NewLineDi2015NewLinevar entities = customers.Select(GetEntity);Di2015NewLine
357570Di2015UniqueSeparatorvar cfg = System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(@"/");Di2015NewLinecfg.ConnectionStrings.ConnectionStrings.Add(new ConnectionStringSettings(params));Di2015NewLineDi2015NewLinecfg.Save();Di2015NewLine
357682Di2015UniqueSeparatorregasm /codebase
357682Di2015UniqueSeparatorregasm
357682Di2015UniqueSeparatorGuid
357682Di2015UniqueSeparatorMarshalAs
357682Di2015UniqueSeparatorInterfaceType
357801Di2015UniqueSeparatortb2_kva.Text = Math.Round(z, # Places).ToString();Di2015NewLine
357811Di2015UniqueSeparator\\n
357811Di2015UniqueSeparator\\
357811Di2015UniqueSeparators.Replace("\\\\n", "\\n");Di2015NewLines.Replace("\\\\t", "\\t");Di2015NewLineetcDi2015NewLine
358000Di2015UniqueSeparator\\"(?<money>[0-9,.$]*)\\"
358000Di2015UniqueSeparator\\"([0-9.$]+(,[0-9.]+)+)\\"
358030Di2015UniqueSeparatorSystem::Windows::Forms::KeyPressEventArgs^  eDi2015NewLine
358030Di2015UniqueSeparatorif (e->KeyChar == [find the number representing the arrow key])Di2015NewLine  e->Handled = true; // Meaning that no one will receive it afterwardsDi2015NewLine
358380Di2015UniqueSeparatorquery = query.Where(row => row.InvoiceId == new Guid("00000000-0000-0000-0000-000000000000"));Di2015NewLine
358672Di2015UniqueSeparatorvar reports = db.Reports();Di2015NewLineDataLoadOptions dlo = new DataLoadOptions();Di2015NewLinedlo.LoadWith<Reports>(r => r.Comments);      // Ask for Comments along with reportsDi2015NewLinereports.LoadOptions = dlo;Di2015NewLine
358672Di2015UniqueSeparatorvar myReportsList = from report in db.ReportsDi2015NewLine                    select new {  // Using anonymous type, but could use a custom classDi2015NewLine                       Report = report,Di2015NewLine                       Comment = report.Comment.Detail,   // for exampleDi2015NewLine                       Subject = report.Comment.SubjectDi2015NewLine                    };Di2015NewLine
358685Di2015UniqueSeparator// Assuming you already have SPWeb and SPList objectsDi2015NewLine...Di2015NewLineSPRoleAssignment roleAssignment = new SPRoleAssignment("dom\\\\user", "user@dom", "user", "some notes");Di2015NewLineSPRoleDefinition roleDefinition = web.RoleDefinitions.GetByType(SPRoleType.Contributor);Di2015NewLineroleAssignment.RoleDefinitionBindings.Add(roleDefinition);Di2015NewLineif (!myList.HasUniqueRoleAssignments)Di2015NewLine{Di2015NewLine    myList.BreakRoleInheritance(true); // Ensure we don't inherit permissions from parentDi2015NewLine} Di2015NewLinemyList.RoleAssignments.Add(roleAssignment);Di2015NewLinemyList.Update();Di2015NewLine
358716Di2015UniqueSeparatorbase.Finalize()
358716Di2015UniqueSeparatorSystem.Object.Finalize()
358716Di2015UniqueSeparatorFinalize
358716Di2015UniqueSeparatorbase.Finalize
358716Di2015UniqueSeparatorFileStream
358716Di2015UniqueSeparatorIDisposable
358716Di2015UniqueSeparatorDispose()
358716Di2015UniqueSeparatorFileStream
358733Di2015UniqueSeparatorInterlocked.Decrement
358733Di2015UniqueSeparatorParallel.ForEach
358978Di2015UniqueSeparatorStringBuilder pattern = new StringBuilder();Di2015NewLineforeach (string s in arrayOfStringsToRemove)Di2015NewLine{Di2015NewLine    pattern.Append("(");Di2015NewLine    pattern.Append(Regex.Escape(s));Di2015NewLine    pattern.Append(")|");Di2015NewLine}Di2015NewLineRegex.Replace(inputString, pattern.ToString(0, pattern.Length - 1), // remove trailing |Di2015NewLine    replacement);Di2015NewLine
359196Di2015UniqueSeparatorpublic class BusinessProductsDi2015NewLine{Di2015NewLine     private IDataContextFactory DataContextFactory { get; set; }  // my interfaceDi2015NewLineDi2015NewLine     public BusinessProducts() : this(null) {}Di2015NewLineDi2015NewLine     public BusinessProducts( IDataContextFactory factory )Di2015NewLine     {Di2015NewLine          this.DataContext = factory ?? new BusinessProductsDataContextFactory();Di2015NewLine     }Di2015NewLineDi2015NewLine     public void DoSomething()Di2015NewLine     {Di2015NewLine          using (DataContext dc = this.DataContextFactory().CreateDataContext())Di2015NewLine          {Di2015NewLine             ...Di2015NewLine          }Di2015NewLine     }Di2015NewLine
359299Di2015UniqueSeparatorstring getString = "GET /path/mypage.htm HTTP/1.1\\r\\nHost: www.mysite.mobi\\r\\nConnection: Close\\r\\n\\r\\n";Di2015NewLineEncoding ASCII = Encoding.ASCII;Di2015NewLineByte[] byteGetString = ASCII.GetBytes(getString);Di2015NewLineByte[] receiveByte = new Byte[256];Di2015NewLineSocket socket = null;Di2015NewLineString strPage = null;Di2015NewLinetryDi2015NewLine{Di2015NewLine    IPEndPoint ip = new IPEndPoint(IPAddress.Parse("10.23.1.93"), 80);Di2015NewLine    socket = new Socket(ip.AddressFamily, SocketType.Stream, ProtocolType.Tcp);Di2015NewLine    socket.Connect(ip);Di2015NewLine}Di2015NewLinecatch (SocketException ex)Di2015NewLine{Di2015NewLine    Console.WriteLine("Source:" + ex.Source);Di2015NewLine    Console.WriteLine("Message:" + ex.Message);Di2015NewLine}Di2015NewLinesocket.Send(byteGetString, byteGetString.Length, 0);Di2015NewLineInt32 bytes = socket.Receive(receiveByte, receiveByte.Length, 0);Di2015NewLinestrPage = strPage + ASCII.GetString(receiveByte, 0, bytes);Di2015NewLineDi2015NewLinewhile (bytes > 0)Di2015NewLine{Di2015NewLine    bytes = socket.Receive(receiveByte, receiveByte.Length, 0);Di2015NewLine    strPage = strPage + ASCII.GetString(receiveByte, 0, bytes);Di2015NewLine}Di2015NewLinesocket.Close();Di2015NewLine
359311Di2015UniqueSeparatorConvert.ToSingle(m.Groups[1].Value, CultureInfo.InvariantCulture.NumberFormat);Di2015NewLine
359339Di2015UniqueSeparatorpublic void MyMethod(){Di2015NewLine    Func<int, int, int> mySumImplementation = Di2015NewLine        delegate (int a, int b) { return a+b; };Di2015NewLineDi2015NewLine    Console.WriteLine(mySumImplementation(1,1).ToString());Di2015NewLine}Di2015NewLine
359360Di2015UniqueSeparator   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Event)]Di2015NewLine   public class DisplayNameLocalizedAttribute : DisplayNameAttributeDi2015NewLine   {Di2015NewLine      public DisplayNameLocalizedAttribute(Type resourceManagerProvider, string resourceKey)Di2015NewLine         : base(Utils.LookupResource(resourceManagerProvider, resourceKey))Di2015NewLine      {Di2015NewLine      }Di2015NewLine   }Di2015NewLine
359360Di2015UniqueSeparator  internal static string LookupResource(Type resourceManagerProvider, string resourceKey)Di2015NewLine  {Di2015NewLine     foreach (PropertyInfo staticProperty in  resourceManagerProvider.GetProperties(BindingFlags.Static | BindingFlags.NonPublic))Di2015NewLine     {Di2015NewLine        if (staticProperty.PropertyType == typeof(System.Resources.ResourceManager))Di2015NewLine        {Di2015NewLine           System.Resources.ResourceManager resourceManager = (System.Resources.ResourceManager)staticProperty.GetValue(null, null);Di2015NewLine           return resourceManager.GetString(resourceKey);Di2015NewLine        }Di2015NewLine     }Di2015NewLineDi2015NewLine     return resourceKey; // Fallback with the key nameDi2015NewLine  }Di2015NewLine
359360Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine      [Common.DisplayNameLocalized(typeof(Resources.Resource), "CreationDateDisplayName"),Di2015NewLine      Common.DescriptionLocalized(typeof(Resources.Resource), "CreationDateDescription")]Di2015NewLine      public DateTime CreationDateDi2015NewLine      {Di2015NewLine         get;Di2015NewLine         set;Di2015NewLine      }Di2015NewLine}Di2015NewLine
359449Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        for (int i=0; i < 5; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < 5; j++)Di2015NewLine            {Di2015NewLine               Console.WriteLine("i={0} j={1}", i, j);Di2015NewLine               if (j == i + 2)Di2015NewLine               {Di2015NewLine                   goto end_of_loop;   Di2015NewLine               }Di2015NewLine            }Di2015NewLine            Console.WriteLine("After inner loop");Di2015NewLine            end_of_loop: {}Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
359466Di2015UniqueSeparator/// <summary>Di2015NewLine/// Returns an array of Types that implement the supplied generic interface in theDi2015NewLine/// current AppDomain.Di2015NewLine/// </summary>Di2015NewLine/// <param name="interfaceType">Type of generic interface implemented</param>Di2015NewLine/// <param name="excludeAbstractTypes">Exclude Abstract class types in the search</param>Di2015NewLine/// <param name="excludeInterfaceTypes">Exclude Interface class types in the search</param>Di2015NewLine/// <returns>Array of Types that implement the supplied generic interface</returns>Di2015NewLine/// <remarks>Di2015NewLine/// History.<br/>Di2015NewLine/// 11/12/2008      davide       Created method.<br/>Di2015NewLine/// 11/12/2008      davide       Altered method to use a two LINQ query pass.<br/>Di2015NewLine/// 11/12/2008      davide       Altered method to use optimised combined LINQ query.<br/>Di2015NewLine/// 12/12/2008      davide       Altered method and replaced FullName criteria match with GetGenericTypeDefinition.<br/>Di2015NewLine/// </remarks>Di2015NewLinepublic static Type[] GetTypesImplementingGenericInterface(Type interfaceType, bool excludeAbstractTypes, bool excludeInterfaceTypes)Di2015NewLine{Di2015NewLine    if (!interfaceType.IsGenericType)Di2015NewLine    {Di2015NewLine    \throw new ArgumentException("Supplied interface is not a Generic type");Di2015NewLine    }Di2015NewLineDi2015NewLine    if (interfaceType.ContainsGenericParameters)Di2015NewLine    {Di2015NewLine    \interfaceType = interfaceType.GetGenericTypeDefinition();Di2015NewLine    }Di2015NewLineDi2015NewLine    // Use linq to find types that implement the supplied generic interface.Di2015NewLine    var implementingTypes = from assembly in AppDomain.CurrentDomain.GetAssemblies()Di2015NewLine    \\\\\\from type in assembly.GetTypes()Di2015NewLine    \\\\\\where (type.IsAbstract != excludeAbstractTypes) || (!excludeAbstractTypes)Di2015NewLine    \\\\\\where (type.IsInterface != excludeInterfaceTypes) || (!excludeInterfaceTypes)Di2015NewLine    \\\\\\from intf in type.GetInterfaces()Di2015NewLine    \\\\\\where intf.IsGenericType && intf.GetGenericTypeDefinition() == interfaceTypeDi2015NewLine    \\\\\\select type;Di2015NewLineDi2015NewLine    return implementingTypes.ToArray<Type>();Di2015NewLine}Di2015NewLine
359507Di2015UniqueSeparatorIEnumerable<T>
359507Di2015UniqueSeparatorPerson
359507Di2015UniqueSeparatorclass
359507Di2015UniqueSeparatorstruct
359507Di2015UniqueSeparatorPerson
359753Di2015UniqueSeparatorif(foo)Di2015NewLine  // bar();Di2015NewLinedoSomethingElse();Di2015NewLine
359753Di2015UniqueSeparatorif(foo) bar();Di2015NewLine
359922Di2015UniqueSeparatorDi2015NewLineImports SystemDi2015NewLineImports System.DrawingDi2015NewLineImports System.Windows.FormsDi2015NewLineDi2015NewLineModule modSnapDi2015NewLineDi2015NewLine    Public Const strApplicationTitle As String = "Snap Demo"Di2015NewLine    Public frmSnap As SnapFormDi2015NewLine    Public ptSnap, ptStart, ptEnd As PointDi2015NewLineDi2015NewLine    Public Class SnapFormDi2015NewLine        Inherits FormDi2015NewLine        Public Sub New()Di2015NewLine            Me.Text = "Snap Demo"Di2015NewLine            Me.ClientSize = New Size(800, 600)Di2015NewLine            Me.FormBorderStyle = Windows.Forms.FormBorderStyle.FixedSingleDi2015NewLine            Me.MaximizeBox = FalseDi2015NewLine            Me.StartPosition = FormStartPosition.CenterScreenDi2015NewLine            Me.DoubleBuffered = TrueDi2015NewLine        End SubDi2015NewLine        Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)Di2015NewLine            MyBase.OnPaint(e)Di2015NewLine            e.Graphics.Clear(Color.Black)Di2015NewLine            For row As Integer = 20 To 780 Step 20Di2015NewLine                For col As Integer = 20 To 580 Step 20Di2015NewLine                    e.Graphics.DrawEllipse(Pens.Blue, New Rectangle(row - 2, col - 2, 4, 4))Di2015NewLine                NextDi2015NewLine            NextDi2015NewLine            e.Graphics.DrawLine(Pens.Red, ptStart, ptEnd)Di2015NewLine        End SubDi2015NewLine        Protected Overrides Sub OnMouseDown(ByVal e As System.Windows.Forms.MouseEventArgs)Di2015NewLine            MyBase.OnMouseDown(e)Di2015NewLine            Dim x As Integer = CInt(e.X / 20) * 20Di2015NewLine            Dim y As Integer = CInt(e.Y / 20) * 20Di2015NewLine            ptStart = New Point(x, y)Di2015NewLine            ptSnap = New Point(x, y)Di2015NewLine            Windows.Forms.Cursor.Position = Me.PointToScreen(ptSnap)Di2015NewLine        End SubDi2015NewLine        Protected Overrides Sub OnMouseMove(ByVal e As System.Windows.Forms.MouseEventArgs)Di2015NewLine            MyBase.OnMouseMove(e)Di2015NewLine            If e.Button = Windows.Forms.MouseButtons.Left ThenDi2015NewLine                Dim x As Integer = CInt(e.X / 20) * 20Di2015NewLine                Dim y As Integer = CInt(e.Y / 20) * 20Di2015NewLine                ' must be some delta away from original snap pointDi2015NewLine                If (x < ptSnap.X - 15 Or x > ptSnap.X + 15) Or (y < ptSnap.Y - 15 Or y > ptSnap.Y + 15) ThenDi2015NewLine                    ptSnap = New Point(x, y)Di2015NewLine                    ptEnd = New Point(x, y)Di2015NewLine                    Me.Invalidate(False)Di2015NewLine                    Windows.Forms.Cursor.Position = Me.PointToScreen(ptSnap)Di2015NewLine                End IfDi2015NewLine            End IfDi2015NewLine        End SubDi2015NewLine    End ClassDi2015NewLineDi2015NewLine    Public Sub main()Di2015NewLine        TryDi2015NewLine            frmSnap = New SnapFormDi2015NewLine            Application.Run(frmSnap)Di2015NewLine        Catch ex As ExceptionDi2015NewLine            MessageBox.Show(ex.Message, strApplicationTitle, MessageBoxButtons.OK, MessageBoxIcon.Error)Di2015NewLine        FinallyDi2015NewLine            frmSnap.Dispose()Di2015NewLine        End TryDi2015NewLine    End SubDi2015NewLineDi2015NewLineEnd ModuleDi2015NewLine
359923Di2015UniqueSeparatorsn -k c:\\keypair.snkDi2015NewLine
359923Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Retrieves an RSA public key from a signed assemblyDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="assembly">Signed assembly to retrieve the key from</param>Di2015NewLine    /// <returns>RSA Crypto Service Provider initialised with the key from the assembly</returns>Di2015NewLine    public static RSACryptoServiceProvider GetPublicKeyFromAssembly(Assembly assembly)Di2015NewLine    {Di2015NewLine        if (assembly == null)Di2015NewLine            throw new ArgumentNullException("assembly", "Assembly may not be null");Di2015NewLineDi2015NewLine        byte[] pubkey = assembly.GetName().GetPublicKey();Di2015NewLine        if (pubkey.Length == 0)Di2015NewLine            throw new ArgumentException("No public key in assembly.");Di2015NewLineDi2015NewLine        RSAParameters rsaParams = EncryptionUtils.GetRSAParameters(pubkey);Di2015NewLine        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();Di2015NewLine        rsa.ImportParameters(rsaParams);Di2015NewLineDi2015NewLine        return rsa;Di2015NewLine    }Di2015NewLine
359961Di2015UniqueSeparatorwhere TMetadata : IMetadataType
359961Di2015UniqueSeparatorTMetadata
359961Di2015UniqueSeparatorIMetadataType
359961Di2015UniqueSeparatoroMetadata
359961Di2015UniqueSeparatorTMetadata
359961Di2015UniqueSeparatorTData
359961Di2015UniqueSeparatorprivate void FillMetadata<TMetadata, TData>(Metadata<TMetadata, TData> oMetadata) Di2015NewLine    where TMetadata : IMetadataTypeDi2015NewLine{Di2015NewLine    TMetadata o;Di2015NewLine    oMetadata.Values.Add(o, (TData)(object)GetValue());Di2015NewLine}Di2015NewLine
359967Di2015UniqueSeparatorProjectStatus[] currentStatuses = managerFactory.GetCruiseManager(ServerUri).GetProjectStatus();Di2015NewLine
359984Di2015UniqueSeparatorbyte[] fileData = null;Di2015NewLineusing (var binaryReader = new BinaryReader(Request.Files[0].InputStream))Di2015NewLine{Di2015NewLine    fileData = binaryReader.ReadBytes(Request.Files[0].ContentLength);Di2015NewLine}Di2015NewLine
360051Di2015UniqueSeparatorstatic void SetValue2(this Array a, object value, int i) {Di2015NewLine    int[] indices = new int[a.Rank];Di2015NewLine    for (int d = a.Rank - 1; d >= 0; d--) {Di2015NewLine        var l = a.GetLength(d);Di2015NewLine        indices[d] = i % l;Di2015NewLine        i /= lDi2015NewLine    }Di2015NewLine    a.SetValue(value, indices);Di2015NewLine}Di2015NewLine
360051Di2015UniqueSeparatorstatic void Main(string[] args) {Di2015NewLine    int[, ,] arr2 = {   Di2015NewLine        {{0,1,2}, {3,4,5}, {6,7,8}}, Di2015NewLine        {{9,10,11}, {12,13,14}, {15,16,17}}, Di2015NewLine        {{18,19,20}, {21,22,23}, {24,25,26}}Di2015NewLine    };Di2015NewLine    for (int i = 0; i < arr2.Length; i++) {Di2015NewLine        arr2.SetValue2(30, i);Di2015NewLine    }Di2015NewLine}Di2015NewLine
360306Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing System;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Collections.Generic;Di2015NewLinenamespace ConsoleApplication14Di2015NewLine{Di2015NewLine    public class ProgramDi2015NewLine    {Di2015NewLine        public static void Main()Di2015NewLine        {Di2015NewLine            Dictionary<Type, MethodInfo> mapping = new Dictionary<Type, MethodInfo>();Di2015NewLine            foreach (MethodInfo mi in typeof(BinaryWriter).GetMethods())Di2015NewLine            {Di2015NewLine                if (mi.Name == "Write")Di2015NewLine                {Di2015NewLine                    ParameterInfo[] pi = mi.GetParameters();Di2015NewLine                    if (pi.Length == 1)Di2015NewLine                        mapping[pi[0].ParameterType] = mi;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            List<Object> someData = new List<Object>();Di2015NewLine            someData.Add((Byte)10);Di2015NewLine            someData.Add((Int32)10);Di2015NewLine            someData.Add((Double)10);Di2015NewLine            someData.Add((Char)10);Di2015NewLine            someData.Add("Test");Di2015NewLineDi2015NewLine            using (FileStream file = new FileStream(@"C:\\test.dat", FileMode.Create, FileAccess.ReadWrite))Di2015NewLine            using (BinaryWriter writer = new BinaryWriter(file))Di2015NewLine            {Di2015NewLine                foreach (Object o in someData)Di2015NewLine                {Di2015NewLine                    MethodInfo mi;Di2015NewLine                    if (mapping.TryGetValue(o.GetType(), out mi))Di2015NewLine                    {Di2015NewLine                        mi.Invoke(writer, new Object[] { o });Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                        throw new InvalidOperationException("Cannot write data of type " + o.GetType().FullName);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
360427Di2015UniqueSeparatorBindingFlags.Instance
360427Di2015UniqueSeparatorGetProperty
360427Di2015UniqueSeparatornamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            System.Reflection.PropertyInfo[] tmp2Di2015NewLine                 = typeof(TestClass).GetProperties();Di2015NewLine            System.Reflection.PropertyInfo testDi2015NewLine                 = typeof(TestClass).GetProperty("TestProp", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic);Di2015NewLineDi2015NewLine            Console.WriteLine(test.Name);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TestClassDi2015NewLine    {Di2015NewLine        public Int32 TestPropDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return 0;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
360508Di2015UniqueSeparatorstrNew = ((ComboBox)sender).Text.Substring(0, ((ComboBox)sender).SelectionStart) + c.ToString();
360690Di2015UniqueSeparatorstring args = "/CREATE /RU SYSTEM /SC " + taskSchedule + " /MO " + taskModifier + " /SD " + taskStartDate + " /ST " + taskStartTime + " /TN " + taskName + " /TR \\"\\\\\\"" + taskSource + "\\""Di2015NewLine
361085Di2015UniqueSeparatorbool nullorempty = str == null || str.Length == 0;Di2015NewLine
361085Di2015UniqueSeparatorstring.IsNullOrEmpty
361085Di2015UniqueSeparatorstr
361085Di2015UniqueSeparatornull
361085Di2015UniqueSeparatorNullReferenceException
361085Di2015UniqueSeparatorbool hasBuzzed = checkMakeBuzz();Di2015NewLinebool isFrobbed = checkMakeFrob();Di2015NewLinebool result = hasBuzzed || isFrobbed;Di2015NewLine
361095Di2015UniqueSeparatorTimeSpan span = TimeSpan.Parse("16:20");Di2015NewLine
361095Di2015UniqueSeparatorTimeSpan span = TimeSpan.Parse("16.20");Di2015NewLineDateTime dt = DateTime.MinValue.Add(span);Di2015NewLine// will get you 1/1/1900 4:20 PM which can be formatted with .ToString("HH:mm") for 24 hour formattingDi2015NewLine
361121Di2015UniqueSeparatorproc.StartInfo.FileName                 = target;Di2015NewLine            proc.StartInfo.RedirectStandardError    = true;Di2015NewLine            proc.StartInfo.RedirectStandardOutput   = true;Di2015NewLine            proc.StartInfo.UseShellExecute          = false;Di2015NewLineDi2015NewLine            proc.Start();Di2015NewLineDi2015NewLine            proc.WaitForExitDi2015NewLine                (Di2015NewLine                    (timeout <= 0)Di2015NewLine                    ? int.MaxValue : timeout * NO_MILLISECONDS_IN_A_SECOND *Di2015NewLine                       NO_SECONDS_IN_A_MINUTEDi2015NewLine                );Di2015NewLineDi2015NewLine            errorMessage    = proc.StandardError.ReadToEnd();Di2015NewLine            proc.WaitForExit();Di2015NewLineDi2015NewLine            outputMessage   = proc.StandardOutput.ReadToEnd();Di2015NewLine            proc.WaitForExit();Di2015NewLine
361318Di2015UniqueSeparatorisinst
361318Di2015UniqueSeparatorcastclass
361318Di2015UniqueSeparatornull
361318Di2015UniqueSeparatorisinst
361318Di2015UniqueSeparatorcastclass
361318Di2015UniqueSeparatorisinst
361318Di2015UniqueSeparatorclass ADi2015NewLine{Di2015NewLine    public int Foo;Di2015NewLine}Di2015NewLineDi2015NewLineclass BDi2015NewLine{Di2015NewLine    public int Foo;Di2015NewLineDi2015NewLine    public static explicit operator B(A a)Di2015NewLine    {Di2015NewLine        return new B { Foo = a.Foo };Di2015NewLine    }Di2015NewLine}Di2015NewLine
361318Di2015UniqueSeparatorvar a = new A { Foo = 3 };Di2015NewLinevar b = (B)a;Di2015NewLineConsole.WriteLine(b.Foo); // prints 3Di2015NewLine
361318Di2015UniqueSeparatorvar a = new A { Foo = 3 };Di2015NewLinevar b = a as B;Di2015NewLine
361365Di2015UniqueSeparatorList<T>
361365Di2015UniqueSeparatorList<WhateverTypeYouWantItToBeAListOf>
361365Di2015UniqueSeparatorList<Employee> employeeList = new List<Employee>();Di2015NewLine
361365Di2015UniqueSeparatorEmployee
361365Di2015UniqueSeparatorEmployee emp1 = new Employee();Di2015NewLineEmployee emp2 = new Employee();Di2015NewLineDi2015NewLineemployeeList.Add(emp1);Di2015NewLineemployeeList.Add(emp2);Di2015NewLine
361365Di2015UniqueSeparatoremployeeList
361365Di2015UniqueSeparatoremp1
361365Di2015UniqueSeparatoremp2
361483Di2015UniqueSeparatorif(System.Diagnostics.Debugger.IsAttached)Di2015NewLine  System.Diagnostics.Debugger.Break();Di2015NewLine
361483Di2015UniqueSeparator[Conditional("DEBUG")]Di2015NewLinevoid DebugBreak()Di2015NewLine{Di2015NewLine  if(System.Diagnostics.Debugger.IsAttached)Di2015NewLine    System.Diagnostics.Debugger.Break();Di2015NewLine}Di2015NewLine
361554Di2015UniqueSeparatorpublic class SqlPackageEventListener : DefaultEventsDi2015NewLine{Di2015NewLine    public SqlPackageChangedHandler OnPackageError;Di2015NewLineDi2015NewLine    public override bool OnError(DtsObject source, int errorCode, string subComponent, string description, string helpFile, int helpContext, string idofInterfaceWithError) {Di2015NewLine    \OnPackageError(this, new PackageErrorEventArgs(source, subComponent, description));Di2015NewLine    \return base.OnError(source, errorCode, subComponent, description, helpFile, helpContext, idofInterfaceWithError);Di2015NewLine    }Di2015NewLineDi2015NewLine    public delegate void SqlPackageChangedHandler(Di2015NewLine    \object sqlPackage,Di2015NewLine    \EventArgs packageInfoDi2015NewLine    \);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PackageErrorEventArgs : EventArgs Di2015NewLine{Di2015NewLine    private DtsObject source;Di2015NewLine    public DtsObject Source {Di2015NewLine    \get { return source; }Di2015NewLine    \set { source = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string subcomponent;Di2015NewLine    public string Subcomponent {Di2015NewLine    \get { return subcomponent; }Di2015NewLine    \set { subcomponent = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string description;Di2015NewLine    public string Description {Di2015NewLine    \get { return description; }Di2015NewLine    \set { description = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public PackageErrorEventArgs(DtsObject source, string subcomponent, string description) {Di2015NewLine    \this.description = description;Di2015NewLine    \this.source = source;Di2015NewLine    \this.subcomponent = subcomponent;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Test Di2015NewLine{Di2015NewLine    SqlPackageEventListener sqlListener = new SqlPackageEventListener();Di2015NewLine    sqlListener.OnPackageError += new SqlPackageEventListener.SqlPackageChangedHandler(sqlListener_OnPackageError);Di2015NewLine    Microsoft.SqlServer.Dts.Runtime.Application sqlPackageLoader = new Microsoft.SqlServer.Dts.Runtime.Application();Di2015NewLine    Microsoft.SqlServer.Dts.Runtime.Package sqlPackage = Microsoft.SqlServer.Dts.Runtime.sqlPackageLoader.LoadPackage(@"path_to\\file.dtsx", sqlListener);Di2015NewLine    sqlPackage.Execute(null, null, sqlListener, null, null)Di2015NewLineDi2015NewLine    public void sqlListener_OnPackageError(object sender, EventArgs args) {Di2015NewLine    \//code to handle the eventDi2015NewLine    }Di2015NewLine}Di2015NewLine
361625Di2015UniqueSeparatorPage.Form.SubmitDisabledControls = true;Di2015NewLine
361625Di2015UniqueSeparator<form id="myForm" runat="server" SubmitDisabledControls="true">Di2015NewLine
361678Di2015UniqueSeparator//In Page loadDi2015NewLineforeach (DataRow row in topics.Rows)Di2015NewLine{Di2015NewLine    TreeNode node = new TreeNode(dr["name"], dr["topicId"])Di2015NewLine    node.PopulateOnDemand = true;Di2015NewLineDi2015NewLine     TreeView1.Nodes.Add(node);Di2015NewLine }Di2015NewLine ///Di2015NewLine protected void PopulateNode(Object sender, TreeNodeEventArgs e)Di2015NewLine {Di2015NewLine     string topicId = e.Node.Value;Di2015NewLine     //select from topic where parentId = topicId.Di2015NewLine     foreach (DataRow row in topics.Rows)Di2015NewLine     {Di2015NewLine         TreeNode node = new TreeNode(dr["name"], dr["topicId"])Di2015NewLine         node.PopulateOnDemand = true;Di2015NewLineDi2015NewLine         e.Node.ChildNodes.Add(node);Di2015NewLine     }Di2015NewLineDi2015NewLine }Di2015NewLine
361936Di2015UniqueSeparatorint index = mylist.FindIndex(p => p.id == 1);Di2015NewLineif(index<0) {Di2015NewLine    mylist.Add(car3);Di2015NewLine} else {Di2015NewLine    mylist[index] = car3;Di2015NewLine}Di2015NewLine
361936Di2015UniqueSeparatorList<T>
362034Di2015UniqueSeparatorTrimEnd(null)
362034Di2015UniqueSeparatornewrow["topic"] = att1.ToString().TrimEnd(null);Di2015NewLine
362034Di2015UniqueSeparatorTrimEnd
362034Di2015UniqueSeparatornewrow["topic" = att1.ToString().TrimEnd(new Char[]{'\\r'});Di2015NewLine
362304Di2015UniqueSeparator        while ((line = rows.ReadLine()) != null)Di2015NewLine        {Di2015NewLine            String[][]rows = new String [i][]; ;Di2015NewLine            rows = rows.ReadLine();Di2015NewLine            String[][] rows = new string[S.Length][];Di2015NewLine            i++;Di2015NewLine        }Di2015NewLine
362304Di2015UniqueSeparatorReadLine
362304Di2015UniqueSeparatorstring.Split
362304Di2015UniqueSeparatorFile.ReadAllLines
362304Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string[] lines = File.ReadAllLines("foo.txt");Di2015NewLine        string[][] grid = new string[lines.Length][];Di2015NewLine        for (int i = 0; i < lines.Length; i++)Di2015NewLine        {Di2015NewLine            grid[i] = lines[i].Split(',');Di2015NewLine        }Di2015NewLineDi2015NewLine        int totalCount = 0, maleCount = 0, femaleCount = 0,Di2015NewLine            m1Total = 0, m2Total = 0, m3Total = 0,Di2015NewLine            m1MaleTotal = 0, m1FemaleTotal = 0;Di2015NewLine        foreach (string[] line in grid)Di2015NewLine        {Di2015NewLine            totalCount++;Di2015NewLine            int m1 = int.Parse(line[3]),Di2015NewLine                m2 = int.Parse(line[4]),Di2015NewLine                m3 = int.Parse(line[5]);Di2015NewLine            m1Total += m1;Di2015NewLine            m2Total += m2;Di2015NewLine            m3Total += m3;Di2015NewLine            switch (line[1].Trim())Di2015NewLine            {Di2015NewLine                case "male":Di2015NewLine                    maleCount++;Di2015NewLine                    m1MaleTotal += m1;Di2015NewLine                    break;Di2015NewLine                case "female":Di2015NewLine                    femaleCount++;Di2015NewLine                    m1FemaleTotal += m1;Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        Console.WriteLine("Rows: " + totalCount);Di2015NewLine        Console.WriteLine("Total m1: " + m1Total);Di2015NewLine        Console.WriteLine("Average m1: " + ((double)m1Total)/totalCount);Di2015NewLine        Console.WriteLine("Male Average m1: " + ((double)m1MaleTotal) / maleCount);Di2015NewLine        Console.WriteLine("Female Average m1: " + ((double)m1FemaleTotal) / femaleCount);Di2015NewLine    }Di2015NewLine}Di2015NewLine
362315Di2015UniqueSeparatorbool equal = EqualityComparer<T>.Default.Equals(val1,val2);Di2015NewLine
362315Di2015UniqueSeparatorIEquatable<T>
362315Di2015UniqueSeparatorT : IEquatable<T>
362315Di2015UniqueSeparatorobject.Equals
362315Di2015UniqueSeparatorComparer<T>.Default
362315Di2015UniqueSeparatorint delta = Comparer<T>.Default.Compare(val1,val2);Di2015NewLine
362315Di2015UniqueSeparatorT : IComparable<T>
362315Di2015UniqueSeparatorT : IComparable
362315Di2015UniqueSeparatorType
362315Di2015UniqueSeparatorobject.Equals
362842Di2015UniqueSeparatorAppDomain.CurrentDomain.BaseDirectory
362842Di2015UniqueSeparatorApplication.StartupPath
362842Di2015UniqueSeparatorAppDomain.BaseDirectory
362876Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        UInt32 us = 0x80004005;Di2015NewLine        Int32 s = (Int32)us;Di2015NewLineDi2015NewLine        Console.WriteLine("Unsigned {0}", us);Di2015NewLine        Console.WriteLine("Signed {0}", s);Di2015NewLine        Console.WriteLine("Signed as unsigned {0}", (UInt32)s);Di2015NewLineDi2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine
363008Di2015UniqueSeparator//Create a new bitmap.Di2015NewLinebmpScreenshot = new Bitmap(Screen.PrimaryScreen.Bounds.Width,Di2015NewLine                           Screen.PrimaryScreen.Bounds.Height,Di2015NewLine                           PixelFormat.Format32bppArgb);Di2015NewLineDi2015NewLine// Create a graphics object from the bitmap.Di2015NewLinegfxScreenshot = Graphics.FromImage(bmpScreenshot);Di2015NewLineDi2015NewLine// Take the screenshot from the upper left corner to the right bottom corner.Di2015NewLinegfxScreenshot.CopyFromScreen(Screen.PrimaryScreen.Bounds.X,Di2015NewLine                            Screen.PrimaryScreen.Bounds.Y,Di2015NewLine                            0,Di2015NewLine                            0,Di2015NewLine                            Screen.PrimaryScreen.Bounds.Size,Di2015NewLine                            CopyPixelOperation.SourceCopy);Di2015NewLineDi2015NewLine// Save the screenshot to the specified path that the user has chosen.Di2015NewLinebmpScreenshot.Save("Screenshot.png", ImageFormat.Png);Di2015NewLine
363654Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineabstract class Pet { }Di2015NewLineDi2015NewLineclass Dog : Pet, IPetDi2015NewLine{Di2015NewLine    public String Name { get; set; }Di2015NewLine    public Int32 Age { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass Cat : Pet, IPetDi2015NewLine{Di2015NewLine    public String Name { get; set; }Di2015NewLine    public Int32 Age { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineinterface IPetDi2015NewLine{Di2015NewLine    String Name { get; set; }Di2015NewLine    Int32 Age { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class PetUtilsDi2015NewLine{Di2015NewLine    public static void Print(this IPet pet)Di2015NewLine    {Di2015NewLine    \Console.WriteLine(pet.Name + " is " + pet.Age);Di2015NewLine    }Di2015NewLine}Di2015NewLine
363654Di2015UniqueSeparatorPetUtils.Print
363654Di2015UniqueSeparatorthis
363654Di2015UniqueSeparatorpublic static void Print(this IPet pet)
363714Di2015UniqueSeparator.8m instead of .8Di2015NewLine
363756Di2015UniqueSeparatorvar sums = Orders.GroupBy(x => new { x.CustomerID, x.ProductID })Di2015NewLine                 .Select(group => group.Sum(x => x.ProductCount));Di2015NewLine
363912Di2015UniqueSeparatorpublic string needData { Di2015NewLineget { return MyData; }Di2015NewLineset { Di2015NewLine  MyData = value;Di2015NewLine  //do whatever you need to do with that data hereDi2015NewLine}Di2015NewLine
363912Di2015UniqueSeparatormyControl2.needData = myDropDownList.SelectedValue;Di2015NewLine
364154Di2015UniqueSeparatorpublic enum FilmType {Di2015NewLine   Horror = 1,Di2015NewLine   Comedy = 2Di2015NewLine}Di2015NewLine
364401Di2015UniqueSeparator[Serializable()]Di2015NewLinepublic class CarDi2015NewLine{Di2015NewLine    [System.Xml.Serialization.XmlElement("StockNumber")]Di2015NewLine    public string StockNumber { get; set; }Di2015NewLineDi2015NewLine    [System.Xml.Serialization.XmlElement("Make")]Di2015NewLine    public string Make { get; set; }Di2015NewLineDi2015NewLine    [System.Xml.Serialization.XmlElement("Model")]Di2015NewLine    public string Model { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine[Serializable()]Di2015NewLine[System.Xml.Serialization.XmlRoot("CarCollection")]Di2015NewLinepublic class CarCollectionDi2015NewLine{Di2015NewLine    [XmlArray("Cars")]Di2015NewLine    [XmlArrayItem("Car", typeof(Car))]Di2015NewLine    public Car[] Car { get; set; }Di2015NewLine}Di2015NewLine
364401Di2015UniqueSeparatorCarCollection cars = null;Di2015NewLinestring path = "cars.xml";Di2015NewLineDi2015NewLineXmlSerializer serializer = new XmlSerializer(typeof(CarCollection));Di2015NewLineDi2015NewLineStreamReader reader = new StreamReader(path);Di2015NewLinecars = (CarCollection)serializer.Deserialize(reader);Di2015NewLinereader.Close();Di2015NewLine
364401Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<CarCollection>Di2015NewLine<Cars>Di2015NewLine  <Car>Di2015NewLine    <StockNumber>1020</StockNumber>Di2015NewLine    <Make>Nissan</Make>Di2015NewLine    <Model>Sentra</Model>Di2015NewLine  </Car>Di2015NewLine  <Car>Di2015NewLine    <StockNumber>1010</StockNumber>Di2015NewLine    <Make>Toyota</Make>Di2015NewLine    <Model>Corolla</Model>Di2015NewLine  </Car>Di2015NewLine  <Car>Di2015NewLine    <StockNumber>1111</StockNumber>Di2015NewLine    <Make>Honda</Make>Di2015NewLine    <Model>Accord</Model>Di2015NewLine  </Car>Di2015NewLine</Cars>Di2015NewLine</CarCollection>Di2015NewLine
365009Di2015UniqueSeparator <Columns>Di2015NewLine  <asp:ButtonField Text="Add" CommandName="Select" />                 Di2015NewLine      <asp:TemplateField>Di2015NewLine            ......Di2015NewLine      </asp:TemplateField>Di2015NewLine </Columns>Di2015NewLine
365039Di2015UniqueSeparatorvar obj = (from row in table.AsEnumerable()Di2015NewLine      select row.Field<double>("DOUBLEVALUE")).ToArray();Di2015NewLine
365039Di2015UniqueSeparator.ToArray()
365039Di2015UniqueSeparatorToArray()
365039Di2015UniqueSeparator<double?>
365039Di2015UniqueSeparator.Field<T>(...)
365228Di2015UniqueSeparatorvar dude = mySource.Select(x => new {Name = x.name, Surname = x.surname});Di2015NewLine
365313Di2015UniqueSeparatorvar assemblies = GetTheAssembliesFromYourApp();Di2015NewLineforeach (var assembly in assemblies)Di2015NewLine{Di2015NewLine    var types = assembly.GetTypes ();Di2015NewLine    foreach (var type in types)Di2015NewLine    {Di2015NewLine        if (AttributeHelper.GetAttrbiute<Serializable> (type) == null)Di2015NewLine        {Di2015NewLine            // Log somewhere - this type isn't serialisable...Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinestatic class AttributeHelperDi2015NewLine{Di2015NewLine\#region Static public methodsDi2015NewLineDi2015NewLine\#region GetAttributeDi2015NewLineDi2015NewLine\static public T GetAttribute<T> (object obj)Di2015NewLine\\where T : AttributeDi2015NewLine\{Di2015NewLine\\if (obj == null)Di2015NewLine\\\throw new ArgumentNullException ("obj");Di2015NewLineDi2015NewLine                    // If the object is a member info then we can use it, otherwise it's an instance of 'something' so get it's type...Di2015NewLine\\var member = (obj is System.Reflection.MemberInfo) ? (System.Reflection.MemberInfo)obj : obj.GetType ();Di2015NewLineDi2015NewLine\\return GetAttributeImpl<T> (member);Di2015NewLine\}Di2015NewLineDi2015NewLine\#endregion GetAttributeDi2015NewLineDi2015NewLine\#endregion Static public methodsDi2015NewLineDi2015NewLine\#region Static methodsDi2015NewLineDi2015NewLine\#region GetAttributeImplDi2015NewLineDi2015NewLine\static T GetAttributeImpl<T> (System.Reflection.MemberInfo member)Di2015NewLine\\where T : AttributeDi2015NewLine\{Di2015NewLine\\var attribs = member.GetCustomAttributes (typeof (T), false);Di2015NewLine\\if (attribs == null || attribs.Length == 0)Di2015NewLine\\\return null;Di2015NewLineDi2015NewLine\\return attribs[0] as T;Di2015NewLine\}Di2015NewLineDi2015NewLine\#endregion GetAttributeImplDi2015NewLineDi2015NewLine\#endregion Static methodsDi2015NewLine}Di2015NewLine
365398Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string html = Di2015NewLine@"<html>Di2015NewLine<head>Di2015NewLine  <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine  <p style=""color: red;"">Hello World</p>Di2015NewLine</body>Di2015NewLine</html>";Di2015NewLineDi2015NewLine        Document document = new Document(PageSize.A4);Di2015NewLine        using (Stream output = new FileStream("out.pdf", FileMode.Create, FileAccess.Write, FileShare.None))Di2015NewLine        using (StringReader htmlReader = new StringReader(html))Di2015NewLine        using (XmlTextReader reader = new XmlTextReader(htmlReader))Di2015NewLine        {Di2015NewLine            PdfWriter.GetInstance(document, output);Di2015NewLine            HtmlParser.Parse(document, reader);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
365443Di2015UniqueSeparator        var list1 = Enumerable.Range(1, 100);Di2015NewLine        var list2 = Enumerable.Range(1, 100);Di2015NewLineDi2015NewLine        foreach (var item in from a in list1Di2015NewLine                             from b in list2Di2015NewLine                             where a % b == 0Di2015NewLine                             select new { a, b })Di2015NewLine        {Di2015NewLine            Console.WriteLine(item);Di2015NewLine        };Di2015NewLine
365480Di2015UniqueSeparator<%= ... %>
365480Di2015UniqueSeparator<% ...; %>
365533Di2015UniqueSeparatorwhile (listen){Di2015NewLine     // Step 0: Client connectionDi2015NewLine     if (!listener.Pending())Di2015NewLine     {Di2015NewLine          Thread.Sleep(500); // choose a number (in milliseconds) that makes senseDi2015NewLine          continue; // skip to next iteration of loopDi2015NewLine     }Di2015NewLineDi2015NewLine     TcpClient client = listener.AcceptTcpClient();Di2015NewLine     Thread clientThread = new Thread(new ParameterizedThreadStart(HandleConnection));Di2015NewLine     clientThread.Start(client.GetStream());Di2015NewLine     client.Close();Di2015NewLine}Di2015NewLine
365751Di2015UniqueSeparatorXmlDocument configDoc = new XmlDocument();Di2015NewLineconfigDoc.LoadXml(Di2015NewLine    "<wap-provisioningdoc>"+Di2015NewLine    "<characteristic type=\\"BrowserFavorite\\">"+Di2015NewLine    "<characteristic type=\\"Microsoft\\">"+Di2015NewLine    "<parm name=\\"URL\\" value=\\"http://www.microsoft.com\\"/>"+Di2015NewLine    "</characteristic>"+Di2015NewLine    "</characteristic>"+Di2015NewLine    "</wap-provisioningdoc>"Di2015NewLine    );Di2015NewLineConfigurationManager.ProcessConfiguration(configDoc, false);Di2015NewLine
366126Di2015UniqueSeparator\\t
366149Di2015UniqueSeparatorSystem.Uri address = new System.Uri("http://tinyurl.com/api-create.php?url=" + YOUR ADDRESS GOES HERE);Di2015NewLineSystem.Net.WebClient client = new System.Net.WebClient();Di2015NewLinestring tinyUrl = client.DownloadString(address);Di2015NewLineConsole.WriteLine(tinyUrl);Di2015NewLine
366339Di2015UniqueSeparatorPropertyInfo addressProperty = typeof(Customer).GetProperty("Address");Di2015NewLineProportyInfo zipCodeProperty = addressProperty.PropertyType.GetProperty("ZipCode");Di2015NewLineDi2015NewLineobject address = addressProperty.GetValue(customer, null);Di2015NewLineobject zipCode = zipCodeProperty.GetValue(address, null);Di2015NewLine
366339Di2015UniqueSeparatorpublic static object FollowPropertyPath(object value, string path)Di2015NewLine{Di2015NewLine    Type currentType = value.GetType();Di2015NewLineDi2015NewLine    foreach (string propertyName in path.Split('.'))Di2015NewLine    {Di2015NewLine        PropertyInfo property = currentType.GetProperty(propertyName);Di2015NewLine        value = property.GetValue(value, null);Di2015NewLine        currentType = property.PropertyType;Di2015NewLine    }Di2015NewLine    return value;Di2015NewLine}Di2015NewLine
366339Di2015UniqueSeparatorobject zipCode = FollowPropertyPath(customer, "Address.ZipCode");Di2015NewLine
366339Di2015UniqueSeparatorproperty.PropertyType
366339Di2015UniqueSeparatorproperty.GetType()
366774Di2015UniqueSeparatorprivate object GetOrderAttribute(string attributeName){Di2015NewLine    // use a data structure (like a hash table) to store and access internallyDi2015NewLine}Di2015NewLine...Di2015NewLineoutput("Quantity: " + GetOrderAttribute("quantity"));Di2015NewLine// etc.Di2015NewLine
366932Di2015UniqueSeparatorPrivate Shared Sub Foobar(x As IInitializationExpression)Di2015NewLine    x.AddRegistry(New DataAccessRegistry)Di2015NewLine    x.AddRegistry(New CoreRegistry)Di2015NewLine    x.AddRegistry(New WebUIRegistry)Di2015NewLine    x.Scan(AddressOf Barfoo)Di2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Shared Sub Barfoo(ByVal scanner As IAssemblyScanner) Di2015NewLine    scanner.Assembly("RPMWare.Core")Di2015NewLine    scanner.Assembly("RPMWare.Core.DataAccess")Di2015NewLine    scanner.WithDefaultConventionsDi2015NewLineEnd SubDi2015NewLineDi2015NewLine' … 'Di2015NewLineObjectFactory.Initialize(AddressOf Foobar)Di2015NewLine
367195Di2015UniqueSeparatorset
367195Di2015UniqueSeparatorprivate string firstName;Di2015NewLineDi2015NewLinepublic string FirstNameDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return this.firstName;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        this.firstName = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
367195Di2015UniqueSeparatorpublic string FirstName { get; set; }Di2015NewLine
367299Di2015UniqueSeparator    public override void SubmitChanges(Di2015NewLine        System.Data.Linq.ConflictMode failureMode)Di2015NewLine    {Di2015NewLine        ChangeSet changes = this.GetChangeSet();Di2015NewLineDi2015NewLine        var recipeInserts = (from r in changes.InsertsDi2015NewLine                       where (r as Recipe) != nullDi2015NewLine                       select r as Recipe).ToList<Recipe>();Di2015NewLineDi2015NewLine        var recipeUpdates = (from r in changes.UpdatesDi2015NewLine                       where (r as Recipe) != nullDi2015NewLine                       select r as Recipe).ToList<Recipe>();Di2015NewLineDi2015NewLine        ConvertTextData(recipeInserts);Di2015NewLine        ConvertTextData(recipeUpdates);Di2015NewLineDi2015NewLine        base.SubmitChanges(failureMode);Di2015NewLine    }Di2015NewLine
367383Di2015UniqueSeparatordefault
367383Di2015UniqueSeparatorclass MyEmptyDictionary<K, V> : IDictionary<K, V>Di2015NewLine{Di2015NewLine    bool IDictionary<K, V>.TryGetValue (K key, out V value)Di2015NewLine    {Di2015NewLine        value = default(V);Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    ....Di2015NewLineDi2015NewLine}Di2015NewLine
367542Di2015UniqueSeparatorprivate bool _eventHasSubscribers = false;Di2015NewLineprivate EventHandler<MyDelegateType> _myEvent;Di2015NewLineDi2015NewLinepublic event EventHandler<MyDelegateType> MyEventDi2015NewLine{Di2015NewLine   add Di2015NewLine   {Di2015NewLine      if (_myEvent == null)Di2015NewLine      {Di2015NewLine         _myEvent += value;Di2015NewLine      }Di2015NewLine   }Di2015NewLine   removeDi2015NewLine   {Di2015NewLine      _myEvent -= value;Di2015NewLine   }Di2015NewLine}Di2015NewLine
367542Di2015UniqueSeparatorif (alreadySubscribedFlag)Di2015NewLine{Di2015NewLine    member.Event += new MemeberClass.Delegate(handler);Di2015NewLine}Di2015NewLine
367543Di2015UniqueSeparatorclass Logger{Di2015NewLine private static ILogger _Logger;Di2015NewLineDi2015NewLine static Logger(){Di2015NewLine  //DI injection hereDi2015NewLine  _Logger = new NullLogger(); //orDi2015NewLine  _Logger = new TraceLogger();Di2015NewLine }Di2015NewLine}Di2015NewLineDi2015NewLineinterface ILogger{Di2015NewLine void Log(string Message);Di2015NewLine}Di2015NewLineDi2015NewLineinternal class TraceLogger:ILooger{Di2015NewLine public void Log(string Message){Di2015NewLine  //Code hereDi2015NewLine }Di2015NewLine}Di2015NewLineDi2015NewLineinternal class NullLogger{Di2015NewLine public void Log(string Message){Di2015NewLine  //Don't don anything, in purporseDi2015NewLine }Di2015NewLine}Di2015NewLine
368225Di2015UniqueSeparator<strong><% If (Eval("Address2").Length > 0) Then %><%#Eval("Address2")%><% Else %>No data available for Address 2<% End If %></strong><br />Di2015NewLine
368279Di2015UniqueSeparatorpublic abstract class BaseclassDi2015NewLine{Di2015NewLine    string var1;Di2015NewLine    string var2;Di2015NewLine    string var3;Di2015NewLine    string var4;Di2015NewLine    string var5;Di2015NewLine}Di2015NewLineDi2015NewLineclass ClassA : BaseclassDi2015NewLine{Di2015NewLine    string var6;Di2015NewLine}Di2015NewLineDi2015NewLineclass ClassB : BaseclassDi2015NewLine{Di2015NewLine    string var7;Di2015NewLine    string var8;    Di2015NewLine}Di2015NewLineDi2015NewLineclass ClassC : ClassBDi2015NewLine{Di2015NewLine    string var9;Di2015NewLine}Di2015NewLineDi2015NewLineclass ClassD : BaseclassDi2015NewLine{Di2015NewLine    string var10;Di2015NewLine}Di2015NewLine
368426Di2015UniqueSeparatorstring csv = tag.Substring(7, tag.Length - 9);Di2015NewLinestring[] values = csv.Split(new char[] { ',' });Di2015NewLine
368426Di2015UniqueSeparatorRegex csvRegex = new Regex(@"!!Part\\|(?:(?<value>\\w+),?)+!!");Di2015NewLineList<string> valuesRegex = new List<string>();Di2015NewLineforeach (Capture capture in csvRegex.Match(tag).Groups["value"].Captures)Di2015NewLine{Di2015NewLine    valuesRegex.Add(capture.Value);Di2015NewLine}Di2015NewLine
368457Di2015UniqueSeparatorDictionary<CustomObject,CustomObject> ...Di2015NewLine
368457Di2015UniqueSeparatorContainsKey
368457Di2015UniqueSeparatorGetHashCode()
368457Di2015UniqueSeparatorEquals()
368457Di2015UniqueSeparatorIEquatable<CustomObject>
368457Di2015UniqueSeparatorCustomObject
368457Di2015UniqueSeparatorIEqualityComparer<CustomObject>
368479Di2015UniqueSeparatorwsdl.exe /serverInterface
368580Di2015UniqueSeparatorpublic static bool IsRegistered(string name, string dllPath)Di2015NewLine{Di2015NewLine    RegistryKey typeLibKey = Registry.ClassesRoot.OpenSubKey("TypeLib");Di2015NewLine    foreach (string libIdKeyName in typeLibKey.GetSubKeyNames())Di2015NewLine    {Di2015NewLine        RegistryKey libIdKey = typeLibKey.OpenSubKey(libIdKeyName);Di2015NewLine        foreach (string versionKeyName in libIdKey.GetSubKeyNames())Di2015NewLine        {Di2015NewLine            RegistryKey versionKey = libIdKey.OpenSubKey(versionKeyName);Di2015NewLine            string regName = (string)versionKey.GetValue("");Di2015NewLine            if (regName == name)Di2015NewLine            {Di2015NewLine                foreach (string itterKeyName in versionKey.GetSubKeyNames())Di2015NewLine                {Di2015NewLine                    int throwawayint;Di2015NewLine                    if (int.TryParse(itterKeyName, out throwawayint))Di2015NewLine                    {Di2015NewLine                        RegistryKey itterKey = versionKey.OpenSubKey(itterKeyName);Di2015NewLine                        string regDllPath = (string)itterKey.OpenSubKey("win32").GetValue("");Di2015NewLine                        if (regDllPath == dllPath)Di2015NewLine                        {Di2015NewLine                            return true;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return false;Di2015NewLine}Di2015NewLine
368850Di2015UniqueSeparatorstring.Compare(s1, s2, CultureInfo.CurrentCulture, CompareOptions.IgnoreNonSpace);Di2015NewLine
368850Di2015UniqueSeparatorstatic string RemoveDiacritics(string text)Di2015NewLine{Di2015NewLine  string formD = text.Normalize(NormalizationForm.FormD);Di2015NewLine  StringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLine  foreach (char ch in formD)Di2015NewLine  {Di2015NewLine    UnicodeCategory uc = CharUnicodeInfo.GetUnicodeCategory(ch);Di2015NewLine    if (uc != UnicodeCategory.NonSpacingMark)Di2015NewLine    {Di2015NewLine      sb.Append(ch);Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  return sb.ToString().Normalize(NormalizationForm.FormC);Di2015NewLine}Di2015NewLine
368850Di2015UniqueSeparatorDebug.Assert("hello"==RemoveDiacritics("héllo"));Di2015NewLine
368850Di2015UniqueSeparatorstatic string RemoveDiacritics(string text)Di2015NewLine{Di2015NewLine  return string.Concat( Di2015NewLine      text.Normalize(NormalizationForm.FormD)Di2015NewLine      .Where(ch => CharUnicodeInfo.GetUnicodeCategory(ch)!=Di2015NewLine                                    UnicodeCategory.NonSpacingMark)Di2015NewLine    ).Normalize(NormalizationForm.FormC);Di2015NewLine}Di2015NewLine
368891Di2015UniqueSeparatorthrow new ArgumentException("Could not find registry key: " + theKey);Di2015NewLine
369118Di2015UniqueSeparator<table><tr><th>Office</th><th>Doctors</th></tr>Di2015NewLine<asp:repeater id="Repeater" runat="server" OnItemDataBound="NextItem" ... >Di2015NewLine    <ItemTemplate><asp:Literal id="RepeaterRow" runat="server" />Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:repeater>Di2015NewLine<asp:Literal id="LastRow" runat="server" />Di2015NewLine</table>Di2015NewLine
369118Di2015UniqueSeparatorpublic class OfficeDi2015NewLine{Di2015NewLine    public string OfficeName {get;set;};Di2015NewLine    List<string> _doctors = new List<string>();Di2015NewLine    public List<string> Doctors {get{ return _doctors; } };Di2015NewLineDi2015NewLine    void Clear()Di2015NewLine    {Di2015NewLine        OfficeName = "";Di2015NewLine        _doctors.Clear();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        StringBuilder result = new StringBuilder("<tr>");Di2015NewLineDi2015NewLine        result.AppendFormat("<td>{0}</td>", OfficeName);Di2015NewLineDi2015NewLine        string delimiter = "";Di2015NewLine        result.Append("<td>");Di2015NewLine        foreach(string doctor in Doctors)Di2015NewLine        {Di2015NewLine           result.Append(doctor).Append(delimiter);Di2015NewLine           delimiter = "<br/>";Di2015NewLine        }Di2015NewLineDi2015NewLine        result.Append("</td></tr>");Di2015NewLineDi2015NewLine        return result.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
369118Di2015UniqueSeparatorprivate string CurOffice = "";Di2015NewLineprivate Office CurRecord = new Office();Di2015NewLineDi2015NewLinevoid NextItem(object sender, RepeaterItemEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Item.ItemType != ListItemType.Item && e.Item.ItemType != ListItemType.AlternatingItem) return;Di2015NewLineDi2015NewLine    Literal repeaterRow = e.Item.FindControl("RepeaterRow") as Literal;Di2015NewLine    if (repeaterRow == null) return;Di2015NewLineDi2015NewLine    DataRow row = ((DataRowView)e.Item.DataItem).Row;Di2015NewLineDi2015NewLine    if ( CurOffice != (string)row["Office"] )Di2015NewLine    {Di2015NewLine        repeaterRow.Text = CurRecord.ToString();Di2015NewLine        repeaterRow.Visible = true;Di2015NewLineDi2015NewLine        CurRecord.Clear();Di2015NewLine        CurOffice = row["Office"];Di2015NewLine        CurRecord.Office = CurOffice;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine        e.Item.Visible = false;Di2015NewLineDi2015NewLine    CurRecord.Doctors.Add((string)row["doctor"]);Di2015NewLine}Di2015NewLineDi2015NewLinevoid Page_PreRender(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    LastRow.Text = CurRecord.ToString();Di2015NewLine}Di2015NewLine
369224Di2015UniqueSeparatorDebuggerDisplayAttribute
369224Di2015UniqueSeparatorDebuggerBrowsableAttribute
369224Di2015UniqueSeparatorDebuggerTypeProxyAttribute
369250Di2015UniqueSeparatorchar ch = 'A';Di2015NewLinestring strOut = String.Format(@"\\x{0:x4}", (ushort)ch);Di2015NewLine
369623Di2015UniqueSeparatorWebBrowser
369623Di2015UniqueSeparatorWebClient
369646Di2015UniqueSeparatorUInt32
369646Di2015UniqueSeparatorRandom
369646Di2015UniqueSeparatorNext()
369646Di2015UniqueSeparatorNext()
369646Di2015UniqueSeparatorNext()
369646Di2015UniqueSeparatorRandom
369646Di2015UniqueSeparatornew Random()
369859Di2015UniqueSeparatorAftList2
369859Di2015UniqueSeparatorlstAux
369859Di2015UniqueSeparatorAftList2
369859Di2015UniqueSeparatorDetalleCita
369859Di2015UniqueSeparatorIEnumerable<DetalleCita>
369859Di2015UniqueSeparatorAddRange()
369859Di2015UniqueSeparatorList<DetalleCita>
369859Di2015UniqueSeparatorvar AftList2 = GridData2.Values.Where(r => r != null).Cast<DetalleCita>();Di2015NewLine
369859Di2015UniqueSeparatorlstAux
369859Di2015UniqueSeparatorlstAux.AddRange(AftList2);Di2015NewLine
369859Di2015UniqueSeparatorToList()
369859Di2015UniqueSeparatorIEnumerable<T>
369859Di2015UniqueSeparatorIEnumerable<T>
369859Di2015UniqueSeparatorlist.ToList().AddRange(...)
369859Di2015UniqueSeparatorToList()
369859Di2015UniqueSeparatorlist2 = var1.ToList()
369859Di2015UniqueSeparatorvar1
369859Di2015UniqueSeparatorToList()
369859Di2015UniqueSeparatorToList()
369859Di2015UniqueSeparatorList<T>
369859Di2015UniqueSeparatorIEnumerable<T>
369859Di2015UniqueSeparatorIEnumerable<int> ints = from i in anotherInts where i > 20 select i;
369859Di2015UniqueSeparatoranotherInts
369859Di2015UniqueSeparatorList<int>
369859Di2015UniqueSeparatorints
369859Di2015UniqueSeparatorList<int>
369859Di2015UniqueSeparatorIEnumerable<int>
369859Di2015UniqueSeparatorToList()
369859Di2015UniqueSeparatorList<int> ints = (from i in anotherInts where i > 20 select i).ToList();
369859Di2015UniqueSeparatorHashSet<T>
369859Di2015UniqueSeparatorUnion()
369859Di2015UniqueSeparatorAddRange
369859Di2015UniqueSeparatorToList()
369859Di2015UniqueSeparatora.Union(b)
369859Di2015UniqueSeparatora
369859Di2015UniqueSeparatorb
370009Di2015UniqueSeparatordefault(T);Di2015NewLine
370009Di2015UniqueSeparatorpublic T Foo<T>(T Bar)Di2015NewLine{Di2015NewLine   return default(T);Di2015NewLine}Di2015NewLine
370248Di2015UniqueSeparator// lead-up codeDi2015NewLineDi2015NewLineSaveFileDialog sft = new SaveFileDialog();Di2015NewLineBOOL bDone;Di2015NewLinedoDi2015NewLine{Di2015NewLine  if (DialogResult.OK == sft.ShowDialog())Di2015NewLine    bDone = true;Di2015NewLine  elseDi2015NewLine  {Di2015NewLine    DialogResult result = MessageBox.Show("Are you sure you don't want to save the changed file?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);Di2015NewLine    bDone = (result == Yes) ? true : false;Di2015NewLine  }Di2015NewLine} while (!bDone);Di2015NewLineDi2015NewLine// carry onDi2015NewLine
370287Di2015UniqueSeparatorFileInfo f = new FileInfo(path);    Di2015NewLinestring drive = Path.GetPathRoot(f.FullName);Di2015NewLine
370395Di2015UniqueSeparatorpublic XmlSerializer(Di2015NewLine   Type type,Di2015NewLine   Type[] extraTypesDi2015NewLine);Di2015NewLine
370487Di2015UniqueSeparatorWeb.config
370487Di2015UniqueSeparator<system.codedom>
370487Di2015UniqueSeparator<configuration>
370487Di2015UniqueSeparator<system.codedom>Di2015NewLine  <compilers>Di2015NewLine    <compiler language="c#;cs;csharp" extension=".cs" warningLevel="4"Di2015NewLine              type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">Di2015NewLine      <providerOption name="CompilerVersion" value="v3.5"/>Di2015NewLine      <providerOption name="WarnAsError" value="false"/>Di2015NewLine    </compiler>Di2015NewLine  </compilers>Di2015NewLine</system.codedom>Di2015NewLine
370487Di2015UniqueSeparatorWeb.config
370505Di2015UniqueSeparatordouble
370505Di2015UniqueSeparatorKeySelector
370505Di2015UniqueSeparator    class SetComparer : IEqualityComparer<IEnumerable>Di2015NewLine    {Di2015NewLineDi2015NewLine        public readonly static SetComparer Default = new SetComparer();Di2015NewLineDi2015NewLine        public bool Equals(IEnumerable x, IEnumerable y)Di2015NewLine        {Di2015NewLine            return Enumerable.SequenceEqual(x.Cast<object>(), y.Cast<object>());Di2015NewLine        }Di2015NewLineDi2015NewLine        public int GetHashCode(IEnumerable data)Di2015NewLine        {Di2015NewLine            int hash = 0;Di2015NewLine            foreach (object obj in data)Di2015NewLine            {Di2015NewLine                if (obj != null)Di2015NewLine                {Di2015NewLine                    hash = hash * 7 + 13 * obj.GetHashCode();Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return hash;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
370505Di2015UniqueSeparatorSetComparer.Default
370505Di2015UniqueSeparatorGroupJoin
370505Di2015UniqueSeparatorGetHashCode()
370676Di2015UniqueSeparatorXmlSerializer
370676Di2015UniqueSeparatorBinaryFormatter
370676Di2015UniqueSeparatorDataContractSerializer
370676Di2015UniqueSeparatorBinaryFormatter
370676Di2015UniqueSeparatorXmlSerializer
370676Di2015UniqueSeparatorDataContractSerializer
370676Di2015UniqueSeparatorXmlSerializer
370676Di2015UniqueSeparator        XmlSerializer ser = new XmlSerializer(typeof(Foo));Di2015NewLine        // writeDi2015NewLine        using (var stream = File.Create("foo.xml"))Di2015NewLine        {Di2015NewLine            ser.Serialize(stream, foo); // your instanceDi2015NewLine        }Di2015NewLine        // readDi2015NewLine        using (var stream = File.OpenRead("foo.xml"))Di2015NewLine        {Di2015NewLine            Foo newFoo = (Foo)ser.Deserialize(stream);Di2015NewLine        }Di2015NewLine
370705Di2015UniqueSeparatorfrom q in QuestionsDi2015NewLineselect new ListQuestion Di2015NewLine{ Di2015NewLine  Tags = q.QuestionTags.Select(qt => qt.Tag),Di2015NewLine  QuestionId = q.ID,Di2015NewLine  Title = q.TitleDi2015NewLine}Di2015NewLine
370811Di2015UniqueSeparatorEncoding.GetEncoding(28591)
370811Di2015UniqueSeparatorEncoding.Default
370873Di2015UniqueSeparatorstatic bool IsNaN(this double value)Di2015NewLine{Di2015NewLine    return double.IsNaN(value);Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    double x = 123.4;Di2015NewLine    bool isNan = x.IsNaN();Di2015NewLine}Di2015NewLine
370873Di2015UniqueSeparatorcallvirt
370873Di2015UniqueSeparatorcall
370876Di2015UniqueSeparatorActiveRecordBase<T>
370876Di2015UniqueSeparatorActiveRecordMediator<T>
370876Di2015UniqueSeparatorSave()
370888Di2015UniqueSeparatorusing (Stream input = new FileStream("test.pdf", FileMode.Open, FileAccess.Read, FileShare.Read))Di2015NewLineusing (Stream output = new FileStream("test_encrypted.pdf", FileMode.Create, FileAccess.Write, FileShare.None))Di2015NewLine{Di2015NewLine    PdfReader reader = new PdfReader(input);Di2015NewLine    PdfEncryptor.Encrypt(reader, output, true, "secret", "secret", PdfWriter.ALLOW_PRINTING);Di2015NewLine}Di2015NewLine
371165Di2015UniqueSeparator<xsl:message terminate="no">progress:mynode</xsl:message>Di2015NewLine
371165Di2015UniqueSeparatorprotected event MessageListener progressMessageIntercepted;Di2015NewLineDi2015NewLinepublic void AddProgressMessageListener(MessageListener listener)Di2015NewLine{Di2015NewLine    progressMessageIntercepted += listener;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void RemoveMessageListeners()Di2015NewLine{Di2015NewLine    progressMessageIntercepted = null;Di2015NewLine}Di2015NewLineDi2015NewLineprotected void MessageCallBack(object sender, XsltMessageEncounteredEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Message.StartsWith("progress:"))Di2015NewLine    {Di2015NewLine        if (progressMessageIntercepted != null)Di2015NewLine        {Di2015NewLine            progressMessageIntercepted(this, null);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprotected void Transform(string inputFile, string outputFile, string xsltFile)Di2015NewLine{Di2015NewLine    XslCompiledTransform xslt = new XslCompiledTransform();Di2015NewLine    xslt.Load(xsltFile);Di2015NewLine    XsltArgumentList parameters = new XsltArgumentList();Di2015NewLine    parameters.XsltMessageEncountered += new XsltMessageEncounteredEventHandler(MessageCallBack);Di2015NewLineDi2015NewLine    using (XmlWriter xmlWriter = XmlWriter.Create(outputFile))Di2015NewLine    {Di2015NewLine        xslt.Transform(inputFile, parameters, xmlWriter);Di2015NewLine    }Di2015NewLine}Di2015NewLine
371177Di2015UniqueSeparatorByte[]
371177Di2015UniqueSeparator// fill encodedBytes with original dataDi2015NewLineByte[] encodedBytes = new Byte[] {0xD0,0xAD,0xD0,0xBB,0xD0,0xB5}; //...Di2015NewLineUTF8Encoding utf8 = new UTF8Encoding();Di2015NewLineString decodedString = utf8.GetString(encodedBytes);Di2015NewLine
371221Di2015UniqueSeparatorIEnumerable<T>
371221Di2015UniqueSeparatorIEnumerable<T>
371221Di2015UniqueSeparatorpublic static class MyExtensionsDi2015NewLine{Di2015NewLine     public static ProductCollectionDi2015NewLine                      ToProducts( this IEnumerable<Product> collection )Di2015NewLine     {Di2015NewLine          return new ProductCollection( collection );Di2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class ProductCollection : BaseCollection<Product>Di2015NewLine{Di2015NewLine     ...Di2015NewLineDi2015NewLine     public ProductCollection( IEnumerable<Product> collection )Di2015NewLine              : base( collection )Di2015NewLine     {Di2015NewLine     }Di2015NewLineDi2015NewLine     ...Di2015NewLine }Di2015NewLineDi2015NewLineDi2015NewLinevar products = (from p in HugeProductCollectionDi2015NewLine                where p.Vendor = currentVendorDi2015NewLine                select p).ToProducts();Di2015NewLine
371336Di2015UniqueSeparatorprivate void HardTerminalExit()Di2015NewLine{Di2015NewLine  #if DEBUGDi2015NewLine  // Soft ExitDi2015NewLine  #elseDi2015NewLine  // Hard ExitDi2015NewLine  #end ifDi2015NewLine}Di2015NewLine
371336Di2015UniqueSeparator[Conditional ( "RELEASE" )]Di2015NewLineprivate void HardTerminalExit()Di2015NewLine{Di2015NewLine  // Hard Exit, only called when "RELEASE" is defined.Di2015NewLine}Di2015NewLine
371348Di2015UniqueSeparatorHashSet<T>
371348Di2015UniqueSeparatorIEqualityComparer<T>
371348Di2015UniqueSeparatorEquals
371348Di2015UniqueSeparatorGetHashCode()
371348Di2015UniqueSeparatorEquals
371348Di2015UniqueSeparatorEquals(...) == true
371348Di2015UniqueSeparatorGetHashCode()
371348Di2015UniqueSeparatorGetHashCode()
371348Di2015UniqueSeparatorEquals
371348Di2015UniqueSeparatorreturn FooId;
371348Di2015UniqueSeparatorGetHashCode()
371348Di2015UniqueSeparatornew Foo(3,5)
371348Di2015UniqueSeparatornew Foo(5,3)
371348Di2015UniqueSeparatorint hash = 13;Di2015NewLinehash = (hash * 7) + field1.GetHashCode();Di2015NewLinehash = (hash * 7) + field2.GetHashCode();Di2015NewLine...Di2015NewLinereturn hash;Di2015NewLine
371348Di2015UniqueSeparator==
371348Di2015UniqueSeparator!=
371348Di2015UniqueSeparatorEquals
371348Di2015UniqueSeparatorGethashCode
371360Di2015UniqueSeparator3.Days().FromNow()
371399Di2015UniqueSeparatorSub MyMethod()Di2015NewLine     Dim x as New PrintDocumentDi2015NewLine     AddHandler x.PrintPage, AddressOf printDoc_PrintPageDi2015NewLine     x.PrintDi2015NewLineEnd SubDi2015NewLineSub printDoc_PrintPage( sender as Object,  e as PrintPageEventArgs)Di2015NewLine      Dim textToPrint as String= ".NET Printing is easy"Di2015NewLine      dim printFont as new Font("Courier New", 12)Di2015NewLine      dim leftMargin as int= e.MarginBounds.LeftDi2015NewLine      dim topMargin as int = e.MarginBounds.TopDi2015NewLine      e.Graphics.DrawString(textToPrint, printFont, Brushes.Black, leftMargin, topMargin)Di2015NewLineEnd SubDi2015NewLine
371421Di2015UniqueSeparatorp.Click += delegate (object sender, EventArgs args) {...}Di2015NewLine
371421Di2015UniqueSeparatorsender
371421Di2015UniqueSeparatorargs
371421Di2015UniqueSeparatorp.Click += (sender, args) => {...}Di2015NewLine
371493Di2015UniqueSeparatorctx.Customers.Attach(customer); // optional bool to treat as modifiedDi2015NewLine
371508Di2015UniqueSeparatormessage CsvFile {Di2015NewLine    repeated CsvHeader header = 1;Di2015NewLine    repeated CsvRow row = 2;Di2015NewLine}Di2015NewLineDi2015NewLinemessage CsvHeader {Di2015NewLine    require string name = 1;Di2015NewLine    require ColumnType type = 2;Di2015NewLine}Di2015NewLineDi2015NewLineenum ColumnType {Di2015NewLine    DECIMAL = 1;Di2015NewLine    STRING = 2;Di2015NewLine}Di2015NewLineDi2015NewLinemessage CsvRow {Di2015NewLine    repeated CsvValue value = 1;Di2015NewLine}Di2015NewLineDi2015NewLine// Note that the column is implicit based on position within row    Di2015NewLinemessage CsvValue {Di2015NewLine    optional string string_value = 1;Di2015NewLine    optional Decimal decimal_value = 2;Di2015NewLine}Di2015NewLineDi2015NewLinemessage Decimal {Di2015NewLine    // However you want to represent it (there are various options here)Di2015NewLine}Di2015NewLine
371811Di2015UniqueSeparatorOleDbConnection conn = new OleDbConnection(connectionString);Di2015NewLineconn.Open();Di2015NewLineDi2015NewLineDataTable queries = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Procedures, null);Di2015NewLineDi2015NewLineconn.Close();Di2015NewLine
371811Di2015UniqueSeparatorforeach(DataRow row in queries.Rows)Di2015NewLine{Di2015NewLine    // Do what you want with the values hereDi2015NewLine    queryName = row["PROCEDURE_NAME"].ToString();Di2015NewLine    sql = row["PROCEDURE_DEFINITION"].ToString();Di2015NewLine}Di2015NewLine
371829Di2015UniqueSeparatorpublic ContainerControl ContainerControlDi2015NewLine{Di2015NewLine  get { return _containerControl; }Di2015NewLine  set { _containerControl = value; }Di2015NewLine}Di2015NewLineprivate ContainerControl _containerControl = null;Di2015NewLine
371829Di2015UniqueSeparatorpublic override ISite SiteDi2015NewLine{Di2015NewLine  get { return base.Site; }Di2015NewLine  setDi2015NewLine  {Di2015NewLine    base.Site = value;Di2015NewLine    if (value == null)Di2015NewLine    {Di2015NewLine      return;Di2015NewLine    }Di2015NewLineDi2015NewLine    IDesignerHost host = value.GetService(Di2015NewLine        typeof(IDesignerHost)) as IDesignerHost;Di2015NewLine    if (host != null)Di2015NewLine    {Di2015NewLine        IComponent componentHost = host.RootComponent;Di2015NewLine        if (componentHost is ContainerControl)Di2015NewLine        {Di2015NewLine            ContainerControl = componentHost as ContainerControl;Di2015NewLine        }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
371856Di2015UniqueSeparatordecimal
371856Di2015UniqueSeparatordecimal
371856Di2015UniqueSeparatordecimal
371856Di2015UniqueSeparatormessage Decimal {Di2015NewLine  optional uint64 lo = 1; // the first 64 bits of the underlying valueDi2015NewLine  optional uint32 hi = 2; // the last 32 bis of the underlying valueDi2015NewLine  optional sint32 signScale = 3; // the number of decimal digits, and the signDi2015NewLine}Di2015NewLine
371946Di2015UniqueSeparatorpublic sealed class StringWriterWithEncoding : StringWriterDi2015NewLine{Di2015NewLine    private readonly Encoding encoding;Di2015NewLineDi2015NewLine    public StringWriterWithEncoding (Encoding encoding)Di2015NewLine    {Di2015NewLine        this.encoding = encoding;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override Encoding EncodingDi2015NewLine    {Di2015NewLine        get { return encoding; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
371993Di2015UniqueSeparatorDateTime temp;Di2015NewLineif(DateTime.TryParse(startDateTextBox.Text, out temp))Di2015NewLine//yayDi2015NewLineelseDi2015NewLine// :(Di2015NewLine
372036Di2015UniqueSeparator([\\w]{2})\\:(.+?)(?=[\\w]{2}\\:|$)Di2015NewLine
372065Di2015UniqueSeparatorif (System.IntPtr.Size == 8)Di2015NewLine{Di2015NewLine    // 64-bitDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    // 32-bitDi2015NewLine}Di2015NewLine
372168Di2015UniqueSeparator        ObjectFactory.Initialize(x =>Di2015NewLine        {Di2015NewLine            x.ForRequestedType<MyAbstractClass>().TheDefault.IsThis(myClass);Di2015NewLine        });Di2015NewLine
372235Di2015UniqueSeparatorpublic Control RecursiveFindControl(Control parent, string idToFind)Di2015NewLine{Di2015NewLine    for each (Control child in parent.ChildControls)Di2015NewLine    {Di2015NewLine        if (child.ID == idToFind)Di2015NewLine        {Di2015NewLine            return child;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Control control = RecursiveFindControl(child, idToFind);Di2015NewLine            if (control != null)Di2015NewLine            {Di2015NewLine                return control;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
372739Di2015UniqueSeparator<configSections>Di2015NewLine    <section name="log4net" Di2015NewLine             type="log4net.Config.Log4NetConfigurationSectionHandler, log4net, Version=1.2.10.0, Culture=neutral, PublicKeyToken=1b44e1d426115821" />Di2015NewLine</configSections>Di2015NewLine
372739Di2015UniqueSeparator<log4net configSource="Config\\Log4Net.config" />Di2015NewLine
372739Di2015UniqueSeparatorprivate static ILog GetLog(string logName)Di2015NewLine{Di2015NewLine    ILog log = LogManager.GetLogger(logName);Di2015NewLine    return log;Di2015NewLine}Di2015NewLine
372822Di2015UniqueSeparator   static void Main()Di2015NewLine    {Di2015NewLine        List<SimpleObject> list = new List<SimpleObject>();Di2015NewLine        list.Add(new SimpleObject(1,"Jon"));Di2015NewLine        list.Add(new SimpleObject( 2,  "Mr Skeet" ));Di2015NewLine        list.Add(new SimpleObject( 3,"Miss Skeet" ));Di2015NewLine        Predicate<SimpleObject> yourFilterCriteria = delegate(SimpleObject simpleObject)Di2015NewLine        {Di2015NewLine            return simpleObject.Name.Contains("Skeet");Di2015NewLine        };Di2015NewLine        list = list.FindAll(yourFilterCriteria);//Get only name that has Skeet : Here is the magicDi2015NewLine        foreach (SimpleObject o in list)Di2015NewLine        {Di2015NewLine            Console.WriteLine(o);Di2015NewLine        }Di2015NewLine        Console.Read();Di2015NewLine    }Di2015NewLine    public class SimpleObjectDi2015NewLine    {Di2015NewLine        public int Id;Di2015NewLine        public string Name;Di2015NewLineDi2015NewLine        public SimpleObject(int id, string name)Di2015NewLine        {Di2015NewLine            this.Id=id;Di2015NewLine            this.Name=name;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return string.Format("{0} : {1}",Id, Name);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
372969Di2015UniqueSeparator    var listOfStrings = new List<string> {"name1", "name2", "name3", "name4"};Di2015NewLine    var foo = listOfStrings.Select((value, position) => new {position, value}).ToList();Di2015NewLine
373372Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineusing (StreamWriter sw = new StreamWriter(File.Open(myfilename, FileMode.Create), Encoding.WhateverYouWant))Di2015NewLine{    Di2015NewLine    sw.WriteLine("my text...");     Di2015NewLine}Di2015NewLine
373372Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineusing (var sw  = new StreamWriter(File.Open(@"c:\\myfile.txt", FileMode.CreateNew), Encoding.GetEncoding("iso-8859-1"))) {Di2015NewLine    sw.WriteLine("my text..."); \\\Di2015NewLine}Di2015NewLine
373781Di2015UniqueSeparator<ListBox ScrollViewer.HorizontalScrollBarVisibility="Disabled" />Di2015NewLine
373781Di2015UniqueSeparatormyListBox.SetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty, ScrollBarVisibility.Disabled);Di2015NewLine
373797Di2015UniqueSeparatorpublic interface IFooFormatDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FooFormat<TValue> : IFooFormatDi2015NewLine{Di2015NewLine    private TValue _value;Di2015NewLineDi2015NewLine    public void Init(TValue value)Di2015NewLine    {Di2015NewLine        _value = value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public TValue ValueDi2015NewLine    {Di2015NewLine        get { return _value; }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ArrayFooFormat : FooFormat<IList<string>> { }Di2015NewLineDi2015NewLinepublic class BooleanFooFormat : FooFormat<bool> { }Di2015NewLineDi2015NewLinepublic class DefaultFooFormat : IFooFormat { }Di2015NewLineDi2015NewLinepublic interface IFoo { }Di2015NewLineDi2015NewLinepublic class Foo : IFooDi2015NewLine{Di2015NewLine    private IFooFormat _format;Di2015NewLineDi2015NewLine    internal Foo(IFooFormat format)Di2015NewLine    {Di2015NewLine        _format = format;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IFooFormat Format { get { return _format; } }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FooFactoryDi2015NewLine{Di2015NewLine    protected IFoo Build<TFormat, TArg>(TArg arg) where TFormat : FooFormat<TArg>, new()Di2015NewLine    {Di2015NewLine        TFormat format = new TFormat();Di2015NewLine        format.Init(arg);Di2015NewLine        return new Foo(format);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected IFoo Build<TFormat>() where TFormat : IFooFormat, new()Di2015NewLine    {Di2015NewLine        return new Foo(new TFormat());Di2015NewLine    }Di2015NewLine}Di2015NewLine
373804Di2015UniqueSeparatorwhere
373804Di2015UniqueSeparatorfrom
373934Di2015UniqueSeparatorprivate static void TraceMethodArguments(MethodExecutionEventArgs eventArgs)Di2015NewLine    {Di2015NewLine        object[] parameters = eventArgs.GetReadOnlyArgumentArray();Di2015NewLineDi2015NewLine        if (parameters != null)Di2015NewLine        {Di2015NewLine            string paramValue = null;Di2015NewLine            foreach (object p in parameters)Di2015NewLine            {Di2015NewLine                Type _type = p.GetType();Di2015NewLine                if (_type == typeof(string) || _type == typeof(int) || _type == typeof(double) || _type == typeof(decimal))Di2015NewLine                {Di2015NewLine                    paramValue = (string)p;Di2015NewLine                }Di2015NewLine                else if (_type == typeof(XmlDocument))Di2015NewLine                {Di2015NewLine                    paramValue = ((XmlDocument)p).OuterXml;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                { //try to serializeDi2015NewLine                    tryDi2015NewLine                    {Di2015NewLine                        XmlSerializer _serializer = new XmlSerializer(p.GetType());Di2015NewLine                        StringWriter _strWriter = new StringWriter();Di2015NewLineDi2015NewLine                        _serializer.Serialize(_strWriter, p);Di2015NewLine                        paramValue = _strWriter.ToString();Di2015NewLine                    }Di2015NewLine                    catchDi2015NewLine                    {Di2015NewLine                        paramValue = "Unable to Serialize Parameter";Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                Trace.TraceInformation("[" + Process.GetCurrentProcess().Id + "-" + Thread.CurrentThread.ManagedThreadId.ToString() + "]" + " Parameter: " + paramValue);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
373954Di2015UniqueSeparatorDataGridView
373954Di2015UniqueSeparatorDataTable
373954Di2015UniqueSeparatorDataSet
373954Di2015UniqueSeparatorDataTables
373954Di2015UniqueSeparatorStreamWriter
373954Di2015UniqueSeparatorXmlWriter
373954Di2015UniqueSeparatorExcelWriter
373954Di2015UniqueSeparatorXmlWriter
373954Di2015UniqueSeparatorpublic class ExcelWriter : IDisposableDi2015NewLine{Di2015NewLine    private XmlWriter _writer;Di2015NewLineDi2015NewLine    public enum CellStyle { General, Number, Currency, DateTime, ShortDate };Di2015NewLineDi2015NewLine    public void WriteStartDocument()Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteProcessingInstruction("mso-application", "progid=\\"Excel.Sheet\\"");Di2015NewLine        _writer.WriteStartElement("ss", "Workbook", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine         WriteExcelStyles();Di2015NewLine   }Di2015NewLineDi2015NewLine    public void WriteEndDocument()Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void WriteExcelStyleElement(CellStyle style)Di2015NewLine    {Di2015NewLine        _writer.WriteStartElement("Style", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteAttributeString("ID", "urn:schemas-microsoft-com:office:spreadsheet", style.ToString());Di2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void WriteExcelStyleElement(CellStyle style, string NumberFormat)Di2015NewLine    {Di2015NewLine        _writer.WriteStartElement("Style", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLineDi2015NewLine        _writer.WriteAttributeString("ID", "urn:schemas-microsoft-com:office:spreadsheet", style.ToString());Di2015NewLine        _writer.WriteStartElement("NumberFormat", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteAttributeString("Format", "urn:schemas-microsoft-com:office:spreadsheet", NumberFormat);Di2015NewLine        _writer.WriteEndElement();Di2015NewLineDi2015NewLine        _writer.WriteEndElement();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void WriteExcelStyles()Di2015NewLine    {Di2015NewLine        _writer.WriteStartElement("Styles", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLineDi2015NewLine        WriteExcelStyleElement(CellStyle.General);Di2015NewLine        WriteExcelStyleElement(CellStyle.Number, "General Number");Di2015NewLine        WriteExcelStyleElement(CellStyle.DateTime, "General Date");Di2015NewLine        WriteExcelStyleElement(CellStyle.Currency, "Currency");Di2015NewLine        WriteExcelStyleElement(CellStyle.ShortDate, "Short Date");Di2015NewLineDi2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteStartWorksheet(string name)Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteStartElement("Worksheet", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteAttributeString("Name", "urn:schemas-microsoft-com:office:spreadsheet", name);Di2015NewLine        _writer.WriteStartElement("Table", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteEndWorksheet()Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteEndElement();Di2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ExcelWriter(string outputFileName)Di2015NewLine    {Di2015NewLine        XmlWriterSettings settings = new XmlWriterSettings();Di2015NewLine        settings.Indent = true;Di2015NewLine        _writer = XmlWriter.Create(outputFileName, settings);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Close()Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Already closed.");Di2015NewLineDi2015NewLine        _writer.Close();Di2015NewLine        _writer = null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteExcelColumnDefinition(int columnWidth)Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteStartElement("Column", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteStartAttribute("Width", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteValue(columnWidth);Di2015NewLine        _writer.WriteEndAttribute();Di2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteExcelUnstyledCell(string value)Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteStartElement("Cell", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteStartElement("Data", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteAttributeString("Type", "urn:schemas-microsoft-com:office:spreadsheet", "String");Di2015NewLine        _writer.WriteValue(value);Di2015NewLine        _writer.WriteEndElement();Di2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteStartRow()Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteStartElement("Row", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteEndRow()Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteExcelStyledCell(object value, CellStyle style)Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        _writer.WriteStartElement("Cell", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        _writer.WriteAttributeString("StyleID", "urn:schemas-microsoft-com:office:spreadsheet", style.ToString());Di2015NewLine        _writer.WriteStartElement("Data", "urn:schemas-microsoft-com:office:spreadsheet");Di2015NewLine        switch (style)Di2015NewLine        {Di2015NewLine            case CellStyle.General:Di2015NewLine                _writer.WriteAttributeString("Type", "urn:schemas-microsoft-com:office:spreadsheet", "String");Di2015NewLine                break;Di2015NewLine            case CellStyle.Number:Di2015NewLine            case CellStyle.Currency:Di2015NewLine                _writer.WriteAttributeString("Type", "urn:schemas-microsoft-com:office:spreadsheet", "Number");Di2015NewLine                break;Di2015NewLine            case CellStyle.ShortDate:Di2015NewLine            case CellStyle.DateTime:Di2015NewLine                _writer.WriteAttributeString("Type", "urn:schemas-microsoft-com:office:spreadsheet", "DateTime");Di2015NewLine                break;Di2015NewLine        }Di2015NewLine        _writer.WriteValue(value);Di2015NewLine        //  tag += String.Format("{1}\\"><ss:Data ss:Type=\\"DateTime\\">{0:yyyy\\\\-MM\\\\-dd\\\\THH\\\\:mm\\\\:ss\\\\.fff}</ss:Data>", value,Di2015NewLineDi2015NewLine        _writer.WriteEndElement();Di2015NewLine        _writer.WriteEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteExcelAutoStyledCell(object value)Di2015NewLine    {Di2015NewLine        if (_writer == null) throw new InvalidOperationException("Cannot write after closing.");Di2015NewLineDi2015NewLine        //write the <ss:Cell> and <ss:Data> tags for somethingDi2015NewLine        if (value is Int16 || value is Int32 || value is Int64 || value is SByte ||Di2015NewLine            value is UInt16 || value is UInt32 || value is UInt64 || value is Byte)Di2015NewLine        {Di2015NewLine            WriteExcelStyledCell(value, CellStyle.Number);Di2015NewLine        }Di2015NewLine        else if (value is Single || value is Double || value is Decimal) //we'll assume it's a currencyDi2015NewLine        {Di2015NewLine            WriteExcelStyledCell(value, CellStyle.Currency);Di2015NewLine        }Di2015NewLine        else if (value is DateTime)Di2015NewLine        {Di2015NewLine            //check if there's no time information and use the appropriate styleDi2015NewLine            WriteExcelStyledCell(value, ((DateTime)value).TimeOfDay.CompareTo(new TimeSpan(0, 0, 0, 0, 0)) == 0 ? CellStyle.ShortDate : CellStyle.DateTime);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            WriteExcelStyledCell(value, CellStyle.General);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #region IDisposable MembersDi2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        if (_writer == null)Di2015NewLine            return;Di2015NewLineDi2015NewLine        _writer.Close();Di2015NewLine        _writer = null;Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
373954Di2015UniqueSeparatorDataTable
373954Di2015UniqueSeparatorpublic static void ExcelExport(DataTable data, String fileName, bool openAfter)Di2015NewLine{Di2015NewLine    //export a DataTable to ExcelDi2015NewLine    DialogResult retry = DialogResult.Retry;Di2015NewLineDi2015NewLine    while (retry == DialogResult.Retry)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            using (ExcelWriter writer = new ExcelWriter(fileName))Di2015NewLine            {Di2015NewLine                writer.WriteStartDocument();Di2015NewLineDi2015NewLine                // Write the worksheet contentsDi2015NewLine                writer.WriteStartWorksheet("Sheet1");Di2015NewLineDi2015NewLine                //Write header rowDi2015NewLine                writer.WriteStartRow();Di2015NewLine                foreach (DataColumn col in data.Columns)Di2015NewLine                    writer.WriteExcelUnstyledCell(col.Caption);Di2015NewLine                writer.WriteEndRow();Di2015NewLineDi2015NewLine                //write dataDi2015NewLine                foreach (DataRow row in data.Rows)Di2015NewLine                {Di2015NewLine                    writer.WriteStartRow();Di2015NewLine                    foreach (object o in row.ItemArray)Di2015NewLine                    {Di2015NewLine                        writer.WriteExcelAutoStyledCell(o);Di2015NewLine                    }Di2015NewLine                    writer.WriteEndRow();Di2015NewLine                }Di2015NewLineDi2015NewLine                // Close up the documentDi2015NewLine                writer.WriteEndWorksheet();Di2015NewLine                writer.WriteEndDocument();Di2015NewLine                writer.Close();Di2015NewLine                if (openAfter)Di2015NewLine                    OpenFile(fileName);Di2015NewLine                retry = DialogResult.Cancel;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception myException)Di2015NewLine        {Di2015NewLine            retry = MessageBox.Show(myException.Message, "Excel Export", MessageBoxButtons.RetryCancel, MessageBoxIcon.Asterisk);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
374162Di2015UniqueSeparatorCIM_DataFile
374162Di2015UniqueSeparatorInUseCount
374162Di2015UniqueSeparatorlsof
374162Di2015UniqueSeparatorWin32_Process
374162Di2015UniqueSeparatorSystem.Management
374162Di2015UniqueSeparatorNtQuerySystemInformation
374392Di2015UniqueSeparator MDbgEngine mg;Di2015NewLine MDbgProcess mgProcess;Di2015NewLine tryDi2015NewLine {Di2015NewLine       mg = new MDbgEngine();Di2015NewLine       mgProcess = mg.Attach(debugProcess.Id);Di2015NewLine }Di2015NewLine catch (Exception ed)Di2015NewLine {Di2015NewLine       Console.WriteLine("Exception attaching to process " + debugProcess.Id );Di2015NewLine       throw (ed);Di2015NewLine }Di2015NewLine mgProcess.CorProcess.EnableLogMessages(true);Di2015NewLine mgProcess.CorProcess.OnLogMessage += new LogMessageEventHandler(HandleLogMessage);Di2015NewLine mg.Options.StopOnLogMessage = true;Di2015NewLine mgProcess.Go().WaitOne();Di2015NewLine bool running = true;Di2015NewLine Console.CancelKeyPress += new ConsoleCancelEventHandler(Console_CancelKeyPress);Di2015NewLine  while (running)Di2015NewLine   {Di2015NewLine       tryDi2015NewLine       {Di2015NewLine           running =mgProcess.IsAlive;Di2015NewLine           mgProcess.Go().WaitOne();Di2015NewLine        }Di2015NewLine        catchDi2015NewLine         {Di2015NewLine            running = false;Di2015NewLine         }Di2015NewLine     }Di2015NewLine
374426Di2015UniqueSeparatormyHandler += value;Di2015NewLine
374426Di2015UniqueSeparatormyHandler = Delegate.Combine(myHandler, value);Di2015NewLine
374426Di2015UniqueSeparatorprivate LinkedList<EventHandler> eventHandlers = new LinkedList<EventHandler>;Di2015NewLineDi2015NewLinepublic event EventHandler FooDi2015NewLine{Di2015NewLine    addDi2015NewLine    {Di2015NewLine        eventHandlers.AddFirst(value);Di2015NewLine    }Di2015NewLine    removeDi2015NewLine    {Di2015NewLine        // do stuff here tooDi2015NewLine    }Di2015NewLine}Di2015NewLine
374426Di2015UniqueSeparatorforeach (EventHandler handler in eventHandlers)Di2015NewLine{Di2015NewLine    handler(this, EventArgs.Empty);Di2015NewLine}Di2015NewLine
374485Di2015UniqueSeparator[...attributes...]Di2015NewLinepublic Car[] GetCars2()Di2015NewLine
374485Di2015UniqueSeparatorGetCars2
374485Di2015UniqueSeparatorSportsCar
374525Di2015UniqueSeparatorstring.Format
374525Di2015UniqueSeparator@p1
374525Di2015UniqueSeparatorDBNull.Value
374525Di2015UniqueSeparatorSqlCommand cmd = new SqlCommand();Di2015NewLinecmd.CommandText = @"INSERT INTO upload_history (field1, field2, field3) Di2015NewLine   VALUES (@p1, @p2, @p3)";Di2015NewLinecmd.Parameters.AddWithValue("@p1", (object)someVar ?? DBNull.Value);Di2015NewLine//...Di2015NewLine
374544Di2015UniqueSeparator        DataTable dt = new DataTable("Table1");Di2015NewLine        dt.Columns.Add("A");Di2015NewLine        dt.Columns.Add("B");Di2015NewLine        dt.Columns.Add("C");Di2015NewLine        dt.Rows.Add(1, 2, 3);Di2015NewLine        this.dataGridView1.DataSource = dt;Di2015NewLine        this.dataGridView1.Columns[dataGridView1.Columns.Count - 1].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;Di2015NewLine
374663Di2015UniqueSeparatorNullable<T>
374663Di2015UniqueSeparatorT
374663Di2015UniqueSeparatorobj
374663Di2015UniqueSeparatorobj
374663Di2015UniqueSeparatorstatic bool IsNullable<T>(T obj)Di2015NewLine{Di2015NewLine    if (obj == null) return true; // obviousDi2015NewLine    Type type = typeof(T);Di2015NewLine    if (!type.IsValueType) return true; // ref-typeDi2015NewLine    if (Nullable.GetUnderlyingType(type) != null) return true; // Nullable<T>Di2015NewLine    return false; // value-typeDi2015NewLine}Di2015NewLine
374750Di2015UniqueSeparatorXNamespace ns0 = "http://dev1/MyWebService1.wsdl";Di2015NewLineDi2015NewLineString result = doc.Descendants(ns0 + "result").First().Value;Di2015NewLine
374750Di2015UniqueSeparatordoc
374750Di2015UniqueSeparatorXDocument
374750Di2015UniqueSeparatorXmlDocument
374776Di2015UniqueSeparatorif(myObject != null && myObject.Id != pId)Di2015NewLine{Di2015NewLine   myObject.Id = pId;Di2015NewLine   myObject.Order = pOrder;Di2015NewLine}Di2015NewLine
374776Di2015UniqueSeparator&&
374857Di2015UniqueSeparator        protected override void WndProc(ref Message m)Di2015NewLine        {Di2015NewLine            if (m.Msg == (int)0x102 && m.WParam.ToInt32() == 13)Di2015NewLine            {Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            base.WndProc(ref m);Di2015NewLine        }Di2015NewLine
374956Di2015UniqueSeparator^.*\\.(jpg|JPG|gif|GIF|doc|DOC|pdf|PDF)$Di2015NewLine
375032Di2015UniqueSeparatorList<int> BitPositions(uint input) {Di2015NewLine    List<int> result = new List<int>();Di2015NewLine    uint mask = 1;Di2015NewLine    int position = 0;Di2015NewLine    do {Di2015NewLine        if (input & mask != 0) {Di2015NewLine            result.Add(position);Di2015NewLine        }Di2015NewLine        mask <<= 1;Di2015NewLine        position++;Di2015NewLine    } while (mask != 0);Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
375074Di2015UniqueSeparatorvar unordered = ctx.ActiveUsersDi2015NewLine                   .Where(Employee.GetExpression(searchString))Di2015NewLine                   .OrderBy(ordering)Di2015NewLine                   .Select(u => new Employee {Di2015NewLine                       ID = u.ID,Di2015NewLine                       FirstName = u.FirstName,Di2015NewLine                       LastName = u.LastName,Di2015NewLine                       Email = u.Email,Di2015NewLine                       CompanyName = u.Company.Name,Di2015NewLine                       CompanyID = u.CompanyID.ToString() });Di2015NewLine
375074Di2015UniqueSeparatorpublic static class UserQueryableExtensionsDi2015NewLine{Di2015NewLine    public static IOrderedQueryable<User> OrderBy(this IQueryable<User> source,Di2015NewLine                                                  string ordering)Di2015NewLine    {Di2015NewLine        switch (ordering)Di2015NewLine        {Di2015NewLine            case "LastName":Di2015NewLine                return source.OrderBy(x => x.LastName);Di2015NewLine            case "FirstName":Di2015NewLine                return source.OrderBy(x => x.FirstName);Di2015NewLine            case "Email":Di2015NewLine                return source.OrderBy(x => x.Email);Di2015NewLine            case "Company":Di2015NewLine                return source.OrderBy(x => x.Company);Di2015NewLine            default:Di2015NewLine                throw new ArgumentException("Unknown ordering");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
375304Di2015UniqueSeparatorHttpUtility.ParseQueryString
375304Di2015UniqueSeparatorHttpValueCollection
375304Di2015UniqueSeparatorNameValueCollection
375304Di2015UniqueSeparatorToString
375304Di2015UniqueSeparatorHttpValueCollection
375304Di2015UniqueSeparatorToString
375386Di2015UniqueSeparatorprivate myCollection _MyCollection; Di2015NewLinepublic myCollection MyCollection { Di2015NewLine    get { return _MyCollection.AsReadOnly(); } Di2015NewLine    private set { _MyCollection = value; } Di2015NewLine}Di2015NewLine
375386Di2015UniqueSeparatorPrivate _MyCollection As myCollectionDi2015NewLinePublic Property MyCollection() As myCollectionDi2015NewLine  GetDi2015NewLine     Return _MyCollection.AsReadOnlyDi2015NewLine  End GetDi2015NewLine  Private Set(ByVal value As myCollection)Di2015NewLine    _MyCollection = valueDi2015NewLine  End SetDi2015NewLineEnd PropertyDi2015NewLine
375386Di2015UniqueSeparatorPrivate _MyCollection as myCollection = NothingDi2015NewLinePublic Shared ReadOnly Property MyCollection() As myCollectionDi2015NewLine   GetDi2015NewLine      If _MyCollection is Nothing Then _MyCollection = New myCollectionDi2015NewLine      Return _MyCollectionDi2015NewLine   End GetDi2015NewLineEnd PropertyDi2015NewLine
375529Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)    Di2015NewLine{Di2015NewLine    Page.ClientScript.RegisterOnSubmitStatement(typeof(Page), "closePage", "window.onunload = CloseWindow();");Di2015NewLine}Di2015NewLine
375529Di2015UniqueSeparatorfunction CloseWindow() {Di2015NewLine    window.close();Di2015NewLine}Di2015NewLine
375646Di2015UniqueSeparator tryDi2015NewLine {Di2015NewLine   XDocument xd1 = new XDocument();Di2015NewLine   xd1 = XDocument.Load(myfile);Di2015NewLine }Di2015NewLine catch (XmlException exception)Di2015NewLine {Di2015NewLine     ShowMessage("Your XML was probably bad...");Di2015NewLine }Di2015NewLine
375777Di2015UniqueSeparatorDateTime.Now.Subtract(new TimeSpan(1, 0, 0));Di2015NewLine
375808Di2015UniqueSeparatorpublic class TestListView : System.Windows.Forms.ListViewDi2015NewLine{Di2015NewLine    private const int WM_HSCROLL = 0x114;Di2015NewLine    private const int WM_VSCROLL = 0x115;Di2015NewLine    public event EventHandler Scroll;Di2015NewLineDi2015NewLine    protected void OnScroll()Di2015NewLine    {Di2015NewLineDi2015NewLine        if (this.Scroll != null)Di2015NewLine            this.Scroll(this, EventArgs.Empty);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    protected override void WndProc(ref System.Windows.Forms.Message m)Di2015NewLine    {Di2015NewLine        base.WndProc(ref m);Di2015NewLine        if (m.Msg == WM_HSCROLL || m.Msg == WM_VSCROLL)Di2015NewLine            this.OnScroll();Di2015NewLine    }Di2015NewLine}Di2015NewLine
375824Di2015UniqueSeparatorDataTable
375824Di2015UniqueSeparatorvar qry = from row in [someDataSource]Di2015NewLine          group row by row.Category into grpDi2015NewLine          select new {Category = grp.Key, Count = grp.Count(),Di2015NewLine              TotalValue = grp.Sum(x=>x.Value) };Di2015NewLineDi2015NewLineforeach(var x in qry) {Di2015NewLine    Console.WriteLine("{0}, {1}, {2}", x.Category, x.Count, x.TotalValue);Di2015NewLine}Di2015NewLine
375824Di2015UniqueSeparatorList<T>
375882Di2015UniqueSeparatorusing System;Di2015NewLineusing Microsoft.Win32;Di2015NewLine
375882Di2015UniqueSeparatorpublic static string GetFrameworkDirectory()Di2015NewLine{Di2015NewLine  // This is the location of the .Net Framework Registry KeyDi2015NewLine  string framworkRegPath = @"Software\\Microsoft\\.NetFramework";Di2015NewLineDi2015NewLine  // Get a non-writable key from the registryDi2015NewLine  RegistryKey netFramework = Registry.LocalMachine.OpenSubKey(framworkRegPath, false);Di2015NewLineDi2015NewLine  // Retrieve the install root path for the frameworkDi2015NewLine  string installRoot = netFramework.GetValue("InstallRoot").ToString();Di2015NewLineDi2015NewLine  // Retrieve the version of the framework executing this programDi2015NewLine  string version = string.Format(@"v{0}.{1}.{2}\\",Di2015NewLine    Environment.Version.Major, Di2015NewLine    Environment.Version.Minor,Di2015NewLine    Environment.Version.Build); Di2015NewLineDi2015NewLine  // Return the path of the frameworkDi2015NewLine  return System.IO.Path.Combine(installRoot, version);     Di2015NewLine}Di2015NewLine
375926Di2015UniqueSeparatorIProvider<T>
375926Di2015UniqueSeparatorValue
375926Di2015UniqueSeparatorFixedProvider<T>
375964Di2015UniqueSeparator        XDocument doc = XDocument.Parse(xml);Di2015NewLine        var query = from item in doc.Descendants("item")Di2015NewLine                    select newDi2015NewLine                    {Di2015NewLine                        att1 = (string)item.Attribute("att1"),Di2015NewLine                        att2 = (string)item.Attribute("att2") // if neededDi2015NewLine                    } into nodeDi2015NewLine                    group node by node.att1 into grpDi2015NewLine                    select new { att1 = grp.Key, Count = grp.Count() };Di2015NewLineDi2015NewLine        foreach (var item in query.OrderByDescending(x=>x.Count).Take(4))Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0} = {1}", item.att1, item.Count);Di2015NewLine        }Di2015NewLine
376113Di2015UniqueSeparator Assembly.GetType("MyCompany.Class1+Class2");Di2015NewLine
376140Di2015UniqueSeparator&
376255Di2015UniqueSeparator        protected override bool ProcessDialogKey(Keys keyData)Di2015NewLine        {Di2015NewLine            if (keyData != Keys.Tab)Di2015NewLine            {Di2015NewLine              return base.ProcessDialogKey(keyData);Di2015NewLine            }Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine
376291Di2015UniqueSeparator[OutputCache(Location = OutputCacheLocation.None)]Di2015NewLinepublic ActionResult Step1()Di2015NewLine{Di2015NewLine        return View();Di2015NewLine}Di2015NewLine
376304Di2015UniqueSeparator<asp:PlaceHolder runat="server" ID="plhContent" />Di2015NewLine
376304Di2015UniqueSeparator[ParseChildren(false)]Di2015NewLine[PersistChildren(true)]Di2015NewLine
376304Di2015UniqueSeparatorpublic void RegisterUpdatePanel(UpdatePanel panel)Di2015NewLine{Di2015NewLine    MethodInfo m =Di2015NewLine        (from methods in typeof (ScriptManager).GetMethods(BindingFlags.NonPublic | BindingFlags.Instance)Di2015NewLine         where methods.Name.Equals("System.Web.UI.IScriptManagerInternal.RegisterUpdatePanel")Di2015NewLine         select methods).First();Di2015NewLineDi2015NewLine    m.Invoke(ScriptManager.GetCurrent(Page), new object[] {panel});Di2015NewLine}Di2015NewLineDi2015NewLineprotected override void CreateChildControls()Di2015NewLine{Di2015NewLine    for (int i = 0; i < Controls.Count; i++)Di2015NewLine        if (Controls[i] is MyLastControl)Di2015NewLine            while (i + 2 < Controls.Count)Di2015NewLine            {Di2015NewLine                // In cas there is an updatepanel in the control we are movingDi2015NewLine                // We are registering an event to register the updatepanelDi2015NewLine                // to the scriptmanager againDi2015NewLine                SearchUpdatePanel(Controls[i + 2]);Di2015NewLine                plhContent.Controls.Add(Controls[i + 2]);Di2015NewLine            }Di2015NewLine    base.CreateChildControls();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void SearchUpdatePanel(Control control)Di2015NewLine{Di2015NewLine    if (control is UpdatePanel)Di2015NewLine        control.Unload += updPnl_Unload;Di2015NewLineDi2015NewLine    foreach (Control childcontrol in control.Controls)Di2015NewLine        SearchUpdatePanel(childcontrol);Di2015NewLine}Di2015NewLineDi2015NewLineprotected void updPnl_Unload(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    RegisterUpdatePanel((UpdatePanel) sender);Di2015NewLine}Di2015NewLine
376509Di2015UniqueSeparatorUPDATE table SET views=views+1 WHERE myId=12;Di2015NewLine
376599Di2015UniqueSeparatorPage p = BuildManager.CreateInstanceFromVirtualPath("~/Default.aspx", typeof(Page))Di2015NewLine
376670Di2015UniqueSeparatorUser.InRole( "RoleName" )
376670Di2015UniqueSeparatorvar attributes = typeof(MyController).GetMethod("Index")Di2015NewLine                                     .GetCustomAttributes(typeof(AuthorizeAttribute),Di2015NewLine                                                          false)Di2015NewLine                 as AuthorizeAttribute;Di2015NewLineDi2015NewLineattributes[0].Roles = Config.GMPUser;Di2015NewLine
376754Di2015UniqueSeparatorint noOfRows = data.Count - 1;Di2015NewLineint noOfColumns = mydataclass.GetType().GetProperties().Count() - 1;Di2015NewLineObject[noOfRows, noOfColumns] myArray;Di2015NewLine
376754Di2015UniqueSeparatorXLOLESheetobj.Range("A1","Z20").Value = myArray;Di2015NewLine
376949Di2015UniqueSeparatorcmd.CommandType = CommandType.StoredProcedure;Di2015NewLine
376949Di2015UniqueSeparatorsp_executesql
376949Di2015UniqueSeparatorcmd.CommandType = CommandType.Text
376949Di2015UniqueSeparatorexec
377193Di2015UniqueSeparatorIsDBNull(int ordinal)
377193Di2015UniqueSeparatorstring email = reader.IsDBNull(0) ? null : reader.GetString(0);Di2015NewLine
377193Di2015UniqueSeparatorGetOrdinal
377193Di2015UniqueSeparatorstring GetSafeString(this IDataReader reader, string name)Di2015NewLine{Di2015NewLine    int index = reader.GetOrdinal(name);Di2015NewLine    return reader.IsDBNull(0) ? null : reader.GetString(0);Di2015NewLine}Di2015NewLine
377193Di2015UniqueSeparatorint?
377224Di2015UniqueSeparatorPredicate<T>
377224Di2015UniqueSeparator    public delegate void Action();Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        DoStuff(delegate {Foo(5);});Di2015NewLine        DoStuff(delegate {Bar("abc","def");});Di2015NewLine    }Di2015NewLine    static void DoStuff(Action action)Di2015NewLine    {Di2015NewLine        action();Di2015NewLine    }Di2015NewLine    static void Foo(int i)Di2015NewLine    {Di2015NewLine        Console.WriteLine(i);Di2015NewLine    }Di2015NewLine    static void Bar(string s, string t)Di2015NewLine    {Di2015NewLine        Console.WriteLine(s+t);Di2015NewLine    }Di2015NewLine
377224Di2015UniqueSeparatorAction
377224Di2015UniqueSeparatordelegate {...}
377224Di2015UniqueSeparator    static void Main()Di2015NewLine    {Di2015NewLine        DoStuff(delegate (string s) {Foo(5);});Di2015NewLine        DoStuff(delegate (string s) {Bar(s,"def");});Di2015NewLine    }Di2015NewLine    static void DoStuff(Action<string> action)Di2015NewLine    {Di2015NewLine        action("abc");Di2015NewLine    }Di2015NewLine    static void Foo(int i)Di2015NewLine    {Di2015NewLine        Console.WriteLine(i);Di2015NewLine    }Di2015NewLine    static void Bar(string s, string t)Di2015NewLine    {Di2015NewLine        Console.WriteLine(s+t);Di2015NewLine    }Di2015NewLine
377350Di2015UniqueSeparatorMonthCalendar
377350Di2015UniqueSeparatorSelectionRange
377350Di2015UniqueSeparatorINotifyPropertyChanged
377350Di2015UniqueSeparatorActual(...)
377350Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Windows.Forms;Di2015NewLineclass Foo : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    protected virtual void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        var handler = PropertyChanged;Di2015NewLine        if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine        Debug.WriteLine(ToString());Di2015NewLine    }Di2015NewLine    private void SetField<T>(ref T field, T value, string propertyName)Di2015NewLine    {Di2015NewLine        if (!EqualityComparer<T>.Default.Equals(field, value))Di2015NewLine        {Di2015NewLine            field = value;Di2015NewLine            OnPropertyChanged(propertyName);            Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private DateTime start, end;Di2015NewLine    public DateTime Start { get { return start; } set { SetField(ref start, value, "Start"); } }Di2015NewLine    public DateTime End { get { return end; } set { SetField(ref end, value, "End"); } }Di2015NewLine}Di2015NewLineDi2015NewLineclass BindableCalendar : MonthCalendarDi2015NewLine{Di2015NewLine    public DateTime ActualSelectionStartDi2015NewLine    {Di2015NewLine        get { return SelectionRange.Start; }Di2015NewLine        set { if (ActualSelectionStart != value) { SetSelectionRange(value, ActualSelectionEnd); } }Di2015NewLine    }Di2015NewLine    public DateTime ActualSelectionEndDi2015NewLine    {Di2015NewLine        get { return SelectionRange.End; }Di2015NewLine        set { if (ActualSelectionEnd != value) { SetSelectionRange(ActualSelectionStart, value); } }Di2015NewLine    }Di2015NewLine    // should really use EventHandlerList here...Di2015NewLine    public event EventHandler ActualSelectionStartChanged, ActualSelectionEndChanged;Di2015NewLineDi2015NewLine    DateTime lastKnownStart, lastKnownEnd;Di2015NewLine    protected override void OnDateChanged(DateRangeEventArgs drevent)Di2015NewLine    {Di2015NewLine        base.OnDateChanged(drevent);Di2015NewLine        if (lastKnownStart != drevent.Start)Di2015NewLine        {Di2015NewLine            if (ActualSelectionStartChanged != null) ActualSelectionStartChanged(this, EventArgs.Empty);Di2015NewLine            lastKnownStart = drevent.Start;Di2015NewLine        }Di2015NewLine        if (lastKnownEnd != drevent.End)Di2015NewLine        {Di2015NewLine            if (ActualSelectionEndChanged != null) ActualSelectionEndChanged(this, EventArgs.Empty);Di2015NewLine            lastKnownEnd = drevent.End;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLineDi2015NewLine        Application.EnableVisualStyles();Di2015NewLine        MonthCalendar cal;Di2015NewLine        Button btn;Di2015NewLine        using (Form form = new FormDi2015NewLine        {Di2015NewLine            Controls = {Di2015NewLine                (cal = new BindableCalendar { Dock = DockStyle.Fill, MaxSelectionCount = 10 }),Di2015NewLine                (btn = new Button { Dock = DockStyle.Bottom, Text = "thwack"})Di2015NewLine            }Di2015NewLine        })Di2015NewLine        {Di2015NewLine            Foo foo = new Foo { Start = DateTime.Today, End = DateTime.Today.AddDays(1) };Di2015NewLine            cal.DataBindings.Add("ActualSelectionStart", foo, "Start").DataSourceUpdateMode = DataSourceUpdateMode.OnPropertyChanged;Di2015NewLine            cal.DataBindings.Add("ActualSelectionEnd", foo, "End").DataSourceUpdateMode = DataSourceUpdateMode.OnPropertyChanged;Di2015NewLine            btn.Click += delegateDi2015NewLine            {Di2015NewLine                foo.Start = foo.Start.AddDays(1);Di2015NewLine                foo.End = foo.End.AddDays(1);Di2015NewLine            };Di2015NewLine            Application.Run(form);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
377494Di2015UniqueSeparatorIList
377494Di2015UniqueSeparatorIEnumerable
377494Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class MyCollectionWrapper {Di2015NewLine    [XmlAttribute]Di2015NewLine    public string SomeProp {get;set;} // custom props etcDi2015NewLine    [XmlAttribute]Di2015NewLine    public int SomeOtherProp {get;set;} // custom props etcDi2015NewLine    public Collection<string> Items {get;set;} // the itemsDi2015NewLine}Di2015NewLine
377494Di2015UniqueSeparatorIXmlSerializable
378004Di2015UniqueSeparatorrxvt/W11/wrap/wrap.c
378004Di2015UniqueSeparatorhideConsole()
378004Di2015UniqueSeparatorCreateFile("CONOUT$" ...)
378004Di2015UniqueSeparatorGetConsoleScreenBufferInfo()
378004Di2015UniqueSeparatorSetConsoleTitle
378004Di2015UniqueSeparatorFindWindow
378004Di2015UniqueSeparatorSleep
378004Di2015UniqueSeparatorShowWindowAsync
378004Di2015UniqueSeparatorSW_HIDE
378026Di2015UniqueSeparator  if ((bool1? 1:0) + (bool2? 1:0) + (bool3? 1:0) + Di2015NewLine      (bool4? 1:0) + (bool5? 1:0) > 1)Di2015NewLine      // do somethingDi2015NewLine
378026Di2015UniqueSeparator   public bool ExceedsThreshold(int threshold, IEnumerable<bool> bools)Di2015NewLine    {Di2015NewLine       int trueCnt = 0;Di2015NewLine       foreach(bool b in bools)Di2015NewLine          if (b && (++trueCnt > threshold)) Di2015NewLine              return true;Di2015NewLine       return false;          Di2015NewLine    } Di2015NewLine
378026Di2015UniqueSeparator    public bool ExceedsThreshold(int threshold, IEnumerable<bool> bools)Di2015NewLine    { return bools.Count(b => b) > threshold; }Di2015NewLine
378026Di2015UniqueSeparator    public void ExceedsThreshold<T>(int threshold, Di2015NewLine                      Action<T> action, T parameter, Di2015NewLine                      IEnumerable<bool> bools)Di2015NewLine    { if (ExceedsThreshold(threshold, bools)) action(parameter); }Di2015NewLine
378026Di2015UniqueSeparator    public void ExceedsThreshold(int threshold, Di2015NewLine            Action action, IEnumerable<bool> bools)Di2015NewLine    { if (ExceedsThreshold(threshold, bools)) action(); }Di2015NewLine
378036Di2015UniqueSeparatorstatic void Clear(int x, int y, int width, int height)Di2015NewLine{Di2015NewLine    int curTop = Console.CursorTop;Di2015NewLine    int curLeft = Console.CursorLeft;Di2015NewLine    for (; height > 0;)Di2015NewLine    {Di2015NewLine        Console.SetCursorPosition(x, y + --height);Di2015NewLine        Console.Write(new string(' ',width));Di2015NewLine    }Di2015NewLine    Console.SetCursorPosition(curLeft, curTop);Di2015NewLine}Di2015NewLine
378140Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main() {}Di2015NewLineDi2015NewLine    static void DeclareInside()Di2015NewLine    {Di2015NewLine        for (int i=0; i < 10; i++)Di2015NewLine        {Di2015NewLine            bool x = false;Di2015NewLine            for (int j=5; j < 20; j++)Di2015NewLine            {Di2015NewLine                if (i == j)Di2015NewLine                {Di2015NewLine                    x = true;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                if (x)Di2015NewLine                {Di2015NewLine                    Console.WriteLine("Yes");Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void DeclareOutside()Di2015NewLine    {Di2015NewLine        bool x;Di2015NewLine        for (int i=0; i < 10; i++)Di2015NewLine        {Di2015NewLine            x = false;Di2015NewLine            for (int j=5; j < 20; j++)Di2015NewLine            {Di2015NewLine                if (i == j)Di2015NewLine                {Di2015NewLine                    x = true;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                if (x)Di2015NewLine                {Di2015NewLine                    Console.WriteLine("Yes");Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
378140Di2015UniqueSeparatorcsc Test.cs
378140Di2015UniqueSeparator.method private hidebysig static void  DeclareOutside() cil managedDi2015NewLine{Di2015NewLine  // Code size       79 (0x4f)Di2015NewLine  .maxstack  2Di2015NewLine  .locals init (bool V_0,Di2015NewLine           int32 V_1,Di2015NewLine           int32 V_2,Di2015NewLine           bool V_3)Di2015NewLine  IL_0000:  nopDi2015NewLine  IL_0001:  ldc.i4.0Di2015NewLine  IL_0002:  stloc.1Di2015NewLine  IL_0003:  br.s       IL_0045Di2015NewLine  IL_0005:  nopDi2015NewLine  IL_0006:  ldc.i4.0Di2015NewLine  IL_0007:  stloc.0Di2015NewLine  IL_0008:  ldc.i4.5Di2015NewLine  IL_0009:  stloc.2Di2015NewLine  IL_000a:  br.s       IL_0037Di2015NewLine  IL_000c:  nopDi2015NewLine  IL_000d:  ldloc.1Di2015NewLine  IL_000e:  ldloc.2Di2015NewLine  IL_000f:  ceqDi2015NewLine  IL_0011:  ldc.i4.0Di2015NewLine  IL_0012:  ceqDi2015NewLine  IL_0014:  stloc.3Di2015NewLine  IL_0015:  ldloc.3Di2015NewLine  IL_0016:  brtrue.s   IL_001dDi2015NewLine  IL_0018:  nopDi2015NewLine  IL_0019:  ldc.i4.1Di2015NewLine  IL_001a:  stloc.0Di2015NewLine  IL_001b:  br.s       IL_0040Di2015NewLine  IL_001d:  ldloc.0Di2015NewLine  IL_001e:  ldc.i4.0Di2015NewLine  IL_001f:  ceqDi2015NewLine  IL_0021:  stloc.3Di2015NewLine  IL_0022:  ldloc.3Di2015NewLine  IL_0023:  brtrue.s   IL_0032Di2015NewLine  IL_0025:  nopDi2015NewLine  IL_0026:  ldstr      "Yes"Di2015NewLine  IL_002b:  call       void [mscorlib]System.Console::WriteLine(string)Di2015NewLine  IL_0030:  nopDi2015NewLine  IL_0031:  nopDi2015NewLine  IL_0032:  nopDi2015NewLine  IL_0033:  ldloc.2Di2015NewLine  IL_0034:  ldc.i4.1Di2015NewLine  IL_0035:  addDi2015NewLine  IL_0036:  stloc.2Di2015NewLine  IL_0037:  ldloc.2Di2015NewLine  IL_0038:  ldc.i4.s   20Di2015NewLine  IL_003a:  cltDi2015NewLine  IL_003c:  stloc.3Di2015NewLine  IL_003d:  ldloc.3Di2015NewLine  IL_003e:  brtrue.s   IL_000cDi2015NewLine  IL_0040:  nopDi2015NewLine  IL_0041:  ldloc.1Di2015NewLine  IL_0042:  ldc.i4.1Di2015NewLine  IL_0043:  addDi2015NewLine  IL_0044:  stloc.1Di2015NewLine  IL_0045:  ldloc.1Di2015NewLine  IL_0046:  ldc.i4.s   10Di2015NewLine  IL_0048:  cltDi2015NewLine  IL_004a:  stloc.3Di2015NewLine  IL_004b:  ldloc.3Di2015NewLine  IL_004c:  brtrue.s   IL_0005Di2015NewLine  IL_004e:  retDi2015NewLine} // end of method Test::DeclareOutsideDi2015NewLineDi2015NewLine.method private hidebysig static void  DeclareInside() cil managedDi2015NewLine{Di2015NewLine  // Code size       79 (0x4f)Di2015NewLine  .maxstack  2Di2015NewLine  .locals init (int32 V_0,Di2015NewLine           bool V_1,Di2015NewLine           int32 V_2,Di2015NewLine           bool V_3)Di2015NewLine  IL_0000:  nopDi2015NewLine  IL_0001:  ldc.i4.0Di2015NewLine  IL_0002:  stloc.0Di2015NewLine  IL_0003:  br.s       IL_0045Di2015NewLine  IL_0005:  nopDi2015NewLine  IL_0006:  ldc.i4.0Di2015NewLine  IL_0007:  stloc.1Di2015NewLine  IL_0008:  ldc.i4.5Di2015NewLine  IL_0009:  stloc.2Di2015NewLine  IL_000a:  br.s       IL_0037Di2015NewLine  IL_000c:  nopDi2015NewLine  IL_000d:  ldloc.0Di2015NewLine  IL_000e:  ldloc.2Di2015NewLine  IL_000f:  ceqDi2015NewLine  IL_0011:  ldc.i4.0Di2015NewLine  IL_0012:  ceqDi2015NewLine  IL_0014:  stloc.3Di2015NewLine  IL_0015:  ldloc.3Di2015NewLine  IL_0016:  brtrue.s   IL_001dDi2015NewLine  IL_0018:  nopDi2015NewLine  IL_0019:  ldc.i4.1Di2015NewLine  IL_001a:  stloc.1Di2015NewLine  IL_001b:  br.s       IL_0040Di2015NewLine  IL_001d:  ldloc.1Di2015NewLine  IL_001e:  ldc.i4.0Di2015NewLine  IL_001f:  ceqDi2015NewLine  IL_0021:  stloc.3Di2015NewLine  IL_0022:  ldloc.3Di2015NewLine  IL_0023:  brtrue.s   IL_0032Di2015NewLine  IL_0025:  nopDi2015NewLine  IL_0026:  ldstr      "Yes"Di2015NewLine  IL_002b:  call       void [mscorlib]System.Console::WriteLine(string)Di2015NewLine  IL_0030:  nopDi2015NewLine  IL_0031:  nopDi2015NewLine  IL_0032:  nopDi2015NewLine  IL_0033:  ldloc.2Di2015NewLine  IL_0034:  ldc.i4.1Di2015NewLine  IL_0035:  addDi2015NewLine  IL_0036:  stloc.2Di2015NewLine  IL_0037:  ldloc.2Di2015NewLine  IL_0038:  ldc.i4.s   20Di2015NewLine  IL_003a:  cltDi2015NewLine  IL_003c:  stloc.3Di2015NewLine  IL_003d:  ldloc.3Di2015NewLine  IL_003e:  brtrue.s   IL_000cDi2015NewLine  IL_0040:  nopDi2015NewLine  IL_0041:  ldloc.0Di2015NewLine  IL_0042:  ldc.i4.1Di2015NewLine  IL_0043:  addDi2015NewLine  IL_0044:  stloc.0Di2015NewLine  IL_0045:  ldloc.0Di2015NewLine  IL_0046:  ldc.i4.s   10Di2015NewLine  IL_0048:  cltDi2015NewLine  IL_004a:  stloc.3Di2015NewLine  IL_004b:  ldloc.3Di2015NewLine  IL_004c:  brtrue.s   IL_0005Di2015NewLine  IL_004e:  retDi2015NewLine} // end of method Test::DeclareInsideDi2015NewLine
378162Di2015UniqueSeparator<xs:include schemaLocation="YOUR_DIRECTORY\\namespace.assemblyname.xsd"/>Di2015NewLine
378169Di2015UniqueSeparator<my:DataGrid x:Name="Grid" Grid.Row="1" Margin="5" GridlinesVisibility="None" PreparingRow="Grid_PreparingRow">Di2015NewLine    <my:DataGrid.Columns>Di2015NewLine        <my:DataGridTextBoxColumn Di2015NewLine            DisplayMemberBinding="{Binding Cheese}" Di2015NewLine            Header="Cheese"></my:DataGridTextBoxColumn>Di2015NewLine        <my:DataGridTextBoxColumn Di2015NewLine            DisplayMemberBinding="{Binding Biscuit}" Di2015NewLine            Header="Biscuit"></my:DataGridTextBoxColumn>Di2015NewLine    </my:DataGrid.Columns>Di2015NewLine</my:DataGrid>Di2015NewLine
378169Di2015UniqueSeparatorthis.Grid.AlternatingRowBackground = null; Di2015NewLineDi2015NewLineprivate void Grid_PreparingRow(object sender, DataGridRowEventArgs e)Di2015NewLine{Di2015NewLine    CheesyClass c = e.Row.DataContext as CheesyClass;Di2015NewLine    if (c != null && c.Cheese == "cheddar")Di2015NewLine    {Di2015NewLine       e.Row.Background = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromArgb(255, 255, 125, 125));Di2015NewLine    }Di2015NewLine}Di2015NewLine
378182Di2015UniqueSeparatorISession.Delete(query)
378182Di2015UniqueSeparatorsession.Delete("from Product p join p.Categories c where c.id = :category", category, NHibernateUtil.Entity(typeof(Category)));Di2015NewLine
378182Di2015UniqueSeparatorsession.CreateSQLQuery
378286Di2015UniqueSeparator\\r\\a
378286Di2015UniqueSeparatorprivate string stripCellText(string text)Di2015NewLine{Di2015NewLine      return text.Replace("\\r\\a", "");Di2015NewLine}Di2015NewLineDi2015NewLinestring text = stripCellText(wordTable.cell(tablerow.index, 1).Range.Text);Di2015NewLine
378363Di2015UniqueSeparator  MgProcess.CorProcess.Stop(0);Di2015NewLine  MgProcess.Detach();Di2015NewLine
378477Di2015UniqueSeparatorpublic bool TryGetValue(TKey key, out TValue value)Di2015NewLine{Di2015NewLine    int index = this.FindEntry(key);Di2015NewLine    if (index >= 0)Di2015NewLine    {Di2015NewLine        value = this.entries[index].value;Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    value = default(TValue);Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
378477Di2015UniqueSeparatorpublic bool ContainsKey(TKey key)Di2015NewLine{Di2015NewLine    return (this.FindEntry(key) >= 0);Di2015NewLine}Di2015NewLine
378508Di2015UniqueSeparatorCampaignStatus
378508Di2015UniqueSeparatorDataContext
378508Di2015UniqueSeparatorenum
378582Di2015UniqueSeparatorRegex regex = new Regex(@"\\A(?:(a|b|abc)*)\\Z");Di2015NewLine
378657Di2015UniqueSeparator if(body2.Tag is Dog)Di2015NewLine
378657Di2015UniqueSeparatorDog Temp = body2.Tag as Dog;Di2015NewLineif (temp != null)Di2015NewLine
378657Di2015UniqueSeparatorDog dog = body2.Tag as Dog;Di2015NewLineif (dog != null)Di2015NewLine{Di2015NewLine    dog.Bark();Di2015NewLine}Di2015NewLine
379008Di2015UniqueSeparatorbool IsDottedDecimalIP(string possibleIP)Di2015NewLine{Di2015NewLine    Regex R = New Regex(@"\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b");Di2015NewLine    return R.IsMatch(possibleIP) && Net.IPAddress.TryParse(possibleIP, null);Di2015NewLine}Di2015NewLine
379030Di2015UniqueSeparator    public event EventHandler SelectedIndexChangedDi2015NewLine    {Di2015NewLine        add { this.TargetControl.SelectedIndexChanged += value; }Di2015NewLine        remove { this.TargetControl.SelectedIndexChanged -= value; }Di2015NewLine    }Di2015NewLine
379032Di2015UniqueSeparator<Style TargetType="TextBlock">Di2015NewLine    <Setter Property="FontSize">Di2015NewLine        <Setter.Value>Di2015NewLine            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}">Di2015NewLine                <Binding.Converter>Di2015NewLine                    <MyConverter/>Di2015NewLine                </Binding.Converter>Di2015NewLine            </Binding>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
379032Di2015UniqueSeparator<Style TargetType="TextBlock">Di2015NewLine    <Setter Property="FontSize" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MyConverter}}"/>Di2015NewLine</Style>Di2015NewLine
379096Di2015UniqueSeparatorIEnumerable
379096Di2015UniqueSeparatorISomeTable
379096Di2015UniqueSeparatorIQueryable
379129Di2015UniqueSeparatorpublic class GenericClass<T> where T : new() {Di2015NewLine    //class definitionDi2015NewLineDi2015NewLine    private void SomeMethod() {Di2015NewLine        T myT = new T();Di2015NewLine        //work with myTDi2015NewLine    }Di2015NewLine}Di2015NewLine
379272Di2015UniqueSeparatorDictionary<string, int>
379272Di2015UniqueSeparatorEnum.Parse
379272Di2015UniqueSeparatorvar ordering = Dictionary<string, int>();Di2015NewLineordering.Add("FA", 0);Di2015NewLineordering.Add("TY", 1); // …Di2015NewLineDi2015NewLineMyList.Sort((a, b) => ordering[a].CompareTo(ordering[b]));Di2015NewLine
379272Di2015UniqueSeparatorList<T>.Sort
379272Di2015UniqueSeparatortemplate
379341Di2015UniqueSeparatorCompiled
379341Di2015UniqueSeparatorReplace
379341Di2015UniqueSeparatorstring varname = "name";Di2015NewLinestring pattern = "{" + varname + "}";Di2015NewLineConsole.WriteLine("Hi {name}".Replace(pattern, "Mike"));Di2015NewLine
379582Di2015UniqueSeparator        int i = 6;Di2015NewLine        byte[] raw = new byte[4] {Di2015NewLine            (byte)(i >> 24), (byte)(i >> 16),Di2015NewLine            (byte)(i >> 8), (byte)(i)};Di2015NewLine
379665Di2015UniqueSeparatorprotected void Page_Load(object sender, EventsArgs e)Di2015NewLine{Di2015NewLine    MyButton.OnClientClick = "MyJavaScriptMethod();";Di2015NewLine}Di2015NewLine
379819Di2015UniqueSeparator<system.codedom>Di2015NewLine  <compilers>Di2015NewLine    <compilerDi2015NewLine      language="vb;vbs;visualbasic;vbscript"Di2015NewLine      extension=".vb"Di2015NewLine      type="Microsoft.VisualBasic.VBCodeProvider, System, Di2015NewLine        Version=2.0.3600.0, Culture=neutral, Di2015NewLine        PublicKeyToken=b77a5c561934e089"Di2015NewLine      compilerOptions="/optimize"Di2015NewLine      warningLevel="1" >Di2015NewLine      <providerOptionDi2015NewLine        name="CompilerVersion"Di2015NewLine        value="v3.5" />Di2015NewLine    </compiler>Di2015NewLine    <compilerDi2015NewLine      language="c#;cs;csharp"Di2015NewLine      extension=".cs"Di2015NewLine      type="Microsoft.CSharp.CSharpCodeProvider, System, Di2015NewLine        Version=2.0.3600.0, Culture=neutral, Di2015NewLine        PublicKeyToken=b77a5c561934e089"Di2015NewLine      compilerOptions="/optimize"Di2015NewLine      warningLevel="1" >Di2015NewLine      <providerOptionDi2015NewLine        name="CompilerVersion"Di2015NewLine        value="v3.5" />Di2015NewLine    </compiler>Di2015NewLine  </compilers>Di2015NewLine</system.codedom>Di2015NewLine
380048Di2015UniqueSeparatorLookupAccountSid()
380048Di2015UniqueSeparatorLookupAccountSid()
380048Di2015UniqueSeparatorBOOL LookupAccountSid(LPCTSTR lpSystemName, PSID Sid,LPTSTR Name, LPDWORD cbName,Di2015NewLine                       LPTSTR ReferencedDomainName, LPDWORD cbReferencedDomainName,Di2015NewLine                       PSID_NAME_USE peUse);Di2015NewLine
380108Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic string Method1()Di2015NewLine{Di2015NewLine    return "This is my return value";Di2015NewLine}Di2015NewLineDi2015NewLine[WebMethod]Di2015NewLinepublic void Method2(out string strVal1)Di2015NewLine{Di2015NewLine    strVal1 = "This is my value passed as an output";Di2015NewLine    //No return valueDi2015NewLine}Di2015NewLineDi2015NewLine[WebMethod]Di2015NewLinepublic void Method3(out string strVal1, out string strVal2)Di2015NewLine{Di2015NewLine    strVal1 = "This is my strVal1 value passed as an output";Di2015NewLine    strVal2 = "This is my strVal2 value passed as an output";Di2015NewLine    //No return valueDi2015NewLine}Di2015NewLineDi2015NewLine[WebMethod]Di2015NewLinepublic string Method4(out string strVal1, out string strVal2)Di2015NewLine{Di2015NewLine    strVal1 = "This is my strVal1 value passed as an output";Di2015NewLine    strVal2 = "This is my strVal2 value passed as an output";Di2015NewLine    return "This is my return value";Di2015NewLine}Di2015NewLine
380108Di2015UniqueSeparatorvar str = svc.Method1();Di2015NewLineConsole.WriteLine(str);Di2015NewLine
380108Di2015UniqueSeparatorvar str = svc.Method2();Di2015NewLineConsole.WriteLine(str);Di2015NewLine
380108Di2015UniqueSeparatorvar str2 = String.Empty;Di2015NewLinevar str1 = svc.Method3(out str2);Di2015NewLineConsole.WriteLine(str1);Di2015NewLineConsole.WriteLine(str2);Di2015NewLine
380108Di2015UniqueSeparatorvar str1 = String.Empty;Di2015NewLinevar str2 = String.Empty;Di2015NewLinevar str3 = svc.Method4(out str1, out str2);Di2015NewLineConsole.WriteLine(str1);Di2015NewLineConsole.WriteLine(str2);Di2015NewLineConsole.WriteLine(str3);Di2015NewLine
380108Di2015UniqueSeparator[WebMethod()]Di2015NewLinepublic void Method3(ref string strVal1, ref string strVal2)Di2015NewLine{Di2015NewLine    strVal1 = "First argument return value";Di2015NewLine    strVal2 = "Second argument return value";Di2015NewLine}Di2015NewLine
380108Di2015UniqueSeparatorstring val1 = String.Empty;Di2015NewLinestring val2 = String.Empty;Di2015NewLinesvc.Method3(ref val1, ref val2);Di2015NewLineConsole.WriteLine(val1);Di2015NewLineConsole.WriteLine(val2);Di2015NewLine
380111Di2015UniqueSeparatorprivate void PrintAll<T>(IEnumerable<T> items)Di2015NewLine{Di2015NewLine    foreach(T item in items)Di2015NewLine        Console.WriteLine(item.ToString());Di2015NewLine}Di2015NewLine
380111Di2015UniqueSeparatorList<Person> people = new List<Person>();Di2015NewLine//add some people to the listDi2015NewLinePrintAll<Person>(people);Di2015NewLine
380120Di2015UniqueSeparator<asp:UpdatePanel runat="server" ID="UpdatePanel">Di2015NewLine<asp:GridView runat="server" ID="GridView">Di2015NewLine  <PagerTemplate>Di2015NewLine    <asp:LinkButton runat="server" Text="A" Command="A" />Di2015NewLine-Di2015NewLine    <asp:LinkButton runat="server" Text="B" Command="B" />Di2015NewLine-Di2015NewLine    <asp:LinkButton runat="server" Text="C" Command="C" />Di2015NewLine-Di2015NewLine    <asp:LinkButton runat="server" Text="D" Command="D" />Di2015NewLine-Di2015NewLine    <asp:LinkButton runat="server" Text="E" Command="E" />Di2015NewLine<%-- Continue at will... --%>Di2015NewLine  </PagerTemplate>Di2015NewLine</asp:GridView>Di2015NewLine</asp:UpdatePanel>Di2015NewLine
380209Di2015UniqueSeparatorbool containsParts(string1, string2)Di2015NewLine{Di2015NewLine    count1 = array of 26 0'sDi2015NewLine    count2 = array of 26 0'sDi2015NewLineDi2015NewLine    // Note: be sure to check for an ignore non-alphabetic characters,Di2015NewLine    // and do case conversion if you want to do it case-insensitivelyDi2015NewLine    for each character c in string1:Di2015NewLine        count1[c]++Di2015NewLine    for each character c in string2:Di2015NewLine        count2[c]++Di2015NewLineDi2015NewLine    for each character c in 'a'...'z':Di2015NewLine        if count1[c] < count2[c]:Di2015NewLine            return falseDi2015NewLineDi2015NewLine    return trueDi2015NewLine}Di2015NewLine
380238Di2015UniqueSeparatorstatic object InvokeMethod(Delegate method, params object[] args){Di2015NewLine    return method.DynamicInvoke(args);Di2015NewLine}Di2015NewLineDi2015NewLinestatic int Add(int a, int b){Di2015NewLine    return a + b;Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Test(){Di2015NewLine    Console.WriteLine(InvokeMethod(new Func<int, int, int>(Add), 5, 4));Di2015NewLine}Di2015NewLine
380249Di2015UniqueSeparatorfunction ResetDropDown(id) {Di2015NewLine    document.getElementById(id).selectedIndex = 0;Di2015NewLine}Di2015NewLinefunction ResetTextBox(id) {Di2015NewLine    document.getElementById(id).value = '';Di2015NewLine}Di2015NewLine<select id="MyDropDown" onchange="ResetTextBox('MyTextBox');">Di2015NewLine    <option value="0">0</option>Di2015NewLine    <option value="1">1</option>Di2015NewLine    <option value="2">2</option>Di2015NewLine</select>Di2015NewLine<input id="MyTextBox" type="text" onkeypress="ResetDropDown('MyDropDown');"/>Di2015NewLine
380282Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine   //do something that failsDi2015NewLine}Di2015NewLinecatch(Exception ex when ArgumentException, Di2015NewLine      ArgumentNullException, FormatException)Di2015NewLine{Di2015NewLine  //Only handle these three typesDi2015NewLine}Di2015NewLine
380282Di2015UniqueSeparator   tryDi2015NewLine   { Di2015NewLine      //something that failsDi2015NewLine   }Di2015NewLine   catch(ArgumentException)Di2015NewLine   { Di2015NewLine      //Log ErrorDi2015NewLineDi2015NewLine   }Di2015NewLine   catch(ArgumentNullException)Di2015NewLine   {Di2015NewLine     //Log ErrorDi2015NewLine   }Di2015NewLine
380282Di2015UniqueSeparatorif (foo is FooObject){}
380282Di2015UniqueSeparatorIf TypeOf foo is FooObject then
380328Di2015UniqueSeparatorpartial
380328Di2015UniqueSeparatorpartial
380409Di2015UniqueSeparatorShouldSerializeFoo()
380409Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Xml.Serialization;Di2015NewLine[Serializable]Di2015NewLinepublic class MyEntityDi2015NewLine{Di2015NewLine    public string Key { get; set; }Di2015NewLineDi2015NewLine    public string[] Items { get; set; }Di2015NewLineDi2015NewLine    [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]Di2015NewLine    public bool ShouldSerializeItems()Di2015NewLine    {Di2015NewLine        return Items != null && Items.Length > 0;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        MyEntity obj = new MyEntity { Key = "abc", Items = new string[0] };Di2015NewLine        XmlSerializer ser = new XmlSerializer(typeof(MyEntity));Di2015NewLine        ser.Serialize(Console.Out, obj);Di2015NewLine    }Di2015NewLine}Di2015NewLine
380409Di2015UniqueSeparatorShouldSerialize{name}
380409Di2015UniqueSeparator{name}Specified
380409Di2015UniqueSeparator[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]Di2015NewLine[XmlIgnore]Di2015NewLinepublic bool ItemsSpecifiedDi2015NewLine{Di2015NewLine    get { return Items != null && Items.Length > 0; }Di2015NewLine    set { } // could set the default array here if we wantDi2015NewLine}Di2015NewLine
380434Di2015UniqueSeparatorExpression
380434Di2015UniqueSeparatorExpression
380434Di2015UniqueSeparator    var x = Expression.Parameter(typeof(double), "x");Di2015NewLine    var y = Expression.Parameter(typeof(double), "y");Di2015NewLine    var body = Expression.Multiply(x, y);Di2015NewLine    var func = Expression.Lambda<Func<double, double,double>>(body, x, y).Compile();Di2015NewLineDi2015NewLine    double z = func(123.45, 678.90);Di2015NewLine
380434Di2015UniqueSeparatorstring
380434Di2015UniqueSeparatorExpression
380434Di2015UniqueSeparatorExpression
380495Di2015UniqueSeparatorTreeView
380495Di2015UniqueSeparatorTextBlock
380601Di2015UniqueSeparator//////////////////////////////////////////////////////////////////////Di2015NewLine// Algorithmia is (c) 2008 Solutions Design. All rights reserved.Di2015NewLine// http://www.sd.nlDi2015NewLine//////////////////////////////////////////////////////////////////////Di2015NewLine// COPYRIGHTS:Di2015NewLine// Copyright (c) 2008 Solutions Design. All rights reserved.Di2015NewLine// Di2015NewLine// The Algorithmia library sourcecode and its accompanying tools, tests and support codeDi2015NewLine// are released under the following license: (BSD2)Di2015NewLine// ----------------------------------------------------------------------Di2015NewLine// Redistribution and use in source and binary forms, with or without modification, Di2015NewLine// are permitted provided that the following conditions are met: Di2015NewLine//Di2015NewLine// 1) Redistributions of source code must retain the above copyright notice, this list of Di2015NewLine//    conditions and the following disclaimer. Di2015NewLine// 2) Redistributions in binary form must reproduce the above copyright notice, this list of Di2015NewLine//    conditions and the following disclaimer in the documentation and/or other materials Di2015NewLine//    provided with the distribution. Di2015NewLine// Di2015NewLine// THIS SOFTWARE IS PROVIDED BY SOLUTIONS DESIGN ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, Di2015NewLine// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A Di2015NewLine// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SOLUTIONS DESIGN OR CONTRIBUTORS BE LIABLE FOR Di2015NewLine// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT Di2015NewLine// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR Di2015NewLine// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, Di2015NewLine// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE Di2015NewLine// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Di2015NewLine//Di2015NewLine// The views and conclusions contained in the software and documentation are those of the authors Di2015NewLine// and should not be interpreted as representing official policies, either expressed or implied, Di2015NewLine// of Solutions Design. Di2015NewLine//Di2015NewLine//////////////////////////////////////////////////////////////////////Di2015NewLine// Contributers to the code:Di2015NewLine//  \- Frans  Bouma [FB]Di2015NewLine//////////////////////////////////////////////////////////////////////Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing SD.Tools.Algorithmia.UtilityClasses;Di2015NewLineDi2015NewLinenamespace SD.Tools.Algorithmia.GeneralDataStructuresDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Extension to the normal Dictionary. This class can store more than one value for every key. It keeps a HashSet for every Key value.Di2015NewLine    /// Calling Add with the same Key and multiple values will store each value under the same Key in the Dictionary. Obtaining the valuesDi2015NewLine    /// for a Key will return the HashSet with the Values of the Key. Di2015NewLine    /// </summary>Di2015NewLine    /// <typeparam name="TKey">The type of the key.</typeparam>Di2015NewLine    /// <typeparam name="TValue">The type of the value.</typeparam>Di2015NewLine    public class MultiValueDictionary<TKey, TValue> : Dictionary<TKey, HashSet<TValue>>Di2015NewLine    {Di2015NewLine    \/// <summary>Di2015NewLine    \/// Initializes a new instance of the <see cref="MultiValueDictionary<TKey, TValue>"/> class.Di2015NewLine    \/// </summary>Di2015NewLine    \public MultiValueDictionary()Di2015NewLine    \\: base()Di2015NewLine    \{Di2015NewLine    \}Di2015NewLineDi2015NewLineDi2015NewLine    \/// <summary>Di2015NewLine    \/// Adds the specified value under the specified keyDi2015NewLine    \/// </summary>Di2015NewLine    \/// <param name="key">The key.</param>Di2015NewLine    \/// <param name="value">The value.</param>Di2015NewLine    \public void Add(TKey key, TValue value)Di2015NewLine    \{Di2015NewLine    \\ArgumentVerifier.CantBeNull(key, "key");Di2015NewLineDi2015NewLine    \\HashSet<TValue> container = null;Di2015NewLine    \\if(!this.TryGetValue(key, out container))Di2015NewLine    \\{Di2015NewLine    \\\container = new HashSet<TValue>();Di2015NewLine    \\\base.Add(key, container);Di2015NewLine    \\}Di2015NewLine    \\container.Add(value);Di2015NewLine    \}Di2015NewLineDi2015NewLineDi2015NewLine    \/// <summary>Di2015NewLine    \/// Determines whether this dictionary contains the specified value for the specified key Di2015NewLine    \/// </summary>Di2015NewLine    \/// <param name="key">The key.</param>Di2015NewLine    \/// <param name="value">The value.</param>Di2015NewLine    \/// <returns>true if the value is stored for the specified key in this dictionary, false otherwise</returns>Di2015NewLine    \public bool ContainsValue(TKey key, TValue value)Di2015NewLine    \{Di2015NewLine    \\ArgumentVerifier.CantBeNull(key, "key");Di2015NewLine    \\bool toReturn = false;Di2015NewLine    \\HashSet<TValue> values = null;Di2015NewLine    \\if(this.TryGetValue(key, out values))Di2015NewLine    \\{Di2015NewLine    \\\toReturn = values.Contains(value);Di2015NewLine    \\}Di2015NewLine    \\return toReturn;Di2015NewLine    \}Di2015NewLineDi2015NewLineDi2015NewLine    \/// <summary>Di2015NewLine    \/// Removes the specified value for the specified key. It will leave the key in the dictionary.Di2015NewLine    \/// </summary>Di2015NewLine    \/// <param name="key">The key.</param>Di2015NewLine    \/// <param name="value">The value.</param>Di2015NewLine    \public void Remove(TKey key, TValue value)Di2015NewLine    \{Di2015NewLine    \\ArgumentVerifier.CantBeNull(key, "key");Di2015NewLineDi2015NewLine    \\HashSet<TValue> container = null;Di2015NewLine    \\if(this.TryGetValue(key, out container))Di2015NewLine    \\{Di2015NewLine    \\\container.Remove(value);Di2015NewLine    \\\if(container.Count <= 0)Di2015NewLine    \\\{Di2015NewLine    \\\\this.Remove(key);Di2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLineDi2015NewLineDi2015NewLine    \/// <summary>Di2015NewLine    \/// Merges the specified multivaluedictionary into this instance.Di2015NewLine    \/// </summary>Di2015NewLine    \/// <param name="toMergeWith">To merge with.</param>Di2015NewLine    \public void Merge(MultiValueDictionary<TKey, TValue> toMergeWith)Di2015NewLine    \{ Di2015NewLine    \\if(toMergeWith==null)Di2015NewLine    \\{Di2015NewLine    \\\return;Di2015NewLine    \\}Di2015NewLineDi2015NewLine    \\foreach(KeyValuePair<TKey, HashSet<TValue>> pair in toMergeWith)Di2015NewLine    \\{Di2015NewLine    \\\foreach(TValue value in pair.Value)Di2015NewLine    \\\{Di2015NewLine    \\\\this.Add(pair.Key, value);Di2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLineDi2015NewLineDi2015NewLine    \/// <summary>Di2015NewLine    \/// Gets the values for the key specified. This method is useful if you want to avoid an exception for key value retrieval and you can't use TryGetValueDi2015NewLine    \/// (e.g. in lambdas)Di2015NewLine    \/// </summary>Di2015NewLine    \/// <param name="key">The key.</param>Di2015NewLine    \/// <param name="returnEmptySet">if set to true and the key isn't found, an empty hashset is returned, otherwise, if the key isn't found, null is returned</param>Di2015NewLine    \/// <returns>Di2015NewLine    \/// This method will return null (or an empty set if returnEmptySet is true) if the key wasn't found, orDi2015NewLine    \/// the values if key was found.Di2015NewLine    \/// </returns>Di2015NewLine    \public HashSet<TValue> GetValues(TKey key, bool returnEmptySet)Di2015NewLine    \{Di2015NewLine    \\HashSet<TValue> toReturn = null;Di2015NewLine    \\if(!base.TryGetValue(key, out toReturn) && returnEmptySet)Di2015NewLine    \\{Di2015NewLine    \\\toReturn = new HashSet<TValue>();Di2015NewLine    \\}Di2015NewLine    \\return toReturn;Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
380609Di2015UniqueSeparator// blob is a byte[] retrieved from DBDi2015NewLineBitmap bmp = new Bitmap(new MemoryStream(blob));Di2015NewLine
380642Di2015UniqueSeparatorCONNECT_INTERACTIVE
380695Di2015UniqueSeparatortypedef struct MatrixDi2015NewLine{Di2015NewLine    int rowsCount;Di2015NewLine    int colsCount;Di2015NewLine    int* data;Di2015NewLine} TMatrix;Di2015NewLineDi2015NewLineextern "C" __declspec(dllexport) void InitializeMatrix(TMatrix** matrices, int count) Di2015NewLine{Di2015NewLine    srand(time(NULL));Di2015NewLine    printf("<unmanaged>\\n");Di2015NewLine    for(int i = 0; i < count; i++)Di2015NewLine    {Di2015NewLine        TMatrix* m = matrices[i];Di2015NewLine        printf("rows %d cols %d\\n", m->rowsCount, m->colsCount);Di2015NewLineDi2015NewLine        for(int j = 0; j < m->rowsCount; j++)Di2015NewLine        {Di2015NewLine            for(int k = 0; k < m->colsCount; k++)Di2015NewLine            {Di2015NewLine                printf("%d ", m->data[k * m->rowsCount + j]);Di2015NewLine                // modify the data - it should be available back in C#Di2015NewLine                m->data[k * m->rowsCount + j] = rand() % 10;Di2015NewLine            }Di2015NewLine            printf("\\n");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    printf("</unmanaged>\\n\\n");Di2015NewLine}Di2015NewLine
380695Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential)]Di2015NewLinestruct MatrixDi2015NewLine{Di2015NewLine    public int RowsCount;Di2015NewLine    public int ColsCount;Di2015NewLine    public IntPtr Data;Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    [DllImport("TestLib.dll")]Di2015NewLine    private static extern void InitializeMatrix(IntPtr ptr, int count);Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        const int count = 3;Di2015NewLineDi2015NewLine        // Allocate memoryDi2015NewLine        IntPtr ptr = Marshal.AllocHGlobal(count * Marshal.SizeOf(typeof(IntPtr)));Di2015NewLine        IntPtr[] matrices = new IntPtr[count];Di2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            Matrix matrix = new Matrix();Di2015NewLine            // Give some size to the matrixDi2015NewLine            matrix.RowsCount = 4;Di2015NewLine            matrix.ColsCount = 3;Di2015NewLine            int size = matrix.RowsCount * matrix.ColsCount;Di2015NewLine            int[] data = new int[size];Di2015NewLine            matrix.Data = Marshal.AllocHGlobal(size * Marshal.SizeOf(typeof(int)));Di2015NewLine            Marshal.Copy(data, 0, matrix.Data, size);Di2015NewLineDi2015NewLine            matrices[i] = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Matrix)));Di2015NewLine            Marshal.StructureToPtr(matrix, matrices[i], true);Di2015NewLine        }Di2015NewLine        Marshal.Copy(matrices, 0, ptr, count);Di2015NewLineDi2015NewLineDi2015NewLine        // Call unmanaged routineDi2015NewLine        InitializeMatrix(ptr, count);Di2015NewLineDi2015NewLine        Console.WriteLine("<managed>");Di2015NewLine        // Read data backDi2015NewLine        Marshal.Copy(ptr, matrices, 0, count);Di2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            Matrix m = (Matrix)Marshal.PtrToStructure(matrices[i], typeof(Matrix));Di2015NewLine            int size = m.RowsCount * m.ColsCount;Di2015NewLine            int[] data = new int[size];Di2015NewLine            Marshal.Copy(m.Data, data, 0, size);Di2015NewLineDi2015NewLine            // Pretty-print the matrixDi2015NewLine            Console.WriteLine("rows: {0} cols: {1}", m.RowsCount, m.ColsCount);Di2015NewLine            for (int j = 0; j < m.RowsCount; j++)Di2015NewLine            {Di2015NewLine                for (int k = 0; k < m.ColsCount; k++)Di2015NewLine                {Di2015NewLine                    Console.Write("{0} ", data[k * m.RowsCount + j]);Di2015NewLine                }Di2015NewLine                Console.WriteLine();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        Console.WriteLine("</managed>");Di2015NewLineDi2015NewLineDi2015NewLine        // Clean the whole mess (try...finally block omitted for clarity)Di2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            Matrix m = (Matrix)Marshal.PtrToStructure(matrices[i], typeof(Matrix));Di2015NewLine            Marshal.FreeHGlobal(m.Data);Di2015NewLine            Marshal.FreeHGlobal(matrices[i]);Di2015NewLine        }Di2015NewLine        Marshal.FreeHGlobal(ptr);Di2015NewLine    }Di2015NewLine}Di2015NewLine
380712Di2015UniqueSeparatorString.Join(",", arr.Select(p=>p.ToString()).ToArray())Di2015NewLine
380723Di2015UniqueSeparatorOfType<T>
380723Di2015UniqueSeparatorforeach(Foo foo in list.OfType<Foo>()) {Di2015NewLine  //Di2015NewLine}Di2015NewLineforeach(Bar bar in list.OfType<Bar>()) {Di2015NewLine  //Di2015NewLine}Di2015NewLine
380771Di2015UniqueSeparatorpublic class SingletonDi2015NewLine{Di2015NewLine    private Singleton() {}Di2015NewLine    static Singleton() {}Di2015NewLine    private static Singleton _instance = new Singleton();Di2015NewLine    public static Singleton Instance { get { return _instance; }}Di2015NewLine}Di2015NewLine
380771Di2015UniqueSeparatorprivate static Singleton _instance = new Singleton();Di2015NewLine
380955Di2015UniqueSeparatorstring xml = @"<xml>Di2015NewLine <a>Di2015NewLine  <x/>Di2015NewLine  <b>Di2015NewLine    <c/>Di2015NewLine    <z/>Di2015NewLine  </b>Di2015NewLine  <c/>Di2015NewLine</a>Di2015NewLine<c/>Di2015NewLine<d><e/></d></xml>";Di2015NewLine    XmlDocument doc = new XmlDocument();Di2015NewLine    doc.LoadXml(xml);Di2015NewLine    XmlDocument results = new XmlDocument();Di2015NewLine    XmlNode root = results.AppendChild(results.CreateElement("xml"));Di2015NewLine    foreach (XmlNode node in doc.SelectNodes("/*/*[descendant-or-self::c]"))Di2015NewLine    {Di2015NewLine        root.AppendChild(results.ImportNode(node, true));Di2015NewLine    }Di2015NewLine    results.Save("out.xml");Di2015NewLine
381411Di2015UniqueSeparator     DataView dvCities = dtCities.DefaultView; Di2015NewLine     dvCities.RowFilter = "State=" + lbStates.SelectedItem;Di2015NewLine     lbCities.DataSource = dvCities;Di2015NewLine
381411Di2015UniqueSeparator lbStates.SelectedIndexChanged += lbStates_SelectedIndexChanged;Di2015NewLine
381411Di2015UniqueSeparator  private void lbStates_SelectedIndexChanged(object sender, event e)Di2015NewLine  {Di2015NewLine     DataView dvCities = dtCities.DefaultView; Di2015NewLine     dvCities.RowFilter = "State=" + lbStates.SelectedItem;Di2015NewLine     lbCities.DataSource = dvCities;Di2015NewLine  }Di2015NewLine
381420Di2015UniqueSeparatorif((myDate - myOtherDate) > TimeSpan.FromSeconds(10))Di2015NewLine{Di2015NewLine   //Do something hereDi2015NewLine}Di2015NewLine
381476Di2015UniqueSeparator<webServices>Di2015NewLine    <soapExtensionTypes>Di2015NewLine    \<add type="DebugTools.SOAP.SOAPTrace.SoapTraceExtension, DebugTools.SOAP" Di2015NewLine               priority="0" group="High"/>Di2015NewLine    </soapExtensionTypes>Di2015NewLine</webServices>Di2015NewLine
381529Di2015UniqueSeparatorFile.WriteAllBytes(string path, byte[] bytes)Di2015NewLine
381529Di2015UniqueSeparatorSystem.IO.File.WriteAllBytes
382318Di2015UniqueSeparatorC:\\WINDOWS\\assembly\\GAC_32\\System.Data\\2.0.0.0__b77a5c561934e089\\System.Data.dllDi2015NewLine
382318Di2015UniqueSeparatorAssembly.GetExecutingAssembly()
382318Di2015UniqueSeparatorAssembly.GetEntryAssembly()
382393Di2015UniqueSeparatorSyncLock MyQueueDi2015NewLine  If MyQueue.Length = 0 ThenDi2015NewLine    PauseFlag.ResetDi2015NewLine  End IfDi2015NewLineEnd SyncLockDi2015NewLine
382398Di2015UniqueSeparatorPage.Master.FindControl('controlID')
382398Di2015UniqueSeparator<%@ MasterType VirtualPath="" TypeName=""%>
382398Di2015UniqueSeparatorVirtualPath
382398Di2015UniqueSeparatorTypeName
382476Di2015UniqueSeparator  SecurityIdentifier sid = new SecurityIdentifier(WellKnownSidType.WorldSid, null);Di2015NewLine  MutexAccessRule rule = new MutexAccessRule(sid, MutexRights.FullControl, AccessControlType.Allow);Di2015NewLine
382476Di2015UniqueSeparatorDim sid As System.Security.Principal.SecurityIdentifier = New System.Security.Principal.SecurityIdentifier(System.Security.Principal.WellKnownSidType.WorldSid, Nothing)Di2015NewLineDim rule As System.Security.AccessControl.MutexAccessRule = New System.Security.AccessControl.MutexAccessRule(sid, System.Security.AccessControl.MutexRights.FullControl, System.Security.AccessControl.AccessControlType.Allow)Di2015NewLine
382519Di2015UniqueSeparator    var query = from party in parties // the listDi2015NewLine                where party.RelationShips != null // overkill???Di2015NewLine                from related in party.RelationShipsDi2015NewLine                where related.RelatedPartyId == idDi2015NewLine                select related;Di2015NewLine
383794Di2015UniqueSeparatorDbProviderFactory factory = DbProviderFactories.GetFactory("System.Data.SqlClient");Di2015NewLineDi2015NewLineDataTable tables = null;Di2015NewLineDataSet database = new DataSet();Di2015NewLineDi2015NewLineusing (DbConnection connection = factory.CreateConnection())Di2015NewLine{Di2015NewLineDi2015NewLine    connection.ConnectionString = "Data Source=(local);Initial Catalog=Northwind;Integrated Security=True";Di2015NewLineDi2015NewLine    string[] restrictions = new string[4];Di2015NewLineDi2015NewLine    // CatalogDi2015NewLine    restrictions[0] = "Northwind";Di2015NewLineDi2015NewLine    // OwnerDi2015NewLine    restrictions[1] = "dbo";Di2015NewLineDi2015NewLine    // Table - We want all, so nullDi2015NewLine    restrictions[2] = null;Di2015NewLineDi2015NewLine    // Table Type - Only tables and not viewsDi2015NewLine    restrictions[3] = "BASE TABLE";Di2015NewLineDi2015NewLine    connection.Open();Di2015NewLineDi2015NewLine    // Here is my list of tablesDi2015NewLine    tables = connection.GetSchema("Tables", restrictions);Di2015NewLineDi2015NewLine    // fill the dataset with the table dataDi2015NewLine    foreach (DataRow table in tables.Rows)Di2015NewLine    {Di2015NewLineDi2015NewLine        string tableName = table["TABLE_NAME"].ToString();Di2015NewLineDi2015NewLine        DbDataAdapter adapter = factory.CreateDataAdapter();Di2015NewLine        DbCommand command = factory.CreateCommand();Di2015NewLine        command.Connection = connection;Di2015NewLine        command.CommandType = CommandType.Text;Di2015NewLine        command.CommandText = "select * from [" + tableName + "]";Di2015NewLine        adapter.SelectCommand = command;Di2015NewLine        adapter.Fill(database, tableName);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
383794Di2015UniqueSeparatorDbProviderFactory factory = DbProviderFactories.GetFactory("System.Data.OracleClient");Di2015NewLine
384307Di2015UniqueSeparatorDirectoryEntry localMachine = new DirectoryEntry("WinNT://" + Di2015NewLine    Environment.MachineName);Di2015NewLineDirectoryEntry newUser = localMachine.Children.Add("localuser", "user");Di2015NewLine
384307Di2015UniqueSeparatorpublic string CreateUserAccount(string ldapPath, string userName, Di2015NewLine    string userPassword)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        string oGUID = string.Empty;Di2015NewLine        string connectionPrefix = "LDAP://" + ldapPath;Di2015NewLine        DirectoryEntry dirEntry = new DirectoryEntry(connectionPrefix);Di2015NewLine        DirectoryEntry newUser = dirEntry.Children.AddDi2015NewLine            ("CN=" + userName, "user");Di2015NewLine        newUser.Properties["samAccountName"].Value = userName;Di2015NewLineDi2015NewLine        int val = (int)newUser.Properties["userAccountControl"].Value; Di2015NewLine        newUser.Properties["userAccountControl"].Value = val | 0x10000; Di2015NewLineDi2015NewLine        newUser.CommitChanges();Di2015NewLine        oGUID = newUser.Guid.ToString();Di2015NewLineDi2015NewLine        newUser.Invoke("SetPassword", new object[] { userPassword });Di2015NewLine        newUser.CommitChanges();Di2015NewLineDi2015NewLine        dirEntry.Close();Di2015NewLine        newUser.Close();Di2015NewLine    }Di2015NewLine    catch (System.DirectoryServices.DirectoryServicesCOMException E)Di2015NewLine    {Di2015NewLine        //DoSomethingwith --> E.Message.ToString();Di2015NewLineDi2015NewLine    }Di2015NewLine    return oGUID;Di2015NewLine}Di2015NewLine
384307Di2015UniqueSeparatorCONST                          HEXDi2015NewLine------------------------------------------Di2015NewLineSCRIPT                         0x0001Di2015NewLineACCOUNTDISABLE                 0x0002Di2015NewLineHOMEDIR_REQUIRED               0x0008Di2015NewLineLOCKOUT                        0x0010Di2015NewLinePASSWD_NOTREQD                 0x0020Di2015NewLinePASSWD_CANT_CHANGE             0x0040Di2015NewLineENCRYPTED_TEXT_PWD_ALLOWED     0x0080Di2015NewLineTEMP_DUPLICATE_ACCOUNT         0x0100Di2015NewLineNORMAL_ACCOUNT                 0x0200Di2015NewLineINTERDOMAIN_TRUST_ACCOUNT      0x0800Di2015NewLineWORKSTATION_TRUST_ACCOUNT      0x1000Di2015NewLineSERVER_TRUST_ACCOUNT           0x2000Di2015NewLineDONT_EXPIRE_PASSWORD           0x10000Di2015NewLineMNS_LOGON_ACCOUNT              0x20000Di2015NewLineSMARTCARD_REQUIRED             0x40000Di2015NewLineTRUSTED_FOR_DELEGATION         0x80000Di2015NewLineNOT_DELEGATED                  0x100000Di2015NewLineUSE_DES_KEY_ONLY               0x200000Di2015NewLineDONT_REQ_PREAUTH               0x400000Di2015NewLinePASSWORD_EXPIRED               0x800000Di2015NewLineTRUSTED_TO_AUTH_FOR_DELEGATION 0x1000000Di2015NewLine
384335Di2015UniqueSeparatorvar insInvoice = new NpgsqlCommand(sql)Di2015NewLine{Di2015NewLine    Parameters = Di2015NewLine    {Di2015NewLine        { "_invoice_id", NpgsqlDbType.Uuid, 0, "invoice_id" },Di2015NewLine        { "_invoice_detail_id", NpgsqlDbType.Uuid, 0, "invoice_detail_id" },Di2015NewLine        { "_qty", NpgsqlDbType.Integer, 0, "qty" },Di2015NewLine        { "_price", NpgsqlDbType.Numeric, 0, "price" }Di2015NewLine    }Di2015NewLine};Di2015NewLine
384404Di2015UniqueSeparatorforeach (int i in Integers())Di2015NewLine{Di2015NewLine   // do something with iDi2015NewLine}Di2015NewLine
384404Di2015UniqueSeparatoryield return
384464Di2015UniqueSeparatorpublic interface IFoo {}Di2015NewLineinternal class Foo : IFoo {}Di2015NewLinepublic class Bar {Di2015NewLine    protected void Test(IFoo foo) {}Di2015NewLine}Di2015NewLine
384464Di2015UniqueSeparatorprotected void Test<T>(T foo) where T : IFoo { }Di2015NewLine
384626Di2015UniqueSeparatorEquals()
384656Di2015UniqueSeparator    decimal de = d.Max(p => p.Name.Length);Di2015NewLine    Model a = d.First(p => p.Name.Length == de);Di2015NewLine
384695Di2015UniqueSeparator    public static long IntPower(int x, short power)Di2015NewLine    {Di2015NewLine        if (power == 0) return 1;Di2015NewLine        if (power == 1) return x;Di2015NewLine        // ----------------------Di2015NewLine        int n = 15;Di2015NewLine        while ((power <<= 1) >= 0) n--;Di2015NewLineDi2015NewLine        long tmp = x;Di2015NewLine        while (--n > 0)Di2015NewLine            tmp = tmp * tmp * Di2015NewLine                 (((power <<= 1) < 0)? x : 1);Di2015NewLine        return tmp;Di2015NewLine    }Di2015NewLine
384896Di2015UniqueSeparatornothingDi2015NewLine[label] [instruction] [comment]Di2015NewLine[label] [directive] [comment]Di2015NewLine
384906Di2015UniqueSeparatorFoo
384906Di2015UniqueSeparatorBinaryFormatter
384925Di2015UniqueSeparatorpublic bool TryGetValue(TKey key, out TValue value)Di2015NewLine{Di2015NewLine    bool got = false;            Di2015NewLine    TValue tmp = default(TValue); // for definite assignmentDi2015NewLine    WithReaderLock(delegateDi2015NewLine    {Di2015NewLine        got = dictionary.TryGetValue(key, out tmp);Di2015NewLine    });Di2015NewLine    value = tmp;Di2015NewLine    return got;Di2015NewLine}Di2015NewLine
384925Di2015UniqueSeparatorAction
384925Di2015UniqueSeparatorvoid Foo()
384925Di2015UniqueSeparatorThreadStart
384925Di2015UniqueSeparatorMethodInvoker
384925Di2015UniqueSeparatorAction
385383Di2015UniqueSeparatorSystem.Web.HttpContext.Current.Cache
385814Di2015UniqueSeparatorvar maxId = dc.Logs.Max(s => s.ID);Di2015NewLine
385972Di2015UniqueSeparatorlong a = 1024L * 1024 * 1024 * i;Di2015NewLine
386163Di2015UniqueSeparatorDi2015NewLinepublic enum MarriedDi2015NewLine{Di2015NewLine    YES,Di2015NewLine    NODi2015NewLine}Di2015NewLine
386217Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        using (WebClient client = new WebClient())Di2015NewLine        using (Stream stream = client.OpenRead("http://www.google.com"))Di2015NewLine        using (StreamReader reader = new StreamReader(stream))Di2015NewLine        {Di2015NewLine            Console.WriteLine(reader.ReadToEnd());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
386498Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        dataGridView1.Rows.Add("False", false);Di2015NewLine        dataGridView1.Rows.Add("True", true);Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView1_CellMouseUp(object sender, DataGridViewCellMouseEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.ColumnIndex == 1 && e.RowIndex >-1 && dataGridView1.Rows[e.RowIndex].Cells[1].IsInEditMode)Di2015NewLine        {Di2015NewLine            dataGridView1.EndEdit();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.RowIndex != -1)Di2015NewLine        {Di2015NewLine            dataGridView1.Rows[e.RowIndex].Cells[0].Value =Di2015NewLine               dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString(); Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
386511Di2015UniqueSeparatorpublic class SampleSyncAgent : Microsoft.Synchronization.SyncAgentDi2015NewLine {Di2015NewLineDi2015NewLine     public SampleSyncAgent()Di2015NewLine     {Di2015NewLineDi2015NewLine         SqlCeClientSyncProvider clientSyncProvider = new SqlCeClientSyncProvider(Properties.Settings.Default.ClientConnString, true);Di2015NewLine         this.LocalProvider = clientSyncProvider;Di2015NewLine              clientSyncProvider.ChangesApplied += new EventHandler<ChangesAppliedEventArgs>(clientSyncProvider_ChangesApplied);    Di2015NewLineDi2015NewLine         this.RemoteProvider = new SampleServerSyncProvider();    Di2015NewLineDi2015NewLine         SyncTable customerSyncTable = new SyncTable("Customer");Di2015NewLine         customerSyncTable.CreationOption = TableCreationOption.DropExistingOrCreateNewTable;Di2015NewLine         customerSyncTable.SyncDirection = SyncDirection.DownloadOnly;**Di2015NewLineDi2015NewLine         this.Configuration.SyncTables.Add(customerSyncTable);Di2015NewLine         this.Configuration.SyncParameters.Add(new SyncParameter("@CustomerName", "Sharp Bikes"));Di2015NewLine     }Di2015NewLineDi2015NewLine}Di2015NewLine
386514Di2015UniqueSeparatorpublic class Foo<T>Di2015NewLine{Di2015NewLine   private IList<T> wheres;Di2015NewLineDi2015NewLine   public Foo()Di2015NewLine   {Di2015NewLine       wheres = new List<T>();Di2015NewLine   }Di2015NewLine}Di2015NewLine
386514Di2015UniqueSeparatorList<object>
386772Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine{Di2015NewLine    Dispose(true);Di2015NewLine    GC.SuppressFinalize(this);Di2015NewLine}Di2015NewLineDi2015NewLineprotected virtual void Dispose(bool disposing)Di2015NewLine{Di2015NewLine    if (!disposed)Di2015NewLine    {Di2015NewLine        if (disposing)Di2015NewLine        {Di2015NewLine            // Dispose managed resources.Di2015NewLine        }Di2015NewLineDi2015NewLine        // There are no unmanaged resources to release, butDi2015NewLine        // if we add them, they need to be released here.Di2015NewLine    }Di2015NewLine    disposed = true;Di2015NewLineDi2015NewLine    // If it is available, make the call to theDi2015NewLine    // base class's Dispose(Boolean) methodDi2015NewLine    base.Dispose(disposing);Di2015NewLine}Di2015NewLine
386924Di2015UniqueSeparatorList<Adaptation> result =Di2015NewLine  dbContext.AdaptationDi2015NewLine  .Where(aun => aun.EventID = iep.EventID)Di2015NewLine  .ToList();Di2015NewLineDi2015NewLineresult.ForEach(aun =>Di2015NewLine  aun.Name = Regex.Replace(aun.Name,Di2015NewLine    @"ADAPT([0-9])$", @"ADAPT0$1")Di2015NewLine);Di2015NewLineresult = result.OrderBy(aun => aun.Name).ToList();Di2015NewLine
387052Di2015UniqueSeparatorctx.DataContext.InvoiceItems.Attach(data, true);Di2015NewLine
387429Di2015UniqueSeparator~0 = 0xFFFFFFFF = -1Di2015NewLine
387429Di2015UniqueSeparator~x == -x-1
387570Di2015UniqueSeparatorIEquatable
387570Di2015UniqueSeparatorDictionary
387570Di2015UniqueSeparatorIComparable
387570Di2015UniqueSeparatorComparer<T>.Default
387652Di2015UniqueSeparatornamespace OpenSourceProjectCodeName.MajorFunctionalAreaDi2015NewLine
387652Di2015UniqueSeparatornamespace VideoWizardMagicThing.AudioDi2015NewLinenamespace VideoWizardMagicThing.Audio.CodecsDi2015NewLinenamespace VideoWizardMagicThing.VideoDi2015NewLinenamespace VideoWizardMagicThing.Video.CodecsDi2015NewLine
387973Di2015UniqueSeparatorList<T>
387973Di2015UniqueSeparatorIList<T>
387973Di2015UniqueSeparatorList<T>
387973Di2015UniqueSeparatorAddRange()
387973Di2015UniqueSeparatorList<T>
387973Di2015UniqueSeparatorIList<T>
387973Di2015UniqueSeparatorIEnumerable<T>
388467Di2015UniqueSeparatorref
388467Di2015UniqueSeparatorout
388467Di2015UniqueSeparatorref
388467Di2015UniqueSeparatorout
388620Di2015UniqueSeparatorDataRelation
388626Di2015UniqueSeparatorpublic class xsltmanagerDi2015NewLine{Di2015NewLine    /* constructor (singleton) which defines a file watcher for *.xsl in the path of your choice */Di2015NewLineDi2015NewLine    //just a mutex for thread safetyDi2015NewLine    private object Mutex = new object();Di2015NewLineDi2015NewLine    //caching XslCompiledTransformsDi2015NewLine    private Dictionary<string, XslCompiledTransform> cTransforms = new Dictionary<string, XslCompiledTransform>();Di2015NewLineDi2015NewLine    public XslCompiledTransform fetch(string identifier)Di2015NewLine    {  \\Di2015NewLine    \if (!this.cTransforms.ContainsKey(identifier))Di2015NewLine    \{Di2015NewLine    \\lock (this.Mutex)Di2015NewLine    \\{Di2015NewLine    \\\if (!this.cTransforms.ContainsKey(identifier))Di2015NewLine    \\\{Di2015NewLine    \\\\XslCompiledTransform xslDoc = new XslCompiledTransform();Di2015NewLine    \\\\xslDoc.Load(/* file path based on identifier */);Di2015NewLineDi2015NewLine    \\\\this.cTransforms.Add(identifier, xslDoc);Di2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLine    \return this.cTransforms[identifier];Di2015NewLine    }Di2015NewLineDi2015NewLine    /* other util xslt methods - namespace wash, doc merge, whatever */Di2015NewLine}Di2015NewLineDi2015NewLinepublic class myPage : System.Web.UI.PageDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine    \//get source dataDi2015NewLine    \XPathDocument xPathDoc = myGetXMLMethod();Di2015NewLineDi2015NewLine    \//transform paramsDi2015NewLine    \XsltArgumentList oArgs = new XsltArgumentList();Di2015NewLineDi2015NewLine    \/* add params as required */Di2015NewLineDi2015NewLine    \//fetching and executing the transform directly to the Response hereDi2015NewLine    \xsltmanager.instance.get(@"foo\\bar\\baz").Transform(xPathDoc, oArgs, Response.OutputStream);Di2015NewLine    }Di2015NewLine}Di2015NewLine
388684Di2015UniqueSeparator<asp:ListView ID="parentList" runat="server">Di2015NewLine   <ItemTemplate>Di2015NewLine      <asp:Repeater ID="childData" runat="server" DataSource='<%# GetChildCategoryData(DataBinder.Eval(Container.DataItem, "parentcategoryID")) %>'>.. </asp:Repeater>Di2015NewLine   </ItemTemplate>Di2015NewLine</asp:ListView>Di2015NewLine
388730Di2015UniqueSeparatorT
388730Di2015UniqueSeparator : class
388730Di2015UniqueSeparator : struct
388730Di2015UniqueSeparatorMakeGenericMethod
388730Di2015UniqueSeparator    // slow; use with cautionDi2015NewLine    public static Result<T> Generic<T>(T arg) {Di2015NewLine        if (typeof(T).IsValueType)Di2015NewLine            return (Result<T>)typeof(Program).GetMethod("ImplVal")Di2015NewLine                .MakeGenericMethod(typeof(T))Di2015NewLine                .Invoke(null, new object[] {arg});Di2015NewLine        elseDi2015NewLine            return (Result<T>)typeof(Program).GetMethod("ImplRef")Di2015NewLine                .MakeGenericMethod(typeof(T))Di2015NewLine                .Invoke(null, new object[] { arg });Di2015NewLine    }Di2015NewLine
388730Di2015UniqueSeparatortypeof(Program)
388730Di2015UniqueSeparatorpublic static Result<T> Generic<T>(T arg) {Di2015NewLine    return Cache<T>.CachedDelegate(arg);Di2015NewLine}Di2015NewLineDi2015NewLineinternal static class Cache<T>Di2015NewLine{Di2015NewLine    public static readonly Func<T, Result<T>> CachedDelegate;Di2015NewLine    static Cache()Di2015NewLine    {Di2015NewLine        MethodInfo method;Di2015NewLine        if (typeof(T).IsValueType)Di2015NewLine            method = typeof(Program).GetMethod("ImplVal")Di2015NewLine                .MakeGenericMethod(typeof(T));Di2015NewLine        elseDi2015NewLine            method = typeof(Program).GetMethod("ImplRef")Di2015NewLine                .MakeGenericMethod(typeof(T));Di2015NewLine        CachedDelegate = (Func<T, Result<T>>)Delegate.CreateDelegate(Di2015NewLine            typeof(Func<T, Result<T>>), method);Di2015NewLine    }Di2015NewLine}Di2015NewLine
388742Di2015UniqueSeparatorpublic static IOrderedEnumerable<TSource> OrderByWithDirection<TSource,TKey>Di2015NewLine    (this IEnumerable<TSource> source,Di2015NewLine     Func<TSource, TKey> keySelector,Di2015NewLine     bool descending)Di2015NewLine{Di2015NewLine    return descending ? source.OrderByDescending(keySelector)Di2015NewLine                      : source.OrderBy(keySelector);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static IOrderedQueryable<TSource> OrderByWithDirection<TSource,TKey>Di2015NewLine    (this IQueryable<TSource> source,Di2015NewLine     Expression<Func<TSource, TKey>> keySelector,Di2015NewLine     bool descending)Di2015NewLine{Di2015NewLine    return descending ? source.OrderByDescending(keySelector)Di2015NewLine                      : source.OrderBy(keySelector);Di2015NewLine}Di2015NewLine
388742Di2015UniqueSeparatorvar query = dataList.OrderByWithDirection(x => x.Property, direction);Di2015NewLine
388793Di2015UniqueSeparatorwhotsit.TestProp
388793Di2015UniqueSeparator// I wish...Di2015NewLineMemberInfo member = infoof(whotsit.TestProp);Di2015NewLine
388793Di2015UniqueSeparatorExpression<Func<string>> = () => whotsit.TestProp;Di2015NewLine
388964Di2015UniqueSeparatorGraphics.MeasureString
388964Di2015UniqueSeparatorSizeF
388964Di2015UniqueSeparatorHeight
388964Di2015UniqueSeparator        using(Graphics g = CreateGraphics()) {Di2015NewLine            SizeF size = g.MeasureString(text, lbl.Font, 495);Di2015NewLine            lbl.Height = (int) Math.Ceiling(size.Height);Di2015NewLine            lbl.Text = text;Di2015NewLine        }Di2015NewLine
389078Di2015UniqueSeparator"csv"
389078Di2015UniqueSeparatorDefaultExt
389078Di2015UniqueSeparatorusing
389078Di2015UniqueSeparatorIDisposable
389078Di2015UniqueSeparator        using (SaveFileDialog sfd = new SaveFileDialog())Di2015NewLine        {Di2015NewLine            sfd.AddExtension = true;Di2015NewLine            sfd.DefaultExt = "csv";Di2015NewLine            sfd.Filter = "Comma Separated(*.csv)|*.*";Di2015NewLine            if (sfd.ShowDialog() == DialogResult.OK)Di2015NewLine            {Di2015NewLine                // Do my file savingDi2015NewLine            }Di2015NewLine        }Di2015NewLine
389344Di2015UniqueSeparator<form method="POST" action="page.aspx">Di2015NewLineDi2015NewLine<input id="customerName" name="customerName" type="Text" />Di2015NewLine<input id="customerPhone" name="customerPhone" type="Text" />Di2015NewLine<input value="Save" type="Submit" />Di2015NewLineDi2015NewLine</form>Di2015NewLine
389344Di2015UniqueSeparatorstring n = String.Format("{0}", Request.Form['customerName']);Di2015NewLine
389344Di2015UniqueSeparatormethod="GET"
389344Di2015UniqueSeparatorstring n = String.Format("{0}", Request.QueryString['customerName']);Di2015NewLine
389344Di2015UniqueSeparatorrunat="server"
389350Di2015UniqueSeparatorpublic void DeleteMyObject(int objectId)Di2015NewLine{Di2015NewLine    SqlConnection connectionOne = new SqlConnection("MyFirstDbConnection");Di2015NewLine    SqlConnection connedtionTwo = new SqlConnection("MySecondDbCOnnection");Di2015NewLine    SqlCommand myCommand = new SqlCommand(connectionOne);Di2015NewLine    myCommand.CommandText = "DELETE FROM myTable where myid = " + objectId.ToString();Di2015NewLine    connectionOne.Open();Di2015NewLine    myCommand.ExecuteNonQuery();Di2015NewLine    connectionOne.Close();Di2015NewLine    myCommand.Connection = connectionTwo;Di2015NewLine    connectionTwo.Open();Di2015NewLine    myCommand.ExecuteNonQuery();Di2015NewLine    connectionTwo.Close();Di2015NewLine}Di2015NewLine
389483Di2015UniqueSeparatorif (Object.ReferenceEquals(a,b))Di2015NewLine     return true;Di2015NewLine
389483Di2015UniqueSeparatora==a
389531Di2015UniqueSeparatorif ((temp.EntityState != System.Data.EntityState.Added) && Di2015NewLine    (!temp.Data1Reference.IsLoaded)) temp.Data1Reference.Load();Di2015NewLine
389561Di2015UniqueSeparatorApplication.Exit()
389561Di2015UniqueSeparatorApplication.Run(new MyForm());
389561Di2015UniqueSeparatorDispose()
389561Di2015UniqueSeparatorClose
389561Di2015UniqueSeparatorApplication.Exit()
389775Di2015UniqueSeparator{}
389775Di2015UniqueSeparatorconfiguration\\system.codedom\\compilers\\compiler @language="c#..."Di2015NewLine
389775Di2015UniqueSeparator<providerOption name="CompilerVersion" value="v3.5"/>Di2015NewLine
389780Di2015UniqueSeparatorIEnumerable<char> query2 = "Not what you might expect";Di2015NewLineChar t1 = 'a'; query2 = query2.Where(c => c != t1);Di2015NewLineChar t2 = 'e'; query2 = query2.Where(c => c != t2);Di2015NewLineChar t3 = 'i'; query2 = query2.Where(c => c != t3);Di2015NewLineChar t4 = 'o'; query2 = query2.Where(c => c != t4);Di2015NewLineChar t5 = 'u'; query2 = query2.Where(c => c != t5);Di2015NewLine
389780Di2015UniqueSeparatorIEnumerable<char> query2 = "Not what you might expect";Di2015NewLineChar vowel = 'a'; query2 = query2.Where(c => c != vowel);Di2015NewLinevowel = 'e'; query2 = query2.Where(c => c != vowel);Di2015NewLinevowel = 'i'; query2 = query2.Where(c => c != vowel);Di2015NewLinevowel = 'o'; query2 = query2.Where(c => c != vowel);Di2015NewLinevowel = 'u'; query2 = query2.Where(c => c != vowel);Di2015NewLine
389780Di2015UniqueSeparatorvowel
389782Di2015UniqueSeparatormyAdapter.SelectCommand = "Select a.column1, a.column2, b.username from tablea a inner join tableb b on b.userid = a.userId"Di2015NewLine
389782Di2015UniqueSeparatormyCommand.CommandType = Text;Di2015NewLinemyCommand.CommandText = ""Select a.column1, a.column2, b.username from tablea a inner join tableb b on b.userid = a.userId";Di2015NewLine
389870Di2015UniqueSeparatorvar d1 = DateTime.Today;Di2015NewLinevar d2 = d1.AddDays(1);Di2015NewLinevar deposit = (from tempDeposit in entities.DepositDi2015NewLine               where !tempDeposit.IsApprovedDi2015NewLine                     && tempDeposit.CreatedDate >= d1Di2015NewLine                     && tempDeposit.CreatedDate < d2Di2015NewLine               select tempDeposit).FirstOrDefault();Di2015NewLine
389999Di2015UniqueSeparatorclass Student {Di2015NewLine    String name;Di2015NewLine    String studentID;Di2015NewLine    Course crsList = List<Course>; // "list of courses."Di2015NewLine    Student(String name, String studentID ){Di2015NewLine        // Make a new student, the "constructor"Di2015NewLine        this.name = name;Di2015NewLine        this.studentID = studentID;Di2015NewLine    }Di2015NewLine    addCourse(Course c){Di2015NewLine        // Add a course to the student's listDi2015NewLine        this.crsList.append(c); // Adds c to end of crsListDi2015NewLine    }Di2015NewLine}Di2015NewLine
389999Di2015UniqueSeparatorclass Teacher {Di2015NewLine    String name;Di2015NewLine    Course crsList = List<Course>;Di2015NewLine    Teacher(String name){Di2015NewLine        this.name = name;Di2015NewLine    }Di2015NewLine    // ... more methods here.Di2015NewLine}Di2015NewLine
389999Di2015UniqueSeparatorclass Person {Di2015NewLine    String name;Di2015NewLine    Person(String name){Di2015NewLine        this.name = name;Di2015NewLine    }Di2015NewLine    // ... more methodsDi2015NewLine}Di2015NewLine
389999Di2015UniqueSeparatorclass Student : Person {Di2015NewLine    String studentID;Di2015NewLine    Student(String name, String studentID){Di2015NewLine        // Now we need to initialize the Person partDi2015NewLine        super(name);Di2015NewLine        // and the special Student partDi2015NewLine        this.studentID = studentID;Di2015NewLine    }Di2015NewLine}Di2015NewLine
390014Di2015UniqueSeparator<asp:XmlDataSource ID="oXmlDataSource" runat="server" />Di2015NewLine<asp:TreeView ID="TreeView1" runat="server" EnableViewState="false" DataSourceID="oXmlDataSource" OnPreRender="TreeView1_PreRender"></TreeView>Di2015NewLine
390014Di2015UniqueSeparatorprotected void TreeView1_PreRender(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    SelectCurrentPageTreeNode(TreeView1);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void SelectCurrentPageTreeNode(TreeView tvTreeView)Di2015NewLine{Di2015NewLine    tvTreeView.CollapseAll();Di2015NewLineDi2015NewLine    if (Request.Url.PathAndQuery != null)Di2015NewLine    {Di2015NewLine        ExpandTreeViewNodes(tvTreeView, Request.Url.PathAndQuery);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate TreeNode ExpandTreeViewNodes(TreeView tvTreeView, string sPathAndQuery)Di2015NewLine{Di2015NewLine    if (tvTreeView != null)Di2015NewLine    {Di2015NewLine        if (!string.IsNullOrEmpty(sPathAndQuery))Di2015NewLine        {Di2015NewLine            sPathAndQuery = sPathAndQuery.ToLower();Di2015NewLine            {Di2015NewLine                TreeNode tnWorkTreeNode = null;Di2015NewLineDi2015NewLine                for (int iLoop = 0; iLoop < tvTreeView.Nodes.Count; iLoop++)Di2015NewLine                {Di2015NewLine                    tvTreeView.Nodes[iLoop].Expand();Di2015NewLineDi2015NewLine                    tvTreeView.Nodes[iLoop].Selected = true;Di2015NewLine                    if (tvTreeView.Nodes[iLoop].NavigateUrl.ToLower() == sPathAndQuery)Di2015NewLine                    {Di2015NewLine                        return (tvTreeView.Nodes[iLoop]);Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        tnWorkTreeNode = ExpandTreeViewNodesR(tvTreeView.Nodes[iLoop], sPathAndQuery);Di2015NewLine                    }Di2015NewLineDi2015NewLine                    if (tnWorkTreeNode != null)Di2015NewLine                    {Di2015NewLine                        return (tnWorkTreeNode);Di2015NewLine                    }Di2015NewLineDi2015NewLine                    tvTreeView.Nodes[iLoop].Collapse();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return (null);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static TreeNode ExpandTreeViewNodesR(TreeNode tvTreeNode, string sPathAndQuery)Di2015NewLine{Di2015NewLine    TreeNode tnReturnTreeNode = null;Di2015NewLineDi2015NewLine    if (tvTreeNode != null)Di2015NewLine    {Di2015NewLine        tvTreeNode.Expand();Di2015NewLine        if (tvTreeNode.NavigateUrl.ToLower() == sPathAndQuery)Di2015NewLine        {Di2015NewLine            return (tvTreeNode);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            tnReturnTreeNode = null;Di2015NewLineDi2015NewLine            for (int iLoop = 0; iLoop < tvTreeNode.ChildNodes.Count; iLoop++)Di2015NewLine            {Di2015NewLine                tvTreeNode.ChildNodes[iLoop].Selected = true;Di2015NewLine                tnReturnTreeNode = ExpandTreeViewNodesR(tvTreeNode.ChildNodes[iLoop], sPathAndQuery);Di2015NewLineDi2015NewLine                if (tnReturnTreeNode != null)Di2015NewLine                {Di2015NewLine                    return (tnReturnTreeNode);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            tvTreeNode.Collapse();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return (null);Di2015NewLine}Di2015NewLine
390072Di2015UniqueSeparator    // Translate the double into sign, exponent and mantissa.Di2015NewLine    long bits = BitConverter.DoubleToInt64Bits(d);Di2015NewLine    // Note that the shift is sign-extended, hence the test against -1 not 1Di2015NewLine    bool negative = (bits < 0);Di2015NewLine    int exponent = (int) ((bits >> 52) & 0x7ffL);Di2015NewLine    long mantissa = bits & 0xfffffffffffffL;Di2015NewLineDi2015NewLine    // Subnormal numbers; exponent is effectively one higher,Di2015NewLine    // but there's no extra normalisation bit in the mantissaDi2015NewLine    if (exponent==0)Di2015NewLine    {Di2015NewLine        exponent++;Di2015NewLine    }Di2015NewLine    // Normal numbers; leave exponent as it is but add extraDi2015NewLine    // bit to the front of the mantissaDi2015NewLine    elseDi2015NewLine    {Di2015NewLine        mantissa = mantissa | (1L<<52);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Bias the exponent. It's actually biased by 1023, but we'reDi2015NewLine    // treating the mantissa as m.0 rather than 0.m, so we needDi2015NewLine    // to subtract another 52 from it.Di2015NewLine    exponent -= 1075;Di2015NewLineDi2015NewLine    if (mantissa == 0) Di2015NewLine    {Di2015NewLine        return "0";Di2015NewLine    }Di2015NewLineDi2015NewLine    /* Normalize */Di2015NewLine    while((mantissa & 1) == 0) Di2015NewLine    {    /*  i.e., Mantissa is even */Di2015NewLine        mantissa >>= 1;Di2015NewLine        exponent++;Di2015NewLine    }Di2015NewLine
390158Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        long firstLong = long.MaxValue - 2;Di2015NewLine        long secondLong = firstLong - 1;Di2015NewLineDi2015NewLine        double firstDouble = firstLong;Di2015NewLine        double secondDouble = secondLong;Di2015NewLineDi2015NewLine        // Prints False as expectedDi2015NewLine        Console.WriteLine(firstLong == secondLong);Di2015NewLineDi2015NewLine        // Prints True!Di2015NewLine        Console.WriteLine(firstDouble == secondDouble);        Di2015NewLine    }Di2015NewLine}Di2015NewLine
390342Di2015UniqueSeparatorRegex.Replace(str, @"\\G((?>[^<>]+|<[^>]*>)*)>", "$1>");Di2015NewLine
390349Di2015UniqueSeparatorclass Foo Di2015NewLine{Di2015NewLine    public virtual void virtualPrintMe()Di2015NewLine    {Di2015NewLine        nonVirtualPrintMe();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void nonVirtualPrintMe()Di2015NewLine    {Di2015NewLine        Console.Writeline("FOO");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Bar : Foo Di2015NewLine{Di2015NewLine    public override void virtualPrintMe()Di2015NewLine    {Di2015NewLine        Console.Writeline("BAR");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineList<Foo> list = new List<Foo>();Di2015NewLine// then populate this list with various 'Bar' and other overriden FoosDi2015NewLineDi2015NewLineforeach (Foo foo in list) Di2015NewLine{Di2015NewLine    foo.virtualPrintMe(); // prints BAR or FOODi2015NewLine    foo.nonVirtualPrintMe(); // always prints FOODi2015NewLine}Di2015NewLine
390503Di2015UniqueSeparatorti.Insert(0, initialItem);Di2015NewLine
390596Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Runtime.Serialization;Di2015NewLineDi2015NewLinenamespace NoConstructorThingyDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            MyClass myClass = (MyClass)FormatterServices.GetUninitializedObject(typeof(MyClass)); //does not call ctorDi2015NewLine            myClass.One = 1;Di2015NewLine            Console.WriteLine(myClass.One); //write "1"Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyClassDi2015NewLine    {Di2015NewLine        public MyClass()Di2015NewLine        {Di2015NewLine            Console.WriteLine("MyClass ctor called.");Di2015NewLine        }Di2015NewLineDi2015NewLine        public int OneDi2015NewLine        {Di2015NewLine            get;Di2015NewLine            set;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
390613Di2015UniqueSeparatortypeof(MyClass).GetCustomAttributes(bool)
390613Di2015UniqueSeparatorGetType().GetCustomAttributes(bool)
390613Di2015UniqueSeparatortypeof(MyClass).GetProperties()
390613Di2015UniqueSeparatorAttribute.GetCustomAttribute()
390613Di2015UniqueSeparatorMemberInfo.GetGustomAttributes()
390613Di2015UniqueSeparatorPropertyInfo[] properties = typeof(MyClass).GetProperties();Di2015NewLineforeach(PropertyInfo property in properties)Di2015NewLine{Di2015NewLine    StoredDataValueAttribute attribute =Di2015NewLine        Attribute.GetCustomAttribute(property, typeof(StoredDataValueAttribute)) as StoredDataValueAttribute;Di2015NewLineDi2015NewLine    if (attribute != null) // This property has a StoredDataValueAttributeDi2015NewLine    {Di2015NewLine         property.SetValue(instanceOfMyClass, attribute.DataValue, null); // null means no indexesDi2015NewLine    }Di2015NewLine}Di2015NewLine
390613Di2015UniqueSeparatorType.GetProperties()
390613Di2015UniqueSeparatorType.GetProperties(BindingFlags)
390898Di2015UniqueSeparator/// <summary>Di2015NewLine/// Class representing a unit of weight, including how toDi2015NewLine/// convert that unit to kg.Di2015NewLine/// </summary>Di2015NewLineclass WeightUnitDi2015NewLine{Di2015NewLine    private readonly float conv;Di2015NewLine    private readonly string name;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Creates a weight unitDi2015NewLine    /// </summary>Di2015NewLine    WeightUnit(float conv, string name)Di2015NewLine    {Di2015NewLine        this.conv = conv;Di2015NewLine        this.name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Returns the name of the unitDi2015NewLine    /// </summary>Di2015NewLine    public string Name { get { return name; } }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Returns the multiplier used to convert thisDi2015NewLine    /// unit into kgDi2015NewLine    /// </summary>Di2015NewLine    public float convToKg { get { return conv; } }Di2015NewLine};Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Class representing a weight, i.e., a number and a unit.Di2015NewLine/// </summary>Di2015NewLineclass WeightDi2015NewLine{Di2015NewLine    private readonly float value;Di2015NewLine    private readonly WeightUnit unit;Di2015NewLineDi2015NewLine    public Weight(float value, WeightUnit unit)Di2015NewLine    {Di2015NewLine        this.value = value;Di2015NewLine        this.unit = unit;Di2015NewLine    }Di2015NewLineDi2015NewLine    public float ToFloat()Di2015NewLine    {Di2015NewLine        return value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public WeightUnit UnitDi2015NewLine    {Di2015NewLine        get { return unit; }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Creates a Weight object that is the same valueDi2015NewLine    /// as this object, but in the given units.Di2015NewLine    /// </summary>Di2015NewLine    public Weight Convert(WeightUnit newUnit)Di2015NewLine    {Di2015NewLine        float newVal = value * unit.convToKg / newUnit.convToKg;Di2015NewLineDi2015NewLine        return new Weight(newVal, newUnit);Di2015NewLine    }Di2015NewLine};Di2015NewLine
390919Di2015UniqueSeparator    bool Compare<T>(T x, T y) where T : classDi2015NewLine    {Di2015NewLine        return x == y;Di2015NewLine    }Di2015NewLine
390919Di2015UniqueSeparatornamespace TestProjectDi2015NewLine{Di2015NewLine class ProgramDi2015NewLine {Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Test a = new Test();Di2015NewLine        Test b = new Test();Di2015NewLineDi2015NewLine        Console.WriteLine("Inline:");Di2015NewLine        bool x = a == b;Di2015NewLine        Console.WriteLine("Generic:");Di2015NewLine        Compare<Test>(a, b);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    static bool Compare<T>(T x, T y) where T : classDi2015NewLine    {Di2015NewLine        return x == y;Di2015NewLine    }Di2015NewLine }Di2015NewLineDi2015NewLine class TestDi2015NewLine {Di2015NewLine    public static bool operator ==(Test a, Test b)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Overloaded == called");Di2015NewLine        return a.Equals(b);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator !=(Test a, Test b)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Overloaded != called");Di2015NewLine        return a.Equals(b);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
390919Di2015UniqueSeparator    static bool Compare<T>(T x, T y) where T : TestDi2015NewLine    {Di2015NewLine        return x == y;Di2015NewLine    }Di2015NewLine
391174Di2015UniqueSeparatorSystem.Drawing.Graphic
391207Di2015UniqueSeparatorDataTable
391207Di2015UniqueSeparatorYield: 2000 (5000000)Di2015NewLineList: 2100 (5000000)Di2015NewLine
391207Di2015UniqueSeparatorstatic  void Main()Di2015NewLine{Di2015NewLine    GC.Collect(GC.MaxGeneration,GCCollectionMode.Forced);Di2015NewLine    int count1 = 0;Di2015NewLine    var watch1 = Stopwatch.StartNew();        Di2015NewLine    for(int i = 0 ; i < 5000 ; i++) {Di2015NewLine        foreach (var row in MyYieldCollection)Di2015NewLine        {Di2015NewLine            count1++;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    watch1.Stop();Di2015NewLineDi2015NewLine    GC.Collect(GC.MaxGeneration,GCCollectionMode.Forced);Di2015NewLine    int count2 = 0;Di2015NewLine    var watch2 = Stopwatch.StartNew();Di2015NewLine    for (int i = 0; i < 5000; i++)Di2015NewLine    {Di2015NewLine        foreach (var row in MyListCollection)Di2015NewLine        {Di2015NewLine            count2++;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    watch1.Stop();Di2015NewLineDi2015NewLine    Console.WriteLine("Yield: {0} ({1})", watch1.ElapsedMilliseconds, count1);Di2015NewLine    Console.WriteLine("List: {0} ({1})", watch2.ElapsedMilliseconds, count2);Di2015NewLine}Di2015NewLine
391207Di2015UniqueSeparatorGC.Collect
391207Di2015UniqueSeparatorfor
391207Di2015UniqueSeparator        int rows = tabinfo.Rows.Count;Di2015NewLine        for (int row = 0; row < rows; row++) {...}Di2015NewLine
391257Di2015UniqueSeparatorList<object>
391257Di2015UniqueSeparatorArrayList
391257Di2015UniqueSeparatorCast<object>()
391257Di2015UniqueSeparatorOfType<object>
391257Di2015UniqueSeparatorIEnumerable<object>
391257Di2015UniqueSeparatorIEnumerable
391257Di2015UniqueSeparatorArrayList
391510Di2015UniqueSeparatorprotected override CreateParams CreateParams {Di2015NewLine  get {Di2015NewLine    const int WS_EX_NOACTIVATE = 0x08000000;Di2015NewLine    CreateParams param = base.CreateParams;Di2015NewLine    param.ExStyle |= WS_EX_NOACTIVATE;Di2015NewLine    return param;Di2015NewLine  }Di2015NewLine}Di2015NewLine
391510Di2015UniqueSeparator  public partial class Form1 : Form {Di2015NewLine    public Form1() {Di2015NewLine      InitializeComponent();Di2015NewLine      Thread t = new Thread(SecondMonitor);Di2015NewLine      t.IsBackground = true;Di2015NewLine      t.SetApartmentState(ApartmentState.STA);Di2015NewLine      t.Start();Di2015NewLine    }Di2015NewLine    private void SecondMonitor() {Di2015NewLine      Form2 f2 = new Form2();Di2015NewLine      f2.StartPosition = FormStartPosition.Manual;Di2015NewLine      f2.Left = 800;   // Use Screen class here...Di2015NewLine      f2.ShowDialog();Di2015NewLine    }Di2015NewLine
391737Di2015UniqueSeparatorclass TimerStateDi2015NewLine{Di2015NewLine    public Timer Timer;Di2015NewLine}Di2015NewLine
391737Di2015UniqueSeparatorTimerState state = new TimerState();Di2015NewLineDi2015NewLinelock (state)Di2015NewLine{Di2015NewLine    state.Timer = new Timer((callbackState) => {Di2015NewLine        action();Di2015NewLine        lock (callbackState) { callbackState.Timer.Dispose(); }Di2015NewLine        }, state, millisecond, -1);Di2015NewLine}Di2015NewLine
391919Di2015UniqueSeparatorlock(object) {...}
391919Di2015UniqueSeparatorMonitor
391919Di2015UniqueSeparatorBar()
392346Di2015UniqueSeparatorINotifyPropertyChanged
392346Di2015UniqueSeparatorinterface MyInterface : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    string Text { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyViewModel : MyInterfaceDi2015NewLine{Di2015NewLine    private string text;Di2015NewLine    public string Text Di2015NewLine    {Di2015NewLine        get { return text; }Di2015NewLine        set Di2015NewLine        { Di2015NewLine            if (text != value)Di2015NewLine            {Di2015NewLine               text = value;Di2015NewLine               // TODO: Raise the NotifyPropertyChanged event hereDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
392346Di2015UniqueSeparatorText
392355Di2015UniqueSeparatorDim sc As New MSScriptControl.ScriptControl()Di2015NewLinesc.Language = "VBScript"Di2015NewLineDim expression As String = "1 + 2 * 7"Di2015NewLineDim result As Double = sc.Eval(expression)Di2015NewLine
392355Di2015UniqueSeparatorMSScriptControl.ScriptControl sc = new MSScriptControl.ScriptControl();Di2015NewLinesc.Language = "VBScript";Di2015NewLinestring expression = "1 + 2 * 7";Di2015NewLineobject result = sc.Eval(expression);            Di2015NewLineMessageBox.Show(result.ToString());Di2015NewLine
392546Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace ForumDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            // get your assemblies and types you can registerDi2015NewLine            Assembly a = Assembly.GetExecutingAssembly();Di2015NewLine            var types = a.GetTypes();            Di2015NewLine            var bindTo = from t in typesDi2015NewLine                         where t.IsAbstract || t.IsInterfaceDi2015NewLine                         select t;Di2015NewLineDi2015NewLine            // apply your conventions to filter our types to be registeredDi2015NewLine            var interfacePairs = from t in bindTo.Where(x => x.IsInterface)Di2015NewLine                                 let match = types.FirstOrDefault(x => x.Name ==     t.Name.Substring(1))Di2015NewLine                                 where match != nullDi2015NewLine                                 select new Pair { To = t, From = match };Di2015NewLine            var abstractPairs = new Pair[] {};Di2015NewLineDi2015NewLineDi2015NewLine            // setup the generic form of the method to register the typesDi2015NewLine            var thisType = typeof(Program);Di2015NewLine            var bindings = BindingFlags.Static | BindingFlags.Public;Di2015NewLine            MethodInfo genericMethod = thisType.GetMethod("RegisterType", bindings);            Di2015NewLineDi2015NewLine            // register all your types by executing the Di2015NewLine            // specialized generic form of the methodDi2015NewLine            foreach (var t in interfacePairs.Concat(abstractPairs))Di2015NewLine            {Di2015NewLine                Type[] genericArguments = new Type[] { t.To, t.From };Di2015NewLine                MethodInfo method = genericMethod.MakeGenericMethod(genericArguments);Di2015NewLine                method.Invoke(null, new object [] {});Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void RegisterType<To, From>()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Register { To: {0} From: {1} }", typeof(To), typeof(From));Di2015NewLine        }Di2015NewLineDi2015NewLine        // Test classes that should be picked upDi2015NewLine        interface ITest { }Di2015NewLine        class Test : ITest { }Di2015NewLineDi2015NewLine        class PairDi2015NewLine        {Di2015NewLine            public Type To { get; set; }Di2015NewLine            public Type From { get; set; }Di2015NewLine        }        Di2015NewLine    }Di2015NewLine}Di2015NewLine
392558Di2015UniqueSeparator  "                                  "\\r\\nDi2015NewLine
392558Di2015UniqueSeparatorusing (PoleDisplay p = new PoleDisplay())Di2015NewLine{Di2015NewLine     // Do Stuff with pDi2015NewLine}Di2015NewLine// When the focus has left the using block, Dispose() will be called on p.Di2015NewLine
392727Di2015UniqueSeparatorclass A {Di2015NewLine   public int Foo(){ return 5;}Di2015NewLine   public virtual int Bar(){return 5;}Di2015NewLine}Di2015NewLineclass B : A{Di2015NewLine   public new int Foo() { return 1;}     //shadowDi2015NewLine   public override int Bar() {return 1;} //overrideDi2015NewLine}Di2015NewLine
392727Di2015UniqueSeparatorA clA = new A();Di2015NewLineB clB = new B();Di2015NewLineDi2015NewLineConsole.WriteLine(clA.Foo()); // output 5Di2015NewLineConsole.WriteLine(clA.Bar()); // output 5Di2015NewLineConsole.WriteLine(clB.Foo()); // output 1Di2015NewLineConsole.WriteLine(clB.Bar()); // output 1Di2015NewLineDi2015NewLine//now let's cast B to an A classDi2015NewLineConsole.WriteLine(((A)clB).Foo()); // output 5 <<<--Di2015NewLineConsole.WriteLine(((A)clB).Bar()); // output 1Di2015NewLine
392800Di2015UniqueSeparatorApplication.Run(splash)
392854Di2015UniqueSeparatorpublic bool IsLoggedIn { get; private set;}Di2015NewLinepublic void LoginButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  IsLoggedIn = DoLogin();Di2015NewLine  if(IsLoggedIn)Di2015NewLine  {Di2015NewLine    this.Close()Di2015NewLine  }Di2015NewLine  elseDi2015NewLine  {Di2015NewLine    DoSomethingElse();Di2015NewLine  }Di2015NewLine}Di2015NewLine
392854Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine  Application.EnableVisualStyles();Di2015NewLine  Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine  LoginForm loginForm = new LoginForm();Di2015NewLine  Application.Run(loginForm);Di2015NewLine  if (loginForm.IsLoggedIn)Di2015NewLine  {Di2015NewLine    Application.Run(new OtherForm());Di2015NewLine  }Di2015NewLine}Di2015NewLine
392948Di2015UniqueSeparatorpublic static T FetchValue<T>(string key)Di2015NewLine{Di2015NewLine    string value;  Di2015NewLine    // logic to set value here  Di2015NewLine    // ...  Di2015NewLine    return (T)Convert.ChangeType(value, typeof(T), CultureInfo.InvariantCulture);  Di2015NewLine}Di2015NewLine
393179Di2015UniqueSeparatorIEnumerable<int>
393179Di2015UniqueSeparatorIEnumerable
393179Di2015UniqueSeparatorforeach
393179Di2015UniqueSeparatorforeach
393179Di2015UniqueSeparatorIEnumerable<T>
393333Di2015UniqueSeparatorA = .8-(Y/3)/10.0;Di2015NewLine
393333Di2015UniqueSeparatorint Holder = Y, A=.8;Di2015NewLinewhile (Holder > 0)Di2015NewLine{Di2015NewLine    A-= .1;Di2015NewLine    Holder-= 3;Di2015NewLine}Di2015NewLine
393333Di2015UniqueSeparator If Y<3 Di2015NewLine    A=.8Di2015NewLine Else if Y < 6 Di2015NewLine    A=.7Di2015NewLine Else if Y < 9 Di2015NewLine    A=.6Di2015NewLine
393377Di2015UniqueSeparatordef fib(n):Di2015NewLine    if n == 0: return 0Di2015NewLine    if n == 1: return 1Di2015NewLine    if n >  1: return fib(n-2) + fib(n-1)Di2015NewLine
393377Di2015UniqueSeparatorfib(2)
393377Di2015UniqueSeparator   return fib(2-2) + fib(2-1)Di2015NewLine
393377Di2015UniqueSeparator   return 0 + fib(2-1)Di2015NewLine
393377Di2015UniqueSeparator   return 0 + 1Di2015NewLine
393377Di2015UniqueSeparatorreturn fib(3-2)+fib(3-1)Di2015NewLine
393377Di2015UniqueSeparatorreturn 1 + fib(3-1)Di2015NewLine
393377Di2015UniqueSeparatorreturn 1 +Di2015NewLine    return fib(2-2) + fib(2-1)Di2015NewLine
393377Di2015UniqueSeparator    return 0 + 1Di2015NewLine
393377Di2015UniqueSeparatorreturn 1 + 1Di2015NewLine
393634Di2015UniqueSeparatorBindingNavigator
393634Di2015UniqueSeparatorIBindingList.AllowNew
393634Di2015UniqueSeparator.AllowRemove
393634Di2015UniqueSeparatorBindingList<T>
393634Di2015UniqueSeparatorAllowNew=false
393634Di2015UniqueSeparatorAllowRemove=false
393634Di2015UniqueSeparatorBindingNavigator
393634Di2015UniqueSeparatorBindingSource
393634Di2015UniqueSeparatorMoveFirst()
393667Di2015UniqueSeparatorAjax Controls
393667Di2015UniqueSeparatorChoose Items
393667Di2015UniqueSeparatorGeneral
393667Di2015UniqueSeparatorAjax Control Toolkit
393667Di2015UniqueSeparatorChoose Toolbox Items
393667Di2015UniqueSeparator.NET Framework Components
393667Di2015UniqueSeparatorBrowse...
393761Di2015UniqueSeparatorint RealFunction(int param1, const char * param2, char param 3);Di2015NewLineDi2015NewLineint MyFunction(int param1, int param2, int param3) { // argument types do not matter as long as they are not doubles or structuresDi2015NewLine   __asm {Di2015NewLine      mov eax, param1Di2015NewLine      mov ebx, param2Di2015NewLine      push param3Di2015NewLine      call RealFunctionDi2015NewLine      ; depending on calling convention, you might need to do add esp, 12 hereDi2015NewLine      ; if RealFunction does not return its result in eax, you will need to do mov eax, <wherever the return value is> hereDi2015NewLine   }Di2015NewLine}Di2015NewLine
393787Di2015UniqueSeparatorT t = (T)TypeDescriptor.GetConverter(typeof(T)).ConvertFromInvariantString(text);Di2015NewLine
393787Di2015UniqueSeparatorGuid
394016Di2015UniqueSeparatorMyOtherInstantiatedForm.CustomerID = CurrentCustomerID;
394563Di2015UniqueSeparatorDi2015NewLinefunction KeyPress() {Di2015NewLine  $("#test").load("TempJumpToAJAX.aspx", {searchText: $("#").val()});Di2015NewLine}Di2015NewLine
394597Di2015UniqueSeparator<person>Di2015NewLine  <name>Dave</dave>Di2015NewLine  <ssn>000-00-0000</ssn>Di2015NewLine  <email1>xxxxxx/email1>Di2015NewLine</person>Di2015NewLine...Di2015NewLine
394597Di2015UniqueSeparator<book name="bible">Di2015NewLine In the beginning God created the heavens and the earth. Di2015NewLine Now the earth was formless and empty ... Di2015NewLine And if any man shall take away from the words of the book of this prophecy, God shall take away his part out of the book of life, and out of the holy city, and from the things which are written in this book. He which testifieth these things saith, Surely I come quickly. Amen. Even so, come, Lord Jesus.Di2015NewLine</book>Di2015NewLine
394852Di2015UniqueSeparatorusing System.Diagnostics;Di2015NewLineDi2015NewLine// get call stackDi2015NewLineStackTrace stackTrace = new StackTrace();Di2015NewLineDi2015NewLine// get calling method nameDi2015NewLineConsole.WriteLine(stackTrace.GetFrame(1).GetMethod().Name);Di2015NewLine
394914Di2015UniqueSeparatorgroupsettingsform mydialog= new groupsettingsform(); //create dialog Di2015NewLinemydialog.Owner= this; //set owner MDI child form Di2015NewLinemydialog.ShowDialog(); // <== DO NOT PASS THE OWNERDi2015NewLine
394917Di2015UniqueSeparatorMethodCallExpression GetCallExpression<T>(Expression<Func<T>> e)Di2015NewLine{Di2015NewLine    return e.Body as MethodCallExpression;Di2015NewLine}Di2015NewLineDi2015NewLine/* ... */Di2015NewLinevar getRowValExpr = GetCallExpression(x => x.GetRowValue(0));Di2015NewLine
394948Di2015UniqueSeparatorMyNullable<Money>
394948Di2015UniqueSeparatorMyNullable<T>
394948Di2015UniqueSeparatorMyNullable<int> + MyNullable<int>
394948Di2015UniqueSeparatorint
394948Di2015UniqueSeparatorMyNullable<Money> + MyNullable<Money>
394948Di2015UniqueSeparatorMoney + Money
395110Di2015UniqueSeparatorXmlSerializer
395138Di2015UniqueSeparatorCustomTypeDescriptor
395138Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Windows.Forms;Di2015NewLine// example POCODi2015NewLineclass Foo {Di2015NewLine    static Foo()Di2015NewLine    {   // initializes the custom provider (the attribute-based approach doesn't allowDi2015NewLine        // access to the original provider)Di2015NewLine        TypeDescriptionProvider basic = TypeDescriptor.GetProvider(typeof(Foo));Di2015NewLine        FooTypeDescriptionProvider custom = new FooTypeDescriptionProvider(basic);Di2015NewLine        TypeDescriptor.AddProvider(custom, typeof(Foo));Di2015NewLine    }Di2015NewLine    public string Name { get; set; }Di2015NewLine    public DateTime DateOfBirth { get; set; }Di2015NewLine}Di2015NewLine// example formDi2015NewLinestatic class Program {Di2015NewLine    [STAThread]Di2015NewLine    static void Main() {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        Application.Run( new Form {Di2015NewLine                Controls = {Di2015NewLine                    new DataGridView {Di2015NewLine                        Dock = DockStyle.Fill,Di2015NewLine                        DataSource = new BindingList<Foo> {Di2015NewLine                            new Foo { Name = "Fred", DateOfBirth = DateTime.Today.AddYears(-20) }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            });Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass FooTypeDescriptionProvider : TypeDescriptionProviderDi2015NewLine{Di2015NewLine    ICustomTypeDescriptor descriptor;Di2015NewLine    public FooTypeDescriptionProvider(TypeDescriptionProvider parent) : base(parent) { }Di2015NewLine    public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance)Di2015NewLine    {   // swap regular descriptor for bespoke (Foo) descriptorDi2015NewLine        if (descriptor == null)Di2015NewLine        {Di2015NewLine            ICustomTypeDescriptor desc = base.GetTypeDescriptor(typeof(Foo), null);Di2015NewLine            descriptor = new FooTypeDescriptor(desc);Di2015NewLine        }Di2015NewLine        return descriptor;Di2015NewLine    }Di2015NewLine}Di2015NewLineclass FooTypeDescriptor : CustomTypeDescriptorDi2015NewLine{Di2015NewLine    internal FooTypeDescriptor(ICustomTypeDescriptor parent) : base(parent) { }Di2015NewLine    public override PropertyDescriptorCollection GetProperties()Di2015NewLine    {   // wrap the propertiesDi2015NewLine        return Wrap(base.GetProperties());Di2015NewLine    }Di2015NewLine    public override PropertyDescriptorCollection GetProperties(Attribute[] attributes)Di2015NewLine    {   // wrap the propertiesDi2015NewLine        return Wrap(base.GetProperties(attributes));Di2015NewLine    }Di2015NewLineDi2015NewLine    static PropertyDescriptorCollection Wrap(PropertyDescriptorCollection properties)Di2015NewLine    {Di2015NewLine        // here's where we have an opportunity to swap/add/remove propertiesDi2015NewLine        // at runtime; we'll swap them for pass-thru properties withDi2015NewLine        // edited atttibutesDi2015NewLine        List<PropertyDescriptor> list = new List<PropertyDescriptor>(properties.Count);Di2015NewLine        foreach (PropertyDescriptor prop in properties)Di2015NewLine        {Di2015NewLine            // add custom attributes here...Di2015NewLine            string displayName = prop.DisplayName;Di2015NewLine            if (string.IsNullOrEmpty(displayName)) displayName = prop.Name;Di2015NewLineDi2015NewLine            list.Add(new ChainedPropertyDescriptor(prop, new DisplayNameAttribute("Foo:" + displayName)));Di2015NewLine        }Di2015NewLine        return new PropertyDescriptorCollection(list.ToArray(), true);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineclass ChainedPropertyDescriptor : PropertyDescriptorDi2015NewLine{Di2015NewLine    // this passes all requests through to the underlying (parent)Di2015NewLine    // descriptor, but has custom attributes etc;Di2015NewLine    // we could also override properties here...Di2015NewLine    private readonly PropertyDescriptor parent;Di2015NewLine    public ChainedPropertyDescriptor(PropertyDescriptor parent, params Attribute[] attributes)Di2015NewLine        : base(parent, attributes)Di2015NewLine    {Di2015NewLine        this.parent = parent;Di2015NewLine    }Di2015NewLine    public override bool ShouldSerializeValue(object component) { return parent.ShouldSerializeValue(component); }Di2015NewLine    public override void SetValue(object component, object value) { parent.SetValue(component, value); }Di2015NewLine    public override object GetValue(object component) { return parent.GetValue(component); }Di2015NewLine    public override void ResetValue(object component) { parent.ResetValue(component); }Di2015NewLine    public override Type PropertyType {get { return parent.PropertyType; } }Di2015NewLine    public override bool IsReadOnly { get { return parent.IsReadOnly; } }Di2015NewLine    public override bool CanResetValue(object component) {return parent.CanResetValue(component);}Di2015NewLine    public override Type ComponentType { get { return parent.ComponentType; } }Di2015NewLine    public override void AddValueChanged(object component, EventHandler handler) {parent.AddValueChanged(component, handler);  }Di2015NewLine    public override void RemoveValueChanged(object component, EventHandler handler) { parent.RemoveValueChanged(component, handler); }Di2015NewLine    public override bool SupportsChangeEvents { get { return parent.SupportsChangeEvents; } }Di2015NewLine}Di2015NewLine
395302Di2015UniqueSeparatorinterface IPet { }Di2015NewLineDi2015NewLineclass Cat : IPetDi2015NewLine{Di2015NewLine    public void eat(CommonFood food) { }Di2015NewLine    public void eat(CatFood food) { }Di2015NewLine}Di2015NewLineDi2015NewLineclass Dog : IPetDi2015NewLine{Di2015NewLine    public void eat(CommonFood food) { }Di2015NewLine    public void eat(DogFood food) { }Di2015NewLine}Di2015NewLineDi2015NewLineinterface IFood { }Di2015NewLineDi2015NewLineabstract class CommonFood : IFood { }Di2015NewLineDi2015NewLineabstract class CatFood : IFood { }Di2015NewLineDi2015NewLineabstract class DogFood : IFood { }Di2015NewLineDi2015NewLineclass Milk : CommonFood { }Di2015NewLineDi2015NewLineclass Fish : CatFood { }Di2015NewLineDi2015NewLineclass Meat : DogFood { }Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine    \Dog myDog = new Dog();Di2015NewLine    \myDog.eat(new Milk()); // ok, milk is commonDi2015NewLine    \myDog.eat(new Fish()); // errorDi2015NewLine    }Di2015NewLine}Di2015NewLine
395306Di2015UniqueSeparatorAdd
395306Di2015UniqueSeparatorRead
395306Di2015UniqueSeparatorAdd
395306Di2015UniqueSeparatorRead
395306Di2015UniqueSeparatorAdd
395352Di2015UniqueSeparatorFunc<...>
395352Di2015UniqueSeparatorAction<...>
395352Di2015UniqueSeparatorWaitCallback
395352Di2015UniqueSeparatorAction<object>
395352Di2015UniqueSeparator        Action<object> func = // TODODi2015NewLine        ThreadPool.QueueUserWorkItem(state=>func(state));Di2015NewLine
395352Di2015UniqueSeparator        Func<int, int> func = x => x * 5;Di2015NewLine        int query = 4, result = 0;Di2015NewLine        ThreadPool.QueueUserWorkItem(state=> {Di2015NewLine            result = func(query);Di2015NewLine        });Di2015NewLine
395352Di2015UniqueSeparatorresult
395352Di2015UniqueSeparator        Func<int, int> func = x => x * 5;Di2015NewLine        int query = 4;Di2015NewLine        Action<int> callback = x =>Di2015NewLine        {Di2015NewLine            Console.WriteLine(x);Di2015NewLine        };Di2015NewLine        ThreadPool.QueueUserWorkItem(state=> {Di2015NewLine            int result = func(query);Di2015NewLine            callback(result);Di2015NewLine        });Di2015NewLine
395352Di2015UniqueSeparatorThreadPool.QueueUserWorkItem(state => {Di2015NewLine    // now on worker threadDi2015NewLine    int result = ... // TODODi2015NewLineDi2015NewLine    this.Invoke((Action)delegate {Di2015NewLine       // now on UI threadDi2015NewLine       this.Text = result.ToString();Di2015NewLine    });Di2015NewLineDi2015NewLine});Di2015NewLine
395446Di2015UniqueSeparatorpublic partial class MessageControl : MessageControlBaseDi2015NewLine{    Di2015NewLine    public MessageControl()    Di2015NewLine    {Di2015NewLine        InitializeComponent();    Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MessageControlBase : MessageBase<Post>Di2015NewLine{}Di2015NewLine
395516Di2015UniqueSeparator  program startDi2015NewLine  try to acquire mutex (or semaphore)Di2015NewLine  if failedDi2015NewLine     send message via message queue to running programDi2015NewLine     exitDi2015NewLine  elseDi2015NewLineDi2015NewLine  set up listener for message queueDi2015NewLineDi2015NewLine  run rest of programDi2015NewLine
395545Di2015UniqueSeparatorPage
395545Di2015UniqueSeparatorPage
395545Di2015UniqueSeparatorApplicationName + "Page"Di2015NewLine
395545Di2015UniqueSeparatorMVCMS
395545Di2015UniqueSeparatorMvcmsPage
395545Di2015UniqueSeparatorMVCmsPage
395545Di2015UniqueSeparatorMvCmsPageDi2015NewLine
395545Di2015UniqueSeparatorPage
395564Di2015UniqueSeparatorforeach (Type iface in b.GetType().GetInterfaces())Di2015NewLine    Console.WriteLine(iface.Name);Di2015NewLine
395615Di2015UniqueSeparatorfor (int i = 0; i < clbIncludes.Items.Count; i++)Di2015NewLine  if (clbIncludes.GetItemChecked(i))Di2015NewLine    // Do selected stuffDi2015NewLine  elseDi2015NewLine    // Do unselected stuffDi2015NewLine
395615Di2015UniqueSeparatorif (clbIncludes.GetItemChecked(i))Di2015NewLine
395615Di2015UniqueSeparatorif (clbIncludes.GetItemCheckState(i) == CheckState.Checked)Di2015NewLine
395855Di2015UniqueSeparatorWindowState
395855Di2015UniqueSeparatorSystem.Windows.Forms.FormWindowState
395855Di2015UniqueSeparatorToString()
395994Di2015UniqueSeparator(\\b\\w+\\b)
395994Di2015UniqueSeparator(\\w+)
395994Di2015UniqueSeparator\\((\\w+)\\)
396144Di2015UniqueSeparator<appSettings>Di2015NewLine    <add key="ConnString" value="my conn string" />Di2015NewLine    <add key="MaxUsers" value="50" />Di2015NewLine</appSettings>Di2015NewLine
396144Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<configuration>Di2015NewLine    <appSettings file="ExternalWeb.config">Di2015NewLine        <add key="MyKey" value="MyValue" />Di2015NewLine    </appSettings>Di2015NewLine</configuration>Di2015NewLine
396152Di2015UniqueSeparatorConditionalAttribute
396152Di2015UniqueSeparatorEnsures.That.IsPositive(ExpensiveCalculation(result));Di2015NewLine
396152Di2015UniqueSeparatorEnsures.WhileDebugging.That. IsPositive(() => ExpensiveCalculation(result));Di2015NewLine
396186Di2015UniqueSeparatorPrinterSettings
396186Di2015UniqueSeparatorPrintDocument
396243Di2015UniqueSeparatorforms.Width = Application1.Properties.Settings.Default.Width;Di2015NewLine
396243Di2015UniqueSeparatorApplication1.Properties.Settings.Default.Width = forms.Width;Di2015NewLineApplication1.Properties.Settings.Default.Save();Di2015NewLine
396290Di2015UniqueSeparatorthis.numericUpDown1.Value + this.numericUpDown2.Value
396290Di2015UniqueSeparatorMessageBox.Show()
396290Di2015UniqueSeparator.ToString()
396290Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        MessageBox.Show((this.numericUpDown1.Value + this.numericUpDown2.Value).ToString());Di2015NewLine    }Di2015NewLine
396290Di2015UniqueSeparatorString.Format()
396290Di2015UniqueSeparatorToString()
396290Di2015UniqueSeparatorString.Format()
396366Di2015UniqueSeparator<?xml version="1.0"?>Di2015NewLine<!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN"Di2015NewLine   "http://www.wapforum.org/DTD/wml_1.1.xml">Di2015NewLineDi2015NewLine<wml>Di2015NewLine   <card id="card1" title="Stackoverflow">Di2015NewLine      <do type="accept" label="Menu">Di2015NewLine         <go href="#card2"/>Di2015NewLine      </do>Di2015NewLine      <p>Di2015NewLine         <select name="name"> Di2015NewLine            <option value="Questions">Questions</option>Di2015NewLine            <option value="MyAccount">My account</option>Di2015NewLine            <option value="FAQ">FAQ</option>Di2015NewLine         </select>Di2015NewLine      </p>Di2015NewLine   </card>Di2015NewLine   <card id="card2" title="Menu">Di2015NewLine      <p>Di2015NewLine           You selected: $(name)Di2015NewLine      </p>Di2015NewLine   </card>Di2015NewLine</wml>Di2015NewLine
396400Di2015UniqueSeparatorprivate static Regex _whitelist = new Regex(@"Di2015NewLine    ^&\\#60;(&\\#47;)? (a|b(lockquote)?|code|em|h(1|2|3)|i|li|ol|p(re)?|s(ub|up|trong|trike)?|ul)&\\#62;$Di2015NewLine    |^&\\#60;(b|h)r\\s?(&\\#47;)?&\\#62;$Di2015NewLine    |^&\\#60;a(?!&\\#62;).+?&\\#62;$Di2015NewLine    |^&\\#60;img(?!&\\#62;).+?(&\\#47;)?&\\#62;$",Di2015NewLineDi2015NewLine    RegexOptions.Singleline |Di2015NewLine    RegexOptions.IgnorePatternWhitespace |Di2015NewLine    RegexOptions.ExplicitCapture Di2015NewLine    RegexOptions.CompiledDi2015NewLine );Di2015NewLine
396413Di2015UniqueSeparatorreadonly
396413Di2015UniqueSeparatorvolatile
396413Di2015UniqueSeparatorreadonly
396413Di2015UniqueSeparatorvolatile
396629Di2015UniqueSeparatorIEnumerable<X>
396629Di2015UniqueSeparatorX
396629Di2015UniqueSeparatorT
396629Di2015UniqueSeparatorreturn one.Concat(two)Di2015NewLine          .Concat(three)Di2015NewLine          .OrderByDescending(x => x.GetTime())Di2015NewLine          .ToList();Di2015NewLine
396715Di2015UniqueSeparatorTypeDescriptor
397427Di2015UniqueSeparatorDictionary<,>
397427Di2015UniqueSeparatorSortedList<,>
397427Di2015UniqueSeparatorIComparer<T>
397427Di2015UniqueSeparatorIEqualityComparer<T>
397427Di2015UniqueSeparatorIEqualityComparer<T>
397427Di2015UniqueSeparatorGetHashCode()
397427Di2015UniqueSeparatorEquals()
397427Di2015UniqueSeparatorPredicate<T>
397427Di2015UniqueSeparatorFunc<T,T,bool>
397427Di2015UniqueSeparator[Equality]Comparer<T>.Default
397462Di2015UniqueSeparator<MyClass><![CDATA[Hello, world!]]></MyClass>Di2015NewLine
397462Di2015UniqueSeparator<MyClass>Hello, world!</MyClass>Di2015NewLine
397462Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    string _data;Di2015NewLineDi2015NewLine    [XmlText]Di2015NewLine    public string DataDi2015NewLine    {Di2015NewLine        get { return _data; }Di2015NewLine        set { _data = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
397773Di2015UniqueSeparator[STAThread]Di2015NewLinestatic void Main() {Di2015NewLine  Application.EnableVisualStyles();Di2015NewLine  Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine  if (DialogResult.OK == new LangForm().ShowDialog()) {Di2015NewLine    Application.Run(new Form1());Di2015NewLine  }Di2015NewLine}Di2015NewLine
397773Di2015UniqueSeparatorthis.DialogResult = DialogResult.OK;Di2015NewLine
397776Di2015UniqueSeparatorDictionary<string,SomeType>
397776Di2015UniqueSeparatorKeyNotFoundException
397776Di2015UniqueSeparatorSomeType value;Di2015NewLineif(dict.TryGetValue(key, out value)) {Di2015NewLine   // key existed; value is setDi2015NewLine} else {Di2015NewLine   // key not found; value is default(SomeType)Di2015NewLine}Di2015NewLine
397812Di2015UniqueSeparator    private Image CaptureScreen()Di2015NewLine    {Di2015NewLine        Rectangle screenSize = Screen.PrimaryScreen.Bounds;Di2015NewLine        Bitmap target = new Bitmap(screenSize.Width,screenSize.Height);Di2015NewLine        using(Graphics g = Graphics.FromImage(target))Di2015NewLine        {Di2015NewLine            g.CopyFromScreen(0,0,0,0,new Size(screenSize.Width,screenSize.Height));Di2015NewLine        }Di2015NewLine        return target;Di2015NewLine    }Di2015NewLine
397857Di2015UniqueSeparatortabControl1.SelectedTab = logTab;Di2015NewLine
397986Di2015UniqueSeparatornumbers[1] += 2;Di2015NewLine
398113Di2015UniqueSeparatoraspx:Di2015NewLine    <asp:ListBox runat="server" ID="lb1" OnSelectedIndexChanged="OnLB1Change" AutoPostBack="true" >Di2015NewLine        <asp:ListItem Text="A" Value="A"></asp:ListItem>Di2015NewLine        <asp:ListItem Text="B" Value="B"></asp:ListItem>Di2015NewLine    </asp:ListBox>Di2015NewLine
398113Di2015UniqueSeparator   protected void OnLB1Change(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        int val = ((ListBox)sender).SelectedIndex;Di2015NewLineDi2015NewLine        switch (val)Di2015NewLine        {Di2015NewLine            case 0:Di2015NewLine                //set up LB2 for values ADi2015NewLine            break;Di2015NewLine            case 1:Di2015NewLine               //set up LB2 for values BDi2015NewLine            break;Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
398155Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        short left = short.MaxValue;Di2015NewLine        short right = 1;Di2015NewLine        var a = Expression.Constant(left);Di2015NewLine        var b = Expression.Constant(right);Di2015NewLine        var sum = Expression.Add(a, b);Di2015NewLine        var convert = Expression.ConvertChecked(sum, typeof(short));Di2015NewLine        var convertLambda = Expression.Lambda<Func<short>>(convert);Di2015NewLine        var convertFunc = convertLambda.Compile();Di2015NewLine        Console.WriteLine("Conversion: {0}", convertFunc());Di2015NewLine        var sumLambda = Expression.Lambda<Func<short>>(sum);Di2015NewLine        var sumFunc = sumLambda.Compile();Di2015NewLine        Console.WriteLine("Sum: {0}", sumFunc());Di2015NewLine    }Di2015NewLine}Di2015NewLine
398155Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        short left = short.MaxValue;Di2015NewLine        short right = 1;Di2015NewLine        var a = Expression.Constant((int) left);Di2015NewLine        var b = Expression.Constant((int) right);Di2015NewLine        var sum = Expression.Add(a, b);Di2015NewLine        var convert = Expression.ConvertChecked(sum, typeof(short));Di2015NewLine        var convertLambda = Expression.Lambda<Func<short>>(convert);Di2015NewLine        var convertFunc = convertLambda.Compile();Di2015NewLine        Console.WriteLine("Conversion: {0}", convertFunc());Di2015NewLine        var sumLambda = Expression.Lambda<Func<int>>(sum);Di2015NewLine        var sumFunc = sumLambda.Compile();Di2015NewLine        Console.WriteLine("Sum: {0}", sumFunc());Di2015NewLine    }Di2015NewLine}Di2015NewLine
398155Di2015UniqueSeparatorAddChecked
398358Di2015UniqueSeparator<asp:ButtonField  ButtonType="Button" CommandName="Edit" Text="Edit" Di2015NewLine         Visible="True" CommandArgument='<%# Container.DataItemIndex %>' />Di2015NewLine
398510Di2015UniqueSeparator  Create Procedure MyProcDi2015NewLine  @Name varchar(20),Di2015NewLine  @DOB DateTime,Di2015NewLine  @EmployeeId Integer Output = NullDi2015NewLine  AsDi2015NewLine  Set NoCount OnDi2015NewLineDi2015NewLine     If @EmployeeId Is Null Di2015NewLine       BeginDi2015NewLine          Insert Employees(Name, DateofBirth)Di2015NewLine          Values (@Name, @DOB)Di2015NewLine          Set @EmployeeId = Scope_Identity()Di2015NewLine       EndDi2015NewLine     Else If Exists(Select * From EmployeesDi2015NewLine                    Where EmployeeId =@EmployeeId)Di2015NewLine       BeginDi2015NewLine           Update Employees SetDi2015NewLine              Name = Isnull(@Name, Name),Di2015NewLine              DateOfBirth = IsNull(@DOB, DateOfBirth)Di2015NewLine           Where EmployeeId = @EmployeeIdDi2015NewLine       EndDi2015NewLine     ElseDi2015NewLine        Raiserror('EmployeeId %d is missing or has been deleted.',Di2015NewLine                   16, 1, @EmployeeId)Di2015NewLineDi2015NewLine     Return 0Di2015NewLine
398512Di2015UniqueSeparatornumberOfTokens
398512Di2015UniqueSeparatorpath
398512Di2015UniqueSeparatorencoding
398512Di2015UniqueSeparatortokenSeparator
398512Di2015UniqueSeparatorstring
398512Di2015UniqueSeparatorIEnumerable<string>
398512Di2015UniqueSeparatorpublic static string ReadEndTokens(string path, Int64 numberOfTokens, Encoding encoding, string tokenSeparator) {Di2015NewLineDi2015NewLine    int sizeOfChar = encoding.GetByteCount("\\n");Di2015NewLine    byte[] buffer = encoding.GetBytes(tokenSeparator);Di2015NewLineDi2015NewLineDi2015NewLine    using (FileStream fs = new FileStream(path, FileMode.Open)) {Di2015NewLine        Int64 tokenCount = 0;Di2015NewLine        Int64 endPosition = fs.Length / sizeOfChar;Di2015NewLineDi2015NewLine        for (Int64 position = sizeOfChar; position < endPosition; position += sizeOfChar) {Di2015NewLine            fs.Seek(-position, SeekOrigin.End);Di2015NewLine            fs.Read(buffer, 0, buffer.Length);Di2015NewLineDi2015NewLine            if (encoding.GetString(buffer) == tokenSeparator) {Di2015NewLine                tokenCount++;Di2015NewLine                if (tokenCount == numberOfTokens) {Di2015NewLine                    byte[] returnBuffer = new byte[fs.Length - fs.Position];Di2015NewLine                    fs.Read(returnBuffer, 0, returnBuffer.Length);Di2015NewLine                    return encoding.GetString(returnBuffer);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // handle case where number of tokens in file is less than numberOfTokensDi2015NewLine        fs.Seek(0, SeekOrigin.Begin);Di2015NewLine        buffer = new byte[fs.Length];Di2015NewLine        fs.Read(buffer, 0, buffer.Length);Di2015NewLine        return encoding.GetString(buffer);Di2015NewLine    }Di2015NewLine}Di2015NewLine
398529Di2015UniqueSeparatorBitmap bitmap = (Bitmap)Image.FromFile(file);Di2015NewLine
398529Di2015UniqueSeparatorMemoryStream byteStream = new MemoryStream();Di2015NewLinebitmap.Save(byteStream, ImageFormat.Tiff);Di2015NewLine
398529Di2015UniqueSeparatorImage tiff = Image.FromStream(byteStream)Di2015NewLine
398529Di2015UniqueSeparatorImageCodecInfo encoderInfo = GetEncoderInfo("image/tiff");Di2015NewLineDi2015NewLineEncoderParameters encoderParams = new EncoderParameters(2);Di2015NewLineEncoderParameter parameter = new EncoderParameter(Di2015NewLine    Encoder.Compression, (long)EncoderValue.CompressionCCITT4);Di2015NewLineencoderParams.Param[0] = parameter;Di2015NewLineparameter = new EncoderParameter(Encoder.SaveFlag, Di2015NewLine    (long)EncoderValue.MultiFrame);Di2015NewLineencoderParams.Param[1] = parameter;Di2015NewLine
398529Di2015UniqueSeparatortiff.Save(sOutFilePath, encoderInfo, encoderParams);Di2015NewLine
398529Di2015UniqueSeparatorEncoderParameters EncoderParams = new EncoderParameters(2);Di2015NewLineEncoderParameter SaveEncodeParam = new EncoderParameter(Di2015NewLine     Encoder.SaveFlag, Di2015NewLine     (long)EncoderValue.FrameDimensionPage);Di2015NewLineEncoderParameter CompressionEncodeParam = new EncoderParameter(Di2015NewLine     Encoder.Compression, (long)EncoderValue.CompressionCCITT4);Di2015NewLineEncoderParams.Param[0] = CompressionEncodeParam;Di2015NewLineEncoderParams.Param[1] = SaveEncodeParam;Di2015NewLinetiff.SaveAdd(/* next image as tiff - do the same as above with memory */, EncoderParams);Di2015NewLine
398529Di2015UniqueSeparatorEncoderParameter SaveEncodeParam = new EncoderParameter(Di2015NewLine     Encoder.SaveFlag, (long)EncoderValue.Flush);Di2015NewLineEncoderParams = new EncoderParameters(1);Di2015NewLineEncoderParams.Param[0] = SaveEncodeParam;Di2015NewLinetiff.SaveAdd(EncoderParams);Di2015NewLine
398605Di2015UniqueSeparator        void OneWay()Di2015NewLine        {Di2015NewLine            System.Data.SqlClient.SqlDataReader reader = null;Di2015NewLine            int i = reader.GetInt32(0);Di2015NewLine        }Di2015NewLineDi2015NewLine        void OtherWay()Di2015NewLine        {Di2015NewLine            System.Data.SqlClient.SqlDataReader reader = null;Di2015NewLine            int i = (int)reader[0];Di2015NewLine        }Di2015NewLine
398605Di2015UniqueSeparator.method private hidebysig instance void OneWay() cil managedDi2015NewLine{Di2015NewLine    .maxstack 2Di2015NewLine    .locals init (Di2015NewLine        [0] class [System.Data]System.Data.SqlClient.SqlDataReader reader,Di2015NewLine        [1] int32 i)Di2015NewLine    L_0000: nop Di2015NewLine    L_0001: ldnull Di2015NewLine    L_0002: stloc.0 Di2015NewLine    L_0003: ldloc.0 Di2015NewLine    L_0004: ldc.i4.0 Di2015NewLine    L_0005: callvirt instance int32 [System.Data]System.Data.Common.DbDataReader::GetInt32(int32)Di2015NewLine    L_000a: stloc.1 Di2015NewLine    L_000b: ret Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine.method private hidebysig instance void OtherWay() cil managedDi2015NewLine{Di2015NewLine    .maxstack 2Di2015NewLine    .locals init (Di2015NewLine        [0] class [System.Data]System.Data.SqlClient.SqlDataReader reader,Di2015NewLine        [1] int32 i)Di2015NewLine    L_0000: nop Di2015NewLine    L_0001: ldnull Di2015NewLine    L_0002: stloc.0 Di2015NewLine    L_0003: ldloc.0 Di2015NewLine    L_0004: ldc.i4.0 Di2015NewLine    L_0005: callvirt instance object [System.Data]System.Data.Common.DbDataReader::get_Item(int32)Di2015NewLine    L_000a: unbox.any int32Di2015NewLine    L_000f: stloc.1 Di2015NewLine    L_0010: ret Di2015NewLine}Di2015NewLine
398632Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<CustomSettings attrib1="val1" attrib2="val2" .../>Di2015NewLine
398694Di2015UniqueSeparator  public partial class Form1 : Form {Di2015NewLine    MyListBox mList;Di2015NewLine    public Form1() {Di2015NewLine      InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnLoad(EventArgs e) {Di2015NewLine      mList = new MyListBox(this);Di2015NewLine      mList.Location = new Point(5, 10);Di2015NewLine      mList.Size = new Size(50, this.ClientSize.Height + 50);Di2015NewLine      for (int ix = 0; ix < 100; ++ix) mList.Items.Add(ix);Di2015NewLine      mList.SelectedIndexChanged += new EventHandler(mList_SelectedIndexChanged);Di2015NewLine    }Di2015NewLineDi2015NewLine    void mList_SelectedIndexChanged(object sender, EventArgs e) {Di2015NewLine      MessageBox.Show(mList.SelectedIndex.ToString());Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void Dispose(bool disposing) {Di2015NewLine      // Moved from Designer.cs fileDi2015NewLine      if (disposing) mList.Dispose();Di2015NewLine      if (disposing && (components != null)) {Di2015NewLine        components.Dispose();Di2015NewLine      }Di2015NewLine      base.Dispose(disposing);Di2015NewLine    }Di2015NewLineDi2015NewLine  }Di2015NewLine
398750Di2015UniqueSeparator public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine
398792Di2015UniqueSeparatorInterface CarDi2015NewLine{Di2015NewLinevoid Drive(int miles);Di2015NewLine}Di2015NewLineDi2015NewLineclass Honda : CarDi2015NewLine{Di2015NewLine...Di2015NewLine}Di2015NewLineclass Toyota : CarDi2015NewLine{Di2015NewLine...Di2015NewLine}Di2015NewLine
399010Di2015UniqueSeparatorDo.It(universe)Di2015NewLine
399073Di2015UniqueSeparatorcollection.Select(c => {c.PropertyToSet = value; return c;}).ToList();Di2015NewLine
399217Di2015UniqueSeparatornew()
399217Di2015UniqueSeparatorpublic static string GetHexHash<HashAlgorithmToUse>(Stream dataStreamToHash)Di2015NewLine    where HashAlgorithmToUse : HashAlgorithm, new()Di2015NewLine
399444Di2015UniqueSeparatorDictionary<T>
399444Di2015UniqueSeparatorHashtable
399444Di2015UniqueSeparatorDictionary<T>
399444Di2015UniqueSeparatorObject
399444Di2015UniqueSeparatorDictionary<T>
399574Di2015UniqueSeparatorbool mSeenCtrlM;Di2015NewLineDi2015NewLineprotected override bool ProcessCmdKey(ref Message msg, Keys keyData) {Di2015NewLine  if (keyData == (Keys.Control | Keys.M)) {Di2015NewLine    mSeenCtrlM = !mSeenCtrlM;Di2015NewLine    if (!mSeenCtrlM) {Di2015NewLine      MessageBox.Show("yada");Di2015NewLine    }Di2015NewLine    return true;Di2015NewLine  }Di2015NewLine  mSeenCtrlM = false;Di2015NewLine  return base.ProcessCmdKey(ref msg, keyData);Di2015NewLine}Di2015NewLine
399600Di2015UniqueSeparator<xsl:template match="/">Di2015NewLine<xsl:value-of select="/root/node/comment()" disable-output-escaping="yes"/>Di2015NewLine</xsl:template>Di2015NewLine
399600Di2015UniqueSeparatorcristi:tmp diciu$ xsltproc test.xsl test.xml Di2015NewLine<?xml version="1.0"?>Di2015NewLineDi2015NewLine        <a href="mailto:some@one.com"> Mail me </a>Di2015NewLine
399695Di2015UniqueSeparatorint
399695Di2015UniqueSeparatorEnum.Parse()
399695Di2015UniqueSeparatorValueConverter
399772Di2015UniqueSeparatorprivate EventHandler foo;Di2015NewLineDi2015NewLinepublic event EventHandler FooDi2015NewLine{Di2015NewLine    addDi2015NewLine    {Di2015NewLine        // First try to remove the handler, then re-add itDi2015NewLine        foo -= value;Di2015NewLine        foo += value;Di2015NewLine    }Di2015NewLine    removeDi2015NewLine    {Di2015NewLine        foo -= value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
399811Di2015UniqueSeparatorRegex.Replace
399811Di2015UniqueSeparatorStringBuilder.Replace
399811Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string original = "abcdefghijkl";Di2015NewLineDi2015NewLine        Regex regex = new Regex("a|c|e|g|i|k", RegexOptions.Compiled);Di2015NewLineDi2015NewLine        string removedByRegex = regex.Replace(original, "");Di2015NewLine        string removedByStringBuilder = new StringBuilder(original)Di2015NewLine            .Replace("a", "")Di2015NewLine            .Replace("c", "")Di2015NewLine            .Replace("e", "")Di2015NewLine            .Replace("g", "")Di2015NewLine            .Replace("i", "")Di2015NewLine            .Replace("k", "")Di2015NewLine            .ToString();Di2015NewLineDi2015NewLine        Console.WriteLine(removedByRegex);Di2015NewLine        Console.WriteLine(removedByStringBuilder);Di2015NewLine    }Di2015NewLine}Di2015NewLine
400039Di2015UniqueSeparatorFindByAuthor
400124Di2015UniqueSeparatorint compareCategory = (int)pCategory; // just a guessDi2015NewLinevar result = (from r in entities.MachineRevisionDi2015NewLine              where r.Machine.IdMachine == pIdMachineDi2015NewLine                 && r.Category == compareCategoryDi2015NewLine              select r).FirstOrDefault();Di2015NewLineDi2015NewLineif (result != null)Di2015NewLine{Di2015NewLine     return new oMachineRevision(result.IdMachineRevision);Di2015NewLine}Di2015NewLine
400144Di2015UniqueSeparatorList<T>
400179Di2015UniqueSeparatorpublic class MyClass : IDisposable {Di2015NewLineDi2015NewLine    private delegate void AsyncDoSomethingCaller();Di2015NewLine    private delegate void AsyncDoDisposeCaller();Di2015NewLineDi2015NewLine    private int pendingTasks = 0;Di2015NewLineDi2015NewLine    public DoSomething() {Di2015NewLine    \// Do whatever.Di2015NewLine    }Di2015NewLineDi2015NewLine    public AsyncDoSomething() {Di2015NewLine    \pendingTasks++;Di2015NewLine    \AsyncDoSomethingCaller caller = new AsyncDoSomethingCaller();Di2015NewLine    \caller.BeginInvoke( new AsyncCallback( EndDoSomethingCallback ), caller);Di2015NewLine    }Di2015NewLineDi2015NewLine    public Dispose() {Di2015NewLine    \AsyncDoDisposeCaller caller = new AsyncDoDisposeCaller();Di2015NewLine    \caller.BeginInvoke( new AsyncCallback( EndDoDisposeCallback ), caller);Di2015NewLine    }Di2015NewLineDi2015NewLine    private DoDispose() {Di2015NewLine    \WaitForPendingTasks();Di2015NewLineDi2015NewLine    \// Finally, dispose whatever managed and unmanaged resources.Di2015NewLine    }Di2015NewLineDi2015NewLine    private void WaitForPendingTasks() {Di2015NewLine    \while ( true ) {Di2015NewLine    \\// Check if there is a pending task.Di2015NewLine    \\if ( pendingTasks == 0 ) {Di2015NewLine    \\\return;Di2015NewLine    \\}Di2015NewLineDi2015NewLine    \\// Allow other threads to execute.Di2015NewLine    \\Thread.Sleep( 0 );Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EndDoSomethingCallback( IAsyncResult ar ) {Di2015NewLine    \AsyncDoSomethingCaller caller = (AsyncDoSomethingCaller) ar.AsyncState;Di2015NewLine    \caller.EndInvoke( ar );Di2015NewLine    \pendingTasks--;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EndDoDisposeCallback( IAsyncResult ar ) {Di2015NewLine    \AsyncDoDisposeCaller caller = (AsyncDoDisposeCaller) ar.AsyncState;Di2015NewLine    \caller.EndInvoke( ar );Di2015NewLine    }Di2015NewLine}Di2015NewLine
400179Di2015UniqueSeparatorpublic class MyClass : IDisposable {Di2015NewLineDi2015NewLine    private delegate void AsyncDoSomethingCaller();Di2015NewLine    private delegate void AsyncDoDisposeCaller();Di2015NewLineDi2015NewLine    private int pendingTasks = 0;Di2015NewLine    private readonly object lockObj = new object();Di2015NewLineDi2015NewLine    public DoSomething() {Di2015NewLine    \// Do whatever.Di2015NewLine    }Di2015NewLineDi2015NewLine    public AsyncDoSomething() {Di2015NewLine    \lock ( lockObj ) {Di2015NewLine    \\pendingTasks++;Di2015NewLine    \\AsyncDoSomethingCaller caller = new AsyncDoSomethingCaller();Di2015NewLine    \\caller.BeginInvoke( new AsyncCallback( EndDoSomethingCallback ), caller);Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    public Dispose() {Di2015NewLine    \AsyncDoDisposeCaller caller = new AsyncDoDisposeCaller();Di2015NewLine    \caller.BeginInvoke( new AsyncCallback( EndDoDisposeCallback ), caller);Di2015NewLine    }Di2015NewLineDi2015NewLine    private DoDispose() {Di2015NewLine    \WaitForPendingTasks();Di2015NewLineDi2015NewLine    \// Finally, dispose whatever managed and unmanaged resources.Di2015NewLine    }Di2015NewLineDi2015NewLine    private void WaitForPendingTasks() {Di2015NewLine    \while ( true ) {Di2015NewLine    \\// Check if there is a pending task.Di2015NewLine    \\lock ( lockObj ) {Di2015NewLine    \\\if ( pendingTasks == 0 ) {Di2015NewLine    \\\\return;Di2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLineDi2015NewLine    \\// Allow other threads to execute.Di2015NewLine    \\Thread.Sleep( 0 );Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EndDoSomethingCallback( IAsyncResult ar ) {Di2015NewLine    \lock ( lockObj ) {Di2015NewLine    \\AsyncDoSomethingCaller caller = (AsyncDoSomethingCaller) ar.AsyncState;Di2015NewLine    \\caller.EndInvoke( ar );Di2015NewLine    \\pendingTasks--;Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EndDoDisposeCallback( IAsyncResult ar ) {Di2015NewLine    \AsyncDoDisposeCaller caller = (AsyncDoDisposeCaller) ar.AsyncState;Di2015NewLine    \caller.EndInvoke( ar );Di2015NewLine    }Di2015NewLine}Di2015NewLine
400179Di2015UniqueSeparatorMyClass myClass;Di2015NewLineDi2015NewLineusing ( myClass = new MyClass() ) {Di2015NewLine    myClass.AsyncDoSomething();Di2015NewLine}Di2015NewLineDi2015NewLinemyClass.DoSomething();Di2015NewLine
400325Di2015UniqueSeparatorprotected override bool ProcessCmdKey(ref Message msg, Keys keyData) {Di2015NewLine  if (keyData == (Keys.Control | Keys.F)) {Di2015NewLine    MessageBox.Show("What the Ctrl+F?");Di2015NewLine    return true;Di2015NewLine  }Di2015NewLine  return base.ProcessCmdKey(ref msg, keyData);Di2015NewLine}Di2015NewLine
400326Di2015UniqueSeparatorpublic class SomeBase<GenericThingy> where GenericThingy : SomeBase<GenericThingy>, new()Di2015NewLine
400391Di2015UniqueSeparatorusing
400391Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLinesealed class TempFile : IDisposableDi2015NewLine{Di2015NewLine    string path;Di2015NewLine    public TempFile() : this(System.IO.Path.GetTempFileName()) { }Di2015NewLineDi2015NewLine    public TempFile(string path)Di2015NewLine    {Di2015NewLine        if (string.IsNullOrEmpty(path)) throw new ArgumentNullException("path");Di2015NewLine        this.path = path;Di2015NewLine    }Di2015NewLine    public string PathDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (path == null) throw new ObjectDisposedException(GetType().Name);Di2015NewLine            return path;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    ~TempFile() { Dispose(false); }Di2015NewLine    public void Dispose() { Dispose(true); }Di2015NewLine    private void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if (disposing)Di2015NewLine        {Di2015NewLine            GC.SuppressFinalize(this);                Di2015NewLine        }Di2015NewLine        if (path != null)Di2015NewLine        {Di2015NewLine            try { File.Delete(path); }Di2015NewLine            catch { } // best effortDi2015NewLine            path = null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string path;Di2015NewLine        using (var tmp = new TempFile())Di2015NewLine        {Di2015NewLine            path = tmp.Path;Di2015NewLine            Console.WriteLine(File.Exists(path));Di2015NewLine        }Di2015NewLine        Console.WriteLine(File.Exists(path));Di2015NewLine    }Di2015NewLine}Di2015NewLine
400391Di2015UniqueSeparatorTempFile
400419Di2015UniqueSeparatorRead(char[], int, int)
400419Di2015UniqueSeparatorstatic IEnumerable<string> ReadLines(string path, int maxLineLength)Di2015NewLine{Di2015NewLine    StringBuilder currentLine = new StringBuilder(maxLineLength);Di2015NewLine    using (var reader = File.OpenText(path))Di2015NewLine    {Di2015NewLine        int i;Di2015NewLine        while((i = reader.Read()) > 0) {Di2015NewLine            char c = (char) i;Di2015NewLine            if(c == '\\r' || c == '\\n') {Di2015NewLine                yield return currentLine.ToString();Di2015NewLine                currentLine.Length = 0;Di2015NewLine                continue;Di2015NewLine            }Di2015NewLine            currentLine.Append((char)c);Di2015NewLine            if (currentLine.Length > maxLineLength)Di2015NewLine            {Di2015NewLine                throw new InvalidOperationException("Max length exceeded");Di2015NewLine            }Di2015NewLine        }Di2015NewLine        if (currentLine.Length > 0)Di2015NewLine        {Di2015NewLine            yield return currentLine.ToString();Di2015NewLine        }                Di2015NewLine    }Di2015NewLine}Di2015NewLine
400444Di2015UniqueSeparator&&
400444Di2015UniqueSeparator^
400444Di2015UniqueSeparator^
400444Di2015UniqueSeparator&&
400444Di2015UniqueSeparator&
400444Di2015UniqueSeparator&&
400444Di2015UniqueSeparator^
400444Di2015UniqueSeparator2^X
400444Di2015UniqueSeparator<<
400444Di2015UniqueSeparator2^X
400444Di2015UniqueSeparator1 << X
400444Di2015UniqueSeparatorif ((intNumber & (1 << index)) != 0)Di2015NewLine    a = a + "1";Di2015NewLineelseDi2015NewLine    a = a + "0";Di2015NewLine
400444Di2015UniqueSeparatorfor (Int32 index = 7; index >= 0; index--)Di2015NewLine    if ((intNumber & (1 << index)) != 0)Di2015NewLine        bin = bin + "1";Di2015NewLine    elseDi2015NewLine        bin = bin + "0";Di2015NewLine
400444Di2015UniqueSeparatorChar
400444Di2015UniqueSeparatorChar[] digits = new Char[8]; // change if you want more/fewer digitsDi2015NewLinefor (Int32 index = 0; index < digits.Length; index++)Di2015NewLine    if ((intNumber & (1 << index)) != 0)Di2015NewLine        digits[digits.Length - 1 - index] = '1';Di2015NewLine    elseDi2015NewLine        digits[digits.Length - 1 - index] = '0';Di2015NewLinebin = new String(digits);Di2015NewLine
400444Di2015UniqueSeparatorString bin = Convert.ToString(intNumber, 2).PadLeft(8, '0');Di2015NewLine
400454Di2015UniqueSeparatorpublic class Service1 : System.Web.Services.WebServiceDi2015NewLine{Di2015NewLineDi2015NewLine    [WebMethod]Di2015NewLine    public void Log(int foo, int bar)Di2015NewLine    {Di2015NewLine        Thread a = new Thread(new ThreadStart(delegate()Di2015NewLine        {Di2015NewLine            // Do some processing hereDi2015NewLine            // For example, let it sleep for 10 secsDi2015NewLine            Thread.Sleep(10000);Di2015NewLine        }));Di2015NewLine        a.Start();Di2015NewLine    }Di2015NewLine}Di2015NewLine
400487Di2015UniqueSeparatorpublic static int Weekday(DateTime dt, DayOfWeek startOfWeek)Di2015NewLine{Di2015NewLine    return (dt.DayOfWeek - startOfWeek + 7) % 7;Di2015NewLine}Di2015NewLine
400487Di2015UniqueSeparatorDateTime dt = DateTime.Now;Di2015NewLineConsole.WriteLine(Weekday(dt, DayOfWeek.Friday));Di2015NewLine
400487Di2015UniqueSeparator4Di2015NewLine
400534Di2015UniqueSeparator(?<Major>\\d*)\\.(?<Minor>\\d*)(\\.(?<Build>\\d*)(\\.(?<Revision>\\d*))?)?Di2015NewLine
400626Di2015UniqueSeparator::
400626Di2015UniqueSeparatorglobal
400626Di2015UniqueSeparatorFoo.Bar
400626Di2015UniqueSeparatorBaz.Foo.Bar
400626Di2015UniqueSeparatorFoo.Bar
400626Di2015UniqueSeparatorFoo.Bar
400626Di2015UniqueSeparatorBaz
400626Di2015UniqueSeparatorglobal::Foo.Bar
400777Di2015UniqueSeparatorstring value = "9quali52ty3";Di2015NewLineDi2015NewLine// Convert the string into a byte[].Di2015NewLinebyte[] asciiBytes = Encoding.ASCII.GetBytes(value);Di2015NewLine
400871Di2015UniqueSeparatorSW.close()
400954Di2015UniqueSeparatornumbers.Stub(x => x.GetEnumerator())Di2015NewLine                     .Return(null)Di2015NewLine                     .WhenCalled(x => x.ReturnValue = Di2015NewLine                                    new List<int> { 1, 2, 3 }.GetEnumerator()Di2015NewLine                                 );Di2015NewLine
401190Di2015UniqueSeparatorpublic interface IParentNodeT<TChild, TSelf>Di2015NewLine\where TChild : IChildNodeT<TSelf, TChild>, INodeT<TChild>Di2015NewLine\where TSelf : IParentNodeT<TChild, TSelf>Di2015NewLine{Di2015NewLine\TChild childRoot { get; set; }Di2015NewLine}Di2015NewLine
401274Di2015UniqueSeparator<asp:DropDownList ID="ddl" runat="server"Di2015NewLine  onchange="document.location.href = this.value;" >Di2015NewLine    <asp:ListItem Text="a" Value="http://url1"></asp:ListItem>Di2015NewLine    <asp:ListItem Text="b" Value="http://url2"></asp:ListItem>Di2015NewLine    <asp:ListItem Text="c" Value="http://url3"></asp:ListItem>Di2015NewLine    <asp:ListItem Text="d" Value="http://url4"></asp:ListItem>Di2015NewLine</asp:DropDownList>Di2015NewLine
401275Di2015UniqueSeparatorthis
401275Di2015UniqueSeparatorthis
401275Di2015UniqueSeparatorDi2015NewLine    public class UtilitiesDi2015NewLine    {Di2015NewLine        static ConfigurationManager _configurationManager = new ConfigurationManager();Di2015NewLine        public static ConfigurationManager ConfigurationManagerDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return _configurationManager;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ConfigurationManagerDi2015NewLine    {Di2015NewLine        public object this[string value]Di2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return new object();Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                // set somethingDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
401275Di2015UniqueSeparatorUtilities.ConfigurationManager["someKey"]
401356Di2015UniqueSeparatorpublic static string GenerateJsonString(object o) Di2015NewLine{Di2015NewLine    DataContractJsonSerializer ser = new DataContractJsonSerializer(o.GetType());Di2015NewLine    using (MemoryStream ms = new MemoryStream())Di2015NewLine    {Di2015NewLine        ser.WriteObject(ms, o);Di2015NewLine        json = Encoding.Default.GetString(ms.ToArray());Di2015NewLine        ms.Close();Di2015NewLine        return json;Di2015NewLine    }Di2015NewLine}Di2015NewLine
401413Di2015UniqueSeparatorusing System.Configuration;Di2015NewLineusing System.Web.Configuration;Di2015NewLine
401413Di2015UniqueSeparator  CompilationSection configSection =Di2015NewLine          (CompilationSection) ConfigurationManager.GetSection( "system.web/compilation" );Di2015NewLine
401413Di2015UniqueSeparatorconfigSection.Debug
401413Di2015UniqueSeparator\\Windows\\Microsoft.net\\Framework\\<version>\\CONFIG
401579Di2015UniqueSeparatorprivate List<Image> GetAllPages(string file)Di2015NewLine        {Di2015NewLine            List<Image> images = new List<Image>();Di2015NewLine            Bitmap bitmap = (Bitmap)Image.FromFile(file);Di2015NewLine            int count = bitmap.GetFrameCount(FrameDimension.Page);Di2015NewLine            for (int idx = 0; idx < count; idx++)Di2015NewLine            {Di2015NewLine                // save each frame to a bytestreamDi2015NewLine                bitmap.SelectActiveFrame(FrameDimension.Page, idx);Di2015NewLine                MemoryStream byteStream = new MemoryStream();Di2015NewLine                bitmap.Save(byteStream, ImageFormat.Tiff);Di2015NewLineDi2015NewLine                // and then create a new Image from itDi2015NewLine                images.Add(Image.FromStream(byteStream));Di2015NewLine            }Di2015NewLine            return images;Di2015NewLine        }Di2015NewLine
401678Di2015UniqueSeparatorpublic Form1()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    checkedListBox1.Items.Add("Can't check me", CheckState.Indeterminate);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void checkedListBox1_ItemCheck(object sender, ItemCheckEventArgs e)Di2015NewLine{Di2015NewLine    if (e.CurrentValue == CheckState.Indeterminate)Di2015NewLine    {Di2015NewLine        e.NewValue = CheckState.Indeterminate;Di2015NewLine    }Di2015NewLine}Di2015NewLine
401782Di2015UniqueSeparatorServer server = new Server();Di2015NewLineDi2015NewLine// Force IsSystemObject to be returned by default.Di2015NewLineserver.SetDefaultInitFields(typeof(StoredProcedure), "IsSystemObject");Di2015NewLineDi2015NewLineStoredProcedureCollection storedProcedures = server.Databases["AdventureWorks"].StoredProcedures;Di2015NewLineDi2015NewLineforeach (StoredProcedure sp in storedProcedures) {Di2015NewLine    if (!sp.IsSystemObject) {Di2015NewLine        // We only want user stored proceduresDi2015NewLine    }Di2015NewLine}Di2015NewLine
401824Di2015UniqueSeparatorpublic static string GetFriendlyTypeName(Type type) {Di2015NewLine    if (type.IsGenericParameter)Di2015NewLine    {Di2015NewLine        return type.Name;Di2015NewLine    }Di2015NewLineDi2015NewLine    if (!type.IsGenericType)Di2015NewLine    {Di2015NewLine        return type.FullName;Di2015NewLine    }Di2015NewLineDi2015NewLine    var builder = new System.Text.StringBuilder();Di2015NewLine    var name = type.Name;Di2015NewLine    var index = name.IndexOf("`");Di2015NewLine    builder.AppendFormat("{0}.{1}", type.Namespace, name.Substring(0, index));Di2015NewLine    builder.Append('<');Di2015NewLine    var first = true;Di2015NewLine    foreach (var arg in type.GetGenericArguments())Di2015NewLine    {Di2015NewLine        if (!first)Di2015NewLine        {Di2015NewLine            builder.Append(',');Di2015NewLine        }Di2015NewLine        builder.Append(GetFriendlyTypeName(arg));Di2015NewLine        first = false;Di2015NewLine    }Di2015NewLine    builder.Append('>');Di2015NewLine    return builder.ToString();Di2015NewLine}Di2015NewLine
402328Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace WhateverDi2015NewLine{Di2015NewLine    public static class HowdyDi2015NewLine    {Di2015NewLine<# Di2015NewLine    string[] webServices = new string[] {"wsContact", "wsDiary"};Di2015NewLine    foreach (string wsName in webServices)Di2015NewLine    {Di2015NewLine#>Di2015NewLine    public static <#=wsName#>.SoCredentialsHeader AttachContactCredentialHeader()Di2015NewLine    {Di2015NewLine    \<#=wsName#>.SoCredentialsHeader ch = new <#=wsName#>.SoCredentialsHeader();Di2015NewLine    \ch.AuthenticationType = <#=wsName#>.SoAuthenticationType.CRM5;Di2015NewLine    \ch.UserId = "myUsername";Di2015NewLine    \ch.Secret = apUtilities.CalculateCredentialsSecret(<#=wsName#>.SoAuthenticationType.CRM5,Di2015NewLine                apUtilities.GetDays(), "myUsername", "myPassword");Di2015NewLine    \return ch;Di2015NewLine    }Di2015NewLine    }       Di2015NewLine<# } #>Di2015NewLine}Di2015NewLine
402357Di2015UniqueSeparatorends-with()
402357Di2015UniqueSeparatorends-with()
402357Di2015UniqueSeparator$str2 = substring($str1, string-length($str1)- string-length($str2) +1)
402357Di2015UniqueSeparatortrue()
402357Di2015UniqueSeparatorfalse()
402357Di2015UniqueSeparatorends-with($str1, $str2)
402357Di2015UniqueSeparator$str1
402357Di2015UniqueSeparator$str2
402357Di2015UniqueSeparator/myXml/data
402357Di2015UniqueSeparator'World'
402357Di2015UniqueSeparatorends-with(/myXml/data, 'World')
402357Di2015UniqueSeparator'World' = Di2015NewLine   substring(/myXml/data,Di2015NewLine             string-length(/myXml/data) - string-length('World') +1Di2015NewLine             )Di2015NewLine
402458Di2015UniqueSeparator< body onload="initialize()"  onunload="GUnload()"  >  Di2015NewLine< form id="form1" runat="server" >Di2015NewLine    < div >Di2015NewLine        < asp:contentplaceholder id="ContentPlaceHolder1" runat="server" >Di2015NewLine        < /asp:contentplaceholder >Di2015NewLine    < /div >Di2015NewLine    < /form >Di2015NewLine< /body >  Di2015NewLine
402458Di2015UniqueSeparator< %@ Page Language="C#" MasterPageFile="~/MasterPages/GMap.master" AutoEventWireup="true"Di2015NewLine    CodeFile="GMapTest.aspx.cs" Inherits="GMapTest" Title="Google Map Page" % >Di2015NewLineDi2015NewLineDi2015NewLine< asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" runat="Server" >Di2015NewLineDi2015NewLineDi2015NewLine    < script src="http://maps.google.com/maps?file=api&v=2&key=< % = AppConfig.GoogleMapApiKey % >"Di2015NewLine        type="text/javascript" >< /script >Di2015NewLineDi2015NewLine    < script type="text/javascript" >Di2015NewLineDi2015NewLine    var map = null;Di2015NewLine    var geocoder = null;Di2015NewLine    var latsgn = 1;Di2015NewLine    var lgsgn = 1;Di2015NewLine    var zm = 0; Di2015NewLine    var marker = null;    Di2015NewLineDi2015NewLine    function initialize()Di2015NewLine     {Di2015NewLine      if (GBrowserIsCompatible()) Di2015NewLine      {Di2015NewLine       var latitude=  "";Di2015NewLine       var longitude= "";Di2015NewLineDi2015NewLine       map = new GMap2(document.getElementById("map_canvas"));Di2015NewLineDi2015NewLineDi2015NewLine         var center = new GLatLng(0,0);Di2015NewLine         map.setCenter(center, 17);Di2015NewLineDi2015NewLine         map.addControl(new GLargeMapControl());Di2015NewLine        map.addControl(new GScaleControl());Di2015NewLine        map.enableScrollWheelZoom();Di2015NewLineDi2015NewLine        map.addControl(new GMapTypeControl());Di2015NewLineDi2015NewLine        map.enableDoubleClickZoom();Di2015NewLineDi2015NewLine         marker = new GMarker(center,{draggable: true});Di2015NewLineDi2015NewLine         geocoder = new GClientGeocoder();Di2015NewLineDi2015NewLineDi2015NewLine       GEvent.addListener(marker, "dragend", function() {Di2015NewLine        var point = marker.getLatLng();Di2015NewLine         marker.openInfoWindowHtml("Latitude: " + point.y + "< /br > Longitude: " + point.x  );Di2015NewLine      });Di2015NewLineDi2015NewLine       GEvent.addListener(marker, "click", function() {Di2015NewLine        var point = marker.getLatLng();        Di2015NewLineDi2015NewLine      });Di2015NewLineDi2015NewLineDi2015NewLine        map.addOverlay(marker);Di2015NewLine        GEvent.trigger(marker, "click");Di2015NewLineDi2015NewLine        if (latitude  > 0 &&  longitude  > 0)Di2015NewLine        {Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {       Di2015NewLineDi2015NewLine            showAddress();Di2015NewLineDi2015NewLine        }Di2015NewLine      }Di2015NewLine     }Di2015NewLine
402458Di2015UniqueSeparatorfunction showAddress() Di2015NewLine{Di2015NewLine     var isAddressFound=false;  Di2015NewLine     var companyAddress = '';  Di2015NewLine     var address='satyam mall, vastrapur, ahmedabad, gujrat, india';  Di2015NewLine     if (geocoder)   Di2015NewLine    {  Di2015NewLine         geocoder.getLatLng(address,function(point) {   Di2015NewLine                             if (!point) {  Di2015NewLine                            alert(address + " not found");  Di2015NewLineDi2015NewLine                             } else {  Di2015NewLine                                isAddressFound =true;  Di2015NewLine                             map.setCenter(point,17);  Di2015NewLine                             zm = 1;  Di2015NewLine                             marker.setPoint(point);  Di2015NewLine                             GEvent.trigger(marker, "click");  Di2015NewLine                             }  Di2015NewLine                         }  Di2015NewLine         );  Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine//If address not found then redirect to company addressDi2015NewLineDi2015NewLine     if(!isAddressFound)Di2015NewLine     {     Di2015NewLine         geocoder.getLatLng(companyAddress,Di2015NewLine         function(point) { Di2015NewLine         if (!point) { Di2015NewLine         } else {Di2015NewLine            isAddressFound =true;Di2015NewLine         map.setCenter(point,17);Di2015NewLine         zm = 1;Di2015NewLine         marker.setPoint(point);Di2015NewLine         GEvent.trigger(marker, "click");Di2015NewLine         }Di2015NewLine         }Di2015NewLine         );Di2015NewLine     }Di2015NewLine }Di2015NewLine}Di2015NewLine< /script >Di2015NewLineDi2015NewLine< div id="map_canvas" style="width: 100%; height: 425px" >Di2015NewLine< /div >Di2015NewLine< /asp:Content >Di2015NewLine
402479Di2015UniqueSeparatorIDataSource ds = (IDataSource)LeasesDS;Di2015NewLineDataSourceView view = ds.GetView(LeasesGrid.DataMember);Di2015NewLine
402479Di2015UniqueSeparatorview.Insert(dict, delegate { return false; });Di2015NewLine
402545Di2015UniqueSeparator>>
402545Di2015UniqueSeparator6844268 = 11010000110111101101100Di2015NewLine>> 12   =             11010000110.111101101100Di2015NewLineresult  =             11010000110Di2015NewLineresult  = 2 + 4 + 128 + 512 + 1024 = 1670Di2015NewLineDi2015NewLine  18273       =   100011101100001Di2015NewLine6844268 >> 12 =       11010000110Di2015NewLine                        ^^^^  ^^^ <-- mismatchesDi2015NewLine
402623Di2015UniqueSeparatorslt
402623Di2015UniqueSeparatorsizeof(unsigned short)
402623Di2015UniqueSeparatorslt[1670]
402623Di2015UniqueSeparatorlookup_ext[1670]
402623Di2015UniqueSeparatorsizeof(unsigned short)
402623Di2015UniqueSeparatorlookup_ext[3340]
402623Di2015UniqueSeparatorlookup_ext[3341]
402661Di2015UniqueSeparator...GetString(b, 0, b.Length);Di2015NewLine
402678Di2015UniqueSeparatorweb.config
402678Di2015UniqueSeparator<system.codedom>Di2015NewLine   <compilers>Di2015NewLine      <compiler language="c#;cs;csharp"Di2015NewLine            extension=".cs"Di2015NewLine            warningLevel="4"Di2015NewLine            type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=Di2015NewLine         <providerOption name="CompilerVersion" value="v3.5"/>Di2015NewLine         <providerOption name="WarnAsError" value="false"/>Di2015NewLine      </compiler>Di2015NewLine   </compliers>Di2015NewLine</system.codedom>Di2015NewLine
402694Di2015UniqueSeparatorJavaScriptSerializer
402694Di2015UniqueSeparatorSystem.Web.Extensions.dll
402694Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineusing System.Web.Script.Serialization;Di2015NewLinepublic class NameTypePairDi2015NewLine{Di2015NewLine    public string OBJECT_NAME { get; set; }Di2015NewLine    public string OBJECT_TYPE { get; set; }Di2015NewLine}Di2015NewLinepublic enum PositionType { none, point }Di2015NewLinepublic class RefDi2015NewLine{Di2015NewLine    public int id { get; set; }Di2015NewLine}Di2015NewLinepublic class SubObjectDi2015NewLine{Di2015NewLine    public NameTypePair attributes { get; set; }Di2015NewLine    public Position position { get; set; }Di2015NewLine}Di2015NewLinepublic class PositionDi2015NewLine{Di2015NewLine    public int x { get; set; }Di2015NewLine    public int y { get; set; }Di2015NewLine}Di2015NewLinepublic class FooDi2015NewLine{Di2015NewLine    public Foo() { objects = new List<SubObject>(); }Di2015NewLine    public string displayFieldName { get; set; }Di2015NewLine    public NameTypePair fieldAliases { get; set; }Di2015NewLine    public PositionType positionType { get; set; }Di2015NewLine    public Ref reference { get; set; }Di2015NewLine    public List<SubObject> objects { get; set; }Di2015NewLine}Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLineDi2015NewLine    const string json = @"{Di2015NewLine  ""displayFieldName"" : ""OBJECT_NAME"", Di2015NewLine  ""fieldAliases"" : {Di2015NewLine    ""OBJECT_NAME"" : ""OBJECT_NAME"", Di2015NewLine    ""OBJECT_TYPE"" : ""OBJECT_TYPE""Di2015NewLine  }, Di2015NewLine  ""positionType"" : ""point"", Di2015NewLine  ""reference"" : {Di2015NewLine    ""id"" : 1111Di2015NewLine  }, Di2015NewLine  ""objects"" : [Di2015NewLine    {Di2015NewLine      ""attributes"" : {Di2015NewLine        ""OBJECT_NAME"" : ""test name"", Di2015NewLine        ""OBJECT_TYPE"" : ""test type""Di2015NewLine      }, Di2015NewLine      ""position"" : Di2015NewLine      {Di2015NewLine        ""x"" : 5, Di2015NewLine        ""y"" : 7Di2015NewLine      }Di2015NewLine    }Di2015NewLine  ]Di2015NewLine}";Di2015NewLineDi2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        JavaScriptSerializer ser = new JavaScriptSerializer();Di2015NewLine        Foo foo = ser.Deserialize<Foo>(json);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
402694Di2015UniqueSeparatorFoo foo = JsonConvert.DeserializeObject<Foo>(json);Di2015NewLine
402907Di2015UniqueSeparator.SetFetchMode("Prices", FetchMode.Join)Di2015NewLine
403070Di2015UniqueSeparatorPerson
403070Di2015UniqueSeparatorperson
403070Di2015UniqueSeparatorPerson
403456Di2015UniqueSeparatorvar x = 5;Di2015NewLine
403456Di2015UniqueSeparatorint x = 5;Di2015NewLine
403566Di2015UniqueSeparatorMySqlConnection connect = new MySqlConnection();Di2015NewLine//Do you get the null exception in this next line?Di2015NewLineconnect.ConnectionString = "your conn string here";Di2015NewLineconnect.Open(); //-> If you get the exception here then the problem is with the connection string and not the MySqlConnection constructor.Di2015NewLine
403638Di2015UniqueSeparatorbyte[] result = new byte[8];Di2015NewLinerng.GetBytes(result);Di2015NewLinereturn (double)BitConverter.ToUInt64(result,0) / ulong.MaxValue;Di2015NewLine
404324Di2015UniqueSeparator   Update DestTable SetDi2015NewLine       ColName = T.ColName,Di2015NewLine       [repeat for all cols]Di2015NewLine    From TmpTable T Join DestTable D On D.Pk = T.PkDi2015NewLineDi2015NewLine    Insert DestTable(ColList)Di2015NewLine    Select [ColList]Di2015NewLine    From TmpTable TDi2015NewLine    Where Not Exists (Select * From DestTableDi2015NewLine                      Where pk = T.Pk)Di2015NewLine
404510Di2015UniqueSeparatord.SetValues(parameters);Di2015NewLineinvoiceTable.Rows.Add(d);Di2015NewLine
404510Di2015UniqueSeparatorinvoiceTable.Rows.Add(parameters);Di2015NewLine
404663Di2015UniqueSeparatorprivate void dataGridView1_SelectionChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    DataGridView dgv = (DataGridView)sender;Di2015NewLineDi2015NewLine    //User selected WHOLE ROW (by clicking in the margin)Di2015NewLine    if (dgv.SelectedRows.Count> 0)Di2015NewLine       MessageBox.Show(dgv.SelectedRows[0].Cells[0].Value.ToString());Di2015NewLineDi2015NewLine    //User selected a cell (show the first cell in the row)Di2015NewLine    if (dgv.SelectedCells.Count > 0)Di2015NewLine        MessageBox.Show(dgv.Rows[dgv.SelectedCells[0].RowIndex].Cells[0].Value.ToString());Di2015NewLineDi2015NewLine    //User selected a cell, show that cellDi2015NewLine    if (dgv.SelectedCells.Count > 0)Di2015NewLine        MessageBox.Show(dgv.SelectedCells[0].Value.ToString());Di2015NewLine}Di2015NewLine
404947Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace ConsoleApplication2Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Tester t=new Tester();Di2015NewLine            t.Method1(new Stack<string>(), new MsgParser(), true, true);Di2015NewLine            t.Method2(new Stack<string>(), new MsgParser(), true, true);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    class TesterDi2015NewLine    {Di2015NewLine        public void Method1(Stack<string> strings, MsgParser parser, bool parseMsg, bool processMsg)Di2015NewLine        {Di2015NewLine            string msg;Di2015NewLine            while (!String.IsNullOrEmpty(msg = strings.Pop()))Di2015NewLine            {Di2015NewLine                RaiseMessageReceived();Di2015NewLine                if (parseMsg)Di2015NewLine                {Di2015NewLine                    ParsedMsg parsedMsg = parser.ParseMsg(msg);Di2015NewLine                    RaiseMessageParsed();Di2015NewLine                    if (processMsg)Di2015NewLine                    {Di2015NewLine                        process(parsedMsg);Di2015NewLine                        RaiseMessageProcessed();Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Method2(Stack<string> strings, MsgParser parser, bool parseMsg, bool processMsg)Di2015NewLine        {Di2015NewLine            string msg;Di2015NewLine            while (!String.IsNullOrEmpty(msg = strings.Pop()))Di2015NewLine            {Di2015NewLine                RaiseMessageReceived();Di2015NewLine                if (!parseMsg) continue;Di2015NewLineDi2015NewLine                ParsedMsg parsedMsg = parser.ParseMsg(msg);Di2015NewLine                RaiseMessageParsed();Di2015NewLine                if (!processMsg) continue;Di2015NewLineDi2015NewLine                process(parsedMsg);Di2015NewLine                RaiseMessageProcessed();Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        private void RaiseMessageProcessed()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Done");Di2015NewLine        }Di2015NewLineDi2015NewLine        private void process(ParsedMsg msg)Di2015NewLine        {Di2015NewLine            Console.WriteLine(msg);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void RaiseMessageParsed()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Message parsed");Di2015NewLine        }Di2015NewLineDi2015NewLine        private void RaiseMessageReceived()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Message received.");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    internal class ParsedMsgDi2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    internal class MsgParserDi2015NewLine    {Di2015NewLine        public ParsedMsg ParseMsg(string msg)Di2015NewLine        {Di2015NewLine            return new ParsedMsg();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
404947Di2015UniqueSeparatorinternal class TesterDi2015NewLine{Di2015NewLine    // MethodsDi2015NewLine    public void Method1(Stack<string> strings, MsgParser parser, bool parseMsg, bool processMsg)Di2015NewLine    {Di2015NewLine        string msg;Di2015NewLine        while (!string.IsNullOrEmpty(msg = strings.Pop()))Di2015NewLine        {Di2015NewLine            this.RaiseMessageReceived();Di2015NewLine            if (parseMsg)Di2015NewLine            {Di2015NewLine                ParsedMsg parsedMsg = parser.ParseMsg(msg);Di2015NewLine                this.RaiseMessageParsed();Di2015NewLine                if (processMsg)Di2015NewLine                {Di2015NewLine                    this.process(parsedMsg);Di2015NewLine                    this.RaiseMessageProcessed();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Method2(Stack<string> strings, MsgParser parser, bool parseMsg, bool processMsg)Di2015NewLine    {Di2015NewLine        string msg;Di2015NewLine        while (!string.IsNullOrEmpty(msg = strings.Pop()))Di2015NewLine        {Di2015NewLine            this.RaiseMessageReceived();Di2015NewLine            if (parseMsg)Di2015NewLine            {Di2015NewLine                ParsedMsg parsedMsg = parser.ParseMsg(msg);Di2015NewLine                this.RaiseMessageParsed();Di2015NewLine                if (processMsg)Di2015NewLine                {Di2015NewLine                    this.process(parsedMsg);Di2015NewLine                    this.RaiseMessageProcessed();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void process(ParsedMsg msg)Di2015NewLine    {Di2015NewLine        Console.WriteLine(msg);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RaiseMessageParsed()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Message parsed");Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RaiseMessageProcessed()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Done");Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RaiseMessageReceived()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Message received.");Di2015NewLine    }Di2015NewLine}Di2015NewLine
404994Di2015UniqueSeparatorsw.Write(mystring + Environment.NewLine);Di2015NewLine
404994Di2015UniqueSeparatorsw.Write("{0}{1}", mystring, Environment.NewLine);Di2015NewLine
405154Di2015UniqueSeparatorDateTime.Now.ToString("ddd dd/MM/yyyy")Di2015NewLine
405254Di2015UniqueSeparatorPrincipalContext adContext = new PrincipalContext(ContextType.Domain);Di2015NewLineDi2015NewLineusing (adContext)Di2015NewLine{Di2015NewLine     return adContext.ValidateCredentials(UserName, Password);Di2015NewLine}Di2015NewLine
405254Di2015UniqueSeparatorPrincipalContext context = new PrincipalContext(ContextType.Domain);Di2015NewLineUserPrincipal foundUser = Di2015NewLine    UserPrincipal.FindByIdentity(context, "jdoe");Di2015NewLine
405254Di2015UniqueSeparatorDirectoryEntry userDE = (DirectoryEntry)foundUser.GetUnderlyingObject();Di2015NewLine
405503Di2015UniqueSeparator+-- MySolutionDi2015NewLine    | // The solution is in source controlDi2015NewLine    |Di2015NewLine    +-- MyProject1Di2015NewLine    |   |Di2015NewLine    |   +-- Project and source code files for a specific projectDi2015NewLine    |Di2015NewLine    +-- MyProject1.TestDi2015NewLine    |   |Di2015NewLine    |   +-- Test files for MyProject1Di2015NewLine    |Di2015NewLine    +-- Third PartyDi2015NewLine    |   |Di2015NewLine    |   +-- Library dll's are stored here.Di2015NewLine    |Di2015NewLine    |Di2015NewLine    +-- Solution files, more project folders, user settings (user settings are not in source control) etc…Di2015NewLine
405633Di2015UniqueSeparatorInt32.TryParse(String, Int32)
405633Di2015UniqueSeparator  bool result = Int32.TryParse(value, out number);Di2015NewLine  if (result)Di2015NewLine  {Di2015NewLine     Console.WriteLine("Converted '{0}' to {1}.", value, number);         Di2015NewLine  }Di2015NewLine
405702Di2015UniqueSeparatoruid=933fdf8e-1be0-4bc2-a269-ac0b01ba4755&result=saved&hash=main#mainDi2015NewLine
405702Di2015UniqueSeparator<!--[if IE]>Di2015NewLine<script>Di2015NewLine  if(document.location.href.indexOf('&hash=') != -1){Di2015NewLine    //extract value from url...Di2015NewLine    document.location.hash = extractedValue;Di2015NewLine  }Di2015NewLine</script>Di2015NewLine<![endif]-->Di2015NewLine
405922Di2015UniqueSeparatorselect last_insert_id();
405922Di2015UniqueSeparatorMySqlCommand comm = connect.CreateCommand();Di2015NewLinecomm.CommandText = insertInvoice;Di2015NewLinecomm.CommandText += "\\'" + invoiceDate.ToString("yyyy:MM:dd hh:mm:ss") + "\\', "  Di2015NewLine    + bookFee + ", " + adminFee + ", " + totalFee + ", " + customerID +  ");";Di2015NewLine    + "select last_insert_id();"Di2015NewLineDi2015NewLineint id = Convert.ToInt32(comm.ExecuteScalar());Di2015NewLine
405922Di2015UniqueSeparatorcomm.CommandText = string.Format("{0} '{1}', {2}, {3}, {4}, {5}); select last_insert_id();",Di2015NewLine  insertInvoice, invoiceDate.ToString(...), bookFee, adminFee, totalFee, customerID);Di2015NewLine
406409Di2015UniqueSeparatorFindMin
406409Di2015UniqueSeparatorFindMax
406409Di2015UniqueSeparatorint
406409Di2015UniqueSeparatorcurrent.n
406409Di2015UniqueSeparatorTreeNode
406409Di2015UniqueSeparator    public int CountNodes()Di2015NewLine    {Di2015NewLine        int count = 1; // me!Di2015NewLine        if (_left != null) count += _left.CountNodes();Di2015NewLine        if (_right != null) count += _right.CountNodes();Di2015NewLine        return count;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int CountLeaves()Di2015NewLine    {Di2015NewLine        int count = (_left == null && _right == null) ? 1 : 0;Di2015NewLine        if (_left != null) count += _left.CountLeaves();Di2015NewLine        if (_right != null) count += _right.CountLeaves();Di2015NewLine        return count;Di2015NewLine    }Di2015NewLine
406448Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinestatic class Program {Di2015NewLine    static IEnumerable<long> Fibonacci() {Di2015NewLine        long n = 0, m = 1;Di2015NewLineDi2015NewLine        yield return 0;Di2015NewLine        yield return 1;Di2015NewLine        while (true) {Di2015NewLine            long tmp = n + m;Di2015NewLine            n = m;Di2015NewLine            m = tmp;Di2015NewLine            yield return m;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main() {Di2015NewLine        foreach (long i in Fibonacci().Take(10)) {Di2015NewLine            Console.WriteLine(i);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
406448Di2015UniqueSeparatorSkip
406448Di2015UniqueSeparatorTake
406448Di2015UniqueSeparatorforeach (long i in Fibonacci().SkipWhile(x=>x < from).TakeWhile(x=>x <= to)) {...}Di2015NewLine
406502Di2015UniqueSeparatorfoo
406502Di2015UniqueSeparatorIEnumerable<byte>
406502Di2015UniqueSeparatorTake()
406502Di2015UniqueSeparatorUsing System.Linq
406502Di2015UniqueSeparatorbyte[] foo = new byte[4096];Di2015NewLineDi2015NewLinevar bar = foo.Take(41);Di2015NewLine
406502Di2015UniqueSeparatorIEnumerable<byte>
406502Di2015UniqueSeparatorToArray()
406603Di2015UniqueSeparatorpublic int HouseNumberDi2015NewLine{Di2015NewLine    get { return _houseNumber; }Di2015NewLine    set { _houseNumber = value; NotifyPropertyChanged("HouseNum"); }Di2015NewLine}Di2015NewLine
406603Di2015UniqueSeparatorpublic int HouseNumberDi2015NewLine{Di2015NewLine    get { return _houseNumber; }Di2015NewLine    set { _houseNumber = value; NotifyPropertyChanged("HouseNumber"); }Di2015NewLine}Di2015NewLine
406674Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var testA = new Foo<A>();Di2015NewLine        testA.Method();Di2015NewLine        var testB = new Foo<B>();Di2015NewLine        testB.Method();Di2015NewLine        Console.ReadLine();Di2015NewLine        var testString = new Foo<string>(); //FailsDi2015NewLine        testString.Method(); Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass A { }Di2015NewLineclass B { }Di2015NewLineclass BarDi2015NewLine{Di2015NewLine    public static void OverloadedMethod(Foo<A> a)Di2015NewLine    {Di2015NewLine        Console.WriteLine("A");Di2015NewLine    }Di2015NewLine    public static void OverloadedMethod(Foo<B> b)Di2015NewLine    {Di2015NewLine        Console.WriteLine("B");Di2015NewLine    }Di2015NewLine}Di2015NewLineclass Foo<T>Di2015NewLine{Di2015NewLine    static Foo()Di2015NewLine    {Di2015NewLine        overloaded = (Action<Foo<T>>)Delegate.CreateDelegate(typeof(Action<Foo<T>>), typeof(Bar).GetMethod("OverloadedMethod", new Type[] { typeof(Foo<T>) }));Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Method()Di2015NewLine    {Di2015NewLine        overloaded(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static readonly Action<Foo<T>> overloaded;Di2015NewLine}Di2015NewLine
406737Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class When_Presenter_LoadsDi2015NewLine{Di2015NewLine    private MockRepository mockRepository;Di2015NewLine    private ITableRepository tableRepository;Di2015NewLine    private IClass clazz;Di2015NewLine    private Dictionary<string, Type> properties;Di2015NewLine    private IClassGenerationView view;Di2015NewLine    private ClassGenerationPresenter presenter;Di2015NewLineDi2015NewLine    [SetUp]Di2015NewLine    public void Setup()Di2015NewLine    {Di2015NewLine        mockRepository =new MockRepository();Di2015NewLine        properties = new Dictionary<string, Type>();Di2015NewLineDi2015NewLine        clazz = mockRepository.DynamicMock<IClass>();Di2015NewLine        view = mockRepository.DynamicMock<IClassGenerationView>();Di2015NewLine        tableRepository = mockRepository.Stub<ITableRepository>();Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void View_Should_Display_Class_Properties()Di2015NewLine    {Di2015NewLine        using(mockRepository.Record())Di2015NewLine        {Di2015NewLine            SetupResult.For(clazz.Properties).Return(properties);Di2015NewLine            view.ClassProperties = properties;Di2015NewLine        }Di2015NewLineDi2015NewLine        using(mockRepository.Playback())Di2015NewLine        {Di2015NewLine            presenter = new ClassGenerationPresenter(view, clazz, tableRepository);Di2015NewLine            presenter.Load();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void View_Should_Display_Class_Name_As_A_Table_Name()Di2015NewLine    {Di2015NewLine        using (mockRepository.Record())Di2015NewLine        {Di2015NewLine            SetupResult.For(clazz.Name).Return("ClassName");Di2015NewLine            view.TableName = "ClassName";Di2015NewLine        }Di2015NewLineDi2015NewLine        using (mockRepository.Playback())Di2015NewLine        {Di2015NewLine            presenter = new ClassGenerationPresenter(view, clazz, tableRepository);Di2015NewLine            presenter.Load();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void View_Should_Display_SQL_Data_Types()Di2015NewLine    {Di2015NewLine        List<string> dataTypes = new List<string>();Di2015NewLineDi2015NewLine        using(mockRepository.Record())Di2015NewLine        {Di2015NewLine            SetupResult.For(tableRepository.GetDataTypes()).Return(dataTypes);Di2015NewLine            view.DataTypes = dataTypes;Di2015NewLine        }Di2015NewLineDi2015NewLine        using(mockRepository.Playback())Di2015NewLine        {Di2015NewLine            presenter = new ClassGenerationPresenter(view, clazz, tableRepository);Di2015NewLine            presenter.Load();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void View_Should_Show_Table()Di2015NewLine    {Di2015NewLine        using (mockRepository.Record())Di2015NewLine        {Di2015NewLine            SetupResult.For(clazz.Name).Return("ClassName");Di2015NewLine            view.Table = null;Di2015NewLine            LastCall.IgnoreArguments();Di2015NewLine        }Di2015NewLineDi2015NewLine        using (mockRepository.Playback())Di2015NewLine        {Di2015NewLine            presenter = new ClassGenerationPresenter(view, clazz, tableRepository);Di2015NewLine            presenter.Load();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
407148Di2015UniqueSeparatorThread.Sleep(TimeSpan.FromSeconds(10))Di2015NewLine
407197Di2015UniqueSeparatorList<rootClass> yourList = ...Di2015NewLineTypedListWrapper<rootClass> bindableList = new TypedListWrapper<rootClass>(yourList);Di2015NewLinebindableList.BindableProperties = "Value1;Value2.Description;Value3.Description";Di2015NewLinegridView1.DataSource = bindableList;Di2015NewLine
407197Di2015UniqueSeparatorTypedList<T>
407197Di2015UniqueSeparatorList<T>
407197Di2015UniqueSeparatoryourList.AddCalculatedProperty<Int32>("DescriptionLength",Di2015NewLine    delegate(rootClass rc)Di2015NewLine    {Di2015NewLine        return rc.Value2.Description.Length;Di2015NewLine    });Di2015NewLine
407197Di2015UniqueSeparatoryourList.AddCalculatedProperty<Int32>("DescriptionLength",Di2015NewLine    rc => rc.Value2.Description.Length);Di2015NewLine
407364Di2015UniqueSeparatorprop.SetValue(obj,null,null);Di2015NewLine
407566Di2015UniqueSeparatorStyle={DynamicResource MyStyle}Di2015NewLine
407594Di2015UniqueSeparator New With {.Name = "value"}Di2015NewLine
407606Di2015UniqueSeparatorCountNodes
407606Di2015UniqueSeparatorint count=1;Di2015NewLine
407606Di2015UniqueSeparatorint count = (root._left == null && root._right == null) ? 0 : 1;Di2015NewLine
407606Di2015UniqueSeparatorCountLeaves
407606Di2015UniqueSeparatorpublic int Height(TreeNode root)Di2015NewLine{Di2015NewLine    int height = 1;Di2015NewLine    if (root._left != null)Di2015NewLine        height = Math.Max(height, Height(root._left));Di2015NewLine    if (root._right != null)Di2015NewLine        height = Math.Max(height, Height(root._right));Di2015NewLine    return height;   Di2015NewLine}Di2015NewLine
407748Di2015UniqueSeparatorbool contained = !subset.Except(superset).Any();Di2015NewLine
407791Di2015UniqueSeparatorDi2015NewLineusing (DialogSettings dlgSettings = new DialogSettings)Di2015NewLine{Di2015NewLine  if (dlgSettings.ShowDialog() == DialogResult.OK)Di2015NewLine  {</p>Di2015NewLineDi2015NewLine<p>}Di2015NewLine}Di2015NewLine</pre>
407954Di2015UniqueSeparatorHttpContext.Current.Items
407954Di2015UniqueSeparatorpublic static class RequestScopedDataDi2015NewLine{Di2015NewLine    private const string key = "key_that_you_choose";Di2015NewLine    public static bool IsSavingDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            object o = HttpContext.Current.Items[key];Di2015NewLine            return Convert.ToBoolean(o);            Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            HttpContext.Current.Items[key] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
408008Di2015UniqueSeparatorpublic class SomeClassDi2015NewLine{Di2015NewLine    static void foo(int x) { }Di2015NewLine    static void foo(string s) { }Di2015NewLine    static void bar<T>(Action<T> f){}Di2015NewLine    static void barz(Action<int> f) { }Di2015NewLine    static void test()Di2015NewLine    {Di2015NewLine        Action<int> f = foo;Di2015NewLine        bar(f);Di2015NewLine        barz(foo);Di2015NewLine        bar(foo);Di2015NewLine        //these help the compiler to know which types to useDi2015NewLine        bar<int>(foo);Di2015NewLine        bar( (int i) => foo(i));Di2015NewLine    }Di2015NewLine}Di2015NewLine
408008Di2015UniqueSeparator  static void foo<T>(T x) { }Di2015NewLine  static void bar<T>(Action<T> f) { }Di2015NewLine  static void test()Di2015NewLine  {Di2015NewLine    bar(foo); //wut's T?Di2015NewLine  }Di2015NewLine
408313Di2015UniqueSeparatorusing
408327Di2015UniqueSeparatorMyObject
408327Di2015UniqueSeparatorEquals()
408327Di2015UniqueSeparatorGetHashCode()
408327Di2015UniqueSeparatorToString()
408327Di2015UniqueSeparatorIndexOf()
408327Di2015UniqueSeparatorToString()
408424Di2015UniqueSeparatorpublic clas SomeClass : IEnumerable<SomeOtherClass>Di2015NewLine{Di2015NewLine    public IEnumerator<SomeOtherClass> GetEnumerator ()Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerator IEnumerable.GetEnumerator ()Di2015NewLine    {Di2015NewLine        return GetEnumerator ();Di2015NewLine    }Di2015NewLine}Di2015NewLine
408494Di2015UniqueSeparatorEnumerable.Range
408494Di2015UniqueSeparatorGetIntRange
408494Di2015UniqueSeparatorEnumerable.Range
408494Di2015UniqueSeparatorpublic static class Enumerable {Di2015NewLine    public static IEnumerable<int> Range(int start, int count) {Di2015NewLine        var end = start + count;Di2015NewLine        for(var current = start; current < end; ++current) {Di2015NewLine            yield return current;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
408494Di2015UniqueSeparatorGetIntRange
408494Di2015UniqueSeparatorEnumerable.Range
408494Di2015UniqueSeparatorGetIntRange
408494Di2015UniqueSeparatorSystem.Linq.Enumerable.Range
408494Di2015UniqueSeparatorpublic static class Enumerable {Di2015NewLine    public static IEnumerable<int> Range(int start, int count) {Di2015NewLine        return new RangeEnumerable(start, count);Di2015NewLine    }Di2015NewLine    private class RangeEnumerable : IEnumerable<int> {Di2015NewLine        private int _Start;Di2015NewLine        private int _Count;Di2015NewLine        public RangeEnumerable(int start, int count) {Di2015NewLine            _Start = start;Di2015NewLine            _Count = count;Di2015NewLine        }Di2015NewLine        public virtual IEnumerator<int> GetEnumerator() {Di2015NewLine            return new RangeEnumerator(_Start, _Count);Di2015NewLine        }Di2015NewLine        IEnumerator IEnumerable.GetEnumerator() {Di2015NewLine            return GetEnumerator();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private class RangeEnumerator : IEnumerator<int> {Di2015NewLine        private int _Current;Di2015NewLine        private int _End;Di2015NewLine        public RangeEnumerator(int start, int count) {Di2015NewLine            _Current = start - 1;Di2015NewLine            _End = start + count;Di2015NewLine        }Di2015NewLine        public virtual void Dispose() {Di2015NewLine            _Current = _End;Di2015NewLine        }Di2015NewLine        public virtual void Reset() {Di2015NewLine            throw new NotImplementedException();Di2015NewLine        }Di2015NewLine        public virtual bool MoveNext() {Di2015NewLine            ++_Current;Di2015NewLine            return _Current < _End;Di2015NewLine        }Di2015NewLine        public virtual int Current { get { return _Current; } }Di2015NewLine        object IEnumerator.Current { get { return Current; } }Di2015NewLine    }Di2015NewLine}Di2015NewLine
408782Di2015UniqueSeparatorSystem.Media.SoundPlayer
408782Di2015UniqueSeparator    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        System.Media.SoundPlayer player = new System.Media.SoundPlayer();Di2015NewLine        player.SoundLocation = @"C:\\Windows\\Media\\chimes.wav";Di2015NewLine        player.Play();Di2015NewLine    }Di2015NewLine
408811Di2015UniqueSeparator<WrapPanel>Di2015NewLine    <Grid>Di2015NewLine        <Border BorderBrush="Gray" BorderThickness="1" Margin="3">Di2015NewLine            <Border BorderBrush="White" BorderThickness="3">Di2015NewLine                <Border BorderBrush="LightGray" BorderThickness="0.5">Di2015NewLine                    <Image Source="http://farm1.static.flickr.com/2/1703693_687c42c89f_s.jpg" Stretch="Uniform" />Di2015NewLine                </Border>Di2015NewLine            </Border>Di2015NewLine        </Border>Di2015NewLine        <Image Margin="5" HorizontalAlignment="Right" VerticalAlignment="Bottom" Source="http://l.yimg.com/g/images/flickr_logo_gamma.gif.v59899.14" Height="10" />Di2015NewLine    </Grid>Di2015NewLine</WrapPanel>Di2015NewLine
408918Di2015UniqueSeparatorVERSION2
408918Di2015UniqueSeparatorVERSION3
409008Di2015UniqueSeparatorpublic partial class Form1 : Form, System.ComponentModel.INotifyPropertyChangedDi2015NewLine{Di2015NewLine    //----------- implements INotifyPropertyChanged -----------Di2015NewLineDi2015NewLineDi2015NewLine    // wish C# has this VB.NET's syntactic sugarDi2015NewLine    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged; // implements INotifyPropertyChanged.PropertyChanged Di2015NewLineDi2015NewLine    //----------- start of Form1  ----------Di2015NewLineDi2015NewLineDi2015NewLine    DataSet _ds = new DataSet();Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    void NotifyPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    void GetData()Di2015NewLine    {Di2015NewLineDi2015NewLine        var t = new DataTableDi2015NewLine        {Di2015NewLine            TableName = "beatles",Di2015NewLine            Columns =Di2015NewLine            {Di2015NewLine                {"lastname", typeof(string)},Di2015NewLine                {"firstname", typeof(string)},Di2015NewLine                {"middlename", typeof(string)}Di2015NewLine            }Di2015NewLine        };Di2015NewLineDi2015NewLineDi2015NewLine        t.Rows.Add("Lennon", "John", "Winston");Di2015NewLine        t.Rows.Add("McCartney", "James", "Paul");Di2015NewLineDi2015NewLine        t.Columns["middlename"].DefaultValue = "";Di2015NewLineDi2015NewLine        _ds.Tables.Add(t);            Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    string _hey = "";Di2015NewLine    public string Hey Di2015NewLine    { Di2015NewLine        set Di2015NewLine        {Di2015NewLine            if (value != _hey)Di2015NewLine            {Di2015NewLine                _hey = value;Di2015NewLine                NotifyPropertyChanged("Hey");Di2015NewLine            }Di2015NewLine        } Di2015NewLine        get Di2015NewLine        {                Di2015NewLineDi2015NewLine            return _hey;  Di2015NewLine        } Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        var tLastname = new TextBox { Top = 100 };Di2015NewLine        var tFirstname = new TextBox { Top = 130 };Di2015NewLineDi2015NewLine        this.Controls.Add(tLastname);Di2015NewLine        this.Controls.Add(tFirstname);Di2015NewLineDi2015NewLine        GetData();Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        tLastname.DataBindings.Add("Text", _ds.Tables["beatles"], "lastname");Di2015NewLine        tFirstname.DataBindings.Add("Text", _ds.Tables["beatles"], "firstname");Di2015NewLineDi2015NewLine        this.DataBindings.Add("Hey", _ds.Tables["beatles"], "middlename");Di2015NewLineDi2015NewLineDi2015NewLine        _ds.AcceptChanges();Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        MessageBox.Show("1st:Has Changes = " + _ds.HasChanges().ToString());Di2015NewLineDi2015NewLine        var bDetectChanges = new Button { Top = 160, Text = "Detect Changes" };Di2015NewLine        bDetectChanges.Click +=Di2015NewLine            delegateDi2015NewLine            {Di2015NewLine                this.BindingContext[_ds.Tables["beatles"]].EndCurrentEdit();Di2015NewLine                MessageBox.Show("2nd:Has Changes = " + (_ds.GetChanges() != null).ToString());Di2015NewLineDi2015NewLine            };Di2015NewLineDi2015NewLine        this.Controls.Add(bDetectChanges);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
409040Di2015UniqueSeparator        DriveInfo di = new DriveInfo("f");  //Put your mobile drive nameDi2015NewLine        long totalBytes = di.TotalSize;Di2015NewLine        long freeBytes = di.TotalFreeSpace;Di2015NewLine
409143Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine  [DllImport("coredll.dll", SetLastError=true, CharSet=CharSet.Auto)]Di2015NewLine  [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine  internal static extern bool GetDiskFreeSpaceEx(string lpDirectoryName,Di2015NewLine    out ulong lpFreeBytesAvailable,Di2015NewLine    out ulong lpTotalNumberOfBytes,Di2015NewLine    out ulong lpTotalNumberOfFreeBytes);Di2015NewLine}Di2015NewLine
409143Di2015UniqueSeparatorulong GetDiskSize(string volumeName)Di2015NewLine{Di2015NewLine  ulong avail;Di2015NewLine  ulong total;Di2015NewLine  ulong totalfree;Di2015NewLineDi2015NewLine  MyClass.GetDiskFreeSpaceEx(volumeName, out avail, out total, out totalFree);Di2015NewLineDi2015NewLine  return total;Di2015NewLine  // return others as desiredDi2015NewLine}Di2015NewLine
409143Di2015UniqueSeparatorulong diskSize = GetDiskSize("\\\\Storage Card");Di2015NewLine
409238Di2015UniqueSeparatorbool contains = Array.IndexOf(arr, value) >= 0;Di2015NewLine
409238Di2015UniqueSeparatorbool contains = arr.Contains(value);Di2015NewLine
409322Di2015UniqueSeparatorFolderInfo = (CONADefinitions.CONAPI_FOLDER_INFO)Marshal.PtrToStructure(Buffer, typeof(CONADefinitions.CONAPI_FOLDER_INFO));Di2015NewLineif (FolderInfo.pstrName[0].ToString() != "C" && level == 0) Di2015NewLine{Di2015NewLine  ulong FreeBytesAvailable;Di2015NewLine  ulong TotalNumberOfBytes;Di2015NewLine  ulong TotalNumberOfFreeBytes;Di2015NewLineDi2015NewLine  bool success = GetDiskFreeSpaceEx("C:\\\\", out FreeBytesAvailable, out TotalNumberOfBytes,out TotalNumberOfFreeBytes);Di2015NewLineDi2015NewLine  if (!success)Di2015NewLine    throw new System.ComponentModel.Win32Exception();Di2015NewLine}Di2015NewLine
409322Di2015UniqueSeparator[DllImport("coredll.dll", SetLastError=true, CharSet=CharSet.Auto, EntryPoint="GetDiskFreeSpaceEx")]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLinestatic extern bool InternalGetDiskFreeSpaceEx(string lpDirectoryName, out ulong lpFreeBytesAvailable, out ulong lpTotalNumberOfBytes, out ulong lpTotalNumberOfFreeBytes);Di2015NewLineDi2015NewLinestatic GetDiskFreeSpaceEx(string directoryName, out ulong freeBytesAvailable, out ulong totalNumberOfBytes, out totalNumberOfFreeBytes);Di2015NewLine{Di2015NewLine  if (!GetDiskFreeSpaceEx(directoryName, out freeBytesAvailable, out totalNumberOfBytes, out totalNumberOfFreeBytes))Di2015NewLine    throw new System.ComponentModel.Win32Exception();Di2015NewLine}Di2015NewLine
409322Di2015UniqueSeparatorFolderInfo = (CONADefinitions.CONAPI_FOLDER_INFO)Marshal.PtrToStructure(Buffer, typeof(CONADefinitions.CONAPI_FOLDER_INFO));Di2015NewLineif (FolderInfo.pstrName[0].ToString() != "C" && level == 0) Di2015NewLine{Di2015NewLine  ulong FreeBytesAvailable;Di2015NewLine  ulong TotalNumberOfBytes;Di2015NewLine  ulong TotalNumberOfFreeBytes;Di2015NewLineDi2015NewLine  GetDiskFreeSpaceEx("C:\\\\", out FreeBytesAvailable, out TotalNumberOfBytes,out TotalNumberOfFreeBytes);Di2015NewLine}Di2015NewLine
409681Di2015UniqueSeparatorpublic string DisplayValueDi2015NewLine{Di2015NewLine get { return string.Format("{0} ({1})", Name, Zip); }Di2015NewLine}Di2015NewLine
409681Di2015UniqueSeparatorList<MyObject> myList = getObjects();Di2015NewLineddList.DataSource = (from obj in myListDi2015NewLine                    select newDi2015NewLine                    {Di2015NewLine                      Id = obj.Id,Di2015NewLine                      Name = string.Format("{0} ({1})", obj.Name, obj.Zip)Di2015NewLine                    }).ToList();Di2015NewLineddList.DataValueField = "Id";Di2015NewLineddList.DataTextField = "Name";Di2015NewLineddList.DataBind();Di2015NewLine
410041Di2015UniqueSeparatorTcpListener listener = new TcpListener(IPAddress.Any, port);Di2015NewLineTcpClient client = listener.AcceptTcpClient();Di2015NewLineDi2015NewLineIPEndPoint endPoint = (IPEndPoint) client.Client.RemoteEndPoint;Di2015NewLine// .. or LocalEndPoint - depending on which end you want to identifyDi2015NewLineDi2015NewLineIPAddress ipAddress = endPoint.Address;Di2015NewLineDi2015NewLine// get the hostnameDi2015NewLineIPHostEntry hostEntry = Dns.GetHostEntry(ipAddress);Di2015NewLinestring hostName = hostEntry.HostName;Di2015NewLineDi2015NewLine// get the portDi2015NewLineint port = endPoint.Port;Di2015NewLine
410230Di2015UniqueSeparatorif (object is IBlah)Di2015NewLine
410230Di2015UniqueSeparatorIBlah myTest = originalObject as IBlahDi2015NewLineDi2015NewLineif (myTest != null)Di2015NewLine
410274Di2015UniqueSeparator.SyncRoot
410274Di2015UniqueSeparatorGeneric.Dictionary<int, int> dic = new Generic.Dictionary<int, int>();Di2015NewLineDi2015NewLinelock (((IDictionary)dic).SyncRoot)Di2015NewLine{Di2015NewLine    // codeDi2015NewLine}Di2015NewLine
410332Di2015UniqueSeparatoropen master file for reading.Di2015NewLinecount := 0Di2015NewLinewhile not EOF doDi2015NewLine    read line from master file into bufferDi2015NewLine    write line to output file    Di2015NewLine    count := count + 1Di2015NewLine    if count = 5 thenDi2015NewLine       write added line to output fileDi2015NewLine    fiDi2015NewLineodDi2015NewLinerename output file to replace input fileDi2015NewLine
410446Di2015UniqueSeparator  using (ZipFile zip = new ZipFile())Di2015NewLine  {Di2015NewLine    zip.AddFile("ReadMe.txt"); // no password for this entryDi2015NewLineDi2015NewLine    // use a password for subsequent entriesDi2015NewLine    zip.Password= "This.Encryption.is.FIPS.197.Compliant!";Di2015NewLine    zip.Encryption= EncryptionAlgorithm.WinZipAes256;Di2015NewLine    zip.AddFile("Rawdata-2008-12-18.csv");Di2015NewLine    zip.Save("Backup-AES-Encrypted.zip");Di2015NewLine  }Di2015NewLine
410505Di2015UniqueSeparatorforeach(object itemChecked in checkedListBox1.CheckedItems)Di2015NewLine{Di2015NewLine    MyItem item = itemChecked as MyItem;Di2015NewLineDi2015NewLine    if (item != null)Di2015NewLine    {Di2015NewLine       // use item...Di2015NewLine    } Di2015NewLine}Di2015NewLine
410684Di2015UniqueSeparatorStack<byte>
410748Di2015UniqueSeparator.cctor
410748Di2015UniqueSeparatorsomeField = "abc";Di2015NewLine
410748Di2015UniqueSeparator"abc"
410748Di2015UniqueSeparatorldstr
410778Di2015UniqueSeparatorprivate static readonly EscapeString = EscapeChar.ToString();Di2015NewLine
410790Di2015UniqueSeparatorvar arr = obj.myObj; // var since I don't know the type!Di2015NewLinefor (int i = 0; i < arr.Length; i++) {Di2015NewLine  DoSomething(arr[i]);Di2015NewLine}Di2015NewLine
410790Di2015UniqueSeparatorforeach
410790Di2015UniqueSeparatorforeach(var value in obj.myObj) {Di2015NewLine  DoSomething(value);Di2015NewLine}Di2015NewLine
410790Di2015UniqueSeparatorobj.SomeMethod()
410790Di2015UniqueSeparatorobj.Foo != obj.Foo
411104Di2015UniqueSeparatorpublic String GetShortXml(){ ... }Di2015NewLinepublic String GetFullXml(){ ... }Di2015NewLinepublic String GetCsv(){ ... }Di2015NewLinepublic String GetJson(){ ... }Di2015NewLine
411104Di2015UniqueSeparatorpublic interface IFormattable {Di2015NewLine    public String Format(IFormatter formatter);Di2015NewLine}Di2015NewLine
411104Di2015UniqueSeparatorpublic String Format(IFormatter formatter){Di2015NewLine    return formatter.FormatBusinessObjectOne(this);Di2015NewLine}Di2015NewLine
411104Di2015UniqueSeparatorpublic interface IFormatter{Di2015NewLine    public String FormatBuisinessObjectOne(BusinessObjectOne boo);Di2015NewLine    public String FormatBuisinessObjectTwo(BusinessObjectTwo bot);Di2015NewLine    ...Di2015NewLine}Di2015NewLine
411104Di2015UniqueSeparatorIFormatter formatter = new XmlFormatter();Di2015NewLineBusinessObjectOne boo = new BusinessObjectOne(...);Di2015NewLineDi2015NewLine// With visitor like double dispatchDi2015NewLineString xml = boo.Format(formatter);Di2015NewLineDi2015NewLine// Without Di2015NewLineString xml = formatter.FormatBusinessObjectOne(boo);Di2015NewLineDi2015NewLine// With overloadingDi2015NewLineString xml = formatter.Format(boo);Di2015NewLine
411280Di2015UniqueSeparator[Id]Di2015NewLine
411280Di2015UniqueSeparator[Id(Name="Id")]Di2015NewLine
411280Di2015UniqueSeparator<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2">Di2015NewLine  <class name="Test.EntityA, test">Di2015NewLine    <id type="Guid">Di2015NewLine      <generator class="guid" />Di2015NewLine    </id>Di2015NewLine  </class>Di2015NewLine</hibernate-mapping>Di2015NewLine
411280Di2015UniqueSeparator<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2">Di2015NewLine  <class name="Test.EntityA, test">Di2015NewLine    <id type="Guid" name="Id">Di2015NewLine      <generator class="guid" />Di2015NewLine    </id>Di2015NewLine  </class>Di2015NewLine</hibernate-mapping>Di2015NewLine
411332Di2015UniqueSeparatorclass MyUserControlDi2015NewLine{Di2015NewLine  // expose the Text of the richtext control (read-only)Di2015NewLine  public string TextOfRichTextBoxDi2015NewLine  {Di2015NewLine    get { return richTextBox.Text; }Di2015NewLine  }Di2015NewLine  // expose the Checked Property of a checkbox (read/write)Di2015NewLine  public bool CheckBoxPropertyDi2015NewLine  {Di2015NewLine    get { return checkBox.Checked; }Di2015NewLine    set { checkBox.Checked = value; }Di2015NewLine  }Di2015NewLineDi2015NewLineDi2015NewLine  //...Di2015NewLine}Di2015NewLine
411446Di2015UniqueSeparator"\\\\.\\PHYSICALDRIVE0"
411508Di2015UniqueSeparatorIEquatable<T>
411508Di2015UniqueSeparatorObject::Equals(Object)
411508Di2015UniqueSeparatorGetHashCode()
411508Di2015UniqueSeparatorIEquatable<T>::Equals
411508Di2015UniqueSeparatorObject::Equals(Object)
411508Di2015UniqueSeparatorEquals(System.Object, System.Object)
411508Di2015UniqueSeparatorEquals()
411586Di2015UniqueSeparatorpublic static Func<TResult> Apply<TResult, TArg> (Func<TArg, TResult> func, TArg arg)Di2015NewLine{Di2015NewLine    return () => func(arg);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static Func<TResult> Apply<TResult, TArg1, TArg2> (Func<TArg1, TArg2, TResult> func,Di2015NewLine                                                          TArg1 arg1, TArg2 arg2)Di2015NewLine{Di2015NewLine    return () => func(arg1, arg2);Di2015NewLine}Di2015NewLineDi2015NewLine// etcDi2015NewLine
411586Di2015UniqueSeparatorDoSomething(Apply(foo, 1));Di2015NewLine
411597Di2015UniqueSeparatorpublic delegate void Action1();Di2015NewLinepublic delegate void Action2();Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineDelegate x = () => Console.WriteLine("hi");Di2015NewLine
411597Di2015UniqueSeparatorx
411597Di2015UniqueSeparatorControl.Invoke
411597Di2015UniqueSeparatorAction
411597Di2015UniqueSeparatorpublic static void Invoke(this Control control, Action action)Di2015NewLine{Di2015NewLine    control.Invoke((Delegate) action);Di2015NewLine}Di2015NewLine
411665Di2015UniqueSeparatorViewData.Model.CanEditDi2015NewLine
411665Di2015UniqueSeparatorpublic class ProductViewDataDi2015NewLine{Di2015NewLine    public Product Product {get; set;}Di2015NewLine    public bool CanEdit {get; set;}Di2015NewLine}Di2015NewLine
411762Di2015UniqueSeparatorstring tabs = new String('\\t', n);Di2015NewLine
411762Di2015UniqueSeparatorstatic string Tabs(int n)Di2015NewLine{Di2015NewLine    return new String('\\t', n);Di2015NewLine}Di2015NewLine
411903Di2015UniqueSeparatorBase Class
411903Di2015UniqueSeparator<Database EntityBase="Some.NameSpace.Foo" ... >Di2015NewLine
411903Di2015UniqueSeparator<Database BaseType="Some.NameSpace.Bar" ... >Di2015NewLine
411903Di2015UniqueSeparatorLastUpdated
411903Di2015UniqueSeparatorUpdatedBy
411903Di2015UniqueSeparatorIAuditable
411903Di2015UniqueSeparatorSubmitChanges
411903Di2015UniqueSeparatorGetChangeSet()
411903Di2015UniqueSeparatorIAuditable
412027Di2015UniqueSeparatorpublic static float Sigmoid(double value) {Di2015NewLine    return 1.0f / (1.0f + (float) Math.Exp(-value));Di2015NewLine}Di2015NewLine
412027Di2015UniqueSeparatorpublic static float Sigmoid(double value) {Di2015NewLine    float k = Math.Exp(value);Di2015NewLine    return k / (1.0f + k);Di2015NewLine}Di2015NewLine
412027Di2015UniqueSeparator#include <math.h>
412027Di2015UniqueSeparatorpublic static float Sigmoid(double value) {Di2015NewLine    float k = expf((float) value);Di2015NewLine    return k / (1.0f + k);Di2015NewLine}Di2015NewLine
412031Di2015UniqueSeparatorthis.Hide();Di2015NewLinevar t = new System.Windows.Forms.TimerDi2015NewLine{Di2015NewLine    Interval = 3000 // however long you want to hide forDi2015NewLine};Di2015NewLinet.Tick += (x, y) => { t.Enabled = false; this.Show(); };Di2015NewLinet.Enabled = true;Di2015NewLine
412160Di2015UniqueSeparator var textBox = this.Controls.Find("textBx" + i, true) as TextBox;Di2015NewLine textBox.Text = list[i].ToString();Di2015NewLine
412160Di2015UniqueSeparatorvar textBoxes = new[] { textBx1, textBx2, textBx3 };Di2015NewLine
412160Di2015UniqueSeparatortextBoxes[i].Text = list[i].ToString();Di2015NewLine
412337Di2015UniqueSeparatorpublic ActionResult Search(int isbdn)Di2015NewLine    {Di2015NewLine        ViewData["ISBN"] = isbdn;Di2015NewLine        string pathToXml= "http://isbndb.com/api/books.xml?access_key=DWD3TC34&index1=isbn&value1=";Di2015NewLine        pathToXml += isbdn;Di2015NewLine        var doc = XDocument.Load(pathToXml);Di2015NewLine        IEnumerable<XElement> items = from m in doc.Elements()Di2015NewLine                    select m;Di2015NewLinereturn view(m);Di2015NewLine}Di2015NewLine
412337Di2015UniqueSeparatorViewPage < IEnumerable<XElement>>Di2015NewLine
412337Di2015UniqueSeparatorIEnumerable<XElement>
412549Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    private readonly Mixin1 mixin1 = new Mixin1();Di2015NewLine    private readonly Mixin2 mixin2 = new Mixin2();Di2015NewLineDi2015NewLine    public int Property1Di2015NewLine    {Di2015NewLine        get { return this.mixin1.Property1; }Di2015NewLine        set { this.mixin1.Property1 = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Do1()Di2015NewLine    {Di2015NewLine        this.mixin2.Do2();Di2015NewLine    }Di2015NewLine}Di2015NewLine
412549Di2015UniqueSeparatorinterface IMixin1Di2015NewLine{Di2015NewLine    int Property1 { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineinterface IMixin2Di2015NewLine{Di2015NewLine    void Do2();Di2015NewLine}Di2015NewLineDi2015NewLineclass MyClass : IMixin1, IMixin2Di2015NewLine{Di2015NewLine    // implementation same as beforeDi2015NewLine}Di2015NewLine
412644Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineDi2015NewLineclass Info {Di2015NewLine    public static void Main() {Di2015NewLine        DriveInfo[] drives = DriveInfo.GetDrives();Di2015NewLine        foreach (DriveInfo drive in drives) {Di2015NewLine            //There are more attributes you can use.Di2015NewLine            //Check the MSDN link for a complete example.Di2015NewLine            Console.WriteLine(drive.Name);Di2015NewLine            if (drive.IsReady) Console.WriteLine(drive.TotalSize);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
412821Di2015UniqueSeparatorList<T>
412974Di2015UniqueSeparatorHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSDTC\\SecurityDi2015NewLine
413088Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine  <xsl:output method="xml" indent="no" encoding="UTF-8"/>Di2015NewLineDi2015NewLine  <xsl:template match="/|comment()|processing-instruction()">Di2015NewLine    <xsl:copy>Di2015NewLine      <xsl:apply-templates/>Di2015NewLine    </xsl:copy>Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine  <xsl:template match="*">Di2015NewLine    <xsl:element name="{local-name()}">Di2015NewLine      <xsl:apply-templates select="@*|node()"/>Di2015NewLine    </xsl:element>Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine  <xsl:template match="@*">Di2015NewLine    <xsl:attribute name="{local-name()}">Di2015NewLine      <xsl:value-of select="."/>Di2015NewLine    </xsl:attribute>Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine</xsl:stylesheet>Di2015NewLine
413106Di2015UniqueSeparatorforeach
413106Di2015UniqueSeparatorDispose
413106Di2015UniqueSeparatorIDisposable
413217Di2015UniqueSeparatorPrivate tags() As KeywordTag = { _Di2015NewLine    New KeywordTag() WITH {.Tag = test", .IncidentCount = 2076}, _Di2015NewLine    New KeywordTag() WITH {.Tag = "oi", .IncidentCount = 2052}, _Di2015NewLine    New KeywordTag() WITH {.Tag = "hmm", .IncidentCount = 1887}, _Di2015NewLine    New KeywordTag() WITH {.Tag = "grr", .IncidentCount = 1414}, _Di2015NewLine    New KeywordTag() WITH {.Tag = "thanks", .IncidentCount = 1166} _Di2015NewLine    }Di2015NewLine
413236Di2015UniqueSeparatorout
413236Di2015UniqueSeparatorout
413236Di2015UniqueSeparatorout
413277Di2015UniqueSeparatoraa
413277Di2015UniqueSeparatoraa == null
413277Di2015UniqueSeparatoraa
413277Di2015UniqueSeparatorxx
413277Di2015UniqueSeparatorxx
413277Di2015UniqueSeparatoraa
413277Di2015UniqueSeparatorselect new {Di2015NewLine    AssetID = x.AssetID,Di2015NewLine    Status = aa == null ? (bool?)null : aa.Online; // a Nullable<bool>Di2015NewLine}Di2015NewLine
413277Di2015UniqueSeparatorfalse
413277Di2015UniqueSeparatornull
413277Di2015UniqueSeparatorselect new {Di2015NewLine    AssetID = x.AssetID,Di2015NewLine    Status = aa == null ? false : aa.Online;Di2015NewLine}Di2015NewLine
413277Di2015UniqueSeparator        using(var ctx = new DataClasses1DataContext())Di2015NewLine        {Di2015NewLine            ctx.Log = Console.Out;Di2015NewLine            var qry = from boss in ctx.EmployeesDi2015NewLine                      join grunt in ctx.EmployeesDi2015NewLine                          on boss.EmployeeID equals grunt.ReportsTo into treeDi2015NewLine                      from tmp in tree.DefaultIfEmpty()Di2015NewLine                      select newDi2015NewLine                             {Di2015NewLine                                 ID = boss.EmployeeID,Di2015NewLine                                 Name = tmp == null ? "" : tmp.FirstNameDi2015NewLine                        };Di2015NewLine            foreach(var row in qry)Di2015NewLine            {Di2015NewLine                Console.WriteLine("{0}: {1}", row.ID, row.Name);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
413277Di2015UniqueSeparatorISNULL
413277Di2015UniqueSeparatorSELECT [t0].[EmployeeID] AS [ID],Di2015NewLine    (CASEDi2015NewLine        WHEN [t2].[test] IS NULL THEN CONVERT(NVarChar(10),@p0)Di2015NewLine        ELSE [t2].[FirstName]Di2015NewLine     END) AS [Name]Di2015NewLineFROM [dbo].[Employees] AS [t0]Di2015NewLineLEFT OUTER JOIN (Di2015NewLine    SELECT 1 AS [test], [t1].[FirstName], [t1].[ReportsTo]Di2015NewLine    FROM [dbo].[Employees] AS [t1]Di2015NewLine    ) AS [t2] ON ([t0].[EmployeeID]) = [t2].[ReportsTo]Di2015NewLine-- @p0: Input NVarChar (Size = 0; Prec = 0; Scale = 0) []Di2015NewLine-- Context: SqlProvider(Sql2008) Model: AttributedMetaModel Build: 3.5.30729.1Di2015NewLine
413373Di2015UniqueSeparatorstring a = "foo";Di2015NewLinea.Replace("foo", "bar");Di2015NewLineConsole.WriteLine(a);Di2015NewLine
413486Di2015UniqueSeparator ViewData["data"] = data;Di2015NewLine
413486Di2015UniqueSeparator ViewData.Model = data;Di2015NewLine
413486Di2015UniqueSeparator <% foreach (dataob m in ViewData.Model) { %>Di2015NewLine    <tr> Di2015NewLine        <td><%= m.Id %></td>Di2015NewLine        <td><%= m.user %></td>Di2015NewLine        <td><%= m.Date %></td>Di2015NewLine    </tr>Di2015NewLine <% } %>Di2015NewLine
413671Di2015UniqueSeparatorList<int> nums = new List<int>(3); // creates a resizable arrayDi2015NewLine                                   // which can hold 3 elementsDi2015NewLineDi2015NewLinenums.Add(1);Di2015NewLine// adds item in O(1). nums.Capacity = 3, nums.Count = 1Di2015NewLineDi2015NewLinenums.Add(2);Di2015NewLine// adds item in O(1). nums.Capacity = 3, nums.Count = 3Di2015NewLineDi2015NewLinenums.Add(3);Di2015NewLine// adds item in O(1). nums.Capacity = 3, nums.Count = 3Di2015NewLineDi2015NewLinenums.Add(4);Di2015NewLine// adds item in O(n). Lists doubles the size of our internal array, soDi2015NewLine// nums.Capacity = 6, nums.count = 4Di2015NewLine
413686Di2015UniqueSeparatorprivate StringBuilder _myStringBuilder;Di2015NewLineDi2015NewLinepublic string MyTextDi2015NewLine{Di2015NewLine  get { return _myStringBuilder.ToString(); }Di2015NewLine}Di2015NewLine
413702Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.notifyIcon1.BalloonTipText = "Whatever";Di2015NewLine            this.notifyIcon1.BalloonTipTitle = "Title";Di2015NewLine            this.notifyIcon1.Icon = new Icon("icon.ico");Di2015NewLine            this.notifyIcon1.Visible = true;Di2015NewLine            this.notifyIcon1.ShowBalloonTip(3);Di2015NewLine        }Di2015NewLine
413753Di2015UniqueSeparatorprivate static readonly ICollection<string> Strings = Di2015NewLine  new string[] { "Hello", "World" };Di2015NewLine
413753Di2015UniqueSeparatorprivate static readonly ICollection<string> Strings = Di2015NewLine  new[] { "Hello", "World" };Di2015NewLine
413753Di2015UniqueSeparatorprivate static readonly ICollection<string> Strings = Di2015NewLine  new List<string>() { "Hello", "World" };Di2015NewLine
413753Di2015UniqueSeparator((List<string>)Strings).ForEach(Console.WriteLine);Di2015NewLine
413760Di2015UniqueSeparatorif(myClass = null) /* accident, sets myClass to null instead of comparing */Di2015NewLine
413760Di2015UniqueSeparatorif(null = myClass) /* throws an error at compile time */Di2015NewLine
413864Di2015UniqueSeparatorFunc<T>
413864Di2015UniqueSeparatorAction<T>
413966Di2015UniqueSeparator<configuration>Di2015NewLine    <system.serviceModel>Di2015NewLine        <services>Di2015NewLine            <service name="YourService">Di2015NewLine                <endpoint address="http://MyServer:8000/..."Di2015NewLine                          binding="BasicHttpBinding"Di2015NewLine                          contract="Your.IContract" />Di2015NewLine            </service>Di2015NewLine        </services>Di2015NewLine    </system.serviceModel>Di2015NewLine</configuration>Di2015NewLine
413966Di2015UniqueSeparator<configuration>Di2015NewLine    <system.serviceModel>Di2015NewLine        <client>Di2015NewLine            <endpoint address="http://MyServer:8000/..."Di2015NewLine                      binding="BasicHttpBinding"Di2015NewLine                      contract="Your.IContract"Di2015NewLine                      name="ClientEndpoint" />Di2015NewLine        </client>Di2015NewLine    </system.serviceModel>Di2015NewLine</configuration>Di2015NewLine
414000Di2015UniqueSeparatortryDi2015NewLine{   Di2015NewLine    real code // throws SomeExceptionDi2015NewLine    real code // throws SomeOtherExceptionDi2015NewLine}Di2015NewLinecatch(SomeException se)Di2015NewLine{Di2015NewLine    // explain your error handling choice if it's not obviousDi2015NewLine}Di2015NewLinecatch(SomeOtherException soe)Di2015NewLine{Di2015NewLine    // explain your error handling choice if it's not obviousDi2015NewLine}Di2015NewLine
414271Di2015UniqueSeparator// clicked OK, should I call SaveSettings() here?Di2015NewLine
414314Di2015UniqueSeparatorNullable<int> or int?
414315Di2015UniqueSeparatorvar query = from e in linq0Di2015NewLine            select newDi2015NewLine            {Di2015NewLine                Id = e.Id,Di2015NewLine                CommentText = e.CommentText,Di2015NewLine                UserId = e.UserId,Di2015NewLine                User = (e.User.FirstName + " " + e.User.LastName).Trim()),Di2015NewLine                Date = e.Date.ToString("d")Di2015NewLine            } into anonDi2015NewLine            orderby anon.User descendingDi2015NewLine            select anon;Di2015NewLine
414411Di2015UniqueSeparatorRegex
414411Di2015UniqueSeparatorIsMatch
414411Di2015UniqueSeparatorpublic static bool IsMatch(string input, string pattern){Di2015NewLine    return new Regex(pattern, RegexOptions.None, true).IsMatch(input);Di2015NewLine}Di2015NewLine
414411Di2015UniqueSeparatortrue
414411Di2015UniqueSeparatorIsMatch
414411Di2015UniqueSeparatorIsMatch
414411Di2015UniqueSeparatorpublic static bool IsMatch(string input, string pattern){Di2015NewLine    return new Regex(pattern).IsMatch(input);Di2015NewLine}Di2015NewLine
414411Di2015UniqueSeparatorRegex
414411Di2015UniqueSeparatorIsMatch
414411Di2015UniqueSeparatorRegex
414411Di2015UniqueSeparatorRegex
414411Di2015UniqueSeparatorRegexOptions.Compiled
414411Di2015UniqueSeparatorconst int count = 10000;Di2015NewLineDi2015NewLinestring pattern = "^[a-z]+[0-9]+$";Di2015NewLinestring input   = "abc123";Di2015NewLineDi2015NewLineStopwatch sw = Stopwatch.StartNew();Di2015NewLinefor(int i = 0; i < count; i++)Di2015NewLine    Regex.IsMatch(input, pattern);Di2015NewLineConsole.WriteLine("static took {0} seconds.", sw.Elapsed.TotalSeconds);Di2015NewLineDi2015NewLinesw.Reset();Di2015NewLinesw.Start();Di2015NewLineRegex rx = new Regex(pattern);Di2015NewLinefor(int i = 0; i < count; i++)Di2015NewLine    rx.IsMatch(input);Di2015NewLineConsole.WriteLine("instance took {0} seconds.", sw.Elapsed.TotalSeconds);Di2015NewLineDi2015NewLinesw.Reset();Di2015NewLinesw.Start();Di2015NewLinerx = new Regex(pattern, RegexOptions.Compiled);Di2015NewLinefor(int i = 0; i < count; i++)Di2015NewLine    rx.IsMatch(input);Di2015NewLineConsole.WriteLine("compiled took {0} seconds.", sw.Elapsed.TotalSeconds);Di2015NewLine
414411Di2015UniqueSeparatorcount = 10000
414411Di2015UniqueSeparatorcount
414411Di2015UniqueSeparator100000
414481Di2015UniqueSeparatorFoo.SomeType
414481Di2015UniqueSeparatorBar.SomeType
414481Di2015UniqueSeparatorusing Foo;
414481Di2015UniqueSeparatorusing Bar;
414481Di2015UniqueSeparatorSomeType
414481Di2015UniqueSeparatorusing
414524Di2015UniqueSeparatorResponse.Redirect("nextpage.asp", false);Di2015NewLine
414580Di2015UniqueSeparator"foo|bar"
414580Di2015UniqueSeparator"([fg]oo|[bt]ar)"
414580Di2015UniqueSeparatorGroups
414580Di2015UniqueSeparatorMatch
414580Di2015UniqueSeparatorGroups[1]
414580Di2015UniqueSeparatorGroups[0]
414580Di2015UniqueSeparator"(?<word>[fg]oo|[bt]ar)"
414580Di2015UniqueSeparatorGroups["word"]
414638Di2015UniqueSeparatorpublic class LinkedListWithInit<T> : LinkedList<T>Di2015NewLine{Di2015NewLine    public void Add( T item )Di2015NewLine    {Di2015NewLine        ((ICollection<T>)this).Add(item);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineLinkedList<int> list = new LinkedListWithInit<int> { 1, 2, 3, 4, 5 };Di2015NewLine
414661Di2015UniqueSeparator<appSettings configSource="config\\endpoints.xml"/>Di2015NewLine
414755Di2015UniqueSeparatorpublic class EventBuilderDi2015NewLine{Di2015NewLine    private static RoutedEventHandler _buttonClickHandler;Di2015NewLineDi2015NewLine    public EventBuilder(RoutedEventHandler buttonClickHandler)Di2015NewLine    {Di2015NewLine        _buttonClickHandler = buttonClickHandler;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void EnableClickEvent()Di2015NewLine    {Di2015NewLine        myButton.Click += new RoutedEventHandler(_buttonClickHandler);Di2015NewLine    }Di2015NewLine}Di2015NewLine
414790Di2015UniqueSeparatorZipFile zFile = new ZipFile(myZipFileName);Di2015NewLinelong uSize = 0;Di2015NewLineforeach (ZipEntry e in zFile) {Di2015NewLine    if ( e.IsFile ) {Di2015NewLine        uSize += e.Size;Di2015NewLine    }Di2015NewLine}Di2015NewLine
414865Di2015UniqueSeparator#include "stdafx.h"Di2015NewLine#include <iostream>Di2015NewLineDi2015NewLineclass Base {Di2015NewLineprivate:Di2015NewLine    virtual void Method() = 0;Di2015NewLinepublic:Di2015NewLine    void Test() {Di2015NewLine        Method();Di2015NewLine    }Di2015NewLine};Di2015NewLineclass Derived : public Base {Di2015NewLineprivate:Di2015NewLine    void Method() { std::cout << "Who the heck called me?"; }Di2015NewLine};Di2015NewLineDi2015NewLineint _tmain(int argc, _TCHAR* argv[])Di2015NewLine{Di2015NewLine    Base* p = new Derived;Di2015NewLine    p->Test();Di2015NewLine}Di2015NewLine
414989Di2015UniqueSeparatorList<Map> list = new List<Map>() { Di2015NewLine    new Map(10), Di2015NewLine    new Map(20), Di2015NewLine    new Map(30), Di2015NewLine    new Map(40)Di2015NewLine};Di2015NewLineDi2015NewLineMap map = list[2];Di2015NewLinemap.Size = 42;Di2015NewLinelist[2] = map;Di2015NewLine
415153Di2015UniqueSeparatorsp_reset_connection
415227Di2015UniqueSeparatorgetDi2015NewLine  {Di2015NewLine    return (ResolutionInfo)m_imageResources.Find(res => res.ID == (int)ResourceIDs.ResolutionInfo);Di2015NewLine  }Di2015NewLine
415227Di2015UniqueSeparatorpublic T Find(Predicate<T> match)Di2015NewLine{Di2015NewLine    if (match == null)Di2015NewLine    {Di2015NewLine        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.match);Di2015NewLine    }Di2015NewLine    for (int i = 0; i < this._size; i++)Di2015NewLine    {Di2015NewLine        if (match(this._items[i]))Di2015NewLine        {Di2015NewLine            return this._items[i];Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return default(T);Di2015NewLine}Di2015NewLine
415331Di2015UniqueSeparatorlvEditProjectSteps.EditItemDi2015NewLine
415331Di2015UniqueSeparatorlvEditProjectSteps.Items[lvEditProjectSteps.EditIndex]Di2015NewLine
415396Di2015UniqueSeparatorSystem.Buffer.BlockCopy
415396Di2015UniqueSeparatorSystem.Array.Copy
415396Di2015UniqueSeparatorSystem.Array.Copy
415396Di2015UniqueSeparatorSystem.Buffer.BlockCopy
415396Di2015UniqueSeparatorSystem.Array.Copy
415396Di2015UniqueSeparatorSystem.Buffer.BlockCopy
415396Di2015UniqueSeparatorSystem.Array.Copy
415396Di2015UniqueSeparatorSystem.Buffer.BlockCopy
415396Di2015UniqueSeparatorSystem.Array.Copy
415396Di2015UniqueSeparatorSystem.Buffer.BlockCopy
415396Di2015UniqueSeparator    byte[] rv = new byte[ a1.Length + a2.Length + a3.Length ];Di2015NewLine    System.Buffer.BlockCopy( a1, 0, rv, 0, a1.Length );Di2015NewLine    System.Buffer.BlockCopy( a2, 0, rv, a1.Length, a2.Length );Di2015NewLine    System.Buffer.BlockCopy( a3, 0, rv, a1.Length + a2.Length, a3.Length );Di2015NewLine
415396Di2015UniqueSeparatorIEnumerable<byte>
415396Di2015UniqueSeparator    IEnumerable<byte> rv = a1.Concat(a2).Concat(a3);Di2015NewLine
415396Di2015UniqueSeparatorSystem.Buffer.BlockCopy
415396Di2015UniqueSeparator    private byte[] Combine( params byte[][] arrays )Di2015NewLine    {Di2015NewLine        byte[] rv = new byte[ arrays.Sum( a => a.Length ) ];Di2015NewLine        int offset = 0;Di2015NewLine        foreach ( byte[] array in arrays ) {Di2015NewLine            System.Buffer.BlockCopy( array, 0, rv, offset, array.Length );Di2015NewLine            offset += array.Length;Di2015NewLine        }Di2015NewLine        return rv;Di2015NewLine    }Di2015NewLine
415396Di2015UniqueSeparatorSystem.Array.Copy
415396Di2015UniqueSeparatorSystem.Buffer.BlockCopy
415416Di2015UniqueSeparatorvar q = from p in peopleDi2015NewLine        orderby p.NameDi2015NewLine        group p by p.FamilyName into famDi2015NewLine        orderby fam.KeyDi2015NewLine        select fam.Key + " " + string.Join(" ", (from fm in fam select fm.Name).ToArray());Di2015NewLine
415416Di2015UniqueSeparatorEmery Jake
415416Di2015UniqueSeparatorPendray John Richard
415557Di2015UniqueSeparatorICloneable
415557Di2015UniqueSeparatorBinaryFormatter
415557Di2015UniqueSeparatorXmlSerializer
415557Di2015UniqueSeparatorT DeepClone<T>(T)
415557Di2015UniqueSeparator[DataContract]
415557Di2015UniqueSeparator[ProtoContract]
415557Di2015UniqueSeparatorFunc<T,T>
415557Di2015UniqueSeparatorConverter<T,T>
415557Di2015UniqueSeparatorExpression
415655Di2015UniqueSeparatorvoid RunWithRedirect(string cmdPath)Di2015NewLine{Di2015NewLine    var proc = new Process();Di2015NewLine    proc.StartInfo.FileName = cmdPath;Di2015NewLineDi2015NewLine    // set up output redirectionDi2015NewLine    proc.StartInfo.RedirectStandardOutput = true;Di2015NewLine    proc.StartInfo.RedirectStandardError = true;    Di2015NewLine    proc.EnableRaisingEvents = true;Di2015NewLine    proc.StartInfo.CreateNoWindow = true;Di2015NewLine    // see below for output handlerDi2015NewLine    proc.ErrorDataReceived += proc_DataReceived;Di2015NewLine    proc.OutputDataReceived += proc_DataReceived;Di2015NewLineDi2015NewLine    proc.Start();Di2015NewLineDi2015NewLine    proc.BeginErrorReadLine();Di2015NewLine    proc.BeginOutputReadLine();Di2015NewLineDi2015NewLine    proc.WaitForExit();Di2015NewLine}Di2015NewLineDi2015NewLinevoid proc_DataReceived(object sender, DataReceivedEventArgs e)Di2015NewLine{Di2015NewLine    // output will be in string e.DataDi2015NewLine}Di2015NewLine
415691Di2015UniqueSeparatorusing System.IO;Di2015NewLinepublic class ExternalApplicationDi2015NewLine{Di2015NewLine   public ExternalApplication(string path)Di2015NewLine   {Di2015NewLine      this.Path = path;Di2015NewLine   }Di2015NewLineDi2015NewLine   public string Path { get; protected set; }Di2015NewLineDi2015NewLine   public bool Exists() Di2015NewLine   {Di2015NewLine      if(string.IsNullOrEmpty(this.Path))Di2015NewLine         throw new ConfigurationException("Path not specified.");Di2015NewLine      return File.Exists(this.Path);Di2015NewLine   }Di2015NewLineDi2015NewLine   public void Execute(string args)Di2015NewLine   {Di2015NewLine      // Implementation to launch the applicationDi2015NewLine   } Di2015NewLine}Di2015NewLineDi2015NewLinepublic class AppFactoryDi2015NewLine{Di2015NewLine   public ExternalApplication App1()Di2015NewLine   {Di2015NewLine      // Implementation to initialize this application fromDi2015NewLine      // the application's configuration file.Di2015NewLine   }Di2015NewLineDi2015NewLine   public ExternalApplication App2()Di2015NewLine   {Di2015NewLine      // Implementation to initialize this application fromDi2015NewLine      // the application's configuration file.Di2015NewLine   }Di2015NewLineDi2015NewLine   public ExternalApplication AppFromKey(string key)Di2015NewLine   {Di2015NewLine      // get from somewhereDi2015NewLine   } Di2015NewLine }Di2015NewLine
415691Di2015UniqueSeparatorExternalApplication
415880Di2015UniqueSeparator    ces = companiesWithEmployeesDi2015NewLine        .Find(x => x.EmployeesDi2015NewLine            .Find(y => y.ParID == person.ParID) != null);Di2015NewLine
415880Di2015UniqueSeparatorPerson
415880Di2015UniqueSeparatorParID
415880Di2015UniqueSeparatorPerson
415880Di2015UniqueSeparatorContains
415880Di2015UniqueSeparator    ces = companiesWithEmployeesDi2015NewLine        .Find(x => x.Employees.Contains(person));Di2015NewLine
416043Di2015UniqueSeparatorList<string> GetWords(IEnumberable<char> characters) {Di2015NewLine    char[] chars = characters.Distinct().ToArray();Di2015NewLine    List<string> words = new List<string>(chars.Length*chars.Length);Di2015NewLine    foreach (char i in chars)Di2015NewLine       foreach (char j in chars)Di2015NewLine          words.Add(i.ToString() + j.ToString());Di2015NewLine    return words;Di2015NewLine}Di2015NewLine
416421Di2015UniqueSeparatorservicePrincipalName
416632Di2015UniqueSeparator        NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();Di2015NewLineDi2015NewLine        foreach (NetworkInterface iface in interfaces)Di2015NewLine        {Di2015NewLine            IPInterfaceProperties properties = iface.GetIPProperties();Di2015NewLineDi2015NewLine            foreach (UnicastIPAddressInformation address in properties.UnicastAddresses)Di2015NewLine            {Di2015NewLine                Console.WriteLine(Di2015NewLine                    "{0} (Mask: {1})",Di2015NewLine                    address.Address,Di2015NewLine                    address.IPv4MaskDi2015NewLine                    );Di2015NewLine            }Di2015NewLine        }Di2015NewLine
416721Di2015UniqueSeparatorPage.Master
416721Di2015UniqueSeparatorWhatever whatev = (Whatever)Page.Master;Di2015NewLine
416721Di2015UniqueSeparatorusing
416899Di2015UniqueSeparator        var items = from i in db.Items.Include("Tags")Di2015NewLine                    where i.Tags.Any(t => t.Text == text)Di2015NewLine                    orderby i.CreatedDate descendingDi2015NewLine                    select i;Di2015NewLine
416916Di2015UniqueSeparator/// <summary>Di2015NewLine/// This is a lable, in which you can set the text in any direction/angleDi2015NewLine/// </summary>Di2015NewLineDi2015NewLine#region OrientationDi2015NewLineDi2015NewLine//Orientation of the textDi2015NewLineDi2015NewLinepublic enum OrientationDi2015NewLine{Di2015NewLine    Circle,Di2015NewLine    Arc,Di2015NewLine    RotateDi2015NewLine}Di2015NewLineDi2015NewLinepublic enum DirectionDi2015NewLine{Di2015NewLine    Clockwise,Di2015NewLine    AntiClockwiseDi2015NewLine}Di2015NewLineDi2015NewLine#endregionDi2015NewLineDi2015NewLinepublic class OrientedTextLabel : System.Windows.Forms.LabelDi2015NewLine{Di2015NewLine    #region VariablesDi2015NewLineDi2015NewLine    private double rotationAngle;Di2015NewLine    private string text;Di2015NewLine    private Orientation textOrientation;Di2015NewLine    private Direction textDirection;Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region ConstructorDi2015NewLineDi2015NewLine    public OrientedTextLabel()Di2015NewLine    {Di2015NewLine        //Setting the initial condition.Di2015NewLine        rotationAngle = 0d;Di2015NewLine        textOrientation = Orientation.Rotate;Di2015NewLine        this.Size = new Size(105,12);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region PropertiesDi2015NewLineDi2015NewLine    [Description("Rotation Angle"),Category("Appearance")]Di2015NewLine    public double RotationAngleDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return rotationAngle;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            rotationAngle = value;Di2015NewLine            this.Invalidate();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Description("Kind of Text Orientation"),Category("Appearance")]Di2015NewLine    public Orientation TextOrientationDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return textOrientation;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            textOrientation = value;Di2015NewLine            this.Invalidate();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Description("Direction of the Text"),Category("Appearance")]Di2015NewLine    public Direction TextDirectionDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return textDirection;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            textDirection = value;Di2015NewLine            this.Invalidate();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Description("Display Text"),Category("Appearance")]Di2015NewLine    public override string TextDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return text;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            text = value;Di2015NewLine            this.Invalidate();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region MethodDi2015NewLineDi2015NewLine    protected override void OnPaint(PaintEventArgs e)Di2015NewLine    {Di2015NewLine        Graphics graphics = e.Graphics;Di2015NewLineDi2015NewLine        StringFormat stringFormat = new StringFormat();Di2015NewLine        stringFormat.Alignment = StringAlignment.Center;Di2015NewLine        stringFormat.Trimming = StringTrimming.None;Di2015NewLineDi2015NewLine        Brush textBrush = new SolidBrush(this.ForeColor);Di2015NewLineDi2015NewLine        //Getting the width and height of the text, which we are going to writeDi2015NewLine        float width = graphics.MeasureString(text,this.Font).Width;Di2015NewLine        float height = graphics.MeasureString(text,this.Font).Height;Di2015NewLineDi2015NewLine        //The radius is set to 0.9 of the width or height, b'cos not toDi2015NewLine        //hide and part of the text at any stageDi2015NewLine        float radius = 0f;Di2015NewLine        if (ClientRectangle.Width<ClientRectangle.Height)Di2015NewLine        {Di2015NewLine            radius = ClientRectangle.Width *0.9f/2;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            radius = ClientRectangle.Height *0.9f/2;Di2015NewLine        }Di2015NewLineDi2015NewLine        //Setting the text according to the selectionDi2015NewLine        switch (textOrientation)Di2015NewLine        {Di2015NewLine            case Orientation.Arc:Di2015NewLine            {Di2015NewLine                //Arc angle must be get from the length of the text.Di2015NewLine                float arcAngle = (2*width/radius)/text.Length;Di2015NewLine                if(textDirection == Direction.Clockwise)Di2015NewLine                {Di2015NewLine                    for (int i=0; i<text.Length; i++)Di2015NewLine                    {Di2015NewLine                        graphics.TranslateTransform(Di2015NewLine                            (float)(radius*(1 - Math.Cos(arcAngle*i + rotationAngle/180 * Math.PI))),Di2015NewLine                            (float)(radius*(1 - Math.Sin(arcAngle*i + rotationAngle/180*Math.PI))));Di2015NewLine                        graphics.RotateTransform((-90 + (float)rotationAngle + 180*arcAngle*i/(float)Math.PI));Di2015NewLine                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);Di2015NewLine                        graphics.ResetTransform();Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    for (int i=0; i<text.Length; i++)Di2015NewLine                    {Di2015NewLine                        graphics.TranslateTransform(Di2015NewLine                            (float)(radius*(1 - Math.Cos(arcAngle*i + rotationAngle/180*Math.PI))),Di2015NewLine                            (float)(radius*(1 + Math.Sin(arcAngle*i + rotationAngle/180*Math.PI))));Di2015NewLine                        graphics.RotateTransform((-90 - (float)rotationAngle - 180*arcAngle*i/(float)Math.PI));Di2015NewLine                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);Di2015NewLine                        graphics.ResetTransform();Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                break;Di2015NewLine            }Di2015NewLine            case Orientation.Circle:Di2015NewLine            {Di2015NewLine                if (textDirection == Direction.Clockwise)Di2015NewLine                {Di2015NewLine                    for(int i=0;i<text.Length;i++)Di2015NewLine                    {Di2015NewLine                        graphics.TranslateTransform(Di2015NewLine                            (float)(radius*(1 - Math.Cos((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))),Di2015NewLine                            (float)(radius*(1 - Math.Sin((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))));Di2015NewLine                        graphics.RotateTransform(-90 + (float)rotationAngle + (360/text.Length)*i);Di2015NewLine                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);Di2015NewLine                        graphics.ResetTransform();Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    for(int i=0;i<text.Length;i++)Di2015NewLine                    {Di2015NewLine                        graphics.TranslateTransform(Di2015NewLine                            (float)(radius*(1 - Math.Cos((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))),Di2015NewLine                            (float)(radius*(1 + Math.Sin((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))));Di2015NewLine                        graphics.RotateTransform(-90 - (float)rotationAngle - (360/text.Length)*i);Di2015NewLine                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);Di2015NewLine                        graphics.ResetTransform();Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLine                break;Di2015NewLine            }Di2015NewLineDi2015NewLine            case Orientation.Rotate:Di2015NewLine            {Di2015NewLine                //For rotation, who about rotation?Di2015NewLine                double angle = (rotationAngle/180)*Math.PI;Di2015NewLine                graphics.TranslateTransform(Di2015NewLine                    (ClientRectangle.Width+(float)(height*Math.Sin(angle))-(float)(width*Math.Cos(angle)))/2,Di2015NewLine                    (ClientRectangle.Height-(float)(height*Math.Cos(angle))-(float)(width*Math.Sin(angle)))/2);Di2015NewLine                graphics.RotateTransform((float)rotationAngle);Di2015NewLine                graphics.DrawString(text,this.Font,textBrush,0,0);Di2015NewLine                graphics.ResetTransform();Di2015NewLineDi2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine}Di2015NewLine
417020Di2015UniqueSeparatorif (reader.HasAttributes) {Di2015NewLine  Console.WriteLine("Attributes of <" + reader.Name + ">");Di2015NewLine  while (reader.MoveToNextAttribute()) {Di2015NewLine    Console.WriteLine(" {0}={1}", reader.Name, reader.Value);Di2015NewLine  }Di2015NewLine  // Move the reader back to the element node.Di2015NewLine  reader.MoveToElement();Di2015NewLine}Di2015NewLine
417224Di2015UniqueSeparatorpublic static void CallingFooBar()Di2015NewLine{Di2015NewLine   using (var ts=new TransactionScope())Di2015NewLine   {Di2015NewLine      var foo=new Foo();Di2015NewLine      foo.Bar();Di2015NewLine      ts.Complete();Di2015NewLine   }Di2015NewLine}Di2015NewLine
417272Di2015UniqueSeparatorvar resultingList = Di2015NewLine    listOfOriginalItems.Except(listOfItemsToLeaveOut, equalityComparer)Di2015NewLine
417272Di2015UniqueSeparatorList<Person>
417272Di2015UniqueSeparatorpersons
417272Di2015UniqueSeparatorList<Exclusion>
417272Di2015UniqueSeparatorexclusions
417272Di2015UniqueSeparatorvar exclusionKeys = Di2015NewLine        exclusions.Select(x => x.compositeKey);Di2015NewLinevar resultingPersons = Di2015NewLine        persons.Where(x => !exclusionKeys.Contains(x.compositeKey));Di2015NewLine
417457Di2015UniqueSeparatortryDi2015NewLine{}Di2015NewLinecatch (Exception ex)Di2015NewLine{}Di2015NewLine
417457Di2015UniqueSeparatortryDi2015NewLine{}Di2015NewLinecatch (CustomException1 ex1)Di2015NewLine{Di2015NewLine    //handle CustomException1 type errors hereDi2015NewLine}Di2015NewLinecatch (CustomException2 ex2)Di2015NewLine{Di2015NewLine    //handle CustomException2 type errors hereDi2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    //handle all other types of exceptions hereDi2015NewLine}Di2015NewLine
417473Di2015UniqueSeparatorstring s = "the U.S.A love UK";Di2015NewLines = s.Replace("U.S.A", "United States of America").Replace("UK", "United Kingdom");Di2015NewLine
417485Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Config config = new Config(10, 7, 5)Di2015NewLine        {Di2015NewLine            { new int?[]{null,  null,  null},  1},Di2015NewLine            { new int?[]{1,     null,  null},  2},Di2015NewLine            { new int?[]{9,     null,  null},  21},Di2015NewLine            { new int?[]{1,     null,  3},     3 },Di2015NewLine            { new int?[]{null,  2,     3},     4 },Di2015NewLine            { new int?[]{1,     2,     3},     5 }Di2015NewLine        };Di2015NewLineDi2015NewLine        Console.WriteLine(config[1, 2, 3]);Di2015NewLine        Console.WriteLine(config[3, 2, 3]);Di2015NewLine        Console.WriteLine(config[8, 10, 11]);Di2015NewLine        Console.WriteLine(config[1, 10, 11]);Di2015NewLine        Console.WriteLine(config[9, 2, 3]);Di2015NewLine        Console.WriteLine(config[9, 3, 3]);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Config : IEnumerableDi2015NewLine{Di2015NewLine    private readonly int[] priorities;Di2015NewLine    private readonly List<KeyValuePair<int?[],int>> entries = Di2015NewLine        new List<KeyValuePair<int?[], int>>();Di2015NewLineDi2015NewLine    public Config(params int[] priorities)Di2015NewLine    {Di2015NewLine        // In production code, copy the array to prevent tamperingDi2015NewLine        this.priorities = priorities;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int this[params int[] keys]Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (keys.Length != priorities.Length)Di2015NewLine            {Di2015NewLine                throw new ArgumentException("Invalid entry - wrong number of keys");Di2015NewLine            }Di2015NewLine            int bestValue = 0;Di2015NewLine            int bestScore = -1;Di2015NewLine            foreach (KeyValuePair<int?[], int> pair in entries)Di2015NewLine            {Di2015NewLine                int?[] key = pair.Key;Di2015NewLine                int score = 0;Di2015NewLine                for (int i=0; i < priorities.Length; i++)Di2015NewLine                {Di2015NewLine                    if (key[i]==null)Di2015NewLine                    {Di2015NewLine                        continue;Di2015NewLine                    }Di2015NewLine                    if (key[i].Value == keys[i])Di2015NewLine                    {Di2015NewLine                        score += priorities[i];Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        score = -1;Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                if (score > bestScore)Di2015NewLine                {Di2015NewLine                    bestScore = score;Di2015NewLine                    bestValue = pair.Value;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return bestValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Add(int?[] keys, int value)Di2015NewLine    {Di2015NewLine        if (keys.Length != priorities.Length)Di2015NewLine        {Di2015NewLine            throw new ArgumentException("Invalid entry - wrong number of keys");Di2015NewLine        }Di2015NewLine        // Again, copy the array in production codeDi2015NewLine        entries.Add(new KeyValuePair<int?[],int>(keys, value));Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator GetEnumerator()Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
417591Di2015UniqueSeparatorfloat
417591Di2015UniqueSeparatordouble
417591Di2015UniqueSeparatorfloat
417591Di2015UniqueSeparatordouble
417591Di2015UniqueSeparatorfloat
417591Di2015UniqueSeparatorfloat
417716Di2015UniqueSeparator   public static string tocap(string s)Di2015NewLine    {Di2015NewLineDi2015NewLine        // This says: "if s length is 1 then returned converted in upper case" Di2015NewLine        // for instance if s = "a" it will return "A". So far the function is ok.Di2015NewLine        if (s.Length == 1) return s.ToUpper();Di2015NewLineDi2015NewLineDi2015NewLine        string s1;Di2015NewLine        string s2;Di2015NewLineDi2015NewLine        // This says: "from my string I want the FIRST letter converted to upper case"Di2015NewLine        // So from an input like s = "oscar" you're doing this s1 = "O"Di2015NewLine        s1 = s.Substring(0, 1).ToUpper();Di2015NewLineDi2015NewLineDi2015NewLine        // finally here you're saying: "for the rest just give it to me all lower case"Di2015NewLine        // so for s= "oscar"; you're getting "scar" ... Di2015NewLine        s2 = s.Substring(1).ToLower();Di2015NewLineDi2015NewLineDi2015NewLine        // and then return "O" + "scar" that's why it only works for the first Di2015NewLine        // letter.Di2015NewLine        return s1+s2;Di2015NewLine    }Di2015NewLine
417716Di2015UniqueSeparatorinside_space = false // this flag will tell us if we are inside Di2015NewLine                     // a white space.Di2015NewLineDi2015NewLinefor each character in string doDi2015NewLineDi2015NewLineDi2015NewLine    if( character is white space ) then Di2015NewLine         inside_space = true // you're in an space...Di2015NewLine                             // raise your flag.Di2015NewLineDi2015NewLineDi2015NewLine     else  if( character is not white space AND Di2015NewLine               inside_space == true ) then Di2015NewLineDi2015NewLine           // this means you're not longer in a space Di2015NewLine           // ( thus the beginning of a word exactly what you want ) Di2015NewLineDi2015NewLine          character = character.toUper()  // convert the current Di2015NewLine                                          // char to upper caseDi2015NewLineDi2015NewLine          inside_space = false;           // turn the flag to falseDi2015NewLine                                          // so the next won't be uc'edDi2015NewLine     endDi2015NewLineDi2015NewLine     // Here you just add your letter to the string Di2015NewLine     // either white space, upercased letter or any other.Di2015NewLineDi2015NewLine     result =  result + character Di2015NewLineDi2015NewLine end // forDi2015NewLine
417856Di2015UniqueSeparatorfor (int i = cards.Length - 1; i > 0; i--)Di2015NewLine{Di2015NewLine    int n = rand.Next(i + 1);Di2015NewLine    Swap(ref cards[i], ref cards[n]);Di2015NewLine}Di2015NewLine
417992Di2015UniqueSeparatorInvariantCulture
418043Di2015UniqueSeparatorpublic static void EnableTab(TabPage page, bool enable) {Di2015NewLine    foreach (Control ctl in page.ctls) ctl.Enabled = enable;Di2015NewLine}Di2015NewLine
418213Di2015UniqueSeparatorvar fileList = files.Select(file =>Di2015NewLine                            file.Name.Substring(0, file.Name.Length -Di2015NewLine                            (file.Name.Length - file.Name.IndexOf(".config.xml"))))Di2015NewLine                     .ToList();Di2015NewLine
418404Di2015UniqueSeparator[TestMethod()]Di2015NewLinepublic void AddProductTest()Di2015NewLine{Di2015NewLine    CatalogController target = new CatalogController(/*testing variables*/);Di2015NewLine    target.AddProduct(new Product { /* product details for testing */ });Di2015NewLineDi2015NewLine    // Test the resultsDi2015NewLine}Di2015NewLine
418615Di2015UniqueSeparator<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">Di2015NewLine    <UserConfig>Tom</UserConfig>Di2015NewLine    <DefineConstants>DEBUG;TRACE;TOM</DefineConstants>Di2015NewLine  </PropertyGroup>Di2015NewLine  <ItemGroup Condition=" '$(UserConfig)' == 'Tom'">Di2015NewLine    <Compile Include="Tom.cs" />Di2015NewLine  </ItemGroup>Di2015NewLine</Project>Di2015NewLine
418615Di2015UniqueSeparator#if (TOM)Di2015NewLine            Tom t = new Tom();Di2015NewLine#endifDi2015NewLine
418777Di2015UniqueSeparatorpublic interface IFooDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Foo : IFooDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Fiz : IFooDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineFoo foo = new Foo();Di2015NewLineFiz fiz = foo; // Not gonna compile.Di2015NewLine
418777Di2015UniqueSeparatorpublic class Bar<T> where T : IFoo, new()Di2015NewLine{Di2015NewLine    public Bar(T t)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public Bar()Di2015NewLine        : this(new T()) Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
418777Di2015UniqueSeparatorBar<Foo> barFoo = new Bar<Foo>();Di2015NewLineBar<Fiz> barFiz = new Bar<Fiz>();Di2015NewLine
418829Di2015UniqueSeparatorprotected void myGvw_OnPageIndexChanging(object sender, GridViewPageEventArgs e) Di2015NewLine{Di2015NewLine     myGvw.PageIndex = e.NewPageIndex;Di2015NewLine     // then recall the method that bind myGvwDi2015NewLine}Di2015NewLine
418829Di2015UniqueSeparatormyGvw.PageSize = Convert.ToInt32(myDropDown.SelectedValue)Di2015NewLine
418880Di2015UniqueSeparatorpublic void LogTextEvent(RichTextBox TextEventLog, Color TextColor, string EventText)Di2015NewLine{Di2015NewLine    if (TextEventLog.InvokeRequired)Di2015NewLine    {Di2015NewLine        TextEventLog.BeginInvoke(new Action(delegate {Di2015NewLine            LogTextEvent(TextEventLog, TextColor, EventText);Di2015NewLine        }));Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    string nDateTime = DateTime.Now.ToString("hh:mm:ss tt") + " - ";Di2015NewLineDi2015NewLine    // color text.Di2015NewLine    TextEventLog.SelectionStart = TextEventLog.Text.Length;Di2015NewLine    TextEventLog.SelectionColor = TextColor;Di2015NewLineDi2015NewLine    // newline if first line, append if else.Di2015NewLine    if (TextEventLog.Lines.Length == 0)Di2015NewLine    {Di2015NewLine        TextEventLog.AppendText(nDateTime + EventText);Di2015NewLine        TextEventLog.ScrollToCaret();Di2015NewLine        TextEventLog.AppendText(System.Environment.NewLine);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        TextEventLog.AppendText(nDateTime + EventText + System.Environment.NewLine);Di2015NewLine        TextEventLog.ScrollToCaret();Di2015NewLine    }Di2015NewLine}Di2015NewLine
419063Di2015UniqueSeparatorpublic static List<List<object>> Split(List<object> source)Di2015NewLine{Di2015NewLine    return  sourceDi2015NewLine        .Select((x, i) => new { Index = i, Value = x })Di2015NewLine        .GroupBy(x => x.Index / 3)Di2015NewLine        .Select(x => x.Select(v => v.Value).ToList())Di2015NewLine        .ToList();Di2015NewLine}Di2015NewLine
419097Di2015UniqueSeparatorDataGridView
419097Di2015UniqueSeparator  CheckBox[,] checkArray = new CheckBox[8,3]...Di2015NewLine
419097Di2015UniqueSeparatorTag
419097Di2015UniqueSeparator  checkBox01.Tag = 0;Di2015NewLine  checkBox02.Tag = 0;Di2015NewLine  checkBox11.Tag = 1;Di2015NewLine  checkBox12.Tag = 1;Di2015NewLine
419097Di2015UniqueSeparator  checkBox01.CheckedChanged += new EventHandler(aCheckBox_CheckedChanged);Di2015NewLine  checkBox02.CheckedChanged += new EventHandler(aCheckBox_CheckedChanged);Di2015NewLine  checkBox11.CheckedChanged += new EventHandler(aCheckBox_CheckedChanged);Di2015NewLine  checkBox12.CheckedChanged += new EventHandler(aCheckBox_CheckedChanged);Di2015NewLine
419097Di2015UniqueSeparator  private void aCheckBox_CheckedChanged(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine      int rowIndex = (int)((CheckBox)sender).Tag;Di2015NewLine      checkArray[rowIndex,2].Checked = !(checkArray[rowIndex,0].Checked || Di2015NewLine                                         checkArray[rowIndex,1].Checked);Di2015NewLine  }Di2015NewLine
419118Di2015UniqueSeparator<%= string.Format("<meta http-equiv='refresh' content='10;url=http://contact.test.net/main.aspx?{0}' />", Request.QueryString.ToString()) %>Di2015NewLine
419118Di2015UniqueSeparatorhttp:/mysite.with.metaredirect?<script>alert('hello!!!')</script>Di2015NewLine
419176Di2015UniqueSeparator    SessionId  EventType  .... your session data here ... SessionCount   Di2015NewLine1.     1         Login         ................                 1Di2015NewLine2.     2         Login         ................                 2Di2015NewLine3.     3         Login         ................                 3Di2015NewLine4.     1         Logout        ................                 2Di2015NewLine5.     4         Login         ................                 3Di2015NewLine6.     4         Logout        ................                 2Di2015NewLine7.     2         Logout        ................                 1Di2015NewLine8.     3         Logout        ................                 0Di2015NewLine9.     5         Login         ................                 1Di2015NewLine10.    6         Login         ................                 2Di2015NewLine
419357Di2015UniqueSeparatorIntersect
419357Di2015UniqueSeparatorEnumerable
419357Di2015UniqueSeparatorvar intersection = ListA.Intersect(ListB);Di2015NewLine
419357Di2015UniqueSeparatorListA
419357Di2015UniqueSeparatorListB
419357Di2015UniqueSeparatorvar ListA = new [] { 0, 0, 1, 2, 3 };Di2015NewLinevar ListB = new [] { 0, 0, 0, 2 };Di2015NewLine
419357Di2015UniqueSeparatorListA.Intersect(ListB)
419357Di2015UniqueSeparator{ 0, 2 }Di2015NewLine
419357Di2015UniqueSeparator{ 0, 0, 2 }Di2015NewLine
419357Di2015UniqueSeparatorDictionary<TKey, int>
419357Di2015UniqueSeparatorvar countsOfA = ListA.GroupBy(i => i).ToDictionary(g => g.Key, g => g.Count());Di2015NewLine
419357Di2015UniqueSeparatorListB
419357Di2015UniqueSeparatorcountsOfA
419357Di2015UniqueSeparator// The items that match.Di2015NewLineIList<int> matched = new List<int>();Di2015NewLineDi2015NewLine// Scan Di2015NewLineforeach (int b in ListB)Di2015NewLine{Di2015NewLine    // The count.Di2015NewLine    int count;Di2015NewLineDi2015NewLine    // If the item is found in a.Di2015NewLine    if (countsOfA.TryGetValue(b, out count))Di2015NewLine    {Di2015NewLine        // This is positive.Di2015NewLine        Debug.Assert(count > 0);Di2015NewLineDi2015NewLine        // Add the item to the list.Di2015NewLine        matched.Add(b);Di2015NewLineDi2015NewLine        // Decrement the count.  IfDi2015NewLine        // 0, remove.Di2015NewLine        if (--count == 0) countsOfA.Remove(b);Di2015NewLine    }Di2015NewLine}Di2015NewLine
419357Di2015UniqueSeparatorpublic static IEnumerable<T> MultisetIntersect(this IEnumerable<T> first,Di2015NewLine    IEnumerable<T> second, IEqualityComparer<T> comparer)Di2015NewLine{Di2015NewLine    // Call the overload with the default comparer.Di2015NewLine    return first.MultisetIntersect(second, EqualityComparer<T>.Default);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static IEnumerable<T> MultisetIntersect(this IEnumerable<T> first,Di2015NewLine    IEnumerable<T> second, IEqualityComparer<T> comparer)Di2015NewLine{Di2015NewLine    // Validate parameters.  Do this separately so checkDi2015NewLine    // is performed immediately, and not when executionDi2015NewLine    // takes place.Di2015NewLine    if (first == null) throw new ArgumentNullException("first");Di2015NewLine    if (second == null) throw new ArgumentNullException("second");Di2015NewLine    if (comparer == null) throw new ArgumentNullException("comparer");Di2015NewLineDi2015NewLine    // Defer execution on the internalDi2015NewLine    // instance.Di2015NewLine    return first.MultisetIntersectImplementation(second, comparer);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static IEnumerable<T> MultisetIntersectImplementation(Di2015NewLine    this IEnumerable<T> first, IEnumerable<T> second, Di2015NewLine    IEqualityComparer<T> comparer)Di2015NewLine{Di2015NewLine    // Validate parameters.Di2015NewLine    Debug.Assert(first != null);Di2015NewLine    Debug.Assert(second != null);Di2015NewLine    Debug.Assert(comparer != null);Di2015NewLineDi2015NewLine    // Get the dictionary of the first.Di2015NewLine    IDictionary<T, long> counts = first.GroupBy(t => t, comparer).Di2015NewLine        ToDictionary(g => g.Key, g.LongCount(), comparer);Di2015NewLineDi2015NewLine    // Scan Di2015NewLine    foreach (T t in second)Di2015NewLine    {Di2015NewLine        // The count.Di2015NewLine        long count;Di2015NewLineDi2015NewLine        // If the item is found in a.Di2015NewLine        if (counts.TryGetValue(t, out count))Di2015NewLine        {Di2015NewLine            // This is positive.Di2015NewLine            Debug.Assert(count > 0);Di2015NewLineDi2015NewLine            // Yield the item.Di2015NewLine            yield return t;Di2015NewLineDi2015NewLine            // Decrement the count.  IfDi2015NewLine            // 0, remove.Di2015NewLine            if (--count == 0) counts.Remove(t);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
419357Di2015UniqueSeparatorO(N + M)
419357Di2015UniqueSeparatorN
419357Di2015UniqueSeparatorM
419357Di2015UniqueSeparatorO(1)
419499Di2015UniqueSeparatorCounter
419499Di2015UniqueSeparatorpublic class Counter<T> : IEnumerable<T>Di2015NewLine{Di2015NewLine    public int Count { get; private set; }Di2015NewLineDi2015NewLine    public Counter(IEnumerable<T> source)Di2015NewLine    {Di2015NewLine        mSource = source;Di2015NewLine        Count = 0;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<T> GetEnumerator()Di2015NewLine    {Di2015NewLine        foreach (var T in mSource)Di2015NewLine        {Di2015NewLine            Count++;Di2015NewLine            yield return T;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerator IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        foreach (var T in mSource)Di2015NewLine        {Di2015NewLine            Count++;Di2015NewLine            yield return T;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<T> mSource;Di2015NewLine}Di2015NewLine
419499Di2015UniqueSeparatorCounter
419499Di2015UniqueSeparatorGetAllFiles()
419499Di2015UniqueSeparatorGetMatches()
419499Di2015UniqueSeparatorGetMatchingLines()
419499Di2015UniqueSeparatorGetMatchingLines()
419499Di2015UniqueSeparatorMitcham
419499Di2015UniqueSeparatorvar files = new Counter<string>( GetAllFiles());Di2015NewLinevar matchingFiles = new Counter<string>(GetMatches( "*.txt", files ));Di2015NewLinevar contents = GetFileContents( matchingFiles );Di2015NewLinevar linesFound = new Counter<string>(GetMatchingLines( contents ));Di2015NewLineDi2015NewLineforeach( var lineText in linesFound )Di2015NewLine    Console.WriteLine( "Found: " + lineText );Di2015NewLineDi2015NewLinestring message Di2015NewLine    = String.Format( Di2015NewLine        "Found {0} matches in {1} matching files. Scanned {2} files",Di2015NewLine        linesFound.Count,Di2015NewLine        matchingFiles.Count,Di2015NewLine        files.Count);Di2015NewLineConsole.WriteLine(message);Di2015NewLine
419508Di2015UniqueSeparatorAssemblyLoad
419508Di2015UniqueSeparator    AppDomain.CurrentDomain.AssemblyLoad += (s, a) =>Di2015NewLine    {Di2015NewLine        Console.WriteLine(a.LoadedAssembly.FullName);Di2015NewLine        Console.WriteLine(a.LoadedAssembly.CodeBase);Di2015NewLine    };Di2015NewLine
419508Di2015UniqueSeparatorSome.Namespace.Type
419508Di2015UniqueSeparatorAppDomain
419508Di2015UniqueSeparatorAppDomain
419508Di2015UniqueSeparatorMarshalByRef
419512Di2015UniqueSeparatorTime
419512Di2015UniqueSeparatorFileUpdate
419512Di2015UniqueSeparator[AssemblyVersion]
419512Di2015UniqueSeparator<!-- See http://msbuildtasks.tigris.org -->Di2015NewLine<Import Project="$(MSBuildExtensionsPath)\\MSBuildCommunityTasks\\MSBuild.Community.Tasks.Targets"/>Di2015NewLine...Di2015NewLine<SvnInfo LocalPath=".">Di2015NewLine  <Output TaskParameter="Revision" PropertyName="BuildRev" />Di2015NewLine</SvnInfo>Di2015NewLine...Di2015NewLine<FileUpdate Files="Path\\To\\My\\AssemblyInfo.cs"Di2015NewLine    Regex='(\\[\\s*assembly:\\s*AssemblyVersion\\(\\s*"[^\\.]+\\.[^\\.]+)\\.([^\\.]+)(\\.)([^\\.]+)("\\)\\s*\\])'Di2015NewLine    ReplacementText='$1.$2.$(BuildRev)$5' />Di2015NewLine<FileUpdate Files="Path\\To\\My\\AssemblyInfo.cs"Di2015NewLine    Regex='(\\[\\s*assembly:\\s*AssemblyFileVersion\\(\\s*"[^\\.]+\\.[^\\.]+)\\.([^\\.]+)(\\.)([^\\.]+)("\\)\\s*\\])'Di2015NewLine    ReplacementText='$1.$2.$(BuildRev)$5' />Di2015NewLine
419918Di2015UniqueSeparatorIDisposable
419918Di2015UniqueSeparatorref
419918Di2015UniqueSeparatorref
419918Di2015UniqueSeparatorvar tmp = obj;Di2015NewLineDestroyObject(ref tmp);Di2015NewLine
419918Di2015UniqueSeparatorobj
419918Di2015UniqueSeparatorref
420177Di2015UniqueSeparatorResponse.Redirect("/Someurl/");Di2015NewLine
420177Di2015UniqueSeparatorResponse.Redirect("/Someurl/?message=hello");Di2015NewLine
420291Di2015UniqueSeparatorpublic class MyChangePersonService : IChangePersonServiceDi2015NewLine{Di2015NewLine    private IList<EventHandler> handlers;Di2015NewLineDi2015NewLine    private EventHandler _personEvent;Di2015NewLineDi2015NewLine    public event EventHandler PersonCreatedDi2015NewLine    {Di2015NewLine        addDi2015NewLine        {Di2015NewLine            _personEvent += value;Di2015NewLine            handlers.Add(value);Di2015NewLine        }Di2015NewLineDi2015NewLine        removeDi2015NewLine        {Di2015NewLine            _personEvent -= value;Di2015NewLine            handlers.Remove(value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IList<EventHandler> PersonEventHandlers { get { return handlers; } }Di2015NewLineDi2015NewLine    public MyChangePersonService()Di2015NewLine    {Di2015NewLine        handlers = new List<EventHandler>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void FirePersonEvent()Di2015NewLine    {Di2015NewLine        _personEvent(this, null);Di2015NewLine    }Di2015NewLine}Di2015NewLine
420291Di2015UniqueSeparatorPersonEventHandlers
420441Di2015UniqueSeparatorpublic MyStruct(int size) : this()Di2015NewLine{Di2015NewLine    Size = size;Di2015NewLine}Di2015NewLine
420441Di2015UniqueSeparatorpublic int Size {get; private set;}Di2015NewLine
420467Di2015UniqueSeparatorMX
420467Di2015UniqueSeparatorSOA
420467Di2015UniqueSeparatorMX
420467Di2015UniqueSeparatorSOA
420467Di2015UniqueSeparatorMX
420467Di2015UniqueSeparatorA
420467Di2015UniqueSeparatorMX
420502Di2015UniqueSeparatorTraceListener
420502Di2015UniqueSeparatorTrace.Write
420502Di2015UniqueSeparatorConsole.Write
420502Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Trace.Listeners.Clear();Di2015NewLineDi2015NewLine    TextWriterTraceListener twtl = new TextWriterTraceListener(Path.Combine(Path.GetTempPath(), AppDomain.CurrentDomain.FriendlyName));Di2015NewLine    twtl.Name = "TextLogger";Di2015NewLine    twtl.TraceOutputOptions = TraceOptions.ThreadId | TraceOptions.DateTime;Di2015NewLineDi2015NewLine    ConsoleTraceListener ctl = new ConsoleTraceListener(false);Di2015NewLine    ctl.TraceOutputOptions = TraceOptions.DateTime;Di2015NewLineDi2015NewLine    Trace.Listeners.Add(twtl);Di2015NewLine    Trace.Listeners.Add(ctl);Di2015NewLine    Trace.AutoFlush = true;Di2015NewLineDi2015NewLine    Trace.WriteLine("The first line to be in the logfile and on the console.");Di2015NewLine}Di2015NewLine
420570Di2015UniqueSeparatorList<int> IdsToFind = new List<int>() {2, 3, 4};Di2015NewLineDi2015NewLinedb.UsersDi2015NewLine.Where(u => SqlMethods.Like(u.LastName, "%fra%"))Di2015NewLine.Where(u =>Di2015NewLine    db.CompanyRolesToUsersDi2015NewLine    .Where(crtu => IdsToFind.Contains(crtu.CompanyRoleId))Di2015NewLine    .Select(crtu =>  crtu.UserId)Di2015NewLine    .Contains(u.Id)Di2015NewLine)Di2015NewLine
420570Di2015UniqueSeparatorpredicateAnd = predicateAnd.And(c => c.LastName.Contains(Di2015NewLine                                TextBoxLastName.Text.Trim()));Di2015NewLine
420570Di2015UniqueSeparatorstring searchString = TextBoxLastName.Text.Trim();Di2015NewLinepredicateAnd = predicateAnd.And(c => c.LastName.Contains( searchString));Di2015NewLine
420633Di2015UniqueSeparator DateTime.Today.ToString("MM/dd/yy")Di2015NewLine
420710Di2015UniqueSeparatorDataContractSerializer
420710Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class PersonDi2015NewLine{Di2015NewLine    [DataMember]Di2015NewLine    public int ID { get; internal set; }Di2015NewLine    [DataMember]Di2015NewLine    public string Name { get; set; }Di2015NewLine    [DataMember]Di2015NewLine    public int Age { get; set; }Di2015NewLine}Di2015NewLine...Di2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    Person person = new Person();Di2015NewLine    person.Age = 27;Di2015NewLine    person.Name = "Patrik";Di2015NewLine    person.ID = 1;Di2015NewLineDi2015NewLine    DataContractSerializer serializer = new DataContractSerializer(typeof(Person));Di2015NewLine    XmlWriter writer = XmlWriter.Create(@"c:\\test.xml");Di2015NewLine    serializer.WriteObject(writer, person);Di2015NewLine    writer.Close();Di2015NewLine}Di2015NewLine
420710Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Person xmlns:i="http://www.w3.org/2001/XMLSchema-instance"Di2015NewLine        xmlns="http://schemas.datacontract.org/2004/07/">Di2015NewLine    <Age>27</Age>Di2015NewLine    <ID>1</ID>Di2015NewLine    <Name>Patrik</Name>Di2015NewLine</Person>Di2015NewLine
420786Di2015UniqueSeparatorusing(var iter = ints.GetEnumerator()) {Di2015NewLine  if(iter.MoveNext()) {Di2015NewLine     // do "first" with iter.CurrentDi2015NewLineDi2015NewLine     while(iter.MoveNext()) {Di2015NewLine       // do something with the rest of the data with iter.CurrentDi2015NewLine     }Di2015NewLine  }Di2015NewLine}Di2015NewLine
420786Di2015UniqueSeparatorforeach
420786Di2015UniqueSeparatorif(ints.Any()) {Di2015NewLine  var first = ints.First();Di2015NewLine  // do something with firstDi2015NewLine}Di2015NewLineDi2015NewLineforeach(var item in ints.Skip(1)) {Di2015NewLine  // do something with the rest of themDi2015NewLine}Di2015NewLine
420786Di2015UniqueSeparatorIEnumerable<T>
420836Di2015UniqueSeparatorint valueType;Di2015NewLineobject valueTypeLock = new object();Di2015NewLineDi2015NewLinevoid Foo()Di2015NewLine{Di2015NewLine    lock (valueTypeLock)Di2015NewLine    {Di2015NewLine        valueType = 0;Di2015NewLine    }Di2015NewLine}Di2015NewLine
420896Di2015UniqueSeparator CheckBox[,] checkArray;Di2015NewLine
420896Di2015UniqueSeparatorpublic Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            checkArray = new CheckBox[2, 3] { { checkbox24,checkboxPref1,null}, {checkbox23,checkboxPref2,null}};Di2015NewLine        }Di2015NewLine
420936Di2015UniqueSeparatorstatic void MyFunction(int x) { ... } // thread safe. The int is copied onto the local stack.Di2015NewLineDi2015NewLinestatic void MyFunction(Object o) { ... } // Not thread safe. Since o is a reference type, it might be shared among multiple threads.Di2015NewLine
420969Di2015UniqueSeparatorType
420969Di2015UniqueSeparatorMakeGenericMethod
420969Di2015UniqueSeparatortypeof(Program).GetMethod("WhatAmI",Di2015NewLine    BindingFlags.Static | BindingFlags.NonPublic)Di2015NewLine    .MakeGenericMethod(x.GetType()).Invoke(null, new object[] { x });Di2015NewLine
420969Di2015UniqueSeparator<T>
420969Di2015UniqueSeparatorobject
420969Di2015UniqueSeparatorActivator
420969Di2015UniqueSeparator    private static void WhatAmI<T>() where T : new()Di2015NewLine    {Di2015NewLine        T x = new T();Di2015NewLine        Console.WriteLine("T is: " + typeof(T).FullName);Di2015NewLine        Console.WriteLine("x is: " + x.GetType().FullName);Di2015NewLine    }Di2015NewLine
420969Di2015UniqueSeparator    // Get the Type of a property by reflection.Di2015NewLine    Type myPropType = typeof(Program).GetProperty("SomeProp").PropertyType;Di2015NewLineDi2015NewLine    // Now call a generic method just using the typeDi2015NewLine    typeof(Program).GetMethod("WhatAmI",Di2015NewLine        BindingFlags.Static | BindingFlags.NonPublic)Di2015NewLine            .MakeGenericMethod(myPropType).Invoke(null, null);Di2015NewLine
421044Di2015UniqueSeparatorList<myType> myList = new List<myType>(someCapacity);Di2015NewLine.Di2015NewLine...populate the list with query from database...Di2015NewLine.Di2015NewLine
421044Di2015UniqueSeparatorDataGridTableStyle myDataGridTableStyle = new DatGridtTableStyle();Di2015NewLineDataGridTextBoxColumn colA = new DataGridTextBoxColumn();Di2015NewLineDataGridTextBoxColumn colB = new DataGridTextBoxColumn();Di2015NewLineDataGridTextBoxColumn colC = new DataGridTextBoxColumn();Di2015NewLineDi2015NewLinecolA.MappingName = "FieldA";Di2015NewLinecolA.HeaderText = "Field A";Di2015NewLinecolA.Width = 50; // or whatever;Di2015NewLineDi2015NewLinecolB.MappingName = "FieldB";Di2015NewLine.Di2015NewLine... etc. (lather, rinse, repeat for each column I want)Di2015NewLine.Di2015NewLineDi2015NewLinemyDataGridTableStyle.GridColumnStyles.Add(colA);Di2015NewLinemyDataGridTableStyle.GridColumnStyles.Add(colB);Di2015NewLinemyDataGridTableStyle.GridColumnStyles.Add(colC);Di2015NewLine
421044Di2015UniqueSeparatorvar query = from i in myListDi2015NewLine            select newDi2015NewLine            {Di2015NewLine                i.FieldA,Di2015NewLine                i.FieldB,Di2015NewLine                i.FieldCDi2015NewLine            };Di2015NewLineDi2015NewLinemyBindingSource.DataSource = query.ToList(); // Thanks Marc GravellDi2015NewLineDi2015NewLine// wasn't sure what else to pass in here, but null worked.Di2015NewLinemyDataGridTableStyle.MappingName = myBindingSource.GetListName(null); Di2015NewLineDi2015NewLinemyDataGrid.TableStyles.Clear(); // Recommended on MSDN in the code examples.Di2015NewLinemyDataGrid.TablesStyles.Add(myDataGridTableStyle);Di2015NewLinemyDataGrid.DataSource = myBindingSource;Di2015NewLine
421191Di2015UniqueSeparatorAttach
421191Di2015UniqueSeparatorDataContext
421191Di2015UniqueSeparatorOffertaDataContext
421191Di2015UniqueSeparatorAttach
421207Di2015UniqueSeparatorHttpContext.Current.Response.End();Di2015NewLine
421216Di2015UniqueSeparator  <configSections>Di2015NewLine      <section name="Connections"Di2015NewLine         type="BPA.AMP.Configuration.XmlConfigurator, BPA.AMP.Data.Config.DAL"/>Di2015NewLine      <section name="AutoProcessConfig"Di2015NewLine         type="BPA.AMP.Configuration.XmlConfigurator, BPA.AMP.Data.Config.DAL"/>Di2015NewLine  </configSections>Di2015NewLineDi2015NewLineDi2015NewLine  <Connections configSource="Config\\Connections.config" />Di2015NewLine  <AutoProcessConfig configSource="Config\\AutoProcess.config" />Di2015NewLine
421216Di2015UniqueSeparator   public class XmlConfigurator : IConfigurationSectionHandlerDi2015NewLine    {Di2015NewLine        public object Create(object parent, Di2015NewLine                          object configContext, XmlNode section)Di2015NewLine        {Di2015NewLine            XPathNavigator xPN;Di2015NewLine            if (section == null || (xPN = section.CreateNavigator()) == null ) Di2015NewLine                 return null;Di2015NewLine            // ---------------------------------------------------------Di2015NewLine            Type sectionType = Type.GetType((string)xPN.EvaluateDi2015NewLine                                    ("string(@configType)"));Di2015NewLine            XmlSerializer xs = new XmlSerializer(sectionType);Di2015NewLine            return xs.Deserialize(new XmlNodeReader(section));Di2015NewLine        }Di2015NewLine    }Di2015NewLine
421263Di2015UniqueSeparatorvar @class = new object();Di2015NewLine
421436Di2015UniqueSeparatorThread.Abort()
421436Di2015UniqueSeparatorreset the timer on every keystroke
421505Di2015UniqueSeparatorOnPaint
421523Di2015UniqueSeparatorpublic partial class DaysOfWeekPicker : UserControlDi2015NewLine{Di2015NewLine\public event EventHandler ValueChanged;Di2015NewLineDi2015NewLine\private DaysOfWeek myValue;Di2015NewLineDi2015NewLine\[DefaultValue (0)]Di2015NewLine\public DaysOfWeek ValueDi2015NewLine\{Di2015NewLine\\get { return myValue; }Di2015NewLine\\set { myValue = value; RefreshData (); }Di2015NewLine\}Di2015NewLineDi2015NewLine\public DaysOfWeekPicker ()Di2015NewLine\{Di2015NewLine\\InitializeComponent ();Di2015NewLine\}Di2015NewLineDi2015NewLine\private void DayOfWeekClick (object sender, EventArgs e)Di2015NewLine\{Di2015NewLine\\if (Object.ReferenceEquals (sender, g_l_Sunday))Di2015NewLine\\{Di2015NewLine\\\this.Value = this.Value ^ DaysOfWeek.Sunday;Di2015NewLine\\}Di2015NewLine\\else if (Object.ReferenceEquals (sender, g_l_Monday))Di2015NewLine\\{Di2015NewLine\\\this.Value = this.Value ^ DaysOfWeek.Monday;Di2015NewLine\\}Di2015NewLine\\else if (Object.ReferenceEquals (sender, g_l_Tuesday))Di2015NewLine\\{Di2015NewLine\\\this.Value = this.Value ^ DaysOfWeek.Tuesday;Di2015NewLine\\}Di2015NewLine\\else if (Object.ReferenceEquals (sender, g_l_Wednesday))Di2015NewLine\\{Di2015NewLine\\\this.Value = this.Value ^ DaysOfWeek.Wednesday;Di2015NewLine\\}Di2015NewLine\\else if (Object.ReferenceEquals (sender, g_l_Thursday))Di2015NewLine\\{Di2015NewLine\\\this.Value = this.Value ^ DaysOfWeek.Thursday;Di2015NewLine\\}Di2015NewLine\\else if (Object.ReferenceEquals (sender, g_l_Friday))Di2015NewLine\\{Di2015NewLine\\\this.Value = this.Value ^ DaysOfWeek.Friday;Di2015NewLine\\}Di2015NewLine\\else if (Object.ReferenceEquals (sender, g_l_Saturday))Di2015NewLine\\{Di2015NewLine\\\this.Value = this.Value ^ DaysOfWeek.Saturday;Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine\private void RefreshData ()Di2015NewLine\{Di2015NewLine\\SetLabelDisplay (g_l_Sunday, (this.Value & DaysOfWeek.Sunday) == DaysOfWeek.Sunday);Di2015NewLine\\SetLabelDisplay (g_l_Monday, (this.Value & DaysOfWeek.Monday) == DaysOfWeek.Monday);Di2015NewLine\\SetLabelDisplay (g_l_Tuesday, (this.Value & DaysOfWeek.Tuesday) == DaysOfWeek.Tuesday);Di2015NewLine\\SetLabelDisplay (g_l_Wednesday, (this.Value & DaysOfWeek.Wednesday) == DaysOfWeek.Wednesday);Di2015NewLine\\SetLabelDisplay (g_l_Thursday, (this.Value & DaysOfWeek.Thursday) == DaysOfWeek.Thursday);Di2015NewLine\\SetLabelDisplay (g_l_Friday, (this.Value & DaysOfWeek.Friday) == DaysOfWeek.Friday);Di2015NewLine\\SetLabelDisplay (g_l_Saturday, (this.Value & DaysOfWeek.Saturday) == DaysOfWeek.Saturday);Di2015NewLineDi2015NewLine\\if (this.ValueChanged != null) this.ValueChanged (this, EventArgs.Empty);Di2015NewLine\}Di2015NewLineDi2015NewLine\private void SetLabelDisplay (LinkLabel label, bool enabled)Di2015NewLine\{Di2015NewLine\\if (enabled)Di2015NewLine\\{Di2015NewLine\\\label.BackColor = Color.Black;Di2015NewLine\\\label.ForeColor = Color.White;Di2015NewLine\\}Di2015NewLine\\elseDi2015NewLine\\{Di2015NewLine\\\label.BackColor = Color.White;Di2015NewLine\\\label.ForeColor = Color.Black;Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLine
421602Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Guts guts = new Guts();Di2015NewLineDi2015NewLine    if (runWinForms)Di2015NewLine    {Di2015NewLine        System.Windows.Forms.Application.EnableVisualStyles();Di2015NewLine        System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(false);Di2015NewLineDi2015NewLine        FormWrapper fw = new FormWrapper(guts);Di2015NewLineDi2015NewLine        System.Windows.Forms.Application.Run(fw);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        ServiceBase[] ServicesToRun;Di2015NewLine        ServicesToRun = new ServiceBase[] { new ServiceWrapper(guts) };Di2015NewLine        ServiceBase.Run(ServicesToRun);Di2015NewLine    }Di2015NewLine}Di2015NewLine
421654Di2015UniqueSeparatorMakePackageSelectionUrl(((System.Data.DataRowView)Container.DataItem)["PackageId"])Di2015NewLine
421766Di2015UniqueSeparatorusing Microsoft.Win32;Di2015NewLineDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine        var Aliases = Registry.LocalMachine.OpenSubKey(Di2015NewLine\\    @"SOFTWARE\\Microsoft\\MSSQLServer\\Client\\ConnectTo");Di2015NewLine        Aliases.GetValue("Alias");Di2015NewLine}Di2015NewLine
421800Di2015UniqueSeparatorList<Supplier> SupplierList = mSupplierService.GetSuppliers();Di2015NewLineSupplierList.Sort(new GenericComparer<Supplier>(mView.SortExpression, mView.SortDirection));Di2015NewLinemView.Suppliers = SupplierList;Di2015NewLine
421800Di2015UniqueSeparatorpublic class GenericComparer<T> : IComparer<T>Di2015NewLine {Di2015NewLineDi2015NewLine     private string mDirection;Di2015NewLine     private string mExpression;Di2015NewLineDi2015NewLine     public GenericComparer(string Expression, string Direction)Di2015NewLine     {Di2015NewLine         mExpression = Expression;Di2015NewLine         mDirection = Direction;Di2015NewLine     }Di2015NewLineDi2015NewLine     public int Compare(T x, T y)Di2015NewLine     {Di2015NewLine         PropertyInfo propertyInfo = typeof(T).GetProperty(mExpression);Di2015NewLine         IComparable obj1 = (IComparable)propertyInfo.GetValue(x, null);Di2015NewLine         IComparable obj2 = (IComparable)propertyInfo.GetValue(y, null);Di2015NewLine         if (mDirection == "Ascending") {Di2015NewLine             return obj1.CompareTo(obj2);Di2015NewLine         }Di2015NewLine         else {Di2015NewLine             return obj2.CompareTo(obj1);Di2015NewLine         }Di2015NewLine     }Di2015NewLine }Di2015NewLine
421812Di2015UniqueSeparatorint tmp;Di2015NewLinetry {Di2015NewLine  tmp = ...Di2015NewLine} finally {Di2015NewLine  ...Di2015NewLine}Di2015NewLinereturn tmp;Di2015NewLine
421812Di2015UniqueSeparatorstatic int Test() {Di2015NewLine    try {Di2015NewLine        return SomeNumber();Di2015NewLine    } finally {Di2015NewLine        Foo();Di2015NewLine    }Di2015NewLine}Di2015NewLine
421812Di2015UniqueSeparator.method private hidebysig static int32 Test() cil managedDi2015NewLine{Di2015NewLine    .maxstack 1Di2015NewLine    .locals init (Di2015NewLine        [0] int32 CS$1$0000)Di2015NewLine    L_0000: call int32 Program::SomeNumber()Di2015NewLine    L_0005: stloc.0 Di2015NewLine    L_0006: leave.s L_000eDi2015NewLine    L_0008: call void Program::Foo()Di2015NewLine    L_000d: endfinally Di2015NewLine    L_000e: ldloc.0 Di2015NewLine    L_000f: ret Di2015NewLine    .try L_0000 to L_0008 finally handler L_0008 to L_000eDi2015NewLine}Di2015NewLine
421812Di2015UniqueSeparatorCS$1$0000
421812Di2015UniqueSeparatorprivate static int Test()Di2015NewLine{Di2015NewLine    int CS$1$0000;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        CS$1$0000 = SomeNumber();Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        Foo();Di2015NewLine    }Di2015NewLine    return CS$1$0000;Di2015NewLine}Di2015NewLine
422366Di2015UniqueSeparatorpublic class CarLotViewModelDi2015NewLine{Di2015NewLine     public List<Car> Cars { get; set; }Di2015NewLine     public List<Dealer> NearbyDealers { get; set; }Di2015NewLine}Di2015NewLine
422366Di2015UniqueSeparatorpublic partial class CarLot : ViewPage<CarLotViewModel>Di2015NewLine{    Di2015NewLine}Di2015NewLine
422366Di2015UniqueSeparatorCarLotViewModel model = new CarLotViewModel();Di2015NewLinemodel.Cars = GetCars();Di2015NewLinemodel.NearbyDealers = GetDealers();Di2015NewLinereturn View(model);Di2015NewLine
422366Di2015UniqueSeparator<% foreach (Car car in ViewData.Model.Cars) { %>Di2015NewLine....Di2015NewLine<% foreach (Dealer dealer in ViewData.Model.NearbyDealers) { %>Di2015NewLine
422466Di2015UniqueSeparatorobject items = _repository.GetType().GetMethod("ListAll"+type+"Exceptions")Di2015NewLine                          .Invoke(_repository, null);Di2015NewLine
422466Di2015UniqueSeparatorswitch
422466Di2015UniqueSeparatorif/else
422466Di2015UniqueSeparatorswitch (type) {Di2015NewLine    case "ladm": return View("ladm", _repository.ListAllLADMExceptions());Di2015NewLine    case "....": return View(....);Di2015NewLine}Di2015NewLine
422494Di2015UniqueSeparatorusing System.Linq;Di2015NewLine
422502Di2015UniqueSeparator<system.serviceModel>Di2015NewLine\<services>Di2015NewLine\\<service name="ServiceName" behaviorConfiguration="ServiceName.Service1Behavior">Di2015NewLine\\\<endpoint address="" binding="wsHttpBinding" contract="iServiceName">Di2015NewLine\\\</endpoint>Di2015NewLine\\\<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>Di2015NewLine\\</service>Di2015NewLine\</services>Di2015NewLine\<behaviors>Di2015NewLine\\<serviceBehaviors>Di2015NewLine\\\<behavior name="ServiceName.Service1Behavior">Di2015NewLine\\\\<!-- To avoid disclosing metadata information, set the value below to false and remove the metadata endpoint above before deployment -->Di2015NewLine\\\\<serviceMetadata httpGetEnabled="true"/>Di2015NewLine\\\\<!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->Di2015NewLine\\\\<serviceDebug includeExceptionDetailInFaults="true"/>Di2015NewLine\\\</behavior>Di2015NewLine\\</serviceBehaviors>Di2015NewLine\</behaviors>Di2015NewLine</system.serviceModel>Di2015NewLine
422557Di2015UniqueSeparatorScreen
422557Di2015UniqueSeparator.PrimaryScreen.Bounds.Size
422557Di2015UniqueSeparatorScreen.GetBounds(myform)
422557Di2015UniqueSeparatorPointF dpi = PointF.Empty;Di2015NewLineusing(Graphics g = this.CreateGraphics()){Di2015NewLine    dpi.X = g.DpiX;Di2015NewLine    dpi.Y = g.DpiY;Di2015NewLine}Di2015NewLine
422668Di2015UniqueSeparatorpublic void OuterMethod(object parameter)Di2015NewLine{Di2015NewLine    if (parameter is int)Di2015NewLine        InnerMethod((int)parameter);Di2015NewLine    else if (parameter is string)Di2015NewLine        InnerMethod((string)parameter);Di2015NewLine    elseDi2015NewLine        throw new SomeKindOfException();Di2015NewLine}Di2015NewLine
422795Di2015UniqueSeparator<ControlTemplate x:Key="WindowControlTemplate1" TargetType="{x:Type Window}">Di2015NewLine    <Border Di2015NewLine        Background="{TemplateBinding Background}" Di2015NewLine        BorderBrush="{TemplateBinding BorderBrush}" Di2015NewLine        BorderThickness="{TemplateBinding BorderThickness}"Di2015NewLine        >Di2015NewLine        <Grid>Di2015NewLine            <Grid.RowDefinitions>Di2015NewLine                <RowDefinition Height="Auto"/>Di2015NewLine                <RowDefinition Height="0.93*"/>Di2015NewLine                <RowDefinition Height="Auto"/>Di2015NewLine            </Grid.RowDefinitions>Di2015NewLineDi2015NewLine            <Grid.ColumnDefinitions>Di2015NewLine                <ColumnDefinition Width="0.21*"/>Di2015NewLine                <ColumnDefinition Width="0.79*"/>Di2015NewLine            </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine            <ContentPresenter Di2015NewLine                Grid.ColumnSpan="2" Di2015NewLine                Grid.Row="1" Di2015NewLine                Content="{TemplateBinding Content}" Di2015NewLine                ContentTemplate="{TemplateBinding ContentTemplate}"Di2015NewLine                />Di2015NewLine            <ResizeGrip Di2015NewLine                HorizontalAlignment="Right" Di2015NewLine                x:Name="WindowResizeGrip" Di2015NewLine                VerticalAlignment="Bottom" Di2015NewLine                IsTabStop="False" Di2015NewLine                Visibility="Collapsed" Di2015NewLine                Grid.Column="1" Di2015NewLine                Grid.Row="2"Di2015NewLine                />Di2015NewLine            <TextBlock Text="My Logo" />Di2015NewLine            <TextBlock Grid.Column="1" Text="My Title"/>Di2015NewLine            <StatusBar Height="20" Grid.ColumnSpan="2" Grid.Row="2"/>Di2015NewLine        </Grid>Di2015NewLine    </Border>Di2015NewLineDi2015NewLine    <ControlTemplate.Triggers>Di2015NewLine        <MultiTrigger>Di2015NewLine            <MultiTrigger.Conditions>Di2015NewLine                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>Di2015NewLine                <Condition Property="WindowState" Value="Normal"/>Di2015NewLine            </MultiTrigger.Conditions>Di2015NewLine            <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>Di2015NewLine        </MultiTrigger>Di2015NewLine    </ControlTemplate.Triggers>Di2015NewLine</ControlTemplate>Di2015NewLine
422873Di2015UniqueSeparatorC:\\Windows\\System
422873Di2015UniqueSeparatorC:\\Program Files\\CompanyName\\Shared Files
422873Di2015UniqueSeparatorShared Files
423010Di2015UniqueSeparatorFacebookRequestParameterList
423010Di2015UniqueSeparatorFacebookRequest
423010Di2015UniqueSeparator_parameters
423010Di2015UniqueSeparatorFacebookRequestParameterList
423010Di2015UniqueSeparatornull
423092Di2015UniqueSeparatorpublic IEnumerable<string> Example(IEnumerable<IEnumerable<string>> enumerable) {Di2015NewLine  return enumerable.SelectMany(x => x);Di2015NewLine}Di2015NewLine
423168Di2015UniqueSeparator IKernel kernel = new StandardKernel(Di2015NewLine                new InlineModule(Di2015NewLine                    x => x.Bind<ICustomerRepository>().To<CustomerRepository>(),Di2015NewLine                    x => x.Bind<ICustomerService>().To<CustomerService>(),Di2015NewLine                    x => x.Bind<Form1>().ToSelf()Di2015NewLine                    ));Di2015NewLine
423168Di2015UniqueSeparatorObjectFactory.Initialize(x =>Di2015NewLine{Di2015NewLine    x.UseDefaultStructureMapConfigFile = false;Di2015NewLine    x.ForRequestedType<ICustomerRepository>()Di2015NewLine        .TheDefaultIsConcreteType<CustomerRepository>()Di2015NewLine        .CacheBy(InstanceScope.Singleton);Di2015NewLineDi2015NewLine    x.ForRequestedType<ICustomerService>()Di2015NewLine        .TheDefaultIsConcreteType<CustomerService>()Di2015NewLine        .CacheBy(InstanceScope.Singleton);Di2015NewLineDi2015NewLine    x.ForConcreteType<Form1>();Di2015NewLine });Di2015NewLine
423168Di2015UniqueSeparator container.RegisterType<ICustomerRepository, CustomerRepository>()Di2015NewLine          .RegisterType<ICustomerService, CustomerService>();Di2015NewLine
423168Di2015UniqueSeparatorIWindsorContainer container = new WindsorContainer();Di2015NewLinecontainer.AddComponentWithLifestyle<ICustomerRepository, CustomerRepository>("CustomerRepository", LifestyleType.Singleton);Di2015NewLinecontainer.AddComponentWithLifestyle<ICustomerService, CustomerService>("CustomerService",LifestyleType.Singleton);Di2015NewLinecontainer.AddComponent<Form1>("Form1");Di2015NewLine
423168Di2015UniqueSeparatorvar builder = new ContainerBuilder();Di2015NewLinebuilder.Register<CustomerRepository>()Di2015NewLine        .As<ICustomerRepository>()Di2015NewLine        .ContainerScoped();Di2015NewLinebuilder.Register<CustomerService>()Di2015NewLine        .As<ICustomerService>()Di2015NewLine        .ContainerScoped();Di2015NewLinebuilder.Register<Form1>();Di2015NewLine
423210Di2015UniqueSeparatorpublic static List<String> DiffObjectsProperties(object a, object b)Di2015NewLine{Di2015NewLine    Type type = a.GetType();Di2015NewLine    List<String> differences = new List<String>();Di2015NewLine    foreach (PropertyInfo p in type.GetProperties())Di2015NewLine    {Di2015NewLine        object aValue = p.GetValue(a, null);Di2015NewLine        object bValue = p.GetValue(b, null);Di2015NewLineDi2015NewLine        if (p.PropertyType.IsPrimitive || p.PropertyType == typeof(string))Di2015NewLine        {Di2015NewLine            if (!aValue.Equals(bValue))Di2015NewLine                differences.Add(Di2015NewLine                    String.Format("{0}:{1}!={2}",p.Name, aValue, bValue)Di2015NewLine                );Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            differences.AddRange(DiffObjectsProperties(aValue, bValue));Di2015NewLine    }Di2015NewLineDi2015NewLine    return differences;Di2015NewLine}Di2015NewLine
423620Di2015UniqueSeparator\public class ListHelperDi2015NewLine\{Di2015NewLine\\public static BindingList<T> ToBindingList<T>(IList<T> data)Di2015NewLine\\{Di2015NewLine\\\BindingList<T> output = new BindingList<T>();Di2015NewLineDi2015NewLine\\\foreach (T item in data)Di2015NewLine\\\\output.Add(item);Di2015NewLineDi2015NewLine\\\return output;Di2015NewLine\\}Di2015NewLine\}Di2015NewLine
423661Di2015UniqueSeparatorpublic Form3()Di2015NewLine{Di2015NewLine\InitializeComponent();Di2015NewLineDi2015NewLine\string userFriendlyQuery = "Company.CompanyName = 'ABC Corp' AND Product.ProductCode = 'XYZ001'";Di2015NewLineDi2015NewLine\string[] queryConditions = userFriendlyQuery.Split(new string[]{" AND "},StringSplitOptions.None);Di2015NewLine\int conditionsCount = queryConditions.Length;Di2015NewLineDi2015NewLine\string itemFieldFriendlyQuery = string.Join(" OR ", Di2015NewLine\\queryConditions.Select(condition =>Di2015NewLine\\\{Di2015NewLine\\\\var conditionA = condition.Split(new string[] { " = " }, StringSplitOptions.None);Di2015NewLineDi2015NewLine\\\\var left = conditionA[0];Di2015NewLine\\\\var leftA = left.Split('.');Di2015NewLineDi2015NewLine\\\\string objectName = leftA[0];Di2015NewLine\\\\string objectProperty = leftA[1];Di2015NewLineDi2015NewLine\\\\var right = conditionA[1];Di2015NewLineDi2015NewLine\\\\return string.Format("ObjectName = '{0}' AND ObjectProperty = '{1}' AND ObjectValue = {2}",Di2015NewLine\\\\\objectName, objectProperty, right);Di2015NewLine\\\}Di2015NewLine\\).ToArray());Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine\MessageBox.Show(itemFieldFriendlyQuery);Di2015NewLineDi2015NewLine\// outputs: "ObjectName = 'Company' AND ObjectProperty = 'CompanyName' AND ObjectValue = 'ABC Corp' OR ObjectName = 'Product' AND ObjectProperty = 'ProductCode' AND ObjectValue = 'XYZ001'"Di2015NewLineDi2015NewLineDi2015NewLine\bool isValid = fieldItemList.AsQueryable().Where(itemFieldFriendlyQuery).Count() == conditionsCount;Di2015NewLineDi2015NewLineDi2015NewLine\MessageBox.Show(isValid.ToString());Di2015NewLine}Di2015NewLine
423754Di2015UniqueSeparatorLogging In:Di2015NewLineDi2015NewLineif (select count(*) from staff where staff_name = @staff_name and password = 'correct' and (last_logged_at = '' or last_logged_at = @unique_token) ) <> 0 then thenDi2015NewLineDi2015NewLine\-- allow login\\\Di2015NewLine\update staff set last_logged_at = @unique_token where staff_name = @staff_nameDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineelse if (select count(*) from staff where staff_name = @staff_name and password = 'correct' and last_logged_at <> @unique_token) <> 0 then thenDi2015NewLineDi2015NewLine\-- disallow loginDi2015NewLine\ throw exception "You cannot use the same user name on two or more computers.   Contact the administrator if you have any concerns"Di2015NewLineDi2015NewLineelseDi2015NewLineDi2015NewLine\-- disallow loginDi2015NewLine\throw exception "Wrong password"Di2015NewLineDi2015NewLineend ifDi2015NewLineDi2015NewLineDi2015NewLineLogging Out:Di2015NewLineDi2015NewLineupdate staff set last_logged_at = '' where staff_name = @staff_nameDi2015NewLine
424207Di2015UniqueSeparatorDateTime
424207Di2015UniqueSeparatorcorrectDate = correctDate.AddMinutes(TotalMinute)Di2015NewLine                         .AddMinutes(TotalMinutesAdded);Di2015NewLine
424414Di2015UniqueSeparatorpublic sealed class AuthenticationMethod {Di2015NewLineDi2015NewLine    private readonly String name;Di2015NewLine    private readonly int value;Di2015NewLineDi2015NewLine    public static readonly AuthenticationMethod FORMS = new AuthenticationMethod (1, "FORMS");Di2015NewLine    public static readonly AuthenticationMethod WINDOWSAUTHENTICATION = new AuthenticationMethod (2, "WINDOWS");Di2015NewLine    public static readonly AuthenticationMethod SINGLESIGNON = new AuthenticationMethod (3, "SSN");        Di2015NewLineDi2015NewLine    private AuthenticationMethod(int value, String name){Di2015NewLine        this.name = name;Di2015NewLine        this.value = value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override String ToString(){Di2015NewLine        return name;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
424414Di2015UniqueSeparatorprivate static readonly Dictionary<string, AuthenticationMethod> instance = new Dictionary<string,AuthenticationMethod>();Di2015NewLine
424414Di2015UniqueSeparatorinstance[name] = this;Di2015NewLine
424414Di2015UniqueSeparatorpublic static explicit operator AuthenticationMethod(string str)Di2015NewLine{Di2015NewLine    AuthenticationMethod result;Di2015NewLine    if (instance.TryGetValue(str, out result))Di2015NewLine        return result;Di2015NewLine    elseDi2015NewLine        throw new InvalidCastException();Di2015NewLine}Di2015NewLine
424427Di2015UniqueSeparator// This should all be refactored to make it less tightly-coupled, obviously.Di2015NewLineclass MyWindowsApplicationBase : WindowsFormsApplicationBaseDi2015NewLine{Di2015NewLine  internal MyWindowsApplicationBase() : base()Di2015NewLine  {Di2015NewLine    // This is a single instance application.Di2015NewLine    this.IsSingleInstance = true;Di2015NewLineDi2015NewLine    // Set to the instance of your form to run.Di2015NewLine    this.MainForm = new MyForm();Di2015NewLine  }Di2015NewLine}Di2015NewLine
424427Di2015UniqueSeparator// This should all be refactored to make it less tightly-coupled, obviously.Di2015NewLinepublic static void Main(string args[])Di2015NewLine{Di2015NewLine  // Process the args.Di2015NewLine  <process args here>Di2015NewLineDi2015NewLine  // Create the application base.Di2015NewLine  MyWindowsApplicationBase appBase = new MyWindowsApplicationBase();Di2015NewLineDi2015NewLine  // <1> Set the StartupNextInstance event handler.Di2015NewLine  appBase.StartupNextInstance = <event handler code>;Di2015NewLineDi2015NewLine  // Show the main form of the app.Di2015NewLine  appBase.Run(args);Di2015NewLine}Di2015NewLine
424492Di2015UniqueSeparator<Row>Di2015NewLine    <Cell><Data ss:Type="Number">7</Data></Cell>Di2015NewLine</Row>Di2015NewLine<Row>Di2015NewLine    <Cell><Data ss:Type="String" x:Ticked="1">007</Data></Cell>Di2015NewLine</Row>Di2015NewLine<Row>Di2015NewLine    <Cell ss:StyleID="s22"><Data ss:Type="Number">7</Data></Cell>Di2015NewLine</Row>Di2015NewLine
424492Di2015UniqueSeparatorwriter.WriteString("\\"");Di2015NewLine
424492Di2015UniqueSeparatorwriter.WriteString("=\\"");Di2015NewLine
424677Di2015UniqueSeparatorpublic int this[int key]Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return GetValue(key);Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        SetValue(key,value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
424769Di2015UniqueSeparatorSPList list = web.Lists["MyLibrary"];Di2015NewLine            if (list != null)Di2015NewLine            {Di2015NewLine                var results = from SPListItem listItem in list.ItemsDi2015NewLine                              select new Di2015NewLine                              {Di2015NewLine                                  xxx = (string)listItem["FieldName"]),Di2015NewLine                                  yyy  = (string)listItem["AnotherField"],Di2015NewLine                                  zzz = (string)listItem["Field"]Di2015NewLine                              };Di2015NewLine            }Di2015NewLine
424789Di2015UniqueSeparatorpublic void Subscribe(Action<string> messageCallBack)Di2015NewLine{Di2015NewLine    myButton.Click += () => messageCallBack("Button was clicked.");Di2015NewLine}Di2015NewLine
424789Di2015UniqueSeparatorprivate readonly List<Action<string>> callBacks;Di2015NewLinepublic MyClass()Di2015NewLine{Di2015NewLine    callBacks = new List<Action<string>>();Di2015NewLine    myButton.Click += myButton_Click;Di2015NewLine}Di2015NewLineDi2015NewLineprivate myButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    foreach (Action<string> callBack in callBacks)Di2015NewLine    {Di2015NewLine        callBack("Button was clicked");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Subscribe(Action<string> messageCallBack)Di2015NewLine{Di2015NewLine    callBacks.Add(messageCallBack);Di2015NewLine}Di2015NewLine
424852Di2015UniqueSeparatorif (o = null)
424914Di2015UniqueSeparatorXmlWriter
424914Di2015UniqueSeparatorXmlWriterSettings
424914Di2015UniqueSeparatorIndent
424914Di2015UniqueSeparator// The memory stream for the backing.Di2015NewLineusing (MemoryStream ms = new MemoryStream())Di2015NewLine{Di2015NewLine  // The settings for the XmlWriter.Di2015NewLine  XmlWriterSettings settings = new XmlWriterSettings();Di2015NewLineDi2015NewLine  // Do not indent.Di2015NewLine  settings.Indent = false;Di2015NewLineDi2015NewLine  // Create the XmlWriter.Di2015NewLine  using (XmlWriter xmlWriter = XmlWriter.Create(ms, settings))Di2015NewLine  {Di2015NewLine     // Write the data set to the writer.Di2015NewLine     dataSet.WriteXml(xmlWriter);Di2015NewLine  }Di2015NewLine}Di2015NewLine
425033Di2015UniqueSeparatorref
425033Di2015UniqueSeparator"foo".ConvertToLower()
425164Di2015UniqueSeparatorTheImporantData
425164Di2015UniqueSeparatorCar
425164Di2015UniqueSeparatorTheImportantData
425225Di2015UniqueSeparatorXElement myElement = XElement.Parse(xmlstring);Di2015NewLineDi2015NewLineint resultValue = 17;Di2015NewLineint age = 26;Di2015NewLinestring genderValue = "female";Di2015NewLineDi2015NewLineIEnumerable<string> query =Di2015NewLine    myElement.Descendants("ResultValue")Di2015NewLine        .Where(rv => ((int)rv.Attribute("low")) <= resultValue)Di2015NewLine        .Where(rv => ((int)rv.Attribute("high")) >= resultValue)Di2015NewLine        .Where(rv => rv.Ancestors("Age")Di2015NewLine            .Any(a => ((int) a.Attribute("low")) <= age && ((int) a.Attribute("high")) >= age)Di2015NewLine        )Di2015NewLine       .Where(rv => ((string)rv.Ancestors("Gender").Single().Attribute("type")) == genderValue)Di2015NewLine       .Select(rv => rv.Ancestors("Result").Single().Element("Description").Value);Di2015NewLineDi2015NewLine    foreach (string x in query)Di2015NewLine        Console.WriteLine(x);Di2015NewLine
425225Di2015UniqueSeparator        var query2 = myElement.Descendants("ResultValue")Di2015NewLine            .Select(rv => new Di2015NewLine            {Di2015NewLine                ResultValue = rv,Di2015NewLine                Age = rv.Ancestors("Age"),Di2015NewLine                Gender = rv.Ancestors("Gender"),Di2015NewLine                Result = rv.Ancestors("Result")Di2015NewLine            })Di2015NewLine            .Select(x => new XElement("Data",Di2015NewLine            new XAttribute("ResultValue.Low", (int)x.ResultValue.Attribute("low")),Di2015NewLine            new XAttribute("ResultValue.High", (int)x.ResultValue.Attribute("high")),Di2015NewLine            new XAttribute("Age.Low", (int)x.Age.Attributes("low").Single()),Di2015NewLine            new XAttribute("Age.High", (int)x.Age.Attributes("high").Single()),Di2015NewLine            new XAttribute("Gender.Type", (string) x.Gender.Attributes("type").Single()),Di2015NewLine            new XAttribute("Result.Description", (string) x.Result.Elements("Description").Single())Di2015NewLine            ));Di2015NewLine        foreach (XElement x in query2)Di2015NewLine            Console.WriteLine(x);Di2015NewLine
425311Di2015UniqueSeparatorSelectionChangeCommited
425332Di2015UniqueSeparatorpublic void LoadPageFromDisk(string filePath)Di2015NewLine{Di2015NewLine    Uri targetPage = null;Di2015NewLineDi2015NewLine    string workingPageURI = filePath.Trim();Di2015NewLineDi2015NewLine    workingPageURI = Path.GetFullPath(workingPageURI);Di2015NewLineDi2015NewLine    if (Uri.TryCreate(workingPageURI, UriKind.RelativeOrAbsolute, out targetPage) == true)Di2015NewLine    {Di2015NewLineDi2015NewLine        webBrowserControl.Navigate(targetPage);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
425361Di2015UniqueSeparator  public partial class Form1 : Form {Di2015NewLine    private Timer mTimer;Di2015NewLine    public Form1() {Di2015NewLine      InitializeComponent();Di2015NewLine      mTimer = new Timer();Di2015NewLine      mTimer.Interval = 200;Di2015NewLine      mTimer.Tick += mTimer_Tick;Di2015NewLine      mTimer.Enabled = true;Di2015NewLine    }Di2015NewLine    private void mTimer_Tick(object sender, EventArgs e) {Di2015NewLine      if (!this.DesktopBounds.Contains(Cursor.Position)) this.Close();Di2015NewLine    }Di2015NewLine  }Di2015NewLine
425384Di2015UniqueSeparator    //program.csDi2015NewLine    [STAThread]Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine        if (args.Length > 0)Di2015NewLine        {Di2015NewLine            //launch same form as normal or differentDi2015NewLine            Application.Run(new Form1(args));Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Application.Run(new Form1());Di2015NewLine        }Di2015NewLine    }Di2015NewLine
425656Di2015UniqueSeparatornamespace MyNameSpaceDi2015NewLine{Di2015NewLine    public class myclassDi2015NewLine    {Di2015NewLine        public myMethod()Di2015NewLine        {Di2015NewLine            // CodeDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
425656Di2015UniqueSeparatornamespace MyNameSpaceDi2015NewLine{Di2015NewLine    public class myclassDi2015NewLine    {Di2015NewLine        public static myMethod()Di2015NewLine        {Di2015NewLine            // CodeDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
425836Di2015UniqueSeparatorSqlParameter[] parameter = {Di2015NewLinenew SqlParameter(...), Di2015NewLinenew SqlParameter(...), Di2015NewLinenew SqlParameter(...)Di2015NewLine};Di2015NewLine
425871Di2015UniqueSeparatorString.Format("{0:(###) ###-#### x ###}", double.Parse("1234567890123"))Di2015NewLine
425896Di2015UniqueSeparatorSqlParameter
425896Di2015UniqueSeparatorSqlDbType
425896Di2015UniqueSeparatorSqlDbType.DateTime
425896Di2015UniqueSeparatorDateTime
425896Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    // Create the connection.Di2015NewLine    using (SqlConnection connection = new SqlConnection(@"Data Source=..."))Di2015NewLine    {Di2015NewLine        // Open the connection.Di2015NewLine        connection.Open();Di2015NewLineDi2015NewLine        // Create the command.Di2015NewLine        using (SqlCommand command = new SqlCommand("xsp_Test", connection))Di2015NewLine        {Di2015NewLine            // Set the command type.Di2015NewLine            command.CommandType = System.Data.CommandType.StoredProcedure;Di2015NewLineDi2015NewLine            // Add the parameter.Di2015NewLine            SqlParameter parameter = command.Parameters.Add("@dt",Di2015NewLine                System.Data.SqlDbType.DateTime);Di2015NewLineDi2015NewLine            // Set the value.Di2015NewLine            parameter.Value = DateTime.Now;Di2015NewLineDi2015NewLine            // Make the call.Di2015NewLine            command.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
425896Di2015UniqueSeparatorDateTime
425896Di2015UniqueSeparatorDateTime
425896Di2015UniqueSeparatorToUniversalTime
425896Di2015UniqueSeparatorToLocalTime
425941Di2015UniqueSeparatorpublic static string ToTitleCase(string inputString)Di2015NewLineDi2015NewLine{Di2015NewLineDi2015NewLine   System.Globalization.CultureInfo cultureInfo =Di2015NewLine   System.Threading.Thread.CurrentThread.CurrentCulture;Di2015NewLine   System.Globalization.TextInfo textInfo = cultureInfo.TextInfo;Di2015NewLine   return textInfo.ToTitleCase(inputString.ToLower());Di2015NewLineDi2015NewLine}Di2015NewLine
425943Di2015UniqueSeparatorclass Demo5Di2015NewLine{Di2015NewLinemsclr::auto_gcroot<FileSystemWatcher^> m_fsw;Di2015NewLinepublic:Di2015NewLine// Step (1)Di2015NewLine// Declare the delegate map where you mapDi2015NewLine// native method to specific event handlersDi2015NewLineDi2015NewLineBEGIN_DELEGATE_MAP(Demo5)Di2015NewLine    EVENT_DELEGATE_ENTRY(OnRenamed, Object^, RenamedEventArgs^)Di2015NewLineEND_DELEGATE_MAP()Di2015NewLineDi2015NewLineDemo5()Di2015NewLine{Di2015NewLine    m_fsw = gcnew  FileSystemWatcher("d:\\\\tmp");Di2015NewLine    // Step (2)Di2015NewLine    // Setup event handlers using MAKE_DELEGATEDi2015NewLine    m_fsw->Renamed += MAKE_DELEGATE(RenamedEventHandler, OnRenamed);Di2015NewLine    m_fsw->EnableRaisingEvents = true;Di2015NewLine}Di2015NewLine// Step (3)Di2015NewLine// Implement the event handler methodDi2015NewLineDi2015NewLinevoid OnRenamed(Object^, RenamedEventArgs^ e)Di2015NewLine{Di2015NewLine    Console::WriteLine("{0} -> {1}",e->OldName, e->Name);Di2015NewLine}Di2015NewLine};Di2015NewLine
425992Di2015UniqueSeparatorHELO example.comDi2015NewLineMAIL FROM: <me@me.com>Di2015NewLineRCPT TO: <him@him.com>Di2015NewLineDATADi2015NewLineSubject: test messageDi2015NewLineFrom: Me <me@me.com>Di2015NewLineTo: Him <him@him.com>Di2015NewLineDi2015NewLinetest messageDi2015NewLine.Di2015NewLineQUITDi2015NewLine
426013Di2015UniqueSeparatorDateTime dt = something; //Get from dbDi2015NewLineDi2015NewLineTimeSpan ts = dt - new DateTime(1,1,1970); // off the top of my head, check order of paramsDi2015NewLineDi2015NewLinelong ticks = ts.TotalTicks; // again off the top of my head, check property nameDi2015NewLine
426285Di2015UniqueSeparatorvar groups = keys.GroupBy(e=>e.Split(':').Last());Di2015NewLine
426356Di2015UniqueSeparatorthrow
426356Di2015UniqueSeparatorthrow
426356Di2015UniqueSeparatorthrow ex
426356Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    // Call to a WebServiceDi2015NewLine}Di2015NewLinecatch (SoapException ex)Di2015NewLine{Di2015NewLine    // Log Error and eat itDi2015NewLine}Di2015NewLinecatch (HttpException ex)Di2015NewLine{Di2015NewLine    // Log Error and eat itDi2015NewLine}Di2015NewLinecatch (WebException ex)Di2015NewLine{Di2015NewLine    // Log Error and eat itDi2015NewLine}Di2015NewLine
426539Di2015UniqueSeparatorObject
426681Di2015UniqueSeparator$teststring = 'Currency - {0:c}.  And a date - {1:ddd d MMM}.  And a plain string - {2}'Di2015NewLine[string]::Format($teststring, 160.45, Get-Date, 'Test String')Di2015NewLine
426681Di2015UniqueSeparator$teststring = 'Currency - {0:c}.  And a date - {1:ddd d MMM}.  And a plain string - {2}'Di2015NewLine$teststring -f 160.45, Get-Date, 'Test String'Di2015NewLine
426741Di2015UniqueSeparatorMyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=nullDi2015NewLine
427026Di2015UniqueSeparatorprivate void MeasureStringMin(PaintEventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    // Set up string.Di2015NewLine    string measureString = "Measure String";Di2015NewLine    Font stringFont = new Font("Arial", 16);Di2015NewLineDi2015NewLine    // Measure string.Di2015NewLine    SizeF stringSize = new SizeF();Di2015NewLine    stringSize = e.Graphics.MeasureString(measureString, stringFont);Di2015NewLineDi2015NewLine    // Draw rectangle representing size of string.Di2015NewLine    e.Graphics.DrawRectangle(new Pen(Color.Red, 1), 0.0F, 0.0F, stringSize.Width, stringSize.Height);Di2015NewLineDi2015NewLine    // Draw string to screen.Di2015NewLine    e.Graphics.DrawString(measureString, stringFont, Brushes.Black, new PointF(0, 0));Di2015NewLine}Di2015NewLine
427342Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Worker worker = new Worker();Di2015NewLine    worker.WorkCompleted += PostProcess;Di2015NewLine    worker.DoWork();Di2015NewLine}Di2015NewLine
427342Di2015UniqueSeparatorPostProcess
427342Di2015UniqueSeparatorThread.Join
427342Di2015UniqueSeparatorWorker
427342Di2015UniqueSeparatorworker.Thread.Join();Di2015NewLine
427342Di2015UniqueSeparatorThread
427342Di2015UniqueSeparatorWaitForCompletion
427342Di2015UniqueSeparatorWorker
427342Di2015UniqueSeparatorWaitHandle
427342Di2015UniqueSeparatorManualResetEvent
427342Di2015UniqueSeparatorWorker
427342Di2015UniqueSeparatorSet
427342Di2015UniqueSeparatorWaitOne
427342Di2015UniqueSeparatorvolatile bool complete
427342Di2015UniqueSeparatorWorker
427342Di2015UniqueSeparatortrue
427342Di2015UniqueSeparatorThread.Sleep
427350Di2015UniqueSeparatorusing HapHtmlDocument = HtmlAgilityPack.HtmlDocument;Di2015NewLineusing WfHtmlDocument = System.Windows.Forms.HtmlDocument;Di2015NewLine
427670Di2015UniqueSeparator@"(?s)set_Field\\(""[^""]*"",\\s*(?<vname>\\w+)(?<=\\bDateTime\\s+\\k<vname>\\b.+)"Di2015NewLine
427737Di2015UniqueSeparatorpublic sealed class StringWriterWithEncoding : StringWriterDi2015NewLine{Di2015NewLine    private readonly Encoding encoding;Di2015NewLineDi2015NewLine    public StringWriterWithEncoding (Encoding encoding)Di2015NewLine    {Di2015NewLine        this.encoding = encoding;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override Encoding EncodingDi2015NewLine    {Di2015NewLine        get { return encoding; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
428265Di2015UniqueSeparatorvar m3 = Regex.Match(pattern, item); // WrongDi2015NewLinevar m3 = Regex.Match(item, pattern); // CorrectDi2015NewLine
428411Di2015UniqueSeparator    // Helper FunctionsDi2015NewLine    private static List<T> RemoveDuplicates<T>(List<T> listWithDuplicates)Di2015NewLine    {Di2015NewLine        List<T> list = new List<T>();Di2015NewLine        foreach (T row in listWithDuplicates)Di2015NewLine        {Di2015NewLine            if(!list.Contains(row))Di2015NewLine                list.Add(row);Di2015NewLine        }Di2015NewLine        return list;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static List<DataRow> MatchingParents(DataTable table, string filter, string parentRelation)Di2015NewLine    {Di2015NewLine        List<DataRow> list = new List<DataRow>();Di2015NewLine        DataView filteredView = new DataView(table);Di2015NewLine        filteredView.RowFilter = filter;Di2015NewLine        foreach (DataRow row in filteredView.Table.Rows)Di2015NewLine        {Di2015NewLine            list.Add(row.GetParentRow(parentRelation));Di2015NewLine        }Di2015NewLine        return list;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Filtering CodeDi2015NewLine    List<DataRow> productRowsMatchingFeature = MatchingParents(productDS.Feature, Di2015NewLine                                                                   "Name = 'Width'",Di2015NewLine                                                                   "FK_Product_Feature");Di2015NewLineDi2015NewLine    List<DataRow> productRowsWithMatchingSupplier = MatchingParents(productDS.Supplier,Di2015NewLine                                                                   "Name = 'Microsoft'",Di2015NewLine                                                                   "FK_Product_Supplier");Di2015NewLineDi2015NewLine    List<DataRow> matchesBoth = productRowsMatchingFeature.FindAll(productRowsWithMatchingSupplier.Di2015NewLine                                                                           Contains);Di2015NewLineDi2015NewLine    List<DataRow> matchingProducts = RemoveDuplicates(matchesBoth);Di2015NewLine
428537Di2015UniqueSeparatorDataTable dtExport = (Session["dtSearchResults"] as DataTable).Copy();Di2015NewLine
428747Di2015UniqueSeparatorDictionary<int, Customer> customers = LoadCustomersFromFile();Di2015NewLine
428747Di2015UniqueSeparatorDictionary<int, Order> orders = LoadOrdersFromFile();Di2015NewLineforeach(Order o in orders.Values)Di2015NewLine{Di2015NewLine  customers[o.CustomerId].Orders.Add(o);Di2015NewLine}Di2015NewLine
428795Di2015UniqueSeparator$(function(){Di2015NewLine  $('input:submit').hide(); //hide the submit buttonDi2015NewLine  $('#submitLinkID').click(function(){  // bind the link's click eventDi2015NewLine    $('input:submit').click(); //click the hidden buttonDi2015NewLine    return false; //return false to stop the link from doing anythingDi2015NewLine  });Di2015NewLine});Di2015NewLine
428799Di2015UniqueSeparatorinternal interface IFooDi2015NewLine{Di2015NewLine    void Boo()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Boo:IFooDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass Foo: IFooDi2015NewLine{Di2015NewLine}Di2015NewLine
429003Di2015UniqueSeparatordgv.CurrentCell = dgv.Rows[0].Cells[0];Di2015NewLine
429003Di2015UniqueSeparatordgv.CurrentCell = null;Di2015NewLine
429075Di2015UniqueSeparatorpublic static double NextDouble(this Random rnd, double min, double max){Di2015NewLine    return rnd.NextDouble() * (max - min) + min;Di2015NewLine}Di2015NewLine
429075Di2015UniqueSeparatordouble x = rnd.NextDouble(-1, 1);Di2015NewLine
429075Di2015UniqueSeparator-1 <= x < 1
429248Di2015UniqueSeparator           Process[] processlist = Process.GetProcesses();Di2015NewLine            bool rdpclipFound = false;Di2015NewLineDi2015NewLine            foreach (Process theprocess in processlist)Di2015NewLine            {Di2015NewLine                String ProcessUserSID = GetProcessInfoByPID(theprocess.Id);Di2015NewLine                String CurrentUser = WindowsIdentity.GetCurrent().Name.Replace("SERVERNAME\\\\",""); Di2015NewLineDi2015NewLine                if (theprocess.ProcessName == "rdpclip" && ProcessUserSID == CurrentUser)Di2015NewLine                {Di2015NewLine                    theprocess.Kill();Di2015NewLine                    rdpclipFound = true;Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine            Process.Start("rdpclip");Di2015NewLine            if (rdpclipFound)Di2015NewLine            {Di2015NewLine               MessageBox.Show("rdpclip.exe successfully restarted"); }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine               MessageBox.Show("rdpclip was not running under your username.  It has been started, please try copying and pasting again.");Di2015NewLine            }Di2015NewLineDi2015NewLine            }Di2015NewLine
429317Di2015UniqueSeparator    Process[] p = Process.GetProcessesByName("myprocess.exe");Di2015NewLineDi2015NewLine    StreamReader sr = new StreamReader(p[0].StandardOutput);Di2015NewLineDi2015NewLine    while (sr.BaseStream.CanRead)Di2015NewLine    {Di2015NewLine        Console.WriteLine(sr.ReadLine());Di2015NewLine    }Di2015NewLine
429418Di2015UniqueSeparatorXmlSerializer
429463Di2015UniqueSeparatorvar
429463Di2015UniqueSeparatorSomeNamespace.AndSomeVeryLongTypeName foo = new SomeNamespace.AndSomeVeryLongTypeName();Di2015NewLine
429499Di2015UniqueSeparatorpublic static class WSDi2015NewLine{Di2015NewLine    private static object sync = new object();Di2015NewLine    private static MyWebService _MyWebServiceInstance;Di2015NewLineDi2015NewLine    public static MyWebService MyWebServiceInstanceDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            lock (sync)Di2015NewLine            {Di2015NewLine                if (_MyWebServiceInstance == null)Di2015NewLine                {Di2015NewLine                    _MyWebServiceInstance= new MyWebService();Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return _MyWebServiceInstance;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
429499Di2015UniqueSeparatorWS.MyWebServiceInstance.MyMethod(...)Di2015NewLine
429499Di2015UniqueSeparatorvar ws = WS.MyWebServiceInstance;Di2015NewLinews.MyMethod(...)Di2015NewLine
429534Di2015UniqueSeparatorint @class = 15;Di2015NewLine
429534Di2015UniqueSeparatorint class = 15;Di2015NewLine
429564Di2015UniqueSeparator    MethodInfo method = delegateType.GetMethod("Invoke");Di2015NewLine    Console.WriteLine(method.ReturnType.Name + " (ret)");Di2015NewLine    foreach (ParameterInfo param in method.GetParameters()) { Di2015NewLine        Console.WriteLine("{0} {1}", param.ParameterType.Name, param.Name);Di2015NewLine    }Di2015NewLine
429955Di2015UniqueSeparatorthis[]
429955Di2015UniqueSeparator  var mockClass = MockRepository.GenerateMock<MockClass>();Di2015NewLineDi2015NewLine  mockClass.Expect( m => m["key"] ).Return( "value" );  // return a valueDi2015NewLine  mockClass.Expect( m => m["key2"] = "value2" );  // set a valueDi2015NewLineDi2015NewLine  ... some test in here using something that depends on mockClass...Di2015NewLineDi2015NewLineDi2015NewLine  mockClass.VerifyAllExpectations();Di2015NewLine
430115Di2015UniqueSeparatorfixed
430160Di2015UniqueSeparator{[a-zA-Z\\.]*} = {[a-zA-Z\\.]*};
430160Di2015UniqueSeparator\\2 = \\1;
430160Di2015UniqueSeparator([a-zA-Z\\.]*) = ([a-zA-Z\\.]*);
430160Di2015UniqueSeparator${2} = ${1};
430160Di2015UniqueSeparator.*
430267Di2015UniqueSeparatorpublic class TimeFrame: IComparableDi2015NewLine{Di2015NewLine   private int days;Di2015NewLineDi2015NewLine   public int DaysDi2015NewLine   {Di2015NewLine        set Di2015NewLine        {Di2015NewLine             days = value;Di2015NewLine        }Di2015NewLine   }Di2015NewLineDi2015NewLine   public int CompareTo(object other)Di2015NewLine   {Di2015NewLine        //see this for implementation -- http://msdn.microsoft.com/en-us/library/system.icomparable.aspx#Mtps_DropDownFilterTextDi2015NewLine   }Di2015NewLineDi2015NewLineDi2015NewLine   public string DescriptionDi2015NewLine   {Di2015NewLine       get code to return the description string , ie "1-3 months"Di2015NewLine   }Di2015NewLineDi2015NewLine}Di2015NewLine
430341Di2015UniqueSeparatorvar availableTaks = typeof (TaskStatus).GetFields(BindingFlags.Static | BindingFlags.GetField | BindingFlags.Public)Di2015NewLine    .Where(f => f.GetCustomAttributes(typeof (ObsoleteAttribute), false).Length == 0);Di2015NewLineforeach(var task in availableTaks)Di2015NewLine    Console.WriteLine(task);Di2015NewLine
430544Di2015UniqueSeparator<table>
430544Di2015UniqueSeparatoriTextSharp.SimpleTable
430596Di2015UniqueSeparatorhtmldoc --webpage -t pdf --size letter --fontsize 10pt index.html > index.pdfDi2015NewLine
430709Di2015UniqueSeparatorstatic void DumpString (string value)Di2015NewLine{Di2015NewLine    foreach (char c in value)Di2015NewLine    {Di2015NewLine        Console.Write ("{0:x4} ", (int)c);Di2015NewLine    }Di2015NewLine    Console.WriteLine();Di2015NewLine}Di2015NewLine
430799Di2015UniqueSeparator public IPrincipal User {Di2015NewLine            get {Di2015NewLine                return HttpContext == null ? null : HttpContext.User;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
430799Di2015UniqueSeparatorpublic HttpContextBase HttpContext {Di2015NewLine        get {Di2015NewLine            return ControllerContext == null ? null : ControllerContext.HttpContext;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
430889Di2015UniqueSeparatorstatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        List<ThreadState> states = new List<ThreadState>();Di2015NewLine        ThreadState myState;Di2015NewLine        Thread myThread;Di2015NewLine        string data = "";Di2015NewLineDi2015NewLine        for (int i = 0; i < 4; i++)Di2015NewLine        {Di2015NewLine            myThread = new Thread(Work);Di2015NewLine            myState = new ThreadState();Di2015NewLine            myState.gate = new EventWaitHandle(false, EventResetMode.ManualReset);Di2015NewLine            myState.running = true;Di2015NewLine            myState.index = i + 1;Di2015NewLine            states.Add(myState);Di2015NewLine            myThread.Start(myState);Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("Enter q to quit.");Di2015NewLineDi2015NewLine        while (data != "q")Di2015NewLine        {Di2015NewLine            data = Console.ReadLine();Di2015NewLine            if (data != "q")Di2015NewLine                foreach (ThreadState state in states)Di2015NewLine                    state.gate.Set();Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (ThreadState state in states)Di2015NewLine        {Di2015NewLine            state.running = false;Di2015NewLine            state.gate.Set();Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("Press any key to quit.");Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Work(Object param)Di2015NewLine    {Di2015NewLine        ThreadState state = (ThreadState)param;Di2015NewLine        while (state.running)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Thread #" + state.index + " waiting...");Di2015NewLine            state.gate.WaitOne();Di2015NewLine            Console.WriteLine("Thread #" + state.index + " gate opened.");Di2015NewLine            state.gate.Reset();Di2015NewLine            Console.WriteLine("Thread #" + state.index + " gate closed.");Di2015NewLine        }Di2015NewLine        Console.WriteLine("Thread #" + state.index + " terminating.");Di2015NewLine    }Di2015NewLineDi2015NewLine    private class ThreadStateDi2015NewLine    {Di2015NewLine        public int index;Di2015NewLine        public EventWaitHandle gate;Di2015NewLine        public bool running;Di2015NewLine    }Di2015NewLine}Di2015NewLine
430978Di2015UniqueSeparatortar
430978Di2015UniqueSeparatortar
431058Di2015UniqueSeparatorrow.Table.Columns
431143Di2015UniqueSeparator Tache tache = mocks.StrictMock<Tache>();Di2015NewLine Expect.Call( mouvement.Tache ).Return( tache );Di2015NewLine
431143Di2015UniqueSeparator Mouvement mouvement = MockRepository.GenerateMock<Mouvement>();Di2015NewLine Tache tache = MockRepository.GenerateMock<Tache>();Di2015NewLineDi2015NewLine mouvement.Expect( m => m.Tache ).Return( tache );Di2015NewLine tache.Expect( t => t.Value ).Return( 100 );  // or whateverDi2015NewLineDi2015NewLine ... test code...Di2015NewLineDi2015NewLine tache.VerifyAllExpectations();Di2015NewLine mouvement.VerifyAllExpectations();Di2015NewLine
431161Di2015UniqueSeparatorif(queue.Count > 0)Di2015NewLine    queue.Dequeue();Di2015NewLine
431225Di2015UniqueSeparatorclass TestDi2015NewLine{Di2015NewLine    static int a = b + 1;Di2015NewLine    static int b = a + 1;Di2015NewLine    static void Main() {Di2015NewLine    \Console.WriteLine("a = {0}, b = {1}", a, b);Di2015NewLine    }Di2015NewLine}Di2015NewLine
431326Di2015UniqueSeparator.cs
431326Di2015UniqueSeparatorc:\\windows\\microsoft.net\\v2.0.50727\\CONFIG\\web.config
431326Di2015UniqueSeparator<httpHandlers>
431326Di2015UniqueSeparator<add path="*.cs" verb="*" type="System.Web.HttpForbiddenHandler" validate="True"/>Di2015NewLine
431326Di2015UniqueSeparator<configuration>Di2015NewLine   <system.web>Di2015NewLine      <httpHandlers>Di2015NewLine         <remove verb="*" path="*.cs"/>Di2015NewLine      </httpHandlers>Di2015NewLine   </system.web>Di2015NewLine</configuration>Di2015NewLine
431345Di2015UniqueSeparatorpublic IList<Foo> FoosDi2015NewLine{Di2015NewLine    get { return ...; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic IList<Bar> BarsDi2015NewLine{Di2015NewLine    get { return ...; }Di2015NewLine}Di2015NewLine
431345Di2015UniqueSeparatorC whatever = new C();Di2015NewLineFoo myFoo = whatever.Foos[13];Di2015NewLine
431424Di2015UniqueSeparator public DataSet parseIIF(Stream file) {Di2015NewLine            iifSet = new DataSet();Di2015NewLine            String fileText;Di2015NewLineDi2015NewLine            using (StreamReader sr = new StreamReader(file)) {Di2015NewLine                fileText = sr.ReadToEnd();Di2015NewLine            }Di2015NewLine            //replace line breaks with tabsDi2015NewLine            //fileText.Replace('\\n', '\\t');Di2015NewLine            fileText = fileText.Replace("\\r\\n", "\\n");Di2015NewLine            fileText = fileText.Replace('\\r', '\\n');Di2015NewLineDi2015NewLine            //split along tabsDi2015NewLine            string[] lines = fileText.Split('\\n');Di2015NewLineDi2015NewLine            this.createTables(lines, iifSet);Di2015NewLine            this.fillSet(lines, iifSet);Di2015NewLineDi2015NewLine            return iifSet;Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Reads an array of lines and parses them into tables for the datasetDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="lines">String Array of lines from the iif file</param>Di2015NewLine        /// <param name="iifSet">DataSet to be manipulated</param>Di2015NewLine        private void fillSet(string[] lines, DataSet set) {Di2015NewLine            //CODING HORRORDi2015NewLine            //WARNING: I will monkey with the for loop index, be prepared!Di2015NewLine            for (int i = 0; i < lines.Length; i++) {Di2015NewLine                if (this.isTableHeader(lines[i])) {Di2015NewLine                    //ignore this line, tables are alread definedDi2015NewLine                    continue;Di2015NewLine                }Di2015NewLine                if (lines[i] == "" || lines[i] == "\\r" || lines[i] == "\\n\\r" || lines[i] == "\\n") {Di2015NewLine                    //ignore lines that are empty if not inside a recordDi2015NewLine                    //probably the end of the file, it always ends with a blank line breakDi2015NewLine                    continue;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (lines[i].IndexOf(";__IMPORTED__") != -1) {Di2015NewLine                    continue;Di2015NewLine                    //just signifying that it's been imported by quickbook's timer before, don't need itDi2015NewLine                }Di2015NewLineDi2015NewLine                string line = lines[i];Di2015NewLine                while (!isFullLine(line, set)){Di2015NewLine                    i++;            //<--------------------------- MONKEYING done here!Di2015NewLine                    line += lines[i];       Di2015NewLine                }Di2015NewLine                //now, the line should be complete, we can parse it by tabs nowDi2015NewLine                this.parseRecord(line, set);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void parseRecord(string line, DataSet set) {Di2015NewLine            if (isTableHeader(line)) {Di2015NewLine                //we don't want to deal with headers hereDi2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            String tablename = line.Split('\\t')[0];Di2015NewLine            //this just removes the first value and the line break from the last valueDi2015NewLine            String[] parameters = this.createDataRowParams(line);Di2015NewLineDi2015NewLine            //add it to the datasetDi2015NewLine            set.Tables[tablename].Rows.Add(parameters);Di2015NewLine        }Di2015NewLineDi2015NewLine        private bool isFullLine(string line, DataSet set) {Di2015NewLine            if (isTableHeader(line)) {Di2015NewLine                return true;    //assumes table headers won't have line breaksDi2015NewLine            }Di2015NewLine            int values = line.Split('\\t').Length;Di2015NewLine            string tableName = line.Split('\\t')[0];Di2015NewLine            int columns = set.Tables[tableName].Columns.Count;Di2015NewLineDi2015NewLine            if (values < columns) {Di2015NewLine                return false;Di2015NewLine            } else {Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void createTables(string[] lines, DataSet set) {Di2015NewLine            for (int index = 0; index < lines.Length; index++) {Di2015NewLine                if (this.isTableHeader(lines[index])) {Di2015NewLine                    set.Tables.Add(createTable(lines[index]));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private bool isTableHeader(string tab) {Di2015NewLine            if (tab.StartsWith("!"))Di2015NewLine                return true;Di2015NewLine            elseDi2015NewLine                return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        private bool isNewLine(string p) {Di2015NewLine            if (p.StartsWith("!"))Di2015NewLine                return true;Di2015NewLine            if (iifSet.Tables[p.Split('\\t')[0]] != null)    //that little mess there grabs the first record in the line, sorry about the messDi2015NewLine                return true;Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine    private DataTable createTable(string line) {Di2015NewLine        String[] values = line.Split('\\t');Di2015NewLineDi2015NewLine        //first value is always the titleDi2015NewLine        //remove the ! from itDi2015NewLine        values[0] = values[0].Substring(1);     //remove the first characterDi2015NewLine        DataTable dt = new DataTable(values[0]);Di2015NewLine        values[0] = null;   //hide first title so it doesn't get used, cheaper than resetting arrayDi2015NewLine        foreach (String name in values) {Di2015NewLine            if (name == null || name == "")Di2015NewLine                continue;Di2015NewLine            DataColumn dc = new DataColumn(name, typeof(String));Di2015NewLine            try {Di2015NewLine                dt.Columns.Add(dc);Di2015NewLine            } catch (DuplicateNameException) {Di2015NewLine                //oddDi2015NewLine                dc = new DataColumn(name + "_duplicateCol" + dt.Columns.Count.ToString());Di2015NewLine                dt.Columns.Add(dc);Di2015NewLine                //if there is a triple, just throw itDi2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return dt;Di2015NewLine    }Di2015NewLineDi2015NewLine   private string getTableName(string line) {Di2015NewLine        String[] values = line.Split('\\t');Di2015NewLineDi2015NewLine        //first value is always the titleDi2015NewLine        if(values[0].StartsWith("!")){Di2015NewLine            //remove the ! from itDi2015NewLine            values[0] = values[0].Substring(1);     //remove the first characterDi2015NewLine        }Di2015NewLine        return values[0];Di2015NewLine    }Di2015NewLineDi2015NewLine    private string[] createDataRowParams(string line) {Di2015NewLine        string[] raw = line.Split('\\t');Di2015NewLine        string[] values = new string[raw.Length - 1];Di2015NewLineDi2015NewLine        //copy all values except the first oneDi2015NewLine        for (int i = 0; i < values.Length; i++) {Di2015NewLine            values[i] = raw[i + 1];Di2015NewLine        }Di2015NewLineDi2015NewLine        //remove last line break from the recordDi2015NewLine        if (values[values.Length - 1].EndsWith("\\n")) {Di2015NewLine            values[values.Length - 1] = values[values.Length - 1].Substring(0, values[values.Length - 1].LastIndexOf('\\n'));Di2015NewLine        } else if (values[values.Length - 1].EndsWith("\\n\\r")) {Di2015NewLine            values[values.Length - 1] = values[values.Length - 1].Substring(0, values[values.Length - 1].LastIndexOf("\\n\\r"));Di2015NewLine        } else if (values[values.Length - 1].EndsWith("\\r")) {Di2015NewLine            values[values.Length - 1] = values[values.Length - 1].Substring(0, values[values.Length - 1].LastIndexOf('\\r'));Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        return values;Di2015NewLine    }Di2015NewLineDi2015NewLine    private string[] createDataRowParams(string line, int max) {Di2015NewLine        string[] raw = line.Split('\\t');Di2015NewLineDi2015NewLine        int length = raw.Length - 1;Di2015NewLine        if (length > max) {Di2015NewLine            length = max;Di2015NewLine        }Di2015NewLineDi2015NewLine        string[] values = new string[length];Di2015NewLine        for (int i = 0; i < length; i++) {Di2015NewLine            values[i] = raw[i + 1];Di2015NewLine        }Di2015NewLineDi2015NewLine        if (values[values.Length - 1].EndsWith("\\n")) {Di2015NewLine            values[values.Length - 1] = values[values.Length - 1].Substring(0, values[values.Length - 1].LastIndexOf('\\n'));Di2015NewLine        } else if (values[values.Length - 1].EndsWith("\\n\\r")) {Di2015NewLine            values[values.Length - 1] = values[values.Length - 1].Substring(0, values[values.Length - 1].LastIndexOf("\\n\\r"));Di2015NewLine        } else if (values[values.Length - 1].EndsWith("\\r")) {Di2015NewLine            values[values.Length - 1] = values[values.Length - 1].Substring(0, values[values.Length - 1].LastIndexOf('\\r'));Di2015NewLine        }Di2015NewLineDi2015NewLine        return values;Di2015NewLine    }Di2015NewLine
431532Di2015UniqueSeparatorSELECT *Di2015NewLineFROM INFORMATION_SCHEMA.TABLESDi2015NewLineWHERE TABLE_NAME = 'TableName'Di2015NewLine
431796Di2015UniqueSeparator10^7 iterations using Sigmoid1() took 3899,1979 msDi2015NewLine10^7 iterations using Sigmoid2() took 411,4441 msDi2015NewLine
431796Di2015UniqueSeparator10^7 iterations using sigmoid1: 628 msDi2015NewLine10^7 iterations using sigmoid2: 157 msDi2015NewLine
431796Di2015UniqueSeparator10^7 iterations using sigmoid1: 588.843700 msDi2015NewLine10^7 iterations using sigmoid2: 156.626700 msDi2015NewLine
431857Di2015UniqueSeparatorif (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine{Di2015NewLine  string decodedText = HttpUtility.HtmlDecode(e.Row.Cells[0].Text);Di2015NewLine  e.Row.Cells[0].Text = decodedText;Di2015NewLine}Di2015NewLine
431975Di2015UniqueSeparatorwlan = new WlanClient();Di2015NewLine
431975Di2015UniqueSeparatorCollection<String> connectedSsids = new Collection<string>();Di2015NewLineDi2015NewLine        foreach (WlanClient.WlanInterface wlanInterface in wlan.Interfaces)Di2015NewLine        {Di2015NewLine            Wlan.Dot11Ssid ssid = wlanInterface.CurrentConnection.wlanAssociationAttributes.dot11Ssid;Di2015NewLine            connectedSsids.Add(new String(Encoding.ASCII.GetChars(ssid.SSID,0, (int)ssid.SSIDLength)));Di2015NewLine        }Di2015NewLine
432045Di2015UniqueSeparator-------------------------------------------------------------------------------Di2015NewLineLanguage          files     blank   comment      code    scale   3rd gen. equivDi2015NewLine-------------------------------------------------------------------------------Di2015NewLineASP.Net              21       290         0      3424 x   1.29 =        4416.96Di2015NewLineXML                   1         0         0        26 x   1.90 =          49.40Di2015NewLineDOS Batch             1         1         0         8 x   0.63 =           5.04Di2015NewLineC#                    1         0         0         4 x   1.36 =           5.44Di2015NewLine-------------------------------------------------------------------------------Di2015NewLineSUM:                 24       291         0      3462 x   1.29 =        4476.84Di2015NewLine-------------------------------------------------------------------------------Di2015NewLine
432102Di2015UniqueSeparatorProcess[] localAll = Process.GetProcesses().Where(o => o.ProcessName.ToLower() != "svchost");Di2015NewLine
432102Di2015UniqueSeparatorProcess[] localAll = Process.GetProcesses().Where(o => o.ProcessName.ToLower() != "svchost").ToArray();Di2015NewLine
432102Di2015UniqueSeparatorWhere
432102Di2015UniqueSeparatorIEnumerable<Process>
432102Di2015UniqueSeparatorToArray
432102Di2015UniqueSeparatorProcess
432102Di2015UniqueSeparatorIEnumerable<Process>
432102Di2015UniqueSeparatorWhere
432102Di2015UniqueSeparatorvar processes = Process.GetProcesses().Where(o => o.ProcessName.ToLower() != "svchost");Di2015NewLineforeach (Process process in processes) {Di2015NewLine    sw.WriteLine("      " + process.ProcessName);Di2015NewLine}Di2015NewLine
432190Di2015UniqueSeparatorswitch(text ?? String.Empty)Di2015NewLine{Di2015NewLine    case "":Di2015NewLine        break;Di2015NewLine    case "hi":Di2015NewLine        break;Di2015NewLine}Di2015NewLine
432220Di2015UniqueSeparatorList<string> yourList = new List<string> { "A", "B", "C" };Di2015NewLineDi2015NewLinevar results = from x in x.tableDi2015NewLine              where yourList.Contains(x)Di2015NewLine              select x;Di2015NewLine
432220Di2015UniqueSeparatorWHERE field IN ('A', 'B', 'C')
432251Di2015UniqueSeparatorFromFile
432251Di2015UniqueSeparatorImage
432265Di2015UniqueSeparatortag:google.com,2005:reader/feed/http://www.domain.com/blog/rss.xmlDi2015NewLine
432265Di2015UniqueSeparatoratomUrl = getUrl(item.Element(atomNS + "source").Element(atomNS + "id").Value)Di2015NewLine
432265Di2015UniqueSeparatorprivate String getUrl(String item) {Di2015NewLine    if (!item.Equals("")) {Di2015NewLine        return item.Substring(item.IndexOf("http://"));Di2015NewLine    }Di2015NewLine    return "";Di2015NewLine}Di2015NewLine
432346Di2015UniqueSeparatorOnClick
432346Di2015UniqueSeparatorLinkButton
432346Di2015UniqueSeparatorCustomValidator
432346Di2015UniqueSeparatorCustomValidator
432346Di2015UniqueSeparatorClientValidationFunction
432616Di2015UniqueSeparatorpublic IEnumerator<T> GetEnumerator() {Di2015NewLine    int position = 0; // stateDi2015NewLine    while(whatever) {Di2015NewLine        position++;Di2015NewLine        yield return ...something...;Di2015NewLine    }Di2015NewLine}Di2015NewLine
432616Di2015UniqueSeparatorReset
432616Di2015UniqueSeparatorint position = 0;Di2015NewLineforeach(var item in source) {Di2015NewLine   position++;Di2015NewLine   yield return position;Di2015NewLine}Di2015NewLine
432616Di2015UniqueSeparatorwhile(iter.MoveNext()) {Di2015NewLine   position++;Di2015NewLine   yield return iter.Current;Di2015NewLine}Di2015NewLine
432616Di2015UniqueSeparatorclass MyState<T> {Di2015NewLine    public int Position {get;private set;}Di2015NewLine    public T Current {get;private set;}Di2015NewLine    public MyState(int position, T current) {...} // assignDi2015NewLine}Di2015NewLine...Di2015NewLineyield return new MyState<Foo>(position, item);Di2015NewLine
432616Di2015UniqueSeparatorAction<int,T>
432616Di2015UniqueSeparator    static void Main() {Di2015NewLine        var values = new[] { "a", "b", "c" };Di2015NewLine        values.ForEach((pos, s) => Console.WriteLine("{0}: {1}", pos, s));            Di2015NewLine    }Di2015NewLine    static void ForEach<T>(Di2015NewLine            this IEnumerable<T> source,Di2015NewLine            Action<int, T> action) {Di2015NewLine        if (source == null) throw new ArgumentNullException("source");Di2015NewLine        if (action == null) throw new ArgumentNullException("action");Di2015NewLineDi2015NewLine        int position = 0;Di2015NewLine        foreach (T item in source) {Di2015NewLine            action(position++, item);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
432616Di2015UniqueSeparator0: aDi2015NewLine1: bDi2015NewLine2: cDi2015NewLine
432682Di2015UniqueSeparatorArray.Resize(ref arr, newSize);Di2015NewLine
432682Di2015UniqueSeparatorarr
432682Di2015UniqueSeparatorList<T>
432682Di2015UniqueSeparatorAdd
432682Di2015UniqueSeparatorRemove
432682Di2015UniqueSeparatorList<T>
432682Di2015UniqueSeparatorList<T>
432682Di2015UniqueSeparatorT[]
432682Di2015UniqueSeparatorList<int>
432682Di2015UniqueSeparatorint[]
432682Di2015UniqueSeparatorArrayList
432682Di2015UniqueSeparatorobject[]
432682Di2015UniqueSeparatorArray.Resize
432682Di2015UniqueSeparatorT
432682Di2015UniqueSeparatorBuffer.BlockCopy
432682Di2015UniqueSeparatorList<T>
432682Di2015UniqueSeparatorList<T>
432759Di2015UniqueSeparatorIEnumerable<T>
432836Di2015UniqueSeparatorGetHashCode
432836Di2015UniqueSeparatorAllianceName
432836Di2015UniqueSeparatorint IEqualityComparer<Village>.GetHashCode(Village obj)Di2015NewLine{Di2015NewLine    return obj.AllianceName.GetHashCode();Di2015NewLine}Di2015NewLine
432836Di2015UniqueSeparatorEquals
432836Di2015UniqueSeparatortrue
432836Di2015UniqueSeparatorVillage
432836Di2015UniqueSeparatorAllianceName
432836Di2015UniqueSeparatorDistinct
432836Di2015UniqueSeparatorDistinct
433031Di2015UniqueSeparatorExcept
433031Di2015UniqueSeparator   var exceptionList = new List { "exception1", "exception2" };Di2015NewLine   var query = myEntities.MyEntityDi2015NewLine                         .Select( e => e.Name )Di2015NewLine                         .Except( exceptionList );Di2015NewLine
433054Di2015UniqueSeparatorAssembly[] asms = AppDomain.CurrentDomain.GetAssemblies();Di2015NewLine
433115Di2015UniqueSeparatorAllocConsole()
433115Di2015UniqueSeparatorAttachConsole( ATTACH_PARENT_PROCESS /* -1 */)
433115Di2015UniqueSeparatorint main( int argc, char* argv[])Di2015NewLine{Di2015NewLine    int ch;Di2015NewLine    BOOL bResult;Di2015NewLineDi2015NewLine    printf( "default console\\n");Di2015NewLine    ch = getchar();Di2015NewLineDi2015NewLine    bResult = FreeConsole();Di2015NewLine    bResult = AllocConsole();    Di2015NewLine    printf( "AllocConsole()\\n");Di2015NewLine    ch = getchar();Di2015NewLineDi2015NewLine    bResult = FreeConsole();Di2015NewLine    bResult = AttachConsole( ATTACH_PARENT_PROCESS);    Di2015NewLine    printf( "AttachConsole( ATTACH_PARENT_PROCESS)\\n");Di2015NewLine    ch = getchar();Di2015NewLineDi2015NewLine    return 0;Di2015NewLine}Di2015NewLine
433116Di2015UniqueSeparatorint ret = 37;Di2015NewLineret = ret * 37 + field1.GetHashCode() * 23;Di2015NewLineret = ret * 37 + field2.GetHashCode() * 23;Di2015NewLineret = ret * 37 + field3.GetHashCode() * 23;Di2015NewLinereturn ret;Di2015NewLine
433247Di2015UniqueSeparatorstatic bool IsPalindromic(string s){Di2015NewLine    int len = s.Length;Di2015NewLine    int half = len-- >> 1;Di2015NewLine    for(int i = 0; i < half; i++)Di2015NewLine        if(s[i] != s[len - i])Di2015NewLine            return false;Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
433247Di2015UniqueSeparatorint
433247Di2015UniqueSeparatorulong
433247Di2015UniqueSeparatorfor(int i = 100; i < 1000; i++)Di2015NewLine    for(int j = i; j < 1000; j++) // calculations where j < i would be redundantDi2015NewLine        ...Di2015NewLine
433247Di2015UniqueSeparator913 * 993 = 906609
433299Di2015UniqueSeparatorprivate List<string> mAllianceList = new List<string>();Di2015NewLineprivate BindingList<string> bindingList;    Di2015NewLineDi2015NewLineprivate void FillAllianceList()Di2015NewLine{Di2015NewLine    // Add alliance name to member alliance listDi2015NewLine    foreach (Village alliance in alliances)Di2015NewLine    {Di2015NewLine        mAllianceList.Add(alliance.AllianceName);Di2015NewLine    }Di2015NewLineDi2015NewLine    bindingList = new BindingList<string>(mAllianceList);Di2015NewLineDi2015NewLine    // Bind alliance combobox to alliance listDi2015NewLine    this.cboAlliances.DataSource = bindingList;Di2015NewLine}Di2015NewLine
433299Di2015UniqueSeparatormAllianceList.Sort();Di2015NewLinebindingList = new BindingList<string>(mAllianceList);Di2015NewLinethis.cboAlliances.DataSource = bindingList;Di2015NewLine
433390Di2015UniqueSeparatordict[dict["abc"]] = 20;Di2015NewLine
433390Di2015UniqueSeparatordict[dict2["abc"]] = 20;Di2015NewLine
433390Di2015UniqueSeparatordict2["abc"]
433390Di2015UniqueSeparatorstring
433390Di2015UniqueSeparatorDictionary<string, string>
433390Di2015UniqueSeparatorDictionary<string, int> dict  = new Dictionary<string, int>();Di2015NewLineDictionary<string, string> dict2 = new Dictionary<string, string>();Di2015NewLinedict2["abc"] = "def";Di2015NewLinedict[dict2["abc"]] = 20;Di2015NewLine
433538Di2015UniqueSeparatorWM_
433538Di2015UniqueSeparatorNC
433538Di2015UniqueSeparatorLBUTTONDOWN
433538Di2015UniqueSeparatorHTCAPTION
433538Di2015UniqueSeparatorwParam
433538Di2015UniqueSeparatorWM_NCHITTEST
433538Di2015UniqueSeparatorHTCAPTION
433538Di2015UniqueSeparatorWM_NCHITTEST
433538Di2015UniqueSeparatorHTTRANSPARENT
433538Di2015UniqueSeparatorLocation
433538Di2015UniqueSeparatorclass MyForm : Form{Di2015NewLine    Point downAt;Di2015NewLineDi2015NewLine    MyForm(){Di2015NewLine        Label lbl      = new Label();Di2015NewLine        lbl.AutoSize   = true;Di2015NewLine        lbl.BackColor  = Color.Blue;Di2015NewLine        lbl.ForeColor  = Color.White;Di2015NewLine        lbl.Location   = new Point(50, 50);Di2015NewLine        lbl.Text       = "Drag me to move this form.";Di2015NewLine        lbl.Parent     = this;Di2015NewLine        lbl.MouseDown += (s, e)=>downAt = e.Location;Di2015NewLine        lbl.MouseMove += (s, e)=>{if(lbl.Capture) Location += (Size)e.Location - (Size)downAt;};Di2015NewLine    }Di2015NewLine}Di2015NewLine
433538Di2015UniqueSeparatorSub New()Di2015NewLine    Dim lbl As New LabelDi2015NewLine    lbl.AutoSize  = TrueDi2015NewLine    lbl.BackColor = Color.BlueDi2015NewLine    lbl.ForeColor = Color.WhiteDi2015NewLine    lbl.Location  = New Point(50, 50)Di2015NewLine    lbl.Text      = "Drag me to move this form."Di2015NewLine    lbl.Parent    = MeDi2015NewLine    AddHandler lbl.MouseDown, Function(ByVal s As Object, ByVal e As MouseEventArgs)Di2015NewLine        Me.downAt = e.LocationDi2015NewLine    End FunctionDi2015NewLine    AddHandler lbl.MouseMove, Function(ByVal s As Object, ByVal e As MouseEventArgs)Di2015NewLine        If lbl.Capture ThenDi2015NewLine            Me.Location = Me.Location + DirectCast(e.Location, Size) - DirectCast(Me.downAt, Size)Di2015NewLine        End IfDi2015NewLine    End FunctionDi2015NewLineEnd SubDi2015NewLine
433545Di2015UniqueSeparatorMyClass<int>
433545Di2015UniqueSeparatorMyIntClass
433545Di2015UniqueSeparatorMyIntClass
433545Di2015UniqueSeparatorMyClass<int>
433545Di2015UniqueSeparatorMyClass<int> foo = new MyIntClass();Di2015NewLineMyIntClass bar = (MyIntClass)foo; // this works.Di2015NewLine
433545Di2015UniqueSeparatorclass Base {Di2015NewLine   int x;Di2015NewLine}Di2015NewLineDi2015NewLineclass Derived : Base {Di2015NewLine   int y;Di2015NewLine}Di2015NewLineDi2015NewLineBase foo = new Base();Di2015NewLineDerived bar = (Derived)foo;Di2015NewLine
433545Di2015UniqueSeparatorbar.y
433545Di2015UniqueSeparatorDerived
433545Di2015UniqueSeparatorBase
433545Di2015UniqueSeparatorBase
433545Di2015UniqueSeparatorDerived
433545Di2015UniqueSeparatorBase
433629Di2015UniqueSeparatorStringField field = "value of new object";Di2015NewLinestring value=(string)field;Di2015NewLine
433629Di2015UniqueSeparator[System.Diagnostics.DebuggerDisplay("{Value}")]Di2015NewLinepublic class StringFieldDi2015NewLine{Di2015NewLine    public string Value { get; set; }Di2015NewLine    public static implicit operator StringField(string s)Di2015NewLine    {Di2015NewLine        return new StringField { Value = s };Di2015NewLine    }Di2015NewLineDi2015NewLine    public static explicit operator string(StringField f)Di2015NewLine    {Di2015NewLine        return f.Value;Di2015NewLine    }Di2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return Value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
433676Di2015UniqueSeparatorusing Foo = System.Collections.Generic.KeyValuePair<int, string>;Di2015NewLineDi2015NewLineclass C { Foo x; }Di2015NewLine
433714Di2015UniqueSeparatorFileStream
433714Di2015UniqueSeparatorOpen()
433714Di2015UniqueSeparatorpublic static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share) {Di2015NewLineDi2015NewLine   return new FileStream(path, mode, access, share);Di2015NewLineDi2015NewLine}Di2015NewLine
433879Di2015UniqueSeparator((Literal)lv.FindControl("litControlTitle")).Text = "Your text";Di2015NewLine
433949Di2015UniqueSeparatorvar c = myCustomer;Di2015NewLinemyCustomer.DoStuff();Di2015NewLineif (c == myCustomer) // returns false!!!Di2015NewLine
433969Di2015UniqueSeparatorExpression
434053Di2015UniqueSeparatorbyte[] buffer = new byte[input.Length];Di2015NewLineinput.Read(buffer, 0, buffer.Length);Di2015NewLineoutput.Write(buffer, 0, buffer.Length);Di2015NewLine
434053Di2015UniqueSeparatorbyte[] buffer = new byte[32 * 1024];Di2015NewLineint bytesRead;Di2015NewLinewhile ( (bytesRead = input.Read(buffer, 0, buffer.Length)) > 0)Di2015NewLine{Di2015NewLine    output.Write(buffer, 0, bytesRead);Di2015NewLine}Di2015NewLine
434133Di2015UniqueSeparatorpublic void Export(List<DataType> list)Di2015NewLine{Di2015NewLine    StringWriter sw = new StringWriter();Di2015NewLineDi2015NewLine    //First line for column namesDi2015NewLine    sw.WriteLine("\\"ID\\",\\"Date\\",\\"Description\\"");Di2015NewLineDi2015NewLine    foreach(DataType item in list)Di2015NewLine    {Di2015NewLine        sw.WriteLine(string.format("\\"{0}\\",\\"{1}\\",\\"{2}\\"",Di2015NewLine                                   item.ID,Di2015NewLine                                   item.Date,Di2015NewLine                                   item.Description));Di2015NewLine    }Di2015NewLineDi2015NewLine    Response.AddHeader("Content-Disposition", "attachment; filename=test.csv");Di2015NewLine    Response.ContentType = "text/csv";Di2015NewLine    Response.ContentEncoding = System.Text.Encoding.GetEncoding("utf-8");Di2015NewLine    Response.Write(sw);Di2015NewLine    Response.End(); Di2015NewLine}Di2015NewLine
434320Di2015UniqueSeparatort.GetType().GetMethod(s)Di2015NewLine
434602Di2015UniqueSeparatorIQueryable<T>
434602Di2015UniqueSeparatorExpression<Func<...>>
434602Di2015UniqueSeparator    public IQueryable<T> Get<T>(Di2015NewLine        Expression<Func<T,bool>> predicateDi2015NewLine        ) where T : classDi2015NewLine    {Di2015NewLine        IQueryable<T> query = (IQueryable<T>)GetTable(typeof(T));Di2015NewLine        if (predicate != null) query = query.Where(predicate);Di2015NewLine        return query;Di2015NewLine    }Di2015NewLine
434602Di2015UniqueSeparatorIQueryable<T>
434602Di2015UniqueSeparatorToList()
434602Di2015UniqueSeparator    using(var ctx = new MyDataContext(CONN))Di2015NewLine    {Di2015NewLine        ctx.Log = Console.Out;Di2015NewLine        int frCount = ctx.Get<Customer>(c => c.Country == "France").Count();Di2015NewLine    }Di2015NewLine
434602Di2015UniqueSeparatorSELECT COUNT(*) AS [value]Di2015NewLineFROM [dbo].[Customers] AS [t0]Di2015NewLineWHERE [t0].[Country] = @p0Di2015NewLine
434602Di2015UniqueSeparator    public IQueryable<T> Get<T>() where T : classDi2015NewLine    {Di2015NewLine        return (IQueryable<T>)GetTable(typeof(T));Di2015NewLine    }Di2015NewLine
434602Di2015UniqueSeparator       var list = (from cust in ctx.Get<Customer>()Di2015NewLine                   where cust.Country == "France"Di2015NewLine                   select cust.CompanyName).Take(10).ToList();Di2015NewLine
434602Di2015UniqueSeparatorSELECT TOP (10) [t0].[CompanyName]Di2015NewLineFROM [dbo].[Customers] AS [t0]Di2015NewLineWHERE [t0].[Country] = @p0Di2015NewLine
434602Di2015UniqueSeparatorpublic static class QueryExtensionDi2015NewLine{Di2015NewLine    public static IQueryable<TProjection>Di2015NewLine        Get<TSource, TProjection, TOrderKey>(Di2015NewLine            this IQueryable<TSource> source,Di2015NewLine            Expression<Func<TSource, bool>> where, // optionalDi2015NewLine            Expression<Func<TSource, TProjection>> select,Di2015NewLine            Expression<Func<TProjection, TOrderKey>> orderBy)Di2015NewLine    {Di2015NewLine        if (where != null) source = source.Where(where);Di2015NewLine        return source.Select(select).OrderBy(orderBy);Di2015NewLine    }Di2015NewLine}Di2015NewLine
434602Di2015UniqueSeparator    public List<string> Countries()Di2015NewLine    {Di2015NewLine        return Customers.Get(Di2015NewLine            x=>x.CompanyName != "",Di2015NewLine            x=>x.Country,Di2015NewLine            x=>x).Distinct().ToList();Di2015NewLine    }Di2015NewLine
434602Di2015UniqueSeparatorSELECT DISTINCT [t0].[Country]Di2015NewLineFROM [dbo].[Customers] AS [t0]Di2015NewLineWHERE [t0].[CompanyName] <> @p0Di2015NewLine
434646Di2015UniqueSeparatorTable
434646Di2015UniqueSeparatorEval()
434646Di2015UniqueSeparatorCulture
434697Di2015UniqueSeparatorICollection
434697Di2015UniqueSeparatorIEnumerable
434697Di2015UniqueSeparatorICollection
434697Di2015UniqueSeparatorIEnumerable
434706Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Drawing;Di2015NewLineDi2015NewLinepublic class TransparentControl : ControlDi2015NewLine{Di2015NewLine    private readonly Timer refresher;Di2015NewLine    private Image _image;Di2015NewLineDi2015NewLine    public TransparentControl()Di2015NewLine    {Di2015NewLine        SetStyle(ControlStyles.SupportsTransparentBackColor, true);Di2015NewLine        BackColor = Color.Transparent;Di2015NewLine        refresher = new Timer();Di2015NewLine        refresher.Tick += TimerOnTick;Di2015NewLine        refresher.Interval = 50;Di2015NewLine        refresher.Enabled = true;Di2015NewLine        refresher.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override CreateParams CreateParamsDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            CreateParams cp = base.CreateParams;Di2015NewLine            cp.ExStyle |= 0x20;Di2015NewLine            return cp;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnMove(EventArgs e)Di2015NewLine    {Di2015NewLine        RecreateHandle();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    protected override void OnPaint(PaintEventArgs e)Di2015NewLine    {Di2015NewLine        if (_image != null)Di2015NewLine        {Di2015NewLine            e.Graphics.DrawImage(_image, (Width / 2) - (_image.Width / 2), (Height / 2) - (_image.Height / 2));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnPaintBackground(PaintEventArgs e)Di2015NewLine    {Di2015NewLine       //Do not paint backgroundDi2015NewLine    }Di2015NewLineDi2015NewLine    //HackDi2015NewLine    public void Redraw()Di2015NewLine    {Di2015NewLine        RecreateHandle();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void TimerOnTick(object source, EventArgs e)Di2015NewLine    {Di2015NewLine        RecreateHandle();Di2015NewLine        refresher.Stop();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Image ImageDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _image;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _image = value;Di2015NewLine            RecreateHandle();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
434712Di2015UniqueSeparatorwhile(!stopped)
434712Di2015UniqueSeparator// Called by threadDi2015NewLinevoid MyThreadOperation()Di2015NewLine{Di2015NewLine   while(!stopped)Di2015NewLine   {Di2015NewLine      // This is poor design in terms of performance.Di2015NewLine      // Consider using a ResetEvent instead.Di2015NewLine      Thread.Sleep(5000);Di2015NewLineDi2015NewLine      tryDi2015NewLine      {Di2015NewLine         doFTPDownload();Di2015NewLine      }Di2015NewLine      catch(Exception ex)Di2015NewLine      {Di2015NewLine         logMessage(ex.ToString());Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
434712Di2015UniqueSeparatordoFTPDownload()
434712Di2015UniqueSeparatorlogMessage()
434738Di2015UniqueSeparatorStreamReader
434738Di2015UniqueSeparatorPeek
434738Di2015UniqueSeparator        using(StreamReader reader = new StreamReader(stream))Di2015NewLine        {Di2015NewLine            /// ... lots of readingDi2015NewLine            int i = reader.Peek();Di2015NewLine            /// ... lots of readingDi2015NewLine        }Di2015NewLine
434738Di2015UniqueSeparatorMemoryStream
434738Di2015UniqueSeparatorStream
434759Di2015UniqueSeparatorCharacterSet=UNICODE
434868Di2015UniqueSeparatorDbConnectionStringBuilder
434868Di2015UniqueSeparator    DbConnectionStringBuilder csb = new DbConnectionStringBuilder();Di2015NewLine    csb.ConnectionString = "rubb ish"; // throwsDi2015NewLine
434868Di2015UniqueSeparator    using(SqlConnection conn = new SqlConnection(cs)) {Di2015NewLine        conn.Open(); // throws if invalidDi2015NewLine    }Di2015NewLine
434868Di2015UniqueSeparatorDbProviderFactories
434868Di2015UniqueSeparator    string provider = "System.Data.SqlClient"; // for exampleDi2015NewLine    DbProviderFactory factory = DbProviderFactories.GetFactory(provider);Di2015NewLine    using(DbConnection conn = factory.CreateConnection()) {Di2015NewLine        conn.ConnectionString = cs;Di2015NewLine        conn.Open();Di2015NewLine    }Di2015NewLine
434881Di2015UniqueSeparatorGetInvocationList
434881Di2015UniqueSeparatorCancel
434881Di2015UniqueSeparatorstatic void InvokeIgnoreErrors(this EventHandler handler,Di2015NewLine        object sender) {Di2015NewLine    if(handler != null) {Di2015NewLine        foreach(EventHandler subHandler in handler.GetInvocationList()) {Di2015NewLine            subHandler(sender, EventArgs.Empty);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
434881Di2015UniqueSeparatormyHandler.InvokeIgnoreErrors(this);
434881Di2015UniqueSeparatorstatic bool InvokeCheckCancel(this CancelEventHandler handler,Di2015NewLine        object sender) {Di2015NewLine    if(handler != null) {Di2015NewLine        CancelEventArgs args = new CancelEventArgs(false);Di2015NewLine        foreach(CancelEventHandler subHandler in handler.GetInvocationList()) {Di2015NewLine            subHandler(sender, args);Di2015NewLine            if(args.Cancel) return true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
434953Di2015UniqueSeparatorif (readOnlyFields.Contains(propertyName)) return false;Di2015NewLineelse return base.CanWriteProperty(propertyName);Di2015NewLine
435045Di2015UniqueSeparatorclass BackgroundTaskDemoDi2015NewLine{Di2015NewLine    private bool stopping = false;Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        BackgroundTaskDemo demo = new BackgroundTaskDemo();Di2015NewLine        new Thread(demo.DoWork).Start();Di2015NewLine        Thread.Sleep(5000);Di2015NewLine        demo.stopping = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    static void DoWork()Di2015NewLine    {Di2015NewLine         while (!stopping)Di2015NewLine         {Di2015NewLine               // Do something hereDi2015NewLine         }Di2015NewLine    }Di2015NewLine}Di2015NewLine
435045Di2015UniqueSeparatorDoWork
435045Di2015UniqueSeparatorstopping
435045Di2015UniqueSeparatorDoWork
435045Di2015UniqueSeparatorvolatile
435137Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace unsafeTestDi2015NewLine{Di2015NewLine    class MainClassDi2015NewLine    {Di2015NewLine        public static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Hello World!");Di2015NewLine            unsafe Di2015NewLine            {   \Di2015NewLine                int x = 0;Di2015NewLine                int y = 0;Di2015NewLine                int z = 0;Di2015NewLine                bar(&x, &y, &z);Di2015NewLine                Console.WriteLine(x);Di2015NewLine                Console.WriteLine(y);Di2015NewLine                Console.WriteLine(z);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        unsafe static void bar(params int *[] pInts)Di2015NewLine        {Di2015NewLine            int i = 0;Di2015NewLine            foreach (var pInt in pInts)Di2015NewLine            {Di2015NewLine            \*pInt = i++;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
435202Di2015UniqueSeparatorb.Click += (o,e) => { i.showPrefs(); };Di2015NewLine
435202Di2015UniqueSeparatorb.Click += delegate(Object o, EventArgs e) { i.showPrefs(); };Di2015NewLine
435306Di2015UniqueSeparatorDataTable
435306Di2015UniqueSeparator        DataTable table = new DataTable();Di2015NewLine        // set up schema... (Columns.Add)Di2015NewLine        using(TextReader text = File.OpenText(path))Di2015NewLine        using(CsvReader csv = new CsvReader(text, hasHeaders)) {Di2015NewLine            table.Load(csv);Di2015NewLine        }Di2015NewLine
435306Di2015UniqueSeparatorstring
435394Di2015UniqueSeparator<input type="hidden" value="<%=mm.Key%>" name="key" id="key" />Di2015NewLine
435394Di2015UniqueSeparatorModelBinder
435441Di2015UniqueSeparatorList<T>
435441Di2015UniqueSeparatorComparison<T>
435441Di2015UniqueSeparatorList<Foo> data = ...Di2015NewLine// sort by name descendingDi2015NewLinedata.Sort((x,y) => -x.Name.CompareTo(y.Name));Di2015NewLine
435441Di2015UniqueSeparatorvar ordered = data.OrderByDescending(x=>x.Name);Di2015NewLine
435441Di2015UniqueSeparatorList<T>
435441Di2015UniqueSeparatorSort
435441Di2015UniqueSeparatorList<T>
435441Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;  Di2015NewLineDi2015NewLineclass Foo { // formatted for vertical spaceDi2015NewLine    public string Bar{get;set;}Di2015NewLine}Di2015NewLinestatic class Program {Di2015NewLine    static void Main() {Di2015NewLine        List<Foo> data = new List<Foo> {Di2015NewLine            new Foo {Bar = "abc"}, new Foo {Bar = "jkl"},Di2015NewLine            new Foo {Bar = "def"}, new Foo {Bar = "ghi"}Di2015NewLine        };Di2015NewLine        data.SortDescending(x => x.Bar);Di2015NewLine        foreach (var row in data) {Di2015NewLine            Console.WriteLine(row.Bar);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Sort<TSource, TValue>(this List<TSource> source,Di2015NewLine            Func<TSource, TValue> selector) {Di2015NewLine        var comparer = Comparer<TValue>.Default;Di2015NewLine        source.Sort((x,y)=>comparer.Compare(selector(x),selector(y)));Di2015NewLine    }Di2015NewLine    static void SortDescending<TSource, TValue>(this List<TSource> source,Di2015NewLine            Func<TSource, TValue> selector) {Di2015NewLine        var comparer = Comparer<TValue>.Default;Di2015NewLine        source.Sort((x,y)=>comparer.Compare(selector(y),selector(x)));Di2015NewLine    }Di2015NewLine}Di2015NewLine
435528Di2015UniqueSeparatorDataSource = null;Di2015NewLineDataBind();Di2015NewLine
435543Di2015UniqueSeparatorOfType<T>
435691Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLinepublic class FibonacciDi2015NewLine{Di2015NewLine    public Fibonacci(int n, ManualResetEvent doneEvent)Di2015NewLine    {Di2015NewLine        _n = n;Di2015NewLine        _doneEvent = doneEvent;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Wrapper method for use with thread pool.Di2015NewLine    public void ThreadPoolCallback(Object threadContext)Di2015NewLine    {Di2015NewLine        int threadIndex = (int)threadContext;Di2015NewLine        Console.WriteLine("thread {0} started...", threadIndex);Di2015NewLine        _fibOfN = Calculate(_n);Di2015NewLine        Console.WriteLine("thread {0} result calculated...", threadIndex);Di2015NewLine        _doneEvent.Set();Di2015NewLine    }Di2015NewLineDi2015NewLine    // Recursive method that calculates the Nth Fibonacci number.Di2015NewLine    public int Calculate(int n)Di2015NewLine    {Di2015NewLine        if (n <= 1)Di2015NewLine        {Di2015NewLine            return n;Di2015NewLine        }Di2015NewLineDi2015NewLine        return Calculate(n - 1) + Calculate(n - 2);Di2015NewLine    }Di2015NewLineDi2015NewLine    public int N { get { return _n; } }Di2015NewLine    private int _n;Di2015NewLineDi2015NewLine    public int FibOfN { get { return _fibOfN; } }Di2015NewLine    private int _fibOfN;Di2015NewLineDi2015NewLine    private ManualResetEvent _doneEvent;Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ThreadPoolExampleDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        const int FibonacciCalculations = 10;Di2015NewLineDi2015NewLine        // One event is used for each Fibonacci objectDi2015NewLine        ManualResetEvent[] doneEvents = new ManualResetEvent[FibonacciCalculations];Di2015NewLine        Fibonacci[] fibArray = new Fibonacci[FibonacciCalculations];Di2015NewLine        Random r = new Random();Di2015NewLineDi2015NewLine        // Configure and launch threads using ThreadPool:Di2015NewLine        Console.WriteLine("launching {0} tasks...", FibonacciCalculations);Di2015NewLine        for (int i = 0; i < FibonacciCalculations; i++)Di2015NewLine        {Di2015NewLine            doneEvents[i] = new ManualResetEvent(false);Di2015NewLine            Fibonacci f = new Fibonacci(r.Next(20,40), doneEvents[i]);Di2015NewLine            fibArray[i] = f;Di2015NewLine            ThreadPool.QueueUserWorkItem(f.ThreadPoolCallback, i);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Wait for all threads in pool to calculation...Di2015NewLine        WaitHandle.WaitAll(doneEvents);Di2015NewLine        Console.WriteLine("All calculations are complete.");Di2015NewLineDi2015NewLine        // Display the results...Di2015NewLine        for (int i= 0; i<FibonacciCalculations; i++)Di2015NewLine        {Di2015NewLine            Fibonacci f = fibArray[i];Di2015NewLine            Console.WriteLine("Fibonacci({0}) = {1}", f.N, f.FibOfN);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
435695Di2015UniqueSeparatorfor int i=0; i<ds.tables[0].Rows.Count; i++)Di2015NewLine{Di2015NewLine    ds.tables[0].Rows[i]["Count"] = "4";Di2015NewLine}Di2015NewLine
435797Di2015UniqueSeparatorvar last = list.FindLast(predicate);Di2015NewLine
435797Di2015UniqueSeparatorvar last = sequence.Where(predicate).LastOrDefault();Di2015NewLine
435797Di2015UniqueSeparatorFindFirst(predicate)
435797Di2015UniqueSeparatorsequence.Where(predicate).FirstOrDefault()
435797Di2015UniqueSeparatorFindAll(predicate)
435797Di2015UniqueSeparatorsequence.Where(predicate)
435898Di2015UniqueSeparatorGridView
435898Di2015UniqueSeparatornamespace YourLinqNamespace {Di2015NewLine    partial class UserAnswer {Di2015NewLine        public string QuestionName {get {return Question.Name;}}Di2015NewLine    }Di2015NewLine}Di2015NewLine
435898Di2015UniqueSeparatorWhere
435898Di2015UniqueSeparatorLoadWith
435898Di2015UniqueSeparatorDataLoadOptions options = new DataLoadOptions();Di2015NewLineoptions.LoadWith<UserAnswer>(x=>x.Question);Di2015NewLinedatabase.LoadOptions = options;Di2015NewLine
435974Di2015UniqueSeparatorusing (FileStream dll = File.OpenRead(path))Di2015NewLine{Di2015NewLine   fileContent = new byte[dll.Length];Di2015NewLine   dll.Read(fileContent, 0, (int)dll.Length);Di2015NewLine}Di2015NewLineAssembly assembly = appDomain.Load(fileContent);Di2015NewLine
435974Di2015UniqueSeparatorbyte[] b = File.ReadAllBytes(assemblyName);Di2015NewLineassembly = Assembly.Load(b);Di2015NewLine
436052Di2015UniqueSeparatorListBoxItem
436052Di2015UniqueSeparatorListBox
436052Di2015UniqueSeparator<ListBox>Di2015NewLine    <ListBox.ItemContainerStyle>Di2015NewLine        <Style TargetType="ListBoxItem">Di2015NewLine            <Setter Property="Padding" Value="0"/>Di2015NewLine        </Style>Di2015NewLine    </ListBox.ItemContainerStyle>Di2015NewLine</ListBox>Di2015NewLine
436096Di2015UniqueSeparator        public static object GetDbaseOrFoxproRawValue(string DBPath, string TableName, string ColumnName, Di2015NewLine        string CompareColumnName, string CompareValue, bool CompareColumnIsAutoKey)Di2015NewLine    {Di2015NewLine        using (BinaryReader read = new BinaryReader(File.Open(Di2015NewLine            Path.Combine(DBPath, TableName + ".dbf"), FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))Di2015NewLine        {Di2015NewLine            // Is it a type of file that I can handle?Di2015NewLine            if (new byte[] { 0x02, 0x03, 0x30, 0x43, 0x63, 0x83, 0x8b,Di2015NewLine                             0xcb, 0xf5, 0xfb }.Contains(read.ReadByte()))Di2015NewLine            {Di2015NewLine                // Skip date.Di2015NewLine                read.BaseStream.Seek(3, SeekOrigin.Current);Di2015NewLineDi2015NewLine                // Read useful datas...Di2015NewLine                uint RecordCount = read.ReadUInt32();Di2015NewLine                ushort FirstRecord = read.ReadUInt16();Di2015NewLine                ushort RecordLength = read.ReadUInt16();Di2015NewLine                int FieldCount = FirstRecord - 296 / 32;Di2015NewLineDi2015NewLine                // Make sure things aren't stupid.Di2015NewLine                ColumnName = ColumnName.ToLower();Di2015NewLine                CompareColumnName = CompareColumnName.ToLower();Di2015NewLineDi2015NewLine                // Find target column (field)Di2015NewLine                string temp;Di2015NewLine                UInt32 CompareFieldOffset = uint.MaxValue, FieldOffset = uint.MaxValue;Di2015NewLine                byte CompareFieldLength = 0, FieldLength = 0;Di2015NewLine                char FieldType = ' ';Di2015NewLine                for (int i = 0; i < FieldCount; i++)Di2015NewLine                {Di2015NewLine                    read.BaseStream.Seek(32 + (i * 32), SeekOrigin.Begin);Di2015NewLine                    temp = Encoding.ASCII.GetString(read.ReadBytes(11)).Replace("\\0", "").ToLower();Di2015NewLine                    if (temp == CompareColumnName)Di2015NewLine                    {Di2015NewLine                        read.ReadChar();Di2015NewLine                        CompareFieldOffset = read.ReadUInt32();Di2015NewLine                        CompareFieldLength = read.ReadByte();Di2015NewLine                    }Di2015NewLine                    if (temp == ColumnName)Di2015NewLine                    {Di2015NewLine                        FieldType = read.ReadChar();Di2015NewLine                        FieldOffset = read.ReadUInt32();Di2015NewLine                        FieldLength = read.ReadByte();Di2015NewLine                    }Di2015NewLineDi2015NewLine                    if (CompareFieldOffset != uint.MaxValue && FieldOffset != uint.MaxValue)Di2015NewLine                        break;Di2015NewLine                }Di2015NewLineDi2015NewLine                // Make sure we can continue.Di2015NewLine                if (CompareFieldOffset == uint.MaxValue || Di2015NewLine                    FieldOffset == uint.MaxValue) return null;Di2015NewLineDi2015NewLine                // Iterate through each record to find the one we want.Di2015NewLine                for (int index = 0; index < RecordCount; index++)Di2015NewLine                {Di2015NewLine                    read.BaseStream.Seek(FirstRecord + (index * RecordLength) + CompareFieldOffset, SeekOrigin.Begin);Di2015NewLine                    temp = Encoding.Default.GetString(read.ReadBytes(CompareFieldLength)).Replace("\\0", "");Di2015NewLine                    if (temp == CompareValue)Di2015NewLine                    {Di2015NewLine                        read.BaseStream.Seek(FirstRecord + (index * RecordLength) + FieldOffset, SeekOrigin.Begin);Di2015NewLine                        switch (FieldType)Di2015NewLine                        {Di2015NewLine                            case 'M':Di2015NewLine                            case 'I': return read.ReadUInt32();Di2015NewLine                            case 'C':Di2015NewLine                            default: return Encoding.Default.GetString(read.ReadBytes(FieldLength)).Replace("\\0", "");Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return null;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLine
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436218Di2015UniqueSeparatorSystem.Object
436390Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Globalization;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLinenamespace OpenNETCF.GlobalizationDi2015NewLine{Di2015NewLine    public class CultureInfoHelperDi2015NewLine    {Di2015NewLine        private delegate int EnumLocalesHandler(string lpLocaleString);Di2015NewLineDi2015NewLine        private static EnumLocalesHandler m_localesDelegate;Di2015NewLineDi2015NewLine        private static List<CultureInfo> m_cultures;Di2015NewLineDi2015NewLine        private static int EnumLocalesProc(string locale)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                m_cultures.Add(CultureInfo.GetCultureInfo(Di2015NewLine                    int.Parse(locale, NumberStyles.HexNumber)));Di2015NewLine            }Di2015NewLine            catchDi2015NewLine            {Di2015NewLine                // failed for this locale - ignore and continueDi2015NewLine            }Di2015NewLineDi2015NewLine            return 1;Di2015NewLine        }Di2015NewLineDi2015NewLine        public static CultureInfo[] GetCultures()Di2015NewLine        {Di2015NewLine            if (m_localesDelegate == null)Di2015NewLine            {Di2015NewLine                m_cultures = new List<CultureInfo>();Di2015NewLine                m_localesDelegate = new EnumLocalesHandler(EnumLocalesProc);Di2015NewLine                IntPtr fnPtr = Marshal.GetFunctionPointerForDelegate(Di2015NewLine                    m_localesDelegate);Di2015NewLine                int success = EnumSystemLocales(fnPtr, LCID_INSTALLED);Di2015NewLine            }Di2015NewLineDi2015NewLine            return m_cultures.ToArray();Di2015NewLine        }Di2015NewLineDi2015NewLine        private const int LCID_INSTALLED = 0x01;Di2015NewLine        private const int LCID_SUPPORTED = 0x02;Di2015NewLineDi2015NewLine        [DllImport("coredll", SetLastError = true)]Di2015NewLine        private static extern int EnumSystemLocales(Di2015NewLine            IntPtr lpLocaleEnumProc, uint dwFlags);Di2015NewLine    }Di2015NewLine}Di2015NewLine
436390Di2015UniqueSeparatorusing OpenNETCF.Globalization;Di2015NewLine....Di2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    foreach (CultureInfo ci in CultureInfoHelper.GetCultures())Di2015NewLine    {            Di2015NewLine        Debug.WriteLine(string.Format("0x{0:x2}({1}) : {2}", ci.LCID, ci.Name, ci.EnglishName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
436390Di2015UniqueSeparator0x402(bg-BG) : Bulgarian (Bulgaria)Di2015NewLine0x403(ca-ES) : Catalan (Catalan)Di2015NewLine0x405(cs-CZ) : Czech (Czech Republic)Di2015NewLine0x406(da-DK) : Danish (Denmark)Di2015NewLine0x407(de-DE) : German (Germany)Di2015NewLine0x408(el-GR) : Greek (Greece)Di2015NewLine0x409(en-US) : English (United States)Di2015NewLine...Di2015NewLine0x400a(es-BO) : Spanish (Bolivia)Di2015NewLine0x440a(es-SV) : Spanish (El Salvador)Di2015NewLine0x480a(es-HN) : Spanish (Honduras)Di2015NewLine0x4c0a(es-NI) : Spanish (Nicaragua)Di2015NewLine0x500a(es-PR) : Spanish (Puerto Rico)Di2015NewLine
436572Di2015UniqueSeparatorkeybd_event
436572Di2015UniqueSeparatorSendInput
436572Di2015UniqueSeparatoruser32.dll
436572Di2015UniqueSeparatorSendInput
436572Di2015UniqueSeparatorkeybd_event
436572Di2015UniqueSeparatorVK_
436572Di2015UniqueSeparatorKEYEVENTF_KEYUP
436572Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLineprivate static extern void keybd_event(byte bVk, byte bScan,Di2015NewLine    int dwFlags, int dwExtraInfo);Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinekeybd_event(0xa2, 0x1d, 0, 0); // Press Left CTRLDi2015NewLinekeybd_event(0x7b, 0x58, 0, 0); // Press F12Di2015NewLinekeybd_event(0x7b, 0xd8, 2, 0); // Release F12Di2015NewLinekeybd_event(0xa2, 0x9d, 2, 0); // Release Left CTRLDi2015NewLine
436738Di2015UniqueSeparatorpublic static List<object> ConvertToListOfObjects<T>(List<T> list)Di2015NewLine{Di2015NewLine    return list.ConvertAll<object>(t => t);Di2015NewLine}Di2015NewLine
436738Di2015UniqueSeparatorMethodInfo method = typeof(Foo).GetMethod("ConvertToListOfObjects",Di2015NewLine    BindingFlags.Static | BindingFlags.Public);Di2015NewLineType listType = list.GetType().GetGenericArguments()[0];Di2015NewLineMethodInfo concrete = method.MakeGenericMethod(new [] { listType });Di2015NewLineList<object> objectList = (List<object>) concrete.Invoke(null, Di2015NewLine                                                   new object[]{list});Di2015NewLine
436738Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    public static List<object> ConvertToListOfObjects<T>(List<T> list)Di2015NewLine    {Di2015NewLine        return list.ConvertAll<object>(t => t);Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        object list = new List<int> { 1, 2, 3, 4 };Di2015NewLineDi2015NewLine        MethodInfo method = typeof(Test).GetMethod("ConvertToListOfObjects",Di2015NewLine            BindingFlags.Static | BindingFlags.Public);Di2015NewLine        Type listType = list.GetType().GetGenericArguments()[0];Di2015NewLine        MethodInfo concrete = method.MakeGenericMethod(new [] { listType });Di2015NewLine        List<object> objectList = (List<object>) concrete.Invoke(null,Di2015NewLine                                                    new object[] {list});Di2015NewLineDi2015NewLine        foreach (object o in objectList)Di2015NewLine        {Di2015NewLine            Console.WriteLine(o);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
436818Di2015UniqueSeparatorrealm
436818Di2015UniqueSeparatorstring realm = (string) products.XPathEvaluate(Di2015NewLine   "string(Di2015NewLine      /*/blocks[@name='products']Di2015NewLine                 /*/a[@name='product-id' and . = '1236']Di2015NewLine                              /following-sibling::block[1]Di2015NewLine          )Di2015NewLine   "Di2015NewLine                                     )Di2015NewLine
436818Di2015UniqueSeparatorrealm
436898Di2015UniqueSeparatorforeach (var i in System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces())Di2015NewLine    foreach (var ua in i.GetIPProperties().UnicastAddresses)Di2015NewLine        Console.WriteLine(ua.Address);Di2015NewLine
436935Di2015UniqueSeparator[ActionName("MyOverloadedName")]Di2015NewLine
436957Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var dict = new Dictionary<int, int>();        Di2015NewLine        dict.Add(0, 0);Di2015NewLine        dict.Add(1, 1);Di2015NewLine        dict.Add(2, 2);Di2015NewLine        dict.Remove(0);Di2015NewLine        dict.Add(10, 10);Di2015NewLineDi2015NewLine        foreach (var entry in dict)Di2015NewLine        {Di2015NewLine            Console.WriteLine(entry.Key);Di2015NewLine        }Di2015NewLine        Console.WriteLine("First key: " + dict.First().Key);Di2015NewLine    }Di2015NewLine}Di2015NewLine
436967Di2015UniqueSeparator        Process p = new Process();Di2015NewLine        StreamReader sr;Di2015NewLine        StreamReader se;Di2015NewLine        StreamWriter sw;Di2015NewLineDi2015NewLine        ProcessStartInfo psi = new ProcessStartInfo(@"bar.exe");Di2015NewLine        psi.UseShellExecute = false;Di2015NewLine        psi.RedirectStandardOutput = true;Di2015NewLine        psi.RedirectStandardError = true;Di2015NewLine        psi.RedirectStandardInput = true;Di2015NewLine        psi.CreateNoWindow = true;Di2015NewLine        p.StartInfo = psi;Di2015NewLine        p.Start();Di2015NewLine
436970Di2015UniqueSeparatorif (!(string.IsNullOrEmpty(ISBN) && string.IsNullOrEmpty(ASIN)))Di2015NewLine{Di2015NewLine    AWSECommerceService service = new AWSECommerceService();Di2015NewLine    ItemLookup lookup = new ItemLookup();Di2015NewLine    ItemLookupRequest request = new ItemLookupRequest();Di2015NewLineDi2015NewLine    lookup.AssociateTag = ConfigurationManager.AppSettings["AssociatesTag"];Di2015NewLine    lookup.AWSAccessKeyId = ConfigurationManager.AppSettings["AWSAccessKey"];Di2015NewLine    if (string.IsNullOrEmpty(ASIN))Di2015NewLine    {Di2015NewLine        request.IdType = ItemLookupRequestIdType.ISBN;Di2015NewLine        request.ItemId = new string[] { ISBN.Replace("-", "") };Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        request.IdType = ItemLookupRequestIdType.ASIN;Di2015NewLine        request.ItemId = new string[] { ASIN };Di2015NewLine    }Di2015NewLine    request.ResponseGroup = ConfigurationManager.AppSettings["AWSResponseGroups"].Split(new char[] { ' ', ',', ';' }, StringSplitOptions.RemoveEmptyEntries);Di2015NewLineDi2015NewLine    lookup.Request = new ItemLookupRequest[] { request };Di2015NewLine    ItemLookupResponse response = service.ItemLookup(lookup);Di2015NewLineDi2015NewLine    if (response.Items.Length > 0 && response.Items[0].Item.Length > 0)Di2015NewLine    {Di2015NewLine        Item item = response.Items[0].Item[0];Di2015NewLine        if (item.MediumImage == null)Di2015NewLine        {Di2015NewLine            bookImageHyperlink.Visible = false;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            bookImageHyperlink.ImageUrl = item.MediumImage.URL;Di2015NewLine        }Di2015NewLine        bookImageHyperlink.NavigateUrl = item.DetailPageURL;Di2015NewLine        bookTitleHyperlink.Text = item.ItemAttributes.Title;Di2015NewLine        bookTitleHyperlink.NavigateUrl = item.DetailPageURL;Di2015NewLine        if (item.OfferSummary.LowestNewPrice == null)Di2015NewLine        {Di2015NewLine            if (item.OfferSummary.LowestUsedPrice == null)Di2015NewLine            {Di2015NewLine                priceHyperlink.Visible = false;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                priceHyperlink.Text = string.Format("Buy used {0}", item.OfferSummary.LowestUsedPrice.FormattedPrice);Di2015NewLine                priceHyperlink.NavigateUrl = item.DetailPageURL;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            priceHyperlink.Text = string.Format("Buy new {0}", item.OfferSummary.LowestNewPrice.FormattedPrice);Di2015NewLine            priceHyperlink.NavigateUrl = item.DetailPageURL;Di2015NewLine        }Di2015NewLine        if (item.ItemAttributes.Author != null)Di2015NewLine        {Di2015NewLine            authorLabel.Text = string.Format("By {0}", string.Join(", ", item.ItemAttributes.Author));Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            authorLabel.Text = string.Format("By {0}", string.Join(", ", item.ItemAttributes.Creator.Select(c => c.Value).ToArray()));Di2015NewLine        }Di2015NewLine        ItemLink link = item.ItemLinks.Where(i => i.Description.Contains("Wishlist")).FirstOrDefault();Di2015NewLine        if (link == null)Di2015NewLine        {Di2015NewLine            wishListHyperlink.Visible = false;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            wishListHyperlink.NavigateUrl = link.URL;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
437013Di2015UniqueSeparatorSomeMethod(myCat);Di2015NewLineDi2015NewLinevoid SomeMethod(Cat cat)Di2015NewLine{Di2015NewLine    cat.Miau(); //will make the original myCat object to miauDi2015NewLine    cat = null; //only cat is set to null, myCat still points to the original objectDi2015NewLine}Di2015NewLine
437036Di2015UniqueSeparatorMyFunction(++myInt);Di2015NewLineMyFunction(myInt++);Di2015NewLine
437036Di2015UniqueSeparatorint myInt = 1;Di2015NewLineint a = ++myInt;Di2015NewLine// myInt is incremented by one and then assigned to a.Di2015NewLine// Both myInt and a are now 2.Di2015NewLineint b = myInt++;Di2015NewLine// myInt is assigned to b and then incremented by one.Di2015NewLine// b is now 2, myInt is now 3Di2015NewLine
437036Di2015UniqueSeparator++i; // pre-incrementDi2015NewLinei++; // post-incrementDi2015NewLine--i; // pre-decrementDi2015NewLinei--; // post-decrementDi2015NewLine
437036Di2015UniqueSeparatorConsole.WriteLine("Foo: {0}", foo++);Di2015NewLine
437036Di2015UniqueSeparatorConsole.WriteLine("Foo: {0}", foo);Di2015NewLinefoo++;Di2015NewLine
437176Di2015UniqueSeparatorrow.Cells[1].Controls 
437213Di2015UniqueSeparatorint result = 0;Di2015NewLineusing(SqlConnection conn = new SqlConnection(connectionString))Di2015NewLine{Di2015NewLine    conn.Open();Di2015NewLine    SqlCommand sql = new SqlCommand("SELECT COUNT(*) FROM test", conn);Di2015NewLine    result = (int)sql.ExecuteScalar();Di2015NewLine}Di2015NewLine
437302Di2015UniqueSeparatorTestContext
437417Di2015UniqueSeparatorusing(SqlDataAdapter adap = new SqlDataAdapter(cmd))Di2015NewLine{Di2015NewLine  adap.fill(myDataTable);Di2015NewLine}Di2015NewLineDi2015NewLinereturn myDataTable;Di2015NewLine
437592Di2015UniqueSeparator   private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine      List<Answer> list = GetAnswers();Di2015NewLineDi2015NewLine      var dict = (from a in listDi2015NewLine                 group a by a.QuestionID into grpDi2015NewLine                 from g in grpDi2015NewLine                 where g.Version == grp.Max(m => m.Version)Di2015NewLine                 select new { id = g.QuestionID, q = g }).ToDictionary( o => o.id, o => o.q);Di2015NewLineDi2015NewLine      StringBuilder sb = new StringBuilder();Di2015NewLine      foreach (var elem in dict)Di2015NewLine      {Di2015NewLine        sb.AppendLine(elem.Key.ToString() + "-" + elem.Value.Version.ToString());Di2015NewLine      }Di2015NewLine      MessageBox.Show(sb.ToString());Di2015NewLine    }Di2015NewLineDi2015NewLine    private List<Answer> GetAnswers()Di2015NewLine    {Di2015NewLine      List<Answer> result = new List<Answer>();Di2015NewLine      result.Add(new Answer() { ID = 1, QuestionID = 1, Version = 1 });Di2015NewLine      result.Add(new Answer() { ID = 2, QuestionID = 1, Version = 2 });Di2015NewLine      result.Add(new Answer() { ID = 3, QuestionID = 1, Version = 3 });Di2015NewLine      result.Add(new Answer() { ID = 4, QuestionID = 2, Version = 1 });Di2015NewLine      result.Add(new Answer() { ID = 5, QuestionID = 2, Version = 2 });Di2015NewLine      result.Add(new Answer() { ID = 6, QuestionID = 2, Version = 3 });Di2015NewLine      result.Add(new Answer() { ID = 7, QuestionID = 3, Version = 1 });Di2015NewLine      result.Add(new Answer() { ID = 8, QuestionID = 3, Version = 2 });Di2015NewLine      result.Add(new Answer() { ID = 9, QuestionID = 3, Version = 3 });Di2015NewLine      result.Add(new Answer() { ID = 10, QuestionID = 3, Version = 4 });Di2015NewLine      return result;Di2015NewLine    }Di2015NewLine
437614Di2015UniqueSeparator[Serializable]Di2015NewLine
437614Di2015UniqueSeparator    private bool Save(String inFileName, MyObject inObject){Di2015NewLine        try {Di2015NewLine            FileStream theStream = File.Open(inFileName, FileMode.Create);Di2015NewLineDi2015NewLine            BinaryFormatter theFormatter = new BinaryFormatter();Di2015NewLine            theFormatter.Serialize(theStream, inObject);//add it to the end thereDi2015NewLine            theStream.Dispose();Di2015NewLine            theStream.Close();Di2015NewLine        } catch{Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        return true;Di2015NewLineDi2015NewLine    }Di2015NewLine
437614Di2015UniqueSeparator    private MyObject Read(String inFileName){Di2015NewLine        MyObject theReturn = null;Di2015NewLine        try {Di2015NewLineDi2015NewLine            FileStream theStream = File.Open(inFileName, FileMode.Open, FileAccess.Read);                Di2015NewLineDi2015NewLine            BinaryFormatter theFormatter = new BinaryFormatter();Di2015NewLine            theReturn = (CImageData)theFormatter.Deserialize(theStream);//add it to the end thereDi2015NewLine            theStream.Dispose();Di2015NewLine            theStream.Close();Di2015NewLine        }Di2015NewLine        catch {Di2015NewLine            return null;Di2015NewLine        }Di2015NewLine        return theReturn;Di2015NewLine    }Di2015NewLine
437697Di2015UniqueSeparator<%@ WebService Language="C#" Class="SampleWebService" %>Di2015NewLineusing System;Di2015NewLineusing System.Data;Di2015NewLineusing System.Web;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Web.Services;Di2015NewLineusing System.Web.Services.Protocols;Di2015NewLineDi2015NewLine[WebService(Namespace = "http://tempuri.org/")]Di2015NewLine[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Di2015NewLinepublic class SampleWebService : System.Web.Services.WebServiceDi2015NewLine{Di2015NewLineDi2015NewLine    [WebMethod]Di2015NewLine    public string Hello()Di2015NewLine    {Di2015NewLine        return "Hello World!";Di2015NewLine    }Di2015NewLineDi2015NewLine    [WebMethod]Di2015NewLine    public string DoStuff(out string stuff)Di2015NewLine    {Di2015NewLine        stuff = "Woohoo!";Di2015NewLine        return "OK";Di2015NewLine    }Di2015NewLine}Di2015NewLine
437754Di2015UniqueSeparatorSystem.Windows.Forms.Application.ApplicationExit += ...Di2015NewLine
437885Di2015UniqueSeparatorPasswordDeriveBytes pdb = new PasswordDeriveBytes("blahblahblah",null);Di2015NewLinebyte[] iv = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 };Di2015NewLinebyte[] key = pdb.CryptDeriveKey("TripleDES", "SHA1", 0, iv);Di2015NewLine
437886Di2015UniqueSeparatordouble myNum = 0;Di2015NewLineString testVar = "Not A Number";Di2015NewLineDi2015NewLineif (Double.TryParse(testVar, out myNum)) {Di2015NewLine  // it is a numberDi2015NewLine} else {Di2015NewLine  // it is not a numberDi2015NewLine}Di2015NewLine
437886Di2015UniqueSeparatorpublic boolean IsNumber(String value) {Di2015NewLine  Boolean value = true;Di2015NewLine  foreach(Char c in s.ToCharArray()) {Di2015NewLine    value = value && Char.IsDigit(c);Di2015NewLine  }Di2015NewLineDi2015NewLine  return value;Di2015NewLine}Di2015NewLine
437886Di2015UniqueSeparatorpublic boolean IsNumber(String value) {Di2015NewLine  return value.ToCharArray().Where(x => !Char.IsDigit(x)).Count() == 0;Di2015NewLine}Di2015NewLine
438043Di2015UniqueSeparatorMain(...)
438043Di2015UniqueSeparatorShowUsage()
438043Di2015UniqueSeparatorbin/release
438043Di2015UniqueSeparatorstring.Format
438043Di2015UniqueSeparator    Console.WriteLine(@"Di2015NewLineText File Splitter v1.4.1  released: December 14, 2008Di2015NewLineCopyright (C) 2007-2008 Hector Sosa, JrDi2015NewLinehttp://www.systemwidgets.comDi2015NewLineDi2015NewLine");Di2015NewLine
438097Di2015UniqueSeparatorprivate int nextFileNumber = 0;Di2015NewLineDi2015NewLineprivate string GetNextFileName(string userName)Di2015NewLine{Di2015NewLine    return String.Format("{0}-{1}-{2}", DateTime.Now, userName,Di2015NewLine       nextFileNumber++);Di2015NewLine}Di2015NewLine
438132Di2015UniqueSeparator    DataTable firstPart = new DataTable();Di2015NewLine    //Initialize columns here...Di2015NewLineDi2015NewLine    DataTable secondPart = new DataTable();Di2015NewLine    //Initialize columns here...Di2015NewLineDi2015NewLine    foreach(DataRow r in original.Rows){Di2015NewLine        DataRow f = firstPart.NewRow();Di2015NewLine        f[0] = r[0];Di2015NewLine        f[1] = r[1];Di2015NewLine        f[2] = r[2];Di2015NewLine        f[3] = r[3];Di2015NewLine        f[4] = r[4];Di2015NewLine        f[5] = r[5];Di2015NewLine        f[6] = r[6];Di2015NewLine        f[7] = r[7];Di2015NewLine        f[8] = r[8];Di2015NewLine        f[9] = r[9];Di2015NewLine        f[10] = r[10];Di2015NewLine        f[11] = r[11];Di2015NewLine        f[12] = r[12];Di2015NewLine        f[13] = r[13];Di2015NewLine        firtPart.Rows.Add(f);Di2015NewLineDi2015NewLine        DataRow s = secondPart.NewRow();Di2015NewLine        s[0] = r[0];Di2015NewLine        s[1] = r[14];Di2015NewLine        s[2] = r[15];Di2015NewLine        s[3] = r[16];Di2015NewLine        s[4] = r[17];Di2015NewLine        s[5] = r[18];Di2015NewLine        s[6] = r[19];Di2015NewLine        s[7] = r[20];Di2015NewLine        s[8] = r[21];Di2015NewLine        s[9] = r[22];Di2015NewLine        s[10] = r[23];Di2015NewLine        s[11] = r[24];Di2015NewLine        s[12] = r[25];Di2015NewLine        s[13] = r[26];Di2015NewLine        s[14] = r[27];Di2015NewLine        secondPart.Rows.Add(f);Di2015NewLine    }Di2015NewLine    firtPart.AcceptChanges();Di2015NewLine    secondPart.AcceptChanges();Di2015NewLine
438155Di2015UniqueSeparatorif
438155Di2015UniqueSeparator/\\<if\\>[^{]*;/Di2015NewLine
438155Di2015UniqueSeparator\\<
438155Di2015UniqueSeparator\\>
438206Di2015UniqueSeparatorlocalhost
438228Di2015UniqueSeparatorResponse.Write("<table>");Di2015NewLineResponse.Write(stringWrite.ToString()); Di2015NewLineResponse.Write("</table>");Di2015NewLine
438328Di2015UniqueSeparatorpublic static void CreateDirectory(DirectoryInfo directory)Di2015NewLine{Di2015NewLine    if (!directory.Parent.Exists)Di2015NewLine    \CreateDirectory(directory.Parent);Di2015NewLine    directory.Create();Di2015NewLine}Di2015NewLine
438328Di2015UniqueSeparator// path is your file pathDi2015NewLinestring directory = Path.GetDirectoryName(path);Di2015NewLineCreateDirectory(new DirectoryInfo(directory));Di2015NewLine
438371Di2015UniqueSeparatorMyReq.ServicePoint.CloseConnectionGroup(null)Di2015NewLine
438513Di2015UniqueSeparatorstatic class LinqExtensionsDi2015NewLine{Di2015NewLine    public static IEnumerable<IEnumerable<T>> Split<T>(this IEnumerable<T> list, int parts)Di2015NewLine    {Di2015NewLine        int i = 0;Di2015NewLine        var splits = from item in listDi2015NewLine                     group item by i++ % parts into partDi2015NewLine                     select part.AsEnumerable();Di2015NewLine        return splits;Di2015NewLine    }Di2015NewLine}Di2015NewLine
438606Di2015UniqueSeparatorSqlBulkCopy
438606Di2015UniqueSeparatorIDataReader
438606Di2015UniqueSeparatorDataTable
438606Di2015UniqueSeparatorXmlReader
438606Di2015UniqueSeparatorIDataReader
438616Di2015UniqueSeparatorMouse.Capture()
438616Di2015UniqueSeparatorLoaded
438616Di2015UniqueSeparator<Window ... .. .. Title="My Window" loaded="Window_Loaded">Di2015NewLine...Di2015NewLine</Window>Di2015NewLine
438616Di2015UniqueSeparatorprivate void Window_Loaded(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine  var b = Mouse.Capture(this);Di2015NewLine}Di2015NewLine
438616Di2015UniqueSeparatorMouse.Capture()
438616Di2015UniqueSeparatorMouse.Capture(null)
438665Di2015UniqueSeparatorDefaultValueAttribute
438665Di2015UniqueSeparatorprivate Bitmap bmp;Di2015NewLine[DefaultValue(null)]Di2015NewLinepublic Bitmap Bar {Di2015NewLine    get { return bmp; }Di2015NewLine    set { bmp = value; }Di2015NewLine}Di2015NewLine
438665Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Windows.Forms;Di2015NewLineclass Foo {Di2015NewLine    private Bitmap bmp;Di2015NewLine    public Bitmap Bar {Di2015NewLine        get { return bmp; }Di2015NewLine        set { bmp = value; }Di2015NewLine    }Di2015NewLine    private void ResetBar() { bmp = null; }Di2015NewLine    private bool ShouldSerializeBar() { return bmp != null; }Di2015NewLine}Di2015NewLinestatic class Program {Di2015NewLine    [STAThread]Di2015NewLine    static void Main() {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        Form form = new Form();Di2015NewLine        PropertyGrid grid = new PropertyGrid();Di2015NewLine        grid.Dock = DockStyle.Fill;Di2015NewLine        grid.SelectedObject = new Foo();Di2015NewLine        form.Controls.Add(grid);Di2015NewLine        Application.Run(form);Di2015NewLine    }Di2015NewLine}Di2015NewLine
438926Di2015UniqueSeparatortypeof(IFoo)
438952Di2015UniqueSeparatorcall
438952Di2015UniqueSeparatorcallvirt
438952Di2015UniqueSeparatorVerificationException
438952Di2015UniqueSeparatorvirtual
438952Di2015UniqueSeparatorChildClass
438952Di2015UniqueSeparatorbase.methodTwo()
438952Di2015UniqueSeparatorbase.base.Foo()
438952Di2015UniqueSeparatorclass ChildClass : ParentClassDi2015NewLine{Di2015NewLine    new public int methodTwo() // bad, do not doDi2015NewLine    {Di2015NewLine        return 2;Di2015NewLine    }Di2015NewLine}Di2015NewLine
438952Di2015UniqueSeparatorChildClass
438952Di2015UniqueSeparatorParentClass
439025Di2015UniqueSeparatorPath
439025Di2015UniqueSeparatorSystem.IO
439025Di2015UniqueSeparatorGetDirectoryName
439025Di2015UniqueSeparatorstring directoryPath = Path.GetDirectoryName(filePath);Di2015NewLine
439209Di2015UniqueSeparatorstring.Contains
439209Di2015UniqueSeparatorGetMethod
439209Di2015UniqueSeparatorMethodInfo
439209Di2015UniqueSeparatorMethodInfo
439209Di2015UniqueSeparatorTank
439209Di2015UniqueSeparatorVehicle
439209Di2015UniqueSeparator   MethodInfo method = typeof(Queryable).GetMethods()Di2015NewLine        .Where(m => m.Name == "Any"Di2015NewLine            && m.GetParameters().Length == 2)Di2015NewLine        .Single().MakeGenericMethod(typeof(Tank));Di2015NewLine
439209Di2015UniqueSeparatormethod
439209Di2015UniqueSeparator   MethodInfo method = typeof(Queryable).GetMethods()Di2015NewLine        .Where(m => m.Name == "Any" && m.GetParameters().Length == 2)Di2015NewLine        .Single().MakeGenericMethod(typeof(Tank));Di2015NewLineDi2015NewLine    ParameterExpression vehicleParameter = Expression.Parameter(Di2015NewLine        typeof(Vehicle), "v");Di2015NewLine    var vehicleFunc = Expression.Lambda<Func<Vehicle, bool>>(Di2015NewLine        Expression.Call(Di2015NewLine            method,Di2015NewLine            Expression.Property(Di2015NewLine                vehicleParameter,Di2015NewLine                typeof(Vehicle).GetProperty("Tank")),Di2015NewLine            tankFunction), vehicleParameter);Di2015NewLine
439209Di2015UniqueSeparatorExpression<Func<Vehicle, bool>> func = v => v.Tank.Any(Di2015NewLine    t => t.Gun == "Really Big");Di2015NewLine
439317Di2015UniqueSeparatorsynchronized (this)Di2015NewLine{Di2015NewLine}Di2015NewLine
439615Di2015UniqueSeparator<%@ OutputCache Duration="300" VaryByCustom="Company" VaryByParam="none" %>Di2015NewLine
439615Di2015UniqueSeparatorpublic override string GetVaryByCustomString(System.Web.HttpContext context, string custom)Di2015NewLine{Di2015NewLine    string CustomValue = "";Di2015NewLine    switch (custom.ToLower())Di2015NewLine    {Di2015NewLine        case "company":Di2015NewLine            CustomValue = context.Request.QueryString["company"] ?? "";Di2015NewLine            CustomValue = CustomValue.ToLower();Di2015NewLine            break;Di2015NewLine    }Di2015NewLine    return CustomValue;Di2015NewLine}Di2015NewLine
439803Di2015UniqueSeparatorList<Folder> children;Di2015NewLineDi2015NewLinepublic ReadOnlyCollection<Folder> ChildrenDi2015NewLine{Di2015NewLine    get { return this.children.AsReadOnly(); }Di2015NewLine}Di2015NewLine
439803Di2015UniqueSeparatorIList<Folder> children;Di2015NewLineDi2015NewLinepublic ReadOnlyCollection<Folder> ChildrenDi2015NewLine{Di2015NewLine    get Di2015NewLine    { Di2015NewLine        return new List<Folder>(this.children).AsReadOnly(); Di2015NewLine    }Di2015NewLine}Di2015NewLine
440129Di2015UniqueSeparatorproteted void login_Authenticate(object sender, AuthenticateEventArgse){Di2015NewLine   AuthenticationServiceClient client = new AuthenticationServiceClient();Di2015NewLine   e.Authenticated = client.Login(login.UserName, login.Password, "", true);Di2015NewLine}
440403Di2015UniqueSeparatorprivate LazyProperty<HeavyObject> first = Di2015NewLine  new LazyProperty<HeavyObject>(() => new HeavyObject { MyProperty = Value });Di2015NewLinepublic HeavyObject First { Di2015NewLine  get { Di2015NewLine    return first; Di2015NewLine  } Di2015NewLine}Di2015NewLine
440403Di2015UniqueSeparatorprivate HeavyObject first;Di2015NewLinepublic HeavyObject First { Di2015NewLine  get {Di2015NewLine    if (first == null) first = new HeavyObject { MyProperty = Value };Di2015NewLine    return first;Di2015NewLine  }Di2015NewLine}Di2015NewLine
440608Di2015UniqueSeparatorGetTable<T>
440608Di2015UniqueSeparatorFoo foo = ctx.Get<Foo>(fooid);Di2015NewLineBar bar = ctx.Get<Bar>(barid);Di2015NewLine
440608Di2015UniqueSeparator    public static TItem Get<TItem, TKey>(Di2015NewLine        this DataContext ctx, TKey key)Di2015NewLine        where TItem : classDi2015NewLine    {Di2015NewLine        var table = ctx.GetTable<TItem>();Di2015NewLine        var primaryKey = ctx.Mapping.GetMetaType(typeof(TItem))Di2015NewLine                .DataMembers.Where(Di2015NewLine            member => member.IsPrimaryKey).Single().Member.Name;Di2015NewLineDi2015NewLine        var item = Expression.Parameter(typeof(TItem), "item");Di2015NewLine        var lambda = Expression.Lambda<Func<TItem, bool>>(Di2015NewLine            Expression.Equal(Di2015NewLine                Expression.PropertyOrField(item, primaryKey),Di2015NewLine                Expression.Constant(key, typeof(TKey))),Di2015NewLine                item);Di2015NewLine        return table.Single(lambda);Di2015NewLine    }Di2015NewLine    public static TItem Get<TItem>( // common caseDi2015NewLine        this DataContext ctx, int key)Di2015NewLine        where TItem : classDi2015NewLine    {Di2015NewLine        return Get<TItem, int>(ctx, key);Di2015NewLine    }Di2015NewLine    public static TItem Get<TItem>( // common caseDi2015NewLine       this DataContext ctx, string key)Di2015NewLine       where TItem : classDi2015NewLine    {Di2015NewLine        return Get<TItem, string>(ctx, key);Di2015NewLine    }Di2015NewLine
440636Di2015UniqueSeparatorbool hasjQuery = webBrowser1.Document.InvokeScript("jQuery") != null;Di2015NewLine
440906Di2015UniqueSeparatorCompileAssemblyFromDomDi2015NewLineCompileAssemblyFromFileDi2015NewLineCompileAssemblyFromSourceDi2015NewLine
440964Di2015UniqueSeparator// This is the Callback handler - after "Binding" this is calledDi2015NewLine        public bool MySSLHandler(Syscert.X509Certificate certificate, int[] certificateErrors)Di2015NewLine        {Di2015NewLineDi2015NewLine            X509Store store = null;Di2015NewLine            X509Stores stores = X509StoreManager.LocalMachine;Di2015NewLine            store = stores.TrustedRoot;Di2015NewLineDi2015NewLine            //Import the details of the certificate from the server.Di2015NewLineDi2015NewLine            X509Certificate x509 = null;Di2015NewLine            X509CertificateCollection coll = new X509CertificateCollection();Di2015NewLine            byte[] data = certificate.GetRawCertData();Di2015NewLine            if (data != null)Di2015NewLine                x509 = new X509Certificate(data);Di2015NewLineDi2015NewLine            //List the details of the ServerDi2015NewLineDi2015NewLine            //if (bindCount == 1)Di2015NewLine            //{Di2015NewLineDi2015NewLine            Response.Write("<b><u>CERTIFICATE DETAILS:</b></u> <br>");Di2015NewLine            Response.Write("  Self Signed = " + x509.IsSelfSigned + "  X.509  version=" + x509.Version + "<br>");Di2015NewLine            Response.Write("  Serial Number: " + CryptoConvert.ToHex(x509.SerialNumber) + "<br>");Di2015NewLine            Response.Write("  Issuer Name:   " + x509.IssuerName.ToString() + "<br>");Di2015NewLine            Response.Write("  Subject Name:  " + x509.SubjectName.ToString() + "<br>");Di2015NewLine            Response.Write("  Valid From:    " + x509.ValidFrom.ToString() + "<br>");Di2015NewLine            Response.Write("  Valid Until:   " + x509.ValidUntil.ToString() + "<br>");Di2015NewLine            Response.Write("  Unique Hash:   " + CryptoConvert.ToHex(x509.Hash).ToString() + "<br>");Di2015NewLine            // }Di2015NewLineDi2015NewLine            bHowToProceed = true;Di2015NewLine            if (bHowToProceed == true)Di2015NewLine            {Di2015NewLine                //Add the certificate to the store. This is \\Documents and Settings\\program data\\.mono. . .Di2015NewLine                if (x509 != null)Di2015NewLine                    coll.Add(x509);Di2015NewLine                store.Import(x509);Di2015NewLine                if (bindCount == 1)Di2015NewLine                    removeFlag = true;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (bHowToProceed == false)Di2015NewLine            {Di2015NewLine                //Remove the certificate added from the store.Di2015NewLineDi2015NewLine                if (removeFlag == true && bindCount > 1)Di2015NewLine                {Di2015NewLine                    foreach (X509Certificate xt509 in store.Certificates)Di2015NewLine                    {Di2015NewLine                        if (CryptoConvert.ToHex(xt509.Hash) == CryptoConvert.ToHex(x509.Hash))Di2015NewLine                        {Di2015NewLine                            store.Remove(x509);Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                Response.Write("SSL Bind Failed.");Di2015NewLine            }Di2015NewLine            return bHowToProceed;Di2015NewLine        }Di2015NewLine
440964Di2015UniqueSeparator// Create ConnectionDi2015NewLine                LdapConnection conn = new LdapConnection();Di2015NewLine                conn.SecureSocketLayer = true;Di2015NewLine                Response.Write("Connecting to:" + ldapHost);Di2015NewLineDi2015NewLine                conn.UserDefinedServerCertValidationDelegate += newDi2015NewLine                    CertificateValidationCallback(MySSLHandler);Di2015NewLineDi2015NewLine                if (bHowToProceed == false)Di2015NewLine                    conn.Disconnect();Di2015NewLine                if (bHowToProceed == true)Di2015NewLine                {Di2015NewLine                    conn.Connect(ldapHost, ldapPort);Di2015NewLine                    conn.Bind(loginDN, password);Di2015NewLine                    Response.Write(" SSL Bind Successfull ");Di2015NewLineDi2015NewLine                    conn.Disconnect();Di2015NewLine                }Di2015NewLine                quit = false;Di2015NewLine
441223Di2015UniqueSeparatorPrivate Function OpenDatabaseWithShell(pDatabaseFullPath As String) As Access.ApplicationDi2015NewLineDi2015NewLineDim AccObj As Access.ApplicationDi2015NewLineDi2015NewLine    On Error GoTo ErrorHandlerDi2015NewLineDi2015NewLine    Set OpenDatabaseWithShell = NothingDi2015NewLineDi2015NewLine    Dim cmd As StringDi2015NewLineDi2015NewLine    On Error Resume NextDi2015NewLineDi2015NewLine    ' basically build full msaccess.exe path and append database name and command switchesDi2015NewLine    cmd = SysCmd(acSysCmdAccessDir) & "MSAccess.exe """ & psDatabaseFullPath & """"Di2015NewLine    cmd = cmd & " /nostartup /excl"Di2015NewLineDi2015NewLine    'start ms access with shellDi2015NewLine    Shell PathName:=cmdDi2015NewLineDi2015NewLine    Do 'Wait for shelled process to finish.Di2015NewLine      Err = 0Di2015NewLine      Set AccObj = GetObject(pDatabaseFullPath)Di2015NewLine    Loop While Err <> 0Di2015NewLineDi2015NewLine    On Error GoTo ErrorHandlerDi2015NewLineDi2015NewLine    'return access objectDi2015NewLine    Set OpenDatabaseWithShell = AccObjDi2015NewLineDi2015NewLineNormalExit:Di2015NewLine    Exit FunctionDi2015NewLineDi2015NewLineErrorHandler:Di2015NewLine    'error logging hereDi2015NewLine    Exit FunctionDi2015NewLineDi2015NewLineEnd FunctionDi2015NewLine
441258Di2015UniqueSeparatorstatic MyCustomClass myClass;Di2015NewLinepublic static MyCustomClass MyClass {get {return myClass;}}Di2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    // Create an object of type MyCustomClass.Di2015NewLine    myClass = new MyCustomClass();Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
441258Di2015UniqueSeparatorProgram.MyClass
441478Di2015UniqueSeparatorif (SomeClass.Version == 1)
441540Di2015UniqueSeparator(Member1.ToString() + "|" + Member2.ToString()).GetHasCode();Di2015NewLine
441540Di2015UniqueSeparatorthis.ToString().GetHashCode();Di2015NewLine
441551Di2015UniqueSeparatorpublic delegate void TreeActionDelegate(WhatToDo details);Di2015NewLineDi2015NewLinepublic void DoSomethingWithThisTree(WhatToDo details)Di2015NewLine{Di2015NewLine    // Assuming that 'this' points to a TreeViewDi2015NewLine    if (this.InvokeRequired) this.Invoke(new TreeActionDelegate(),Di2015NewLine        new object[] { details });Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        // The body of your functionDi2015NewLine    }Di2015NewLine}Di2015NewLine
441551Di2015UniqueSeparatorDoSomethingWithThisTree(new WhatToDo("something"));Di2015NewLine
441551Di2015UniqueSeparatortreeInstance.InvokeRequired
441551Di2015UniqueSeparatortreeInstance.Invoke(
441623Di2015UniqueSeparatorpublic abstract class Animal {}Di2015NewLineDi2015NewLinepublic class Chicken : Animal {}Di2015NewLine
441623Di2015UniqueSeparatorvar chickens = animals.OfType<Chicken>().Cast<Animal>().ToList();Di2015NewLineDi2015NewLinevar nonChickens = animals.Except(chickens).ToList();Di2015NewLine
441623Di2015UniqueSeparatorvar chickens = new List<Animal>();Di2015NewLinevar nonChickens = new List<Animal>();Di2015NewLineDi2015NewLineforeach(var animal in animals)Di2015NewLine{Di2015NewLine    var list = animal is Chicken ? chickens : nonChickens;Di2015NewLineDi2015NewLine    list.Add(animal);Di2015NewLine}Di2015NewLine
441732Di2015UniqueSeparator> [System.Reflection.Assembly]::LoadWithPartialName("System.Web")Di2015NewLineDi2015NewLine> [System.Web.Security.SqlMembershipProvider] | select {$_.UnderlyingSystemType.AssemblyQualifiedName } | export-csv c:\\typenames.csvDi2015NewLine
441732Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLine........Di2015NewLineDi2015NewLineType ty = typeof(System.Web.Security.SqlMembershipProvider);Di2015NewLinestring fullname = ty.AssemblyQualifiedName;Di2015NewLine//"System.Web.Security.SqlMembershipProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"Di2015NewLine
441834Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.ComponentModel.Design;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace ReferencedAssembliesDi2015NewLine{Di2015NewLine    public partial class GetReferencedComponents : Component, ISupportInitializeDi2015NewLine    {Di2015NewLine        private Control hostingControl;Di2015NewLineDi2015NewLine        public GetReferencedComponents(IContainer container) : this()Di2015NewLine        {Di2015NewLine            container.Add(this);Di2015NewLine        }Di2015NewLineDi2015NewLine        public GetReferencedComponents()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            Assemblies = new List<string>();Di2015NewLine            GetAssemblies();Di2015NewLine        }Di2015NewLineDi2015NewLine        public List<string> Assemblies { get; private set;  }Di2015NewLineDi2015NewLine        [Browsable(false)]Di2015NewLine        public Control HostingControlDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                if (hostingControl == null && this.DesignMode)Di2015NewLine                {Di2015NewLine                    IDesignerHost designer = this.GetService(typeof(IDesignerHost)) as IDesignerHost;Di2015NewLine                    if (designer != null)Di2015NewLine                        hostingControl = designer.RootComponent as Control;Di2015NewLine                }Di2015NewLine                return hostingControl;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                if (!this.DesignMode && hostingControl != null && hostingControl != value)Di2015NewLine                    throw new InvalidOperationException("Cannot set at runtime.");Di2015NewLine                elseDi2015NewLine                    hostingControl = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void BeginInit()Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public void EndInit()Di2015NewLine        {Di2015NewLine            // use ISupportInitialize.EndInit() to trigger loading assemblies at design-time.Di2015NewLine            GetAssemblies();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void GetAssemblies()Di2015NewLine        {Di2015NewLine            if (HostingControl != null)Di2015NewLine            {Di2015NewLine                if (this.DesignMode)Di2015NewLine                    MessageBox.Show(String.Format("Getting Referenced Assemblies from {0}", HostingControl.Name));Di2015NewLine                Assemblies.Clear();Di2015NewLine                AssemblyName[] assemblyNames = HostingControl.GetType().Assembly.GetReferencedAssemblies();Di2015NewLine                foreach (AssemblyName item in assemblyNames)Di2015NewLine                    Assemblies.Add(item.Name);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
441956Di2015UniqueSeparator<
441956Di2015UniqueSeparator<
442170Di2015UniqueSeparatorAddComponent<>
442203Di2015UniqueSeparatorINSERT INTO DataTable (ContactName, Designation) VALUES Di2015NewLine    (@ContactName1, @Designation1), Di2015NewLine    (@ContactName2, @Designation2);Di2015NewLine
442203Di2015UniqueSeparatorSELECT MAX(ID) AS max_id FROM DataTableDi2015NewLine
442219Di2015UniqueSeparatorStory
442219Di2015UniqueSeparatorScore
442219Di2015UniqueSeparatorStory
442219Di2015UniqueSeparatorusing System.Linq;Di2015NewLineusing System;Di2015NewLineclass Story { // declare typeDi2015NewLine    public DateTime PostedOn { get; set; }Di2015NewLine    // simplified purely for convenienceDi2015NewLine    public int VotesCount { get; set; }Di2015NewLine    public int CommentsCount { get; set; }Di2015NewLine}Di2015NewLinestatic class Program {Di2015NewLine    static void Main() {Di2015NewLine        // dummy dataDi2015NewLine        var data = new[] {Di2015NewLine            new Story { PostedOn = DateTime.Today,Di2015NewLine                VotesCount = 1, CommentsCount = 2},Di2015NewLine            new Story { PostedOn = DateTime.Today.AddDays(-1),Di2015NewLine                VotesCount = 5, CommentsCount = 22},Di2015NewLine            new Story { PostedOn = DateTime.Today.AddDays(-2),Di2015NewLine                VotesCount = 2, CommentsCount = 0}Di2015NewLine        };Di2015NewLine        var ordered = data.OrderByDescending(s=>Score(s));Di2015NewLine        foreach (var row in ordered)Di2015NewLine        {Di2015NewLine            Console.WriteLine(row.PostedOn);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static double Score(Story s) {Di2015NewLine        DateTime now = DateTime.Now;Di2015NewLine        TimeSpan elapsed = now.Subtract(s.PostedOn);Di2015NewLine        double daysAgo = elapsed.TotalDays;Di2015NewLine        // simplified purely for convenienceDi2015NewLine        return s.VotesCount + s.CommentsCount - daysAgo;Di2015NewLine    }Di2015NewLine}Di2015NewLine
442219Di2015UniqueSeparatorthis
442219Di2015UniqueSeparatorScore(this Story s)
442219Di2015UniqueSeparator.OrderByDescending(s=>s.Score())Di2015NewLine
442253Di2015UniqueSeparatorSystem.Text.RegularExpressions.Regex.Replace()
442316Di2015UniqueSeparatorAppdomain1:Di2015NewLine    AppDomain2.DoSomething(myMainForm);Di2015NewLineDi2015NewLineAppDomain2:Di2015NewLine    DoSomething(Form parent)Di2015NewLine    {Di2015NewLine        Form foolishForm = new Form();Di2015NewLine        parent.BeginInvoke(new Action( delegate { foolishForm.Show(); } ));Di2015NewLine    }Di2015NewLine
442316Di2015UniqueSeparatorpublic class Container<T> : MarshalByRefObjectDi2015NewLine{Di2015NewLine    private T _value;Di2015NewLine    public T Value { get { return _value; } set { _value = value; } }Di2015NewLineDi2015NewLine    public Container() { }Di2015NewLine    public Container(T value) { Value = value; }Di2015NewLineDi2015NewLine    public static implicit operator T(Container<T> container)Di2015NewLine    {Di2015NewLine        return container.Value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
442368Di2015UniqueSeparatorMicrosoft.Win32.SystemEvents.DisplaySettingsChangedDi2015NewLine
442549Di2015UniqueSeparator_targetForm.dw_retailer.SetColumn(6);Di2015NewLine_targetForm.dw_retailer.SetText(retailer.text);Di2015NewLine_targetForm.dw_retailer.SetColumn(9);Di2015NewLine_targetForm.dw_retailer.SetText(retailer.webname);Di2015NewLine
442683Di2015UniqueSeparatorProcess
442785Di2015UniqueSeparatorMarshal.Copy( source, destination, 0, size );Di2015NewLine
442828Di2015UniqueSeparatorclass ListViewNF : System.Windows.Forms.ListViewDi2015NewLine{Di2015NewLine    public ListViewNF()Di2015NewLine    {Di2015NewLine        //Activate double bufferingDi2015NewLine        this.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true);Di2015NewLineDi2015NewLine        //Enable the OnNotifyMessage event so we get a chance to filter out Di2015NewLine        // Windows messages before they get to the form's WndProcDi2015NewLine        this.SetStyle(ControlStyles.EnableNotifyMessage, true);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnNotifyMessage(Message m)Di2015NewLine    {Di2015NewLine        //Filter out the WM_ERASEBKGND messageDi2015NewLine        if(m.Msg != 0x14)Di2015NewLine        {Di2015NewLine            base.OnNotifyMessage(m);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
442954Di2015UniqueSeparatorpublic MyForm()Di2015NewLine{Di2015NewLine    InitializeComponent()Di2015NewLine    someButton.Click += (press [tab][tab] now)Di2015NewLine}Di2015NewLine
442954Di2015UniqueSeparatorpublic MyForm()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    someButton.Click += new EventHandler(someButton_Click);Di2015NewLine}Di2015NewLineDi2015NewLinevoid someButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    throw new NotImplementedException(); // your code here ;-pDi2015NewLine}Di2015NewLine
443055Di2015UniqueSeparatorfrom p in db.productsDi2015NewLine    select newDi2015NewLine    {Di2015NewLine        Owner = (p.price > 0 ?Di2015NewLine            from q in db.Users select q.Name :Di2015NewLine            from r in db.ExternalUsers select r.Name)Di2015NewLine    }Di2015NewLine
443156Di2015UniqueSeparatorDialog d = WordApp.Dialogs[WdWordDialog.wdDialogTableInsertTable];Di2015NewLineDi2015NewLineMainApplicationFormInstance.Enabled = false;Di2015NewLineint result = d.Display(ref missing);Di2015NewLineMainApplicationFormInstance.Enabled = true;Di2015NewLineDi2015NewLineif (result == -1)  // user pressed OKDi2015NewLine{Di2015NewLine    d.Execute();Di2015NewLine}Di2015NewLine
443191Di2015UniqueSeparatorpublic class ContainerDi2015NewLine{Di2015NewLine    private readonly  List<int> _myList;Di2015NewLineDi2015NewLine    public List<int> MyListDi2015NewLine    {Di2015NewLine        get { return _myList;}Di2015NewLine    }Di2015NewLineDi2015NewLine    public Container() : base ()Di2015NewLine    {Di2015NewLine        _myList = new List<int>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void BreakReadOnly()Di2015NewLine    {Di2015NewLine        _myList = new List<int>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
443191Di2015UniqueSeparatorBreakReadOnly
443191Di2015UniqueSeparator    public ReadOnlyCollection<int> MyListDi2015NewLine    {Di2015NewLine        get { return _myList.AsReadOnly(); }Di2015NewLine    }Di2015NewLine
443203Di2015UniqueSeparatorEntityCollection<T>
443203Di2015UniqueSeparatorIQueryable<T>
443203Di2015UniqueSeparatorEntityCollection<T>
443203Di2015UniqueSeparatorIQueryable<T>
443203Di2015UniqueSeparatorEntityCollection<T>
443306Di2015UniqueSeparator  XmlDocument doc = new XmlDocument();  Di2015NewLineDi2015NewLine  XmlSchema schema = new XmlSchema();Di2015NewLine  schema.Namespaces.Add("xmlns", "http://www.sample.com/file");Di2015NewLineDi2015NewLine  doc.Schemas.Add(schema);Di2015NewLine
443306Di2015UniqueSeparatorusing System.Xml.Schema;Di2015NewLineusing System.Xml;Di2015NewLine
443507Di2015UniqueSeparatormyCollection.Where(person =>....); //non descriptive collection nameDi2015NewLineDi2015NewLinemyPeopleCollection.Where(p=>...); // descriptive collection nameDi2015NewLine
443611Di2015UniqueSeparator[DllImport("coredll.dll", EntryPoint = "RegSetValueExW")]Di2015NewLinepublic static extern int RegSetValueExW(uint hKey, string lpValueName,Di2015NewLine        uint lpReserved,Di2015NewLine        uint lpType,Di2015NewLine        ref int lpData,Di2015NewLine        uint lpcbData);Di2015NewLine
443615Di2015UniqueSeparatorpublic void MyFunc()Di2015NewLine{Di2015NewLine//do release stuffDi2015NewLine#if DEBUGDi2015NewLine//do performance testingDi2015NewLine#endifDi2015NewLine//finish release stuffDi2015NewLine}Di2015NewLine
443615Di2015UniqueSeparator#define PERFORMANCE_TESTINGDi2015NewLineDi2015NewLine    public void MyFunc()Di2015NewLine    {Di2015NewLine    //do release stuffDi2015NewLine    #if PERFORMANCE_TESTINGDi2015NewLine    //do performance testingDi2015NewLine    #endifDi2015NewLine    //finish release stuffDi2015NewLine    }Di2015NewLine
443656Di2015UniqueSeparatorprivate static readonly object syncLock = new object();Di2015NewLineDi2015NewLinepublic void SaveToDisk()Di2015NewLine{Di2015NewLine     lock(syncLock)Di2015NewLine     {Di2015NewLine          ... write code ...Di2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLinepublic void ReadFromDisk()Di2015NewLine{Di2015NewLine     lock(syncLock)Di2015NewLine     {Di2015NewLine          ... read code ...Di2015NewLine     }Di2015NewLine}Di2015NewLine
443674Di2015UniqueSeparatorSplit('\\\\')Di2015NewLine
443707Di2015UniqueSeparatorprintNode(Node node)Di2015NewLine{Di2015NewLine  printTitle(node.title)Di2015NewLine  foreach (Node child in node.children)Di2015NewLine  {Di2015NewLine    printNode(child); //<-- recursiveDi2015NewLine  }Di2015NewLine}Di2015NewLine
443707Di2015UniqueSeparatorprintRoot(Node node)Di2015NewLine{Di2015NewLine  printNode(node, 0);Di2015NewLine}Di2015NewLineDi2015NewLineprintNode(Node node, int level)Di2015NewLine{Di2015NewLine  printTitle(node.title)Di2015NewLine  foreach (Node child in node.children)Di2015NewLine  {Di2015NewLine    printNode(child, level + 1); //<-- recursiveDi2015NewLine  }Di2015NewLine}Di2015NewLine
443808Di2015UniqueSeparator    private static string SplitNameValuePairs<T>(T value)Di2015NewLine    {Di2015NewLine        StringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLine        foreach (PropertyInfo property in typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))Di2015NewLine        {Di2015NewLine            if (property.GetIndexParameters().Length == 0)Di2015NewLine                sb.AppendFormat("{0}:{1};", property.Name, property.GetValue(value, null));Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLine
443956Di2015UniqueSeparatorfoo[bar]
443956Di2015UniqueSeparatorfoo.Chars(bar)
443956Di2015UniqueSeparatorStringBuilder sb = new StringBuilder("Hello");Di2015NewLinechar c = sb[1]; // c='e'Di2015NewLine
444104Di2015UniqueSeparatorSpring
444104Di2015UniqueSeparatorTrue
444158Di2015UniqueSeparatorXmlDocument
444158Di2015UniqueSeparatorXmlReader
444158Di2015UniqueSeparatorXmlDocument
444158Di2015UniqueSeparatorXmlWriter
444209Di2015UniqueSeparatorprivate readonly object _lock = new object();
444209Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass ExampleDi2015NewLine{Di2015NewLine    private readonly object _lock = new object();Di2015NewLineDi2015NewLine    bool IsDepletedDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            lock (_lock)Di2015NewLine            {Di2015NewLine                return WaitingQueue.Count == 0Di2015NewLine                 && Processing.Count == 0;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly List<object> Processing = new List<object>();Di2015NewLine    private readonly Queue<object> WaitingQueue = new Queue<object>();Di2015NewLineDi2015NewLine    public void MethodA(object item)Di2015NewLine    {Di2015NewLine        lock (_lock)Di2015NewLine        {Di2015NewLine            if (WaitingQueue.Count > 0)Di2015NewLine            {Di2015NewLine                if (StartItem(WaitingQueue.Peek()))Di2015NewLine                {Di2015NewLine                    WaitingQueue.Dequeue();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void MethodB(object identifier)Di2015NewLine    {Di2015NewLine        lock (_lock)Di2015NewLine        {Di2015NewLine            Processing.Remove(identifier);Di2015NewLine            if (!IsDepleted)Di2015NewLine            {Di2015NewLine                return;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        //Do something...Di2015NewLine    }Di2015NewLineDi2015NewLine    bool StartItem(object item)Di2015NewLine    {Di2015NewLine        //Do something and return a valueDi2015NewLine    }Di2015NewLine}Di2015NewLine
444226Di2015UniqueSeparatorvar button = (Button)e.Item.FindControl("Button1");Di2015NewLinebutton.OnClientClick = "ShowEditDialog(" + Eval("ItemId") + ")";Di2015NewLine
444316Di2015UniqueSeparatorvoid CopyStream(Stream destination, Stream source) {Di2015NewLine   int count;Di2015NewLine   byte[] buffer = new byte[BUFFER_SIZE];Di2015NewLine   while( (count = source.Read(buffer, 0, buffer.Length)) > 0)Di2015NewLine       destination.Write(buffer, 0, count);Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineCopyStream(outputFileStream, fileStream1);Di2015NewLineCopyStream(outputFileStream, fileStream2);Di2015NewLineCopyStream(outputFileStream, fileStream3);Di2015NewLine
444404Di2015UniqueSeparatorSmtpClient srv = new SmtpClient("exchsrv2007", 25) {Di2015NewLine    DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory,Di2015NewLine    PickupDirectoryLocation = "\\\\exchsrv2007\\PickupFolder"Di2015NewLine}Di2015NewLine...Di2015NewLine
444425Di2015UniqueSeparatorwhile(true)
444425Di2015UniqueSeparatorreturn
444425Di2015UniqueSeparatorstop
444504Di2015UniqueSeparatorfor (int i = 0; i < NumberOfAttachments; i++) {Di2015NewLine    Panel.Controls.Add(new MyControl());Di2015NewLine}Di2015NewLine
444507Di2015UniqueSeparator[WebMethod]Di2015NewLine    public String GetPONumber(string Database)Di2015NewLine    {   Di2015NewLine        //Create Object ready for ValueDi2015NewLine        object po = "";Di2015NewLineDi2015NewLine        //Set ConnectionDi2015NewLine        SqlConnection Connection = new SqlConnection(GetConnString(Database));Di2015NewLineDi2015NewLine        //Open ConnectionDi2015NewLine        Connection.Open();Di2015NewLineDi2015NewLine        //Set Query to stringDi2015NewLine        string Query = @" SQL QUERY GOES HERE!!!! ";Di2015NewLineDi2015NewLine        //Run QueryDi2015NewLine        SqlCommand Command = new SqlCommand(Query, Connection);Di2015NewLineDi2015NewLine        //Set Value from QueryDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            po = Command.ExecuteScalar();Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLine            //ErrorDi2015NewLine        }Di2015NewLineDi2015NewLine        //Clean up sqlDi2015NewLine        Command.Dispose();Di2015NewLine        Command = null;Di2015NewLineDi2015NewLineDi2015NewLine        //Clean up connectionDi2015NewLine        Connection.Close();Di2015NewLine        Connection.Dispose();Di2015NewLine        Connection = null;Di2015NewLineDi2015NewLine        //Return ValueDi2015NewLine        return po.ToString();Di2015NewLine    }Di2015NewLine
444527Di2015UniqueSeparatorpublic ConsoleForm(Process p) {Di2015NewLine        this.p = p;Di2015NewLine        p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;Di2015NewLine        p.StartInfo.CreateNoWindow = true;Di2015NewLine        p.Start();Di2015NewLineDi2015NewLine        this.inStream = p.StandardInput;Di2015NewLine        this.outStream = p.StandardOutput;Di2015NewLine        this.errorStream = p.StandardError;Di2015NewLineDi2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        wr = new watcherReader(watchProc);Di2015NewLine        wr.BeginInvoke(this.outStream, this.txtOut, null, null);Di2015NewLine        wr.BeginInvoke(this.errorStream, this.txtOut2, null, null);Di2015NewLine    }Di2015NewLine
444677Di2015UniqueSeparatorSystem.Threading.Semaphore S = new System.Threading.Semaphore(3, 3);Di2015NewLine
444677Di2015UniqueSeparatorSystem.Threading.Semaphore S = new System.Threading.Semaphore(3, 3);Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    // wait your turn (decrement)Di2015NewLine    S.WaitOne();Di2015NewLine    // do your thingDi2015NewLine}Di2015NewLineDi2015NewLinefinally {Di2015NewLine    // release so others can go (increment)Di2015NewLine    S.Release();Di2015NewLine}Di2015NewLine
444680Di2015UniqueSeparatorfor(int i = 0; i < n; i++)Di2015NewLine{Di2015NewLine  tryDi2015NewLine  {Di2015NewLine    myCall();Di2015NewLine  }Di2015NewLine  catch(Exception e)Di2015NewLine  {Di2015NewLine    Log(String.Format("Problem with {0}", i));Di2015NewLine  }Di2015NewLine}Di2015NewLine
444965Di2015UniqueSeparatorpublic void Test()Di2015NewLine{Di2015NewLine    DynamicMethod method = new DynamicMethod(string.Empty, typeof(void), new[] { typeof(object), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) }, typeof(Program));Di2015NewLineDi2015NewLineDi2015NewLine    MethodInfo method1 = typeof(Program).GetMethod("Question", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[] { typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) }, null);Di2015NewLine    MethodInfo method2 = typeof(MethodBase).GetMethod("GetCurrentMethod", BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[] { }, null);Di2015NewLine    MethodInfo method3 = typeof(Console).GetMethod("WriteLine", BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[] { typeof(Object) }, null);Di2015NewLineDi2015NewLine    ILGenerator gen = method.GetILGenerator();Di2015NewLineDi2015NewLine    gen.Emit(OpCodes.Nop);Di2015NewLine    gen.Emit(OpCodes.Ldarg_S, 0);Di2015NewLine    gen.Emit(OpCodes.Ldarg_S, 1);Di2015NewLine    gen.Emit(OpCodes.Ldarg_S, 2);Di2015NewLine    gen.Emit(OpCodes.Ldarg_S, 3);Di2015NewLine    gen.Emit(OpCodes.Ldarg_S, 4);Di2015NewLine    gen.Emit(OpCodes.Ldarg_S, 5);Di2015NewLine    gen.Emit(OpCodes.Ldarg_S, 6);Di2015NewLine    gen.Emit(OpCodes.Call, method1);Di2015NewLine    gen.Emit(OpCodes.Nop);Di2015NewLine    gen.Emit(OpCodes.Call, method2);Di2015NewLine    gen.Emit(OpCodes.Call, method3);Di2015NewLine    gen.Emit(OpCodes.Nop);Di2015NewLine    gen.Emit(OpCodes.Ret);Di2015NewLineDi2015NewLine    TestHandler handler = method.CreateDelegate(typeof(TestHandler)) as TestHandler;Di2015NewLine    handler(this, 1, 2, 3, 4, 5, 6);Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Question(int a, int b, int c, int d, int e, int f)Di2015NewLine{Di2015NewLine    Console.WriteLine("{0},{1},{2},{3},{4},{5}", a, b, c, d, e, f);Di2015NewLine}Di2015NewLine
445063Di2015UniqueSeparatorSystem->Preferences->Appearance->Fonts->Details
445076Di2015UniqueSeparatorcase
445076Di2015UniqueSeparatorif
445106Di2015UniqueSeparatorvar qry = from product in dc.Products where Product.Name=='Foobar' select product;Di2015NewLinevar item = qry.Single();Di2015NewLineitem.Count = 0;Di2015NewLinedc.SubmitChanges();Di2015NewLine
445106Di2015UniqueSeparatorvar qry = from product in dc.Products where Product.Type==1 select product;Di2015NewLineforeach(var item in qry)Di2015NewLine{Di2015NewLine  item.Count = 0;Di2015NewLine}Di2015NewLinedc.SubmitChanges();Di2015NewLine
445106Di2015UniqueSeparatordc.ExecuteCommand("update Product set Count=0 where Type=1", null);Di2015NewLine
445204Di2015UniqueSeparatorprotected override void OnLoad(EventArgs e)Di2015NewLine{Di2015NewLine    Response.Cache.SetNoStore();Di2015NewLine    Response.Cache.SetCacheability(HttpCacheability.NoCache);Di2015NewLine    Response.Cache.SetExpires(DateTime.Now);Di2015NewLine    Response.Cache.SetLastModified(DateTime.Now);Di2015NewLine    Response.Cache.SetAllowResponseInBrowserHistory(false);Di2015NewLine    base.OnLoad(e);Di2015NewLine}Di2015NewLine
445278Di2015UniqueSeparator [DebuggerStepThrough]Di2015NewLine
445497Di2015UniqueSeparatorCast<T>()
445497Di2015UniqueSeparatorvar list = new[] { 1 };Di2015NewLinevar castedList = from long l in list select l;Di2015NewLineConsole.WriteLine(castedList.First());Di2015NewLine
445497Di2015UniqueSeparatorvar castedList = list.Select(i => (long)i);Di2015NewLine
445497Di2015UniqueSeparatorCast<T>()
445497Di2015UniqueSeparatorIEnumerable
445497Di2015UniqueSeparatorIEnumerable<T>
445497Di2015UniqueSeparatorint i = 1;Di2015NewLineobject o = i;Di2015NewLinelong l = (long)o;Di2015NewLine
445522Di2015UniqueSeparatorinternal
445522Di2015UniqueSeparatorInternalsVisibleToAttribute
445522Di2015UniqueSeparatorSystem.Rutime.CompilerServices
445522Di2015UniqueSeparatorprivate
445522Di2015UniqueSeparatorinternal class MyClass {Di2015NewLine    ...Di2015NewLine}Di2015NewLine
445522Di2015UniqueSeparator[assembly:InternalsVisibleTo("MyFriendAssembly", PublicKey="...")]Di2015NewLineinternal class MyVisibleClass {Di2015NewLine    ...Di2015NewLine}Di2015NewLine
445522Di2015UniqueSeparatorfriend
445522Di2015UniqueSeparatorprotected
445690Di2015UniqueSeparatorA = C / BDi2015NewLineB = C / ADi2015NewLineC = A * BDi2015NewLine
445690Di2015UniqueSeparatoreditOrder = {A : 0, B : 0, C : 0 }  // (or just use 0, 1, 2)Di2015NewLineeditCount = 0;Di2015NewLineDi2015NewLineevery time any field is edited :Di2015NewLine    editCount = editCount + 1Di2015NewLine    editOrder[field] = editCountDi2015NewLine    if two fields have an editOrder > 0Di2015NewLine        recalculate the field with the lowest editOrderDi2015NewLine
445690Di2015UniqueSeparatorField changed    editOrder        recalculate fieldDi2015NewLine    A            1,0,0            -Di2015NewLine    A            2,0,0            -Di2015NewLine    B            2,3,0            CDi2015NewLine    C            2,3,4            ADi2015NewLine    C            2,3,5            ADi2015NewLine    B            2,6,5            ADi2015NewLine    A            7,6,5            CDi2015NewLine
445739Di2015UniqueSeparator  public class OrderDi2015NewLine  {Di2015NewLine     private double _totalCash;Di2015NewLine     private double _price;Di2015NewLine     private double _quantity;Di2015NewLine     private _IsDirtyTotalCash = true;Di2015NewLineDi2015NewLine  private void CalcCashTotal()Di2015NewLine  {Di2015NewLine    _totalCash = _price * _quantityDi2015NewLine  }Di2015NewLineDi2015NewLine  public double PriceDi2015NewLine  {      Di2015NewLine   setDi2015NewLine   {Di2015NewLine     _price = value;Di2015NewLine     _IsDirtyTotalCash = true;Di2015NewLine   }Di2015NewLine  }Di2015NewLineDi2015NewLine  public double QuantityDi2015NewLine  {      Di2015NewLine   setDi2015NewLine   {Di2015NewLine     _price = value;Di2015NewLine     _IsDirtyTotalCash = true;Di2015NewLine   }Di2015NewLine  }Di2015NewLineDi2015NewLine  public double TotalCashDi2015NewLine  {      Di2015NewLine   getDi2015NewLine   {Di2015NewLine        if(_IsDirtyTotalCash)Di2015NewLine    {Di2015NewLine      _totalCash = CalcTotalCost();Di2015NewLine       _isDirtyTotalCash = false;Di2015NewLine     }Di2015NewLine     return _totalCash;Di2015NewLine   }Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
445886Di2015UniqueSeparatorvar emp = new List<Employee>Di2015NewLine{Di2015NewLine    new Employee{ID=1, EmpFname="matt", EmpLName="Cook"},Di2015NewLine    new Employee{ID=2, EmpFname="mary", EmpLname="John"}Di2015NewLine};Di2015NewLine
446010Di2015UniqueSeparatorvar list = anBook.Select(x=> new ClearBook {Di2015NewLine               Code = x.Code, Book = x.Book}).ToList();Di2015NewLine
446010Di2015UniqueSeparatorpublic int Code { get; set; }Di2015NewLinepublic string Book { get; set; }Di2015NewLine
446010Di2015UniqueSeparatorvar list =new List<ClearBook> {Di2015NewLine    new ClearBook {Code=10, Book ="Harry Potter"},Di2015NewLine    new ClearBook {Code=11, Book="James Bond"}Di2015NewLine};Di2015NewLine
446010Di2015UniqueSeparatorExpression
446232Di2015UniqueSeparatorActionResult Search(string query, int startIndex, int pageSize) {...}Di2015NewLine
446232Di2015UniqueSeparator        routes.MapRoute("Search", "Search/{query}/{startIndex}",Di2015NewLine                        newDi2015NewLine                        {Di2015NewLine                            controller = "Home", action = "Search",Di2015NewLine                            startIndex = 0, pageSize = 20Di2015NewLine                        });Di2015NewLine
446232Di2015UniqueSeparatorvar page = source.Skip(startIndex).Take(pageSize);Di2015NewLine
446232Di2015UniqueSeparator<%=Html.ActionLink("next page", "Search", new {Di2015NewLine                query, startIndex = startIndex + pageSize, pageSize }) %>Di2015NewLine
446330Di2015UniqueSeparatororderby p.Comments.Max(x=>x.Created)Di2015NewLine
446330Di2015UniqueSeparatorSingle
446330Di2015UniqueSeparatorFirst()
446330Di2015UniqueSeparatorComments
446330Di2015UniqueSeparatorPost
446330Di2015UniqueSeparatorPost post = ...Di2015NewLine
446330Di2015UniqueSeparatorComments
446330Di2015UniqueSeparatorIList<T>
446330Di2015UniqueSeparatorpost.Comments = post.Comments.OrderBy(x=>x.Created).ToList();Di2015NewLine
446330Di2015UniqueSeparatorComments
446330Di2015UniqueSeparatorList<T>
446330Di2015UniqueSeparatorpost.Comments.Sort((x, y) => (x.Created.CompareTo(y.Created)));Di2015NewLine
446330Di2015UniqueSeparatorpost.Comments.Sort(x=>x.Created);Di2015NewLine
446330Di2015UniqueSeparatorpublic static void Sort<TSource, TKey>(Di2015NewLine    this List<TSource> source,Di2015NewLine    Func<TSource, TKey> selector)Di2015NewLine{Di2015NewLine    var comparer = Comparer<TKey>.Default;Di2015NewLine    source.Sort((x, y) => comparer.Compare(selector(x), selector(y)));Di2015NewLine}Di2015NewLine
446395Di2015UniqueSeparatorstring file = Path.GetTempFileName(); // pretend this is a real fileDi2015NewLinestring tmpFile = Path.GetTempFileName();Di2015NewLineDi2015NewLineusing (var stream = File.Create(tmpFile))Di2015NewLineusing (var writer = XmlWriter.Create(stream))Di2015NewLine{Di2015NewLine    writer.WriteStartElement("root");Di2015NewLine    for (int i = 0; i < 100; i++)Di2015NewLine    {Di2015NewLine        writer.WriteElementString("test", null, Di2015NewLine            "All work and no play makes Jack a dull boy");Di2015NewLine    }Di2015NewLine    writer.WriteEndElement();Di2015NewLine}                Di2015NewLineFile.Delete(file);Di2015NewLineFile.Move(tmpFile,file);Di2015NewLine
446400Di2015UniqueSeparatorSERVER_SOFTWARE
446400Di2015UniqueSeparatorMicrosoft-IIS/5.0 (Windows 2000)
446400Di2015UniqueSeparatorMicrosoft-IIS/5.1 (Windows XP)
446400Di2015UniqueSeparatorMicrosoft-IIS/6.0 (Windows 2003 Server)
446400Di2015UniqueSeparatorRequest.ServerVariables["SERVER_SOFTWARE"];Di2015NewLine
446499Di2015UniqueSeparatora4
446499Di2015UniqueSeparatordummyAgeMatch
446541Di2015UniqueSeparatorSmtpClient.DeliveryMethodDi2015NewLineSmtpClient.PickupDirectoryLocationDi2015NewLine
446552Di2015UniqueSeparatortype.GetGenericTypeDefinition() == typeof(Nullable<>)Di2015NewLine
446552Di2015UniqueSeparatorpropertyInfo.SetValue(yourObject, yourValue);Di2015NewLine
446555Di2015UniqueSeparatorusing Personnel_Database.App_Code;Di2015NewLine// now you can use everything that is inside the Personnel_Database.App_Code namespaceDi2015NewLinenamespace Personnel_DatabaseDi2015NewLine{Di2015NewLine  ...Di2015NewLine
446555Di2015UniqueSeparator  protected void Page_Load(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine    Personnel_Database.App_Code.utils.someFunction();Di2015NewLine    ...Di2015NewLine
446652Di2015UniqueSeparatorpublic class DataItemDi2015NewLine{Di2015NewLine  string Title {get;set;}Di2015NewLine  object Value {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IDataItemsDi2015NewLine{Di2015NewLine  IEnumerable<DataItem> Items()Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine//suppose LINQ gives you this:Di2015NewLinepublic partial class CustomerDi2015NewLine{Di2015NewLine  public string Name {get;set;}Di2015NewLine  public string Address {get;set;}Di2015NewLine  public int Age {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLine//then you add this in another file.Di2015NewLine//if there's a lot of this, it can be code genned by design-time reflectionDi2015NewLinepublic partial class Customer : IDataItemsDi2015NewLine{Di2015NewLine  public IEnumerable<DataItem> IDataItems.Items()Di2015NewLine  {Di2015NewLine    yield return new DataItem() {"Name", Name};Di2015NewLine    yield return new DataItem() {"Address", Address};Di2015NewLine    yield return new DataItem() {"Age", Age};Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine//and the foreach loops look like this:Di2015NewLineforeach(DataItem d in ViewData.OfType<IDataItems>().First().Items())Di2015NewLine{Di2015NewLine  d.Title;Di2015NewLine}Di2015NewLineDi2015NewLineforeach(IDataItems container in ViewData.OfType<IDataItems>())Di2015NewLine{Di2015NewLine    foreach(DataItem d in container.Items())Di2015NewLine    {Di2015NewLine       d.Value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
446705Di2015UniqueSeparatorThreadB
446722Di2015UniqueSeparatorprivate void ExceptionForm_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  DbErrorException specificException = _exception as DbErrorException;Di2015NewLine  if (specificException != null)Di2015NewLine  {Di2015NewLine     txtErrorMessage.Text += "SqlSyntax=" + specificException.SqlSyntax;Di2015NewLine  }Di2015NewLine}Di2015NewLine
446730Di2015UniqueSeparatorfrom a in dbReqsDi2015NewLinegroup a by new { a.AssignmentID, a.StopID }Di2015NewLineinto prDi2015NewLineselect newDi2015NewLine{Di2015NewLine  AssignmentID = pr.Key.AssignmentID,Di2015NewLine  StopID = pr.Key.StopID,Di2015NewLine  PickQty = pr.Sum(p=> p.PickedQty),Di2015NewLine  Count = pr.Sum(c => c.ReqQty)Di2015NewLine}Di2015NewLine
446730Di2015UniqueSeparatorctx.Log = Console.Out; // or some other writerDi2015NewLine
446774Di2015UniqueSeparatorreturn RedirectToAction("ReadPage", "MyController", new {page = 1});Di2015NewLine
446774Di2015UniqueSeparator    public ActionResult Search(string query, int startIndex, int pageSize)Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine
446774Di2015UniqueSeparator    routes.MapRoute("Search", "Search/{query}/{startIndex}",Di2015NewLine             new {Di2015NewLine                controller = "Home", action = "Search",Di2015NewLine                startIndex = 0, pageSize = 20Di2015NewLine             });Di2015NewLine
446839Di2015UniqueSeparatorFormsAuth = formsAuth ?? new FormsAuthenticationWrapper();Di2015NewLine
446839Di2015UniqueSeparatorFormsAuth = formsAuth != null ? formsAuth : new FormsAuthenticationWrapper();Di2015NewLine
446839Di2015UniqueSeparatorif(formsAuth != null)Di2015NewLine    FormsAuth = formsAuth;Di2015NewLineelseDi2015NewLine    FormsAuth = new FormsAuthenticationWrapper();Di2015NewLine
446839Di2015UniqueSeparatorAnswer#
446839Di2015UniqueSeparatorAnswer
446839Di2015UniqueSeparatorstring Answer = Answer1 ?? Answer2 ?? Answer3 ?? Answer4;Di2015NewLine
447094Di2015UniqueSeparatorpublic abstract int UniqueId {get;}Di2015NewLine
447094Di2015UniqueSeparatorobject GetUniqueId() // or intDi2015NewLine{Di2015NewLine    Type type = GetType();Di2015NewLine    UniqueIdAttribute attrib = null;Di2015NewLine    foreach(UniqueIdAttribute tmp in Di2015NewLine        type.GetCustomAttributes(typeof(UniqueIdAttribute), true))Di2015NewLine    {Di2015NewLine        attrib = tmp;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine    if (attrib == null) throw new InvalidOperationException();Di2015NewLine    return type.GetProperty(attrib.PropertyName).GetValue(this, null);Di2015NewLine    // perhaps cast here...         Di2015NewLine}Di2015NewLine
447225Di2015UniqueSeparatorpublic IEnumerable<string> SplitAndKeepPrefix(this string source, string delimeter) {Di2015NewLine  return SplitAndKeepPrefix(source, delimeter, StringSplitOptions.None);Di2015NewLine}Di2015NewLineDi2015NewLinepublic IEnumerable<string> SplitAndKeepPrefix(this string source, string delimeter, StringSplitOptions options ) {Di2015NewLine  var split = source.Split(delimeter, options);Di2015NewLine  return split.Take(1).Concat(split.Skip(1).Select(x => delimeter + x));Di2015NewLine}Di2015NewLineDi2015NewLinestring result = htmlStr.SplitAndKeepPrefix("<a");Di2015NewLine
447316Di2015UniqueSeparatorvar form = new SettingsForm(this);Di2015NewLineform.SelectedTab = 2;Di2015NewLineform.Show();Di2015NewLine
447316Di2015UniqueSeparatorpublic int SelectedTabDi2015NewLine{Di2015NewLine    get { return _tabControl.SelectedIndex; }Di2015NewLine    set { _tabControl.SelectedIndex = value; }Di2015NewLine}Di2015NewLine
447429Di2015UniqueSeparatorNullable<bool>
447429Di2015UniqueSeparatorbool
447429Di2015UniqueSeparatorbool
447429Di2015UniqueSeparatorNullable<bool>
447429Di2015UniqueSeparatorbool operator==(Nullable<bool>, Nullable<bool>
447429Di2015UniqueSeparatorbool
447429Di2015UniqueSeparatorNullable<bool>
447429Di2015UniqueSeparatorbool
447429Di2015UniqueSeparatorNullable<bool>
447429Di2015UniqueSeparatorNullable<T>
447429Di2015UniqueSeparatorT
447429Di2015UniqueSeparatornull
447429Di2015UniqueSeparatordefault(T)
447429Di2015UniqueSeparatorint
447429Di2015UniqueSeparatorNullable<T>
447429Di2015UniqueSeparatorT
447440Di2015UniqueSeparator    Configuration configFile = ConfigurationManager.OpenExeConfiguration(Assembly.GetExecutingAssembly().Location);Di2015NewLine    XmlDocument document = new XmlDocument();Di2015NewLine    document.Load(configFile.FilePath);Di2015NewLine    foreach (XmlNode node in document.SelectNodes("//add"))Di2015NewLine    {Di2015NewLine        string key = node.SelectSingleNode("@key").Value;Di2015NewLine        string value = node.SelectSingleNode("@value").Value;Di2015NewLine        Console.WriteLine("{0} = {1}", key, value);Di2015NewLine    }Di2015NewLine
447444Di2015UniqueSeparator//You need SharpPcap for this to workDi2015NewLineDi2015NewLineprivate void WakeFunction(string MAC_ADDRESS)Di2015NewLine{Di2015NewLine    /* Retrieve the device list */Di2015NewLine    Tamir.IPLib.PcapDeviceList devices = Tamir.IPLib.SharpPcap.GetAllDevices();Di2015NewLineDi2015NewLine    /*If no device exists, print error */Di2015NewLine    if (devices.Count < 1)Di2015NewLine    {Di2015NewLine        Console.WriteLine("No device found on this machine");Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach (NetworkDevice device in devices)Di2015NewLine    {Di2015NewLine        //Open the deviceDi2015NewLine        device.PcapOpen();Di2015NewLineDi2015NewLine        //A magic packet is a broadcast frame containing anywhere within its payload: 6 bytes of onesDi2015NewLine        //(resulting in hexadecimal FF FF FF FF FF FF), followed by sixteen repetitions Di2015NewLineDi2015NewLine        byte[] bytes = new byte[120];Di2015NewLine        int counter = 0;Di2015NewLine        for (int y = 0; y < 6; y++)Di2015NewLine            bytes[counter++] = 0xFF;Di2015NewLine        //now repeat MAC 16 timesDi2015NewLine        for (int y = 0; y < 16; y++)Di2015NewLine        {Di2015NewLine            int i = 0;Di2015NewLine            for (int z = 0; z < 6; z++)Di2015NewLine            {Di2015NewLine                bytes[counter++] =Di2015NewLine                    byte.Parse(MAC_ADDRESS.Substring(i, 2),Di2015NewLine                    NumberStyles.HexNumber);Di2015NewLine                i += 2;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        byte[] etherheader = new byte[54];//If you say so...Di2015NewLine        var myPacket = new Tamir.IPLib.Packets.UDPPacket(EthernetFields_Fields.ETH_HEADER_LEN, etherheader);Di2015NewLineDi2015NewLine        //EthernetDi2015NewLine        myPacket.DestinationHwAddress = "FFFFFFFFFFFFF";//it's buggy if you don't have lots of "F"s... (I don't really understand it...)Di2015NewLine        try { myPacket.SourceHwAddress = device.MacAddress; }Di2015NewLine        catch { myPacket.SourceHwAddress = "0ABCDEF"; }//whateverDi2015NewLine        myPacket.EthernetProtocol = EthernetProtocols_Fields.IP;Di2015NewLineDi2015NewLine        //IPDi2015NewLine        myPacket.DestinationAddress = "255.255.255.255";Di2015NewLine        try { myPacket.SourceAddress = device.IpAddress; }Di2015NewLine        catch { myPacket.SourceAddress = "0.0.0.0"; }Di2015NewLine        myPacket.IPProtocol = IPProtocols_Fields.UDP;Di2015NewLine        myPacket.TimeToLive = 50;Di2015NewLine        myPacket.Id = 100;Di2015NewLine        myPacket.Version = 4;Di2015NewLine        myPacket.IPTotalLength = bytes.Length - EthernetFields_Fields.ETH_HEADER_LEN;   \\//Set the correct IP lengthDi2015NewLine        myPacket.IPHeaderLength = IPFields_Fields.IP_HEADER_LEN;Di2015NewLineDi2015NewLine        //UDPDi2015NewLine        myPacket.SourcePort = 9;    \\\Di2015NewLine        myPacket.DestinationPort = 9;   \\Di2015NewLine        myPacket.UDPLength = UDPFields_Fields.UDP_HEADER_LEN;Di2015NewLineDi2015NewLineDi2015NewLine        myPacket.UDPData = bytes;Di2015NewLine        myPacket.ComputeIPChecksum();Di2015NewLine        myPacket.ComputeUDPChecksum();Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            //Send the packet out the network deviceDi2015NewLine            device.PcapSendPacket(myPacket);Di2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            Console.WriteLine(e.Message);Di2015NewLine        }Di2015NewLineDi2015NewLine        device.PcapClose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
447521Di2015UniqueSeparatorusing (Bitmap tempImage = new Bitmap(pageToScan.FullPath))    Di2015NewLine{           Di2015NewLine    if (tempImage.PixelFormat != System.Drawing.Imaging.PixelFormat.Format24bppRgb)Di2015NewLine    {Di2015NewLine        Rectangle r = new Rectangle(0, 0, tempImage.Width, tempImage.Height);Di2015NewLine        RecognizeBitmap(pageToScan, tempImage.Clone(r, PixelFormat.Format24bppRgb);          Di2015NewLine    }Di2015NewLine    else                  Di2015NewLine    {Di2015NewLine        RecognizeBitmap(pageToScan, tempImage);    Di2015NewLine    }Di2015NewLine}Di2015NewLine
447702Di2015UniqueSeparatorIList<Person> people = sessionDi2015NewLine    .CreateQuery("from Person p where p.Name like :name")Di2015NewLine    .SetParameter("name", "%カタカ%")Di2015NewLine    .List<Person>();Di2015NewLine
447828Di2015UniqueSeparatorprivate void BuildTree()Di2015NewLine{Di2015NewLine   List<Item> items = from item in dataContext.ItemsDi2015NewLine                      select item;Di2015NewLineDi2015NewLine   List<Item> rootItems = items.FindAll(p => p.ParentID == null );Di2015NewLineDi2015NewLine   foreach ( Item item in rootItems )Di2015NewLine   {Di2015NewLine      TreeViewNode tvi = new TreeViewNode(item.text);Di2015NewLine      BuildChildNodes(tvi, items, item.ID);Di2015NewLine      YourTreeNodeName.Nodes.Add(tvi);Di2015NewLine   }   Di2015NewLine}Di2015NewLineDi2015NewLineprivate void BuildChildNodes(TreeViewNode parentNode, List<Item> items, long parentID)Di2015NewLine{Di2015NewLine   List<Item> children = items.FindAll ( p => p.ParentID = parentID );Di2015NewLine   foreach( Item item in children)Di2015NewLine   {Di2015NewLine      TreeViewNode tvi = new TreeViewNode(item.text);Di2015NewLine      parentNode.Nodes.Add(tvi);Di2015NewLine      BuildChildNodes(tvi, items, item.ID);         Di2015NewLine   }Di2015NewLine}Di2015NewLine
447960Di2015UniqueSeparator    Delegate[] clientList = myDlgHandler.GetInvocationList();Di2015NewLine    foreach (Delegate d in clientList)Di2015NewLine           myDlgHandler -= (d as MyDelegate);Di2015NewLine
448027Di2015UniqueSeparatorFind
448027Di2015UniqueSeparatorFind(...).value
448225Di2015UniqueSeparatorbool IsAllUpper(string input)Di2015NewLine{Di2015NewLine    for (int i = 0; i < input.Length; i++)Di2015NewLine    {Di2015NewLine        if (!Char.IsUpper(input[i]))Di2015NewLine             return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    return true;Di2015NewLine}Di2015NewLine
448225Di2015UniqueSeparator   bool IsAllUpper(string input)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < input.Length; i++)Di2015NewLine        {Di2015NewLine            if (Char.IsLetter(input[i]) && !Char.IsUpper(input[i]))Di2015NewLine                return false;Di2015NewLine        }Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine
448272Di2015UniqueSeparatorpublic class Child : ParentDi2015NewLine{Di2015NewLine    private int foo = 10;Di2015NewLineDi2015NewLine    protected override void ShowFoo()Di2015NewLine    {Di2015NewLine        Console.WriteLine(foo);Di2015NewLine    }Di2015NewLine}Di2015NewLine
448272Di2015UniqueSeparatorParent
448272Di2015UniqueSeparatorShowFoo
448397Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine    <xsl:template match="@* | node()">Di2015NewLine    \<xsl:copy>Di2015NewLine    \\<xsl:apply-templates select="@* | node()"/>Di2015NewLine    \</xsl:copy>Di2015NewLine    </xsl:template>Di2015NewLine    <xsl:template match="//password">Di2015NewLine    \<xsl:copy>Di2015NewLine    \\<xsl:text>XXXXX</xsl:text>Di2015NewLine    \</xsl:copy>Di2015NewLine    </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
448397Di2015UniqueSeparatorns
448397Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<secinfo xmlns:ns="urn:foo">Di2015NewLine    <ns:username>jsmith</ns:username>Di2015NewLine    <ns:password>XXXXX</ns:password>Di2015NewLine</secinfo>Di2015NewLine
448560Di2015UniqueSeparator        // if you want timeout support use Di2015NewLine        // try{var success=Monitor.TryEnter(m_syncObj, 2000);}Di2015NewLine        // finally{Monitor.Exit(m_syncObj)}Di2015NewLine        lock(m_syncObj)Di2015NewLine        {Di2015NewLine            l.LogInformation("Got lock to read/write file-based server state.", (Int32)VipEvent.GotStateLock);Di2015NewLine            using (var fileStream = File.Open(ServerState.PATH, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None))Di2015NewLine            {Di2015NewLine                // the line below is risky, what will happen if the call to invokeDi2015NewLine                // never returns? Di2015NewLine                result = func.Invoke(fileStream);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        l.LogInformation("Released state file lock.", (Int32)VipEvent.ReleasedStateLock);Di2015NewLine        return true;Di2015NewLineDi2015NewLine        // note exceptions may leak out of this method. either handle them here.Di2015NewLine        // or in the calling method. Di2015NewLine        // For example the file access may fail of func.Invoke may failDi2015NewLine
448635Di2015UniqueSeparatorEnumerable.Count()
448635Di2015UniqueSeparatorIEnumerable<T>
448635Di2015UniqueSeparatorQueryable.Count()
448635Di2015UniqueSeparatorIQueryable<T>
448635Di2015UniqueSeparatorresults
448635Di2015UniqueSeparatorIEnumerable<Irms_tx_modify_profile_ban>
448800Di2015UniqueSeparator^(?:(?!ABC).)*XYZDi2015NewLine
448928Di2015UniqueSeparatorContains
448928Di2015UniqueSeparatorToShortTimeString()
448928Di2015UniqueSeparatorAsEnumerable
448928Di2015UniqueSeparatorreturn classQuery.Select(p => new { p.ClassID, p.Title, p.StartDate, p.EndDate })Di2015NewLine   .AsEnumerable()Di2015NewLine   .Select(p => new SelectClassData { Di2015NewLine       ClassID = p.ClassID, Di2015NewLine       Title = p.Title, Di2015NewLine       StartDate = p.StartDate.ToShortDateString(), Di2015NewLine       EndDate = p.EndDate.ToShortDateString(), Di2015NewLine       TimeOfClass = p.StartDate.ToShortTimeString() + " - " + p.EndDate.ToShortTimeString() })Di2015NewLine   .ToList();Di2015NewLine
448953Di2015UniqueSeparatorvar nodesIWantReturned = from m in doc.Elements("topNode").Elements("middleNode")Di2015NewLine              from p in m.Elements("penultimateNode")Di2015NewLine              from n in p.Elements("nodesIWantReturned")Di2015NewLine              where m.Attribute("filteringAttribute").Value == "filterValue"Di2015NewLine              where p.Attribute("anotherFilterAttribute").Value == "somethingElse"Di2015NewLine              select n;Di2015NewLine
449091Di2015UniqueSeparatorSystem
449091Di2015UniqueSeparatorgmcs -r System *.cs
449121Di2015UniqueSeparatorreturn
449121Di2015UniqueSeparatorfinally
449121Di2015UniqueSeparatorreturn
449274Di2015UniqueSeparator<link rel="stylesheet" href="<%= ConfigurationManager.AppSettings("css-server") %>style.css" />Di2015NewLine
449274Di2015UniqueSeparator<link rel="stylesheet" href="style.aspx" />Di2015NewLine
449274Di2015UniqueSeparatorprotected void page_load(){Di2015NewLine    Response.ContentType = "text/css";Di2015NewLine    if (ConfigurationManager.AppSettings("css-server") == "local") {Di2015NewLine        Server.Transfer("css/local.css");Di2015NewLine    } else {Di2015NewLine        Server.Transfer("css/production.css");Di2015NewLine    }   Di2015NewLine}Di2015NewLine
449417Di2015UniqueSeparator<ListBox x:Name="eventList" ... />Di2015NewLine
449417Di2015UniqueSeparatoreventList.ItemsSource = ListOfNames;Di2015NewLine
449417Di2015UniqueSeparatorList<String>
449417Di2015UniqueSeparator<String>
449581Di2015UniqueSeparatorcreate table #t (db_name varchar(255), db_size int, remarks text) Di2015NewLineDi2015NewLineinsert #t Di2015NewLineexec sp_databasesDi2015NewLineDi2015NewLineselect * from #tDi2015NewLinewhere db_name not in ('master', 'model', 'tempdb', 'msdb')Di2015NewLine
449598Di2015UniqueSeparatorpublic static string Remove(this string s, IEnumerable<char> chars)Di2015NewLine{Di2015NewLine    return new string(s.Where(c => !chars.Contains(c)).ToArray());Di2015NewLine}Di2015NewLine
449651Di2015UniqueSeparatorsEnvironment = (string)SettingReader.GetValue(AppSettingString.Environment.ToString(), typeof(System.String));Di2015NewLine
449651Di2015UniqueSeparatorsEnvironment = Properties.Settings.Default.Environment;Di2015NewLine
449754Di2015UniqueSeparatordb
449754Di2015UniqueSeparatorGet
449754Di2015UniqueSeparatorGet
449754Di2015UniqueSeparatorJ1Entities
449754Di2015UniqueSeparatordb
449754Di2015UniqueSeparatorGet
449754Di2015UniqueSeparatorGet
449754Di2015UniqueSeparatordb
449897Di2015UniqueSeparatorusing System.Net;Di2015NewLineusing System.Net.Mail;Di2015NewLineusing System.Net.Mime;Di2015NewLineDi2015NewLine...Di2015NewLinetryDi2015NewLine{Di2015NewLineDi2015NewLine   SmtpClient mySmtpClient = new SmtpClient("my.smtp.exampleserver.net");Di2015NewLineDi2015NewLine    // set smtp-client with basicAuthenticationDi2015NewLine    mySmtpClient.UseDefaultCredentials = false;Di2015NewLine   System.Net.NetworkCredential basicAuthenticationInfo = newDi2015NewLine      System.Net.NetworkCredential("username", "password");Di2015NewLine   mySmtpClient.Credentials = basicAuthenticationInfo;Di2015NewLineDi2015NewLine   // add from,to mailaddressesDi2015NewLine   MailAddress from = new MailAddress("test@example.com", "TestFromName");Di2015NewLine   MailAddress to = new MailAddress("test2@example.com", "TestToName");Di2015NewLine   MailMessage myMail = new System.Net.Mail.MailMessage(from, to);Di2015NewLineDi2015NewLine   // add ReplyToDi2015NewLine   MailAddress replyto = new MailAddress("reply@example.com");Di2015NewLine   myMail.ReplyTo = replyto;Di2015NewLineDi2015NewLine   // set subject and encodingDi2015NewLine   myMail.Subject = "Test message";Di2015NewLine   myMail.SubjectEncoding = System.Text.Encoding.UTF8;Di2015NewLineDi2015NewLine   // set body-message and encodingDi2015NewLine   myMail.Body = "<b>Test Mail</b><br>using <b>HTML</b>.";Di2015NewLine   myMail.BodyEncoding = System.Text.Encoding.UTF8;Di2015NewLine   // text or htmlDi2015NewLine   myMail.IsBodyHtml = true;Di2015NewLineDi2015NewLine   mySmtpClient.Send(myMail);Di2015NewLine}Di2015NewLineDi2015NewLinecatch (SmtpException ex)Di2015NewLine{Di2015NewLine  throw new ApplicationExceptionDi2015NewLine    ("SmtpException has occured: " + ex.Message);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine   throw ex;Di2015NewLine}Di2015NewLine
449925Di2015UniqueSeparatorprivate void btnSendRequest_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    textBox1.Text = "";Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        String queryString = "user=myUser&pwd=myPassword&tel=+123456798&msg=My message";Di2015NewLine        byte[] requestByte = Encoding.Default.GetBytes(queryString);Di2015NewLineDi2015NewLine        // build our requestDi2015NewLine        WebRequest webRequest = WebRequest.Create("http://www.sendFreeSMS.com/");Di2015NewLine        webRequest.Method = "POST";Di2015NewLine        webRequest.ContentType = "application/xml";Di2015NewLine        webRequest.ContentLength = requestByte.Length;Di2015NewLineDi2015NewLine        // create our stram to sendDi2015NewLine        Stream webDataStream = webRequest.GetRequestStream();Di2015NewLine        webDataStream.Write(requestByte, 0, requestByte.Length);Di2015NewLineDi2015NewLine        // get the response from our streamDi2015NewLine        WebResponse webResponse = webRequest.GetResponse();Di2015NewLine        webDataStream = webResponse.GetResponseStream();Di2015NewLineDi2015NewLine        // convert the result into a StringDi2015NewLine        StreamReader webResponseSReader = new StreamReader(webDataStream);Di2015NewLine        String responseFromServer = webResponseSReader.ReadToEnd().Replace("\\n", "").Replace("\\t", "");Di2015NewLineDi2015NewLine        // close everythingDi2015NewLine        webResponseSReader.Close();Di2015NewLine        webResponse.Close();Di2015NewLine        webDataStream.Close();Di2015NewLineDi2015NewLine        // You now have the HTML in the responseFromServer variable, use it :)Di2015NewLine        textBox1.Text = responseFromServer;Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        textBox1.Text = ex.Message;Di2015NewLine    }Di2015NewLine}Di2015NewLine
449930Di2015UniqueSeparatorCOUNT(DISTINCT {x}))
449930Di2015UniqueSeparatorIGrouping<,>
449930Di2015UniqueSeparatorgroup by
449930Di2015UniqueSeparator select newDi2015NewLine {Di2015NewLine     Foo= grp.Key,Di2015NewLine     Bar= grp.Select(x => x.SomeField).Distinct().Count()Di2015NewLine };Di2015NewLine
449930Di2015UniqueSeparator    using(var ctx = new DataClasses1DataContext())Di2015NewLine    {Di2015NewLine        ctx.Log = Console.Out; // log TSQL to consoleDi2015NewLine        var qry = from cust in ctx.CustomersDi2015NewLine                  where cust.CustomerID != ""Di2015NewLine                  group cust by cust.CountryDi2015NewLine                  into grpDi2015NewLine                  select newDi2015NewLine                  {Di2015NewLine                      Country = grp.Key,Di2015NewLine                      Count = grp.Select(x => x.City).Distinct().Count()Di2015NewLine                  };Di2015NewLineDi2015NewLine        foreach(var row in qry.OrderBy(x=>x.Country))Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0}: {1}", row.Country, row.Count);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
449930Di2015UniqueSeparatorSELECT [t1].[Country], (Di2015NewLine    SELECT COUNT(*)Di2015NewLine    FROM (Di2015NewLine        SELECT DISTINCT [t2].[City]Di2015NewLine        FROM [dbo].[Customers] AS [t2]Di2015NewLine        WHERE ((([t1].[Country] IS NULL) AND ([t2].[Country] IS NULL)) OR (([t1]Di2015NewLine.[Country] IS NOT NULL) AND ([t2].[Country] IS NOT NULL) AND ([t1].[Country] = [Di2015NewLinet2].[Country]))) AND ([t2].[CustomerID] <> @p0)Di2015NewLine        ) AS [t3]Di2015NewLine    ) AS [Count]Di2015NewLineFROM (Di2015NewLine    SELECT [t0].[Country]Di2015NewLine    FROM [dbo].[Customers] AS [t0]Di2015NewLine    WHERE [t0].[CustomerID] <> @p0Di2015NewLine    GROUP BY [t0].[Country]Di2015NewLine    ) AS [t1]Di2015NewLine-- @p0: Input NVarChar (Size = 0; Prec = 0; Scale = 0) []Di2015NewLine-- Context: SqlProvider(Sql2008) Model: AttributedMetaModel Build: 3.5.30729.1Di2015NewLine
449930Di2015UniqueSeparator        const string sql = @"Di2015NewLineSELECT c.Country, COUNT(DISTINCT c.City) AS [Count]Di2015NewLineFROM Customers cDi2015NewLineWHERE c.CustomerID != ''Di2015NewLineGROUP BY c.CountryDi2015NewLineORDER BY c.Country";Di2015NewLine        var qry2 = ctx.ExecuteQuery<QueryResult>(sql);Di2015NewLine        foreach(var row in qry2)Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0}: {1}", row.Country, row.Count);Di2015NewLine        }Di2015NewLine
449930Di2015UniqueSeparatorclass QueryResultDi2015NewLine{Di2015NewLine    public string Country { get; set; }Di2015NewLine    public int Count { get; set; }Di2015NewLine}Di2015NewLine
450013Di2015UniqueSeparatorSevenZip.Compression.Lzma.SevenZipHelper
450020Di2015UniqueSeparator// add a reference to the System.Management assembly andDi2015NewLine// import the System.Management namespace at the top in your "using" statement.Di2015NewLine// Then in a method, or on a button click:Di2015NewLineDi2015NewLineManagementObjectSearcher theSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DiskDrive WHERE InterfaceType='USB'");Di2015NewLineforeach (ManagementObject currentObject in theSearcher.Get())Di2015NewLine{Di2015NewLine   ManagementObject theSerialNumberObjectQuery = new ManagementObject("Win32_PhysicalMedia.Tag='" + currentObject["DeviceID"] + "'");Di2015NewLine   MessageBox.Show(theSerialNumberObjectQuery["SerialNumber"].ToString());Di2015NewLine}Di2015NewLine
450250Di2015UniqueSeparatorvar item = list[oldIndex];Di2015NewLineDi2015NewLinelist.RemoveAt(oldIndex);Di2015NewLineDi2015NewLineif (newIndex > oldIndex) newIndex--; Di2015NewLine// the actual index could have shifted due to the removalDi2015NewLineDi2015NewLinelist.Insert(newIndex, item);Di2015NewLine
450251Di2015UniqueSeparatorpublic void foo() {...}Di2015NewLine
450251Di2015UniqueSeparatorpublic void Foo() {...}Di2015NewLine
450313Di2015UniqueSeparatorstatic class WebControlsExtensionsDi2015NewLine    {Di2015NewLine        public static void AddCssClass(this WebControl control, string cssClass)Di2015NewLine        {Di2015NewLine            List<string> classes = control.CssClass.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();Di2015NewLineDi2015NewLine            classes.Add(cssClass);Di2015NewLineDi2015NewLine            control.CssClass = classes.ToDelimitedString(" ");Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void RemoveCssClass(this WebControl control, string cssClass)Di2015NewLine        {Di2015NewLine            List<string> classes = control.CssClass.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();Di2015NewLineDi2015NewLine            classes.Remove(cssClass);Di2015NewLineDi2015NewLine            control.CssClass = classes.ToDelimitedString(" ");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static class StringExtensionsDi2015NewLine    {Di2015NewLine        public static string ToDelimitedString(this IEnumerable<string> list, string delimiter)Di2015NewLine        {Di2015NewLine            StringBuilder sb = new StringBuilder();Di2015NewLine            foreach (string item in list)Di2015NewLine            {Di2015NewLine                if (sb.Length > 0)Di2015NewLine                    sb.Append(delimiter);Di2015NewLineDi2015NewLine                sb.Append(item);Di2015NewLine            }Di2015NewLineDi2015NewLine            return sb.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
450387Di2015UniqueSeparatorpublic class Person {Di2015NewLine    public string Name {get;set;}Di2015NewLine    public DateTime DateOfBirth {get;set;}Di2015NewLine}Di2015NewLine
450387Di2015UniqueSeparatortxtName.DataBindings.Add("Text", person, "Name");Di2015NewLine
450387Di2015UniqueSeparatorIList
450387Di2015UniqueSeparatorIEunmerable
450387Di2015UniqueSeparatorIBindingList
450387Di2015UniqueSeparatorIBindingListView
450387Di2015UniqueSeparatorpublic event EventHandler NameChanged;
450387Di2015UniqueSeparatorINotifyPropertyChanged
450387Di2015UniqueSeparatorBindingList<T>
450387Di2015UniqueSeparatorDataView
450479Di2015UniqueSeparatorIDisposable
450479Di2015UniqueSeparatorclass SmartDbConnectionDi2015NewLine{Di2015NewLine    private DbConnection Connection;Di2015NewLineDi2015NewLine    public SmartDbConnection(string provider, string connectionString)Di2015NewLine    {Di2015NewLine        Connection = DbProviderFactories.GetFactory(provider)Di2015NewLine            .CreateConnection();Di2015NewLine        Connection.ConnectionString = connectionString;Di2015NewLine    }Di2015NewLine    public void Dispose() {Di2015NewLine        if (Connection != null)Di2015NewLine        {Di2015NewLine            Connection.Dispose();Di2015NewLine            Connection = null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
450479Di2015UniqueSeparatorclass SmartDbConnection<T> : IDisposable where T : class,Di2015NewLine    IDbConnection, new()Di2015NewLine{Di2015NewLine    private T Connection;Di2015NewLineDi2015NewLine    public SmartDbConnection(string connectionString)Di2015NewLine    {Di2015NewLine        T t = new T();Di2015NewLine        t.ConnectionString = connectionString;Di2015NewLine        // etcDi2015NewLine    }Di2015NewLine    public void Dispose() {Di2015NewLine        if (Connection != null)Di2015NewLine        {Di2015NewLine            Connection.Dispose();Di2015NewLine            Connection = null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
450532Di2015UniqueSeparatorProcess[] processes = Process.GetProcessesByName("notepad");Di2015NewLineforeach (Process p in processes)Di2015NewLine{Di2015NewLine    IntPtr pFoundWindow = p.MainWindowHandle;Di2015NewLine    // Do something with the handle...Di2015NewLine}Di2015NewLine
450559Di2015UniqueSeparatorWebClient webClient = new WebClient(); Di2015NewLineconst string strUrl = "http://www.yahoo.com/"; Di2015NewLinebyte[] reqHTML; Di2015NewLinereqHTML = webClient.DownloadData(strUrl); Di2015NewLineUTF8Encoding objUTF8 = new UTF8Encoding(); Di2015NewLinestring html = objUTF8.GetString(reqHTML);Di2015NewLine
450856Di2015UniqueSeparatorList<T>
450856Di2015UniqueSeparatorList<T>.BinarySearch
450856Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinestatic class TestDi2015NewLine{Di2015NewLine    static int GetSortedIndex<T>(this List<T> list, T entry)Di2015NewLine    {Di2015NewLine        int index = list.BinarySearch(entry);Di2015NewLine        return index >= 0 ? index : ~index;Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        List<char> container = new List<char> { 'b', 'd', 'g' };Di2015NewLine        Console.WriteLine(container.GetSortedIndex('a'));Di2015NewLine        Console.WriteLine(container.GetSortedIndex('b'));Di2015NewLine        Console.WriteLine(container.GetSortedIndex('c'));Di2015NewLine        Console.WriteLine(container.GetSortedIndex('d'));Di2015NewLine        Console.WriteLine(container.GetSortedIndex('e'));Di2015NewLine        Console.WriteLine(container.GetSortedIndex('f'));Di2015NewLine        Console.WriteLine(container.GetSortedIndex('g'));Di2015NewLine        Console.WriteLine(container.GetSortedIndex('h'));Di2015NewLine    }Di2015NewLine}Di2015NewLine
451049Di2015UniqueSeparatornew
451049Di2015UniqueSeparatorprotected
451049Di2015UniqueSeparatornew
451049Di2015UniqueSeparatorFoo()
451049Di2015UniqueSeparatorFoo()
451049Di2015UniqueSeparatorSomeDerived obj = new SomeDerived();Di2015NewLineobj.Foo(); // runs the new codeDi2015NewLineSomeBase objBase = obj; // still the same objectDi2015NewLineobjBase.Foo(); // runs the old codeDi2015NewLine
451049Di2015UniqueSeparatorSomeDerived
451049Di2015UniqueSeparatorFoo()
451049Di2015UniqueSeparatorprotected internal
451049Di2015UniqueSeparator[InternalsVisibleTo]
451049Di2015UniqueSeparator[InternalsVisibleTo]
451141Di2015UniqueSeparatorList<T>
451141Di2015UniqueSeparatorReverse()
451740Di2015UniqueSeparatornew SortedDictionary<int, string>(existing);Di2015NewLine
451740Di2015UniqueSeparatorToSortedDictionary
451849Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine        delegate void Action();Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine                List<Action> actions = new List<Action>();Di2015NewLineDi2015NewLine                DisplayClass1 displayClass1 = new DisplayClass1();Di2015NewLine                for (displayClass1.i = 0; displayClass1.i < 10; ++displayClass1.i )Di2015NewLine                        actions.Add(new Action(displayClass1.Lambda));Di2015NewLineDi2015NewLine                foreach (Action a in actions)Di2015NewLine                        a();Di2015NewLine        }Di2015NewLineDi2015NewLine        class DisplayClass1Di2015NewLine        {Di2015NewLine                int i;Di2015NewLine                void Lambda()Di2015NewLine                {Di2015NewLine                        Console.WriteLine(i);Di2015NewLine                }Di2015NewLine        }Di2015NewLine}Di2015NewLine
451849Di2015UniqueSeparatorfor (int i = 0; i < 10; ++i)Di2015NewLine{Di2015NewLine    DisplayClass1 displayClass1 = new DisplayClass1();Di2015NewLine    displayClass1.i = i;Di2015NewLine    actions.Add(new Action(displayClass1.Lambda));Di2015NewLine}Di2015NewLine
451862Di2015UniqueSeparatorString str = "Last, First <name@domain.com>, name@domain.com, First Last <name@domain.com>, \\"First Last\\" <name@domain.com>";Di2015NewLineDi2015NewLineList<string> addresses = new List<string>();Di2015NewLineint atIdx = 0;Di2015NewLineint commaIdx = 0;Di2015NewLineint lastComma = 0;Di2015NewLinefor (int c = 0; c < str.Length; c++)Di2015NewLine{Di2015NewLineif (str[c] == '@')Di2015NewLine    atIdx = c;Di2015NewLineDi2015NewLineif (str[c] == ',')Di2015NewLine    commaIdx = c;Di2015NewLineDi2015NewLineif (commaIdx > atIdx && atIdx > 0)Di2015NewLine{Di2015NewLine    string temp = str.Substring(lastComma, commaIdx - lastComma);Di2015NewLine    addresses.Add(temp);Di2015NewLine    lastComma = commaIdx;Di2015NewLine    atIdx = commaIdx;Di2015NewLine}Di2015NewLineDi2015NewLineif (c == str.Length -1)Di2015NewLine{Di2015NewLine    string temp = str.Substring(lastComma, str.Legth - lastComma);Di2015NewLine    addresses.Add(temp);Di2015NewLine}Di2015NewLine}Di2015NewLineDi2015NewLineif (commaIdx < 2)Di2015NewLine{Di2015NewLine    // if we get here we can assume either there was no comma, or there was only one comma as part of the last, first comboDi2015NewLine    addresses.Add(str);Di2015NewLine}Di2015NewLine
451965Di2015UniqueSeparator        using (System.Drawing.Graphics graphics = System.Drawing.Graphics.FromImage(new Bitmap(1, 1)))Di2015NewLine        {Di2015NewLine            SizeF size = graphics.MeasureString("Hello there", new Font("Segoe UI", 11, FontStyle.Regular, GraphicsUnit.Point));Di2015NewLine        }Di2015NewLine
451965Di2015UniqueSeparator    Using graphics As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(New Bitmap(1, 1))Di2015NewLine        Dim size As SizeF = graphics.MeasureString("Hello there", New Font("Segoe UI", 11, FontStyle.Regular, GraphicsUnit.Point))Di2015NewLine    End UsingDi2015NewLine
452087Di2015UniqueSeparatorSET FMTONLY ON
452087Di2015UniqueSeparatorSELECT
452087Di2015UniqueSeparatorSET FMTONLY ON
452307Di2015UniqueSeparatorHKCR\\CLSID\\{your guid}\\InprocServer32
452307Di2015UniqueSeparatorAssembly
452369Di2015UniqueSeparatorSystem.xxx
452369Di2015UniqueSeparatorstring
452369Di2015UniqueSeparatorSystem.String
452369Di2015UniqueSeparatorint
452369Di2015UniqueSeparatorSystem.Int32
452369Di2015UniqueSeparatorSystem
452488Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    //<![CDATA[Di2015NewLine    var prm = Sys.WebForms.PageRequestManager.getInstance();Di2015NewLine    prm.add_endRequest(endRequest);Di2015NewLine    function endRequest(sender, e) {Di2015NewLine        // Do stuffDi2015NewLine    }Di2015NewLine    //]]>Di2015NewLine</script>Di2015NewLine
452512Di2015UniqueSeparatorroutes.MapRoute("{action}/{id}", new {controller="Home", action="Index", id=""});Di2015NewLine
452574Di2015UniqueSeparatorNullable<T>
452574Di2015UniqueSeparatorNullable<T>
452574Di2015UniqueSeparatorNotSet = 0
452802Di2015UniqueSeparatorif (object.Equals(resultValue, default(K)))Di2015NewLine{Di2015NewLine    //...Di2015NewLine}Di2015NewLine
452945Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace MiscUtil.IODi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Takes an encoding (defaulting to UTF-8) and a function which produces a seekable streamDi2015NewLine    /// (or a filename for convenience) and yields lines from the end of the stream backwards.Di2015NewLine    /// Only single byte encodings, and UTF-8 and Unicode, are supported. The streamDi2015NewLine    /// returned by the function must be seekable.Di2015NewLine    /// </summary>Di2015NewLine    public sealed class ReverseLineReader : IEnumerable<string>Di2015NewLine    {Di2015NewLine        /// <summary>Di2015NewLine        /// Buffer size to use by default. Classes with internal access can specifyDi2015NewLine        /// a different buffer size - this is useful for testing.Di2015NewLine        /// </summary>Di2015NewLine        private const int DefaultBufferSize = 4096;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Means of creating a Stream to read from.Di2015NewLine        /// </summary>Di2015NewLine        private readonly Func<Stream> streamSource;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Encoding to use when converting bytes to textDi2015NewLine        /// </summary>Di2015NewLine        private readonly Encoding encoding;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Size of buffer (in bytes) to read each time we read from theDi2015NewLine        /// stream. This must be at least as big as the maximum number ofDi2015NewLine        /// bytes for a single character.Di2015NewLine        /// </summary>Di2015NewLine        private readonly int bufferSize;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Function which, when given a position within a file and a byte, states whetherDi2015NewLine        /// or not the byte represents the start of a character.Di2015NewLine        /// </summary>Di2015NewLine        private Func<long,byte,bool> characterStartDetector;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates a LineReader from a stream source. The delegate is onlyDi2015NewLine        /// called when the enumerator is fetched. UTF-8 is used to decodeDi2015NewLine        /// the stream into text.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="streamSource">Data source</param>Di2015NewLine        public ReverseLineReader(Func<Stream> streamSource)Di2015NewLine            : this(streamSource, Encoding.UTF8)Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates a LineReader from a filename. The file is only openedDi2015NewLine        /// (or even checked for existence) when the enumerator is fetched.Di2015NewLine        /// UTF8 is used to decode the file into text.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="filename">File to read from</param>Di2015NewLine        public ReverseLineReader(string filename)Di2015NewLine            : this(filename, Encoding.UTF8)Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates a LineReader from a filename. The file is only openedDi2015NewLine        /// (or even checked for existence) when the enumerator is fetched.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="filename">File to read from</param>Di2015NewLine        /// <param name="encoding">Encoding to use to decode the file into text</param>Di2015NewLine        public ReverseLineReader(string filename, Encoding encoding)Di2015NewLine            : this(() => File.OpenRead(filename), encoding)Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine            /// <summary>Di2015NewLine        /// Creates a LineReader from a stream source. The delegate is onlyDi2015NewLine        /// called when the enumerator is fetched.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="streamSource">Data source</param>Di2015NewLine        /// <param name="encoding">Encoding to use to decode the stream into text</param>Di2015NewLine        public ReverseLineReader(Func<Stream> streamSource, Encoding encoding)Di2015NewLine            : this(streamSource, encoding, DefaultBufferSize)Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        internal ReverseLineReader(Func<Stream> streamSource, Encoding encoding, int bufferSize)Di2015NewLine        {Di2015NewLine            this.streamSource = streamSource;Di2015NewLine            this.encoding = encoding;Di2015NewLine            this.bufferSize = bufferSize;Di2015NewLine            if (encoding.IsSingleByte)Di2015NewLine            {Di2015NewLine                // For a single byte encoding, every byte is the start (and end) of a characterDi2015NewLine                characterStartDetector = (pos, data) => true;Di2015NewLine            }Di2015NewLine            else if (encoding is UnicodeEncoding)Di2015NewLine            {Di2015NewLine                // For UTF-16, even-numbered positions are the start of a characterDi2015NewLine                characterStartDetector = (pos, data) => (pos & 1) == 0;Di2015NewLine            }Di2015NewLine            else if (encoding is UTF8Encoding)Di2015NewLine            {Di2015NewLine                // For UTF-8, bytes with the top bit clear or the second bit set are the start of a characterDi2015NewLine                // See http://www.cl.cam.ac.uk/~mgk25/unicode.htmlDi2015NewLine                characterStartDetector = (pos, data) => (data & 0x80) == 0 || (data & 0x40) != 0;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                throw new ArgumentException("Only single byte, UTF-8 and Unicode encodings are permitted");Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Returns the enumerator reading strings backwards. If this method discovers thatDi2015NewLine        /// the returned stream is either unreadable or unseekable, a NotSupportedException is thrown.Di2015NewLine        /// </summary>Di2015NewLine        public IEnumerator<string> GetEnumerator()Di2015NewLine        {Di2015NewLine            Stream stream = streamSource();Di2015NewLine            if (!stream.CanSeek)Di2015NewLine            {Di2015NewLine                stream.Dispose();Di2015NewLine                throw new NotSupportedException("Unable to seek within stream");Di2015NewLine            }Di2015NewLine            if (!stream.CanRead)Di2015NewLine            {Di2015NewLine                stream.Dispose();Di2015NewLine                throw new NotSupportedException("Unable to read within stream");Di2015NewLine            }Di2015NewLine            return GetEnumeratorImpl(stream);Di2015NewLine        }Di2015NewLineDi2015NewLine        private IEnumerator<string> GetEnumeratorImpl(Stream stream)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                long position = stream.Length;Di2015NewLineDi2015NewLine                if (encoding is UnicodeEncoding && (position & 1) != 0)Di2015NewLine                {Di2015NewLine                    throw new InvalidDataException("UTF-16 encoding provided, but stream has odd length.");Di2015NewLine                }Di2015NewLineDi2015NewLine                // Allow up to two bytes for data from the start of the previousDi2015NewLine                // read which didn't quite make it as full charactersDi2015NewLine                byte[] buffer = new byte[bufferSize + 2];Di2015NewLine                char[] charBuffer = new char[encoding.GetMaxCharCount(buffer.Length)];Di2015NewLine                int leftOverData = 0;Di2015NewLine                String previousEnd = null;Di2015NewLine                // TextReader doesn't return an empty string if there's line break at the endDi2015NewLine                // of the data. Therefore we don't return an empty string if it's our *first*Di2015NewLine                // return.Di2015NewLine                bool firstYield = true;Di2015NewLineDi2015NewLine                // A line-feed at the start of the previous buffer means we need to swallowDi2015NewLine                // the carriage-return at the end of this buffer - hence this needs declaringDi2015NewLine                // way up here!Di2015NewLine                bool swallowCarriageReturn = false;Di2015NewLineDi2015NewLine                while (position > 0)Di2015NewLine                {Di2015NewLine                    int bytesToRead = Math.Min(position > int.MaxValue ? bufferSize : (int)position, bufferSize);Di2015NewLineDi2015NewLine                    position -= bytesToRead;Di2015NewLine                    stream.Position = position;Di2015NewLine                    StreamUtil.ReadExactly(stream, buffer, bytesToRead);Di2015NewLine                    // If we haven't read a full buffer, but we had bytes leftDi2015NewLine                    // over from before, copy them to the end of the bufferDi2015NewLine                    if (leftOverData > 0 && bytesToRead != bufferSize)Di2015NewLine                    {Di2015NewLine                        // Buffer.BlockCopy doesn't document its behaviour with respectDi2015NewLine                        // to overlapping data: we *might* just have read 7 bytes instead ofDi2015NewLine                        // 8, and have two bytes to copy...Di2015NewLine                        Array.Copy(buffer, bufferSize, buffer, bytesToRead, leftOverData);Di2015NewLine                    }Di2015NewLine                    // We've now *effectively* read this much data.Di2015NewLine                    bytesToRead += leftOverData;Di2015NewLineDi2015NewLine                    int firstCharPosition = 0;Di2015NewLine                    while (!characterStartDetector(position + firstCharPosition, buffer[firstCharPosition]))Di2015NewLine                    {Di2015NewLine                        firstCharPosition++;Di2015NewLine                        // Bad UTF-8 sequences could trigger this. For UTF-8 we should alwaysDi2015NewLine                        // see a valid character start in every 3 bytes, and if this is the start of the fileDi2015NewLine                        // so we've done a short read, we should have the character startDi2015NewLine                        // somewhere in the usable buffer.Di2015NewLine                        if (firstCharPosition == 3 || firstCharPosition == bytesToRead)Di2015NewLine                        {Di2015NewLine                            throw new InvalidDataException("Invalid UTF-8 data");Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                    leftOverData = firstCharPosition;Di2015NewLineDi2015NewLine                    int charsRead = encoding.GetChars(buffer, firstCharPosition, bytesToRead - firstCharPosition, charBuffer, 0);Di2015NewLine                    int endExclusive = charsRead;Di2015NewLineDi2015NewLine                    for (int i = charsRead - 1; i >= 0; i--)Di2015NewLine                    {Di2015NewLine                        char lookingAt = charBuffer[i];Di2015NewLine                        if (swallowCarriageReturn)Di2015NewLine                        {Di2015NewLine                            swallowCarriageReturn = false;Di2015NewLine                            if (lookingAt == '\\r')Di2015NewLine                            {Di2015NewLine                                endExclusive--;Di2015NewLine                                continue;Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                        // Anything non-line-breaking, just keep looking backwardsDi2015NewLine                        if (lookingAt != '\\n' && lookingAt != '\\r')Di2015NewLine                        {Di2015NewLine                            continue;Di2015NewLine                        }Di2015NewLine                        // End of CRLF? Swallow the preceding CRDi2015NewLine                        if (lookingAt == '\\n')Di2015NewLine                        {Di2015NewLine                            swallowCarriageReturn = true;Di2015NewLine                        }Di2015NewLine                        int start = i + 1;Di2015NewLine                        string bufferContents = new string(charBuffer, start, endExclusive - start);Di2015NewLine                        endExclusive = i;Di2015NewLine                        string stringToYield = previousEnd == null ? bufferContents : bufferContents + previousEnd;Di2015NewLine                        if (!firstYield || stringToYield.Length != 0)Di2015NewLine                        {Di2015NewLine                            yield return stringToYield;Di2015NewLine                        }Di2015NewLine                        firstYield = false;Di2015NewLine                        previousEnd = null;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    previousEnd = endExclusive == 0 ? null : (new string(charBuffer, 0, endExclusive) + previousEnd);Di2015NewLineDi2015NewLine                    // If we didn't decode the start of the array, put it at the end for next timeDi2015NewLine                    if (leftOverData != 0)Di2015NewLine                    {Di2015NewLine                        Buffer.BlockCopy(buffer, 0, buffer, bufferSize, leftOverData);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                if (leftOverData != 0)Di2015NewLine                {Di2015NewLine                    // At the start of the final buffer, we had the end of another character.Di2015NewLine                    throw new InvalidDataException("Invalid UTF-8 data at start of stream");Di2015NewLine                }Di2015NewLine                if (firstYield && string.IsNullOrEmpty(previousEnd))Di2015NewLine                {Di2015NewLine                    yield break;Di2015NewLine                }Di2015NewLine                yield return previousEnd ?? "";Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                stream.Dispose();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        IEnumerator IEnumerable.GetEnumerator()Di2015NewLine        {Di2015NewLine            return GetEnumerator();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine// StreamUtil.cs:Di2015NewLinepublic static class StreamUtilDi2015NewLine{Di2015NewLine    public static void ReadExactly(Stream input, byte[] buffer, int bytesToRead)Di2015NewLine    {Di2015NewLine        int index = 0;Di2015NewLine        while (index < bytesToRead)Di2015NewLine        {Di2015NewLine            int read = input.Read(buffer, index, bytesToRead - index);Di2015NewLine            if (read == 0)Di2015NewLine            {Di2015NewLine                throw new EndOfStreamExceptionDi2015NewLine                    (String.Format("End of stream reached with {0} byte{1} left to read.",Di2015NewLine                                   bytesToRead - index,Di2015NewLine                                   bytesToRead - index == 1 ? "s" : ""));Di2015NewLine            }Di2015NewLine            index += read;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
453157Di2015UniqueSeparatorListView listview = <reference to ListView>;Di2015NewLineforeach (ListViewItem item in listView.SelectedItems)Di2015NewLine{Di2015NewLine  item.Remove();Di2015NewLine}Di2015NewLine
453162Di2015UniqueSeparatorvoid ResetCache<T>() where T : IDataObjectDi2015NewLine
453162Di2015UniqueSeparatorvoid ResetCache<T>() where T : IBrokeredDataObjectDi2015NewLine
453166Di2015UniqueSeparatorGC.GetTotalMemory(false)
453230Di2015UniqueSeparatorSettings.settings
453230Di2015UniqueSeparatorSettings.Designer.settings
453230Di2015UniqueSeparatorSettings
453230Di2015UniqueSeparatorProperties.Settings.Default["SomeProperty"] = "Some Value";Di2015NewLineProperties.Settings.Default.Save(); // Saves settings in application configuration fileDi2015NewLine
453248Di2015UniqueSeparatorclass FooBar : IFoo, IBarDi2015NewLine{Di2015NewLine    public int Offset{get;set;}Di2015NewLine}Di2015NewLine
453248Di2015UniqueSeparatorIBar a = new FooBar();Di2015NewLinea.Offset = 2;Di2015NewLineint b = a.Offset;Di2015NewLine
453511Di2015UniqueSeparatorVGA -> YPrPb
453511Di2015UniqueSeparatorVGA
453854Di2015UniqueSeparatorIDictionary<string, ServiceHost> hosts;Di2015NewLineNetTcpBinding binding;Di2015NewLineCustomBinding mexBinding;Di2015NewLineDi2015NewLineprivate void AddService(Type serviceImp, Type serviceDef, string serviceName)Di2015NewLine    {Di2015NewLine        ServiceHost host = new ServiceHost(serviceImp);Di2015NewLineDi2015NewLine        string address = String.Format(baseAddress, wcfPort, serviceName); Di2015NewLineDi2015NewLine        string endAdd = address;Di2015NewLine        string mexAdd = address + "/mex";Di2015NewLineDi2015NewLine        ServiceMetadataBehavior behavior = new ServiceMetadataBehavior();Di2015NewLine        host.Description.Behaviors.Add(behavior);Di2015NewLine        host.AddServiceEndpoint(serviceDef, binding, endAdd);Di2015NewLine        host.AddServiceEndpoint(typeof(IMetadataExchange), mexBinding, mexAdd);Di2015NewLineDi2015NewLine        host.Open();Di2015NewLineDi2015NewLine        hosts.Add(serviceDef.Name, host);Di2015NewLine    }Di2015NewLine
453854Di2015UniqueSeparatorbaseAddress
453854Di2015UniqueSeparatorwcfPort
453854Di2015UniqueSeparatorserviceImp
453854Di2015UniqueSeparatorserviceDef
453924Di2015UniqueSeparatorvoid EventHandler(object sender, EventArgs e)
453924Di2015UniqueSeparatorobject sender
453924Di2015UniqueSeparatorButton
453924Di2015UniqueSeparatorButton
453924Di2015UniqueSeparatorvoid digitButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Button ButtonThatWasPushed = (Button)sender;Di2015NewLine    string ButtonText = ButtonThatWasPushed.Text; //the button's TextDi2015NewLine    //do somethingDi2015NewLineDi2015NewLine    //If you store the button's numeric value in it's Tag propertyDi2015NewLine    //things become even easier.Di2015NewLine    int ButtonValue = (int)ButtonThatWasPushed.Tag;Di2015NewLine}Di2015NewLine
454198Di2015UniqueSeparator Assembly commandAssembly = Assembly.Load("some/path")Di2015NewLine var commands = new List<ICommand>();Di2015NewLineDi2015NewLine foreach (Type type in commandAssembly.GetTypes())Di2015NewLine {Di2015NewLine    if (type.GetInterface(typeof(ICommand).FullName) != null)Di2015NewLine    {Di2015NewLine       commands.Add((ICommand)Activator.CreateInstance(type));Di2015NewLine    }Di2015NewLine }Di2015NewLine
454299Di2015UniqueSeparatorpublic class MyCleverEnumDi2015NewLine{Di2015NewLine    public static readonly MyCleverEnum First = new FirstCleverEnum();Di2015NewLine    public static readonly MyCleverEnum Second = new SecondCleverEnum();Di2015NewLineDi2015NewLine    // Can only be called by this type *and nested types*Di2015NewLine    private MyCleverEnum()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public abstract void SomeMethod();Di2015NewLine    public abstract void AnotherMethod();Di2015NewLineDi2015NewLine    private class FirstCleverEnum : MyCleverEnumDi2015NewLine    {Di2015NewLine        public override void SomeMethod()Di2015NewLine        {Di2015NewLine             // First-specific behaviour hereDi2015NewLine        }Di2015NewLineDi2015NewLine        public override void AnotherMethod()Di2015NewLine        {Di2015NewLine             // First-specific behaviour hereDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private class SecondCleverEnum : MyCleverEnumDi2015NewLine    {Di2015NewLine        public override void SomeMethod()Di2015NewLine        {Di2015NewLine             // Second-specific behaviour hereDi2015NewLine        }Di2015NewLineDi2015NewLine        public override void AnotherMethod()Di2015NewLine        {Di2015NewLine             // Second-specific behaviour hereDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
454312Di2015UniqueSeparatorpublic interface IRangeComparer<TRange, TValue>Di2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Returns 0 if value is in the specified range;Di2015NewLine    /// less than 0 if value is above the range;Di2015NewLine    /// greater than 0 if value is below the range.Di2015NewLine    /// </summary>Di2015NewLine    int Compare(TRange range, TValue value);Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// See contract for Array.BinarySearchDi2015NewLine/// </summary>Di2015NewLinepublic static int BinarySearch<TRange, TValue>(IList<TRange> ranges,Di2015NewLine                                               TValue value,Di2015NewLine                                               IRangeComparer<TRange, TValue> comparer)Di2015NewLine{Di2015NewLine    int min = 0;Di2015NewLine    int max = ranges.Count-1;Di2015NewLineDi2015NewLine    while (min <= max)Di2015NewLine    {Di2015NewLine        int mid = (min + max) / 2;Di2015NewLine        int comparison = comparer.Compare(ranges[mid], value);Di2015NewLine        if (comparison == 0)Di2015NewLine        {Di2015NewLine            return mid;Di2015NewLine        }Di2015NewLine        if (comparison < 0)Di2015NewLine        {Di2015NewLine            min = mid+1;Di2015NewLine        }Di2015NewLine        else if (comparison > 0)Di2015NewLine        {Di2015NewLine            max = mid-1;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return ~min;Di2015NewLine}Di2015NewLine
454357Di2015UniqueSeparatorDECLAREDi2015NewLine    @start_date    DATETIME,Di2015NewLine    @end_date      DATETIME,Di2015NewLine    @chosen_time   DATETIMEDi2015NewLineSELECTDi2015NewLine    @start_date    = '2009 Jan 05 00:00',Di2015NewLine    @end_date      = '2009 Jan 12 00:00',Di2015NewLine    @chosen_time   = '1900 Jan 01 17:30'   -- '1900 Jan 01' is day 0Di2015NewLineDi2015NewLineSELECTDi2015NewLine    <whatever>Di2015NewLineFROMDi2015NewLine    WideHistory  Di2015NewLineWHEREDi2015NewLine        [WideHistory].DateTime >= @start_dateDi2015NewLine    AND [WideHistory].DateTime <  @end_dateDi2015NewLine    AND DATEADD(DAY, DATEDIFF(MINUTE, 0, [WideHistory].DateTime), 0) = @chosen_timeDi2015NewLine
454597Di2015UniqueSeparatorpublic static class XExtensionsDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Get the absolute XPath to a given XElementDi2015NewLine    /// (e.g. "/people/person[6]/name[1]/last[1]").Di2015NewLine    /// </summary>Di2015NewLine    public static string GetAbsoluteXPath(this XElement element)Di2015NewLine    {Di2015NewLine        if (element == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("element");Di2015NewLine        }Di2015NewLineDi2015NewLine        Func<XElement, string> relativeXPath = e =>Di2015NewLine        {Di2015NewLine            int index = e.IndexPosition();Di2015NewLine            string name = e.Name.LocalName;Di2015NewLineDi2015NewLine            // If the element is the root, no index is requiredDi2015NewLineDi2015NewLine            return (index == -1) ? "/" + name : string.FormatDi2015NewLine            (Di2015NewLine                "/{0}[{1}]",Di2015NewLine                name, Di2015NewLine                index.ToString()Di2015NewLine            );Di2015NewLine        };Di2015NewLineDi2015NewLine        var ancestors = from e in element.Ancestors()Di2015NewLine                        select relativeXPath(e);Di2015NewLineDi2015NewLine        return string.Concat(ancestors.Reverse().ToArray()) + Di2015NewLine               relativeXPath(element);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Get the index of the given XElement relative to itsDi2015NewLine    /// siblings with identical names. If the given element isDi2015NewLine    /// the root, -1 is returned.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="element">Di2015NewLine    /// The element to get the index of.Di2015NewLine    /// </param>Di2015NewLine    public static int IndexPosition(this XElement element)Di2015NewLine    {Di2015NewLine        if (element == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("element");Di2015NewLine        }Di2015NewLineDi2015NewLine        if (element.Parent == null)Di2015NewLine        {Di2015NewLine            return -1;Di2015NewLine        }Di2015NewLineDi2015NewLine        int i = 1; // Indexes for nodes start at 1, not 0Di2015NewLineDi2015NewLine        foreach (var sibling in element.Parent.Elements(element.Name))Di2015NewLine        {Di2015NewLine            if (sibling == element)Di2015NewLine            {Di2015NewLine                return i;Di2015NewLine            }Di2015NewLineDi2015NewLine            i++;Di2015NewLine        }Di2015NewLineDi2015NewLine        throw new InvalidOperationExceptionDi2015NewLine            ("element has been removed from its parent.");Di2015NewLine    }Di2015NewLine}Di2015NewLine
454597Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Program.Process(XDocument.Load(@"C:\\test.xml").Root);Di2015NewLine        Console.Read();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Process(XElement element)Di2015NewLine    {Di2015NewLine        if (!element.HasElements)Di2015NewLine        {Di2015NewLine            Console.WriteLine(element.GetAbsoluteXPath());Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            foreach (XElement child in element.Elements())Di2015NewLine            {Di2015NewLine                Process(child);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
454597Di2015UniqueSeparator/tests/test[1]/date[1]Di2015NewLine/tests/test[1]/time[1]/start[1]Di2015NewLine/tests/test[1]/time[1]/end[1]Di2015NewLine/tests/test[1]/facility[1]/name[1]Di2015NewLine/tests/test[1]/facility[1]/website[1]Di2015NewLine/tests/test[1]/facility[1]/street[1]Di2015NewLine/tests/test[1]/facility[1]/state[1]Di2015NewLine/tests/test[1]/facility[1]/city[1]Di2015NewLine/tests/test[1]/facility[1]/zip[1]Di2015NewLine/tests/test[1]/facility[1]/phone[1]Di2015NewLine/tests/test[1]/info[1]Di2015NewLine/tests/test[2]/date[1]Di2015NewLine/tests/test[2]/time[1]/start[1]Di2015NewLine/tests/test[2]/time[1]/end[1]Di2015NewLine/tests/test[2]/facility[1]/name[1]Di2015NewLine/tests/test[2]/facility[1]/website[1]Di2015NewLine/tests/test[2]/facility[1]/street[1]Di2015NewLine/tests/test[2]/facility[1]/state[1]Di2015NewLine/tests/test[2]/facility[1]/city[1]Di2015NewLine/tests/test[2]/facility[1]/zip[1]Di2015NewLine/tests/test[2]/facility[1]/phone[1]Di2015NewLine/tests/test[2]/info[1]Di2015NewLine
454621Di2015UniqueSeparatorvar list = new List<string> {"a", "b", "a", "c", "a", "b"};Di2015NewLinevar q = from x in listDi2015NewLine        group x by x into gDi2015NewLine        let count = g.Count()Di2015NewLine        orderby count descendingDi2015NewLine        select new {Value = g.Key, Count = count};Di2015NewLineforeach (var x in q)Di2015NewLine{Di2015NewLine    Console.WriteLine("Value: " + x.Value + " Count: " + x.Count);Di2015NewLine}Di2015NewLine
454621Di2015UniqueSeparatorgroup xx by xx into gDi2015NewLine
454621Di2015UniqueSeparator//Using extension methodsDi2015NewLinevar q = list.GroupBy(x => x.Name)Di2015NewLine            .Select(x => new {Count = x.Count(), Di2015NewLine                              Name = x.Key, Di2015NewLine                              ID = x.First().ID})Di2015NewLine            .OrderByDescending(x => x.Count);Di2015NewLineDi2015NewLine//Using LINQDi2015NewLinevar q = from x in listDi2015NewLine        group x by x.Name into gDi2015NewLine        let count = g.Count()Di2015NewLine        orderby count descendingDi2015NewLine        select new {Name = g.Key, Count = count, ID = g.First().ID};Di2015NewLineDi2015NewLineforeach (var x in q)Di2015NewLine{Di2015NewLine    Console.WriteLine("Count: " + x.Count + " Name: " + x.Name + " ID: " + x.ID);Di2015NewLine}Di2015NewLine
454628Di2015UniqueSeparatoris
454628Di2015UniqueSeparatoras
454628Di2015UniqueSeparatoras
454628Di2015UniqueSeparatoris
454628Di2015UniqueSeparatorButton button = sender as Button;Di2015NewLineif (button != null)Di2015NewLine{Di2015NewLine  presenter.CheckLeadingZero(button);Di2015NewLine}Di2015NewLine
454738Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Controls;Di2015NewLineDi2015NewLinenamespace MimimalSilverlightAppDi2015NewLine{Di2015NewLine    public class App : ApplicationDi2015NewLine    {Di2015NewLine        public App()Di2015NewLine        {Di2015NewLine            this.Startup += this.Application_Startup;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Application_Startup(object sender, StartupEventArgs e)Di2015NewLine        {Di2015NewLine            var canvas = new Canvas();Di2015NewLineDi2015NewLine            var textblock = new TextBlock();Di2015NewLine            textblock.FontSize = 24;Di2015NewLine            textblock.Text = "Hello!";Di2015NewLine            canvas.Children.Add(textblock);Di2015NewLineDi2015NewLine            this.RootVisual = canvas;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
454758Di2015UniqueSeparator`
454758Di2015UniqueSeparator[[ ]]
454758Di2015UniqueSeparator<typeAlias alias="ISimpleCacheOfIBrokeredDataObject"Di2015NewLine   type="MyApplication.ISimpleCache`1[[MyApplication.IBrokeredDataObject, MyApplication]], MyApplication" />Di2015NewLine
454758Di2015UniqueSeparator`
454758Di2015UniqueSeparator'
454841Di2015UniqueSeparator[OnDeserialized]Di2015NewLineinternal void OnDeserialized(StreamingContext context)Di2015NewLine{Di2015NewLine    if (string.IsNullOrEmpty(Bar))Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException("No Bar!");Di2015NewLine    }Di2015NewLine}Di2015NewLine
454841Di2015UniqueSeparator[OnSerializing]Di2015NewLineinternal void OnSerializing(StreamingContext context)Di2015NewLine{Di2015NewLine    if (string.IsNullOrEmpty(Bar))Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException("No Bar!");Di2015NewLine    }Di2015NewLine}Di2015NewLine
454895Di2015UniqueSeparatorToCharArray()
454895Di2015UniqueSeparatorIEnumerable<char>
454895Di2015UniqueSeparatorstatic string SanitizeXml(string xml)Di2015NewLine{Di2015NewLine    return new string (xml.Where(c => IsLegalXmlChar(c)).ToArray());Di2015NewLine}Di2015NewLine
454895Di2015UniqueSeparatorstring SanitizeXml(string xml)Di2015NewLine{Di2015NewLine    var buffer = new StringBuilder(xml.Length);Di2015NewLineDi2015NewLine    foreach(char c in xml)Di2015NewLine    {Di2015NewLine        if (IsLegalXmlChar(c))Di2015NewLine        {Di2015NewLine                buffer.Append(c);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return buffer.ToString();Di2015NewLine}Di2015NewLine
454895Di2015UniqueSeparator// Can't just call it Append as otherwise StringBuilder.Append(object) wouldDi2015NewLine// be used :(Di2015NewLinepublic static StringBuilder AppendSequence(this StringBuilder builder,Di2015NewLine                                           IEnumerable<char> sequence)Di2015NewLine{Di2015NewLine    foreach (char c in sequence)Di2015NewLine    {Di2015NewLine        builder.Append(c);Di2015NewLine    }Di2015NewLine    return builder;Di2015NewLine}Di2015NewLine
454895Di2015UniqueSeparatorxml = new StringBuilder(xml.Length)Di2015NewLine            .AppendSequence(xml.Where(IsLegalXmlChar)Di2015NewLine            .ToString();Di2015NewLine
454895Di2015UniqueSeparatorpublic static StringBuilder AppendWhere(this StringBuilder builder,Di2015NewLine                                        string text,Di2015NewLine                                        Func<char, bool> predicate)Di2015NewLine{Di2015NewLine    int start = 0;Di2015NewLine    bool lastResult = false;Di2015NewLine    for (int i=0; i < text.Length; i++)Di2015NewLine    {Di2015NewLine        if (predicate(text[i]))Di2015NewLine        {Di2015NewLine            if (!lastResult)Di2015NewLine            {Di2015NewLine                start = i;Di2015NewLine                lastResult = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            if (lastResult)Di2015NewLine            {Di2015NewLine                builder.Append(text, start, i-start);Di2015NewLine                lastResult = false;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if (lastResult)Di2015NewLine    {Di2015NewLine         builder.Append(text, start, text.Length-start);Di2015NewLine    }Di2015NewLine    return builder;Di2015NewLine}Di2015NewLine
454895Di2015UniqueSeparatorxml = new StringBuilder(xml.Length).AppendWhere(xml, IsLegalXmlChar)Di2015NewLine                                   .ToString();Di2015NewLine
454896Di2015UniqueSeparator// The interceptor class must implement the IInterceptor interfaceDi2015NewLinevar yourInterceptor = new YourInterceptor();Di2015NewLinevar proxyFactory = new ProxyFactory();Di2015NewLineIYourInterface proxy = proxyFactory.CreateProxy<IYourInterface>(yourInterceptor);Di2015NewLine// Do something useful with the proxy here...Di2015NewLine
454918Di2015UniqueSeparatorpublic static bool HitTest(Rectangle bounds, float angle, Point location)Di2015NewLine        {Di2015NewLine            if (angle == 0) return bounds.Contains(location);Di2015NewLineDi2015NewLine            using (Matrix matrix = new Matrix())Di2015NewLine            {Di2015NewLine                matrix.RotateAt(angle, Center(bounds));Di2015NewLine                using (GraphicsPath path = new GraphicsPath())Di2015NewLine                {Di2015NewLine                    path.AddRectangle(bounds);Di2015NewLine                    path.Transform(matrix);Di2015NewLine                    return path.IsVisible(location.X, location.Y);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
455172Di2015UniqueSeparator!dumpheap -stat
455172Di2015UniqueSeparator!gcroot
455241Di2015UniqueSeparatorList<String>Di2015NewLineQueue<String>Di2015NewLineStack<String>Di2015NewLine
455784Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLinenamespace UtilityDi2015NewLine{Di2015NewLine    public class ThreadedBindingList<T> : BindingList<T>Di2015NewLine    {Di2015NewLine        SynchronizationContext ctx = SynchronizationContext.Current;Di2015NewLineDi2015NewLine        protected override void OnAddingNew(AddingNewEventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine            if (ctx == null)Di2015NewLine            {Di2015NewLine                BaseAddingNew(e);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                ctx.Send(delegateDi2015NewLine                {Di2015NewLine                    BaseAddingNew(e);Di2015NewLine                }, null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        void BaseAddingNew(AddingNewEventArgs e)Di2015NewLine        {Di2015NewLine            base.OnAddingNew(e);Di2015NewLine        }Di2015NewLine        protected override void OnListChanged(ListChangedEventArgs e)Di2015NewLine        {Di2015NewLine           // SynchronizationContext ctx = SynchronizationContext.Current;Di2015NewLine            if (ctx == null)Di2015NewLine            {Di2015NewLine                BaseListChanged(e);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                ctx.Send(delegateDi2015NewLine                {Di2015NewLine                    BaseListChanged(e);Di2015NewLine                }, null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        void BaseListChanged(ListChangedEventArgs e)Di2015NewLine        {Di2015NewLine            base.OnListChanged(e);Di2015NewLine        }Di2015NewLine    } Di2015NewLine}Di2015NewLine
455828Di2015UniqueSeparatorpublic abstract class ZooNodeDi2015NewLine{Di2015NewLine    public ZooNode Parent { get; set; }Di2015NewLine    public virtual IList<ZooNode> Children { get; set; }Di2015NewLine}Di2015NewLine
455858Di2015UniqueSeparatorstatic void HighlightPhrase(RichTextBox box, string phrase, Color color) {Di2015NewLine  int pos = box.SelectionStart;Di2015NewLine  string s = box.Text;Di2015NewLine  for (int ix = 0; ; ) {Di2015NewLine    int jx = s.IndexOf(phrase, ix, StringComparison.CurrentCultureIgnoreCase);Di2015NewLine    if (jx < 0) break;Di2015NewLine    box.SelectionStart = jx;Di2015NewLine    box.SelectionLength = phrase.Length;Di2015NewLine    box.SelectionColor = color;Di2015NewLine    ix = jx + 1;Di2015NewLine  }Di2015NewLine  box.SelectionStart = pos;Di2015NewLine  box.SelectionLength = 0;Di2015NewLine}Di2015NewLine
455858Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e) {Di2015NewLine  richTextBox1.Text = "Aardvarks are strange animals";Di2015NewLine  HighlightPhrase(richTextBox1, "a", Color.Red);Di2015NewLine}Di2015NewLine
455892Di2015UniqueSeparatorpublic static Type GetBaseTypeGenericArgument(Type type) {Di2015NewLine  return type.BaseType.GetGenericArguments()[0];Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineGetBaseTypeGenericArgument(typeof(MyClass));Di2015NewLine
455938Di2015UniqueSeparatorabstract class FieldDi2015NewLine{Di2015NewLine    public int Length { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FieldA : FieldDi2015NewLine{Di2015NewLine    public static void DoSomething()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Did something.");Di2015NewLine    }Di2015NewLine}Di2015NewLine
455985Di2015UniqueSeparatorcscript "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\Samples\\SysMgmt\\MSI\\scripts\\WiRunSQl.vbs" my.msi "INSERT INTO `Property`(`Property`, `Value`) VALUES ('REBOOT', 'F')"Di2015NewLine
456058Di2015UniqueSeparatorDataContractSerializer
456058Di2015UniqueSeparatorDataContractJsonSerializer
456108Di2015UniqueSeparatorprotected Control PostBackControlDi2015NewLine{Di2015NewLine    get { return Page.FindControl(Request.Params.Get("__EVENTTARGET")); }Di2015NewLine}Di2015NewLine
456244Di2015UniqueSeparatorXmlElementAttribute
456244Di2015UniqueSeparatorXmlArrayItemAttribute
456244Di2015UniqueSeparator[XmlRoot("Animals")]Di2015NewLine[XmlType("Animals")]Di2015NewLinepublic class AnimalsWrapperDi2015NewLine{Di2015NewLine    [XmlElement(typeof(Bird), ElementName = "Bird")]Di2015NewLine    [XmlElement(typeof(Cat), ElementName = "Cat")]Di2015NewLine    public List<Animal> Animals;Di2015NewLine}Di2015NewLine
456295Di2015UniqueSeparatorToArray()
456295Di2015UniqueSeparatorToList()
456295Di2015UniqueSeparatorXDocument doc = XDocument.Load(@"test_input.xml", LoadOptions.PreserveWhitespace);Di2015NewLineXNamespace ns = "http://dummy";Di2015NewLineDi2015NewLineIEnumerable<XElement> elem_list = from elem in doc.Descendants()Di2015NewLine                                  where elem.Name.Namespace == nsDi2015NewLine                                  select elem;Di2015NewLineDi2015NewLineXElement[] elem_array = elem_list.ToArray();Di2015NewLineDi2015NewLineforeach (XElement elem in elem_array) {Di2015NewLine   if (elem.Name.LocalName == "a") {Di2015NewLine      elem.Remove();Di2015NewLine   }Di2015NewLine}Di2015NewLine
456391Di2015UniqueSeparatorListView.HideSelection
456391Di2015UniqueSeparatorHideSelection
456572Di2015UniqueSeparatorDispose
456572Di2015UniqueSeparatorDispose()
456572Di2015UniqueSeparatorif(someDisposableObject != null)Di2015NewLine{Di2015NewLine    someDisposableObject.Dispose();Di2015NewLine    someDisposableObject = null;Di2015NewLine}Di2015NewLine(for non-disposable, just set to null)Di2015NewLinesomeNonDisposableObject = null; // etcDi2015NewLine
456572Di2015UniqueSeparatorsomeEventHandler = null;Di2015NewLine
456572Di2015UniqueSeparatorDispose()
456577Di2015UniqueSeparatorforeach
456577Di2015UniqueSeparatorGetEnumerator
456577Di2015UniqueSeparatorforeach
456577Di2015UniqueSeparatorDispose()
456577Di2015UniqueSeparatorIDisposable
456577Di2015UniqueSeparatorforeach
456577Di2015UniqueSeparatorZip
456577Di2015UniqueSeparatorSequenceEqual
456577Di2015UniqueSeparatorforeach
456577Di2015UniqueSeparatorstatic IEnumerable<T> Zip<T>(this IEnumerable<T> left,Di2015NewLine    IEnumerable<T> right)Di2015NewLine{Di2015NewLine    using (var iter = right.GetEnumerator())Di2015NewLine    {Di2015NewLine        // consume everything in the first sequenceDi2015NewLine        foreach (var item in left)Di2015NewLine        {Di2015NewLine            yield return item;Di2015NewLineDi2015NewLine            // and add an item from the second sequnce each time (if we can)Di2015NewLine            if (iter.MoveNext())Di2015NewLine            {Di2015NewLine                yield return iter.Current;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        // any remaining items in the second sequenceDi2015NewLine        while (iter.MoveNext())Di2015NewLine        {Di2015NewLine            yield return iter.Current;Di2015NewLine        }                Di2015NewLine    }            Di2015NewLine}Di2015NewLineDi2015NewLinestatic bool SequenceEqual<T>(this IEnumerable<T> left,Di2015NewLine    IEnumerable<T> right)Di2015NewLine{Di2015NewLine    var comparer = EqualityComparer<T>.Default;Di2015NewLineDi2015NewLine    using (var iter = right.GetEnumerator())Di2015NewLine    {Di2015NewLine        foreach (var item in left)Di2015NewLine        {Di2015NewLine            if (!iter.MoveNext()) return false; // first is longerDi2015NewLine            if (!comparer.Equals(item, iter.Current))Di2015NewLine                return false; // item differentDi2015NewLine        }Di2015NewLine        if (iter.MoveNext()) return false; // second is longerDi2015NewLine    }Di2015NewLine    return true; // same length, all equal            Di2015NewLine}Di2015NewLine
456617Di2015UniqueSeparatordSearcher.Filter = "(&(objectClass=user))";Di2015NewLine
456617Di2015UniqueSeparatordSearcher.Filter = "(&(objectClass=user)(cn=Adit))";Di2015NewLine
456698Di2015UniqueSeparatorSelect
456698Di2015UniqueSeparatorMyFunc
456698Di2015UniqueSeparatorIQueryable<T>
456698Di2015UniqueSeparatorOrderBy
456698Di2015UniqueSeparatorSkip
456698Di2015UniqueSeparatorTake
456698Di2015UniqueSeparatorWhere
456698Di2015UniqueSeparator// this could also be an instance method on the data-contextDi2015NewLineinternal static IQueryable<SomeType> MyFunc(Di2015NewLine    this MyDataContext dc, parameter a)Di2015NewLine{Di2015NewLine   return dc.tablename.Where(row => row.parameter == a);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void UsingFunc()Di2015NewLine{Di2015NewLine    using(MyDataContext dc = new MyDataContext()) {Di2015NewLine       var result = dc.MyFunc(new a());Di2015NewLineDi2015NewLine       foreach(var row in result)Di2015NewLine       {Di2015NewLine           //Do somethingDi2015NewLine       }Di2015NewLine    }Di2015NewLine}Di2015NewLine
456698Di2015UniqueSeparator.ToList()
456698Di2015UniqueSeparator.ToArray()
456698Di2015UniqueSeparatorprivate IEnumerable<SomeType> MyFunc(parameter a)Di2015NewLine{Di2015NewLine   using(MyDataContext dc = new MyDataContext)Di2015NewLine   {Di2015NewLine      // or ToList() etcDi2015NewLine      return dc.tablename.Where(row => row.parameter == a).ToArray();Di2015NewLine   }Di2015NewLine}Di2015NewLine
456698Di2015UniqueSeparatorprivate IEnumerable<SomeType> MyFunc(parameter a)Di2015NewLine{Di2015NewLine   using(MyDataContext dc = new MyDataContext)Di2015NewLine   {Di2015NewLine      foreach(SomeType row in dcDi2015NewLine          .tablename.Where(row => row.parameter == a))Di2015NewLine      {Di2015NewLine        yield return row;Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
456737Di2015UniqueSeparatorpublic abstract class DocumentGeneratorDi2015NewLine{Di2015NewLine  abstract protected void AddHeader();Di2015NewLine  abstract protected void AddBody();Di2015NewLine  abstract protected void AddFooter();Di2015NewLineDi2015NewLine  // Template Method http://en.wikipedia.org/wiki/Template_method_patternDi2015NewLine  public FileInfo Generate(string sFileName)Di2015NewLine  {Di2015NewLine    FileInfo f = null;  Di2015NewLine    //create fileDi2015NewLineDi2015NewLine    // either pass in the file to the below methods or use member vars + an additional write step Di2015NewLine    AddHeader();Di2015NewLine    AddBody();Di2015NewLine    AddFooter();Di2015NewLineDi2015NewLine    // write out everything to the fileDi2015NewLine    return f;Di2015NewLine  }Di2015NewLine}Di2015NewLine
456737Di2015UniqueSeparatorabstract public class UniqueHeaderFooterCombination1 : DocumentGeneratorDi2015NewLine{Di2015NewLine  protected override void AddHeader()Di2015NewLine  {Di2015NewLine    Console.WriteLine("unique combination1 header");Di2015NewLine  }Di2015NewLine  protected override void AddFooter()Di2015NewLine  {Di2015NewLine    Console.WriteLine("unique combination1 footer");Di2015NewLine  }Di2015NewLine}Di2015NewLine
456737Di2015UniqueSeparatorpublic class LetsSayCSVGenerator : UniqueHeaderFooterCombination1Di2015NewLine{Di2015NewLine  protected override void AddBody()Di2015NewLine  {Di2015NewLine    Console.WriteLine("csv body items");Di2015NewLine  }Di2015NewLine}Di2015NewLine
456737Di2015UniqueSeparatorabstract class DocumentGeneratorFactoryDi2015NewLine{Di2015NewLine  public static DocumentGenerator GetGenerator(FileType eFileType)Di2015NewLine  {Di2015NewLine    switch (eFileType)Di2015NewLine    {Di2015NewLine      // a hash of FileType => GeneratorDi2015NewLine      default:Di2015NewLine        return new LetsSayCSVGenerator();Di2015NewLine    }Di2015NewLineDi2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine  static void Main(string[] args)Di2015NewLine  {Di2015NewLine    DocumentGenerator d = DocumentGeneratorFactory.GetGenerator(FileType.CSV);Di2015NewLine    FileInfo f = d.Generate("ItsAlive.CSV");Di2015NewLine  }Di2015NewLine}Di2015NewLine
456814Di2015UniqueSeparatorDispose
456814Di2015UniqueSeparatorVertexBuffer
456814Di2015UniqueSeparatorDevice
456814Di2015UniqueSeparatorDispose
456814Di2015UniqueSeparatorVertexBuffer
456814Di2015UniqueSeparatorPool.Default
456814Di2015UniqueSeparatorPool.Managed
456814Di2015UniqueSeparatorVertexBuffer.Dispose
457139Di2015UniqueSeparatortextBox.Attributes.Add("onblur", "javascriptMethod(this);");Di2015NewLine
457139Di2015UniqueSeparatorfunction javascriptMethod(textbox) { alert(textbox.id); }Di2015NewLine
457204Di2015UniqueSeparator    public void OnDeserialization(object sender)Di2015NewLine    {Di2015NewLine            this.Dictionary.OnDeserialization(sender);Di2015NewLine    }Di2015NewLine
457264Di2015UniqueSeparatorvar qry = from item in itemlistDi2015NewLine          select new {item.X, item.Y,Di2015NewLine              Dummies = item.examples.Select(Di2015NewLine                ex => ex.GetDummy())Di2015NewLine          };Di2015NewLineforeach (var item in qry)Di2015NewLine{Di2015NewLine    p.AddStuff(item.X, item.Y, item.Dummies.ToList());Di2015NewLine}Di2015NewLine
457264Di2015UniqueSeparatorforeach
457264Di2015UniqueSeparatorGetDummy
457264Di2015UniqueSeparatorforeach (var item in itemlist)Di2015NewLine{Di2015NewLine    var dlist = item.examples.Select(ex => ex.GetDummy()).ToList();Di2015NewLine    p.AddStuff(item.X,item.Y,dlist);Di2015NewLine}Di2015NewLine
457328Di2015UniqueSeparatorExpression.AndAlso
457328Di2015UniqueSeparatorOrElse
457328Di2015UniqueSeparatorParameterExpression
457328Di2015UniqueSeparatorvar body = Expression.AndAlso(expr1.Body, expr2.Body);Di2015NewLinevar lambda = Expression.Lambda<Func<T,bool>>(body, expr1.Parameters[0]);Di2015NewLine
457328Di2015UniqueSeparatorstatic Expression<Func<T, bool>> Not<T>(Di2015NewLine    this Expression<Func<T, bool>> expr)Di2015NewLine{Di2015NewLine    return Expression.Lambda<Func<T, bool>>(Di2015NewLine        Expression.Not(expr.Body), expr.Parameters[0]);Di2015NewLine}Di2015NewLine
457328Di2015UniqueSeparatorInvoke
457328Di2015UniqueSeparator// OrElse is very similar...Di2015NewLinestatic Expression<Func<T, bool>> AndAlso<T>(Di2015NewLine    this Expression<Func<T, bool>> left,Di2015NewLine    Expression<Func<T, bool>> right)Di2015NewLine{Di2015NewLine    var param = Expression.Parameter(typeof(T), "x");Di2015NewLine    var body = Expression.AndAlso(Di2015NewLine            Expression.Invoke(left, param),Di2015NewLine            Expression.Invoke(right, param)Di2015NewLine        );Di2015NewLine    var lambda = Expression.Lambda<Func<T, bool>>(body, param);Di2015NewLine    return lambda;Di2015NewLine}Di2015NewLine
457328Di2015UniqueSeparatorInvoke
457328Di2015UniqueSeparatorstatic Expression<Func<T, bool>> AndAlso<T>(Di2015NewLine    this Expression<Func<T, bool>> expr1,Di2015NewLine    Expression<Func<T, bool>> expr2)Di2015NewLine{Di2015NewLine    // need to detect whether they use the sameDi2015NewLine    // parameter instance; if not, they need fixingDi2015NewLine    ParameterExpression param = expr1.Parameters[0];Di2015NewLine    if (ReferenceEquals(param, expr2.Parameters[0]))Di2015NewLine    {Di2015NewLine        // simple versionDi2015NewLine        return Expression.Lambda<Func<T, bool>>(Di2015NewLine            Expression.AndAlso(expr1.Body, expr2.Body), param);Di2015NewLine    }Di2015NewLine    // otherwise, keep expr1 "as is" and invoke expr2Di2015NewLine    return Expression.Lambda<Func<T, bool>>(Di2015NewLine        Expression.AndAlso(Di2015NewLine            expr1.Body,Di2015NewLine            Expression.Invoke(expr2, param)), param);Di2015NewLine}Di2015NewLine
457367Di2015UniqueSeparatorCursor.Hide();Di2015NewLine
457380Di2015UniqueSeparatorbyte[]
457380Di2015UniqueSeparatorSystem.Drawing.dll
457380Di2015UniqueSeparator    using(Image img = Image.FromFile("foo.bmp"))Di2015NewLine    {Di2015NewLine        img.Save("foo.jpg", ImageFormat.Jpeg);Di2015NewLine    }Di2015NewLine
457380Di2015UniqueSeparatorFromStream
457380Di2015UniqueSeparatornew MemoryStream(arr)
457380Di2015UniqueSeparatorbyte[]
457380Di2015UniqueSeparator    byte[] raw = ...todo // File.ReadAllBytes("foo.bmp");Di2015NewLine    using(Image img = Image.FromStream(new MemoryStream(raw)))Di2015NewLine    {Di2015NewLine        img.Save("foo.jpg", ImageFormat.Jpeg);Di2015NewLine    }Di2015NewLine
457492Di2015UniqueSeparatorDA.FillSchema() Di2015NewLineDi2015NewLineDS.Table("Name").PrimaryKeyDi2015NewLine
457492Di2015UniqueSeparator    private void LoanSchema()Di2015NewLine    {Di2015NewLineDi2015NewLine         private List<String> tablesList = new List<String>();Di2015NewLine         private Dictionary<String, String> columnsDictionary = new Dictionary<String, String>();Di2015NewLineDi2015NewLine          string connectionString = "Integrated Security=SSPI;" +Di2015NewLine          "Persist Security Info = False;Initial Catalog=Northwind;" +Di2015NewLine          "Data Source = localhost";Di2015NewLine          SqlConnection connection = new SqlConnection();Di2015NewLine          connection.ConnectionString = connectionString;Di2015NewLine          connection.Open();Di2015NewLineDi2015NewLine          SqlCommand command = new SqlCommand();Di2015NewLine          command.Connection = connection;Di2015NewLine          command.CommandText = "exec sp_tables";Di2015NewLine          command.CommandType = CommandType.Text;Di2015NewLineDi2015NewLine          SqlDataReader reader = command.ExecuteReader();Di2015NewLineDi2015NewLine           if (reader.HasRows)Di2015NewLine           {Di2015NewLine               while (reader.Read())Di2015NewLine                  tablesList.Add(reader["TABLE_NAME"].ToString());Di2015NewLine           }Di2015NewLine           reader.Close();Di2015NewLineDi2015NewLine           command.CommandText = "exec sp_columns @table_name = '" +Di2015NewLine           tablesList[0] + "'";Di2015NewLine           command.CommandType = CommandType.Text;Di2015NewLine           reader = command.ExecuteReader();Di2015NewLineDi2015NewLine            if (reader.HasRows)Di2015NewLine            {Di2015NewLine                while (reader.Read())Di2015NewLine                          columnsDictionary.Add(reader["COLUMN_NAME"].ToString(), reader["TYPE_NAME"].ToString());Di2015NewLine             }Di2015NewLine}Di2015NewLine
457501Di2015UniqueSeparatorvar foos = new List<Foo>(array);Di2015NewLinefoos.RemoveAt(index);Di2015NewLinereturn foos.ToArray();Di2015NewLine
457501Di2015UniqueSeparatorpublic static T[] RemoveAt<T>(this T[] source, int index)Di2015NewLine{Di2015NewLine    T[] dest = new T[source.Length - 1];Di2015NewLine    if( index > 0 )Di2015NewLine        Array.Copy(source, 0, dest, 0, index);Di2015NewLineDi2015NewLine    if( index < source.Length - 1 )Di2015NewLine        Array.Copy(source, index + 1, dest, index, source.Length - index - 1);Di2015NewLineDi2015NewLine    return dest;Di2015NewLine}Di2015NewLine
457501Di2015UniqueSeparatorFoo[] bar = GetFoos();Di2015NewLinebar = bar.RemoveAt(2);Di2015NewLine
457504Di2015UniqueSeparatorDirectoryInfo dirInfo = new DirectoryInfo("C:\\\\TestDir2");Di2015NewLine            DirectorySecurity dirSecurity = dirInfo.GetAccessControl();Di2015NewLineDi2015NewLine            dirSecurity.AddAccessRule(new FileSystemAccessRule("ASPNET", FileSystemRights.Write|FileSystemRights.DeleteSubdirectoriesAndFiles, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.InheritOnly, AccessControlType.Allow));Di2015NewLineDi2015NewLineDi2015NewLine            dirInfo.SetAccessControl(dirSecurity);Di2015NewLine
457594Di2015UniqueSeparatorpublic class Connect : IDTExtensibility2, IDTCommandTargetDi2015NewLine{Di2015NewLine    public void OnConnection( object application, ext_ConnectMode connectMode, Di2015NewLine        object addInInst, ref Array custom )Di2015NewLine    {Di2015NewLine        _applicationObject = ( DTE2 ) application;Di2015NewLine        _applicationObject.Events.SelectionEvents.OnChange += SelectionEvents_OnChange;Di2015NewLine    }Di2015NewLineDi2015NewLine    void SelectionEvents_OnChange()Di2015NewLine    {Di2015NewLine        vsWindowType type = _applicationObject.ActiveWindow.Type;Di2015NewLine        // switch (type) { ... }Di2015NewLine    }Di2015NewLine}Di2015NewLine
457594Di2015UniqueSeparatorvsWindowType type = _applicationObject.ActiveWindow.Type;Di2015NewLine
457648Di2015UniqueSeparatorParallel.For
457648Di2015UniqueSeparatorParallel.ForEach
457648Di2015UniqueSeparatorCustomThreadPool
457664Di2015UniqueSeparatorConfigurationManager.ConnectionStrings["Production"].ConnectionStringDi2015NewLine
457708Di2015UniqueSeparatorstatic bool IsSubclassOfRawGeneric(Type generic, Type toCheck) {Di2015NewLine    while (toCheck != null && toCheck != typeof(object)) {Di2015NewLine        var cur = toCheck.IsGenericType ? toCheck.GetGenericTypeDefinition() : toCheck;Di2015NewLine        if (generic == cur) {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        toCheck = toCheck.BaseType;Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
457715Di2015UniqueSeparator    cmd.CommandType = CommandType.Text;Di2015NewLine    cmd.Parameters.AddWithValue("@id", ...); // your id argDi2015NewLine    cmd.Parameters.AddWithValue(... , ...); // your other args...Di2015NewLine    cmd.CommandText = @"Di2015NewLineDECLARE @TaskType int -- or whateverDi2015NewLineDi2015NewLineSELECT @TaskType = // some existing query based on @idDi2015NewLineDi2015NewLineEXEC getrecords @TaskType, ...Di2015NewLine";Di2015NewLine
457715Di2015UniqueSeparatorIDataReader
457715Di2015UniqueSeparatorDataTable.Load
457740Di2015UniqueSeparatorFont font1 = new Font("Arial", 12, FontStyle.Italic);Di2015NewLineTypeConverter converter = TypeDescriptor.GetConverter(typeof(Font));Di2015NewLine// Saving Font object as a stringDi2015NewLinestring fontString = converter.ConvertToString(font1);Di2015NewLine// Load an instance of Font from a stringDi2015NewLineFont font = (Font)converter.ConvertFromString(fontString);Di2015NewLine
457747Di2015UniqueSeparatorpublic Form1()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    this.tabControl1.MouseClick += new MouseEventHandler(tabControl1_MouseClick);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void tabControl1_MouseClick(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Button == MouseButtons.Right)Di2015NewLine    {Di2015NewLine        this.contextMenuStrip1.Show(this.tabControl1, e.Location);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
457938Di2015UniqueSeparatornode.EnsureVisible();Di2015NewLine
457938Di2015UniqueSeparatorif(treeView.SelectedNode != null) treeView.SelectedNode.EnsureVisible();Di2015NewLine
458034Di2015UniqueSeparatorDi2015NewLineusing System;Di2015NewLineusing System.Net;Di2015NewLineDi2015NewLinenamespace DownloaderDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine    \public static void Main(string[] args)Di2015NewLine    \{Di2015NewLine    \\using (WebClient wc = new WebClient())Di2015NewLine    \\{Di2015NewLine    \\\wc.DownloadFile("http://www.mydomain.com/resource.img", "c:\\\\savedImage.img");Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
458049Di2015UniqueSeparatorHttpListener
458049Di2015UniqueSeparatornstsh
458049Di2015UniqueSeparatorhttpcfg
458108Di2015UniqueSeparatorString oldDir = Directory.GetCurrentDirectory();Di2015NewLine// ... do dialog...Di2015NewLineEnvironment.CurrentDirectory = oldDir;Di2015NewLine
458108Di2015UniqueSeparatordlg.RestoreDirectory = true;Di2015NewLinedlg.ShowDialog()Di2015NewLine
458193Di2015UniqueSeparatorusing System.Threading;Di2015NewLineusing System;Di2015NewLinestatic class BackgroundTaskDemoDi2015NewLine{Di2015NewLine    // make this volatile to fix itDi2015NewLine    private static bool stopping = false;Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        new Thread(DoWork).Start();Di2015NewLine        Thread.Sleep(5000);Di2015NewLine        stopping = true;Di2015NewLineDi2015NewLineDi2015NewLine        Console.WriteLine("Main exit");Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void DoWork()Di2015NewLine    {Di2015NewLine        int i = 0;Di2015NewLine        while (!stopping)Di2015NewLine        {Di2015NewLine            i++;Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("DoWork exit " + i);Di2015NewLine    }Di2015NewLine}Di2015NewLine
458193Di2015UniqueSeparatorMain exitDi2015NewLine
458193Di2015UniqueSeparatorstopping
458193Di2015UniqueSeparatortrue
458193Di2015UniqueSeparatorReadLine
458193Di2015UniqueSeparatori++
458193Di2015UniqueSeparatorvolatile
458317Di2015UniqueSeparatorSystem.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)Di2015NewLine
458359Di2015UniqueSeparator(time - begin) mod period < (end - begin)
458359Di2015UniqueSeparatorperiod > (begin - end)
458376Di2015UniqueSeparatorFileInfo fi = new FileInfo(somePath);Di2015NewLinebool exists = fi.Exists;Di2015NewLine
458376Di2015UniqueSeparatorFileInfo fi = new FileInfo(@"\\\\server\\share\\file.txt");Di2015NewLinebool exists = fi.Exists;Di2015NewLine
458446Di2015UniqueSeparatorINotifyPropertyChanged
458446Di2015UniqueSeparatorsvcutil
458446Di2015UniqueSeparator/enableDataBinding
458446Di2015UniqueSeparatorINotifyPropertyChanged
458604Di2015UniqueSeparatorMap<String, Object> context = ((BindingProvider) port).getRequestContext();Di2015NewLinecontext.put("userName', "foo");Di2015NewLine...Di2015NewLine
458604Di2015UniqueSeparatorpublic boolean handleMessage(SOAPMessageContext context) {Di2015NewLine    ...Di2015NewLineDi2015NewLine    SOAPMessage msg = context.getMessage();Di2015NewLine    msg.getSoapHeader();Di2015NewLine    ...Di2015NewLineDi2015NewLine}Di2015NewLine
458702Di2015UniqueSeparatorAssembly assembly = null;Di2015NewLineDi2015NewLineforeach(Assembly loadedAssembly in AppDomain.CurrentDomain.GetAssemblies())Di2015NewLine    if (loadedAssembly.FullName == "foobar, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null")Di2015NewLine    \assembly = loadedAssembly;Di2015NewLineDi2015NewLineif(assembly == null)Di2015NewLine{Di2015NewLine    byte[] studybin = System.IO.File.ReadAllBytes(@"C:\\pathToAssembly\\foobar.dll");Di2015NewLine    assembly = Assembly.Load(studybin);                Di2015NewLine}Di2015NewLine
458702Di2015UniqueSeparatorType
458940Di2015UniqueSeparatorforeach (ForeignKey key in currentTable.ForeignKeys)Di2015NewLine{Di2015NewLine    foreach (ForeignKeyColumn column in key.Columns)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Column: {0} is a foreign key to Table: {1}",column.Name,key.ReferencedTable);Di2015NewLine    }Di2015NewLine}Di2015NewLine
458950Di2015UniqueSeparator[TypeConverter(typeof(DateTimeConverterEx))]Di2015NewLinepublic DateTime Foo {get {...} set {...}}Di2015NewLine
458950Di2015UniqueSeparatorvar prop = TypeDescriptor.GetProperties(obj)["Foo"];Di2015NewLinevar converter = prop.Converter;Di2015NewLine// as before, using "converter"Di2015NewLine
458950Di2015UniqueSeparatorDateTime
458950Di2015UniqueSeparatorTypeDescriptor.AddAttributes(typeof(DateTime),Di2015NewLine    new TypeConverterAttribute(typeof(DateTimeConverterEx)));Di2015NewLine
459042Di2015UniqueSeparatorstring CurrentMachineName = Environment.MachineName;Di2015NewLine
459123Di2015UniqueSeparator<MyObject>
459136Di2015UniqueSeparatorthis.comboBox1.SelectedIndex = 0;Di2015NewLine
459169Di2015UniqueSeparatorIRenderer
459169Di2015UniqueSeparatorRenderView()
459309Di2015UniqueSeparatorexpressionPartSeparator = new char[] { '.' };Di2015NewLine
459309Di2015UniqueSeparatorConsole.WriteLine(DataBinder.GetIndexedPropertyValue(blah, "dict[a.aa]" ));Di2015NewLine
459468Di2015UniqueSeparatorstring myResult = "<?xml blahblahblah>";Di2015NewLineXDocument doc = XDocument.Parse(myResult);Di2015NewLine
459521Di2015UniqueSeparatorOleDbConnection conn = new OleDbConnection (connectionString);Di2015NewLineDi2015NewLineOleDbCommand command = new OleDbCommand();Di2015NewLinecommand.Connection = conn;Di2015NewLinecommand.CommandText= "INSERT INTO myTable (col1, col2) VALUES (@p_col1, @p_col2)";Di2015NewLinecommand.Parameters.Add ("@p_col1", OleDbType.String).Value = textBox1.Text;Di2015NewLine...Di2015NewLinecommand.ExecuteNonQUery();Di2015NewLine
459661Di2015UniqueSeparatorprotected string GetCommandLogString(IDbCommand command)Di2015NewLine{Di2015NewLine    string outputText;Di2015NewLineDi2015NewLine    if (command.Parameters.Count == 0)Di2015NewLine    {Di2015NewLine    \outputText = command.CommandText;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine    \StringBuilder output = new StringBuilder();Di2015NewLine    \output.Append(command.CommandText);Di2015NewLine    \output.Append("; ");Di2015NewLineDi2015NewLine    \IDataParameter p;Di2015NewLine    \int count = command.Parameters.Count;Di2015NewLine    \for (int i = 0; i < count; i++)Di2015NewLine    \{Di2015NewLine    \\p = (IDataParameter) command.Parameters[i];Di2015NewLine    \\output.Append(string.Format("{0} = '{1}'", p.ParameterName, p.Value));Di2015NewLineDi2015NewLine    \\if (i + 1 < count)Di2015NewLine    \\{Di2015NewLine    \\\output.Append(", ");Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLine    \outputText = output.ToString();Di2015NewLine    }Di2015NewLine    return outputText;Di2015NewLine}Di2015NewLine
459680Di2015UniqueSeparatorList<T>
459680Di2015UniqueSeparatorIEnumerable
459680Di2015UniqueSeparatorList<T>
459680Di2015UniqueSeparatorArrayList
459680Di2015UniqueSeparatorList<string> myList = new List<string>(myString.Split(','));Di2015NewLine
459697Di2015UniqueSeparatorICollection<T>
459697Di2015UniqueSeparatorIEnumerable
459697Di2015UniqueSeparatorAdd()
459697Di2015UniqueSeparatorICollection<T>
459697Di2015UniqueSeparatorAdd()
459697Di2015UniqueSeparatorAdd()
459697Di2015UniqueSeparatorclass Test : IEnumerableDi2015NewLine{Di2015NewLine    public IEnumerator GetEnumerator()Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Add(int i) { }Di2015NewLineDi2015NewLine    public void Add(int i, string s) { }Di2015NewLine}Di2015NewLine
459697Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Test test Di2015NewLine            = new Test Di2015NewLine            {Di2015NewLine                1, Di2015NewLine                { 2, "two" },Di2015NewLine                3 Di2015NewLine            };Di2015NewLine    }Di2015NewLine}Di2015NewLine
459741Di2015UniqueSeparator</p>Di2015NewLineDi2015NewLine<pre><code>SqlCommand cmd = connection.CreateCommand();Di2015NewLinecmd.CommandText = "SET FMTONLY ON; select column from table; SET FMTONLY OFF";Di2015NewLineSqlDataReader reader = cmd.ExecuteReader();Di2015NewLineSqlDbType type = (SqlDbType)(int)reader.GetSchemaTable().Rows[0]["ProviderType"];Di2015NewLine
460032Di2015UniqueSeparatorpublic property FirstName as StringDi2015NewLine
460072Di2015UniqueSeparatorpublic interface IReadableFileDi2015NewLine{Di2015NewLine    Stream OpenRead();Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IRepositoryDi2015NewLine{Di2015NewLine    IEnumerable<IReadableFile> Search(string pattern);Di2015NewLine}Di2015NewLine
460072Di2015UniqueSeparatorpublic class FolderFile : IReadableFileDi2015NewLine{Di2015NewLine    readonly private string _name;Di2015NewLineDi2015NewLine    public FolderFile(string name)Di2015NewLine    {Di2015NewLine        _name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region IFile MembersDi2015NewLineDi2015NewLine    public Stream OpenRead()Di2015NewLine    {Di2015NewLine        return File.OpenRead(_name);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic class FolderRepository : IRepositoryDi2015NewLine{Di2015NewLine    readonly private string _directory;Di2015NewLineDi2015NewLine    public FolderRepository(string directory)Di2015NewLine    {Di2015NewLine        _directory = directory;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region IRepository MembersDi2015NewLineDi2015NewLine    public IEnumerable<IReadableFile> Search(string pattern)Di2015NewLine    {Di2015NewLine        return Array.ConvertAll(Directory.GetFiles(_directory, pattern), name => new FolderFile(name));Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic class AssemblyFile : IReadableFileDi2015NewLine{Di2015NewLine    readonly private Assembly _assembly;Di2015NewLine    readonly private string _name;Di2015NewLineDi2015NewLine    public AssemblyFile(Assembly assembly, string name)Di2015NewLine    {Di2015NewLine        _assembly = assembly;Di2015NewLine        _name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region IReadableFile MembersDi2015NewLineDi2015NewLine    public Stream OpenRead()Di2015NewLine    {Di2015NewLine        return _assembly.GetManifestResourceStream(_name);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic class AssemblyRepository : IRepositoryDi2015NewLine{Di2015NewLine    readonly private Assembly _assembly;Di2015NewLineDi2015NewLine    public AssemblyRepository(Assembly assembly)Di2015NewLine    {Di2015NewLine        _assembly = assembly;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region IRepository MembersDi2015NewLineDi2015NewLine    public IEnumerable<IReadableFile> Search(string pattern)Di2015NewLine    {Di2015NewLine        return _assembly.GetManifestResourceNames().Where(name => name.Contains(pattern)).Select(name => new AssemblyFile(_assembly, name)).ToArray();Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
460234Di2015UniqueSeparatorUser u = User.FetchByID(2);Di2015NewLineu.Ulevel = ulevel;Di2015NewLineu.save();Di2015NewLine
460350Di2015UniqueSeparatorUpdateCustomer:Di2015NewLineUPDATE CUSTOMER SET NAME=@Name WHERE ID=@IDDi2015NewLineDi2015NewLineFindCustomer:Di2015NewLineSELECT NAME, ADDRESS FROM CUSTOMERDi2015NewLineWHERE ID=@IdDi2015NewLineDi2015NewLineetcDi2015NewLine
460350Di2015UniqueSeparatorDictionary<string,string>
460350Di2015UniqueSeparatorDictionary<string,SqlStatementHelper>
460390Di2015UniqueSeparatorObject.Equals
460390Di2015UniqueSeparatorAssert.AreEqual
460746Di2015UniqueSeparatorPage tmp = Page;Di2015NewLineSetupUserPermission.SetupUserRights(ref tmp, Convert.ToInt32(UserId));Di2015NewLinePage = tmp;Di2015NewLine
460824Di2015UniqueSeparatorWebRequest request = [...];Di2015NewLine// Do stuff with the request stream here (and dispose it)Di2015NewLineusing (WebResponse response = request.GetResponse())Di2015NewLine{Di2015NewLine    // Stuff with the responseDi2015NewLine}Di2015NewLine
460858Di2015UniqueSeparatorMyDerivedClass mdc = new MyDerivedClass();Di2015NewLineMyClass mc = new MyClass();Di2015NewLineObject omdc = mdc;Di2015NewLineObject omc = mc;Di2015NewLineDi2015NewLine// mc.Equals(mdc) - trueDi2015NewLine// mdc.Equals(mc) - true by calling the right overloadDi2015NewLine// omc.Equals(omdc) - trueDi2015NewLine// omdc.Equals(omc) - false, the "as" in MyDerivedClass will result in nullDi2015NewLine
460858Di2015UniqueSeparatorif (GetType() != other.GetType())Di2015NewLine{Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
460984Di2015UniqueSeparatorint bias = BitConverter.ToInt32((byte[])tzKey.GetValue("TZI"), 0);Di2015NewLineint daylightBias = BitConverter.ToInt32((byte[])tzKey.GetValue("TZI"), 8);Di2015NewLine
461105Di2015UniqueSeparatorreturn dateTimeValue.ToString("MM-dd-yyyy");Di2015NewLine
461155Di2015UniqueSeparatorVirtualMemorySize
461155Di2015UniqueSeparatorWorkingSet
461155Di2015UniqueSeparatorPrivateMemorySize
461155Di2015UniqueSeparatorlong workingSet = System.Diagnostics.Process.GetCurrentProcess().WorkingSet64;Di2015NewLine
461318Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    private Timer timer;Di2015NewLine    private int startPosX;Di2015NewLine    private int startPosY;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        // We want our window to be the top mostDi2015NewLine        TopMost = true;Di2015NewLine        // Pop doesn't need to be shown in task barDi2015NewLine        ShowInTaskbar = false;Di2015NewLine        // Create and run timer for animationDi2015NewLine        timer = new Timer();Di2015NewLine        timer.Interval = 50;Di2015NewLine        timer.Tick += timer_Tick;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnLoad(EventArgs e)Di2015NewLine    {Di2015NewLine        // Move window out of screenDi2015NewLine        startPosX = Screen.PrimaryScreen.WorkingArea.Width - Width;Di2015NewLine        startPosY = Screen.PrimaryScreen.WorkingArea.Height;Di2015NewLine        SetDesktopLocation(startPosX, startPosY);Di2015NewLine        base.OnLoad(e);Di2015NewLine        // Begin animationDi2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    void timer_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //Lift window by 5 pixelsDi2015NewLine        startPosY -= 5; Di2015NewLine        //If window is fully visible stop the timerDi2015NewLine        if (startPosY < Screen.PrimaryScreen.WorkingArea.Height - Height)Di2015NewLine            timer.Stop();Di2015NewLine        elseDi2015NewLine           SetDesktopLocation(startPosX, startPosY);Di2015NewLine    }Di2015NewLine}Di2015NewLine
461465Di2015UniqueSeparatorHashSet<int>
461465Di2015UniqueSeparatorList<Range>.Sort
461465Di2015UniqueSeparatorpublic class Range : IComparable<Range>Di2015NewLine{Di2015NewLine      private readonly int bottom; // Add properties for these if you wantDi2015NewLine      private readonly int top;Di2015NewLineDi2015NewLine      public Range(int bottom, int top)Di2015NewLine      {Di2015NewLine             this.bottom = bottom;Di2015NewLine             this.top = top;Di2015NewLine      }Di2015NewLineDi2015NewLine      public int CompareTo(Range other)Di2015NewLine      {Di2015NewLine             if (bottom < other.bottom && top < other.top)Di2015NewLine             {Di2015NewLine                   return -1;Di2015NewLine             }Di2015NewLine             if (bottom > other.bottom && top > other.top)Di2015NewLine             {Di2015NewLine                   return 1;Di2015NewLine             }Di2015NewLine             if (bottom == other.bottom && top == other.top)Di2015NewLine             {Di2015NewLine                   return 0;Di2015NewLine             }Di2015NewLine             throw new ArgumentException("Incomparable values (overlapping)");Di2015NewLine      }Di2015NewLineDi2015NewLine      /// <summary>Di2015NewLine      /// Returns 0 if value is in the specified range;Di2015NewLine      /// less than 0 if value is above the range;Di2015NewLine      /// greater than 0 if value is below the range.Di2015NewLine      /// </summary>Di2015NewLine      public int CompareTo(int value)Di2015NewLine      {Di2015NewLine             if (value < bottom)Di2015NewLine             {Di2015NewLine                   return 1;Di2015NewLine             }Di2015NewLine             if (value > top)Di2015NewLine             {Di2015NewLine                   return -1;Di2015NewLine             }Di2015NewLine             return 0;Di2015NewLine      }Di2015NewLine}Di2015NewLineDi2015NewLine// Just an existence searchDi2015NewLinepublic static bool BinarySearch(IList<Range> ranges, int value)Di2015NewLine{Di2015NewLine    int min = 0;Di2015NewLine    int max = ranges.Count-1;Di2015NewLineDi2015NewLine    while (min <= max)Di2015NewLine    {Di2015NewLine        int mid = (min + max) / 2;Di2015NewLine        int comparison = ranges[mid].CompareTo(value);Di2015NewLine        if (comparison == 0)Di2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        if (comparison < 0)Di2015NewLine        {Di2015NewLine            min = mid+1;Di2015NewLine        }Di2015NewLine        else if (comparison > 0)Di2015NewLine        {Di2015NewLine            max = mid-1;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
461482Di2015UniqueSeparatorprivate void InsertDataGridRow(DataGrid dataGrid, int index, TableCell tc)Di2015NewLine{Di2015NewLine\DataGridItem di = new DataGridItem(index, 0, ListItemType.Item);Di2015NewLineDi2015NewLine\// Check which columns are visibleDi2015NewLine\bool foundFirstVisibleColumn = false;Di2015NewLine\int numberOfVisibleColumns = 0;Di2015NewLine\foreach (DataGridColumn column in dataGrid.Columns)Di2015NewLine\{Di2015NewLine\\if (column.Visible == true)Di2015NewLine\\{Di2015NewLine\\\numberOfVisibleColumns++;Di2015NewLine\\\foundFirstVisibleColumn = true;Di2015NewLine\\}Di2015NewLineDi2015NewLine\\// Add dummy columns in the columns that are hiddenDi2015NewLine\\if (!foundFirstVisibleColumn)Di2015NewLine\\{Di2015NewLine\\\di.Cells.Add(new TableCell());Di2015NewLine\\}Di2015NewLineDi2015NewLine\}Di2015NewLineDi2015NewLine\tc.ColumnSpan = numberOfVisibleColumns;Di2015NewLine\di.Cells.Add(tc);Di2015NewLine\Table t = (Table)dataGrid.Controls[0];Di2015NewLine\t.Rows.Add(di);Di2015NewLine}Di2015NewLine
461482Di2015UniqueSeparatorprivate void MyDataGrid_ItemCreated(object sender, DataGridItemEventArgs e)Di2015NewLine{Di2015NewLine\// This method will create a subheading row if neededDi2015NewLine\if (e.Item.ItemType == ListItemType.AlternatingItem || e.Item.ItemType == ListItemType.Item)Di2015NewLine\{Di2015NewLine\\TableCell tc = new TableCell();Di2015NewLine\\tc.Controls.Add(new LiteralControl("foo"));Di2015NewLineDi2015NewLine\\InsertDataGridRow(Di2015NewLine            (DataGrid)sender,Di2015NewLine            e.Item.ItemIndex + 1,Di2015NewLine            tc);Di2015NewLine\}      Di2015NewLineDi2015NewLine}Di2015NewLine
461483Di2015UniqueSeparatorthis.dataGridView1.GridColor = Color.BlueViolet;Di2015NewLine
461554Di2015UniqueSeparatorpublic CustomClass TranslateME(XElement source)Di2015NewLine{Di2015NewLine  CustomClass result = new CustomClass();Di2015NewLine  result.Words = (int) source.Attribute("Words");Di2015NewLine  result.Score = (int) source.Attribute("Score");Di2015NewLineDi2015NewLine  XAttribute highScore = source.Attribute("HighScore");Di2015NewLine  result.HighScore = (highScore == null) ? 0 : (int) highScore;Di2015NewLineDi2015NewLine  result.NMs = sourceDi2015NewLine    .Elements("NM")Di2015NewLine    .Select(x => x.Value)Di2015NewLine    .ToList();Di2015NewLineDi2015NewLine  result.IE = sourceDi2015NewLine    .Element("IE").Value;Di2015NewLineDi2015NewLine  result.SubEntries = sourceDi2015NewLine    .Elements("M1")Di2015NewLine    .Select(x => TranslateM1(x))Di2015NewLine    .ToList();Di2015NewLineDi2015NewLine  return result;Di2015NewLine}Di2015NewLine
461656Di2015UniqueSeparator    [XmlElement]Di2015NewLine    [System.ComponentModel.DefaultValueAttribute(0.0)]Di2015NewLine    public double AverageSpeedDi2015NewLine    { ... }Di2015NewLine
461656Di2015UniqueSeparatorprivate double averageSpeed = 2.0;Di2015NewLine
461766Di2015UniqueSeparator// IPv4Di2015NewLineint intAddress = BitConverter.ToInt32(IPAddress.Parse(address).GetAddressBytes(), 0);Di2015NewLinestring ipAddress = new IPAddress(BitConverter.GetBytes(intAddress)).ToString();Di2015NewLine
461786Di2015UniqueSeparatorXDocument doc = XDocument.Load("file.xml");Di2015NewLinevar val = docDi2015NewLine    .Descendants("entity")Di2015NewLine    .Where(p => p.Attribute("ID").Value == "1")Di2015NewLine    .Descendants("PropTest")Di2015NewLine    .FirstOrDefault();Di2015NewLineif (val != null)Di2015NewLine    Console.WriteLine(val.Value);Di2015NewLine
461786Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<application>Di2015NewLine    <parameters>Di2015NewLine        <param></param>Di2015NewLine        <param></param>Di2015NewLine    </parameters>Di2015NewLine    <generation>Di2015NewLine        <entities>Di2015NewLine            <entity ID="1">Di2015NewLine                <PropTest>Test</PropTest>Di2015NewLine            </entity>Di2015NewLine            <entity ID="2">Another Test</entity>Di2015NewLine        </entities>Di2015NewLine    </generation>Di2015NewLine</application>Di2015NewLine
461936Di2015UniqueSeparatorFunction<ISomeInterface> creationDelegate;Di2015NewLineif (selection == 1)Di2015NewLine    creationDelegate = () => CreateNew<SomeClass>;Di2015NewLineelseDi2015NewLine    creationDelegate = () => CreateNew<SomeClass2>;Di2015NewLineISomeInterface inter = creationDelegate();Di2015NewLineDi2015NewLine// ...Di2015NewLineISomeInterface inter2 = creationDelegate();Di2015NewLine
462031Di2015UniqueSeparatorif (LicenseManager.UsageMode != LicenseUsageMode.Designtime)Di2015NewLine{Di2015NewLine    // Do your database/IO/remote callDi2015NewLine}Di2015NewLine
462096Di2015UniqueSeparatorUID
462096Di2015UniqueSeparatorSEQUENCE
462096Di2015UniqueSeparatorCREATED
462096Di2015UniqueSeparatorLAST-MODIFIED
462096Di2015UniqueSeparatorDTSTAMP
462096Di2015UniqueSeparatormultipart/alternative
462096Di2015UniqueSeparatortext/html
462096Di2015UniqueSeparatortext/calendar; method=REQUEST
462096Di2015UniqueSeparatormethod
462096Di2015UniqueSeparatorcharset
462096Di2015UniqueSeparatortext/calendar
462235Di2015UniqueSeparatorout
462301Di2015UniqueSeparatorImports System.DrawingDi2015NewLineModule Module1Di2015NewLineDi2015NewLine    Sub Main()    Di2015NewLine        Dim filePath As String =  "C:\\myfile.exe"  Di2015NewLine        Dim TheIcon As Icon = IconFromFilePath(filePath)  Di2015NewLineDi2015NewLine        If TheIcon IsNot Nothing Then    Di2015NewLine            ''#Save it to disk, or do whatever you want with it.Di2015NewLine            Using stream As New System.IO.FileStream("c:\\myfile.ico", IO.FileMode.CreateNew)Di2015NewLine                TheIcon.Save(stream)          Di2015NewLine            End UsingDi2015NewLine        End IfDi2015NewLine    End SubDi2015NewLineDi2015NewLine    Public Function IconFromFilePath(filePath As String) As IconDi2015NewLine        Dim result As Icon = NothingDi2015NewLine        TryDi2015NewLine            result = Icon.ExtractAssociatedIcon(filePath)Di2015NewLine        Catch ''# swallow and return nothing. You could supply a default Icon here as wellDi2015NewLine        End TryDi2015NewLine        Return resultDi2015NewLine    End FunctionDi2015NewLineEnd ModuleDi2015NewLine
462404Di2015UniqueSeparator// using System.Diagnostics;Di2015NewLineDi2015NewLineclass ShutdownDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Windows restartDi2015NewLine    /// </summary>Di2015NewLine    public static void Restart()Di2015NewLine    {Di2015NewLine        StartShutDown("-f -r -t 5");Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Log off.Di2015NewLine    /// </summary>Di2015NewLine    public static void LogOff()Di2015NewLine    {Di2015NewLine        StartShutDown("-l");Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    ///  Shutting Down Windows Di2015NewLine    /// </summary>Di2015NewLine    public static void Shut()Di2015NewLine    {Di2015NewLine        StartShutDown("-f -s -t 5");Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void StartShutDown(string param)Di2015NewLine    {Di2015NewLine        ProcessStartInfo proc = new ProcessStartInfo();Di2015NewLine        proc.FileName = "cmd";Di2015NewLine        proc.WindowStyle = ProcessWindowStyle.Hidden;Di2015NewLine        proc.Arguments = "/C shutdown " + param;Di2015NewLine        Process.Start(proc);Di2015NewLine    }Di2015NewLine}Di2015NewLine
462499Di2015UniqueSeparator<UserControl x:Class="WpfApplication1.SOAnswerTest"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    Height="300">Di2015NewLine    <Grid>Di2015NewLine    \<Grid.ColumnDefinitions>Di2015NewLine    \\<ColumnDefinition Name="LeftSideMenu" Width="100"/>Di2015NewLine    \\<ColumnDefinition Name="Middle" Width="*"/>Di2015NewLine    \\<ColumnDefinition Name="RightSideMenu" Width="90"/>Di2015NewLine    \</Grid.ColumnDefinitions>Di2015NewLine    \<TextBlock Grid.Column="0">a</TextBlock>Di2015NewLine    \<TextBlock Grid.Column="1">b</TextBlock>Di2015NewLine    \<TextBlock Grid.Column="2">c</TextBlock>Di2015NewLine    </Grid>Di2015NewLine</UserControl>Di2015NewLine
462499Di2015UniqueSeparator<Window x:Class="WpfApplication1.Window1"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:local="clr-namespace:WpfApplication1"Di2015NewLine    Title="Window1" Height="300" Width="415">Di2015NewLine    <Grid>Di2015NewLineDi2015NewLine    \<local:SOAnswerTest Grid.Column="0" Grid.Row="5" Grid.ColumnSpan="2"/>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
462521Di2015UniqueSeparatorGetHashCode
462521Di2015UniqueSeparatorGetHashCode
462521Di2015UniqueSeparatorGetHashCode
462521Di2015UniqueSeparatorGetHashCode
462725Di2015UniqueSeparatorIComparable<T>
462725Di2015UniqueSeparatorpublic static int MaxIndex<T>(this IEnumerable<T> sequence)Di2015NewLine    where T : IComparable<T>Di2015NewLine{Di2015NewLine    int maxIndex = -1;Di2015NewLine    T maxValue = default(T); // Immediately overwritten anywayDi2015NewLineDi2015NewLine    int index = 0;Di2015NewLine    foreach (T value in sequence)Di2015NewLine    {Di2015NewLine        if (value.CompareTo(maxValue) > 0 || maxIndex == -1)Di2015NewLine        {Di2015NewLine             maxIndex = index;Di2015NewLine             maxValue = value;Di2015NewLine        }Di2015NewLine        index++;Di2015NewLine    }Di2015NewLine    return maxIndex;Di2015NewLine}Di2015NewLine
462725Di2015UniqueSeparatorint maxIndex = -1;Di2015NewLineint index=0;Di2015NewLinedouble maxValue = 0;Di2015NewLineDi2015NewLineint urgh = sequence.Select(value => {Di2015NewLine    if (maxIndex == -1 || value > maxValue)Di2015NewLine    {Di2015NewLine        maxIndex = index;Di2015NewLine        maxValue = value;Di2015NewLine    }Di2015NewLine    index++;Di2015NewLine    return maxIndex;Di2015NewLine }).Last();Di2015NewLine
462791Di2015UniqueSeparatordivTag.SetValue(string.Empty);Di2015NewLine
462828Di2015UniqueSeparatorList<string> list = new List<string>() { "single value" };Di2015NewLine
462828Di2015UniqueSeparatorList<string> list = new List<string> { "single value" };Di2015NewLine
462828Di2015UniqueSeparatorList<string> list = new List<string> { "value1", "value2", ... };Di2015NewLine
462910Di2015UniqueSeparatorList<List<int>> l = new List<List<int>>();Di2015NewLineDi2015NewLinel.Add(new List<int> { 1, 2, 3, 4, 5, 6});Di2015NewLinel.Add(new List<int> { 4, 5, 6, 7, 8, 9 });Di2015NewLinel.Add(new List<int> { 8, 9, 10, 11, 12, 13 });Di2015NewLineDi2015NewLinevar result = (from e in lDi2015NewLine              from e2 in eDi2015NewLine              select e2).Distinct();Di2015NewLine
462910Di2015UniqueSeparatorvar result2 = l.SelectMany(i => i).Distinct();Di2015NewLine
463026Di2015UniqueSeparator</p>Di2015NewLineDi2015NewLine<pre><code>if (System.Diagnostics.Debugger.IsAttached)Di2015NewLine{Di2015NewLine    License L = LicenseManager.Validate(typeof(MyControl), this);Di2015NewLine}Di2015NewLine
463078Di2015UniqueSeparatorusing (Resource resource = GetResource())Di2015NewLine{Di2015NewLine    /* Do something */Di2015NewLine}Di2015NewLine
463161Di2015UniqueSeparatorBoolean isValueBig = ( value > 100  ) ? true : false;Di2015NewLineDi2015NewLineDi2015NewLineBoolean isValueBig;Di2015NewLineDi2015NewLineif(  value > 100 ) { Di2015NewLine      isValueBig = true;Di2015NewLine} else { Di2015NewLine     isValueBig = false;Di2015NewLine}Di2015NewLine
463195Di2015UniqueSeparator<system.net>Di2015NewLine    <mailSettings>Di2015NewLine      <smtp from="you@yourdomain.com">Di2015NewLine        <network host="SMTP SERVER ADDRESS" port="25"Di2015NewLine         userName="USERNAME" password="PASSWORD">Di2015NewLine      </smtp>Di2015NewLine    </mailSettings>Di2015NewLine  </system.net>Di2015NewLine
463205Di2015UniqueSeparator<ajax:UpdatePanel ...>Di2015NewLineDi2015NewLine    <ContentTemplate>Di2015NewLineDi2015NewLine        <asp:PlaceHolder ...>Di2015NewLineDi2015NewLine    </ContentTemplate>Di2015NewLineDi2015NewLine</ajax:UpdatePanel>Di2015NewLine
463335Di2015UniqueSeparatorprivate void textBox1_KeyPress(object sender, KeyPressEventArgs e)Di2015NewLine{Di2015NewLine    if (!char.IsControl(e.KeyChar) Di2015NewLine        && !char.IsDigit(e.KeyChar) Di2015NewLine        && e.KeyChar != '.')Di2015NewLine    {Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    // only allow one decimal pointDi2015NewLine    if (e.KeyChar == '.' Di2015NewLine        && (sender as TextBox).Text.IndexOf('.') > -1)Di2015NewLine    {Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
463339Di2015UniqueSeparator|[\\r\\n]
463339Di2015UniqueSeparator[^*]
463339Di2015UniqueSeparator[^*]
463339Di2015UniqueSeparator[^*]+
463339Di2015UniqueSeparator(?>[^*]+)
463339Di2015UniqueSeparator\\*+[^*/]
463339Di2015UniqueSeparator\\*+/
463339Di2015UniqueSeparator/\\*(?>(?:(?>[^*]+)|\\*(?!/))*)\\*/Di2015NewLine
463366Di2015UniqueSeparatorLoadFrom
463366Di2015UniqueSeparatorGetType
463366Di2015UniqueSeparatorAssembly assembly = Assembly.LoadFrom("c:\\ProjectX\\bin\\release\\ProjectX.dll");Di2015NewLineType type = assembly.GetType("NamespaceX.ProjectX.ClassX");Di2015NewLine
463366Di2015UniqueSeparatorLoad
463366Di2015UniqueSeparatorAssembly assembly = Assembly.Load("ProjectX.dll");Di2015NewLineType type = assembly.GetType("NamespaceX.ProjectX.ClassX");Di2015NewLine
463509Di2015UniqueSeparatorregex = @"(Key1|Key2|Key3|LastName|FirstName|Etc):"Di2015NewLine
463509Di2015UniqueSeparatorstring[] keys = {"Key1", "Key2", "Key3"};Di2015NewLinestring source = "Key1:Value1Key2: ValueAnd A: To Test Key3:   Something";Di2015NewLineFindKeys(keys, source);Di2015NewLineDi2015NewLineprivate void FindKeys(IEnumerable<string> keywords, string source) {Di2015NewLine    var found = new Dictionary<string, string>(10);Di2015NewLine    var keys = string.Join("|", keywords.ToArray());Di2015NewLine    var matches = Regex.Matches(source, @"(?<key>" + keys + "):",Di2015NewLine                          RegexOptions.IgnoreCase);            Di2015NewLineDi2015NewLine    foreach (Match m in matches) {Di2015NewLine        var key = m.Groups["key"].ToString();Di2015NewLine        var start = m.Index + m.Length;Di2015NewLine        var nx = m.NextMatch();Di2015NewLine        var end = (nx.Success ? nx.Index : source.Length);Di2015NewLine        found.Add(key, source.Substring(start, end - start));Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach (var n in found) {Di2015NewLine        Console.WriteLine("Key={0}, Value={1}", n.Key, n.Value);Di2015NewLine    }                            Di2015NewLine}Di2015NewLine
463509Di2015UniqueSeparatorKey=Key1, Value=Value1Di2015NewLineKey=Key2, Value= ValueAnd A: To Test Di2015NewLineKey=Key3, Value=   SomethingDi2015NewLine
463668Di2015UniqueSeparatorTimeSpan t = TimeSpan.FromSeconds( secs );Di2015NewLineDi2015NewLinestring answer = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms", Di2015NewLine    \\\t.Hours, Di2015NewLine    \\\t.Minutes, Di2015NewLine    \\\t.Seconds, Di2015NewLine    \\\t.Milliseconds);Di2015NewLine
463693Di2015UniqueSeparator  GC.GetTotalMemory();Di2015NewLine  Process.PagedMemorySize64();Di2015NewLine
463695Di2015UniqueSeparatorConsole.WriteLine(i + " = " + text[i % 5])Di2015NewLine
463696Di2015UniqueSeparator<asp:TemplateField HeaderText="Cert">Di2015NewLine    <ItemStyle HorizontalAlign="Center" />Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:CheckBox ID="chkCertified" runat="server" Checked='<%# Eval("IsChecked") %>' />Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
464125Di2015UniqueSeparator    public static string Verify(string valueToBind, object dataSource)Di2015NewLine    {Di2015NewLine        ////what is the correct way to convert from objectDi2015NewLine        //BaseDataSource baseInstance = dataSource as BaseDataSource;Di2015NewLine        Type type = dataSource.GetType();Di2015NewLine        MethodInfo select = type.GetMethod("Select");Di2015NewLine        PropertyInfo parameters = type.GetProperty("Parameters");Di2015NewLine        PropertyInfo parameterGetter = null;Di2015NewLine        object parametersInstance = null;Di2015NewLine        if (parameters != null)Di2015NewLine        {Di2015NewLine            parametersInstance = parameters.GetValue(dataSource, null);Di2015NewLine            type = parametersInstance.GetType();Di2015NewLine            parameterGetter = type.GetProperty("Item");Di2015NewLine        }Di2015NewLineDi2015NewLine        //if baseInstance != null)Di2015NewLine        if (select != null && parameters != null && parameterGetter != null)Di2015NewLine        {Di2015NewLine                if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) return valueToBind;Di2015NewLine                CustomParameter p = parameterGetter.GetValue(parametersInstance, new object[] {"WhereClause" }) as CustomParameter;Di2015NewLineDi2015NewLine                if (p != null)Di2015NewLine                {Di2015NewLine                        p.Value = "IsActive=true OR Id=" + valueToBind;Di2015NewLine                        select.Invoke(dataSource, null);Di2015NewLine                        return valueToBind;Di2015NewLine                }Di2015NewLine        }Di2015NewLineDi2015NewLine        return string.Empty;Di2015NewLine    }Di2015NewLine
464229Di2015UniqueSeparatorHtml.Encode(ViewData.Eval("Field"))Di2015NewLine
464371Di2015UniqueSeparatorBackgroundWorker
464411Di2015UniqueSeparatorPrivate Function isEditMode() As BooleanDi2015NewLine    isEditMode = FalseDi2015NewLine    TryDi2015NewLine        oExcel.GoTo("###")Di2015NewLine    Catch Ex As ExceptionDi2015NewLine       ' Either returns "Reference is not valid." Di2015NewLine       ' or "Exception from HRESULT: 0x800A03EC"Di2015NewLine       If ex.Message.StartsWith("Exception") then isEditMode  = TrueDi2015NewLine    End Try \Di2015NewLineEnd FunctionDi2015NewLine
464506Di2015UniqueSeparatorbool exists;Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    // ANSI SQL way.  Works in PostgreSQL, MSSQL, MySQL.  Di2015NewLine    var cmd = new OdbcCommand(Di2015NewLine      "select case when exists((select * from information_schema.tables where table_name = '" + tableName + "')) then 1 else 0 end");Di2015NewLineDi2015NewLine    exists = (int)cmd.ExecuteScalar() == 1;Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // Other RDBMS.  Graceful degradationDi2015NewLine        exists = true;Di2015NewLine        var cmdOthers = new OdbcCommand("select 1 from " + tableName + " where 1 = 0");Di2015NewLine        cmdOthers.ExecuteNonQuery();Di2015NewLine    }Di2015NewLine    catchDi2015NewLine    {Di2015NewLine        exists = false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
464576Di2015UniqueSeparatorList<T>
464576Di2015UniqueSeparatorvar data = mapper.QueryForList<T>(statement, parameters);Di2015NewLinevar list = data as List<T> ?? new List<T>(data);Di2015NewLine
464576Di2015UniqueSeparatorXmlSerializer
464576Di2015UniqueSeparatorDataContractSerializer
464851Di2015UniqueSeparatorList<T>
464851Di2015UniqueSeparatorDictionary<TKey,TValue>
464861Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        foreach (string arg in args)Di2015NewLine        {Di2015NewLine            Console.WriteLine(arg);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
464861Di2015UniqueSeparator>test.exe first "second arg" thirdDi2015NewLinefirstDi2015NewLinesecond argDi2015NewLinethirdDi2015NewLine
464917Di2015UniqueSeparatorusing (WaveFileReader reader = new WaveFileReader(inputFileName))Di2015NewLine{Di2015NewLine    using (WaveStream convertedStream = Di2015NewLine        WaveFormatConversionStream.CreatePcmStream(reader))Di2015NewLine    {Di2015NewLine        WaveFileWriter.CreateWaveFile(outputFileName, convertedStream);Di2015NewLine    }Di2015NewLine}Di2015NewLine
464928Di2015UniqueSeparatorpublic string ShortCodeDi2015NewLine    {Di2015NewLine        get { return Distance + Carriageway; }Di2015NewLine    }Di2015NewLineDi2015NewLineprivate void UpdateMapRoadPointList(List<GeographicAddress> plstMapRoadPointList)Di2015NewLine    {Di2015NewLine        cboFind.DataSource = plstMapRoadPointList;Di2015NewLine        cboFind.DisplayMember = "ShortCode";Di2015NewLine    }Di2015NewLine
464928Di2015UniqueSeparatorShortCode
464928Di2015UniqueSeparatorGeographicAddress.ToString()
464971Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    [Description("Auto-implemented property")]Di2015NewLine    public static string Foo { get; set; }  Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var property = typeof(Test).GetProperty("Foo");Di2015NewLine        var attributes = property.GetCustomAttributesDi2015NewLine                (typeof(DescriptionAttribute), false);Di2015NewLineDi2015NewLine        foreach (DescriptionAttribute description in attributes)Di2015NewLine        {Di2015NewLine            Console.WriteLine(description.Description);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
464975Di2015UniqueSeparatorauthentication mapClientCertificateToWindowsAccount="true" Di2015NewLine
464975Di2015UniqueSeparatorDim b As WSHttpBinding = New WSHttpBinding()Di2015NewLineDi2015NewLineb.Security.Message.ClientCredentialType = MessageCredentialType.CertificateDi2015NewLine
464975Di2015UniqueSeparatorDim httpUri As Uri = New Uri("http://localhost/Calculator")Di2015NewLineDi2015NewLineDim sh As ServiceHost = New ServiceHost(GetType(HelloService), httpUri)Di2015NewLineDi2015NewLinesh.Credentials.ClientCertificate.Authentication.MapClientCertificateToWindowsAccount = TrueDi2015NewLine
465031Di2015UniqueSeparatorDataContractSerializer
465199Di2015UniqueSeparatorImage playbutton;Di2015NewLinetryDi2015NewLine{Di2015NewLine    Playbutton = Image.FromFile(/*somekindofpath*/);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    returnDi2015NewLine}Di2015NewLineDi2015NewLineImage frame;Di2015NewLinetryDi2015NewLine{Di2015NewLine    frame = Image.FromFile(/*somekindofpath*/);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    returnDi2015NewLine}Di2015NewLineDi2015NewLineusing (frame)Di2015NewLine{Di2015NewLine    using (var bitmap = new Bitmap(width, height))Di2015NewLine    {Di2015NewLine    \using (var canvas = Graphics.FromImage(bitmap))Di2015NewLine    \{Di2015NewLine    \\canvas.InterpolationMode = InterpolationMode.HighQualityBicubic;Di2015NewLine    \\canvas.DrawImage(Frame, new Rectangle(0, 0, width, height), new Rectangle(0, 0, Frame.Width, Frame.Height), GraphicsUnit.Pixel);Di2015NewLine    \\canvas.DrawImage(Playbutton, (bitmap.Width / 2) - (playbutton_width / 2 + 5), (bitmap.Height / 2) - (playbutton_height / 2 + 5));Di2015NewLine    \\canvas.Save();Di2015NewLine    \}Di2015NewLine    \tryDi2015NewLine    \{Di2015NewLine    \\bitmap.Save(/*somekindofpath*/, ImageFormat.Jpeg);Di2015NewLine    \}Di2015NewLine    \catch (Exception ex) { }Di2015NewLine    }Di2015NewLine}Di2015NewLine
465281Di2015UniqueSeparatorvar groupByYear = customers.GroupBy(customer => customer.PurchaseDate.Year);Di2015NewLineDi2015NewLineforeach (var group in groupByYear)Di2015NewLine{Di2015NewLine    Console.WriteLine("Year: {0}", group.Key);Di2015NewLine    foreach (var customer in group)Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0}: {1}", customer.ID, customer.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
465281Di2015UniqueSeparatorvar groupByYearMonth = customers.GroupBy(customer => Di2015NewLine     new DateTime(customer.PurchaseDate.Year, customer.PurchaseDate.Month, 1));Di2015NewLineforeach (var group in groupByYear)Di2015NewLine{Di2015NewLine    Console.WriteLine("Year/month: {0}/{1}", group.Key.Year, group.Key.Month);Di2015NewLine    foreach (var customer in group)Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0}: {1}", customer.ID, customer.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
465281Di2015UniqueSeparatorvar ordered = customers.OrderBy(customer => customer.PurchaseDate.Year);Di2015NewLine
465353Di2015UniqueSeparatorpublic interface IFooDi2015NewLine{Di2015NewLine    event EventHandler Boo;Di2015NewLine}Di2015NewLineDi2015NewLineclass Foo : IFooDi2015NewLine{Di2015NewLine    public event EventHandler Boo;Di2015NewLine    public void RaiseBoo()Di2015NewLine    {Di2015NewLine        if (Boo != null)Di2015NewLine            Boo(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineprivate void TestClass_Boo(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    throw new NotImplementedException();Di2015NewLine}Di2015NewLineDi2015NewLine    ...Di2015NewLineDi2015NewLine   object o = new Foo();Di2015NewLine   ((IFoo)o).Boo += TestClass_Boo;Di2015NewLine   ((Foo)o).RaiseBoo();Di2015NewLine
465648Di2015UniqueSeparatorparameters => codeDi2015NewLine
465648Di2015UniqueSeparatorx => x * 2Di2015NewLine
465676Di2015UniqueSeparatorMicrosoft.Office.Interop.Excel.dll
465676Di2015UniqueSeparatorApplication excel = new Application();Di2015NewLineWorkbook wb = excel.Workbooks.Open(path);Di2015NewLine
465676Di2015UniqueSeparatorMissing.Value
465749Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        dgv.DataSource = new testData[] {Di2015NewLine            new testData{ CheckBox = true, Name = "One" },Di2015NewLine            new testData{ CheckBox = true, Name = "Two" },Di2015NewLine            new testData{ CheckBox = false, Name = "Three" },Di2015NewLine            new testData{ CheckBox = false, Name = "Four" }            Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dgv_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.ColumnIndex == 0) // It's the Checkbox ColumnDi2015NewLine        {Di2015NewLine            DataGridViewRow dgvr = dgv.Rows[e.RowIndex];Di2015NewLine            MessageBox.Show(String.Format("Row {0} was cliked ({1})", (e.RowIndex + 1).ToString(), Di2015NewLine                dgvr.Cells[1].Value));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class testDataDi2015NewLine{Di2015NewLine    public Boolean CheckBox { get; set; }Di2015NewLine    public String Name { get; set; }Di2015NewLine}Di2015NewLine
465891Di2015UniqueSeparatorpublic class BaseUser {Di2015NewLineDi2015NewLine    public BaseUser() {}Di2015NewLineDi2015NewLine    public bool login() {Di2015NewLineDi2015NewLine        return false;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
465891Di2015UniqueSeparatorpublic class User : BaseUser {}Di2015NewLine
465891Di2015UniqueSeparatorUser u = new User();Di2015NewLineu.login();Di2015NewLine
466065Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLineclass FooDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        var type = typeof(Foo);Di2015NewLine        var reflectionLoadType = Assembly.ReflectionOnlyLoad("ConsoleApplication1").GetType("Foo");Di2015NewLine        Console.WriteLine(type == reflectionLoadType);  //falseDi2015NewLine        Console.WriteLine(type.Equals(reflectionLoadType));  //falseDi2015NewLineDi2015NewLine        Console.WriteLine("DONE");Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLine
466074Di2015UniqueSeparatorpublic double IPAddressToNumber(string IPaddress)Di2015NewLine    {Di2015NewLine        int i;Di2015NewLine        string [] arrDec;Di2015NewLine        double num = 0;Di2015NewLine        if (IPaddress == "")Di2015NewLine        {Di2015NewLine            return 0;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            arrDec = IPaddress.Split('.');Di2015NewLine            for(i = arrDec.Length - 1; i >= 0 ; i = i -1)Di2015NewLine                {Di2015NewLine                    num += ((int.Parse(arrDec[i])%256) * Math.Pow(256 ,(3 - i )));Di2015NewLine                }Di2015NewLine            return num;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
466137Di2015UniqueSeparatorlet rec FindMaxInList list = Di2015NewLine   match list withDi2015NewLine   | [x] -> xDi2015NewLine   | h::t -> max h (FindMaxInList t)Di2015NewLine   | [] -> failwith "empty list"Di2015NewLineDi2015NewLinelet rec FindMax ( array : ResizeArray<int>) =Di2015NewLine   let list = List.ofSeq(array)Di2015NewLine   FindMaxInList listDi2015NewLine
466137Di2015UniqueSeparator    List<int> myInts = new List<int> { 5, 6, 7 };Di2015NewLine    int max = FSModule.FindMax(myInts);Di2015NewLine
466194Di2015UniqueSeparatorHttpProfile profile = Profile.GetProfile("Fred");Di2015NewLine
466194Di2015UniqueSeparatorvar allUsers = Membership.GetAllUsers();Di2015NewLineforeach (MembershipUser user in allUsers)Di2015NewLine{Di2015NewLine    var prof = ProfileBase.Create(user.UserName, true);Di2015NewLine}Di2015NewLine
466388Di2015UniqueSeparator        public string Process(BaseClass bc, string propertyName)Di2015NewLine        {Di2015NewLine            PropertyInfo property =  bc.GetType().GetProperty(propertyName);Di2015NewLine            return (string)property.GetValue(bc, null);Di2015NewLine        }Di2015NewLine
466414Di2015UniqueSeparatorpublic static void AddTemplate(Template template)Di2015NewLine\{Di2015NewLine\\using (TheEntities context = new TheEntities())Di2015NewLine\\{Di2015NewLine\\\if (template.TemplateType.EntityKey != null)Di2015NewLine\\\{Di2015NewLine\\\\TemplateType type = template.TemplateType;Di2015NewLine\\\\template.TemplateType = null;Di2015NewLine\\\\context.AttachTo("TemplateTypes", type);Di2015NewLine\\\\template.TemplateType = type;Di2015NewLine\\\}Di2015NewLineDi2015NewLineDi2015NewLine\\\context.AddToTemplates(template);Di2015NewLine\\\context.SaveChanges();Di2015NewLineDi2015NewLine\\\context.RemoveTracking(template);Di2015NewLine\\}Di2015NewLine\}Di2015NewLine
466434Di2015UniqueSeparator  // power seriesDi2015NewLine  int iteration = 27; // Adjust this to modify the precisionDi2015NewLine  decimal result = 1; Di2015NewLine  while (iteration > 0)Di2015NewLine  {Di2015NewLine    fatorial = Factorial(iteration);Di2015NewLine    result += (Pow(power, iteration) / fatorial);Di2015NewLine    iteration--;Di2015NewLine  }Di2015NewLineDi2015NewLine  // natural logarithm seriesDi2015NewLine  decimal aux = (value - 1);Di2015NewLine  decimal result = 0;Di2015NewLine  while (iteration > 0)Di2015NewLine  {Di2015NewLine    result += Pow(aux, iteration) / iteration;Di2015NewLine    iteration--;Di2015NewLine  }Di2015NewLine
466443Di2015UniqueSeparatorDataLoadOptions dlo = new DataLoadOptions();Di2015NewLine//bring in the Regions for each CountryDi2015NewLinedlo.LoadWith<ec_Country>(c => c.Regions);Di2015NewLine//bring in the localizationsDi2015NewLinedlo.AssociateWith<ec_Country>(c => c.LocalizationsDi2015NewLine  .Where(loc => loc.StatusID == 4 && loc.WebSiteID == this.webSiteID)Di2015NewLine);Di2015NewLinedlo.AssociateWith<ec_Region>(r => r.Localizations);Di2015NewLineDi2015NewLine//set up the dataloadoptions to eagerly load the above.Di2015NewLinedataContext.DataLoadOptions = dlo;Di2015NewLineDi2015NewLine//Pull countries and all eagerly loaded data into memory.Di2015NewLineList<ec_Country> queryResult = query.ToList();Di2015NewLineDi2015NewLine//further map these data types to business typesDi2015NewLineList<Country> result = queryResultDi2015NewLine  .Select(c => ToCountry(c))Di2015NewLine  .ToList();Di2015NewLine
466443Di2015UniqueSeparatorpublic Country ToCountry(ec_Country c)Di2015NewLine{Di2015NewLine  return new Country()Di2015NewLine  {Di2015NewLine    Name = c.Name,Di2015NewLine    Text = c.Localizations.Single().Text,Di2015NewLine    Regions = c.Regions().Select(r => ToRegion(r)).ToList()Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic Region ToRegion(ec_Region r)Di2015NewLine{Di2015NewLine  return new Region()Di2015NewLine  {Di2015NewLine    Name = r.Name,Di2015NewLine    Text = r.Localizations.Single().Text,Di2015NewLine    Cities = r.Cities.Select(city => ToCity(city)).ToLazyList();Di2015NewLine  }Di2015NewLine}Di2015NewLine
466503Di2015UniqueSeparatorUser
466503Di2015UniqueSeparatorHttpContext.Current.Request.IsAuthenticated
466529Di2015UniqueSeparatortryDi2015NewLine{    Di2015NewLine    ServReturnType obj = ServProxyClass(int i, int k);Di2015NewLine}Di2015NewLinecatch(SoapException ex)Di2015NewLine{Di2015NewLine    //Serialize and analyze the fault message from the exception to obtain more info.Di2015NewLine    DoSomethingWithTheInfo();Di2015NewLine}Di2015NewLinecatch(Exception ex)Di2015NewLine{Di2015NewLine    LogTheExceptionSoThatLaterYouKnowWhatHappened(ex);Di2015NewLine    SayToTheUserThatSomethingTerriblyWrongHappened();Di2015NewLine}Di2015NewLine
466539Di2015UniqueSeparatorExpect
466539Di2015UniqueSeparatorExpect.Call(someMethod()).Repeat.Twice()
466539Di2015UniqueSeparatorsomeMethod()
466574Di2015UniqueSeparatorProperties.Settings.Default.OU_HomeOffice
466633Di2015UniqueSeparatorstring iSomeView.DescriptionDi2015NewLine{Di2015NewLine    get { return txtDescription.Text ; }Di2015NewLine    set { txtDescription.Text = value; }Di2015NewLine}Di2015NewLine
466633Di2015UniqueSeparatorPerson iSomeView.PersonDi2015NewLine{Di2015NewLine    get { return new Person { Name = txtName.Text, Phone = txtPhone.Text }; }Di2015NewLine    set { txtName = value.Name; txtPhone.Text = value.Phone; }Di2015NewLine}Di2015NewLine
466887Di2015UniqueSeparatorMemberInfo
466887Di2015UniqueSeparatordynamic
466887Di2015UniqueSeparatorComponentModel
466887Di2015UniqueSeparatorTypeDescriptor
466887Di2015UniqueSeparatorCompile
466887Di2015UniqueSeparatorDynamicInvoke
466887Di2015UniqueSeparatorInvoke
466915Di2015UniqueSeparatorXElement Configuration = new XElement("Collection",Di2015NewLine      collection.Select(c=>new XElement("Element", c)));Di2015NewLine
466974Di2015UniqueSeparatorpublic static class ListsDi2015NewLine{Di2015NewLine    public static List<T> RepeatedDefault<T>(int count)Di2015NewLine    {Di2015NewLine        return Repeated(default(T), count);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static List<T> Repeated<T>(T value, int count)Di2015NewLine    {Di2015NewLine        List<T> ret = new List<T>(count);Di2015NewLine        ret.AddRange(Enumerable.Repeat(value, count));Di2015NewLine        return ret;Di2015NewLine    }Di2015NewLine}Di2015NewLine
466986Di2015UniqueSeparatorbyte[] bytes = File.ReadAllBytes(physicalPath);Di2015NewLine// TODO: Convert unicode files to specified encoding. For now, assumingDi2015NewLine// files are either ASCII or UTF8Di2015NewLine
467061Di2015UniqueSeparator<div runat="server" id="myDiv">Di2015NewLine</div>Di2015NewLine
467061Di2015UniqueSeparatormyDiv.InnerHtml = "your html here";Di2015NewLine
467061Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    Sys.Application.add_load(MyLoad);Di2015NewLine    function MyLoad(sender) {Di2015NewLine    \$get('<%= div.ClientID %>').innerHTML += " - text added on client";Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
467411Di2015UniqueSeparatorreturn attr != null ? attr.Value : string.Empty;Di2015NewLine
467434Di2015UniqueSeparatorVisible
467434Di2015UniqueSeparatorDataSource
467471Di2015UniqueSeparatorList<Person> people = ...Di2015NewLinePerson fred = people.Find( x => x.Name == "Fred");Di2015NewLineConsole.WriteLine(fred.Id);Di2015NewLine
467471Di2015UniqueSeparatorPredicate<Person>
467471Di2015UniqueSeparatorList<T>.Find
467476Di2015UniqueSeparatorDictionary<string, int> count = new Dictionary<string, int>();Di2015NewLineDi2015NewLineforeach(IList<int> list in lists)Di2015NewLine  foreach(int item in list) {Di2015NewLine    int value;Di2015NewLine    if (count.TryGetValue(item, out value)) Di2015NewLine      count[item] = value + 1;Di2015NewLine    elseDi2015NewLine      count[item] = 1;Di2015NewLine  }Di2015NewLine
467512Di2015UniqueSeparatorquery = query.Where(m => m.People.Any(p => p.SomeProp == s)).ToList();Di2015NewLine
467621Di2015UniqueSeparatorParse
467621Di2015UniqueSeparatorTryParse
467621Di2015UniqueSeparatorbool
467621Di2015UniqueSeparatorTryParse
467621Di2015UniqueSeparatortry
467621Di2015UniqueSeparatorcatch
467621Di2015UniqueSeparatorParse
467621Di2015UniqueSeparatorTryParse
467621Di2015UniqueSeparatorfalse
467621Di2015UniqueSeparatorParse
467621Di2015UniqueSeparatorTryParse
467678Di2015UniqueSeparatorImports System.Runtime.CompilerServices Di2015NewLine<Extension()> _Di2015NewLinePublic Shared Function GetValueOrDefault(Of T)(ByVal reader As IDataReader, ByVal columnName As String) As T  Di2015NewLineDim returnValue As T = NothingDi2015NewLineDi2015NewLineEnd FunctionDi2015NewLine
467804Di2015UniqueSeparatorLifetime of language/API/platform/framework- i.e., how future-proof will the investment in this application be?... the product has a long life-cycle (10).
467804Di2015UniqueSeparatorWill need to communicate with devices using USB and/or ethernet (9).
467804Di2015UniqueSeparator"Python ctypes"
467804Di2015UniqueSeparatorAvailability of resources, tutorials, support (9).
467804Di2015UniqueSeparatorRichness and breadth of libraries available (9).
467804Di2015UniqueSeparatorUnit testing (9).
467804Di2015UniqueSeparatorAvailability of engineers with relevant skills (8).
467804Di2015UniqueSeparatorAvailability of quality IDE/tools (8).
467804Di2015UniqueSeparatorCost of IDE/tools (7).
467804Di2015UniqueSeparatorThe application will need to be able to interpret a scripting language (6).
467804Di2015UniqueSeparatorCross-platform (3).
467944Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    const int counter = 1024 * 1024;Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < counter; ++i)Di2015NewLine        {Di2015NewLine            Console.WriteLine(i);Di2015NewLine        }Di2015NewLineDi2015NewLine        for (int i = 0; i < counter; i++)Di2015NewLine        {Di2015NewLine            Console.WriteLine(i);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
467944Di2015UniqueSeparator  IL_0000:  ldc.i4.0Di2015NewLine  IL_0001:  stloc.0Di2015NewLine  // Start of first loopDi2015NewLine  IL_0002:  ldc.i4.0Di2015NewLine  IL_0003:  stloc.0Di2015NewLine  IL_0004:  br.s       IL_0010Di2015NewLine  IL_0006:  ldloc.0Di2015NewLine  IL_0007:  call       void [mscorlib]System.Console::WriteLine(int32)Di2015NewLine  IL_000c:  ldloc.0Di2015NewLine  IL_000d:  ldc.i4.1Di2015NewLine  IL_000e:  addDi2015NewLine  IL_000f:  stloc.0Di2015NewLine  IL_0010:  ldloc.0Di2015NewLine  IL_0011:  ldc.i4     0x100000Di2015NewLine  IL_0016:  blt.s      IL_0006Di2015NewLine  // Start of second loopDi2015NewLine  IL_0018:  ldc.i4.0Di2015NewLine  IL_0019:  stloc.0Di2015NewLine  IL_001a:  br.s       IL_0026Di2015NewLine  IL_001c:  ldloc.0Di2015NewLine  IL_001d:  call       void [mscorlib]System.Console::WriteLine(int32)Di2015NewLine  IL_0022:  ldloc.0Di2015NewLine  IL_0023:  ldc.i4.1Di2015NewLine  IL_0024:  addDi2015NewLine  IL_0025:  stloc.0Di2015NewLine  IL_0026:  ldloc.0Di2015NewLine  IL_0027:  ldc.i4     0x100000Di2015NewLine  IL_002c:  blt.s      IL_001cDi2015NewLine  IL_002e:  retDi2015NewLine
468164Di2015UniqueSeparatorvar result = myListDi2015NewLine  .GroupBy(x => x.Id)Di2015NewLine  .Select(g => new Parent()Di2015NewLine  {Di2015NewLine    Key = g.Key,Di2015NewLine    Children = g.Select(x => x.SomeString).ToList()Di2015NewLine  });Di2015NewLine
468276Di2015UniqueSeparatorvar transform1 = shape1.TransformToVisual(shape1.Parent as UIElement);Di2015NewLinevar transform2 = shape2.TransformToVisual(shape2.Parent as UIElement);Di2015NewLineDi2015NewLinevar lineGeometry = new LineGeometry()Di2015NewLine{Di2015NewLine  StartPoint = transform1.Transform(new Point(shape1.ActualWidth / 2, shape1.ActualHeight / 2.0)),Di2015NewLine  EndPoint = transform2.Transform(new Point(shape2.ActualWidth / 2.0,    shape2.ActualHeight / 2.0))Di2015NewLine};Di2015NewLineDi2015NewLinevar path = new Path()Di2015NewLine{Di2015NewLineData = lineGeometryDi2015NewLine};Di2015NewLine
468418Di2015UniqueSeparatorCar.CarType
468679Di2015UniqueSeparatormyThread.Abort();Di2015NewLine// Wait for myThread to end.Di2015NewLinemyThread.Join();Di2015NewLine
468679Di2015UniqueSeparatorThreadAbortException
468679Di2015UniqueSeparatortry {Di2015NewLine    DirectoryInfo dirInfo = new DirectoryInfo(path);Di2015NewLine    foreach(FileINfo file in dirInfo.GetFiles(extension)) Di2015NewLine    {Di2015NewLine        // with large directories, the GetFiles call above Di2015NewLine        //    can stall for a long timeDi2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLinecatch (ThreadAbortException e)Di2015NewLine{Di2015NewLine    // cleaningDi2015NewLine}Di2015NewLine
468685Di2015UniqueSeparatorString fileToUpload = @"C:\\YourFile.txt";Di2015NewLineString sharePointSite = "http://yoursite.com/sites/Research/";Di2015NewLineString documentLibraryName = "Shared Documents";Di2015NewLineDi2015NewLineusing (SPSite oSite = new SPSite(sharePointSite))Di2015NewLine{Di2015NewLine    using (SPWeb oWeb = oSite.OpenWeb())Di2015NewLine    {Di2015NewLine        if (!System.IO.File.Exists(fileToUpload))Di2015NewLine            throw new FileNotFoundException("File not found.", fileToUpload);                    Di2015NewLineDi2015NewLine        SPFolder myLibrary = oWeb.Folders[documentLibraryName];Di2015NewLineDi2015NewLine        // Prepare to uploadDi2015NewLine        Boolean replaceExistingFiles = true;Di2015NewLine        String fileName = System.IO.Path.GetFileName(fileToUpload);Di2015NewLine        FileStream fileStream = File.OpenRead(fileToUpload);Di2015NewLineDi2015NewLine        // Upload documentDi2015NewLine        SPFile spfile = myLibrary.Files.Add(fileName, fileStream, replaceExistingFiles);Di2015NewLineDi2015NewLine        // Commit Di2015NewLine        myLibrary.Update();Di2015NewLine    }Di2015NewLine}Di2015NewLine
468727Di2015UniqueSeparatorstring programFiles = System.Environment.GetFolderPath(Di2015NewLine     System.Environment.SpecialFolder.ProgramFiles);Di2015NewLine
468727Di2015UniqueSeparatorusing System.Windows.Forms;Di2015NewLineDi2015NewLine//...Di2015NewLineDi2015NewLineFolderBrowserDialog dialog = new FolderBrowserDialog();Di2015NewLinedialog.SelectedPath = programFiles;Di2015NewLinedialog.ShowDialog();Di2015NewLineDi2015NewLinestring selectedPath = dialog.SelectedPath;Di2015NewLine
468901Di2015UniqueSeparator[Test]Di2015NewLinepublic void SomeTest()Di2015NewLine{Di2015NewLine    var sc = new SomeClass();Di2015NewLine        // Instantiate SomeClass as sc objectDi2015NewLine    sc.SomeMethod();Di2015NewLine        // Call SomeMethod in the sc object.Di2015NewLineDi2015NewLine    Assert.That(sc.SomeProp, Is.True );Di2015NewLine        // Assert that the property is true... Di2015NewLine        // or change to Is.False if that's what you're after...Di2015NewLine}Di2015NewLine
468901Di2015UniqueSeparatorSomeClass
468901Di2015UniqueSeparatorpublic class MyClass {Di2015NewLineDi2015NewLine    ISomeClass _sc;Di2015NewLineDi2015NewLine    public MyClass(ISomeClass sc) {Di2015NewLine        _sc = sc;Di2015NewLine    }Di2015NewLineDi2015NewLine    public MyMethod() {Di2015NewLine        sc.SomeProp = true;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
468901Di2015UniqueSeparator[Test]Di2015NewLinepublic void MyMethod_ShouldSetSomeClassPropToTrue()Di2015NewLine{Di2015NewLine    MockRepository mocks = new MockRepository();Di2015NewLine    ISomeClass someClass = mocks.StrictMock<ISomeClass>();Di2015NewLineDi2015NewLine    MyClass classUnderTest = new MyClass(someClass);Di2015NewLineDi2015NewLine    someClass.SomeProp = true;Di2015NewLine    LastCall.IgnoreArguments();Di2015NewLine        // Expect the property be set with true.Di2015NewLineDi2015NewLine    mocks.ReplayAll();Di2015NewLineDi2015NewLine    classUndertest.MyMethod();Di2015NewLine        // Run the method under test.Di2015NewLineDi2015NewLine    mocks.VerifyAll();Di2015NewLine}Di2015NewLine
468913Di2015UniqueSeparatorResponse.Clear();Di2015NewLineResponse.ContentType = "application/x-zip-compressed";Di2015NewLineResponse.BinaryWrite(binary);Di2015NewLineResponse.End();Di2015NewLine
468949Di2015UniqueSeparator        Word._Application wordApp;Di2015NewLine        Word._Document wordDoc;Di2015NewLine        object outputFile = outputFileName;Di2015NewLine        object missing = System.Type.Missing;Di2015NewLine        object vk_false = false;Di2015NewLine        object defaultTemplate = defaultWordDocumentTemplate;Di2015NewLine        object pageBreak = Word.WdBreakType.wdPageBreak;Di2015NewLine        string[] filesToMerge = new string[pageCounter];Di2015NewLine        filestoDelete = new string[pageCounter];Di2015NewLineDi2015NewLine        for (int i = 0; i < pageCounter; i++)Di2015NewLine        {Di2015NewLine            filesToMerge[i] = @"C:\\temp\\temp" + i.ToString() + ".rtf";Di2015NewLine            filestoDelete[i] = @"C:\\temp\\temp" + i.ToString() + ".rtf";                Di2015NewLine        }Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            wordDoc = wordApp.Documents.Add(ref missing, ref missing, ref missing, ref missing);Di2015NewLine        }Di2015NewLine        catch(Exception ex)Di2015NewLine        {Di2015NewLine            Console.WriteLine(ex.Message);Di2015NewLine        }Di2015NewLine        Word.Selection selection= wordApp.Selection;Di2015NewLineDi2015NewLine        foreach (string file in filesToMerge)Di2015NewLine        {Di2015NewLine            selection.InsertFile(file,Di2015NewLine                ref missing,Di2015NewLine                ref missing,Di2015NewLine                ref missing,Di2015NewLine                ref missing);Di2015NewLineDi2015NewLine            selection.InsertBreak(ref pageBreak);                                     Di2015NewLine        }Di2015NewLine        wordDoc.SaveAs(ref outputFile, ref missing, ref missing, ref missing, ref missing, ref missing,Di2015NewLine               ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,Di2015NewLine               ref missing, ref missing);Di2015NewLine
469051Di2015UniqueSeparatorOperationResult
469051Di2015UniqueSeparatorICanDoSomethingWeird
469051Di2015UniqueSeparatorICanDoSomethingWeird
469051Di2015UniqueSeparatorICanDoSomethingWeird
469051Di2015UniqueSeparatorICanDoSomethingWeird
469051Di2015UniqueSeparatornamespace MyNamespaceDi2015NewLine{Di2015NewLine    public class OperationResult {}Di2015NewLineDi2015NewLine    public interface ICanDoSomethingWeirdDi2015NewLine    {Di2015NewLine        OperationResult DoMyThing();Di2015NewLine    }Di2015NewLine}Di2015NewLine
469051Di2015UniqueSeparatorusing MyNamespace;Di2015NewLineDi2015NewLineICanDoSomethingWeird myWeirdThing = ...;Di2015NewLineICanDoSomethingWeird.OperationResult result = myWeirdThing.DoMyThing();Di2015NewLine
469051Di2015UniqueSeparatorusing MyNamespace;Di2015NewLineDi2015NewLineICanDoSomethingWeird myWeirdThing = ...;Di2015NewLineOperationResult result = myWeirdThing.DoMyThing();Di2015NewLine
469176Di2015UniqueSeparatorcontainer.AddComponent<IHandler, FileHandler>("handlers.file");Di2015NewLinecontainer.AddComponent<IHandler, HttpHandler>("handlers.http");Di2015NewLine//I can retrieve the first one like this (or something like this).Di2015NewLineIHandler fileHandler = container.Resolve<IHandler>();Di2015NewLine//I can retrieve the http handler like this Di2015NewLineIHandler httpHandler = container.Resolve<IHandler>("handlers.http");Di2015NewLine
469176Di2015UniqueSeparatorcontainer.AddComponent<IHandler, FileHandler>();Di2015NewLine
469228Di2015UniqueSeparatorforeach ( var s in MyCollection.Where(p => p.Value.Member == foo).ToList() ) {Di2015NewLine  MyCollection.Remove(s);Di2015NewLine}Di2015NewLine
469228Di2015UniqueSeparator.ToList()
469315Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Planet pEarth = Planet.MERCURY;Di2015NewLine            double earthRadius = pEarth.Radius; // Just threw it in to show usageDi2015NewLineDi2015NewLine            double earthWeight = double.Parse("123");Di2015NewLine            double mass = earthWeight / pEarth.SurfaceGravity();Di2015NewLine            foreach (Planet p in Planet.Values)Di2015NewLine                Console.WriteLine("Your weight on {0} is {1}", p, p.SurfaceWeight(mass));Di2015NewLineDi2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class PlanetDi2015NewLine    {Di2015NewLine        public static readonly Planet MERCURY = new Planet("Mercury", 3.303e+23, 2.4397e6);Di2015NewLine        public static readonly Planet VENUS = new Planet("Venus", 4.869e+24, 6.0518e6);Di2015NewLine        public static readonly Planet EARTH = new Planet("Earth", 5.976e+24, 6.37814e6);Di2015NewLine        public static readonly Planet MARS = new Planet("Mars", 6.421e+23, 3.3972e6);Di2015NewLine        public static readonly Planet JUPITER = new Planet("Jupiter", 1.9e+27, 7.1492e7);Di2015NewLine        public static readonly Planet SATURN = new Planet("Saturn", 5.688e+26, 6.0268e7);Di2015NewLine        public static readonly Planet URANUS = new Planet("Uranus", 8.686e+25, 2.5559e7);Di2015NewLine        public static readonly Planet NEPTUNE = new Planet("Neptune", 1.024e+26, 2.4746e7);Di2015NewLine        public static readonly Planet PLUTO = new Planet("Pluto", 1.27e+22, 1.137e6);Di2015NewLineDi2015NewLine        public static IEnumerable<Planet> ValuesDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                yield return MERCURY;Di2015NewLine                yield return VENUS;Di2015NewLine                yield return EARTH;Di2015NewLine                yield return MARS;Di2015NewLine                yield return JUPITER;Di2015NewLine                yield return SATURN;Di2015NewLine                yield return URANUS;Di2015NewLine                yield return NEPTUNE;Di2015NewLine                yield return PLUTO;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private readonly string name;Di2015NewLine        private readonly double mass;   // in kilogramsDi2015NewLine        private readonly double radius; // in metersDi2015NewLineDi2015NewLine        Planet(string name, double mass, double radius)Di2015NewLine        {Di2015NewLine            this.name = name;Di2015NewLine            this.mass = mass;Di2015NewLine            this.radius = radius;Di2015NewLine        }Di2015NewLineDi2015NewLine        public string Name { get { return name; } }Di2015NewLineDi2015NewLine        public double Mass { get { return mass; } }Di2015NewLineDi2015NewLine        public double Radius { get { return radius; } }Di2015NewLineDi2015NewLine        // universal gravitational constant  (m3 kg-1 s-2)Di2015NewLine        public const double G = 6.67300E-11;Di2015NewLineDi2015NewLine        public double SurfaceGravity()Di2015NewLine        {Di2015NewLine            return G * mass / (radius * radius);Di2015NewLine        }Di2015NewLineDi2015NewLine        public double SurfaceWeight(double otherMass)Di2015NewLine        {Di2015NewLine            return otherMass * SurfaceGravity();Di2015NewLine        }Di2015NewLineDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return name;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
469333Di2015UniqueSeparator    [DllImport("user32.dll")]Di2015NewLine    private static extern bool DestroyIcon(IntPtr handle);Di2015NewLine    private Cursor moveCursor;Di2015NewLineDi2015NewLine    private void DestroyCursor()Di2015NewLine    {Di2015NewLine        if (this.moveCursor != null)Di2015NewLine        {Di2015NewLine            DestroyIcon(this.moveCursor.Handle);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
469635Di2015UniqueSeparator// serverlessDi2015NewLineDirectoryEntry rootConfig = new DirectoryEntry("LDAP://dc=domainname,dc=com");Di2015NewLineDi2015NewLine// server boundDi2015NewLineDirectoryEntry rootEntry = new DirectoryEntry("LDAP://domainControllerName/dc=domainName,dc=com");Di2015NewLine
469928Di2015UniqueSeparatorRegex r = new Regex("<ref>(?<match>.*?)</ref>");Di2015NewLineforeach (Match m in r.Matches(csv[4]))Di2015NewLine{Di2015NewLine    if (m.Groups.Count > 0)Di2015NewLine    {Di2015NewLine    \if (m.Groups["match"].Captures.Count > 0)Di2015NewLine    \{Di2015NewLine    \\foreach (Capture c in m.Groups["match"].Captures)Di2015NewLine    \\{Di2015NewLine    \\\child.InnerText += c.Value + ", ";Di2015NewLine    \\}Di2015NewLine    \\child.InnerText = child.InnerText.Substring(0, child.InnerText.Length - 2).Replace("-> ", "");Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
469970Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication3 {Di2015NewLine    public class KonamiSequence {Di2015NewLineDi2015NewLine        List<Keys> Keys = new List<Keys>{System.Windows.Forms.Keys.Up, System.Windows.Forms.Keys.Up, Di2015NewLine                                       System.Windows.Forms.Keys.Down, System.Windows.Forms.Keys.Down, Di2015NewLine                                       System.Windows.Forms.Keys.Left, System.Windows.Forms.Keys.Right, Di2015NewLine                                       System.Windows.Forms.Keys.Left, System.Windows.Forms.Keys.Right, Di2015NewLine                                       System.Windows.Forms.Keys.B, System.Windows.Forms.Keys.A};Di2015NewLine        private int mPosition = -1;Di2015NewLineDi2015NewLine        public int Position {Di2015NewLine            get { return mPosition; }Di2015NewLine            private set { mPosition = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool IsCompletedBy(Keys key) {Di2015NewLineDi2015NewLine            if (Keys[Position + 1] == key) {Di2015NewLine                // move to nextDi2015NewLine                Position++;Di2015NewLine            }Di2015NewLine            else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {Di2015NewLine                // stay where we areDi2015NewLine            }Di2015NewLine            else if (Keys[0] == key) {Di2015NewLine                // restart at 1stDi2015NewLine                Position = 0;Di2015NewLine            }Di2015NewLine            else {Di2015NewLine                // no match in sequenceDi2015NewLine                Position = -1;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (Position == Keys.Count - 1) {Di2015NewLine                Position = -1;Di2015NewLine                return true;Di2015NewLine            }Di2015NewLineDi2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
469970Di2015UniqueSeparator    private KonamiSequence sequence = new KonamiSequence();Di2015NewLineDi2015NewLine    private void Form1_KeyUp(object sender, KeyEventArgs e) {Di2015NewLine        if (sequence.IsCompletedBy(e.KeyCode)) {Di2015NewLine            MessageBox.Show("KONAMI!!!");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
469978Di2015UniqueSeparatorBinding.FormattingEnabled
469978Di2015UniqueSeparatorControlBindingsCollection.Add
469978Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{ Di2015NewLine   public int IntPart { get; set; } Di2015NewLine   public string StringPart { get; set; }Di2015NewLine   //...Di2015NewLine}Di2015NewLine
469978Di2015UniqueSeparatorstring
469996Di2015UniqueSeparatorMemberInfo[] sm = FormatterServices.GetSerializableMembers(typeof(From));Di2015NewLineobject[] data = FormatterServices.GetObjectData(from, sm);Di2015NewLineFormatterServices.PopulateObjectMembers(to, sm, data);Di2015NewLine
470137Di2015UniqueSeparatorget_MyValue()
470137Di2015UniqueSeparatorset_MyValue(value)
470137Di2015UniqueSeparatorget_
470137Di2015UniqueSeparatorset_
470245Di2015UniqueSeparatorViewData
470246Di2015UniqueSeparatorscript.Append("sometext" + ((dbInfo.IsIdentity) ? " IDENTITY(1,1)" : ""));Di2015NewLine
470266Di2015UniqueSeparatorpublic class SelectionEndListView : ListViewDi2015NewLine{Di2015NewLineprivate System.Windows.Forms.Timer m_timer;Di2015NewLineprivate const int SELECTION_DELAY = 50;Di2015NewLineDi2015NewLinepublic SelectionEndListView()Di2015NewLine{Di2015NewLine   m_timer = new Timer();Di2015NewLine   m_timer.Interval = SELECTION_DELAY;Di2015NewLine   m_timer.Tick += new EventHandler(m_timer_Tick);Di2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnSelectedIndexChanged(EventArgs e)Di2015NewLine{Di2015NewLine   base.OnSelectedIndexChanged(e);Di2015NewLineDi2015NewLine   // restart delay timerDi2015NewLine   m_timer.Stop();Di2015NewLine   m_timer.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void m_timer_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   m_timer.Stop();Di2015NewLineDi2015NewLine   // Perform selection end logic.Di2015NewLine   Console.WriteLine("Selection Has Ended");Di2015NewLine}Di2015NewLine}Di2015NewLine
470300Di2015UniqueSeparatorclass ControlADi2015NewLine{Di2015NewLine    void Frob<T>(IInterfaceB<T> something) where T : IHasSomeProperties, new()Di2015NewLine    {Di2015NewLine        something.ListOfT.Add(new T() { SomeProperty = 5 });Di2015NewLine        something.ListOfT.Add(new T() { SomeProperty = 14 });Di2015NewLine    }Di2015NewLine}Di2015NewLine
470336Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Data;Di2015NewLineusing System.Data.SqlClient;Di2015NewLineusing System.IO;Di2015NewLineusing System.Text;Di2015NewLineusing Microsoft.SqlServer.Management.Common;Di2015NewLineusing Microsoft.SqlServer.Management.Smo;Di2015NewLineusing Rule=System.Data.Rule;Di2015NewLineDi2015NewLinenamespace XSD2SQLDi2015NewLine{Di2015NewLinepublic class XSD2SQLDi2015NewLine{Di2015NewLine    private readonly Server _server;Di2015NewLine    private readonly SqlConnection _connection;Di2015NewLine    private Database _db;Di2015NewLine    private DataSet _source;Di2015NewLine    private string _databaseName;Di2015NewLineDi2015NewLine    public XSD2SQL(string connectionString, DataSet source)Di2015NewLine    {Di2015NewLine        _connection = new SqlConnection(connectionString);Di2015NewLine        _server = new Server(new ServerConnection(_connection));Di2015NewLine        _source = source;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void CreateDatabase(string databaseName)Di2015NewLine    {Di2015NewLine        _databaseName = databaseName;Di2015NewLine        _db = _server.Databases[databaseName];Di2015NewLine        if (_db != null) _db.Drop();Di2015NewLine        _db = new Database(_server, _databaseName);Di2015NewLine        _db.Create();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void PopulateDatabase()Di2015NewLine    {Di2015NewLine        CreateTables(_source.Tables);Di2015NewLine        CreateRelationships();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void CreateRelationships()Di2015NewLine    {Di2015NewLine        foreach (DataTable table in _source.Tables)Di2015NewLine        {Di2015NewLine            foreach (DataRelation rel in table.ChildRelations)Di2015NewLine                CreateRelation(rel);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void CreateRelation(DataRelation relation)Di2015NewLine    {Di2015NewLine        Table primaryTable = _db.Tables[relation.ParentTable.TableName];Di2015NewLine        Table childTable = _db.Tables[relation.ChildTable.TableName];Di2015NewLineDi2015NewLine        ForeignKey fkey = new ForeignKey(childTable, relation.RelationName);Di2015NewLine        fkey.ReferencedTable = primaryTable.Name;Di2015NewLineDi2015NewLine        fkey.DeleteAction = SQLActionTypeToSMO(relation.ChildKeyConstraint.DeleteRule);Di2015NewLine        fkey.UpdateAction = SQLActionTypeToSMO(relation.ChildKeyConstraint.UpdateRule);Di2015NewLineDi2015NewLineDi2015NewLine        for (int i = 0; i < relation.ChildColumns.Length; i++)Di2015NewLine        {Di2015NewLine            DataColumn col = relation.ChildColumns[i];Di2015NewLine            ForeignKeyColumn fkc = new ForeignKeyColumn(fkey, col.ColumnName, relation.ParentColumns[i].ColumnName);Di2015NewLineDi2015NewLine            fkey.Columns.Add(fkc);Di2015NewLine        }Di2015NewLineDi2015NewLine        fkey.Create();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void CreateTables(DataTableCollection tables)Di2015NewLine    {Di2015NewLine        foreach (DataTable table in tables)Di2015NewLine        {                Di2015NewLine            DropExistingTable(table.TableName);Di2015NewLine            Table newTable = new Table(_db, table.TableName);Di2015NewLineDi2015NewLine            PopulateTable(ref newTable, table);                Di2015NewLine            SetPrimaryKeys(ref newTable, table);Di2015NewLine            newTable.Create();Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void PopulateTable(ref Table outputTable, DataTable inputTable)Di2015NewLine    {Di2015NewLine        foreach (DataColumn column in inputTable.Columns)Di2015NewLine        {Di2015NewLine            CreateColumns(ref outputTable, column, inputTable);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void CreateColumns(ref Table outputTable, DataColumn inputColumn, DataTable inputTable)Di2015NewLine    {Di2015NewLine        Column newColumn = new Column(outputTable, inputColumn.ColumnName);Di2015NewLine        newColumn.DataType = CLRTypeToSQLType(inputColumn.DataType);Di2015NewLine        newColumn.Identity = inputColumn.AutoIncrement;Di2015NewLine        newColumn.IdentityIncrement = inputColumn.AutoIncrementStep;Di2015NewLine        newColumn.IdentitySeed = inputColumn.AutoIncrementSeed;Di2015NewLine        newColumn.Nullable = inputColumn.AllowDBNull;Di2015NewLine        newColumn.UserData = inputColumn.DefaultValue;Di2015NewLineDi2015NewLine        outputTable.Columns.Add(newColumn);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void SetPrimaryKeys(ref Table outputTable, DataTable inputTable)Di2015NewLine    {Di2015NewLine        Index newIndex = new Index(outputTable, "PK_" + outputTable.Name);Di2015NewLine        newIndex.IndexKeyType = IndexKeyType.DriPrimaryKey;Di2015NewLine        newIndex.IsClustered = false;Di2015NewLineDi2015NewLine        foreach (DataColumn keyColumn in inputTable.PrimaryKey)Di2015NewLine        {                                Di2015NewLine            newIndex.IndexedColumns.Add(new IndexedColumn(newIndex, keyColumn.ColumnName, true));                Di2015NewLine        }Di2015NewLine        if (newIndex.IndexedColumns.Count > 0)Di2015NewLine            outputTable.Indexes.Add(newIndex);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    private DataType CLRTypeToSQLType(Type type)Di2015NewLine    {Di2015NewLine        switch (type.Name)Di2015NewLine        {Di2015NewLine            case "String":Di2015NewLine                return DataType.NVarCharMax;Di2015NewLineDi2015NewLine            case "Int32":Di2015NewLine                return DataType.Int;Di2015NewLineDi2015NewLine            case "Boolean":Di2015NewLine                return DataType.Bit;Di2015NewLineDi2015NewLine            case "DateTime":Di2015NewLine                return DataType.DateTime;Di2015NewLineDi2015NewLine            case "Byte[]":Di2015NewLine                return DataType.VarBinaryMax;Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        return DataType.NVarCharMax;Di2015NewLine    }Di2015NewLineDi2015NewLine    private ForeignKeyAction SQLActionTypeToSMO(Rule rule)Di2015NewLine    {Di2015NewLine        string ruleStr = rule.ToString();Di2015NewLineDi2015NewLine        return (ForeignKeyAction)Enum.Parse(typeof (ForeignKeyAction), ruleStr);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void DropExistingTable(string tableName)Di2015NewLine    {Di2015NewLine        Table table = _db.Tables[tableName];Di2015NewLine        if (table != null) table.Drop();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine}Di2015NewLine
470336Di2015UniqueSeparatorMicrosoft.SqlServer.ConnectionInfoDi2015NewLineMicrosoft.SqlServer.Management.Sdk.SfcDi2015NewLineMicrosoft.SqlServer.SmoDi2015NewLineMicrosoft.SqlServer.SqlEnumDi2015NewLine
470355Di2015UniqueSeparatorCould not load file or assembly 'PrintTest2007, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Failed to grant permission to execute. (Exception from HRESULT: 0x80131418)Di2015NewLineDi2015NewLineDi2015NewLine************** Exception Text **************Di2015NewLineSystem.IO.FileLoadException: Could not load file or assembly 'PrintTest2007, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Failed to grant permission to execute. (Exception from HRESULT: 0x80131418)Di2015NewLineFile name: 'PrintTest2007, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' ---> System.Security.Policy.PolicyException: Execution permission cannot be acquired.Di2015NewLine   at System.Security.SecurityManager.ResolvePolicy(Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, PermissionSet& denied, Boolean checkExecutionPermission)Di2015NewLine   at System.Security.SecurityManager.ResolvePolicy(Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, PermissionSet& denied, Int32& securitySpecialFlags, Boolean checkExecutionPermission)Di2015NewLine   at Microsoft.VisualStudio.Tools.Applications.Runtime.AppDomainManagerInternal.HandleOnlineOffline(Exception e, String basePath, String filePath)Di2015NewLine   at Microsoft.VisualStudio.Tools.Applications.Runtime.AppDomainManagerInternal.LoadStartupAssembly(EntryPoint entryPoint, Dependency dependency, Dictionary`2 assembliesHash)Di2015NewLine   at Microsoft.VisualStudio.Tools.Applications.Runtime.AppDomainManagerInternal.ConfigureAppDomain()Di2015NewLine   at Microsoft.VisualStudio.Tools.Applications.Runtime.AppDomainManagerInternal.LoadAssembliesAndConfigureAppDomain(IHostServiceProvider serviceProvider)Di2015NewLine   at Microsoft.VisualStudio.Tools.Applications.Runtime.AppDomainManagerInternal.LoadEntryPointsHelper(IHostServiceProvider serviceProvider)Di2015NewLine
470405Di2015UniqueSeparatorpublic string TransformDocument(XmlDocument doc, XmlDocument stylesheet)Di2015NewLine{Di2015NewLine   XslCompiledTransform transform = new XslCompiledTransform();Di2015NewLine   transform.Load(stylesheet); // compiled stylesheetDi2015NewLine   System.IO.StringWriter writer = new System.IO.StringWriter();Di2015NewLine   transform.Transform(doc, null, writer);Di2015NewLine   return writer.ToString();Di2015NewLine}Di2015NewLine
470511Di2015UniqueSeparatorvar q = from n in tableDi2015NewLine        group n by n.AccountId into gDi2015NewLine        select new {AccountId = g.Key, Date = g.Max(t=>t.Date)};Di2015NewLine
470511Di2015UniqueSeparatorvar q = from n in tableDi2015NewLine        group n by n.AccountId into gDi2015NewLine        select g.OrderByDescending(t=>t.Date).First();Di2015NewLine
470539Di2015UniqueSeparatorSystem.Comparison<T>
470623Di2015UniqueSeparatorRegex
470623Di2015UniqueSeparatorpublic static string Replace(string input, string pattern, string replacement)Di2015NewLine{Di2015NewLine    return new Regex(pattern, RegexOptions.None, true).Replace(input, replacement);Di2015NewLine}Di2015NewLine
470623Di2015UniqueSeparatorRegexOptions.Compiled
470623Di2015UniqueSeparatorReplace
470623Di2015UniqueSeparatorRegex
470705Di2015UniqueSeparatorresultString = Regex.Replace(Di2015NewLine    im_cfg_contents, Di2015NewLine    @"(?<=\\$displayHeight[\\s]*=[\\s]*"")(.*)(?="";)", Di2015NewLine    Convert.ToString(y_res));Di2015NewLine
470705Di2015UniqueSeparatorresultString = Regex.Replace(Di2015NewLine    im_cfg_contents, Di2015NewLine    @"(\\$displayHeight[\\s]*=[\\s]*"")(.*)("";)", Di2015NewLine    "${1}" + Convert.ToString(y_res) + "${3}");Di2015NewLine
470794Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    $(document).ready(function() {Di2015NewLine        $("input[name='ticketStatus']").bind("click", radioClicks)Di2015NewLine    });Di2015NewLineDi2015NewLine    function radioClicks() {Di2015NewLine        window.location = "/Tickets/" + $(this).val();Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
470976Di2015UniqueSeparatorstring faster = first + " " + second + " " + third + "; " + fourth;Di2015NewLineDi2015NewLinestring slower = new StringBuilder().Append(first)Di2015NewLine                                   .Append(" ")Di2015NewLine                                   .Append(second)Di2015NewLine                                   .Append(" ")Di2015NewLine                                   .Append(third)Di2015NewLine                                   .Append("; ")Di2015NewLine                                   .Append(fourth)Di2015NewLine                                   .ToString();Di2015NewLine
470976Di2015UniqueSeparator string readable = string.Format("{0} {1} {2}; {3}",Di2015NewLine                                 first, second, third, fourth);Di2015NewLine
471093Di2015UniqueSeparator        public DecoratedModel(Model m)Di2015NewLine        {Di2015NewLine            foreach (var prop in typeof(Model).GetProperties())Di2015NewLine            {Di2015NewLine                this.GetType().GetProperty(prop.Name).SetValue(this, prop.GetValue(m, null),null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
471179Di2015UniqueSeparatorstring connectionString = String.Format("Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Extended Properties=\\"text;HDR=YES;Format=Delimited(|)\\";", Path.GetDirectoryName(path));Di2015NewLine
471179Di2015UniqueSeparator[myFile.txt]Di2015NewLineFormat=Delimited(|)Di2015NewLineTextDelimiter="none"Di2015NewLine
471179Di2015UniqueSeparatorcommand.CommandText = String.Format("SELECT * FROM [{0}]", Path.GetFileName(path));Di2015NewLineOleDbDataReader reader = command.ExecuteReader();Di2015NewLine
471179Di2015UniqueSeparatorSchema.ini
471428Di2015UniqueSeparatorthrow new ArgumentException("Reason", "param name");Di2015NewLine
471592Di2015UniqueSeparatorIEnumerable<T>
471592Di2015UniqueSeparatorIQueryable<T>
471592Di2015UniqueSeparatorDataContext
471592Di2015UniqueSeparatorObjectContext
471592Di2015UniqueSeparatorSystem.Xml
471592Di2015UniqueSeparatorIEnumerable<string> result =Di2015NewLinefrom c in myCustomersDi2015NewLinewhere c.Name.StartsWith("B")Di2015NewLineselect c.Name
471592Di2015UniqueSeparatorSystem.Linq.Expressions.Expression
471592Di2015UniqueSeparatorIEnumerable<string> result = myCustomers.Where( c => c.Name.StartsWith("B") ).Select(c => c.Name)
471592Di2015UniqueSeparatormyCustomers.Select(c => new Di2015NewLine{Di2015NewLine  Name = c.Name;Di2015NewLine  Age = c.Age;Di2015NewLine})
471592Di2015UniqueSeparator//The compiler will determine that names is an IEnumerable<string>
471592Di2015UniqueSeparatorvar names = myCustomers.Select(c => c.Name);
471613Di2015UniqueSeparatorList<string> selectedFields = new List<string>();Di2015NewLineselectedFields.AddRange(chkDFMFieldList.CheckedItems.OfType<string>());Di2015NewLine
471613Di2015UniqueSeparatorList<string> selectedFields = chkDFMFieldList.CheckedItems.OfType<string>().ToList();Di2015NewLine
471675Di2015UniqueSeparatorString.IsNullOrEmpty()
471705Di2015UniqueSeparator<asp:Login ... >Di2015NewLine    <LayoutTemplate>Di2015NewLine        <asp:TextBox ID="UserName" ... /> ...Di2015NewLine        <asp:TextBox ID="Password" ... /> ...Di2015NewLine        <asp:Button ID="LoginButton" ... />Di2015NewLine    </LayoutTemplate>Di2015NewLine</asp:Login>Di2015NewLine
471706Di2015UniqueSeparator    Brush brush = Brushes.Black;Di2015NewLine    g.FillEllipse(brush, 3, 3, 2, 2); //Here the exception is thrown on the second call to the functionDi2015NewLineDi2015NewLine    brush.Dispose(); //If i comment this out, it works ok.Di2015NewLine
471706Di2015UniqueSeparator    Brushes.Black.dispose();Di2015NewLine
471706Di2015UniqueSeparator    g.FillEllipse(Brushes.Black, 3, 3, 2, 2);Di2015NewLine
471706Di2015UniqueSeparator    Brush brush = Brushes.Black.Clone();Di2015NewLine    g.FillEllipse( brush, 3, 3, 2, 2 );Di2015NewLine    brush.Dispose();Di2015NewLine
472134Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    int count = 30;Di2015NewLine    int[] numbers = getNumbers(count, 155);Di2015NewLine    for (int index = 0; index < count; index++)Di2015NewLine    {Di2015NewLine        Console.Write(numbers[index]);Di2015NewLine        if ((index + 1) % 10 == 0)Di2015NewLine            Console.WriteLine("");Di2015NewLine        else if (index != count - 1)Di2015NewLine            Console.Write(",");Di2015NewLine    }Di2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLinestatic int[] getNumbers(int count, int total)Di2015NewLine{Di2015NewLine    const int LOWERBOUND = 1;Di2015NewLine    const int UPPERBOUND = 9;Di2015NewLineDi2015NewLine    int[] result = new int[count];Di2015NewLine    int currentsum = 0;Di2015NewLine    int low, high, calc;Di2015NewLineDi2015NewLine    if((UPPERBOUND * count) < total ||Di2015NewLine        (LOWERBOUND * count) > total ||Di2015NewLine        UPPERBOUND < LOWERBOUND)Di2015NewLine        throw new Exception("Not possible.");Di2015NewLineDi2015NewLine    Random rnd = new Random();Di2015NewLineDi2015NewLine    for (int index = 0; index < count; index++)Di2015NewLine    {Di2015NewLine        calc = (total - currentsum) - (UPPERBOUND * (count - 1 - index));Di2015NewLine        low = calc < LOWERBOUND ? LOWERBOUND : calc;Di2015NewLine        calc = (total - currentsum) - (LOWERBOUND * (count - 1 - index));Di2015NewLine        high = calc > UPPERBOUND ? UPPERBOUND : calc;Di2015NewLineDi2015NewLine        result[index] = rnd.Next(low, high + 1);Di2015NewLineDi2015NewLine        currentsum += result[index];Di2015NewLine    }Di2015NewLineDi2015NewLine    // The tail numbers will tend to drift higher or lower so we should shuffle to compensate somewhat.Di2015NewLineDi2015NewLine    int shuffleCount = rnd.Next(count * 5, count * 10);Di2015NewLine    while (shuffleCount-- > 0)Di2015NewLine        swap(ref result[rnd.Next(0, count)], ref result[rnd.Next(0, count)]);Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLinepublic static void swap(ref int item1, ref int item2)Di2015NewLine{Di2015NewLine    int temp = item1;Di2015NewLine    item1 = item2;Di2015NewLine    item2 = temp;Di2015NewLine}Di2015NewLine
472134Di2015UniqueSeparatorTotal = Count * ((UPPER + LOWER) / 2)
472134Di2015UniqueSeparatorUPPER
472134Di2015UniqueSeparatorLOWER
472153Di2015UniqueSeparatorDictionary<TKey,TValue>
472153Di2015UniqueSeparatorSortedDictionary<TKey,TValue>
472153Di2015UniqueSeparatorSortedList<TKey,TValue>
472153Di2015UniqueSeparatorIComparer<T>
472153Di2015UniqueSeparatorIEnumerable<T>
472286Di2015UniqueSeparatorUser starts application from existing cmd window, and runs in GUI modeDi2015NewLineUser double clicks to start application, and runs in GUI modeDi2015NewLineUser starts application from existing cmd window, and runs in command modeDi2015NewLineUser double clicks to start application, and runs in command mode.Di2015NewLine
472286Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing Microsoft.Win32;Di2015NewLineDi2015NewLinenamespace WindowsApplicationDi2015NewLine{Di2015NewLine    static class ProgramDi2015NewLine    {Di2015NewLine        /*Di2015NewLine    DEMO CODE ONLY: In general, this approach calls for re-thinking Di2015NewLine    your architecture!Di2015NewLine    There are 4 possible ways this can run:Di2015NewLine    1) User starts application from existing cmd window, and runs in GUI modeDi2015NewLine    2) User double clicks to start application, and runs in GUI modeDi2015NewLine    3) User starts applicaiton from existing cmd window, and runs in command modeDi2015NewLine    4) User double clicks to start application, and runs in command mode.Di2015NewLineDi2015NewLine    To run in console mode, start a cmd shell and enter:Di2015NewLine        c:\\path\\to\\Debug\\dir\\WindowsApplication.exe consoleDi2015NewLine        To run in gui mode,  EITHER just double click the exe, OR start it from the cmd prompt with:Di2015NewLine        c:\\path\\to\\Debug\\dir\\WindowsApplication.exe (or pass the "gui" argument).Di2015NewLine        To start in command mode from a double click, change the default below to "console".Di2015NewLine    In practice, I'm not even sure how the console vs gui mode distinction would be made from aDi2015NewLine    double click...Di2015NewLine        string mode = args.Length > 0 ? args[0] : "console"; //default to consoleDi2015NewLine    */Di2015NewLineDi2015NewLine        [DllImport("kernel32.dll", SetLastError = true)]Di2015NewLine        static extern bool AllocConsole();Di2015NewLineDi2015NewLine        [DllImport("kernel32.dll", SetLastError = true)]Di2015NewLine        static extern bool FreeConsole();Di2015NewLineDi2015NewLine        [DllImport("kernel32", SetLastError = true)]Di2015NewLine        static extern bool AttachConsole(int dwProcessId);Di2015NewLineDi2015NewLine        [DllImport("user32.dll")]Di2015NewLine        static extern IntPtr GetForegroundWindow();Di2015NewLineDi2015NewLine        [DllImport("user32.dll", SetLastError = true)]Di2015NewLine        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);Di2015NewLineDi2015NewLine        [STAThread]Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            //TODO: better handling of command args, (handle help (--help /?) etc.)Di2015NewLine            string mode = args.Length > 0 ? args[0] : "gui"; //default to guiDi2015NewLineDi2015NewLine            if (mode == "gui")Di2015NewLine            {Di2015NewLine                MessageBox.Show("Welcome to GUI mode");Di2015NewLineDi2015NewLine                Application.EnableVisualStyles();Di2015NewLineDi2015NewLine                Application.SetCompatibleTextRenderingDefault(false);Di2015NewLineDi2015NewLine                Application.Run(new Form1());Di2015NewLine            }Di2015NewLine            else if (mode == "console")Di2015NewLine            {Di2015NewLineDi2015NewLine                //Get a pointer to the forground window.  The idea here is thatDi2015NewLine                //IF the user is starting our application from an existing consoleDi2015NewLine                //shell, that shell will be the uppermost window.  We'll get itDi2015NewLine                //and attach to itDi2015NewLine                IntPtr ptr = GetForegroundWindow();Di2015NewLineDi2015NewLine                int  u;Di2015NewLineDi2015NewLine                GetWindowThreadProcessId(ptr, out u);Di2015NewLineDi2015NewLine                Process process = Process.GetProcessById(u);Di2015NewLineDi2015NewLine                if (process.ProcessName == "cmd" )    //Is the uppermost window a cmd process?Di2015NewLine                {Di2015NewLine                    AttachConsole(process.Id);Di2015NewLineDi2015NewLine                    //we have a console to attach to ..Di2015NewLine                    Console.WriteLine("hello. It looks like you started me from an existing console.");Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    //no console AND we're in console mode ... create a new console.Di2015NewLineDi2015NewLine                    AllocConsole();Di2015NewLineDi2015NewLine                    Console.WriteLine(@"hello. It looks like you double clicked me to startDi2015NewLine                   AND you want console mode.  Here's a new console.");Di2015NewLine                    Console.WriteLine("press any key to continue ...");Di2015NewLine                    Console.ReadLine();       Di2015NewLine                }Di2015NewLineDi2015NewLine                FreeConsole();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
472364Di2015UniqueSeparatorThreadPool
472364Di2015UniqueSeparatorBackgroundWorker
472390Di2015UniqueSeparatorint[] result = Array.ConvertAll<TestEnum, int>(Di2015NewLine    enumArray, delegate(TestEnum value) {return (int) value;});Di2015NewLine
472390Di2015UniqueSeparatorint[] result = Array.ConvertAll(enumArray, value => (int) value);Di2015NewLine
472474Di2015UniqueSeparatordouble angle = Math.Atan2(pointB.Y - pointA.Y, pointB.X - pointA.X);Di2015NewLine
472474Di2015UniqueSeparatormyImage.TranslateTransform(-pointA.X, -pointA.Y);Di2015NewLinemyImage.RotateTransform((float) angle, MatrixOrder.Append);Di2015NewLinemyImage.TranslateTransform(pointA.X, pointA.Y, MatrixOrder.Append);Di2015NewLine
472506Di2015UniqueSeparatorvar sum = pupils.Sum(pupil => pupil.Age);Di2015NewLinevar average = pupils.Average(pupil => pupil.Age);Di2015NewLine
472506Di2015UniqueSeparatorvar csv = string.Join(",", pupils.Select(pupil => pupil.Name).ToArray());Di2015NewLine
472555Di2015UniqueSeparatorsplit(intix)Di2015NewLine
472555Di2015UniqueSeparatorsplit[intix]Di2015NewLine
472555Di2015UniqueSeparatorrs.Fields("Table_Name").Value.ToString().Substring(0,4), but check the length first. Di2015NewLineDi2015NewLineieDi2015NewLineDi2015NewLiners.Fields("Table_Name").Value.ToString().Length >= 4Di2015NewLine
472648Di2015UniqueSeparator//select usersDi2015NewLineDictionary<int, User> users = new Dictionary<int, User>();Di2015NewLineforeach (User user in selectUsersFromDatabase())Di2015NewLine{Di2015NewLine  users.Add(user.Id, user);Di2015NewLine}Di2015NewLine//select groupsDi2015NewLineDictionary<int, Group> groups = new Dictionary<int, Group>();Di2015NewLineforeach (Group group in selectGroupsFromDatabase())Di2015NewLine{Di2015NewLine  groups.Add(group.Id, group);Di2015NewLine}Di2015NewLine//select relationsDi2015NewLine//and join groups to usersDi2015NewLine//and join users to groupsDi2015NewLineforeach (Relation relation in selectRelationsFromDatabase())Di2015NewLine{Di2015NewLine  //find user in dictionaryDi2015NewLine  User user = users[relation.userId];Di2015NewLine  //find group in dictionaryDi2015NewLine  Group group = groups[relation.groupId];Di2015NewLine  //add group to user and add user to groupDi2015NewLine  user.BelongsTo.Add(group);Di2015NewLine  group.Users.Add(user);Di2015NewLine}Di2015NewLine
472671Di2015UniqueSeparatorList<string> myList = new List<string>();Di2015NewLineIEnumerable<string> myEnumerable = myList;Di2015NewLineList<string> listAgain = myEnumerable.ToList();Di2015NewLine
473122Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Text;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLineclass BenchmarkDi2015NewLine{Di2015NewLine    const string TestData = "ThisIsAUpperCaseString";Di2015NewLine    const string ValidResult = "This Is A Upper Case String";Di2015NewLine    const int Iterations = 1000000;Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Test(BenchmarkOverhead);Di2015NewLine        Test(MakeNiceString);Di2015NewLine        Test(ImprovedMakeNiceString);Di2015NewLine        Test(RefactoredMakeNiceString);Di2015NewLine        Test(MakeNiceStringWithStringIndexer);Di2015NewLine        Test(MakeNiceStringWithForeach);Di2015NewLine        Test(MakeNiceStringWithForeachAndLinqSkip);Di2015NewLine        Test(MakeNiceStringWithForeachAndCustomSkip);Di2015NewLine        Test(SplitCamelCase);Di2015NewLine        Test(SplitCamelCaseCachedRegex);Di2015NewLine        Test(SplitCamelCaseCompiledRegex);        Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Test(Func<string,string> function)Di2015NewLine    {Di2015NewLine        Console.Write("{0}... ", function.Method.Name);Di2015NewLine        Stopwatch sw = Stopwatch.StartNew();Di2015NewLine        for (int i=0; i < Iterations; i++)Di2015NewLine        {Di2015NewLine            string result = function(TestData);Di2015NewLine            if (result.Length != ValidResult.Length)Di2015NewLine            {Di2015NewLine                throw new Exception("Bad result: " + result);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine(" {0}ms", sw.ElapsedMilliseconds);Di2015NewLine        GC.Collect();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string BenchmarkOverhead(string str)Di2015NewLine    {Di2015NewLine        return ValidResult;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string MakeNiceString(string str)Di2015NewLine    {Di2015NewLine        char[] ca = str.ToCharArray();Di2015NewLine        string result = null;Di2015NewLine        int i = 0;Di2015NewLine        result += System.Convert.ToString(ca[0]);Di2015NewLine        for (i = 1; i <= ca.Length - 1; i++)Di2015NewLine        {Di2015NewLine            if (!(char.IsLower(ca[i])))Di2015NewLine            {Di2015NewLine                result += " ";Di2015NewLine            }Di2015NewLine            result += System.Convert.ToString(ca[i]);Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string ImprovedMakeNiceString(string str)Di2015NewLine    { //Removed Convert.ToString()Di2015NewLine        char[] ca = str.ToCharArray();Di2015NewLine        string result = null;Di2015NewLine        int i = 0;Di2015NewLine        result += ca[0];Di2015NewLine        for (i = 1; i <= ca.Length - 1; i++)Di2015NewLine        {Di2015NewLine            if (!(char.IsLower(ca[i])))Di2015NewLine            {Di2015NewLine                result += " ";Di2015NewLine            }Di2015NewLine            result += ca[i];Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string RefactoredMakeNiceString(string str)Di2015NewLine    {Di2015NewLine        char[] ca = str.ToCharArray();Di2015NewLine        StringBuilder sb = new StringBuilder((str.Length * 5 / 4));Di2015NewLine        int i = 0;Di2015NewLine        sb.Append(ca[0]);Di2015NewLine        for (i = 1; i <= ca.Length - 1; i++)Di2015NewLine        {Di2015NewLine            if (!(char.IsLower(ca[i])))Di2015NewLine            {Di2015NewLine                sb.Append(" ");Di2015NewLine            }Di2015NewLine            sb.Append(ca[i]);Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string MakeNiceStringWithStringIndexer(string str)Di2015NewLine    {Di2015NewLine        StringBuilder sb = new StringBuilder((str.Length * 5 / 4));Di2015NewLine        sb.Append(str[0]);Di2015NewLine        for (int i = 1; i < str.Length; i++)Di2015NewLine        {Di2015NewLine            char c = str[i];Di2015NewLine            if (!(char.IsLower(c)))Di2015NewLine            {Di2015NewLine                sb.Append(" ");Di2015NewLine            }Di2015NewLine            sb.Append(c);Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string MakeNiceStringWithForeach(string str)Di2015NewLine    {Di2015NewLine        StringBuilder sb = new StringBuilder(str.Length * 5 / 4);Di2015NewLine        bool first = true;      Di2015NewLine        foreach (char c in str)Di2015NewLine        {Di2015NewLine            if (!first && char.IsUpper(c))Di2015NewLine            {Di2015NewLine                sb.Append(" ");Di2015NewLine            }Di2015NewLine            sb.Append(c);Di2015NewLine            first = false;Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string MakeNiceStringWithForeachAndLinqSkip(string str)Di2015NewLine    {Di2015NewLine        StringBuilder sb = new StringBuilder(str.Length * 5 / 4);Di2015NewLine        sb.Append(str[0]);Di2015NewLine        foreach (char c in str.Skip(1))Di2015NewLine        {Di2015NewLine            if (char.IsUpper(c))Di2015NewLine            {Di2015NewLine                sb.Append(" ");Di2015NewLine            }Di2015NewLine            sb.Append(c);Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string MakeNiceStringWithForeachAndCustomSkip(string str)Di2015NewLine    {Di2015NewLine        StringBuilder sb = new StringBuilder(str.Length * 5 / 4);Di2015NewLine        sb.Append(str[0]);Di2015NewLine        foreach (char c in new SkipEnumerable<char>(str, 1))Di2015NewLine        {Di2015NewLine            if (char.IsUpper(c))Di2015NewLine            {Di2015NewLine                sb.Append(" ");Di2015NewLine            }Di2015NewLine            sb.Append(c);Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string SplitCamelCase(string str)Di2015NewLine    {Di2015NewLine        string[] temp = Regex.Split(str, @"(?<!^)(?=[A-Z])");Di2015NewLine        string result = String.Join(" ", temp);Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static readonly Regex CachedRegex = new Regex("(?<!^)(?=[A-Z])");    Di2015NewLine    private static string SplitCamelCaseCachedRegex(string str)Di2015NewLine    {Di2015NewLine        string[] temp = CachedRegex.Split(str);Di2015NewLine        string result = String.Join(" ", temp);Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static readonly Regex CompiledRegex =Di2015NewLine        new Regex("(?<!^)(?=[A-Z])", RegexOptions.Compiled);    Di2015NewLine    private static string SplitCamelCaseCompiledRegex(string str)Di2015NewLine    {Di2015NewLine        string[] temp = CompiledRegex.Split(str);Di2015NewLine        string result = String.Join(" ", temp);Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private class SkipEnumerable<T> : IEnumerable<T>Di2015NewLine    {Di2015NewLine        private readonly IEnumerable<T> original;Di2015NewLine        private readonly int skip;Di2015NewLineDi2015NewLine        public SkipEnumerable(IEnumerable<T> original, int skip)Di2015NewLine        {Di2015NewLine            this.original = original;Di2015NewLine            this.skip = skip;Di2015NewLine        }Di2015NewLineDi2015NewLine        public IEnumerator<T> GetEnumerator()Di2015NewLine        {Di2015NewLine            IEnumerator<T> ret = original.GetEnumerator();Di2015NewLine            for (int i=0; i < skip; i++)Di2015NewLine            {Di2015NewLine                ret.MoveNext();Di2015NewLine            }Di2015NewLine            return ret;Di2015NewLine        }Di2015NewLineDi2015NewLine        IEnumerator IEnumerable.GetEnumerator()Di2015NewLine        {Di2015NewLine            return GetEnumerator();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
473122Di2015UniqueSeparatorBenchmarkOverhead...  22msDi2015NewLineMakeNiceString...  10062msDi2015NewLineImprovedMakeNiceString...  12367msDi2015NewLineRefactoredMakeNiceString...  3489msDi2015NewLineMakeNiceStringWithStringIndexer...  3115msDi2015NewLineMakeNiceStringWithForeach...  3292msDi2015NewLineMakeNiceStringWithForeachAndLinqSkip...  5702msDi2015NewLineMakeNiceStringWithForeachAndCustomSkip...  4490msDi2015NewLineSplitCamelCase...  68267msDi2015NewLineSplitCamelCaseCachedRegex...  52529msDi2015NewLineSplitCamelCaseCompiledRegex...  26806msDi2015NewLine
473167Di2015UniqueSeparatorScope
473167Di2015UniqueSeparatorScriptEngine engine = Python.CreateEngine();Di2015NewLineengine.Runtime.LoadAssembly(a);Di2015NewLinestring code = "from MyAssembly import MyClass";Di2015NewLineScriptSource source = engine.CreateScriptSourceFromString(code, "<import>", SourceCodeKind.Statements);Di2015NewLineCompiledCode c = source.Compile();Di2015NewLineDi2015NewLineScope scope = engine.CreateScope();Di2015NewLinec.Execute(scope);Di2015NewLineDi2015NewLine// then run your script in the same scopeDi2015NewLine
473297Di2015UniqueSeparatorclass HandleStream : StreamDi2015NewLine{Di2015NewLine    SafeHandle _handle;Di2015NewLine    FileAccess _access;Di2015NewLine    bool _eof;Di2015NewLineDi2015NewLine    public HandleStream(SafeHandle handle, FileAccess access)Di2015NewLine    {Di2015NewLine        _handle = handle;Di2015NewLine        _access = access;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanReadDi2015NewLine    {Di2015NewLine        get { return (_access & FileAccess.Read) != 0; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanSeekDi2015NewLine    {Di2015NewLine        get { return false; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanWriteDi2015NewLine    {Di2015NewLine        get { return (_access & FileAccess.Write) != 0; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Flush()Di2015NewLine    {Di2015NewLine        // use external buffering if you need it.Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long LengthDi2015NewLine    {Di2015NewLine        get { throw new NotSupportedException(); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long PositionDi2015NewLine    {Di2015NewLine        get { throw new NotSupportedException(); }Di2015NewLine        set { throw new NotSupportedException(); }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void CheckRange(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        if (offset < 0 || count < 0 || (offset + count) < 0Di2015NewLine            || (offset + count) > buffer.Length)Di2015NewLine            throw new ArgumentOutOfRangeException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool EndOfStreamDi2015NewLine    {Di2015NewLine        get { return _eof; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int Read(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        CheckRange(buffer, offset, count);Di2015NewLine        int result = ReadFileNative(_handle, buffer, offset, count);Di2015NewLine        _eof |= result == 0;Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Write(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        int notUsed;Di2015NewLine        Write(buffer, offset, count, out notUsed);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Write(byte[] buffer, int offset, int count, out int written)Di2015NewLine    {Di2015NewLine        CheckRange(buffer, offset, count);Di2015NewLine        int result = WriteFileNative(_handle, buffer, offset, count);Di2015NewLine        _eof |= result == 0;Di2015NewLine        written = result;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long Seek(long offset, SeekOrigin origin)Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void SetLength(long value)Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine    [DllImport("kernel32", SetLastError=true)]Di2015NewLine    static extern unsafe bool ReadFile(Di2015NewLine        SafeHandle hFile, byte* lpBuffer, int nNumberOfBytesToRead,Di2015NewLine        out int lpNumberOfBytesRead, IntPtr lpOverlapped);Di2015NewLineDi2015NewLine    [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine    [DllImport("kernel32.dll", SetLastError=true)]Di2015NewLine    static extern unsafe bool WriteFile(Di2015NewLine        SafeHandle hFile, byte* lpBuffer, int nNumberOfBytesToWrite, Di2015NewLine        out int lpNumberOfBytesWritten, IntPtr lpOverlapped);Di2015NewLineDi2015NewLine    unsafe static int WriteFileNative(SafeHandle hFile, byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        if (buffer.Length == 0)Di2015NewLine            return 0;Di2015NewLineDi2015NewLine        fixed (byte* bufAddr = &buffer[0])Di2015NewLine        {Di2015NewLine            int result;Di2015NewLine            if (!WriteFile(hFile, bufAddr + offset, count, out result, IntPtr.Zero))Di2015NewLine            {Di2015NewLine                // Using Win32Exception just to get message resource from OS.Di2015NewLine                Win32Exception ex = new Win32Exception(Marshal.GetLastWin32Error());Di2015NewLine                int hr = ex.NativeErrorCode | unchecked((int) 0x80000000);Di2015NewLine                throw new IOException(ex.Message, hr);Di2015NewLine            }Di2015NewLineDi2015NewLine            return result;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    unsafe static int ReadFileNative(SafeHandle hFile, byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        if (buffer.Length == 0)Di2015NewLine            return 0;Di2015NewLineDi2015NewLine        fixed (byte* bufAddr = &buffer[0])Di2015NewLine        {Di2015NewLine            int result;Di2015NewLine            if (!ReadFile(hFile, bufAddr + offset, count, out result, IntPtr.Zero))Di2015NewLine            {Di2015NewLine                Win32Exception ex = new Win32Exception(Marshal.GetLastWin32Error());Di2015NewLine                int hr = ex.NativeErrorCode | unchecked((int) 0x80000000);Di2015NewLine                throw new IOException(ex.Message, hr);Di2015NewLine            }Di2015NewLine            return result;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
473297Di2015UniqueSeparatorBufferedStream
473297Di2015UniqueSeparatorTextWriter
473297Di2015UniqueSeparatorWin32Exception
473297Di2015UniqueSeparatorFormatMessage
473297Di2015UniqueSeparatorstatic class ConsoleStreamsDi2015NewLine{Di2015NewLine    enum StdHandleDi2015NewLine    {Di2015NewLine        Input = -10,Di2015NewLine        Output = -11,Di2015NewLine        Error = -12,Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("kernel32.dll", SetLastError = true)]Di2015NewLine    static extern IntPtr GetStdHandle(int nStdHandle);  Di2015NewLineDi2015NewLine    static SafeHandle GetStdHandle(StdHandle h)Di2015NewLine    {Di2015NewLine        return new SafeFileHandle(GetStdHandle((int) h), true);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static HandleStream OpenStandardInput()Di2015NewLine    {Di2015NewLine        return new HandleStream(GetStdHandle(StdHandle.Input), FileAccess.Read);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static HandleStream OpenStandardOutput()Di2015NewLine    {Di2015NewLine        return new HandleStream(GetStdHandle(StdHandle.Output), FileAccess.Write);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static HandleStream OpenStandardError()Di2015NewLine    {Di2015NewLine        return new HandleStream(GetStdHandle(StdHandle.Error), FileAccess.Write);Di2015NewLine    }Di2015NewLineDi2015NewLine    static TextReader _in;Di2015NewLine    static StreamWriter _out;Di2015NewLine    static StreamWriter _error;Di2015NewLineDi2015NewLine    public static TextWriter OutDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (_out == null)Di2015NewLine            {Di2015NewLine                _out = new StreamWriter(OpenStandardOutput());Di2015NewLine                _out.AutoFlush = true;Di2015NewLine            }Di2015NewLine            return _out;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static TextWriter ErrorDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (_error == null)Di2015NewLine            {Di2015NewLine                _error = new StreamWriter(OpenStandardError());Di2015NewLine                _error.AutoFlush = true;Di2015NewLine            }Di2015NewLine            return _error;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static TextReader InDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (_in == null)Di2015NewLine                _in = new StreamReader(OpenStandardInput());Di2015NewLine            return _in;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
473297Di2015UniqueSeparatorIOException
473301Di2015UniqueSeparatorpublic static IMobileAdapter CreateAdapter(Type AdapterType)Di2015NewLine{Di2015NewLine  return (IMobileAdapter)System.Activator.CreateInstance(AdapterType);Di2015NewLine}Di2015NewLine
473301Di2015UniqueSeparatorpublic static IMyClassInterface CreateClass(string MyClassType)Di2015NewLine{Di2015NewLine  return (IMyClassInterface)System.Activator.CreateInstance(Type.GetType(MyClassType));Di2015NewLine}Di2015NewLine
473301Di2015UniqueSeparatorIMyClassInterface myInst = CreateClass("MyNamespace.MyClass, MyAssembly");Di2015NewLine
473301Di2015UniqueSeparatorForm myInst = CreateClass("MyExtendedForm");Di2015NewLine
473301Di2015UniqueSeparatorForm myInst = CreateClass(Type.GetType("MyExtendedForm"));Di2015NewLine
473301Di2015UniqueSeparatorclass MyCustomForm : FormDi2015NewLine{Di2015NewLine    public int myCustomField{ get; set; }Di2015NewLine}Di2015NewLine
473301Di2015UniqueSeparatorpublic static Form CreateClass(string InstanceName)Di2015NewLine{Di2015NewLine    return (Form)System.Activator.CreateInstance(Type.GetType(InstanceName));Di2015NewLine}Di2015NewLine
473301Di2015UniqueSeparatorForm myInst = CreateClass("MyCustomForm");Di2015NewLine
473301Di2015UniqueSeparatorint someVal = ((Type.GetType("MyCustomForm"))myInst).myCustomField;Di2015NewLine
473381Di2015UniqueSeparatorstatic void Main() {Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        SubMain();Di2015NewLine    }Di2015NewLine    catch (Exception e)Di2015NewLine    {Di2015NewLine        HandleUnhandledException(e);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void SubMain()Di2015NewLine{Di2015NewLine    // Setup unhandled exception handlersDi2015NewLine    AppDomain.CurrentDomain.UnhandledException += // CLRDi2015NewLine       new UnhandledExceptionEventHandler(OnUnhandledException);Di2015NewLine     Application.ThreadException += // Windows FormsDi2015NewLine       new System.Threading.ThreadExceptionEventHandler(Di2015NewLine           OnGuiUnhandledException);Di2015NewLine     Application.EnableVisualStyles();Di2015NewLine     Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine     Application.Run(new frmMain());Di2015NewLine}Di2015NewLineDi2015NewLine// CLR unhandled exceptionDi2015NewLineprivate static void OnUnhandledException(Object sender,Di2015NewLine   UnhandledExceptionEventArgs e)Di2015NewLine{Di2015NewLine    HandleUnhandledException(e.ExceptionObject);Di2015NewLine}Di2015NewLineDi2015NewLine// Windows Forms unhandled exceptionDi2015NewLineprivate static void OnGuiUnhandledException(Object sender,Di2015NewLine   System.Threading.ThreadExceptionEventArgs e)Di2015NewLine{Di2015NewLine    HandleUnhandledException(e.Exception);Di2015NewLine}Di2015NewLine
473716Di2015UniqueSeparatorpublic class PurchaseOrderDi2015NewLine{Di2015NewLine    public PurchaseOrder(string newNumber, string newLine)Di2015NewLine    {Di2015NewLine        NewNumber = newNumber;Di2015NewLine        NewLine = newLine;Di2015NewLine    }Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
473716Di2015UniqueSeparatorGetNewNumber
473716Di2015UniqueSeparatorGetNewLine
473716Di2015UniqueSeparatorPurchaseOrder
473716Di2015UniqueSeparatorpublic static PurchaseOrder CreatePurchaseOrder(string purchaseOrderText)Di2015NewLine{Di2015NewLine   return new PurchaseOrder(Di2015NewLine     GetNewNumber(purchaseOrderText),Di2015NewLine     GetNewLine(purchaseOrderText));Di2015NewLine}Di2015NewLine
473757Di2015UniqueSeparatorUITypeEditor
473757Di2015UniqueSeparatorTypeDescriptor
473757Di2015UniqueSeparatorIServiceProvider
473757Di2015UniqueSeparatorIWindowsFormsEditorService
473757Di2015UniqueSeparatorITypeDescriptorContext
473757Di2015UniqueSeparatorPropertyGrid
473757Di2015UniqueSeparatorMyHelper
473757Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Drawing.Design;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Windows.Forms.Design;Di2015NewLineclass FooDi2015NewLine{Di2015NewLine    public Foo() { Bars = new List<Bar>(); }Di2015NewLine    public List<Bar> Bars { get; private set; }Di2015NewLine}Di2015NewLineclass BarDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public DateTime DateOfBirth { get; set; }Di2015NewLine}Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Foo foo = new Foo();Di2015NewLine        Bar bar = new Bar();Di2015NewLine        bar.Name = "Fred";Di2015NewLine        bar.DateOfBirth = DateTime.Today;Di2015NewLine        foo.Bars.Add(bar);Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        using(Form form = new Form())Di2015NewLine        using (Button btn = new Button())Di2015NewLine        {Di2015NewLine            form.Controls.Add(btn);Di2015NewLine            btn.Text = "Edit";Di2015NewLine            btn.Click += delegateDi2015NewLine            {Di2015NewLine                MyHelper.EditValue(form, foo, "Bars");Di2015NewLine            };Di2015NewLine            Application.Run(form);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyHelper : IWindowsFormsEditorService, IServiceProvider, ITypeDescriptorContextDi2015NewLine{Di2015NewLine    public static void EditValue(IWin32Window owner, object component, string propertyName) {Di2015NewLine        PropertyDescriptor prop = TypeDescriptor.GetProperties(component)[propertyName];Di2015NewLine        if(prop == null) throw new ArgumentException("propertyName");Di2015NewLine        UITypeEditor editor = (UITypeEditor) prop.GetEditor(typeof(UITypeEditor));Di2015NewLine        MyHelper ctx = new MyHelper(owner, component, prop);Di2015NewLine        if(editor != null && editor.GetEditStyle(ctx) == UITypeEditorEditStyle.Modal)Di2015NewLine        {Di2015NewLine            object value = prop.GetValue(component);Di2015NewLine            value = editor.EditValue(ctx, ctx, value);Di2015NewLine            if (!prop.IsReadOnly)Di2015NewLine            {Di2015NewLine                prop.SetValue(component, value);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private readonly IWin32Window owner;Di2015NewLine    private readonly object component;Di2015NewLine    private readonly PropertyDescriptor property;Di2015NewLine    private MyHelper(IWin32Window owner, object component, PropertyDescriptor property)Di2015NewLine    {Di2015NewLine        this.owner = owner;Di2015NewLine        this.component = component;Di2015NewLine        this.property = property;Di2015NewLine    }Di2015NewLine    #region IWindowsFormsEditorService MembersDi2015NewLineDi2015NewLine    public void CloseDropDown()Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DropDownControl(System.Windows.Forms.Control control)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public System.Windows.Forms.DialogResult ShowDialog(System.Windows.Forms.Form dialog)Di2015NewLine    {Di2015NewLine        return dialog.ShowDialog(owner);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region IServiceProvider MembersDi2015NewLineDi2015NewLine    public object GetService(Type serviceType)Di2015NewLine    {Di2015NewLine        return serviceType == typeof(IWindowsFormsEditorService) ? this : null;Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region ITypeDescriptorContext MembersDi2015NewLineDi2015NewLine    IContainer ITypeDescriptorContext.ContainerDi2015NewLine    {Di2015NewLine        get { return null; }Di2015NewLine    }Di2015NewLineDi2015NewLine    object ITypeDescriptorContext.InstanceDi2015NewLine    {Di2015NewLine        get { return component; }Di2015NewLine    }Di2015NewLineDi2015NewLine    void ITypeDescriptorContext.OnComponentChanged()Di2015NewLine    {}Di2015NewLineDi2015NewLine    bool ITypeDescriptorContext.OnComponentChanging()Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    PropertyDescriptor ITypeDescriptorContext.PropertyDescriptorDi2015NewLine    {Di2015NewLine        get { return property; }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
473938Di2015UniqueSeparatorpublic class LogContext: IDisposableDi2015NewLine{Di2015NewLine  private readonly Logger _logger;Di2015NewLine  private readonly string _context;Di2015NewLineDi2015NewLine  public LogContext(Logger logger, string context){Di2015NewLine    _logger = logger;Di2015NewLine    _context = context;Di2015NewLine    _logger.EnterContext(_context);Di2015NewLine  }Di2015NewLineDi2015NewLine  public void Dispose(){Di2015NewLine    _logger.LeaveContext(_context);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine//...Di2015NewLineDi2015NewLinepublic void Load(){Di2015NewLine  using(new LogContext(logger, "Loading")){Di2015NewLine    // perform loadDi2015NewLine  }Di2015NewLine}Di2015NewLine
473939Di2015UniqueSeparatorinterface IMyTable<T> {Di2015NewLine  Table<T> Table;Di2015NewLine}Di2015NewLineDi2015NewLinepublic MyClass<TContext,T> where TContext : DataContext,IMyTable<T>Di2015NewLine
473939Di2015UniqueSeparatorinterface IMyTable2<T> {Di2015NewLine  DataContext DataContext {get; }Di2015NewLine  Table<T> Table {get; }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyAdapter: IMyTable2<T> {Di2015NewLine  private MyOtherClass<T> _other;Di2015NewLine  public DataContext DataContext { get { return _other.DataContext } }Di2015NewLine  public Table<T> Table { get { return _other.TableWithDifferentName; } }Di2015NewLine}Di2015NewLine
474069Di2015UniqueSeparatorresourceName
474069Di2015UniqueSeparator Assembly assembly = Assembly.GetExecutingAssembly();Di2015NewLine TextReader inputStream = new StreamReader(assembly.GetManifestResourceStream(resourceName));Di2015NewLine string result = inputStream.ReadToEnd();Di2015NewLine
474196Di2015UniqueSeparatorpublic static class ExtendersDi2015NewLine{Di2015NewLine    public static T[] FillWith<T>( this T[] array, T value )Di2015NewLine    {Di2015NewLine        for(int i = 0; i < array.Length; i++)Di2015NewLine        {Di2015NewLine            array[i] = value;Di2015NewLine        }Di2015NewLine        return array;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// now you can do this...Di2015NewLineint[] array = new int[100];Di2015NewLinearray.FillWith( 42 );Di2015NewLine
474198Di2015UniqueSeparatorpublic TrafficTotals CalculateTotals(DataTable table, Di2015NewLine                                     Func<DataRow, bool> filter)Di2015NewLine{Di2015NewLine    TrafficTotals total = new TrafficTotals();Di2015NewLine    total.TotalTraffic = table.AsEnumerable()Di2015NewLine                              .Where(filter)Di2015NewLine                              .Sum(p => p.Field<int>("Converted"));Di2015NewLine    // More stuffDi2015NewLine}Di2015NewLine
474198Di2015UniqueSeparatortotals = CalculateTotals(table, Di2015NewLine                         row => row.Field<string>("MyColumn") == "Hello");Di2015NewLine
474288Di2015UniqueSeparatorQueue<T>
474288Di2015UniqueSeparatorQueue<T>
474288Di2015UniqueSeparatorAction<IGameAction>
474382Di2015UniqueSeparator  string newString = Regex.Replace("abc", "b", "<td>${0}</td>");Di2015NewLine
474382Di2015UniqueSeparatora<td>b</td>c
474382Di2015UniqueSeparatorRegex r = new Regex(negRegexPattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);Di2015NewLinetext = r.Replace(text, "<td>${0}</td>");Di2015NewLine
474410Di2015UniqueSeparatorint GetIntFromConfigSetting(string settingName, int defaultValue)Di2015NewLine{Di2015NewLine   int retValue = defaultValue;Di2015NewLine   if(this.ContainsKey(settingName))Di2015NewLine   {Di2015NewLine      int sleepInterval;Di2015NewLine      if(Int32.TryParse(this[settingName], out sleepInterval)Di2015NewLine      {Di2015NewLine         retValue = sleepInterval;Di2015NewLine      }Di2015NewLine   }Di2015NewLine   return retValue;Di2015NewLine}Di2015NewLine
474585Di2015UniqueSeparatorthrow new InvalidDataException("A wurble can't follow a flurble");Di2015NewLine
474743Di2015UniqueSeparator[DllImport("Kernel32")]Di2015NewLineprivate static extern bool SetConsoleCtrlHandler(EventHandler handler, bool add);Di2015NewLineDi2015NewLineprivate delegate bool EventHandler(CtrlType sig);Di2015NewLinestatic EventHandler _handler;Di2015NewLineDi2015NewLineenum CtrlTypeDi2015NewLine{Di2015NewLine  CTRL_C_EVENT = 0,Di2015NewLine  CTRL_BREAK_EVENT = 1,Di2015NewLine  CTRL_CLOSE_EVENT = 2,Di2015NewLine  CTRL_LOGOFF_EVENT = 5,Di2015NewLine  CTRL_SHUTDOWN_EVENT = 6Di2015NewLine}Di2015NewLineDi2015NewLineprivate static bool Handler(CtrlType sig)Di2015NewLine{Di2015NewLine  switch (sig)Di2015NewLine  {Di2015NewLine      case CtrlType.CTRL_C_EVENT:Di2015NewLine      case CtrlType.CTRL_LOGOFF_EVENT:Di2015NewLine      case CtrlType.CTRL_SHUTDOWN_EVENT:Di2015NewLine      case CtrlType.CTRL_CLOSE_EVENT:Di2015NewLine      default:Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine  // Some biolerplate to react to close window eventDi2015NewLine  _handler += new EventHandler(Handler);Di2015NewLine  SetConsoleCtrlHandler(_handler, true);Di2015NewLine  ...Di2015NewLine}Di2015NewLine
474859Di2015UniqueSeparatorpublic object GetDefault(Type type)Di2015NewLine{Di2015NewLine    return type.IsValueType ? Activator.CreateInstance(type) : null;Di2015NewLine}Di2015NewLine
475053Di2015UniqueSeparatorusing System.Management;Di2015NewLineDi2015NewLineclass NetworkControllerDi2015NewLine{Di2015NewLineDi2015NewLine    public static void Disable()Di2015NewLine    {Di2015NewLine        SetIP("192.168.0.4", "255.255.255.0");Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Enable()Di2015NewLine    {Di2015NewLine        SetDHCP();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private static void SetIP(string ip_address, string subnet_mask)Di2015NewLine    {Di2015NewLine        ManagementClass objMC = new ManagementClass("Win32_NetworkAdapterConfiguration");Di2015NewLine        ManagementObjectCollection objMOC = objMC.GetInstances();Di2015NewLineDi2015NewLine        foreach (ManagementObject objMO in objMOC) {Di2015NewLine            if ((bool)objMO("IPEnabled")) {Di2015NewLine                try {Di2015NewLine                    ManagementBaseObject setIP = default(ManagementBaseObject);Di2015NewLine                    ManagementBaseObject newIP = objMO.GetMethodParameters("EnableStatic");Di2015NewLineDi2015NewLine                    newIP("IPAddress") = new string[] { ip_address };Di2015NewLine                    newIP("SubnetMask") = new string[] { subnet_mask };Di2015NewLineDi2015NewLine                    setIP = objMO.InvokeMethod("EnableStatic", newIP, null);Di2015NewLine                }Di2015NewLine                catch (Exception generatedExceptionName) {Di2015NewLine                    throw;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void SetDHCP()Di2015NewLine    {Di2015NewLine        ManagementClass mc = new ManagementClass("Win32_NetworkAdapterConfiguration");Di2015NewLine        ManagementObjectCollection moc = mc.GetInstances();Di2015NewLineDi2015NewLine        foreach (ManagementObject mo in moc) {Di2015NewLine            // Make sure this is a IP enabled device. Not something like memory card or VM WareDi2015NewLine            if ((bool)mo("IPEnabled")) {Di2015NewLine                ManagementBaseObject newDNS = mo.GetMethodParameters("SetDNSServerSearchOrder");Di2015NewLine                newDNS("DNSServerSearchOrder") = null;Di2015NewLine                ManagementBaseObject enableDHCP = mo.InvokeMethod("EnableDHCP", null, null);Di2015NewLine                ManagementBaseObject setDNS = mo.InvokeMethod("SetDNSServerSearchOrder", newDNS, null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
475079Di2015UniqueSeparatorSingle xDpi, yDpi;Di2015NewLineDi2015NewLineIntPtr dc = GetDC(IntPtr.Zero);Di2015NewLineDi2015NewLineusing(Graphics g = Graphics.FromHdc(dc))Di2015NewLine{Di2015NewLine    xDpi = g.DpiX;Di2015NewLine    yDpi = g.DpiY;Di2015NewLine}Di2015NewLineDi2015NewLineif (ReleaseDC(IntPtr.Zero) != 0)Di2015NewLine{Di2015NewLine    // GetLastError and handle...Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLineprivate static extern IntPtr GetDC(IntPtr hwnd);    Di2015NewLine[DllImport("user32.dll")]Di2015NewLineprivate static extern Int32 ReleaseDC(IntPtr hwnd);Di2015NewLine
475182Di2015UniqueSeparatorSELECTDi2015NewLineq.TechQuestionID,Di2015NewLineq.SubjectLine,Di2015NewLineq.QuestionBodyDi2015NewLineFROMDi2015NewLineTag t INNER JOIN TechQuestionTag qtDi2015NewLineON t.TagID = qt.TagID AND qt.Active = 1Di2015NewLineINNER JOIN TechQuestion qDi2015NewLineON qt.TechQuestionID = q.TechQuestionIDDi2015NewLineWHEREDi2015NewLinet.TagText = @tagTextDi2015NewLine
475289Di2015UniqueSeparatorprivate void lstItems_DrawItem(object sender, DrawItemEventArgs e)Di2015NewLine
475313Di2015UniqueSeparator<stuff1>Di2015NewLine   <content/>Di2015NewLine</stuff1>Di2015NewLine
475313Di2015UniqueSeparator<stuff id="1">Di2015NewLine    <content/>Di2015NewLine</stuff>Di2015NewLine
475313Di2015UniqueSeparatorforeach (XmlNode n in YourDoc.ChildNodes)Di2015NewLine{        Di2015NewLine    n.ChildNode[0].Name = n.Name + n.ChildNode[0].Name;Di2015NewLine}Di2015NewLineDi2015NewLineYourDoc.Save();Di2015NewLine
475425Di2015UniqueSeparatorFile.ReadAllBytes
475425Di2015UniqueSeparatorConvert.ToBase64String(bytes)
475432Di2015UniqueSeparatorIFormatProvider
475432Di2015UniqueSeparatornull
475432Di2015UniqueSeparatorCultureInfo.CurrentCulture
475432Di2015UniqueSeparatorIFormatProvider
475432Di2015UniqueSeparatorCultureInfo.CurrentCulture
475432Di2015UniqueSeparatorCultureInfo.CurrentUICulture
475535Di2015UniqueSeparator((ListControl)cbListBox).DataSource = fieldList.Select( f => f.objectName )Di2015NewLine                                               .Distinct()Di2015NewLine                                               .ToList() );Di2015NewLine
475535Di2015UniqueSeparatorcbListBox.Items.AddRange( fieldList.Select( f => f.objectName )Di2015NewLine                                   .Distinct()Di2015NewLine                                   .ToArray() );Di2015NewLine
475622Di2015UniqueSeparatorAmps | CableSize | CableType | TempRating | SystemType | ConduitType | CableQty | ConduitSizeDi2015NewLine
475622Di2015UniqueSeparatorSELECT CableQty, ConduitSize Di2015NewLineFROM Table Di2015NewLineWHERE Amps = @amps AND CableSize = @cableSize...etcDi2015NewLine
475622Di2015UniqueSeparatorconst int AMPS = 0; const int CABLE_SIZE = 1; const int TEMP_RATING = 2; // etc.Di2015NewLinevar mappings = new Dictionary<int[], int[]>(12 * 13 * 2 * 3 * 2 * 2);Di2015NewLinemappings.Add(Di2015NewLine   new int[] { 1, 1, 1, 1, 1, 1 }, // inputsDi2015NewLine   new int[] { 1, 2 } //outputsDi2015NewLine);Di2015NewLine// repeat...a lotDi2015NewLineDi2015NewLinevar outputs = mappings.First(inputs => {Di2015NewLine   inputs[AMPS] == myAmpsDi2015NewLine   && inputs[CABLE_SIZE] == myCableSizeDi2015NewLine   && inputs[TEMP_RATING] == myTempRatingDi2015NewLine   && // etcDi2015NewLine});Di2015NewLine
475731Di2015UniqueSeparatorvar selectedNames = ... // List of selected namesDi2015NewLinevar selectedFields = (from f in fieldListDi2015NewLine                      where selectedNames.Contains(f.objectName)Di2015NewLine                      select f.FieldName).Distinct().ToList();Di2015NewLine
475820Di2015UniqueSeparatorProtected Sub Page_Load(sender As Object, e As EventArgs) Handles MyBase.LoadDi2015NewLine   If Page.IsPostBack ThenDi2015NewLine      Dim lb as ListButton = TryCast(Page.FindControl("IDOfControl"), LinkButton)Di2015NewLine      lb.Click += new EventHandler(showModalPopup);Di2015NewLine   End IfDi2015NewLineEnd SubDi2015NewLine
475918Di2015UniqueSeparatorpublic class CustomerController : ControllerDi2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinepublic ActionResult Search(int id)Di2015NewLine{Di2015NewLine ViewData["SearchResult"] = MySearchBLL.GetSearchResults(id);Di2015NewLineDi2015NewLine return View("Index");Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLine
476048Di2015UniqueSeparator[DllImport("user32.dll", SetLastError = true)]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLineinternal static extern bool PostMessage(IntPtr handle, int message, IntPtr wparam, IntPtr lparam);Di2015NewLine
476053Di2015UniqueSeparatorClassA()Di2015NewLine{Di2015NewLine  memberB = new ClassB();Di2015NewLine}Di2015NewLineDi2015NewLineMethodA()Di2015NewLine{Di2015NewLine  memberB = new ClassB();Di2015NewLine}Di2015NewLine
476053Di2015UniqueSeparatormemberB
476053Di2015UniqueSeparatorclassB
476053Di2015UniqueSeparatorclassA
476053Di2015UniqueSeparatorclassB
476053Di2015UniqueSeparatorinstance 1
476053Di2015UniqueSeparatormemberB
476053Di2015UniqueSeparatormethodA
476053Di2015UniqueSeparatorclassB
476053Di2015UniqueSeparatormemberB
476053Di2015UniqueSeparatormemberB
476053Di2015UniqueSeparatorinstance 2
476053Di2015UniqueSeparatorinstance 1
476053Di2015UniqueSeparatorGC.Collect()
476053Di2015UniqueSeparatorIDisposable
476053Di2015UniqueSeparatorusing
476332Di2015UniqueSeparator[DllImport("CoreDll.dll")]Di2015NewLinepublic static extern void MessageBeep(int code);Di2015NewLineDi2015NewLinepublic static void MessageBeep() {Di2015NewLine  MessageBeep(-1);  // Default beep code is -1Di2015NewLine}Di2015NewLine
476504Di2015UniqueSeparatorCompanyName.ProductNameDi2015NewLineCompanyName.ProductName.ClassNameDi2015NewLineCompanyName.ClassName.IsUpperCase(string str)Di2015NewLine
476520Di2015UniqueSeparatorglEnable( GL_TEXTURE_2D );Di2015NewLine
476554Di2015UniqueSeparatorclass Dummy<K,T> where T : class, KDi2015NewLine
476554Di2015UniqueSeparatorwhere K : class
476654Di2015UniqueSeparatorTypeConverter
476654Di2015UniqueSeparator    Type type = typeof(double);Di2015NewLine    string text = "123.45";Di2015NewLineDi2015NewLine    object value = TypeDescriptor.GetConverter(type)Di2015NewLine        .ConvertFromInvariantString(text);Di2015NewLine
476654Di2015UniqueSeparatortry
476654Di2015UniqueSeparatorcatch
476734Di2015UniqueSeparatortxtCarsTextChanged
476734Di2015UniqueSeparatortxtCars
476742Di2015UniqueSeparatorForEach
476742Di2015UniqueSeparatorAction<T>
476742Di2015UniqueSeparatorpublic static void ForEach<T>(this IEnumerable<T> source, Action<T> action)Di2015NewLine{   // note: omitted arg/null checksDi2015NewLine    foreach(T item in source) { action(item); }Di2015NewLine}Di2015NewLine
476742Di2015UniqueSeparator.ForEach(x => /* do something */)
476965Di2015UniqueSeparatorpublic event EventHandler Event;Di2015NewLinepublic void RaiseEvent() {Di2015NewLine    this.Event(this, new EventArgs());Di2015NewLine}Di2015NewLine
476965Di2015UniqueSeparatorprivate EventHandler backEndStorage;Di2015NewLinepublic event EventHandler Event {Di2015NewLine    add { this.backEndStorage += value; }Di2015NewLine    remove { this.backEndStorage -= value; }Di2015NewLine}Di2015NewLinepublic void RaiseEvent() {Di2015NewLine    this.backEndStorage(this, new EventArgs());Di2015NewLine}Di2015NewLine
476965Di2015UniqueSeparatorpublic interface IFooDi2015NewLine{Di2015NewLine    event EventHandler<FooEventArgs> FooValueChanged;Di2015NewLine    void RaiseFooValueChanged(IFooView sender, FooEventArgs  e);Di2015NewLine}Di2015NewLineDi2015NewLine[TypeDescriptionProvider(typeof(FooBaseImplementor))]Di2015NewLinepublic abstract class FooBase : Control, IFooDi2015NewLine{Di2015NewLine    protected event EventHandler<FooEventArgs> backEndStorage;Di2015NewLine    public event EventHandler<FooEventArgs> FooValueChanged {Di2015NewLine        add { this.backEndStorage += value; }Di2015NewLine        remove { this.backEndStorage -= value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void RaiseFooValueChanged(IFooView sender, FooEventArgs e)Di2015NewLine    {Di2015NewLine        this.backEndStorage(sender, e);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FooDerived : FooBase {Di2015NewLine    public event EventHandler<FooEventArgs> AnotherFooValueChanged {Di2015NewLine        add { this.backEndStorage += value; }Di2015NewLine        remove { this.backEndStorage -= value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
478030Di2015UniqueSeparatorType.GetFields
478030Di2015UniqueSeparatorPropertyInfo.SetValue
478030Di2015UniqueSeparatorPropertyInfo.GetSetMethod
478030Di2015UniqueSeparatornull
478030Di2015UniqueSeparatorvar properties = TypeDescriptor.GetProperties(sample);Di2015NewLinewhile (nwReader.Read()) {Di2015NewLine    // No way to create a constructor so this call creates the object without calling a ctor. Could this be a source of the problem?Di2015NewLine    T obj = (T)FormatterServices.GetUninitializedObject(typeof(T)); Di2015NewLine    foreach (PropertyDescriptor info in properties) {Di2015NewLine        for (int i = 0; i < nwReader.FieldCount; i++) {Di2015NewLine            if (info.Name == nwReader.GetName(i)) {Di2015NewLine                // This loop runs fine but there is no change to obj!!Di2015NewLine                info.SetValue(obj, nwReader[i]);Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    fdList.Add(obj);Di2015NewLine}Di2015NewLine
478030Di2015UniqueSeparatorPropertyInfo[] properties = sample.GetType().GetProperties();Di2015NewLinewhile (nwReader.Read()) {Di2015NewLine    // No way to create a constructor so this call creates the object without calling a ctor. Could this be a source of the problem?Di2015NewLine    T obj = (T)FormatterServices.GetUninitializedObject(typeof(T));Di2015NewLine    foreach (PropertyInfo info in properties) {Di2015NewLine        for (int i = 0; i < nwReader.FieldCount; i++) {Di2015NewLine            if (info.Name == nwReader.GetName(i)) {Di2015NewLine                // This loop will throw an exception as PropertyInfo.GetSetMethod failsDi2015NewLine                info.SetValue(obj, nwReader[i], null);Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    fdList.Add(obj);Di2015NewLine}Di2015NewLine
478030Di2015UniqueSeparatorActivator.CreateInstance
478030Di2015UniqueSeparatorvar car = new { Make = "Honda", Model = "Civic", Year = 2008 };Di2015NewLinevar anothercar = Activator.CreateInstance(car.GetType(), new object[] { "Ford", "Focus", 2005 });Di2015NewLine
478030Di2015UniqueSeparatorActivator.CreateInstance
478030Di2015UniqueSeparatorActivator.CreateInstance
478030Di2015UniqueSeparatorforeach (PropertyDescriptor info in properties) {Di2015NewLine    for (int i = 0; i < nwReader.FieldCount; i++) {Di2015NewLine        if (info.Name == nwReader.GetName(i)) {Di2015NewLine            // This loop runs fine but there is no change to obj!!Di2015NewLine            info.SetValue(obj, nwReader[i]);Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
478030Di2015UniqueSeparatorforeach (PropertyDescriptor info in properties) {Di2015NewLine            info.SetValue(obj, nwReader[info.Name]);Di2015NewLine}Di2015NewLine
478081Di2015UniqueSeparator<xsl:template match="*">Di2015NewLine   <xsl:variable name="cfg" select="$config/*[name() = current()]"/>Di2015NewLine   <xsl:choose>Di2015NewLine      <xsl:when test="cfg/elementType = 'option'">Di2015NewLine         <xsl:apply-templates select="." mode="option">Di2015NewLine      <xsl:when test="cfg/elementType = 'optgroup'">Di2015NewLine         <xsl:apply-templates select="." mode="optgroup">Di2015NewLine      <xsl:when test="cfg/elementType = 'a'">Di2015NewLine         <xsl:apply-templates select="." mode="a">Di2015NewLine
478081Di2015UniqueSeparatorusing (XmlWriter xw = XmlWriter.Create(new StringWriter(output)))Di2015NewLine{Di2015NewLine    StringBuilder output = new StringBuilder();Di2015NewLine    XsltArgumentList args = new XsltArgumentList();Di2015NewLine    args.AddParam("config", myConfigXml);Di2015NewLine    myXslt.Transform(myXml, args, xw);Di2015NewLine    xw.Flush();Di2015NewLine    myWebBrowser.DocumentText = output.ToString();Di2015NewLine}Di2015NewLine
478466Di2015UniqueSeparator[AttributeProvider(typeof(IListSource))]Di2015NewLine
478466Di2015UniqueSeparator[TypeConverter("System.Windows.Forms.Design.DataSourceConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]Di2015NewLine[Editor("System.Windows.Forms.Design.DataSourceListEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]Di2015NewLine
478466Di2015UniqueSeparator[TypeConverter("System.Windows.Forms.Design.DataSourceConverter, System.Design")]Di2015NewLine[Editor("System.Windows.Forms.Design.DataSourceListEditor, System.Design", typeof(UITypeEditor))]Di2015NewLine
478477Di2015UniqueSeparatordecimal
478477Di2015UniqueSeparatordecimal
478515Di2015UniqueSeparatorreturn test ? widgets.AsEnumerable() : widgets.Reverse();Di2015NewLine
478557Di2015UniqueSeparator// First implement a foldl function, with the signature (a->b->a) -> a -> [b] -> aDi2015NewLine// Now use your foldl function to implement a map function, with the signature (a->b) -> [a] -> [b]Di2015NewLine// Finally use your map function to convert an array of strings to upper caseDi2015NewLine//Di2015NewLine// Test cases are in TestFoldMapUCase.csDi2015NewLine//Di2015NewLine// Note: F# provides standard implementations of the fold and map operations, but the Di2015NewLine// exercise here is to build them up from primitive elements...Di2015NewLineDi2015NewLinemodule FoldMapUCase.ZumbroDi2015NewLine#lightDi2015NewLineDi2015NewLineDi2015NewLinelet AlwaysTwo =Di2015NewLine   2Di2015NewLineDi2015NewLinelet rec foldl fn seed vals = Di2015NewLine   match vals withDi2015NewLine   | head :: tail -> foldl fn (fn seed head) tailDi2015NewLine   | _ -> seedDi2015NewLineDi2015NewLineDi2015NewLinelet map fn vals =Di2015NewLine   let gn lst x =Di2015NewLine      fn( x ) :: lstDi2015NewLine   List.rev (foldl gn [] vals)Di2015NewLineDi2015NewLineDi2015NewLinelet ucase vals =Di2015NewLine   map String.uppercase valsDi2015NewLine
478557Di2015UniqueSeparator// Test cases for FoldMapUCase.fsDi2015NewLine//Di2015NewLine// For this example, I have written my NUnit test cases in C#.  This requires constructing some F#Di2015NewLine// types in order to invoke the F# functions under test.Di2015NewLineDi2015NewLineDi2015NewLineusing System;Di2015NewLineusing Microsoft.FSharp.Core;Di2015NewLineusing Microsoft.FSharp.Collections;Di2015NewLineusing NUnit.Framework;Di2015NewLineDi2015NewLinenamespace FoldMapUCaseDi2015NewLine{Di2015NewLine    [TestFixture]Di2015NewLine    public class TestFoldMapUCaseDi2015NewLine    {Di2015NewLine        public TestFoldMapUCase()Di2015NewLine        {            Di2015NewLine        }Di2015NewLineDi2015NewLine        [Test]Di2015NewLine        public void CheckAlwaysTwo()Di2015NewLine        {Di2015NewLine            // simple example to show how to access F# function from C#Di2015NewLine            int n = Zumbro.AlwaysTwo;Di2015NewLine            Assert.AreEqual(2, n);Di2015NewLine        }Di2015NewLineDi2015NewLine        class Helper<T>Di2015NewLine        {Di2015NewLine            public static List<T> mkList(params T[] ar)Di2015NewLine            {Di2015NewLine                List<T> foo = List<T>.Nil;Di2015NewLine                for (int n = ar.Length - 1; n >= 0; n--)Di2015NewLine                    foo = List<T>.Cons(ar[n], foo);Di2015NewLine                return foo;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        [Test]Di2015NewLine        public void foldl1()Di2015NewLine        {Di2015NewLine            int seed = 64;Di2015NewLine            List<int> values = Helper<int>.mkList( 4, 2, 4 );Di2015NewLine            FastFunc<int, FastFunc<int,int>> fn =Di2015NewLine                FuncConvert.ToFastFunc( (Converter<int,int,int>) delegate( int a, int b ) { return a/b; } );Di2015NewLineDi2015NewLine            int result = Zumbro.foldl<int, int>( fn, seed, values);Di2015NewLine            Assert.AreEqual(2, result);Di2015NewLine        }Di2015NewLineDi2015NewLine        [Test]Di2015NewLine        public void foldl0()Di2015NewLine        {Di2015NewLine            string seed = "hi mom";Di2015NewLine            List<string> values = Helper<string>.mkList();Di2015NewLine            FastFunc<string, FastFunc<string, string>> fn =Di2015NewLine                FuncConvert.ToFastFunc((Converter<string, string, string>)delegate(string a, string b) { throw new Exception("should never be invoked"); });Di2015NewLineDi2015NewLine            string result = Zumbro.foldl<string, string>(fn, seed, values);Di2015NewLine            Assert.AreEqual(seed, result);Di2015NewLine        }Di2015NewLineDi2015NewLine        [Test]Di2015NewLine        public void map()Di2015NewLine        {Di2015NewLine            FastFunc<int, int> fn =Di2015NewLine                FuncConvert.ToFastFunc((Converter<int, int>)delegate(int a) { return a*a; });Di2015NewLineDi2015NewLine            List<int> vals = Helper<int>.mkList(1, 2, 3);Di2015NewLine            List<int> res = Zumbro.map<int, int>(fn, vals);Di2015NewLineDi2015NewLine            Assert.AreEqual(res.Length, 3);Di2015NewLine            Assert.AreEqual(1, res.Head);Di2015NewLine            Assert.AreEqual(4, res.Tail.Head);Di2015NewLine            Assert.AreEqual(9, res.Tail.Tail.Head);Di2015NewLine        }Di2015NewLineDi2015NewLine        [Test]Di2015NewLine        public void ucase()Di2015NewLine        {Di2015NewLine            List<string> vals = Helper<string>.mkList("arnold", "BOB", "crAIg");Di2015NewLine            List<string> exp = Helper<string>.mkList( "ARNOLD", "BOB", "CRAIG" );Di2015NewLine            List<string> res = Zumbro.ucase(vals);Di2015NewLine            Assert.AreEqual(exp.Length, res.Length);Di2015NewLine            Assert.AreEqual(exp.Head, res.Head);Di2015NewLine            Assert.AreEqual(exp.Tail.Head, res.Tail.Head);Di2015NewLine            Assert.AreEqual(exp.Tail.Tail.Head, res.Tail.Tail.Head);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
478600Di2015UniqueSeparator    List<Person> list = new List<Person>();Di2015NewLineDi2015NewLine    Person person = new Person() { Name="Chris" };Di2015NewLine    // your person object lives on the heap. The person variable is justDi2015NewLine    // a pointer of that object on the heap. Note that the pointer livesDi2015NewLine    // on the stack, and the object it points to lives on the heap.Di2015NewLineDi2015NewLine    list.Add(person);Di2015NewLine    // when you add your person to to the list, all it does it pass aDi2015NewLine    // copy of the *pointer* to the list's method. List has access to thisDi2015NewLine    // object through the pointer.Di2015NewLineDi2015NewLine    person = new Person(){ Name="Wilson the cat" };Di2015NewLine    // new'ing up a instance of person creates another person object onDi2015NewLine    // the heap. Note that this doesn't overwrite our original person created above,Di2015NewLine    // because our original person sits in an entirely differently memory Di2015NewLine    // location.Di2015NewLineDi2015NewLine    // We did, however overwrite our pointer variable by assigning it a newDi2015NewLine    // location to point at. This doesn't affect the object we put into ourDi2015NewLine    // list since the list received a copy of our original pointer :)Di2015NewLineDi2015NewLine    list.Add(person);Di2015NewLineDi2015NewLine    Console.WriteLine(list[0].Name);Di2015NewLine    // list[0] has a pointer to the first object we createdDi2015NewLineDi2015NewLineDi2015NewLine    Console.WriteLine(list[1].Name);Di2015NewLine    // list[1] has a pointer to the second object we created.Di2015NewLineDi2015NewLine    Console.ReadLine();Di2015NewLineDi2015NewLine    // when this methods goes out of scope (i.e. when the stack frame isDi2015NewLine    // popped), the pointers will be dropped from memory, and the objectsDi2015NewLine    // on the heap will no longer have any live references to them, soDi2015NewLine    // they'll be eaten by the garbage collector.Di2015NewLine
478630Di2015UniqueSeparatorUInt16[] intDist
478630Di2015UniqueSeparatorsensorData
478630Di2015UniqueSeparatorsensorData.intData
478630Di2015UniqueSeparatorsensorData.data
478630Di2015UniqueSeparatorintDist
478630Di2015UniqueSeparatorcalculateAndEnqueueData()
478630Di2015UniqueSeparatorsensorData
478630Di2015UniqueSeparatorsensorData
478630Di2015UniqueSeparatorintDist
478630Di2015UniqueSeparatorcalculateAndEnqueueData()
478630Di2015UniqueSeparator    // create new sensorData instanceDi2015NewLine    sensorData dat = new sensorData();Di2015NewLine    dat.TimeStamp = time;Di2015NewLine    dat.timeIndex = j;Di2015NewLineDi2015NewLine    // Calculate four Sine curvesDi2015NewLine    for (int i = 0; i < collectedData.numberOfChannels; i++)Di2015NewLine    {Di2015NewLine        dat.data[i] = (UInt16) Math.Abs(Math.Sin(2.0 * Math.PI * myFrequency[i] * time);Di2015NewLine    }Di2015NewLineDi2015NewLine    // enqueueDi2015NewLine    lock (locker) dataQ.Enqueue(dat);Di2015NewLine
478697Di2015UniqueSeparatorclass DerivedA : Implementation, IBar, IFoo { ... }Di2015NewLineclass DerivedB : Implementation, IBar, IFoo { ... }Di2015NewLineclass DerivedC : Implementation, IBar, IFoo { ... }Di2015NewLineclass DerivedD : Implementation, IBar, IFoo { ... }Di2015NewLine
478697Di2015UniqueSeparatorImplementation
478697Di2015UniqueSeparatorIBaz
478755Di2015UniqueSeparator-40 % 360 == -40
478755Di2015UniqueSeparatorpublic class ModDi2015NewLine{Di2015NewLine    public static int mod(int a, int b)Di2015NewLine    {Di2015NewLine    \if (a < 0)Di2015NewLine    \\return b + (a % b);Di2015NewLine    \elseDi2015NewLine    \\return a % b;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void main(String[] args)Di2015NewLine    {Di2015NewLine    \System.out.println(mod(40, 360));\// 40Di2015NewLine    \System.out.println(mod(-40, 360));\// 320Di2015NewLine    \System.out.println(mod(-400, 360));\// 320Di2015NewLine    }Di2015NewLine}Di2015NewLine
478907Di2015UniqueSeparatorE_PROP_ID_UNSUPPORTED
478944Di2015UniqueSeparatorstatic void RetrieveMultipleResults(SqlConnection connection)Di2015NewLine{Di2015NewLine    using (connection)Di2015NewLine    {Di2015NewLine        SqlCommand command = new SqlCommand(Di2015NewLine          "SELECT CategoryID, CategoryName FROM dbo.Categories;" +Di2015NewLine          "SELECT EmployeeID, LastName FROM dbo.Employees",Di2015NewLine          connection);Di2015NewLine        connection.Open();Di2015NewLineDi2015NewLine        SqlDataReader reader = command.ExecuteReader();Di2015NewLineDi2015NewLine        while (reader.HasRows)Di2015NewLine        {Di2015NewLine            Console.WriteLine("\\t{0}\\t{1}", reader.GetName(0),Di2015NewLine                reader.GetName(1));Di2015NewLineDi2015NewLine            while (reader.Read())Di2015NewLine            {Di2015NewLine                Console.WriteLine("\\t{0}\\t{1}", reader.GetInt32(0),Di2015NewLine                    reader.GetString(1));Di2015NewLine            }Di2015NewLine            reader.NextResult();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
478974Di2015UniqueSeparatorsum = 0;Di2015NewLinewhile (n != 0) {Di2015NewLine    sum += n % 10;Di2015NewLine    n /= 10;Di2015NewLine}Di2015NewLine
479001Di2015UniqueSeparatorInternetGetConnectedState
479001Di2015UniqueSeparatorprocedure IsConnected;Di2015NewLinevarDi2015NewLine  dwFlags: DWORD;Di2015NewLinebeginDi2015NewLine  if InternetGetConnectedState(@dwFlags, 0) thenDi2015NewLine  beginDi2015NewLine    if (dwFlags and INTERNET_CONNECTION_MODEM) = INTERNET_CONNECTION_MODEM  thenDi2015NewLine      ShowMessage('Modem Connection')Di2015NewLine    elseDi2015NewLine    if (dwFlags and INTERNET_CONNECTION_LAN) = INTERNET_CONNECTION_LAN thenDi2015NewLine      ShowMessage('LAN Connection')Di2015NewLine    elseDi2015NewLine    if (dwFlags and INTERNET_CONNECTION_PROXY) = INTERNET_CONNECTION_PROXY thenDi2015NewLine      ShowMessage('Connection thru Proxy')Di2015NewLine    elseDi2015NewLine    if (dwFlags and INTERNET_CONNECTION_OFFLINE) = INTERNET_CONNECTION_OFFLINE thenDi2015NewLine      ShowMessage('Local system in offline mode')Di2015NewLine    elseDi2015NewLine    if (dwFlags and INTERNET_CONNECTION_CONFIGURED) = INTERNET_CONNECTION_CONFIGURED thenDi2015NewLine      ShowMessage('Valid connection exists, but might or might not be connected')Di2015NewLine  endDi2015NewLine  elseDi2015NewLine    ShowMessage('Not Connected. Try to connect and risk of being prompted to dial into another Internet Service Provider.');Di2015NewLineend;Di2015NewLine
479037Di2015UniqueSeparator\\[\\[([^\\]\\|\\r\\n]+?)\\|([^\\]\\|\\r\\n]+?)\\]\\]([^\\] ]\\S*)Di2015NewLine\\[\\[([^\\]\\|\\r\\n]+?)\\]\\]([^\\] ]\\S*)Di2015NewLine
479037Di2015UniqueSeparator(.+?)
479037Di2015UniqueSeparator([^\\]\\|\\r\\n]+?)
479037Di2015UniqueSeparator([^\\] ]\\S+)
479095Di2015UniqueSeparatorIDisposable
479095Di2015UniqueSeparatorusing
479198Di2015UniqueSeparatorstatic string GetProperDirectoryCapitalization(DirectoryInfo dirInfo)Di2015NewLine{Di2015NewLine    DirectoryInfo parentDirInfo = dirInfo.Parent;Di2015NewLine    if (null == parentDirInfo)Di2015NewLine        return dirInfo.Name;Di2015NewLine    return Path.Combine(GetProperDirectoryCapitalization(parentDirInfo),Di2015NewLine                        parentDirInfo.GetDirectories(dirInfo.Name)[0].Name);Di2015NewLine}Di2015NewLineDi2015NewLinestatic string GetProperFilePathCapitalization(string filename)Di2015NewLine{Di2015NewLine    FileInfo fileInfo = new FileInfo(filename);Di2015NewLine    DirectoryInfo dirInfo = fileInfo.Directory;Di2015NewLine    return Path.Combine(GetProperDirectoryCapitalization(dirInfo),Di2015NewLine                        dirInfo.GetFiles(fileInfo.Name)[0].Name);Di2015NewLine}Di2015NewLine
479321Di2015UniqueSeparatorSystem.Globalization.CultureInfo
479321Di2015UniqueSeparatorCultureInfo.CurrentCulture
479321Di2015UniqueSeparatorCultureInfo.CurrentUICulture
479334Di2015UniqueSeparatorFoo() : this("bar") {}
479334Di2015UniqueSeparatorthis.foo = foo;
479334Di2015UniqueSeparatorthis.SomeMethod();
479334Di2015UniqueSeparatorpublic static SomeMethod(this Foo foo) {...}
479334Di2015UniqueSeparatorHelper.DoSomething(this);
479382Di2015UniqueSeparatornew Tasks()
479382Di2015UniqueSeparatorMain()
479382Di2015UniqueSeparatorTasks tasksWindow = new Tasks();
479382Di2015UniqueSeparatorQuestionnairesWindow
479382Di2015UniqueSeparatorTasks
479382Di2015UniqueSeparatorQuestionnairesWindow
479382Di2015UniqueSeparatorprivate Tasks tasks;Di2015NewLineDi2015NewLinepublic QuestionnairesWindow(Tasks t)Di2015NewLine{Di2015NewLine  this.tasks = t;Di2015NewLine}Di2015NewLine
479382Di2015UniqueSeparatornew QuestionnairesWindow(this).Show(); // where this = current `Tasks` created in `Main`Di2015NewLine
479417Di2015UniqueSeparatorDescription
479417Di2015UniqueSeparatorprivate enum PublishStatusValueDi2015NewLine{Di2015NewLine    [Description("Not Completed")]Di2015NewLine    NotCompleted,Di2015NewLine    Completed,Di2015NewLine    ErrorDi2015NewLine};Di2015NewLine
479417Di2015UniqueSeparatorpublic static string GetDescription<T>(this T enumerationValue)Di2015NewLine            where T : structDi2015NewLine        {Di2015NewLine            Type type = enumerationValue.GetType();Di2015NewLine            if (!type.IsEnum)Di2015NewLine            {Di2015NewLine                throw new ArgumentException("EnumerationValue must be of Enum type", "enumerationValue");Di2015NewLine            }Di2015NewLineDi2015NewLine            //Tries to find a DescriptionAttribute for a potential friendly nameDi2015NewLine            //for the enumDi2015NewLine            MemberInfo[] memberInfo = type.GetMember(enumerationValue.ToString());Di2015NewLine            if (memberInfo != null && memberInfo.Length > 0)Di2015NewLine            {Di2015NewLine                object[] attrs = memberInfo[0].GetCustomAttributes(typeof(DescriptionAttribute), false);Di2015NewLineDi2015NewLine                if (attrs != null && attrs.Length > 0)Di2015NewLine                {Di2015NewLine                    //Pull out the description valueDi2015NewLine                    return ((DescriptionAttribute)attrs[0]).Description;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            //If we have no description attribute, just return the ToString of the enumDi2015NewLine            return enumerationValue.ToString();Di2015NewLineDi2015NewLine        }Di2015NewLine
479419Di2015UniqueSeparatorpublic class StringValueDi2015NewLine{Di2015NewLine    public StringValue(string s)Di2015NewLine    {Di2015NewLine        _value = s;Di2015NewLine    }Di2015NewLine    public string Value { get { return _value; } set { _value = value; } }Di2015NewLine    string _value;Di2015NewLine}Di2015NewLine
479419Di2015UniqueSeparatorList<StringValue>
479518Di2015UniqueSeparator%Windows%\\Performance\\WinSAT\\DataStore\\
479518Di2015UniqueSeparatorWinSAT\\WinSPR
479518Di2015UniqueSeparator<WinSAT>Di2015NewLine    <WinSPR>Di2015NewLine        <SystemScore>3.7</SystemScore> Di2015NewLine        <MemoryScore>5.9</MemoryScore> Di2015NewLine        <CpuScore>5.2</CpuScore> Di2015NewLine        <CPUSubAggScore>5.1</CPUSubAggScore> Di2015NewLine        <VideoEncodeScore>5.3</VideoEncodeScore> Di2015NewLine        <GraphicsScore>3.9</GraphicsScore> Di2015NewLine        <GamingScore>3.7</GamingScore> Di2015NewLine        <DiskScore>5.2</DiskScore> Di2015NewLine    </WinSPR>Di2015NewLine...Di2015NewLine
479717Di2015UniqueSeparatorMath.Truncate(number)Di2015NewLine
479744Di2015UniqueSeparator<local:Index Item="{Binding}"/>Di2015NewLine
479760Di2015UniqueSeparator<identity impersonate="true" />
479767Di2015UniqueSeparatorbyte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };Di2015NewLineint byteCount = bytes.Length;Di2015NewLineDi2015NewLineunsafeDi2015NewLine{Di2015NewLine    // By using the fixed keyword, we fix the array in a static memory location.Di2015NewLine    // Otherwise, the garbage collector might move it while we are still using it!Di2015NewLine    fixed (byte* bytePointer = bytes)Di2015NewLine    {Di2015NewLine    \short* shortPointer = (short*)bytePointer;Di2015NewLineDi2015NewLine    \for (int index = 0; index < byteCount / 2; index++)Di2015NewLine    \{Di2015NewLine    \\Console.WriteLine("Short {0}: {1}", index, shortPointer[index]);Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
479869Di2015UniqueSeparatorusing System.CodeDom;Di2015NewLineusing System.CodeDom.Compiler;Di2015NewLineusing Microsoft.CSharp;Di2015NewLineDi2015NewLine// the compilation partDi2015NewLineDi2015NewLine// change the parameters as you see fitDi2015NewLineCompilerParameters cp = CreateCompilerParameters(); Di2015NewLinevar options = new System.Collections.Generic.Dictionary<string, string>();Di2015NewLineif (/* you want to use the 3.5 compiler*/)Di2015NewLine{Di2015NewLine    options.Add("CompilerVersion", "v3.5");Di2015NewLine}Di2015NewLinevar compiler = new CSharpCodeProvider(options);Di2015NewLineCompilerResults cr = compiler.CompileAssemblyFromFile(cp,filename);Di2015NewLineif (cr.Errors.HasErrors)Di2015NewLine{Di2015NewLine    foreach (CompilerError err in cr.Errors)Di2015NewLine    {Di2015NewLine        // do something with the error/warning Di2015NewLine    }Di2015NewLine}Di2015NewLine
479983Di2015UniqueSeparatornew[] { "Hi", "there" }
479983Di2015UniqueSeparatornew string[] { "Hi", "there" }
480050Di2015UniqueSeparatorList<int> a = new List<int>() { 1, 2, 3, 4, 5 };Di2015NewLineList<int> b = new List<int>() { 0, 4, 8, 12 };Di2015NewLineDi2015NewLineList<int> common = a.Intersect(b).ToList();Di2015NewLine
480246Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void Purchase_Order_Collection_Has_Errors_Is_True_If_Any_Purchase_Order_Has_Is_Valid_False()Di2015NewLine{    Di2015NewLine    var mockFirstPurchaseOrder = new Mock<IPurchaseOrder>();Di2015NewLine    var mockSecondPurchaseOrder = new Mock<IPurchaseOrder>();Di2015NewLineDi2015NewLine    mockFirstPurchaseOrder.Expect(p => p.IsValid).Returns(false).AtMostOnce();Di2015NewLine    mockSecondPurchaseOrder.Expect(p => p.IsValid).Returns(true).AtMostOnce();Di2015NewLineDi2015NewLine    List<IPurchaseOrder> purchaseOrders = new List<IPurchaseOrder>();Di2015NewLine    purchaseOrders.Add(mockFirstPurchaseOrder.Object);Di2015NewLine    purchaseOrders.Add(mockSecondPurchaseOrder.Object);Di2015NewLineDi2015NewLine    PurchaseOrderCollection collection = new PurchaseOrderCollection(orders);Di2015NewLineDi2015NewLine    Assert.IsTrue(collection.HasErrors);Di2015NewLine}Di2015NewLine
480281Di2015UniqueSeparator   <system.serviceModel>Di2015NewLineDi2015NewLine    ...Di2015NewLineDi2015NewLine     <behaviors>Di2015NewLine       <serviceBehaviors>Di2015NewLine         <behavior name="GenericServiceBehavior">Di2015NewLine           <serviceTimeouts transactionTimeout="00:09:10"/>Di2015NewLine           <serviceThrottlingDi2015NewLine             maxConcurrentCalls="20"Di2015NewLine             maxConcurrentSessions="20"Di2015NewLine             maxConcurrentInstances="20"Di2015NewLine           />Di2015NewLine         </behavior>Di2015NewLine       </serviceBehaviors>Di2015NewLine     </behaviors>Di2015NewLine   </system.serviceModel>Di2015NewLine
480334Di2015UniqueSeparatorUnique
480334Di2015UniqueSeparatorComponent<SpaceCoordinate>(x => x.Coordinates, m => Di2015NewLine{Di2015NewLine  m.Map(x => x.x);Di2015NewLine  m.Map(x => x.y);Di2015NewLine  m.Map(x => x.z);Di2015NewLine}).Unique();Di2015NewLine
480334Di2015UniqueSeparatorSetAttribute
480334Di2015UniqueSeparatorComponent<SpaceCoordinate>(x => x.Coordinates, m => Di2015NewLine{Di2015NewLine  m.Map(x => x.x);Di2015NewLine  m.Map(x => x.y);Di2015NewLine  m.Map(x => x.z);Di2015NewLine}).SetAttribute("unique", "true");Di2015NewLine
480408Di2015UniqueSeparatorIEnumerable<string>
480408Di2015UniqueSeparatorvar stringList = myList.OfType<string>();Di2015NewLine
480521Di2015UniqueSeparatorstringBuilder.Append(parameter);Di2015NewLine
480521Di2015UniqueSeparatorfunc(Arg1, Arg2) :- ....body....Di2015NewLine
480521Di2015UniqueSeparatorfunc(Arg1, Arg2)
480521Di2015UniqueSeparatorfunc(Arg1, Arg2) :- is_number(Arg1), is_string(Arg2), ....body....Di2015NewLinefunc(Arg1, Arg2) :- is_string(Arg1), is_list(Arg2), ....body....Di2015NewLinefunc(Arg1, Arg2) :- is_number(Arg1), is_list(Arg2), ....body....Di2015NewLine
480647Di2015UniqueSeparatorpublic class MyObjectDi2015NewLine{Di2015NewLine  public List<WeakReference> References = new List<WeakReference>();Di2015NewLineDi2015NewLine  // My Class Properties and MethodsDi2015NewLine}Di2015NewLineDi2015NewLineMyObject obj = new MyObject();Di2015NewLineobj.refence.Add(new WeakReference(gun));Di2015NewLine
480647Di2015UniqueSeparatorforeach ref in obj.referencesDi2015NewLine  if (ref.IsAlive)Di2015NewLine    object tool = ref.Target;Di2015NewLine
480698Di2015UniqueSeparatorvar Vector v1 = new Vector(1,2,3);Di2015NewLinevar Vector v2 = new Vector(1,2,3);Di2015NewLinevar Vector v3 = v1 + v2;Di2015NewLine
480707Di2015UniqueSeparator// First applicationDi2015NewLineEventWaitHandle waitForSignal = new EventWaitHandle(false, EventResetMode.ManualReset, "MyWaitHandle");Di2015NewLineDi2015NewLine// Here, the first application does whatever initialization it can.Di2015NewLine// Then it waits for the handle to be signaled:Di2015NewLine// The program will block until somebody signals the handle.Di2015NewLinewaitForSignal.WaitOne();Di2015NewLine
480707Di2015UniqueSeparator// Second appDi2015NewLineEventWaitHandle doneWithInit = new EventWaitHandle(false, EventResetMode.ManualReset, "MyWaitHandle");Di2015NewLineDi2015NewLine// Here, the second application initializes what it needs to.Di2015NewLine// When it's done, it signals the wait handle:Di2015NewLinedoneWithInit.Set();Di2015NewLine
480750Di2015UniqueSeparator<!-- SomeProgram.exe.config -->Di2015NewLine<configuration>Di2015NewLine  <connectionStrings configSource="externalConfig/connectionStrings.config"/>Di2015NewLine</configuration>Di2015NewLineDi2015NewLine<!-- externalConfig/connectionStrings.config -->Di2015NewLine<connectionStrings>Di2015NewLine  <add name="conn" connectionString="blahblah" />Di2015NewLine</connectionStrings>Di2015NewLine
480750Di2015UniqueSeparator<connectionStrings>
480750Di2015UniqueSeparator<appSettings>
480750Di2015UniqueSeparator<appSettings>
480750Di2015UniqueSeparator<appSettings>
480813Di2015UniqueSeparatorvar container = application[GlobalContainerKey] as IUnityContainer;Di2015NewLine
480813Di2015UniqueSeparatorprivate const string GlobalContainerKey = "UnityContainerKey";Di2015NewLineprivate const object lockObject = new object();Di2015NewLineDi2015NewLinepublic static IUnityContainer GetContainer(this HttpApplicationState application)Di2015NewLine{Di2015NewLine    var IUnityContainer container = null;Di2015NewLineDi2015NewLine    lock (lockObject)Di2015NewLine    {Di2015NewLine        container = application[GlobalContainerKey] as IUnityContainer;Di2015NewLine        if (container == null)Di2015NewLine        {Di2015NewLine            container = new UnityContainer();Di2015NewLine            application[GlobalContainerKey] = container;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return container;Di2015NewLine}Di2015NewLine
481333Di2015UniqueSeparatorprivate static void Swap(ref double a, ref double b) {Di2015NewLine    double t = a;Di2015NewLine    a = b;Di2015NewLine    b = t;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void Sort(ref double a, ref double b) {Di2015NewLine    if (a > b) {Di2015NewLine        double t = a;Di2015NewLine        a = b;Di2015NewLine        b = t;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate static double MedianOfFive(double a, double b, double c, double d, double e){Di2015NewLine    // makes a < b and c < dDi2015NewLine    Sort(ref a, ref b);Di2015NewLine    Sort(ref c, ref d);Di2015NewLineDi2015NewLine    // eleminate the lowestDi2015NewLine    if (c < a) {Di2015NewLine        Swap(ref b, ref d);Di2015NewLine        c = a;Di2015NewLine    }Di2015NewLineDi2015NewLine    // gets e inDi2015NewLine    a = e;Di2015NewLineDi2015NewLine    // makes a < bDi2015NewLine    Sort(ref a, ref b);Di2015NewLineDi2015NewLine    // eliminate another lowestDi2015NewLine    // remaing: a,b,dDi2015NewLine    if (a < c) {Di2015NewLine        Swap(ref b, ref d);Di2015NewLine        a = c;Di2015NewLine    }Di2015NewLineDi2015NewLine    return Math.Min(d, a);Di2015NewLine}Di2015NewLine
481350Di2015UniqueSeparatorDictionary<int, Cell>
481350Di2015UniqueSeparatorList<Cell>
481350Di2015UniqueSeparatorpublic static void EnsureCount<T>(List<T> list, int count)Di2015NewLine{Di2015NewLine    if (list.Count > count)Di2015NewLine    {Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    if (list.Capacity < count)Di2015NewLine    {Di2015NewLine        // Always at least double the capacity, to reduceDi2015NewLine        // the number of expansions requiredDi2015NewLine        list.Capacity = Math.Max(list.Capacity*2, count);Di2015NewLine    }Di2015NewLine    list.AddRange(Enumerable.Repeat(default(T), list.Capacity-list.Count));Di2015NewLine}Di2015NewLine
481421Di2015UniqueSeparatorreturn otherObj == null && otherObj.Id == this.Id;Di2015NewLine
481421Di2015UniqueSeparatorreturn otherObj != null && otherObj.Id == this.Id;Di2015NewLine
481453Di2015UniqueSeparator   <asp:radioButtonListDi2015NewLine     id="radio1" runat="server" Di2015NewLine     autoPostBack="true"Di2015NewLine     cellSpacing="20"Di2015NewLine     repeatColumns="3"Di2015NewLine     repeatDirection="horizontal"Di2015NewLine     RepeatLayout="table"Di2015NewLine     textAlign="right"Di2015NewLine     OnSelectedIndexChanged="radio_SelectedIndexChanged">Di2015NewLine     <asp:ListItem text="10pt" value="itsMe"/>  Di2015NewLine     <asp:ListItem text="14pt" value="itsYou"/>  Di2015NewLine     <asp:ListItem text="16pt" value="Neither"/>  Di2015NewLine  </asp:radioButtonList>Di2015NewLine
481453Di2015UniqueSeparatorprotected void radio_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine //do whatever you want by calling the name of the radio idDi2015NewLine //exampleDi2015NewLineDi2015NewLine  if(radio1.SelectedItem.Value=="(whatever you want to test)"Di2015NewLineDi2015NewLine}Di2015NewLine
481655Di2015UniqueSeparator<set name="Users" table="Filter_User">Di2015NewLine  <key column="filterid" />Di2015NewLine  <many-to-many column="userid" class="User" />Di2015NewLine</set>Di2015NewLine
481658Di2015UniqueSeparatorlist.AddRange(new T[size - count]);Di2015NewLine
481658Di2015UniqueSeparatorsize
481658Di2015UniqueSeparatorcount
481658Di2015UniqueSeparatorsize - count
481658Di2015UniqueSeparator*
481658Di2015UniqueSeparatorpublic static class CollectionsUtilDi2015NewLine{Di2015NewLine    public static List<T> EnsureSize<T>(this List<T> list, int size)Di2015NewLine    {Di2015NewLine        return EnsureSize(list, size, default(T));Di2015NewLine    }Di2015NewLineDi2015NewLine    public static List<T> EnsureSize<T>(this List<T> list, int size, T value)Di2015NewLine    {Di2015NewLine        if (list == null) throw new ArgumentNullException("list");Di2015NewLine        if (size < 0) throw new ArgumentOutOfRangeException("size");Di2015NewLineDi2015NewLine        int count = list.Count;Di2015NewLine        if (count < size)Di2015NewLine        {Di2015NewLine            int capacity = list.Capacity;Di2015NewLine            if (capacity < size)Di2015NewLine                list.Capacity = Math.max(size, capacity * 2);Di2015NewLineDi2015NewLine            while (count < size)Di2015NewLine            {Di2015NewLine                list.Add(value);Di2015NewLine                ++count;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return list;Di2015NewLine    }Di2015NewLine}Di2015NewLine
481658Di2015UniqueSeparatorthis
481658Di2015UniqueSeparatorArray.Resize<T>
481658Di2015UniqueSeparator*
481658Di2015UniqueSeparatorlist.AddRange(array)
481658Di2015UniqueSeparatorICollection<T>
481658Di2015UniqueSeparatorCount
481734Di2015UniqueSeparatorpublic static IEnumerable<string> GetInterests(Customer customer)Di2015NewLine{Di2015NewLine    foreach (Characteristic c in customer.Characteristics)Di2015NewLine    {Di2015NewLine        if (c.CharacteristicType == "Interest")Di2015NewLine            yield return c.CharacteristicValue;Di2015NewLine    }Di2015NewLine}Di2015NewLine
481734Di2015UniqueSeparatorcustomer.CharacteristicsDi2015NewLine    .Where(c => c.CharacteristicType == "Interest")Di2015NewLine    .Select(c => c. CharacteristicValue);Di2015NewLine
481795Di2015UniqueSeparatorvar itemCounts = (from hhd in dc.HHD select hhd.ItemNumber)Di2015NewLine                 .Union((from hkb in dc.HKB select hkb.ItemNumber)Di2015NewLine                         .Union(from hmm in dc.HMM select hmm.ItemNumber)) Di2015NewLine                 and so onDi2015NewLine
481858Di2015UniqueSeparatorvar g = 2 * (gethash(word, good) | 0);Di2015NewLinevar b = gethash(word, bad) | 0;Di2015NewLineDi2015NewLineif( (g + b) >= 5)Di2015NewLine{Di2015NewLine    return Math.Max( Di2015NewLine    \0.01, Di2015NewLine    \Math.Min(0.99, Di2015NewLine    \\Math.Min(1, b / nbad) / Di2015NewLine    \\(Math.Min(1, g / ngood) + Math.Min(1, b / nbad))));Di2015NewLine}Di2015NewLine
481968Di2015UniqueSeparatorImmutableObjectAttribute
481968Di2015UniqueSeparator[ImmutableObject(true)]
481968Di2015UniqueSeparatorFieldInfo.IsInitOnly
481968Di2015UniqueSeparatorstring
481968Di2015UniqueSeparatorStringBuilder
482470Di2015UniqueSeparatortryDi2015NewLine            {Di2015NewLine                // make pseudo entries:Di2015NewLine                DirectoryEntry folder = rootDir.Children.Add("Folder", "IISWebDirectory");Di2015NewLine                folder.CommitChanges();Di2015NewLine                file = folder.Children.Add("File.aspx", "IISWebFile");Di2015NewLine                file.CommitChanges();Di2015NewLine            }Di2015NewLine
482470Di2015UniqueSeparatorDirectoryEntry dir = new DirectoryEntry("IIS://" + serverName + "/W3SVC/1/ROOT" + vDir, @"adminusername", @"password");Di2015NewLinedir.AuthenticationType = AuthenticationTypes.Secure;Di2015NewLinedir.RefreshCache();Di2015NewLine
482651Di2015UniqueSeparator    private void Sort_version2(string propertyName)Di2015NewLine    {Di2015NewLine        // convert to listDi2015NewLine        List<MyClass> myCurrentClass = Items as List<MyClass>;Di2015NewLineDi2015NewLine        string typeOfProperty;Di2015NewLine        PropertyInfo pi;Di2015NewLineDi2015NewLine        // sortDi2015NewLine        if ((myCurrentClass != null) && (MyClass.HasDetailAndExtract(propertyName, out typeOfProperty, out pi)))Di2015NewLine        {Di2015NewLine            switch(typeOfProperty)Di2015NewLine            {Di2015NewLine                case "System.String":Di2015NewLine                    myCurrentClass.Sort(delegate(MyClass one, MyClass two)Di2015NewLine                                            {Di2015NewLine                                                returnDi2015NewLine                                                    Comparer<string>.Default.Compare(pi.GetValue(one, null).ToString(),Di2015NewLine                                                                                     pi.GetValue(two, null).ToString());Di2015NewLine                                            });Di2015NewLine                    break;Di2015NewLineDi2015NewLine                case "System.Int32":Di2015NewLine                    myCurrentClass.Sort(delegate (MyClass one, MyClass two)Di2015NewLine                                            {Di2015NewLine                                                returnDi2015NewLine                                                    Comparer<int>.Default.Compare(Di2015NewLine                                                        Convert.ToInt32(pi.GetValue(one, null)),Di2015NewLine                                                        Convert.ToInt32(pi.GetValue(two, null)));Di2015NewLine                                            });Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    throw new NotImplementedException("Type of property not implemented yet");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
482699Di2015UniqueSeparatorecho $(SolutionDir) > SolutionDirFile.txt
482699Di2015UniqueSeparatorSolutionDirFile.txt
482741Di2015UniqueSeparatorArray values = Enum.GetValues(typeof(myEnum));Di2015NewLineDi2015NewLineforeach( MyEnum val in values )Di2015NewLine{Di2015NewLine   Console.WriteLine (String.Format("{0}: {1}", Enum.GetName(typeof(MyEnum), val), val);Di2015NewLine}Di2015NewLine
482741Di2015UniqueSeparatorstring[] names = Enum.GetNames(typeof(MyEnum));Di2015NewLineMyEnum[] values = (MyEnum[])Enum.GetValues(typeof(MyEnum));Di2015NewLineDi2015NewLinefor( int i = 0; i < names.Length; i++ )Di2015NewLine{Di2015NewLine    print(names[i], values[i]);Di2015NewLine}Di2015NewLine
482749Di2015UniqueSeparator public T Create<T>()Di2015NewLine         {Di2015NewLine             if (registeredTypes.ContainsKey(typeof(T)))Di2015NewLine                 return (T)Activator.CreateInstance(registeredTypes[typeof(T)].Di2015NewLine                                                                       GetType());Di2015NewLine             elseDi2015NewLine                 throw new DependencyResolverException("Can'tDi2015NewLine                                       create type. Type " + typeof(T) + "Di2015NewLine                                                           not found.");Di2015NewLine         }Di2015NewLine
482796Di2015UniqueSeparator<asp:ContentPlaceHolder ID="holderFooter" runat="server"/>Some footer hereDi2015NewLine
482812Di2015UniqueSeparatorclass ObjectManager : MemoryDi2015NewLine{Di2015NewLine   public void mymethod()Di2015NewLine   {Di2015NewLine      LocalCharacter LocalPlayer = new LocalCharacter(this);Di2015NewLine   }Di2015NewLine}Di2015NewLine
483062Di2015UniqueSeparatorComponentDispatcher.ThreadFilterMessage
483062Di2015UniqueSeparatorApplication.AddMessageFilter()
483141Di2015UniqueSeparatorImageCodecInfo pngCodec = ImageCodecInfo.GetImageEncoders().Where(codec => codec.FormatID.Equals(ImageFormat.Png.Guid)).FirstOrDefault();Di2015NewLineif (pngCodec != null)Di2015NewLine{Di2015NewLine    EncoderParameters parameters = new EncoderParameters();Di2015NewLine    parameters.Param[0] = new EncoderParameter(Encoder.ColorDepth, 8);Di2015NewLine    myImage.Save(myStream, pngCodec, parameters);Di2015NewLine}Di2015NewLine
483231Di2015UniqueSeparatorType.GetType(string)
483231Di2015UniqueSeparatorActivator.CreateInstance(Type)
483231Di2015UniqueSeparatorType.GetMethod(string)
483231Di2015UniqueSeparatorMethodBase.Invoke(object, object[])
483231Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace FooDi2015NewLine{Di2015NewLine    class TestDi2015NewLine    {Di2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            Type type = Type.GetType("Foo.MyClass");Di2015NewLine            object instance = Activator.CreateInstance(type);Di2015NewLine            MethodInfo method = type.GetMethod("MyMethod");Di2015NewLine            method.Invoke(instance, null);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class MyClassDi2015NewLine    {Di2015NewLine        public void MyMethod()Di2015NewLine        {Di2015NewLine            Console.WriteLine("In MyClass.MyMethod");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
483335Di2015UniqueSeparatorinternal class C2Di2015NewLine{Di2015NewLine//...Di2015NewLine}Di2015NewLine
483362Di2015UniqueSeparatorRegex r1 = new Regex(@"\\[(.+)\\]");Di2015NewLinestring row = "HEADERNAMES[COL1, COL2, COL3, COL4]";Di2015NewLine// Regex puts capture groups (i.e. things captured between ( and ) ) Di2015NewLine// in Groups collectionDi2015NewLinestring match = r1.Match(row).Groups[1].Value;Di2015NewLine//match = "COL1, COL2, COL3, COL4"Di2015NewLine
483554Di2015UniqueSeparatorFirstMethod
483554Di2015UniqueSeparatoryield return
483554Di2015UniqueSeparatorforeach
483554Di2015UniqueSeparatorusing
483554Di2015UniqueSeparatorforeach
483554Di2015UniqueSeparatorforeach
483554Di2015UniqueSeparator.ToList()
483554Di2015UniqueSeparator.ToArray()
483554Di2015UniqueSeparatorWhere
483554Di2015UniqueSeparatorIQueryable<T>
483554Di2015UniqueSeparatorpublic IEnumerable<T> FirstMethod()Di2015NewLine{Di2015NewLine    var entities = from t in context.ProductsDi2015NewLine                   where {some conditions}Di2015NewLine                   select t;Di2015NewLineDi2015NewLine    foreach( var entity in entities.AsEnumerable() )Di2015NewLine    {Di2015NewLine        entity.SomeProperty = {SomeValue};Di2015NewLine        yield return entity;   Di2015NewLine    }Di2015NewLine}Di2015NewLine
483554Di2015UniqueSeparatorAsEnumerable
483554Di2015UniqueSeparatorIQueryable<T>
483598Di2015UniqueSeparatorpublic ActionResult List(FormCollection searchQuery)Di2015NewLine
483598Di2015UniqueSeparator<% Html.BeginForm("List", "Building", FormMethod.Post) %>Di2015NewLine
483598Di2015UniqueSeparator<% using (Html.BeginForm("List", "Building", FormMethod.Post)) { %>Di2015NewLine<% } %>Di2015NewLine
483649Di2015UniqueSeparatorint CaptureSpaceShip(IRebelAllianceShip ship) {}Di2015NewLineint CaptureSpaceShip(XWing ship) {}Di2015NewLineDi2015NewLinevoid Main() { Di2015NewLine  IRebelAllianceShip theShip = new XWing();Di2015NewLine  CaptureSpaceShip(theShip);Di2015NewLine}Di2015NewLine
483689Di2015UniqueSeparatorResponse.Redirect("Second.aspx?book=codecomplete");Di2015NewLine
483689Di2015UniqueSeparatorstring book = Request["book"];Di2015NewLine
483689Di2015UniqueSeparatorSession["book"] = "codecomplete";Di2015NewLine
483689Di2015UniqueSeparatorstring book = Session["book"] as string;Di2015NewLine
483689Di2015UniqueSeparatorthis.SomeProperty = "codecomplete";Di2015NewLineServer.Transfer("SecondPage.aspx");Di2015NewLine
483689Di2015UniqueSeparatorstring book = (PreviousPage as Page1).SomeProperty;Di2015NewLine
483815Di2015UniqueSeparator    For Each process In DTE.Debugger.LocalProcessesDi2015NewLine        If (process.Name.IndexOf("aspnet_wp.exe") <> -1) ThenDi2015NewLine            process.Attach()Di2015NewLine            Exit SubDi2015NewLine        End IfDi2015NewLine    NextDi2015NewLine
484286Di2015UniqueSeparatorprocedure (ASender: TObject; var structQSnap: structVTIQSnap) of object;Di2015NewLine
484297Di2015UniqueSeparatorServiceEndpointElement element =Di2015NewLineseec.OfType<ServiceEndpointElement>()Di2015NewLine.FirstOrDefault(s => s.Name == "AtomHubEndpoint");Di2015NewLine
484303Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineclass Class1Di2015NewLine{Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    static extern bool ExitWindowsEx(uint uFlags, uint dwReason);Di2015NewLineDi2015NewLine    [STAThread]Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        ExitWindowsEx(ExitWindows.LogOff, ShutdownReason.MajorOther | ShutdownReason.MinorOther); Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[Flags]Di2015NewLinepublic enum ExitWindows : uintDi2015NewLine{Di2015NewLine   // ONE of the following five:Di2015NewLine   LogOff = 0x00,Di2015NewLine   ShutDown = 0x01,Di2015NewLine   Reboot = 0x02,Di2015NewLine   PowerOff = 0x08,Di2015NewLine   RestartApps = 0x40,Di2015NewLine   // plus AT MOST ONE of the following two:Di2015NewLine   Force = 0x04,Di2015NewLine   ForceIfHung = 0x10,Di2015NewLine}Di2015NewLineDi2015NewLine[Flags]Di2015NewLineenum ShutdownReason : uintDi2015NewLine{Di2015NewLine    MajorApplication = 0x00040000,Di2015NewLine    MajorHardware = 0x00010000,Di2015NewLine    MajorLegacyApi = 0x00070000,Di2015NewLine    MajorOperatingSystem = 0x00020000,Di2015NewLine    MajorOther = 0x00000000,Di2015NewLine    MajorPower = 0x00060000,Di2015NewLine    MajorSoftware = 0x00030000,Di2015NewLine    MajorSystem = 0x00050000,Di2015NewLineDi2015NewLine    MinorBlueScreen = 0x0000000F,Di2015NewLine    MinorCordUnplugged = 0x0000000b,Di2015NewLine    MinorDisk = 0x00000007,Di2015NewLine    MinorEnvironment = 0x0000000c,Di2015NewLine    MinorHardwareDriver = 0x0000000d,Di2015NewLine    MinorHotfix = 0x00000011,Di2015NewLine    MinorHung = 0x00000005,Di2015NewLine    MinorInstallation = 0x00000002,Di2015NewLine    MinorMaintenance = 0x00000001,Di2015NewLine    MinorMMC = 0x00000019,Di2015NewLine    MinorNetworkConnectivity = 0x00000014,Di2015NewLine    MinorNetworkCard = 0x00000009,Di2015NewLine    MinorOther = 0x00000000,Di2015NewLine    MinorOtherDriver = 0x0000000e,Di2015NewLine    MinorPowerSupply = 0x0000000a,Di2015NewLine    MinorProcessor = 0x00000008,Di2015NewLine    MinorReconfig = 0x00000004,Di2015NewLine    MinorSecurity = 0x00000013,Di2015NewLine    MinorSecurityFix = 0x00000012,Di2015NewLine    MinorSecurityFixUninstall = 0x00000018,Di2015NewLine    MinorServicePack = 0x00000010,Di2015NewLine    MinorServicePackUninstall = 0x00000016,Di2015NewLine    MinorTermSrv = 0x00000020,Di2015NewLine    MinorUnstable = 0x00000006,Di2015NewLine    MinorUpgrade = 0x00000003,Di2015NewLine    MinorWMI = 0x00000015,Di2015NewLineDi2015NewLine    FlagUserDefined = 0x40000000,Di2015NewLine    FlagPlanned = 0x80000000Di2015NewLine}Di2015NewLine
484598Di2015UniqueSeparatorContract.Ensures(Contract.Result<string>() != null)Di2015NewLine
484598Di2015UniqueSeparatorstring! fooDi2015NewLine
484864Di2015UniqueSeparatorif(command.StartsWith(CommandConstants.Acknowledge, StringComparison.Ordinal))Di2015NewLine    return CommandType.Acknowledge;Di2015NewLine
484864Di2015UniqueSeparatorvar a = "foo bar foo";Di2015NewLinevar b = "foo";Di2015NewLineDi2015NewLineint numTimes = 1000000;Di2015NewLineDi2015NewLineBenchmark.Time(() => a.StartsWith(b, StringComparison.Ordinal), "ordinal", numTimes);Di2015NewLineBenchmark.Time(() => a.StartsWith(b), "culture sensitive", numTimes);Di2015NewLine
484996Di2015UniqueSeparatorScrollViewer.HorizontalScrollBarVisibility="Disabled" Di2015NewLineScrollViewer.VerticalScrollBarVisibility="Auto"Di2015NewLine
485061Di2015UniqueSeparator(CSS_Font_Size_Pixels * Canvas_DPI) / (User_Screen_DPI * 72) = Equivalent_Point_SizeDi2015NewLine
485061Di2015UniqueSeparator(CSS_Font_Size_Pixels  / User_Screen_DPI) * Canvas_DPIDi2015NewLine
485296Di2015UniqueSeparatorres = webreq.GetResponse();Di2015NewLineconnectedToUrl = processResponseCode(res);Di2015NewLine
485296Di2015UniqueSeparatorusing (WebResponse res = webreq.GetResponse()) Di2015NewLine{Di2015NewLine    connectedToUrl = processResponseCode(res);Di2015NewLine}Di2015NewLine
485333Di2015UniqueSeparatorViewData["ActionList"] = actions.ToList();Di2015NewLine
485333Di2015UniqueSeparator<% foreach (var action in (List)ViewData["ActionList"]) %>Di2015NewLine
485414Di2015UniqueSeparator<%= Html.ActionLink("my link", "Edit", "Message", new { id = ((Message)Container.DataItem).ID }) %>Di2015NewLine
485440Di2015UniqueSeparatorTasks.Join(Labels.Where(l => l.Name == "accounting"), t => t.TaskId, l => l.SourceId, (t, l) => t)Di2015NewLine
485602Di2015UniqueSeparatorpublic void Sort<TKey>(SortOrder sortOrder,Di2015NewLine                       Func<Song, TKey> keySelector)Di2015NewLine{Di2015NewLine    if (sortOrder == SortOrder.Descending)Di2015NewLine    {Di2015NewLine        _list = _list.OrderByDescending(keySelector).ToList(); Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        _list = _list.OrderBy(keySelector).ToList(); Di2015NewLine    }Di2015NewLine}Di2015NewLine
485602Di2015UniqueSeparatorSort(SortOrder.Descending, x => x.Album);Di2015NewLine
485602Di2015UniqueSeparatorpublic static class SortColumnDi2015NewLine{Di2015NewLine    public static readonly Func<Song, string> Artist = x => x.Artist;Di2015NewLine    public static readonly Func<Song, string> Album = x => x.Album;Di2015NewLine}Di2015NewLine
485602Di2015UniqueSeparatorSort(SortOrder.Descending, SortColumn.Artist);Di2015NewLine
485710Di2015UniqueSeparatorvar data = new Dictionary<string, string>();Di2015NewLineforeach (var row in File.ReadAllLines(PATH_TO_FILE))Di2015NewLine  data.Add(row.Split('=')[0], string.Join("=",row.Split('=').Skip(1).ToArray()));Di2015NewLineDi2015NewLineConsole.WriteLine(data["ServerName"]);Di2015NewLine
485741Di2015UniqueSeparatortrue
485741Di2015UniqueSeparator0.0
485741Di2015UniqueSeparator==
485741Di2015UniqueSeparatora == b
485741Di2015UniqueSeparatora
485741Di2015UniqueSeparatorb
485758Di2015UniqueSeparator<location path="stylesheet.css">Di2015NewLine    <system.web>Di2015NewLine    \<authorization>Di2015NewLine    \\<allow users="*" />Di2015NewLine    \</authorization>Di2015NewLine    </system.web>Di2015NewLine</location>Di2015NewLineDi2015NewLine<location path="img/">Di2015NewLine    <system.web>Di2015NewLine    \<authorization>Di2015NewLine    \\<allow users="*" />Di2015NewLine    \</authorization>Di2015NewLine    </system.web>Di2015NewLine</location>Di2015NewLine
485983Di2015UniqueSeparatorSoftware\\Microsoft\\Imaging\\CodecsDi2015NewLine
486589Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class ErrorDi2015NewLine{Di2015NewLine    public DateTime TimeStamp { get; set; }Di2015NewLine    public string Message { get; set; }Di2015NewLine    public string StackTrace { get; set; }Di2015NewLineDi2015NewLine    public Error()Di2015NewLine    {Di2015NewLine        this.TimeStamp = DateTime.Now;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Error(string Message) : this()Di2015NewLine    {Di2015NewLine        this.Message = Message;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Error(System.Exception ex) : this(ex.Message)Di2015NewLine    {Di2015NewLine        this.StackTrace = ex.StackTrace;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return this.Message + this.StackTrace;Di2015NewLine    }Di2015NewLine}Di2015NewLine
486830Di2015UniqueSeparator[TypeDescriptionProvider]
486830Di2015UniqueSeparator[TypeForwardedTo]
486830Di2015UniqueSeparator[PrincipalPermission]
486861Di2015UniqueSeparatorMemoryStream
486861Di2015UniqueSeparatorMemoryStream
486861Di2015UniqueSeparatorStream
486882Di2015UniqueSeparatorfoo.xml
486882Di2015UniqueSeparatorxsd foo.xmlDi2015NewLinexsd foo.xsd /classesDi2015NewLine
486882Di2015UniqueSeparatorfoo.cs
486882Di2015UniqueSeparator[System.Xml.Serialization.XmlTextAttribute()]
486882Di2015UniqueSeparator//------------------------------------------------------------------------------Di2015NewLine// <auto-generated>Di2015NewLine//     This code was generated by a tool.Di2015NewLine//     Runtime Version:2.0.50727.3053Di2015NewLine//Di2015NewLine//     Changes to this file may cause incorrect behavior and will be lost ifDi2015NewLine//     the code is regenerated.Di2015NewLine// </auto-generated>Di2015NewLine//------------------------------------------------------------------------------Di2015NewLineDi2015NewLineusing System.Xml.Serialization;Di2015NewLineDi2015NewLine// Di2015NewLine// This source code was auto-generated by xsd, Version=2.0.50727.3038.Di2015NewLine// Di2015NewLineDi2015NewLineDi2015NewLine/// <remarks/>Di2015NewLine[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]Di2015NewLine[System.SerializableAttribute()]Di2015NewLine[System.Diagnostics.DebuggerStepThroughAttribute()]Di2015NewLine[System.ComponentModel.DesignerCategoryAttribute("code")]Di2015NewLine[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]Di2015NewLine[System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]Di2015NewLinepublic partial class Demographics {Di2015NewLineDi2015NewLine    private DemographicsDemographic[] itemsField;Di2015NewLineDi2015NewLine    /// <remarks/>Di2015NewLine    [System.Xml.Serialization.XmlElementAttribute("Demographic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]Di2015NewLine    public DemographicsDemographic[] Items {Di2015NewLine        get {Di2015NewLine            return this.itemsField;Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            this.itemsField = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine/// <remarks/>Di2015NewLine[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]Di2015NewLine[System.SerializableAttribute()]Di2015NewLine[System.Diagnostics.DebuggerStepThroughAttribute()]Di2015NewLine[System.ComponentModel.DesignerCategoryAttribute("code")]Di2015NewLine[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]Di2015NewLinepublic partial class DemographicsDemographic {Di2015NewLineDi2015NewLine    private string nameField;Di2015NewLineDi2015NewLine    private string valueField;Di2015NewLineDi2015NewLine    /// <remarks/>Di2015NewLine    [System.Xml.Serialization.XmlAttributeAttribute()]Di2015NewLine    public string Name {Di2015NewLine        get {Di2015NewLine            return this.nameField;Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            this.nameField = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <remarks/>Di2015NewLine    [System.Xml.Serialization.XmlTextAttribute()]Di2015NewLine    public string Value {Di2015NewLine        get {Di2015NewLine            return this.valueField;Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            this.valueField = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
486926Di2015UniqueSeparatorList<T>.Enumerator
486926Di2015UniqueSeparatorT
486926Di2015UniqueSeparatorT
487072Di2015UniqueSeparatorElement()
487072Di2015UniqueSeparatorElements()
487072Di2015UniqueSeparatorAttribute()
487072Di2015UniqueSeparatorAttributes()
487097Di2015UniqueSeparatordomain
487097Di2015UniqueSeparatorobject
487097Di2015UniqueSeparatorstring
487097Di2015UniqueSeparatornull
487097Di2015UniqueSeparatorstring
487381Di2015UniqueSeparatorvar people = repository.Find<Employee>();Di2015NewLine
487652Di2015UniqueSeparatorvar xmlElem = (from n in xDocument.Descendants() where (string)n.Attribute("name") == "some_node_name" select n).SingleOrDefault();Di2015NewLine
487652Di2015UniqueSeparatorvar xmlElem = xDocument.Descendants().SingleOrDefault(n => (string)n.Attribute("name") == "some_node_name");Di2015NewLine
487757Di2015UniqueSeparatorclass DrawingControlDi2015NewLine{Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    public static extern int SendMessage(IntPtr hWnd, Int32 wMsg, bool wParam, Int32 lParam);Di2015NewLineDi2015NewLine    private const int WM_SETREDRAW = 11; Di2015NewLineDi2015NewLine    public static void SuspendDrawing( Control parent )Di2015NewLine    {Di2015NewLine        SendMessage(parent.Handle, WM_SETREDRAW, false, 0);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void ResumeDrawing( Control parent )Di2015NewLine    {Di2015NewLine        SendMessage(parent.Handle, WM_SETREDRAW, true, 0);Di2015NewLine        parent.Refresh();Di2015NewLine    }Di2015NewLine}Di2015NewLine
487757Di2015UniqueSeparatorDeclare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As Integer, _Di2015NewLine                                                                ByVal wMsg As Integer, _Di2015NewLine                                                                ByVal wParam As Integer,Di2015NewLine                                                                ByVal lParam As Integer) As IntegerDi2015NewLineDi2015NewLinePrivate Const WM_SETREDRAW As Integer = 11Di2015NewLineDi2015NewLine' Extension methods for ControlDi2015NewLine<Extension()>Di2015NewLinePublic Sub ResumeDrawing(ByVal Target As Control, ByVal Redraw As Boolean)Di2015NewLine  SendMessage(Target.Handle, WM_SETREDRAW, 1, 0)Di2015NewLine  If Redraw ThenDi2015NewLine    Target.Refresh()Di2015NewLine  End IfDi2015NewLineEnd SubDi2015NewLineDi2015NewLine<Extension()>Di2015NewLinePublic Sub SuspendDrawing(ByVal Target As Control)Di2015NewLine  SendMessage(Target.Handle, WM_SETREDRAW, 0, 0)Di2015NewLineEnd SubDi2015NewLineDi2015NewLine<Extension()>Di2015NewLinePublic Sub ResumeDrawing(ByVal Target As Control)Di2015NewLine  ResumeDrawing(Target, True)Di2015NewLineEnd SubDi2015NewLine
487947Di2015UniqueSeparator<add tagPrefix="cc1" tagName="RichTextEditor" src="~/controls/richtexteditor.ascx">Di2015NewLine
487947Di2015UniqueSeparator<add assembly="RichTextEditor" namespace="RichTextEditor" tagPrefix="cc1" />Di2015NewLine
487947Di2015UniqueSeparator<add assembly="RichTextEditor" namespace="RichTextEditor" tagPrefix="cc1" />Di2015NewLine
487948Di2015UniqueSeparatorConsole.WriteLine(String.Format(new FileSizeFormatProvider(), "{0:fs}", fileSize));Di2015NewLine
487948Di2015UniqueSeparatorConsole.WriteLine(fileSize.ToFileSize());Di2015NewLine
488090Di2015UniqueSeparatorpublic static Thing withConnection(string connectionString) {Di2015NewLine    Thing t = new Thing();Di2015NewLine    t.doSomethingWithConnectionString(connection);Di2015NewLine    return t;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static Thing withFilename(string filename) {Di2015NewLine    Thing t = new Thing();Di2015NewLine    t.doSomethingWithFilename(filename);Di2015NewLine    return t;Di2015NewLine}Di2015NewLineDi2015NewLineprivate Thing() {Di2015NewLine    /* Make this private to clear things up */Di2015NewLine}Di2015NewLine
488127Di2015UniqueSeparatorpublic ActionResult Open(string sort, string filter)Di2015NewLine
488127Di2015UniqueSeparatorvar Issues = from i in db.Issues where i.Status == "Open" select i;Di2015NewLineDi2015NewLineswitch (sort)Di2015NewLine{Di2015NewLine    case "ID":Di2015NewLine        Issues = Issues.OrderBy(i => i.ID);Di2015NewLine        break;Di2015NewLineDi2015NewLine    // [...]Di2015NewLineDi2015NewLine    default:Di2015NewLine        Issues = Issues.OrderBy(i => i.TimeLogged);Di2015NewLine}Di2015NewLine
488301Di2015UniqueSeparatorEqualityComparer<T>
488301Di2015UniqueSeparatorIEquatable<T>
488301Di2015UniqueSeparatorpublic bool IsDataChanged<T>()Di2015NewLine{           Di2015NewLine    T value1 = GetValue2;Di2015NewLine    T value2 = GetValue1();Di2015NewLineDi2015NewLine    return !EqualityComparer<T>.Default.Equals(valueInDB, valueFromView);Di2015NewLine}Di2015NewLine
488301Di2015UniqueSeparatorIEquatable<T>
488301Di2015UniqueSeparatorIEquatable<T>
488816Di2015UniqueSeparatorvar finalList = originalList.Where(x => idList.Contains(x.Id)).ToList();Di2015NewLine
488816Di2015UniqueSeparatorvar finalList = (from entry in originalListDi2015NewLine                join id in idList on entry.Id equals idDi2015NewLine                select entry).ToList();Di2015NewLine
488957Di2015UniqueSeparatorint
488957Di2015UniqueSeparatorint
488957Di2015UniqueSeparatordouble
488957Di2015UniqueSeparatord
488957Di2015UniqueSeparatordouble
488957Di2015UniqueSeparator(int)Math.Ceiling(System.DateTime.DaysInMonth(2009, 1) / 7.0);Di2015NewLine
488957Di2015UniqueSeparatordouble
488957Di2015UniqueSeparatorfloat
488957Di2015UniqueSeparator7f
488957Di2015UniqueSeparatorDouble
488957Di2015UniqueSeparator\\
488957Di2015UniqueSeparatorptrdiff_t
488957Di2015UniqueSeparatorunsigned int
488957Di2015UniqueSeparatorsigned int
488966Di2015UniqueSeparatorGraphicsPath path = new GraphicsPath(FillMode.Winding);Di2015NewLine
489055Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace MyNamespace {Di2015NewLine    public static class DictionaryExtensions {Di2015NewLine        public static V GetValue<K, V>(this IDictionary<K, V> dict, K key) {Di2015NewLine            return dict.GetValue(key, default(V));Di2015NewLine        }Di2015NewLineDi2015NewLine        public static V GetValue<K, V>(this IDictionary<K, V> dict, K key, V defaultValue) {Di2015NewLine            V value;Di2015NewLine            return dict.TryGetValue(key, out value) ? value : defaultValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
489208Di2015UniqueSeparatorXDocument document = new XDocument();Di2015NewLinedocument.Add(new XComment("Config generated on 01/01/01"));Di2015NewLinedocument.Add(new XElement("Config", new XElement("GuiPath", guiPath)));Di2015NewLineDi2015NewLine// var xmlWriter = new XmlTextWriter("client_settings.xml", null);Di2015NewLine// document.WriteTo(xmlWriter);Di2015NewLineDi2015NewLine// thanks to Barry Kelly for pointing out XDocument.Save()Di2015NewLinedocument.Save("client_settings.xml");Di2015NewLine
489236Di2015UniqueSeparator<Grid>Di2015NewLine    \\<Grid.RowDefinitions>Di2015NewLine    \\\<RowDefinition Height="Auto"/>Di2015NewLine    \\\<RowDefinition Height="Auto"/>Di2015NewLine    \\\<RowDefinition Height="*"/>Di2015NewLine    \\</Grid.RowDefinitions>Di2015NewLine    \\<StackPanel Orientation="Horizontal" Grid.Row="0">Di2015NewLine    \\\<TextBlock Text="Enter Search Term" />Di2015NewLine    \\\<TextBox x:Name="SearchTermTextBox" Width="200" KeyUp="SearchTermTextBox_KeyUp"/>Di2015NewLine    \\</StackPanel>Di2015NewLine    \\<Button x:Name="SearchButton" Content="Search" Click="SearchButton_Click" Width="100" Di2015NewLine    \\\\  HorizontalAlignment="Left" Grid.Row="1" />Di2015NewLine    \\<controls:TreeView ItemTemplate="{StaticResource MainEntryIndexTemplate}" Di2015NewLine    \\\\\\\\ x:Name="CodeBookIndexTreeView" Height="Auto" Grid.Row="2" />Di2015NewLine</Grid>Di2015NewLine
489272Di2015UniqueSeparator//Create XLDi2015NewLineObject xl = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));Di2015NewLineDi2015NewLine//Get the workbooks collection.Di2015NewLine//   books = xl.Workbooks;Di2015NewLineObject books = xl.GetType().InvokeMember( "Workbooks", Di2015NewLine      BindingFlags.GetProperty, null, xl, null);Di2015NewLineDi2015NewLine//Add a new workbook.Di2015NewLine//   book = books.Add();Di2015NewLineObjet book = books.GetType().InvokeMember( "Add", Di2015NewLine      BindingFlags.InvokeMethod, null, books, null );Di2015NewLineDi2015NewLine//Get the worksheets collection.Di2015NewLine//   sheets = book.Worksheets;Di2015NewLineObject sheets = book.GetType().InvokeMember( "Worksheets",Di2015NewLine      BindingFlags.GetProperty, null, book, null );Di2015NewLineDi2015NewLineObject[] parameters;Di2015NewLineDi2015NewLine//Get the first worksheet.Di2015NewLine//   sheet = sheets.Item[1]Di2015NewLineparameters = new Object[1];Di2015NewLineparameters[0] = 1;Di2015NewLineObject sheet = sheets.GetType().InvokeMember( "Item", Di2015NewLine      BindingFlags.GetProperty, null, sheets, parameters );Di2015NewLineDi2015NewLine//Get a range object that contains cell A1.Di2015NewLine//   range = sheet.Range["A1];Di2015NewLineparameters = new Object[2];Di2015NewLineparameters[0] = "A1";Di2015NewLineparameters[1] = Missing.Value;Di2015NewLineObject range = sheet.GetType().InvokeMember( "Range",Di2015NewLine      BindingFlags.GetProperty, null, sheet, parameters );Di2015NewLineDi2015NewLine//Write "Hello, World!" in cell A1.Di2015NewLine//   range.Value = "Hello, World!";Di2015NewLineparameters = new Object[1];Di2015NewLineparameters[0] = "Hello, World!";Di2015NewLineobjRange_Late.GetType().InvokeMember( "Value", BindingFlags.SetProperty, Di2015NewLine      null, range, parameters );Di2015NewLineDi2015NewLine//Return control of Excel to the user.Di2015NewLine//   xl.Visible = true;Di2015NewLine//   xl.UserControl = true;Di2015NewLineparameters = new Object[1];Di2015NewLineparameters[0] = true;Di2015NewLinexl.GetType().InvokeMember( "Visible", BindingFlags.SetProperty,Di2015NewLine      null, xl, Parameters );Di2015NewLinexl.GetType().InvokeMember( "UserControl", BindingFlags.SetProperty,Di2015NewLine      null, xl, Parameters );Di2015NewLine
489421Di2015UniqueSeparatorpublic static IEnumerable<TSource> DistinctBy<TSource, TKey>Di2015NewLine    (this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)Di2015NewLine{Di2015NewLine    HashSet<TKey> seenKeys = new HashSet<TKey>();Di2015NewLine    foreach (TSource element in source)Di2015NewLine    {Di2015NewLine        if (seenKeys.Add(keySelector(element)))Di2015NewLine        {Di2015NewLine            yield return element;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
489421Di2015UniqueSeparatorId
489421Di2015UniqueSeparatorvar query = people.DistinctBy(p => p.Id);Di2015NewLine
489421Di2015UniqueSeparatorvar query = people.DistinctBy(p => new { p.Id, p.Name });Di2015NewLine
489421Di2015UniqueSeparatorHashSet
489548Di2015UniqueSeparatorstring x = a + "hello" + b;Di2015NewLine
489548Di2015UniqueSeparatorstring x = string.Concat(a, "hello", b);Di2015NewLine
489578Di2015UniqueSeparatorstatic void Application_ThreadException(object sender, System.Threading.ThreadExceptionEventArgs e)Di2015NewLine{Di2015NewLine     string b = null;Di2015NewLine     int i = b.Length;Di2015NewLine}Di2015NewLine
489642Di2015UniqueSeparatorcsc
489674Di2015UniqueSeparator        DataTable table = new DataTable();Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            table.Columns.Add("Name");Di2015NewLine            table.Columns.Add("Age", typeof(int));Di2015NewLine            table.Rows.Add("Alex", 26);Di2015NewLine            table.Rows.Add("Jim", 36);Di2015NewLine            table.Rows.Add("Bob", 34);Di2015NewLine            table.Rows.Add("Mike", 47);Di2015NewLine            table.Rows.Add("Joe", 61);Di2015NewLineDi2015NewLine            this.dataGridView1.DataSource = table;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button2_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            table.Columns.Add("Height", typeof(int));Di2015NewLine            foreach (DataRow row in table.Rows)Di2015NewLine            {Di2015NewLine                row["Height"] = 100;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button3_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            GridViewer g = new GridViewer { DataSource = table };Di2015NewLine            g.ShowDialog();Di2015NewLine        }Di2015NewLineDi2015NewLine        public partial class GridViewer : Form //just has a DataGridView on itDi2015NewLine        {Di2015NewLine            public GridViewer()Di2015NewLine            {Di2015NewLine            InitializeComponent();Di2015NewLine            }Di2015NewLineDi2015NewLine            public object DataSourceDi2015NewLine            {Di2015NewLine                get { return this.dataGridView1.DataSource; }Di2015NewLine                set { this.dataGridView1.DataSource = value; }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
489822Di2015UniqueSeparatorform.Cursor = new Cursor(path);Di2015NewLine
489876Di2015UniqueSeparatorString s = "123";Di2015NewLine
489887Di2015UniqueSeparatorDirectoryEntry userDirectoryEntry; // you need to new this upDi2015NewLineIExchangeMailbox exchangeMailbox = (IExchangeMailbox)userDirectoryEntry.NativeObject;Di2015NewLineIADsSecurityDescriptor securityDescriptor = (IADsSecurityDescriptor) exchangeMailbox.MailboxRights;   Di2015NewLineIADsAccessControlList acl = (IADsAccessControlList) securityDescriptor.DiscretionaryAcl;Di2015NewLine// Iterate thru each ACE in the ACLDi2015NewLineforeach ( IADsAccessControlEntry ace in acl)Di2015NewLine{Di2015NewLine     // in here, you'll have access to each "ace"Di2015NewLine}Di2015NewLine
489951Di2015UniqueSeparatorconst int BUFFER_SIZE = 1024;Di2015NewLine
490077Di2015UniqueSeparatorresult = Regex.Replace(value.ToString().Substring(0, x), oldString, newString, RegexOptions.IgnoreCase);Di2015NewLine
490491Di2015UniqueSeparatorSystem.Net.WebProxy
490491Di2015UniqueSeparatorUseDefaultCredentials
490598Di2015UniqueSeparatortry {Di2015NewLine    userId = new Guid(Request.QueryString["id"]);Di2015NewLine} catch (FormatException e) {Di2015NewLine    /*Di2015NewLine     * It's possible that the guid is not properly formatted and anDi2015NewLine     * exception will be thrown, so handle that here.Di2015NewLine     */Di2015NewLine}Di2015NewLine
490842Di2015UniqueSeparatornew Action<int>(x => Console.WriteLine(x)).Invoke(3);Di2015NewLine
490842Di2015UniqueSeparatornew Action<int>(delegate(int x) { Console.WriteLine(x); }).Invoke(3);Di2015NewLine
491161Di2015UniqueSeparatorenum OrderState Di2015NewLine{Di2015NewLine  pending = 1,Di2015NewLine  shipped = 2Di2015NewLine}Di2015NewLineDi2015NewLinepublic IList<Order> GetOrdersInState( OrderState )Di2015NewLine{Di2015NewLine}Di2015NewLine
491236Di2015UniqueSeparatorstatic T ElementAtOrDefault<T>(this IList<T> list, int index, T @default)Di2015NewLine{Di2015NewLine    return index >= 0 && index < list.Count ? list[index] : @default;Di2015NewLine}Di2015NewLine
491236Di2015UniqueSeparatorvar item = myObjects.ElementAtOrDefault(3, defaultItem);Di2015NewLine
491236Di2015UniqueSeparatorFunc<T>
491236Di2015UniqueSeparatorstatic T ElementAtOrDefault<T>(this IList<T> list, int index,Di2015NewLine    Func<T> @default)Di2015NewLine{Di2015NewLine    return index >= 0 && index < list.Count ? list[index] : @default();Di2015NewLine}Di2015NewLine
491236Di2015UniqueSeparatorvar item = myObjects.ElementAtOrDefault(3, myObjects.First);Di2015NewLine
491236Di2015UniqueSeparatorvar item = myObjects.ElementAtOrDefault(3, () => myObjects[2]);Di2015NewLine
491236Di2015UniqueSeparatorvar item = myObjects.ElementAtOrDefault(3, () => new MyObject {...});Di2015NewLine
491450Di2015UniqueSeparatorvoid Foo(Func<int, string> f) {Di2015NewLine //do stuffDi2015NewLine string s = f(42);Di2015NewLine // do more stuffDi2015NewLine}Di2015NewLine
491450Di2015UniqueSeparatorvoid Bar() {Di2015NewLine Func<int, string> f = delegate(i) { return i.ToString(); } Di2015NewLine//do stuffDi2015NewLine string s = f(42);Di2015NewLine // do more stuffDi2015NewLine}Di2015NewLine
491450Di2015UniqueSeparatorList<int> l
491450Di2015UniqueSeparatorl.Select(x=>(x.ToString())
491486Di2015UniqueSeparatorExpression
491486Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLineclass FooDi2015NewLine{Di2015NewLine    public string Bar { get; set; }Di2015NewLine}Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        PropertyInfo prop = PropertyHelper<Foo>.GetProperty(x => x.Bar);Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic static class PropertyHelper<T>Di2015NewLine{Di2015NewLine    public static PropertyInfo GetProperty<TValue>(Di2015NewLine        Expression<Func<T, TValue>> selector)Di2015NewLine    {Di2015NewLine        Expression body = selector;Di2015NewLine        if (body is LambdaExpression)Di2015NewLine        {Di2015NewLine            body = ((LambdaExpression)body).Body;Di2015NewLine        }Di2015NewLine        switch (body.NodeType)Di2015NewLine        {Di2015NewLine            case ExpressionType.MemberAccess:Di2015NewLine                return (PropertyInfo)((MemberExpression)body).Member;Di2015NewLine                break;Di2015NewLine            default:Di2015NewLine                throw new InvalidOperationException();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
491591Di2015UniqueSeparatorICollection<Foo> evil = (ICollection<Foo>) bar.Foos;Di2015NewLineevil.Add(...);Di2015NewLine
491591Di2015UniqueSeparatorIEnumerable<T>
491591Di2015UniqueSeparatorpublic IEnumerable<Foo> Foos {Di2015NewLine    get { return foos.Skip(0); }Di2015NewLine}Di2015NewLine
491591Di2015UniqueSeparatorSkip
491591Di2015UniqueSeparatorpublic static IEnumerable<T> Wrapper<T>(IEnumerable<T> source)Di2015NewLine{Di2015NewLine    foreach (T element in source)Di2015NewLine    {Di2015NewLine        yield return element;Di2015NewLine    }Di2015NewLine}Di2015NewLine
491651Di2015UniqueSeparatorhttp://foo.com/user.aspx?user_id=123Di2015NewLine
491651Di2015UniqueSeparatorhttp://foo.com/user.aspx?user_id=124Di2015NewLine
491775Di2015UniqueSeparatorString path = System.Reflection.Assembly.GetExecutingAssembly().Location;Di2015NewLinepath = System.IO.Path.GetDirectoryName(path);Di2015NewLineDirectory.SetCurrentDirectory(path);Di2015NewLine
491866Di2015UniqueSeparatorAction action = Method1;Di2015NewLineaction += Method2;Di2015NewLineaction += Method3;Di2015NewLineaction -= Method2;Di2015NewLineaction();Di2015NewLine
491866Di2015UniqueSeparatorFunc<int> func = () => 1;Di2015NewLinefunc += () => 2;Di2015NewLinefunc += () => 3;Di2015NewLineint result = func();Di2015NewLine
491866Di2015UniqueSeparatorpublic static Func<T, bool> AndAlso<T>(Di2015NewLine    this Func<T, bool> predicate1, Di2015NewLine    Func<T, bool> predicate2) Di2015NewLine{Di2015NewLine    return arg => predicate1(arg) && predicate2(arg);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static Func<T, bool> OrElse<T>(Di2015NewLine    this Func<T, bool> predicate1, Di2015NewLine    Func<T, bool> predicate2) Di2015NewLine{Di2015NewLine    return arg => predicate1(arg) || predicate2(arg);Di2015NewLine}Di2015NewLine
491866Di2015UniqueSeparatorpublic static Func<Tran, bool> GetPredicate() {Di2015NewLine    Func<Tran, bool> predicate = null;Di2015NewLine    predicate = t => t.Response == "00";Di2015NewLine    predicate = predicate.AndAlso(t => t.Amount < 100);Di2015NewLine    return predicate;Di2015NewLine}Di2015NewLine
491916Di2015UniqueSeparatorpublic ActionResult Open(string sort, string technician, Di2015NewLine    string category, string priority)Di2015NewLine{Di2015NewLine    // generate queryDi2015NewLine    // filter stuffDi2015NewLine    // order/sort stuffDi2015NewLine}Di2015NewLine
491983Di2015UniqueSeparatorxDoc.Descendants("term").Single(t => t.Descendants("name").Single().Value == name).Add(new XElement("image", "hi there"));
492049Di2015UniqueSeparator[Flags]Di2015NewLineenum PermissionsDi2015NewLine{Di2015NewLine  Read = 0x20000,Di2015NewLine  Full = 0x00001Di2015NewLine}Di2015NewLine
492049Di2015UniqueSeparatorstring val = ((Permissions )myValue).ToString();Di2015NewLine
492049Di2015UniqueSeparatorRead, FullDi2015NewLine
492145Di2015UniqueSeparator        public void Foo(Enum e)Di2015NewLine        {Di2015NewLine            var names = Enum.GetNames(e.GetType());Di2015NewLineDi2015NewLine            foreach (var name in names)Di2015NewLine            {Di2015NewLine                // do something!Di2015NewLine            }Di2015NewLine        }Di2015NewLine
492197Di2015UniqueSeparator[DllImport("ole32.dll")]Di2015NewLinestatic extern int CreateBindCtx(uint reserved, out IBindCtx ppbc);Di2015NewLine
492202Di2015UniqueSeparatorhttp://example.com/course/newcoursedate/1Di2015NewLine
492202Di2015UniqueSeparatorcourse
492202Di2015UniqueSeparator1
492202Di2015UniqueSeparatorcreate
492202Di2015UniqueSeparatorCourse
492202Di2015UniqueSeparator<% using (Html.BeginForm( "CreateCourseDate",Di2015NewLine                          "Course",Di2015NewLine                          new { id = ViewData.Model.CourseID }, ...Di2015NewLineDi2015NewLine    ...Di2015NewLineDi2015NewLine    <td><%=Html.TextBox("Date")%></td>Di2015NewLine    <td><%=Html.TextBox("City")%></td>Di2015NewLineDi2015NewLine<% } %>Di2015NewLine
492543Di2015UniqueSeparatorDi2015NewLine // Convert Japanese subject to ISO-2022-JP (JIS is essentially ISO-2022-JP)Di2015NewLineDi2015NewLine $subject = mb_convert_encoding ($subject, "JIS", "SJIS");Di2015NewLineDi2015NewLine // Now, base64 encode the subjectDi2015NewLineDi2015NewLine $subject = base64_encode ($subject);Di2015NewLineDi2015NewLine // Add the encoding markers to the subjectDi2015NewLineDi2015NewLine $subject = "=?iso-2022-jp?B?" . $subject . "?=";Di2015NewLineDi2015NewLine // Now, $subject can be placed as-is into the raw mail header.Di2015NewLine
492565Di2015UniqueSeparator    //------------------------------------------------------------------------------ Di2015NewLine    // <auto-generated> Di2015NewLine    // This code was generated by a tool. Di2015NewLine    // Runtime Version:2.0.50727.42 Di2015NewLine    // Di2015NewLine    // Changes to this file may cause incorrect behavior and will be lost if Di2015NewLine    // the code is regenerated. Di2015NewLine    // </auto-generated> Di2015NewLine    //------------------------------------------------------------------------------Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLinenamespace FirstWeb Di2015NewLine{ Di2015NewLine    public partial class _Default Di2015NewLine    { Di2015NewLineDi2015NewLine        /// <summary> Di2015NewLine        /// form1 control. Di2015NewLine        /// </summary> Di2015NewLine        /// <remarks> Di2015NewLine        /// Auto-generated field. Di2015NewLine        /// To modify move field declaration from designer file to code-behind file. Di2015NewLine        /// </remarks> Di2015NewLine        protected global::System.Web.UI.HtmlControls.HtmlForm form1; Di2015NewLine    } Di2015NewLine}Di2015NewLine
492704Di2015UniqueSeparatorfrom i in db.itemsDi2015NewLinelet p = db.photos.Where(p2 => i.id == p2.item_id).FirstOrDefault()Di2015NewLineorderby i.date descendingDi2015NewLineselect newDi2015NewLine{Di2015NewLine  itemName = i.name,Di2015NewLine  itemID = i.id,Di2015NewLine  id = i.id,Di2015NewLine  photoID = p == null ? null : p.PhotoID.ToString();Di2015NewLine}Di2015NewLine
492704Di2015UniqueSeparatorSELECT [t0].[Id] AS [Id], CONVERT(NVarChar,(Di2015NewLine    SELECT [t2].[PhotoId]Di2015NewLine    FROM (Di2015NewLine        SELECT TOP (1) [t1].[PhotoId]Di2015NewLine        FROM [dbo].[Photos] AS [t1]Di2015NewLine        WHERE [t1].[Item_Id] = ([t0].[Id])Di2015NewLine        ) AS [t2]Di2015NewLine    )) AS [PhotoId]Di2015NewLineFROM [dbo].[Items] AS [t0]Di2015NewLineORDER BY [t0].[Id] DESCDi2015NewLine
492704Di2015UniqueSeparator<RelOp LogicalOp="Left Outer Join" PhysicalOp="Nested Loops">Di2015NewLine
492853Di2015UniqueSeparatorpublic class TestDi2015NewLine{Di2015NewLine   string _numberAsString;Di2015NewLine   int _number = -1;Di2015NewLineDi2015NewLine   public Test() {}Di2015NewLine   public string NumberAsStringDi2015NewLine   {Di2015NewLine       get { return _numberAsString; }Di2015NewLine       set { _numberAsString= value; }Di2015NewLine   }Di2015NewLine   public int NumberDi2015NewLine   {Di2015NewLine       get { return int.Parse(_numberAsString); }Di2015NewLine       set { _numberAsString = value.ToString(); }Di2015NewLine   }Di2015NewLine}Di2015NewLine
492853Di2015UniqueSeparatorTest t = new Test();Di2015NewLinet.Number = 5;Di2015NewLineConsole.WriteLine(t.NumberAsString); // should print out "5"Di2015NewLinet.NumberAsString = "5";Di2015NewLineConsole.WriteLine(t.Number); // should print out "5"Di2015NewLine
492885Di2015UniqueSeparatorStringComparison.InvariantCulture:Di2015NewLineLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)Di2015NewLineLATIN SMALL LETTER I (U+0069) is less than LATIN CAPITAL LETTER I (U+0049)Di2015NewLineLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)Di2015NewLineDi2015NewLineStringComparison.Ordinal:Di2015NewLineLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)Di2015NewLineLATIN SMALL LETTER I (U+0069) is greater than LATIN CAPITAL LETTER I (U+0049)Di2015NewLineLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)Di2015NewLine
492887Di2015UniqueSeparatorbase
492887Di2015UniqueSeparatorIS-A
492887Di2015UniqueSeparatorHAS-A
492887Di2015UniqueSeparatorIS-A
492887Di2015UniqueSeparatorpublic class ADi2015NewLine{Di2015NewLine    public string field1;Di2015NewLine    public string field2;Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BDi2015NewLine{Di2015NewLine    public string field3;Di2015NewLine    public A a;Di2015NewLineDi2015NewLine    public void Assign(A source)Di2015NewLine    {Di2015NewLine        this.a = source;Di2015NewLine    }Di2015NewLine}Di2015NewLine
492899Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Xml;Di2015NewLineusing System.Xml.Linq;Di2015NewLineusing DocumentFormat.OpenXml.Packaging;Di2015NewLineDi2015NewLinenamespace OpenXmlDocGeneratorDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Adds extensions for making the Open XML SDK and LINQ to XML easier to use.Di2015NewLine    /// </summary>Di2015NewLine    public static class OpenXmlExtensionsDi2015NewLine    {Di2015NewLine        #region fieldsDi2015NewLineDi2015NewLine        private static readonly XNamespace w = "http://schemas.openxmlformats.org/wordprocessingml/2006/main";Di2015NewLine        private static readonly XName r = w + "r";Di2015NewLine        private static readonly XName ins = w + "ins";Di2015NewLine        private static readonly XNamespace ds = "http://schemas.openxmlformats.org/officeDocument/2006/customXml";Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region methodsDi2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Adds the custom XML part to the main document part.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="document">The main document part.</param>Di2015NewLine        /// <param name="customXml">The custom XML.</param>Di2015NewLine        /// <returns>The <see cref="CustomXmlPart" />.</returns>Di2015NewLine        public static void AddCustomXmlPart(this MainDocumentPart document, XDocument customXml)Di2015NewLine        {Di2015NewLine            CustomXmlPart customXmlPart = document.AddNewPart<CustomXmlPart>();Di2015NewLine            customXmlPart.PutXDocument(customXml);Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Adds the custom XML part with a custom XML properties to the main document part.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mainPart">The main document part.</param>Di2015NewLine        /// <param name="customXml">The custom XML.</param>Di2015NewLine        /// <param name="customXmlProperties">The custom XML properties.</param>Di2015NewLine        public static void AddCustomXmlPart(Di2015NewLine            this MainDocumentPart mainPart, XDocument customXml, XDocument customXmlProperties)Di2015NewLine        {Di2015NewLine            CustomXmlPart customXmlPart = mainPart.AddNewPart<CustomXmlPart>();Di2015NewLine            CustomXmlPropertiesPart customXmlPropertiesPart = customXmlPart.AddNewPart<CustomXmlPropertiesPart>();Di2015NewLine            customXmlPropertiesPart.PutXDocument(customXmlProperties);Di2015NewLine            customXmlPart.PutXDocument(customXml);Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Clones the specified element.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="element">The element.</param>Di2015NewLine        /// <returns>The cloned <see cref="XElement" />.</returns>Di2015NewLine        public static XElement Clone(this XElement element)Di2015NewLine        {Di2015NewLine            return new XElement(element.Name,Di2015NewLine                       element.Attributes(),Di2015NewLine                       element.Nodes().Select(n =>Di2015NewLine                          {Di2015NewLine                              XElement e = n as XElement;Di2015NewLine                              if (e != null)Di2015NewLine                              {Di2015NewLine                                  return e.Clone();Di2015NewLine                              }Di2015NewLineDi2015NewLine                              return n;Di2015NewLine                          }Di2015NewLine                       ),Di2015NewLine                       (!element.IsEmpty && !element.Nodes().OfType<XText>().Any()) ? string.Empty : nullDi2015NewLine                   );Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Fills the specified element with the provided <paramref name="entityMap"/>.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="element">The element.</param>Di2015NewLine        /// <param name="entityMap">The entity map between the custom XML elements and the entity values.</param>Di2015NewLine        /// <returns>The filled <see cref="XElement"/>.</returns>Di2015NewLine        public static XElement Fill(this XElement element, IDictionary<string, object> entityMap)Di2015NewLine        {Di2015NewLine            return new XElement(element.Name,Di2015NewLine                       element.Attributes(),Di2015NewLine                       element.Nodes().Select(node =>Di2015NewLine                          {Di2015NewLine                              XElement childElement = node as XElement;Di2015NewLine                              if (childElement != null)Di2015NewLine                              {Di2015NewLine                                  // If the child element does not have elements,Di2015NewLine                                  // attempt to insert the value from the entity map;Di2015NewLine                                  // otherwise, recursively call the Fill() to findDi2015NewLine                                  // child elements to fill.Di2015NewLine                                  return !childElement.HasElementsDi2015NewLine                                             ? InsertValue(childElement, entityMap)Di2015NewLine                                             : childElement.Fill(entityMap);Di2015NewLine                              }Di2015NewLineDi2015NewLine                              return node;Di2015NewLine                          }Di2015NewLine                       ),Di2015NewLine                       (!element.IsEmpty && !element.Nodes().OfType<XText>().Any()) ? string.Empty : nullDi2015NewLine                   );Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Gets a descendant element of the specified element the by the descendant's name.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="element">The element from which to find the descendant element.</param>Di2015NewLine        /// <param name="descendantElementName">Name of the descendant element.</param>Di2015NewLine        /// <returns>The descendant <see cref="XElement" />.</returns>Di2015NewLine        /// <exception cref="ArgumentNullException">Thrown when the <paramref name="element"/> is null.</exception>Di2015NewLine        public static XElement GetDescendantByName(this XElement element, string descendantElementName)Di2015NewLine        {Di2015NewLine            if (element == null)Di2015NewLine            {Di2015NewLine                throw new ArgumentNullException("element");Di2015NewLine            }Di2015NewLineDi2015NewLine            return element.Elements().DescendantsAndSelf().FirstOrDefault(e => e.Name.LocalName == descendantElementName);Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Gets the custom XML from the main document part.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mainPart">The main document part.</param>Di2015NewLine        /// <returns>The custom XML as a <see cref="XElement" />.</returns>Di2015NewLine        public static XElement GetCustomXml(this MainDocumentPart mainPart)Di2015NewLine        {Di2015NewLine            CustomXmlPart customXmlPart = mainPart.GetPartsOfType<CustomXmlPart>().FirstOrDefault();Di2015NewLine            return customXmlPart == null ? null : customXmlPart.GetXDocument().Root;Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Gets the XDocument from the document part.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="part">The document part.</param>Di2015NewLine        /// <returns>The XDocument.</returns>Di2015NewLine        public static XDocument GetXDocument(this OpenXmlPart part)Di2015NewLine        {Di2015NewLine            XDocument xdoc = part.Annotation<XDocument>();Di2015NewLine            if (xdoc != null)Di2015NewLine            {Di2015NewLine                return xdoc;Di2015NewLine            }Di2015NewLineDi2015NewLine            using (StreamReader streamReader = new StreamReader(part.GetStream()))Di2015NewLine            using (XmlReader xmlReader = XmlReader.Create(streamReader))Di2015NewLine            {Di2015NewLine                xdoc = XDocument.Load(xmlReader);Di2015NewLine            }Di2015NewLineDi2015NewLine            part.AddAnnotation(xdoc);Di2015NewLine            return xdoc;Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Determines whether the specified document is bindable.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="document">The document.</param>Di2015NewLine        /// <returns>Di2015NewLine        ///     <c>true</c> if the specified document has a <see cref="CustomXmlPart" />; otherwise, <c>false</c>.Di2015NewLine        /// </returns>Di2015NewLine        public static bool IsBindable(this WordprocessingDocument document)Di2015NewLine        {Di2015NewLine            return document.MainDocumentPart.GetPartsCountOfType<CustomXmlPart>() > 0;Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Serializes the XDocument back into the package.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="part">The document part.</param>Di2015NewLine        /// <param name="xdoc">The <see cref="XDocument" />.</param>Di2015NewLine        public static void PutXDocument(this OpenXmlPart part, XDocument xdoc)Di2015NewLine        {Di2015NewLine            if (xdoc != null)Di2015NewLine            {Di2015NewLine                using (Stream stream = part.GetStream(FileMode.Create, FileAccess.ReadWrite))Di2015NewLine                using (XmlWriter partWriter = XmlWriter.Create(stream))Di2015NewLine                {Di2015NewLine                    xdoc.Save(partWriter);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Removes the custom XML parts.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mainPart">The main document part.</param>Di2015NewLine        public static void RemoveCustomXmlParts(this MainDocumentPart mainPart)Di2015NewLine        {Di2015NewLine            if (mainPart.CustomXmlParts.Count() > 0)Di2015NewLine            {Di2015NewLine                mainPart.DeleteParts(mainPart.CustomXmlParts);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Replaces the custom XML in the main document mainPart.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mainPart">The main document part.</param>Di2015NewLine        /// <param name="customXml">The custom XML.</param>Di2015NewLine        public static void ReplaceCustomXml(this MainDocumentPart mainPart, XElement customXml)Di2015NewLine        {Di2015NewLine            if (customXml != null)Di2015NewLine            {Di2015NewLine                mainPart.RemoveCustomXmlParts();Di2015NewLineDi2015NewLine                CustomXmlPart customXmlPart = mainPart.AddNewPart<CustomXmlPart>();Di2015NewLine                using (Stream stream = customXmlPart.GetStream(FileMode.Create, FileAccess.ReadWrite))Di2015NewLine                using (XmlWriter writer = XmlWriter.Create(stream))Di2015NewLine                {Di2015NewLine                    customXml.Save(writer);Di2015NewLine                }   Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Translates the <paramref name="source"/> collection using the <paramref name="translate"/>,Di2015NewLine        /// then concatenates and returns the result.Di2015NewLine        /// </summary>Di2015NewLine        /// <typeparam name="T">The type of the items in the source.</typeparam>Di2015NewLine        /// <param name="source">The source.</param>Di2015NewLine        /// <param name="translate">The translation function to perform on each item in the source.</param>Di2015NewLine        /// <returns>The concatenated contents of the source collection.</returns>Di2015NewLine        public static string StringConcatenate<T>(this IEnumerable<T> source, Func<T, string> translate)Di2015NewLine        {Di2015NewLine            return source.Aggregate(new StringBuilder(), (s, i) => s.Append(translate(i)), s => s.ToString());Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Concatenates the items in the <paramref name="source"/> and returns the result.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="source">The source.</param>Di2015NewLine        /// <returns>The concatenated contents of the source collection.</returns>Di2015NewLine        public static string StringConcatenate(this IEnumerable<string> source)Di2015NewLine        {Di2015NewLine            return source.Aggregate(new StringBuilder(), (s, i) => s.Append(i), s => s.ToString());Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates a bindable version of the <see cref="WordprocessingDocument" />.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="document">The document.</param>Di2015NewLine        /// <returns>The <see cref="WordprocessingDocument" />.</returns>Di2015NewLine        /// <seealso cref="http://blogs.msdn.com/ericwhite/archive/2008/10/19/creating-data-bound-content-controls-using-the-open-xml-sdk-and-linq-to-xml.aspx"/>Di2015NewLine        public static WordprocessingDocument ToBindable(this WordprocessingDocument document)Di2015NewLine        {Di2015NewLine            foreach (MainDocumentPart mainPart in document.GetPartsOfType<MainDocumentPart>())Di2015NewLine            {Di2015NewLine                mainPart.RemoveCustomXmlParts();Di2015NewLineDi2015NewLine                Guid id = Guid.NewGuid();Di2015NewLine                XDocument customXml = mainPart.CreateCustomXml();Di2015NewLine                XDocument customXmlProperties = CreateCustomXmlProperties(id);Di2015NewLine                mainPart.AddCustomXmlPart(customXml, customXmlProperties);Di2015NewLineDi2015NewLine                XDocument partXDoc = mainPart.GetXDocument();Di2015NewLine                AddDataBinding(partXDoc, id);Di2015NewLine                mainPart.PutXDocument(partXDoc);Di2015NewLine            }Di2015NewLineDi2015NewLine            return document;Di2015NewLine        }Di2015NewLineDi2015NewLine        #region --privateDi2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Adds data binding to the content controls.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mainDocumentXDoc">The main document <see cref="XDocument" />.</param>Di2015NewLine        /// <param name="id">The id.</param>Di2015NewLine        private static void AddDataBinding(XDocument mainDocumentXDoc, Guid id)Di2015NewLine        {Di2015NewLine            foreach (XElement sdt in mainDocumentXDoc.Descendants(w + "sdt"))Di2015NewLine            {Di2015NewLine                sdt.Element(w + "sdtPr")Di2015NewLine                    .Element(w + "placeholder")Di2015NewLine                    .AddAfterSelf(Di2015NewLine                    new XElement(w + "dataBinding",Di2015NewLine                        new XAttribute(w + "xpath",Di2015NewLine                            "/root/" + sdt.Element(w + "sdtPr")Di2015NewLine                                .Element(w + "tag")Di2015NewLine                                .Attribute(w + "val").Value),Di2015NewLine                        new XAttribute(w + "storeItemID",Di2015NewLine                            "{" + id.ToString().ToUpper() + "}")Di2015NewLine                    )Di2015NewLine                );Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates the custom XML from the existing content controls.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mainPart">The main document part.</param>Di2015NewLine        /// <returns>The custom XML as a <see cref="XDocument" />.</returns>Di2015NewLine        private static XDocument CreateCustomXml(this MainDocumentPart mainPart)Di2015NewLine        {Di2015NewLine            XElement customXml =Di2015NewLine                new XElement("root",Di2015NewLine                    mainPartDi2015NewLine                    .GetXDocument()Di2015NewLine                    .Descendants(w + "sdt")Di2015NewLine                    .Select(sdt =>Di2015NewLine                        new XElement(Di2015NewLine                            sdt.Element(w + "sdtPr")Di2015NewLine                                .Element(w + "tag")Di2015NewLine                                .Attribute(w + "val").Value,Di2015NewLine                             GetTextFromContentControl(sdt).Trim())Di2015NewLine                    )Di2015NewLine                );Di2015NewLineDi2015NewLine            return new XDocument(customXml);Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates the custom XML property part contents.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="id">The id.</param>Di2015NewLine        /// <returns>The contents of the custom XML properties part.</returns>Di2015NewLine        private static XDocument CreateCustomXmlProperties(Guid id)Di2015NewLine        {Di2015NewLine            return new XDocument(Di2015NewLine                       new XElement(ds + "datastoreItem",Di2015NewLine                           new XAttribute(ds + "itemID",Di2015NewLine                               "{" + id.ToString().ToUpper() + "}"),Di2015NewLine                           new XAttribute(XNamespace.Xmlns + "ds",Di2015NewLine                               ds.NamespaceName),Di2015NewLine                           new XElement(ds + "schemaRefs")Di2015NewLine                       )Di2015NewLine                   );Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Gets the text from content control.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="contentControlNode">The content control node.</param>Di2015NewLine        /// <returns>The string representation of the value in the content control.</returns>Di2015NewLine        static string GetTextFromContentControl(XElement contentControlNode)Di2015NewLine        {Di2015NewLine            return contentControlNode.Descendants(w + "p")Di2015NewLine                .Select(p => p.Elements()Di2015NewLine                                 .Where(z => z.Name == r || z.Name == ins)Di2015NewLine                                 .Descendants(w + "t")Di2015NewLine                                 .StringConcatenate(element => (string)element) + Environment.NewLine)Di2015NewLine                .StringConcatenate();Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Inserts the value from the <paramref name="entityMap"/> into the <paramref name="childElement"/>.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="childElement">The child element.</param>Di2015NewLine        /// <param name="entityMap">The entity map.</param>Di2015NewLine        private static XElement InsertValue(XElement childElement, IDictionary<string, object> entityMap)Di2015NewLine        {Di2015NewLine            string name = childElement.Name.LocalName;Di2015NewLineDi2015NewLine            if (entityMap.Keys.Contains(name))Di2015NewLine            {Di2015NewLine                childElement.SetValue(entityMap[name] ?? string.Empty);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                childElement.SetValue(string.Empty);Di2015NewLine            }Di2015NewLineDi2015NewLine            return childElement;Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLine}Di2015NewLine
492963Di2015UniqueSeparatorstring[] lines =  Regex.Split(tbIn.Text, @"(?<=\\r\\n)(?!$)");Di2015NewLine
492988Di2015UniqueSeparatorprivate static int s_UniqueCounter; // starts at 0 by defaultDi2015NewLineprivate static readonly object s_UniqueCounterLock = new object();Di2015NewLineDi2015NewLinepublic static int GetUnique()Di2015NewLine{Di2015NewLine    lock (s_UniqueCounterLock)Di2015NewLine    {Di2015NewLine        s_UniqueCounter++;Di2015NewLine        return s_UniqueCounter;Di2015NewLine    }Di2015NewLine}Di2015NewLine
492988Di2015UniqueSeparatorinternal static int QueryUniqueCount() // or this could be private, or publicDi2015NewLine{Di2015NewLine    lock (s_UniqueCounterLock)Di2015NewLine    {Di2015NewLine        return s_UniqueCounter;Di2015NewLine    }Di2015NewLine}Di2015NewLine
493039Di2015UniqueSeparatorIIdentity
493039Di2015UniqueSeparatorIPrincipal
493039Di2015UniqueSeparatorContext.User
493039Di2015UniqueSeparator<authentication mode="Forms">
493039Di2015UniqueSeparator<asp:login runat="server"/>
493042Di2015UniqueSeparatorpublic static void SpawnIEWithSource(String szHtml)Di2015NewLine{Di2015NewLine    // Get the class type and instantiate Internet Explorer.Di2015NewLine    Type ieType = Type.GetTypeFromProgID("InternetExplorer.Application");Di2015NewLine    object ie = Activator.CreateInstance(ieType);Di2015NewLineDi2015NewLine    //Navigate to the blank page in order to make sure the Document existsDi2015NewLine    //ie.Navigate2("about:blank");Di2015NewLine    Object[] parameters = new Object[1];Di2015NewLine    parameters[0] = @"about:blank";Di2015NewLine    ie.GetType().InvokeMember("Navigate2", BindingFlags.InvokeMethod | BindingFlags.IgnoreCase, null, ie, parameters);Di2015NewLineDi2015NewLine    //Get the Document object now that it existsDi2015NewLine    //Object document = ie.Document;Di2015NewLine    object document = ie.GetType().InvokeMember("Document", BindingFlags.GetProperty | BindingFlags.IgnoreCase, null, ie, null);Di2015NewLineDi2015NewLine    //document.Write(szSourceHTML);Di2015NewLine    parameters = new Object[1];Di2015NewLine    parameters[0] = szHtml;Di2015NewLine    document.GetType().InvokeMember("Write", BindingFlags.InvokeMethod | BindingFlags.IgnoreCase, null, document, parameters);Di2015NewLineDi2015NewLine    //document.Close()Di2015NewLine    document.GetType().InvokeMember("Close", BindingFlags.InvokeMethod | BindingFlags.IgnoreCase, null, document, null);Di2015NewLineDi2015NewLine    //ie.Visible = true;Di2015NewLine    parameters = new Object[1];Di2015NewLine    parameters[0] = true;Di2015NewLine    ie.GetType().InvokeMember("Visible", BindingFlags.SetProperty | BindingFlags.IgnoreCase, null, ie, parameters);Di2015NewLine}Di2015NewLine
493055Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string text = Di2015NewLine"<i><b>It is noticeably faster.</b></i> <i><b>They take less disk space.</i>";Di2015NewLine        Regex pattern = new Regex(@"(</[b|i|u]>)+(\\s*)(<[b|i|u]>)+");Di2015NewLineDi2015NewLine        Match match = pattern.Match(text);Di2015NewLine        foreach (Group group in match.Groups)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Next group:");Di2015NewLine            foreach (Capture capture in group.Captures)Di2015NewLine            {Di2015NewLine                Console.WriteLine("  " + capture.Value);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
493325Di2015UniqueSeparatorselect COALESCE(Name, '') from table_name;
493325Di2015UniqueSeparatorDefaultValue
493517Di2015UniqueSeparatorArrayList
493517Di2015UniqueSeparatorList<Customer>
493517Di2015UniqueSeparatorType.GetType(string)
493517Di2015UniqueSeparatorType
493517Di2015UniqueSeparatorType elementType = Type.GetType("Customer");Di2015NewLineType listType = typeof(List<>).MakeGenericType(new Type[] { elementType });Di2015NewLineDi2015NewLineobject list = Activator.CreateInstance(listType);Di2015NewLine
493523Di2015UniqueSeparatorIQueryable<Transaction> query = db.Transactions;Di2015NewLineDi2015NewLineif (filterByTransactionType)Di2015NewLine{Di2015NewLine  query = query.Where(t => t.TransactionType == theTransactionType);Di2015NewLine}Di2015NewLineif (filterByResponseCode)Di2015NewLine{Di2015NewLine  query = query.Where(t => t.ResponseCode == theResponseCode);Di2015NewLine}Di2015NewLineif (filterByAmount)Di2015NewLine{Di2015NewLine  query = query.Where(t => t.TransactionAmount > theAmount);Di2015NewLine}Di2015NewLine
493523Di2015UniqueSeparatorList<Expression<Func<Transaction, bool>>> filters = GetFilterExpressions();Di2015NewLineDi2015NewLineIQueryable<Transaction> query = db.Transactions;Di2015NewLinefilters.ForEach(f => query = query.Where(f));Di2015NewLine
493594Di2015UniqueSeparatorRemotingConfiguration.RegisterWellKnownServiceType(typeof(FooRemoting), Di2015NewLine          serverName, WellKnownObjectMode.Singleton);Di2015NewLine
493594Di2015UniqueSeparatorRemotingServices.Marshal(foo);Di2015NewLine
493594Di2015UniqueSeparatorpublic override object InitializeLifetimeService()Di2015NewLine{Di2015NewLine    //return base.InitializeLifetimeService();Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
493594Di2015UniqueSeparatorRemotingServices.Marshal(foo);Di2015NewLine
493618Di2015UniqueSeparatorreturn String.IsNullOrEmpty(returnUrl) ? Di2015NewLine\\\RedirectToAction("Open", "ServiceCall") : Di2015NewLine\\\Redirect(returnUrl);Di2015NewLine
493618Di2015UniqueSeparatorreturn String.IsNullOrEmpty(returnUrl)  Di2015NewLine\\\? RedirectToAction("Open", "ServiceCall")  Di2015NewLine\\\: Redirect(returnUrl);Di2015NewLine
493621Di2015UniqueSeparatorpublic void Init(HttpApplication context)Di2015NewLine{Di2015NewLine    context.BeginRequest += new EventHandler(Begin_Request);Di2015NewLine    IHttpModule sessionModule = context.Modules["Session"];Di2015NewLine    if(sessionModule != null && Di2015NewLine        sessionModule.GetType() == typeof(System.Web.SessionState.SessionStateModule))Di2015NewLine    {Di2015NewLine        (sessionModule as System.Web.SessionState.SessionStateModule).Start Di2015NewLine          += new EventHandler(CustomHttpModule_Start);Di2015NewLine    }Di2015NewLine}Di2015NewLine
493621Di2015UniqueSeparator<%@ Application Language="C#" CodeBehind="Global.asax.cs" Inherits="Global" %>Di2015NewLine
493621Di2015UniqueSeparatorpublic class Global : System.Web.HttpApplicationDi2015NewLine{Di2015NewLine  public Global()   {\}Di2015NewLineDi2015NewLine  void Session_Start(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine      // Code that runs when a new session is startedDi2015NewLine  }Di2015NewLine}Di2015NewLine
493735Di2015UniqueSeparatorpublic static IEnumerable<TSource> DuplicatesBy<TSource, TKey>Di2015NewLine    (this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)Di2015NewLine{Di2015NewLine    HashSet<TKey> seenKeys = new HashSet<TKey>();Di2015NewLine    foreach (TSource element in source)Di2015NewLine    {Di2015NewLine        // Yield it if the key hasn't actually been added - i.e. itDi2015NewLine        // was already in the setDi2015NewLine        if (!seenKeys.Add(keySelector(element)))Di2015NewLine        {Di2015NewLine            yield return element;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
493735Di2015UniqueSeparatorvar duplicates = cars.DuplicatesBy(car => car.Color);Di2015NewLine
493738Di2015UniqueSeparatorpublic static int InsertArtist(Artist artist)Di2015NewLine{Di2015NewLine    if (artist == null)Di2015NewLine        throw new ArgumentNullException("artist");Di2015NewLineDi2015NewLine    int artistid = 0;Di2015NewLine    using (TransactionScope scope = new TransactionScope())Di2015NewLine    {Di2015NewLine        // insert the master ArtistDi2015NewLine        /* Di2015NewLine           we plug the artistid variable into Di2015NewLine           any child instance where ArtistID is requiredDi2015NewLine        */Di2015NewLine        artistid = SiteProvider.Artist.InsertArtist(new ArtistDetails(Di2015NewLine        0,Di2015NewLine        artist.BandName,Di2015NewLine        artist.DateAdded));Di2015NewLineDi2015NewLine        // insert the child ArtistArtistGenreDi2015NewLine        artist.ArtistArtistGenres.ForEach(item =>Di2015NewLine        {Di2015NewLine            var artistartistgenre = new ArtistArtistGenreDetails(Di2015NewLine                0,Di2015NewLine                artistid,Di2015NewLine                item.ArtistGenreID);Di2015NewLine            SiteProvider.Artist.InsertArtistArtistGenre(artistartistgenre);Di2015NewLine        });Di2015NewLineDi2015NewLine        // insert the child ArtistLinkDi2015NewLine        artist.ArtistLinks.ForEach(item =>Di2015NewLine        {Di2015NewLine            var artistlink = new ArtistLinkDetails(Di2015NewLine                0,Di2015NewLine                artistid,Di2015NewLine                item.LinkURL);Di2015NewLine            SiteProvider.Artist.InsertArtistLink(artistlink);Di2015NewLine        });Di2015NewLineDi2015NewLine        // insert the child ArtistProfileDi2015NewLine        artist.ArtistProfiles.ForEach(item =>Di2015NewLine        {Di2015NewLine            var artistprofile = new ArtistProfileDetails(Di2015NewLine                0,Di2015NewLine                artistid,Di2015NewLine                item.Profile);Di2015NewLine            SiteProvider.Artist.InsertArtistProfile(artistprofile);Di2015NewLine        });Di2015NewLineDi2015NewLine        // insert the child FestivalArtistDi2015NewLine        artist.FestivalArtists.ForEach(item =>Di2015NewLine        {Di2015NewLine            var festivalartist = new FestivalArtistDetails(Di2015NewLine                0,Di2015NewLine                item.FestivalID,Di2015NewLine                artistid,Di2015NewLine                item.AvailableFromDate,Di2015NewLine                item.AvailableToDate,Di2015NewLine                item.DateAdded);Di2015NewLine            SiteProvider.Festival.InsertFestivalArtist(festivalartist);Di2015NewLine        });Di2015NewLine        BizObject.PurgeCacheItems(String.Format(ARTISTARTISTGENRE_ALL_KEY, String.Empty, String.Empty));Di2015NewLine        BizObject.PurgeCacheItems(String.Format(ARTISTLINK_ALL_KEY, String.Empty, String.Empty));Di2015NewLine        BizObject.PurgeCacheItems(String.Format(ARTISTPROFILE_ALL_KEY, String.Empty, String.Empty));Di2015NewLine        BizObject.PurgeCacheItems(String.Format(FESTIVALARTIST_ALL_KEY, String.Empty, String.Empty));Di2015NewLine        BizObject.PurgeCacheItems(String.Format(ARTIST_ALL_KEY, String.Empty, String.Empty));Di2015NewLineDi2015NewLine        // commit the entire transaction - all or nothingDi2015NewLine        scope.Complete();Di2015NewLine    }Di2015NewLine    return artistid;Di2015NewLine}Di2015NewLine
493773Di2015UniqueSeparator    public class ParentClassDi2015NewLine    {Di2015NewLine        public class NestedClassDi2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine       private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            Type t = typeof(ParentClass);Di2015NewLine            Type t2 = t.GetNestedType("NestedClass");Di2015NewLine            MessageBox.Show(t2.ToString());Di2015NewLine        }Di2015NewLine
493852Di2015UniqueSeparator0x80
493852Di2015UniqueSeparator0x9F
493915Di2015UniqueSeparatorSystemEvents
493915Di2015UniqueSeparatorMicrosoft.Win32
493915Di2015UniqueSeparatorSystemEvents.UserPreferenceChanged += new UserPreferenceChanged;Di2015NewLineDi2015NewLine/* Other stuff... */Di2015NewLineDi2015NewLineprivate static void UserPreferenceChanged(object s, UserPreferenceChangedEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Category == UserPreferenceCategory.Locale)Di2015NewLine    {Di2015NewLine        /* They changed regional settings, so do your work here */Di2015NewLine    }Di2015NewLine}Di2015NewLine
493918Di2015UniqueSeparator    public interface IXmlSerializable {Di2015NewLine\//if this interface is implemented, the object can be serialized to XMLDi2015NewLine\string toXML();Di2015NewLine\IXmlSerializable fromXML(XmlDocumentFragment inXml);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class AwwaTransmissionInfo : IXmlSerializable {Di2015NewLineDi2015NewLine\public DateTime DateTime = DateTime.Now;Di2015NewLine\public int ItemCount;Di2015NewLineDi2015NewLine\public string toXML() {Di2015NewLine\\throw new Exception("The method or operation is not implemented.");Di2015NewLine\}Di2015NewLineDi2015NewLine\public IXmlSerializable fromXML(XmlDocumentFragment inXml) {Di2015NewLine\\throw new Exception("The method or operation is not implemented.");Di2015NewLine\}Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class CEmail : **IXmlSerializable** {Di2015NewLine\public string Email = "";Di2015NewLineDi2015NewLine\public string toXML() {Di2015NewLine\\throw new System.Exception("The method or operation is not implemented.");Di2015NewLine\}Di2015NewLineDi2015NewLine\public IXmlSerializable fromXML(XmlDocumentFragment inXml) {Di2015NewLine\\throw new System.Exception("The method or operation is not implemented.");Di2015NewLine\}Di2015NewLine}Di2015NewLine
493936Di2015UniqueSeparatorinternal class ProgramDi2015NewLine{Di2015NewLine    private static void Main()Di2015NewLine    {Di2015NewLine        var ms = new Category(1, "Microsoft");Di2015NewLine        var sun = new Category(2, "Sun");Di2015NewLineDi2015NewLine        var events = new List<Event>Di2015NewLine                         {Di2015NewLine                             new Event(ms, "msdn event"),Di2015NewLine                             new Event(ms, "mix"),Di2015NewLine                             new Event(sun, "java event")Di2015NewLine                         };Di2015NewLineDi2015NewLine        var microsoftFilter = new Filter<Event>(e => e.CategoryId == ms.CategoryId);Di2015NewLineDi2015NewLine        var microsoftEvents = FilterEvents(events, microsoftFilter);Di2015NewLineDi2015NewLine        Console.Out.WriteLine(microsoftEvents.Count);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static List<Event> FilterEvents(List<Event> events, Filter<Event> filter)Di2015NewLine    {Di2015NewLine        return events.FindAll(e => filter.IsSatisfied(e));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Filter<T> where T: classDi2015NewLine{Di2015NewLine    private readonly Predicate<T> criteria;Di2015NewLineDi2015NewLine    public Filter(Predicate<T> criteria)Di2015NewLine    {Di2015NewLine        this.criteria = criteria;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsSatisfied(T obj)Di2015NewLine    {Di2015NewLine        return criteria(obj);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class EventDi2015NewLine{Di2015NewLine    public Event(Category category, string name)Di2015NewLine    {Di2015NewLine        CategoryId = category.CategoryId;Di2015NewLine        Name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int CategoryId { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CategoryDi2015NewLine{Di2015NewLine    public Category(int categoryId, string name)Di2015NewLine    {Di2015NewLine        CategoryId = categoryId;Di2015NewLine        Name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Name { get; set; }Di2015NewLine    public int CategoryId { get; set; }Di2015NewLine}Di2015NewLine
494000Di2015UniqueSeparator*
494000Di2015UniqueSeparatorAttachConsole
494000Di2015UniqueSeparatorFreeConsole
494000Di2015UniqueSeparatorFreeConsole
494000Di2015UniqueSeparatorCreateProcess
494000Di2015UniqueSeparatorDETACHED_PROCESS
494000Di2015UniqueSeparatorCREATE_NEW_CONSOLE
494000Di2015UniqueSeparator*
494240Di2015UniqueSeparatorSetEquals()?Di2015NewLine
494275Di2015UniqueSeparatorCreateChildControls
494275Di2015UniqueSeparatorpublic class SmokingCalc : ScriptControlDi2015NewLine{Di2015NewLine    protected override void CreateChildControls()Di2015NewLine    {Di2015NewLine        this.Controls.Add(costTextbox);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override IEnumerable<ScriptDescriptor>Di2015NewLine            GetScriptDescriptors()Di2015NewLine    {Di2015NewLine        ScriptControlDescriptor descriptor = new ScriptControlDescriptor("SmokingCalc.SmokingCalc", this.ClientID);Di2015NewLine        yield return descriptor;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Generate the script referenceDi2015NewLine    protected override IEnumerable<ScriptReference>Di2015NewLine            GetScriptReferences()Di2015NewLine    {Di2015NewLine        yield return new ScriptReference("SmokingCalc.SmokingCalc.js", this.GetType().Assembly.FullName);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected HtmlTextWriter htmlWriter;Di2015NewLine    protected TextBox costTextbox = new TextBox();Di2015NewLine    protected TextBox amountTextbox = new TextBox();Di2015NewLine    protected TextBox yearsTextbox = new TextBox();Di2015NewLine    protected Button submitButton = new Button();Di2015NewLine}Di2015NewLine
494569Di2015UniqueSeparatorpublic class ChildDi2015NewLine{Di2015NewLine   private Person parent;Di2015NewLine   public Person ParentDi2015NewLine   {Di2015NewLine      get { return parent;}Di2015NewLine   }Di2015NewLine}Di2015NewLine
494813Di2015UniqueSeparator<asp:Panel ID="myPanel" runat="server">Di2015NewLine        <asp:Panel ID="dock1" runat="server">this is first module</asp:Panel>Di2015NewLine        <asp:Panel ID="dock2" runat="server">this is second module</asp:Panel>Di2015NewLine        <asp:Panel ID="dock3" runat="server">this is third module</asp:Panel>Di2015NewLine</asp:Panel>Di2015NewLine
494813Di2015UniqueSeparator<asp:Panel ID="myPanel" runat="server">Di2015NewLine        <asp:Panel ID="container1" runat="server"></asp:Panel>Di2015NewLine        <asp:Panel ID="container2" runat="server"></asp:Panel>Di2015NewLine        <asp:Panel ID="container3" runat="server"></asp:Panel>Di2015NewLine        <asp:Panel ID="dock1" runat="server">this is first module</asp:Panel>Di2015NewLine        <asp:Panel ID="dock2" runat="server">this is second module</asp:Panel>Di2015NewLine        <asp:Panel ID="dock3" runat="server">this is third module</asp:Panel>Di2015NewLine</asp:Panel>Di2015NewLine
494813Di2015UniqueSeparator    Control myCtrl1 = myPanel.FindControl("dock1");Di2015NewLine    Control containerCtrl1 = myPanel.FindControl("container3");Di2015NewLine    myCtrl1.Visible = true;Di2015NewLine    myPanel.Controls.Remove(myCtrl1);Di2015NewLine    containerCtrl1 .Controls.Add(myCtrl1);Di2015NewLine
494852Di2015UniqueSeparator  var asyncResult = request.BeginGetResponse(...Di2015NewLine  asyncResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(10))Di2015NewLine
494856Di2015UniqueSeparatorvar settings = ConfigurationSection.AppSettings;Di2015NewLinevar connectionString = settings<string>["connectionString"];Di2015NewLinevar timeout = settings<int>["timeout"];Di2015NewLine
494856Di2015UniqueSeparatorvar timeout = settings<int>["connectionString"];Di2015NewLine
494942Di2015UniqueSeparator.Cast<T>
494942Di2015UniqueSeparator.OfType<T>
494942Di2015UniqueSeparatorGetTable<T>()
494942Di2015UniqueSeparatorpublic IEnumerable<Employee> All(int accountholder_id)Di2015NewLine{Di2015NewLine    return db.Employees.Where(e => e.accountholder_id == accountholder_id)Di2015NewLine        .OrderBy(a => a.name);Di2015NewLine}Di2015NewLineDi2015NewLinepublic Employee Single(int id)Di2015NewLine{Di2015NewLine    return db.Employees.Single(a => a.id == id);Di2015NewLine}Di2015NewLine
494942Di2015UniqueSeparatorcAccountEntity
495012Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic class BaseDi2015NewLine{Di2015NewLine    protected virtual void Foo()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic sealed class Derived : BaseDi2015NewLine{Di2015NewLine    protected override void Foo()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
495012Di2015UniqueSeparatoroverride
495039Di2015UniqueSeparatorApplication.Run(new MainForm());Di2015NewLine
495039Di2015UniqueSeparatorLoginDialog // the class that handles login UIDi2015NewLine  login = new LoginDialog ();Di2015NewLineDi2015NewLineif (login.ShowDialog () == DialogResult.OK)Di2015NewLine{Di2015NewLine   // check credentialsDi2015NewLine   // if credentials OKDi2015NewLine   Application.Run(new MainForm());Di2015NewLine}Di2015NewLine
495039Di2015UniqueSeparatorShowDialog
495054Di2015UniqueSeparatorvar names = new Dictionary<int, string> {Di2015NewLine  { 1, "Adam" },Di2015NewLine  { 2, "Bart" },Di2015NewLine  { 3, "Charlie" }Di2015NewLine};Di2015NewLine
495133Di2015UniqueSeparator   a     b       cDi2015NewLinea  1     2     0.25Di2015NewLineb  0.5   1     0.125Di2015NewLinec  4     8       1Di2015NewLine
495133Di2015UniqueSeparator    public enum VolumeTypeDi2015NewLine    {Di2015NewLine        Litre = 0,Di2015NewLine        Pint = 1,Di2015NewLine        Gallon = 2Di2015NewLine    }Di2015NewLineDi2015NewLine    public static double ConvertUnits(int units, VolumeType from, VolumeType to)Di2015NewLine    {Di2015NewLine        double[][] factor = Di2015NewLine            {Di2015NewLine                new double[] {1, 2, 0.25},Di2015NewLine                new double[] {0.5, 1, 0.125},Di2015NewLine                new double[] {4, 8, 1}Di2015NewLine            };Di2015NewLine        return units * factor[(int)from][(int)to];Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void ShowConversion(int oldUnits, VolumeType from, VolumeType to)Di2015NewLine    {Di2015NewLine        double newUnits = ConvertUnits(oldUnits, from, to);Di2015NewLine        Console.WriteLine("{0} {1} = {2} {3}", oldUnits, from.ToString(), newUnits, to.ToString());Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        ShowConversion(1, VolumeType.Litre, VolumeType.Litre);  // = 1Di2015NewLine        ShowConversion(1, VolumeType.Litre, VolumeType.Pint);   // = 2Di2015NewLine        ShowConversion(1, VolumeType.Litre, VolumeType.Gallon); // = 4Di2015NewLine        ShowConversion(1, VolumeType.Pint, VolumeType.Pint);    // = 1Di2015NewLine        ShowConversion(1, VolumeType.Pint, VolumeType.Litre);   // = 0.5Di2015NewLine        ShowConversion(1, VolumeType.Pint, VolumeType.Gallon);  // = 0.125Di2015NewLine        ShowConversion(1, VolumeType.Gallon, VolumeType.Gallon);// = 1Di2015NewLine        ShowConversion(1, VolumeType.Gallon, VolumeType.Pint);  // = 8Di2015NewLine        ShowConversion(1, VolumeType.Gallon, VolumeType.Litre); // = 4Di2015NewLine        ShowConversion(10, VolumeType.Litre, VolumeType.Pint);  // = 20Di2015NewLine        ShowConversion(20, VolumeType.Gallon, VolumeType.Pint); // = 160Di2015NewLine    }Di2015NewLine
495338Di2015UniqueSeparatorusing System.Web.UI;Di2015NewLineDi2015NewLinepublic class BaseMaster : MasterPageDi2015NewLine{Di2015NewLine    public string MyString { get; set; }Di2015NewLine}Di2015NewLine
495338Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Web.UI;Di2015NewLineDi2015NewLinepublic class BasePage : PageDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (null != Master && Master is BaseMaster)Di2015NewLine        {Di2015NewLine            ((BaseMaster)Master).MyString = "Some value";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
495338Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic partial class Masters_MyMasterPage : BaseMasterDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!string.IsNullOrEmpty(MyString))Di2015NewLine        {Di2015NewLine            // Do something.Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
495338Di2015UniqueSeparatorpublic partial class _Default : BasePageDi2015NewLine
495417Di2015UniqueSeparator<% Html.RenderPartial("~/Views/Project/Projects.ascx", ViewData); %>Di2015NewLine
495475Di2015UniqueSeparatorDequeue
495587Di2015UniqueSeparatorusing System.IO;Di2015NewLineDi2015NewLineStreamReader reader = new StreamReader(filename);Di2015NewLinewhile(reader.ReadLine() != "[DEVICE]") { continue; }Di2015NewLineDi2015NewLineconst string DeviceNameString = "DeviceName=";Di2015NewLinewhile(true) {Di2015NewLine\string line = reader.ReadLine();Di2015NewLine\if(line.Length < DeviceNameString.Length) { continue; }Di2015NewLine\else if(line.Substring(0, DeviceNameString.Length) != DeviceNameString) { continue; }Di2015NewLine\return line.Substring(DeviceNameString.Length);Di2015NewLine}Di2015NewLine
495605Di2015UniqueSeparatorXpsDocument xpsDoc = new XpsDocument(xpsFileName, System.IO.FileAccess.Read);Di2015NewLineDi2015NewLineFixedDocumentSequence docSeq = xpsDoc.GetFixedDocumentSequence();Di2015NewLineconst double scaleFactor = 0.8;Di2015NewLinefor (int pageNum = 0; pageNum < docSeq.DocumentPaginator.PageCount; pageNum++)Di2015NewLine{Di2015NewLine    DocumentPage docPage = docSeq.DocumentPaginator.GetPage(pageNum);Di2015NewLineDi2015NewLine    // FIX: calling GetPage without calling UpdateLayout causes a memory leakDi2015NewLine    ((FixedPage)docPage.Visual).UpdateLayout();Di2015NewLineDi2015NewLine    RenderTargetBitmap renderTarget = new RenderTargetBitmap((int)Math.Round(scaleFactor * docPage.Size.Width),Di2015NewLine                (int)Math.Round(scaleFactor * docPage.Size.Height), (int)Math.Round(scaleFactor * 96), (int)Math.Round(scaleFactor * 96), PixelFormats.Default);Di2015NewLine    renderTarget.Render(docPage.Visual);Di2015NewLineDi2015NewLine    JpegBitmapEncoder encoder = new JpegBitmapEncoder();Di2015NewLine    encoder.QualityLevel = 75;Di2015NewLine    // Choose type here ie: JpegBitmapEncoder, etcDi2015NewLine    //BitmapEncoder encoder = new PngBitmapEncoder();  // Choose type here ie: JpegBitmapEncoder, etcDi2015NewLine    encoder.Frames.Add(BitmapFrame.Create(renderTarget));Di2015NewLineDi2015NewLine    string pageImageFileName = string.Format("{0}-{1}.jpg", Path.Combine(Path.GetDirectoryName(xpsFileName), Path.GetFileNameWithoutExtension(xpsFileName)), pageNum);Di2015NewLine            using (FileStream pageOutStream = new FileStream(pageImageFileName, FileMode.Create, FileAccess.Write))Di2015NewLine    {Di2015NewLine        encoder.Save(pageOutStream);Di2015NewLine    }Di2015NewLine}Di2015NewLine
495765Di2015UniqueSeparatorSELECT  LEVEL, Id, Name, LPAD(' ', LEVEL) || Name AS IndentedNameDi2015NewLineFROM    CategoriesDi2015NewLineSTART WITHDi2015NewLine        ParentID IS NULLDi2015NewLineCONNECT BYDi2015NewLine        ParentID = PRIOR IdDi2015NewLineORDER SIBLINGS BYDi2015NewLine        NameDi2015NewLine
495765Di2015UniqueSeparatorIndentedName
495765Di2015UniqueSeparatorLEVEL
495765Di2015UniqueSeparatorbad
495765Di2015UniqueSeparatorNULL
495765Di2015UniqueSeparator0
495765Di2015UniqueSeparatorSQL Server
495765Di2015UniqueSeparatorWITH    q (id, parentid, name, level, bc) ASDi2015NewLine        (Di2015NewLine        SELECT  id, parentid, name, 1, CAST(ROW_NUMBER() OVER (ORDER BY name) AS VARCHAR(MAX))Di2015NewLine        FROM    CategoriesDi2015NewLine        WHERE   ParentID IS NULLDi2015NewLine        UNION ALLDi2015NewLine        SELECT  c.id, c.parentid, c.name, q.level + 1, q.bc + '.' + CAST(ROW_NUMBER() OVER (ORDER BY c.name) AS VARCHAR(MAX))Di2015NewLine        FROM    qDi2015NewLine        JOIN    Categories cDi2015NewLine        ON      c.parentId = q.idDi2015NewLine        )Di2015NewLineSELECT  *Di2015NewLineFROM    qDi2015NewLineORDER BYDi2015NewLine        bcDi2015NewLine
495765Di2015UniqueSeparatorOracle
495765Di2015UniqueSeparatorSQL Server
495765Di2015UniqueSeparatorNULL
495765Di2015UniqueSeparatorNULL
495778Di2015UniqueSeparatorRegexOptions
495778Di2015UniqueSeparator[Flags]
495778Di2015UniqueSeparator[Flags]Di2015NewLineenum MyOptions {Di2015NewLine   UpperCase = 1,Di2015NewLine   Reverse   = 2,Di2015NewLine   Trim      = 4Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void DoTransform(MyOptions options) {Di2015NewLine    if ((options & MyOptions.UpperCase) == MyOptions.UpperCase) {Di2015NewLine        /* Do Upper case transform */Di2015NewLine    }Di2015NewLine    if ((options & MyOptions.Reverse) == MyOptions.Reverse) {Di2015NewLine        /* Do Reverse transform */Di2015NewLine    }Di2015NewLine    /* etc, ... */Di2015NewLine}Di2015NewLineDi2015NewLineDoTransform(MyOptions.UpperCase | MyOptions.Reverse);Di2015NewLine
495778Di2015UniqueSeparator[Flags]
495778Di2015UniqueSeparator[Flags]
495778Di2015UniqueSeparatorToString()
495778Di2015UniqueSeparator[Flags]
495789Di2015UniqueSeparator public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            this.treeView1.AllowDrop = true;Di2015NewLine            this.listBox1.AllowDrop = true;Di2015NewLine            this.listBox1.MouseDown += new MouseEventHandler(listBox1_MouseDown);Di2015NewLine            this.listBox1.DragOver += new DragEventHandler(listBox1_DragOver);Di2015NewLineDi2015NewLine            this.treeView1.DragEnter += new DragEventHandler(treeView1_DragEnter);Di2015NewLine            this.treeView1.DragDrop += new DragEventHandler(treeView1_DragDrop);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.PopulateListBox();Di2015NewLine            this.PopulateTreeView();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void PopulateListBox()Di2015NewLine        {Di2015NewLine            for (int i = 0; i <= 10; i++)Di2015NewLine            {Di2015NewLine                this.listBox1.Items.Add(DateTime.Now.AddDays(i));Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void PopulateTreeView()Di2015NewLine        {Di2015NewLine            for (int i = 1; i <= 2; i++)Di2015NewLine            {Di2015NewLine                TreeNode node = new TreeNode("Node" + i);Di2015NewLine                for (int j = 1; j <= 2; j++)Di2015NewLine                {Di2015NewLine                    node.Nodes.Add("SubNode" + j);Di2015NewLine                }Di2015NewLine                this.treeView1.Nodes.Add(node);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void treeView1_DragDrop(object sender, DragEventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine            TreeNode nodeToDropIn = this.treeView1.GetNodeAt(this.treeView1.PointToClient(new Point(e.X, e.Y)));Di2015NewLine            if (nodeToDropIn == null) { return; }Di2015NewLine            if(nodeToDropIn.Level > 0)Di2015NewLine            {Di2015NewLine                nodeToDropIn = nodeToDropIn.Parent;Di2015NewLine            }Di2015NewLineDi2015NewLine            object data = e.Data.GetData(typeof(DateTime));Di2015NewLine            if (data == null) { return; }Di2015NewLine            nodeToDropIn.Nodes.Add(data.ToString());Di2015NewLine            this.listBox1.Items.Remove(data);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void listBox1_DragOver(object sender, DragEventArgs e)Di2015NewLine        {Di2015NewLine            e.Effect = DragDropEffects.Move;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void treeView1_DragEnter(object sender, DragEventArgs e)Di2015NewLine        {Di2015NewLine            e.Effect = DragDropEffects.Move;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void listBox1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine        {Di2015NewLine            this.listBox1.DoDragDrop(this.listBox1.SelectedItem, DragDropEffects.Move);Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLine
496167Di2015UniqueSeparator// Bad code - checks type twice for no reasonDi2015NewLineif (randomObject is TargetType)Di2015NewLine{Di2015NewLine    TargetType foo = (TargetType) randomObject;Di2015NewLine    // Do something with fooDi2015NewLine}Di2015NewLine
496167Di2015UniqueSeparatorrandomObject
496167Di2015UniqueSeparatorrandomObject
496167Di2015UniqueSeparatorrandomObject
496167Di2015UniqueSeparatorTargetType
496167Di2015UniqueSeparator// This will throw an exception if randomObject is non-null andDi2015NewLine// refers to an object of an incompatible type. The cast isDi2015NewLine// the best code if that's the behaviour you want.Di2015NewLineTargetType convertedRandomObject = (TargetType) randomObject;Di2015NewLine
496167Di2015UniqueSeparatorrandomObject
496167Di2015UniqueSeparatorTargetType
496167Di2015UniqueSeparatorTargetType
496167Di2015UniqueSeparatorTargetType convertedRandomObject = randomObject as TargetType;Di2015NewLineif (convertedRandomObject != null)Di2015NewLine{Di2015NewLine    // Do stuff with convertedRandomObjectDi2015NewLine}Di2015NewLine
496167Di2015UniqueSeparatorrandomObject
496167Di2015UniqueSeparatorTargetType
496167Di2015UniqueSeparatorTargetType
496167Di2015UniqueSeparatoras
496167Di2015UniqueSeparatorTargetType
496167Di2015UniqueSeparatorTargetType? convertedRandomObject = randomObject as TargetType?;Di2015NewLineif (convertedRandomObject != null)Di2015NewLine{Di2015NewLine    // Do stuff with convertedRandomObject.ValueDi2015NewLine}Di2015NewLine
496167Di2015UniqueSeparatoris
496167Di2015UniqueSeparatoris
496167Di2015UniqueSeparatoris
496167Di2015UniqueSeparatoras
496167Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    const int Size = 30000000;Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        object[] values = new object[Size];Di2015NewLine        for (int i = 0; i < Size - 2; i += 3)Di2015NewLine        {Di2015NewLine            values[i] = null;Di2015NewLine            values[i + 1] = "x";Di2015NewLine            values[i + 2] = new object();Di2015NewLine        }Di2015NewLine        FindLengthWithIsAndCast(values);Di2015NewLine        FindLengthWithIsAndAs(values);Di2015NewLine        FindLengthWithAsAndNullCheck(values);Di2015NewLine    }Di2015NewLineDi2015NewLine    static void FindLengthWithIsAndCast(object[] values)        Di2015NewLine    {Di2015NewLine        Stopwatch sw = Stopwatch.StartNew();Di2015NewLine        int len = 0;Di2015NewLine        foreach (object o in values)Di2015NewLine        {Di2015NewLine            if (o is string)Di2015NewLine            {Di2015NewLine                string a = (string) o;Di2015NewLine                len += a.Length;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine("Is and Cast: {0} : {1}", len,Di2015NewLine                          (long)sw.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLineDi2015NewLine    static void FindLengthWithIsAndAs(object[] values)        Di2015NewLine    {Di2015NewLine        Stopwatch sw = Stopwatch.StartNew();Di2015NewLine        int len = 0;Di2015NewLine        foreach (object o in values)Di2015NewLine        {Di2015NewLine            if (o is string)Di2015NewLine            {Di2015NewLine                string a = o as string;Di2015NewLine                len += a.Length;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine("Is and As: {0} : {1}", len,Di2015NewLine                          (long)sw.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLineDi2015NewLine    static void FindLengthWithAsAndNullCheck(object[] values)        Di2015NewLine    {Di2015NewLine        Stopwatch sw = Stopwatch.StartNew();Di2015NewLine        int len = 0;Di2015NewLine        foreach (object o in values)Di2015NewLine        {Di2015NewLine            string a = o as string;Di2015NewLine            if (a != null)Di2015NewLine            {Di2015NewLine                len += a.Length;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine("As and null check: {0} : {1}", len,Di2015NewLine                          (long)sw.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLine}Di2015NewLine
496167Di2015UniqueSeparatorint value;Di2015NewLineif (int.TryParse(text, value))Di2015NewLine{Di2015NewLine    value = int.Parse(text);Di2015NewLine    // Use valueDi2015NewLine}Di2015NewLine
496502Di2015UniqueSeparator    protected virtual void comboBoxAutoComplete_KeyPress(object sender, KeyPressEventArgs e) {Di2015NewLine        if (Char.IsControl(e.KeyChar)) {Di2015NewLine            //let it go if it's a control char such as escape, tab, backspace, enter...Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        ComboBox box = ((ComboBox)sender);Di2015NewLineDi2015NewLine        //must get the selected portion only. Otherwise, we append the e.KeyChar to the AutoSuggested value (i.e. we'd never get anywhere)Di2015NewLine        string nonSelected = box.Text.Substring(0, box.Text.Length - box.SelectionLength);Di2015NewLineDi2015NewLine        string text = nonSelected + e.KeyChar;Di2015NewLine        bool matched = false;Di2015NewLine        for (int i = 0; i < box.Items.Count; i++) {Di2015NewLine            if (((DataRowView)box.Items[i])[box.DisplayMember].ToString().StartsWith(text, true, null)) {Di2015NewLine                matched = true;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        //toggle the matched bool because if we set handled to true, it precent's input, and we don't want to preventDi2015NewLine        //input if it's matched.Di2015NewLine        e.Handled = !matched;Di2015NewLine    }Di2015NewLine
496527Di2015UniqueSeparator$("#TB_ajaxContent").html(result);</pre>
496530Di2015UniqueSeparatorint i;    Di2015NewLinebool success = Int32.TryParse(textBox1.text, out i);Di2015NewLine
496649Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection(myConnectionString))Di2015NewLine            {Di2015NewLine                using (SqlDataAdapter adapter = new SqlDataAdapter("SELECT * from MyTable", conn))Di2015NewLine                {Di2015NewLine                    DataTable table = new DataTable();Di2015NewLine                    adapter.FillSchema(table, SchemaType.Mapped);Di2015NewLine                    //at this point, table will have no rows, but will have all the columns of which you can get their datatypesDi2015NewLine                }Di2015NewLine            }Di2015NewLine
496699Di2015UniqueSeparator// new StreamReader("file.txt").ReadToEnd().Split(new char[] {'\\n'}).LengthDi2015NewLine//     becomes this:Di2015NewLinevar file = new StreamReader("file.txt").ReadToEnd(); // big stringDi2015NewLinevar lines = file.Split(new char[] {'\\n'});           // big arrayDi2015NewLinevar count = lines.Count;Di2015NewLine
496699Di2015UniqueSeparatorSystem.IO.File.ReadAllLines(filePath).Length
496699Di2015UniqueSeparatorint TotalLines(string filePath)Di2015NewLine{Di2015NewLine    using (StreamReader r = new StreamReader(filePath))Di2015NewLine    {Di2015NewLine        int i = 0;Di2015NewLine        while (r.ReadLine() != null) { i++; }Di2015NewLine        return i;Di2015NewLine    }Di2015NewLine}Di2015NewLine
496725Di2015UniqueSeparatorvar currentValues = currentRow.Split(separatorChar);Di2015NewLineDi2015NewLinefor(var i=0;i<columnList.Length;i++){Di2015NewLine   // use i to index both (or all) arrays and build your mapDi2015NewLine}Di2015NewLine
496891Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLineXmlWriter writer = XmlWriter.Create(sb, settings);Di2015NewLineDi2015NewLinewriter.WriteStartDocument();Di2015NewLinewriter.WriteStartElement("People");Di2015NewLineDi2015NewLinewriter.WriteStartElement("Person");Di2015NewLinewriter.WriteAttributeString("Name", "Nick");Di2015NewLinewriter.WriteEndElement();Di2015NewLineDi2015NewLinewriter.WriteStartElement("Person");Di2015NewLinewriter.WriteStartAttribute("Name");Di2015NewLinewriter.WriteValue("Nick");Di2015NewLinewriter.WriteEndAttribute();Di2015NewLinewriter.WriteEndElement();Di2015NewLineDi2015NewLinewriter.WriteEndElement();Di2015NewLinewriter.WriteEndDocument();Di2015NewLineDi2015NewLinewriter.Flush();Di2015NewLineDi2015NewLineXmlDocument xmlDocument = new XmlDocument();Di2015NewLinexmlDocument.LoadXml(sb.ToString());Di2015NewLinereturn xmlDocument;Di2015NewLine
496918Di2015UniqueSeparatorString
496918Di2015UniqueSeparatorsealed
496918Di2015UniqueSeparatorstring
496937Di2015UniqueSeparatorEnum.Parse
496966Di2015UniqueSeparator[KnownType(typeof(Bar))]Di2015NewLine[DataContract]Di2015NewLinepublic class Foo { }Di2015NewLine
497005Di2015UniqueSeparatorint[] numbers = { 1, 3, 4, 9, 2 };Di2015NewLineint numToRemove = 4;Di2015NewLinenumbers = numbers.Where(val => val != numToRemove).ToArray();Di2015NewLine
497005Di2015UniqueSeparatorstatic bool isNotFour(int n)Di2015NewLine{Di2015NewLine    return n != 4;Di2015NewLine}Di2015NewLineDi2015NewLineint[] numbers = { 1, 3, 4, 9, 2 };Di2015NewLinenumbers = Array.FindAll(numbers, isNotFour).ToArray();Di2015NewLine
497005Di2015UniqueSeparatorint[] numbers = { 1, 3, 4, 9, 2, 4 };Di2015NewLineint numToRemove = 4;Di2015NewLineint numIndex = Array.IndexOf(numbers, numToRemove);Di2015NewLinenumbers = numbers.Where((val, idx) => idx != numIndex).ToArray();Di2015NewLine
497005Di2015UniqueSeparatorint[] numbers = { 1, 3, 4, 9, 2, 4 };Di2015NewLineint numToRemove = 4;Di2015NewLineint numIdx = Array.IndexOf(numbers, numToRemove);Di2015NewLineList<int> tmp = new List<int>(numbers);Di2015NewLinetmp.RemoveAt(numIdx);Di2015NewLinenumbers = tmp.ToArray();Di2015NewLine
497275Di2015UniqueSeparatorvar e = enumerable.First();Di2015NewLine
497275Di2015UniqueSeparatorvar e = enumerable.FirstOrDefault();Di2015NewLine
497275Di2015UniqueSeparatorFirstOrDefault()
497275Di2015UniqueSeparatordefault(T)
497275Di2015UniqueSeparatornull
497275Di2015UniqueSeparatorGetEnumerator
497275Di2015UniqueSeparatorMoveNext
497275Di2015UniqueSeparatorIEnumerable<Elem>
497275Di2015UniqueSeparatorElem e = myDefault;Di2015NewLineusing (IEnumerator<Elem> enumer = enumerable.GetEnumerator()) {Di2015NewLine    if (enumer.MoveNext()) e = enumer.Current;Di2015NewLine}Di2015NewLine
497275Di2015UniqueSeparator.Single()
497275Di2015UniqueSeparatorSingleOrDefault()
497275Di2015UniqueSeparatorFirstOrDefault()
497275Di2015UniqueSeparatorSingleOrDefault()
497275Di2015UniqueSeparatorIEnumerator
497275Di2015UniqueSeparatorusing
497463Di2015UniqueSeparatorif len(@l_author) > 0Di2015NewLineset @sql =  @sql + ' and author like ''%''+@author+''%'''Di2015NewLineDi2015NewLineEXECUTE sp_executesql  @sql, N'@author varchar(100)', @L_authorDi2015NewLine
497463Di2015UniqueSeparator@L_author
497463Di2015UniqueSeparator@author
497463Di2015UniqueSeparatorSET FMT_ONLY ON
497463Di2015UniqueSeparatorExecuteReader
497463Di2015UniqueSeparatorIDataReader
497463Di2015UniqueSeparatorDataTable.Fill
497463Di2015UniqueSeparator...Di2015NewLineif(!string.IsNullOrEmpty(author)) {Di2015NewLine    query = query.Where(row => row.Author.Contains(author));Di2015NewLine}Di2015NewLine...Di2015NewLine
497569Di2015UniqueSeparator Uri baseAddress = new Uri("http://localhost/CommService");Di2015NewLine WSDualHttpBinding wsd = new WSDualHttpBinding();Di2015NewLine EndpointAddress ea = new EndpointAddress(baseAddress, EndpointIdentity.CreateDnsIdentity("localhost"));Di2015NewLine client  = new CommServiceClient(new InstanceContext(this), wsd, ea);Di2015NewLine
497742Di2015UniqueSeparatorA8 BD A8 AE
497742Di2015UniqueSeparator<html><body>¨½¨®</body></html>Di2015NewLine
497800Di2015UniqueSeparatorpublic GenericList<T> where T : IDisposableDi2015NewLine
497800Di2015UniqueSeparatorpublic abstract class ABC {}Di2015NewLinepublic class XYZ : ABC {}Di2015NewLineDi2015NewLinepublic GenericList<T> where T : ABCDi2015NewLine
497807Di2015UniqueSeparatorusing Microsoft.Win32;Di2015NewLineDi2015NewLinepublic class FileAssocDi2015NewLine{Di2015NewLine    public string Extension;Di2015NewLine    public string Filetype;Di2015NewLineDi2015NewLine    public FileAssoc(string fileext, string name)Di2015NewLine    {Di2015NewLine        Extension = fileext;Di2015NewLine        Filetype = name;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class EnumRegFilesDi2015NewLine{Di2015NewLine    public static List<FileAssoc> GetFileAssociations()Di2015NewLine    {Di2015NewLine        List<FileAssoc> result = new List<FileAssoc>();Di2015NewLine        RegistryKey rk = Registry.ClassesRoot;Di2015NewLineDi2015NewLine        String[] names = rk.GetSubKeyNames();Di2015NewLine        foreach (string file in names)Di2015NewLine        {Di2015NewLine            if (file.StartsWith("."))Di2015NewLine            {Di2015NewLine                RegistryKey rkey = rk.OpenSubKey(file);Di2015NewLine                object descKey = rkey.GetValue("");Di2015NewLineDi2015NewLine                if (descKey != null)Di2015NewLine                {Di2015NewLine                    string desc = descKey.ToString();Di2015NewLine                    if (!string.IsNullOrEmpty(desc))Di2015NewLine                    {Di2015NewLine                        result.Add(new FileAssoc(file, desc));Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
497842Di2015UniqueSeparatorusing System.Text;Di2015NewLineDi2015NewLinestring inputString = GetInput();Di2015NewLinevar encoder = ASCIIEncoding.GetEncoder();Di2015NewLineencoder.Fallback = new EncoderReplacementFallback(string.Empty);Di2015NewLineDi2015NewLinebyte[] bAsciiString = encoder.GetBytes(inputString);Di2015NewLineDi2015NewLine// Do something with bytes...Di2015NewLine// can write to a file as isDi2015NewLineFile.WriteAllBytes(FILE_NAME, bAsciiString);Di2015NewLine// or turn back into a "clean" stringDi2015NewLinestring cleanString = ASCIIEncoding.GetString(bAsciiString); Di2015NewLine// since the offending bytes have been removed, can use default encoding as wellDi2015NewLineAssert.AreEqual(cleanString, Default.GetString(bAsciiString));Di2015NewLine
497938Di2015UniqueSeparatord = {}Di2015NewLine
497994Di2015UniqueSeparator<link rel="alternate" type="..." href="..." />Di2015NewLine
497994Di2015UniqueSeparatorapplication/atom+xml
497994Di2015UniqueSeparatorapplication/rss+xml
498107Di2015UniqueSeparatorMyClass<MyInternalConcrete> myInstance = new MySpecificClass();Di2015NewLine
498111Di2015UniqueSeparatorIDisposable
498111Di2015UniqueSeparatorDispose()
498111Di2015UniqueSeparatorIDisposable
498111Di2015UniqueSeparatorDispose
498158Di2015UniqueSeparatorSystem.Web.UI.HtmlTextWriter htmlWriter = Di2015NewLine    new System.Web.UI.HtmlTextWriter(yourTextWriter, "    ");Di2015NewLine
498219Di2015UniqueSeparatorusing NativeWifi;Di2015NewLineusing System;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace WifiExampleDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        /// <summary>Di2015NewLine        /// Converts a 802.11 SSID to a string.Di2015NewLine        /// </summary>Di2015NewLine        static string GetStringForSSID(Wlan.Dot11Ssid ssid)Di2015NewLine        {Di2015NewLine            return Encoding.ASCII.GetString( ssid.SSID, 0, (int) ssid.SSIDLength );Di2015NewLine        }Di2015NewLineDi2015NewLine        static void Main( string[] args )Di2015NewLine        {Di2015NewLine            WlanClient client = new WlanClient();Di2015NewLine            foreach ( WlanClient.WlanInterface wlanIface in client.Interfaces )Di2015NewLine            {Di2015NewLine                // Lists all networks with WEP securityDi2015NewLine                Wlan.WlanAvailableNetwork[] networks = wlanIface.GetAvailableNetworkList( 0 );Di2015NewLine                foreach ( Wlan.WlanAvailableNetwork network in networks )Di2015NewLine                {Di2015NewLine                    if ( network.dot11DefaultCipherAlgorithm == Wlan.Dot11CipherAlgorithm.WEP )Di2015NewLine                    {Di2015NewLine                        Console.WriteLine( "Found WEP network with SSID {0}.", GetStringForSSID(network.dot11Ssid));Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                // Retrieves XML configurations of existing profiles.Di2015NewLine                // This can assist you in constructing your own XML configurationDi2015NewLine                // (that is, it will give you an example to follow).Di2015NewLine                foreach ( Wlan.WlanProfileInfo profileInfo in wlanIface.GetProfiles() )Di2015NewLine                {Di2015NewLine                    string name = profileInfo.profileName; // this is typically the network's SSIDDi2015NewLineDi2015NewLine                    string xml = wlanIface.GetProfileXml( profileInfo.profileName );Di2015NewLine                }Di2015NewLineDi2015NewLine                // Connects to a known network with WEP securityDi2015NewLine                string profileName = "Cheesecake"; // this is also the SSIDDi2015NewLine                string mac = "52544131303235572D454137443638";Di2015NewLine                string key = "hello";Di2015NewLine                string profileXml = string.Format("<?xml version=\\"1.0\\"?><WLANProfile xmlns=\\"http://www.microsoft.com/networking/WLAN/profile/v1\\"><name>{0}</name><SSIDConfig><SSID><hex>{1}</hex><name>{0}</name></SSID></SSIDConfig><connectionType>ESS</connectionType><MSM><security><authEncryption><authentication>open</authentication><encryption>WEP</encryption><useOneX>false</useOneX></authEncryption><sharedKey><keyType>networkKey</keyType><protected>false</protected><keyMaterial>{2}</keyMaterial></sharedKey><keyIndex>0</keyIndex></security></MSM></WLANProfile>", profileName, mac, key);Di2015NewLineDi2015NewLine                wlanIface.SetProfile( Wlan.WlanProfileFlags.AllUser, profileXml, true );Di2015NewLine                wlanIface.Connect( Wlan.WlanConnectionMode.Profile, Wlan.Dot11BssType.Any, profileName );Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
498257Di2015UniqueSeparatorvar userModules = db.userModules.SingleOrDefault(m => m.userId == myUserId).modules;Di2015NewLine// Get the modules of the user (a comma delimited string)Di2015NewLinevar integerModules = modules.Split(',').Select(m => int.Parse(m));Di2015NewLine// Convert the comma delimited string to IEnumerable<int>Di2015NewLineDi2015NewLinevar query = db.modules.Select(x => new {Di2015NewLine                x.moduleId,Di2015NewLine                x.moduleName,Di2015NewLine                isChecked = integerModules.Contains(x.moduleId)Di2015NewLine}); // And finally do the queryDi2015NewLine
498349Di2015UniqueSeparatorvar acronyms = new[] { "AB", "BC", "CD", "ZZAB" };Di2015NewLinevar regex = new Regex(string.Join("|", acronyms), RegexOptions.Compiled);Di2015NewLinefor (var match = regex.Match("ZZZABCDZZZ"); match.Success; match = match.NextMatch())Di2015NewLine    Console.WriteLine(match.Value);Di2015NewLine// returns AB and CDDi2015NewLine
498370Di2015UniqueSeparatorMyValueChanged += new EventHandler<MyValueChangedArgs>(HandleMyValueChanged);Di2015NewLine
498410Di2015UniqueSeparatorstatic void SetTextboxTextSafe(int result)Di2015NewLine{Di2015NewLine    label1.Text = result.ToString();Di2015NewLine}Di2015NewLine
498410Di2015UniqueSeparatorprivate static void SumData(object state)Di2015NewLine{Di2015NewLine    int result;Di2015NewLine    //int[] icount = (int[])state;Di2015NewLine    int icount = (int)state;Di2015NewLineDi2015NewLine    for (int i = icount; i > 0; i--)Di2015NewLine    {Di2015NewLine        result += i;Di2015NewLine        System.Threading.Thread.Sleep(1000);Di2015NewLine    }Di2015NewLine    Form1 frm1 = new Form1();Di2015NewLine    frm1.setTextboxText(result);Di2015NewLine}Di2015NewLine
498492Di2015UniqueSeparatorList<Guid> subPageGuids = new List<Guid>(from x in subPages select x.Id);Di2015NewLine
498668Di2015UniqueSeparatorpublic class CarDi2015NewLine{Di2015NewLine  VehicleState _vehicleState= VehicleState.Stationary;Di2015NewLineDi2015NewLine  public VehicleState VehicleState Di2015NewLine  {Di2015NewLine    get { return _vehicleState; }Di2015NewLine    set { _vehicleState = value; DoSomething(); }Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum VehicleStateDi2015NewLine{Di2015NewLine    Stationary, Idle, MovingDi2015NewLine}Di2015NewLine
498668Di2015UniqueSeparatorreader.Database = Databases.Oracle;Di2015NewLine
498722Di2015UniqueSeparatorContains
498722Di2015UniqueSeparatorIndexOf
498722Di2015UniqueSeparatorpublic bool Contains(string value)Di2015NewLine{Di2015NewLine    return (this.IndexOf(value, StringComparison.Ordinal) >= 0);Di2015NewLine}Di2015NewLine
498722Di2015UniqueSeparatorCompareInfo.IndexOf
498722Di2015UniqueSeparatorIndexOf(string)
498722Di2015UniqueSeparatorContains()
498722Di2015UniqueSeparatorIndexOf
498722Di2015UniqueSeparatorIndexOf
498924Di2015UniqueSeparatorradioButton1
498924Di2015UniqueSeparatordowork()
498924Di2015UniqueSeparatorbg.CancellationPending == true
498924Di2015UniqueSeparatorWorkerSupportsCancellation
499105Di2015UniqueSeparatorSmtpAppender
499105Di2015UniqueSeparatorConsoleAppender
499105Di2015UniqueSeparatorFileAppender
499105Di2015UniqueSeparator<staticLogFileName value="false" />
499112Di2015UniqueSeparator.AsEnumerable()
499112Di2015UniqueSeparatorWhere
499112Di2015UniqueSeparatorreturn _repository.GetAllChildren().AsEnumerable()Di2015NewLine            .Where(c => c.Parent.ParentId == parentId).ToList();Di2015NewLine
499218Di2015UniqueSeparatorprivate Image GetImage(string filePath)Di2015NewLine{Di2015NewLine    WebClient l_WebClient = new WebClient();Di2015NewLine    byte[] l_imageBytes = l_WebClient.DownloadData(filePath);Di2015NewLine    MemoryStream l_stream = new MemoryStream(l_imageBytes);Di2015NewLine    return Image.FromStream(l_stream);Di2015NewLine}Di2015NewLine
499218Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string filePath = Request.QueryString["i"];Di2015NewLine    string extension = l_filePath.Substring(l_filePath.LastIndexOf('.') + 1);Di2015NewLine    Response.ContentType = "image/" + extension;Di2015NewLine    byte[] data = new WebClient.DownloadData(filePath);Di2015NewLine    Response.OutputStream.Write(data, 0, data.Length);Di2015NewLine    Response.End();Di2015NewLine}Di2015NewLine
499218Di2015UniqueSeparator<img src="http://www.mydomain.com/ImageLoader.aspx?i=http://images.mydomain.com/img/a.jpg" />Di2015NewLine
499218Di2015UniqueSeparator<img src="http://images.mydomain.com/img/a.jpg" />Di2015NewLine
499324Di2015UniqueSeparatorDataGridView
499324Di2015UniqueSeparatorthis.dataGridView1.DataSource = null;Di2015NewLinethis.dataGridView1.Columns.Clear();Di2015NewLinethis.dataGridView1.DataSource = data;Di2015NewLine
499552Di2015UniqueSeparator    // A sample dictionary:Di2015NewLine    var dictionary = new Dictionary<int, string>();Di2015NewLine    dictionary.Add(1, "Home");Di2015NewLine    dictionary.Add(2, "Work");Di2015NewLine    dictionary.Add(3, "Mobile");Di2015NewLine    dictionary.Add(4, "Fax");Di2015NewLineDi2015NewLine    // Binding the dictionary to the DropDownList:Di2015NewLine    dropDown.DataTextField = "Value";Di2015NewLine    dropDown.DataValueField = "Key";Di2015NewLine    dropDown.DataSource = dictionary;  //Dictionary<int, string>Di2015NewLine    dropDown.DataBind();Di2015NewLine
499622Di2015UniqueSeparatorpublic IP(string address) {Di2015NewLineAddress = address;Di2015NewLineDomain = "";Di2015NewLineNotes = "";Di2015NewLineFirstAccess = DateTime.Now;Di2015NewLineLastAccess = DateTime.Now;Di2015NewLinethis._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));Di2015NewLineOnCreated(); }Di2015NewLine
499626Di2015UniqueSeparatorvar theteams =     Di2015NewLine    (from teams in xdoc.Descendants("team")Di2015NewLine    orderby (int)teams.Element("points") descending, OtherField1, OtherField2Di2015NewLine    select new Team(teams.Element("teamID").Value,Di2015NewLine    (int)teams.Element("points"))).Take(3);Di2015NewLine
499627Di2015UniqueSeparatorvar ret = from listings in db.ListingsDi2015NewLinelet ordS = listings.OrderItems.Count > 0 ? Di2015NewLine                        listings.OrderItems.First().Order.OrderStatus.ToString() : OrderStatus.NotCheckedOut.ToString()Di2015NewLine  select new ListingDi2015NewLine   {Di2015NewLine   ID = listings.ID,Di2015NewLine   //etcDi2015NewLine   OrderStatus = (OrderStatus)Enum.Parse(typeof(OrderStatus), ordS)Di2015NewLine};Di2015NewLine
499768Di2015UniqueSeparator[XmlElement("trees")]
499768Di2015UniqueSeparator[Serializable(), XmlRoot("root")]Di2015NewLinepublic class testDi2015NewLine{Di2015NewLine    [XmlElement("trees")]Di2015NewLine    public List<string> MyProp1 = new List<string>();Di2015NewLineDi2015NewLine    public test()Di2015NewLine    {Di2015NewLine        MyProp1.Add("some text");Di2015NewLine        MyProp1.Add("some more text");Di2015NewLine    }Di2015NewLine}Di2015NewLine
499768Di2015UniqueSeparatorArrayList
499768Di2015UniqueSeparatorList<string>
499768Di2015UniqueSeparatorStringCollection
499863Di2015UniqueSeparatorPrivate Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.ClickDi2015NewLineDi2015NewLine    // Create the listViewDi2015NewLine    Dim lstView As New ListView()Di2015NewLine    lstView.Dock = DockStyle.FillDi2015NewLine    lstView.Items.Add("item 1") //item added for testDi2015NewLine    lstView.Items.Add("item 2") //item added for testDi2015NewLineDi2015NewLine    // Create the new tab pageDi2015NewLine    Dim tab As New TabPage("next tab")Di2015NewLine    tab.Controls.Add(lstView) // Add the listview to the tab pageDi2015NewLineDi2015NewLine    // Add the tabpage to the existing TabCrontrolDi2015NewLine    Me.TabControl1.TabPages.Add(tab)Di2015NewLineDi2015NewLineEnd SubDi2015NewLine
500073Di2015UniqueSeparatorSystem.Web.HttpContext.Current.User.Identity.IsAuthenticated;Di2015NewLine
500091Di2015UniqueSeparatordesigner.cs
500091Di2015UniqueSeparatorInitializeComponent()
500091Di2015UniqueSeparatordesigner.cs
500095Di2015UniqueSeparator    Point start = Point.Empty;Di2015NewLine    Point end = Point.Empty;Di2015NewLineDi2015NewLine    int bitmapWidth = bmp.Width;Di2015NewLine    int bitmapHeight = bmp.Height;Di2015NewLineDi2015NewLine    #region find start and end pointDi2015NewLine    BitmapData data = bmp.LockBits(new Rectangle(0, 0, bitmapWidth, bitmapHeight), ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        unsafeDi2015NewLine        {Di2015NewLine            byte* pData0 = (byte*)data.Scan0;Di2015NewLine            for (int y = 0; y < bitmapHeight; y++)Di2015NewLine            {Di2015NewLine                for (int x = 0; x < bitmapWidth; x++)Di2015NewLine                {Di2015NewLine                    byte* pData = pData0 + (y * data.Stride) + (x * 4);Di2015NewLineDi2015NewLine                    byte xyBlue = pData[0];Di2015NewLine                    byte xyGreen = pData[1];Di2015NewLine                    byte xyRed = pData[2];Di2015NewLine                    byte xyAlpha = pData[3];Di2015NewLineDi2015NewLineDi2015NewLine                    if (color.A != xyAlphaDi2015NewLine                            || color.B != xyBlueDi2015NewLine                            || color.R != xyRedDi2015NewLine                            || color.G != xyGreen)Di2015NewLine                    {Di2015NewLine                        //ignore transparent pixelsDi2015NewLine                        if (xyAlpha == 0)Di2015NewLine                            continue;Di2015NewLine                        if (start.IsEmpty)Di2015NewLine                        {Di2015NewLine                            start = new Point(x, y);Di2015NewLine                        }Di2015NewLine                        else if (start.Y > y)Di2015NewLine                        {Di2015NewLine                            start.Y = y;Di2015NewLine                        }Di2015NewLine                        if (end.IsEmpty)Di2015NewLine                        {Di2015NewLine                            end = new Point(x, y);Di2015NewLine                        }Di2015NewLine                        else if (end.X < x)Di2015NewLine                        {Di2015NewLine                            end.X = x;Di2015NewLine                        }Di2015NewLine                        else if (end.Y < y)Di2015NewLine                        {Di2015NewLine                            end.Y = y;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        bmp.UnlockBits(data);Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine
500125Di2015UniqueSeparatorGet
500125Di2015UniqueSeparatorDictionary<string, object>
500125Di2015UniqueSeparatorclass my_class:Di2015NewLine    passDi2015NewLineDi2015NewLinemy_instance = my_class()Di2015NewLinemy_instance.my_attr = 1Di2015NewLineprint(my_instance.my_attr)Di2015NewLine
500125Di2015UniqueSeparatormy_attr
500385Di2015UniqueSeparatorreturn this._categories.SelectMany(c => c.SubCategories);Di2015NewLine
500516Di2015UniqueSeparatorSystem.Net.WebRequestMethods.Http
500516Di2015UniqueSeparatorpublic const string Connect = "CONNECT";Di2015NewLinepublic const string Get = "GET";Di2015NewLinepublic const string Head = "HEAD";Di2015NewLinepublic const string MkCol = "MKCOL";Di2015NewLinepublic const string Post = "POST";Di2015NewLinepublic const string Put = "PUT";Di2015NewLine
500516Di2015UniqueSeparatorSystem.Web.HttpVerb
500516Di2015UniqueSeparatorinternal
500563Di2015UniqueSeparatorDispose()
500563Di2015UniqueSeparatorDispose()
500563Di2015UniqueSeparatorusing
500563Di2015UniqueSeparatorusing(TcpClient tcpClient = new TcpClient("url.com", 80))Di2015NewLineusing(NetworkStream tcpStream = tcpClient.GetStream())Di2015NewLineusing(StreamReader tcpReader = new StreamReader(tcpStream))Di2015NewLineusing(StreamWriter tcpWriter = new StreamWriter(tcpStream))Di2015NewLine{Di2015NewLine   ...Di2015NewLine}Di2015NewLine
500563Di2015UniqueSeparatorNetworkStream
500563Di2015UniqueSeparatorNetworkStream
500563Di2015UniqueSeparatorStreamReader
500563Di2015UniqueSeparatorGZipStream
500563Di2015UniqueSeparatorleaveOpen
500563Di2015UniqueSeparatorNonClosingStream
500707Di2015UniqueSeparatorDictionary<string, int> categoryIdLookup;Di2015NewLine
500726Di2015UniqueSeparatorstring
500726Di2015UniqueSeparatorstring
500726Di2015UniqueSeparatorstring
500726Di2015UniqueSeparatoryield return
500726Di2015UniqueSeparatorint i = 1;Di2015NewLineAction action = delegate {i++;};Di2015NewLineaction();Di2015NewLineConsole.WriteLine(i);Di2015NewLine
500726Di2015UniqueSeparatorclass Foo {Di2015NewLine    public int i; // yes, a public fieldDi2015NewLine    public void SomeMethod() {i++;}Di2015NewLine}Di2015NewLine...Di2015NewLineFoo foo = new Foo();Di2015NewLinefoo.i = 1;Di2015NewLineAction action = foo.SomeMethod;Di2015NewLineaction();Di2015NewLineConsole.WriteLine(foo.i);Di2015NewLine
500726Di2015UniqueSeparatori
500763Di2015UniqueSeparator<img src="<%=Model.FileContent.FileContents %>" />Di2015NewLine
500763Di2015UniqueSeparatorsrc
500763Di2015UniqueSeparatorsrc
500763Di2015UniqueSeparatorsrc
500763Di2015UniqueSeparator<img src="/image/result/12345" />Di2015NewLine
500763Di2015UniqueSeparatorpublic class ImageController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Result(int resultID)Di2015NewLine    {Di2015NewLine        // Do stuff here...Di2015NewLineDi2015NewLine        return File(..);Di2015NewLine    }Di2015NewLine}Di2015NewLine
500930Di2015UniqueSeparatorbool b = listOfStrings.Any(s=>myString.Contains(s));Di2015NewLine
500930Di2015UniqueSeparatorbool b = listOfStrings.Any(myString.Contains);Di2015NewLine
500930Di2015UniqueSeparatorHashSet
500930Di2015UniqueSeparatorArray.BinarySearch
500955Di2015UniqueSeparator<xsl:template name="formatDate">Di2015NewLine\<xsl:param name="dateTime" />Di2015NewLine\<xsl:variable name="date" select="substring-before($dateTime, 'T')" />Di2015NewLine\<xsl:variable name="year" select="substring-before($date, '-')" />Di2015NewLine\<xsl:variable name="month" select="substring-before(substring-after($date, '-'), '-')" />Di2015NewLine\<xsl:variable name="day" select="substring-after(substring-after($date, '-'), '-')" />Di2015NewLine\<xsl:value-of select="concat($day, ' ', $month, ' ', $year)" />Di2015NewLine</xsl:template>Di2015NewLineDi2015NewLine<xsl:template name="formatTime">Di2015NewLine\<xsl:param name="dateTime" />Di2015NewLine\<xsl:value-of select="substring-after($dateTime, 'T')" />Di2015NewLine</xsl:template>Di2015NewLine
500955Di2015UniqueSeparator\<xsl:call-template name="formatDate">Di2015NewLine\\<xsl:with-param name="dateTime" select="xpath" />Di2015NewLine\</xsl:call-template>Di2015NewLine
500955Di2015UniqueSeparator\<xsl:call-template name="formatTime">Di2015NewLine\\<xsl:with-param name="dateTime" select="xpath" />Di2015NewLine\</xsl:call-template>Di2015NewLine
501015Di2015UniqueSeparatorDim lstOfStrings() As String = Textbox1.Text.Split(","c)Di2015NewLine
501192Di2015UniqueSeparatornsMngr.AddNamespace("atom", "http://www.w3.org/2005/Atom");Di2015NewLine
501192Di2015UniqueSeparatorXmlNode node = atom.SelectSingleNode("//atom:entry/atom:link/app:edited", nsMngr);Di2015NewLine
501203Di2015UniqueSeparatorusing System.Linq;Di2015NewLineDi2015NewLine//...Di2015NewLineDi2015NewLinestring[] array = { "foo", "bar" };Di2015NewLineif (array.Contains("foo")) {Di2015NewLine    //...Di2015NewLine}Di2015NewLine
501243Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        List<Item> items = new List<Item>();Di2015NewLineDi2015NewLine        items.Add(new Item("item 1"));Di2015NewLine        items.Add(new Item("item 2"));Di2015NewLine        items.Add(new Item("item 3"));Di2015NewLine        items.Add(new Item("item 4"));Di2015NewLineDi2015NewLineDi2015NewLine        dataGridView1.DataSource = items;Di2015NewLine    }Di2015NewLine}Di2015NewLineclass ItemDi2015NewLine{Di2015NewLine    public string ItemName { get; set; }Di2015NewLine    public Item(string name)Di2015NewLine    {Di2015NewLine        ItemName = name;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
501778Di2015UniqueSeparatorienum
501778Di2015UniqueSeparator<feed>
501778Di2015UniqueSeparatorentries
501778Di2015UniqueSeparatorentry
501778Di2015UniqueSeparator<feed>
501778Di2015UniqueSeparatorconst string RECENT_QUESTIONS = "http://stackoverflow.com/feeds";Di2015NewLineDi2015NewLineXmlTextReader reader;Di2015NewLineXmlDocument doc;Di2015NewLineDi2015NewLine// Load the feed inDi2015NewLinereader = new XmlTextReader(RECENT_QUESTIONS);Di2015NewLine//reader.MoveToContent();Di2015NewLineDi2015NewLine// Add the feed to the documentDi2015NewLinedoc = new XmlDocument();Di2015NewLinedoc.Load(reader);Di2015NewLineDi2015NewLine// Get the <feed> element.Di2015NewLineXmlNodeList feed = doc.GetElementsByTagName("feed");Di2015NewLineXmlNode feedNode = feed.Item(0);Di2015NewLineDi2015NewLine// Get the child nodes of the <feed> element.Di2015NewLineXmlNodeList childNodes = feedNode.ChildNodes;Di2015NewLineIEnumerator ienum = childNodes.GetEnumerator();Di2015NewLineDi2015NewLineList<XmlNode> entries = new List<XmlNode>();Di2015NewLineDi2015NewLine// Iterate over the child nodes.Di2015NewLinewhile (ienum.MoveNext())Di2015NewLine{Di2015NewLine    XmlNode node = (XmlNode)ienum.Current;Di2015NewLine    if (node.Name == "entry")Di2015NewLine    {Di2015NewLine        entries.Add(node);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// Send entries to the data grid controlDi2015NewLinequestion_list.DataSource = entries.ToArray();Di2015NewLine
501859Di2015UniqueSeparator[http://www.w3schools.com/wsdl/wsdl_syntax.asp][1]Di2015NewLine[http://www.w3schools.com/Schema/schema_howto.asp][2]Di2015NewLine
501859Di2015UniqueSeparator[http://www.w3schools.com/soap/soap_header.asp][3]Di2015NewLine
501999Di2015UniqueSeparatorinternal
501999Di2015UniqueSeparatorsealed
502013Di2015UniqueSeparator/configuration/appSettings/add[@value]
502013Di2015UniqueSeparator\\n
502013Di2015UniqueSeparator0A
502026Di2015UniqueSeparatorMath.Round(n * 8) / 8.0Di2015NewLine
502130Di2015UniqueSeparatorType
502130Di2015UniqueSeparatorMakeGenericType
502130Di2015UniqueSeparatorType intType = typeof(IProcessor<>).MakeGenericType(instanceType);Di2015NewLineIProcessor proc = (IProcessor) IoC.Resolve(intType);Di2015NewLine
502130Di2015UniqueSeparatorinstanceType
502130Di2015UniqueSeparatorinstance.GetType()
502130Di2015UniqueSeparatorT
502130Di2015UniqueSeparatorType
502130Di2015UniqueSeparatorIProcessor
502130Di2015UniqueSeparatorpublic interface IProcessorDi2015NewLine{Di2015NewLine    void Process(object instance);Di2015NewLine    Type InstanceType {get;}Di2015NewLine}Di2015NewLinepublic interface IProcessor<T> : IProcessorDi2015NewLine{Di2015NewLine    void Process(T instance);Di2015NewLine}Di2015NewLineclass SomeClass: IProcessor<int>Di2015NewLine{Di2015NewLine    public void Process(int instance)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine    Type IProcessor.InstanceType {get {return typeof(int);}}Di2015NewLine    void IProcessor.Process(object instance)Di2015NewLine    {Di2015NewLine        Process((int)instance);Di2015NewLine    }Di2015NewLine}Di2015NewLine
502130Di2015UniqueSeparatorabstract class SomeBase<T> : IProcessor<T>Di2015NewLine{Di2015NewLine    public void Process(T instance)Di2015NewLine    {Di2015NewLine        OnProcess(instance);Di2015NewLine    }Di2015NewLine    Type IProcessor.InstanceType {get {return typeof(T);}}Di2015NewLine    void IProcessor.Process(object instance)Di2015NewLine    {Di2015NewLine        Process((T)instance);Di2015NewLine    }Di2015NewLine    protected abstract void OnProcess(T instance);Di2015NewLine}Di2015NewLine
502163Di2015UniqueSeparator System.Diagnostics.Process.Start(@"C:\\listfiles.bat");Di2015NewLine
502204Di2015UniqueSeparatorSystem.Diagnostics.Process.Start("http://www.webpage.com");Di2015NewLine
502323Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineDi2015NewLineAssembly asm = Assembly.GetExecutingAssembly();Di2015NewLineDi2015NewLine//The following line (part of the original answer) is misleading.Di2015NewLine//**Do not** use it unless you want to return the System.Reflection.Assembly type's GUID.Di2015NewLineConsole.WriteLine(asm.GetType().GUID.ToString());Di2015NewLineDi2015NewLineDi2015NewLine// The following is the correct code.Di2015NewLinevar attribute = (GuidAttribute)assembly.GetCustomAttributes(typeof(GuidAttribute),true)[0];Di2015NewLinevar id = attribute.Value;Di2015NewLine
502696Di2015UniqueSeparatorlist.Add(workItem1)
502696Di2015UniqueSeparatorfirst=workItem1, workItem1.next = nullDi2015NewLine
502696Di2015UniqueSeparatorlist.Add(workItem2)
502696Di2015UniqueSeparatorReplace
502696Di2015UniqueSeparatorfirst=workItem1, workItem1.next = null, nextItem=workItem1Di2015NewLine
502696Di2015UniqueSeparatorlist.Get()
502696Di2015UniqueSeparatorworkItem1
502696Di2015UniqueSeparatorworkItem1
502696Di2015UniqueSeparatorfirst = null, workItem1.next = nullDi2015NewLine
502696Di2015UniqueSeparatornextItem
502696Di2015UniqueSeparatorworkItem1
502696Di2015UniqueSeparatorAdd()
502696Di2015UniqueSeparatorworkItem1.next:=workItem2
502696Di2015UniqueSeparatorlist.Get()
502696Di2015UniqueSeparatornull
502696Di2015UniqueSeparatorAdd()
502840Di2015UniqueSeparatorListViewItem
502840Di2015UniqueSeparatorListViewItem
502904Di2015UniqueSeparatorpublic class MyWebServiceDiagnosticsModule : IHttpModuleDi2015NewLine{Di2015NewLine    public MyWebServiceDiagnosticsModule ()Di2015NewLine    {Di2015NewLine    }Di2015NewLine    void IHttpModule.Init(HttpApplication context)Di2015NewLine    {Di2015NewLine    \context.BeginRequest += new EventHandler(BeginRequest);Di2015NewLine    }Di2015NewLine    private void BeginRequest(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine    \HttpContext ctx = HttpContext.Current;Di2015NewLine    \string url = ctx.Request.Url.ToString().ToLower();Di2015NewLine    \if (url.Contains("mywebservice.asmx"))Di2015NewLine    \{Di2015NewLine    \    LogMethodCall(url); // parse URL and write to DBDi2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
502906Di2015UniqueSeparatorprotected override ServiceHost CreateServiceHost(Type serviceType, Uri[] baseAddresses)Di2015NewLine        {Di2015NewLine            return new WebServiceHost2(serviceType, true, baseAddresses) {EnableAutomaticHelpPage = false};Di2015NewLine        }Di2015NewLine
503155Di2015UniqueSeparatorMyGraphics
503155Di2015UniqueSeparatorMyFont
503155Di2015UniqueSeparatorIFont
503155Di2015UniqueSeparatorIFont
503155Di2015UniqueSeparatorMyGraphics
503155Di2015UniqueSeparator[public|internal] MyFont GetFont(IFont font) {...} // or just FontDi2015NewLine
503155Di2015UniqueSeparatorpublic void drawString(string text, IMyFont font, Point point)Di2015NewLine{Di2015NewLine    using(System.Drawing.Font theFont = GetFont(font))Di2015NewLine    {Di2015NewLine        theGraphics.DrawString(word.text, theFont, Brushes.Block, point);Di2015NewLine    }Di2015NewLine    // etcDi2015NewLine}Di2015NewLine
503155Di2015UniqueSeparatorPoint
503268Di2015UniqueSeparatorSystem.Security.Principal.WindowsIdentity.GetCurrent()
503268Di2015UniqueSeparatorWindowsIdentity
503268Di2015UniqueSeparatorUser
503268Di2015UniqueSeparatorSecurityIdentifier
503268Di2015UniqueSeparatorToString()
503268Di2015UniqueSeparatorHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\S-1-5-18\\Products\\
503299Di2015UniqueSeparatorint i = 1;Di2015NewLineFoo f = (Foo)i;Di2015NewLine
503299Di2015UniqueSeparatorint i = 1;Di2015NewLineif (Enum.IsDefined(typeof(Foo), i))Di2015NewLine{Di2015NewLine    Foo f = (Foo)i;Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine   // Throw exception, etc.Di2015NewLine}Di2015NewLine
503359Di2015UniqueSeparatorbool isBar = foo.GetType().GetInterfaces().Any(x =>Di2015NewLine  x.IsGenericType &&Di2015NewLine  x.GetGenericTypeDefinition() == typeof(IBar<>));Di2015NewLine
503387Di2015UniqueSeparatorout
503387Di2015UniqueSeparatorstatic Int16 PromptForInt16(string prompt)Di2015NewLine{Di2015NewLine    while (true)Di2015NewLine    {Di2015NewLine        Console.Write(prompt);Di2015NewLine        Int16 result;Di2015NewLine        if (Int16.TryParse(Console.ReadLine(), out result))Di2015NewLine        {Di2015NewLine            return result;Di2015NewLine        }Di2015NewLine        Console.WriteLine("Sorry, invalid number entered. Try again.");Di2015NewLine    }Di2015NewLine}Di2015NewLine
503509Di2015UniqueSeparatorvAmt = vTranAmt * (vRate / 100.0d);Di2015NewLine
503606Di2015UniqueSeparatorprivate Timer _timer;Di2015NewLineprivate DateTime _lastRun = DateTime.Now;Di2015NewLineDi2015NewLineprotected override void OnStart(string[] args)Di2015NewLine{Di2015NewLine    _timer = new Timer(10 * 60 * 1000); // every 10 minutesDi2015NewLine    _timer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);Di2015NewLine    //...Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprivate void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)Di2015NewLine{Di2015NewLine    // ignore the time, just compare the dateDi2015NewLine    if (_lastRun.Date < DateTime.Now.Date)Di2015NewLine    {Di2015NewLine        // stop the timer while we are running the cleanup taskDi2015NewLine        _timer.Stop();Di2015NewLine        //Di2015NewLine        // do cleanup stuffDi2015NewLine        //Di2015NewLine        _lastRun = DateTime.Now;Di2015NewLine        _timer.Start();Di2015NewLine    }Di2015NewLine}Di2015NewLine
503723Di2015UniqueSeparatorinterface IGroupedSectionDi2015NewLine{Di2015NewLine    ISection Section { get; }Di2015NewLine    string Group { get; }Di2015NewLine}Di2015NewLine
503723Di2015UniqueSeparatorinterface IParentDi2015NewLine{Di2015NewLine     void AddSection(string group, ISection section);Di2015NewLine     IEnumerable<ISection> GetSectionsInGroup(string group);Di2015NewLine}Di2015NewLine
503754Di2015UniqueSeparatortestList.Where(t => t.value3 == 3);Di2015NewLinetestList.Where(t => t.value3 == 2 && t.value1 == "Value1 - 2");Di2015NewLine
503811Di2015UniqueSeparatorEnum.GetUnderlyingType(typeof(YourEnum))Di2015NewLine
503928Di2015UniqueSeparatorIComparable<Parent>
503928Di2015UniqueSeparatorIComparable<Child>
503928Di2015UniqueSeparatorList<Parent>
503928Di2015UniqueSeparatorIComparable<Child>
503928Di2015UniqueSeparatorIComparable<Child>
504319Di2015UniqueSeparatoruint
504378Di2015UniqueSeparatorstring wmiQuery = string.Format("select CommandLine from Win32_Process where Name='{0}'", processName);Di2015NewLineManagementObjectSearcher searcher = new ManagementObjectSearcher(wmiQuery);Di2015NewLineManagementObjectCollection retObjectCollection = searcher.Get();Di2015NewLineforeach (ManagementObject retObject in retObjectCollection)Di2015NewLine    Console.WriteLine("[{0}]", retObject["CommandLine"]);Di2015NewLine
504460Di2015UniqueSeparatorblocks[x,y+1] = blocks[x,y];Di2015NewLine
504460Di2015UniqueSeparatorblocks[x,y] = null;Di2015NewLine
504488Di2015UniqueSeparator    List<TabularEntry> GetTabularEntries(XElement source)Di2015NewLine    {Di2015NewLine        List<TabularEntry> result;Di2015NewLineDi2015NewLine        result = (from tabularentry in source.Elements()Di2015NewLine                  select new TabularEntry()Di2015NewLine                  {Di2015NewLine                      Tag = tabularentry.Name.ToString(),Di2015NewLine                      Description = tabularentry.Element("DX").ToString(),Di2015NewLine                      Code = tabularentry.FirstNode.ToString(),Di2015NewLine                      UseNote = tabularentry.Element("UN") == null ? null : tabularentry.Element("UN").Value,Di2015NewLine                      Excludes = (from i in tabularentry.Element("EX").Descendants("I")Di2015NewLine                                  select (i.Parent.Name == "I" ? "*" + i.Value : i.Value)).ToList()Di2015NewLineDi2015NewLine                  }).ToList();Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLine
504488Di2015UniqueSeparator    List<TabularEntry> GetTabularEntries(XElement source)Di2015NewLine    {Di2015NewLine        List<TabularEntry> result;Di2015NewLineDi2015NewLine        result = (from tabularentry in source.Elements()Di2015NewLine                  select new TabularEntry()Di2015NewLine                  {Di2015NewLine                      Tag = tabularentry.Name.ToString(),Di2015NewLine                      Description = tabularentry.Element("DX").ToString(),Di2015NewLine                      Code = tabularentry.FirstNode.ToString(),Di2015NewLine                      UseNote = tabularentry.Element("UN") == null ? null : tabularentry.Element("UN").Value,Di2015NewLine                      Excludes = (from i in tabularentry.Element("EX").Descendants("I")Di2015NewLine                                  select (ElementWithPrefix(i, '*'))).ToList()Di2015NewLineDi2015NewLine                  }).ToList();Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    string ElementWithPrefix(XElement element, char c)Di2015NewLine    {Di2015NewLine        string prefix = "";Di2015NewLine        for (XElement e = element.Parent; e.Name == "I"; e = e.Parent)Di2015NewLine        {Di2015NewLine            prefix += c;Di2015NewLine        }Di2015NewLine        return prefix + ExtractTextValue(element);Di2015NewLine    }Di2015NewLineDi2015NewLine    string ExtractTextValue(XElement element)Di2015NewLine    {Di2015NewLine        if (element.HasElements)Di2015NewLine        {Di2015NewLine            return element.Value.Split(new[] { '\\n' })[0].Trim();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            return element.Value.Trim();Di2015NewLine    }Di2015NewLine
504488Di2015UniqueSeparator<EX>Di2015NewLine\<I>adenomatous hyperplasia of prostate (600.20-600.21)</I>Di2015NewLine\<I>prostatic:Di2015NewLine\\<I>adenoma (600.20-600.21)</I>Di2015NewLine\\<I>enlargement (600.00-600.01)</I>Di2015NewLine\\<I>hypertrophy (600.00-600.01)Di2015NewLine\\\<I>Bla1</I>Di2015NewLine\\\<I>Bla2Di2015NewLine\\\\<I>BlaBla1</I>Di2015NewLine\\\</I>Di2015NewLine\\\<I>Bla3</I>Di2015NewLine\\</I>Di2015NewLine            </I>Di2015NewLine</EX>Di2015NewLine
504488Di2015UniqueSeparator* adenomatous hyperplasia of prostate (600.20-600.21)Di2015NewLine* prostatic:Di2015NewLine* *adenoma (600.20-600.21)Di2015NewLine* *enlargement (600.00-600.01)Di2015NewLine* *hypertrophy (600.00-600.01)Di2015NewLine* **Bla1Di2015NewLine* **Bla2Di2015NewLine* ***BlaBla1Di2015NewLine* **Bla3Di2015NewLine
504510Di2015UniqueSeparatorstruct
504510Di2015UniqueSeparatorstruct
504522Di2015UniqueSeparatorRead(byte[], int, int)Di2015NewLineRead(char[], int, int)Di2015NewLineRead()Di2015NewLineRead7BitEncodedInt()Di2015NewLineReadBoolean()Di2015NewLineReadByte()Di2015NewLineReadBytes(int)Di2015NewLineReadChar()Di2015NewLineReadChars()Di2015NewLineReadDecimal()Di2015NewLineReadDouble()Di2015NewLineReadInt16()Di2015NewLineReadInt32()Di2015NewLineReadInt64()Di2015NewLineReadSByte()Di2015NewLineReadSingle()Di2015NewLineReadString()Di2015NewLineReadUInt16()Di2015NewLineReadUInt32()Di2015NewLineReadUInt64()Di2015NewLine
504628Di2015UniqueSeparatorthis.menuMain.Items.Add(new ToolStripSeparator());Di2015NewLine
504675Di2015UniqueSeparatorRegistryHive.LocalMachine
504675Di2015UniqueSeparatorobjManagmentBaseObject.SetPropertyValue("hDefKey", (long)RegistryHive.LocalMachine);Di2015NewLine
504683Di2015UniqueSeparatorpublic static int BinarySearchForMatch<T>(this IList<T> list,Di2015NewLine    Func<T,int> comparer)Di2015NewLine{Di2015NewLine    int min = 0;Di2015NewLine    int max = list.Count-1;Di2015NewLineDi2015NewLine    while (min <= max)Di2015NewLine    {Di2015NewLine        int mid = (min + max) / 2;Di2015NewLine        int comparison = comparer(list[mid]);Di2015NewLine        if (comparison == 0)Di2015NewLine        {Di2015NewLine            return mid;Di2015NewLine        }Di2015NewLine        if (comparison < 0)Di2015NewLine        {Di2015NewLine            min = mid+1;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            max = mid-1;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return ~min;Di2015NewLine}Di2015NewLine
504683Di2015UniqueSeparatorpublic static int BinarySearchBy<TSource,TKey>(this IList<TSource> list, Di2015NewLine    Func<TSource,TKey> projection, TKey key)Di2015NewLine{Di2015NewLine    int min = 0;Di2015NewLine    int max = list.Count-1;Di2015NewLineDi2015NewLine    while (min <= max)Di2015NewLine    {Di2015NewLine        int mid = (min + max) / 2;Di2015NewLine        TKey midKey = projection(list[mid]);Di2015NewLine        int comparison = Comparer<TKey>.Default.Compare(midKey, key);Di2015NewLine        if (comparison == 0)Di2015NewLine        {Di2015NewLine            return mid;Di2015NewLine        }Di2015NewLine        if (comparison < 0)Di2015NewLine        {Di2015NewLine            min = mid+1;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            max = mid-1;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return ~min;Di2015NewLine}Di2015NewLine
504683Di2015UniqueSeparatorpublic static int BinarySearchBy<TSource,TKey>(this IList<TSource> list, Di2015NewLine    Func<TSource,TKey,int> comparer, TKey key)Di2015NewLine{Di2015NewLine    int min = 0;Di2015NewLine    int max = list.Count-1;Di2015NewLineDi2015NewLine    while (min <= max)Di2015NewLine    {Di2015NewLine        int mid = (min + max) / 2;Di2015NewLine        int comparison = comparer(list[mid], key);Di2015NewLine        if (comparison == 0)Di2015NewLine        {Di2015NewLine            return mid;Di2015NewLine        }Di2015NewLine        if (comparison < 0)Di2015NewLine        {Di2015NewLine            min = mid+1;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            max = mid-1;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return ~min;Di2015NewLine}Di2015NewLine
504683Di2015UniqueSeparatorList<T>.BinarySearch
504683Di2015UniqueSeparatorIComparer<T>
504683Di2015UniqueSeparatorIComparer<T>
504683Di2015UniqueSeparatorIComparer<T>
504683Di2015UniqueSeparatorComparison<T>
504683Di2015UniqueSeparatorpublic sealed class ComparisonComparer<T> : IComparer<T>Di2015NewLine{Di2015NewLine    readonly Comparison<T> comparison;Di2015NewLineDi2015NewLine    public ComparisonComparer(Comparison<T> comparison)Di2015NewLine    {Di2015NewLine        if (comparison == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("comparison");Di2015NewLine        }Di2015NewLine        this.comparison = comparison;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Compare(T x, T y)Di2015NewLine    {Di2015NewLine        return comparison(x, y);Di2015NewLine    }Di2015NewLine}Di2015NewLine
504683Di2015UniqueSeparatorvar comparer = new ComparisonComparer<Person>((p1, p2) => p1.ID.CompareTo(p2.ID));Di2015NewLineint index = list.BinarySearch(employee, comparer);Di2015NewLine
504683Di2015UniqueSeparatorProjectionComparer
504683Di2015UniqueSeparatorOrderBy
504726Di2015UniqueSeparatorpublic class Dude : INotifyPropertyChangedDi2015NewLine    {Di2015NewLine        private string name;Di2015NewLine        private int age;Di2015NewLineDi2015NewLine        public int AgeDi2015NewLine        {Di2015NewLine            get { return this.Age; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                this.age = value;Di2015NewLine                if (this.PropertyChanged != null)Di2015NewLine                {Di2015NewLine                    this.PropertyChanged(this, new PropertyChangedEventArgs("Age"));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        public string NameDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return this.name;Di2015NewLine            }Di2015NewLineDi2015NewLine            setDi2015NewLine            {Di2015NewLine                this.name = value;Di2015NewLine                if (this.PropertyChanged != null)Di2015NewLine                {Di2015NewLine                    this.PropertyChanged(this, new PropertyChangedEventArgs("Name"));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLine
504726Di2015UniqueSeparator        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            //Populate the list and binding list with some random data  Di2015NewLine            List<Dude> dudes = new List<Dude>();Di2015NewLine            dudes.Add(new Dude { Name = "Alex", Age = 27 });Di2015NewLine            dudes.Add(new Dude { Name = "Mike", Age = 37 });Di2015NewLine            dudes.Add(new Dude { Name = "Bob", Age = 21 });Di2015NewLine            dudes.Add(new Dude { Name = "Joe", Age = 22 });Di2015NewLineDi2015NewLine            this.bindingList = new BindingList<Dude>(dudes);Di2015NewLine            this.comboBox1.DataSource = bindingList;Di2015NewLine            this.comboBox1.DisplayMember = "Name";Di2015NewLine            this.comboBox1.ValueMember = "Age";Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine    private void button3_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //change selected index to some random garbageDi2015NewLine        this.bindingList[this.comboBox1.SelectedIndex].Name = "Whatever";Di2015NewLine    }Di2015NewLine
504824Di2015UniqueSeparatorList<InputField> list = (from i .... select i).Cast<IDataField>.ToList();Di2015NewLine
504875Di2015UniqueSeparatorvar ret = DoDragDrop( ... );Di2015NewLineif(ret == DragDropEffects.None) //not successfullDi2015NewLineelse // etc.Di2015NewLine
504907Di2015UniqueSeparatorRSACryptoServiceProvider
504907Di2015UniqueSeparatorRSAParameters
504907Di2015UniqueSeparatorModulus
504907Di2015UniqueSeparatorExponent
504907Di2015UniqueSeparatorRSACryptoServiceProvider rsa = new RSACryptoServiceProvider(4096); //4096 bit keyDi2015NewLineRSAParameters par = rsa.ExportParameters(false); // export the public keyDi2015NewLineDi2015NewLineFile.WriteAllBytes(@"C:\\modulus.bin", par.Modulus); // write the modulus and the exponent to diskDi2015NewLineFile.WriteAllBytes(@"C:\\exponent.bin", par.Exponent);Di2015NewLine
504907Di2015UniqueSeparatorBIGNUM
504907Di2015UniqueSeparatorRSA * key;Di2015NewLineDi2015NewLineunsigned char *modulus; Di2015NewLineunsigned char *exp; Di2015NewLineDi2015NewLineFILE * fp = fopen("c:\\\\modulus.bin", "rb"); // Read the modulus from diskDi2015NewLinemodulus = new unsigned char[512];Di2015NewLinememset(modulus, 0, 512);Di2015NewLinefread(modulus, 512, 1, fp);Di2015NewLinefclose(fp);Di2015NewLineDi2015NewLinefp = fopen("c:\\\\exponent.bin", "rb"); // Read the exponent from diskDi2015NewLineexp = new unsigned char[3];Di2015NewLinememset(exp, 0, 3);Di2015NewLinefread(exp, 3, 1, fp);Di2015NewLinefclose(fp);Di2015NewLineDi2015NewLineBIGNUM * bn_mod = NULL;Di2015NewLineBIGNUM * bn_exp = NULL;Di2015NewLineDi2015NewLinebn_mod = BN_bin2bn(modulus, 512, NULL); // Convert both values to BIGNUMDi2015NewLinebn_exp = BN_bin2bn(exp, 3, NULL);Di2015NewLineDi2015NewLinekey = RSA_new(); // Create a new RSA keyDi2015NewLinekey->n = bn_mod; // Assign in the valuesDi2015NewLinekey->e = bn_exp;Di2015NewLinekey->d = NULL;Di2015NewLinekey->p = NULL;Di2015NewLinekey->q = NULL;Di2015NewLineDi2015NewLineint maxSize = RSA_size(key); // Find the length of the cipher textDi2015NewLineDi2015NewLinecipher = new char[valid];Di2015NewLinememset(cipher, 0, valid);Di2015NewLineRSA_public_encrypt(strlen(plain), plain, cipher, key, RSA_PKCS1_PADDING); // Encrypt plaintextDi2015NewLineDi2015NewLinefp = fopen("C:\\\\cipher.bin", "wb"); // write ciphertext to diskDi2015NewLinefwrite(cipher, 512, 1, fp);Di2015NewLinefclose(fp);Di2015NewLine
504907Di2015UniqueSeparatorbyte[] cipher = File.ReadAllBytes(@"c:\\cipher.bin"); // Read ciphertext from fileDi2015NewLinebyte[] plain = rsa.Decrypt(cipher, false); // Decrypt ciphertextDi2015NewLineDi2015NewLineConsole.WriteLine(ASCIIEncoding.ASCII.GetString(plain)); // Decode and display plain textDi2015NewLine
505012Di2015UniqueSeparatorstring a = "abc", b = a.ToLower();Di2015NewLinebool areSame = ReferenceEquals(a, b); // falseDi2015NewLine
505012Di2015UniqueSeparatorvar lookup = new Dictionary<string, int>(Di2015NewLine    StringComparer.InvariantCultureIgnoreCase);Di2015NewLine
505012Di2015UniqueSeparatorbool ciEqual = string.Equals("abc", "ABC",Di2015NewLine    StringComparison.InvariantCultureIgnoreCase);Di2015NewLine
505210Di2015UniqueSeparatorfrom sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKeyDi2015NewLinefrom sqlalchemy.sql import selectDi2015NewLineDi2015NewLinemetadata = MetaData()Di2015NewLineDi2015NewLine# Make a basic customer table.Di2015NewLineCustomer = Table('Customer',Di2015NewLine                 metadata,Di2015NewLine                 Column('ID', Integer, primary_key=True),Di2015NewLine                 Column('FirstName', String),Di2015NewLine                 Column('LastName', String))Di2015NewLineDi2015NewLine# Make a basic address tableDi2015NewLineAddress = Table('Address',Di2015NewLine                metadata,Di2015NewLine                Column('ID', Integer, primary_key=True),Di2015NewLine                Column('City', String),Di2015NewLine                Column('Street', String),Di2015NewLine                Column('CustomerID', None, ForeignKey('Customer.ID')))Di2015NewLineDi2015NewLineDi2015NewLine# Generate some sqlDi2015NewLinestmt = select([Customer.c.FirstName,Di2015NewLine               Customer.c.LastName,Di2015NewLine               Address.c.Street,Di2015NewLine               Address.c.City],Di2015NewLine              from_obj=Customer.join(Address),Di2015NewLine              whereclause=Address.c.City == 'Wellington')Di2015NewLineDi2015NewLine# DisplayDi2015NewLineprint stmtDi2015NewLine# output:Di2015NewLineSELECT "Customer"."FirstName", "Customer"."LastName", "Address"."Street", "Address"."City" Di2015NewLineFROM "Customer" JOIN "Address" ON "Customer"."ID" = "Address"."CustomerID" Di2015NewLineWHERE "Address"."City" = :City_1Di2015NewLineDi2015NewLine# note that SQLAlchemy picked up the join condition from the foreign key.Di2015NewLine# you can specify other join conditions if you want.Di2015NewLine
505210Di2015UniqueSeparatorfor row in stmt.execute():Di2015NewLine    print 'Name:', row.c.FirstName, row.c.LastName, 'City:', row.c.CityDi2015NewLine
505268Di2015UniqueSeparatorusing WinformTimer = System.Windows.Forms.Timer;Di2015NewLineusing ThreadingTimer = System.Threading.Timer;Di2015NewLine
505268Di2015UniqueSeparatorTimer
505268Di2015UniqueSeparatorSystem.Windows.Forms.Timer
505268Di2015UniqueSeparatorSystem.Timers.Timer
505268Di2015UniqueSeparatorTimer
505268Di2015UniqueSeparatorextern
505268Di2015UniqueSeparatorusing
505268Di2015UniqueSeparatornamespace RealCode {Di2015NewLine    //using Foo; // can't use this - it breaks DoSomethingDi2015NewLine    using Handy = Foo.Handy;Di2015NewLine    using Bar;Di2015NewLine    static class Program {Di2015NewLine        static void Main() {Di2015NewLine            Handy h = new Handy(); // prove availableDi2015NewLine            string test = "abc";            Di2015NewLine            test.DoSomething(); // prove availableDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLinenamespace Foo {Di2015NewLine    static class TypeOne {Di2015NewLine        public static void DoSomething(this string value) { }Di2015NewLine    }Di2015NewLine    class Handy {}Di2015NewLine}Di2015NewLinenamespace Bar {Di2015NewLine    static class TypeTwo {Di2015NewLine        public static void DoSomething(this string value) { }Di2015NewLine    }Di2015NewLine}Di2015NewLine
505269Di2015UniqueSeparatortextbox.DataBindings["Text"].NullValue = "";Di2015NewLine
505385Di2015UniqueSeparatorprotected void DisableControls(Control parent, bool State) {Di2015NewLine    foreach(Control c in parent.Controls) {Di2015NewLine        if (c is DropDownList) {Di2015NewLine            ((DropDownList)(c)).Enabled = State;Di2015NewLine        }Di2015NewLineDi2015NewLine        DisableControls(c, State);Di2015NewLine    }Di2015NewLine}Di2015NewLine
505385Di2015UniqueSeparatorprotected void Event_Name(...) {Di2015NewLine    DisableControls(Page,false); // use whatever top-most control has all the dropdowns or just the page controlDi2015NewLine} // divs, tables etc. can be called through adding runat="server" propertyDi2015NewLine
505488Di2015UniqueSeparatortry {Di2015NewLineDi2015NewLine    FileStream fs = File.Open("somefile.txt", FileMode.Open);Di2015NewLineDi2015NewLine} catch (Exception ex) {Di2015NewLine    MessageBox.Show("The file does not exist. Please select another file");Di2015NewLine}Di2015NewLine
505488Di2015UniqueSeparatorif(!File.Exists("somefile.txt"))Di2015NewLine  MessageBox.Show("The file does not exist.")Di2015NewLine
505554Di2015UniqueSeparatorType t = robotList[i];Di2015NewLineIRunable o = Activator.CreateInstance(t) as IRunable;Di2015NewLineif (o != null)Di2015NewLine{Di2015NewLine    o.Run(); //do this in another thread of course, see belowDi2015NewLine}Di2015NewLine
505554Di2015UniqueSeparatorfor (int i = 0; i < robotList.Count; i++)Di2015NewLine{Di2015NewLine    Type t = robotList[i];Di2015NewLine    object o = Activator.CreateInstance(t);Di2015NewLine    Thread thread = new Thread(delegate()Di2015NewLine    {Di2015NewLine        t.InvokeMember("Run", BindingFlags.Default | BindingFlags.InvokeMethod, null, o, null);Di2015NewLine    });Di2015NewLine    thread.Start();Di2015NewLine}Di2015NewLine
505578Di2015UniqueSeparatorWH_CALLWNDPROC
505601Di2015UniqueSeparatorList<int>
505601Di2015UniqueSeparatorList<string>
505601Di2015UniqueSeparatorSystem.Collections.Generic.List'1
505601Di2015UniqueSeparatorSystem.Collections.Generic.List'2
505604Di2015UniqueSeparatorMyProperty
505604Di2015UniqueSeparatorMyProperty
505604Di2015UniqueSeparator// object is locked and then immediately released in the MyProperty getterDi2015NewLineMyObject o = MyProperty;Di2015NewLineDi2015NewLine// this assignment isn't covered by a lockDi2015NewLineo.Field1 = 2;Di2015NewLineDi2015NewLine// the MyProperty setter is never even called in this exampleDi2015NewLine
505604Di2015UniqueSeparatorMyProperty
505604Di2015UniqueSeparator// quick and dirty exampleDi2015NewLine// there's almost certainly a better/cleaner way to do thisDi2015NewLinelock (MyProperty)Di2015NewLine{Di2015NewLine    // other threads can't lock the object while you're in hereDi2015NewLine    MyProperty.Field1 = 2;Di2015NewLine    // do more stuff if you like, the object is all yoursDi2015NewLine}Di2015NewLine// now the object is up-for-grabs againDi2015NewLine
505604Di2015UniqueSeparatorlock (MyProperty)
505679Di2015UniqueSeparatorCancel
505679Di2015UniqueSeparatorActionResult
505679Di2015UniqueSeparatorCancel
505679Di2015UniqueSeparatorCancel=true
505679Di2015UniqueSeparatorfilterContext.Result = new HttpUnauthorizedResult();Di2015NewLine
505679Di2015UniqueSeparatorAuthorizationContext
505679Di2015UniqueSeparatorCancel
505679Di2015UniqueSeparatorUpdateModel
505679Di2015UniqueSeparatorFormCollection
505679Di2015UniqueSeparatorUrlHelper
505679Di2015UniqueSeparatorViewContext
505892Di2015UniqueSeparatorConsole.WriteLine...
505896Di2015UniqueSeparatorstatic List<Customer> allCustomers = AllCustomers()
505924Di2015UniqueSeparatorpriceMask.MaskType = MaskedEditType.Number;Di2015NewLine
505924Di2015UniqueSeparatorsetDi2015NewLine{Di2015NewLine   if (MaskType == MaskedEditType.Number)Di2015NewLine   {Di2015NewLine     SetPropertyValue("DisplayMoney", value);Di2015NewLine   }Di2015NewLine}Di2015NewLine
505956Di2015UniqueSeparatorvar elements = xDocument.Descendants(w + "sdt")Di2015NewLine               .Union(otherDocument.Descendants(w + "sdt", new XElementComparer())Di2015NewLine               .RestOfYourCodeDi2015NewLine
505956Di2015UniqueSeparatorpublic class XElementComparer : IEqualityComparer‹XElement› {Di2015NewLine   public bool Equals(XElement x, XElement y) {Di2015NewLine     return ‹X and Y are equal according to your standards›;Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine public int GetHashCode(XElement obj) {Di2015NewLine     return ‹hash code based on whatever parameters you used to determine        Di2015NewLine            Equals. For example, if you determine equality based on the ID Di2015NewLine            attribute, return the hash code of the ID attribute.›;Di2015NewLineDi2015NewLine }Di2015NewLineDi2015NewLine }Di2015NewLine
505988Di2015UniqueSeparatorpartial class MainFormDi2015NewLine{Di2015NewLine\double x, y, z;\\Di2015NewLineDi2015NewLine\List<string> cable_size1;Di2015NewLine\List<string> system_type_list;Di2015NewLine\List<string> amperage;Di2015NewLineDi2015NewLine\Dictionary<string, double> cable_dictionary_1;Di2015NewLine\Dictionary<string, double> system_type;Di2015NewLine\Dictionary<string, double> amperage_dictionary;Di2015NewLineDi2015NewLineprivate void MainFormLoad(object sender, EventArgs e)Di2015NewLine\{Di2015NewLine\\\//Each of the following lists populate the ComboBoxesDi2015NewLine\\\//to be selected on the main form.Di2015NewLine\\\amperage = new List<string>();Di2015NewLine\\\cable_size1 = new List<string>();Di2015NewLine\\\system_type_list = new List<string>();\\\Di2015NewLineDi2015NewLine\\\cable_dictionary_1 = new Dictionary<string, double>();Di2015NewLine\\\system_type = new Dictionary<string, double>();Di2015NewLine\\\amperage_dictionary = new Dictionary<string, double>();Di2015NewLineDi2015NewLine\\\//Di2015NewLine\\\InitializeCurrentLoadCB();Di2015NewLine\\\InitializeCableSizeCB();Di2015NewLine\\\InitializeSystemTypeCB();Di2015NewLineDi2015NewLine\\\//---------------Dictionaries---------------------------------------------------------Di2015NewLine\\\InitializeSystemTypeLookup();Di2015NewLine\\\InitializeCableLookup();Di2015NewLine\\\InitializeAmperageLookup();Di2015NewLine\}Di2015NewLine\private void InitializeCurrentLoadCB()Di2015NewLine\{Di2015NewLine\\\//Amperage List, No Exclusions-----------------------------------------------------------Di2015NewLine\\\amperage = new List<string>();Di2015NewLine\\\amperage.Add("Please Select Amperage");Di2015NewLine\\\amperage.Add("400");Di2015NewLine\\\amperage.Add("800");Di2015NewLine\\\amperage.Add("1000");Di2015NewLine\\\amperage.Add("1200");Di2015NewLine\\\amperage.Add("1600");Di2015NewLine\\\amperage.Add("2000");Di2015NewLine\\\amperage.Add("2500");Di2015NewLine\\\amperage.Add("3000");Di2015NewLine\\\amperage.Add("3200");Di2015NewLine\\\amperage.Add("4000");Di2015NewLine\\\amperage.Add("5000");Di2015NewLine\\\amperage.Add("6000");Di2015NewLineDi2015NewLine\\\cb_test_1.DataSource = amperage;Di2015NewLine\\\cb_test_1.SelectedIndex = 0;Di2015NewLine\\\cb_test_1.DropDownStyle = ComboBoxStyle.DropDownList;Di2015NewLine\}Di2015NewLine\private void InitializeCableSizeCB()Di2015NewLine\{Di2015NewLine\\\//Cable List, No Exclusions --------------------------------------------------------------Di2015NewLine\\\cable_size1 = new List<string>();Di2015NewLine\\\cable_size1.Add("Please Select Cable Size");Di2015NewLine\\\cable_size1.Add ("#1");Di2015NewLine\\\cable_size1.Add ("1/0");Di2015NewLine\\\cable_size1.Add ("2/0");Di2015NewLine\\\cable_size1.Add ("3/0");Di2015NewLine\\\cable_size1.Add ("4/0");Di2015NewLine\\\cable_size1.Add ("250");Di2015NewLine\\\cable_size1.Add ("300");Di2015NewLine\\\cable_size1.Add ("400");Di2015NewLine\\\cable_size1.Add ("500");Di2015NewLine\\\cable_size1.Add ("600");Di2015NewLine\\\cable_size1.Add ("700");Di2015NewLine\\\cable_size1.Add ("750");Di2015NewLineDi2015NewLine\\\cb_test_2.DataSource = cable_size1;Di2015NewLine\\\cb_test_2.SelectedIndex = 0;Di2015NewLine\\\cb_test_2.DropDownStyle = ComboBoxStyle.DropDownList;Di2015NewLine\\\//Initial DataBind for cable size ComboBoxDi2015NewLine\}Di2015NewLine\private void InitializeSystemTypeCB()Di2015NewLine\{Di2015NewLine\\\//System Type List\Di2015NewLine\\\system_type_list = new List<string>();Di2015NewLine\\\system_type_list.Add("Select System Type");Di2015NewLine\\\system_type_list.Add("3 Phase 3 Wire");Di2015NewLine\\\system_type_list.Add("3 Phase 4 Wire");Di2015NewLineDi2015NewLine\\\cb_test_3.DataSource = system_type_list;Di2015NewLine\\\cb_test_3.SelectedIndex = 0;Di2015NewLine\\\cb_test_3.DropDownStyle = ComboBoxStyle.DropDownList;Di2015NewLine\\\//Initial DataBind for cb_system type ComboBox\\\\Di2015NewLine\}Di2015NewLineDi2015NewLineDi2015NewLine\private void Button1Click(object sender, System.EventArgs e)Di2015NewLine\{\Di2015NewLineDi2015NewLine\\if (!String.IsNullOrEmpty(cb_test_1.Text) &&Di2015NewLine\\   (!String.IsNullOrEmpty(cb_test_2.Text) && Di2015NewLine\\   (!String.IsNullOrEmpty(cb_test_3.Text))))Di2015NewLine\\\{\Di2015NewLine\\\\double a;Di2015NewLine\\\\if (cb_test_1.SelectedIndex != 0)Di2015NewLine\\\\\{Di2015NewLine\\\\\\x = amperage_dictionary[amperage[cb_test_1.SelectedIndex]];\\\\\Di2015NewLine\\\\\}\\\\\\\\\\\\\\Di2015NewLineDi2015NewLine\\\\if (cb_test_2.SelectedIndex != 0)Di2015NewLine\\\\\{Di2015NewLine\\\\\\y = cable_dictionary_1[cable_size1[cb_test_2.SelectedIndex]];\\\\\Di2015NewLine\\\\\}\Di2015NewLineDi2015NewLine\\\\if (cb_test_3.SelectedIndex != 0)Di2015NewLine\\\\\{Di2015NewLine\\\\\\z = system_type[system_type_list[cb_test_3.SelectedIndex]];Di2015NewLine\\\\\}\\\Di2015NewLineDi2015NewLine\\\\a = ((x / y)*z);Di2015NewLine\\\\this.tb_1.Text = Math.Round(a,2).ToString();Di2015NewLineDi2015NewLine\\\}Di2015NewLineDi2015NewLine\}Di2015NewLine\private void InitializeSystemTypeLookup()Di2015NewLine\{Di2015NewLine\\//System Type DictionaryDi2015NewLine\\this.system_type = new Dictionary<string, double>();Di2015NewLine\\this.system_type.Add(this.system_type_list[0], 0);Di2015NewLine\\this.system_type.Add(this.system_type_list[1], 3);Di2015NewLine\\this.system_type.Add(this.system_type_list[2], 4);Di2015NewLine\}Di2015NewLine\private void InitializeCableLookup()Di2015NewLine\{Di2015NewLine\\//Cable Dictionary 1 used for cable quantity calculationDi2015NewLine\\this.cable_dictionary_1 = new Dictionary<string, double>();Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[0], 0);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[1], 130);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[2], 150);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[3], 175);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[4], 200);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[5], 230);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[6], 255);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[7], 285);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[8], 355);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[9], 380);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[10], 720);Di2015NewLine\\this.cable_dictionary_1.Add (this.cable_size1[11], 475);Di2015NewLine\}Di2015NewLine\private void InitializeAmperageLookup()Di2015NewLine\{Di2015NewLine\\//Amperage Dictionary\Di2015NewLine\\this.amperage_dictionary = new Dictionary<string, double>();Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[0], 0);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[1], 400);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[2], 800);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[3], 1000);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[4], 1200);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[5], 1600);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[6], 2000);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[7], 2500);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[8], 3000);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[9], 3200);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[10], 4000);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[11], 5000);Di2015NewLine\\this.amperage_dictionary.Add(this.amperage[12], 6000);\\Di2015NewLine\}Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
506019Di2015UniqueSeparatorpublic static TValue GetValueOrDefault<TKey, TValue>(Di2015NewLine    this IDictionary<TKey, TValue> dictionary, TKey key)Di2015NewLine{Di2015NewLine    TValue value;Di2015NewLine    // attempt to get the value of the key from the dictionaryDi2015NewLine    dictionary.TryGetValue(key, out value);Di2015NewLine    return value;Di2015NewLine}Di2015NewLine
506184Di2015UniqueSeparatorpublisher.SomeEvent += target.DoSomething;Di2015NewLine
506184Di2015UniqueSeparatorpublisher
506184Di2015UniqueSeparatortarget
506184Di2015UniqueSeparatorBandwidthUI ui = new BandwidthUI();Di2015NewLinetransferService.BandwidthChanged += ui.HandleBandwidthChange;Di2015NewLine// Suppose this blocks until the transfer is completeDi2015NewLinetransferService.Transfer(source, destination);Di2015NewLine// We now have to unsusbcribe from the eventDi2015NewLinetransferService.BandwidthChanged -= ui.HandleBandwidthChange;Di2015NewLine
506184Di2015UniqueSeparatorBandwidthUI
506184Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic class PublisherDi2015NewLine{Di2015NewLine    public event EventHandler Foo;Di2015NewLineDi2015NewLine    public void RaiseFoo()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Raising Foo");Di2015NewLine        EventHandler handler = Foo;Di2015NewLine        if (handler != null)Di2015NewLine        {Di2015NewLine            handler(this, EventArgs.Empty);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Console.WriteLine("No handlers");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class SubscriberDi2015NewLine{Di2015NewLine    public void FooHandler(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Subscriber.FooHandler()");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine         Publisher publisher = new Publisher();Di2015NewLine         Subscriber subscriber = new Subscriber();Di2015NewLine         publisher.Foo += subscriber.FooHandler;Di2015NewLine         publisher.RaiseFoo();Di2015NewLine         publisher.Foo -= subscriber.FooHandler;Di2015NewLine         publisher.RaiseFoo();Di2015NewLine    }Di2015NewLine}Di2015NewLine
506184Di2015UniqueSeparatorRaising FooDi2015NewLineSubscriber.FooHandler()Di2015NewLineRaising FooDi2015NewLineNo handlersDi2015NewLine
506184Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic class PublisherDi2015NewLine{Di2015NewLine    ~Publisher()Di2015NewLine    {Di2015NewLine        Console.WriteLine("~Publisher");Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler Foo;Di2015NewLine}Di2015NewLineDi2015NewLinepublic class SubscriberDi2015NewLine{Di2015NewLine    ~Subscriber()Di2015NewLine    {Di2015NewLine        Console.WriteLine("~Subscriber");Di2015NewLine        Console.WriteLine("Foo==null ? {0}", Foo == null);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void FooHandler(object sender, EventArgs e) {}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine         Publisher publisher = new Publisher();Di2015NewLine         Subscriber subscriber = new Subscriber();Di2015NewLine         publisher.Foo += subscriber.FooHandler;Di2015NewLineDi2015NewLine         Console.WriteLine("No more refs to publisher, "Di2015NewLine             + "but subscriber is alive");Di2015NewLine         GC.Collect();Di2015NewLine         GC.WaitForPendingFinalizers();         Di2015NewLineDi2015NewLine         Console.WriteLine("End of Main method. Subscriber is about to "Di2015NewLine             + "become eligible for collection");Di2015NewLine         GC.KeepAlive(subscriber);Di2015NewLine    }Di2015NewLine}Di2015NewLine
506184Di2015UniqueSeparatorNo more refs to publisher, but subscriber is aliveDi2015NewLine~PublisherDi2015NewLineFoo==null ? FalseDi2015NewLineEnd of Main method. Subscriber is about to become eligible for collectionDi2015NewLine~SubscriberDi2015NewLine
506325Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    DSOFile.OleDocumentPropertiesClass doc = new DSOFile.OleDocumentPropertiesClass();Di2015NewLine    doc.Open(filename, false, DSOFile.dsoFileOpenOptions.dsoOptionDefault);Di2015NewLineDi2015NewLine    doc.SummaryProperties.Author = author;Di2015NewLine    doc.SummaryProperties.Comments = comments;Di2015NewLineDi2015NewLine    doc.Close(true);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    throw new Exception("Could not update the file properties: " + filename, ex);Di2015NewLine}Di2015NewLine
506473Di2015UniqueSeparator    [ConfigurationProperty("requestRegex", DefaultValue = ".*")]Di2015NewLine    public string RequestRegexDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return (string)this["requestRegex"];Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            this["requestRegex"] = value;Di2015NewLine        } Di2015NewLine    }Di2015NewLine
506499Di2015UniqueSeparatorSystemColors.Window
506624Di2015UniqueSeparatorset MERGEFILES=Interop.Foo.dll Interop.Bar.dllDi2015NewLineDi2015NewLineif "$(ConfigurationName)" == "Release" (Di2015NewLine   ren "$(TargetFileName)" "_$(TargetFileName)"Di2015NewLine   "$(ProgramFiles)\\Microsoft\\ILMerge\\ILMerge.exe" /out:"$(TargetFileName)" "_$(TargetFileName)" %MERGEFILES%Di2015NewLineDi2015NewLine   del "_$(TargetFileName)"Di2015NewLine   del %MERGEFILES%Di2015NewLine)Di2015NewLine
506626Di2015UniqueSeparator<TextBlock FontWeight="Bold" Text="{Binding Foo}" />Di2015NewLine
506637Di2015UniqueSeparatorExeConfigurationFileMap configMap = new ExeConfigurationFileMap();Di2015NewLineconfigMap.ExeConfigFilename = @"d:\\test\\justAConfigFile.config.whateverYouLikeExtension";Di2015NewLineConfiguration config = ConfigurationManager.OpenMappedExeConfiguration(configMap, ConfigurationUserLevel.None);Di2015NewLine
506655Di2015UniqueSeparatorvar foo = new Foo { Bar = 1, Fizz = "hello" };Di2015NewLine
506655Di2015UniqueSeparatorvar foo2 = new Foo { foo1.Bar, foo1.Fizz };Di2015NewLine
506655Di2015UniqueSeparatorvar foo = new Foo { p1, p2, p3 };Di2015NewLine
506666Di2015UniqueSeparatordatetime
506666Di2015UniqueSeparatorsmalldatetime
506858Di2015UniqueSeparator    //Capture the raw urlDi2015NewLine    test = Request.RawUrl.ToString();Di2015NewLine    //Set the start index as 1 after the query ?Di2015NewLine    int startTxt = (test.IndexOf("?") + 1);Di2015NewLine    //Find the number of characters between ? and &referrerURLDi2015NewLine    int countTxt = ((test.IndexOf("&referrerURL")-1) - test.IndexOf("?"));Di2015NewLine    //Capture the substring and split into a string array using &Di2015NewLine    string[] aTest = test.Substring(startTxt, countTxt).Split(new Char[] { '&' });Di2015NewLine
506858Di2015UniqueSeparator    for (int i = 0; i < aTest.Length; i++)Di2015NewLine    {Di2015NewLine        Response.Write("<br>-" + i + "~" + Convert.ToString(aTest[i]) + "<br>");Di2015NewLine    }Di2015NewLine
506886Di2015UniqueSeparatorprocess (data) {Di2015NewLine   data.doProcessing();Di2015NewLine}Di2015NewLine
507091Di2015UniqueSeparatorEnum.ToObject(....
507279Di2015UniqueSeparatortypeof(SpecifiedClass) == obj.GetType()Di2015NewLine
507349Di2015UniqueSeparatorvar basePath = Path.GetDirectoryName(typeof(MyType).Assembly.Location);Di2015NewLinevar fullPath = Path.Combine(basePath, @"TestData\\test.html");Di2015NewLinereturn new Uri(fullPath);Di2015NewLine
507502Di2015UniqueSeparator    public void myFunc<T>()Di2015NewLine    {Di2015NewLine        var names = Enum.GetNames(typeof(T));Di2015NewLineDi2015NewLine        foreach (var name in names)Di2015NewLine        {Di2015NewLine            // do something!Di2015NewLine        }Di2015NewLine    }Di2015NewLine
507502Di2015UniqueSeparator    myFunc<e1>();Di2015NewLine
507502Di2015UniqueSeparatorT
507502Di2015UniqueSeparatorEnum
507502Di2015UniqueSeparatorenum
507502Di2015UniqueSeparator    public static void myFunc<T>()Di2015NewLine    {Di2015NewLine        Type t = typeof(T);Di2015NewLine        if (!t.IsEnum)Di2015NewLine            throw new InvalidOperationException("Type is not Enum");Di2015NewLineDi2015NewLine        var names = Enum.GetNames(t);Di2015NewLine        foreach (var name in names)Di2015NewLine        {Di2015NewLine            // do something!Di2015NewLine        }Di2015NewLine    }Di2015NewLine
507525Di2015UniqueSeparatorstatic void Main() Di2015NewLine{Di2015NewLine   if(SingleInstance.SingleApplication.Run() == false)Di2015NewLine   {Di2015NewLine      return;Di2015NewLine   }Di2015NewLine   //Write your program logic hereDi2015NewLine}Di2015NewLine
507562Di2015UniqueSeparator  private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.TopMost = true;Di2015NewLine        this.FormBorderStyle = FormBorderStyle.None;Di2015NewLine        this.WindowState = FormWindowState.Maximized;Di2015NewLine    }Di2015NewLine
507725Di2015UniqueSeparator#if RELEASE
507732Di2015UniqueSeparatorDataTable.TableName
507732Di2015UniqueSeparatorDim DS as new DataSetDi2015NewLineDim DT as new DataTable("TableName")Di2015NewLineDi2015NewLineDS.Add(DT)Di2015NewLine
507732Di2015UniqueSeparatorFor each table as DataTable in DS.TablesDi2015NewLine    Console.Writeline(table.TableName)Di2015NewLineNextDi2015NewLine
507886Di2015UniqueSeparatorSystem.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable()
507886Di2015UniqueSeparatorNetworkAvailabilityChanged
507886Di2015UniqueSeparatorNetworkAddressChanged
507904Di2015UniqueSeparatorIEnumerable<T>
507938Di2015UniqueSeparatorDictionaryEntry de = (DictionaryEntry)listbox.SelectedItem;<br />Di2015NewLinestring htKey = de.Key.ToString();
507958Di2015UniqueSeparatorStreamWriter writer = new StreamWriter(outputClient.GetStream(),Di2015NewLine                                       Encoding.ASCII);Di2015NewLinewriter.Write(message);Di2015NewLine
508069Di2015UniqueSeparator public BusinessLogic()Di2015NewLine  {Di2015NewLine       BusinessLogicSubClass blsc = new BusinessLogicSubClass(this);Di2015NewLine  }Di2015NewLine
508069Di2015UniqueSeparatorpublic class BusinessLogic Di2015NewLine{Di2015NewLine    private BusinessLogicSubClass blsc = null;Di2015NewLineDi2015NewLine    public BusinessLogic() {}Di2015NewLineDi2015NewLine    public void Initialize()Di2015NewLine    {Di2015NewLine        blsc = new BusinessLogicSubClass(this);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ImplementorDi2015NewLine{Di2015NewLine    public void SomeFunction()Di2015NewLine    {Di2015NewLine        BusinessLogic bl = new BusinessLogic();Di2015NewLine        bl.Initialize();Di2015NewLine    }Di2015NewLine}Di2015NewLine
508157Di2015UniqueSeparatorpublic override int GetHashCode()Di2015NewLine{Di2015NewLine    int hash = 37;Di2015NewLine    hash = hash * 23 + base.GetHashCode();Di2015NewLine    hash = hash * 23 + Id.GetHashCode();Di2015NewLine    return hash;Di2015NewLine}Di2015NewLine
508157Di2015UniqueSeparatorId.GetHashCode()
508157Di2015UniqueSeparatortrue
508193Di2015UniqueSeparatorpublic class TestProxy<T> : RealProxy where T : classDi2015NewLine{Di2015NewLine    public T Instance { get { return (T)GetTransparentProxy(); } }Di2015NewLine    private readonly MarshalByRefObject refObject;Di2015NewLine    private readonly string uri;Di2015NewLineDi2015NewLine    public TestProxy() : base(typeof(T))Di2015NewLine    {Di2015NewLine        refObject = (MarshalByRefObject)Activator.CreateInstance(typeof(T));Di2015NewLine        var objRef = RemotingServices.Marshal(refObject);Di2015NewLine        uri = objRef.URI;Di2015NewLine    }Di2015NewLineDi2015NewLine    // You can find more info on what can be done in here off MSDN.Di2015NewLine    public override IMessage Invoke(IMessage message)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Invoke!");Di2015NewLine        message.Properties["__Uri"] = uri;Di2015NewLine        return ChannelServices.SyncDispatchMessage(message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
508261Di2015UniqueSeparator   [DllImport("zip4_w32.dll",Di2015NewLine       CallingConvention = CallingConvention.StdCall,Di2015NewLine       EntryPoint = "z4LLkGetKeySTD",Di2015NewLine       ExactSpelling = false)]Di2015NewLine   private extern static IntPtr z4LLkGetKeySTD();Di2015NewLine
508300Di2015UniqueSeparator// suppose I want to push children[] onto the stackDi2015NewLineDi2015NewLinefor (int i = children.Length - 1; i >= 0; i--)Di2015NewLine{Di2015NewLine   stack.Push(children[i]);Di2015NewLine}Di2015NewLine
508300Di2015UniqueSeparatorfor-each
508300Di2015UniqueSeparatorforeach (DataRowView drvChild in dv.Reverse())Di2015NewLine
508303Di2015UniqueSeparatorforeach(Control c in this.Controls)Di2015NewLine{Di2015NewLine    if(c.Name.StartsWith("lblTableValue"))Di2015NewLine    {Di2015NewLine        c.DataBindings.Clear();Di2015NewLine    }Di2015NewLine}Di2015NewLine
508303Di2015UniqueSeparatorforeach(Control c in new Control[]Di2015NewLine    {Di2015NewLine        lblTableValue1,Di2015NewLine        lblTableValue2,Di2015NewLine        etcDi2015NewLine    })Di2015NewLine{Di2015NewLine    c.DataBindings.Clear();Di2015NewLine}Di2015NewLine
508514Di2015UniqueSeparator<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine      xmlns:sys="clr-namespace:System;assembly=mscorlib"Di2015NewLine      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">Di2015NewLine    <Grid.Resources>Di2015NewLine        <x:Array x:Key="data" Type="{x:Type sys:String}">Di2015NewLine            <sys:String>Veni</sys:String>Di2015NewLine            <sys:String>Vidi</sys:String>Di2015NewLine            <sys:String>Vici</sys:String>Di2015NewLine        </x:Array>Di2015NewLine    </Grid.Resources>Di2015NewLine    <ComboBox x:Name="myCombo" ItemsSource="{StaticResource data}" IsEditable="True" PreviewTextInput="myCombo_PreviewTextInput"/>Di2015NewLine</Grid>Di2015NewLine
508514Di2015UniqueSeparatorprivate void myCombo_PreviewTextInput(object sender, TextCompositionEventArgs e)Di2015NewLine{Di2015NewLine    myCombo.IsDropDownOpen = true;Di2015NewLine}Di2015NewLine
508519Di2015UniqueSeparatorlock
508519Di2015UniqueSeparatorMonitor.Enter
508641Di2015UniqueSeparatorclass MyDynamicEvalClassDi2015NewLine  def eval(someString,transformString)Di2015NewLine    eval(someString,transformString)Di2015NewLine  endDi2015NewLineendDi2015NewLine
508675Di2015UniqueSeparatorlable1.text= System.IO.File.ReadAllText( path );Di2015NewLine
508789Di2015UniqueSeparatorif ((e.KeyChar <= 57 && e.KeyChar >= 48) || e.KeyChar == 13 || e.KeyChar == 8)Di2015NewLine{Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine     e.Handled = true;Di2015NewLine}Di2015NewLine
508879Di2015UniqueSeparatorpublic class MyBaseControl : System.Web.UI.UserControlDi2015NewLine{Di2015NewLine    public string MyProperty Di2015NewLine    {Di2015NewLine        get { return ViewState["MyProp"] as string; }Di2015NewLine        set { ViewState["MyProp"] = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
508879Di2015UniqueSeparatorpublic partial class SampleControl2 : MyBaseControlDi2015NewLine{Di2015NewLine    ....Di2015NewLine
508879Di2015UniqueSeparatorUserControl uc = (UserControl)LoadControl(controlPath);Di2015NewLinePlaceHolder1.Controls.Add(uc);Di2015NewLine
508879Di2015UniqueSeparatorMyBaseControl uc = (MyBaseControl)LoadControl(controlPath);Di2015NewLineuc.MyProperty = "foo";Di2015NewLinePlaceHolder1.Controls.Add(uc);Di2015NewLine
508906Di2015UniqueSeparatorList<U>
508906Di2015UniqueSeparatorT functionName<T,U>(ref List<T> param1, ref List<U> param2)Di2015NewLine
508906Di2015UniqueSeparatorT functionName<T>(ref List<T> param1, ref List<T> param2)Di2015NewLine
508948Di2015UniqueSeparator<Window>Di2015NewLine   <TextBlock Text="{Binding Name}" />Di2015NewLine   <ListBox ItemsSource="{Binding Seasons}" IsSynchronizedWithCurrentItem="True" />Di2015NewLine   <ListBox ItemsSource="{Binding Seasons/Episodes}" />   Di2015NewLine</Window>Di2015NewLine
508948Di2015UniqueSeparator Binding bindEpisodes = new Binding("Seasons/Episodes");Di2015NewLine
509012Di2015UniqueSeparator"00056399"Di2015NewLine"00056717"Di2015NewLine"00056721"Di2015NewLine"00056722"Di2015NewLine"00056900"Di2015NewLine...Di2015NewLine
509057Di2015UniqueSeparatorif (m_TotalRecords == 0)
509057Di2015UniqueSeparator#region WCFDataContractTestDi2015NewLine    [DataContract] // The enclosed type needs to also be attributed for WCFDi2015NewLine    public class RequestRecordDi2015NewLine    {Di2015NewLine        public RequestRecord() { }Di2015NewLine        [DataMember] // This is CRUCIAL, otherwise the Name property will not be preserved.Di2015NewLine        public string Name { get; set; }Di2015NewLine    }Di2015NewLine    [DataContract] // Encloses the RequestRecord typeDi2015NewLine    public class RequestArrayDi2015NewLine    {Di2015NewLine        private int m_TotalRecords; // should be for internal bookkeeping onlyDi2015NewLine        private RequestRecord[] m_Record;Di2015NewLineDi2015NewLine        [System.Xml.Serialization.XmlElement]Di2015NewLine        [DataMember]Di2015NewLine        public RequestRecord[] RecordDi2015NewLine        {Di2015NewLine            get { return m_Record; }Di2015NewLine            // deserialization will not work without the setDi2015NewLine            set { m_Record = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        [DataMember] // is not really neededDi2015NewLine        public int TotalRecordsDi2015NewLine        {Di2015NewLine            get { return m_TotalRecords; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                if (m_TotalRecords == 0)Di2015NewLine                    m_TotalRecords = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // The constructor is not called by the deserialization mechanism,Di2015NewLine        // therefore this is the right place to specify the array size and toDi2015NewLine        // perform the array initialization.Di2015NewLine        public RequestArray(int totalRecords)Di2015NewLine        {Di2015NewLine            if (totalRecords > 0 && totalRecords <= 100)Di2015NewLine            {Di2015NewLine                m_TotalRecords = totalRecords;Di2015NewLine                m_Record = new RequestRecord[totalRecords];Di2015NewLine                for (int i = 0; i < m_TotalRecords; i++)Di2015NewLine                    m_Record[i] = new RequestRecord() { Name = "Record #" + i.ToString() };Di2015NewLineDi2015NewLine                m_TotalRecords = totalRecords;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine                m_TotalRecords = 0;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public static void TestWCFDataContract()Di2015NewLine    {Di2015NewLine        var serializer = new DataContractSerializer(typeof(RequestArray));Di2015NewLineDi2015NewLine        var test = new RequestArray(6);Di2015NewLineDi2015NewLine        Trace.WriteLine("Array contents after 'new':");Di2015NewLine        for (int i = 0; i < test.Record.Length; i++)Di2015NewLine            Trace.WriteLine("\\tRecord #" + i.ToString() + " .Name = " + test.Record[i].Name);Di2015NewLineDi2015NewLine        //Modify the record values...Di2015NewLine        for (int i = 0; i < test.Record.Length; i++)Di2015NewLine            test.Record[i].Name = "Record (Altered) #" + i.ToString();Di2015NewLineDi2015NewLine        Trace.WriteLine("Array contents after modification:");Di2015NewLine        for (int i = 0; i < test.Record.Length; i++)Di2015NewLine            Trace.WriteLine("\\tRecord #" + i.ToString() + " .Name = " + test.Record[i].Name);Di2015NewLineDi2015NewLine        using (var ms = new MemoryStream())Di2015NewLine        {Di2015NewLine            serializer.WriteObject(ms, test);Di2015NewLineDi2015NewLine            ms.Flush();Di2015NewLine            ms.Position = 0;Di2015NewLineDi2015NewLine            var newE = serializer.ReadObject(ms) as RequestArray;Di2015NewLineDi2015NewLine            Trace.WriteLine("Array contents upon deserialization:");Di2015NewLine            for (int i = 0; i < newE.Record.Length; i++)Di2015NewLine                Trace.WriteLine("\\tRecord #" + i.ToString() + " .Name = " + newE.Record[i].Name);Di2015NewLine        }Di2015NewLine    }Di2015NewLine#endregionDi2015NewLine
509057Di2015UniqueSeparator    Record #0 .Name = Record #0Di2015NewLine    Record #1 .Name = Record #1Di2015NewLine    Record #2 .Name = Record #2Di2015NewLine    Record #3 .Name = Record #3Di2015NewLine    Record #4 .Name = Record #4Di2015NewLine    Record #5 .Name = Record #5Di2015NewLine
509057Di2015UniqueSeparator    Record #0 .Name = Record (Altered) #0Di2015NewLine    Record #1 .Name = Record (Altered) #1Di2015NewLine    Record #2 .Name = Record (Altered) #2Di2015NewLine    Record #3 .Name = Record (Altered) #3Di2015NewLine    Record #4 .Name = Record (Altered) #4Di2015NewLine    Record #5 .Name = Record (Altered) #5Di2015NewLine
509057Di2015UniqueSeparator    Record #0 .Name = Record (Altered) #0Di2015NewLine    Record #1 .Name = Record (Altered) #1Di2015NewLine    Record #2 .Name = Record (Altered) #2Di2015NewLine    Record #3 .Name = Record (Altered) #3Di2015NewLine    Record #4 .Name = Record (Altered) #4Di2015NewLine    Record #5 .Name = Record (Altered) #5Di2015NewLine
509344Di2015UniqueSeparatorDictionary<Key, ThatTinyStructYouHadToCreate>Di2015NewLine
509400Di2015UniqueSeparatorUser
509400Di2015UniqueSeparatorWindowsIdentity
509400Di2015UniqueSeparatorGetCurrent
509400Di2015UniqueSeparatorWindowsIdentity windowsIdentity = WindowsIdentity.GetCurrent();Di2015NewLineDi2015NewLinestring sid = windowsIdentity.User.ToString();Di2015NewLine
509400Di2015UniqueSeparatorUser
509400Di2015UniqueSeparatorSecurityIdentifier
509400Di2015UniqueSeparator// Get the built-in administrator account.Di2015NewLinevar sid = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, Di2015NewLine    null);Di2015NewLineDi2015NewLine// Compare to the current user.Di2015NewLinebool isBuiltInAdmin = (windowsIdentity.User == sid);Di2015NewLine
509400Di2015UniqueSeparatorWellKnownSidType
509400Di2015UniqueSeparatorBuiltinAdministratorsSid
509400Di2015UniqueSeparator// Get the SID of the admin group on the local machine.Di2015NewLinevar localAdminGroupSid = new SecurityIdentifier(Di2015NewLine    WellKnownSidType.BuiltinAdministratorsSid, null);Di2015NewLine
509400Di2015UniqueSeparatorGroups
509400Di2015UniqueSeparatorWindowsIdentity
509400Di2015UniqueSeparatorbool isLocalAdmin = windowsIdentity.Groups.Di2015NewLine    Select(g => (SecurityIdentifier) g.Translate(typeof(SecurityIdentifier))).Di2015NewLine    Any(s => s == localAdminGroupSid);Di2015NewLine
509512Di2015UniqueSeparatorToolStripLabel
509512Di2015UniqueSeparatorText
509512Di2015UniqueSeparatorstring.Empty
509512Di2015UniqueSeparatorSpring
509512Di2015UniqueSeparatortrue
509512Di2015UniqueSeparatorToolStripLabel
509616Di2015UniqueSeparatorclass BaseDi2015NewLine    protected m_x as integerDi2015NewLineend classDi2015NewLineDi2015NewLineclass Derived1Di2015NewLine    inherits BaseDi2015NewLine    public sub Foo(other as Base)Di2015NewLine        other.m_x = 2Di2015NewLine    end subDi2015NewLineend classDi2015NewLineDi2015NewLineclass Derived2Di2015NewLine    inherits BaseDi2015NewLineend classDi2015NewLine
509697Di2015UniqueSeparator[Serializable,Flags]Di2015NewLinepublic enum AccessLevelsDi2015NewLine{Di2015NewLine    Read = 1,Di2015NewLine    Write = 2Di2015NewLine}Di2015NewLine
509709Di2015UniqueSeparatorcfg.AddInputStream(assembly.GetManifestResourceStream("MyNamespace.MyEmbeddedresource.hbm.xml"));Di2015NewLine
509709Di2015UniqueSeparatorcfg.AddXml(myCustomBuildXmlString);Di2015NewLine
509744Di2015UniqueSeparatorExpression
509785Di2015UniqueSeparatorMyClass o = new MyClass();Di2015NewLineMethodInfo method = o.GetType().GetMethod("UnknownMethod", Di2015NewLine    BindingFlags.Instance | BindingFlags.Public);Di2015NewLineMyRetValue retValue = (MyRetValue)Di2015NewLine    method.Invoke(o, new object[] { "Arg1", 2, "Arg3" });Di2015NewLine
510215Di2015UniqueSeparator// If checkbox is checked then increment base score,Di2015NewLine// otherwise decrement base score.Di2015NewLineprivate void checkBoxVariant_CheckedChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   if (((CheckBox)sender).Checked)Di2015NewLine      baseScore++;Di2015NewLine   elseDi2015NewLine      baseScore--;Di2015NewLine}Di2015NewLine
510243Di2015UniqueSeparatorstatic string GetParentUriString(Uri uri)Di2015NewLine{Di2015NewLine    return uri.AbsoluteUri.Remove(uri.AbsoluteUri.Length - uri.Segments.Last().Length);Di2015NewLine}Di2015NewLine
510350Di2015UniqueSeparator<Compile Include="DAL_*.cs" />Di2015NewLine
510350Di2015UniqueSeparator<Compile Include="DataAccessLayer\\*.cs" />Di2015NewLine
510358Di2015UniqueSeparatorpublic abstract class BaseDi2015NewLine{Di2015NewLine    public abstract override string ToString(); Di2015NewLine}Di2015NewLine
510394Di2015UniqueSeparatorSet objWMIService = GetObject("winmgmts:")Di2015NewLineSet objNewPort = objWMIService.Get _Di2015NewLine    ("Win32_TCPIPPrinterPort").SpawnInstance_Di2015NewLine' Use IP of Printer or Machine sharing printerDi2015NewLineobjNewPort.Name = "IP_192.168.1.1"Di2015NewLineobjNewPort.Protocol = 1Di2015NewLineobjNewPort.HostAddress = "192.168.1.1"Di2015NewLine' Enter Port number you would like to useDi2015NewLineobjNewPort.PortNumber = "9999"Di2015NewLineobjNewPort.SNMPEnabled = FalseDi2015NewLineobjNewPort.Put_Di2015NewLine
510502Di2015UniqueSeparatorSize
510502Di2015UniqueSeparatorAvatarSize
510502Di2015UniqueSeparatornew Size(20, 20)
510509Di2015UniqueSeparatorpseudo: public void updateTextBox(string new_text)Di2015NewLine
510591Di2015UniqueSeparator<a href="http://msdn.microsoft.com/en-us/library/microsoft.build.buildengine.project_members.aspx" rel="nofollow">Microsoft.Build.BuildEngine</a>
510591Di2015UniqueSeparator<a href="http://msdn.microsoft.com/en-us/library/microsoft.build.buildengine.project_members.aspx" rel="nofollow">Project</a>
510786Di2015UniqueSeparatorclass SplashFormDi2015NewLine{Di2015NewLine    //Delegate for cross thread call to closeDi2015NewLine    private delegate void CloseDelegate();Di2015NewLineDi2015NewLine    //The type of form to be displayed as the splash screen.Di2015NewLine    private static SplashForm splashForm;Di2015NewLineDi2015NewLine    static public void ShowSplashScreen()Di2015NewLine    {Di2015NewLine        // Make sure it is only launched once.Di2015NewLineDi2015NewLine        if (splashForm != null)Di2015NewLine            return;Di2015NewLine        Thread thread = new Thread(new ThreadStart(SplashForm.ShowForm));Di2015NewLine        thread.IsBackground = true;Di2015NewLine        thread.SetApartmentState(ApartmentState.STA);Di2015NewLine        thread.Start();           Di2015NewLine    }Di2015NewLineDi2015NewLine    static private void ShowForm()Di2015NewLine    {Di2015NewLine        splashForm = new SplashForm();Di2015NewLine        Application.Run(splashForm);Di2015NewLine    }Di2015NewLineDi2015NewLine    static public void CloseForm()Di2015NewLine    {Di2015NewLine        splashForm.Invoke(new CloseDelegate(SplashForm.CloseFormInternal));Di2015NewLine    }Di2015NewLineDi2015NewLine    static private void CloseFormInternal()Di2015NewLine    {Di2015NewLine        splashForm.Close();Di2015NewLine    }Di2015NewLine...Di2015NewLine}Di2015NewLine
510786Di2015UniqueSeparator[STAThread]Di2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    SplashForm.ShowSplashScreen();Di2015NewLine    MainForm mainForm = new MainForm(); //this takes agesDi2015NewLine    SplashForm.CloseForm();Di2015NewLine    Application.Run(mainForm);Di2015NewLine}Di2015NewLine
510980Di2015UniqueSeparatorTimeSpan t1 = TimeSpan.Parse("23:30");Di2015NewLineTimeSpan t2 = TimeSpan.Parse("00:40:00");Di2015NewLineTimeSpan t3 = t1.Add(t2);Di2015NewLineConsole.WriteLine(t3); // 1.00:10:00Di2015NewLine
510980Di2015UniqueSeparatorDateTime d1 = DateTime.Parse("23:30");Di2015NewLineDateTime d2 = DateTime.Parse("00:40:00");Di2015NewLineDateTime d3 = d1.Add(d2.TimeOfDay); Di2015NewLineConsole.WriteLine(d3.TimeOfDay); // 00:10:00Di2015NewLine
511010Di2015UniqueSeparatorclass TemplateProviderDi2015NewLine{Di2015NewLine   public MyData Template { get; set; }Di2015NewLine}Di2015NewLine
511010Di2015UniqueSeparatorMyData Template { get { return m_templateProvider.Template; } }Di2015NewLinevoid UpdateTemplate() { m_templateProvider.Template = Di2015NewLine                            (MyData) this.MemberwiseClone(); }Di2015NewLine
511010Di2015UniqueSeparatormemcopy
511010Di2015UniqueSeparatorMemberwiseClone
511072Di2015UniqueSeparatorCreate<IFoo>Di2015NewLine(Di2015NewLine    newDi2015NewLine    {Di2015NewLine        Foo = "foo",Di2015NewLine        Print = (Action)(() => Console.WriteLine(Foo))Di2015NewLine    }Di2015NewLine);Di2015NewLine
511072Di2015UniqueSeparatorT Create<T> (object o)Di2015NewLine{Di2015NewLine//...Di2015NewLine}Di2015NewLine
511072Di2015UniqueSeparatorCreateDi2015NewLine{Di2015NewLine    new Members<IFoo>Di2015NewLine    {Di2015NewLine        {"Print", ((IFoo @this)=>Console.WriteLine(Foo))},Di2015NewLine        {"Foo", "foo"}Di2015NewLine    }Di2015NewLine}Di2015NewLine
511126Di2015UniqueSeparatorreturn RedirectToRoute("JobsByLocation", new { location = Continents, pagenumber = "1" });Di2015NewLine
511218Di2015UniqueSeparatorstatic
511223Di2015UniqueSeparatorstring c = (a ?? "") + (b ?? "");Di2015NewLine
511223Di2015UniqueSeparatorstring c = a + b;Di2015NewLine
511278Di2015UniqueSeparatorSqlDataReader, OleDbDataReader, EtcDataReader
511278Di2015UniqueSeparatorIDbCommand command = GiveMeSomeCommand();Di2015NewLineIDataReader r = command.ExecuteReader();Di2015NewLine
511278Di2015UniqueSeparatorprivate static IDbCommand GiveMeSomeCommand()Di2015NewLine{Di2015NewLine    return new OleDbCommand();Di2015NewLine}Di2015NewLine
511278Di2015UniqueSeparatorprivate static IDbCommand GiveMeSomeCommand()Di2015NewLine{Di2015NewLine    return new SqlCommand();Di2015NewLine}Di2015NewLine
511278Di2015UniqueSeparatorDbProviderFactory factory = GiveMeSomeFactory();Di2015NewLineIDbCommand command = factory.CreateCommand();Di2015NewLineIDataReader r = command.ExecuteReader();Di2015NewLineDi2015NewLine//and create more objectsDi2015NewLineIDataAdapter adapter = factory.CreateDataAdapter();Di2015NewLineIDbConnection conn = factory.CreateConnection();Di2015NewLine
511278Di2015UniqueSeparatorprivate DbProviderFactory GiveMeSomeFactory()Di2015NewLine{Di2015NewLine    if(something)Di2015NewLine        return SqlClientFactory.Instance;Di2015NewLine    else if(somethingElse)Di2015NewLine        return OracleFactory.Instance;Di2015NewLine    else if(notThisAndNotThat)Di2015NewLine        return MySqlFactory.Instance;Di2015NewLine    elseDi2015NewLine        return WhateverFactory.Instance;Di2015NewLineDi2015NewLine}Di2015NewLine
511282Di2015UniqueSeparatorvar ci = new CultureInfo("fr-FR");Di2015NewLineDateTime dt = DateTime.Parse(yourDateInputString, yourFormatString, ci);Di2015NewLine
511287Di2015UniqueSeparatorConsole.ReadKey();Di2015NewLine
511287Di2015UniqueSeparatorConsole.ReadKey(true);Di2015NewLine
511352Di2015UniqueSeparatorXmlDocument
511352Di2015UniqueSeparatorXDocument
511352Di2015UniqueSeparatorXmlReader
511352Di2015UniqueSeparatorXmlReader
511363Di2015UniqueSeparatorthis
511363Di2015UniqueSeparatorMe
511363Di2015UniqueSeparatorForm
511363Di2015UniqueSeparatorsender
511363Di2015UniqueSeparatorControl
511363Di2015UniqueSeparatorcurrentTag = DirectCast(sender, Control).TagDi2015NewLine
511364Di2015UniqueSeparatorprivate void clearButton_Click(object sender, EventArgs e)  Di2015NewLine{  Di2015NewLine    CheckBox cb = (CheckBox)sender;  Di2015NewLine    cb.Checked = false;  Di2015NewLine}Di2015NewLine
511364Di2015UniqueSeparatorprivate void clearButton_click(object sender, EventArgs e)  Di2015NewLine{    Di2015NewLine    foreach (Control c in this.Controls)   Di2015NewLine    {  Di2015NewLine        CheckBox cb = c as CheckBox;  Di2015NewLine        if (cb != null)  Di2015NewLine        {  Di2015NewLine            cb.Checked = false;  Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
511447Di2015UniqueSeparator    public static void AddNewElement<T>(IList<T> l, int i, string s)Di2015NewLine    {Di2015NewLine        T obj = (T)Activator.CreateInstance(typeof(T), new object[] { i, s });Di2015NewLine        l.Add(obj);Di2015NewLine    }Di2015NewLine
511447Di2015UniqueSeparator    IList<Customer> l = new List<Customer>();Di2015NewLine    l.Add(new Customer(1,"Hi there ..."));Di2015NewLineDi2015NewLine    AddNewElement(l, 0, "None");Di2015NewLine
511447Di2015UniqueSeparator    public static void AddNewElement2(IList l, int i, string s)Di2015NewLine    {Di2015NewLine        if (l == null || l.Count == 0)Di2015NewLine            throw new ArgumentNullException();Di2015NewLine        object obj = Activator.CreateInstance(l[0].GetType(), new object[] { i, s });Di2015NewLine        l.Add(obj);Di2015NewLine    }Di2015NewLine
511489Di2015UniqueSeparatorDim t as new Thread(...)Di2015NewLinet.Sleep(1000)Di2015NewLine
511716Di2015UniqueSeparator<%# ((Employee)Container.DataItem).IsApproved ? "yes" : "no" %>Di2015NewLine
511716Di2015UniqueSeparator<%# FormatBool(((Employee)Container.DataItem).IsApproved) %>Di2015NewLine
511716Di2015UniqueSeparatorprotected string FormatBool(bool value)Di2015NewLine{Di2015NewLine   if (value)Di2015NewLine      return "yes";Di2015NewLine   return "no";Di2015NewLine}Di2015NewLine
511720Di2015UniqueSeparatorinterfaceOnMyType.IsGenericTypeDefinition
511720Di2015UniqueSeparatormyType.IsGenericTypeDefinition
511720Di2015UniqueSeparatorexactType.IsGenericTypeDefinition
511791Di2015UniqueSeparator    protected override void SetBoundsCore(Di2015NewLine             int x, int y, int width, int height, BoundsSpecified specified)Di2015NewLine    {Di2015NewLine        x = this.Location.X;Di2015NewLine        y = this.Location.Y;Di2015NewLine        //...etc...Di2015NewLine        base.SetBoundsCore(x, y, width, height, specified);Di2015NewLine    }Di2015NewLine
511923Di2015UniqueSeparatorLogging.updateLog()
511923Di2015UniqueSeparatorlogAdd()
511923Di2015UniqueSeparatorsynchronize_Click()
512099Di2015UniqueSeparatorProcess.Start("charmap.exe")
512099Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    Process.Start("charmap.exe");Di2015NewLine}Di2015NewLinecatch (Win32Exception e)Di2015NewLine{Di2015NewLine    // show messageDi2015NewLine}Di2015NewLine
512265Di2015UniqueSeparatorforeach
512265Di2015UniqueSeparatorFoo f;Di2015NewLinewhile(iterator.MoveNext())Di2015NewLine{Di2015NewLine     f = iterator.Current;Di2015NewLine    // do something with fDi2015NewLine}Di2015NewLine
512265Di2015UniqueSeparatorf
512265Di2015UniqueSeparatorforeach(Foo f in ...) {Di2015NewLine    Foo tmp = f;Di2015NewLine    // do something with tmpDi2015NewLine}Di2015NewLine
512265Di2015UniqueSeparatortmp
512265Di2015UniqueSeparator    static void Main()Di2015NewLine    {Di2015NewLine        int[] data = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };Di2015NewLine        foreach (int i in data)Di2015NewLine        {Di2015NewLine            new Thread(() => Console.WriteLine(i)).Start();Di2015NewLine        }Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine
512265Di2015UniqueSeparator1Di2015NewLine3Di2015NewLine4Di2015NewLine4Di2015NewLine5Di2015NewLine7Di2015NewLine7Di2015NewLine8Di2015NewLine9Di2015NewLine9Di2015NewLine
512265Di2015UniqueSeparator        foreach (int i in data)Di2015NewLine        {Di2015NewLine            int j = i;Di2015NewLine            new Thread(() => Console.WriteLine(j)).Start();Di2015NewLine        }Di2015NewLine
512302Di2015UniqueSeparator    private void DeviceForm_KeyDown(object sender, KeyEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.KeyValue == 13 && tstxtDeviceFilter.Focused)Di2015NewLine        {Di2015NewLine            filterByDeviceSN();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
512302Di2015UniqueSeparator    this.tstxtDeviceFilter.KeyDown += new System.Windows.Forms.KeyEventHandler(this.tstxtDeviceFilter_KeyDown);Di2015NewLineDi2015NewLine    private void tstxtDeviceFilter_KeyDown(object sender, KeyEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.KeyValue == 13)Di2015NewLine        {Di2015NewLine            filterByDeviceSN();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
512550Di2015UniqueSeparatorList<T>
512550Di2015UniqueSeparatorpublic static TList CreateList<TList,TItem>(int someArg)Di2015NewLine    where TList : BaseList<TItem>, new()Di2015NewLine    where TItem : baseItem, new()Di2015NewLine{Di2015NewLine    TList temp = new TList();Di2015NewLine    temp.Add(new TItem());Di2015NewLine    temp.Add(new TItem());Di2015NewLine    return temp;Di2015NewLine}Di2015NewLine
512685Di2015UniqueSeparatorpublic XDate ConvertDateToXdate(DateTime date)Di2015NewLine{Di2015NewLine  return new XDate(date.ToOADate);Di2015NewLine}Di2015NewLine
512691Di2015UniqueSeparatorScreen screen = Screen.FromControl(this);Di2015NewLine_wpfWindow.StartupLocation = System.Windows.WindowStartupLocation.Manual;Di2015NewLine_wpfWindow.Top = screen.Bounds.Top;Di2015NewLine_wpfWindow.Left = screen.Bounds.Left;Di2015NewLine_wpfWindow.Show();Di2015NewLine
512691Di2015UniqueSeparator_wpfWIndow.StartupLocation = System.Windows.WindowStartupLocation.CenterScreenDi2015NewLine
512711Di2015UniqueSeparator// My naive C# attempt:PDi2015NewLineDi2015NewLinepublic class Property Di2015NewLine{Di2015NewLineDi2015NewLine    public static void main( String []args ) Di2015NewLine    {Di2015NewLine         Property p = Property.buildFrom( new Builder("title").Area("area").Etc() )Di2015NewLine    }Di2015NewLine    public static Property buildFrom( Builder builder ) Di2015NewLine    {Di2015NewLine        return new Propert( builder );Di2015NewLine    }Di2015NewLineDi2015NewLine    private Property ( Builder builder ) Di2015NewLine    {Di2015NewLine        this.area = builder.area;Di2015NewLine        this.title = builder.title;Di2015NewLine        // etc. Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class Builder Di2015NewLine{Di2015NewLine    public Builder ( String t ) Di2015NewLine    {Di2015NewLine       this.title = t;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Builder Area( String area )Di2015NewLine    {Di2015NewLine       this.area = area;Di2015NewLine       return this;Di2015NewLine    }Di2015NewLine    // etc. Di2015NewLine}Di2015NewLine
512968Di2015UniqueSeparatordouble d = double.Parse ("$10.10", NumberStyles.Currency);Di2015NewLine
512986Di2015UniqueSeparatorpublic static void MethodName(object a)Di2015NewLine{Di2015NewLine        if(a is int)Di2015NewLine        {Di2015NewLine                Console.WriteLine("int");Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine                Console.WriteLine("object");Di2015NewLine        }Di2015NewLine}Di2015NewLine
513051Di2015UniqueSeparatorpublic class MyClass implements LargerClassDi2015NewLine
513051Di2015UniqueSeparatorMyClass
513051Di2015UniqueSeparatorLargerClass
513051Di2015UniqueSeparatorLargerClass
513051Di2015UniqueSeparatorextends
513051Di2015UniqueSeparatorpublic class MyClass extends LargerClassDi2015NewLine
513051Di2015UniqueSeparatorpublic class MyClass : LargerClassDi2015NewLine
513051Di2015UniqueSeparatorLargerClass
513051Di2015UniqueSeparatorIEnumerable
513284Di2015UniqueSeparatorif( i < 0 )Di2015NewLine   throw new ArgumentOutOfRangeException("i", "parameter i must be greater than 0");Di2015NewLineDi2015NewLineif( string.IsNullOrEmpty(s) )Di2015NewLine   throw new ArgumentNullException("s","the paramater s needs to be set ...");Di2015NewLine
513325Di2015UniqueSeparatorlistBox1.Parent = tabControl1.TabPages[1];
513346Di2015UniqueSeparatorSystem.Char
513346Di2015UniqueSeparatorpbData
513346Di2015UniqueSeparatorcbData
513346Di2015UniqueSeparatorSystem.Char
513346Di2015UniqueSeparatorSecureString
513346Di2015UniqueSeparatorSystem.Char
513408Di2015UniqueSeparator<StackPanel>Di2015NewLine    <TextBox x:Name="TextBox1" />Di2015NewLine    <ListView x:Name="ListBox1" MouseUp="ListBox1_MouseUp">Di2015NewLine        <ListViewItem Content="Able" />Di2015NewLine        <ListViewItem Content="Baker" />Di2015NewLine        <ListViewItem Content="Charlie" />Di2015NewLine    </ListView>Di2015NewLine</StackPanel>Di2015NewLineDi2015NewLineprivate void ListBox1_MouseUp(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    TextBox1.Focus();Di2015NewLine}Di2015NewLine
513481Di2015UniqueSeparatorpublic Window1()Di2015NewLine{Di2015NewLine    InitializeComponent();    Di2015NewLine    this.Deactivated += new EventHandler(Window1_Deactivated);Di2015NewLine}Di2015NewLineDi2015NewLinevoid Window1_Deactivated(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Visibility = Visibility.Collapsed;Di2015NewLine}Di2015NewLine
513500Di2015UniqueSeparatorDateTime.FromOADate
513500Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace DateFromDoubleDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine    \static void Main(string[] args)Di2015NewLine    \{Di2015NewLine    \\Console.WriteLine(DateTime.FromOADate(39820.0));Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
513500Di2015UniqueSeparator1/7/2009 12:00:00 AMDi2015NewLine
513502Di2015UniqueSeparatorprivate static Post GetPost(Guid id)Di2015NewLine{Di2015NewLine    Post p = default(Post);Di2015NewLineDi2015NewLine    foreach (Post post in _Posts)Di2015NewLine    {Di2015NewLine        if (post.Id == id)Di2015NewLine        {Di2015NewLine            p = post;Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return p;Di2015NewLine}Di2015NewLine
513502Di2015UniqueSeparatorprivate static Post GetPost(Guid id)Di2015NewLine{Di2015NewLine    return _Posts.Find(delegate(Post p)Di2015NewLine    {Di2015NewLine        return p.Id == id;Di2015NewLine    });Di2015NewLine}Di2015NewLine
513502Di2015UniqueSeparatorprivate static Post NewGetPost(Guid id)Di2015NewLine{Di2015NewLine    return _Posts.Find(p => p.Id == id);Di2015NewLine}Di2015NewLine
513529Di2015UniqueSeparatorpublic partial class Main : FormDi2015NewLine{Di2015NewLine    private static Main mainFormForLogging;Di2015NewLine    public static Main MainFormForLoggingDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return mainFormForLogging;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Main()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        if (mainFormForLogging == null)Di2015NewLine        {Di2015NewLine            mainFormForLogging = this;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine         if (disposing)Di2015NewLine         {Di2015NewLine             if (this == mainFormForLogging)Di2015NewLine             {Di2015NewLine                mainFormForLogging = null;Di2015NewLine             }Di2015NewLine         }Di2015NewLineDi2015NewLine         base.Dispose(disposing);Di2015NewLine    }Di2015NewLine}Di2015NewLine
513605Di2015UniqueSeparator(&(objectCategory=person)(objectClass=user)) = All users (no contacts)Di2015NewLine(&(objectCategory=person)(objectClass=contact)) = All contacts (no users)Di2015NewLine(&(objectCategory=person)) = All users and contactsDi2015NewLine
513605Di2015UniqueSeparatorLDAP://ou=ouname,dc=domain,dc=comDi2015NewLine
513605Di2015UniqueSeparatorLDAP://servername/ou=ouname,dc=domain,dc=comDi2015NewLineLDAP://servername.domain.com/ou=ouname,dc=domain,dc=comDi2015NewLineLDAP://domain.com/ou=ouname,dc=domain,dc=comDi2015NewLine
513684Di2015UniqueSeparatorusing
513684Di2015UniqueSeparatorDispose()
513684Di2015UniqueSeparatorStream.Dispose
513684Di2015UniqueSeparatorClose()
513847Di2015UniqueSeparator%23  => 23Di2015NewLinek    => 6BDi2015NewLine.    => 2EDi2015NewLine%0d  => 0DDi2015NewLine
513847Di2015UniqueSeparatorchar c = 'k';Di2015NewLineint ascii = (int)c;Di2015NewLinestring hex = ascii.ToString("X2");Di2015NewLine
513907Di2015UniqueSeparatorline.Split(new char[] { '{', '<', '>', '}', ' ', '^', '"' },Di2015NewLine           StringSplitOptions.RemoveEmptyEntries);Di2015NewLine
513907Di2015UniqueSeparatorRegex lineParseDi2015NewLine    = new Regex(@"^\\{(<([^>]+)>\\s*){3,4}(""([^""]+)""\\^\\^<([^>]+)>\\s*)?\\}$",Di2015NewLine                RegexOptions.Compiled);Di2015NewLineMatch m = lineParse.Match(line);Di2015NewLineif (m.Groups[2].Captures.Count == 3)Di2015NewLine{Di2015NewLine    Data data = new Data { C = m.Groups[2].Captures[0].Value,Di2015NewLine        S = m.Groups[2].Captures[1].Value, P = m.Groups[2].Captures[2].Value,Di2015NewLine        O = m.Groups[4].Value, T = m.Groups[5].Value };Di2015NewLine} else {Di2015NewLine    Data data = new Data { C = m.Groups[2].Captures[0].Value,Di2015NewLine        S = m.Groups[2].Captures[1].Value, P = m.Groups[2].Captures[2].Value,Di2015NewLine        O = m.Groups[2].Captures[3].Value, T = String.Empty };Di2015NewLine}Di2015NewLine
513907Di2015UniqueSeparatorMethod                #1  Wall ( Diff)     #2  Wall ( Diff)Di2015NewLine------------------------------------------------------------Di2015NewLineline.Split                3.6s (1.00x)         3.1s (1.00x)Di2015NewLinemyRegex.Match             5.1s (1.43x)         3.3s (1.10x)Di2015NewLineitDependsRegex.Matches    6.8s (1.85x)         4.4s (1.44x)Di2015NewLinestateMachine              8.4s (2.34x)         5.6s (1.82x)Di2015NewLinealanM.Matches             9.1s (2.52x)         7.8s (2.56x)Di2015NewLineyourRegex.Matches        18.3s (5.06x)        12.1s (1.82x)Di2015NewLine
513967Di2015UniqueSeparatorType generic = typeof(List<>);    Di2015NewLineType specific = generic.MakeGenericType(typeof(int));    Di2015NewLineConstructorInfo ci = specific.GetConstructor(Type.EmptyTypes);    Di2015NewLineobject o = ci.Invoke(new object[] { });Di2015NewLine
513974Di2015UniqueSeparatorDataView view = DataTable.DefaultView;Di2015NewLineview.Sort = "DateColumn";Di2015NewLine
514052Di2015UniqueSeparatorWindowsFormsHost
514052Di2015UniqueSeparatorWndProc
514052Di2015UniqueSeparatorWM_SIZE
514052Di2015UniqueSeparatorWM_SIZING
514052Di2015UniqueSeparatorWM_SIZING
514052Di2015UniqueSeparatorWndProc
514052Di2015UniqueSeparatorWndProc
514052Di2015UniqueSeparatorControl
514052Di2015UniqueSeparatorWndProc
514052Di2015UniqueSeparatorWM_SIZING
514052Di2015UniqueSeparatorWM_SIZE
514052Di2015UniqueSeparator/// <summary>Di2015NewLine/// The WM_SIZING message is sent to a window thatDi2015NewLine/// the user is resizing.  By processing this message,Di2015NewLine/// an application can monitor the size and positionDi2015NewLine/// of the drag rectangle and, if needed, change itsDi2015NewLine/// size or position. Di2015NewLine/// </summary>Di2015NewLineconst int WM_SIZING = 0x0214;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// The WM_SIZE message is sent to a window after itsDi2015NewLine/// size has changed.Di2015NewLine/// </summary>Di2015NewLineconst int WM_SIZE = 0x0005;Di2015NewLine
514113Di2015UniqueSeparatorDi2015NewLineIDbDataParameter prm = comm.CreateParameter();Di2015NewLine
514292Di2015UniqueSeparatorEventModelSocketObjectReceivedEventArgsDi2015NewLine
514292Di2015UniqueSeparatorEventModel.Sockets.ReceivedEventArgsDi2015NewLine
514439Di2015UniqueSeparator// Get all the users.Di2015NewLineIQueryable<User> users = dbContext.Users;Di2015NewLine
514439Di2015UniqueSeparator// If a filter on the pet name is required, filter.Di2015NewLineif (!string.IsNullOrEmpty(petNameFilter))Di2015NewLine{Di2015NewLine   // Filter on pet name.Di2015NewLine   users = users.Where(u => u.Pets.Where(Di2015NewLine     p => p.Name == petNameFilter).Any());Di2015NewLine}Di2015NewLineDi2015NewLine// Add a filter on the license plate number.Di2015NewLineif (!string.IsNullOrEmpty(licensePlateFilter))Di2015NewLine{Di2015NewLine  // Filter on the license plate.Di2015NewLine  users = users.Where(Di2015NewLine    u => u.Cars.Where(c => c.LicensePlace == licensePlateFilter).Any());Di2015NewLine}Di2015NewLine
514585Di2015UniqueSeparator from pmt in products_mainTableDi2015NewLine    join opt in orders_productsTable on pmt.guid equals opt.products_mainTableGUID into tempProductsDi2015NewLine    from orderedProducts in tempProducts.DefaultIfEmpty()Di2015NewLine    join omt in orders_mainTable on orderedProducts.orders_mainTableGUID equals omt.guid into tempOrdersDi2015NewLine    from ordersMain in tempOrders.DefaultIfEmpty()Di2015NewLine    group pmt by new { pmt.sku, orderedProducts.color, orderedProducts.size } into gDi2015NewLine    orderby g.FirstOrDefault().skuDi2015NewLine    select new {Di2015NewLine        g.FirstOrDefault().guid,Di2015NewLine        g.Key.sku,Di2015NewLine        g.Key.size,\Di2015NewLine        QTY = g.FirstOrDefault().orders_productsTable.Sum(c => c.qty),Di2015NewLine        SUM = g.FirstOrDefault().orders_productsTable.Sum(c => c.itemprice * c.qty),Di2015NewLine        AVG = g.FirstOrDefault().orders_productsTable.Average(c => c.itemprice * c.qty),Di2015NewLine        Some = g.FirstOrDefault().orders_productsTable.Average(p => p.qty).GetValueOrDefault(0),Di2015NewLine    }Di2015NewLine
514700Di2015UniqueSeparatorSystem.Web.HttpUtility.UrlEncode("éléphant", Encoding.Default); // %e9l%e9phantDi2015NewLine
514901Di2015UniqueSeparatorstring url = "http://somesite.com?var=12345";Di2015NewLine
515155Di2015UniqueSeparatorList<String> subList = text.GetRange(2, text.Count - 2);Di2015NewLine
515156Di2015UniqueSeparatorresult = view.GetData(Di2015NewLine  CustomerIs.Valid, Di2015NewLine  CustomerIs.From(AddressIs.Valid, AddressIs.In(Country.Russia)));Di2015NewLine
515156Di2015UniqueSeparatorvar policy = ActionPolicyDi2015NewLine  .Handle<WebException>()Di2015NewLine  .Retry(3);Di2015NewLine
515330Di2015UniqueSeparatorpublic static void AddPhoneNumber(this Contact contact, PhoneType type);Di2015NewLine
515330Di2015UniqueSeparatorpublic static void AddPhoneNumber(this Person person, PhoneType type);Di2015NewLine
515377Di2015UniqueSeparatorControl
515377Di2015UniqueSeparatorOnResize
515377Di2015UniqueSeparator public void OnResize() {Di2015NewLine     this.OnResize(EventArgs.Empty);Di2015NewLine }Di2015NewLine
515377Di2015UniqueSeparatorSize
515377Di2015UniqueSeparator typeof (Control).GetMethod("OnResize",Di2015NewLine     BindingFlags.Instance | BindingFlags.NonPublic)Di2015NewLine     .Invoke(myControl, new object[] {EventArgs.Empty});Di2015NewLine
515536Di2015UniqueSeparatorpublic class Log4netTraceListener : System.Diagnostics.TraceListenerDi2015NewLine{Di2015NewLine    private readonly log4net.ILog _log;Di2015NewLineDi2015NewLine    public Log4netTraceListener()Di2015NewLine    {Di2015NewLine        _log = log4net.LogManager.GetLogger("System.Diagnostics.Redirection");Di2015NewLine    }Di2015NewLineDi2015NewLine    public Log4netTraceListener(log4net.ILog log)Di2015NewLine    {Di2015NewLine        _log = log;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Write(string message)Di2015NewLine    {Di2015NewLine        if (_log != null)Di2015NewLine        {Di2015NewLine            _log.Debug(message);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteLine(string message)Di2015NewLine    {Di2015NewLine        if (_log != null)Di2015NewLine        {Di2015NewLine            _log.Debug(message);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
515607Di2015UniqueSeparatorstatic IPAddress getInternetIPAddress()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        IPAddress[] addresses = Dns.GetHostAddresses(Dns.GetHostName());Di2015NewLine        IPAddress gateway = IPAddress.Parse(getInternetGateway());Di2015NewLine        return findMatch(addresses, gateway);Di2015NewLine    }Di2015NewLine    catch (FormatException e) { return null; }Di2015NewLine}Di2015NewLineDi2015NewLinestatic string getInternetGateway()Di2015NewLine{Di2015NewLine    using (Process tracert = new Process())Di2015NewLine    {Di2015NewLine        ProcessStartInfo startInfo = tracert.StartInfo;Di2015NewLine        startInfo.FileName = "tracert.exe";Di2015NewLine        startInfo.Arguments = "-h 1 208.77.188.166"; // www.example.comDi2015NewLine        startInfo.UseShellExecute = false;Di2015NewLine        startInfo.RedirectStandardOutput = true;Di2015NewLine        tracert.Start();Di2015NewLineDi2015NewLine        using (StreamReader reader = tracert.StandardOutput)Di2015NewLine        {Di2015NewLine            string line = "";Di2015NewLine            for (int i = 0; i < 9; ++i)Di2015NewLine                line = reader.ReadLine();Di2015NewLine            line = line.Trim();Di2015NewLine            return line.Substring(line.LastIndexOf(' ') + 1);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic IPAddress findMatch(IPAddress[] addresses, IPAddress gateway)Di2015NewLine{Di2015NewLine    byte[] gatewayBytes = gateway.GetAddressBytes();Di2015NewLine    foreach (IPAddress ip in addresses)Di2015NewLine    {Di2015NewLine        byte[] ipBytes = ip.GetAddressBytes();Di2015NewLine        if (ipBytes[0] == gatewayBytes[0]Di2015NewLine            && ipBytes[1] == gatewayBytes[1]Di2015NewLine            && ipBytes[2] == gatewayBytes[2])Di2015NewLine        {Di2015NewLine            return ip;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
515607Di2015UniqueSeparatorfindMatch()
515607Di2015UniqueSeparatoripBytes[2] == gatewayBytes[2]
515607Di2015UniqueSeparatorwww.example.com
515607Di2015UniqueSeparatorgetInternetIPAddress()
515607Di2015UniqueSeparatorFormatException
515607Di2015UniqueSeparatorgetInternetGateway()
515625Di2015UniqueSeparator<BoundField DataField="!" />
515625Di2015UniqueSeparatorBoundField.ThisExpression
515659Di2015UniqueSeparatorif-else
515659Di2015UniqueSeparatorif
515659Di2015UniqueSeparatorIif
515659Di2015UniqueSeparatorDim s As String = Iif(person Is Nothing, String.Empty, person.FirstName)Di2015NewLine
515659Di2015UniqueSeparatorNullReferenceException
515822Di2015UniqueSeparatorHttpWebRequest
515822Di2015UniqueSeparatorHttpWebRequest WebRequest =Di2015NewLine(HttpWebRequest)System.Net.WebRequest.Create("http://www.mySite.com");Di2015NewLineWebRequest.AllowAutoRedirect = false;Di2015NewLine
515918Di2015UniqueSeparatorclass Person {Di2015NewLine    public int FavoriteNumber;Di2015NewLine    public string Name;Di2015NewLine    public string Profession;Di2015NewLine}Di2015NewLine
515918Di2015UniqueSeparatorIList<Person> people = /* my collection */;Di2015NewLinevar selectedPeople = people.Where(p => p.FavoriteNumber = 3);Di2015NewLinevar selectedPeople2 = people.Where(p => p.Name == "Bob");Di2015NewLinevar selectedPeople3 = people.Where(p => p.Profession = "Teacher");Di2015NewLine
515918Di2015UniqueSeparatorvar selectedPeople4 = from p in peopleDi2015NewLine                      where p.Name == "Bob"Di2015NewLine                      select p;Di2015NewLine
515918Di2015UniqueSeparatorselectedPeople
515918Di2015UniqueSeparatorIEnumerable<Person>
515935Di2015UniqueSeparatorpublic class Example {Di2015NewLine    public Action DoStuff;Di2015NewLine    public Action<int> DoStuffWithParameter;Di2015NewLine    public Func<int> DoStuffWithReturnValue;Di2015NewLine}Di2015NewLineDi2015NewLineclass Program {Di2015NewLine    static void Main(string[] args) {Di2015NewLine        var x = new Example() {Di2015NewLine            DoStuff = () => {Di2015NewLine                Console.WriteLine("Did Stuff");Di2015NewLine            },Di2015NewLine            DoStuffWithParameter = (p) => {Di2015NewLine                Console.WriteLine("Did Stuff with parameter " + p);Di2015NewLine            },Di2015NewLine            DoStuffWithReturnValue = () => { return 99; }Di2015NewLineDi2015NewLineDi2015NewLine        };Di2015NewLineDi2015NewLine        x.DoStuff();Di2015NewLine        x.DoStuffWithParameter(10);Di2015NewLine        int value = x.DoStuffWithReturnValue();Di2015NewLine        Console.WriteLine("Return value " + value);Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
516020Di2015UniqueSeparatorbool b = listOfStrings.Any(myString.StartsWith);Di2015NewLine
516020Di2015UniqueSeparatorbool b = listOfStrings.Any(s => myString.StartsWith(s));Di2015NewLine
516022Di2015UniqueSeparatorpublic BusinessClassDi2015NewLine{Di2015NewLine    public string MyProperty { get; private set; }Di2015NewLineDi2015NewLine    private BusinessClass()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    private BusinessClass(string myProperty)Di2015NewLine    {Di2015NewLine        MyProperty = myProperty;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static BusinessClass CreateObject(string myProperty)Di2015NewLine    {Di2015NewLine        // Perform some check on myPropertyDi2015NewLineDi2015NewLine        if (/* all ok */)Di2015NewLine            return new BusinessClass(myProperty);Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
516022Di2015UniqueSeparatorBusinessClass objBusiness = BusinessClass.CreateObject(someProperty);Di2015NewLine
516207Di2015UniqueSeparatortry Di2015NewLine{Di2015NewLine    // Do WebRequestDi2015NewLine}Di2015NewLinecatch (WebException ex) Di2015NewLine{Di2015NewLine    if (ex.Status == WebExceptionStatus.ProtocolError) Di2015NewLine    {Di2015NewLine        HttpWebResponse response = ex.Response as HttpWebResponse;Di2015NewLine        if (response != null)Di2015NewLine        {Di2015NewLine            // Process responseDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
516281Di2015UniqueSeparator<ControlTemplate TargetType="swcd:DataGrid" x:Key="DataGridTemplate">Di2015NewLine    <BorderDi2015NewLine        BorderBrush="{TemplateBinding BorderBrush}"Di2015NewLine        BorderThickness="{TemplateBinding BorderThickness}">Di2015NewLineDi2015NewLine        <Grid Name="Root" Background="{TemplateBinding Background}">Di2015NewLine            <Grid.RowDefinitions>Di2015NewLine                <RowDefinition Height="Auto" />Di2015NewLine                <RowDefinition Height="*" />Di2015NewLine                <RowDefinition Height="Auto" />Di2015NewLine            </Grid.RowDefinitions>Di2015NewLine            <Grid.ColumnDefinitions>Di2015NewLine                <ColumnDefinition Width="Auto" />Di2015NewLine                <ColumnDefinition Width="*" />Di2015NewLine                <ColumnDefinition Width="Auto" />Di2015NewLine            </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine            <swcdp:DataGridColumnHeader Name="TopLeftCornerHeader" Grid.Column="0"/>Di2015NewLine            <swcdp:DataGridColumnHeadersPresenter Name="ColumnHeadersPresenter" Grid.Column="1"/>Di2015NewLine            <swcdp:DataGridColumnHeader Name="TopRightCornerHeader" Grid.Column="2"/>Di2015NewLineDi2015NewLine            <ScrollViewerDi2015NewLine                Grid.Row="1"Di2015NewLine                Grid.Column="1"Di2015NewLine                Grid.ColumnSpan="1"Di2015NewLine                Padding="0,0,0,0"Di2015NewLine                BorderThickness="0,0,0,0"Di2015NewLine                VerticalScrollBarVisibility="Auto">Di2015NewLine                <Grid >Di2015NewLine                    <Grid.RowDefinitions>Di2015NewLine                        <RowDefinition Height="Auto" />Di2015NewLine                        <RowDefinition Height="Auto" />Di2015NewLine                    </Grid.RowDefinitions>Di2015NewLineDi2015NewLine                    <swcdp:DataGridRowsPresenter Name="RowsPresenter" Grid.Row="0" />Di2015NewLineDi2015NewLine                    <BorderDi2015NewLine                        Margin="1,1,1,1"Di2015NewLine                        Padding="2,2,2,2"Di2015NewLine                        BorderThickness="{TemplateBinding BorderThickness}"Di2015NewLine                        BorderBrush="{TemplateBinding BorderBrush}"Di2015NewLine                        Grid.Row="1">Di2015NewLine                        <Grid Background="{TemplateBinding Background}">Di2015NewLine                            <Grid.RowDefinitions>Di2015NewLine                                <RowDefinition Height="Auto"/>Di2015NewLine                                <RowDefinition Height="Auto"/>Di2015NewLine                            </Grid.RowDefinitions>Di2015NewLineDi2015NewLine                            <TextBlockDi2015NewLine                                Grid.Row="0"Di2015NewLine                                TextAlignment="Left"Di2015NewLine                                TextWrapping="NoWrap"Di2015NewLine                                Text="Add a new item using the lists below:" />Di2015NewLineDi2015NewLine                            <mystuff:MySelectionControlDi2015NewLine                                HorizontalContentAlignment="Stretch"Di2015NewLine                                Grid.Row="1"Di2015NewLine                                SelectionChanged="OnSelectionChanged"/>Di2015NewLine                        </Grid>Di2015NewLine                    </Border>Di2015NewLine                </Grid>Di2015NewLine            </ScrollViewer>Di2015NewLineDi2015NewLine            <Rectangle Name="BottomLeftCorner" Grid.Row="3" Grid.ColumnSpan="2" />Di2015NewLine            <Grid Grid.Column="1" Grid.Row="3">Di2015NewLine                <Grid.ColumnDefinitions>Di2015NewLine                    <ColumnDefinition Width="Auto" />Di2015NewLine                    <ColumnDefinition Width="*" />Di2015NewLine                </Grid.ColumnDefinitions>Di2015NewLine                <Rectangle Name="FrozenColumnScrollBarSpacer" />Di2015NewLine                <ScrollBar Name="HorizontalScrollbar" Grid.Column="1" Orientation="Horizontal" Height="18" />Di2015NewLine            </Grid>Di2015NewLine            <Rectangle Name="BottomRightCorner" Grid.Column="2" Grid.Row="3" />Di2015NewLine        </Grid>Di2015NewLine    </Border>Di2015NewLine</ControlTemplate>Di2015NewLine
516289Di2015UniqueSeparatorpublic interface IOrangeDi2015NewLine{Di2015NewLine    OrangePeel Peel { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class OrangeBase : IOrangeDi2015NewLine{Di2015NewLine    protected OrangeBase() {}Di2015NewLine    protected abstract OrangePips Seeds { get; }Di2015NewLine    public abstract OrangePeel Peel { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class NavelOrange : OrangeBaseDi2015NewLine{Di2015NewLine    public override OrangePeel Peel { get { return new OrangePeel(); } }Di2015NewLine    protected override OrangePips Seeds { get { return null; } }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ValenciaOrange : OrangeBaseDi2015NewLine{Di2015NewLine    public override OrangePeel Peel { get { return new OrangePeel(); } }Di2015NewLine    protected override OrangePips Seeds { get { return new OrangePips(6); } }Di2015NewLine}Di2015NewLine
516581Di2015UniqueSeparatorGetObject<string,string>
516581Di2015UniqueSeparatorGetObject<TKey,TValue>
516581Di2015UniqueSeparatorGetObject<KeyValuePair<TKey,TValue>>
516733Di2015UniqueSeparatorint key = GetInternalSQLDataAsInt32("Key");Di2015NewLine
516733Di2015UniqueSeparatorint key = (int)(object)GetInternalSQLDataAsInt32("Key");Di2015NewLine
516755Di2015UniqueSeparatorpublic abstract class EventHandlerBase<TDetail> : EventHandlerBase    Di2015NewLine  where TDetail : Contracts.DeliveryItemEventDetailDi2015NewLine{Di2015NewLine  public EventHandlerBase(AbstractRepository data, ILoggingManager loggingManager)Di2015NewLine    : base(data, loggingManager)Di2015NewLine  {Di2015NewLine     // Initialize generic classDi2015NewLine  }Di2015NewLine}Di2015NewLine
516817Di2015UniqueSeparatorpublic int Insert(Person person)Di2015NewLine{Di2015NewLineSqlConnection conn = new SqlConnection(connStr);Di2015NewLineconn.Open();Di2015NewLineSqlCommand dCmd = new SqlCommand("InsertData", conn);Di2015NewLinedCmd.CommandType = CommandType.StoredProcedure;Di2015NewLinetryDi2015NewLine{Di2015NewLinedCmd.Parameters.AddWithValue("@firstName", person.FirstName);Di2015NewLinedCmd.Parameters.AddWithValue("@lastName", person.LastName);Di2015NewLinedCmd.Parameters.AddWithValue("@age", person.Age);Di2015NewLinereturn dCmd.ExecuteNonQuery();Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLinethrow;Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLinedCmd.Dispose();Di2015NewLineconn.Close();Di2015NewLineconn.Dispose();Di2015NewLine}Di2015NewLine}Di2015NewLine
516885Di2015UniqueSeparatorIList
516885Di2015UniqueSeparatorKeyValuePair
516885Di2015UniqueSeparatorValueMember
516885Di2015UniqueSeparatorComboBox
516885Di2015UniqueSeparatorIList<KeyValuePair<String,MyObject>> comboData = Di2015NewLine    new IList<KeyValuePair<String,MyObject>>();Di2015NewLineDi2015NewLineforeach(var o in GetMyLocations())Di2015NewLine    comboData.Add(new KeyValuePair<String,MyObject>(o.Name, o));Di2015NewLineDi2015NewLineDataGridViewComboBoxColumn location = new DataGridViewComboBoxColumn()Di2015NewLine{Di2015NewLine    Name = "Location",Di2015NewLine    DataSource = comboData,Di2015NewLine    DisplayMember = "Key",Di2015NewLine    ValueMember = "Value"Di2015NewLine};Di2015NewLine
516885Di2015UniqueSeparatorGetMyLocations()
516885Di2015UniqueSeparatorKeyValuePair
516897Di2015UniqueSeparatorint x;Di2015NewLineFoo(ref x); // Invalid: x isn't definitely assignedDi2015NewLineBar(out x); // Valid even though x isn't definitely assignedDi2015NewLineConsole.WriteLine(x); // Valid - x is now definitely assignedDi2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinepublic void Foo(ref int y)Di2015NewLine{Di2015NewLine    Console.WriteLine(y); // ValidDi2015NewLine    // No need to assign value to yDi2015NewLine}Di2015NewLineDi2015NewLinepublic void Bar(out int y)Di2015NewLine{Di2015NewLine    Console.WriteLine(y); // Invalid: y isn't definitely assignedDi2015NewLine    if (someCondition)Di2015NewLine    {Di2015NewLine        // Invalid - must assign value to y before returningDi2015NewLine        return;Di2015NewLine    }Di2015NewLine    else if (someOtherCondition)Di2015NewLine    {Di2015NewLine        // Valid - don't need to assign value to y if we're throwingDi2015NewLine        throw new Exception();Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        y = 10;Di2015NewLine        // Valid - we can return once we've definitely assigned to yDi2015NewLine        return;Di2015NewLine    }Di2015NewLine}Di2015NewLine
516999Di2015UniqueSeparatorpublic class Wompom : IFood<VegetableGroup>, IFood<FruitGroup>Di2015NewLine{Di2015NewLine}Di2015NewLine
516999Di2015UniqueSeparatorFruitCollection<Wompom>
517101Di2015UniqueSeparatormyClass.value = new List<...>();
517101Di2015UniqueSeparator    [Serializable]Di2015NewLine\public class OTypeDi2015NewLine\{Di2015NewLine\\public int SomeIdentifier { get; set; }Di2015NewLine\\public string SomeData { get; set; }Di2015NewLineDi2015NewLine\\public override string ToString()Di2015NewLine\\{Di2015NewLine\\\return string.Format("{0}: {1}", SomeIdentifier, SomeData);Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine\[Serializable]Di2015NewLine\public class MyClass : ISerializableDi2015NewLine\{Di2015NewLine\\public List<OType> Value;Di2015NewLineDi2015NewLine\\public MyClass() {\}Di2015NewLineDi2015NewLine\\public MyClass(SerializationInfo info, StreamingContext context)Di2015NewLine\\{Di2015NewLine\\\this.Value = (List<OType>)info.GetValue("value", typeof(List<OType>));Di2015NewLine\\}Di2015NewLineDi2015NewLine\\void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)Di2015NewLine\\{Di2015NewLine\\\info.AddValue("value", Value, typeof(List<OType>));Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine        var x = new MyClass();Di2015NewLineDi2015NewLine\\x.Value = new OType[] { new OType { SomeIdentifier = 1, SomeData = "Hello" }, new OType { SomeIdentifier = 2, SomeData = "World" } }.ToList();Di2015NewLineDi2015NewLine\\var xSerialized = serialize(x);Di2015NewLineDi2015NewLine\\Console.WriteLine("Serialized object is {0}bytes", xSerialized.Length);Di2015NewLineDi2015NewLine\\var xDeserialized = deserialize<MyClass>(xSerialized);Di2015NewLineDi2015NewLine\\Console.WriteLine("{0} {1}", xDeserialized.Value[0], xDeserialized.Value[1]);Di2015NewLine
517169Di2015UniqueSeparatorextern alias CastleCore;
517169Di2015UniqueSeparatorCastleCore::Castle.Core.Interceptors.IInterceptor
517169Di2015UniqueSeparatorcci.IInterceptorDi2015NewLine
517258Di2015UniqueSeparatorvolatile
517664Di2015UniqueSeparatorbool AllSelectedDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        object o = ViewState["AllSelected"];Di2015NewLine        if(o == null) return false;Di2015NewLine        return (bool)o;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        ViewState["AllSelected"] = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
517714Di2015UniqueSeparator"ham" + 4
517714Di2015UniqueSeparatorString.Concat
517714Di2015UniqueSeparatorobject
517714Di2015UniqueSeparator4
517714Di2015UniqueSeparatorToString
517714Di2015UniqueSeparatorint
517714Di2015UniqueSeparatorstring
517714Di2015UniqueSeparator4
517714Di2015UniqueSeparatorstring
518016Di2015UniqueSeparator[Migration(62)]Di2015NewLinepublic class _62_add_date_created_column : MigrationDi2015NewLine{Di2015NewLine    public void Up()Di2015NewLine    {Di2015NewLine       //add it nullableDi2015NewLine       Database.AddColumn("Customers", new Column("DateCreated", DateTime) );Di2015NewLineDi2015NewLine       //seed it with dataDi2015NewLine       Database.Execute("update Customers set DateCreated = getdate()");Di2015NewLineDi2015NewLine       //add not-null constraintDi2015NewLine       Database.AddNotNullConstraint("Customers", "DateCreated");Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Down()Di2015NewLine    {Di2015NewLine       Database.RemoveColumn("Customers", "DateCreated");Di2015NewLine    }Di2015NewLine}Di2015NewLine
518044Di2015UniqueSeparatorSystem.Xml.XmlDocumentDi2015NewLine
518084Di2015UniqueSeparatorMarshal.ReleaseComObject
518251Di2015UniqueSeparatorInt64 estimRowCount = 0;Di2015NewLineuncheckedDi2015NewLine{Di2015NewLine    estimRowCount = leftRowCount * rightRowCount;Di2015NewLine}Di2015NewLine
518251Di2015UniqueSeparatorif (estimRowCount > 0) estimRowCount = Int64.MaxValue;Di2015NewLine
518265Di2015UniqueSeparatorLoadFileAppConfig()
518265Di2015UniqueSeparatorSetData()
518265Di2015UniqueSeparator/// <summary>Di2015NewLine/// Loads the Local App.Config file, and sets it to be the local app.config fileDi2015NewLine/// </summary>Di2015NewLine/// <param name="p_ConfigFilePath">The path of the config file to load, i.e. \\Logs\\</param>Di2015NewLinepublic void LoadFileAppConfig(string p_ConfigFilePath)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // The app.config path is the passed in path + Application Name + .configDi2015NewLine        m_LocalAppConfigFile = ProcessLocalAppConfig(p_ConfigFilePath + this.ApplicationName + ".config");Di2015NewLineDi2015NewLine        // This sets the service's app.config propertyDi2015NewLine        AppDomain.CurrentDomain.SetData("APP_CONFIG_FILE", m_LocalAppConfigFile);Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        throw ex;Di2015NewLine    }Di2015NewLine}Di2015NewLine
518265Di2015UniqueSeparatorpublic string ProcessLocalAppConfig(string p_ConfigFilePath)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        string fileName = Path.GetTempFileName();Di2015NewLine        string unencryptedConfig = DecryptConfigData(p_ConfigFilePath);Di2015NewLineDi2015NewLine        FileStream fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);Di2015NewLine        StreamWriter streamWriter = new StreamWriter(fileStream);Di2015NewLineDi2015NewLine        if (!string.IsNullOrEmpty(unencryptedConfig))Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                streamWriter.BaseStream.Seek(0, SeekOrigin.End);Di2015NewLine                streamWriter.WriteLine(unencryptedConfig);Di2015NewLine            }Di2015NewLineDi2015NewLine            catch (IOException ex)Di2015NewLine            {Di2015NewLine                Debug.Assert(false, ex.ToString());Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                streamWriter.Close();Di2015NewLine            }Di2015NewLine            return fileName;Di2015NewLine        }Di2015NewLine        return null;Di2015NewLine    }Di2015NewLine    catch (Exception)Di2015NewLine    {Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine}Di2015NewLine
518265Di2015UniqueSeparatorprivate string DecryptConfigData(string p_AppConfigFile)Di2015NewLine{Di2015NewLine    string decryptedData = null;Di2015NewLine    TMS.Pearl.SystemFramework.CryptographyManager.CryptographyManager cryptManager = new TMS.Pearl.SystemFramework.CryptographyManager.CryptographyManager();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        //Attempt to load the file.Di2015NewLine        if (File.Exists(p_AppConfigFile))Di2015NewLine        {Di2015NewLine            //Load the file's contents and decrypt them if they are encrypted.Di2015NewLine            string rawData = File.ReadAllText(p_AppConfigFile);Di2015NewLineDi2015NewLine            if (!string.IsNullOrEmpty(rawData))Di2015NewLine            {Di2015NewLine                if (!rawData.Contains("<?xml"))  //assuming that all unencrypted config files will start with an xml tag...Di2015NewLine                {Di2015NewLine                    decryptedData = cryptManager.Decrypt(rawData);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    decryptedData = rawData;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (Exception)Di2015NewLine    {Di2015NewLine        throw;Di2015NewLine    }Di2015NewLineDi2015NewLine    return decryptedData;Di2015NewLine}Di2015NewLine
518309Di2015UniqueSeparatorusing
518309Di2015UniqueSeparatortry
518309Di2015UniqueSeparatorfinally
518309Di2015UniqueSeparatortry
518309Di2015UniqueSeparatorcatch
518309Di2015UniqueSeparatorfinally
518309Di2015UniqueSeparatortry
518309Di2015UniqueSeparatorcatch
518309Di2015UniqueSeparatorusing
518309Di2015UniqueSeparatortry
518309Di2015UniqueSeparatorcatch
518309Di2015UniqueSeparatorfinally
518309Di2015UniqueSeparatorcatch
518326Di2015UniqueSeparatorvoid CopyTable(DataTable table, string connectionStringB)Di2015NewLine{Di2015NewLine    var connectionB = new OleDbConnection(connectionStringB);Di2015NewLine    foreach(DataRow row in table.Rows)Di2015NewLine    {Di2015NewLine        InsertRow(row, table.Columns, table.TableName, connectionB);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void InsertRow(DataRow row, DataColumnCollection columns, string table, OleDbConnection connection)Di2015NewLine{Di2015NewLine    var columnNames = new List<string>();Di2015NewLine    var values = new List<string>();Di2015NewLineDi2015NewLine    // generate the column and value names from the datacolumns    Di2015NewLine    for(int i =0;i<columns.Count; i++)Di2015NewLine    {Di2015NewLine        columnNames.Add("[" + columns[i].ColumnName + "]");Di2015NewLine        // datatype mismatch should be fixed by this functionDi2015NewLine        values.Add(MakeValueDbReady(row[i], columns[i].DataType));Di2015NewLine    }Di2015NewLineDi2015NewLine    // create the sqlDi2015NewLine    string sql = string.Format("INSERT INTO {0} ({1}) VALUES ({2})",Di2015NewLine            table,Di2015NewLine            string.Join(", ", columnNames.ToArray()),Di2015NewLine            string.Join(", ", values.ToArray())Di2015NewLine        );Di2015NewLineDi2015NewLine    // debug the accuracy of the sql here and even copy into Di2015NewLine    // a new Query in Access to testDi2015NewLine    ExecuteNonQuery(sql, connection);Di2015NewLine}Di2015NewLineDi2015NewLine// as the name says we are going to check the datatype and format the valueDi2015NewLine// in the sql string based on the type that the database is expectingDi2015NewLinepublic string MakeValueDbReady(object value, Type dataType)Di2015NewLine{Di2015NewLine    if (value == null)Di2015NewLine        return null;Di2015NewLineDi2015NewLine    if (dataType == typeof(string))Di2015NewLine    {Di2015NewLine        return "'" + value.ToString().Replace("'", "''") + "'"Di2015NewLine    }Di2015NewLine    else if (dataType == typeof(DateTime))Di2015NewLine    {Di2015NewLine        return "#" + ((DateTime)value).ToString + "#"Di2015NewLine    }Di2015NewLine    else if (dataType == typeof(bool))Di2015NewLine    {Di2015NewLine        return ((bool)value) ? "1" : "0";Di2015NewLine    }Di2015NewLineDi2015NewLine    return value.ToString();Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void ExecuteNonQuery(string sql, OleDbConnection conn)Di2015NewLine{Di2015NewLine    if (conn == null)Di2015NewLine        throw new ArgumentNullException("conn");Di2015NewLineDi2015NewLine    ConnectionState prevState = ConnectionState.Closed;Di2015NewLine    var command = new OleDbCommand(sql, conn);Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // the reason we are checking the prev state is for performance reasonsDi2015NewLine        // later you might want to open the connection once for the a batchDi2015NewLine        // of say 500 rows  or even wrap your connection in a transaction.Di2015NewLine        // we don't want to open and close 500 connectionsDi2015NewLine        prevState = conn.State;Di2015NewLine        if (prevState != ConnectionState.Open)Di2015NewLine            conn.Open();Di2015NewLineDi2015NewLine        command.ExecuteNonQuery();Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        if (conn.State != ConnectionState.ClosedDi2015NewLine            && prevState != ConnectionState.Open)Di2015NewLine            conn.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
518339Di2015UniqueSeparatorOnLoad
518339Di2015UniqueSeparatorDesignMode
518339Di2015UniqueSeparatorprotected override void OnLoad(System.EventArgs e)Di2015NewLine{Di2015NewLine    base.OnLoad(e);Di2015NewLine    if (!this.DesignMode)Di2015NewLine    {Di2015NewLine        /* do stuff */Di2015NewLine    }        Di2015NewLine}Di2015NewLine
518365Di2015UniqueSeparatorusing
518365Di2015UniqueSeparatorfinally
518365Di2015UniqueSeparatorDispose()
518365Di2015UniqueSeparatorClose()
518365Di2015UniqueSeparatorIDisposable
518365Di2015UniqueSeparatorDispose()
518423Di2015UniqueSeparatorresult.ViewData.ModelDi2015NewLine
518558Di2015UniqueSeparatorpublic static BitArray Prepend(this BitArray current, BitArray before) {Di2015NewLine    var bools = new bool[current.Count + before.Count];Di2015NewLine    before.CopyTo(bools, 0);Di2015NewLine    current.CopyTo(bools, before.Count);Di2015NewLine    return new BitArray(bools);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static BitArray Append(this BitArray current, BitArray after) {Di2015NewLine    var bools = new bool[current.Count + after.Count];Di2015NewLine    current.CopyTo(bools, 0);Di2015NewLine    after.CopyTo(bools, current.Count);Di2015NewLine    return new BitArray(bools);Di2015NewLine}Di2015NewLine
518724Di2015UniqueSeparatorIDataObject idat = null;Di2015NewLineException threadEx = null;Di2015NewLineThread staThread = new Thread(Di2015NewLine    delegateDi2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            idat = Clipboard.GetDataObject();Di2015NewLine        }Di2015NewLineDi2015NewLine        catch (Exception ex) Di2015NewLine        {Di2015NewLine            threadEx = ex;            Di2015NewLine        }Di2015NewLine    });Di2015NewLinestaThread.SetApartmentState(ApartmentState.STA);Di2015NewLinestaThread.Start();Di2015NewLinestaThread.Join();Di2015NewLine// at this point either you have clipboard data or an exceptionDi2015NewLine
518894Di2015UniqueSeparator[System.Runtime.InteropServices.ComVisibleAttribute(true)]Di2015NewLinepublic class CallbackDi2015NewLine{Di2015NewLine   // allows an instance of Callback to look like a function to the scriptDi2015NewLine   // (allows callback() rather than forcing the script to do callback.callMe)Di2015NewLine   [System.Runtime.InteropServices.DispId(0)]Di2015NewLine   public void callMe(string url)Di2015NewLine   {Di2015NewLine      // whatever you want to happen once the async process is completeDi2015NewLine   }Di2015NewLine}Di2015NewLine
518894Di2015UniqueSeparatorCallback cb = new Callback();Di2015NewLineWebBrowser.InvokeScript("myscript", new object[] { cb })Di2015NewLine
518894Di2015UniqueSeparatorfunction myscript(callback)Di2015NewLine{Di2015NewLine   some_async_function(function()Di2015NewLine   {Di2015NewLine      // script-specific completion codeDi2015NewLine      if ( callback )Di2015NewLine         callback();Di2015NewLine   });Di2015NewLine}Di2015NewLine
519012Di2015UniqueSeparator<PageDi2015NewLine  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">Di2015NewLine  <Page.Resources>Di2015NewLineDi2015NewLine  <!--**************************Di2015NewLine    * STYLE: MenuItemDi2015NewLine    ************************** -->Di2015NewLine  <SolidColorBrush x:Key="HighlightedBackgroundBrush" Color="#FF797878" />Di2015NewLine  <SolidColorBrush x:Key="MenuBackgroundBrush" Color="#FF505050" />Di2015NewLine  <SolidColorBrush x:Key="NormalBorderBrush" Color="#FFFFFFFF" />Di2015NewLine  <SolidColorBrush x:Key="SolidMenuFontBrush" Color="#FFFFFFFF" />Di2015NewLine  <SolidColorBrush x:Key="HighlightedText" Color="#FFFFFFFF" />Di2015NewLine  <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">Di2015NewLine    <Setter Property="OverridesDefaultStyle" Value="True"/>Di2015NewLine    <Setter Property="SnapsToDevicePixels" Value="True"/>Di2015NewLine    <Setter Property="Height" Value="25"/>Di2015NewLine    <Setter Property="Foreground" Value="{StaticResource SolidMenuFontBrush}"/>Di2015NewLine    <Setter Property="Template">Di2015NewLine      <Setter.Value>Di2015NewLine        <ControlTemplate TargetType="{x:Type Menu}">Di2015NewLine          <BorderDi2015NewLine            Background="{StaticResource MenuBackgroundBrush}"Di2015NewLine            BorderBrush="{StaticResource MenuBackgroundBrush}"Di2015NewLine            BorderThickness="1">Di2015NewLine            <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True"/>Di2015NewLine          </Border>Di2015NewLine        </ControlTemplate>Di2015NewLine      </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine  </Style>Di2015NewLine  <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">Di2015NewLine    <Setter Property="Template">Di2015NewLine      <Setter.Value>Di2015NewLine        <ControlTemplate TargetType="{x:Type MenuItem}">Di2015NewLine          <Border x:Name="Border"Di2015NewLine                  Background="{TemplateBinding Background}"Di2015NewLine                  BorderBrush="{TemplateBinding BorderBrush}"Di2015NewLine                  BorderThickness="1">Di2015NewLine            <Grid>Di2015NewLine              <Grid.ColumnDefinitions>Di2015NewLine                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>Di2015NewLine                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>Di2015NewLine                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>Di2015NewLine                <ColumnDefinition x:Name="Col3" Width="14"/>Di2015NewLine              </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine              <!-- ContentPresenter to show an Icon if needed -->Di2015NewLine              <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>Di2015NewLineDi2015NewLine              <!-- Glyph is a checkmark if needed for a checkable menu -->Di2015NewLine              <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">Di2015NewLine                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>Di2015NewLine              </Grid>Di2015NewLineDi2015NewLine              <!-- Content for the menu text etc -->Di2015NewLine              <ContentPresenter Grid.Column="1"Di2015NewLine                                Margin="{TemplateBinding Padding}"Di2015NewLine                                x:Name="HeaderHost"Di2015NewLine                                RecognizesAccessKey="True"Di2015NewLine                                ContentSource="Header"/>Di2015NewLineDi2015NewLine              <!-- Content for the menu IGT -->Di2015NewLine              <ContentPresenter Grid.Column="2"Di2015NewLine                                Margin="8,1,8,1"Di2015NewLine                                x:Name="IGTHost"Di2015NewLine                                ContentSource="InputGestureText"Di2015NewLine                                VerticalAlignment="Center"/>Di2015NewLineDi2015NewLine              <!-- Arrow drawn path which points to the next level of the menu -->Di2015NewLine              <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">Di2015NewLine                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>Di2015NewLine              </Grid>Di2015NewLineDi2015NewLine              <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->Di2015NewLine              <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">Di2015NewLine                <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">Di2015NewLine                  <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">Di2015NewLine                    <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->Di2015NewLine                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>Di2015NewLine                  </Grid>Di2015NewLine                </Border>Di2015NewLine              </Popup>Di2015NewLine            </Grid>Di2015NewLine          </Border>Di2015NewLineDi2015NewLine          <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->Di2015NewLine          <ControlTemplate.Triggers>Di2015NewLine            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->Di2015NewLine            <Trigger Property="Role" Value="TopLevelHeader">Di2015NewLine              <Setter Property="Padding" Value="6,1,6,1"/>Di2015NewLine              <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>Di2015NewLine              <Setter Property="MinWidth" Value="0" TargetName="Col0"/>Di2015NewLine              <Setter Property="Width" Value="Auto" TargetName="Col3"/>Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>Di2015NewLine            </Trigger>Di2015NewLineDi2015NewLine            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->Di2015NewLine            <Trigger Property="Role" Value="TopLevelItem">Di2015NewLine              <Setter Property="Padding" Value="6,1,6,1"/>Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>Di2015NewLine            </Trigger>Di2015NewLineDi2015NewLine            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->Di2015NewLine            <Trigger Property="Role" Value="SubmenuHeader">Di2015NewLine              <Setter Property="DockPanel.Dock" Value="Top"/>Di2015NewLine              <Setter Property="Padding" Value="0,2,0,2"/>Di2015NewLine            </Trigger>Di2015NewLineDi2015NewLine            <!-- Role = SubMenuItem : this is a child menu item which has children-->Di2015NewLine            <Trigger Property="Role" Value="SubmenuItem">Di2015NewLine              <Setter Property="DockPanel.Dock" Value="Top"/>Di2015NewLine              <Setter Property="Padding" Value="0,2,0,2"/>Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>Di2015NewLine            </Trigger>Di2015NewLine            <Trigger Property="IsSuspendingPopupAnimation" Value="true">Di2015NewLine              <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>Di2015NewLine            </Trigger>Di2015NewLineDi2015NewLine            <!-- If no Icon is present the we collapse the Icon Content -->Di2015NewLine            <Trigger Property="Icon" Value="{x:Null}">Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>Di2015NewLine            </Trigger>Di2015NewLineDi2015NewLine            <!-- The GlyphPanel contains the CheckMark -->Di2015NewLine            <Trigger Property="IsChecked" Value="true">Di2015NewLine              <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>Di2015NewLine              <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>Di2015NewLine            </Trigger>Di2015NewLineDi2015NewLine            <!-- Using the system colors for the Menu Highlight and IsEnabled-->Di2015NewLine            <Trigger Property="IsHighlighted" Value="true">Di2015NewLine              <Setter Property="Background" Value="{StaticResource HighlightedBackgroundBrush}" TargetName="Border"/>Di2015NewLine              <Setter Property="Foreground" Value="{StaticResource HighlightedText}"/>Di2015NewLine              <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" TargetName="Border"/>Di2015NewLine            </Trigger>Di2015NewLine            <Trigger Property="IsHighlighted" Value="false">Di2015NewLine              <Setter Property="Background" Value="{StaticResource MenuBackgroundBrush}" TargetName="Border"/>Di2015NewLine              <Setter Property="Foreground" Value="{StaticResource SolidMenuFontBrush}"/>Di2015NewLine              <Setter Property="BorderBrush" Value="{StaticResource MenuBackgroundBrush}" TargetName="Border"/>Di2015NewLine            </Trigger>Di2015NewLine            <Trigger Property="IsEnabled" Value="false">Di2015NewLine              <Setter Property="Foreground" Value="LightGray"/>Di2015NewLine            </Trigger>Di2015NewLine          </ControlTemplate.Triggers>Di2015NewLine        </ControlTemplate>Di2015NewLine      </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine  </Style>Di2015NewLine  </Page.Resources>Di2015NewLine<Grid x:Name="mainGrid"Di2015NewLine      Background="#FF252525">Di2015NewLineDi2015NewLine    <Menu x:Name="mainMenu"Di2015NewLine          Grid.ColumnSpan="2"Di2015NewLine          VerticalAlignment="Top">Di2015NewLineDi2015NewLine        <MenuItem x:Name="fileMenu"Di2015NewLine                  Header="File">Di2015NewLineDi2015NewLine            <MenuItem x:Name="fileOpenMenuItem"Di2015NewLine                      Header="Open..." />Di2015NewLineDi2015NewLine            <MenuItem x:Name="fileSaveMenuItem"Di2015NewLine                      Header="Save" />Di2015NewLineDi2015NewLine            <MenuItem x:Name="fileSaveAsMenuItem"Di2015NewLine                      Background="{DynamicResource menuItemBrush}"Di2015NewLine                      Header="Save As..." />Di2015NewLine        </MenuItem>Di2015NewLine    </Menu>Di2015NewLine  </Grid>Di2015NewLine</Page>Di2015NewLine
519036Di2015UniqueSeparatorpublic interface IHasSharedDataDi2015NewLine{Di2015NewLine    void UpdateSharedData();Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class TaskDi2015NewLine{Di2015NewLine    private static object LockObject = new object();Di2015NewLineDi2015NewLine    protected virtual void UpdateNonSharedData() { }Di2015NewLineDi2015NewLine    public void Method()Di2015NewLine    {Di2015NewLine         if (this is IHasSharedData)Di2015NewLine         {Di2015NewLine            lock(LockObject)Di2015NewLine            {Di2015NewLine                UpdateSharedData();Di2015NewLine            }Di2015NewLine         }Di2015NewLine         UpdateNonSharedData();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class SharedDataTask : Task, IHasSharedDataDi2015NewLine{Di2015NewLine    public void UpdateSharedData()Di2015NewLine    {Di2015NewLine       ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
519249Di2015UniqueSeparatorpublic void AppendTextBox(string value)Di2015NewLine{Di2015NewLine    if (InvokeRequired)Di2015NewLine    {Di2015NewLine    \this.Invoke(new Action<string>(AppendTextBox), new object[] {value});Di2015NewLine    \return;Di2015NewLine    }Di2015NewLine    ActiveForm.Text += value;Di2015NewLine}Di2015NewLine
519249Di2015UniqueSeparatorWindowsFormsApplication1.Form1.AppendTextBox("hi. ");Di2015NewLine
519249Di2015UniqueSeparatorAppendTextBox("hi. ");Di2015NewLine
519249Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        new Thread(SampleFunction).Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AppendTextBox(string value)Di2015NewLine    {Di2015NewLine        if (InvokeRequired)Di2015NewLine        {Di2015NewLine            this.Invoke(new Action<string>(AppendTextBox), new object[] {value});Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        textBox1.Text += value;Di2015NewLine    }Di2015NewLineDi2015NewLine    void SampleFunction()Di2015NewLine    {Di2015NewLine        // Gets executed on a seperate thread and Di2015NewLine        // doesn't block the UI while sleepingDi2015NewLine        for(int i = 0; i<5; i++)Di2015NewLine        {Di2015NewLine            AppendTextBox("hi.  ");Di2015NewLine            Thead.Sleep(1000);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
519290Di2015UniqueSeparatorscreenY = viewPort.ActualHeight * (1 - screenY);Di2015NewLine
519290Di2015UniqueSeparatorscreenY = screenY * viewPort.ActualHeight;Di2015NewLine
519290Di2015UniqueSeparatorscreenX = viewPort.ActualWidth * (screenX + 1.0) / 2.0Di2015NewLinescreenY = viewPort.ActualHeight * (1.0 - ((screenY + 1.0) / 2.0))Di2015NewLine
519331Di2015UniqueSeparatorList<int> selections = list.Select(i => i*i).ToList();Di2015NewLine
519486Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLinepublic class Form1 : FormDi2015NewLine{Di2015NewLine   [DllImport("user32.dll",CharSet=CharSet.Auto, CallingConvention=CallingConvention.StdCall)]Di2015NewLine   public static extern void mouse_event(long dwFlags, long dx, long dy, long cButtons, long dwExtraInfo);Di2015NewLineDi2015NewLine   private const int MOUSEEVENTF_LEFTDOWN = 0x02;Di2015NewLine   private const int MOUSEEVENTF_LEFTUP = 0x04;Di2015NewLine   private const int MOUSEEVENTF_RIGHTDOWN = 0x08;Di2015NewLine   private const int MOUSEEVENTF_RIGHTUP = 0x10;Di2015NewLineDi2015NewLine   public Form1()Di2015NewLine   {Di2015NewLine   }Di2015NewLineDi2015NewLine   public void DoMouseClick()Di2015NewLine   {Di2015NewLine      //Call the imported function with the cursor's current positionDi2015NewLine      mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, X, Y, 0, 0);Di2015NewLine   }Di2015NewLineDi2015NewLine  //...other code needed for the applicationDi2015NewLine}Di2015NewLine
519510Di2015UniqueSeparator        Application.CurrentCulture = System.Globalization.CultureInfo.CreateSpecificCulture("en-US");Di2015NewLine
519512Di2015UniqueSeparatorpublic static class GenericCopier<T>Di2015NewLine{Di2015NewLine    public static T DeepCopy(object objectToCopy)Di2015NewLine    {Di2015NewLine        using (MemoryStream memoryStream = new MemoryStream())Di2015NewLine        {Di2015NewLine            BinaryFormatter binaryFormatter = new BinaryFormatter();Di2015NewLine            binaryFormatter.Serialize(memoryStream, objectToCopy);Di2015NewLine            memoryStream.Seek(0, SeekOrigin.Begin);Di2015NewLine            return (T) binaryFormatter.Deserialize(memoryStream);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
519512Di2015UniqueSeparatorList<int> deepCopiedList = GenericCopier<List<int>>.DeepCopy(originalList);Di2015NewLine
519512Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    List<int> originalList = new List<int>(5);Di2015NewLine    Random random = new Random();Di2015NewLine    for(int i = 0; i < 5; i++)Di2015NewLine    {Di2015NewLine        originalList.Add(random.Next(1, 100));Di2015NewLine        Console.WriteLine("List[{0}] = {1}", i, originalList[i]);Di2015NewLine    }Di2015NewLine    List<int> deepCopiedList = GenericCopier<List<int>>.DeepCopy(originalList);Di2015NewLine    for (int i = 0; i < 5; i++)Di2015NewLine        Console.WriteLine("deepCopiedList[{0}] value is {1}", i, deepCopiedList[i]);Di2015NewLine}Di2015NewLine
519557Di2015UniqueSeparatorListView
519557Di2015UniqueSeparatorFooChanged
519557Di2015UniqueSeparatorINotifyPropertyChanged
519557Di2015UniqueSeparatorthis.RefreshItems();Di2015NewLine
519557Di2015UniqueSeparatorthis.RefreshItem(index);Di2015NewLine
519557Di2015UniqueSeparatorDisplayMember
519557Di2015UniqueSeparatorlb.DisplayMember = "";Di2015NewLinelb.DisplayMember = "Bar";Di2015NewLine
519557Di2015UniqueSeparatorDataSource
519658Di2015UniqueSeparatorSRV
519658Di2015UniqueSeparator.
519658Di2015UniqueSeparatorA
519658Di2015UniqueSeparatorCNAME
519658Di2015UniqueSeparatorMX
519658Di2015UniqueSeparatorCNAME
519658Di2015UniqueSeparatorTXT
519793Di2015UniqueSeparatorCREATE function [dbo].[csl_to_table] ( @list nvarchar(MAX) )Di2015NewLineRETURNS @list_table TABLE ([id] INT)Di2015NewLineASDi2015NewLineBEGINDi2015NewLine    DECLARE \@index INT,Di2015NewLine    \\@start_index INT,Di2015NewLine    \\@id INTDi2015NewLineDi2015NewLine    SELECT @index = 1 Di2015NewLine    SELECT @start_index = 1Di2015NewLine    WHILE @index <= DATALENGTH(@list)Di2015NewLine    BEGINDi2015NewLineDi2015NewLine    \IF SUBSTRING(@list,@index,1) = ','Di2015NewLine    \BEGINDi2015NewLineDi2015NewLine    \\SELECT @id = CAST(SUBSTRING(@list, @start_index, @index - @start_index ) AS INT)Di2015NewLine    \\INSERT @list_table ([id]) VALUES (@id)Di2015NewLine    \\SELECT @start_index = @index + 1Di2015NewLine    \ENDDi2015NewLine    \SELECT @index  = @index + 1Di2015NewLine    ENDDi2015NewLine    SELECT @id = CAST(SUBSTRING(@list, @start_index, @index - @start_index ) AS INT)Di2015NewLine    INSERT @list_table ([id]) VALUES (@id)Di2015NewLine    RETURNDi2015NewLineENDDi2015NewLine
519793Di2015UniqueSeparatorDECLARE @passed_in_ids TABLE (id INT)Di2015NewLineDi2015NewLineINSERT INTO @passed_in_ids (id)Di2015NewLine  SELECT Di2015NewLine    id Di2015NewLine  FROMDi2015NewLine    [dbo].[csl_to_table] (@your_passed_in_csl)Di2015NewLineDi2015NewLineSELECT *Di2015NewLineFROM Di2015NewLinemyTableDi2015NewLineINNER JOINDi2015NewLine@passed_in_ids idsDi2015NewLineONDi2015NewLinemyTable.id = ids.idDi2015NewLine
519811Di2015UniqueSeparatorkeyboard wedge
519811Di2015UniqueSeparatorserial port
519811Di2015UniqueSeparatorSystem.IO.Ports.SerialPort
519811Di2015UniqueSeparatorUSB
519811Di2015UniqueSeparatorkeyboard wedge
519811Di2015UniqueSeparatorserial port
519917Di2015UniqueSeparatorstatic IEnumerable<T> GetItems<T>(IEnumerable<Queue<T>> queues)Di2015NewLine{Di2015NewLine    int remaining = queues.Sum(q => q.Count);Di2015NewLine    Random rand = new Random();Di2015NewLine    while (remaining > 0)Di2015NewLine    {Di2015NewLine        int index = rand.Next(remaining);Di2015NewLine        foreach (Queue<T> q in queues)Di2015NewLine        {Di2015NewLine            if (index < q.Count)Di2015NewLine            {Di2015NewLine                yield return q.Dequeue();Di2015NewLine                remaining--;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                index -= q.Count;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
519917Di2015UniqueSeparatorint remaining = 0;Di2015NewLineforeach(Queue<T> q in queues) {remaining += q.Count;}Di2015NewLine
519917Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    List<Queue<int>> queues = new List<Queue<int>> {Di2015NewLine        Build(1,2,3,4,5), Build(6,7,8), Build(9,10,11,12,13)Di2015NewLine    };Di2015NewLine    foreach (int i in GetItems(queues))Di2015NewLine    {Di2015NewLine        Console.WriteLine(i);Di2015NewLine    }Di2015NewLine}Di2015NewLinestatic Queue<T> Build<T>(params T[] items)Di2015NewLine{Di2015NewLine    Queue<T> queue = new Queue<T>();Di2015NewLine    foreach (T item in items)Di2015NewLine    {Di2015NewLine        queue.Enqueue(item);Di2015NewLine    }Di2015NewLine    return queue;Di2015NewLine}Di2015NewLine
519923Di2015UniqueSeparatorPagesSection pageSection = new PagesSection();Di2015NewLinepageSection.ValidateRequest = false;Di2015NewLine
520046Di2015UniqueSeparator    public static IEnumerable<TSource> DistinctBy<TSource, TKey>Di2015NewLine        (this IEnumerable<TSource> source,Di2015NewLine         Func<TSource, TKey> keySelector)Di2015NewLine    {Di2015NewLine        return source.DistinctBy(keySelector,Di2015NewLine                                 EqualityComparer<TKey>.Default);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IEnumerable<TSource> DistinctBy<TSource, TKey>Di2015NewLine        (this IEnumerable<TSource> source,Di2015NewLine         Func<TSource, TKey> keySelector,Di2015NewLine         IEqualityComparer<TKey> comparer)Di2015NewLine    {Di2015NewLine        if (source == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("source");Di2015NewLine        }Di2015NewLine        if (keySelector == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("keySelector");Di2015NewLine        }Di2015NewLine        if (comparer == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("comparer");Di2015NewLine        }Di2015NewLine        return DistinctByImpl(source, keySelector, comparer);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static IEnumerable<TSource> DistinctByImpl<TSource, TKey>Di2015NewLine        (IEnumerable<TSource> source,Di2015NewLine         Func<TSource, TKey> keySelector,Di2015NewLine         IEqualityComparer<TKey> comparer)Di2015NewLine    {Di2015NewLine        HashSet<TKey> knownKeys = new HashSet<TKey>(comparer);Di2015NewLine        foreach (TSource element in source)Di2015NewLine        {Di2015NewLine            if (knownKeys.Add(keySelector(element)))Di2015NewLine            {Di2015NewLine                yield return element;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
520075Di2015UniqueSeparatorDataGridView
520075Di2015UniqueSeparatorDataTable
520075Di2015UniqueSeparatorDataSet
520075Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Data;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Windows.Forms;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLineDi2015NewLine        DataSet set = new DataSet();Di2015NewLine        DataTable table = set.Tables.Add("MyTable");Di2015NewLine        table.Columns.Add("Foo", typeof(int));Di2015NewLine        table.Columns.Add("Bar", typeof(string));Di2015NewLineDi2015NewLine        Button btn;Di2015NewLine        using (Form form = new FormDi2015NewLine        {Di2015NewLine            Text = "DataGridView binding sample",Di2015NewLine            Controls =Di2015NewLine            {Di2015NewLine                new DataGridView {Di2015NewLine                    Dock = DockStyle.Fill,Di2015NewLine                    DataMember = "MyTable",Di2015NewLine                    DataSource = setDi2015NewLine                },Di2015NewLine                (btn = new Button {Di2015NewLine                    Dock = DockStyle.Bottom,Di2015NewLine                    Text = "Total"Di2015NewLine                })Di2015NewLine            }Di2015NewLine        })Di2015NewLine        {Di2015NewLine            btn.Click += delegateDi2015NewLine            {Di2015NewLine                form.Text = table.AsEnumerable().Sum(Di2015NewLine                    row => row.Field<int>("Foo")).ToString();Di2015NewLine            };Di2015NewLine            Application.Run(form);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
520130Di2015UniqueSeparatorusing System.Windows.Forms;Di2015NewLineusing System.Threading;Di2015NewLineusing System;Di2015NewLineclass MyForm : FormDi2015NewLine{Di2015NewLineDi2015NewLine    public MyForm()Di2015NewLine    {Di2015NewLine        Button btn = new Button();Di2015NewLine        Controls.Add(btn);Di2015NewLine        btn.Text = "Go";Di2015NewLine        btn.Click += btn_Click;Di2015NewLine    }Di2015NewLine    int counter;Di2015NewLine    void btn_Click(object sender, System.EventArgs e)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < 5; i++)Di2015NewLine        {Di2015NewLine            Interlocked.Increment(ref counter);Di2015NewLine            ThreadPool.QueueUserWorkItem(DoWork, i);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    void DoWork(object state)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < 10; i++)Di2015NewLine        { // send progressDi2015NewLine            BeginInvoke((Action)delegate { Text += state.ToString(); });Di2015NewLine            Thread.Sleep(500);Di2015NewLine        }Di2015NewLine        EndThread(); // this thread doneDi2015NewLine    }Di2015NewLine    void EndThread()Di2015NewLine    {Di2015NewLine        if (Interlocked.Decrement(ref counter) == 0)Di2015NewLine        {Di2015NewLine            AllDone();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    void AllDone()Di2015NewLine    {Di2015NewLine        Invoke((Action)delegate { this.Text += " all done!"; });Di2015NewLine    }Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Application.Run(new MyForm());Di2015NewLine    }Di2015NewLine}Di2015NewLine
520182Di2015UniqueSeparatorxsi:nil="true"
520308Di2015UniqueSeparatorPublic Sub Example(Of T as New)()Di2015NewLine  Dim x = new T()Di2015NewLineEnd SubDi2015NewLine
520308Di2015UniqueSeparatorPublic Sub Example(Of T As New)()Di2015NewLine  Dim x = Activator.CreateInstance(OF T)Di2015NewLineENd SubDi2015NewLine
520352Di2015UniqueSeparatorGetIsNetworkAvailable()
520352Di2015UniqueSeparatorSystem.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable()Di2015NewLine
520352Di2015UniqueSeparatorSystem.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChangedDi2015NewLineSystem.Net.NetworkInformation.NetworkChange.NetworkAddressChangedDi2015NewLine
520413Di2015UniqueSeparatorMemberInfo
520413Di2015UniqueSeparatorMethodInfo.ReturnType
520413Di2015UniqueSeparatorPropertyInfo.PropertyType
520413Di2015UniqueSeparatorFieldInfo.FieldType
520413Di2015UniqueSeparatorEventInfo.EventHandlerType
520413Di2015UniqueSeparatorif (typeof(MyType).IsAssignableFrom(type))Di2015NewLine
520413Di2015UniqueSeparatorvar query = from type in assembly.GetTypes()Di2015NewLine            from property in type.GetProperties()Di2015NewLine            where typeof(MyType).IsAssignableFrom(property.PropertyType)Di2015NewLine            select new { Type=type, Property=property };Di2015NewLineDi2015NewLineforeach (var entry in query)Di2015NewLine{Di2015NewLine    Console.WriteLine(entry);Di2015NewLine}Di2015NewLine
520413Di2015UniqueSeparatorforeach (Type t in a.GetTypes())Di2015NewLine    foreach (PropertyInfo pi in t.GetProperties())Di2015NewLine        if (typeof(MyType).IsAssignableFrom(pi.PropertyType))Di2015NewLine            Console.WriteLine("Found a property that is MyType");Di2015NewLine
520602Di2015UniqueSeparatornamespace CustomControlsDi2015NewLine{Di2015NewLine    public class CustomCheckBox : CheckBoxDi2015NewLine    {Di2015NewLine       string _myValue;Di2015NewLine       public string MyValueDi2015NewLine       {Di2015NewLine           get { return _myValue; }Di2015NewLine           set { _myValue = value; }Di2015NewLine       }Di2015NewLineDi2015NewLine       public CustomCheckBox()Di2015NewLine       {Di2015NewLine       }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine<%@ Register TagPrefix="MyControls" Namespace="CustomControls"%>Di2015NewLine<MyControls:CustomCheckBox id="chkBox" runat="server" MyValue="value"></MyControls:CustomTextBox>Di2015NewLine
520606Di2015UniqueSeparator private void button2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        ToolStripMenuItem item1 = new ToolStripMenuItem("Menu1");Di2015NewLine        ToolStripMenuItem subMenuitem1 = new ToolStripMenuItem("SubMenu");Di2015NewLine        item1.DropDownItems.Add(subMenuitem1);Di2015NewLine        this.contextMenuStrip1.Items.Add(item1);Di2015NewLine        subMenuitem1.MouseDown += new MouseEventHandler(subMenuitem1_MouseDown);Di2015NewLine        this.contextMenuStrip1.Show(this.button2,new Point(0,0));Di2015NewLine    }Di2015NewLineDi2015NewLine    void subMenuitem1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        //e.Button will determine which button was clicked.Di2015NewLine        MessageBox.Show(e.Button.ToString());Di2015NewLine    }Di2015NewLine
520606Di2015UniqueSeparator IPHostEntry ipE = Dns.GetHostEntry(Dns.GetHostName());Di2015NewLine    IPAddress[] IpA = ipE.AddressList;Di2015NewLine    for (int i = 0; i < IpA.Length; i++)Di2015NewLine    {Di2015NewLine          if (!IpA[i].ToString().Contains(":"))Di2015NewLine          {Di2015NewLine               ToolStripMenuItem subItem = new ToolStripMenuItem(IpA[i].ToString());Di2015NewLine               subItem.MouseDown += new MouseEventHandler(subItem_MouseDown);Di2015NewLine               cxItems.Items.Add(subItem);Di2015NewLine          }Di2015NewLine    }Di2015NewLineDi2015NewLine    void subMenuitem1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine          //get a reference to the menu that was clickedDi2015NewLine          ToolStripMenuItem clickedMenu = sender as ToolStripMenuItem;Di2015NewLine          //e.Button will tell you which button was clicked.Di2015NewLine    }Di2015NewLine
520683Di2015UniqueSeparator<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">Di2015NewLine<html xmlns="http://www.w3.org/1999/xhtml">Di2015NewLine<head runat="server">Di2015NewLine    <title></title>Di2015NewLine    <script type="text/javascript" src="http://jqueryjs.googlecode.com/files/jquery-1.3.1.js">Di2015NewLine    </script>Di2015NewLine    <script type="text/javascript">Di2015NewLine        $(document).ready(function() {Di2015NewLine            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(EndRequestHandler);Di2015NewLineDi2015NewLine            function EndRequestHandler(sender, args) {Di2015NewLine                $('.mydatepickerclass').datepicker({ dateFormat: 'dd-mm-yy' });Di2015NewLine            }Di2015NewLineDi2015NewLine        });Di2015NewLine    </script>   Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <form id="form1" runat="server">Di2015NewLine    <div>Di2015NewLineDi2015NewLine    </div>Di2015NewLine    <asp:ScriptManager ID="ScriptManager1" runat="server">Di2015NewLine    </asp:ScriptManager>Di2015NewLine    <asp:UpdatePanel ID="UpdatePanel1" runat="server">Di2015NewLine        <ContentTemplate>Di2015NewLine            <asp:TextBox ID="TextBox1" runat="server" CssClass="mydatepickerclass"></asp:TextBox>Di2015NewLine            <br />Di2015NewLine            <asp:Button ID="Button1" runat="server" Text="UpdateMe" Di2015NewLine                onclick="Button1_Click" />Di2015NewLine        </ContentTemplate>Di2015NewLine    </asp:UpdatePanel>Di2015NewLine    </form>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
520813Di2015UniqueSeparatorusing (var destCmdB = new OleDbCommandBuilder(destDA)) Di2015NewLine{            Di2015NewLine    destDA.DeleteCommand = destCmdB.GetDeleteCommand();            Di2015NewLine    destDA.InsertCommand = destCmdB.GetInsertCommand();        Di2015NewLine}Di2015NewLine
520813Di2015UniqueSeparatordestDA.InsertCommand = new OleDbCommand("INSERT INTO `AdminUsers` (`UserName`, `Password`) VALUES (?, ?)");Di2015NewLinedestDA.DeleteCommand = new OleDbCommand("DELETE FROM `AdminUsers` WHERE (`ID` = ?)");Di2015NewLinedestDA.UpdateCommand = new OldDbCommand("UPDATE `AdminUsers` SET `UserName` = ?, `Password` = ? WHERE (`ID` = ?)");Di2015NewLine
520834Di2015UniqueSeparatorIEnumerable<Team> drew = (from fixture in fixturesDi2015NewLine                     where fixture.Played Di2015NewLine                        && (fixture.HomeScore == fixture.AwayScore)Di2015NewLine                     select fixture.HomeTeam)Di2015NewLine                     .Union(from fixture in fixturesDi2015NewLine                     where fixture.Played Di2015NewLine                        && (fixture.HomeScore == fixture.AwayScore)Di2015NewLine                     select fixture.AwayTeam);Di2015NewLine
520851Di2015UniqueSeparatorbtnExample.OnClientClick = "functionOne(1,2); return function2();";Di2015NewLine
520851Di2015UniqueSeparatorfunction function2()Di2015NewLine{Di2015NewLine    //Do somethingDi2015NewLine    return false;Di2015NewLine}Di2015NewLine
521045Di2015UniqueSeparatorUri target = new Uri("ftp://ftpserver.com/%2E%2E/AB00000/incoming/files");Di2015NewLine
521051Di2015UniqueSeparator    $("#printLoadingPanel")Di2015NewLine       .css({display:"block",top:"0px",left:"0px",height:screen.availHeight});Di2015NewLine
521051Di2015UniqueSeparator    window.setTimeout(checkIfDoneDownload,500);Di2015NewLine
521051Di2015UniqueSeparatorfunction checkIfDoneDownload()Di2015NewLine{Di2015NewLineDi2015NewLine$.ajax({Di2015NewLine  type: "POST",Di2015NewLine  url: "../Services/Utilities.svc/IsPrintDownloadDone",Di2015NewLine  data: "{}",Di2015NewLine  contentType: "application/json; charset=utf-8",Di2015NewLine  dataType: "json",Di2015NewLine  success: function(msg) {Di2015NewLine  if (msg.d)Di2015NewLine  {Di2015NewLine    $("#printLoadingPanel").css("display","none");Di2015NewLine  }Di2015NewLine  else  {window.setTimeout(checkIfDoneDownload,500);}Di2015NewLine  },  Di2015NewLine  error: function (xhr, textStatus, errorThrown) {Di2015NewLine  if (xhr.status==12030) {checkIfDoneDownload();}Di2015NewLine}Di2015NewLine});Di2015NewLine}Di2015NewLine
521104Di2015UniqueSeparator<asp:Panel runat="server" id="searchPanel" DefaultButton="btnGoButton">Di2015NewLine    <asp:DropDownList ID="ddlMenu" runat="server" />Di2015NewLine    <asp:Button ID="btnGoButton" runat="server" onclick="GoButton_Click"/>Di2015NewLine</asp:Panel>Di2015NewLine
521139Di2015UniqueSeparator public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        DataTable table = new DataTable();Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            this.dataGridView1.SelectionMode = DataGridViewSelectionMode.ColumnHeaderSelect;Di2015NewLine            this.dataGridView1.ColumnAdded += new DataGridViewColumnEventHandler(dataGridView1_ColumnAdded);Di2015NewLine        }Di2015NewLineDi2015NewLine        void dataGridView1_ColumnAdded(object sender, DataGridViewColumnEventArgs e)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Column added");Di2015NewLine            e.Column.SortMode = DataGridViewColumnSortMode.NotSortable;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine            table.Columns.Add("Name");Di2015NewLine            table.Columns.Add("Age", typeof(int));Di2015NewLineDi2015NewLine            table.Rows.Add("John", 27);Di2015NewLine            this.FlipSelectionMode();Di2015NewLine            this.dataGridView1.DataSource = table;Di2015NewLine            this.FlipSelectionMode();Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        private void button2_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.FlipSelectionMode();Di2015NewLine            table.Columns.Add("Height",typeof(int));Di2015NewLine            table.Rows[0]["Height"] = 60;Di2015NewLine            this.FlipSelectionMode();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void FlipSelectionMode()Di2015NewLine        {Di2015NewLine            this.dataGridView1.SelectionMode = this.dataGridView1.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect ? DataGridViewSelectionMode.CellSelect : DataGridViewSelectionMode.ColumnHeaderSelect;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
521153Di2015UniqueSeparatorAppDomain.CurrentDomain.SetupInformation.ActivationArguments.ActivationDataDi2015NewLine
521153Di2015UniqueSeparatorforeach (string commandLineFile in AppDomain.CurrentDomain.SetupInformation.ActivationArguments.ActivationData)Di2015NewLine{Di2015NewLine    MessageBox.Show( string.Format("Command Line File: {0}", commandLineFile) );Di2015NewLine}Di2015NewLine
521277Di2015UniqueSeparatorsql = Regex.Replace(sql, "\\\\[([^\\\\s]*)\\\\]", "$1");Di2015NewLine
521289Di2015UniqueSeparatorCache.Insert("MyCacheKey", myObjectToCache, null, DateTime.Now.AddDays(1), null);Di2015NewLine
521289Di2015UniqueSeparatorconst string CACHE_KEY = "MyCacheKey";Di2015NewLineDi2015NewLineprivate DataSet RecentlyAdded()Di2015NewLine{Di2015NewLine    if(Cache[CACHE_KEY] == null)Di2015NewLine        Cache.Insert(CACHE_KEY, GetRecentlyAddedFromDatabase(), null, DateTime.Now.AddDays(1), null);Di2015NewLine    return Cache[CACHE_KEY];Di2015NewLine}Di2015NewLine
521292Di2015UniqueSeparatorLoginCreatedUser="false"Di2015NewLine
521412Di2015UniqueSeparatorArgumentExceptionDi2015NewLineInvalidOperationExceptionDi2015NewLineFormatExceptionDi2015NewLine
521533Di2015UniqueSeparatorenum Days { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };Di2015NewLine
521739Di2015UniqueSeparator<ContentControl Content="{Binding ElementName=cmbBox,Path=SelectedValue}" ContentTemplate="{StaticResource robinTemplate}"/>Di2015NewLine
521797Di2015UniqueSeparator  [DllImport(@"zip4_w32.dll",Di2015NewLine        CallingConvention = CallingConvention.StdCall,Di2015NewLine        EntryPoint = "z4ctygetSTD",Di2015NewLine        ExactSpelling = false)]Di2015NewLine    private extern static int z4ctygetSTD(ref CITY_REC args, IntPtr ptr);Di2015NewLine
521844Di2015UniqueSeparatorDataTable dt = GetDataFromSource();Di2015NewLinedt.CaseSensitive = false;Di2015NewLinedt.DefaultView.Sort = "city asc";Di2015NewLine
522151Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineclass VertexCoverDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var v = new VertexCover();Di2015NewLine        v.ParseInput();Di2015NewLine        v.FindVertexCover();Di2015NewLine        v.PrintResults();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void PrintResults()Di2015NewLine    {Di2015NewLine        Console.WriteLine(String.Join(" ", VertexCoverResult.Select(x => x.ToString()).ToArray()));Di2015NewLine    }Di2015NewLineDi2015NewLine    private void FindVertexCover()Di2015NewLine    {Di2015NewLine        FindBipartiteMatching();Di2015NewLineDi2015NewLine        var TreeSet = new HashSet<int>();Di2015NewLine        foreach (var v in LeftVertices)Di2015NewLine            if (Matching[v] < 0)Di2015NewLine                DepthFirstSearch(TreeSet, v, false);Di2015NewLineDi2015NewLine        VertexCoverResult = new HashSet<int>(LeftVertices.Except(TreeSet).Union(RightVertices.Intersect(TreeSet)));Di2015NewLine    }Di2015NewLineDi2015NewLine    private void DepthFirstSearch(HashSet<int> TreeSet, int v, bool left)Di2015NewLine    {Di2015NewLine        if (TreeSet.Contains(v))Di2015NewLine            return;Di2015NewLine        TreeSet.Add(v);Di2015NewLine        if (left) {Di2015NewLine            foreach (var u in Edges[v])Di2015NewLine                if (u != Matching[v])Di2015NewLine                    DepthFirstSearch(TreeSet, u, true);Di2015NewLine        } else if (Matching[v] >= 0)Di2015NewLine            DepthFirstSearch(TreeSet, Matching[v], false);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void FindBipartiteMatching()Di2015NewLine    {Di2015NewLine        Bicolorate();Di2015NewLine        Matching = Enumerable.Repeat(-1, VertexCount).ToArray();Di2015NewLine        var cnt = 0;Di2015NewLine        foreach (var i in LeftVertices) {Di2015NewLine            var seen = new bool[VertexCount];Di2015NewLine            if (BipartiteMatchingInternal(seen, i)) cnt++;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool BipartiteMatchingInternal(bool[] seen, int u)Di2015NewLine    {Di2015NewLine        foreach (var v in Edges[u]) {Di2015NewLine            if (seen[v]) continue;Di2015NewLine            seen[v] = true;Di2015NewLine            if (Matching[v] < 0 || BipartiteMatchingInternal(seen, Matching[v])) {Di2015NewLine                Matching[u] = v;Di2015NewLine                Matching[v] = u;Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Bicolorate()Di2015NewLine    {Di2015NewLine        LeftVertices = new HashSet<int>();Di2015NewLine        RightVertices = new HashSet<int>();Di2015NewLineDi2015NewLine        var colors = new int[VertexCount];Di2015NewLine        for (int i = 0; i < VertexCount; ++i)Di2015NewLine            if (colors[i] == 0 && !BicolorateInternal(colors, i, 1))Di2015NewLine                throw new InvalidOperationException("Graph is NOT bipartite.");Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool BicolorateInternal(int[] colors, int i, int color)Di2015NewLine    {Di2015NewLine        if (colors[i] == 0) {Di2015NewLine            if (color == 1) LeftVertices.Add(i);Di2015NewLine            else RightVertices.Add(i);Di2015NewLine            colors[i] = color;Di2015NewLine        } else if (colors[i] != color)Di2015NewLine            return false;Di2015NewLine        elseDi2015NewLine            return true;Di2015NewLine        foreach (var j in Edges[i])Di2015NewLine            if (!BicolorateInternal(colors, j, 3 - color))Di2015NewLine                return false;Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    private int VertexCount;Di2015NewLine    private HashSet<int>[] Edges;Di2015NewLine    private HashSet<int> LeftVertices;Di2015NewLine    private HashSet<int> RightVertices;Di2015NewLine    private HashSet<int> VertexCoverResult;Di2015NewLine    private int[] Matching;Di2015NewLineDi2015NewLine    private void ReadIntegerPair(out int x, out int y)Di2015NewLine    {Di2015NewLine        var input = Console.ReadLine();Di2015NewLine        var splitted = input.Split(new char[] { ' ' }, 2);Di2015NewLine        x = int.Parse(splitted[0]);Di2015NewLine        y = int.Parse(splitted[1]);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ParseInput()Di2015NewLine    {Di2015NewLine        int EdgeCount;Di2015NewLine        ReadIntegerPair(out VertexCount, out EdgeCount);Di2015NewLine        Edges = new HashSet<int>[VertexCount];Di2015NewLine        for (int i = 0; i < Edges.Length; ++i)Di2015NewLine            Edges[i] = new HashSet<int>();Di2015NewLineDi2015NewLine        for (int i = 0; i < EdgeCount; i++) {Di2015NewLine            int x, y;Di2015NewLine            ReadIntegerPair(out x, out y);Di2015NewLine            Edges[x].Add(y);Di2015NewLine            Edges[y].Add(x);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
522195Di2015UniqueSeparatorPublic Class MyGridDi2015NewLineInherits GridViewDi2015NewLineDi2015NewLineDi2015NewLinePrivate Sub MyGrid_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles Me.RowDataBoundDi2015NewLine  If Me.AutoGenerateColumns = True ThenDi2015NewLine    If e.Row.RowType = DataControlRowType.DataRow ThenDi2015NewLine        For Each c As TableCell In e.Row.CellsDi2015NewLine            Dim tb As New TextBox()Di2015NewLine            tb.Text = c.TextDi2015NewLine            c.Controls.Clear()Di2015NewLine            c.Controls.Add(tb)Di2015NewLine        NextDi2015NewLine    End IfDi2015NewLine    End IfDi2015NewLineEnd SubDi2015NewLine
522225Di2015UniqueSeparatorHost
522235Di2015UniqueSeparatorpublic class SeoUrls : IHttpModuleDi2015NewLine{Di2015NewLine  #region IHttpModule MembersDi2015NewLineDi2015NewLine  public void Init(HttpApplication context)Di2015NewLine  {Di2015NewLine      context.PreRequestHandlerExecute += OnPreRequestHandlerExecute;Di2015NewLine  }Di2015NewLineDi2015NewLine  public void Dispose()Di2015NewLine  {Di2015NewLine  }Di2015NewLineDi2015NewLine  #endregionDi2015NewLineDi2015NewLine  private void OnPreRequestHandlerExecute(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine    HttpContext ctx = ((HttpApplication) sender).Context;Di2015NewLine    IHttpHandler handler = ctx.Handler;Di2015NewLineDi2015NewLine    // Only worry about redirecting pages at this pointDi2015NewLine    // static files might be coming from a different domainDi2015NewLine    if (handler is Page)Di2015NewLine    {Di2015NewLine      if (Ctx.Request.Url.Host != WebConfigurationManager.AppSettings["FullHost"])Di2015NewLine      {Di2015NewLine        UriBuilder uri = new UriBuilder(ctx.Request.Url);Di2015NewLineDi2015NewLine        uri.Host = WebConfigurationManager.AppSettings["FullHost"];Di2015NewLineDi2015NewLine        // Perform a permanent redirect - I've generally implemented this as an Di2015NewLine        // extension method so I can use Response.PermanentRedirect(uri)Di2015NewLine        // but expanded here for obviousness:Di2015NewLine        response.AddHeader("Location", uri);Di2015NewLine        response.StatusCode = 301;Di2015NewLine        response.StatusDescription = "Moved Permanently";Di2015NewLine        response.End();Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
522235Di2015UniqueSeparator<httpModules>Di2015NewLine  [...]Di2015NewLine  <add type="[Namespace.]SeoUrls, [AssemblyName], [Version=x.x.x.x, Culture=neutral, PublicKeyToken=933d439bb833333a]" name="SeoUrls"/>Di2015NewLine</httpModules>Di2015NewLine
522245Di2015UniqueSeparator// In Your Program.cs Convert ThisDi2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    Application.EnableVisualStyles();Di2015NewLine    Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine    Application.Run(new Form1());Di2015NewLine}Di2015NewLineDi2015NewLine// To ThisDi2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    Application.EnableVisualStyles();Di2015NewLine    Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine    Form1 TheForm = new Form1();Di2015NewLine    Application.Run();Di2015NewLine}Di2015NewLineDi2015NewLine// Call Application.Exit() From Anywhere To Stop Application.Run() Message Pump and Exit ApplicationDi2015NewLine
522288Di2015UniqueSeparatorpublic SomeStruct(String stringProperty, Int32 intProperty) : this()Di2015NewLine{Di2015NewLine    this.StringProperty = stringProperty;Di2015NewLine    this.IntProperty = intProperty;Di2015NewLine}Di2015NewLine
522288Di2015UniqueSeparatorthis
522518Di2015UniqueSeparatorpublic static IEnumerable<string> FindBlankFields(Staff staff)Di2015NewLine{Di2015NewLine    return staff.GetType()Di2015NewLine        .GetProperties(BindingFlags.Instance | BindingFlags.Public |Di2015NewLine            BindingFlags.NonPublic)Di2015NewLine        .Where(p => p.CanRead)Di2015NewLine        .Select(p => new { Property = p, Value = p.GetValue(staff, null) })Di2015NewLine        .Where(a => a.Value == null || String.IsNullOrEmpty(a.Value.ToString()))Di2015NewLine        .Select(a => a.Property.Name);Di2015NewLine}Di2015NewLine
522568Di2015UniqueSeparator  <asp:PasswordRecovery ID="PasswordRecovery1" runat="server">Di2015NewLine  <QuestionTemplate>Di2015NewLine                <h2>Forgot Password</h2>Di2015NewLine                Hello <asp:Literal ID="UserName" runat="server"></asp:Literal><br />Di2015NewLine                Please answer your password question : <br />Di2015NewLine                <asp:Literal ID="Question" runat="server"></asp:Literal>Di2015NewLine                <asp:TextBox ID="Answer" runat="server"></asp:TextBox><br />Di2015NewLine                 <asp:Button ID="SubmitButton" runat="server" Text="Send Answer By Mail" Di2015NewLineCommandName="Submit"/><br />Di2015NewLine                  <asp:Literal ID="FailureText" runat="server"></asp:Literal>Di2015NewLine    </QuestionTemplate>Di2015NewLine    </asp:PasswordRecovery>Di2015NewLine
522568Di2015UniqueSeparatorSub CancelEmail(ByVal sender As Object, ByVal e As MailMessageEventArgs)Di2015NewLine        e.Cancel = TrueDi2015NewLineEnd SubDi2015NewLine
522613Di2015UniqueSeparatordestCmdB.QuotePrefix = "["; // quote reserved column namesDi2015NewLinedestCmdB.QuotePrefix = "]";Di2015NewLine
522851Di2015UniqueSeparatorXDocument file1Doc = XDocument.Load("File1.xml");Di2015NewLineXDocument file2Doc = XDocument.Load("File2.xml");Di2015NewLineDi2015NewLineIEnumerable<string> file1Elements = from d in file1Doc.Descendants("Id")Di2015NewLine                                    select d.Value;Di2015NewLineDi2015NewLineIEnumerable<string> file2Elements = from d in file2Doc.Descendants("Id")Di2015NewLine                                    select d.Value;Di2015NewLineDi2015NewLinevar difference = file1Elements.Except(file2Elements);Di2015NewLine
522851Di2015UniqueSeparatorXDocument file1Doc = XDocument.Load("File1.xml");Di2015NewLineXDocument file2Doc = XDocument.Load("File2.xml");Di2015NewLineDi2015NewLineIEnumerable<string> file2Elements = from d in file2Doc.Descendants("Id")Di2015NewLine                                    select d.Value;Di2015NewLineDi2015NewLinevar x = from include in file1Doc.Descendants("Id")Di2015NewLine        where file2Elements.Contains(include.Value) != trueDi2015NewLine        select include;Di2015NewLine
522894Di2015UniqueSeparatorHttpContext.Current.Request.UserHostAddress;
522894Di2015UniqueSeparatorHttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
522925Di2015UniqueSeparatorif (inVar != 0)Di2015NewLine  v.push_back(inVar);Di2015NewLine
522980Di2015UniqueSeparatorvar doc = @"asdfsdafjkj;lkjsadf asddf jsadf asdfj;lksdajfDi2015NewLinesdafjkl;sjdfaas  sadfj;lksadf sadf jsdaf jf sda sdaf asdf sadDi2015NewLinejasfd sdf sadf sadf sdajlk;asdfDi2015NewLinethis_file_name asdfsadf asdf asdf asdf Di2015NewLineasdf sadf asdfj asdf sdaf sadfsadfDi2015NewLinesadf asdf this_file_name asdf asdf ";Di2015NewLineDi2015NewLinevar reg = new Regex("this_file_name", RegexOptions.IgnoreCase | RegexOptions.Multiline);Di2015NewLinevar matches = reg.Matches(doc);Di2015NewLine
523168Di2015UniqueSeparator    public static DataTable ToDataTable<T>(this IEnumerable<T> collection)Di2015NewLine    {Di2015NewLine        DataTable dt = new DataTable("DataTable");Di2015NewLine        Type t = typeof(T);Di2015NewLine        PropertyInfo[] pia = t.GetProperties();Di2015NewLineDi2015NewLine        //Inspect the properties and create the columns in the DataTableDi2015NewLine        foreach (PropertyInfo pi in pia)Di2015NewLine        {Di2015NewLine            Type ColumnType = pi.PropertyType;Di2015NewLine            if ((ColumnType.IsGenericType))Di2015NewLine            {Di2015NewLine                ColumnType = ColumnType.GetGenericArguments()[0];Di2015NewLine            }Di2015NewLine            dt.Columns.Add(pi.Name, ColumnType);Di2015NewLine        }Di2015NewLineDi2015NewLine        //Populate the data tableDi2015NewLine        foreach (T item in collection)Di2015NewLine        {Di2015NewLine            DataRow dr = dt.NewRow();Di2015NewLine            dr.BeginEdit();Di2015NewLine            foreach (PropertyInfo pi in pia)Di2015NewLine            {Di2015NewLine                if (pi.GetValue(item, null) != null)Di2015NewLine                {Di2015NewLine                    dr[pi.Name] = pi.GetValue(item, null);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            dr.EndEdit();Di2015NewLine            dt.Rows.Add(dr);Di2015NewLine        }Di2015NewLine        return dt;Di2015NewLine    }Di2015NewLine
523236Di2015UniqueSeparatorforeach
523236Di2015UniqueSeparatorforeach
523236Di2015UniqueSeparatorpublic IEnumerable<TSource[]> Combine<TSource>(params object[] sources)Di2015NewLine{Di2015NewLine    foreach(var o in sources)Di2015NewLine    {Di2015NewLine        // Choose your own exceptionDi2015NewLine        if(!(o is IEnumerable<TSource>)) throw Exception();Di2015NewLine    }Di2015NewLineDi2015NewLine    var enums =Di2015NewLine        sources.Select(s => ((IEnumerable<TSource>)s).GetEnumerator())Di2015NewLine        .ToArray();Di2015NewLineDi2015NewLine    while(enums.All(e => e.MoveNext()))Di2015NewLine    {Di2015NewLine        yield return enums.Select(e => e.Current).ToArray();Di2015NewLine    }Di2015NewLine}Di2015NewLine
523236Di2015UniqueSeparatorforeach
523236Di2015UniqueSeparatorforeach(var v in Combine(en1, en2, en3))Di2015NewLine{Di2015NewLine    // Remembering that v is an array of the type contained in en1,Di2015NewLine    // en2 and en3.Di2015NewLine}Di2015NewLine
523253Di2015UniqueSeparatorpublic yourClass GetDesiredObject(string lkupValue)Di2015NewLine{Di2015NewLine  if (yourCachedHashtable.ContainsKey(lkupValue))Di2015NewLine  {Di2015NewLine     return yourCachedHashtable[lkupValue]Di2015NewLine  }Di2015NewLine  elseDi2015NewLine  {Di2015NewLine     //Hit the db to retrieve the object values.Di2015NewLine     yourClass obj = yourDatabaseCode.GetNewObject(lkupValue);Di2015NewLine     //Add to the cache if desired.Di2015NewLine     yourCachedHashtable.Add(lkupValue, obj);Di2015NewLine     return obj;Di2015NewLine  }Di2015NewLine}Di2015NewLine
523368Di2015UniqueSeparatorpublic IGenericTest CreateGenericTestFromType(Type tClass)Di2015NewLine{Di2015NewLine   Type type = typeof(GenericTest<>).MakeGenericType(new Type[] { tClass });Di2015NewLine   return (IGenericTest) Activator.CreateInstance(type);Di2015NewLine}Di2015NewLine
523463Di2015UniqueSeparator    [DllImport("user32.dll", EntryPoint = "FindWindowEx")]Di2015NewLine    public static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);Di2015NewLine    [DllImport("User32.dll")]Di2015NewLine    public static extern int SendMessage(IntPtr hWnd, int uMsg, int wParam, string lParam);Di2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Process [] notepads=Process.GetProcessesByName("notepad");Di2015NewLine        if(notepads.Length==0)return;            Di2015NewLine        if (notepads[0] != null)Di2015NewLine        {Di2015NewLine            IntPtr child= FindWindowEx(notepads[0].MainWindowHandle, new IntPtr(0), "Edit", null);Di2015NewLine            SendMessage(child, 0x000C, 0, textBox1.Text);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
523586Di2015UniqueSeparatorUserClass user = MyDropDown.SelectedValue as UserClass;Di2015NewLine
523677Di2015UniqueSeparatorIntPtr mainHandle = FindWindow("mIRC", null);Di2015NewLineIntPtr serverHandle = FindWindowEx(mainHandle, new IntPtr(0), "MDIClient", null);  Di2015NewLineIntPtr chanHandle = FindWindowEx(serverHandle, new IntPtr(0), "mIRC_Channel", null);  Di2015NewLineIntPtr editHandle = FindWindowEx(chanHandle, new IntPtr(0), "richEdit20A", null);Di2015NewLineSendMessage(editHandle, 0x000C, 0, "Hello World");Di2015NewLine
523692Di2015UniqueSeparator    using System;Di2015NewLine    using System.Collections.Generic;Di2015NewLine    using System.Text;Di2015NewLine    using System.Net;Di2015NewLine    using System.Net.Sockets;Di2015NewLine    using System.DirectoryServices.AccountManagement;Di2015NewLine    using System.DirectoryServices.ActiveDirectory;Di2015NewLinepublic doIt()Di2015NewLine        {Di2015NewLine            DirectoryContext mycontext = new DirectoryContext(DirectoryContextType.Domain,"project.local");Di2015NewLine            DomainController dc = DomainController.FindOne(mycontext);Di2015NewLine            IPAddress DCIPAdress = IPAddress.Parse(dc.IPAddress);Di2015NewLine        }Di2015NewLine
523815Di2015UniqueSeparatorpublic static class RegexExtensionsDi2015NewLine{Di2015NewLine    public static bool Match(this string text, Regex re)Di2015NewLine    {Di2015NewLine        return Regex.Match(text, re);Di2015NewLine    }Di2015NewLine}Di2015NewLine
523853Di2015UniqueSeparatorIComponent
523914Di2015UniqueSeparatorXHtml
523914Di2015UniqueSeparatorpublic static class XHtmlDi2015NewLine{Di2015NewLine    static XHtml()Di2015NewLine    {Di2015NewLine        Namespace = "http://www.w3.org/1999/xhtml";Di2015NewLine    }Di2015NewLineDi2015NewLine    public static XNamespace Namespace { get; private set; }Di2015NewLineDi2015NewLine    public static XElement Element(string name)Di2015NewLine    {Di2015NewLine        return new XElement(Namespace + name);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static XElement Element(string name, params object[] content)Di2015NewLine    {Di2015NewLine        return new XElement(Namespace + name, content);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static XElement Element(string name, object content)Di2015NewLine    {Di2015NewLine        return new XElement(Namespace + name, content);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static XAttribute Attribute(string name, object value)Di2015NewLine    {Di2015NewLine        return new XAttribute(/* Namespace + */ name, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static XText Text(string text)Di2015NewLine    {Di2015NewLine        return new XText(text);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static XElement A(string url, params object[] content)Di2015NewLine    {Di2015NewLine        XElement result = Element("a", content);Di2015NewLine        result.Add(Attribute("href", url));Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
523914Di2015UniqueSeparatorXHtml.A
524341Di2015UniqueSeparatorpublic class Meh<T>Di2015NewLine  where T : new()Di2015NewLine{Di2015NewLine  public static T CreateOne()Di2015NewLine  {Di2015NewLine    return new T();Di2015NewLine  }Di2015NewLine}Di2015NewLine
524436Di2015UniqueSeparatorList<T>
524436Di2015UniqueSeparatorCollection<T>
524436Di2015UniqueSeparatorICollection<T>
524436Di2015UniqueSeparatornew List<int>(some collection<int>)
524436Di2015UniqueSeparatorICollection<T>
524436Di2015UniqueSeparatorCount
524436Di2015UniqueSeparatorICollection<T>
524436Di2015UniqueSeparatorList<int> list = new List<int>();Di2015NewLineforeach (int x in otherCollection)Di2015NewLine{Di2015NewLine    list.Add(x);Di2015NewLine}Di2015NewLine
524436Di2015UniqueSeparatorArray.Copy
524436Di2015UniqueSeparatorList<T>
524554Di2015UniqueSeparatorHtmlEncode
524554Di2015UniqueSeparatorpublic static string HtmlEncode(this HtmlHelper htmlHelper,Di2015NewLine                                string text, Di2015NewLine                                bool preserveWhitespace)Di2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
524554Di2015UniqueSeparatorString.Replace()
524554Di2015UniqueSeparatorRegex.Replace
524766Di2015UniqueSeparatorpublic interface Interface1<T>Di2015NewLine{Di2015NewLine    bool IsDataValid();Di2015NewLine    /* Other interfaces */Di2015NewLine}Di2015NewLine
524868Di2015UniqueSeparatorcomboBox.Text = "Wildcards";Di2015NewLine
524868Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!comboBox1.Items.Contains("Wildcards"))Di2015NewLine    {Di2015NewLine        comboBox1.Items.Add("Wildcards");Di2015NewLine    }Di2015NewLineDi2015NewLine    comboBox1.Text = "Wildcards";Di2015NewLine}Di2015NewLineDi2015NewLineprivate void comboBox1_DropDown(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (comboBox1.Items.Contains("Wildcards"))Di2015NewLine        comboBox1.Items.Remove("Wildcards");Di2015NewLine}Di2015NewLine
524954Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinepublic class AsyncStreamProcessor : IDisposableDi2015NewLine{Di2015NewLine    protected StringBuilder _buffer;  // Buffer for unprocessed data.Di2015NewLineDi2015NewLine    private bool _isDisposed = false; // True if object has been disposedDi2015NewLineDi2015NewLine    public AsyncStreamProcessor()Di2015NewLine    {Di2015NewLine        _buffer = null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerable<string> Process(byte[] newData)Di2015NewLine    {Di2015NewLine        // Note: replace the following encoding method with whatever you are reading.Di2015NewLine        // The trick here is to add an extra line break to the new data so that the algorithm recognisesDi2015NewLine        // a single line break at the end of the new data.Di2015NewLine        using(var newDataReader = new StringReader(Encoding.ASCII.GetString(newData) + Environment.NewLine))Di2015NewLine        {Di2015NewLine            // Read all lines from new data, returning all but the last.Di2015NewLine            // The last line is guaranteed to be incomplete (or possibly complete except for the line break,Di2015NewLine            // which will be processed with the next packet of data).Di2015NewLine            string line, prevLine = null;Di2015NewLine            while ((line = newDataReader.ReadLine()) != null)Di2015NewLine            {Di2015NewLine                if (prevLine != null)Di2015NewLine                {Di2015NewLine                    yield return (_buffer == null ? string.Empty : _buffer.ToString()) + prevLine;Di2015NewLine                    _buffer = null;Di2015NewLine                }Di2015NewLine                prevLine = line;Di2015NewLine            }Di2015NewLineDi2015NewLine            // Store last incomplete line in buffer.Di2015NewLine            if (_buffer == null)Di2015NewLine                // Note: the (* 2) gives you the prediction of the length of the incomplete line, Di2015NewLine                // so that the buffer does not have to be expanded in most/all situations. Di2015NewLine                // Change it to whatever seems appropiate.Di2015NewLine                _buffer = new StringBuilder(prevLine, prevLine.Length * 2);Di2015NewLine            elseDi2015NewLine                _buffer.Append(prevLine);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        Dispose(true);Di2015NewLine        GC.SuppressFinalize(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if (!_isDisposed)Di2015NewLine        {Di2015NewLine            if (disposing)Di2015NewLine            {Di2015NewLine                // Dispose managed resources.Di2015NewLine                _buffer = null;Di2015NewLine                GC.Collect();Di2015NewLine            }Di2015NewLineDi2015NewLine            // Dispose native resources.Di2015NewLineDi2015NewLine            // Remember that object has been disposed.Di2015NewLine            _isDisposed = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
525074Di2015UniqueSeparatorprotected void buttonSubmit_Click(object sender, EventArgs e)Di2015NewLine{ Di2015NewLine    tryDi2015NewLine    {Di2015NewLine       // update the database  Di2015NewLine       // change label text to tell the user update succeededDi2015NewLine       label.Text = "Message";Di2015NewLine       string js = "function hideLabel(){document.getElementById('" + label.ClientID + "').style.display = 'none'};setTimeout(hideLabel, 5000);"Di2015NewLine       ClientScript.RegisterClientScriptBlock(this.GetType(), "test", js ,true);Di2015NewLine    }Di2015NewLine    catch(Exception ex){...}Di2015NewLine}Di2015NewLine
525075Di2015UniqueSeparatorusing
525169Di2015UniqueSeparatorpublic interface BaseInterfaceDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface Interface1 : BaseInterfaceDi2015NewLine{Di2015NewLine    void SomeMethod();Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface Interface2 : BaseInterfaceDi2015NewLine{Di2015NewLine    void SomeOtherMethod();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyGenericClass<T> where T : BaseInterfaceDi2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLinevar myClass1 = new MyGenericClass<Interface1>();Di2015NewLineDi2015NewLinevar myClass2 = new MyGenericClass<Interface2>();Di2015NewLine
525241Di2015UniqueSeparatorvar query =Di2015NewLine    people.GroupJoin(pets,Di2015NewLine                     person => person,Di2015NewLine                     pet => pet.Owner,Di2015NewLine                     (person, petCollection) =>Di2015NewLine                        new { OwnerName = person.Name,Di2015NewLine                              Pet = PetCollection.Select( p => p.Name )Di2015NewLine                                                 .DefaultIfEmpty() }Di2015NewLine                    ).ToList();Di2015NewLine
525241Di2015UniqueSeparatorvar query = (from person in context.PeopleDi2015NewLine             join pet in context.Pets on person equals pet.OwnerDi2015NewLine             into tempPetsDi2015NewLine             from pets in tempPets.DefaultIfEmpty()Di2015NewLine             select new { OwnerName = person.Name, Pet = pets.Name })Di2015NewLine            .ToList();Di2015NewLine
525372Di2015UniqueSeparatorusing System.Net;Di2015NewLine//...Di2015NewLineWebClient Client = new WebClient ();Di2015NewLineClient.DownloadFile("http://i.stackoverflow.com/Content/Img/stackoverflow-logo-250.png", @"C:\\folder\\stackoverflowlogo.png");Di2015NewLine
525449Di2015UniqueSeparatorMenuStrip
525449Di2015UniqueSeparatorDropDownOpening
525449Di2015UniqueSeparatorMenuItem
525449Di2015UniqueSeparatorPopup
525449Di2015UniqueSeparatorMenuItem
525449Di2015UniqueSeparatorToolStripMenuItem
525449Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLinestatic class Program {Di2015NewLine    [STAThread]Di2015NewLine    static void Main() {Di2015NewLine        // older menuitemDi2015NewLine        MenuItem mi;Di2015NewLine        using (Form form = new Form {Di2015NewLine            Menu = new MainMenu {Di2015NewLine                MenuItems = {Di2015NewLine                    (mi = new MenuItem("abc"))Di2015NewLine                }Di2015NewLine            }Di2015NewLine        })Di2015NewLine        {Di2015NewLine            mi.MenuItems.Add("dummy");Di2015NewLine            mi.Popup += delegate {Di2015NewLine                mi.MenuItems.Clear();Di2015NewLine                mi.MenuItems.Add(DateTime.Now.ToLongTimeString());Di2015NewLine            };Di2015NewLine            Application.Run(form);Di2015NewLine        }Di2015NewLineDi2015NewLine        MenuStrip ms;Di2015NewLine        ToolStripMenuItem tsmi;Di2015NewLine        using (Form form = new Form {Di2015NewLine            MainMenuStrip = (ms = new MenuStrip {Di2015NewLine                Items = {Di2015NewLine                    (tsmi = new ToolStripMenuItem("def"))Di2015NewLine                }Di2015NewLine            })Di2015NewLine        })Di2015NewLine        {Di2015NewLine            form.Controls.Add(ms);Di2015NewLine            tsmi.DropDownItems.Add("dummy");Di2015NewLine            tsmi.DropDownOpening += delegate {Di2015NewLine                tsmi.DropDownItems.Clear();Di2015NewLine                tsmi.DropDownItems.Add(DateTime.Now.ToLongTimeString());Di2015NewLine            };Di2015NewLine            Application.Run(form);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
525549Di2015UniqueSeparatorstring textvalue = text.Value;Di2015NewLine
525594Di2015UniqueSeparatorbutton.Enabled = Condition; // Initial valueDi2015NewLineDi2015NewLineDi2015NewLine// user clicked on buttonDi2015NewLinebutton.Enabled= false; Di2015NewLine ... do button's function ...Di2015NewLinebutton.Enabled = ConditionDi2015NewLine
525608Di2015UniqueSeparatorpublic interface ISpecification<T>Di2015NewLine{Di2015NewLine  bool Matches(T instance);Di2015NewLine  string GetSql();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ProductCategoryNameSpecification : ISpecification<Product>Di2015NewLine{Di2015NewLine  readonly string CategoryName;Di2015NewLine  public ProductCategoryNameSpecification(string categoryName)Di2015NewLine  {Di2015NewLine    CategoryName = categoryName;Di2015NewLine  }Di2015NewLineDi2015NewLine  public bool Matches(Product instance)Di2015NewLine  {Di2015NewLine    return instance.Category.Name == CategoryName;Di2015NewLine  }Di2015NewLineDi2015NewLine  public string GetSql()Di2015NewLine  {Di2015NewLine    return "CategoryName like '" + { escaped CategoryName } + "'";Di2015NewLine  }Di2015NewLine}Di2015NewLine
525608Di2015UniqueSeparatorvar specifications = new List<ISpecification<Product>>();Di2015NewLinespecifications.Add(Di2015NewLine new ProductCategoryNameSpecification("Tops"));Di2015NewLinespecifications.Add(Di2015NewLine new ProductColorSpecification("Blue"));Di2015NewLineDi2015NewLinevar products = ProductRepository.GetBySpecifications(specifications);Di2015NewLine
525608Di2015UniqueSeparatorvar product = Expression.Parameter(typeof(Product), "product");Di2015NewLinevar categoryNameExpression = Expression.Equal(Di2015NewLine  Expression.Property(product, "CategoryName"),Di2015NewLine  Expression.Constant("Tops"));Di2015NewLine
525608Di2015UniqueSeparatorvar colorExpression = Expression.Equal(Di2015NewLine  Expression.Property(product, "Color"),Di2015NewLine  Expression.Constant("Red"));Di2015NewLinevar andExpression = Expression.And(categoryNameExpression, colorExpression);Di2015NewLine
525608Di2015UniqueSeparatorvar predicate = Di2015NewLine  (Func<Product, bool>)Expression.Lambda(andExpression, product).Compile();Di2015NewLinevar query = Enumerable.Where(YourDataContext.Products, predicate);Di2015NewLineDi2015NewLineforeach(Product currentProduct in query)Di2015NewLine  meh(currentProduct);Di2015NewLine
525608Di2015UniqueSeparatorList<Product> products = new List<Product>();Di2015NewLineproducts.Add(new Product { CategoryName = "Tops", Color = "Red" });Di2015NewLineproducts.Add(new Product { CategoryName = "Tops", Color = "Gree" });Di2015NewLineproducts.Add(new Product { CategoryName = "Trousers", Color = "Red" });Di2015NewLinevar query = (IEnumerable<Product>)products;Di2015NewLinequery = query.Where(p => p.CategoryName == "Tops");Di2015NewLinequery = query.Where(p => p.Color == "Red");Di2015NewLineforeach (Product p in query)Di2015NewLine    Console.WriteLine(p.CategoryName + " / " + p.Color);Di2015NewLineConsole.ReadLine();Di2015NewLine
525608Di2015UniqueSeparatorpublic class Specification<T>Di2015NewLine{Di2015NewLine  IEnumerable<T> AppendToQuery(IEnumerable<T> query);Di2015NewLine}Di2015NewLine
525705Di2015UniqueSeparatorpublic class Foo {Di2015NewLine    public int Bar {get;set;}Di2015NewLine}Di2015NewLine
525705Di2015UniqueSeparatorstatic class FooExt {Di2015NewLine    public static int Blop(this Foo foo) {return 2 * foo.bar;}Di2015NewLine}Di2015NewLine
525705Di2015UniqueSeparatorFoo foo = ...Di2015NewLineint blop = foo.Blop();Di2015NewLine
525705Di2015UniqueSeparatorXmlSerializer
525705Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class MyData {Di2015NewLine    public int Foo {get;set;} // is sentDi2015NewLine    [XmlIgnore]Di2015NewLine    public int Bar {get {...} set {...}} // is ignoredDi2015NewLine}Di2015NewLine
525705Di2015UniqueSeparatorDataContractSerializer
525705Di2015UniqueSeparator[DataContract]Di2015NewLineclass MyData {Di2015NewLine    [DataMember]Di2015NewLine    public int Foo {get;set;} // is sentDi2015NewLine    public int Bar {get {...} set {...}} // is ignoredDi2015NewLine}Di2015NewLine
525705Di2015UniqueSeparatorProtoSerializer
525705Di2015UniqueSeparator[ProtoContract]Di2015NewLineclass MyData {Di2015NewLine    [ProtoMember(1)]Di2015NewLine    public int Foo {get;set;} // is sentDi2015NewLine    public int Bar {get {...} set {...}} // is ignoredDi2015NewLine}Di2015NewLine
525736Di2015UniqueSeparatorpublic class CategoryProductDi2015NewLine{Di2015NewLine    public IEnumerable<Product> Products { get; set; }Di2015NewLine    public IEnumerable<Category> Categories {get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine....Di2015NewLineDi2015NewLinereturn View( new CategoryProduct { Products = products,Di2015NewLine                                   Categories = categories } );Di2015NewLine
525736Di2015UniqueSeparatorViewData["categories"] = categories;Di2015NewLinereturn View( products );Di2015NewLine
525747Di2015UniqueSeparatorusing(WebClient client = new WebClient()) {Di2015NewLine    string html = client.DownloadString(address);Di2015NewLine}Di2015NewLine
525747Di2015UniqueSeparatorRenderPartial
525813Di2015UniqueSeparatorpublic static class Extensions {Di2015NewLine  public static bool contains(this string source, bool ignoreCase) {... }Di2015NewLine}Di2015NewLineDi2015NewLinevoid Example {Di2015NewLine  string str = "aoeeuAOEU";Di2015NewLine  if ( str.contains("a", true) ) { ... }Di2015NewLine}Di2015NewLine
526091Di2015UniqueSeparatorPIVOT
526160Di2015UniqueSeparatorIEnumerable<int> Collapse(IEnumerable<IEnumerable<int>> e){Di2015NewLine return e.SelectMany(x => x );Di2015NewLine}Di2015NewLine
526338Di2015UniqueSeparator<a href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.filter.aspx">HttpResponse.Filter</a>
526338Di2015UniqueSeparator<a href="http://msdn.microsoft.com/en-us/library/system.io.stream.aspx">System.IO.Stream</a>
526338Di2015UniqueSeparatorHttpResponse.Filter
526338Di2015UniqueSeparatorWrite
526338Di2015UniqueSeparatorpublic class ContentLengthModule : IHttpModuleDi2015NewLine{Di2015NewLine    public void Init(HttpApplication context)Di2015NewLine    {Di2015NewLine        context.BeginRequest += OnBeginRequest;Di2015NewLine        context.EndRequest += OnEndRequest;Di2015NewLine    }Di2015NewLineDi2015NewLine    void OnBeginRequest(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var application = (HttpApplication) sender;Di2015NewLine        application.Response.Filter = new ContentLengthFilter(application.Response.Filter);Di2015NewLine    }Di2015NewLineDi2015NewLine    void OnEndRequest(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var application = (HttpApplication) sender;Di2015NewLine        var contentLengthFilter = (ContentLengthFilter) application.Response.Filter;Di2015NewLine        var contentLength = contentLengthFilter.BytesWritten;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ContentLengthFilter : StreamDi2015NewLine{Di2015NewLine    private readonly Stream _responseFilter;Di2015NewLineDi2015NewLine    public int BytesWritten { get; set; }Di2015NewLineDi2015NewLine    public ContentLengthFilter(Stream responseFilter)Di2015NewLine    {Di2015NewLine        _responseFilter = responseFilter;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Flush()Di2015NewLine    {Di2015NewLine        _responseFilter.Flush();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long Seek(long offset, SeekOrigin origin)Di2015NewLine    {Di2015NewLine        return _responseFilter.Seek(offset, origin);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void SetLength(long value)Di2015NewLine    {Di2015NewLine        _responseFilter.SetLength(value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int Read(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        return _responseFilter.Read(buffer, offset, count);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Write(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        BytesWritten += count;Di2015NewLine        _responseFilter.Write(buffer, offset, count);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanReadDi2015NewLine    {Di2015NewLine        get { return _responseFilter.CanRead; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanSeekDi2015NewLine    {Di2015NewLine        get { return _responseFilter.CanSeek; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanWriteDi2015NewLine    {Di2015NewLine        get { return _responseFilter.CanWrite; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long LengthDi2015NewLine    {Di2015NewLine        get { return _responseFilter.Length; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long PositionDi2015NewLine    {Di2015NewLine        get { return _responseFilter.Position; }Di2015NewLine        set { _responseFilter.Position = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
526545Di2015UniqueSeparatormyTextBox.Text = myTextBox.Text.Insert(myTextBox.SelectionStart, "Hello world");Di2015NewLine
526567Di2015UniqueSeparatorpublic static T TryGetValue<T>( this XmlElement element ) {Di2015NewLine    if ( null == element ) return default(T);Di2015NewLine    return (T)element.Value;Di2015NewLine}Di2015NewLine...Di2015NewLine...Di2015NewLinevar myVariable = xml.Element("myElement").TryGetValue<decimal>();Di2015NewLine
526567Di2015UniqueSeparatorstatic class Program {Di2015NewLine\static void Main() {Di2015NewLine\\var xmlDecimal = new XElement( "decimal" );Di2015NewLine\\xmlDecimal.Value = ( 123.456m ).ToString();Di2015NewLine\\decimal valueOfDecimal_1 = xmlDecimal.ValueAs<decimal>( decimal.TryParse );Di2015NewLine\\bool valueOfBool_1 = xmlDecimal.ValueAs<bool>( bool.TryParse );Di2015NewLineDi2015NewLine\\var xmlBool = new XElement( "bool" );Di2015NewLine\\xmlBool.Value = true.ToString();Di2015NewLine\\decimal valueOfDecimal_2 = xmlBool.ValueAs<decimal>( decimal.TryParse );Di2015NewLine\\bool valueOfBool_2 = xmlBool.ValueAs<bool>( bool.TryParse );Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class StaticClass {Di2015NewLine\public delegate bool TryParseDelegate<T>( string text, out T value );Di2015NewLine\public static T ValueAs<T>( this XElement element, TryParseDelegate<T> parseDelegate ) {Di2015NewLine\\return ValueAs<T>( element, parseDelegate, default( T ) );Di2015NewLine\}Di2015NewLine\public static T ValueAs<T>( this XElement element, TryParseDelegate<T> parseDelegate, T defaultValue ) {Di2015NewLine\\if ( null == element ) { return defaultValue; }Di2015NewLineDi2015NewLine\\T result;Di2015NewLine\\bool ok = parseDelegate( element.Value, out result );Di2015NewLine\\if ( ok ) { return result; }Di2015NewLineDi2015NewLine\\return defaultValue;Di2015NewLine\}Di2015NewLine}Di2015NewLine
526628Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Net;Di2015NewLineusing System.Net.Sockets;Di2015NewLineusing System.Text;Di2015NewLineusing System.IO.Compression;Di2015NewLineDi2015NewLinenamespace HttpUsingSockets {Di2015NewLine    public class Program {Di2015NewLine        private static readonly Encoding DefaultEncoding = Encoding.ASCII;Di2015NewLine        private static readonly byte[] LineTerminator = new byte[] { 13, 10 };Di2015NewLineDi2015NewLine        public static void Main(string[] args) {Di2015NewLine            var host = "stackoverflow.com";Di2015NewLine            var url = "/questions/523930/sockets-in-c-how-to-get-the-response-stream";Di2015NewLineDi2015NewLine            IPHostEntry ipAddress = Dns.GetHostEntry(host);Di2015NewLine            var ip = new IPEndPoint(ipAddress.AddressList[0], 80);Di2015NewLine            using (var socket = new Socket(ip.AddressFamily, SocketType.Stream, ProtocolType.Tcp)) {Di2015NewLine                socket.Connect(ip);Di2015NewLine                using (var n = new NetworkStream(socket)) {Di2015NewLine                    SendRequest(n, new[] {"GET " + url + " HTTP/1.1", "Host: " + host, "Connection: Close", "Accept-Encoding: gzip"});Di2015NewLineDi2015NewLine                    var headers = new Dictionary<string, string>();Di2015NewLine                    while (true) {Di2015NewLine                        var line = ReadLine(n);Di2015NewLine                        if (line.Length == 0) {Di2015NewLine                            break;Di2015NewLine                        }Di2015NewLine                        int index = line.IndexOf(':');Di2015NewLine                        headers.Add(line.Substring(0, index), line.Substring(index + 2));Di2015NewLine                    }Di2015NewLineDi2015NewLine                    string contentEncoding;Di2015NewLine                    if (headers.TryGetValue("Content-Encoding", out contentEncoding)) {Di2015NewLine                        Stream responseStream = n;Di2015NewLine                        if (contentEncoding.Equals("gzip")) {Di2015NewLine                            responseStream = new GZipStream(responseStream, CompressionMode.Decompress);Di2015NewLine                        }Di2015NewLine                        else if (contentEncoding.Equals("deflate")) {Di2015NewLine                            responseStream = new DeflateStream(responseStream, CompressionMode.Decompress);Di2015NewLine                        }Di2015NewLineDi2015NewLine                        var memStream = new MemoryStream();Di2015NewLineDi2015NewLine                        var respBuffer = new byte[4096];Di2015NewLine                        try {Di2015NewLine                            int bytesRead = responseStream.Read(respBuffer, 0, respBuffer.Length);Di2015NewLine                            while (bytesRead > 0) {Di2015NewLine                                memStream.Write(respBuffer, 0, bytesRead);Di2015NewLine                                bytesRead = responseStream.Read(respBuffer, 0, respBuffer.Length);Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                        finally {Di2015NewLine                            responseStream.Close();Di2015NewLine                        }Di2015NewLineDi2015NewLine                        var body = DefaultEncoding.GetString(memStream.ToArray());Di2015NewLine                        Console.WriteLine(body);Di2015NewLine                    }Di2015NewLine                    else {Di2015NewLine                        while (true) {Di2015NewLine                            var line = ReadLine(n);Di2015NewLine                            if (line == null) {Di2015NewLine                                break;Di2015NewLine                            }Di2015NewLine                            Console.WriteLine(line);Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        static void SendRequest(Stream stream, IEnumerable<string> request) {Di2015NewLine            foreach (var r in request) {Di2015NewLine                var data = DefaultEncoding.GetBytes(r);Di2015NewLine                stream.Write(data, 0, data.Length);Di2015NewLine                stream.Write(LineTerminator, 0, 2);Di2015NewLine            }Di2015NewLine            stream.Write(LineTerminator, 0, 2);Di2015NewLine            // Eat responseDi2015NewLine            var response = ReadLine(stream);Di2015NewLine        }Di2015NewLineDi2015NewLine        static string ReadLine(Stream stream) {Di2015NewLine            var lineBuffer = new List<byte>();Di2015NewLine            while (true) {Di2015NewLine                int b = stream.ReadByte();Di2015NewLine                if (b == -1) {Di2015NewLine                    return null;Di2015NewLine                }Di2015NewLine                if (b == 10) {Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                if (b != 13) {Di2015NewLine                    lineBuffer.Add((byte)b);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return DefaultEncoding.GetString(lineBuffer.ToArray());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
526628Di2015UniqueSeparatorusing (var client = new TcpClient(host, 80)) {Di2015NewLine      using (var n = client.GetStream()) {Di2015NewLine     }Di2015NewLine}Di2015NewLine
526650Di2015UniqueSeparatorProjectNamespace.Properties.Resources.MyFileDi2015NewLine
526650Di2015UniqueSeparatorSystem.IO.File.WriteAllBytes(@"C:\\MyFile.bin", ProjectNamespace.Properties.Resources.MyFile);Di2015NewLine
526803Di2015UniqueSeparatorconst byte[] apiCertHash = { 0xZZ, 0xYY, ....};Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Somewhere in your application's startup/init sequence...Di2015NewLine/// </summary>Di2015NewLinevoid InitPhase()Di2015NewLine{Di2015NewLine    // Override automatic validation of SSL server certificates.Di2015NewLine    ServicePointManager.ServerCertificateValidationCallback =Di2015NewLine           ValidateServerCertficate;Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Validates the SSL server certificate.Di2015NewLine/// </summary>Di2015NewLine/// <param name="sender">An object that contains state information for thisDi2015NewLine/// validation.</param>Di2015NewLine/// <param name="cert">The certificate used to authenticate the remote party.</param>Di2015NewLine/// <param name="chain">The chain of certificate authorities associated with theDi2015NewLine/// remote certificate.</param>Di2015NewLine/// <param name="sslPolicyErrors">One or more errors associated with the remoteDi2015NewLine/// certificate.</param>Di2015NewLine/// <returns>Returns a boolean value that determines whether the specifiedDi2015NewLine/// certificate is accepted for authentication; true to accept or false toDi2015NewLine/// reject.</returns>Di2015NewLineprivate static bool ValidateServerCertficate(Di2015NewLine        object sender,Di2015NewLine        X509Certificate cert,Di2015NewLine        X509Chain chain,Di2015NewLine        SslPolicyErrors sslPolicyErrors)Di2015NewLine{Di2015NewLine    if (sslPolicyErrors == SslPolicyErrors.None)Di2015NewLine    {Di2015NewLine        // Good certificate.Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    log.DebugFormat("SSL certificate error: {0}", sslPolicyErrors);Di2015NewLineDi2015NewLine    bool certMatch = false; // Assume failureDi2015NewLine    byte[] certHash = cert.GetCertHash();Di2015NewLine    if (certHash.Length == apiCertHash.Length)Di2015NewLine    {Di2015NewLine        certMatch = true; // Now assume success.Di2015NewLine        for (int idx = 0; idx < certHash.Length; idx++)Di2015NewLine        {Di2015NewLine            if (certHash[idx] != apiCertHash[idx])Di2015NewLine            {Di2015NewLine                certMatch = false; // No matchDi2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Return true => allow unauthenticated server,Di2015NewLine    //        false => disallow unauthenticated server.Di2015NewLine    return certMatch;Di2015NewLine}Di2015NewLine
527067Di2015UniqueSeparator<see cref="Func{Int32, Boolean}" />Di2015NewLine
527191Di2015UniqueSeparatorvar
527191Di2015UniqueSeparatorvar
527343Di2015UniqueSeparatorPgpSignatureGenerator pgpSignatureGenerator = new PgpSignatureGenerator(m_encryptionKeys.SecretKey.PublicKey.Algorithm, HashAlgorithmTag.Sha1);Di2015NewLine
527343Di2015UniqueSeparatorPgpV3SignatureGenerator pgpV3SignatureGenerator = new PgpV3SignatureGenerator(m_encryptionKeys.SecretKey.PublicKey.Algorithm, HashAlgorithmTag.Sha1);Di2015NewLine
527421Di2015UniqueSeparatorXmlReader
527421Di2015UniqueSeparatorwhile(reader.Read)() {}
527421Di2015UniqueSeparatorXmlResolver
527421Di2015UniqueSeparatorXmlReaderSettings
527421Di2015UniqueSeparator    using(MemoryStream ms = new MemoryStream()) {Di2015NewLine        XmlWriterSettings settings = new XmlWriterSettings();Di2015NewLine        settings.CloseOutput = false;Di2015NewLine        using (XmlWriter writer = XmlWriter.Create(ms, settings))Di2015NewLine        {Di2015NewLine            writer.WriteStartElement("xml");Di2015NewLine            for (int i = 0; i < 15000; i++)Di2015NewLine            {Di2015NewLine                writer.WriteElementString("value", i.ToString());Di2015NewLine            }Di2015NewLine            writer.WriteEndElement();Di2015NewLine        }Di2015NewLine        Console.WriteLine(ms.Length + " bytes");Di2015NewLine        ms.Position = 0;Di2015NewLine        int nodes = 0;Di2015NewLine        Stopwatch watch = Stopwatch.StartNew();Di2015NewLine        using (XmlReader reader = XmlReader.Create(ms))Di2015NewLine        {Di2015NewLine            while (reader.Read()) { nodes++; }Di2015NewLine        }Di2015NewLine        watch.Stop();Di2015NewLine        Console.WriteLine("{0} nodes in {1}ms", nodes,Di2015NewLine            watch.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLine
527464Di2015UniqueSeparatorobject
527464Di2015UniqueSeparatordecimal tmpvalue;Di2015NewLinedecimal? result = decimal.TryParse((string)value, out tmpvalue) ?Di2015NewLine                  tmpvalue : (decimal?)null;Di2015NewLine
527464Di2015UniqueSeparatordecimal
527464Di2015UniqueSeparatorresult
527464Di2015UniqueSeparatornull
527464Di2015UniqueSeparator?:
527464Di2015UniqueSeparatordecimal tmpvalue;Di2015NewLinedecimal? result = null;Di2015NewLineif (decimal.TryParse((string)value, out tmpvalue))Di2015NewLine    result = tmvalue;Di2015NewLine
527564Di2015UniqueSeparatorList<List<T>>
527564Di2015UniqueSeparatorpublic class Matrix<T>Di2015NewLine{Di2015NewLine   List<List<T>> matrix;Di2015NewLineDi2015NewLine   public void Add(IEnumerable<T> row)Di2015NewLine   {Di2015NewLine      List<T> newRow = new List<T>(row);Di2015NewLine      matrix.Add(newRow);Di2015NewLine   }Di2015NewLineDi2015NewLine   public T this[int x, int y]Di2015NewLine   {Di2015NewLine      get  { return matrix[y][x]; }Di2015NewLine   }Di2015NewLine   ....Di2015NewLine}Di2015NewLine
527564Di2015UniqueSeparator        ICollection<T> rowOne = (ICollection<T>)new List<Int64>();Di2015NewLine        rowOne.Add(1);Di2015NewLine        rowOneList.Add(2);Di2015NewLine        rowOne.Add(3);Di2015NewLineDi2015NewLine        ICollection<T> rowTwo = (ICollection<T>)new List<Int64>();Di2015NewLine        rowTwo .Add(4);Di2015NewLine        rowTwo .Add(5);Di2015NewLine        rowTwo .Add(6);Di2015NewLine
527644Di2015UniqueSeparatorCommand myCommand = new Command(scriptfile);Di2015NewLine
527644Di2015UniqueSeparatorCommandParameter testParam = new CommandParameter("key","value");Di2015NewLinemyCommand.Parameters.Add(testParam);Di2015NewLine
527644Di2015UniqueSeparatorpipeline.Commands.Add(myCommand);Di2015NewLine
527644Di2015UniqueSeparatorRunspaceConfiguration runspaceConfiguration = RunspaceConfiguration.Create();Di2015NewLineDi2015NewLineRunspace runspace = RunspaceFactory.CreateRunspace(runspaceConfiguration);Di2015NewLinerunspace.Open();Di2015NewLineDi2015NewLineRunspaceInvoke scriptInvoker = new RunspaceInvoke(runspace);Di2015NewLineDi2015NewLinePipeline pipeline = runspace.CreatePipeline();Di2015NewLineDi2015NewLine//Here's how you add a new script with argumentsDi2015NewLineCommand myCommand = new Command(scriptfile);Di2015NewLineCommandParameter testParam = new CommandParameter("key","value");Di2015NewLinemyCommand.Parameters.Add(testParam);Di2015NewLineDi2015NewLinepipeline.Commands.Add(myCommand);Di2015NewLineDi2015NewLine// Execute PowerShell scriptDi2015NewLineresults = pipeline.Invoke();Di2015NewLine
527664Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void Meh()Di2015NewLine{Di2015NewLine    var mockFileSystem = MockRepository.GenerateMock<IFileSystemService>();Di2015NewLine    mockFileSystem.Stub(fs => fs.CreateFileStream(null, FileMode.Append, FileAccess.Write, FileShare.None))Di2015NewLine        .IgnoreArguments()Di2015NewLine        .Return(null) Di2015NewLineDi2015NewLine        //*****The return value is replaced in the next line!Di2015NewLine        .WhenCalled(invocation => invocation.ReturnValue = new MemoryStream());Di2015NewLineDi2015NewLine    var result1 = mockFileSystem.CreateFileStream(null, FileMode.Append, FileAccess.Write, FileShare.None);Di2015NewLine    var result2 = mockFileSystem.CreateFileStream(null, FileMode.Append, FileAccess.Write, FileShare.None);Di2015NewLine    Assert.AreNotSame(result1, result2);Di2015NewLine}Di2015NewLine
527682Di2015UniqueSeparatorpublic string LoadConfig()Di2015NewLine{Di2015NewLine   string configPath = Server.MapPath(this.Context.Request.FilePath + ".xml");Di2015NewLine   using (XmlReader reader = XmlReader.Create(configPath))Di2015NewLine   {Di2015NewLine      // Will read Service1.asmx.xml, Service2.asmx.xml and so onDi2015NewLine   }Di2015NewLine}Di2015NewLine
527689Di2015UniqueSeparatorMessage
527734Di2015UniqueSeparatorGetOriginalEntityState 
527734Di2015UniqueSeparator        Customer cust = new Customer();Di2015NewLine        Customer orig = ctx.Customers.GetOriginalEntityState(cust);Di2015NewLine        Assert.IsNull(orig);Di2015NewLineDi2015NewLine        cust = new Customer();Di2015NewLine        ctx.Customers.Attach(cust);Di2015NewLine        orig = ctx.Customers.GetOriginalEntityState(cust);Di2015NewLine        Assert.IsNotNull(orig);Di2015NewLine        Assert.AreNotSame(cust,orig);Di2015NewLine
527734Di2015UniqueSeparatorGetOriginalEntityState
527778Di2015UniqueSeparatorpublic void ProcessItems<T>(Item<T>[] items) {Di2015NewLine  foreach(Item<T> item in items)Di2015NewLine    item.DoSomething();Di2015NewLine}Di2015NewLine
527778Di2015UniqueSeparatorItem<int> items = new Item<int>(); // And then populate...Di2015NewLineprocessor.ProcessItems(items);Di2015NewLine
527837Di2015UniqueSeparatorvar res = from c in customers Di2015NewLine          where !orders.Select(o => o.CustomerID).Contains(c.CustomerID)Di2015NewLine          select c;Di2015NewLine
527837Di2015UniqueSeparatorvar res = from c in customersDi2015NewLine          join o in orders Di2015NewLine               on c.CustomerID equals o.customerID Di2015NewLine               into customerOrdersDi2015NewLine          where customerOrders.Count() == 0Di2015NewLine          select c;Di2015NewLine
527854Di2015UniqueSeparatorIHTMLCaret
527854Di2015UniqueSeparatorIMarkupPointer
527873Di2015UniqueSeparatorvar gcd = GCD(A, B);Di2015NewLinereturn string.Format("{0}:{1}", A / gcd, B / gcd)Di2015NewLine
527873Di2015UniqueSeparatorstatic int GCD(int a, int b) {Di2015NewLine    return b == 0 ? a : GCD(b, a % b);Di2015NewLine}Di2015NewLine
527916Di2015UniqueSeparatorIXmlSerializable
527916Di2015UniqueSeparatorvirtual
527916Di2015UniqueSeparatorprotected virtual
527916Di2015UniqueSeparatorXmlSerializer
527916Di2015UniqueSeparatorIXmlSerializable
527965Di2015UniqueSeparatorsomeControl
528041Di2015UniqueSeparatorout
528041Di2015UniqueSeparatorout
528041Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Runtime.CompilerServices;Di2015NewLineDi2015NewLinestruct BigStructDi2015NewLine{Di2015NewLine    public Guid guid1, guid2, guid3, guid4;Di2015NewLine    public decimal dec1, dec2, dec3, dec4;Di2015NewLine}Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    const int Iterations = 100000000;Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        decimal total = 0m;Di2015NewLine        // JIT firstDi2015NewLine        ReturnValue();Di2015NewLine        BigStruct tmp;Di2015NewLine        OutParameter(out tmp);Di2015NewLineDi2015NewLine        Stopwatch sw = Stopwatch.StartNew();Di2015NewLine        for (int i=0; i < Iterations; i++)Di2015NewLine        {Di2015NewLine            BigStruct bs = ReturnValue();Di2015NewLine            total += bs.dec1;Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        Console.WriteLine("Using return value: {0}",Di2015NewLine                          sw.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        sw = Stopwatch.StartNew();Di2015NewLine        for (int i=0; i < Iterations; i++)Di2015NewLine        {Di2015NewLine            BigStruct bs;Di2015NewLine            OutParameter(out bs);Di2015NewLine            total += bs.dec1;Di2015NewLine        }Di2015NewLine        Console.WriteLine("Using out parameter: {0}",Di2015NewLine                          sw.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLineDi2015NewLine    [MethodImpl(MethodImplOptions.NoInlining)]Di2015NewLine    public static BigStruct ReturnValue()Di2015NewLine    {Di2015NewLine        return new BigStruct();Di2015NewLine    }Di2015NewLineDi2015NewLine    [MethodImpl(MethodImplOptions.NoInlining)]Di2015NewLine    public static void OutParameter(out BigStruct x)Di2015NewLine    {Di2015NewLine        x = new BigStruct();Di2015NewLine    }Di2015NewLine}Di2015NewLine
528041Di2015UniqueSeparatorUsing return value: 11316Di2015NewLineUsing out parameter: 7461Di2015NewLine
528192Di2015UniqueSeparator        char[] OriginalChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".ToCharArray();Di2015NewLine        char[] ScrambleChars = "9setybcpqwiuvxr108daj5'-`~!@#$%^&()+|}][{:.?/<>,;ZWQ2@#34KDART".ToCharArray();Di2015NewLine        string TextToTransfer = "Hello";Di2015NewLine        string NewText = "";Di2015NewLine        foreach (char c in TextToTransfer)Di2015NewLine        {Di2015NewLine            NewText = NewText + ScrambleChars[Array.IndexOf<char>(OriginalChars, c)].ToString();Di2015NewLine        }Di2015NewLine        Console.WriteLine(NewText);Di2015NewLine
528192Di2015UniqueSeparator    Dim OriginalChars() As Char = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"Di2015NewLine    Dim ScrambleChars() As Char = "9setybcpqwiuvxr108daj5'-`~!@#$%^&()+|}][{:.?/<>,;ZWQ2@#34KDART"Di2015NewLine    Dim TextToTransfer As String = "Hello"Di2015NewLine    Dim NewText As String = ""Di2015NewLine    For Each c As Char In TextToTransferDi2015NewLine        NewText += ScrambleChars(Array.IndexOf(OriginalChars, c))Di2015NewLine    NextDi2015NewLine    MsgBox(NewText)Di2015NewLine
528254Di2015UniqueSeparatorAdvise
528254Di2015UniqueSeparatorUnadvise
528380Di2015UniqueSeparatorCompare
528380Di2015UniqueSeparatorif ((expiryDate - DateTime.Now).TotalDays < 30)Di2015NewLine    matchFound = true;Di2015NewLine
528380Di2015UniqueSeparatorDateTime
528380Di2015UniqueSeparatorTimeSpan
528380Di2015UniqueSeparatorTotalDays
528380Di2015UniqueSeparatormatchFound = (expiryDate - DateTime.Now).TotalDays < 30;Di2015NewLine
528380Di2015UniqueSeparatorif
528411Di2015UniqueSeparatorGetEnumerator()
528411Di2015UniqueSeparatorMoveNext()
528411Di2015UniqueSeparatorIEnumerable<TTo>
528443Di2015UniqueSeparator<asp:UpdateProgress ID="UpdateProgress1" runat="server" AssociatedUpdatePanelID="updPanel1" DisplayAfter="0">Di2015NewLine    <ProgressTemplate>Di2015NewLine        <img alt="Please Wait" src="Images/processing.gif" />Di2015NewLine    </ProgressTemplate>Di2015NewLine</asp:UpdateProgress>Di2015NewLine
528457Di2015UniqueSeparatorSingle
528457Di2015UniqueSeparatorT
528457Di2015UniqueSeparatorIQueryable<T>
528457Di2015UniqueSeparatorIEnumerable<T>
528457Di2015UniqueSeparatorpublic Image Find(Func<Image, bool> predicate)Di2015NewLine{Di2015NewLine    return dictionary.Values.Single(predicate);Di2015NewLine}Di2015NewLine
528457Di2015UniqueSeparatorWhere
528457Di2015UniqueSeparatorstatic class DictionaryExtensionsDi2015NewLine{Di2015NewLine    public static TValue FindSingle<TKey, TValue>(Di2015NewLine        this IDictionary<TKey, TValue> dictionary,Di2015NewLine        Func<TValue, bool> predicate)Di2015NewLine    {Di2015NewLine        return dictionary.Values.Single(predicate);Di2015NewLine    }Di2015NewLine    public static IEnumerable<TValue> Find<TKey, TValue>(Di2015NewLine        this IDictionary<TKey, TValue> dictionary,Di2015NewLine        Func<TValue, bool> predicate)Di2015NewLine    {Di2015NewLine        return dictionary.Values.Where(predicate);Di2015NewLine    }Di2015NewLine}Di2015NewLine
528482Di2015UniqueSeparatorResponse.Redirect("page2.aspx",false);Di2015NewLineHttpContext.Current.ApplicationInstance.CompleteRequest();Di2015NewLine
528509Di2015UniqueSeparator        using(SqlConnection conn = new SqlConnection(CONN_STRING))Di2015NewLine        using(SqlCommand cmd = conn.CreateCommand())Di2015NewLine        {Di2015NewLine            cmd.CommandText = "SELECT @@DBTS";Di2015NewLine            cmd.CommandType = CommandType.Text;Di2015NewLine            conn.Open();Di2015NewLine            byte[] ts = (byte[]) cmd.ExecuteScalar();Di2015NewLine            foreach (byte b in ts)Di2015NewLine            {Di2015NewLine                Console.Write(b.ToString("X2"));Di2015NewLine            }Di2015NewLine            Console.WriteLine();Di2015NewLine        }Di2015NewLine
528712Di2015UniqueSeparatorpublic class EmployeeDi2015NewLine{Di2015NewLine    private int id;Di2015NewLine    private string name;Di2015NewLine    private DateTime dateOfBirth;Di2015NewLine    public int ID { get {return id;} set {id = value;} }Di2015NewLine    public string Name { get {return name;} set {name = value;} }Di2015NewLine    public DateTime DateOfBirth { get {return dateOfBirth;}Di2015NewLine         set {dateOfBirth = value;} }Di2015NewLine}Di2015NewLine
528712Di2015UniqueSeparatorISerializable
528712Di2015UniqueSeparatorISerializable
528712Di2015UniqueSeparatorBinaryFormatter
528712Di2015UniqueSeparatorBinaryFormatter
528712Di2015UniqueSeparator[Serializable, ProtoContract]Di2015NewLinepublic sealed class ProtoFragment : ISerializableDi2015NewLine{Di2015NewLine    [ProtoMember(1, DataFormat=DataFormat.TwosComplement)]Di2015NewLine    public int Foo { get; set; }Di2015NewLine    [ProtoMember(2)]Di2015NewLine    public float Bar { get; set; }Di2015NewLineDi2015NewLine    public ProtoFragment() { }Di2015NewLine    private ProtoFragment(Di2015NewLine        SerializationInfo info, StreamingContext context)Di2015NewLine    {Di2015NewLine        Serializer.Merge(info, this);Di2015NewLine    }Di2015NewLine    void  ISerializable.GetObjectData(Di2015NewLine        SerializationInfo info, StreamingContext context)Di2015NewLine    {Di2015NewLine        Serializer.Serialize(info, this);Di2015NewLine    }Di2015NewLine}Di2015NewLine
528712Di2015UniqueSeparatorISerializable
528712Di2015UniqueSeparator[ProtoMember(...)]
528743Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Data;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing DocumentFormat.OpenXml;Di2015NewLineusing DocumentFormat.OpenXml.Packaging;Di2015NewLineusing DocumentFormat.OpenXml.Spreadsheet;Di2015NewLineusing System.Xml;Di2015NewLineusing System.IO;Di2015NewLineusing System.Diagnostics;Di2015NewLineDi2015NewLinenamespace OpenXMLWindowsAppDi2015NewLine{Di2015NewLine    public class OpenXMLWindowsAppDi2015NewLine    {Di2015NewLine        public void UpdateSheet()Di2015NewLine        {Di2015NewLine            UpdateCell("Chart.xlsx", "20", 2, "B");Di2015NewLine            UpdateCell("Chart.xlsx", "80", 3, "B");Di2015NewLine            UpdateCell("Chart.xlsx", "80", 2, "C");Di2015NewLine            UpdateCell("Chart.xlsx", "20", 3, "C");Di2015NewLineDi2015NewLine            ProcessStartInfo startInfo = new ProcessStartInfo("Chart.xlsx");Di2015NewLine            startInfo.WindowStyle = ProcessWindowStyle.Normal;Di2015NewLine            Process.Start(startInfo);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void UpdateCell(string docName, string text,Di2015NewLine            uint rowIndex, string columnName)Di2015NewLine        {Di2015NewLine            // Open the document for editing.Di2015NewLine            using (SpreadsheetDocument spreadSheet = Di2015NewLine                     SpreadsheetDocument.Open(docName, true))Di2015NewLine            {Di2015NewLine                WorksheetPart worksheetPart = Di2015NewLine                      GetWorksheetPartByName(spreadSheet, "Sheet1");Di2015NewLineDi2015NewLine                if (worksheetPart != null)Di2015NewLine                {Di2015NewLine                    Cell cell = GetCell(worksheetPart.Worksheet, Di2015NewLine                                             columnName, rowIndex);Di2015NewLineDi2015NewLine                    cell.CellValue = new CellValue(text);Di2015NewLine                    cell.DataType = Di2015NewLine                        new EnumValue<CellValues>(CellValues.Number);Di2015NewLineDi2015NewLine                    // Save the worksheet.Di2015NewLine                    worksheetPart.Worksheet.Save();Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        private static WorksheetPart Di2015NewLine             GetWorksheetPartByName(SpreadsheetDocument document, Di2015NewLine             string sheetName)Di2015NewLine        {Di2015NewLine            IEnumerable<Sheet> sheets =Di2015NewLine               document.WorkbookPart.Workbook.GetFirstChild<Sheets>().Di2015NewLine               Elements<Sheet>().Where(s => s.Name == sheetName);Di2015NewLineDi2015NewLine            if (sheets.Count() == 0)Di2015NewLine            {Di2015NewLine                // The specified worksheet does not exist.Di2015NewLineDi2015NewLine                return null;Di2015NewLine            }Di2015NewLineDi2015NewLine            string relationshipId = sheets.First().Id.Value;Di2015NewLine            WorksheetPart worksheetPart = (WorksheetPart)Di2015NewLine                 document.WorkbookPart.GetPartById(relationshipId);Di2015NewLine            return worksheetPart;Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        // Given a worksheet, a column name, and a row index, Di2015NewLine        // gets the cell at the specified column and Di2015NewLine        private static Cell GetCell(Worksheet worksheet, Di2015NewLine                  string columnName, uint rowIndex)Di2015NewLine        {Di2015NewLine            Row row = GetRow(worksheet, rowIndex);Di2015NewLineDi2015NewLine            if (row == null)Di2015NewLine                return null;Di2015NewLineDi2015NewLine            return row.Elements<Cell>().Where(c => string.CompareDi2015NewLine                   (c.CellReference.Value, columnName + Di2015NewLine                   rowIndex, true) == 0).First();Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        // Given a worksheet and a row index, return the row.Di2015NewLine        private static Row GetRow(Worksheet worksheet, uint rowIndex)Di2015NewLine        {Di2015NewLine            return worksheet.GetFirstChild<SheetData>().Di2015NewLine              Elements<Row>().Where(r => r.RowIndex == rowIndex).First();Di2015NewLine        } Di2015NewLine    }Di2015NewLine}Di2015NewLine
528892Di2015UniqueSeparator/(?<!-)-myString/Di2015NewLine
529028Di2015UniqueSeparatorif ( myCollection.Count > 0 ) {Di2015NewLine  var x = myCollection[0];Di2015NewLine}Di2015NewLine
529134Di2015UniqueSeparatorclass D : I<int>, I<string> { }Di2015NewLine//Di2015NewLinefunction<D, int>(new D());Di2015NewLinefunction<D, string>(new D());Di2015NewLine//is R int or string?Di2015NewLinefunction(new D());Di2015NewLine
529213Di2015UniqueSeparatorFunc<XElement, bool> simpleXmlFunction =Di2015NewLine     new Func<XElement, bool>(b => int.Parse(b.Element("FooId").Value) == 12);Di2015NewLine
529434Di2015UniqueSeparator    public int SelectedTabIndex Di2015NewLine    {Di2015NewLine        setDi2015NewLine        {Di2015NewLine            Type pgType = typeof(PropertyGrid);Di2015NewLine            BindingFlags flags = BindingFlags.NonPublic | BindingFlags.Instance;Di2015NewLineDi2015NewLine            ToolStripButton[] buttons = (ToolStripButton[]) pgType.GetField("viewTabButtons", flags).GetValue(this);Di2015NewLine            pgType.GetMethod("SelectViewTabButton", flags).Invoke(this, new object[] { buttons[value], true });Di2015NewLine        }Di2015NewLine    }Di2015NewLine
529467Di2015UniqueSeparatortblDeviceDataTable dtService = new tblDeviceDataTable();Di2015NewLinedtService.tblLocationID.AllowDbNull = true;Di2015NewLinetaDevice.FillDataByDeviceSN(dtService,txtDeviceSerial.Text);Di2015NewLine
529531Di2015UniqueSeparatorpartial void OnCreated
529659Di2015UniqueSeparatorIAuthorizationPolicy
529659Di2015UniqueSeparatorEvaluate
529659Di2015UniqueSeparatorbool IAuthorizationPolicy.Evaluate(Di2015NewLine    EvaluationContext evaluationContext, ref object state)Di2015NewLine{           Di2015NewLine    IList<IIdentity> idents;Di2015NewLine    object identsObject;Di2015NewLine    if (evaluationContext.Properties.TryGetValue(Di2015NewLine        "Identities", out identsObject) && (idents =Di2015NewLine        identsObject as IList<IIdentity>) != null)Di2015NewLine    {Di2015NewLine        foreach (IIdentity ident in idents)Di2015NewLine        {Di2015NewLine            if (ident.IsAuthenticated &&Di2015NewLine                ident.AuthenticationType == TrustedAuthType)Di2015NewLine            {                           Di2015NewLine                evaluationContext.Properties["Principal"]Di2015NewLine                    = //TODO our principalDi2015NewLine                return true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if (!evaluationContext.Properties.ContainsKey("Principal"))Di2015NewLine    {Di2015NewLine        evaluationContext.Properties["Principal"] = //TODO anonDi2015NewLine    }                Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
529659Di2015UniqueSeparatorTrustedAuthType
529671Di2015UniqueSeparatorHttpValueCollection
529671Di2015UniqueSeparatorQueryString
529671Di2015UniqueSeparatorHttpValueCollection
529671Di2015UniqueSeparatorNameValueCollection
529671Di2015UniqueSeparatorToString()
529690Di2015UniqueSeparator///
529690Di2015UniqueSeparator'''
529717Di2015UniqueSeparator<xsl:stylesheet version="1.0"Di2015NewLine    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"Di2015NewLine    xmlns:msxsl="urn:schemas-microsoft-com:xslt"Di2015NewLine    exclude-result-prefixes="xsl msxsl">Di2015NewLineDi2015NewLine    <xsl:output method="html" indent="no" omit-xml-declaration="yes"/>Di2015NewLineDi2015NewLine    <!-- lots -->Di2015NewLine</xsl:stylesheet>Di2015NewLine
529717Di2015UniqueSeparatorTextWriter
529717Di2015UniqueSeparatorStream
529717Di2015UniqueSeparatorXmlWriter
529717Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLineusing (XmlReader reader = XmlReader.Create(source)Di2015NewLineusing (TextWriter writer = new StringWriter(sb))Di2015NewLine{Di2015NewLine    XslCompiledTransform xslt = new XslCompiledTransform();Di2015NewLine    xslt.Load("Foo.xslt"); // in reality, you'd want to cache thisDi2015NewLine    xslt.Transform(reader, options.XsltOptions, writer);Di2015NewLine}Di2015NewLinestring html = sb.ToString();Di2015NewLine
529717Di2015UniqueSeparator<
529717Di2015UniqueSeparator>
529717Di2015UniqueSeparator<xsl:text disable-output-escaping="yes">Di2015NewLine    Your malformed text hereDi2015NewLine</xsl:text>Di2015NewLine
529773Di2015UniqueSeparatorPL/SQL Developer
529773Di2015UniqueSeparatorC#
529773Di2015UniqueSeparatorOracleParameter bid = new OracleParameter("bookmarkID", OracleDbType.Number);Di2015NewLinebid.Direction = ParameterDirection.Output;Di2015NewLinecommand.Parameters.Add(bid);Di2015NewLine
529773Di2015UniqueSeparatorFUNCTION procGet_Bookmark_Id RETURN INTEGERDi2015NewLineISDi2015NewLine  res INTEGER;Di2015NewLineBEGINDi2015NewLine  SELECT seq_bookmarks.nextvalDi2015NewLine  INTO resDi2015NewLine  FROM dual;Di2015NewLine  RETURN res;Di2015NewLineEND procGet_Bookmark_Id;Di2015NewLine
529773Di2015UniqueSeparatorSELECT
529773Di2015UniqueSeparatorSELECT bookmarks.procGet_Bookmark_id FROM dual;Di2015NewLine
529828Di2015UniqueSeparatorLibraryDi2015NewLineConsoleAppDi2015NewLine
529828Di2015UniqueSeparatorLibraryDi2015NewLine    app.configDi2015NewLineConsoleAppDi2015NewLine    ConsoleApp.exe.configDi2015NewLine
529828Di2015UniqueSeparatorConsoleApp
529828Di2015UniqueSeparatorapp.config
529828Di2015UniqueSeparatorLibrary
529828Di2015UniqueSeparatorConsoleApp.exe.config
529828Di2015UniqueSeparatorLibrary
529828Di2015UniqueSeparatorLibrary
529828Di2015UniqueSeparatorConsoleApp
529828Di2015UniqueSeparatorapp.config
529828Di2015UniqueSeparatorConsoleApp.exe.config
529828Di2015UniqueSeparatorLibrary
529828Di2015UniqueSeparatorLibrary
529829Di2015UniqueSeparatorref
529847Di2015UniqueSeparatorif( !item456.BelongsTo(user123) )Di2015NewLine{Di2015NewLine  // Either show them one of their items or a show an error message.Di2015NewLine}Di2015NewLine
529872Di2015UniqueSeparator        List<int> y = new List<int>() { 1, 2, 3, 4 };Di2015NewLine        var x = y.Select(a =>Di2015NewLine            {Di2015NewLine                int b = a + 1;Di2015NewLine                int c = a + 2;Di2015NewLine                int d = b / c;Di2015NewLine                return new { b = b, c = c, d = d };Di2015NewLine            });Di2015NewLine
529888Di2015UniqueSeparator<asp:DropDownList runat="server" Di2015NewLine                  id="ddl"Di2015NewLine                  OnSelectedIndexChanged="SelectionChanged"Di2015NewLine                  AutoPostBack="true">Di2015NewLine    <asp:ListItem Text="Page 1" Value="/page1.aspx" />Di2015NewLine    <asp:ListItem Text="Page 2" Value="/page2.aspx" />Di2015NewLine</asp:DropDownList>Di2015NewLine
529888Di2015UniqueSeparatorprotected void SelectionChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Response.Redirect(((DropDownList)sender).SelectedValue);Di2015NewLine}Di2015NewLine
529894Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Collections.Specialized;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Net;Di2015NewLineusing System.Net.Sockets;Di2015NewLineusing System.Net.Security;Di2015NewLineusing System.Web;Di2015NewLineusing System.Web.Handlers;Di2015NewLineusing System.IO;Di2015NewLineusing System.Security.Cryptography;Di2015NewLineusing System.Security.Cryptography.X509Certificates;Di2015NewLineDi2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        public static string API_KEY = "YOUR_API_KEY_GOES_HERE! INCLUDE DASHES!";Di2015NewLine        public static string SECRET_ACCESS_KEY = "YOUR_SECRET_KEY_GOES_HERE!";Di2015NewLineDi2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Console.WriteLine("BLAST - \\r\\n\\r\\n");Di2015NewLine            BlastTcpPost();Di2015NewLineDi2015NewLine            Console.WriteLine("SEND - \\r\\n\\r\\n");Di2015NewLine            SendTcpPost();Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Send a BLAST to all users in your ZEEP account.Di2015NewLine        /// </summary>Di2015NewLine        public static void BlastTcpPost()Di2015NewLine        {Di2015NewLine            SendSMS(Di2015NewLine                "https://api.zeepmobile.com/messaging/2008-07-14/blast_message",    // URL for Send_Message Di2015NewLine                "You are on blast",                                                 // Message to sendDi2015NewLine                string.Empty                                                        // No UserId to send.Di2015NewLine                );Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Send a single message to a user in your ZEEP account.Di2015NewLine        /// </summary>Di2015NewLine        public static void SendTcpPost()Di2015NewLine        {Di2015NewLine            // Note:- 22 I use for the UserId is just a user I have signed up. Yours may be different and you Di2015NewLine            // might want to pass that in as a parameter.Di2015NewLineDi2015NewLine            SendSMS(Di2015NewLine                "https://api.zeepmobile.com/messaging/2008-07-14/send_message",     // URL for Send_MessageDi2015NewLine                "You are a user...good job!",                                       // Message to sendDi2015NewLine                "22"                                                                // User Id in your system.Di2015NewLine                );Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Uses a TCPClient and SSLStream to perform a POST.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="requestUrl">URL that the POST must be directed to.</param>Di2015NewLine        /// <param name="body">Message that is to be sent.</param>Di2015NewLine        /// <param name="user">UserId in your Zeep System. Only required if your sending a Single Message to a User. Di2015NewLine        /// Otherwise, just send a string.Empty.</param>Di2015NewLine        /// <returns>Response from the server. (although it will write the response to console)</returns>Di2015NewLine        public static string SendSMS(string requestUrl, string body, string user)Di2015NewLine        {Di2015NewLine            string parameters = "";Di2015NewLine            string requestHeaders = "";Di2015NewLine            string responseData = "";Di2015NewLineDi2015NewLine            // FORMAT must be Sun, 06 Nov 1994 08:49:37 GMTDi2015NewLine            string http_date = DateTime.UtcNow.ToString("r");Di2015NewLineDi2015NewLine            // Clean the text to sendDi2015NewLine            body = HttpUtility.UrlEncode(body, System.Text.Encoding.UTF8);Di2015NewLineDi2015NewLine            if (user.Length > 0) parameters += "user_id=" + user + "&";Di2015NewLine            if (body.Length > 0) parameters += "body=" + body;Di2015NewLineDi2015NewLineDi2015NewLine            // String that will be converted into a signature.Di2015NewLine            string canonicalString = API_KEY + http_date + parameters;Di2015NewLineDi2015NewLineDi2015NewLine            //------------START HASH COMPUTATION---------------------Di2015NewLine            // Compute the Base64 HMACSHA1 valueDi2015NewLine            HMACSHA1 hmacsha1 = new HMACSHA1(SECRET_ACCESS_KEY.ToByteArray());Di2015NewLineDi2015NewLine            // Compute the hash of the input file.Di2015NewLine            byte[] hashValue = hmacsha1.ComputeHash(canonicalString.ToByteArray());Di2015NewLineDi2015NewLine            String b64Mac = hashValue.ToBase64String();Di2015NewLine            String authentication = String.Format("Zeep {0}:{1}", API_KEY, b64Mac);Di2015NewLine            //-----------END HASH COMPUTATION------------------------Di2015NewLineDi2015NewLineDi2015NewLine            string auth = String.Format("Zeep {0}:{1}", API_KEY, b64Mac);Di2015NewLineDi2015NewLineDi2015NewLine            System.Uri uri = new Uri(requestUrl);Di2015NewLine            System.Net.Sockets.TcpClient client = new System.Net.Sockets.TcpClient(uri.Host, uri.Port);Di2015NewLine            string requestMethod = "POST " + uri.LocalPath + " HTTP/1.1\\r\\n";Di2015NewLineDi2015NewLine            // Set Headers for the POST messageDi2015NewLine            requestHeaders += "Host: api.zeepmobile.com\\r\\n";Di2015NewLine            requestHeaders += "Authorization: " + auth + "\\r\\n";Di2015NewLine            requestHeaders += "Date: " + DateTime.UtcNow.ToString("r") + "\\r\\n";Di2015NewLine            requestHeaders += "Content-Type: application/x-www-form-urlencoded\\r\\n";Di2015NewLine            requestHeaders += "Content-Length: " + parameters.ToByteArray().Length + "\\r\\n";Di2015NewLine            requestHeaders += "\\r\\n";Di2015NewLineDi2015NewLineDi2015NewLine            // Get the data to be sent as a byte array.Di2015NewLine            Byte[] data = System.Text.Encoding.UTF8.GetBytes(requestMethod + requestHeaders + parameters + "\\r\\n");Di2015NewLine            // Send the message to the connected TcpServer.Di2015NewLine            NetworkStream stream = client.GetStream();Di2015NewLineDi2015NewLineDi2015NewLine            // SSL Authentication is used because the Server requires https.Di2015NewLine            System.Net.Security.SslStream sslStream = new System.Net.Security.SslStream(Di2015NewLine                stream,Di2015NewLine                false,Di2015NewLine                new System.Net.Security.RemoteCertificateValidationCallback(ValidateServerCertificate));Di2015NewLine            sslStream.AuthenticateAsClient(uri.Host);Di2015NewLineDi2015NewLine            // Send the data over the SSL stream.Di2015NewLine            sslStream.Write(data, 0, data.Length);Di2015NewLine            sslStream.Flush();Di2015NewLineDi2015NewLineDi2015NewLine            // Receive the TcpServer.response.Di2015NewLine            for (int i = 0; i < 100; i++)Di2015NewLine            {Di2015NewLine                if (stream.DataAvailable)Di2015NewLine                {Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                System.Threading.Thread.Sleep(100);Di2015NewLine            }Di2015NewLineDi2015NewLine            Byte[] bytes = new byte[1024];Di2015NewLine            System.Text.StringBuilder sb = new System.Text.StringBuilder();Di2015NewLine            while (stream.DataAvailable)Di2015NewLine            {Di2015NewLine                int count = sslStream.Read(bytes, 0, 1024);Di2015NewLine                if (count == 0)Di2015NewLine                {Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                sb.Append(System.Text.Encoding.UTF8.GetString(bytes, 0, count));Di2015NewLine            }Di2015NewLineDi2015NewLine            responseData = sb.ToString();Di2015NewLine            Console.WriteLine(responseData);Di2015NewLine            // Close everything.Di2015NewLine            client.Close();Di2015NewLineDi2015NewLine            return responseData;Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        // The following method is invoked by the RemoteCertificateValidationDelegate.Di2015NewLine        // We want to make sure the SSL has no Policy errors and is safe.Di2015NewLine        public static bool ValidateServerCertificate(Di2015NewLine              object sender,Di2015NewLine              X509Certificate certificate,Di2015NewLine              X509Chain chain,Di2015NewLine              SslPolicyErrors sslPolicyErrors)Di2015NewLine        {Di2015NewLine            // Somehow the cert always has PolicyErrors so I am returning true regardless.Di2015NewLine            return true;Di2015NewLine            //if (sslPolicyErrors == SslPolicyErrors.None)Di2015NewLine            //    return true;Di2015NewLineDi2015NewLine            //Console.WriteLine("Certificate error: {0}", sslPolicyErrors);Di2015NewLineDi2015NewLine            //// Do not allow this client to communicate with unauthenticated servers.Di2015NewLine            //return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class ExtensionsDi2015NewLine    {Di2015NewLine        public static byte[] ToByteArray(this string input)Di2015NewLine        {Di2015NewLine            UTF8Encoding encoding = new UTF8Encoding();Di2015NewLine            return encoding.GetBytes(input);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static string ToBase64String(this byte[] input)Di2015NewLine        {Di2015NewLine            return Convert.ToBase64String(input);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
529895Di2015UniqueSeparatorWHERE
529895Di2015UniqueSeparatorID
529895Di2015UniqueSeparatorTOP 50
529925Di2015UniqueSeparatorrtb.Rtf = Regex.Replace(rtb.Rtf, @"\\\\'02\\s*(.*?)\\s*\\\\'02", @"\\b $1 \\b0");Di2015NewLine
529925Di2015UniqueSeparatorrtb.Rtf = Regex.Replace(rtb.Rtf, @"\\\\'02\\s*(.*?)\\s*\\\\'02", @"\\'02 \\b $1 \\b0 \\'02");Di2015NewLine
529959Di2015UniqueSeparatorif (!(sender is TextBox)) {...}Di2015NewLine
530118Di2015UniqueSeparatorif((value & mask) == mask) {...}Di2015NewLine
530118Di2015UniqueSeparatorif((value & mask) != 0) {...}Di2015NewLine
530118Di2015UniqueSeparatorif ((value & mask) == 0) { }Di2015NewLine
530194Di2015UniqueSeparator    private string cvstrEmptyText = "";Di2015NewLine    [Category("Custom")]Di2015NewLine    [Description("Displays a message in the DataGridView when no records are displayed in it.")]Di2015NewLine    [DefaultValue(typeof(string), "")]Di2015NewLine    public string EmptyTextDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return this.cvstrEmptyText;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            this.cvstrEmptyText = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
530194Di2015UniqueSeparator    protected override void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds)Di2015NewLine    {Di2015NewLine        RectangleF ef;Di2015NewLine        base.PaintBackground(graphics, clipBounds, gridBounds);Di2015NewLine        if ((this.Enabled && (this.RowCount == 0)) && (this.EmptyText.Length > 0))Di2015NewLine        {Di2015NewLine            string emptyText = this.EmptyText;Di2015NewLine            ef = new RectangleF(4f, (float)(this.ColumnHeadersHeight + 4), (float)(this.Width - 8), (float)((this.Height - this.ColumnHeadersHeight) - 8));Di2015NewLine            graphics.DrawString(emptyText, this.Font, Brushes.LightGray, ef);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
530212Di2015UniqueSeparatorOnParentChanged
530212Di2015UniqueSeparatorDesignMode
530228Di2015UniqueSeparatorclass SizeQueue<T>Di2015NewLine{Di2015NewLine    private readonly Queue<T> queue = new Queue<T>();Di2015NewLine    private readonly int maxSize;Di2015NewLine    public SizeQueue(int maxSize) { this.maxSize = maxSize; }Di2015NewLineDi2015NewLine    public void Enqueue(T item)Di2015NewLine    {Di2015NewLine        lock (queue)Di2015NewLine        {Di2015NewLine            while (queue.Count >= maxSize)Di2015NewLine            {Di2015NewLine                Monitor.Wait(queue);Di2015NewLine            }Di2015NewLine            queue.Enqueue(item);Di2015NewLine            if (queue.Count == 1)Di2015NewLine            {Di2015NewLine                // wake up any blocked dequeueDi2015NewLine                Monitor.PulseAll(queue);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public T Dequeue()Di2015NewLine    {Di2015NewLine        lock (queue)Di2015NewLine        {Di2015NewLine            while (queue.Count == 0)Di2015NewLine            {Di2015NewLine                Monitor.Wait(queue);Di2015NewLine            }Di2015NewLine            T item = queue.Dequeue();Di2015NewLine            if (queue.Count == maxSize - 1)Di2015NewLine            {Di2015NewLine                // wake up any blocked enqueueDi2015NewLine                Monitor.PulseAll(queue);Di2015NewLine            }Di2015NewLine            return item;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
530228Di2015UniqueSeparatorbool closing;Di2015NewLinepublic void Close()Di2015NewLine{Di2015NewLine    lock(queue)Di2015NewLine    {Di2015NewLine        closing = true;Di2015NewLine        Monitor.PulseAll(queue);Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic bool TryDequeue(out T value)Di2015NewLine{Di2015NewLine    lock (queue)Di2015NewLine    {Di2015NewLine        while (queue.Count == 0)Di2015NewLine        {Di2015NewLine            if (closing)Di2015NewLine            {Di2015NewLine                value = default(T);Di2015NewLine                return false;Di2015NewLine            }Di2015NewLine            Monitor.Wait(queue);Di2015NewLine        }Di2015NewLine        value = queue.Dequeue();Di2015NewLine        if (queue.Count == maxSize - 1)Di2015NewLine        {Di2015NewLine            // wake up any blocked enqueueDi2015NewLine            Monitor.PulseAll(queue);Di2015NewLine        }Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
530258Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection("Connection String Goes Here"))Di2015NewLine{Di2015NewLine    conn.Open();Di2015NewLine    using (SqlCommand comm = new SqlCommand("SELECT * FROM TABLE", conn))Di2015NewLine    {Di2015NewLine        return command.ExecuteScalar() as string;Di2015NewLine    }Di2015NewLine}Di2015NewLine
530258Di2015UniqueSeparatorusing System.Data;Di2015NewLineusing System.Data.SqlClient;Di2015NewLine
530299Di2015UniqueSeparatorFirstValue
530299Di2015UniqueSeparatorTwo
530299Di2015UniqueSeparatorpublic enum Numbers : intDi2015NewLine{Di2015NewLine    One, // defaults to 0Di2015NewLine    Two, // defaults to 1Di2015NewLine    Three, // defaults to 2Di2015NewLine    Four, // defaults to 3Di2015NewLine    FirstValue = 1 // forced to 1Di2015NewLine}Di2015NewLine
530299Di2015UniqueSeparator"two"
530299Di2015UniqueSeparator1
530299Di2015UniqueSeparator"Two"
530299Di2015UniqueSeparator"FirstValue"
530451Di2015UniqueSeparatorClassLibrary
530451Di2015UniqueSeparator.dll
530451Di2015UniqueSeparator.dll
530451Di2015UniqueSeparator/bin/
530517Di2015UniqueSeparatorvar productList = (from p in db.productsDi2015NewLine                   select new {Di2015NewLine                      ProductId = p.ProductID,Di2015NewLine                      Name = p.NameDi2015NewLine                   }).ToList();Di2015NewLineDi2015NewLinecomboBox1.DataSource = productList;Di2015NewLinecomboBox1.DisplayMember = "Name";Di2015NewLinecomboBox1.ValueMember = "ProductId";Di2015NewLinecomboBox1.SelectedValue = 5;Di2015NewLine
530540Di2015UniqueSeparator//            Format string                    {0}           {1}Di2015NewLineString.Format("This {0}.  The value is {1}.",  "is a test",  42 )Di2015NewLine
530540Di2015UniqueSeparator//            Format string              {0} {1}  {2}Di2015NewLineString.Format("Fib: {0}, {0}, {1}, {2}", 1,  1+1, 1+2)Di2015NewLine
530595Di2015UniqueSeparator[ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]Di2015NewLinepublic static void Resize<T>(ref T[] array, int newSize)Di2015NewLine{Di2015NewLine    if (newSize < 0)Di2015NewLine    {Di2015NewLine        throw new ArgumentOutOfRangeException("newSize", Environment.GetResourceString("ArgumentOutOfRange_NeedNonNegNum"));Di2015NewLine    }Di2015NewLine    T[] sourceArray = array;Di2015NewLine    if (sourceArray == null)Di2015NewLine    {Di2015NewLine        array = new T[newSize];Di2015NewLine    }Di2015NewLine    else if (sourceArray.Length != newSize)Di2015NewLine    {Di2015NewLine        T[] destinationArray = new T[newSize];Di2015NewLine        Copy(sourceArray, 0, destinationArray, 0, (sourceArray.Length > newSize) ? newSize : sourceArray.Length);Di2015NewLine        array = destinationArray;Di2015NewLine    }Di2015NewLine}Di2015NewLine
530822Di2015UniqueSeparatorI
530822Di2015UniqueSeparatorMOV EAX, [EBP + I] ; Move pointer to class instance into registerDi2015NewLineMOV EBX, [EAX] ;  Move vtbl pointer into register.Di2015NewLineCALL [EBX + I]  ;   Call functionDi2015NewLine
530822Di2015UniqueSeparatorCALL I  ;  Call function directlyDi2015NewLine
530868Di2015UniqueSeparatorpublic static void tween( FrameworkElement target, object parameters )Di2015NewLine{Di2015NewLine    return tween( target, new ParameterDictionary( parameters ) );Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void tween( FrameworkElement target,Di2015NewLine                          ParameterDictionary values )Di2015NewLine{Di2015NewLine    if (values.ContainsKey( "ease" ))Di2015NewLine    {Di2015NewLine      ....Di2015NewLine    }Di2015NewLine}Di2015NewLine
530868Di2015UniqueSeparatorpublic class ParameterDictionary : Dictionary<string,object>Di2015NewLine{Di2015NewLine    public ParameterDictionary( object parameters )Di2015NewLine    {Di2015NewLine         if (parameters != null)Di2015NewLine         {Di2015NewLine             foreach (PropertyInfo info in parameters.GetType()Di2015NewLine                                                     .GetProperties())Di2015NewLine             {Di2015NewLine                 object value = info.GetValue(parameters,null);Di2015NewLine                 this.Add(info.Name,value);Di2015NewLine             }Di2015NewLine         }Di2015NewLine    }Di2015NewLine}Di2015NewLine
530947Di2015UniqueSeparatorvar total = from T1 in context.T1Di2015NewLine            join T2 in context.T2 on T1.T2ID equals T2.T2IDDi2015NewLine            join T3 in context.T3 on T2.T3ID equals T3.T3IDDi2015NewLine            group T3 by new { T1.Column1, T1.Column2 } into gDi2015NewLine            select new { Di2015NewLine                Column1 = T1.Column1, Di2015NewLine                Column2 = T2.Column2, Di2015NewLine                Amount = g.Sum(t3 => t3.Column1) Di2015NewLine            };Di2015NewLine
531034Di2015UniqueSeparatorentObj.GetType().GetProperty("templateFROM").SetValue(entObj, _sVal, null);Di2015NewLine
531154Di2015UniqueSeparatorQueue
531154Di2015UniqueSeparatorDelegate
531154Di2015UniqueSeparator    Queue<TimerDelegate> eventQueue = new Queue<TimerDelegate>();Di2015NewLineDi2015NewLine    public Vehicle(IVehicle veh, Canvas arena, Dispatcher battleArenaDispatcher)Di2015NewLine    {Di2015NewLine         DispatcherTimer actionTimer = new DispatcherTimer() { Interval = TimeSpan.FromMilliseconds(100) };Di2015NewLine         actionTimer.Tick += new EventHandler(delegate(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (IsActionRunning || eventQueue.Count == 0)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        eventQueue.Dequeue().Invoke(new DispatcherTimer() { Interval = TimeSpan.FromMilliseconds(5) });Di2015NewLine    });Di2015NewLine    actionTimer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void TurnRight(double deg)Di2015NewLine    {Di2015NewLine        eventQueue.Enqueue((TimerDelegate)delegate(DispatcherTimer dt)Di2015NewLine        {Di2015NewLine            IsActionRunning = true;Di2015NewLine            var currAngle = 0;Di2015NewLine            dt.Tick += new EventHandler(delegate(object sender, EventArgs e)Di2015NewLine            {Di2015NewLine                lock (threadLocker)Di2015NewLine                {Di2015NewLine                    if (currAngle >= deg)Di2015NewLine                    {Di2015NewLine                        IsActionRunning = false;Di2015NewLine                        dt.Stop();Di2015NewLine                    }Di2015NewLine                    Rotator_Body.Angle++;Di2015NewLine                    currAngle++;Di2015NewLine                }Di2015NewLine            });Di2015NewLine            dt.Start();Di2015NewLine        });Di2015NewLine    }Di2015NewLine
531166Di2015UniqueSeparatorpublic partial class _Default : AbstractPage, IEmployeeViewDi2015NewLine{Di2015NewLine    private EmployeePresenter presenter;Di2015NewLineDi2015NewLine    private EmployeePresenter PresenterDi2015NewLine    {Di2015NewLine        setDi2015NewLine        {Di2015NewLine            presenter = value;Di2015NewLine            presenter.View = this;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    protected override void Do_Load(object sender, EventArgs args)Di2015NewLine    {Di2015NewLine        //do "on load" stuff Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
531166Di2015UniqueSeparatorpublic abstract class AbstractPage : PageDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        ObjectFactory.BuildUp(this);Di2015NewLine        this.Do_Load(sender,e); Di2015NewLine        //template method, to enable subclasses to mimic "Page_load" eventDi2015NewLineDi2015NewLine    }Di2015NewLine    //Default Implementation (do nothing)Di2015NewLine    protected virtual void Do_Load(object sender, EventArgs e){}Di2015NewLine}Di2015NewLine
531206Di2015UniqueSeparatorusing (ZipFile zip = new ZipFile())Di2015NewLine{Di2015NewLine  zip.AddFile("c:\\\\photos\\\\personal\\\\7440-N49th.png");Di2015NewLine  zip.AddFile("c:\\\\Desktop\\\\2005_Annual_Report.pdf");Di2015NewLine  zip.AddFile("ReadMe.txt");Di2015NewLineDi2015NewLine  zip.Save("Archive.zip");Di2015NewLine}Di2015NewLine
531206Di2015UniqueSeparatorusing (ZipFile zip = ZipFile.Read("ExistingArchive.zip"))Di2015NewLine{Di2015NewLine  // 1. remove an entry, given the nameDi2015NewLine  zip.RemoveEntry("README.txt");Di2015NewLineDi2015NewLine  // 2. Update an existing entry, with content from the filesystemDi2015NewLine  zip.UpdateItem("Portfolio.doc");Di2015NewLineDi2015NewLine  // 3. modify the filename of an existing entry Di2015NewLine  // (rename it and move it to a sub directory)Di2015NewLine  ZipEntry e = zip["Table1.jpg"];Di2015NewLine  e.FileName = "images/Figure1.jpg";Di2015NewLineDi2015NewLine  // 4. insert or modify the comment on the zip archiveDi2015NewLine  zip.Comment = "This zip archive was updated " + System.DateTime.ToString("G"); Di2015NewLineDi2015NewLine  // 5. finally, save the modified archiveDi2015NewLine  zip.Save();Di2015NewLine}Di2015NewLine
531206Di2015UniqueSeparatorusing (ZipFile zip = ZipFile.Read("ExistingZipFile.zip"))Di2015NewLine{Di2015NewLine  foreach (ZipEntry e in zip)Di2015NewLine  {Di2015NewLine    e.Extract(TargetDirectory, true);  // true => overwrite existing filesDi2015NewLine  }Di2015NewLine}Di2015NewLine
531231Di2015UniqueSeparatorList<T>
531231Di2015UniqueSeparatorRemoveAt(0)
531231Di2015UniqueSeparatorQueue
531231Di2015UniqueSeparatorAdd
531231Di2015UniqueSeparatorQueue
531338Di2015UniqueSeparatorstring keyName = @"Software\\Microsoft\\Windows\\CurrentVersion\\Run";Di2015NewLineusing (RegistryKey key = Registry.CurrentUser.OpenSubKey(keyName, true))Di2015NewLine{Di2015NewLine    if (key == null)Di2015NewLine    {Di2015NewLine        // Key doesn't exist. Do whatever you want to handleDi2015NewLine        // this caseDi2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        key.DeleteValue("MyApp");Di2015NewLine    }Di2015NewLine}Di2015NewLine
531338Di2015UniqueSeparatorRegistry.CurrentUser
531338Di2015UniqueSeparatorRegistryKey.OpenSubKey
531338Di2015UniqueSeparatorRegistryKey.DeleteValue
531356Di2015UniqueSeparator// Declare the SetConsoleCtrlHandler functionDi2015NewLine// as external and receiving a delegate.Di2015NewLine[DllImport("Kernel32")]Di2015NewLinepublic static extern bool SetConsoleCtrlHandler(HandlerRoutine Handler, bool Add);Di2015NewLineDi2015NewLine// A delegate type to be used as the handler routineDi2015NewLine// for SetConsoleCtrlHandler.Di2015NewLinepublic delegate bool HandlerRoutine(CtrlTypes CtrlType);Di2015NewLineDi2015NewLine// An enumerated type for the control messagesDi2015NewLine// sent to the handler routine.Di2015NewLinepublic enum CtrlTypesDi2015NewLine{Di2015NewLine    CTRL_C_EVENT = 0,Di2015NewLine    CTRL_BREAK_EVENT,Di2015NewLine    CTRL_CLOSE_EVENT,Di2015NewLine    CTRL_LOGOFF_EVENT = 5,Di2015NewLine    CTRL_SHUTDOWN_EVENTDi2015NewLine}Di2015NewLineDi2015NewLineprivate static bool ConsoleCtrlCheck(CtrlTypes ctrlType)Di2015NewLine{Di2015NewLine    // Put your own handler hereDi2015NewLine    return true;Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineSetConsoleCtrlHandler(new HandlerRoutine(ConsoleCtrlCheck), true);Di2015NewLine
531450Di2015UniqueSeparatorQueue
531450Di2015UniqueSeparatorEnqueue
531450Di2015UniqueSeparatorpublic override void Enqueue(object obj)Di2015NewLine{Di2015NewLine    base.Enqueue(obj);Di2015NewLine    OnChanged(EventArgs.Empty);Di2015NewLine}Di2015NewLine
531450Di2015UniqueSeparatorQueue<T>
531450Di2015UniqueSeparatorclass Foo<T>Di2015NewLine{Di2015NewLine    private readonly Queue<T> queue = new Queue<T>();Di2015NewLine    public event EventHandler Changed;Di2015NewLine    protected virtual void OnChanged()Di2015NewLine    {Di2015NewLine        if (Changed != null) Changed(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLine    public virtual void Enqueue(T item)Di2015NewLine    {Di2015NewLine        queue.Enqueue(item);Di2015NewLine        OnChanged();Di2015NewLine    }Di2015NewLine    public int Count { get { return queue.Count; } }Di2015NewLineDi2015NewLine    public virtual T Dequeue()Di2015NewLine    {Di2015NewLine        T item = queue.Dequeue();Di2015NewLine        OnChanged();Di2015NewLine        return item;        Di2015NewLine    }Di2015NewLine}Di2015NewLine
531507Di2015UniqueSeparator    Student foo = new Student {Di2015NewLine        Id = 1,Di2015NewLine        Name = "a",Di2015NewLine        Courses = {Di2015NewLine            new Course { Key = 2},Di2015NewLine            new Course { Key = 3},Di2015NewLine        }Di2015NewLine    };Di2015NewLine    StudentDTO dto = new StudentDTO {Di2015NewLine        Id = foo.Id,Di2015NewLine        Name = foo.Name,Di2015NewLine    };Di2015NewLine    foreach (var course in foo.Courses) {Di2015NewLine        dto.Courses.Add(new CourseDTO {Di2015NewLine            Key = course.KeyDi2015NewLine        });Di2015NewLine    }Di2015NewLine
531507Di2015UniqueSeparatorExpression
531507Di2015UniqueSeparatorStudent source = ...Di2015NewLineStudentDTO item = PropertyCopy<StudentDTO>.CopyFrom(student);Di2015NewLine
531507Di2015UniqueSeparatorExpression
531507Di2015UniqueSeparatorHyperDescriptor
531507Di2015UniqueSeparatorExpression
531507Di2015UniqueSeparatorStudent source = ...Di2015NewLineStudentDTO item = new StudentDTO();Di2015NewLinePropertyDescriptorCollectionDi2015NewLine     sourceProps = TypeDescriptor.GetProperties(student),Di2015NewLine     destProps = TypeDescriptor.GetProperties(item),Di2015NewLineforeach(PropertyDescriptor prop in sourceProps) {Di2015NewLine    PropertyDescriptor destProp = destProps[prop.Name];Di2015NewLine    if(destProp != null) destProp.SetValue(item, prop.GetValue(student));Di2015NewLine}Di2015NewLine
531697Di2015UniqueSeparatorSystem.Diagnostics.StackTrace t = new System.Diagnostics.StackTrace();Di2015NewLine
531741Di2015UniqueSeparatorHKLM\\SOFTWARE\\Microsoft\\Office\\12.0\\Word\\InstallRoot
531772Di2015UniqueSeparatorInterlocked.Read
531772Di2015UniqueSeparatorInterlocked.Exchange
531772Di2015UniqueSeparatorBitConverter.Int64BitsToDouble
531772Di2015UniqueSeparatorBitConverter.DoubleToInt64Bits
531772Di2015UniqueSeparatorVolatileDouble
531828Di2015UniqueSeparatorwsdl.exe
531828Di2015UniqueSeparator/appsettingurlkey:<key>
531828Di2015UniqueSeparatorMainWeb_localhost_WebService
531986Di2015UniqueSeparators
532020Di2015UniqueSeparatorestate.Images.OrderByDescending(est => est.IsProfile).ToList()Di2015NewLine
532214Di2015UniqueSeparator/// <see cref="FancyClass{T}.FancyMethod{K}(T)"/> for more information.Di2015NewLine
532247Di2015UniqueSeparatorOnCreated
532247Di2015UniqueSeparatorpublic static class DataContextExt {Di2015NewLine    public static T NoTracking<T>(this T ctx)Di2015NewLine        where T : DataContextDi2015NewLine    {Di2015NewLine        ctx.ObjectTrackingEnabled = false;Di2015NewLine        return ctx;Di2015NewLine    }   Di2015NewLineDi2015NewLine}Di2015NewLine
532247Di2015UniqueSeparatorusing(var data = new SomeDataContext(ConnectionString).NoTracking())Di2015NewLine{...}Di2015NewLine
532247Di2015UniqueSeparatornamespace MyData {Di2015NewLine    partial class MyDataContext {Di2015NewLine        partial void OnCreated() {Di2015NewLine            this.ObjectTrackingEnabled = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
532252Di2015UniqueSeparatorif (!_deletedLines.Contains(counter)) Di2015NewLine{                            Di2015NewLine    writer.WriteLine(reader.ReadLine());                        Di2015NewLine}Di2015NewLine
532252Di2015UniqueSeparatorstring line = reader.ReadLine();Di2015NewLineif (!_deletedLines.Contains(counter)) Di2015NewLine{                            Di2015NewLine    writer.WriteLine(line);                        Di2015NewLine}Di2015NewLine
532293Di2015UniqueSeparatorThread
532293Di2015UniqueSeparator    public bool CheckForUpdates(Uri ftp) {Di2015NewLine        try {Di2015NewLine            Thread.Sleep(1000);Di2015NewLine            throw new Exception("bla");Di2015NewLine            return true;Di2015NewLine        } catch (Exception ex) {Di2015NewLine            // raise an event, call a method/callback, do somethingDi2015NewLine        }Di2015NewLine    }Di2015NewLine
532293Di2015UniqueSeparatorEndInvoke
532293Di2015UniqueSeparatorThreadPool
532293Di2015UniqueSeparatorDelegate.BeginInvoke
532327Di2015UniqueSeparatorfor (int i = 0; i < CATEGORYListBox.Items.Count; i++)Di2015NewLine{Di2015NewLine    foreach (string category in reader["CATEGORY"].ToString().Split(','))Di2015NewLine    {Di2015NewLine        if (category != CATEGORYListBox.Items[i].Value) continue;Di2015NewLine        CATEGORYListBox.Items[i].Selected = true;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
532564Di2015UniqueSeparatorXmlSerializer
532564Di2015UniqueSeparatorIXmlSerializable
532564Di2015UniqueSeparatorXmlSerializer
532564Di2015UniqueSeparatorXmlSerializer
532564Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class FunkyTimeDi2015NewLine{Di2015NewLine    [XmlAttribute]Di2015NewLine    public DateTime When { get; set; }Di2015NewLine    [XmlAttribute]Di2015NewLine    public bool IsStart { get; set; }Di2015NewLine    [XmlAttribute]Di2015NewLine    public bool IsEnd { get; set; }Di2015NewLine}Di2015NewLine
532607Di2015UniqueSeparatorforeach (Type type in assembly.GetTypes())Di2015NewLine{Di2015NewLine    foreach (MethodInfo method in type.GetMethods(BindingFlags.Public |Di2015NewLine        BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance))Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0} {1}{2}.{3}", GetFriendlyAccess(method),Di2015NewLine            method.IsStatic ? "static " : "", type.Name, method.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
532732Di2015UniqueSeparatorDelegate.BeginInvoke
532732Di2015UniqueSeparatorThreadPool.QueueUserWorkItem
532732Di2015UniqueSeparatorIAsyncResult
532841Di2015UniqueSeparatorvar feeds = (from item in doc.Descendants("item")Di2015NewLine             from category in item.Elements("category")Di2015NewLine             where category.Value=="Automotive" && Di2015NewLine                   category.Attribute("type").Value == "Channel"Di2015NewLine             select item).ToList();Di2015NewLine
532853Di2015UniqueSeparatorTo use it with DataGridView create a ToolTip (HtmlToolTip) and add this after the InitalizeComponent() in your form to replace the default tooltip:Di2015NewLineDi2015NewLineSystem.Reflection.FieldInfo toolTipControlFieldInfo=Di2015NewLinetypeof(DataGridView).GetField("toolTipControl", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);Di2015NewLineDi2015NewLineSystem.Reflection.FieldInfo toolTipFieldInfo=Di2015NewLinetoolTipControlFieldInfo.FieldType.GetField("toolTip", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);Di2015NewLineDi2015NewLineobject toolTipControlInstance =Di2015NewLinetoolTipControlFieldInfo.GetValue(myDataGridView);Di2015NewLineDi2015NewLinetoolTipFieldInfo.SetValue(toolTipControlInstance, myToolTip);Di2015NewLine
532877Di2015UniqueSeparatorprotected override void Render(System.Web.UI.HtmlTextWriter writer)Di2015NewLine{Di2015NewLine    if(_req != null)Di2015NewLine        _req.RenderControl(writer);Di2015NewLine    base.Render(writer);Di2015NewLine}Di2015NewLine
532912Di2015UniqueSeparatorpublic static string Multiply(this string source, int multiplier)Di2015NewLine{Di2015NewLine   StringBuilder sb = new StringBuilder(multiplier * source.Length);Di2015NewLine   for (int i = 0; i < multiplier; i++)Di2015NewLine   {Di2015NewLine       sb.Append(source);Di2015NewLine   }Di2015NewLineDi2015NewLine   return sb.ToString();Di2015NewLine}Di2015NewLineDi2015NewLinestring s = "</li></ul>".Multiply(10);Di2015NewLine
532926Di2015UniqueSeparatorpublic class PersonViewDi2015NewLine{Di2015NewLine     public string Name{ get;set; }Di2015NewLine     public int NumberOfSubordinates{get;set;}     Di2015NewLine}Di2015NewLine
532926Di2015UniqueSeparatorICriteria crit = new Criteria(typeof(Person));Di2015NewLineDi2015NewLinecrit.SetProjection (Projections.ProjectionList()Di2015NewLine                       .Add (Projections.Property("Name"), "Name")Di2015NewLine                       .Add (Projections.Count ("Subordinates"), "NumberOfSubordinates");Di2015NewLineDi2015NewLinecrit.SetResultTransformer(Transformers.AliasToBean (typeof(PersonView));Di2015NewLine
532926Di2015UniqueSeparator<hibernate-mapping .. >Di2015NewLine  <import class="PersonView" />Di2015NewLine</hibernate-mapping>Di2015NewLine
532926Di2015UniqueSeparatorSELECT p.Name, COUNT(p.Subordinates) FROM PersonDi2015NewLineINNER JOIN Subordinates ON Person.PersonId = Subordinates.PersonIDDi2015NewLineGROUP BY p.NameDi2015NewLine
533155Di2015UniqueSeparatorprotected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine\Response.Redirect(string.Format("Default.aspx?Dept=Shoes&Type={0}", this.DropDownList1.SelectedValue), true);Di2015NewLine}Di2015NewLine
533201Di2015UniqueSeparatorthis
533277Di2015UniqueSeparator  <asp:UpdatePanel ID="UpdatePanel1" runat="server">Di2015NewLine   <ContentTemplate>Di2015NewLine    <asp:GridView ID="GridView1"Di2015NewLine         runat="server"Di2015NewLine         AllowPaging="True" Di2015NewLine         AllowSorting="True"Di2015NewLine         AutoGenerateColumns="False"Di2015NewLine         DataSourceID="ObjectDataSource1"Di2015NewLine         PagerSettings-Visible="true" EnableViewState="False"Di2015NewLine         DataKeyNames="Id" >Di2015NewLine    <Columns>Di2015NewLine        <asp:CommandField DeleteImageUrl="/images/icon.gif" Di2015NewLine             DeleteText="Some Text"Di2015NewLine             ShowDeleteButton="True" Di2015NewLine             ButtonType="Image" />Di2015NewLine        <asp:BoundField DataField="Id" HeaderText="Id" SortExpression="Id" />Di2015NewLine        <asp:BoundField DataField="Title" HeaderText="Title" Di2015NewLine             SortExpression="Title" />Di2015NewLine    </Columns>Di2015NewLine    </asp:GridView>Di2015NewLine   </ContentTemplate>Di2015NewLine  </asp:UpdatePanel>Di2015NewLineDi2015NewLine<asp:ObjectDataSource ID="ObjectDataSource1" runat="server"Di2015NewLine    DeleteMethod="myDeleteMethod" SelectMethod="mySelectMethod" Di2015NewLine    TypeName="myNamespace.ItemMgr">Di2015NewLine</asp:ObjectDataSource>Di2015NewLine
533324Di2015UniqueSeparatorpublic Form2(string labelValue)Di2015NewLine{Di2015NewLine  _labelValue = labelValue;Di2015NewLine}Di2015NewLine
533324Di2015UniqueSeparatorpublic string LabelValueDi2015NewLine{Di2015NewLine  get { return label1.Text; }Di2015NewLine  set { label1.Text = value; }Di2015NewLine}Di2015NewLine
533324Di2015UniqueSeparatorForm2 newForm = new Form2(); // Assign object to a Form2 instead of FormDi2015NewLinenewForm.LabelValue = "new text";Di2015NewLinenewForm.Show();Di2015NewLine
533420Di2015UniqueSeparatorobject
533448Di2015UniqueSeparatorTKey
533448Di2015UniqueSeparatorNullable<T>
533448Di2015UniqueSeparatorTFoo=Nullable<T>
533448Di2015UniqueSeparatorwhere TFoo : class
533448Di2015UniqueSeparatorwhere TFoo : struct
533504Di2015UniqueSeparatorSetConsoleCtrlHandler()
533543Di2015UniqueSeparatorSystem.Web.HttpUtility.UrlEncode("c# objects");Di2015NewLine
533608Di2015UniqueSeparatorselect
533608Di2015UniqueSeparatorforeach
533608Di2015UniqueSeparatorforeach
533608Di2015UniqueSeparatorfor
533608Di2015UniqueSeparatorvar items = goodWords.ToList();Di2015NewLineDi2015NewLineforeach (var item in items)Di2015NewLine{Di2015NewLine    item.fixData();Di2015NewLine}Di2015NewLine
533668Di2015UniqueSeparatorList<Items> allItems = /* initialize list */;Di2015NewLineDi2015NewLineList<Items> filteredList =Di2015NewLine    allItems.FindAll(item => item.Name.StartsWith("A"));Di2015NewLine
533683Di2015UniqueSeparator<!-- Declare the condition property at the beggining of the build file -->Di2015NewLine<PropertyGroup Condition="$(Platform) == 'IE7'">Di2015NewLine  <UseNewLibrary>true</UseNewLibrary>Di2015NewLine</PropertyGroup>Di2015NewLineDi2015NewLine<PropertyGroup Condition="$(Platform) == 'IE6'">Di2015NewLine  <UseNewLibrary>false</UseNewLibrary>Di2015NewLine</PropertyGroup>Di2015NewLineDi2015NewLineDi2015NewLine<!-- Then those the property to select the right file -->Di2015NewLine<ItemGroup Condition="$(UseNewLibrary)==true">Di2015NewLine  <Compile Include="Class1.cs"/>Di2015NewLine  <Compile Include="Class2.cs"/>Di2015NewLine  <Compile Include="Class3.cs"/>Di2015NewLine  <Compile Include="Class4.cs"/>Di2015NewLine</ItemGroup>Di2015NewLineDi2015NewLine<ItemGroup Condition="$(UseNewLibrary)==false">Di2015NewLine   <Compile Include="Class1Old.cs"/>Di2015NewLine   <Compile Include="Class2Old.cs"/>Di2015NewLine   <Compile Include="Class3Old.cs"/>Di2015NewLine   <Compile Include="Class4Old.cs"/>Di2015NewLine</ItemGroup>Di2015NewLineDi2015NewLine<!-- And now references -->Di2015NewLine<ItemGroup Condition="$(UseNewLibrary)==true">Di2015NewLine  <Reference Include="MyAssembly, Version=1.1.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />Di2015NewLine</ItemGroup>Di2015NewLineDi2015NewLine<ItemGroup Condition="$(UseNewLibrary)==false">Di2015NewLine  <Reference Include="MyAssembly, Version=1.0.6.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />Di2015NewLine</ItemGroup>Di2015NewLine
533703Di2015UniqueSeparatorpublic class DataAccessDi2015NewLine{Di2015NewLine    public DataAccess()Di2015NewLine    {Di2015NewLine    }Di2015NewLine    public System.Collections.IEnumerable GetSchoolData()Di2015NewLine    {Di2015NewLine        string connectionString = ConfigurationManager.ConnectionStrings["MyConnectionString"].ConnectionString;Di2015NewLine        Database db = DatabaseFactory.CreateDatabase(connectionString);Di2015NewLine        string sqlCommand = "GetSchoolData";Di2015NewLine        DbCommand comm = db.GetStoredProcCommand(sqlCommand);Di2015NewLine        //db.AddInParameter(comm, "SchoolId", DbType.Int32); // this is in case you want to add parameters to your stored procedureDi2015NewLineDi2015NewLine        return db.ExecuteDataSet(comm);Di2015NewLine    }Di2015NewLine}Di2015NewLine
533703Di2015UniqueSeparatorpublic class SchoolPage : PageDi2015NewLine{Di2015NewLine  public void Page_Init(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine    DataAccess dac = new  DataAccess();Di2015NewLine    cmbEditSchool.DataSource = dac.GetSchoolData();Di2015NewLine    cmbEditSchool.DataBind();Di2015NewLine  }Di2015NewLine}Di2015NewLine
533775Di2015UniqueSeparatorSelect()
533775Di2015UniqueSeparatorDataRow[] rows = data.Select("rowID=" + id.ToString());Di2015NewLineif (rows.Length > 0)Di2015NewLine{Di2015NewLine    //Do stuff hereDi2015NewLine}Di2015NewLine
533778Di2015UniqueSeparatorfor(DateTime date = begin; date <= end; date = date.AddDays(1))Di2015NewLine{Di2015NewLine}Di2015NewLine
533780Di2015UniqueSeparatorstatic void Main(String[] args)Di2015NewLine{Di2015NewLine    string p = args[0];Di2015NewLineDi2015NewLine    string e = Path.GetExtension(p);Di2015NewLine    if (e == ".txt")Di2015NewLine    {Di2015NewLine        // It's a text fileDi2015NewLine    }Di2015NewLine}Di2015NewLine
533836Di2015UniqueSeparatorvar rootTypes = from type in assembly.GetTypes()Di2015NewLine                where type.IsClass && type.BaseType == typeof(object)Di2015NewLine                select type;Di2015NewLine
533836Di2015UniqueSeparatorforeach (Type type in assembly.GetTypes())Di2015NewLine{Di2015NewLine    if (type.IsClass && type.BaseType == typeof(object))Di2015NewLine    {Di2015NewLine        Console.WriteLine(type);Di2015NewLine    }Di2015NewLine}Di2015NewLine
533836Di2015UniqueSeparatorvar rootTypes = from type in assembly.GetTypes()Di2015NewLine                where type.IsClass && type.BaseType.Assembly != assemblyDi2015NewLine                select type;Di2015NewLine
533888Di2015UniqueSeparatorvar allTypes = assembly.GetTypes();Di2015NewLinevar baseTypes = allTypes.Select(type => type.BaseType);Di2015NewLinevar bottomTypes = allTypes.Except(baseTypes);Di2015NewLine
533907Di2015UniqueSeparatorIEnumerable<Stream>
533907Di2015UniqueSeparatorStream
533907Di2015UniqueSeparatorStream combined = new CombinationStream(files.Select(file => File.Open(file));Di2015NewLine
533943Di2015UniqueSeparatorprivate void comboBox1_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    for(int i=0; i<comboBox1.Items.Count; i++)Di2015NewLine    {Di2015NewLine        if (comboBox1.Items[i].ToString().StartsWith(comboBox1.Text))Di2015NewLine        {Di2015NewLine            comboBox1.SelectedIndex = i;Di2015NewLine            return;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
533969Di2015UniqueSeparatora = 0.000006;Di2015NewLineb = 6;Di2015NewLinec = a/b;Di2015NewLineDi2015NewLinetextbox.text = c.tostring("0.000000");Di2015NewLine
533969Di2015UniqueSeparatortextbox.text = c.tostring("0.######");Di2015NewLine
534061Di2015UniqueSeparatorprivate List<T> GetResults<T>(IQueryable<T> source, Di2015NewLine    Expression<Func<T, bool>> queryFunction)Di2015NewLine{Di2015NewLine   return source.Where(queryFunction).ToList<T>();Di2015NewLine}Di2015NewLine
534242Di2015UniqueSeparatortry
534242Di2015UniqueSeparatorcatch
534242Di2015UniqueSeparatorfinally
534242Di2015UniqueSeparatorfilter
534242Di2015UniqueSeparatorcatch
534242Di2015UniqueSeparatorcatch
534242Di2015UniqueSeparatorfault
534242Di2015UniqueSeparatorfinally
534242Di2015UniqueSeparatorfinally
534242Di2015UniqueSeparatorfilter
534242Di2015UniqueSeparatorfault
534242Di2015UniqueSeparatorfault
534242Di2015UniqueSeparatorcatch
534242Di2015UniqueSeparatorfinally
534242Di2015UniqueSeparatorfault
534488Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class Root {Di2015NewLine    [XmlElement("ArrayType1")]Di2015NewLine    public List<ArrayType1> ArrayType1 {get;set;}Di2015NewLineDi2015NewLine    [XmlElement("ArrayType2")]Di2015NewLine    public List<ArrayType2> ArrayType2 {get;set;}Di2015NewLine}Di2015NewLine
534488Di2015UniqueSeparatorxsd foo.xmlDi2015NewLinexsd foo.xsd /classesDi2015NewLine
534566Di2015UniqueSeparatorISerializable
534794Di2015UniqueSeparatorpublic class DogWithBreedDi2015NewLine{Di2015NewLine    public Dog Dog { get; set; }Di2015NewLine    public string BreedName  { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic IQueryable<DogWithBreed> GetDogsWithBreedNames()Di2015NewLine{Di2015NewLine    var db = new DogDataContext(ConnectString);Di2015NewLine    var result = from d in db.DogsDi2015NewLine                 join b in db.Breeds on d.BreedId equals b.BreedIdDi2015NewLine                 select new DogWithBreed()Di2015NewLine                        {Di2015NewLine                            Dog = d,Di2015NewLine                            BreedName = b.BreedNameDi2015NewLine                        };Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
534850Di2015UniqueSeparatorSelectedIndex='<%# 1 - Convert.ToInt32(...) %>Di2015NewLine
534882Di2015UniqueSeparator    <asp:ObjectDataSource Di2015NewLine        ID="ObjectDataSource1" Di2015NewLine        runat="server" Di2015NewLine        SelectMethod="SelectMethod" Di2015NewLine        TypeName="MyDataObject">Di2015NewLine            <asp:Parameter Direction="input" Type="string" Name="sortExpression">Di2015NewLine            </asp:Parameter>Di2015NewLine    </asp:ObjectDataSource>Di2015NewLine
534882Di2015UniqueSeparator    public DataView SelectMethod(string sortExpression)Di2015NewLine    {Di2015NewLine        DataTable table = GetData();Di2015NewLine        DataView dv = new DataView(table);Di2015NewLine        dv.Sort = sortExpression;Di2015NewLine        return dv;Di2015NewLine    }Di2015NewLine
535454Di2015UniqueSeparatoryield
535454Di2015UniqueSeparatorT
535454Di2015UniqueSeparatorIEnumerable<T>
535454Di2015UniqueSeparatorIEnumerator<T>
535454Di2015UniqueSeparatoryield
535454Di2015UniqueSeparatorIEnumerable<Comment>
535454Di2015UniqueSeparatorIEnumerable<IEnumerable<Comment>>
535454Di2015UniqueSeparatorusing
535454Di2015UniqueSeparatorDataContext
535454Di2015UniqueSeparatorIDisposable
535454Di2015UniqueSeparatorusing(var db = new MyDataContext() ) { /* existing code */ }Di2015NewLine
535501Di2015UniqueSeparatorvoid GridView1_RowCreated(Object sender, GridViewRowEventArgs e)Di2015NewLine  {Di2015NewLineDi2015NewLine    if(e.Row.RowType == DataControlRowType.Header)Di2015NewLine      {Di2015NewLine         ...your code hereDi2015NewLineDi2015NewLine      }Di2015NewLine
535527Di2015UniqueSeparatorPrivate Const IDM_TODAY As Long = 4163Di2015NewLinePrivate Const IDM_GOTODAY As Long = 4164Di2015NewLineDi2015NewLinePublic Function GetTodayLocalized(ByVal LocaleId As Long) As StringDi2015NewLine    Static hComCtl32 As LongDi2015NewLine    Static hComCtl32Initialized As BooleanDi2015NewLine    Static hComCtl32MustBeFreed As BooleanDi2015NewLineDi2015NewLine    Dim s As StringDi2015NewLineDi2015NewLine    If Not hComCtl32Initialized ThenDi2015NewLine        hComCtl32 = GetModuleHandle("Comctl32.dll")Di2015NewLine        If hComCtl32 <> 0 ThenDi2015NewLine            hComCtl32MustBeFreed = FalseDi2015NewLine            hComCtl32Initialized = TrueDi2015NewLine        ElseDi2015NewLine            hComCtl32 = LoadLibrary("Comctl32.Dll")Di2015NewLine            If Not hComCtl32 = 0 ThenDi2015NewLine                hComCtl32MustBeFreed = TrueDi2015NewLine                hComCtl32Initialized = TrueDi2015NewLine            End IfDi2015NewLine        End IfDi2015NewLine    End IfDi2015NewLineDi2015NewLine    If hComCtl32Initialized = False ThenDi2015NewLine        s = "Today"Di2015NewLine    ElseDi2015NewLine        s = LoadStringEx(hComCtl32, IDM_TODAY, LocaleId)Di2015NewLine        If s = "" ThenDi2015NewLine            s = "Today"Di2015NewLine        End IfDi2015NewLine    End IfDi2015NewLineDi2015NewLine    If hComCtl32MustBeFreed ThenDi2015NewLine        FreeLibrary hComCtl32Di2015NewLine        hComCtl32MustBeFreed = FalseDi2015NewLine        hComCtl32Initialized = FalseDi2015NewLine        hComCtl32 = 0Di2015NewLine    End IfDi2015NewLineDi2015NewLine    s = Replace(s, "&", "")Di2015NewLine    If Right(s, 1) = ":" ThenDi2015NewLine        s = Left(s, Len(s) - 1)Di2015NewLine    End IfDi2015NewLineDi2015NewLine    GetTodayLocalized = sDi2015NewLineEnd FunctionDi2015NewLine
535548Di2015UniqueSeparatorMoveFileEx
535548Di2015UniqueSeparatorcmd.exe /c del c:\\path\\myprog.exe
535548Di2015UniqueSeparator:loopDi2015NewLineping -n 6 127.0.0.1Di2015NewLinedel /y %1Di2015NewLineif exist %1 goto :loopDi2015NewLinedel byebye.batDi2015NewLine
535548Di2015UniqueSeparatorping
535548Di2015UniqueSeparatorsleep
535624Di2015UniqueSeparatornamespace X{  public static class URLsDi2015NewLine{Di2015NewLine    public static TabController tabIdLookUp;Di2015NewLine    public static string DASHBOARD_AUDIT_PAGE;Di2015NewLine    public static string URL_GENERATE_WITH_MID(String TabName, int PortalId){        {Di2015NewLine        return tabIdLookUp.GetTabByName(TabName, PortalId).TabID.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    static URLs() {Di2015NewLine        tabIdLookUp = new TabController();Di2015NewLine        DASHBOARD_AUDIT_PAGE = tabIdLookUp.GetTabByName("View My Safety", 2).TabID.ToString();Di2015NewLine    }Di2015NewLine}}Di2015NewLine
535651Di2015UniqueSeparatorK
535651Di2015UniqueSeparatorV
535651Di2015UniqueSeparatorIDictionary<,>
535651Di2015UniqueSeparatorpublic static bool EquivalentTo<TKey, TValue>(Di2015NewLine     this IDictionary<TKey, TValue> first,Di2015NewLine     IDictionary<TKey, TValue> second)Di2015NewLine{Di2015NewLine     return first.EquivalentTo(second, EqualityComparer<TValue>.Default);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static bool EquivalentTo<TKey, TValue>(Di2015NewLine     this IDictionary<TKey, TValue> first,Di2015NewLine     IDictionary<TKey, TValue> second,Di2015NewLine     IEqualityComparer<TValue> valueComparer)Di2015NewLine{Di2015NewLine    if (first == second)Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    if (first == null || second == null)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    if (first.Count != second.Count)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    foreach (var firstKeyValue in first)Di2015NewLine    {Di2015NewLine        TValue secondValue;Di2015NewLine        if (!second.TryGetValue(firstKeyValue.Key, out secondValue) ||Di2015NewLine            !valueComparer.Equals(firstKeyValue.Value, secondValue))Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
535736Di2015UniqueSeparatorList<string> list = new List<string>() { "foo" };Di2015NewLine
535736Di2015UniqueSeparatorList<string> list = new List<string>() { "foo","bar","bas"};Di2015NewLine
535781Di2015UniqueSeparatore.Row.Style.Value = "text-decoration:line-through;"Di2015NewLine
535781Di2015UniqueSeparator<table>Di2015NewLine<tr style="text-decoration:line-through;">Di2015NewLine<td>some text</td>Di2015NewLine<td>some text</td>Di2015NewLine</tr>Di2015NewLine<tr style="text-decoration:line-through;">Di2015NewLine<td>some text</td>Di2015NewLine<td>some text</td>Di2015NewLine</tr>Di2015NewLine<tr style="text-decoration:line-through;">Di2015NewLine<td>some text</td>Di2015NewLine<td>some text</td>Di2015NewLine</tr>Di2015NewLine</table>Di2015NewLine
535782Di2015UniqueSeparatorMyStruct[] tmp = new MyStruct[1];Di2015NewLineMyStruct gotcha = tmp[0];Di2015NewLine
535839Di2015UniqueSeparatorvar v = db.items.Select("new (item_name as name,item_price as price)");Di2015NewLine
536045Di2015UniqueSeparatorstatic string CategoryValue(this XElement element, string type)Di2015NewLine{Di2015NewLine    var category = element.Elements("category").FirstOrDefault(Di2015NewLine        c => (string)c.Attribute("type") == typeDi2015NewLine            && !string.IsNullOrEmpty(c.Value)); // UPDATE HEREDi2015NewLine    return category == null ? null : category.Value;Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    XDocument doc = XDocument.Parse(xml);Di2015NewLine    var qry = from item in doc.Descendants("item")Di2015NewLine              where item.CategoryValue("Channel") == "Automotive"Di2015NewLine              && item.CategoryValue("Type") == "Cars"Di2015NewLine              select item;Di2015NewLine    foreach (var node in qry)Di2015NewLine    {Di2015NewLine        Console.WriteLine(node.Element("guid").Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
536171Di2015UniqueSeparatorprotected override void OnPaint ( PaintEventArgs e )Di2015NewLine{Di2015NewLine    // Update Region hereDi2015NewLineDi2015NewLine    base.OnPaint( e );Di2015NewLine}Di2015NewLine
536171Di2015UniqueSeparatorGraphics g = e.Graphics;Di2015NewLineg.SetClip( Region, CombineMode.Intersect );Di2015NewLine
536242Di2015UniqueSeparatorFunctionAttribute
536242Di2015UniqueSeparatorvar qry1 = from cust in ctx.CustomersDi2015NewLine          where cust.Gender == 'M' && cust.Zip = '90210'Di2015NewLine          select cust;Di2015NewLineDi2015NewLinevar qry2 = from cust in ctx.CustomersDi2015NewLine          where cust.Zip = '90210'Di2015NewLine          select cust;Di2015NewLine
536242Di2015UniqueSeparatorIQueryable<Foo> query = ctx.Customers;Di2015NewLine// note "gender" here is "char?" for this exampleDi2015NewLineif(gender != null) query = query.Where(x=>x.Gender == (char)gender);Di2015NewLineif(zip != null) query = query.Where(x=>x.Zip == zip);Di2015NewLine
536363Di2015UniqueSeparatorAppDomain.CurrentDomain.SetData("APP_CONFIG_FILE", path);Di2015NewLine
536451Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineusing MiscUtil.Collections;Di2015NewLineDi2015NewLineclass ExampleDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        List<string> list = new List<string>();Di2015NewLine        list.Add("a");Di2015NewLine        list.Add("b");Di2015NewLine        list.Add("c");Di2015NewLine        list.Add("d");Di2015NewLine        list.Add("e");Di2015NewLineDi2015NewLine        foreach (SmartEnumerable<string>.Entry entry inDi2015NewLine                 new SmartEnumerable<string>(list))Di2015NewLine        {Di2015NewLine            Console.WriteLine ("{0,-7} {1} ({2}) {3}",Di2015NewLine                               entry.IsLast  ? "Last ->" : "",Di2015NewLine                               entry.Value,Di2015NewLine                               entry.Index,Di2015NewLine                               entry.IsFirst ? "<- First" : "");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
536551Di2015UniqueSeparatorMicrosoft.Build.Engine
536699Di2015UniqueSeparator        object[,] arr = new object[dt.Rows.Count, dt.Columns.Count];Di2015NewLine        for (int r = 0; r < dt.Rows.Count; r++)Di2015NewLine        {Di2015NewLine            DataRow dr = dt.Rows[r];Di2015NewLine            for (int c = 0; c < dt.Columns.Count; c++)Di2015NewLine            {Di2015NewLine                arr[r, c] = dr[c];Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        Excel.Range c1 = (Excel.Range)wsh.Cells[topRow, 1];Di2015NewLine        Excel.Range c2 = (Excel.Range)wsh.Cells[topRow + dt.Rows.Count - 1, dt.Columns.Count];Di2015NewLine        Excel.Range range = wsh.get_Range(c1, c2);Di2015NewLineDi2015NewLine        range.Value = arr;Di2015NewLine
536964Di2015UniqueSeparatorsetProperyValue(obj, propertyName, value)Di2015NewLine{Di2015NewLine  head, tail = propertyName.SplitByDotToHeadAndTail(); // Person.Address.Postcode => {head=Person, tail=Address.Postcode}Di2015NewLine  if(tail.Length == 0)Di2015NewLine    setPropertyValueUsingReflection(obj, head, value);Di2015NewLine  elseDi2015NewLine    setPropertyValue(getPropertyValueUsingReflection(obj, head), tail, value); // recursionDi2015NewLine}Di2015NewLine
537085Di2015UniqueSeparator<system.webServer> Di2015NewLine  <modules>Di2015NewLine    <add name="OnePerRequestModule" type="Ninject.Core.Behavior.OnePerRequestModule, Ninject.Core"/>Di2015NewLine  </modules>Di2015NewLine</system.webServer>Di2015NewLine
537085Di2015UniqueSeparator<system.web>Di2015NewLine  <httpModules>Di2015NewLine    <add name="OnePerRequestModule" type="Ninject.Core.Behavior.OnePerRequestModule, Ninject.Core"/>Di2015NewLine  </httpModules>Di2015NewLine</system.web>Di2015NewLine
537129Di2015UniqueSeparator[HandleError]Di2015NewLinepublic abstract class MyControllerBase : ControllerDi2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLine[Authorize(Roles="Admin")]Di2015NewLinepublic abstract class AdminControllerBase : MyControllerBaseDi2015NewLine{Di2015NewLine    ....Di2015NewLine}Di2015NewLine
537232Di2015UniqueSeparatorResponse.Redirect("~/Page1.aspx?selectValue=5");
537232Di2015UniqueSeparatormyDropDownList.SelectedValue = Request.QueryString("selectValue");
537330Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Controls;Di2015NewLineDi2015NewLineDi2015NewLinenamespace AddControlsDynamicallyDi2015NewLine{Di2015NewLine    public partial class Window1 : WindowDi2015NewLine    {Di2015NewLine        public void Window_Loaded(object sender, RoutedEventArgs e)Di2015NewLine        {Di2015NewLine            GenerateControls();Di2015NewLine        }Di2015NewLine        public void GenerateControls()Di2015NewLine        {Di2015NewLine            Button btnClickMe = new Button();Di2015NewLine            btnClickMe.Content = "Click Me";Di2015NewLine            btnClickMe.Name = "btnClickMe";Di2015NewLine            btnClickMe.Click += new RoutedEventHandler(this.CallMeClick);Di2015NewLine            someStackPanel.Children.Add(btnClickMe);Di2015NewLine            TextBox txtNumber = new TextBox();Di2015NewLine            txtNumber.Name = "txtNumber";Di2015NewLine            txtNumber.Text = "1776";Di2015NewLine            someStackPanel.Children.Add(txtNumber);Di2015NewLine            someStackPanel.RegisterName(txtNumber.Name, txtNumber);Di2015NewLine        }Di2015NewLine        protected void CallMeClick(object sender, RoutedEventArgs e)Di2015NewLine        {Di2015NewLine            TextBox txtNumber = (TextBox) this.someStackPanel.FindName("txtNumber");Di2015NewLine            string message = string.Format("The number is {0}", txtNumber.Text);Di2015NewLine            MessageBox.Show(message);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
537394Di2015UniqueSeparator[WebInvoke(RequestFormat = WebMessageFormat.Xml, Di2015NewLine           ResponseFormat = WebMessageFormat.Xml,Di2015NewLine           Method = "POST", UriTemplate = "tasks/{description}", Di2015NewLine           BodyStyle = WebMessageBodyStyle.Bare)]Di2015NewLine[OperationContract]Di2015NewLinevoid AddTask(string description);Di2015NewLine
537456Di2015UniqueSeparatorvar i = (int?)0;
537456Di2015UniqueSeparatorint? i = 0
537469Di2015UniqueSeparatorthis.Closing += Form1_Closing;Di2015NewLine
537525Di2015UniqueSeparatornew Mock<IMoq>(MockBehavior.Strict)Di2015NewLine
537525Di2015UniqueSeparatorvar m = new Mock<IMoq>(MockBehavior.Loose);Di2015NewLinem.Expect(a => a.moo()).Throws(new Exception("Shouldn't be called."));Di2015NewLine
537528Di2015UniqueSeparatorpublic DataTable ResultTable { get { return this[_resultKey]; } }Di2015NewLinepublic DataTable this[string tableName]Di2015NewLine{Di2015NewLine    get { return _data.Tables[tableName].DefaultView.ToTable(); }Di2015NewLine}Di2015NewLine
537652Di2015UniqueSeparatorIntPtr unmanagedPointer = Marshal.AllocHGlobal(bytes.Length);Di2015NewLineMarshal.Copy(bytes, 0, unmanagedPointer, bytes.Length);Di2015NewLine// Call unmanaged codeDi2015NewLineMarshal.FreeHGlobal(unmanagedPointer);Di2015NewLine
537909Di2015UniqueSeparator context.entity.Attach(entity, true);Di2015NewLine
537918Di2015UniqueSeparator<parm name="Encryption" value="6" >Di2015NewLine
538086Di2015UniqueSeparator-=
538109Di2015UniqueSeparatorDim VPathDi2015NewLine'This changes setting at machine level, you may change it to a different pathDi2015NewLineVPath = "IIS://localhost/MimeMap"Di2015NewLineDi2015NewLine'Add/Update the type for DLR language extensionDi2015NewLineUpdateMime ".xap", "application/x-silverlight-app"Di2015NewLineDi2015NewLine'Search for the given extension and update its typeDi2015NewLine'when not found, add it into the collectionDi2015NewLineSub UpdateMime(Extension, NewType)Di2015NewLine    Dim LocalMimeMap, MimeMap, MMItem, aMimeMapNew()Di2015NewLine    Dim i Di2015NewLine    i = 0Di2015NewLine    Const ADS_PROPERTY_CLEAR = 1Di2015NewLine    Const ADS_PROPERTY_UPDATE = 2Di2015NewLine    Set LocalMimeMap = GetObject(VPath)Di2015NewLine    MimeMap = LocalMimeMap.GetEx("MimeMap")Di2015NewLine    Dim foundDi2015NewLine    found = FalseDi2015NewLine    For Each MMItem In MimeMapDi2015NewLine      ReDim Preserve aMimeMapNew(i)Di2015NewLine      Set aMimeMapNew(i) = CreateObject("MimeMap")Di2015NewLine      aMimeMapNew(i).Extension = MMItem.ExtensionDi2015NewLine      If MMItem.Extension = Extension ThenDi2015NewLine          found = TrueDi2015NewLine          MsgBox("Update type of extension " + MMItem.Extension + " from " +     MMItem.MimeType + " to " + NewType)Di2015NewLine          aMimeMapNew(i).MimeType = NewTypeDi2015NewLine      ElseDi2015NewLine          aMimeMapNew(i).MimeType = MMItem.MimeTypeDi2015NewLine      End IfDi2015NewLine      i = i + 1Di2015NewLine    NextDi2015NewLine    If found ThenDi2015NewLine        LocalMimeMap.PutEx ADS_PROPERTY_UPDATE, "MimeMap", aMimeMapNewDi2015NewLine        LocalMimeMap.SetInfoDi2015NewLine    ElseDi2015NewLine        MsgBox("Add new extension " + Extension + " with type " + NewType)Di2015NewLine        AddMime Extension, NewTypeDi2015NewLine    End IfDi2015NewLineEnd SubDi2015NewLineDi2015NewLineSub AddMime(ExtensionToAdd, MimeTypeToAdd)Di2015NewLine    Dim LocalMimeMap, MimeMapDi2015NewLine    Dim iDi2015NewLine    Const ADS_PROPERTY_UPDATE = 2Di2015NewLine    Set LocalMimeMap = GetObject(VPath)Di2015NewLine    MimeMap = LocalMimeMap.GetEx("MimeMap")Di2015NewLine    i = UBound(MimeMap)+1Di2015NewLine    Redim Preserve MimeMap(i) Di2015NewLine    Set MimeMap(i) = CreateObject("MimeMap") Di2015NewLine    MimeMap(i).Extension = ExtensionToAddDi2015NewLine    MimeMap(i).MimeType = MimeTypeToAddDi2015NewLine    LocalMimeMap.PutEx ADS_PROPERTY_UPDATE,"MimeMap",MimeMap Di2015NewLine    LocalMimeMap.SetInfoDi2015NewLineEnd SubDi2015NewLine
538136Di2015UniqueSeparatorSystem.Type
538136Di2015UniqueSeparatorList<>
538136Di2015UniqueSeparatorType.GetGenericArguments()
538136Di2015UniqueSeparatorType
538205Di2015UniqueSeparatorSelect b.FirstName As BusinessOwner.Name, c.Address as ContactLoaction.AddressDi2015NewLineFrom BusinessOwner as b, ContactLocation as cDi2015NewLine
538205Di2015UniqueSeparatorstring tempName = tabel.Columns[0].ColumnName;Di2015NewLinestring tableName = tempName.Substring(0, tempName.IndexOf('.'));Di2015NewLine
538210Di2015UniqueSeparatorObject[]
538210Di2015UniqueSeparatorActivator.CreateInstance
538210Di2015UniqueSeparatorActivator
538210Di2015UniqueSeparatorObject
538210Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine    \Foo foo = (Foo)create("Foo", new Object[] { });Di2015NewLine    \Bar bar = (Bar)create("Bar", new Object[] { "hello bar" });Di2015NewLine    \Baz baz = (Baz)create("Baz", new Object[] { 2, "hello baz" });Di2015NewLine    }Di2015NewLineDi2015NewLine    static Object create(String typeName, Object[] parameters)Di2015NewLine    {Di2015NewLine    \return Activator.CreateInstance(Type.GetType(typeName), parameters);Di2015NewLine    }\Di2015NewLine}Di2015NewLineDi2015NewLineclass FooDi2015NewLine{Di2015NewLine    public Foo() { }Di2015NewLine}Di2015NewLineDi2015NewLineclass BarDi2015NewLine{Di2015NewLine    public Bar(String param1) { }Di2015NewLine}Di2015NewLineDi2015NewLineclass BazDi2015NewLine{Di2015NewLine    public Baz(Int32 param1, String param2) { }Di2015NewLine}Di2015NewLine
538210Di2015UniqueSeparatorObjects
538238Di2015UniqueSeparatorDeleteHandle()
538238Di2015UniqueSeparatorIntPtr
538238Di2015UniqueSeparatorDeleteHandle()
538238Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine
538238Di2015UniqueSeparatorIDisposable
538238Di2015UniqueSeparatorpublic interface IDisposableDi2015NewLine{Di2015NewLine   void Dispose()Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorIDisposable
538238Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine{Di2015NewLine   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine{Di2015NewLine   //Free unmanaged resourcesDi2015NewLine   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);Di2015NewLineDi2015NewLine   //Free managed resources tooDi2015NewLine   if (this.databaseConnection != null)Di2015NewLine   {Di2015NewLine      this.databaseConnection.Dispose();Di2015NewLine      this.databaseConnection = null;Di2015NewLine   }Di2015NewLine   if (this.frameBufferImage != null)Di2015NewLine   {Di2015NewLine      this.frameBufferImage.Dispose();Di2015NewLine      this.frameBufferImage = null;Di2015NewLine   }Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorFinalize
538238Di2015UniqueSeparatorFinalize()
538238Di2015UniqueSeparatorFinalize()
538238Di2015UniqueSeparatorFinalize()
538238Di2015UniqueSeparator~MyObject()Di2015NewLine{Di2015NewLine    //we're being finalized (i.e. destroyed), call Dispose in case the user forgot toDi2015NewLine    Dispose(); //<--Warning: subtle bug! Keep reading!Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine{Di2015NewLine   //Free unmanaged resourcesDi2015NewLine   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);Di2015NewLineDi2015NewLine   //Free managed resources tooDi2015NewLine   if (this.databaseConnection != null)Di2015NewLine   {Di2015NewLine      this.databaseConnection.Dispose(); <-- crash, GC already destroyed itDi2015NewLine      this.databaseConnection = null;Di2015NewLine   }Di2015NewLine   if (this.frameBufferImage != null)Di2015NewLine   {Di2015NewLine      this.frameBufferImage.Dispose(); <-- crash, GC already destroyed itDi2015NewLine      this.frameBufferImage = null;Di2015NewLine   }Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorFinalize()
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorFinalize()
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorFinalize()
538238Di2015UniqueSeparatorDispose(Boolean)
538238Di2015UniqueSeparatorprotected void Dispose(Boolean disposing)Di2015NewLine
538238Di2015UniqueSeparatorprotected void Dispose(Boolean itIsSafeToAlsoFreeManagedObjects)Di2015NewLine{Di2015NewLine   //Free unmanaged resourcesDi2015NewLine   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);Di2015NewLineDi2015NewLine   //Free managed resources too, but only if I'm being called from DisposeDi2015NewLine   //(If I'm being called from Finalize then the objects might not existDi2015NewLine   //anymoreDi2015NewLine   if (itIsSafeToAlsoFreeManagedObjects)  Di2015NewLine   {    Di2015NewLine      if (this.databaseConnection != null)Di2015NewLine      {Di2015NewLine         this.databaseConnection.Dispose();Di2015NewLine         this.databaseConnection = null;Di2015NewLine      }Di2015NewLine      if (this.frameBufferImage != null)Di2015NewLine      {Di2015NewLine         this.frameBufferImage.Dispose();Di2015NewLine         this.frameBufferImage = null;Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorIDisposable.Dipose()
538238Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine{Di2015NewLine   Dispose(true); //I am calling you from Dispose, it's safeDi2015NewLine}Di2015NewLine
538238Di2015UniqueSeparator~MyObject()Di2015NewLine{Di2015NewLine   Dispose(false); //I am *not* calling you from Dispose, it's *not* safeDi2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorpublic Dispose()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Dispose(true); //true: safe to free managed resourcesDi2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        base.Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorDispose
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorprotected void Dispose(Boolean iAmBeingCalledFromDisposeAndNotFinalize)Di2015NewLine{Di2015NewLine   //Free unmanaged resourcesDi2015NewLine   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle); <--double destroy Di2015NewLine   ...Di2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorGC.SuppressFinalize()
538238Di2015UniqueSeparatorDispose()
538238Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine{Di2015NewLine   Dispose(true); //I am calling you from Dispose, it's safeDi2015NewLine   GC.SuppressFinalize(this); //Hey, GC: don't bother calling finalize laterDi2015NewLine}Di2015NewLine
538238Di2015UniqueSeparatorDispose()
538276Di2015UniqueSeparatorInvoke
538276Di2015UniqueSeparatorInvokeRequired
538508Di2015UniqueSeparatorvar qry = from key in keysDi2015NewLine          from priority in sortedDictDi2015NewLine          where priority.Value.ContainsKey(key)Di2015NewLine          let value = priority.Value[key]Di2015NewLine          group value by key into keyGroupDi2015NewLine          select new { Key = keyGroup.Key, Value = keyGroup.First() };Di2015NewLine
538557Di2015UniqueSeparatorType[] types = typeof(IFoo).GetInterfaces();Di2015NewLine
538557Di2015UniqueSeparatorType type = typeof(IFoo).GetInterface("IBar");Di2015NewLine
538575Di2015UniqueSeparatorPrivate Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)Di2015NewLine    Dim tests As New List(Of CaclulatedData)(2)Di2015NewLineDi2015NewLine    tests.Add(New CalculatedData())Di2015NewLine    tests(0).Bonds = "First Bond"Di2015NewLine    tests(0).TransactionList.Add(New TransactionData())Di2015NewLine    tests(0).TransactionList(0).Debit = "DebitData"Di2015NewLineDi2015NewLine    tests.Add(New CalculatedData())Di2015NewLine    tests(1).Bonds = "Second Bond"Di2015NewLine    tests(1).TransactionList.Add(New TransactionData())Di2015NewLine    tests(1).TransactionList(0).Debit = "123123"Di2015NewLine    tests(1).TransactionList.Add(New TransactionData())Di2015NewLine    tests(1).TransactionList(1).Debit = "12312"Di2015NewLine    tests(1).TransactionList(1).Credit = "3453"Di2015NewLineDi2015NewLine    gridControl1.DataSource = testsDi2015NewLineEnd SubDi2015NewLineDi2015NewLinePublic Class JEStringDi2015NewLine    Private _Bonds As StringDi2015NewLine    Public Property Bonds() As StringDi2015NewLine       GetDi2015NewLine          Return _BondsDi2015NewLine       End GetDi2015NewLine       Set(ByVal value As String)Di2015NewLine           _Bonds = valueDi2015NewLine       End SetDi2015NewLine    End PropertyDi2015NewLineEnd ClassDi2015NewLineDi2015NewLinePublic Class CaclulatedData Di2015NewLine    Inherits JEStringDi2015NewLineDi2015NewLine    Private _TransactionList As New List(Of TransactionData)()Di2015NewLine    Public ReadOnly Property TransactionList() As List(Of TransactionData)Di2015NewLine        GetDi2015NewLine            Return _TransactionListDi2015NewLine        End GetDi2015NewLine    End PropertyDi2015NewLineEnd ClassDi2015NewLineDi2015NewLineDi2015NewLinePublic Class TransactionDataDi2015NewLine    Private _Debit As StringDi2015NewLine    Private _Credit As StringDi2015NewLineDi2015NewLine    Public Property Debit() As StringDi2015NewLine       GetDi2015NewLine          Return _ DebitDi2015NewLine       End GetDi2015NewLine       Set(ByVal value As String)Di2015NewLine           _ Debit = valueDi2015NewLine       End SetDi2015NewLine    End PropertyDi2015NewLineDi2015NewLine    Public Property Credit() As StringDi2015NewLine       GetDi2015NewLine          Return _ CreditDi2015NewLine       End GetDi2015NewLine       Set(ByVal value As String)Di2015NewLine           _Credit = valueDi2015NewLine       End SetDi2015NewLine    End PropertyDi2015NewLineEnd ClassDi2015NewLine
538670Di2015UniqueSeparator<asp:GridView runat="server" ID="gvItems" AllowSorting="true" ...>Di2015NewLine
538670Di2015UniqueSeparator<asp:TemplateField SortExpression="ItemDescription" HeaderText="Item">...Di2015NewLine
538670Di2015UniqueSeparatorprotected void gv_Sorting(object sender, GridViewSortEventArgs e)Di2015NewLine{Di2015NewLine     string fieldToSortOn = e.SortExpression;Di2015NewLineDi2015NewLine     //implement sort logic on datasource...Di2015NewLine}Di2015NewLine
538714Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Net;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Check(new DateTime(2005, 1, 12));Di2015NewLine        Check(new DateTime(2009, 2, 28));Di2015NewLine        Check(new DateTime(2009, 12, 31));Di2015NewLine        Check(new DateTime(2000, 1, 29));Di2015NewLine        Check(new DateTime(2100, 1, 29));Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Check(DateTime date)Di2015NewLine    {Di2015NewLine        DateTime? next = OneMonthAfter(date);Di2015NewLine        Console.WriteLine("{0} {1}", date,Di2015NewLine                          next == null ? (object) "Error" : next);Di2015NewLine    }Di2015NewLineDi2015NewLine    static DateTime? OneMonthAfter(DateTime date)Di2015NewLine    {Di2015NewLine        DateTime ret = date.AddMonths(1);Di2015NewLine        if (ret.Day != date.Day)Di2015NewLine        {Di2015NewLine            // Or throw an exceptionDi2015NewLine            return null;Di2015NewLine        }Di2015NewLine        return ret;Di2015NewLine    }Di2015NewLine}Di2015NewLine
538751Di2015UniqueSeparatorpublic static TValue GetValueOrDefault<TKey,TValue>Di2015NewLine    (this IDictionary<TKey, TValue> dictionary, TKey key)Di2015NewLine{Di2015NewLine    TValue ret;Di2015NewLine    // Ignore return valueDi2015NewLine    dictionary.TryGetValue(key, out ret);Di2015NewLine    return ret;Di2015NewLine}Di2015NewLine
538804Di2015UniqueSeparatorGetHashCode
538815Di2015UniqueSeparatorDefault.aspx
538815Di2015UniqueSeparatorCodeFile
538815Di2015UniqueSeparatorCodebehind
538815Di2015UniqueSeparatorSite.master
538935Di2015UniqueSeparatorThread _thread;Di2015NewLineDi2015NewLineprotected override void OnStart(string[] args)Di2015NewLine{Di2015NewLine    // Comment in to debugDi2015NewLine    // Debugger.Break()Di2015NewLineDi2015NewLine    // Do initial setup and initializationDi2015NewLine    Setup();Di2015NewLineDi2015NewLine    // Kick off a thread to do workDi2015NewLine    _thread = new Thread(new MyClass().MyMethod)Di2015NewLine    _thread.Start();Di2015NewLineDi2015NewLine    // Exit this method to indicate the service has startedDi2015NewLine}Di2015NewLine
539069Di2015UniqueSeparatorprivate void dataGridView3_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e) {Di2015NewLine    if (e.RowIndex < 3) {Di2015NewLine        e.Cancel = true;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void dataGridView3_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e) {Di2015NewLine    if (e.Row.Index < 3) {Di2015NewLine        e.Cancel = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
539086Di2015UniqueSeparatorforeach (ListViewItem lvi in listView.Items) {Di2015NewLine  // do code hereDi2015NewLine  if (listView.Items.IndexOf(lvi) == 49)Di2015NewLine    break;Di2015NewLine}Di2015NewLine
539086Di2015UniqueSeparatorforeach (ListViewItem lvi in listView.Items) {Di2015NewLine  // do code hereDi2015NewLine  if (lvi.Index == 49) break;Di2015NewLine}Di2015NewLine
539086Di2015UniqueSeparatorforeach (ListViewItem lvi in listView.Items.Take(50)) {Di2015NewLine  // do code hereDi2015NewLine}Di2015NewLine
539086Di2015UniqueSeparator// loop through collection to a max of 50 or the number of itemsDi2015NewLinefor(int i = 0; i < listView.Items.Count && i < 50; i++){Di2015NewLine    listView.Items[i]; //access the current itemDi2015NewLineDi2015NewLine}Di2015NewLine
539219Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLinepublic class MyWidget : Control {Di2015NewLine  public MyWidget() {Di2015NewLine    this.BackColor = Color.Yellow;Di2015NewLine  }Di2015NewLine  protected override void OnGotFocus(EventArgs e) {Di2015NewLine    CreateCaret(this.Handle, IntPtr.Zero, 2, this.Height - 2);Di2015NewLine    SetCaretPos(2, 1);Di2015NewLine    ShowCaret(this.Handle);Di2015NewLine    base.OnGotFocus(e);Di2015NewLine  }Di2015NewLine  protected override void OnLostFocus(EventArgs e) {Di2015NewLine    DestroyCaret();Di2015NewLine    base.OnLostFocus(e);Di2015NewLine  }Di2015NewLine  [DllImport("user32.dll", SetLastError = true)]Di2015NewLine  private static extern bool CreateCaret(IntPtr hWnd, IntPtr hBmp, int w, int h);Di2015NewLine  [DllImport("user32.dll", SetLastError = true)]Di2015NewLine  private static extern bool SetCaretPos(int x, int y);Di2015NewLine  [DllImport("user32.dll", SetLastError = true)]Di2015NewLine  private static extern bool ShowCaret(IntPtr hWnd);Di2015NewLine  [DllImport("user32.dll", SetLastError = true)]Di2015NewLine  private static extern bool DestroyCaret();Di2015NewLine}Di2015NewLine
539264Di2015UniqueSeparatorstring username = "your";Di2015NewLinestring password = "password";Di2015NewLineHttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://moje.azet.sk/prihlasenie.phtml?KDE=www.azet.sk%2Findex.phtml%3F");Di2015NewLineusing (StreamWriter writer = new StreamWriter(request.GetRequestStream(), Encoding.ASCII))Di2015NewLine{Di2015NewLine    writer.Write("nick=" + username + "&password=" + password);Di2015NewLine}Di2015NewLineDi2015NewLineHttpWebResponse response = (HttpWebResponse)request.GetResponse();Di2015NewLine//Retrieve your cookie that id's your sessionDi2015NewLine//response.CookiesDi2015NewLineDi2015NewLineusing (StreamReader reader = new StreamReader(response.GetResponseStream())Di2015NewLine{Di2015NewLine    Console.WriteLine(reader.ReadToEnd());Di2015NewLine}Di2015NewLine
539277Di2015UniqueSeparator<appSettings file="user.config">Di2015NewLine    <add key="foo" value="some value unchanged by setup"/>Di2015NewLine</appSettings>Di2015NewLine
539277Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Xml;Di2015NewLineDi2015NewLinenamespace UtilsDi2015NewLine{Di2015NewLine    public class ConfigGeneratorDi2015NewLine    {Di2015NewLine        public static void WriteExternalAppConfig(string configFilePath, IDictionary<string, string> userConfiguration)Di2015NewLine        {Di2015NewLine            using (XmlTextWriter xw = new XmlTextWriter(configFilePath, Encoding.UTF8))Di2015NewLine            {Di2015NewLine                xw.Formatting = Formatting.Indented;Di2015NewLine                xw.Indentation = 4;Di2015NewLine                xw.WriteStartDocument();Di2015NewLine                xw.WriteStartElement("appSettings");Di2015NewLineDi2015NewLine                foreach (KeyValuePair<string, string> pair in userConfiguration)Di2015NewLine                {Di2015NewLine                    xw.WriteStartElement("add");Di2015NewLine                    xw.WriteAttributeString("key", pair.Key);Di2015NewLine                    xw.WriteAttributeString("value", pair.Value);Di2015NewLine                    xw.WriteEndElement();Di2015NewLine                }Di2015NewLineDi2015NewLine                xw.WriteEndElement();Di2015NewLine                xw.WriteEndDocument();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
539277Di2015UniqueSeparatorstring configFilePath = string.Format("{0}{1}User.config", targetDir, Path.DirectorySeparatorChar);Di2015NewLineDi2015NewLineIDictionary<string, string> userConfiguration = new Dictionary<string, string>();Di2015NewLineDi2015NewLineuserConfiguration["Server"] = Context.Parameters["Server"];Di2015NewLineuserConfiguration["Port"] = Context.Parameters["Port"];Di2015NewLineDi2015NewLineConfigGenerator.WriteExternalAppConfig(configFilePath, userConfiguration);Di2015NewLine
539304Di2015UniqueSeparatorpublic void BuildGrid()Di2015NewLine{Di2015NewLine    LayoutRoot.ShowGridLines = true;Di2015NewLine    int rowIndex = 0;Di2015NewLine    foreach (string s in _names)Di2015NewLine    {Di2015NewLine        LayoutRoot.RowDefinitions.Add(new RowDefinition());Di2015NewLine        var btn = new Button()Di2015NewLine        LayoutRoot.Children.Add(btn);Di2015NewLine        Grid.SetRow(btn, rowIndex);Di2015NewLine        rowIndex += 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
539308Di2015UniqueSeparator<table style="float:left">Di2015NewLine    ...Di2015NewLine</table>Di2015NewLine
539308Di2015UniqueSeparator<%@ Control Language="C#" ... %>Di2015NewLine<div style="float:right">  Di2015NewLine<table>Di2015NewLine  ...Di2015NewLine</table>Di2015NewLine</div>Di2015NewLine
539523Di2015UniqueSeparatorpublic interface Animal
539523Di2015UniqueSeparatorinterface
539523Di2015UniqueSeparatorCat
539523Di2015UniqueSeparatorDog
539523Di2015UniqueSeparatorAnimal meowAnimal = new Cat();  // No cast requiredDi2015NewLineAnimal barkAnimal = new Dog();  // No cast requiredDi2015NewLineDi2015NewLineCat myCat = (Cat) meowAnimal; // Explicit cast neededDi2015NewLineDog myDog = (Dog) barkAnimal; // Explicit cast neededDi2015NewLineDi2015NewLineDog myPet = (Dog) meowAnimal; // Will compile but throws an ExceptionDi2015NewLine
539523Di2015UniqueSeparatortry
539523Di2015UniqueSeparatorcatch
539523Di2015UniqueSeparatoras
539523Di2015UniqueSeparatorDog myDog = barkAnimal as Dog;Di2015NewLineDog myPet = meowAnimal as Dog;Di2015NewLine
539523Di2015UniqueSeparatorif (meowAnimal instanceof Dog)
539523Di2015UniqueSeparatoras
539523Di2015UniqueSeparatoris
539523Di2015UniqueSeparatoras
540075Di2015UniqueSeparatorType thisType = this.GetType();Di2015NewLineMethodInfo theMethod = thisType.GetMethod(TheCommandString);Di2015NewLinetheMethod.Invoke(this, userParameters);Di2015NewLine
540081Di2015UniqueSeparatorvar name = (from part in location.Split(',')Di2015NewLine            let pair = part.Split('=')Di2015NewLine            where pair[0].Trim() == "Name"Di2015NewLine            select pair[1].Trim()).FirstOrDefault();Di2015NewLine
540081Di2015UniqueSeparator    var records = new[] {Di2015NewLine        new {Foo = 123, Location="Theater=2, Name=regal, Area=Area1"},Di2015NewLine        new {Foo = 123, Location="Name=cineplex, Area=Area1, Theater=1"},Di2015NewLine        new {Foo = 123, Location="Theater=2, Area=Area2, Name=regal"},Di2015NewLine    };Di2015NewLine    var qry = from record in recordsDi2015NewLine              let name = (from part in record.Location.Split(',')Di2015NewLine                          let pair = part.Split('=')Di2015NewLine                          where pair[0].Trim() == "Name"Di2015NewLine                          select pair[1].Trim()).FirstOrDefault()Di2015NewLine              group record by name;Di2015NewLine    foreach (var grp in qry)Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0}: {1}", grp.Key, grp.Count());Di2015NewLine    }Di2015NewLine
540143Di2015UniqueSeparatorpublic static void SpawnAndWait(IEnumerable<Action> actions)Di2015NewLine{Di2015NewLine    var list = actions.ToList();Di2015NewLine    var handles = new ManualResetEvent[actions.Count()];Di2015NewLine    for (var i = 0; i < list.Count; i++)Di2015NewLine    {Di2015NewLine        handles[i] = new ManualResetEvent(false);Di2015NewLine        var currentAction = list[i];Di2015NewLine        var currentHandle = handles[i];Di2015NewLine        Action wrappedAction = () => { try { currentAction(); } finally { currentHandle.Set(); } };Di2015NewLine        ThreadPool.QueueUserWorkItem(x => wrappedAction());Di2015NewLine    }Di2015NewLineDi2015NewLine    WaitHandle.WaitAll(handles);Di2015NewLine}Di2015NewLine
540325Di2015UniqueSeparatorString.Format("{0:yyyy-MM-dd} 00:00:00", myDateTime)Di2015NewLine
540325Di2015UniqueSeparatormyDateTime.Date.ToString("yyyy-MM-dd") + " 00:00:00"Di2015NewLine
540325Di2015UniqueSeparatormyBindingSource.Filter = String.Format("myDateField >= '{0:yyyy-MM-dd}' AND myDateField < '{1:yyyy-MM-dd}'", myDateTime, myDateTime.AddDays(1));Di2015NewLine
540411Di2015UniqueSeparatorstruct PacketDi2015NewLine{Di2015NewLine    public byte STX;Di2015NewLine    public UInt16 DataLength;Di2015NewLine    public string Data;Di2015NewLine    public byte CRC;Di2015NewLine    public byte ETX;Di2015NewLine}Di2015NewLineDi2015NewLine//Warning: Need to add error handlingDi2015NewLineclass PacketReaderDi2015NewLine{Di2015NewLine    private BinaryReader _reader;Di2015NewLineDi2015NewLine    public PacketReader(Stream stream)Di2015NewLine    {Di2015NewLine        _reader = new BinaryReader(stream);Di2015NewLine    }Di2015NewLineDi2015NewLine    Packet ReadPacket()Di2015NewLine    {Di2015NewLine        var packet = new Packet() Di2015NewLine            {Di2015NewLine                STX = _reader.ReadByte(),Di2015NewLine                DataLength = _reader.ReadUInt16(),Di2015NewLine                Data = Encoding.ASCII.GetString(Di2015NewLine                    _reader.ReadBytes(packet.DataLength)),Di2015NewLine                CRC = _reader.ReadByte(),Di2015NewLine                ETX = _reader.ReadByte()Di2015NewLine            };Di2015NewLineDi2015NewLine        return packet;Di2015NewLine    }Di2015NewLine}Di2015NewLine
540434Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class Wrapper {Di2015NewLine    [DataMember(Order = 1)]Di2015NewLine    public List<Foo> Foos {get {...}}Di2015NewLineDi2015NewLine    [DataMember(Order = 2)]Di2015NewLine    public List<Bar> Bars {get {...}}Di2015NewLineDi2015NewLine    [DataMember(Order = 3)]Di2015NewLine    public List<Blop> Blops {get {...}}Di2015NewLine}Di2015NewLine
540434Di2015UniqueSeparatorFoo
540434Di2015UniqueSeparatorBar
540434Di2015UniqueSeparatorBlop
540434Di2015UniqueSeparatorOrder
540434Di2015UniqueSeparator[ProtoBehavior]
540434Di2015UniqueSeparatorFoo
540434Di2015UniqueSeparatorBar
540434Di2015UniqueSeparatorBlop
540434Di2015UniqueSeparatorOrder
540434Di2015UniqueSeparatorWrapper
540530Di2015UniqueSeparatorGetExportedTypes
540530Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinepublic class ShowTypeCountsDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        AppDomain domain = AppDomain.CurrentDomain;Di2015NewLine        foreach (Assembly assembly in domain.GetAssemblies())Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0}: {1}",Di2015NewLine                              assembly.GetName().Name,Di2015NewLine                              assembly.GetExportedTypes().Length);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
540530Di2015UniqueSeparatormscorlib: 1282Di2015NewLineShowTypeCounts: 1Di2015NewLine
540530Di2015UniqueSeparatorImports SystemDi2015NewLineImports System.ReflectionDi2015NewLineDi2015NewLinePublic Module ShowCountsDi2015NewLineDi2015NewLine    Sub Main()Di2015NewLine        Dim domain As AppDomain = AppDomain.CurrentDomainDi2015NewLineDi2015NewLine        For Each assembly As Assembly in domain.GetAssembliesDi2015NewLineDi2015NewLine            Console.WriteLine("{0}: {1}", _Di2015NewLine                              assembly.GetName.Name, _Di2015NewLine                              assembly.GetExportedTypes.Length)Di2015NewLineDi2015NewLine        NextDi2015NewLine    End SubDi2015NewLineDi2015NewLineEnd ModuleDi2015NewLine
540530Di2015UniqueSeparatormscorlib: 1282Di2015NewLineShowTypeCounts: 1Di2015NewLine
540663Di2015UniqueSeparatorMock<IRepository> repositoryMock = new Mock<IRepository>();Di2015NewLineDi2015NewLineCustomAttribute attribute = new CustomAttribute();Di2015NewLineDi2015NewLine// option #1: to the instanceDi2015NewLineTypeDescriptor.AddAttributes(repositoryMock.Object, attribute );Di2015NewLineDi2015NewLine// option #2: to the generated typeDi2015NewLineTypeDescriptor.AddAttributes(repositoryMock.Object.GetType(), attributes);Di2015NewLine
540663Di2015UniqueSeparatorpublic interface IAttributeStrategyDi2015NewLine{Di2015NewLine    Attribute[] GetAttributes(Type owner, Type attributeType, bool inherit);Di2015NewLine    Attribute[] GetAttributes(Type owner, bool inherit);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DefaultAttributeStrategy : IAttributeStrategyDi2015NewLine{Di2015NewLine    public Attribute[] GetAttributes(Type owner, Type attributeType, bool inherit)Di2015NewLine    {Di2015NewLine        return owner.GetCustomAttributes(attributeType, inherit);Di2015NewLine    }Di2015NewLineDi2015NewLine    public Attribute[] GetAttributes(Type owner, bool inherit)Di2015NewLine    {Di2015NewLine        return owner.GetCustomAttributes(inherit);Di2015NewLine    }Di2015NewLine}Di2015NewLine
540766Di2015UniqueSeparatorstring name = GetFromDatabase("attribute");Di2015NewLineEnum.Parse(typeof(aa),name);Di2015NewLine
540785Di2015UniqueSeparator[AttributeProvider]
540785Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineclass Foo {Di2015NewLine    [AttributeProvider(typeof(IListSource))]Di2015NewLine    public object Bar { get; set; }Di2015NewLineDi2015NewLine    static void Main() {Di2015NewLine        var bar = TypeDescriptor.GetProperties(typeof(Foo))["Bar"];Di2015NewLine        foreach (Attribute attrib in bar.Attributes) {Di2015NewLine            Console.WriteLine(attrib);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
540785Di2015UniqueSeparatorSystem.SerializableAttributeDi2015NewLineSystem.ComponentModel.AttributeProviderAttributeDi2015NewLineSystem.ComponentModel.EditorAttributeDi2015NewLineSystem.Runtime.InteropServices.ComVisibleAttributeDi2015NewLineSystem.Runtime.InteropServices.ClassInterfaceAttributeDi2015NewLineSystem.ComponentModel.TypeConverterAttributeDi2015NewLineSystem.ComponentModel.MergablePropertyAttributeDi2015NewLine
540844Di2015UniqueSeparatorpublic static void Copy<T>(T source, T destination,Di2015NewLine    string propertyName) {Di2015NewLine    PropertyInfo prop = typeof(T).GetProperty(propertyName);Di2015NewLine    prop.SetValue(destination, prop.GetValue(source, null), null);Di2015NewLine}Di2015NewLine
540844Di2015UniqueSeparatorpublic static void Copy(object source, object destination,Di2015NewLine    string propertyName) {Di2015NewLine    PropertyInfo sourceProp = source.GetType().GetProperty(propertyName);Di2015NewLine    PropertyInfo destProp = destination.GetType().GetProperty(propertyName);Di2015NewLine    destProp.SetValue(destination, sourceProp.GetValue(source, null), null);Di2015NewLine}Di2015NewLine
540887Di2015UniqueSeparatorpublic static string ConvertSdsFileMaskToStringMask(string sdsFileMaskString) Di2015NewLine{Di2015NewLine    Regex bracketsExpression = new Regex(@"\\[[^[]*]");Di2015NewLine    int hits = 0;Di2015NewLine    return bracketsExpression.Replace(sdsFileMaskString, match => Di2015NewLine    {Di2015NewLine        string result = String.Format("{{{0}}}", hits.ToString());Di2015NewLine        hits++;Di2015NewLine        return result;    Di2015NewLine    });Di2015NewLine}Di2015NewLine
540887Di2015UniqueSeparatorpublic static string ConvertSdsFileMaskToStringMask(string sdsFileMaskString) Di2015NewLine{Di2015NewLine    Regex bracketsExpression = new Regex(@"\\[[^[]*]");Di2015NewLine    int hits = 0;Di2015NewLine    return bracketsExpression.Replace(sdsFileMaskString, Di2015NewLine        match => "{" + (hits++) + "}");Di2015NewLine}Di2015NewLine
540894Di2015UniqueSeparatordynamic
540894Di2015UniqueSeparatorint size = settings["core"]["defaultPagingSize"].ToInt32();Di2015NewLine
540955Di2015UniqueSeparatorstatic bool ContainsFragment(string[] paths, string fragment)Di2015NewLine{Di2015NewLine    // paths **must** be pre-sorted via Array.Sort(paths);Di2015NewLine    if (paths.Length == 0) return false;Di2015NewLine    int index = Array.BinarySearch(paths, fragment);Di2015NewLine    // we want the index of the *next highest* pathDi2015NewLine    if (index < 0) { // no matchDi2015NewLine        index = ~index; Di2015NewLine    } else { // exact matchDi2015NewLine        index++; // for strict substring (non-equal)Di2015NewLine    }Di2015NewLine    return index < paths.Length && paths[index].StartsWith(fragment);Di2015NewLine}Di2015NewLine
540955Di2015UniqueSeparatorbool found = false;Di2015NewLinefor(int i = 0 ; i < paths.Length ; i++) {Di2015NewLine    if(paths[i].StartsWith(fragment) &&Di2015NewLine          paths[i].Length != fragment.Length)Di2015NewLine    {Di2015NewLine        found = true;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
540964Di2015UniqueSeparator<ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>Di2015NewLine
540964Di2015UniqueSeparator<ProjectGuid>...</ProjectGuid>
540966Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace MyCustomControlsDi2015NewLine{Di2015NewLineDi2015NewLinepublic delegate void MyDelegate(Object sender, EventArgs e);Di2015NewLineDi2015NewLineclass MyListView : ListViewDi2015NewLine{Di2015NewLineDi2015NewLine    private static readonly object EventRightClickRaised = new object();Di2015NewLineDi2015NewLine    public MyListView() Di2015NewLine    {Di2015NewLine        //RightClick += new MyDelegate(OnRightClick);Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler RightClickDi2015NewLine    {Di2015NewLine        addDi2015NewLine        {Di2015NewLine            Events.AddHandler(EventRightClickRaised, value);Di2015NewLine        }Di2015NewLine        removeDi2015NewLine        {Di2015NewLine            Events.RemoveHandler(EventRightClickRaised, value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnMouseUp(MouseEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Button == MouseButtons.Right)Di2015NewLine        {Di2015NewLine            OnRightClick(EventArgs.Empty);Di2015NewLine        }Di2015NewLine        base.OnMouseUp(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void OnRightClick(EventArgs e)Di2015NewLine    {Di2015NewLine        EventHandler RightClickRaised = (EventHandler)Events[EventRightClickRaised];Di2015NewLine        if (RightClickRaised != null)Di2015NewLine        {Di2015NewLine            RightClickRaised(this, e);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine}Di2015NewLine
541105Di2015UniqueSeparatorFile.Exists(string)Di2015NewLine
541105Di2015UniqueSeparatorDirectory.Exists(string)Di2015NewLine
541105Di2015UniqueSeparator FileInfo fi = new FileInfo(fName);Di2015NewLine if (fi.Exists)Di2015NewLine    //Do stuffDi2015NewLine
541105Di2015UniqueSeparatorDirectoryInfo di = new DirectoryInfo(fName);Di2015NewLine if (di.Exists)Di2015NewLine    //Do stuffDi2015NewLine
541186Di2015UniqueSeparatorSomeThings
541186Di2015UniqueSeparatorsomeEntity
541186Di2015UniqueSeparatorsomeEntity.SomeThings
541186Di2015UniqueSeparatorSomeThings
541186Di2015UniqueSeparatorEmployee
541186Di2015UniqueSeparatort
541186Di2015UniqueSeparatorEmployee
541186Di2015UniqueSeparatorvar something = someEntity.SomeThings.First(t => t.Equals(employee));Di2015NewLine
541186Di2015UniqueSeparator.Equals()
541186Di2015UniqueSeparator==
541186Di2015UniqueSeparatorvar myThings = dataContext.Things.Include("employee");Di2015NewLine
541248Di2015UniqueSeparatorInitializeComponent()
541248Di2015UniqueSeparator    dateTimePicker1.Value = DateTime.Today.AddDays(-1);Di2015NewLine
541271Di2015UniqueSeparator public void PopulateUserDDL(UnitOfWork UnitOfWorkObject)Di2015NewLine {Di2015NewLine     List<User> UserCollection = mUserService.GetUserCollection();  //get a collection of objects to bind this ddlDi2015NewLineDi2015NewLine     List<ILookupDTO> UserLookupDTO = new List<ILookupDTO>();Di2015NewLineDi2015NewLine     UserLookupDTO.Add(new User(" ", "0"));Di2015NewLine     //insert a blank row ... if you are into that type of thingDi2015NewLineDi2015NewLine     foreach (var User in UserCollection) {Di2015NewLine         UserLookupDTO.Add(new User(User.FullName, User.ID.ToString()));Di2015NewLine     }Di2015NewLineDi2015NewLine     LookupCollection LookupCollectionObject = new LookupCollection(UserLookupDTO);Di2015NewLine     LookupCollectionObject.BindTo(mView.UserList);Di2015NewLineDi2015NewLine     if (UnitOfWorkObject == null) {Di2015NewLine         return;Di2015NewLine     }Di2015NewLineDi2015NewLine     if (UserCollection == null) {Di2015NewLine         return;Di2015NewLine     }Di2015NewLineDi2015NewLine     for (i = 0; i <= UserCollection.Count - 1; i++) {Di2015NewLine         if (UserCollection(i).ID == UnitOfWorkObject.User.ID) {Di2015NewLine             LookupCollectionObject.SelectedIndex = (i + 1);Di2015NewLine             //because we start at 0 instead of 1 (we inserted the blank row above)Di2015NewLine             break;Di2015NewLine         }Di2015NewLine     }Di2015NewLine }Di2015NewLine
541271Di2015UniqueSeparator/// <summary>Di2015NewLine/// This constr is used when you want to create a new Lookup Collection of ILookupDTODi2015NewLine/// </summary>Di2015NewLine/// <param name="txt">The text that will show up for the user in the lookup collection</param>Di2015NewLine/// <param name="val">The value that will be attached to the item in the lookup collection</param>Di2015NewLine/// <remarks></remarks>Di2015NewLinepublic New(string txt, string val) : base(txt, val)Di2015NewLine{Di2015NewLine}Di2015NewLine
541271Di2015UniqueSeparator public New(string txt, string val)Di2015NewLine {Di2015NewLine     mText = txt;Di2015NewLine     mValue = val;Di2015NewLine }Di2015NewLine
541271Di2015UniqueSeparator public interface ILookupDTODi2015NewLine {Di2015NewLine     string Text {Di2015NewLine         get;Di2015NewLine         set;Di2015NewLine     }Di2015NewLine     string Value {Di2015NewLine         get;Di2015NewLine         set;Di2015NewLine     }Di2015NewLine }Di2015NewLine
541271Di2015UniqueSeparator public class LookupCollectionDi2015NewLine {Di2015NewLine     private readonly IEnumerable<ILookupDTO> dtos;Di2015NewLine     private ILookupList mList;Di2015NewLineDi2015NewLine     public LookupCollection(IEnumerable<ILookupDTO> dtos)Di2015NewLine     {Di2015NewLine         this.dtos = dtos;Di2015NewLine     }Di2015NewLineDi2015NewLine     public void BindTo(ILookupList list)Di2015NewLine     {Di2015NewLine         mList = list;Di2015NewLineDi2015NewLine         mList.Clear();Di2015NewLineDi2015NewLine         foreach (ILookupDTO dto in dtos) {Di2015NewLine             mList.Add(dto);Di2015NewLine         }Di2015NewLine     }Di2015NewLineDi2015NewLine     public int SelectedIndex {Di2015NewLine         get { return mList.SelectedIndex; }Di2015NewLine         set { mList.SelectedIndex = value; }Di2015NewLine     }Di2015NewLineDi2015NewLine     public string SelectedValue {Di2015NewLine         get { return mList.SelectedValue; }Di2015NewLine         set { mList.SelectedValue = value; }Di2015NewLine     }Di2015NewLine }Di2015NewLine
541271Di2015UniqueSeparator public interface ILookupListDi2015NewLine {Di2015NewLine     void Add(ILookupDTO dto);Di2015NewLine     void Clear();Di2015NewLine     int Count();Di2015NewLine     int SelectedIndex {Di2015NewLine         get;Di2015NewLine         set;Di2015NewLine     }Di2015NewLine     string SelectedValue {Di2015NewLine         get;Di2015NewLine         set;Di2015NewLine     }Di2015NewLine }Di2015NewLine
541271Di2015UniqueSeparator public class WebLookupList : ILookupListDi2015NewLine {Di2015NewLineDi2015NewLine     private readonly ListControl listControl;Di2015NewLineDi2015NewLine     public WebLookupList(ListControl listControl)Di2015NewLine     {Di2015NewLine         this.listControl = listControl;Di2015NewLine     }Di2015NewLineDi2015NewLine     public void Clear()Di2015NewLine     {Di2015NewLine         listControl.Items.Clear();Di2015NewLine     }Di2015NewLineDi2015NewLine     public void Add(Interfaces.ILookupDTO dto)Di2015NewLine     {Di2015NewLine         listControl.Items.Add(new ListItem(dto.Text, dto.Value));Di2015NewLine     }Di2015NewLineDi2015NewLine     public int Count()Di2015NewLine     {Di2015NewLine         return listControl.Items.Count;Di2015NewLine     }Di2015NewLineDi2015NewLine     public int SelectedIndex {Di2015NewLine         get { return listControl.SelectedIndex; }Di2015NewLine         set { listControl.SelectedIndex = value; }Di2015NewLine     }Di2015NewLineDi2015NewLine     public string SelectedValue {Di2015NewLine         get { return listControl.SelectedValue; }Di2015NewLine         set { listControl.SelectedValue = value; }Di2015NewLine     }Di2015NewLine }Di2015NewLine
541271Di2015UniqueSeparator public class WPFLookupList : ILookupListDi2015NewLine {Di2015NewLineDi2015NewLine     private readonly ComboBox combobox;Di2015NewLineDi2015NewLine     public WPFLookupList(ComboBox combobox)Di2015NewLine     {Di2015NewLine         this.combobox = combobox;Di2015NewLine     }Di2015NewLineDi2015NewLine     public void Add(Interfaces.ILookupDTO dto)Di2015NewLine     {Di2015NewLine         ComboBoxItem item = new ComboBoxItem();Di2015NewLine         item.Content = dto.Text;Di2015NewLine         item.Tag = dto.Value;Di2015NewLineDi2015NewLine         combobox.Items.Add(item);Di2015NewLine     }Di2015NewLineDi2015NewLine     public void Clear()Di2015NewLine     {Di2015NewLine         combobox.Items.Clear();Di2015NewLine     }Di2015NewLineDi2015NewLine     public int Count()Di2015NewLine     {Di2015NewLine         return combobox.Items.Count;Di2015NewLine     }Di2015NewLineDi2015NewLine     public int SelectedIndex {Di2015NewLine         get { return combobox.SelectedIndex; }Di2015NewLine         set { combobox.SelectedIndex = value; }Di2015NewLine     }Di2015NewLineDi2015NewLine     public string SelectedValue {Di2015NewLine         get { return combobox.SelectedValue.Tag; }Di2015NewLine         set { combobox.SelectedValue.Tag = value; }Di2015NewLine     }Di2015NewLine }Di2015NewLine
541284Di2015UniqueSeparatora
541284Di2015UniqueSeparatorc
541284Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass DelphiRandomDi2015NewLine{Di2015NewLine    int _seed;Di2015NewLineDi2015NewLine    public DelphiRandom(int seed)Di2015NewLine    {Di2015NewLine        _seed = seed;Di2015NewLine    }Di2015NewLineDi2015NewLine    int GetNext() // note: returns negative numbers tooDi2015NewLine    {Di2015NewLine        _seed = _seed * 0x08088405 + 1;Di2015NewLine        return _seed;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Next(int maxValue)Di2015NewLine    {Di2015NewLine        ulong result = (ulong) (uint) GetNext() * (ulong) (uint) maxValue;Di2015NewLine        return (int) (result >> 32);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass AppDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        DelphiRandom r = new DelphiRandom(42);Di2015NewLine        for (int i = 0; i < 10; ++i)Di2015NewLine            Console.WriteLine(r.Next(100));Di2015NewLine    }Di2015NewLine}Di2015NewLine
541321Di2015UniqueSeparatorif (ErrorLoggingMethod.GetInvocationList().Length(0) == 0){Di2015NewLine    //Add your default handler to the delegateDi2015NewLine}Di2015NewLine
541323Di2015UniqueSeparatorpublic class StringPadder : ICustomFormatterDi2015NewLine{Di2015NewLine  public string Format(string format, object arg,Di2015NewLine       IFormatProvider formatProvider)Di2015NewLine  {Di2015NewLine     // do padding for string argumentsDi2015NewLine     // use default for othersDi2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class StringPadderFormatProvider : IFormatProviderDi2015NewLine{Di2015NewLine  public object GetFormat(Type formatType)Di2015NewLine  { Di2015NewLine     if (formatType == typeof(ICustomFormatter))Di2015NewLine        return new StringPadder();Di2015NewLineDi2015NewLine     return null;Di2015NewLine  }Di2015NewLine  public static readonly IFormatProvider Default =Di2015NewLine     new StringPadderFormatProvider();Di2015NewLine}Di2015NewLine
541323Di2015UniqueSeparatorstring.Format(StringPadderFormatProvider.Default, "->{0:x20}<-", "Hello");Di2015NewLine
541348Di2015UniqueSeparator[MethodImpl]
541348Di2015UniqueSeparator[MethodImpl(MethodImplOptions.Synchronized)]Di2015NewLinepublic void SomeMethod() {/* code */}Di2015NewLine
541348Di2015UniqueSeparatorprivate int i;Di2015NewLinepublic int SomePropertyDi2015NewLine{Di2015NewLine    [MethodImpl(MethodImplOptions.Synchronized)]Di2015NewLine    get { return i; }Di2015NewLine    [MethodImpl(MethodImplOptions.Synchronized)]Di2015NewLine    set { i = value; }Di2015NewLine}Di2015NewLine
541348Di2015UniqueSeparatorpublic int SomeProperty {get;set;} // not synchronizedDi2015NewLinepublic event EventHandler SomeEvent; // synchronizedDi2015NewLine
541348Di2015UniqueSeparatorMethodImpl
541348Di2015UniqueSeparatorthis
541348Di2015UniqueSeparatortypeof(Foo)
541348Di2015UniqueSeparatorprivate readonly object syncLock = new object();Di2015NewLinepublic void SomeMethod() {Di2015NewLine    lock(syncLock) { /* code */ }Di2015NewLine}Di2015NewLine
541348Di2015UniqueSeparatorlock(this)
541348Di2015UniqueSeparatorlock(Type)
541348Di2015UniqueSeparatorInterlocked
541348Di2015UniqueSeparatorMonitor.Wait
541348Di2015UniqueSeparatorMonitor.Pulse
541444Di2015UniqueSeparatorPage firstPage = Session.Linq<Page>()Di2015NewLine.OrderBy(page => page.Index)Di2015NewLine.FirstOrDefault(page=> page.Location.URL == "some-location-url");Di2015NewLine
541455Di2015UniqueSeparatorCanvas.SetLeft(theObject, 50)Di2015NewLine
541605Di2015UniqueSeparatorstatic class ProgramDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// The main entry point for the application.Di2015NewLine    /// </summary>Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine        Application.Run(new Form1());Di2015NewLine    }Di2015NewLine}Di2015NewLine
541605Di2015UniqueSeparatorstatic class ProgramDi2015NewLine{Di2015NewLineDi2015NewLine    public static string[] CommandLineArgs { get; private set;}Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// The main entry point for the application.Di2015NewLine    /// </summary>Di2015NewLine    [STAThread]Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        CommandLineArgs = args;Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine        Application.Run(new Form1());Di2015NewLine    }Di2015NewLine}Di2015NewLine
541605Di2015UniqueSeparatorProgram.CommandLineArgsDi2015NewLine
541624Di2015UniqueSeparatorgroup arrayObject byDi2015NewLine
541624Di2015UniqueSeparatorgroup arrayObject1 byDi2015NewLine
541690Di2015UniqueSeparator...Di2015NewLineINSERT INTO Table ( ... ) VALUES ( ... )Di2015NewLineINSERT INTO Table ( ... ) VALUES ( ... )Di2015NewLineINSERT INTO Table ( ... ) VALUES ( ... )Di2015NewLineGODi2015NewLineINSERT INTO Table ( ... ) VALUES ( ... )Di2015NewLineINSERT INTO Table ( ... ) VALUES ( ... )Di2015NewLine...Di2015NewLine
541690Di2015UniqueSeparatorINSERT INTO Table ...Di2015NewLineSELECT ...Di2015NewLineFROM OtherTable WHERE Id > x and Id < yDi2015NewLine
541747Di2015UniqueSeparatorSystem.Net.Dns.GetHostEntry("").HostNameDi2015NewLine
541815Di2015UniqueSeparatorprotected virtual void Dispose(bool disposing)Di2015NewLine{Di2015NewLine   if (disposing)Di2015NewLine   { Di2015NewLine      // dispose managed resources (here your TcpClient)Di2015NewLine   }Di2015NewLineDi2015NewLine   // dispose your unmanaged resources Di2015NewLine   // handles etc using static interop methods.Di2015NewLine}Di2015NewLine
541841Di2015UniqueSeparatorSystem.Net.Sockets
541841Di2015UniqueSeparatorTcpClient
541849Di2015UniqueSeparatorpublic MyComponent(IContainer container) {Di2015NewLine    container.Add(this);Di2015NewLine    InitializeComponent();Di2015NewLine}Di2015NewLine
541849Di2015UniqueSeparatorInitializeComponent()
541849Di2015UniqueSeparatorcontainer.Add()
541849Di2015UniqueSeparatorpublic MyComponent(IContainer container) : this() {Di2015NewLine    container.Add(this);Di2015NewLine}Di2015NewLine
541849Di2015UniqueSeparatorcontainer.Add()
541849Di2015UniqueSeparatorInitializeComponent()
541893Di2015UniqueSeparatorvar serviceCalls = sc.Service.GetOpenServiceCalls("").OrderBy(call => DataBinder.Eval(call, sortBy));Di2015NewLinereturn serviceCalls.ToPagedList(pageIndex, 2);Di2015NewLine
541927Di2015UniqueSeparatorTextBox[] foos = new TextBox[] { foo1, foo2, foo3, /* etc */ };Di2015NewLineTextBox[] bars = new TextBox[] { bar1, bar2, bar3, /* etc */ };Di2015NewLineDi2015NewLinefor (int i = 0; i <= 10; i++)Di2015NewLine    if (foos[i].Text.Length != 0 && bars[i].Text.Length != 0)Di2015NewLine        output.Text += myStrings[i] + "/" + foos[i].Text + bars[i].Text;Di2015NewLine
541994Di2015UniqueSeparatorint count = source.Count(f => f == '/');Di2015NewLine
541994Di2015UniqueSeparatorint count = source.Split('/').Length - 1;Di2015NewLine
542027Di2015UniqueSeparatorThread.CurrentThread.ManagedThreadIdDi2015NewLine
542099Di2015UniqueSeparatorrequest.Method = "POST";Di2015NewLineDi2015NewLineusing (StreamWriter writer = new StreamWriter(request.GetRequestStream(), Encoding.ASCII))Di2015NewLine{Di2015NewLine    writer.Write("nick=" + username + "&password=" + password);Di2015NewLine}Di2015NewLine
542117Di2015UniqueSeparatordropdownlist1.items.insert(0, "----Select Sort Method----")Di2015NewLinedropdownlist1.items.insert(1, new ListItem("Alphabetic Ascending", "AlphaAsc"))Di2015NewLinedropdownlist1.items.insert(2, new ListItem("Alphabetic Descending", "AlphaDesc"))Di2015NewLinedropdownlist1.items.insert(3, new ListItem("Numeric Ascending", "NumAsc"))Di2015NewLinedropdownlist1.items.insert(4, new ListItem("Numeric Descending", "NumDesc"))Di2015NewLinedropdownlist1.selectedindex = 0Di2015NewLine
542117Di2015UniqueSeparatorif dropdownlist1.selectedindex <> 0 thenDi2015NewLine   select case dropdownlist1.selectedvalueDi2015NewLine       case "AlphaAsc"Di2015NewLine            Insert Code to Sort ListBox1 Alphabetically in ascending orderDi2015NewLine       case "AlphaDesc"Di2015NewLine            Insert Code to sort ListBox1 Alphabetically in descending orderDi2015NewLine       case "NumAsc"Di2015NewLine            Insert code to sort ListBox1 Numerically in ascending orderDi2015NewLine       case "NumDesc"Di2015NewLine            Insert code to sort ListBox1 Numerically in descending orderDi2015NewLine   end selectDi2015NewLineend ifDi2015NewLine
542246Di2015UniqueSeparatorEqualityComparer<T>
542246Di2015UniqueSeparatorthis[i]
542246Di2015UniqueSeparatorcollB[i]
542299Di2015UniqueSeparatorlistView1.Invoke(d)Di2015NewLine
542299Di2015UniqueSeparatorthis.Invoke(d)Di2015NewLine
542348Di2015UniqueSeparatorSELECT * INTO [BackupTable] FROM [OriginalTable]Di2015NewLine
542628Di2015UniqueSeparatorpublic void BindGenericList<T>(List<T> list)Di2015NewLine{Di2015NewLine    DataSource = new BindingListView<T>(list);Di2015NewLine}Di2015NewLine
542628Di2015UniqueSeparatorpublic void GetObjectFromRow<T>(int rowIndex)Di2015NewLine{Di2015NewLine    BindingListView<T> bindingListView = DataSource as BindingListView<T>;Di2015NewLineDi2015NewLine    return (null != bindingListView) ? bindingListView[rowIndex].Object : default(T);Di2015NewLine}Di2015NewLine
542629Di2015UniqueSeparatorlock(Cache)Di2015NewLine  {Di2015NewLine    // do something with cache that otherwise wouldn't be threadsafeDi2015NewLine  }Di2015NewLine
542663Di2015UniqueSeparatorString htmlMessage = e.Message.Replace("\\n", "<br/>");Di2015NewLine
542684Di2015UniqueSeparatorvar timeLayouts =Di2015NewLine    from tempvalue in XMLDoc.Descendants("time-layout")Di2015NewLine    let tempStartTimes = tempvalue.Elements("start-valid-time").Di2015NewLine            Select((x, i) => new { Index = i, ValidDateTime = (DateTime)x })Di2015NewLine    let tempEndTimes = tempvalue.Elements("end-valid-time").Di2015NewLine            Select((x, i) => new { Index = i, ValidDateTime = (DateTime)x })Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        LayoutKey = tempvalue.Element("layout-key").Value,Di2015NewLine        ValidTimeRanges =Di2015NewLine            from s in tempStartTimesDi2015NewLine            from e in tempEndTimesDi2015NewLine            where s.Index == e.IndexDi2015NewLine            select new Di2015NewLine            { Di2015NewLine                Index = s.Index, Di2015NewLine                ValidStartDateTime = s.ValidDateTime, Di2015NewLine                ValidEndDateTime = e.ValidDateTime Di2015NewLine            }Di2015NewLine    };Di2015NewLine
542684Di2015UniqueSeparatorvar parameters =Di2015NewLine    from tempvalue in XMLDoc.Descendants("temperature")Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        TemperatureType = (string) tempvalue.Attribute("type"),Di2015NewLine        TimeLayout = (string) tempvalue.Attribute("time-layout"),Di2015NewLine        Temperatures = tempvalue.Elements("value").Select((x, i) =>Di2015NewLine            new { Index = i, Temperature = (int)x })Di2015NewLine    };Di2015NewLine
542684Di2015UniqueSeparatorvar maximums =Di2015NewLine    from p in parametersDi2015NewLine    where p.TemperatureType == "maximum"Di2015NewLine    from tl in timeLayoutsDi2015NewLine    where tl.LayoutKey == p.TimeLayoutDi2015NewLine    from tr in tl.ValidTimeRangesDi2015NewLine    from t in p.TemperaturesDi2015NewLine    where tr.Index == t.IndexDi2015NewLine    select new { tr.ValidStartDateTime, tr.ValidEndDateTime, Di2015NewLine        t.Temperature };Di2015NewLineDi2015NewLinevar minimums =Di2015NewLine    from p in parametersDi2015NewLine    where p.TemperatureType == "minimum"Di2015NewLine    from tl in timeLayoutsDi2015NewLine    where tl.LayoutKey == p.TimeLayoutDi2015NewLine    from tr in tl.ValidTimeRangesDi2015NewLine    from t in p.TemperaturesDi2015NewLine    where tr.Index == t.IndexDi2015NewLine    select new { tr.ValidStartDateTime, tr.ValidEndDateTime, Di2015NewLine        t.Temperature };Di2015NewLine
542713Di2015UniqueSeparatorrequest.UseBinary = true
542713Di2015UniqueSeparatorrequest.UseBinary = false
542713Di2015UniqueSeparatorascii
542713Di2015UniqueSeparatorput
542734Di2015UniqueSeparatorAddHandler Obj.Ev_Event, AddressOf EventHandlerDi2015NewLine
542734Di2015UniqueSeparatorRemoveHandler Obj.Ev_Event, AddressOf EventHandlerDi2015NewLine
542734Di2015UniqueSeparatorDim web as New WebBrowser()Di2015NewLineAddHandler web.DocumentCompleted, AddressOf HandleDocumentCompletedDi2015NewLine
542752Di2015UniqueSeparatorpublic static void CopyFile(string source, string dest)Di2015NewLine{Di2015NewLine    source = fixPathForLong(source);Di2015NewLine    dest = fixPathForLong(dest);Di2015NewLineDi2015NewLine    if (!CopyFile(source, dest, false))Di2015NewLine    {Di2015NewLine        throw new Win32Exception();Di2015NewLine    }Di2015NewLine}Di2015NewLine
542755Di2015UniqueSeparatorstring.Format("{0:$#,##0.00;($#,##0.00);''}", value)Di2015NewLine
542791Di2015UniqueSeparatorbyte[] fileC = File.ReadAllBytes(dialog.FileName);Di2015NewLine
542896Di2015UniqueSeparatorHttpContext.Current.IsDebuggingEnabledDi2015NewLine
542933Di2015UniqueSeparatorbool IsHour(DateTime dt) Di2015NewLine{Di2015NewLine    return IsMinute(dt) && dt.Minute == 0;Di2015NewLine}Di2015NewLine
542933Di2015UniqueSeparatorpublic static bool IsHour(this DateTime dt) Di2015NewLine{Di2015NewLine    return dt.IsMinute() && dt.Minute == 0;Di2015NewLine}Di2015NewLine
542942Di2015UniqueSeparatorfoo = Portal("Foo")Di2015NewLineDi2015NewLinebar = Agent("bar")Di2015NewLineDi2015NewLinefoo.Connect("ip", 1234)Di2015NewLineDi2015NewLinefoo.Add(bar)Di2015NewLineDi2015NewLinebar.Ready = bar_ReadyDi2015NewLineDi2015NewLinedef bar_Ready(sender, msg):Di2015NewLineDi2015NewLine    print msg.bodyDi2015NewLine
543195Di2015UniqueSeparator    foreach (string tag in values.Keys) {Di2015NewLine        content = r.Replace(content, Di2015NewLine            m => (m.Groups["TagName"].Value == tag ? Di2015NewLine                values[tag].ToString() : m.Value));Di2015NewLine    }Di2015NewLine
543236Di2015UniqueSeparatorUpdatePanel
543236Di2015UniqueSeparator<select>
543236Di2015UniqueSeparatorscrollTop
543236Di2015UniqueSeparator<select>
543236Di2015UniqueSeparatorUpdatePanel
543236Di2015UniqueSeparatorClientScriptManager.RegisterOnSubmitStatement
543236Di2015UniqueSeparator<select>
543236Di2015UniqueSeparator<select>
543236Di2015UniqueSeparatorselectedIndex
543236Di2015UniqueSeparatorUpdatePanel
543317Di2015UniqueSeparatorprivate global::Orange.Grape.Peach.classname x;Di2015NewLine
543317Di2015UniqueSeparatorusing System.Linq;Di2015NewLinenamespace MyLinq Di2015NewLine{Di2015NewLine   // ...Di2015NewLine}Di2015NewLine
543317Di2015UniqueSeparatornamespace MyLinq Di2015NewLine{Di2015NewLine   using System.Linq;Di2015NewLineDi2015NewLine   // ...Di2015NewLine}Di2015NewLine
543329Di2015UniqueSeparatorpublic static string GetSecondWord(string text)Di2015NewLine{Di2015NewLine    // Yes, an appalling implementation...Di2015NewLine    return text.Split(' ')[1];Di2015NewLine}Di2015NewLineDi2015NewLinestring expected = "world";Di2015NewLinestring actual = GetSecondWord("hello world");Di2015NewLineDi2015NewLine// Good: the two strings should be *equal* as they have the same contentsDi2015NewLineAssert.AreEqual(expected, actual);Di2015NewLineDi2015NewLine// Bad: the two string *references* won't be the sameDi2015NewLineAssert.AreSame(expected, actual);Di2015NewLine
543329Di2015UniqueSeparatorAreNotEqual
543329Di2015UniqueSeparatorAreNotSame
543329Di2015UniqueSeparatorAreEqual
543329Di2015UniqueSeparatorAreSame
543329Di2015UniqueSeparatorAssert.AreSame
543329Di2015UniqueSeparatorint firstNumber = 1;Di2015NewLineint secondNumber = 1;Di2015NewLineobject boxedFirstNumber = firstNumber;Di2015NewLineobject boxedSecondNumber = secondNumber;Di2015NewLineDi2015NewLine// There are overloads for AreEqual for various value typesDi2015NewLine// (assuming NUnit here)Di2015NewLineAssert.AreEqual(firstNumber, secondNumber);Di2015NewLineDi2015NewLine// ... but not for AreSame, as it's not intended for use with value typesDi2015NewLineAssert.AreSame(boxedFirstNumber, boxedSecondNumber);Di2015NewLine
543329Di2015UniqueSeparatorfirstNumber
543329Di2015UniqueSeparatorsecondNumber
543329Di2015UniqueSeparatorint
543329Di2015UniqueSeparatorAreSame
543329Di2015UniqueSeparatorAreSame
543329Di2015UniqueSeparatorAreSame
543329Di2015UniqueSeparatorAreEqual
543329Di2015UniqueSeparatorEquals
543329Di2015UniqueSeparatorEquals
543329Di2015UniqueSeparatorstring firstString = 1.ToString();Di2015NewLinestring secondString = 1.ToString();Di2015NewLine
543329Di2015UniqueSeparatorAreEqual
543329Di2015UniqueSeparatorAreSame
543329Di2015UniqueSeparatorAreEqual
543371Di2015UniqueSeparatorprotected override void CreateChildControls()Di2015NewLine{Di2015NewLine    for (int i = 0; i < Controls.Count; i++)Di2015NewLine        if (Controls[i] is CollapsiblePanelExtender)Di2015NewLine            while (i + 2 < Controls.Count)Di2015NewLine            {Di2015NewLine                SearchUpdatePanel(Controls[i + 2]);Di2015NewLine                plhContent.Controls.Add(Controls[i + 2]);Di2015NewLine            }Di2015NewLine    base.CreateChildControls();Di2015NewLine}Di2015NewLine
543564Di2015UniqueSeparator<UserControl.Resources>Di2015NewLine    <myconverters:BackColor x:Key="BackColor" />Di2015NewLine</UserControl.Resources>Di2015NewLineDi2015NewLine<Grid x:Name="LayoutRoot" Background="{Binding SomeValue, Converter={StaticResource BackColor}" >Di2015NewLine</Grid>Di2015NewLine
543758Di2015UniqueSeparatorToString("#,0")Di2015NewLine
543977Di2015UniqueSeparatorclass TestDi2015NewLine{Di2015NewLine    void M (void) // Fits Action delegateDi2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    int M (int) // Fits Func<int,int> delegateDi2015NewLine    {Di2015NewLine        return 5;Di2015NewLine    }Di2015NewLineDi2015NewLine    void Test()Di2015NewLine    {Di2015NewLine        M.Exec(); // UHOH!!! Which Exec to resolve to ???Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static void Exec(this Action action) { }Di2015NewLine    public static void Exec(this Func<int, int> func) { }Di2015NewLine}Di2015NewLine
543977Di2015UniqueSeparatorclass ADi2015NewLine{Di2015NewLine    public static implicit operator int (A a)Di2015NewLine    {Di2015NewLine        return 5;Di2015NewLine    }Di2015NewLineDi2015NewLine    void F()Di2015NewLine    {Di2015NewLine       A a = new A();Di2015NewLine       a.Blah(); // Error! It won't implicitly try C.Blah()Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class CDi2015NewLine{Di2015NewLine    public static void Blah (int i)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
543977Di2015UniqueSeparatorA
543977Di2015UniqueSeparatorC.Blah(int)
544245Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLinestatic extern short VkKeyScan(char ch);Di2015NewLineDi2015NewLinestatic public Key ResolveKey(char charToResolve)Di2015NewLine{Di2015NewLine    return KeyInterop.KeyFromVirtualKey(VkKeyScan(charToResolve));Di2015NewLine}
544377Di2015UniqueSeparator        XDocument xdoc = XDocument.Load("file.xml");Di2015NewLine        var element = xdoc.Elements("MyXmlElement").Single();Di2015NewLine        element.Value = "foo";Di2015NewLine        xdoc.Save("file.xml");Di2015NewLine
544540Di2015UniqueSeparatorvar result = Di2015NewLine  (Di2015NewLine    from c in dataContext where username == Username and password == Password Di2015NewLine    select cDi2015NewLine  )Di2015NewLine
544728Di2015UniqueSeparatorprivate enum SimpleServiceCustomCommands { KillProcess = 128 };Di2015NewLineDi2015NewLineServiceControllerPermission scp = new ServiceControllerPermission(ServiceControllerPermissionAccess.Control, Environment.MachineName, "SERVICE_NAME");Di2015NewLinescp.Assert();Di2015NewLineSystem.ServiceProcess.ServiceController serviceCon = new System.ServiceProcess.ServiceController("SERVICE_NAME", Environment.MachineName);Di2015NewLineserviceCon.ExecuteCommand((int)SimpleServiceCustomCommands.KillProcess);Di2015NewLineDi2015NewLinemyProcess = System.Diagnostics.Process.Start(psi);Di2015NewLine
544728Di2015UniqueSeparatorprivate enum SimpleServiceCustomCommands { KillProcess = 128 };Di2015NewLineDi2015NewLineprotected override void OnCustomCommand(int command)Di2015NewLine{Di2015NewLine    switch (command)Di2015NewLine    {Di2015NewLine        case (int)SimpleServiceCustomCommands.KillProcess:Di2015NewLine            if(killProcess)Di2015NewLine            {Di2015NewLine                System.Diagnostics.Process[] process = System.Diagnostics.Process.GetProcessesByName("MyProcessName");Di2015NewLine                // Before starting the new process make sure no other MyProcessName is running.Di2015NewLine                foreach (System.Diagnostics.Process p in process)Di2015NewLine                {Di2015NewLine                    p.Kill();Di2015NewLine                }Di2015NewLine            }Di2015NewLine            break;Di2015NewLine        default:Di2015NewLine            break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
544889Di2015UniqueSeparator"Visibility = true"
544889Di2015UniqueSeparator"Visibility = #true#"
544893Di2015UniqueSeparatorTable 1 Di2015NewLineDi2015NewLineFuncID         OrderID         OperatorIDDi2015NewLine1              1               1 (for *)Di2015NewLine1              2               2 (for +)Di2015NewLineDi2015NewLineTable 2Di2015NewLineDi2015NewLineOperatorID       OperandsDi2015NewLine1                aDi2015NewLine1                bDi2015NewLine2                cDi2015NewLine
544994Di2015UniqueSeparator-- DataTable is the big table that holds all of the dataDi2015NewLine-- SearchTable is the narrow table that holds the bits of searchable dataDi2015NewLineDi2015NewLineSELECT Di2015NewLine  MainTable.ID, Di2015NewLine  MainTable.Name, Di2015NewLine  MainTable.Whatever Di2015NewLineFROM Di2015NewLine  MainTable, SearchTable Di2015NewLineWHERE Di2015NewLine  MainTable.ID = SearchTable.ID Di2015NewLine  AND SearchTable.State IN ('PA', 'DE')Di2015NewLine  AND SearchTable.Age < 40Di2015NewLine  AND SearchTable.Status = 3Di2015NewLine
545042Di2015UniqueSeparatorCanDoThisAndThat
545042Di2015UniqueSeparatorICollection.SyncLock
545042Di2015UniqueSeparatorList<T>
545042Di2015UniqueSeparatorICollection
545042Di2015UniqueSeparatorList<object> list = new List<object>();Di2015NewLineDi2015NewLinelock (list.SyncRoot) // compiler fails hereDi2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
545042Di2015UniqueSeparatorICollection
545042Di2015UniqueSeparatorICollection list = new List<object>();Di2015NewLineDi2015NewLinelock (list.SyncRoot) // no problemDi2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
545064Di2015UniqueSeparatorIDisposable
545064Di2015UniqueSeparatorDispose
545064Di2015UniqueSeparatorusing
545064Di2015UniqueSeparatorDispose
545066Di2015UniqueSeparatorusing
545066Di2015UniqueSeparatorusing (Font font1 = new Font("Arial", 10.0f)) Di2015NewLine{Di2015NewLine    byte charset = font1.GdiCharSet;Di2015NewLine}Di2015NewLine
545066Di2015UniqueSeparator{Di2015NewLine  Font font1 = new Font("Arial", 10.0f);Di2015NewLine  tryDi2015NewLine  {Di2015NewLine    byte charset = font1.GdiCharSet;Di2015NewLine  }Di2015NewLine  finallyDi2015NewLine  {Di2015NewLine    if (font1 != null)Di2015NewLine      ((IDisposable)font1).Dispose();Di2015NewLine  }Di2015NewLine}Di2015NewLine
545066Di2015UniqueSeparatorusing(var cat = new Cat().AsDog())Di2015NewLine{Di2015NewLine   // Pretend a cat is a dogDi2015NewLine}Di2015NewLine
545066Di2015UniqueSeparator{Di2015NewLine  var cat = new Cat().AsDog(); // ThrowsDi2015NewLine  tryDi2015NewLine  {Di2015NewLine    // Never reachedDi2015NewLine  }Di2015NewLine  finallyDi2015NewLine  {Di2015NewLine    if (cat != null)Di2015NewLine      ((IDisposable)cat).Dispose();Di2015NewLine  }Di2015NewLine}    Di2015NewLine
545066Di2015UniqueSeparatorAsDog
545066Di2015UniqueSeparatorusing( here )
545248Di2015UniqueSeparator//For C# The code would beDi2015NewLineNamespaceX.NamespaceY.ObjectXXX x = new NamespaceX.NamespaceY.ObjectXXX(NamespaceX.NamespaceY.ObjectYYY.PropertyXXX);Di2015NewLinethis.myControl.MyControlProperty = x;Di2015NewLineDi2015NewLine//For C++ The code would beDi2015NewLineNamespaceX::NamespaceY::ObjectXXX x = new NamespaceX::NamespaceY::ObjectXXX(NamespaceX::NamespaceY::ObjectYYY::PropertyXXX);Di2015NewLinethis->myControl->MyControlProperty = x;Di2015NewLine
545284Di2015UniqueSeparatorName = grp.Key
545284Di2015UniqueSeparatorCount = grp.Count()
545348Di2015UniqueSeparator\\Q...\\E
545348Di2015UniqueSeparator\\Q...\\E
545348Di2015UniqueSeparator(?n)
545348Di2015UniqueSeparator?+
545348Di2015UniqueSeparator*+
545348Di2015UniqueSeparator++
545348Di2015UniqueSeparator{m,n}+
545348Di2015UniqueSeparator(?<=text)
545348Di2015UniqueSeparator(?<!text)
545348Di2015UniqueSeparator(?(?=regex)then|else)
545348Di2015UniqueSeparator(?(regex)then|else)
545348Di2015UniqueSeparator(?(1)then|else)
545348Di2015UniqueSeparator(?(group)then|else)
545348Di2015UniqueSeparator(?#comment)
545348Di2015UniqueSeparator\\pL
545348Di2015UniqueSeparator\\pC
545348Di2015UniqueSeparator\\p{IsL}
545348Di2015UniqueSeparator\\p{IsC}
545348Di2015UniqueSeparator\\p{IsLu}
545348Di2015UniqueSeparator\\p{IsCn}
545348Di2015UniqueSeparator\\p{InBasicLatin}
545348Di2015UniqueSeparator\\p{InSpecials}
545348Di2015UniqueSeparator\\p{IsBasicLatin}
545348Di2015UniqueSeparator\\p{IsSpecials}
545348Di2015UniqueSeparatorBasicLatin
545348Di2015UniqueSeparatorBasic-Latin
545348Di2015UniqueSeparatorBasic_Latin
545348Di2015UniqueSeparatorBasic Latin
545348Di2015UniqueSeparator(?<name>regex)
545348Di2015UniqueSeparator(?'name'regex)
545348Di2015UniqueSeparator\\k<name>
545348Di2015UniqueSeparator\\k'name'
545348Di2015UniqueSeparator\\p{Alpha}
545429Di2015UniqueSeparatorGetCustomAttributes
545429Di2015UniqueSeparatorDataTable
545429Di2015UniqueSeparatorHyperDescriptor
545429Di2015UniqueSeparatorsealed class Tuple<T1, T2>Di2015NewLine{Di2015NewLine    public Tuple() {}Di2015NewLine    public Tuple(T1 value1, T2 value2) {Value1 = value1; Value2 = value2;}Di2015NewLine    public T1 Value1 {get;set;}Di2015NewLine    public T2 Value2 {get;set;}Di2015NewLine}Di2015NewLinepublic static List<T> Convert<T>(DataTable table)Di2015NewLine    where T : class, new()Di2015NewLine{Di2015NewLine    List<Tuple<DataColumn, PropertyInfo>> map =Di2015NewLine        new List<Tuple<DataColumn,PropertyInfo>>();Di2015NewLineDi2015NewLine    foreach(PropertyInfo pi in typeof(T).GetProperties())Di2015NewLine    {Di2015NewLine        ColumnAttribute col = (ColumnAttribute)Di2015NewLine            Attribute.GetCustomAttribute(pi, typeof(ColumnAttribute));Di2015NewLine        if(col == null) continue;Di2015NewLine        if(table.Columns.Contains(col.FieldName))Di2015NewLine        {Di2015NewLine            map.Add(new Tuple<DataColumn,PropertyInfo>(Di2015NewLine                table.Columns[col.FieldName], pi));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    List<T> list = new List<T>(table.Rows.Count);Di2015NewLine    foreach(DataRow row in table.Rows)Di2015NewLine    {Di2015NewLine        if(row == null)Di2015NewLine        {Di2015NewLine            list.Add(null);Di2015NewLine            continue;Di2015NewLine        }Di2015NewLine        T item = new T();Di2015NewLine        foreach(Tuple<DataColumn,PropertyInfo> pair in map) {Di2015NewLine            object value = row[pair.Value1];Di2015NewLine            if(value is DBNull) value = null;Di2015NewLine            pair.Value2.SetValue(item, value, null);Di2015NewLine        }Di2015NewLine        list.Add(item);Di2015NewLine    }Di2015NewLine    return list;        Di2015NewLine}Di2015NewLine
545437Di2015UniqueSeparatorstatic Dictionary<int, string[]> MergeArrays(Di2015NewLine    IEnumerable<int> idCollection,Di2015NewLine    params IEnumerable<string>[] valueCollections)Di2015NewLine{Di2015NewLine    var valueCollectionArrays = valueCollections.SelectDi2015NewLine         (x => x.ToArray()).ToArray();Di2015NewLine    var indexedIds = idCollection.Select((Id, Index) => new { Index, Id });Di2015NewLineDi2015NewLine    return indexedIds.ToDictionary(x => Id, Di2015NewLine        x => valueCollectionArrays.Select(array => array[x.Index]).ToArray());Di2015NewLine}Di2015NewLine
545437Di2015UniqueSeparatorstatic Dictionary<int, string[]> MergeArrays(Di2015NewLine    int[] idCollection,Di2015NewLine    params string[][] valueCollections)Di2015NewLine{Di2015NewLine    var ret = new Dictionary<int, string[]>();Di2015NewLine    for (int i=0; i < idCollection.Length; i++)Di2015NewLine    {Di2015NewLine         ret[idCollection[i]] = valueCollections.SelectDi2015NewLine             (array => array[i]).ToArray();Di2015NewLine    }Di2015NewLine    return ret;Di2015NewLine}Di2015NewLine
545483Di2015UniqueSeparatortest1.Dispose()
545483Di2015UniqueSeparatortest2.Dispose()
545483Di2015UniqueSeparatortest3.Dispose()
545585Di2015UniqueSeparatorActivity=BusinessProcess, Path=userAccount.Name
545647Di2015UniqueSeparatorvar
545647Di2015UniqueSeparatorvar
545647Di2015UniqueSeparatorvar names = new List<string>(); // good usage of varDi2015NewLineDi2015NewLinestring source = GetSource();Di2015NewLinevar tokens = source.Split(' '); // ok; most developers know String.SplitDi2015NewLineDi2015NewLinevar id = GetId(); // Probably not good; it's not clear what the type of id isDi2015NewLine
545647Di2015UniqueSeparatorvar
545647Di2015UniqueSeparatorvar
545647Di2015UniqueSeparatorvar
545740Di2015UniqueSeparatorvar combinations = from a in ADi2015NewLine                   from b in BDi2015NewLine                   from c in CDi2015NewLine                   orderby a, b, cDi2015NewLine                   select new List<int> { a, b, c };Di2015NewLineDi2015NewLinevar x = combinations.ToList();Di2015NewLine
545740Di2015UniqueSeparatorvar x = AllCombinationsOf(A, B, C);Di2015NewLineDi2015NewLinepublic static List<List<T>> AllCombinationsOf<T>(params List<T>[] sets)Di2015NewLine{Di2015NewLine    // need array bounds checking etc for productionDi2015NewLine    var combinations = new List<List<T>>();Di2015NewLineDi2015NewLine    // prime the dataDi2015NewLine    foreach (var value in sets[0])Di2015NewLine        combinations.Add(new List<T> { value });Di2015NewLineDi2015NewLine    foreach (var set in sets.Skip(1))Di2015NewLine        combinations = AddExtraSet(combinations, set);Di2015NewLineDi2015NewLine    return combinations;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static List<List<T>> AddExtraSet<T>Di2015NewLine     (List<List<T>> combinations, List<T> set)Di2015NewLine{Di2015NewLine    var newCombinations = from value in setDi2015NewLine                          from combination in combinationsDi2015NewLine                          select new List<T>(combination) { value };Di2015NewLineDi2015NewLine    return newCombinations.ToList();Di2015NewLine}Di2015NewLine
545748Di2015UniqueSeparatorXmlElement parent = (XmlElement)doc.SelectSingleNode("/report/section/hosts")Di2015NewLineparent.AppendChild(subRoot);Di2015NewLine
545864Di2015UniqueSeparatorpublic static void ShowFormInControl(Control ctl, Form frm) {Di2015NewLine  frm.TopLevel = false;Di2015NewLine  frm.FormBorderStyle = FormBorderStyle.None;  // Others rarely make senseDi2015NewLine  frm.Dock = DockStyle.Fill;Di2015NewLine  frm.Visible = true;Di2015NewLine  ctl.Controls.Add(frm);Di2015NewLine}Di2015NewLine
545864Di2015UniqueSeparatorpublic Form1() {Di2015NewLine  InitializeComponent();Di2015NewLine  ShowFormInControl(this.panel1, new Form2());Di2015NewLine}Di2015NewLine
546083Di2015UniqueSeparatorconfiguration
546083Di2015UniqueSeparator<system.codedom>Di2015NewLine\<compilers>Di2015NewLine\\<compilerDi2015NewLine\\   language="c#;cs;csharp" extension=".cs"Di2015NewLine\\   compilerOptions="/warnaserror"Di2015NewLine\\   type="Microsoft.CSharp.CSharpCodeProvider,Di2015NewLine         System, Version=2.0.0.0, Culture=neutral,Di2015NewLine         PublicKeyToken=b77a5c561934e089" />Di2015NewLine\</compilers>Di2015NewLine</system.codedom>Di2015NewLine
546120Di2015UniqueSeparatori
546120Di2015UniqueSeparatorfor (int i = 0; i < listView1.Items.Count; i++ )Di2015NewLine{Di2015NewLine    if (listView1.Items[i].Selected)Di2015NewLine    {Di2015NewLine        listView1.Items[i].Remove();Di2015NewLine        i--;Di2015NewLine    }Di2015NewLine}Di2015NewLine
546120Di2015UniqueSeparatori
546120Di2015UniqueSeparatori
546211Di2015UniqueSeparatorSqlConnection con = new SqlConnection("Your connection string");Di2015NewLinecon.Open();Di2015NewLineSqlCommand cmd = new SqlCommand(TexdtBox1.Text, con);Di2015NewLinecmd.ExecuteNonQuery();Di2015NewLinecon.Close()Di2015NewLine
546387Di2015UniqueSeparatorFileShare.Delete
546387Di2015UniqueSeparatorDeleteOnClose
546387Di2015UniqueSeparatorFILE_FLAG_DELETE_ON_CLOSE
546387Di2015UniqueSeparatorFILE_SHARE_DELETE
546512Di2015UniqueSeparatorrequest.CookieContainer = new CookieContainer();Di2015NewLinerequest.CookieContainer.Add(response.Cookies);Di2015NewLine
546770Di2015UniqueSeparator            selectDi2015NewLine                mtDi2015NewLine            from Di2015NewLine                MarketGroup mgDi2015NewLine            inner joinDi2015NewLine                mg.MarketTypes mtDi2015NewLine            inner joinDi2015NewLine                mt.MetaGroups mgDi2015NewLine            where Di2015NewLine               mg.ID=12312 and mg.ID=3214123Di2015NewLine
546859Di2015UniqueSeparatorenum LineComparisonModeDi2015NewLine{Di2015NewLine   ///<summary>the order of the line numbers matters, default</summary>Di2015NewLine   Ordered = 0, Di2015NewLine   ///<summary>the order of the line numbers doesn't matterDi2015NewLine   /// Has a higher cost to the default.Di2015NewLine   ///</summary>Di2015NewLine   Unordered = 1,Di2015NewLine} Di2015NewLineDi2015NewLineclass ListLineComparer : IEqualityComparer<List<Class>>Di2015NewLine{Di2015NewLine    class LineComparer : IEqualityComparer<Class>Di2015NewLine    {Di2015NewLine        public bool Equals(Class x, Class y)Di2015NewLine        {Di2015NewLine            return x.IDLinea == y.IDLinea;Di2015NewLine        }Di2015NewLineDi2015NewLine        public int GetHashCode(Class x)Di2015NewLine        {Di2015NewLine            return x.IDLinea;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly LineComparer lines;Di2015NewLine    private readonly LineComparisonMode mode;Di2015NewLineDi2015NewLine    public ListLineComparer() {}Di2015NewLineDi2015NewLine    public ListLineComparer(LineComparisonMode mode)Di2015NewLine    { Di2015NewLine        this.mode = mode;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Equals(List<Class> x, List<Class> y)Di2015NewLine    {Di2015NewLine        if (mode == LineComparisonMode.Ordered)Di2015NewLine            return x.SequenceEqual(y, lines);Di2015NewLine        elseDi2015NewLine            return x.OrderBy<Class, int>(Line).SequenceEqual(y.OrderBy<Class, int>(Line), lines);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static int Line(Class c)Di2015NewLine    {Di2015NewLine        return c.IDLinea;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int GetHashCode(List<Class> x)Di2015NewLine    {Di2015NewLine        //this is not a good hash (though correct) Di2015NewLine        // but not relevant to current questionDi2015NewLine        return x.Sum(c => c.IDLinea);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// assume List <List<Class>> L = new List<List<Class>>(); from questionDi2015NewLinevar result = L.Distinct(new ListLineComparer());Di2015NewLine
546859Di2015UniqueSeparatorvar result = L.Distinct(new ListLineComparer(LineComparisonMode.Unordered));Di2015NewLine
547513Di2015UniqueSeparatorDi2015NewLineNetworkStream ns;Di2015NewLineSystem.Net.Sockets.TcpClient client = new TcpClient();Di2015NewLineDi2015NewLinebyte[] receiveBytes = new byte[client.ReceiveBufferSize];Di2015NewLineint bytesRead = ns.Read(receiveBytes, 0, receiveBytes.Length);Di2015NewLineString returndata = Encoding.UTF8.GetString(receiveBytes,0,bytesRead);Di2015NewLinereturndata = returndata.Trim(new char[] {'\\0'});Di2015NewLineDi2015NewLine
547527Di2015UniqueSeparatorprivate void button1_Click(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    // Use the open file dialog to choose a word documentDi2015NewLine    if (this.openFileDialog1.ShowDialog() == DialogResult.OK)Di2015NewLine    {Di2015NewLine        // set the file name from the open file dialogDi2015NewLine        object fileName = openFileDialog1.FileName;Di2015NewLine        object readOnly = false;Di2015NewLine        object isVisible = true;Di2015NewLine        // Here is the way to handle parameters you don't care about in .NETDi2015NewLine        object missing = System.Reflection.Missing.Value;Di2015NewLine        // Make word visible, so you can see what's happeningDi2015NewLine        WordApp.Visible = true;Di2015NewLine        // Open the document that was chosen by the dialogDi2015NewLine        Word.Document aDoc = WordApp.Documents.Open(ref fileName, ref missing, ref readOnly, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref isVisible);Di2015NewLine        // Activate the document so it shows up in frontDi2015NewLine        aDoc.Activate();Di2015NewLine        // Add the copyright text and a line breakDi2015NewLine        WordApp.Selection.TypeText("Copyright C# Corner");Di2015NewLine        WordApp.Selection.TypeParagraph();Di2015NewLine    }Di2015NewLine}Di2015NewLine
547619Di2015UniqueSeparatorIDisposable
547619Di2015UniqueSeparatorusing
547619Di2015UniqueSeparatorusing(var proxy = new MyProxy()) { // see below - not quite enoughDi2015NewLine   // use proxyDi2015NewLine}Di2015NewLine
547619Di2015UniqueSeparatorDispose()
547619Di2015UniqueSeparatorIDisposable
547619Di2015UniqueSeparatorusing
547619Di2015UniqueSeparatorif(field != null) field = null; // BADDi2015NewLine
547630Di2015UniqueSeparatorclass Class1Di2015NewLine{Di2015NewLine    public static void Run()Di2015NewLine    {Di2015NewLine        doTopologicalTest();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void doTopologicalTest()Di2015NewLine    {Di2015NewLine        List<Field> fields = new List<Field>();Di2015NewLine        fields.Add(new Field() { Name = "FirstName" });Di2015NewLine        fields.Add(new Field()Di2015NewLine        {Di2015NewLine            Name = "FullName",Di2015NewLine            DependsOn = new[] { "FirstName", "LastName" }Di2015NewLine        });Di2015NewLine        fields.Add(new Field()Di2015NewLine        {Di2015NewLine            Name = "Age",Di2015NewLine            DependsOn = new[] { "DateOfBirth" }Di2015NewLine        });Di2015NewLine        fields.Add(new Field() { Name = "LastName" });Di2015NewLine        fields.Add(new Field() { Name = "DateOfBirth" });Di2015NewLineDi2015NewLine        foreach (var field in fields)Di2015NewLine        {Di2015NewLine            Console.WriteLine(field.Name);Di2015NewLine            if(field.DependsOn != null)Di2015NewLine                foreach (var item in field.DependsOn)Di2015NewLine                {Di2015NewLine                    Console.WriteLine(" -{0}",item);Di2015NewLine                }Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("\\n...Sorting...\\n");Di2015NewLineDi2015NewLine        int[] sortOrder = getTopologicalSortOrder(fields);Di2015NewLineDi2015NewLine        for (int i = 0; i < sortOrder.Length; i++)Di2015NewLine        {Di2015NewLine            var field = fields[sortOrder[i]];Di2015NewLine            Console.WriteLine(field.Name);Di2015NewLine            if (field.DependsOn != null)Di2015NewLine                foreach (var item in field.DependsOn)Di2015NewLine                {Di2015NewLine                    Console.WriteLine(" -{0}", item);Di2015NewLine                }Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private static int[] getTopologicalSortOrder(List<Field> fields)Di2015NewLine    {Di2015NewLine        TopologicalSorter g = new TopologicalSorter(fields.Count);Di2015NewLine        Dictionary<string, int> _indexes = new Dictionary<string, int>();Di2015NewLineDi2015NewLine        //add verticesDi2015NewLine        for (int i = 0; i < fields.Count; i++)Di2015NewLine        {Di2015NewLine            _indexes[fields[i].Name.ToLower()] = g.AddVertex(i);Di2015NewLine        }Di2015NewLineDi2015NewLine        //add edgesDi2015NewLine        for (int i = 0; i < fields.Count; i++)Di2015NewLine        {Di2015NewLine            if (fields[i].DependsOn != null)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < fields[i].DependsOn.Length; j++)Di2015NewLine                {Di2015NewLine                    g.AddEdge(i,Di2015NewLine                        _indexes[fields[i].DependsOn[j].ToLower()]);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        int[] result = g.Sort();Di2015NewLine        return result;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    class FieldDi2015NewLine    {Di2015NewLine        public string Name { get; set; }Di2015NewLine        public string[] DependsOn { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
547630Di2015UniqueSeparatorclass TopologicalSorterDi2015NewLine{Di2015NewLine    #region - Private Members -Di2015NewLineDi2015NewLine    private readonly int[] _vertices; // list of verticesDi2015NewLine    private readonly int[,] _matrix; // adjacency matrixDi2015NewLine    private int _numVerts; // current number of verticesDi2015NewLine    private readonly int[] _sortedArray;Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region - CTors -Di2015NewLineDi2015NewLine    public TopologicalSorter(int size)Di2015NewLine    {Di2015NewLine        _vertices = new int[size];Di2015NewLine        _matrix = new int[size, size];Di2015NewLine        _numVerts = 0;Di2015NewLine        for (int i = 0; i < size; i++)Di2015NewLine            for (int j = 0; j < size; j++)Di2015NewLine                _matrix[i, j] = 0;Di2015NewLine        _sortedArray = new int[size]; // sorted vert labelsDi2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region - Public Methods -Di2015NewLineDi2015NewLine    public int AddVertex(int vertex)Di2015NewLine    {Di2015NewLine        _vertices[_numVerts++] = vertex;Di2015NewLine        return _numVerts - 1;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddEdge(int start, int end)Di2015NewLine    {Di2015NewLine        _matrix[start, end] = 1;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int[] Sort() // toplogical sortDi2015NewLine    {Di2015NewLine        while (_numVerts > 0) // while vertices remain,Di2015NewLine        {Di2015NewLine            // get a vertex with no successors, or -1Di2015NewLine            int currentVertex = noSuccessors();Di2015NewLine            if (currentVertex == -1) // must be a cycle                Di2015NewLine                throw new Exception("ERROR: Graph has cycles");Di2015NewLineDi2015NewLine            // insert vertex label in sorted array (start at end)Di2015NewLine            _sortedArray[_numVerts - 1] = _vertices[currentVertex];Di2015NewLineDi2015NewLine            deleteVertex(currentVertex); // delete vertexDi2015NewLine        }Di2015NewLineDi2015NewLine        // vertices all gone; return sortedArrayDi2015NewLine        return _sortedArray;Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region - Private Helper Methods -Di2015NewLineDi2015NewLine    // returns vert with no successors (or -1 if no such verts)Di2015NewLine    private int noSuccessors()Di2015NewLine    {Di2015NewLine        for (int row = 0; row < _numVerts; row++)Di2015NewLine        {Di2015NewLine            bool isEdge = false; // edge from row to column in adjMatDi2015NewLine            for (int col = 0; col < _numVerts; col++)Di2015NewLine            {Di2015NewLine                if (_matrix[row, col] > 0) // if edge to another,Di2015NewLine                {Di2015NewLine                    isEdge = true;Di2015NewLine                    break; // this vertex has a successor try anotherDi2015NewLine                }Di2015NewLine            }Di2015NewLine            if (!isEdge) // if no edges, has no successorsDi2015NewLine                return row;Di2015NewLine        }Di2015NewLine        return -1; // noDi2015NewLine    }Di2015NewLineDi2015NewLine    private void deleteVertex(int delVert)Di2015NewLine    {Di2015NewLine        // if not last vertex, delete from vertexListDi2015NewLine        if (delVert != _numVerts - 1)Di2015NewLine        {Di2015NewLine            for (int j = delVert; j < _numVerts - 1; j++)Di2015NewLine                _vertices[j] = _vertices[j + 1];Di2015NewLineDi2015NewLine            for (int row = delVert; row < _numVerts - 1; row++)Di2015NewLine                moveRowUp(row, _numVerts);Di2015NewLineDi2015NewLine            for (int col = delVert; col < _numVerts - 1; col++)Di2015NewLine                moveColLeft(col, _numVerts - 1);Di2015NewLine        }Di2015NewLine        _numVerts--; // one less vertexDi2015NewLine    }Di2015NewLineDi2015NewLine    private void moveRowUp(int row, int length)Di2015NewLine    {Di2015NewLine        for (int col = 0; col < length; col++)Di2015NewLine            _matrix[row, col] = _matrix[row + 1, col];Di2015NewLine    }Di2015NewLineDi2015NewLine    private void moveColLeft(int col, int length)Di2015NewLine    {Di2015NewLine        for (int row = 0; row < length; row++)Di2015NewLine            _matrix[row, col] = _matrix[row, col + 1];Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
547680Di2015UniqueSeparatora *= b;Di2015NewLine
547680Di2015UniqueSeparatora = a * b;Di2015NewLine
547680Di2015UniqueSeparatora *= b / c;Di2015NewLine
547680Di2015UniqueSeparatora = a * b / c;Di2015NewLine
547680Di2015UniqueSeparatora *= b / c;    // equivalent to a = a * (b / c)Di2015NewLinea = a * b / c; // equivalent to a = (a * b) / cDi2015NewLine
547680Di2015UniqueSeparatorrect.Width     = rect.Width * targetSize.Height / rect.Height;Di2015NewLine//             = 8          * 25                / 20Di2015NewLine//             = 200 / 20 (multiplication happens first)Di2015NewLine//             = 10Di2015NewLine// rect.Width  = 10Di2015NewLine
547680Di2015UniqueSeparatorrect.Width    *= targetSize.Height / rect.Height;Di2015NewLine//            *= 25 / 20Di2015NewLine//            *= 1 (it's integer division!)Di2015NewLine// rect.Width  = rect.Width * 1Di2015NewLine//             = 8Di2015NewLine// rect.Width  = 8Di2015NewLine
547680Di2015UniqueSeparatorelse if(targetSize.Width * rect.Height > Di2015NewLine        rect.Width * targetSize.Height)Di2015NewLine
547686Di2015UniqueSeparatorpublic static string MyHtmlEncode(string value)Di2015NewLine{Di2015NewLine   // call the normal HtmlEncode firstDi2015NewLine   char[] chars = HttpUtility.HtmlEncode(value).ToCharArray();Di2015NewLine   StringBuilder encodedValue = new StringBuilder();Di2015NewLine   foreach(char c in chars)Di2015NewLine   {Di2015NewLine      if ((int)c > 127) // above normal ASCIIDi2015NewLine         encodedValue.Append("&#" + (int)c + ";");Di2015NewLine      elseDi2015NewLine         encodedValue.Append(c);Di2015NewLine   }Di2015NewLine   return encodedValue.ToString();Di2015NewLine}Di2015NewLine
547806Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    doSomething();Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine    catchSomething();Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    alwaysDoThis();Di2015NewLine}Di2015NewLine
547806Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    doSomething();Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine    catchSomething();Di2015NewLine}Di2015NewLineDi2015NewLinealwaysDoThis();Di2015NewLine
547966Di2015UniqueSeparatornewIfTrue(boolean b) {Di2015NewLine    if(b)Di2015NewLine        new ThisClass();Di2015NewLine}Di2015NewLine
547968Di2015UniqueSeparatorTryOpenFile
548123Di2015UniqueSeparatorTableType table = (TableType) stagingGrid.DataSource;Di2015NewLinemyStagingTableAdapter.Update(table);Di2015NewLine
548375Di2015UniqueSeparatorSqlBulkCopy
548375Di2015UniqueSeparatorWriteToServer
548375Di2015UniqueSeparatorIDataReader
548375Di2015UniqueSeparatorSqlBulkCopy.WriteToServer
548375Di2015UniqueSeparatorIDataReader
548375Di2015UniqueSeparatorIDataReader
548375Di2015UniqueSeparatorSqlBulkCopy.WriteToServer
548394Di2015UniqueSeparatorDllImport
548394Di2015UniqueSeparatorLoadLibrary
548394Di2015UniqueSeparatorDllImport
548476Di2015UniqueSeparatorpublic bool ValidateApplicationUser(string userName, string password)Di2015NewLine{Di2015NewLine    //Get Database ContextDi2015NewLine    var AuthContext = new DataClasses1DataContext();Di2015NewLineDi2015NewLine    //We Are Only Going To Select UserId, Notice The Password .ToLower Is Removed (for security)Di2015NewLine    var query = from c in AuthContext.UsersDi2015NewLine                where (c.Username == userName.ToLower() && c.Password == password)Di2015NewLine                select c;Di2015NewLineDi2015NewLine    if (query.Count() != 0) {Di2015NewLine       return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    return false;Di2015NewLine}Di2015NewLine
548894Di2015UniqueSeparatorcleartool
548894Di2015UniqueSeparatordescr
548894Di2015UniqueSeparatorcleartool descr -fmt "%Sn" youFileFullPathDi2015NewLine
548894Di2015UniqueSeparator/main/34
548894Di2015UniqueSeparator/branch/version
548894Di2015UniqueSeparatorSystem.Diagnostics.ProcessStartInfo psi =Di2015NewLinenew System.Diagnostics.ProcessStartInfo(@"cleartool");Di2015NewLinepsi.RedirectStandardOutput = true;Di2015NewLinepsi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;Di2015NewLinepsi.Arguments = "descr -fmt \\"%Sn\\" \\"" + yourFilePath + "\\"";Di2015NewLinepsi.UseShellExecute = false;Di2015NewLineSystem.Diagnostics.Process monProcess;Di2015NewLinemonProcess= System.Diagnostics.Process.Start(psi);Di2015NewLineSystem.IO.StreamReader myOutput = monProcess.StandardOutput;Di2015NewLinemonProcess.WaitForExit();Di2015NewLineif (monProcess.HasExited)Di2015NewLine{Di2015NewLine    //la sortie du process est recuperee dans un stringDi2015NewLine    string output = myOutput.ReadToEnd();Di2015NewLine    MessageBox.Show(output);Di2015NewLine}Di2015NewLine
548894Di2015UniqueSeparatorcleartool
548983Di2015UniqueSeparator// Set the global desired framerate to 50 frames per secondDi2015NewLineStartup += delegate(object sender, StartupEventArgs e)Di2015NewLine{Di2015NewLineTimeline.DesiredFrameRateProperty.OverrideMetadata(typeof(Timeline),Di2015NewLine     new PropertyMetadata(50));Di2015NewLine};Di2015NewLine
549097Di2015UniqueSeparator  if (folderBrowserDialog1.ShowDialog() == DialogResult.OK) {Di2015NewLine    // User picked a path and didn't cancel the dialog...Di2015NewLine    textBox1.Text = folderBrowserDialog1.SelectedPath;Di2015NewLine  }Di2015NewLine
549230Di2015UniqueSeparatorvoid Foo<T>(T control) where T : Control, ISomethingDi2015NewLine{Di2015NewLine    // use "control"Di2015NewLine    // (you have access to all the Control and ISomething members)Di2015NewLine}Di2015NewLine
549230Di2015UniqueSeparatorControl
549230Di2015UniqueSeparatorISomething
549230Di2015UniqueSeparatorFoo(someName);Di2015NewLine
549230Di2015UniqueSeparatorControl
549230Di2015UniqueSeparatorISomething
549230Di2015UniqueSeparatorPrivate Sub Foo(Of T As { Control, ISomething })(ByVal control As T)Di2015NewLineDi2015NewLineEnd SubDi2015NewLine
549352Di2015UniqueSeparatorconst int MUST_BE_LESS_THAN = 100000000; // 8 decimal digitsDi2015NewLineDi2015NewLinepublic int GetStableHash(string s)Di2015NewLine{Di2015NewLine    uint hash = 0;Di2015NewLine    // if you care this can be done much faster with unsafe Di2015NewLine    // using fixed char* reinterpreted as a byte*Di2015NewLine    foreach (byte b in System.Text.Encoding.Unicode.GetBytes(s))Di2015NewLine    {   Di2015NewLine        hash += b;Di2015NewLine        hash += (hash << 10);Di2015NewLine        hash ^= (hash >> 6);    Di2015NewLine    }Di2015NewLine    // final avalancheDi2015NewLine    hash += (hash << 3);Di2015NewLine    hash ^= (hash >> 11);Di2015NewLine    hash += (hash << 15);Di2015NewLine    // helpfully we only want positive integer < MUST_BE_LESS_THANDi2015NewLine    // so simple truncate cast is ok if not perfectDi2015NewLine    return (int)(hash % MUST_BE_LESS_THAN)Di2015NewLine}Di2015NewLine
549415Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine  Action<string> log;Di2015NewLine  MyClass(Action<string> log)Di2015NewLine  {Di2015NewLine    this.log = log;Di2015NewLine  }Di2015NewLine  void Something()Di2015NewLine  {Di2015NewLine    //log a messageDi2015NewLine    log("Hello world!");Di2015NewLine  }Di2015NewLine}Di2015NewLineclass MyFormDi2015NewLine{Di2015NewLine  ListBox listBox = new ListBox();Di2015NewLine  MyClass myClass;Di2015NewLine  MyForm()Di2015NewLine  {Di2015NewLine    //create a delegate which logs stringsDi2015NewLine    //by writing them to the ListBoxDi2015NewLine    Action<string> log = delegate(string s) {Di2015NewLine      listBox.Items.Add(s);Di2015NewLine    };Di2015NewLine    //pass this logger to classes which need to use itDi2015NewLine    myClass = new MyClass(log);Di2015NewLine    //test itDi2015NewLine    myClass.Something();Di2015NewLine  }Di2015NewLine}Di2015NewLine
549415Di2015UniqueSeparatorclass MyFormDi2015NewLine{Di2015NewLine  ListBox listBox = new ListBox();Di2015NewLine  MyClass myClass;Di2015NewLine  MyForm()Di2015NewLine  {Di2015NewLine    //pass the Log action to classes which need to use itDi2015NewLine    myClass = new MyClass(Log);Di2015NewLine    //test itDi2015NewLine    myClass.Something();Di2015NewLine  }Di2015NewLineDi2015NewLine  ///logs strings by writing them to the ListBoxDi2015NewLine  void Log(string s)Di2015NewLine  {Di2015NewLine    if (listBox.Items.Count == 300)Di2015NewLine      listBox.Items.RemoveAt(0);Di2015NewLine    listBox.Items.Add(s);Di2015NewLine  }Di2015NewLine}Di2015NewLine
549417Di2015UniqueSeparatorint[] list1 = new int[4] { 1, 2, 3, 4};Di2015NewLineint[] list2 = new int[4] { 5, 6, 7, 8};Di2015NewLineint[] list3 = new int[4] { 1, 3, 2, 1 };Di2015NewLineint[] list4 = new int[4] { 5, 4, 3, 2 };Di2015NewLineDi2015NewLineint[][] lists = new int[][] {  list1 ,  list2 ,  list3 ,  list4  };Di2015NewLine
549417Di2015UniqueSeparatorList<int[]>
549417Di2015UniqueSeparatorList<int[]> data=new List<int[]>(){list1,list2,list3,list4};Di2015NewLine
549603Di2015UniqueSeparator  factory-method="GenerateMock<[MyNamespace.MyInterface, MyAssembly]>"Di2015NewLine
549620Di2015UniqueSeparatorpublic Output MyServiceMethod(Input input, string transactionId)Di2015NewLine{Di2015NewLine    using(new Tracer("MyServiceMethod: " + transactionId))Di2015NewLine    {Di2015NewLine        ... stuff ...Di2015NewLine        return output;Di2015NewLine    }Di2015NewLine}Di2015NewLine
549762Di2015UniqueSeparatorsender
549762Di2015UniqueSeparatorHttpApplication
549762Di2015UniqueSeparatorHttpContext
549762Di2015UniqueSeparatorHttpApplication.Context
549762Di2015UniqueSeparator"url"
549762Di2015UniqueSeparator"cache"
549762Di2015UniqueSeparator"type"
549789Di2015UniqueSeparatorlistBox1.Items.Clear();Di2015NewLineforeach (var screen in Screen.AllScreens)Di2015NewLine{Di2015NewLine    listBox1.Items.Add(screen);Di2015NewLine}Di2015NewLinelistBox1.SelectedItem = Screen.FromControl(this);Di2015NewLine
549793Di2015UniqueSeparatorSqlConnection CreateConnection()Di2015NewLine{Di2015NewLine    // Create the connection here and return it.Di2015NewLine    return ...;Di2015NewLine}Di2015NewLine
549793Di2015UniqueSeparatorstruct ComReference<T> : IDisposable where T : class, new()Di2015NewLine{Di2015NewLine    private T reference;Di2015NewLineDi2015NewLine    public T Reference { get { return reference; } }Di2015NewLineDi2015NewLine    public static ComReference<T> Create()Di2015NewLine    {Di2015NewLine        // Create the instance.Di2015NewLine        ComReference<T> retVal = new ComReference<T>();Di2015NewLineDi2015NewLine        // Set the reference.Di2015NewLine        retVal.reference = new T();Di2015NewLineDi2015NewLine        // Return.Di2015NewLine        return retVal;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ComReference<T> Release()Di2015NewLine    {Di2015NewLine        // Create a copy for return.Di2015NewLine        // Note, this is copied on the stack.Di2015NewLine        ComReference<T> retVal = this;Di2015NewLineDi2015NewLine        // Set this reference to null;Di2015NewLine        this.reference = null;Di2015NewLineDi2015NewLine        // Return the reference.Di2015NewLine        return retVal;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        // If there is a reference, then release.Di2015NewLine        Marshal.ReleaseComObject(reference);Di2015NewLine    }Di2015NewLine}Di2015NewLine
549793Di2015UniqueSeparatorT
549793Di2015UniqueSeparatorComReference<StreamClass> LoadTextFromDBToADODBStream(int idParameter,Di2015NewLine    string parameterName, string sqlString, ref int size)Di2015NewLine{Di2015NewLine    int bytesReturned;Di2015NewLine    int chunkSize = 65536;Di2015NewLine    int offSet = 0;Di2015NewLineDi2015NewLine    // Create the command.Di2015NewLine    using (SqlCommand cmd = new SqlCommand())Di2015NewLine    {Di2015NewLine        // Set the parameters.Di2015NewLine        cmd.CommandType = CommandType.Text;Di2015NewLine        cmd.CommandTimeout = 0;Di2015NewLine        cmd.CommandText = sqlString;Di2015NewLineDi2015NewLine        // See (1).Di2015NewLine        using (SqlConnection connection = CreateConnection())Di2015NewLine        {Di2015NewLine            // Set the connection on the command.Di2015NewLine            cmd.Connection = connection;Di2015NewLineDi2015NewLine            // Create the parameter and add to the parameters.Di2015NewLine            SqlParameter cmdParameter = new SqlParameter(Di2015NewLine                parameterName, idParameter);Di2015NewLine            cmd.Parameters.Add(cmdParameter);Di2015NewLineDi2015NewLine            // Create the reader.Di2015NewLine            using (SqlDataReader dr = cmd.ExecuteReader(Di2015NewLine                CommandBehavior.SequentialAccess))Di2015NewLine            {Di2015NewLine                dr.Read();Di2015NewLineDi2015NewLine                // See (2)Di2015NewLine                if (!dr.HasRows)Di2015NewLine                {Di2015NewLine                    // Return an empty instance.Di2015NewLine                    return new ComReference<StreamClass>();Di2015NewLine                }Di2015NewLineDi2015NewLine                // Create the stream here.  See (3)Di2015NewLine                using (ComReference<StreamClass> adoStreamClass =Di2015NewLine                    ComReference<StreamClass>.Create())Di2015NewLine                {Di2015NewLine                    // Get the stream.Di2015NewLine                    StreamClass adoStream = adoStreamClass.Reference;Di2015NewLineDi2015NewLine                    // Open the stream.Di2015NewLine                    adoStream.Type = StreamTypeEnum.adTypeText;Di2015NewLine                    adoStream.Open(Type.Missing, Di2015NewLine                        ConnectModeEnum.adModeUnknown,Di2015NewLine                        StreamOpenOptionsEnum.adOpenStreamUnspecified, Di2015NewLine                        "", "");Di2015NewLineDi2015NewLine                    // Create the byte array.Di2015NewLine                    byte[] byteChunk = new byte[chunkSize];Di2015NewLineDi2015NewLine                    // See (4)Di2015NewLine                    Encoding readBytes = Encoding.Unicode;Di2015NewLineDi2015NewLine                    // Cycle.Di2015NewLine                    doDi2015NewLine                    {Di2015NewLine                        bytesReturned = (int)dr.GetBytes(0, offSet, Di2015NewLine                            byteChunk, 0, chunkSize);Di2015NewLine                        size += bytesReturned;Di2015NewLine                        if (bytesReturned > 0)Di2015NewLine                        {Di2015NewLine                            if (bytesReturned < chunkSize)Di2015NewLine                            {Di2015NewLine                                Array.Resize(ref byteChunk,Di2015NewLine                                    bytesReturned);Di2015NewLine                            }Di2015NewLineDi2015NewLine                            adoStream.WriteText(Di2015NewLine                                readBytes.GetString(byteChunk),Di2015NewLine                                StreamWriteEnum.stWriteChar);Di2015NewLine                            adoStream.Flush();Di2015NewLine                        }Di2015NewLineDi2015NewLine                        offSet += bytesReturned;Di2015NewLine                    } while (bytesReturned == chunkSize);Di2015NewLineDi2015NewLine                    // Release the reference and return it.Di2015NewLine                    // See (5).Di2015NewLine                    return adoStreamClass.Release();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
549793Di2015UniqueSeparatorComReference<StreamClass>
549793Di2015UniqueSeparatorComReference<StreamClass>
549793Di2015UniqueSeparator// See (1)Di2015NewLineusing (ComReference<StreamClass> adoStreamClass =Di2015NewLine    LoadTextFromDBToADODBStream(resultID, "@result_id",Di2015NewLine    "some sql statement", ref size))Di2015NewLine{Di2015NewLine    // Set to the class instance.  See (2)Di2015NewLine    StreamClass adoStream = adoStreamClass.Reference;Di2015NewLineDi2015NewLine    if (adoStream.Size == 0)Di2015NewLine    {Di2015NewLine        success = false;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        adoStream.Position = 0;Di2015NewLineDi2015NewLine        DataTable table = new DataTable();Di2015NewLineDi2015NewLine        // See (3)Di2015NewLine        using (ComReference<RecordsetClass> rsClass = Di2015NewLine        ComReference<RecordsetClass>.Create())Di2015NewLine        {Di2015NewLine            Recordset rs = rsClass.Reference;Di2015NewLine            rs.Open(adoStream, Type.Missing, CursorTypeEnum.adOpenStatic,Di2015NewLine                      LockTypeEnum.adLockBatchOptimistic, -1);Di2015NewLineDi2015NewLine            if (adoStream != null)Di2015NewLine            {Di2015NewLine                adoStream.Close();Di2015NewLine                adoStream = null;Di2015NewLine            }Di2015NewLineDi2015NewLine            source.SourceRows = rs.RecordCount;Di2015NewLine            table.TableName = "Source";Di2015NewLine            source.Dataset = new DataSet();Di2015NewLine            source.Dataset.Tables.Add(table);Di2015NewLineDi2015NewLine            // See (4)Di2015NewLine            using (OleDbDataAdapter adapter = new OleDbDataAdapter())Di2015NewLine            {Di2015NewLine                adapter.MissingSchemaAction = Di2015NewLine                    MissingSchemaAction.AddWithKey;Di2015NewLine                adapter.Fill(source.Dataset.Tables[0], rs);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
549793Di2015UniqueSeparatoradoStreamClass.Reference.<method>
549793Di2015UniqueSeparatorComReference<RecordsetClass>
549873Di2015UniqueSeparatorprivate void InitializeCableSizeCB0()Di2015NewLine{                       Di2015NewLine    //Cable List, No ExclusionsDi2015NewLine    cable_size0.Clear();Di2015NewLine    cable_size0.Add("Please Select Cable Size");Di2015NewLine    ...Di2015NewLine
549952Di2015UniqueSeparator<%= this.Page.ClientScript.GetPostBackEventReference(btnAgree, "") %>;Di2015NewLine
550090Di2015UniqueSeparatorVirtualDirectoryMapping vdm = new VirtualDirectoryMapping(@"C:\\Inetpub\\wwwroot\\YourApplication", true);Di2015NewLineWebConfigurationFileMap wcfm = new WebConfigurationFileMap();Di2015NewLinewcfm.VirtualDirectories.Add("/", vdm);Di2015NewLineDi2015NewLineDi2015NewLine// Get the connectionStringDi2015NewLineConfiguration config = WebConfigurationManager.OpenMappedWebConfiguration(wcfm, "/");Di2015NewLinestring connection = config.ConnectionStrings.ConnectionStrings["YourConnectionString"];Di2015NewLine
550146Di2015UniqueSeparatorstring webPath = folderPath.Replace(@"\\", "/");Di2015NewLine
550261Di2015UniqueSeparatorint
550261Di2015UniqueSeparator var sum = table.AsEnumerable().Sum(x=>x.Field<int>(3));Di2015NewLine
550261Di2015UniqueSeparator var sum = table.AsEnumerable().Sum(x=>x.Field<int>("SomeProperty"));Di2015NewLine
550261Di2015UniqueSeparator var sum = table.Sum(x=>x.SomeProperty);Di2015NewLine
550274Di2015UniqueSeparator[DllImport("Srclient.dll")]Di2015NewLinepublic static extern int SRRemoveRestorePoint(int index);Di2015NewLineDi2015NewLineprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    int SeqNum = 335;Di2015NewLine    int intReturn = SRRemoveRestorePoint(SeqNum);Di2015NewLine}Di2015NewLine
550274Di2015UniqueSeparator    private void EnumRestorePoints()Di2015NewLine    {Di2015NewLine        System.Management.ManagementClass objClass = new System.Management.ManagementClass("\\\\\\\\.\\\\root\\\\default", "systemrestore", new System.Management.ObjectGetOptions());Di2015NewLine        System.Management.ManagementObjectCollection objCol = objClass.GetInstances();Di2015NewLineDi2015NewLine        StringBuilder Results = new StringBuilder();Di2015NewLine        foreach (System.Management.ManagementObject objItem in objCol)Di2015NewLine        {Di2015NewLine            Results.AppendLine((string)objItem["description"] + Convert.ToChar(9) + ((uint)objItem["sequencenumber"]).ToString());Di2015NewLine        }Di2015NewLineDi2015NewLine        MessageBox.Show(Results.ToString());Di2015NewLine    }Di2015NewLine
550292Di2015UniqueSeparatorfriend
550378Di2015UniqueSeparatorobject defaultValue = "default";Di2015NewLineattribs.something = (entry.Properties["something"].Value ?? defaultValue).ToString()Di2015NewLine
550378Di2015UniqueSeparatorpublic static string ToSafeString(this object obj)Di2015NewLine{Di2015NewLine    return (obj ?? string.Empty).ToString();Di2015NewLine}Di2015NewLine
550562Di2015UniqueSeparatorvar keys = new HashSet<string>(list2.Select(x => x[0]));Di2015NewLinevar data = list.Where(x => keys.Contains(x[0]));Di2015NewLine
550562Di2015UniqueSeparatorDictionary<>
550562Di2015UniqueSeparatorHashSet<>
550562Di2015UniqueSeparatorFind
550562Di2015UniqueSeparatorvar data = list.FindAll(arr => list2.Find(arr2 => arr2[0] == arr[0]) != null);Di2015NewLine
550562Di2015UniqueSeparatorFind
550562Di2015UniqueSeparatorHashSet<>
550598Di2015UniqueSeparator[Test]Di2015NewLinepublic void EmptylListTest()Di2015NewLine{Di2015NewLine    var repositoryMock = new Mock<ICustomerRepository>();Di2015NewLineDi2015NewLine    IEnumerable<Customer> customers = repositoryMock.Object.GetCustomers();Di2015NewLineDi2015NewLine    Assert.IsNotNull(customers);Di2015NewLine    Assert.AreEqual(0, customers.Count());Di2015NewLine}Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void EmptyArrayTest()Di2015NewLine{Di2015NewLine    var repositoryMock = new Mock<ICustomerRepository>();Di2015NewLineDi2015NewLine    Customer[] customerArray = repositoryMock.Object.GetCustomerArray();Di2015NewLineDi2015NewLine    Assert.IsNotNull(customerArray);Di2015NewLine    Assert.AreEqual(0, customerArray.Length);Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface ICustomerRepositoryDi2015NewLine{Di2015NewLine    IEnumerable<Customer> GetCustomers();Di2015NewLine    Customer[] GetCustomerArray();Di2015NewLine}Di2015NewLine
550619Di2015UniqueSeparatorvar regex = new Regex(@"\\=(?<Long>[0-9]+)\\?|\\+(?<Short>[0-9]+)\\?");Di2015NewLinestring test1 = ";1234567890123456?+1234567890123456789012345123=9876543?";Di2015NewLinestring test2 = ";1234567890123456?+9876543?";Di2015NewLineDi2015NewLinevar match = regex.Match(test1);Di2015NewLineConsole.WriteLine("Long: {0}", match.Groups["Long"]);     // 9876543Di2015NewLineConsole.WriteLine("Short: {0}", match.Groups["Short"]);   // blankDi2015NewLinematch = regex.Match(test2);Di2015NewLineConsole.WriteLine("Long: {0}", match.Groups["Long"]);     // blankDi2015NewLineConsole.WriteLine("Short: {0}", match.Groups["Short"]);   // 9876543Di2015NewLine
550619Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine\var regex = new Regex(@"\\=(?<Long>[0-9]+)\\?|\\+(?<Short>[0-9]+)\\?");Di2015NewLine\string test1 = ";1234567890123456?+1234567890123456789012345123=9876543?";Di2015NewLine\string test2 = ";1234567890123456?+9876543?";Di2015NewLineDi2015NewLine\ShowGroupMatches(regex, test1);Di2015NewLine\ShowGroupMatches(regex, test2);Di2015NewLine\Console.ReadLine();Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void ShowGroupMatches(Regex regex, string testCase)Di2015NewLine{Di2015NewLine\int i = 0;Di2015NewLine\foreach (Group grp in regex.Match(testCase).Groups)Di2015NewLine\{Di2015NewLine\\if (grp.Success && i != 0)Di2015NewLine\\{Di2015NewLine\\\Console.WriteLine(regex.GroupNameFromNumber(i) + " : " + grp.Value);Di2015NewLine\\}Di2015NewLine\\i++;Di2015NewLine\}Di2015NewLine}Di2015NewLine
550677Di2015UniqueSeparator        string username = ...Di2015NewLine        string[] roles = ...Di2015NewLine        Thread.CurrentPrincipal = new GenericPrincipal(Di2015NewLine            new GenericIdentity(username), roles);Di2015NewLine
550677Di2015UniqueSeparator    [PrincipalPermission(SecurityAction.Demand, Role="ADMIN")]Di2015NewLine    public void Foo()Di2015NewLine    { // validated automatically by the .NET runtime ;-pDi2015NewLineDi2015NewLine    }Di2015NewLine
550677Di2015UniqueSeparator    static bool IsInRole(string role)Di2015NewLine    {Di2015NewLine        IPrincipal principal = Thread.CurrentPrincipal;Di2015NewLine        return principal != null && principal.IsInRole(role);Di2015NewLine    }Di2015NewLine    ...Di2015NewLine    bool isAdmin = IsInRole("ADMIN");Di2015NewLine
550738Di2015UniqueSeparator    public abstract class PointList<T> : IPointList where T : IPointDi2015NewLine    {Di2015NewLine        public IList<T> GetPointsDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return GetPointsCore ();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        IList<IPoint> IPointList.GetPointsDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return GetPointsCore () as IList<IPoint>;Di2015NewLine            }        Di2015NewLine        }Di2015NewLineDi2015NewLine        protected abstract IList<T> GetPointsCore();        Di2015NewLine    }Di2015NewLine
551105Di2015UniqueSeparatorgmcs Program.cs -r:System.Windows.Forms.dll -r:System.Drawing.dllDi2015NewLine
551105Di2015UniqueSeparatorgmcs
551194Di2015UniqueSeparatorPublic Function getSecureCookie(ByVal Request As HttpRequest) As StringDi2015NewLine    Dim secureCookie As HttpCookie = Request.Cookies("Test")Di2015NewLine    If (Not (secureCookie) Is Nothing) ThenDi2015NewLine        Return secureCookie.ToStringDi2015NewLine    ElseDi2015NewLine        Return ""Di2015NewLine    End IfDi2015NewLineEnd FunctionDi2015NewLine
551194Di2015UniqueSeparatorIf secureCookie IsNot Nothing
551355Di2015UniqueSeparatorGraphics g = this.CreateGraphics();Di2015NewLine
551355Di2015UniqueSeparatorBitmap bmpNew = new Bitmap( width, height );Di2015NewLineGraphics g = Graphics.FromBitmap( bmpNew );Di2015NewLine
551422Di2015UniqueSeparatorWTSGetActiveConsoleSessionId()
551422Di2015UniqueSeparatorWTSEnumerateSessions()
551641Di2015UniqueSeparatorn
551641Di2015UniqueSeparatorx
551641Di2015UniqueSeparatorn
551641Di2015UniqueSeparatorx = x.Next;
551641Di2015UniqueSeparatorNodeAt(4)
551641Di2015UniqueSeparatorvar linkedList = new LinkedList<string>(new []{"John", "Paul", "George", "Ringo"});Di2015NewLinelinkedList.ElementAt(3); // this returns you Ringo, note that Di2015NewLine                         // the index is 0-based!Di2015NewLine
551721Di2015UniqueSeparatorexaminations
551721Di2015UniqueSeparatorxrays
551721Di2015UniqueSeparatorSELECT PatientID, ExamDate [Date], ExamResults [Details]Di2015NewLineFROM examinationsDi2015NewLineWHERE PatientID = @patientDi2015NewLineDi2015NewLineUNION ALLDi2015NewLineDi2015NewLineSELECT PatientID, XrayDate [Date], XrayComments [Details]Di2015NewLineFROM xraysDi2015NewLineWHERE PatientID = @patientDi2015NewLine
552013Di2015UniqueSeparator    public static void Negate(Bitmap image)Di2015NewLine    {Di2015NewLine        const int RED_PIXEL = 2;Di2015NewLine        const int GREEN_PIXEL = 1;Di2015NewLine        const int BLUE_PIXEL = 0;Di2015NewLineDi2015NewLineDi2015NewLine        BitmapData bmData = currentImage.LockBits(new Rectangle(0, 0, image.Width, image.Height), ImageLockMode.ReadWrite, image.PixelFormat);Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            int stride = bmData.Stride;Di2015NewLine            int bytesPerPixel = (currentImage.PixelFormat == PixelFormat.Format24bppRgb ? 3 : 4);Di2015NewLineDi2015NewLine            unsafeDi2015NewLine            {Di2015NewLine                byte* pixel = (byte*)(void*)bmData.Scan0;Di2015NewLine                int yMax = image.Height;Di2015NewLine                int xMax = image.Width;Di2015NewLineDi2015NewLine                for (int y = 0; y < yMax; y++)Di2015NewLine                {Di2015NewLine                    int yPos = y * stride;Di2015NewLine                    for (int x = areaSize.X; x < xMax; x++)Di2015NewLine                    {Di2015NewLine                        int pos = yPos + (x * bytesPerPixel);Di2015NewLineDi2015NewLine                        pixel[pos + RED_PIXEL] = (byte)(255 - pixel[pos + RED_PIXEL]);Di2015NewLine                        pixel[pos + GREEN_PIXEL] = (byte)(255 - pixel[pos + GREEN_PIXEL]);Di2015NewLine                        pixel[pos + BLUE_PIXEL] = (byte)(255 - pixel[pos + BLUE_PIXEL]);                                                    Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            image.UnlockBits(bmData);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
552013Di2015UniqueSeparator    public static void Negate(Bitmap image)Di2015NewLine    {Di2015NewLineDi2015NewLine            Bitmap clone = (Bitmap) image.Clone();Di2015NewLineDi2015NewLine            using (Graphics g = Graphics.FromImage(image))Di2015NewLine            {Di2015NewLineDi2015NewLine                // negation ColorMatrixDi2015NewLine                ColorMatrix colorMatrix = new ColorMatrix(Di2015NewLine                    new float[][]Di2015NewLine                        {Di2015NewLine                            new float[] {-1, 0, 0, 0, 0},Di2015NewLine                            new float[] {0, -1, 0, 0, 0},Di2015NewLine                            new float[] {0, 0, -1, 0, 0},Di2015NewLine                            new float[] {0, 0, 0, 1, 0},Di2015NewLine                            new float[] {0, 0, 0, 0, 1}Di2015NewLine                        });Di2015NewLineDi2015NewLine                ImageAttributes attributes = new ImageAttributes();Di2015NewLineDi2015NewLine                attributes.SetColorMatrix(colorMatrix);Di2015NewLineDi2015NewLine                g.DrawImage(clone, new Rectangle(0, 0, clone.Width, clone.Height),Di2015NewLine                            0, 0, clone.Width, clone.Height, GraphicsUnit.Pixel, attributes);Di2015NewLine           }Di2015NewLine    }Di2015NewLine
552211Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing System.Xml;Di2015NewLineusing System.Xml.XPath;Di2015NewLine
552211Di2015UniqueSeparator    string xml = @"<poi>      Di2015NewLine                     <city>stockholm</city>  Di2015NewLine                     <country>sweden</countr>Di2015NewLine                        <gpoint>        Di2015NewLine                            <lat>51.1</lat>        Di2015NewLine                            <lng>67.98</lng>    Di2015NewLine                        </gpoint>Di2015NewLine                   </poi>";Di2015NewLineDi2015NewLine    XmlReaderSettings set = new XmlReaderSettings();Di2015NewLine    set.ConformanceLevel = ConformanceLevel.Fragment;Di2015NewLineDi2015NewLine    XPathDocument doc = Di2015NewLine        new XPathDocument(XmlReader.Create(new StringReader(xml), set));Di2015NewLineDi2015NewLine    XPathNavigator nav = doc.CreateNavigator();Di2015NewLineDi2015NewLineDi2015NewLine    Console.WriteLine(nav.SelectSingleNode("/poi/gpoint/lat"));Di2015NewLine    Console.WriteLine(nav.SelectSingleNode("/poi/gpoint/lng"));Di2015NewLine
552211Di2015UniqueSeparatorSelectSingleNode
552211Di2015UniqueSeparator<gpoint>
552400Di2015UniqueSeparatorSpVoice objSpeech = new SpVoice();Di2015NewLineobjSpeech.Speak("Hello world",SpeechVoiceSpeakFlags.SVSFlagsAsync);Di2015NewLineobjSpeech.WaitUntilDone(Timeout.Infinite);Di2015NewLine
552427Di2015UniqueSeparatorServiceHost
552427Di2015UniqueSeparatorServiceHost
552427Di2015UniqueSeparatorWCFServiceHost<T>
552427Di2015UniqueSeparatorIWCFState
552427Di2015UniqueSeparatorEndpointDispatcher
552427Di2015UniqueSeparatorusing System.ServiceModel;Di2015NewLineusing System.ServiceModel.Dispatcher;Di2015NewLine
552427Di2015UniqueSeparatorIWCFState
552427Di2015UniqueSeparatorpublic interface IWCFStateDi2015NewLine{Di2015NewLine    EndpointDispatcher MexEndpointDispatcherDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLine}Di2015NewLine
552427Di2015UniqueSeparatorServiceHost
552427Di2015UniqueSeparatorpublic static class WCFExtensionsDi2015NewLine{Di2015NewLine    public static void RemoveMexEndpointDispatcher(this ServiceHost host){}Di2015NewLineDi2015NewLine    public static void AddMexEndpointDispatcher(this ServiceHost host){}Di2015NewLine}Di2015NewLine
552427Di2015UniqueSeparatorServiceHost
552427Di2015UniqueSeparatorpublic static void RemoveMexEndpointDispatcher(this ServiceHost host)Di2015NewLine{Di2015NewLine    // In the simple example, we only define one MEX endpoint forDi2015NewLine    // one transport protocolDi2015NewLine    var queryMexChannelDisps = Di2015NewLine            host.ChannelDispatchers.Where(Di2015NewLine                disp => (((ChannelDispatcher)disp).Endpoints[0].ContractNameDi2015NewLine                                            == "IMetadataExchange"));Di2015NewLine    var channelDisp = (ChannelDispatcher)queryMexChannelDisps.First();Di2015NewLineDi2015NewLine    // Save the MEX EndpointDispatcherDi2015NewLine    ((IWCFState)host).MexEndpointDispatcher = channelDisp.Endpoints[0];Di2015NewLineDi2015NewLine    channelDisp.Endpoints.Remove(channelDisp.Endpoints[0]);Di2015NewLine}Di2015NewLine
552427Di2015UniqueSeparator// WCFServiceHost<T> inherits from ServiceHost and T is the Service Type,Di2015NewLine// with the new() condition for the generic type T.  It encapsulates Di2015NewLine// the creation of the Service Type that is passed into the base class Di2015NewLine// constructor.Di2015NewLineUri baseAddress = new Uri("someValidURI");Di2015NewLineWCFServiceHost<T> serviceImplementation = new WCFServiceHost<T>(baseAddress);Di2015NewLineDi2015NewLine// We must open the ServiceHost first...Di2015NewLineserviceImplementation.Open();Di2015NewLineDi2015NewLine// Let's turn MEX off by default.Di2015NewLineserviceImplementation.RemoveMexEndpointDispatcher();Di2015NewLine
552427Di2015UniqueSeparatorServiceHost
552427Di2015UniqueSeparatorpublic static void AddMexEndpointDispatcher(this ServiceHost host)Di2015NewLine{Di2015NewLine    var queryMexChannelDisps =Di2015NewLine            host.ChannelDispatchers.Where(Di2015NewLine                    disp => (((ChannelDispatcher)disp).Endpoints.Count == 0));Di2015NewLine    var channelDisp = (ChannelDispatcher)queryMexChannelDisps.First();Di2015NewLineDi2015NewLine    // Add the MEX EndpointDispatcherDi2015NewLine    channelDisp.Endpoints.Add(((IWCFState)host).MexEndpointDispatcher);Di2015NewLine}Di2015NewLine
552427Di2015UniqueSeparatorserviceImplementation.AddMexEndpointDispatcher();Di2015NewLine
552427Di2015UniqueSeparatorEndpointDispatcher
552427Di2015UniqueSeparatorServiceHost
552427Di2015UniqueSeparatorOpen()
552427Di2015UniqueSeparatorServiceHost
552427Di2015UniqueSeparatorServiceHost
552469Di2015UniqueSeparatorIDictionary<Type,Delegate>
552469Di2015UniqueSeparatorT
552469Di2015UniqueSeparatorFunc<ParseContext,T>
552469Di2015UniqueSeparatorList<string>
552469Di2015UniqueSeparatorList<int>
552469Di2015UniqueSeparatorList<T>
552469Di2015UniqueSeparatorList<T>
552469Di2015UniqueSeparatorif (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>))Di2015NewLine{Di2015NewLine    // Handle listsDi2015NewLine    // use type.GetGenericArguments() to work out the element typeDi2015NewLine}Di2015NewLine
552469Di2015UniqueSeparatorIList<T>
552469Di2015UniqueSeparatorT
552469Di2015UniqueSeparatorT
552637Di2015UniqueSeparatorConsole.WriteLine(new StackFrame().GetMethod().DeclaringType);Di2015NewLine
552742Di2015UniqueSeparatorref cards[n]
552742Di2015UniqueSeparatorfoo
552742Di2015UniqueSeparatorbar
552742Di2015UniqueSeparatorstatic void Swap(ref int foo, ref int bar) {Di2015NewLine    int tmp = foo;Di2015NewLine    foo = bar;Di2015NewLine    bar = tmp;Di2015NewLine}Di2015NewLine
552742Di2015UniqueSeparatorInterlocked.Exchange(ref foo, ref bar);Di2015NewLine
552742Di2015UniqueSeparatorint tmp = cards[n];Di2015NewLinecards[n] = cards[i];Di2015NewLinecards[i] = tmp;Di2015NewLine
552742Di2015UniqueSeparatorstatic void Swap(IList<int> list, int indexA, int indexB)Di2015NewLine{Di2015NewLine    int tmp = list[indexA];Di2015NewLine    list[indexA] = list[indexB];Di2015NewLine    list[indexB] = tmp;Di2015NewLine}Di2015NewLine
552783Di2015UniqueSeparatorfor
552783Di2015UniqueSeparatorarr.Length
552783Di2015UniqueSeparatorfor(int i = 0 ; i < arr.Length ; i++) {Di2015NewLine    Console.WriteLine(arr[i]); // skips bounds checkDi2015NewLine}Di2015NewLine
552783Di2015UniqueSeparatorarr.Length
552783Di2015UniqueSeparatorint len = arr.Length;Di2015NewLinefor(int i = 0 ; i < len ; i++) {Di2015NewLine    Console.WriteLine(arr[i]); // performs bounds checkDi2015NewLine}Di2015NewLine
552783Di2015UniqueSeparatorList<T>
552783Di2015UniqueSeparatorfor ( for-initializer ; for-condition ; for-iterator ) embedded-statementDi2015NewLine
552783Di2015UniqueSeparator{Di2015NewLine    for-initializer ;Di2015NewLine    while ( for-condition ) {Di2015NewLine        embedded-statement ;Di2015NewLine        LLoop:Di2015NewLine        for-iterator ;Di2015NewLine    }Di2015NewLine}Di2015NewLine
552812Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine  static void Main(string[] args)Di2015NewLine  {Di2015NewLine    foreach (var arg in args)Di2015NewLine    {Di2015NewLine      Console.WriteLine(arg);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}
552812Di2015UniqueSeparatorMyApp.exe Arg1 Arg2 Arg3
552812Di2015UniqueSeparatorMyApp.exe "Arg 1" "Arg 2" "Arg 3"
552812Di2015UniqueSeparatorCopy.exe C:\\file1.txt C:\\file2.txt
552843Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine    public static void SetParent<T>(T root)Di2015NewLine    {Di2015NewLine        foreach (PropertyInfo prop in typeof(T).GetPropertiesDi2015NewLine            (BindingFlags.Public | BindingFlags.Instance))Di2015NewLine        {Di2015NewLine            if (!prop.CanRead) continue;Di2015NewLineDi2015NewLine            Type listType = null;Di2015NewLine            foreach (Type interfaceType in prop.PropertyType.GetInterfaces())Di2015NewLine            {Di2015NewLine                if (interfaceType.IsGenericType &&Di2015NewLine                    interfaceType.GetGenericTypeDefinition() == typeof(IList<>))Di2015NewLine                { // IList<T> detectedDi2015NewLine                    listType = interfaceType.GetGenericArguments()[0];Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            List<PropertyInfo> propsToSet = new List<PropertyInfo>();Di2015NewLine            foreach (PropertyInfo childProp in (listType ?? prop.PropertyType).GetProperties(Di2015NewLine                BindingFlags.Public | BindingFlags.Instance))Di2015NewLine            {Di2015NewLine                if (childProp.PropertyType == typeof(T)) propsToSet.Add(childProp);Di2015NewLine            }Di2015NewLineDi2015NewLine            if(propsToSet.Count == 0) continue; // nothing to doDi2015NewLine            if (listType == null)Di2015NewLine            {Di2015NewLine                object child = prop.GetValue(root, null);Di2015NewLine                if (child == null) continue;Di2015NewLine                foreach (PropertyInfo childProp in propsToSet)Di2015NewLine                {Di2015NewLine                    childProp.SetValue(child, root, null);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                IList list = (IList)prop.GetValue(root, null);Di2015NewLine                foreach (object child in list)Di2015NewLine                {Di2015NewLine                    if (child == null) continue;Di2015NewLine                    foreach (PropertyInfo childProp in propsToSet)Di2015NewLine                    {Di2015NewLine                        childProp.SetValue(child, root, null);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
553025Di2015UniqueSeparatorFormClosingEventArgs.Cancel
553025Di2015UniqueSeparatorprivate void Form1_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine{Di2015NewLine  if(myConditionsAreMet == false)Di2015NewLine    e.Cancel = true;Di2015NewLine}Di2015NewLine
553057Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        MainThread.Start();Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MainThreadDi2015NewLine{Di2015NewLine    private static int _eventsRaised = 0;Di2015NewLine    private static int _eventsRespondedTo = 0;Di2015NewLine    private static bool _reload = false;Di2015NewLine    private static readonly object _reloadLock = new object();Di2015NewLine    //to do something once in handler, thoughDi2015NewLine    //this code would go in onStart in a windows service.Di2015NewLine    public static void Start()Di2015NewLine    {Di2015NewLine        WorkerThread thread1 = null;Di2015NewLine        WorkerThread thread2 = null;Di2015NewLine        //WorkerTimer thread1 = null;Di2015NewLine        //WorkerTimer thread2 = null;Di2015NewLineDi2015NewLine        //Console.WriteLine("Start: thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine        //watch configDi2015NewLine        FileSystemWatcher watcher = new FileSystemWatcher();Di2015NewLine        watcher.Path = "../../";Di2015NewLine        watcher.Filter = "test.xml";Di2015NewLine        watcher.EnableRaisingEvents = true;Di2015NewLine        //subscribe to changed event. note that this event can be raised a number of times for each save of the file.Di2015NewLine        watcher.Changed += (sender, args) => FileChanged(sender, args);Di2015NewLineDi2015NewLine        thread1 = new WorkerThread("foo", 10);Di2015NewLine        thread2 = new WorkerThread("bar", 15);Di2015NewLine        //thread1 = new WorkerTimer("foo", 10);Di2015NewLine        //thread2 = new WorkerTimer("bar", 15);Di2015NewLineDi2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            if (_reload)Di2015NewLine            {Di2015NewLine                //create our two threads.Di2015NewLine                //Console.WriteLine("Start - reload: thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine                //wait, to enable other file changed events to passDi2015NewLine                //Console.WriteLine("Start - waiting: thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine                thread1.Dispose();Di2015NewLine                thread2.Dispose();Di2015NewLine                Thread.Sleep(3000); //each thread lasts 0.5 seconds, so 3 seconds should be plenty to wait for the Di2015NewLine                //LoadData function to complete.Di2015NewLine                Monitor.Enter(_reloadLock);Di2015NewLine                //GC.Collect();Di2015NewLine                thread1 = new WorkerThread("foo", 5);Di2015NewLine                thread2 = new WorkerThread("bar", 7);Di2015NewLine                //thread1 = new WorkerTimer("foo", 5);Di2015NewLine                //thread2 = new WorkerTimer("bar", 7);Di2015NewLine                _reload = false;Di2015NewLine                Monitor.Exit(_reloadLock);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    //this event handler is called in a separate thread to Start()Di2015NewLine    static void FileChanged(object source, FileSystemEventArgs e)Di2015NewLine    {Di2015NewLine        Monitor.Enter(_reloadLock);Di2015NewLine        _eventsRaised += 1;Di2015NewLine        //if it was more than a second since the last event (ie, it's a new save), then wait for 3 seconds (to avoid Di2015NewLine        //multiple events for the same file save) before processingDi2015NewLine        if (!_reload)Di2015NewLine        {Di2015NewLine            //Console.WriteLine("FileChanged: thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine            _eventsRespondedTo += 1;Di2015NewLine            //Console.WriteLine("FileChanged. Handled event {0} of {1}.", _eventsRespondedTo, _eventsRaised);Di2015NewLine            //tell main thread to restart threadsDi2015NewLine            _reload = true;Di2015NewLine        }Di2015NewLine        Monitor.Exit(_reloadLock);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WorkerTimer : IDisposableDi2015NewLine{Di2015NewLine    private System.Threading.Timer _timer;   //the timer exists in its own separate thread pool thread.Di2015NewLine    //private System.Timers.Timer _timer;Di2015NewLine    private string _name = string.Empty;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="WorkerThread"/> class.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="name">The name.</param>Di2015NewLine    /// <param name="interval">The interval, in seconds.</param>Di2015NewLine    public WorkerTimer(string name, int interval)Di2015NewLine    {Di2015NewLine        _name = name;Di2015NewLine        //Console.WriteLine("WorkerThread constructor: Called from thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine        //_timer = new System.Timers.Timer(interval * 1000);Di2015NewLine        //_timer.Elapsed += (sender, args) => LoadData();Di2015NewLine        //_timer.Start();Di2015NewLine        _timer = new Timer(Tick, null, 1000, interval * 1000);Di2015NewLine    }Di2015NewLineDi2015NewLine    //this delegate instance does NOT run in the same thread as the thread that created the timer. It runs in its ownDi2015NewLine    //thread, taken from the ThreadPool. Hence, no need to create a new thread for the LoadData method.Di2015NewLine    private void Tick(object state)Di2015NewLine    {Di2015NewLine        LoadData();Di2015NewLine    }Di2015NewLineDi2015NewLine    //Loads the data. Called from separate thread. Lasts 0.5 seconds.Di2015NewLine    //Di2015NewLine    private void LoadData()Di2015NewLine    {Di2015NewLine        for (int i = 0; i < 10; i++)Di2015NewLine        {Di2015NewLine            //Console.WriteLine(string.Format("Worker thread {0} ({2}): {1}", _name, i, Thread.CurrentThread.ManagedThreadId));Di2015NewLine            Thread.Sleep(50);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Stop()Di2015NewLine    {Di2015NewLine        //Console.WriteLine("Stop: called from thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine        //_timer.Stop();Di2015NewLine        _timer.Change(Timeout.Infinite, Timeout.Infinite);Di2015NewLine        //_timer = null;Di2015NewLine        //_timer.Dispose();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    #region IDisposable MembersDi2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        //Console.WriteLine("Dispose: called from thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine        //_timer.Stop();Di2015NewLine        _timer.Change(Timeout.Infinite, Timeout.Infinite);Di2015NewLine        //_timer = null;Di2015NewLine        //_timer.Dispose();Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic class WorkerThread : IDisposableDi2015NewLine{Di2015NewLine    private string _name = string.Empty;Di2015NewLine    private int _interval = 0;  //thread wait interval in ms.Di2015NewLine    private Thread _thread = null;Di2015NewLine    private ThreadStart _job = null;Di2015NewLine    private object _syncObject = new object();Di2015NewLine    private bool _killThread = false;Di2015NewLineDi2015NewLine    public WorkerThread(string name, int interval)Di2015NewLine    {Di2015NewLine        _name = name;Di2015NewLine        _interval = interval * 1000;Di2015NewLine        _job = new ThreadStart(LoadData);Di2015NewLine        _thread = new Thread(_job);Di2015NewLine        //Console.WriteLine("WorkerThread constructor: thread " + _thread.ManagedThreadId + " created. Called from thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine        _thread.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    //Loads the data. Called from separate thread. Lasts 0.5 seconds.Di2015NewLine    //Di2015NewLine    //private void LoadData(object state)Di2015NewLine    private void LoadData()Di2015NewLine    {Di2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            //check to see if thread it to be stopped.Di2015NewLine            bool isKilled = false;Di2015NewLineDi2015NewLine            lock (_syncObject)Di2015NewLine            {Di2015NewLine                isKilled = _killThread;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (isKilled)Di2015NewLine                return;Di2015NewLineDi2015NewLine            for (int i = 0; i < 10; i++)Di2015NewLine            {Di2015NewLine                //Console.WriteLine(string.Format("Worker thread {0} ({2}): {1}", _name, i, Thread.CurrentThread.ManagedThreadId));Di2015NewLine                Thread.Sleep(50);Di2015NewLine            }Di2015NewLine            Thread.Sleep(_interval);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Stop()Di2015NewLine    {Di2015NewLine        //Console.WriteLine("Stop: thread " + _thread.ManagedThreadId + " called from thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine        //_thread.Abort();Di2015NewLine        lock (_syncObject)Di2015NewLine        {Di2015NewLine            _killThread = true;Di2015NewLine        }Di2015NewLine        _thread.Join();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    #region IDisposable MembersDi2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        //Console.WriteLine("Dispose: thread " + _thread.ManagedThreadId + " called from thread " + Thread.CurrentThread.ManagedThreadId);Di2015NewLine        //_thread.Abort();Di2015NewLine        lock (_syncObject)Di2015NewLine        {Di2015NewLine            _killThread = true;Di2015NewLine        }Di2015NewLine        _thread.Join();Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
553087Di2015UniqueSeparatorDi2015NewLineIf you receive a SocketException, use SocketException.ErrorCode to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.Di2015NewLine
553087Di2015UniqueSeparatormyerrorlist
553087Di2015UniqueSeparatorWSAGetLastError()
553087Di2015UniqueSeparatoraccept()
553087Di2015UniqueSeparatorSocket
553087Di2015UniqueSeparatorHandle
553087Di2015UniqueSeparatorselect()
553087Di2015UniqueSeparatoraccept()
553087Di2015UniqueSeparatorselect()
553101Di2015UniqueSeparatorif (File.Exists(filePath))Di2015NewLine{Di2015NewLine\MemoryStream memoryStream = new MemoryStream();Di2015NewLineDi2015NewLine\byte[] fileBytes = File.ReadAllBytes(filePath);Di2015NewLine\memoryStream.Write(fileBytes, 0, fileBytes.Length);Di2015NewLine\memoryStream.Position = 0;Di2015NewLineDi2015NewLine\image.BeginInit();Di2015NewLine\image.StreamSource = memoryStream;Di2015NewLineDi2015NewLine\if (decodePixelWidth > 0)Di2015NewLine\    image.DecodePixelWidth = decodePixelWidth;Di2015NewLineDi2015NewLine\image.EndInit();Di2015NewLine}Di2015NewLine
553155Di2015UniqueSeparatorc:\\windows\\Microsoft.NET\\Framework\\v3.5\\
553155Di2015UniqueSeparatorcmd.exe
553155Di2015UniqueSeparator  c:\\windows\\Microsoft.NET\\Framework\\v3.5\\bin\\csc.exe Di2015NewLine            /t:exe /out:MyApplication.exe MyApplication.cs  ...Di2015NewLine
553155Di2015UniqueSeparator/r:AssemblyName.dll
553155Di2015UniqueSeparatorMyApplicaction
553155Di2015UniqueSeparator<ENTER>
553457Di2015UniqueSeparator    public static IQueryable<TSource> WhereBetween<TSource, TValue>(Di2015NewLine        this IQueryable<TSource> source,Di2015NewLine        Expression<Func<TSource, TValue>> selector,Di2015NewLine        params Range<TValue>[] ranges)Di2015NewLine    {Di2015NewLine        return WhereBetween<TSource,TValue>(source, selector,Di2015NewLine            (IEnumerable<Range<TValue>>) ranges);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IQueryable<TSource> WhereBetween<TSource, TValue>(Di2015NewLine        this IQueryable<TSource> source,Di2015NewLine        Expression<Func<TSource, TValue>> selector,Di2015NewLine        IEnumerable<Range<TValue>> ranges)Di2015NewLine    {Di2015NewLine        var param = Expression.Parameter(typeof(TSource), "x");Di2015NewLine        var member = Expression.Invoke(selector, param);Di2015NewLine        Expression body = null;Di2015NewLine        foreach(var range in ranges)Di2015NewLine        {Di2015NewLine            var filter = Expression.AndAlso(Di2015NewLine                Expression.GreaterThanOrEqual(member,Di2015NewLine                     Expression.Constant(range.A, typeof(TValue))),Di2015NewLine                Expression.LessThanOrEqual(member,Di2015NewLine                     Expression.Constant(range.B, typeof(TValue))));Di2015NewLine            body = body == null ? filter : Expression.OrElse(body, filter);Di2015NewLine        }            Di2015NewLine        return body == null ? source : source.Where(Di2015NewLine            Expression.Lambda<Func<TSource, bool>>(body, param));Di2015NewLine    }Di2015NewLine
553457Di2015UniqueSeparatorRange<decimal?> range1 = new Range<decimal?>(0,10),Di2015NewLine                range2 = new Range<decimal?>(15,20);Di2015NewLinevar qry = ctx.Orders.WhereBetween(order => order.Freight, range1, range2);Di2015NewLine
553457Di2015UniqueSeparatorSELECT -- (SNIP)Di2015NewLineFROM [dbo].[Orders] AS [t0]Di2015NewLineWHERE (([t0].[Freight] >= @p0) AND ([t0].[Freight] <= @p1))Di2015NewLineOR (([t0].[Freight] >= @p2) AND ([t0].[Freight] <= @p3))Di2015NewLine
553494Di2015UniqueSeparatorif (Monitor.TryEnter(lockObj, 0)) {Di2015NewLine    // got the lock !Di2015NewLine    try {Di2015NewLine        // codeDi2015NewLine    }Di2015NewLine    finally { // release the lockDi2015NewLine        Monitor.Exit(lockObj);Di2015NewLine    }Di2015NewLine}Di2015NewLine
553551Di2015UniqueSeparatorAttributeUsage
553551Di2015UniqueSeparatorAllowMultiple
553551Di2015UniqueSeparatortrue
553551Di2015UniqueSeparator[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]Di2015NewLinepublic sealed class MyCustomAttribute: AttributeDi2015NewLine
553553Di2015UniqueSeparatorApplicationController
553605Di2015UniqueSeparatordouble[] max = dataDi2015NewLine  .Select(crArray => crArray.Select( cr => cr.ValueNorm ).Max())Di2015NewLine  .ToArray();Di2015NewLine
553605Di2015UniqueSeparator// reference type is IEnumerable<string>, instance type is string[]Di2015NewLineIEnumerable<string> myArray =Di2015NewLine  new string[3] { "abc", "def", "ghi" };Di2015NewLine// reference type is IEnumerable<string>, instance type is ???Di2015NewLineIEnumerable<string> myQuery = myArrayDi2015NewLine  .Select(s => s.Reverse().ToString());Di2015NewLineDi2015NewLine//Cast - worksDi2015NewLinestring[] result = (string[]) myArray;Di2015NewLine//Cast - runtime exception: System.InvalidCastExceptionDi2015NewLineresult = (string[])myQuery;Di2015NewLine//Conversion - worksDi2015NewLineresult = myQuery.ToArray();Di2015NewLine
553739Di2015UniqueSeparatorvar enumValues = Enum.GetValues(typeof(CertificateTypes)).Cast<CertificateTypes>().Select(e => (byte)e);Di2015NewLinevar selectList = new SelectList(enumValues);Di2015NewLine
553739Di2015UniqueSeparatorvar enumValues = Enum.GetValues(typeof(CertificateTypes)).Cast<CertificateTypes>()Di2015NewLine                                                         .Select(e => new KeyValuePair<byte, string>((byte)e, e.ToString()));Di2015NewLinevar selectList = new SelectList(enumValues, "Key", "Value");Di2015NewLine
553779Di2015UniqueSeparatorArgumentNullException
553779Di2015UniqueSeparatorif (str1 == null) throw new ArgumentNullException("str1");Di2015NewLineif (str2 == null) throw new ArgumentNullException("str2");Di2015NewLine
553842Di2015UniqueSeparator[XmlIgnore]Di2015NewLinepublic int[, ,] Data { get; set; }Di2015NewLineDi2015NewLine[XmlElement("Data"), Browsable(false)]Di2015NewLine[EditorBrowsable(EditorBrowsableState.Never)]Di2015NewLinepublic int[] DataDtoDi2015NewLine{Di2015NewLine    get { /* flatten from Data */ }Di2015NewLine    set { /* expand into Data */ }Di2015NewLine}Di2015NewLine
553996Di2015UniqueSeparatormyTimer.Tick -= new EventHandler(ev);Di2015NewLine
553996Di2015UniqueSeparatorTimer myTimer = new Timer(); // Windows.Forms TimerDi2015NewLineDi2015NewLinepublic void addEvent(EventHandler ev)Di2015NewLine{Di2015NewLine    myTimer.Tick += ev;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void removeEvent(EventHandler ev)Di2015NewLine{Di2015NewLine    myTimer.Tick -= ev;Di2015NewLine}Di2015NewLine
554068Di2015UniqueSeparator\\w+|"[\\w\\s]*"Di2015NewLine
554068Di2015UniqueSeparatorRegex regex = new Regex(@"\\w+|""[\\w\\s]*""");Di2015NewLine
554068Di2015UniqueSeparator    RegexDi2015NewLine        .Matches(input, @"(?<match>\\w+)|\\""(?<match>[\\w\\s]*)""")Di2015NewLine        .Cast<Match>()Di2015NewLine        .Select(m => m.Groups["match"].Value)Di2015NewLine        .ToList()Di2015NewLine        .ForEach(s => Console.WriteLine(s));Di2015NewLine
554133Di2015UniqueSeparatorKeys keyData = (Keys)rawWin32KeyCode;Di2015NewLine
554291Di2015UniqueSeparatorServiceBase.Stop()
554308Di2015UniqueSeparatorToArray()
554315Di2015UniqueSeparatorKeys key = Keys.Control | Keys.Shift | Keys.D;Di2015NewLineDi2015NewLineforeach (string s in key.ToString().Split(','))Di2015NewLine{Di2015NewLine    Keys k = (Keys) Enum.Parse(typeof(Keys), s.Trim());Di2015NewLineDi2015NewLine    Console.WriteLine(k);Di2015NewLine}Di2015NewLine
554333Di2015UniqueSeparatorDirectoryInfo folder = new DirectoryInfo(Server.MapPath("/content/images"));Di2015NewLineforeach(FileInfo file in folder.Files)Di2015NewLine    // find all your files hereDi2015NewLine
554375Di2015UniqueSeparatorSendMessage(SHFindMenuBar(window_hwnd), Di2015NewLine            SHCMBM_OVERRIDEKEY, Di2015NewLine            VK_TTALK, Di2015NewLine            MAKELPARAM((SHMBOF_NODEFAULT|SHMBOF_NOTIFY), (SHMBOF_NODEFAULT|SHMBOF_NOTIFY));Di2015NewLine
554375Di2015UniqueSeparatorSendMessage(SHFindMenuBar(window_hwnd), Di2015NewLine            SHCMBM_OVERRIDEKEY, Di2015NewLine            VK_TTALK, Di2015NewLine            MAKELPARAM(0, (SHMBOF_NODEFAULT|SHMBOF_NOTIFY));Di2015NewLine
554375Di2015UniqueSeparatorcase WM_HOTKEY:Di2015NewLine    switch(HIWORD(lParam))Di2015NewLine    {Di2015NewLine    case VK_TTALK:Di2015NewLine        // make ph callDi2015NewLine        break;Di2015NewLine    }Di2015NewLine    return TRUE;Di2015NewLine
554375Di2015UniqueSeparator#include <phone.h>Di2015NewLineDi2015NewLinevoid MakePhoneCall(const wchar_t* number)Di2015NewLine{Di2015NewLine    PHONEMAKECALLINFO call;Di2015NewLine    memset(&call, 0x0, sizeof(PHONEMAKECALLINFO));Di2015NewLine    call.cbSize = sizeof(PHONEMAKECALLINFO);Di2015NewLine    call.dwFlags = PMCF_DEFAULT;Di2015NewLine    call.pszDestAddress = number;Di2015NewLine    PhoneMakeCall(&call);Di2015NewLine}Di2015NewLine
554375Di2015UniqueSeparator  #include <snapi.h>Di2015NewLine  RegistryNotifyWindow(SN_PHONEACTIVECALLCOUNT_ROOT, SN_PHONEACTIVECALLCOUNT_PATH, SN_PHONEACTIVECALLCOUNT_VALUE, window_hwnd, callback_window_msg_number /*e.g. WM_APP */, 0, NULL, &phone_call_notify_handle);Di2015NewLine
554375Di2015UniqueSeparatorRegistryCloseNotification(phone_call_notify_handle);Di2015NewLine
554375Di2015UniqueSeparator#define WM_CPROG_SEND_VKEY_DTMF (WM_APP+3) // Sends the DTMF tone(s) through to the current call (converting from VKEY to DTMF chars)Di2015NewLineDi2015NewLine  BOOL PhoneSendDTMF(UINT uvKey)Di2015NewLine  {Di2015NewLine    BOOL bRet = FALSE;Di2015NewLine    static HWND s_hwndCProg = NULL;Di2015NewLine    TCHAR chDTMF = MapVKeyToChar(uvKey);Di2015NewLineDi2015NewLine    // Attempt to find the cprog window (MSCprog).Di2015NewLine    // Try to keep this window handle cached.Di2015NewLine    if(NULL == s_hwndCProg || !IsWindow(s_hwndCProg))Di2015NewLine    {Di2015NewLine      s_hwndCProg = FindWindow(TEXT("MSCprog"), NULL);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Send WM_CPROG_SEND_VKEY_DTMF to the CProg window.Di2015NewLine    if(NULL != s_hwndCProg)Di2015NewLine    {Di2015NewLine      bRet = BOOLIFY(PostMessage(s_hwndCProg,Di2015NewLine                              WM_CPROG_SEND_VKEY_DTMF, (WPARAM)chDTMF, 0));Di2015NewLine    }Di2015NewLineDi2015NewLine    return bRet;Di2015NewLine  }Di2015NewLine
554423Di2015UniqueSeparatorpublic class EmploymentDi2015NewLine{Di2015NewLine    public Employment(EmploymentType employmentType)Di2015NewLine    {Di2015NewLine        this.EmploymentType = employmentType;Di2015NewLine    }Di2015NewLineDi2015NewLine    public EmploymentType EmploymentType { get; set; }Di2015NewLine}Di2015NewLine
554423Di2015UniqueSeparatorEmployment e = new Employment(EmploymentType.FullTime);Di2015NewLine
554423Di2015UniqueSeparatorpublic EmploymentType? EmploymentType { get; set; } // Nullable TypeDi2015NewLineDi2015NewLinepublic void PerformAction()Di2015NewLine{Di2015NewLine    if(this.Validate())Di2015NewLine        // Perform actionDi2015NewLine}Di2015NewLineprotected bool Validate()Di2015NewLine{Di2015NewLine    if(!EmploymentType.HasValue)Di2015NewLine        throw new InvalidOperationException("EmploymentType must be set.");Di2015NewLine}Di2015NewLine
554429Di2015UniqueSeparatorIf (System.Windows.Forms.Application.MessageLoop)Di2015NewLine{Di2015NewLine  // Use this since we are a WinForms appDi2015NewLine  System.Windows.Forms.Application.Exit()Di2015NewLine}Di2015NewLineElseDi2015NewLine{Di2015NewLine  // Use this since we are a console appDi2015NewLine  System.Environment.Exit(1)Di2015NewLine}Di2015NewLine
554434Di2015UniqueSeparatorMemberwiseClone()
554434Di2015UniqueSeparatorUserControls
554434Di2015UniqueSeparatorMemberwiseClone()
554455Di2015UniqueSeparatorpublic byte[] getJPGFromImageControl(BitmapImage imageC)Di2015NewLine{Di2015NewLine       MemoryStream memStream = new MemoryStream();              Di2015NewLine        JpegBitmapEncoder encoder = new JpegBitmapEncoder();Di2015NewLine        encoder.Frames.Add(BitmapFrame.Create(imageC));Di2015NewLine        encoder.Save(memStream);Di2015NewLine        return memStream.GetBuffer();Di2015NewLine}Di2015NewLine
554455Di2015UniqueSeparatorgetJPGFromImageControl(firmaUno.Source as BitmapImage)Di2015NewLine
554471Di2015UniqueSeparator    private void WriteCheck_Shown(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Visible = false;Di2015NewLine        SelectBankAccountDialog sbad = new SelectBankAccountDialog();Di2015NewLine        DialogResult result = sbad.ShowDialog();Di2015NewLine        if (result == DialogResult.Cancel) {Di2015NewLine            this.Close();Di2015NewLine        } else {Di2015NewLine            MessageBox.Show(result.ToString());Di2015NewLine        }Di2015NewLine        MessageBox.Show(sbad.bankaccountID.ToString());Di2015NewLine        Visible = true;Di2015NewLine    }Di2015NewLine
554472Di2015UniqueSeparator <%= Html.DropDownList("CustCodes",Di2015NewLine                       ViewData["CustCodes"] as SelectList,Di2015NewLine                       "Select a Customer",Di2015NewLine                       null ) %>Di2015NewLine
554554Di2015UniqueSeparatorIQueryable<lkpMarketCode>
554554Di2015UniqueSeparatorlkpMarketCode
554554Di2015UniqueSeparatordb.lkpMarketCodes
554554Di2015UniqueSeparatorselect p.SomeProperty;
554554Di2015UniqueSeparatorselect p;
554554Di2015UniqueSeparatorIQueryable<T>
554554Di2015UniqueSeparatorIEnumerable<T>
554554Di2015UniqueSeparatormcodes
554564Di2015UniqueSeparatorPublic Class qwqwqwDi2015NewLine  Public Property xyz() As StringDi2015NewLine      GetDi2015NewLine          Return ""Di2015NewLine      End GetDi2015NewLine      Private Set(ByVal value As String)Di2015NewLine          //Di2015NewLine      End SetDi2015NewLine  End PropertyDi2015NewLineEnd ClassDi2015NewLine
554564Di2015UniqueSeparatorPublic MustInherit Class ParentDi2015NewLine  Public MustOverride Property Foo() As StringDi2015NewLineEnd ClassDi2015NewLineDi2015NewLinePublic Class ReadOnlyChildDi2015NewLine  Inherits ParentDi2015NewLineDi2015NewLine  Public Overrides Property Foo() As StringDi2015NewLine    GetDi2015NewLine        //Di2015NewLine    End GetDi2015NewLine    Private Set(ByVal value As String)Di2015NewLine        //Di2015NewLine    End SetDi2015NewLine  End PropertyDi2015NewLineEnd ClassDi2015NewLine
554564Di2015UniqueSeparatorPublic MustInherit Class ParentDi2015NewLine  Protected MustOverride Property Foo() As String       Di2015NewLineEnd ClassDi2015NewLineDi2015NewLinePublic Class ReadOnlyChildDi2015NewLine  Inherits ParentDi2015NewLineDi2015NewLine  Protected Overrides Property Foo() As StringDi2015NewLine      Public GetDi2015NewLine          //Di2015NewLine      End GetDi2015NewLine      Set(ByVal value As String)Di2015NewLine          //Di2015NewLine      End SetDi2015NewLine  End PropertyDi2015NewLineEnd ClassDi2015NewLine
554635Di2015UniqueSeparatorstring executablePath = Path.GetDirectoryName(Application.ExecutablePath);Di2015NewLinestring[] directories = Directory.GetDirectories(executablePath);Di2015NewLineforeach (string s in directories)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        DirectoryInfo langDirectory = new DirectoryInfo(s);Di2015NewLine        cmbLanguage.Items.Add(CultureInfo.GetCultureInfo(langDirectory.Name));Di2015NewLine    }Di2015NewLine    catch (Exception)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
554635Di2015UniqueSeparatorint pathLenght = executablePath.Length + 1;Di2015NewLineforeach (string s in directories)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        cmbLanguage.Items.Add(CultureInfo.GetCultureInfo(s.Remove(0, pathLenght)));Di2015NewLine    }Di2015NewLine    catch (Exception)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
554663Di2015UniqueSeparator   protected void BindMarketCodes()Di2015NewLine   {    Di2015NewLine        //bind to Country COde droplistDi2015NewLine        dd2.DataSource = from p in (new LINQOmniDataContext()).lkpMarketCodes Di2015NewLine                        orderby p.marketNameDi2015NewLine                        select {p.marketCodeID, p.marketName};Di2015NewLine        dd2.DataTextField = "marketName"Di2015NewLine        dd2.DataValueField = "marketCodeID"Di2015NewLineDi2015NewLine    }Di2015NewLine
554705Di2015UniqueSeparator<InsertParameters>Di2015NewLine<asp:ControlParameter ControlID="DetailsView1$DropDownList1" Name="DropDownList1" PropertyName="SelectedValue" Type="String" />Di2015NewLine</InsertParameters>Di2015NewLine
554705Di2015UniqueSeparator  e.InputParameters["InputParameterFieldName"] = ((DropDownList)DetailsView1.FindControl("DropDownList1")).SelectedValue;Di2015NewLine
554739Di2015UniqueSeparator<meta http-equiv="Refresh"Di2015NewLine      content="<%= Refresh_In_Seconds %>; url=Default.aspx" />Di2015NewLine
554829Di2015UniqueSeparator   //----------------------------------------------------------------------------------------Di2015NewLine    // Function: GetLastBackupTimeDi2015NewLine    //Di2015NewLine    // InputDi2015NewLine    //    sqlConnection          - An open SQLConnection to the target SQL ServerDi2015NewLine    //    DatabaseName           - Name of the database which you are interested inDi2015NewLine    //    fullDatabaseBackupOnly - Do you want only the time of the last full backupDi2015NewLine    //Di2015NewLine    // OutputDi2015NewLine    //    DateTime               - DateTime.MinValue indicates no backup existsDi2015NewLine    //                             otherwise it returns the last backup timeDi2015NewLine    //---------------------------------------------------------------------------------------Di2015NewLineDi2015NewLineDateTime GetLastBackupTime( SqlConnection sqlConnection, Di2015NewLine                            string        databaseName, Di2015NewLine                            bool          fullDatabaseBackupOnly )Di2015NewLine{Di2015NewLine    DateTime lastBackupTime = DateTime.MinValue;  Di2015NewLineDi2015NewLine    string sqlTemplate = "SELECT TOP 1 backup_finish_date " +Di2015NewLine                         "FROM msdb.dbo.backupset " + Di2015NewLine                         "WHERE database_name='{0}' {1} "Di2015NewLine                         "ORDER BY backup_finish_date DESC";Di2015NewLineDi2015NewLine    string sql = String.Format( sqlTemplate,Di2015NewLine                                databaseName,Di2015NewLine                                (fullDatabaseBackupOnly ) ? " AND type='D' " : "" );Di2015NewLineDi2015NewLine    // open connectionDi2015NewLine    using (SqlCommand cmd = new SqlCommand(sql, sqlConnection, Di2015NewLine    {Di2015NewLine       object retValue = _Command.ExecuteScalar();Di2015NewLineDi2015NewLine       if ( retValue != null ) lastBackupTime = (DateTime)retValue;Di2015NewLine    } Di2015NewLineDi2015NewLine    return lastBackupTime;Di2015NewLine}Di2015NewLine
555067Di2015UniqueSeparatorkey1=value1,key2=two|valuesDi2015NewLine
555095Di2015UniqueSeparator[OperationContract,Di2015NewLineWebInvoke(Method="POST",Di2015NewLine    BodyStyle = WebMessageBodyStyle.Bare,Di2015NewLine    RequestFormat = WebMessageFormat.Xml,Di2015NewLine    ResponseFormat = WebMessageFormat.Xml,Di2015NewLine    UriTemplate = "query")]Di2015NewLineXElement Query_Post(string qry);Di2015NewLineDi2015NewLine[OperationContract,Di2015NewLineWebInvoke(Method="GET",Di2015NewLine    BodyStyle = WebMessageBodyStyle.Bare,Di2015NewLine    RequestFormat = WebMessageFormat.Xml,Di2015NewLine    ResponseFormat = WebMessageFormat.Xml,Di2015NewLine    UriTemplate = "query?query={qry}")]Di2015NewLineXElement Query_Get(string qry);Di2015NewLine
555096Di2015UniqueSeparatorbar.add_Ready(fun msg -> Console.WriteLine(msg))Di2015NewLine
555399Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine[DllImport("user32.dll", EntryPoint="FindWindow", SetLastError = true)] static extern IntPtr FindWindowByCaption(IntPtr ZeroOnly, string lpWindowName);Di2015NewLineDi2015NewLineIntPtr hWnd = FindWindowByCaption(IntPtr.Zero,"Cisco vpn title here");Di2015NewLineif(hWnd.ToInt64() == 0){Di2015NewLine    Console.WriteLine("ERROR Could not find cisco vpn.");Di2015NewLine}else{Di2015NewLine    Console.WriteLine("Handle found");Di2015NewLine}Di2015NewLine
555481Di2015UniqueSeparatorvoid DoSomething(ref int value)Di2015NewLine
555481Di2015UniqueSeparatorvalue++
555481Di2015UniqueSeparator++value
555501Di2015UniqueSeparatorMakeGenericMethod
555501Di2015UniqueSeparatorstatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        object obj = 123.45;Di2015NewLine        typeof(Program).GetMethod("DoSomething")Di2015NewLine            .MakeGenericMethod(obj.GetType())Di2015NewLine            .Invoke(null, new object[] { obj });Di2015NewLine    }Di2015NewLine    public static void DoSomething<T>(T value)Di2015NewLine    {Di2015NewLine        T item = value; // well... now what?Di2015NewLine    }    Di2015NewLine}Di2015NewLine
555501Di2015UniqueSeparatordouble
555783Di2015UniqueSeparatorIDictionary<int, IList<MyClass>> dict;Di2015NewLinevar flattenList = dict.SelectMany( x => x.Value );Di2015NewLine
555838Di2015UniqueSeparatorret
555838Di2015UniqueSeparatorfinally
555878Di2015UniqueSeparator// Unscaled coordinates = x, y; canvas size = w, h;Di2015NewLine// Scaled coordinates = sx, sy; Scalewidth, Scaleheight = sw, sh;Di2015NewLinex = (sx / sw) * w;Di2015NewLiney = (sy / sh) * h;Di2015NewLineDi2015NewLine// Or the other way roundDi2015NewLinesx = (x / w) * sw;Di2015NewLinesy = (y / h) * sh;Di2015NewLine
555955Di2015UniqueSeparatorList<string> internedStrings = new List<string>();Di2015NewLineList<string> nonInternedStrings = new List<string>();Di2015NewLinefor (int i=0; i < 1000; i++)Di2015NewLine{Di2015NewLine    string tmp = new string(' ', i+1);Di2015NewLine    nonInternedStrings.Add(tmp);Di2015NewLine    tmp = tmp.Intern();Di2015NewLine    internedStrings.Add(tmp);Di2015NewLine}Di2015NewLine
555955Di2015UniqueSeparatornonInternedStrings
555955Di2015UniqueSeparatorinternedStrings
555955Di2015UniqueSeparatorinternedStrings
555955Di2015UniqueSeparatorinternedStrings
555979Di2015UniqueSeparatorStringBuilder
555979Di2015UniqueSeparatorString.Format
555979Di2015UniqueSeparatorString.Intern
555979Di2015UniqueSeparatorAppDomain
555979Di2015UniqueSeparatorpublic class StringPoolDi2015NewLine{Di2015NewLine    private readonly Dictionary<string,string> contents =Di2015NewLine        new Dictionary<string,string>();Di2015NewLineDi2015NewLine    public string Add(string item)Di2015NewLine    {Di2015NewLine        string ret;Di2015NewLine        if (!contents.TryGetValue(item, out ret))Di2015NewLine        {Di2015NewLine            contents[item] = item;Di2015NewLine            ret = item;Di2015NewLine        }Di2015NewLine        return ret;Di2015NewLine    }Di2015NewLine}Di2015NewLine
555979Di2015UniqueSeparatorstring data = pool.Add(ReadItemFromDatabase());Di2015NewLine
555979Di2015UniqueSeparatorString.Intern
555979Di2015UniqueSeparatorString.Intern
555979Di2015UniqueSeparatorAppDomain
555979Di2015UniqueSeparatorvoid ProcessLogFile(string file)Di2015NewLine{Di2015NewLine    StringPool pool = new StringPool();Di2015NewLine    // Process the log file using strings in the poolDi2015NewLine} // The pool can now be garbage collectedDi2015NewLine
556005Di2015UniqueSeparatorCollectionAssert.AreEqual(ExpectedList, ActualList, "...");Di2015NewLine
556038Di2015UniqueSeparatorSqlConnection
556038Di2015UniqueSeparatorSystem.Data.OleDb.OleDbConnection
556142Di2015UniqueSeparator"C:\\\\Users\\\\Rich"
556142Di2015UniqueSeparator@"C:\\Users\\Rich"
556187Di2015UniqueSeparator="page.aspx?id=" & sum(Fields!field.value)Di2015NewLine
556213Di2015UniqueSeparator// Just using fields for simplicity and no attributes shown.Di2015NewLineinterface WCFDataContractDi2015NewLine{Di2015NewLine    // Header detailsDi2015NewLine    public int id;Di2015NewLine    public int version;Di2015NewLine    public DateTime writeDateTime;Di2015NewLineDi2015NewLine    public string xmlBlob;Di2015NewLineDi2015NewLine    // Footer detailsDi2015NewLine    public int anotherBitOfInformation;Di2015NewLine    public string andSoemMoreInfo;Di2015NewLine    public book andABooleanJustInCase;Di2015NewLineDi2015NewLine}Di2015NewLine
556247Di2015UniqueSeparatorToList
556247Di2015UniqueSeparatorBindingList<T>
556247Di2015UniqueSeparatorIList<T>
556247Di2015UniqueSeparatorIEnumerable<T>
556247Di2015UniqueSeparatorIList<T>
556247Di2015UniqueSeparatorpublic class MyListObject<T> : BindingList<T>Di2015NewLine{Di2015NewLine    public MyListObject() : base() { }Di2015NewLine    public MyListObject(IList<T> list) : base(list) { }Di2015NewLine}Di2015NewLineDi2015NewLine// ...Di2015NewLineDi2015NewLineMyListObject<int> yourList = new MyListObject<int> { 1, 2, 3, 4, 5 };Di2015NewLineyourList = new MyListObject<int>(yourList.Select(s => s * 2).ToList());Di2015NewLine// yourList now contains 2, 4, 6, 8, 10Di2015NewLine
556374Di2015UniqueSeparatoro
556374Di2015UniqueSeparatorIList
556374Di2015UniqueSeparatorList<T>
556374Di2015UniqueSeparatorCollection<T>
556374Di2015UniqueSeparatorMethodInfo.Invoke()
556442Di2015UniqueSeparatortrue
556442Di2015UniqueSeparatorfalse
556442Di2015UniqueSeparatortrue
556442Di2015UniqueSeparatorfalse
556442Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine    \List<int> list = new List<int> { 1, 2, 3 };Di2015NewLineDi2015NewLine    \Predicate<int> predicate = new Predicate<int>(greaterThanTwo);Di2015NewLineDi2015NewLine    \List<int> newList = list.FindAll(predicate);Di2015NewLine    }Di2015NewLineDi2015NewLine    static bool greaterThanTwo(int arg)Di2015NewLine    {Di2015NewLine    \return arg > 2;Di2015NewLine    }Di2015NewLine}Di2015NewLine
556442Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine    \List<int> list = new List<int> { 1, 2, 3 };Di2015NewLineDi2015NewLine    \List<int> newList = list.FindAll(i => i > 2);Di2015NewLine    }Di2015NewLine}Di2015NewLine
556454Di2015UniqueSeparatorSystem.IO.MemoryStream
556454Di2015UniqueSeparatorSystem.IO.MemoryStream ms = new System.IO.MemoryStream();Di2015NewLineSystem.IO.StreamWriter sw = new System.IO.StreamWriter(ms);Di2015NewLinesw.Write("hello");Di2015NewLine
556622Di2015UniqueSeparatorControl.Invoke
556622Di2015UniqueSeparatorAddItem
556622Di2015UniqueSeparatorRemoveItem
556690Di2015UniqueSeparatorp[((y)*stride)+((x)*4)]
556690Di2015UniqueSeparatorx
556690Di2015UniqueSeparatory
556690Di2015UniqueSeparatorbmpData.Stride - b.Width*4
556690Di2015UniqueSeparatorp += ...
556922Di2015UniqueSeparatorcboChannel.DataSource = feeds.Where(x => !String.IsNullOrEmpty(x.channel)).ToList();Di2015NewLine
557133Di2015UniqueSeparatorEncoding.GetString
557133Di2015UniqueSeparatorEncoding
557133Di2015UniqueSeparatorchar c = (char) buffer[m_index];Di2015NewLine
557186Di2015UniqueSeparatorList<T>.FindIndex
557355Di2015UniqueSeparatorType typeParameterType = typeof(T);Di2015NewLine
557514Di2015UniqueSeparatorSELECT CASE WHEN USER = 'MyAppRole' THEN 1 ELSE 0 ENDDi2015NewLine
557514Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        SqlConnection conn = new SqlConnection("Server=(local);Database=Test;UID=Scrap;PWD=password;");Di2015NewLineDi2015NewLine        setAppRole(conn);Di2015NewLine        conn.Close();Di2015NewLineDi2015NewLine        setAppRole(conn);Di2015NewLine        conn.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void setAppRole(SqlConnection conn) Di2015NewLine    {Di2015NewLine        for (int i = 0; i < 2; i++)Di2015NewLine        {Di2015NewLine            conn.Open();Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                using (IDbCommand cmd = conn.CreateCommand())Di2015NewLine                {Di2015NewLine                    cmd.CommandType = CommandType.Text;Di2015NewLine                    cmd.CommandText = "exec sp_setapprole ";Di2015NewLine                    cmd.CommandText += string.Format("@rolename='{0}'", "MyAppRole");Di2015NewLine                    cmd.CommandText += string.Format(",@password='{0}'", "password1");Di2015NewLine                    cmd.ExecuteNonQuery();Di2015NewLine                }Di2015NewLine            }Di2015NewLine            catch (SqlException ex)Di2015NewLine            {Di2015NewLine                if (i == 0 && ex.Number == 0)Di2015NewLine                {Di2015NewLine                    conn.Close();Di2015NewLine                    SqlConnection.ClearPool(conn);Di2015NewLine                    continue;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    throw;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
557590Di2015UniqueSeparatorPaint
557590Di2015UniqueSeparatorOnPaint
557590Di2015UniqueSeparatorOnPaint
557665Di2015UniqueSeparatorget { return GetProperty<int>("Foo"); }Di2015NewLineset { SetProperty("Foo", value); }Di2015NewLine
557665Di2015UniqueSeparatorComponentModel
557665Di2015UniqueSeparatorstatic readonly object FooKey = new object();Di2015NewLine...Di2015NewLineget { return GetProperty<int>(FooKey); }Di2015NewLineset { SetProperty(FooKey, value); }Di2015NewLine
557665Di2015UniqueSeparatorName
557665Di2015UniqueSeparatorstatic readonly PropertyKey FooKey = new PropertyKey("Foo");Di2015NewLine
557665Di2015UniqueSeparator[MethodImpl(MethodImplOptions.NoInlining)]Di2015NewLine
557665Di2015UniqueSeparator[MethodImpl(MethodImplOptions.NoOptimization)]Di2015NewLine
557665Di2015UniqueSeparator[MethodImpl(MethodImplAttributes.NoOptimizationDi2015NewLine    | MethodImplAttributes.NoInlining)]Di2015NewLine
557669Di2015UniqueSeparatorISearchable
557669Di2015UniqueSeparatorCanSearch
557669Di2015UniqueSeparatorSearch
557669Di2015UniqueSeparatorISupportEdit
557899Di2015UniqueSeparatorDi2015NewLineBitmap bmp = new Bitmap(panel.Bounds.Width, panel.Bounds.Height);Di2015NewLinepanel.DrawToBitmap(bmp, panel.ClientRectangle);Di2015NewLinebmp.Save("c:\\\\test.bmp");Di2015NewLinebmp.Dispose();Di2015NewLine
558120Di2015UniqueSeparatorCommon7\\IDE\\ItemTemplates\\CSharp\\Windows Forms\\1033\\Form.zip\\form.designer.cs
558144Di2015UniqueSeparatorint i;Di2015NewLinevar query = context.Table.ToList();Di2015NewLinevar intQuery = query.Where( t => int.TryParse( t.Column, out i ) );Di2015NewLine
558144Di2015UniqueSeparatorvar query = context.Table.Where( "IsNumeric(Column)" );Di2015NewLine
558245Di2015UniqueSeparator??=
558282Di2015UniqueSeparatorIsNaN
558282Di2015UniqueSeparatorif (!Double.IsNaN(Price_Foreign))Di2015NewLine{Di2015NewLine   output.Append(spacer);Di2015NewLine   output.Append(String.Format("{0,-10:C} USD",Price_Foreign));Di2015NewLine}Di2015NewLine
558444Di2015UniqueSeparatorif(idCollection.Count <4)Di2015NewLine{Di2015NewLine    throw new ArgumentException("Source array not long enough");Di2015NewLine}Di2015NewLineList<long> FourUniqueIds = new List<long>(4);Di2015NewLinewhile(FourUniqueIds.Count <4)Di2015NewLine{Di2015NewLine    long temp = idCollection[random.Next(idCollection.Count)];Di2015NewLine    if(!FourUniqueIds.Contains(temp))Di2015NewLine    {Di2015NewLine        FourUniqueIds.add(temp);Di2015NewLine    }Di2015NewLine}Di2015NewLine
558655Di2015UniqueSeparatorprivate void SaveButtonClick(...)Di2015NewLine{Di2015NewLine    if (this.ValidateChildren())Di2015NewLine    {Di2015NewLine        // do saveDi2015NewLine    }Di2015NewLine}Di2015NewLine
558907Di2015UniqueSeparatorMyProject.exe
558907Di2015UniqueSeparator$ mkbundle -o ProgramOutput Program.exe --depsDi2015NewLine
558907Di2015UniqueSeparatormkbundle
558929Di2015UniqueSeparatorPerson person = new Person { Name = "David", Age = "29" };Di2015NewLine
558929Di2015UniqueSeparatorPerson tempPerson = new Person()Di2015NewLinetempPerson.Name = "David";Di2015NewLinetempPerson.Age = "29";Di2015NewLinePerson person = tempPerson;Di2015NewLine
558929Di2015UniqueSeparatorpublic Person(string name, int age)Di2015NewLine{Di2015NewLine   Name = name;Di2015NewLine   Age = age;Di2015NewLineDi2015NewLine   // Now do something with AgeDi2015NewLine   int x = Age;Di2015NewLine   // ...Di2015NewLine}Di2015NewLine
558962Di2015UniqueSeparatornamespace YourNameSpaceDi2015NewLine{Di2015NewLine    public partial class someClassName: ResourceDictionaryDi2015NewLine    {Di2015NewLine        public someClassName()Di2015NewLine        {Di2015NewLine            InitializeComponent(); // you need this for the LoadComponent call on the Baml..Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
559245Di2015UniqueSeparatorBigInt
559245Di2015UniqueSeparatorIEnumerable<BigInt>
559245Di2015UniqueSeparatoryield return
559245Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        IEnumerable<int> source = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };Di2015NewLine        foreach (int value in EvenNumbers(source))Di2015NewLine        {Di2015NewLine            Console.WriteLine(value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IEnumerable<int> EvenNumbers(IEnumerable<int> numbers)Di2015NewLine    {Di2015NewLine        return new EvenEnumerable(numbers);Di2015NewLine    }Di2015NewLine    class EvenEnumerable : IEnumerable<int>Di2015NewLine    {Di2015NewLine        private readonly IEnumerable<int> numbers;Di2015NewLine        public EvenEnumerable(IEnumerable<int> numbers) {Di2015NewLine            this.numbers = numbers;Di2015NewLine        }Di2015NewLine        public IEnumerator<int> GetEnumerator()Di2015NewLine        {Di2015NewLine            return new EvenEnumerator(numbers);Di2015NewLine        }Di2015NewLine        IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); }Di2015NewLine    }Di2015NewLine    class EvenEnumerator : IEnumerator<int>Di2015NewLine    {Di2015NewLine        private readonly IEnumerable<int> numbers;Di2015NewLine        public EvenEnumerator(IEnumerable<int> numbers)Di2015NewLine        {Di2015NewLine            this.numbers = numbers;Di2015NewLine        }Di2015NewLine        private int current;Di2015NewLine        void IEnumerator.Reset() { throw new NotSupportedException(); }Di2015NewLine        public int Current { get { return current; } }Di2015NewLine        object IEnumerator.Current { get { return Current; } }Di2015NewLine        IEnumerator<int> iter;Di2015NewLine        public bool MoveNext()Di2015NewLine        {Di2015NewLine            if (iter == null) iter = numbers.GetEnumerator();Di2015NewLine            while (iter.MoveNext())Di2015NewLine            {Di2015NewLine                int tmp = iter.Current;Di2015NewLine                if (tmp % 2 == 0)Di2015NewLine                {Di2015NewLine                    current = tmp;Di2015NewLine                    return true;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        public void Dispose()Di2015NewLine        {Di2015NewLine            if (iter != null)Di2015NewLine            {Di2015NewLine                iter.Dispose();Di2015NewLine                iter = null;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
559423Di2015UniqueSeparator/// <summary>Di2015NewLine/// This class does something.Di2015NewLine/// </summary>Di2015NewLineclass Bob {Di2015NewLine    ...Di2015NewLine}Di2015NewLine
559461Di2015UniqueSeparatorstring delimeter = ",";Di2015NewLineList<string> items = new List<string>() { "foo", "boo", "john", "doe" };Di2015NewLineConsole.WriteLine(items.Aggregate((i, j) => i + delimeter + j));Di2015NewLine
559461Di2015UniqueSeparatorpublic class FooDi2015NewLine{Di2015NewLine    public string Boo { get; set; }Di2015NewLine}Di2015NewLine
559461Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string delimeter = ",";Di2015NewLine        List<Foo> items = new List<Foo>() { new Foo { Boo = "ABC" }, new Foo { Boo = "DEF" }, Di2015NewLine            new Foo { Boo = "GHI" }, new Foo { Boo = "JKL" } };Di2015NewLineDi2015NewLine        Console.WriteLine(items.Aggregate((i, j) => new Foo{Boo = (i.Boo + delimeter + j.Boo)}).Boo);Di2015NewLine        Console.ReadKey();Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
559461Di2015UniqueSeparatoritems.Select(i => i.Boo).Aggregate((i, j) => i + delimeter + j)Di2015NewLine
559667Di2015UniqueSeparatorWebsiteContext
559667Di2015UniqueSeparatorAdminContext
559667Di2015UniqueSeparatorWebsiteContext
559667Di2015UniqueSeparatorProduct
559667Di2015UniqueSeparatorOrder
559667Di2015UniqueSeparatorWebsiteUser
559667Di2015UniqueSeparatorOrder
559667Di2015UniqueSeparatorAdminContext
559667Di2015UniqueSeparatorStaff
559667Di2015UniqueSeparatorOrders
559667Di2015UniqueSeparatorWebsiteUser
559667Di2015UniqueSeparatorAdminContext
559667Di2015UniqueSeparatorWebsiteUser
559667Di2015UniqueSeparatorReturns
559667Di2015UniqueSeparatorWebsiteContextDi2015NewLineProduct -- Order -- WebsiteUserDi2015NewLineDi2015NewLineAdminContextDi2015NewLineStaff -- Returns -- Order -- WebsiteUserDi2015NewLine
559667Di2015UniqueSeparatorTransaction Script
560070Di2015UniqueSeparatormany-to-one
560070Di2015UniqueSeparatorcomponent
560070Di2015UniqueSeparator<class name="Entity1" table="entities_table">Di2015NewLine    <id name="Id" column="id" unsaved-value="0">Di2015NewLine      <generator class="native" />Di2015NewLine    </id>Di2015NewLineDi2015NewLine    <component name="NameOfValueType1Property" class="ValueType1">Di2015NewLine        <many-to-one name="NameOfEntity2Property" class="Entity2" />Di2015NewLine    </component>Di2015NewLine</class>Di2015NewLine
560109Di2015UniqueSeparatorpublic class fooDi2015NewLine{Di2015NewLineDi2015NewLine    public String StatusDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DisplayMyStatus()Di2015NewLine    {Di2015NewLine        Console.WriteLine(Status);Di2015NewLine    }Di2015NewLine}Di2015NewLine
560131Di2015UniqueSeparatorbyte ConvertToByte(BitArray bits)Di2015NewLine{Di2015NewLine    if (bits.Count != 8)Di2015NewLine    {Di2015NewLine        throw new ArgumentException("bits");Di2015NewLine    }Di2015NewLine    byte[] bytes = new byte[1];Di2015NewLine    bits.CopyTo(bytes, 0);Di2015NewLine    return bytes[0];Di2015NewLine}Di2015NewLine
560161Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine\var query = from m in Movies select m;Di2015NewLineDi2015NewLine\var sorter = new Sorter<Movie>();Di2015NewLine\sorter.AddSort("NAME", m => m.Name);Di2015NewLine}Di2015NewLineDi2015NewLineclass Sorter<T>Di2015NewLine{Di2015NewLine\public void AddSort(string name, Expression<Func<T, object>> func)Di2015NewLine\{Di2015NewLine\\string fieldName = (func.Body as MemberExpression).Member.Name;Di2015NewLine\}Di2015NewLine}Di2015NewLine
560161Di2015UniqueSeparator// assuming a dictionary of fields to sort for, called m_fieldsDi2015NewLinem_fields[fieldName](currentItem)Di2015NewLine
560201Di2015UniqueSeparatorList<T>
560201Di2015UniqueSeparatorList<T>
560224Di2015UniqueSeparatorExpression.Invoke
560224Di2015UniqueSeparatorInvoke
560224Di2015UniqueSeparatorvar param = Expression.Parameter(typeof(TEntity), "item");Di2015NewLinevar item = Expression.Invoke(selectItem, param);Di2015NewLinevar key = Expression.Invoke(selectKey, item);Di2015NewLinevar lambda = Expression.Lambda<Func<TEntity, TKey>>(key, param);Di2015NewLinereturn source.OrderBy(lambda);Di2015NewLine
560224Di2015UniqueSeparatorusing(var ctx = new MyDataContext()) {Di2015NewLine    ctx.Log = Console.Out;Di2015NewLine    var rows = ctx.Orders.OrderBy(order => order.Customer,Di2015NewLine        customer => customer.CompanyName).Take(20).ToArray();Di2015NewLine}Di2015NewLine
560224Di2015UniqueSeparatorSELECT TOP (20) [t0].[OrderID], -- snipDi2015NewLineFROM [dbo].[Orders] AS [t0]Di2015NewLineLEFT OUTER JOIN [dbo].[Customers] AS [t1]Di2015NewLine  ON [t1].[CustomerID] = [t0].[CustomerID]Di2015NewLineORDER BY [t1].[CompanyName]Di2015NewLine
560293Di2015UniqueSeparatorIntPtr
560293Di2015UniqueSeparatorString.Empty
560293Di2015UniqueSeparatorIntPtr.Zero
560293Di2015UniqueSeparatorIntPtr.Zero
560293Di2015UniqueSeparatorIntPtr myPtr = new IntPtr(0);Di2015NewLineIntPtr myPtr2 = IntPtr.Zero;Di2015NewLineDi2015NewLine//using myPtr or myPtr2 makes no differenceDi2015NewLine//you can pass myPtr2 by ref, it's now a copyDi2015NewLine
560293Di2015UniqueSeparatorif( myPtr != new IntPtr(0) ) {Di2015NewLine    //new pointer initialised to checkDi2015NewLine}Di2015NewLineDi2015NewLineif( myPtr != IntPtr.Zero ) {Di2015NewLine    //no new pointer neededDi2015NewLine}Di2015NewLine
560341Di2015UniqueSeparatorpublic void NewThread(Action task)Di2015NewLine{Di2015NewLine   ThreadStart starter = delegate { task(); };Di2015NewLine   startThread = new Thread(starter);Di2015NewLine   startThread.Name = task.Method.Name;Di2015NewLine   startSpoolerThread.Start();Di2015NewLine}Di2015NewLineDi2015NewLinepublic void foo()Di2015NewLine{Di2015NewLine   //do some workDi2015NewLine}Di2015NewLineDi2015NewLineNewThread(obj.foo);Di2015NewLine
560341Di2015UniqueSeparatorNewThread(TasktType.Foo);Di2015NewLine
560341Di2015UniqueSeparatorpublic void NewThread(string name)Di2015NewLine{Di2015NewLine    MethodInfo method = GetType().GetMethod(name,Di2015NewLine        BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic,Di2015NewLine        null, Type.EmptyTypes, null);Di2015NewLine    ThreadStart starter = delegate { method.Invoke(this, null); };Di2015NewLine    // etc (note: no point using Delegate.CreateDelegate for a 1-call usageDi2015NewLine
560593Di2015UniqueSeparatorLazy<T>
560593Di2015UniqueSeparatorLazy<T>
560671Di2015UniqueSeparator    IList<TreeNode> nodesWithChildren = new List<TreeNode>();Di2015NewLine    foreach( TreeNode node in myTreeview.Nodes )Di2015NewLine        if( node.Nodes.Count > 0 ) nodesWithChildren.Add( node );Di2015NewLine
560671Di2015UniqueSeparatorprivate static IList<TreeNode> BuildParentNodeList(TreeView treeView)Di2015NewLine{Di2015NewLine    IList<TreeNode> nodesWithChildren = new List<TreeNode>();Di2015NewLineDi2015NewLine    foreach( TreeNode node in treeView.Nodes  )Di2015NewLine        AddParentNodes(nodesWithChildren, node);Di2015NewLineDi2015NewLine    return nodesWithChildren;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void AddParentNodes(IList<TreeNode> nodesWithChildren, TreeNode parentNode)Di2015NewLine{Di2015NewLine    if (parentNode.Nodes.Count > 0)Di2015NewLine    {Di2015NewLine        nodesWithChildren.Add( parentNode );Di2015NewLine        foreach( TreeNode node in parentNode.Nodes )Di2015NewLine            AddParentNodes( nodesWithChildren, node );Di2015NewLine    }Di2015NewLine}Di2015NewLine
560671Di2015UniqueSeparatorprivate static IList<TreeNode> BuildParentNodeList(TreeView treeView)Di2015NewLine{Di2015NewLine    IList<TreeNode> nodesWithChildren = new List<TreeNode>();Di2015NewLine    AddParentNodes( nodesWithChildren, treeView.Nodes );Di2015NewLine    return nodesWithChildren;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void AddParentNodes(IList<TreeNode> nodesWithChildren, TreeNodeCollection parentNodes )Di2015NewLine{Di2015NewLine    foreach (TreeNode node in parentNodes)Di2015NewLine    {Di2015NewLine        if (node.Nodes.Count > 0)Di2015NewLine        {Di2015NewLine            nodesWithChildren.Add( node );Di2015NewLine            AddParentNodes(nodesWithChildren, node.Nodes);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
560841Di2015UniqueSeparatorIXmlSerializable
560841Di2015UniqueSeparatorxsd.exe <assembly>.dll|.exe [/outputdir:] [/type: [...]]Di2015NewLine
560945Di2015UniqueSeparatorXmlDocument doc = new XmlDocument();Di2015NewLineXmlWriter xw = doc.CreateNavigator().AppendChild();Di2015NewLine
561119Di2015UniqueSeparatorusing (var file = new FileStream(Di2015NewLine   @"C:\\path\\to\\file.txt", Di2015NewLine   FileMode.Open, Di2015NewLine   FileAcces.Read, Di2015NewLine   FileShare.Read) {Di2015NewLine  // ...Di2015NewLine}Di2015NewLine
561179Di2015UniqueSeparatorConvertAll
561179Di2015UniqueSeparator    int[] ints = new int[] { 1,2 };Di2015NewLineDi2015NewLine    int[] newArr = Array.ConvertAll<int,int>(ints, AddTen);Di2015NewLine
561179Di2015UniqueSeparatorstatic int AddTen(int i)Di2015NewLine{Di2015NewLine    return i+10;Di2015NewLine}Di2015NewLine
561179Di2015UniqueSeparatorint[] newArr = Array.ConvertAll<int,int>(ints,Di2015NewLine    delegate (int i) { return i+ 10;});Di2015NewLine
561179Di2015UniqueSeparatorint[] newArr = Array.ConvertAll(ints, i=>i+10);Di2015NewLine
561179Di2015UniqueSeparatorfor
561179Di2015UniqueSeparatorfor(int i = 0 ; i < arr.Length ; i++) {Di2015NewLine    arr[i] = AddTen(arr[i]); // or more directly...Di2015NewLine}Di2015NewLine
561236Di2015UniqueSeparatortable
561242Di2015UniqueSeparatorServicePointManager.ServerCertificateValidationCallback = new System.Net.Security.RemoteCertificateValidationCallback(AcceptAllCertifications);Di2015NewLine
561242Di2015UniqueSeparatorpublic bool AcceptAllCertifications(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certification, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)Di2015NewLine{Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
561268Di2015UniqueSeparatorint i = 0;Di2015NewLinelong sum = 0;Di2015NewLinewhile (sum < int.MaxValue)Di2015NewLine{Di2015NewLine    var s = sizeof(char) * ("{" + i + "}").Length;Di2015NewLine    sum += s; // pseudo appendDi2015NewLine    ++i;Di2015NewLine}Di2015NewLineConsole.WriteLine(i);Di2015NewLineConsole.ReadLine();Di2015NewLine
561272Di2015UniqueSeparatorpublic interface IArranger<T>Di2015NewLine{Di2015NewLine    IEnumerable<T> Arrange(IEnumerable<T> items);Di2015NewLine}Di2015NewLine
561272Di2015UniqueSeparatorShuffle
561272Di2015UniqueSeparatorIEnumerable.Sort()/IComparable/IComparer
561272Di2015UniqueSeparatorpublic class ComparerArranger<T> : IArranger<T>Di2015NewLine{Di2015NewLine    private IComparer<T> comparer;Di2015NewLineDi2015NewLine    public ComparableArranger(IComparer<T> comparer)Di2015NewLine    {Di2015NewLine        this.comparer = comparer;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerable<T> Arrange(IEnumerable<T> items)Di2015NewLine    {Di2015NewLine       return items.OrderBy(i => i, comparer);Di2015NewLine    }Di2015NewLine}Di2015NewLine
561272Di2015UniqueSeparator//uses the default Comparer for the type (Comparer<T>.Default)Di2015NewLinepublic class TypeArranger<T> : IArranger<T> Di2015NewLine{Di2015NewLine    public IEnumerable<T> Arrange(IEnumerable<T> items)Di2015NewLine    {Di2015NewLine       return items.OrderBy(i => i);Di2015NewLine    }Di2015NewLine}Di2015NewLine
561272Di2015UniqueSeparatorpublic class ShuffleArranger<T> : IArranger<T>Di2015NewLine{Di2015NewLine    //naive implementation for demonstrationDi2015NewLine    // if I ever develop this more completely I would try toDi2015NewLine    // avoid needing to call .ToArray() in hereDi2015NewLine    // and use a better prngDi2015NewLine    private Random r = new Random();Di2015NewLineDi2015NewLine    public IEnumerable<T> Arrange(IEnumerable<T> items)Di2015NewLine    {Di2015NewLine        var values = items.ToArray();Di2015NewLineDi2015NewLine        //valid Fisher-Yates shuffle on the values arrayDi2015NewLine        for (int i = values.Length; i > 1; i--)Di2015NewLine        {Di2015NewLine            int j = r.Next(i);Di2015NewLine            T tmp = values[j];Di2015NewLine            values[j] = values[i - 1];Di2015NewLine            values[i - 1] = tmp;Di2015NewLine        }Di2015NewLine        foreach (var item in values) yield return item;Di2015NewLine    }Di2015NewLine}Di2015NewLine
561272Di2015UniqueSeparatorpublic static IEnumerable<T> Arrange(this IEnumerable<T> items, IArranger<T> arranger)Di2015NewLine{Di2015NewLine    return arranger.Arrange(items);Di2015NewLine}Di2015NewLine
561418Di2015UniqueSeparatorDictionary<ClassStructure.Tasks_CallIDs_Strings, Task_Flag>Di2015NewLine
561427Di2015UniqueSeparator<Window x:Class="WpfApplication6.Window1"Di2015NewLinexmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLinexmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLineTitle="Window1" Height="300" Width="300">Di2015NewLine<Grid>Di2015NewLineDi2015NewLine    <StackPanel>Di2015NewLine        <Button Click="Button_Click">asdf</Button>Di2015NewLine        <ComboBox ItemsSource="{Binding Path=PhonebookEntries}"Di2015NewLine                  DisplayMemberPath="Name"Di2015NewLine                  SelectedValuePath="Name"Di2015NewLine                  SelectedValue="{Binding Path=PhonebookEntry}" />Di2015NewLine    </StackPanel>Di2015NewLine</Grid>Di2015NewLine</Window>Di2015NewLine
561427Di2015UniqueSeparatornamespace WpfApplication6Di2015NewLine{Di2015NewLine/// <summary>Di2015NewLine/// Interaction logic for Window1.xamlDi2015NewLine/// </summary>Di2015NewLinepublic partial class Window1 : WindowDi2015NewLine{Di2015NewLine    public Window1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        ConnectionViewModel vm = new ConnectionViewModel();Di2015NewLine        DataContext = vm;Di2015NewLine    }Di2015NewLine    private void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        ((ConnectionViewModel)DataContext).PhonebookEntry = "test";Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class PhoneBookEntryDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public PhoneBookEntry(string name)Di2015NewLine    {Di2015NewLine        Name = name;Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class ConnectionViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public ConnectionViewModel()Di2015NewLine    {Di2015NewLine        IList<PhoneBookEntry> list = new List<PhoneBookEntry>();Di2015NewLine        list.Add(new PhoneBookEntry("test"));Di2015NewLine        list.Add(new PhoneBookEntry("test2"));Di2015NewLine        _phonebookEntries = new CollectionView(list);Di2015NewLine    }Di2015NewLine    private readonly CollectionView _phonebookEntries;Di2015NewLine    private string _phonebookEntry;Di2015NewLineDi2015NewLine    public CollectionView PhonebookEntriesDi2015NewLine    {Di2015NewLine        get { return _phonebookEntries; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string PhonebookEntryDi2015NewLine    {Di2015NewLine        get { return _phonebookEntry; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (_phonebookEntry == value) return;Di2015NewLine            _phonebookEntry = value;Di2015NewLine            OnPropertyChanged("PhonebookEntry");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine}Di2015NewLine}Di2015NewLine
561552Di2015UniqueSeparatorRequest.Browser.Platform
561552Di2015UniqueSeparatorRequest.UserAgent
561558Di2015UniqueSeparatorBackgroundWorker
561558Di2015UniqueSeparatorBeginInvoke
561558Di2015UniqueSeparatorThreadPool
561558Di2015UniqueSeparatorDoWork
561667Di2015UniqueSeparator@Assembly
561667Di2015UniqueSeparator@Assembly
561667Di2015UniqueSeparatorusing
561726Di2015UniqueSeparatorforeach (Area childArea in currentArea.Area1) {Di2015NewLine    // do somethingDi2015NewLine}Di2015NewLine
561726Di2015UniqueSeparatorArea parentArea = currentArea.Area2;Di2015NewLine
561882Di2015UniqueSeparatorResponse.Clear();Di2015NewLine
561882Di2015UniqueSeparatorResponse.ClearContent();Di2015NewLineResponse.ClearHeaders();Di2015NewLine
561882Di2015UniqueSeparatorbyte[] downloadBytes = doc.GetData();Di2015NewLineResponse.ClearContent();Di2015NewLineResponse.ClearHeaders();Di2015NewLineDi2015NewLineResponse.Buffer = true;Di2015NewLineResponse.ContentType = "application/pdf";Di2015NewLineResponse.AddHeader("Content-Length", downloadBytes.Length.ToString());Di2015NewLineResponse.AddHeader("Content-Disposition", "attachment; filename=myFile.pdf");Di2015NewLineResponse.BinaryWrite(downloadBytes);Di2015NewLineResponse.Flush();Di2015NewLineResponse.End();Di2015NewLine
562105Di2015UniqueSeparatorpublic class BinarySearcher<T>Di2015NewLine{Di2015NewLine    // Possibly passed to the call to BinarySort.Di2015NewLine    private class ComparisonComparer : Comparer<T>Di2015NewLine    {Di2015NewLine        Comparison<T> comparison;Di2015NewLineDi2015NewLine        internal static IComparer<T> Create(Comparison<T> comparison)Di2015NewLine        {Di2015NewLine            // If comparison is null, return the default comparer for T.Di2015NewLine            if (comparison == null)Di2015NewLine            {Di2015NewLine                // Return the default.Di2015NewLine                return Comparer<T>.Default;Di2015NewLine            }Di2015NewLineDi2015NewLine            // Return a new implementation.Di2015NewLine            return new ComparisonComparer(comparison);Di2015NewLine        }Di2015NewLineDi2015NewLine        private ComparisonComparer(Comparison<T> comparison)Di2015NewLine        {Di2015NewLine            this.comparison = comparison;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override int Compare(T x, T y)Di2015NewLine        {Di2015NewLine            return comparison(x, y);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // The elements.Di2015NewLine    T[] elements;Di2015NewLineDi2015NewLine    // The IComparable implementation.Di2015NewLine    IComparer<T> comparer;Di2015NewLineDi2015NewLine    // Do not assume sorting.Di2015NewLine    public BinarySearcher(IEnumerable<T> elements) : Di2015NewLine        this(elements, false, (IComparer<T>) null) { }Di2015NewLineDi2015NewLine    // Use default comparer.Di2015NewLine    public BinarySearcher(IEnumerable<T> elements, bool sorted) :Di2015NewLine        this(elements, sorted, (IComparer<T>) null) { }Di2015NewLineDi2015NewLine    // Assume no sorting.Di2015NewLine    public BinarySearcher(IEnumerable<T> elements, Di2015NewLine        Comparison<T> comparer) :Di2015NewLine            this(elements, false, Di2015NewLine                ComparisonComparer.Create(comparer)) { }Di2015NewLineDi2015NewLine    // Convert to IComparable<T>.Di2015NewLine    public BinarySearcher(IEnumerable<T> elements, bool sorted, Di2015NewLine        Comparison<T> comparer) :Di2015NewLine            this(elements, sorted, Di2015NewLine                ComparisonComparer.Create(comparer)) { }Di2015NewLineDi2015NewLine    // No sorting.Di2015NewLine    public BinarySearcher(IEnumerable<T> elements, Di2015NewLine        IComparer<T> comparer) :Di2015NewLine            this(elements, false, comparer) { }Di2015NewLineDi2015NewLine    // Convert to array.Di2015NewLine    public BinarySearcher(IEnumerable<T> elements, bool sorted, Di2015NewLine        IComparer<T> comparer) :Di2015NewLine            this(elements.ToArray(), sorted, comparer) { }Di2015NewLineDi2015NewLine    // Assume no sorting.Di2015NewLine    public BinarySearcher(T[] elements) : this(elements, false) { }Di2015NewLineDi2015NewLine    // Pass null for default comparer.Di2015NewLine    public BinarySearcher(T[] elements, bool sorted) : Di2015NewLine        this(elements, sorted, (IComparer<T>) null) { }Di2015NewLineDi2015NewLine    // Assume not sorted.Di2015NewLine    public BinarySearcher(T[] elements, Comparison<T> comparer) :Di2015NewLine        this(elements, false, ComparisonComparer.Create(comparer)) { }Di2015NewLineDi2015NewLine    // Create IComparable<T> from Comparable<T>.Di2015NewLine    public BinarySearcher(T[] elements, bool sorted, Di2015NewLine        Comparison<T> comparer) :Di2015NewLine            this(elements, sorted, ComparisonComparer.Create(comparer)) { }Di2015NewLineDi2015NewLine    // Assume the elements are not sorted.Di2015NewLine    public BinarySearcher(T[] elements, IComparer<T> comparer) : Di2015NewLine        this(elements, false, comparer) { }Di2015NewLineDi2015NewLine    public BinarySearcher(T[] elements, bool sorted, Di2015NewLine        IComparer<T> comparer)Di2015NewLine    {Di2015NewLine        // If the comparer is null, create the default one.Di2015NewLine        if (comparer == null)Di2015NewLine        {Di2015NewLine            // Set to the default one.Di2015NewLine            comparer = Comparer<T>.Default;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Set the comparer.Di2015NewLine        this.comparer = comparer;Di2015NewLineDi2015NewLine        // Set the elements.  If they are sorted already, don't bother, Di2015NewLine        // otherwise, sort.Di2015NewLine        if (!sorted)Di2015NewLine        {Di2015NewLine            // Sort.Di2015NewLine            Array.Sort(elements, this.comparer);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Set the elements.Di2015NewLine        this.elements = elements;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerable<T> Between(T from, T to)Di2015NewLine    {Di2015NewLine        // Find the index for the beginning.Di2015NewLine        int index = Array.BinarySearch(this.elements, from, comparer);Di2015NewLineDi2015NewLine        // Was the item found?Di2015NewLine        bool found = (index >= 0);Di2015NewLineDi2015NewLine        // If the item was not found, take the bitwise Di2015NewLine        // compliment to find out where it would be.Di2015NewLine        if (!found)Di2015NewLine        {Di2015NewLine            // Take the bitwise compliment.Di2015NewLine            index = ~index;Di2015NewLine        }Di2015NewLineDi2015NewLine        // If the item was found, cycle backwards fromDi2015NewLine        // the index while there are elements that are the same.Di2015NewLine        if (found)Di2015NewLine        {Di2015NewLine            // Cycle backwards.Di2015NewLine            for (; index >= 0 && Di2015NewLine                comparer.Compare(from, elements[index]) == 0; Di2015NewLine                --index) ;Di2015NewLineDi2015NewLine            // Add one to the index, since this is on the element Di2015NewLine            // that didn't match the comparison.Di2015NewLine            index++;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Go forward now.Di2015NewLine        for ( ; index < elements.Length; index++)Di2015NewLine        {Di2015NewLine            // Return while the comparison is true.Di2015NewLine            if (comparer.Compare(elements[index], to) <= 0)Di2015NewLine            {Di2015NewLine                // Return the element.Di2015NewLine                yield return elements[index];Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // BreakDi2015NewLine                yield break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
562105Di2015UniqueSeparatorIComparer<T>
562105Di2015UniqueSeparatorComparable<T>
562105Di2015UniqueSeparatorpublic class TaskDi2015NewLine{Di2015NewLine    public string Name;Di2015NewLine    public DateTime StartTime;Di2015NewLine}Di2015NewLine
562105Di2015UniqueSeparator// Create tasks.Di2015NewLineTask[] tasks = Di2015NewLine{ Di2015NewLine    new Task() { Name = "Task 1", StartTime = new DateTime(2009, 02, 18) },Di2015NewLine    new Task() { Name = "Task 2", StartTime = new DateTime(2009, 02, 16) },Di2015NewLine    new Task() { Name = "Task 3", StartTime = new DateTime(2009, 02, 12) },Di2015NewLine    new Task() { Name = "Task 4", StartTime = new DateTime(2009, 02, 11) },Di2015NewLine    new Task() { Name = "Task 5", StartTime = new DateTime(2009, 02, 10) },Di2015NewLine    new Task() { Name = "Task 6", StartTime = new DateTime(2009, 02, 01) },Di2015NewLine    new Task() { Name = "Task 7", StartTime = new DateTime(2009, 02, 09) }Di2015NewLine};Di2015NewLineDi2015NewLine// Now create the indexer.Di2015NewLineBinarySearcher<Task> searcher = new BinarySearcher<Task>(tasks,Di2015NewLine    (x, y) => Comparer<DateTime>.Default.Compare(x.StartTime, y.StartTime));Di2015NewLineDi2015NewLineforeach (Task t in searcher.Between(Di2015NewLine    new Task() { StartTime = new DateTime(2009, 02, 13) },Di2015NewLine    new Task() { StartTime = new DateTime(2009, 02, 10) }))Di2015NewLine{Di2015NewLine    // Write.Di2015NewLine    Console.WriteLine(t);Di2015NewLine}Di2015NewLine
562107Di2015UniqueSeparatorServer.UrlEncode
562110Di2015UniqueSeparatorPb1.DrawToBitmap
562235Di2015UniqueSeparatorprivate struct PageNameOnSiteDi2015NewLine{Di2015NewLine    public int siteId;Di2015NewLine    public string pageName;Di2015NewLine    public override bool Equals(object obj) {Di2015NewLine      if ( !obj is PageNameOnSite) { return false; }Di2015NewLine      var other = (PageNameOnSite)obj;Di2015NewLine      return sideId == other.siteId && StringComparer.Oridinal.Equals(pageName, other.pageName);Di2015NewLine   }Di2015NewLine   public override int GetHashCode() { return sideId + pageName.GetHashCode(); }Di2015NewLine}Di2015NewLine
562235Di2015UniqueSeparatorpublic static object Loopup(Dictionary<PageNameOnSite,object> map, int id, string name) {Di2015NewLine  var key = new PageNameOnSite() { siteId = id, pageName = name};Di2015NewLine  return map[key];Di2015NewLine}Di2015NewLine
562266Di2015UniqueSeparatorclass XmlManager {Di2015NewLine  private object m_lock = new object();Di2015NewLine  private HashSet<string> m_inPool = new HashSet<string>();Di2015NewLineDi2015NewLine  private void Run(object state) {Di2015NewLine    string name = (string)state;Di2015NewLine    try { Di2015NewLine      FunctionThatActuallyProcessesFiles(name);Di2015NewLine    } finally { Di2015NewLine      lock ( m_lock ) { m_inPool.Remove(name); }Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  public void MaybeRun(string xmlName) { Di2015NewLine    lock ( m_lock ) { Di2015NewLine      if (!m_pool.Add(xmlName)) {Di2015NewLine        return;Di2015NewLine      }Di2015NewLine    }Di2015NewLine    ThreadPool.QueueUserWorkItem(Run, xmlName);Di2015NewLine  }Di2015NewLine}Di2015NewLine
562354Di2015UniqueSeparatorpublic class Foo1Di2015NewLine{Di2015NewLine    public struct BarDi2015NewLine    {Di2015NewLine        string A;Di2015NewLine        string B;Di2015NewLine    }Di2015NewLineDi2015NewLine    private Bar[] data;Di2015NewLineDi2015NewLine    // Using a methodDi2015NewLine    public Bar[] ExportData()Di2015NewLine    {Di2015NewLine        return data;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Using propertiesDi2015NewLine    public Bar[] DataPropertyDi2015NewLine    {Di2015NewLine        get { return data; }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Foo2Di2015NewLine{Di2015NewLine    private Foo1.Bar[] data;Di2015NewLineDi2015NewLine    // Using a methodDi2015NewLine    public void ImportData(Foo1 source)Di2015NewLine    {Di2015NewLine        this.data = source.ExportData();Di2015NewLine    }Di2015NewLineDi2015NewLine    // Using propertiesDi2015NewLine    public Foo1.Bar[] DataPropertyDi2015NewLine    {Di2015NewLine        get { return data; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ReadProperty(Foo1 source)Di2015NewLine    {Di2015NewLine        this.DataProperty = source.DataProperty;Di2015NewLine    }Di2015NewLine}Di2015NewLine
562379Di2015UniqueSeparatorapp.manifest
562379Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<asmv1:assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1" xmlns:asmv1="urn:schemas-microsoft-com:asm.v1" xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Di2015NewLine   <assemblyIdentity version="1.0.0.0" name="MyApplication.app" />Di2015NewLine   <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">Di2015NewLine      <security>Di2015NewLine         <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">Di2015NewLine            <requestedExecutionLevel level="requireAdministrator" uiAccess="false" />Di2015NewLine         </requestedPrivileges>Di2015NewLine      </security>Di2015NewLine   </trustInfo>Di2015NewLine</asmv1:assembly>Di2015NewLine
562461Di2015UniqueSeparatorOnInitialized
562461Di2015UniqueSeparatorLoaded
562470Di2015UniqueSeparatorvar qry = from i in _DB.BaseTable.OfType<InheritedTable>()Di2015NewLine          select i.InheritedTableField;Di2015NewLine
562557Di2015UniqueSeparatorRate.Address
562557Di2015UniqueSeparatorShip.Address
562557Di2015UniqueSeparatornamespace Rate {Di2015NewLine    class Address {Di2015NewLine        string Street;Di2015NewLine        string City;Di2015NewLine        // ...Di2015NewLineDi2015NewLine        public static implicit operator Ship.Address(Rate.Address addr) {Di2015NewLine            Ship.Address ret;Di2015NewLine            ret.Street = addr.Street;Di2015NewLine            ret.City = addr.City;Di2015NewLine            // ...Di2015NewLineDi2015NewLine            return ret;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
562587Di2015UniqueSeparator<System.Runtime.InteropServices.ComVisible(True)>Di2015NewLinePublic Class MyManagedFunctionsDi2015NewLine    Public Function GetNumber() As IntegerDi2015NewLine        Return 42Di2015NewLine    End Function Di2015NewLineEnd ClassDi2015NewLine
562587Di2015UniqueSeparatorPrivate Sub ThisWorkbook_Open() Handles Me.OpenDi2015NewLine    Me.Application.Run("RegisterCallback", New MyManagedFunctions)Di2015NewLineEnd SubDi2015NewLine
562587Di2015UniqueSeparatorDim managedObject As ObjectDi2015NewLineDi2015NewLineDi2015NewLinePublic Sub RegisterCallback(callback As Object)Di2015NewLine    Set managedObject = callbackDi2015NewLineEnd SubDi2015NewLineDi2015NewLineDi2015NewLinePublic Function GetNumberFromVSTO() As IntegerDi2015NewLine    GetNumberFromVSTO = managedObject.GetNumber()Di2015NewLineEnd FunctionDi2015NewLine
562587Di2015UniqueSeparator=GetNumberFromVSTO()
562706Di2015UniqueSeparatorpublic class Lead { Di2015NewLine    public override bool PersistChanges() {Di2015NewLine        // Context is of type "ObjectContext"Di2015NewLine        DatabaseHelper.Context.SafelyPersistChanges(this);Di2015NewLine    }Di2015NewLine}Di2015NewLine
562784Di2015UniqueSeparatorthis
562809Di2015UniqueSeparatorusing TypeA = int;Di2015NewLineusing TypeB = int;Di2015NewLine
562809Di2015UniqueSeparatorint
562809Di2015UniqueSeparatorint
562809Di2015UniqueSeparatorstruct TypeADi2015NewLine{Di2015NewLine   public TypeA(int value)Di2015NewLine   {Di2015NewLine      this.realValue = value;Di2015NewLine   }Di2015NewLineDi2015NewLine   private int realValue;Di2015NewLine   public static implicit operator int(TypeA value)Di2015NewLine   {Di2015NewLine     return this.realValue;Di2015NewLine   }Di2015NewLineDi2015NewLine   public static implicit operator TypeA(int value)Di2015NewLine   {Di2015NewLine     return new TypeA(value);Di2015NewLine   }Di2015NewLine}Di2015NewLine
562809Di2015UniqueSeparatorenum
562829Di2015UniqueSeparatorDoxyfile
562829Di2015UniqueSeparatorEXTRACT_PRIVATE        = YESDi2015NewLine
562829Di2015UniqueSeparatorDoxyfile
562829Di2015UniqueSeparator# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in Di2015NewLine# documentation are documented, even if no documentation was available. Di2015NewLine# Private class members and static file members will be hidden unless Di2015NewLine# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YESDi2015NewLineDi2015NewLineEXTRACT_ALL            = YESDi2015NewLineDi2015NewLine# If the EXTRACT_PRIVATE tag is set to YES all private members of a class Di2015NewLine# will be included in the documentation.Di2015NewLineDi2015NewLineEXTRACT_PRIVATE        = YESDi2015NewLineDi2015NewLine# If the EXTRACT_STATIC tag is set to YES all static members of a file Di2015NewLine# will be included in the documentation.Di2015NewLineDi2015NewLineEXTRACT_STATIC         = YESDi2015NewLineDi2015NewLine# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) Di2015NewLine# defined locally in source files will be included in the documentation.Di2015NewLine# If set to NO only classes defined in header files are included.Di2015NewLineDi2015NewLineEXTRACT_LOCAL_CLASSES  = YESDi2015NewLineDi2015NewLine# This flag is only useful for Objective-C code. When set to YES localDi2015NewLine# methods, which are defined in the implementation section but not inDi2015NewLine# the interface are included in the documentation.Di2015NewLine# If set to NO (the default) only methods in the interface are included.Di2015NewLineDi2015NewLineEXTRACT_LOCAL_METHODS  = YESDi2015NewLineDi2015NewLine# If this flag is set to YES, the members of anonymous namespaces will beDi2015NewLine# extracted and appear in the documentation as a namespace calledDi2015NewLine# 'anonymous_namespace{file}', where file will be replaced with the baseDi2015NewLine# name of the file that contains the anonymous namespace. By defaultDi2015NewLine# anonymous namespace are hidden.Di2015NewLineDi2015NewLineEXTRACT_ANON_NSPACES   = NODi2015NewLineDi2015NewLine# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide allDi2015NewLine# undocumented members of documented classes, files or namespaces.Di2015NewLine# If set to NO (the default) these members will be included in theDi2015NewLine# various overviews, but no documentation section is generated.Di2015NewLine# This option has no effect if EXTRACT_ALL is enabled.Di2015NewLineDi2015NewLineHIDE_UNDOC_MEMBERS     = NODi2015NewLineDi2015NewLine# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide allDi2015NewLine# undocumented classes that are normally visible in the class hierarchy.Di2015NewLine# If set to NO (the default) these classes will be included in the variousDi2015NewLine# overviews. This option has no effect if EXTRACT_ALL is enabled.Di2015NewLineDi2015NewLineHIDE_UNDOC_CLASSES     = NODi2015NewLineDi2015NewLine# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide allDi2015NewLine# friend (class|struct|union) declarations.Di2015NewLine# If set to NO (the default) these declarations will be included in theDi2015NewLine# documentation.Di2015NewLineDi2015NewLineHIDE_FRIEND_COMPOUNDS  = NODi2015NewLine
562840Di2015UniqueSeparator<!-- Make sure this namespace is declared so that it's in scope below -->Di2015NewLine.. xmlns:sys="clr-namespace:System;assembly=mscorlib" ..Di2015NewLineDi2015NewLine<ObjectDataProvider MethodName="GetType" Di2015NewLine    ObjectType="{x:Type sys:Type}" x:Key="colorsTypeOdp">Di2015NewLine    <ObjectDataProvider.MethodParameters>Di2015NewLine        <sys:String>System.Windows.Media.Colors, PresentationCore,Di2015NewLine            Version=3.0.0.0, Culture=neutral, Di2015NewLine            PublicKeyToken=31bf3856ad364e35</sys:String>Di2015NewLine    </ObjectDataProvider.MethodParameters>Di2015NewLine</ObjectDataProvider>Di2015NewLine<ObjectDataProvider ObjectInstance="{StaticResource colorsTypeOdp}"  Di2015NewLine    MethodName="GetProperties" x:Key="colorPropertiesOdp">Di2015NewLine</ObjectDataProvider>Di2015NewLine
562840Di2015UniqueSeparator<ObjectDataProvider Di2015NewLine    ObjectInstance="{x:Type Colors}" Di2015NewLine    MethodName="GetProperties" Di2015NewLine    x:Key="colorPropertiesOdp" />Di2015NewLine
562840Di2015UniqueSeparator<ComboBox Name="comboBox1" Di2015NewLine    ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}"Di2015NewLine    DisplayMemberPath="Name"Di2015NewLine    SelectedValuePath="Name" />Di2015NewLine
562881Di2015UniqueSeparatornewRow
563027Di2015UniqueSeparatorclass Foo<T> : IFooDi2015NewLine{Di2015NewLineDi2015NewLine    public Foo(string name)Di2015NewLine    {Di2015NewLine        Name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    string Name { get; set; }Di2015NewLine    T Value {get; set;}Di2015NewLine    Type FooType { get { return typeof(T); } }Di2015NewLine}Di2015NewLine
563027Di2015UniqueSeparatorstring Name { get; set; }Di2015NewLineType FooType { get; set; }Di2015NewLine
563027Di2015UniqueSeparatorList<IFoo> list = new List<IFoo>();Di2015NewLine
563256Di2015UniqueSeparatorList<string> strings = new string[] { "Hello", "Hello", "World" }.ToList();Di2015NewLineDi2015NewLinestrings = strings.Distinct().ToList();Di2015NewLine
563361Di2015UniqueSeparatorstring[] parts = line.Split(','.ToCharArray(), 6);Di2015NewLine
563361Di2015UniqueSeparator"1,2,3,4,5,6,7,8"
563361Di2015UniqueSeparator{ "1", "2", "3", "4", "5", "6,7,8" }
563461Di2015UniqueSeparatorXElement
563515Di2015UniqueSeparator  .method private hidebysig static void  Foo(valuetype [mscorlib]System.ValueType[] args) cil managed
563515Di2015UniqueSeparatorIL_0020:  call       void ConsoleApplication1.Program::Foo(valuetype [mscorlib]System.ValueType[])
563612Di2015UniqueSeparator<script language="c#" runat="server">Di2015NewLinepublic void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  //hello, world!Di2015NewLine}Di2015NewLine</script>Di2015NewLine
564003Di2015UniqueSeparatorXmlDocument
564003Di2015UniqueSeparatorxml
564007Di2015UniqueSeparatorSocketError.OperationAborted
564007Di2015UniqueSeparatore.BytesTransferred == 0
564007Di2015UniqueSeparatore.SocketError != SocketError.Success
564237Di2015UniqueSeparatorfor (...)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // Do stuffDi2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        // Handle (or ignore) the exceptionDi2015NewLine    }Di2015NewLine}Di2015NewLine
564314Di2015UniqueSeparatorNameValueCollection nvc = Request.Form;Di2015NewLinestring userName, password;Di2015NewLineif (!string.IsNullOrEmpty(nvc["txtUserName"]))Di2015NewLine{Di2015NewLine  userName = nvc["txtUserName"];Di2015NewLine}Di2015NewLineDi2015NewLineif (!string.IsNullOrEmpty(nvc["txtPassword"]))Di2015NewLine{Di2015NewLine  password = nvc["txtPassword"];Di2015NewLine}Di2015NewLineDi2015NewLine//Process loginDi2015NewLineCheckLogin(userName, password);Di2015NewLine
564373Di2015UniqueSeparatorIEnumerable<SomeType> data = ...Di2015NewLineDataTable table = new DataTable();Di2015NewLineusing(var reader = ObjectReader.Create(data)) {Di2015NewLine    table.Load(reader);Di2015NewLine}Di2015NewLine
564373Di2015UniqueSeparatorIEnumerable<SomeType> data = ...Di2015NewLineDataTable table = new DataTable();Di2015NewLineusing(var reader = ObjectReader.Create(data, "Id", "Name", "Description")) {Di2015NewLine    table.Load(reader);Di2015NewLine}Di2015NewLine
564373Di2015UniqueSeparatorHyperDescriptor
564373Di2015UniqueSeparatorExpression
564373Di2015UniqueSeparatorHyperDescriptor
564373Di2015UniqueSeparator// remove "this" if not on C# 3.0 / .NET 3.5Di2015NewLinepublic static DataTable ToDataTable<T>(this IList<T> data)Di2015NewLine{Di2015NewLine    PropertyDescriptorCollection props =Di2015NewLine        TypeDescriptor.GetProperties(typeof(T));Di2015NewLine    DataTable table = new DataTable();Di2015NewLine    for(int i = 0 ; i < props.Count ; i++)Di2015NewLine    {Di2015NewLine        PropertyDescriptor prop = props[i];Di2015NewLine        table.Columns.Add(prop.Name, prop.PropertyType);Di2015NewLine    }Di2015NewLine    object[] values = new object[props.Count];Di2015NewLine    foreach (T item in data)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < values.Length; i++)Di2015NewLine        {Di2015NewLine            values[i] = props[i].GetValue(item);Di2015NewLine        }Di2015NewLine        table.Rows.Add(values);Di2015NewLine    }Di2015NewLine    return table;        Di2015NewLine}Di2015NewLine
564373Di2015UniqueSeparatorHyperDescriptor
564373Di2015UniqueSeparatorT
564373Di2015UniqueSeparatorVanilla 27179Di2015NewLineHyper   6997Di2015NewLine
564373Di2015UniqueSeparatorDataTable
564373Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Diagnostics;Di2015NewLinepublic class MyDataDi2015NewLine{Di2015NewLine    public int A { get; set; }Di2015NewLine    public string B { get; set; }Di2015NewLine    public DateTime C { get; set; }Di2015NewLine    public decimal D { get; set; }Di2015NewLine    public string E { get; set; }Di2015NewLine    public int F { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void RunTest(List<MyData> data, string caption)Di2015NewLine    {Di2015NewLine        GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced);Di2015NewLine        GC.WaitForPendingFinalizers();Di2015NewLine        GC.WaitForFullGCComplete();Di2015NewLine        Stopwatch watch = Stopwatch.StartNew();Di2015NewLine        for (int i = 0; i < 500; i++)Di2015NewLine        {Di2015NewLine            data.ToDataTable();Di2015NewLine        }Di2015NewLine        watch.Stop();Di2015NewLine        Console.WriteLine(caption + "\\t" + watch.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        List<MyData> foos = new List<MyData>();Di2015NewLine        for (int i = 0 ; i < 5000 ; i++ ){Di2015NewLine            foos.Add(new MyDataDi2015NewLine            { // just gibberish...Di2015NewLine                A = i,Di2015NewLine                B = i.ToString(),Di2015NewLine                C = DateTime.Now.AddSeconds(i),Di2015NewLine                D = i,Di2015NewLine                E = "hello",Di2015NewLine                F = i * 2Di2015NewLine            });Di2015NewLine        }Di2015NewLine        RunTest(foos, "Vanilla");Di2015NewLine        Hyper.ComponentModel.HyperTypeDescriptionProvider.Add(Di2015NewLine            typeof(MyData));Di2015NewLine        RunTest(foos, "Hyper");Di2015NewLine        Console.ReadLine(); // return to exit        Di2015NewLine    }Di2015NewLine}Di2015NewLine
564387Di2015UniqueSeparatorprivate void YourEventHandler(object Sender, KeyPressEventArgs Args)Di2015NewLine{Di2015NewLine    if(!searchTextBox.Focused)Di2015NewLine    {Di2015NewLine        searchTextBox.Focus();Di2015NewLine        searchTextBox.Text += Args.KeyChar;Di2015NewLine        // move caret to end of text because Focus() selects all the textDi2015NewLine        searchTextBox.SelectionStart = searchTextBox.Text.LengthDi2015NewLine    }Di2015NewLine}Di2015NewLine
564387Di2015UniqueSeparator+=
564387Di2015UniqueSeparatorreturn
564429Di2015UniqueSeparatorProcess proc = null;Di2015NewLineSystem.Diagnostics.ProcessStartInfo info;Di2015NewLinestring domain = string.IsNullOrEmpty(row.Domain) ? "." : row.Domain;Di2015NewLineinfo = new ProcessStartInfo("Starter.exe");Di2015NewLineinfo.Arguments = cmd + " " + domain + " " + username + " " + password + " " + args;Di2015NewLineinfo.WorkingDirectory = Path.GetDirectoryName(cmd);Di2015NewLineinfo.UseShellExecute = false;Di2015NewLineinfo.RedirectStandardError = true;Di2015NewLineinfo.RedirectStandardOutput = true;Di2015NewLineproc = System.Diagnostics.Process.Start(info);Di2015NewLine
564429Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    #region InteropDi2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    public struct LUIDDi2015NewLine    {Di2015NewLine        public UInt32 LowPart;Di2015NewLine        public Int32 HighPart;Di2015NewLine    }Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    public struct LUID_AND_ATTRIBUTESDi2015NewLine    {Di2015NewLine        public LUID Luid;Di2015NewLine        public UInt32 Attributes;Di2015NewLine    }Di2015NewLineDi2015NewLine    public struct TOKEN_PRIVILEGESDi2015NewLine    {Di2015NewLine        public UInt32 PrivilegeCount;Di2015NewLine        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)]Di2015NewLine        public LUID_AND_ATTRIBUTES[] Privileges;Di2015NewLine    }Di2015NewLineDi2015NewLine    enum TOKEN_INFORMATION_CLASSDi2015NewLine    {Di2015NewLine        TokenUser = 1,Di2015NewLine        TokenGroups,Di2015NewLine        TokenPrivileges,Di2015NewLine        TokenOwner,Di2015NewLine        TokenPrimaryGroup,Di2015NewLine        TokenDefaultDacl,Di2015NewLine        TokenSource,Di2015NewLine        TokenType,Di2015NewLine        TokenImpersonationLevel,Di2015NewLine        TokenStatistics,Di2015NewLine        TokenRestrictedSids,Di2015NewLine        TokenSessionId,Di2015NewLine        TokenGroupsAndPrivileges,Di2015NewLine        TokenSessionReference,Di2015NewLine        TokenSandBoxInert,Di2015NewLine        TokenAuditPolicy,Di2015NewLine        TokenOrigin,Di2015NewLine        TokenElevationType,Di2015NewLine        TokenLinkedToken,Di2015NewLine        TokenElevation,Di2015NewLine        TokenHasRestrictions,Di2015NewLine        TokenAccessInformation,Di2015NewLine        TokenVirtualizationAllowed,Di2015NewLine        TokenVirtualizationEnabled,Di2015NewLine        TokenIntegrityLevel,Di2015NewLine        TokenUIAccess,Di2015NewLine        TokenMandatoryPolicy,Di2015NewLine        TokenLogonSid,Di2015NewLine        MaxTokenInfoClassDi2015NewLine    }Di2015NewLineDi2015NewLine    [Flags]Di2015NewLine    enum CreationFlags : uintDi2015NewLine    {Di2015NewLine        CREATE_BREAKAWAY_FROM_JOB = 0x01000000,Di2015NewLine        CREATE_DEFAULT_ERROR_MODE = 0x04000000,Di2015NewLine        CREATE_NEW_CONSOLE = 0x00000010,Di2015NewLine        CREATE_NEW_PROCESS_GROUP = 0x00000200,Di2015NewLine        CREATE_NO_WINDOW = 0x08000000,Di2015NewLine        CREATE_PROTECTED_PROCESS = 0x00040000,Di2015NewLine        CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000,Di2015NewLine        CREATE_SEPARATE_WOW_VDM = 0x00001000,Di2015NewLine        CREATE_SUSPENDED = 0x00000004,Di2015NewLine        CREATE_UNICODE_ENVIRONMENT = 0x00000400,Di2015NewLine        DEBUG_ONLY_THIS_PROCESS = 0x00000002,Di2015NewLine        DEBUG_PROCESS = 0x00000001,Di2015NewLine        DETACHED_PROCESS = 0x00000008,Di2015NewLine        EXTENDED_STARTUPINFO_PRESENT = 0x00080000Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum TOKEN_TYPEDi2015NewLine    {Di2015NewLine        TokenPrimary = 1,Di2015NewLine        TokenImpersonationDi2015NewLine    }Di2015NewLineDi2015NewLine    public enum SECURITY_IMPERSONATION_LEVELDi2015NewLine    {Di2015NewLine        SecurityAnonymous,Di2015NewLine        SecurityIdentification,Di2015NewLine        SecurityImpersonation,Di2015NewLine        SecurityDelegationDi2015NewLine    }Di2015NewLineDi2015NewLine    [Flags]Di2015NewLine    enum LogonFlagsDi2015NewLine    {Di2015NewLine        LOGON_NETCREDENTIALS_ONLY = 2,Di2015NewLine        LOGON_WITH_PROFILE = 1Di2015NewLine    }Di2015NewLineDi2015NewLine    enum LOGON_TYPEDi2015NewLine    {Di2015NewLine        LOGON32_LOGON_INTERACTIVE = 2,Di2015NewLine        LOGON32_LOGON_NETWORK,Di2015NewLine        LOGON32_LOGON_BATCH,Di2015NewLine        LOGON32_LOGON_SERVICE,Di2015NewLine        LOGON32_LOGON_UNLOCK = 7,Di2015NewLine        LOGON32_LOGON_NETWORK_CLEARTEXT,Di2015NewLine        LOGON32_LOGON_NEW_CREDENTIALSDi2015NewLine    }Di2015NewLineDi2015NewLine    enum LOGON_PROVIDERDi2015NewLine    {Di2015NewLine        LOGON32_PROVIDER_DEFAULT,Di2015NewLine        LOGON32_PROVIDER_WINNT35,Di2015NewLine        LOGON32_PROVIDER_WINNT40,Di2015NewLine        LOGON32_PROVIDER_WINNT50Di2015NewLine    }Di2015NewLineDi2015NewLine    #region _SECURITY_ATTRIBUTESDi2015NewLine    //typedef struct _SECURITY_ATTRIBUTES {  Di2015NewLine    //    DWORD nLength;  Di2015NewLine    //    LPVOID lpSecurityDescriptor;  Di2015NewLine    //    BOOL bInheritHandle;Di2015NewLine    //} SECURITY_ATTRIBUTES,  *PSECURITY_ATTRIBUTES,  *LPSECURITY_ATTRIBUTES;Di2015NewLine    #endregionDi2015NewLine    struct SECURITY_ATTRIBUTESDi2015NewLine    {Di2015NewLine        public uint Length;Di2015NewLine        public IntPtr SecurityDescriptor;Di2015NewLine        public bool InheritHandle;Di2015NewLine    }Di2015NewLineDi2015NewLine    [Flags] enum SECURITY_INFORMATION : uintDi2015NewLine    {Di2015NewLine        OWNER_SECURITY_INFORMATION        = 0x00000001,Di2015NewLine        GROUP_SECURITY_INFORMATION        = 0x00000002,Di2015NewLine        DACL_SECURITY_INFORMATION         = 0x00000004,Di2015NewLine        SACL_SECURITY_INFORMATION         = 0x00000008,Di2015NewLine        UNPROTECTED_SACL_SECURITY_INFORMATION = 0x10000000,Di2015NewLine        UNPROTECTED_DACL_SECURITY_INFORMATION = 0x20000000,Di2015NewLine        PROTECTED_SACL_SECURITY_INFORMATION   = 0x40000000,Di2015NewLine        PROTECTED_DACL_SECURITY_INFORMATION   = 0x80000000Di2015NewLine    }Di2015NewLineDi2015NewLine    #region _SECURITY_DESCRIPTORDi2015NewLine    //typedef struct _SECURITY_DESCRIPTOR {Di2015NewLine    //  UCHAR  Revision;Di2015NewLine    //  UCHAR  Sbz1;Di2015NewLine    //  SECURITY_DESCRIPTOR_CONTROL  Control;Di2015NewLine    //  PSID  Owner;Di2015NewLine    //  PSID  Group;Di2015NewLine    //  PACL  Sacl;Di2015NewLine    //  PACL  Dacl;Di2015NewLine    //} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;Di2015NewLine    #endregionDi2015NewLine    [StructLayoutAttribute(LayoutKind.Sequential)]Di2015NewLine    struct SECURITY_DESCRIPTORDi2015NewLine    {Di2015NewLine        public byte revision;Di2015NewLine        public byte size;Di2015NewLine        public short control; // public SECURITY_DESCRIPTOR_CONTROL control;Di2015NewLine        public IntPtr owner;Di2015NewLine        public IntPtr group;Di2015NewLine        public IntPtr sacl;Di2015NewLine        public IntPtr dacl;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region _STARTUPINFODi2015NewLine    //typedef struct _STARTUPINFO {  Di2015NewLine    //    DWORD cb;  Di2015NewLine    //    LPTSTR lpReserved;  Di2015NewLine    //    LPTSTR lpDesktop;  Di2015NewLine    //    LPTSTR lpTitle;  Di2015NewLine    //    DWORD dwX;  Di2015NewLine    //    DWORD dwY;  Di2015NewLine    //    DWORD dwXSize;  Di2015NewLine    //    DWORD dwYSize;  Di2015NewLine    //    DWORD dwXCountChars;  Di2015NewLine    //    DWORD dwYCountChars;  Di2015NewLine    //    DWORD dwFillAttribute;  Di2015NewLine    //    DWORD dwFlags;  Di2015NewLine    //    WORD wShowWindow;  Di2015NewLine    //    WORD cbReserved2;  Di2015NewLine    //    LPBYTE lpReserved2;  Di2015NewLine    //    HANDLE hStdInput;  Di2015NewLine    //    HANDLE hStdOutput;  Di2015NewLine    //    HANDLE hStdError; Di2015NewLine    //} STARTUPINFO,  *LPSTARTUPINFO;Di2015NewLine    #endregionDi2015NewLine    struct STARTUPINFODi2015NewLine    {Di2015NewLine        public uint cb;Di2015NewLine        [MarshalAs(UnmanagedType.LPTStr)]Di2015NewLine        public string Reserved;Di2015NewLine        [MarshalAs(UnmanagedType.LPTStr)]Di2015NewLine        public string Desktop;Di2015NewLine        [MarshalAs(UnmanagedType.LPTStr)]Di2015NewLine        public string Title;Di2015NewLine        public uint X;Di2015NewLine        public uint Y;Di2015NewLine        public uint XSize;Di2015NewLine        public uint YSize;Di2015NewLine        public uint XCountChars;Di2015NewLine        public uint YCountChars;Di2015NewLine        public uint FillAttribute;Di2015NewLine        public uint Flags;Di2015NewLine        public ushort ShowWindow;Di2015NewLine        public ushort Reserverd2;Di2015NewLine        public byte bReserverd2;Di2015NewLine        public IntPtr StdInput;Di2015NewLine        public IntPtr StdOutput;Di2015NewLine        public IntPtr StdError;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region _PROCESS_INFORMATIONDi2015NewLine    //typedef struct _PROCESS_INFORMATION {  Di2015NewLine    //  HANDLE hProcess;  Di2015NewLine    //  HANDLE hThread;  Di2015NewLine    //  DWORD dwProcessId;  Di2015NewLine    //  DWORD dwThreadId; } Di2015NewLine    //  PROCESS_INFORMATION,  *LPPROCESS_INFORMATION;Di2015NewLine    #endregionDi2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    struct PROCESS_INFORMATIONDi2015NewLine    {Di2015NewLine        public IntPtr Process;Di2015NewLine        public IntPtr Thread;Di2015NewLine        public uint ProcessId;Di2015NewLine        public uint ThreadId;Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", SetLastError = true)]Di2015NewLine    static extern bool InitializeSecurityDescriptor(IntPtr pSecurityDescriptor, uint dwRevision);Di2015NewLine    const uint SECURITY_DESCRIPTOR_REVISION = 1;Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", SetLastError = true)]Di2015NewLine    static extern bool SetSecurityDescriptorDacl(ref SECURITY_DESCRIPTOR sd, bool daclPresent, IntPtr dacl, bool daclDefaulted);Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]Di2015NewLine    extern static bool DuplicateTokenEx(Di2015NewLine        IntPtr hExistingToken,Di2015NewLine        uint dwDesiredAccess,Di2015NewLine        ref SECURITY_ATTRIBUTES lpTokenAttributes,Di2015NewLine        SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,Di2015NewLine        TOKEN_TYPE TokenType,Di2015NewLine        out IntPtr phNewToken);Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", SetLastError = true)]Di2015NewLine    public static extern bool LogonUser(Di2015NewLine        string lpszUsername,Di2015NewLine        string lpszDomain,Di2015NewLine        string lpszPassword,Di2015NewLine        int dwLogonType,Di2015NewLine        int dwLogonProvider,Di2015NewLine        out IntPtr phTokenDi2015NewLine        );Di2015NewLineDi2015NewLine    #region GetTokenInformationDi2015NewLine    //BOOL WINAPI GetTokenInformation(Di2015NewLine    //  __in       HANDLE TokenHandle,Di2015NewLine    //  __in       TOKEN_INFORMATION_CLASS TokenInformationClass,Di2015NewLine    //  __out_opt  LPVOID TokenInformation,Di2015NewLine    //  __in       DWORD TokenInformationLength,Di2015NewLine    //  __out      PDWORD ReturnLengthDi2015NewLine    //);Di2015NewLine    #endregionDi2015NewLine    [DllImport("advapi32.dll", SetLastError = true)]Di2015NewLine    static extern bool GetTokenInformation(Di2015NewLine        IntPtr TokenHandle,Di2015NewLine        TOKEN_INFORMATION_CLASS TokenInformationClass,Di2015NewLine        IntPtr TokenInformation,Di2015NewLine        int TokenInformationLength,Di2015NewLine        out int ReturnLengthDi2015NewLine        );Di2015NewLineDi2015NewLineDi2015NewLine    #region CreateProcessAsUserDi2015NewLine    //        BOOL WINAPI CreateProcessAsUser(Di2015NewLine    //  __in_opt     HANDLE hToken,Di2015NewLine    //  __in_opt     LPCTSTR lpApplicationName,Di2015NewLine    //  __inout_opt  LPTSTR lpCommandLine,Di2015NewLine    //  __in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,Di2015NewLine    //  __in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,Di2015NewLine    //  __in         BOOL bInheritHandles,Di2015NewLine    //  __in         DWORD dwCreationFlags,Di2015NewLine    //  __in_opt     LPVOID lpEnvironment,Di2015NewLine    //  __in_opt     LPCTSTR lpCurrentDirectory,Di2015NewLine    //  __in         LPSTARTUPINFO lpStartupInfo,Di2015NewLine    //  __out        LPPROCESS_INFORMATION lpProcessInformation);Di2015NewLine    #endregionDi2015NewLine    [DllImport("advapi32.dll", CharSet = CharSet.Unicode, SetLastError = true)]Di2015NewLine    static extern bool CreateProcessAsUser(Di2015NewLine        IntPtr Token, Di2015NewLine        [MarshalAs(UnmanagedType.LPTStr)] string ApplicationName,Di2015NewLine        [MarshalAs(UnmanagedType.LPTStr)] string CommandLine,Di2015NewLine        ref SECURITY_ATTRIBUTES ProcessAttributes, Di2015NewLine        ref SECURITY_ATTRIBUTES ThreadAttributes, Di2015NewLine        bool InheritHandles,Di2015NewLine        uint CreationFlags, Di2015NewLine        IntPtr Environment, Di2015NewLine        [MarshalAs(UnmanagedType.LPTStr)] string CurrentDirectory, Di2015NewLine        ref STARTUPINFO StartupInfo, Di2015NewLine        out PROCESS_INFORMATION ProcessInformation);Di2015NewLineDi2015NewLine    #region CloseHandleDi2015NewLine    //BOOL WINAPI CloseHandle(Di2015NewLine    //      __in          HANDLE hObjectDi2015NewLine    //        );Di2015NewLine    #endregionDi2015NewLine    [DllImport("Kernel32.dll")]Di2015NewLine    extern static int CloseHandle(IntPtr handle);Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]Di2015NewLine    internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall, ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", SetLastError = true)]Di2015NewLine    internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential, Pack = 1)]Di2015NewLine    internal struct TokPriv1LuidDi2015NewLine    {Di2015NewLine        public int Count;Di2015NewLine        public long Luid;Di2015NewLine        public int Attr;Di2015NewLine    }Di2015NewLineDi2015NewLine    //static internal const int TOKEN_QUERY = 0x00000008;Di2015NewLine    internal const int SE_PRIVILEGE_ENABLED = 0x00000002;Di2015NewLine    //static internal const int TOKEN_ADJUST_PRIVILEGES = 0x00000020;Di2015NewLineDi2015NewLine    internal const int TOKEN_QUERY = 0x00000008;Di2015NewLine    internal const int TOKEN_DUPLICATE = 0x0002;Di2015NewLine    internal const int TOKEN_ASSIGN_PRIMARY = 0x0001;Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    [STAThread]Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string username, domain, password, applicationName;Di2015NewLine        username = args[2];Di2015NewLine        domain = args[1];Di2015NewLine        password = args[3];Di2015NewLine        applicationName = @args[0];Di2015NewLineDi2015NewLine        IntPtr token = IntPtr.Zero;Di2015NewLine        IntPtr primaryToken = IntPtr.Zero;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            bool result = false;Di2015NewLineDi2015NewLine            result = LogonUser(username, domain, password, (int)LOGON_TYPE.LOGON32_LOGON_NETWORK, (int)LOGON_PROVIDER.LOGON32_PROVIDER_DEFAULT, out token);Di2015NewLine            if (!result)Di2015NewLine            {Di2015NewLine                int winError = Marshal.GetLastWin32Error();Di2015NewLine            }Di2015NewLineDi2015NewLine            string commandLine = null;Di2015NewLineDi2015NewLine            #region security attributesDi2015NewLine            SECURITY_ATTRIBUTES processAttributes = new SECURITY_ATTRIBUTES();Di2015NewLineDi2015NewLine            SECURITY_DESCRIPTOR sd = new SECURITY_DESCRIPTOR();Di2015NewLine            IntPtr ptr = Marshal.AllocCoTaskMem(Marshal.SizeOf(sd));Di2015NewLine            Marshal.StructureToPtr(sd, ptr, false);Di2015NewLine            InitializeSecurityDescriptor(ptr, SECURITY_DESCRIPTOR_REVISION);Di2015NewLine            sd = (SECURITY_DESCRIPTOR)Marshal.PtrToStructure(ptr, typeof(SECURITY_DESCRIPTOR));Di2015NewLineDi2015NewLine            result = SetSecurityDescriptorDacl(ref sd, true, IntPtr.Zero, false);Di2015NewLine            if (!result)Di2015NewLine            {Di2015NewLine                int winError = Marshal.GetLastWin32Error();Di2015NewLine            }Di2015NewLineDi2015NewLine            primaryToken = new IntPtr();Di2015NewLine            result = DuplicateTokenEx(token, 0, ref processAttributes, SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, TOKEN_TYPE.TokenPrimary, out primaryToken);Di2015NewLine            if (!result)Di2015NewLine            {Di2015NewLine                int winError = Marshal.GetLastWin32Error();Di2015NewLine            }Di2015NewLine            processAttributes.SecurityDescriptor = ptr;Di2015NewLine            processAttributes.Length = (uint)Marshal.SizeOf(sd);Di2015NewLine            processAttributes.InheritHandle = true;Di2015NewLine            #endregionDi2015NewLineDi2015NewLine            SECURITY_ATTRIBUTES threadAttributes = new SECURITY_ATTRIBUTES();Di2015NewLine            threadAttributes.SecurityDescriptor = IntPtr.Zero;Di2015NewLine            threadAttributes.Length = 0;Di2015NewLine            threadAttributes.InheritHandle = false;Di2015NewLineDi2015NewLine            bool inheritHandles = true;Di2015NewLine            //CreationFlags creationFlags = CreationFlags.CREATE_DEFAULT_ERROR_MODE;Di2015NewLine            IntPtr environment = IntPtr.Zero;Di2015NewLine            string currentDirectory = currdir;Di2015NewLineDi2015NewLine            STARTUPINFO startupInfo = new STARTUPINFO();Di2015NewLine            startupInfo.Desktop = "";Di2015NewLineDi2015NewLine            PROCESS_INFORMATION processInformation;Di2015NewLineDi2015NewLine            result = CreateProcessAsUser(primaryToken, applicationName, commandLine, ref processAttributes, ref threadAttributes, inheritHandles, 16, environment, currentDirectory, ref startupInfo, out processInformation);Di2015NewLine            if (!result)Di2015NewLine            {Di2015NewLine                int winError = Marshal.GetLastWin32Error();Di2015NewLine                File.AppendAllText(logfile, DateTime.Now.ToLongTimeString() + " " + winError + Environment.NewLine);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLine            int winError = Marshal.GetLastWin32Error();Di2015NewLine            File.AppendAllText(logfile, DateTime.Now.ToLongTimeString() + " " + winError + Environment.NewLine);Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            if (token != IntPtr.Zero)Di2015NewLine            {Di2015NewLine                int x = CloseHandle(token);Di2015NewLine                if (x == 0)Di2015NewLine                    throw new Win32Exception(Marshal.GetLastWin32Error());Di2015NewLine                x = CloseHandle(primaryToken);Di2015NewLine                if (x == 0)Di2015NewLine                    throw new Win32Exception(Marshal.GetLastWin32Error());Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
564463Di2015UniqueSeparator// Make owner-drawn to be able to give different alignments to single subitemsDi2015NewLinelvResult.OwnerDraw = true;Di2015NewLine...Di2015NewLineDi2015NewLine// Handle DrawSubItem eventDi2015NewLineprivate void lvResult_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)Di2015NewLine{Di2015NewLine    // This is the default text alignmentDi2015NewLine    TextFormatFlags flags = TextFormatFlags.Left;Di2015NewLineDi2015NewLine    // Align text on the right for the subitems after row 11 in the Di2015NewLine    // first columnDi2015NewLine    if (e.ColumnIndex == 0 && e.Item.Index > 11)Di2015NewLine    {Di2015NewLine        flags = TextFormatFlags.Right;Di2015NewLine    }Di2015NewLineDi2015NewLine    e.DrawText(flags);Di2015NewLine}Di2015NewLineDi2015NewLine// Handle DrawColumnHeader eventDi2015NewLineprivate void lvResult_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)Di2015NewLine{Di2015NewLine    // Draw the column header normallyDi2015NewLine    e.DrawDefault = true;Di2015NewLine    e.DrawBackground();Di2015NewLine    e.DrawText();Di2015NewLine}Di2015NewLine
564476Di2015UniqueSeparatorCultureInfo.CurrentUICulture
564564Di2015UniqueSeparatorout
564564Di2015UniqueSeparatorref
564564Di2015UniqueSeparatorvoid MyFn(ref int i)
564564Di2015UniqueSeparatorvoid MyFn(prop_ref int i)
564564Di2015UniqueSeparatorMyFn
564564Di2015UniqueSeparatori
564564Di2015UniqueSeparatori
564564Di2015UniqueSeparatori
564564Di2015UniqueSeparatorMyFunc(myObject.IntProperty)Di2015NewLine
564564Di2015UniqueSeparatorDim temp_i As Integer = myObject.IntPropertyDi2015NewLineMyFunc(temp_i)Di2015NewLinemyObject.IntProperty = temp_iDi2015NewLine
564564Di2015UniqueSeparatorMyFunc
564653Di2015UniqueSeparatorSetGameAreaWithCallback
564653Di2015UniqueSeparatorchangeGameArea
564653Di2015UniqueSeparatorGame1
564653Di2015UniqueSeparator// game1 is the instance of the Game1 class that you want to callDi2015NewLine// Instantiate the handlerDi2015NewLineSetGameAreaDelegate handler = new SetGameAreaDelegate(game1.changeGameArea);Di2015NewLine
564653Di2015UniqueSeparator// game1 is the instance of the Game1 class that you want to callDi2015NewLine// Instantiate the handlerDi2015NewLineSetGameAreaDelegate handler = game1.changeGameArea;Di2015NewLine
564659Di2015UniqueSeparatorpublic static class InputBindingsManagerDi2015NewLine    {Di2015NewLineDi2015NewLine        public static readonly DependencyProperty UpdatePropertySourceWhenEnterPressedProperty = DependencyProperty.RegisterAttached(Di2015NewLine            "UpdatePropertySourceWhenEnterPressed", typeof(DependencyProperty), typeof(InputBindingsManager), new PropertyMetadata(null, OnUpdatePropertySourceWhenEnterPressedPropertyChanged));Di2015NewLineDi2015NewLine        static InputBindingsManager()Di2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public static void SetUpdatePropertySourceWhenEnterPressed(DependencyObject dp, DependencyProperty value)Di2015NewLine        {Di2015NewLine            dp.SetValue(UpdatePropertySourceWhenEnterPressedProperty, value);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static DependencyProperty GetUpdatePropertySourceWhenEnterPressed(DependencyObject dp)Di2015NewLine        {Di2015NewLine            return (DependencyProperty)dp.GetValue(UpdatePropertySourceWhenEnterPressedProperty);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void OnUpdatePropertySourceWhenEnterPressedPropertyChanged(DependencyObject dp, DependencyPropertyChangedEventArgs e)Di2015NewLine        {Di2015NewLine            UIElement element = dp as UIElement;Di2015NewLineDi2015NewLine            if (element == null)Di2015NewLine            {Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (e.OldValue != null)Di2015NewLine            {Di2015NewLine                element.PreviewKeyDown -= HandlePreviewKeyDown;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (e.NewValue != null)Di2015NewLine            {Di2015NewLine                element.PreviewKeyDown += new KeyEventHandler(HandlePreviewKeyDown);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        static void HandlePreviewKeyDown(object sender, KeyEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.Key == Key.Enter)Di2015NewLine            {Di2015NewLine                DoUpdateSource(e.Source);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        static void DoUpdateSource(object source)Di2015NewLine        {Di2015NewLine            DependencyProperty property =Di2015NewLine                GetUpdatePropertySourceWhenEnterPressed(source as DependencyObject);Di2015NewLineDi2015NewLine            if (property == null)Di2015NewLine            {Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            UIElement elt = source as UIElement;Di2015NewLineDi2015NewLine            if (elt == null)Di2015NewLine            {Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            BindingExpression binding = BindingOperations.GetBindingExpression(elt, property);Di2015NewLineDi2015NewLine            if (binding != null)Di2015NewLine            {Di2015NewLine                binding.UpdateSource();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
564659Di2015UniqueSeparator<TextBox Name="itemNameTextBox"Di2015NewLineText="{Binding Path=ItemName, UpdateSourceTrigger=PropertyChanged}" b:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"/>Di2015NewLine
564679Di2015UniqueSeparatorDROP INDEX [TableName].IndexNameDi2015NewLine
564757Di2015UniqueSeparator// setup a connection to a sql serverDi2015NewLineSqlConnection conn = new SqlConnection( "here is the connectionstring" );Di2015NewLineDi2015NewLineSqlCommand cmd = new SqlCommand(conn);Di2015NewLinecmd.CommandText = "SELECT * FROM table WHERE Id = @pId";Di2015NewLinecmd.Parameters.Add ("@pId", SqlDbType.Int).Value = 1;Di2015NewLineDi2015NewLineusing( SqlDataReader dr = cmd.ExecuteReader() )Di2015NewLine{Di2015NewLine}Di2015NewLine
564973Di2015UniqueSeparatorprotected override Func<Stream> GetStream()Di2015NewLine{Di2015NewLine    return someBoolDi2015NewLine        ? (Func<Stream>)Di2015NewLine          (() => EmbeddedResourceExtractor.GetFile("SomeFile1.ext"))Di2015NewLine        : () => EmbeddedResourceExtractor.GetFile("SomeFile2.ext");Di2015NewLine}Di2015NewLine
564973Di2015UniqueSeparatorsomeBool
564973Di2015UniqueSeparatorprotected override Func<Stream> GetStream()Di2015NewLine{Di2015NewLine    return () => someBoolDi2015NewLine          ? EmbeddedResourceExtractor.GetFile("SomeFile1.ext")Di2015NewLine          : EmbeddedResourceExtractor.GetFile("SomeFile2.ext");Di2015NewLine}Di2015NewLine
564973Di2015UniqueSeparatorprotected override Func<Stream> GetStream()Di2015NewLine{Di2015NewLine    string name = someBool ? "SomeFile1.ext" : "SomeFile2.ext";Di2015NewLine    return () => EmbeddedResourceExtractor.GetFile(name);Di2015NewLine}Di2015NewLine
564993Di2015UniqueSeparator    private const int WM_NCLBUTTONDBLCLK = 0xA3;Di2015NewLineDi2015NewLine    protected override void WndProc(ref Message m)Di2015NewLine    {Di2015NewLine        switch (m.Msg)Di2015NewLine        {Di2015NewLine            case WM_NCLBUTTONDBLCLK:Di2015NewLine                if (this.WindowState==System.Windows.Forms.FormWindowState.Maximized)Di2015NewLine                    this.WindowState=System.Windows.Forms.FormWindowState.Normal;Di2015NewLine                else if (this.WindowState == System.Windows.Forms.FormWindowState.Normal)Di2015NewLine                    this.WindowState = System.Windows.Forms.FormWindowState.Maximized;Di2015NewLine                return;Di2015NewLine        }Di2015NewLine        base.WndProc(ref m);Di2015NewLine    }Di2015NewLine
565119Di2015UniqueSeparatorpublic Guid ItemIdDi2015NewLine{Di2015NewLine    get;Di2015NewLine    private set;Di2015NewLine}Di2015NewLineDi2015NewLinepublic TransactionItem()Di2015NewLine{Di2015NewLine    this.ItemId = Guid.Empty;Di2015NewLine}Di2015NewLine
565451Di2015UniqueSeparatorusing (SqlCommand myCommand = new SqlCommand("SELECT * FROM USERS WHERE USERNAME=@username AND PASSWORD=HASHBYTES('SHA1', @password)", myConnection))Di2015NewLine    {                    Di2015NewLine        myCommand.Parameters.AddWithValue("@username", user);Di2015NewLine        myCommand.Parameters.AddWithValue("@password", pass);Di2015NewLineDi2015NewLine        myConnection.Open();Di2015NewLine        SqlDataReader myReader = myCommand.ExecuteReader())Di2015NewLine        ...................Di2015NewLine    }Di2015NewLine
565479Di2015UniqueSeparatorMS SQL 2005+
565479Di2015UniqueSeparatorSELECT range, (MIN(getprev) + MIN(value)) / 2 as range_start, (MAX(getnext) + MAX(value)) / 2 AS range_end, COUNT(*) as range_valuesDi2015NewLineFROM (Di2015NewLine  SELECT value,Di2015NewLine         NTILE(4) OVER (ORDER BY value ) AS range,Di2015NewLine         (Di2015NewLine         SELECT TOP 1 valueDi2015NewLine         FROM values liDi2015NewLine         WHERE li.value < lo.valueDi2015NewLine         ORDER BYDi2015NewLine           li.value DESCDi2015NewLine         ) AS getprev,Di2015NewLine         (Di2015NewLine         SELECT TOP 1 valueDi2015NewLine         FROM values liDi2015NewLine         WHERE li.value > lo.valueDi2015NewLine         ORDER BYDi2015NewLine           li.valueDi2015NewLine         ) AS getnextDi2015NewLine  FROM values loDi2015NewLine) voDi2015NewLineGROUP BY rangeDi2015NewLineORDER BY rangeDi2015NewLine
565536Di2015UniqueSeparatorif (propertyName == OpeningDateProperty.Name) return false;Di2015NewLine
565536Di2015UniqueSeparatorprivate void rootBindingSource_CurrentItemChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    readWriteAuthorization1.ResetControlAuthorization();Di2015NewLine}Di2015NewLine
565543Di2015UniqueSeparatorinsert into ...Di2015NewLineDi2015NewLineselect scope_identity()Di2015NewLine
565543Di2015UniqueSeparatorreturn RedirectToAction("YourActionName", new {id});Di2015NewLine
565543Di2015UniqueSeparatorvar myNewObject = // some way of creating the objectDi2015NewLineDi2015NewLine// some way of saving the object Di2015NewLine// at this point NHibernate will have set the ID of the object for youDi2015NewLineDi2015NewLinereturn RedirectToAction("YourActionName", new { id = myNewObject.Id });Di2015NewLine
565561Di2015UniqueSeparatorAnswerHistory
565561Di2015UniqueSeparatorAnswerHist
565561Di2015UniqueSeparatorpublic class AnswerHistory : Answer {Di2015NewLine    public AnswerHistory (Answer answer) {Di2015NewLine        this.QuestionID = answer.QuestionID;Di2015NewLine        this.Value = answer.Value;Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
565561Di2015UniqueSeparatorsave(Answers.Select(answer => new AnswerHistory(answer)));Di2015NewLinedelete(Answers);Di2015NewLineDi2015NewLineAnswers = new stuff;Di2015NewLinesave(Answers);Di2015NewLine
565619Di2015UniqueSeparatorobject.Equals(value, default(T))Di2015NewLine
565686Di2015UniqueSeparatorSELECT ProcessId FROM Win32_Service WHERE Name='MyServiceName'Di2015NewLine
565686Di2015UniqueSeparatortaskllist.exe /svc
565698Di2015UniqueSeparator<asp:...
565889Di2015UniqueSeparatorint key = (int)Registry.GetValue("HKEY_LOCAL_MACHINE\\\\System\\\\State\\\\Hardware", "WiFi", -1);Di2015NewLine
565952Di2015UniqueSeparatormyList.OrderBy<int, int>(Identity);Di2015NewLine
565952Di2015UniqueSeparatormyList.OrderBy((Func<int, int>)Identity);Di2015NewLine
566180Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Xml.Linq;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string xml = @"Di2015NewLine<root>Di2015NewLine  <child id='1'/>Di2015NewLine  <child id='2'>Di2015NewLine    <grandchild id='3' />Di2015NewLine    <grandchild id='4' />Di2015NewLine  </child>Di2015NewLine</root>";Di2015NewLine        XDocument doc = XDocument.Parse(xml);Di2015NewLineDi2015NewLine        foreach (XElement element in doc.Descendants("grandchild"))Di2015NewLine        {Di2015NewLine            Console.WriteLine(element);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
566180Di2015UniqueSeparator<grandchild id="3" />
566180Di2015UniqueSeparator<grandchild id="4" />
566193Di2015UniqueSeparatorBitConverter.GetBytes
566208Di2015UniqueSeparatorSystem.Net.NetworkInformation.IPv4InterfaceStatistics
566208Di2015UniqueSeparatorbytesReceived
566208Di2015UniqueSeparatorbytesReceived
566253Di2015UniqueSeparatorHttpContext
566253Di2015UniqueSeparatorGetHostEntry
566253Di2015UniqueSeparatorDns
566253Di2015UniqueSeparatorSystem.Net
566253Di2015UniqueSeparatorIPHostEntry
566334Di2015UniqueSeparatordynamic
566385Di2015UniqueSeparatorvar client = (from u in db.ClientsDi2015NewLine              where u.id == Convert.ToInt32(Session["ClientID"]) && Di2015NewLine                    u.Projects.Any(x=>x.id == projectID)Di2015NewLine              select u).SingleOrDefault();Di2015NewLine
566385Di2015UniqueSeparatorvar project = (from u in db.ClientsDi2015NewLine              where u.id == Convert.ToInt32(Session["ClientID"]) && Di2015NewLine                    u.Projects.Any(x=>x.id == projectID)Di2015NewLine              select u.Projects.Where(x=>x.id == projectID).Single()).SingleOrDefault();Di2015NewLine
566541Di2015UniqueSeparatorpublic interface IMyInterfaceDi2015NewLine{Di2015NewLine   public Foo Property1 {get; set;}Di2015NewLine   public Bar Property2 {get;set;}Di2015NewLine}Di2015NewLine
566541Di2015UniqueSeparatorprivate void FillObject<T>(T MainObject, Foo Arg1, Bar Arg2) Di2015NewLine    where T : IMyInterfaceDi2015NewLine{Di2015NewLine    MainObject.Property1 = Arg1;Di2015NewLine    MainObject.Property2 = Arg2;Di2015NewLine}Di2015NewLine
566593Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    string xml = @"Di2015NewLine                <Items>Di2015NewLine                    <Item>Di2015NewLine                        <Stuff>Strings</Stuff>Di2015NewLine                    </Item>Di2015NewLine                    <Item>Di2015NewLine                        <Stuff>Strings</Stuff>Di2015NewLine                    </Item>Di2015NewLine                </Items>";Di2015NewLineDi2015NewLine    using (StringReader myStream = new StringReader(xml))Di2015NewLine    {Di2015NewLine        XDocument doc = XDocument.Load(myStream);Di2015NewLineDi2015NewLine        var query = from node in doc.Descendants(XName.Get("Item"))Di2015NewLine                    select new { Stuff = Di2015NewLine                        node.Element(XName.Get("Stuff")).Value };Di2015NewLineDi2015NewLine        foreach (var item in query)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Stuff: {0}", item.Stuff);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
566593Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    string xml = @"Di2015NewLine                <Items>Di2015NewLine                    <Item>Di2015NewLine                        <Stuff>Strings</Stuff>Di2015NewLine                    </Item>Di2015NewLine                    <Item>Di2015NewLine                        <Stuff>Strings</Stuff>Di2015NewLine                    </Item>Di2015NewLine                </Items>";Di2015NewLineDi2015NewLine    using (StringReader myStream = new StringReader(xml))Di2015NewLine    {Di2015NewLine        XDocument doc = XDocument.Load(myStream);Di2015NewLineDi2015NewLine        var query = from node in doc.Descendants("Item")Di2015NewLine                    select new { Stuff = node.Element("Stuff").Value };Di2015NewLineDi2015NewLine        foreach (var item in query)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Stuff: {0}", item.Stuff);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
566652Di2015UniqueSeparator[KnownType(typeof(ApplicationGroupCollection))]Di2015NewLine[KnownType(typeof(ApplicationGroup))]Di2015NewLine
566729Di2015UniqueSeparatorforeach (var a in n) {Di2015NewLine    Button b = new Button();Di2015NewLine    b.Content = a.Key;Di2015NewLine    b.Click += (x, y) => a.Value();Di2015NewLine    stackPanel.Children.Add(b);Di2015NewLine}Di2015NewLine
566729Di2015UniqueSeparatora
566729Di2015UniqueSeparatora.Value
566729Di2015UniqueSeparatora
566729Di2015UniqueSeparatora
566729Di2015UniqueSeparatora
566729Di2015UniqueSeparatorforeach (var a in n) {Di2015NewLine    Button b = new Button();Di2015NewLine    b.Content = a.Key;Di2015NewLineDi2015NewLine    // Assign a to another reference.Di2015NewLine    var a2 = a;Di2015NewLineDi2015NewLine    // Set click handler with new reference.Di2015NewLine    b.Click += (x, y) => a2.Value();Di2015NewLine    stackPanel.Children.Add(b);Di2015NewLine}Di2015NewLine
566750Di2015UniqueSeparatorprivate void menuItem1_Click(object sender, EventArgs e)Di2015NewLine{    Di2015NewLine    etiquetaCargando.Visible = true;Di2015NewLine    Thread reqThread =Di2015NewLine        new Thread(new ThreadStart(RequestImage));Di2015NewLine    reqThread.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void RequestImage()Di2015NewLine{Di2015NewLine    /* Get the imageDi2015NewLine    ...Di2015NewLine    */Di2015NewLine    Invoke(SetTheImage, new object[] { theImage });Di2015NewLine}Di2015NewLine
566847Di2015UniqueSeparatorSystem.Net.ServicePointManager.Expect100Continue = false;Di2015NewLine
566980Di2015UniqueSeparator        List<string> l = new List<string>();Di2015NewLine        l.Add("smtp:a");Di2015NewLine        l.Add("smtp:c");Di2015NewLine        l.Add("SMTP:b");Di2015NewLineDi2015NewLine        l.Sort(StringComparer.Ordinal);Di2015NewLine
567060Di2015UniqueSeparatorX509Store store = new X509Store(StoreName.TrustedPeople, StoreLocation.LocalMachine);Di2015NewLinestore.Open(OpenFlags.ReadWrite);Di2015NewLinestore.Add(cert); //where cert is an X509Certificate objectDi2015NewLinestore.Close(); Di2015NewLine
567153Di2015UniqueSeparatorSomeType
567153Di2015UniqueSeparatorIDisposable
567223Di2015UniqueSeparatorPredicate
567223Di2015UniqueSeparatorFunc<T, bool>
567223Di2015UniqueSeparatorAction
567223Di2015UniqueSeparatorFunc
567223Di2015UniqueSeparatorEventHandler
567223Di2015UniqueSeparatorEventHandler<T>
567223Di2015UniqueSeparatorComparison<T>
567223Di2015UniqueSeparatorIComparer<T>
567357Di2015UniqueSeparatorLoaded
567357Di2015UniqueSeparatorInitialized
567357Di2015UniqueSeparatorAfterLoad
567357Di2015UniqueSeparatorInitialized
567357Di2015UniqueSeparatorLoaded
567501Di2015UniqueSeparatorWMI
567501Di2015UniqueSeparatorWin32_PhysicalMemory
567501Di2015UniqueSeparatorLinux
567501Di2015UniqueSeparatordmidecode -t memory
567557Di2015UniqueSeparatorFunc1
567557Di2015UniqueSeparatorFunc2
567557Di2015UniqueSeparatorFunc1
567557Di2015UniqueSeparatorFunc2
567632Di2015UniqueSeparator// Gets the base url in the following format: Di2015NewLine// "http(s)://domain(:port)/AppPath)"Di2015NewLineHttpContext.Current.Request.Url.Scheme Di2015NewLine    + "://"Di2015NewLine    + HttpContext.Current.Request.Url.Authority Di2015NewLine    + HttpContext.Current.Request.ApplicationPath;Di2015NewLine
567723Di2015UniqueSeparatorsealed class MyClass : C {Di2015NewLine  override F(D d) { ... } Di2015NewLine}Di2015NewLine
567750Di2015UniqueSeparatorGethashCode()
567750Di2015UniqueSeparatoroperator==
567793Di2015UniqueSeparator    <system.net>Di2015NewLine\<mailSettings>Di2015NewLine\\<smtp deliveryMethod="SpecifiedPickupDirectory">Di2015NewLine\\\<specifiedPickupDirectory pickupDirectoryLocation="c:\\Temp\\mail\\"/>Di2015NewLine\\</smtp>Di2015NewLine\</mailSettings>Di2015NewLine</system.net>Di2015NewLine
567808Di2015UniqueSeparatorArray.CopyDi2015NewLineArray.CopyToDi2015NewLine
567872Di2015UniqueSeparatorClientScript.RegisterClientScriptBlock(GetType(), "save", Utils.MakeScriptBlock("self.close();"));Di2015NewLine
567947Di2015UniqueSeparatorgetCurrentTime()
567947Di2015UniqueSeparatornow()
567947Di2015UniqueSeparatornow()
568000Di2015UniqueSeparator*
568000Di2015UniqueSeparator*
568317Di2015UniqueSeparator<style>Di2015NewLine   p {color:#999; font-family:arial;} /*grey*/Di2015NewLine</style>Di2015NewLine
568378Di2015UniqueSeparator{\\pict\\pngblip\\picw10449\\pich3280\\picwgoal5924\\pichgoal1860 hex data}Di2015NewLine{\\pict\\pngblip\\picw10449\\pich3280\\picwgoal5924\\pichgoal1860\\bin binary data}Di2015NewLine
568477Di2015UniqueSeparatorICSharpCode.TextEditor
568496Di2015UniqueSeparatorif ((DateTime)(resultsGrid.CurrentRow.Cells["DateOfBirth"].Value) == DateTime.MinValue)Di2015NewLine            {Di2015NewLine                 // Set cell value to ""Di2015NewLine            }Di2015NewLine
568557Di2015UniqueSeparatorSELECT Di2015NewLine   ROWID AS 'ID'Di2015NewLine   , MYDATE + MYTIME AS 'MYDATETIME'Di2015NewLineFROMDi2015NewLine   MYTABLEDi2015NewLine
568557Di2015UniqueSeparatorprotected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine    {Di2015NewLine        //ASSUMES COLUMN 2 IS DATEDi2015NewLine        //AND COLUMN 3 IS TIMEDi2015NewLine        e.Row.Cells[2].Text = e.Row.Cells[2].Text + " " + e.Row.Cells[3].Text;Di2015NewLine        e.Row.Cells[3].Visible = false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
568770Di2015UniqueSeparatorCount
568770Di2015UniqueSeparatorIEnumerable
568770Di2015UniqueSeparatorpublic static IEnumerable<IEnumerable<T>> Di2015NewLine    GetSequences<T>(this IEnumerable<T> source, Func<T, bool> selector)Di2015NewLine{Di2015NewLine    // omitted null checks for brevityDi2015NewLine    var list = new List<T>();Di2015NewLineDi2015NewLine    foreach(var item in source)Di2015NewLine    {Di2015NewLine        if (selector.Invoke(item))Di2015NewLine        {Di2015NewLine            list.Add(item);Di2015NewLine        }Di2015NewLine        else if (list.Count > 0)Di2015NewLine        {Di2015NewLine            yield return list;Di2015NewLine            list = new List<T>();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    if (list.Count > 0)Di2015NewLine        yield return list;Di2015NewLine}Di2015NewLine
568770Di2015UniqueSeparatorSkipWhile
568770Di2015UniqueSeparatorTakeWhile
568892Di2015UniqueSeparator/^((https?\\:\\/\\/)?([\\w\\d\\-]+\\.){2,}([\\w\\d]{2,})((\\/[\\w\\d\\-\\.]+)*(\\/[\\w\\d\\-]+\\.[\\w\\d]{3,4}(\\?.*)?)?)?)$/Di2015NewLine
568976Di2015UniqueSeparatorPublic Class UserImpersonationDi2015NewLineDi2015NewLine    Private Declare Auto Function LogonUser Lib "advapi32.dll" (ByVal lpszUsername As [String], _Di2015NewLine        ByVal lpszDomain As [String], ByVal lpszPassword As [String], _Di2015NewLine        ByVal dwLogonType As Integer, ByVal dwLogonProvider As Integer, _Di2015NewLine        ByRef phToken As IntPtr) As BooleanDi2015NewLineDi2015NewLine    <DllImport("kernel32.dll")> _Di2015NewLine    Private Shared Function FormatMessage(ByVal dwFlags As Integer, ByRef lpSource As IntPtr, _Di2015NewLine        ByVal dwMessageId As Integer, ByVal dwLanguageId As Integer, ByRef lpBuffer As [String], _Di2015NewLine        ByVal nSize As Integer, ByRef Arguments As IntPtr) As IntegerDi2015NewLineDi2015NewLine    End FunctionDi2015NewLineDi2015NewLine    Private Declare Auto Function CloseHandle Lib "kernel32.dll" (ByVal handle As IntPtr) As BooleanDi2015NewLineDi2015NewLine    Private Declare Auto Function DuplicateToken Lib "advapi32.dll" (ByVal ExistingTokenHandle As IntPtr, _Di2015NewLine            ByVal SECURITY_IMPERSONATION_LEVEL As Integer, _Di2015NewLine            ByRef DuplicateTokenHandle As IntPtr) As BooleanDi2015NewLineDi2015NewLine    <PermissionSetAttribute(SecurityAction.Demand, Name:="FullTrust")> _Di2015NewLine    Public Shared Function ImpersonateUser(ByVal strDomain As String, ByVal strUserid As String, ByVal strPassword As String) As WindowsImpersonationContextDi2015NewLineDi2015NewLine        Dim tokenHandle As New IntPtr(0)Di2015NewLine        Dim dupeTokenHandle As New IntPtr(0)Di2015NewLineDi2015NewLine        TryDi2015NewLine            ' Get the user token for the specified user, domain, and password using the Di2015NewLine            ' unmanaged LogonUser method.  Di2015NewLine            ' The local machine name can be used for the domain name to impersonate a user on this machine.Di2015NewLineDi2015NewLine            Const LOGON32_PROVIDER_DEFAULT As Integer = 0Di2015NewLine            'This parameter causes LogonUser to create a primary token.Di2015NewLine            Const LOGON32_LOGON_INTERACTIVE As Integer = 2Di2015NewLineDi2015NewLine            tokenHandle = IntPtr.ZeroDi2015NewLineDi2015NewLine            ' Call LogonUser to obtain a handle to an access token.Di2015NewLine            Dim returnValue As Boolean = LogonUser(strUserid, strDomain, strPassword, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle)Di2015NewLineDi2015NewLine            If returnValue = False ThenDi2015NewLine                Dim ret As Integer = Marshal.GetLastWin32Error()Di2015NewLine                Throw New System.ComponentModel.Win32Exception(ret)Di2015NewLine            ElseDi2015NewLine                ' Use the token handle returned by LogonUser.Di2015NewLine                Dim newId As New WindowsIdentity(tokenHandle)Di2015NewLine                Dim ImpersonatedUser As WindowsImpersonationContext = newId.Impersonate()Di2015NewLineDi2015NewLine                Return ImpersonatedUserDi2015NewLine            End IfDi2015NewLineDi2015NewLine        Catch ex As ExceptionDi2015NewLine            Console.WriteLine("UserImpersonation.impersonateUser Exception Occurred: " + ex.Message)Di2015NewLineDi2015NewLine            Return NothingDi2015NewLine        End TryDi2015NewLineDi2015NewLine        ' Free the tokens.Di2015NewLine        If Not System.IntPtr.op_Equality(tokenHandle, IntPtr.Zero) ThenDi2015NewLine            CloseHandle(tokenHandle)Di2015NewLine        End IfDi2015NewLine    End FunctionDi2015NewLineDi2015NewLineDi2015NewLine    Public Shared Function UndoImpersonate(ByVal WIC As WindowsImpersonationContext) As BooleanDi2015NewLine        TryDi2015NewLine            ' Stop impersonating the user.Di2015NewLine            WIC.Undo()Di2015NewLineDi2015NewLine            Return TrueDi2015NewLine        Catch ex As ExceptionDi2015NewLine            Console.WriteLine(("Exception occurred. " + ex.Message))Di2015NewLineDi2015NewLine            Return FalseDi2015NewLine        End TryDi2015NewLineDi2015NewLine    End FunctionDi2015NewLineEnd ClassDi2015NewLine
568981Di2015UniqueSeparatorsplit()
568981Di2015UniqueSeparator1,"Something, with a comma",2,3Di2015NewLine
568981Di2015UniqueSeparatorsplit()
568981Di2015UniqueSeparatorsplit()
568981Di2015UniqueSeparatorreplaceAll()
568981Di2015UniqueSeparatorreplaceAll()
569076Di2015UniqueSeparatorswitch(SomeTest)Di2015NewLine{Di2015NewLine    // specific stuffDi2015NewLine}Di2015NewLineDi2015NewLine// code you want running for every caseDi2015NewLine
569076Di2015UniqueSeparatorswitch(SomeTest)Di2015NewLine{Di2015NewLine    // specific stuffDi2015NewLine}Di2015NewLineDi2015NewLineswitch(SomeTest)Di2015NewLine{Di2015NewLine    case "Test1", "Test2", "Test3":Di2015NewLine        // stuff for the matching casesDi2015NewLine}Di2015NewLine
569076Di2015UniqueSeparatorbool runGenericStuff = true;Di2015NewLineDi2015NewLineswitch(SomeTest)Di2015NewLine{Di2015NewLine    // specific stuffDi2015NewLine    default:Di2015NewLine        runGenericStuff = false;Di2015NewLine}Di2015NewLineDi2015NewLineif (runGenericStuff)Di2015NewLine{Di2015NewLine    // run generic stuffDi2015NewLine}Di2015NewLine
569202Di2015UniqueSeparator    IHttpHandler pageInstance = PageParser.GetCompiledPageInstance(viewPath, physicalPath, HttpContext);Di2015NewLine    pageInstance.ProcessRequest(HttpContext);Di2015NewLine
569211Di2015UniqueSeparatorprotected override void OnPaintBackground(PaintEventArgs e)Di2015NewLine{Di2015NewLine    if (TabRenderer.IsSupported && Application.RenderWithVisualStyles)Di2015NewLine    {Di2015NewLine        TabRenderer.DrawTabPage(pe.Graphics, this.ClientRectangle);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        base.OnPaintBackground(pe);Di2015NewLine        ControlPaint.DrawBorder3D(pe.Graphics, this.ClientRectangle, Border3DStyle.Raised);Di2015NewLine    }Di2015NewLine}Di2015NewLine
569267Di2015UniqueSeparatorpublic static bool TryParse( string text, out int number ) { .... }Di2015NewLineDi2015NewLineMethodInfo method = GetTryParseMethodInfo();Di2015NewLineobject[] parameters = new object[]{ "12345", null }Di2015NewLineobject result = method.Invoke( null, parameters );Di2015NewLinebool blResult = (bool)result;Di2015NewLineif ( blResult ) {Di2015NewLine    int parsedNumber = parameters[1];Di2015NewLine}Di2015NewLine
569338Di2015UniqueSeparatorprivate void Form1_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Control & e.KeyCode == Keys.C)Di2015NewLine    {Di2015NewLine        MessageBox.Show( "Ctrl + C pressed" );Di2015NewLine        // Swallow key event, i.e. indicate that it was handled.Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
569338Di2015UniqueSeparatorpublic class KeyDownMessageFilter : IMessageFilterDi2015NewLine{Di2015NewLine    public const int WM_KEYDOWN = 0x0100;Di2015NewLineDi2015NewLine    public bool PreFilterMessage(ref Message m)Di2015NewLine    {Di2015NewLine        if (m.Msg == WM_KEYDOWN)Di2015NewLine        {Di2015NewLine            // Key DownDi2015NewLine            return true; // Event handledDi2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
569541Di2015UniqueSeparatorpublic partial class FrmPrincipal : FormDi2015NewLine{Di2015NewLine    private string token;Di2015NewLineDi2015NewLine    public FrmPrincipal()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        ...Di2015NewLine    }Di2015NewLineDi2015NewLine    private void menuItem1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        int width = Width;Di2015NewLine        int height = Height;Di2015NewLine        Thread t = new Thread(() => RequestImage(width, height));Di2015NewLine        t.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RequestImage(int width, int height)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            ...Di2015NewLineDi2015NewLine            int alto = height;Di2015NewLine            int ancho = width;Di2015NewLine            this.token = "...";Di2015NewLineDi2015NewLine            ...Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            ...Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
569554Di2015UniqueSeparatoras
569554Di2015UniqueSeparatorInvalidCastException
569554Di2015UniqueSeparatorNullReferenceException 
569554Di2015UniqueSeparatoras
569554Di2015UniqueSeparatorGetType()
569630Di2015UniqueSeparatorcsc
569630Di2015UniqueSeparatorServiceBase
569630Di2015UniqueSeparatorMain()
569630Di2015UniqueSeparatorServiceBase.Run(yourService)
569630Di2015UniqueSeparatorServiceBase.OnStart
569630Di2015UniqueSeparatorMain()
569630Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ServiceProcess;Di2015NewLineDi2015NewLinenamespace CronDi2015NewLine{Di2015NewLine    static class ProgramDi2015NewLine    {Di2015NewLine        /// <summary>Di2015NewLine        /// The main entry point for the application.Di2015NewLine        /// </summary>Di2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            System.ServiceProcess.ServiceBase.Run(new CronService());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
569630Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ServiceProcess;Di2015NewLineDi2015NewLinenamespace CronDi2015NewLine{Di2015NewLine    public class CronService : ServiceBaseDi2015NewLine    {Di2015NewLine        public CronService()Di2015NewLine        {Di2015NewLine            this.ServiceName = "Cron";Di2015NewLine            this.CanStop = true;Di2015NewLine            this.CanPauseAndContinue = false;Di2015NewLine            this.AutoLog = true;Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnStart(string[] args)Di2015NewLine        {Di2015NewLine           // TODO: add startup stuffDi2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnStop()Di2015NewLine        {Di2015NewLine           // TODO: add shutdown stuffDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
569630Di2015UniqueSeparatorusing System.ComponentModel;Di2015NewLineusing System.Configuration.Install;Di2015NewLineusing System.ServiceProcess;Di2015NewLineDi2015NewLine[RunInstaller(true)]Di2015NewLinepublic class CronInstaller : InstallerDi2015NewLine{Di2015NewLine  private ServiceProcessInstaller processInstaller;Di2015NewLine  private ServiceInstaller serviceInstaller;Di2015NewLineDi2015NewLine  public CronInstaller()Di2015NewLine  {Di2015NewLine    processInstaller = new ServiceProcessInstaller();Di2015NewLine    serviceInstaller = new ServiceInstaller();Di2015NewLineDi2015NewLine    processInstaller.Account = ServiceAccount.LocalSystem;Di2015NewLine    serviceInstaller.StartType = ServiceStartMode.Manual;Di2015NewLine    serviceInstaller.ServiceName = "Cron"; //must match CronService.ServiceNameDi2015NewLineDi2015NewLine    Installers.Add(serviceInstaller);Di2015NewLine    Installers.Add(processInstaller);Di2015NewLine  } Di2015NewLine}  Di2015NewLine
569630Di2015UniqueSeparatorcron.exe /install
569630Di2015UniqueSeparatorInstallUtil
569630Di2015UniqueSeparatorInstallUtil /LogToConsole=true cron.exeDi2015NewLine
569646Di2015UniqueSeparator<Button x:Name="ButtonAccessoryAddToMemoryList" Tag="{Binding}" Click="buttonAccessoryAddToMemoryList_Click" ... >Minneslista</Button>Di2015NewLine
569646Di2015UniqueSeparatorprivate void ButtonAccessoryAddToMemoryList(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    Button b = e.Source as Button;Di2015NewLine    Accessory a = b.Tag as Accessory;Di2015NewLine
569716Di2015UniqueSeparatorQueryable.Union
569716Di2015UniqueSeparatorOrElse
569716Di2015UniqueSeparator    using(var ctx = new DataClasses1DataContext())Di2015NewLine    {Di2015NewLine        ctx.Log = Console.Out;Di2015NewLine        Expression<Func<Customer, bool>> lhs =Di2015NewLine            x => x.Country == "UK";Di2015NewLine        Expression<Func<Customer, bool>> rhs =Di2015NewLine            x => x.ContactName.StartsWith("A");Di2015NewLineDi2015NewLine        var arr1 = ctx.Customers.Where(Di2015NewLine            lhs.OrElse(rhs)).ToArray();Di2015NewLineDi2015NewLine        var arr2 = ctx.Customers.Where(lhs)Di2015NewLine            .Union(ctx.Customers.Where(rhs)).ToArray();Di2015NewLine    }Di2015NewLine
569716Di2015UniqueSeparatorarr1
569716Di2015UniqueSeparatorarr2
569716Di2015UniqueSeparatorOR
569716Di2015UniqueSeparatorWHERE
569716Di2015UniqueSeparatorUNION
569716Di2015UniqueSeparatorstatic Expression<Func<T, bool>> OrElse<T>(Di2015NewLine    this Expression<Func<T, bool>> lhs,Di2015NewLine    Expression<Func<T, bool>> rhs)Di2015NewLine{Di2015NewLine    var row = Expression.Parameter(typeof(T), "row");Di2015NewLine    var body = Expression.OrElse(Di2015NewLine        Expression.Invoke(lhs, row),Di2015NewLine        Expression.Invoke(rhs, row));Di2015NewLine    return Expression.Lambda<Func<T, bool>>(body, row);Di2015NewLine}Di2015NewLine
569727Di2015UniqueSeparatorprivate void CombineMultiplePDFs( string[] fileNames, string outFile ) {Di2015NewLine\int pageOffset = 0;Di2015NewLine\ArrayList master = new ArrayList();Di2015NewLine\int f = 0;Di2015NewLineDi2015NewLine\Document document = null;Di2015NewLine\PdfCopy writer = null;Di2015NewLine\while ( f < fileNames.Length ) {Di2015NewLine\\// we create a reader for a certain documentDi2015NewLine\\PdfReader reader = new PdfReader( fileNames[ f ] );Di2015NewLine\\reader.ConsolidateNamedDestinations();Di2015NewLine\\// we retrieve the total number of pagesDi2015NewLine\\int n = reader.NumberOfPages;Di2015NewLine\\ArrayList bookmarks = SimpleBookmark.GetBookmark( reader );Di2015NewLine\\if ( bookmarks != null ) {Di2015NewLine\\\if ( pageOffset != 0 ) {Di2015NewLine\\\\SimpleBookmark.ShiftPageNumbers( bookmarks, pageOffset, null );Di2015NewLine\\\}Di2015NewLine\\\master.AddRange( bookmarks );Di2015NewLine\\}Di2015NewLine\\pageOffset += n;Di2015NewLineDi2015NewLine\\if ( f == 0 ) {Di2015NewLine\\\// step 1: creation of a document-objectDi2015NewLine\\\document = new Document( reader.GetPageSizeWithRotation( 1 ) );Di2015NewLine\\\// step 2: we create a writer that listens to the documentDi2015NewLine\\\writer = new PdfCopy( document, new FileStream( outFile, FileMode.Create ) );Di2015NewLine\\\// step 3: we open the documentDi2015NewLine\\\document.Open();Di2015NewLine\\}Di2015NewLine\\// step 4: we add contentDi2015NewLine\\for ( int i = 0; i < n; ) {Di2015NewLine\\\++i;Di2015NewLine\\\if ( writer != null ) {Di2015NewLine\\\\PdfImportedPage page = writer.GetImportedPage( reader, i );Di2015NewLine\\\\writer.AddPage( page );Di2015NewLine\\\}Di2015NewLine\\}Di2015NewLine\\PRAcroForm form = reader.AcroForm;Di2015NewLine\\if ( form != null && writer != null ) {Di2015NewLine\\\writer.CopyAcroForm( reader );Di2015NewLine\\}Di2015NewLine\\f++;Di2015NewLine\}Di2015NewLine\if ( master.Count > 0 && writer != null ) {Di2015NewLine\\writer.Outlines = master;Di2015NewLine\}Di2015NewLine\// step 5: we close the documentDi2015NewLine\if ( document != null ) {Di2015NewLine\\document.Close();Di2015NewLine\}Di2015NewLine}Di2015NewLine
569920Di2015UniqueSeparatorPair<TFirst, TSecond>
569920Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineDi2015NewLinepublic sealed class Pair<TFirst, TSecond>Di2015NewLine    : IEquatable<Pair<TFirst, TSecond>>Di2015NewLine{Di2015NewLine    private readonly TFirst first;Di2015NewLine    private readonly TSecond second;Di2015NewLineDi2015NewLine    public Pair(TFirst first, TSecond second)Di2015NewLine    {Di2015NewLine        this.first = first;Di2015NewLine        this.second = second;Di2015NewLine    }Di2015NewLineDi2015NewLine    public TFirst FirstDi2015NewLine    {Di2015NewLine        get { return first; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public TSecond SecondDi2015NewLine    {Di2015NewLine        get { return second; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Equals(Pair<TFirst, TSecond> other)Di2015NewLine    {Di2015NewLine        if (other == null)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        return EqualityComparer<TFirst>.Default.Equals(this.First, other.First) &&Di2015NewLine               EqualityComparer<TSecond>.Default.Equals(this.Second, other.Second);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool Equals(object o)Di2015NewLine    {Di2015NewLine        return Equals(o as Pair<TFirst, TSecond>);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        return EqualityComparer<TFirst>.Default.GetHashCode(first) * 37 +Di2015NewLine               EqualityComparer<TSecond>.Default.GetHashCode(second);Di2015NewLine    }Di2015NewLine}Di2015NewLine
569943Di2015UniqueSeparatorpublic static string Surround(Di2015NewLine    string original, string head, string tail, string match)Di2015NewLine{Di2015NewLine    return Regex.Replace(Di2015NewLine        original, match, head + "$0" + tail, RegexOptions.IgnoreCase);Di2015NewLine}Di2015NewLine
569943Di2015UniqueSeparatorpublic static string Surround(string original, string replacer, string match)Di2015NewLine{Di2015NewLine    return Regex.Replace(original, match, replacer, RegexOptions.IgnoreCase);Di2015NewLine}Di2015NewLineDi2015NewLineSurround("foo bar baz", "<span>$&</span>", "bar");  //call like soDi2015NewLine
569986Di2015UniqueSeparatorFormProject::Form1^ form1;Di2015NewLineform1 = gcnew FormProject::Form1::Form1();  // or FormProject::Form1()Di2015NewLineform1->something();Di2015NewLine
569994Di2015UniqueSeparatorpublic abstract class Platform { public abstract string Newline { get; } }Di2015NewLineDi2015NewLinepublic sealed class Unix : Platform {Di2015NewLine    public override string Newline { get { return "\\n"; } }Di2015NewLine}Di2015NewLine
570124Di2015UniqueSeparatorpublic static IEnumerable<T> SelectByParameterList<T, PropertyType>(this Table<T> items, IEnumerable<PropertyType> parameterList, Expression<Func<T, PropertyType>> propertySelector, int blockSize) where T : classDi2015NewLine{Di2015NewLine    var groups = parameterListDi2015NewLine    \.Select((Parameter, index) =>Di2015NewLine    \\newDi2015NewLine    \\{Di2015NewLine    \\\GroupID = index / blockSize, //# of parameters per requestDi2015NewLine    \\\ParameterDi2015NewLine    \\}Di2015NewLine    \)Di2015NewLine    \.GroupBy(x => x.GroupID)Di2015NewLine    \.AsEnumerable();Di2015NewLineDi2015NewLine    var selector = LinqKit.Linq.Expr(propertySelector);Di2015NewLineDi2015NewLine    var results = groupsDi2015NewLine    .Select(g => new { Group = g, Parameters = g.Select(x => x.Parameter) } )Di2015NewLine    .SelectMany(g => Di2015NewLine    \/* AsExpandable() extension method requires LinqKit DLL */Di2015NewLine    \items.AsExpandable().Where(item => g.Parameters.Contains(selector.Invoke(item)))Di2015NewLine    );Di2015NewLineDi2015NewLine    return results;Di2015NewLine}Di2015NewLine
570124Di2015UniqueSeparator    Guid[] local_refill_ids = Refills.Select(r => r.Id).Take(20).ToArray();Di2015NewLineDi2015NewLine    IEnumerable<Refill> results = Refills.SelectByParameterList(local_refill_ids, r => r.Id, 10); //runs 2 SQL queries with 10 parameters eachDi2015NewLine
570130Di2015UniqueSeparatorUniqueID
570130Di2015UniqueSeparatorControl.ID
570130Di2015UniqueSeparatorctlxx
570130Di2015UniqueSeparatorUniqueID
570130Di2015UniqueSeparatorID
570130Di2015UniqueSeparatorUniqueID
570130Di2015UniqueSeparatorUniqueID
570130Di2015UniqueSeparatorID
570176Di2015UniqueSeparatorprivate string token {Di2015NewLine  [MethodImpl(MethodImplOptions.Synchronized)] get;Di2015NewLine  [MethodImpl(MethodImplOptions.Synchronized)] set;Di2015NewLine}Di2015NewLine
570269Di2015UniqueSeparatorm_dt
570269Di2015UniqueSeparatorCOleDateTime
570269Di2015UniqueSeparatorFromOADate
570269Di2015UniqueSeparatorDateTime
570269Di2015UniqueSeparatorDateTime
570306Di2015UniqueSeparator  protected override void RenderContents(HtmlTextWriter output)Di2015NewLine    {Di2015NewLine        ddlCountries.RenderControl(output);Di2015NewLine        ddlStates.RenderControl(output);Di2015NewLine    }Di2015NewLine
570306Di2015UniqueSeparatorControls.Add ( ddlCountries );Di2015NewLineControls.Add ( ddlStates );Di2015NewLine
570316Di2015UniqueSeparatorPost()Di2015NewLinePostRepository : IPostRepositoryDi2015NewLineDi2015NewLineComment()Di2015NewLineCommentRepository : ICommentRepositoryDi2015NewLine
570316Di2015UniqueSeparatorPost.AddComment()Di2015NewLinePost.FetchComments()Di2015NewLinePost.DeleteComments(IList<Comment> comments)Di2015NewLine
570316Di2015UniqueSeparatorICommentRepository.AddByPostID()Di2015NewLineICommentRepository.FetchByPostID()Di2015NewLineICommentRepository.Remove(int commentID)Di2015NewLine
570316Di2015UniqueSeparatorprivate ICommentRepository _commentRepo;Di2015NewLineDi2015NewLinepublic class PostDi2015NewLine{Di2015NewLine  public Post(ICommentRepository commentRepo)Di2015NewLine  {Di2015NewLine    // Or you can remove this forced-injection and use a Di2015NewLine    // "Service Locator" to wire it up internall.Di2015NewLine    _commentRepo = commentRepo;Di2015NewLine  }Di2015NewLineDi2015NewLine  public int PostID { get; set; }Di2015NewLineDi2015NewLine  public void DeleteComments(IList<Comment> comments)Di2015NewLine  {Di2015NewLine    // put your logic here to "lookup what has been deleted"Di2015NewLine    // and then call ICommentRepository.Delete() in the loop.Di2015NewLineDi2015NewLine    _commentRepo.Remove(commentID);Di2015NewLine  }Di2015NewLine}Di2015NewLine
570461Di2015UniqueSeparatorTcpClient
570461Di2015UniqueSeparatorIPGlobalProperties
570461Di2015UniqueSeparatorTcpConnectionInformation
570461Di2015UniqueSeparator int port = 456; //<--- This is your valueDi2015NewLine bool isAvailable = true;Di2015NewLineDi2015NewLine // Evaluate current system tcp connections. This is the same information providedDi2015NewLine // by the netstat command line application, just in .Net strongly-typed objectDi2015NewLine // form.  We will look through the list, and if our port we would like to useDi2015NewLine // in our TcpClient is occupied, we will set isAvailable to false.Di2015NewLine IPGlobalProperties ipGlobalProperties = IPGlobalProperties.GetIPGlobalProperties();Di2015NewLine TcpConnectionInformation[] tcpConnInfoArray = ipGlobalProperties.GetActiveTcpConnections();Di2015NewLineDi2015NewLine foreach (TcpConnectionInformation tcpi in tcpConnInfoArray)Di2015NewLine {Di2015NewLine   if (tcpi.LocalEndPoint.Port==port)Di2015NewLine   {Di2015NewLine     isAvailable = false;Di2015NewLine     break;Di2015NewLine   }Di2015NewLine }Di2015NewLineDi2015NewLine // At this point, if isAvailable is true, we can proceed accordingly.Di2015NewLine
570493Di2015UniqueSeparatorref
570588Di2015UniqueSeparatorpublic override bool Equals (object obj)Di2015NewLine{Di2015NewLine    return Equals(obj as Point2);Di2015NewLine}Di2015NewLineDi2015NewLinepublic bool Equals (Point2 obj)Di2015NewLine{Di2015NewLine    // STEP 1: Check for null if nullable (e.g., a reference type)Di2015NewLine    // Note use of ReferenceEquals in case you overload ==.Di2015NewLine    if (object.ReferenceEquals(obj, null))Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    // STEP 2: Check for ReferenceEquals if this is a reference typeDi2015NewLine    // Skip this or not? With only two fields to check, it's probablyDi2015NewLine    // not worth it. If the later checks are costly, it could be.Di2015NewLine    if (object.ReferenceEquals( this, obj))Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    // STEP 4: Possibly check for equivalent hash codesDi2015NewLine    // Skipped in this case: would be *less* efficientDi2015NewLineDi2015NewLine    // STEP 5: Check base.Equals if base overrides Equals()Di2015NewLine    // Skipped in this caseDi2015NewLineDi2015NewLine    // STEP 6: Compare identifying fields for equality.Di2015NewLine    // In this case I'm using == instead of Equals for brevityDi2015NewLine    // - assuming X and Y are of a type which overloads ==.Di2015NewLine    return this.X == obj.X && this.Y == obj.Y;Di2015NewLine}Di2015NewLine
570595Di2015UniqueSeparatorSystem.Runtime.Serialization.Formatters.Binary.BinaryFormatter
570595Di2015UniqueSeparatorBinaryFormatter bf = new BinaryFormatter();Di2015NewLinebf.Serialize(outputStream, objectToSerialize);Di2015NewLineDi2015NewLineobjectToDeserialize = bf.Deserialize(inputStream) as DeserializedType;Di2015NewLine
570606Di2015UniqueSeparatorprivate void MyMethod<TItem>() where TItem : ApiClassDi2015NewLine{Di2015NewLine    IEnumerable<TItem> enumX = ObjectGetEnum<TItem>();Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void Main()Di2015NewLine{Di2015NewLine    MyMethod<ApiClass1>();Di2015NewLine    MyMethod<ApiClass2>();Di2015NewLine}Di2015NewLine
570627Di2015UniqueSeparatore.X
570627Di2015UniqueSeparatore.Y
570627Di2015UniqueSeparatorimagenMapa.Left
570627Di2015UniqueSeparatorimagenMapa.Top
570627Di2015UniqueSeparatorimagenMapa
570627Di2015UniqueSeparatorimagenMapa.PointToScreen
570627Di2015UniqueSeparatorCursor.Position
570627Di2015UniqueSeparatoryourForm.PointToClient
570627Di2015UniqueSeparatorPaint
570627Di2015UniqueSeparatorgraphicsObject.DrawImage
570897Di2015UniqueSeparatorprivate void yourControl_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine   if((e.KeyCode == Keys.D5) && e.Shift)Di2015NewLine   {Di2015NewLine      // User pressed '%' ...Di2015NewLine   }Di2015NewLine}Di2015NewLine
570897Di2015UniqueSeparatorprivate void yourControl_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    switch(e.KeyCode)Di2015NewLine    {Di2015NewLine        //... Di2015NewLine        case Keys.D5:Di2015NewLine            if(e.Shift)Di2015NewLine            {Di2015NewLine                // Handle '%'Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // Handle '5'Di2015NewLine            }Di2015NewLine            break;Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
571108Di2015UniqueSeparatorvoid listView_ItemCreated(object sender, ListViewItemEventArgs e)Di2015NewLine{Di2015NewLine\// exit if we have already selected an item; This is mainly helpful forDi2015NewLine\// postbacks, and will also serve to stop processing once we've found ourDi2015NewLine\// key; Optionally we could remove the ItemCreated event from the ListView Di2015NewLine\// here instead of just returning.Di2015NewLine\if ( listView.SelectedIndex > -1 ) return; Di2015NewLineDi2015NewLine\ListViewDataItem item = e.Item as ListViewDataItem;Di2015NewLine\// check to see if the item is the one we want to select (arbitrary) just return true if you want it selectedDi2015NewLine\if (DoSelectDataItem(item)==true)Di2015NewLine\{Di2015NewLine\\// setting the SelectedIndex is all we really need to do unless Di2015NewLine\\// we want to change the template the item will use to render;Di2015NewLine\\listView.SelectedIndex = item.DisplayIndex;Di2015NewLine\\if ( listView.SelectedItemTemplate != null )Di2015NewLine\\{Di2015NewLine\\\// Unfortunately ListView has already a selected a template to use;Di2015NewLine\\\// so clear that outDi2015NewLine\\\e.Item.Controls.Clear();Di2015NewLine\\\// intantiate the SelectedItemTemplate in our item;Di2015NewLine\\\// ListView will DataBind it for us later after ItemCreated has finished!Di2015NewLine\\\listView.SelectedItemTemplate.InstantiateIn(e.Item);Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLinebool DoSelectDataItem(ListViewDataItem item)Di2015NewLine{Di2015NewLine\return item.DisplayIndex == 0; // selects the first item in the list (this is just an example after all; keeping it simple :D )Di2015NewLine}Di2015NewLine
571118Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Data; Di2015NewLineusing System.Data.OleDb; Di2015NewLineusing SpreadsheetGear;Di2015NewLineusing SpreadsheetGear.Advanced.Cells;Di2015NewLineusing System.Diagnostics;Di2015NewLineDi2015NewLinenamespace SpreadsheetGearAndOleDBBenchmarkDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            // Warm up (get the code JITed).Di2015NewLine            BM(10, 10);Di2015NewLineDi2015NewLine            // Do it for real.Di2015NewLine            BM(50000, 10);Di2015NewLine        }Di2015NewLineDi2015NewLine        static void BM(int rows, int cols)Di2015NewLine        {Di2015NewLine            // Compare the performance of OleDB to SpreadsheetGear for readingDi2015NewLine            // workbooks. We sum numbers just to have something to do.Di2015NewLine            //Di2015NewLine            // Run on Windows Vista 32 bit, Visual Studio 2008, Release Build,Di2015NewLine            // Run Without Debugger:Di2015NewLine            //  Create time: 0.25 secondsDi2015NewLine            //  OleDb Time: 0.63 secondsDi2015NewLine            //  SpreadsheetGear Time: 0.31 secondsDi2015NewLine            //Di2015NewLine            // SpreadsheetGear is more than twice as fast at reading. Furthermore,Di2015NewLine            // SpreadsheetGear can create the file and read it faster than OleDBDi2015NewLine            // can just read it.Di2015NewLine            string filename = @"C:\\tmp\\SpreadsheetGearOleDbBenchmark.xls";Di2015NewLine            Console.WriteLine("\\nCreating {0} rows x {1} columns", rows, cols);Di2015NewLine            Stopwatch timer = Stopwatch.StartNew();Di2015NewLine            double createSum = CreateWorkbook(filename, rows, cols);Di2015NewLine            double createTime = timer.Elapsed.TotalSeconds;Di2015NewLine            Console.WriteLine("Create sum of {0} took {1} seconds.", createSum, createTime);Di2015NewLine            timer = Stopwatch.StartNew();Di2015NewLine            double oleDbSum = ReadWithOleDB(filename);Di2015NewLine            double oleDbTime = timer.Elapsed.TotalSeconds;Di2015NewLine            Console.WriteLine("OleDb sum of {0} took {1} seconds.", oleDbSum, oleDbTime);Di2015NewLine            timer = Stopwatch.StartNew();Di2015NewLine            double spreadsheetGearSum = ReadWithSpreadsheetGear(filename);Di2015NewLine            double spreadsheetGearTime = timer.Elapsed.TotalSeconds;Di2015NewLine            Console.WriteLine("SpreadsheetGear sum of {0} took {1} seconds.", spreadsheetGearSum, spreadsheetGearTime);Di2015NewLine        }Di2015NewLineDi2015NewLine        static double CreateWorkbook(string filename, int rows, int cols)Di2015NewLine        {Di2015NewLine            IWorkbook workbook = Factory.GetWorkbook();Di2015NewLine            IWorksheet worksheet = workbook.Worksheets[0];Di2015NewLine            IValues values = (IValues)worksheet;Di2015NewLine            double sum = 0.0;Di2015NewLine            Random rand = new Random();Di2015NewLine            // Put labels in the first row.Di2015NewLine            foreach (IRange cell in worksheet.Cells[0, 0, 0, cols - 1])Di2015NewLine                cell.Value = "Cell-" + cell.Address;Di2015NewLine            // Using IRange and foreach be less code, Di2015NewLine            // but we'll do it the fast way.Di2015NewLine            for (int row = 1; row <= rows; row++)Di2015NewLine            {Di2015NewLine                for (int col = 0; col < cols; col++)Di2015NewLine                {Di2015NewLine                    double number = rand.NextDouble();Di2015NewLine                    sum += number;Di2015NewLine                    values.SetNumber(row, col, number);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            workbook.SaveAs(filename, FileFormat.Excel8);Di2015NewLine            return sum;Di2015NewLine        }Di2015NewLineDi2015NewLine        static double ReadWithSpreadsheetGear(string filename)Di2015NewLine        {Di2015NewLine            IWorkbook workbook = Factory.GetWorkbook(filename);Di2015NewLine            IWorksheet worksheet = workbook.Worksheets[0];Di2015NewLine            IValues values = (IValues)worksheet;Di2015NewLine            IRange usedRahge = worksheet.UsedRange;Di2015NewLine            int rowCount = usedRahge.RowCount;Di2015NewLine            int colCount = usedRahge.ColumnCount;Di2015NewLine            double sum = 0.0;Di2015NewLine            // We could use foreach (IRange cell in usedRange) for cleaner Di2015NewLine            // code, but this is faster.Di2015NewLine            for (int row = 1; row <= rowCount; row++)Di2015NewLine            {Di2015NewLine                for (int col = 0; col < colCount; col++)Di2015NewLine                {Di2015NewLine                    IValue value = values[row, col];Di2015NewLine                    if (value != null && value.Type == SpreadsheetGear.Advanced.Cells.ValueType.Number)Di2015NewLine                        sum += value.Number;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return sum;Di2015NewLine        }Di2015NewLineDi2015NewLine        static double ReadWithOleDB(string filename)Di2015NewLine        {Di2015NewLine            String connectionString =  Di2015NewLine                "Provider=Microsoft.Jet.OLEDB.4.0;" + Di2015NewLine                "Data Source=" + filename + ";" + Di2015NewLine                "Extended Properties=Excel 8.0;"; Di2015NewLine            OleDbConnection connection = new OleDbConnection(connectionString); Di2015NewLine            connection.Open(); Di2015NewLine            OleDbCommand selectCommand =new OleDbCommand("SELECT * FROM [Sheet1$]", connection); Di2015NewLine            OleDbDataAdapter dataAdapter = new OleDbDataAdapter(); Di2015NewLine            dataAdapter.SelectCommand = selectCommand; Di2015NewLine            DataSet dataSet = new DataSet(); Di2015NewLine            dataAdapter.Fill(dataSet); Di2015NewLine            connection.Close(); Di2015NewLine            double sum = 0.0;Di2015NewLine            // We'll make some assumptions for brevity of the code.Di2015NewLine            DataTable dataTable = dataSet.Tables[0];Di2015NewLine            int cols = dataTable.Columns.Count;Di2015NewLine            foreach (DataRow row in dataTable.Rows)Di2015NewLine            {Di2015NewLine                for (int i = 0; i < cols; i++)Di2015NewLine                {Di2015NewLine                    object val = row[i];Di2015NewLine                    if (val is double)Di2015NewLine                        sum += (double)val;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return sum;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
571119Di2015UniqueSeparatorIDisposable
571188Di2015UniqueSeparatorif (!System.ComponentModel.DesignerProperties.GetIsInDesignMode(this))Di2015NewLine{Di2015NewLine  using (var context = new Data.TVShowDataContext())Di2015NewLine  {Di2015NewLine    var list = from show in context.ShowsDi2015NewLine               select show;Di2015NewLineDi2015NewLine    listShow.ItemsSource = list;Di2015NewLine  }    Di2015NewLine}Di2015NewLine
571464Di2015UniqueSeparatorforeach (string item in TempFilesList)Di2015NewLine{Di2015NewLine    path = System.Web.HttpContext.Current.Application["baseWebDomainUrl"] + "/temp/" + item;Di2015NewLine    path = Server.MapPath(path);Di2015NewLine    fileDel = new FileInfo(path);Di2015NewLine    fileDel.Delete();Di2015NewLine}Di2015NewLine
571555Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Resources;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinepublic class MyClassDi2015NewLine{Di2015NewLine  enum SomeEnum {Small,Large};Di2015NewLineDi2015NewLine  private ResourceManager _resources = new ResourceManager("MyClass.myResources",Di2015NewLine                          System.Reflection.Assembly.GetExecutingAssembly());    Di2015NewLineDi2015NewLine  public string EnumDescription(Enum enumerator)Di2015NewLine  { \Di2015NewLine    string rk = String.Format("{0}.{1}",enumerator.GetType(),enumerator);Di2015NewLine    string localizedDescription = _resources.GetString(rk);Di2015NewLineDi2015NewLine    if (localizedDescription == null)Di2015NewLine       {Di2015NewLine       // A localized string was not found so you can either just returnDi2015NewLine       // the enums value - most likely readable and a good fallback.Di2015NewLine       return enumerator.ToString();Di2015NewLineDi2015NewLine       // Or you can return the full resourceKey which will be helpful whenDi2015NewLine       // editing the resource files(e.g. MyClass+SomeEnum.Small) Di2015NewLine       // return resourceKey;Di2015NewLine       }Di2015NewLine    elseDi2015NewLine       return localizedDescription;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine  void SomeRoutine()Di2015NewLine  {Di2015NewLine    // Looks in resource file for a string matching the keyDi2015NewLine    // "MyClass+SomeEnum.Large"Di2015NewLine    string s1 = EnumDescription(SomeEnum.Large);       Di2015NewLine  }Di2015NewLine}Di2015NewLine
571727Di2015UniqueSeparatorISynchronizeInvoke
571727Di2015UniqueSeparator// Extension method.Di2015NewLinestatic void SynchronizedInvoke(this ISynchronizeInvoke sync, Action action)Di2015NewLine{Di2015NewLine    // If the invoke is not required, then invoke here and get out.Di2015NewLine    if (!sync.InvokeRequired)Di2015NewLine    {Di2015NewLine        // Execute action.Di2015NewLine        action();Di2015NewLineDi2015NewLine        // Get out.Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Marshal to the required context.Di2015NewLine    sync.Invoke(action, new object[] { });Di2015NewLine}Di2015NewLine
571727Di2015UniqueSeparatorprivate void SetText(string text)Di2015NewLine{Di2015NewLine    textBox1.SynchronizedInvoke(() => textBox1.Text = text);Di2015NewLine}Di2015NewLine
571727Di2015UniqueSeparatortext
571727Di2015UniqueSeparatorAction
571727Di2015UniqueSeparatorstatic void SynchronizedInvoke(ISynchronizeInvoke sync, Action action)Di2015NewLine{Di2015NewLine    // If the invoke is not required, then invoke here and get out.Di2015NewLine    if (!sync.InvokeRequired)Di2015NewLine    {Di2015NewLine        // Execute action.Di2015NewLine        action();Di2015NewLineDi2015NewLine        // Get out.Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Marshal to the required context.Di2015NewLine    sync.Invoke(action, new object[] { });Di2015NewLine}Di2015NewLine
571727Di2015UniqueSeparatorprivate void SetText(string text)Di2015NewLine{Di2015NewLine    SynchronizedInvoke(textBox1, delegate() { textBox1.Text = text; });Di2015NewLine}Di2015NewLine
571979Di2015UniqueSeparator%property{}
571979Di2015UniqueSeparator<appender name="YourAppender" type="log4net.Appender.RollingFileAppender">Di2015NewLine  <file type="log4net.Util.PatternString" value="~/App_Data/%property{LogName}" />Di2015NewLine  ....Di2015NewLine</appender>Di2015NewLine
571979Di2015UniqueSeparatorLogName
571979Di2015UniqueSeparatorstring LogName = GetType().Assembly.GetName().Name + ".log";Di2015NewLinelog4net.GlobalContext.Properties["LogName"] = LogName;Di2015NewLine
571988Di2015UniqueSeparatorColor struct
571988Di2015UniqueSeparator PropertyInfo[] colors = typeof(Color).GetProperties(BindingFlags.Static|BindingFlags.Public);Di2015NewLine foreach(PropertyInfo pi in colors) {Di2015NewLine     Color c = (Color)pi.GetValue(null, null);Di2015NewLine     // do something here with the colorDi2015NewLine }Di2015NewLine
572012Di2015UniqueSeparatorextern "C" __declspec(dllexport) BOOL Install();Di2015NewLineextern "C" __declspec(dllexport) BOOL PPPConnect();Di2015NewLine
572012Di2015UniqueSeparator00000000 characteristicsDi2015NewLine499F6C2D time date stamp Fri Feb 20 20:51:25 2009Di2015NewLine    0.00 versionDi2015NewLine       1 ordinal baseDi2015NewLine       2 number of functionsDi2015NewLine       2 number of namesDi2015NewLineDi2015NewLineordinal hint RVA      nameDi2015NewLineDi2015NewLine      1    0 000110CD Install = @ILT+200(_Install)Di2015NewLine      2    1 00011069 PPPConnect = @ILT+100(_PPPConnect)Di2015NewLine
572152Di2015UniqueSeparatorCookieContainer cookieJar = new CookieContainer();Di2015NewLineHttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create("http://www.google.com");Di2015NewLinerequest.CookieContainer = cookieJar;Di2015NewLineDi2015NewLineHttpWebResponse response = (HttpWebResponse)request.GetResponse();Di2015NewLineint cookieCount = cookieJar.Count;Di2015NewLine
572152Di2015UniqueSeparatorcookieJar
572152Di2015UniqueSeparator1
572251Di2015UniqueSeparator<appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender,log4net">Di2015NewLine  <File type="log4net.Util.PatternString" value="App_Data/%property{LogName}" />Di2015NewLine  ...Di2015NewLine</appender>Di2015NewLine
572251Di2015UniqueSeparatorprivate static readonly log4net.ILog log = log4net.LogManager.GetLogger("Global.asax");Di2015NewLinevoid Application_Start(object sender, EventArgs e) Di2015NewLine{Di2015NewLine    // Set logfile name and application name variablesDi2015NewLine    log4net.GlobalContext.Properties["LogName"] = GetType().Assembly.GetName().Name + ".log";Di2015NewLine    log4net.GlobalContext.Properties["ApplicationName"] = GetType().Assembly.GetName().Name;Di2015NewLineDi2015NewLine    // Load log4net configurationDi2015NewLine    System.IO.FileInfo logfile = new System.IO.FileInfo(Server.MapPath("log4net.config"));Di2015NewLine    log4net.Config.XmlConfigurator.ConfigureAndWatch(logfile);Di2015NewLineDi2015NewLine    // Record application startupDi2015NewLine    log.Debug("Application startup");Di2015NewLine}Di2015NewLine
572325Di2015UniqueSeparatorkeybd_event(VK_CONTROL, 0, KEYEVENTF_KEYDOWN, 0);//press ctrlDi2015NewLinekeybd_event(0x41, 0, KEYEVENTF_KEYDOWN, 0);//hex 'A'Di2015NewLinekeybd_event(0x41, 0, KEYEVENTF_KEYUP, 0);//hex 'A'Di2015NewLinekeybd_event(VK_CONTROL, 0, KEYEVENTF_KEYUP, 0); //release ctrlDi2015NewLine
572665Di2015UniqueSeparatorif(field != null) { // or the event-name for field-like eventsDi2015NewLine    // or your own event-type in place of EventHandlerDi2015NewLine    foreach(EventHandler subscriber in field.GetInvocationList())Di2015NewLine    {Di2015NewLine        // etcDi2015NewLine    }Di2015NewLine}Di2015NewLine
572665Di2015UniqueSeparatorSomeType other = ...Di2015NewLineother.SomeEvent += localEvent;Di2015NewLine
572709Di2015UniqueSeparatorMainForm.cs
572709Di2015UniqueSeparatorpartial class MainForm : Form // this is MainForm.csDi2015NewLine{Di2015NewLine    // This is the method VS generates when you double-click the buttonDi2015NewLine    private void clearButton_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.Cursor = Cursors.WaitCursor;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            ClearForm();Di2015NewLine        }Di2015NewLine        catch(Exception ex)Di2015NewLine        {Di2015NewLine            // ... have here code to log the exception to a file Di2015NewLine            // and/or showing a message box to the userDi2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            this.Cursor = Cursors.Default;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ClearForm()Di2015NewLine    {Di2015NewLine        // clear all your controls hereDi2015NewLine        myTextBox.Clear();Di2015NewLine        myComboBox.SelectedIndex = 0;Di2015NewLine        // etc...Di2015NewLine    }Di2015NewLine}Di2015NewLine
572709Di2015UniqueSeparatorMainForm.cs
572709Di2015UniqueSeparatorClearForm
572709Di2015UniqueSeparatorClearForm
572709Di2015UniqueSeparatorpublic class FormCleaner // this is FormCleaner.csDi2015NewLine{Di2015NewLine    public void ClearForm(MainForm form)Di2015NewLine    {Di2015NewLine        // clear all your controls hereDi2015NewLine        form.myTextBox.Clear();Di2015NewLine        form.myComboBox.SelectedIndex = 0;Di2015NewLine        // etc...Di2015NewLine    }Di2015NewLine}Di2015NewLine
572709Di2015UniqueSeparatorpartial class MainForm : Form // this is MainForm.csDi2015NewLine{Di2015NewLine    // This is the method VS generates when you double-click the buttonDi2015NewLine    private void clearButton_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.Cursor = Cursors.WaitCursor;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            FormCleaner cleaner = new FormCleaner();Di2015NewLine            cleaner.ClearForm(this);Di2015NewLine        }Di2015NewLine        catch(Exception ex)Di2015NewLine        {Di2015NewLine            // ... have here code to log the exception to a file Di2015NewLine            // and/or showing a message box to the userDi2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            this.Cursor = Cursors.Default;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
572709Di2015UniqueSeparatorFormCleaner
572709Di2015UniqueSeparatorMainForm
572709Di2015UniqueSeparatorControls
572709Di2015UniqueSeparatorpublic class FormCleaner // this is FormCleaner.csDi2015NewLine{Di2015NewLine    // 'generic' form cleanerDi2015NewLine    public void ClearForm(Form form)Di2015NewLine    {Di2015NewLine        foreach(Control control on form.Controls)Di2015NewLine        {Di2015NewLine            // this will probably not work ok, because alsoDi2015NewLine            // static controls like Labels will have their text removed.Di2015NewLine            control.Text = "";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
572709Di2015UniqueSeparatorMainForm.Designer.cs
572863Di2015UniqueSeparatorJclExprEval
572863Di2015UniqueSeparatorJclExprEval
572863Di2015UniqueSeparatorExpression
572867Di2015UniqueSeparatorXmlReaderSettings
572867Di2015UniqueSeparatorXmlReaderSettings
572867Di2015UniqueSeparatorXmlDocument.Validate()
572867Di2015UniqueSeparatorXmlReader
572867Di2015UniqueSeparatorXmlNodeReader
572867Di2015UniqueSeparatorXmlDocument
572867Di2015UniqueSeparatorXmlNodeReader
572867Di2015UniqueSeparatorStringReader
572867Di2015UniqueSeparatorXmlDocument
572867Di2015UniqueSeparatorXmlDocument x = new XmlDocument();Di2015NewLinex.LoadXml(XmlSource);Di2015NewLineDi2015NewLineXmlReaderSettings settings = new XmlReaderSettings();Di2015NewLinesettings.CloseInput = true;     Di2015NewLinesettings.ValidationEventHandler += Handler;Di2015NewLineDi2015NewLinesettings.ValidationType = ValidationType.Schema;Di2015NewLinesettings.Schemas.Add(null, ExtendedTreeViewSchema);Di2015NewLinesettings.ValidationFlags =Di2015NewLine     XmlSchemaValidationFlags.ReportValidationWarnings |Di2015NewLineXmlSchemaValidationFlags.ProcessIdentityConstraints |Di2015NewLineXmlSchemaValidationFlags.ProcessInlineSchema |Di2015NewLineXmlSchemaValidationFlags.ProcessSchemaLocation ;Di2015NewLineDi2015NewLineStringReader r = new StringReader(XmlSource);Di2015NewLineDi2015NewLineusing (XmlReader validatingReader = XmlReader.Create(r, settings)) {Di2015NewLine        while (validatingReader.Read()) { /* just loop through document */ }Di2015NewLine}Di2015NewLine
572867Di2015UniqueSeparatorprivate static void Handler(object sender, ValidationEventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine        if (e.Severity == XmlSeverityType.Error || e.Severity ==Di2015NewLineXmlSeverityType.Warning)Di2015NewLine          System.Diagnostics.Trace.WriteLine(Di2015NewLine            String.Format("Line: {0}, Position: {1} \\"{2}\\"",Di2015NewLine                e.Exception.LineNumber, e.Exception.LinePosition,Di2015NewLinee.Exception.Message));Di2015NewLineDi2015NewLine}Di2015NewLine
573108Di2015UniqueSeparatorxVelocity
573108Di2015UniqueSeparatoryVelocity
573108Di2015UniqueSeparatoryVelocity
573108Di2015UniqueSeparatorxVelocity
573108Di2015UniqueSeparatorxVelocity
573108Di2015UniqueSeparatoryVelocity
573108Di2015UniqueSeparatorxVelocity = 3Di2015NewLineyVelocity = 4Di2015NewLine
573108Di2015UniqueSeparatorxVelocity
573108Di2015UniqueSeparatoryVelocity
573108Di2015UniqueSeparatorxPosition
573108Di2015UniqueSeparatoryPosition
573108Di2015UniqueSeparatorxVelocity
573108Di2015UniqueSeparatoryVelocity
573214Di2015UniqueSeparator<configuration>Di2015NewLine  <system.webServer>Di2015NewLine    <urlCompression doDynamicCompression="true" doStaticCompression="true" />Di2015NewLine  </system.webServer>Di2015NewLine</configuration>Di2015NewLine
573230Di2015UniqueSeparatorstruct QuestionDi2015NewLine{Di2015NewLine    public string QuestionText; // Actual question text.Di2015NewLine    public string[] Choices;    // Array of answers from which user can choose.Di2015NewLine    public int Answer;          // Index of correct answer within Choices.Di2015NewLine}Di2015NewLine
573230Di2015UniqueSeparator// Create new list to store all questions.Di2015NewLinevar questions = new List<Question>();Di2015NewLineDi2015NewLine// Open file containing quiz questions using StreamReader, which allows you to read text from files easily.Di2015NewLineusing (var quizFileReader = new System.IO.StreamReader("questions.txt"))Di2015NewLine{Di2015NewLine    string line;Di2015NewLine    Question question;Di2015NewLineDi2015NewLine    // Loop through the lines of the file until there are no more (the ReadLine function return null at this point).Di2015NewLine    // Note that the ReadLine called here only reads question texts (first line of a question), while other calls to ReadLine read the choices.Di2015NewLine    while ((line = quizFileReader.ReadLine()) != null)Di2015NewLine    {Di2015NewLine        // Skip this loop if the line is empty.Di2015NewLine        if (line.Length == 0)Di2015NewLine            continue;Di2015NewLineDi2015NewLine        // Create a new question object.Di2015NewLine        // The "object initializer" construct is used here by including { } after the constructor to set variables.Di2015NewLine        question = new Question()Di2015NewLine        {Di2015NewLine            // Set the question text to the line just read.Di2015NewLine            QuestionText = line,Di2015NewLine            // Set the choices to an array containing the next 4 lines read from the file.Di2015NewLine            Choices = new string[]Di2015NewLine            { Di2015NewLine                quizFileReader.ReadLine(), Di2015NewLine                quizFileReader.ReadLine(),Di2015NewLine                quizFileReader.ReadLine(),Di2015NewLine                quizFileReader.ReadLine()Di2015NewLine            }Di2015NewLine        };Di2015NewLineDi2015NewLine        // Initially set the correct answer to -1, which means that no choice marked as correct has yet been found.Di2015NewLine        question.Answer = -1;Di2015NewLineDi2015NewLine        // Check each choice to see if it begins with the '!' char (marked as correct).Di2015NewLine        for(int i = 0; i < 4; i++)Di2015NewLine        {Di2015NewLine            if (question.Choices[i].StartsWith("!"))Di2015NewLine            {Di2015NewLine                // Current choice is marked as correct. Therefore remove the '!' from the start of the text and store the index of this choice as the correct answer.Di2015NewLine                question.Choices[i] = question.Choices[i].Substring(1);Di2015NewLine                question.Answer = i;Di2015NewLine                break; // Stop looking through the choices.Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Check if none of the choices was marked as correct. If this is the case, we throw an exception and then stop processing.Di2015NewLine        // Note: this is only basic error handling (not very robust) which you may want to later improve.Di2015NewLine        if (question.Answer == -1)Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException(Di2015NewLine                "No correct answer was specified for the following question.\\r\\n\\r\\n" + question.QuestionText);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Finally, add the question to the complete list of questions.Di2015NewLine        questions.Add(question);Di2015NewLine    }Di2015NewLine}Di2015NewLine
573234Di2015UniqueSeparatorusing (var resA = GetMeAResourceNeedingCleanUp())Di2015NewLineusing (var resB = new AnotherResourceNeedingCleanUpn(...)) {Di2015NewLine  // Code that might throw goes in here.Di2015NewLine}Di2015NewLine
573568Di2015UniqueSeparatorTestSuite
573568Di2015UniqueSeparatorResultSuite
573568Di2015UniqueSeparatorreturn new ResultSuite(name, Di2015NewLine    tests.Select(test => test.Run(input, expectedOutput)));Di2015NewLine
573568Di2015UniqueSeparatorResultSuite
573568Di2015UniqueSeparatorreturn new ResultSuite(name, Di2015NewLine    results.Select(x => x.ScaleToStandard(standard, mode)));Di2015NewLine
573612Di2015UniqueSeparatorpublic Interface IValidationRule {Di2015NewLine   bool IsValid(object);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ValidationRule<T> : IValidationRule {Di2015NewLineDi2015NewLine    public Func<T, bool> Rule { get; private set; }Di2015NewLine    public string ErrorMessage { get; private set; }Di2015NewLineDi2015NewLine    public ValidationRule(string errorMessage, Func<object, bool> rule) { Di2015NewLine        Rule = rule;Di2015NewLine        ErrorMessage = errorMessage;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsValid(object obj) {Di2015NewLine        return Rule((T)obj);Di2015NewLine    }Di2015NewLine}Di2015NewLine
573612Di2015UniqueSeparatorValidationRules.Add(Di2015NewLine      new ValidationRule<Client>(Di2015NewLine           "Client 'Name' is required.",Di2015NewLine           c => !string.IsNullOrEmpty(c.Name)Di2015NewLine      )Di2015NewLine );Di2015NewLine
573628Di2015UniqueSeparatorinterface FooDi2015NewLine{Di2015NewLine    Object getBar();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Test implements FooDi2015NewLine{Di2015NewLine    @OverrideDi2015NewLine    public String getBar()Di2015NewLine    {Di2015NewLine        return "hi";Di2015NewLine    }Di2015NewLine}Di2015NewLine
573866Di2015UniqueSeparatorprocedure TForm1.Button1Click(Sender: TObject);Di2015NewLineconstDi2015NewLine  VMFLAGS = PROCESS_VM_OPERATION or PROCESS_VM_READ or PROCESS_VM_WRITE;Di2015NewLinevarDi2015NewLine  Wnd: HWND;Di2015NewLine  Len: integer;Di2015NewLine  ProcessId, BytesRead: Cardinal;Di2015NewLine  ProcessHandle: THandle;Di2015NewLine  MemPtr: PChar;Di2015NewLine  s: string;Di2015NewLinebeginDi2015NewLine  Wnd := $30488;Di2015NewLine  Len := SendMessage(Wnd, 2183, 0, 0);Di2015NewLine  if Len > 0 then beginDi2015NewLine    GetWindowThreadProcessId(Wnd, @ProcessId);Di2015NewLine    ProcessHandle := OpenProcess(VMFLAGS, FALSE, ProcessId);Di2015NewLine    MemPtr := VirtualAllocEx(ProcessHandle, nil, Len + 1,Di2015NewLine      MEM_RESERVE or MEM_COMMIT, PAGE_READWRITE);Di2015NewLine    if MemPtr <> nil then tryDi2015NewLine      SendMessage(Wnd, 2182, Len + 1, integer(MemPtr));Di2015NewLine      SetLength(s, Len + 1);Di2015NewLine      ReadProcessMemory(ProcessHandle, MemPtr, @s[1], Len + 1, BytesRead);Di2015NewLine      SetLength(s, BytesRead);Di2015NewLine      Memo1.Lines.Text := s;Di2015NewLine    finallyDi2015NewLine      VirtualFreeEx(ProcessId, MemPtr, Len + 1, MEM_RELEASE);Di2015NewLine    end;Di2015NewLine  end;Di2015NewLineend;Di2015NewLine
573901Di2015UniqueSeparatorpublic enum TrackDi2015NewLine{Di2015NewLine    Spielberg,Di2015NewLine    Adelaide,Di2015NewLine    Casablanca,Di2015NewLine    Liverpool,Di2015NewLine    Melbourne,Di2015NewLine    Berlin,Di2015NewLine    Sakhir,Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum ConstructorDi2015NewLine{Di2015NewLine    BMW,Di2015NewLine    Ferrari,Di2015NewLine    McLaren,Di2015NewLine    Toyota,Di2015NewLine    WilliamsDi2015NewLine}Di2015NewLineDi2015NewLinepublic enum DriverDi2015NewLine{Di2015NewLine    Hamilton,Di2015NewLine    Kovalainen,Di2015NewLine    Raikkonen,Di2015NewLine    Nakajima,Di2015NewLine    GlockDi2015NewLine}Di2015NewLine
573901Di2015UniqueSeparatorpublic class RaceDi2015NewLine{Di2015NewLine    int Year { get; set; }Di2015NewLine    Track Track { get; set; }Di2015NewLine    Driver[] Placings { get; set; }Di2015NewLine    public int this[Driver driver] { } // placing by driverDi2015NewLine}Di2015NewLineDi2015NewLinepublic class ResultsDi2015NewLine{Di2015NewLine    YearResults this[int index] { }Di2015NewLine    DriverResults this[Driver index] { }Di2015NewLine    TrackResults this[Track index] { }Di2015NewLine    ConstructorResults this[Constructor index] { }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class YearResultsDi2015NewLine{Di2015NewLine    YearDriverResults this[Driver index] { }Di2015NewLine}Di2015NewLine
573925Di2015UniqueSeparatorService<IOrderService>.Use(orderService=>Di2015NewLine{Di2015NewLine  orderService.PlaceOrder(request);Di2015NewLine}Di2015NewLine
573925Di2015UniqueSeparatorUse
573925Di2015UniqueSeparatorint newOrderId = 0; // need a value for definite assignmentDi2015NewLineService<IOrderService>.Use(orderService=>Di2015NewLine  {Di2015NewLine    newOrderId = orderService.PlaceOrder(request);Di2015NewLine  });Di2015NewLineConsole.WriteLine(newOrderId); // should be updatedDi2015NewLine
573974Di2015UniqueSeparatorList<T>
573974Di2015UniqueSeparatorList<T>
573974Di2015UniqueSeparatorList<T>
573974Di2015UniqueSeparatorCollection<T>
573974Di2015UniqueSeparatorList<T>
573974Di2015UniqueSeparatorList<T>
573974Di2015UniqueSeparatorListView.Items
573974Di2015UniqueSeparatorCollection<T>
573974Di2015UniqueSeparatorReadOnlyCollection<T>
573974Di2015UniqueSeparatorBindingList<T>
574117Di2015UniqueSeparatorpublic class MyForm : FormDi2015NewLine{Di2015NewLine    protected MyForm()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    protected int MyValue { get; set; }Di2015NewLineDi2015NewLine    public static int GetResult()Di2015NewLine    {Di2015NewLine        using(MyForm myForm = new MyForm())Di2015NewLine        {Di2015NewLine            if(myForm.ShowDialog == DialogResult.OK)Di2015NewLine                return myForm.MyValue;   Di2015NewLine        }Di2015NewLine        return -1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
574117Di2015UniqueSeparatorint someValue = MyForm.GetResult();Di2015NewLine
574175Di2015UniqueSeparatorsb.Remove(sb.Length - 2, 2);Di2015NewLine
574255Di2015UniqueSeparatorHwndSource
574255Di2015UniqueSeparatorHwndSourceParameters
574255Di2015UniqueSeparatorWM_NCACTIVATE
574255Di2015UniqueSeparatorWM_NCCALCSIZE
574255Di2015UniqueSeparatorWM_NCPAINT
574255Di2015UniqueSeparatorWM_NCHITTEST
574255Di2015UniqueSeparatorWM_THEMECHANGED
574255Di2015UniqueSeparatorWM_DWMCOMPOSITIONCHANGED
574255Di2015UniqueSeparatorDwmExtendFrameIntoClientArea
574255Di2015UniqueSeparatorDwmDefWindowProc
574255Di2015UniqueSeparatorDwmIsCompositionEnabled
574255Di2015UniqueSeparatorWindowStyle=none
574286Di2015UniqueSeparatordel = new SomeDelegate(this.CallSomeAction);Di2015NewLine
574286Di2015UniqueSeparatorpublic void CallSomeAction()Di2015NewLine{Di2015NewLine    this.SomeAction();Di2015NewLine}Di2015NewLine
574341Di2015UniqueSeparator  if (_resizing)Di2015NewLine  {Di2015NewLine    this.Height = top + e.Y;Di2015NewLine    this.Width = width + e.X;Di2015NewLine  }Di2015NewLine
574402Di2015UniqueSeparatorImports System.DataDi2015NewLineImports System.Data.SqlClientDi2015NewLineImports System.Data.SqlDi2015NewLineImports System.NetDi2015NewLineImports System.IODi2015NewLineDi2015NewLinePartial Class DownloadFileDi2015NewLineInherits System.Web.UI.PageDi2015NewLineDi2015NewLineProtected Sub page_load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.LoadDi2015NewLineDim url As String = Request.QueryString("DownloadUrl")Di2015NewLineIf url Is Nothing Or url.Length = 0 Then Exit SubDi2015NewLineDi2015NewLine'Initialize the input streamDi2015NewLineDim req As HttpWebRequest = WebRequest.Create(url)Di2015NewLineDim resp As HttpWebResponse = req.GetResponse()Di2015NewLineDim bufferSize As Integer = 1 Di2015NewLineDi2015NewLine'Initialize the output streamDi2015NewLineResponse.Clear()Di2015NewLineResponse.AppendHeader("Content-Disposition:", "attachment; filename=download.zip")Di2015NewLineResponse.AppendHeader("Content-Length", resp.ContentLength.ToString)Di2015NewLineResponse.ContentType = "application/download"Di2015NewLineDi2015NewLine'Populate the output streamDi2015NewLineDim ByteBuffer As Byte() = New Byte(bufferSize) {}Di2015NewLineDim ms As MemoryStream = New MemoryStream(ByteBuffer, True)Di2015NewLineDim rs As Stream = req.GetResponse.GetResponseStream()Di2015NewLineDim bytes() As Byte = New Byte(bufferSize) {}Di2015NewLineWhile rs.Read(ByteBuffer, 0, ByteBuffer.Length) > 0Di2015NewLineResponse.BinaryWrite(ms.ToArray())Di2015NewLineResponse.Flush()Di2015NewLineEnd WhileDi2015NewLineDi2015NewLine'CleanupDi2015NewLineResponse.End()Di2015NewLinems.Close()Di2015NewLinems.Dispose()Di2015NewLiners.Dispose()Di2015NewLineByteBuffer = NothingDi2015NewLineEnd SubDi2015NewLineEnd ClassDi2015NewLine
574489Di2015UniqueSeparator...Elements("userid")
574489Di2015UniqueSeparatorIEnumerable<XElement> rosters = obRoot.Elements("rosterlist").Elements("roster");Di2015NewLinevar rosterUserIds = (rosters.Elements("userid").Select(r => r.Value));Di2015NewLineIEnumerable<XElement> users = obRoot.Elements("userlist").Elements("user")Di2015NewLine                .Where(u => rosterUserIds.Contains(u.Attribute("userid").Value));Di2015NewLine
574489Di2015UniqueSeparatorstring sXml = @"Di2015NewLine<root>Di2015NewLine<rosterlist>Di2015NewLine    <roster>Di2015NewLine        <userid>1</userid>Di2015NewLine        <name>R1</name>Di2015NewLine        <etc></etc>Di2015NewLine    </roster>Di2015NewLine    <roster>Di2015NewLine        <userid>2</userid>Di2015NewLine        <name>R2</name>Di2015NewLine        <etc></etc>Di2015NewLine    </roster>Di2015NewLine</rosterlist>Di2015NewLine<userlist>Di2015NewLine    <user userid='1'>Di2015NewLine        <name>User on roster</name>Di2015NewLine    </user>Di2015NewLine    <user userid='5'>Di2015NewLine        <name>User not on roster</name>Di2015NewLine    </user>Di2015NewLine</userlist>Di2015NewLine</root>Di2015NewLineDi2015NewLine";Di2015NewLineDi2015NewLineXElement obRoot = XElement.Parse( sXml );Di2015NewLinevar results = from user in obRoot.Elements("userlist").Elements("user")Di2015NewLine   join roster in obRoot.Elements("rosterlist").Elements("roster")Di2015NewLine   on user.Attribute("userid").Value equals roster.Element("userid").ValueDi2015NewLine   select new {Name=user.Element("name").Value, RosterName=roster.Element("name").Value} ;Di2015NewLineDi2015NewLineforeach (var v in results)Di2015NewLine{Di2015NewLine   Console.WriteLine("{0, -20} on Roster {1, -20}", v.Name, v.RosterName);Di2015NewLine}Di2015NewLine
574489Di2015UniqueSeparatorUser on roster       on Roster R1Di2015NewLine
574500Di2015UniqueSeparatorDirectorySecurity DirSec = di.GetAccessControl(AccessControlSections.All);Di2015NewLine
574500Di2015UniqueSeparatorDirectorySecurity DirSec = di.GetAccessControl(AccessControlSections.Access);Di2015NewLine
574608Di2015UniqueSeparatorref
574608Di2015UniqueSeparatorpublic DTO SomeOperation(DTO item);
574608Di2015UniqueSeparatorResult
574659Di2015UniqueSeparatorDispose
574659Di2015UniqueSeparatorusing
574659Di2015UniqueSeparatorDispose
574659Di2015UniqueSeparatorusing
574659Di2015UniqueSeparatorIDisposable
574659Di2015UniqueSeparatorIntPtr
574659Di2015UniqueSeparatorStream
574659Di2015UniqueSeparatorSqlConnection
574659Di2015UniqueSeparator~Foo()
574659Di2015UniqueSeparatorFileStream
574659Di2015UniqueSeparatorDispose
574659Di2015UniqueSeparatorClose
574659Di2015UniqueSeparatornull
574659Di2015UniqueSeparatornull
574659Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLinesb.Append("Foo");Di2015NewLinestring x = sb.ToString();Di2015NewLineDi2015NewLine// The string and StringBuilder are already eligibleDi2015NewLine// for garbage collection here!Di2015NewLineint y = 10;Di2015NewLineDoSomething(y);Di2015NewLineDi2015NewLine// These aren't helping at all!Di2015NewLinex = null;Di2015NewLinesb = null;Di2015NewLineDi2015NewLine// Assume that x and sb aren't used hereDi2015NewLine
574659Di2015UniqueSeparatornull
574659Di2015UniqueSeparatorSomeObject foo = new SomeObject();Di2015NewLineDi2015NewLinefor (int i=0; i < 100000; i++)Di2015NewLine{Di2015NewLine    if (i == 5)Di2015NewLine    {Di2015NewLine        foo.DoSomething();Di2015NewLine        // We're not going to need it again, but the JITDi2015NewLine        // wouldn't spot thatDi2015NewLine        foo = null;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        // Some other code Di2015NewLine    }Di2015NewLine}Di2015NewLine
574659Di2015UniqueSeparatorFileStream
574659Di2015UniqueSeparatorFileStream
574659Di2015UniqueSeparatorSafeHandle
574659Di2015UniqueSeparatorIntPtr
574659Di2015UniqueSeparatorSafeHandle
574659Di2015UniqueSeparatorDispose
574659Di2015UniqueSeparatorDispose(bool)
574711Di2015UniqueSeparatorAppDomain
574711Di2015UniqueSeparatorAppDomain
574711Di2015UniqueSeparatorAppDomain
574856Di2015UniqueSeparatorprivate void Bar()Di2015NewLine{Di2015NewLine    // build startedDi2015NewLine    OnBuildStart(new BuildStartEventArgs());Di2015NewLine    // how to catch cancellation?Di2015NewLine}Di2015NewLine
574856Di2015UniqueSeparatorprivate void Bar()Di2015NewLine{Di2015NewLine    var e = new BuildStartEventArgs();Di2015NewLine    OnBuildStart(e);Di2015NewLine    if (!e.Cancel) {Di2015NewLine      // Do buildDi2015NewLine    }Di2015NewLine}Di2015NewLine
575006Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinepublic class MyPictureBox : Control {Di2015NewLine  private Image mImage;Di2015NewLine  public Image Image {Di2015NewLine    get { return mImage; }Di2015NewLine    set { mImage = value; Invalidate(); }Di2015NewLine  }Di2015NewLine  protected override void OnPaintBackground(PaintEventArgs pevent) {Di2015NewLine    // Do nothingDi2015NewLine  }Di2015NewLine  protected override void OnPaint(PaintEventArgs e) {Di2015NewLine    using (Bitmap bmp = new Bitmap(this.ClientSize.Width, this.ClientSize.Height)) {Di2015NewLine      using (Graphics bgr = Graphics.FromImage(bmp)) {Di2015NewLine        bgr.Clear(this.BackColor);Di2015NewLine        if (mImage != null) bgr.DrawImage(mImage, 0, 0);Di2015NewLine      }Di2015NewLine      e.Graphics.DrawImage(bmp, 0, 0);Di2015NewLine    }Di2015NewLine    base.OnPaint(e);Di2015NewLine  }Di2015NewLine}Di2015NewLine
575018Di2015UniqueSeparatorCREATE TABLE XmlTestDi2015NewLine(Di2015NewLine    [XmlTestId] [int]   identity(1,1) primary key,Di2015NewLine    [XmlText]   [xml]   NOT NULLDi2015NewLine)Di2015NewLine
575018Di2015UniqueSeparatorCREATE PROCEDURE XmlTest_InsertDi2015NewLine(Di2015NewLine    @XmlText    xmlDi2015NewLine)Di2015NewLineASDi2015NewLineDi2015NewLineINSERT INTO XmlTest (XmlText)Di2015NewLineVALUES (@XmlText)Di2015NewLine
575018Di2015UniqueSeparatorusing System.Data.SqlClient;Di2015NewLineusing System.Data;Di2015NewLineusing System.Data.SqlTypes;Di2015NewLineusing System.Xml;Di2015NewLineDi2015NewLinenamespace TestConsoleDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLineDi2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            string xmlDoc = "<root><el1>Nothing</el1></root>";Di2015NewLine            string connString = "server=(local);database=IntroDB;UID=sa;PWD=pwd";Di2015NewLine            SqlConnection conn = new SqlConnection(connString);Di2015NewLine            SqlCommand cmd = new SqlCommand("XmlTest_Insert", conn);Di2015NewLine            cmd.CommandType = CommandType.StoredProcedure;Di2015NewLine            SqlParameter param = new SqlParameter("@XmlText", SqlDbType.Xml);Di2015NewLine            param.Value = new SqlXml(new XmlTextReader(xmlDocDi2015NewLine                           , XmlNodeType.Document, null));Di2015NewLine            cmd.Parameters.Add(param);Di2015NewLineDi2015NewLine            conn.Open();Di2015NewLine            cmd.ExecuteNonQuery();Di2015NewLine            conn.Dispose();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
575068Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.textBox1.AutoCompleteMode = AutoCompleteMode.Suggest;Di2015NewLine    this.textBox1.AutoCompleteSource = AutoCompleteSource.CustomSource;Di2015NewLineDi2015NewLine    string[] items = GetListForCustomSource();Di2015NewLine    this.textBox1.AutoCompleteCustomSource.AddRange(items);Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate string[] GetListForCustomSource()Di2015NewLine{Di2015NewLine    var result = new List<string>();Di2015NewLineDi2015NewLine    foreach(var value in Enum.GetNames(typeof(DayOfWeek)))Di2015NewLine    {Di2015NewLine        result.Add(value);Di2015NewLine    }Di2015NewLineDi2015NewLine    return result.ToArray();Di2015NewLine}Di2015NewLine
575071Di2015UniqueSeparatorpublic string Id{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return this.ViewState["Value"] == null ?Di2015NewLine            0 :Di2015NewLine            (int)this.ViewState["Value"];Di2015NewLine    }Di2015NewLine    set { this.ViewState["Value"] = value; }Di2015NewLine}Di2015NewLine
575504Di2015UniqueSeparatorstring input = "<a href=\\"http://tvrss.net/search/?show_name=The+Venture+Bros&show_name_exact=true\\">The Venture Bros</a></p></li>";Di2015NewLineDi2015NewLine// Call Regex.MatchDi2015NewLineMatch m = Regex.Match(input, "show_name=(.*?)&show_name_exact=true\\">(.*?)</a");Di2015NewLineDi2015NewLine// Check Match instanceDi2015NewLineif (m.Success)Di2015NewLine{Di2015NewLine    // Get Group valueDi2015NewLine    string key = m.Groups[2].Value;Di2015NewLine    Console.WriteLine(key);Di2015NewLine    // alternate-1Di2015NewLine}Di2015NewLine
575573Di2015UniqueSeparatorprivate readonly List<Foo> bar = new List<Foo>();Di2015NewLinepublic List<Foo> Bar {get { return bar; } } // works fineDi2015NewLine
575573Di2015UniqueSeparatorXmlSerializer
575573Di2015UniqueSeparatorpublic List<Foo> Bar {get; private set;} // FAILDi2015NewLine
575573Di2015UniqueSeparatorreadonly
575573Di2015UniqueSeparator[DefaultValue]
575573Di2015UniqueSeparatorbool ShouldSerializeFoo()
575573Di2015UniqueSeparatorbool FooSpecified {get;set;}
575573Di2015UniqueSeparator[XmlIgnore]
575573Di2015UniqueSeparator[Obsolete]
575594Di2015UniqueSeparator{Binding subclass.subtitle}Di2015NewLine
575594Di2015UniqueSeparator    public class MySubClass {Di2015NewLine        public string subtitle {get;set;}Di2015NewLine    }Di2015NewLine    public class MyClassDi2015NewLine    {Di2015NewLine        public string title {get;set;}Di2015NewLine        public MySubClass subclass {get;set;}Di2015NewLine    }Di2015NewLine
575594Di2015UniqueSeparator(from c in mylist select new List<MyClass> {c}).ToList();Di2015NewLine
575594Di2015UniqueSeparatormylist
575594Di2015UniqueSeparatorlistView1.ItemsSource = mylist;Di2015NewLine
575594Di2015UniqueSeparator(from c in mylist select new { Foo = c.SomeProp,Di2015NewLine    Bar = c.SomeOtherProp + 12 }).ToList();Di2015NewLine
575605Di2015UniqueSeparatorDocument doc = new Document();Di2015NewLinePdfWriter.GetInstance(doc, new FileStream("first.pdf", FileMode.Create));Di2015NewLinedoc.Open();Di2015NewLinedoc.Add(new Paragraph("Hello World"));Di2015NewLinedoc.Close();Di2015NewLine
575765Di2015UniqueSeparatorHttpUtility
575765Di2015UniqueSeparatorUrlEncode
575765Di2015UniqueSeparatorUrlDecode
576031Di2015UniqueSeparatorpublic class serviceUtilsDi2015NewLine{Di2015NewLine    unsafe public long stringToCoTaskPtr( ref str thestring )Di2015NewLine    {Di2015NewLine        return (long)Marshal.StringToCoTaskMemAnsi(thestring.theString).ToPointer();//TODO : what errors occur from here? handle themDi2015NewLine    }Di2015NewLineDi2015NewLine    unsafe public long bytesToCoTaskPtr( ref bytes thebytes, ref short byteCnt)Di2015NewLine    {Di2015NewLine        byteCnt = (short)thebytes.theArray.Length;Di2015NewLine        IntPtr tmpptr = new IntPtr();Di2015NewLine        tmpptr = Marshal.AllocCoTaskMem(byteCnt);Di2015NewLine        Marshal.Copy(thebytes.theArray, 0, tmpptr, byteCnt);Di2015NewLine        return (long)tmpptr.ToPointer();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void freeCoTaskMemPtr(long ptr)Di2015NewLine    {Di2015NewLine        Marshal.FreeCoTaskMem(new IntPtr(ptr));//TODO : errors from here?Di2015NewLine    }Di2015NewLineDi2015NewLine    public string coTaskPtrToString(long theptr)Di2015NewLine    {Di2015NewLine        return Marshal.PtrToStringAnsi(new IntPtr(theptr));Di2015NewLine    }Di2015NewLineDi2015NewLine    public byte[] coTaskPtrToBytes(long theptr, short thelen)Di2015NewLine    {Di2015NewLine        byte[] tmpbytes = new byte[thelen];Di2015NewLine        Marshal.Copy(new IntPtr(theptr), tmpbytes, 0, thelen);Di2015NewLine        return tmpbytes;Di2015NewLine    }Di2015NewLine}Di2015NewLine
576031Di2015UniqueSeparator#import "..\\COMClient\\bin\\Debug\\COMClient.tlb" named_guids raw_interfaces_onlyDi2015NewLineint _tmain(int argc, _TCHAR* argv[])Di2015NewLine{Di2015NewLineCoInitialize(NULL);   //Initialize all COM ComponentsDi2015NewLineCOMClient::IComCalculatorPtr pCalc;Di2015NewLine// CreateInstance parametersDi2015NewLineHRESULT hRes = pCalc.CreateInstance(COMClient::CLSID_ComCalculator);Di2015NewLineif (hRes == S_OK) {Di2015NewLine\long size = 5;Di2015NewLine\LPVOID ptr = CoTaskMemAlloc( size );Di2015NewLine\if( ptr != NULL )Di2015NewLine\{Di2015NewLine\\memcpy( ptr, "12345", size );Di2015NewLine\\short ans = 0;Di2015NewLine\\pCalc->changeBytes( (__int64*)&ptr, &size, &ans );Di2015NewLine\\CoTaskMemFree(ptr);Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLineCoUninitialize ();   //DeInitialize all COM ComponentsDi2015NewLineDi2015NewLinereturn 0;Di2015NewLine}Di2015NewLine
576031Di2015UniqueSeparator    public short changeBytes(ref long ptr, ref int arraysize)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            IntPtr interopPtr = new IntPtr(ptr);                Di2015NewLine            testservice.ByteArray bytes = new testservice.ByteArray();Di2015NewLine            byte[] somebytes = new byte[arraysize];Di2015NewLine            Marshal.Copy(interopPtr, somebytes, 0, arraysize);Di2015NewLine            bytes.theArray = somebytes;Di2015NewLineDi2015NewLine            CalculatorClient client = generateClient();Di2015NewLine            client.takeArray(ref bytes);Di2015NewLine            client.Close();Di2015NewLine            if (arraysize < bytes.theArray.Length)Di2015NewLine            {Di2015NewLine                interopPtr = Marshal.ReAllocCoTaskMem(interopPtr, bytes.theArray.Length);//TODO : throws an exception if fails... deal with itDi2015NewLine            }Di2015NewLine            Marshal.Copy(bytes.theArray, 0, interopPtr, bytes.theArray.Length);Di2015NewLine            ptr = interopPtr.ToInt64();Di2015NewLineDi2015NewLine            arraysize = bytes.theArray.Length;Di2015NewLineDi2015NewLine            //TODO : do we need to free IntPtr? check all code for memory leaks... check for successful allocationDi2015NewLine        }Di2015NewLine        catch(Exception e)Di2015NewLine        {Di2015NewLine            return 3;Di2015NewLine        }Di2015NewLineDi2015NewLine        return 2;Di2015NewLine    }Di2015NewLine
576296Di2015UniqueSeparator#ifndef DATASTRUCTURE_H_Di2015NewLine#define DATASTRUCTURE_H_Di2015NewLineDi2015NewLineclass DataStructureDi2015NewLine{Di2015NewLinepublic:Di2015NewLine\DataStructure() {countAdd=0; countDelete=0;countFind=0;}Di2015NewLine\virtual ~DataStructure() {}Di2015NewLineDi2015NewLine\void resetCountAdd() {countAdd=0;}Di2015NewLine\void resetCountFind() {countFind=0;}Di2015NewLine\void resetCountDelete() {countDelete=0;}Di2015NewLineDi2015NewLine\unsigned int getCountAdd(){return countAdd;}Di2015NewLine\unsigned int getCountDelete(){return countDelete;}Di2015NewLine\unsigned int getCountFind(){return countFind;}Di2015NewLineDi2015NewLineprotected:Di2015NewLine\unsigned int countAdd;Di2015NewLine\unsigned int countDelete;Di2015NewLine\unsigned int countFind;Di2015NewLine};Di2015NewLineDi2015NewLine#endif /*DATASTRUCTURE_H_*/Di2015NewLine
576296Di2015UniqueSeparator#ifndef KEY_H_Di2015NewLine#define KEY_H_Di2015NewLineDi2015NewLine#include <string>Di2015NewLineusing namespace std;Di2015NewLineDi2015NewLineconst int keyLength = 128;Di2015NewLineDi2015NewLineclass Key : public stringDi2015NewLine{Di2015NewLinepublic:Di2015NewLine\Key():string(keyLength, ' ') {}Di2015NewLine\Key(const char in[]): string(in){}Di2015NewLine\Key(const string& in): string(in){}Di2015NewLineDi2015NewLine\bool operator<(const string& other);Di2015NewLine\bool operator>(const string& other);Di2015NewLine\bool operator==(const string& other);Di2015NewLineDi2015NewLine\virtual ~Key() {}Di2015NewLine};Di2015NewLineDi2015NewLine#endif /*KEY_H_*/Di2015NewLine
576296Di2015UniqueSeparator#include "Key.h"Di2015NewLineDi2015NewLinebool Key::operator<(const string& other)Di2015NewLine{Di2015NewLine\return compare(other) < 0;Di2015NewLine};Di2015NewLineDi2015NewLinebool Key::operator>(const string& other)Di2015NewLine{Di2015NewLine\return compare(other) > 0;Di2015NewLine};Di2015NewLineDi2015NewLinebool Key::operator==(const string& other)Di2015NewLine{Di2015NewLine\return compare(other) == 0;Di2015NewLine}Di2015NewLine
576296Di2015UniqueSeparator#ifndef BLOOMFILTER_H_Di2015NewLine#define BLOOMFILTER_H_Di2015NewLineDi2015NewLine#include <iostream>Di2015NewLine#include <assert.h>Di2015NewLine#include <vector>Di2015NewLine#include <math.h>Di2015NewLine#include "Key.h"Di2015NewLine#include "DataStructure.h"Di2015NewLineDi2015NewLine#define LONG_BIT 32Di2015NewLine#define bitmask(val) (unsigned long)(1 << (LONG_BIT - (val % LONG_BIT) - 1))Di2015NewLineDi2015NewLine// TODO: Implement RW-locking on the reads/writes to the bitmap.Di2015NewLineDi2015NewLineclass BloomFilter : public DataStructureDi2015NewLine{Di2015NewLinepublic:Di2015NewLine\BloomFilter(){}Di2015NewLine\BloomFilter(unsigned long length){init(length);}Di2015NewLine\virtual ~BloomFilter(){}Di2015NewLineDi2015NewLine\void init(unsigned long length);Di2015NewLine\void dump();Di2015NewLineDi2015NewLine\void add(const Key& key);Di2015NewLine\void del(const Key& key);Di2015NewLineDi2015NewLine\/**Di2015NewLine\ * Returns true if the key IS BELIEVED to exist, false if it absolutely doesn't.Di2015NewLine\ */Di2015NewLine\bool testExist(const Key& key, bool v = false);Di2015NewLineDi2015NewLineprivate:Di2015NewLine\unsigned long hash1(const Key& key);Di2015NewLine\unsigned long hash2(const Key& key);Di2015NewLine\bool exist(const Key& key);Di2015NewLine\void getHashAndIndicies(unsigned long& h1, unsigned long& h2, int& i1, int& i2,\const Key& key);Di2015NewLine\void getCountIndicies(const int i1, const unsigned long h1,Di2015NewLine\\const int i2, const unsigned long h2, int& i1_c, int& i2_c);Di2015NewLineDi2015NewLine\vector<unsigned long> m_tickBook;Di2015NewLine\vector<unsigned int> m_useCounts;Di2015NewLine\unsigned long m_length; // number of bits in the bloom filterDi2015NewLine\unsigned long m_pockets; //the number of pocketsDi2015NewLineDi2015NewLine\static const unsigned long m_pocketSize; //bits in each pocketDi2015NewLine};Di2015NewLineDi2015NewLine#endif /*BLOOMFILTER_H_*/Di2015NewLine
576296Di2015UniqueSeparator#include "BloomFilter.h"Di2015NewLineDi2015NewLineconst unsigned long BloomFilter::m_pocketSize = LONG_BIT;Di2015NewLineDi2015NewLinevoid BloomFilter::init(unsigned long length)Di2015NewLine{Di2015NewLine\//m_length = length;Di2015NewLine\m_length = (unsigned long)((2.0*length)/log(2))+1;Di2015NewLine\m_pockets = (unsigned long)(ceil(double(m_length)/m_pocketSize));Di2015NewLine\m_tickBook.resize(m_pockets);Di2015NewLineDi2015NewLine\// my own (allocate nr bits possible to store in the other vector)Di2015NewLine\m_useCounts.resize(m_pockets * m_pocketSize);Di2015NewLineDi2015NewLine\unsigned long i; for(i=0; i< m_pockets; i++) m_tickBook[i] = 0;Di2015NewLine\for (i = 0; i < m_useCounts.size(); i++) m_useCounts[i] = 0; // my ownDi2015NewLine}Di2015NewLineDi2015NewLineunsigned long BloomFilter::hash1(const Key& key)Di2015NewLine{Di2015NewLine\unsigned long hash = 5381;Di2015NewLine\unsigned int i=0; for (i=0; i< key.length(); i++){Di2015NewLine\\hash = ((hash << 5) + hash) + key.c_str()[i]; /* hash * 33 + c */Di2015NewLine\}Di2015NewLineDi2015NewLine\double d_hash = (double) hash;Di2015NewLineDi2015NewLine\d_hash *= (0.5*(sqrt(5)-1));Di2015NewLine\d_hash -= floor(d_hash);Di2015NewLine\d_hash *= (double)m_length;Di2015NewLineDi2015NewLine\return (unsigned long)floor(d_hash);Di2015NewLine}Di2015NewLineDi2015NewLineunsigned long BloomFilter::hash2(const Key& key)Di2015NewLine{Di2015NewLine\unsigned long hash = 0;Di2015NewLine\unsigned int i=0; for (i=0; i< key.length(); i++){Di2015NewLine\\hash = key.c_str()[i] + (hash << 6) + (hash << 16) - hash;Di2015NewLine\}Di2015NewLine\double d_hash = (double) hash;Di2015NewLineDi2015NewLine\d_hash *= (0.5*(sqrt(5)-1));Di2015NewLine\d_hash -= floor(d_hash);Di2015NewLine\d_hash *= (double)m_length;Di2015NewLineDi2015NewLine\return (unsigned long)floor(d_hash);Di2015NewLine}Di2015NewLineDi2015NewLinebool BloomFilter::testExist(const Key& key, bool v){Di2015NewLine\if(exist(key)) {Di2015NewLine\\if(v) cout<<"Key "<< key<<" is in the set"<<endl;Di2015NewLine\\return true;Di2015NewLine\}else {Di2015NewLine\\if(v) cout<<"Key "<< key<<" is not in the set"<<endl;Di2015NewLine\\return false;Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLinevoid BloomFilter::dump()Di2015NewLine{Di2015NewLine\cout<<m_pockets<<" Pockets: ";Di2015NewLineDi2015NewLine\// I changed u to %p because I wanted it printed in hex.Di2015NewLine\unsigned long i; for(i=0; i< m_pockets; i++) printf("%p ", (void*)m_tickBook[i]);Di2015NewLine\cout<<endl;Di2015NewLine}Di2015NewLineDi2015NewLinevoid BloomFilter::add(const Key& key)Di2015NewLine{Di2015NewLine\unsigned long h1, h2;Di2015NewLine\int i1, i2;Di2015NewLine\int i1_c, i2_c;Di2015NewLineDi2015NewLine\// tested!Di2015NewLineDi2015NewLine\getHashAndIndicies(h1, h2, i1, i2, key);Di2015NewLine\getCountIndicies(i1, h1, i2, h2, i1_c, i2_c);Di2015NewLineDi2015NewLine\m_tickBook[i1] = m_tickBook[i1] | bitmask(h1);Di2015NewLine\m_tickBook[i2] = m_tickBook[i2] | bitmask(h2);Di2015NewLineDi2015NewLine\m_useCounts[i1_c] = m_useCounts[i1_c] + 1;Di2015NewLine\m_useCounts[i2_c] = m_useCounts[i2_c] + 1;Di2015NewLineDi2015NewLine\countAdd++;Di2015NewLine}Di2015NewLineDi2015NewLinevoid BloomFilter::del(const Key& key)Di2015NewLine{Di2015NewLine\unsigned long h1, h2;Di2015NewLine\int i1, i2;Di2015NewLine\int i1_c, i2_c;Di2015NewLineDi2015NewLine\if (!exist(key)) throw "You can't delete keys which are not in the bloom filter!";Di2015NewLineDi2015NewLine\// First we need the indicies into m_tickBook and theDi2015NewLine\// hashes.Di2015NewLine\getHashAndIndicies(h1, h2, i1, i2, key);Di2015NewLineDi2015NewLine\// The index of the counter is the index into the bitvectorDi2015NewLine\// times the number of bits per vector item plus the offset intoDi2015NewLine\// that same vector item.Di2015NewLine\getCountIndicies(i1, h1, i2, h2, i1_c, i2_c);Di2015NewLineDi2015NewLine\// We need to update the value in the bitvector in order toDi2015NewLine\// delete the key.Di2015NewLine\m_useCounts[i1_c] = (m_useCounts[i1_c] == 1 ? 0 : m_useCounts[i1_c] - 1);Di2015NewLine\m_useCounts[i2_c] = (m_useCounts[i2_c] == 1 ? 0 : m_useCounts[i2_c] - 1);Di2015NewLineDi2015NewLine\// Now, if we depleted the count for a specific bit, then set it toDi2015NewLine\// zero, by anding the complete unsigned long with the notted bitmaskDi2015NewLine\// of the hash valueDi2015NewLine\if (m_useCounts[i1_c] == 0)Di2015NewLine\\m_tickBook[i1] = m_tickBook[i1] & ~(bitmask(h1));Di2015NewLine\if (m_useCounts[i2_c] == 0)Di2015NewLine\\m_tickBook[i2] = m_tickBook[i2] & ~(bitmask(h2));Di2015NewLineDi2015NewLine\countDelete++;Di2015NewLine}Di2015NewLineDi2015NewLinebool BloomFilter::exist(const Key& key)Di2015NewLine{Di2015NewLine\unsigned long h1, h2;Di2015NewLine\int i1, i2;Di2015NewLineDi2015NewLine\countFind++;Di2015NewLineDi2015NewLine\getHashAndIndicies(h1, h2, i1, i2, key);Di2015NewLineDi2015NewLine\return \((m_tickBook[i1] & bitmask(h1)) > 0) &&Di2015NewLine\\\((m_tickBook[i2] & bitmask(h2)) > 0);Di2015NewLine}Di2015NewLineDi2015NewLine/*Di2015NewLine * Gets the values of the indicies for two hashes and places them inDi2015NewLine * the passed parameters. The index is into m_tickBook.Di2015NewLine */Di2015NewLinevoid BloomFilter::getHashAndIndicies(unsigned long& h1, unsigned long& h2, int& i1,Di2015NewLine\int& i2, const Key& key)Di2015NewLine{Di2015NewLine\h1 = hash1(key);Di2015NewLine\h2 = hash2(key);Di2015NewLine\i1 = (int) h1/m_pocketSize;Di2015NewLine\i2 = (int) h2/m_pocketSize;Di2015NewLine}Di2015NewLineDi2015NewLine/*Di2015NewLine * Gets the values of the indicies into the count vector, which keepsDi2015NewLine * track of how many times a specific bit-position has been used.Di2015NewLine */Di2015NewLinevoid BloomFilter::getCountIndicies(const int i1, const unsigned long h1,Di2015NewLine\const int i2, const unsigned long h2, int& i1_c, int& i2_c)Di2015NewLine{Di2015NewLine\i1_c = i1*m_pocketSize + h1%m_pocketSize;Di2015NewLine\i2_c = i2*m_pocketSize + h2%m_pocketSize;Di2015NewLine}Di2015NewLine
576296Di2015UniqueSeparator#ifndef RBST_H_Di2015NewLine#define RBST_H_Di2015NewLineDi2015NewLine#include <iostream>Di2015NewLine#include <assert.h>Di2015NewLine#include <vector>Di2015NewLine#include <math.h>Di2015NewLine#include "Key.h"Di2015NewLine#include "DataStructure.h"Di2015NewLineDi2015NewLine#define BUG(str) printf("%s:%d FAILED SIZE INVARIANT: %s\\n", __FILE__, __LINE__, str);Di2015NewLineDi2015NewLineusing namespace std;Di2015NewLineDi2015NewLineclass RBSTNode;Di2015NewLineclass RBSTNode: public KeyDi2015NewLine{Di2015NewLinepublic:Di2015NewLine\RBSTNode(const Key& key):Key(key)Di2015NewLine\{Di2015NewLine\\m_left =NULL;Di2015NewLine\\m_right = NULL;Di2015NewLine\\m_size = 1U; // the size of one node is 1.Di2015NewLine\}Di2015NewLine\virtual ~RBSTNode(){}Di2015NewLineDi2015NewLine\string setKey(const Key& key){return Key(key);}Di2015NewLineDi2015NewLine\RBSTNode* left(){return m_left;\}Di2015NewLine\RBSTNode* right(){return m_right;}Di2015NewLineDi2015NewLine\RBSTNode* setLeft(RBSTNode* left) { m_left = left; return this; }Di2015NewLine\RBSTNode* setRight(RBSTNode* right) { m_right =right; return this; }Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\ostream& print(ostream& out)Di2015NewLine\{Di2015NewLine\\out << "Key(" << *this << ", m_size: " << m_size << ")";Di2015NewLine\\return out;Di2015NewLine\}Di2015NewLine#endifDi2015NewLineDi2015NewLine\unsigned int size() { return m_size; }Di2015NewLineDi2015NewLine\void setSize(unsigned int val)Di2015NewLine\{Di2015NewLine#ifdef DEBUGDi2015NewLine\\this->print(cout);Di2015NewLine\\cout << "::setSize(" << val << ") called." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\\if (val == 0) throw "Cannot set the size below 1, then just delete this node.";Di2015NewLine\\m_size = val;Di2015NewLine\}Di2015NewLineDi2015NewLine\void incSize() {Di2015NewLine#ifdef DEBUGDi2015NewLine\\this->print(cout);Di2015NewLine\\cout << "::incSize() called" << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\\m_size++;Di2015NewLine\}Di2015NewLineDi2015NewLine\void decrSize()Di2015NewLine\{Di2015NewLine#ifdef DEBUGDi2015NewLine\\this->print(cout);Di2015NewLine\\cout << "::decrSize() called" << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\\if (m_size == 1) throw "Cannot decrement size below 1, then just delete this node.";Di2015NewLine\\m_size--;Di2015NewLine\}Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\unsigned int size(RBSTNode* x);Di2015NewLine#endifDi2015NewLineDi2015NewLineprivate:Di2015NewLine\RBSTNode(){}Di2015NewLine\RBSTNode* m_left;Di2015NewLine\RBSTNode* m_right;Di2015NewLine\unsigned int m_size;Di2015NewLine};Di2015NewLineDi2015NewLineclass RBST : public DataStructureDi2015NewLine{Di2015NewLinepublic:Di2015NewLine\RBST() {Di2015NewLine\\m_size = 0;Di2015NewLine\\m_head = NULL;Di2015NewLine\\srand(time(0));Di2015NewLine\};Di2015NewLineDi2015NewLine\virtual ~RBST() {};Di2015NewLineDi2015NewLine\/**Di2015NewLine\ * Tries to add key into the tree and will returnDi2015NewLine\ *\\true  for a new item addedDi2015NewLine\ *\\false if the key already is in the tree.Di2015NewLine\ *Di2015NewLine\ * Will also have the side-effect of printing to the console if v=true.Di2015NewLine\ */Di2015NewLine\bool add(const Key& key, bool v=false);Di2015NewLineDi2015NewLine\/**Di2015NewLine\ * Same semantics as other add function, but takes a string,Di2015NewLine\ * but diff name, because that'll cause an ambiguity because of inheritance.Di2015NewLine\ */Di2015NewLine\bool addString(const string& key);Di2015NewLineDi2015NewLine\/**Di2015NewLine\ * Deletes a key from the tree if that key is in the tree.Di2015NewLine\ * Will returnDi2015NewLine\ *\\true  for success andDi2015NewLine\ *\\false for failure.Di2015NewLine\ *Di2015NewLine\ * Will also have the side-effect of printing to the console if v=true.Di2015NewLine\ */Di2015NewLine\bool del(const Key& key, bool v=false);Di2015NewLineDi2015NewLine\/**Di2015NewLine\ * Tries to find the key in the tree and will returnDi2015NewLine\ *\\true if the key is in the tree andDi2015NewLine\ *\\false if the key is not.Di2015NewLine\ *Di2015NewLine\ * Will also have the side-effect of printing to the console if v=true.Di2015NewLine\ */Di2015NewLine\bool find(const Key& key, bool v = false);Di2015NewLineDi2015NewLine\unsigned int count() { return m_size; }Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\int dump(char sep = ' ');Di2015NewLine\int dump(RBSTNode* target, char sep);Di2015NewLine\unsigned int size(RBSTNode* x);Di2015NewLine#endifDi2015NewLineDi2015NewLineprivate:Di2015NewLine\RBSTNode* randomAdd(RBSTNode* target, const Key& key);Di2015NewLine\RBSTNode* addRoot(RBSTNode* target, const Key& key);Di2015NewLine\RBSTNode* rightRotate(RBSTNode* target);Di2015NewLine\RBSTNode* leftRotate(RBSTNode* target);Di2015NewLineDi2015NewLine\RBSTNode* del(RBSTNode* target, const Key& key);Di2015NewLine\RBSTNode* join(RBSTNode* left, RBSTNode* right);Di2015NewLineDi2015NewLine\RBSTNode* find(RBSTNode* target, const Key& key);Di2015NewLineDi2015NewLine\RBSTNode* m_head;Di2015NewLine\unsigned int m_size;Di2015NewLine};Di2015NewLineDi2015NewLine#endif /*RBST_H_*/Di2015NewLine
576296Di2015UniqueSeparator#include "RBST.h"Di2015NewLineDi2015NewLinebool RBST::add(const Key& key, bool v){Di2015NewLine\unsigned int oldSize = m_size;Di2015NewLine\m_head = randomAdd(m_head, key);Di2015NewLine\if (m_size > oldSize){Di2015NewLine\\if(v) cout<<"Node "<<key<< " is added into the tree."<<endl;Di2015NewLine\\return true;Di2015NewLine\}else {Di2015NewLine\\if(v) cout<<"Node "<<key<< " is already in the tree."<<endl;Di2015NewLine\\return false;Di2015NewLine\}Di2015NewLine\if(v) cout<<endl;Di2015NewLine};Di2015NewLineDi2015NewLinebool RBST::addString(const string& key) {Di2015NewLine\return add(Key(key), false);Di2015NewLine}Di2015NewLineDi2015NewLinebool RBST::del(const Key& key, bool v){Di2015NewLine\unsigned oldSize= m_size;Di2015NewLine\m_head = del(m_head, key);Di2015NewLine\if (m_size < oldSize) {Di2015NewLine\\if(v) cout<<"Node "<<key<< " is deleted from the tree."<<endl;Di2015NewLine\\return true;Di2015NewLine\}Di2015NewLine\else {Di2015NewLine\\if(v) cout<< "Node "<<key<< " is not in the tree."<<endl;Di2015NewLine\\return false;Di2015NewLine\}Di2015NewLine};Di2015NewLineDi2015NewLinebool RBST::find(const Key& key, bool v){Di2015NewLine\RBSTNode* ret = find(m_head, key);Di2015NewLine\if (ret == NULL){Di2015NewLine\\if(v) cout<< "Node "<<key<< " is not in the tree."<<endl;Di2015NewLine\\return false;Di2015NewLine\}else {Di2015NewLine\\if(v) cout<<"Node "<<key<< " is in the tree."<<endl;Di2015NewLine\\return true;Di2015NewLine\}Di2015NewLine};Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLineint RBST::dump(char sep){Di2015NewLine\int ret = dump(m_head, sep);Di2015NewLine\cout<<"SIZE: " <<ret<<endl;Di2015NewLine\return ret;Di2015NewLine};Di2015NewLineDi2015NewLineint RBST::dump(RBSTNode* target, char sep){Di2015NewLine\if (target == NULL) return 0;Di2015NewLine\int ret = dump(target->left(), sep);Di2015NewLine\cout<< *target<<sep;Di2015NewLine\ret ++;Di2015NewLine\ret += dump(target->right(), sep);Di2015NewLine\return ret;Di2015NewLine};Di2015NewLine#endifDi2015NewLineDi2015NewLine/**Di2015NewLine * Rotates the tree around target, so that target's leftDi2015NewLine * is the new root of the tree/subtree and updates the subtree sizes.Di2015NewLine *Di2015NewLine *(target)\b \\\\(l)\aDi2015NewLine *\\   / \\\\right\   / \\Di2015NewLine *\\  a\  ?\\---->\  ?\  bDi2015NewLine *\\ / \\\\\\\ / \\Di2015NewLine *\\?\x\\\\\x   ?Di2015NewLine *Di2015NewLine */Di2015NewLineRBSTNode* RBST::rightRotate(RBSTNode* target) // privateDi2015NewLine{Di2015NewLine\if (target == NULL) throw "Invariant failure, target is null"; // Note: may be removed once tested.Di2015NewLine\if (target->left() == NULL) throw "You cannot rotate right around a target whose left node is NULL!";Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout\<<"Right-rotating b-node ";Di2015NewLine\target->print(cout);Di2015NewLine\cout\<< " for a-node ";Di2015NewLine\target->left()->print(cout);Di2015NewLine\cout\<< "." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\RBSTNode* l = target->left();Di2015NewLine\int as0 = l->size();Di2015NewLineDi2015NewLine\// re-order the sizesDi2015NewLine\l->setSize( l->size() + (target->right() == NULL ? 0 : target->right()->size()) + 1); // a.size += b.right.size + 1; where b.right may be null.Di2015NewLine\target->setSize( target->size() -as0 + (l->right() == NULL ? 0 : l->right()->size()) );\// b.size += -a_0_size + x.size where x may be null.Di2015NewLineDi2015NewLine\// swap b's left (for a)Di2015NewLine\target->setLeft(l->right());Di2015NewLineDi2015NewLine\// and a's right (for b's left)Di2015NewLine\l->setRight(target);Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout\<< "A-node size: " << l->size() << ", b-node size: " << target->size() << "." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\// return the new root, a.Di2015NewLine\return l;Di2015NewLine};Di2015NewLineDi2015NewLine/**Di2015NewLine * Like rightRotate, but the other way. See docs for rightRotate(RBSTNode*)Di2015NewLine */Di2015NewLineRBSTNode* RBST::leftRotate(RBSTNode* target)Di2015NewLine{Di2015NewLine\if (target == NULL) throw "Invariant failure, target is null";Di2015NewLine\if (target->right() == NULL) throw "You cannot rotate left around a target whose right node is NULL!";Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout\<<"Left-rotating a-node ";Di2015NewLine\target->print(cout);Di2015NewLine\cout\<< " for b-node ";Di2015NewLine\target->right()->print(cout);Di2015NewLine\cout\<< "." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\RBSTNode* r = target->right();Di2015NewLine\int bs0 = r->size();Di2015NewLineDi2015NewLine\// re-roder the sizesDi2015NewLine\r->setSize(r->size() + (target->left() == NULL ? 0 : target->left()->size()) + 1);Di2015NewLine\target->setSize(target->size() -bs0 + (r->left() == NULL ? 0 : r->left()->size()));Di2015NewLineDi2015NewLine\// swap a's right (for b's left)Di2015NewLine\target->setRight(r->left());Di2015NewLineDi2015NewLine\// swap b's left (for a)Di2015NewLine\r->setLeft(target);Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout\<< "Left-rotation done: a-node size: " << target->size() << ", b-node size: " << r->size() << "." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\return r;Di2015NewLine};Di2015NewLineDi2015NewLine//Di2015NewLine/**Di2015NewLine * Adds a key to the tree and returns the new root of the tree.Di2015NewLine * If the key already exists doesn't add anything.Di2015NewLine * Increments m_size if the key didn't already exist and hence was added.Di2015NewLine *Di2015NewLine * This function is not called from public methods, it's a helper function.Di2015NewLine */Di2015NewLineRBSTNode* RBST::addRoot(RBSTNode* target, const Key& key)Di2015NewLine{Di2015NewLine\countAdd++;Di2015NewLineDi2015NewLine\if (target == NULL) return new RBSTNode(key);Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout << "addRoot(";Di2015NewLine\cout.flush();Di2015NewLine\target->print(cout) << "," << key << ") called." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\if (*target < key)Di2015NewLine\{Di2015NewLine\\target->setRight( addRoot(target->right(), key) );Di2015NewLine\\target->incSize(); // Should I?Di2015NewLine\\RBSTNode* res = leftRotate(target);Di2015NewLine#ifdef DEBUGDi2015NewLine\\if (target->size() != size(target))Di2015NewLine\\\BUG("in addRoot 1");Di2015NewLine#endifDi2015NewLine\\return res;Di2015NewLine\}Di2015NewLineDi2015NewLine\target->setLeft( addRoot(target->left(), key) );Di2015NewLine\target->incSize(); // Should I?Di2015NewLine\RBSTNode* res = rightRotate(target);Di2015NewLine#ifdef DEBUGDi2015NewLine\if (target->size() != size(target))Di2015NewLine\\BUG("in addRoot 2");Di2015NewLine#endifDi2015NewLine\return res;Di2015NewLine};Di2015NewLineDi2015NewLine/**Di2015NewLine * This function is called from the public add(key) function,Di2015NewLine * and returns the new root node.Di2015NewLine */Di2015NewLineRBSTNode* RBST::randomAdd(RBSTNode* target, const Key& key)Di2015NewLine{Di2015NewLine\countAdd++;Di2015NewLineDi2015NewLine\if (target == NULL)Di2015NewLine\{Di2015NewLine\\m_size++;Di2015NewLine\\return new RBSTNode(key);Di2015NewLine\}Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout << "randomAdd(";Di2015NewLine\target->print(cout) << ", \\"" << key << "\\") called." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\int r = (rand() % target->size()) + 1;Di2015NewLineDi2015NewLine\// here is where we add the target as root!Di2015NewLine\if (r == 1)Di2015NewLine\{Di2015NewLine\\m_size++; \// TODO: Need to lock.Di2015NewLine\\return addRoot(target, key);Di2015NewLine\}Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\printf("randomAdd recursion part, ");Di2015NewLine#endifDi2015NewLineDi2015NewLine\// otherwise, continue recursing!Di2015NewLine\if (*target <= key)Di2015NewLine\{Di2015NewLine#ifdef DEBUGDi2015NewLine\printf("target <= key\\n");Di2015NewLine#endifDi2015NewLine\\target->setRight( randomAdd(target->right(), key) );Di2015NewLine\\target->incSize(); // TODO: Need to lock.Di2015NewLine#ifdef DEBUGDi2015NewLine\\if (target->right()->size() != size(target->right()))Di2015NewLine\\\BUG("in randomAdd 1");Di2015NewLine#endifDi2015NewLine\}Di2015NewLine\elseDi2015NewLine\{Di2015NewLine#ifdef DEBUGDi2015NewLine\printf("target > key\\n");Di2015NewLine#endifDi2015NewLine\\target->setLeft( randomAdd(target->left(), key) );Di2015NewLine\\target->incSize(); // TODO: Need to lock.Di2015NewLine#ifdef DEBUGDi2015NewLine\\if (target->left()->size() != size(target->left()))Di2015NewLine\\\BUG("in randomAdd 2");Di2015NewLine#endifDi2015NewLine\}Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\printf("randomAdd return part\\n");Di2015NewLine#endifDi2015NewLineDi2015NewLine\m_size++;\\// TODO: Need to lock.Di2015NewLine\return target;Di2015NewLine};Di2015NewLineDi2015NewLine/////////////////////////////////////////////////////////////Di2015NewLine/////////////////////  DEL FUNCTIONS ////////////////////////Di2015NewLine/////////////////////////////////////////////////////////////Di2015NewLineDi2015NewLine/**Di2015NewLine * Deletes a node with the passed key.Di2015NewLine * Returns the root node.Di2015NewLine * Decrements m_size if something was deleted.Di2015NewLine */Di2015NewLineRBSTNode* RBST::del(RBSTNode* target, const Key& key)Di2015NewLine{Di2015NewLine\countDelete++;Di2015NewLineDi2015NewLine\if (target == NULL) return NULL;Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout << "del(";Di2015NewLine\target->print(cout) << ", \\"" << key << "\\") called." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\RBSTNode* ret = NULL;Di2015NewLineDi2015NewLine\// found the node to deleteDi2015NewLine\if (*target == key)Di2015NewLine\{Di2015NewLine\\ret = join(target->left(), target->right());Di2015NewLineDi2015NewLine\\m_size--;Di2015NewLine\\delete target;Di2015NewLineDi2015NewLine\\return ret; // return the newly built joined subtree!Di2015NewLine\}Di2015NewLineDi2015NewLine\// store a temporary size before recursive deletion.Di2015NewLine\unsigned int size = m_size;Di2015NewLineDi2015NewLine\if (*target < key)\target->setRight( del(target->right(), key) );Di2015NewLine\else\\\\target->setLeft( del(target->left(), key) );Di2015NewLineDi2015NewLine\// if the previous recursion changed the size, we need to decrement the size of this target too.Di2015NewLine\if (m_size < size) target->decrSize();Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\if (RBST::size(target) != target->size())Di2015NewLine\\BUG("in del");Di2015NewLine#endifDi2015NewLineDi2015NewLine\return target;Di2015NewLine};Di2015NewLineDi2015NewLine/**Di2015NewLine * Joins the two subtrees represented by left and rightDi2015NewLine * by randomly choosing which to make the root, weighted on theDi2015NewLine * size of the sub-tree.Di2015NewLine */Di2015NewLineRBSTNode* RBST::join(RBSTNode* left, RBSTNode* right)Di2015NewLine{Di2015NewLine\if (left == NULL) return right;Di2015NewLine\if (right == NULL) return left;Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\cout << "join(";Di2015NewLine\left->print(cout);Di2015NewLine\cout << ",";Di2015NewLine\right->print(cout) << ") called." << endl;Di2015NewLine#endifDi2015NewLineDi2015NewLine\// Find the chance that we use the left tree, based on its size over the total tree size.Di2015NewLine\// 3 s.d. randomness :-p e.g. 60.3% chance.Di2015NewLine\bool useLeft = ((rand()%1000) < (signed)((float)left->size()/(float)(left->size() + right->size()) * 1000.0));Di2015NewLineDi2015NewLine\RBSTNode* subtree = NULL;Di2015NewLineDi2015NewLine\if (useLeft)Di2015NewLine\{Di2015NewLine\\subtree = join(left->right(), right);Di2015NewLineDi2015NewLine\\left->setRight(subtree)Di2015NewLine\\\->setSize((left->left() == NULL ? 0 : left->left()->size())Di2015NewLine\\\\\\+ subtree->size() + 1 );Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\\if (size(left) != left->size())Di2015NewLine\\\BUG("in join 1");Di2015NewLine#endifDi2015NewLineDi2015NewLine\\return left;Di2015NewLine\}Di2015NewLineDi2015NewLine\subtree = join(right->left(), left);Di2015NewLineDi2015NewLine\right->setLeft(subtree)Di2015NewLine\\ ->setSize((right->right() == NULL ? 0 : right->right()->size())Di2015NewLine\\\\\+ subtree->size() + 1);Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLine\if (size(right) != right->size())Di2015NewLine\\BUG("in join 2");Di2015NewLine#endifDi2015NewLineDi2015NewLine\return right;Di2015NewLine};Di2015NewLineDi2015NewLine/////////////////////////////////////////////////////////////Di2015NewLine/////////////////////  FIND FUNCTIONS ///////////////////////Di2015NewLine/////////////////////////////////////////////////////////////Di2015NewLineDi2015NewLine/**Di2015NewLine * Tries to find the key in the tree startingDi2015NewLine * search from target.Di2015NewLine *Di2015NewLine * Returns NULL if it was not found.Di2015NewLine */Di2015NewLineRBSTNode* RBST::find(RBSTNode* target, const Key& key)Di2015NewLine{Di2015NewLine\countFind++; // Could use private method only counting the first call.Di2015NewLine\if (target == NULL) return NULL; // not found.Di2015NewLine\if (*target == key) return target; // found (does string override ==?)Di2015NewLine\if (*target < key) return find(target->right(), key); // search for gt to the right.Di2015NewLine\return find(target->left(), key); // search for lt to the left.Di2015NewLine};Di2015NewLineDi2015NewLine#ifdef DEBUGDi2015NewLineDi2015NewLineunsigned int RBST::size(RBSTNode* x)Di2015NewLine{Di2015NewLine\if (x == NULL) return 0;Di2015NewLine\return 1 + size(x->left()) + size(x->right());Di2015NewLine}Di2015NewLineDi2015NewLine#endifDi2015NewLine
576386Di2015UniqueSeparatordouble sqrt(double x) {Di2015NewLine    var goodEnough = new Func<double, bool>(guess =>Di2015NewLine        Math.Abs(square(guess) - x) < 0.001Di2015NewLine    );Di2015NewLine    var improve = new Func<double, double>(guess =>Di2015NewLine        average(guess, x / guess)Di2015NewLine    );Di2015NewLine    var sqrtIter = default(Func<double, double>);Di2015NewLine    sqrtIter = new Func<double, double>(guess =>Di2015NewLine        goodEnough(guess) ? guess : sqrtIter(improve(guess))Di2015NewLine    );Di2015NewLine    return sqrtIter(1.0);Di2015NewLine}Di2015NewLine
576520Di2015UniqueSeparatorCreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)Di2015NewLine
576542Di2015UniqueSeparator<ListBox DisplayMemberPath="LastName" ... />Di2015NewLine
576542Di2015UniqueSeparator<ListBox ...>Di2015NewLine    <ListBox.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <StackPanel>Di2015NewLine                <TextBlock Text="{Binding FirstName}" />Di2015NewLine                <TextBlock Text="{Binding LastName}" />Di2015NewLine            </StackPanel>Di2015NewLine        </DataTemplate>Di2015NewLine    </ListBox.ItemTemplate>Di2015NewLine</ListBox>Di2015NewLine
576691Di2015UniqueSeparatorprivate string LoadSQLStatement(string statementName)Di2015NewLine{Di2015NewLine    string sqlStatement = string.Empty;Di2015NewLineDi2015NewLine    string namespacePart = "ConsoleApplication1";Di2015NewLine    string resourceName = namespacePart + "." + statementName;Di2015NewLineDi2015NewLine    using(Stream stm = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName))Di2015NewLine    {Di2015NewLine        if (stm != null)Di2015NewLine        {Di2015NewLine            sqlStatement = new StreamReader(stm).ReadToEnd();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return sqlStatement;Di2015NewLine}Di2015NewLine
576691Di2015UniqueSeparatorstring mySQLStatement = LoadSQLStatement("MySQLStatement.sql");Di2015NewLine
576743Di2015UniqueSeparator// create the LINQ-to-SQL Data contextDi2015NewLineUsersAndRolesDataContext dc = new UsersAndRolesDataContext();Di2015NewLineDi2015NewLine// create new instace of "UserTbl" objectDi2015NewLineUserTbl newUser = new UserTbl();Di2015NewLinenewUser.UserID = "newuser";Di2015NewLinenewUser.Name = "Some NewUser";Di2015NewLinenewUser.EMail = "newuser@somewhere.org";Di2015NewLinenewUser.Password = "TopSecret";Di2015NewLineDi2015NewLine// add new user to the table of users in the data contextDi2015NewLinedc.UserTbls.InsertOnSubmit(newUser);Di2015NewLineDi2015NewLine// create new instance of a roleDi2015NewLineRolesTbl newRole = new RolesTbl();Di2015NewLinenewRole.RoleId = "ADMIN";Di2015NewLinenewRole.RoleName = "Administrators";Di2015NewLinenewRole.Description = "User with administrative rights";Di2015NewLineDi2015NewLine// add new role into LINQ-to-SQL Data contextDi2015NewLinedc.RolesTbls.InsertOnSubmit(newRole);Di2015NewLineDi2015NewLine// write out all changes back to databaseDi2015NewLinedc.SubmitChanges();Di2015NewLine
576795Di2015UniqueSeparatorxe.Element("Product") // Select the Product desc="household" elementDi2015NewLine  .Elements() // Select the elements below itDi2015NewLine  .Select(element => new { Name=(string) element.Attribute("desc"),Di2015NewLine                           Count=element.Elements().Count() });Di2015NewLine
576795Di2015UniqueSeparatorxe.Descendants() // Select all descendant elementsDi2015NewLine  .Attributes() // All attributes from all elementsDi2015NewLine  // Limit it to "category" elementsDi2015NewLine  .Where(attr => attr.Name == "category")Di2015NewLine  // Select the valueDi2015NewLine  .Select(attr => attr.Value)Di2015NewLine  // Remove duplicatesDi2015NewLine  .Distinct();Di2015NewLine
576795Di2015UniqueSeparator.OrderBy(x => x)
576795Di2015UniqueSeparatorxe.Descendants() // Select all elementsDi2015NewLine  // Only consider those with a "Costly" descriptionDi2015NewLine  .Where(element => (string) element.Attribute("desc") == "Costly")Di2015NewLine  // Select the subelements of that element, and flatten the resultDi2015NewLine  .SelectMany(element => element.Elements());Di2015NewLine
576864Di2015UniqueSeparatorstatic
576864Di2015UniqueSeparator.cctor
576864Di2015UniqueSeparator.ctor
576878Di2015UniqueSeparatorprotected override void OnPaint(PaintEventArgs e)Di2015NewLine{Di2015NewLine    base.OnPaint(e);Di2015NewLineDi2015NewLine    Graphics graphicsObject = e.Graphics;Di2015NewLineDi2015NewLine    using (Brush aGradientBrush = new LinearGradientBrush(new Point(0, 0), new Point(50, 0), Color.Blue, Color.Red))Di2015NewLine    {Di2015NewLine        using (Pen aGradientPen = new Pen(aGradientBrush))Di2015NewLine        {Di2015NewLine            graphicsObject.DrawLine(aGradientPen, new Point(0, 10), new Point(100, 10));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
576897Di2015UniqueSeparator    foreach (E e1 in q1)Di2015NewLine    {Di2015NewLine        foreach (E e2 in q2)Di2015NewLine        {Di2015NewLine            if (e1.CompareTo(e2) != 0)Di2015NewLine            {Di2015NewLine                q3.Enqueue(e1);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
576897Di2015UniqueSeparator[1, 2, 3]
576897Di2015UniqueSeparator[1, 2, 3]
576897Di2015UniqueSeparator[1, 1, 2, 2, 3, 3]
577105Di2015UniqueSeparatorDataGridView
577105Di2015UniqueSeparatorIDataErrorInfo
577105Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Windows.Forms;Di2015NewLineclass Pair : IDataErrorInfoDi2015NewLine{Di2015NewLine    internal IList<Pair> Parent { get; set; }Di2015NewLine    public string Key { get; set; }Di2015NewLine    public string Value { get; set; }Di2015NewLineDi2015NewLine    string IDataErrorInfo.ErrorDi2015NewLine    {Di2015NewLine        get { return ""; }Di2015NewLine    }Di2015NewLineDi2015NewLine    string IDataErrorInfo.this[string columnName]Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {   Di2015NewLine            if(columnName == "Key" && Parent != null && Parent.Any(Di2015NewLine                x=> x.Key == this.Key && !ReferenceEquals(x,this)))Di2015NewLine            {Di2015NewLine                return "duplicate key";Di2015NewLine            }Di2015NewLine            return "";        Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        BindingList<Pair> pairs = new BindingList<Pair>();Di2015NewLine        // todo: fill from StringDictionaryDi2015NewLine        pairs.AddingNew += (s,a) =>Di2015NewLine        {Di2015NewLine            a.NewObject = new Pair { Parent = pairs };Di2015NewLine        };Di2015NewLine        Application.Run(new Form {Di2015NewLine            Controls = {new DataGridView {Di2015NewLine                Dock = DockStyle.Fill,Di2015NewLine                DataSource = pairsDi2015NewLine            }}Di2015NewLine        });Di2015NewLine    }Di2015NewLine}Di2015NewLine
577144Di2015UniqueSeparatorctrl1.Contains(ctrl3);Di2015NewLine
577152Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLinestatic class Program {Di2015NewLine    static void Main() {Di2015NewLine        int count = Test.Count;Di2015NewLine    }Di2015NewLineDi2015NewLine    [Obsolete("Should error", true)]Di2015NewLine    public static List<string> Test {Di2015NewLine        get {throw new NotImplementedException();}Di2015NewLine    }Di2015NewLine}Di2015NewLine
577166Di2015UniqueSeparatordisposing
577196Di2015UniqueSeparator\\"video_id\\":\\s*\\"(?<videoID>.*?)\\"(?:.*?)\\"l\\":\\s*(?<l>.*?),(?:.*?)\\"t\\":\\s*\\"(?<t>.*?)\\"Di2015NewLine
577196Di2015UniqueSeparatorstring sample = "\\"video_id\\": \\"lUoiKMxSUCw\\", \\"l\\": 105, \\"sk\\": \\"-2fL6AANk__E49CRzF6_Q8F7yBPWdb9QR\\", \\"fmt_map\\": \\"35/640000/9/0/115,34/0/9/0/115,5/0/7/0/0\\", \\"t\\": \\"vjVQa1PpcFMbYtdhqxUip5Vtm856lwh7lXZ6lH6nZAg=\\",";Di2015NewLinestring regPattern = "\\\\\\"video_id\\\\\\":\\\\s*\\\\\\"(?<videoID>.*?)\\\\\\"(?:.*?)\\\\\\"l\\\\\\":\\\\s*(?<l>.*?),(?:.*?)\\\\\\"t\\\\\\":\\\\s*\\\\\\"(?<t>.*?)\\\\\\"";Di2015NewLineRegex reg = new Regex(regPattern, RegexOptions.Singleline);Di2015NewLineif (reg.IsMatch(sample))Di2015NewLine{Di2015NewLine    Match m = reg.Match(sample);Di2015NewLine    GroupCollection gColl = m.Groups;Di2015NewLine    Console.WriteLine("VideoID:{0}", gColl["videoID"].Value);Di2015NewLine    Console.WriteLine("l:{0}", gColl["l"].Value);Di2015NewLine    Console.WriteLine("t:{0}", gColl["t"].Value);Di2015NewLine}Di2015NewLine
577208Di2015UniqueSeparatorWebClient
577208Di2015UniqueSeparatorUploadStringAsync
577208Di2015UniqueSeparatorstring url = App.Current.Host.Source.AbsoluteUri;Di2015NewLine
577232Di2015UniqueSeparatorXmlDocument
577232Di2015UniqueSeparatorXDocument
577318Di2015UniqueSeparatorBuild Action
577318Di2015UniqueSeparatorApplicationDefinition
577422Di2015UniqueSeparator[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]Di2015NewLinepublic static extern short GetKeyState(int keyCode);Di2015NewLine
577422Di2015UniqueSeparatorbool CapsLock = (((ushort)GetKeyState(0x14)) & 0xffff) != 0;Di2015NewLinebool NumLock = (((ushort)GetKeyState(0x90)) & 0xffff) != 0;Di2015NewLinebool ScrollLock = (((ushort)GetKeyState(0x91)) & 0xffff) != 0;Di2015NewLine
577422Di2015UniqueSeparatorControl.IsKeyLocked
577451Di2015UniqueSeparator// This doesn't try to cope with negative numbers :)Di2015NewLinepublic static IEnumerable<int> DivideEvenly(int numerator, int denominator)Di2015NewLine{Di2015NewLine    int rem;Di2015NewLine    int div = Math.DivRem(numerator, denominator, out rem);Di2015NewLineDi2015NewLine    for (int i=0; i < denominator; i++)Di2015NewLine    {Di2015NewLine        yield return i < rem ? div+1 : div;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineTest:Di2015NewLineDi2015NewLineforeach (int i in DivideEvenly(100, 7))Di2015NewLine{Di2015NewLine    Console.WriteLine(i);Di2015NewLine}Di2015NewLine
577508Di2015UniqueSeparatorth.Abort()
577508Di2015UniqueSeparatorThreadAbortException
577508Di2015UniqueSeparatorth
577545Di2015UniqueSeparator.Sum(æ => (decmal?) æ.Weight) ?? 0.0M,Di2015NewLine
577545Di2015UniqueSeparatorSumOrZero
577545Di2015UniqueSeparatorSum
577545Di2015UniqueSeparatornull
577545Di2015UniqueSeparatorIEnumerable
577545Di2015UniqueSeparatorIQuearyable
577545Di2015UniqueSeparatorSumOrZero
577545Di2015UniqueSeparatorIQueryables
577620Di2015UniqueSeparatorException
577620Di2015UniqueSeparatorTransactionScope
577620Di2015UniqueSeparatorusing(var foo = GetDodgyDisposableObject().Wrap()) {Di2015NewLine   foo.BaseObject.SomeMethod();Di2015NewLine   foo.BaseObject.SomeOtherMethod(); // etcDi2015NewLine} // now exits properly even if Dispose() throwsDi2015NewLine
577620Di2015UniqueSeparatorDispose()
577620Di2015UniqueSeparatorusing
577660Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLinepublic enum TCP_TABLE_CLASS : intDi2015NewLine{Di2015NewLine    TCP_TABLE_BASIC_LISTENER,Di2015NewLine    TCP_TABLE_BASIC_CONNECTIONS,Di2015NewLine    TCP_TABLE_BASIC_ALL,Di2015NewLine    TCP_TABLE_OWNER_PID_LISTENER,Di2015NewLine    TCP_TABLE_OWNER_PID_CONNECTIONS,Di2015NewLine    TCP_TABLE_OWNER_PID_ALL,Di2015NewLine    TCP_TABLE_OWNER_MODULE_LISTENER,Di2015NewLine    TCP_TABLE_OWNER_MODULE_CONNECTIONS,Di2015NewLine    TCP_TABLE_OWNER_MODULE_ALLDi2015NewLine} Di2015NewLineDi2015NewLine[StructLayout(LayoutKind.Sequential)]Di2015NewLinepublic struct MIB_TCPROW_OWNER_PIDDi2015NewLine{Di2015NewLine    public uint state;Di2015NewLine    public uint localAddr;Di2015NewLine    public byte localPort1;Di2015NewLine    public byte localPort2;Di2015NewLine    public byte localPort3;Di2015NewLine    public byte localPort4;Di2015NewLine    public uint remoteAddr;Di2015NewLine    public byte remotePort1;Di2015NewLine    public byte remotePort2;Di2015NewLine    public byte remotePort3;Di2015NewLine    public byte remotePort4;Di2015NewLine    public int owningPid;Di2015NewLineDi2015NewLine    public ushort LocalPortDi2015NewLine{Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return BitConverter.ToUInt16(Di2015NewLine                new byte[2] { localPort2, localPort1}, 0);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public ushort RemotePortDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return BitConverter.ToUInt16(Di2015NewLine                new byte[2] { remotePort2, remotePort1}, 0);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[StructLayout(LayoutKind.Sequential)]Di2015NewLinepublic struct MIB_TCPTABLE_OWNER_PIDDi2015NewLine{Di2015NewLine    public uint dwNumEntries;Di2015NewLine    MIB_TCPROW_OWNER_PID table;Di2015NewLine}Di2015NewLineDi2015NewLine[DllImport("iphlpapi.dll", SetLastError=true)]Di2015NewLinestatic extern uint GetExtendedTcpTable(IntPtr pTcpTable, Di2015NewLine    ref int dwOutBufLen, Di2015NewLine    bool sort, Di2015NewLine    int ipVersion, Di2015NewLine    TCP_TABLE_CLASS tblClass,Di2015NewLine    int reserved);Di2015NewLineDi2015NewLinepublic static MIB_TCPROW_OWNER_PID[] GetAllTcpConnections()Di2015NewLine{Di2015NewLine    MIB_TCPROW_OWNER_PID[] tTable;Di2015NewLine    int AF_INET = 2;    // IP_v4Di2015NewLine    int buffSize = 0;Di2015NewLineDi2015NewLine    // how much memory do we need?Di2015NewLine    uint ret = GetExtendedTcpTable(IntPtr.Zero, Di2015NewLine        ref buffSize, Di2015NewLine        true, Di2015NewLine        AF_INET, Di2015NewLine        TCP_TABLE_CLASS.TCP_TABLE_OWNER_PID_ALL,Di2015NewLine        0);        Di2015NewLine    if (ret != 0 && ret != 122) // 122 insufficient buffer sizeDi2015NewLine        throw new Exception("bad ret on check " + ret);Di2015NewLine    IntPtr buffTable = Marshal.AllocHGlobal(buffSize);Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        ret = GetExtendedTcpTable(buffTable, Di2015NewLine            ref buffSize, Di2015NewLine            true, Di2015NewLine            AF_INET, Di2015NewLine            TCP_TABLE_CLASS.TCP_TABLE_OWNER_PID_ALL, Di2015NewLine            0);Di2015NewLine        if (ret != 0)Di2015NewLine            throw new Exception("bad ret "+ ret);        Di2015NewLineDi2015NewLine        // get the number of entries in the tableDi2015NewLine        MIB_TCPTABLE_OWNER_PID tab = Di2015NewLine            (MIB_TCPTABLE_OWNER_PID)Marshal.PtrToStructure(Di2015NewLine                buffTable, Di2015NewLine                typeof(MIB_TCPTABLE_OWNER_PID));Di2015NewLine         IntPtr rowPtr = (IntPtr)((long)buffTable + Di2015NewLine             Marshal.SizeOf(tab.dwNumEntries));Di2015NewLine        tTable = new MIB_TCPROW_OWNER_PID[tab.dwNumEntries];Di2015NewLineDi2015NewLine        for (int i = 0; i < tab.dwNumEntries; i++)Di2015NewLine        {Di2015NewLine            MIB_TCPROW_OWNER_PID tcpRow = (MIB_TCPROW_OWNER_PID)MarshalDi2015NewLine                .PtrToStructure(rowPtr, typeof(MIB_TCPROW_OWNER_PID));Di2015NewLine            tTable[i] = tcpRow;Di2015NewLine            // next entryDi2015NewLine            rowPtr = (IntPtr)((long)rowPtr + Marshal.SizeOf(tcpRow));   Di2015NewLine        }Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        // Free the MemoryDi2015NewLine        Marshal.FreeHGlobal(buffTable);Di2015NewLine    }Di2015NewLine    return tTable;Di2015NewLine}Di2015NewLine
577803Di2015UniqueSeparatorSettings
577803Di2015UniqueSeparatorSave()
577803Di2015UniqueSeparatorDefault
577938Di2015UniqueSeparator// Dumps all email in Outlook to console window.Di2015NewLine// Prompts user with warning that an application is attempting to read Outlook data.Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing Outlook = Microsoft.Office.Interop.Outlook;Di2015NewLineDi2015NewLinenamespace OutlookEmailDi2015NewLine{Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Outlook.Application app = new Outlook.Application();Di2015NewLine        Outlook.NameSpace outlookNs = app.GetNamespace("MAPI");Di2015NewLine        Outlook.MAPIFolder emailFolder = outlookNs.GetDefaultFolder(Microsoft.Office.Interop.Outlook.OlDefaultFolders.olFolderInbox);Di2015NewLineDi2015NewLine        foreach (Outlook.MailItem item in emailFolder.Items)Di2015NewLine        {Di2015NewLine            Console.WriteLine(item.SenderEmailAddress + " " + item.Subject + "\\n" + item.Body);Di2015NewLine        }Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLine}Di2015NewLine
577974Di2015UniqueSeparatorpublic static class ReturnValueDi2015NewLine{Di2015NewLine    public const int Success = 0;Di2015NewLine    public const int FailReason1 = 1;Di2015NewLine    public const int FailReason2 = 2;Di2015NewLine    //Etc...Di2015NewLine}Di2015NewLine
577974Di2015UniqueSeparatorpublic static int main(string[] args){Di2015NewLine    return ReturnValue.Success;Di2015NewLine}Di2015NewLine
577974Di2015UniqueSeparator[Flags] // indicates bitwise operations occur on this enumDi2015NewLinepublic enum DaysOfWeek : byte // byte type to limit sizeDi2015NewLine{Di2015NewLine    Sunday = 1,Di2015NewLine    Monday = 2,Di2015NewLine    Tuesday = 4,Di2015NewLine    Wednesday = 8,Di2015NewLine    Thursday = 16,Di2015NewLine    Friday = 32,Di2015NewLine    Saturday = 64,Di2015NewLine    Weekend = Sunday | Saturday,Di2015NewLine    Weekdays = Monday | Tuesday | Wednesday | Thursday | FridayDi2015NewLine}Di2015NewLine
577974Di2015UniqueSeparatorpublic static class DaysOfWeekEvaluatorDi2015NewLine{Di2015NewLine    public static bool IsWeekends(DaysOfWeek days)Di2015NewLine    {Di2015NewLine        return (days & DaysOfWeek.Weekend) == DaysOfWeek.Weekend;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool IsAllWeekdays(DaysOfWeek days)Di2015NewLine    {Di2015NewLine        return (days & DaysOfWeek.Weekdays) == DaysOfWeek.Weekdays;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool HasWeekdays(DaysOfWeek days)Di2015NewLine    {Di2015NewLine        return ((int) (days & DaysOfWeek.Weekdays)) > 0;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool HasWeekendDays(DaysOfWeek days)Di2015NewLine    {Di2015NewLine        return ((int) (days & DaysOfWeek.Weekend)) > 0;Di2015NewLine    }Di2015NewLine}Di2015NewLine
577984Di2015UniqueSeparatorpublic class RestrictedRange<T> where T : IComparableDi2015NewLine{        Di2015NewLine    private T _Value;Di2015NewLineDi2015NewLine    public T MinValue { get; private set; }Di2015NewLine    public T MaxValue { get; private set; }Di2015NewLineDi2015NewLine    public RestrictedRange(T minValue, T maxValue)Di2015NewLine        : this(minValue, maxValue, minValue)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public RestrictedRange(T minValue, T maxValue, T value)Di2015NewLine    {Di2015NewLine        if (minValue.CompareTo(maxValue) > 0)Di2015NewLine        {Di2015NewLine            throw new ArgumentOutOfRangeException("minValue");Di2015NewLine        }Di2015NewLineDi2015NewLine        this.MinValue = minValue;Di2015NewLine        this.MaxValue = maxValue;Di2015NewLine        this.Value = value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public T ValueDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _Value;Di2015NewLine        }Di2015NewLineDi2015NewLine        setDi2015NewLine        {Di2015NewLine            if ((0 < MinValue.CompareTo(value)) || (MaxValue.CompareTo(value) < 0))Di2015NewLine            {Di2015NewLine                throw new ArgumentOutOfRangeException("value");Di2015NewLine            }Di2015NewLine            _Value = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator T(RestrictedRange<T> value)Di2015NewLine    {Di2015NewLine        return value.Value;Di2015NewLine    }        Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return MinValue + " <= " + Value + " <= " + MaxValue;Di2015NewLine    }Di2015NewLine}Di2015NewLine
577984Di2015UniqueSeparatorvar adultAge = new RestrictedRange<int>(18, 130, 21);Di2015NewLineadultAge.Value++;Di2015NewLineint currentAge = adultAge; // = 22Di2015NewLine
577984Di2015UniqueSeparatorvar stockLevel = new RestrictedRange<int>(0, 1000)Di2015NewLinevar percentage = new RestrictedRange<double>(0.0, 1.0);Di2015NewLine
578020Di2015UniqueSeparatordgv.DataSource = log.Where(x=>x.IsActive && x.Type == 3).ToList();Di2015NewLine
578020Di2015UniqueSeparatorList<T>.FindAll
578020Di2015UniqueSeparatordgv.DataSource = log.FindAll(delegate (SomeType x) {Di2015NewLine    return x.IsActive && x.Type == 3;});Di2015NewLine
578020Di2015UniqueSeparatorIBindingListView.SupportsFiltering
578020Di2015UniqueSeparatorIBindingListView.Filter
578020Di2015UniqueSeparatorBindingList<T>
578242Di2015UniqueSeparatorvar zipLinqQuery =Di2015NewLine    from z in db.ZIPMASTERsDi2015NewLine    where z.CORP == 12Di2015NewLine    && z.ZIPBEG.CompareTo("85546 ") <= 0Di2015NewLine    && z.ZIPEND.CompareTo("85546 ") >= 0Di2015NewLine    select z;Di2015NewLine
578347Di2015UniqueSeparatorOutputStream
578347Di2015UniqueSeparatorwrite( int b )
578347Di2015UniqueSeparatorPrintStream
578347Di2015UniqueSeparatorOutputStream
578347Di2015UniqueSeparatorpublic class L4JOS extends OutputStream {Di2015NewLine  logger = Logger.getLogger( "std.out" );Di2015NewLine  private int lineEnd = (int)'\\n';Di2015NewLine  private ByteArrayOutputStream baos = new ByteArrayOutputStream();Di2015NewLineDi2015NewLine  public void write( int b ) throws IOException {Di2015NewLine    baos.write( b );Di2015NewLine    if ( b == lineEnd ) {Di2015NewLine      logger.info( baos.toString() );Di2015NewLine      baos.reset();Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
578500Di2015UniqueSeparatorpublic T GetInstance<T>(string type)Di2015NewLine{Di2015NewLine    return (T)Activator.CreateInstance(Type.GetType(type));Di2015NewLine}Di2015NewLine
578671Di2015UniqueSeparatorLifecycledComponentsReleasePolicy
578671Di2015UniqueSeparatorNoTrackingReleasePolicy
578850Di2015UniqueSeparatorSelectionColor
578850Di2015UniqueSeparator    int line = 0;Di2015NewLine    foreach (string file in myfiles)Di2015NewLine    {Di2015NewLine        // Whatever method you want to choose a color, hereDi2015NewLine        // I'm just alternating between red and blueDi2015NewLine        richTextBox1.SelectionColor = Di2015NewLine            line % 2 == 0 ? Color.Red : Color.Blue;Di2015NewLineDi2015NewLine        // AppendText is better than rtb.Text += ...Di2015NewLine        richTextBox1.AppendText(file + "\\r\\n");Di2015NewLine        line++;Di2015NewLine    }Di2015NewLine
578972Di2015UniqueSeparator//...Di2015NewLinecheckAvailUserControlLoad.Name = "Something"Di2015NewLine//...Di2015NewLineControls.Add(checkAvailUserControlLoad);Di2015NewLine
578972Di2015UniqueSeparatorControls.ContainsKey("Something")Di2015NewLine
578972Di2015UniqueSeparatorControls["Something"]
579001Di2015UniqueSeparator[Test]Di2015NewLinepublic void MyTest() Di2015NewLine{Di2015NewLine    WeakReference reference;Di2015NewLine    new Action(() => Di2015NewLine    {Di2015NewLine        var service = new Service();Di2015NewLine        // Do things with service that might cause a memory leak...Di2015NewLineDi2015NewLine        reference = new WeakReference(service, true);Di2015NewLine    })();Di2015NewLineDi2015NewLine    // Service should have gone out of scope about now, Di2015NewLine    // so the garbage collector can clean it upDi2015NewLine    GC.Collect();Di2015NewLine    GC.WaitForPendingFinalizers();Di2015NewLineDi2015NewLine    Assert.IsNull(reference.Target);Di2015NewLine}Di2015NewLine
579059Di2015UniqueSeparatorSignedCms
579059Di2015UniqueSeparatorSystem.Security.Cryptography.Pkcs
579059Di2015UniqueSeparatorDecode
579210Di2015UniqueSeparatorIEnumerable
579232Di2015UniqueSeparator[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)] Di2015NewLineclass MySingleton : ...Di2015NewLine{...}Di2015NewLine
579351Di2015UniqueSeparatorALTER TABLE MyTable ADD id INT IDENTITY(1,1) PRIMARY KEY CLUSTEREDDi2015NewLine
579401Di2015UniqueSeparator& operator
579401Di2015UniqueSeparator&&
579401Di2015UniqueSeparatorfalse
579401Di2015UniqueSeparator| operator
579401Di2015UniqueSeparatortrue
579432Di2015UniqueSeparatorroutes.MapRoute("Movie", "Movie/{movieId}", Di2015NewLine    new { controller = "Movie", action = "Index", movie = "" });Di2015NewLine
579609Di2015UniqueSeparatorclass Calculator(object):Di2015NewLine    def add(self, a, b):Di2015NewLine        return a + bDi2015NewLine
579609Di2015UniqueSeparatorScriptEngine engine = Python.CreateEngine();Di2015NewLineScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py");Di2015NewLineScriptScope scope = engine.CreateScope();Di2015NewLineDi2015NewLineObjectOperations op = engine.Operations;Di2015NewLineDi2015NewLinesource.Execute(scope); // class object createdDi2015NewLineobject klaz = scope.GetVariable("Calculator"); // get the class objectDi2015NewLineobject instance = op.Call(klaz); // create the instanceDi2015NewLineobject method = op.GetMember(instance, "add"); // get a methodDi2015NewLineint result = (int)op.Call(method, 4, 5); // call method and get result (9)Di2015NewLine
579609Di2015UniqueSeparatorScriptEngine engine = Python.CreateEngine();Di2015NewLineScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py");Di2015NewLineScriptScope scope = engine.CreateScope();Di2015NewLinesource.Execute(scope);Di2015NewLineDi2015NewLinedynamic Calculator = scope.GetVariable("Calculator");Di2015NewLinedynamic calc = Calculator();Di2015NewLineint result = calc.add(4, 5);Di2015NewLine
579609Di2015UniqueSeparatorInstall-Package IronPythonDi2015NewLine
579621Di2015UniqueSeparatorSortedDictionary<T,U>
579621Di2015UniqueSeparatorclass Set<T> : SortedDictionary<T, bool>Di2015NewLine{Di2015NewLine    public void Add(T item)Di2015NewLine    {Di2015NewLine        this.Add(item, true);Di2015NewLine    }Di2015NewLine}Di2015NewLine
579621Di2015UniqueSeparatorHashSet<T>
579621Di2015UniqueSeparatorTreeSet<T>
579743Di2015UniqueSeparatorBufferedStream
579743Di2015UniqueSeparatorMemoryStream localBuffer = new MemoryStream();Di2015NewLinebool ReadNextChunk()Di2015NewLine{Di2015NewLine    // clearDi2015NewLine    localBuffer.Position = 0;Di2015NewLine    localBuffer.SetLength(0);Di2015NewLine    // get dataDi2015NewLine    byte[] chunk = null; // TODO - read from sourceDi2015NewLine    if(chunk == null || chunk.Length == 0) return false; // EOFDi2015NewLine    localBuffer.Write(chunk, 0, chunk.Length);Di2015NewLine    localBuffer.Position = 0;Di2015NewLine    return true;Di2015NewLine}Di2015NewLinepublic override int Read(byte[] buffer, int offset, int count)Di2015NewLine{Di2015NewLine    int bytes;Di2015NewLine    if ((bytes = localBuffer.Read(buffer, offset, count)) > 0) return bytes;Di2015NewLine    if (!ReadNextChunk()) return 0;Di2015NewLine    return localBuffer.Read(buffer, offset, count);Di2015NewLine}Di2015NewLine
579773Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    public Type someClass;Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLineclass BarDi2015NewLine{Di2015NewLine    private FieldInfo some_Field;Di2015NewLineDi2015NewLine    public Assign(string fieldName)Di2015NewLine    {Di2015NewLine        Foo foo = new Foo();Di2015NewLine        some_Field = foo.someClass.GetField(fieldName);Di2015NewLine    }Di2015NewLine}Di2015NewLine
579973Di2015UniqueSeparatorColorMap[] maps = new ColorMap[someNum]Di2015NewLine//  add mappingsDi2015NewLineimageAttrs.SetRemapTable(maps);Di2015NewLine
579980Di2015UniqueSeparatorPropertyInfo
579980Di2015UniqueSeparatorpublic static PropertyInfo GetProperty<T>(Expression<Func<T, object>> expression)  Di2015NewLine{Di2015NewLine    MemberExpression memberExpression = null;Di2015NewLineDi2015NewLine    if (expression.Body.NodeType == ExpressionType.Convert)Di2015NewLine    {Di2015NewLine        memberExpression = ((UnaryExpression) expression.Body).Operand as MemberExpression;Di2015NewLine    }Di2015NewLine    else if (expression.Body.NodeType == ExpressionType.MemberAccess)Di2015NewLine    {Di2015NewLine        memberExpression = expression.Body as MemberExpression;Di2015NewLine    }Di2015NewLineDi2015NewLine    if (memberExpression == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentException("Not a member access", "expression");Di2015NewLine    }Di2015NewLineDi2015NewLine    return memberExpression.Member as PropertyInfo;Di2015NewLine}Di2015NewLine
580159Di2015UniqueSeparatorstruct Refsample<T> where T : classDi2015NewLine
580159Di2015UniqueSeparatorstruct Refsample<T> where T : classDi2015NewLine{Di2015NewLine   // stored in the stack as well.Di2015NewLine   public int Age; Di2015NewLineDi2015NewLine   // memory address pointing to the heap stored in the stack, Di2015NewLine   // but the actual object is stored in the heap.Di2015NewLine   public string Name；Di2015NewLine   // same as string above if T was reference type;Di2015NewLine   // otherwise, if value type, same as Age above.Di2015NewLine   public T SomeThing; Di2015NewLine}Di2015NewLine
580225Di2015UniqueSeparatorpublic class LimitedQueue<T> : IList<T>Di2015NewLine{Di2015NewLine  public int MaxSize {get; set;}Di2015NewLine  private Queue<T> Items = new Queue<T>();Di2015NewLine  public void Add(T item)Di2015NewLine  {Di2015NewLine    Items.Enqueue(item);Di2015NewLine    if(Items.Count == MaxSize)Di2015NewLine    {Di2015NewLine       Items.Dequeue();Di2015NewLine    }Di2015NewLine  }Di2015NewLine  // I'll let you do the restDi2015NewLine}Di2015NewLine
580264Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLine    public class Fixes {Di2015NewLine      public static void SetNotifyIconText(NotifyIcon ni, string text) {Di2015NewLine        if (text.Length >= 128) throw new ArgumentOutOfRangeException("Text limited to 127 characters");Di2015NewLine        Type t = typeof(NotifyIcon);Di2015NewLine        BindingFlags hidden = BindingFlags.NonPublic | BindingFlags.Instance;Di2015NewLine        t.GetField("text", hidden).SetValue(ni, text);Di2015NewLine        if ((bool)t.GetField("added", hidden).GetValue(ni))Di2015NewLine          t.GetMethod("UpdateIcon", hidden).Invoke(ni, new object[] { true });Di2015NewLine      }Di2015NewLine    }Di2015NewLine
580702Di2015UniqueSeparatortry
580702Di2015UniqueSeparatorfinally
580702Di2015UniqueSeparatorusing
580702Di2015UniqueSeparatorDispose
580702Di2015UniqueSeparatorIEnumerator<T>
580702Di2015UniqueSeparatorforeach
580702Di2015UniqueSeparatorGetEnumerator()
580702Di2015UniqueSeparatorMoveNext()
580702Di2015UniqueSeparatorCurrent
580702Di2015UniqueSeparatorusing (IEnumerator<string> iterator = foo.GetEnumerator())Di2015NewLine{Di2015NewLine    while (iterator.MoveNext())Di2015NewLine    {Di2015NewLine        string bar = iterator.Current;Di2015NewLine        // etcDi2015NewLine    }Di2015NewLine}Di2015NewLine
580706Di2015UniqueSeparator     var dlg1 = new Ionic.Utils.FolderBrowserDialogEx();Di2015NewLine     dlg1.Description = "Select a folder to extract to:";Di2015NewLine     dlg1.ShowNewFolderButton = true;Di2015NewLine     dlg1.ShowEditBox = true;Di2015NewLine     //dlg1.NewStyle = false;Di2015NewLine     dlg1.SelectedPath = txtExtractDirectory.Text;Di2015NewLine     dlg1.ShowFullPathInEditBox = true;Di2015NewLine     dlg1.RootFolder = System.Environment.SpecialFolder.MyComputer;Di2015NewLineDi2015NewLine     // Show the FolderBrowserDialog.Di2015NewLine     DialogResult result = dlg1.ShowDialog();Di2015NewLine     if (result == DialogResult.OK)Di2015NewLine     {Di2015NewLine         txtExtractDirectory.Text = dlg1.SelectedPath;Di2015NewLine     }Di2015NewLine
580794Di2015UniqueSeparatorclass Samplewhere T:class where U:struct, TDi2015NewLine
580794Di2015UniqueSeparatorSystem.ValueType
580794Di2015UniqueSeparatorSystem.Enum
580794Di2015UniqueSeparatorSystem.ValueType
580794Di2015UniqueSeparatorstruct
580794Di2015UniqueSeparatorenum
580927Di2015UniqueSeparatorMicrosoft.VisualStudio.QualityTools.UnitTestFramework
580938Di2015UniqueSeparatorint result = (int)Convert.ChangeType(integerObject, integerType);Di2015NewLine
581026Di2015UniqueSeparatorpublic Field SelfDi2015NewLine        {Di2015NewLine            get { return this; }Di2015NewLine        }Di2015NewLine
581232Di2015UniqueSeparatorDataGridView
581232Di2015UniqueSeparatorpublic string Name {Di2015NewLine    get {return innerObject.Name;}Di2015NewLine    set {innerObject.Name = value;}Di2015NewLine}Di2015NewLine// snipped: other properties - Key etcDi2015NewLine
581232Di2015UniqueSeparatorgrid.DataSource = originalData.Select(x=>Di2015NewLine    new {x.Key, Name = x.Field.Name}).ToList();Di2015NewLine
581232Di2015UniqueSeparatorComponentModel
581355Di2015UniqueSeparator<?xml
581524Di2015UniqueSeparatorBidiMap
581524Di2015UniqueSeparatorTreeBidiMap
581524Di2015UniqueSeparatorDictionary<TKey, TValue>
581569Di2015UniqueSeparatorMode = 0;Di2015NewLinefor(int i = 0; i < args.Length; i++) {Di2015NewLine    switch(args[i]) {Di2015NewLine    case "--a":Di2015NewLine        Mode |= Flags.A;Di2015NewLine        break;Di2015NewLine    case "--b":Di2015NewLine        Mode |= Flags.B;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
581569Di2015UniqueSeparator--not-a
581569Di2015UniqueSeparator--not-b
581569Di2015UniqueSeparator(Mode & Flags.A) == Flags.A && (Mode & Flags.B) == Flags.B
581569Di2015UniqueSeparatorMode = Flags.A | Flags.B;Di2015NewLinefor(int i = 0; i < args.Length; i++) {Di2015NewLine    switch(args[i]) {Di2015NewLine    case "--not-a":Di2015NewLine        Mode &= ~Flags.A;Di2015NewLine        break;Di2015NewLine    case "--not-b":Di2015NewLine        Mode &= ~Flags.B;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
581569Di2015UniqueSeparator[Flags]Di2015NewLineenum FlagsDi2015NewLine{Di2015NewLine    A = 1,Di2015NewLine    B = 1 << 1,Di2015NewLine    C = 1 << 2,Di2015NewLine    D = 1 << 3,Di2015NewLine    E = 1 << 4,Di2015NewLine    F = 1 << 5Di2015NewLine};Di2015NewLine
581574Di2015UniqueSeparatorstring fileName = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".csv";Di2015NewLine
581788Di2015UniqueSeparatorUserControl
581788Di2015UniqueSeparatorControlPaint
581788Di2015UniqueSeparatorSystem.Windows.Forms.VisualStyles
581788Di2015UniqueSeparatorVisualStyleElement.TrackBar.ThumbTop
581788Di2015UniqueSeparatorVisualStyleElement.TrackBar.ThumbBottom
581788Di2015UniqueSeparatorVisualStyleElement.TrackBar.Track
581788Di2015UniqueSeparatorControlPaint
581884Di2015UniqueSeparatorstring.Format("{0:000} {0:D3}", 7)
581884Di2015UniqueSeparator007 007
582137Di2015UniqueSeparatorLinkedList<T>
582137Di2015UniqueSeparatorLinkedList
582305Di2015UniqueSeparatorpublic class DescriptiveEnum<T> where T: structDi2015NewLine{Di2015NewLine    private static readonly Dictionary<T,string> descriptions Di2015NewLine        = new Dictionary<T,string>();Di2015NewLineDi2015NewLine    static DescriptiveEnum()Di2015NewLine    {Di2015NewLine        foreach (FieldInfo field inDi2015NewLine            typeof(T).GetFields(BindingFlags.Static Di2015NewLine    \    | BindingFlags.GetField | BindingFlags.Public))Di2015NewLine        {Di2015NewLine    \descriptions.Add((T)field.GetRawConstantValue(),Di2015NewLine    \    LookupName(field));\\\Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public readonly T Value;Di2015NewLineDi2015NewLine    public DescriptiveEnum(T value)Di2015NewLine    {Di2015NewLine    \this.Value = value;\\Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        string s;Di2015NewLine        if (!descriptions.TryGetValue(this.Value, out s))Di2015NewLine        {\\\Di2015NewLine    \// fall back for non declared fieldsDi2015NewLine    \s = this.Value.ToString();\Di2015NewLine    \descriptions[this.Value] = s;Di2015NewLine        }Di2015NewLine        return s;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string LookupName(FieldInfo field)        Di2015NewLine    {Di2015NewLine        object[] all = field.GetCustomAttributes(Di2015NewLine             typeof(DescriptionAttribute), false);Di2015NewLine        if (all.Length == 0)Di2015NewLine            return field.Name; // fall backDi2015NewLine        elseDi2015NewLine            return ((DescriptionAttribute)all[0])Di2015NewLine                .Description; // only one neededDi2015NewLine    }   Di2015NewLineDi2015NewLine    public static BindingList<DescriptiveEnum<T>> Make(Di2015NewLine        IEnumerable<T> source)Di2015NewLine    {Di2015NewLine        var list = new BindingList<DescriptiveEnum<T>>();Di2015NewLine        foreach (var x in source)Di2015NewLine    \list.Add(new DescriptiveEnum<T>(x));Di2015NewLine        return list;Di2015NewLine    }Di2015NewLine}Di2015NewLine
582305Di2015UniqueSeparatorpublic enum FooDi2015NewLine{Di2015NewLine    [Description("flibble")]Di2015NewLine    Bar,Di2015NewLine    [Description("wobble")]Di2015NewLine    Baz,Di2015NewLine    // none present, will use the nameDi2015NewLine    BatDi2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineForm f = new Form();Di2015NewLinef.Controls.Add(new ListBox() Di2015NewLine{Di2015NewLine    Dock = DockStyle.Fill,Di2015NewLine    DataSource = DescriptiveEnum<Foo>.Make(Di2015NewLine       new Foo[] { Foo.Bar, Foo.Baz, Foo.Bat }),Di2015NewLine});Di2015NewLineApplication.Run(f);Di2015NewLine
582318Di2015UniqueSeparatorstring.Split()
582318Di2015UniqueSeparatorstring MyCodes = "AB,BC,CD";Di2015NewLinechar[] delimiters = new char[] {',', ' '};Di2015NewLinestring[] codes = MyCodes.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);Di2015NewLine
582483Di2015UniqueSeparator.*?)
582483Di2015UniqueSeparatorfunctionCall("\\")", ')')Di2015NewLine
582483Di2015UniqueSeparatorfunctionCall(/*)*/ 1, // )Di2015NewLine2)Di2015NewLine
582483Di2015UniqueSeparatorfunctionCall(1) + functionCall(2) + (2 * 3) // Don't match past the first )Di2015NewLine
582483Di2015UniqueSeparatorfunctionCall((1+(1))*(2+2))Di2015NewLine
582483Di2015UniqueSeparator#define close_paren )Di2015NewLine
582484Di2015UniqueSeparatorprivate string GenerateUniqueId()Di2015NewLine{Di2015NewLine    return Guid.NewGuid().ToString("N");Di2015NewLine}Di2015NewLine
582484Di2015UniqueSeparatorprivate string GenerateUniqueId()Di2015NewLine{Di2015NewLine    using (var rng = new RNGCryptoServiceProvider())Di2015NewLine    {Di2015NewLine        // change the size of the array depending on your requirementsDi2015NewLine        var rndBytes = new byte[8];Di2015NewLine        rng.GetBytes(rndBytes);Di2015NewLine        return BitConverter.ToString(rndBytes).Replace("-", "");Di2015NewLine    }Di2015NewLine}Di2015NewLine
582484Di2015UniqueSeparatorbyte
582499Di2015UniqueSeparatorpublic static class DataTableExtensionsDi2015NewLine{Di2015NewLine    public static DataView ApplySort(this DataTable table, Comparison<DataRow> comparison)Di2015NewLine    {Di2015NewLineDi2015NewLine        DataTable clone = table.Clone();Di2015NewLine        List<DataRow> rows = new List<DataRow>();Di2015NewLine        foreach (DataRow row in table.Rows)Di2015NewLine        {Di2015NewLine            rows.Add(row);    Di2015NewLine        }Di2015NewLineDi2015NewLine        rows.Sort(comparison);Di2015NewLineDi2015NewLine        foreach (DataRow row in rows)Di2015NewLine        {Di2015NewLine            clone.Rows.Add(row.ItemArray);Di2015NewLine        }Di2015NewLineDi2015NewLine        return clone.DefaultView;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
582499Di2015UniqueSeparator    DataTable table = new DataTable();Di2015NewLine    table.Columns.Add("IntValue", typeof(int));Di2015NewLine    table.Columns.Add("StringValue");Di2015NewLineDi2015NewLine    table.Rows.Add(11, "Eleven");Di2015NewLine    table.Rows.Add(14, "Fourteen");Di2015NewLine    table.Rows.Add(10, "Ten");Di2015NewLine    table.Rows.Add(12, "Twelve");Di2015NewLine    table.Rows.Add(13, "Thirteen");Di2015NewLine
582499Di2015UniqueSeparator DataView sorted = table.ApplySort((r, r2) =>Di2015NewLine        {Di2015NewLine            return ((string)r["StringValue"]).CompareTo(((string)r2["StringValue"]));Di2015NewLine        });Di2015NewLine
582499Di2015UniqueSeparatorDataView sorted = table.ApplySort((r, r2) =>Di2015NewLine            {Di2015NewLine                return ((int)r["IntValue"]).CompareTo(((int)r2["IntValue"]));Di2015NewLine            });Di2015NewLine
582567Di2015UniqueSeparatorBeginReceive
582567Di2015UniqueSeparatorEndReceive
582567Di2015UniqueSeparatorSocket.BeginReceive
582569Di2015UniqueSeparator<configuration>Di2015NewLineDi2015NewLine  <system.web>Di2015NewLineDi2015NewLine    <pages>Di2015NewLine      <controls>Di2015NewLine        <add tagPrefix="custom" assembly="SRC.Web.Common"/>Di2015NewLine      </controls>Di2015NewLine    </pages>Di2015NewLineDi2015NewLine  </system.web>Di2015NewLineDi2015NewLine</configuration>Di2015NewLine
582655Di2015UniqueSeparatorLogicalTreeHelper.GetChildren()
582675Di2015UniqueSeparatorCurrentArtist
582675Di2015UniqueSeparatorCurrentArtist
582675Di2015UniqueSeparatorPropertyChanged
582675Di2015UniqueSeparatorPropertyChanged
582675Di2015UniqueSeparatorCurrentArtist
582675Di2015UniqueSeparatorMediaPlayer.Play()
582699Di2015UniqueSeparator public string PropertyADi2015NewLine {Di2015NewLine       get { return a; }Di2015NewLine       set Di2015NewLine       {Di2015NewLine            a = value;Di2015NewLine            doStuff(); Di2015NewLine       }Di2015NewLine }Di2015NewLine
582759Di2015UniqueSeparatorList<T>
582759Di2015UniqueSeparatorT[]
582759Di2015UniqueSeparatorvoid SomeFunction(int[] x) Di2015NewLine
582759Di2015UniqueSeparatorvoid SomeFunction<T>(T[] x) Di2015NewLine
582759Di2015UniqueSeparatorint
582759Di2015UniqueSeparatorSomeFunction<int>(myIntArray)Di2015NewLine
582760Di2015UniqueSeparatorpublic event EventHandler Hide;Di2015NewLineDi2015NewLine// this is the function that raises the eventDi2015NewLineprivate void OnHide() {Di2015NewLine    if (Hide != null)Di2015NewLine        Hide(this, new EventArgs());Di2015NewLine}Di2015NewLine
582760Di2015UniqueSeparatorOnHide()
582769Di2015UniqueSeparatorBitmap bitmap = new Bitmap(totalWidthOfAllImages, totalHeightOfAllImages);Di2015NewLineusing(Graphics g = Graphics.FromBitmap(bitmap))Di2015NewLine{Di2015NewLine    foreach(Bitmap b in myBitmaps)Di2015NewLine        g.DrawImage(/* do positioning stuff based on image position */)Di2015NewLine}Di2015NewLineDi2015NewLinepictureBox1.Image = bitmap;Di2015NewLine
582835Di2015UniqueSeparatorBitmapImage
582835Di2015UniqueSeparatorMemoryStream
582835Di2015UniqueSeparatorMemoryStream byteStream = new MemoryStream(bytes);Di2015NewLineBitmapImage image = new BitmapImage();Di2015NewLineimage.BeginInit();Di2015NewLineimage.StreamSource = byteStream;Di2015NewLineimage.EndInit();Di2015NewLine
582835Di2015UniqueSeparatorImage
582835Di2015UniqueSeparatorimage
582835Di2015UniqueSeparatorSource
582883Di2015UniqueSeparatorEventHandler handler = delegate(System.Object o, System.EventArgs e)Di2015NewLine               { System.Windows.Forms.MessageBox.Show("Click!"); };Di2015NewLineButton.Click += handler;Di2015NewLine// ... program codeDi2015NewLineDi2015NewLineButton.Click -= handler;Di2015NewLine
583115Di2015UniqueSeparator<WindowResources>Di2015NewLine  <l:GeoCollection x:Key="geoList"/>Di2015NewLine</WindowResources>Di2015NewLine
583115Di2015UniqueSeparatorGeoCollection geoList = FindResource("geoList") as GeoCollection;Di2015NewLine
583176Di2015UniqueSeparatorstring sql = "UPDATE table SET [action_date]= @ActionDate WHERE [id]= @CM_id";Di2015NewLineDi2015NewLineusing (var cn = new SqlConnection("your connection string here."))Di2015NewLineusing (var cmd = new SqlCommand(sql, cn))Di2015NewLine{Di2015NewLine    cmd.Parameters.Add("@ActionDate", SqlDbTypes.DateTime).Value = Di2015NewLine         ActionDate.Equals("")? DBNull.Value : DateTime.Parse(ActionDate);Di2015NewLine    cmd.Parameters.Add("@CM_id", SqlDbTypes.Int).Value = 2488;Di2015NewLineDi2015NewLine    cn.Open();Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
583362Di2015UniqueSeparator(?<rest>.*?)((?<g1>abc)|(?<g2>def)|(?<g3>ghi)|$)Di2015NewLine
583362Di2015UniqueSeparatorRegex regex = new Regex(Di2015NewLine    @"(?<rest>.*?)((?<g1>abc)|(?<g2>def)|(?<g3>ghi)|$)",Di2015NewLine    RegexOptions.SinglelineDi2015NewLine    | RegexOptions.CompiledDi2015NewLine    );Di2015NewLine
583397Di2015UniqueSeparatorif (rummen[positionX, positionY].Levandesaker != null &&Di2015NewLine    rummen[positionX, positionY].Levandesaker.Count > 0)Di2015NewLine{Di2015NewLine    if (rummen[positionX, positionY].Levandesaker[0].alive == true)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
583408Di2015UniqueSeparatorvar ebnfs = from p in props Di2015NewLine            where p.PropertyType.IsSubclassOf(typeof(ARule)) Di2015NewLine            let rule = (ARule)p.GetValue(this, null)Di2015NewLine            select rule.Name + " = " + rule.Ebnf + ".";Di2015NewLineDi2015NewLine return String.Join(",", ebnfs.ToArray());Di2015NewLine
583641Di2015UniqueSeparator   SqlConnection.ClearAllPools();Di2015NewLine   // if any connections were being used at the time of the clear, hopefully waitingDi2015NewLine   // 3 seconds will give them time to be released and we can now close them as wellDi2015NewLine   Thread.Sleep(3000);Di2015NewLine   //clear againDi2015NewLine   SqlConnection.ClearAllPools();Di2015NewLine
583707Di2015UniqueSeparatorS2kBool
583707Di2015UniqueSeparatorbool
583707Di2015UniqueSeparatortrue
583707Di2015UniqueSeparatorfalse
583707Di2015UniqueSeparatorpublic static bool operator true(S2kBool x) {Di2015NewLine    return x.Value;Di2015NewLine}Di2015NewLinepublic static bool operator false(S2kBool x) {Di2015NewLine    return !x.Value;Di2015NewLine}Di2015NewLine
583707Di2015UniqueSeparator if(tObj.IsActive)
583707Di2015UniqueSeparatorpublic static implicit operator bool(S2kBool x) {Di2015NewLine    return x.Value;Di2015NewLine}Di2015NewLine
583707Di2015UniqueSeparatorpublic static implicit operator S2kBool(bool x)Di2015NewLine{Di2015NewLine    return new S2kBool(x);Di2015NewLine}Di2015NewLine
583707Di2015UniqueSeparatorIsActive = false;
583707Di2015UniqueSeparatorTestObject obj1 = new TestObject(),Di2015NewLine           obj2 = new TestObject();Di2015NewLineobj1.IsActive = obj2.IsActive = S2kBool.True;Di2015NewLineDi2015NewLineConsole.WriteLine(obj1.IsActive);Di2015NewLineConsole.WriteLine(obj2.IsActive);Di2015NewLineDi2015NewLineobj1.IsActive.Value = false;Di2015NewLineDi2015NewLineConsole.WriteLine(obj1.IsActive);Di2015NewLineConsole.WriteLine(obj2.IsActive); // what does this print?Di2015NewLine
583707Di2015UniqueSeparatorIsActive
583707Di2015UniqueSeparatorS2kBool
583825Di2015UniqueSeparatorImageButton b = sender as ImageButton;Di2015NewLineif (b != null) {Di2015NewLine    string theId = b.ClientID;Di2015NewLineDi2015NewLine    // Change the URLDi2015NewLine    b.ImageUrl = "/whatever/you/like.png";Di2015NewLine}Di2015NewLine
583840Di2015UniqueSeparator<ItemTemplate>Di2015NewLine  <%#Eval("Key.Name") %>Di2015NewLine  <asp:DropDownListDi2015NewLine        ID="ddlListOfBars"Di2015NewLine        runat="server"Di2015NewLine        DataSource='<%#Eval("Value")%>'Di2015NewLine        DataValueField="ItemValue"Di2015NewLine        DataTextField="ItemName" />Di2015NewLine</ItemTemplate>Di2015NewLine
583840Di2015UniqueSeparator<asp:ListView ID="lvFooList" runat="server">Di2015NewLine<LayoutTemplate>Di2015NewLine  <asp:PlaceHolder runat="server" ID="itemPlaceholder"></asp:PlaceHolder>Di2015NewLine</LayoutTemplate>Di2015NewLine  <ItemSeparatorTemplate>Di2015NewLine     <hr />Di2015NewLine  </ItemSeparatorTemplate>Di2015NewLine<ItemTemplate>Di2015NewLine  <uc:ListViewContents DataItem='<%# Container.DataItem %>' />Di2015NewLine</ItemTemplate>Di2015NewLine
583840Di2015UniqueSeparator<asp:Label ID="lbName" runat="server"/>Di2015NewLine<asp:DropDownList ID="ddlListOfBars" runat="server"></asp:DropDownList>Di2015NewLine
583840Di2015UniqueSeparatorpublic KeyValuePair<Foo,List<Bar>> DataItemDi2015NewLine{Di2015NewLine    get; set;Di2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnDataBinding(EventArgs e)Di2015NewLine{Di2015NewLine    base.OnDataBinding(e);Di2015NewLineDi2015NewLine    lbName.Text = DataItem.Key.Name;Di2015NewLineDi2015NewLine    ddlListOfBars.DataTextField = "ItemName";Di2015NewLine    ddlListOfBars.DataValueField = "ItemValue";Di2015NewLine    ddlListOfBars.DataSource = DataItem.Value;Di2015NewLine    ddlListOfBars.DataBind();   Di2015NewLine}Di2015NewLine
583878Di2015UniqueSeparatorList<T>
583878Di2015UniqueSeparatorGetUninitializedObject
583909Di2015UniqueSeparatorwebBrowser.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(webBrowser_DocumentCompleted);Di2015NewLineDi2015NewLinevoid webBrowser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine{Di2015NewLine    webBrowser.Document.GetElementById("product").SetAttribute("value", product);Di2015NewLine    webBrowser.Document.GetElementById("version").SetAttribute("value", version);Di2015NewLine    webBrowser.Document.GetElementById("commit").InvokeMember("click");Di2015NewLine}Di2015NewLine
583927Di2015UniqueSeparatorInvalidateVisual
583927Di2015UniqueSeparatorbase.AddVisualChild()
583927Di2015UniqueSeparatorArrangeOverride(Size size)
583927Di2015UniqueSeparatorVisualChildrenCount
583927Di2015UniqueSeparatorGetCisualChild(int index)
583958Di2015UniqueSeparatorusing System;Di2015NewLine
583958Di2015UniqueSeparatorusing Console = System.Console;Di2015NewLine
583980Di2015UniqueSeparatorint incomingOffset = 0;Di2015NewLineDi2015NewLinewhile(incomingOffset < incomingArray.Length)Di2015NewLine{Di2015NewLine   int length = Di2015NewLine      Math.Min(outboundBuffer.Length, incomingArray.Length - incomingOffset);Di2015NewLineDi2015NewLine   // Changed from Array.Copy as per Marc's suggestionDi2015NewLine   Buffer.BlockCopy(incomingArray, incomingOffset, Di2015NewLine                    outboundBuffer, 0, Di2015NewLine                    length);Di2015NewLineDi2015NewLine   incomingOffset += length;Di2015NewLineDi2015NewLine   // Transmit outbound bufferDi2015NewLine }Di2015NewLine
584048Di2015UniqueSeparator void Foo(){Di2015NewLine     int[] a = new int[5]Di2015NewLine }Di2015NewLine
584048Di2015UniqueSeparatora
584048Di2015UniqueSeparatora
584048Di2015UniqueSeparatorFoo
584048Di2015UniqueSeparatora
584048Di2015UniqueSeparatorFoo
584048Di2015UniqueSeparatora
584092Di2015UniqueSeparatorvar aggregatedAddresses = from DataRow row in dt.RowsDi2015NewLinegroup row by row["AddressA"] into gDi2015NewLineselect new {Di2015NewLine    Address = g.Key,Di2015NewLine    Byte = g.Sum(row => (uint)row["Bytes"])Di2015NewLine};Di2015NewLineDi2015NewLineint i = 1;Di2015NewLineforeach(var row in aggregatedAddresses)Di2015NewLine{Di2015NewLine    result.Rows.Add(i++, row.Address, row.Byte);Di2015NewLine}Di2015NewLine
584356Di2015UniqueSeparator((INHibernateProxy)proxy).HibernateLazyInitializer.PersistentClassDi2015NewLine
584553Di2015UniqueSeparatorProgramFilesDir
584553Di2015UniqueSeparatorHKEY_CURRENT_USER
584621Di2015UniqueSeparatorHttpResponse currentResponse = HttpContext.Current.Response;Di2015NewLinecurrentResponse.Clear();Di2015NewLinecurrentResponse.ClearHeaders();Di2015NewLinecurrentResponse.ClearContent();Di2015NewLineDi2015NewLinefilename = String.Format("{0}.pdf", this.ReportName);Di2015NewLinecurrentResponse.AppendHeader("Content-Disposition", String.Format("inline;filename={0}", filename));Di2015NewLinecurrentResponse.ContentType = "Application/PDF";Di2015NewLineDi2015NewLine//Copy the content of the response to the Di2015NewLine//current response using BinaryWriteDi2015NewLinesnip....Di2015NewLineDi2015NewLinecurrentResponse.End();Di2015NewLine
584671Di2015UniqueSeparatorint x(double);Di2015NewLinefloat x(double);Di2015NewLineDi2015NewLinedouble y = x(1.0);Di2015NewLine
584671Di2015UniqueSeparatorC#
584671Di2015UniqueSeparatorint x(double);Di2015NewLinefloat x(double);Di2015NewLinedouble y = (float)(x(1.0));    // overload castingDi2015NewLinedouble y = float:x(1.0);       // or use new syntax (looks nicer, IMNSHO)Di2015NewLine
584671Di2015UniqueSeparatorSystem.out.Println(myClass.MyMethod());Di2015NewLine
584671Di2015UniqueSeparatorSystem.out.Println(string:myClass.MyMethod());Di2015NewLine
584671Di2015UniqueSeparatorC#
584671Di2015UniqueSeparatorC
584671Di2015UniqueSeparatorC++
584671Di2015UniqueSeparatorgcc
584792Di2015UniqueSeparatorISnapshot
584792Di2015UniqueSeparatorISnapshot
584840Di2015UniqueSeparatorvar qry = Foo.GroupJoin(Di2015NewLine          Bar, Di2015NewLine          foo => foo.Foo_Id,Di2015NewLine          bar => bar.Foo_Id,Di2015NewLine          (x,y) => new { Foo = x, Bars = y })Di2015NewLine    .SelectMany(Di2015NewLine          x => x.Bars.DefaultIfEmpty(),Di2015NewLine          (x,y) => new { Foo=x.Foo, Bar=y});Di2015NewLine
584885Di2015UniqueSeparatorprivate T CreateNewPattern<T>() where T : HolePattern, new()Di2015NewLine{Di2015NewLine    var newHolePattern = new T();Di2015NewLine    newHolePattern.PatternName = "Pattern #" +Di2015NewLine        (HolePatterns.Count + 1).ToString();Di2015NewLine    this.AddPattern(newHolePattern);Di2015NewLine    this.SetActivePattern(newHolePattern);Di2015NewLine    return newHolePattern;          Di2015NewLine}Di2015NewLineDi2015NewLineprivate SingleLineHolePattern CreateNewLinePattern() {Di2015NewLine    return CreateNewPattern<SingleLineHolePattern>();Di2015NewLine}Di2015NewLineDi2015NewLineprivate CircularHolePattern CreateNewCircularPattern() {Di2015NewLine    return CreateNewPattern<CircularHolePattern>();Di2015NewLine}Di2015NewLine
584885Di2015UniqueSeparatorT
584885Di2015UniqueSeparatorwhere
584885Di2015UniqueSeparatorHolePattern
584885Di2015UniqueSeparatornew T()
584885Di2015UniqueSeparatorHolePattern
584885Di2015UniqueSeparatorPatternName
584885Di2015UniqueSeparatorHolePattern
584994Di2015UniqueSeparatorServiceBase.Run
584994Di2015UniqueSeparatorRun
584994Di2015UniqueSeparator        Service1 myService = new Service1();Di2015NewLine        myService.SomeProp = 1;Di2015NewLine        ServiceBase.Run(myService);Di2015NewLine
584994Di2015UniqueSeparatorSomeProp
584994Di2015UniqueSeparator    public int SomeProp { get; set;}Di2015NewLine    protected override void OnStart(string[] args)Di2015NewLine    {Di2015NewLine        int prop = SomeProp;Di2015NewLine    }Di2015NewLine
585267Di2015UniqueSeparatorProperties.Settings.Default.Save();Di2015NewLine
585267Di2015UniqueSeparatorstatic void Main()
585313Di2015UniqueSeparatorpublic class BulkLoader : IDisposableDi2015NewLine{Di2015NewLine    [ThreadStatic]Di2015NewLine    private static BulkLoader currentBulkLoader;Di2015NewLineDi2015NewLine    public BulkLoader()Di2015NewLine    {Di2015NewLine        if (InBulkLoader)Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException();Di2015NewLine        }Di2015NewLine        currentBulkLoader = this;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        currentBulkLoader = null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool InBulkLoaderDi2015NewLine    {Di2015NewLine         get { return currentBulkLoader != null; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static BulkLoader CurrentBulkLoaderDi2015NewLine    {Di2015NewLine         get { return currentBulkLoader; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
585333Di2015UniqueSeparatorpublic bool ValidateApplicationUser(string userName, string password)Di2015NewLine{Di2015NewLine  DataClasses1DataContext dc = new DataClasses1DataContext();Di2015NewLineDi2015NewLine  var saltValue = dc.ProvaHs.Where(c => c.UserName == userName)Di2015NewLine                            .Select(c => c.Salt)Di2015NewLine                            .SingleOrDefault();Di2015NewLineDi2015NewLine  if (saltValue == null) return false;Di2015NewLineDi2015NewLine  password = PasswordCrypto.HashEncryptStringWithSalt(passwordTextBox.Password, saltValue.ToString());Di2015NewLineDi2015NewLine  return dc.ProvaHs.Any(c => c.UserName == userName && c.Password == password);Di2015NewLine}Di2015NewLine
585373Di2015UniqueSeparatorpublic static class ccExtensionsDi2015NewLine{Di2015NewLine    public static IEnumerable<string> Categories(this XElement item,Di2015NewLine                                                 string type)Di2015NewLine    {Di2015NewLine        return from category in item.Elements("category")Di2015NewLine               where (string) category.Attribute("domain") == typeDi2015NewLine                     && !string.IsNullOrEmpty(category.Value)Di2015NewLine               select category.Value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
585373Di2015UniqueSeparatorfrom item in doc.Descendants("item")Di2015NewLinewhere item.Categories("SubChannel").Contains("Accomplishment")Di2015NewLineselect ...Di2015NewLine
585390Di2015UniqueSeparatorWireless80211
585415Di2015UniqueSeparatorList<T>.BinarySearch
585498Di2015UniqueSeparatormypicturebox.Image = ImageFactory.Image01;Di2015NewLine
585500Di2015UniqueSeparatorselect new { p.ProcessName, ProcessId = p.WorkingSet64 };Di2015NewLine
585514Di2015UniqueSeparatorGetUserById()
585514Di2015UniqueSeparatornull
585537Di2015UniqueSeparatorvar lastOrNull = "".Split(' ').LastOrDefault();Di2015NewLine
585537Di2015UniqueSeparatorcol = (col ?? "").Split(new char[] { ' ' }, Di2015NewLine    int.MaxValue, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine        .LastOrDefault();Di2015NewLineDi2015NewLineif (col != null)Di2015NewLine{ Di2015NewLine    emptyRow.Append(String.Format(" '' AS {0},", col);Di2015NewLine}Di2015NewLine
585633Di2015UniqueSeparatorif (nom == "1")Di2015NewLine{Di2015NewLine    nom +=1;Di2015NewLine    ou = nom;Di2015NewLine} else Di2015NewLine{Di2015NewLine    ou = "blank value";Di2015NewLine}Di2015NewLine
585647Di2015UniqueSeparator[Database(Name = "AdventureWorks")]Di2015NewLinepublic class AdventureWorks : DataContextDi2015NewLine{Di2015NewLine    //public Table<DirInfo> DirectoryInformation;Di2015NewLine    public AdventureWorks(string connection) : base(connection) { }Di2015NewLine    public Table<DirectoryInformation> DirectoryInformation;Di2015NewLine}Di2015NewLineDi2015NewLine[Table(Name = "DirectoryInformation")]Di2015NewLinepublic class DirectoryInformationDi2015NewLine{Di2015NewLine    [Column(DbType="varchar(50)")]Di2015NewLine    public string DirectoryName;Di2015NewLineDi2015NewLine    [Column(DbType = "varchar(255)")]Di2015NewLine    public string DirectoryDescription;Di2015NewLine}Di2015NewLine
585768Di2015UniqueSeparatorforeach (ITask task in tasks)Di2015NewLine{Di2015NewLine  TaskListItem taskListItem = LoadControl("~/TaskListItem.ascx") as TaskListItem;Di2015NewLineDi2015NewLine  taskListItem.Task = task;Di2015NewLine  taskListItem.TaskCompleteChanged +=Di2015NewLine      taskListItem_TaskCompleteChanged;                        Di2015NewLineDi2015NewLine  taskListItemHolder.Controls.Add(taskListItem);Di2015NewLine}Di2015NewLine
585822Di2015UniqueSeparatorXmlElement el = ...; //TODODi2015NewLineXmlNamespaceManager nsmgr = new XmlNamespaceManager(Di2015NewLine    el.OwnerDocument.NameTable);Di2015NewLinensmgr.AddNamespace("x", el.OwnerDocument.DocumentElement.NamespaceURI);Di2015NewLinevar nodes = el.SelectNodes(@"/x:outerelement/x:innerelement", nsmgr);Di2015NewLine
585855Di2015UniqueSeparatorEventHandler<T>
585855Di2015UniqueSeparatorpublic class MySpecialEventArgs : EventArgs {...}Di2015NewLine...Di2015NewLineEventHandler<MySpecialEventArgs> MyEvent;Di2015NewLine
585855Di2015UniqueSeparatorpublic class MySpecialEventArgs : EventArgs {...}Di2015NewLinepublic delegate void MySpecialEventHandler(object sender,Di2015NewLine    MySpecialEventArgs args);Di2015NewLine....Di2015NewLineevent MySpecialEventHandler MyEvent;Di2015NewLine
585890Di2015UniqueSeparator(a line can start with some spaces) followed by,Di2015NewLineDi2015NewLine(Type) followed byDi2015NewLineDi2015NewLine(at least one space)Di2015NewLine(variable_1)Di2015NewLine(optionallyDi2015NewLine   (comma // next varDi2015NewLine    |Di2015NewLine    '='number // initializationDi2015NewLine    ) ...`Di2015NewLine
585890Di2015UniqueSeparator^      \\s*    \\w+           \\s+        \\w+         ?          (','    |  '=' \\d+   ) ...Di2015NewLineline  some    type          at least  var          optionally   more  or init someDi2015NewLinestart spaces  (some chars)  one space (some chars)              vars     val  digitsDi2015NewLine
586086Di2015UniqueSeparatorIDatabaseRepository repo =Di2015NewLine                ObjectFactory.With("server").EqualTo("servername").Di2015NewLine                With("database").EqualTo("dbName").Di2015NewLine                With("user").EqualTo("userName").Di2015NewLine                With("password").EqualTo("password").Di2015NewLine                GetInstance<IDatabaseRepository>();Di2015NewLine
586093Di2015UniqueSeparatorIDatabaseRepository repo =Di2015NewLine                ObjectFactory.With("server").EqualTo("servername").Di2015NewLine                With("database").EqualTo("dbName").Di2015NewLine                With("user").EqualTo("userName").Di2015NewLine                With("password").EqualTo("password").Di2015NewLine                GetInstance<IDatabaseRepository>();Di2015NewLine
586109Di2015UniqueSeparatorctx.Log = Console.Out;Di2015NewLine
586109Di2015UniqueSeparatorusing(var ctx = new DataClasses2DataContext())Di2015NewLine{Di2015NewLine    ctx.Log = Console.Out;Di2015NewLine    int? mgr = (int?)null; // redundant int? for comparison...Di2015NewLine    // 23 rows:Di2015NewLine    var bosses1 = ctx.Employees.Where(x => x.ReportsTo == (int?)null).ToList();Di2015NewLine    // 0 rows:Di2015NewLine    var bosses2 = ctx.Employees.Where(x => x.ReportsTo == mgr).ToList();Di2015NewLine}Di2015NewLine
586109Di2015UniqueSeparatorExpression<Func<Category,bool>> predicate;Di2015NewLineif(categoryId == null) {Di2015NewLine    predicate = c=>c.ParentId == null;Di2015NewLine} else {Di2015NewLine    predicate = c=>c.ParentId == categoryId;Di2015NewLine}Di2015NewLinevar subCategories = this.Repository.CategoriesDi2015NewLine           .Where(predicate).ToList().Cast<ICategory>();Di2015NewLine
586109Di2015UniqueSeparatorExpression
586109Di2015UniqueSeparator    static void Main()Di2015NewLine    {Di2015NewLine        ShowEmps(29); // 4 rowsDi2015NewLine        ShowEmps(null); // 23 rowsDi2015NewLine    }Di2015NewLine    static void ShowEmps(int? manager)Di2015NewLine    {Di2015NewLine        using (var ctx = new DataClasses2DataContext())Di2015NewLine        {Di2015NewLine            ctx.Log = Console.Out;Di2015NewLine            var emps = ctx.Employees.Where(x => x.ReportsTo, manager).ToList();Di2015NewLine            Console.WriteLine(emps.Count);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    static IQueryable<T> Where<T, TValue>(Di2015NewLine        this IQueryable<T> source,Di2015NewLine        Expression<Func<T, TValue?>> selector,Di2015NewLine        TValue? value) where TValue : structDi2015NewLine    {Di2015NewLine        var param = Expression.Parameter(typeof (T), "x");Di2015NewLine        var member = Expression.Invoke(selector, param);Di2015NewLine        var body = Expression.Equal(Di2015NewLine                member, Expression.Constant(value, typeof (TValue?)));Di2015NewLine        var lambda = Expression.Lambda<Func<T,bool>>(body, param);Di2015NewLine        return source.Where(lambda);Di2015NewLine    }Di2015NewLine
586176Di2015UniqueSeparatorConfiguration
586210Di2015UniqueSeparatorForEach
586210Di2015UniqueSeparator// Rename 'query' to something meaningful :)Di2015NewLinevar query = _fixture.ImagesDi2015NewLine                    .Where(image => _selectedFixtureImage.Filename Di2015NewLine                                    && image.IsPrimary);Di2015NewLineDi2015NewLineforeach (FixtureImageServicesData image in query)Di2015NewLine{Di2015NewLine    image.IsPrimary = false;Di2015NewLine    image.IsChanged = true;Di2015NewLine}Di2015NewLine
586210Di2015UniqueSeparatorForEach
586210Di2015UniqueSeparator_fixture.ImagesDi2015NewLine    .Where(image => _selectedFixtureImage.Filename && image.IsPrimary)Di2015NewLine    .ForEach(image => { image.IsPrimary = false; image.IsChanged = true;});Di2015NewLine
586210Di2015UniqueSeparator_fixture.ImagesDi2015NewLine        .Where(image => _selectedFixtureImage.Filename && image.IsPrimary)Di2015NewLine        .ForEach(image => { image.IsPrimary = false; Di2015NewLine                            image.IsChanged = true; });Di2015NewLine
586210Di2015UniqueSeparator_fixture.ImagesDi2015NewLine        .Where(image => _selectedFixtureImage.Filename && image.IsPrimary)Di2015NewLine        .ForEach(MakeNonPrimary);Di2015NewLine
586303Di2015UniqueSeparatorWindows Registry Editor Version 5.00Di2015NewLine[HKEY_LOCAL_MACHINE\\SOFTWARE\\Developer Express]Di2015NewLine[HKEY_LOCAL_MACHINE\\SOFTWARE\\Developer Express\\CodeRush for VS\\3.2]Di2015NewLine    "HideMenu"=dword:00000000Di2015NewLine    "LoadDXPlugInsOnly"=dword:00000000Di2015NewLine    "StatusTextEnabled"=dword:00000001Di2015NewLine
586322Di2015UniqueSeparatorpublic interface ICodeEntity { }Di2015NewLinepublic interface IObjectEntity { }Di2015NewLinepublic class Column: IObjectEntityDi2015NewLine{Di2015NewLine    public string name;Di2015NewLine    public System.Data.DbType type;Di2015NewLine}Di2015NewLinepublic class Table: IObjectEntityDi2015NewLine{Di2015NewLine    public List<Column> columns = new List<Column>();Di2015NewLine    public string alias;Di2015NewLine}Di2015NewLinepublic class Where : ICodeEntity { }Di2015NewLinepublic class GroupBy : ICodeEntity { }Di2015NewLinepublic class OrderBy : ICodeEntity { }Di2015NewLinepublic class Select : Table, ICodeEntityDi2015NewLine{Di2015NewLine    public List<Table> joinList = new List<Table>();Di2015NewLine    public Where where;Di2015NewLine    public GroupBy groupBy;Di2015NewLine    public OrderBy orderBy;Di2015NewLine}Di2015NewLinepublic class Condition : ICodeEntity { }Di2015NewLinepublic class If : ICodeEntityDi2015NewLine{Di2015NewLine    public Condition condition;Di2015NewLine    public List<ICodeEntity> codeList = new List<ICodeEntity>();Di2015NewLine}Di2015NewLine
586322Di2015UniqueSeparatorIf if1 = new If();Di2015NewLineif1.codeList.Add(new If());Di2015NewLine
586371Di2015UniqueSeparator        var query = from category in Factory.GetCategories()Di2015NewLine                    where category.Name == "Cameras"Di2015NewLine                    from product in category.ProductsDi2015NewLine                    where product.Title == "Sony"Di2015NewLine                    from photo in product.PhotosDi2015NewLine                    select photo.Id;Di2015NewLine
586455Di2015UniqueSeparatorFileInfo file = new FileInfo(filePath); // full file path on diskDi2015NewLineResponse.ClearContent(); // neded to clear previous (if any) written contentDi2015NewLineResponse.AddHeader("Content-Disposition", Di2015NewLine    "attachment; filename=" + file.Name);Di2015NewLineResponse.AddHeader("Content-Length", file.Length.ToString());Di2015NewLineResponse.ContentType = "text/xml"; //RFC 3023Di2015NewLineResponse.TransmitFile(file.FullName);Di2015NewLineResponse.End();Di2015NewLine
586612Di2015UniqueSeparatorvoid ibclient_RealTimeBar(object sender, RealTimeBarEventArgs e)Di2015NewLine{Di2015NewLine    if(this.InvokeRequired)Di2015NewLine    {Di2015NewLine        this.Invoke(((Action)() => ShowFancyForm()));Di2015NewLine    }Di2015NewLineDi2015NewLine    ShowFancyForm();Di2015NewLine}Di2015NewLineDi2015NewLineFancyForm a_fancy_form;Di2015NewLineprivate void ShowFancyForm()Di2015NewLine{Di2015NewLine    if(null != a_fancy_form)return;Di2015NewLineDi2015NewLine    a_fancy_form = new FancyForm();Di2015NewLine    a_fancy_form.Show();Di2015NewLine}Di2015NewLine
586629Di2015UniqueSeparator1. Right click your ListViewDi2015NewLine2. Select "Edit Control Parts --> Edit a copy"Di2015NewLine3. Now right click the ScrollViewer in "Objects and Timeline"Di2015NewLine4. Select "Edit Control Parts --> Edit a copy" againDi2015NewLine5. Now you're editing a template for the ScrollViewer and you can playDi2015NewLine   with the size of the VerticalScrollBarDi2015NewLine
586898Di2015UniqueSeparatorclass Foo {Di2015NewLine  ...Di2015NewLine  public static void Save(ref Foo obj)Di2015NewLine  {Di2015NewLine    var newObj = obj._save() //your implementationDi2015NewLine    obj = newObj;Di2015NewLine  }Di2015NewLine}Di2015NewLine
586975Di2015UniqueSeparatorDateTime
587007Di2015UniqueSeparatorServiceHost host = new ServiceHost(Di2015NewLine  StringReverser.Instance,Di2015NewLine  new Uri[]{new Uri("net.pipe://localhost")}Di2015NewLine);Di2015NewLine
587017Di2015UniqueSeparatorSSISVariableNameValue.GetLength(0);
587123Di2015UniqueSeparator[System.Runtime.InteropServices.DllImport("user32.dll")]Di2015NewLineprivate static extern IntPtr WindowFromPoint(Point pnt);Di2015NewLineDi2015NewLineprivate void Form1_MouseMove(object sender, MouseEventArgs e) {Di2015NewLine  IntPtr hWnd = WindowFromPoint(Control.MousePosition);Di2015NewLine  if (hWnd != IntPtr.Zero) {Di2015NewLine    Control ctl = Control.FromHandle(hWnd);Di2015NewLine    if (ctl != null) label1.Text = ctl.Name;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void button1_Click(object sender, EventArgs e) {Di2015NewLine  // Need to capture to see mouse move messages...Di2015NewLine  this.Capture = true;Di2015NewLine}Di2015NewLine
587155Di2015UniqueSeparatorprivate static MyService m_ServiceInstance;Di2015NewLineDi2015NewLinepublic static MyService ServiceInstanceDi2015NewLine{Di2015NewLine    get { return m_ServiceInstance; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic MyService()Di2015NewLine{Di2015NewLine    InitializeComponents();Di2015NewLine    //Other initializationDi2015NewLine    m_ServiceInstance = this;Di2015NewLine}Di2015NewLine
587237Di2015UniqueSeparatorDate
587237Di2015UniqueSeparatorComplex
587283Di2015UniqueSeparatorIHTMLElement2.currentStyle
587283Di2015UniqueSeparatorstyle
587283Di2015UniqueSeparatorIHTMLElement2.currentStyle
587283Di2015UniqueSeparatorcurrentStyle
587283Di2015UniqueSeparatorIHTMLCurrentStyle
587283Di2015UniqueSeparatorIHTMLCurrentStyle2
587283Di2015UniqueSeparatorwritingMode
587365Di2015UniqueSeparatorApplication.EnableVisualStyles();Di2015NewLine
587365Di2015UniqueSeparator //Custom ButtonCellDi2015NewLine public class MyButtonCell : DataGridViewButtonCellDi2015NewLine    {Di2015NewLine        protected override void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)Di2015NewLine        {Di2015NewLine            ButtonRenderer.DrawButton(graphics, cellBounds, formattedValue.ToString(), new Font("Comic Sans MS", 9.0f, FontStyle.Bold), true, System.Windows.Forms.VisualStyles.PushButtonState.Default);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
587365Di2015UniqueSeparatorDataGridViewButtonColumn c = new DataGridViewButtonColumn();Di2015NewLine            c.CellTemplate = new MyButtonColumn();Di2015NewLine            this.dataGridView1.Columns.Add(c);Di2015NewLine            this.dataGridView1.Rows.Add("Click Me");Di2015NewLine
587371Di2015UniqueSeparatorvar
587371Di2015UniqueSeparatorvar firstFromGroup = group.First();Di2015NewLine
587371Di2015UniqueSeparatorvar
587560Di2015UniqueSeparatorInt32.TryParse
587794Di2015UniqueSeparatorXMLHttpRequest
587794Di2015UniqueSeparatorsuccess
587794Di2015UniqueSeparatorajax
587962Di2015UniqueSeparatorPrintDialog dialog = new PrintDialog();Di2015NewLinevar paginator = new RowPaginator(rowsToPrint) { PageSize = new Size(dialog.PrintableAreaWidth, dialog.PrintableAreaHeight) };Di2015NewLineDi2015NewLinestring tempFileName = System.IO.Path.GetTempFileName();Di2015NewLineDi2015NewLine//GetTempFileName creates a file, the XpsDocument throws an exception if the file alreadyDi2015NewLine//exists, so delete it. Possible race condition if someone else calls GetTempFileNameDi2015NewLineFile.Delete(tempFileName); Di2015NewLineusing (XpsDocument xpsDocument = new XpsDocument(tempFileName, FileAccess.ReadWrite))Di2015NewLine{Di2015NewLine    XpsDocumentWriter writer = XpsDocument.CreateXpsDocumentWriter(xpsDocument);Di2015NewLine    writer.Write(paginator);Di2015NewLineDi2015NewLine    PrintPreview previewWindow = new PrintPreviewDi2015NewLine                                     {Di2015NewLine                                         Owner = this,Di2015NewLine                                         Document = xpsDocument.GetFixedDocumentSequence()Di2015NewLine                                     };Di2015NewLine    previewWindow.ShowDialog();Di2015NewLine}Di2015NewLine
587962Di2015UniqueSeparator<Window x:Class="WPFPrintTest.PrintPreview"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    x:Name="previewWindow"Di2015NewLine    Title="PrintPreview" Height="800" Width="800">Di2015NewLine    <Grid>Di2015NewLine        <DocumentViewer Name="viewer" Di2015NewLine                        Document="{Binding ElementName=previewWindow, Path=Document}" />Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
587962Di2015UniqueSeparatorpublic IDocumentPaginatorSource DocumentDi2015NewLine{Di2015NewLine    get { return viewer.Document; }Di2015NewLine    set { viewer.Document = value; }Di2015NewLine}Di2015NewLine
588158Di2015UniqueSeparatorIsBusy
588158Di2015UniqueSeparatorworker.RunWorkerAsync();Di2015NewLine
588158Di2015UniqueSeparatorif( !worker.IsBusy )Di2015NewLine    worker.RunWorkerAsync();Di2015NewLineelseDi2015NewLine    MessageBox.Show("Can't run the worker twice!");Di2015NewLine
588198Di2015UniqueSeparatorsizer.FromImage(i)Di2015NewLine .ReduceByPercent(x)Di2015NewLine .Pixalize()Di2015NewLine .ReduceByPercent(x)Di2015NewLine .OutputImageFormat(ImageFormat.Jpeg)Di2015NewLine .ToLocation(o)Di2015NewLine .Save();Di2015NewLine
588198Di2015UniqueSeparator new Sizer("bob.jpeg") Di2015NewLine .ReduceByPercent(x)Di2015NewLine .Pixalize()Di2015NewLine .ReduceByPercent(x)Di2015NewLine .Save("file.jpeg",ImageFormat.Jpeg);Di2015NewLine
588198Di2015UniqueSeparatorvar sb = new StringBuilder(); Di2015NewLinesb.AppendLine("Hello")Di2015NewLine .AppendLine("World"); Di2015NewLine
588209Di2015UniqueSeparatorvar allMethods = typeof (Example).GetMethods(BindingFlags.Public | BindingFlags.Static);Di2015NewLineMethodInfo foundMi = allMethods.FirstOrDefault(Di2015NewLine    mi => mi.Name == "Foo" && mi.GetGenericArguments().Count() == 2);Di2015NewLineif (foundMi != null)Di2015NewLine{Di2015NewLine    MethodInfo closedMi = foundMi.MakeGenericMethod(new Type[] {typeof (int), typeof (string)});Di2015NewLine    Example example= new Example();Di2015NewLine    closedMi.Invoke(example, new object[] { 5 });Di2015NewLine}Di2015NewLine
588268Di2015UniqueSeparatornew XElement("h1", "Text\\u00A0to\\u00A0keep\\u00A0together");Di2015NewLine
588330Di2015UniqueSeparatorpublic void Apply<T1, T2>(MyClass<T1, T2> target)Di2015NewLine{Di2015NewLine    GetFunc<T1,T2>().Invoke(target);Di2015NewLine}Di2015NewLineDi2015NewLineprivate Action<MyClass<T1,T2>> GetFunc()Di2015NewLine{Di2015NewLine    return x => Console.WriteLine(x.ToString());Di2015NewLine}Di2015NewLine
588330Di2015UniqueSeparatorMyClass
588330Di2015UniqueSeparatorMyClass
588330Di2015UniqueSeparatorMyClass<T1,T2>
588330Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    // Put common stuff in hereDi2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClass<T1, T2> : MyClassDi2015NewLine{Di2015NewLine    // Put stuff using T1 and T2 hereDi2015NewLine}Di2015NewLine
588330Di2015UniqueSeparatorAction<MyClass>
588495Di2015UniqueSeparatorvar company = isspDB.CompanyDi2015NewLine                    .Where( co => co.companyID.ToString() == collection["company"] )Di2015NewLine                    .First();Di2015NewLine
588551Di2015UniqueSeparatorIList
588551Di2015UniqueSeparatorList<T>
588681Di2015UniqueSeparatorwhere
588681Di2015UniqueSeparatorpublic TResponse Call<TResponse, TRequest>(TRequest request)Di2015NewLine    where TRequest : MyClassDi2015NewLine    where TResponse : MyOtherClassDi2015NewLine
588837Di2015UniqueSeparator&
588837Di2015UniqueSeparatorfixed
588837Di2015UniqueSeparatorGCHandle
588837Di2015UniqueSeparatorIntPtr
588837Di2015UniqueSeparatoruint
588837Di2015UniqueSeparatorulong
588837Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine[StructLayout(LayoutKind.Sequential)]Di2015NewLineclass BlittableDi2015NewLine{Di2015NewLine    int x;Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    public static unsafe void Main()Di2015NewLine    {Di2015NewLine        int i;Di2015NewLine        object o = new Blittable();Di2015NewLine        int* ptr = &i;Di2015NewLine        IntPtr addr = (IntPtr)ptr;Di2015NewLineDi2015NewLine        Console.WriteLine(addr.ToString("x"));Di2015NewLineDi2015NewLine        GCHandle h = GCHandle.Alloc(o, GCHandleType.Pinned);Di2015NewLine        addr = h.AddrOfPinnedObject();Di2015NewLine        Console.WriteLine(addr.ToString("x"));Di2015NewLineDi2015NewLine        h.Free();Di2015NewLine    }Di2015NewLine}Di2015NewLine
588839Di2015UniqueSeparatorpublic static string RemoveDuplicates(string input)Di2015NewLine{Di2015NewLine    return new string(input.ToCharArray().Distinct().ToArray());Di2015NewLine}Di2015NewLine
589001Di2015UniqueSeparatorPath.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System));Di2015NewLine
589062Di2015UniqueSeparatorforeach(XmlElement el in doc.SelectNodes(...)) {Di2015NewLine    el.SetAttribute(...);Di2015NewLine}Di2015NewLine
589077Di2015UniqueSeparatorReadLine
589077Di2015UniqueSeparatorKeyValuePair<int, string>
589077Di2015UniqueSeparatorPeek()
589077Di2015UniqueSeparatorRead()
589077Di2015UniqueSeparatorRead()
589138Di2015UniqueSeparatorusing System.Data.EntityClient;Di2015NewLine...Di2015NewLineEntityConnection conn = new EntityConnection(myContext.Connection.ConnectionString);Di2015NewLineconn.Open();Di2015NewLineEntityCommand cmd = conn.CreateCommand();Di2015NewLinecmd.CommandText = @"Select t.MyValue From MyEntities.MyTable As t";Di2015NewLinevar queryExpression = cmd.Expression;Di2015NewLine....Di2015NewLineconn.Close();Di2015NewLine
589203Di2015UniqueSeparatorLoadWith<Customer>(c=>c.Orders);
589203Di2015UniqueSeparatorDataLoadOptions
589203Di2015UniqueSeparatorLoadWith
589203Di2015UniqueSeparatorCustomer
589301Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace LRUCache {Di2015NewLine    public class IndexedLinkedList<T> {Di2015NewLineDi2015NewLine        LinkedList<T> data = new LinkedList<T>();Di2015NewLine        Dictionary<T, LinkedListNode<T>> index = new Dictionary<T, LinkedListNode<T>>();Di2015NewLineDi2015NewLine        public void Add(T value) {Di2015NewLine            index[value] = data.AddLast(value);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void RemoveFirst() {Di2015NewLine            index.Remove(data.First.Value);Di2015NewLine            data.RemoveFirst();Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Remove(T value) {Di2015NewLine            LinkedListNode<T> node;Di2015NewLine            if (index.TryGetValue(value, out node)) {Di2015NewLine                data.Remove(node);Di2015NewLine                index.Remove(value);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public int Count {Di2015NewLine            get {Di2015NewLine                return data.Count;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Clear() {Di2015NewLine            data.Clear();Di2015NewLine            index.Clear();Di2015NewLine        }Di2015NewLineDi2015NewLine        public T First {Di2015NewLine            get {Di2015NewLine                return data.First.Value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
589301Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace LRUCache {Di2015NewLine    public class LRUCache<TKey, TValue> : IDictionary<TKey, TValue> {Di2015NewLineDi2015NewLine        object sync = new object();Di2015NewLine        Dictionary<TKey, TValue> data;Di2015NewLine        IndexedLinkedList<TKey> lruList = new IndexedLinkedList<TKey>();Di2015NewLine        ICollection<KeyValuePair<TKey, TValue>> dataAsCollection;Di2015NewLine        int capacity;Di2015NewLineDi2015NewLine        public LRUCache(int capacity) {Di2015NewLineDi2015NewLine            if (capacity <= 0) {Di2015NewLine                throw new ArgumentException("capacity should always be bigger than 0");Di2015NewLine            }Di2015NewLineDi2015NewLine            data = new Dictionary<TKey, TValue>(capacity);Di2015NewLine            dataAsCollection = data;Di2015NewLine            this.capacity = capacity;Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Add(TKey key, TValue value) {Di2015NewLine            if (!ContainsKey(key)) {Di2015NewLine                this[key] = value;Di2015NewLine            } else {Di2015NewLine                throw new ArgumentException("An attempt was made to insert a duplicate key in the cache.");Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool ContainsKey(TKey key) {Di2015NewLine            return data.ContainsKey(key);Di2015NewLine        }Di2015NewLineDi2015NewLine        public ICollection<TKey> Keys {Di2015NewLine            get {Di2015NewLine                return data.Keys;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool Remove(TKey key) {Di2015NewLine            bool existed = data.Remove(key);Di2015NewLine            lruList.Remove(key);Di2015NewLine            return existed;Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool TryGetValue(TKey key, out TValue value) {Di2015NewLine            return data.TryGetValue(key, out value);Di2015NewLine        }Di2015NewLineDi2015NewLine        public ICollection<TValue> Values {Di2015NewLine            get { return data.Values; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public TValue this[TKey key] {Di2015NewLine            get {Di2015NewLine                var value = data[key];Di2015NewLine                lruList.Remove(key);Di2015NewLine                lruList.Add(key);Di2015NewLine                return value;Di2015NewLine            }Di2015NewLine            set {Di2015NewLine                data[key] = value;Di2015NewLine                lruList.Remove(key);Di2015NewLine                lruList.Add(key);Di2015NewLineDi2015NewLine                if (data.Count > capacity) {Di2015NewLine                    data.Remove(lruList.First);Di2015NewLine                    lruList.RemoveFirst();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Add(KeyValuePair<TKey, TValue> item) {Di2015NewLine            Add(item.Key, item.Value);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Clear() {Di2015NewLine            data.Clear();Di2015NewLine            lruList.Clear();Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool Contains(KeyValuePair<TKey, TValue> item) {Di2015NewLine            return dataAsCollection.Contains(item);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) {Di2015NewLine            dataAsCollection.CopyTo(array, arrayIndex);Di2015NewLine        }Di2015NewLineDi2015NewLine        public int Count {Di2015NewLine            get { return data.Count; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool IsReadOnly {Di2015NewLine            get { return false; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool Remove(KeyValuePair<TKey, TValue> item) {Di2015NewLineDi2015NewLine            bool removed = dataAsCollection.Remove(item);Di2015NewLine            if (removed) {Di2015NewLine                lruList.Remove(item.Key);Di2015NewLine            }Di2015NewLine            return removed;Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() {Di2015NewLine            return dataAsCollection.GetEnumerator();Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {Di2015NewLine            return ((System.Collections.IEnumerable)data).GetEnumerator();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
589326Di2015UniqueSeparatorWM_INPUT
589326Di2015UniqueSeparatorKeyDown
589326Di2015UniqueSeparatorKeyPreview
589326Di2015UniqueSeparatorSetWindowsHookEx()
589344Di2015UniqueSeparatordouble
589344Di2015UniqueSeparatorToString
589344Di2015UniqueSeparatorIFormatProvider
589344Di2015UniqueSeparatorpublic static string Join(this IEnumerable<string> source, string separator)Di2015NewLine{Di2015NewLine    return String.Join(separator, source.ToArray());Di2015NewLine}Di2015NewLineDi2015NewLinepublic static string ToCsv<TRow>(this IEnumerable<TRow> rows, Func<double, string> valueToString)Di2015NewLine    where TRow : IEnumerable<double>Di2015NewLine{Di2015NewLine    return rowsDi2015NewLine        .Select(row => row.Select(valueToString).Join(", "))Di2015NewLine        .Join(Environment.NewLine);Di2015NewLine}Di2015NewLine
589346Di2015UniqueSeparatorDispose()
589463Di2015UniqueSeparator(?:^value_name\\s+)?([^,]+)(?:\\s*,\\s*)?Di2015NewLine
589463Di2015UniqueSeparatorvalue_name
589463Di2015UniqueSeparator'?'
589463Di2015UniqueSeparatorvXX
589463Di2015UniqueSeparator,
589463Di2015UniqueSeparator'?'
589463Di2015UniqueSeparator'vXX'
589463Di2015UniqueSeparator','
589463Di2015UniqueSeparator'value_name'
589463Di2015UniqueSeparator'vXX'
589463Di2015UniqueSeparatorRegex r = new Regex(@"(?:^value_name\\s+)?([^,]+)(?:\\s*,\\s*)?");Di2015NewLineMatch m = r.Match(subjectString);Di2015NewLinewhile (m.Success) {Di2015NewLine\for (int i = 1; i < m.Groups.Count; i++) {Di2015NewLine\\Group g = m.Groups[i];Di2015NewLine\\if (g.Success) {Di2015NewLine\\\// matched text: g.ValueDi2015NewLine\\\// match start: g.IndexDi2015NewLine\\\// match length: g.LengthDi2015NewLine\\} Di2015NewLine\}Di2015NewLine\m = m.NextMatch();Di2015NewLine}Di2015NewLine
589778Di2015UniqueSeparatorbreak;
589778Di2015UniqueSeparatorFirstOrDefault
589778Di2015UniqueSeparatortype.Id
589778Di2015UniqueSeparatorvar query = from s in varsDi2015NewLine            join type in statusList on s equals type.IdDi2015NewLine            select new NameValuePair(type.Id, type.Text);Di2015NewLineDi2015NewLineforeach (var pair in query)Di2015NewLine{Di2015NewLine    Add(pair);Di2015NewLine}Di2015NewLine
589778Di2015UniqueSeparatorAddRange
589778Di2015UniqueSeparatorIEnumerable<NameValuePair>
589778Di2015UniqueSeparatorAddRange(query)
589778Di2015UniqueSeparatorvar lookup = types.ToLookup(type => type.Id);Di2015NewLineforeach (var s in vars)Di2015NewLine{Di2015NewLine    var types = lookup[s];Di2015NewLine    if (types != null)Di2015NewLine    {Di2015NewLine        var type = types.First(); // Guaranteed to be at least one entryDi2015NewLine        Add(new NameValuePair(type.Id, type.Text));Di2015NewLine    }Di2015NewLine}Di2015NewLine
589847Di2015UniqueSeparatorMyObject[,] layout = new MyObject[3,3];Di2015NewLineDi2015NewLinepublic class MyObjectDi2015NewLine{Di2015NewLine        #region attributes        Di2015NewLine        private PictureBox pictureBox;Di2015NewLine        #endregionDi2015NewLineDi2015NewLine        public MyObject(PictureBox pictureBox)Di2015NewLine        {Di2015NewLine            this.pictureBox = pictureBox;Di2015NewLine        }Di2015NewLine}Di2015NewLine
589950Di2015UniqueSeparatorXDocument
589950Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Xml.Linq;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string xml = "<element1><element2>some data</element2></element1>";Di2015NewLineDi2015NewLine        XDocument doc = XDocument.Parse(xml);Di2015NewLine        xml = doc.ToString();Di2015NewLine        Console.WriteLine(xml);Di2015NewLine    }Di2015NewLine}Di2015NewLine
589950Di2015UniqueSeparator<element1>Di2015NewLine  <element2>some data</element2>Di2015NewLine</element1>Di2015NewLine
589950Di2015UniqueSeparatorXDocument.Save
589950Di2015UniqueSeparatorXElement
589950Di2015UniqueSeparatorXDocument
589959Di2015UniqueSeparatorIN
589959Di2015UniqueSeparatorSELECT *Di2015NewLineFROM my_tableDi2015NewLineWHERE id IN (SELECT id FROM dbo.SplitCSVToTable(@MyCSVParam))Di2015NewLine
590015Di2015UniqueSeparatorpublic partial class CoursesDi2015NewLine{Di2015NewLine    public String NewProperty { get; set; }Di2015NewLine}Di2015NewLine
590125Di2015UniqueSeparator    <SafeMode MaxControls="200" CallStack="true" DirectFileDependencies="10" TotalFileDependencies="50" AllowPageLevelTrace="false">Di2015NewLine
590125Di2015UniqueSeparator<customErrors mode="Off" />Di2015NewLine
590125Di2015UniqueSeparatorDim myweb As Microsoft.SharePoint.SPWeb = SPContext.Current.WebDi2015NewLine
590167Di2015UniqueSeparator// Hijack these for simplicityDi2015NewLineimport java.nio.BufferOverflowException;Di2015NewLineimport java.nio.BufferUnderflowException;Di2015NewLineDi2015NewLinepublic class CircularBuffer<T> {Di2015NewLineDi2015NewLine  private T[] buffer;Di2015NewLineDi2015NewLine  private int tail;Di2015NewLineDi2015NewLine  private int head;Di2015NewLineDi2015NewLine  @SuppressWarnings("unchecked")Di2015NewLine  public CircularBuffer(int n) {Di2015NewLine    buffer = (T[]) new Object[n];Di2015NewLine    tail = 0;Di2015NewLine    head = 0;Di2015NewLine  }Di2015NewLineDi2015NewLine  public void add(T toAdd) {Di2015NewLine    if (head != (tail - 1)) {Di2015NewLine        buffer[head++] = toAdd;Di2015NewLine    } else {Di2015NewLine        throw new BufferOverflowException();Di2015NewLine    }Di2015NewLine    head = head % buffer.length;Di2015NewLine  }Di2015NewLineDi2015NewLine  public T get() {Di2015NewLine    T t = null;Di2015NewLine    int adjTail = tail > head ? tail - buffer.length : tail;Di2015NewLine    if (adjTail < head) {Di2015NewLine        t = (T) buffer[tail++];Di2015NewLine        tail = tail % buffer.length;Di2015NewLine    } else {Di2015NewLine        throw new BufferUnderflowException();Di2015NewLine    }Di2015NewLine    return t;Di2015NewLine  }Di2015NewLineDi2015NewLine  public String toString() {Di2015NewLine    return "CircularBuffer(size=" + buffer.length + ", head=" + head + ", tail=" + tail + ")";Di2015NewLine  }Di2015NewLineDi2015NewLine  public static void main(String[] args) {Di2015NewLine    CircularBuffer<String> b = new CircularBuffer<String>(3);Di2015NewLine    for (int i = 0; i < 10; i++) {Di2015NewLine        System.out.println("Start: " + b);Di2015NewLine        b.add("One");Di2015NewLine        System.out.println("One: " + b);Di2015NewLine        b.add("Two");Di2015NewLine        System.out.println("Two: " + b);Di2015NewLine        System.out.println("Got '" + b.get() + "', now " + b);Di2015NewLineDi2015NewLine        b.add("Three");Di2015NewLine        System.out.println("Three: " + b);Di2015NewLine        // Test OverflowDi2015NewLine        // b.add("Four");Di2015NewLine        // System.out.println("Four: " + b);Di2015NewLineDi2015NewLine        System.out.println("Got '" + b.get() + "', now " + b);Di2015NewLine        System.out.println("Got '" + b.get() + "', now " + b);Di2015NewLine        // Test UnderflowDi2015NewLine        // System.out.println("Got '" + b.get() + "', now " + b);Di2015NewLineDi2015NewLine        // Back to start, let's shift on oneDi2015NewLine        b.add("Foo");Di2015NewLine        b.get();Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
590174Di2015UniqueSeparatorin li;Di2015NewLineif(int.TryParse(LclClass.SomeString, out li)) {Di2015NewLine    // li is now assignedDi2015NewLine} else {Di2015NewLine    // input string is dodgyDi2015NewLine}Di2015NewLine
590174Di2015UniqueSeparatorlock
590174Di2015UniqueSeparatorMonitor.Enter(lockObj);Di2015NewLinetry {Di2015NewLine  // ...Di2015NewLine} finally {Di2015NewLine    Monitor.Exit(lockObj);Di2015NewLine}Di2015NewLine
590174Di2015UniqueSeparatorlock
590179Di2015UniqueSeparator<wsdl:types>Di2015NewLine    <xs:schema elementFormDefault="qualified" targetNamespace="http://com.barcap.cbts.core.messaging.rpc/">Di2015NewLine        <xs:element name="GetInstrument">Di2015NewLine            <xs:complexType/>Di2015NewLine        </xs:element>Di2015NewLine        <xs:element name="GetInstrumentResponse">Di2015NewLine            <xs:complexType>Di2015NewLine                <xs:sequence>Di2015NewLine                    <!-- nillable="true" removed -->Di2015NewLine                    <xs:element maxOccurs="1" minOccurs="0"Di2015NewLine                        name="GetInstrumentResponse" type="tns:Instrument"/>Di2015NewLine                </xs:sequence>Di2015NewLine            </xs:complexType>Di2015NewLine        </xs:element>Di2015NewLine        <xs:complexType name="Instrument">Di2015NewLine            <xs:sequence/>Di2015NewLine            <xs:attribute name="name" type="xs:string"/> Di2015NewLine        </xs:complexType>Di2015NewLine    </xs:schema>Di2015NewLine</wsdl:types>Di2015NewLine
590237Di2015UniqueSeparatorprotected BaseClass(string s1, string s2, string s3)Di2015NewLine{Di2015NewLine    this.s1 = s1;Di2015NewLine    this.s2 = s2;Di2015NewLine    this.s3 = s3;Di2015NewLine}Di2015NewLine
590237Di2015UniqueSeparator// Just for exampleDi2015NewLinepublic DerivedClass(string x) : base("foo", "bar", x)Di2015NewLine{Di2015NewLine}Di2015NewLine
590344Di2015UniqueSeparator@
590344Di2015UniqueSeparatorRegex rloginRnd = new Regex(@"name="+ loginrand+@"value=\\w*");Di2015NewLine
590467Di2015UniqueSeparatorRegex re = new Regex(@"[<>]\\s*(?<name>\\w+)");Di2015NewLineMatchCollection matches = re.Matches("type_name \\"abc\\" < text1 > text2 >  \\"ab123\\" < text3");            Di2015NewLineforeach (Match m in matches)Di2015NewLine{Di2015NewLine   string name = m.Groups["name"].Value;Di2015NewLine}Di2015NewLine
590655Di2015UniqueSeparator// rs = ReportingService2005 that you need to set up.Di2015NewLineDi2015NewLineDataSource ds;Di2015NewLineDataSources dataSources = rs.GetItemDataSources(item);Di2015NewLineDi2015NewLine// item is a string containing the full path to the report.Di2015NewLineDi2015NewLinedataSources = rs.GetItemDataSources(item);Di2015NewLineds = dataSources[0];Di2015NewLine
590655Di2015UniqueSeparatorDataSourceDefinition dsd = ds as DataSourceDefinition();Di2015NewLineif(dsd == null)Di2015NewLine    throw new Exception();Di2015NewLineDi2015NewLineString connectionString = dsd.ConnectString;Di2015NewLine
590711Di2015UniqueSeparatorXmlSerializer
590711Di2015UniqueSeparatorXmlSerializer
590711Di2015UniqueSeparatorXmlAttributeOverrides
590711Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Xml.Serialization;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static readonly XmlSerializer ser;Di2015NewLine    static Program()Di2015NewLine    {Di2015NewLine        List<Type> extraTypes = new List<Type>();Di2015NewLine        // TODO: read config, or use reflection toDi2015NewLine        // look at all assembliesDi2015NewLine        extraTypes.Add(typeof(Bar));Di2015NewLine        ser = new XmlSerializer(typeof(Foo), extraTypes.ToArray());Di2015NewLine    }Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Foo foo = new Bar();Di2015NewLine        MemoryStream ms = new MemoryStream();Di2015NewLine        ser.Serialize(ms, foo);Di2015NewLine        ms.Position = 0;Di2015NewLine        Foo clone = (Foo)ser.Deserialize(ms);Di2015NewLine        Console.WriteLine(clone.GetType());Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class Foo { }Di2015NewLinepublic class Bar : Foo {}Di2015NewLine
590767Di2015UniqueSeparator() => 42;  // Takes no arguments returns 42Di2015NewLinex => 42;   // Takes 1 argument and returns 42Di2015NewLine(x) => 42; // Identical to aboveDi2015NewLine
590832Di2015UniqueSeparator   object_id = Transport.BeginSend(xxx, xxx, Callback, client_id);Di2015NewLine
590901Di2015UniqueSeparator// SomeList is not empty before the loopDi2015NewLinefor (int i = 0; i < myObject.SomeList.Count; i++)Di2015NewLine{Di2015NewLine    myObject.SomeList.Add(bar);Di2015NewLine}Di2015NewLine
590935Di2015UniqueSeparator[XmlRoot("chart")]Di2015NewLinepublic class ChartDi2015NewLine{        Di2015NewLine    [XmlAttributeAttribute("palette")]Di2015NewLine    public string Palette;Di2015NewLineDi2015NewLine    [XmlArray("categories")]Di2015NewLine    [XmlArrayItem("category")]Di2015NewLine    public List<Category> Categories = new List<Category>();Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class CategoryDi2015NewLine{Di2015NewLine    [XmlAttributeAttribute("label")]Di2015NewLine    public string Label;Di2015NewLine}Di2015NewLine
590935Di2015UniqueSeparatorxsd.exe something.xmlDi2015NewLinexsd.exe something.xsd /classesDi2015NewLine
591002Di2015UniqueSeparatorpublic static IEnumerable<Person> SmartCombine(IEnumerable<Person> fallback, IEnumerable<Person> translated) {Di2015NewLine  return translated.Concat(fallback.Where(p => !translated.Any(x => x.id.equals(p.id)));Di2015NewLine}Di2015NewLine
591095Di2015UniqueSeparatorStringBuilder markup = new StringBuilder();Di2015NewLineDi2015NewLineforeach (SearchResult image in Search.GetImages(componentId))Di2015NewLine{Di2015NewLine    markup.AppendFormat(Di2015NewLine        "<div class='captionedImage'><img src='{0}' width='150' alt='{1}'/><p>{1}</p></div>", Di2015NewLine        image.Resolutions[0].Uri, image.CaptionDi2015NewLine      );Di2015NewLine}Di2015NewLineDi2015NewLineLiteralMarkup.Text = markup.ToString();Di2015NewLine
591095Di2015UniqueSeparatorpublic class CaptionedHtmlImageDi2015NewLine{  Di2015NewLine    public Uri src {get; set;};Di2015NewLine    public string Caption {get; set;}Di2015NewLineDi2015NewLine    CaptionedHtmlImage(Uri src, string Caption)Di2015NewLine    {Di2015NewLine        this.src = src;Di2015NewLine        this.Caption = Caption;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return String.Format(Di2015NewLine            "<div class='captionedImage'><img src='{0}' width='150' alt='{1}'/><p>{1}</p></div>"Di2015NewLine            src.ToString(), CaptionDi2015NewLine          );Di2015NewLine    }Di2015NewLine}Di2015NewLine
591113Di2015UniqueSeparatorstring afieldnameintheclass;Di2015NewLine
591113Di2015UniqueSeparatorpublic PropertyDescriptor Schema {Di2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine    return TypeDescriptor.GetProperties(this)["afieldnameintheclass"];Di2015NewLine  }Di2015NewLine}Di2015NewLine
591165Di2015UniqueSeparatorvar grouped = from f in fooListDi2015NewLine              orderby f.SomeBar.Name ascendingDi2015NewLine              group f by f.SomeBar into GroupDi2015NewLine              select Group;Di2015NewLineDi2015NewLinevar bars = grouped.Select(group => group.Key);Di2015NewLine
591165Di2015UniqueSeparatorvar someGroup = from f in fooListDi2015NewLine                orderby f.SomeBar.Name ascendingDi2015NewLine                group f by f.SomeBar.Name into GroupDi2015NewLine                select Group;Di2015NewLineDi2015NewLinevar bars = someGroup.Select(group => group.First().SomeBar);Di2015NewLine
591193Di2015UniqueSeparator$ReturnValue
591204Di2015UniqueSeparator-- human_id doesn't have to be calculated when you retrieve the dataDi2015NewLine-- you could create a computed column on the table itself if you preferDi2015NewLineSELECT (CAST(your_guid_column AS BINARY(3)) % 100000) AS human_idDi2015NewLineFROM your_tableDi2015NewLine
591214Di2015UniqueSeparatorclass Car : GameComponentDi2015NewLine{Di2015NewLine    public override void Update(GameTime time)Di2015NewLine    {Di2015NewLine         velocity += acceleration * time.ElapsedGameTime.TotalSeconds;Di2015NewLine         position += velocity * time.ElapsedGameTime.TotalSeconds;Di2015NewLine    }Di2015NewLineDi2015NewLine    Vector3 position;Di2015NewLine    Vector3 velocity;Di2015NewLine    Vector3 acceleration;Di2015NewLine}Di2015NewLine
591298Di2015UniqueSeparator<%= Html.DropDownList("myList") %>Di2015NewLine
591298Di2015UniqueSeparatorSelectInternal( string optionLabel, string name, IEnumerable<SelectListItem> selectList, bool usedViewData, bool allowMultiple, IDictionary<string,object> htmlAttributes )Di2015NewLine
591298Di2015UniqueSeparatorDropDownList( string name ) ->Di2015NewLineSelectInternal( null, name, htmlHelper.GetSelectData(name), true, false, null )Di2015NewLine
591298Di2015UniqueSeparatorList( string name, IEnumerable<SelectListItem> selectList ) ->Di2015NewLineDropDownList( name, selectList, null /* object, htmlAttributes */ ) ->Di2015NewLineDropDownList( name, selectList, new RouteValueDictionary(htmlAttributes) ) ->Di2015NewLineSelectInternal( null, name, selectList, false, false, htmlAttributes )Di2015NewLine
591368Di2015UniqueSeparatorTableAttribute
591368Di2015UniqueSeparator[Table(Name = "foo_aggregates")]Di2015NewLinepublic class FooCountDi2015NewLine{Di2015NewLine    [Column(Name = "foo_id")]Di2015NewLine    public Int32 FooId { get; set; }Di2015NewLineDi2015NewLine    [Column(Name = "count")]Di2015NewLine    public Int32 Count { get; set; }Di2015NewLine}Di2015NewLine
591368Di2015UniqueSeparatorGetTable<T>()
591441Di2015UniqueSeparatorpublic class S2kBoolAttribute : CustomModelBinderAttribute, IModelBinderDi2015NewLine{Di2015NewLine\public override IModelBinder GetBinder()Di2015NewLine\{Di2015NewLine\\return this;Di2015NewLine\}Di2015NewLineDi2015NewLine\public object BindModel( ControllerContext controllerContext, ModelBindingContext bindingContext )Di2015NewLine\{Di2015NewLine\\ValueProviderResult result;Di2015NewLine\\return bindingContext.ValueProvider.TryGetValue( bindingContext.ModelName, out result )Di2015NewLine\\\? (S2kBool)result.ConvertTo( typeof( bool ) )Di2015NewLine\\\: null;Di2015NewLine\}Di2015NewLine}Di2015NewLine
591441Di2015UniqueSeparatorpublic ActionResult Foo( [S2kBool]S2kBool myProperty ){Di2015NewLine    myClassInstance.MyProperty = myProperty;Di2015NewLine    SaveToLegacyDb(myClassInstance);Di2015NewLine    return RedirectToAction("Bar");Di2015NewLine}Di2015NewLine
591491Di2015UniqueSeparatorusing System.Windows.Forms.VisualStyles;Di2015NewLine...Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine      InitializeComponent();Di2015NewLine      if (Application.RenderWithVisualStyles)Di2015NewLine      {Di2015NewLine        VisualStyleRenderer rndr = new VisualStyleRenderer(VisualStyleElement.Button.GroupBox.Normal);Di2015NewLine        Color c = rndr.GetColor(ColorProperty.TextColor);Di2015NewLine        label1.ForeColor = c;Di2015NewLine      }Di2015NewLine    }Di2015NewLine
591600Di2015UniqueSeparator((Control)webBrowser1).Enabled = false;Di2015NewLine
591612Di2015UniqueSeparatorEnvironment.CurrentDirectory
591612Di2015UniqueSeparatorbin
591612Di2015UniqueSeparatorOpenFileDialog
591612Di2015UniqueSeparatorOpenFileDialog
591612Di2015UniqueSeparatorOpenFileDialog
591622Di2015UniqueSeparatorstring conString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sourceString;Di2015NewLinestring strSql1 = "SELECT * FROM ReportTable";Di2015NewLineOleDbConnection con = new OleDbConnection(conString);Di2015NewLinecon.Open();Di2015NewLineOleDbDataAdapter dAdapter = new OleDbDataAdapter();Di2015NewLinedAdapter.SelectCommand = new OleDbCommand(strSql1, con);Di2015NewLinedAdapter.Fill(currentDataSet, "ReportTable");Di2015NewLinecon.Close();Di2015NewLine
591622Di2015UniqueSeparatorint reportTableCount = currentDataSet.ReportTable.Count();Di2015NewLineint reportTableCounter = 0;Di2015NewLineDi2015NewLinewhile (reportTableCounter < reportTableCount)Di2015NewLine{Di2015NewLine   if (currentDataSet.ReportTable[reportTableCounter].RepParam1Value == "Bad data")Di2015NewLine   {Di2015NewLine       currentDataSet.ReportTable[reportTableCounter].RepParam1Value = "Good data";Di2015NewLine   }Di2015NewLine    reportTableCounter = reportTableCounter + 1;Di2015NewLine}Di2015NewLine
591622Di2015UniqueSeparatorcon.Open();Di2015NewLinedAdapter.SelectCommand = new OleDbCommand(strSql1, con);Di2015NewLineOleDbCommandBuilder objCommandBuilder = new OleDbCommandBuilder(dAdapter);Di2015NewLinedAdapter.Update(currentDataSet, "ReportTable");Di2015NewLinecon.Close();Di2015NewLine
591734Di2015UniqueSeparator  public partial class Form1 : Form {Di2015NewLine    public Form1() {Di2015NewLine      InitializeComponent();Di2015NewLine    }Di2015NewLine    private const int SnapDist = 100;Di2015NewLine    private bool DoSnap(int pos, int edge) {Di2015NewLine      int delta = pos - edge;Di2015NewLine      return delta > 0 && delta <= SnapDist;Di2015NewLine    }Di2015NewLine    protected override void  OnResizeEnd(EventArgs e) {Di2015NewLine      base.OnResizeEnd(e);Di2015NewLine      Screen scn = Screen.FromPoint(this.Location);Di2015NewLine      if (DoSnap(this.Left, scn.WorkingArea.Left)) this.Left= scn.WorkingArea.Left;Di2015NewLine      if (DoSnap(this.Top, scn.WorkingArea.Top)) this.Top = scn.WorkingArea.Top;Di2015NewLine      if (DoSnap(scn.WorkingArea.Right, this.Right)) this.Left = scn.WorkingArea.Right - this.Width;Di2015NewLine      if (DoSnap(scn.WorkingArea.Bottom, this.Bottom)) this.Top = scn.WorkingArea.Bottom - this.Height;Di2015NewLine    }Di2015NewLine  }Di2015NewLine
591820Di2015UniqueSeparatorvar today = DateTime.Today;Di2015NewLinevar month = new DateTime(today.Year, today.Month, 1);       Di2015NewLinevar first = month.AddMonths(-1);Di2015NewLinevar last = month.AddDays(-1);Di2015NewLine
591942Di2015UniqueSeparatorUSE [GraphExample2]Di2015NewLineGODi2015NewLine/****** Object:  Table [dbo].[Node]    Script Date: 02/26/2009 15:45:53 ******/Di2015NewLineSET ANSI_NULLS ONDi2015NewLineGODi2015NewLineSET QUOTED_IDENTIFIER ONDi2015NewLineGODi2015NewLineSET ANSI_PADDING ONDi2015NewLineGODi2015NewLineCREATE TABLE [dbo].[Node](Di2015NewLine\[NodeID] [int] IDENTITY(1,1) NOT NULL,Di2015NewLine\[NodeTypeDiscriminator] [int] NOT NULL,Di2015NewLine\[Name] [varchar](255) NOT NULL,Di2015NewLine\[Description] [varchar](1023) NULL,Di2015NewLine CONSTRAINT [PK_Node] PRIMARY KEY CLUSTERED Di2015NewLine(Di2015NewLine\[NodeID] ASCDi2015NewLine)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]Di2015NewLine) ON [PRIMARY]Di2015NewLineGODi2015NewLineSET ANSI_PADDING OFFDi2015NewLineGODi2015NewLine/****** Object:  Table [dbo].[Link]    Script Date: 02/26/2009 15:45:53 ******/Di2015NewLineSET ANSI_NULLS ONDi2015NewLineGODi2015NewLineSET QUOTED_IDENTIFIER ONDi2015NewLineGODi2015NewLineSET ANSI_PADDING ONDi2015NewLineGODi2015NewLineCREATE TABLE [dbo].[Link](Di2015NewLine\[LinkID] [int] IDENTITY(1,1) NOT NULL,Di2015NewLine\[LinkTypeDiscriminator] [int] NOT NULL,Di2015NewLine\[LeaderID] [int] NULL,Di2015NewLine\[FollowerID] [int] NULL,Di2015NewLine\[PersonID] [int] NULL,Di2015NewLine\[LocationID] [int] NULL,Di2015NewLine\[Name] [varchar](255) NULL,Di2015NewLine\[Description] [varchar](1023) NULL,Di2015NewLine CONSTRAINT [PK_Link] PRIMARY KEY CLUSTERED Di2015NewLine(Di2015NewLine\[LinkID] ASCDi2015NewLine)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]Di2015NewLine) ON [PRIMARY]Di2015NewLineGODi2015NewLineSET ANSI_PADDING OFFDi2015NewLineGODi2015NewLine/****** Object:  ForeignKey [FK_Link_Node_Follower]    Script Date: 02/26/2009 15:45:53 ******/Di2015NewLineALTER TABLE [dbo].[Link]  WITH CHECK ADD  CONSTRAINT [FK_Link_Node_Follower] FOREIGN KEY([FollowerID])Di2015NewLineREFERENCES [dbo].[Node] ([NodeID])Di2015NewLineGODi2015NewLineALTER TABLE [dbo].[Link] CHECK CONSTRAINT [FK_Link_Node_Follower]Di2015NewLineGODi2015NewLine/****** Object:  ForeignKey [FK_Link_Node_Leader]    Script Date: 02/26/2009 15:45:53 ******/Di2015NewLineALTER TABLE [dbo].[Link]  WITH CHECK ADD  CONSTRAINT [FK_Link_Node_Leader] FOREIGN KEY([LeaderID])Di2015NewLineREFERENCES [dbo].[Node] ([NodeID])Di2015NewLineGODi2015NewLineALTER TABLE [dbo].[Link] CHECK CONSTRAINT [FK_Link_Node_Leader]Di2015NewLineGODi2015NewLine/****** Object:  ForeignKey [FK_Link_Node_Location]    Script Date: 02/26/2009 15:45:53 ******/Di2015NewLineALTER TABLE [dbo].[Link]  WITH CHECK ADD  CONSTRAINT [FK_Link_Node_Location] FOREIGN KEY([LocationID])Di2015NewLineREFERENCES [dbo].[Node] ([NodeID])Di2015NewLineGODi2015NewLineALTER TABLE [dbo].[Link] CHECK CONSTRAINT [FK_Link_Node_Location]Di2015NewLineGODi2015NewLine/****** Object:  ForeignKey [FK_Link_Node_Person]    Script Date: 02/26/2009 15:45:53 ******/Di2015NewLineALTER TABLE [dbo].[Link]  WITH CHECK ADD  CONSTRAINT [FK_Link_Node_Person] FOREIGN KEY([PersonID])Di2015NewLineREFERENCES [dbo].[Node] ([NodeID])Di2015NewLineGODi2015NewLineALTER TABLE [dbo].[Link] CHECK CONSTRAINT [FK_Link_Node_Person]Di2015NewLineGODi2015NewLine
591942Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine  <edmx:Edmx Version="1.0" xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx">Di2015NewLine    <!-- EF Runtime content -->Di2015NewLine    <edmx:Runtime>Di2015NewLine      <!-- SSDL content -->Di2015NewLine      <edmx:StorageModels>Di2015NewLine        <Schema Namespace="GraphModel.Store" Alias="Self" Provider="System.Data.SqlClient" ProviderManifestToken="2005" xmlns:store="http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator" xmlns="http://schemas.microsoft.com/ado/2006/04/edm/ssdl">Di2015NewLine          <EntityContainer Name="GraphModelStoreContainer">Di2015NewLine            <EntitySet Name="Link" EntityType="GraphModel.Store.Link" store:Type="Tables" Schema="dbo" />Di2015NewLine            <EntitySet Name="Node" EntityType="GraphModel.Store.Node" store:Type="Tables" Schema="dbo" />Di2015NewLine            <AssociationSet Name="FK_Link_Node_Follower" Association="GraphModel.Store.FK_Link_Node_Follower">Di2015NewLine              <End Role="Node" EntitySet="Node" />Di2015NewLine              <End Role="Link" EntitySet="Link" />Di2015NewLine            </AssociationSet>Di2015NewLine            <AssociationSet Name="FK_Link_Node_Leader" Association="GraphModel.Store.FK_Link_Node_Leader">Di2015NewLine              <End Role="Node" EntitySet="Node" />Di2015NewLine              <End Role="Link" EntitySet="Link" />Di2015NewLine            </AssociationSet>Di2015NewLine            <AssociationSet Name="FK_Link_Node_Location" Association="GraphModel.Store.FK_Link_Node_Location">Di2015NewLine              <End Role="Node" EntitySet="Node" />Di2015NewLine              <End Role="Link" EntitySet="Link" />Di2015NewLine            </AssociationSet>Di2015NewLine            <AssociationSet Name="FK_Link_Node_Person" Association="GraphModel.Store.FK_Link_Node_Person">Di2015NewLine              <End Role="Node" EntitySet="Node" />Di2015NewLine              <End Role="Link" EntitySet="Link" />Di2015NewLine            </AssociationSet>Di2015NewLine          </EntityContainer>Di2015NewLine          <EntityType Name="Link">Di2015NewLine            <Key>Di2015NewLine              <PropertyRef Name="LinkID" />Di2015NewLine            </Key>Di2015NewLine            <Property Name="LinkID" Type="int" Nullable="false" StoreGeneratedPattern="Identity" />Di2015NewLine            <Property Name="LinkTypeDiscriminator" Type="int" Nullable="false" />Di2015NewLine            <Property Name="LeaderID" Type="int" />Di2015NewLine            <Property Name="FollowerID" Type="int" />Di2015NewLine            <Property Name="PersonID" Type="int" />Di2015NewLine            <Property Name="LocationID" Type="int" />Di2015NewLine            <Property Name="Name" Type="varchar" MaxLength="255" />Di2015NewLine            <Property Name="Description" Type="varchar" MaxLength="1023" />Di2015NewLine          </EntityType>Di2015NewLine          <EntityType Name="Node">Di2015NewLine            <Key>Di2015NewLine              <PropertyRef Name="NodeID" />Di2015NewLine            </Key>Di2015NewLine            <Property Name="NodeID" Type="int" Nullable="false" StoreGeneratedPattern="Identity" />Di2015NewLine            <Property Name="NodeTypeDiscriminator" Type="int" Nullable="false" />Di2015NewLine            <Property Name="Name" Type="varchar" Nullable="false" MaxLength="255" />Di2015NewLine            <Property Name="Description" Type="varchar" MaxLength="1023" />Di2015NewLine          </EntityType>Di2015NewLine          <Association Name="FK_Link_Node_Follower">Di2015NewLine            <End Role="Node" Type="GraphModel.Store.Node" Multiplicity="0..1" />Di2015NewLine            <End Role="Link" Type="GraphModel.Store.Link" Multiplicity="*" />Di2015NewLine            <ReferentialConstraint>Di2015NewLine              <Principal Role="Node">Di2015NewLine                <PropertyRef Name="NodeID" />Di2015NewLine              </Principal>Di2015NewLine              <Dependent Role="Link">Di2015NewLine                <PropertyRef Name="FollowerID" />Di2015NewLine              </Dependent>Di2015NewLine            </ReferentialConstraint>Di2015NewLine          </Association>Di2015NewLine          <Association Name="FK_Link_Node_Leader">Di2015NewLine            <End Role="Node" Type="GraphModel.Store.Node" Multiplicity="0..1" />Di2015NewLine            <End Role="Link" Type="GraphModel.Store.Link" Multiplicity="*" />Di2015NewLine            <ReferentialConstraint>Di2015NewLine              <Principal Role="Node">Di2015NewLine                <PropertyRef Name="NodeID" />Di2015NewLine              </Principal>Di2015NewLine              <Dependent Role="Link">Di2015NewLine                <PropertyRef Name="LeaderID" />Di2015NewLine              </Dependent>Di2015NewLine            </ReferentialConstraint>Di2015NewLine          </Association>Di2015NewLine          <Association Name="FK_Link_Node_Location">Di2015NewLine            <End Role="Node" Type="GraphModel.Store.Node" Multiplicity="0..1" />Di2015NewLine            <End Role="Link" Type="GraphModel.Store.Link" Multiplicity="*" />Di2015NewLine            <ReferentialConstraint>Di2015NewLine              <Principal Role="Node">Di2015NewLine                <PropertyRef Name="NodeID" />Di2015NewLine              </Principal>Di2015NewLine              <Dependent Role="Link">Di2015NewLine                <PropertyRef Name="LocationID" />Di2015NewLine              </Dependent>Di2015NewLine            </ReferentialConstraint>Di2015NewLine          </Association>Di2015NewLine          <Association Name="FK_Link_Node_Person">Di2015NewLine            <End Role="Node" Type="GraphModel.Store.Node" Multiplicity="0..1" />Di2015NewLine            <End Role="Link" Type="GraphModel.Store.Link" Multiplicity="*" />Di2015NewLine            <ReferentialConstraint>Di2015NewLine              <Principal Role="Node">Di2015NewLine                <PropertyRef Name="NodeID" />Di2015NewLine              </Principal>Di2015NewLine              <Dependent Role="Link">Di2015NewLine                <PropertyRef Name="PersonID" />Di2015NewLine              </Dependent>Di2015NewLine            </ReferentialConstraint>Di2015NewLine          </Association>Di2015NewLine        </Schema>Di2015NewLine      </edmx:StorageModels>Di2015NewLine      <!-- CSDL content -->Di2015NewLine      <edmx:ConceptualModels>Di2015NewLine        <Schema xmlns="http://schemas.microsoft.com/ado/2006/04/edm" Namespace="GraphModel" Alias="Self">Di2015NewLine          <EntityContainer Name="GraphModelContainer" >Di2015NewLine            <EntitySet Name="NodeSet" EntityType="GraphModel.Node" />Di2015NewLine            <EntitySet Name="LinkSet" EntityType="GraphModel.Link" />Di2015NewLine            <AssociationSet Name="PersonPersonToPerson_Leader" Association="GraphModel.PersonPersonToPerson_Leader">Di2015NewLine              <End Role="Person" EntitySet="NodeSet" />Di2015NewLine              <End Role="PersonToPerson" EntitySet="LinkSet" />Di2015NewLine            </AssociationSet>Di2015NewLine            <AssociationSet Name="PersonPersonToPerson_Follower" Association="GraphModel.PersonPersonToPerson_Follower">Di2015NewLine              <End Role="Person" EntitySet="NodeSet" />Di2015NewLine              <End Role="PersonToPerson" EntitySet="LinkSet" />Di2015NewLine            </AssociationSet>Di2015NewLine            <AssociationSet Name="Person_PersonToLocation" Association="GraphModel.Person_PersonToLocation">Di2015NewLine              <End Role="Person" EntitySet="NodeSet" />Di2015NewLine              <End Role="PersonToLocation" EntitySet="LinkSet" />Di2015NewLine            </AssociationSet>Di2015NewLine            <AssociationSet Name="Location_PersonToLocation" Association="GraphModel.Location_PersonToLocation">Di2015NewLine              <End Role="Location" EntitySet="NodeSet" />Di2015NewLine              <End Role="PersonToLocation" EntitySet="LinkSet" />Di2015NewLine            </AssociationSet>Di2015NewLine          </EntityContainer>Di2015NewLine          <EntityType Name="Node" Abstract="true">Di2015NewLine            <Key>Di2015NewLine              <PropertyRef Name="NodeId" />Di2015NewLine            </Key>Di2015NewLine            <Property Name="NodeId" Type="Int32" Nullable="false" />Di2015NewLine            <Property Name="Name" Type="String" Nullable="false" />Di2015NewLine            <Property Name="Description" Type="String" Nullable="true" />Di2015NewLine          </EntityType>Di2015NewLine          <EntityType Name="Person" BaseType="GraphModel.Node" >Di2015NewLine            <NavigationProperty Name="Leaders" Relationship="GraphModel.PersonPersonToPerson_Leader" FromRole="Person" ToRole="PersonToPerson" />Di2015NewLine            <NavigationProperty Name="Followers" Relationship="GraphModel.PersonPersonToPerson_Follower" FromRole="Person" ToRole="PersonToPerson" />Di2015NewLine            <NavigationProperty Name="Locations" Relationship="GraphModel.Person_PersonToLocation" FromRole="Person" ToRole="PersonToLocation" />Di2015NewLine          </EntityType>Di2015NewLine          <EntityType Name="Location" BaseType="GraphModel.Node" >Di2015NewLine            <NavigationProperty Name="Visitors" Relationship="GraphModel.Location_PersonToLocation" FromRole="Location" ToRole="PersonToLocation" />Di2015NewLine          </EntityType>Di2015NewLine          <EntityType Name="Link" Abstract="true">Di2015NewLine            <Key>Di2015NewLine              <PropertyRef Name="LinkId" />Di2015NewLine            </Key>Di2015NewLine            <Property Name="LinkId" Type="Int32" Nullable="false" />Di2015NewLine            <Property Name="Name" Type="String" Nullable="true" />Di2015NewLine            <Property Name="Description" Type="String" Nullable="true" />Di2015NewLine          </EntityType>Di2015NewLine          <EntityType Name="PersonToPerson" BaseType="GraphModel.Link" >Di2015NewLine            <NavigationProperty Name="Leader" Relationship="GraphModel.PersonPersonToPerson_Leader" FromRole="PersonToPerson" ToRole="Person" />Di2015NewLine            <NavigationProperty Name="Follower" Relationship="GraphModel.PersonPersonToPerson_Follower" FromRole="PersonToPerson" ToRole="Person" />Di2015NewLine          </EntityType>Di2015NewLine          <EntityType Name="PersonToLocation" BaseType="GraphModel.Link" >Di2015NewLine            <NavigationProperty Name="Person" Relationship="GraphModel.Person_PersonToLocation" FromRole="PersonToLocation" ToRole="Person" />Di2015NewLine            <NavigationProperty Name="Location" Relationship="GraphModel.Location_PersonToLocation" FromRole="PersonToLocation" ToRole="Location" />Di2015NewLine          </EntityType>Di2015NewLine          <Association Name="PersonPersonToPerson_Leader">Di2015NewLine            <End Type="GraphModel.Person" Role="Person" Multiplicity="1" />Di2015NewLine            <End Type="GraphModel.PersonToPerson" Role="PersonToPerson" Multiplicity="*" />Di2015NewLine          </Association>Di2015NewLine          <Association Name="PersonPersonToPerson_Follower">Di2015NewLine            <End Type="GraphModel.Person" Role="Person" Multiplicity="1" />Di2015NewLine            <End Type="GraphModel.PersonToPerson" Role="PersonToPerson" Multiplicity="*" />Di2015NewLine          </Association>Di2015NewLine          <Association Name="Person_PersonToLocation">Di2015NewLine            <End Type="GraphModel.Person" Role="Person" Multiplicity="1" />Di2015NewLine            <End Type="GraphModel.PersonToLocation" Role="PersonToLocation" Multiplicity="*" />Di2015NewLine          </Association>Di2015NewLine          <Association Name="Location_PersonToLocation">Di2015NewLine            <End Type="GraphModel.Location" Role="Location" Multiplicity="1" />Di2015NewLine            <End Type="GraphModel.PersonToLocation" Role="PersonToLocation" Multiplicity="*" />Di2015NewLine          </Association>Di2015NewLine        </Schema>Di2015NewLine      </edmx:ConceptualModels>Di2015NewLine      <!-- C-S mapping content -->Di2015NewLine      <edmx:Mappings>Di2015NewLine        <Mapping xmlns="urn:schemas-microsoft-com:windows:storage:mapping:CS" Space="C-S">Di2015NewLine          <Alias Key="Model" Value="GraphModel" />Di2015NewLine          <Alias Key="Target" Value="GraphModel.Store" />Di2015NewLine          <EntityContainerMapping CdmEntityContainer="GraphModelContainer" StorageEntityContainer="GraphModelStoreContainer">Di2015NewLine            <EntitySetMapping Name="LinkSet">Di2015NewLine              <EntityTypeMapping TypeName="IsTypeOf(GraphModel.Link)">Di2015NewLine                <MappingFragment StoreEntitySet="Link">Di2015NewLine                  <ScalarProperty Name="Description" ColumnName="Description" />Di2015NewLine                  <ScalarProperty Name="Name" ColumnName="Name" />Di2015NewLine                  <ScalarProperty Name="LinkId" ColumnName="LinkID" />Di2015NewLine                </MappingFragment>Di2015NewLine              </EntityTypeMapping>Di2015NewLine              <EntityTypeMapping TypeName="IsTypeOf(GraphModel.PersonToPerson)">Di2015NewLine                <MappingFragment StoreEntitySet="Link" >Di2015NewLine                  <ScalarProperty Name="LinkId" ColumnName="LinkID" />Di2015NewLine                  <Condition ColumnName="LinkTypeDiscriminator" Value="1" />Di2015NewLine                </MappingFragment>Di2015NewLine              </EntityTypeMapping>Di2015NewLine              <EntityTypeMapping TypeName="IsTypeOf(GraphModel.PersonToLocation)">Di2015NewLine                <MappingFragment StoreEntitySet="Link" >Di2015NewLine                  <ScalarProperty Name="LinkId" ColumnName="LinkID" />Di2015NewLine                  <Condition ColumnName="LinkTypeDiscriminator" Value="2" />Di2015NewLine                </MappingFragment>Di2015NewLine              </EntityTypeMapping>Di2015NewLine            </EntitySetMapping>Di2015NewLine            <EntitySetMapping Name="NodeSet">Di2015NewLine              <EntityTypeMapping TypeName="IsTypeOf(GraphModel.Node)">Di2015NewLine                <MappingFragment StoreEntitySet="Node">Di2015NewLine                  <ScalarProperty Name="Description" ColumnName="Description" />Di2015NewLine                  <ScalarProperty Name="Name" ColumnName="Name" />Di2015NewLine                  <ScalarProperty Name="NodeId" ColumnName="NodeID" />Di2015NewLine                </MappingFragment>Di2015NewLine              </EntityTypeMapping>Di2015NewLine              <EntityTypeMapping TypeName="IsTypeOf(GraphModel.Person)">Di2015NewLine                <MappingFragment StoreEntitySet="Node" >Di2015NewLine                  <ScalarProperty Name="NodeId" ColumnName="NodeID" />Di2015NewLine                  <Condition ColumnName="NodeTypeDiscriminator" Value="1" />Di2015NewLine                </MappingFragment>Di2015NewLine              </EntityTypeMapping>Di2015NewLine              <EntityTypeMapping TypeName="IsTypeOf(GraphModel.Location)">Di2015NewLine                <MappingFragment StoreEntitySet="Node" >Di2015NewLine                  <ScalarProperty Name="NodeId" ColumnName="NodeID" />Di2015NewLine                  <Condition ColumnName="NodeTypeDiscriminator" Value="2" />Di2015NewLine                </MappingFragment>Di2015NewLine              </EntityTypeMapping>Di2015NewLine            </EntitySetMapping>Di2015NewLine            <AssociationSetMapping Name="PersonPersonToPerson_Follower" TypeName="GraphModel.PersonPersonToPerson_Follower" StoreEntitySet="Link">Di2015NewLine              <EndProperty Name="Person">Di2015NewLine                <ScalarProperty Name="NodeId" ColumnName="FollowerID" />Di2015NewLine              </EndProperty>Di2015NewLine              <EndProperty Name="PersonToPerson">Di2015NewLine                <ScalarProperty Name="LinkId" ColumnName="LinkID" />Di2015NewLine              </EndProperty>Di2015NewLine            </AssociationSetMapping>Di2015NewLine            <AssociationSetMapping Name="PersonPersonToPerson_Leader" TypeName="GraphModel.PersonPersonToPerson_Leader" StoreEntitySet="Link">Di2015NewLine              <EndProperty Name="Person">Di2015NewLine                <ScalarProperty Name="NodeId" ColumnName="LeaderID" />Di2015NewLine              </EndProperty>Di2015NewLine              <EndProperty Name="PersonToPerson">Di2015NewLine                <ScalarProperty Name="LinkId" ColumnName="LinkID" />Di2015NewLine              </EndProperty>Di2015NewLine            </AssociationSetMapping>Di2015NewLine            <AssociationSetMapping Name="Person_PersonToLocation" TypeName="GraphModel.Person_PersonToLocation" StoreEntitySet="Link">Di2015NewLine              <EndProperty Name="Person">Di2015NewLine                <ScalarProperty Name="NodeId" ColumnName="PersonID" />Di2015NewLine              </EndProperty>Di2015NewLine              <EndProperty Name="PersonToLocation">Di2015NewLine                <ScalarProperty Name="LinkId" ColumnName="LinkID" />Di2015NewLine              </EndProperty>Di2015NewLine            </AssociationSetMapping>Di2015NewLine            <AssociationSetMapping Name="Location_PersonToLocation" TypeName="GraphModel.Location_PersonToLocation" StoreEntitySet="Link">Di2015NewLine              <EndProperty Name="Location">Di2015NewLine                <ScalarProperty Name="NodeId" ColumnName="LocationID" />Di2015NewLine              </EndProperty>Di2015NewLine              <EndProperty Name="PersonToLocation">Di2015NewLine                <ScalarProperty Name="LinkId" ColumnName="LinkID" />Di2015NewLine              </EndProperty>Di2015NewLine            </AssociationSetMapping>Di2015NewLine          </EntityContainerMapping>Di2015NewLine        </Mapping>Di2015NewLine      </edmx:Mappings>Di2015NewLine    </edmx:Runtime>Di2015NewLine    <!-- EF Designer content (DO NOT EDIT MANUALLY BELOW HERE) -->Di2015NewLine    <edmx:Designer xmlns="http://schemas.microsoft.com/ado/2007/06/edmx">Di2015NewLine      <edmx:Connection>Di2015NewLine        <DesignerInfoPropertySet>Di2015NewLine          <DesignerProperty Name="MetadataArtifactProcessing" Value="EmbedInOutputAssembly" />Di2015NewLine        </DesignerInfoPropertySet>Di2015NewLine      </edmx:Connection>Di2015NewLine      <edmx:Options>Di2015NewLine        <DesignerInfoPropertySet>Di2015NewLine          <DesignerProperty Name="ValidateOnBuild" Value="true" />Di2015NewLine        </DesignerInfoPropertySet>Di2015NewLine      </edmx:Options>Di2015NewLine      <!-- Diagram content (shape and connector positions) -->Di2015NewLine      <edmx:Diagrams>Di2015NewLine        <Diagram Name="GraphModel" ZoomLevel="114" >Di2015NewLine          <EntityTypeShape EntityType="GraphModel.Node" Width="1.5" PointX="5.875" PointY="1.375" Height="1.427958984375" />Di2015NewLine          <EntityTypeShape EntityType="GraphModel.Person" Width="1.5" PointX="5.875" PointY="3.25" Height="1.4279589843749996" />Di2015NewLine          <EntityTypeShape EntityType="GraphModel.Location" Width="1.5" PointX="7.75" PointY="4.625" Height="1.0992643229166665" />Di2015NewLine          <InheritanceConnector EntityType="GraphModel.Location">Di2015NewLine            <ConnectorPoint PointX="7.375" PointY="2.4176741536458342" />Di2015NewLine            <ConnectorPoint PointX="8.5" PointY="2.4176741536458342" />Di2015NewLine            <ConnectorPoint PointX="8.5" PointY="4.625" />Di2015NewLine          </InheritanceConnector>Di2015NewLine          <EntityTypeShape EntityType="GraphModel.Link" Width="1.5" PointX="2.875" PointY="1.375" Height="1.427958984375" />Di2015NewLine          <EntityTypeShape EntityType="GraphModel.PersonToPerson" Width="1.75" PointX="2.75" PointY="3.25" Height="1.2636116536458326" />Di2015NewLine          <InheritanceConnector EntityType="GraphModel.PersonToPerson" ManuallyRouted="false">Di2015NewLine            <ConnectorPoint PointX="3.625" PointY="2.802958984375" />Di2015NewLine            <ConnectorPoint PointX="3.625" PointY="3.25" />Di2015NewLine          </InheritanceConnector>Di2015NewLine          <InheritanceConnector EntityType="GraphModel.Person">Di2015NewLine            <ConnectorPoint PointX="6.625" PointY="3.4603483072916683" />Di2015NewLine            <ConnectorPoint PointX="6.625" PointY="3.25" />Di2015NewLine          </InheritanceConnector>Di2015NewLine          <EntityTypeShape EntityType="GraphModel.PersonToLocation" Width="1.875" PointX="0.75" PointY="4.625" Height="1.2636116536458326" />Di2015NewLine          <InheritanceConnector EntityType="GraphModel.PersonToLocation">Di2015NewLine            <ConnectorPoint PointX="2.875" PointY="2.4176741536458342" />Di2015NewLine            <ConnectorPoint PointX="1.65625" PointY="2.4176741536458342" />Di2015NewLine            <ConnectorPoint PointX="1.65625" PointY="4.625" />Di2015NewLine          </InheritanceConnector>Di2015NewLine          <AssociationConnector Association="GraphModel.PersonPersonToPerson_Leader">Di2015NewLine            <ConnectorPoint PointX="5.875" PointY="3.8818058268229163" />Di2015NewLine            <ConnectorPoint PointX="4.5" PointY="3.8818058268229163" />Di2015NewLine          </AssociationConnector>Di2015NewLine          <AssociationConnector Association="GraphModel.PersonPersonToPerson_Follower">Di2015NewLine            <ConnectorPoint PointX="5.875" PointY="3.5034029134114579" />Di2015NewLine            <ConnectorPoint PointX="4.5" PointY="3.5034029134114579" />Di2015NewLine          </AssociationConnector>Di2015NewLine          <AssociationConnector Association="GraphModel.Person_PersonToLocation">Di2015NewLine            <ConnectorPoint PointX="6.625" PointY="4.677958984375" />Di2015NewLine            <ConnectorPoint PointX="6.625" PointY="5.0078214863281243" />Di2015NewLine            <ConnectorPoint PointX="2.625" PointY="5.0078214863281243" />Di2015NewLine          </AssociationConnector>Di2015NewLine          <AssociationConnector Association="GraphModel.Location_PersonToLocation">Di2015NewLine            <ConnectorPoint PointX="7.75" PointY="5.40018798828125" />Di2015NewLine            <ConnectorPoint PointX="2.625" PointY="5.40018798828125" />Di2015NewLine          </AssociationConnector>Di2015NewLine        </Diagram>Di2015NewLine      </edmx:Diagrams>Di2015NewLine    </edmx:Designer>Di2015NewLine  </edmx:Edmx>Di2015NewLine
592039Di2015UniqueSeparatorT
592192Di2015UniqueSeparatorGetTimeSpan
592192Di2015UniqueSeparatorOleDbDataReader
592192Di2015UniqueSeparatorSqlDataReader
592192Di2015UniqueSeparatorExecuteReader
592192Di2015UniqueSeparatorIDataReader
592192Di2015UniqueSeparatorSqlDataReader
592192Di2015UniqueSeparatorGetTimeSpan
592192Di2015UniqueSeparatorIDataReader
592192Di2015UniqueSeparatorusing (IDataReader dr = db.ExecuteReader(command))Di2015NewLine{Di2015NewLine    /* ... your code ... */Di2015NewLine    if (dr is SqlDataReader)Di2015NewLine    {Di2015NewLine        TimeSpan myTimeSpan = ((SqlDataReader)dr).GetTimeSpan(columnIndex)Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        throw new Exception("The DataReader is not a SqlDataReader")Di2015NewLine    }Di2015NewLine    /* ... your code ... */Di2015NewLine}Di2015NewLine
592192Di2015UniqueSeparatorIDataReader
592192Di2015UniqueSeparatorSqlDataReader
592192Di2015UniqueSeparatorprovider
592247Di2015UniqueSeparatorpublic void WriteText() {Di2015NewLine  Console.WriteLine("Hello");Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineAction x = WriteText;Di2015NewLinex(); // will invoke the WriteText functionDi2015NewLine
592247Di2015UniqueSeparatordelegate x = WriteText
592247Di2015UniqueSeparatorSystem.Object
592247Di2015UniqueSeparatorAction
592247Di2015UniqueSeparatorAction
592247Di2015UniqueSeparatorpublic delegate void Action();Di2015NewLine
592247Di2015UniqueSeparatorAction
592247Di2015UniqueSeparatorWriteText
592247Di2015UniqueSeparatorAction x = () => { Console.WriteLine("Hello"); };Di2015NewLinex(); // invoke our anonymous function.Di2015NewLine
592247Di2015UniqueSeparatorConsole.WriteLine
592247Di2015UniqueSeparatorpublic void SaveData(Action<Table> saveFunc){Di2015NewLine    var t = new Table();Di2015NewLine    ... 20 lines of code which put stuff into t ...Di2015NewLine    saveFunc(t);Di2015NewLine}Di2015NewLineDi2015NewLineSaveData( t => StoredProc1.Invoke(t) ); // save using StoredProc1Di2015NewLineSaveData( t => StoredProc37.Invoke(t) ); // save using StoredProc37Di2015NewLine
592258Di2015UniqueSeparatorstartTime
592258Di2015UniqueSeparatorendTime
592258Di2015UniqueSeparatorstartTime
592258Di2015UniqueSeparatorendTime
592258Di2015UniqueSeparatorbool isTimeBetween = someTime >= startTime && someTime <= endTime;Di2015NewLine
592258Di2015UniqueSeparatorTimeOfDay
592258Di2015UniqueSeparatorstatic public bool IsTimeOfDayBetween(DateTime time, Di2015NewLine                                      TimeSpan startTime, TimeSpan endTime)Di2015NewLine{Di2015NewLine    if (endTime == startTime)Di2015NewLine    {Di2015NewLine        return true;   Di2015NewLine    }Di2015NewLine    else if (endTime < startTime)Di2015NewLine    {Di2015NewLine        return time.TimeOfDay <= endTime ||Di2015NewLine            time.TimeOfDay >= startTime;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return time.TimeOfDay >= startTime &&Di2015NewLine            time.TimeOfDay <= endTime;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
592258Di2015UniqueSeparatorstart == end
592258Di2015UniqueSeparatorIsTimeOfDayBetween(someTime, new TimeSpan(5, 0, 0), new TimeSpan(21, 30, 0))Di2015NewLine
592258Di2015UniqueSeparatorstartTime
592258Di2015UniqueSeparatorendTime
592258Di2015UniqueSeparatorDateTime
592258Di2015UniqueSeparatorIsTimeOfDayBetween(someTime, startTime.TimeOfDay, endTime.TimeOfDay)Di2015NewLine
592399Di2015UniqueSeparatorpublic void OnDeserialization(object sender)Di2015NewLine{Di2015NewLine        this.Dictionary.OnDeserialization(sender);Di2015NewLine}Di2015NewLine
592735Di2015UniqueSeparatorint
592735Di2015UniqueSeparatorint
592735Di2015UniqueSeparatorlong
592735Di2015UniqueSeparatorbyte
592735Di2015UniqueSeparatorint
592735Di2015UniqueSeparator[Flags]
592735Di2015UniqueSeparator[Flags]
592765Di2015UniqueSeparatorCalculateInt(int)Di2015NewLineCalculateFloat(float)Di2015NewLine
592841Di2015UniqueSeparatorusing System.Drawing;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineFont font = new Font(FontFamily.GenericMonospace, 8);Di2015NewLineImage reportImage = new Bitmap(270, 45);Di2015NewLineusing (Graphics graphics = Graphics.FromImage(reportImage))Di2015NewLine{Di2015NewLine    graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;Di2015NewLineDi2015NewLine    graphics.FillRectangle(Brushes.White, Di2015NewLine        new Rectangle(new Point(0, 0), reportImage.Size));Di2015NewLineDi2015NewLine    for (int i = 0; i != 6; i++)Di2015NewLine    {Di2015NewLine        Rectangle r = new Rectangle(20 + i * 40, 15, 25, 15);Di2015NewLine        graphics.FillEllipse(Di2015NewLine            i % 2 == 0 ? Brushes.DarkOrange : Brushes.DarkKhaki, r);Di2015NewLine        graphics.DrawEllipse(Pens.Black, r);Di2015NewLineDi2015NewLine        r.Offset(2, 0);Di2015NewLineDi2015NewLine        graphics.DrawString(i.ToString(), font, Brushes.Black, r);Di2015NewLine    }Di2015NewLine}Di2015NewLinereportImage.Save("C:\\\\test.bmp");Di2015NewLine
592970Di2015UniqueSeparatorprivate Ttgt MyMethod<Tsrc,Ttgt>(Tsrc sourceObject) Di2015NewLine    where Tsrc:struct where  Ttgt:struct    Di2015NewLine{    Di2015NewLine    Type targetType = typeof(Ttgt);Di2015NewLine    TypeConverter tc = TypeDescriptor.GetConverter(targetType);Di2015NewLine    Ttgt returnObject = (Ttgt)tc.ConvertTo(sourceObject, targetType);Di2015NewLine    return returnObject;    Di2015NewLine}Di2015NewLine
593070Di2015UniqueSeparatorpublic class TypeADi2015NewLine{ Di2015NewLine  public DateTime LastModified;Di2015NewLine  [XmlIgnore]Di2015NewLine  public bool LastModifiedSpecified;Di2015NewLine}Di2015NewLine
593070Di2015UniqueSeparator    var overrides = new XmlAttributeOverrides();Di2015NewLine    // ....fill the overrides here....Di2015NewLine    // create a new instance of the serializer specifying overridesDi2015NewLine    var s1 = new XmlSerializer(typeof(Foo), overrides);Di2015NewLine    // serialize as normal, here.Di2015NewLine
593178Di2015UniqueSeparatorExecuteReader
593178Di2015UniqueSeparatorSqlDataReader
593178Di2015UniqueSeparatorClose
593178Di2015UniqueSeparatorSqlConnection
593178Di2015UniqueSeparatorusing
593223Di2015UniqueSeparatorSystem.Core
593225Di2015UniqueSeparatorif (!(entity is IAuditable))Di2015NewLine    return false;Di2015NewLineDi2015NewLineDateTime now = DateTime.Now;Di2015NewLinestate[Array.IndexOf(propertyNames, "CreateDate")] = now;Di2015NewLinestate[Array.IndexOf(propertyNames, "ModifiedDate")] = now;Di2015NewLineDi2015NewLinereturn true;Di2015NewLine
593239Di2015UniqueSeparatorfrom c in contextDi2015NewLinewhere c.Attribute("category") == "category name"Di2015NewLineselect newDi2015NewLine{Di2015NewLine  Description = c.Attribute("desc"),Di2015NewLine  Category =  c.Attribute("category")Di2015NewLine}Di2015NewLine
593347Di2015UniqueSeparator<security>Di2015NewLine  <requestedPrivileges>Di2015NewLine    <requestedExecutionLevel level="asInvoker" />Di2015NewLine  </requestedPrivileges>Di2015NewLine</security>Di2015NewLine
593384Di2015UniqueSeparatordesc
593384Di2015UniqueSeparatorcategory
593384Di2015UniqueSeparatorvar contents = nodes.Where( n => n.Name == "NodeA")Di2015NewLine                    .Select( node => new { desc = node.Attribute("desc")Di2015NewLine                                                      .Value,Di2015NewLine                                          category = node.Attribute("category")Di2015NewLine                                                          .ValueDi2015NewLine                                         }Di2015NewLine                     );Di2015NewLineDi2015NewLinevar desc = contents.desc;Di2015NewLinevar category = contents.category;Di2015NewLine
593406Di2015UniqueSeparatorbyte[] binaryData = Convert.FromBase64String(bgImage64);Di2015NewLineDi2015NewLineBitmapImage bi = new BitmapImage;Di2015NewLinebi.BeginInit();Di2015NewLinebi.StreamSource = new MemoryStream(binaryData);Di2015NewLinebi.EndInit();Di2015NewLineDi2015NewLineImage img = new Image();Di2015NewLineimg.Source = bi;Di2015NewLine
593727Di2015UniqueSeparatorstruct MyPair<TKey, TValue> : IConvertableDi2015NewLine{Di2015NewLine\public readonly TKey Key;Di2015NewLine\public readonly TValue Value;Di2015NewLineDi2015NewLine\public MyPair(TKey key, TValue value)Di2015NewLine\{Di2015NewLine\\Key = key;Di2015NewLine\\Value = value;Di2015NewLine\}Di2015NewLineDi2015NewLine\// I just used the smart-tag on IConvertable to get all these...Di2015NewLine\// public X ToX(IFormatProvider provider) { throw new InvalidCastException(); }Di2015NewLineDi2015NewLine\...Di2015NewLineDi2015NewLine\public object ToType(Type conversionType, IFormatProvider provider)Di2015NewLine\{Di2015NewLine\\if (typeof(MyPair<TKey, TValue>).GUID == conversionType.GUID)Di2015NewLine\\\return this;Di2015NewLine\\throw new InvalidCastException();Di2015NewLine\}Di2015NewLine}Di2015NewLine
593727Di2015UniqueSeparatorvar data = new Dictionary<string, string> {Di2015NewLine\{ "Hello", "World" },Di2015NewLine\{ "How are", "You?" },Di2015NewLine\{ "Goodbye", "World!" }Di2015NewLine};Di2015NewLineforeach (var pair in data)Di2015NewLine{Di2015NewLine\var copy = pair; // define a different variable for each workerDi2015NewLine\Action worker = () => Console.WriteLine("Item {0}, {1}", copy.Key, copy.Value);Di2015NewLine\worker.BeginInvoke(null, null);Di2015NewLine}Di2015NewLine
593727Di2015UniqueSeparatorvar data = new Dictionary<string, string> {Di2015NewLine\{ "Hello", "World" },Di2015NewLine\{ "How are", "You?" },Di2015NewLine\{ "Goodbye", "World!" }Di2015NewLine};Di2015NewLineDi2015NewLinevar results = new List<KeyValuePair<string, string>>();Di2015NewLinevar pending = 0;Di2015NewLinevar done = new ManualResetEvent(false);Di2015NewLineDi2015NewLinevar workers = new List<Action>();Di2015NewLineforeach (var pair in data)Di2015NewLine{Di2015NewLine\++pending;Di2015NewLine\var copy = pair; // define a different variable for each workerDi2015NewLine\workers.Add(delegate()Di2015NewLine\{Di2015NewLine\\Console.WriteLine("Item {0}, {1}", copy.Key, copy.Value);Di2015NewLine\\lock (results)Di2015NewLine\\\results.Add(new KeyValuePair<string, string>("New " + copy.Key, "New " + copy.Value));Di2015NewLine\\if (0 == Interlocked.Decrement(ref pending))Di2015NewLine\\\done.Set();Di2015NewLine\});Di2015NewLine}Di2015NewLineDi2015NewLineforeach (var worker in workers)Di2015NewLine\worker.BeginInvoke(null, null);Di2015NewLineDi2015NewLinedone.WaitOne();Di2015NewLineDi2015NewLineforeach (var pair in results)Di2015NewLine\Console.WriteLine("Result {0}, {1}", pair.Key, pair.Value);Di2015NewLine
593799Di2015UniqueSeparatorint[]
593799Di2015UniqueSeparatoruint[]
593799Di2015UniqueSeparatorobject
593799Di2015UniqueSeparatoruint8
593799Di2015UniqueSeparatorbool := uint8
593799Di2015UniqueSeparatorint32[] := uint32[]
593799Di2015UniqueSeparatoris
593859Di2015UniqueSeparatorpublic class WcfClient<T> : ClientBase<T> where T : classDi2015NewLine{Di2015NewLine    public T Service { get { return base.Channel; } }Di2015NewLine}Di2015NewLine
593859Di2015UniqueSeparatorinterface IFoo {void Bar();}Di2015NewLine...Di2015NewLineusing(WcfClient<IFoo> client = new WcfClient<IFoo>()) {Di2015NewLine    client.Service.Bar();Di2015NewLine}Di2015NewLine
593989Di2015UniqueSeparator[Test]Di2015NewLinepublic void NamePropTest()Di2015NewLine{Di2015NewLine    Person p = new Person();Di2015NewLineDi2015NewLine    //Some code here that will set up the Person objectDi2015NewLine    //  so that you know what the name will beDi2015NewLineDi2015NewLine    Assert.AreEqual("some known value...", p.Name);Di2015NewLine}Di2015NewLine
593989Di2015UniqueSeparator[Test]Di2015NewLinepublic void NamePropTest()Di2015NewLine{Di2015NewLine    Person p = new Person();Di2015NewLineDi2015NewLine    p.Name = "Sean";Di2015NewLine    p.Surname = "Penn";Di2015NewLineDi2015NewLine    Assert.AreEqual("Sean Penn", p.FullName);Di2015NewLine}Di2015NewLine
594057Di2015UniqueSeparator  var updateCommand = new SqlCommand();Di2015NewLine  ...Di2015NewLine
594185Di2015UniqueSeparator(left != null) ? left : rightDi2015NewLine
594243Di2015UniqueSeparatorvar result = xmldoc.Element("Customers")Di2015NewLine                   .Elements("Customer")Di2015NewLine                   .Single(x => (int?)x.Attribute("ID") == 2);Di2015NewLine
594243Di2015UniqueSeparatorFirst
594243Di2015UniqueSeparatorFirstOrDefault
594243Di2015UniqueSeparatorSingleOrDefault
594243Di2015UniqueSeparatorWhere
594243Di2015UniqueSeparatorSingle
594274Di2015UniqueSeparatorpublic abstract class StateDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Holds the current state we're in.Di2015NewLine    /// </summary>Di2015NewLine    public State CurrentStateDi2015NewLine    { Di2015NewLine        get; Di2015NewLine        set; Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual string Cancelled(State context)Di2015NewLine    {Di2015NewLine        return "";Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual string RequestedByUser(State context)Di2015NewLine    {Di2015NewLine        return "";Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual string RequestedByManager(State context)Di2015NewLine    {Di2015NewLine        return "";Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CancelledState : StateDi2015NewLine{Di2015NewLine    public override string Cancelled(State context)Di2015NewLine    {Di2015NewLine        context.CurrentState = new SittingState();Di2015NewLine        return "Cancelled.";Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string RequestedByUser(State context)Di2015NewLine    {Di2015NewLine        context.CurrentState = new RequestedByUserState();Di2015NewLine        return "Requested by User.";Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string RequestedByManager(State context)Di2015NewLine    {Di2015NewLine        return "You can't do this before it's been requested by the User";Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// (RequestedByUserState and RequestedByManagerState classes have been cut out)Di2015NewLine
594276Di2015UniqueSeparatorEventGetSum()
594276Di2015UniqueSeparatornew EventHandler(EventGetSum)
594276Di2015UniqueSeparatorControl.Invoke
594528Di2015UniqueSeparatorSortedList.Keys
594528Di2015UniqueSeparatorprivate static int BinarySearch<T>(IList<T> list, T value)Di2015NewLine{Di2015NewLine    if (list == null)Di2015NewLine        throw new ArgumentNullException("list");Di2015NewLine    var comp = Comparer<T>.Default;Di2015NewLine    int lo = 0, hi = list.Length - 1;Di2015NewLine    while (lo < hi) {Di2015NewLine            int m = (hi + lo) / 2;  // this might overflow; be careful.Di2015NewLine            if (comp(list[m], value) < 0) lo = m + 1;Di2015NewLine            else hi = m - 1;Di2015NewLine    }Di2015NewLine    if (comp(list[lo], value) < 0) lo++;Di2015NewLine    return lo;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static int FindFirstIndexGreaterThanOrEqualTo<T,U>Di2015NewLine                          (this SortedList<T,U> sortedList, T key)Di2015NewLine{Di2015NewLine    return BinarySearch(sortedList.Keys, key);Di2015NewLine}Di2015NewLine
594626Di2015UniqueSeparatorpublic interface IVoucherDi2015NewLine{Di2015NewLine    decimal CostOf(CartItem cartItem);Di2015NewLine}Di2015NewLine
594626Di2015UniqueSeparatorpublic class FullPriceVoucher : IVoucherDi2015NewLine{Di2015NewLine    public decimal CostOf(CartItem cartItem)Di2015NewLine    {Di2015NewLine        return cartItem.Cost;   Di2015NewLine    }Di2015NewLine}Di2015NewLine
594626Di2015UniqueSeparatorpublic class TenPercentOffVoucher : IVoucherDi2015NewLine{Di2015NewLine    public decimal CostOf(CartItem cartItem)Di2015NewLine    {Di2015NewLine        return cartItem.Cost * 0.9m;   Di2015NewLine    }Di2015NewLine}Di2015NewLine
594626Di2015UniqueSeparatorpublic class CartValueVisitorDi2015NewLine{Di2015NewLine    private IVoucher voucher;Di2015NewLineDi2015NewLine    public CartValueVisitor(IVoucher voucher)Di2015NewLine    {Di2015NewLine        this.voucher = voucher;Di2015NewLine    }Di2015NewLineDi2015NewLine    public decimal CostOf(Cart cart)Di2015NewLine    {Di2015NewLine        return cart.Items.Sum(item => voucher.CostOf(item));Di2015NewLine    }Di2015NewLine}Di2015NewLine
594626Di2015UniqueSeparatorvar cart = GetACart();Di2015NewLineDi2015NewLinevar fullPriceCartValueVisitor = Di2015NewLine        new CartValueVisitor(new FullPriceVoucher());Di2015NewLinevar tenPercentOffCartValueVisitor = Di2015NewLine        new CartValueVisitor(new TenPercentOffVoucher());Di2015NewLineDi2015NewLinevar fullPrice = fullPriceCartValueVisitor.CostOf(cart);Di2015NewLinevar tenPercentOffPrice = tenPercentOffCartValueVisitor.CostOf(cart);Di2015NewLine
594627Di2015UniqueSeparatorpublic BuilderInclusionsForm(Product p) : this()Di2015NewLine{Di2015NewLine    IEnumerable<Product> ps = db2.GetTable(p.GetType()).Cast<Product>();Di2015NewLine    product = ps.SingleOrDefault(a => a.ProductID == p.ProductID);Di2015NewLine}Di2015NewLine
594643Di2015UniqueSeparatorForker p = new Forker();Di2015NewLinep.Fork(delegate { DoSomeWork(); });Di2015NewLinep.Fork(delegate { DoSomeOtherWork(); });Di2015NewLinep.Join();Di2015NewLine
594684Di2015UniqueSeparatorpublic static void PointyMethod(char[] array)Di2015NewLine{Di2015NewLine    unsafeDi2015NewLine    {Di2015NewLine        fixed (char *p = array)Di2015NewLine        {Di2015NewLine            for (int i=0; i<array.Length; i++)Di2015NewLine            {Di2015NewLine                System.Console.Write(*(p+i));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
594725Di2015UniqueSeparatorint i = Convert.ToInt32("01101101", 2);Di2015NewLine
594825Di2015UniqueSeparatorvar qry = from row in ctx.SomeProc(12345)Di2015NewLine          select new Foo {ID = row.ID, Name = row.Name };Di2015NewLine
594825Di2015UniqueSeparatorvar qry = (from row in ctx.SomeFunction(12345)Di2015NewLine          where row.IsActiveDi2015NewLine          select row).Skip(10).Take(10);Di2015NewLine
594825Di2015UniqueSeparatorAsEnumerable()
594825Di2015UniqueSeparatorvar qry = (from row in ctx.SomeProc(12345).AsEnumerable()Di2015NewLine          where row.IsActiveDi2015NewLine          select row).Skip(10).Take(10);Di2015NewLine
594825Di2015UniqueSeparatorElementType/@Name
594825Di2015UniqueSeparator<Function Name="dbo.CustOrderHist" Method="CustOrderHist">Di2015NewLine  <Parameter Name="CustomerID" Parameter="customerID" Type="System.String" DbType="NChar(5)" />Di2015NewLine  <ElementType Name="FooBar"> <!-- ********** HERE ************ -->Di2015NewLine      <Column Name="ProductName" Type="System.String" DbType="NVarChar(40) NOT NULL" CanBeNull="false" />Di2015NewLine      <Column Name="Total" Type="System.Int32" DbType="Int" CanBeNull="true" />Di2015NewLine  </ElementType>Di2015NewLine</Function>Di2015NewLine
595024Di2015UniqueSeparatorreturn this.Description.Substring(0, Math.Min(this.Description.Length, 25));Di2015NewLine
595024Di2015UniqueSeparator...
595035Di2015UniqueSeparatorNetNamedPipeBinding binding = new NetNamedPipeBinding();Di2015NewLinebinding.ReceiveTimeout = new TimeSpan(1,0,0);Di2015NewLinebinding.SendTimeout = new TimeSpan(1,0,0);Di2015NewLineDuplexChannelFactory<IVdnServer> pipeFactory = new Di2015NewLine    DuplexChannelFactory<IVdnServer>(_subscriber, binding, Di2015NewLine        new EndpointAddress("net.pipe://localhost/PipeService"));Di2015NewLine
595035Di2015UniqueSeparatorNetNamedPipeBinding binding = new NetNamedPipeBinding();Di2015NewLinebinding.ReceiveTimeout = new TimeSpan(1,0,0);Di2015NewLinebinding.SendTimeout = new TimeSpan(1,0,0);Di2015NewLineDi2015NewLine_host.AddServiceEndpoint(typeof(IVdnServer),binding , "PipeReverse");Di2015NewLine
595142Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public void y()Di2015NewLine    {Di2015NewLine        MessageBox.Show(checkBox1.Checked.ToString());Di2015NewLine    }Di2015NewLineDi2015NewLine    static void x(Form f)Di2015NewLine    {Di2015NewLine        f.y();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        x(this);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
595191Di2015UniqueSeparator  using(SqlConnection connection = new SqlConnection("context connection=true")) Di2015NewLine  {Di2015NewLine      // ..Di2015NewLine  }Di2015NewLine
595200Di2015UniqueSeparatorTreeView
595200Di2015UniqueSeparatorTreeViewItem
595200Di2015UniqueSeparatorTreeView
595200Di2015UniqueSeparatorItemContainerGenerator
595200Di2015UniqueSeparatorIsSelected
595200Di2015UniqueSeparatorTreeViewItem
595200Di2015UniqueSeparator<TreeView>Di2015NewLine    <TreeView.ItemContainerStyle>Di2015NewLine        <Style TargetType="TreeViewItem">Di2015NewLine            <Setter Property="IsSelected" Value="{Binding MyIsSelectedProperty}"/>Di2015NewLine        </Style>Di2015NewLine    </TreeView.ItemContainerStyle>Di2015NewLine</TreeView>Di2015NewLine
595245Di2015UniqueSeparatorpublic static ConvertFile<T>() where T : IFileConvertDi2015NewLine{Di2015NewLine     Type type = typeof(T); // if you need itDi2015NewLine}Di2015NewLine
595245Di2015UniqueSeparatorConvertFile<SomeFileType>();Di2015NewLine
595258Di2015UniqueSeparatorGetChangeSet()
595258Di2015UniqueSeparatorSubmitChanges()
595258Di2015UniqueSeparatorpartial class LawEnforcementDataContextDi2015NewLine{Di2015NewLine    public override void SubmitChanges(Di2015NewLine        System.Data.Linq.ConflictMode failureMode)Di2015NewLine    {Di2015NewLine        ChangeSet delta = GetChangeSet();Di2015NewLine        foreach (var reservation in delta.Deletes.OfType<Reservation>())Di2015NewLine        {Di2015NewLine            // etcDi2015NewLine        }Di2015NewLine        base.SubmitChanges(failureMode);Di2015NewLine    }Di2015NewLine}Di2015NewLine
595318Di2015UniqueSeparator    using System; Di2015NewLine    using System.Web;Di2015NewLine    using System.Net; Di2015NewLine    using System.IO;Di2015NewLine    using System.Web.UI;Di2015NewLine    using System.Web.UI.WebControls; Di2015NewLineDi2015NewLinenamespace FooDi2015NewLine{Di2015NewLine    public partial class _Default : System.Web.UI.PageDi2015NewLine    {Di2015NewLine        protected void Page_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLineDi2015NewLine            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create("http://sso.bhmobile.ba/sso/login"); Di2015NewLine            req.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.0.3705;)"; Di2015NewLine            req.Method = "POST";Di2015NewLine            req.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";Di2015NewLine            req.Headers.Add("Accept-Language: en-us,en;q=0.5");Di2015NewLine            req.Headers.Add("Accept-Encoding: gzip,deflate");Di2015NewLine            req.Headers.Add("Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7");Di2015NewLine            req.KeepAlive = true;Di2015NewLine            req.Headers.Add("Keep-Alive: 300");Di2015NewLine            req.Referer ="http://sso.bhmobile.ba/sso/login";Di2015NewLineDi2015NewLine            req.ContentType = "application/x-www-form-urlencoded"; Di2015NewLineDi2015NewLine            String Username = "username";Di2015NewLine            String PassWord = "Password";Di2015NewLineDi2015NewLine            StreamWriter sw = new StreamWriter(req.GetRequestStream());Di2015NewLine            sw.Write("application=portal&url=http%3A%2F%2Fwww.bhmobile.ba%2Fportal%2Fredirect%3Bjsessionid%3D1C568AAA1FB8B5C757CF5F68BE6ECE65%3Ftype%3Dssologin%26url%3D%2Fportal%2Fshow%3Bjsessionid%3D1C568AAA1FB8B5C757CF5F68BE6ECE65%3Fidc%3D1023278&realm=sso&userid=" + Username + "&password=" + password + "&x=16&y=11");Di2015NewLine            sw.Close();Di2015NewLineDi2015NewLine            HttpWebResponse response = (HttpWebResponse)req.GetResponse();Di2015NewLineDi2015NewLineDi2015NewLine            StreamReader reader = new StreamReader(response.GetResponseStream());Di2015NewLine            string tmp = reader.ReadToEnd();Di2015NewLineDi2015NewLine            foreach (Cookie cook in response.Cookies)Di2015NewLine            {Di2015NewLine                tmp += "\\n" + cook.Name + ": " + cook.Value;Di2015NewLine            }Di2015NewLineDi2015NewLineDi2015NewLine            Response.Write(tmp);Di2015NewLine            Response.End();Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
595415Di2015UniqueSeparatorMyPageNumber += (MyPageNumber - 1);Di2015NewLine
595415Di2015UniqueSeparatorshort x = 5;Di2015NewLineshort y = 10;Di2015NewLineshort z = x - y;Di2015NewLine
595415Di2015UniqueSeparatorx
595415Di2015UniqueSeparatory
595415Di2015UniqueSeparatorint
595415Di2015UniqueSeparatorint
595415Di2015UniqueSeparatorz
595415Di2015UniqueSeparatorshort z = (short) (x - y);Di2015NewLine
595488Di2015UniqueSeparatorpublic Person FindById(int id)Di2015NewLine{Di2015NewLine    return this.Find(delegate(Person p)Di2015NewLine    {Di2015NewLine        return (p.Id == id);Di2015NewLine    });Di2015NewLine}Di2015NewLine
595518Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">Di2015NewLine    <CodeSnippet Format="1.0.0">Di2015NewLine    \<Header>Di2015NewLine    \\<Title>prop</Title>Di2015NewLine                    <!-- the shortcut below will show in your intellisense Di2015NewLine                         window - set it to whatever you wish -->Di2015NewLine    \\<Shortcut>_prop</Shortcut>Di2015NewLine    \\<Description>Code snippet for a property</Description>Di2015NewLine    \\<Author>Andrew</Author>Di2015NewLine    \\<SnippetTypes>Di2015NewLine    \\\<SnippetType>Expansion</SnippetType>Di2015NewLine    \\</SnippetTypes>Di2015NewLine    \</Header>Di2015NewLine    \<Snippet>Di2015NewLine    \\<Declarations>Di2015NewLine    \\\<Literal>Di2015NewLine    \\\\<ID>type</ID>Di2015NewLine    \\\\<Default>String</Default>Di2015NewLine    \\\\<ToolTip>property type</ToolTip>Di2015NewLine    \\\</Literal>Di2015NewLine    \\\<Literal>Di2015NewLine    \\\\<ID>pname</ID>Di2015NewLine    \\\\<Default>_name</Default>Di2015NewLine    \\\\<ToolTip>private field name</ToolTip>Di2015NewLine    \\\</Literal>Di2015NewLine    \\\<Literal>Di2015NewLine    \\\\<ID>name</ID>Di2015NewLine    \\\\<Default>Name</Default>Di2015NewLine    \\\\<ToolTip>property name</ToolTip>Di2015NewLine    \\\</Literal>Di2015NewLine    \\</Declarations>Di2015NewLine    \\<Code Language="csharp">Di2015NewLine    \\\\<![CDATA[$type$ $pname$;Di2015NewLineDi2015NewLine    \\public $type$ $name$Di2015NewLine    \\{Di2015NewLine    \\\get { return this.$pname$; }Di2015NewLine    \\\set { this.$pname$ = value; }Di2015NewLine    \\}$end$]]>Di2015NewLine    \\</Code>Di2015NewLine    \</Snippet>Di2015NewLine    </CodeSnippet>Di2015NewLine</CodeSnippets>Di2015NewLine
595518Di2015UniqueSeparatorwhatever.snippet
595518Di2015UniqueSeparator"C:\\Documents and Settings\\<YOU>\\My Documents\\Visual Studio 2005\\Code Snippets\\Visual C#\\My Code Snippets"
595670Di2015UniqueSeparatorrun.exe
595670Di2015UniqueSeparatorC:\\cygwin\\bin\\run.exe -p /starting/dir exe_to_runDi2015NewLine
595747Di2015UniqueSeparatorList<T>
595747Di2015UniqueSeparatorIS-A
595747Di2015UniqueSeparatorIEnumerable<T>
595747Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine    \foo(new List<int>());Di2015NewLine    }Di2015NewLineDi2015NewLine    static void foo(IEnumerable<int> list) { }Di2015NewLine}Di2015NewLine
595747Di2015UniqueSeparatorMain
595747Di2015UniqueSeparator.method private hidebysig static void Main() cil managedDi2015NewLine{Di2015NewLine    .entrypointDi2015NewLine    .maxstack 8Di2015NewLine    L_0000: nop Di2015NewLine    L_0001: newobj instance void [mscorlib]System.Collections.Generic.List`1<int32>::.ctor()Di2015NewLine    L_0006: call void Program::foo(class [mscorlib]System.Collections.Generic.IEnumerable`1<int32>)Di2015NewLine    L_000b: nop Di2015NewLine    L_000c: ret Di2015NewLine}Di2015NewLine
595747Di2015UniqueSeparatorList<T>
595747Di2015UniqueSeparatorfoo
595786Di2015UniqueSeparatorpublic class PersonMapperDi2015NewLine    {Di2015NewLine        private string[] attributes = new[] { "firstName", "lastName" };Di2015NewLine        public virtual string[] GetAttributes()Di2015NewLine        {Di2015NewLine            return attributes;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine public class EmployeeMapper : PersonMapperDi2015NewLine    {Di2015NewLine        private string[] attributes = new[] { "employeeId" };Di2015NewLine        public override string[] GetAttributes()Di2015NewLine        {Di2015NewLine            return base.GetAttributes().Union(this.attributes).ToArray();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
595826Di2015UniqueSeparatorSqlConnection nwindConn = new SqlConnection("Data Source=localhost;Integrated Security=SSPI;Initial Catalog=northwind");Di2015NewLineDi2015NewLineSqlCommand selectCMD = new SqlCommand("SELECT CustomerID, CompanyName FROM Customers", nwindConn);Di2015NewLineselectCMD.CommandTimeout = 30;Di2015NewLineDi2015NewLineSqlDataAdapter custDA = new SqlDataAdapter();Di2015NewLinecustDA.SelectCommand = selectCMD;Di2015NewLineDi2015NewLineDataSet custDS = new DataSet();Di2015NewLinecustDA.Fill(custDS, "Customers");Di2015NewLine
595854Di2015UniqueSeparatorpublic ActionResult Edit( int id )Di2015NewLine{Di2015NewLine      Person person = peopleService.GetPerson(id);Di2015NewLine      UpdateModel(person,new string[] { list of properties to update } );Di2015NewLine      peopleService.SavePerson(person);Di2015NewLineDi2015NewLine      ...Di2015NewLine}Di2015NewLine
595874Di2015UniqueSeparatorRichTextBox
595874Di2015UniqueSeparator.Text
595874Di2015UniqueSeparatorstatic public string ConvertToText(string rtf)Di2015NewLine{Di2015NewLine   using(RichTextBox rtb = new RichTextBox())Di2015NewLine   {Di2015NewLine       rtb.Rtf = rtf;Di2015NewLine       return rtb.Text;Di2015NewLine   }Di2015NewLine}Di2015NewLine
596012Di2015UniqueSeparatorNullable<T>
596078Di2015UniqueSeparatorstatic
596095Di2015UniqueSeparatorpublic static implicit operator bool(Savepoint sp)Di2015NewLine{Di2015NewLine    return sp != null;Di2015NewLine}Di2015NewLine
596095Di2015UniqueSeparatorSavepoint sp1 = new Savepoint();Di2015NewLinesp1.iOffset = 4;Di2015NewLineSavepoint sp2 = new Savepoint();Di2015NewLineSavepoint sp3 = null;Di2015NewLineDi2015NewLineConsole.WriteLine("sp1: " + (sp1 ? "true" : "false")); // prints trueDi2015NewLineConsole.WriteLine("sp2: " + (sp2 ? "true" : "false")); // prints trueDi2015NewLineConsole.WriteLine("sp3: " + (sp3 ? "true" : "false")); // prints falseDi2015NewLine
596378Di2015UniqueSeparatorpublic DomainObject(delegate getApplicationsByBatchID)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
596392Di2015UniqueSeparatorpublic class MyCollection<T> : ICollection<T>Di2015NewLinewhere T : ResultInfoDi2015NewLine{Di2015NewLineDi2015NewLine     ... the required methods ... just use "T" instead of "ResultInfo" ...Di2015NewLineDi2015NewLine    public void Add(T item) {}Di2015NewLine}Di2015NewLine
596392Di2015UniqueSeparator MyCollection<FooResultInfo> coll = new MyCollection<FooResultInfo>();Di2015NewLine
596396Di2015UniqueSeparatorFoo()
596396Di2015UniqueSeparatorFoo()
596396Di2015UniqueSeparatorAuthenticate()
596396Di2015UniqueSeparatorPoint
596396Di2015UniqueSeparatorDistance
596471Di2015UniqueSeparatorSELECT Column1Name + ' - ' + Column2Name AS Column3Name FROM Table1 WHERE
596576Di2015UniqueSeparatorselect DataAccessUtil.GetInt32(row, "ParentNodeID"));Di2015NewLine
596576Di2015UniqueSeparatorforeach (var nodeInfo in orderByLevelDesc(ds))Di2015NewLine{Di2015NewLine    if (fromNodeIds.Contains(nodeInfo))Di2015NewLine        return nodeInfo;Di2015NewLine}Di2015NewLine
596622Di2015UniqueSeparatorSerialize
596622Di2015UniqueSeparatorIList<Person> people = ...;Di2015NewLinevar serializer = new JavaScriptSerializer();Di2015NewLineserializer.Serialize(people.ToArray());Di2015NewLine
596622Di2015UniqueSeparatorpublic class ExampleConverter : JavaScriptConverterDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Gets a collection of the supported typesDi2015NewLine    /// </summary>Di2015NewLine    /// <value>An object that implements <see cref="IEnumerable{T}"/> that represents the types supported by the converter. </value>Di2015NewLine    public override IEnumerable<Type> SupportedTypesDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return new ReadOnlyCollection<Type>(new Type[] { typeof(MyExampleType) });Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Converts the provided dictionary into an object of the specified type. Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="dictionary">An <see cref="IDictionary{TKey,TValue}"/> instance of property data stored as name/value pairs. </param>Di2015NewLine    /// <param name="type">The type of the resulting object.</param>Di2015NewLine    /// <param name="serializer">The <see cref="JavaScriptSerializer"/> instance. </param>Di2015NewLine    /// <returns>The deserialized object. </returns>Di2015NewLine    /// <exception cref="InvalidOperationException">We only serialize</exception>Di2015NewLine    public override object Deserialize(IDictionary<string, object> dictionary, Type type, JavaScriptSerializer serializer)Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException("We only serialize");Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Builds a dictionary of name/value pairsDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="obj">The object to serialize. </param>Di2015NewLine    /// <param name="serializer">The object that is responsible for the serialization. </param>Di2015NewLine    /// <returns>An object that contains key/value pairs that represent the object’s data. </returns>Di2015NewLine    /// <exception cref="InvalidOperationException"><paramref name="obj"/> must be of the <see cref="MyExampleType"/> type</exception>Di2015NewLine    public override IDictionary<string, object> Serialize(object obj, JavaScriptSerializer serializer)Di2015NewLine    {Di2015NewLine        MyExampleType example = obj as MyExampleType;Di2015NewLine        if (example == null)Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException("object must be of the MyExampleType type");Di2015NewLine        }Di2015NewLineDi2015NewLine        IDictionary<string, object> jsonExample = new Dictionary<string, object>();Di2015NewLine        jsonExample.Add("arrayMember", example.People.ToArray());Di2015NewLine        jsonExample.Add("otherMember", example.Member);Di2015NewLineDi2015NewLine        return jsonExample;Di2015NewLine    }Di2015NewLine}Di2015NewLine
596622Di2015UniqueSeparatorJavaScriptSerializer serializer = new JavaScriptSerializer();Di2015NewLineserializer.RegisterConverters(new JavaScriptConverter[] { new ExampleConverter() });Di2015NewLinereturn serializer.Serialize(myExample);Di2015NewLine
596695Di2015UniqueSeparatordelegate
596695Di2015UniqueSeparatorIAsyncResult BeginMyFunction(AsyncCallback callback)Di2015NewLine{Di2015NewLine    return BeginMyFunction(callback, null);Di2015NewLine}Di2015NewLineDi2015NewLineIAsyncResult BeginMyFunction(AsyncCallback callback, object context)Di2015NewLine{Di2015NewLine    // Func<int> is just a delegate that matches the method signature,Di2015NewLine    // It could be any matching delegate and not necessarily be *generic*Di2015NewLine    // This generic solution does not rely on generics ;)Di2015NewLine    return new Func<int>(MyFunction).BeginInvoke(callback, context);Di2015NewLine}Di2015NewLineDi2015NewLineint EndMyFunction(IAsyncResult result)Di2015NewLine{Di2015NewLine    return new Func<int>(MyFunction).EndInvoke(result);Di2015NewLine}Di2015NewLine
596702Di2015UniqueSeparatoras
596775Di2015UniqueSeparatorusing System.Windows.Forms;Di2015NewLine...Di2015NewLineCursor.Current = Cursors.WaitCursor;Di2015NewLine
597045Di2015UniqueSeparatorThread
597055Di2015UniqueSeparator_elementHost.Width++;Di2015NewLine
597088Di2015UniqueSeparatorDim srcBmp As New Bitmap(pnl.Width, pnl.Height)Di2015NewLineDim clip As New Rectangle(New Point(0, 0), pnl.Size)Di2015NewLinepnl.DrawToBitmap(srcBmp, clip)Di2015NewLine
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorStringBuilder
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorStringuilder
597231Di2015UniqueSeparatorsecond
597231Di2015UniqueSeparatorStringBuilder
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorsecond
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorsecond
597231Di2015UniqueSeparatorint x = 1;Di2015NewLineint y = x;Di2015NewLinex = 2;Di2015NewLine
597231Di2015UniqueSeparatory
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorsecond
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorsecond
597231Di2015UniqueSeparatorfirst
597231Di2015UniqueSeparatorsecond
597231Di2015UniqueSeparatorfirst.html
597231Di2015UniqueSeparator<a href="http://stackoverflow.com">Stack Overflow</a>Di2015NewLine
597231Di2015UniqueSeparatorcopy first.html second.html
597231Di2015UniqueSeparatorfirst.html
597231Di2015UniqueSeparatorsecond.html
597231Di2015UniqueSeparatorfirst.html
597231Di2015UniqueSeparator<a href="http://www.thedailywtf.com>The Daily WTF</a>Di2015NewLine
597231Di2015UniqueSeparatorfirst.html
597231Di2015UniqueSeparatorsecond.html
597231Di2015UniqueSeparator<a href="http://stackoverflow.com>Stack Overflow</a>Di2015NewLine
597415Di2015UniqueSeparatorusing System; Di2015NewLineusing System.Windows.Forms; Di2015NewLineDi2015NewLinepublic class VerticalProgressBar : ProgressBar { Di2015NewLine  protected override CreateParams CreateParams { Di2015NewLine    get { Di2015NewLine      CreateParams cp = base.CreateParams; Di2015NewLine      cp.Style |= 0x04; Di2015NewLine      return cp; Di2015NewLine    } Di2015NewLine  } Di2015NewLine}Di2015NewLine
597415Di2015UniqueSeparatorPBS_VERTICAL
597415Di2015UniqueSeparatorStyle
597544Di2015UniqueSeparatorstring itemText = ListBox1.Items[0].Text;Di2015NewLine
597544Di2015UniqueSeparatorDataRowView drv = (DataRowView)ListBox1.Items[0];Di2015NewLinestring itemText = drv.Row["MyColumn"].ToString();Di2015NewLine
597660Di2015UniqueSeparatorThreadAbortException
597729Di2015UniqueSeparatorstatic void SetElementAt(int[][] array, int i, int j, int value)Di2015NewLine{Di2015NewLine    array[i][j] = value;Di2015NewLine}Di2015NewLineDi2015NewLinestatic void SetElementAt(int[,] array, int i, int j, int value)Di2015NewLine{Di2015NewLine    array[i, j] = value;Di2015NewLine}Di2015NewLine
597729Di2015UniqueSeparator.method private hidebysig static void  SetElementAt(int32[][] 'array',Di2015NewLine                                                    int32 i,Di2015NewLine                                                    int32 j,Di2015NewLine                                                    int32 'value') cil managedDi2015NewLine{Di2015NewLine  // Code size       7 (0x7)Di2015NewLine  .maxstack  8Di2015NewLine  IL_0000:  ldarg.0Di2015NewLine  IL_0001:  ldarg.1Di2015NewLine  IL_0002:  ldelem.refDi2015NewLine  IL_0003:  ldarg.2Di2015NewLine  IL_0004:  ldarg.3Di2015NewLine  IL_0005:  stelem.i4Di2015NewLine  IL_0006:  retDi2015NewLine} // end of method Program::SetElementAtDi2015NewLineDi2015NewLine.method private hidebysig static void  SetElementAt(int32[0...,0...] 'array',Di2015NewLine                                                    int32 i,Di2015NewLine                                                    int32 j,Di2015NewLine                                                    int32 'value') cil managedDi2015NewLine{Di2015NewLine  // Code size       10 (0xa)Di2015NewLine  .maxstack  8Di2015NewLine  IL_0000:  ldarg.0Di2015NewLine  IL_0001:  ldarg.1Di2015NewLine  IL_0002:  ldarg.2Di2015NewLine  IL_0003:  ldarg.3Di2015NewLine  IL_0004:  call       instance void int32[0...,0...]::Set(int32,Di2015NewLine                                                           int32,Di2015NewLine                                                           int32)Di2015NewLine  IL_0009:  retDi2015NewLine} // end of method Program::SetElementAtDi2015NewLine
597799Di2015UniqueSeparatorSystem.ComponentModel
597799Di2015UniqueSeparatorIEditableObject
597799Di2015UniqueSeparatorINotifyPropertyChanging
597799Di2015UniqueSeparatorINotifyPropertyChanged
597799Di2015UniqueSeparatorOnTextChanged
597799Di2015UniqueSeparatorApply
597987Di2015UniqueSeparatorFOR XMLDi2015NewLine
597987Di2015UniqueSeparatorRAWDi2015NewLine
597987Di2015UniqueSeparatorAUTODi2015NewLine
597987Di2015UniqueSeparatorEXPLICITDi2015NewLine
597987Di2015UniqueSeparatorXMLDATADi2015NewLine
597987Di2015UniqueSeparatorELEMENTSDi2015NewLine
597987Di2015UniqueSeparatorXMLSCHEMADi2015NewLine
597987Di2015UniqueSeparatorXSINILDi2015NewLine
598063Di2015UniqueSeparatorMethodInfo
598063Di2015UniqueSeparatorDelegate.CreateDelegate
598063Di2015UniqueSeparatorDynamicMethod
598063Di2015UniqueSeparatorDynamicMethod
598063Di2015UniqueSeparatorDynamicMethod
598063Di2015UniqueSeparatorDynamicMethod
598078Di2015UniqueSeparatorSystem.Net.WebClient
598078Di2015UniqueSeparatorSystem.Console.WriteLine(new System.Net.WebClient().DownloadString(url));Di2015NewLine
598457Di2015UniqueSeparatorcomboBox.DropDownStyle = ComboBoxStyle.DropDownList;Di2015NewLine
598738Di2015UniqueSeparatorint
598738Di2015UniqueSeparatorSystem.Int32
598738Di2015UniqueSeparatorMyGenericType<int>
598738Di2015UniqueSeparatorMyGenericType<Int32>
598738Di2015UniqueSeparatorstruct FirstDi2015NewLine{Di2015NewLine    int x;Di2015NewLine    object y;Di2015NewLine}Di2015NewLineDi2015NewLinestruct SecondDi2015NewLine{Di2015NewLine    object a;Di2015NewLine    int b;Di2015NewLine}Di2015NewLine
598738Di2015UniqueSeparatorFirst
598738Di2015UniqueSeparatorSecond
598738Di2015UniqueSeparatory
598738Di2015UniqueSeparatora
598738Di2015UniqueSeparatorx
598738Di2015UniqueSeparatorb
598738Di2015UniqueSeparatorList<First>
598738Di2015UniqueSeparatorList<Second>
598971Di2015UniqueSeparatorSavepoint point = new Savepoint();Di2015NewLineif(point) // becomes a bool using your operatorDi2015NewLine{Di2015NewLine}Di2015NewLine
598971Di2015UniqueSeparatorSavepoint point = new Savepoint();Di2015NewLineif((bool)point) // an "explicit" conversionDi2015NewLine{Di2015NewLine}Di2015NewLine
598971Di2015UniqueSeparatorfloat f = 6.5;Di2015NewLinedouble d = f; // implicit conversionDi2015NewLine
598971Di2015UniqueSeparatorlong l = 20;Di2015NewLine// short s = l;Di2015NewLineshort s = (short)l;  // explicit conversionDi2015NewLine
599144Di2015UniqueSeparatorpartial
599144Di2015UniqueSeparator// This file is Product.CodeAboutThingA.csDi2015NewLineDi2015NewLinepublic partial class ProductDi2015NewLine{Di2015NewLine    // Some stuff related to A here...Di2015NewLine}Di2015NewLine
599144Di2015UniqueSeparator// This file is Product.CodeAboutThingB.csDi2015NewLineDi2015NewLinepublic partial class ProductDi2015NewLine{Di2015NewLine    // Some stuff related to B here...Di2015NewLine}Di2015NewLine
599282Di2015UniqueSeparatorusing System.Net;Di2015NewLine//...Di2015NewLineusing (WebClient client = new WebClient ()) // WebClient class inherits IDisposableDi2015NewLine{Di2015NewLine    client.DownloadFile("http://yoursite.com/page.html", @"C:\\localfile.html");Di2015NewLineDi2015NewLine    // Or you can get the file content without saving it:Di2015NewLine    string htmlCode = client.DownloadString("http://yoursite.com/page.html");Di2015NewLine    //...Di2015NewLine}Di2015NewLine
599373Di2015UniqueSeparatorList
599373Di2015UniqueSeparatorList<int> myInts = new List<int>();Di2015NewLinemyInts.Add(5);Di2015NewLinemyInts.Add(10);Di2015NewLinemyInts.Add(11);Di2015NewLinemyInts.Count // = 3Di2015NewLine
599517Di2015UniqueSeparatore.Graphics.Clear(Color.White);Di2015NewLine
599517Di2015UniqueSeparatorGraphics gxOff; //Offscreen graphicsDi2015NewLineBrush backBrush;Di2015NewLineDi2015NewLineif (m_bmpOffscreen == null) //Bitmap for doublebufferingDi2015NewLine{Di2015NewLine    m_bmpOffscreen = new Bitmap(ClientSize.Width, ClientSize.Height);Di2015NewLine}Di2015NewLineDi2015NewLine// draw back bufferDi2015NewLinegxOff = Graphics.FromImage(m_bmpOffscreen);Di2015NewLineDi2015NewLinegxOff.Clear(Color.White);Di2015NewLineDi2015NewLinebackBrush = new SolidBrush(Color.White);Di2015NewLineDi2015NewLinegxOff.FillRectangle(backBrush, this.Left, this.Top,Di2015NewLine    this.ClientRectangle.Width,Di2015NewLine    this.ClientRectangle.Height);Di2015NewLineDi2015NewLine//Draw some bitmapDi2015NewLinegxOff.DrawImage(imageToShow, this.Left, this.Top, rectImageToShow, GraphicsUnit.Pixel);Di2015NewLineDi2015NewLine//Draw from the memory bitmapDi2015NewLinee.Graphics.DrawImage(m_bmpOffscreen,  0, 0);Di2015NewLineDi2015NewLinebase.OnPaint(e);Di2015NewLine
599582Di2015UniqueSeparatorType var1 = new Type();Di2015NewLineType var2 = new Type();Di2015NewLineDi2015NewLinevar2 = var1;Di2015NewLine
599771Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLine[Serializable]Di2015NewLinepublic class SerializableClassDi2015NewLine{Di2015NewLine    public string WhatIsMyAppDomain()Di2015NewLine    {Di2015NewLine    \return AppDomain.CurrentDomain.FriendlyName;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MarshallByRefClass : MarshalByRefObjectDi2015NewLine{Di2015NewLine    public string WhatIsMyAppDomain()Di2015NewLine    {Di2015NewLine    \return AppDomain.CurrentDomain.FriendlyName;Di2015NewLine    }Di2015NewLine}    Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine    \AppDomain ad = AppDomain.CreateDomain("OtherAppDomain");Di2015NewLineDi2015NewLine    \MarshallByRefClass marshall = (MarshallByRefClass)ad.CreateInstanceAndUnwrap(Assembly.GetExecutingAssembly().FullName, "MarshallByRefClass");Di2015NewLine    \SerializableClass serializable = (SerializableClass)ad.CreateInstanceAndUnwrap(Assembly.GetExecutingAssembly().FullName, "SerializableClass");Di2015NewLineDi2015NewLine    \Console.WriteLine(marshall.WhatIsMyAppDomain());Di2015NewLine    \Console.WriteLine(serializable.WhatIsMyAppDomain());Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
599862Di2015UniqueSeparatorprivate string Search2(int startPos, string startMatchString, string endMatchString, string response) {Di2015NewLine    int startMarch = response.IndexOf(startMatchString, startPos, StringComparison.Ordinal);Di2015NewLine    if (startMarch != -1) {Di2015NewLine        startMarch += startMatchString.Length;Di2015NewLine        int endMatch = response.IndexOf(endMatchString, startMarch, StringComparison.Ordinal);Di2015NewLine        if (endMatch != -1) { return response.Substring(startMarch, endMatch - startMarch); }Di2015NewLine    }Di2015NewLine    return string.Empty;Di2015NewLine}Di2015NewLine
599947Di2015UniqueSeparatorpublic class CountryDi2015NewLine{Di2015NewLine  public string Name { get; set; }Di2015NewLine  public IList<City> Cities { get; set; }Di2015NewLineDi2015NewLine  public Country()Di2015NewLine  {Di2015NewLine    Cities = new List<City>();Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class City { public string Name { get; set; } }Di2015NewLine
599947Di2015UniqueSeparatorCountries =Di2015NewLine  new List<Country>Di2015NewLine    {Di2015NewLine      new CountryDi2015NewLine        {Di2015NewLine          Name = "Germany",Di2015NewLine          Cities =Di2015NewLine            {Di2015NewLine              new City {Name = "Berlin"},Di2015NewLine              new City {Name = "Hamburg"}Di2015NewLine            }Di2015NewLine        },Di2015NewLine      new CountryDi2015NewLine        {Di2015NewLine          Name = "England",Di2015NewLine          Cities =Di2015NewLine            {Di2015NewLine              new City {Name = "London"},Di2015NewLine              new City {Name = "Birmingham"}Di2015NewLine            }Di2015NewLine        }Di2015NewLine    };Di2015NewLine
599958Di2015UniqueSeparatorDataRowView row = dt.DefaultView[1]; // second rowDi2015NewLinedetailsView1.DataSource = new DataRowView[] {row};Di2015NewLinedetailsView1.DataBind();Di2015NewLine
599958Di2015UniqueSeparatorDataRowView
599958Di2015UniqueSeparatorDataRow
599958Di2015UniqueSeparatorDataRow
599958Di2015UniqueSeparatorpublic static DataRowView[] ForBinding(this DataRow row)Di2015NewLine{Di2015NewLine    foreach (DataRowView rowView in row.Table.DefaultView)Di2015NewLine    {Di2015NewLine        if (ReferenceEquals(rowView.Row, row))Di2015NewLine        {Di2015NewLine            return new DataRowView[] { rowView };Di2015NewLine        }Di2015NewLine    }Di2015NewLine    throw new ArgumentException("Row not found in the default view", "row");Di2015NewLine}Di2015NewLine
599958Di2015UniqueSeparatordetailsView1.DataSource = row.ForBinding();Di2015NewLinedetailsView1.DataBind();Di2015NewLine
600129Di2015UniqueSeparatorNullable<int>
600129Di2015UniqueSeparator<Nullable<null>>
600129Di2015UniqueSeparator<null>
600129Di2015UniqueSeparatorNullable<Nullable<int>> x = null;Di2015NewLineNullable<int> y = null;Di2015NewLineConsole.WriteLine(x == null); // trueDi2015NewLineConsole.WriteLine(y == null); // trueDi2015NewLineConsole.WriteLine(x == y); // false or a compile time error!Di2015NewLine
600129Di2015UniqueSeparatorwhere T : struct
600129Di2015UniqueSeparatort == null
600129Di2015UniqueSeparatorint? x = null;Di2015NewLineint? y = null;Di2015NewLineConsole.WriteLine(x == y); // trueDi2015NewLineConsole.WriteLine(x >= y); // false!Di2015NewLine
600129Di2015UniqueSeparator<
600129Di2015UniqueSeparator<
600129Di2015UniqueSeparator>>
600141Di2015UniqueSeparatorSELECT LAST_INSERT_ID();
600145Di2015UniqueSeparatorMinimumSize
600145Di2015UniqueSeparatorMaximumSize
600306Di2015UniqueSeparatorbool IsPowerOfTwo(ulong x)Di2015NewLine{Di2015NewLine    return (x & (x - 1)) == 0;Di2015NewLine}Di2015NewLine
600306Di2015UniqueSeparatorbool IsPowerOfTwo(ulong x)Di2015NewLine{Di2015NewLine    return (x != 0) && ((x & (x - 1)) == 0);Di2015NewLine}Di2015NewLine
600306Di2015UniqueSeparatorbool b = IsPowerOfTwo(4)Di2015NewLine
600306Di2015UniqueSeparatorreturn (4 != 0) && ((4 & (4-1)) == 0);Di2015NewLine
600306Di2015UniqueSeparator((4 & (4-1)) == 0)Di2015NewLine
600306Di2015UniqueSeparator((4 & 3) == 0)Di2015NewLine
600306Di2015UniqueSeparator4&3
600306Di2015UniqueSeparator100 = 4Di2015NewLine011 = 3Di2015NewLine
600306Di2015UniqueSeparator&
600306Di2015UniqueSeparator1 & 1 = 1
600306Di2015UniqueSeparator1 & 0 = 0
600306Di2015UniqueSeparator0 & 0 = 0
600306Di2015UniqueSeparator0 & 1 = 0
600306Di2015UniqueSeparator100Di2015NewLine011Di2015NewLine----Di2015NewLine000Di2015NewLine
600306Di2015UniqueSeparatorreturn (4 != 0) && ((4 & 3) == 0);Di2015NewLine
600306Di2015UniqueSeparatorreturn true && (0 == 0);Di2015NewLine
600306Di2015UniqueSeparatorreturn true && true;Di2015NewLine
600306Di2015UniqueSeparatortrue && true
600306Di2015UniqueSeparatortrue
600568Di2015UniqueSeparatorprotected void Calendar_DayRender(object sender, DayRenderEventArgs e)Di2015NewLine{Di2015NewLine   //Get date in past relative to current date.Di2015NewLine   DateTime dateInPast = DateTime.Now.Subtract(TimeSpan.FromDays(10));Di2015NewLineDi2015NewLine   if (e.Day.Date < dateInPast || e.Day.Date > DateTime.Now)Di2015NewLine      {Di2015NewLine         e.Day.IsSelectable = false;Di2015NewLine      }Di2015NewLine}Di2015NewLine
600571Di2015UniqueSeparatorList<int>
600571Di2015UniqueSeparatorstruct Foo<T>Di2015NewLine{Di2015NewLine    T value;Di2015NewLine}Di2015NewLine
600571Di2015UniqueSeparatorFoo<string>
600571Di2015UniqueSeparatorT
600571Di2015UniqueSeparatorT
600571Di2015UniqueSeparatorNullable<T>
600571Di2015UniqueSeparatorNullable<T>
600571Di2015UniqueSeparatorwhere T : struct
600571Di2015UniqueSeparatorwhere T : class
600578Di2015UniqueSeparator<Canvas>Di2015NewLine   <TextBox x:Name="textBox" Text="{Binding ElementName=button, Path=(Canvas.Left)}" />Di2015NewLine   <Button x:Name="button" Content="Press me" />Di2015NewLine</Canvas>Di2015NewLine
600578Di2015UniqueSeparatorBinding binding = new Binding();Di2015NewLinebinding.Source = button;Di2015NewLinebinding.Path = new PropertyPath(Canvas.LeftProperty);Di2015NewLinetextBox.SetBinding(TextBlock.TextProperty, binding);Di2015NewLine
600797Di2015UniqueSeparator<ListBox>Di2015NewLine  <ListBoxItem><local:MyEnum>Value1</local:MyEnum></ListBoxItem>Di2015NewLine  <ListBoxItem Margin="10"><local:MyEnum>Value2</local:MyEnum></ListBoxItem>Di2015NewLine  <ListBoxItem><local:MyEnum>Value3</local:MyEnum></ListBoxItem>Di2015NewLine</ListBox>Di2015NewLine
600797Di2015UniqueSeparatorlocal
600822Di2015UniqueSeparatorctrls[i].onchange = selection_handler; \\r\\nDi2015NewLine
600822Di2015UniqueSeparatorsb.Append("                 if (ctrls[i].addEventListener) ctrls[i].addEventListener(\\"change\\",selection_handler,false);");Di2015NewLinesb.Append("                 else if (ctrls[i].attachEvent) ctrls[i].attachEvent(\\"on\\" + \\"change\\", selection_handler, false);");Di2015NewLinesb.Append("                 else return false;");Di2015NewLine
600892Di2015UniqueSeparatorBindingList
600892Di2015UniqueSeparatorpublic class CountryDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public IList<City> Cities { get; set; }Di2015NewLine    public Country(string _name)Di2015NewLine    {Di2015NewLine        Cities = new List<City>();Di2015NewLine        Name = _name;Di2015NewLine    }Di2015NewLine}Di2015NewLine
600892Di2015UniqueSeparatorList<Country> countries = new List<Country> { new Country("UK"), Di2015NewLine                                     new Country("Australia"), Di2015NewLine                                     new Country("France") };Di2015NewLineDi2015NewLinebindingSource1.DataSource = countries;Di2015NewLineDi2015NewLinecomboBox1.DataSource = bindingSource1.DataSource;Di2015NewLineDi2015NewLinecomboBox1.DisplayMember = "Name";Di2015NewLinecomboBox1.ValueMember = "Name";Di2015NewLine
600979Di2015UniqueSeparatorvar items = new[] { line1, line2, suburb, state, ... };Di2015NewLinevar values = items.Where(s => !string.IsNullOrEmpty(s));Di2015NewLinevar addr = string.Join(" ", values.ToArray());Di2015NewLine
600979Di2015UniqueSeparatorStringBuilder
600979Di2015UniqueSeparatorvar items = new[] { line1, line2, suburb, state, ... };Di2015NewLinevar values = items.Where(s => !string.IsNullOrEmpty(s));Di2015NewLinevar builder = new StringBuilder(128);Di2015NewLinevalues.Aggregate(builder, (b, s) => b.Append(s).Append(" "));Di2015NewLinevar addr = builder.ToString(0, builder.Length - 1);Di2015NewLine
600989Di2015UniqueSeparatorSqlConnection conn = new SqlConnection(connString);Di2015NewLineSqlCommand cmnd = new SqlCommand("Insert Into Table (P1, P2) Values (@P1, @P2)", conn);Di2015NewLinecmnd.Parameters.AddWithValue("@P1", P1Value);Di2015NewLinecmnd.Parameters.AddWithValue("@P2", P2Value);Di2015NewLinecmnd.ExecuteNonQuery();Di2015NewLineconn.Close();Di2015NewLine
601121Di2015UniqueSeparator// Async callback.Di2015NewLineMessage message;Di2015NewLineDi2015NewLinewhile((message = Message.ReadBytes(messageBuffer)) != null)Di2015NewLine{Di2015NewLine    OnMessageReceived(new MessageEventArgs(message));Di2015NewLine}Di2015NewLineDi2015NewLine// Message class.Di2015NewLinepublic static Message ReadBytes(List<byte> data)Di2015NewLine{Di2015NewLine    int end = data.FindIndex(b => b == '\\n' || b == '\\r');Di2015NewLineDi2015NewLine    if(end == -1)Di2015NewLine    \return null;Di2015NewLineDi2015NewLine    string line = Encoding.UTF8.GetString(data.Take(end).ToArray());Di2015NewLineDi2015NewLine    data.RemoveRange(0, end + 1);Di2015NewLineDi2015NewLine    if(line == "")Di2015NewLine    \return ReadBytes(data);Di2015NewLineDi2015NewLine    if(line == null)Di2015NewLine    \return null;Di2015NewLineDi2015NewLine    return Message.FromRawString(line);Di2015NewLine}Di2015NewLine
601194Di2015UniqueSeparator<asp:Textbox ID="txt" runat="server" />Di2015NewLine<asp:RequiredFieldValidator id="rfv" runat="server" ControlToValidate="txt" ValidationGroup="masterGroup">* Required!</asp:RequiredFieldValidator>Di2015NewLine<br />Di2015NewLine<asp:Button id="btnSubmitMaster" runat="server" Text="Submit!" ValidationGroup="masterGroup" />Di2015NewLine
601301Di2015UniqueSeparatorvoid Foo<T>(T value) {Console.WriteLine("General method");}Di2015NewLinevoid Foo(Bar value) {Console.WriteLine("Specialized method");}Di2015NewLine
601301Di2015UniqueSeparatorBar bar = new Bar();Di2015NewLineFoo(bar); // uses the specialized methodDi2015NewLine
601301Di2015UniqueSeparatorvoid Test<TSomething>(TSomething value) {Di2015NewLine    Foo(value);Di2015NewLine}Di2015NewLine
601301Di2015UniqueSeparatorFoo<T>
601301Di2015UniqueSeparatorTSomething=Bar
601301Di2015UniqueSeparatorclass SomeBase { public virtual void Foo() {...}}Di2015NewLineclass Bar : SomeBase { public override void Foo() {...}}Di2015NewLine
601301Di2015UniqueSeparatorBar.Foo
601401Di2015UniqueSeparatorUsing System.Data.SqlClient;Di2015NewLineDi2015NewLine//////now use following codes to retrieve data//////Di2015NewLineString ConStr = "Data Source=localhost;Initial Catalog=Database Name;Integrated Security=True";Di2015NewLine        SqlConnection sqlcnn;Di2015NewLine        SqlCommand sqlcmd;Di2015NewLine        SqlDataReader sqldr;Di2015NewLine        string plssql;Di2015NewLineplssql = "select field from table_name where condition";Di2015NewLine        sqlcnn = new SqlConnection(ConStr);Di2015NewLine        sqlcnn.Open();Di2015NewLine        sqlcmd = new SqlCommand(plssql, sqlcnn);Di2015NewLine        sqldr = sqlcmd.ExecuteReader();Di2015NewLineString val=sqldr["field name"].ToString();Di2015NewLinesqlcmd.Close();Di2015NewLinesqlcnn.Close();Di2015NewLine
601415Di2015UniqueSeparatorpublic static class Command {Di2015NewLineDi2015NewLine    public static readonly RoutedUICommand DoSomething = new RoutedUICommand("Do something", "DoSomething", typeof(Window1));Di2015NewLine    public static readonly RoutedUICommand SomeOtherAction = new RoutedUICommand("Some other action", "SomeOtherAction", typeof(Window1));Di2015NewLine    public static readonly RoutedUICommand MoreDeeds = new RoutedUICommand("More deeds", "MoreDeeeds", typeof(Window1));Di2015NewLineDi2015NewLine}Di2015NewLine
601415Di2015UniqueSeparatorxmlns:w="clr-namespace:NameSpaceOfTheApplication"Di2015NewLine
601415Di2015UniqueSeparator<Window.CommandBindings>Di2015NewLine    <CommandBinding Command="ApplicationCommands.Open" Executed="CommandBinding_Open" />Di2015NewLine    <CommandBinding Command="ApplicationCommands.Paste" Executed="CommandBinding_Paste" />Di2015NewLine    <CommandBinding Command="w:Command.DoSomething" Executed="CommandBinding_DoSomething" />Di2015NewLine    <CommandBinding Command="w:Command.SomeOtherAction" Executed="CommandBinding_SomeOtherAction" />Di2015NewLine    <CommandBinding Command="w:Command.MoreDeeds" Executed="CommandBinding_MoreDeeds" />Di2015NewLine</Window.CommandBindings>Di2015NewLine
601415Di2015UniqueSeparator<MenuItem Name="Menu_DoSomething" Header="Do Something" Command="w:Command.DoSomething" />Di2015NewLine
601587Di2015UniqueSeparator[a-zA-Z]
601587Di2015UniqueSeparator^.*[a-zA-Z].*$
601853Di2015UniqueSeparator   TextRange tr = new TextRange(myRichTextBox.Document.ContentStart,Di2015NewLine                                myRichTextBox.Document.ContentEnd);Di2015NewLine   MemoryStream ms = new MemoryStream();Di2015NewLine   tr.Save(ms, DataFormats.Xaml);Di2015NewLine   string xamlText = ASCIIEncoding.Default.GetString(ms.ToArray());Di2015NewLine
601853Di2015UniqueSeparatorTextRange
601853Di2015UniqueSeparatorSave
601853Di2015UniqueSeparatorDataFormats
601853Di2015UniqueSeparatorDataFormats.Rtf
601899Di2015UniqueSeparatorWebClient.DownloadFileAsync()
601899Di2015UniqueSeparatorCancelAsync()
602002Di2015UniqueSeparatory=0.3*R+0.59G*G+0.11*BDi2015NewLine
602002Di2015UniqueSeparatorconst int threshold = 127;Di2015NewLineBitmap bm = { some source bitmap };Di2015NewLineDi2015NewLinebyte[,] buffer = new byte[64,256];Di2015NewLineDi2015NewLinefor(int y=0;y<bm.Height;y++)Di2015NewLine{Di2015NewLine  for(int x=0;x<bm.Width;x++)Di2015NewLine  {Di2015NewLine   Color c=source.GetPixel(x,y);Di2015NewLine   int luminance = (int)(c.R*0.3 + c.G*0.59+ c.B*0.11);Di2015NewLine   buffer[x,y] = (luminance  > 127) ? 1 : 0;Di2015NewLine  }Di2015NewLine}Di2015NewLine
602106Di2015UniqueSeparator<T>
602107Di2015UniqueSeparator        DataSet ds = new DataSet();Di2015NewLine        XmlTextReader xmlreader = new XmlTextReader(xmlSource, XmlNodeType.Document, null);Di2015NewLine        ds.ReadXml(xmlreader);Di2015NewLine
602393Di2015UniqueSeparatorvar address = { Di2015NewLine    CountryCode: "1"Di2015NewLine}Di2015NewLine
602393Di2015UniqueSeparator<script>Di2015NewLine  function valaddress(){ Di2015NewLineDi2015NewLine      var address = { Di2015NewLine          CountryCode: "90"Di2015NewLine      };Di2015NewLineDi2015NewLine      // This part is ok, no problem in here : Di2015NewLine      var validatedAddress = Di2015NewLine       AddressControlDataHelper.ValidateAddress(address).value; Di2015NewLineDi2015NewLine  }Di2015NewLine</script>Di2015NewLine
602404Di2015UniqueSeparatorXmlSerializer
602404Di2015UniqueSeparatorXmlSerializer
602404Di2015UniqueSeparatorXmlSerializer
602404Di2015UniqueSeparatorType
602404Di2015UniqueSeparatorXmlAttributeOverrides
602404Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Xml.Serialization;Di2015NewLine public class PersonDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        XmlAttributeOverrides overrides = new XmlAttributeOverrides();Di2015NewLine        XmlAttributes attribs = new XmlAttributes();Di2015NewLine        attribs.XmlIgnore = false;Di2015NewLine        attribs.XmlElements.Add(new XmlElementAttribute("personName"));Di2015NewLine        overrides.Add(typeof(Person), "Name", attribs);Di2015NewLineDi2015NewLine        XmlSerializer ser = new XmlSerializer(typeof(Person), overrides);Di2015NewLine        Person person = new Person();Di2015NewLine        person.Name = "Marc";Di2015NewLine        ser.Serialize(Console.Out, person);Di2015NewLine    }Di2015NewLine    private string name;Di2015NewLine    [XmlElement("name")]Di2015NewLine    [XmlIgnore]Di2015NewLine    public string Name { get { return name; } set { name = value; } }Di2015NewLine}Di2015NewLine
602404Di2015UniqueSeparatorTypeDescriptor.CreateProperty
602404Di2015UniqueSeparatorICustomTypeDescriptor
602404Di2015UniqueSeparatorTypeDescriptionProvider
602645Di2015UniqueSeparatorSqlCommand cmd = new SqlCommand(myQuery, conn);Di2015NewLinecmd.Parameters.Add("@lastname", SqlDbType.NVarChar, 10, lastName);Di2015NewLine
602654Di2015UniqueSeparatorHttpServerUtility.UrlEncode
602654Di2015UniqueSeparatorHttpUtility.UrlEncode
602654Di2015UniqueSeparatorServer.UrlEncode
602655Di2015UniqueSeparatorMicrosoft.TeamFoundation.WorkItemTracking.Client.WorkItemType.Export
602655Di2015UniqueSeparatorMicrosoft.TeamFoundation.WorkItemTracking.Client.WorkItemTypeCollection.Import
602720Di2015UniqueSeparatorpublic DataTable ReturnSomething()Di2015NewLine{Di2015NewLine    DataTable returnValue = null;Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        //logic hereDi2015NewLine        returnValue = ds.Tables[0]; Di2015NewLine    }Di2015NewLine    catch (Exception e)Di2015NewLine    {Di2015NewLine        ErrorString=e.Message;Di2015NewLine    }Di2015NewLineDi2015NewLine    return returnValue;Di2015NewLine}Di2015NewLine
602920Di2015UniqueSeparator    private void textBox1_TextChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.AcceptButton = SearchButton;Di2015NewLine    }Di2015NewLine
602920Di2015UniqueSeparator    private void dataGridView1_DataMemberChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.AcceptButton = OKButton;Di2015NewLine    }Di2015NewLine
602920Di2015UniqueSeparator    private void SearchButton_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        dataGridView1.Focus();Di2015NewLine    }Di2015NewLine
602982Di2015UniqueSeparatorSELECT DISTINCT parentID FROM myOtherTable
603005Di2015UniqueSeparator    XmlDocument doc = new XmlDocument();Di2015NewLine    XmlElement root = (XmlElement)doc.AppendChild(doc.CreateElement("root"));Di2015NewLine    XmlNodeList list = // your queryDi2015NewLine    foreach (XmlElement child in list)Di2015NewLine    {Di2015NewLine        root.AppendChild(doc.ImportNode(child, true));Di2015NewLine    }Di2015NewLine
603126Di2015UniqueSeparatorConnectionStrings
603126Di2015UniqueSeparatormachine.config
603126Di2015UniqueSeparator <connectionStrings>Di2015NewLine    <addDi2015NewLine        name="LocalSqlServer"Di2015NewLine        connectionString="data source=.\\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|aspnetdb.mdf;User Instance=true"Di2015NewLine        providerName="System.Data.SqlClient"Di2015NewLine    />Di2015NewLine </connectionStrings>Di2015NewLine
603234Di2015UniqueSeparatorTextChanged
603234Di2015UniqueSeparatorBinding
603234Di2015UniqueSeparatorLabel
603256Di2015UniqueSeparatorFruitList<float, FruitType.Orange>Di2015NewLine
603256Di2015UniqueSeparatorOrange
603256Di2015UniqueSeparatorFruitList<float, Orange>Di2015NewLine
603256Di2015UniqueSeparatorOrange
603256Di2015UniqueSeparatorFruitList<float> orangeWeights = new FruitList<float>(FruitType.Orange);Di2015NewLine
603291Di2015UniqueSeparatorpublic class myCustomTextBox : TextBoxDi2015NewLine{Di2015NewLine    protected override void WndProc(ref Message m)Di2015NewLine    {Di2015NewLine        if (m.Msg == 770) // window paste message idDi2015NewLine        {Di2015NewLine            string clipBoardData = Clipboard.GetDataObject().GetData(DataFormats.Text).ToString();Di2015NewLine            handlePasteEvent(clipBoardData);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            base.WndProc(ref m);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private void handlePasteEvent(string pasteData)Di2015NewLine    {Di2015NewLine        // process pasted dataDi2015NewLine    }Di2015NewLine}Di2015NewLine
603314Di2015UniqueSeparatorResponse.Redirect("Page2.aspx");Di2015NewLine
603314Di2015UniqueSeparator<input type="button" value="Text" onclick="location='Page2.aspx'" />Di2015NewLine
603371Di2015UniqueSeparatorpublic void Average(params Point2[] points)Di2015NewLine
603371Di2015UniqueSeparatorAverage(P1);Di2015NewLineAverage(P2, P3, P4);Di2015NewLineAverage(); // this one becomes an empty array in the methodDi2015NewLineDi2015NewLinePoint[] array = new Point[] { P1, P2, P3, P4 };Di2015NewLineAverage(array);Di2015NewLine
603371Di2015UniqueSeparatorAverage({ P1 }); // this is legal C# for making an array with 1 elementDi2015NewLine
603371Di2015UniqueSeparatorIEnumerable<Point2>
603371Di2015UniqueSeparatorList<Point2>
603371Di2015UniqueSeparatorToArray()
603464Di2015UniqueSeparatorvar query = db.ProjectDi2015NewLine  .Where(p => p.Notes.Any(n => n.NoteField.Contains(searchString)));Di2015NewLine
603485Di2015UniqueSeparatorControl fracTemplateCtrl = Di2015NewLine   (FracTemplateCtrl)LoadControl("FracTemplateCtrl.ascx")Di2015NewLinefracTemplateCtrl.TestMethod();Di2015NewLine
603485Di2015UniqueSeparatorFracTemplateCtrl fracTemplateCtrl =Di2015NewLine   (FracTemplateCtrl)LoadControl("FracTemplateCtrl.ascx")Di2015NewLinefracTemplateCtrl.TestMethod();Di2015NewLine
603485Di2015UniqueSeparatorfracTemplateCtrl is
603485Di2015UniqueSeparatorFracTemplateCtrl
603485Di2015UniqueSeparatorTestMethod()
603485Di2015UniqueSeparatorControl
603702Di2015UniqueSeparatorclass MyBaseClass<T> where T : MyBaseClass<T>, new()Di2015NewLine{Di2015NewLine    public T Retrieve()Di2015NewLine    {Di2015NewLine        return new T();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Foo : MyBaseClass<Foo>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        Foo f = new Foo();Di2015NewLine        Foo f2 = f.Retrieve();Di2015NewLine        Console.WriteLine(f2.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
603702Di2015UniqueSeparatorMyBaseClass.Retrieve()
603702Di2015UniqueSeparatorMyBaseClass<T>.
603742Di2015UniqueSeparator1 -- 50383220533284199945706810754936311181214547134666382315016772033813961148457676Di2015NewLine2 -- 125723425896904546349739165166331731432281836699962161072279259011758052396215820Di2015NewLine3 -- 235794378436564714387676526976517945151880763730707233042654663244625708155520494Di2015NewLine'This is my super secret password.'Di2015NewLine
603969Di2015UniqueSeparatorDateTime dtStartUtc = dtStartLocal.ToUniversalTime();Di2015NewLine
603969Di2015UniqueSeparatorDateTime dtEndUtc = dtStartUtc.AddYears(3);Di2015NewLine
603969Di2015UniqueSeparatorDateTime dtEndLocal2 = dtEndUtc.ToLocalTime();Di2015NewLine
604010Di2015UniqueSeparatorTimer
604010Di2015UniqueSeparatorInterval
604010Di2015UniqueSeparator45000
604010Di2015UniqueSeparatorEnabled
604010Di2015UniqueSeparatorTrue
604010Di2015UniqueSeparatorTick
604010Di2015UniqueSeparatorTick
604010Di2015UniqueSeparatordataGridView
604010Di2015UniqueSeparatorprivate void timer1_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Update DataGridViewDi2015NewLine}Di2015NewLine
604010Di2015UniqueSeparatortimer1.Stop()
604010Di2015UniqueSeparatortimer1.Start()
604023Di2015UniqueSeparatorTreeNode tn = new TreeNode();  Di2015NewLinetn.Text = name;  Di2015NewLinetn.Tag = xmladdtreeNode;Di2015NewLine
604023Di2015UniqueSeparatorTreeNode treenode = e.Node; Di2015NewLineXmlNode xmlNode = (XmlNode) treeNode.Tag;Di2015NewLine
604063Di2015UniqueSeparatorFunc<T>
604063Di2015UniqueSeparatorT GetCachedValue<T>(string key, Func<T> method) {Di2015NewLine     T value;Di2015NewLine     if(!cache.TryGetValue(key, out value)) {Di2015NewLine         value = method();Di2015NewLine         cache[key] = value;Di2015NewLine     }Di2015NewLine     return value;Di2015NewLine}Di2015NewLine
604063Di2015UniqueSeparatorint i = GetCahcedValue("Foo", GetNextValue);Di2015NewLine...Di2015NewLineint GetNextValue() {...}Di2015NewLine
604063Di2015UniqueSeparatorvar bar = ...Di2015NewLineint i = GetCachedValue("Foo", () => GetNextValue(bar));Di2015NewLine
604066Di2015UniqueSeparatorabstract class Foo { }Di2015NewLineDi2015NewLineclass Bar : Foo { }Di2015NewLine
604066Di2015UniqueSeparator.class private abstract auto ansi beforefieldinit FooDi2015NewLine    extends [mscorlib]System.Object { }Di2015NewLineDi2015NewLine.class private auto ansi beforefieldinit BarDi2015NewLine    extends Foo { }Di2015NewLine
604323Di2015UniqueSeparatorSize size = TextRenderer.MeasureText("Hello world", someFont);Di2015NewLine
604323Di2015UniqueSeparatorBitmap bmp = new Bitmap(1,1);Di2015NewLineGraphics graphics = Graphics.FromImage(bmp);Di2015NewLineSizeF size = graphics.MeasureString("Hello world", someFont);Di2015NewLine
604360Di2015UniqueSeparator    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        DataGridViewCellStyle _myStyle = new DataGridViewCellStyle();Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            _myStyle.BackColor = Color.Pink;Di2015NewLine            // We could also provide a custom format string here Di2015NewLine            // with the _myStyle.Format propertyDi2015NewLine        }Di2015NewLineDi2015NewLine        private void dataGridView1_CellFormatting(object sender, Di2015NewLine            DataGridViewCellFormattingEventArgs e)Di2015NewLine        {Di2015NewLine            // Every five rows I want my custom format instead Di2015NewLine            // of the defaultDi2015NewLine            if (e.RowIndex % 5 == 0)Di2015NewLine            {Di2015NewLine                e.CellStyle = _myStyle;Di2015NewLine                e.FormattingApplied = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        ...Di2015NewLine
604360Di2015UniqueSeparatorDataGridView.CellFormatting Event
604365Di2015UniqueSeparator  [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]Di2015NewLine  public OpenFileDialog DialogOpen {Di2015NewLine    get { return m_dlgOpen; }Di2015NewLine  }Di2015NewLine
604461Di2015UniqueSeparatorMemoryStream.ToArray()
604461Di2015UniqueSeparatorCryptoStream
604461Di2015UniqueSeparatorCryptoStream.FlushFinalBlock()
604461Di2015UniqueSeparatorusing()
604461Di2015UniqueSeparatorDispose()
604461Di2015UniqueSeparatorbyte[] rawPlaintext = System.Text.Encoding.Unicode.GetBytes("This is all clear now!");Di2015NewLineDi2015NewLineusing (Aes aes = new AesManaged())Di2015NewLine{Di2015NewLine    aes.Padding = PaddingMode.PKCS7;Di2015NewLine    aes.KeySize = 128;          // in bitsDi2015NewLine    aes.Key = new byte[128/8];  // 16 bytes for 128 bit encryptionDi2015NewLine    aes.IV = new byte[128/8];   // AES needs a 16-byte IVDi2015NewLine    // Should set Key and IV here.  Good approach: derive them from Di2015NewLine    // a password via Cryptography.Rfc2898DeriveBytes Di2015NewLine    byte[] cipherText= null;Di2015NewLine    byte[] plainText= null;Di2015NewLineDi2015NewLine    using (MemoryStream ms = new MemoryStream())Di2015NewLine    {Di2015NewLine        using (CryptoStream cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))Di2015NewLine        {Di2015NewLine            cs.Write(rawPlaintext, 0, rawPlaintext.Length);Di2015NewLine        }Di2015NewLineDi2015NewLine        cipherText= ms.ToArray();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    using (MemoryStream ms = new MemoryStream())Di2015NewLine    {Di2015NewLine        using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))Di2015NewLine        {Di2015NewLine            cs.Write(cipherText, 0, cipherText.Length);Di2015NewLine        }Di2015NewLineDi2015NewLine        plainText = ms.ToArray();Di2015NewLine    }Di2015NewLine    string s = System.Text.Encoding.Unicode.GetString(plainText);Di2015NewLine    Console.WriteLine(s);Di2015NewLine}Di2015NewLine
604490Di2015UniqueSeparatorRedirectToAction()
604516Di2015UniqueSeparatorusing System.CodeDom.Compiler;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing Microsoft.CSharp;Di2015NewLineDi2015NewLineCSharpCodeProvider codeProvider = new CSharpCodeProvider();Di2015NewLineICodeCompiler icc = codeProvider.CreateCompiler();Di2015NewLineSystem.CodeDom.Compiler.CompilerParameters parameters = new CompilerParameters();Di2015NewLineparameters.GenerateExecutable = false;Di2015NewLineparameters.OutputAssembly = "AutoGen.dll";Di2015NewLineCompilerResults results = icc.CompileAssemblyFromSource(parameters, yourCodeAsString);Di2015NewLine
604529Di2015UniqueSeparator        public int age { Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (Request.QueryString["Age"] == null)Di2015NewLine                return 0;Di2015NewLine            elseDi2015NewLine                return int.Parse(Request.QueryString["Age"]);                                    Di2015NewLine        }Di2015NewLine    }Di2015NewLine
604529Di2015UniqueSeparatorvar queryStrings = new QueryStrings()Di2015NewLinevar age = queryStrings.age;Di2015NewLine
604616Di2015UniqueSeparatorTable Item: ItemIdDi2015NewLineTable Rating: UserId, ItemId1, ItemId2, WinnerIdDi2015NewLine
604616Di2015UniqueSeparatorvar pair = db.Items.Join(db.Items,Di2015NewLine  i1 => i1.ItemId,Di2015NewLine  i2 => i2.ItemId,Di2015NewLine  (i1, i2) => new {i1, i2}Di2015NewLine)  //produce all pairsDi2015NewLine.Where(x => x.i1.ItemId < x.i2.ItemId) //filter diagonal to unique pairsDi2015NewLine.Where(x => Di2015NewLine  !db.RatingsDi2015NewLine  .Where(r => r.UserId == userIdDi2015NewLine    && r.ItemId1 == x.i1.ItemIdDi2015NewLine    && r.ItemId2 == x.i2.ItemId)Di2015NewLine  .Any() //not any ratings for this user and pairDi2015NewLine)Di2015NewLine.OrderBy(x => db.GetNewId()) //in-database random orderingDi2015NewLine.First();  // just give me the first oneDi2015NewLineDi2015NewLinereturn new List<Item>() {pair.i1, pair.i2 };Di2015NewLine
604767Di2015UniqueSeparator[DisplayName("Foo bar")]Di2015NewLine
604790Di2015UniqueSeparatorMonitor.TryEnter
604790Di2015UniqueSeparatorMonitor.Wait
604790Di2015UniqueSeparatorMonitor.Pulse
604843Di2015UniqueSeparatorforeach(Subscriber s in subscribers.Values)Di2015NewLine
604843Di2015UniqueSeparatorforeach(Subscriber s in subscribers.Values.ToList())Di2015NewLine
604865Di2015UniqueSeparatorusing System;Di2015NewLineusing VB = Microsoft.VisualBasic;Di2015NewLineDi2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Console.WriteLine(VB.Strings.StrConv("QUICK BROWN", VB.VbStrConv.ProperCase, 0));Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
604876Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection(databaseConnectionString))Di2015NewLine{Di2015NewLine    using (SqlCommand cmd = conn.CreateCommand())Di2015NewLine    {Di2015NewLine        cmd.CommandText = "StoredProcedureName";Di2015NewLine        cmd.CommandType = CommandType.StoredProcedure;Di2015NewLineDi2015NewLine        cmd.Parameters.AddWithValue("@ID", fileID);Di2015NewLineDi2015NewLine        conn.Open();Di2015NewLine        using (SqlDataReader rdr =Di2015NewLine                   cmd.ExecuteReader(CommandBehavior.CloseConnection))Di2015NewLine        {Di2015NewLine            if (rdr.Read())Di2015NewLine            {Di2015NewLine                // process row from resultset;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
604918Di2015UniqueSeparatorextern "C" __declspec(dllexport)Di2015NewLinedouble SomeFunction(double a, double vec[3], double mat[3][3]) {Di2015NewLine  double sum = a;Di2015NewLine  for (int ix = 0; ix < 3; ++ix) {Di2015NewLine    sum += vec[ix];Di2015NewLine    for (int iy = 0; iy < 3; ++iy) {Di2015NewLine      sum += mat[ix][iy];Di2015NewLine    }Di2015NewLine  }Di2015NewLine  return sum;Di2015NewLine}Di2015NewLine
604918Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e) {Di2015NewLine  double[] vec = new double[3];Di2015NewLine  double[,] mat = new double[3, 3];Di2015NewLine  for (int ix = 0; ix < 3; ++ix) {Di2015NewLine    vec[ix] = ix;Di2015NewLine    for (int iy = 0; iy < 3; ++iy) {Di2015NewLine      mat[ix, iy] = (ix + 1) * iy;Di2015NewLine    }Di2015NewLine  }Di2015NewLine  double sum = SomeFunction(1, vec, mat);Di2015NewLine}Di2015NewLine[System.Runtime.InteropServices.DllImport("cpptemp8.dll")]Di2015NewLineprivate static extern double SomeFunction(double a, double[] vec, double[,] mat);Di2015NewLine
604970Di2015UniqueSeparator#include <windows.h>Di2015NewLine   #include <stdio.h>Di2015NewLineDi2015NewLine   void main( )Di2015NewLine   {Di2015NewLine      HANDLE hFile, hStream;Di2015NewLine      DWORD dwRet;Di2015NewLineDi2015NewLine      hFile = CreateFile( "testfile",Di2015NewLine                       GENERIC_WRITE,Di2015NewLine                    FILE_SHARE_WRITE,Di2015NewLine                                NULL,Di2015NewLine                         OPEN_ALWAYS,Di2015NewLine                                   0,Di2015NewLine                                NULL );Di2015NewLine      if( hFile == INVALID_HANDLE_VALUE )Di2015NewLine         printf( "Cannot open testfile\\n" );Di2015NewLine      elseDi2015NewLine          WriteFile( hFile, "This is testfile", 16, &dwRet, NULL );Di2015NewLineDi2015NewLine      hStream = CreateFile( "testfile:stream",Di2015NewLine                                GENERIC_WRITE,Di2015NewLine                             FILE_SHARE_WRITE,Di2015NewLine                                         NULL,Di2015NewLine                                  OPEN_ALWAYS,Di2015NewLine                                            0,Di2015NewLine                                         NULL );Di2015NewLine      if( hStream == INVALID_HANDLE_VALUE )Di2015NewLine         printf( "Cannot open testfile:stream\\n" );Di2015NewLine      elseDi2015NewLine         WriteFile(hStream, "This is testfile:stream", 23, &dwRet, NULL);Di2015NewLine   }Di2015NewLine
605186Di2015UniqueSeparator  if (_socket.IsAvailable > 0) {Di2015NewLine      ProcessSocket(socket);Di2015NewLine  } else {Di2015NewLine      Console.WriteLine("Poll() returned true but there is no data");Di2015NewLine  }Di2015NewLine
605249Di2015UniqueSeparatorclass lanmessengerDi2015NewLine{Di2015NewLine    ...Di2015NewLine    TcpListener t = new TcpListener(5555);  // ok to initialize like thisDi2015NewLine    t.Start();  // wrong...put this in a methodDi2015NewLine}Di2015NewLine
605249Di2015UniqueSeparatorclass lanmessengerDi2015NewLine{Di2015NewLine    TcpListener t = new TcpListener(5555);  // ok to initialize like thisDi2015NewLineDi2015NewLine    public lanmessengerDi2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        t.Start();  // put it hereDi2015NewLine    }    Di2015NewLine}Di2015NewLine
605577Di2015UniqueSeparatorList<string> bob = new List<string>(myService.GetAllList());Di2015NewLine
605776Di2015UniqueSeparatorArrayLists
605776Di2015UniqueSeparatorint[]
605776Di2015UniqueSeparatorArrayList
605776Di2015UniqueSeparatorArrayList
605830Di2015UniqueSeparator(?<=\\<title\\>).+?(?=\\<\\/title\\>)Di2015NewLine
606084Di2015UniqueSeparator    protected override void OnStartup(StartupEventArgs e)Di2015NewLine    {Di2015NewLine        base.OnStartup(e);Di2015NewLineDi2015NewLine        bool doShutDown = ...;Di2015NewLineDi2015NewLine        if (doShutDown)Di2015NewLine        {Di2015NewLine            Shutdown(1);Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            this.StartupUri = new Uri("Window1.xaml", UriKind.Relative);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
606094Di2015UniqueSeparator[RegexReplaceString("RegexName", "Replacement")]Di2015NewLine
606185Di2015UniqueSeparatorPersons.OrderBy(p => p.Age).FirstOrDefault();Di2015NewLine
606185Di2015UniqueSeparatorfrom p in PersonsDi2015NewLinewhere p.Age == Persons.Select(p1 => p1.Age).Min()Di2015NewLineselect p;Di2015NewLine
606271Di2015UniqueSeparatorpublic void initiatingTree(string nameofFile, TreeView treeView1)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        //Create XML document & load the XML file.Di2015NewLine        XmlDocument xmlDocument = new XmlDocument();Di2015NewLine        xmlDocument.Load(nameofFile);Di2015NewLineDi2015NewLine        treeView1.Nodes.Clear();Di2015NewLineDi2015NewLine        if (xmlDocument.DocumentElement != null)Di2015NewLine        {Di2015NewLine            TreeNode treeNodedoc = new TreeNode(xmlDocument.DocumentElement.Name);Di2015NewLineDi2015NewLine            treeView1.Nodes.Add(treeNodedoc);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
606271Di2015UniqueSeparatorif (open.ShowDialog(this) == DialogResult.OK)Di2015NewLine{Di2015NewLine    txtFileName.Text = open.FileName;Di2015NewLine    MytreeNodeClass treenodeClass = new MytreeNodeClass();Di2015NewLine    treenodeClass.initiatingTree(open.FileName, treeView1); Di2015NewLine}Di2015NewLine
606341Di2015UniqueSeparator".*"Di2015NewLine
606373Di2015UniqueSeparator[ComVisible(true)]Di2015NewLine[Guid("babe87fc-1467-4913-a1d3-47eeedf1afb5")]Di2015NewLinepublic interface IDialogFactory {Di2015NewLine  void Create(); Di2015NewLine}Di2015NewLine
606375Di2015UniqueSeparatorrem (reregister ASP.NET in IIS)Di2015NewLinerem (run as administrator!)Di2015NewLine%SystemRoot%\\Microsoft.NET\\Framework\\v2.0.50727\\aspnet_regiis.exe -iDi2015NewLine
606400Di2015UniqueSeparatorprivate void mainRTB_TextChanged(object sender, TextChangedEventArgs e)  {Di2015NewLine            TextRange text = new TextRange(mainRTB.Document.ContentStart, mainRTB.Document.ContentEnd);Di2015NewLine            if (text.Text.Length >= this.MaxLenght && mainRTB.CanUndo)Di2015NewLine            {Di2015NewLine                mainRTB.Undo();Di2015NewLine                mainRTB.IsReadOnly = true;Di2015NewLine            }Di2015NewLine}Di2015NewLine
606422Di2015UniqueSeparatorvar span = System.TimeSpan.FromMinutes(121);Di2015NewLinevar hours = ((int)span.TotalHours).ToString();     Di2015NewLinevar minutes = span.Minutes.ToString();Di2015NewLine
606430Di2015UniqueSeparator/Home/Index.vm
606430Di2015UniqueSeparator/Home/
606549Di2015UniqueSeparatorGC.Collect()
606549Di2015UniqueSeparatorGC.WaitForPendingFinalizers()
606641Di2015UniqueSeparatorDictionary.TryGetValue
606641Di2015UniqueSeparatorDictionary<int,string> dictionary = new Dictionary<int,string>();Di2015NewLinedictionary[0] = "Yes";Di2015NewLineDi2015NewLinestring value;Di2015NewLineif (dictionary.TryGetValue(0, out value))Di2015NewLine{Di2015NewLine    Console.WriteLine("Fetched value: {0}", value);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Console.WriteLine("No such key", value);Di2015NewLine}Di2015NewLine
606646Di2015UniqueSeparatorGC.ReRegisterForFinalize 
606712Di2015UniqueSeparatorvar dictionaryA = dataADi2015NewLine  .GroupBy(item => new {a = item.a, b = item.b})Di2015NewLine  .ToDictionary(g => g.Key, g => g.ToList());Di2015NewLineDi2015NewLinevar dictionaryB = dataBDi2015NewLine  .GroupBy(item => new {a = item.a, b = item.b})Di2015NewLine  .ToDictionary(g => g.Key, g => g.ToList());Di2015NewLineDi2015NewLinevar results = dictionaryADi2015NewLine  .Where(g1 => dictionaryB.ContainsKey(g1.Key))Di2015NewLine  .Select(g1 => new {g1 = g1, g2 = dictionaryB[g1.Key]})Di2015NewLine  .SelectMany(pair =>Di2015NewLine    pair.g1.SelectMany(item1 =>Di2015NewLine      pair.g2Di2015NewLine      .Where(item2 => item2.c != item1.c)Di2015NewLine      .Select(item2 => new {item1, item2})Di2015NewLine    )Di2015NewLine  );Di2015NewLine
606712Di2015UniqueSeparatorvar dictionaryA = dataADi2015NewLine  .ToDictionary(item => new {a = item.a, b = item.b}, item => item);Di2015NewLineDi2015NewLinevar dictionaryB = dataBDi2015NewLine  .ToDictionary(item => new {a = item.a, b = item.b}, item => item);Di2015NewLineDi2015NewLinevar results = dictionaryADi2015NewLine  .Where(e1 => dictionaryB.ContainsKey(e1.Key))Di2015NewLine  .Select(e1 => new {i1 = e1.Value, i2 = dictionaryB[e1.Key]})Di2015NewLine  .Where(pair => pair.i1.c != pair.i2.c);Di2015NewLine
606738Di2015UniqueSeparatorif "$(ConfigurationName)" == "Debug" goto DebugDi2015NewLineif "$(ConfigurationName)" == "Release" goto ReleaseDi2015NewLineDi2015NewLinegoto EndDi2015NewLineDi2015NewLine:DebugDi2015NewLinedel "$(TargetDir)DebugOutput.dll"Di2015NewLinerename "$(TargetPath)" "DebugOutput.dll"Di2015NewLineDi2015NewLine:ReleaseDi2015NewLinedel "$(TargetDir)ReleaseOutput.dll"Di2015NewLinerename "$(TargetPath)" "ReleaseOutput.dll"Di2015NewLineDi2015NewLine:EndDi2015NewLine
606738Di2015UniqueSeparatorDebugOutput.dll
606738Di2015UniqueSeparatorReleaseOutput.dll
606738Di2015UniqueSeparator"Debug"
606738Di2015UniqueSeparator"Release"
606738Di2015UniqueSeparatorName <,Culture = CultureInfo> <,Version = Major.Minor.Build.Revision> <, StrongName> <,PublicKeyToken> '\\0'Di2015NewLine
606738Di2015UniqueSeparator#if SOME_COMPILER_SYMBOLDi2015NewLine[assembly: AssemblyVersion("1.0.0.0")]Di2015NewLine#elseDi2015NewLine[assembly: AssemblyVersion("1.0.0.1")]Di2015NewLine#endifDi2015NewLine
606738Di2015UniqueSeparatorsn
606738Di2015UniqueSeparatorAssemblyInfo.cs
606738Di2015UniqueSeparator#if SOME_COMPILER_SYMBOLDi2015NewLine[assembly: AssemblyKeyFile("FirstKey.snk")]Di2015NewLine#elseDi2015NewLine[assembly: AssemblyKeyFile("SecondKey.snk")]Di2015NewLine#endifDi2015NewLine
606913Di2015UniqueSeparatorGo
606913Di2015UniqueSeparatorpublic void Go<T>(IEnumerable<T> interfaceList)Di2015NewLine    where T : IBDi2015NewLine{Di2015NewLine    foreach (IB ibby in interfaceList)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Here");Di2015NewLine    }Di2015NewLine}Di2015NewLine
606913Di2015UniqueSeparatorCast
606913Di2015UniqueSeparatorT
606986Di2015UniqueSeparatorImage
606986Di2015UniqueSeparatorBitmapSource
606986Di2015UniqueSeparator<BitmapImage x:Key="MyImageSource" UriSource="../Media/Image.png" />Di2015NewLine
606986Di2015UniqueSeparator<Image Source="{StaticResource MyImageSource}" />Di2015NewLine
606986Di2015UniqueSeparatorImage.png
606986Di2015UniqueSeparatorResource
606986Di2015UniqueSeparatorContent
606992Di2015UniqueSeparatorTypeConverter
606992Di2015UniqueSeparatorTypeDescriptor.AddAttributes
606992Di2015UniqueSeparatorConvert.ChangeType
606992Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        TypeDescriptor.AddAttributes(typeof(Guid), new TypeConverterAttribute(Di2015NewLine            typeof(MyGuidConverter)));Di2015NewLineDi2015NewLine        Guid guid = Guid.NewGuid();Di2015NewLine        TypeConverter conv = TypeDescriptor.GetConverter(guid);Di2015NewLine        byte[] data = (byte[])conv.ConvertTo(guid, typeof(byte[]));Di2015NewLine        Guid newGuid = (Guid)conv.ConvertFrom(data);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyGuidConverter : GuidConverterDi2015NewLine{Di2015NewLine    public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)Di2015NewLine    {Di2015NewLine        return sourceType == typeof(byte[]) || base.CanConvertFrom(context, sourceType);Di2015NewLine    }Di2015NewLine    public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)Di2015NewLine    {Di2015NewLine        return destinationType == typeof(byte[]) || base.CanConvertTo(context, destinationType);Di2015NewLine    }Di2015NewLine    public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)Di2015NewLine    {Di2015NewLine        if (value != null && value is byte[])Di2015NewLine        {Di2015NewLine            return new Guid((byte[])value);Di2015NewLine        }Di2015NewLine        return base.ConvertFrom(context, culture, value);Di2015NewLine    }Di2015NewLine    public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)Di2015NewLine    {Di2015NewLine        if (destinationType == typeof(byte[]))Di2015NewLine        {Di2015NewLine            return ((Guid)value).ToByteArray();Di2015NewLine        }Di2015NewLine        return base.ConvertTo(context, culture, value, destinationType);Di2015NewLine    }Di2015NewLine}Di2015NewLine
606993Di2015UniqueSeparatorchecked="anything"Di2015NewLine
606993Di2015UniqueSeparator<asp:Control ID="uxMyControl" runat="server" attributes="other"... />Di2015NewLine
606993Di2015UniqueSeparatorprivate Boolean mypropery = false;Di2015NewLineDi2015NewLinePage_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.myproperty = true;Di2015NewLine    uxMyControl.attributes = myproperty;Di2015NewLine}Di2015NewLine
607030Di2015UniqueSeparatorvar pets =  from pet in petSourceDi2015NewLine            group pet by pet.Age into gDi2015NewLine            let max = g.OrderByDescending(p => p.Weight).FirstOrDefault<Pet>()Di2015NewLine            select new { Name = max.Name, Age = max.Age, Weight = max.Weight };Di2015NewLine
607107Di2015UniqueSeparator<summary>This takes a <token1> and turns it into a <token2></summary>
607119Di2015UniqueSeparator$hash = sha1( $ticket, true );Di2015NewLine
607204Di2015UniqueSeparatorstatic IEnumerable<Type> GetTypesWithHelpAttribute(Assembly assembly) {Di2015NewLine    foreach(Type type in assembly.GetTypes()) {Di2015NewLine        if (type.GetCustomAttributes(typeof(HelpAttribute), true).Length > 0) {Di2015NewLine            yield return type;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
607336Di2015UniqueSeparatorassert(("The number must be greater than zero!",  num > 0));Di2015NewLine
607366Di2015UniqueSeparatorDataTable dt = LookupStyles();Di2015NewLinedg.Styles.Clear();Di2015NewLineforeach (DataRow dr in dt.Rows)Di2015NewLine  dg.Styles.Add(dr["StyleName"].ToString(), dr["StyleValue"].ToString());Di2015NewLine
607554Di2015UniqueSeparatorSerializable
607554Di2015UniqueSeparatorInstanceDescriptor
607554Di2015UniqueSeparatorBlobs
607554Di2015UniqueSeparatorTypeConverter
607554Di2015UniqueSeparatorInstanceDescriptor
607554Di2015UniqueSeparatorBlobs
607554Di2015UniqueSeparatorBasicComponent
607554Di2015UniqueSeparatorIEnumerable<Blob>
607554Di2015UniqueSeparatorInstanceDescriptor
607554Di2015UniqueSeparatorBlob
607554Di2015UniqueSeparatorList<Blob>
607554Di2015UniqueSeparatorInstanceDescriptor
607554Di2015UniqueSeparatorCodeDomSerializer
607554Di2015UniqueSeparatorpublic class BasicComponentTypeConverter : TypeConverterDi2015NewLine{Di2015NewLine    public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)Di2015NewLine    {Di2015NewLine        bool canConvert = base.CanConvertTo(context, destinationType);Di2015NewLineDi2015NewLine        if (!canConvert &&Di2015NewLine            (destinationType == typeof(InstanceDescriptor))Di2015NewLine        {Di2015NewLine            canConvert = true;Di2015NewLine        }Di2015NewLineDi2015NewLine        return canConvert;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)Di2015NewLine    {Di2015NewLine        object conversion = null;Di2015NewLineDi2015NewLine        if (culture == null)Di2015NewLine        {Di2015NewLine            culture = CultureInfo.CurrentCulture;Di2015NewLine        }Di2015NewLineDi2015NewLine        BasicComponent component = value as BasicComponent;Di2015NewLine        if (basicComponent != null)Di2015NewLine        {Di2015NewLine            if (destinationType == typeof(InstanceDescriptor))Di2015NewLine            {Di2015NewLine               // Note that we convert the blobs to an array as this makes for nicer persisted code output.Di2015NewLine               // Without it, we might just get a resource blob which is not human-readable.Di2015NewLine               conversion = new InstanceDescriptor(Di2015NewLine                   typeof(BasicComponent).GetConstructor(new Type[] { typeof(IEnumerable<Blob>) }),Di2015NewLine                   new object[] { basicComponent.Blobs.ToArray() },Di2015NewLine                   true);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        if (conversion == null)Di2015NewLine        {Di2015NewLine            conversion = base.ConvertTo(context, culture, value, destinationType);Di2015NewLine        }Di2015NewLineDi2015NewLine        return conversion;Di2015NewLine    }Di2015NewLine}Di2015NewLine
607554Di2015UniqueSeparatorBlob
607554Di2015UniqueSeparatorTypeConverter
607663Di2015UniqueSeparator  CREATE FUNCTION My_ISDATE(@maybeDate varchar(max))Di2015NewLine  returns bitDi2015NewLine  as return ISDATE(@maybeDate);Di2015NewLine
607663Di2015UniqueSeparatorvar db = SomeDataContext;Di2015NewLinevar query = from p in db.MyTableDi2015NewLinewhere db.My_ISDATE(p.field1)Di2015NewLineselect p;Di2015NewLine
607687Di2015UniqueSeparatorvoid Append(object obj) {Di2015NewLine  if ( obj is int ) {Di2015NewLine    Append((int)obj);Di2015NewLine  } else if ( obj is double) { Di2015NewLine    Append((double)obj);Di2015NewLine  ...Di2015NewLine}Di2015NewLine
607706Di2015UniqueSeparatorpublic delegate void MyDelegate(Message msg);Di2015NewLinevoid foo_MessageReceived(Message message)Di2015NewLine{ Di2015NewLine   if (InvokeRequired)Di2015NewLine   {Di2015NewLine      BeginInvoke(new MyDelegate(foo_MessageReceived),new object[]{message});Di2015NewLine   }Di2015NewLine   elseDi2015NewLine   {Di2015NewLine      label1.Text = message.Body;Di2015NewLine   }Di2015NewLine}Di2015NewLine
607724Di2015UniqueSeparatorhashtable = BL.GetSubordinateEmployees(supervisor);Di2015NewLine
607745Di2015UniqueSeparatorByteBuffer
607745Di2015UniqueSeparatorbyte[]
607745Di2015UniqueSeparatorByteBuffer.wrap
607745Di2015UniqueSeparatorByteBuffer.allocateDirect
607745Di2015UniqueSeparatorbyte[]
607745Di2015UniqueSeparatorByteBuffer.array
607745Di2015UniqueSeparatorflip
607745Di2015UniqueSeparatorbyte
607764Di2015UniqueSeparatorpublic delegate void MethodInvoker();Di2015NewLineDi2015NewLinepublic Image ImagenDi2015NewLine{Di2015NewLine    get { get return imagen; }Di2015NewLine    set {Di2015NewLine        imagen = value;Di2015NewLine        if (this.InvokeRequired)Di2015NewLine            this.Invoke(new MethodInvoker(this.Invalidate));Di2015NewLine        elseDi2015NewLine            this.Invalidate();Di2015NewLine    }Di2015NewLine}Di2015NewLine
607904Di2015UniqueSeparatorWebClient
607904Di2015UniqueSeparator    WebClient client = new WebClient();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        string response =Di2015NewLine            client.DownloadString("http://www.example.com/tester.cgi");Di2015NewLineDi2015NewLine        // We at least got the file back from the serverDi2015NewLineDi2015NewLine        // You could optionally look at the contents of the fileDi2015NewLine        // for additional error indicators      Di2015NewLine        if (response.Contains("ERROR: Something"))Di2015NewLine        {Di2015NewLine            // HandleDi2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (WebException ex)Di2015NewLine    {Di2015NewLine        // We couldn't get the file.Di2015NewLine        // ... handle, depending on the exDi2015NewLine        //Di2015NewLine        // For example, by looking at ex.Status:Di2015NewLine        switch (ex.Status)Di2015NewLine        {Di2015NewLine            case WebExceptionStatus.NameResolutionFailure:Di2015NewLine                // ...Di2015NewLine            break;Di2015NewLine            // ...Di2015NewLine        }Di2015NewLine    }Di2015NewLine
607904Di2015UniqueSeparatorTimer
607904Di2015UniqueSeparatorTick
607921Di2015UniqueSeparator    #region IPropertyChangedDi2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    protected virtual void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        OnPropertyChanged(new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLineDi2015NewLine    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        if (null != PropertyChanged)Di2015NewLine        {Di2015NewLine            PropertyChanged(this, e);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine
608010Di2015UniqueSeparatornew MailAddress("xxxx@xxxx.domain","blab blalb", Encoding.Default)
608010Di2015UniqueSeparatorEncoding.Unicode
608010Di2015UniqueSeparatorvoid System.Net.BufferBuilder.Append(string,int,int);Di2015NewLine
608115Di2015UniqueSeparatorreturn new WebClient().DownloadString(urlName);Di2015NewLine
608153Di2015UniqueSeparatorusing Microsoft.Office.Interop.Word;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine// Create a new Microsoft Word application objectDi2015NewLineMicrosoft.Office.Interop.Word.Application word = new Microsoft.Office.Interop.Word.Application();Di2015NewLineDi2015NewLine// C# doesn't have optional arguments so we'll need a dummy valueDi2015NewLineobject oMissing = System.Reflection.Missing.Value;Di2015NewLineDi2015NewLine// Get list of Word files in specified directoryDi2015NewLineDirectoryInfo dirInfo = new DirectoryInfo(@"\\\\server\\folder");Di2015NewLineFileInfo[] wordFiles = dirInfo.GetFiles("*.doc");Di2015NewLineDi2015NewLineword.Visible = false;Di2015NewLineword.ScreenUpdating = false;Di2015NewLineDi2015NewLineforeach (FileInfo wordFile in wordFiles)Di2015NewLine{Di2015NewLine    // Cast as Object for word Open methodDi2015NewLine    Object filename = (Object)wordFile.FullName;Di2015NewLineDi2015NewLine    // Use the dummy value as a placeholder for optional argumentsDi2015NewLine    Document doc = word.Documents.Open(ref filename, ref oMissing,Di2015NewLine        ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing,Di2015NewLine        ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing,Di2015NewLine        ref oMissing, ref oMissing, ref oMissing, ref oMissing);Di2015NewLine    doc.Activate();Di2015NewLineDi2015NewLine    object outputFileName = wordFile.FullName.Replace(".doc", ".pdf");Di2015NewLine    object fileFormat = WdSaveFormat.wdFormatPDF;Di2015NewLineDi2015NewLine    // Save document into PDF FormatDi2015NewLine    doc.SaveAs(ref outputFileName,Di2015NewLine        ref fileFormat, ref oMissing, ref oMissing,Di2015NewLine        ref oMissing, ref oMissing, ref oMissing, ref oMissing,Di2015NewLine        ref oMissing, ref oMissing, ref oMissing, ref oMissing,Di2015NewLine        ref oMissing, ref oMissing, ref oMissing, ref oMissing);Di2015NewLineDi2015NewLine    // Close the Word document, but leave the Word application open.Di2015NewLine    // doc has to be cast to type _Document so that it will find theDi2015NewLine    // correct Close method.                Di2015NewLine    object saveChanges = WdSaveOptions.wdDoNotSaveChanges;Di2015NewLine    ((_Document)doc).Close(ref saveChanges, ref oMissing, ref oMissing);Di2015NewLine    doc = null;Di2015NewLine}Di2015NewLineDi2015NewLine// word has to be cast to type _Application so that it will findDi2015NewLine// the correct Quit method.Di2015NewLine((_Application)word).Quit(ref oMissing, ref oMissing, ref oMissing);Di2015NewLineword = null;Di2015NewLine
608181Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Xml.Serialization;Di2015NewLineDi2015NewLine[XmlRoot("user_list")]Di2015NewLinepublic class UserListDi2015NewLine{Di2015NewLine    public UserList() {Items = new List<User>();}Di2015NewLine    [XmlElement("user")]Di2015NewLine    public List<User> Items {get;set;}Di2015NewLine}Di2015NewLinepublic class UserDi2015NewLine{Di2015NewLine    [XmlElement("id")]Di2015NewLine    public Int32 Id { get; set; }Di2015NewLineDi2015NewLine    [XmlElement("name")]Di2015NewLine    public String Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        XmlSerializer ser= new XmlSerializer(typeof(UserList));Di2015NewLine        UserList list = new UserList();Di2015NewLine        list.Items.Add(new User { Id = 1, Name = "abc"});Di2015NewLine        list.Items.Add(new User { Id = 2, Name = "def"});Di2015NewLine        list.Items.Add(new User { Id = 3, Name = "ghi"});Di2015NewLine        ser.Serialize(Console.Out, list);Di2015NewLine    }Di2015NewLine}Di2015NewLine
608204Di2015UniqueSeparatorofficeApplication.AddIns.Unload(false);Di2015NewLine
608204Di2015UniqueSeparator        //startup without pluginsDi2015NewLine        System.Diagnostics.Process.Start(Di2015NewLine            @"Winword.exe",Di2015NewLine            @"/a");Di2015NewLine        //give a time for startupDi2015NewLine        Thread.Sleep(2000);Di2015NewLine        //attach to officeDi2015NewLine        Application officeApplication = (Application)Marshal.GetActiveObject("Word.Application");Di2015NewLine
608321Di2015UniqueSeparator            HtmlNodeCollection nodes = doc.DocumentNode.SelectNodes("YOUR_TAG_SELECTOR");Di2015NewLineDi2015NewLine            if (nodes != null)Di2015NewLine            {Di2015NewLine                foreach (HtmlNode node in nodes)Di2015NewLine                {Di2015NewLine                    if (node.InnerHtml.ToLower().Trim() == "YOUR_MATCH")Di2015NewLine                    {Di2015NewLine                        //success routineDi2015NewLine                        break;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine
608437Di2015UniqueSeparatorpublic struct Point3D {Di2015NewLineDi2015NewLine   public float X { get; private set; }Di2015NewLine   public float Y { get; private set; }Di2015NewLine   public float Z { get; private set; }Di2015NewLineDi2015NewLine   public Point3D(float x, float y, float z) {Di2015NewLine      X = x;Di2015NewLine      Y = y;Di2015NewLine      Z = z;Di2015NewLine   }Di2015NewLineDi2015NewLine   public Point3D Invert() {Di2015NewLine      return new Point3D(-X, -Y, -Z);Di2015NewLine   }Di2015NewLineDi2015NewLine}Di2015NewLine
608470Di2015UniqueSeparator\\\\
608470Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Web;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string url = "DOMAIN%5CUSERNAME";Di2015NewLine        string decoded = HttpUtility.UrlDecode(url);Di2015NewLineDi2015NewLine        Console.WriteLine(decoded);Di2015NewLine    }Di2015NewLine}Di2015NewLine
608470Di2015UniqueSeparatorDOMAIN\\USERNAMEDi2015NewLine
608559Di2015UniqueSeparatorFoo foo = new Foo(); // a mutable structDi2015NewLinefoo.Bar = 27;Di2015NewLineFoo foo2 = foo;Di2015NewLinefoo2.Bar = 55;Di2015NewLine
608617Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine   IMyService _myService; Di2015NewLineDi2015NewLine   public MyClass()Di2015NewLine   {Di2015NewLine      _myService = new SomeConcreteService();    Di2015NewLine   }Di2015NewLine}Di2015NewLine
608617Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine   IMyService _myService; Di2015NewLineDi2015NewLine   public MyClass(IMyService myService)Di2015NewLine   {Di2015NewLine      _myService = myService;    Di2015NewLine   }Di2015NewLine}Di2015NewLine
608617Di2015UniqueSeparatorStructureMapConfiguration.ForRequestedType<MyClass>().TheDefaultIsConcreteType<MyClass>();Di2015NewLineStructureMapConfiguration.ForRequestedType<IMyService>().TheDefaultIsConcreteType<SomeConcreteService>();Di2015NewLine
608617Di2015UniqueSeparatorvar myClass = ObjectFactory.GetInstance<MyClass>();Di2015NewLine
608738Di2015UniqueSeparatorDateTime.TryParse();Di2015NewLine
608889Di2015UniqueSeparatorSub BookmarksInTables()Di2015NewLine    Dim aTable As TableDi2015NewLine    Dim aBookmark As BookmarkDi2015NewLineDi2015NewLine    For Each aBookmark In ActiveDocument.BookmarksDi2015NewLine        For Each aTable In ActiveDocument.TablesDi2015NewLine            'If start of book mark is inside the table range orDi2015NewLine            ' the end of a book mark is inside the table range then YES!Di2015NewLine            If (aBookmark.Range.Start >= aTable.Range.Start _Di2015NewLine                And aBookmark.Range.Start <= aTable.Range.End) _Di2015NewLine            Or (aBookmark.Range.End >= aTable.Range.Start _Di2015NewLine                And aBookmark.Range.End <= aTable.Range.End) ThenDi2015NewLine                MsgBox aBookmark.Name + " is inside a table"Di2015NewLine            ElseDi2015NewLine                MsgBox aBookmark.Name + " is not inside a table"Di2015NewLine            End IfDi2015NewLine        NextDi2015NewLine    NextDi2015NewLineEnd SubDi2015NewLine
608927Di2015UniqueSeparatorEquals()
608934Di2015UniqueSeparator@"(?is)<center>\\s*This\\s+page\\s+has\\s+been\\s+visited.*?</center>"Di2015NewLine
609174Di2015UniqueSeparatorpartial class Mammal {Di2015NewLine    public void ExtraMethod() {...}Di2015NewLine}Di2015NewLine
609174Di2015UniqueSeparatorpartial
609174Di2015UniqueSeparatorpartial
609278Di2015UniqueSeparatorvar resultSets = (from k in listDi2015NewLine                  select (from b in db.SitesDi2015NewLine                          where b.site_title.Contains(k)Di2015NewLine                          select b.ToBusiness()).ToList<Business>()).ToList();Di2015NewLineDi2015NewLine List<Business> all = new List<Business>();Di2015NewLineDi2015NewLine for (int i = 0; i < resultSets.Count; ++i)Di2015NewLine {Di2015NewLine     all.AddRange(resultSets[i]);Di2015NewLine }Di2015NewLine
609331Di2015UniqueSeparatorDataSource
609331Di2015UniqueSeparatorDataBind()
609331Di2015UniqueSeparatorDataKey
609331Di2015UniqueSeparatorDataKeyNames
609331Di2015UniqueSeparatorDataKey
609529Di2015UniqueSeparator/// <summary>Di2015NewLine/// Returns an Int32 with a random value across the entire range ofDi2015NewLine/// possible values.Di2015NewLine/// </summary>Di2015NewLinepublic static int NextInt32(this Random rng)Di2015NewLine{Di2015NewLine     uncheckedDi2015NewLine     {Di2015NewLine         int firstBits = rng.Next(0, 1 << 4) << 28;Di2015NewLine         int lastBits = rng.Next(0, 1 << 28);Di2015NewLine         return firstBits | lastBits;Di2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static decimal NextDecimal(this Random rng)Di2015NewLine{Di2015NewLine     byte scale = (byte) rng.Next(29);Di2015NewLine     bool sign = rng.Next(2) == 1;Di2015NewLine     return new decimal(rng.NextInt32(), Di2015NewLine                        rng.NextInt32(),Di2015NewLine                        rng.NextInt32(),Di2015NewLine                        sign,Di2015NewLine                        scale);Di2015NewLine}Di2015NewLine
609544Di2015UniqueSeparatorvar log = EventLog.GetEventLogs().Where(x => x == "Application").First();Di2015NewLineforeach (var entry in log.Entries) {Di2015NewLine  // Do something with the entryDi2015NewLine}Di2015NewLine
609618Di2015UniqueSeparator'[]'
609618Di2015UniqueSeparator using System;  Di2015NewLine using System.Collections;  Di2015NewLineDi2015NewLine public class DayPlanner  Di2015NewLine {  Di2015NewLine     // We store our indexer values in here   Di2015NewLine     Hashtable _meetings = new System.Collections.Hashtable();  Di2015NewLineDi2015NewLine     // First indexer  Di2015NewLine     public string this[DateTime date] {  Di2015NewLine         get {  Di2015NewLine             return _meetings[date] as string;  Di2015NewLine         }  Di2015NewLine         set {  Di2015NewLine             _meetings[date] = value;  Di2015NewLine         }  Di2015NewLine     }  Di2015NewLineDi2015NewLine     // Second indexer, overloads the first  Di2015NewLine     public string this[string datestr] {  Di2015NewLine         get {  Di2015NewLine             return this[DateTime.Parse(datestr)] as string;   Di2015NewLine         }  Di2015NewLine         set {  Di2015NewLine             this[DateTime.Parse(datestr)] = value;  Di2015NewLine         }  Di2015NewLine     }  Di2015NewLine }Di2015NewLine
609618Di2015UniqueSeparator  DayPlanner myDay = new DayPlanner();  Di2015NewLine  myDay[DateTime.Parse("2006/02/03")] = "Lunch";  Di2015NewLine  ...  Di2015NewLine  string whatNow = myDay["2006/06/26"];Di2015NewLine
609627Di2015UniqueSeparator[Fact]Di2015NewLinepublic void Then_the_object_should_be_accessible_in_csharp()Di2015NewLine{                       Di2015NewLine    var engine = Ruby.CreateEngine();Di2015NewLineDi2015NewLine    engine.Runtime.LoadAssembly(typeof (BuildMetaData).Assembly);Di2015NewLineDi2015NewLine    engine.ExecuteFile(buildFile);Di2015NewLineDi2015NewLine    var klass = engine.Runtime.Globals.GetVariable("MetaDataFactory");Di2015NewLineDi2015NewLine    var instance = (RubyObject)engine.Operations.CreateInstance(klass);Di2015NewLineDi2015NewLine    //You must have shadow-copying turned off for the next line to run and for the test to pass.Di2015NewLine    //E.g. in R# "ReSharper/Options/Unit Testing/Shadow-Copy Assemblies being tested" should be un-checked.Di2015NewLine    var metaData = (BuildMetaData)engine.Operations.InvokeMember(instance, "return_meta_data");Di2015NewLineDi2015NewLine    Assert.Equal(metaData.Description, "A description of sorts");Di2015NewLineDi2015NewLine    Assert.Equal(metaData.Dependencies.Count, 1);Di2015NewLine}Di2015NewLine
609635Di2015UniqueSeparatorIEnumerable<object>
609635Di2015UniqueSeparatorIEnumerable<string>
609635Di2015UniqueSeparatorCast<T>()
609727Di2015UniqueSeparatorint count = 0;Di2015NewLinefor (int i = 0; i < s.Length; i++)Di2015NewLine{Di2015NewLine    if (char.IsUpper(s[i])) count++;Di2015NewLine}Di2015NewLine
609727Di2015UniqueSeparatorint count = s.Count(c => char.IsUpper(c));Di2015NewLine
609842Di2015UniqueSeparatorcase IncrementMethod.YearAndDay:Di2015NewLine{Di2015NewLine    DateTime dDate = DateTime.Now;Di2015NewLine    long buildNumber = dDate.Year % 2000 * 1000;Di2015NewLine    buildNumber += dDate.DayOfYear;Di2015NewLine    string newVersionNumber = buildNumber.ToString();Di2015NewLine    Log.LogMessage(MessageImportance.Low, logMessage, newVersionNumber);Di2015NewLine    return newVersionNumber;Di2015NewLine}Di2015NewLine
609859Di2015UniqueSeparatorvar a = new MyStruct[1000];Di2015NewLine
609928Di2015UniqueSeparatorusing (var txn = new TransactionScope(Di2015NewLine    TransactionScopeOption.Required, Di2015NewLine    new TransactionOptionsDi2015NewLine    {Di2015NewLine        IsolationLevel = IsolationLevel.ReadUncommittedDi2015NewLine    }Di2015NewLine))Di2015NewLine{Di2015NewLine    // Your LINQ to SQL query goes hereDi2015NewLine}Di2015NewLine
610057Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    static extern bool CreateCaret(IntPtr hWnd, IntPtr hBitmap, int nWidth, int nHeight);Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    static extern bool ShowCaret(IntPtr hWnd);Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Form1_Shown(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        CreateCaret(textBox1.Handle, IntPtr.Zero, 10, textBox1.Height);Di2015NewLine        ShowCaret(textBox1.Handle);Di2015NewLine    }Di2015NewLine}Di2015NewLine
610090Di2015UniqueSeparatorGetHashCode
610105Di2015UniqueSeparatorint reti = CryptoApi.CryptGetUserKey(_hprovider, keytype, ref userKey);Di2015NewLineDi2015NewLineif (reti)Di2015NewLine{Di2015NewLine    reti =CryptoApi.CryptGetKeyParam(_userKey, KP_CERTIFICATE, ref  pbdata, ref pwddatalen, 0);Di2015NewLine}Di2015NewLineDi2015NewLineif (reti || pwddatalen>0)Di2015NewLine{Di2015NewLine    byte[] data = new byte[pwddatalen];Di2015NewLine    ret  = CryptoApi.CryptGetKeyParam(_userKey, KP_CERTIFICATE, data, ref pwddatalen, 0);Di2015NewLine    if (ret) Di2015NewLine    {Di2015NewLine        X509Certificate2 c = new X509Certificate2(data);Di2015NewLine        X509Store store = new X509Store(StoreName.My, StoreLocation.CurrentUser);Di2015NewLine        store.Open(OpenFlags.ReadOnly);Di2015NewLine        X509Certificate2Collection col = store.Certificates.Find(X509FindType.FindByThumbprint, c.Thumbprint, validonly);Di2015NewLine        store.Close();Di2015NewLineDi2015NewLine        if (col.Count != 1) Di2015NewLine        {Di2015NewLine            //not found in store - CSP didn't copy itDi2015NewLine            c.PrivateKey = PrivateKey(keytype);Di2015NewLine            return c;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return col[0];Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprivate RSACryptoServiceProvider PrivateKey (KeyType keytype)Di2015NewLine{Di2015NewLine    CspParameters csparms = new CspParameters();Di2015NewLine    csparms.KeyContainerName = _containerName;Di2015NewLine    csparms.ProviderName = _provider;Di2015NewLine    csparms.ProviderType = 1;Di2015NewLine    csparms.Flags = CspProviderFlags.UseMachineKeyStore | CspProviderFlags.UseExistingKey;Di2015NewLine    csparms.KeyNumber = (int)keytype;Di2015NewLineDi2015NewLine    return new RSACryptoServiceProvider(csparms);Di2015NewLine}Di2015NewLine
610198Di2015UniqueSeparatorprivate void PrintHelpPage()Di2015NewLine{Di2015NewLine    // Create a WebBrowser instance. Di2015NewLine    WebBrowser webBrowserForPrinting = new WebBrowser();Di2015NewLineDi2015NewLine    // Add an event handler that prints the document after it loads.Di2015NewLine    webBrowserForPrinting.DocumentCompleted +=Di2015NewLine        new WebBrowserDocumentCompletedEventHandler(PrintDocument);Di2015NewLineDi2015NewLine    // Set the Url property to load the document.Di2015NewLine    webBrowserForPrinting.Url = new Uri(@"\\\\myshare\\help.html");Di2015NewLine}Di2015NewLineDi2015NewLineprivate void PrintDocument(object sender,Di2015NewLine    WebBrowserDocumentCompletedEventArgs e)Di2015NewLine{Di2015NewLine    // Print the document now that it is fully loaded.Di2015NewLine    ((WebBrowser)sender).Print();Di2015NewLineDi2015NewLine    // Dispose the WebBrowser now that the task is complete. Di2015NewLine    ((WebBrowser)sender).Dispose();Di2015NewLine}Di2015NewLine
610261Di2015UniqueSeparatorUsing
610261Di2015UniqueSeparatordynamic
610265Di2015UniqueSeparatornull
610265Di2015UniqueSeparatorInvalidCastException
610265Di2015UniqueSeparatoras
610265Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine    \Object o = null;Di2015NewLineDi2015NewLine    \String s0 = (String)o;Di2015NewLine    \String s1 = o as String;Di2015NewLine    }Di2015NewLine}Di2015NewLine
610265Di2015UniqueSeparatorcastclass
610265Di2015UniqueSeparatorisinst
610314Di2015UniqueSeparator// Create a resource manager to retrieve resources.Di2015NewLineResourceManager rm = new ResourceManager("items", Di2015NewLine        Assembly.GetExecutingAssembly());Di2015NewLineDi2015NewLine// Retrieve the value of the string resource named "hello".Di2015NewLine// The resource manager will retrieve the value of the  Di2015NewLine// localized resource using the caller's current culture setting.Di2015NewLineString hello = rm.GetString("hello");Di2015NewLinelblHello.Text = hello;Di2015NewLine
610324Di2015UniqueSeparatorclass SecondFormDi2015NewLine{Di2015NewLine  private FirstForm firstForm;Di2015NewLineDi2015NewLine  public SecondForm()Di2015NewLine  {Di2015NewLine    InitializeComponent();Di2015NewLine    // this means unregistering on form closing, uncomment if is necessary (anonymous delegate)Di2015NewLine    //this.Form_Closing += delegate { firstForm.SomeEvent -= SecondForm_SomeMethod; };Di2015NewLine  }Di2015NewLineDi2015NewLine  public SecondaryForm(FirstForm form) : this()Di2015NewLine  {Di2015NewLine    this.firstForm = form; Di2015NewLine    firstForm.Timer.Tick += new EventHandler(Timer_Tick);Di2015NewLine  }Di2015NewLineDi2015NewLine  // make it public in case of external event handlers registrationDi2015NewLine  private void Timer_Tick(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine    // now you can access firstForm or it's timer hereDi2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineclass FirstFormDi2015NewLine{Di2015NewLine  public Timer TimerDi2015NewLine  {Di2015NewLine    getDi2015NewLine    {Di2015NewLine      return this.the_timerlDi2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  public FirstForm()Di2015NewLine  {Di2015NewLine    InitializeComponent();Di2015NewLine  }Di2015NewLineDi2015NewLine  private void Button_Click(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine    new SecondForm(this).ShowDialog(); // in case of internal event handlers registration (in constructor)Di2015NewLine    // orDi2015NewLine    SecondForm secondForm = new SecondForm(this);Di2015NewLine    the_timer.Tick += new EventHandler(secondForm.Timer_tick); // that method must be publicDi2015NewLine  }Di2015NewLine
610762Di2015UniqueSeparatorsinh(x) = (e^x - e^-x) / 2Di2015NewLine
610767Di2015UniqueSeparatorGuid
610837Di2015UniqueSeparatorbeforefieldinit
610837Di2015UniqueSeparatorbeforefieldinit
610837Di2015UniqueSeparatorpublic static void DoSomething(bool which)Di2015NewLine{Di2015NewLine    if (which)Di2015NewLine    {Di2015NewLine        FirstType.Foo();Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        SecondType.Bar();Di2015NewLine    }Di2015NewLine}Di2015NewLine
610837Di2015UniqueSeparatorbeforefieldinit
610837Di2015UniqueSeparatorbeforefieldinit
610887Di2015UniqueSeparatornull
610887Di2015UniqueSeparatorNullable<T>
610887Di2015UniqueSeparatornew()
611031Di2015UniqueSeparatorstatic class FormUtilDi2015NewLine{Di2015NewLine    static public void showForm(Form sender, Control reciever)Di2015NewLine    {Di2015NewLine        sender.ControlBox = false;Di2015NewLine        sender.FormBorderStyle = FormBorderStyle.None;Di2015NewLine        sender.ShowInTaskbar = false;Di2015NewLine        sender.TopLevel = false;Di2015NewLine        sender.Visible = true;Di2015NewLine        sender.Dock = DockStyle.Fill;Di2015NewLineDi2015NewLine        reciever.Controls.Clear(); //clear panel firstDi2015NewLine        reciever.Controls.Add(sender);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
611031Di2015UniqueSeparatorFormUtil.showForm(new SomeForm(), this.splitContainer1.Panel1);Di2015NewLine
611089Di2015UniqueSeparatorICloneable.Clone()
611089Di2015UniqueSeparatorClone()
611089Di2015UniqueSeparatornew(); // now copy properties
611104Di2015UniqueSeparatorvar itemColl = from p in db.ADi2015NewLine               where p.CardID == "some GUID"Di2015NewLine               select new {Di2015NewLine                   p.CardID,Di2015NewLine                   p.secondCol,Di2015NewLine                   p.ThirdCol,Di2015NewLine                   Items = db.B.Where(b=>b.CardID==p.CardID)Di2015NewLine                      //.Select(b=>b.ItemNo) [see comments]Di2015NewLine               }Di2015NewLine
611127Di2015UniqueSeparatorProcess
611127Di2015UniqueSeparatorExited
611127Di2015UniqueSeparator        ProcessStartInfo startInfo = null;Di2015NewLine        Process process = Process.Start(startInfo);Di2015NewLine        process.EnableRaisingEvents = true;Di2015NewLine        process.Exited += delegate {/* clean up*/};Di2015NewLine
611127Di2015UniqueSeparatorif(process.WaitForExit(timeout)) {Di2015NewLine    // user exitedDi2015NewLine} else {Di2015NewLine    // timeout (perhaps process.Kill();)Di2015NewLine}Di2015NewLine
611127Di2015UniqueSeparator        ThreadPool.QueueUserWorkItem(delegate {Di2015NewLine            Process process = Process.Start(startInfo);Di2015NewLine            if(process.WaitForExit(timeout)) {Di2015NewLine                // user exitedDi2015NewLine            } else {Di2015NewLine                // timeoutDi2015NewLine            }Di2015NewLine        });Di2015NewLine
611229Di2015UniqueSeparatorout
611229Di2015UniqueSeparatorpublic void foo(int arg1, out int arg2) {Di2015NewLine    arg2 = arg1;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void foo2() {Di2015NewLine    int aOutput;Di2015NewLine    foo(1, out aOutput);Di2015NewLine    Console.WriteLine(aOutput);Di2015NewLine}Di2015NewLine
611229Di2015UniqueSeparatorfoo2
611229Di2015UniqueSeparator1
611315Di2015UniqueSeparator__doPostBack
611453Di2015UniqueSeparatorBeginWaitForConnection
611453Di2015UniqueSeparatorEndWaitForConnection
611463Di2015UniqueSeparator<input type="button" value="<span>Search</span>" />
611463Di2015UniqueSeparatorvalue="<span>Search</span>" />
611463Di2015UniqueSeparatorvalue
611463Di2015UniqueSeparator<button><span>Search</span></button>
611463Di2015UniqueSeparatorbutton
611508Di2015UniqueSeparatorvar lineSelected = this.LineSelected;Di2015NewLineDi2015NewLineif (lineSelected != null)Di2015NewLine{Di2015NewLine    lineSelected(EventArgs.Empty);Di2015NewLine}Di2015NewLine
611564Di2015UniqueSeparatordouble d = 0.00034101243963859839;Di2015NewLinestring s = d.ToString("R");Di2015NewLine//...Di2015NewLinedouble d2 = double.Parse(s);Di2015NewLineif(d == d2)Di2015NewLine{Di2015NewLine  //-- SuccessDi2015NewLine}Di2015NewLine
611564Di2015UniqueSeparatorR
611564Di2015UniqueSeparatordecimal
611919Di2015UniqueSeparatorpublic static bool operator ==(BaseEntity a, BaseEntity b)Di2015NewLine{Di2015NewLine    return Object.Equals(a, b);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static bool operator !=(BaseEntity a, BaseEntity b)Di2015NewLine{Di2015NewLine    return !Object.Equals(a, b);Di2015NewLine}Di2015NewLine
611970Di2015UniqueSeparatorclass Pair<T1, T2>Di2015NewLine{Di2015NewLine     T1 t1;Di2015NewLine     T2 t2;Di2015NewLine}Di2015NewLineDi2015NewLineList<Pair<AreaProperties, FieldProperties>> Save(){ ...}Di2015NewLine
611970Di2015UniqueSeparatorList<KeyValuePair<AreaProperties, FieldProperties>> Save(){ ... }Di2015NewLine
611984Di2015UniqueSeparator<httpModules>Di2015NewLine    <add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>Di2015NewLine</httpModules>Di2015NewLine
612067Di2015UniqueSeparatorStringBuilder
612067Di2015UniqueSeparatorpublic static string Trim(this string word, IEnumerable<char> selectedChars)Di2015NewLine{Di2015NewLine    // The best form for this will depend largely on the size of selectedCharsDi2015NewLine    // If you can change how you call the method, there are optimisations youDi2015NewLine    // could do hereDi2015NewLine    HashSet<char> charSet = new HashSet<char>(selectedChars);Di2015NewLineDi2015NewLine    // Give enough capacity for the whole word. Could be too much,Di2015NewLine    // but definitely won't be too littleDi2015NewLine    StringBuilder builder = new StringBuilder(word.Length);Di2015NewLineDi2015NewLine    foreach (char c in word)Di2015NewLine    {Di2015NewLine        if (!charSet.Contains(c))Di2015NewLine        {Di2015NewLine            builder.Append(c);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return builder.ToString();Di2015NewLine}Di2015NewLine
612067Di2015UniqueSeparator// Put this statically somewhereDi2015NewLineRegex unwantedChars = new Regex("[def]", RegexOptions.Compiled);Di2015NewLineDi2015NewLine// Then do this every time you need to use it:Di2015NewLineword = unwantedChars.Replace(word, "");Di2015NewLine
612116Di2015UniqueSeparator|
612116Di2015UniqueSeparatorenums
612116Di2015UniqueSeparator[Flags] Di2015NewLineenum FileAccess{Di2015NewLineNone = 0,                    // 00000000 Nothing is setDi2015NewLineRead = 1,                    // 00000001 The read bit (bit 0) is setDi2015NewLineWrite = 2,                   // 00000010 The write bit (bit 1) is setDi2015NewLineExecute = 4,                 // 00000100 The exec bit (bit 2) is setDi2015NewLine// ...Di2015NewLineReadWrite = Read | Write     // 00000011 Both read and write (bits 0 and 1) are setDi2015NewLine// badValue  = Read & Write  // 00000000 Nothing is set, doesn't make senseDi2015NewLineReadExecute = Read | Execute // 00000101 Both read and exec (bits 0 and 2) are setDi2015NewLine}Di2015NewLine// Note that the non-combined values are powers of two, \\Di2015NewLine// meaning each sets only a single bitDi2015NewLineDi2015NewLine// ...Di2015NewLineDi2015NewLine// Test to see if access includes Read privileges:Di2015NewLineif((access & FileAccess.Read) == FileAccess.Read)Di2015NewLine
612116Di2015UniqueSeparatorenum
612116Di2015UniqueSeparatorRead
612116Di2015UniqueSeparatorRead
612116Di2015UniqueSeparatorReadWrite
612116Di2015UniqueSeparatorWrite
612116Di2015UniqueSeparator// if access is FileAccess.ReadDi2015NewLine        access & FileAccess.Read == FileAccess.ReadDi2015NewLine//    00000001 &        00000001 => 00000001Di2015NewLineDi2015NewLine// if access is FileAccess.ReadWriteDi2015NewLine        access & FileAccess.Read == FileAccess.ReadDi2015NewLine//    00000011 &        00000001 => 00000001Di2015NewLineDi2015NewLine// uf access is FileAccess.WriteDi2015NewLine        access & FileAccess.Read != FileAccess.ReadDi2015NewLine//    00000010 &        00000001 => 00000000Di2015NewLine
612116Di2015UniqueSeparator||
612116Di2015UniqueSeparator^
612116Di2015UniqueSeparator     A   B | A || B Di2015NewLine     ------|-------Di2015NewLineOR   0   0 |    0Di2015NewLine     0   1 |    1 Di2015NewLine     1   0 |    1Di2015NewLine     1   1 |    1 (result is true if any are true)Di2015NewLineDi2015NewLine     A   B | A ^ B Di2015NewLine     ------|-------Di2015NewLineXOR  0   0 |    0Di2015NewLine     0   1 |    1 Di2015NewLine     1   0 |    1Di2015NewLine     1   1 |    0  (if both are true, result is false)Di2015NewLine
612142Di2015UniqueSeparatorif (!this.inAttribute || (this.quoteChar != ch))Di2015NewLine   this.textWriter.Write('\\'');Di2015NewLineelseDi2015NewLine   this.WriteEntityRefImpl("apos");Di2015NewLine
612158Di2015UniqueSeparatorvar query = from p in objDBContext.Projects whereDi2015NewLine    p.PROVIDER_ID == cwForm.productForm Di2015NewLine    && objDBContext.ISDATE(p.Field1)Di2015NewLine    && objDBContext.FullTextSearch(searchString)Di2015NewLine        //assuming FullTextSearch returns booleanDi2015NewLine    select pDi2015NewLine
612158Di2015UniqueSeparatorobjDBContext.FullTextSearch(searchString).Contains(p)
612199Di2015UniqueSeparatorunmanaged.dll
612199Di2015UniqueSeparatorDllMain
612222Di2015UniqueSeparator// Create the DeleteCommand.Di2015NewLinecommand = new SqlCommand(Di2015NewLine    "DELETE FROM Customers WHERE CustomerID = @CustomerID", connection);Di2015NewLineDi2015NewLine// Add the parameters for the DeleteCommand.Di2015NewLineparameter = command.Parameters.Add(Di2015NewLine      "@CustomerID", SqlDbType.NChar, 5, "CustomerID");Di2015NewLineparameter.SourceVersion = DataRowVersion.Original;Di2015NewLineDi2015NewLineadapter.DeleteCommand = command;Di2015NewLine
612243Di2015UniqueSeparatorWebClient request = new WebClient();Di2015NewLinerequest.Credentials = Di2015NewLine    new NetworkCredential("anonymous", "janeDoe@contoso.com");Di2015NewLinetry Di2015NewLine{Di2015NewLine    // serverUri here uses the FTP scheme ("ftp://").Di2015NewLine    byte[] newFileData = request.DownloadData(serverUri.ToString());Di2015NewLine    string fileString = Encoding.UTF8.GetString(newFileData);Di2015NewLine}Di2015NewLinecatch (WebException ex)Di2015NewLine{Di2015NewLine    // Detect and handle login failures etc hereDi2015NewLine}Di2015NewLine
612243Di2015UniqueSeparatorFtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);Di2015NewLinerequest.Method = WebRequestMethods.Ftp.DeleteFile;Di2015NewLineFtpWebResponse response = (FtpWebResponse)request.GetResponse();Di2015NewLineConsole.WriteLine("Delete status: {0}", response.StatusDescription);  Di2015NewLineresponse.Close();Di2015NewLine
612267Di2015UniqueSeparatorint threads = 10;Di2015NewLineDictionary<string, string> results = urls.AsParallel(threads)Di2015NewLine    .ToDictionary(url => url, Di2015NewLine                  url => {Di2015NewLine                      Console.WriteLine("On thread {0}",Di2015NewLine                                        Thread.CurrentThread.ManagedThreadId);Di2015NewLine                      return GetPage(url);Di2015NewLine                  });Di2015NewLine
612267Di2015UniqueSeparatorToDictionary()
612267Di2015UniqueSeparatorSelect(url => GetPage(url))
612267Di2015UniqueSeparatorToDictionary
612267Di2015UniqueSeparatorToDictionary
612267Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Threading;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Linq.Parallel;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var urls = Enumerable.Range(0, 100).Select(i => i.ToString());Di2015NewLineDi2015NewLine        int threads = 10;Di2015NewLine        Dictionary<string, string> results = urls.AsParallel(threads)Di2015NewLine            .Select(url => new { Url=url, Page=GetPage(url) })Di2015NewLine            .ToDictionary(x => x.Url, x => x.Page);Di2015NewLine    }Di2015NewLineDi2015NewLine    static string GetPage(string x)Di2015NewLine    {Di2015NewLine        Console.WriteLine("On thread {0} getting {1}",Di2015NewLine                          Thread.CurrentThread.ManagedThreadId, x);Di2015NewLine        Thread.Sleep(2000);Di2015NewLine        return x;Di2015NewLine    }Di2015NewLine}Di2015NewLine
612267Di2015UniqueSeparatorGetPage
612303Di2015UniqueSeparatorlist.AddRange(buffer.Take(count));Di2015NewLine
612500Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void Test_Configuration_Used_Correctly()Di2015NewLine{Di2015NewLine    ConfigurationManager.AppSettings["MyConfigName"] = "MyConfigValue";Di2015NewLine    MyClass testObject = new MyClass();Di2015NewLine    testObject.ConfigurationHandler();Di2015NewLine    Assert.AreEqual(testObject.ConfigurationItemOrDefault, "MyConfigValue");Di2015NewLine}Di2015NewLineDi2015NewLine[TestMethod]Di2015NewLinepublic void Test_Configuration_Defaults_Used_Correctly()Di2015NewLine{Di2015NewLine    // you don't need to set AppSettings for a non-existent value...Di2015NewLine    // ConfigurationManager.AppSettings["MyConfigName"] = "MyConfigValue";Di2015NewLineDi2015NewLine    MyClass testObject = new MyClass();Di2015NewLine    testObject.ConfigurationHandler();Di2015NewLine    Assert.AreEqual(testObject.ConfigurationItemOrDefault, "MyConfigDefaultValue");Di2015NewLine}Di2015NewLine
612608Di2015UniqueSeparatorIEnumerable<T> OfType<T>(this IEnumerable enumerable);Di2015NewLine
612608Di2015UniqueSeparatorList<object> objects = //...Di2015NewLineDi2015NewLineforeach(string str in objects.OfType<string>())Di2015NewLine{Di2015NewLine    //...Di2015NewLine}Di2015NewLine
612700Di2015UniqueSeparatorvar list = new[] { o, o1 }.ToList();Di2015NewLine
612700Di2015UniqueSeparatorpublic static List<T> CreateList<T>(params T[] elements)Di2015NewLine{Di2015NewLine     return new List<T>(elements);Di2015NewLine}Di2015NewLineDi2015NewLinevar list = CreateList(o, o1);Di2015NewLine
612772Di2015UniqueSeparatorInternalsVisibleTo
612772Di2015UniqueSeparatorISerializable
612996Di2015UniqueSeparatorDictionary<Type, List<object>> numTypes = new Dictionary<Type, List<object>>();Di2015NewLineDi2015NewLineforeach(KeyValuePair<string, object> pair in _Table){Di2015NewLine    Type type = object.GetType();Di2015NewLine    if (!numTypes.ContainsKey(type)){Di2015NewLine    \numTypes[type] = new List<object>();Di2015NewLine     }Di2015NewLineDi2015NewLine    \numTypes[type].Add(object);Di2015NewLine}Di2015NewLine
613075Di2015UniqueSeparatorWITH RECOMPILE
613110Di2015UniqueSeparatorDateTime dt1 = DateTime.Now;Di2015NewLineDateTime dt2 = DateTime.Now.AddMinutes(59); // or 1 or 61 for test values;Di2015NewLineDi2015NewLine// if the dates are in the same hour (12:10 == 12:50, 1:58 != 2:02)Di2015NewLineif(dt1.Hour == dt2.Hour) // resultDi2015NewLine
613110Di2015UniqueSeparator// if the dates are within one hour of each other (1:58 == 2:02, 3:30 != 4:45)Di2015NewLineif((dt1 - dt2).Duration() < TimeSpan.FromHours(1)) // resultDi2015NewLine
613201Di2015UniqueSeparator*.fark.comDi2015NewLinewww.cnn.comDi2015NewLine
613201Di2015UniqueSeparatorm -> o -> c -> . -> k -> r -> a -> f -> . -> *Di2015NewLine                \\Di2015NewLine                 -> n -> n -> c -> . -> w -> w -> wDi2015NewLine
613201Di2015UniqueSeparator"*"
613201Di2015UniqueSeparator"*"
613201Di2015UniqueSeparator"*"
613265Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function trimItemName(input) {Di2015NewLine        //return trimmed stringDi2015NewLine    }Di2015NewLine</script>Di2015NewLineDi2015NewLine<span>Di2015NewLine    <script type="text/javascript">Di2015NewLine        document.write(Di2015NewLine            trimItemName('<%# DataBinder.Eval(Container.DataItem, "Name") %>')Di2015NewLine        );Di2015NewLine    </script>Di2015NewLine </span>Di2015NewLine
613358Di2015UniqueSeparator protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!Page.IsPostBack)Di2015NewLine        {Di2015NewLine            //ListView1.DataSource = ...Di2015NewLine            ListView1.DataBind();Di2015NewLineDi2015NewLine            //if you know its empty empty data template is the first parent controlDi2015NewLine            // aka Controls[0]Di2015NewLine            Control c = ListView1.Controls[0].FindControl("Literal1");Di2015NewLine            if (c != null)Di2015NewLine            {Di2015NewLine                //this will atleast tell you  if the control exists or notDi2015NewLine            }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
613775Di2015UniqueSeparatorDateTime buildDate = Di2015NewLine   new FileInfo(Assembly.GetExecutingAssembly().Location).LastWriteTime;Di2015NewLine
613787Di2015UniqueSeparator<appSettings configSource="appsettings.config" />Di2015NewLine
613787Di2015UniqueSeparator<appSettings file="config.config">Di2015NewLine
613853Di2015UniqueSeparatorpublic enum ColourDi2015NewLine{Di2015NewLine    White,Di2015NewLine    Red,Di2015NewLine    BlueDi2015NewLine}Di2015NewLine
613853Di2015UniqueSeparator[FlagsAttribute]Di2015NewLineenum DistributedChannelDi2015NewLine{Di2015NewLine  None = 0,Di2015NewLine  Transacted = 1,Di2015NewLine  Queued = 2,Di2015NewLine  Encrypted = 4,Di2015NewLine  Persisted = 16,Di2015NewLine  FaultTolerant = Transacted | Queued | PersistedDi2015NewLine}Di2015NewLine
614148Di2015UniqueSeparatorpublic abstract class BaseClassDi2015NewLine{Di2015NewLine    protected virtual void DeletePersonCore(Guid id)Di2015NewLine    {Di2015NewLine        //shared codeDi2015NewLine    }Di2015NewLineDi2015NewLine    public void DeletePerson(Guid id)Di2015NewLine    {Di2015NewLine        //chain it to the coreDi2015NewLine        DeletePersonCore(id);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DerivedClass : BaseClassDi2015NewLine{Di2015NewLine    protected override void DeletePersonCore(Guid id)Di2015NewLine    {Di2015NewLine        //do some polymorphistic stuffDi2015NewLineDi2015NewLine        base.DeletePersonCore(id);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class UsageClassDi2015NewLine{Di2015NewLine    public void Delete()Di2015NewLine    {Di2015NewLine        DerivedClass dc = new DerivedClass();Di2015NewLineDi2015NewLine        dc.DeletePerson(Guid.NewGuid());Di2015NewLine    }Di2015NewLine}Di2015NewLine
614234Di2015UniqueSeparator    System.Globalization.CultureInfo cultureinfo = Di2015NewLine        new System.Globalization.CultureInfo("en-gb");Di2015NewLine    DateTime dt = DateTime.Parse("13/12/2009", cultureinfo);Di2015NewLine
614350Di2015UniqueSeparatorusing System.Net.NetworkInformation;Di2015NewLinevar ping = new Ping();Di2015NewLinevar reply = ping.Send("google.com", 60 * 1000); // 1 minute time out (in ms)Di2015NewLine// or...Di2015NewLinereply = ping.Send(new IPAddress(new byte[]{127,0,0,1}), 3000);Di2015NewLine
614379Di2015UniqueSeparatorSaved
614379Di2015UniqueSeparatortrue
614379Di2015UniqueSeparatorActiveDocument.AttachedTemplate.Saved = TrueDi2015NewLine
614525Di2015UniqueSeparator(?:[^\\"]|(?:(?:.*?\\"){2})*?)(?: |^)(?<kw>for|while|if)[ (]Di2015NewLine
614525Di2015UniqueSeparatorvar input = "while t < 10 loop\\n s => 'this is if stmt'; for u in 8..12 loop \\n}"; Di2015NewLinevar pattern = "(?:[^\\"]|(?:(?:.*?\\"){2})*?)(?: |^)(?<kw>for|while|if)[ (]";Di2015NewLinevar matches = Regex.Matches(input, pattern);Di2015NewLinevar firstKeyword = matches[0].Groups["kw"].Value;Di2015NewLine// The following line is a one-line solution for .NET 3.5/C# 3.0 to get an array of all found keywords.Di2015NewLinevar keywords = matches.Cast<Match>().Select(match => match.Groups["kw"].Value).ToArray();Di2015NewLine
614545Di2015UniqueSeparator  Result res;Di2015NewLine  using (MyForm form = new MyForm())Di2015NewLine  {Di2015NewLine      if(form.ShowDialog()== DialogResult.OK) Di2015NewLine      {Di2015NewLine         // In Myform, after the data collection is done, you can set  DialogResult=DialogResult.Ok and close form using form.Close(); Di2015NewLine         res = form.Result; // expose forms data as result.                              Di2015NewLine      }Di2015NewLine  }Di2015NewLine  UserResult(res);Di2015NewLine
614661Di2015UniqueSeparatorprotected override Control FindControl(string id, int pathOffset)Di2015NewLine{Di2015NewLine    return this;Di2015NewLine}Di2015NewLine
614661Di2015UniqueSeparatorprotected virtual Control FindControl(string id, int pathOffset)Di2015NewLine{Di2015NewLine     string str;Di2015NewLine     this.EnsureChildControls();Di2015NewLineif (!this.flags[0x80])Di2015NewLine{Di2015NewLine     Control namingContainer = this.NamingContainer;Di2015NewLineif (namingContainer != null)Di2015NewLine{Di2015NewLine    return namingContainer.FindControl(id, pathOffset);Di2015NewLine}Di2015NewLine
614690Di2015UniqueSeparator[XmlElement(Di2015NewLineElementName = "Members",Di2015NewLineNamespace = "http://www.cpandl.com")]Di2015NewLinepublic Employee[] Employees;Di2015NewLine
614738Di2015UniqueSeparatorToString
614738Di2015UniqueSeparatorObject.Equals
614738Di2015UniqueSeparatorif (Object.Equals(dt1.Rows[0]["Name"], dt2.Rows[b]["Name"])) {Di2015NewLine    // stuffDi2015NewLine}Di2015NewLine
614844Di2015UniqueSeparatorstatic class Foo()Di2015NewLine{Di2015NewLine    static Foo()Di2015NewLine    {Di2015NewLine        Bar = "fubar";Di2015NewLine    }Di2015NewLineDi2015NewLine    public static string Bar { get; set; }Di2015NewLine}Di2015NewLine
614844Di2015UniqueSeparatorMyStaticClass.ServiceMethod(...);Di2015NewLine
614958Di2015UniqueSeparatorvar allowedExtensions = new HashSet<string> { ".jpg", ".mp3" };Di2015NewLineDi2015NewLinevar files = GetFiles(Di2015NewLine    "C:\\\\path", Di2015NewLine    SearchOption.AllDirectories, Di2015NewLine    fn => allowedExtensions.Contains(Path.GetExtension(fn))Di2015NewLine);Di2015NewLine
614970Di2015UniqueSeparator    //the compiler will create a local variable Di2015NewLine    //which will go out of scope outside this context Di2015NewLine    using (FileStream fs = new FileStream(file, FileMode.Open))Di2015NewLine    {Di2015NewLine         //do stuffDi2015NewLine    }Di2015NewLine
614970Di2015UniqueSeparator    FileStream fs;Di2015NewLine    try{Di2015NewLine       fs = new FileStream();Di2015NewLine       //do StuffDi2015NewLine    }Di2015NewLine    finally{Di2015NewLine        if(fs!=null)Di2015NewLine           fs.Dispose();Di2015NewLine    }Di2015NewLine
614979Di2015UniqueSeparator<asp:TextBox runat="server" ID="TextBox1" AutoPostBack="true" Di2015NewLineOnTextChanged="TextBox1_TextChanged"></asp:TextBox>Di2015NewLine
614979Di2015UniqueSeparatorprotected void TextBox1_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string str = TextBox1.Text;Di2015NewLine}Di2015NewLine
614979Di2015UniqueSeparatorTextBox1.TextChanged +=new EventHandler(TextBox1_TextChanged);Di2015NewLine
614989Di2015UniqueSeparatorInterrupt
614989Di2015UniqueSeparatorThreadInterruptedException
615039Di2015UniqueSeparatorpublic static CategoryAttribute Appearance { get; }Di2015NewLine
615039Di2015UniqueSeparator public static CategoryAttribute AppearanceDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (appearance == null)Di2015NewLine            {Di2015NewLine                appearance = new CategoryAttribute("Appearance");Di2015NewLine            }Di2015NewLine            return appearance;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
615039Di2015UniqueSeparator            foreach (CategoryAttribute attrib in prop.GetCustomAttributes(typeof(CategoryAttribute), false))Di2015NewLine            {Di2015NewLine                bool result = attrib.Equals(CategoryAttribute.Appearance);Di2015NewLine            }Di2015NewLine
615115Di2015UniqueSeparatorIDisposable
615115Di2015UniqueSeparatorDispose
615115Di2015UniqueSeparatorXmlWriter
615115Di2015UniqueSeparatorStreamWriter
615115Di2015UniqueSeparatorFileStream
615120Di2015UniqueSeparatorprivate void rootBindingSource_CurrentItemChanged(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    toUserTextBox.Text = toUserTextBox.Text.ToUpper();Di2015NewLine    readWriteAuthorization1.ResetControlAuthorization();Di2015NewLine}Di2015NewLine
615281Di2015UniqueSeparatorDictionary<Node, bool> visited = new Dictionary<Node, bool>();Di2015NewLineDictionary<Node, Node> π = new Dictionary<Node, Node>();Di2015NewLineDi2015NewLineQueue<Node> worklist = new Queue<Node>();Di2015NewLineDi2015NewLinevisited.Add(this, false);Di2015NewLineDi2015NewLineworklist.Enqueue(this);Di2015NewLineDi2015NewLinewhile (worklist.Count != 0)Di2015NewLine{Di2015NewLine    Node node = worklist.Dequeue();Di2015NewLineDi2015NewLine    foreach (Node neighbor in node.Neighbors)Di2015NewLine    {Di2015NewLine        if (!visited.ContainsKey(neighbor))Di2015NewLine        {Di2015NewLine            visited.Add(neighbor, false);Di2015NewLine            π.Add(neighbor, node);Di2015NewLine            worklist.Enqueue(neighbor);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
615281Di2015UniqueSeparatore
615281Di2015UniqueSeparatorwhile (π[e] != null) {Di2015NewLine    Console.WriteLine(e);Di2015NewLine    e = π[e];Di2015NewLine}Di2015NewLine
615314Di2015UniqueSeparatorforeach (var nodeId in _AuthenticatedNodes.Keys.ToList())Di2015NewLine    ...Di2015NewLine
615359Di2015UniqueSeparatorsin
615359Di2015UniqueSeparatorcos
615359Di2015UniqueSeparatorsin
615359Di2015UniqueSeparatorcos
615359Di2015UniqueSeparator2*pi/1000
615359Di2015UniqueSeparatorACos
615359Di2015UniqueSeparatorMath.Sin(lat2rad) * Math.Sin(lat1rad) Di2015NewLine+ Math.Cos(lat2rad) * Math.Cos(lat1rad) * Math.Cos(lon2rad - lon1rad)
615359Di2015UniqueSeparatorsin
615359Di2015UniqueSeparatorcos
615413Di2015UniqueSeparator(?<=\\s+|^)\\$\\d+\\bDi2015NewLine
615416Di2015UniqueSeparatorSystem.Xml.XmlTextReader textReader = new System.Xml.XmlTextReader("testin.xml");Di2015NewLinetextReader.EntityHandling = System.Xml.EntityHandling.ExpandEntities;Di2015NewLineSystem.Xml.XmlDocument outputDoc = new System.Xml.XmlDocument();Di2015NewLineoutputDoc.Load(textReader);Di2015NewLineSystem.Xml.XmlDocumentType docTypeIfPresent = outputDoc.DocumentType;Di2015NewLineif (docTypeIfPresent != null)Di2015NewLine    outputDoc.RemoveChild(docTypeIfPresent);Di2015NewLineoutputDoc.Save("testout.html");Di2015NewLinetextReader.Close();Di2015NewLine
615416Di2015UniqueSeparatorSystem.Xml.XmlTextReader textReader = new System.Xml.XmlTextReader("testin.xml");Di2015NewLinetextReader.EntityHandling = System.Xml.EntityHandling.ExpandEntities;Di2015NewLineSystem.Xml.XmlTextWriter textWriter = new System.Xml.XmlTextWriter("testout.html", System.Text.Encoding.UTF8);Di2015NewLinewhile (textReader.Read())Di2015NewLine{Di2015NewLine    if (textReader.NodeType != System.Xml.XmlNodeType.DocumentType)Di2015NewLine        textWriter.WriteNode(textReader, false);Di2015NewLine    elseDi2015NewLine        textReader.Skip();Di2015NewLine}Di2015NewLinetextWriter.Close();Di2015NewLine
615486Di2015UniqueSeparator(?<=^|\\s)\\d+(?=\\s|$)Di2015NewLine
615566Di2015UniqueSeparator\\n
615566Di2015UniqueSeparator<br/>
615644Di2015UniqueSeparatorDayRender
615663Di2015UniqueSeparatorCustomer customer = repository.GetCustomer(3);Di2015NewLine
615804Di2015UniqueSeparatorPrivate m_bwMain As BackgroundWorkerDi2015NewLineDi2015NewLinePublic Sub New(ByVal bwMain As BackgroundWorker)Di2015NewLine    m_bwMain = bwMainDi2015NewLineDi2015NewLine    'additional setup code hereDi2015NewLineEnd SubDi2015NewLine
615804Di2015UniqueSeparatorlblStatus.Text = "Initializing ..."Di2015NewLinebgwMain.RunWorkerAsync(someFileName)Di2015NewLine
615804Di2015UniqueSeparatorPrivate Sub bgwMain_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwMain.DoWorkDi2015NewLine    m_oJobEngine = New JobEngine(CType(sender, BackgroundWorker))Di2015NewLine    m_oJobEngine.DownloadFile(CStr(e.Argument))Di2015NewLineEnd SubDi2015NewLine
615804Di2015UniqueSeparatorPrivate Sub m_oJobEngine.DownloadProgress(ByVal bgw as Backgroundworker, ByVal bytesTransferred as Long) Handles m_oJobEngine.DownloadProgressDi2015NewLine    bgw.ReportProgress(0, bytesTransferred)Di2015NewLineEnd SubDi2015NewLinePrivate Sub bgwMain_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bgwMain.ProgressChangedDi2015NewLine    lblStatus.Text = CLng(e.UserState).ToString & " bytes transferred."Di2015NewLineEnd SubDi2015NewLine
615817Di2015UniqueSeparatorBrowsable
615817Di2015UniqueSeparatorfalse
615817Di2015UniqueSeparatorTypeConverter
615817Di2015UniqueSeparatorGetProperties
615817Di2015UniqueSeparatorBrowsable
615817Di2015UniqueSeparatorTypeConverter
615883Di2015UniqueSeparatorvar dictionary = new Dictionary<type1,type2>(optionsSorted);Di2015NewLine
615915Di2015UniqueSeparator[System.Web.Compilation.ExpressionPrefix("Delegate")]Di2015NewLine    public class DelegateExpressionBuilder : ExpressionBuilderDi2015NewLine    {Di2015NewLine        public override CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)Di2015NewLine        {           Di2015NewLineDi2015NewLine         return new CodeDelegateCreateExpression(new CodeTypeReference("System.EventHandler"), null, entry.Expression);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
615915Di2015UniqueSeparator<asp:DropDownList runat="server" onload='<%$ Delegate:(o,e) => { this.DataBind(); } %>' />Di2015NewLine
615915Di2015UniqueSeparator ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("onload", System.Convert.ToString(new System.EventHandler((o,e) => { this.DataBind(); }), System.Globalization.CultureInfo.CurrentCulture));Di2015NewLine
615915Di2015UniqueSeparator@__ctrl.Load += new System.EventHandler((o,e) => { this.DataBind(); });Di2015NewLine
615976Di2015UniqueSeparatorStackTrace stackTrace = new StackTrace();Di2015NewLineMethodBase methodBase = stackTrace.GetFrame(1).GetMethod();Di2015NewLineConsole.WriteLine(methodBase.Name); // e.g.Di2015NewLine
615988Di2015UniqueSeparatorcatch (SomeException) {Di2015NewLine  throw;Di2015NewLine}Di2015NewLine
615988Di2015UniqueSeparatorcatch (SomeException e) {Di2015NewLine  throw e;Di2015NewLine}Di2015NewLine
615988Di2015UniqueSeparatorcatch (SomeException e) {Di2015NewLine  throw new SomeException(e.Message);Di2015NewLine}Di2015NewLine
616015Di2015UniqueSeparatorpublic struct FIntDi2015NewLine{Di2015NewLine    public long RawValue;Di2015NewLine    public const int SHIFT_AMOUNT = 12; //12 is 4096Di2015NewLineDi2015NewLine    public const long One = 1 << SHIFT_AMOUNT;Di2015NewLine    public const int OneI = 1 << SHIFT_AMOUNT;Di2015NewLine    public static FInt OneF = FInt.Create( 1, true );Di2015NewLineDi2015NewLine    #region ConstructorsDi2015NewLine    public static FInt Create( long StartingRawValue, bool UseMultiple )Di2015NewLine    {Di2015NewLine        FInt fInt;Di2015NewLine        fInt.RawValue = StartingRawValue;Di2015NewLine        if ( UseMultiple )Di2015NewLine            fInt.RawValue = fInt.RawValue << SHIFT_AMOUNT;Di2015NewLine        return fInt;Di2015NewLine    }Di2015NewLine    public static FInt Create( double DoubleValue )Di2015NewLine    {Di2015NewLine        FInt fInt;Di2015NewLine        DoubleValue *= (double)One;Di2015NewLine        fInt.RawValue = (int)Math.Round( DoubleValue );Di2015NewLine        return fInt;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    public int IntValueDi2015NewLine    {Di2015NewLine        get { return (int)( this.RawValue >> SHIFT_AMOUNT ); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public int ToInt()Di2015NewLine    {Di2015NewLine        return (int)( this.RawValue >> SHIFT_AMOUNT );Di2015NewLine    }Di2015NewLineDi2015NewLine    public double ToDouble()Di2015NewLine    {Di2015NewLine        return (double)this.RawValue / (double)One;Di2015NewLine    }Di2015NewLineDi2015NewLine    public FInt InverseDi2015NewLine    {Di2015NewLine        get { return FInt.Create( -this.RawValue, false ); }Di2015NewLine    }Di2015NewLineDi2015NewLine    #region FromPartsDi2015NewLine    /// <summary>Di2015NewLine    /// Create a fixed-int number from parts.  For example, to create 1.5 pass in 1 and 500.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="PreDecimal">The number above the decimal.  For 1.5, this would be 1.</param>Di2015NewLine    /// <param name="PostDecimal">The number below the decimal, to three digits.  Di2015NewLine    /// For 1.5, this would be 500. For 1.005, this would be 5.</param>Di2015NewLine    /// <returns>A fixed-int representation of the number parts</returns>Di2015NewLine    public static FInt FromParts( int PreDecimal, int PostDecimal )Di2015NewLine    {Di2015NewLine        FInt f = FInt.Create( PreDecimal, true );Di2015NewLine        if ( PostDecimal != 0 )Di2015NewLine            f.RawValue += ( FInt.Create( PostDecimal ) / 1000 ).RawValue;Di2015NewLineDi2015NewLine        return f;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region *Di2015NewLine    public static FInt operator *( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        FInt fInt;Di2015NewLine        fInt.RawValue = ( one.RawValue * other.RawValue ) >> SHIFT_AMOUNT;Di2015NewLine        return fInt;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator *( FInt one, int multi )Di2015NewLine    {Di2015NewLine        return one * (FInt)multi;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator *( int multi, FInt one )Di2015NewLine    {Di2015NewLine        return one * (FInt)multi;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region /Di2015NewLine    public static FInt operator /( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        FInt fInt;Di2015NewLine        fInt.RawValue = ( one.RawValue << SHIFT_AMOUNT ) / ( other.RawValue );Di2015NewLine        return fInt;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator /( FInt one, int divisor )Di2015NewLine    {Di2015NewLine        return one / (FInt)divisor;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator /( int divisor, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)divisor / one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region %Di2015NewLine    public static FInt operator %( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        FInt fInt;Di2015NewLine        fInt.RawValue = ( one.RawValue ) % ( other.RawValue );Di2015NewLine        return fInt;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator %( FInt one, int divisor )Di2015NewLine    {Di2015NewLine        return one % (FInt)divisor;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator %( int divisor, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)divisor % one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region +Di2015NewLine    public static FInt operator +( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        FInt fInt;Di2015NewLine        fInt.RawValue = one.RawValue + other.RawValue;Di2015NewLine        return fInt;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator +( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one + (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator +( int other, FInt one )Di2015NewLine    {Di2015NewLine        return one + (FInt)other;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region -Di2015NewLine    public static FInt operator -( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        FInt fInt;Di2015NewLine        fInt.RawValue = one.RawValue - other.RawValue;Di2015NewLine        return fInt;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator -( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one - (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator -( int other, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)other - one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region ==Di2015NewLine    public static bool operator ==( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        return one.RawValue == other.RawValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator ==( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one == (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator ==( int other, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)other == one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region !=Di2015NewLine    public static bool operator !=( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        return one.RawValue != other.RawValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator !=( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one != (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator !=( int other, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)other != one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region >=Di2015NewLine    public static bool operator >=( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        return one.RawValue >= other.RawValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator >=( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one >= (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator >=( int other, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)other >= one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region <=Di2015NewLine    public static bool operator <=( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        return one.RawValue <= other.RawValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator <=( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one <= (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator <=( int other, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)other <= one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region >Di2015NewLine    public static bool operator >( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        return one.RawValue > other.RawValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator >( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one > (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator >( int other, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)other > one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region <Di2015NewLine    public static bool operator <( FInt one, FInt other )Di2015NewLine    {Di2015NewLine        return one.RawValue < other.RawValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator <( FInt one, int other )Di2015NewLine    {Di2015NewLine        return one < (FInt)other;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator <( int other, FInt one )Di2015NewLine    {Di2015NewLine        return (FInt)other < one;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    public static explicit operator int( FInt src )Di2015NewLine    {Di2015NewLine        return (int)( src.RawValue >> SHIFT_AMOUNT );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static explicit operator FInt( int src )Di2015NewLine    {Di2015NewLine        return FInt.Create( src, true );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static explicit operator FInt( long src )Di2015NewLine    {Di2015NewLine        return FInt.Create( src, true );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static explicit operator FInt( ulong src )Di2015NewLine    {Di2015NewLine        return FInt.Create( (long)src, true );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator <<( FInt one, int Amount )Di2015NewLine    {Di2015NewLine        return FInt.Create( one.RawValue << Amount, false );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt operator >>( FInt one, int Amount )Di2015NewLine    {Di2015NewLine        return FInt.Create( one.RawValue >> Amount, false );Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool Equals( object obj )Di2015NewLine    {Di2015NewLine        if ( obj is FInt )Di2015NewLine            return ( (FInt)obj ).RawValue == this.RawValue;Di2015NewLine        elseDi2015NewLine            return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        return RawValue.GetHashCode();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return this.RawValue.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic struct FPointDi2015NewLine{Di2015NewLine    public FInt X;Di2015NewLine    public FInt Y;Di2015NewLineDi2015NewLine    public static FPoint Create( FInt X, FInt Y )Di2015NewLine    {Di2015NewLine        FPoint fp;Di2015NewLine        fp.X = X;Di2015NewLine        fp.Y = Y;Di2015NewLine        return fp;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FPoint FromPoint( Point p )Di2015NewLine    {Di2015NewLine        FPoint f;Di2015NewLine        f.X = (FInt)p.X;Di2015NewLine        f.Y = (FInt)p.Y;Di2015NewLine        return f;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Point ToPoint( FPoint f )Di2015NewLine    {Di2015NewLine        return new Point( f.X.IntValue, f.Y.IntValue );Di2015NewLine    }Di2015NewLineDi2015NewLine    #region Vector OperationsDi2015NewLine    public static FPoint VectorAdd( FPoint F1, FPoint F2 )Di2015NewLine    {Di2015NewLine        FPoint result;Di2015NewLine        result.X = F1.X + F2.X;Di2015NewLine        result.Y = F1.Y + F2.Y;Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FPoint VectorSubtract( FPoint F1, FPoint F2 )Di2015NewLine    {Di2015NewLine        FPoint result;Di2015NewLine        result.X = F1.X - F2.X;Di2015NewLine        result.Y = F1.Y - F2.Y;Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FPoint VectorDivide( FPoint F1, int Divisor )Di2015NewLine    {Di2015NewLine        FPoint result;Di2015NewLine        result.X = F1.X / Divisor;Di2015NewLine        result.Y = F1.Y / Divisor;Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine}Di2015NewLine
616015Di2015UniqueSeparator    #region PI, DoublePIDi2015NewLine    public static FInt PI = FInt.Create( 12868, false ); //PI x 2^12Di2015NewLine    public static FInt TwoPIF = PI * 2; //radian equivalent of 260 degreesDi2015NewLine    public static FInt PIOver180F = PI / (FInt)180; //PI / 180Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region SqrtDi2015NewLine    public static FInt Sqrt( FInt f, int NumberOfIterations )Di2015NewLine    {Di2015NewLine        if ( f.RawValue < 0 ) //NaN in Math.SqrtDi2015NewLine            throw new ArithmeticException( "Input Error" );Di2015NewLine        if ( f.RawValue == 0 )Di2015NewLine            return (FInt)0;Di2015NewLine        FInt k = f + FInt.OneF >> 1;Di2015NewLine        for ( int i = 0; i < NumberOfIterations; i++ )Di2015NewLine            k = ( k + ( f / k ) ) >> 1;Di2015NewLineDi2015NewLine        if ( k.RawValue < 0 )Di2015NewLine            throw new ArithmeticException( "Overflow" );Di2015NewLine        elseDi2015NewLine            return k;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt Sqrt( FInt f )Di2015NewLine    {Di2015NewLine        byte numberOfIterations = 8;Di2015NewLine        if ( f.RawValue > 0x64000 )Di2015NewLine            numberOfIterations = 12;Di2015NewLine        if ( f.RawValue > 0x3e8000 )Di2015NewLine            numberOfIterations = 16;Di2015NewLine        return Sqrt( f, numberOfIterations );Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region SinDi2015NewLine    public static FInt Sin( FInt i )Di2015NewLine    {Di2015NewLine        FInt j = (FInt)0;Di2015NewLine        for ( ; i < 0; i += FInt.Create( 25736, false ) ) ;Di2015NewLine        if ( i > FInt.Create( 25736, false ) )Di2015NewLine            i %= FInt.Create( 25736, false );Di2015NewLine        FInt k = ( i * FInt.Create( 10, false ) ) / FInt.Create( 714, false );Di2015NewLine        if ( i != 0 && i != FInt.Create( 6434, false ) && i != FInt.Create( 12868, false ) && Di2015NewLine            i != FInt.Create( 19302, false ) && i != FInt.Create( 25736, false ) )Di2015NewLine            j = ( i * FInt.Create( 100, false ) ) / FInt.Create( 714, false ) - k * FInt.Create( 10, false );Di2015NewLine        if ( k <= FInt.Create( 90, false ) )Di2015NewLine            return sin_lookup( k, j );Di2015NewLine        if ( k <= FInt.Create( 180, false ) )Di2015NewLine            return sin_lookup( FInt.Create( 180, false ) - k, j );Di2015NewLine        if ( k <= FInt.Create( 270, false ) )Di2015NewLine            return sin_lookup( k - FInt.Create( 180, false ), j ).Inverse;Di2015NewLine        elseDi2015NewLine            return sin_lookup( FInt.Create( 360, false ) - k, j ).Inverse;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static FInt sin_lookup( FInt i, FInt j )Di2015NewLine    {Di2015NewLine        if ( j > 0 && j < FInt.Create( 10, false ) && i < FInt.Create( 90, false ) )Di2015NewLine            return FInt.Create( SIN_TABLE[i.RawValue], false ) + Di2015NewLine                ( ( FInt.Create( SIN_TABLE[i.RawValue + 1], false ) - FInt.Create( SIN_TABLE[i.RawValue], false ) ) / Di2015NewLine                FInt.Create( 10, false ) ) * j;Di2015NewLine        elseDi2015NewLine            return FInt.Create( SIN_TABLE[i.RawValue], false );Di2015NewLine    }Di2015NewLineDi2015NewLine    private static int[] SIN_TABLE = {Di2015NewLine        0, 71, 142, 214, 285, 357, 428, 499, 570, 641, Di2015NewLine        711, 781, 851, 921, 990, 1060, 1128, 1197, 1265, 1333, Di2015NewLine        1400, 1468, 1534, 1600, 1665, 1730, 1795, 1859, 1922, 1985, Di2015NewLine        2048, 2109, 2170, 2230, 2290, 2349, 2407, 2464, 2521, 2577, Di2015NewLine        2632, 2686, 2740, 2793, 2845, 2896, 2946, 2995, 3043, 3091, Di2015NewLine        3137, 3183, 3227, 3271, 3313, 3355, 3395, 3434, 3473, 3510, Di2015NewLine        3547, 3582, 3616, 3649, 3681, 3712, 3741, 3770, 3797, 3823, Di2015NewLine        3849, 3872, 3895, 3917, 3937, 3956, 3974, 3991, 4006, 4020, Di2015NewLine        4033, 4045, 4056, 4065, 4073, 4080, 4086, 4090, 4093, 4095, Di2015NewLine        4096Di2015NewLine    };Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    private static FInt mul( FInt F1, FInt F2 )Di2015NewLine    {Di2015NewLine        return F1 * F2;Di2015NewLine    }Di2015NewLineDi2015NewLine    #region Cos, Tan, AsinDi2015NewLine    public static FInt Cos( FInt i )Di2015NewLine    {Di2015NewLine        return Sin( i + FInt.Create( 6435, false ) );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt Tan( FInt i )Di2015NewLine    {Di2015NewLine        return Sin( i ) / Cos( i );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt Asin( FInt F )Di2015NewLine    {Di2015NewLine        bool isNegative = F < 0;Di2015NewLine        F = Abs( F );Di2015NewLineDi2015NewLine        if ( F > FInt.OneF )Di2015NewLine            throw new ArithmeticException( "Bad Asin Input:" + F.ToDouble() );Di2015NewLineDi2015NewLine        FInt f1 = mul( mul( mul( mul( FInt.Create( 145103 >> FInt.SHIFT_AMOUNT, false ), F ) -Di2015NewLine            FInt.Create( 599880 >> FInt.SHIFT_AMOUNT, false ), F ) +Di2015NewLine            FInt.Create( 1420468 >> FInt.SHIFT_AMOUNT, false ), F ) -Di2015NewLine            FInt.Create( 3592413 >> FInt.SHIFT_AMOUNT, false ), F ) +Di2015NewLine            FInt.Create( 26353447 >> FInt.SHIFT_AMOUNT, false );Di2015NewLine        FInt f2 = PI / FInt.Create( 2, true ) - ( Sqrt( FInt.OneF - F ) * f1 );Di2015NewLineDi2015NewLine        return isNegative ? f2.Inverse : f2;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region ATan, ATan2Di2015NewLine    public static FInt Atan( FInt F )Di2015NewLine    {Di2015NewLine        return Asin( F / Sqrt( FInt.OneF + ( F * F ) ) );Di2015NewLine    }Di2015NewLineDi2015NewLine    public static FInt Atan2( FInt F1, FInt F2 )Di2015NewLine    {Di2015NewLine        if ( F2.RawValue == 0 && F1.RawValue == 0 )Di2015NewLine            return (FInt)0;Di2015NewLineDi2015NewLine        FInt result = (FInt)0;Di2015NewLine        if ( F2 > 0 )Di2015NewLine            result = Atan( F1 / F2 );Di2015NewLine        else if ( F2 < 0 )Di2015NewLine        {Di2015NewLine            if ( F1 >= 0 )Di2015NewLine                result = ( PI - Atan( Abs( F1 / F2 ) ) );Di2015NewLine            elseDi2015NewLine                result = ( PI - Atan( Abs( F1 / F2 ) ) ).Inverse;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            result = ( F1 >= 0 ? PI : PI.Inverse ) / FInt.Create( 2, true );Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region AbsDi2015NewLine    public static FInt Abs( FInt F )Di2015NewLine    {Di2015NewLine        if ( F < 0 )Di2015NewLine            return F.Inverse;Di2015NewLine        elseDi2015NewLine            return F;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine
616092Di2015UniqueSeparatortheControl.Invoke(new MethodInvoker(MyUpdateMethod));Di2015NewLine
616194Di2015UniqueSeparatorpublic string[] GetTransistions(string strUser)Di2015NewLine{Di2015NewLine    string[] strRoles = System.Web.Security.Roles.GetRolesForUser(strUser);Di2015NewLine    List<string> strActivity = new List<string>();Di2015NewLine    ReadOnlyCollection<WorkflowQueueInfo> queues = workflowInstance.GetWorkflowQueueData();Di2015NewLine    foreach (WorkflowQueueInfo info in queues)Di2015NewLine    {Di2015NewLine        if (!info.QueueName.Equals("SetStateQueue"))Di2015NewLine        {Di2015NewLine            foreach (string subscribedActivity in info.SubscribedActivityNames)Di2015NewLine            {Di2015NewLine                HandleExternalEventActivity heea = workflowInstance.GetWorkflowDefinition().GetActivityByName(subscribedActivity) as HandleExternalEventActivity;Di2015NewLineDi2015NewLine                #region check rolesDi2015NewLine                if (heea.Roles != null)Di2015NewLine                {Di2015NewLine                    foreach (WorkflowRole workflowRole in heea.Roles)Di2015NewLine                    {Di2015NewLine                        foreach (string strRole in strRoles)Di2015NewLine                        {Di2015NewLine                            if (workflowRole.Name.Equals(strRole))Di2015NewLine                            {Di2015NewLine                                strActivity.Add(heea.EventName);Di2015NewLine                                //permissionLog += workflowRole.Name + " can perform " + heea.EventName + " Activity. ";Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                #endregionDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return strActivity.ToArray();Di2015NewLine}Di2015NewLine
616470Di2015UniqueSeparatorEntityAttribute
616513Di2015UniqueSeparatorvar items = listView.Items;Di2015NewLinevar last = items[items.Count-1];Di2015NewLinelast.EnsureVisible();Di2015NewLine
616514Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void TestMethod3()Di2015NewLine{Di2015NewLine    var list = new []{new SitemapNode("1", DateTime.Now, 1), new SitemapNode("2", DateTime.Now.AddDays(1), 2)};Di2015NewLine    var serializer = new XmlSerializer(typeof(SitemapNode));Di2015NewLine    var st = new MemoryStream();Di2015NewLine    using (var writer = XmlWriter.Create(st))Di2015NewLine    {Di2015NewLine        var ns = new XmlSerializerNamespaces();Di2015NewLine        ns.Add("", "test");Di2015NewLine        writer.WriteStartElement("test", "test");Di2015NewLine        foreach (SitemapNode node in list)Di2015NewLine        {Di2015NewLine            serializer.Serialize(writer, node, ns);Di2015NewLine        }Di2015NewLine        writer.WriteEndElement();Di2015NewLine    }Di2015NewLine    st.Position = 0;Di2015NewLine    TestContext.WriteLine(new StreamReader(st).ReadToEnd());Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine[XmlRoot(ElementName = "url", Namespace = "test")]Di2015NewLinepublic class SitemapNodeDi2015NewLine{Di2015NewLine    [XmlElement(ElementName = "loc")]Di2015NewLine    public string Location { get; set; }Di2015NewLine    [XmlElement(ElementName = "lastmod")]Di2015NewLine    public DateTime LastModified { get; set; }Di2015NewLine    [XmlElement(ElementName = "priority")]Di2015NewLine    public decimal Priority { get; set; }Di2015NewLineDi2015NewLine    public SitemapNode()Di2015NewLine    {Di2015NewLine        Location = String.Empty;Di2015NewLine        LastModified = DateTime.Now;Di2015NewLine        Priority = 0.5M;Di2015NewLine    }Di2015NewLineDi2015NewLine    public SitemapNode(string location, DateTime lastModified, decimal priority)Di2015NewLine    {Di2015NewLine        Location = location;Di2015NewLine        LastModified = lastModified;Di2015NewLine        Priority = priority;Di2015NewLine    }Di2015NewLine}Di2015NewLine
616514Di2015UniqueSeparator    <?xml version="1.0" encoding="utf-8"?><test xmlns="test">Di2015NewLine<url><loc>1</loc><lastmod>2009-03-05T13:35:54.6468-07:00</lastmod><priority>1</priority></url>Di2015NewLine<url><loc>2</loc><lastmod>2009-03-06T13:35:54.6478-07:00</lastmod><priority>2</priority></url></test>Di2015NewLine
616571Di2015UniqueSeparator[TestFixture()]Di2015NewLinepublic class TestHole Di2015NewLine{Di2015NewLineDi2015NewLine\private Hole _unitUnderTest;Di2015NewLineDi2015NewLine\[SetUp()]Di2015NewLine\public void SetUp() Di2015NewLine\{Di2015NewLine\\_unitUnderTest = new Hole();Di2015NewLine\}Di2015NewLineDi2015NewLine\[TearDown()]Di2015NewLine\public void TearDown() Di2015NewLine\{Di2015NewLine\\_unitUnderTest = null;Di2015NewLine\}Di2015NewLineDi2015NewLine\[Test]Di2015NewLine\public void TestConstructorHole()Di2015NewLine\{Di2015NewLine\\Hole testHole = new Hole();Di2015NewLine\\Assert.IsNotNull(testHole, "Constructor of type, Hole failed to create instance.");Di2015NewLine\}Di2015NewLineDi2015NewLine\[Test]Di2015NewLine\public void TestNotifyPropertyChanged()Di2015NewLine\{Di2015NewLine\\string info = null;Di2015NewLine\\_unitUnderTest.NotifyPropertyChanged(info);Di2015NewLine\}Di2015NewLine}Di2015NewLine
616674Di2015UniqueSeparatorpublic class ReadOnlyDictionary<T, U>Di2015NewLine{Di2015NewLine    private IDictionary<T, U> BackingStore;Di2015NewLineDi2015NewLine    public ReadOnlyDictionary<T, U>(IDictionary<T, U> baseDictionary) {Di2015NewLine        this.BackingStore = baseDictionary;Di2015NewLine    }Di2015NewLineDi2015NewLine    public U this[T index] { get { return BackingStore[index]; } }Di2015NewLineDi2015NewLine    // provide whatever other methods and/or interfaces you needDi2015NewLine}Di2015NewLine
616676Di2015UniqueSeparatorpublic static void ForceUIToUpdate()Di2015NewLine{Di2015NewLine  DispatcherFrame frame = new DispatcherFrame();Di2015NewLineDi2015NewLine  Dispatcher.CurrentDispatcher.BeginInvoke(DispatcherPriority.Render, new DispatcherOperationCallback(delegate(object parameter)Di2015NewLine  {Di2015NewLine    frame.Continue = false;Di2015NewLine    return null;Di2015NewLine  }), null);Di2015NewLineDi2015NewLine  Dispatcher.PushFrame(frame);Di2015NewLine}Di2015NewLine
616677Di2015UniqueSeparator<script language="javascript" type="text/javascript">Di2015NewLine   function SetScrollEvent() {Di2015NewLine      window.scrollTo(0,0);Di2015NewLine   }Di2015NewLine</script> Di2015NewLineDi2015NewLine<asp:GridView id="MyGridView" runat="server" OnRowDataBound="MyGridView_OnRowDataBound">Di2015NewLine    <Columns>Di2015NewLine        <asp:CommandField ButtonType="Link" ShowEditButton="true" />Di2015NewLine    </Columns>Di2015NewLine</asp:GridView>Di2015NewLine
616677Di2015UniqueSeparatorprotected void MyGridView_OnRowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine    if(e.Row.RowType.Equals(DataControlRowType.DataRow))Di2015NewLine    {Di2015NewLine        foreach (DataControlFieldCell cell in e.Row.Cells)Di2015NewLine        {Di2015NewLine            foreach(Control control in cell.Controls)Di2015NewLine            {Di2015NewLine                LinkButton lb = control as LinkButton;Di2015NewLineDi2015NewLine                if (lb != null && lb.CommandName == "Edit")Di2015NewLine                    lb.Attributes.Add("onclick", "SetScrollEvent();");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
616699Di2015UniqueSeparator BLANK LINEDi2015NewLine [[TO=Fax Number or Email address]]Di2015NewLine [[SUBJECT=Whatever you want the subject to be]]Di2015NewLine
616715Di2015UniqueSeparatorSystem.AppDomain.CurrentDomain.FriendlyNameDi2015NewLine
616785Di2015UniqueSeparatorpublic abstract class fooDi2015NewLine{Di2015NewLine    public abstract ICache GetCache();Di2015NewLineDi2015NewLine    public void DoSomethingToCache()Di2015NewLine    {Di2015NewLine        ICache cache = this.GetCache();Di2015NewLine        cache.DoSomething();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class bar : fooDi2015NewLine{Di2015NewLine    public static ICache BarCache = new FooCache();Di2015NewLineDi2015NewLine    public override ICache GetCache()Di2015NewLine    {Di2015NewLine        return bar.BarCache;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FooCache : ICache { }Di2015NewLine
616825Di2015UniqueSeparatorpublic static void RunService()Di2015NewLine{Di2015NewLine        Type t = typeof(Child);Di2015NewLine        ServiceHost svcHost = new ServiceHost(t, new Uri("http://localhost:8001/People"));Di2015NewLine        svcHost.AddServiceEndpoint(typeof(IWcfClass), new BasicHttpBinding(), "Basic");Di2015NewLine        svcHost.Open();Di2015NewLine}Di2015NewLine
617115Di2015UniqueSeparatorSuppressKeyPress
617115Di2015UniqueSeparator"-."
617115Di2015UniqueSeparator"-.23"
617115Di2015UniqueSeparator"-.1e-2"
617115Di2015UniqueSeparatorfloat
617115Di2015UniqueSeparatorTextChanged
617115Di2015UniqueSeparatorParse
617155Di2015UniqueSeparatorpublic void Example()Di2015NewLine{Di2015NewLine    var factory = new FrameworkElementFactory(typeof(TextBlock));Di2015NewLine    factory.SetBinding(TextBlock.TextProperty, new Binding("Text"));Di2015NewLineDi2015NewLine    var dataTemplate = new DataTemplate();Di2015NewLine    dataTemplate.VisualTree = factory;Di2015NewLine    dataTemplate.Seal();Di2015NewLine}Di2015NewLine
617249Di2015UniqueSeparatorpublic class WatcherDi2015NewLine
617249Di2015UniqueSeparatorpublic static void Main()Di2015NewLine{Di2015NewLineRun();Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLine[PermissionSet(SecurityAction.Demand, Name="FullTrust")]Di2015NewLinepublic static void Run()Di2015NewLine{Di2015NewLine    string[] args = System.Environment.GetCommandLineArgs();Di2015NewLineDi2015NewLine    // If a directory is not specified, exit program.Di2015NewLine    if(args.Length != 2)Di2015NewLine    {Di2015NewLine        // Display the proper way to call the program.Di2015NewLine        Console.WriteLine("Usage: Watcher.exe (directory)");Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Create a new FileSystemWatcher and set its properties.Di2015NewLine    FileSystemWatcher watcher = new FileSystemWatcher();Di2015NewLine    watcher.Path = args[1];Di2015NewLine    /* Watch for changes in LastAccess and LastWrite times, andDi2015NewLine       the renaming of files or directories. */Di2015NewLine    watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWriteDi2015NewLine       | NotifyFilters.FileName | NotifyFilters.DirectoryName;Di2015NewLine    // Only watch text files.Di2015NewLine    watcher.Filter = "*.txt";Di2015NewLineDi2015NewLine    // Add event handlers.Di2015NewLine    watcher.Changed += new FileSystemEventHandler(OnChanged);Di2015NewLine    watcher.Created += new FileSystemEventHandler(OnChanged);Di2015NewLine    watcher.Deleted += new FileSystemEventHandler(OnChanged);Di2015NewLine    watcher.Renamed += new RenamedEventHandler(OnRenamed);Di2015NewLineDi2015NewLine    // Begin watching.Di2015NewLine    watcher.EnableRaisingEvents = true;Di2015NewLineDi2015NewLine    // Wait for the user to quit the program.Di2015NewLine    Console.WriteLine("Press \\'q\\' to quit the sample.");Di2015NewLine    while(Console.Read()!='q');Di2015NewLine}Di2015NewLineDi2015NewLine// Define the event handlers.Di2015NewLineprivate static void OnChanged(object source, FileSystemEventArgs e)Di2015NewLine{Di2015NewLine    // Specify what is done when a file is changed, created, or deleted.Di2015NewLine   Console.WriteLine("File: " +  e.FullPath + " " + e.ChangeType);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void OnRenamed(object source, RenamedEventArgs e)Di2015NewLine{Di2015NewLine    // Specify what is done when a file is renamed.Di2015NewLine    Console.WriteLine("File: {0} renamed to {1}", e.OldFullPath, e.FullPath);Di2015NewLine}Di2015NewLine
617292Di2015UniqueSeparatorclass SomeObjectDi2015NewLine{Di2015NewLine    public int ID { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineSomeObject[] objects = new SomeObject[]Di2015NewLine{Di2015NewLine    new SomeObject { ID = 1, Name = "Hello" },Di2015NewLine    new SomeObject { ID = 2, Name = "World" }Di2015NewLine};Di2015NewLineDi2015NewLineDictionary<int, string> objectDictionary = objects.ToDictionary(o => o.ID, o => o.Name);Di2015NewLine
617292Di2015UniqueSeparatorobjectDictionary[1]
617433Di2015UniqueSeparatorproc top_k (array<n>, heap<k>)Di2015NewLineheap <- array<1..k-1>Di2015NewLinefor each (array<k..n-1>) Di2015NewLine  if array[i] > heap.minDi2015NewLine     heap.erase(heap.min)Di2015NewLine     heap.insert(array[i])Di2015NewLine  end ifDi2015NewLineend forDi2015NewLine
617447Di2015UniqueSeparatorList<T>
617447Di2015UniqueSeparatorList<T> (IEnumerable) Constructor
617447Di2015UniqueSeparatorList<string> myValues = new List<string>(mySortedList.Values);Di2015NewLine
617964Di2015UniqueSeparatorctl.SaveAs(MapPath("~/UserFiles/[username]/[filename]"));Di2015NewLine
618045Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    public int Id {get; set;}Di2015NewLine    public string Name {get; set;}Di2015NewLineDi2015NewLine    public IList<PersonPerson> _relatedPersons;Di2015NewLineDi2015NewLine    public ReadOnlyCollection<PersonPerson> RelatedPersonsDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine           // The RelatedPersons property is mapped with NHibernate, butDi2015NewLine           // using its backed field _relatedPersons (can be done using the Di2015NewLine           // access attrib in the HBM.Di2015NewLine           // I prefer to expose the collection itself as a readonlycollectionDi2015NewLine           // to the client, so that RelatedPersons have to be added throughDi2015NewLine           // the AddRelatedPerson method (and removed via a RemoveRelatedPerson method).Di2015NewLineDi2015NewLine           return new List<PersonPerson) (_relatedPersons).AsReadOnly();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddRelatedPerson( Person p, RelationType relatesAs )Di2015NewLine    {Di2015NewLine       ...Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
618045Di2015UniqueSeparatorpublic class NHPersonRepository : IPersonRepositoryDi2015NewLine{Di2015NewLine    ...Di2015NewLineDi2015NewLine    public IList<Person> FindPersonsThatHaveARelationShipWithPerson( Person p )Di2015NewLine    {Di2015NewLine        ICriteria crit = _session.CreateCriteria <Person>();Di2015NewLineDi2015NewLine        crit.AddAlias ("RelatedPersons", "r");Di2015NewLineDi2015NewLine        crit.Add (Expression.Eq ("r.RelatedWithPerson", p));Di2015NewLineDi2015NewLine        return crit.List();Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
618073Di2015UniqueSeparatorListBoxLog.Invoke((MethodInvoker)delegate { ListBoxLog.Items.Add("Done"); });Di2015NewLine
618154Di2015UniqueSeparatorpublic delegate void MyDelegate(string message);Di2015NewLine
618154Di2015UniqueSeparatorMyDelegate = SomeFunction;Di2015NewLineMyDelegate("Hello, bunny");Di2015NewLine
618154Di2015UniqueSeparatorpublic event MyDelegate MyEvent;Di2015NewLine
618154Di2015UniqueSeparatorSomeObject.MyEvent += SomeFunction;Di2015NewLine
618154Di2015UniqueSeparatorif (MyEvent != null) {Di2015NewLine    MyEvent("Hello, bunny");Di2015NewLine}Di2015NewLine
618202Di2015UniqueSeparatorproducts
618202Di2015UniqueSeparatorvar query = products.Where(prod => prod._Name.StartsWith("J"));Di2015NewLine
618202Di2015UniqueSeparatorIEnumerable<Product>
618202Di2015UniqueSeparatorList<Product>
618202Di2015UniqueSeparatorToList()
618202Di2015UniqueSeparatorvar query = products.Where(prod => prod._Name.StartsWith("J"))Di2015NewLine                    .ToList();Di2015NewLine
618226Di2015UniqueSeparatorString.Replace
618242Di2015UniqueSeparator#!./perl -wDi2015NewLineDi2015NewLine# Define some properties and fields in perl and try to access them.Di2015NewLineprint "1..1\\n";Di2015NewLinerequire 'setup.pl';Di2015NewLinecsc("-target:library DB.cs");Di2015NewLinecleanup("DB.dll");Di2015NewLineplc(-target => "library", -out => "P.dll", -r => "DB.dll", "P.pm");Di2015NewLinecsc("test.cs -r:DB.dll -r:P.dll");Di2015NewLinecleanup("./test.exe");Di2015NewLinemy $res = `./test.exe`;Di2015NewLineprint "----\\n$res----\\n";Di2015NewLineprint "not " unless $res eq <<'EOT';Di2015NewLineXXX 65Di2015NewLineXXX 66Di2015NewLineXXX 67Di2015NewLineXXX 68Di2015NewLineXXX 69Di2015NewLineXXX 70Di2015NewLineXXX 71Di2015NewLineXXX 4.2Di2015NewLineXXX 4.30000019073486Di2015NewLineXXX 4.4Di2015NewLineXXX aDi2015NewLineXXX 1Di2015NewLineXXX ""Di2015NewLineXXX HiDi2015NewLineXXX <undef>Di2015NewLineEOTDi2015NewLineprint "ok 1\\n";Di2015NewLine__END__Di2015NewLine
618242Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass main : IPrintDi2015NewLine{Di2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine         P p = new P(new main());Di2015NewLine         DataBase db = new DataBase();Di2015NewLine         db.Add((byte)65);Di2015NewLine         db.Add((short)66);Di2015NewLine         db.Add((int)67);Di2015NewLine         db.Add((long)68);Di2015NewLine         db.Add((uint)69);Di2015NewLine         db.Add((ushort)70);Di2015NewLine         db.Add((ulong)71);Di2015NewLine         db.Add(4.2D);Di2015NewLine         db.Add(4.3F);Di2015NewLine         db.Add(4.4M);Di2015NewLine         db.Add('a');Di2015NewLine         db.Add(true);Di2015NewLine         db.Add(false);Di2015NewLine         db.Add("Hi");Di2015NewLine         db.Add(null);Di2015NewLine         db.Scan(p.handler);Di2015NewLine    }Di2015NewLineDi2015NewLine    main() {}Di2015NewLineDi2015NewLine    public void print(string s) {Di2015NewLine         Console.WriteLine(s);Di2015NewLineDi2015NewLine   }Di2015NewLine}Di2015NewLine
618242Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineDi2015NewLinepublic delegate void ProcessItem(Object i);Di2015NewLinepublic class DataBase : ArrayList {Di2015NewLine    public DataBase() {}Di2015NewLine    public void Scan(ProcessItem handler) {Di2015NewLineDi2015NewLine        foreach (object o in this) {Di2015NewLine            handler(o);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic interface IPrint {Di2015NewLine    void print(string s);Di2015NewLineDi2015NewLine}Di2015NewLine
618242Di2015UniqueSeparatorpackage P;Di2015NewLineDi2015NewLine=for interfaceDi2015NewLineDi2015NewLineinterface ProcessItem;  # a delegate typeDi2015NewLineinterface IPrint;Di2015NewLineinterface System.Object;Di2015NewLineDi2015NewLineinterface P {Di2015NewLine    static P P(IPrint ip);Di2015NewLine    readonly ProcessItem handler;Di2015NewLine    void x(System.Object y);Di2015NewLine    private field IPrint ip;Di2015NewLine}Di2015NewLineDi2015NewLine=cutDi2015NewLineDi2015NewLinesub P {Di2015NewLine    my($self, $ip) = @_;Di2015NewLine    $self->{ip} = $ip;Di2015NewLine}Di2015NewLineDi2015NewLinesub handler {Di2015NewLine    my $self = shift;Di2015NewLine    return ProcessItem->new($self, "x");Di2015NewLine}Di2015NewLineDi2015NewLinesub x {Di2015NewLine    my($self, $obj) = @_;Di2015NewLine    $obj = "<undef>" unless defined $obj;Di2015NewLine    $obj = '""' unless length $obj;Di2015NewLine    $self->{ip}->print("XXX $obj");Di2015NewLine}Di2015NewLineDi2015NewLine1;Di2015NewLine
618300Di2015UniqueSeparatorvoid RemTransp(string file) {Di2015NewLine    Bitmap src = new Bitmap(file);Di2015NewLine    Bitmap target = new Bitmap(src.Size.Width,src.Size.Height);Di2015NewLine    Graphics g = Graphics.FromImage(target);Di2015NewLine    g.DrawRectangle(new Pen(new SolidBrush(Color.White)), 0, 0, target.Width, target.Height);Di2015NewLine    g.DrawImage(src, 0, 0);Di2015NewLine    target.Save("Your target path");Di2015NewLine}Di2015NewLine
618312Di2015UniqueSeparatorif(!Enum.IsDefined(typeof(MyEnum), value))Di2015NewLine     throw new ArgumentOutOfRangeException();Di2015NewLine
618319Di2015UniqueSeparatorpublic class AddableArray<T> : IEnumerable<T> {Di2015NewLineDi2015NewLine\private T[] _array;Di2015NewLineDi2015NewLine\public AddableArray(int len) {Di2015NewLine\\_array = new T[len];Di2015NewLine\}Di2015NewLineDi2015NewLine\public AddableArray(params T[] values) : this((IEnumerable<T>)values) {}Di2015NewLineDi2015NewLine\public AddableArray(IEnumerable<T> values) {Di2015NewLine\\int len;Di2015NewLine\\if (values is ICollection<T>) {Di2015NewLine\\\len = ((ICollection<T>)values).Count;Di2015NewLine\\} else {Di2015NewLine\\\len = values.Count();Di2015NewLine\\}Di2015NewLine\\_array = new T[len];Di2015NewLine\\int pos = 0;Di2015NewLine\\foreach (T value in values) {Di2015NewLine\\\_array[pos] = value;Di2015NewLine\\\pos++;Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine\public int Length { get { return _array.Length; } }Di2015NewLineDi2015NewLine\public T this[int index] {Di2015NewLine\\get { return _array[index]; }Di2015NewLine\\set { _array[index] = value; }Di2015NewLine\}Di2015NewLineDi2015NewLine\public static AddableArray<T> operator +(AddableArray<T> a1, AddableArray<T> a2) {Di2015NewLine\\int len1 = a1.Length;Di2015NewLine\\int len2 = a2.Length;Di2015NewLine\\AddableArray<T> result = new AddableArray<T>(len1 + len2);Di2015NewLine\\for (int i = 0; i < len1; i++) {Di2015NewLine\\\result[i] = a1[i];Di2015NewLine\\}Di2015NewLine\\for (int i = 0; i < len2; i++) {Di2015NewLine\\\result[len1 + i] = a2[i];Di2015NewLine\\}Di2015NewLine\\return result;Di2015NewLine\}Di2015NewLineDi2015NewLine\public IEnumerator<T> GetEnumerator() {Di2015NewLine\\foreach (T value in _array) {Di2015NewLine\\\yield return value;Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine\IEnumerator System.Collections.IEnumerable.GetEnumerator() {Di2015NewLine\\return _array.GetEnumerator();Di2015NewLine\}Di2015NewLineDi2015NewLine}Di2015NewLine
618319Di2015UniqueSeparator// create two arraysDi2015NewLineAddableArray<int> a1 = new AddableArray<int>(1, 2, 3);Di2015NewLineAddableArray<int> a2 = new AddableArray<int>(4, 5, 6);Di2015NewLineDi2015NewLine// add themDi2015NewLineAddableArray<int> result = a1 + a2;Di2015NewLineDi2015NewLine// display the resultDi2015NewLineConsole.WriteLine(string.Join(", ", result.Select(n=>n.ToString()).ToArray()));Di2015NewLine
618319Di2015UniqueSeparatorIEnumerable<T>
618319Di2015UniqueSeparatorSelect
618479Di2015UniqueSeparator.ToArray()
618479Di2015UniqueSeparatorT[] arr = new T[list.Count];Di2015NewLinelist.CopyTo(arr, 0);Di2015NewLine
618596Di2015UniqueSeparatorfloat
618596Di2015UniqueSeparatordouble
618596Di2015UniqueSeparator10001.10010110011Di2015NewLine
618596Di2015UniqueSeparatordecimal
618596Di2015UniqueSeparator12345.65789Di2015NewLine
618596Di2015UniqueSeparatordecimal
618596Di2015UniqueSeparatorfloat
618596Di2015UniqueSeparatordouble
618676Di2015UniqueSeparatorthis.dgv.Rows[e.RowIndex].Cells[e.ColumnIndex].ValueDi2015NewLine
618676Di2015UniqueSeparatorthis.dgv.Rows[e.RowIndex].Cells["YOUR_HIDDEN_COLOMN"].Value = "NEW_VALUE"Di2015NewLine
618676Di2015UniqueSeparatorforeach( DataRow Row in YOUR_DATASOURCE.Table[0].Rows)Di2015NewLine{Di2015NewLine   Row.ItemArray[YOUR_HIDDEN_COLOMN_NUMBER] = "YOUR_DEFAULT_VALUE"Di2015NewLine}Di2015NewLine
618696Di2015UniqueSeparatorDomainUpDown.Items
618696Di2015UniqueSeparatorAddRange()
618696Di2015UniqueSeparatorICollection
618696Di2015UniqueSeparatorList<T>
618696Di2015UniqueSeparatorprivate void Init() {Di2015NewLine  List<string> list = new List<string>();Di2015NewLine  list = get4000Strings(); //4000 itemsDi2015NewLine  domainUpDown1.Items.Clear();Di2015NewLine  domainUpDown1.Items.AddRange(list);Di2015NewLine}Di2015NewLine
618696Di2015UniqueSeparatorComboBox
618696Di2015UniqueSeparatorDropDownStyle
618696Di2015UniqueSeparatorDropDownList
618696Di2015UniqueSeparatorcomboBox1.DataSource = list;
619072Di2015UniqueSeparatorif (htColors.Contains(color))Di2015NewLine{Di2015NewLine   int old = (int)htColors[color];Di2015NewLine   htColor[color] = old + 1;Di2015NewLine}Di2015NewLine
619072Di2015UniqueSeparatorhtColor[color] = (int)htColor[color] + 1;Di2015NewLine
619108Di2015UniqueSeparatorSelect
619108Di2015UniqueSeparatorWhere
619108Di2015UniqueSeparatorSelect
619132Di2015UniqueSeparatorextern alias alias1;Di2015NewLineusing alias1::Namespace;Di2015NewLine
619141Di2015UniqueSeparatorclass SomeView Di2015NewLine{Di2015NewLine  void SetData(IEnumerable<DataItem> dataItems) Di2015NewLine  {Di2015NewLine    foreach(DataItem dataItem in dataItems) Di2015NewLine    {Di2015NewLine      ListViewItem lvi = new ListViewItem();Di2015NewLine      lvi.Text = dataItem.Text;Di2015NewLine      ...Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
619164Di2015UniqueSeparatorpublic static void BlockCopy(Di2015NewLine    Array src,Di2015NewLine    int srcOffset,Di2015NewLine    Array dst,Di2015NewLine    int dstOffset,Di2015NewLine    int countDi2015NewLine)Di2015NewLine
619164Di2015UniqueSeparatorfloat[] floatArray = new float[1000];Di2015NewLinebyte[] byteArray = new byte[floatArray.Length * 4];Di2015NewLineDi2015NewLineBuffer.BlockCopy(floatArray, 0, byteArray, 0, byteArray.Length);Di2015NewLine
619200Di2015UniqueSeparator    using Newtonsoft.Json;Di2015NewLine    using Newtonsoft.Json.Linq;Di2015NewLine    using System.IO;Di2015NewLine    using System;Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            string json = Di2015NewLine@"Di2015NewLine{Di2015NewLine   ""roots"": {Di2015NewLine      ""bookmark_bar"": {Di2015NewLine         ""children"": [ {Di2015NewLine            ""children"": [ {Di2015NewLine               ""date_added"": ""12880758517186875"",Di2015NewLine               ""name"": ""Example URL"",Di2015NewLine               ""type"": ""url"",Di2015NewLine               ""url"": ""http://example.com""Di2015NewLine            }, {Di2015NewLine               ""date_added"": ""12880290253039500"",Di2015NewLine               ""name"": ""Another URL"",Di2015NewLine               ""type"": ""url"",Di2015NewLine               ""url"": ""http://example.org""Di2015NewLine            } ],Di2015NewLine        ""date_added"": ""12880772259603750"",Di2015NewLine            ""date_modified"": ""12880772452901500"",Di2015NewLine            ""name"": ""Sample Folder"",Di2015NewLine            ""type"": ""folder""Di2015NewLine         }, {Di2015NewLine            ""date_added"": ""12880823826333250"",Di2015NewLine            ""name"": ""Json.NET"",Di2015NewLine            ""type"": ""url"",Di2015NewLine            ""url"": ""http://james.newtonking.com/pages/json-net.aspx""Di2015NewLine         } ],Di2015NewLine         ""date_added"": ""0"",Di2015NewLine         ""date_modified"": ""12880823831234250"",Di2015NewLine         ""name"": ""Bookmarks bar"",Di2015NewLine         ""type"": ""folder""Di2015NewLine      },Di2015NewLine      ""other"": {Di2015NewLine         ""children"": [  ],Di2015NewLine         ""date_added"": ""0"",Di2015NewLine         ""date_modified"": ""0"",Di2015NewLine         ""name"": ""Other bookmarks"",Di2015NewLine         ""type"": ""folder""Di2015NewLine      }Di2015NewLine   },Di2015NewLine   ""version"": 1Di2015NewLine}Di2015NewLine";Di2015NewLine        using (StringReader reader = new StringReader(json))Di2015NewLine        using (JsonReader jsonReader = new JsonTextReader(reader))Di2015NewLine        {Di2015NewLine            JsonSerializer serializer = new JsonSerializer();Di2015NewLine            var o = (JToken)serializer.Deserialize(jsonReader);Di2015NewLine            var date_added = o["roots"]["bookmark_bar"]["children"][0]["date_added"];Di2015NewLine            Console.WriteLine(date_added);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
619210Di2015UniqueSeparatorIDocument
619210Di2015UniqueSeparatorpublic T OpenDocument<T>(String filename) where T : IDocumentDi2015NewLine{Di2015NewLine    using (FileStream fs = new FileStream(filename, FileMode.Open))Di2015NewLine    {Di2015NewLine        BinaryFormatter bFormatter = new BinaryFormatter();    Di2015NewLine        return (T) bFormatter.Deserialize(fs);Di2015NewLine    }Di2015NewLine}Di2015NewLine
619210Di2015UniqueSeparatorIDocument
619210Di2015UniqueSeparatorpublic IDocument OpenDocument(String filename)Di2015NewLine{Di2015NewLine    using (FileStream fs = new FileStream(filename, FileMode.Open))Di2015NewLine    {Di2015NewLine        BinaryFormatter bFormatter = new BinaryFormatter();    Di2015NewLine        return (IDocument) bFormatter.Deserialize(fs);Di2015NewLine    }Di2015NewLine}Di2015NewLine
619316Di2015UniqueSeparatorpublic GridView GridViewToRebind {get; set;}Di2015NewLine
619351Di2015UniqueSeparatorIndexReader.Open(/* path to index */).Terms(new Term("companyName", String.Empty));Di2015NewLine
619399Di2015UniqueSeparator   public IEnumerable MyListDi2015NewLine   {Di2015NewLine       get { return mMyList;}Di2015NewLine   }Di2015NewLine
619533Di2015UniqueSeparator   public static IEnumerable<T> X2<T>(IEnumerable<T> e)Di2015NewLine   {Di2015NewLine        if (e == null)Di2015NewLine            throw new ArgumentNullException();Di2015NewLine        return X2Helper(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static IEnumerable<T> X2Helper<T>(IEnumerable<T> e)Di2015NewLine    {Di2015NewLine        yield break;Di2015NewLine    }Di2015NewLine
619574Di2015UniqueSeparatorIEnumerable Di2015NewLineDi2015NewLinepublic IEnumerator GetEnumerator();Di2015NewLineDi2015NewLineIEnumeratorDi2015NewLineDi2015NewLinepublic object Current;Di2015NewLinepublic void Reset();Di2015NewLinepublic bool MoveNext();Di2015NewLine
619579Di2015UniqueSeparator// fetch TextEditor from myTextBoxDi2015NewLinePropertyInfo textEditorProperty = typeof(TextBox).GetProperty("TextEditor", BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLineobject textEditor = textEditorProperty.GetValue(myTextBox, null);Di2015NewLineDi2015NewLine// set _OvertypeMode on the TextEditorDi2015NewLinePropertyInfo overtypeModeProperty = textEditor.GetType().GetProperty("_OvertypeMode", BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLineovertypeModeProperty.SetValue(textEditor, true, null);Di2015NewLine
619628Di2015UniqueSeparatorvar button = Page.GetControl("MyButton") as Button;Di2015NewLine
619628Di2015UniqueSeparatorpublic static IEnumerable<Control> Flatten(this ControlCollection controls)Di2015NewLine{Di2015NewLine    List<Control> list = new List<Control>();Di2015NewLine    controls.Traverse(c => list.Add(c));Di2015NewLine    return list;Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static IEnumerable<Control> Flatten(Di2015NewLine    this ControlCollection controls,     Di2015NewLine    Func<Control, bool> predicate)Di2015NewLine{Di2015NewLine    List<Control> list = new List<Control>();Di2015NewLine    controls.Traverse(c => { if (predicate(c)) list.Add(c); });Di2015NewLine    return list;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void Traverse(Di2015NewLine    this ControlCollection controls,Di2015NewLine    Action<Control> action)Di2015NewLine{Di2015NewLine    foreach (Control control in controls)Di2015NewLine    {Di2015NewLine        action(control);Di2015NewLine        if (control.HasControls())Di2015NewLine        {Di2015NewLine            control.Controls.Traverse(action);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static Control GetControl(Di2015NewLine    this Control control,Di2015NewLine    string id)Di2015NewLine{Di2015NewLine    return control.Controls.Flatten(c => c.ID == id).SingleOrDefault();Di2015NewLine}Di2015NewLineDi2015NewLinepublic static IEnumerable<Control> GetControls(Di2015NewLine    this Control control)Di2015NewLine{Di2015NewLine    return control.Controls.Flatten();Di2015NewLine}Di2015NewLine
619645Di2015UniqueSeparatorvar duplicatedSSN =Di2015NewLine    from p in personsDi2015NewLine    group p by p.SSN into gDi2015NewLine    where g.Count() > 1Di2015NewLine    select g.Key;Di2015NewLine
619645Di2015UniqueSeparatorvar duplicated = persons.FindAll( p => duplicatedSSN.Contains(p.SSN) );Di2015NewLine
619645Di2015UniqueSeparatorduplicated.ForEach( dup => persons.Remove(dup) ); Di2015NewLine
619778Di2015UniqueSeparatorType.InvokeMember()
619778Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineMyObject obj = new MyObject();Di2015NewLineobj.GetType().InvokeMember("Name",Di2015NewLine    BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetProperty,Di2015NewLine    Type.DefaultBinder, obj, "MyName");Di2015NewLine
619778Di2015UniqueSeparatorobj
619778Di2015UniqueSeparatorName
619778Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineMyObject obj = new MyObject();Di2015NewLinePropertyInfo prop = obj.GetType().GetProperty("Name", BindingFlags.Public | BindingFlags.Instance);Di2015NewLineif(null != prop && prop.CanWrite)Di2015NewLine{Di2015NewLine    prop.SetValue(obj, "MyName", null);Di2015NewLine}Di2015NewLine
619832Di2015UniqueSeparatorpublic class DocBaseDi2015NewLine{Di2015NewLine  public virtual void DoSomething()Di2015NewLine  {Di2015NewLineDi2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Document : DocBase, IStorableDi2015NewLine{Di2015NewLine  public override void DoSomething()Di2015NewLine  {Di2015NewLine    // Some implementationDi2015NewLine    base.DoSomething();Di2015NewLine  }Di2015NewLineDi2015NewLine  #region IStorable MembersDi2015NewLineDi2015NewLine  public void Store()Di2015NewLine  {Di2015NewLine    // Implement this one aswell..Di2015NewLine    throw new NotImplementedException();Di2015NewLine  }Di2015NewLineDi2015NewLine  #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine  static void Main()Di2015NewLine  {Di2015NewLine    DocBase doc = new Document();Di2015NewLine    // Now you will need a cast to reach IStorable membersDi2015NewLine    IStorable storable = (IStorable)doc;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IStorableDi2015NewLine{Di2015NewLine  void Store();Di2015NewLine}Di2015NewLine
619834Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Web.UI;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLinepublic partial class _Default : PageDi2015NewLine{Di2015NewLine    protected override void OnLoad(EventArgs e)Di2015NewLine    {Di2015NewLine    \base.OnLoad(e);Di2015NewLineDi2015NewLine    \Response.Write("<h1>please wait...</h1>");Di2015NewLine    \Response.Flush();Di2015NewLineDi2015NewLine        // simulate load timeDi2015NewLine    \Thread.Sleep(2000);Di2015NewLineDi2015NewLine    \Response.Write("<h1>finished</h1>");Di2015NewLine    }Di2015NewLine}Di2015NewLine
619859Di2015UniqueSeparatorpublic class Foo : IParameterlessConstructorDi2015NewLine{Di2015NewLine    public Foo() // As per the interfaceDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Bar : FooDi2015NewLine{Di2015NewLine    // Yikes! We now don't have a parameterless constructor...Di2015NewLine    public Bar(int x)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
619913Di2015UniqueSeparatorvar q = from s in stepDi2015NewLine         let us = (from i in userStep where s.Id = i.StepId).SingleOrDefault()Di2015NewLine         select new UserCompletionDi2015NewLine         {Di2015NewLine           StepId = s.Id,Di2015NewLine           Headline = s.StepName,Di2015NewLine           ProfileId = us.ProfileIdDi2015NewLine           Completed = us == null ? false : us.CompletedDi2015NewLine          };Di2015NewLine
619913Di2015UniqueSeparatorselect Di2015NewLine    StepId, Headline, ProfileId,Di2015NewLine    isnull((select top(1) Completed from userStep where StepId = Id), 0) as CompletedDi2015NewLinefrom stepDi2015NewLine
619947Di2015UniqueSeparatorthrow new NotImplementedException("Unhandled Mood: " + mood)
619947Di2015UniqueSeparatorDebug.Fail()
620012Di2015UniqueSeparatorprivate void SetVisibility(Control target, bool visible)Di2015NewLine{Di2015NewLine    if (target.InvokeRequired)Di2015NewLine    {Di2015NewLine        target.Invoke(new EventHandler(Di2015NewLine            delegateDi2015NewLine            {Di2015NewLine                target.Visible = visible;Di2015NewLine            }));Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        target.Visible = visible;Di2015NewLine    }Di2015NewLine}Di2015NewLine
620103Di2015UniqueSeparatorstring postData = "userid=ducon";Di2015NewLine            postData += "&username=camarche" ;Di2015NewLine            byte[] data = Encoding.ASCII.GetBytes(postData);Di2015NewLine            WebRequest req = WebRequest.Create(Di2015NewLine                URL);Di2015NewLine            req.Method = "POST";Di2015NewLine            req.ContentType = "application/x-www-form-urlencoded";Di2015NewLine            req.ContentLength = data.Length;Di2015NewLine            Stream newStream = req.GetRequestStream();Di2015NewLine            newStream.Write(data, 0, data.Length);Di2015NewLine            newStream.Close();Di2015NewLine            StreamReader reader = new StreamReader(req.GetResponse().GetResponseStream(), System.Text.Encoding.GetEncoding("iso-8859-1"));Di2015NewLine            string coco = reader.ReadToEnd();Di2015NewLine
620140Di2015UniqueSeparatorthis.Session["UserName"] = userName;Di2015NewLine
620140Di2015UniqueSeparatorthis.Session["UserName"]
620140Di2015UniqueSeparatorSession
620140Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Web;Di2015NewLineDi2015NewLinestatic class SessionManagerDi2015NewLine{Di2015NewLine    public static String UserNameDi2015NewLine    {Di2015NewLine    \getDi2015NewLine    \{Di2015NewLine    \\return HttpContext.Current.Session["UserName"].ToString();Di2015NewLine    \}Di2015NewLine    \setDi2015NewLine    \{Di2015NewLine    \\HttpContext.Current.Session["UserName"] = value;Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine        // add other properties as neededDi2015NewLine}Di2015NewLine
620140Di2015UniqueSeparatorSessionManager.UserNameDi2015NewLine
620165Di2015UniqueSeparatorps> $ps = $ps.Commands.Add("get-process")Di2015NewLineps> $ps = $ps.Commands.Add("select-object")Di2015NewLineps> $ps.Commands[1].Parameters.Add("Property", @("Name", '@{N="Foo";E={"Bar"}}'))Di2015NewLine
620165Di2015UniqueSeparatorps> $ps.Commands[1].Parameters.Add("Property", @("Name", @{N="Foo";E={"Bar"}}))Di2015NewLine
620165Di2015UniqueSeparatorproperties.Add("@{N=\\"Foo\\";E={\\"Bar\\"}}");Di2015NewLine
620165Di2015UniqueSeparatorproperties.Add(Di2015NewLine    new Hashtable {Di2015NewLine        {"N", "Foo"},Di2015NewLine        {"E", System.Mananagement.Automation.ScriptBlock.Create("\\"Foo\\"")}Di2015NewLine    }Di2015NewLine);Di2015NewLine
620457Di2015UniqueSeparatorout
620478Di2015UniqueSeparator<join table>
620519Di2015UniqueSeparatorMyType foo = new MyType.Builder {Parameter1 = 10, Parameter2 = 20}.Build();Di2015NewLine
620519Di2015UniqueSeparatorMyObjectValues.Select(currentItems => new MyType.BuilderDi2015NewLine{Di2015NewLine     Parameter1 = currentItems.Value1,Di2015NewLine     Parameter2 = currentItems.Value2Di2015NewLine}.Build());Di2015NewLine
620519Di2015UniqueSeparatorBuilder
620519Di2015UniqueSeparatorMyType
620519Di2015UniqueSeparatorMyType
620519Di2015UniqueSeparatorBuild()
620544Di2015UniqueSeparatorOrderBy
620544Di2015UniqueSeparatorvar sorted = array.OrderBy(item => item.Fields["FieldName"].Value);Di2015NewLine
620544Di2015UniqueSeparatorvar sorted = array.OrderBy(item => int.Parse(item.Fields["FieldName"].Value));Di2015NewLine
620544Di2015UniqueSeparatorToArray()
620544Di2015UniqueSeparatorvar sorted = array.OrderBy(item => int.Parse(item.Fields["FieldName"].Value))Di2015NewLine                  .ToArray();Di2015NewLine
620544Di2015UniqueSeparatorArray.Sort
620549Di2015UniqueSeparatorforeach (ListViewItem HazPackErrItems in HazmatPackageErrorListview.Items)Di2015NewLine    {Di2015NewLine        string HazPackErrRow = " ";Di2015NewLineDi2015NewLine        bool first = true;Di2015NewLine        foreach (ListViewItem.ListViewSubItem HazPackErrSub in HazPackErrItems.SubItems)Di2015NewLine        {Di2015NewLine            if (first) Di2015NewLine                first = false;Di2015NewLine            elseDi2015NewLine                HazPackErrRow += " " + HazPackErrSub.Text + ",";Di2015NewLine        }Di2015NewLine        // Remove comma after last element of string.Di2015NewLine        HazPackErrRow = HazPackErrRow.Substring(0, HazPackErrRow.Length - 2); Di2015NewLine        MessageBox.Show(HazPackErrRow); // List concatenated subitemsDi2015NewLine    }Di2015NewLine
620600Di2015UniqueSeparatorL
620600Di2015UniqueSeparatorR
620600Di2015UniqueSeparatorT
620600Di2015UniqueSeparatorLR
620600Di2015UniqueSeparatorL & R
620600Di2015UniqueSeparatorL | R
620600Di2015UniqueSeparatorTR(L)
620600Di2015UniqueSeparatorTR^-1(L)
620600Di2015UniqueSeparator([A-Za-z0-9+/]{4})*(|[A-Za-z0-9+/]{2}(==|[A-Za-z0-9+/]=)
620600Di2015UniqueSeparator[?&][^?&#=;]+=([A-Za-z0-9+/]{4})*(|[A-Za-z0-9+/]{2}(%3D%3D|[A-Za-z0-9+/]%3D)
620600Di2015UniqueSeparator[?&][^?&#=;]+=Oi8v([A-Za-z0-9+/]{4})*(|[A-Za-z0-9+/]{2}(%3D%3D|[A-Za-z0-9+/]%3D)
620619Di2015UniqueSeparatorstring fileName = "something";Di2015NewLineforeach (char c in System.IO.Path.GetInvalidFileNameChars())Di2015NewLine{Di2015NewLine   fileName = fileName.Replace(c, '_');Di2015NewLine}Di2015NewLine
620619Di2015UniqueSeparatorGetInvalidFileNameChars()
620619Di2015UniqueSeparatorStringBuilder
620960Di2015UniqueSeparatorPrivate _SourceCode As String = NothingDi2015NewLinePrivate ReadOnly Property SourceCode() As StringDi2015NewLine                GetDi2015NewLine                    If _SourceCode = Nothing ThenDi2015NewLine                        Dim thisCodeFile As String = Server.MapPath("~").ToString & "\\" & Type.GetType(Me.GetType.BaseType.FullName).ToString & ".aspx.vb"Di2015NewLine                        _SourceCode = My.Computer.FileSystem.ReadAllText(thisCodeFile)Di2015NewLine                    End IfDi2015NewLine                    Return _SourceCodeDi2015NewLine                End GetDi2015NewLineEnd Property  Di2015NewLineDi2015NewLinePrivate Function extractProcedureDefinition(ByVal procedureName As String) As StringDi2015NewLine   Return extractStringContents(Me.SourceCode, "Sub " & procedureName & "()", "End Sub", True)Di2015NewLineEnd Function  Di2015NewLineDi2015NewLinePrivate Function extractFunctionDefinition(ByVal procedureName As String) As StringDi2015NewLine   'TODO: This works now, but wouldn't if we wanted includeTags = False, as it does not properly handle the "As xxxxx" portionDi2015NewLine   Return extractStringContents(Me.SourceCode, "Function " & procedureName, "End Sub", True)Di2015NewLineEnd FunctionDi2015NewLineDi2015NewLine    Private Function extractStringContents(ByVal body As String, ByVal openTag As String, ByVal closeTag As String, ByVal includeTags As Boolean) As StringDi2015NewLine                Dim iStart As Integer = body.IndexOf(openTag)Di2015NewLine                Dim iEnd As Integer = body.IndexOf(closeTag, iStart)Di2015NewLine                If includeTags ThenDi2015NewLine                    iEnd += closeTag.LengthDi2015NewLine                ElseDi2015NewLine                    iStart += openTag.LengthDi2015NewLine                End IfDi2015NewLine                Return body.Substring(iStart, iEnd - iStart)Di2015NewLine    End FunctionDi2015NewLine
621069Di2015UniqueSeparatorIXmlLineInfo
621069Di2015UniqueSeparatorXmlReader
621069Di2015UniqueSeparatorIXmlLineInfo xmlInfo = (IXmlLineInfo)reader;Di2015NewLineint lineNumber = xmlInfo.LineNumber;Di2015NewLine
621287Di2015UniqueSeparator    <asp:Silverlight ID="Xaml1" runat="server"Di2015NewLine     Source="~/ClientBin_SilverlightApplication1.xap" Di2015NewLine                 MinimumVersion="2.0.30523" Width="100%" Height="100%">Di2015NewLine             <PluginNotInstalledTemplate>Di2015NewLineDi2015NewLineDi2015NewLine             Your Content goes here.Di2015NewLineDi2015NewLineDi2015NewLine             </PluginNotInstalledTemplate>Di2015NewLine        </asp:Silverlight>Di2015NewLine
621349Di2015UniqueSeparatorUseItemStyleForSubItems
621349Di2015UniqueSeparatorfalse
621403Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    for (int i = 0; i < 50; i++)Di2015NewLine    {Di2015NewLine        CheckBox _checkbox = new CheckBox();Di2015NewLine        _checkbox.ID = "dynamicCheckListBox" + Convert.ToString(i);Di2015NewLine        Panel1.Controls.Add(_checkbox);Di2015NewLineDi2015NewLine        LiteralControl dynLabel = new LiteralControl("<Label id='fnameID" Di2015NewLine            + i + "' >test" + i + "</Label><br/>");Di2015NewLine        dynLabel.ID = "fnameID" + i.ToString();Di2015NewLineDi2015NewLine        Panel1.Controls.Add(dynLabel);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
621403Di2015UniqueSeparatorFindControl
621403Di2015UniqueSeparatornull
621403Di2015UniqueSeparatorText
621403Di2015UniqueSeparatornull
621416Di2015UniqueSeparatorpublic void Fill<T>(IList<T> list)Di2015NewLine{Di2015NewLine    // add a bunch of items to listDi2015NewLine}Di2015NewLine
621506Di2015UniqueSeparatorpublic static byte[] ToByteArray(this float[] floatArray) {Di2015NewLine\int len = floatArray.Length * 4;Di2015NewLine\byte[] byteArray = new byte[len];Di2015NewLine\int pos = 0;Di2015NewLine\foreach (float f in floatArray) {Di2015NewLine\\byte[] data = BitConverter.GetBytes(f);Di2015NewLine\\Array.Copy(data, 0, byteArray, pos, 4);Di2015NewLine\\pos += 4;Di2015NewLine\}Di2015NewLine\return byteArray;Di2015NewLine}Di2015NewLine
621582Di2015UniqueSeparator[DllImport("User32.dll", CharSet=CharSet.Auto)]Di2015NewLinepublic static extern IntPtr SetClipboardViewer(IntPtr hWndNewViewer);Di2015NewLine
621582Di2015UniqueSeparator_ClipboardViewerNext = SetClipboardViewer(this.Handle);Di2015NewLine
621582Di2015UniqueSeparatorWM_DRAWCLIPBOARD
621582Di2015UniqueSeparatorWndProc
621582Di2015UniqueSeparatorprotected override void WndProc(ref Message m)Di2015NewLine{Di2015NewLine    switch ((Win32.Msgs)m.Msg)Di2015NewLine    {Di2015NewLine        case Win32.Msgs.WM_DRAWCLIPBOARD:Di2015NewLine        // Handle clipboard changedDi2015NewLine        break;Di2015NewLine        // ... Di2015NewLine   }Di2015NewLine}Di2015NewLine
621620Di2015UniqueSeparatorSession["loginId"]
621620Di2015UniqueSeparatorSystem.Web.HttpContext.Current.Session["loginId"].
621620Di2015UniqueSeparatorpublic class MySessionDi2015NewLine{Di2015NewLine    // private constructorDi2015NewLine    private MySession()Di2015NewLine    {Di2015NewLine      Property1 = "default value";Di2015NewLine    }Di2015NewLineDi2015NewLine    // Gets the current session.Di2015NewLine    public static MySession CurrentDi2015NewLine    {Di2015NewLine      getDi2015NewLine      {Di2015NewLine        MySession session =Di2015NewLine          (MySession)HttpContext.Current.Session["__MySession__"];Di2015NewLine        if (session == null)Di2015NewLine        {Di2015NewLine          session = new MySession();Di2015NewLine          HttpContext.Current.Session["__MySession__"] = session;Di2015NewLine        }Di2015NewLine        return session;Di2015NewLine      }Di2015NewLine    }Di2015NewLineDi2015NewLine    // **** add your session properties here, e.g like this:Di2015NewLine    public string Property1 { get; set; }Di2015NewLine    public DateTime MyDate { get; set; }Di2015NewLine    public int LoginId { get; set; }Di2015NewLine}Di2015NewLine
621620Di2015UniqueSeparatorint loginId = MySession.Current.LoginId;Di2015NewLineDi2015NewLinestring property1 = MySession.Current.Property1;Di2015NewLineMySession.Current.Property1 = newValue;Di2015NewLineDi2015NewLineDateTime myDate = MySession.Current.MyDate;Di2015NewLineMySession.Current.MyDate = DateTime.Now;Di2015NewLine
621647Di2015UniqueSeparatorforeach (string objectName in this.ObjectNames)Di2015NewLine{Di2015NewLine    // Line to jump to when this.MoveToNextObject is true.Di2015NewLine    this.ExecuteSomeCode();Di2015NewLine    while (this.boolValue)Di2015NewLine    {Di2015NewLine        if (this.MoveToNextObject())Di2015NewLine        {Di2015NewLine            // What should go here to jump to next object.Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if (! this.boolValue) continue; // continue foreachDi2015NewLineDi2015NewLine    this.ExecuteSomeOtherCode();Di2015NewLine}Di2015NewLine
621702Di2015UniqueSeparatorUdpClient u = new UdpClient(remoteAddress, 1);Di2015NewLineIPAddress localAddr = ((IPEndPoint)u.Client.LocalEndPoint).Address;Di2015NewLine
621702Di2015UniqueSeparatorDi2015NewLineforeach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())Di2015NewLine{Di2015NewLine   IPInterfaceProperties ipProps = nic.GetIPProperties();Di2015NewLine   // check if localAddr is in ipProps.UnicastAddressesDi2015NewLine}Di2015NewLine
621702Di2015UniqueSeparatorGetIPProperties()
621702Di2015UniqueSeparatorIPv4InterfaceProperties.Index
621795Di2015UniqueSeparator// windowed : int -> seq<'a> -> seq<array<'a>>Di2015NewLinelet windowed n (s: seq<_>) =    Di2015NewLine    if n <= 0 then Helpers.invalid_arg2 "n" "the window size must be positive"Di2015NewLine    { let arr = Array.zero_create n Di2015NewLine      let r = ref (n-1)Di2015NewLine      let i = ref 0 Di2015NewLine      use e = s.GetEnumerator() Di2015NewLine      while e.MoveNext() do Di2015NewLine          do arr.[!i] <- e.CurrentDi2015NewLine          do i := (!i + 1) % n Di2015NewLine          if !r = 0 then Di2015NewLine              yield Array.init n (fun j -> arr.[(!i+j) % n])Di2015NewLine          else Di2015NewLine              do r := (!r - 1) }Di2015NewLine
621836Di2015UniqueSeparatorint pos = 0;Di2015NewLinefor (int i = 0; i < values.Count; i += 2, pos++) {Di2015NewLine\values[pos] = values[i];Di2015NewLine}Di2015NewLinevalues.RemoveRange(pos, values.Count - pos);Di2015NewLine
621845Di2015UniqueSeparator<StackPanel Di2015NewLine  ...Di2015NewLine  Name="m_panel" />Di2015NewLine
621845Di2015UniqueSeparatorpublic void onClick1(Object h , RoutedEventArgs arg)Di2015NewLine{Di2015NewLine    p.FirstName = list[0].FirstName;Di2015NewLine    p.LastName = list[0].LastName;Di2015NewLine    m_panel.DataContext = p;Di2015NewLine}Di2015NewLine
621847Di2015UniqueSeparatorSystem.Enumerable.Empty<T>
622087Di2015UniqueSeparator<asp:GridView ID="gv" runat="server"Di2015NewLine              PageSize="5" AllowPaging="true">Di2015NewLine   <PagerSettings Visible="false" />Di2015NewLine</asp:GridView>Di2015NewLine
622163Di2015UniqueSeparatorstring data = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);Di2015NewLinestring name = System.Reflection.Assembly.GetExecutingAssembly().GetName().Name;Di2015NewLinestring path = Path.Combine(data, name);Di2015NewLineDi2015NewLineif (Directory.Exists(path))Di2015NewLine{Di2015NewLine  // application has been runDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine  // create the directory on first runDi2015NewLine  DirectoryInfo di = Directory.CreateDirectory(appPath);Di2015NewLine}Di2015NewLine
622266Di2015UniqueSeparatorT
622266Di2015UniqueSeparatorAttribute
622266Di2015UniqueSeparatorpublic class Foo<T> : Di2015NewLine   where T : AttributeDi2015NewLine{Di2015NewLine    public string GetTypeId(T attr) { return attr.TypeId.ToString(); }Di2015NewLine // ..Di2015NewLine}Di2015NewLineDi2015NewLineFoo<DescriptionAttribute> bar; // OK, DescriptionAttribute inherits AttributeDi2015NewLineFoo<int> baz; // Compiler error, int does not inherit AttributeDi2015NewLine
622266Di2015UniqueSeparatorT
622266Di2015UniqueSeparatorT
622266Di2015UniqueSeparatorAttribute
622266Di2015UniqueSeparatorGetTypeId
622266Di2015UniqueSeparatorTypeId
622266Di2015UniqueSeparatorattr
622266Di2015UniqueSeparatorTypeId
622266Di2015UniqueSeparatorAttribute
622266Di2015UniqueSeparatorattr
622266Di2015UniqueSeparatorT
622266Di2015UniqueSeparatorAttribute
622266Di2015UniqueSeparatorpublic static void GetTypeId<T>(T attr) where T : AttributeDi2015NewLine{Di2015NewLine   return attr.TypeId.ToString();Di2015NewLine}Di2015NewLine
622266Di2015UniqueSeparatorwhere T: struct
622266Di2015UniqueSeparatorwhere T : class
622266Di2015UniqueSeparatorwhere T : new()
622266Di2015UniqueSeparatorwhere T : <base class name>
622266Di2015UniqueSeparatorwhere T : <interface name>
622266Di2015UniqueSeparatorwhere T : U
622332Di2015UniqueSeparatorGCLog.Register();
622332Di2015UniqueSeparator#region File HeaderDi2015NewLine// This file Copyright © 2007 Lasse Vågsæther Karlsen, All rights reserved.Di2015NewLine//Di2015NewLine// $Id: GCLog.cs 135 2008-05-28 11:28:37Z lassevk $Di2015NewLine#endregionDi2015NewLineDi2015NewLine#region UsingDi2015NewLineDi2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing Gurock.SmartInspect;Di2015NewLineDi2015NewLine#endregionDi2015NewLineDi2015NewLinenamespace PresentationModeDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// This class is used to get a running log of the number of garbage collections that occur,Di2015NewLine    /// when running with logging.Di2015NewLine    /// </summary>Di2015NewLine    public sealed class GCLogDi2015NewLine    {Di2015NewLine        #region Construction & DestructionDi2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Releases unmanaged resources and performs other cleanup operations before theDi2015NewLine        /// <see cref="GCLog"/> is reclaimed by garbage collection.Di2015NewLine        /// </summary>Di2015NewLine        ~GCLog()Di2015NewLine        {Di2015NewLine            SiAuto.Main.LogMessage("GARBAGE COLLECTED");Di2015NewLine            if (!AppDomain.CurrentDomain.IsFinalizingForUnload() && !Environment.HasShutdownStarted)Di2015NewLine                new GCLog();Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region Public Static MethodsDi2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Registers this instance.Di2015NewLine        /// </summary>Di2015NewLine        public static void Register()Di2015NewLine        {Di2015NewLine#if DEBUGDi2015NewLine            if (SiAuto.Si.Enabled)Di2015NewLine                new GCLog();Di2015NewLine#endifDi2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLine}Di2015NewLine
622492Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Project ToolsVersion="3.5"xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine<PropertyGroup>Di2015NewLine    <OutputPath>$(SolutionDir)output</OutputPath>Di2015NewLine    <WarningLevel>4</WarningLevel>Di2015NewLine    <UseVSHostingProcess>false</UseVSHostingProcess>Di2015NewLine    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>Di2015NewLine</PropertyGroup>Di2015NewLine</Project>Di2015NewLine
622492Di2015UniqueSeparator<Import Project="..\\Common.proj" />Di2015NewLine
622523Di2015UniqueSeparatorpublic class SocketState : IDisposableDi2015NewLine{Di2015NewLine  Socket _socket;Di2015NewLineDi2015NewLine  public SocketState()Di2015NewLine  {Di2015NewLine    _socket = new Socket();Di2015NewLine  }Di2015NewLineDi2015NewLine  public bool IsDisposed { get; private set; }Di2015NewLineDi2015NewLine  public void SomeMethod()Di2015NewLine  {Di2015NewLine    if (IsDisposed)Di2015NewLine      throw new ObjectDisposedException("SocketState");Di2015NewLineDi2015NewLine    // Some other codeDi2015NewLine  }Di2015NewLineDi2015NewLine  #region IDisposable MembersDi2015NewLineDi2015NewLine  public void Dispose()Di2015NewLine  {Di2015NewLine    Dispose(true);Di2015NewLine    GC.SuppressFinalize(this);Di2015NewLine  }Di2015NewLineDi2015NewLine  protected virtual void Dispose(bool disposing)Di2015NewLine  {Di2015NewLine    if (!IsDisposed)Di2015NewLine    {Di2015NewLine      if (disposing)Di2015NewLine      {Di2015NewLine        if (_socket != null)Di2015NewLine        {Di2015NewLine          _socket.Close();Di2015NewLine        }Di2015NewLine      }Di2015NewLineDi2015NewLine      // disposed unmanaged resourcesDi2015NewLineDi2015NewLine      IsDisposed = true;Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  ~SocketState()Di2015NewLine  {Di2015NewLine    Dispose(false);Di2015NewLine  }Di2015NewLineDi2015NewLine  #endregionDi2015NewLine}Di2015NewLine
622542Di2015UniqueSeparator<Button Content="Di2015NewLine    {Binding Source={x:Static local:MyStaticType.Localization}, Di2015NewLine             Path=HelloButtonTitle}" />Di2015NewLine
622585Di2015UniqueSeparatorusing System.Runtime.CompilerServices;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// A COM interface is needed because .NET does not provide a wayDi2015NewLine/// to set the properties of a HTML script element.Di2015NewLine/// This class negates the need to refrence mshtml in its entiretyDi2015NewLine/// </summary>Di2015NewLine[ComImport, Guid("3050F536-98B5-11CF-BB82-00AA00BDCE0B"),Di2015NewLineInterfaceType((short)2),Di2015NewLineTypeLibType((short)0x4112)]Di2015NewLinepublic interface IHTMLScriptElementDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Sets the text propertyDi2015NewLine    /// </summary>Di2015NewLine    [DispId(1006)]Di2015NewLine    string TextDi2015NewLine    {Di2015NewLine        [param: MarshalAs(UnmanagedType.BStr)]Di2015NewLine        [PreserveSig,Di2015NewLine        MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime),Di2015NewLine        DispId(-2147417085)]Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Sets the src propertyDi2015NewLine    /// </summary>Di2015NewLine    [DispId(1001)]Di2015NewLine    string SrcDi2015NewLine    {Di2015NewLine        [param: MarshalAs(UnmanagedType.BStr)]Di2015NewLine        [PreserveSig,Di2015NewLine        MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime),Di2015NewLine        DispId(-1001)]Di2015NewLine        set;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// Inject script elementDi2015NewLinepublic static void InjectJavascript(string javascript, HTMLDocument doc)Di2015NewLine{Di2015NewLine    if (doc != null)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            // find the opening head tagDi2015NewLine            HtmlElement head =  doc.GetElementsByTagName("head")[0];Di2015NewLine            // create the script elementDi2015NewLine            HtmlElement script =  doc.CreateElement("script");Di2015NewLine            // set it to javascirptDi2015NewLine            script.SetAttribute("type", "text/javascript");Di2015NewLine            // cast the element to our custom interfaceDi2015NewLine            IHTMLScriptElement element = (IHTMLScriptElement)script.DomElement;Di2015NewLine            // add the script code to the elementDi2015NewLine            element.Text = "/* <![CDATA[ */ " + javascript + " /* ]]> */";Di2015NewLine            // add the element to the documentDi2015NewLine            head.AppendChild(script);Di2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            MessageBox.show(e.message);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
622585Di2015UniqueSeparatorInjectJavascript("function foo(bar) { alert(bar); }", myDoc); // inject the 'foo' functionDi2015NewLine
622585Di2015UniqueSeparatormyDoc.InvokeScript("foo", new object[] { "Hello!" }); // alerts 'hello!'Di2015NewLine
