{"595": "curs.execute('select * from people')\nfor row in curs:\n    print row\n"}
{"595": "for row in curs.fetchall():\n    print row\n"}
{"595": "curs.execute('select first_name from people')\nnames = [row[0] for row in curs.fetchall()]\n"}
{"595": "curs.execute('select max(x) from t')\nmaxValue = curs.fetchone()[0]\n"}
{"595": "row = curs.fetchone()\nwhile row:\n    print row\n    row = curs.fetchone()\n"}
{"701": "    files = os.listdir(path)                               \n    test = re.compile(\"test\\.py$\", re.IGNORECASE)          \n    files = [f for f in files if test.search(f)]\n"}
{"735": "#!/bin/python\nbar in dict(Foo)\n"}
{"735": "#!/bin/python\nbaz = dict([(key, value) for key, value in foo if bar in value])\n"}
{"750": "foo = 12\nfoo in iter_attr(bar, 'id')"}
{"750": "foo = 12\nfoo in [obj.id for obj in bar]"}
{"777": "#!/usr/bin/python\n\nmodule_name = 'MySQLdb'\nhead = '''Content-Type: text/html\n\n%s is ''' % module_name\n\ntry:\n    __import__(module_name)\n    print head + 'installed'\nexcept ImportError:\n    print head + 'not installed'\n"}
{"783": "groups = []\nuniquekeys = []\nfor k, g in groupby(data, keyfunc):\n    groups.append(list(g))      # Store group iterator as a list\n    uniquekeys.append(k)\n"}
{"802": "import cgi\nimport cgitb; cgitb.enable()\nimport MySQLdb\n"}
{"802": "import MySQLdb\nimport cgi\nimport cgitb; cgitb.enable()\n"}
{"982": "from SomeOtherProduct.SomeModule import SomeClass\ndef speak(self):\n   return \"ook ook eee eee eee!\"\nSomeClass.speak = speak\n"}
{"984": "class Array\n  def print_length\n    puts length\n  end\nend\n"}
{"984": "array = [1, 2, 3]\ndef array.print_length\n  puts length\nend\n"}
{"1476": "    >>> 0x12AF\n    4783\n    >>> 0x100\n    256\n"}
{"1476": "    >>> 01267\n    695\n    >>> 0100\n    64\n"}
{"1484": ">>> print int('01010101111',2)\n687\n>>> print int('11111111',2)\n255\n"}
{"1829": "import sys\nprint \"\"\"Menu\n1) Say Foo\n2) Say Bar\"\"\"\nanswer = raw_input(\"Make a selection> \")\n\nif \"1\" in answer: print \"foo\"\nelif \"2\" in answer: print \"bar\"\n"}
{"1829": "print menu\nwhile lastKey = \"\":\n    lastKey = check_for_recent_keystrokes()\nif \"1\" in lastKey: #do stuff...\n"}
{"1852": "import msvcrt\nanswer=msvcrt.getch()\n"}
{"1857": ">>> import os\n>>> print os.name\nposix\n>>> import platform\n>>> platform.system()\n'Linux'\n>>> platform.release()\n'2.6.22-15-generic'\n"}
{"1870": "#!C:\\python25\\python.exe\nimport msvcrt\nprint \"\"\"Menu\n1) Say Foo \n2) Say Bar\"\"\"\nwhile 1:\n    char = msvcrt.getch()\n    if char == chr(27): #escape\n        break\n    if char == \"1\":\n        print \"foo\"\n        break\n    if char == \"2\":\n        print \"Bar\"\n        break\n"}
{"1871": ">>> import os\n>>> os.name\n'nt'\n>>> import platform\n>>> platform.system()\n'Windows'\n>>> platform.release()\n'Vista'\n"}
{"1879": ">>> import os\n>>> os.name\n'posix'\n>>> import platform\n>>> platform.system()\n'Darwin'\n>>> platform.release()\n'8.11.1'\n"}
{"2311": "from ftplib import FTP\n\nftpserver = \"myserver\"\nftpuser = \"myuser\"\nftppass = \"mypwd\"\n\nlocfile =  \"g:/test/style.css\"\nftpfile =  \"/temp/style.css\"\n\ntry:\n    ftp = FTP(ftpserver, ftpuser, ftppass)\nexcept:\n    exit (\"Cannot connect\")\n\nf = open (locfile, \"r\")\ntry:\n    ftp.delete (ftpfile)\nexcept:\n    pass\n\n# ftp.sendcmd (\"TYPE I\")\n# ftp.storlines(\"STOR %s\" % ftpfile, f)\nftp.storbinary(\"STOR %s\" % ftpfile, f)\nf.close()\n\nftp.dir (ftpfile)\nftp.quit()\n"}
{"2982": ">>> def foo():\n...     print \"foo\"\n...\n>>> class A:\n...     def bar( self ):\n...         print \"bar\"\n...\n>>> a = A()\n>>> foo\n<function foo at 0x00A98D70>\n>>> a.bar\n<bound method A.bar of <__main__.A instance at 0x00A9BC88>>\n>>>\n"}
{"2982": ">>> def fooFighters( self ):\n...     print \"fooFighters\"\n...\n>>> A.fooFighters = fooFighters\n>>> a2 = A()\n>>> a2.fooFighters\n<bound method A.fooFighters of <__main__.A instance at 0x00A9BEB8>>\n>>> a2.fooFighters()\nfooFighters\n"}
{"2982": ">>> a.fooFighters()\nfooFighters\n"}
{"2982": ">>> def barFighters( self ):\n...     print \"barFighters\"\n...\n>>> a.barFighters = barFighters\n>>> a.barFighters()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: barFighters() takes exactly 1 argument (0 given)\n"}
{"2982": ">>> a.barFighters\n<function barFighters at 0x00A98EF0>\n"}
{"2982": ">>> import types\n>>> a.barFighters = types.MethodType( barFighters, a )\n>>> a.barFighters\n<bound method ?.barFighters of <__main__.A instance at 0x00A9BC88>>\n>>> a.barFighters()\nbarFighters\n"}
{"2982": ">>> a2.barFighters()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: A instance has no attribute 'barFighters'\n"}
{"3071": "import foo\nmethodToCall = getattr(foo, 'bar')\nresult = methodToCall()\n"}
{"3976": "stty -f /dev/cu.usbserial\nspeed 9600 baud;\nlflags: -icanon -isig -iexten -echo\niflags: -icrnl -ixon -ixany -imaxbel -brkint\noflags: -opost -onlcr -oxtabs\ncflags: cs8 -parenb\n"}
{"3976": "#!/usr/bin/python\n\nimport serial\n\nser = serial.Serial('/dev/cu.usbserial', 9600, timeout=10) \nser.write(\"<ID01><PA> \\r\\n\") \nread_chars = ser.read(20)\nprint read_chars\n\nser.close()\n"}
{"4600": ">>> def printme(s): print repr(s)\n>>> class A: pass\n>>> setattr(A,'printme',printme)\n>>> a = A()\n>>> a.printme() # s becomes the implicit 'self' variable\n< __ main __ . A instance at 0xABCDEFG>\n"}
{"4605": "m = __import__ ('foo')\nfunc = getattr(m,'bar')\nfunc()\n"}
{"5165": "LoadModule python_module modules/mod_python.so\n\n<Directory \"/serverbase/htdocs/myapp\">\n  AddHandler mod_python .py\n  PythonHandler myapp\n  PythonDebug On\n"}
{"5165": "$ /serverbase/htdocs/myapp$ ls -l\ntotal 16\n-r-xr-xr-x 1 root sys        6484 May 21 15:54 myapp.py\n"}
{"5430": "$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \\\n    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \\\n    line = u\"\\u0411\\n\"; print type(line), len(line); \\\n    sys.stdout.write(line); print line'\n  UTF-8\n  <type 'unicode'> 2\n  \u0411\n  \u0411\n\n  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \\\n    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \\\n    line = u\"\\u0411\\n\"; print type(line), len(line); \\\n    sys.stdout.write(line); print line' | cat\n  None\n  <type 'unicode'> 2\n  \u0411\n  \u0411\n"}
{"5909": "import urllib\nimport re\n\nurl = \"http://www.someurl.com\"\n\n# Download the page locally\nf = urllib.urlopen(url)\nhtml = f.read()\nf.close()\n\nf = open (\"temp.htm\", \"w\")\nf.write (html)\nf.close()\n\n# List only the .TXT / .ZIP files\nfnames = re.findall('^.*<a href=\"(\\w+(?:\\.txt|.zip)?)\".*$', html, re.MULTILINE)\n\nfor fname in fnames:\n    print fname, \"...\"\n\n    f = urllib.urlopen(url + \"/\" + fname)\n\n    #### Here I want to check the filesize to download or not #### \n    file = f.read()\n    f.close()\n\n    f = open (fname, \"w\")\n    f.write (file)\n    f.close()\n"}
{"5909": "Local Size  Server Size\n 2.223.533  2.115.516\n   664.603    662.121\n"}
{"5927": ">>> site = urllib.urlopen(\"http://python.org\")\n>>> meta = site.info()\n>>> print meta.getheaders(\"Content-Length\")\n['16535']\n>>>\n"}
{"5935": ">>> import urllib\n>>> d = urllib.urlopen(\"http://www.google.co.uk/logos/olympics08_opening.gif\")\n>>> print d.info()\n\nContent-Type: image/gif\nLast-Modified: Thu, 07 Aug 2008 16:20:19 GMT  \nExpires: Sun, 17 Jan 2038 19:14:07 GMT \nCache-Control: public \nDate: Fri, 08 Aug 2008 13:40:41 GMT \nServer: gws \nContent-Length: 20172 \nConnection: Close\n"}
{"5985": "import urllib, os\nlink = \"http://python.org\"\nprint \"opening url:\", link\nsite = urllib.urlopen(link)\nmeta = site.info()\nprint \"Content-Length:\", meta.getheaders(\"Content-Length\")[0]\n\nf = open(\"out.txt\", \"r\")\nprint \"File on disk:\",len(f.read())\nf.close()\n\n\nf = open(\"out.txt\", \"w\")\nf.write(site.read())\nsite.close()\nf.close()\n\nf = open(\"out.txt\", \"r\")\nprint \"File on disk after download:\",len(f.read())\nf.close()\n\nprint \"os.stat().st_size returns:\", os.stat(\"out.txt\").st_size\n"}
{"5985": "opening url: http://python.org\nContent-Length: 16535\nFile on disk: 16535\nFile on disk after download: 16535\nos.stat().st_size returns: 16861\n"}
{"5985": "import urllib, os\nlink = \"http://python.org\"\nprint \"opening url:\", link\nsite = urllib.urlopen(link)\nmeta = site.info()\nprint \"Content-Length:\", meta.getheaders(\"Content-Length\")[0]\n\nf = open(\"out.txt\", \"rb\")\nprint \"File on disk:\",len(f.read())\nf.close()\n\n\nf = open(\"out.txt\", \"wb\")\nf.write(site.read())\nsite.close()\nf.close()\n\nf = open(\"out.txt\", \"rb\")\nprint \"File on disk after download:\",len(f.read())\nf.close()\n\nprint \"os.stat().st_size returns:\", os.stat(\"out.txt\").st_size\n"}
{"5985": "$ python test.py\nopening url: http://python.org\nContent-Length: 16535\nFile on disk: 16535\nFile on disk after download: 16535\nos.stat().st_size returns: 16535\n"}
{"5985": "// open for binary write\nopen(filename, \"wb\")\n// open for binary read\nopen(filename, \"rb\")\n"}
{"6125": "episodes = []\nepisodes.append({'season':1, 'episode': 2, 'name':'Something'})\nepisodes.append({'season':1, 'episode': 2, 'name':'Something', 'actors':['Billy Bob', 'Sean Penn']})\n"}
{"6125": "season_1 = [e for e in episodes if e['season'] == 1]\nbilly_bob = [e for e in episodes if 'actors' in e and 'Billy Bob' in e['actors']]\n\nfor episode in billy_bob:\n    print \"Billy bob was in Season %s Episode %s\" % (episode['season'], episode['episode'])\n"}
{"7090": "gs -q -dQUIET -dPARANOIDSAFER -dBATCH -dNOPAUSE -dNOPROMPT \\\n-dMaxBitmap=500000000 -dLastPage=1 -dAlignToPixels=0 -dGridFitTT=0 \\\n-sDEVICE=jpeg -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -r72x72 \\\n-sOutputFile=$OUTPUT -f$INPUT\n"}
{"7286": "groups = []\nuniquekeys = []\nfor k, g in groupby(data, keyfunc):\n   groups.append(list(g))    # Store group iterator as a list\n   uniquekeys.append(k)\n"}
{"7286": "from itertools import groupby\n\nthings = [(\"animal\", \"bear\"), (\"animal\", \"duck\"), (\"plant\", \"cactus\"), (\"vehicle\", \"speed boat\"), (\"vehicle\", \"school bus\")]\n\nfor key, group in groupby(things, lambda x: x[0]):\n    for thing in group:\n        print \"A %s is a %s.\" % (thing[1], key)\n    print \" \"\n"}
{"7286": "for key, group in groupby(things, lambda x: x[0]):\n    listOfThings = \" and \".join([thing[1] for thing in group])\n    print key + \"s:  \" + listOfThings + \".\"\n"}
{"8020": "import sys\nsys.getdefaultencoding()\n"}
{"8020": "import sys\nsys.setdefaultencoding('utf-8')\n"}
{"8020": "# -*- coding: UTF-8 -*-\nimport sys,time\n"}
{"8154": "  Python 2.5\n  Pylons: 0.9.6.2 (w/ sql_alchemy)\n  MySQL: 5.0.51\n"}
{"8165": ">>>x={}\n>>>x[1]={}\n>>>x[1][2]={}\n>>>x\n{1: {2: {}}}\n>>> 2 in x[1]\nTrue\n>>> 3 in x[1]\nFalse\n"}
{"9171": "if sys.platform.startswith('darwin'):\n    os.environ['PY_USE_XMLPLUS'] = '1'\n"}
{"9358": "from ID3 import *\ntry:\n  id3info = ID3('file.mp3')\n  print id3info\n  # Change the tags\n  id3info['TITLE'] = \"Green Eggs and Ham\"\n  id3info['ARTIST'] = \"Dr. Seuss\"\n  for k, v in id3info.items():\n    print k, \":\", v\nexcept InvalidTagError, message:\n  print \"Invalid ID3 tag:\", message\n"}
{"10123": "(pid,status) = os.wait()\n(exitstatus, signum) = decode(status) \n"}
{"10129": "signum = status & 0xff\nexitstatus = (status & 0xff00) >> 8\n"}
{"10132": "low = status & 0x00FF\nhigh = (status & 0xFF00) >> 8\n"}
{"10213": "pid, status = os.wait()\nexitstatus, signum = status & 0xFF, (status & 0xFF00) >> 8\n"}
{"10213": "pid, status = os.wait()\nexitstatus, signum = os.WEXITSTATUS( status ), os.WTERMSIG( status )\n"}
{"10778": "import new\nmyexc=new.classobj(\"ExcName\",(Exception,),{})\ni=myexc(\"This is the exc msg!\")\nraise i\n"}
{"10778": "Traceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n__main__.ExcName: This is the exc msg!\n"}
{"12557": "// PHP\nif (!isset($found[$x])) {\n    $found[$x] = Array();\n    $found[$x][$y] = true;\n} else if (!isset($found[$x][$y])) {\n    $found[$x][$y] = true;\n}\n\n# Python\nfound[(x,y)] = True # parens added for clarity\n"}
{"12557": "\"\"\"\ncouple is a tuple of two people\ndoesLike is a dictionary mapping couples to True or False\n\"\"\"\ncouple = \"john\", \"jane\"\ndoesLike = dict()\ndoesLike[couple] = True\ndoesLike[\"jane\", \"john\"] = False # unrequited love :'(\n"}
{"12609": "   >>> x\n   Traceback (most recent call last):\n     ...\n   NameError: name 'x' is not defined\n"}
{"12928": "if () \n{\n\n}\n"}
{"12928": "If () Then\nBegin\n\nEnd\n"}
{"13040": "f = StringIO(\"<!ELEMENT b EMPTY>\")\ndtd = etree.DTD(f)\ndtd = etree.DTD(external_id = \"-//OASIS//DTD DocBook XML V4.2//EN\")\n"}
{"13107": ">>> 0b101111\n47\n"}
{"13107": ">>> bin(173)\n'0b10101101'\n"}
{"13396": "foreach (int x in intArray)\n  if (x > 3) //generic condition on x\n    x++ \n    //do other processing\n"}
{"13403": "intArray.select { |x| x > 3 }.each do |x|\n  # do other processing\nend\n"}
{"13406": "intArray.Where(i => i > 3).ConvertAll();\nDoStuff(intArray.Where(i => i 3));\n"}
{"13435": "for(int i = 0; i < intArray.Length; ++i)\n{\n    if(intArray[i] > 3) ++intArray[i];\n}\n"}
{"13435": "var newArray1 = from i in intArray select ((i > 3) ? (i + 1) : (i));\nvar newArray2 = intArray.Select(i => (i > 3) ? (i + 1) : (i));\n"}
{"13435": "var intArray = new int[] { 10, 1, 20, 2 };\nvar newArray = from i in intArray where i > 3 select i + 1;\n// newArray == { 11, 21 }\n"}
{"13454": "cleaned = stringwithslashes\ncleaned = cleaned.replace('\\\\n', '\\n')\ncleaned = cleaned.replace('\\\\r', '\\n')\ncleaned = cleaned.replace('\\\\', '')\n"}
{"13579": "p = re.compile( '\\\\(\\\\\\S)')\np.sub('\\1',escapedstring)\n"}
{"13579": ">>> escapedstring\n'This is a \\\\n\\\\n\\\\n test'\n>>> p = re.compile( r'\\\\(\\S)' )\n>>> p.sub(r\"\\1\",escapedstring)\n'This is a nnn test'\n>>> p.sub(r\"\\\\1\",escapedstring)\n'This is a \\\\1\\\\1\\\\1 test'\n>>> p.sub(r\"\\\\\\1\",escapedstring)\n'This is a \\\\n\\\\n\\\\n test'\n>>> p.sub(r\"\\(\\1)\",escapedstring)\n'This is a \\\\(n)\\\\(n)\\\\(n) test'\n"}
{"13608": "import re\ndef stripslashes(s):\n    r = re.sub(r\"\\\\(n|r)\", \"\\n\", s)\n    r = re.sub(r\"\\\\\", \"\", r)\n    return r\ncleaned = stripslashes(stringwithslashes)\n"}
{"13791": ">>> import re\n>>> mystring = r\"This is \\n a test \\r\"\n>>> p = re.compile( \"\\\\\\\\(\\\\S)\" )\n>>> p.sub( \"\\\\1\", mystring )\n'This is n a test r'\n>>> p.sub( \"\\\\\\\\\\\\1\", mystring )\n'This is \\\\n a test \\\\r'\n>>> p.sub( \"\\\\\\\\1\", mystring )\n'This is \\\\1 a test \\\\1'\n"}
{"13844": "\"\\\\n\" == r\"\\n\"\n\n>>> import re\n>>> mystring = r\"This is \\\\n a test \\\\r\"\n>>> p = re.compile( r\"[\\\\][\\\\](.)\" )\n>>> print p.sub( r\"\\\\\\1\", mystring )\nThis is \\n a test \\r\n>>>\n"}
{"13844": ">>> d = {'n':'\\n', 'r':'\\r', 'f':'\\f'}\n>>> p = re.compile(r\"[\\\\]([nrfv])\")\n>>> print p.sub(lambda mo: d[mo.group(1)], mystring)\nThis is \\\n a test \\\n>>>\n"}
{"13869": ">>> mystring = r\"This is \\n a test \\r\"\n>>> mystring\n'This is \\\\n a test \\\\r'\n>>> print mystring\nThis is \\n a test \\r\n"}
{"13875": ">>> def makeConstantAdder(x):\n...     constant = x\n...     def adder(y):\n...         return y + constant\n...     return adder\n... \n>>> f = makeConstantAdder(12)\n>>> f(3)\n15\n>>> g = makeConstantAdder(4)\n>>> g(3)\n7\n"}
{"13882": ">>> mystring = r\"This is \\n ridiculous\"\n>>> print mystring\nThis is \\n ridiculous\n>>> p = re.compile( r\"\\\\(\\S)\" )\n>>> print p.sub( 'bloody', mystring )\nThis is bloody ridiculous\n>>> print p.sub( r'\\1', mystring )\nThis is n ridiculous\n>>> print p.sub( r'\\\\1', mystring )\nThis is \\1 ridiculous\n>>> print p.sub( r'\\\\\\1', mystring )\nThis is \\n ridiculous\n"}
{"13882": "This is \nridiculous\n"}
{"13902": "x = 0\n\ndef f():\n    def g(): \n        return x * 2\n    return g\n\n\nclosure = f()\nprint(closure()) # 0\nx = 2\nprint(closure()) # 4\n"}
{"13943": ">>> mystring = r\"This is \\n a test \\r\"\n>>> mystring.decode('string-escape')\n'This is \\n a test \\r'\n>>> print mystring.decode('string-escape')\nThis is \n a test \n>>> \n"}
{"13949": "import sys\nsys.stdout.write('\\a')\nsys.stdout.flush()\n"}
{"13959": ">>> import Carbon.Snd\n>>> Carbon.Snd.SysBeep(1)\n>>> \n"}
{"14320": "#!/usr/bin/python\n\nimport zipfile\nf = zipfile.ZipFile('myfile.zip')\n\nfor subfile in f.namelist():\n    print subfile\n    data = f.read(subfile)\n    for line in data.split('\\n'):\n        print line\n"}
{"14389": "config['valid_filename_chars'] = \"\"\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@\u00a3$%^&*()_+=-[]{}\"'.,<>`~? \"\"\"\nconfig['valid_filename_chars_regex'] = re.escape(config['valid_filename_chars'])\n\nconfig['name_parse'] = [\n    # foo_[s01]_[e01]\n    re.compile('''^([%s]+?)[ \\._\\-]\\[[Ss]([0-9]+?)\\]_\\[[Ee]([0-9]+?)\\]?[^\\\\/]*$'''% (config['valid_filename_chars_regex'])),\n    # foo.1x09*\n    re.compile('''^([%s]+?)[ \\._\\-]\\[?([0-9]+)x([0-9]+)[^\\\\/]*$''' % (config['valid_filename_chars_regex'])),\n    # foo.s01.e01, foo.s01_e01\n    re.compile('''^([%s]+?)[ \\._\\-][Ss]([0-9]+)[\\.\\- ]?[Ee]([0-9]+)[^\\\\/]*$''' % (config['valid_filename_chars_regex'])),\n    # foo.103*\n    re.compile('''^([%s]+)[ \\._\\-]([0-9]{1})([0-9]{2})[\\._ -][^\\\\/]*$''' % (config['valid_filename_chars_regex'])),\n    # foo.0103*\n    re.compile('''^([%s]+)[ \\._\\-]([0-9]{2})([0-9]{2,3})[\\._ -][^\\\\/]*$''' % (config['valid_filename_chars_regex'])),\n]\n"}
{"15931": "from StringIO import StringIO\n\nfrom lxml import etree\n\ndtd = etree.DTD(StringIO(\"\"\"<!ELEMENT foo EMPTY>\"\"\"))\nroot = etree.XML(\"<foo/>\")\nprint(dtd.validate(root))\n# True\n\nroot = etree.XML(\"<foo>bar</foo>\")\nprint(dtd.validate(root))\n# False\nprint(dtd.error_log.filter_from_errors())\n# <string>:1:0:ERROR:VALID:DTD_NOT_EMPTY: Element foo was declared EMPTY this one has content\n"}
{"16091": "files = []\nfiles.extend(reduce(lambda x, y: x + y, map(glob.glob, args)))\n"}
{"16091": "files = []\nfor f in args:\n    files.extend(glob.glob(f))\n"}
{"17250": "import zipfile, os\n\nlocfile = \"test.txt\"\nloczip = os.path.splitext (locfile)[0] + \".zip\"\nzip = zipfile.ZipFile (loczip, \"w\")\nzip.write (locfile)\nzip.close()\n"}
{"17287": "import chilkat\n\n# Demonstrates how to create a WinZip-compatible 128-bit AES strong encrypted zip\nzip = chilkat.CkZip()\nzip.UnlockComponent(\"anything for 30-day trial\")\n\nzip.NewZip(\"strongEncrypted.zip\")\n\n# Set the Encryption property = 4, which indicates WinZip compatible AES encryption.\nzip.put_Encryption(4)\n# The key length can be 128, 192, or 256.\nzip.put_EncryptKeyLength(128)\nzip.SetPassword(\"secret\")\n\nzip.AppendFiles(\"exampleData/*\",True)\nzip.WriteZip()\n"}
{"17933": "from setuptools import setup\n\nsetup(\n    # other arguments here...\n    entry_points = {\n        'console_scripts': [\n            'foo = package.module:func',\n            'bar = othermodule:somefunc',\n        ],\n    }\n)\n"}
{"18418": "for name in names:\n    if name[-5:] == 'Smith':\n        names.remove(name)\n"}
{"18418": "toremove = []\nfor name in names:\n    if name[-5:] == 'Smith':\n        toremove.append(name)\nfor name in toremove:\n    names.remove(name)\ndel toremove\n"}
{"18431": "names = ['mike', 'dave', 'jim']\nfilter(lambda x: x != 'mike', names)\n['dave', 'jim']\n"}
{"18497": "names = ['Jones', 'Vai', 'Smith', 'Perez']\n\nitem = 0\nwhile item <> len(names):\n    name = names [item]\n    if name=='Smith':\n        names.remove(name)\n    else:\n        item += 1\n\nprint names\n"}
{"19030": "checker = [\n{\n    'name':'valid files',\n    'type':'file',\n    'function':check_valid(), # runs check_valid() on all files\n    'status':0 # if it returns True, this is the status the file gets\n}\n"}
{"19152": " def count(n=0):\n     while True:\n         yield n\n         n += 1\n"}
{"19339": "original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n# and I want to become...\nresult = (['a', 'b', 'c', 'd'], [1, 2, 3, 4])\n"}
{"19343": ">>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]\n"}
{"20065": "#!/usr/bin/env python\nimport optparse\n\ndef main():\n  p = optparse.OptionParser()\n  p.add_option('--person', '-p', default=\"world\")\n  options, arguments = p.parse_args()\n  print 'Hello %s' % options.person\n\nif __name__ == '__main__':\n  main()\n"}
{"20069": "import getopt, sys\n\ndef main():\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", \"output=\"])\n    except getopt.GetoptError:\n        # print help information and exit:\n        usage()\n        sys.exit(2)\n    output = None\n    verbose = False\n    for o, a in opts:\n        if o == \"-v\":\n            verbose = True\n        if o in (\"-h\", \"--help\"):\n            usage()\n            sys.exit()\n        if o in (\"-o\", \"--output\"):\n            output = a\n"}
{"20169": "\nfrom ctypes import *\n\ndef wmain(argc, argv):\n    print argc\n    for i in argv:\n        print i\n    return 0\n\ndef startup():\n    size = c_int()\n    ptr = windll.shell32.CommandLineToArgvW(windll.kernel32.GetCommandLineW(), byref(size))\n    ref = c_wchar_p * size.value\n    raw = ref.from_address(ptr)\n    args = [arg for arg in raw]\n    windll.kernel32.LocalFree(ptr)\n    exit(wmain(len(args), args))\nstartup()\n"}
{"20845": "wembley 0 /home/jj33/swap > cat p\nmy $f = shift;\n\nwhile (my $l = readlink($f)) {\n  print \"$f -> $l\\n\";\n  $f = $l;\n}\n\nif (!-e $f) {\n  print \"$f doesn't exist\\n\";\n}\nwembley 0 /home/jj33/swap > ls -l | grep ^l\nlrwxrwxrwx    1 jj33  users          17 Aug 21 14:30 link -> non-existant-file\nlrwxrwxrwx    1 root     users          31 Oct 10  2007 mm -> ../systems/mm/20071009-rewrite//\nlrwxrwxrwx    1 jj33  users           2 Aug 21 14:34 mmm -> mm/\nwembley 0 /home/jj33/swap > perl p mm\nmm -> ../systems/mm/20071009-rewrite/\nwembley 0 /home/jj33/swap > perl p mmm\nmmm -> mm\nmm -> ../systems/mm/20071009-rewrite/\nwembley 0 /home/jj33/swap > perl p link\nlink -> non-existant-file\nnon-existant-file doesn't exist\nwembley 0 /home/jj33/swap >\n"}
{"20927": "def save(self):\n    super(Attachment, self).save()\n    self.message.updated = self.updated\n"}
{"21302": "checker = {\n  ...\n  'required': ['file', 'list', 'for_required']\n}\n"}
{"21302": "check_dict = {\n  'delim'    : /\\-/,\n  'parts'    : [ 'Show Name', 'Episode Name', 'Episode Number' ],\n  'patterns' : [/valid name/, /valid episode name/, /valid number/ ],\n  'required' : ['list', 'of', 'files'],\n  'ignored'  : ['.*', 'hidden.txt'],\n  'start_dir': '/path/to/dir/to/test/'\n}\n"}
{"21468": "MAYBECHOICE = (\n    ('y', 'Yes'),\n    ('n', 'No'),\n    ('u', 'Unknown'),\n)\n"}
{"21468": "MAYBECHOICE = (\n    (0, 'Yes'),\n    (1, 'No'),\n    (2, 'Unknown'),\n)\n"}
{"21961": ">>> import time\n>>> time.strptime(\"01-31-2009\", \"%m-%d-%Y\")\n(2009, 1, 31, 0, 0, 0, 5, 31, -1)\n>>> time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))\n1233378000.0\n>>> 60*60*24 # seconds in a day\n86400\n>>> 1233378000.0 / 86400\n14275.208333333334\n"}
{"21973": "mktime(...)\n    mktime(tuple) -> floating point number\n\n    Convert a time tuple in local time to seconds since the Epoch.\n"}
{"21973": "The other representation is a tuple of 9 integers giving local time.\nThe tuple items are:\n  year (four digits, e.g. 1998)\n  month (1-12)\n  day (1-31)\n  hours (0-23)\n  minutes (0-59)\n  seconds (0-59)\n  weekday (0-6, Monday is 0)\n  Julian day (day in the year, 1-366)\n  DST (Daylight Savings Time) flag (-1, 0 or 1)\nIf the DST flag is 0, the time is given in the regular time zone;\nif it is 1, the time is given in the DST time zone;\nif it is -1, mktime() should guess based on the date and time.\n"}
{"21973": ">>> time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))\n1233356400.0\n>>> (1233378000.0 - 1233356400)/(60*60)\n6.0\n"}
{"21974": ">>> now = time.mktime((2008, 8, 22, 11 ,17, -1, -1, -1, -1))\n>>> tomorrow = time.mktime((2008, 8, 23, 11 ,17, -1, -1, -1, -1))\n>>> tomorrow - now\n86400.0\n"}
{"21975": ">>> time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))\n1233360000.0\n"}
{"21975": ">>> (1233378000 - 1233360000) / (60*60)    \n5\n"}
{"22021": ">>> calendar.timegm((2009, 1, 31, 0, 0, 0, 5, 31, -1))\n1233360000\n>>> 1233360000 / (60*60*24)\n14275\n"}
{"22042": "int a = 5;\n\nfor (int i = 0; i < a; i++) {\n     System.out.println(\"i is now \" + i);\n}\n"}
{"22219": "def parse_some_attrs(fname):\n    return open(fname).read().split(\"~~~\")[2:4]\n"}
{"22219": "def parse_some_attrs(fname):\n    with open(fname) as f:\n        return f.read().split(\"~~~\")[2:4]\n"}
{"22525": ">>> class Test(object):\n...   def a(self):\n...     pass\n... \n>>> def b(self):\n...   pass\n... \n>>> Test.b = b\n>>> type(b)\n<type 'function'>\n>>> type(Test.a)\n<type 'instancemethod'>\n>>> type(Test.b)\n<type 'instancemethod'>\n"}
{"22682": "import urllib2\nresponse = urllib2.urlopen('http://www.example.com/')\nhtml = response.read()\n"}
{"22721": "import urllib2\nmp3file = urllib2.urlopen(\"http://www.example.com/songs/mp3.mp3\")\nwith open('test.mp3','wb') as output:\n  output.write(mp3file.read())\n"}
{"22723": "import urllib\nresponse = urllib.urlopen('http://www.example.com/sound.mp3')\nmp3 = response.read()\n"}
{"22723": "import urllib\nmp3 = urllib.urlopen('http://www.example.com/sound.mp3').read()\n"}
{"22776": "import urllib\nurllib.urlretrieve (\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")\n"}
{"22776": "import urllib2\n\nurl = \"http://download.thinkbroadband.com/10MB.zip\"\n\nfile_name = url.split('/')[-1]\nu = urllib2.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders(\"Content-Length\")[0])\nprint \"Downloading: %s Bytes: %s\" % (file_name, file_size)\n\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = r\"%10d  [%3.2f%%]\" % (file_size_dl, file_size_dl * 100. / file_size)\n    status = status + chr(8)*(len(status)+1)\n    print status,\n\nf.close()\n"}
{"23510": "from threading import Thread\n\ndef separate_computations(x, y):\n    print sum(x for i in range(y))  # really expensive multiplication\n\nThread(target=separate_compuations, args=[57, 83]).start()\nprint \"I'm continuing while that other function runs in another thread!\"\n"}
{"23907": "me@something:~/$ gitsloc --branch master\n10\n48\n153\n450\n1734\n1542\n"}
{"23907": "require 'rubygems'\nrequire 'git'\n\ntotal = 0\ng = Git.open(working_dir = '/Users/dbr/Desktop/code_projects/tvdb_api')\n\n\nlast = nil\ng.log.each do |cur|\n  diff = g.diff(last, cur)\n  total = total + diff.lines\n  puts total\n  last = cur\nend\n"}
{"24061": "def foo():\n   x = 3\n   def bar():\n      print x\n   x = 5\n   return bar\n\nbar = foo()\nbar()   # print 5\n"}
{"24061": "def foo():\n   x = 3\n   def bar():\n      print x\n   def ack():\n      nonlocal x\n      x = 7\n   x = 5\n   return (bar, ack)\n\nbar, ack = foo()\nack()   # modify x of the call to foo\nbar()   # print 7\n"}
{"24377": "class Counter:\n    def __init__(self, low, high):\n        self.current = low\n        self.high = high\n\n    def __iter__(self):\n        return self\n\n    def next(self): # Python 3: def __next__(self)\n        if self.current > self.high:\n            raise StopIteration\n        else:\n            self.current += 1\n            return self.current - 1\n\n\nfor c in Counter(3, 8):\n    print c\n"}
{"24377": "3\n4\n5\n6\n7\n8\n"}
{"24377": "def counter(low, high):\n    current = low\n    while current <= high:\n        yield current\n        current += 1\n\nfor c in counter(3, 8):\n    print c\n"}
{"24949": "import subprocess\n# Of course you can open things other than python here :)\nprocess = subprocess.Popen([\"python\", \"main.py\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\nx = process.stderr.readline()\ny = process.stdout.readline()\nprocess.wait()\n"}
{"24949": "import sys\nx = sys.stderr.readline()\ny = sys.stdin.readline()\n"}
{"24962": ">>> str(5)\n'5'\n>>> int(8.7)\n8\n"}
{"25123": "\nimport struct\nf = open(filename, \"rb\")\ns = f.read(8)\nx, y = struct.unpack(\">hl\", s)\n"}
{"25136": "import re\nfrom urlparse import urljoin\nfrom BeautifulSoup import BeautifulSoup, Comment\n\ndef sanitizeHtml(value, base_url=None):\n    rjs = r'[\\s]*(&#x.{1,7})?'.join(list('javascript:'))\n    rvb = r'[\\s]*(&#x.{1,7})?'.join(list('vbscript:'))\n    re_scripts = re.compile('(%s)|(%s)' % (rjs, rvb), re.IGNORECASE)\n    validTags = 'p i strong b u a h1 h2 h3 pre br img'.split()\n    validAttrs = 'href src width height'.split()\n    urlAttrs = 'href src'.split() # Attributes which should have a URL\n    soup = BeautifulSoup(value)\n    for comment in soup.findAll(text=lambda text: isinstance(text, Comment)):\n        # Get rid of comments\n        comment.extract()\n    for tag in soup.findAll(True):\n        if tag.name not in validTags:\n            tag.hidden = True\n        attrs = tag.attrs\n        tag.attrs = []\n        for attr, val in attrs:\n            if attr in validAttrs:\n                val = re_scripts.sub('', val) # Remove scripts (vbs & js)\n                if attr in urlAttrs:\n                    val = urljoin(base_url, val) # Calculate the absolute url\n                tag.attrs.append((attr, val))\n\n    return soup.renderContents().decode('utf8')\n"}
{"25180": "import zipfile\nimport StringIO\n\ns = StringIO.StringIO()\nz = zipfile.ZipFile(s, \"w\")\nz.write(\"test.txt\")\nz.close()\nf = file(\"x.zip\", \"w\")\nf.write(s.getvalue())\ns.close()\nf.close()\n"}
{"25807": "class A():\n    pass\nclass B():\n    pass\nclass C(A, B):\n    pass\n"}
{"25807": ">>> magicGetSuperClasses(C)\n(<type 'A'>, <type 'B'>)\n"}
{"25807": "def magicGetSuperClasses(cls):\n    return [o[0] for o in inspect.getclasstree([cls]) if type(o[0]) == type]\n"}
{"25815": "def magicGetSuperClasses(cls):\n  return cls.__bases__\n"}
{"26611": "\n>>> class foo(object):\n       def __eq__(self, other):\n           return True\n\n>>> f = foo()\n>>> f == None\nTrue\n>>> f is None\nFalse\n"}
{"26654": "list1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nif list1==list2: print \"Equal\"\nif list1 is list2: print \"Same\"\n"}
{"26910": "parser.add_option('-q', '--query',\n            action=\"store\", dest=\"query\",\n            help=\"query string\", default=\"spam\")\n"}
{"26910": "import optparse\n\nparser = optparse.OptionParser()\n\nparser.add_option('-q', '--query',\n    action=\"store\", dest=\"query\",\n    help=\"query string\", default=\"spam\")\n\noptions, args = parser.parse_args()\n\nprint 'Query string:', options.query\n"}
{"26957": "if os.path.exists(path):\n    os.unlink(path)\n"}
{"26957": "try:\n    os.stat(path)\nexcept OSError, e:\n    if e.errno == errno.ENOENT:\n        print 'path %s does not exist or is a broken symlink' % path\n    else:\n        raise e\n"}
{"26957": "if not os.path.exists(os.readlink(path)):\n    print 'path %s is a broken symlink' % path\n"}
{"26963": "if foo:\n    #foo isn't None\nelse:\n    #foo is None\n"}
{"27974": "import libxml2\n\ndoc = libxml2.parseFile(\"tst.xml\")\nctxt = doc.xpathNewContext()\nres = ctxt.xpathEval(\"//*\")\nif len(res) != 2:\n    print \"xpath query: wrong node set size\"\n    sys.exit(1)\nif res[0].name != \"doc\" or res[1].name != \"foo\":\n    print \"xpath query: wrong node set value\"\n    sys.exit(1)\ndoc.freeDoc()\nctxt.xpathFreeContext()\n"}
{"27974": "from elementtree.ElementTree import ElementTree\nmydoc = ElementTree(file='tst.xml')\nfor e in mydoc.findall('/foo/bar'):\n    print e.get('title').text"}
{"28067": "if foo:\n  # do something\n"}
{"28067": "if x is not None:\n  # do something\n"}
{"28165": ">>> 'The %(site)s site %(adj)s because it %(adj)s' % {'site':'Stackoverflow', 'adj':'rocks'}\n'The Stackoverflow site rocks because it rocks'\n"}
{"28165": "<?php\n\nfunction sprintf3($str, $vars, $char = '%')\n{\n    $tmp = array();\n    foreach($vars as $k => $v)\n    {\n        $tmp[$char . $k . $char] = $v;\n    }\n    return str_replace(array_keys($tmp), array_values($tmp), $str);\n}\n\necho sprintf3( 'The %site% site %adj% because it %adj%', array('site'=>'Stackoverflow', 'adj'=>'rocks'));\n?>\n"}
{"28247": "function subst($str, $dict){\n    return preg_replace(array_map(create_function('$a', 'return \"/%\\\\($a\\\\)s/\";'), array_keys($dict)), array_values($dict), $str);\n }\n"}
{"28349": "function subst($str, $dict)\n{\n  foreach ($dict AS $key, $value)\n  {\n    $str = str_replace($key, $value, $str);\n  }\n\n  return $str;\n}\n"}
{"28426": ">>> import sys\n>>> sys.platform\n'linux2'\n"}
{"28467": "Image* unary(boost::python::object op, Image& im)\n{\n    Image* out = new Image(im.width(), im.height(), im.channels());\n    for(unsigned int i=0; i<im.size(); i++)\n    {\n        (*out)[i] == extract<float>(op(im[i]));\n    }\n    return out;\n}\n"}
{"28467": "import image\nim = image.load('somefile.tiff')\ndouble_im = image.unary(lambda x: 2.0*x, im)\n"}
{"28559": "while ((x = next()) != END) {\n    ....\n}\n"}
{"28559": "for x in iter(next, END):\n    ....\n"}
{"28563": "x = next()\nwhile x != END:\n    do_something_with_x\n    x = next()\n"}
{"28568": "def next():\n   for num in range(10):\n      yield num\n\nfor x in next():\n   print x\n"}
{"28580": "for x in iternext():\n    do_something_with_x\n"}
{"28580": "def iternext():\n    x = next()\n    while x != END:\n        yield x\n        x = next()        \n"}
{"28705": "\n\"\"\"\nCreate an G{n,m} random graph with n nodes and m edges\nand report some properties.\n\nThis graph is sometimes called the Erd##[m~Qs-R\u00e9nyi graph\nbut is different from G{n,p} or binomial_graph which is also\nsometimes called the Erd##[m~Qs-R\u00e9nyi graph.\n\"\"\"\n__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__credits__ = \"\"\"\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg \n#    Dan Schult \n#    Pieter Swart \n#    Distributed under the terms of the GNU Lesser General Public License\n#    http://www.gnu.org/copyleft/lesser.html\n\nfrom networkx import *\nimport sys\n\nn=10 # 10 nodes\nm=20 # 20 edges\n\nG=gnm_random_graph(n,m)\n\n# some properties\nprint \"node degree clustering\"\nfor v in nodes(G):\n    print v,degree(G,v),clustering(G,v)\n\n# print the adjacency list to terminal \nwrite_adjlist(G,sys.stdout)\n"}
{"28714": "while x=next():\n    // do something here!\n"}
{"28714": "while 1:\n    x = next()\n    if x != END:\n        // Blah\n    else:\n        break\n"}
{"28714": "class Pita( object ):\n    __slots__ = ('pocket',)\n    marker = object()\n    def __init__(self, v=marker):\n        if v is not self.marker:\n            self.pocket = v\n    def __call__(self, v=marker):\n        if v is not self.marker:\n            self.pocket = v\n        return self.pocket\n"}
{"28714": "p = Pita()\nwhile p( next() ) != END:\n    // do stuff with p.pocket!\n"}
{"28780": "for x in everything():\n    ...\n"}
{"29169": "import sys\nimport StringIO\n\ns = StringIO.StringIO()\n\nsys.stdout = s\n\nprint \"hey, this isn't going to stdout at all!\"\nprint \"where is it ?\"\n\nsys.stderr.write('It actually went to a StringIO object, I will show you now:\\n')\nsys.stderr.write(s.getvalue())\n"}
{"29243": "from xml.dom.minidom import *\ndef make_xml():\n    doc = Document()\n    node = doc.createElement('foo')\n    node.innerText = 'bar'\n    doc.appendChild(node)\n    return doc\nif __name__ == '__main__':\n    make_xml().writexml(sys.stdout)\n"}
{"29243": "<?xml version=\"1.0\" ?>\n<foo/>\n"}
{"29243": "<?xml version=\"1.0\" ?>\n<foo>bar</foo>\n"}
{"29255": "import sys\nfrom xml.etree.cElementTree import Element, ElementTree\n\ndef make_xml():\n    node = Element('foo')\n    node.text = 'bar'\n    doc = ElementTree(node)\n    return doc\n\nif __name__ == '__main__':\n    make_xml().write(sys.stdout)\n"}
{"29262": "\nfrom xml.dom.minidom import *\ndef make_xml():\n    doc = Document();\n    node = doc.createElement('foo')\n    node.appendChild(doc.createTextNode('bar'))\n    doc.appendChild(node)\n    return doc\nif __name__ == '__main__':\n    make_xml().writexml(sys.stdout)\n"}
{"29575": "#!/usr/bin/python \n\nfrom distutils.core import setup \n\nsetup (name = 'Initech Package 3', \n          description = \"Services and libraries ABC, DEF\", \n          author = \"That Guy, Initech Ltd\", \n          author_email = \"that.guy@initech.com\", \n          version = '1.0.5', \n          package_dir = {'Package3' : 'site-packages/Package3'}, \n          packages = ['Package3', 'Package3.Queries'], \n          data_files = [ \n                       ('/etc/Package3', ['etc/Package3/ExternalResources.conf']) \n          ])\n"}
{"30973": "from werkzeug import script\n\n# actions go here\ndef action_foo(name=\"\"):\n    \"\"\"action foo does foo\"\"\"\n    pass\n\ndef action_bar(id=0, title=\"default title\"):\n    \"\"\"action bar does bar\"\"\"\n    pass\n\nif __name__ == '__main__':\n    script.run()\n"}
{"30973": "python foo.py \nusage: foo.py <action> [<options>]\n       foo.py --help\n\nactions:\n  bar:\n    action bar does bar\n\n    --id                          integer   0\n    --title                       string    default title\n\n  foo:\n    action foo does foo\n\n    --name                        string\n"}
{"31126": "def iterattr(iterator, attributename):\n    for obj in iterator:\n        yield getattr(obj, attributename)\n"}
{"31358": "import threading\nclass Foo (threading.Thread):\n    def __init__(self,x):\n        self.__x = x\n        threading.Thread.__init__(self)\n    def run (self):\n          print str(self.__x)\n\nfor x in xrange(20):\n    Foo(x).start()\n"}
{"31765": "./configure --prefix=/usr/local/python64\nmake\nsudo make install\n"}
{"31884": "class Singleton:\n    __single = None\n    def __init__( self ):\n        if Singleton.__single:\n            raise Singleton.__single\n        Singleton.__single = self\n"}
{"32028": ">>> names['f'] = open('foo', 'w+')\n>>> safe_eval.safe_eval(\"baz = type(f)('baz', 'w+')\", names)\n>>> names['baz']\n<open file 'baz', mode 'w+' at 0x413da0>\n"}
{"32028": ">>> import compiler\n>>> ast = compiler.parse(\"print 'Hello world!'\")\n"}
{"32044": "class Node():\n  name = \"node name\"\n  children = []\n"}
{"32440": "import win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\n\n\nclass AppServerSvc (win32serviceutil.ServiceFramework):\n    _svc_name_ = \"TestService\"\n    _svc_display_name_ = \"Test Service\"\n\n    def __init__(self,args):\n        win32serviceutil.ServiceFramework.__init__(self,args)\n        self.hWaitStop = win32event.CreateEvent(None,0,0,None)\n        socket.setdefaulttimeout(60)\n\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        win32event.SetEvent(self.hWaitStop)\n\n    def SvcDoRun(self):\n        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,\n                              servicemanager.PYS_SERVICE_STARTED,\n                              (self._svc_name_,''))\n        self.main()\n\n    def main(self):\n        pass\n\nif __name__ == '__main__':\n    win32serviceutil.HandleCommandLine(AppServerSvc)\n"}
{"32487": "class Borg:\n    __shared_state = {}\n    def __init__(self):\n        self.__dict__ = self.__shared_state\n"}
{"32899": "import unittest\n\nl = [[\"foo\", \"a\", \"a\",], [\"bar\", \"a\", \"b\"], [\"lee\", \"b\", \"b\"]]\n\nclass TestSequence(unittest.TestCase):\n    def testsample(self):\n        for name, a,b in l:\n            print \"test\", name\n            self.assertEqual(a,b)\n\nif __name__ == '__main__':\n    unittest.main()\n"}
{"32939": "import unittest\n\nl = [[\"foo\", \"a\", \"a\",], [\"bar\", \"a\", \"b\"], [\"lee\", \"b\", \"b\"]]\n\nclass TestSequense(unittest.TestCase):\n    pass\n\ndef test_generator(a, b):\n    def test(self):\n        self.assertEqual(a,b)\n    return test\n\nif __name__ == '__main__':\n    for t in l:\n        test_name = 'test_%s' % t[0]\n        test = test_generator(t[1], t[2])\n        setattr(TestSequense, test_name, test)\n    unittest.main()\n"}
{"32939": "from nose_parameterized import parameterized\n\nclass TestSequence(unittest.TestCase):\n    @parameterized.expand([\n        [\"foo\", \"a\", \"a\",],\n        [\"bar\", \"a\", \"b\"],\n        [\"lee\", \"b\", \"b\"],\n    ])\n    def test_sequence(self, name, a, b):\n        self.assertEqual(a,b)\n"}
{"32939": "test_sequence_0_foo (__main__.TestSequence) ... ok\ntest_sequence_1_bar (__main__.TestSequence) ... FAIL\ntest_sequence_2_lee (__main__.TestSequence) ... ok\n\n======================================================================\nFAIL: test_sequence_1_bar (__main__.TestSequence)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/site-packages/nose_parameterized/parameterized.py\", line 233, in <lambda>\n    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)\n  File \"x.py\", line 12, in test_sequence\n    self.assertEqual(a,b)\nAssertionError: 'a' != 'b'\n"}
{"33201": "class Singleton(type):\n    def __init__(cls, name, bases, dict):\n        super(Singleton, cls).__init__(name, bases, dict)\n        cls.instance = None \n\n    def __call__(cls,*args,**kw):\n        if cls.instance is None:\n            cls.instance = super(Singleton, cls).__call__(*args, **kw)\n        return cls.instance\n\nclass MyClass(object):\n    __metaclass__ = Singleton\n"}
{"33475": "import re, subprocess\nexecutable = ... # Name of executable\nregex = ... # Regex to extract the port number from the output\np = subprocess.Popen(executable,\n    bufsize=1, # line buffered\n    stderr=subprocess.PIPE\n    )\ns = p.stderr.readline()\nport = re.match(regex).groups()[0]\nprint port\n"}
{"33475": "$ ssh remotehost.example.com\nLast login: Thu Aug 28 17:31:18 2008 from localhost\n$ ./invokejob.py\n63409\n$ exit\nlogout\nConnection to remotehost.example.com closed.\n"}
{"33534": "class xlist (list):\n    def len(self):\n        return len(self)\n\n    def add(self, *args):\n        self.extend(args)\n        return None\n\n\nclass xint (int):\n    def add(self, value):\n        self += value\n        return self\n\n\nx = xlist([1,2,3])\nprint x.len()   ## >>> 3 ok\nprint x         ## >>> [1,2,3] ok\nx.add (4, 5, 6)\nprint x         ## >>> [1,2,3,4,5,6] ok\n\nx = xint(10)\nprint x         ## >>> 10 ok\nx.add (2)\nprint x         ## >>> 10  # Not ok (#1)\n\nprint type(x)         ## >>> <class '__main__.xint'> ok\nx += 5\nprint type(x)         ## >>> <type 'int'>  # Not ok (#2)\n"}
{"33663": ">>> x = xint(10)\n>>> x.add(2)\n"}
{"33663": "class xint(int):\n    def __add__(self, value):\n        return xint(int.__add__(self, value))\n\n>>> x = xint(10)\n>>> type(x)\n<class '__main__.xint'>\n>>> x += 3\n>>> x\n13\n>>> type(x)\n<class '__main__.xint'>\n"}
{"34094": "param_list = [('a', 'a'), ('a', 'b'), ('b', 'b')]\n\ndef test_generator():\n    for params in param_list:\n        yield check_em, params[0], params[1]\n\ndef check_em(a, b):\n    assert a == b\n"}
{"34094": "> nosetests -v\ntestgen.test_generator('a', 'a') ... ok\ntestgen.test_generator('a', 'b') ... FAIL\ntestgen.test_generator('b', 'b') ... ok\n\n======================================================================\nFAIL: testgen.test_generator('a', 'b')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python2.5/site-packages/nose-0.10.1-py2.5.egg/nose/case.py\", line 203, in runTest\n    self.test(*self.arg)\n  File \"testgen.py\", line 7, in check_em\n    assert a == b\nAssertionError\n\n----------------------------------------------------------------------\nRan 3 tests in 0.006s\n\nFAILED (failures=1)\n"}
{"34116": "import urllib2\n\nproxy = urllib2.ProxyHandler({'http': 'http://\nusername:password@proxyurl:proxyport'})\nauth = urllib2.HTTPBasicAuthHandler()\nopener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)\nurllib2.install_opener(opener)\n\nconn = urllib2.urlopen('http://python.org')\nreturn_str = conn.read()\n"}
{"34467": ">>> import moduleName\n>>> dir(moduleName)\n"}
{"34482": "from AppKit import NSBeep\nNSBeep()\n"}
{"35080": "class foo:\n  x = 1\n\n  @classmethod\n  def increment(cls, y = 1):\n    cls.x += y\n"}
{"35111": "class A: pass\nclass B: pass\nclass C(A, B): pass\n\nc = C() # Instance\n\nassert C.__bases__ == (A, B) # Works\nassert c.__class__.__bases__ == (A, B) # Works\n\ndef magicGetSuperClasses(clz):\n  return tuple([base.__class__ for base in clz.__bases__])\n\nassert magicGetSuperClasses(C) == (A, B) # Fails\n"}
{"35111": "def get_base_metaclasses(cls):\n    \"\"\"Returns the metaclass of all the base classes of cls.\"\"\"\n    return tuple(base.__class__ for base in clz.__bases__)\n"}
{"35443": "import urllib2\n\ndef get_proxy_opener(proxyurl, proxyuser, proxypass, proxyscheme=\"http\"):\n    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n    password_mgr.add_password(None, proxyurl, proxyuser, proxypass)\n\n    proxy_handler = urllib2.ProxyHandler({proxyscheme: proxyurl})\n    proxy_auth_handler = urllib2.ProxyBasicAuthHandler(password_mgr)\n\n    return urllib2.build_opener(proxy_handler, proxy_auth_handler)\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) > 4:\n        url_opener = get_proxy_opener(*sys.argv[1:4])\n        for url in sys.argv[4:]:\n            print url_opener.open(url).headers\n    else:\n        print \"Usage:\", sys.argv[0], \"proxy user pass fetchurls...\"\n"}
{"35476": "[MESSAGES CONTROL]\n\n# Brain-dead errors regarding standard language features\n#   W0142 = *args and **kwargs support\n#   W0403 = Relative imports\n\n# Pointless whinging\n#   R0201 = Method could be a function\n#   W0212 = Accessing protected attribute of client class\n#   W0613 = Unused argument\n#   W0232 = Class has no __init__ method\n#   R0903 = Too few public methods\n#   C0301 = Line too long\n#   R0913 = Too many arguments\n#   C0103 = Invalid name\n#   R0914 = Too many local variables\n\n# PyLint's module importation is unreliable\n#   F0401 = Unable to import module\n#   W0402 = Uses of a deprecated module\n\n# Already an error when wildcard imports are used\n#   W0614 = Unused import from wildcard\n\n# Sometimes disabled depending on how bad a module is\n#   C0111 = Missing docstring\n\n# Disable the message(s) with the given id(s).\ndisable=W0142,W0403,R0201,W0212,W0613,W0232,R0903,W0614,C0111,C0301,R0913,C0103,F0401,W0402,R0914\n"}
{"35572": ">>> import _elementtidy\n>>> xhtml, log = _elementtidy.fixup(\"<html></html>\")\n>>> print log\nline 1 column 1 - Warning: missing <!DOCTYPE> declaration\nline 1 column 7 - Warning: discarding unexpected </html>\nline 1 column 14 - Warning: inserting missing 'title' element\n"}
{"35664": "#!/usr/bin/python\n\n\"\"\"\nDisplay the per-commit size of the current git branch.\n\"\"\"\n\nimport subprocess\nimport re\nimport sys\n\ndef main(argv):\n  git = subprocess.Popen([\"git\", \"log\", \"--shortstat\", \"--reverse\",\n                        \"--pretty=oneline\"], stdout=subprocess.PIPE)\n  out, err = git.communicate()\n  total_files, total_insertions, total_deletions = 0, 0, 0\n  for line in out.split('\\n'):\n    if not line: continue\n    if line[0] != ' ': \n      # This is a description line\n      hash, desc = line.split(\" \", 1)\n    else:\n      # This is a stat line\n      data = re.findall(\n        ' (\\d+) files changed, (\\d+) insertions\\(\\+\\), (\\d+) deletions\\(-\\)', \n        line)\n      files, insertions, deletions = ( int(x) for x in data[0] )\n      total_files += files\n      total_insertions += insertions\n      total_deletions += deletions\n      print \"%s: %d files, %d lines\" % (hash, total_files,\n                                        total_insertions - total_deletions)\n\n\nif __name__ == '__main__':\n  sys.exit(main(sys.argv))\n"}
{"35805": "class A:\n    def __init__(self):\n        self.name = 'A'\n"}
{"35805": "class B:\n    name = 'B'\n"}
{"35817": "def sh_escape(s):\n   return s.replace(\"(\",\"\\\\(\").replace(\")\",\"\\\\)\").replace(\" \",\"\\\\ \")\n\nos.system(\"cat %s | grep something | sort > %s\" \n          % (sh_escape(in_filename), \n             sh_escape(out_filename)))\n"}
{"35857": "def shellquote(s):\n    return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\n"}
{"35858": "Replacing shell pipe line\n-------------------------\n\noutput=`dmesg | grep hda`\n==>\np1 = Popen([\"dmesg\"], stdout=PIPE)\np2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\noutput = p2.communicate()[0]\n"}
{"35900": "clean_user_input re.sub(\"[^a-zA-Z]\", \"\", user_input)\nos.system(\"ls %s\" % (clean_user_input))\n"}
{"35948": "Object Result:\n    Items = [item1,item2]\n    Users = [{name='username',item1=3,item2=4},..]\n"}
{"35948": "<table>\n<tr align=\"center\">\n    <th>user</th>\n    {% for item in result.items %}\n        <th>{{item}}</th>\n    {% endfor %}\n</tr>\n\n{% for user in result.users %}\n    <tr align=\"center\"> \n        <td>{{user.name}}</td>\n        {% for item in result.items %}\n            <td>{{ user.item }}</td>\n        {% endfor %}\n    </tr>\n{% endfor %}\n</table>\n"}
{"35988": "class MyStruct():\n    def __init__(self, field1, field2, field3):\n        self.field1 = field1\n        self.field2 = field2\n        self.field3 = field3\n"}
{"35990": "print myStruct['field1']\nmyStruct['field2'] = 'some other values'\n"}
{"35993": ">>> class Bunch:\n...     def __init__(self, **kwds):\n...         self.__dict__.update(kwds)\n...\n>>> mystruct = Bunch(field1=value1, field2=value2)\n"}
{"36033": "from collections import namedtuple\nMyStruct = namedtuple(\"MyStruct\", \"field1 field2 field3\")\n"}
{"36061": "# Abstract struct class       \nclass Struct:\n    def __init__ (self, *argv, **argd):\n        if len(argd):\n            # Update by dictionary\n            self.__dict__.update (argd)\n        else:\n            # Update by position\n            attrs = filter (lambda x: x[0:2] != \"__\", dir(self))\n            for n in range(len(argv)):\n                setattr(self, attrs[n], argv[n])\n\n# Specific class\nclass Point3dStruct (Struct):\n    x = 0\n    y = 0\n    z = 0\n\npt1 = Point3dStruct()\npt1.x = 10\n\nprint pt1.x\nprint \"-\"*10\n\npt2 = Point3dStruct(5, 6)\n\nprint pt2.x, pt2.y\nprint \"-\"*10\n\npt3 = Point3dStruct (x=1, y=2, z=3)\nprint pt3.x, pt3.y, pt3.z\nprint \"-\"*10\n"}
{"36156": "mylist = [\"b\", \"C\", \"A\"]\nmylist.sort()\n"}
{"36156": "for x in sorted(mylist):\n    print x\n"}
{"36156": "import locale\nlocale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale\nassert sorted((u'Ab', u'ad', u'aa'),\n  key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']\n"}
{"36156": "# this is incorrect!\nmylist.sort(key=lambda x: x.lower())\n# alternative notation, a bit faster, but still wrong\nmylist.sort(key=str.lower)\n"}
{"36219": "C:\\Dev>grep -ir --include=*.px[id] catalog lxml-2.1.1/src | sed -r \"s/\\s+/ /g\"\nlxml-2.1.1/src/lxml/dtd.pxi: catalog.\nlxml-2.1.1/src/lxml/xmlerror.pxd: XML_FROM_CATALOG = 20 # The Catalog module\nlxml-2.1.1/src/lxml/xmlerror.pxd: XML_WAR_CATALOG_PI = 93 # 93\nlxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_MISSING_ATTR = 1650\nlxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_ENTRY_BROKEN = 1651 # 1651\nlxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_PREFER_VALUE = 1652 # 1652\nlxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_NOT_CATALOG = 1653 # 1653\nlxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_RECURSION = 1654 # 1654\nlxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG=20\nlxml-2.1.1/src/lxml/xmlerror.pxi:WAR_CATALOG_PI=93\nlxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_MISSING_ATTR=1650\nlxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_ENTRY_BROKEN=1651\nlxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_PREFER_VALUE=1652\nlxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_NOT_CATALOG=1653\nlxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_RECURSION=1654\n"}
{"36395": "for x in sorted(list):\n    print x\n"}
{"36901": "def foo(param1, *param2):\ndef bar(param1, **param2):\n"}
{"36908": "In [1]: def foo(*args):\n   ...:     for a in args:\n   ...:         print a\n   ...:         \n   ...:         \n\nIn [2]: foo(1)\n1\n\n\nIn [4]: foo(1,2,3)\n1\n2\n3\n"}
{"36908": "In [5]: def bar(**kwargs):\n   ...:     for a in kwargs:\n   ...:         print a, kwargs[a]\n   ...:         \n   ...:         \n\nIn [6]: bar(name='one', age=27)\nage 27\nname one\n"}
{"36908": "def foo(kind, *args, **kwargs):\n   pass\n"}
{"36908": "In [9]: def foo(bar, lee):\n   ...:     print bar, lee\n   ...:     \n   ...:     \n\nIn [10]: l = [1,2]\n\nIn [11]: foo(*l)\n1 2\n"}
{"36908": "first, *rest = [1,2,3,4]\nfirst, *l, last = [1,2,3,4]\n"}
{"36908": "def func(arg1, arg2, arg3='default', *, kwarg1='abc', kwarg2='xyz'):\n    pass\n"}
{"36911": "def foo(param1, *param2):\n    print param1\n    print param2\n\ndef bar(param1, **param2):\n    print param1\n    print param2\n\nfoo(1,2,3,4,5)\nbar(1,a=2,b=3)\n"}
{"36911": "1\n(2, 3, 4, 5)\n1\n{'a': 2, 'b': 3}\n"}
{"36926": "def foo(x,y,z):\n    print \"x=\" + str(x)\n    print \"y=\" + str(y)\n    print \"z=\" + str(z)\n"}
{"36926": ">>> mylist = [1,2,3]\n>>> foo(*mylist)\nx=1\ny=2\nz=3\n\n>>> mydict = {'x':1,'y':2,'z':3}\n>>> foo(**mydict)\nx=1\ny=2\nz=3\n\n>>> mytuple = (1, 2, 3)\n>>> foo(*mytuple)\nx=1\ny=2\nz=3\n"}
{"36935": "from django.conf.urls.defaults import *\nfrom django.views.generic.create_update import create_object\n\nfrom my_products_app.models import Product\n\nurlpatterns = patterns('',\n    url(r'^admin/products/add/$', create_object, {'model': Product}))\n"}
{"36935": "<form action=\".\" method=\"POST\">\n  {{ form }}\n  <input type=\"submit\" name=\"submit\" value=\"add\">\n</form>\n"}
{"36937": "class Animal:\n    DOG = 1\n    CAT = 2\n\nx = Animal.DOG\n"}
{"36937": "class Animal(Enum):\n    DOG = 1\n    CAT = 2\n\nprint(Animal.DOG)\n<Animal.DOG: 1>\n"}
{"36937": "class Animal(Enum):\n    DOG, CAT = range(2)\n"}
{"36940": "months = {\n    'January': 1,\n    'February': 2,\n    ...\n}\n"}
{"36940": "months = dict(\n    January=1,\n    February=2,\n    ...\n)\n"}
{"37000": "ANIMALS = ['cat', 'dog', 'python']\n\ndef take_for_a_walk(animal):\n    assert animal in ANIMALS\n    ...\n"}
{"37479": "import cgi\n\nclass ClassX(object):\n  pass # ... with own __repr__\n\nclass ClassY(object):\n  pass # ... with own __repr__\n\ninst_x=ClassX()\n\ninst_y=ClassY()\n\ninst_z=[ i*i for i in range(25) ]\n\ninst_b=True\n\nclass HTMLDecorator(object):\n   def html(self): # an \"enhanced\" version of __repr__\n       return cgi.escape(self.__repr__()).join((\"<H1>\",\"</H1>\"))\n\nprint HTMLDecorator(inst_x).html()\nprint HTMLDecorator(inst_y).html()\nwrapped_z = HTMLDecorator(inst_z)\ninst_z[0] += 70\nwrapped_z[0] += 71\nprint wrapped_z.html()\nprint HTMLDecorator(inst_b).html()\n"}
{"37488": "def decorator (func):\n    def new_func ():\n        return \"new_func %s\" % func ()\n    return new_func\n\n@decorator\ndef a ():\n    return \"a\"\n\ndef b ():\n    return \"b\"\n\nprint a() # new_func a\nprint decorator (b)() # new_func b\n"}
{"37512": "import lxml.html\nt = lxml.html.fromstring(\"...\")\nt.text_content()\n"}
{"37526": "import cgi\n\nclass ClassX(object):\n    def __repr__ (self):\n        return \"<class X>\"\n\nclass HTMLDecorator(object):\n    def __init__ (self, wrapped):\n        self.__wrapped = wrapped\n\n    def html (self):\n        sep = cgi.escape (repr (self.__wrapped))\n        return sep.join ((\"<H1>\", \"</H1>\"))\n\ninst_x=ClassX()\ninst_b=True\n\nprint HTMLDecorator(inst_x).html()\nprint HTMLDecorator(inst_b).html()\n"}
{"37544": "import cgi\nfrom math import sqrt\n\nclass ClassX(object): \n  def __repr__(self): \n    return \"Best Guess\"\n\nclass ClassY(object):\n  pass # ... with own __repr__\n\ninst_x=ClassX()\n\ninst_y=ClassY()\n\ninst_z=[ i*i for i in range(25) ]\n\ninst_b=True\n\navoid=\"__class__ __init__ __dict__ __weakref__\"\n\nclass HTMLDecorator(object):\n    def __init__(self,master):\n        self.master = master\n        for attr in dir(self.master):\n            if ( not attr.startswith(\"__\") or \n                attr not in avoid.split() and \"attr\" not in attr):\n                self.__setattr__(attr, self.master.__getattribute__(attr))\n\n    def html(self): # an \"enhanced\" version of __repr__\n        return cgi.escape(self.__repr__()).join((\"<H1>\",\"</H1>\"))\n\n    def length(self):\n        return sqrt(sum(self.__iter__()))\n\nprint HTMLDecorator(inst_x).html()\nprint HTMLDecorator(inst_y).html()\nwrapped_z = HTMLDecorator(inst_z)\nprint wrapped_z.length()\ninst_z[0] += 70\n#wrapped_z[0] += 71\nwrapped_z.__setitem__(0,wrapped_z.__getitem__(0)+ 71)\nprint wrapped_z.html()\nprint HTMLDecorator(inst_b).html()\n"}
{"37571": "def HTMLDecorator (obj):\n    def html ():\n        sep = cgi.escape (repr (obj))\n        return sep.join ((\"<H1>\", \"</H1>\"))\n    obj.html = html\n    return obj\n"}
{"37571": "class HTMLDecorator(object):\n    def __init__ (self, wrapped):\n        self.__wrapped = wrapped\n\n    def html (self):\n        sep = cgi.escape (repr (self.__wrapped))\n        return sep.join ((\"<H1>\", \"</H1>\"))\n\n    def __getattr__ (self, name):\n        return getattr (self.__wrapped, name)\n\n    def __setattr__ (self, name, value):\n        if not name.startswith ('_HTMLDecorator__'):\n            setattr (self.__wrapped, name, value)\n            return\n        super (HTMLDecorator, self).__setattr__ (name, value)\n\n    def __delattr__ (self, name):\n        delattr (self.__wraped, name)\n"}
{"37619": "import cgi\n\nclass ClassX(object):\n    pass # ... with own __repr__\n\nclass ClassY(object):\n    pass # ... with own __repr__\n\ninst_x=ClassX()\ninst_y=ClassY()\n\nclass HTMLDecorator:\n    def html(self): # an \"enhanced\" version of __repr__\n        return cgi.escape(self.__repr__()).join((\"<H1>\",\"</H1>\"))\n\nClassX.__bases__ += (HTMLDecorator,)\nClassY.__bases__ += (HTMLDecorator,)\n\nprint inst_x.html()\nprint inst_y.html()\n"}
{"38056": "import sys\nimport os\n\ntry:\n        os.kill(int(sys.argv[1]), 0)\n        print \"Running\"\nexcept:\n        print \"Not running\"\n"}
{"38092": "class Animal:\n   def __init__(self, name):\n       self.name = name\n\n   def __str__(self):\n       return self.name\n\n   def __repr__(self):\n       return \"<Animal: %s>\" % self\n\nAnimal.DOG = Animal(\"dog\")\nAnimal.CAT = Animal(\"cat\")\n\n>>> x = Animal.DOG\n>>> x\n<Animal: dog>\n>>> x == 1\nFalse\n"}
{"38196": "import sys\nimport os\nimport errno\n\ntry:\n    os.kill(int(sys.argv[1]), 0)\nexcept OSError, err:\n    if err.errno == errno.ESRCH:\n        print \"Not running\"\n    elif err.errno == errno.EPERM:\n        print \"No permission to signal this process!\"\n    else:\n        print \"Unknown error\"\nelse:\n    print \"Running\"\n"}
{"38230": " >>> import os.path\n >>> os.path.exists(\"/proc/0\")\n False\n >>> os.path.exists(\"/proc/12\")\n True\n"}
{"38435": "import dbi, odbc\n\nconnection = odbc.odbc(\"Driver=Oracle in OraHome92;Dbq=SERVER;Uid=USER;Pwd=PASSWD\")\n\ncursor = connection.cursor()\ncursor.execute(\"SELECT WhenAdded FROM Log\")\n\nresults = cursor.fetchall()\n"}
{"38435": "Traceback (most recent call last):\n...\n    results = cursor.fetchall()\ndbi.operation-error: [Oracle][ODBC][Ora]ORA-00932: inconsistent datatypes: expected %s got %s \nin FETCH\n"}
{"38514": "def f(x):\n    # do stuff\n    return (True, modified_string)\n\nsuccess, modified_string = f(something)\n"}
{"38516": "def f(in_str):\n    out_str = in_str.upper()\n    return True, out_str # Creates tuple automatically\n\nsucceeded, b = f(\"a\") # Automatic tuple unpacking\n"}
{"38601": "<form action=\".\" method=\"POST\">\n    <table>\n        {% for f in form %}\n           <tr> <td> {{ f.name }}</td> <td>{{ f }}</td> </tr>\n        {% endfor %}\n    </table>\n    <input type=\"submit\" name=\"submit\" value=\"Add Product\">\n</form>\n"}
{"38916": "from django import forms\nfrom my_app.models import Product\nfrom django.contrib.admin import widgets                                       \n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n    def __init__(self, *args, **kwargs):\n        super(ProductForm, self).__init__(*args, **kwargs)\n        self.fields['mydate'].widget = widgets.AdminDateWidget()\n        self.fields['mytime'].widget = widgets.AdminTimeWidget()\n        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()\n"}
{"38916": "<script type=\"text/javascript\" src=\"/my_admin/jsi18n/\"></script>\n<script type=\"text/javascript\" src=\"/media/admin/js/core.js\"></script>\n"}
{"38916": "<link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/forms.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/base.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/global.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/widgets.css\"/>\n"}
{"38916": "{% load adminmedia %} /* At the top of the template. */\n\n/* In the head section of the template. */\n<script type=\"text/javascript\">\nwindow.__admin_media_prefix__ = \"{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}\";\n</script>\n"}
{"38987": ">>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = x.update(y)\n>>> print(z)\nNone\n>>> x\n{'a': 1, 'b': 10, 'c': 11}\n"}
{"38989": "x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = dict(x.items() + y.items())\nprint z\n"}
{"38990": ">>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = dict(x.items() + y.items())\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n"}
{"38990": ">>> z = dict(list(x.items()) + list(y.items()))\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n"}
{"39086": "f = open(file)\nfor line in f:\n    if line.contains('foo'):\n        newline = line.replace('foo', 'bar')\n        # how to write this newline back to the file\n"}
{"39110": "from tempfile import mkstemp\nfrom shutil import move\nfrom os import remove, close\n\ndef replace(file_path, pattern, subst):\n    #Create temp file\n    fh, abs_path = mkstemp()\n    with open(abs_path,'w') as new_file:\n        with open(file_path) as old_file:\n            for line in old_file:\n                new_file.write(line.replace(pattern, subst))\n    close(fh)\n    #Remove original file\n    remove(file_path)\n    #Move new file\n    move(abs_path, file_path)\n"}
{"39113": "fin = open(\"a.txt\")\nfout = open(\"b.txt\", \"wt\")\nfor line in fin:\n    fout.write( line.replace('foo', 'bar') )\nfin.close()\nfout.close()\n"}
{"39437": "z = x.copy()\nz.update(y)\n"}
{"39659": ">>> import pkg_resources\n>>> pkg_resources.resource_ filename(__name__, \"foo.config\")\n'foo.config'\n>>> pkg_resources.resource_filename('tempfile', \"foo.config\")\n'/usr/lib/python2.4/foo.config'\n"}
{"39755": "class A:\n    def _ _init_ _(self):\n        self.name = 'A'\na = A()\n"}
{"39755": "class B:\n    name = 'B'\nb = B()\n"}
{"39960": "var foo = function(){ alert('foo'); };\nvar bar = function(){ alert('bar'); };\n\nvar s = 'foo';\nlocals()[s](); // alerts 'foo'\n"}
{"39982": "var functionName=\"myFunctionName\";\nwindow[functionName]();\n"}
{"40035": "function foo() {\n    var bar = function () {\n        alert('hello world');\n    };\n    var s = 'bar';\n    window[s](); // this won't work\n}\n"}
{"40067": "var func = {};\nfunc.bar = ...;\nvar s = \"bar\";\nfunc[s]();\n"}
{"40593": "try:\n   cursor.execute(\"select 1 / 0 from dual\")\nexcept cx_Oracle.DatabaseError, e:\n   error, = e\n   print \"Code:\", error.code\n   print \"Message:\", error.message\n"}
{"40593": "Code: 1476\nMessage: ORA-01476: divisor is equal to zero\n"}
{"40705": "if sys.version_info < (2, 4):\n    raise ImportError(\"Cannot run with Python version < 2.4\")\n"}
{"40721": "$ mkdir ~/bin\n$ ln -s `which python2.4` ~/bin/python\n$ export PATH=~/bin:$PATH\n"}
{"41562": "name = sys._getframe(1).f_code\nname = \"%s:%d %s()\" %(os.path.split(name.co_filename)[1],name.co_firstlineno,name.co_name)\n"}
{"41707": "job={}\njob['jobid'], job['label'], job['username']=<querycode>\n"}
{"41723": "values = <querycode>\nkeys = [\"jobid\", \"label\", \"username\"]\njob = dict([[keys[i], values [i]] for i in xrange(len(values ))])\n"}
{"41730": "class TypedTuple:\n    def __init__(self, fieldlist, items):\n       self.fieldlist = fieldlist\n       self.items = items\n    def __getattr__(self, field):\n       return self.items[self.fieldlist.index(field)]\n"}
{"41730": "j = TypedTuple([\"jobid\", \"label\", \"username\"], job)\nprint j.jobid\n"}
{"42052": "a = {}\na[(1,2,\"bob\")] = \"hello!\"\na[(\"Hello\",\"en-US\")] = \"Hi There!\"\n"}
{"42516": "import os\nimport glob\ndef best_python():\n    plist = []\n    for i in os.getenv(\"PATH\").split(\":\"):\n        for j in glob.glob(os.path.join(i, \"python2.[0-9]\")):\n             plist.append(os.path.join(i, j))\n    plist.sort()\n    plist.reverse()\n    if len(plist) == 0: return None\n    return plist[0]\n"}
{"42581": ">>> import re\n>>> s = \"\"\"// The quick brown fox.\n... // Jumped over the lazy dog.\"\"\"\n>>> re.sub('^//', '', s, re.MULTILINE)\n' The quick brown fox.\\n// Jumped over the lazy dog.'\n"}
{"42997": ">>> import datetime\n>>> datetime.date (2000, 2, 1) - datetime.timedelta (days = 1)\ndatetime.date(2000, 1, 31)\n>>> \n"}
{"43088": "def last_day_of_month(date):\n    if date.month == 12:\n        return date.replace(day=31)\n    return date.replace(month=date.month+1, day=1) - datetime.timedelta(days=1)\n\n>>> last_day_of_month(datetime.date(2002, 1, 17))\ndatetime.date(2002, 1, 31)\n>>> last_day_of_month(datetime.date(2002, 12, 9))\ndatetime.date(2002, 12, 31)\n>>> last_day_of_month(datetime.date(2008, 2, 14))\ndatetime.date(2008, 2, 29)\n"}
{"43172": "def check_commit_msg(local, master, old_revno, old_revid, new_revno, new_revid):\n    branch = local or master\n    revision = branch.repository.get_revision(new_revid)\n    print revision.message\n"}
{"43301": "RO = PropertyValue('ReadOnly', 0, True, 0)\nHidden = PropertyValue('Hidden', 0, True, 0)\nxDoc = desktop.loadComponentFromURL( docpath,\"_blank\", 0, (RO, Hidden,) )\n"}
{"43364": "import os\n\ndef doc_to_text_catdoc(filename):\n    (fi, fo, fe) = os.popen3('catdoc -w \"%s\"' % filename)\n    fi.close()\n    retval = fo.read()\n    erroroutput = fe.read()\n    fo.close()\n    fe.close()\n    if not erroroutput:\n        return retval\n    else:\n        raise OSError(\"Executing the command caused an error: %s\" % erroroutput)\n\n# similar doc_to_text_antiword()\n"}
{"43663": ">>> import calendar\n>>> calendar.monthrange(2002,1)\n(1, 31)\n>>> calendar.monthrange(2008,2)\n(4, 29)\n>>> calendar.monthrange(2100,2)\n(0, 28)\n"}
{"43663": ">>> from calendar import monthrange\n>>> monthrange(2012, 2)\n(2, 29)\n"}
{"44084": "def foo():\n    \"\"\"This function does nothing.\"\"\"\n    pass\n"}
{"44381": "import inspect\n\ndef get_subclasses(mod, cls):\n    \"\"\"Yield the classes in module ``mod`` that inherit from ``cls``\"\"\"\n    for name, obj in inspect.getmembers(mod):\n        if hasattr(obj, \"__bases__\") and cls in obj.__bases__:\n            yield obj\n"}
{"44403": "class foo(object): pass\nclass bar(foo): pass\nclass baz(foo): pass\n\nclass grar(Exception): pass\n\ndef find_subclasses(module, clazz):\n    for name in dir(module):\n        o = getattr(module, name)\n\n        try: \n             if issubclass(o, clazz):\n             yield name, o\n        except TypeError: pass\n\n>>> import foo\n>>> list(foo.find_subclasses(foo, foo.foo))\n[('bar', <class 'foo.bar'>), ('baz', <class 'foo.baz'>), ('foo', <class 'foo.foo'>)]\n>>> list(foo.find_subclasses(foo, object))\n[('bar', <class 'foo.bar'>), ('baz', <class 'foo.baz'>), ('foo', <class 'foo.foo'>), ('grar', <class 'foo.grar'>)]\n>>> list(foo.find_subclasses(foo, Exception))\n[('grar', <class 'foo.grar'>)]\n"}
{"44512": "def merge(d1, d2, merge_fn=lambda x,y:y):\n    \"\"\"\n    Merges two dictionaries, non-destructively, combining \n    values on duplicate keys as defined by the optional merge\n    function.  The default behavior replaces the values in d1\n    with corresponding values in d2.  (There is no other generally\n    applicable merge strategy, but often you'll have homogeneous \n    types in your dicts, so specifying a merge technique can be \n    valuable.)\n\n    Examples:\n\n    >>> d1\n    {'a': 1, 'c': 3, 'b': 2}\n    >>> merge(d1, d1)\n    {'a': 1, 'c': 3, 'b': 2}\n    >>> merge(d1, d1, lambda x,y: x+y)\n    {'a': 2, 'c': 6, 'b': 4}\n\n    \"\"\"\n    result = dict(d1)\n    for k,v in d2.iteritems():\n        if k in result:\n            result[k] = merge_fn(result[k], v)\n        else:\n            result[k] = v\n    return result\n"}
{"44781": "myList = ['a','b','c','d']\nmyString = \",\".join(myList )\n"}
{"44788": ">>>foo = [ 'a', 'b', 'c' ]\n>>>print \",\".join(foo)\na,b,c\n>>>print \",\".join([])\n\n>>>print \",\".join(['a'])\na\n"}
{"44794": ">>> ','.join([''])\n''\n>>> ','.join(['s'])\n's'\n>>> ','.join(['a','b','c'])\n'a,b,c'\n"}
{"44878": "from itertools import imap\nl = [1, \"foo\", 4 ,\"bar\"]\n\",\".join(imap(str, l))\n"}
{"45013": "HTTP/1.0 200 OK\nServer  WSGIServer/0.1 Python/2.5.2\nDate    Thu, 04 Sep 2008 23:56:10 GMT \nVary    Cookie\nContent-Length  2301\nContent-Type    text/html; charset=utf-8\n"}
{"45013": "HTTP/1.1 200 OK\nDate    Thu, 04 Sep 2008 23:56:06 GMT\nServer  Apache/2.2.8 (Ubuntu) mod_python/3.3.1 Python/2.5.2 PHP/5.2.4-2ubuntu5 with Suhosin-Patch\nVary    Cookie\nContent-Length  2301\nContent-Type    text/html; charset=utf-8\n"}
{"45122": "app/\n  app.py\n  controllers/\n    __init__.py\n    project.py\n    plugin.py\n"}
{"45232": "def reduceOpacity(im, opacity):\n    \"\"\"Returns an image with reduced opacity.\"\"\"\n    assert opacity >= 0 and opacity <= 1\n    if im.mode != 'RGBA':\n        im = im.convert('RGBA')\n    else:\n        im = im.copy()\n    alpha = im.split()[3]\n    alpha = ImageEnhance.Brightness(alpha).enhance(opacity)\n    im.putalpha(alpha)\n    return im\n\ndef watermark(im, mark, position, opacity=1):\n    \"\"\"Adds a watermark to an image.\"\"\"\n    if opacity < 1:\n        mark = reduceOpacity(mark, opacity)\n    if im.mode != 'RGBA':\n        im = im.convert('RGBA')\n    # create a transparent layer the size of the image and draw the\n    # watermark in that layer.\n    layer = Image.new('RGBA', im.size, (0,0,0,0))\n    if position == 'tile':\n        for y in range(0, im.size[1], mark.size[1]):\n            for x in range(0, im.size[0], mark.size[0]):\n                layer.paste(mark, (x, y))\n    elif position == 'scale':\n        # scale, but preserve the aspect ratio\n        ratio = min(float(im.size[0]) / mark.size[0], float(im.size[1]) / mark.size[1])\n        w = int(mark.size[0] * ratio)\n        h = int(mark.size[1] * ratio)\n        mark = mark.resize((w, h))\n        layer.paste(mark, ((im.size[0] - w) / 2, (im.size[1] - h) / 2))\n    else:\n        layer.paste(mark, position)\n    # composite the watermark with the layer\n    return Image.composite(layer, im, layer)\n\nimg = Image.open('/path/to/image/to/be/watermarked.jpg')\n\nmark1 = Image.open('/path/to/watermark1.png')\nmark2 = Image.open('/path/to/watermark2.png')\n\nimg = watermark(img, mark1, (img.size[0]-mark1.size[0]-5, img.size[1]-mark1.size[1]-5), 0.5)\nimg = watermark(img, mark2, 'scale', 0.01)\n"}
{"45540": "from Tkinter import *\nimport tkMessageBox\n\nroot = Tk()\nroot.withdraw() \n\n# TODO not if a window with this title exists\ntkMessageBox.showinfo(\"Key you!\", \" \".join(sys.argv[1:]))\n"}
{"46205": "if 'normal' != root.state():\n    tkMessageBox.showinfo(\"Key you!\", \" \".join(sys.argv[1:]))\n"}
{"46233": ">>> l = [1, \"foo\", 4 ,\"bar\"]\n>>> \",\".join(str(bit) for bit in l)\n'1,foo,4,bar' \n"}
{"46442": "sqlalchemy.default.url = [connection string here]\nsqlalchemy.pool_recycle = 1800\n"}
{"47032": "def find_subclasses(module, clazz):\n    for name in dir(module):\n        o = getattr(module, name)\n        try:\n            if (o != clazz) and issubclass(o, clazz):\n                yield name, o\n        except TypeError: pass\n"}
{"47789": "# Generator expression\n(x*2 for x in range(256))\n\n# List comprehension\n[x*2 for x in range(256)]\n"}
{"47801": "  File \"/home/cnu/env/lib/python2.5/site-packages/SQLAlchemy-0.4.7-py2.5.egg/sqlalchemy/schema.py\", line 96, in __call__\n    table = metadata.tables[key]\nAttributeError: 'module' object has no attribute 'tables'\n"}
{"47826": "def gen():\n    return (something for something in get_some_stuff())\n\nprint gen()[:2]     # generators don't support indexing or slicing\nprint [5,6] + gen() # generators can't be added to lists\n"}
{"48154": "import pyPdf\npdf = pyPdf.PdfFileReader(open(filename, \"rb\"))\nfor page in pdf.pages:\n    print page.extractText()\n"}
{"49492": ">>> timeit.Timer(\"dict(x, **y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.52571702003479\n>>> timeit.Timer(\"temp = x.copy()\\ntemp.update(y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.694622993469238\n>>> timeit.Timer(\"dict(x.items() + y.items())\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n41.484580039978027\n"}
{"49514": "for i=1:length(a)\n  c(i) = a(i) + b(i);\nend\n"}
{"50351": "from visual import *\n\nfloor = box (pos=(0,0,0), length=4, height=0.5, width=4, color=color.blue)\nball = sphere (pos=(0,4,0), radius=1, color=color.red)\nball.velocity = vector(0,-1,0)\ndt = 0.01\n\nwhile 1:\n    rate (100)\n    ball.pos = ball.pos + ball.velocity*dt\n    if ball.y < ball.radius:\n        ball.velocity.y = -ball.velocity.y\n    else:\n        ball.velocity.y = ball.velocity.y - 9.8*dt\n"}
{"50425": "from google.appengine.ext import webapp\n\nregister = webapp.template.create_template_register()\n\ndef hash(h,key):\n    if key in h:\n        return h[key]\n    else:\n        return None\n\nregister.filter(hash)\n"}
{"50905": "import inspect, os\nprint inspect.getfile(inspect.currentframe()) # script filename (usually with path)\nprint os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory\n"}
{"50929": ">>> import weakref\n>>> class Object:\n...     pass\n...\n>>> o = Object()\n>>> r = weakref.ref(o)\n>>> # if the reference is still active, r() will be o, otherwise None\n>>> do_something_with_o(r()) \n"}
{"50986": "import inspect,os\ninspect.stack()[0]  => (<frame object at 0x00AC2AC0>, 'g:\\\\Python\\\\Test\\\\_GetCurrentProgram.py', 15, '<module>', ['print inspect.stack()[0]\\n'], 0)\nos.path.abspath (inspect.stack()[0][1]) => 'g:\\\\Python\\\\Test\\\\_GetCurrentProgram.py'\n"}
{"51023": ">>> import datetime as dt\n>>> t1 = dt.time(23, 5, 5, 5)\n>>> t2 = dt.time(10, 5, 5, 5)\n>>> dt1 = dt.timedelta(hours=t1.hour, minutes=t1.minute, seconds=t1.second, microseconds=t1.microsecond)\n>>> dt2 = dt.timedelta(hours=t2.hour, minutes=t2.minute, seconds=t2.second, microseconds=t2.microsecond)\n>>>  print(dt1-dt2)\n13:00:00\n>>> print(dt2-dt1)\n-1 day, 11:00:00\n>>> print(abs(dt2-dt1))\n13:00:00\n"}
{"51023": ">>> dt2 < dt1\nTrue\n>>> t2 < t1\nTrue\n"}
{"51029": "t1, t2 = datetime.time(...), datetime.time(...)\n\nt1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond\nt2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond\n\ndelta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])\n"}
{"51042": ">>> import datetime\n>>> t1 = datetime.time(2,3,4)\n>>> t2 = datetime.time(18,20,59)\n>>> dummydate = datetime.date(2000,1,1)\n>>> datetime.datetime.combine(dummydate,t2) - datetime.datetime.combine(dummydate,t1)\ndatetime.timedelta(0, 58675)\n"}
{"51137": "#!/usr/bin/octave -qf\n\nfunction result = dostuff(my_ten, my_one)\n  result = my_ten + my_one\nendfunction\n\ntens = [ 10 20 30 ];\nones = [ 1 2 3];\n\nx = arrayfun(@dostuff, tens, ones);\n\nx\n"}
{"51137": "x =\n\n   11   22   33\n"}
{"51218": "sys.stdout.write(\"\\r%2d%%\" % percent)\nsys.stdout.flush()\n"}
{"51240": "import lxml.html\nt = lxml.html.parse(url)\nprint t.find(\".//title\").text\n"}
{"51242": "#!/usr/bin/env python\n#coding:utf-8\n\nfrom BeautifulSoup import BeautifulSoup\nfrom mechanize import Browser\n\n#This retrieves the webpage content\nbr = Browser()\nres = br.open(\"https://www.google.com/\")\ndata = res.get_data() \n\n#This parses the content\nsoup = BeautifulSoup(data)\ntitle = soup.find('title')\n\n#This outputs the content :)\nprint title.renderContents()\n"}
{"51263": "from mechanize import Browser\nbr = Browser()\nbr.open(\"http://www.google.com/\")\nprint br.title()\n"}
{"51412": "def methodA(arg, **kwargs):\n    pass\n\ndef methodB(arg, *args, **kwargs):\n    pass\n"}
{"51412": "def methodA(arg, **kwargs):\n    methodB(\"argvalue\", kwargs)\n"}
{"51502": "if foo:\n   bar = baz\n   while bar not biz:\n      bar = i_am_going_to_find_you_biz_i_swear_on_my_life()\n\ndid_i_not_warn_you_biz()\nmy_father_is_avenged()\n"}
{"51502": "if foo:\n   bar = baz\n   while bar not biz:\n      bar = i_am_going_to_find_you_biz_i_swear_on_my_life()\n   #-- while --\n#-- if --\n\ndid_i_not_warn_you_biz()\nmy_father_is_avenged()\n"}
{"51523": ">>> import os\n>>> os.path.abspath(\"mydir/myfile.txt\")\n"}
{"51539": ">>> import os\n>>> os.path.abspath('mydir/myfile.txt')\n'C:\\\\example\\\\cwd\\\\mydir\\\\myfile.txt'\n>>> \n"}
{"51550": "import urllib2\nfrom BeautifulSoup import BeautifulSoup\n\nsoup = BeautifulSoup(urllib2.urlopen(\"https://www.google.com\"))\nprint soup.title.string\n"}
{"51551": "if foo:\n   bar = baz\n\n   while bar not biz:\n      bar = i_am_going_to_find_you_biz_i_swear_on_my_life()\n\ndid_i_not_warn_you_biz()\nmy_father_is_avenged()\n"}
{"51553": "CREATE TABLE tuples (id integer primary key, a integer, b integer, c integer, d integer);\n\n\\copy tuples from '350,000 responses.csv' delimiter as ','\n"}
{"51553": "java   1.5 threads ~ 7 ms    \njava   1.5         ~ 10 ms    \npython 2.5 numpy   ~ 18 ms  \npython 2.5         ~ 370 ms\n"}
{"51553": "increased the shared memory available to Postgres to 256MB    \nincreased the working memory to 2MB\ndisabled connection and statement logging\nused a stored procedure via CREATE FUNCTION ... LANGUAGE SQL\n"}
{"52006": "create materialized view mv_so_x \nbuild immediate \nrefresh complete \nSTART WITH SYSDATE NEXT SYSDATE + 1/24/60\n as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;\n"}
{"52006": "SQL> select * from mv_so_x;\n\nno rows selected\n\nElapsed: 00:00:00.00\n"}
{"52006": "SQL> select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:05.74\nSQL> select * from mv_so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:00.00\nSQL> \n"}
{"52006": "SQL> insert into so_x values (1,2,3,4,5);\n\n1 row created.\n\nElapsed: 00:00:00.00\nSQL> commit;\n\nCommit complete.\n\nElapsed: 00:00:00.00\nSQL> select * from mv_so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:00.00\nSQL> \n"}
{"52006": "SQL> /\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899460 7495.35823 22.2905352 5.00276078 2.17647059\n\nElapsed: 00:00:00.00\nSQL> \n"}
{"52111": "bar = foo if baz else None\nwhile bar not biz:\n    bar = i_am_going_to_find_you_biz_i_swear_on_my_life()\n\ndid_i_not_warn_you_biz()\nmy_father_is_avenged()\n"}
{"52844": "+-a\n  |\n  +-b\n  | |\n  | +-whatever\n  |\n  +-c\n  | |\n  | +-d\n  |   |\n  |   +-e\n  |   |\n  |   +-f\n  |   \n  +-g\n    |\n    +-whatever\n"}
{"52844": "+-a\n  |\n  +-c\n    |\n    +-[d]\n      |\n      +-e\n      |\n      +-f\n"}
{"53162": "e = 'a' + 'b' +\n    'c' + 'd'\n"}
{"53170": "from subprocess import PIPE, Popen\n\ndef free_volume(filename):\n    \"\"\"Find amount of disk space available to the current user (in bytes) \n       on the file system containing filename.\"\"\"\n    stats = Popen([\"df\", \"-Pk\", filename], stdout=PIPE).communicate()[0]\n    return int(stats.splitlines()[1].split()[3]) * 1024\n"}
{"53173": "b = ((i1 < 20) and\n     (i2 < 30) and\n     (i3 < 40))\n"}
{"53173": "b = (i1 < 20) and \\\n    (i2 < 30) and \\\n    (i3 < 40)\n"}
{"53180": "a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, \n            blahblah6, blahblah7)\n"}
{"53180": "if a == True and \\\n   b == False\n"}
{"53180": "a = '1' + '2' + '3' + \\\n    '4' + '5'\n"}
{"53180": "a = ('1' + '2' + '3' +\n    '4' + '5')\n"}
{"53182": "if 1900 < year < 2100 and 1 <= month <= 12 \\\n   and 1 <= day <= 31 and 0 <= hour < 24 \\\n   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n        return 1\n"}
{"53200": "with open('/path/to/some/file/you/want/to/read') as file_1, \\\n        open('/path/to/some/file/being/written', 'w') as file_2:\n    file_2.write(file_1.read())\n"}
{"53200": "class Rectangle(Blob):\n\n    def __init__(self, width, height,\n                 color='black', emphasis=None, highlight=0):\n        if (width == 0 and height == 0 and\n                color == 'red' and emphasis == 'strong' or\n                highlight > 100):\n            raise ValueError(\"sorry, you lose\")\n        if width == 0 and height == 0 and (color == 'red' or\n                                           emphasis is None):\n            raise ValueError(\"I don't think so -- values are %s, %s\" %\n                             (width, height))\n        Blob.__init__(self, width, height,\n                      color, emphasis, highlight)\n"}
{"53200": "# Yes: easy to match operators with operands\nincome = (gross_wages\n          + taxable_interest\n          + (dividends - qualified_dividends)\n          - ira_deduction\n          - student_loan_interest)\n"}
{"53246": ">>> from BeautifulSoup import BeautifulSoup    \n>>> html = \"<html>\u00c4\u00c4RITALO!</html>\"\n>>> soup = BeautifulSoup(html, convertEntities=BeautifulSoup.HTML_ENTITIES)\n>>> print soup.contents[0].string\n\u00c4\u00c4RITALO!\n"}
{"53322": "def isbound(method):\n    return method.im_self is not None\n\ndef instance(bounded_method):\n    return bounded_method.im_self\n"}
{"53463": ">>> ed_user = User('ed', 'Ed Jones', 'edspassword')\n>>> session.add(ed_user)\n>>> our_user = session.query(User).filter_by(name='ed').first() \n>>> our_user\n    <User('ed','Ed Jones', 'edspassword')>\n"}
{"53522": "if not a:\n  print(\"List is empty\")\n"}
{"53523": "if not a:\n    print \"The list is empty or null\"\n"}
{"53525": "a = []\nif a:\n     print \"not empty\"\n"}
{"53533": "if a == []:\n   print \"The list is empty.\"\n"}
{"53549": "import mymodule_jython as mymodule\n\nimport mymodule_cpython as mymodule\n"}
{"53752": "Yes: if not seq:\n     if seq:\n\nNo:  if len(seq):\n     if not len(seq):\n"}
{"53786": "how_many_days = (end_date - start_date).days\nfreqs = defaultdict(int)\nfor x in xrange(how_many_responses):\n    freqs[int(how_many_days * weibullvariate(0.5, 2))] += 1\ntimeline = []\nday = start_date\nfor i,freq in sorted(freqs.iteritems()):\n    timeline.append((day, freq))\n    day += timedelta(days=1)\nreturn timeline\n"}
{"55180": "this is a\nthis is b\nthis is c\n"}
{"55188": "keys = list(d.keys())\nkeys.sort()\nfor key in keys:\n    print d[key]\n"}
{"55193": "for key in sorted(d):\n    print d[key]\n"}
{"55194": "for key, value in sorted(d.items()):\n    print value\n"}
{"55197": ">>> d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}\n>>> for k,v in sorted(d.items()):\n...     print v, k\n... \nthis is a a\nthis is b b\nthis is c c\n"}
{"55202": "d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}\nks = d.keys()\nks.sort()\nfor k in ks:\n    print \"this is \" + k\n"}
{"55385": "class Whois(object):\n    _whois_by_query_cache = {}\n\n    def __init__(self, query):\n        \"\"\"Initializes the instance variables to defaults. See :meth:`lookup`\n        for details on how to submit the query.\"\"\"\n        self.query = query\n        self.domain = None\n        # ... other fields.\n\n    def lookup(self):\n        \"\"\"Submits the `whois` query and stores results internally.\"\"\"\n        # ... implementation\n"}
{"55404": "import re\nreg = re.compile('<input type=\"hidden\" name=\"([^\"]*)\" value=\"<id>\" />')\nvalue = reg.search(inputHTML).group(1)\nprint 'Value is', value\n"}
{"55424": "from BeautifulSoup import BeautifulSoup\n\n#Or retrieve it from the web, etc. \nhtml_data = open('/yourwebsite/page.html','r').read()\n\n#Create the soup object from the HTML data\nsoup = BeautifulSoup(html_data)\nfooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag\nvalue = fooId.attrs[2][1] #The value of the third attribute of the desired tag \n                          #or index it directly via fooId['value']\n"}
{"55734": "from django.db.models import permalink\n\ndef get_absolute_url(self): \n    \"\"\"Construct the absolute URL for this Item.\"\"\"\n    return ('project.app.views.view_name', [str(self.id)])\nget_absolute_url = permalink(get_absolute_url)\n"}
{"55734": "from django.core.urlresolvers import reverse\n\ndef get_absolute_url(self): \n    \"\"\"Construct the absolute URL for this Item.\"\"\"\n    return reverse('project.app.views.view_name', None, [str(self.id)])\n"}
{"56032": "from datetime import *\nfrom random import *\n\ntimeline = []\nscaling = 10\nstart_date = date(2008, 5, 1)\nend_date = date(2008, 6, 1)\n\nnum_days = (end_date - start_date).days + 1\ndays = [start_date + timedelta(i) for i in range(num_days)]\nrequests = [int(scaling * weibullvariate(0.5, 2)) for i in range(num_days)]\ntimeline = zip(days, requests)\ntimeline\n"}
{"56102": "timeline = (start_date + timedelta(days=days) for days in count(0))\nhow_many_days = (end_date - start_date).days\npick_a_day = lambda _:int(how_many_days * weibullvariate(0.5, 2))\ndays = sorted(imap(pick_a_day, xrange(how_many_responses)))\nhistogram = zip(timeline, (len(list(responses)) for day, responses in groupby(days)))\nprint '\\n'.join((d.strftime('%Y-%m-%d ') + \"*\" * c) for d,c in histogram)\n"}
{"56134": "for key in sorted(d):\n  print d[key]\n"}
{"56144": "/<input\\s+type=\"hidden\"\\s+name=\"([A-Za-z0-9_]+)\"\\s+value=\"([A-Za-z0-9_\\-]*)\"\\s*/>/\n\n>>> import re\n>>> s = '<input type=\"hidden\" name=\"fooId\" value=\"12-3456789-1111111111\" />'\n>>> re.match('<input\\s+type=\"hidden\"\\s+name=\"([A-Za-z0-9_]+)\"\\s+value=\"([A-Za-z0-9_\\-]*)\"\\s*/>', s).groups()\n('fooId', '12-3456789-1111111111')\n"}
{"56190": "LIGHT_MESSAGES = {\n    'English': \"There are %(number_of_lights)s lights.\",\n    'Pirate':  \"Arr! Thar be %(number_of_lights)s lights.\"\n}\n\ndef lights_message(language, number_of_lights):\n    \"\"\"Return a language-appropriate string reporting the light count.\"\"\"\n    return LIGHT_MESSAGES[language] % locals()\n\ndef is_pirate(message):\n    \"\"\"Return True if the given message sounds piratical.\"\"\"\n    return re.search(r\"(?i)(arr|avast|yohoho)!\", message) is not None\n"}
{"56229": "import xml.etree.ElementTree as ET\nroot = ET.Element('html')\nhead = ET.SubElement(root,'head')\nscript = ET.SubElement(head,'script')\nscript.set('type','text/javascript')\nscript.text = \"var a = 'I love \u00e1 letters'\"\nbody = ET.SubElement(root,'body')\nh1 = ET.SubElement(body,'h1')\nh1.text = \"And I like the fact that 3 > 1\"\ntree = ET.ElementTree(root)\ntree.write('foo.xhtml')\n\n# more foo.xhtml\n<html><head><script type=\"text/javascript\">var a = 'I love &aacute;\nletters'</script></head><body><h1>And I like the fact that 3 > 1</h1>\n</body></html>\n"}
{"56247": "samples = [0 for i in xrange(how_many_days + 1)]\nfor s in xrange(how_many_responses):\n    samples[min(int(how_many_days * weibullvariate(0.5, 2)), how_many_days)] += 1\nhistogram = zip(timeline, samples)\nprint '\\n'.join((d.strftime('%Y-%m-%d ') + \"*\" * c) for d,c in histogram)\n"}
{"56262": "html(head(script(type='text/javascript', content='var a = ...')),\nbody(h1('And I like the fact that 3 < 1'), p('just some paragraph'))\n"}
{"56262": "from magictree import html, head, script, body, h1, p\nroot = html(\n         head(\n           script('''var a = 'I love &aacute; letters''', \n                  type='text/javascript')),\n         body(\n           h1('And I like the fact that 3 > 1')))\n\n# root is a plain Element object, like those created with ET.Element...\n# so you can write it out using ElementTree :)\ntree = ET.ElementTree(root)\ntree.write('foo.xhtml')\n"}
{"56269": ">>> from lxml import etree\n\n>>> from lxml.builder import E\n\n>>> def CLASS(*args): # class is a reserved word in Python\n...     return {\"class\":' '.join(args)}\n\n>>> html = page = (\n...   E.html(       # create an Element called \"html\"\n...     E.head(\n...       E.title(\"This is a sample document\")\n...     ),\n...     E.body(\n...       E.h1(\"Hello!\", CLASS(\"title\")),\n...       E.p(\"This is a paragraph with \", E.b(\"bold\"), \" text in it!\"),\n...       E.p(\"This is another paragraph, with a\", \"\\n      \",\n...         E.a(\"link\", href=\"http://www.python.org\"), \".\"),\n...       E.p(\"Here are some reserved characters: <spam&egg>.\"),\n...       etree.XML(\"<p>And finally an embedded XHTML fragment.</p>\"),\n...     )\n...   )\n... )\n\n>>> print(etree.tostring(page, pretty_print=True))\n<html>\n  <head>\n    <title>This is a sample document</title>\n  </head>\n  <body>\n    <h1 class=\"title\">Hello!</h1>\n    <p>This is a paragraph with <b>bold</b> text in it!</p>\n    <p>This is another paragraph, with a\n      <a href=\"http://www.python.org\">link</a>.</p>\n    <p>Here are some reservered characters: <spam&egg>.</p>\n    <p>And finally an embedded XHTML fragment.</p>\n  </body>\n</html>\n"}
{"56470": "from xml.dom.minidom import parseString\n\ndoc = parseString(\"\"\"<html>\n    <head>\n        <script type=\"text/javascript\">\n            var a = 'I love &aacute; letters'\n        </script>\n    </head>\n    <body>\n        <h1>And I like the fact that 3 > 1</h1>\n    </body>\n    </html>\"\"\")\n\nwith open(\"foo.xhtml\", \"w\") as f:\n    f.write( doc.toxml() )\n"}
{"56510": "(gdb) thr 2\n[Switching to thread 2 (process 6159 thread 0x3f1b)]\n(gdb) backtrace\n....\n"}
{"56548": "import math\nfrom datetime import datetime, timedelta, date\nfrom random import gauss\n\nhow_many_responses = 1000\nstart_date = date(2008, 5, 1)\nend_date = date(2008, 6, 1)\nnum_days = (end_date - start_date).days + 1\ntimeline = [start_date + timedelta(i) for i in xrange(num_days)]\n\ndef weibull(x, k, l):\n    return (k / l) * (x / l)**(k-1) * math.e**(-(x/l)**k)\n\ndev = 0.1\nsamples = [i * 1.25/(num_days-1) for i in range(num_days)]\nprobs = [weibull(i, 2, 0.5) for i in samples]\nnoise = [gauss(0, dev) for i in samples]\nsimdata = [max(0., e + n) for (e, n) in zip(probs, noise)]\nevents = [int(p * (how_many_responses / sum(probs))) for p in simdata]\n\nhistogram = zip(timeline, events)\n\nprint '\\n'.join((d.strftime('%Y-%m-%d ') + \"*\" * c) for d,c in histogram)\n"}
{"56820": "n = 5.59\nround(n, 1) # 5.6\n"}
{"56840": ">>> n = 5.59\n>>> int(n * 10) / 10.0\n5.5\n>>> int(n * 10 + 0.5) \n56\n"}
{"56885": "# set up the model\nclass Event(models.Model):\n    title = models.CharField(max_length=255)\n    date = models.DateField()\n    is_outdoors = models.BooleanField()\n\n    index = djangosearch.ModelIndex(text=['title'], \n                                    additional=['date', 'is_outdoors'])\n\n# run a search\nresults = Event.index.search(\"django conference\")\n"}
{"57704": ">>> 5.6\n5.5999999999999996\n>>> \n"}
{"57745": "import copy, re\nfrom BeautifulSoup import BeautifulSoup\n\nhexentityMassage = copy.copy(BeautifulSoup.MARKUP_MASSAGE)\n# replace hexadecimal character reference by decimal one\nhexentityMassage += [(re.compile('&#x([^;]+);'), \n                     lambda m: '&#%d;' % int(m.group(1), 16))]\n\ndef convert(html):\n    return BeautifulSoup(html,\n        convertEntities=BeautifulSoup.HTML_ENTITIES,\n        markupMassage=hexentityMassage).contents[0].string\n\nhtml = '<html>\u01ce\u01ce</html>'\nprint repr(convert(html))\n# u'\\u01ce\\u01ce'\n"}
{"57833": "foo = 12\nfoo in (obj.id for obj in bar)\n"}
{"57833": "foo = 12\nfoo in (obj.id for obj in bar if hasattr(obj, 'id'))\n"}
{"57877": ">>> entity = '&#x01ce'\n>>> unichr(int(entity[3:],16))\nu'\\u01ce'\n"}
{"58125": "import re, htmlentitydefs\n\n##\n# Removes HTML or XML character references and entities from a text string.\n#\n# @param text The HTML (or XML) source text.\n# @return The plain text, as a Unicode string, if necessary.\n\ndef unescape(text):\n    def fixup(m):\n        text = m.group(0)\n        if text[:2] == \"&#\":\n            # character reference\n            try:\n                if text[:3] == \"&#x\":\n                    return unichr(int(text[3:-1], 16))\n                else:\n                    return unichr(int(text[2:-1]))\n            except ValueError:\n                pass\n        else:\n            # named entity\n            try:\n                text = unichr(htmlentitydefs.name2codepoint[text[1:-1]])\n            except KeyError:\n                pass\n        return text # leave as is\n    return re.sub(\"&#?\\w+;\", fixup, text)\n"}
{"58129": ">>> import re\n>>> re.compile('he(lo')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python25\\lib\\re.py\", line 180, in compile\n    return _compile(pattern, flags)\n  File \"C:\\Python25\\lib\\re.py\", line 233, in _compile\n    raise error, v # invalid expression\nsre_constants.error: unbalanced parenthesis\n"}
{"58417": ">>> from path import path\n>>> path('mydir/myfile.txt').abspath()\n'C:\\\\example\\\\cwd\\\\mydir\\\\myfile.txt'\n>>>\n"}
{"58460": "#\n#Output the XML entry\n#\ndef genFileOLD(out,label,term,idval):\n    filename=entryTime() + \".html\"\n    writer=MarkupWriter(out, indent=u\"yes\")\n    writer.startDocument()\n    #Test element and attribute writing\n    ans=namespace=u'http://www.w3.org/2005/Atom'\n    xns=namespace=u'http://www.w3.org/1999/xhtml'\n    writer.startElement(u'entry',\n       ans,\n       extraNss={u'x':u'http://www.w3.org/1999/xhtml' ,\n                 u'dc':u'http://purl.org/dc/elements/1.1'})\n    #u'a':u'http://www.w3.org/2005/Atom',\n    #writer.attribute(u'xml:lang',unicode(\"en-UK\"))\n\n    writer.simpleElement(u'title',ans,content=unicode(label))\n    #writer.simpleElement(u'a:subtitle',ans,content=u' ')\n    id=unicode(\"http://www.dpawson.co.uk/nodesets/\"+afn.split(\".\")[0])\n    writer.simpleElement(u'id',ans,content=id)\n    writer.simpleElement(u'updated',ans,content=unicode(dtime()))\n    writer.startElement(u'author',ans)\n    writer.simpleElement(u'name',ans,content=u'Dave ')\n    writer.simpleElement(u'uri',ans,\n      content=u'http://www.dpawson.co.uk/nodesets/'+afn+\".xml\")\n    writer.endElement(u'author')\n    writer.startElement(u'category', ans)\n    if (prompt):\n        label=unicode(raw_input(\"Enter label \"))\n    writer.attribute(u'label',unicode(label))\n    if (prompt):\n        term = unicode(raw_input(\"Enter term to use \"))\n    writer.attribute(u'term', unicode(term))\n    writer.endElement(u'category')\n    writer.simpleElement(u'rights',ans,content=u'\\u00A9 Dave 2005-2008')\n    writer.startElement(u'link',ans)\n    writer.attribute(u'href',\n         unicode(\"http://www.dpawson.co.uk/nodesets/entries/\"+afn+\".html\"))\n    writer.attribute(u'rel',unicode(\"alternate\"))\n    writer.endElement(u'link')\n    writer.startElement(u'published', ans)\n    dt=dtime()\n    dtu=unicode(dt)\n    writer.text(dtu)\n    writer.endElement(u'published')\n    writer.simpleElement(u'summary',ans,content=unicode(label))\n    writer.startElement(u'content',ans)\n    writer.attribute(u'type',unicode(\"xhtml\"))\n    writer.startElement(u'div',xns)\n    writer.simpleElement(u'h3',xns,content=unicode(label))\n    writer.endElement(u'div')\n    writer.endElement(u'content')\n    writer.endElement(u'entry')\n"}
{"58701": "\"\"\"@package docstring\nDocumentation for this module.\n\nMore details.\n\"\"\"\n\ndef func():\n    \"\"\"Documentation for a function.\n\n    More details.\n    \"\"\"\n    pass\n"}
{"58701": "## @package pyexample\n#  Documentation for this module.\n#\n#  More details.\n\n## Documentation for a function.\n#\n#  More details.\ndef func():\n    pass\n"}
{"58711": "Shoes.app do\n  t = para \"Not clicked!\"\n  button \"The Label\" do\n    alert \"You clicked the button!\" # when clicked, make an alert\n    t.replace \"Clicked!\" # ..and replace the label's text\n  end\nend\n"}
{"58711": "def Shoeless(Shoes.app):\n    self.t = para(\"Not clicked!\")\n\n    def on_click_func(self):\n        alert(\"You clicked the button!\")\n        self.t.replace(\"clicked!\")\n\n    b = button(\"The label\", click=self.on_click_func)\n"}
{"58711": "class BaseControl:\n    def __init__(self):\n        self.func = None\n\n    def clicked(self, func):\n        self.func = func\n\n    def __call__(self):\n        if self.func is not None:\n            self.func()\n\nclass Button(BaseControl):\n    pass\n\nclass Label(BaseControl):\n    pass\n\n# The actual applications code (that the end-user would write)\nclass MyApp:\n    ok = Button()\n    la = Label()\n\n    @ok.clicked\n    def clickeryHappened():\n        print \"OK Clicked!\"\n\nif __name__ == '__main__':\n    a = MyApp()\n    a.ok() # trigger the clicked action\n"}
{"58990": "from Boots import App, Para, Button, alert\n\ndef Shoeless(App):\n    t = Para(text = 'Not Clicked')\n    b = Button(label = 'The label')\n\n    def on_b_clicked(self):\n        alert('You clicked the button!')\n        self.t.text = 'Clicked!'\n"}
{"59235": "import operator\n\nd = {'b' : 'this is 3', 'a': 'this is 2' , 'c' : 'this is 1'}\n\nfor key, value in sorted(d.iteritems(), key=operator.itemgetter(1), reverse=True):\n    print key, \" \", value\n"}
{"59648": " test = [] \n\nwhile x < 5: \n\n   test = round(100*random.random())\n\n   mctest.append(test) \n\n   x = x +1 \n\n\nmctestavg = (mctest[0] + mctest[1] + mctest[2])/3 \n\n#mcavg is real data\n\nif mctestavg == mcavg[2]: \n  mcwork = mctest \n"}
{"59662": ">>> a = [ ['a', 'b'], ['c', 'd'] ]\n>>> a[1]\n['c', 'd']\n>>> a[1][1]\n'd'\n"}
{"59663": "data = []\n\nfor in xrange(num_iterations):\n    data.append(generate_poll_data())\n"}
{"59709": "data = {}\ndata['a'] = [generate_poll_data()]\ndata['b'] = [generate_poll_data()]\n"}
{"59778": "from random import randint    \n\nmcworks = []\n\nfor n in xrange(NUM_ITERATIONS):\n    mctest = [randint(0, 100) for i in xrange(5)]\n    if sum(mctest[:3])/3 == mcavg[2]:\n        mcworks.append(mctest) # mcavg is real data\n"}
{"59825": ">>>elem = s.pop()\n>>>s.add(elem)\n"}
{"59841": "for e in s:\n    break\n# e is now an element from s\n"}
{"59928": "\npoor_man_set = {}\npoor_man_set[1] = None\npoor_man_set[2] = None\npoor_man_set[3] = None\n...\n"}
{"59928": "\nkeys = poor_man_set.keys()\nprint \"Some key = %s\" % keys[0]\n"}
{"59928": "\npoor_man_set = {}\npoor_man_set[1] = None\npoor_man_set[2] = None\npoor_man_set[3] = None\npoor_man_set = poor_man_set.keys()\n"}
{"60027": ">>> import random\n>>> s = set([1,2,3])\n>>> random.sample(s, 1)\n[2]\n"}
{"60027": ">>> list(set(range(10))) == range(10)\nTrue \n"}
{"60027": ">>> lst = list(s) # once, O(len(s))?\n...\n>>> e = random.sample(lst, 1)[0] # constant time\n"}
{"60211": "def f(x):\n    return {\n        'a': 1,\n        'b': 2,\n    }[x]\n"}
{"60215": "result = {\n  'a': lambda x: x * 5,\n  'b': lambda x: x + 7,\n  'c': lambda x: x - 2\n}[value](x)\n"}
{"60233": ">>> s = set([1, 2, 3])\n>>> list(s)[0]\n1\n"}
{"60236": "if x == 'a':\n    # Do the thing\nelif x == 'b':\n    # Do the other thing\nif x in 'bc':\n    # Fall-through by not using elif, but now the default case includes case 'a'!\nelif x in 'xyz':\n    # Do yet another thing\nelse:\n    # Do the default\n"}
{"60243": "class SMTP:\n    def lookupMethod(self, command):\n        return getattr(self, 'do_' + command.upper(), None)\n    def do_HELO(self, rest):\n        return 'Howdy ' + rest\n    def do_QUIT(self, rest):\n        return 'Bye'\n\nSMTP().lookupMethod('HELO')('foo.bar.com') # => 'Howdy foo.bar.com'\nSMTP().lookupMethod('QUIT')('') # => 'Bye'\n"}
{"60243": "class SMTP:\n    # ...\n\n    def do_UNKNOWN(self, rest):\n        raise NotImplementedError, 'received unknown command'\n\n    def state_COMMAND(self, line):\n        line = line.strip()\n        parts = line.split(None, 1)\n        if parts:\n            method = self.lookupMethod(parts[0]) or self.do_UNKNOWN\n            if len(parts) == 2:\n                return method(parts[1])\n            else:\n                return method('')\n        else:\n            raise SyntaxError, 'bad syntax'\n\nSMTP().state_COMMAND('   HELO   foo.bar.com  ') # => Howdy foo.bar.com\n"}
{"60506": "from distutils import setup\nimport os\n\nfor path in [my_package_directories]:\n    filename = os.path.join(pagh, '__init__.py')\n    if not os.path.exists(filename):\n        init = open(filename, 'w')\n        init.close()\n\nsetup(\n...\n)\n"}
{"60680": "class MyRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):\n  def doGET\n  [...]\n\nclass ThreadingHTTPServer(ThreadingMixIn, HTTPServer): \n    pass\n\nserver = ThreadingHTTPServer(('localhost', 80), MyRequestHandler)\nserver.serve_forever()\n"}
{"60685": "#define foo(x) if(x) \\\ndoSomething(x)\n"}
{"60685": "#define foo(x) if(x) \\\ndoSomething(x)\nnormalCode();\n"}
{"60723": "#!/usr/bin/env python\n\nTEST1=\"\"\"\n#include \"Foo.h\"\n#define bar foo\\\\\n    x\n#include \"Bar.h\"\n\"\"\"\n\nTEST2=\"\"\"\n#define bar foo\n#define x 1 \\\\\n    12 \\\\\n    2 \\\\\\\\ 3\nFoobar\n\"\"\"\n\nTEST3=\"\"\"\n#define foo(x) if(x) \\\\\ndoSomething(x)\n\"\"\"\n\nTEST4=\"\"\"\n#define foo(x) if(x) \\\\\ndoSomething(x)\nnormalCode();\n\"\"\"\n\nimport re\nmatcher = re.compile(r\"^[ \\t]*#define(.*\\\\\\n)+.*$\",re.MULTILINE)\n\ndef extractDefines(s):\n    mo = matcher.search(s)\n    if not mo:\n        print mo\n        return\n    print mo.group(0)\n\nextractDefines(TEST1)\nextractDefines(TEST2)\nextractDefines(TEST3)\nextractDefines(TEST4)\n"}
{"60729": "start        = r\"^\\s*#define\\s+\"\ncontinuation = r\"(?:.*\\\\\\n)+\"\nlastline     = r\".*$\"\n\nre_multiline_macros = re.compile(start + continuation + lastline, \n                                 re.MULTILINE)\n"}
{"60753": "from threading import Thread\nfrom SocketServer import ThreadingMixIn\nfrom BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler\n\nclass Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/plain\")\n        self.end_headers()\n        self.wfile.write(\"Hello World!\")\n\nclass ThreadingHTTPServer(ThreadingMixIn, HTTPServer):\n    pass\n\ndef serve_on_port(port):\n    server = ThreadingHTTPServer((\"localhost\",port), Handler)\n    server.serve_forever()\n\nThread(target=serve_on_port, args=[1111]).start()\nserve_on_port(2222)\n"}
{"60754": "def serve_forever(self, poll_interval=0.5):\n    \"\"\"Handle one request at a time until shutdown.\n\n    Polls for shutdown every poll_interval seconds. Ignores\n    self.timeout. If you need to do periodic tasks, do them in\n    another thread.\n    \"\"\"\n    self.__serving = True\n    self.__is_shut_down.clear()\n    while self.__serving:\n        # XXX: Consider using another file descriptor or\n        # connecting to the socket to wake this up instead of\n        # polling. Polling reduces our responsiveness to a\n        # shutdown request and wastes cpu at all other times.\n        r, w, e = select.select([self], [], [], poll_interval)\n        if r:\n            self._handle_request_noblock()\n    self.__is_shut_down.set()\n"}
{"60754": "def serve_forever(server1,server2):\n    while True:\n        r,w,e = select.select([server1,server2],[],[],0)\n        if server1 in r:\n            server1.handle_request()\n        if server2 in r:\n            server2.handle_request()\n"}
{"60811": "SELECT colum FROM table\nORDER BY RAND()\nLIMIT 1\n"}
{"60811": "SELECT column FROM table\nORDER BY RANDOM()\nLIMIT 1\n"}
{"60811": "SELECT TOP 1 column FROM table\nORDER BY NEWID()\n"}
{"60811": "SELECT column, RAND() as IDX\nFROM table\nORDER BY IDX FETCH FIRST 1 ROWS ONLY\n"}
{"60811": "SELECT column FROM\n(SELECT column FROM table\nORDER BY dbms_random.value)\nWHERE rownum = 1\n"}
{"60815": "from  sqlalchemy.sql.expression import func, select\n\nselect.order_by(func.random()) # for PostgreSQL, SQLite\n\nselect.order_by(func.rand()) # for MySQL\n\nselect.order_by('dbms_random.value') # For Oracle\n"}
{"61031": "class ordered_dict(dict):\n    def __init__(self, *args, **kwargs):\n        dict.__init__(self, *args, **kwargs)\n        self._order = self.keys()\n\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        if key in self._order:\n            self._order.remove(key)\n        self._order.append(key)\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)\n        self._order.remove(key)\n\n    def order(self):\n        return self._order[:]\n\n    def ordered_items(self):\n        return [(key,self[key]) for key in self._order]\n\n\nod = ordered_dict()\nod[\"hello\"] = \"world\"\nod[\"goodbye\"] = \"cruel world\"\nprint od.order()            # prints ['hello', 'goodbye']\n\ndel od[\"hello\"]\nod[\"monty\"] = \"python\"\nprint od.order()            # prints ['goodbye', 'monty']\n\nod[\"hello\"] = \"kitty\"\nprint od.order()            # prints ['goodbye', 'monty', 'hello']\n\nprint od.ordered_items()\n# prints [('goodbye','cruel world'), ('monty','python'), ('hello','kitty')]\n"}
{"61140": "def anyitem(iterable):\n    try:\n        return iter(iterable).next()\n    except StopIteration:\n        return None\n"}
{"61169": "parent_dir/\n  foo.py\n  tests/\n"}
{"61322": "from twisted.internet import reactor\nfrom twisted.web import resource, server\n\nclass MyResource(resource.Resource):\n    isLeaf = True\n    def render_GET(self, request):\n        return 'gotten'\n\nsite = server.Site(MyResource())\n\nreactor.listenTCP(8000, site)\nreactor.listenTCP(8001, site)\nreactor.run()\n"}
{"61517": ">>> class Foo:\n...     bar = 'hello'\n...     baz = 'world'\n...\n>>> f = Foo()\n>>> props(f)\n{ 'bar' : 'hello', 'baz' : 'world' }\n"}
{"61522": ">>> class Foo(object):\n...     bar = 'hello'\n...     baz = 'world'\n...\n>>> f = Foo()\n>>> [name for name in dir(f) if not name.startswith('__')]\n[ 'bar', 'baz' ]\n>>> dict((name, getattr(f, name)) for name in dir(f) if not name.startswith('__')) \n{ 'bar': 'hello', 'baz': 'world' }\n"}
{"61522": "import inspect\n\ndef props(obj):\n    pr = {}\n    for name in dir(obj):\n        value = getattr(obj, name)\n        if not name.startswith('__') and not inspect.ismethod(value):\n            pr[name] = value\n    return pr\n"}
{"61551": "dict((key, value) for key, value in f.__dict__.iteritems() \n    if not callable(value) and not key.startswith('__'))\n"}
{"61605": "def divide(x, y):\n    quotient = x/y\n    remainder = x % y\n    return quotient, remainder  \n\n(q, r) = divide(22, 7)\n"}
{"61636": "for i, e in enumerate([1, 3, 3]):\n    print \"index=%d, element=%s\" % (i, e)\n\n# reverse keys and values in a dictionary\nd = dict((v, k) for k, v in adict.items()) # or \nd = dict(zip(adict.values(), adict.keys()))\n"}
{"61636": ">>> import collections\n>>> Point = collections.namedtuple('Point', 'x y')\n>>> x, y = Point(0, 1)\n>>> p = Point(x, y)\n>>> x, y, p\n(0, 1, Point(x=0, y=1))\n>>> p.x, p.y, p[0], p[1]\n(0, 1, 0, 1)\n>>> for i in p:\n...   print(i)\n...\n0\n1\n"}
{"61637": "seconds = 1234\nminutes, seconds = divmod(seconds, 60)\nhours, minutes = divmod(minutes, 60)\n\nseconds = 1234\nminutes = seconds / 60\nseconds = seconds % 60\nhours = minutes / 60\nminutes = minutes % 60\n"}
{"61894": "siteroot/\n    models/\n    controllers/\n        controller1/\n        controller2/\n        ...\n    templates/\n        template1/\n        template2/\n        ...\n"}
{"61894": "base_paths = os.path.split(os.path.dirname(__file__))\ntemplate_dir = os.path.join(base_paths[0], \"templates\")\n"}
{"62094": "$ time script.php\nHI!\n\nreal    0m3.218s\nuser    0m0.080s\nsys     0m0.064s\n"}
{"62099": "you@yourmachine:~$ time echo \"hello world\"\nhello world\n\nreal    0m0.000s\nuser    0m0.000s\nsys 0m0.000s\nyou@yourmachine:~$ \n"}
{"62157": "from xml.sax import saxutils\nfrom xml.dom.minidom import parseString\nfrom xml.parsers.expat import ExpatError\n\nxml = '''<?xml version=\"1.0\" encoding=\"%s\"?>\\n\n<contents title=\"%s\" crawl_date=\"%s\" in_text_date=\"%s\" \nurl=\"%s\">\\n<main_post>%s</main_post>\\n</contents>''' %\n(self.encoding, saxutils.escape(title), saxutils.escape(time), \nsaxutils.escape(date), saxutils.escape(url), saxutils.escape(contents))\ntry:\n    minidoc = parseString(xml)\ncatch ExpatError:\n    print \"Invalid xml\"\n"}
{"62647": "import re\np = re.compile('^hello$', re.I)\np.match('Hello')\np.match('hello')\np.match('HELLO')\n"}
{"23184263": "from lxml import etree\n\nroot = etree.Element(\"root\")\nroot.text = u'\\uffff'\nroot.text += u'\\ud800' \n\nprint(etree.tostring(root))\n\nroot.text += '\\x02'.decode(\"utf-8\")\n"}
{"23184263": "<root>\uffff\ud800</root>\n\nTraceback (most recent call last):\n  File \"[\u2026]\", line 9, in <module>\n    root.text += u'\\u0002'\n  File \"lxml.etree.pyx\", line 953, in lxml.etree._Element.text.__set__ (src/lxml/lxml.etree.c:44956)\n  File \"apihelpers.pxi\", line 677, in lxml.etree._setNodeText (src/lxml/lxml.etree.c:20273)\n  File \"apihelpers.pxi\", line 1395, in lxml.etree._utf8 (src/lxml/lxml.etree.c:26485)\nValueError: All strings must be XML compatible: Unicode or ASCII, no NULL bytes or control characters\n"}
{"23184263": "s = \"<root>\uffff\ud800</root>\"\nroot = etree.fromstring(s)\n"}
{"23184263": "Traceback (most recent call last):\n  File \"[\u2026]\", line 5, in <module>\n    root.text += u'\\ud800'\n  File \"lxml.etree.pyx\", line 953, in lxml.etree._Element.text.__set__ (src/lxml/lxml.etree.c:44971)\n  File \"apihelpers.pxi\", line 677, in lxml.etree._setNodeText (src/lxml/lxml.etree.c:20273)\n  File \"apihelpers.pxi\", line 1387, in lxml.etree._utf8 (src/lxml/lxml.etree.c:26380)\nUnicodeEncodeError: 'utf-8' codec can't encode character '\\ud800' in position 1: surrogates not allowed\n"}
