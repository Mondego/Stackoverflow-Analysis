"1splitHere46","3146737splitHere46","HttpServletResponse"
"2splitHere46","3146737splitHere46","Writer"
"3splitHere46","3146737splitHere46","OutputStream"
"4splitHere46","3146737splitHere46","@RequestMapping(value = <doubleQuotes46>/something<doubleQuotes46>)<newline46mondego>public void helloWorld(HttpServletResponse response)  {<newline46mondego>  response.getWriter().println(<doubleQuotes46>Hello World<doubleQuotes46>)<newline46mondego>}<newline46mondego>"
"5splitHere46","3146737splitHere46","@ResponseBody"
"6splitHere46","3146737splitHere46","@RequestMapping(value = <doubleQuotes46>/something<doubleQuotes46>)<newline46mondego>@ResponseBody<newline46mondego>public String helloWorld()  {<newline46mondego>  return <doubleQuotes46>Hello World<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"7splitHere46","3146737splitHere46","Hello World"
"8splitHere46","3146984splitHere46","the MyClass test          --> MyClassTest<newline46mondego>test the calculate method --> testCalculate()<newline46mondego>"
"9splitHere46","3147165splitHere46","isJavaIdentifierStart"
"10splitHere46","3147165splitHere46","Character.isJavaIdentifierStart(int)"
"11splitHere46","3147165splitHere46","true"
"12splitHere46","3147194splitHere46","if (this.getClass().isInstance(other)) {<newline46mondego>  // code<newline46mondego>}<newline46mondego>"
"13splitHere46","3147250splitHere46","<cffunction name=<doubleQuotes46>DiffStructs<doubleQuotes46> hint=<doubleQuotes46>Compute the differences between two structures<doubleQuotes46> access=<doubleQuotes46>public<doubleQuotes46> output=<doubleQuotes46>true<doubleQuotes46> returntype=<doubleQuotes46>array<doubleQuotes46> ><newline46mondego>        <cfargument name=<doubleQuotes46>First<doubleQuotes46> type=<doubleQuotes46>struct<doubleQuotes46> required=<doubleQuotes46>true<doubleQuotes46> /><newline46mondego>        <cfargument name=<doubleQuotes46>Second<doubleQuotes46> type=<doubleQuotes46>struct<doubleQuotes46> required=<doubleQuotes46>true<doubleQuotes46> /><newline46mondego>        <cfargument name=<doubleQuotes46>ignoreMissing<doubleQuotes46> type=<doubleQuotes46>boolean<doubleQuotes46> required=<doubleQuotes46>false<doubleQuotes46> default=<doubleQuotes46>false<doubleQuotes46> /><newline46mondego>        <cfargument name=<doubleQuotes46>ignoreFirstEmptyString<doubleQuotes46> type=<doubleQuotes46>boolean<doubleQuotes46> required=<doubleQuotes46>false<doubleQuotes46> default=<doubleQuotes46>false<doubleQuotes46> /><newline46mondego>        <cfargument name=<doubleQuotes46>ignoreSecondEmptyString<doubleQuotes46> type=<doubleQuotes46>boolean<doubleQuotes46> required=<doubleQuotes46>false<doubleQuotes46> default=<doubleQuotes46>false<doubleQuotes46> /><newline46mondego><newline46mondego>        <cfset var Result = arrayNew(1) ><newline46mondego>        <cfset var Keys = structNew() ><newline46mondego>        <cfset var KeyName = <doubleQuotes46><doubleQuotes46> ><newline46mondego>        <cfset var obj = <doubleQuotes46><doubleQuotes46> ><newline46mondego>        <cfset var firstOk = true ><newline46mondego>        <cfset var secondOk = true ><newline46mondego><newline46mondego>        <cfloop collection=<doubleQuotes46>#Arguments.First#<doubleQuotes46> item=<doubleQuotes46>KeyName<doubleQuotes46>><newline46mondego>                <cfset Keys[KeyName]=1><newline46mondego>        </cfloop><newline46mondego>        <cfloop collection=<doubleQuotes46>#Arguments.Second#<doubleQuotes46> item=<doubleQuotes46>KeyName<doubleQuotes46>><newline46mondego>                <cfset Keys[KeyName]=1><newline46mondego>        </cfloop><newline46mondego>        <cfloop collection=<doubleQuotes46>#Keys#<doubleQuotes46> item=<doubleQuotes46>KeyName<doubleQuotes46>><newline46mondego>            <cfif NOT StructKeyExists(Arguments.First, KeyName)  ><newline46mondego>                    <cfif NOT arguments.ignoreMissing><newline46mondego>                        <cfif structFind(Arguments.Second, KeyName) neq <doubleQuotes46><doubleQuotes46>><newline46mondego>                            <cfif arguments.ignoreSecondEmptyString><newline46mondego>                                <cfset obj = {  key = KeyName<newline46mondego>                                                ,old = <doubleQuotes46><doubleQuotes46><newline46mondego>                                                ,new = structFind(Arguments.Second, KeyName) } ><newline46mondego>                                <cfset arrayAppend(Result, obj )><newline46mondego>                            </cfif><newline46mondego>                        </cfif><newline46mondego>                    </cfif><newline46mondego><newline46mondego>            <cfelseif NOT StructKeyExists(Arguments.Second, KeyName)><newline46mondego>                    <cfif NOT arguments.ignoreMissing><newline46mondego>                        <cfif structFind(Arguments.First, KeyName) neq <doubleQuotes46><doubleQuotes46>><newline46mondego>                            <cfif arguments.ignoreFirstEmptyString ><newline46mondego>                                <cfset obj = {  key = KeyName<newline46mondego>                                                ,old = structFind(Arguments.First, KeyName) <newline46mondego>                                                ,new = <doubleQuotes46><doubleQuotes46> } ><newline46mondego>                                <cfset arrayAppend(Result, obj )><newline46mondego>                            </cfif><newline46mondego>                        </cfif><newline46mondego>                    </cfif><newline46mondego><newline46mondego>            <cfelseif Arguments.First[KeyName] NEQ Arguments.Second[KeyName] ><newline46mondego><newline46mondego>                <cfset firstOk = true ><newline46mondego>                <cfset secondOk = true ><newline46mondego><newline46mondego>                <cfif structFind(Arguments.Second, KeyName) eq <doubleQuotes46><doubleQuotes46>><newline46mondego>                    <cfif arguments.ignoreSecondEmptyString><newline46mondego>                        <cfset firstOk = false ><newline46mondego>                    </cfif><newline46mondego>                </cfif><newline46mondego><newline46mondego>                <cfif structFind(Arguments.First, KeyName) eq <doubleQuotes46><doubleQuotes46>><newline46mondego>                    <cfif arguments.ignoreFirstEmptyString><newline46mondego>                        <cfset secondOk = false ><newline46mondego>                    </cfif><newline46mondego>                </cfif><newline46mondego><newline46mondego>                <cfif firstOk AND secondOk ><newline46mondego>                    <cfset obj = {  key = KeyName<newline46mondego>                                    ,old = structFind(Arguments.First, KeyName) <newline46mondego>                                    ,new = structFind(Arguments.Second, KeyName) } ><newline46mondego>                    <cfset arrayAppend(Result, obj )><newline46mondego>                </cfif><newline46mondego>            </cfif><newline46mondego><newline46mondego>        </cfloop><newline46mondego><newline46mondego>        <cfreturn Result><newline46mondego>    </cffunction><newline46mondego>"
"14splitHere46","3147307splitHere46","StringReader"
"15splitHere46","3147394splitHere46","PackageManager"
"16splitHere46","3147394splitHere46","Intent"
"17splitHere46","3147394splitHere46","queryIntentActivities()"
"18splitHere46","3147394splitHere46","PackageManager"
"19splitHere46","3147394splitHere46","Intent"
"20splitHere46","3147417splitHere46","class Class1<T extends Class2<? extends Class1<T>>> { }  <newline46mondego> class Class2<T extends Class1<? extends Class2<T>>> { }<newline46mondego>"
"21splitHere46","3147417splitHere46","class Class1<T extends Class2<? extends Class1<?>>> { }  <newline46mondego> class Class2<T extends Class1<? extends Class2<?>>> { }<newline46mondego>"
"22splitHere46","3147423splitHere46","// Set up the environment for creating the initial context<newline46mondego>Hashtable env = new Hashtable();<newline46mondego>env.put(Context.INITIAL_CONTEXT_FACTORY, <newline46mondego>    <doubleQuotes46>com.sun.jndi.ldap.LdapCtxFactory<doubleQuotes46>);<newline46mondego>env.put(Context.PROVIDER_URL, <doubleQuotes46>ldap://localhost:389/o=JNDITutorial<doubleQuotes46>);<newline46mondego><newline46mondego>// Authenticate<newline46mondego>env.put(Context.SECURITY_AUTHENTICATION, <doubleQuotes46>simple<doubleQuotes46>);<newline46mondego>env.put(Context.SECURITY_PRINCIPAL, authentication.getPrincipal().toString() );<newline46mondego>env.put(Context.SECURITY_CREDENTIALS, <doubleQuotes46>PASSWORD<doubleQuotes46>);<newline46mondego><newline46mondego>// Create the initial context<newline46mondego>DirContext ctx = new InitialDirContext(env);<newline46mondego>"
"23splitHere46","3147475splitHere46","tempDate = format.parse(urlDate.toString());<newline46mondego>"
"24splitHere46","3147475splitHere46","DateFormat"
"25splitHere46","3147475splitHere46","String"
"26splitHere46","3147475splitHere46","Date"
"27splitHere46","3147475splitHere46","String"
"28splitHere46","3147475splitHere46","tempDate = format.format(urlDate);<newline46mondego>"
"29splitHere46","3147658splitHere46","build.xml"
"30splitHere46","3147658splitHere46","ant hosted"
"31splitHere46","3147658splitHere46","ant gwtc"
"32splitHere46","3147658splitHere46","ant war"
"33splitHere46","3147658splitHere46","ant build"
"34splitHere46","3147658splitHere46","build.xml"
"35splitHere46","3147758splitHere46","catch"
"36splitHere46","3147758splitHere46","finally"
"37splitHere46","3147758splitHere46","<doubleQuotes46>Finally!<doubleQuotes46>"
"38splitHere46","3147758splitHere46","<doubleQuotes46>What about me???<doubleQuotes46>"
"39splitHere46","3147758splitHere46","try {<newline46mondego>        throw null;     // throws NullPointerException!<newline46mondego>    } catch (Exception e) {<newline46mondego>        int oops = 1/0; // throws ArithmeticException!<newline46mondego>    } finally {<newline46mondego>        System.out.println(<doubleQuotes46>Finally!<doubleQuotes46>); // still gets executed!<newline46mondego>    }<newline46mondego>    System.out.println(<doubleQuotes46>What about me???<doubleQuotes46>); // doesn't get executed!<newline46mondego>"
"40splitHere46","3147758splitHere46","finally"
"41splitHere46","3147758splitHere46","try"
"42splitHere46","3147758splitHere46","try"
"43splitHere46","3147758splitHere46","catch"
"44splitHere46","3147758splitHere46","print"
"45splitHere46","3147758splitHere46","throw"
"46splitHere46","3147758splitHere46","catch"
"47splitHere46","3147758splitHere46","try"
"48splitHere46","3147758splitHere46","finally"
"49splitHere46","3147758splitHere46","finally"
"50splitHere46","3147758splitHere46","finally"
"51splitHere46","3147758splitHere46","finally"
"52splitHere46","3147846splitHere46","writeObject()"
"53splitHere46","3147846splitHere46","writeObject()"
"54splitHere46","3147846splitHere46","readObject()"
"55splitHere46","3147846splitHere46","writeObject()"
"56splitHere46","3147846splitHere46","readObject("
"57splitHere46","3147846splitHere46","dk.getClass.getName()"
"58splitHere46","3147846splitHere46","dk"
"59splitHere46","3147846splitHere46","dynamic_cast"
"60splitHere46","3147846splitHere46","instanceof"
"61splitHere46","3147993splitHere46","localDBRW"
"62splitHere46","3147993splitHere46","getWritableDatabase()"
"63splitHere46","3147993splitHere46","localDBRW = getWritableDatabase();<newline46mondego>"
"64splitHere46","3148285splitHere46","public final void stop()"
"65splitHere46","3148285splitHere46","Object.wait()"
"66splitHere46","3148285splitHere46","Objecft.notifyAll()"
"67splitHere46","3148296splitHere46","package model<newline46mondego>//Imports...<newline46mondego>@Entity<newline46mondego>@Table(name = <doubleQuotes46>group_table<doubleQuotes46>)<newline46mondego>public class Group {<newline46mondego>  @Id @GeneratedValue<newline46mondego>  private Long id;<newline46mondego><newline46mondego>  @NotNull<newline46mondego>  private String name;<newline46mondego><newline46mondego>  //Getters and Setters<newline46mondego>}<newline46mondego>"
"68splitHere46","3148343splitHere46","instanceof"
"69splitHere46","3148343splitHere46","abstract"
"70splitHere46","3148343splitHere46","A"
"71splitHere46","3148343splitHere46","accept"
"72splitHere46","3148343splitHere46","instanceof"
"73splitHere46","3148343splitHere46","interface Visitor {<newline46mondego>    public A accept(A a);<newline46mondego>    public B accept(B b);<newline46mondego>}<newline46mondego><newline46mondego>class A {<newline46mondego>    public A sum(A a) {<newline46mondego>        System.out.println(<doubleQuotes46>A.sum(A) called<doubleQuotes46>);<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego>    public A visit(Visitor sv) {<newline46mondego>        return sv.accept(this);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class B extends A {<newline46mondego>    public B sum(B b) {<newline46mondego>        System.out.println(<doubleQuotes46>B.sum(B) called<doubleQuotes46>);<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego>    public B visit(Visitor sv) {<newline46mondego>        return sv.accept(this);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Test {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        A a = new A();<newline46mondego>        B b = new B();<newline46mondego>        A basa = new B();<newline46mondego><newline46mondego>        a.visit(new SumVisitor(b));        // a.sum(b);<newline46mondego>        b.visit(new SumVisitor(b));        // b.sum(b);<newline46mondego>        basa.visit(new SumVisitor(b));     // basa.sum(b);<newline46mondego>        basa.visit(new SumVisitor(basa));  // basa.sum(basa);<newline46mondego>    }<newline46mondego><newline46mondego>    static class SumVisitor implements Visitor {<newline46mondego>        A arg;<newline46mondego>        SumVisitor(A arg) { this.arg = arg; }<newline46mondego>        public A accept(A a) { return a.sum(arg); }<newline46mondego>        public B accept(B b) { return b.sum(arg); }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"74splitHere46","3148343splitHere46","A.sum(A) called<newline46mondego>B.sum(B) called<newline46mondego>B.sum(B) called<newline46mondego>B.sum(B) called<newline46mondego>"
"75splitHere46","3148397splitHere46","public class Foo() {<newline46mondego>    private String result;<newline46mondego>    public String getResult() { return result; }<newline46mondego>    public void setResult(String result) { this.result = result; }<newline46mondego>}<newline46mondego>"
"76splitHere46","3148397splitHere46","@ModelAttribute(<doubleQuotes46>fooResults<doubleQuotes46>)"
"77splitHere46","3148397splitHere46","@ModelAttribute(<doubleQuotes46>command<doubleQuotes46>) Foo foo"
"78splitHere46","3148397splitHere46","@Controller<newline46mondego>public class FooController() {<newline46mondego><newline46mondego>    @ModelAttribute(<doubleQuotes46>fooResults<doubleQuotes46>)<newline46mondego>    public List<String> fooResults() {<newline46mondego>        // return a list of string<newline46mondego>    }<newline46mondego><newline46mondego>    @RequestMapping(method = RequestMethod.GET)<newline46mondego>    public String get(@ModelAttribute(<doubleQuotes46>command<doubleQuotes46>) Foo foo) {<newline46mondego>        return <doubleQuotes46>fooView<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    @RequestMapping(method = RequestMethod.POST)<newline46mondego>    public String post(@ModelAttribute(<doubleQuotes46>command<doubleQuotes46>) Foo foo) {<newline46mondego>        // do something with foo<newline46mondego>    }<newline46mondego>"
"79splitHere46","3148397splitHere46","form:select"
"80splitHere46","3148397splitHere46","fooResults"
"81splitHere46","3148397splitHere46","<%@ taglib prefix=<doubleQuotes46>form<doubleQuotes46> uri=<doubleQuotes46>http://www.springframework.org/tags/form<doubleQuotes46>%><newline46mondego><newline46mondego><form:form commandName=<doubleQuotes46>command<doubleQuotes46>><newline46mondego>    <form:select path=<doubleQuotes46>result<doubleQuotes46>><newline46mondego>        <form:options items=<doubleQuotes46>${fooResults}<doubleQuotes46> itemLabel=<doubleQuotes46>result<doubleQuotes46> itemValue=<doubleQuotes46>result<doubleQuotes46>/><newline46mondego>    </form:select><newline46mondego>    <input type=<doubleQuotes46>submit<doubleQuotes46> value=<doubleQuotes46>submit<doubleQuotes46>/><newline46mondego></form><newline46mondego>"
"82splitHere46","3148640splitHere46","user.home"
"83splitHere46","3148693splitHere46","public void doSomething(){<newline46mondego>      //Pre processing<newline46mondego>       Object result=new ThirdPartyCode().actualMethod(file);<newline46mondego>     //Post processing<newline46mondego>}<newline46mondego>"
"84splitHere46","3148693splitHere46","public class Wrapper implements MyWrapper{<newline46mondego><newline46mondego>   public Object invokeThirdPartyFunction(File file){<newline46mondego>      new ThirdPartyCode().actualMethod(file);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"85splitHere46","3148716splitHere46","MyCollection2 mc = new MyCollection2();<newline46mondego>mc.intg = 1;<newline46mondego>"
"86splitHere46","3148849splitHere46","row.getCell(0).getDateCellValue()"
"87splitHere46","3148849splitHere46","if (HSSFDateUtil.isCellDateFormatted .."
"88splitHere46","3148849splitHere46","if (row.getCell(0).getCellType() == HSSFCell.CELL_TYPE_NUMERIC)<newline46mondego>    System.out.println (<doubleQuotes46>Row No.: <doubleQuotes46> + row.getRowNum ()+ <doubleQuotes46> <doubleQuotes46> + row.getCell(0).getNumericCellValue());<newline46mondego><newline46mondego>                 if (HSSFDateUtil.isCellDateFormatted(row.getCell(0)))<newline46mondego>             {<newline46mondego><newline46mondego>                 System.out.println (<doubleQuotes46>Row No.: <doubleQuotes46> + row.getRowNum ()+ <doubleQuotes46> <doubleQuotes46> + row.getCell(0).getDateCellValue());<newline46mondego><newline46mondego>                }<newline46mondego>"
"89splitHere46","3148849splitHere46","Row No.: 0 39281.0<newline46mondego>Row No.: 0 Wed Jul 18 00:00:00 IST 2007<newline46mondego>Row No.: 1 39491.0<newline46mondego>Row No.: 1 Wed Feb 13 00:00:00 IST 2008<newline46mondego>Row No.: 2 39311.0<newline46mondego>Row No.: 2 Fri Aug 17 00:00:00 IST 2007<newline46mondego>"
"90splitHere46","3149118splitHere46","public int[] bytearray2intarray(byte[] barray)<newline46mondego> {<newline46mondego>   int[] iarray = new int[barray.length];<newline46mondego>   int i = 0;<newline46mondego>   for (byte b : barray)<newline46mondego>       iarray[i++] = b & 0xff;<newline46mondego>   // <doubleQuotes46>and<doubleQuotes46> with 0xff since bytes are signed in java<newline46mondego>   return iarray;<newline46mondego> }<newline46mondego>"
"91splitHere46","3149132splitHere46","Timer"
"92splitHere46","3149132splitHere46","TimerTask"
"93splitHere46","3149132splitHere46","Timer"
"94splitHere46","3149132splitHere46","schedule()"
"95splitHere46","3149132splitHere46","TimerTask"
"96splitHere46","3149132splitHere46","Date"
"97splitHere46","3149132splitHere46","Timer timer = new Timer(true);<newline46mondego>timer.schedule(new MailTask(), todayPlus23hours);<newline46mondego>"
"98splitHere46","3149132splitHere46","MailTask"
"99splitHere46","3149132splitHere46","public class MailTask extends TimerTask {<newline46mondego>    public void run() {<newline46mondego>        // Implement.<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"100splitHere46","3149236splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><!DOCTYPE struts-config PUBLIC <doubleQuotes46>-//Apache Software Foundation//DTD Struts Configuration 1.2//EN<doubleQuotes46> <doubleQuotes46>http://struts.apache.org/dtds/struts-config_1_2.dtd<doubleQuotes46>><newline46mondego><struts-config><newline46mondego>    <data-sources><newline46mondego>    </data-sources><newline46mondego>    <!-- ================== Form Beans ================ --><newline46mondego>    <form-beans><newline46mondego>        <form-bean name=<doubleQuotes46>FirstForm<doubleQuotes46><newline46mondego>            type=<doubleQuotes46>com.blahblah.forms.FirstForm<doubleQuotes46> />  <newline46mondego>        <form-bean name=<doubleQuotes46>SecondForm<doubleQuotes46><newline46mondego>            type=<doubleQuotes46>com.blahblah.forms.SecondForm<doubleQuotes46> /><newline46mondego><newline46mondego>            <form-bean name=<doubleQuotes46>NewForm<doubleQuotes46><newline46mondego>            type=<doubleQuotes46>com.blahblah.forms.NewForm<doubleQuotes46> /><newline46mondego>    </form-beans>   <newline46mondego>    <!-- ================== Action Mapping Definitions ================ --><newline46mondego>    <action-mappings>       <newline46mondego>        <action path=<doubleQuotes46>/pages/First<doubleQuotes46> name=<doubleQuotes46>FirstForm<doubleQuotes46><newline46mondego>            type=<doubleQuotes46>org.springframework.web.struts.DelegatingActionProxy<doubleQuotes46> scope=<doubleQuotes46>request<doubleQuotes46>><newline46mondego>            <forward name=<doubleQuotes46>success<doubleQuotes46> path=<doubleQuotes46>/pages/Second.do<doubleQuotes46> /><newline46mondego>        </action><newline46mondego>        <action path=<doubleQuotes46>/pages/Second<doubleQuotes46> name=<doubleQuotes46>SecondForm<doubleQuotes46><newline46mondego>            type=<doubleQuotes46>org.springframework.web.struts.DelegatingActionProxy<doubleQuotes46> scope=<doubleQuotes46>request<doubleQuotes46>><newline46mondego>            <forward name=<doubleQuotes46>doSomthing<doubleQuotes46> path=<doubleQuotes46>/pages/DoSomthing.jsp<doubleQuotes46> /><newline46mondego>        </action><newline46mondego><newline46mondego>        <action path=<doubleQuotes46>/pages/New<doubleQuotes46> name=<doubleQuotes46>NewForm<doubleQuotes46><newline46mondego>            type=<doubleQuotes46>org.springframework.web.struts.DelegatingActionProxy<doubleQuotes46> scope=<doubleQuotes46>request<doubleQuotes46>><newline46mondego>            <forward name=<doubleQuotes46>success<doubleQuotes46> path=<doubleQuotes46>/pages/First.do<doubleQuotes46> /><newline46mondego>        </action><newline46mondego>    </action-mappings><newline46mondego></struts-config><newline46mondego>"
"101splitHere46","3149236splitHere46","FirstForm, FirstAction, SecondForm and SecondAction"
"102splitHere46","3149236splitHere46","NewAction"
"103splitHere46","3149236splitHere46","execute()"
"104splitHere46","3149236splitHere46","public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {<newline46mondego><newline46mondego>    ActionForward forwardPage = mapping.findForward(<doubleQuotes46>success<doubleQuotes46>);<newline46mondego><newline46mondego>    // do some coding<newline46mondego><newline46mondego>    FirstForm firstForm = new FirstForm();<newline46mondego>    firstForm.setX(...);<newline46mondego>    firstForm.setY(...);<newline46mondego>    request.setAttribute(<doubleQuotes46>FirstForm<doubleQuotes46>, firstForm);<newline46mondego><newline46mondego>    return forwardPage;<newline46mondego>}<newline46mondego>"
"105splitHere46","3149352splitHere46","N = number of CPUs<newline46mondego>U = target CPU utilization (0 <= U <= 1)<newline46mondego>W/C = ration of wait time to cpu time (measured through profiling)<newline46mondego><newline46mondego>threads = N * U * (1 + W/C)<newline46mondego>"
"106splitHere46","3149410splitHere46","gl.glTranslatef(x, y, 0);<newline46mondego>"
"107splitHere46","3150080splitHere46","Subclass.print()"
"108splitHere46","3150080splitHere46","public class Subclass {<newline46mondego>    public Subclass() {}<newline46mondego>    public static String print() {<newline46mondego>        System.out.println(Subclass.class.getSimpleName());<newline46mondego>    }<newline46mondego><newline46mondego>    public void main(String[] args) {<newline46mondego>        Super.print();<newline46mondego>        Subclass.print();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"109splitHere46","3150080splitHere46","Super.class"
"110splitHere46","3150080splitHere46","new Super().getClass()"
"111splitHere46","3150080splitHere46","Super.print()"
"112splitHere46","3150080splitHere46","Subclass.print()"
"113splitHere46","3150080splitHere46","print()"
"114splitHere46","3150080splitHere46","public abstract class Super {<newline46mondego>    public final String print() {<newline46mondego>        System.out.println(this.getClass().getSimpleName());<newline46mondego>    }<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"115splitHere46","3150080splitHere46","this.getClass()"
"116splitHere46","3150080splitHere46","Super"
"117splitHere46","3150080splitHere46","abstract"
"118splitHere46","3150217splitHere46","for (int j=1;j<10;i++){<newline46mondego>"
"119splitHere46","3150217splitHere46","if ((i+j) %2==0){<newline46mondego>"
"120splitHere46","3150290splitHere46","includes"
"121splitHere46","3150290splitHere46","StrictPatternIncludesArtifactFilter"
"122splitHere46","3150290splitHere46","[groupId]:[artifactId]:[type]:[version]<newline46mondego>"
"123splitHere46","3150290splitHere46","*"
"124splitHere46","3150290splitHere46","org.apache.*"
"125splitHere46","3150290splitHere46","org.apache."
"126splitHere46","3150290splitHere46",":::*-SNAPSHOT"
"127splitHere46","3150290splitHere46","activation"
"128splitHere46","3150290splitHere46","dependency:tree"
"129splitHere46","3150290splitHere46","rpm --whatprovides"
"130splitHere46","3150340splitHere46",".class public HelloWorld<newline46mondego>.super java/lang/Object<newline46mondego><newline46mondego>.method public static main([Ljava/lang/String;)V<newline46mondego>  .limit stack 3<newline46mondego>  .limit locals 1<newline46mondego><newline46mondego>  getstatic      java/lang/System/out Ljava/io/PrintStream;<newline46mondego>  ldc            <doubleQuotes46>Hello World.<doubleQuotes46><newline46mondego>  invokevirtual  java/io/PrintStream/println(Ljava/lang/String;)V<newline46mondego><newline46mondego>  return<newline46mondego><newline46mondego>.end method<newline46mondego>"
"131splitHere46","3150625splitHere46","Series"
"132splitHere46","3150625splitHere46","// chart is a JFreeChart object<newline46mondego>XYItemRenderer renderer = chart.getXYPlot().getRenderer();<newline46mondego>renderer.setSeriesStroke(index, new BasicStroke(DEFAULT_LINE_WIDTH));<newline46mondego>                        renderer.setSeriesPaint(/* index of series */, /*some color*/);<newline46mondego>"
"133splitHere46","3150682splitHere46","transient"
"134splitHere46","3150682splitHere46","readObject()"
"135splitHere46","3150682splitHere46","writeObject()"
"136splitHere46","3150760splitHere46","private final static String ZEROES = <doubleQuotes46>0000000000<doubleQuotes46>;<newline46mondego><newline46mondego>// ...<newline46mondego><newline46mondego>String s = Integer.toString(12345, 8);<newline46mondego>String intAsString = s.length() <= 10 ? ZEROES.substring(s.length()) + s : s;<newline46mondego>"
"137splitHere46","3151077splitHere46","java AES"
"138splitHere46","3151077splitHere46","import javax.crypto.Cipher;<newline46mondego>import javax.crypto.spec.SecretKeySpec;<newline46mondego><newline46mondego>public class MainClass {<newline46mondego>  public static void main(String[] args) throws Exception {<newline46mondego>    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());    <newline46mondego>    byte[] input = <doubleQuotes46>www.java2s.com<doubleQuotes46>.getBytes();<newline46mondego>    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, <newline46mondego>                 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, <newline46mondego>                 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, <newline46mondego>                 0x15, 0x16, 0x17 };<newline46mondego><newline46mondego>    SecretKeySpec key = new SecretKeySpec(keyBytes, <doubleQuotes46>AES<doubleQuotes46>);<newline46mondego><newline46mondego>    Cipher cipher = Cipher.getInstance(<doubleQuotes46>AES/ECB/PKCS7Padding<doubleQuotes46>, <doubleQuotes46>BC<doubleQuotes46>);<newline46mondego><newline46mondego>    System.out.println(new String(input));<newline46mondego><newline46mondego>    // encryption pass<newline46mondego>    cipher.init(Cipher.ENCRYPT_MODE, key);<newline46mondego><newline46mondego>    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];<newline46mondego>    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);<newline46mondego>    ctLength += cipher.doFinal(cipherText, ctLength);<newline46mondego>    System.out.println(new String(cipherText));<newline46mondego>    System.out.println(ctLength);<newline46mondego><newline46mondego>    // decryption pass<newline46mondego>    cipher.init(Cipher.DECRYPT_MODE, key);<newline46mondego>    byte[] plainText = new byte[cipher.getOutputSize(ctLength)];<newline46mondego>    int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);<newline46mondego>    ptLength += cipher.doFinal(plainText, ptLength);<newline46mondego>    System.out.println(new String(plainText));<newline46mondego>    System.out.println(ptLength);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"139splitHere46","3151263splitHere46","create materialized view check_mv<newline46mondego>refresh complete on commit as<newline46mondego>select 1 dummy<newline46mondego>from catalogue c1, catalogue c2 <newline46mondego>where c1.next_id = c2.previous_id and c1.parent_id != c2.parent_id<newline46mondego><newline46mondego>alter table check_mv<newline46mondego>add constraint check_mv_chk<newline46mondego>check (1=0) deferrable;<newline46mondego>"
"140splitHere46","3151374splitHere46","em.remove()"
"141splitHere46","3151480splitHere46","public class Evil {<newline46mondego>    public Evil() {<newline46mondego>        throw new RuntimeException();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"142splitHere46","3151823splitHere46","ServerSocket welcomeSocket = new ServerSocket(44444);<newline46mondego>while(true) {<newline46mondego>   Socket connectionSocket = welcomeSocket.accept();<newline46mondego>"
"143splitHere46","3151823splitHere46","Socket connectionSocket = welcomeSocket.accept();<newline46mondego>    BufferedReader inFromClient = new BufferedReader(<newline46mondego>            new InputStreamReader(connectionSocket.getInputStream( ) ) );<newline46mondego>"
"144splitHere46","3151992splitHere46","ÿþ"
"145splitHere46","3151992splitHere46","Byte Order Mark"
"146splitHere46","3151992splitHere46","UTF-16"
"147splitHere46","3151992splitHere46","FileInputStream fis = new FileInputStream(<doubleQuotes46>filename<doubleQuotes46>);<newline46mondego>BufferedReader reader = new BufferedReader(new InputStreamReader(fis, <doubleQuotes46>UTF-16<doubleQuotes46>));<newline46mondego>"
"148splitHere46","3151992splitHere46","ANSI"
"149splitHere46","3151992splitHere46","UTF-8"
"150splitHere46","3152192splitHere46","c:import"
"151splitHere46","3152221splitHere46","|="
"152splitHere46","3152221splitHere46","&="
"153splitHere46","3152221splitHere46","&"
"154splitHere46","3152221splitHere46","|"
"155splitHere46","3152221splitHere46","E1 op= E2"
"156splitHere46","3152221splitHere46","E1 = (T)((E1) op (E2))"
"157splitHere46","3152221splitHere46","T"
"158splitHere46","3152221splitHere46","E1"
"159splitHere46","3152221splitHere46","E1"
"160splitHere46","3152221splitHere46","boolean &"
"161splitHere46","3152221splitHere46","isFoobared &= methodWithSideEffects()"
"162splitHere46","3152221splitHere46","isFoobared = isFoobared & methodWithSideEffects(); // no shortcircuit<newline46mondego>"
"163splitHere46","3152221splitHere46","&&"
"164splitHere46","3152221splitHere46","||"
"165splitHere46","3152221splitHere46","&&="
"166splitHere46","3152221splitHere46","||="
"167splitHere46","3152221splitHere46","boolean"
"168splitHere46","3152221splitHere46","&"
"169splitHere46","3152221splitHere46","|"
"170splitHere46","3152221splitHere46","boolean"
"171splitHere46","3152221splitHere46","&&"
"172splitHere46","3152221splitHere46","||"
"173splitHere46","3152221splitHere46","&"
"174splitHere46","3152221splitHere46","|"
"175splitHere46","3152221splitHere46","&&"
"176splitHere46","3152221splitHere46","||"
"177splitHere46","3152221splitHere46","&&"
"178splitHere46","3152221splitHere46","false"
"179splitHere46","3152221splitHere46","false"
"180splitHere46","3152221splitHere46","||"
"181splitHere46","3152221splitHere46","true"
"182splitHere46","3152221splitHere46","true"
"183splitHere46","3152221splitHere46","&"
"184splitHere46","3152221splitHere46","^"
"185splitHere46","3152221splitHere46","|"
"186splitHere46","3152221splitHere46","&&"
"187splitHere46","3152221splitHere46","||"
"188splitHere46","3152275splitHere46","UserTransaction"
"189splitHere46","3152275splitHere46","EntityManager"
"190splitHere46","3152339splitHere46","public <T> T[] toArray(List<T> list) {<newline46mondego>    Class clazz = list.get(0).getClass(); // check for size and null before<newline46mondego>    T[] array = (T[]) java.lang.reflect.Array.newInstance(clazz, list.size());<newline46mondego>    return list.toArray(array);<newline46mondego>}<newline46mondego>"
"191splitHere46","3152378splitHere46","public class Cls1{<newline46mondego>    public foo{<newline46mondego>        doX();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Cls2 extends Cls1 {<newline46mondego>    public foo{<newline46mondego>        super.foo();<newline46mondego>        doY();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"192splitHere46","3152617splitHere46","ClassLoader.getResources(String)"
"193splitHere46","3152617splitHere46","String"
"194splitHere46","3152617splitHere46","(<doubleQuotes46>META-INF/services/<doubleQuotes46> + serviceClass.getName())"
"195splitHere46","3152617splitHere46","ServiceLoader.load(Class)"
"196splitHere46","3152617splitHere46","ServiceLoader.load(Class, ClassLoader)"
"197splitHere46","3152617splitHere46","ServiceLoader"
"198splitHere46","3152890splitHere46","dataStore.getFloat3DClass()"
"199splitHere46","3152890splitHere46","PropertySupport.Reflection"
"200splitHere46","3152890splitHere46","float[][][].class"
"201splitHere46","3153010splitHere46","JTree"
"202splitHere46","3153010splitHere46","TreeModel"
"203splitHere46","3153010splitHere46","TreeModel"
"204splitHere46","3153010splitHere46","org.netbeans.swing.outline.Outline"
"205splitHere46","3153010splitHere46","FileTreeModel"
"206splitHere46","3153172splitHere46","Platform"
"207splitHere46","3153172splitHere46","enum"
"208splitHere46","3153172splitHere46","@Entity"
"209splitHere46","3153172splitHere46","TBL_PLATFORM"
"210splitHere46","3153172splitHere46","Platform"
"211splitHere46","3153172splitHere46","@ElementCollection"
"212splitHere46","3153172splitHere46","@ElementCollection(targetClass = Platform.class) <newline46mondego>@CollectionTable(name = <doubleQuotes46>TBL_APP_PLATFORM<doubleQuotes46>,<newline46mondego>    joinColumns = @JoinColumn(name = <doubleQuotes46>APP_ID<doubleQuotes46>))<newline46mondego>@Column(name = <doubleQuotes46>PLATFORM_ID<doubleQuotes46>)<newline46mondego>protected Set<Platform> _platforms; <newline46mondego>"
"213splitHere46","3153172splitHere46","create table TBL_APP_PLATFORM (   <newline46mondego>    APP_ID bigint not null,   <newline46mondego>    PLATFORM_ID bigint not null, -- the ordinal number of enum value   <newline46mondego>    primary key (APP_ID, PLATFORM_ID)   <newline46mondego>);<newline46mondego>"
"214splitHere46","3153172splitHere46","enum Platform"
"215splitHere46","3153413splitHere46","CodeSource#getLocation()"
"216splitHere46","3153413splitHere46","CodeSource"
"217splitHere46","3153413splitHere46","ProtectionDomain#getCodeSource()"
"218splitHere46","3153413splitHere46","ProtectionDomain"
"219splitHere46","3153413splitHere46","Class#getProtectionDomain()"
"220splitHere46","3153413splitHere46","public class Test {<newline46mondego>    public static void main(String... args) throws Exception {<newline46mondego>        URL location = Test.class.getProtectionDomain().getCodeSource().getLocation();<newline46mondego>        System.out.println(location.getFile());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"221splitHere46","3153413splitHere46","ClassLoader#getResource()"
"222splitHere46","3153413splitHere46","File classpathRoot = new File(classLoader.getResource(<doubleQuotes46><doubleQuotes46>).getPath());<newline46mondego>File[] csvFiles = classpathRoot.listFiles(new FilenameFilter() {<newline46mondego>    @Override public boolean accept(File dir, String name) {<newline46mondego>        return name.endsWith(<doubleQuotes46>.csv<doubleQuotes46>);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"223splitHere46","3153413splitHere46","main()"
"224splitHere46","3153571splitHere46","private final ScheduleExecutorService executor =<newline46mondego>    Executors.newSingleThreadScheduledExecutor();<newline46mondego><newline46mondego><newline46mondego>// is main loop, waits between 10 - 30 ms.  <newline46mondego>executor.schedule(new Runnable() { public void run() {<newline46mondego>   // my delayed task<newline46mondego>}}, 10 + new Random().nextInt(20), TimeUnit.MILLI_SECOND); <newline46mondego>"
"225splitHere46","3153603splitHere46","-cp"
"226splitHere46","3153603splitHere46","-classpath"
"227splitHere46","3153603splitHere46","-jar"
"228splitHere46","3153603splitHere46","Class-Path"
"229splitHere46","3153603splitHere46","MANIFEST.MF"
"230splitHere46","3153603splitHere46","<attribute name=<doubleQuotes46>Class-Path<doubleQuotes46> value=<doubleQuotes46>${dist.classpath}<doubleQuotes46>/><newline46mondego>"
"231splitHere46","3153603splitHere46","main()"
"232splitHere46","3153603splitHere46","MANIFEST"
"233splitHere46","3153610splitHere46","RepaintManager.setCurrentManager(new CheckThreadViolationRepaintManager());<newline46mondego>"
"234splitHere46","3153617splitHere46","new UserServiceImpl()"
"235splitHere46","3153617splitHere46","@Controller // defines that this class is a spring bean<newline46mondego>@RequestMapping(<doubleQuotes46>/users<doubleQuotes46>)<newline46mondego>public class SomeController {<newline46mondego><newline46mondego>    // tells the application context to inject an instance of UserService here<newline46mondego>    @Autowired<newline46mondego>    private UserService userService;<newline46mondego><newline46mondego>    @RequestMapping(<doubleQuotes46>/login<doubleQuotes46>)<newline46mondego>    public void login(@RequestParam(<doubleQuotes46>username<doubleQuotes46>) String username,<newline46mondego>           @RequestParam(<doubleQuotes46>password<doubleQuotes46>) password) {<newline46mondego><newline46mondego>        // the UserServiceImpl is already injected and you can use it<newline46mondego>        userService.login(username, password);<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"236splitHere46","3153617splitHere46","applicationContext.xml"
"237splitHere46","3153617splitHere46","<context:component-scan>"
"238splitHere46","3153617splitHere46","@Controller"
"239splitHere46","3153617splitHere46","@Service"
"240splitHere46","3153617splitHere46","UserServiceImpl"
"241splitHere46","3153617splitHere46","<bean id=<doubleQuotes46>..<doubleQuotes46> class=<doubleQuotes46>..<doubleQuotes46>>"
"242splitHere46","3153617splitHere46","@Service"
"243splitHere46","3153617splitHere46","UserService"
"244splitHere46","3153617splitHere46","@Autowired"
"245splitHere46","3153753splitHere46","Interceptor"
"246splitHere46","3153753splitHere46","onSave()"
"247splitHere46","3153753splitHere46","@PrePersist"
"248splitHere46","3153753splitHere46","@PostPersist"
"249splitHere46","3153819splitHere46","ServletContextListener"
"250splitHere46","3153819splitHere46","public class Config implements ServletContextListener {<newline46mondego>    private static final String ATTRIBUTE_NAME = <doubleQuotes46>config<doubleQuotes46>;<newline46mondego>    private Properties config = new Properties();<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void contextInitialized(ServletContextEvent event) {<newline46mondego>        try {<newline46mondego>            config.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(<doubleQuotes46>config.properties<doubleQuotes46>));<newline46mondego>        } catch (IOException e) {<newline46mondego>            throw new SomeRuntimeException(<doubleQuotes46>Loading config failed<doubleQuotes46>, e);<newline46mondego>        }<newline46mondego>        event.getServletContext().setAttribute(ATTRIBUTE_NAME, this);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void contextDestroyed(ServletContextEvent event) {<newline46mondego>        // NOOP.<newline46mondego>    }<newline46mondego><newline46mondego>    public static Config getInstance(ServletContext context) {<newline46mondego>        return (Config) context.getAttribute(ATTRIBUTE_NAME);<newline46mondego>    }<newline46mondego><newline46mondego>    public String getProperty(String key) {<newline46mondego>        return config.getProperty(key);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"251splitHere46","3153819splitHere46","web.xml"
"252splitHere46","3153819splitHere46","<listener><newline46mondego>    <listener-class>com.example.Config</listener-class><newline46mondego></listener><newline46mondego>"
"253splitHere46","3153819splitHere46","Config config = Config.getInstance(getServletContext());<newline46mondego>String property = config.getProperty(<doubleQuotes46>somekey<doubleQuotes46>);<newline46mondego>"
"254splitHere46","3153819splitHere46","ServletContextListener"
"255splitHere46","3153819splitHere46","Config"
"256splitHere46","3153819splitHere46","static"
"257splitHere46","3153819splitHere46","Map<String, Properties>"
"258splitHere46","3153840splitHere46","/app1"
"259splitHere46","3153840splitHere46","/my.jspf"
"260splitHere46","3153840splitHere46","/app2"
"261splitHere46","3153840splitHere46","<c:import context=<doubleQuotes46>/app2<doubleQuotes46> url=<doubleQuotes46>/my.jspf<doubleQuotes46>/><newline46mondego>"
"262splitHere46","3153840splitHere46","var=<doubleQuotes46>easyPayName<doubleQuotes46>"
"263splitHere46","3153840splitHere46","<c:import>"
"264splitHere46","3153840splitHere46","easyPayNamePaymentOption.jspf"
"265splitHere46","3153840splitHere46","easyPayName"
"266splitHere46","3153840splitHere46","<c:import>"
"267splitHere46","3153840splitHere46","import"
"268splitHere46","3153840splitHere46","<c:import>"
"269splitHere46","3153840splitHere46","<c:include>"
"270splitHere46","3153840splitHere46","<c:import context=<doubleQuotes46>/sharedComponents<doubleQuotes46> url=<doubleQuotes46>/easyPayNamePaymentOption.jspf<doubleQuotes46>/><newline46mondego>"
"271splitHere46","3153840splitHere46","easyPayNamePaymentOption.jspf"
"272splitHere46","3153843splitHere46","short s = ...;<newline46mondego>int i = s & 0xffff;<newline46mondego>"
"273splitHere46","3154281splitHere46","org.w3c.dom.Document"
"274splitHere46","3154281splitHere46","<newline46mondego>"
"275splitHere46","3154281splitHere46","<br />"
"276splitHere46","3154281splitHere46","org.w3c.dom.Document"
"277splitHere46","3154281splitHere46","NodeList"
"278splitHere46","3154281splitHere46","Node"
"279splitHere46","3154281splitHere46","XPath"
"280splitHere46","3154281splitHere46","String url = <doubleQuotes46>http://stackoverflow.com/questions/3152138<doubleQuotes46>;<newline46mondego>Document document = new Tidy().parseDOM(new URL(url).openStream(), null);<newline46mondego>XPath xpath = XPathFactory.newInstance().newXPath();<newline46mondego><newline46mondego>Node question = (Node) xpath.compile(<doubleQuotes46>//*[@id='question']//*[contains(@class,'post-text')]//p[1]<doubleQuotes46>).evaluate(document, XPathConstants.NODE);<newline46mondego>System.out.println(<doubleQuotes46>Question: <doubleQuotes46> + question.getFirstChild().getNodeValue());<newline46mondego><newline46mondego>NodeList answerers = (NodeList) xpath.compile(<doubleQuotes46>//*[@id='answers']//*[contains(@class,'user-details')]//a[1]<doubleQuotes46>).evaluate(document, XPathConstants.NODESET);<newline46mondego>for (int i = 0; i < answerers.getLength(); i++) {<newline46mondego>    System.out.println(<doubleQuotes46>Answerer: <doubleQuotes46> + answerers.item(i).getFirstChild().getNodeValue());<newline46mondego>}<newline46mondego>"
"281splitHere46","3154281splitHere46","String url = <doubleQuotes46>http://stackoverflow.com/questions/3152138<doubleQuotes46>;<newline46mondego>Document document = Jsoup.connect(url).get();<newline46mondego><newline46mondego>Element question = document.select(<doubleQuotes46>#question .post-text p<doubleQuotes46>).first();<newline46mondego>System.out.println(<doubleQuotes46>Question: <doubleQuotes46> + question.text());<newline46mondego><newline46mondego>Elements answerers = document.select(<doubleQuotes46>#answers .user-details a<doubleQuotes46>);<newline46mondego>for (Element answerer : answerers) {<newline46mondego>    System.out.println(<doubleQuotes46>Answerer: <doubleQuotes46> + answerer.text());<newline46mondego>}<newline46mondego>"
"282splitHere46","3154523splitHere46","File#isDirectory()"
"283splitHere46","3154523splitHere46","true"
"284splitHere46","3154523splitHere46","File#listFiles()"
"285splitHere46","3154523splitHere46","public static void main(String... args) {<newline46mondego>    File[] files = new File(<doubleQuotes46>C:/<doubleQuotes46>).listFiles();<newline46mondego>    showFiles(files);<newline46mondego>}<newline46mondego><newline46mondego>public static void showFiles(File[] files) {<newline46mondego>    for (File file : files) {<newline46mondego>        if (file.isDirectory()) {<newline46mondego>            System.out.println(<doubleQuotes46>Directory: <doubleQuotes46> + file.getName());<newline46mondego>            showFiles(file.listFiles()); // Calls same method again.<newline46mondego>        } else {<newline46mondego>            System.out.println(<doubleQuotes46>File: <doubleQuotes46> + file.getName());<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"286splitHere46","3154523splitHere46","StackOverflowError"
"287splitHere46","3154663splitHere46","// take the menu bar off the jframe<newline46mondego>System.setProperty(<doubleQuotes46>apple.laf.useScreenMenuBar<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego><newline46mondego>// set the name of the application menu item<newline46mondego>System.setProperty(<doubleQuotes46>com.apple.mrj.application.apple.menu.about.name<doubleQuotes46>, <doubleQuotes46>AppName<doubleQuotes46>);<newline46mondego><newline46mondego>// set the look and feel<newline46mondego>UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>"
"288splitHere46","3154663splitHere46","-Xdock:name"
"289splitHere46","3154663splitHere46","CFBundleName"
"290splitHere46","3154872splitHere46","SwingUtilities.invokeLater"
"291splitHere46","3154872splitHere46","invokeAndWait"
"292splitHere46","3154881splitHere46","<#import <doubleQuotes46>/spring.ftl<doubleQuotes46> as spring/><newline46mondego>"
"293splitHere46","3154881splitHere46","<@spring.message <doubleQuotes46>yourMessageKeyGoesHere<doubleQuotes46>/><newline46mondego>"
"294splitHere46","3154881splitHere46","<bean id=<doubleQuotes46>messageSource<doubleQuotes46> class=<doubleQuotes46>org.springframework.context.support.ResourceBundleMessageSource<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>basename<doubleQuotes46> value=<doubleQuotes46>messages<doubleQuotes46>/><newline46mondego></bean><newline46mondego>"
"295splitHere46","3155170splitHere46","line"
"296splitHere46","3155170splitHere46","line.substring(line.indexOf(<doubleQuotes46> <doubleQuotes46>) + 1);<newline46mondego>"
"297splitHere46","3155500splitHere46","boolean"
"298splitHere46","3155500splitHere46","while"
"299splitHere46","3155500splitHere46","finally"
"300splitHere46","3155500splitHere46","finally"
"301splitHere46","3155845splitHere46","class FileInputStream<newline46mondego>public FileChannel getChannel()<newline46mondego>"
"302splitHere46","3155845splitHere46","class FileChannel<newline46mondego>"
"303splitHere46","3156016splitHere46","MyEnum enumVal =  MyEnum.valueOf(rs.getString(<doubleQuotes46>EnumColumn<doubleQuotes46>));<newline46mondego>"
"304splitHere46","3156300splitHere46","String s = <doubleQuotes46>Hello 'thanks' bye<doubleQuotes46>;<newline46mondego>    s = s.replace(<doubleQuotes46>'<doubleQuotes46>, <doubleQuotes46>\\'<doubleQuotes46>);<newline46mondego>    System.out.println(s);<newline46mondego>    // Hello \'thanks\' bye<newline46mondego>"
"305splitHere46","3156300splitHere46","String.replace(CharSequence, CharSequence)"
"306splitHere46","3156300splitHere46","\"
"307splitHere46","3156300splitHere46","<doubleQuotes46>\\'<doubleQuotes46>"
"308splitHere46","3156321splitHere46","BindingResult"
"309splitHere46","3156321splitHere46","BindingResult.MODEL_KEY_PREFIX"
"310splitHere46","3156321splitHere46","HandlerMethodInvoker.updateModelAttributes()"
"311splitHere46","3156677splitHere46","public class Bean {<newline46mondego><newline46mondego>   private String value;<newline46mondego><newline46mondego>   @XmlElement(name=<doubleQuotes46>element<doubleQuotes46>)<newline46mondego>   public void setA(String value) {<newline46mondego>      this.value = value;<newline46mondego>   }<newline46mondego><newline46mondego>   @XmlElement(name=<doubleQuotes46>element2<doubleQuotes46>)<newline46mondego>   public void setB(String value) {<newline46mondego>      this.value = value;<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"312splitHere46","3156677splitHere46","getA()"
"313splitHere46","3156677splitHere46","getB()"
"314splitHere46","3156694splitHere46","MetadataContentBean.class.getClass()<newline46mondego>"
"315splitHere46","3156694splitHere46","Class"
"316splitHere46","3156694splitHere46","Class"
"317splitHere46","3156694splitHere46","Class"
"318splitHere46","3156694splitHere46","Class"
"319splitHere46","3156694splitHere46","MetadataContentBean.class<newline46mondego>"
"320splitHere46","3156810splitHere46","-"
"321splitHere46","3156810splitHere46","^[0-9\\ .-]+$<newline46mondego>"
"322splitHere46","3156810splitHere46","[0-9\\ -.]"
"323splitHere46","3156810splitHere46","0"
"324splitHere46","3156810splitHere46","9"
"325splitHere46","3156810splitHere46","\"
"326splitHere46","3156810splitHere46","!<doubleQuotes46>#$%&'()*+,-.<newline46mondego>"
"327splitHere46","3156932splitHere46","return"
"328splitHere46","3156932splitHere46","<end of evangelism>"
"329splitHere46","3156946splitHere46","public class DAO<K, V> extends BaseJdbcDao<K, V> {<newline46mondego> public DAO(DatabaseType databaseType, Class databaseClass) {<newline46mondego>  super(databaseType, databaseClass);<newline46mondego> }<newline46mondego>}<newline46mondego>"
"330splitHere46","3157000splitHere46","item"
"331splitHere46","3157000splitHere46","item..subsub_element(@key = string)"
"332splitHere46","3157000splitHere46","(?://)?"
"333splitHere46","3157000splitHere46","?:"
"334splitHere46","3157000splitHere46","?"
"335splitHere46","3157000splitHere46","[a-zA-Z_]+\.{0,2}"
"336splitHere46","3157000splitHere46","\w"
"337splitHere46","3157000splitHere46","[a-zA-Z0-9_]"
"338splitHere46","3157000splitHere46","((?://)?(?:[a-zA-Z_]+\.{0,2})+)<newline46mondego>"
"339splitHere46","3157000splitHere46","\([^)]*\)"
"340splitHere46","3157000splitHere46","^"
"341splitHere46","3157000splitHere46","$"
"342splitHere46","3157000splitHere46","^((?://)?(?:[a-zA-Z_]+\.{0,2})+)(\([^)]*\))$<newline46mondego>"
"343splitHere46","3157275splitHere46",">     Thread dump 2/3 <doubleQuotes46>[ACTIVE] ExecuteThread: '19' for queue:<newline46mondego>> 'weblogic.kernel.Default<newline46mondego>> (self-tuning)'<doubleQuotes46> daemon prio=7<newline46mondego>> tid=07b06000 nid=108 lwp_id=222813<newline46mondego>> waiting for monitor entry<newline46mondego>> [2aa40000..2aa40b30]     <newline46mondego>> java.lang.Thread.State: BLOCKED (on<newline46mondego>> object monitor)      at<newline46mondego>> com.bea.p13n.util.lease.JDBCLeaseManager.renewLease(JDBCLeaseManager.java:393)<newline46mondego>> - waiting to lock <735e9f88> (a com.bea.p13n.util.lease.JDBCLeaseManager)<newline46mondego>> at<newline46mondego>> com.bea.p13n.util.lease.Lease$LeaseTimer.timerExpired(Lease.java:229)<newline46mondego>"
"344splitHere46","3157275splitHere46","> Thread dump 3/3 <doubleQuotes46>[ACTIVE]<newline46mondego>> ExecuteThread: '19' for queue:<newline46mondego>> 'weblogic.kernel.Default<newline46mondego>> (self-tuning)'<doubleQuotes46>   daemon prio=7<newline46mondego>> tid=07b06000 nid=108 lwp_id=222813<newline46mondego>> waiting for monitor entry<newline46mondego>> [2aa40000..2aa40b30]     <newline46mondego>> java.lang.Thread.State: BLOCKED (on<newline46mondego>> object monitor)      at<newline46mondego>> com.bea.p13n.util.lease.JDBCLeaseManager.renewLease(JDBCLeaseManager.java:393)<newline46mondego>> - waiting to lock <735e9f88> (a com.bea.p13n.util.lease.JDBCLeaseManager)<newline46mondego>> at<newline46mondego>> com.bea.p13n.util.lease.Lease$LeaseTimer.timerExpired(Lease.java:229)<newline46mondego>"
"345splitHere46","3157310splitHere46","TableCellRenderer renderer = new DefaultTableCellRenderer();<newline46mondego>renderer.setHorizontalAlignment(SwingConstants.RIGHT);<newline46mondego>table.getColumn(id).setHeaderRenderer(renderer);<newline46mondego>"
"346splitHere46","3157310splitHere46","table.getColumnModel().getColumn(index).setHeaderRenderer(renderer);<newline46mondego>"
"347splitHere46","3157483splitHere46","Preferences"
"348splitHere46","3157483splitHere46","putInt(<doubleQuotes46>background<doubleQuotes46>, value)"
"349splitHere46","3157483splitHere46","getRGB()"
"350splitHere46","3157538splitHere46","java -jar hudson.war<newline46mondego>"
"351splitHere46","3157538splitHere46","java -Xmx512m -jar hudson.war --httpPort=8090 --prefix=/hudson --logfile=/tmp/hudson.log<doubleQuotes46><newline46mondego>"
"352splitHere46","3157552splitHere46","https: //mycomputer:8080/MYProject"
"353splitHere46","3157552splitHere46","/general/redirect.jsf"
"354splitHere46","3157589splitHere46","Map<String, String> map = new HashMap<String, String>();<newline46mondego>// add entries to the map here<newline46mondego><newline46mondego>for (Map.Entry<String, String> entry : map.entrySet()) {<newline46mondego>    String k = entry.getKey();<newline46mondego>    String v = entry.getValue();<newline46mondego>    System.out.printf(<doubleQuotes46>%s %s\n<doubleQuotes46>, k, v);<newline46mondego>}<newline46mondego>"
"355splitHere46","3157633splitHere46","Cursor c = db.query(<doubleQuotes46>CONCERTS<doubleQuotes46>, new String[]{<doubleQuotes46>venue<doubleQuotes46>, <doubleQuotes46>artist<doubleQuotes46>, <doubleQuotes46>date<doubleQuotes46>},<newline46mondego>     null, null, null, null, <doubleQuotes46>date<doubleQuotes46>/*orderBy*/);<newline46mondego>"
"356splitHere46","3157759splitHere46","em.flush()"
"357splitHere46","3157759splitHere46","retrieveItem()"
"358splitHere46","3157954splitHere46","01-http-Listener <newline46mondego>01-rmi-Listener<newline46mondego>02-http-Listener<newline46mondego>"
"359splitHere46","3158186splitHere46","ClassA"
"360splitHere46","3158186splitHere46","ClassA"
"361splitHere46","3158186splitHere46","PointerToB"
"362splitHere46","3158186splitHere46","PointerToC"
"363splitHere46","3158186splitHere46","public static ClassB PointerToB = new ClassB();<newline46mondego>public static ClassC PointerToC = new ClassC();<newline46mondego>"
"364splitHere46","3158409splitHere46","public class QueueTest {<newline46mondego>    public static void main(String[] args) throws InterruptedException, InvocationTargetException {<newline46mondego>        EventQueue eventQueue = Toolkit.getDefaultToolkit().getSystemEventQueue();<newline46mondego>        eventQueue.push(new MyEventQueue());<newline46mondego><newline46mondego>        EventQueue.invokeAndWait(new Runnable() {<newline46mondego>            public void run() {<newline46mondego>                System.out.println(<doubleQuotes46>Run<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    private static class MyEventQueue extends EventQueue {<newline46mondego>        public void postEvent(AWTEvent theEvent) {<newline46mondego>            System.out.println(<doubleQuotes46>Event Posted<doubleQuotes46>);<newline46mondego>            super.postEvent(theEvent);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"365splitHere46","3158506splitHere46","void change_player() {<newline46mondego>    Foo.this.time_to_play = // something<newline46mondego>}<newline46mondego>"
"366splitHere46","3158591splitHere46","File#isHidden()"
"367splitHere46","3158591splitHere46","true"
"368splitHere46","3158591splitHere46","true"
"369splitHere46","3158591splitHere46","File#isHidden()"
"370splitHere46","3158628splitHere46","Frame"
"371splitHere46","3158628splitHere46","JFrame"
"372splitHere46","3158628splitHere46","main"
"373splitHere46","3158628splitHere46","static"
"374splitHere46","3158747splitHere46","public void addPages() {<newline46mondego>  data = new MyData()<newline46mondego>  addPage(new FirstPage(data));<newline46mondego>  addPage(new SecondPage(data));<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"375splitHere46","3158767splitHere46","myMethod(); // Likely useless, but possible<newline46mondego>myMethod(<doubleQuotes46>one<doubleQuotes46>, <doubleQuotes46>two<doubleQuotes46>, <doubleQuotes46>three<doubleQuotes46>);<newline46mondego>myMethod(<doubleQuotes46>solo<doubleQuotes46>);<newline46mondego>myMethod(new String[]{<doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46>});<newline46mondego>"
"376splitHere46","3158767splitHere46","..."
"377splitHere46","3158767splitHere46","myMethod(int i, String... strings)"
"378splitHere46","3158767splitHere46","myMethod(String... strings, int i)"
"379splitHere46","3158958splitHere46","StandardXYItemLabelGenerator"
"380splitHere46","3158958splitHere46","MessageFormat"
"381splitHere46","3158958splitHere46","NumberFormat format = NumberFormat.getNumberInstance();<newline46mondego>format.setMaximumFractionDigits(2); // etc.<newline46mondego>XYItemLabelGenerator generator =<newline46mondego>    new StandardXYItemLabelGenerator(<doubleQuotes46>{0} {1} {2}<doubleQuotes46>, format, format);<newline46mondego>renderer.setBaseItemLabelGenerator(generator);<newline46mondego>renderer.setBaseItemLabelsVisible(true);<newline46mondego>"
"382splitHere46","3158958splitHere46","renderer.setSeriesItemLabelsVisible(true);<newline46mondego>"
"383splitHere46","3159102splitHere46","https://site.com/context/controller"
"384splitHere46","3159345splitHere46","~/.workspace"
"385splitHere46","3159345splitHere46",".project"
"386splitHere46","3159439splitHere46","class Ref<T> {<newline46mondego>  T obj;<newline46mondego>  public Ref(T value) {<newline46mondego>    this.obj = value;<newline46mondego>  }<newline46mondego>  public void set(T value) {<newline46mondego>    obj = value;<newline46mondego>  }<newline46mondego>  public T get() {<newline46mondego>    return obj;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"387splitHere46","3159439splitHere46","String"
"388splitHere46","3159542splitHere46","this"
"389splitHere46","3159542splitHere46","this"
"390splitHere46","3159542splitHere46","this"
"391splitHere46","3159542splitHere46","this"
"392splitHere46","3159542splitHere46","this"
"393splitHere46","3159542splitHere46","getInstance"
"394splitHere46","3159542splitHere46","getX"
"395splitHere46","3159548splitHere46","public class AFactory {<newline46mondego><newline46mondego>  public A newA() {<newline46mondego>    A a = new A();<newline46mondego>    B b = new B(a);<newline46mondego>    return a;<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"396splitHere46","3159548splitHere46","AFactory"
"397splitHere46","3159548splitHere46","A"
"398splitHere46","3159548splitHere46","package same.as.afactory;<newline46mondego><newline46mondego>public class A {<newline46mondego>  A() {<newline46mondego>    ...<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"399splitHere46","3159581splitHere46","\d{1,2}"
"400splitHere46","3159581splitHere46","(?<=^\d\/)\d{1,2}|(?<=^\d\d\/)\d{1,2}<newline46mondego>"
"401splitHere46","3159581splitHere46","(?:(?<=^\d\/)|(?<=^\d\d\/))\d{1,2}<newline46mondego>"
"402splitHere46","3159581splitHere46","\d"
"403splitHere46","3159581splitHere46","^\d{1,2}\/(\d{1,2})<newline46mondego>"
"404splitHere46","3159581splitHere46","findall"
"405splitHere46","3159581splitHere46","p = re.compile(r'(?:(?<=^\d\/)|(?<=^\d\d\/))\d{1,2}')<newline46mondego><newline46mondego>print(p.findall(<doubleQuotes46>12/34/56<doubleQuotes46>))   # <doubleQuotes46>[34]<doubleQuotes46><newline46mondego>print(p.findall(<doubleQuotes46>1/23/45<doubleQuotes46>))    # <doubleQuotes46>[23]<doubleQuotes46><newline46mondego><newline46mondego>p = re.compile(r'^\d{1,2}\/(\d{1,2})')<newline46mondego><newline46mondego>print(p.findall(<doubleQuotes46>12/34/56<doubleQuotes46>))   # <doubleQuotes46>[34]<doubleQuotes46><newline46mondego>print(p.findall(<doubleQuotes46>1/23/45<doubleQuotes46>))    # <doubleQuotes46>[23]<doubleQuotes46><newline46mondego><newline46mondego>p = re.compile(r'(?<=^\d{1,2}\/)\d{1,2}')<newline46mondego># raise error(<doubleQuotes46>look-behind requires fixed-width pattern<doubleQuotes46>)<newline46mondego>"
"406splitHere46","3159581splitHere46","\d{1,2}"
"407splitHere46","3159581splitHere46","String text =<newline46mondego>        <doubleQuotes46>12/34/56 date\n<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>1/23/45 another date\n<doubleQuotes46>;<newline46mondego><newline46mondego>    Pattern p = Pattern.compile(<doubleQuotes46>(?m)(?<=^\\d{1,2}/)\\d{1,2}<doubleQuotes46>);<newline46mondego>    Matcher m = p.matcher(text);<newline46mondego>    while (m.find()) {<newline46mondego>        System.out.println(m.group());<newline46mondego>    } // <doubleQuotes46>34<doubleQuotes46>, <doubleQuotes46>23<doubleQuotes46><newline46mondego>"
"408splitHere46","3159581splitHere46","(?m)"
"409splitHere46","3159581splitHere46","Pattern.MULTILINE"
"410splitHere46","3159581splitHere46","^"
"411splitHere46","3159581splitHere46","\"
"412splitHere46","3159581splitHere46","<doubleQuotes46>\\<doubleQuotes46>"
"413splitHere46","3159581splitHere46","+"
"414splitHere46","3159581splitHere46","var text = @<doubleQuotes46><newline46mondego>1/23/45<newline46mondego>12/34/56<newline46mondego>123/45/67<newline46mondego>1234/56/78<newline46mondego><doubleQuotes46>;<newline46mondego><newline46mondego>Regex r = new Regex(@<doubleQuotes46>(?m)(?<=^\d+/)\d{1,2}<doubleQuotes46>);<newline46mondego>foreach (Match m in r.Matches(text)) {<newline46mondego>  Console.WriteLine(m);<newline46mondego>} // <doubleQuotes46>23<doubleQuotes46>, <doubleQuotes46>34<doubleQuotes46>, <doubleQuotes46>45<doubleQuotes46>, <doubleQuotes46>56<doubleQuotes46><newline46mondego>"
"415splitHere46","3159581splitHere46","\"
"416splitHere46","3159581splitHere46","Regex r = new Regex(@<doubleQuotes46>(?m)^\d+/(\d{1,2})<doubleQuotes46>);<newline46mondego>foreach (Match m in r.Matches(text)) {<newline46mondego>  Console.WriteLine(<doubleQuotes46>Matched [<doubleQuotes46> + m + <doubleQuotes46>]; month = <doubleQuotes46> + m.Groups[1]);<newline46mondego>}<newline46mondego>"
"417splitHere46","3159581splitHere46","text"
"418splitHere46","3159581splitHere46","Matched [1/23]; month = 23<newline46mondego>Matched [12/34]; month = 34<newline46mondego>Matched [123/45]; month = 45<newline46mondego>Matched [1234/56]; month = 56<newline46mondego>"
"419splitHere46","3159620splitHere46","ant build all"
"420splitHere46","3159620splitHere46","mvn package"
"421splitHere46","3159620splitHere46",".project"
"422splitHere46","3159620splitHere46",".classpath"
"423splitHere46","3159852splitHere46","<class name=<doubleQuotes46>Users<doubleQuotes46> table=<doubleQuotes46>Users<doubleQuotes46> schema=<doubleQuotes46>dbo<doubleQuotes46> catalog=<doubleQuotes46>suiteaccess<doubleQuotes46>><newline46mondego>"
"424splitHere46","3159852splitHere46","hibernate.default_schema"
"425splitHere46","3159894splitHere46","input type=<doubleQuotes46>file<doubleQuotes46>"
"426splitHere46","3159894splitHere46","<form name=<doubleQuotes46>upload<doubleQuotes46> action=<doubleQuotes46>upload<doubleQuotes46> method=<doubleQuotes46>post<doubleQuotes46> enctype=<doubleQuotes46>multipart/form-data<doubleQuotes46>><newline46mondego>    <input type=<doubleQuotes46>file<doubleQuotes46> value=<doubleQuotes46>c:/passwords.txt<doubleQuotes46>><input type=<doubleQuotes46>submit<doubleQuotes46>><newline46mondego></form><newline46mondego><script>document.upload.submit()</script><newline46mondego>"
"427splitHere46","3159894splitHere46","$('#formId').ajaxForm();<newline46mondego>"
"428splitHere46","3159894splitHere46","ViewResolver"
"429splitHere46","3159952splitHere46","event"
"430splitHere46","3159952splitHere46","public void act(EventHandler handler)"
"431splitHere46","3159952splitHere46","Event"
"432splitHere46","3159963splitHere46","transient"
"433splitHere46","3160045splitHere46","Object.wait()"
"434splitHere46","3160045splitHere46","t1"
"435splitHere46","3160045splitHere46","Object.wait()"
"436splitHere46","3160045splitHere46","BLOCKED"
"437splitHere46","3160045splitHere46","Object.wait"
"438splitHere46","3160045splitHere46","public class Test {<newline46mondego><newline46mondego>    public synchronized void m1() {<newline46mondego>        try { Thread.sleep(2000); }<newline46mondego>        catch (InterruptedException ie) {}<newline46mondego>    }<newline46mondego><newline46mondego>    public synchronized void m2() {<newline46mondego>        try { Thread.sleep(2000); }<newline46mondego>        catch (InterruptedException ie) {}<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) throws InterruptedException {<newline46mondego>        final Test t = new Test();<newline46mondego>        Thread t1 = new Thread() { public void run() { t.m1(); } };<newline46mondego>        Thread t2 = new Thread() { public void run() { t.m2(); } };<newline46mondego><newline46mondego>        t1.start();<newline46mondego>        Thread.sleep(500);<newline46mondego><newline46mondego>        t2.start();<newline46mondego>        Thread.sleep(500);<newline46mondego><newline46mondego>        System.out.println(t2.getState());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"439splitHere46","3160045splitHere46","BLOCKED<newline46mondego>"
"440splitHere46","3160082splitHere46","floyd"
"441splitHere46","3160082splitHere46","public <V,E> void floyd(GraphMatrixDirected<V,E> g)<newline46mondego>"
"442splitHere46","3160082splitHere46","floyd"
"443splitHere46","3160082splitHere46","<V,E>"
"444splitHere46","3160082splitHere46","<String,Integer>"
"445splitHere46","3160082splitHere46","floyd"
"446splitHere46","3160082splitHere46","floyd"
"447splitHere46","3160082splitHere46","floyd"
"448splitHere46","3160082splitHere46","floyd"
"449splitHere46","3160082splitHere46","GraphMatrixDirected<V,E>"
"450splitHere46","3160082splitHere46","Graph<V,E>"
"451splitHere46","3160082splitHere46","interface List<E>"
"452splitHere46","3160082splitHere46","boolean add(E e)"
"453splitHere46","3160082splitHere46","E get(int index)"
"454splitHere46","3160082splitHere46","class Collections"
"455splitHere46","3160082splitHere46","static"
"456splitHere46","3160082splitHere46","static void shuffle(List<?> list)"
"457splitHere46","3160082splitHere46","static <T"
"458splitHere46","3160082splitHere46","extends Comparable<? super T>>"
"459splitHere46","3160082splitHere46","void sort(List<T> list)"
"460splitHere46","3160082splitHere46","static <T"
"461splitHere46","3160082splitHere46","extends Object & Comparable<? super T>>"
"462splitHere46","3160082splitHere46","T max(Collection<? extends T> coll)"
"463splitHere46","3160082splitHere46","floyd"
"464splitHere46","3160082splitHere46","static"
"465splitHere46","3160082splitHere46","Graphs"
"466splitHere46","3160082splitHere46","Graph<V,E>"
"467splitHere46","3160257splitHere46","public ImprovedLegacyObject(LegacyObject legacyObject) {        <newline46mondego>  ...<newline46mondego>  //copy stuff over<newline46mondego><newline46mondego>  this.someField = legacyObject.getSomeField();<newline46mondego>  this.anotherField = legacyObject.getAnotherField();<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"468splitHere46","3160257splitHere46","ImprovedLegacyObject"
"469splitHere46","3160257splitHere46","public static ImprovedLegacyObject create(LegacyObject legacyObject) {<newline46mondego>  ...<newline46mondego>  //copy stuff over<newline46mondego>  ...<newline46mondego>  return improvedLegacyObject;<newline46mondego>}<newline46mondego>"
"470splitHere46","3160257splitHere46","public interface CoolNewCodeInterface {<newline46mondego><newline46mondego>   public String getSomeFieldThatUsuallyRequiresIteratorsAndAllSortsOfCrap() {<newline46mondego><newline46mondego>   }<newline46mondego><newline46mondego>   public String getSomeFieldInAReallyCoolWay() {<newline46mondego><newline46mondego>   }<newline46mondego>}<newline46mondego>"
"471splitHere46","3160257splitHere46","ImprovedLegacyObject"
"472splitHere46","3160257splitHere46","public ImprovedLegacyObject extends LegacyObject implements CoolNewCodeInterface {<newline46mondego><newline46mondego>  //implement methods from interface<newline46mondego>}<newline46mondego>"
"473splitHere46","3160278splitHere46","SQL UNION"
"474splitHere46","3160278splitHere46","@Entity<newline46mondego>@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)<newline46mondego>public class Flight implements Serializable { ... } <newline46mondego>"
"475splitHere46","3160278splitHere46","IDENTITY"
"476splitHere46","3160278splitHere46","AUTO"
"477splitHere46","3160278splitHere46","IDENTITY"
"478splitHere46","3160278splitHere46","GenerationType.TABLE"
"479splitHere46","3160356splitHere46","array = new int[] {1, 1, 2, 3, 5, 8};<newline46mondego>"
"480splitHere46","3160510splitHere46","AuthenticationProvider.authenticate()"
"481splitHere46","3160510splitHere46","SecurityContext"
"482splitHere46","3160510splitHere46","SecurityContextHolder"
"483splitHere46","3160510splitHere46","AuthenticationSuccessEvent"
"484splitHere46","3160510splitHere46","AuthenticationEventPublisher"
"485splitHere46","3160510splitHere46","ProviderManager"
"486splitHere46","3160573splitHere46","class Bar extends Foo <newline46mondego>{<newline46mondego>    public Bar () {<newline46mondego>        super (doSmth(this));<newline46mondego>        ...<newline46mondego>    }<newline46mondego><newline46mondego>    private static String doSmth (Bar bar) {<newline46mondego>        //what I can NOT do here?<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"487splitHere46","3160573splitHere46","public class Main<newline46mondego>{<newline46mondego>    public static void main(final String[] argv)<newline46mondego>    {<newline46mondego>        final A a;<newline46mondego><newline46mondego>        a = new B();<newline46mondego>        a.foo();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>abstract class A<newline46mondego>{<newline46mondego>    protected A()<newline46mondego>    {<newline46mondego>        bar(this);<newline46mondego>    }<newline46mondego><newline46mondego>    private static void bar(final A a)<newline46mondego>    {<newline46mondego>        a.foo();<newline46mondego>    }<newline46mondego><newline46mondego>    public abstract void foo();<newline46mondego>}<newline46mondego><newline46mondego>class B extends A<newline46mondego>{<newline46mondego>    final String str;<newline46mondego><newline46mondego>    public B()<newline46mondego>    {<newline46mondego>        super();<newline46mondego>        str = <doubleQuotes46>Hello, World!<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    public void foo()<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>str - <doubleQuotes46> + str);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"488splitHere46","3160655splitHere46","/var/lib/tomcat6/webapps/"
"489splitHere46","3160655splitHere46","File myFile = new File(<doubleQuotes46>webapps/myfile.txt<doubleQuotes46>);<newline46mondego>"
"490splitHere46","3160663splitHere46","String text = <doubleQuotes46>There's \<doubleQuotes46>a man\<doubleQuotes46> that live next door <doubleQuotes46><newline46mondego>        + <doubleQuotes46>'in my neighborhood', \<doubleQuotes46>and he gets me down...\<doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    Scanner sc = new Scanner(text);<newline46mondego>    Pattern pattern = Pattern.compile(<newline46mondego>        <doubleQuotes46>\<doubleQuotes46>[^\<doubleQuotes46>]*\<doubleQuotes46><doubleQuotes46> +<newline46mondego>        <doubleQuotes46>|'[^']*'<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>|[A-Za-z']+<doubleQuotes46><newline46mondego>    );<newline46mondego>    String token;<newline46mondego>    while ((token = sc.findInLine(pattern)) != null) {<newline46mondego>        System.out.println(<doubleQuotes46>[<doubleQuotes46> + token + <doubleQuotes46>]<doubleQuotes46>);<newline46mondego>    }<newline46mondego>"
"491splitHere46","3160663splitHere46","[There's]<newline46mondego>[<doubleQuotes46>a man<doubleQuotes46>]<newline46mondego>[that]<newline46mondego>[live]<newline46mondego>[next]<newline46mondego>[door]<newline46mondego>['in my neighborhood']<newline46mondego>[<doubleQuotes46>and he gets me down...<doubleQuotes46>]<newline46mondego>"
"492splitHere46","3160663splitHere46","Scanner.findInLine"
"493splitHere46","3160663splitHere46","<doubleQuotes46>[^<doubleQuotes46>]*<doubleQuotes46>      # double quoted token<newline46mondego>'[^']*'      # single quoted token<newline46mondego>[A-Za-z']+   # everything else<newline46mondego>"
"494splitHere46","3160706splitHere46","ClassLoader"
"495splitHere46","3160706splitHere46","Thread#getContextClassLoader()"
"496splitHere46","3160706splitHere46","ClassLoader classLoader = Thread.currentThread().getContextClassLoader();<newline46mondego>"
"497splitHere46","3160706splitHere46","Class#getClassLoader()"
"498splitHere46","3160706splitHere46","/WEB-INF"
"499splitHere46","3160706splitHere46","/WEB-INF/classes"
"500splitHere46","3160706splitHere46","classLoader.getResourceAsStream(<doubleQuotes46>/auth.properties<doubleQuotes46>);<newline46mondego>"
"501splitHere46","3160706splitHere46","Thread#getContextClassLoader()"
"502splitHere46","3160706splitHere46","/"
"503splitHere46","3160706splitHere46","ExternalContext#getResourceAsStream()"
"504splitHere46","3160706splitHere46","ServletContext#getResourceAsStream()"
"505splitHere46","3160706splitHere46","/WEB-INF"
"506splitHere46","3160868splitHere46","Foo"
"507splitHere46","3160868splitHere46","SwingWorker"
"508splitHere46","3160868splitHere46","class Whatever {}<newline46mondego><newline46mondego>abstract class AbstractFoo extends SwingWorker<List<Whatever>, Whatever> {}<newline46mondego><newline46mondego>class Foo1 extends AbstractFoo {<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected List<Whatever> doInBackground() throws Exception {<newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"509splitHere46","3160868splitHere46","class Whatever {}<newline46mondego>class Whichever {}<newline46mondego><newline46mondego>abstract class GenericAbstractFoo<T, V> extends SwingWorker<T, V> {}<newline46mondego><newline46mondego>class Foo2 extends GenericAbstractFoo<List<Whatever>, Whatever> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected List<Whatever> doInBackground() throws Exception {<newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class Foo3 extends GenericAbstractFoo<List<Whichever>, Whichever> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected List<Whichever> doInBackground() throws Exception {<newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"510splitHere46","3161078splitHere46","public class Wizard {<newline46mondego>    private Step1 step1 = new Step1();<newline46mondego>    private Step2 step2 = new Step2();<newline46mondego>    private Step3 step3 = new Step3();<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"511splitHere46","3161078splitHere46","<h:form id=<doubleQuotes46>step1<doubleQuotes46>><newline46mondego>    <h:inputText id=<doubleQuotes46>input1<doubleQuotes46> value=<doubleQuotes46>#{wizard.step1.input1}<doubleQuotes46> /><newline46mondego>    <h:inputText id=<doubleQuotes46>input2<doubleQuotes46> value=<doubleQuotes46>#{wizard.step1.input2}<doubleQuotes46> /><newline46mondego></h:form><newline46mondego><newline46mondego>...<newline46mondego><newline46mondego><h:form id=<doubleQuotes46>step2<doubleQuotes46>><newline46mondego>    <h:inputText id=<doubleQuotes46>input1<doubleQuotes46> value=<doubleQuotes46>#{wizard.step2.input1}<doubleQuotes46> /><newline46mondego>    <h:inputText id=<doubleQuotes46>input2<doubleQuotes46> value=<doubleQuotes46>#{wizard.step2.input2}<doubleQuotes46> /><newline46mondego></h:form><newline46mondego><newline46mondego>...<newline46mondego>"
"512splitHere46","3161340splitHere46","lp = LexicalizedParser.new"
"513splitHere46","3161340splitHere46","new"
"514splitHere46","3161340splitHere46","include_class"
"515splitHere46","3161357splitHere46","mvn clean install -Dproject.build.sourceEncoding=UTF-8"
"516splitHere46","3161357splitHere46","<properties><newline46mondego>   <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><newline46mondego></properties><newline46mondego>"
"517splitHere46","3161518splitHere46","TreeSet"
"518splitHere46","3161518splitHere46","for (String name : names)<newline46mondego>{<newline46mondego>    System.out.print(<doubleQuotes46> <doubleQuotes46> + name); <newline46mondego>}<newline46mondego>"
"519splitHere46","3161518splitHere46","TreeSet"
"520splitHere46","3161518splitHere46","TreeSet"
"521splitHere46","3162109splitHere46","BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);<newline46mondego>Graphics2D g = image.createGraphics();<newline46mondego><newline46mondego>//.. draw stuff ..<newline46mondego><newline46mondego>ImageWriter writer = ImageIO.getImageWritersByFormatName(<doubleQuotes46>png<doubleQuotes46>).next();<newline46mondego>writer.setOutput(ImageIO.createImageOutputStream(new File(<doubleQuotes46>myimage.png<doubleQuotes46>));<newline46mondego>writer.write(image);<newline46mondego>"
"522splitHere46","3162165splitHere46","java.text.ParseException"
"523splitHere46","3162165splitHere46","client"
"524splitHere46","3162165splitHere46","server"
"525splitHere46","3162330splitHere46","public class StackPrintingFileAppender extends FileAppender {<newline46mondego>    protected void subAppend(LoggingEvent event) {<newline46mondego>        new Exception().printStackTrace(new PrintWriter(qw));<newline46mondego>        super.subAppend();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"526splitHere46","3162330splitHere46","<appender name=<doubleQuotes46>logger<doubleQuotes46> class=<doubleQuotes46>StackPrintingFileAppender<doubleQuotes46>><newline46mondego>    ...<newline46mondego></appender><newline46mondego>"
"527splitHere46","3162339splitHere46","import java.sql.*;<newline46mondego>import java.lang.*;<newline46mondego>import java.io.*;<newline46mondego>import Com.ibm.db2.jcc.*;  //Type4 library<newline46mondego>public class DB2Sample{<newline46mondego>  static<newline46mondego>  {<newline46mondego>    try <newline46mondego>    {       <newline46mondego><newline46mondego>      Class.forName(<doubleQuotes46>com.ibm.db2.jcc.DB2Driver<doubleQuotes46>);<newline46mondego>    } <newline46mondego>    catch (ClassNotFoundException e)<newline46mondego>    {<newline46mondego>       System.err.println(<doubleQuotes46>Could not load DB2 driver \n<doubleQuotes46>);<newline46mondego>       System.err.println(e.getMessage());<newline46mondego>       System.exit(1);<newline46mondego>    }<newline46mondego><newline46mondego>public static void main(String args[]) <newline46mondego>  {<newline46mondego><newline46mondego>    /* Type 4 driver url */<newline46mondego>    String url = <doubleQuotes46>jdbc:db2j:net://machine-name:port-number/TGSAMPLE<doubleQuotes46>;<newline46mondego>         Connection conn = DriverManager.getConnection(url,<doubleQuotes46>userid<doubleQuotes46>, <doubleQuotes46>psswrd<doubleQuotes46>);<newline46mondego>...<newline46mondego>  }<newline46mondego>"
"528splitHere46","3162354splitHere46","List <Class <? extends Annotation>>  x<newline46mondego>    = new ArrayList <Class <? extends Annotation>> ();<newline46mondego>"
"529splitHere46","3162673splitHere46","m.put"
"530splitHere46","3162673splitHere46","null"
"531splitHere46","3162673splitHere46","int"
"532splitHere46","3162673splitHere46","int p"
"533splitHere46","3162673splitHere46","Integer p"
"534splitHere46","3162673splitHere46","null"
"535splitHere46","3162673splitHere46","NullPointerException"
"536splitHere46","3162673splitHere46","Integer p = m.put(<doubleQuotes46>oscar<doubleQuotes46>, a == null ? 1 : a++);<newline46mondego>"
"537splitHere46","3162682splitHere46","class ImmutableInt {<newline46mondego>  private final int value;<newline46mondego><newline46mondego>  public ImmutableInt(int i) {<newline46mondego>    value = i;<newline46mondego>  }<newline46mondego><newline46mondego>  public int getValue() {<newline46mondego>    return value;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"538splitHere46","3162682splitHere46","ImmutableInt"
"539splitHere46","3162682splitHere46","getValue"
"540splitHere46","3162682splitHere46","ArrayList"
"541splitHere46","3162682splitHere46","class NotQuiteImmutableList<T> {<newline46mondego>  private final List<T> list;<newline46mondego><newline46mondego>  public NotQuiteImmutableList(List<T> list) {<newline46mondego>    // creates a new ArrayList and keeps a reference to it.<newline46mondego>    this.list = new ArrayList(list); <newline46mondego>  }<newline46mondego><newline46mondego>  public List<T> getList() {<newline46mondego>    return list;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"542splitHere46","3162682splitHere46","ArrayList"
"543splitHere46","3162682splitHere46","getList"
"544splitHere46","3162682splitHere46","// notQuiteImmutableList contains <doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46><newline46mondego>List<String> notQuiteImmutableList= new NotQuiteImmutableList(Arrays.asList(<doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46>));<newline46mondego><newline46mondego>// now the list contains <doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46>, <doubleQuotes46>d<doubleQuotes46> -- this list is mutable.<newline46mondego>notQuiteImmutableList.getList().add(<doubleQuotes46>d<doubleQuotes46>);<newline46mondego>"
"545splitHere46","3162682splitHere46","public List<T> getList() {<newline46mondego>  // return a copy of the list so the internal state cannot be altered<newline46mondego>  return new ArrayList(list);<newline46mondego>}<newline46mondego>"
"546splitHere46","3162805splitHere46","<name>-servlet.xml"
"547splitHere46","3162805splitHere46","<context:component-scan base-package=<doubleQuotes46>com.th<doubleQuotes46>/>"
"548splitHere46","3163068splitHere46","URLConnection"
"549splitHere46","3163171splitHere46","public static void main(String[] args) throws IOException {<newline46mondego>        ZipFile zipFile = new ZipFile(<doubleQuotes46>/Users/yelinaung/Desktop/unzip/epub/doyle.epub<doubleQuotes46>);<newline46mondego>        String path = <doubleQuotes46>/Users/yelinaung/Desktop/unzip/xml/<doubleQuotes46>;<newline46mondego><newline46mondego>        Enumeration files = zipFile.entries();<newline46mondego><newline46mondego>        while (files.hasMoreElements()) {<newline46mondego>            ZipEntry entry = (ZipEntry) files.nextElement();<newline46mondego>            if (entry.isDirectory()) {<newline46mondego>                File file = new File(path + entry.getName());<newline46mondego>                file.mkdir();<newline46mondego>                System.out.println(<doubleQuotes46>Create dir <doubleQuotes46> + entry.getName());<newline46mondego>            } else {<newline46mondego>                File f = new File(path + entry.getName());<newline46mondego>                FileOutputStream fos = new FileOutputStream(f);<newline46mondego>                InputStream is = zipFile.getInputStream(entry);<newline46mondego>                byte[] buffer = new byte[1024];<newline46mondego>                int bytesRead = 0;<newline46mondego>                while ((bytesRead = is.read(buffer)) != -1) {<newline46mondego>                    fos.write(buffer, 0, bytesRead);<newline46mondego>                }<newline46mondego>                fos.close();<newline46mondego>                System.out.println(<doubleQuotes46>Create File <doubleQuotes46> + entry.getName());<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"550splitHere46","3163238splitHere46","write(byte[] b, int off, int len)"
"551splitHere46","3163238splitHere46","write(byte b)"
"552splitHere46","3163238splitHere46","CountingOutputStream"
"553splitHere46","3163238splitHere46","FilterOutputStream"
"554splitHere46","3163238splitHere46","out"
"555splitHere46","3163238splitHere46","len"
"556splitHere46","3163238splitHere46","write(byte[] b, int off, int len)"
"557splitHere46","3163238splitHere46","write(byte b)"
"558splitHere46","3163304splitHere46","List result = new ArrayList(AllProcessList);<newline46mondego>result.removeAll(RunningProcessList);<newline46mondego>"
"559splitHere46","3163304splitHere46","System.out.println"
"560splitHere46","3163469splitHere46","System.out.println(Math.log(249.0/251.0));"
"561splitHere46","3163469splitHere46","Math.Log (x,y);"
"562splitHere46","3163469splitHere46","x"
"563splitHere46","3163469splitHere46","y"
"564splitHere46","3163469splitHere46","Log(249.0/251.0)"
"565splitHere46","3163469splitHere46","Math.Log( 249.0, 251.0) == 0.998552147171426"
"566splitHere46","3163484splitHere46","<build><newline46mondego>  <resources><newline46mondego>    <resource><newline46mondego>      <directory>src/test/resources</directory><newline46mondego>      <filtering>true</filtering><newline46mondego>    </resource><newline46mondego>  </resources><newline46mondego></build><newline46mondego><newline46mondego><properties><newline46mondego>   <buildEnvironment>yourValue</buildEnvironment><newline46mondego></properties><newline46mondego>"
"567splitHere46","3163508splitHere46","REV:1995-10-31T22:27:10Z<newline46mondego>    REV:1997-11-15<newline46mondego>"
"568splitHere46","3163616splitHere46","Runnable"
"569splitHere46","3163645splitHere46","Socket.getPort()"
"570splitHere46","3163645splitHere46","Socket.getLocalPort()"
"571splitHere46","3164077splitHere46","public class IconRadioButtonEval {<newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        JFrame frame = new JFrame();<newline46mondego>        JPanel panel = new JPanel();<newline46mondego>        // Use some arbitrary working URL to an icon<newline46mondego>        URL url =<newline46mondego>                new URL(<newline46mondego>                        <doubleQuotes46>http://mikeo.co.uk/demo/sqlspatial/Images/RSS_Icon.png<doubleQuotes46>);<newline46mondego>        Icon icon = new ImageIcon(url);<newline46mondego>        JRadioButton button = new JRadioButton(icon);<newline46mondego>        panel.add(new JLabel(<doubleQuotes46>RadioButton with icon:<doubleQuotes46>));<newline46mondego>        panel.add(button);<newline46mondego>        panel.add(new JLabel(<doubleQuotes46>RadioButtonMenuItem with icon:<doubleQuotes46>));<newline46mondego>        panel.add(new JRadioButtonMenuItem(icon));<newline46mondego><newline46mondego>        frame.getContentPane().add(panel);<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        frame.pack();<newline46mondego>        frame.setVisible(true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"572splitHere46","3164343splitHere46","interface MyClassFactory<newline46mondego>{<newline46mondego>    MyClass newInstance(int x, int y);<newline46mondego>}<newline46mondego>"
"573splitHere46","3164343splitHere46","MyClass"
"574splitHere46","3164369splitHere46","protected"
"575splitHere46","3164369splitHere46","java.lang.Object"
"576splitHere46","3164369splitHere46","A"
"577splitHere46","3164369splitHere46","java.lang.Object"
"578splitHere46","3164369splitHere46","clone()"
"579splitHere46","3164369splitHere46","public"
"580splitHere46","3164369splitHere46","Cloneable"
"581splitHere46","3164369splitHere46","clone()"
"582splitHere46","3164485splitHere46","public enum FiveInstance {<newline46mondego><newline46mondego>  INSTANCE1, INSTANCE2, INSTANCE3, INSTANCE4, INSTANCE5;<newline46mondego><newline46mondego>  public void anyMethod() {}<newline46mondego><newline46mondego>}<newline46mondego>"
"583splitHere46","3164724splitHere46","public class Test extends JPanel{<newline46mondego><newline46mondego>private JTable table;<newline46mondego>private String COLUMN1 = <doubleQuotes46>COLUMN1<doubleQuotes46>;<newline46mondego>private String COLUMN2 = <doubleQuotes46>COLUMN2<doubleQuotes46>;<newline46mondego><newline46mondego>public Test() {<newline46mondego>    setLayout(new BorderLayout()); <newline46mondego>    table = new LineTable(new Object[][]{{<doubleQuotes46>1<doubleQuotes46>, <doubleQuotes46>2<doubleQuotes46>}, {<doubleQuotes46>3<doubleQuotes46>, <doubleQuotes46>4<doubleQuotes46>}}, new Object[]{COLUMN1, COLUMN2});<newline46mondego><newline46mondego>    TableColumn col = table.getColumn(COLUMN1);<newline46mondego>    col.setIdentifier(COLUMN1);<newline46mondego>    col.setHeaderValue(<doubleQuotes46>Column1<doubleQuotes46>);<newline46mondego><newline46mondego>    col = table.getColumn(COLUMN2);<newline46mondego>    col.setIdentifier(COLUMN2);<newline46mondego>    col.setHeaderValue(new ColorHeaderValue(<doubleQuotes46>Column2<doubleQuotes46>));<newline46mondego>    col.setHeaderRenderer(new ColorHeaderRenderer());<newline46mondego>    col.setCellRenderer(new LineCellRenderer());<newline46mondego><newline46mondego>    JPanel pn = new JPanel();<newline46mondego>    pn.setLayout(new BoxLayout(pn, BoxLayout.X_AXIS));<newline46mondego><newline46mondego>    pn.add(new JButton(new AbstractAction(<doubleQuotes46>Highlight Column2 in red<doubleQuotes46>){<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent e){<newline46mondego>            setColumnColor(COLUMN2, Color.RED);<newline46mondego>        }<newline46mondego>    }));<newline46mondego>    pn.add(new JButton(new AbstractAction(<doubleQuotes46>Clear Column2 header color<doubleQuotes46>){<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent e){<newline46mondego>            setColumnColor(COLUMN2, null);<newline46mondego>        }<newline46mondego>    }));<newline46mondego>    pn.add(Box.createHorizontalGlue());<newline46mondego>    add(pn, BorderLayout.NORTH);<newline46mondego>    add(new JScrollPane(table), BorderLayout.CENTER);<newline46mondego>}<newline46mondego><newline46mondego>private void setColumnColor(final String columnID, final Color cl){<newline46mondego>    SwingUtilities.invokeLater(new Runnable(){<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void run(){<newline46mondego>            Object headerValue = table.getColumn(columnID).getHeaderValue();<newline46mondego>            if(headerValue instanceof ColorHeaderValue){<newline46mondego>                ColorHeaderValue clHeaderValue = (ColorHeaderValue) headerValue;<newline46mondego>                clHeaderValue.setBrgColor(cl);<newline46mondego>                table.getTableHeader().repaint();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>private static class LineTable extends JTable{<newline46mondego><newline46mondego>    public LineTable(Object[][] rowData, Object[] columnNames) {<newline46mondego>        super(rowData, columnNames);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    protected void paintComponent(Graphics g){<newline46mondego>        super.paintComponent(g);<newline46mondego>        if (g != null){<newline46mondego>            g.drawLine(0, 0, this.getWidth(), getHeight());<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>private static class LineCellRenderer extends DefaultTableCellRenderer{<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void paintComponent(Graphics g){            <newline46mondego>        super.paintComponent(g);<newline46mondego>        if (g != null){<newline46mondego>            int halfX = getWidth()/2;<newline46mondego>            g.drawLine(halfX, 0, halfX, getHeight());<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>private static class ColorHeaderRenderer extends DefaultTableCellHeaderRenderer{<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){<newline46mondego>        Component res = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);<newline46mondego>        if (value instanceof ColorHeaderValue){<newline46mondego>            ColorHeaderValue headerValue = (ColorHeaderValue) value;<newline46mondego>            if (headerValue.getBrgColor() != null){<newline46mondego>                setBackground(headerValue.getBrgColor());<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return res;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>private static class ColorHeaderValue{<newline46mondego><newline46mondego>    private Color brgColor;<newline46mondego>    private String title;<newline46mondego><newline46mondego>    public ColorHeaderValue(String title) {<newline46mondego>        this.title = title;<newline46mondego>    }<newline46mondego><newline46mondego>    public final Color getBrgColor(){<newline46mondego>        return brgColor;<newline46mondego>    }<newline46mondego><newline46mondego>    public final void setBrgColor(Color brgColor){<newline46mondego>        this.brgColor = brgColor;<newline46mondego>    }<newline46mondego><newline46mondego>    public String toString(){<newline46mondego>        return title;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args){<newline46mondego>    JFrame frame = new JFrame(<doubleQuotes46>test<doubleQuotes46>);<newline46mondego>    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego><newline46mondego>    // Add content to the window.<newline46mondego>    frame.add(new Test());<newline46mondego><newline46mondego>    // Display the window.<newline46mondego>    frame.pack();<newline46mondego>    frame.setSize(300, 200);<newline46mondego>    frame.setVisible(true);<newline46mondego>}}<newline46mondego>"
"584splitHere46","3164907splitHere46","public class Bean implements Observable{<newline46mondego><newline46mondego>  // code to maintain listeners<newline46mondego>  private List<Listener> listeners = new ArrayList<Listener>();<newline46mondego>  public void add(Listener listener) {listeners.add(listener);}<newline46mondego>  public void remove(Listener listener) {listeners.remove(listener);}<newline46mondego><newline46mondego>  // a sample field<newline46mondego>  private int field;<newline46mondego>  public int getField() {return field;}<newline46mondego>  public int setField(int value) {<newline46mondego>    field = value;<newline46mondego>    fire(<doubleQuotes46>field<doubleQuotes46>);        <newline46mondego>  }<newline46mondego><newline46mondego>  // notification code<newline46mondego>  private void fire(String attribute) {<newline46mondego>    for (Listener listener:listeners) {<newline46mondego>      fieldChanged(this, attribute);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"585splitHere46","3164907splitHere46","public interface Listener {<newline46mondego>  public void fieldChanged(Object source, String attrbute);<newline46mondego>}<newline46mondego>"
"586splitHere46","3164907splitHere46","public interface Observable {<newline46mondego>  public void add(Listener listener);<newline46mondego>  public void remove(Listener listener);<newline46mondego>}<newline46mondego>"
"587splitHere46","3164907splitHere46","public class Sender implements Listener {<newline46mondego><newline46mondego>  public void register(Observable observable) {observable.add(this);}<newline46mondego>  public void unregister(Observable observable) {observable.remove(this);}<newline46mondego><newline46mondego>  public void fieldChanged(Object source, String attribute) {<newline46mondego>    sendEmail(source, attribute); // this has to be implemented<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"588splitHere46","3164924splitHere46","Object.clone"
"589splitHere46","3165241splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><LinearLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>      android:orientation=<doubleQuotes46>vertical<doubleQuotes46><newline46mondego>      android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>      android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>><newline46mondego>    <ListView android:id=<doubleQuotes46>@android:id/list<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46>/><newline46mondego>    <TextView android:id=<doubleQuotes46>@android:id/empty<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:text=<doubleQuotes46>@string/noresults<doubleQuotes46>/><newline46mondego></LinearLayout><newline46mondego>"
"590splitHere46","3165283splitHere46","CacheKey"
"591splitHere46","3165283splitHere46","map.put(new CacheKey(keyA, keyB, keyC), value);<newline46mondego>map.get(new CacheKey(keyA, keyB, keyC));<newline46mondego>//etc...<newline46mondego>"
"592splitHere46","3165283splitHere46","equals()"
"593splitHere46","3165283splitHere46","hashcode()"
"594splitHere46","3165283splitHere46","CacheKey"
"595splitHere46","3165359splitHere46","org.apache.tools.ant.Task"
"596splitHere46","3165390splitHere46","<VideoView <newline46mondego>  android:id=<doubleQuotes46>@+id/VideoTest<doubleQuotes46> <newline46mondego>  android:background=<doubleQuotes46>#FF00FF00<doubleQuotes46> <newline46mondego>  android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>  android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46>><newline46mondego></VideoView><newline46mondego>"
"597splitHere46","3165390splitHere46","<VideoView <newline46mondego>  android:id=<doubleQuotes46>@+id/VideoTest<doubleQuotes46> <newline46mondego>  android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>  android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46>><newline46mondego></VideoView><newline46mondego>"
"598splitHere46","3165395splitHere46","ONE_YEAR_AS_MILLISECONDS"
"599splitHere46","3165395splitHere46","private static long ONE_YEAR_AS_MILLISECONDS = 365L * 24L * 60L * 60L * 1000L;<newline46mondego>"
"600splitHere46","3165395splitHere46","Calendar"
"601splitHere46","3165395splitHere46","Date d = new Date(System.currentTimeMillis() - someTimeBetween25And50YearsInMilliSeconds);<newline46mondego><newline46mondego>SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>dd/MM/yyyy<doubleQuotes46>);<newline46mondego>return sdf.format(d);<newline46mondego>"
"602splitHere46","3165733splitHere46","IllegalStateException"
"603splitHere46","3165733splitHere46","IllegalStateException"
"604splitHere46","3165733splitHere46","InvalidOperationException"
"605splitHere46","3165733splitHere46","IllegalArgumentException"
"606splitHere46","3165733splitHere46","UnsupportedOperationException"
"607splitHere46","3165733splitHere46","IllegalStateException"
"608splitHere46","3165802splitHere46","b"
"609splitHere46","3165802splitHere46","b == 0"
"610splitHere46","3165802splitHere46","while (x!=0){<newline46mondego>  b<<=1;<newline46mondego>  b|=( x &1);<newline46mondego>  x>>=1;<newline46mondego>}<newline46mondego>"
"611splitHere46","3165860splitHere46","static {}"
"612splitHere46","3165860splitHere46","private static final int i;<newline46mondego>static {<newline46mondego>    establishDatabaseConnection();<newline46mondego>    i = readIntFromDatabase;<newline46mondego>    closeDatabaseConnection();<newline46mondego>}<newline46mondego>"
"613splitHere46","3166173splitHere46","BufferedImage image[] = new BufferedImage[numImages];<newline46mondego>for (int i = 0; i < numImages; i++) {<newline46mondego>    SeekableStream ss = new FileSeekableStream(input_dir + file[i]);<newline46mondego>    ImageDecoder decoder = ImageCodec.createImageDecoder(<doubleQuotes46>tiff<doubleQuotes46>, ss, null);<newline46mondego>    PlanarImage op = new NullOpImage(decoder.decodeAsRenderedImage(0), <newline46mondego>            null, OpImage.OP_IO_BOUND, null);<newline46mondego>    image[i] = op.getAsBufferedImage();<newline46mondego>}<newline46mondego>"
"614splitHere46","3166173splitHere46","TIFFEncodeParam params = new TIFFEncodeParam();<newline46mondego>OutputStream out = new FileOutputStream(output_dir + image_name + <doubleQuotes46>.tif<doubleQuotes46>); <newline46mondego>ImageEncoder encoder = ImageCodec.createImageEncoder(<doubleQuotes46>tiff<doubleQuotes46>, out, params);<newline46mondego>Vector vector = new Vector();   <newline46mondego>for (int i = 0; i < numImages; i++) {<newline46mondego>    vector.add(image[i]); <newline46mondego>}<newline46mondego>params.setExtraImages(vector.iterator()); <newline46mondego>encoder.encode(image[0]); <newline46mondego>out.close(); <newline46mondego>"
"615splitHere46","3166190splitHere46","GUIBundle"
"616splitHere46","3166190splitHere46","bundle"
"617splitHere46","3166190splitHere46","GUIBundle.getString()"
"618splitHere46","3166246splitHere46","server_loop<newline46mondego>{<newline46mondego>    client_socket = server_socket.accept()<newline46mondego>    TalkToClientUntilConnectionCloses(client_socket)<newline46mondego>}<newline46mondego>"
"619splitHere46","3166246splitHere46","server_loop<newline46mondego>{<newline46mondego>    client_socket = server_socket.accept()<newline46mondego>    StartClientThread(client_socket)<newline46mondego>}<newline46mondego>"
"620splitHere46","3166339splitHere46","Runtime rt = Runtime.getRuntime();<newline46mondego>    Process pr;<newline46mondego>    File myFolder = new File(<doubleQuotes46>C:\\Temp<doubleQuotes46>);<newline46mondego>    pr = rt.exec(new File(myFolder, <doubleQuotes46>myExec.bat<doubleQuotes46>).getAbsolutePath(), null, myFolder);<newline46mondego>    pr.waitFor();<newline46mondego>    pr.destroy();<newline46mondego>"
"621splitHere46","3166421splitHere46","String s = <doubleQuotes46><amy=amy>(bob=bob)[carol=carol]<doubleQuotes46>;<newline46mondego>Pattern p = Pattern.compile(<newline46mondego>  <doubleQuotes46>(?=[<(\\[]((\\w+)=\\2))(?:<\\1>|\\(\\1\\)|\\[\\1\\])<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(s);<newline46mondego><newline46mondego>while(m.find())<newline46mondego>{<newline46mondego>  System.out.printf(<doubleQuotes46>found %s in %s%n<doubleQuotes46>, m.group(2), m.group());<newline46mondego>}<newline46mondego>"
"622splitHere46","3166421splitHere46","found amy in <amy=amy><newline46mondego>found bob in (bob=bob)<newline46mondego>found carol in [carol=carol]<newline46mondego>"
"623splitHere46","3166421splitHere46","<doubleQuotes46>(?=[<(\\[{]((\\w+)=\\2))(?:<\\1>|\\(\\1\\)|\\[\\1\\]|\\{\\1\\})<doubleQuotes46><newline46mondego>"
"624splitHere46","3166434splitHere46","String s = <doubleQuotes46>1a2b3c4d5<doubleQuotes46>;<newline46mondego>System.out.println(s.replaceAll(<doubleQuotes46>.(.)?<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>));<newline46mondego>// prints <doubleQuotes46>abcd<doubleQuotes46><newline46mondego>"
"625splitHere46","3166434splitHere46","<doubleQuotes46>null<doubleQuotes46>"
"626splitHere46","3166434splitHere46","Matcher.group(int)"
"627splitHere46","3166434splitHere46","null"
"628splitHere46","3166434splitHere46","String s = <doubleQuotes46>1a2b3c4d5<doubleQuotes46>;<newline46mondego>System.out.println(s.replaceAll(<doubleQuotes46>(.).<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>));<newline46mondego>// prints <doubleQuotes46>12345<doubleQuotes46><newline46mondego>"
"629splitHere46","3166434splitHere46","?"
"630splitHere46","3166434splitHere46","String s = <doubleQuotes46>1a2b3c4d5<doubleQuotes46>;<newline46mondego>System.out.println(s.replaceAll(<doubleQuotes46>(.).<doubleQuotes46>, <doubleQuotes46>($1)<doubleQuotes46>));<newline46mondego>// prints <doubleQuotes46>(1)(2)(3)(4)5<doubleQuotes46><newline46mondego>"
"631splitHere46","3166434splitHere46","String s = <doubleQuotes46>1a2b3c4d5<doubleQuotes46>;<newline46mondego>System.out.println(s.replaceAll(<doubleQuotes46>(.).?<doubleQuotes46>, <doubleQuotes46>($1)<doubleQuotes46>));<newline46mondego>// prints <doubleQuotes46>(1)(2)(3)(4)(5)<doubleQuotes46><newline46mondego>"
"632splitHere46","3166537splitHere46","http://server/invoices/1"
"633splitHere46","3166537splitHere46","<invoice><newline46mondego> <items><newline46mondego>  <item>apple</item><newline46mondego>  <item>banana</item><newline46mondego> <items><newline46mondego> <customer>robert</customer><newline46mondego> <amount>5.00</amount><newline46mondego></invoice><newline46mondego>"
"634splitHere46","3166717splitHere46","@ManagedBean(name=<doubleQuotes46>beanA<doubleQuotes46>) @RequestScoped<newline46mondego>public class BeanA implements Serializable {<newline46mondego>  @ManagedProperty(value=<doubleQuotes46>#{beanB}<doubleQuotes46>) <newline46mondego>  private BeanB beanB;<newline46mondego>  public void setBeanB(BeanB b) { this.beanB = b; }<newline46mondego>  public BeanB getBeanB() { return beanB; }<newline46mondego>}<newline46mondego><newline46mondego>@ManagedBean(name=<doubleQuotes46>beanB<doubleQuotes46>) @RequestScoped<newline46mondego>public class BeanB implements Serializable {}<newline46mondego>"
"635splitHere46","3166717splitHere46","faces-config.xml"
"636splitHere46","3166935splitHere46","public class Tuple<A extends Comparable<? super A>, B extends Comparable<? super A>> implements Comparable<Tuple<A, B>> {<newline46mondego>    A valueA;<newline46mondego>    B valueB;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int compareTo(Tuple<A, B> tuple) {<newline46mondego>        // Implement comparison logic<newline46mondego>        return 0;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"637splitHere46","3167049splitHere46","public boolean isNetworkAvailable(Context c) {<newline46mondego>    ConnectivityManager cm = (ConnectivityManager) c.getSystemService(Context.CONNECTIVITY_SERVICE);<newline46mondego>    TelephonyManager tm = (TelephonyManager) c.getSystemService(Context.TELEPHONY_SERVICE);<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"638splitHere46","3167049splitHere46","helperClassObj.isNetworkAvailable(YourActivity.this);<newline46mondego>"
"639splitHere46","3167306splitHere46","Intent intent = new Intent(context, EditActivity.class);<newline46mondego>context.startActivity(intent);<newline46mondego>"
"640splitHere46","3167306splitHere46","android.intent.category.DEFAULT"
"641splitHere46","3167306splitHere46","<activity android:name=<doubleQuotes46>EditActivity<doubleQuotes46>><newline46mondego>  <intent-filter><newline46mondego>    <category android:name=<doubleQuotes46>android.intent.category.DEFAULT<doubleQuotes46> /><newline46mondego>    <action android:name=<doubleQuotes46>my.package.EDIT<doubleQuotes46> /><newline46mondego>  </intent-filter><newline46mondego></activity><newline46mondego>"
"642splitHere46","3167322splitHere46","pnlholding.setOpaque(false); <newline46mondego>pnlholding.setBounds(0, 00, 330, 143); <newline46mondego>pnlholding.add(lblholding); <newline46mondego><newline46mondego>//plane <newline46mondego>pnlholding.setOpaque(false); <newline46mondego>pnlholding.setBounds(0, 0, 48, 60); <newline46mondego>pnlholding.add(lblplane); <newline46mondego>"
"643splitHere46","3167432splitHere46","Command"
"644splitHere46","3167432splitHere46","Command"
"645splitHere46","3167562splitHere46","throw new IllegalStateException(<doubleQuotes46>You cannot call this method until a card has been drawn<doubleQuotes46>);<newline46mondego>"
"646splitHere46","3168129splitHere46","hibernate.properties"
"647splitHere46","3168129splitHere46","hibernate.connection.driver_class = org.postgresql.Driver<newline46mondego>hibernate.connection.url = jdbc:postgresql://localhost/mydatabase<newline46mondego>hibernate.connection.username = myuser<newline46mondego>hibernate.connection.password = secret<newline46mondego>hibernate.c3p0.min_size=5<newline46mondego>hibernate.c3p0.max_size=20<newline46mondego>hibernate.c3p0.timeout=1800<newline46mondego>hibernate.c3p0.max_statements=50<newline46mondego>hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect<newline46mondego>"
"648splitHere46","3168129splitHere46","hibernate.properties"
"649splitHere46","3168129splitHere46","hibernate.cfg.xml"
"650splitHere46","3168129splitHere46","new AnnotationConfiguration().configure();<newline46mondego>"
"651splitHere46","3168129splitHere46",".properties"
"652splitHere46","3168129splitHere46","hibernate.cfg.xml"
"653splitHere46","3168129splitHere46","hibernate.properties"
"654splitHere46","3168431splitHere46","$.ajax({<newline46mondego>    type: 'post',<newline46mondego>    data: JSON.stringify(lookup),<newline46mondego>    contentType: 'application/json',<newline46mondego>    dataType: 'json'<newline46mondego>});<newline46mondego>"
"655splitHere46","3168439splitHere46","CountdownLatch latch;<newline46mondego><newline46mondego>void run(){<newline46mondego>   //...<newline46mondego>   this.latch = new CountDownLatch(queueOfA.size());<newline46mondego>   Thread bThread = new Thread(b);<newline46mondego>   bThread.start();<newline46mondego>   latch.await();<newline46mondego>  //.. catch InterruptedException etc..<newline46mondego>}<newline46mondego><newline46mondego>void notifyDone(A a) {<newline46mondego>    this.latch.countDown();<newline46mondego>}<newline46mondego>"
"656splitHere46","3168439splitHere46","void run(){<newline46mondego>     //...<newline46mondego>     C c = ...; // passed in from somewhere<newline46mondego>     if ( goBackToTheQueueAgain == true ){<newline46mondego>         setChanged();<newline46mondego>         notifyObservers();//notify C that to let B add itself back<newline46mondego>     }<newline46mondego>     else<newline46mondego>         c.notifyDone(this);<newline46mondego>}<newline46mondego>"
"657splitHere46","3168439splitHere46","interface QueueHandler<T><newline46mondego>{<newline46mondego>    void requeue(T t);<newline46mondego>    void completed(T t);<newline46mondego>}<newline46mondego>"
"658splitHere46","3168465splitHere46","InterruptedException"
"659splitHere46","3168465splitHere46","InterruptedException"
"660splitHere46","3168465splitHere46","// Run while not interrupted.<newline46mondego>while(!(Thread.interrupted())<newline46mondego>{<newline46mondego>    try<newline46mondego>    {<newline46mondego>        // Do whatever here.<newline46mondego>    }<newline46mondego>    catch(InterruptedException e)<newline46mondego>    {<newline46mondego>        // This will cause the current thread's interrupt flag to be set.<newline46mondego>        Thread.currentThread().interrupt();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// Perform cleanup and exit thread.<newline46mondego>"
"661splitHere46","3168465splitHere46","InterruptedException"
"662splitHere46","3168465splitHere46","interrupt()"
"663splitHere46","3168637splitHere46","table.setShowGrid(false);<newline46mondego>"
"664splitHere46","3168637splitHere46","table.setShowHorizontalLines(false);<newline46mondego>table.setShowVerticalLines(false);<newline46mondego>"
"665splitHere46","3168637splitHere46","table.setGridColor(color)<newline46mondego>"
"666splitHere46","3168952splitHere46","AbstractParent(Class<E> enumClass)<newline46mondego>{<newline46mondego>   this.enumClass = enumClass;<newline46mondego>}<newline46mondego>"
"667splitHere46","3168952splitHere46","public E[] getValues()<newline46mondego>{<newline46mondego>    return this.enumClass.getEnumConstants();<newline46mondego>}<newline46mondego>"
"668splitHere46","3168952splitHere46","E"
"669splitHere46","3168952splitHere46","Class<E>"
"670splitHere46","3168952splitHere46","AbstractParent(E enumValue)<newline46mondego>{<newline46mondego>   this.enumClass = enumValue.getClass();<newline46mondego>}<newline46mondego>"
"671splitHere46","3169147splitHere46","null"
"672splitHere46","3169147splitHere46","scala> object O { def m(i: Int, s: String): String = s * i; def m(i: Int, l: List[String]): String = l.mkString(<doubleQuotes46>:<doubleQuotes46>) * i }<newline46mondego>defined module O<newline46mondego><newline46mondego>scala> O.m(23, null)<newline46mondego><console>:7: error: ambiguous reference to overloaded definition,<newline46mondego>both method m in object O of type (i: Int,l: List[String])String<newline46mondego>and  method m in object O of type (i: Int,s: String)String<newline46mondego>match argument types (Int,Null)<newline46mondego>       O.m(23, null)<newline46mondego>         ^<newline46mondego><newline46mondego>scala> O.m(23, null: String)<newline46mondego>res4: String = nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull<newline46mondego><newline46mondego>scala> O.m(23, null: List[String])<newline46mondego>java.lang.NullPointerException<newline46mondego>        at O$.m(<console>:5)<newline46mondego>        at .<init>(<console>:7)<newline46mondego>        at .<clinit>(<console>)<newline46mondego>        at RequestResult$.<init>(<console>:9)<newline46mondego>        at RequestResult$.<clinit>(<console>)<newline46mondego>        at RequestResult$scala_repl_result(<console>)<newline46mondego>        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<newline46mondego>        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<newline46mondego>        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<newline46mondego>        at java.lang.reflect.Method.invoke(Method.java:597)<newline46mondego>        at scala.tools.nsc.Interpreter$Request$$anonfun$loadAndRun$1$$anonfun$apply$18.apply(Interpreter.scala:981)<newline46mondego>        at scala.tools.nsc.Interpreter$Request$$anonfun$loadAndRun$1$$anonfun$apply$18.apply(Interpreter.scala:981)<newline46mondego>        at scala.util.control.Exception$Catch.apply(Exception.scala:7...<newline46mondego>scala><newline46mondego>"
"673splitHere46","3169267splitHere46","public void process(String filename) throws IOException {<newline46mondego>    process(filename, new FileInputStream(new File(filename)));<newline46mondego>}<newline46mondego><newline46mondego>private void process(String filename, InputStream inputStream) throws IOException {<newline46mondego>    ZipInputStream zis = new ZipInputStream(inputStream);<newline46mondego>    ZipEntry ze = null;<newline46mondego><newline46mondego>    while ((ze = zis.getNextEntry()) != null) {<newline46mondego>        if (ze.isDirectory()) {<newline46mondego>            continue;<newline46mondego>        }<newline46mondego><newline46mondego>        System.out.println(ze.getName() + <doubleQuotes46> <doubleQuotes46> + ze.getSize());<newline46mondego><newline46mondego>        if (ze.getName().endsWith(<doubleQuotes46>.jar<doubleQuotes46>)) {<newline46mondego>            long size = ze.getSize();<newline46mondego><newline46mondego>            byte[] b = new byte[(int) size];<newline46mondego><newline46mondego>            int rb = 0;<newline46mondego>            int chunk = 0;<newline46mondego>            while (((int) size - rb) > 0) {<newline46mondego>                chunk = zis.read(b, rb, (int) size - rb);<newline46mondego>                if (chunk == -1) {<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>                rb += chunk;<newline46mondego>            }<newline46mondego><newline46mondego>            process(ze.getName(), new ByteArrayInputStream(b));<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"674splitHere46","3169635splitHere46","ServletRequest.getParameter"
"675splitHere46","3169635splitHere46","req.getParameter('Ntt');<newline46mondego>"
"676splitHere46","3169644splitHere46","Boolean"
"677splitHere46","3169644splitHere46","boolean"
"678splitHere46","3169644splitHere46","Boolean"
"679splitHere46","3169644splitHere46","public static Boolean valueOf(boolean b) {<newline46mondego>    return b ? Boolean.TRUE : Boolean.FALSE;<newline46mondego>}<newline46mondego>"
"680splitHere46","3169770splitHere46","processing.core.PApplet"
"681splitHere46","3169770splitHere46","java.applet.Applet"
"682splitHere46","3169770splitHere46","PApplet"
"683splitHere46","3169770splitHere46","java.awt.Frame"
"684splitHere46","3169770splitHere46","Processing"
"685splitHere46","3169770splitHere46","Frame"
"686splitHere46","3169770splitHere46","JFrame"
"687splitHere46","3169770splitHere46","PApplet"
"688splitHere46","3169770splitHere46","JFrame"
"689splitHere46","3170136splitHere46","blah"
"690splitHere46","3170136splitHere46","static"
"691splitHere46","3170136splitHere46","blah"
"692splitHere46","3170136splitHere46","func()"
"693splitHere46","3170136splitHere46","blah"
"694splitHere46","3170136splitHere46","new A()"
"695splitHere46","3170136splitHere46","blah"
"696splitHere46","3170174splitHere46","Class#getInstance()"
"697splitHere46","3170174splitHere46","Class#newInstance()"
"698splitHere46","3170174splitHere46","new"
"699splitHere46","3170174splitHere46","Class"
"700splitHere46","3170174splitHere46","new"
"701splitHere46","3170174splitHere46","Object instance = Object.class.newInstance();<newline46mondego>"
"702splitHere46","3170174splitHere46","Object instance = new Object();<newline46mondego>"
"703splitHere46","3170174splitHere46","Class#newInstance()"
"704splitHere46","3170174splitHere46","getInstance()"
"705splitHere46","3170174splitHere46","new"
"706splitHere46","3170174splitHere46","Class#newInstance()"
"707splitHere46","3170184splitHere46","System.exit(0);"
"708splitHere46","3170540splitHere46","request.getSession()"
"709splitHere46","3170540splitHere46","HttpSession"
"710splitHere46","3171090splitHere46","ArrayList"
"711splitHere46","3171090splitHere46","List<Integer> newList = new ArrayList<Integer>(oldList);<newline46mondego>"
"712splitHere46","3171090splitHere46","List"
"713splitHere46","3171488splitHere46","1"
"714splitHere46","3171488splitHere46","0"
"715splitHere46","3171510splitHere46","you distribute binaries to X => you distribute sources to X<newline46mondego>"
"716splitHere46","3171510splitHere46","libmysqlclient"
"717splitHere46","3171510splitHere46","*"
"718splitHere46","3171628splitHere46","int comparison"
"719splitHere46","3171688splitHere46","CellValue myValue = (CellValue)value;<newline46mondego>HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(<newline46mondego>        Color.green);<newline46mondego>textField.getHighlighter().removeAllHighlights();<newline46mondego>try {<newline46mondego>    textField.getHighlighter().addHighlight(myValue.highlightStart, myValue.highlightEnd, painter);<newline46mondego>} catch (BadLocationException e) {<newline46mondego>    System.out.println(<doubleQuotes46>Miss<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"720splitHere46","3171688splitHere46","public class MyModel extends AbstractTableModel {<newline46mondego>    class CellValue {<newline46mondego>        String value;<newline46mondego>        int highlightStart;<newline46mondego>        int highlightEnd;<newline46mondego><newline46mondego>        CellValue(String val) {<newline46mondego>            this.value = val;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public String toString() {<newline46mondego>            return value;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    CellValue[][] values = new CellValue[2][7];<newline46mondego><newline46mondego>    public MyModel() {<newline46mondego>        for(int i = 0; i < 2; i++) {<newline46mondego>            for(int j=0; j < 7; j++) {<newline46mondego>                values[i][j] = new CellValue(i + <doubleQuotes46>:<doubleQuotes46> + j);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int getColumnCount() {<newline46mondego>        return 7;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int getRowCount() {<newline46mondego>        return 2;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Object getValueAt(int rowIndex, int columnIndex) {<newline46mondego>        return values[rowIndex][columnIndex];<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"721splitHere46","3171688splitHere46","public class Main {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        JFrame frame = new JFrame();<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        frame.setSize(new Dimension(500,500));<newline46mondego><newline46mondego>        final JTable table = new JTable(new MyModel());<newline46mondego>        for(int i =0; i < 7; i++) {<newline46mondego>            table.getColumnModel().getColumn(i).setCellRenderer(new tblCalendarRenderer());<newline46mondego>        }<newline46mondego><newline46mondego>        table.addMouseListener(new MouseAdapter() {<newline46mondego>            @Override<newline46mondego>            public void mouseClicked(MouseEvent e) {<newline46mondego>                int row = table.rowAtPoint(e.getPoint());<newline46mondego>                int column = table.columnAtPoint(e.getPoint());<newline46mondego><newline46mondego>                Object obj = table.getValueAt(row, column);<newline46mondego>                System.out.println(<doubleQuotes46>value <doubleQuotes46> + obj);<newline46mondego>                CellValue cellValue = (CellValue)obj;<newline46mondego>                cellValue.highlightEnd++;<newline46mondego>                table.repaint();<newline46mondego>            }<newline46mondego>        });<newline46mondego>        table.setRowHeight(50);<newline46mondego>        JScrollPane scp = new JScrollPane(table);<newline46mondego>        frame.add(scp);<newline46mondego>        frame.setVisible(true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"722splitHere46","3171776splitHere46","-- <newline46mondego>-- Representation of RSA private key with information for the CRT algorithm.<newline46mondego>--<newline46mondego>RSAPrivateKey ::= SEQUENCE {<newline46mondego>    version           Version, <newline46mondego>    modulus           INTEGER,  -- n<newline46mondego>    publicExponent    INTEGER,  -- e<newline46mondego>    privateExponent   INTEGER,  -- d<newline46mondego>    prime1            INTEGER,  -- p<newline46mondego>    prime2            INTEGER,  -- q<newline46mondego>    exponent1         INTEGER,  -- d mod (p-1)<newline46mondego>    exponent2         INTEGER,  -- d mod (q-1) <newline46mondego>    coefficient       INTEGER,  -- (inverse of q) mod p<newline46mondego>    otherPrimeInfos   OtherPrimeInfos OPTIONAL <newline46mondego>}<newline46mondego><newline46mondego>Version ::= INTEGER { two-prime(0), multi(1) }<newline46mondego>    (CONSTRAINED BY {-- version must be multi if otherPrimeInfos present --})<newline46mondego><newline46mondego>OtherPrimeInfos ::= SEQUENCE SIZE(1..MAX) OF OtherPrimeInfo<newline46mondego><newline46mondego><newline46mondego>OtherPrimeInfo ::= SEQUENCE {<newline46mondego>    prime             INTEGER,  -- ri<newline46mondego>    exponent          INTEGER,  -- di<newline46mondego>    coefficient       INTEGER   -- ti<newline46mondego>}<newline46mondego>"
"723splitHere46","3171776splitHere46","getEncoded()"
"724splitHere46","3171980splitHere46","uncaughtException"
"725splitHere46","3172631splitHere46","Vector"
"726splitHere46","3172631splitHere46","Vector"
"727splitHere46","3172914splitHere46","WEB-INF/lib"
"728splitHere46","3172914splitHere46","<packaging>war</packaging>"
"729splitHere46","3172914splitHere46","WEB-INF/lib"
"730splitHere46","3172943splitHere46","class SystemIPChanger implements Runnable {<newline46mondego>      Collection<WorkerThread> pool;<newline46mondego><newline46mondego>      public void changeIP() {<newline46mondego>          pauseAllThreads();<newline46mondego>          changeIP();<newline46mondego>          resumeThreads();<newline46mondego>      }<newline46mondego><newline46mondego>      void pauseAllThreads() {<newline46mondego>          CountDownLatch latch = new CountDownLatch(pool.size());<newline46mondego>          for (WorkerThread worker : pool) {<newline46mondego>              worker.setPause(latch);<newline46mondego>          }<newline46mondego>          latch.await();          <newline46mondego>      }<newline46mondego><newline46mondego>      void resumeThreads() {<newline46mondego>          for (WorkerThread worker : pool) {<newline46mondego>              worker.setPause(null);<newline46mondego>          }<newline46mondego><newline46mondego>      }<newline46mondego>  }<newline46mondego><newline46mondego>  class WorkerThread implements Runnable {<newline46mondego>    private CountDownLatch pause;<newline46mondego><newline46mondego>    public void run() {<newline46mondego>        while (...) {<newline46mondego>            pause();<newline46mondego>            doRealWork(); <newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    synchronized void pause() {<newline46mondego>        CountdownLatch latch = pause;<newline46mondego>        if (latch!=null) {<newline46mondego>           latch.countDown();<newline46mondego>           while (pause==latch) {<newline46mondego>               wait();<newline46mondego>           }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public synchronized void setPause(CountDownLatch latch) {<newline46mondego>        this.pause = latch;<newline46mondego>        notifyAll();<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"731splitHere46","3173041splitHere46","invokeLater()"
"732splitHere46","3173041splitHere46","wait()"
"733splitHere46","3173041splitHere46","wait()"
"734splitHere46","3173295splitHere46","BufferedReader input = new BufferedReader(new FileReader(filePath));<newline46mondego>List<String> strings = new ArrayList<String>();<newline46mondego>try {<newline46mondego>  String line = null;<newline46mondego>  while (( line = input.readLine()) != null){<newline46mondego>    strings.add(line);<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>catch (FileNotFoundException e) {<newline46mondego>    System.err.println(<doubleQuotes46>Error, file <doubleQuotes46> + filePath + <doubleQuotes46> didn't exist.<doubleQuotes46>);<newline46mondego>}<newline46mondego>finally {<newline46mondego>    input.close();<newline46mondego>}<newline46mondego><newline46mondego>String[] lineArray = strings.toArray(new String[]{});<newline46mondego><newline46mondego>JComboBox comboBox = new JComboBox(lineArray);<newline46mondego>"
"735splitHere46","3173305splitHere46","CharStreams"
"736splitHere46","3173305splitHere46","Reader"
"737splitHere46","3173305splitHere46","Writer"
"738splitHere46","3173305splitHere46","InputSupplier<InputStreamReader> newReaderSupplier(<newline46mondego>    InputSupplier<? extends InputStream> in, Charset charset)<newline46mondego>"
"739splitHere46","3173305splitHere46","InputStream"
"740splitHere46","3173305splitHere46","new BufferedReader(new InputStreamReader(in, charset))"
"741splitHere46","3173305splitHere46","InputSupplier"
"742splitHere46","3173305splitHere46","InputStream"
"743splitHere46","3173305splitHere46","Iterable"
"744splitHere46","3173305splitHere46","Iterator"
"745splitHere46","3173305splitHere46","Enumeration"
"746splitHere46","3173305splitHere46","InputSupplier"
"747splitHere46","3173305splitHere46","File"
"748splitHere46","3173305splitHere46","FileInputStream"
"749splitHere46","3173305splitHere46","InputSupplier"
"750splitHere46","3173305splitHere46","InputStream"
"751splitHere46","3173305splitHere46","CharStreams"
"752splitHere46","3173305splitHere46","Reader"
"753splitHere46","3173305splitHere46","InputStream"
"754splitHere46","3173401splitHere46","TextField textField = new TextField(<doubleQuotes46><doubleQuotes46>, 20);<newline46mondego>"
"755splitHere46","3173401splitHere46","setEnabled();<newline46mondego>"
"756splitHere46","3173403splitHere46","CardSet"
"757splitHere46","3173403splitHere46","CardSet"
"758splitHere46","3173403splitHere46","Card"
"759splitHere46","3173403splitHere46","Observable"
"760splitHere46","3173403splitHere46","Observer"
"761splitHere46","3173403splitHere46","update()"
"762splitHere46","3173403splitHere46","EventListenerList"
"763splitHere46","3173518splitHere46","Collections.sort"
"764splitHere46","3173518splitHere46","Comparator"
"765splitHere46","3173518splitHere46","Collections.sort(mystuff, new Comparator<String[]>() {<newline46mondego>    public int compare(String[] x, String[] y) {<newline46mondego>        if(x.length < y.length) {<newline46mondego>            return -1;<newline46mondego>        } else if(x.length == y.length) {<newline46mondego>            return 0;<newline46mondego>        } else {<newline46mondego>            return 1;<newline46mondego>        }<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"766splitHere46","3173518splitHere46","import java.util.*;<newline46mondego><newline46mondego>public class Bla {                         <newline46mondego>    public static void main(String[] args) {<newline46mondego>        // Create list<newline46mondego>        List<String[]> mystuff = new ArrayList<String[]>();<newline46mondego>        mystuff.add(new String[] {<doubleQuotes46>lilu<doubleQuotes46>, <doubleQuotes46>lolo<doubleQuotes46>});<newline46mondego>        mystuff.add(new String[] {<doubleQuotes46>lala<doubleQuotes46>});<newline46mondego>        mystuff.add(new String[] {<doubleQuotes46>lila<doubleQuotes46>, <doubleQuotes46>blabla<doubleQuotes46>, <doubleQuotes46>pfirsichkuchen<doubleQuotes46>});<newline46mondego><newline46mondego>        // Sort list<newline46mondego>        Collections.sort(mystuff, new Comparator<String[]>() {<newline46mondego>            public int compare(String[] x, String[] y) {<newline46mondego>                if(x.length < y.length) {<newline46mondego>                    return -1;<newline46mondego>                } else if(x.length == y.length) {<newline46mondego>                    return 0;<newline46mondego>                } else {<newline46mondego>                    return 1;<newline46mondego>                }<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        // Output list<newline46mondego>        for(String[] strs : mystuff) {<newline46mondego>            System.out.println(Arrays.toString(strs));<newline46mondego>        }<newline46mondego>    }   <newline46mondego>}<newline46mondego>"
"767splitHere46","3173778splitHere46","if (c == '\\')<newline46mondego>"
"768splitHere46","3174056splitHere46","new ProcessBuilder(<doubleQuotes46>sh<doubleQuotes46>, <doubleQuotes46>-c<doubleQuotes46>, <doubleQuotes46>java Program <doubleQuotes46> + cmdLine).start();<newline46mondego>"
"769splitHere46","3174394splitHere46","List"
"770splitHere46","3174394splitHere46","Set"
"771splitHere46","3174394splitHere46","private List matches = new Matches();<newline46mondego>"
"772splitHere46","3174394splitHere46","PersistentList"
"773splitHere46","3174394splitHere46","PersistentSet"
"774splitHere46","3174394splitHere46","PersistentBag"
"775splitHere46","3174394splitHere46","List"
"776splitHere46","3174394splitHere46","Matches"
"777splitHere46","3174394splitHere46","getMatchesCollection()"
"778splitHere46","3174394splitHere46","public getMatchesCollection() {<newline46mondego>    return new Matches(matches);<newline46mondego> }<newline46mondego>"
"779splitHere46","3174394splitHere46","Matches"
"780splitHere46","3174394splitHere46","ForwardingList"
"781splitHere46","3174394splitHere46","public class Matches extends ForwardingList {<newline46mondego>    private List<Match> matches;<newline46mondego>    public Matches(List<Match> matches) { this.matches = matches; }<newline46mondego>    public List<Match> delegate() { return matches; }<newline46mondego>    // define your additional methods<newline46mondego>}<newline46mondego>"
"782splitHere46","3174394splitHere46","ForwardingList"
"783splitHere46","3174394splitHere46","List"
"784splitHere46","3174422splitHere46","java.util.Map"
"785splitHere46","3174422splitHere46","get(key)"
"786splitHere46","3174422splitHere46","MessageSource"
"787splitHere46","3174422splitHere46","Map"
"788splitHere46","3174422splitHere46","msg"
"789splitHere46","3174422splitHere46","${msg.myKey}"
"790splitHere46","3174422splitHere46","Map"
"791splitHere46","3174422splitHere46","public class I18nShorthandInterceptor extends HandlerInterceptorAdapter {<newline46mondego><newline46mondego>    private static final Logger logger = Logger.getLogger(I18nShorthandInterceptor.class);<newline46mondego><newline46mondego>    @Autowired<newline46mondego>    private MessageSource messageSource;<newline46mondego><newline46mondego>    @Autowired<newline46mondego>    private LocaleResolver localeResolver;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean preHandle(HttpServletRequest request,<newline46mondego>            HttpServletResponse response, Object handler) throws Exception {<newline46mondego><newline46mondego>        request.setAttribute(<doubleQuotes46>msg<doubleQuotes46>, new DelegationMap(localeResolver.resolveLocale(request)));<newline46mondego><newline46mondego>        return true;<newline46mondego>    }<newline46mondego><newline46mondego>    private class DelegationMap extends AbstractMap<String, String> {<newline46mondego>        private final Locale locale;<newline46mondego><newline46mondego>        public DelegationMap(Locale locale) {<newline46mondego>            this.locale = locale;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public String get(Object key) {<newline46mondego>            try {<newline46mondego>                return messageSource.getMessage((String) key, null, locale);<newline46mondego>            } catch (NoSuchMessageException ex) {<newline46mondego>                logger.warn(ex.getMessage());<newline46mondego>                return (String) key;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        @Override<newline46mondego>        public Set<Map.Entry<String, String>> entrySet() {<newline46mondego>            // no need to implement this<newline46mondego>            return null;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"792splitHere46","3174438splitHere46","public interface"
"793splitHere46","3174438splitHere46","private enum"
"794splitHere46","3174438splitHere46","implements"
"795splitHere46","3174438splitHere46","INSTANCE"
"796splitHere46","3174438splitHere46","public class PrivateEnum {<newline46mondego><newline46mondego>    public interface Worker {<newline46mondego>        void doSomething();<newline46mondego>    }<newline46mondego><newline46mondego>    static private enum Elvis implements Worker {<newline46mondego>        INSTANCE;<newline46mondego>        @Override public void doSomething() {<newline46mondego>            System.out.println(<doubleQuotes46>Thank you! Thank you very much!<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public Worker getWorker() {<newline46mondego>        return Elvis.INSTANCE;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"797splitHere46","3174438splitHere46","Elvis.INSTANCE"
"798splitHere46","3174438splitHere46","enum Elvis"
"799splitHere46","3174438splitHere46","interface"
"800splitHere46","3174457splitHere46","ektorp.jar"
"801splitHere46","3174457splitHere46","Class-Path:"
"802splitHere46","3174457splitHere46","Class-Path:"
"803splitHere46","3174457splitHere46","<project><newline46mondego>  ...<newline46mondego>  <build><newline46mondego>    <plugins><newline46mondego>      <plugin><newline46mondego>        <groupId>org.apache.maven.plugins</groupId><newline46mondego>        <artifactId>maven-ejb-plugin</artifactId><newline46mondego>        <version>2.2.1</version><newline46mondego>        ...<newline46mondego>        <configuration><newline46mondego>          <archive><newline46mondego>            <manifest><newline46mondego>              <addClasspath>true</addClasspath><newline46mondego>           </manifest><newline46mondego>         </archive><newline46mondego>       </configuration><newline46mondego>        ...<newline46mondego>     </plugin><newline46mondego>   </plugins><newline46mondego> </build><newline46mondego>  ...<newline46mondego></project><newline46mondego>"
"804splitHere46","3174496splitHere46","public Class findClass(String name) {<newline46mondego>         byte[] b = ... // get the bytes from wherever they are generated<newline46mondego>         return defineClass(name, b, 0, b.length);<newline46mondego>     }<newline46mondego>"
"805splitHere46","3174559splitHere46","-g:none"
"806splitHere46","3174559splitHere46","javac"
"807splitHere46","3174634splitHere46","ProxySelector"
"808splitHere46","3174685splitHere46","getClass()"
"809splitHere46","3174733splitHere46","@page import"
"810splitHere46","3174733splitHere46","<jsp:useBean id=<doubleQuotes46>user<doubleQuotes46> class=<doubleQuotes46>com.example.Data<doubleQuotes46> scope=<doubleQuotes46>session<doubleQuotes46>/> <newline46mondego>"
"811splitHere46","3174733splitHere46","package"
"812splitHere46","3174733splitHere46","package com.example;<newline46mondego><newline46mondego>public class Data {<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"813splitHere46","3174733splitHere46","/WEB-INF/classes/com/example/Data.class"
"814splitHere46","3174733splitHere46","src/com/example/Data.java"
"815splitHere46","3174733splitHere46","propertyname"
"816splitHere46","3174733splitHere46","public"
"817splitHere46","3174733splitHere46","getPropertyname()"
"818splitHere46","3174733splitHere46","get"
"819splitHere46","3174733splitHere46","setPropertyname()"
"820splitHere46","3174733splitHere46","Data"
"821splitHere46","3174733splitHere46","package com.example;<newline46mondego><newline46mondego>public class Data {<newline46mondego>    private String classname;<newline46mondego>    private String individualname;<newline46mondego>    private String link;<newline46mondego><newline46mondego>    public String getClassname() {<newline46mondego>        return classname;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getIndividualname() {<newline46mondego>        return individualname;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getLink() {<newline46mondego>        return link;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setClassname(String classname) {<newline46mondego>        this.classname = classname;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setIndividualname(String individualname) {<newline46mondego>        this.individualname = individualname;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setLink(String link) {<newline46mondego>        this.link = link;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"822splitHere46","3174918splitHere46","NoClassDefFoundError"
"823splitHere46","3174918splitHere46","com/enterprisedt/net/ftp/FileTransferClient"
"824splitHere46","3174918splitHere46","archive"
"825splitHere46","3174918splitHere46","<APPLET>"
"826splitHere46","3174918splitHere46","<OBJECT>"
"827splitHere46","3174918splitHere46","<EMBED>"
"828splitHere46","3174946splitHere46","Effective Java 2nd Edition"
"829splitHere46","3174946splitHere46","// Exception Translation<newline46mondego>    try {<newline46mondego>         // Use lower-level abstraction to do our bidding<newline46mondego>         ...<newline46mondego>    } catch(LowerLevelException e) {<newline46mondego>         throw new HigherLevelException(...);<newline46mondego>    }<newline46mondego>"
"830splitHere46","3174968splitHere46","@XmlPath(<doubleQuotes46>personal-info/name/text()<doubleQuotes46>)<newline46mondego>public String getName() {<newline46mondego>    return name;<newline46mondego>}<newline46mondego>"
"831splitHere46","3174989splitHere46","import java.util.*;<newline46mondego>public class fact_of_digit1 {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        Scanner scnr=new Scanner (System.in);<newline46mondego>        System.out.println(<doubleQuotes46>enter a:<doubleQuotes46>);<newline46mondego>        int a=scnr.nextInt();<newline46mondego>        System.out.println(5);<newline46mondego>        System.out.println(3);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"832splitHere46","3175280splitHere46","BoxLayout"
"833splitHere46","3175280splitHere46","import java.awt.*;<newline46mondego>import java.util.List;<newline46mondego>import java.util.ArrayList;<newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>public class BoxTest extends JPanel {<newline46mondego><newline46mondego>    private List<JTextField> fields = new ArrayList<JTextField>();<newline46mondego><newline46mondego>    public BoxTest() {<newline46mondego>        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));<newline46mondego>        this.add(createPane(3, <doubleQuotes46>One <doubleQuotes46>, Color.red));<newline46mondego>        this.add(createPane(3, <doubleQuotes46>Two <doubleQuotes46>, Color.green));<newline46mondego>        this.add(createPane(10, <doubleQuotes46>Three <doubleQuotes46>, Color.blue));<newline46mondego>    }<newline46mondego><newline46mondego>    private JPanel createPane(int n, String s, Color c) {<newline46mondego>        JPanel outer = new JPanel();<newline46mondego>        outer.setLayout(new BoxLayout(outer, BoxLayout.Y_AXIS));<newline46mondego>        outer.setBorder(BorderFactory.createLineBorder(c, 2));<newline46mondego>        for (int i = 0; i < n; i++) {<newline46mondego>            JPanel inner = new JPanel();<newline46mondego>            inner.setLayout(new BoxLayout(inner, BoxLayout.X_AXIS));<newline46mondego>            JLabel label = new JLabel(s + i + <doubleQuotes46>:<doubleQuotes46>, JLabel.RIGHT);<newline46mondego>            label.setPreferredSize(new Dimension(80, 32));<newline46mondego>            inner.add(label);<newline46mondego>            JTextField tf = new JTextField(<doubleQuotes46>Stackoverflow!<doubleQuotes46>, 32);<newline46mondego>            inner.add(tf);<newline46mondego>            fields.add(tf);<newline46mondego>            outer.add(inner);<newline46mondego>        }<newline46mondego>        return outer;<newline46mondego>    }<newline46mondego><newline46mondego>    private void display() {<newline46mondego>        JFrame f = new JFrame();<newline46mondego>        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        JScrollPane jsp = new JScrollPane(this,<newline46mondego>            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,<newline46mondego>            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);<newline46mondego>        this.validate();<newline46mondego>        Dimension d = this.getPreferredSize();<newline46mondego>        d.height /= 2;<newline46mondego>        jsp.getViewport().setPreferredSize(d);<newline46mondego>        jsp.getVerticalScrollBar().setUnitIncrement(<newline46mondego>            this.getPreferredSize().height / fields.size());<newline46mondego>        f.add(jsp);<newline46mondego>        f.pack();<newline46mondego>        f.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                new BoxTest().display();<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"834splitHere46","3175311splitHere46","TreeModel"
"835splitHere46","3175311splitHere46","DefaultTreeModel"
"836splitHere46","3175512splitHere46","Process"
"837splitHere46","3175512splitHere46","Runtime.exec(String)"
"838splitHere46","3175512splitHere46","InputStream"
"839splitHere46","3175512splitHere46","OutputStream"
"840splitHere46","3175512splitHere46","OutputStream"
"841splitHere46","3175512splitHere46","Thread"
"842splitHere46","3175512splitHere46","OutputStream"
"843splitHere46","3175512splitHere46","EventListener"
"844splitHere46","3175512splitHere46","OutputStream"
"845splitHere46","3175735splitHere46","^"
"846splitHere46","3175735splitHere46","$"
"847splitHere46","3175735splitHere46","public class PatternTest {<newline46mondego>  public static void main(String[] args) {<newline46mondego>    System.out.println(<doubleQuotes46>117_117_0009v0_172_5738_5740<doubleQuotes46>.matches(<doubleQuotes46>^([0-9_]+v._.).*$<doubleQuotes46>));<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"848splitHere46","3175735splitHere46","117_117_0009v0_1<newline46mondego>"
"849splitHere46","3175735splitHere46","Pattern p = Pattern.compile(<doubleQuotes46>^([0-9_]+v._.).*$<doubleQuotes46>);<newline46mondego>       String str = <doubleQuotes46>117_117_0009v0_172_5738_5740<doubleQuotes46>;<newline46mondego><newline46mondego>        Matcher m = p.matcher(str);<newline46mondego>        if (m.matches())<newline46mondego>        {<newline46mondego>            System.out.println(m.group(1));<newline46mondego>        }<newline46mondego>"
"850splitHere46","3176037splitHere46","TableModel"
"851splitHere46","3176037splitHere46","toString"
"852splitHere46","3176118splitHere46","lastModified"
"853splitHere46","3176118splitHere46","java.io.File"
"854splitHere46","3176118splitHere46","(.lastModified (java.io.File. <doubleQuotes46>/home/lol/lolness.txt<doubleQuotes46>))<newline46mondego>"
"855splitHere46","3176118splitHere46","clojure.contrib.java-utils"
"856splitHere46","3176118splitHere46","clojure.java.io"
"857splitHere46","3176118splitHere46","file"
"858splitHere46","3176118splitHere46","java.io.File"
"859splitHere46","3176118splitHere46","(require '[clojure.java.io :as io])<newline46mondego>(.lastModified (io/file <doubleQuotes46>/home/lol/lolness.txt<doubleQuotes46>))<newline46mondego>"
"860splitHere46","3176178splitHere46","new"
"861splitHere46","3176178splitHere46","User"
"862splitHere46","3176178splitHere46","Address"
"863splitHere46","3176178splitHere46","AccountInfo"
"864splitHere46","3176178splitHere46","new"
"865splitHere46","3176178splitHere46","new"
"866splitHere46","3176178splitHere46","@Configurable"
"867splitHere46","3176194splitHere46","sun"
"868splitHere46","3176194splitHere46","internal"
"869splitHere46","3176194splitHere46","javax.script"
"870splitHere46","3176220splitHere46","ThreadLocal"
"871splitHere46","3176237splitHere46","byte[]"
"872splitHere46","3176237splitHere46","Byte[]"
"873splitHere46","3176237splitHere46","ArrayUtils.toPrimitive(wrapperCollection)"
"874splitHere46","3176237splitHere46","Byte[] bytes = pdu.toArray(new Byte[pdu.size()]);<newline46mondego>return ArrayUtils.toPrimitive(bytes);<newline46mondego>"
"875splitHere46","3176237splitHere46","byte[]"
"876splitHere46","3176237splitHere46","Byte[]"
"877splitHere46","3176237splitHere46","byte[]"
"878splitHere46","3176351splitHere46","LocalTransactionContainment"
"879splitHere46","3176351splitHere46","connection.commit(); // after the work has been performed<newline46mondego>"
"880splitHere46","3176351splitHere46","connection.setAutoCommit(true); //<newline46mondego>"
"881splitHere46","3176351splitHere46","Context ic = new InitialContext();<newline46mondego>UserTransaction ut =<newline46mondego>(UserTransaction) ic.lookup(<doubleQuotes46>java:comp/UserTransaction<doubleQuotes46>);<newline46mondego>ut.begin();<newline46mondego>// use connection here<newline46mondego>ut.commit();<newline46mondego>"
"882splitHere46","3176681splitHere46","TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);<newline46mondego>"
"883splitHere46","3176681splitHere46","tm.getNetworkCountryIso();<newline46mondego>tm.getNetworkOperator();<newline46mondego>tm.getNetworkOperatorName();<newline46mondego>tm.getSimCountryIso();<newline46mondego>tm.getSimOperator();<newline46mondego>tm.getSimOperatorName();<newline46mondego>"
"884splitHere46","3176907splitHere46","// extract and assemble xxxx from yyyy <newline46mondego>int w = ((0x003C & data[0]) >> 2) | <newline46mondego>        ((0x0600 & data[0]) >> 6) | <newline46mondego>        ((0x6000 & data[0]) >> 7);<newline46mondego>"
"885splitHere46","3176907splitHere46","public static int readIntFromMaskedBytes(int data, int mask) {<newline46mondego>    int result = 0;<newline46mondego>    int shift = 0;<newline46mondego>    while (mask != 0) {<newline46mondego>        if (mask & 1) {<newline46mondego>            result |= (data & 1) << shift++;<newline46mondego>        }<newline46mondego>        data >>>= 1;<newline46mondego>        mask >>>= 1;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"886splitHere46","3177103splitHere46","public Catalog loadCatalog(String filename) <newline46mondego>    throws FileNotFoundException, <newline46mondego>           IOException, <newline46mondego>           DataFormatException<newline46mondego>{<newline46mondego>    String line = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    BufferedReader stdIn = new BufferedReader(new FileReader(<doubleQuotes46>catalog.dat<doubleQuotes46>));<newline46mondego>    BufferedReader input = new BufferedReader(new FileReader(stdIn.readLine()));<newline46mondego><newline46mondego>    while(!stdIn.ready())<newline46mondego>    {<newline46mondego>        line = input.readLine();<newline46mondego><newline46mondego>        if(line.startsWith(<doubleQuotes46>Product<doubleQuotes46>))<newline46mondego>        {<newline46mondego>            readProduct(line);<newline46mondego>        } <newline46mondego>        else if(line.startsWith(<doubleQuotes46>Coffee<doubleQuotes46>))<newline46mondego>        {<newline46mondego>            readCoffee(line);<newline46mondego>        }  <newline46mondego>        else if(line.startsWith(<doubleQuotes46>Brewer<doubleQuotes46>))<newline46mondego>        {<newline46mondego>            readCoffeeBrewer(line);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"887splitHere46","3177103splitHere46","try<newline46mondego>{<newline46mondego>   loadCatalog(...);<newline46mondego>}<newline46mondego>catch(FileNotFoundException ex)<newline46mondego>{<newline46mondego>    ex.printStackTrace(); <newline46mondego>}<newline46mondego>catch(IOException ex)<newline46mondego>{<newline46mondego>    ex.printStackTrace(); <newline46mondego>}<newline46mondego>catch(DataFormatException ex)<newline46mondego>{<newline46mondego>    ex.printStackTrace(); <newline46mondego>}<newline46mondego>"
"888splitHere46","3177232splitHere46","String serverIP = request.getLocalAddr();<newline46mondego>"
"889splitHere46","3177549splitHere46","CreateQuizController"
"890splitHere46","3177549splitHere46","QuizFactory"
"891splitHere46","3177549splitHere46","QuizController"
"892splitHere46","3177549splitHere46","QuizFactory"
"893splitHere46","3177549splitHere46","QuizFactory"
"894splitHere46","3177549splitHere46","QuestionFactory"
"895splitHere46","3177549splitHere46","QuizCatalog"
"896splitHere46","3177549splitHere46","QuizController"
"897splitHere46","3177549splitHere46","QuizController"
"898splitHere46","3177549splitHere46","QuizController"
"899splitHere46","3177549splitHere46","getNextQuestion()"
"900splitHere46","3177549splitHere46","getPreviousQuestion()"
"901splitHere46","3177549splitHere46","QuizController"
"902splitHere46","3177549splitHere46","Quiz"
"903splitHere46","3177549splitHere46","QuizCatalog"
"904splitHere46","3177549splitHere46","QuizManager"
"905splitHere46","3177640splitHere46","DataSource source = new FileDataSource(filename);<newline46mondego>messageBodyPart.setDataHandler(new DataHandler(source));<newline46mondego>messageBodyPart.setFileName(filename);<newline46mondego>multipart.addBodyPart(messageBodyPart);<newline46mondego>"
"906splitHere46","3177640splitHere46","private static void addAttachment(Multipart multipart, String filename)<newline46mondego>{<newline46mondego>    DataSource source = new FileDataSource(filename);<newline46mondego>    messageBodyPart.setDataHandler(new DataHandler(source));<newline46mondego>    messageBodyPart.setFileName(filename);<newline46mondego>    multipart.addBodyPart(messageBodyPart);<newline46mondego>}<newline46mondego>"
"907splitHere46","3177640splitHere46","addAttachment(multipart, <doubleQuotes46>file1.txt<doubleQuotes46>);<newline46mondego>addAttachment(multipart, <doubleQuotes46>file2.txt<doubleQuotes46>);<newline46mondego>"
"908splitHere46","3177649splitHere46","System.getProperty(<doubleQuotes46>os.name<doubleQuotes46>)"
"909splitHere46","3177946splitHere46","<filter><newline46mondego>        <display-name>RichFaces Filter</display-name><newline46mondego>        <filter-name>richfaces</filter-name><newline46mondego>        <filter-class>org.ajax4jsf.Filter</filter-class><newline46mondego>    </filter><newline46mondego>    <filter-mapping><newline46mondego>        <filter-name>richfaces</filter-name><newline46mondego>        <servlet-name>Faces Servlet</servlet-name><newline46mondego>        <dispatcher>REQUEST</dispatcher><newline46mondego>        <dispatcher>FORWARD</dispatcher><newline46mondego>        <dispatcher>INCLUDE</dispatcher><newline46mondego>    </filter-mapping><newline46mondego>"
"910splitHere46","3178025splitHere46","mvn dependency:tree"
"911splitHere46","3178025splitHere46","eclipse:eclipse"
"912splitHere46","3178092splitHere46","public static List<String> customSplit(String input) {<newline46mondego>   List<String> elements = new ArrayList<String>();       <newline46mondego>   StringBuilder elementBuilder = new StringBuilder();<newline46mondego><newline46mondego>   boolean isQuoted = false;<newline46mondego>   for (char c : input.toCharArray()) {<newline46mondego>     if (c == '\<doubleQuotes46>') {<newline46mondego>        isQuoted = !isQuoted;<newline46mondego>        // continue;        // changed according to the OP comment - \<doubleQuotes46> shall not be skipped<newline46mondego>     }<newline46mondego>     if (c == ',' && !isQuoted) {<newline46mondego>        elements.add(elementBuilder.toString().trim());<newline46mondego>        elementBuilder = new StringBuilder();<newline46mondego>        continue;<newline46mondego>     }<newline46mondego>     elementBuilder.append(c); <newline46mondego>   }<newline46mondego>   elements.add(elementBuilder.toString().trim()); <newline46mondego>   return elements;<newline46mondego>}<newline46mondego>"
"913splitHere46","3178160splitHere46","from DomesticCat cat<newline46mondego>order by cat.name asc, cat.weight desc, cat.birthdate<newline46mondego>"
"914splitHere46","3178330splitHere46","EntityManager"
"915splitHere46","3178330splitHere46","MappedSuperclass"
"916splitHere46","3178427splitHere46","clip.open(inputStream);<newline46mondego>clip.loop(Clip.LOOP_CONTINUOUSLY);<newline46mondego>"
"917splitHere46","3178700splitHere46","val = val.replace(<doubleQuotes46>\\<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"918splitHere46","3178724splitHere46","java.sql.Date"
"919splitHere46","3178724splitHere46","java.util.Date"
"920splitHere46","3178724splitHere46","java.sql.Date"
"921splitHere46","3178724splitHere46","java.text.DateFormat"
"922splitHere46","3178724splitHere46","DateFormat"
"923splitHere46","3178724splitHere46","Date"
"924splitHere46","3178724splitHere46","Date date = ...;  // wherever you get this<newline46mondego>DateFormat df = new SimpleDateFormat(<doubleQuotes46>dd MMMM yyyy<doubleQuotes46>);<newline46mondego>String text = df.format(date);<newline46mondego>System.out.println(text);<newline46mondego>"
"925splitHere46","3178724splitHere46","Date"
"926splitHere46","3178724splitHere46","DateFormat"
"927splitHere46","3178724splitHere46","Date date = ...;<newline46mondego>System.out.println(date);<newline46mondego>"
"928splitHere46","3178724splitHere46","Date"
"929splitHere46","3178807splitHere46","RESOLVED WONTFIX"
"930splitHere46","3179024splitHere46","setDownloadListener()"
"931splitHere46","3179024splitHere46","WebView"
"932splitHere46","3179024splitHere46","shouldOverrideUrlLoading()"
"933splitHere46","3179082splitHere46","String[] titles = {<newline46mondego>        <doubleQuotes46>1 Introduction<doubleQuotes46>,<newline46mondego>        <doubleQuotes46> 1.1 Scope<doubleQuotes46>,<newline46mondego>        <doubleQuotes46> 1.2 Relevance<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>    1.2.1 Advantages<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>      1.2.1.1 Economic<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>    1.2.2 Disadvantages<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>2 Analysis<doubleQuotes46>,<newline46mondego>    };<newline46mondego>    for (int i = 0; i < titles.length; i++) {<newline46mondego>        System.out.println(String.format(<doubleQuotes46>%-30s %4d<doubleQuotes46>,<newline46mondego>            titles[i],<newline46mondego>            i * i * i // just example formula<newline46mondego>        ));<newline46mondego>    }<newline46mondego>"
"934splitHere46","3179082splitHere46","1 Introduction                    0<newline46mondego> 1.1 Scope                        1<newline46mondego> 1.2 Relevance                    8<newline46mondego>    1.2.1 Advantages             27<newline46mondego>      1.2.1.1 Economic           64<newline46mondego>    1.2.2 Disadvantages         125<newline46mondego>2 Analysis                      216<newline46mondego>"
"935splitHere46","3179082splitHere46","%-30s %4d"
"936splitHere46","3179082splitHere46","-"
"937splitHere46","3179082splitHere46","java.util.Formatter"
"938splitHere46","3179094splitHere46","Runnable"
"939splitHere46","3179094splitHere46","public void omnom() {<newline46mondego>    new Thread(this, <doubleQuotes46>My Thread<doubleQuotes46>).start();<newline46mondego>    new Thread(<newline46mondego>            new Runnable() {<newline46mondego>                public void run() {<newline46mondego>                    otherRunMethod();<newline46mondego>                }<newline46mondego>            }<newline46mondego>        ).start();<newline46mondego>}<newline46mondego>"
"940splitHere46","3179243splitHere46","JTable"
"941splitHere46","3179243splitHere46","tableModel.fireTableDataChanged()"
"942splitHere46","3179277splitHere46","com"
"943splitHere46","3179277splitHere46","edu"
"944splitHere46","3179277splitHere46","gov"
"945splitHere46","3179277splitHere46","mil"
"946splitHere46","3179277splitHere46","net"
"947splitHere46","3179277splitHere46","org"
"948splitHere46","3179277splitHere46","com.sun.eng"
"949splitHere46","3179277splitHere46","com.apple.quicktime.v2"
"950splitHere46","3179277splitHere46","edu.cmu.cs.bovik.cheese"
"951splitHere46","3179277splitHere46","com.sun.sunsoft.DOE"
"952splitHere46","3179277splitHere46","gov.whitehouse.socks.mousefinder"
"953splitHere46","3179277splitHere46","com.JavaSoft.jag.Oak"
"954splitHere46","3179277splitHere46","org.npr.pledge.driver"
"955splitHere46","3179277splitHere46","uk.ac.city.rugby.game"
"956splitHere46","3179370splitHere46","!"
"957splitHere46","3179370splitHere46","boolean"
"958splitHere46","3179370splitHere46","if (!<doubleQuotes46>myVarValue<doubleQuotes46>.equals(vars.get(<doubleQuotes46>MY_VARIABLE<doubleQuotes46>)))<newline46mondego>"
"959splitHere46","3179370splitHere46","!"
"960splitHere46","3179370splitHere46","!"
"961splitHere46","3179370splitHere46","boolean"
"962splitHere46","3179370splitHere46","Boolean"
"963splitHere46","3179370splitHere46","boolean"
"964splitHere46","3179370splitHere46","true"
"965splitHere46","3179370splitHere46","false"
"966splitHere46","3179370splitHere46","false"
"967splitHere46","3179370splitHere46","true"
"968splitHere46","3179370splitHere46","if (!something)"
"969splitHere46","3179370splitHere46","if (something == false)"
"970splitHere46","3179370splitHere46","if (b == false)"
"971splitHere46","3179524splitHere46","null"
"972splitHere46","3179535splitHere46","Object object = ObjectFactory.getObject(); // Gets object<newline46mondego>Dollar dollar = (Dollar) object; // Cast to Dollar object, will throw an exception<newline46mondego>                                 // if this isn't possible<newline46mondego>dollar.dollarMethod();   // I can now call Dollar methods<newline46mondego>"
"973splitHere46","3179585splitHere46","System.setSecurityManager(new YourSecurityManager());<newline46mondego>"
"974splitHere46","3179596splitHere46","items"
"975splitHere46","3179596splitHere46","$.each()"
"976splitHere46","3179596splitHere46","this.display"
"977splitHere46","3179596splitHere46","this.value"
"978splitHere46","3179596splitHere46","displayArray"
"979splitHere46","3179596splitHere46","valueArray"
"980splitHere46","3179596splitHere46","populateSelect()"
"981splitHere46","3179596splitHere46","jQuery.populateSelect = function(element,displayArray,valueArray) {<newline46mondego>    $.each(displayArray, function(i,val) {<newline46mondego>        element.options[element.options.length]  = new Option( displayArray[i] ,valueArray[i] );<newline46mondego>    });<newline46mondego>};<newline46mondego>"
"982splitHere46","3179596splitHere46","jQuery.populateSelect = function(element,items) {<newline46mondego>    $.each(items.display, function(i,val) {<newline46mondego>        element.options[element.options.length]  = new Option( items.display[i] ,items.value[i] );<newline46mondego>    });<newline46mondego>};<newline46mondego>"
"983splitHere46","3179638splitHere46","List myList = new ArrayList<MyClass>();<newline46mondego>"
"984splitHere46","3179712splitHere46","Archives"
"985splitHere46","3179909splitHere46","public class WorkerThreadFactory implements ThreadFactory {<newline46mondego>   private int counter = 0;<newline46mondego>   private String prefix = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>   public WorkerThreadFactory(String prefix) {<newline46mondego>     this.prefix = prefix;<newline46mondego>   }<newline46mondego><newline46mondego>   public Thread newThread(Runnable r) {<newline46mondego>     return new Thread(r, prefix + <doubleQuotes46>-<doubleQuotes46> + counter++);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"986splitHere46","3179909splitHere46","ThreadFactory"
"987splitHere46","3179909splitHere46","java.util.concurrent.ThreadFactory"
"988splitHere46","3179948splitHere46","hibernate.hbm2ddl.auto"
"989splitHere46","3179948splitHere46","hbm2ddl.auto"
"990splitHere46","3179948splitHere46","hbm2ddl.auto"
"991splitHere46","3179948splitHere46","none"
"992splitHere46","3179968splitHere46","@Column(name = <doubleQuotes46>STACKTRACE<doubleQuotes46>)<newline46mondego>@Type(type=<doubleQuotes46>text<doubleQuotes46>)<newline46mondego>"
"993splitHere46","3180085splitHere46","class ScrollableDialog extends TitleAreaDialog {<newline46mondego>    private String title;<newline46mondego>    private String text;<newline46mondego>    private String scrollableText;<newline46mondego><newline46mondego>    public ScrollableDialog(Shell parentShell, String title, String text, String scrollableText) {<newline46mondego>        super(parentShell);<newline46mondego>        this.title = title;<newline46mondego>        this.text = text;<newline46mondego>        this.scrollableText = scrollableText;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected Control createDialogArea(Composite parent) {<newline46mondego>        Composite composite = (Composite) super.createDialogArea (parent); // Let the dialog create the parent composite<newline46mondego><newline46mondego>        GridData gridData = new GridData();<newline46mondego>        gridData.grabExcessHorizontalSpace = true;<newline46mondego>        gridData.horizontalAlignment = GridData.FILL;<newline46mondego>        gridData.grabExcessVerticalSpace = true; // Layout vertically, too! <newline46mondego>        gridData.verticalAlignment = GridData.FILL;<newline46mondego><newline46mondego>        Text scrollable = new Text(composite, SWT.BORDER | SWT.V_SCROLL);<newline46mondego>        scrollable.setLayoutData(gridData);<newline46mondego>        scrollable.setText(scrollableText);<newline46mondego><newline46mondego>        return composite;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void create() {<newline46mondego>        super.create();<newline46mondego><newline46mondego>        // This is not necessary; the dialog will become bigger as the text grows but at the same time,<newline46mondego>        // the user will be able to see all (or at least more) of the error message at once<newline46mondego>        //getShell ().setSize (300, 300);<newline46mondego>        setTitle(title);<newline46mondego>        setMessage(text, IMessageProvider.ERROR);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void createButtonsForButtonBar(Composite parent) {<newline46mondego>        Button okButton = createButton(parent, OK, <doubleQuotes46>OK<doubleQuotes46>, true);<newline46mondego>        okButton.addSelectionListener(new SelectionAdapter() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void widgetSelected(SelectionEvent e) {<newline46mondego>                close();<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected boolean isResizable() {<newline46mondego>        return true; // Allow the user to change the dialog size!<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"994splitHere46","3180123splitHere46","CertificateFactory cf = CertificateFactory.getInstance(<doubleQuotes46>X.509<doubleQuotes46>);<newline46mondego><newline46mondego>// Get ContentInfo<newline46mondego>//byte[] signature = ... // PKCS#7 signature bytes<newline46mondego>InputStream signatureIn = new ByteArrayInputStream(signature);<newline46mondego>DERObject obj = new ASN1InputStream(signatureIn).readObject();<newline46mondego>ContentInfo contentInfo = ContentInfo.getInstance(obj);<newline46mondego><newline46mondego>// Extract certificates<newline46mondego>SignedData signedData = SignedData.getInstance(contentInfo.getContent());<newline46mondego>Enumeration certificates = signedData.getCertificates().getObjects();<newline46mondego><newline46mondego>// Build certificate path<newline46mondego>List certList = new ArrayList();<newline46mondego>while (certificates.hasMoreElements()) {<newline46mondego>    DERObject certObj = (DERObject) certificates.nextElement();<newline46mondego>    InputStream in = new ByteArrayInputStream(certObj.getDEREncoded());<newline46mondego>    certList.add(cf.generateCertificate(in));<newline46mondego>}<newline46mondego>CertPath certPath = cf.generateCertPath(certList);<newline46mondego><newline46mondego>// Load key store<newline46mondego>//String keyStorePath = ...<newline46mondego>KeyStore keyStore = KeyStore.getInstance(<doubleQuotes46>JKS<doubleQuotes46>);<newline46mondego>keyStore.load(new FileInputStream(keyStorePath), null);<newline46mondego><newline46mondego>// Set validation parameters<newline46mondego>PKIXParameters params = new PKIXParameters(keyStore);<newline46mondego>params.setRevocationEnabled(false); // to avoid exception on empty CRL<newline46mondego><newline46mondego>// Validate certificate path<newline46mondego>CertPathValidator validator = CertPathValidator.getInstance(<doubleQuotes46>PKIX<doubleQuotes46>);<newline46mondego>CertPathValidatorResult result = validator.validate(certPath, params);<newline46mondego>"
"995splitHere46","3180123splitHere46","validate()"
"996splitHere46","3180123splitHere46","ASN1Set"
"997splitHere46","3180123splitHere46","ContentInfo"
"998splitHere46","3180123splitHere46","SignedData"
"999splitHere46","3180123splitHere46","java.security.cert"
"1000splitHere46","3180202splitHere46","<% %>"
"1001splitHere46","3180202splitHere46","${}"
"1002splitHere46","3180202splitHere46","doFilter()"
"1003splitHere46","3180202splitHere46","public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {<newline46mondego>    if (((HttpServletRequest) request).getSession().getAttribute(<doubleQuotes46>user<doubleQuotes46>) == null) {<newline46mondego>        ((HttpServletResponse) response).sendRedirect(<doubleQuotes46>login<doubleQuotes46>); // Not logged in, redirect to login page.<newline46mondego>    } else {<newline46mondego>        chain.doFilter(request, response); // Logged in, just continue request.<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1004splitHere46","3180202splitHere46","<url-pattern>"
"1005splitHere46","3180202splitHere46","doGet()"
"1006splitHere46","3180202splitHere46","protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>    try {<newline46mondego>        List<Product> products = productService.list(); // Obtain all products.<newline46mondego>        request.setAttribute(<doubleQuotes46>products<doubleQuotes46>, products); // Store products in request scope.<newline46mondego>        request.getRequestDispatcher(<doubleQuotes46>/WEB-INF/products.jsp<doubleQuotes46>).forward(request, response); // Forward to JSP page to display them in a HTML table.<newline46mondego>    } catch (SQLException e) {<newline46mondego>        throw new ServletException(<doubleQuotes46>Retrieving products failed!<doubleQuotes46>, e);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1007splitHere46","3180202splitHere46","<error-page>"
"1008splitHere46","3180202splitHere46","web.xml"
"1009splitHere46","3180202splitHere46","doPost()"
"1010splitHere46","3180202splitHere46","protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>    String username = request.getParameter(<doubleQuotes46>username<doubleQuotes46>);<newline46mondego>    String password = request.getParameter(<doubleQuotes46>password<doubleQuotes46>);<newline46mondego>    User user = userService.find(username, password);<newline46mondego><newline46mondego>    if (user != null) {<newline46mondego>        request.getSession().setAttribute(<doubleQuotes46>user<doubleQuotes46>, user); // Login user.<newline46mondego>        response.sendRedirect(<doubleQuotes46>home<doubleQuotes46>); // Redirect to home page.<newline46mondego>    } else {<newline46mondego>        request.setAttribute(<doubleQuotes46>message<doubleQuotes46>, <doubleQuotes46>Unknown username/password. Please retry.<doubleQuotes46>); // Store error message in request scope.<newline46mondego>        request.getRequestDispatcher(<doubleQuotes46>/WEB-INF/login.jsp<doubleQuotes46>).forward(request, response); // Forward to JSP page to redisplay login form with error.<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1011splitHere46","3180202splitHere46","${message}"
"1012splitHere46","3180202splitHere46","protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>    try {<newline46mondego>        Action action = ActionFactory.getAction(request);<newline46mondego>        String view = action.execute(request, response);<newline46mondego><newline46mondego>        if (view.equals(request.getPathInfo().substring(1)) {<newline46mondego>            request.getRequestDispatcher(<doubleQuotes46>/WEB-INF/<doubleQuotes46> + view + <doubleQuotes46>.jsp<doubleQuotes46>).forward(request, response);<newline46mondego>        } else {<newline46mondego>            response.sendRedirect(view);<newline46mondego>        }<newline46mondego>    } catch (Exception e) {<newline46mondego>        throw new ServletException(<doubleQuotes46>Executing action failed.<doubleQuotes46>, e);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1013splitHere46","3180202splitHere46","List<Product>"
"1014splitHere46","3180202splitHere46","<%@ taglib uri=<doubleQuotes46>http://java.sun.com/jsp/jstl/core<doubleQuotes46> prefix=<doubleQuotes46>c<doubleQuotes46> %><newline46mondego>...<newline46mondego><table><newline46mondego>    <c:forEach items=<doubleQuotes46>${products}<doubleQuotes46> var=<doubleQuotes46>product<doubleQuotes46>><newline46mondego>        <tr><newline46mondego>            <td>${product.name}</td><newline46mondego>            <td>${product.description}</td><newline46mondego>            <td>${product.price}</td><newline46mondego>        </tr><newline46mondego>    </c:forEach><newline46mondego></table><newline46mondego>"
"1015splitHere46","3180202splitHere46","web.xml"
"1016splitHere46","3180202splitHere46","<jsp-config><newline46mondego>    <jsp-property-group><newline46mondego>        <url-pattern>*.jsp</url-pattern><newline46mondego>        <scripting-invalid>true</scripting-invalid><newline46mondego>    </jsp-property-group><newline46mondego></jsp-config><newline46mondego>"
"1017splitHere46","3180202splitHere46","${}"
"1018splitHere46","3180202splitHere46","<input type=<doubleQuotes46>text<doubleQuotes46> name=<doubleQuotes46>foo<doubleQuotes46> value=<doubleQuotes46>${param.foo}<doubleQuotes46> /><newline46mondego>"
"1019splitHere46","3180202splitHere46","${param.foo}"
"1020splitHere46","3180202splitHere46","request.getParameter(<doubleQuotes46>foo<doubleQuotes46>)"
"1021splitHere46","3180202splitHere46","public static"
"1022splitHere46","3180202splitHere46","fn:escapeXml"
"1023splitHere46","3180202splitHere46","<%@ taglib uri=<doubleQuotes46>http://java.sun.com/jsp/jstl/functions<doubleQuotes46> prefix=<doubleQuotes46>fn<doubleQuotes46> %><newline46mondego>...<newline46mondego><input type=<doubleQuotes46>text<doubleQuotes46> name=<doubleQuotes46>foo<doubleQuotes46> value=<doubleQuotes46>${fn:escapeXml(param.foo)}<doubleQuotes46> /><newline46mondego>"
"1024splitHere46","3180230splitHere46","...<newline46mondego><class name=<doubleQuotes46>Topic<doubleQuotes46> table=<doubleQuotes46>topics<doubleQuotes46>><newline46mondego>    ...<newline46mondego>    <set name=<doubleQuotes46>candidatures<doubleQuotes46> table=<doubleQuotes46>Topic_has_Count_has_Date<doubleQuotes46>><newline46mondego>        <key column=<doubleQuotes46>TOPIC_ID<doubleQuotes46>/><newline46mondego>        <composite-element class=<doubleQuotes46>TopicCountDate<doubleQuotes46>><newline46mondego>            <parent name=<doubleQuotes46>topic<doubleQuotes46>/><newline46mondego>            <many-to-one name=<doubleQuotes46>count<doubleQuotes46> class=<doubleQuotes46>Count<doubleQuotes46> column=<doubleQuotes46>COUNT_ID<doubleQuotes46>/><newline46mondego>            <many-to-one name=<doubleQuotes46>date<doubleQuotes46> class=<doubleQuotes46>Date<doubleQuotes46> column=<doubleQuotes46>DATE_ID<doubleQuotes46>/><newline46mondego>        </composite-element><newline46mondego>    </set><newline46mondego></class><newline46mondego><class name=<doubleQuotes46>Date<doubleQuotes46> table=<doubleQuotes46>dates<doubleQuotes46>><newline46mondego>    ...<newline46mondego>    <set name=<doubleQuotes46>candidatures<doubleQuotes46> table=<doubleQuotes46>Topic_has_Count_has_Date<doubleQuotes46>><newline46mondego>        <key column=<doubleQuotes46>DATE_ID<doubleQuotes46>/><newline46mondego>        <composite-element class=<doubleQuotes46>TopicCountDate<doubleQuotes46>><newline46mondego>            <parent name=<doubleQuotes46>date<doubleQuotes46>/><newline46mondego>            <many-to-one name=<doubleQuotes46>count<doubleQuotes46> class=<doubleQuotes46>Count<doubleQuotes46> column=<doubleQuotes46>COUNT_ID<doubleQuotes46>/><newline46mondego>            <many-to-one name=<doubleQuotes46>topic<doubleQuotes46> class=<doubleQuotes46>Topic<doubleQuotes46> column=<doubleQuotes46>TOPIC_ID<doubleQuotes46>/><newline46mondego>        </composite-element><newline46mondego>    </set><newline46mondego></class><newline46mondego><class name=<doubleQuotes46>Count<doubleQuotes46> table=<doubleQuotes46>counts<doubleQuotes46>><newline46mondego>    ...<newline46mondego>    <set name=<doubleQuotes46>candidatures<doubleQuotes46> table=<doubleQuotes46>Topic_has_Count_has_Date<doubleQuotes46>><newline46mondego>        <key column=<doubleQuotes46>COUNT_ID<doubleQuotes46>/><newline46mondego>        <composite-element class=<doubleQuotes46>TopicCountDate<doubleQuotes46>><newline46mondego>            <parent name=<doubleQuotes46>count<doubleQuotes46>/><newline46mondego>            <many-to-one name=<doubleQuotes46>date<doubleQuotes46> class=<doubleQuotes46>Date<doubleQuotes46> column=<doubleQuotes46>DATE_ID<doubleQuotes46>/><newline46mondego>            <many-to-one name=<doubleQuotes46>topic<doubleQuotes46> class=<doubleQuotes46>Topic<doubleQuotes46> column=<doubleQuotes46>TOPIC_ID<doubleQuotes46>/><newline46mondego>        </composite-element><newline46mondego>    </set><newline46mondego></class><newline46mondego>"
"1025splitHere46","3180560splitHere46","String[] labels = {<doubleQuotes46>Name: <doubleQuotes46>, <doubleQuotes46>Fax: <doubleQuotes46>, <doubleQuotes46>Email: <doubleQuotes46>, <doubleQuotes46>Address: <doubleQuotes46>};<newline46mondego>int numPairs = labels.length;<newline46mondego><newline46mondego>//Create and populate the panel.<newline46mondego>JPanel p = new JPanel(new SpringLayout());<newline46mondego>for (int i = 0; i < numPairs; i++) {<newline46mondego>    JLabel l = new JLabel(labels[i], JLabel.TRAILING);<newline46mondego>    p.add(l);<newline46mondego>    JTextField textField = new JTextField(10);<newline46mondego>    l.setLabelFor(textField);<newline46mondego>    p.add(textField);<newline46mondego>}<newline46mondego><newline46mondego>//Lay out the panel.<newline46mondego>SpringUtilities.makeCompactGrid(p,<newline46mondego>                                numPairs, 2, //rows, cols<newline46mondego>                                6, 6,        //initX, initY<newline46mondego>                                6, 6);       //xPad, yPad<newline46mondego>"
"1026splitHere46","3180729splitHere46","clone()"
"1027splitHere46","3180729splitHere46","clone()"
"1028splitHere46","3180797splitHere46","EntityManager em = getEntityManager();<newline46mondego>Query query = em.createNativeQuery(<doubleQuotes46>BEGIN VALIDATE_EMP(P_EMP_ID=>?); END;<doubleQuotes46>);<newline46mondego>query.setParameter(1, empId);<newline46mondego>query.executeUpdate();<newline46mondego>"
"1029splitHere46","3180870splitHere46","T <T> getValue(String methodName, Object param, Class<T> type)<newline46mondego>"
"1030splitHere46","3180885splitHere46","@ViewScoped"
"1031splitHere46","3180885splitHere46","<h:dataTable>"
"1032splitHere46","3180885splitHere46","package com.example;<newline46mondego><newline46mondego>import java.io.Serializable;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import javax.annotation.PostConstruct;<newline46mondego>import javax.faces.bean.ManagedBean;<newline46mondego>import javax.faces.bean.ViewScoped;<newline46mondego><newline46mondego>@ManagedBean<newline46mondego>@ViewScoped<newline46mondego>public class Bean implements Serializable {<newline46mondego><newline46mondego>    private List<Item> list;<newline46mondego>    private Item item = new Item();<newline46mondego>    private boolean edit;<newline46mondego><newline46mondego>    @PostConstruct<newline46mondego>    public void init() {<newline46mondego>        // list = dao.list();<newline46mondego>        // Actually, you should retrieve the list from DAO. This is just for demo.<newline46mondego>        list = new ArrayList<Item>();<newline46mondego>        list.add(new Item(1L, <doubleQuotes46>item1<doubleQuotes46>));<newline46mondego>        list.add(new Item(2L, <doubleQuotes46>item2<doubleQuotes46>));<newline46mondego>        list.add(new Item(3L, <doubleQuotes46>item3<doubleQuotes46>));<newline46mondego>    }<newline46mondego><newline46mondego>    public void add() {<newline46mondego>        // dao.create(item);<newline46mondego>        // Actually, the DAO should already have set the ID from DB. This is just for demo.<newline46mondego>        item.setId(list.isEmpty() ? 1 : list.get(list.size() - 1).getId() + 1);<newline46mondego>        list.add(item);<newline46mondego>        item = new Item(); // Reset placeholder.<newline46mondego>    }<newline46mondego><newline46mondego>    public void edit(Item item) {<newline46mondego>        this.item = item;<newline46mondego>        edit = true;<newline46mondego>    }<newline46mondego><newline46mondego>    public void save() {<newline46mondego>        // dao.update(item);<newline46mondego>        item = new Item(); // Reset placeholder.<newline46mondego>        edit = false;<newline46mondego>    }<newline46mondego><newline46mondego>    public void delete(Item item) {<newline46mondego>        // dao.delete(item);<newline46mondego>        list.remove(item);<newline46mondego>    }<newline46mondego><newline46mondego>    public List<Item> getList() {<newline46mondego>        return list;<newline46mondego>    }<newline46mondego><newline46mondego>    public Item getItem() {<newline46mondego>        return item;<newline46mondego>    }<newline46mondego><newline46mondego>    public boolean isEdit() {<newline46mondego>        return edit;<newline46mondego>    }<newline46mondego><newline46mondego>    // Other getters/setters are actually unnecessary. Feel free to add them though.<newline46mondego><newline46mondego>}<newline46mondego>"
"1033splitHere46","3180885splitHere46","<!DOCTYPE html><newline46mondego><html xmlns=<doubleQuotes46>http://www.w3.org/1999/xhtml<doubleQuotes46><newline46mondego>      xmlns:f=<doubleQuotes46>http://java.sun.com/jsf/core<doubleQuotes46><newline46mondego>      xmlns:h=<doubleQuotes46>http://java.sun.com/jsf/html<doubleQuotes46>><newline46mondego>    <h:head><newline46mondego>        <title>Really simple CRUD</title><newline46mondego>    </h:head><newline46mondego>    <h:body><newline46mondego>        <h3>List items</h3><newline46mondego>        <h:form rendered=<doubleQuotes46>#{not empty bean.list}<doubleQuotes46>><newline46mondego>            <h:dataTable value=<doubleQuotes46>#{bean.list}<doubleQuotes46> var=<doubleQuotes46>item<doubleQuotes46>><newline46mondego>                <h:column><f:facet name=<doubleQuotes46>header<doubleQuotes46>>ID</f:facet>#{item.id}</h:column><newline46mondego>                <h:column><f:facet name=<doubleQuotes46>header<doubleQuotes46>>Value</f:facet>#{item.value}</h:column><newline46mondego>                <h:column><h:commandButton value=<doubleQuotes46>edit<doubleQuotes46> action=<doubleQuotes46>#{bean.edit(item)}<doubleQuotes46> /></h:column><newline46mondego>                <h:column><h:commandButton value=<doubleQuotes46>delete<doubleQuotes46> action=<doubleQuotes46>#{bean.delete(item)}<doubleQuotes46> /></h:column><newline46mondego>            </h:dataTable><newline46mondego>        </h:form><newline46mondego>        <h:panelGroup rendered=<doubleQuotes46>#{empty bean.list}<doubleQuotes46>><newline46mondego>            <p>Table is empty! Please add new items.</p><newline46mondego>        </h:panelGroup><newline46mondego>        <h:panelGroup rendered=<doubleQuotes46>#{!bean.edit}<doubleQuotes46>><newline46mondego>            <h3>Add item</h3><newline46mondego>            <h:form><newline46mondego>                <p>Value: <h:inputText value=<doubleQuotes46>#{bean.item.value}<doubleQuotes46> /></p><newline46mondego>                <p><h:commandButton value=<doubleQuotes46>add<doubleQuotes46> action=<doubleQuotes46>#{bean.add}<doubleQuotes46> /></p><newline46mondego>            </h:form><newline46mondego>        </h:panelGroup><newline46mondego>        <h:panelGroup rendered=<doubleQuotes46>#{bean.edit}<doubleQuotes46>><newline46mondego>            <h3>Edit item #{bean.item.id}</h3><newline46mondego>            <h:form><newline46mondego>                <p>Value: <h:inputText value=<doubleQuotes46>#{bean.item.value}<doubleQuotes46> /></p><newline46mondego>                <p><h:commandButton value=<doubleQuotes46>save<doubleQuotes46> action=<doubleQuotes46>#{bean.save}<doubleQuotes46> /></p><newline46mondego>            </h:form><newline46mondego>        </h:panelGroup><newline46mondego>    </h:body><newline46mondego></html><newline46mondego>"
"1034splitHere46","3181137splitHere46","INTERNET"
"1035splitHere46","3181137splitHere46","AndroidManifest.xml"
"1036splitHere46","3181137splitHere46","System.out.println()"
"1037splitHere46","3181137splitHere46","android.util.Log"
"1038splitHere46","3181137splitHere46","adb logcat"
"1039splitHere46","3181276splitHere46","@ElementCollection"
"1040splitHere46","3181276splitHere46","@ElementCollection"
"1041splitHere46","3181276splitHere46","OneToMany"
"1042splitHere46","3181374splitHere46","o == this"
"1043splitHere46","3181374splitHere46","public class User {<newline46mondego>    private Long id;<newline46mondego><newline46mondego>    public boolean equals(Object object) {<newline46mondego>        return (object instanceof User) && (id != null) <newline46mondego>             ? id.equals(((User) object).id) <newline46mondego>             : (object == this);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1044splitHere46","3181374splitHere46","public class User {<newline46mondego>    private String name;<newline46mondego>    private int age;<newline46mondego><newline46mondego>    public boolean equals(Object object) {<newline46mondego>        // Basic checks.<newline46mondego>        if (object == this) return true;<newline46mondego>        if (object == null || getClass() != object.getClass()) return false;<newline46mondego><newline46mondego>        // Property checks.<newline46mondego>        User other = (User) object;<newline46mondego>        if (name == null ? other.name != null : !name.equals(other.name)) return false;<newline46mondego>        if (age != other.age) return false;<newline46mondego><newline46mondego>        // All passed.<newline46mondego>        return true;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1045splitHere46","3181374splitHere46","equals()"
"1046splitHere46","3181374splitHere46","hashCode()"
"1047splitHere46","3181374splitHere46","toString()"
"1048splitHere46","3181440splitHere46","^((?!/authorize).)*$"
"1049splitHere46","3181485splitHere46","@PostConstruct<newline46mondego>public void init() { <newline46mondego>      drawings = loadDrawings();<newline46mondego>}<newline46mondego>"
"1050splitHere46","3181485splitHere46","public void List<SelectItem> getDrawings(){<newline46mondego>      if(drawings == null) {<newline46mondego>           drawings = sessionBean.getAllDrawings();<newline46mondego>      }<newline46mondego>      return drawings;<newline46mondego>}<newline46mondego>"
"1051splitHere46","3181689splitHere46","public static void main(String[] args) throws JDOMException, IOException {<newline46mondego>    File xmlFile = new File(<doubleQuotes46>sample.xml<doubleQuotes46>);<newline46mondego>    SAXBuilder builder = new SAXBuilder();<newline46mondego>    Document build = builder.build(xmlFile);        <newline46mondego>    XPath filterXpression = XPath.newInstance(<doubleQuotes46>//srv:ItemCost<doubleQuotes46>);<newline46mondego>    System.out.println(filterXpression.getXPath());<newline46mondego>    List nodes = filterXpression.selectNodes(build);        <newline46mondego>    System.out.println(nodes.size());<newline46mondego>}<newline46mondego>"
"1052splitHere46","3181689splitHere46","//srv:ItemCost<newline46mondego>2<newline46mondego>"
"1053splitHere46","3181934splitHere46","final Resource resource = acquire();<newline46mondego>try {<newline46mondego>    use(resource);<newline46mondego>} finally {<newline46mondego>    resource.dispose();<newline46mondego>}<newline46mondego>"
"1054splitHere46","3181934splitHere46","try"
"1055splitHere46","3181934splitHere46","null"
"1056splitHere46","3181934splitHere46","executeWith(new Handler() { public void use(Resource resource) {<newline46mondego>    ...<newline46mondego>}});<newline46mondego>"
"1057splitHere46","3181981splitHere46","public void startService()throws Exception{<newline46mondego>    ...skipped...<newline46mondego>->  Thread.currentThread().join();<newline46mondego>}<newline46mondego>"
"1058splitHere46","3181981splitHere46","startup taking too long, not getting a response on 127.0.0.1:8081, giving up<newline46mondego>"
"1059splitHere46","3182073splitHere46","java.util.Set"
"1060splitHere46","3182263splitHere46","Class<? extends self_type>"
"1061splitHere46","3182263splitHere46","Class<?>"
"1062splitHere46","3182263splitHere46","getClass()"
"1063splitHere46","3182263splitHere46","getClass()"
"1064splitHere46","3182263splitHere46","Class<?>"
"1065splitHere46","3182263splitHere46","Class<? extends TheClass>"
"1066splitHere46","3182263splitHere46","Class<? extends Object>"
"1067splitHere46","3182263splitHere46","getClass()"
"1068splitHere46","3182263splitHere46","Object"
"1069splitHere46","3183180splitHere46","Iterator"
"1070splitHere46","3183180splitHere46","Collection"
"1071splitHere46","3183180splitHere46","for"
"1072splitHere46","3183180splitHere46","Iterable"
"1073splitHere46","3183180splitHere46","Collection"
"1074splitHere46","3183180splitHere46","Iterator"
"1075splitHere46","3183180splitHere46","for"
"1076splitHere46","3183180splitHere46","for (String s : stringList) { ... }<newline46mondego>"
"1077splitHere46","3183180splitHere46","for (Iterator<String> iter = stringList.iterator(); iter.hasNext(); ) {<newline46mondego>  String s = iter.next();<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"1078splitHere46","3183317splitHere46","obj = dozerBeanMapper.map(obj, obj.getClass());<newline46mondego>"
"1079splitHere46","3183317splitHere46","List"
"1080splitHere46","3183317splitHere46","Set"
"1081splitHere46","3183709splitHere46","std::complex"
"1082splitHere46","3183709splitHere46","std::string"
"1083splitHere46","3183709splitHere46","std::complex<double> c;<newline46mondego>c = 10.0;<newline46mondego>c += 2.0;<newline46mondego>c = std::complex<double>(10.0, 1.0);<newline46mondego>c = c + 10.0;<newline46mondego>"
"1084splitHere46","3183709splitHere46","std::string"
"1085splitHere46","3183709splitHere46","std::string s = <doubleQuotes46>hello<doubleQuotes46><newline46mondego>s += <doubleQuotes46> world<doubleQuotes46>;<newline46mondego>if(s == <doubleQuotes46>hello world<doubleQuotes46>) {<newline46mondego>    //....<newline46mondego>}<newline46mondego>"
"1086splitHere46","3183709splitHere46","std::list"
"1087splitHere46","3183709splitHere46","operator[]"
"1088splitHere46","3183709splitHere46","for(int i = 0; i < l.size(); ++i) {<newline46mondego>    l[i] += 10;<newline46mondego>}<newline46mondego>"
"1089splitHere46","3183709splitHere46","std::list"
"1090splitHere46","3183709splitHere46","operator[]"
"1091splitHere46","3183837splitHere46","new Exception().getStackTrace()[0].getMethodName();<newline46mondego>"
"1092splitHere46","3183982splitHere46","String formatNumber(int n) {<newline46mondego>  return String.format(<doubleQuotes46>%-12d<doubleQuotes46>, n);<newline46mondego>}<newline46mondego><newline46mondego>label.setText(<doubleQuotes46> number <doubleQuotes46> + formatNumber(1234567) + <doubleQuotes46>is big<doubleQuotes46>);<newline46mondego>"
"1093splitHere46","3184003splitHere46","227"
"1094splitHere46","3184106splitHere46","FacebookSignatureUtil"
"1095splitHere46","3184316splitHere46","ContentNegotiatingViewResolver"
"1096splitHere46","3184316splitHere46","ContentNegotiatingViewResolver"
"1097splitHere46","3184586splitHere46","sess.createSQLQuery(<doubleQuotes46>SELECT NAME, BIRTHDATE FROM CATS<doubleQuotes46>)<newline46mondego>        .setResultTransformer(Transformers.aliasToBean(CatDTO.class))<newline46mondego>"
"1098splitHere46","3184586splitHere46","CatDTO"
"1099splitHere46","3184586splitHere46","NAME"
"1100splitHere46","3184586splitHere46","BIRTHNAME"
"1101splitHere46","3184621splitHere46","<!-- Composite configuration --><newline46mondego><bean id=<doubleQuotes46>configuration<doubleQuotes46> class=<doubleQuotes46>org.springmodules.commons.configuration.CommonsConfigurationFactoryBean<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>configurations<doubleQuotes46>><newline46mondego>        <list><newline46mondego>            <!-- User specifics --><newline46mondego>            <bean class=<doubleQuotes46>org.apache.commons.configuration.XMLConfiguration<doubleQuotes46>><newline46mondego>                <constructor-arg type=<doubleQuotes46>java.net.URL<doubleQuotes46> value=<doubleQuotes46>file:cfg.xml<doubleQuotes46> /><newline46mondego>            </bean><newline46mondego>        </list><newline46mondego>    </property><newline46mondego></bean><newline46mondego><newline46mondego><bean class=<doubleQuotes46>org.springframework.beans.factory.config.PropertyPlaceholderConfigurer<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>properties<doubleQuotes46> ref=<doubleQuotes46>configuration<doubleQuotes46>/><newline46mondego></bean><newline46mondego><newline46mondego><bean id=<doubleQuotes46>testConfig<doubleQuotes46> class=<doubleQuotes46>uvst.cfg.TestConfiguration<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>domain<doubleQuotes46> value=<doubleQuotes46>${some.prop}<doubleQuotes46>></property><newline46mondego></bean><newline46mondego>"
"1102splitHere46","3184621splitHere46","public class TestConfiguration {<newline46mondego>    private String domain;<newline46mondego>    public String getDomain() {<newline46mondego>        return domain;<newline46mondego>    }<newline46mondego>    public void setDomain(String domain) {<newline46mondego>        this.domain = domain;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1103splitHere46","3184621splitHere46","@RunWith(SpringJUnit4ClassRunner.class)<newline46mondego>@ContextConfiguration( { <doubleQuotes46>/applicationContextTest.xml<doubleQuotes46> })<newline46mondego><newline46mondego>public class ApacheCommonCfg2Spring extends AbstractJUnit4SpringContextTests {<newline46mondego><newline46mondego>    private TestConfiguration tcfg;<newline46mondego><newline46mondego>    @Test<newline46mondego>    public void configuration(){<newline46mondego>        tcfg  = this.applicationContext.getBean(<doubleQuotes46>testConfig<doubleQuotes46>, TestConfiguration.class);<newline46mondego>        System.out.println(tcfg.getDomain());<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1104splitHere46","3184646splitHere46","postedformat.parse()"
"1105splitHere46","3184646splitHere46","Date"
"1106splitHere46","3184646splitHere46","Date(Date)"
"1107splitHere46","3184646splitHere46","new Date"
"1108splitHere46","3184646splitHere46","Date newDate = poste...."
"1109splitHere46","3184650splitHere46","#! /usr/bin/bash<newline46mondego># Eclipse CLI program launcher.<newline46mondego><newline46mondego># ----------------------------------------------------------<newline46mondego># Constants<newline46mondego># ----------------------------------------------------------<newline46mondego><newline46mondego># Main class<newline46mondego>CLASS=your.main.class.Here<newline46mondego><newline46mondego># ----------------------------------------------------------<newline46mondego># Parse arguments<newline46mondego># ----------------------------------------------------------<newline46mondego># Debugger mode ?<newline46mondego>if [ <doubleQuotes46>$1<doubleQuotes46> = <doubleQuotes46>debug<doubleQuotes46> ]<newline46mondego>then<newline46mondego>    shift<newline46mondego>    DEBUG_OPTIONS=<doubleQuotes46>-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,address=3409,suspend=y<doubleQuotes46><newline46mondego>fi<newline46mondego><newline46mondego># -------------------------------------------------------<newline46mondego># Setup the classpath from eclipse .classpath files<newline46mondego># -------------------------------------------------------<newline46mondego><newline46mondego># Init classpath<newline46mondego>CLASSPATH=<doubleQuotes46><doubleQuotes46><newline46mondego><newline46mondego># Process a single .classpath file<newline46mondego># This is a recursive function<newline46mondego># Arguments:<newline46mondego>#  $1 : Dir path where to search for a <doubleQuotes46>.classpath<doubleQuotes46> file<newline46mondego>function build_classpath() {<newline46mondego><newline46mondego>    # Aliases to arguments<newline46mondego>    local folder=<doubleQuotes46>$1<doubleQuotes46><newline46mondego>    local file=<doubleQuotes46>$folder/.classpath<doubleQuotes46><newline46mondego><newline46mondego>    # <doubleQuotes46>.classpath<doubleQuotes46> file does not exists ? => exit<newline46mondego>    if [ ! -f <doubleQuotes46>$file<doubleQuotes46> ]<newline46mondego>    then<newline46mondego>        return<newline46mondego>    fi<newline46mondego><newline46mondego>    # Parse the file with sed<newline46mondego>    # return a list of <type>:<path> pairs<newline46mondego>    local lines=`sed -ne 's/^.*kind=<doubleQuotes46>\(.*\)<doubleQuotes46>\s\s*path=<doubleQuotes46>\(.*\)<doubleQuotes46>.*$/\1:\2/gp' $file`<newline46mondego><newline46mondego>    # Loop on lines<newline46mondego>    for line in $lines<newline46mondego>    do<newline46mondego>        # Split the type and path values<newline46mondego>        local type=${line%:*}<newline46mondego>        local path=${line#*:} <newline46mondego><newline46mondego>        # Switch on type<newline46mondego>        case $type in<newline46mondego><newline46mondego>            <doubleQuotes46>lib<doubleQuotes46> )<newline46mondego>                CLASSPATH=$CLASSPATH:$folder/$path<newline46mondego>                ;;<newline46mondego><newline46mondego>            <doubleQuotes46>output<doubleQuotes46> )<newline46mondego>                CLASSPATH=$CLASSPATH:$folder/$path<newline46mondego>                ;;<newline46mondego><newline46mondego>            <doubleQuotes46>src<doubleQuotes46> )<newline46mondego>                # Recursive call for other projects, relative to the workspace (the parent dir)<newline46mondego>                build_classpath <doubleQuotes46>..$path<doubleQuotes46><newline46mondego>                ;;<newline46mondego>        esac<newline46mondego><newline46mondego>    done<newline46mondego>}<newline46mondego><newline46mondego># Start building the classpath from the current project dir<newline46mondego>build_classpath .<newline46mondego><newline46mondego># Call java<newline46mondego>java  $DEBUG_OPTIONS -Xmx1024m -cp `cygpath -wp $CLASSPATH` $CLASS $@<newline46mondego>"
"1110splitHere46","3184800splitHere46","net stop tomcat<newline46mondego>net start tomcat<newline46mondego>"
"1111splitHere46","3184937splitHere46","Iterator"
"1112splitHere46","3184937splitHere46","for (DrugStrength aDrugStrength : aDrugStrengthList) {<newline46mondego>    if (!aDrugStrength.isValidDrugDescription()) {<newline46mondego>        aDrugStrengthList.remove(aDrugStrength);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1113splitHere46","3184937splitHere46","for (Iterator<DrugStrength> it = aDrugStrengthList.iterator(); it.hasNext(); ) {<newline46mondego>    DrugStrength aDrugStrength = it.next();<newline46mondego>    if (!aDrugStrength.isValidDrugDescription()) {<newline46mondego>        it.remove();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1114splitHere46","3185066splitHere46","JSci.maths.fields.Ring$Member"
"1115splitHere46","3185066splitHere46","JSci.io.MathMLParser.translateToJSciObjects"
"1116splitHere46","3185066splitHere46","Ring.Member"
"1117splitHere46","3185066splitHere46","JSci.maths.fields"
"1118splitHere46","3185066splitHere46","JSci.maths.fields.Ring$Member"
"1119splitHere46","3185194splitHere46","package pkg;<newline46mondego><newline46mondego>public class One {<newline46mondego>  public int fieldOne;<newline46mondego>}<newline46mondego>"
"1120splitHere46","3185194splitHere46","package pkg;<newline46mondego><newline46mondego>public class Two {<newline46mondego>  private One one;<newline46mondego>  public int getOne() {<newline46mondego>    return one.fieldOne;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1121splitHere46","3185194splitHere46","public class A {<newline46mondego>   public int counter;<newline46mondego>   private int counter2;<newline46mondego>   public int getCounter2() { return counter2; }<newline46mondego>   public void setCounter2(int c) { counter2 = c; }<newline46mondego>}<newline46mondego><newline46mondego>public class B extends A {<newline46mondego>   public void setCounter2(int c) {<newline46mondego>      if (c < 0) throw new IllegalArgumentException(<doubleQuotes46>counter2 cannot be negative<doubleQuotes46>);<newline46mondego>      super.setCounter2(c); <newline46mondego>   }<newline46mondego>}<newline46mondego>"
"1122splitHere46","3185194splitHere46","counter"
"1123splitHere46","3185194splitHere46","counter2"
"1124splitHere46","3185194splitHere46","counter"
"1125splitHere46","3185194splitHere46","A"
"1126splitHere46","3185194splitHere46","A"
"1127splitHere46","3185194splitHere46","counter"
"1128splitHere46","3185194splitHere46","counter2"
"1129splitHere46","3185194splitHere46","A"
"1130splitHere46","3185194splitHere46","getCounter2"
"1131splitHere46","3185194splitHere46","setCounter2"
"1132splitHere46","3185194splitHere46","A"
"1133splitHere46","3185194splitHere46","A"
"1134splitHere46","3185194splitHere46","A"
"1135splitHere46","3185194splitHere46","B"
"1136splitHere46","3185194splitHere46","private"
"1137splitHere46","3185194splitHere46","setCounter2"
"1138splitHere46","3185252splitHere46","Vector"
"1139splitHere46","3185252splitHere46","HashSet"
"1140splitHere46","3185252splitHere46","collection.add(item)"
"1141splitHere46","3185252splitHere46","Vector.add"
"1142splitHere46","3185252splitHere46","import java.util.*;<newline46mondego><newline46mondego>public class Test {<newline46mondego>  public static void main(String[] args) {<newline46mondego>    long start = System.currentTimeMillis();<newline46mondego>    Vector<String> vector = new Vector<String>();<newline46mondego>    for (int i = 0; i < 300000; i++) {<newline46mondego>      vector.add(<doubleQuotes46>dummy value<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    long end = System.currentTimeMillis();<newline46mondego>    System.out.println(<doubleQuotes46>Time taken: <doubleQuotes46> + (end - start) + <doubleQuotes46>ms<doubleQuotes46>);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1143splitHere46","3185252splitHere46","System.currentTimeMillis"
"1144splitHere46","3185252splitHere46","Vector.add(item)"
"1145splitHere46","3185252splitHere46","vector.add(0, <doubleQuotes46>dummy value<doubleQuotes46>); // Insert item at the beginning<newline46mondego>"
"1146splitHere46","3185432splitHere46","@OneToMany<newline46mondego>@JoinColumn(name=<doubleQuotes46>parent_id<doubleQuotes46>)<newline46mondego>@IndexColumn(name=<doubleQuotes46>comments_index<doubleQuotes46>, base=0)<newline46mondego>private List<Comment> comments = new ArrayList<Comment>();<newline46mondego>"
"1147splitHere46","3185524splitHere46","public void indexRootNode(Node node, Class rootNodeClass)<newline46mondego>{<newline46mondego>    Field idField = rootNodeClass.getField(<doubleQuotes46>ID<doubleQuotes46>);<newline46mondego>    Object idValue = idField.get(null);<newline46mondego>    Field roorField = rootNodeClass.getField(<doubleQuotes46>ROOT<doubleQuotes46>);<newline46mondego>    Object rootValue = rootField.get(null);<newline46mondego><newline46mondego>    indexService.index(node, idValue, rootValue);<newline46mondego>}<newline46mondego>"
"1148splitHere46","3185541splitHere46","Rectangle resizedBounds = at.createTransformedShape(sprite.getBounds()).getBounds();<newline46mondego>"
"1149splitHere46","3185613splitHere46","canvas.rotate(90); // 90 degrees<newline46mondego>"
"1150splitHere46","3185613splitHere46","onDraw(Canvas canvas) {<newline46mondego>  canvas.rotate(90); // 90 degrees<newline46mondego>} <newline46mondego>"
"1151splitHere46","3185692splitHere46","<?php<newline46mondego>if(!$facebook->api_client->users_hasAppPermission('create_event')){<newline46mondego>        echo'<script type=<doubleQuotes46>text/javascript<doubleQuotes46>>window.open(<doubleQuotes46>http://www.facebook.com/authorize.php?api_key='.FB_API_KEY.'&v=1.0&ext_perm=create_event<doubleQuotes46>, <doubleQuotes46>Permission<doubleQuotes46>);</script>';<newline46mondego>        echo'<meta http-equiv=<doubleQuotes46>refresh<doubleQuotes46> content=<doubleQuotes46>0; URL=javascript:history.back();<doubleQuotes46>>';<newline46mondego>        exit;<newline46mondego>    }<newline46mondego>?><newline46mondego>"
"1152splitHere46","3185728splitHere46","n = 1<newline46mondego>with open('sourcefile.txt') as input:<newline46mondego>    with open('destination.txt', 'w') as output:<newline46mondego>        for line in input:<newline46mondego>            if line.startswith('%'):<newline46mondego>                line = str(n) + line[1:]<newline46mondego>                n += 1<newline46mondego>            output.write(line)<newline46mondego>"
"1153splitHere46","3185730splitHere46","<filter><newline46mondego>        <filter-name>resourceUploadServlet</filter-name><newline46mondego>        <filter-class>org.mortbay.servlet.MultiPartFilter</filter-class><newline46mondego>        <init-param><newline46mondego>            <param-name>maxSize</param-name><newline46mondego>            <param-value>2147483648</param-value><newline46mondego>        </init-param><newline46mondego>    </filter><newline46mondego>"
"1154splitHere46","3185834splitHere46","save"
"1155splitHere46","3185834splitHere46","CustomerOrder"
"1156splitHere46","3186142splitHere46","ASTBinaryOperation implements ASTNode<newline46mondego>{<newline46mondego>  ASTNode left, right;<newline46mondego>  Operator op;<newline46mondego><newline46mondego>  Result visit()<newline46mondego>  {<newline46mondego>    Result lr = left.visit();<newline46mondego>    Result rr = right.visit();<newline46mondego><newline46mondego>    return op.apply(lr, rr);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1157splitHere46","3186142splitHere46","ArrayList"
"1158splitHere46","3186142splitHere46","ASTDecl implements ASTNode<newline46mondego>{<newline46mondego>  String name;<newline46mondego>  Type type;<newline46mondego>  Value value;<newline46mondego>}<newline46mondego><newline46mondego>ASTDecls implements ASTNode<newline46mondego>{<newline46mondego>  ArrayList<ASTDecl> declarations;<newline46mondego>}<newline46mondego>"
"1159splitHere46","3186142splitHere46","ASTRoot {<newline46mondego>  ASTDecls declarations;<newline46mondego>  ASTFunctions functions;<newline46mondego>}<newline46mondego><newline46mondego>ASTFunctions {<newline46mondego>  ASTDecls args;<newline46mondego>  ASTBody body;<newline46mondego>  ..<newline46mondego>}<newline46mondego><newline46mondego>ASTBody {<newline46mondego>  ArrayList<ASTStatement> statements;<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"1160splitHere46","3186142splitHere46","ArrayList"
"1161splitHere46","3186142splitHere46","ASTNode"
"1162splitHere46","3186200splitHere46","C:\luajava>lua -v<newline46mondego>Lua 5.1.4  Copyright (C) 1994-2008 Lua.org, PUC-Rio<newline46mondego><newline46mondego>C:\luajava>java -cp <doubleQuotes46>luajava-1.1.jar<doubleQuotes46> org.keplerproject.luajava.Console<newline46mondego>API Lua Java - console mode.<newline46mondego>> example = 10<newline46mondego>> example = example + 20<newline46mondego>> print(example)<newline46mondego>30<newline46mondego>"
"1163splitHere46","3186465splitHere46","public interface DoActionThing<newline46mondego>{<newline46mondego>    public void doSomething();<newline46mondego>}<newline46mondego><newline46mondego>public class Sample<newline46mondego>{<newline46mondego>    private final String LIST_ITEM_1 = <doubleQuotes46>Foo<doubleQuotes46>;<newline46mondego>    private final String LIST_ITEM_2 = <doubleQuotes46>Bar<doubleQuotes46>;<newline46mondego><newline46mondego>    private Map<String, DoActionThing> actions;<newline46mondego><newline46mondego>    public Sample()<newline46mondego>    {<newline46mondego>        actions = new HashMap<String, DoActionThing>();<newline46mondego>        actions.put(LIST_ITEM_1, new DoActionThing()<newline46mondego>        {<newline46mondego>            @Override<newline46mondego>            public void doSomething()<newline46mondego>            {<newline46mondego>                handleFooSelection();<newline46mondego>            }<newline46mondego>        });<newline46mondego>        actions.put(LIST_ITEM_2,  new DoActionThing()<newline46mondego>        {<newline46mondego>            @Override<newline46mondego>            public void doSomething()<newline46mondego>            {<newline46mondego>                handleBarSelection();<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public void onListItemClick()<newline46mondego>    {<newline46mondego>    //Get the selected string from list<newline46mondego>        String selected = ....<newline46mondego>        DoActionThing dat = actions.get(selected);<newline46mondego>        dat.doSomething();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1164splitHere46","3186548splitHere46","s = s.replaceAll(v + v + <doubleQuotes46>+<doubleQuotes46>, v)"
"1165splitHere46","3186666splitHere46","private static void resizeColumn(TableColumn tableColumn_)<newline46mondego>{<newline46mondego>    tableColumn_.pack();<newline46mondego><newline46mondego>}<newline46mondego>private static void resizeTable(Table table_)<newline46mondego>{<newline46mondego>    for (TableColumn tc : table.getColumns())<newline46mondego>        resizeColumn(tc);<newline46mondego>}<newline46mondego>"
"1166splitHere46","3186669splitHere46","<META HTTP-EQUIV=<doubleQuotes46>Refresh<doubleQuotes46> CONTENT=<doubleQuotes46>1;URL=Login.action<doubleQuotes46>><newline46mondego>"
"1167splitHere46","3186775splitHere46","public void ensureIndexIsVisible(int index)"
"1168splitHere46","3186833splitHere46","doExtensiveComplexCalculation"
"1169splitHere46","3186850splitHere46","[4.0,)"
"1170splitHere46","3187059splitHere46","JButton"
"1171splitHere46","3187059splitHere46","paintComponent()"
"1172splitHere46","3187059splitHere46","setContentAreaFilled(false)"
"1173splitHere46","3187081splitHere46","public void change(int aantal) {<newline46mondego>    SwingUtilities.invokeLater(new Runnable() {<newline46mondego>        public void run() {<newline46mondego>            if (aantal < progressBar.getMaximum() && aantal >= 0) {<newline46mondego>                progressBar.setValue(aantal);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego>"
"1174splitHere46","3187081splitHere46","invokeLater()"
"1175splitHere46","3187081splitHere46","invokeAndWait()"
"1176splitHere46","3187128splitHere46","newInstance()"
"1177splitHere46","3187506splitHere46","duedate"
"1178splitHere46","3187506splitHere46","null"
"1179splitHere46","3187506splitHere46","duedate"
"1180splitHere46","3187506splitHere46","while"
"1181splitHere46","3187538splitHere46","activemq-jms-ds.xml"
"1182splitHere46","3187538splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><!DOCTYPE connection-factories<newline46mondego>    PUBLIC <doubleQuotes46>-//JBoss//DTD JBOSS JCA Config 1.5//EN<doubleQuotes46><newline46mondego>    <doubleQuotes46>http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd<doubleQuotes46>><newline46mondego><newline46mondego><connection-factories><newline46mondego>    <mbean code=<doubleQuotes46>org.jboss.jms.jndi.JMSProviderLoader<doubleQuotes46><newline46mondego>       name=<doubleQuotes46>jboss.messaging:service=JMSProviderLoader,name=ActiveMQJMSProvider<doubleQuotes46>><newline46mondego>        <attribute name=<doubleQuotes46>ProviderName<doubleQuotes46>>ActiveMQJMSProvider</attribute><newline46mondego>        <attribute name=<doubleQuotes46>ProviderAdapterClass<doubleQuotes46>>org.jboss.jms.jndi.JNDIProviderAdapter</attribute><newline46mondego>        <attribute name=<doubleQuotes46>FactoryRef<doubleQuotes46>>java:/activemq/XAConnectionFactory</attribute><newline46mondego>        <attribute name=<doubleQuotes46>QueueFactoryRef<doubleQuotes46>>java:/activemq/XAConnectionFactory</attribute><newline46mondego>        <attribute name=<doubleQuotes46>TopicFactoryRef<doubleQuotes46>>java:/activemq/XAConnectionFactory</attribute><newline46mondego>    </mbean><newline46mondego><newline46mondego>    <tx-connection-factory><newline46mondego>        <jndi-name>JmsXAConnectionFactory</jndi-name><newline46mondego>        <xa-transaction/><newline46mondego>        <rar-name>jms-ra.rar</rar-name><newline46mondego>        <connection-definition>org.jboss.resource.adapter.jms.JmsConnectionFactory</connection-definition><newline46mondego>        <config-property name=<doubleQuotes46>JmsProviderAdapterJNDI<doubleQuotes46> type=<doubleQuotes46>java.lang.String<doubleQuotes46>>java:/ActiveMQJMSProvider</config-property><newline46mondego>    </tx-connection-factory><newline46mondego></connection-factories><newline46mondego>"
"1183splitHere46","3187538splitHere46","org.jboss.resource.adapter.jms.JmsConnectionFactory"
"1184splitHere46","3187538splitHere46","java:/activemq/XAConnectionFactory"
"1185splitHere46","3187538splitHere46","activemq-jms-jboss-beans.xml"
"1186splitHere46","3187538splitHere46","deployers"
"1187splitHere46","3187538splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><deployment xmlns=<doubleQuotes46>urn:jboss:bean-deployer:2.0<doubleQuotes46>><newline46mondego>    <!-- Define a Jndi binding aspect/annotation that exposes beans via jndi<newline46mondego>        when they are registered with the kernel.<newline46mondego>    --><newline46mondego>    <aop:lifecycle-configure xmlns:aop=<doubleQuotes46>urn:jboss:aop-beans:1.0<doubleQuotes46><newline46mondego>        name=<doubleQuotes46>DependencyAdvice<doubleQuotes46><newline46mondego>        class=<doubleQuotes46>org.jboss.aop.microcontainer.aspects.jndi.JndiLifecycleCallback<doubleQuotes46><newline46mondego>        classes=<doubleQuotes46>@org.jboss.aop.microcontainer.aspects.jndi.JndiBinding<doubleQuotes46><newline46mondego>        manager-bean=<doubleQuotes46>AspectManager<doubleQuotes46><newline46mondego>        manager-property=<doubleQuotes46>aspectManager<doubleQuotes46>><newline46mondego>    </aop:lifecycle-configure><newline46mondego><newline46mondego>    <bean name=<doubleQuotes46>ActiveMQXAConnectionFactory<doubleQuotes46> class=<doubleQuotes46>org.apache.activemq.ActiveMQXAConnectionFactory<doubleQuotes46>><newline46mondego>        <annotation>@org.jboss.aop.microcontainer.aspects.jndi.JndiBinding(name=<doubleQuotes46>activemq/XAConnectionFactory<doubleQuotes46>, aliases={<doubleQuotes46>java:/activemq/XAConnectionFactory<doubleQuotes46>})</annotation><newline46mondego>        <property name=<doubleQuotes46>brokerURL<doubleQuotes46>>vm://localhost</property><newline46mondego>    </bean><newline46mondego></deployment><newline46mondego>"
"1188splitHere46","3187538splitHere46","ActiveMQXAConnectionFactory"
"1189splitHere46","3187577splitHere46","ServletContext.getServletContextName()"
"1190splitHere46","3187638splitHere46","hibernate.cache.use_query_cache = true"
"1191splitHere46","3187638splitHere46","hibernate.cache.use_query_cache"
"1192splitHere46","3187638splitHere46","true"
"1193splitHere46","3187638splitHere46","false"
"1194splitHere46","3187638splitHere46","setCacheable(true)"
"1195splitHere46","3187859splitHere46","File dir = new File(getVideoPath(condition));<newline46mondego>Random gen = new Random();<newline46mondego><newline46mondego>File[] videos = dir.listFiles();<newline46mondego><newline46mondego>int random_index = gen.nextInt(videos.length);<newline46mondego><newline46mondego>return videos[random_index];<newline46mondego>"
"1196splitHere46","3188271splitHere46","Integer"
"1197splitHere46","3188271splitHere46","int"
"1198splitHere46","3188271splitHere46","Integer"
"1199splitHere46","3188504splitHere46","java.util.Date"
"1200splitHere46","3188504splitHere46","Date"
"1201splitHere46","3188504splitHere46","getTime()"
"1202splitHere46","3188504splitHere46","SimpleDateFormat dateFormat = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd kk:mm:ss<doubleQuotes46>);<newline46mondego>long unix_time = dateFormat.parse(date).getTime();<newline46mondego>"
"1203splitHere46","3188504splitHere46","UNIX_TIMESTAMP()"
"1204splitHere46","3188504splitHere46","mysql> SELECT UNIX_TIMESTAMP('2007-11-30 10:30:19');<newline46mondego>        -> 1196440219<newline46mondego>"
"1205splitHere46","3188637splitHere46","java.library.path"
"1206splitHere46","3188980splitHere46","ServletFilter"
"1207splitHere46","3188980splitHere46","HttpServletRequestWrapper"
"1208splitHere46","3188980splitHere46","import org.apache.struts.action.ActionRedirect;<newline46mondego>...<newline46mondego>ActionForward forward = action.forward(<doubleQuotes46>action_name<doubleQuotes46>);<newline46mondego>ActionRedirect redirect = new ActionRedirect(forward);<newline46mondego>redirect.addParameter(<doubleQuotes46>color<doubleQuotes46>, <doubleQuotes46>red<doubleQuotes46>);<newline46mondego>return redirect;<newline46mondego>"
"1209splitHere46","3189087splitHere46","bin"
"1210splitHere46","3189087splitHere46",".svn"
"1211splitHere46","3189087splitHere46","bin"
"1212splitHere46","3189087splitHere46","Repo-browser"
"1213splitHere46","3189087splitHere46","src/.svn"
"1214splitHere46","3189087splitHere46","bin"
"1215splitHere46","3189087splitHere46","bin"
"1216splitHere46","3189087splitHere46","src"
"1217splitHere46","3189087splitHere46","src"
"1218splitHere46","3189093splitHere46","DocumentListener"
"1219splitHere46","3189093splitHere46","public static void main(String[] args) {<newline46mondego>    JTextArea area = new JTextArea();<newline46mondego>    final StringBuilder builder = new StringBuilder();<newline46mondego>    area.getDocument().addDocumentListener(new DocumentListener() {<newline46mondego>        @Override<newline46mondego>        public void removeUpdate(DocumentEvent e) {<newline46mondego>            builder.delete(e.getOffset(), e.getOffset() + e.getLength());<newline46mondego>            System.out.println(<doubleQuotes46>Removed <doubleQuotes46> + e.getLength() + <doubleQuotes46> chars from SB<doubleQuotes46>);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void insertUpdate(DocumentEvent e) {<newline46mondego>            try {<newline46mondego>                builder.insert(e.getOffset(), <newline46mondego>                        e.getDocument().getText(e.getOffset(), e.getLength()));<newline46mondego>                System.out.println(<doubleQuotes46>Inserted <doubleQuotes46> + e.getLength() + <doubleQuotes46> chars into SB.<doubleQuotes46>);<newline46mondego>            } catch ( BadLocationException ble ) {<newline46mondego>                ble.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        @Override public void changedUpdate(DocumentEvent e) { /* no-op */ }<newline46mondego>    });<newline46mondego><newline46mondego>    final JFrame frame = new JFrame(<doubleQuotes46>DocumentListener Test<doubleQuotes46>);<newline46mondego>    frame.add(area);<newline46mondego>    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>    frame.addWindowListener(new WindowAdapter() {<newline46mondego>        @Override<newline46mondego>        public void windowClosing(WindowEvent e) {<newline46mondego>            System.out.println(<doubleQuotes46>Final SB contents:<doubleQuotes46>);<newline46mondego>            System.out.println(builder.toString());<newline46mondego>        }<newline46mondego>    });<newline46mondego>    frame.pack(); frame.setVisible(true);<newline46mondego>}<newline46mondego>"
"1220splitHere46","3189289splitHere46","persistence-api-1.0.jar"
"1221splitHere46","3189289splitHere46","pom.xml"
"1222splitHere46","3189289splitHere46","<dependency><newline46mondego>  <groupId>org.hibernate</groupId><newline46mondego>  <artifactId>hibernate-entitymanager</artifactId><newline46mondego>  <version>3.5.3-Final</version><newline46mondego></dependency><newline46mondego>"
"1223splitHere46","3189442splitHere46",".csv"
"1224splitHere46","3189442splitHere46",".csv"
"1225splitHere46","3189442splitHere46",".xls"
"1226splitHere46","3189442splitHere46","INSERT"
"1227splitHere46","3189442splitHere46",".XLS"
"1228splitHere46","3189442splitHere46","readLine()"
"1229splitHere46","3189483splitHere46","Noun.pluralOf(<doubleQuotes46>user<doubleQuotes46>)"
"1230splitHere46","3189483splitHere46","Noun.pluralOf(<doubleQuotes46>user<doubleQuotes46>, userList.size())"
"1231splitHere46","3189487splitHere46","(\S*)\s(\S*)\s(\S*)\s(\S*)\s(\S*)\s(\S*)\s<newline46mondego>"
"1232splitHere46","3189487splitHere46","\S"
"1233splitHere46","3189487splitHere46","Jul 6 14:33:00 radius/10.10.100.12 radius: 07/06/2010"
"1234splitHere46","3189487splitHere46","(\S*+)\s(\S*+)\s(\S*+)\s(\S*+)\s(\S*+)\s(\S*+)\s"
"1235splitHere46","3189509splitHere46","getSubsetOfX()"
"1236splitHere46","3189509splitHere46","Executor"
"1237splitHere46","3189509splitHere46","Callable"
"1238splitHere46","3189509splitHere46","getSubsetOfX(x)"
"1239splitHere46","3189509splitHere46","X"
"1240splitHere46","3189509splitHere46","public class SubsetCallable implements Callable<List<Integer>> {<newline46mondego>    X x;<newline46mondego>    public SubsetCallable(X x) {<newline46mondego>        this.x = x;<newline46mondego>    }<newline46mondego>    public List<Integer> call() {<newline46mondego>        return Util.getSubsetOfX(x);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1241splitHere46","3189509splitHere46","ExecutorService"
"1242splitHere46","3189509splitHere46","Executors"
"1243splitHere46","3189509splitHere46","ExecutorService"
"1244splitHere46","3189509splitHere46","SubsetCallable"
"1245splitHere46","3189509splitHere46","X"
"1246splitHere46","3189509splitHere46","ExecutorService exec = ...;<newline46mondego>List<SubsetCallable> callables = new LinkedList<SubsetCallable>();<newline46mondego>for (X x : lx) {<newline46mondego>    callables.append(new SubsetCallable(x));<newline46mondego>}<newline46mondego>List<Future<List<Integer>>> futures = exec.invokeAll(lc);<newline46mondego>for (Future<List<Integer>> f : futures) {<newline46mondego>    li.add(f.get());<newline46mondego>}<newline46mondego>"
"1247splitHere46","3189509splitHere46","ArrayList"
"1248splitHere46","3189573splitHere46","FileInput"
"1249splitHere46","3189669splitHere46","Logcat"
"1250splitHere46","3189669splitHere46","ddms"
"1251splitHere46","3189737splitHere46","java.net.URL"
"1252splitHere46","3189737splitHere46","MalformedURLException"
"1253splitHere46","3189803splitHere46","nanoTime()"
"1254splitHere46","3189803splitHere46","long start = System.nanoTime();<newline46mondego>// Java statements<newline46mondego>long diff = System.nanoTime() - start;<newline46mondego>"
"1255splitHere46","3189941splitHere46","input.hasNext()"
"1256splitHere46","3189941splitHere46","InputStream"
"1257splitHere46","3189941splitHere46","Scanner"
"1258splitHere46","3190031splitHere46","-Dorg.eclipse.swt.browser.XULRunnerPath"
"1259splitHere46","3190031splitHere46","-vmargs<newline46mondego>-Dorg.eclipse.swt.browser.XULRunnerPath=/usr/bin/xulrunner-1.9.2<newline46mondego>"
"1260splitHere46","3190031splitHere46","eclipse.ini"
"1261splitHere46","3190124splitHere46","Webviews"
"1262splitHere46","3190124splitHere46","ViewFlipper"
"1263splitHere46","3190195splitHere46","File"
"1264splitHere46","3190195splitHere46","(map #(.getPath %) <newline46mondego>  (.listFiles (io/file <doubleQuotes46>/home/loluser/loldir<doubleQuotes46>)))<newline46mondego>"
"1265splitHere46","3190195splitHere46","list"
"1266splitHere46","3190195splitHere46","(.list (io/file <doubleQuotes46>/home/loluser/loldir<doubleQuotes46>))<newline46mondego>"
"1267splitHere46","3190195splitHere46","slurp"
"1268splitHere46","3190507splitHere46","<build><newline46mondego>  <plugins><newline46mondego>    <plugin><newline46mondego>      <groupId>org.codehaus.cargo</groupId><newline46mondego>      <artifactId>cargo-maven2-plugin</artifactId><newline46mondego>      <version>1.0.1-sr-1</version><newline46mondego>      <configuration><newline46mondego>        <wait>true</wait><newline46mondego>        <container><newline46mondego>          <containerId>tomcat6x</containerId><newline46mondego>          <type>remote</type><newline46mondego>        </container><newline46mondego>        <configuration><newline46mondego>          <type>runtime</type> <newline46mondego>          <properties><newline46mondego>            <cargo.tomcat.manager.url>[https://yourhost/manager]</cargo.tomcat.manager.url><newline46mondego>            <cargo.remote.username>[username]</cargo.remote.username><newline46mondego>            <cargo.remote.password>[password]</cargo.remote.password><newline46mondego>          </properties><newline46mondego>        </configuration><newline46mondego>        <deployer><newline46mondego>          <type>remote</type><newline46mondego>          <deployables><newline46mondego>            <deployable><newline46mondego>              <groupId>[war group id]</groupId><newline46mondego>              <artifactId>[war artifact id]</artifactId><newline46mondego>              <type>war</type><newline46mondego>              <properties><newline46mondego>                <context>[optional root context]</context><newline46mondego>              </properties><newline46mondego>              <pingURL>[optional url to ping to know if deployable is done or not]</pingURL><newline46mondego>              <pingTimeout>[optional timeout to ping (default 20000 milliseconds)]</pingTimeout><newline46mondego>            </deployable><newline46mondego>          </deployables><newline46mondego>        </deployer><newline46mondego>      </configuration><newline46mondego>    </plugin><newline46mondego>  </plugins><newline46mondego></build><newline46mondego>"
"1269splitHere46","3190507splitHere46","mvn cargo:deploy"
"1270splitHere46","3190618splitHere46","notify"
"1271splitHere46","3190618splitHere46","notifyAll"
"1272splitHere46","3190935splitHere46","Class clazz = User.class;<newline46mondego>Field field = clazz.getDeclaredField(<doubleQuotes46>var<doubleQuotes46>);<newline46mondego>System.out.println(field.getType().getName());<newline46mondego>"
"1273splitHere46","3190935splitHere46","Class.forName(<doubleQuotes46>MyClass<doubleQuotes46>)"
"1274splitHere46","3190935splitHere46","Class clazz = User.class;<newline46mondego>String path = clazz.getPackage().getName().replaceAll(<doubleQuotes46>\\.<doubleQuotes46>,<doubleQuotes46>/<doubleQuotes46>);<newline46mondego>File sourceFile = new File(path, clazz.getName() + <doubleQuotes46>.java<doubleQuotes46>)<newline46mondego>"
"1275splitHere46","3190935splitHere46","Class.forName(<doubleQuotes46>MyClass<doubleQuotes46>)"
"1276splitHere46","3190939splitHere46","wsimport"
"1277splitHere46","3190939splitHere46","wsimport -d generated http://example.org/stock?wsdl<newline46mondego>"
"1278splitHere46","3191283splitHere46","DemuxEnum"
"1279splitHere46","3191283splitHere46","MyObject obj = new MyObject();<newline46mondego>ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();<newline46mondego>ObjectOutputStream objectOut = new ObjectOutputStream(byteOutStream);       <newline46mondego>objectOut.writeObject(obj);<newline46mondego>objectOut.close();<newline46mondego><newline46mondego>byte[] serializedObject= byteOutStream.toByteArray();<newline46mondego>someWSObject.SendObject(DemuxEnum.MyObjectType, serializedObject);<newline46mondego>"
"1280splitHere46","3191283splitHere46","(DemuxEnum, byte[])"
"1281splitHere46","3191667splitHere46","GetXxxCritical()"
"1282splitHere46","3191667splitHere46","GetXxxCritical()"
"1283splitHere46","3191814splitHere46","T"
"1284splitHere46","3191814splitHere46","T"
"1285splitHere46","3191814splitHere46","T"
"1286splitHere46","3191814splitHere46","MyClass"
"1287splitHere46","3191814splitHere46","MyClass"
"1288splitHere46","3191814splitHere46","Integer"
"1289splitHere46","3191814splitHere46","String"
"1290splitHere46","3191814splitHere46","getSortedList()"
"1291splitHere46","3191814splitHere46","MyClass"
"1292splitHere46","3191814splitHere46","T"
"1293splitHere46","3191814splitHere46","public class MyClass <T extends Comparable<T>> {<newline46mondego>"
"1294splitHere46","3191814splitHere46","T"
"1295splitHere46","3191882splitHere46","DefaultComboBoxModel"
"1296splitHere46","3191882splitHere46","setModel()"
"1297splitHere46","3191882splitHere46","JComboBox2"
"1298splitHere46","3191882splitHere46","JComboBox1"
"1299splitHere46","3191882splitHere46","import java.awt.EventQueue;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego>import javax.swing.ComboBoxModel;<newline46mondego>import javax.swing.DefaultComboBoxModel;<newline46mondego>import javax.swing.JComboBox;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego><newline46mondego>public class ComboTest extends JPanel implements ActionListener, Runnable {<newline46mondego><newline46mondego>    private final JComboBox combo1 = new JComboBox(<newline46mondego>        new String[]{<doubleQuotes46>Course 1<doubleQuotes46>, <doubleQuotes46>Course 2<doubleQuotes46>, <doubleQuotes46>Course 3<doubleQuotes46>});<newline46mondego>    private final JComboBox combo2 = new JComboBox();<newline46mondego>    private ComboBoxModel[] models = new ComboBoxModel[3];<newline46mondego><newline46mondego>    public ComboTest() {<newline46mondego>        models[0] = new DefaultComboBoxModel(<newline46mondego>            new String[]{<doubleQuotes46>A1<doubleQuotes46>, <doubleQuotes46>A2<doubleQuotes46>});<newline46mondego>        models[1] = new DefaultComboBoxModel(<newline46mondego>            new String[]{<doubleQuotes46>B1<doubleQuotes46>, <doubleQuotes46>B2<doubleQuotes46>, <doubleQuotes46>B3<doubleQuotes46>, <doubleQuotes46>B4<doubleQuotes46>});<newline46mondego>        models[2] = new DefaultComboBoxModel(<newline46mondego>            new String[]{<doubleQuotes46>C1<doubleQuotes46>, <doubleQuotes46>C2<doubleQuotes46>});<newline46mondego><newline46mondego>        combo2.setModel(models[0]);<newline46mondego>        this.add(combo1);<newline46mondego>        this.add(combo2);<newline46mondego>        combo1.addActionListener(this);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        int i = combo1.getSelectedIndex();<newline46mondego>        combo2.setModel(models[i]);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void run() {<newline46mondego>        JFrame f = new JFrame(<doubleQuotes46>ComboTest<doubleQuotes46>);<newline46mondego>        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        f.add(this);<newline46mondego>        f.pack();<newline46mondego>        f.setLocationRelativeTo(null);<newline46mondego>        f.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        EventQueue.invokeLater(new ComboTest());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1300splitHere46","3192087splitHere46","@Test<newline46mondego>public void homePage() throws Exception {<newline46mondego>    final WebClient webClient = new WebClient();<newline46mondego>    final HtmlPage page = webClient.getPage(<doubleQuotes46>http://htmlunit.sourceforge.net<doubleQuotes46>);<newline46mondego>    assertEquals(<doubleQuotes46>HtmlUnit - Welcome to HtmlUnit<doubleQuotes46>, page.getTitleText());<newline46mondego><newline46mondego>    final String pageAsXml = page.asXml();<newline46mondego>    assertTrue(pageAsXml.contains(<doubleQuotes46><body class=\<doubleQuotes46>composite\<doubleQuotes46>><doubleQuotes46>));<newline46mondego><newline46mondego>    final String pageAsText = page.asText();<newline46mondego>    assertTrue(pageAsText.contains(<doubleQuotes46>Support for the HTTP and HTTPS protocols<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"1301splitHere46","3192555splitHere46","public class SpringApplicationContextProvider implements ApplicationContextAware {<newline46mondego>  public void setApplicationContext(ApplicationContext ctx)<newline46mondego>        throws BeansException {<newline46mondego>      // Wiring the ApplicationContext into a static method<newline46mondego>      SpringApplicationContext.setApplicationContext(ctx);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1302splitHere46","3192555splitHere46","public class SpringApplicationContext {<newline46mondego>   private static ApplicationContext ctx;<newline46mondego><newline46mondego>   public static void setApplicationContext(<newline46mondego>        ApplicationContext applicationContext) {<newline46mondego>      ctx = applicationContext;<newline46mondego>   }<newline46mondego><newline46mondego><newline46mondego>   public static ApplicationContext getApplicationContext() {<newline46mondego>      return ctx;<newline46mondego>   }<newline46mondego><newline46mondego>   private SpringApplicationContext(){<newline46mondego><newline46mondego>   }<newline46mondego>}<newline46mondego>"
"1303splitHere46","3192739splitHere46","run()"
"1304splitHere46","3192739splitHere46","class MyTimerTask extends TimerTask {<newline46mondego><newline46mondego>   @Override<newline46mondego>   public void run(){<newline46mondego>   // Task to do here<newline46mondego> }<newline46mondego>}<newline46mondego>"
"1305splitHere46","3192739splitHere46","MyTimerTask task = new MyTimerTask(); // this class implements WHAT to do inside the method run();<newline46mondego>Date date = new Date(...) // This class will tell timer WHEN to do the task<newline46mondego>Timer timer = new Timer(task,date); //Good to go!<newline46mondego>"
"1306splitHere46","3192739splitHere46","Timer timer = new Timer(task,delay)"
"1307splitHere46","3192739splitHere46","delay"
"1308splitHere46","3193127splitHere46","<CheckBox android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego> android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46> <newline46mondego> android:text=<doubleQuotes46>new checkbox<doubleQuotes46><newline46mondego> android:background=<doubleQuotes46>@drawable/checkbox_background<doubleQuotes46> <newline46mondego> android:button=<doubleQuotes46>@drawable/checkbox<doubleQuotes46> /><newline46mondego>"
"1309splitHere46","3193127splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><newline46mondego><selector xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46>><newline46mondego> <item android:state_checked=<doubleQuotes46>true<doubleQuotes46> android:state_focused=<doubleQuotes46>true<doubleQuotes46><newline46mondego>  android:drawable=<doubleQuotes46>@drawable/checkbox_on_background_focus_yellow<doubleQuotes46> /><newline46mondego> <item android:state_checked=<doubleQuotes46>false<doubleQuotes46> android:state_focused=<doubleQuotes46>true<doubleQuotes46><newline46mondego>  android:drawable=<doubleQuotes46>@drawable/checkbox_off_background_focus_yellow<doubleQuotes46> /><newline46mondego> <item android:state_checked=<doubleQuotes46>false<doubleQuotes46><newline46mondego>  android:drawable=<doubleQuotes46>@drawable/checkbox_off_background<doubleQuotes46> /><newline46mondego> <item android:state_checked=<doubleQuotes46>true<doubleQuotes46><newline46mondego>  android:drawable=<doubleQuotes46>@drawable/checkbox_on_background<doubleQuotes46> /><newline46mondego></selector><newline46mondego>"
"1310splitHere46","3193241splitHere46","for(int r = 1; r<rows; r++) {<newline46mondego>  HSSFRow row = sheet.getRow(r);<newline46mondego>"
"1311splitHere46","3193241splitHere46","if (sheet == null) {<newline46mondego>        return;<newline46mondego>  }<newline46mondego><newline46mondego>  int rows = sheet.getPhysicalNumberOfRows();<newline46mondego>  for(int r = 1; r<rows; r++) {<newline46mondego>        HSSFRow row = sheet.getRow(r);<newline46mondego>        if (row != null) {<newline46mondego>             int cols = row.getLastCellNum();<newline46mondego><newline46mondego>             for(int c=0; c < cols; c++) {<newline46mondego>                 HSSFCell cell = row.getCell(c, Row.CREATE_NULL_AS_BLANK);<newline46mondego><newline46mondego>                 if (cell != null) {<newline46mondego>                    switch(cell.getColumnIndex())    {<newline46mondego>                         case 0:<newline46mondego>                         case 1:<newline46mondego>                         case ...:<newline46mondego><newline46mondego>                     }<newline46mondego>                 }<newline46mondego>             }<newline46mondego>      }<newline46mondego> }<newline46mondego>"
"1312splitHere46","3193241splitHere46","public int getPhysicalNumberOfRows()  {<newline46mondego>  return _rows.size();<newline46mondego>}<newline46mondego>"
"1313splitHere46","3193241splitHere46","try {<newline46mondego>     // Your for loop code here<newline46mondego>} catch (Exception x) {<newline46mondego>     x.printStackTrace();<newline46mondego>}<newline46mondego>"
"1314splitHere46","3193864splitHere46","instance.signal();"
"1315splitHere46","3193864splitHere46","main()"
"1316splitHere46","3193864splitHere46","public class DbSubProcessResolver implements SubProcessResolver {<newline46mondego>    private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego><newline46mondego><pre><code>    public ProcessDefinition findSubProcess(Element subProcessElement) {<newline46mondego><newline46mondego><newline46mondego>        String name = subProcessElement.attributeValue(<doubleQuotes46>name<doubleQuotes46>).replaceAll(<newline46mondego>            <doubleQuotes46>\\.<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>        ProcessDefinition subProcessDefinition = ProcessDefinition<newline46mondego>            .parseXmlResource(name + <doubleQuotes46>/processdefinition.xml<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego>        return subProcessDefinition;<newline46mondego>    }<newline46mondego>"
"1317splitHere46","3193864splitHere46","<jbpm-configuration><newline46mondego>    <bean name=<doubleQuotes46>jbpm.sub.process.resolver<doubleQuotes46> class=<doubleQuotes46>com.sample.resolver.DbSubProcessResolver<doubleQuotes46> /><newline46mondego></jbpm-configuration><newline46mondego>"
"1318splitHere46","3194011splitHere46","s1"
"1319splitHere46","3194011splitHere46","s2"
"1320splitHere46","3194011splitHere46","s1"
"1321splitHere46","3194011splitHere46","s2"
"1322splitHere46","3194011splitHere46","equal"
"1323splitHere46","3194011splitHere46","static int firstDifference(String s1, String s2, int L) {<newline46mondego>    for (int i = 0; i < L; i++) {<newline46mondego>        if (s1.charAt(i) != s2.charAt(i)) {<newline46mondego>            return i;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return L;<newline46mondego>}<newline46mondego>static boolean oneEdit(String s1, String s2) {<newline46mondego>    if (s1.length() > s2.length()) {<newline46mondego>        return oneEdit(s2, s1);<newline46mondego>    }<newline46mondego>    final int L = s1.length();<newline46mondego>    final int index = firstDifference(s1, s2, L);<newline46mondego>    if (s1.length() == s2.length() && index != L) {<newline46mondego>        return s1.substring(index+1).equals(s2.substring(index+1));<newline46mondego>    } else if (s2.length() == L + 1) {<newline46mondego>        return s1.substring(index).equals(s2.substring(index+1));<newline46mondego>    } else {<newline46mondego>        return false;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1324splitHere46","3194011splitHere46","String[][] tests = {<newline46mondego>        { <doubleQuotes46>1<doubleQuotes46>, <doubleQuotes46><doubleQuotes46> },<newline46mondego>        { <doubleQuotes46>123<doubleQuotes46>, <doubleQuotes46><doubleQuotes46> },<newline46mondego>        { <doubleQuotes46>this<doubleQuotes46>, <doubleQuotes46>that<doubleQuotes46> },<newline46mondego>        { <doubleQuotes46>tit<doubleQuotes46>, <doubleQuotes46>tat<doubleQuotes46> },<newline46mondego>        { <doubleQuotes46>word<doubleQuotes46>, <doubleQuotes46>sword<doubleQuotes46> },<newline46mondego>        { <doubleQuotes46>desert<doubleQuotes46>, <doubleQuotes46>dessert<doubleQuotes46> },<newline46mondego>        { <doubleQuotes46>lulz<doubleQuotes46>, <doubleQuotes46>lul<doubleQuotes46> },<newline46mondego>        { <doubleQuotes46>same<doubleQuotes46>, <doubleQuotes46>same<doubleQuotes46> },<newline46mondego>    };<newline46mondego>    for (String[] test : tests) {<newline46mondego>        System.out.printf(<doubleQuotes46>[%s|%s] = %s%n<doubleQuotes46>,<newline46mondego>            test[0], test[1], oneEdit(test[0], test[1])<newline46mondego>        );<newline46mondego>    }<newline46mondego>"
"1325splitHere46","3194011splitHere46","[1|] = true<newline46mondego>[123|] = false<newline46mondego>[this|that] = false<newline46mondego>[tit|tat] = true<newline46mondego>[word|sword] = true<newline46mondego>[desert|dessert] = true<newline46mondego>[lulz|lul] = true<newline46mondego>[same|same] = false<newline46mondego>"
"1326splitHere46","3194265splitHere46","Collection"
"1327splitHere46","3194265splitHere46","Object"
"1328splitHere46","3194265splitHere46","Collection<String>"
"1329splitHere46","3194265splitHere46","String"
"1330splitHere46","3194265splitHere46","String"
"1331splitHere46","3194265splitHere46","Collection"
"1332splitHere46","3194265splitHere46","Collection<List>"
"1333splitHere46","3194265splitHere46","List"
"1334splitHere46","3194400splitHere46","jdbc:mysql://localhost:3306"
"1335splitHere46","3194400splitHere46","[PHP]"
"1336splitHere46","3194400splitHere46","java.net.URLConnection"
"1337splitHere46","3194400splitHere46","URLconnection connection = new URL(getCodeBase(), <doubleQuotes46>script.php?action=getdetails&productid=1<doubleQuotes46>).openConnection();<newline46mondego>InputStream response = connection.getInputStream();<newline46mondego>// ...<newline46mondego>"
"1338splitHere46","3194400splitHere46","org.gjt.mm.mysql.Driver"
"1339splitHere46","3194400splitHere46","com.mysql.jdbc.Driver"
"1340splitHere46","3194400splitHere46","Class#newInstance()"
"1341splitHere46","3194400splitHere46","Class#forName()"
"1342splitHere46","3194586splitHere46","run()"
"1343splitHere46","3194586splitHere46","boolean"
"1344splitHere46","3194586splitHere46","true"
"1345splitHere46","3194586splitHere46","class MyThread extends Thread<newline46mondego>{<newline46mondego>  volatile boolean finished = false;<newline46mondego><newline46mondego>  public void stopMe()<newline46mondego>  {<newline46mondego>    finished = true;<newline46mondego>  }<newline46mondego><newline46mondego>  public void run()<newline46mondego>  {<newline46mondego>    while (!finished)<newline46mondego>    {<newline46mondego>      //do dirty work<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1346splitHere46","3194586splitHere46","stop()"
"1347splitHere46","3194598splitHere46","service.setHandlerResolver(new AwsHandlerResolver(my_AWS_SECRET_KEY));<newline46mondego>"
"1348splitHere46","3194768splitHere46","Class<FileDescriptor> clazz = FileDescriptor.class;<newline46mondego><newline46mondego>    Constructor<FileDescriptor> c;<newline46mondego>    try {<newline46mondego>            c = clazz.getDeclaredConstructor(new Class[] { Integer.TYPE });<newline46mondego>    } catch (SecurityException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            return;<newline46mondego>    } catch (NoSuchMethodException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            return;<newline46mondego>    }<newline46mondego><newline46mondego>    c.setAccessible(true);<newline46mondego>    FileDescriptor fd;<newline46mondego>    try {<newline46mondego>            fd = c.newInstance(new Integer(socket));<newline46mondego>    } catch (IllegalArgumentException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            return;<newline46mondego>    } catch (InstantiationException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            return;<newline46mondego>    } catch (IllegalAccessException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            return;<newline46mondego>    } catch (InvocationTargetException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            return;<newline46mondego>    }<newline46mondego><newline46mondego>    FileOutputStream os = new FileOutputStream(fd);<newline46mondego>    FileInputStream is = new FileInputStream(fd);<newline46mondego>"
"1349splitHere46","3194837splitHere46","<import />"
"1350splitHere46","3194837splitHere46","<bean />"
"1351splitHere46","3194956splitHere46","InputStream"
"1352splitHere46","3194956splitHere46","FileInputStream"
"1353splitHere46","3194956splitHere46","InputStreamReader"
"1354splitHere46","3194956splitHere46","Reader"
"1355splitHere46","3194956splitHere46","InputStream"
"1356splitHere46","3194956splitHere46","DataInputStream"
"1357splitHere46","3194956splitHere46","InputStreamReader"
"1358splitHere46","3195015splitHere46","List<A> list = getList();<newline46mondego>"
"1359splitHere46","3195015splitHere46","list.add(new C()); // Where C extends A<newline46mondego>"
"1360splitHere46","3195015splitHere46","List<B>"
"1361splitHere46","3195015splitHere46","B"
"1362splitHere46","3195015splitHere46","getList"
"1363splitHere46","3195015splitHere46","List<? extends A>"
"1364splitHere46","3195713splitHere46","pnlButton.setLayout(null);<newline46mondego>"
"1365splitHere46","3195713splitHere46","setBounds"
"1366splitHere46","3195915splitHere46","@EJB"
"1367splitHere46","3195915splitHere46","main()"
"1368splitHere46","3195915splitHere46","final"
"1369splitHere46","3195924splitHere46","Activity"
"1370splitHere46","3195924splitHere46","setContentView"
"1371splitHere46","3195924splitHere46","fill_parent"
"1372splitHere46","3195924splitHere46","LinearLayout"
"1373splitHere46","3195924splitHere46","<LinearLayout android:id=<doubleQuotes46>@+id/custom_titlebar_container<doubleQuotes46><newline46mondego>    android:orientation=<doubleQuotes46>vertical<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>><newline46mondego>   <!--titlebar here--><newline46mondego></LinearLayout><newline46mondego>"
"1374splitHere46","3195924splitHere46","getContentAreaLayoutId()"
"1375splitHere46","3195924splitHere46","CustomTitlebarActivity"
"1376splitHere46","3195924splitHere46","onCreate()"
"1377splitHere46","3195924splitHere46","CustomTitlebarActivity"
"1378splitHere46","3195924splitHere46","setContentView(R.layout.custom_titlebar_activity_frame_from_above);<newline46mondego>View.inflate(this, getContentAreaLayoutId(), findViewById(R.id.custom_titlebar_container));<newline46mondego>"
"1379splitHere46","3195924splitHere46","View"
"1380splitHere46","3195924splitHere46","int"
"1381splitHere46","3195991splitHere46","Restrictions.isNotEmpty()"
"1382splitHere46","3195991splitHere46","List<A> r = s.createCriteria(A.class)<newline46mondego>    .add(Restrictions.or(<newline46mondego>        Restrictions.isNotEmpty(<doubleQuotes46>a1<doubleQuotes46>), <newline46mondego>        Restrictions.isNotEmpty(<doubleQuotes46>a2<doubleQuotes46>))).list();<newline46mondego>"
"1383splitHere46","3196047splitHere46","static"
"1384splitHere46","3196755splitHere46","Automatic Internationalization"
"1385splitHere46","3196755splitHere46","Tools > Options > Miscellaneous > Gui Builder"
"1386splitHere46","3196755splitHere46","Automatic Internationalization"
"1387splitHere46","3196755splitHere46","off"
"1388splitHere46","3196804splitHere46","AWScoreAdapterImpl"
"1389splitHere46","3196804splitHere46","Adaptable"
"1390splitHere46","3196804splitHere46","Adaptable"
"1391splitHere46","3196804splitHere46","AWScoreAdapterImpl"
"1392splitHere46","3196804splitHere46","AdapterManager"
"1393splitHere46","3197098splitHere46","<jnlp><information><shortcut>"
"1394splitHere46","3197255splitHere46","FutureTask"
"1395splitHere46","3197255splitHere46","Runnable"
"1396splitHere46","3197255splitHere46","run()"
"1397splitHere46","3197255splitHere46","Runnable"
"1398splitHere46","3197262splitHere46","ClassLoader#getResourceAsStream()"
"1399splitHere46","3197262splitHere46","ServletContext#getResourceAsStream()"
"1400splitHere46","3197262splitHere46","ServletContext"
"1401splitHere46","3197262splitHere46","getServletContext()"
"1402splitHere46","3197262splitHere46","InputStream input = getServletContext().getResourceAsStream(<doubleQuotes46>/img/missingphoto.jpg<doubleQuotes46>);<newline46mondego>"
"1403splitHere46","3197262splitHere46","byte[]"
"1404splitHere46","3197262splitHere46","input = getServletContext().getResourceAsStream(path);<newline46mondego>output = response.getOutputStream();<newline46mondego>byte[] buffer = new byte[1024];<newline46mondego>for (int length = 0; (length = input.read(buffer)) > 0;) {<newline46mondego>    output.write(buffer, 0, length);<newline46mondego>}<newline46mondego>"
"1405splitHere46","3197550splitHere46","InputStreamReader"
"1406splitHere46","3197714splitHere46","ResultSet#next()"
"1407splitHere46","3197714splitHere46","while"
"1408splitHere46","3197714splitHere46","while (rset1.next()) {<newline46mondego>    System.out.println(<doubleQuotes46> name -> <doubleQuotes46> + rset1.getString(2));<newline46mondego>}<newline46mondego>"
"1409splitHere46","3197714splitHere46","if"
"1410splitHere46","3197714splitHere46","if (rset1.next()) {<newline46mondego>    System.out.println(<doubleQuotes46> name -> <doubleQuotes46> + rset1.getString(2));<newline46mondego>}<newline46mondego>"
"1411splitHere46","3197757splitHere46","addSeparator()"
"1412splitHere46","3197757splitHere46","addSeparator(new Dimension(20,20))"
"1413splitHere46","3198060splitHere46","application/xhtml+xml"
"1414splitHere46","3198060splitHere46","HtmlResponseWriter"
"1415splitHere46","3198060splitHere46","HtmlResponseWriter"
"1416splitHere46","3198060splitHere46","final"
"1417splitHere46","3198060splitHere46","application/xhtml+xml"
"1418splitHere46","3198060splitHere46","faces-config.xml"
"1419splitHere46","3198060splitHere46","HtmlResponseWriter"
"1420splitHere46","3198060splitHere46","HtmlResponseWriter"
"1421splitHere46","3198060splitHere46","ResponseWriter"
"1422splitHere46","3198060splitHere46","HTMLResponseWriter"
"1423splitHere46","3198060splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>windows-1252<doubleQuotes46>?><newline46mondego><faces-config version=<doubleQuotes46>1.2<doubleQuotes46> xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/javaee<doubleQuotes46>><newline46mondego>  <application><newline46mondego>    <default-render-kit-id>oracle.adf.rich</default-render-kit-id><newline46mondego>  </application><newline46mondego>  <render-kit><newline46mondego>    <render-kit-id>oracle.adf.rich</render-kit-id><newline46mondego>    <renderer><newline46mondego>      <component-family>org.apache.myfaces.trinidad.Input</component-family><newline46mondego>      <renderer-type>oracle.adf.rich.Text</renderer-type><newline46mondego>      <renderer-class>com.company.jsf.renders.text.CustomRenderer</renderer-class><newline46mondego>    </renderer><newline46mondego>  </render-kit><newline46mondego></faces-config><newline46mondego>"
"1424splitHere46","3198062splitHere46","@ImplementedBy"
"1425splitHere46","3198062splitHere46","HistoryManager"
"1426splitHere46","3198062splitHere46","Module"
"1427splitHere46","3198062splitHere46","HistoryManager"
"1428splitHere46","3198062splitHere46","com.google.inject.Module"
"1429splitHere46","3198062splitHere46","AbstractModule"
"1430splitHere46","3198062splitHere46","protected void configure() {<newline46mondego>  …<newline46mondego>  bind(HistoryManager.class).to(HistoryManagerImpl.class);<newline46mondego>  …<newline46mondego>}<newline46mondego>"
"1431splitHere46","3198062splitHere46","println()"
"1432splitHere46","3198062splitHere46","HistoryManager mgr = ViewScanApp.getApplication().getHistoryManager();<newline46mondego>System.out.println(<doubleQuotes46>HistoryManager implementation: <doubleQuotes46> + mgr.getClass());<newline46mondego>if (!mgr.isAuthenticated())<newline46mondego>   …<newline46mondego>"
"1433splitHere46","3198062splitHere46","HistoryManagerImpl"
"1434splitHere46","3198065splitHere46","List<String> strings = Arrays.asList(new String[] {<doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>bar<doubleQuotes46>, <doubleQuotes46>baz<doubleQuotes46>});"
"1435splitHere46","3198065splitHere46","List<String> strings = Arrays.asList(<doubleQuotes46>foo,bar,baz<doubleQuotes46>.split(<doubleQuotes46>,<doubleQuotes46>));"
"1436splitHere46","3198178splitHere46","lowerCamelCase()"
"1437splitHere46","3198178splitHere46","UpperCamelCase()"
"1438splitHere46","3198178splitHere46","UpperCamelCase()"
"1439splitHere46","3198178splitHere46","int side1;<newline46mondego>int side2;<newline46mondego>"
"1440splitHere46","3198178splitHere46","private int side1;<newline46mondego>private int side2;<newline46mondego>"
"1441splitHere46","3198178splitHere46","private final int side1;<newline46mondego>private final int side2;<newline46mondego>"
"1442splitHere46","3198178splitHere46","side1"
"1443splitHere46","3198178splitHere46","side2"
"1444splitHere46","3198178splitHere46","area()"
"1445splitHere46","3198178splitHere46","static"
"1446splitHere46","3198178splitHere46","Enumeration"
"1447splitHere46","3198178splitHere46","Vector"
"1448splitHere46","3198178splitHere46","Hashtable"
"1449splitHere46","3198406splitHere46","DatabaseUtils.dumpCursorToString(cursor);"
"1450splitHere46","3198406splitHere46","if (Integer.parseInt(cur.getString(<newline46mondego>           cur.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER))) > 0) {<newline46mondego>        Cursor pCur = cr.query(<newline46mondego>    ContactsContract.CommonDataKinds.Phone.CONTENT_URI, <newline46mondego>    null, <newline46mondego>    ContactsContract.CommonDataKinds.Phone.CONTACT_ID +<doubleQuotes46> = ?<doubleQuotes46>, <newline46mondego>    new String[]{id}, null);<newline46mondego>    while (pCur.moveToNext()) {<newline46mondego>    // Do something with phones<newline46mondego>    } <newline46mondego>    pCur.close();<newline46mondego>}<newline46mondego>"
"1451splitHere46","3198484splitHere46","BarTestOne one = new BarTestOne();<newline46mondego>BarTestTwo two = new BarTestTwo();<newline46mondego><newline46mondego>Class<?> clazz1 = (Class<?>) ((ParameterizedType) one.getClass().getGenericSuperclass()).getActualTypeArguments()[0];       <newline46mondego>Class<?> clazz2 = (Class<?>) ((ParameterizedType) ((ParameterizedType) two.getClass().getGenericSuperclass()).getActualTypeArguments()[0]).getRawType();<newline46mondego><newline46mondego>System.out.println(clazz1.equals(clazz2));<newline46mondego>"
"1452splitHere46","3198544splitHere46","JMenuItem"
"1453splitHere46","3198544splitHere46","setActionCommand"
"1454splitHere46","3198594splitHere46","getConstraintsForClass()"
"1455splitHere46","3198594splitHere46","getConstrainedProperties()"
"1456splitHere46","3198677splitHere46","import javax.swing.*;<newline46mondego>import javax.swing.plaf.*;<newline46mondego>import java.awt.event.*;<newline46mondego><newline46mondego>public class JTabBug{<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>      JTabbedPane jTabbedPane = new JTabbedPane()<newline46mondego>      {<newline46mondego>        @Override<newline46mondego>        public String getToolTipText(MouseEvent e)<newline46mondego>        {<newline46mondego>            int index = ((TabbedPaneUI)ui).tabForCoordinate(this, e.getX(), e.getY());<newline46mondego><newline46mondego>            if (index != -1)<newline46mondego>            {<newline46mondego>                JComponent component = (JComponent)getTabComponentAt(index);<newline46mondego>                return component.getToolTipText();<newline46mondego>            }<newline46mondego><newline46mondego>            return super.getToolTipText(e);<newline46mondego>        }<newline46mondego>      };<newline46mondego>      ToolTipManager.sharedInstance().registerComponent(jTabbedPane);<newline46mondego>      jTabbedPane.addTab(<doubleQuotes46>Red<doubleQuotes46>, new JLabel(<doubleQuotes46>Roses<doubleQuotes46>));<newline46mondego>      jTabbedPane.addTab(<doubleQuotes46>Blue<doubleQuotes46>, new JLabel(<doubleQuotes46>Skies<doubleQuotes46>));<newline46mondego>      jTabbedPane.addTab(<doubleQuotes46>Green<doubleQuotes46>, new JLabel(<doubleQuotes46>Grass<doubleQuotes46>));<newline46mondego><newline46mondego>      for (int i = 0; i < jTabbedPane.getTabCount(); i++) {<newline46mondego>        JLabel tabComponent = new JLabel(jTabbedPane.getTitleAt(i));<newline46mondego>        tabComponent.setToolTipText(<doubleQuotes46>Tip: <doubleQuotes46> + tabComponent.getText());<newline46mondego>        ToolTipManager.sharedInstance().unregisterComponent(tabComponent);<newline46mondego>        jTabbedPane.setTabComponentAt(i, tabComponent);<newline46mondego>      }<newline46mondego><newline46mondego>      JFrame jFrame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>      jFrame.add(jTabbedPane);<newline46mondego>      jFrame.setSize(400, 500);<newline46mondego>      jFrame.setVisible(true);<newline46mondego>      jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1457splitHere46","3198754splitHere46","fathers/create.jspx"
"1458splitHere46","3198754splitHere46","<field:simple field=<doubleQuotes46>children<doubleQuotes46> id=<doubleQuotes46>c:family.Father.children<doubleQuotes46> messageCode=<doubleQuotes46>entity.reference.not.managed<doubleQuotes46> <newline46mondego> messageCodeAttribute=<doubleQuotes46>Child<doubleQuotes46> z=<doubleQuotes46>dMKrUOiCeYNub4vNayuiWJ99s1k=<doubleQuotes46>/><newline46mondego>"
"1459splitHere46","3198754splitHere46","<field:select field=<doubleQuotes46>children<doubleQuotes46> id=<doubleQuotes46>c:family.Father.children<doubleQuotes46> itemValue=<doubleQuotes46>id<doubleQuotes46> <newline46mondego> items=<doubleQuotes46>${children}<doubleQuotes46> multiple=<doubleQuotes46>true<doubleQuotes46> path=<doubleQuotes46>/children<doubleQuotes46>/><newline46mondego>"
"1460splitHere46","3198974splitHere46","java"
"1461splitHere46","3198974splitHere46","${PATH}"
"1462splitHere46","3198974splitHere46","abc.jar"
"1463splitHere46","3198974splitHere46","${CLASSPATH}"
"1464splitHere46","3198974splitHere46","echo"
"1465splitHere46","3198974splitHere46","set +x"
"1466splitHere46","3198974splitHere46","bash"
"1467splitHere46","3199217splitHere46","new A() { <newline46mondego>   func1(){  } <newline46mondego>}; <newline46mondego>"
"1468splitHere46","3199217splitHere46","A"
"1469splitHere46","3199217splitHere46","A"
"1470splitHere46","3199217splitHere46","B"
"1471splitHere46","3199217splitHere46","$1"
"1472splitHere46","3199217splitHere46","B"
"1473splitHere46","3199217splitHere46","A"
"1474splitHere46","3199217splitHere46","objectA"
"1475splitHere46","3199217splitHere46","final"
"1476splitHere46","3199217splitHere46","B objectB = new B() { <newline46mondego>   func1(){ <newline46mondego>     objectA.func1()<newline46mondego>   } <newline46mondego>   func2(){ <newline46mondego>     //implementation <newline46mondego>   } <newline46mondego>}; <newline46mondego>"
"1477splitHere46","3199248splitHere46","URLConnection#setRequestProperty()"
"1478splitHere46","3199248splitHere46","connection.setRequestProperty(<doubleQuotes46>Content-Type<doubleQuotes46>, <doubleQuotes46>text/plain<doubleQuotes46>);<newline46mondego>"
"1479splitHere46","3199248splitHere46","URLConnection"
"1480splitHere46","3199278splitHere46","response.setCharacterEncoding(String)"
"1481splitHere46","3199278splitHere46","response.setHeader(<doubleQuotes46>Content-Type<doubleQuotes46>, <doubleQuotes46>application/json; charset=ISO-8859-1<doubleQuotes46>);<newline46mondego>"
"1482splitHere46","3199278splitHere46","response.setContentType(<doubleQuotes46>application/json<doubleQuotes46>);<newline46mondego>response.setCharacterEncoding(<doubleQuotes46>ISO-8859-1<doubleQuotes46>); <newline46mondego>"
"1483splitHere46","3199297splitHere46","delay()"
"1484splitHere46","3199297splitHere46","waitForIdle()"
"1485splitHere46","3199297splitHere46","Robot.delay()"
"1486splitHere46","3199297splitHere46","Thread.sleep()"
"1487splitHere46","3199297splitHere46","Thread.sleep()"
"1488splitHere46","3199319splitHere46","synchronized (list) {<newline46mondego>   list.put()...<newline46mondego>}<newline46mondego><newline46mondego>synchronized (list) {<newline46mondego>   list.get()...<newline46mondego>}<newline46mondego>"
"1489splitHere46","3199347splitHere46","<element column=<doubleQuotes46>propertyValue<doubleQuotes46> type=<doubleQuotes46>string<doubleQuotes46>/>"
"1490splitHere46","3199433splitHere46","List<String> compositKey = Arrays.asList(getSubareaId(), getProcedureId());<newline46mondego>"
"1491splitHere46","3199433splitHere46","SimpleEntry<String, String> compositKey = new SimpleEntry(getSubareaId(), getProcedureId());<newline46mondego>"
"1492splitHere46","3199433splitHere46",":"
"1493splitHere46","3199556splitHere46","Entity entity = new Entity(key);<newline46mondego>"
"1494splitHere46","3199591splitHere46","class Foo<K, V><newline46mondego>{<newline46mondego>    private final Map<K, V> keyValue;<newline46mondego>    private final Map<V, K> valueKey;<newline46mondego><newline46mondego>    {<newline46mondego>        keyValue = new HashMap<K, V>();<newline46mondego>        valueKey = new HashMap<V, K>();<newline46mondego>    }<newline46mondego><newline46mondego>    // this makes sure that if you do not have duplicate values.<newline46mondego>    public void put(final K key, final V value)<newline46mondego>    {<newline46mondego>        if(keyValue.containsValue(value))<newline46mondego>        {<newline46mondego>            keyValue.remove(valueKey.get(value));<newline46mondego>        }<newline46mondego><newline46mondego>        keyValue.put(key, value);<newline46mondego>        valueKey.put(value, key);<newline46mondego>    }<newline46mondego><newline46mondego>    public V getValueForKey(final K key)<newline46mondego>    {<newline46mondego>        return (keyValue.get(key));<newline46mondego>    }<newline46mondego><newline46mondego>    public K getKeyForValue(final V value)<newline46mondego>    {<newline46mondego>        return (valueKey.get(value));<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(final String[] argv)<newline46mondego>    {<newline46mondego>        Foo<String, String> foo;<newline46mondego><newline46mondego>        foo = new Foo<String, String>();<newline46mondego>        foo.put(<doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego>        foo.put(<doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>World<doubleQuotes46>);<newline46mondego>        foo.put(<doubleQuotes46>c<doubleQuotes46>, <doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego><newline46mondego>        System.out.println(foo.getValueForKey(<doubleQuotes46>a<doubleQuotes46>));<newline46mondego>        System.out.println(foo.getValueForKey(<doubleQuotes46>b<doubleQuotes46>));<newline46mondego>        System.out.println(foo.getValueForKey(<doubleQuotes46>c<doubleQuotes46>));<newline46mondego><newline46mondego>        System.out.println(foo.getKeyForValue(<doubleQuotes46>Hello<doubleQuotes46>));<newline46mondego>        System.out.println(foo.getKeyForValue(<doubleQuotes46>World<doubleQuotes46>));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1495splitHere46","3199591splitHere46","class Foo<K, V><newline46mondego>{<newline46mondego>    private final Map<K, V> keyValue;<newline46mondego>    private final Map<V, List<K>> valueKeys;<newline46mondego><newline46mondego>    {<newline46mondego>        keyValue = new HashMap<K, V>();<newline46mondego>        valueKeys = new HashMap<V, List<K>>();<newline46mondego>    }<newline46mondego><newline46mondego>    public void put(final K key, final V value)<newline46mondego>    {<newline46mondego>        List<K> values;<newline46mondego><newline46mondego>        keyValue.put(key, value);<newline46mondego><newline46mondego>        values = valueKeys.get(value);<newline46mondego><newline46mondego>        if(values == null)<newline46mondego>        {<newline46mondego>            values = new ArrayList<K>();<newline46mondego>            valueKeys.put(value, values);<newline46mondego>        }<newline46mondego><newline46mondego>        values.add(key);<newline46mondego>    }<newline46mondego><newline46mondego>    public V getValueForKey(final K key)<newline46mondego>    {<newline46mondego>        return (keyValue.get(key));<newline46mondego>    }<newline46mondego><newline46mondego>    public List<K> getKeyForValue(final V value)<newline46mondego>    {<newline46mondego>        return (valueKeys.get(value));<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(final String[] argv)<newline46mondego>    {<newline46mondego>        Foo<String, String> foo;<newline46mondego><newline46mondego>        foo = new Foo<String, String>();<newline46mondego>        foo.put(<doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego>        foo.put(<doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>World<doubleQuotes46>);<newline46mondego>        foo.put(<doubleQuotes46>c<doubleQuotes46>, <doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego><newline46mondego>        System.out.println(foo.getValueForKey(<doubleQuotes46>a<doubleQuotes46>));<newline46mondego>        System.out.println(foo.getValueForKey(<doubleQuotes46>b<doubleQuotes46>));<newline46mondego>        System.out.println(foo.getValueForKey(<doubleQuotes46>c<doubleQuotes46>));<newline46mondego><newline46mondego>        System.out.println(foo.getKeyForValue(<doubleQuotes46>Hello<doubleQuotes46>));<newline46mondego>        System.out.println(foo.getKeyForValue(<doubleQuotes46>World<doubleQuotes46>));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1496splitHere46","3199643splitHere46","env.put(Context.SECURITY_PROTOCOL, <doubleQuotes46>ssl<doubleQuotes46>);<newline46mondego>"
"1497splitHere46","3199663splitHere46","import java.net.*; import java.io.*;<newline46mondego><newline46mondego>public class asp {<newline46mondego><newline46mondego>    public static URLConnection connection;<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>        try {<newline46mondego>        System.out.println(<doubleQuotes46>Hello World!<doubleQuotes46>); // Display the string.<newline46mondego>            try {<newline46mondego>            URLConnection connection = new URL(<doubleQuotes46>http://localhost/post.php?players<doubleQuotes46>).openConnection();<newline46mondego>            InputStream response = connection.getInputStream();<newline46mondego>            System.out.println(response);<newline46mondego><newline46mondego>            }catch(MalformedURLException rex) {<newline46mondego>                System.out.println(<doubleQuotes46>Oops my url isn't right<doubleQuotes46>);<newline46mondego>        }catch(IOException ex) {}<newline46mondego>    }    <newline46mondego>}<newline46mondego>"
"1498splitHere46","3199748splitHere46","public <T> Map<String, T> mapMe(Collection<T> list) {<newline46mondego>   Map<String, T> map = new HashMap<String, T>();<newline46mondego>   for (T el : list) {<newline46mondego>       map.put(el.toString(), el);<newline46mondego>   }   <newline46mondego>   return map;<newline46mondego>}<newline46mondego>"
"1499splitHere46","3199885splitHere46","String name = tag.getClass().getName();<newline46mondego>if (tag instanceof TagAdapter) {<newline46mondego>  name = ((TagAdapter)tag).getAdaptee().getClass().getName();<newline46mondego>}<newline46mondego>parents.append(<doubleQuotes46>child of <doubleQuotes46>).append(name).append(<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>"
"1500splitHere46","3200119splitHere46","import org.jsoup.Jsoup;<newline46mondego>import org.jsoup.nodes.Document;<newline46mondego><newline46mondego>public class JsoupDemo {<newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        URL url = new URL(<doubleQuotes46>http://localhost/mystikrpg/post.php?players<doubleQuotes46>);<newline46mondego>        Document doc = Jsoup.parse(url, 3*1000);<newline46mondego><newline46mondego>        String text = doc.body().text();<newline46mondego><newline46mondego>        System.out.println(text); // outputs 1<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1501splitHere46","3200214splitHere46","package x1;<newline46mondego><newline46mondego>public abstract class P1<newline46mondego>{<newline46mondego>    abstract void foo();<newline46mondego>}<newline46mondego>"
"1502splitHere46","3200214splitHere46","package x2;<newline46mondego><newline46mondego>public class P2 extends x1.P1<newline46mondego>{<newline46mondego>    void foo() {}<newline46mondego>}<newline46mondego>"
"1503splitHere46","3200214splitHere46","P2.java:3: P2 is not abstract and does not override abstract method foo() in P1<newline46mondego>public class P2 extends x1.P1<newline46mondego>       ^<newline46mondego>1 error<newline46mondego>"
"1504splitHere46","3200214splitHere46","foo"
"1505splitHere46","3200215splitHere46","URL pageURL = new URL(<doubleQuotes46>http://www.nytimes.com/2010/07/08/technology/personaltech/08pogue.html?ref=technology<doubleQuotes46>);<newline46mondego>URL imageURL = new URL(pageURL, <doubleQuotes46>../public/images/header.jpg<doubleQuotes46>);<newline46mondego>"
"1506splitHere46","3200373splitHere46","getMethod()"
"1507splitHere46","3200373splitHere46","getDeclaredMethod()"
"1508splitHere46","3200572splitHere46","System.out.print(<doubleQuotes46>Hello!<doubleQuotes46> + (char)13);<newline46mondego>System.out.print(<doubleQuotes46>      <doubleQuotes46>);<newline46mondego>System.out.print(<doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego>"
"1509splitHere46","3200572splitHere46","\b"
"1510splitHere46","3200580splitHere46","JOptionPane.INFORMATION_MESSAGE"
"1511splitHere46","3200580splitHere46","JOptionPane.showMessageDialog(null, <newline46mondego>        <doubleQuotes46>Results<doubleQuotes46> + <newline46mondego>        <doubleQuotes46>\n The circumference of the circle is: <doubleQuotes46> + formatter.format(2*Math.PI*radius) + <doubleQuotes46> Centimeters<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>\n The diameter of the circle is: <doubleQuotes46> + 2*radius + <doubleQuotes46> Centimeters<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>\n The area of the circle is: <doubleQuotes46> + formatter.format(Math.PI*Math.pow(radius,2)) + <doubleQuotes46> Centimeters<doubleQuotes46>, <newline46mondego>        <doubleQuotes46>Results<doubleQuotes46>, <newline46mondego>        JOptionPane.INFORMATION_MESSAGE);<newline46mondego>"
"1512splitHere46","3200637splitHere46","Container cp = main.getContentPane();<newline46mondego>"
"1513splitHere46","3200637splitHere46","cp.add(pnlButton);<newline46mondego>"
"1514splitHere46","3200789splitHere46","nsCookieService::SetCookieInternal"
"1515splitHere46","3200989splitHere46","HttpServlet"
"1516splitHere46","3200989splitHere46","web.xml"
"1517splitHere46","3200989splitHere46","action=<doubleQuotes46>/yourServletMapping"
"1518splitHere46","3200989splitHere46","doPost(..)"
"1519splitHere46","3200989splitHere46","WEB-INF/lib"
"1520splitHere46","3201254splitHere46","Element"
"1521splitHere46","3201254splitHere46","String namespace = <doubleQuotes46>http://my-namespace<doubleQuotes46>;<newline46mondego>Element request = new Element(<doubleQuotes46>request<doubleQuotes46>, namespace);<newline46mondego><newline46mondego>Element type = new Element(<doubleQuotes46>type<doubleQuotes46>, namespace);<newline46mondego>type.appendChild(<doubleQuotes46>Test<doubleQuotes46>);<newline46mondego><newline46mondego>request.appendChild(type);<newline46mondego><newline46mondego>Element data = new Element(<doubleQuotes46>data<doubleQuotes46>, namespace);<newline46mondego>request.appendChild(data);<newline46mondego><newline46mondego>Element myData = new Element(<doubleQuotes46>myData<doubleQuotes46>, namespace);<newline46mondego>myData.appendChild(<doubleQuotes46>test data<doubleQuotes46>);<newline46mondego>data.appendChild(myData);<newline46mondego><newline46mondego>Document doc = new Document(request);<newline46mondego>System.out.println(doc.toXML());<newline46mondego>"
"1522splitHere46","3201254splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46>?><newline46mondego><request xmlns=<doubleQuotes46>http://my-namespace<doubleQuotes46>><newline46mondego>  <type>Test</type><newline46mondego>  <data><newline46mondego>    <myData>test data</myData><newline46mondego>  </data><newline46mondego></request><newline46mondego>"
"1523splitHere46","3201294splitHere46","MyThread"
"1524splitHere46","3201294splitHere46","MyThread x = new MyThread();<newline46mondego>new Thread(x).start();<newline46mondego>new Thread(x).start();<newline46mondego>new Thread(x).start();<newline46mondego>"
"1525splitHere46","3201294splitHere46","MyThread"
"1526splitHere46","3201408splitHere46","35/4"
"1527splitHere46","3201408splitHere46","double result = 35 / 4;<newline46mondego>"
"1528splitHere46","3201408splitHere46","8.0"
"1529splitHere46","3201408splitHere46","35"
"1530splitHere46","3201408splitHere46","4"
"1531splitHere46","3201408splitHere46","8.75"
"1532splitHere46","3201408splitHere46","double result = 35. / 4;<newline46mondego>"
"1533splitHere46","3201408splitHere46","double a = 35;<newline46mondego>double b = 4;<newline46mondego>"
"1534splitHere46","3201408splitHere46","int"
"1535splitHere46","3201408splitHere46","Math.floor()"
"1536splitHere46","3201747splitHere46","java.util.regex.Pattern"
"1537splitHere46","3201747splitHere46","[a-d[m-p]]"
"1538splitHere46","3201747splitHere46","a"
"1539splitHere46","3201747splitHere46","d"
"1540splitHere46","3201747splitHere46","m"
"1541splitHere46","3201747splitHere46","p"
"1542splitHere46","3201747splitHere46","[a-dm-p]"
"1543splitHere46","3201747splitHere46","[a-z&&[def]]"
"1544splitHere46","3201747splitHere46","d"
"1545splitHere46","3201747splitHere46","e"
"1546splitHere46","3201747splitHere46","f"
"1547splitHere46","3201747splitHere46","[a-z&&[^bc]]"
"1548splitHere46","3201747splitHere46","a"
"1549splitHere46","3201747splitHere46","z"
"1550splitHere46","3201747splitHere46","b"
"1551splitHere46","3201747splitHere46","c"
"1552splitHere46","3201747splitHere46","[ad-z]"
"1553splitHere46","3201747splitHere46","matches"
"1554splitHere46","3201747splitHere46","[a-z&&[^aeiou]]"
"1555splitHere46","3201747splitHere46","[a-z-[aeiou]]"
"1556splitHere46","3201782splitHere46","public class MyClass<T> {<newline46mondego><newline46mondego>   private Class<T> clazz;<newline46mondego>   public MyClass (Class<T> clazz) {<newline46mondego>     this.clazz = clazz;<newline46mondego>   }<newline46mondego><newline46mondego>   public String getPackageNameOfGenericClass() {<newline46mondego>     return clazz.getPackage().getName(); <newline46mondego>   }<newline46mondego><newline46mondego>}<newline46mondego>"
"1557splitHere46","3202129splitHere46","public class Process {<newline46mondego>  public static enum TYPE { ACTIVE , NOT_ACTIVE } ; <newline46mondego><newline46mondego>  private ArrayList<String> names ;<newline46mondego>  private String emailSent emailSent ;<newline46mondego>  private Date lastModification ;<newline46mondego>  private Boolean status ;<newline46mondego>  private TYPE type ;<newline46mondego><newline46mondego>  //<newline46mondego>  // provide constructors + setter + getter methods<newline46mondego>  //<newline46mondego><newline46mondego>}<newline46mondego>"
"1558splitHere46","3202129splitHere46","public void saveProcess (Process p) {<newline46mondego>  ArrayList<String> name = p.getProcessesName();  // or you can get iterator from the arraylist<newline46mondego>  String emailSent = p.getEmailSent();<newline46mondego>  Date lastModification = p.getLastModification();<newline46mondego>  Boolean status = p.getStatus();<newline46mondego><newline46mondego>  //<newline46mondego>  // use SQL insert statements to save info<newline46mondego>  //<newline46mondego><newline46mondego>}<newline46mondego>"
"1559splitHere46","3202129splitHere46","public ArrayList<Process> getAllProcesses () {<newline46mondego>  ArrayList<Process> processes = new ArrayList<Process>();<newline46mondego><newline46mondego>  //<newline46mondego>  // use SQL select statement to get processes<newline46mondego>  //<newline46mondego><newline46mondego>   return proceses ;<newline46mondego>}<newline46mondego>"
"1560splitHere46","3202135splitHere46","Element TimeStamp = (Element) fstNmElmntLst.item(0);<newline46mondego>XTimeStamp.add(TimeStamp);<newline46mondego>"
"1561splitHere46","3202135splitHere46","XTimeStamp"
"1562splitHere46","3202135splitHere46","String timeStamp = fstNm.item(0)).getNodeValue(); <newline46mondego>XTimeStamp.add(timeStamp);<newline46mondego>"
"1563splitHere46","3202135splitHere46","Element timeStamp = (Element) fstNm.item(0)); <newline46mondego>XTimeStamp.add(timeStamp);<newline46mondego>"
"1564splitHere46","3202143splitHere46","matches"
"1565splitHere46","3202143splitHere46","String.matches"
"1566splitHere46","3202143splitHere46","Pattern.matches"
"1567splitHere46","3202143splitHere46","Matcher.matches"
"1568splitHere46","3202143splitHere46",".*\bi.*"
"1569splitHere46","3202143splitHere46","<doubleQuotes46>.*\\bi.*<doubleQuotes46>"
"1570splitHere46","3202143splitHere46","java.util.regex.Matcher"
"1571splitHere46","3202143splitHere46","boolean matches()"
"1572splitHere46","3202143splitHere46",".*"
"1573splitHere46","3202143splitHere46","."
"1574splitHere46","3202143splitHere46","*"
"1575splitHere46","3202143splitHere46","A.*B"
"1576splitHere46","3202143splitHere46","A"
"1577splitHere46","3202143splitHere46","B"
"1578splitHere46","3202143splitHere46",".*?"
"1579splitHere46","3202143splitHere46",".*"
"1580splitHere46","3202143splitHere46","."
"1581splitHere46","3202143splitHere46","*"
"1582splitHere46","3202143splitHere46","[.*]"
"1583splitHere46","3202143splitHere46","."
"1584splitHere46","3202143splitHere46","*"
"1585splitHere46","3202143splitHere46","a\.b"
"1586splitHere46","3202143splitHere46","<doubleQuotes46>a.b<doubleQuotes46>"
"1587splitHere46","3202143splitHere46","endsWith"
"1588splitHere46","3202143splitHere46","startsWith"
"1589splitHere46","3202143splitHere46","contains"
"1590splitHere46","3202143splitHere46","matches"
"1591splitHere46","3202143splitHere46","matches(<doubleQuotes46>.*pattern.*<doubleQuotes46>)"
"1592splitHere46","3202143splitHere46","matches(<doubleQuotes46>pattern.*<doubleQuotes46>)"
"1593splitHere46","3202143splitHere46","matches(<doubleQuotes46>.*pattern<doubleQuotes46>)"
"1594splitHere46","3202143splitHere46","String"
"1595splitHere46","3202143splitHere46","String replace(char oldChar, char newChar)"
"1596splitHere46","3202143splitHere46","String replace(CharSequence target, CharSequence replacement)"
"1597splitHere46","3202143splitHere46","boolean startsWith(String prefix)"
"1598splitHere46","3202143splitHere46","boolean endsWith(String suffix)"
"1599splitHere46","3202143splitHere46","boolean contains(CharSequence s)"
"1600splitHere46","3202143splitHere46","String replaceAll(String regex, String replacement)"
"1601splitHere46","3202143splitHere46","String replaceFirst(String regex, String replacement)"
"1602splitHere46","3202143splitHere46","String[] split(String regex)"
"1603splitHere46","3202143splitHere46","boolean matches(String regex)"
"1604splitHere46","3202687splitHere46","AffineTransform"
"1605splitHere46","3202741splitHere46","ServerSocket"
"1606splitHere46","3202741splitHere46","SocketAddress"
"1607splitHere46","3202741splitHere46","doNothing().when(ssc.socket().bind(isA(ServerSocket.class), anyInt()));<newline46mondego>"
"1608splitHere46","3202770splitHere46","|"
"1609splitHere46","3202770splitHere46","foo(1 | 2 | 1);<newline46mondego>"
"1610splitHere46","3202770splitHere46","1"
"1611splitHere46","3202770splitHere46","01"
"1612splitHere46","3202770splitHere46","2"
"1613splitHere46","3202770splitHere46","10"
"1614splitHere46","3202770splitHere46","01"
"1615splitHere46","3202770splitHere46","10"
"1616splitHere46","3202770splitHere46","11"
"1617splitHere46","3202770splitHere46","|"
"1618splitHere46","3202770splitHere46","||"
"1619splitHere46","3202770splitHere46","true"
"1620splitHere46","3202770splitHere46","^"
"1621splitHere46","3202770splitHere46","^"
"1622splitHere46","3202774splitHere46","root cause<newline46mondego>java.lang.NoClassDefFoundError: IllegalName: /Files<newline46mondego>"
"1623splitHere46","3202774splitHere46","/Files"
"1624splitHere46","3202774splitHere46","<servlet-class>"
"1625splitHere46","3202774splitHere46","/Files"
"1626splitHere46","3202774splitHere46","/Files Files = new /Files();<newline46mondego>"
"1627splitHere46","3202774splitHere46","<servlet><newline46mondego>    <servlet-name>instanceName</servlet-name><newline46mondego>    <servlet-class>com.example.ServletClass</servlet-class><newline46mondego></servlet><newline46mondego><servlet-mapping><newline46mondego>    <servlet-name>instanceName</servlet-name><newline46mondego>    <url-pattern>/urlPattern</url-pattern><newline46mondego></servlet-mapping><newline46mondego>"
"1628splitHere46","3202774splitHere46","com.example.ServletClass instanceName = new com.example.ServletClass();<newline46mondego>"
"1629splitHere46","3202774splitHere46","<servlet-class>"
"1630splitHere46","3202774splitHere46","<servlet-name>"
"1631splitHere46","3202774splitHere46","<url-pattern>"
"1632splitHere46","3202825splitHere46","BeanPostProcessor"
"1633splitHere46","3202825splitHere46","BeanDefinition"
"1634splitHere46","3202825splitHere46","BeanDefinition"
"1635splitHere46","3202825splitHere46","getSource()"
"1636splitHere46","3202825splitHere46","MethodMetadata"
"1637splitHere46","3202825splitHere46","@Bean"
"1638splitHere46","3202825splitHere46","@Cached"
"1639splitHere46","3202825splitHere46","MethodInterceptor"
"1640splitHere46","3203034splitHere46","@Override"
"1641splitHere46","3203034splitHere46","@Override"
"1642splitHere46","3203054splitHere46","package net.davymeers;<newline46mondego><newline46mondego>import java.io.ByteArrayInputStream;<newline46mondego>import java.io.IOException;<newline46mondego>import java.io.UnsupportedEncodingException;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.Collection;<newline46mondego><newline46mondego>import javax.xml.parsers.DocumentBuilder;<newline46mondego>import javax.xml.parsers.DocumentBuilderFactory;<newline46mondego>import javax.xml.parsers.ParserConfigurationException;<newline46mondego>import javax.xml.xpath.XPath;<newline46mondego>import javax.xml.xpath.XPathConstants;<newline46mondego>import javax.xml.xpath.XPathExpression;<newline46mondego>import javax.xml.xpath.XPathExpressionException;<newline46mondego>import javax.xml.xpath.XPathFactory;<newline46mondego><newline46mondego>import org.w3c.dom.Document;<newline46mondego>import org.w3c.dom.NodeList;<newline46mondego>import org.xml.sax.SAXException;<newline46mondego><newline46mondego>public class XpathTest {<newline46mondego>    private static String XMLSTRING = <doubleQuotes46><data><doubleQuotes46><newline46mondego>            + <doubleQuotes46><tobject.subject tobject.subject.refnum=\<doubleQuotes46>01016000\<doubleQuotes46> />\r\n<doubleQuotes46><newline46mondego>            + <doubleQuotes46>\r\n<doubleQuotes46><newline46mondego>            + <doubleQuotes46><tobject.subject tobject.subject.refnum=\<doubleQuotes46>10004000\<doubleQuotes46> /><doubleQuotes46><newline46mondego>            + <doubleQuotes46></data><doubleQuotes46>;<newline46mondego><newline46mondego>    /**<newline46mondego>     * @param args<newline46mondego>     */<newline46mondego>    public static void main(final String[] args) {<newline46mondego><newline46mondego>        final Document doc = createDocument();<newline46mondego>        final XPath xpath = createXpath();<newline46mondego><newline46mondego>        final NodeList nodes = findElements(<newline46mondego>                <doubleQuotes46>//tobject.subject/@tobject.subject.refnum<doubleQuotes46>, doc, xpath);<newline46mondego>        final Collection<String> results = convertToCollection(nodes);<newline46mondego><newline46mondego>        for (final String result : results) {<newline46mondego>            System.out.println(result);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private static Document createDocument() {<newline46mondego>        Document doc = null;<newline46mondego>        try {<newline46mondego>            final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory<newline46mondego>                    .newInstance();<newline46mondego>            documentBuilderFactory.setNamespaceAware(true); // never forget<newline46mondego>                                                            // this!<newline46mondego>            final DocumentBuilder builder = documentBuilderFactory<newline46mondego>                    .newDocumentBuilder();<newline46mondego>            doc = builder.parse(new ByteArrayInputStream(XMLSTRING<newline46mondego>                    .getBytes(<doubleQuotes46>ISO-8859-1<doubleQuotes46>)));<newline46mondego>        } catch (final UnsupportedEncodingException exception) {<newline46mondego>            // TODO handle exception<newline46mondego>        } catch (final SAXException exception) {<newline46mondego>            // TODO handle exception<newline46mondego>        } catch (final IOException exception) {<newline46mondego>            // TODO handle exception<newline46mondego>        } catch (final ParserConfigurationException exception) {<newline46mondego>            // TODO handle exception<newline46mondego>        }<newline46mondego>        return doc;<newline46mondego>    }<newline46mondego><newline46mondego>    private static XPath createXpath() {<newline46mondego>        final XPathFactory xpathFactory = XPathFactory.newInstance();<newline46mondego>        final XPath xpath = xpathFactory.newXPath();<newline46mondego>        return xpath;<newline46mondego>    }<newline46mondego><newline46mondego>    private static NodeList findElements(final String xpathExpression,<newline46mondego>            final Document doc, final XPath xpath) {<newline46mondego>        NodeList nodes = null;<newline46mondego>        if (doc != null) {<newline46mondego>            try {<newline46mondego>                final XPathExpression expr = xpath.compile(xpathExpression);<newline46mondego>                final Object result = expr<newline46mondego>                        .evaluate(doc, XPathConstants.NODESET);<newline46mondego>                nodes = (NodeList) result;<newline46mondego>            } catch (final XPathExpressionException exception) {<newline46mondego>                // TODO handle exception<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return nodes;<newline46mondego>    }<newline46mondego><newline46mondego>    private static Collection<String> convertToCollection(final NodeList nodes) {<newline46mondego>        final Collection<String> result = new ArrayList<String>();<newline46mondego>        if (nodes != null) {<newline46mondego>            for (int i = 0; i < nodes.getLength(); i++) {<newline46mondego>                result.add(nodes.item(i).getNodeValue());<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return result;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1643splitHere46","3203071splitHere46","button1.setVisibility(View.GONE)"
"1644splitHere46","3203161splitHere46","otherThread.join()"
"1645splitHere46","3203161splitHere46","otherThread.setDaemon(false)"
"1646splitHere46","3203250splitHere46","<script src=<doubleQuotes46>http://code.jquery.com/jquery-latest.min.js<doubleQuotes46>></script><newline46mondego><script><newline46mondego>    $(document).ready(function() {<newline46mondego>        $.active = false;<newline46mondego>        $('body').bind('click keypress', function() { $.active = true; });<newline46mondego>        checkActivity(1800000, 60000, 0); // timeout = 30 minutes, interval = 1 minute.<newline46mondego>    });<newline46mondego><newline46mondego>    function checkActivity(timeout, interval, elapsed) {<newline46mondego>        if ($.active) {<newline46mondego>            elapsed = 0;<newline46mondego>            $.active = false;<newline46mondego>            $.get('heartbeat');<newline46mondego>        }<newline46mondego>        if (elapsed < timeout) {<newline46mondego>            elapsed += interval;<newline46mondego>            setTimeout(function() {<newline46mondego>                checkActivity(timeout, interval, elapsed);<newline46mondego>            }, interval);<newline46mondego>        } else {<newline46mondego>            window.location = 'http://example.com/expired'; // Redirect to <doubleQuotes46>session expired<doubleQuotes46> page.<newline46mondego>        }<newline46mondego>    }<newline46mondego></script><newline46mondego>"
"1647splitHere46","3203250splitHere46","Servlet"
"1648splitHere46","3203250splitHere46","/heartbeat"
"1649splitHere46","3203250splitHere46","@Override<newline46mondego>protected void doGet(HttpServletRequest request, HttpServletResponse response) {<newline46mondego>    request.getSession();<newline46mondego>}<newline46mondego>"
"1650splitHere46","3203285splitHere46","<filter-mapping>"
"1651splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46># one ## two ### three #### four<doubleQuotes46><newline46mondego>        .replaceAll(<doubleQuotes46>##<doubleQuotes46>, <doubleQuotes46>@@<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46># one @@ two @@# three @@@@ four<doubleQuotes46><newline46mondego>"
"1652splitHere46","3203351splitHere46","replaceAll"
"1653splitHere46","3203351splitHere46","<doubleQuotes46>##<doubleQuotes46>"
"1654splitHere46","3203351splitHere46","<doubleQuotes46>@@<doubleQuotes46>"
"1655splitHere46","3203351splitHere46","replaceAll"
"1656splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46># one ## two ### three #### four<doubleQuotes46><newline46mondego>        .replaceAll(<doubleQuotes46>#{2}<doubleQuotes46>, <doubleQuotes46>@@<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46># one @@ two @@# three @@@@ four<doubleQuotes46><newline46mondego>"
"1657splitHere46","3203351splitHere46","<doubleQuotes46>#{2}<doubleQuotes46>"
"1658splitHere46","3203351splitHere46","#"
"1659splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46># one ## two ### three #### four<doubleQuotes46><newline46mondego>        .replaceAll(<doubleQuotes46>#{1,3}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>: one : two : three :: four<doubleQuotes46><newline46mondego>"
"1660splitHere46","3203351splitHere46","#{1,3}"
"1661splitHere46","3203351splitHere46","#"
"1662splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46># one ## two ### three #### four<doubleQuotes46><newline46mondego>        .replaceAll(<doubleQuotes46>#{2,3}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>: one : two : three :# four<doubleQuotes46><newline46mondego>"
"1663splitHere46","3203351splitHere46","####"
"1664splitHere46","3203351splitHere46",":#"
"1665splitHere46","3203351splitHere46","#{2,3}"
"1666splitHere46","3203351splitHere46","#"
"1667splitHere46","3203351splitHere46","#"
"1668splitHere46","3203351splitHere46","#"
"1669splitHere46","3203351splitHere46","#"
"1670splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46>=====5====4===3==2=1<doubleQuotes46><newline46mondego>        .replaceAll(<doubleQuotes46>={1,4}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>::5:4:3:2:1<doubleQuotes46><newline46mondego>"
"1671splitHere46","3203351splitHere46","={1,4}"
"1672splitHere46","3203351splitHere46","<doubleQuotes46>:<doubleQuotes46>"
"1673splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46>=====5====4===3==2=1<doubleQuotes46><newline46mondego>        .replaceFirst(<doubleQuotes46>={1,4}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>:=5====4===3==2=1<doubleQuotes46><newline46mondego>"
"1674splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46>0=====5====4===3==2=1<doubleQuotes46><newline46mondego>        .replaceFirst(<doubleQuotes46>={1,4}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>0:=5====4===3==2=1<doubleQuotes46><newline46mondego>"
"1675splitHere46","3203351splitHere46","={1,4}"
"1676splitHere46","3203351splitHere46","^"
"1677splitHere46","3203351splitHere46","System.out.println(<newline46mondego>    <doubleQuotes46>0=====5====4===3==2=1<doubleQuotes46><newline46mondego>        .replaceFirst(<doubleQuotes46>^={1,4}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>0=====5====4===3==2=1<doubleQuotes46><newline46mondego><newline46mondego>System.out.println(<newline46mondego>    <doubleQuotes46>=====5====4===3==2=1<doubleQuotes46><newline46mondego>        .replaceFirst(<doubleQuotes46>^={1,4}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>:=5====4===3==2=1<doubleQuotes46><newline46mondego><newline46mondego>System.out.println(<newline46mondego>    <doubleQuotes46>===3==2=1<doubleQuotes46><newline46mondego>        .replaceFirst(<doubleQuotes46>^={1,4}<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>);<newline46mondego>//  <doubleQuotes46>:3==2=1<doubleQuotes46><newline46mondego>"
"1678splitHere46","3203351splitHere46","stringArray[i] = stringArray[i].replaceFirst(<doubleQuotes46>^ {1,4}<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"1679splitHere46","3203351splitHere46","^ {1,4}"
"1680splitHere46","3203351splitHere46","^"
"1681splitHere46","3203382splitHere46","components"
"1682splitHere46","3203382splitHere46","mixins"
"1683splitHere46","3203382splitHere46","pages"
"1684splitHere46","3203382splitHere46","services"
"1685splitHere46","3203382splitHere46","components"
"1686splitHere46","3203382splitHere46","@Property"
"1687splitHere46","3203497splitHere46","log4j.jar"
"1688splitHere46","3203497splitHere46","WEB-INF/lib"
"1689splitHere46","3203497splitHere46","log4j.properties"
"1690splitHere46","3203497splitHere46","private static final Logger log = Logger.getLogger(CurrentClass.class);"
"1691splitHere46","3203617splitHere46","syntax: glob<newline46mondego>*.class<newline46mondego>war/[app-name-here]<newline46mondego>war/WEB-INF/classes<newline46mondego>"
"1692splitHere46","3203648splitHere46","<login-config><newline46mondego>  <auth-method>BASIC</auth-method><newline46mondego>  <realm-name>jdbc</realm-name><newline46mondego></login-config><newline46mondego><newline46mondego><security-role><newline46mondego>  <description /><newline46mondego>  <role-name>STUDENT</role-name><newline46mondego></security-role><newline46mondego>"
"1693splitHere46","3203670splitHere46","@ViewScoped"
"1694splitHere46","3203670splitHere46","@ViewScoped"
"1695splitHere46","3203697splitHere46","ArrayList arrList = new ArrayList();<newline46mondego>if(arrList.isEmpty())<newline46mondego>{<newline46mondego>    // Do something with the empty list here.<newline46mondego>}<newline46mondego>"
"1696splitHere46","3203697splitHere46","public static Boolean ContainsAllNulls(ArrayList arrList)<newline46mondego>{<newline46mondego>    if(arrList != null)<newline46mondego>    {<newline46mondego>        for(object a : arrList)<newline46mondego>            if(a != null) return false;<newline46mondego>    }<newline46mondego><newline46mondego>    return true;<newline46mondego>}<newline46mondego>"
"1697splitHere46","3203926splitHere46","wget"
"1698splitHere46","3203926splitHere46","pluginRepository"
"1699splitHere46","3204128splitHere46","parent"
"1700splitHere46","3204128splitHere46","parent"
"1701splitHere46","3204128splitHere46","version"
"1702splitHere46","3204128splitHere46","versions:set"
"1703splitHere46","3204128splitHere46","versions:update-child-modules"
"1704splitHere46","3204137splitHere46","<doubleQuotes46>keyValuePairs.keySet()<doubleQuotes46>= HashMap$1  (id=830062763448)  <newline46mondego>[ LocationId,  Default,  Editable,  Name, Id,  Transcribed]<newline46mondego>"
"1705splitHere46","3204137splitHere46","<doubleQuotes46> Name<doubleQuotes46>"
"1706splitHere46","3204137splitHere46","group(1)"
"1707splitHere46","3204137splitHere46","group(2)"
"1708splitHere46","3204137splitHere46","group(1).trim()"
"1709splitHere46","3204137splitHere46","group(2).trim()"
"1710splitHere46","3204248splitHere46","// 1. String start with alpha word and then followed by<newline46mondego>//    any aplha or number. e.g. Abc 20 Jan to 15 Dec<newline46mondego><newline46mondego>// One or more alpha-characters, followed by a space,<newline46mondego>//     followed by some alpha-numeric character, followed by what ever<newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>\\p{Alpha}+ \\p{Alnum}.*<doubleQuotes46>);<newline46mondego>for (String s : new String[] {<doubleQuotes46>Abc 20 Jan to 15 Dec<doubleQuotes46>, <doubleQuotes46>hello world<doubleQuotes46>, <doubleQuotes46>123 abc<doubleQuotes46>})<newline46mondego>    System.out.println(s + <doubleQuotes46> matches: <doubleQuotes46> + p.matcher(s).matches());<newline46mondego><newline46mondego>// 2. String for a decimal number. e.g. 450,122,224.00<newline46mondego>p = Pattern.compile(<newline46mondego>        <doubleQuotes46>\\p{Digit}+(\\.\\p{Digit})?|<doubleQuotes46> +  // w/o thousand seps.<newline46mondego>        <doubleQuotes46>\\p{Digit}{1,3}(,\\p{Digit}{3})*\\.\\p{Digit}+<doubleQuotes46>); // w/ thousand seps.<newline46mondego>for (String s : new String[] { <doubleQuotes46>450<doubleQuotes46>, <doubleQuotes46>122<doubleQuotes46>, <doubleQuotes46>224.00<doubleQuotes46>, <doubleQuotes46>450,122,224.00<doubleQuotes46>, <doubleQuotes46>0.0.3<doubleQuotes46> })<newline46mondego>    System.out.println(s + <doubleQuotes46> matches: <doubleQuotes46> + p.matcher(s).matches());<newline46mondego><newline46mondego><newline46mondego>// 3. Also to check if String contain any pattern like 'Page 2 of 20'<newline46mondego><newline46mondego>// <doubleQuotes46>Page<doubleQuotes46> followed by one or more digits, followed by <doubleQuotes46>of<doubleQuotes46><newline46mondego>// followed by one or more digits.<newline46mondego>p = Pattern.compile(<doubleQuotes46>Page \\p{Digit}+ of \\p{Digit}+<doubleQuotes46>);<newline46mondego>for (String s : new String[] {<doubleQuotes46>Page 2 of 20<doubleQuotes46>, <doubleQuotes46>Page 2 of X<doubleQuotes46>})<newline46mondego>    System.out.println(s + <doubleQuotes46> matches: <doubleQuotes46> + p.matcher(s).matches());<newline46mondego>"
"1711splitHere46","3204248splitHere46","Abc 20 Jan to 15 Dec matches: true<newline46mondego>hello world matches: true<newline46mondego>123 abc matches: false<newline46mondego>450 matches: true<newline46mondego>122 matches: true<newline46mondego>224.00 matches: true<newline46mondego>450,122,224.00 matches: true<newline46mondego>0.0.3 matches: false<newline46mondego>Page 2 of 20 matches: true<newline46mondego>Page 2 of X matches: false<newline46mondego>"
"1712splitHere46","3204261splitHere46","N+1"
"1713splitHere46","3204261splitHere46","N"
"1714splitHere46","3204261splitHere46","O(N)"
"1715splitHere46","3204261splitHere46","float"
"1716splitHere46","3204261splitHere46","Point3D"
"1717splitHere46","3204261splitHere46","List<Point3d>"
"1718splitHere46","3204261splitHere46","float"
"1719splitHere46","3204261splitHere46","double"
"1720splitHere46","3204495splitHere46","prepared statement"
"1721splitHere46","3204495splitHere46","allowed(...)"
"1722splitHere46","3204679splitHere46","Foo.Builder.<Bar> start().setCount(1).setKey(bar).build();<newline46mondego>"
"1723splitHere46","3204679splitHere46","obj.<Type> method(...)"
"1724splitHere46","3204679splitHere46","public Foo<K2> build() {<newline46mondego>    return new Foo<K2>(this);<newline46mondego>}<newline46mondego>"
"1725splitHere46","3204707splitHere46","name"
"1726splitHere46","3204707splitHere46","getNamedQuery"
"1727splitHere46","3204707splitHere46","BasicUser user = (BasicUser) session.getNamedQuery(<doubleQuotes46>BasicUser.findByEmail<doubleQuotes46>).<newline46mondego>         setString(<doubleQuotes46>email<doubleQuotes46>, email).uniqueResult();<newline46mondego>"
"1728splitHere46","3204707splitHere46","EntityManager"
"1729splitHere46","3204707splitHere46","Session"
"1730splitHere46","3204710splitHere46","System.out.println(<doubleQuotes46>Hello World<doubleQuotes46>.replaceAll(<doubleQuotes46>[aeiou]<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>));<newline46mondego>// prints <doubleQuotes46>Hll Wrld<doubleQuotes46><newline46mondego>"
"1731splitHere46","3204710splitHere46","Pattern.compile"
"1732splitHere46","3204710splitHere46","Matcher.replaceAll"
"1733splitHere46","3204710splitHere46","<doubleQuotes46>hai1343joi *sdf<doubleQuotes46>"
"1734splitHere46","3204710splitHere46","<doubleQuotes46>hailjoi sdf<doubleQuotes46>"
"1735splitHere46","3204710splitHere46","import java.util.regex.*;<newline46mondego>//...<newline46mondego><newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>[^a-zA-Z ]+<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(<doubleQuotes46>hai1343joi *sdf<doubleQuotes46>);<newline46mondego>String clean = m.replaceAll(<doubleQuotes46><doubleQuotes46>);<newline46mondego>System.out.println(clean);<newline46mondego>// prints <doubleQuotes46>haijoi sdf<doubleQuotes46><newline46mondego>"
"1736splitHere46","3204710splitHere46","Pattern.compile"
"1737splitHere46","3204710splitHere46","[...]"
"1738splitHere46","3204710splitHere46","[aeiou]"
"1739splitHere46","3204710splitHere46","[^aeiou]"
"1740splitHere46","3204710splitHere46","[^a-zA-Z ]"
"1741splitHere46","3204710splitHere46","+"
"1742splitHere46","3204710splitHere46","java.util.regex.Pattern"
"1743splitHere46","3204710splitHere46","java.util.regex.Matcher"
"1744splitHere46","3204758splitHere46","myBigFraction.getNumerator().divide( myBigFraction.getDemoninator() );<newline46mondego>"
"1745splitHere46","3204822splitHere46","File"
"1746splitHere46","3204822splitHere46","RandomAccessFile"
"1747splitHere46","3204822splitHere46","<doubleQuotes46>rw<doubleQuotes46>"
"1748splitHere46","3204822splitHere46","FileImageOutputStream"
"1749splitHere46","3204822splitHere46","ImageOutputStream"
"1750splitHere46","3205019splitHere46","File a = new File(<doubleQuotes46>/some/abs/path<doubleQuotes46>);<newline46mondego>File parentFolder = new File(a.getParent());<newline46mondego>File b = new File(parentFolder, <doubleQuotes46>../some/relative/path<doubleQuotes46>);<newline46mondego>String absolute = b.getCanonicalPath(); // may throw IOException<newline46mondego>"
"1751splitHere46","3205116splitHere46","md.update(text.getBytes(<doubleQuotes46>iso-8859-1<doubleQuotes46>), 0, text.length());<newline46mondego>"
"1752splitHere46","3205116splitHere46","md.update(text.getBytes(<doubleQuotes46>ISO646-US<doubleQuotes46>), 0, text.length());<newline46mondego>"
"1753splitHere46","3205116splitHere46","GetBytes"
"1754splitHere46","3205186splitHere46","setModelProperty"
"1755splitHere46","3205186splitHere46","protected void setModelProperty(String propertyName, int newValue) { /* ... */ }<newline46mondego>"
"1756splitHere46","3205186splitHere46","Class[] classes;<newline46mondego>if (newValue instanceof Integer) {<newline46mondego>  classes = new Class[] { int.class };<newline46mondego>} else if (newValue instanceof Double) {<newline46mondego>  /* etc...*/<newline46mondego>} else {<newline46mondego>  classes = new Class[] {newValue.getClass() };<newline46mondego>}<newline46mondego>"
"1757splitHere46","3205236splitHere46","class MainPage(webapp.RequestHandler):<newline46mondego><newline46mondego>    def get(self):<newline46mondego>        id = channel.create_channel(key)<newline46mondego>        self.response.out.write(<newline46mondego>            {'channel_id': id})<newline46mondego>"
"1758splitHere46","3205236splitHere46","<script src='/_ah/channel/jsapi'></script><newline46mondego><script><newline46mondego>  var channelID = '{{ channel_id }}';<newline46mondego>  var channel =<newline46mondego>    new goog.appengine.Channel(channelId);<newline46mondego>  var socket = channel.open();<newline46mondego>  socket.onmessage = function(evt) {<newline46mondego>    alert(evt.data);<newline46mondego>  }<newline46mondego></script><newline46mondego>"
"1759splitHere46","3205236splitHere46","class OtherPage(webapp.RequestHandler):<newline46mondego><newline46mondego>    def get(self):<newline46mondego>        # something happened<newline46mondego>        channel.send_message(key, 'bar')<newline46mondego>"
"1760splitHere46","3205658splitHere46","-Xmx32m"
"1761splitHere46","3205680splitHere46","// View<newline46mondego>List<Model> modelsToDisplay = controller.someFunctionToLoadModels();<newline46mondego>for (Model m : modelsToDisplay) {<newline46mondego>    addModelToView(m);<newline46mondego>}<newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>public void addModelToView(Model m) {<newline46mondego>    ViewPartial vp = generateViewPartialForModel(m);<newline46mondego>    this.viewPartials.add(vp);<newline46mondego>}<newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>public ViewPartial generateViewPartialForModel(Model m) {<newline46mondego>    ViewPartial vp = new ViewPartial();<newline46mondego>    vp.setLabel(m.getName());<newline46mondego>    vp.setTextValue(m.getValue());<newline46mondego>    return vp;<newline46mondego>}<newline46mondego>"
"1762splitHere46","3205692splitHere46","public class FileManager<newline46mondego>{<newline46mondego>    private final FileWriter writer = new FileWriter(<doubleQuotes46>SomeFile.txt<doubleQuotes46>);<newline46mondego>    private final object sync = new object();<newline46mondego><newline46mondego>    public void writeBuffer(string buffer)<newline46mondego>    {<newline46mondego>        synchronized(sync)<newline46mondego>        {<newline46mondego>            writer.write(buffer.getBytes());<newline46mondego>        }<newline46mondego>    }        <newline46mondego><newline46mondego>    public void copyAndCompress()<newline46mondego>    {<newline46mondego>        synchronized(sync)<newline46mondego>        {<newline46mondego>            // copy and/or compress<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1763splitHere46","3205745splitHere46","for(int j=0; i<=2; j++)<newline46mondego>"
"1764splitHere46","3205878splitHere46","private static final int SPLASH_DISPLAY_TIME = 3000;<newline46mondego>Handler ur = new Handler();<newline46mondego>Runnable yourRunnable = new Runnable() {      <newline46mondego>        public void run() {     <newline46mondego>                mainIntent = new Intent(SplashScreen.this,MyApp.class);<newline46mondego>                SplashScreen.this.startActivity(mainIntent);<newline46mondego>                SplashScreen.this.finish(); <newline46mondego>                overridePendingTransition(R.anim.fadein,<newline46mondego>                        R.anim.fadeout);    <newline46mondego>        }<newline46mondego>};<newline46mondego>ur.postDelayed(yourRunnable, SPLASH_DISPLAY_TIME);<newline46mondego>"
"1765splitHere46","3205878splitHere46","// somewhere<newline46mondego>ur.removeCallbacks(yourRunnable);<newline46mondego>"
"1766splitHere46","3206103splitHere46","@GrabConfig(systemClassLoader=true)<newline46mondego>@Grab('org.xerial:sqlite-jdbc:3.6.16')<newline46mondego>import org.sqlite.*<newline46mondego>import java.sql.*<newline46mondego><newline46mondego>db = groovy.sql.Sql.newInstance(<doubleQuotes46>jdbc:sqlite::memory:<doubleQuotes46>,<doubleQuotes46>org.sqlite.JDBC<doubleQuotes46>)<newline46mondego><newline46mondego>// a distance function using the spherical law of cosines<newline46mondego>Function.create(db.getConnection(), <doubleQuotes46>distance<doubleQuotes46>, new Function() {<newline46mondego>    protected void xFunc() throws SQLException {<newline46mondego>        def lat1 = value_double(0)<newline46mondego>        def lon1 = value_double(1)<newline46mondego>        def lat2 = value_double(2)<newline46mondego>        def lon2 = value_double(3)<newline46mondego><newline46mondego>        double theta = lon1 - lon2;<newline46mondego>        double dist = (Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2))) + <newline46mondego>            (Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta)))<newline46mondego>        dist = Math.acos(dist)<newline46mondego>        dist = rad2deg(dist)<newline46mondego>        dist = dist * 60 * 1.1515<newline46mondego>        dist = dist * 1.609344<newline46mondego>        result(dist);<newline46mondego>    }<newline46mondego><newline46mondego>    def deg2rad(deg) {<newline46mondego>      deg * Math.PI / 180.0<newline46mondego>    }<newline46mondego><newline46mondego>    def rad2deg(rad) {<newline46mondego>      rad * 180.0 / Math.PI<newline46mondego>    }<newline46mondego>})<newline46mondego><newline46mondego>db.execute(<doubleQuotes46>CREATE TABLE city(name, lat, lon)<doubleQuotes46>)<newline46mondego>db.execute(<doubleQuotes46>INSERT INTO city(name, lat, lon) VALUES('New York City', 40.7143, -74.0060)<doubleQuotes46>)<newline46mondego>db.execute(<doubleQuotes46>INSERT INTO city(name, lat, lon) VALUES('San Francisco', 37.7749, -122.4194)<doubleQuotes46>)<newline46mondego>db.execute(<doubleQuotes46>INSERT INTO city(name, lat, lon) VALUES('Paris', 48.8567, 2.3510)<doubleQuotes46>)<newline46mondego>db.execute(<doubleQuotes46>INSERT INTO city(name, lat, lon) VALUES('Cologne', 50.9407, 6.9599)<doubleQuotes46>)<newline46mondego><newline46mondego>db.eachRow(<doubleQuotes46>SELECT a.name as a, b.name as b, distance(a.lat, a.lon, b.lat, b.lon) as d FROM city a, city b WHERE a.name != b.name ORDER BY d;<doubleQuotes46>) {<newline46mondego>    println <doubleQuotes46>Distance from ${it.a} to ${it.b}: ${it.d}km<doubleQuotes46><newline46mondego>}<newline46mondego>"
"1767splitHere46","3206277splitHere46","String readLine(boolean ignoreLF)"
"1768splitHere46","3206282splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><xs:schema xmlns:xs=<doubleQuotes46>http://www.w3.org/2001/XMLSchema<doubleQuotes46> <newline46mondego>  elementFormDefault=<doubleQuotes46>qualified<doubleQuotes46>><newline46mondego>  <xs:element name=<doubleQuotes46>assets<doubleQuotes46>><newline46mondego>    <xs:complexType><newline46mondego>      <xs:sequence><newline46mondego>        <xs:element maxOccurs=<doubleQuotes46>unbounded<doubleQuotes46> ref=<doubleQuotes46>asset<doubleQuotes46>/><newline46mondego>        <xs:element maxOccurs=<doubleQuotes46>unbounded<doubleQuotes46> ref=<doubleQuotes46>total<doubleQuotes46>/><newline46mondego>      </xs:sequence><newline46mondego>    </xs:complexType><newline46mondego>  </xs:element><newline46mondego>  <xs:element name=<doubleQuotes46>asset<doubleQuotes46>><newline46mondego>    <xs:complexType mixed=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>      <xs:attribute name=<doubleQuotes46>type<doubleQuotes46> use=<doubleQuotes46>required<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>    </xs:complexType><newline46mondego>  </xs:element><newline46mondego>  <xs:element name=<doubleQuotes46>total<doubleQuotes46>><newline46mondego>    <xs:complexType mixed=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>      <xs:attribute name=<doubleQuotes46>type<doubleQuotes46> use=<doubleQuotes46>required<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>    </xs:complexType><newline46mondego>  </xs:element><newline46mondego></xs:schema><newline46mondego>"
"1769splitHere46","3206282splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego>import javax.xml.bind.annotation.XmlAccessType;<newline46mondego>import javax.xml.bind.annotation.XmlAccessorType;<newline46mondego>import javax.xml.bind.annotation.XmlElement;<newline46mondego>import javax.xml.bind.annotation.XmlRootElement;<newline46mondego>import javax.xml.bind.annotation.XmlType;<newline46mondego>import javax.xml.bind.annotation.XmlAttribute;<newline46mondego>import javax.xml.bind.annotation.XmlValue;<newline46mondego><newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46><doubleQuotes46>, propOrder = {<newline46mondego>    <doubleQuotes46>asset<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>total<doubleQuotes46><newline46mondego>})<newline46mondego>@XmlRootElement(name = <doubleQuotes46>assets<doubleQuotes46>)<newline46mondego>public class Assets {<newline46mondego><newline46mondego>    @XmlElement(required = true)<newline46mondego>    protected List<Asset> asset;<newline46mondego>    @XmlElement(required = true)<newline46mondego>    protected List<Total> total;<newline46mondego><newline46mondego>    public List<Asset> getAsset() {<newline46mondego>        if (asset == null) {<newline46mondego>            asset = new ArrayList<Asset>();<newline46mondego>        }<newline46mondego>        return this.asset;<newline46mondego>    }<newline46mondego><newline46mondego>    public List<Total> getTotal() {<newline46mondego>        if (total == null) {<newline46mondego>            total = new ArrayList<Total>();<newline46mondego>        }<newline46mondego>        return this.total;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46><doubleQuotes46>, propOrder = {<newline46mondego>    <doubleQuotes46>content<doubleQuotes46><newline46mondego>})<newline46mondego>@XmlRootElement(name = <doubleQuotes46>asset<doubleQuotes46>)<newline46mondego>public class Asset {<newline46mondego><newline46mondego>    @XmlValue<newline46mondego>    protected String content;<newline46mondego>    @XmlAttribute(required = true)<newline46mondego>    protected String type;<newline46mondego><newline46mondego>    public String getContent() {<newline46mondego>        return content;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setContent(String value) {<newline46mondego>        this.content = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getType() {<newline46mondego>        return type;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setType(String value) {<newline46mondego>        this.type = value;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46><doubleQuotes46>, propOrder = {<newline46mondego>    <doubleQuotes46>content<doubleQuotes46><newline46mondego>})<newline46mondego>@XmlRootElement(name = <doubleQuotes46>total<doubleQuotes46>)<newline46mondego>public class Total {<newline46mondego><newline46mondego>    @XmlValue<newline46mondego>    protected String content;<newline46mondego>    @XmlAttribute(required = true)<newline46mondego>    protected String type;<newline46mondego><newline46mondego>    public String getContent() {<newline46mondego>        return content;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setContent(String value) {<newline46mondego>        this.content = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getType() {<newline46mondego>        return type;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setType(String value) {<newline46mondego>        this.type = value;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1770splitHere46","3206433splitHere46","PriorityQueue"
"1771splitHere46","3206433splitHere46","Strings"
"1772splitHere46","3206433splitHere46","PriorityQueue<String> pq = new PriorityQueue<String>();<newline46mondego>pq.add(<doubleQuotes46>banana<doubleQuotes46>);<newline46mondego>pq.add(<doubleQuotes46>apple<doubleQuotes46>);<newline46mondego>pq.add(<doubleQuotes46>orange<doubleQuotes46>);<newline46mondego>pq.poll(); // Returns <doubleQuotes46>apple<doubleQuotes46><newline46mondego>pq.poll(); // Returns <doubleQuotes46>banana<doubleQuotes46><newline46mondego>pq.poll(); // Returns <doubleQuotes46>orange<doubleQuotes46><newline46mondego>"
"1773splitHere46","3206433splitHere46","add()"
"1774splitHere46","3206433splitHere46","poll()"
"1775splitHere46","3206433splitHere46","O(logn)"
"1776splitHere46","3206433splitHere46","PriorityQueue"
"1777splitHere46","3206433splitHere46","TreeSet"
"1778splitHere46","3206570splitHere46","this"
"1779splitHere46","3206945splitHere46","void letterChain(string stack[5], int k, const vector<string> &words)<newline46mondego>{<newline46mondego>    if ( k == 5 ) // have 5 words, print solution<newline46mondego>    {<newline46mondego>        for ( int i = 0; i < 5; ++i )<newline46mondego>            cout << stack[i] << <doubleQuotes46> <doubleQuotes46>;<newline46mondego>        cout << endl;<newline46mondego><newline46mondego>        return;<newline46mondego>    }<newline46mondego><newline46mondego>    for ( int i = 0; i < words.size(); ++i ) // try to put a word at the current level of the stack<newline46mondego>    {<newline46mondego>        // if words[i] is already used, we cant use it again (if we can, just remove this part)<newline46mondego>        bool used = false;<newline46mondego>        for ( int j = 0; j < k; ++j )<newline46mondego>            if ( stack[j] == words[i] )<newline46mondego>                used = true;<newline46mondego><newline46mondego>        if ( !used ) // remove this if you can use a word multiple times<newline46mondego>        {<newline46mondego>            if ( k == 0 || words[i][0] == stack[k - 1][2] ) // if the letters match<newline46mondego>            {<newline46mondego>                stack[k] = words[i]; // add it to the stack<newline46mondego>                letterChain(stack, k + 1, words); // recursive call<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>int main()<newline46mondego>{<newline46mondego>    vector<string> words;<newline46mondego>    words.push_back(<doubleQuotes46>CAT<doubleQuotes46>);<newline46mondego>    words.push_back(<doubleQuotes46>TOW<doubleQuotes46>);<newline46mondego>    words.push_back(<doubleQuotes46>WAR<doubleQuotes46>);<newline46mondego>    words.push_back(<doubleQuotes46>RAD<doubleQuotes46>);<newline46mondego>    words.push_back(<doubleQuotes46>DOG<doubleQuotes46>);<newline46mondego>    words.push_back(<doubleQuotes46>GOD<doubleQuotes46>);<newline46mondego>    words.push_back(<doubleQuotes46>RAG<doubleQuotes46>);<newline46mondego>    words.push_back(<doubleQuotes46>RAR<doubleQuotes46>);<newline46mondego><newline46mondego>    string stack[5];<newline46mondego><newline46mondego>    letterChain(stack, 0, words);<newline46mondego>}<newline46mondego>"
"1780splitHere46","3207206splitHere46","SELECT * FROM questions WHERE category1 = false AND category2 = false AND category3 = false ... and (level = 1 OR level = 2);<newline46mondego>"
"1781splitHere46","3207206splitHere46","SELECT * FROM questions WHERE category = 1 AND level = 2;<newline46mondego>"
"1782splitHere46","3207206splitHere46","SELECT * FROM questions WHERE category IN (1,3,6) AND level in (1,2);<newline46mondego>"
"1783splitHere46","3207215splitHere46","<xsl:stylesheet version=<doubleQuotes46>1.0<doubleQuotes46><newline46mondego> xmlns:xsl=<doubleQuotes46>http://www.w3.org/1999/XSL/Transform<doubleQuotes46>><newline46mondego> <xsl:output method=<doubleQuotes46>text<doubleQuotes46>/><newline46mondego><newline46mondego> <xsl:template match=<doubleQuotes46>text()<doubleQuotes46>><newline46mondego>   <xsl:value-of select=<doubleQuotes46>translate(., '&lt;/&gt;™®', '')<doubleQuotes46>/><newline46mondego>   ===================<newline46mondego>   <xsl:value-of select=<doubleQuotes46>translate(., '&lt;/&gt;&#x2122;&#xAE;', '')<doubleQuotes46>/><newline46mondego> </xsl:template><newline46mondego></xsl:stylesheet><newline46mondego>"
"1784splitHere46","3207215splitHere46","<t>XXX™ My Trademark®</t><newline46mondego>"
"1785splitHere46","3207215splitHere46","XXX My Trademark<newline46mondego>   ===================<newline46mondego>   XXX My Trademark<newline46mondego>"
"1786splitHere46","3207554splitHere46","javac -target 1.5 -source 1.5"
"1787splitHere46","3207602splitHere46","DateFormat dateFormat = new SimpleDateFormat(<doubleQuotes46>HH:mm:ss<doubleQuotes46>);<newline46mondego>    Date reference = dateFormat.parse(<doubleQuotes46>00:00:00<doubleQuotes46>);<newline46mondego>    Date date = dateFormat.parse(string);<newline46mondego>    long seconds = (date.getTime() - reference.getTime()) / 1000L;<newline46mondego>"
"1788splitHere46","3207602splitHere46","reference"
"1789splitHere46","3207602splitHere46","DateFormat dateFormat = new SimpleDateFormat(<doubleQuotes46>HH:mm:ss<doubleQuotes46>);<newline46mondego>    dateFormat.setTimeZone(TimeZone.getTimeZone(<doubleQuotes46>UTC<doubleQuotes46>));<newline46mondego>    Date date = dateFormat.parse(<doubleQuotes46>01:00:10<doubleQuotes46>);<newline46mondego>    long seconds = date.getTime() / 1000L;<newline46mondego>"
"1790splitHere46","3207705splitHere46","String json = new Gson().toJson(anyObject); // anyObject = List<Bean>, Map<K, Bean>, Bean, String, etc..<newline46mondego>response.setContentType(<doubleQuotes46>application/json<doubleQuotes46>);<newline46mondego>response.setCharacterEncoding(<doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>response.getWriter().write(json);<newline46mondego>"
"1791splitHere46","3207877splitHere46","javadoc"
"1792splitHere46","3207877splitHere46","classpath"
"1793splitHere46","3207877splitHere46","<javadoc ...><newline46mondego>    <classpath><newline46mondego>        <fileset dir=<doubleQuotes46>${dir.lib}<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>simian.jar<doubleQuotes46>/><newline46mondego>        </fileset><newline46mondego>    </classpath><newline46mondego></javadoc><newline46mondego>"
"1794splitHere46","3207953splitHere46","public CharBuffer generate() {<newline46mondego>    String content = inner == null ? <doubleQuotes46><doubleQuotes46> : inner.array();<newline46mondego>    return CharBuffer.wrap( <doubleQuotes46><div id=\<doubleQuotes46><doubleQuotes46> + this.getId() + <doubleQuotes46>\<doubleQuotes46>><doubleQuotes46> + content + <doubleQuotes46></div><doubleQuotes46> );<newline46mondego>}<newline46mondego>"
"1795splitHere46","3208157splitHere46","File dir = Environment.getExternalStorageDirectory();<newline46mondego>"
"1796splitHere46","3208245splitHere46","String merged = <doubleQuotes46><root><doubleQuotes46> + str1 + str2 + <doubleQuotes46></root><doubleQuotes46>;<newline46mondego>"
"1797splitHere46","3208472splitHere46","SecretKeySpec keySpec = new SecretKeySpec(<newline46mondego>        <doubleQuotes46>qnscAdgRlkIhAUPY44oiexBKtQbGY0orf7OV1I50<doubleQuotes46>.getBytes(),<newline46mondego>        <doubleQuotes46>HmacSHA1<doubleQuotes46>);<newline46mondego><newline46mondego>Mac mac = Mac.getInstance(<doubleQuotes46>HmacSHA1<doubleQuotes46>);<newline46mondego>mac.init(keySpec);<newline46mondego>byte[] result = mac.doFinal(<doubleQuotes46>foo<doubleQuotes46>.getBytes());<newline46mondego><newline46mondego>BASE64Encoder encoder = new BASE64Encoder();<newline46mondego>System.out.println(encoder.encode(result));<newline46mondego>"
"1798splitHere46","3208472splitHere46","+3h2gpjf4xcynjCGU5lbdMBwGOc=<newline46mondego>"
"1799splitHere46","3208472splitHere46","sun.misc.BASE64Encoder"
"1800splitHere46","3208802splitHere46","<doubleQuotes46>application/vnd.google-earth.kml+xml<doubleQuotes46>"
"1801splitHere46","3208898splitHere46","try{<newline46mondego>       jProgBar.setIndeterminate(true);<newline46mondego>       jProgBar.setStringPainted(true);<newline46mondego>       jProgBar.setBorderPainted(true);<newline46mondego>       new Thread(new Runnable() {<newline46mondego>           public void run() {<newline46mondego>               ...<newline46mondego>               // here is code that i've to wait<newline46mondego>               // after this i stop my jProgressBar<newline46mondego>               ...<newline46mondego>               jProgBar.setStringPainted(false);<newline46mondego>               jProgBar.setBorderPainted(true);<newline46mondego>               jProgBar.setIndeterminate(false);<newline46mondego>       }<newline46mondego>       }).start();<newline46mondego>   }<newline46mondego>   catch(IllegalStateException ex){<newline46mondego>       //some code<newline46mondego>   }<newline46mondego>"
"1802splitHere46","3208925splitHere46","public final field length"
"1803splitHere46","3208925splitHere46","public"
"1804splitHere46","3208925splitHere46","clone"
"1805splitHere46","3208925splitHere46","Object"
"1806splitHere46","3208925splitHere46","T[]"
"1807splitHere46","3208925splitHere46","T[]"
"1808splitHere46","3208925splitHere46","Object"
"1809splitHere46","3208925splitHere46","Object"
"1810splitHere46","3208925splitHere46","clone"
"1811splitHere46","3208925splitHere46","byte[] original = ...;<newline46mondego>byte[] copy = original.clone();<newline46mondego>"
"1812splitHere46","3208925splitHere46","clone()"
"1813splitHere46","3208925splitHere46","byte[][]"
"1814splitHere46","3208925splitHere46","Object[]"
"1815splitHere46","3208925splitHere46","clone()"
"1816splitHere46","3208925splitHere46","System.arraycopy"
"1817splitHere46","3208925splitHere46","java.util.Arrays.copyOf"
"1818splitHere46","3209039splitHere46","eclipse"
"1819splitHere46","3209039splitHere46",".gtkrc"
"1820splitHere46","3209051splitHere46","int oldLen = stringArray[i].length();<newline46mondego>stringArray[i] = stringArray[i].replaceFirst (<doubleQuotes46>^ {0,4}<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>int spacesRemoved = oldLen - stringArray[i].length();<newline46mondego>"
"1821splitHere46","3209141splitHere46","install"
"1822splitHere46","3209141splitHere46","mvn install"
"1823splitHere46","3209141splitHere46","mvn tomcat:run"
"1824splitHere46","3209141splitHere46","war"
"1825splitHere46","3209141splitHere46","relativePath"
"1826splitHere46","3209141splitHere46","../pom.xml"
"1827splitHere46","3209218splitHere46","perform"
"1828splitHere46","3209700splitHere46","Query query = em.createQuery(...); <newline46mondego>query.setHint(<doubleQuotes46>javax.persistence.cache.retrieveMode<doubleQuotes46>, <doubleQuotes46>BYPASS<doubleQuotes46>); // skip the L2 cache.<newline46mondego>List customers = query.getResultList();<newline46mondego>"
"1829splitHere46","3209867splitHere46","public static void main(String[] args) {<newline46mondego>    String strDuration = <doubleQuotes46>4560<doubleQuotes46>;<newline46mondego>    long lDuration = Long.parseLong(strDuration);<newline46mondego>    String theExpression = <doubleQuotes46>(lDuration > 500) ? true : false;<doubleQuotes46>;<newline46mondego>    JexlEngine jexl = new JexlEngine();<newline46mondego>    Expression e = jexl.createExpression(theExpression);<newline46mondego>    JexlContext context = new MapContext();<newline46mondego>    context.set(<doubleQuotes46>lDuration<doubleQuotes46>, lDuration);<newline46mondego>    Boolean result = (Boolean) e.evaluate(context);<newline46mondego>    System.out.println(<doubleQuotes46>The answer : <doubleQuotes46> + result);<newline46mondego>  }<newline46mondego>"
"1830splitHere46","3209914splitHere46","getClass().getResource(<doubleQuotes46>lib/txtfile.txt<doubleQuotes46>)"
"1831splitHere46","3209914splitHere46","getResourceAsStream"
"1832splitHere46","3209914splitHere46","."
"1833splitHere46","3209914splitHere46","."
"1834splitHere46","3209914splitHere46","lib"
"1835splitHere46","3209914splitHere46","foo.txt"
"1836splitHere46","3209914splitHere46","getResource(<doubleQuotes46>lib/foo.txt<doubleQuotes46>);"
"1837splitHere46","3209914splitHere46","getResource(<doubleQuotes46>./lib/foo.txt<doubleQuotes46>);"
"1838splitHere46","3210259splitHere46","int[][] board; // row tiles for ultimate mapping experience!<newline46mondego><newline46mondego>private static int BLOCKED = 24;<newline46mondego><newline46mondego>public boolean blocked(int tx, int ty) {<newline46mondego>  return board[ty][tx] == BLOCKED;<newline46mondego>}<newline46mondego>"
"1839splitHere46","3210259splitHere46","private static final HashSet<Integer> BLOCKED_TILES = new HashSet<Integer>();<newline46mondego>static {<newline46mondego>  BLOCKED_TILES.add(24);<newline46mondego>  BLOCKED_TILES.add(1);<newline46mondego>  //add more tiles here<newline46mondego>}<newline46mondego><newline46mondego>public boolean blocked(int tx, int ty) {<newline46mondego>  return BLOCKED_TILES.contains(board[ty][tx]);<newline46mondego>}<newline46mondego>"
"1840splitHere46","3210800splitHere46","Serializable"
"1841splitHere46","3210800splitHere46","Externalizable"
"1842splitHere46","3210900splitHere46","InjectorHolder.getInjector().inject(this);<newline46mondego>"
"1843splitHere46","3211000splitHere46","session.getAttribute()"
"1844splitHere46","3211000splitHere46","@SuppressWarnings"
"1845splitHere46","3211000splitHere46","public final class SessionUtils {<newline46mondego>    @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>    public static <T> T getSessionAttribute(HttpSession session, String name) {<newline46mondego>        return (T) session.getAttribute(name);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1846splitHere46","3211000splitHere46","List<String> keys = SessionUtils.getAttribute(session, uuid);<newline46mondego>"
"1847splitHere46","3211685splitHere46","public byte[] extractBytes (String ImageName) throws IOException {<newline46mondego> // open image<newline46mondego> File imgPath = new File(ImageName);<newline46mondego> BufferedImage bufferedImage = ImageIO.read(imgPath);<newline46mondego><newline46mondego> // get DataBufferBytes from Raster<newline46mondego> WritableRaster raster = bufferedImage .getRaster();<newline46mondego> DataBufferByte data   = (DataBufferByte) raster.getDataBuffer();<newline46mondego><newline46mondego> return ( data.getData() );<newline46mondego>}<newline46mondego>"
"1848splitHere46","3211810splitHere46","new Thread() {<newline46mondego>    public void run() {<newline46mondego>        try {<newline46mondego>            Thread.sleep(10000);<newline46mondego>            // Now do what is needed to remove the button.<newline46mondego>        } catch (InterruptedException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego><newline46mondego>    };<newline46mondego>}.start();<newline46mondego>"
"1849splitHere46","3211932splitHere46","HEAD / HTTP/1.0<newline46mondego>"
"1850splitHere46","3211932splitHere46","HEAD / HTTP/1.1<newline46mondego>Host: the.server.hostname.com<newline46mondego>"
"1851splitHere46","3211932splitHere46","Server: Microsoft-IIS/5.1<newline46mondego>"
"1852splitHere46","3211932splitHere46","netstat -ano"
"1853splitHere46","3211932splitHere46","-anp"
"1854splitHere46","3211981splitHere46","XPathFunctionResolver"
"1855splitHere46","3212094splitHere46","private static final String PLAIN_ASCII = <doubleQuotes46>AaEeIiOoUu<doubleQuotes46> // grave<newline46mondego>            + <doubleQuotes46>AaEeIiOoUuYy<doubleQuotes46> // acute<newline46mondego>            + <doubleQuotes46>AaEeIiOoUuYy<doubleQuotes46> // circumflex<newline46mondego>            + <doubleQuotes46>AaOoNn<doubleQuotes46> // tilde<newline46mondego>            + <doubleQuotes46>AaEeIiOoUuYy<doubleQuotes46> // umlaut<newline46mondego>            + <doubleQuotes46>Aa<doubleQuotes46> // ring<newline46mondego>            + <doubleQuotes46>Cc<doubleQuotes46> // cedilla<newline46mondego>            + <doubleQuotes46>OoUu<doubleQuotes46> // double acute<newline46mondego>    ;<newline46mondego><newline46mondego>    private static final String UNICODE = <doubleQuotes46>\u00C0\u00E0\u00C8\u00E8\u00CC\u00EC\u00D2\u00F2\u00D9\u00F9<doubleQuotes46><newline46mondego>            + <doubleQuotes46>\u00C1\u00E1\u00C9\u00E9\u00CD\u00ED\u00D3\u00F3\u00DA\u00FA\u00DD\u00FD<doubleQuotes46><newline46mondego>            + <doubleQuotes46>\u00C2\u00E2\u00CA\u00EA\u00CE\u00EE\u00D4\u00F4\u00DB\u00FB\u0176\u0177<doubleQuotes46><newline46mondego>            + <doubleQuotes46>\u00C3\u00E3\u00D5\u00F5\u00D1\u00F1<doubleQuotes46><newline46mondego>            + <doubleQuotes46>\u00C4\u00E4\u00CB\u00EB\u00CF\u00EF\u00D6\u00F6\u00DC\u00FC\u0178\u00FF<doubleQuotes46><newline46mondego>            + <doubleQuotes46>\u00C5\u00E5<doubleQuotes46> + <doubleQuotes46>\u00C7\u00E7<doubleQuotes46> + <doubleQuotes46>\u0150\u0151\u0170\u0171<doubleQuotes46>;<newline46mondego><newline46mondego>    /**<newline46mondego>     * remove accented from a string and replace with ascii equivalent<newline46mondego>     */<newline46mondego>    public static String removeAccents(String s) {<newline46mondego>        if (s == null)<newline46mondego>            return null;<newline46mondego>        StringBuilder sb = new StringBuilder(s.length());<newline46mondego>        int n = s.length();<newline46mondego>        int pos = -1;<newline46mondego>        char c;<newline46mondego>        boolean found = false;<newline46mondego>        for (int i = 0; i < n; i++) {<newline46mondego>            pos = -1;<newline46mondego>            c = s.charAt(i);<newline46mondego>            pos = (c <= 126) ? -1 : UNICODE.indexOf(c);<newline46mondego>            if (pos > -1) {<newline46mondego>                found = true;<newline46mondego>                sb.append(PLAIN_ASCII.charAt(pos));<newline46mondego>            } else {<newline46mondego>                sb.append(c);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        if (!found) {<newline46mondego>            return s;<newline46mondego>        } else {<newline46mondego>            return sb.toString();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"1856splitHere46","3212305splitHere46","printf"
"1857splitHere46","3212305splitHere46","<doubleQuotes46>%07.2f<doubleQuotes46><newline46mondego>"
"1858splitHere46","3212316splitHere46","WorkManager"
"1859splitHere46","3212613splitHere46","StateChangedEvent"
"1860splitHere46","3212613splitHere46","public void setState(final Object state) {<newline46mondego>    this.state = state;<newline46mondego>    notifyObservers(state);<newline46mondego>}<newline46mondego>"
"1861splitHere46","3212613splitHere46","public void notifyObservers(Object state) {<newline46mondego>    StateChangedEvent event = new StateChangedEvent(state);<newline46mondego>    // Pass this event into each observer which you have subscribed...<newline46mondego>}<newline46mondego>"
"1862splitHere46","3212680splitHere46","^[a-z]*[/%]$"
"1863splitHere46","3212680splitHere46","/"
"1864splitHere46","3212680splitHere46","%"
"1865splitHere46","3212680splitHere46","^[a-z]*[/%]+$<newline46mondego>"
"1866splitHere46","3212680splitHere46","+"
"1867splitHere46","3212680splitHere46","*"
"1868splitHere46","3212680splitHere46","$"
"1869splitHere46","3212680splitHere46","a%"
"1870splitHere46","3212680splitHere46","a%/"
"1871splitHere46","3212680splitHere46","$"
"1872splitHere46","3212732splitHere46","<Connector port=<doubleQuotes46>80<doubleQuotes46>               <newline46mondego> ...<newline46mondego> maxPostSize=<doubleQuotes46>4097152<doubleQuotes46> /><newline46mondego>"
"1873splitHere46","3212907splitHere46","String url = <doubleQuotes46>jdbc:mysql://<doubleQuotes46> + server_name +  <doubleQuotes46>/<doubleQuotes46> + database;<newline46mondego>"
"1874splitHere46","3212907splitHere46","package DB;<newline46mondego><newline46mondego>import java.sql.Connection;<newline46mondego>import java.sql.DriverManager;<newline46mondego>import java.sql.SQLException;<newline46mondego>import javax.sql.DataSource;<newline46mondego>import org.apache.commons.dbcp.BasicDataSource;<newline46mondego>import com.mysql.jdbc.Driver;<newline46mondego><newline46mondego>/**<newline46mondego> * @author decorrea<newline46mondego> *<newline46mondego> */<newline46mondego>public class DBUtils {<newline46mondego><newline46mondego>    public static String jdbc_driver_name = <doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46>;    <newline46mondego><newline46mondego>    private static String server_name ;<newline46mondego>    private static String database;<newline46mondego>    private static String username;<newline46mondego>    private static String password;<newline46mondego><newline46mondego>    private static int maxActive = 20;<newline46mondego>    private static int maxIdle = 2 ; <newline46mondego><newline46mondego>    public String getServer_name() {<newline46mondego>        return server_name;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setServer_name(String serverName) {<newline46mondego>        server_name = serverName;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getDatabase() {<newline46mondego>        return database;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setDatabase(String database) {<newline46mondego>        this.database = database;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getUsername() {<newline46mondego>        return username;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setUsername(String username) {<newline46mondego>        this.username = username;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getPassword() {<newline46mondego>        return password;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setPassword(String password) {<newline46mondego>        this.password = password;<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    public static DataSource getDataSource(String server_name, String database, String username, String password){<newline46mondego><newline46mondego>        BasicDataSource datasource = new BasicDataSource();<newline46mondego>        datasource.setDriverClassName(jdbc_driver_name);<newline46mondego>        String url = <doubleQuotes46>jdbc:mysql://<doubleQuotes46> + server_name +  <doubleQuotes46>/<doubleQuotes46> + database;<newline46mondego>        System.out.println(url);<newline46mondego>        datasource.setUsername(username);<newline46mondego>        datasource.setPassword(password);<newline46mondego>        datasource.setUrl(url);<newline46mondego>        datasource.setMaxActive(maxActive);<newline46mondego>        datasource.setMaxIdle(maxIdle);<newline46mondego>        return datasource;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1875splitHere46","3212907splitHere46","public class TwitterAPI {<newline46mondego><newline46mondego>    private static String server_name = <doubleQuotes46>localhost:7777<doubleQuotes46>;<newline46mondego>    private static String twitter_databse = <doubleQuotes46>twitter<doubleQuotes46>;<newline46mondego>    private static String username = <doubleQuotes46>root<doubleQuotes46>;<newline46mondego>    private static String password = <doubleQuotes46>password<doubleQuotes46>;<newline46mondego>    public static String twitter_unique_usernames_file = <doubleQuotes46>twitter_unique_usernames_file.txt<doubleQuotes46>;<newline46mondego>    public static String language_model_file = <doubleQuotes46>C:\\de\\JARS\\lingpipe-4.0.0\\demos\\models\\langid-leipzig.classifier<doubleQuotes46>;<newline46mondego>    public static DataSource dataSource = DBUtils.getDataSource(server_name, twitter_databse, username, password);<newline46mondego><newline46mondego>    public static Connection startDBConnection(String server_name, String database, String username, String password) {<newline46mondego>        //Set DB parameters<newline46mondego>        //DBUtils mysql_obj = setDBParams(server_name, database, username, password);               <newline46mondego><newline46mondego>        Connection connection = null;<newline46mondego>        //connection = mysql_obj.createConnection();<newline46mondego>        try {<newline46mondego>            connection = dataSource.getConnection();<newline46mondego>        } catch (SQLException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        return connection;<newline46mondego>    }<newline46mondego><newline46mondego>    public static DBUtils setDBParams(String server_name, String database, String username, String password){<newline46mondego><newline46mondego>        DBUtils mysql_obj = new DBUtils();<newline46mondego>        mysql_obj.setServer_name(server_name);<newline46mondego>        mysql_obj.setDatabase(database);<newline46mondego>        mysql_obj.setUsername(username);<newline46mondego>        mysql_obj.setPassword(password);<newline46mondego>        return mysql_obj;<newline46mondego>    }<newline46mondego><newline46mondego>    public static String getTweets(BigInteger id){<newline46mondego><newline46mondego>        Connection connection = startDBConnection(server_name,twitter_databse,username,password);       <newline46mondego>        ResultSet resultSet = null;     <newline46mondego>        String tweet = new String();<newline46mondego>        try {           <newline46mondego>            Statement statement = connection.createStatement();<newline46mondego>            String query = SQL_queries.get_tweets_on_id  + id.toString();<newline46mondego><newline46mondego>            //Execute the query<newline46mondego>            resultSet = statement.executeQuery(query);          <newline46mondego><newline46mondego>            while(resultSet.next()){<newline46mondego>                tweet = resultSet.getString(<doubleQuotes46>content<doubleQuotes46>);<newline46mondego>            }<newline46mondego>            resultSet.close();<newline46mondego>            statement.close();<newline46mondego>        } catch (SQLException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        finally{<newline46mondego>            try {<newline46mondego>                connection.close();<newline46mondego>            } catch (SQLException e) {<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return tweet;<newline46mondego>    }<newline46mondego>"
"1876splitHere46","3213113splitHere46","for (int i : intArr) {<newline46mondego>  System.out.println(i);<newline46mondego>}<newline46mondego>"
"1877splitHere46","3213310splitHere46","public static final TaxGroup[] TAX_GROUPS = new TaxGroup[] {<newline46mondego>  new TaxGroup(1000000, 0.3),<newline46mondego>  new TaxGroup(500000, 0.2),<newline46mondego>  new TaxGroup(0, 0.1)<newline46mondego>};<newline46mondego>"
"1878splitHere46","3213310splitHere46","int untaxed = income;<newline46mondego>int tax = 0;<newline46mondego>for(TaxGroup taxGroup : TAX_GROUPS) {<newline46mondego>    if(untaxed > taxGroup.lowerLimit) {<newline46mondego>        tax += (untaxed - taxGroup.lowerLimit) * taxGroup.rate;<newline46mondego>        untaxed = taxGroup.lowerLimit;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1879splitHere46","3213361splitHere46","StyledDocument doc = textPane.getStyledDocument();<newline46mondego>SimpleAttributeSet center = new SimpleAttributeSet();<newline46mondego>StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);<newline46mondego>doc.setParagraphAttributes(0, doc.getLength(), center, false);<newline46mondego>"
"1880splitHere46","3213372splitHere46","BasicComboBoxUI"
"1881splitHere46","3213372splitHere46","WindowsComboBoxUI"
"1882splitHere46","3213372splitHere46","BasicComboBoxUI"
"1883splitHere46","3213372splitHere46","ListCellRenderer"
"1884splitHere46","3213372splitHere46","class FastBasicComboBoxUI extends BasicComboBoxUI {<newline46mondego>  @Override<newline46mondego>  public void installUI(JComponent c) {<newline46mondego>    super.installUI(c);<newline46mondego><newline46mondego>    Object prototypeValue = this.comboBox.getPrototypeDisplayValue();<newline46mondego>    if (prototypeValue != null) {<newline46mondego>      ListCellRenderer renderer = comboBox.getRenderer();<newline46mondego>      Component rendererComponent = renderer<newline46mondego>          .getListCellRendererComponent(this.listBox, <newline46mondego>              prototypeValue, 0, false, false);<newline46mondego>      if (rendererComponent instanceof JLabel) {<newline46mondego>        // Preferred size of the renderer itself is (-1,-1) at this point, <newline46mondego>        // so we need this hack<newline46mondego>        Dimension prototypeSize = new JLabel(((JLabel) rendererComponent)<newline46mondego>            .getText()).getPreferredSize();<newline46mondego>        this.listBox.setFixedCellHeight(prototypeSize.height);<newline46mondego>        this.listBox.setFixedCellWidth(prototypeSize.width);<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1885splitHere46","3213372splitHere46","ComboPopup"
"1886splitHere46","3213372splitHere46","@Override<newline46mondego>protected ComboPopup createPopup() {<newline46mondego>  return new BasicComboPopup(comboBox) {<newline46mondego>    @Override<newline46mondego>    protected JList createList() {<newline46mondego>      JList list = super.createList();<newline46mondego>      Object prototypeValue = comboBox.getPrototypeDisplayValue();<newline46mondego>      if (prototypeValue != null) {<newline46mondego>        ListCellRenderer renderer = comboBox.getRenderer();<newline46mondego>        Component rendererComponent = renderer<newline46mondego>            .getListCellRendererComponent(list, prototypeValue, 0, false, false);<newline46mondego>        if (rendererComponent instanceof JLabel) {<newline46mondego>          // Preferred size of the renderer itself is (-1,-1) at this point, <newline46mondego>          // so we need this hack<newline46mondego>          Dimension prototypeSize = new JLabel(((JLabel) rendererComponent)<newline46mondego>              .getText()).getPreferredSize();<newline46mondego>          list.setFixedCellHeight(prototypeSize.height);<newline46mondego>          list.setFixedCellWidth(prototypeSize.width);<newline46mondego>        }<newline46mondego>      }<newline46mondego>      return list;<newline46mondego>    }<newline46mondego>  };<newline46mondego>}<newline46mondego>"
"1887splitHere46","3213373splitHere46","while ((line = br.readLine()) != null) {<newline46mondego><newline46mondego>                if(line.contains(<doubleQuotes46>$<doubleQuotes46>)){ <newline46mondego>                    sb.append(line.replaceAll(<doubleQuotes46>\\$\\{(.+)\\}<doubleQuotes46>, <doubleQuotes46>\\${$1<doubleQuotes46> +<doubleQuotes46>_SUFFIX}<doubleQuotes46>) + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>                }else{<newline46mondego>                    sb.append(line + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>                }<newline46mondego><newline46mondego>            }   <newline46mondego>"
"1888splitHere46","3213417splitHere46","create schema PERMISSION_TOOLS;<newline46mondego>CREATE ALIAS PERMISSION_TOOLS.GET_ACCESS_LEVEL as $$<newline46mondego>String nextPrime(String value) {<newline46mondego>    return new BigInteger(value).nextProbablePrime().toString();<newline46mondego>}<newline46mondego>$$;<newline46mondego>select permission_tools.get_access_level(1) from dual;<newline46mondego>"
"1889splitHere46","3213604splitHere46","<html:option>"
"1890splitHere46","3213604splitHere46","<html:select>"
"1891splitHere46","3213604splitHere46","<html:option>"
"1892splitHere46","3213604splitHere46","<html:optionsCollection>"
"1893splitHere46","3214047splitHere46","String input = <doubleQuotes46>The quick brown fox<doubleQuotes46>;<newline46mondego>String[] elements = input.split(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>String first = elements[0];<newline46mondego>String[] trailing = Arrays.copyOfRange(elements,1,elements.length);<newline46mondego>"
"1894splitHere46","3214074splitHere46","null"
"1895splitHere46","3214129splitHere46","root"
"1896splitHere46","3214129splitHere46","etech"
"1897splitHere46","3214129splitHere46","127.0.0.1:3306"
"1898splitHere46","3214129splitHere46","root"
"1899splitHere46","3214163splitHere46","public void paintCheckBoxBackground(SynthContext context, Graphics g, int x, int y, int w, int h){<newline46mondego><newline46mondego>    AbstractButton c = (AbstractButton) context.getComponent();<newline46mondego>    String text = c.getText();<newline46mondego>    Icon icon = c.getIcon();<newline46mondego>    if (icon == null){<newline46mondego>        icon = context.getStyle().getIcon(context, <doubleQuotes46>CheckBox.icon<doubleQuotes46>);<newline46mondego>    };        <newline46mondego>    int iconTextGap = c.getIconTextGap();       <newline46mondego><newline46mondego>    Rectangle componentRect = new Rectangle();<newline46mondego>    Rectangle iconR = new Rectangle();<newline46mondego><newline46mondego>    Insets insets = new Insets(0, 0, 0, 0);<newline46mondego>    if (context.getRegion().isSubregion()){<newline46mondego>        insets = context.getStyle().getInsets(context, insets);<newline46mondego>    }<newline46mondego>    else{<newline46mondego>        insets = context.getComponent().getInsets(insets);<newline46mondego>    }<newline46mondego><newline46mondego>    componentRect.x = insets.left;<newline46mondego>    componentRect.y = insets.top;<newline46mondego>    componentRect.width = c.getWidth() - (insets.left + insets.right);<newline46mondego>    componentRect.height = c.getHeight() - (insets.top + insets.bottom);<newline46mondego><newline46mondego>    if (icon != null){<newline46mondego>        iconR.x += componentRect.x;<newline46mondego>        iconR.y += componentRect.y;<newline46mondego>        iconR.width = icon.getIconWidth();<newline46mondego>        iconR.height = icon.getIconHeight();<newline46mondego><newline46mondego>        g.setColor(Color.GREEN);<newline46mondego>        g.fillRect(iconR.x, iconR.y, iconR.width, iconR.height);<newline46mondego>    }<newline46mondego>    if (text != null){<newline46mondego>        g.setColor(Color.RED);<newline46mondego>        int textPos = iconR.x + iconR.width + iconTextGap;<newline46mondego>        g.fillRect(textPos, iconR.y, c.getWidth() - insets.right - textPos, componentRect.height);            <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1900splitHere46","3214163splitHere46","SwingUtilities.layoutCompoundLabel"
"1901splitHere46","3214334splitHere46","UniqueIdentifierType"
"1902splitHere46","3214334splitHere46","com.rp.central.model.UniqueIdentifierType_$$_javassist_21"
"1903splitHere46","3214356splitHere46","class BetterAPI extends API {<newline46mondego>  private BetterAPI(APIOption option, AnotherAPIOption anotherOption) {<newline46mondego>    this.APIOption = option;<newline46mondego>    this.AnotherAPIOption = anotherOption;<newline46mondego>  }<newline46mondego><newline46mondego>  public static BetterAPI createWithOptionSetA() {<newline46mondego>    return new BetterAPI(Option1, Option2);<newline46mondego>  }<newline46mondego><newline46mondego>  public static BetterAPI createWithOptionSetB() {<newline46mondego>    return new BetterAPI(Option3, Option4);<newline46mondego>  }<newline46mondego><newline46mondego>  // ...<newline46mondego>}<newline46mondego>"
"1904splitHere46","3214469splitHere46","Double"
"1905splitHere46","3214469splitHere46","equals"
"1906splitHere46","3214469splitHere46","Integer"
"1907splitHere46","3214469splitHere46","double"
"1908splitHere46","3214469splitHere46","Double"
"1909splitHere46","3214469splitHere46","Number"
"1910splitHere46","3214469splitHere46","int"
"1911splitHere46","3214469splitHere46","Integer"
"1912splitHere46","3214469splitHere46","Number"
"1913splitHere46","3214469splitHere46","java.lang.Number"
"1914splitHere46","3214469splitHere46","Comparable"
"1915splitHere46","3214469splitHere46","byte"
"1916splitHere46","3214469splitHere46","short"
"1917splitHere46","3214469splitHere46","int"
"1918splitHere46","3214469splitHere46","long"
"1919splitHere46","3214469splitHere46","char"
"1920splitHere46","3214469splitHere46","float"
"1921splitHere46","3214469splitHere46","double"
"1922splitHere46","3214483splitHere46","@Any"
"1923splitHere46","3214974splitHere46","volatile"
"1924splitHere46","3214974splitHere46","synchronized"
"1925splitHere46","3214974splitHere46","volatile"
"1926splitHere46","3214986splitHere46","synchronized"
"1927splitHere46","3214986splitHere46","class MyType {<newline46mondego>   Foo foo;<newline46mondego>   Bar bar;<newline46mondego><newline46mondego>   void doFoo() { foo.do(); }<newline46mondego>   void doBar() { bar.do(); }<newline46mondego>}<newline46mondego><newline46mondego>class MyActions {<newline46mondego>    MyType thing;<newline46mondego><newline46mondego>    void lotsOfFoo() {<newline46mondego>        // blocks bar :-(<newline46mondego>        synchronized(thing) { thing.doFoo(); } <newline46mondego>    }<newline46mondego><newline46mondego>    void lotsOfBar() {<newline46mondego>        // blocks foo :-(<newline46mondego>        synchronized(thing) { thing.doBar(); } <newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1928splitHere46","3215044splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.WRITE_EXTERNAL_STORAGE<doubleQuotes46> /><newline46mondego>"
"1929splitHere46","3215056splitHere46","//*[contains(text(), 'span')]"
"1930splitHere46","3215150splitHere46","<entity-mappings xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/persistence/orm<doubleQuotes46><newline46mondego>    xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>    xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd<doubleQuotes46><newline46mondego>    version=<doubleQuotes46>2.0<doubleQuotes46>><newline46mondego>    <persistence-unit-metadata><newline46mondego>        <persistence-unit-defaults><newline46mondego>            <schema>OWNERS_SCHEMA</schema><newline46mondego>        </persistence-unit-defaults><newline46mondego>    </persistence-unit-metadata>   <newline46mondego>    . . .<newline46mondego></entity-mappings><newline46mondego>"
"1931splitHere46","3215150splitHere46","<persistence<newline46mondego>    xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/persistence<doubleQuotes46><newline46mondego>    xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>    xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd<doubleQuotes46><newline46mondego>    version=<doubleQuotes46>2.0<doubleQuotes46> ><newline46mondego>    <persistence-unit name=<doubleQuotes46>foo<doubleQuotes46>><newline46mondego>        . . .<newline46mondego>        <mapping-file>orm.xml</mapping-file><newline46mondego>        . . .<newline46mondego>    </persistence-unit><newline46mondego></persistence><newline46mondego>"
"1932splitHere46","3215204splitHere46","EntityManager em = Container.getInstance().getEntityManager();<newline46mondego>"
"1933splitHere46","3215204splitHere46","@PersistenceContext"
"1934splitHere46","3215223splitHere46","try <newline46mondego>{<newline46mondego>      ContactList contacts = null;<newline46mondego>      try {<newline46mondego>         contacts = (ContactList) PIM.getInstance().openPIMList(PIM.CONTACT_LIST, PIM.READ_WRITE);<newline46mondego>      } catch (PIMException e) {<newline46mondego>         // An error occurred<newline46mondego>         return;<newline46mondego>      }<newline46mondego>      Contact contact = contacts.createContact();<newline46mondego><newline46mondego><newline46mondego>     String[] name = new String[ contacts.stringArraySize( Contact.NAME ) ];<newline46mondego>     name[Contact.NAME_GIVEN] = <doubleQuotes46>Kate<doubleQuotes46>;<newline46mondego>     name[Contact.NAME_FAMILY] = <doubleQuotes46>Turner<doubleQuotes46>;<newline46mondego>     contact.addStringArray(Contact.NAME, Contact.ATTR_NONE, name);<newline46mondego><newline46mondego>     AddressBookArguments entry = new AddressBookArguments(AddressBookArguments.ARG_NEW, contact);<newline46mondego><newline46mondego>     Invoke.invokeApplication(Invoke.APP_TYPE_ADDRESSBOOK, entry);<newline46mondego><newline46mondego>} <newline46mondego>catch (Throwable t)<newline46mondego>{<newline46mondego>}<newline46mondego>"
"1935splitHere46","3215329splitHere46","import org.eclipse.swt.SWT;<newline46mondego>import org.eclipse.swt.layout.FillLayout;<newline46mondego>import org.eclipse.swt.widgets.*;<newline46mondego><newline46mondego>public class Snippet {<newline46mondego><newline46mondego>   public static void main( String[] args ) {<newline46mondego>      final Display display = new Display();<newline46mondego>      Shell shell = new Shell(display);<newline46mondego>      shell.setLayout(new FillLayout());<newline46mondego>      final Tree tree = new Tree(shell, SWT.BORDER);<newline46mondego>      tree.setHeaderVisible(true);<newline46mondego>      TreeColumn col1 = new TreeColumn(tree, 0);<newline46mondego>      col1.setText(<doubleQuotes46>col1<doubleQuotes46>);<newline46mondego>      TreeColumn col2 = new TreeColumn(tree, 0);<newline46mondego>      col2.setText(<doubleQuotes46>col2<doubleQuotes46>);<newline46mondego><newline46mondego>      for ( int i = 0; i < 4; i++ ) {<newline46mondego>         TreeItem iItem = new TreeItem(tree, 0);<newline46mondego>         iItem.setText(new String[] { <doubleQuotes46>TreeItem (0) -<doubleQuotes46> + i, <doubleQuotes46>x<doubleQuotes46> });<newline46mondego>         for ( int j = 0; j < 4; j++ ) {<newline46mondego>            TreeItem jItem = new TreeItem(iItem, 0);<newline46mondego>            jItem.setText(new String[] { <doubleQuotes46>TreeItem (1) -<doubleQuotes46> + i, <doubleQuotes46>x<doubleQuotes46> });<newline46mondego>            for ( int k = 0; k < 4; k++ ) {<newline46mondego>               TreeItem kItem = new TreeItem(jItem, 0);<newline46mondego>               kItem.setText(new String[] { <doubleQuotes46>TreeItem (2) -<doubleQuotes46> + i, <doubleQuotes46>x<doubleQuotes46> });<newline46mondego>               for ( int l = 0; l < 4; l++ ) {<newline46mondego>                  TreeItem lItem = new TreeItem(kItem, 0);<newline46mondego>                  lItem.setText(new String[] { <doubleQuotes46>TreeItem (3) -<doubleQuotes46> + i, <doubleQuotes46>x<doubleQuotes46> });<newline46mondego>               }<newline46mondego>            }<newline46mondego>         }<newline46mondego>      }<newline46mondego><newline46mondego>      col1.pack();<newline46mondego>      col2.pack();<newline46mondego><newline46mondego>      Listener listener = new Listener() {<newline46mondego><newline46mondego>         @Override<newline46mondego>         public void handleEvent( Event e ) {<newline46mondego>            final TreeItem treeItem = (TreeItem)e.item;<newline46mondego>            display.asyncExec(new Runnable() {<newline46mondego><newline46mondego>               @Override<newline46mondego>               public void run() {<newline46mondego>                  for ( TreeColumn tc : treeItem.getParent().getColumns() )<newline46mondego>                     tc.pack();<newline46mondego>               }<newline46mondego>            });<newline46mondego>         }<newline46mondego>      };<newline46mondego><newline46mondego>      tree.addListener(SWT.Collapse, listener);<newline46mondego>      tree.addListener(SWT.Expand, listener);<newline46mondego><newline46mondego>      shell.setSize(200, 200);<newline46mondego>      shell.open();<newline46mondego>      while ( !shell.isDisposed() ) {<newline46mondego>         if ( !display.readAndDispatch() ) display.sleep();<newline46mondego>      }<newline46mondego>      display.dispose();<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"1936splitHere46","3215338splitHere46","Action action = new AbstractAction()<newline46mondego>{<newline46mondego>    public void actionPerformed(ActionEvent e)<newline46mondego>    {<newline46mondego>        menu = new JPopupMenu();<newline46mondego>        menu.add(<doubleQuotes46>item1<doubleQuotes46>);<newline46mondego>        menu.add(<doubleQuotes46>item2<doubleQuotes46>);<newline46mondego>        Component component = (Component)e.getSource();<newline46mondego>        menu.show(component, component.getX(), component.getY());<newline46mondego>    }<newline46mondego>};<newline46mondego>String keyStrokeAndKey = <doubleQuotes46>ESCAPE<doubleQuotes46>;<newline46mondego>KeyStroke keyStroke = KeyStroke.getKeyStroke(keyStrokeAndKey);<newline46mondego>txt.getInputMap().put(keyStroke, keyStrokeAndKey);<newline46mondego>txt.getActionMap().put(keyStrokeAndKey, action);<newline46mondego>"
"1937splitHere46","3215448splitHere46","import java.util.zip.Checksum;<newline46mondego><newline46mondego>public class CRC16 implements Checksum {<newline46mondego><newline46mondego>    private static final int[] TABLE= {<newline46mondego>        0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241,<newline46mondego>        0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440,<newline46mondego>        0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,<newline46mondego>        0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841,<newline46mondego>        0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40,<newline46mondego>        0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,<newline46mondego>        0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641,<newline46mondego>        0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040,<newline46mondego>        0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,<newline46mondego>        0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441,<newline46mondego>        0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41,<newline46mondego>        0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,<newline46mondego>        0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41,<newline46mondego>        0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40,<newline46mondego>        0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,<newline46mondego>        0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041,<newline46mondego>        0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240,<newline46mondego>        0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,<newline46mondego>        0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41,<newline46mondego>        0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840,<newline46mondego>        0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,<newline46mondego>        0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40,<newline46mondego>        0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640,<newline46mondego>        0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,<newline46mondego>        0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241,<newline46mondego>        0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440,<newline46mondego>        0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,<newline46mondego>        0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841,<newline46mondego>        0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40,<newline46mondego>        0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,<newline46mondego>        0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,<newline46mondego>        0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040<newline46mondego>    };<newline46mondego><newline46mondego><newline46mondego>    private int sum = 0xFFFF;<newline46mondego><newline46mondego>    public long getValue() {<newline46mondego>        return sum;<newline46mondego>    }<newline46mondego><newline46mondego>    public void reset() {<newline46mondego>        sum = 0xFFFF;<newline46mondego>    }<newline46mondego><newline46mondego>    public void update(byte[] b, int off, int len) {<newline46mondego>        for (int i = off; i < off+len; i++)<newline46mondego>            update((int)b[i]);<newline46mondego>    }<newline46mondego><newline46mondego>    public void update(int b) {<newline46mondego>        sum = (sum >> 8) ^ TABLE[( (sum)^(b&0xff) ) & 0xff];<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        CRC16 crc = new CRC16();<newline46mondego>        crc.update(12);<newline46mondego>        crc.update(16);<newline46mondego>        System.out.println(Integer.toHexString((int)crc.getValue()));<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1938splitHere46","3215566splitHere46","BeanMap"
"1939splitHere46","3215566splitHere46","Map map = new BeanMap(someBean);<newline46mondego>"
"1940splitHere46","3215566splitHere46","public static Map<String, Object> mapProperties(Object bean) throws Exception {<newline46mondego>    Map<String, Object> properties = new HashMap<String, Object>();<newline46mondego>    for (Method method : bean.getClass().getDeclaredMethods()) {<newline46mondego>        if (Modifier.isPublic(method.getModifiers())<newline46mondego>            && method.getParameterTypes().length == 0<newline46mondego>            && method.getReturnType() != void.class<newline46mondego>            && method.getName().matches(<doubleQuotes46>^(get|is).+<doubleQuotes46>)<newline46mondego>        ) {<newline46mondego>            String name = method.getName().replaceAll(<doubleQuotes46>^(get|is)<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>            name = Character.toLowerCase(name.charAt(0)) + (name.length() > 1 ? name.substring(1) : <doubleQuotes46><doubleQuotes46>);<newline46mondego>            Object value = method.invoke(bean);<newline46mondego>            properties.put(name, value);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return properties;<newline46mondego>}<newline46mondego>"
"1941splitHere46","3215566splitHere46","java.beans"
"1942splitHere46","3215566splitHere46","name = Character.toLowerCase(name.charAt(0)) + (name.length() > 1 ? name.substring(1) : <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"1943splitHere46","3215566splitHere46","name = Introspector.decapitalize(name);<newline46mondego>"
"1944splitHere46","3215582splitHere46","File[] files = directory.listFiles(#(file){file.getName().endsWith(<doubleQuotes46>.java<doubleQuotes46>)});<newline46mondego>"
"1945splitHere46","3215582splitHere46","listFiles(FileFilter)"
"1946splitHere46","3215582splitHere46","FileFilter javaFileFilter = {#(file){file.getName().endsWith(<doubleQuotes46>.java<doubleQuotes46>)};<newline46mondego>"
"1947splitHere46","3215611splitHere46","javac -cp .:/path/to/rss.jar -target 1.5 -source 1.5 rss_parser_wrapper/RssParserWrapper.java<newline46mondego>"
"1948splitHere46","3215871splitHere46","prod"
"1949splitHere46","3216034splitHere46","Application.requestBackground()"
"1950splitHere46","3216084splitHere46","ServletContext"
"1951splitHere46","3216084splitHere46","ServletContextListener"
"1952splitHere46","3216084splitHere46","ServletContext"
"1953splitHere46","3216084splitHere46","ServletContext"
"1954splitHere46","3216084splitHere46","public class MyServletContextListener extends ServletContextListener{<newline46mondego>  public void contextInitialized(ServletContextEvent event){<newline46mondego>    ArrayList list = new ArrayList();<newline46mondego><newline46mondego>    //add to ServletContext<newline46mondego>    event.getServletContext().setAttribute(<doubleQuotes46>list<doubleQuotes46>, list);<newline46mondego><newline46mondego>    JobDataMap map = new JobDataMap();<newline46mondego>    map.put(<doubleQuotes46>list<doubleQuotes46>, list);<newline46mondego>    JobDetail job = new JobDetail(..., MyJob.class);<newline46mondego>    job.setJobDataMap(map);<newline46mondego>    //execute job<newline46mondego>  }<newline46mondego><newline46mondego>  public void contextDestroyed(ServletContextEvent event){}<newline46mondego>}<newline46mondego><newline46mondego>//Quartz job<newline46mondego>public class MyJob implements Job{<newline46mondego>  public void execute(JobExecutionContext context){<newline46mondego>    ArrayList list = (ArrayList)context.getMergedJobDataMap().get(<doubleQuotes46>list<doubleQuotes46>);<newline46mondego>    //...<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1955splitHere46","3216166splitHere46","pom.xml"
"1956splitHere46","3216437splitHere46","loadTest.class.getResourceAsStream(<doubleQuotes46>./images/<doubleQuotes46> + fileName);<newline46mondego>"
"1957splitHere46","3216437splitHere46","bin/com/ieml/swt/diploma/images"
"1958splitHere46","3216437splitHere46",".class"
"1959splitHere46","3216437splitHere46","bin/images"
"1960splitHere46","3216437splitHere46","Class.getResourceAsStream()"
"1961splitHere46","3216437splitHere46","bin"
"1962splitHere46","3216437splitHere46","src"
"1963splitHere46","3216437splitHere46","bin"
"1964splitHere46","3216600splitHere46","@ManyToMany"
"1965splitHere46","3216756splitHere46","0x 14 fe ae 14 c3 be c2 ae 14 c3 be c2 ae<newline46mondego>"
"1966splitHere46","3216759splitHere46","HTTP/1.1 200 OK<newline46mondego>Content-Type: text/plain; charset=utf-8<newline46mondego>"
"1967splitHere46","3216759splitHere46","HttpResponse.Headers<newline46mondego>"
"1968splitHere46","3216759splitHere46","HttpResponse.Headers.[<doubleQuotes46>Content-Type<doubleQuotes46>]<newline46mondego>"
"1969splitHere46","3216993splitHere46","String str = <doubleQuotes46>this is a 'test' of 'something'<doubleQuotes46>;<newline46mondego>String rep = str.replaceAll(<doubleQuotes46>'[^']*'<doubleQuotes46>, <doubleQuotes46>($0)<doubleQuotes46>); // stand back, I know regex<newline46mondego>"
"1970splitHere46","3216993splitHere46","replaceAll()"
"1971splitHere46","3216993splitHere46","<doubleQuotes46>'[^']*'<doubleQuotes46>"
"1972splitHere46","3216993splitHere46","<doubleQuotes46>($0)<doubleQuotes46>"
"1973splitHere46","3216993splitHere46","<doubleQuotes46>'[^']*'<doubleQuotes46>"
"1974splitHere46","3216993splitHere46","'"
"1975splitHere46","3216993splitHere46","[^']"
"1976splitHere46","3216993splitHere46","*"
"1977splitHere46","3216993splitHere46","<doubleQuotes46>($0)<doubleQuotes46>"
"1978splitHere46","3216993splitHere46","$0"
"1979splitHere46","3217029splitHere46","setenv.bat"
"1980splitHere46","3217029splitHere46","<tomcat-dir>/bin"
"1981splitHere46","3217029splitHere46","catalina.bat"
"1982splitHere46","3217029splitHere46","setenv.bat"
"1983splitHere46","3217029splitHere46","setenv.bat"
"1984splitHere46","3217029splitHere46","CATALINA_HOME"
"1985splitHere46","3217029splitHere46","if exist <doubleQuotes46>%CATALINA_HOME%/jre1.5.0_22/win<doubleQuotes46> (<newline46mondego>    if not <doubleQuotes46>%JAVA_HOME%<doubleQuotes46> == <doubleQuotes46><doubleQuotes46> (<newline46mondego>    set JAVA_HOME=<newline46mondego>    )<newline46mondego><newline46mondego>    set <doubleQuotes46>JRE_HOME=%CATALINA_HOME%/jre1.5.0_22/win<doubleQuotes46><newline46mondego>)<newline46mondego>"
"1986splitHere46","3217058splitHere46","close()"
"1987splitHere46","3217058splitHere46","ZipOutputStream"
"1988splitHere46","3217058splitHere46","finally"
"1989splitHere46","3217058splitHere46","try"
"1990splitHere46","3217058splitHere46","ZipEntry entry = new ZipEntry(<doubleQuotes46>icons/<doubleQuotes46> + file);<newline46mondego>"
"1991splitHere46","3217280splitHere46","HttpConnection connection = (HttpConnection)Connector.open(url + updateConnectionSuffix());<newline46mondego>"
"1992splitHere46","3217280splitHere46","HttpConnection connection = (HttpConnection)Connector.open(url + updateConnectionSuffix() + <doubleQuotes46>;ConnectionTimeout=54321<doubleQuotes46>);<newline46mondego>"
"1993splitHere46","3217304splitHere46","String s = new String( bytearray, 0, lenOfValidData, <doubleQuotes46>US-ASCII<doubleQuotes46>);<newline46mondego>"
"1994splitHere46","3217304splitHere46","socket.receive(packet);<newline46mondego>String strPacket = new String( packet.getData(), 0, packet.getLength(), <doubleQuotes46>US-ASCII<doubleQuotes46>);<newline46mondego>receiver.onReceive( strPacket);<newline46mondego>"
"1995splitHere46","3217304splitHere46","packet.getLength()"
"1996splitHere46","3217304splitHere46","String strPacket = new String( packet.getData(), <newline46mondego>                               0, <newline46mondego>                               Math.min( packet.getLength(), packet.getData().length),<newline46mondego>                               <doubleQuotes46>US-ASCII<doubleQuotes46>);<newline46mondego>"
"1997splitHere46","3217341splitHere46","HomeScreen.SetName(<doubleQuotes46>Inbox(2)<doubleQuotes46>);<newline46mondego>"
"1998splitHere46","3217488splitHere46","<class name=<doubleQuotes46>LineItem<doubleQuotes46> table=<doubleQuotes46>`Line Item`<doubleQuotes46>><newline46mondego>    <id name=<doubleQuotes46>id<doubleQuotes46> column=<doubleQuotes46>`Item Id`<doubleQuotes46>/><generator class=<doubleQuotes46>assigned<doubleQuotes46>/></id><newline46mondego>    <property name=<doubleQuotes46>itemNumber<doubleQuotes46> column=<doubleQuotes46>`Item #`<doubleQuotes46>/><newline46mondego>    ...<newline46mondego></class><newline46mondego>"
"1999splitHere46","3217488splitHere46","orm.xml"
"2000splitHere46","3217488splitHere46","<delimited-identifiers/>"
"2001splitHere46","3217488splitHere46","persistence-unit-defaults"
"2002splitHere46","3217488splitHere46","<delimited-identifiers/>"
"2003splitHere46","3217488splitHere46","@Table(name=<doubleQuotes46>\<doubleQuotes46>customer\<doubleQuotes46><doubleQuotes46>)"
"2004splitHere46","3217488splitHere46","<table name=<doubleQuotes46>&quot;customer&quot;<doubleQuotes46>/>"
"2005splitHere46","3217554splitHere46","0"
"2006splitHere46","3217554splitHere46","'0'"
"2007splitHere46","3217554splitHere46","int digit = ... // some value between 0 and 9<newline46mondego>char ch = (char)(digit + '0');<newline46mondego>"
"2008splitHere46","3217554splitHere46","int digit = ... <newline46mondego>char ch = Character.forDigit(digit, radix);<newline46mondego>"
"2009splitHere46","3217554splitHere46","radix"
"2010splitHere46","3217554splitHere46","Character.MIN_RADIX"
"2011splitHere46","3217554splitHere46","Character.MAX_RADIX"
"2012splitHere46","3217554splitHere46","10"
"2013splitHere46","3217554splitHere46","Character.forDigit(int,int)"
"2014splitHere46","3217622splitHere46","Class#getDeclaredFields()"
"2015splitHere46","3217622splitHere46","Field"
"2016splitHere46","3217622splitHere46","get()"
"2017splitHere46","3217622splitHere46","Field#setAccessible()"
"2018splitHere46","3217622splitHere46","true"
"2019splitHere46","3217622splitHere46","ClassABC abc = new ClassABC();<newline46mondego>for (Field field : abc.getClass().getDeclaredFields()) {<newline46mondego>    field.setAccessible(true);<newline46mondego>    String name = field.getName();<newline46mondego>    Object value = field.get(abc);<newline46mondego>    System.out.printf(<doubleQuotes46>Field name: %s, Field value: %s%n<doubleQuotes46>, name, value);<newline46mondego>}<newline46mondego>"
"2020splitHere46","3217704splitHere46","this.setFocusable( true );<newline46mondego>"
"2021splitHere46","3217753splitHere46","JFrame"
"2022splitHere46","3217753splitHere46","JPanel"
"2023splitHere46","3217753splitHere46","JComponent"
"2024splitHere46","3218016splitHere46","Person"
"2025splitHere46","3218016splitHere46","Person"
"2026splitHere46","3218016splitHere46","Vector"
"2027splitHere46","3218016splitHere46","ArrayList"
"2028splitHere46","3218016splitHere46","ArrayList<Person> myList = new ArrayList<Person>();<newline46mondego>"
"2029splitHere46","3218016splitHere46","newPerson = new Person(<doubleQuotes46>Bruce<doubleQuotes46>, <doubleQuotes46>Wayne<doubleQuotes46>, 1972, <doubleQuotes46>Gotham City<doubleQuotes46>);<newline46mondego>myList.add(newPerson);<newline46mondego>"
"2030splitHere46","3218016splitHere46","int personNumber = 0;<newline46mondego>Person retrievedPerson = myList.get(personNumber);<newline46mondego>"
"2031splitHere46","3218016splitHere46","for (Person someone : myList) {<newline46mondego>   System.out.println(someone);<newline46mondego>}<newline46mondego>"
"2032splitHere46","3218016splitHere46","TreeMap<Integer, Person> myMap = new TreeMap<Integer, Person>();<newline46mondego><newline46mondego>newPerson = ...<newline46mondego>myMap.put(newPerson.getId(), newPerson);<newline46mondego>"
"2033splitHere46","3218016splitHere46","Person p = myMap.get(id);<newline46mondego>"
"2034splitHere46","3218033splitHere46","if (lastX > 0) {        r1 = lastX + 1;<newline46mondego>  }else{      r1 = 0;         }       r2 = lastY;<newline46mondego><newline46mondego>  u1 = lastX;         if (lastY > 0) {         u2 = lastY - 1;         }else{<newline46mondego>   u2 = 0;<newline46mondego>   }<newline46mondego>"
"2035splitHere46","3218033splitHere46","if (lastX > 0) {        r1 = lastX + 1;<newline46mondego>  }else{      r1 = 0;         }       r2 = lastY;<newline46mondego><newline46mondego>  u1 = lastX;         if (lastY > 0) {         u2 = lastY - 1;         }else{<newline46mondego>   u2 = 0;<newline46mondego>   }<newline46mondego>"
"2036splitHere46","3218033splitHere46","if (lastX > 0) {        l1 = lastX - 1;<newline46mondego>  }else{      l1 = 0;         }       l2 = lastY;<newline46mondego>"
"2037splitHere46","3218191splitHere46","jta-datasource"
"2038splitHere46","3218191splitHere46","non-jta-datasource"
"2039splitHere46","3218191splitHere46","jta-datasource"
"2040splitHere46","3218191splitHere46","non-jta-data-source"
"2041splitHere46","3218191splitHere46","jta-datasource"
"2042splitHere46","3218191splitHere46","non-jta-datasource"
"2043splitHere46","3218191splitHere46","javax.transaction.UserTransaction"
"2044splitHere46","3218191splitHere46","UserTransaction"
"2045splitHere46","3218191splitHere46","UserTransaction"
"2046splitHere46","3218191splitHere46","transaction-type"
"2047splitHere46","3218191splitHere46","JTA"
"2048splitHere46","3218191splitHere46","RESOURCE_LOCAL"
"2049splitHere46","3218191splitHere46","jta-data-source"
"2050splitHere46","3218191splitHere46","transaction-type"
"2051splitHere46","3218191splitHere46","RESOURCE_LOCAL"
"2052splitHere46","3218191splitHere46","EntityManagerFactory"
"2053splitHere46","3218642splitHere46","@XmlAttribute<newline46mondego>@Id<newline46mondego>@Basic(optional = false)<newline46mondego>@GeneratedValue(strategy=GenerationType.IDENTITY, generator=<doubleQuotes46>IdOrGenerated<doubleQuotes46>)<newline46mondego>@GenericGenerator(name=<doubleQuotes46>IdOrGenerated<doubleQuotes46>,<newline46mondego>                  strategy=<doubleQuotes46>....UseIdOrGenerate<doubleQuotes46><newline46mondego>)<newline46mondego>@Column(name = <doubleQuotes46>ID<doubleQuotes46>, nullable = false)<newline46mondego>private Integer id;<newline46mondego>"
"2054splitHere46","3218642splitHere46","import org.hibernate.id.IdentityGenerator;<newline46mondego>...<newline46mondego>public class UseIdOrGenerate extends IdentityGenerator {<newline46mondego>private static final Logger log = Logger.getLogger(UseIdOrGenerate.class.getName());<newline46mondego><newline46mondego>@Override<newline46mondego>public Serializable generate(SessionImplementor session, Object obj) throws HibernateException {<newline46mondego>    if (obj == null) throw new HibernateException(new NullPointerException()) ;<newline46mondego><newline46mondego>    if ((((EntityWithId) obj).getId()) == null) {<newline46mondego>        Serializable id = super.generate(session, obj) ;<newline46mondego>        return id;<newline46mondego>    } else {<newline46mondego>        return ((EntityWithId) obj).getId();<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2055splitHere46","3218775splitHere46","/*<newline46mondego> * To change this template, choose Tools | Templates<newline46mondego> * and open the template in the editor.<newline46mondego> */<newline46mondego>package sl4jdemo;<newline46mondego><newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>/**<newline46mondego> *<newline46mondego> * @author Administrator<newline46mondego> */<newline46mondego>public class arrayTest {<newline46mondego><newline46mondego>    public static class Person{<newline46mondego>        String name;<newline46mondego>        String SSL;<newline46mondego>        String Street;<newline46mondego>        Integer age;<newline46mondego><newline46mondego>        public String getSSL() {<newline46mondego>            return SSL;<newline46mondego>        }<newline46mondego><newline46mondego>        public void setSSL(String SSL) {<newline46mondego>            this.SSL = SSL;<newline46mondego>        }<newline46mondego><newline46mondego>        public String getStreet() {<newline46mondego>            return Street;<newline46mondego>        }<newline46mondego><newline46mondego>        public void setStreet(String Street) {<newline46mondego>            this.Street = Street;<newline46mondego>        }<newline46mondego><newline46mondego>        public Integer getAge() {<newline46mondego>            return age;<newline46mondego>        }<newline46mondego><newline46mondego>        public void setAge(Integer age) {<newline46mondego>            this.age = age;<newline46mondego>        }<newline46mondego><newline46mondego>        public String getName() {<newline46mondego>            return name;<newline46mondego>        }<newline46mondego><newline46mondego>        public void setName(String name) {<newline46mondego>            this.name = name;<newline46mondego>        }<newline46mondego><newline46mondego>        public Person(String name, String SSL, String Street, Integer age) {<newline46mondego>            this.name = name;<newline46mondego>            this.SSL = SSL;<newline46mondego>            this.Street = Street;<newline46mondego>            this.age = age;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>    public static void main(String[] args) {<newline46mondego>        List<Person> persons = new ArrayList<arrayTest.Person>();<newline46mondego>        persons.add(new Person(<doubleQuotes46>Bob<doubleQuotes46>, <doubleQuotes46>FKJHHS87546<doubleQuotes46>, <doubleQuotes46>WALLSTREET<doubleQuotes46>, 21));<newline46mondego>        persons.add(new Person(<doubleQuotes46>Tom<doubleQuotes46>, <doubleQuotes46>SEFSDF875463<doubleQuotes46>, <doubleQuotes46>WALLSTREET<doubleQuotes46>, 25));<newline46mondego>        for (Person person : persons) {<newline46mondego>            System.out.println(<doubleQuotes46>Name : <doubleQuotes46>+person.getName());<newline46mondego>            System.out.println(<doubleQuotes46>SSL : <doubleQuotes46>+person.getSSL());<newline46mondego>            System.out.println(<doubleQuotes46>Street : <doubleQuotes46>+person.getStreet());<newline46mondego>            System.out.println(<doubleQuotes46>Age : <doubleQuotes46>+person.getAge());<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2056splitHere46","3219146splitHere46","new File(<doubleQuotes46>/home/ayush/output/part-00000<doubleQuotes46>).toURI()<newline46mondego>"
"2057splitHere46","3219146splitHere46","new URI(<doubleQuotes46>/home/ayush/output/part-00000<doubleQuotes46>)<newline46mondego>"
"2058splitHere46","3219159splitHere46","uid=yourloginid&pw=yourpassword"
"2059splitHere46","3219442splitHere46","Enum"
"2060splitHere46","3219442splitHere46","Enum"
"2061splitHere46","3219442splitHere46","Enum"
"2062splitHere46","3219442splitHere46","MR"
"2063splitHere46","3219442splitHere46","MRS"
"2064splitHere46","3219442splitHere46","MS"
"2065splitHere46","3219442splitHere46","Enum"
"2066splitHere46","3219442splitHere46","Class"
"2067splitHere46","3219442splitHere46","Title"
"2068splitHere46","3219442splitHere46","Title"
"2069splitHere46","3219442splitHere46","format"
"2070splitHere46","3219442splitHere46","Title.MR.format(<doubleQuotes46>Doe<doubleQuotes46>,<doubleQuotes46>John<doubleQuotes46>))"
"2071splitHere46","3219442splitHere46","MR"
"2072splitHere46","3219442splitHere46","Title"
"2073splitHere46","3219442splitHere46","format"
"2074splitHere46","3219442splitHere46","Mr.John Doe"
"2075splitHere46","3219442splitHere46","Title"
"2076splitHere46","3219442splitHere46","Title.MR"
"2077splitHere46","3219509splitHere46","public class SquareGrid<newline46mondego>{<newline46mondego>    /** Lower, left corner of the grid */<newline46mondego>    private Point2D m_origin;<newline46mondego>    private double  m_cellSize;<newline46mondego>    private List<List<List<Point2D>>> m_cells;<newline46mondego><newline46mondego>    public SquareGrid(Point2D origin, int numberOfCellsPerSide, double cellSize)<newline46mondego>    {<newline46mondego>        m_origin = origin;<newline46mondego>        m_cellSize = cellSize;<newline46mondego>        m_cells = new ArrayList<List<List<Point2D>>>(numberOfCellsPerSide);<newline46mondego><newline46mondego>        for (int i = 0; i < numberOfCellsPerSide; i++)<newline46mondego>        {<newline46mondego>            List<List<Point2D>> row = new ArrayList<List<Point2D>>(numberOfCellsPerSide);<newline46mondego>            m_cells.add(row);<newline46mondego><newline46mondego>            for (int j = 0; j < numberOfCellsPerSide; j++)<newline46mondego>            {<newline46mondego>                row.add(new ArrayList<Point2D>>());<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void add(Point2D point)<newline46mondego>    {<newline46mondego>        int xCell = Math.floor((point.getX() - m_origin.getX()) / m_cellSize);<newline46mondego>        int yCell = Math.floor((point.getY() - m_origin.getY()) / m_cellSize);<newline46mondego><newline46mondego>        m_cells.get(xCell).get(yCell).add(point);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2078splitHere46","3219676splitHere46","TimeZone.getDefault()"
"2079splitHere46","3219676splitHere46","TimeZone getMyAppDefaultTimeZone()"
"2080splitHere46","3220114splitHere46","testObj"
"2081splitHere46","3220114splitHere46","Poly1[]"
"2082splitHere46","3220114splitHere46","x"
"2083splitHere46","3220114splitHere46","Poly1"
"2084splitHere46","3220114splitHere46","SubPoly2"
"2085splitHere46","3220114splitHere46","Poly1"
"2086splitHere46","3220114splitHere46","comPoly"
"2087splitHere46","3220114splitHere46","x"
"2088splitHere46","3220114splitHere46","Poly1"
"2089splitHere46","3220114splitHere46","SubPoly2[]"
"2090splitHere46","3220114splitHere46","Poly1"
"2091splitHere46","3220114splitHere46","SubPoly2"
"2092splitHere46","3220114splitHere46","SubPoly2"
"2093splitHere46","3220130splitHere46","smtp.domain.com"
"2094splitHere46","3220130splitHere46","25"
"2095splitHere46","3220130splitHere46","java.net.Socket"
"2096splitHere46","3220174splitHere46","META-INF/persistence.xml"
"2097splitHere46","3220174splitHere46","persistence.xml"
"2098splitHere46","3220174splitHere46","persistence.xml"
"2099splitHere46","3220174splitHere46","META-INF"
"2100splitHere46","3220174splitHere46","persistence.xml"
"2101splitHere46","3220174splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><persistence xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/persistence<doubleQuotes46><newline46mondego>  xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>  xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd<doubleQuotes46><newline46mondego>  version=<doubleQuotes46>1.0<doubleQuotes46>><newline46mondego>    <persistence-unit name=<doubleQuotes46>MyJPAApplicationPU<doubleQuotes46> transaction-type=<doubleQuotes46>RESOURCE_LOCAL<doubleQuotes46>><newline46mondego>        <provider>org.hibernate.ejb.HibernatePersistence</provider><newline46mondego>        <class>com.mycompany.Foo</class><newline46mondego>        <class>com.mycompany.Bar</class><newline46mondego>        <exclude-unlisted-classes>true</exclude-unlisted-classes><newline46mondego>        <properties><newline46mondego>            <property name=<doubleQuotes46>hibernate.connection.provider_class<doubleQuotes46> value=<doubleQuotes46>org.hibernate.connection.DriverManagerConnectionProvider<doubleQuotes46> /><newline46mondego>            <property name=<doubleQuotes46>hibernate.connection.url<doubleQuotes46> value=<doubleQuotes46>jdbc:hsqldb:mem:unit-testing-jpa<doubleQuotes46>/><newline46mondego>            <property name=<doubleQuotes46>hibernate.connection.driver_class<doubleQuotes46> value=<doubleQuotes46>org.hsqldb.jdbcDriver<doubleQuotes46>/><newline46mondego>            <property name=<doubleQuotes46>hibernate.dialect<doubleQuotes46> value=<doubleQuotes46>org.hibernate.dialect.HSQLDialect<doubleQuotes46>/><newline46mondego>            <property name=<doubleQuotes46>hibernate.connection.username<doubleQuotes46> value=<doubleQuotes46>sa<doubleQuotes46>/><newline46mondego>            <property name=<doubleQuotes46>hibernate.connection.password<doubleQuotes46> value=<doubleQuotes46><doubleQuotes46>/><newline46mondego>            <property name=<doubleQuotes46>hibernate.show_sql<doubleQuotes46> value=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>        </properties><newline46mondego>    </persistence-unit><newline46mondego></persistence><newline46mondego>"
"2102splitHere46","3220174splitHere46","RESOURCE_LOCAL"
"2103splitHere46","3220198splitHere46","<constructor-arg>"
"2104splitHere46","3220198splitHere46","ExampleBean"
"2105splitHere46","3220198splitHere46","static"
"2106splitHere46","3220801splitHere46","ViewSwitcher"
"2107splitHere46","3220810splitHere46","public enum SpeechPart<newline46mondego>{<newline46mondego>    NOUN (<doubleQuotes46>noun<doubleQuotes46>),<newline46mondego>    PLURAL (<doubleQuotes46>plural<doubleQuotes46>),<newline46mondego>    NOUNPHRASE (<doubleQuotes46>noun phrase<doubleQuotes46>),<newline46mondego>    ADVERB (<doubleQuotes46>adverb<doubleQuotes46>),<newline46mondego>    ADJECTIVE (<doubleQuotes46>adjective<doubleQuotes46>),<newline46mondego>    CONJUNCTION (<doubleQuotes46>conjunction<doubleQuotes46>),<newline46mondego>    VERB (<doubleQuotes46>verb<doubleQuotes46>);<newline46mondego><newline46mondego>    private String english;<newline46mondego><newline46mondego>    SpeechPart(String inEnglish)<newline46mondego>    {<newline46mondego>        this.english = inEnglish;<newline46mondego>    }<newline46mondego><newline46mondego>    public String toString() { return english; }<newline46mondego>}<newline46mondego>"
"2108splitHere46","3220810splitHere46","SpeechPart dog = SpeechPart.NOUN;<newline46mondego>SpeechPart ran = SpeechPart.VERB;<newline46mondego>SpeechPart quickly = SpeechPart.ADVERB;<newline46mondego>"
"2109splitHere46","3220810splitHere46","System.out.println(dog.toString());<newline46mondego>System.out.println(quickly);        // Implicit call to toString()<newline46mondego>"
"2110splitHere46","3220810splitHere46","public enum SpeechModifier<newline46mondego>{<newline46mondego>    SINGULAR,<newline46mondego>    PLURAL,<newline46mondego>    FIRST_PERSON,<newline46mondego>    SECOND_PERSON,<newline46mondego>    THIRD_PERSON,<newline46mondego>    PRESENT,<newline46mondego>    PAST,<newline46mondego>    PERFECT,<newline46mondego>    PROGRESSIVE;<newline46mondego>}<newline46mondego>"
"2111splitHere46","3220810splitHere46","public class Word<newline46mondego>{<newline46mondego>    String word;<newline46mondego>    SpeechPart part;<newline46mondego>    EnumSet<SpeechModifier> modifiers;<newline46mondego>}<newline46mondego>"
"2112splitHere46","3220810splitHere46","Word w1 = new Word();<newline46mondego>w1.word = <doubleQuotes46>bouncing<doubleQuotes46>;<newline46mondego>w1.part = SpeechPart.VERB;<newline46mondego>w1.modifiers = EnumSet<SpeechModifier>.of(SpeechModifier.PRESENT, SpeechModifier.PROGRESSIVE);<newline46mondego>"
"2113splitHere46","3220939splitHere46","for i in 1 to 100<newline46mondego>   if(i % 5 == 0) AND (i % 3 == 0) print 'fizzbuzz'<newline46mondego>   else if(i % 3 == 0) print 'fizz'<newline46mondego>   else if(i % 5 == 0) print 'buzz'<newline46mondego>   else print i<newline46mondego>"
"2114splitHere46","3221149splitHere46","StringBuilder sb = new StringBuilder(<doubleQuotes46>SELECT * from animals WHERE animal_name IN (<doubleQuotes46>);<newline46mondego>// 1. assemble query parameters<newline46mondego>for (int i = 0; i < arrayVals.size(); i++) {<newline46mondego>    sb.append(<doubleQuotes46>?<doubleQuotes46>);<newline46mondego>    if (i + 1 < arrayVals.size()) sb.append(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>}<newline46mondego>sb.append(<doubleQuotes46>)<doubleQuotes46>);<newline46mondego>// 2. add the variables<newline46mondego>PreparedStatement st = conn.prepareStatement(sb.toString());<newline46mondego>for (int i = 0; i < arrayVals.size(); i++) {<newline46mondego>    // May need to replace setter depending on type of object<newline46mondego>    st.setObject(i + 1, o);<newline46mondego>}<newline46mondego>"
"2115splitHere46","3221149splitHere46","jdbcTemplate.query(sb.toString(), arrayVals.toArray(), animalRowMapper);<newline46mondego>"
"2116splitHere46","3221325splitHere46","for (;inputNumber!=0; sum += inputNumber, count++ )<newline46mondego>"
"2117splitHere46","3221325splitHere46","while(inputNumber!=0) {<newline46mondego>// rest of the things<newline46mondego> sum+=inputNumber;<newline46mondego> count++;<newline46mondego>}<newline46mondego>"
"2118splitHere46","3221427splitHere46","class MyClass {<newline46mondego>    public MyClass(String... x) {<newline46mondego>        // for arrays<newline46mondego>        // this constructor delegate call to the second one<newline46mondego>        this(Arrays.asList(x));<newline46mondego>    }<newline46mondego>    public MyClass(List<String> x) {<newline46mondego>        // for lists<newline46mondego>        // all logic here<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2119splitHere46","3221427splitHere46","new MyClass(new ArrayList<String>());<newline46mondego>new MyClass(<doubleQuotes46>dog<doubleQuotes46>, <doubleQuotes46>cat<doubleQuotes46>, <doubleQuotes46>rat<doubleQuotes46>);<newline46mondego>new MyClass(new String[] {<doubleQuotes46>rat<doubleQuotes46>, <doubleQuotes46>Dog<doubleQuotes46>, <doubleQuotes46>Cat<doubleQuotes46>});<newline46mondego>"
"2120splitHere46","3221516splitHere46","CountingOutputStream"
"2121splitHere46","3221516splitHere46","Filter"
"2122splitHere46","3221516splitHere46","HttpServletResponseWrapper"
"2123splitHere46","3221516splitHere46","OutputStream"
"2124splitHere46","3221516splitHere46","Writer"
"2125splitHere46","3221516splitHere46","OutputStream"
"2126splitHere46","3221516splitHere46","HttpServletResponseWrapper"
"2127splitHere46","3221516splitHere46","getByteCount()"
"2128splitHere46","3221516splitHere46","CountingOutputStream"
"2129splitHere46","3221516splitHere46","CountingFilter"
"2130splitHere46","3221516splitHere46","public class CountingFilter implements Filter {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void init(FilterConfig arg0) throws ServletException {<newline46mondego>        // NOOP.<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void doFilter(ServletRequest request, final ServletResponse response, FilterChain chain) throws IOException, ServletException {<newline46mondego>        HttpServletResponse httpres = (HttpServletResponse) response;<newline46mondego>        CountingServletResponse counter = new CountingServletResponse(httpres);<newline46mondego>        HttpServletRequest httpreq = (HttpServletRequest) request;<newline46mondego>        httpreq.setAttribute(<doubleQuotes46>counter<doubleQuotes46>, counter);<newline46mondego>        chain.doFilter(request, counter);<newline46mondego>        counter.flushBuffer(); // Push the last bits containing HTML comment.<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void destroy() {<newline46mondego>        // NOOP.<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2131splitHere46","3221516splitHere46","CountingServletResponse"
"2132splitHere46","3221516splitHere46","public class CountingServletResponse extends HttpServletResponseWrapper {<newline46mondego><newline46mondego>    private final long startTime;<newline46mondego>    private final CountingServletOutputStream output;<newline46mondego>    private final PrintWriter writer;<newline46mondego><newline46mondego>    public CountingServletResponse(HttpServletResponse response) throws IOException {<newline46mondego>        super(response);<newline46mondego>        startTime = System.nanoTime();<newline46mondego>        output = new CountingServletOutputStream(response.getOutputStream());<newline46mondego>        writer = new PrintWriter(output, true);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public ServletOutputStream getOutputStream() throws IOException {<newline46mondego>        return output;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public PrintWriter getWriter() throws IOException {<newline46mondego>        return writer;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void flushBuffer() throws IOException {<newline46mondego>        writer.flush();<newline46mondego>    }<newline46mondego><newline46mondego>    public long getElapsedTime() {<newline46mondego>        return System.nanoTime() - startTime;<newline46mondego>    }<newline46mondego><newline46mondego>    public long getByteCount() throws IOException {<newline46mondego>        flushBuffer(); // Ensure that all bytes are written at this point.<newline46mondego>        return output.getByteCount();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2133splitHere46","3221516splitHere46","CountingServletOutputStream"
"2134splitHere46","3221516splitHere46","public class CountingServletOutputStream extends ServletOutputStream {<newline46mondego><newline46mondego>    private final CountingOutputStream output;<newline46mondego><newline46mondego>    public CountingServletOutputStream(ServletOutputStream output) {<newline46mondego>        this.output = new CountingOutputStream(output);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void write(int b) throws IOException {<newline46mondego>        output.write(b);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void flush() throws IOException {<newline46mondego>        output.flush();<newline46mondego>    }<newline46mondego><newline46mondego>    public long getByteCount() {<newline46mondego>        return output.getByteCount();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2135splitHere46","3221516splitHere46","<!DOCTYPE html><newline46mondego><html <newline46mondego>    xmlns=<doubleQuotes46>http://www.w3.org/1999/xhtml<doubleQuotes46> <newline46mondego>    xmlns:h=<doubleQuotes46>http://java.sun.com/jsf/html<doubleQuotes46>><newline46mondego>    <h:head><newline46mondego>        <title>Counting demo</title><newline46mondego>    </h:head><newline46mondego>    <h:body><newline46mondego>        <h1>Hello World</h1><newline46mondego>    </h:body><newline46mondego></html><newline46mondego><!-- page size: #{counter.byteCount / 1000}KB --><newline46mondego><!-- render time: #{counter.elapsedTime / 1000000}ms --><newline46mondego>"
"2136splitHere46","3221551splitHere46","public static void printAll(final Iterable<?> toIterate)"
"2137splitHere46","3221580splitHere46","final"
"2138splitHere46","3221580splitHere46","Method.invoke(...)"
"2139splitHere46","3221580splitHere46","Method"
"2140splitHere46","3221580splitHere46","Class"
"2141splitHere46","3221842splitHere46","class BrowserTopComponent ... {<newline46mondego><newline46mondego>  Browswer fff = new Browser();<newline46mondego><newline46mondego>  BrowserTopComponent() {<newline46mondego>    initComponents();<newline46mondego>  }<newline46mondego><newline46mondego>  private void navButtonActionPerformed(ActionEvent evt) {<newline46mondego>    fff.navigateTo();<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"2142splitHere46","3221905splitHere46","toString"
"2143splitHere46","3221905splitHere46","public String toString()<newline46mondego>{<newline46mondego>    return <doubleQuotes46>Flight No: <doubleQuotes46> + flightNo + <doubleQuotes46>, Mechanical Status:<doubleQuotes46> + mechStatus + <doubleQuotes46>, Medical Status : <doubleQuotes46> + medStatus + <doubleQuotes46>,Fuel Level : <doubleQuotes46> + fuel;<newline46mondego>}<newline46mondego>"
"2144splitHere46","3221905splitHere46","AddFlight"
"2145splitHere46","3221905splitHere46","model.add(0, Flights.get(Flights.size() - 1));<newline46mondego>"
"2146splitHere46","3221905splitHere46","AddFlight"
"2147splitHere46","3221905splitHere46","model.add(0,Flights);<newline46mondego>"
"2148splitHere46","3221905splitHere46","ArrayList"
"2149splitHere46","3221913splitHere46","InputStream"
"2150splitHere46","3222168splitHere46","AppointmentDate"
"2151splitHere46","3222168splitHere46","new AppointmentDate()"
"2152splitHere46","3222168splitHere46","while (resultSet.next()) {<newline46mondego>    AppointmentDate anAppointment = new AppontmentDate();<newline46mondego>    // the rest is the same<newline46mondego>}<newline46mondego>"
"2153splitHere46","3222168splitHere46","AppointmentDate"
"2154splitHere46","3222168splitHere46","appointmentDate"
"2155splitHere46","3222384splitHere46","getUsers()"
"2156splitHere46","3222384splitHere46","getUsers()"
"2157splitHere46","3222431splitHere46","beanClass.getDeclaredFields()"
"2158splitHere46","3222431splitHere46","getFields()"
"2159splitHere46","3222431splitHere46","Field"
"2160splitHere46","3222431splitHere46","getAnnotations()"
"2161splitHere46","3222431splitHere46","getFields()"
"2162splitHere46","3222618splitHere46","ConcurrentHashMap"
"2163splitHere46","3222618splitHere46","putIfAbsent"
"2164splitHere46","3222618splitHere46","replace"
"2165splitHere46","3222618splitHere46","ConcurrentHashMap"
"2166splitHere46","3222618splitHere46","Collections.synchronizedMap"
"2167splitHere46","3222618splitHere46","putIfAbsent"
"2168splitHere46","3222618splitHere46","get"
"2169splitHere46","3222618splitHere46","put"
"2170splitHere46","3222618splitHere46","ConcurrentHashMap"
"2171splitHere46","3222618splitHere46","java.util.concurrent"
"2172splitHere46","3222618splitHere46","synchronize(myConcurrentHashMap){}"
"2173splitHere46","3222633splitHere46","if (spawnX == 0 || blocked(spawnX - 1, spawnY)) {<newline46mondego>            left = false;<newline46mondego>            System.out.println(<doubleQuotes46>You can't go left!<doubleQuotes46>);<newline46mondego>        }           <newline46mondego>        if (spawnX == 12 || blocked(spawnX + 1, spawnY)) {<newline46mondego>            right = false;<newline46mondego>            System.out.println(<doubleQuotes46>You can't go right!<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        if (spawnY ==0 || blocked(spawnX, spawnY - 1)) {<newline46mondego>            up = false;<newline46mondego>            System.out.println(<doubleQuotes46>You can't go up!<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        if (spawnY == 8 || blocked(spawnX, spawnY + 1)) {<newline46mondego>            down = false;<newline46mondego>            System.out.println(<doubleQuotes46>You can't go down!<doubleQuotes46>);<newline46mondego>        }<newline46mondego>"
"2174splitHere46","3222658splitHere46","Pattern.DOTALL"
"2175splitHere46","3222658splitHere46","."
"2176splitHere46","3222658splitHere46","(?s)"
"2177splitHere46","3222658splitHere46","[\s\S]"
"2178splitHere46","3222732splitHere46","List<E>"
"2179splitHere46","3222732splitHere46","Array"
"2180splitHere46","3222732splitHere46","E"
"2181splitHere46","3222732splitHere46",".toArray"
"2182splitHere46","3222732splitHere46","putStringArray"
"2183splitHere46","3222732splitHere46","putStringArrayList"
"2184splitHere46","3222764splitHere46","import android.app.Activity;<newline46mondego>import android.content.Context;<newline46mondego>import android.content.SharedPreferences;<newline46mondego>import android.os.Bundle;<newline46mondego>//import android.preference.PreferenceManager;<newline46mondego>import android.widget.TextView;<newline46mondego><newline46mondego>public class pref extends Activity {<newline46mondego>    /** Called when the activity is first created. */<newline46mondego>    @Override<newline46mondego>    public void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.main);<newline46mondego><newline46mondego>        Context mContext = this.getApplicationContext();<newline46mondego>        SharedPreferences prefs = mContext.getSharedPreferences(<doubleQuotes46>pref<doubleQuotes46>, 0);<newline46mondego>        String c = prefs.getString(<doubleQuotes46>c<doubleQuotes46>, <doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>        TextView t = (TextView)findViewById(R.id.te);<newline46mondego>        t.append(c);<newline46mondego><newline46mondego>        SharedPreferences.Editor edit = prefs.edit();<newline46mondego>        edit.putString(<doubleQuotes46>c<doubleQuotes46>, <doubleQuotes46>There<doubleQuotes46>);<newline46mondego>        edit.commit();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2185splitHere46","3222765splitHere46","Excp"
"2186splitHere46","3222867splitHere46","MouseListener"
"2187splitHere46","3222867splitHere46","EventListener"
"2188splitHere46","3222867splitHere46","JComponent"
"2189splitHere46","3222867splitHere46","EventListenerList"
"2190splitHere46","3222867splitHere46","EventListenerList"
"2191splitHere46","3222867splitHere46","JComponent"
"2192splitHere46","3222879splitHere46","try<newline46mondego>{ }<newline46mondego>catch(Excp excp)<newline46mondego>{<newline46mondego>   log(excp);<newline46mondego>}<newline46mondego>catch(Excp2 excp2)<newline46mondego>{<newline46mondego>   log(excp2);<newline46mondego>}<newline46mondego>finally<newline46mondego>{ }<newline46mondego>"
"2193splitHere46","3222879splitHere46","Exception"
"2194splitHere46","3222892splitHere46","LinkedList retrieveLinkedListByName(String);<newline46mondego>boolean commitNewVersionOfLinkedListByName(String,LinkedList);<newline46mondego>"
"2195splitHere46","3222933splitHere46","h:selectManyCheckbox"
"2196splitHere46","3222933splitHere46","Integer"
"2197splitHere46","3222933splitHere46","javax.faces.Integer"
"2198splitHere46","3222933splitHere46","String"
"2199splitHere46","3222933splitHere46","<h:selectManyCheckbox converter=<doubleQuotes46>javax.faces.Integer<doubleQuotes46>><newline46mondego>"
"2200splitHere46","3222933splitHere46","List<String>"
"2201splitHere46","3222963splitHere46","DispatchObject"
"2202splitHere46","3222963splitHere46","DependencyObject"
"2203splitHere46","3222963splitHere46","UIElement"
"2204splitHere46","3222963splitHere46","FrameworkElement"
"2205splitHere46","3222963splitHere46","DependencyObject"
"2206splitHere46","3222978splitHere46","java.text.Normalizer"
"2207splitHere46","3222978splitHere46","public static String removeDiacriticalMarks(String string) {<newline46mondego>    return Normalizer.normalize(string, Form.NFD)<newline46mondego>        .replaceAll(<doubleQuotes46>\\p{InCombiningDiacriticalMarks}+<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"2208splitHere46","3222978splitHere46","String text = <doubleQuotes46>mšk žilina<doubleQuotes46>;<newline46mondego>String normalized = removeDiacriticalMarks(text);<newline46mondego>System.out.println(normalized); // msk zilina<newline46mondego>"
"2209splitHere46","3222988splitHere46","DefaultOHLCDataset"
"2210splitHere46","3222988splitHere46","OHLCDataset"
"2211splitHere46","3222988splitHere46","OHLCSeriesCollection"
"2212splitHere46","3222988splitHere46","OHLCDataset"
"2213splitHere46","3222988splitHere46","OHLCSeries"
"2214splitHere46","3223019splitHere46","String"
"2215splitHere46","3223019splitHere46","ClassLoader#getResources()"
"2216splitHere46","3223019splitHere46","Enumeration<URL> roots = classLoader.getResources(<doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"2217splitHere46","3223019splitHere46","File"
"2218splitHere46","3223019splitHere46","URL"
"2219splitHere46","3223019splitHere46","File root = new File(url.getPath());<newline46mondego>"
"2220splitHere46","3223019splitHere46","File#listFiles()"
"2221splitHere46","3223019splitHere46","for (File file : root.listFiles()) {<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"2222splitHere46","3223019splitHere46","java.io.File"
"2223splitHere46","3223019splitHere46","if (file.isDirectory()) {<newline46mondego>    // Loop through its listFiles() recursively.<newline46mondego>} else {<newline46mondego>    String name = file.getName();<newline46mondego>    // Check if it's a .class file or a .jar file and handle accordingly.<newline46mondego>}<newline46mondego>"
"2224splitHere46","3223147splitHere46","CustomObject"
"2225splitHere46","3223147splitHere46","Parcelable"
"2226splitHere46","3223147splitHere46","outState.putParcelable(KEY, myList);<newline46mondego>onSaveInstanceState(outState);<newline46mondego>"
"2227splitHere46","3223147splitHere46","CustomObject"
"2228splitHere46","3223147splitHere46","Serializable"
"2229splitHere46","3223147splitHere46","Parcelable"
"2230splitHere46","3223147splitHere46","private void readObject(ObjectInputStream aStream) throws IOException, ClassNotFoundException { /*Your deserialization */  }"
"2231splitHere46","3223147splitHere46","private void writeObject(ObjectOutputStream aStream) throws IOException { /*Your serialization */}"
"2232splitHere46","3223343splitHere46","-(int) add:(id<MyProtocol>)object<newline46mondego>"
"2233splitHere46","3223343splitHere46","object"
"2234splitHere46","3223343splitHere46","MyProtocol"
"2235splitHere46","3223343splitHere46","add:"
"2236splitHere46","3223343splitHere46","MyProtocol"
"2237splitHere46","3223343splitHere46","MyProtocol"
"2238splitHere46","3223343splitHere46","@protocol MyProtocol <NSObject><newline46mondego>...<newline46mondego>@end<newline46mondego>"
"2239splitHere46","3223343splitHere46","retain"
"2240splitHere46","3223343splitHere46","release"
"2241splitHere46","3223343splitHere46","respondsToSelector:"
"2242splitHere46","3223343splitHere46","id <MyProtocol>"
"2243splitHere46","3223343splitHere46","@optional"
"2244splitHere46","3223394splitHere46","Integer.MAX_VALUE"
"2245splitHere46","3223510splitHere46","input = connection.getInputStream();<newline46mondego>byte[] buffer = new byte[4096];<newline46mondego>int n = - 1;<newline46mondego><newline46mondego>OutputStream output = new FileOutputStream( file );<newline46mondego>while ( (n = input.read(buffer)) != -1)<newline46mondego>{<newline46mondego>    if (n > 0)<newline46mondego>    {<newline46mondego>        output.write(buffer, 0, n);<newline46mondego>    }<newline46mondego>}<newline46mondego>output.close();<newline46mondego>"
"2246splitHere46","3223674splitHere46","public class ExamsFor4 {<newline46mondego><newline46mondego>public static void main(String[] arguments) {<newline46mondego><newline46mondego><newline46mondego>int inputNumber; // One of the exams input by the user.<newline46mondego>int sum = 0;     // The sum of the exams.<newline46mondego>int i;       // Number of exams.<newline46mondego>Double Avg;      // The average of the exams.<newline46mondego><newline46mondego>TextIO.put(<doubleQuotes46>Please enter the first exam: <doubleQuotes46>);        // get the first exam.<newline46mondego>inputNumber = TextIO.getlnInt();    <newline46mondego><newline46mondego>for ( i = 1; i < 4; i++ ) {  <newline46mondego><newline46mondego>    sum += inputNumber;                 // Add inputNumber to running sum.<newline46mondego>    TextIO.put(<doubleQuotes46>Please enter the next exam: <doubleQuotes46>);     // get the next exam.   <newline46mondego>    inputNumber = TextIO.getlnInt();<newline46mondego>} <newline46mondego><newline46mondego>Avg = ((double)sum) / i;<newline46mondego>TextIO.putln();<newline46mondego>TextIO.putln(<doubleQuotes46>The total sum for all <doubleQuotes46> + i +<doubleQuotes46> exams is <doubleQuotes46> + sum);<newline46mondego>TextIO.putf(<doubleQuotes46>The average for the exams entered is %1.2f.\n<doubleQuotes46>, Avg);<newline46mondego>break;<newline46mondego><newline46mondego>}   // end main ()<newline46mondego>}<newline46mondego>"
"2247splitHere46","3223805splitHere46","paintComponent"
"2248splitHere46","3223805splitHere46","firstGUI"
"2249splitHere46","3223805splitHere46","JPanel"
"2250splitHere46","3223805splitHere46","firstGUI"
"2251splitHere46","3223805splitHere46","main"
"2252splitHere46","3223805splitHere46","firstGUI"
"2253splitHere46","3223805splitHere46","contentPane"
"2254splitHere46","3223805splitHere46","public static void main(String[] args) {<newline46mondego>    JFrame frame = new JFrame();<newline46mondego>    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>    frame.setSize(500, 500);<newline46mondego>    frame.getContentPane().add(new firstGUI());<newline46mondego>    frame.setVisible(true);<newline46mondego>}<newline46mondego>"
"2255splitHere46","3223959splitHere46","UIData"
"2256splitHere46","3223959splitHere46","T[]"
"2257splitHere46","3223959splitHere46","List<E>"
"2258splitHere46","3223959splitHere46","DataModel<E>"
"2259splitHere46","3223959splitHere46","Set<E>"
"2260splitHere46","3223959splitHere46","Set<E>"
"2261splitHere46","3223959splitHere46","UIData"
"2262splitHere46","3223959splitHere46","List<E>"
"2263splitHere46","3223959splitHere46","List<E>"
"2264splitHere46","3223959splitHere46","DataModel<E>"
"2265splitHere46","3223959splitHere46","UIData"
"2266splitHere46","3223959splitHere46","public DataModel<Event> getEventModel() {<newline46mondego>    return new ArrayDataModel<Event>(events.toArray(new Event[events.size()]));<newline46mondego>}<newline46mondego>"
"2267splitHere46","3223959splitHere46","UIData"
"2268splitHere46","3223959splitHere46","Collection<E>"
"2269splitHere46","3223959splitHere46","Set<E>"
"2270splitHere46","3223970splitHere46","mvn jetty:run"
"2271splitHere46","3223970splitHere46","mvn tomcat:run"
"2272splitHere46","3224213splitHere46","synchronized"
"2273splitHere46","3224607splitHere46","@Singleton"
"2274splitHere46","3224661splitHere46","jboss:start"
"2275splitHere46","3224661splitHere46","jboss:start"
"2276splitHere46","3224661splitHere46","<plugin><newline46mondego>    <groupId>org.codehaus.mojo</groupId><newline46mondego>    <artifactId>jboss-maven-plugin</artifactId><newline46mondego>    <version>1.4.1</version><newline46mondego>    <configuration><newline46mondego>      <jbossHome>/home/pascal/opt/jboss-5.1.0.GA</jbossHome><newline46mondego>      <serverName>default</serverName><newline46mondego>      <fileName>target/my-project.war</fileName><newline46mondego>    </configuration><newline46mondego>  </plugin><newline46mondego>"
"2277splitHere46","3224664splitHere46","cycles--"
"2278splitHere46","3224664splitHere46","shop--"
"2279splitHere46","3224664splitHere46","x--"
"2280splitHere46","3224664splitHere46","x--"
"2281splitHere46","3224664splitHere46","x"
"2282splitHere46","3224664splitHere46","x-1"
"2283splitHere46","3224664splitHere46","x--"
"2284splitHere46","3224664splitHere46","--x"
"2285splitHere46","3224755splitHere46","Resource"
"2286splitHere46","3224755splitHere46","ServletContextResource"
"2287splitHere46","3224755splitHere46","File"
"2288splitHere46","3224755splitHere46","Resource.getFile()"
"2289splitHere46","3224755splitHere46","public class MyBean {<newline46mondego><newline46mondego>   private File file;<newline46mondego><newline46mondego>   public void setResource(Resource resource) {<newline46mondego>      this.file = resource.getFile();<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"2290splitHere46","3224755splitHere46","<bean class=<doubleQuotes46>MyBean<doubleQuotes46>><newline46mondego>   <property name=<doubleQuotes46>resource<doubleQuotes46> value=<doubleQuotes46>/WEB-INF/myfile<doubleQuotes46>><newline46mondego></bean><newline46mondego>"
"2291splitHere46","3224800splitHere46","columnDefinition"
"2292splitHere46","3224800splitHere46","@Generated"
"2293splitHere46","3225095splitHere46","int"
"2294splitHere46","3225095splitHere46","project.clj"
"2295splitHere46","3225095splitHere46","(defproject con <doubleQuotes46>1.0.0-SNAPSHOT<doubleQuotes46><newline46mondego>  :description <doubleQuotes46>FIXME: write<doubleQuotes46><newline46mondego>  :main con.core<newline46mondego>  :dependencies [[org.clojure/clojure <doubleQuotes46>1.1.0<doubleQuotes46>]<newline46mondego>                 [org.clojure/clojure-contrib <doubleQuotes46>1.1.0<doubleQuotes46>]<newline46mondego>                 [jline <doubleQuotes46>0.9.94<doubleQuotes46>]])<newline46mondego>"
"2296splitHere46","3225095splitHere46","src/con/core.clj"
"2297splitHere46","3225095splitHere46","(ns con.core<newline46mondego>  (:import jline.Terminal)<newline46mondego>  (:gen-class))<newline46mondego><newline46mondego><newline46mondego>(defn -main [& args]<newline46mondego>  (let [term (Terminal/getTerminal)]<newline46mondego>    (while true<newline46mondego>      (println (.readCharacter term System/in)))))<newline46mondego>"
"2298splitHere46","3225095splitHere46","jline.Terminal"
"2299splitHere46","3225095splitHere46","getTerminal"
"2300splitHere46","3225095splitHere46","asdf"
"2301splitHere46","3225095splitHere46","$ java -jar con-1.0.0-SNAPSHOT-standalone.jar <newline46mondego>97<newline46mondego>115<newline46mondego>100<newline46mondego>102<newline46mondego>"
"2302splitHere46","3225232splitHere46","SELECT *<newline46mondego>  FROM A AS a<newline46mondego>  JOIN B AS b ON b.id = a.b_id<newline46mondego> WHERE MATCH (a.f1, a.f2, b.f3) AGAINST ('foo bar');<newline46mondego>"
"2303splitHere46","3225271splitHere46","solveRecursively"
"2304splitHere46","3225307splitHere46","String line;<newline46mondego>while ((line = read.readLine())!=null) {<newline46mondego>    System.out.println(line);<newline46mondego>}<newline46mondego>"
"2305splitHere46","3225524splitHere46","public boolean load(String outputfile, List<? extends Transaction> transactions, List<String> columnHeaders, String dataFormat);<newline46mondego>"
"2306splitHere46","3225524splitHere46","List<Transaction>"
"2307splitHere46","3225524splitHere46","List<String> list = new ArrayList<String>();<newline46mondego>List<Object> objList = list; //if this were possible<newline46mondego>objList.add(Integer.valueOf(5));<newline46mondego>String val = list.get(0);  //ClassCastException here<newline46mondego>System.out.println(val);<newline46mondego>"
"2308splitHere46","3225630splitHere46","Jeff Langr, 2001"
"2309splitHere46","3225630splitHere46","import java.io.BufferedReader;<newline46mondego>import java.io.IOException;<newline46mondego>import java.util.ArrayList;<newline46mondego><newline46mondego>public class CSVReader {<newline46mondego><newline46mondego>    private BufferedReader reader;<newline46mondego>    private String line;<newline46mondego>    private static final String DOUBLE_QUOTE = <doubleQuotes46>\<doubleQuotes46><doubleQuotes46>;<newline46mondego>    private static final String COMMENT_SYMBOL = <doubleQuotes46>#<doubleQuotes46>;<newline46mondego>    private static final char stateINIT = 'S';<newline46mondego>    private static final char stateCOMMENT = '#';<newline46mondego>    private static final char stateQUOTED_DATA = 'q';<newline46mondego>    private static final char stateQUOTE_IN_QUOTED_DATA = 'Q';<newline46mondego>    private static final char stateDATA = 'D';<newline46mondego>    private static final char stateNEW_TOKEN = 'N';<newline46mondego>    private static final char stateWHITESPACE = 'W';<newline46mondego><newline46mondego>    public CSVReader(String filename) throws IOException {<newline46mondego>        reader = new BufferedReader(new java.io.FileReader(filename));<newline46mondego>        loadNextNonCommentLine();<newline46mondego>    }<newline46mondego><newline46mondego>    public ArrayList<String> next() throws IOException {<newline46mondego>        if (line == null)<newline46mondego>            throw new IOException(<doubleQuotes46>Read past end of file<doubleQuotes46>);<newline46mondego>        ArrayList<String> columns = columnsFromCSVRecord(line);<newline46mondego>        loadNextNonCommentLine();<newline46mondego>        return columns;<newline46mondego>    }<newline46mondego><newline46mondego>    public boolean hasNext() {<newline46mondego>        return line != null;<newline46mondego>    }<newline46mondego><newline46mondego>    void loadNextNonCommentLine() throws IOException {<newline46mondego>        do<newline46mondego>            line = reader.readLine();<newline46mondego>        while (line != null && line.startsWith(COMMENT_SYMBOL));<newline46mondego>        if (line == null)<newline46mondego>            reader.close();<newline46mondego>    }<newline46mondego><newline46mondego>    public ArrayList<String> columnsFromCSVRecord(String line) throws IOException {<newline46mondego>        char state = stateINIT;<newline46mondego>        char ch;<newline46mondego>        int i = 0;<newline46mondego>        ArrayList<String> tokens = new ArrayList<String>();<newline46mondego>        StringBuffer buffer = new StringBuffer();<newline46mondego>        char[] charArray = line.toCharArray();<newline46mondego>        while (i < charArray.length) {<newline46mondego>            ch = charArray[i++];<newline46mondego>            switch (state) {<newline46mondego>            case stateINIT:<newline46mondego>                switch (ch) {<newline46mondego>                case '<doubleQuotes46>':<newline46mondego>                    buffer.append(ch);<newline46mondego>                    state = stateQUOTED_DATA;<newline46mondego>                    break;<newline46mondego>                case ',':<newline46mondego>                    state = stateNEW_TOKEN;<newline46mondego>                    tokens.add(clean(buffer));<newline46mondego>                    buffer = new StringBuffer();<newline46mondego>                    break;<newline46mondego>                case '\t':<newline46mondego>                case ' ':<newline46mondego>                    break;<newline46mondego>                case '#':<newline46mondego>                    state = stateCOMMENT;<newline46mondego>                    break;<newline46mondego>                default:<newline46mondego>                    state = stateDATA;<newline46mondego>                    buffer.append(ch);<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>                break;<newline46mondego>            case stateCOMMENT:<newline46mondego>                break;<newline46mondego>            case stateQUOTED_DATA:<newline46mondego>                switch (ch) {<newline46mondego>                case '<doubleQuotes46>':<newline46mondego>                    buffer.append(ch);<newline46mondego>                    state = stateQUOTE_IN_QUOTED_DATA;<newline46mondego>                    break;<newline46mondego>                default:<newline46mondego>                    buffer.append(ch);<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>                break;<newline46mondego>            case stateQUOTE_IN_QUOTED_DATA:<newline46mondego>                switch (ch) {<newline46mondego>                case '<doubleQuotes46>':<newline46mondego>                    state = stateQUOTED_DATA;<newline46mondego>                    break;<newline46mondego>                case ',':<newline46mondego>                    state = stateNEW_TOKEN;<newline46mondego>                    tokens.add(clean(buffer));<newline46mondego>                    buffer = new StringBuffer();<newline46mondego>                    break;<newline46mondego>                case ' ':<newline46mondego>                case '\t':<newline46mondego>                    break;<newline46mondego>                case '#':<newline46mondego>                    tokens.add(clean(buffer));<newline46mondego>                    state = stateCOMMENT;<newline46mondego>                    break;<newline46mondego>                default:<newline46mondego>                    throw new IOException(<doubleQuotes46>badly formed CSV record:<doubleQuotes46> + line);<newline46mondego>                }<newline46mondego>                break;<newline46mondego>            case stateDATA:<newline46mondego>                switch (ch) {<newline46mondego>                case '#':<newline46mondego>                    tokens.add(clean(buffer));<newline46mondego>                    state = stateCOMMENT;<newline46mondego>                    break;<newline46mondego>                case ',':<newline46mondego>                    state = stateNEW_TOKEN;<newline46mondego>                    tokens.add(clean(buffer));<newline46mondego>                    buffer = new StringBuffer();<newline46mondego>                    break;<newline46mondego>                default:<newline46mondego>                    buffer.append(ch);<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>                break;<newline46mondego>            case stateNEW_TOKEN:<newline46mondego>                switch (ch) {<newline46mondego>                case '#':<newline46mondego>                    tokens.add(clean(buffer));<newline46mondego>                    state = stateCOMMENT;<newline46mondego>                    break;<newline46mondego>                case ',':<newline46mondego>                    tokens.add(clean(buffer));<newline46mondego>                    buffer = new StringBuffer();<newline46mondego>                    break;<newline46mondego>                case ' ':<newline46mondego>                case '\t':<newline46mondego>                    state = stateWHITESPACE;<newline46mondego>                    break;<newline46mondego>                case '<doubleQuotes46>':<newline46mondego>                    buffer.append(ch);<newline46mondego>                    state = stateQUOTED_DATA;<newline46mondego>                    break;<newline46mondego>                default:<newline46mondego>                    state = stateDATA;<newline46mondego>                    buffer.append(ch);<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>                break;<newline46mondego>            case stateWHITESPACE:<newline46mondego>                switch (ch) {<newline46mondego>                case '#':<newline46mondego>                    state = stateCOMMENT;<newline46mondego>                    break;<newline46mondego>                case ',':<newline46mondego>                    state = stateNEW_TOKEN;<newline46mondego>                    // ACCEPT NEW EMPTY COLUMN HERE??<newline46mondego>                    break;<newline46mondego>                case '<doubleQuotes46>':<newline46mondego>                    buffer.append(ch);<newline46mondego>                    state = stateQUOTED_DATA;<newline46mondego>                    break;<newline46mondego>                case ' ':<newline46mondego>                case '\t':<newline46mondego>                    break;<newline46mondego>                default:<newline46mondego>                    state = stateDATA;<newline46mondego>                    buffer.append(ch);<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>                break;<newline46mondego>            default:<newline46mondego>                break;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        if (state == stateQUOTED_DATA)<newline46mondego>            throw new IOException(<doubleQuotes46>Unmatched quotes in line:\n<doubleQuotes46> + line);<newline46mondego>        if (state != stateCOMMENT)<newline46mondego>            tokens.add(clean(buffer));<newline46mondego>        return tokens;<newline46mondego>    }<newline46mondego><newline46mondego>    public String clean(StringBuffer buffer) {<newline46mondego>        String string = buffer.toString().trim();<newline46mondego>        if (string.startsWith(DOUBLE_QUOTE))<newline46mondego>            return string.substring(1, string.length() - 1);<newline46mondego>        return string;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2310splitHere46","3225786splitHere46","META-INF/services/javax.xml.parsers.DocumentBuilderFactory<newline46mondego>META-INF/services/javax.xml.parsers.SAXParserFactory<newline46mondego>"
"2311splitHere46","3225787splitHere46","MyProject<newline46mondego>|<newline46mondego>+ - FileOne.java<newline46mondego>+ - FileTwo.java<newline46mondego>+ - FileThree.java<newline46mondego>"
"2312splitHere46","3225787splitHere46","src"
"2313splitHere46","3225787splitHere46","YourProject <newline46mondego>|<newline46mondego>+ - src <newline46mondego>     |<newline46mondego>     + packageA<newline46mondego>     |<newline46mondego>     + packageB<newline46mondego>"
"2314splitHere46","3225787splitHere46","classes"
"2315splitHere46","3225787splitHere46","YourProject<newline46mondego>|<newline46mondego>+ - src/ <newline46mondego>+ - lib/<newline46mondego>+ - classes/<newline46mondego>+ - resources/ <newline46mondego>+ - conf/ <newline46mondego>+ - bin/<newline46mondego>+ - doc/<newline46mondego>+ - etc/<newline46mondego>"
"2316splitHere46","3225824splitHere46","*.java"
"2317splitHere46","3225834splitHere46","public static void loadMyProgram() {<newline46mondego>    while(programStillLoading) {<newline46mondego>        doSomeLoading();<newline46mondego>        double loadPercentage = howCloseToDone();<newline46mondego><newline46mondego>        System.out.print(<doubleQuotes46>[<doubleQuotes46>);<newline46mondego>        int i = 0;<newline46mondego>        for( ; i < (int)(loadPercentage * 20); i++)<newline46mondego>            System.out.print(<doubleQuotes46>=<doubleQuotes46>);<newline46mondego>        for( ; i < 20; i++)<newline46mondego>            System.out.print(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>        System.out.print(<doubleQuotes46>] <doubleQuotes46> + (int)(loadPercentage * 100) + <doubleQuotes46>%<doubleQuotes46>);<newline46mondego><newline46mondego>        System.out.print((char)13);<newline46mondego>        //System.out.print((char)0xD); // Same as above, but in hex<newline46mondego>        //System.out.print(<doubleQuotes46>\r<doubleQuotes46>); // Same as above, but as the symbol<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println();<newline46mondego>}<newline46mondego>"
"2318splitHere46","3225834splitHere46","[<bar>] <percent>%"
"2319splitHere46","3225834splitHere46","<bar>"
"2320splitHere46","3225834splitHere46","0..p"
"2321splitHere46","3225834splitHere46","="
"2322splitHere46","3225834splitHere46","0..(20-p)"
"2323splitHere46","3225834splitHere46","%"
"2324splitHere46","3226052splitHere46","Thread.setDefaultUncaughtExceptionHandler( new Thread.UncaughtExceptionHandler() {<newline46mondego>    public void uncaughtException( final Thread t, final Throwable e ) {<newline46mondego>       ...<newline46mondego>       // Here we offer our user the possibility to 'report' the exception, YMMV<newline46mondego>    }<newline46mondego> }<newline46mondego>"
"2325splitHere46","3226118splitHere46","finally {<newline46mondego>            builder = null;<newline46mondego>            return builder;<newline46mondego>        }<newline46mondego>"
"2326splitHere46","3226118splitHere46","builder.append(<doubleQuotes46>+1<doubleQuotes46>)"
"2327splitHere46","3226118splitHere46","tryFour"
"2328splitHere46","3226118splitHere46","tryFive"
"2329splitHere46","3226118splitHere46","trySix"
"2330splitHere46","3226289splitHere46","gluOrtho2D"
"2331splitHere46","3226289splitHere46","glDrawTexiOES"
"2332splitHere46","3226371splitHere46","com.company.product.modulea"
"2333splitHere46","3226371splitHere46","com.company.product.module.web"
"2334splitHere46","3226371splitHere46","com.company.product.module.util"
"2335splitHere46","3226371splitHere46","com.company.product.model"
"2336splitHere46","3226371splitHere46","com.company.product.util"
"2337splitHere46","3226376splitHere46","Pattern"
"2338splitHere46","3226376splitHere46","[:digit:]"
"2339splitHere46","3226376splitHere46","[0-9]"
"2340splitHere46","3226376splitHere46","\d"
"2341splitHere46","3226433splitHere46","Connection con = ...;<newline46mondego>PreparedStatement statement = con.prepareStatement(<doubleQuotes46>INSERT INTO myTable (NAME, CURRENT_DATE) VALUES ( ?, ?)<doubleQuotes46>);<newline46mondego>statement.setString(1, userName);<newline46mondego>statement.setDate(2, currentDate );<newline46mondego>statement.execute();<newline46mondego>"
"2342splitHere46","3226564splitHere46","drawDayNames()"
"2343splitHere46","3226564splitHere46","JDayChooser"
"2344splitHere46","3226592splitHere46","synchronized"
"2345splitHere46","3226592splitHere46","synchronized (this)"
"2346splitHere46","3226592splitHere46","synchronized"
"2347splitHere46","3226592splitHere46","synchronized"
"2348splitHere46","3226592splitHere46","Vector"
"2349splitHere46","3226919splitHere46","java.lang.NoClassDefFoundError: org/aspectj/weaver/reflect/ReflectionWorld$ReflectionWorldException<newline46mondego>"
"2350splitHere46","3226987splitHere46","ServletEndpointSupport"
"2351splitHere46","3226987splitHere46","ServletEndpointSupport"
"2352splitHere46","3226987splitHere46","org.springframework.remoting.jaxws"
"2353splitHere46","3226987splitHere46","Controller"
"2354splitHere46","3227007splitHere46","session.setAttribute(<doubleQuotes46>sessionExpired<doubleQuotes46>, sessionExpired);<newline46mondego>"
"2355splitHere46","3227007splitHere46","session.getAttribute(<doubleQuotes46>sessionExpired<doubleQuotes46>);<newline46mondego>"
"2356splitHere46","3227007splitHere46","request.setAttribute(<doubleQuotes46>sessionExpired<doubleQuotes46>, sessionExpired);<newline46mondego>"
"2357splitHere46","3227007splitHere46","<jsp: forward page=<doubleQuotes46>login.jsp<doubleQuotes46>><newline46mondego>  <jsp: param name=<doubleQuotes46>sessionExpired<doubleQuotes46> value='<%request.getParameter(<doubleQuotes46>sessionExpired<doubleQuotes46>)%>'/> <newline46mondego></jsp: forward><newline46mondego>"
"2358splitHere46","3227007splitHere46","<%request.setAttribute(<doubleQuotes46>sessionExpired<doubleQuotes46>,sessionExpired);%><newline46mondego>"
"2359splitHere46","3227007splitHere46","<logic:redirect forward=login.jsp<doubleQuotes46> paramId=<doubleQuotes46>sessionExpired<doubleQuotes46> paramName=<doubleQuotes46>sessionExpired<doubleQuotes46> /><newline46mondego>"
"2360splitHere46","3227007splitHere46","String sessionExpired=(String)request.getAttribute(<doubleQuotes46>sessionExpired<doubleQuotes46>);<newline46mondego>"
"2361splitHere46","3227101splitHere46","java.util.concurrent.Executors.newCachedThreadPool(ThreadFactory)<newline46mondego>"
"2362splitHere46","3227101splitHere46","java.util.concurrent.ThreadFactory<newline46mondego>"
"2363splitHere46","3227101splitHere46","java.util.concurrent.ThreadFactory.newThread(Runnable)"
"2364splitHere46","3227101splitHere46","Thread"
"2365splitHere46","3227101splitHere46","ThreadGroup"
"2366splitHere46","3227101splitHere46","java.util.concurrent.Executors.DefaultThreadFactory"
"2367splitHere46","3227273splitHere46","List fields = new ArrayList(1);<newline46mondego>fields.add(<doubleQuotes46>tag<doubleQuotes46>)<newline46mondego><newline46mondego>List contents = new ArrayList(tags.size());<newline46mondego>for ( String tag : tags ) {<newline46mondego>    contents.add(tag);<newline46mondego>}<newline46mondego><newline46mondego>session.createCriteria(Event.class);<newline46mondego>criteria.createCriteria(<doubleQuotes46>eventDatas<doubleQuotes46>).add(Restrictions.and(Restrictions.in(<doubleQuotes46>field<doubleQuotes46>, fields), Restrictions.in(<doubleQuotes46>content<doubleQuotes46>, contents)));  <newline46mondego>"
"2368splitHere46","3227355splitHere46","nextData"
"2369splitHere46","3227355splitHere46","Class"
"2370splitHere46","3227355splitHere46","newInstance()"
"2371splitHere46","3227355splitHere46","GetInput"
"2372splitHere46","3227400splitHere46","double val = 3.9 - (3.9 % 0.1);<newline46mondego>    System.out.println(val); // 3.8000000000000003<newline46mondego><newline46mondego>    BigDecimal x = new BigDecimal( <doubleQuotes46>3.9<doubleQuotes46> );<newline46mondego>    BigDecimal bdVal = x.subtract( x.remainder( new BigDecimal( <doubleQuotes46>0.1<doubleQuotes46> ) ) );<newline46mondego>    System.out.println(bdVal); // 3.9<newline46mondego>"
"2373splitHere46","3227458splitHere46","doFilter()"
"2374splitHere46","3227458splitHere46","ServletRequest"
"2375splitHere46","3227458splitHere46","ServletResponse"
"2376splitHere46","3227458splitHere46","chain.doFilter"
"2377splitHere46","3227468splitHere46","frame"
"2378splitHere46","3227468splitHere46","null"
"2379splitHere46","3227468splitHere46","null"
"2380splitHere46","3227468splitHere46","button1"
"2381splitHere46","3227468splitHere46","button2"
"2382splitHere46","3227468splitHere46","frame"
"2383splitHere46","3227468splitHere46","frame = new JFrame();<newline46mondego>"
"2384splitHere46","3227634splitHere46","String"
"2385splitHere46","3227634splitHere46","StringBuilder"
"2386splitHere46","3227835splitHere46","@ViewScoped"
"2387splitHere46","3227835splitHere46","<h:messages/>"
"2388splitHere46","3227936splitHere46","double test1 = test;"
"2389splitHere46","3227936splitHere46","test"
"2390splitHere46","3227936splitHere46","5"
"2391splitHere46","3227936splitHere46","int timeout = 60 * 60 * 2   // 2 hours in seconds<newline46mondego>"
"2392splitHere46","3227974splitHere46","ItemEvents"
"2393splitHere46","3227974splitHere46","UnsupportedOperationException"
"2394splitHere46","3227974splitHere46","com4j.tlbimp.EventInterfaceGenerator"
"2395splitHere46","3227974splitHere46","close"
"2396splitHere46","3227974splitHere46","ItemEvents"
"2397splitHere46","3227974splitHere46","@DISPID(61444)<newline46mondego>public void close(Holder<Boolean> cancel) {<newline46mondego>    throw new UnsupportedOperationException();<newline46mondego>}<newline46mondego>"
"2398splitHere46","3227974splitHere46","super.close(cancel);"
"2399splitHere46","3227974splitHere46","UnsupportedOperationException"
"2400splitHere46","3227974splitHere46","System.out.println(<doubleQuotes46>Closed<doubleQuotes46>);"
"2401splitHere46","3227974splitHere46","mailItem.advise(<newline46mondego>        ItemEvents.class,<newline46mondego>        new ItemEvents() {<newline46mondego>            @Override<newline46mondego>            public void close(Holder<Boolean> cancel) {<newline46mondego>                System.out.println(<doubleQuotes46>Closed<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    );<newline46mondego>"
"2402splitHere46","3227974splitHere46","UnsupportedOperationException"
"2403splitHere46","3227974splitHere46","mailItem.advise(<newline46mondego>        ItemEvents.class,<newline46mondego>        new ItemEvents() {<newline46mondego>            @Override<newline46mondego>            public void close(Holder<Boolean> cancel) {<newline46mondego>                System.out.println(<doubleQuotes46>Getting ready to throw the exception...<doubleQuotes46>);<newline46mondego>                throw new RuntimeException(<doubleQuotes46>ERROR! ERROR!<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    );<newline46mondego>"
"2404splitHere46","3227974splitHere46","RuntimeException"
"2405splitHere46","3228335splitHere46","Filter"
"2406splitHere46","3228335splitHere46","FilterChain#doFilter()"
"2407splitHere46","3228335splitHere46","ServletRequest"
"2408splitHere46","3228335splitHere46","Filter"
"2409splitHere46","3228335splitHere46","public class Context { <newline46mondego>    private static ThreadLocal<Context> instance = new ThreadLocal<Context>();<newline46mondego>    private HttpServletRequest request;<newline46mondego>    private List<Exception> exceptions = new ArrayList<Exception>();<newline46mondego><newline46mondego>    private Context(HttpServletRequest request) {<newline46mondego>        this.request = request;<newline46mondego>        this.request.setAttribute(<doubleQuotes46>exceptions<doubleQuotes46>, exceptions);<newline46mondego>    }<newline46mondego><newline46mondego>    public static Context getCurrentInstance() {<newline46mondego>        return instance.get();<newline46mondego>    }<newline46mondego><newline46mondego>    public static Context newInstance(HttpServletRequest request) {<newline46mondego>        Context context = new Context(request);<newline46mondego>        instance.set(context);<newline46mondego>        return context;<newline46mondego>    }<newline46mondego><newline46mondego>    public void release() {<newline46mondego>        instance.remove();<newline46mondego>    }<newline46mondego><newline46mondego>    public void addException(Exception exception) {<newline46mondego>        exceptions.add(exception);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2410splitHere46","3228335splitHere46","Context context = Context.newInstance(request);<newline46mondego>try {<newline46mondego>    executeBusinessCode();<newline46mondego>} finally {<newline46mondego>    context.release();<newline46mondego>}<newline46mondego>"
"2411splitHere46","3228335splitHere46","} catch (Exception e) {<newline46mondego>    Context.getCurrentInstance().addException(e);<newline46mondego>}<newline46mondego>"
"2412splitHere46","3228468splitHere46","setOut"
"2413splitHere46","3228468splitHere46","setErr"
"2414splitHere46","3228468splitHere46","PrintStream"
"2415splitHere46","3228468splitHere46","File"
"2416splitHere46","3228468splitHere46","System.out.print"
"2417splitHere46","3228524splitHere46","web.xml"
"2418splitHere46","3228524splitHere46","<filter><newline46mondego>    <filter-name>CharacterEncodingFilter</filter-name><newline46mondego>    <filter-class><newline46mondego>         org.springframework.web.filter.CharacterEncodingFilter<newline46mondego>    </filter-class><newline46mondego>    <init-param><newline46mondego>       <param-name>encoding</param-name><newline46mondego>       <param-value>UTF-8</param-value><newline46mondego>    </init-param><newline46mondego>    <init-param><newline46mondego>      <param-name>forceEncoding</param-name><newline46mondego>      <param-value>true</param-value><newline46mondego>    </init-param><newline46mondego> </filter><newline46mondego>"
"2419splitHere46","3228524splitHere46","jdbc:mysql://localhost/dbName?characterEncoding=utf8<newline46mondego>"
"2420splitHere46","3228563splitHere46","doesFilterAcceptEventAsArgument"
"2421splitHere46","3228563splitHere46","protected abstract Class<E> getEventClass();<newline46mondego><newline46mondego>public boolean acceptsEvent(Object event) // or an appropriate class for event<newline46mondego>{<newline46mondego>    return getEventClass().isAssignableFrom(event.getClass());<newline46mondego>}<newline46mondego>"
"2422splitHere46","3228563splitHere46","getEventClass()"
"2423splitHere46","3228643splitHere46","JspWriterImpl"
"2424splitHere46","3228643splitHere46","PrintWriter"
"2425splitHere46","3228778splitHere46","public Item getItemWithParent(int parentID){<newline46mondego>    Item result = null;<newline46mondego>    if(this.categoryID == parentID){<newline46mondego>        result = this;<newline46mondego>    } else {<newline46mondego>        for(Item nextChild : children){<newline46mondego>            result = nextChild.getItemWithParent(parentID);<newline46mondego>            if(result != null){<newline46mondego>                break;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"2426splitHere46","3228778splitHere46","public void addItem(int categoryID, String name, int parentID) {<newline46mondego>    Item parentItem = findParent(parentID);<newline46mondego>    parentItem.addChild(new Item(categoryID, name, parentID));<newline46mondego>}<newline46mondego>private Item findParent(int parentID) {<newline46mondego>    return rootNode.getItemWithParent(parentID);<newline46mondego>}<newline46mondego>"
"2427splitHere46","3228778splitHere46","public String toStringHierarchy(int tabLevel){<newline46mondego>    StringBuilder builder = new StringBuilder();<newline46mondego>    for(int i = 0; i < tabLevel; i++){<newline46mondego>        builder.append(<doubleQuotes46>\t<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    builder.append(<doubleQuotes46>-<doubleQuotes46> + name);<newline46mondego>    builder.append(<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>    for(Item nextChild : children){<newline46mondego>        builder.append(nextChild.toStringHierarchy(tabLevel + 1));<newline46mondego>    }<newline46mondego>    return builder.toString();<newline46mondego>}<newline46mondego>"
"2428splitHere46","3228778splitHere46","-electronics<newline46mondego>    -Television<newline46mondego>        -21inch<newline46mondego>            -Test<newline46mondego>        -23inch<newline46mondego>        -LCD display<newline46mondego>    -player<newline46mondego>        -mp3player<newline46mondego>        -vcd player<newline46mondego>            -hd quality<newline46mondego>        -dvd player<newline46mondego>"
"2429splitHere46","3228854splitHere46","List#removeAll()"
"2430splitHere46","3228854splitHere46","List<String> alphabet = new ArrayList<String>();<newline46mondego>alphabet.add(<doubleQuotes46>A<doubleQuotes46>);<newline46mondego>alphabet.add(<doubleQuotes46>B<doubleQuotes46>);<newline46mondego>alphabet.add(<doubleQuotes46>C<doubleQuotes46>);<newline46mondego>alphabet.add(<doubleQuotes46>D<doubleQuotes46>);<newline46mondego>alphabet.add(<doubleQuotes46>E<doubleQuotes46>);<newline46mondego>alphabet.add(<doubleQuotes46>F<doubleQuotes46>);<newline46mondego>alphabet.add(<doubleQuotes46>G<doubleQuotes46>);<newline46mondego>// Etc..<newline46mondego>List<String> toRemove = Arrays.asList(<doubleQuotes46>B<doubleQuotes46>, <doubleQuotes46>F<doubleQuotes46>); // Takes varargs!<newline46mondego><newline46mondego>alphabet.removeAll(toRemove);<newline46mondego><newline46mondego>System.out.println(alphabet); // A, C, D, E, G<newline46mondego>"
"2431splitHere46","3228942splitHere46","public final static float camObjCoord[] = new float[8000];<newline46mondego>"
"2432splitHere46","3228994splitHere46","/assets/"
"2433splitHere46","3229148splitHere46","public class Uploader extends Activity {<newline46mondego><newline46mondego>    private String Tag = <doubleQuotes46>UPLOADER<doubleQuotes46>;<newline46mondego>    private String urlString = <doubleQuotes46>YOUR_ONLINE_PHP<doubleQuotes46>;<newline46mondego>    HttpURLConnection conn;<newline46mondego><newline46mondego>    /** Called when the activity is first created. */<newline46mondego>    @Override<newline46mondego>    public void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.main);<newline46mondego><newline46mondego>        String exsistingFileName = <doubleQuotes46>/sdcard/uploader/data/testfile<doubleQuotes46>;<newline46mondego><newline46mondego>        String lineEnd = <doubleQuotes46>\r\n<doubleQuotes46>;<newline46mondego>        String twoHyphens = <doubleQuotes46>--<doubleQuotes46>;<newline46mondego>        String boundary = <doubleQuotes46>*****<doubleQuotes46>;<newline46mondego>        try {<newline46mondego>            // ------------------ CLIENT REQUEST<newline46mondego><newline46mondego>            Log.e(Tag, <doubleQuotes46>Inside second Method<doubleQuotes46>);<newline46mondego><newline46mondego>            FileInputStream fileInputStream = new FileInputStream(new File(<newline46mondego>                    exsistingFileName));<newline46mondego><newline46mondego>            // open a URL connection to the Servlet<newline46mondego><newline46mondego>            URL url = new URL(urlString);<newline46mondego><newline46mondego>            // Open a HTTP connection to the URL<newline46mondego><newline46mondego>            conn = (HttpURLConnection) url.openConnection();<newline46mondego><newline46mondego>            // Allow Inputs<newline46mondego>            conn.setDoInput(true);<newline46mondego><newline46mondego>            // Allow Outputs<newline46mondego>            conn.setDoOutput(true);<newline46mondego><newline46mondego>            // Don't use a cached copy.<newline46mondego>            conn.setUseCaches(false);<newline46mondego><newline46mondego>            // Use a post method.<newline46mondego>            conn.setRequestMethod(<doubleQuotes46>POST<doubleQuotes46>);<newline46mondego><newline46mondego>            conn.setRequestProperty(<doubleQuotes46>Connection<doubleQuotes46>, <doubleQuotes46>Keep-Alive<doubleQuotes46>);<newline46mondego><newline46mondego>            conn.setRequestProperty(<doubleQuotes46>Content-Type<doubleQuotes46>,<newline46mondego>                    <doubleQuotes46>multipart/form-data;boundary=<doubleQuotes46> + boundary);<newline46mondego><newline46mondego>            DataOutputStream dos = new DataOutputStream(conn.getOutputStream());<newline46mondego><newline46mondego>            dos.writeBytes(twoHyphens + boundary + lineEnd);<newline46mondego>            dos<newline46mondego>                    .writeBytes(<doubleQuotes46>Content-Disposition: post-data; name=uploadedfile;filename=<doubleQuotes46><newline46mondego>                            + exsistingFileName + <doubleQuotes46><doubleQuotes46> + lineEnd);<newline46mondego>            dos.writeBytes(lineEnd);<newline46mondego><newline46mondego>            Log.e(Tag, <doubleQuotes46>Headers are written<doubleQuotes46>);<newline46mondego><newline46mondego>            // create a buffer of maximum size<newline46mondego><newline46mondego>            int bytesAvailable = fileInputStream.available();<newline46mondego>            int maxBufferSize = 1000;<newline46mondego>            // int bufferSize = Math.min(bytesAvailable, maxBufferSize);<newline46mondego>            byte[] buffer = new byte[bytesAvailable];<newline46mondego><newline46mondego>            // read file and write it into form...<newline46mondego><newline46mondego>            int bytesRead = fileInputStream.read(buffer, 0, bytesAvailable);<newline46mondego><newline46mondego>            while (bytesRead > 0) {<newline46mondego>                dos.write(buffer, 0, bytesAvailable);<newline46mondego>                bytesAvailable = fileInputStream.available();<newline46mondego>                bytesAvailable = Math.min(bytesAvailable, maxBufferSize);<newline46mondego>                bytesRead = fileInputStream.read(buffer, 0, bytesAvailable);<newline46mondego>            }<newline46mondego><newline46mondego>            // send multipart form data necesssary after file data...<newline46mondego><newline46mondego>            dos.writeBytes(lineEnd);<newline46mondego>            dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);<newline46mondego><newline46mondego>            // close streams<newline46mondego>            Log.e(Tag, <doubleQuotes46>File is written<doubleQuotes46>);<newline46mondego>            fileInputStream.close();<newline46mondego>            dos.flush();<newline46mondego>            dos.close();<newline46mondego><newline46mondego>        } catch (MalformedURLException ex) {<newline46mondego>            Log.e(Tag, <doubleQuotes46>error: <doubleQuotes46> + ex.getMessage(), ex);<newline46mondego>        }<newline46mondego><newline46mondego>        catch (IOException ioe) {<newline46mondego>            Log.e(Tag, <doubleQuotes46>error: <doubleQuotes46> + ioe.getMessage(), ioe);<newline46mondego>        }<newline46mondego><newline46mondego>        try {<newline46mondego>            BufferedReader rd = new BufferedReader(new InputStreamReader(conn<newline46mondego>                    .getInputStream()));<newline46mondego>            String line;<newline46mondego>            while ((line = rd.readLine()) != null) {<newline46mondego>                Log.e(<doubleQuotes46>Dialoge Box<doubleQuotes46>, <doubleQuotes46>Message: <doubleQuotes46> + line);<newline46mondego>            }<newline46mondego>            rd.close();<newline46mondego><newline46mondego>        } catch (IOException ioex) {<newline46mondego>            Log.e(<doubleQuotes46>MediaPlayer<doubleQuotes46>, <doubleQuotes46>error: <doubleQuotes46> + ioex.getMessage(), ioex);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2434splitHere46","3229223splitHere46","Velocity.init()"
"2435splitHere46","3229223splitHere46","VelocityEngine.init()"
"2436splitHere46","3229308splitHere46","try {<newline46mondego>    writeToDatabase();<newline46mondego>} catch(Exception ex) {<newline46mondego>    rollbackChanges();<newline46mondego>}<newline46mondego>"
"2437splitHere46","3229308splitHere46","try {<newline46mondego>    writeToDatabase();<newline46mondego>} catch(Exception ex) {<newline46mondego>    rollbackChanges();<newline46mondego>    throw ex;<newline46mondego>}<newline46mondego>"
"2438splitHere46","3229438splitHere46","public class TestClassTest extends TestCase {<newline46mondego><newline46mondego>    @Test<newline46mondego>    public void isThisReallyTrue() {<newline46mondego>        assertTrue(true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2439splitHere46","3229438splitHere46","public class TestClassTest {<newline46mondego><newline46mondego>    @Test<newline46mondego>    public void isThisReallyTrue() {<newline46mondego>        assertTrue(true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2440splitHere46","3229501splitHere46","driver.drive(? vehicle)"
"2441splitHere46","3229501splitHere46","vehicle"
"2442splitHere46","3229501splitHere46","Car"
"2443splitHere46","3229501splitHere46","public <T extends V> void drive(T vehicle)<newline46mondego>"
"2444splitHere46","3229797splitHere46","TABLE_PER_CLASS"
"2445splitHere46","3230004splitHere46","public class QueueExecutor implements CallbackInterface<String> {<newline46mondego><newline46mondego>    public static final int NO_THREADS = 26;<newline46mondego><newline46mondego>    private Object syncObject = new Object();<newline46mondego>    private AtomicInteger count;<newline46mondego>    Queue<String> queue = new LinkedList<String>();<newline46mondego><newline46mondego>    public void execute() {<newline46mondego>        count = new AtomicInteger(NO_THREADS);<newline46mondego>        ExecutorService executor = Executors.newFixedThreadPool(NO_THREADS/2);<newline46mondego>        for(int i=0;i<NO_THREADS;i++)<newline46mondego>            executor.execute(new ExecutorTask<String>(<doubleQuotes46><doubleQuotes46> + (char) ('A'+i), queue, this));<newline46mondego><newline46mondego>        Iterator<String> iter = new QueueIterator<String>(queue, count);<newline46mondego>        int count = 0;<newline46mondego>        while (iter.hasNext()) {<newline46mondego><newline46mondego>            System.out.println(iter.next());<newline46mondego>            count++;<newline46mondego>        }<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Handled <doubleQuotes46> + count + <doubleQuotes46> items<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    public void callback(String result) {<newline46mondego>        System.out.println(result);<newline46mondego>        count.decrementAndGet();<newline46mondego>        synchronized (syncObject) {<newline46mondego>            syncObject.notify();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public class QueueIterator<T> implements Iterator<T> {<newline46mondego>        private Queue<T> queue;<newline46mondego>        private AtomicInteger count;<newline46mondego><newline46mondego>        public QueueIterator(Queue<T> queue, AtomicInteger count) {<newline46mondego>            this.queue = queue;<newline46mondego>            this.count = count;<newline46mondego>        }<newline46mondego><newline46mondego>        public boolean hasNext() {          <newline46mondego>            while(true) {                   <newline46mondego>                synchronized (syncObject) {<newline46mondego>                    if(queue.size() > 0)<newline46mondego>                        return true;<newline46mondego><newline46mondego>                    if(count.get() == 0)<newline46mondego>                        return false;<newline46mondego><newline46mondego>                    try {<newline46mondego>                        syncObject.wait();<newline46mondego>                    } catch (InterruptedException e) {<newline46mondego>                        e.printStackTrace();<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        public T next() {<newline46mondego><newline46mondego>            synchronized (syncObject) {<newline46mondego>                if(hasNext())<newline46mondego>                    return queue.remove();<newline46mondego>                else<newline46mondego>                    return null;<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        public void remove() {<newline46mondego>            throw new UnsupportedOperationException();<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    class ExecutorTask<T> implements Runnable {<newline46mondego>        private String name;<newline46mondego>        private Queue<T> queue;<newline46mondego>        private CallbackInterface<T> callback;<newline46mondego><newline46mondego>        public ExecutorTask(String name, Queue<T> queue,<newline46mondego>                CallbackInterface<T> callback) {<newline46mondego>            this.name = name;<newline46mondego>            this.queue = queue;<newline46mondego>            this.callback = callback;<newline46mondego>        }<newline46mondego><newline46mondego>        @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>        public void run() {<newline46mondego>            try {<newline46mondego>                Thread.sleep(1000);<newline46mondego>                                    Random randomX = new Random();<newline46mondego>                for (int i = 0; i < 5; i++) {<newline46mondego>                    synchronized (syncObject) {<newline46mondego>                        Thread.sleep(randomX.nextInt(10)+1);<newline46mondego><newline46mondego>                        queue.add((T) (name + <doubleQuotes46>:<doubleQuotes46> + <doubleQuotes46>:<doubleQuotes46> + i));<newline46mondego>                        syncObject.notify();<newline46mondego>                    }<newline46mondego>                }<newline46mondego><newline46mondego>                callback.callback((T) (name + <doubleQuotes46>: Done<doubleQuotes46>));<newline46mondego><newline46mondego>            } catch (InterruptedException e) {<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public interface CallbackInterface<T> {<newline46mondego>    void callback(T result);<newline46mondego>}<newline46mondego>"
"2446splitHere46","3230004splitHere46","QueueExecutor exec = new QueueExecutor();<newline46mondego>    exec.execute();<newline46mondego>"
"2447splitHere46","3230045splitHere46","Bar"
"2448splitHere46","3230045splitHere46","Bar"
"2449splitHere46","3230045splitHere46","FooService"
"2450splitHere46","3230045splitHere46","Bar"
"2451splitHere46","3230045splitHere46","FooService"
"2452splitHere46","3230045splitHere46","Bar"
"2453splitHere46","3230045splitHere46","FooService"
"2454splitHere46","3230045splitHere46","Bar"
"2455splitHere46","3230250splitHere46","tempArray"
"2456splitHere46","3230250splitHere46","nearCaptures.get(i)"
"2457splitHere46","3230250splitHere46","i"
"2458splitHere46","3230250splitHere46","int p = nearCaptures.get(0).length;  // p is the common array length<newline46mondego>// search for majorUpset<newline46mondego>for(int j = 0; j < p; j++){<newline46mondego>  for (double[] arr : nearCaptures) {<newline46mondego>    if (arr[j]==majorUpset) return j; // first majorUpset<newline46mondego>  }<newline46mondego>}<newline46mondego>// search for threshold<newline46mondego>for(int j = 1; j < p; j++){<newline46mondego>  for (double[] arr : nearCaptures) {<newline46mondego>    if (arr[j]>arr[j-1]+threshold) return j-1; // first threshold<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2459splitHere46","3230254splitHere46","@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>"
"2460splitHere46","3230391splitHere46","<listener>"
"2461splitHere46","3230432splitHere46","ClassLoader dynClassLoader = PassMe.class.getClassLoader();<newline46mondego>"
"2462splitHere46","3230432splitHere46","com.google.appengine.tools.development.IsolatedAppClassLoader"
"2463splitHere46","3230524splitHere46","try <newline46mondego> {<newline46mondego>     final String imageURL = <doubleQuotes46>http://www.google.com/intl/en_ALL/images/logo.gif<doubleQuotes46>;<newline46mondego>     URL url = (URL) AccessController.doPrivileged(new PrivilegedAction() <newline46mondego>     {<newline46mondego><newline46mondego>         public Object run() <newline46mondego>         {<newline46mondego>             try<newline46mondego>             {<newline46mondego>               return new URL(imageURL);<newline46mondego>             }<newline46mondego>             catch (MalformedURLException e)<newline46mondego>             {<newline46mondego>               e.printStackTrace();<newline46mondego>               return null;<newline46mondego>             }<newline46mondego><newline46mondego>        }  <newline46mondego>      });  <newline46mondego><newline46mondego>     if(url == null)<newline46mondego>     {<newline46mondego>        // Something is wrong notify the user<newline46mondego>     }<newline46mondego>     else<newline46mondego>     {<newline46mondego>        // We know the url is good so continue on<newline46mondego>         img = ImageIO.read(url);<newline46mondego>     }<newline46mondego><newline46mondego>  } <newline46mondego>  catch (IOException e) <newline46mondego>  {<newline46mondego>   System.out.println(e);<newline46mondego>  }  <newline46mondego>"
"2464splitHere46","3230729splitHere46","<simpleType name=<doubleQuotes46>documentType<doubleQuotes46>><newline46mondego>    <restriction base=<doubleQuotes46>integer<doubleQuotes46>/><newline46mondego></simpleType><newline46mondego>"
"2465splitHere46","3230729splitHere46","<complexType name=<doubleQuotes46>documentType<doubleQuotes46>> <newline46mondego>    <simpleContent> <newline46mondego>        <extension base=<doubleQuotes46>integer<doubleQuotes46>/> <newline46mondego>    </simpleContent> <newline46mondego></complexType> <newline46mondego>"
"2466splitHere46","3231047splitHere46","<ui:repeat>"
"2467splitHere46","3231047splitHere46","c:forEach"
"2468splitHere46","3231106splitHere46","AnnotationSessionFactoryBean"
"2469splitHere46","3231106splitHere46","LocalSessionFactoryBean"
"2470splitHere46","3231162splitHere46","BaseActionStepsHandler"
"2471splitHere46","3231162splitHere46",".USER.ROLES"
"2472splitHere46","3231162splitHere46","com.some.pkg.BaseActionStepsHandler.USER.ROLES<newline46mondego>"
"2473splitHere46","3231162splitHere46","ClassName.class"
"2474splitHere46","3231162splitHere46","Class"
"2475splitHere46","3231197splitHere46","BeanNameUrlHandlerMapping"
"2476splitHere46","3231197splitHere46","DefaultAnnotationHandlerMapping"
"2477splitHere46","3231197splitHere46","HandlerMapping"
"2478splitHere46","3231197splitHere46","<mvc:annotation-driven/>"
"2479splitHere46","3231197splitHere46","DefaultAnnotationHandlerMapping"
"2480splitHere46","3231197splitHere46","<mvc:annotation-driven/>"
"2481splitHere46","3231197splitHere46","DefaultAnnotationHandlerMapping"
"2482splitHere46","3231197splitHere46","<mvc:annotation-driven/>"
"2483splitHere46","3231197splitHere46","<mvc:annotation-driven/>"
"2484splitHere46","3231298splitHere46","java.exe -jar"
"2485splitHere46","3231298splitHere46","Class-Path"
"2486splitHere46","3231298splitHere46","MANIFEST.MF"
"2487splitHere46","3231298splitHere46","%CLASSPATH%"
"2488splitHere46","3231298splitHere46","-cp"
"2489splitHere46","3231298splitHere46","-classpath"
"2490splitHere46","3231298splitHere46","java.exe"
"2491splitHere46","3231298splitHere46","-cp"
"2492splitHere46","3231298splitHere46","-classpath"
"2493splitHere46","3231298splitHere46","%CLASSPATH%"
"2494splitHere46","3231702splitHere46","enum"
"2495splitHere46","3231702splitHere46","ordinal()"
"2496splitHere46","3231702splitHere46","public enum Operation {<newline46mondego>  PLUS   { double eval(double x, double y) { return x + y; } },<newline46mondego>  MINUS  { double eval(double x, double y) { return x - y; } },<newline46mondego>  TIMES  { double eval(double x, double y) { return x * y; } },<newline46mondego>  DIVIDE { double eval(double x, double y) { return x / y; } };<newline46mondego><newline46mondego>  // Do arithmetic op represented by this constant<newline46mondego>  abstract double eval(double x, double y);<newline46mondego>}<newline46mondego>//Elsewhere:<newline46mondego>Operation op = Operation.PLUS;<newline46mondego>double two = op.eval(1, 1);<newline46mondego>"
"2497splitHere46","3231711splitHere46","derby.system.home"
"2498splitHere46","3231716splitHere46","class MyFilter implements EventFilter {<newline46mondego>  private final List<String> filtered = Arrays.asList(<doubleQuotes46>SOAP-ENV:Envelope<doubleQuotes46>,<newline46mondego>      <doubleQuotes46>SOAP-ENV:Body<doubleQuotes46>, <doubleQuotes46>ns2:createCustomer<doubleQuotes46>);<newline46mondego><newline46mondego>  @Override<newline46mondego>  public boolean accept(XMLEvent event) {<newline46mondego>    if (event.isStartElement())<newline46mondego>      for (String elementName : filtered)<newline46mondego>        if (event.asStartElement().getName().getLocalPart().equals(<newline46mondego>            elementName))<newline46mondego>          return false;<newline46mondego>    if (event.isEndElement())<newline46mondego>      for (String elementName : filtered)<newline46mondego>        if (event.asEndElement().getName().getLocalPart().equals(<newline46mondego>            elementName))<newline46mondego>          return false;<newline46mondego>    return true;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2499splitHere46","3231716splitHere46","DOMResult result = new DOMResult();<newline46mondego>XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();<newline46mondego>xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, false);<newline46mondego>XMLEventReader reader = xmlInputFactory<newline46mondego>    .createXMLEventReader(new StreamSource(new File(<doubleQuotes46>soap.xml<doubleQuotes46>)));<newline46mondego>reader = xmlInputFactory.createFilteredReader(reader, new MyFilter());<newline46mondego>TransformerFactory transFactory = TransformerFactory.newInstance();<newline46mondego>Transformer transformer = transFactory.newTransformer();<newline46mondego>transformer.transform(new StAXSource(reader), result);<newline46mondego>Document document = (Document) result.getNode();<newline46mondego>"
"2500splitHere46","3231814splitHere46","<hibernate-configuration><newline46mondego>    <session-factory><newline46mondego>        <property name=<doubleQuotes46>dialect<doubleQuotes46>>org.hibernate.dialect.MySQLDialect</property><newline46mondego>        <property name=<doubleQuotes46>show_sql<doubleQuotes46>>false</property><newline46mondego>        <property name=<doubleQuotes46>transaction.factory_class<doubleQuotes46>><newline46mondego>            org.hibernate.transaction.JTATransactionFactory<newline46mondego>        </property><newline46mondego>        <property name=<doubleQuotes46>jta.UserTransaction<doubleQuotes46>>java:comp/UserTransaction</property><newline46mondego>        <property name=<doubleQuotes46>configClass<doubleQuotes46>>org.hibernate.cfg.AnnotationConfiguration</property><newline46mondego><newline46mondego>        <mapping class=<doubleQuotes46>com.domain.Worker<doubleQuotes46>/><newline46mondego>    </session-factory><newline46mondego></hibernate-configuration><newline46mondego>"
"2501splitHere46","3231870splitHere46","classes12.jar"
"2502splitHere46","3231870splitHere46","ojdbc14.jar"
"2503splitHere46","3231870splitHere46","ojdbc5.jar"
"2504splitHere46","3231870splitHere46","ojdbc6.jar"
"2505splitHere46","3231870splitHere46","nls_charset11.jar"
"2506splitHere46","3231870splitHere46","nls_charset12.jar"
"2507splitHere46","3231870splitHere46","orai18n.jar"
"2508splitHere46","3232010splitHere46","/jdk/src/share/classes/com/sun/java/swing/plaf/nimbus"
"2509splitHere46","3232161splitHere46","<root>"
"2510splitHere46","3232161splitHere46","<?xml...>"
"2511splitHere46","3232161splitHere46","</root>"
"2512splitHere46","3232267splitHere46","package data;<newline46mondego><newline46mondego>public class AddUserBean { <newline46mondego>    private String name;<newline46mondego>    private int age;<newline46mondego>    private String email;<newline46mondego><newline46mondego>    public String getName() { return name; }<newline46mondego>    public int getAge() { return age; }<newline46mondego>    public String getEmail() { return email; }<newline46mondego><newline46mondego>    public void setName(String name) { this.name = name; }<newline46mondego>    public void setAge(int age) { this.age = age; }<newline46mondego>    public void setEmail(String email) { this.email = email; }<newline46mondego>}<newline46mondego>"
"2513splitHere46","3232267splitHere46","<!DOCTYPE html><newline46mondego><html lang=<doubleQuotes46>en<doubleQuotes46>><newline46mondego>    <head><newline46mondego>        <title>Reg JSP</title><newline46mondego>        <link rel=<doubleQuotes46>stylesheet<doubleQuotes46> type=<doubleQuotes46>text/css<doubleQuotes46> href=<doubleQuotes46>commonstyle.css<doubleQuotes46>><newline46mondego>    </head><newline46mondego>    <body><newline46mondego>        <jsp:useBean id=<doubleQuotes46>user<doubleQuotes46> class=<doubleQuotes46>data.AddUserBean<doubleQuotes46> /><newline46mondego>        <jsp:setProperty name =<doubleQuotes46>user<doubleQuotes46> property=<doubleQuotes46>*<doubleQuotes46> /><newline46mondego>        <h1><newline46mondego>            Customer Name: ${user.name}<newline46mondego><newline46mondego>            Age: ${user.age}<newline46mondego><newline46mondego>            Email: ${user.email}<newline46mondego><newline46mondego>        </h1><newline46mondego>    </body><newline46mondego></html><newline46mondego>"
"2514splitHere46","3232267splitHere46","${}"
"2515splitHere46","3232267splitHere46","jsp:getProperty"
"2516splitHere46","3232650splitHere46","// RESCALEIMAGE<newline46mondego>// scales an image according to the ratios given as parameters<newline46mondego>// derived from http://willperone.net/Code/codescaling.php<newline46mondego><newline46mondego>public static Image rescaleImage(Image original, double XRatio, double YRatio)<newline46mondego>{<newline46mondego>    // the original width and height<newline46mondego>    int originalWidth = original.getWidth();<newline46mondego>    int originalHeight = original.getHeight();<newline46mondego><newline46mondego>    // the target width and height<newline46mondego>    int newWidth = (int)(XRatio * originalWidth);<newline46mondego>    int newHeight = (int)(YRatio * originalHeight);<newline46mondego><newline46mondego>    // create and fill the pixel array from the original image<newline46mondego>    int[] rawInput = new int[originalHeight * originalWidth];<newline46mondego>    original.getRGB(rawInput, 0, originalWidth, 0, 0, originalWidth, originalHeight);<newline46mondego><newline46mondego>    // pixel array for the target image<newline46mondego>    int[] rawOutput = new int[newWidth*newHeight];<newline46mondego><newline46mondego>    // YD compensates for the x loop by subtracting the width back out<newline46mondego>    int YD = (originalHeight / newHeight) * originalWidth - originalWidth;<newline46mondego>    int YR = originalHeight % newHeight;<newline46mondego>    int XD = originalWidth / newWidth;<newline46mondego>    int XR = originalWidth % newWidth;<newline46mondego>    int outOffset= 0;<newline46mondego>    int inOffset=  0;<newline46mondego><newline46mondego>    for (int y = newHeight, YE = 0; y > 0; y--)<newline46mondego>    {<newline46mondego>        for (int x = newWidth, XE = 0; x > 0; x--)<newline46mondego>        {<newline46mondego>            rawOutput[outOffset++] = rawInput[inOffset];<newline46mondego><newline46mondego>            inOffset += XD;<newline46mondego>            XE += XR;<newline46mondego><newline46mondego>            if (XE >= newWidth)<newline46mondego>            {<newline46mondego>                XE -= newWidth;<newline46mondego>                inOffset++;<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        inOffset += YD;<newline46mondego>        YE += YR;<newline46mondego><newline46mondego>        if (YE >= newHeight)<newline46mondego>        {<newline46mondego>            YE -= newHeight;<newline46mondego>            inOffset += originalWidth;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return Image.createRGBImage(rawOutput, newWidth, newHeight, true);<newline46mondego>}<newline46mondego>"
"2517splitHere46","3232699splitHere46","@Id"
"2518splitHere46","3232699splitHere46","@EmbeddedId"
"2519splitHere46","3232699splitHere46","@Id"
"2520splitHere46","3232699splitHere46","@Id"
"2521splitHere46","3232741splitHere46","public interface Command<newline46mondego>{<newline46mondego>    void execute(Object parameter);<newline46mondego>}<newline46mondego><newline46mondego>public class LeafCommand implements Command<newline46mondego>{<newline46mondego>    public void execute(Object parameter)<newline46mondego>    {  <newline46mondego>        // do something for a leaf<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class CompositeCommand implements Command<newline46mondego>{<newline46mondego>    private List<Command> commands;<newline46mondego><newline46mondego>    void execute(Object parameter)<newline46mondego>    {<newline46mondego>        for (Command child : commands) <newline46mondego>        { <newline46mondego>           child.execute(parameter);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2522splitHere46","3232741splitHere46","instanceof"
"2523splitHere46","3232797splitHere46","addcube"
"2524splitHere46","3232797splitHere46","Global.i"
"2525splitHere46","3232797splitHere46","Global.i"
"2526splitHere46","3232797splitHere46","addcube"
"2527splitHere46","3232797splitHere46","Glocal.cubes"
"2528splitHere46","3232797splitHere46","Global.i"
"2529splitHere46","3232886splitHere46","my-app<newline46mondego>|-- pom.xml<newline46mondego>`-- src<newline46mondego>    |-- main<newline46mondego>    |   |-- java<newline46mondego>    |   |   `-- com<newline46mondego>    |   |       `-- mycompany<newline46mondego>    |   |           `-- app<newline46mondego>    |   |               `-- App.java<newline46mondego>    |   `-- resources<newline46mondego>    |       `-- META-INF<newline46mondego>    |           `-- application.properties<newline46mondego>    [            -- myDtd.dtd<newline46mondego>    `-- test<newline46mondego>        `-- java<newline46mondego>            `-- com<newline46mondego>                `-- mycompany<newline46mondego>                    `-- app<newline46mondego>                        `-- AppTest.java<newline46mondego>"
"2530splitHere46","3233273splitHere46","public int[][] loadBoard(int map) {<newline46mondego>    if (map == 1) { <newline46mondego> return new int[][] { <newline46mondego><newline46mondego> {2,2,24,24,24,24,24,3,3,0,0,0,1 },<newline46mondego><newline46mondego> { 2,2,24,23,23,23,24,1,3,0,0,0,1 },<newline46mondego><newline46mondego> { 1,1,24,23,23,23,24,1,3,3,3,3,1 },<newline46mondego><newline46mondego> { 1,1,24,24,23,24,24,1,1,1,1,3,1 },<newline46mondego><newline46mondego> { 1,1,1,1,7,1,1,1,1,1,1,3,1 },<newline46mondego><newline46mondego> { 5,1,1,1,7,7,7,7,7,1,1,1,1 },<newline46mondego><newline46mondego> { 6,3,3,1,3,3,3,1,7,7,7,3,1 },<newline46mondego><newline46mondego> { 6,3,3,1,3,1,1,1,1,1,7,1,1 },<newline46mondego><newline46mondego> { 3,3,1,1,1,1,1,1,1,1,7,1,1 } };<newline46mondego><newline46mondego> }else{<newline46mondego><newline46mondego> return new int[][] {<newline46mondego><newline46mondego> { 1,1,1,1,1,24,1,1,1,1,1,1,1 },<newline46mondego><newline46mondego><newline46mondego> { 1,1,1,1,1,24,1,1,1,1,1,1,1 },<newline46mondego><newline46mondego> { 1,1,1,1,1,24,1,1,24,1,1,1,1 },<newline46mondego><newline46mondego> { 1,1,1,1,1,24,1,1,24,1,1,1,1 },<newline46mondego><newline46mondego> { 1,1,7,1,1,24,24,24,24,1,1,1,1 },<newline46mondego><newline46mondego> { 1,1,7,1,1,24,1,24,1,1,1,1,1 },<newline46mondego><newline46mondego> { 1,1,1,1,1,24,1,1,1,1,1,1,1 },<newline46mondego><newline46mondego> { 1,1,1,1,1,24,1,1,1,1,1,1,1 },<newline46mondego><newline46mondego> { 1,3,3,1,1,24,1,1,1,1,1,1,1 },<newline46mondego><newline46mondego> }; } <newline46mondego><newline46mondego>}<newline46mondego>"
"2531splitHere46","3233273splitHere46","private static final int[][] BOARD1 = <array here>;<newline46mondego> private static final int[][] BOARD2 = <array here>;<newline46mondego> private static final int[][] BOARD3 = <array here>;<newline46mondego> private static final int[][] BOARD4 = <array here>;<newline46mondego><newline46mondego><newline46mondego> public function int[][] loadBoard( int choice ) {<newline46mondego>   switch( choice ) {<newline46mondego>      case 1: return BOARD1;<newline46mondego>      case 2: return BOARD2;<newline46mondego>      case 3: return BOARD3;<newline46mondego>      case 4: return BOARD4;<newline46mondego>      default: throw new RuntimeException( <doubleQuotes46>Unknown board choice<doubleQuotes46> );<newline46mondego>   }<newline46mondego> }<newline46mondego>"
"2532splitHere46","3233371splitHere46","- wsdl (contains WSDL file"
"2533splitHere46","3233398splitHere46","<doubleQuotes46>emptiness<doubleQuotes46>.substring(9) returns <doubleQuotes46><doubleQuotes46> (an empty string)<newline46mondego>"
"2534splitHere46","3233398splitHere46","|"
"2535splitHere46","3233398splitHere46","|0| A |1| B |2| C |3| D |4| E |5|<newline46mondego>"
"2536splitHere46","3233404splitHere46","(defn post<newline46mondego>  [title content timestamp]<newline46mondego>    (let [[innholdet tajm]<newline46mondego>       [(str <doubleQuotes46><html><newline46mondego>              <head><newline46mondego>              <title><doubleQuotes46> title <doubleQuotes46> :: <doubleQuotes46> blog_title <doubleQuotes46></title></head><newline46mondego>              <body><h1><doubleQuotes46> title <doubleQuotes46></h1><newline46mondego>              <br/><doubleQuotes46> content <doubleQuotes46><br/><i>posted <doubleQuotes46> (Date. **(Long/parseLong timestamp)**) <doubleQuotes46></i><newline46mondego>              <br/><a href=\<doubleQuotes46><doubleQuotes46> (str blog_url) <doubleQuotes46>\<doubleQuotes46>>[main]</a> | <newline46mondego>              <a href=\<doubleQuotes46><doubleQuotes46> (str blog_url) <doubleQuotes46>/<doubleQuotes46> timestamp <doubleQuotes46>.html\<doubleQuotes46>>[permalink]</a><newline46mondego>              </body></html><doubleQuotes46>) (str timestamp<doubleQuotes46>.html<doubleQuotes46>)]]<newline46mondego>                 (spit tajm innholdet)<newline46mondego>   )<newline46mondego> )<newline46mondego>"
"2537splitHere46","3233456splitHere46","public Value getSomeValue(){<newline46mondego>        ...<newline46mondego>    }<newline46mondego>"
"2538splitHere46","3233456splitHere46","<result property=<doubleQuotes46>someValue<doubleQuotes46> column=<doubleQuotes46>valueColumn<doubleQuotes46>/><newline46mondego>"
"2539splitHere46","3233498splitHere46","return board;"
"2540splitHere46","3233498splitHere46","if (condition)<newline46mondego>  return /* Some things go here */<newline46mondego>else<newline46mondego>  return /* The rest go here */<newline46mondego>return /* But who goes here? */<newline46mondego>"
"2541splitHere46","3233498splitHere46","Unreachable"
"2542splitHere46","3233528splitHere46","status, data_1 = accessResource(<doubleQuotes46>/resource/some_resource<doubleQuotes46>)<newline46mondego>status, data_2 = accessResource(<doubleQuotes46>/resource/some_other_resource<doubleQuotes46>)<newline46mondego># data_1 and data_2 now hold a dictionary, list, etc., depending on the JSON<newline46mondego># that was returned.<newline46mondego># ... some code that combines and processes the data and produces a dict or list<newline46mondego># with the result. The data object you return here is then automatically rendered<newline46mondego># in either HTML or JSON, depending on the client request.<newline46mondego>return Result.ok(data)<newline46mondego>"
"2543splitHere46","3233543splitHere46","synchronized"
"2544splitHere46","3233543splitHere46","wait()"
"2545splitHere46","3233543splitHere46","wait()"
"2546splitHere46","3233543splitHere46","notifyAll()"
"2547splitHere46","3233543splitHere46","notify()"
"2548splitHere46","3233543splitHere46","class Main {<newline46mondego>    private final Runway[] runways = { new Runway(), new Runway() };<newline46mondego><newline46mondego>    void main(){<newline46mondego>        for(int i=0; i<5; i++){<newline46mondego>             System.out.println(<doubleQuotes46>Plane #<doubleQuotes46> + i + <doubleQuotes46> attempting to land.<doubleQuotes46>);<newline46mondego>             Runway runway = runways.get(i%runways.length);<newline46mondego>             runway.land(new Plane(i));<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>class Runway {<newline46mondego>    public synchronized land(Plane plane){<newline46mondego>        System.out.println(plane + <doubleQuotes46> landed.<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2549splitHere46","3233543splitHere46","wait()"
"2550splitHere46","3233543splitHere46","class Main {<newline46mondego>    private final Runway[] runways = { new Runway(), new Runway() };<newline46mondego><newline46mondego>    void main(){<newline46mondego>        Thread maintainer = new Thread(){<newline46mondego>            public void run(){<newline46mondego>               try{<newline46mondego>                     Thread.sleep(500);<newline46mondego>                     for(Runway runway : runways){<newline46mondego>                           runway.ready = true;<newline46mondego>                           runway.notifyAll();<newline46mondego>                     }<newline46mondego>               }catch(InterruptedException e){}<newline46mondego>        };<newline46mondego>        maintainer.start();<newline46mondego>        for(int i=0; i<5; i++){<newline46mondego>             System.out.println(<doubleQuotes46>Plane #<doubleQuotes46> + i + <doubleQuotes46> attempting to land.<doubleQuotes46>);<newline46mondego>             Runway runway = runways.get(i%runways.length);<newline46mondego>             runway.land(new Plane(i));<newline46mondego>        }<newline46mondego>    }<newline46mondego>}    <newline46mondego><newline46mondego><newline46mondego>class Runway {<newline46mondego>    boolean ready; //getter/setter omitted..<newline46mondego><newline46mondego>    public synchronized land(Plane plane){<newline46mondego>       //You always have to wait like this, never `if (something) wait();`  <newline46mondego>       while(!ready){<newline46mondego>             wait();<newline46mondego>       }<newline46mondego>       //We have the lock and runway is ready<newline46mondego>       System.out.println(plane + <doubleQuotes46> landed.<doubleQuotes46>);<newline46mondego>       ready = false; //runway is littered?<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2551splitHere46","3233605splitHere46","<profile><newline46mondego> <id>test</id><newline46mondego> <build><newline46mondego>   <plugins><newline46mondego>     <plugin><newline46mondego>       <artifactId>maven-antrun-plugin</artifactId><newline46mondego>       <executions><newline46mondego>         <execution><newline46mondego>           <phase>process-resources</phase><newline46mondego>           <goals><newline46mondego>             <goal>run</goal><newline46mondego>           </goals><newline46mondego>           <configuration><newline46mondego>             <tasks><newline46mondego>               <delete file=<doubleQuotes46>${project.build.outputDirectory}/environment.properties<doubleQuotes46>/><newline46mondego>               <copy file=<doubleQuotes46>src/main/resources/environment.test.properties<doubleQuotes46><newline46mondego>                     tofile=<doubleQuotes46>${project.build.outputDirectory}/environment.properties<doubleQuotes46>/><newline46mondego>             </tasks><newline46mondego>           </configuration><newline46mondego>         </execution><newline46mondego>       </executions><newline46mondego>    </plugin><newline46mondego>   </plugins><newline46mondego>  </build><newline46mondego> </profile><newline46mondego>"
"2552splitHere46","3233676splitHere46","getSortKeys()"
"2553splitHere46","3233676splitHere46","setSortKeys()"
"2554splitHere46","3233676splitHere46","getRowSorter()"
"2555splitHere46","3233863splitHere46","Intent"
"2556splitHere46","3233863splitHere46","<service android:name=<doubleQuotes46>.app.AlarmService_Service<doubleQuotes46> android:process=<doubleQuotes46>:remote<doubleQuotes46> /><newline46mondego><newline46mondego>    <activity android:name=<doubleQuotes46>.app.AlarmService<doubleQuotes46> android:label=<doubleQuotes46>@string/activity_alarm_service<doubleQuotes46>><newline46mondego>        <intent-filter><newline46mondego>            <action android:name=<doubleQuotes46>android.intent.action.MAIN<doubleQuotes46> /><newline46mondego>            <category android:name=<doubleQuotes46>android.intent.category.SAMPLE_CODE<doubleQuotes46> /><newline46mondego>        </intent-filter><newline46mondego>    </activity><newline46mondego>"
"2557splitHere46","3233977splitHere46","static Singleton getInstance()"
"2558splitHere46","3233977splitHere46","static"
"2559splitHere46","3233977splitHere46","static"
"2560splitHere46","3234287splitHere46","import javax.crypto.Cipher;<newline46mondego>import javax.crypto.spec.SecretKeySpec;<newline46mondego>import javax.xml.bind.DatatypeConverter;<newline46mondego><newline46mondego>public final void testTesting() throws Exception {<newline46mondego>    final String plainText = <doubleQuotes46>plain text<doubleQuotes46>;<newline46mondego>    final String result = encrypt(plainText);<newline46mondego>    System.out.println(result);<newline46mondego>}<newline46mondego><newline46mondego>public String encrypt(final String plainText) throws Exception {<newline46mondego>    final byte[] data = plainText.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>    final byte[] encoded = encrypt(data);<newline46mondego>    final String result = new String(encoded);<newline46mondego>    return result;<newline46mondego>}<newline46mondego><newline46mondego>public byte[] encrypt(final byte[] data) throws Exception {<newline46mondego>    // this is just an example key, real code should use a properly generated shared secret<newline46mondego>    final byte[] secret = new byte[] {42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42};<newline46mondego>    final SecretKeySpec key = new SecretKeySpec(secret, <doubleQuotes46>AES<doubleQuotes46>);<newline46mondego><newline46mondego>    final Cipher encryptCipher = Cipher.getInstance(<doubleQuotes46>AES/CBC/PKCS5Padding<doubleQuotes46>);<newline46mondego>    encryptCipher.init(Cipher.ENCRYPT_MODE, key);<newline46mondego>    final byte[] iv = encryptCipher.getIV();<newline46mondego>    final byte[] encrypted = encryptCipher.doFinal(data);<newline46mondego><newline46mondego>    final int outputLength = encrypted.length;<newline46mondego>    final int ivLength = iv.length;<newline46mondego><newline46mondego>    final byte[] results = new byte[outputLength + ivLength];<newline46mondego>    System.arraycopy(iv, 0, results, 0, ivLength);<newline46mondego>    System.arraycopy(encrypted, 0, results, ivLength, outputLength);<newline46mondego><newline46mondego>    return DatatypeConverter.printBase64Binary(encoded);<newline46mondego>}<newline46mondego>"
"2561splitHere46","3234287splitHere46","<?php<newline46mondego>$key = base64_decode('KioqKioqKioqKioqKioqKg==');<newline46mondego>$input = base64_decode($_GET['input']);<newline46mondego>$plain_text = substr($input, 16);<newline46mondego>$initialization_vector = substr($input, 0, 16);<newline46mondego>echo pkcs5_unpad(mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $plain_text, MCRYPT_MODE_CBC, $initialization_vector));<newline46mondego><newline46mondego>function pkcs5_unpad($text) {<newline46mondego>    $pad = ord($text{strlen($text)-1});<newline46mondego>    if ($pad > strlen($text)) {<newline46mondego>        return false;<newline46mondego>    }<newline46mondego>    if (strspn($text, chr($pad), strlen($text) - $pad) != $pad) {<newline46mondego>        return false;<newline46mondego>    }<newline46mondego>    return substr($text, 0, -1 * $pad);<newline46mondego>}<newline46mondego>?><newline46mondego>"
"2562splitHere46","3234287splitHere46","pkcs5_unpad"
"2563splitHere46","3234330splitHere46","Android programming is done with JAVA"
"2564splitHere46","3234330splitHere46","for I-phone you have to learn Objective-C"
"2565splitHere46","3234368splitHere46","SQLiteOpenDatabase.setLockingEnabled(true)"
"2566splitHere46","3234888splitHere46","/WEB-INF/lib"
"2567splitHere46","3235160splitHere46","getResourceAsStream"
"2568splitHere46","3235160splitHere46","Object.getClass"
"2569splitHere46","3235160splitHere46","Class.getResourceAsStream"
"2570splitHere46","3235344splitHere46","Hashtable"
"2571splitHere46","3235344splitHere46","ConcurrentHashMap"
"2572splitHere46","3235344splitHere46","Vector"
"2573splitHere46","3235344splitHere46","List"
"2574splitHere46","3235344splitHere46","Hashtable"
"2575splitHere46","3235344splitHere46","Vector"
"2576splitHere46","3235344splitHere46","addBlock()"
"2577splitHere46","3235687splitHere46","System.out.println"
"2578splitHere46","3235687splitHere46","ArrayList<T>"
"2579splitHere46","3235687splitHere46","List<T>"
"2580splitHere46","3235687splitHere46","List<T>"
"2581splitHere46","3235687splitHere46","get"
"2582splitHere46","3235687splitHere46","List<T>"
"2583splitHere46","3235687splitHere46","RandomAccess"
"2584splitHere46","3236103splitHere46","View view = mInflater.inflate(R.layout.list_load_more_row, null);<newline46mondego><newline46mondego>TextView footer = (TextView) view.findViewById(R.id.loadMore);<newline46mondego><newline46mondego>getListView().addFooterView(footer);<newline46mondego><newline46mondego>setListAdapter(ListViewHelper.getAdapterForContentList(mContent, this));<newline46mondego>"
"2585splitHere46","3236362splitHere46","try{<newline46mondego>  // Your code<newline46mondego>}catch(IOException e){<newline46mondego>  // Deal with IOException<newline46mondego>}<newline46mondego>"
"2586splitHere46","3236362splitHere46","public static void main(String[] args) throws IOException{<newline46mondego>  // Your code<newline46mondego>}<newline46mondego>"
"2587splitHere46","3236659splitHere46","// Get the current application descriptor.<newline46mondego>ApplicationDescriptor current = ApplicationDescriptor<newline46mondego>                        .currentApplicationDescriptor();<newline46mondego><newline46mondego>// Schedules are rounded to the nearest minute so ensure the<newline46mondego>// application is scheduled for at least 1 minute in the future.<newline46mondego>ApplicationManager.getApplicationManager().scheduleApplication(<newline46mondego>                        current, System.currentTimeMillis() + 60001, true);<newline46mondego>"
"2588splitHere46","3236732splitHere46","Global.i += 72;"
"2589splitHere46","3236732splitHere46","Global.camObjCoord[Global.i++] = ..."
"2590splitHere46","3236732splitHere46","+1"
"2591splitHere46","3236732splitHere46","+2"
"2592splitHere46","3236732splitHere46","+3"
"2593splitHere46","3236732splitHere46","+="
"2594splitHere46","3236732splitHere46","Global"
"2595splitHere46","3236732splitHere46","float[]"
"2596splitHere46","3236796splitHere46","javac"
"2597splitHere46","3236828splitHere46","HttpSessionBindingListener"
"2598splitHere46","3236828splitHere46","User"
"2599splitHere46","3236828splitHere46","public class User implements HttpSessionBindingListener {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void valueBound(HttpSessionBindingEvent event) {<newline46mondego>        Set<User> logins = (Set<User>) event.getSession().getServletContext().getAttribute(<doubleQuotes46>logins<doubleQuotes46>);<newline46mondego>        logins.add(this);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void valueUnbound(HttpSessionBindingEvent event) {<newline46mondego>        Set<User> logins = (Set<User>) event.getSession().getServletContext().getAttribute(<doubleQuotes46>logins<doubleQuotes46>);<newline46mondego>        logins.remove(this);<newline46mondego>    }<newline46mondego><newline46mondego>    // @Override equals() and hashCode() as well!<newline46mondego><newline46mondego>}<newline46mondego>"
"2600splitHere46","3236828splitHere46","ServletContext"
"2601splitHere46","3236828splitHere46","Set<User> logins = (Set<User>) servletContext.getAttribute(<doubleQuotes46>logins<doubleQuotes46>);<newline46mondego>"
"2602splitHere46","3236849splitHere46","SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>yyyyMMdd'T'HHmmss<doubleQuotes46>);<newline46mondego>sdf.setTimeZone(TimeZone.getTimeZone(<doubleQuotes46>UTC<doubleQuotes46>));<newline46mondego>System.out.println(sdf.parse(<doubleQuotes46>20100713T113000Z<doubleQuotes46>));<newline46mondego>"
"2603splitHere46","3236861splitHere46","want = scan.next();"
"2604splitHere46","3236861splitHere46","nextLine()"
"2605splitHere46","3236861splitHere46","nextInt()"
"2606splitHere46","3236861splitHere46","nextLine()"
"2607splitHere46","3236861splitHere46","Scanner sc = new Scanner(System.in);<newline46mondego>    System.out.println(<doubleQuotes46>nextInt() = <doubleQuotes46> + sc.nextInt());<newline46mondego>    System.out.println(<doubleQuotes46>nextLine() = <doubleQuotes46> + sc.nextLine());<newline46mondego>"
"2608splitHere46","3236861splitHere46","5"
"2609splitHere46","3236861splitHere46","nextInt() = 5<newline46mondego>nextLine() = <newline46mondego>"
"2610splitHere46","3236861splitHere46","nextLine()"
"2611splitHere46","3236861splitHere46","5 yeah!"
"2612splitHere46","3236861splitHere46","nextInt() = 5<newline46mondego>nextLine() =  yeah!<newline46mondego>"
"2613splitHere46","3236861splitHere46","<doubleQuotes46> yeah!<doubleQuotes46>"
"2614splitHere46","3236861splitHere46","5"
"2615splitHere46","3236861splitHere46","String nextLine()"
"2616splitHere46","3236861splitHere46","numRandom = rand.nextInt(9)+1; // this can only be in 1..9 range inclusive!<newline46mondego>"
"2617splitHere46","3236861splitHere46","java.util.Random"
"2618splitHere46","3236861splitHere46","int nextInt(int n)"
"2619splitHere46","3236861splitHere46","Random.nextInt(int)"
"2620splitHere46","3237160splitHere46","boolean"
"2621splitHere46","3237160splitHere46","public boolean is<PropertyName>()"
"2622splitHere46","3237160splitHere46","public boolean isMarsupial();<newline46mondego>    public void setMarsupial(boolean m);<newline46mondego>"
"2623splitHere46","3237160splitHere46","A"
"2624splitHere46","3237160splitHere46","null"
"2625splitHere46","3237160splitHere46","<doubleQuotes46><doubleQuotes46>"
"2626splitHere46","3237160splitHere46","false"
"2627splitHere46","3237160splitHere46","A"
"2628splitHere46","3237160splitHere46","Boolean"
"2629splitHere46","3237160splitHere46","A"
"2630splitHere46","3237160splitHere46","A"
"2631splitHere46","3237160splitHere46","String"
"2632splitHere46","3237160splitHere46","Boolean.valueOf(A)"
"2633splitHere46","3237199splitHere46","InputStream str = getClass().getResourceAsStream(<doubleQuotes46>/UPDATE.txt<doubleQuotes46>);<newline46mondego>"
"2634splitHere46","3237199splitHere46","InputStream str = MyApp.class.getResourceAsStream(<doubleQuotes46>/UPDATE.txt<doubleQuotes46>);<newline46mondego>"
"2635splitHere46","3237199splitHere46","StreamSource"
"2636splitHere46","3237199splitHere46","new StreamSource(getClass().getResourceAsStream(<doubleQuotes46>/UPDATE.txt<doubleQuotes46>));<newline46mondego>"
"2637splitHere46","3237341splitHere46","Thread"
"2638splitHere46","3237341splitHere46","ThreadGroup"
"2639splitHere46","3237341splitHere46","ExecutorService"
"2640splitHere46","3237341splitHere46","ExecutorService"
"2641splitHere46","3237341splitHere46","Callable"
"2642splitHere46","3237341splitHere46","Thread"
"2643splitHere46","3237341splitHere46","Vector"
"2644splitHere46","3237341splitHere46","Hashtable"
"2645splitHere46","3237684splitHere46","ArrayList"
"2646splitHere46","3237684splitHere46","ArrayList list = new ArrayList();<newline46mondego>list.add(someObject);<newline46mondego>list.add(anotherBoject);<newline46mondego>"
"2647splitHere46","3237684splitHere46","toArray()"
"2648splitHere46","3237684splitHere46","Object[] arr = list.toArray(new Object[list.size()]);<newline46mondego>"
"2649splitHere46","3237684splitHere46","List<Ser> objTest2 = new ArrayList<Ser>();<newline46mondego>while (testOS2.available > 0) {<newline46mondego>    Ser toAdd = ((Ser)testOS2.readObject());<newline46mondego>    toAdd.printIt(); <newline46mondego>    objTest2.add(toAdd);<newline46mondego>}<newline46mondego>"
"2650splitHere46","3237684splitHere46","available()"
"2651splitHere46","3237746splitHere46","STRUCT"
"2652splitHere46","3237746splitHere46","java.sql.Struct"
"2653splitHere46","3237746splitHere46","getAttributes()"
"2654splitHere46","3237746splitHere46","m_objArray"
"2655splitHere46","3237746splitHere46","rezultat.setCli(((java.sql.Struct)obj[0]).getAttributes()[0].toString()); <newline46mondego>"
"2656splitHere46","3237767splitHere46","String"
"2657splitHere46","3237767splitHere46","Object"
"2658splitHere46","3237767splitHere46","FileOutputStream"
"2659splitHere46","3237767splitHere46","OutputStream"
"2660splitHere46","3237767splitHere46","Object"
"2661splitHere46","3237798splitHere46","import  sun.audio.*;<newline46mondego>import  java.io.*;<newline46mondego><newline46mondego>public class Sound {<newline46mondego><newline46mondego>    private InputStream input;<newline46mondego>    private AudioStream audio;<newline46mondego><newline46mondego>    public Sound (File fileName)<newline46mondego>    {<newline46mondego>        input = new FileInputStream();<newline46mondego>        audio = new AudioStream(input);<newline46mondego>    }<newline46mondego><newline46mondego>    public void play()<newline46mondego>    {<newline46mondego>        AudioPlayer.player.start(audio);<newline46mondego>    }<newline46mondego><newline46mondego>    public void stop()<newline46mondego>    {<newline46mondego>        AudioPlayer.player.stop(audio);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2662splitHere46","3237798splitHere46","String projectPath = <project directory>; // getting this is another question    <newline46mondego>Sound helloSound = new Sound(new File(projectPath + <doubleQuotes46>/Sounds<doubleQuotes46>));<newline46mondego>"
"2663splitHere46","3237798splitHere46","helloSound.play();"
"2664splitHere46","3237798splitHere46","import java.io.BufferedInputStream;<newline46mondego>import java.io.FileInputStream;<newline46mondego><newline46mondego>import javazoom.jl.player.Player;<newline46mondego><newline46mondego><newline46mondego>public class MP3 {<newline46mondego>    private String filename;<newline46mondego>    private Player player; <newline46mondego><newline46mondego>    // constructor that takes the name of an MP3 file<newline46mondego>    public MP3(String filename) {<newline46mondego>        this.filename = filename;<newline46mondego>    }<newline46mondego><newline46mondego>    public void close() { if (player != null) player.close(); }<newline46mondego><newline46mondego>    // play the MP3 file to the sound card<newline46mondego>    public void play() {<newline46mondego>        try {<newline46mondego>            FileInputStream fis     = new FileInputStream(filename);<newline46mondego>            BufferedInputStream bis = new BufferedInputStream(fis);<newline46mondego>            player = new Player(bis);<newline46mondego>        }<newline46mondego>        catch (Exception e) {<newline46mondego>            System.out.println(<doubleQuotes46>Problem playing file <doubleQuotes46> + filename);<newline46mondego>            System.out.println(e);<newline46mondego>        }<newline46mondego><newline46mondego>        // run in new thread to play in background<newline46mondego>        new Thread() {<newline46mondego>            public void run() {<newline46mondego>                try { player.play(); }<newline46mondego>                catch (Exception e) { System.out.println(e); }<newline46mondego>            }<newline46mondego>        }.start();<newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    // test client<newline46mondego>    public static void main(String[] args) {<newline46mondego>        String filename = args[0];<newline46mondego>        MP3 mp3 = new MP3(filename);<newline46mondego>        mp3.play();<newline46mondego><newline46mondego>        // do whatever computation you like, while music plays<newline46mondego>        int N = 4000;<newline46mondego>        double sum = 0.0;<newline46mondego>        for (int i = 0; i < N; i++) {<newline46mondego>            for (int j = 0; j < N; j++) {<newline46mondego>                sum += Math.sin(i + j);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        System.out.println(sum);<newline46mondego><newline46mondego>        // when the computation is done, stop playing it<newline46mondego>        mp3.close();<newline46mondego><newline46mondego>        // play from the beginning<newline46mondego>        mp3 = new MP3(filename);<newline46mondego>        mp3.play();<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2665splitHere46","3237907splitHere46","mvn archetype:generate<newline46mondego>"
"2666splitHere46","3237907splitHere46","1: internal -> appfuse-basic-jsf (AppFuse archetype for creating a web application with Hibernate, Spring and JSF)<newline46mondego>...<newline46mondego>6: internal -> appfuse-modular-jsf (AppFuse archetype for creating a modular application with Hibernate, Spring and JSF)<newline46mondego>...<newline46mondego>20: internal -> softeu-archetype-seam (JSF+Facelets+Seam Archetype)<newline46mondego>21: internal -> softeu-archetype-seam-simple (JSF+Facelets+Seam (no persistence) Archetype)<newline46mondego>22: internal -> softeu-archetype-jsf (JSF+Facelets Archetype)<newline46mondego>23: internal -> jpa-maven-archetype (JPA application)<newline46mondego>...<newline46mondego>39: internal -> myfaces-archetype-jsfcomponents (A simple archetype for create custom JSF components using MyFaces)<newline46mondego>"
"2667splitHere46","3238193splitHere46","import com.sun.jna.Native;<newline46mondego>import com.sun.jna.Structure;<newline46mondego>import com.sun.jna.win32.StdCallLibrary;<newline46mondego><newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.Collections;<newline46mondego>import java.util.Comparator;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class Main<newline46mondego>{<newline46mondego>public static void main(String[] args) {<newline46mondego>    Main m = new Main();<newline46mondego>    final List<WindowInfo> inflList = new ArrayList<WindowInfo>();<newline46mondego>    final List<Integer> order = new ArrayList<Integer>();<newline46mondego>    int top = User32.instance.GetTopWindow(0);<newline46mondego>    while (top!=0) {<newline46mondego>        order.add(top);<newline46mondego>        top = User32.instance.GetWindow(top, User32.GW_HWNDNEXT);<newline46mondego>    }<newline46mondego>    User32.instance.EnumWindows(new WndEnumProc()<newline46mondego>    {<newline46mondego>        public boolean callback(int hWnd, int lParam)<newline46mondego>        {<newline46mondego>        if (User32.instance.IsWindowVisible(hWnd)) {<newline46mondego>            RECT r = new RECT();<newline46mondego>            User32.instance.GetWindowRect(hWnd, r);<newline46mondego>            if (r.left>-32000) {     // minimized<newline46mondego>                byte[] buffer = new byte[1024];<newline46mondego>                User32.instance.GetWindowTextA(hWnd, buffer, buffer.length);<newline46mondego>                String title = Native.toString(buffer);<newline46mondego>                inflList.add(new WindowInfo(hWnd, r, title));<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return true;<newline46mondego>    }<newline46mondego>    }, 0);<newline46mondego>    Collections.sort(inflList, new Comparator<WindowInfo>()<newline46mondego>    {<newline46mondego>        public int compare(WindowInfo o1, WindowInfo o2) {<newline46mondego>            return order.indexOf(o1.hwnd)-order.indexOf(o2.hwnd);<newline46mondego>        }<newline46mondego>    });<newline46mondego>    for (WindowInfo w : inflList) {<newline46mondego>    System.out.println(w);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>    public static interface WndEnumProc extends StdCallLibrary.StdCallCallback {<newline46mondego>        boolean callback (int hWnd, int lParam);<newline46mondego>    }<newline46mondego><newline46mondego>    public static interface User32 extends StdCallLibrary<newline46mondego>    {<newline46mondego>        final User32 instance = (User32) Native.loadLibrary (<doubleQuotes46>user32<doubleQuotes46>, User32.class);<newline46mondego>        boolean EnumWindows (WndEnumProc wndenumproc, int lParam);<newline46mondego>        boolean IsWindowVisible(int hWnd);<newline46mondego>        int GetWindowRect(int hWnd, RECT r);<newline46mondego>        void GetWindowTextA(int hWnd, byte[] buffer, int buflen);<newline46mondego>        int GetTopWindow(int hWnd);<newline46mondego>        int GetWindow(int hWnd, int flag);<newline46mondego>        final int GW_HWNDNEXT = 2;<newline46mondego>    }<newline46mondego><newline46mondego>    public static class RECT extends Structure {<newline46mondego>        public int left,top,right,bottom;<newline46mondego>    }<newline46mondego>    public static class WindowInfo {<newline46mondego>        int hwnd;<newline46mondego>        RECT rect;<newline46mondego>        String title;<newline46mondego>        public WindowInfo(int hwnd, RECT rect, String title)<newline46mondego>        { this.hwnd = hwnd; this.rect = rect; this.title = title; }<newline46mondego><newline46mondego>        public String toString() {<newline46mondego>            return String.format(<doubleQuotes46>(%d,%d)-(%d,%d) : \<doubleQuotes46>%s\<doubleQuotes46><doubleQuotes46>,<newline46mondego>                rect.left,rect.top,rect.right,rect.bottom,title);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2668splitHere46","3238249splitHere46","Executor executor = Executors.newSingleThreadExecutor();<newline46mondego>"
"2669splitHere46","3238249splitHere46","Executors#newSingleThreadExecutor()"
"2670splitHere46","3238284splitHere46","InputStream"
"2671splitHere46","3238284splitHere46","Inputstream"
"2672splitHere46","3238284splitHere46","getResourceAsStream"
"2673splitHere46","3238284splitHere46","ClassLoader"
"2674splitHere46","3238284splitHere46","Properties"
"2675splitHere46","3238284splitHere46","store"
"2676splitHere46","3238287splitHere46","ProfileDto"
"2677splitHere46","3238287splitHere46","SearchResultDto"
"2678splitHere46","3238287splitHere46","@XmlSeeAlso(ProfileDto.class)"
"2679splitHere46","3238287splitHere46","SearchResultDto"
"2680splitHere46","3238384splitHere46","StatelessSession"
"2681splitHere46","3238576splitHere46","InputStream in = remoteURI.toURL().openStream();<newline46mondego>"
"2682splitHere46","3238576splitHere46","File"
"2683splitHere46","3238576splitHere46","InputStream"
"2684splitHere46","3238694splitHere46","getCellRect( getRowCount() - 1, 0, true ).y"
"2685splitHere46","3238694splitHere46","paintComponent( Graphics g )"
"2686splitHere46","3238694splitHere46","import java.awt.Color;<newline46mondego>import java.awt.Component;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Rectangle;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JScrollPane;<newline46mondego>import javax.swing.JTable;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.table.TableCellRenderer;<newline46mondego>import javax.swing.table.TableColumn;<newline46mondego><newline46mondego>public class StripedEvenInWhitePartsTable extends JTable<newline46mondego>{<newline46mondego><newline46mondego>  public StripedEvenInWhitePartsTable( String[][] data, String[] fields )<newline46mondego>  {<newline46mondego>    super( data, fields );<newline46mondego>    setFillsViewportHeight( true ); //to show the empty space of the table <newline46mondego>  }<newline46mondego><newline46mondego><newline46mondego>  @Override<newline46mondego>  public void paintComponent( Graphics g )<newline46mondego>  {<newline46mondego>    super.paintComponent( g );<newline46mondego><newline46mondego>    paintEmptyRows( g );<newline46mondego>  }<newline46mondego><newline46mondego><newline46mondego>  public void paintEmptyRows( Graphics g )<newline46mondego>  {<newline46mondego>    Graphics newGraphics = g.create();<newline46mondego>    newGraphics.setColor( UIManager.getColor( <doubleQuotes46>Table.gridColor<doubleQuotes46> ) );<newline46mondego><newline46mondego>    Rectangle rectOfLastRow = getCellRect( getRowCount() - 1, 0, true );<newline46mondego>    int firstNonExistentRowY = rectOfLastRow.y; //the top Y-coordinate of the first empty tablerow<newline46mondego><newline46mondego>    if ( getVisibleRect().height > firstNonExistentRowY ) //only paint the grid if empty space is visible<newline46mondego>    {<newline46mondego>      //fill the rows alternating and paint the row-lines:<newline46mondego>      int rowYToDraw = (firstNonExistentRowY - 1) + getRowHeight(); //minus 1 otherwise the first empty row is one pixel to high<newline46mondego>      int actualRow = getRowCount() - 1; //to continue the stripes from the area with table-data<newline46mondego><newline46mondego>      while ( rowYToDraw < getHeight() )<newline46mondego>      {<newline46mondego>        if ( actualRow % 2 == 0 )<newline46mondego>        {<newline46mondego>          newGraphics.setColor( Color.ORANGE ); //change this to another color (Color.YELLOW, anyone?) to show that only the free space is painted<newline46mondego>          newGraphics.fillRect( 0, rowYToDraw, getWidth(), getRowHeight() );<newline46mondego>          newGraphics.setColor( UIManager.getColor( <doubleQuotes46>Table.gridColor<doubleQuotes46> ) );<newline46mondego>        }<newline46mondego><newline46mondego>        newGraphics.drawLine( 0, rowYToDraw, getWidth(), rowYToDraw );<newline46mondego><newline46mondego>        rowYToDraw += getRowHeight();<newline46mondego>        actualRow++;<newline46mondego>      }<newline46mondego><newline46mondego><newline46mondego>      //paint the column-lines:<newline46mondego>      int x = 0;<newline46mondego>      for ( int i = 0; i < getColumnCount(); i++ )<newline46mondego>      {<newline46mondego>        TableColumn column = getColumnModel().getColumn( i );<newline46mondego>        x += column.getWidth(); //add the column width to the x-coordinate<newline46mondego><newline46mondego>        newGraphics.drawLine( x - 1, firstNonExistentRowY, x - 1, getHeight() );<newline46mondego>      }<newline46mondego><newline46mondego>      newGraphics.dispose();<newline46mondego><newline46mondego>    } //if empty space is visible<newline46mondego><newline46mondego>  } //paintEmptyRows<newline46mondego><newline46mondego><newline46mondego><newline46mondego>  public Component prepareRenderer( TableCellRenderer renderer, int row, int column )<newline46mondego>  {<newline46mondego>    Component c = super.prepareRenderer( renderer, row, column );<newline46mondego><newline46mondego>    if ( !isRowSelected( row ) )<newline46mondego>    {<newline46mondego>      c.setBackground( row % 2 == 0 ? getBackground() : Color.ORANGE );<newline46mondego>    }<newline46mondego><newline46mondego>    return c;<newline46mondego>  }<newline46mondego><newline46mondego><newline46mondego>  public static void main( String[] argv )<newline46mondego>  {<newline46mondego>    String data[][] = { { <doubleQuotes46>A0<doubleQuotes46>, <doubleQuotes46>B0<doubleQuotes46>, <doubleQuotes46>C0<doubleQuotes46> }, { <doubleQuotes46>A1<doubleQuotes46>, <doubleQuotes46>B1<doubleQuotes46>, <doubleQuotes46>C1<doubleQuotes46> }, { <doubleQuotes46>A2<doubleQuotes46>, <doubleQuotes46>B2<doubleQuotes46>, <doubleQuotes46>C2<doubleQuotes46> }, { <doubleQuotes46>A3<doubleQuotes46>, <doubleQuotes46>B3<doubleQuotes46>, <doubleQuotes46>C3<doubleQuotes46> }, { <doubleQuotes46>A4<doubleQuotes46>, <doubleQuotes46>B4<doubleQuotes46>, <doubleQuotes46>C4<doubleQuotes46> } };<newline46mondego>    String fields[] = { <doubleQuotes46>A<doubleQuotes46>, <doubleQuotes46>B<doubleQuotes46>, <doubleQuotes46>C<doubleQuotes46> };<newline46mondego><newline46mondego>    JFrame frame = new JFrame( <doubleQuotes46>a JTable with striped empty space<doubleQuotes46> );<newline46mondego>    StripedEvenInWhitePartsTable table = new StripedEvenInWhitePartsTable( data, fields );<newline46mondego>    JScrollPane pane = new JScrollPane( table );<newline46mondego><newline46mondego>    frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );<newline46mondego>    frame.add( pane );<newline46mondego>    frame.setSize( 400, 300 );<newline46mondego>    frame.setLocationRelativeTo( null );<newline46mondego>    frame.setVisible( true );<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"2687splitHere46","3238732splitHere46","Global.cam[i] = highx;<newline46mondego>DebugPrint(<doubleQuotes46>cube i = <doubleQuotes46> + cam[i]);<newline46mondego>i++;<newline46mondego>"
"2688splitHere46","3238739splitHere46","[B@somewhere"
"2689splitHere46","3238757splitHere46","ClassLoader"
"2690splitHere46","3238757splitHere46","InputStream stream= getClass().getClassLoader().getResourceAsStream(<doubleQuotes46>/com/thinkplexx/lang/de/general.xml<doubleQuotes46>);<newline46mondego>"
"2691splitHere46","3238757splitHere46","InputStream stream= getClass().getResourceAsStream(<doubleQuotes46>/com/thinkplexx/lang/de/general.xml<doubleQuotes46>);<newline46mondego>"
"2692splitHere46","3238757splitHere46","Class.getResourceAsStream"
"2693splitHere46","3238757splitHere46","this"
"2694splitHere46","3238757splitHere46","com.example.SomeThing"
"2695splitHere46","3238757splitHere46","getClass().getResourceAsStream(<doubleQuotes46>/a/b/c.xml<doubleQuotes46>)  ==> a/b/c.xml<newline46mondego>getClass().getResourceAsStream(<doubleQuotes46>a/b/c.xml<doubleQuotes46>)  ==> com/example/a/b/c.xml<newline46mondego>getClass().getClassLoader().getResourceAsStream(<doubleQuotes46>a/b/c.xml<doubleQuotes46>)  ==> a/b/c.xml<newline46mondego>getClass().getClassLoader().getResourceAsStream(<doubleQuotes46>/a/b/c.xml<doubleQuotes46>)  ==> Incorrect<newline46mondego>"
"2696splitHere46","3239068splitHere46","null"
"2697splitHere46","3239068splitHere46","void setFooForTesting(Bar newValue)<newline46mondego>{<newline46mondego>    foo = newValue;<newline46mondego>}<newline46mondego>"
"2698splitHere46","3239068splitHere46","import java.lang.reflect.*;<newline46mondego><newline46mondego>class FieldContainer<newline46mondego>{<newline46mondego>    private static String woot;<newline46mondego><newline46mondego>    public static void showWoot()<newline46mondego>    {<newline46mondego>        System.out.println(woot);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Test<newline46mondego>{<newline46mondego>    // Declared to throw Exception just for the sake of brevity here<newline46mondego>    public static void main(String[] args) throws Exception<newline46mondego>    {<newline46mondego>        Field field = FieldContainer.class.getDeclaredField(<doubleQuotes46>woot<doubleQuotes46>);<newline46mondego>        field.setAccessible(true);<newline46mondego>        field.set(null, <doubleQuotes46>New value<doubleQuotes46>);<newline46mondego>        FieldContainer.showWoot();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2699splitHere46","3239115splitHere46","ALTER TABLE"
"2700splitHere46","3239176splitHere46","import java.util.Set;<newline46mondego>import java.util.TreeSet;<newline46mondego><newline46mondego>public class MyMates {<newline46mondego><newline46mondego>private static String[] name1 = null;<newline46mondego>private static String[] name2 = null;<newline46mondego>private static String[] name3 = null;<newline46mondego>private static Set<String> names;<newline46mondego><newline46mondego>public MyMates() {<newline46mondego>    methodASet();<newline46mondego>    names = new TreeSet<String>();<newline46mondego>}<newline46mondego><newline46mondego>public static void methodASet() {<newline46mondego><newline46mondego>    name1 = new String[]{<doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>Jose<doubleQuotes46>, <doubleQuotes46>Jeremy<doubleQuotes46>, <doubleQuotes46>Alice<doubleQuotes46>, <doubleQuotes46>Patrick<doubleQuotes46>};<newline46mondego>    name2 = new String[]{<doubleQuotes46>Alan<doubleQuotes46>, <doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>Jeremy<doubleQuotes46>, <doubleQuotes46>Helen<doubleQuotes46>, <doubleQuotes46>Alexi<doubleQuotes46>};<newline46mondego>    name3 = new String[]{<doubleQuotes46>Adel<doubleQuotes46>, <doubleQuotes46>Aaron<doubleQuotes46>, <doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>James<doubleQuotes46>, <doubleQuotes46>Alice<doubleQuotes46>};<newline46mondego>}<newline46mondego><newline46mondego>public static void methodB() {<newline46mondego><newline46mondego>    for (int i = 0; i < name1.length; i++) {<newline46mondego>        names.add(name1[i]);<newline46mondego>    }<newline46mondego>    System.out.println(names);<newline46mondego><newline46mondego>    for (int i = 0; i < name2.length; i++) {<newline46mondego>        names.add(name2[i]);<newline46mondego>    }<newline46mondego>    System.out.println(names);<newline46mondego><newline46mondego>    for (int i = 0; i < name3.length; i++) {<newline46mondego>        names.add(name3[i]);<newline46mondego>    }<newline46mondego>    System.out.println(names);<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    MyMates polop = new MyMates();<newline46mondego>    MyMates.methodB();<newline46mondego>}<newline46mondego>}<newline46mondego>"
"2701splitHere46","3239422splitHere46","<plugin><newline46mondego>    <groupId>org.codehaus.cargo</groupId><newline46mondego>    <artifactId>cargo-maven2-plugin</artifactId><newline46mondego>    <version>1.0.2</version><newline46mondego>    <configuration><newline46mondego>      <container><newline46mondego>        <containerId>jboss51x</containerId><newline46mondego>        <append>false</append><newline46mondego>        <log>${project.build.directory}/logs/jboss51x.log</log><newline46mondego>        <output>${project.build.directory}/logs/jboss51x.out</output><newline46mondego>        <timeout>300000</timeout><!-- 5 minutes --><newline46mondego>      </container><newline46mondego>      <configuration><newline46mondego>        <type>existing</type><newline46mondego>        <home>/path/to/jboss-5.1.0.GA</home><newline46mondego>        <properties><newline46mondego>          <cargo.servlet.port>8080</cargo.servlet.port><newline46mondego>          <cargo.jboss.configuration>default</cargo.jboss.configuration><newline46mondego>          <cargo.rmi.port>1099</cargo.rmi.port><newline46mondego>          <cargo.logging>high</cargo.logging><newline46mondego>        </properties><newline46mondego>        <deployables><newline46mondego>          <!-- application to deploy --><newline46mondego>          <deployable><newline46mondego>            <groupId>${project.groupId}</groupId><newline46mondego>            <artifactId>myapp</artifactId><newline46mondego>            <type>war</type><newline46mondego>            <!-- <newline46mondego>            <properties><newline46mondego>              <context>acontext</context><newline46mondego>            </properties><newline46mondego>            --><newline46mondego>          </deployable><newline46mondego>        </deployables><newline46mondego>      </configuration><newline46mondego>    </configuration><newline46mondego>  </plugin><newline46mondego>"
"2702splitHere46","3239442splitHere46","*.mht"
"2703splitHere46","3239442splitHere46","html"
"2704splitHere46","3239442splitHere46","character set"
"2705splitHere46","3239442splitHere46","encoding"
"2706splitHere46","3239442splitHere46","*.mht/MHTML"
"2707splitHere46","3239442splitHere46","From: <doubleQuotes46>Saved by Windows Internet Explorer 7<doubleQuotes46><newline46mondego>"
"2708splitHere46","3239442splitHere46","Subject: Google<newline46mondego>Date: Tue, 13 Jul 2010 21:23:03 +0530<newline46mondego>MIME-Version: 1.0<newline46mondego>"
"2709splitHere46","3239442splitHere46","Content-Type: multipart/related;<newline46mondego>type=<doubleQuotes46>text/html<doubleQuotes46>;<newline46mondego>"
"2710splitHere46","3239442splitHere46","multipart"
"2711splitHere46","3239442splitHere46","multipart"
"2712splitHere46","3239442splitHere46","<doubleQuotes46>text/html<doubleQuotes46>"
"2713splitHere46","3239442splitHere46","boundary=<doubleQuotes46>----=_NextPart_000_0007_01CB22D1.93BBD1A0<doubleQuotes46><newline46mondego>"
"2714splitHere46","3239442splitHere46","Content-Transfer-Encoding"
"2715splitHere46","3239442splitHere46","------=_NextPart_000_0007_01CB22D1.93BBD1A0<newline46mondego> Content-Type: text/html;<newline46mondego> charset=<doubleQuotes46>utf-8<doubleQuotes46><newline46mondego> Content-Transfer-Encoding: quoted-printable<newline46mondego> Content-Location: http://www.google.com/webhp?sourceid=navclient&ie=UTF-8<newline46mondego><newline46mondego> <!DOCTYPE HTML PUBLIC <doubleQuotes46>-//W3C//DTD HTML 4.01 Transitional//EN<doubleQuotes46> =<newline46mondego>.<newline46mondego>.<newline46mondego>.<newline46mondego>"
"2716splitHere46","3239442splitHere46","public interface IConstants <newline46mondego>{<newline46mondego>    public String BOUNDARY = <doubleQuotes46>boundary<doubleQuotes46>;<newline46mondego>    public String CHAR_SET = <doubleQuotes46>charset<doubleQuotes46>;<newline46mondego>    public String CONTENT_TYPE = <doubleQuotes46>Content-Type<doubleQuotes46>;<newline46mondego>    public String CONTENT_TRANSFER_ENCODING = <doubleQuotes46>Content-Transfer-Encoding<doubleQuotes46>;<newline46mondego>    public String CONTENT_LOCATION = <doubleQuotes46>Content-Location<doubleQuotes46>;<newline46mondego><newline46mondego>    public String UTF8_BOM = <doubleQuotes46>=EF=BB=BF<doubleQuotes46>;<newline46mondego><newline46mondego>    public String UTF16_BOM1 = <doubleQuotes46>=FF=FE<doubleQuotes46>;<newline46mondego>    public String UTF16_BOM2 = <doubleQuotes46>=FE=FF<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"2717splitHere46","3239442splitHere46","/**<newline46mondego> * This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0<newline46mondego> * which accompanies this distribution, and is available at<newline46mondego> * http://www.eclipse.org/legal/epl-v10.html<newline46mondego> */<newline46mondego>package com.test.mht.core;<newline46mondego><newline46mondego>import java.io.BufferedOutputStream;<newline46mondego>import java.io.BufferedReader;<newline46mondego>import java.io.BufferedWriter;<newline46mondego>import java.io.File;<newline46mondego>import java.io.FileOutputStream;<newline46mondego>import java.io.FileReader;<newline46mondego>import java.io.OutputStreamWriter;<newline46mondego>import java.util.regex.Matcher;<newline46mondego>import java.util.regex.Pattern;<newline46mondego><newline46mondego>import sun.misc.BASE64Decoder;<newline46mondego><newline46mondego>/**<newline46mondego> * File to parse and decompose *.mts file in its constituting parts.<newline46mondego> * @author Manish Shukla <newline46mondego> */<newline46mondego><newline46mondego>public class MHTParser implements IConstants<newline46mondego>{<newline46mondego>    private File mhtFile;<newline46mondego>    private File outputFolder;<newline46mondego><newline46mondego>    public MHTParser(File mhtFile, File outputFolder) {<newline46mondego>        this.mhtFile = mhtFile;<newline46mondego>        this.outputFolder = outputFolder;<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * @throws Exception<newline46mondego>     */<newline46mondego>    public void decompress() throws Exception<newline46mondego>    {<newline46mondego>        BufferedReader reader = null;<newline46mondego><newline46mondego>        String type = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        String encoding = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        String location = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        String filename = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        String charset = <doubleQuotes46>utf-8<doubleQuotes46>;<newline46mondego>        StringBuilder buffer = null;<newline46mondego><newline46mondego>        try<newline46mondego>        {<newline46mondego>            reader = new BufferedReader(new FileReader(mhtFile));<newline46mondego><newline46mondego>            final String boundary = getBoundary(reader);<newline46mondego>            if(boundary == null)<newline46mondego>                throw new Exception(<doubleQuotes46>Failed to find document 'boundary'... Aborting<doubleQuotes46>);<newline46mondego><newline46mondego>            String line = null;<newline46mondego>            int i = 1;<newline46mondego>            while((line = reader.readLine()) != null)<newline46mondego>            {<newline46mondego>                String temp = line.trim();<newline46mondego>                if(temp.contains(boundary)) <newline46mondego>                {<newline46mondego>                    if(buffer != null) {<newline46mondego>                        writeBufferContentToFile(buffer,encoding,filename,charset);<newline46mondego>                        buffer = null;<newline46mondego>                    }<newline46mondego><newline46mondego>                    buffer = new StringBuilder();<newline46mondego>                }else if(temp.startsWith(CONTENT_TYPE)) {<newline46mondego>                    type = getType(temp);<newline46mondego>                }else if(temp.startsWith(CHAR_SET)) {<newline46mondego>                    charset = getCharSet(temp);<newline46mondego>                }else if(temp.startsWith(CONTENT_TRANSFER_ENCODING)) {<newline46mondego>                    encoding = getEncoding(temp);<newline46mondego>                }else if(temp.startsWith(CONTENT_LOCATION)) {<newline46mondego>                    location = temp.substring(temp.indexOf(<doubleQuotes46>:<doubleQuotes46>)+1).trim();<newline46mondego>                    i++;<newline46mondego>                    filename = getFileName(location,type);<newline46mondego>                }else {<newline46mondego>                    if(buffer != null) {<newline46mondego>                        buffer.append(line + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego><newline46mondego>        }finally <newline46mondego>        {<newline46mondego>            if(null != reader)<newline46mondego>                reader.close();<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    private String getCharSet(String temp) <newline46mondego>    {<newline46mondego>        String t = temp.split(<doubleQuotes46>=<doubleQuotes46>)[1].trim();<newline46mondego>        return t.substring(1, t.length()-1);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Save the file as per character set and encoding <newline46mondego>     */<newline46mondego>    private void writeBufferContentToFile(StringBuilder buffer,String encoding, String filename, String charset) <newline46mondego>    throws Exception<newline46mondego>    {<newline46mondego><newline46mondego>        if(!outputFolder.exists())<newline46mondego>            outputFolder.mkdirs();<newline46mondego><newline46mondego>        byte[] content = null; <newline46mondego><newline46mondego>        boolean text = true;<newline46mondego><newline46mondego>        if(encoding.equalsIgnoreCase(<doubleQuotes46>base64<doubleQuotes46>)){<newline46mondego>            content = getBase64EncodedString(buffer);<newline46mondego>            text = false;<newline46mondego>        }else if(encoding.equalsIgnoreCase(<doubleQuotes46>quoted-printable<doubleQuotes46>)) {<newline46mondego>            content = getQuotedPrintableString(buffer);         <newline46mondego>        }<newline46mondego>        else<newline46mondego>            content = buffer.toString().getBytes();<newline46mondego><newline46mondego>        if(!text)<newline46mondego>        {<newline46mondego>            BufferedOutputStream bos = null;<newline46mondego>            try<newline46mondego>            {<newline46mondego>                bos = new BufferedOutputStream(new FileOutputStream(filename));<newline46mondego>                bos.write(content);<newline46mondego>                bos.flush();<newline46mondego>            }finally {<newline46mondego>                bos.close();<newline46mondego>            }<newline46mondego>        }else <newline46mondego>        {<newline46mondego>            BufferedWriter bw = null;<newline46mondego>            try<newline46mondego>            {<newline46mondego>                bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename), charset));<newline46mondego>                bw.write(new String(content));<newline46mondego>                bw.flush();<newline46mondego>            }finally {<newline46mondego>                bw.close();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * When the save the *.mts file with 'utf-8' encoding then it appends '=EF=BB=BF'</br><newline46mondego>     * @see http://en.wikipedia.org/wiki/Byte_order_mark<newline46mondego>     */<newline46mondego>    private byte[] getQuotedPrintableString(StringBuilder buffer) <newline46mondego>    {<newline46mondego>        //Set<String> uniqueHex = new HashSet<String>();<newline46mondego>        //final Pattern p = Pattern.compile(<doubleQuotes46>(=\\p{XDigit}{2})*<doubleQuotes46>);<newline46mondego><newline46mondego>        String temp = buffer.toString().replaceAll(UTF8_BOM, <doubleQuotes46><doubleQuotes46>).replaceAll(<doubleQuotes46>=\n<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego><newline46mondego>        //Matcher m = p.matcher(temp);<newline46mondego>        //while(m.find()) {<newline46mondego>        //  uniqueHex.add(m.group());<newline46mondego>        //}<newline46mondego><newline46mondego>        //System.out.println(uniqueHex);<newline46mondego><newline46mondego>        //for (String hex : uniqueHex) {<newline46mondego>            //temp = temp.replaceAll(hex, getASCIIValue(hex.substring(1)));<newline46mondego>        //}     <newline46mondego><newline46mondego>        return temp.getBytes();<newline46mondego>    }<newline46mondego><newline46mondego>    /*private String getASCIIValue(String hex) {<newline46mondego>        return <doubleQuotes46><doubleQuotes46>+(char)Integer.parseInt(hex, 16);<newline46mondego>    }*/<newline46mondego>    /**<newline46mondego>     * Although system dependent..it works well<newline46mondego>     */<newline46mondego>    private byte[] getBase64EncodedString(StringBuilder buffer) throws Exception {<newline46mondego>        return new BASE64Decoder().decodeBuffer(buffer.toString());<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Tries to get a qualified file name. If the name is not apparent it tries to guess it from the URL.<newline46mondego>     * Otherwise it returns 'unknown.<type>'<newline46mondego>     */<newline46mondego>    private String getFileName(String location, String type) <newline46mondego>    {<newline46mondego>        final Pattern p = Pattern.compile(<doubleQuotes46>(\\w|_|-)+\\.\\w+<doubleQuotes46>);<newline46mondego>        String ext = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        String name = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        if(type.toLowerCase().endsWith(<doubleQuotes46>jpeg<doubleQuotes46>))<newline46mondego>            ext = <doubleQuotes46>jpg<doubleQuotes46>;<newline46mondego>        else<newline46mondego>            ext = type.split(<doubleQuotes46>/<doubleQuotes46>)[1];<newline46mondego><newline46mondego>        if(location.endsWith(<doubleQuotes46>/<doubleQuotes46>)) {<newline46mondego>            name = <doubleQuotes46>main<doubleQuotes46>;<newline46mondego>        }else<newline46mondego>        {<newline46mondego>            name = location.substring(location.lastIndexOf(<doubleQuotes46>/<doubleQuotes46>) + 1);<newline46mondego><newline46mondego>            Matcher m = p.matcher(name);<newline46mondego>            String fname = <doubleQuotes46><doubleQuotes46>;<newline46mondego>            while(m.find()) {<newline46mondego>                fname = m.group();<newline46mondego>            }<newline46mondego><newline46mondego>            if(fname.trim().length() == 0)<newline46mondego>                name = <doubleQuotes46>unknown<doubleQuotes46>;<newline46mondego>            else<newline46mondego>                return getUniqueName(fname.substring(0,fname.indexOf(<doubleQuotes46>.<doubleQuotes46>)), fname.substring(fname.indexOf(<doubleQuotes46>.<doubleQuotes46>) + 1, fname.length()));<newline46mondego>        }<newline46mondego>        return getUniqueName(name,ext);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Returns a qualified unique output file path for the parsed path.</br><newline46mondego>     * In case the file already exist it appends a numarical value a continues<newline46mondego>     */<newline46mondego>    private String getUniqueName(String name,String ext)<newline46mondego>    {<newline46mondego>        int i = 1;<newline46mondego>        File file = new File(outputFolder,name + <doubleQuotes46>.<doubleQuotes46> + ext);<newline46mondego>        if(file.exists())<newline46mondego>        {<newline46mondego>            while(true)<newline46mondego>            {<newline46mondego>                file = new File(outputFolder, name + i + <doubleQuotes46>.<doubleQuotes46> + ext);<newline46mondego>                if(!file.exists())<newline46mondego>                    return file.getAbsolutePath();<newline46mondego>                i++;<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        return file.getAbsolutePath();<newline46mondego>    }<newline46mondego><newline46mondego>    private String getType(String line) {<newline46mondego>        return splitUsingColonSpace(line);<newline46mondego>    }<newline46mondego><newline46mondego>    private String getEncoding(String line){<newline46mondego>        return splitUsingColonSpace(line);<newline46mondego>    }<newline46mondego><newline46mondego>    private String splitUsingColonSpace(String line) {<newline46mondego>        return line.split(<doubleQuotes46>:\\s*<doubleQuotes46>)[1].replaceAll(<doubleQuotes46>;<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Gives you the boundary string<newline46mondego>     */<newline46mondego>    private String getBoundary(BufferedReader reader) throws Exception <newline46mondego>    {<newline46mondego>        String line = null;<newline46mondego><newline46mondego>        while((line = reader.readLine()) != null)<newline46mondego>        {<newline46mondego>            line = line.trim();<newline46mondego>            if(line.startsWith(BOUNDARY)) {<newline46mondego>                return line.substring(line.indexOf(<doubleQuotes46>\<doubleQuotes46><doubleQuotes46>) + 1, line.lastIndexOf(<doubleQuotes46>\<doubleQuotes46><doubleQuotes46>));<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        return null;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2718splitHere46","3239455splitHere46","apt"
"2719splitHere46","3239489splitHere46","Dohicky"
"2720splitHere46","3239489splitHere46","Thingamabob"
"2721splitHere46","3239489splitHere46","hasDohicky"
"2722splitHere46","3239511splitHere46","Global"
"2723splitHere46","3239655splitHere46","List"
"2724splitHere46","3239655splitHere46","SortedSet"
"2725splitHere46","3239655splitHere46","NavigableSet"
"2726splitHere46","3239655splitHere46","NavigableSet<Integer> nums = new TreeSet<Integer>(<newline46mondego>        Arrays.asList(9,1,5,7,3)<newline46mondego>    );<newline46mondego><newline46mondego>    System.out.println(nums); // <doubleQuotes46>[1, 3, 5, 7, 9]<doubleQuotes46><newline46mondego><newline46mondego>    System.out.println(nums.first()); // <doubleQuotes46>1<doubleQuotes46><newline46mondego>    System.out.println(nums.last());  // <doubleQuotes46>9<doubleQuotes46><newline46mondego><newline46mondego>    System.out.println(nums.higher(3)); // <doubleQuotes46>5<doubleQuotes46><newline46mondego>    System.out.println(nums.lower(8));  // <doubleQuotes46>7<doubleQuotes46><newline46mondego><newline46mondego>    System.out.println(nums.subSet(2,8)); // <doubleQuotes46>[3, 5, 7]<doubleQuotes46><newline46mondego>    System.out.println(nums.subSet(1, true, 5, true));  // <doubleQuotes46>[1, 3, 5]<doubleQuotes46><newline46mondego>"
"2727splitHere46","3239655splitHere46","NavigableMap"
"2728splitHere46","3239678splitHere46","com.sun.security.auth.module.Krb5LoginModule required debug=true  useTicketCache=true doNotPrompt=true;<newline46mondego>"
"2729splitHere46","3239678splitHere46","HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters<newline46mondego>"
"2730splitHere46","3239678splitHere46","allowtgtsessionkey"
"2731splitHere46","3239678splitHere46","REG_DWORD"
"2732splitHere46","3239678splitHere46","0x01"
"2733splitHere46","3239678splitHere46","HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Kerberos\<newline46mondego>"
"2734splitHere46","3239678splitHere46","allowtgtsessionkey"
"2735splitHere46","3239678splitHere46","REG_DWORD"
"2736splitHere46","3239678splitHere46","0x01"
"2737splitHere46","3239690splitHere46","<form:errors>"
"2738splitHere46","3239690splitHere46","<form:form>"
"2739splitHere46","3239690splitHere46","<form:form commandName = <doubleQuotes46>renderJob<doubleQuotes46>><newline46mondego>    <form:errors path = <doubleQuotes46>*<doubleQuotes46> /><newline46mondego></form:form><newline46mondego>"
"2740splitHere46","3239690splitHere46","<form:errors path = <doubleQuotes46>renderJob.*<doubleQuotes46> /><newline46mondego>"
"2741splitHere46","3239848splitHere46",">"
"2742splitHere46","3239848splitHere46",">"
"2743splitHere46","3239848splitHere46",">"
"2744splitHere46","3239848splitHere46","InputStream"
"2745splitHere46","3239848splitHere46","Thread"
"2746splitHere46","3239866splitHere46","mvn compile"
"2747splitHere46","3239866splitHere46","mvn install"
"2748splitHere46","3239866splitHere46","Project"
"2749splitHere46","3239866splitHere46","Clean"
"2750splitHere46","3240031splitHere46","class LowPriorityThreadFactory implements ThreadFactory<newline46mondego>{<newline46mondego>   public Thread newThread(Runnable r) {<newline46mondego>     Tread t = new Thread(r);<newline46mondego>     t.setPriority(MIN_PRIORITY);<newline46mondego>     return t;<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"2751splitHere46","3240031splitHere46","class HandlePriorityInversionTask extends FutureTask<ResultType><newline46mondego>{<newline46mondego>   Integer priority;  // non null if set<newline46mondego>   Integer originalPriority;<newline46mondego>   Thread thread;<newline46mondego>   public ResultType get() {<newline46mondego>      if (!isDone()) <newline46mondego>         setPriority(Thread.currentThread().getPriority());<newline46mondego>      return super.get();<newline46mondego>   }<newline46mondego>   public void run() {<newline46mondego>      synchronized (this) {<newline46mondego>         thread = Thread.currentThread();<newline46mondego>         originalPriority = thread.getPriority();<newline46mondego>         if (priority!=null) setPriority(priority);<newline46mondego>      } <newline46mondego>      super.run();<newline46mondego>   }<newline46mondego>   protected synchronized void done() {<newline46mondego>         if (originalPriority!=null) setPriority(originalPriority);<newline46mondego>         thread = null;<newline46mondego>   }<newline46mondego><newline46mondego>   void synchronized setPriority(int priority) {<newline46mondego>       this.priority = Integer.valueOf(priority);<newline46mondego>       if (thread!=null)<newline46mondego>          thread.setPriority(priority);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"2752splitHere46","3240031splitHere46","get()"
"2753splitHere46","3240031splitHere46","Runtime.availableProcessors()"
"2754splitHere46","3240161splitHere46","//#ifdef CUSTOMER1<newline46mondego>private String abc = <doubleQuotes46>abc<doubleQuotes46>;<newline46mondego>//#else<newline46mondego>private String abc = <doubleQuotes46>cba<doubleQuotes46>;<newline46mondego>//#endif  <newline46mondego>"
"2755splitHere46","3240163splitHere46","import java.util.Scanner"
"2756splitHere46","3240163splitHere46","package sand1;<newline46mondego><newline46mondego>import java.util.Scanner;<newline46mondego><newline46mondego>public class Input {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        double total = 0;<newline46mondego>        Scanner in = new Scanner(System.in);<newline46mondego>        System.out.println(<doubleQuotes46>As you enter numbers, they will be added.<doubleQuotes46>);<newline46mondego>        System.out.println(<doubleQuotes46>Entering a non-number will stop the program.<doubleQuotes46>);<newline46mondego><newline46mondego>        while (in.hasNextDouble()) {<newline46mondego>            double n = in.nextDouble();<newline46mondego>            total = total + n;<newline46mondego>            System.out.println(<doubleQuotes46>The total is <doubleQuotes46> + total);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2757splitHere46","3240163splitHere46","run:<newline46mondego>As you enter numbers, they will be added.<newline46mondego>Entering a non-number will stop the program.<newline46mondego>12.2<newline46mondego>The total is 12.2<newline46mondego>43<newline46mondego>The total is 55.2<newline46mondego><newline46mondego>a<newline46mondego>BUILD SUCCESSFUL (total time: 11 seconds)<newline46mondego>"
"2758splitHere46","3240188splitHere46","for (int j = 1; j <= mult; j++) {<newline46mondego>    int operacion = i * j;<newline46mondego>    int suma = 0;<newline46mondego>    suma = operacion + suma;<newline46mondego>"
"2759splitHere46","3240188splitHere46","suma"
"2760splitHere46","3240188splitHere46","operacion"
"2761splitHere46","3240188splitHere46","operacion"
"2762splitHere46","3240188splitHere46","int suma = 0;<newline46mondego>for (int j = 1; j <= mult; j++) {<newline46mondego>    int operacion = i * j;<newline46mondego>    suma += operacion;<newline46mondego>"
"2763splitHere46","3240212splitHere46","sernet.gs.ui.rcp.main.product"
"2764splitHere46","3240212splitHere46","sernet.gs.ui.rcp.main.product"
"2765splitHere46","3240334splitHere46","*2"
"2766splitHere46","3240334splitHere46","<<1"
"2767splitHere46","3240407splitHere46","Reader"
"2768splitHere46","3240407splitHere46","Reader"
"2769splitHere46","3240407splitHere46","read()"
"2770splitHere46","3240407splitHere46","InputStream"
"2771splitHere46","3240407splitHere46","InputStream"
"2772splitHere46","3240407splitHere46","read()"
"2773splitHere46","3240407splitHere46","BufferedInputStream"
"2774splitHere46","3240439splitHere46","<input type=<doubleQuotes46>submit<doubleQuotes46> onclick=<doubleQuotes46>this.disabled=true<doubleQuotes46> /><newline46mondego>"
"2775splitHere46","3240461splitHere46","public void add(Note note) {<newline46mondego>    PersistenceManager pm = getPersistenceManagerFactory()<newline46mondego>            .getPersistenceManager();<newline46mondego>    try {<newline46mondego>        pm.makePersistent(note);<newline46mondego>    } finally {<newline46mondego>        pm.close();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2776splitHere46","3240651splitHere46","\uXXXX"
"2777splitHere46","3240684splitHere46","getCalendarLinks"
"2778splitHere46","3240684splitHere46","List<Object> getCalendarLinks( )"
"2779splitHere46","3240684splitHere46","public void method1(StringBuilder sb, BasePersonEntry<?> entry)<newline46mondego>"
"2780splitHere46","3240684splitHere46","<?>"
"2781splitHere46","3240684splitHere46","public abstract class BasePersonEntry<E extends BasePersonEntry<E> ><newline46mondego>"
"2782splitHere46","3240684splitHere46","<E>"
"2783splitHere46","3240684splitHere46","unchecked"
"2784splitHere46","3240779splitHere46","foo"
"2785splitHere46","3240863splitHere46","mysql"
"2786splitHere46","3240870splitHere46","Preferences > Java > Editor > Save Actions"
"2787splitHere46","3240870splitHere46","Java > Code Style > Formatter"
"2788splitHere46","3240870splitHere46","Source > Sort Members..."
"2789splitHere46","3241043splitHere46","else"
"2790splitHere46","3241043splitHere46","public int getNodeValueByDepth(Node n, int level) {<newline46mondego>    int sum = 0;<newline46mondego><newline46mondego>    /** If we have reached our desired level */<newline46mondego>    if (level == 0) {<newline46mondego>        if (n != null) {<newline46mondego>            /** Assuming data is an int and not nullable */<newline46mondego>            return n.data;<newline46mondego>        } else {<newline46mondego>            /** Change this to 0 if you don't want an error condition */<newline46mondego>            return -1;<newline46mondego>    }<newline46mondego><newline46mondego>    /** We are not the desired level, so get the sum of .left and .right, knowing either may not exist */<newline46mondego>    if (n.left != null) {<newline46mondego>        sum += getNodeValueByDepth(n.left, level-1);<newline46mondego>    }<newline46mondego><newline46mondego>    if (n.right != null) {<newline46mondego>        sum += getNodeValueByDepth(n.right, level-1);<newline46mondego>    }<newline46mondego><newline46mondego>    /** Now have evaluated every possible child and stored the sum, even if it is 0 */<newline46mondego>    return sum;<newline46mondego>}<newline46mondego>"
"2791splitHere46","3241111splitHere46","NullPointerException"
"2792splitHere46","3241111splitHere46","NullPointerException"
"2793splitHere46","3241143splitHere46","Asserts that a condition is false. If it isn't it throws an AssertionError with the given message.<newline46mondego><newline46mondego>Parameters:<newline46mondego>    message - the identifying message for the AssertionError (null okay)<newline46mondego>    condition - condition to be checked<newline46mondego>"
"2794splitHere46","3241183splitHere46","ExecutorService"
"2795splitHere46","3241410splitHere46","char[] spacesArray = new char[2000];<newline46mondego>Arrays.fill(spacesArray, ' ');<newline46mondego>String spaces = new String(spacesArray);<newline46mondego>"
"2796splitHere46","3241478splitHere46","EventListenerList"
"2797splitHere46","3241564splitHere46","<c:forEach>"
"2798splitHere46","3241564splitHere46","List<T>"
"2799splitHere46","3241564splitHere46","<tr>"
"2800splitHere46","3241564splitHere46","List<Car>"
"2801splitHere46","3241564splitHere46","${cars}"
"2802splitHere46","3241564splitHere46","<table><newline46mondego>    <c:forEach items=<doubleQuotes46>${cars}<doubleQuotes46> var=<doubleQuotes46>car<doubleQuotes46>><newline46mondego>        <tr><newline46mondego>            <td>${car.make}</td><newline46mondego>            <td>${car.model}</td><newline46mondego>            <td>${car.type}</td><newline46mondego>            <td>${car.color}</td><newline46mondego>            <td>${car.price}</td><newline46mondego>        </tr><newline46mondego>    </c:forEach><newline46mondego></table><newline46mondego>"
"2803splitHere46","3241649splitHere46","binascii"
"2804splitHere46","3241655splitHere46","table.addMouseListener( new MouseAdapter()<newline46mondego>{<newline46mondego>    public void mouseReleased(MouseEvent e)<newline46mondego>    {<newline46mondego>        if (e.isPopupTrigger())<newline46mondego>        {<newline46mondego>            JTable source = (JTable)e.getSource();<newline46mondego>            int row = source.rowAtPoint( e.getPoint() );<newline46mondego>            int column = source.columnAtPoint( e.getPoint() );<newline46mondego><newline46mondego>            if (! source.isRowSelected(row))<newline46mondego>                source.changeSelection(row, column, false, false);<newline46mondego><newline46mondego>            popup.show(e.getComponent(), e.getX(), e.getY());<newline46mondego>        }<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"2805splitHere46","3241679splitHere46","<doubleQuotes46><doubleQuotes46>.equals(myString);<newline46mondego>"
"2806splitHere46","3241679splitHere46","NullPointerException"
"2807splitHere46","3241679splitHere46","myString"
"2808splitHere46","3241679splitHere46","myString.isEmpty();<newline46mondego>"
"2809splitHere46","3241679splitHere46","myString"
"2810splitHere46","3241679splitHere46","myString.equals(<doubleQuotes46><doubleQuotes46>)"
"2811splitHere46","3241679splitHere46","isEmpty()"
"2812splitHere46","3241679splitHere46","equals(<doubleQuotes46><doubleQuotes46>)"
"2813splitHere46","3241765splitHere46","String"
"2814splitHere46","3241765splitHere46","News"
"2815splitHere46","3241765splitHere46","News"
"2816splitHere46","3241989splitHere46","var"
"2817splitHere46","3241989splitHere46","fmt:message"
"2818splitHere46","3241989splitHere46","<fmt:message bundle=<doubleQuotes46>${example_Labels}<doubleQuotes46> key=<doubleQuotes46>example_field<doubleQuotes46> var=<doubleQuotes46>example_title<doubleQuotes46> /><newline46mondego>"
"2819splitHere46","3241989splitHere46","example_title"
"2820splitHere46","3241989splitHere46","title=<doubleQuotes46>${example_title}<doubleQuotes46><newline46mondego>"
"2821splitHere46","3241989splitHere46","<c:out>"
"2822splitHere46","3241989splitHere46","title=<doubleQuotes46><c:out value=<doubleQuotes46>${example_title}<doubleQuotes46> /><doubleQuotes46><newline46mondego>"
"2823splitHere46","3242190splitHere46","limit"
"2824splitHere46","3242278splitHere46","detachable=<doubleQuotes46>true<doubleQuotes46>"
"2825splitHere46","3242278splitHere46","@PersistenceCapable(identityType = IdentityType.APPLICATION, detachable=<doubleQuotes46>true<doubleQuotes46>)<newline46mondego>public class Note {<newline46mondego>    @PrimaryKey<newline46mondego>    @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)<newline46mondego>    private Long key;<newline46mondego>...<newline46mondego>}<newline46mondego>"
"2826splitHere46","3242278splitHere46","getAll()"
"2827splitHere46","3242278splitHere46","public List<Note> getList(){<newline46mondego>    List<Note> detachedList=null, list=null;<newline46mondego>    try {<newline46mondego>        String query = <doubleQuotes46>select from <doubleQuotes46> + Note.class.getName();<newline46mondego>        pm = PMF.get().getPersistenceManager();<newline46mondego>        list = (List<Note>)pm.newQuery(query).execute();            <newline46mondego>        detachedList = new ArrayList<Note>();<newline46mondego>        for(Note obj : list){<newline46mondego>            detachedList.add(pm.detachCopy(obj));<newline46mondego>        }<newline46mondego><newline46mondego>    } finally {<newline46mondego>        pm.close();<newline46mondego>    }<newline46mondego>    return detachedList;<newline46mondego><newline46mondego>}<newline46mondego>"
"2828splitHere46","3242278splitHere46","public Note findByKey(Long key) {<newline46mondego>    Note detachedCopy=null, object=null;<newline46mondego>    try{<newline46mondego>        pm= PMF.get().getPersistenceManager();<newline46mondego>        object = pm.getObjectById(Note.class,key);<newline46mondego>        detachedCopy = pm.detachCopy(object);<newline46mondego>    }catch (JDOObjectNotFoundException e) {<newline46mondego>        return null; // or whatever<newline46mondego>    } <newline46mondego>    finally {<newline46mondego>        pm.close(); // close here<newline46mondego>    }<newline46mondego>    return detachedCopy;<newline46mondego><newline46mondego>}<newline46mondego>"
"2829splitHere46","3242330splitHere46","Collections.asSynchronizedList"
"2830splitHere46","3242330splitHere46","static final"
"2831splitHere46","3242330splitHere46","wait()"
"2832splitHere46","3242330splitHere46","notify()"
"2833splitHere46","3242482splitHere46","Filter"
"2834splitHere46","3242482splitHere46","ServletResponse"
"2835splitHere46","3242482splitHere46","HttpServletResponseWrapper"
"2836splitHere46","3242482splitHere46","HttpServletResponse#getWriter()"
"2837splitHere46","3242482splitHere46","doFilter()"
"2838splitHere46","3242482splitHere46","public void doFilter(ServletRequest request, final ServletResponse response, FilterChain chain) throws IOException, ServletException {<newline46mondego>    final CopyPrintWriter writer = new CopyPrintWriter(response.getWriter());<newline46mondego>    chain.doFilter(request, new HttpServletResponseWrapper((HttpServletResponse) response) {<newline46mondego>        @Override public PrintWriter getWriter() {<newline46mondego>            return writer;<newline46mondego>        }<newline46mondego>    });<newline46mondego>    logger.log(writer.getCopy());<newline46mondego>}<newline46mondego>"
"2839splitHere46","3242482splitHere46","CopyPrintWriter"
"2840splitHere46","3242482splitHere46","public class CopyPrintWriter extends PrintWriter {<newline46mondego><newline46mondego>    private StringBuilder copy = new StringBuilder();<newline46mondego><newline46mondego>    public CopyPrintWriter(Writer writer) {<newline46mondego>        super(writer);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void write(int c) {<newline46mondego>        copy.append((char) c); // It is actually a char, not an int.<newline46mondego>        super.write(c);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void write(char[] chars, int offset, int length) {<newline46mondego>        copy.append(chars, offset, length);<newline46mondego>        super.write(chars, offset, length);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void write(String string, int offset, int length) {<newline46mondego>        copy.append(string, offset, length);<newline46mondego>        super.write(string, offset, length);<newline46mondego>    }<newline46mondego><newline46mondego>    public String getCopy() {<newline46mondego>        return copy.toString();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2841splitHere46","3242482splitHere46","url-pattern"
"2842splitHere46","3242482splitHere46","url-pattern"
"2843splitHere46","3242482splitHere46","*.jsp"
"2844splitHere46","3242482splitHere46","servlet-name"
"2845splitHere46","3242482splitHere46","HttpServletResponse#getOutputStream()"
"2846splitHere46","3242590splitHere46","SoapAction"
"2847splitHere46","3242590splitHere46","<wsdl:operation name=<doubleQuotes46>AddTwoNumbers<doubleQuotes46>><newline46mondego>  <soap:operation soapAction=<doubleQuotes46>http://mydomain.com/myservice/AddTwoNumbers<doubleQuotes46> style=<doubleQuotes46>document<doubleQuotes46>/><newline46mondego>"
"2848splitHere46","3242695splitHere46","HandlerExceptionResolver"
"2849splitHere46","3242695splitHere46","web.xml"
"2850splitHere46","3243157splitHere46","com.sun.java.swing.plaf.nimbus.TabbedPaneTabbedPaneTabPainter<newline46mondego>"
"2851splitHere46","3243157splitHere46","Focused"
"2852splitHere46","3243157splitHere46","TabbedPane"
"2853splitHere46","3243779splitHere46","s.substring(s.lastIndexOf(':') + 1);<newline46mondego>"
"2854splitHere46","3243779splitHere46","s.substring(s.lastIndexOf(' ') + 1);<newline46mondego>"
"2855splitHere46","3243779splitHere46","String numbers[] = s.split(<doubleQuotes46>[^0-9]+<doubleQuotes46>);<newline46mondego>"
"2856splitHere46","3243883splitHere46","git builtin-push.c"
"2857splitHere46","3243883splitHere46","static int do_push(const char *repo, int flags)<newline46mondego>    {<newline46mondego>        int i, errs;<newline46mondego>        struct remote *remote = remote_get(repo);<newline46mondego><newline46mondego>        const char **url;<newline46mondego>        int url_nr;<newline46mondego><newline46mondego><newline46mondego>        if (!remote) {<newline46mondego>            if (repo)<newline46mondego>                die(<doubleQuotes46>bad repository '%s'<doubleQuotes46>, repo);<newline46mondego>            die(<doubleQuotes46>No destination configured to push to.<doubleQuotes46>);<newline46mondego>        }<newline46mondego>"
"2858splitHere46","3243883splitHere46","~/foo/mikeci-archetype-springmvc-webapp$ git remote add origin git@github.com:amleggett/mikeci-archetype-springmvc-webapp.git<newline46mondego>"
"2859splitHere46","3243883splitHere46","remote add"
"2860splitHere46","3243883splitHere46","<scm>"
"2861splitHere46","3243883splitHere46","<scm><newline46mondego>   <connection><newline46mondego>   scm:git:ssh://github.com/amleggett/${artifactId}.git<newline46mondego>   </connection><newline46mondego>   <developerConnection><newline46mondego>   scm:git:ssh://git@github.com/amleggett/${artifactId}.git<newline46mondego>   </developerConnection><newline46mondego>   <url><newline46mondego>   http://github.com/amleggett/${artifactId}<newline46mondego>   </url><newline46mondego>  </scm><newline46mondego>"
"2862splitHere46","3243883splitHere46","<scm>"
"2863splitHere46","3243883splitHere46","<connection>"
"2864splitHere46","3243883splitHere46","<developerConnection>"
"2865splitHere46","3243883splitHere46","scm:<scm implementation>:<scm implementation-specific path><newline46mondego>"
"2866splitHere46","3243883splitHere46","<url>"
"2867splitHere46","3243883splitHere46","maven-scm-plugin"
"2868splitHere46","3243883splitHere46","~/foo/mikeci-archetype-springmvc-webapp$ mvn scm:validate<newline46mondego>[INFO] Preparing scm:validate<newline46mondego>[INFO] No goals needed for project - skipping<newline46mondego>[INFO] [scm:validate {execution: default-cli}]<newline46mondego>[INFO] connectionUrl scm connection string is valid.<newline46mondego>[INFO] project.scm.connection scm connection string is valid.<newline46mondego>[INFO] project.scm.developerConnection scm connection string is valid.<newline46mondego>[INFO] --------------------------------------------------------------<newline46mondego>[INFO] BUILD SUCCESSFUL<newline46mondego>"
"2869splitHere46","3243938splitHere46","parse"
"2870splitHere46","3243938splitHere46","ClassFormatException"
"2871splitHere46","3243938splitHere46","public bool IsProbablyJava(string file)<newline46mondego>{<newline46mondego>    using (Stream stream = File.OpenRead(file))<newline46mondego>    {<newline46mondego>        return stream.ReadByte() == 0xca &&<newline46mondego>               stream.ReadByte() == 0xfe &&<newline46mondego>               stream.ReadByte() == 0xba &&<newline46mondego>               stream.ReadByte() == 0xbe;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2872splitHere46","3243938splitHere46","BinaryReader"
"2873splitHere46","3244171splitHere46","request.setAttribute(<doubleQuotes46>message<doubleQuotes46>, yourMessage)"
"2874splitHere46","3244171splitHere46","request.getRequestDispatcher(<doubleQuotes46>targetPage.jsp<doubleQuotes46>).forward()"
"2875splitHere46","3244171splitHere46","<c:out value=<doubleQuotes46>${message}<doubleQuotes46> />"
"2876splitHere46","3244171splitHere46","request.getAttribute(..)"
"2877splitHere46","3244171splitHere46","response.sendRedirect(..)"
"2878splitHere46","3244325splitHere46","<html><head></head><body><newline46mondego><wicket:panel><newline46mondego><newline46mondego>    <a href=<doubleQuotes46><doubleQuotes46> wicket:id=<doubleQuotes46>link<doubleQuotes46>><newline46mondego>        <wicket:container wicket:id=<doubleQuotes46>label<doubleQuotes46> /><newline46mondego>    </a><newline46mondego><newline46mondego></wicket:panel><newline46mondego></body></html><newline46mondego>"
"2879splitHere46","3244325splitHere46","public class MyPanel extends Panel{<newline46mondego><newline46mondego>    private static class Mybean{<newline46mondego><newline46mondego>        String labelText = <doubleQuotes46>click me<doubleQuotes46>;<newline46mondego><newline46mondego>        public String getLabelText(){<newline46mondego>            return this.labelText;<newline46mondego>        }<newline46mondego><newline46mondego>        public void setLabelText(final String labelText){<newline46mondego>            this.labelText = labelText;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public MyPanel(final String id){<newline46mondego>        super(id);<newline46mondego>        final Mybean bean = new Mybean();<newline46mondego>        this.add(new Link<Void>(<doubleQuotes46>link<doubleQuotes46>){<newline46mondego><newline46mondego>            private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void onClick(){<newline46mondego>                bean.setLabelText(<doubleQuotes46>Thanks for clicking<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        }.add(new Label(<doubleQuotes46>label<doubleQuotes46>, new PropertyModel<String>(bean, <doubleQuotes46>labelText<doubleQuotes46>)))<newline46mondego><newline46mondego>        );<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2880splitHere46","3244602splitHere46","public abstract class BaseListActivity<T> extends ListViewActivity {<newline46mondego>    private List<T> mItems; <newline46mondego><newline46mondego>    protected abstract List<T> readAllFromXML();<newline46mondego>    ...<newline46mondego><newline46mondego>}<newline46mondego>"
"2881splitHere46","3244602splitHere46","public TexyListActivity extends BaseListActivity<String> {<newline46mondego>    protected List<String> readAllFromXML() {<newline46mondego>        ....<newline46mondego>    }<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"2882splitHere46","3244604splitHere46","Provider<T>"
"2883splitHere46","3244604splitHere46","Function<F, T>"
"2884splitHere46","3244604splitHere46","Supplier<T>"
"2885splitHere46","3244604splitHere46","Predicate<T>"
"2886splitHere46","3244604splitHere46","Func<T, U>"
"2887splitHere46","3244604splitHere46","Action<T>"
"2888splitHere46","3244730splitHere46","com.mycompany.myproject.api.services<newline46mondego>// contains service interfaces for project myproject<newline46mondego><newline46mondego>com.mycompany.myproject.common.util.string <newline46mondego>// contains string-related utility classes that reside in a library module<newline46mondego>// that will be used by several other artifacts<newline46mondego>"
"2889splitHere46","3244730splitHere46","com.mycompany.myproject.api"
"2890splitHere46","3244775splitHere46","class Foo extends DefaultHandler {<newline46mondego>    ArrayList<String> activeProperty = new ArrayList<String>();<newline46mondego>    ArrayList<Triple> triplesList = new ArrayList<Triple>();<newline46mondego>    ArrayList<String> activeObject = new ArrayList<String>();<newline46mondego><newline46mondego>    boolean name = false;<newline46mondego>    activeObject.add(file);<newline46mondego>}<newline46mondego>"
"2891splitHere46","3244775splitHere46","ArrayList<String> activeProperty = new ArrayList<String>();<newline46mondego>ArrayList<Triple> triplesList = new ArrayList<Triple>();<newline46mondego>ArrayList<String> activeObject = new ArrayList<String>();<newline46mondego>boolean name = false;<newline46mondego><newline46mondego>{<newline46mondego>    activeObject.add(file);<newline46mondego>}<newline46mondego>"
"2892splitHere46","3244775splitHere46","ArrayList<String> activeObject = Lists.newArrayList(file);<newline46mondego>"
"2893splitHere46","3244788splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.Collections;<newline46mondego>import java.util.HashMap;<newline46mondego>import java.util.List;<newline46mondego>import java.util.AbstractMap.SimpleEntry;<newline46mondego><newline46mondego><newline46mondego>public class SegmentSet <T> {   <newline46mondego>    private List<Segment> segments = new ArrayList<Segment>();  <newline46mondego><newline46mondego>    //note that x2 is inclusive<newline46mondego>    public void add(int x1, int x2, T identity) {<newline46mondego>        segments.add(new Segment(x1,x2, identity));<newline46mondego>    }<newline46mondego><newline46mondego>    public List<SimpleEntry<T, T>> getAllIntersectingPairs() {<newline46mondego>        // Build a list of all segment edges<newline46mondego>        ArrayList<Edge> edges = new ArrayList<Edge>(2 * segments.size());<newline46mondego>        int i=0;<newline46mondego>        for(Segment seg : segments) {<newline46mondego>            edges.add(new Edge(EdgeType.START, seg.x1, seg));<newline46mondego>            edges.add(new Edge(EdgeType.END, seg.x2, seg));<newline46mondego>        }<newline46mondego><newline46mondego>        // Sort the edges in ascending order<newline46mondego>        Collections.sort(edges);<newline46mondego><newline46mondego>        // Sweep<newline46mondego>        ArrayList<SimpleEntry<T, T>> res = new ArrayList<SimpleEntry<T, T>>();<newline46mondego>        HashMap<Segment, Object> currSegments = new HashMap<Segment, Object>();<newline46mondego>        for (Edge edge : edges) {<newline46mondego>            if (edge.type == EdgeType.START) {<newline46mondego>                for (Segment seg : currSegments.keySet())<newline46mondego>                    res.add(new SimpleEntry<T, T>(edge.seg.identity, seg.identity));<newline46mondego>                currSegments.put(edge.seg, null);<newline46mondego>            } else {<newline46mondego>                currSegments.remove(edge.seg);<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        return res;<newline46mondego>    }<newline46mondego><newline46mondego>    public class Segment {<newline46mondego>        public final int x1;<newline46mondego>        public final int x2;<newline46mondego>        public final T identity;<newline46mondego><newline46mondego>        public Segment(int x1, int x2, T identity) {<newline46mondego>            this.x1 = x1;<newline46mondego>            this.x2 = x2;<newline46mondego>            this.identity = identity;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private enum EdgeType {START, END};<newline46mondego><newline46mondego>    private class Edge implements Comparable<Edge>{<newline46mondego>        public final EdgeType type;<newline46mondego>        public final int x;<newline46mondego>        public Segment seg;<newline46mondego><newline46mondego>        public Edge(EdgeType type, int x, Segment seg) {<newline46mondego>            this.type = type;<newline46mondego>            this.x = x;<newline46mondego>            this.seg = seg;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int compareTo(Edge o) {<newline46mondego>            if (x > o.x)<newline46mondego>                return 1;<newline46mondego>            if (x < o.x)<newline46mondego>                return -1;<newline46mondego>            // A start Edge will come before an end edge in case of equal X value<newline46mondego>            return type.ordinal() - o.type.ordinal();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        SegmentSet<String> set = new SegmentSet<String>();<newline46mondego>        set.add(10,100,<doubleQuotes46>A<doubleQuotes46>);<newline46mondego>        set.add(110,200,<doubleQuotes46>B<doubleQuotes46>);<newline46mondego>        set.add(0,400,<doubleQuotes46>C<doubleQuotes46>);<newline46mondego>        System.out.println(set.getAllIntersectingPairs());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2894splitHere46","3244810splitHere46","-Dcom.sun.metro.soap.dump=true<newline46mondego>-Dcom.sun.xml.ws.assembler.client=true<newline46mondego>"
"2895splitHere46","3244974splitHere46","Activity"
"2896splitHere46","3245075splitHere46","public class A {<newline46mondego>        // Declaration of the 'array' attribute<newline46mondego>        public float[] array = new float[]{1.1f, 2.2f, 3.3f};<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    class B extends A {<newline46mondego>        // Every instance of 'B' also has an 'array' attribute<newline46mondego>    }<newline46mondego>"
"2897splitHere46","3245075splitHere46","array"
"2898splitHere46","3245075splitHere46","public static"
"2899splitHere46","3245075splitHere46","array"
"2900splitHere46","3245075splitHere46","A.array"
"2901splitHere46","3245075splitHere46","B.array"
"2902splitHere46","3245075splitHere46","A"
"2903splitHere46","3245075splitHere46","B"
"2904splitHere46","3245075splitHere46","array"
"2905splitHere46","3245075splitHere46","a.array"
"2906splitHere46","3245075splitHere46","b.array"
"2907splitHere46","3245075splitHere46","a"
"2908splitHere46","3245075splitHere46","b"
"2909splitHere46","3245075splitHere46","A"
"2910splitHere46","3245075splitHere46","B"
"2911splitHere46","3245075splitHere46","A"
"2912splitHere46","3245075splitHere46","B"
"2913splitHere46","3245075splitHere46","A"
"2914splitHere46","3245075splitHere46","B"
"2915splitHere46","3245075splitHere46","public class A {<newline46mondego>        // Declaration of the 'array' attribute<newline46mondego>        public float[] array = new float[]{1.1f, 2.2f, 3.3f};<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    import static A.array;<newline46mondego>    class B {<newline46mondego>        // now I can use 'array' without qualifying it with 'A'<newline46mondego>    }<newline46mondego>"
"2916splitHere46","3245075splitHere46","static"
"2917splitHere46","3245155splitHere46","@PostConstruct"
"2918splitHere46","3245155splitHere46","@Resource"
"2919splitHere46","3245155splitHere46","@Resource"
"2920splitHere46","3245155splitHere46","@PostConstruct"
"2921splitHere46","3245155splitHere46","@PostConstruct"
"2922splitHere46","3245155splitHere46","BeanA"
"2923splitHere46","3245155splitHere46","@PostConstruct"
"2924splitHere46","3245155splitHere46","BeanB"
"2925splitHere46","3245155splitHere46","BeanB"
"2926splitHere46","3245155splitHere46","BeanA"
"2927splitHere46","3245231splitHere46","@Entity<newline46mondego>@Inheritance(strategy = InheritanceType.SINGLE_TABLE)<newline46mondego>@DiscriminatorColumn(name = <doubleQuotes46>field<doubleQuotes46>, discriminatorType = DiscriminatorType.STRING)<newline46mondego>@DiscriminatorValue(<doubleQuotes46>dummy<doubleQuotes46>)<newline46mondego>public class EntitySuperClass {<newline46mondego>    // here definitions go <newline46mondego>    // but don't define discriminator column here<newline46mondego>}<newline46mondego><newline46mondego>@Entity<newline46mondego>@DiscriminatorValue(value=<doubleQuotes46>sub1<doubleQuotes46>)<newline46mondego>public class Sub1Class extends EntitySuperClass {<newline46mondego>    // here definitions go<newline46mondego>}<newline46mondego>"
"2928splitHere46","3245242splitHere46","bigint"
"2929splitHere46","3245322splitHere46","if A -> return ProcessorA<newline46mondego>if B -> return ProcessorB<newline46mondego>"
"2930splitHere46","3245322splitHere46","class Adapter {<newline46mondego><newline46mondego>    Processor getProcessor(Object o) {<newline46mondego>        if (o instance of A) {<newline46mondego>            return new ProcessorA();<newline46mondego>        } else if ...<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2931splitHere46","3245361splitHere46","__int64"
"2932splitHere46","3245361splitHere46","long"
"2933splitHere46","3245361splitHere46","int64_t"
"2934splitHere46","3245361splitHere46","long long int"
"2935splitHere46","3245401splitHere46","this.getIntent().getExtras()"
"2936splitHere46","3245401splitHere46","null"
"2937splitHere46","3245401splitHere46","makeview"
"2938splitHere46","3245401splitHere46","myIntent.putExtras(b);<newline46mondego>"
"2939splitHere46","3245401splitHere46","startActivity"
"2940splitHere46","3245577splitHere46","NetworkPathStateChanged"
"2941splitHere46","3245577splitHere46","private TAvailabilityState availablilityState = null; // or a more suiteable initial value<newline46mondego>@Override<newline46mondego>public void NetworkPathStateChanged(TAvailabilityState availabilityState) {<newline46mondego>    this.availabilityState = availabilityState;<newline46mondego>    Log.d(<doubleQuotes46>SipNetworkPath<doubleQuotes46>, <doubleQuotes46>SipNetworkPath - Do networkpathstate changed!<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"2942splitHere46","3245577splitHere46","isAlive"
"2943splitHere46","3245577splitHere46","@Override<newline46mondego>public boolean isAlive() {<newline46mondego>    return availabilityState == TAvailabilityState.ALIVE; // <-- this is just a guess, I don't know this class or enum.  <newline46mondego>}<newline46mondego>"
"2944splitHere46","3245577splitHere46","NetworkPathJniObserver"
"2945splitHere46","3245577splitHere46","isAlive()"
"2946splitHere46","3245577splitHere46","false"
"2947splitHere46","3245646splitHere46","AUTO"
"2948splitHere46","3245646splitHere46","COMMIT"
"2949splitHere46","3245671splitHere46","ThreadPoolExecutor"
"2950splitHere46","3245671splitHere46","Executors.newFixedThreadPool(concurrentCount);"
"2951splitHere46","3245671splitHere46","org.apache.commons.net.ftp.FTPClient"
"2952splitHere46","3245671splitHere46","Future.get()"
"2953splitHere46","3246000splitHere46","3413      OSThreadContendState osts(Self->osthread());<newline46mondego>3414      ThreadBlockInVM tbivm(jt);<newline46mondego>3415<newline46mondego>3416      Self->set_current_pending_monitor(this);<newline46mondego>3417<newline46mondego>3418      // TODO-FIXME: change the following for(;;) loop to straight-line code.<newline46mondego>3419      for (;;) {<newline46mondego>3420        jt->set_suspend_equivalent();<newline46mondego>3421        // cleared by handle_special_suspend_equivalent_condition()<newline46mondego>3422        // or java_suspend_self()<newline46mondego>3423<newline46mondego>3424        EnterI (THREAD) ;<newline46mondego>3425<newline46mondego>3426        if (!ExitSuspendEquivalent(jt)) break ;<newline46mondego>3427<newline46mondego>3428        //<newline46mondego>3429        // We have acquired the contended monitor, but while we were<newline46mondego>3430        // waiting another thread suspended us. We don't want to enter<newline46mondego>3431        // the monitor while suspended because that would surprise the<newline46mondego>3432        // thread that suspended us.<newline46mondego>"
"2954splitHere46","3246091splitHere46","class MyService implements ContactsService {<newline46mondego>    @Override<newline46mondego>    public <T extends Response> T execute(Action<T> action) {<newline46mondego>        return (T)new GetDetailsResponse();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2955splitHere46","3246091splitHere46","Action<MyResponse> action = new Action<MyResponse>();<newline46mondego>// you can't actually instantiate an interface, just an example<newline46mondego>// the action should be some instance of a class implementing Action<MyResponse><newline46mondego>MyReponse r = myService.execute(action);<newline46mondego>"
"2956splitHere46","3246091splitHere46","interface Response {<newline46mondego>    void setWhatever(String value);<newline46mondego>}<newline46mondego><newline46mondego>interface Action<T extends Response> {<newline46mondego>    T getResponse();<newline46mondego>}<newline46mondego><newline46mondego>class MyAction implements Action<GetDetailsResponse> {<newline46mondego>    @Override<newline46mondego>    public GetDetailsResponse getResponse() {<newline46mondego>        return new GetDetailsResponse();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class MyService implements ContactsService {<newline46mondego>    @Override<newline46mondego>    public <T extends Response> T execute(Action<T> action) {<newline46mondego>        T response = action.getResponse();<newline46mondego>        // do something to Response here like<newline46mondego>        response.setWhatever(<doubleQuotes46>some value<doubleQuotes46>);<newline46mondego>        return response;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2957splitHere46","3246138splitHere46","def source = new URL(<doubleQuotes46>http://www.google.com<doubleQuotes46>).getText(<doubleQuotes46>ISO-8859-1<doubleQuotes46>)<newline46mondego>def target = new String(source.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>), <doubleQuotes46>UTF-8<doubleQuotes46>)<newline46mondego>"
"2958splitHere46","3246170splitHere46","b1.add(new SomeOtherTree());<newline46mondego>DataNode node = a1.get(0);<newline46mondego>"
"2959splitHere46","3246170splitHere46","List<DataNode> a1 = new ArrayList<DataNode>();<newline46mondego>List<? extends Tree> b1 = a1;<newline46mondego>"
"2960splitHere46","3246170splitHere46","b1"
"2961splitHere46","3246170splitHere46","Tree"
"2962splitHere46","3246170splitHere46","b1.add(...)"
"2963splitHere46","3246218splitHere46","Item"
"2964splitHere46","3246218splitHere46","CustomItem"
"2965splitHere46","3246218splitHere46","MyButton"
"2966splitHere46","3246218splitHere46","import javax.microedition.lcdui.Canvas;<newline46mondego>import javax.microedition.lcdui.CustomItem;<newline46mondego>import javax.microedition.lcdui.Display;<newline46mondego>import javax.microedition.lcdui.Form;<newline46mondego>import javax.microedition.lcdui.Graphics;<newline46mondego>import javax.microedition.lcdui.Image;<newline46mondego>import javax.microedition.lcdui.Item;<newline46mondego>import javax.microedition.lcdui.ItemStateListener;<newline46mondego>import javax.microedition.midlet.MIDlet;<newline46mondego><newline46mondego>public class TestMidlet extends MIDlet implements ItemStateListener {<newline46mondego>    class MyButton extends CustomItem {<newline46mondego>        private Image _image = null;<newline46mondego>        private boolean _down = false;<newline46mondego>        private int _clicks = 0;<newline46mondego><newline46mondego>        public MyButton(Image image) {<newline46mondego>            super(<doubleQuotes46><doubleQuotes46>);<newline46mondego>            _image = image;<newline46mondego>        }<newline46mondego><newline46mondego>        // Button's image<newline46mondego>        public void setImage(Image image) {<newline46mondego>            _image = image;<newline46mondego>            repaint();<newline46mondego>        }<newline46mondego>        public Image getImage() {<newline46mondego>            return _image;<newline46mondego>        }<newline46mondego><newline46mondego>        // Has the button been clicked?<newline46mondego>        public boolean isClicked() {<newline46mondego>            if(_clicks>0) {<newline46mondego>                _clicks -= 1;<newline46mondego>                return true;<newline46mondego>            }<newline46mondego>            return false;<newline46mondego>        }<newline46mondego><newline46mondego>        // Is the button currently down?<newline46mondego>        public boolean isDown() {<newline46mondego>            return _down;<newline46mondego>        }<newline46mondego>        public void setDown(boolean down) {<newline46mondego>            if(_down)<newline46mondego>                _clicks += 1;<newline46mondego>            if(down!=_down) {<newline46mondego>                _down = down;<newline46mondego>                repaint();<newline46mondego>                notifyStateChanged();<newline46mondego>            }<newline46mondego>        }<newline46mondego>        public void setDown() {<newline46mondego>            setDown(true);<newline46mondego>        }<newline46mondego>        public void setUp() {<newline46mondego>            setDown(false);<newline46mondego>        }<newline46mondego><newline46mondego>        // Minimal button size = image size<newline46mondego>        protected int getMinContentHeight() {<newline46mondego>            return getImage().getHeight();<newline46mondego>        }<newline46mondego>        protected int getMinContentWidth() {<newline46mondego>            return getImage().getWidth();<newline46mondego>        }<newline46mondego>        // Preferred button size = image size + borders<newline46mondego>        protected int getPrefContentHeight(int width) {<newline46mondego>            return getImage().getHeight()+2;<newline46mondego>        }<newline46mondego>        protected int getPrefContentWidth(int height) {<newline46mondego>            return getImage().getWidth()+2;<newline46mondego>        }<newline46mondego><newline46mondego>        // Button painting procedure<newline46mondego>        protected void paint(Graphics g, int w, int h) {<newline46mondego>            // Fill the button with grey color - background <newline46mondego>            g.setColor(192, 192, 192);<newline46mondego>            g.fillRect(0, 0, w, h);<newline46mondego>            // Draw the image in the center of the button<newline46mondego>            g.drawImage(getImage(), w/2, h/2, Graphics.HCENTER|Graphics.VCENTER);<newline46mondego>            // Draw the borders<newline46mondego>            g.setColor(isDown()?0x000000:0xffffff);<newline46mondego>            g.drawLine(0, 0, w, 0);<newline46mondego>            g.drawLine(0, 0, 0, h);<newline46mondego>            g.setColor(isDown()?0xffffff:0x000000);<newline46mondego>            g.drawLine(0, h-1, w, h-1);<newline46mondego>            g.drawLine(w-1, 0, w-1, h);<newline46mondego>        }<newline46mondego><newline46mondego>        // If FIRE key is pressed, the button becomes pressed (down state)<newline46mondego>        protected void keyPressed(int c) {<newline46mondego>            if(getGameAction(c)==Canvas.FIRE)<newline46mondego>                setDown();<newline46mondego>        }<newline46mondego>        // When FIRE key is released, the button becomes released (up state)<newline46mondego>        protected void keyReleased(int c) {<newline46mondego>            if(getGameAction(c)==Canvas.FIRE)<newline46mondego>                setUp();<newline46mondego>        }<newline46mondego>        // The same for touchscreens<newline46mondego>        protected void pointerPressed(int x, int y) {<newline46mondego>            setDown();<newline46mondego>        }<newline46mondego>        protected void pointerReleased(int x, int y) {<newline46mondego>            setUp();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    MyButton button = null;<newline46mondego><newline46mondego>    public void itemStateChanged(Item item) {<newline46mondego>        if(item==button) {<newline46mondego>            if(button.isClicked())<newline46mondego>                System.out.print(<doubleQuotes46>clicked, <doubleQuotes46>);<newline46mondego>            System.out.println(button.isDown()?<doubleQuotes46>currently down<doubleQuotes46>:<doubleQuotes46>currently up<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void startApp() {<newline46mondego>        try {<newline46mondego>            Form form = new Form(<doubleQuotes46>Example<doubleQuotes46>);<newline46mondego>            button = new MyButton(Image.createImage(<doubleQuotes46>/icon.png<doubleQuotes46>));<newline46mondego>            form.append(button);<newline46mondego>            form.setItemStateListener(this);<newline46mondego>            Display.getDisplay(this).setCurrent(form);<newline46mondego>        } catch(Exception e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void pauseApp() {<newline46mondego>    }<newline46mondego><newline46mondego>    public void destroyApp(boolean unconditional) {<newline46mondego>        notifyDestroyed();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2967splitHere46","3246244splitHere46","Admin"
"2968splitHere46","3246244splitHere46","persist"
"2969splitHere46","3246244splitHere46","User"
"2970splitHere46","3246244splitHere46","Admin"
"2971splitHere46","3246442splitHere46","public static void main(String[] args) throws Exception {<newline46mondego>    String inputFileName=<doubleQuotes46>C:\\MFile<doubleQuotes46>;<newline46mondego><newline46mondego><newline46mondego>    ArrayList<String> fileLines = new ArrayList<String>();<newline46mondego>    FileReader fr;<newline46mondego>    BufferedReader br;<newline46mondego><newline46mondego>    // Time<newline46mondego>    int t = 1;<newline46mondego><newline46mondego><newline46mondego>    fr = new FileReader(inputFileName);<newline46mondego>    br = new BufferedReader(fr);<newline46mondego>    String line;<newline46mondego><newline46mondego><newline46mondego>    while ((line=br.readLine())!=null) {<newline46mondego>     fileLines.add(line);<newline46mondego>    }<newline46mondego><newline46mondego>    AvgVar myVar = new AvgVar(fileLines);<newline46mondego><newline46mondego>    for(t=1; t<10; t++){ <newline46mondego>    System.out.print(<doubleQuotes46>Average Var at Time t=<doubleQuotes46> + t + <doubleQuotes46> = <doubleQuotes46> + myVar.avgVar(t)+<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>"
"2972splitHere46","3246442splitHere46","public double avgVar(int time){<newline46mondego><newline46mondego> double avgVar = 0;<newline46mondego><newline46mondego> ArrayList<double[]> avgData = avgDuplicateVars(inputData);<newline46mondego><newline46mondego> for(double[] arrVar : avgData){<newline46mondego> avgVar += arrVar[time-1];<newline46mondego> //System.out.print(arrVar[time-1] + <doubleQuotes46>,<doubleQuotes46> + arrVar[time] + <doubleQuotes46>,<doubleQuotes46> + arrVar[time+1] + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego> //System.out.print(avgVar + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego> }<newline46mondego><newline46mondego> avgVar /= numDays(inputData);<newline46mondego><newline46mondego> return avgVar;<newline46mondego>}<newline46mondego><newline46mondego>private int numDays(ArrayList<String> varData){<newline46mondego><newline46mondego> int n = 0;<newline46mondego> int flag = 0;<newline46mondego>"
"2973splitHere46","3246442splitHere46","String[] myData = line.split(<doubleQuotes46> <doubleQuotes46>);<newline46mondego><newline46mondego>if(myData[0].equals(<doubleQuotes46>DATE<doubleQuotes46>) && flag == 0){<newline46mondego><newline46mondego>    flag = 1;<newline46mondego><newline46mondego>   }<newline46mondego>   else if(myData[0].equals(<doubleQuotes46>DATE<doubleQuotes46>) && flag == 1){<newline46mondego><newline46mondego>    n = n + 1;<newline46mondego>    flag = 0;<newline46mondego><newline46mondego>   }<newline46mondego>"
"2974splitHere46","3246442splitHere46","}<newline46mondego><newline46mondego>private ArrayList<double[]> avgDuplicateVars(ArrayList<String> varData){<newline46mondego><newline46mondego> ArrayList<double[]> avgData = new ArrayList<double[]>();<newline46mondego><newline46mondego> double[] varValue = new double[86400];<newline46mondego> double[] varCount = new double[86400];<newline46mondego><newline46mondego> int n = 0;<newline46mondego> int flag = 0;<newline46mondego>"
"2975splitHere46","3246442splitHere46","String[] nLine = iLine.split(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>   if(nLine[0].equals(<doubleQuotes46>DATE<doubleQuotes46>) && flag == 0){<newline46mondego><newline46mondego>    for (int i=0; i<86400; i++){<newline46mondego>    varCount[i] = 0;<newline46mondego>    varValue[i] = 0;<newline46mondego>    }<newline46mondego><newline46mondego>    flag = 1;<newline46mondego><newline46mondego>   }<newline46mondego>   else if(nLine[0].equals(<doubleQuotes46>DATE<doubleQuotes46>) && flag == 1){<newline46mondego><newline46mondego>    for (int i=0; i<86400; i++){<newline46mondego>    if (varCount[i] != 0){<newline46mondego>    varValue[i] /= varCount[i];<newline46mondego>    }<newline46mondego>    }<newline46mondego><newline46mondego>    varValue = fillBlankSpreads(varValue, 86400);<newline46mondego><newline46mondego>    avgData.add(varValue.clone());<newline46mondego><newline46mondego>    flag = 0;<newline46mondego><newline46mondego>   }<newline46mondego>   else{<newline46mondego><newline46mondego>    n = Integer.parseInt(nLine[0])-1;<newline46mondego><newline46mondego>    varValue[n] += Double.parseDouble(nLine[2]);<newline46mondego>    varCount[n] += 1;<newline46mondego><newline46mondego>   }<newline46mondego>"
"2976splitHere46","3246442splitHere46","}<newline46mondego><newline46mondego>private double[] fillBlankSpreads(double[] varValue, int numSpread){<newline46mondego>//Filling the Data with zeros to make the code faster<newline46mondego> for (int i=1; i<numSpread; i++){<newline46mondego> if(varValue[i] == 0){<newline46mondego> varValue[i] = varValue[i-1];<newline46mondego> }<newline46mondego> }<newline46mondego><newline46mondego> return varValue;<newline46mondego>}<newline46mondego>"
"2977splitHere46","3246552splitHere46","board[7][1] = 21;<newline46mondego>"
"2978splitHere46","3246552splitHere46","a[]"
"2979splitHere46","3246552splitHere46","a[n]"
"2980splitHere46","3246552splitHere46","a[0]"
"2981splitHere46","3246552splitHere46","b[][]"
"2982splitHere46","3246552splitHere46","b[n]"
"2983splitHere46","3246552splitHere46","board[7][1]"
"2984splitHere46","3246552splitHere46","board[7][1] = 21"
"2985splitHere46","3246552splitHere46","72"
"2986splitHere46","3246552splitHere46","21"
"2987splitHere46","3246552splitHere46","int numToReplace = 72;<newline46mondego>int replacement = 21;<newline46mondego>//loop through each nested array<newline46mondego>for ( int i = 0; i < board.length; i++ ) { <newline46mondego>   //loop through each element of the nested array <newline46mondego>   for ( int j = 0; j < board[i].length; j++ ) { <newline46mondego>      if ( board[i][j] == numToReplace ) {<newline46mondego>         board[i][j] = replacement;<newline46mondego>      }<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"2988splitHere46","3246824splitHere46","pagename.parentid.childtype.childname.attributename"
"2989splitHere46","3246824splitHere46","home.login.label.username.tooltip"
"2990splitHere46","3246824splitHere46","home.jsp"
"2991splitHere46","3246824splitHere46","<form id=<doubleQuotes46>login<doubleQuotes46>><newline46mondego>    <label for=<doubleQuotes46>username<doubleQuotes46> title=<doubleQuotes46>${text['home.login.label.username.tooltip']}<doubleQuotes46>><newline46mondego>"
"2992splitHere46","3246935splitHere46","Date"
"2993splitHere46","3246935splitHere46","String"
"2994splitHere46","3246935splitHere46","Date#toString()"
"2995splitHere46","3246935splitHere46","Date"
"2996splitHere46","3246935splitHere46","String"
"2997splitHere46","3246935splitHere46","Calendar calendar = Calendar.getInstance();<newline46mondego>calendar.add(Calendar.DAY_OF_MONTH, 10);<newline46mondego>Date date = calendar.getTime();<newline46mondego>String formattedDate = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd HH:mm:ss<doubleQuotes46>).format(date);<newline46mondego>System.out.println(formattedDate);<newline46mondego>"
"2998splitHere46","3246935splitHere46","MM"
"2999splitHere46","3246935splitHere46","mm"
"3000splitHere46","3246935splitHere46","SimpleDateFormat"
"3001splitHere46","3247081splitHere46","if (string.trim().length() > 0) ...<newline46mondego>"
"3002splitHere46","3247081splitHere46","match()"
"3003splitHere46","3247081splitHere46","if (string.matches(<doubleQuotes46>.*\\w.*<doubleQuotes46>)) ...<newline46mondego>"
"3004splitHere46","3247137splitHere46","Class#getGenericInterfaces()"
"3005splitHere46","3247137splitHere46","ParameterizedType"
"3006splitHere46","3247137splitHere46","Type[] genericInterfaces = BarFoo.class.getGenericInterfaces();<newline46mondego>for (Type genericInterface : genericInterfaces) {<newline46mondego>    if (genericInterface instanceof ParameterizedType) {<newline46mondego>        Type[] genericTypes = ((ParameterizedType) genericInterface).getActualTypeArguments();<newline46mondego>        for (Type genericType : genericTypes) {<newline46mondego>            System.out.println(<doubleQuotes46>Generic type: <doubleQuotes46> + genericType);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3007splitHere46","3247242splitHere46","IBoard"
"3008splitHere46","3247242splitHere46","IBoard"
"3009splitHere46","3247242splitHere46","IBoard"
"3010splitHere46","3247242splitHere46","IBoard"
"3011splitHere46","3247242splitHere46","IBoard"
"3012splitHere46","3247242splitHere46","IBoard"
"3013splitHere46","3247242splitHere46","IBoard"
"3014splitHere46","3247242splitHere46","ListBoard"
"3015splitHere46","3247242splitHere46","IBoard"
"3016splitHere46","3247268splitHere46","install:install-file"
"3017splitHere46","3247268splitHere46","deploy:deploy-file"
"3018splitHere46","3247311splitHere46","ExceptionInInitializerError"
"3019splitHere46","3247311splitHere46","ExceptionInInitializerError"
"3020splitHere46","3247311splitHere46","public class MyClass {  <newline46mondego>    protected static final Setter setter;<newline46mondego><newline46mondego>    static {<newline46mondego>        try { <newline46mondego>            setter = new Setter();<newline46mondego>        } catch (FileNotFoundException e) {<newline46mondego>            throw new ExceptionInInitializerError(e);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3021splitHere46","3247520splitHere46","import java.util.logging.Level;<newline46mondego>import java.util.logging.Logger;<newline46mondego>import org.apache.wicket.markup.html.WebPage;<newline46mondego>import org.apache.wicket.markup.html.basic.Label;<newline46mondego>import org.apache.wicket.markup.html.link.Link;<newline46mondego>import org.apache.wicket.model.IModel;<newline46mondego>import org.apache.wicket.model.Model;<newline46mondego><newline46mondego>public class ConcurrentClickPage extends WebPage {<newline46mondego><newline46mondego>    public ConcurrentClickPage() {<newline46mondego>        final IModel<String> model = new Model<String>(<doubleQuotes46>initial<doubleQuotes46>);<newline46mondego>        Label status = new Label(<doubleQuotes46>status<doubleQuotes46>, model);<newline46mondego>        add(status);<newline46mondego>        add(new Link(<doubleQuotes46>link1<doubleQuotes46>){<newline46mondego>            @Override<newline46mondego>            public void onClick() {<newline46mondego>                try {<newline46mondego>                    Thread.sleep(3000);<newline46mondego>                } catch (InterruptedException ex) {<newline46mondego>                    Logger.getLogger(ConcurrentClickPage.class.getName()).log(Level.SEVERE, null, ex);<newline46mondego>                }<newline46mondego>                model.setObject(<doubleQuotes46>link 1 clicked<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        });<newline46mondego>        add(new Link(<doubleQuotes46>link2<doubleQuotes46>){<newline46mondego>            @Override<newline46mondego>            public void onClick() {<newline46mondego>                model.setObject(<doubleQuotes46>link 2 clicked<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3022splitHere46","3247520splitHere46","<html><newline46mondego>  <body><newline46mondego>      <span wicket:id=<doubleQuotes46>status<doubleQuotes46>>text</span><newline46mondego>      <p><newline46mondego>          <a href=<doubleQuotes46>#<doubleQuotes46> wicket:id=<doubleQuotes46>link1<doubleQuotes46>>Link 1 (deferred processing)</a><br/><newline46mondego>          <a href=<doubleQuotes46>#<doubleQuotes46> wicket:id=<doubleQuotes46>link2<doubleQuotes46>>Link 2</a><newline46mondego>      </p><newline46mondego>  </body><newline46mondego></html><newline46mondego>"
"3023splitHere46","3247666splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import javax.swing.*;<newline46mondego>import java.text.*;<newline46mondego>import java.util.Date;<newline46mondego>import java.lang.reflect.Method;<newline46mondego>import java.lang.reflect.InvocationTargetException;<newline46mondego><newline46mondego><newline46mondego>/**<newline46mondego> * Simple demo on how a translucent window<newline46mondego> * looks like when is used to display the system clock.<newline46mondego> * @author <a href=<doubleQuotes46>http://stackoverflow.com/users/20654/oscarryz<doubleQuotes46>>Oscar Reyes</a><newline46mondego> */<newline46mondego>public class TranslucencyDemo extends JPanel implements ActionListener {<newline46mondego><newline46mondego>    private static final SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>HH:mm:ss<doubleQuotes46>);<newline46mondego>    private final Date now = new Date();<newline46mondego>    private final Timer timer = new Timer(1000, this);<newline46mondego>    private final JLabel text = new JLabel();<newline46mondego><newline46mondego>    public TranslucencyDemo() {<newline46mondego>        super(true);<newline46mondego>        timer.start();<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        now.setTime(System.currentTimeMillis());<newline46mondego>        text.setText(String.format(<doubleQuotes46><html><body><font size='50'>%s</font></body></html><doubleQuotes46>,sdf.format(now)));<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>        JFrame f = new JFrame();<newline46mondego>        setTranslucency( f );<newline46mondego>        f.setUndecorated( true );<newline46mondego>        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        f.setBackground(new Color(0f, 0f, 0f, 1f / 3f));<newline46mondego>        f.add(new Translucent());<newline46mondego>        f.pack();<newline46mondego>        f.setVisible(true);<newline46mondego>    }<newline46mondego>    // taken from: http://java.sun.com/developer/technicalArticles/GUI/translucent_shaped_windows/<newline46mondego>    private static void setTranslucency( Window window){<newline46mondego>        try {<newline46mondego>               Class<?> awtUtilitiesClass = Class.forName(<doubleQuotes46>com.sun.awt.AWTUtilities<doubleQuotes46>);<newline46mondego>               Method mSetWindowOpacity = awtUtilitiesClass.getMethod(<doubleQuotes46>setWindowOpacity<doubleQuotes46>, Window.class, float.class);<newline46mondego>               mSetWindowOpacity.invoke(null, window, Float.valueOf(0.75f));<newline46mondego>            } catch (NoSuchMethodException ex) {<newline46mondego>               ex.printStackTrace();<newline46mondego>            } catch (SecurityException ex) {<newline46mondego>               ex.printStackTrace();<newline46mondego>            } catch (ClassNotFoundException ex) {<newline46mondego>               ex.printStackTrace();<newline46mondego>            } catch (IllegalAccessException ex) {<newline46mondego>               ex.printStackTrace();<newline46mondego>            } catch (IllegalArgumentException ex) {<newline46mondego>               ex.printStackTrace();<newline46mondego>            } catch (InvocationTargetException ex) {<newline46mondego>               ex.printStackTrace();<newline46mondego>            }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3024splitHere46","3247777splitHere46","DecimalFormat"
"3025splitHere46","3247777splitHere46","System.out.println"
"3026splitHere46","3247777splitHere46","double"
"3027splitHere46","3247777splitHere46","DecimalFormat format = (DecimalFormat)NumberFormat.getInstance(new Locale(<doubleQuotes46>de<doubleQuotes46>));<newline46mondego>double value = 0.459;<newline46mondego>String formatted = format.format(value);<newline46mondego>System.out.println(formatted); // Prints <doubleQuotes46>0,459<doubleQuotes46><newline46mondego>"
"3028splitHere46","3247777splitHere46","DecimalFormat"
"3029splitHere46","3247777splitHere46","parse"
"3030splitHere46","3247777splitHere46","ParsePosition"
"3031splitHere46","3247777splitHere46","BigDecimal"
"3032splitHere46","3247777splitHere46","double"
"3033splitHere46","3247777splitHere46","setParseBigDecimal"
"3034splitHere46","3247856splitHere46","class DecodeConfig {<newline46mondego>    int compId;<newline46mondego>    int dcTableId;<newline46mondego>    int acTableId;<newline46mondego>}<newline46mondego>"
"3035splitHere46","3247856splitHere46","int"
"3036splitHere46","3248242splitHere46","./WEB-INF/appengine-generated/local_db.bin"
"3037splitHere46","3248242splitHere46","http://localhost:8080/_ah/admin<newline46mondego>"
"3038splitHere46","3248293splitHere46","public class MyFormvalidator implements Validator<newline46mondego>{<newline46mondego>    private List<String> fileFormats;<newline46mondego><newline46mondego>    public MyFormValidator(List<String> fileFormats) {<newline46mondego>        this.fileFormats = fileFormats;<newline46mondego>    }<newline46mondego><newline46mondego>... //the rest of your validator, including checks for fileFormats.contains(myForm.getFormat())<newline46mondego>"
"3039splitHere46","3248293splitHere46","<bean name=<doubleQuotes46>myFormValidator<doubleQuotes46> class=<doubleQuotes46>something.something.MyFormValidator<doubleQuotes46>><newline46mondego>    <constructor-arg><newline46mondego>         <list><newline46mondego>             <value>jpg</value><newline46mondego>             <value>png</value><newline46mondego>             ... etc ...<newline46mondego>         </list><newline46mondego>    </constructor-arg><newline46mondego></bean><newline46mondego>"
"3040splitHere46","3248347splitHere46","List<List<List<Double>>> list = new ArrayList<>();<newline46mondego>"
"3041splitHere46","3248347splitHere46","List<List<List<Double>>> list = new ArrayList();<newline46mondego>"
"3042splitHere46","3248370splitHere46","javap"
"3043splitHere46","3248397splitHere46","BufferedWriter.newLine()"
"3044splitHere46","3248397splitHere46","line.separator"
"3045splitHere46","3248494splitHere46","WstxOutputFactory factory = new WstxOutputFactory();<newline46mondego>factory.setProperty(WstxOutputFactory.P_AUTOMATIC_EMPTY_ELEMENTS, true);<newline46mondego>SMOutputFactory outf = new SMOutputFactory(factory);<newline46mondego>doc = outf.createOutputDocument(fout);<newline46mondego>doc.setIndentation(<doubleQuotes46>\n  <doubleQuotes46>, 1, 1);<newline46mondego>"
"3046splitHere46","3248563splitHere46","ResponseProcessCookies"
"3047splitHere46","3248563splitHere46","org.apache.http.client.protocol"
"3048splitHere46","3248563splitHere46","org.apache.http.client"
"3049splitHere46","3248573splitHere46","DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance(); <newline46mondego>domFactory.setIgnoringComments(true);<newline46mondego>DocumentBuilder builder = domFactory.newDocumentBuilder(); <newline46mondego>Document doc = builder.parse(new File(<doubleQuotes46>XmlTest.xml<doubleQuotes46>)); <newline46mondego><newline46mondego>NodeList nodes = doc.getElementsByTagName(<doubleQuotes46>CustomerId<doubleQuotes46>);<newline46mondego><newline46mondego>Text a = doc.createTextNode(<doubleQuotes46>value<doubleQuotes46>); <newline46mondego>Element p = doc.createElement(<doubleQuotes46>newNode<doubleQuotes46>); <newline46mondego>p.appendChild(a); <newline46mondego><newline46mondego>nodes.item(0).getParentNode().insertBefore(p, nodes.item(0));<newline46mondego>"
"3050splitHere46","3248573splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46> standalone=<doubleQuotes46>no<doubleQuotes46>?><newline46mondego><Customer><newline46mondego>    <names><newline46mondego>        <firstName>fName</firstName><newline46mondego>        <lastName>lName</lastName><newline46mondego>        <middleName>nName</middleName><newline46mondego>        <nickName/><newline46mondego>        </names><newline46mondego>    <addressList><newline46mondego>        <address><newline46mondego>            <streetInfo><newline46mondego>                <houseNumber>22</houseNumber><newline46mondego>                <baseName>Street base name</baseName><newline46mondego>                <district>kewl district</district><newline46mondego>                </streetInfo><newline46mondego>            <zipcode>22231</zipcode><newline46mondego>            <state>xxx</state><newline46mondego>            <country>xxxz</country><newline46mondego>            <primary>true</primary><newline46mondego>            </address><newline46mondego>        </addressList><newline46mondego>    <newNode>value</newNode><newline46mondego><CustomerId/><newline46mondego>    <SSN>561381</SSN><newline46mondego>    <phone><newline46mondego>        <homePhone>123123123</homePhone><newline46mondego>        <officePhone/><newline46mondego>        <homePhone>21319414</homePhone><newline46mondego>        </phone><newline46mondego>    <preferred>true</preferred><newline46mondego></Customer><newline46mondego>"
"3051splitHere46","3248573splitHere46","Transformer transformer = TransformerFactory.newInstance().newTransformer();<newline46mondego>transformer.setOutputProperty(OutputKeys.INDENT, <doubleQuotes46>yes<doubleQuotes46>);<newline46mondego><newline46mondego>StreamResult result = new StreamResult(new StringWriter());<newline46mondego>DOMSource source = new DOMSource(doc);<newline46mondego>transformer.transform(source, result);<newline46mondego><newline46mondego>String xmlOutput = result.getWriter().toString();<newline46mondego>System.out.println(xmlOutput);<newline46mondego>"
"3052splitHere46","3248578splitHere46","null"
"3053splitHere46","3248578splitHere46","EntityManager"
"3054splitHere46","3248578splitHere46","public class LoginServlet extends HttpServlet {<newline46mondego>    @PersistenceUnit(unitName=<doubleQuotes46>EmployeeService<doubleQuotes46>)<newline46mondego>    EntityManagerFactory emf;<newline46mondego><newline46mondego>    protected void doPost(HttpServletRequest request, HttpServletResponse response) {<newline46mondego>        String userId = request.getParameter(<doubleQuotes46>user<doubleQuotes46>);<newline46mondego>        // check valid user<newline46mondego>        EntityManager em = emf.createEntityManager();<newline46mondego>        try {<newline46mondego>            User user = em.find(User.class, userId);<newline46mondego>            if (user == null) {<newline46mondego>                // return error page<newline46mondego>                // ...<newline46mondego>            }<newline46mondego>        } finally {<newline46mondego>            em.close();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3055splitHere46","3248578splitHere46","EntityManager"
"3056splitHere46","3248578splitHere46","@PersistenceContext(unitName = <doubleQuotes46>main<doubleQuotes46>)<newline46mondego>private EntityManager em;<newline46mondego>"
"3057splitHere46","3248637splitHere46","musicTable.addAll(entrainment.getMusic());<newline46mondego>"
"3058splitHere46","3248647splitHere46","generation"
"3059splitHere46","3248700splitHere46","myvalidate()"
"3060splitHere46","3248700splitHere46","INPUT"
"3061splitHere46","3248728splitHere46","field = field.replaceAll(<doubleQuotes46>^\<doubleQuotes46>|\<doubleQuotes46>$<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"3062splitHere46","3248908splitHere46","RedirectView"
"3063splitHere46","3248952splitHere46","putInt"
"3064splitHere46","3248952splitHere46","putString"
"3065splitHere46","3248969splitHere46","syncrhonized(this)"
"3066splitHere46","3249002splitHere46","@Override<newline46mondego>public void addMember(Canvas component) {<newline46mondego>    throw new UnsupportedOperationException(<doubleQuotes46>Do not call this method. Call addMember(Rect component) instead<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"3067splitHere46","3249002splitHere46","@Override<newline46mondego>public void addMember(Canvas component) {<newline46mondego>    if (!Rect.class.isInstance(component)) {<newline46mondego>        throw new IlligalArgumentException(<doubleQuotes46>Only Rect is accepted. Sorry...<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3068splitHere46","3249004splitHere46","String namecount = <doubleQuotes46>SELECT count(*) FROM People WHERE LOWER(NAME) LIKE :pname <doubleQuotes46>;<newline46mondego>String finalName= <doubleQuotes46>%<doubleQuotes46> + nameParam.toLowerCase().trim() + <doubleQuotes46>%<doubleQuotes46>;<newline46mondego><newline46mondego>MapSqlParameterSource namedParams= new MapSqlParameterSource();<newline46mondego>namedParams.addValue(<doubleQuotes46>pname<doubleQuotes46>, finalName);<newline46mondego><newline46mondego>int count= this.namedParamJdbcTemplate.queryForInt(namecount, namedParams);<newline46mondego>"
"3069splitHere46","3249054splitHere46","NumberFormat numberFormat = NumberFormat.getInstance();<newline46mondego>numberFormat.setMinimumIntegerDigits(5);<newline46mondego>numberFormat.setMaximumIntegerDigits(5);<newline46mondego>numberFormat.setGroupingUsed(false);<newline46mondego>String numberString = numberFormat.format((long) 7789);<newline46mondego><newline46mondego>System.out.println(numberString);  //<doubleQuotes46>07789<doubleQuotes46><newline46mondego>"
"3070splitHere46","3249153splitHere46","File file = new File(<doubleQuotes46>/test.txt<doubleQuotes46>);<newline46mondego>FileWriter writer = null;<newline46mondego>try {<newline46mondego>    writer = new FileWriter(file);<newline46mondego>    writer.write(<doubleQuotes46>test<doubleQuotes46>);<newline46mondego>} finally {<newline46mondego>    if (writer != null) writer.close();<newline46mondego>}<newline46mondego>Desktop.getDesktop().open(file);<newline46mondego>"
"3071splitHere46","3249153splitHere46","Writer"
"3072splitHere46","3249153splitHere46","FileWriter"
"3073splitHere46","3249153splitHere46","BufferedWriter"
"3074splitHere46","3249153splitHere46","BufferedWriter"
"3075splitHere46","3249153splitHere46","Desktop#open()"
"3076splitHere46","3249153splitHere46","try"
"3077splitHere46","3249153splitHere46","finally"
"3078splitHere46","3249328splitHere46","ManagementFactory.getPlatformMBeanServer().registerMBean(...)"
"3079splitHere46","3249381splitHere46","<reporting><newline46mondego>     <plugins><newline46mondego>       <plugin><newline46mondego>        <groupId>org.codehaus.mojo</groupId><newline46mondego>        <artifactId>findbugs-maven-plugin</artifactId><newline46mondego>        <version>2.0.1</version><newline46mondego>        <configuration><newline46mondego>          <targetJdk>1.5</targetJdk><newline46mondego>        </configuration><newline46mondego>       </plugin><newline46mondego>     </plugins><newline46mondego>   </reporting><newline46mondego>"
"3080splitHere46","3249678splitHere46","int exStyle = OS.GetWindowLong(tree.handle, OS.GWL_EXSTYLE);<newline46mondego>exStyle |= OS.WS_EX_LEFTSCROLLBAR;<newline46mondego>OS.SetWindowLong(tree.handle, OS.GWL_EXSTYLE, exStyle);<newline46mondego>"
"3081splitHere46","3249783splitHere46","<persistence  xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/persistence<doubleQuotes46> xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46> xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/persistence   http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd<doubleQuotes46> version=<doubleQuotes46>1.0<doubleQuotes46>><newline46mondego>    <persistence-unit name=<doubleQuotes46>example<doubleQuotes46>>  <newline46mondego>        <provider>org.hibernate.ejb.HibernatePersistence</provider>  <newline46mondego>        <jta-data-source>java:/jdbc/example</jta-data-source>  <newline46mondego>        <properties>  <newline46mondego>            <property name=<doubleQuotes46>hibernate.hbm2ddl.auto<doubleQuotes46> value=<doubleQuotes46>update<doubleQuotes46>/>  <newline46mondego>            <property name=<doubleQuotes46>hibernate.dialect<doubleQuotes46> value=<doubleQuotes46>org.hibernate.dialect.Oracle9Dialect<doubleQuotes46>/>  <newline46mondego>            <property name=<doubleQuotes46>jboss.entity.manager.jndi.name<doubleQuotes46> value=<doubleQuotes46>java:/example<doubleQuotes46>/>  <newline46mondego>            <property name=<doubleQuotes46>jboss.entity.manager.factory.jndi.name<doubleQuotes46> value=<doubleQuotes46>java:/example<doubleQuotes46>/>  <newline46mondego>        </properties>  <newline46mondego>    </persistence-unit>  <newline46mondego></persistence>`<newline46mondego>"
"3082splitHere46","3250257splitHere46","this"
"3083splitHere46","3250257splitHere46","void"
"3084splitHere46","3250400splitHere46","<doubleQuotes46>tell application \<doubleQuotes46>Terminal\<doubleQuotes46> to do shell script \<doubleQuotes46>/System/Library/CoreServices/Menu\\\\ Extras/user.menu/Contents/Resources/CGSession -suspend\<doubleQuotes46> <doubleQuotes46><newline46mondego>"
"3085splitHere46","3250444splitHere46","String dna[] = {<doubleQuotes46>ATCTA<doubleQuotes46>};<newline46mondego> int i = 0;<newline46mondego> dna[i] = dna[i].replace('T', 'C');<newline46mondego> System.out.println(dna[i]);<newline46mondego>"
"3086splitHere46","3250444splitHere46","dna[i].replace('T', 'C');"
"3087splitHere46","3250444splitHere46","dna[i]"
"3088splitHere46","3250444splitHere46","replace"
"3089splitHere46","3250444splitHere46","replace"
"3090splitHere46","3250444splitHere46","dna[i] = dna[i].replace('T', 'C').replace('A', 'S');<newline46mondego>"
"3091splitHere46","3250464splitHere46","sun.misc.Signal"
"3092splitHere46","3250464splitHere46","sun.misc.SignalHandler"
"3093splitHere46","3250464splitHere46","SignalHandler handler = new SignalHandler () {<newline46mondego>    public void handle(Signal sig) {<newline46mondego>        ... // handle SIGINT<newline46mondego>    }<newline46mondego>};<newline46mondego>Signal.handle(new Signal(<doubleQuotes46>INT<doubleQuotes46>), handler);<newline46mondego>"
"3094splitHere46","3250493splitHere46","handleEvent()"
"3095splitHere46","3250564splitHere46","javac"
"3096splitHere46","3250564splitHere46","javac -target 1.5 tileGen.java<newline46mondego>"
"3097splitHere46","3250893splitHere46","Map<K,V>"
"3098splitHere46","3250893splitHere46","K"
"3099splitHere46","3250893splitHere46","V"
"3100splitHere46","3250893splitHere46","Map"
"3101splitHere46","3250893splitHere46","Map"
"3102splitHere46","3250893splitHere46","Map<K1,Map<K2,V2>>"
"3103splitHere46","3250893splitHere46","Map<X,Y,Z>"
"3104splitHere46","3250893splitHere46","Map< Pair<L,R>, Map<K,V> >"
"3105splitHere46","3250893splitHere46","Pair<L,R>"
"3106splitHere46","3250893splitHere46","Pair<L,R>"
"3107splitHere46","3250893splitHere46","Pair<String, String>"
"3108splitHere46","3250893splitHere46","HashMap"
"3109splitHere46","3250908splitHere46","java.util.Calendar"
"3110splitHere46","3251037splitHere46","public void doStuff(final String userID) {<newline46mondego>   ...<newline46mondego>"
"3111splitHere46","3251093splitHere46","if (useWeavedCode)"
"3112splitHere46","3251097splitHere46","w0.gif"
"3113splitHere46","3251097splitHere46","1"
"3114splitHere46","3251223splitHere46","boolean shouldDrawImage = true;<newline46mondego><newline46mondego> void paint(Graphics g) {<newline46mondego>    if (shouldDrawImage) {<newline46mondego>        g.drawImage(...);<newline46mondego>    }<newline46mondego> }<newline46mondego>"
"3115splitHere46","3251223splitHere46","false"
"3116splitHere46","3251223splitHere46","repaint()"
"3117splitHere46","3251459splitHere46","EntityManager"
"3118splitHere46","3251459splitHere46","EntityManagerFactory"
"3119splitHere46","3251459splitHere46","EntityManager"
"3120splitHere46","3251459splitHere46","EntityManager"
"3121splitHere46","3251459splitHere46","Version"
"3122splitHere46","3251459splitHere46","EntityManager.lock()"
"3123splitHere46","3251459splitHere46","eclipselink.pessimistic-lock"
"3124splitHere46","3251459splitHere46","// eclipselink.pessimistic-lock<newline46mondego>Query Query = em.createQuery(<doubleQuotes46>select f from Foo f where f.bar=:bar<doubleQuotes46>);<newline46mondego>query.setParameter(<doubleQuotes46>bar<doubleQuotes46>, <doubleQuotes46>foobar<doubleQuotes46>);<newline46mondego>query.setHint(<doubleQuotes46>eclipselink.pessimistic-lock<doubleQuotes46>, <doubleQuotes46>Lock<doubleQuotes46>);<newline46mondego>query.getResultList();<newline46mondego>"
"3125splitHere46","3251630splitHere46","cols_per_group=2;<newline46mondego><newline46mondego>(total_rows*cols_per_group)*((int)(coln/cols_per_group))<newline46mondego>+(coln%cols_per_group)+cols_per_group*rown +1<newline46mondego>"
"3126splitHere46","3252077splitHere46","/bin/hadoop rs -ls '/users/jchen/*AS311.data'"
"3127splitHere46","3252123splitHere46","System.getProperty"
"3128splitHere46","3252123splitHere46","System.getProperty(<doubleQuotes46>data<doubleQuotes46>);<newline46mondego>System.getProperty(<doubleQuotes46>commit<doubleQuotes46>);<newline46mondego>"
"3129splitHere46","3252123splitHere46","java -jar post.jar arg1 arg2"
"3130splitHere46","3252167splitHere46","/"
"3131splitHere46","3252167splitHere46","router.attach(<doubleQuotes46>/{text}/{count}<doubleQuotes46>, RepeaterResource.class);<newline46mondego>"
"3132splitHere46","3252361splitHere46","(defn initial-state [input]<newline46mondego>  {:expecting nil<newline46mondego>   :blocks (mapcat #(str/split % #<doubleQuotes46>(?<=\s)|(?=\s)<doubleQuotes46>)<newline46mondego>                   (str/split input #<doubleQuotes46>(?<=(?:'|\<doubleQuotes46>|\\))|(?=(?:'|\<doubleQuotes46>|\\))<doubleQuotes46>))<newline46mondego>   :arg-blocks []})<newline46mondego><newline46mondego>(defn arg-parser-step [s]<newline46mondego>  (if-let [bs (seq (:blocks s))]<newline46mondego>    (if-let [d (:expecting s)]<newline46mondego>      (loop [bs bs]<newline46mondego>        (cond (= (first bs) d)<newline46mondego>              [nil (-> s<newline46mondego>                       (assoc-in [:expecting] nil)<newline46mondego>                       (update-in [:blocks] next))]<newline46mondego>              (= (first bs) <doubleQuotes46>\\<doubleQuotes46>)<newline46mondego>              [nil (-> s<newline46mondego>                       (update-in [:blocks] nnext)<newline46mondego>                       (update-in [:arg-blocks]<newline46mondego>                                  #(conj (pop %)<newline46mondego>                                         (conj (peek %) (second bs)))))]<newline46mondego>              :else<newline46mondego>              [nil (-> s<newline46mondego>                       (update-in [:blocks] next)<newline46mondego>                       (update-in [:arg-blocks]<newline46mondego>                                  #(conj (pop %) (conj (peek %) (first bs)))))]))<newline46mondego>      (cond (#{<doubleQuotes46>\<doubleQuotes46><doubleQuotes46> <doubleQuotes46>'<doubleQuotes46>} (first bs))<newline46mondego>            [nil (-> s<newline46mondego>                     (assoc-in [:expecting] (first bs))<newline46mondego>                     (update-in [:blocks] next)<newline46mondego>                     (update-in [:arg-blocks] conj []))]<newline46mondego>            (str/blank? (first bs))<newline46mondego>            [nil (-> s (update-in [:blocks] next))]<newline46mondego>            :else<newline46mondego>            [nil (-> s<newline46mondego>                     (update-in [:blocks] next)<newline46mondego>                     (update-in [:arg-blocks] conj [(.trim (first bs))]))]))<newline46mondego>    [(->> (:arg-blocks s)<newline46mondego>          (map (partial apply str)))<newline46mondego>     nil]))<newline46mondego><newline46mondego>(defn split-args [input]<newline46mondego>  (loop [s (initial-state input)]<newline46mondego>    (let [[result new-s] (arg-parser-step s)]<newline46mondego>      (if result result (recur new-s)))))<newline46mondego>"
"3133splitHere46","3252361splitHere46","true"
"3134splitHere46","3252361splitHere46","(= (split-args <doubleQuotes46>asdf 'asdf \<doubleQuotes46> asdf' \<doubleQuotes46>asdf ' asdf\<doubleQuotes46> asdf<doubleQuotes46>)<newline46mondego>   '(<doubleQuotes46>asdf<doubleQuotes46> <doubleQuotes46>asdf \<doubleQuotes46> asdf<doubleQuotes46> <doubleQuotes46>asdf ' asdf<doubleQuotes46> <doubleQuotes46>asdf<doubleQuotes46>))<newline46mondego>"
"3135splitHere46","3252361splitHere46","(= (split-args <doubleQuotes46>asdf asdf '  asdf \<doubleQuotes46> asdf ' \<doubleQuotes46> foo bar ' baz \<doubleQuotes46> \<doubleQuotes46> foo bar \\\<doubleQuotes46> baz \<doubleQuotes46><doubleQuotes46>)<newline46mondego>   '(<doubleQuotes46>asdf<doubleQuotes46> <doubleQuotes46>asdf<doubleQuotes46> <doubleQuotes46>  asdf \<doubleQuotes46> asdf <doubleQuotes46> <doubleQuotes46> foo bar ' baz <doubleQuotes46> <doubleQuotes46> foo bar \<doubleQuotes46> baz <doubleQuotes46>))<newline46mondego>"
"3136splitHere46","3252399splitHere46","2<newline46mondego>1 +---------+ 2<newline46mondego>  |\        |<newline46mondego>  | -\      |<newline46mondego>3 |   -\5   | 2<newline46mondego>  |     -\  |<newline46mondego>  |       -\|<newline46mondego>3 +---------+ 4<newline46mondego>        4<newline46mondego>"
"3137splitHere46","3252399splitHere46","public Matrix floyd() {<newline46mondego>  Matrix m = new Matrix(numVertices, numVertices, Integer.MAX_VALUE);<newline46mondego>  for (int i = 1; i<=numVertices; i++) {<newline46mondego>    EdgeNode edge = edges[i];<newline46mondego>    while (edge != null) {<newline46mondego>      m.setData(i, edge.getY(), edge.getWeight());<newline46mondego>      edge = edge.getNext();<newline46mondego>    }<newline46mondego>    m.setData(i, i, 0);<newline46mondego>  }<newline46mondego>  for (int i = 1; i <= numVertices; i++) {<newline46mondego>    for (int j = 1; j <= numVertices; j++) {<newline46mondego>      for (int k = 1; k <= numVertices; k++) {<newline46mondego>        if (m.getData(i, j) < Integer.MAX_VALUE && m.getData(i, k) < Integer.MAX_VALUE) {<newline46mondego>          int through = m.getData(i, j) + m.getData(i, k);<newline46mondego>          if (through < m.getData(j, k)) {<newline46mondego>            m.setData(j, k, through);<newline46mondego>          }<newline46mondego>        }<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>  return m;<newline46mondego>}<newline46mondego>"
"3138splitHere46","3252399splitHere46","Integer.MAX_VALUE"
"3139splitHere46","3252399splitHere46","Integer.MAX_VALUE"
"3140splitHere46","3252399splitHere46","[ 0 2 3 5 ]<newline46mondego>[ 2 0 5 3 ]<newline46mondego>[ 3 5 0 4 ]<newline46mondego>[ 5 3 4 0 ]<newline46mondego>"
"3141splitHere46","3252399splitHere46","[ 4 2 3 5 ]<newline46mondego>[ 2 4 5 3 ]<newline46mondego>[ 3 5 6 4 ]<newline46mondego>[ 5 3 4 6 ]<newline46mondego>"
"3142splitHere46","3252399splitHere46","Integer.MAX_VALUE"
"3143splitHere46","3252531splitHere46","Vector<Real> vec = new Vector<Real>();<newline46mondego>"
"3144splitHere46","3252531splitHere46","vec.add(new Animal());<newline46mondego>"
"3145splitHere46","3252561splitHere46","!path /path/to/MyProductFixture.jar<newline46mondego>!path /path/to/my/product/*<newline46mondego>"
"3146splitHere46","3252561splitHere46","!path /path/to/MyProduct.jar<newline46mondego>"
"3147splitHere46","3253171splitHere46","Pattern"
"3148splitHere46","3253171splitHere46","<"
"3149splitHere46","3253171splitHere46","<"
"3150splitHere46","3253171splitHere46",".++"
"3151splitHere46","3253171splitHere46","em>"
"3152splitHere46","3253171splitHere46",">"
"3153splitHere46","3253171splitHere46",".++"
"3154splitHere46","3253171splitHere46",".+"
"3155splitHere46","3253171splitHere46",".++"
"3156splitHere46","3253171splitHere46",".+"
"3157splitHere46","3253171splitHere46","em"
"3158splitHere46","3253171splitHere46",">"
"3159splitHere46","3253171splitHere46",">"
"3160splitHere46","3253171splitHere46","e"
"3161splitHere46","3253171splitHere46",">"
"3162splitHere46","3253171splitHere46","m"
"3163splitHere46","3253171splitHere46","em"
"3164splitHere46","3253171splitHere46",">"
"3165splitHere46","3253171splitHere46",">"
"3166splitHere46","3253307splitHere46","abstract class BrokerAbstract<T> {<newline46mondego>   private int errCode;<newline46mondego>   private String errMessage;<newline46mondego><newline46mondego>   abstract public boolean login(String user, String pass, Map<String,Object> options);<newline46mondego>   abstract public int getStatus(Map<String,Object> options);<newline46mondego>   abstract public boolean sendRequest(Map<String,Object> options);<newline46mondego>   abstract public T getData(Map<String,Object> options);<newline46mondego>   abstract public boolean logOff(Map<String,Object> options);<newline46mondego><newline46mondego>   protected void setError(int code, String message) {<newline46mondego>      this.errCode = code;<newline46mondego>      this.errMessage = message;<newline46mondego>   }<newline46mondego><newline46mondego>   public int getErrorCode() { return this.errCode; }<newline46mondego>   public String getErrorMessage() { return this.errMessage; }<newline46mondego>}<newline46mondego>"
"3167splitHere46","3253307splitHere46","class Broker1 extends BrokerAbstract<Object> {<newline46mondego>   private OriginalBroker1 original;       <newline46mondego><newline46mondego>   public boolean login(String user, String pass, Map<String,Object> options) {<newline46mondego>      return original.doLogin(user, pass);  // ignore options<newline46mondego>   }<newline46mondego>   public boolean login(String user, String pass) {<newline46mondego>      return login(user, pass, null);  // third parameters will be ignored<newline46mondego>   }<newline46mondego>   public int getStatus(Map<String,Object> options) { /*...*/ return 0; }<newline46mondego>   public boolean sendRequest(Map<String,Object> options) { /*...*/ return false; }<newline46mondego>   public Object getData(Map<String,Object> options) { <newline46mondego>      return original.getData();  // OriginalBroker1.getData():Object<newline46mondego>   }<newline46mondego>   public boolean logOff(Map<String,Object> options) {<newline46mondego>      return original.doLogout((boolean) options.get(<doubleQuotes46>clearSession<doubleQuotes46>));<newline46mondego>   }<newline46mondego>   public boolean logoff() {<newline46mondego>      HashMap<String,Object> options = new HashMap<String,Object>();<newline46mondego>      options.put(<doubleQuotes46>clearSession<doubleQuotes46>, true);<newline46mondego>      return logoff(options);   // proxy to original method<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3168splitHere46","3253307splitHere46","class Broker2 extends BrokerAbstract<Integer> {<newline46mondego>   private OriginalBroker2 original;       <newline46mondego><newline46mondego>   public boolean login(String user, String pass, Map<String,Object> options) {<newline46mondego>      int code = original.doLogin(user, pass, (String) options.get(<doubleQuotes46>sessionId<doubleQuotes46>));<newline46mondego>      if (0 != code) {<newline46mondego>          setError(code, <doubleQuotes46>Custom error message<doubleQuotes46>); // could use enum here for messages...<newline46mondego>          return false;<newline46mondego>      } else {<newline46mondego>          return true;<newline46mondego>      }<newline46mondego>   }<newline46mondego>   public boolean login(String user, String pass, String sessionId) {<newline46mondego>      HashMap<String,Object> options = new HashMap<String,Object>();<newline46mondego>      options.put(<doubleQuotes46>sessionId<doubleQuotes46>, sessionId);<newline46mondego>      return login(user, pass, options);<newline46mondego>   }<newline46mondego>   public int getStatus(Map<String,Object> options) { /*...*/ return 0; }<newline46mondego>   public boolean sendRequest(Map<String,Object> options) { /*...*/ return true; }<newline46mondego>   public Integer getData(Map<String,Object> options) { <newline46mondego>      return original.getData(options.get(<doubleQuotes46>key<doubleQuotes46>));  // OriginalBroker2.getData(key:String):int<newline46mondego>   }<newline46mondego>   public boolean logOff(Map<String,Object> options) {<newline46mondego>      return original.doLogout();<newline46mondego>   }<newline46mondego>   public boolean logoff() {<newline46mondego>      return logoff(null);   // ignore third parameter<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3169splitHere46","3253307splitHere46","abstract public boolean login(String...args);<newline46mondego>"
"3170splitHere46","3253307splitHere46","abstract class A {<newline46mondego>   abstract public boolean login(String...args);    <newline46mondego>}<newline46mondego>class B extends A {<newline46mondego>   public boolean login(String...args) { return this.login(args[0], args[1]); }<newline46mondego>   public boolean login(String user, String pass) { return original.login(user,pass); }<newline46mondego>}<newline46mondego><newline46mondego>class C {<newline46mondego>   public void login() {<newline46mondego>      B b = new B();<newline46mondego>      b.login(<doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>secret<doubleQuotes46>);<newline46mondego>      // or<newline46mondego>      b.login(new String[] {<doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>secret<doubleQuotes46>});<newline46mondego>      // or !<newline46mondego>      b.login(<doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>secret<doubleQuotes46>, <doubleQuotes46>sessionId<doubleQuotes46>);  // will ignore third, but otherwise would still work...<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3171splitHere46","3253318splitHere46","add(invOne, BorderLayout.CENTER);"
"3172splitHere46","3253438splitHere46","StringBuilder sb = new StringBuilder(url);<newline46mondego>url.indexOf(<doubleQuotes46>?<doubleQuotes46>) > -1 ? sb.append(<doubleQuotes46>&<doubleQuotes46>) : sb.append(<doubleQuotes46>?<doubleQuotes46>);<newline46mondego><newline46mondego>// loop over your paramaters and append them like in Noel M's example<newline46mondego><newline46mondego>url = sb.toString();<newline46mondego>"
"3173splitHere46","3253602splitHere46","edited"
"3174splitHere46","3253731splitHere46","in = {1,3,2,5}; pre = {2,1,5,3};<newline46mondego>"
"3175splitHere46","3253731splitHere46","pre"
"3176splitHere46","3253731splitHere46","2"
"3177splitHere46","3253731splitHere46","in"
"3178splitHere46","3253731splitHere46","{5}"
"3179splitHere46","3253731splitHere46","2<newline46mondego>     / \<newline46mondego>    /   \<newline46mondego>  {1,3} {5}<newline46mondego>"
"3180splitHere46","3253731splitHere46","3"
"3181splitHere46","3253731splitHere46","pre"
"3182splitHere46","3253731splitHere46","{2,1,3,5}"
"3183splitHere46","3253731splitHere46","{2,3,1,5}"
"3184splitHere46","3253731splitHere46","{2,1,5,3}"
"3185splitHere46","3253731splitHere46","in[]"
"3186splitHere46","3253731splitHere46","pre[]"
"3187splitHere46","3253936splitHere46","public class MultiSerialExecutor {<newline46mondego>    private final ExecutorService executor;<newline46mondego><newline46mondego>    public MultiSerialExecutor(int maxNumThreads) {<newline46mondego>        executor = Executors.newFixedThreadPool(maxNumThreads);<newline46mondego>    }<newline46mondego><newline46mondego>    public void addTaskSequence(List<Runnable> tasks) {<newline46mondego>        executor.execute(new TaskChain(tasks));<newline46mondego>    }<newline46mondego><newline46mondego>    private void shutdown() {<newline46mondego>        executor.shutdown();<newline46mondego>    }<newline46mondego><newline46mondego>    private class TaskChain implements Runnable {<newline46mondego>        private List<Runnable> seq;<newline46mondego>        private int ind;<newline46mondego><newline46mondego>        public TaskChain(List<Runnable> seq) {<newline46mondego>            this.seq = seq;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego>            seq.get(ind++).run(); //NOTE: No special error handling<newline46mondego>            if (ind < seq.size())<newline46mondego>                executor.execute(this);<newline46mondego>        }       <newline46mondego>    }<newline46mondego>"
"3188splitHere46","3254184splitHere46","setViewPreferences"
"3189splitHere46","3254184splitHere46","writer.setViewerPreferences(PdfWriter.FitWindow <newline46mondego>  | PdfWriter.PageModeUseThumbs);<newline46mondego>"
"3190splitHere46","3254184splitHere46","PdfWriter.HideToolbar"
"3191splitHere46","3254184splitHere46","PdfWriter.PageModeFullScreen"
"3192splitHere46","3254184splitHere46","|"
"3193splitHere46","3254434splitHere46","org.eclipse.team.internal.ccvs.core.filehistory.CVSFileRevision"
"3194splitHere46","3254434splitHere46","if (next instanceof CVSFileRevision) {<newline46mondego>   resources.add(((CVSFileRevision)next).getCVSRemoteFile());<newline46mondego>}<newline46mondego>"
"3195splitHere46","3254453splitHere46","OutOfMemoryError"
"3196splitHere46","3254453splitHere46","PipeInputStream"
"3197splitHere46","3254453splitHere46","PipeOutputStream"
"3198splitHere46","3254453splitHere46","pipeSize"
"3199splitHere46","3254489splitHere46","remove(..)"
"3200splitHere46","3254489splitHere46","/**<newline46mondego> * Transfers and converts all entries from <code>map1</code> to <newline46mondego> * <code>map2</code>.  Specifically, the {@link Foo} objects of the <newline46mondego> * inner maps will be converted to integer arrays via {@link Foo#toArray}.<newline46mondego> * <newline46mondego> * @param map1 Map to be emptied.<newline46mondego> * @param map2 Receptacle for the converted entries.<newline46mondego> */<newline46mondego>private static void transfer(Map<String, Map<Object, Foo>> map1<newline46mondego>        , Map<String, Map<Object, int[]>> map2) {<newline46mondego><newline46mondego>    final Iterator<Entry<String, Map<Object, Foo>>> mapIt<newline46mondego>        = map1.entrySet().iterator();<newline46mondego>    while (mapIt.hasNext()) {<newline46mondego>        final Entry<String, Map<Object, Foo>> mapEntry = mapIt.next();<newline46mondego>        mapIt.remove();<newline46mondego>        final Map<Object, int[]> submap = new HashMap<Object,int[]>();<newline46mondego>        map2.put(mapEntry.getKey(), submap);<newline46mondego>        final Iterator<Entry<Object,Foo>> fooIt <newline46mondego>            = mapEntry.getValue().entrySet().iterator();<newline46mondego>        while (fooIt.hasNext()) {<newline46mondego>            final Entry<Object,Foo> fooEntry = fooIt.next();<newline46mondego>            fooIt.remove();<newline46mondego>            submap.put(fooEntry.getKey(), fooEntry.getValue().toArray());<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3201splitHere46","3254519splitHere46","/Because it already exists/<newline46mondego>"
"3202splitHere46","3254778splitHere46","kCFNumberSInt64Type"
"3203splitHere46","3254778splitHere46","CFNumberGetValue"
"3204splitHere46","3254778splitHere46","void*"
"3205splitHere46","3254778splitHere46","public int getInt() {<newline46mondego>    int i;<newline46mondego>    if (CFLib.INSTANCE.CFNumberGetValue(this, kCFNumberSInt32Type, (IntPtr)i))<newline46mondego>        return i;<newline46mondego>    return -1;<newline46mondego>}<newline46mondego>"
"3206splitHere46","3254778splitHere46","this"
"3207splitHere46","3254779splitHere46","ClassNotFoundException"
"3208splitHere46","3254779splitHere46","Class.forName()"
"3209splitHere46","3254779splitHere46","NoClassDefFoundError"
"3210splitHere46","3254779splitHere46","NoClassDefFoundError"
"3211splitHere46","3254779splitHere46","ClassNotFoundException"
"3212splitHere46","3254849splitHere46","private UUID id;<newline46mondego><newline46mondego>@Id<newline46mondego>@Column(name=<doubleQuotes46>id<doubleQuotes46>)<newline46mondego>public String getId()<newline46mondego>{<newline46mondego>    return id.toString();<newline46mondego>}<newline46mondego><newline46mondego>public void setId(String value)<newline46mondego>{<newline46mondego>    id = UUID.fromString(value);<newline46mondego>}<newline46mondego><newline46mondego>public UUID idAsUUID()<newline46mondego>{<newline46mondego>    return id;<newline46mondego>}<newline46mondego>"
"3213splitHere46","3255118splitHere46","double"
"3214splitHere46","3255120splitHere46","UIViewRoot#getViewId()"
"3215splitHere46","3255120splitHere46","String viewId = facesContext.getViewRoot().getViewId();<newline46mondego>"
"3216splitHere46","3255120splitHere46","#{view.viewId}<newline46mondego>"
"3217splitHere46","3255120splitHere46","<h:link outcome>"
"3218splitHere46","3255120splitHere46","<h:button outcome>"
"3219splitHere46","3255120splitHere46","HttpServletRequest#getRequestURI()"
"3220splitHere46","3255120splitHere46","String uri = ((HttpServletRequest) externalContext.getRequest()).getRequestURI();<newline46mondego>"
"3221splitHere46","3255120splitHere46","#{request.requestURI}<newline46mondego>"
"3222splitHere46","3255120splitHere46","<h:outputLink value>"
"3223splitHere46","3255120splitHere46","<a href>"
"3224splitHere46","3255180splitHere46","inverse"
"3225splitHere46","3255180splitHere46","many-to-one"
"3226splitHere46","3255180splitHere46","invoice"
"3227splitHere46","3255340splitHere46","static Set<String> names = new TreeSet<String>();<newline46mondego><newline46mondego> public static void addToNames(String aTemp) {<newline46mondego>   names.add(aTemp);<newline46mondego> }<newline46mondego>"
"3228splitHere46","3255340splitHere46","static Set<String> names = new TreeSet<String>();<newline46mondego><newline46mondego> public static void addToNames(String[] manyNames) {<newline46mondego>   for(String name:manyNames)<newline46mondego>     names.add(name);<newline46mondego> }<newline46mondego>"
"3229splitHere46","3255340splitHere46","NullPointerException"
"3230splitHere46","3255340splitHere46","names"
"3231splitHere46","3255340splitHere46","public static void main(String[] args) {<newline46mondego>   // assuming names is declared and constructed like shown above<newline46mondego>   String[] name1 = new String[]{<doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>Jose<doubleQuotes46>, <doubleQuotes46>Jeremy<doubleQuotes46>, <doubleQuotes46>Alice<doubleQuotes46>, <doubleQuotes46>Patrick<doubleQuotes46>};<newline46mondego>   String[] name2 = new String[]{<doubleQuotes46>Alan<doubleQuotes46>, <doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>Jeremy<doubleQuotes46>, <doubleQuotes46>Helen<doubleQuotes46>, <doubleQuotes46>Alexi<doubleQuotes46>};<newline46mondego>   String[] name3 = new String[]{<doubleQuotes46>Adel<doubleQuotes46>, <doubleQuotes46>Aaron<doubleQuotes46>, <doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>James<doubleQuotes46>, <doubleQuotes46>Alice<doubleQuotes46>};<newline46mondego><newline46mondego>   addToNames(name1);<newline46mondego>   addToNames(name2);<newline46mondego>   addToNames(name3);<newline46mondego><newline46mondego>   // Prove that the set has no duplicates and is ordered:<newline46mondego>   for(String name: names)<newline46mondego>     System.out.println(name);<newline46mondego>}<newline46mondego>"
"3232splitHere46","3255341splitHere46","<action name=<doubleQuotes46>*Register<doubleQuotes46> method=<doubleQuotes46>{1}<doubleQuotes46> class=<doubleQuotes46>nirmal.RegisterAction<doubleQuotes46>><newline46mondego>"
"3233splitHere46","3255444splitHere46","this.getParent().dispatchEvent(originalKeyEvent);<newline46mondego>"
"3234splitHere46","3255479splitHere46","remove()"
"3235splitHere46","3255479splitHere46","Iterator"
"3236splitHere46","3255479splitHere46","Hashtable"
"3237splitHere46","3255479splitHere46","Hashtable<String, String> map = new Hashtable<String, String>();<newline46mondego>map.put(<doubleQuotes46>one<doubleQuotes46>, <doubleQuotes46>een<doubleQuotes46>);<newline46mondego>map.put(<doubleQuotes46>two<doubleQuotes46>, <doubleQuotes46>twee<doubleQuotes46>);<newline46mondego>map.put(<doubleQuotes46>three<doubleQuotes46>, <doubleQuotes46>drie<doubleQuotes46>);<newline46mondego><newline46mondego>for (Iterator<Map.Entry<String, String>> i = map.entrySet().iterator(); i.hasNext(); ) {<newline46mondego>    Map.Entry<String, String> entry = i.next();<newline46mondego><newline46mondego>    if (<doubleQuotes46>two<doubleQuotes46>.equals(entry.getKey())) {<newline46mondego>        // Removes entry from Hashtable; note, this is not the Hashtable.remove() method<newline46mondego>        // but the Iterator.remove() method<newline46mondego>        i.remove();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>System.out.println(map);<newline46mondego>"
"3238splitHere46","3255479splitHere46","HashMap"
"3239splitHere46","3255479splitHere46","Hashtable"
"3240splitHere46","3255482splitHere46","static"
"3241splitHere46","3255482splitHere46","Parent.test()"
"3242splitHere46","3255482splitHere46","Redefine.test()"
"3243splitHere46","3255731splitHere46","DateFormat df = new SimpleDateFormat(<doubleQuotes46>E MMM dd HH:mm:ss z yyyy<doubleQuotes46>);<newline46mondego>"
"3244splitHere46","3255765splitHere46","class"
"3245splitHere46","3255765splitHere46","from Cat cat where cat.class = DomesticCat<newline46mondego>"
"3246splitHere46","3255765splitHere46","... where class=Parent"
"3247splitHere46","3255765splitHere46","Child"
"3248splitHere46","3255794splitHere46","ArrayAdapter"
"3249splitHere46","3255794splitHere46","getView()"
"3250splitHere46","3255794splitHere46","class CustomArrayAdapter extends ArrayAdapter {<newline46mondego>    CustomArrayAdapter() {<newline46mondego>        super(YourActivity.this, R.layout.message);<newline46mondego>    }<newline46mondego><newline46mondego>    public View getView(int position, View convertView,<newline46mondego>                                            ViewGroup parent) {<newline46mondego>        View row=convertView;<newline46mondego><newline46mondego>        if (row==null) {                                                    <newline46mondego>            LayoutInflater inflater=getLayoutInflater();<newline46mondego><newline46mondego>            row=inflater.inflate(R.layout.message, parent, false);<newline46mondego>        }<newline46mondego><newline46mondego>        // e.g. if you have a TextView called in your row with ID 'label'<newline46mondego>        TextView label=(TextView)row.findViewById(R.id.label);<newline46mondego>        label.setText(items[position]);<newline46mondego><newline46mondego>        // check the state of the row maybe using the variable 'position'<newline46mondego>        if( I do not actually know whats your criteria to change style ){<newline46mondego>            label.setTextColor(blablabla);<newline46mondego>        }<newline46mondego><newline46mondego>        return(row);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3251splitHere46","3255989splitHere46","-XX:+UseParallelGC"
"3252splitHere46","3256026splitHere46","String termQueryString = <doubleQuotes46>title:\<doubleQuotes46>hello world\<doubleQuotes46><doubleQuotes46>;<newline46mondego>Query termQuery = parser.parse(termQueryString);<newline46mondego><newline46mondego>Query pageQueryRange = NumericRangeQuery.newIntRange(<doubleQuotes46>page_count<doubleQuotes46>, 10, 20, true, true);<newline46mondego><newline46mondego>Query query = termQuery.combine(new Query[]{termQuery, pageQueryRange});<newline46mondego>"
"3253splitHere46","3256066splitHere46","HTTPClient"
"3254splitHere46","3256197splitHere46","java.io"
"3255splitHere46","3256197splitHere46","extends InputStream"
"3256splitHere46","3256197splitHere46","DataInputStream"
"3257splitHere46","3256197splitHere46","Reader"
"3258splitHere46","3256197splitHere46","InputStream"
"3259splitHere46","3256197splitHere46","read()"
"3260splitHere46","3256197splitHere46","${"
"3261splitHere46","3256197splitHere46","}"
"3262splitHere46","3256197splitHere46","FormattedInputStream"
"3263splitHere46","3256197splitHere46","new FormattedInputStream(originalInputStream)"
"3264splitHere46","3256197splitHere46","InputStream"
"3265splitHere46","3256779splitHere46","SessionFactory"
"3266splitHere46","3256779splitHere46","LocalSessionFactoryBean"
"3267splitHere46","3256779splitHere46","SessionFactory"
"3268splitHere46","3256779splitHere46","SessionFactory"
"3269splitHere46","3256779splitHere46","HibernateDaoSupport"
"3270splitHere46","3256779splitHere46","sessionFactory"
"3271splitHere46","3256779splitHere46","HibernateDaoSupport"
"3272splitHere46","3256779splitHere46","getHibernateTemplate()"
"3273splitHere46","3256779splitHere46","Session"
"3274splitHere46","3256779splitHere46","SessionFactory"
"3275splitHere46","3256779splitHere46","HibernateTemplate"
"3276splitHere46","3256779splitHere46","Session"
"3277splitHere46","3256779splitHere46","SessionFactory"
"3278splitHere46","3256779splitHere46","HibernateDaoSupport"
"3279splitHere46","3256779splitHere46","HibernateTemplate"
"3280splitHere46","3256864splitHere46","event.getValue()"
"3281splitHere46","3256864splitHere46","token.split(<doubleQuotes46>/<doubleQuotes46>)"
"3282splitHere46","3256886splitHere46","setBounds()"
"3283splitHere46","3256886splitHere46","pack()"
"3284splitHere46","3256886splitHere46","new TextArea()"
"3285splitHere46","3256886splitHere46","new JTextArea(3,20)"
"3286splitHere46","3256886splitHere46","paint()"
"3287splitHere46","3256886splitHere46","paint()"
"3288splitHere46","3256886splitHere46","super.paint()"
"3289splitHere46","3256886splitHere46","bl"
"3290splitHere46","3257113splitHere46","MessageFormat"
"3291splitHere46","3257113splitHere46","SimpleDateFormat"
"3292splitHere46","3257161splitHere46","<listener>"
"3293splitHere46","3257161splitHere46","<servlet>"
"3294splitHere46","3257452splitHere46","<s:fieldError/>"
"3295splitHere46","3257563splitHere46","response"
"3296splitHere46","3257563splitHere46","java.util.HashMap"
"3297splitHere46","3257732splitHere46","getServletContext().getRealPath(...)"
"3298splitHere46","3257732splitHere46","getServletContext().getRealPath( <doubleQuotes46>images<doubleQuotes46> )<newline46mondego>"
"3299splitHere46","3257732splitHere46","/home/tomcat/apache-tomcat-6.0.26/webapps/mywebapp/download<newline46mondego>"
"3300splitHere46","3257942splitHere46","fetchType=FetchType.LAZY"
"3301splitHere46","3257942splitHere46","Query"
"3302splitHere46","3257942splitHere46","setFirstResult(..)"
"3303splitHere46","3257942splitHere46","setMaxResults(..)"
"3304splitHere46","3258025splitHere46","java.beans.PropertyEditor"
"3305splitHere46","3258025splitHere46","MyListItem"
"3306splitHere46","3258025splitHere46","MyListItem"
"3307splitHere46","3258025splitHere46","getAsText()"
"3308splitHere46","3258025splitHere46","setAsText()"
"3309splitHere46","3258025splitHere46","PropertyEditor"
"3310splitHere46","3258025splitHere46","MyListItem"
"3311splitHere46","3258029splitHere46","public interface ISocketProtocolFactory {<newline46mondego>    ISocketProtocol buildProtocol();<newline46mondego>}<newline46mondego>"
"3312splitHere46","3258029splitHere46","SocketServer"
"3313splitHere46","3258029splitHere46","ISocketProtocolFactory"
"3314splitHere46","3258029splitHere46","ISocketProtocol"
"3315splitHere46","3258029splitHere46","ISocketProtocol"
"3316splitHere46","3258069splitHere46","Integer i = Integer.valueOf(4);<newline46mondego>Integer j = Integer.valueOf(2);<newline46mondego>Integer k = i + j;<newline46mondego>"
"3317splitHere46","3258069splitHere46","Integer k = Integer.valueOf(i.intValue() + j.intValue());<newline46mondego>"
"3318splitHere46","3258069splitHere46","for (int i=0; i<10000000; i++) { }<newline46mondego>"
"3319splitHere46","3258069splitHere46","for (Integer i=0; i<10000000; i++) { }<newline46mondego>"
"3320splitHere46","3258076splitHere46","JDialog"
"3321splitHere46","3258076splitHere46","addWindowListener"
"3322splitHere46","3258076splitHere46","windowClosing"
"3323splitHere46","3258076splitHere46","owner"
"3324splitHere46","3258076splitHere46","Window w = (Window) SwingUtilities.getAncestorOfClass(Window.class, comp);<newline46mondego>"
"3325splitHere46","3258447splitHere46","java.io.File"
"3326splitHere46","3258467splitHere46","^(.)\1*$<newline46mondego>"
"3327splitHere46","3258467splitHere46","theString.matches(<doubleQuotes46>(.)\\1*<doubleQuotes46>)<newline46mondego>"
"3328splitHere46","3258478splitHere46","label.setLabelFor( textField );<newline46mondego>"
"3329splitHere46","3258522splitHere46","public boolean waitForTextPresent(final String text, long timeout) {<newline46mondego>    Wait wait = new Wait() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public boolean until() {<newline46mondego>            try {<newline46mondego>                return CustomSelenium.this.isTextPresent(text);<newline46mondego>            } catch (SeleniumException e) {<newline46mondego>                return false;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    };<newline46mondego>    try {<newline46mondego>        wait.wait(<doubleQuotes46>Error: text <doubleQuotes46> + text + <doubleQuotes46> not present in the page<doubleQuotes46>, timeout, 50);<newline46mondego>    } catch (NumberFormatException e) {<newline46mondego>        log.error(e.getMessage(), e);<newline46mondego>        throw e;<newline46mondego>    } catch (WaitTimedOutException e) {<newline46mondego>        log.warn(e.getMessage(), e);<newline46mondego>        return false;<newline46mondego>    }<newline46mondego>    return true;<newline46mondego>}<newline46mondego>"
"3330splitHere46","3258882splitHere46","java -jar $IVYJAR \ <newline46mondego>     -settings ivysettings.xml \<newline46mondego>     -ivy ivy.xml \<newline46mondego>     -retrieve <doubleQuotes46>lib/[artifact].[ext]<doubleQuotes46><newline46mondego>"
"3331splitHere46","3258886splitHere46","public void print() {<newline46mondego>    System.out.println(this.toString());<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public String toString() {<newline46mondego>    StringBuilder display = new StringBuilder();<newline46mondego>    for(Integer current: this) {<newline46mondego>        display.append(current).append(',');<newline46mondego>    }<newline46mondego>    return display.toString().substring(0, display.length()-1);<newline46mondego>}<newline46mondego>"
"3332splitHere46","3258890splitHere46","flip()"
"3333splitHere46","3258890splitHere46","buffer.clear();<newline46mondego>channel.read(buffer);<newline46mondego>buffer.flip();<newline46mondego>// now you can read from the buffer<newline46mondego>buffer.get...<newline46mondego>"
"3334splitHere46","3258890splitHere46","nio.sucks"
"3335splitHere46","3259014splitHere46","public void doGet(HttpServletRequest request, HttpServletResponse response) {<newline46mondego>    response.sendError(HttpServletResponse.SC_NOT_FOUND);<newline46mondego>}<newline46mondego>"
"3336splitHere46","3259106splitHere46","List<Runnable> jobs = new ArrayList<Runnable>();<newline46mondego><newline46mondego>jobs.add(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        CSVWriter.createFileOfCompany(<doubleQuotes46>Random Company<doubleQuotes46>);<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>jobs.add(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        FileConverter.convertCSVToXLS(classPath + <doubleQuotes46>/Output/Random_Company.csv<doubleQuotes46>);<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>for (Runnable job : jobs) {<newline46mondego>    job.run();<newline46mondego>}<newline46mondego>"
"3337splitHere46","3259190splitHere46","<directory><newline46mondego>   <employee><newline46mondego>      <eID>123</eID><newline46mondego>      <country>CA</country><newline46mondego>   </employee><newline46mondego>   <employee><newline46mondego>      <eID>123</eID><newline46mondego>      <country>US</country><newline46mondego>   </employee><newline46mondego>   <employee><newline46mondego>      <eID>456</eID><newline46mondego>      <country>US</country><newline46mondego>   </employee><newline46mondego>   <phone-number><newline46mondego>      <contact eID=<doubleQuotes46>123<doubleQuotes46> country=<doubleQuotes46>US<doubleQuotes46>/><newline46mondego>   </phone-number><newline46mondego></directory><newline46mondego>"
"3338splitHere46","3259222splitHere46","DatagramSocket s = new DatagramSocket(8888);<newline46mondego>s.receive  //(1)<newline46mondego>s.send     //(2)<newline46mondego>"
"3339splitHere46","3259222splitHere46","DatagramSocket c = new DatagramSocket();<newline46mondego>c.send(255.255.255.255:8888,msg)     //(3)<newline46mondego>c.receive  //(4)<newline46mondego>"
"3340splitHere46","3259311splitHere46","expect((Class) mockBeanFactory.getType(CLASS_NAME)).andReturn(SOME_CLASS);<newline46mondego>"
"3341splitHere46","3259472splitHere46","public static void main(String[] args) {<newline46mondego>    Collection<Bee> bees = new ArrayList<Bee>();<newline46mondego>    bees.add(new Hive.Worker());<newline46mondego>    bees.add(new Hive.Queen());<newline46mondego>    Set<Queen> queens = getBeesOfOneType(bees, Queen.class);<newline46mondego>}<newline46mondego><newline46mondego>private static <T extends Bee> Set<T> getBeesOfOneType(Collection<Bee> bees, Class<T> beeType) {<newline46mondego>    Set<T> result = new HashSet<T>();<newline46mondego>    for (Bee bee : bees) {<newline46mondego>        if (beeType.isInstance(bee)) {<newline46mondego>            // The following cast is safe. The previous if makes sure that<newline46mondego>            // that bee can be cast to T at this place<newline46mondego>            T beeTypeInstance = beeType.cast(bee);<newline46mondego>            result.add(beeTypeInstance);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"3342splitHere46","3259553splitHere46","tarfileset"
"3343splitHere46","3259553splitHere46","tar"
"3344splitHere46","3259553splitHere46","zip"
"3345splitHere46","3259553splitHere46","fileset"
"3346splitHere46","3259553splitHere46","fileset"
"3347splitHere46","3259553splitHere46","tarfileset"
"3348splitHere46","3259553splitHere46","fileset"
"3349splitHere46","3259553splitHere46","<project name=<doubleQuotes46>tartest<doubleQuotes46> default=<doubleQuotes46>teer<doubleQuotes46>><newline46mondego>   <target name=<doubleQuotes46>teer<doubleQuotes46>><newline46mondego>      <tar destfile=<doubleQuotes46>tartest.tar<doubleQuotes46>><newline46mondego>     <fileset dir=<doubleQuotes46>../Downloads<doubleQuotes46> includes=<doubleQuotes46>*.ico *.gif<doubleQuotes46>/><newline46mondego>      </tar><newline46mondego>   </target><newline46mondego></project><newline46mondego>"
"3350splitHere46","3259553splitHere46","-rw-r--r-- 0/0            3487 2009-12-28 20:04 actor075_thumb.gif<newline46mondego>-rw-r--r-- 0/0            1456 2010-06-16 10:57 bea-logo.gif<newline46mondego>-rw-r--r-- 0/0           23800 2010-06-16 09:22 ejb1.gif<newline46mondego>-rw-r--r-- 0/0            1406 2010-05-15 10:40 favicon-beta.ico<newline46mondego>-rw-r--r-- 0/0            1406 2010-05-15 10:25 favicon-clown.ico<newline46mondego>-rw-r--r-- 0/0            1406 2008-12-06 01:08 favicon.ico<newline46mondego>"
"3351splitHere46","3259553splitHere46","tar -xvf tartest.tar"
"3352splitHere46","3259553splitHere46","**/*"
"3353splitHere46","3259553splitHere46","flatten"
"3354splitHere46","3259553splitHere46","copy"
"3355splitHere46","3259705splitHere46","SomeTypeJson extends Json<SomeType>"
"3356splitHere46","3259705splitHere46","List"
"3357splitHere46","3259870splitHere46","@XmlAttribute(name=<doubleQuotes46>foo<doubleQuotes46>) public String prop1;  // maps to @foo in JSON<newline46mondego>@XmlElement(name=<doubleQuotes46>foo<doubleQuotes46>) public String prop2;  // maps to foo in JSON<newline46mondego>"
"3358splitHere46","3259938splitHere46","reqContext.put( BindingProvider.USERNAME_PROPERTY, <doubleQuotes46>user<doubleQuotes46> );<newline46mondego>reqContext.put( BindingProvider.PASSWORD_PROPERTY, <doubleQuotes46>password<doubleQuotes46> );<newline46mondego>"
"3359splitHere46","3259938splitHere46","class MyAuthenticator extends Authenticator {<newline46mondego>    private String username, password;<newline46mondego><newline46mondego>    public MyAuthenticator(String user, String pass) {<newline46mondego>        username = user;<newline46mondego>        password = pass;<newline46mondego>        setDefault( this );<newline46mondego>    }<newline46mondego><newline46mondego>    protected PasswordAuthentication getPasswordAuthentication() {<newline46mondego>        System.out.println(<doubleQuotes46>Requesting Host  : <doubleQuotes46> + getRequestingHost());<newline46mondego>        System.out.println(<doubleQuotes46>Requesting Port  : <doubleQuotes46> + getRequestingPort());<newline46mondego>        System.out.println(<doubleQuotes46>Requesting Prompt : <doubleQuotes46> + getRequestingPrompt());<newline46mondego>        System.out.println(<doubleQuotes46>Requesting Protocol: <doubleQuotes46> + getRequestingProtocol());<newline46mondego>        System.out.println(<doubleQuotes46>Requesting Scheme : <doubleQuotes46> + getRequestingScheme());<newline46mondego>        System.out.println(<doubleQuotes46>Requesting Site  : <doubleQuotes46> + getRequestingSite());<newline46mondego><newline46mondego>        return new PasswordAuthentication(username, password.toCharArray());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3360splitHere46","3259955splitHere46","public class A{ <newline46mondego>    @XmlPath(<doubleQuotes46>.<doubleQuotes46>) public B b; <newline46mondego>    public int F; <newline46mondego>    public String G;  <newline46mondego>} <newline46mondego><newline46mondego>public class B{ <newline46mondego>    public String C; <newline46mondego>    public String D; <newline46mondego>    public int E; <newline46mondego>} <newline46mondego>"
"3361splitHere46","3260088splitHere46","Id"
"3362splitHere46","3260112splitHere46","public static void main(String[] args) {<newline46mondego>    String myArgs = Commandline.translateCommandline(<doubleQuotes46>-a hello -b world -c \<doubleQuotes46>Hello world\<doubleQuotes46><doubleQuotes46>);<newline46mondego>    for (String arg:myArgs)<newline46mondego>        System.out.println(arg);<newline46mondego>}<newline46mondego>"
"3363splitHere46","3260112splitHere46","Commandline"
"3364splitHere46","3260150splitHere46","javac -Djava.ext.dirs=Destination\lib -d Destination\class<newline46mondego>      src\pkg1\Main.java src\pkg2\Auxiliary.java<newline46mondego>"
"3365splitHere46","3260150splitHere46","javac -Djava.ext.dirs=Destination\lib -d Destination\class<newline46mondego>      src\pkg2\Auxiliary.java<newline46mondego><newline46mondego>javac -Djava.ext.dirs=Destination\lib -cp Destination\class<newline46mondego>      -d Destination\class src\pkg1\Main.java<newline46mondego>"
"3366splitHere46","3260208splitHere46","-Xdebug -Xrunjdwp:transport=dt_socket,address=8001,server=y,suspend=n<newline46mondego>"
"3367splitHere46","3260208splitHere46","y"
"3368splitHere46","3260208splitHere46","main"
"3369splitHere46","3260240splitHere46","#!/bin/sh -- # -*- perl -*- -p<newline46mondego>eval 'exec perl -wS <doubleQuotes46>$0<doubleQuotes46> ${1+<doubleQuotes46>$@<doubleQuotes46>}'<newline46mondego>if $running_under_some_shell;<newline46mondego>"
"3370splitHere46","3260240splitHere46","#!"
"3371splitHere46","3260240splitHere46","!#"
"3372splitHere46","3260240splitHere46","#!/bin/sh<newline46mondego>exec guile -s <doubleQuotes46>$0<doubleQuotes46> <doubleQuotes46>$@<doubleQuotes46><newline46mondego>!# ;; scheme code starts here<newline46mondego>"
"3373splitHere46","3260240splitHere46","#!/usr/bin/env mywrapper"
"3374splitHere46","3260240splitHere46","mywrapper"
"3375splitHere46","3260240splitHere46","#!"
"3376splitHere46","3260281splitHere46","<bean id=<doubleQuotes46>userDAO<doubleQuotes46> class=<doubleQuotes46>com.foo.dao.hibernate.HibernateUserDao<doubleQuotes46>><newline46mondego>    ...<newline46mondego></bean><newline46mondego>"
"3377splitHere46","3260281splitHere46","<bean id=<doubleQuotes46>userDAO<doubleQuotes46> class=<doubleQuotes46>com.foo.dao.ibatis.IBatisUserDao<doubleQuotes46>><newline46mondego>    ...<newline46mondego></bean><newline46mondego>"
"3378splitHere46","3260281splitHere46","-data"
"3379splitHere46","3260281splitHere46","web.xml"
"3380splitHere46","3260602splitHere46","-p"
"3381splitHere46","3260602splitHere46","-b"
"3382splitHere46","3260602splitHere46","-p"
"3383splitHere46","3260918splitHere46","<set name=<doubleQuotes46>children<doubleQuotes46> inverse=<doubleQuotes46>true<doubleQuotes46> cascade=<doubleQuotes46>all<doubleQuotes46>><newline46mondego>    <key column=<doubleQuotes46>parent_id<doubleQuotes46>/><newline46mondego>    <one-to-many class=<doubleQuotes46>Child<doubleQuotes46>/><newline46mondego></set><newline46mondego>"
"3384splitHere46","3260918splitHere46","Parent p = (Parent) session.load(Parent.class, pid);<newline46mondego>Child c = new Child();<newline46mondego>p.addChild(c);<newline46mondego>session.flush();<newline46mondego>"
"3385splitHere46","3260918splitHere46","Parent"
"3386splitHere46","3260918splitHere46","p"
"3387splitHere46","3260918splitHere46","Parent p = (Parent) session.load(Parent.class, pid);<newline46mondego>session.delete(p);<newline46mondego>session.flush();<newline46mondego>"
"3388splitHere46","3260918splitHere46","Parent p = (Parent) session.load(Parent.class, pid);<newline46mondego>Child c = (Child) p.getChildren().iterator().next();<newline46mondego>p.getChildren().remove(c);<newline46mondego>c.setParent(null);<newline46mondego>session.flush();<newline46mondego>"
"3389splitHere46","3260918splitHere46","c"
"3390splitHere46","3260918splitHere46","p"
"3391splitHere46","3260918splitHere46","NOT NULL"
"3392splitHere46","3260918splitHere46","delete()"
"3393splitHere46","3260918splitHere46","Child"
"3394splitHere46","3260918splitHere46","Parent p = (Parent) session.load(Parent.class, pid);<newline46mondego>Child c = (Child) p.getChildren().iterator().next();<newline46mondego>p.getChildren().remove(c);<newline46mondego>session.delete(c);<newline46mondego>session.flush();<newline46mondego>"
"3395splitHere46","3260918splitHere46","Child"
"3396splitHere46","3260918splitHere46","Child"
"3397splitHere46","3260918splitHere46","cascade=<doubleQuotes46>all-delete-orphan<doubleQuotes46>"
"3398splitHere46","3260918splitHere46","<set name=<doubleQuotes46>children<doubleQuotes46> inverse=<doubleQuotes46>true<doubleQuotes46> cascade=<doubleQuotes46>all-delete-orphan<doubleQuotes46>><newline46mondego>    <key column=<doubleQuotes46>parent_id<doubleQuotes46>/><newline46mondego>    <one-to-many class=<doubleQuotes46>Child<doubleQuotes46>/><newline46mondego></set><newline46mondego>"
"3399splitHere46","3260918splitHere46","inverse=<doubleQuotes46>true<doubleQuotes46>"
"3400splitHere46","3260918splitHere46","setParent()"
"3401splitHere46","3260954splitHere46","floats = finalFloats;"
"3402splitHere46","3260954splitHere46","floats"
"3403splitHere46","3260954splitHere46","finalFloats"
"3404splitHere46","3260954splitHere46","floats[0]=0.1f"
"3405splitHere46","3260954splitHere46","finalFloats"
"3406splitHere46","3260954splitHere46","final"
"3407splitHere46","3260954splitHere46","finalFloats"
"3408splitHere46","3260954splitHere46","finalFloats = new float[7]"
"3409splitHere46","3260954splitHere46","floats = Arrays.copyOf(finalFloats, finalFloats.length);<newline46mondego>"
"3410splitHere46","3260989splitHere46","alwaysUseFullPath"
"3411splitHere46","3260989splitHere46","<bean id=<doubleQuotes46>urlMap<doubleQuotes46> <newline46mondego>    class=<doubleQuotes46>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping<doubleQuotes46>> <newline46mondego><newline46mondego>    <property name = <doubleQuotes46>alwaysUseFullPath<doubleQuotes46> value = <doubleQuotes46>true<doubleQuotes46> /><newline46mondego><newline46mondego>    ...<newline46mondego></bean><newline46mondego>"
"3412splitHere46","3260989splitHere46","<url-pattern>"
"3413splitHere46","3260989splitHere46","/*"
"3414splitHere46","3261166splitHere46","Shaker"
"3415splitHere46","3261611splitHere46","PdfWriter.getInstance(document, new ByteArrayOutputStream());<newline46mondego>"
"3416splitHere46","3261899splitHere46","if (inputVar.isBad()) {<newline46mondego>    return;<newline46mondego>}<newline46mondego><newline46mondego>doThings();<newline46mondego>"
"3417splitHere46","3261899splitHere46","if (inputVar == thingOne) {<newline46mondego>    doFirstThing();<newline46mondego>} else if (inputVar == secondThing) {<newline46mondego>    doSecondThing();<newline46mondego>} else {<newline46mondego>    doThirdThing();<newline46mondego>}<newline46mondego>"
"3418splitHere46","3261899splitHere46","if (inputVar == thingOne) {<newline46mondego>    doFirstThing();<newline46mondego>    return;<newline46mondego>}<newline46mondego>if (inputVar == thingTwo) {<newline46mondego>    doSecondThing();<newline46mondego>    return;<newline46mondego>}<newline46mondego>doThingThree();<newline46mondego>return;<newline46mondego>"
"3419splitHere46","3261972splitHere46","public static <T> void sortWithDefault(final List<T> list)<newline46mondego>{<newline46mondego>    Collections.sort(list);<newline46mondego>    // remove the default item<newline46mondego>    // insert the default item at the start of the list<newline46mondego>}<newline46mondego>"
"3420splitHere46","3261972splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.Collections;<newline46mondego>import java.util.Comparator;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class Main<newline46mondego>{<newline46mondego>    public static void main(final String[] argv)<newline46mondego>    {<newline46mondego>        final List<Integer> list;<newline46mondego><newline46mondego>        list = new ArrayList<Integer>();<newline46mondego><newline46mondego>        for(int i = 10; i > 0; i--)<newline46mondego>        {<newline46mondego>            list.add(i);<newline46mondego>        }<newline46mondego><newline46mondego>        Collections.sort(list, new DefaultAtStartComparator<Integer>(5));<newline46mondego><newline46mondego>        System.out.println(list);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class DefaultAtStartComparator<T extends Comparable><newline46mondego>    implements Comparator<T><newline46mondego>{<newline46mondego>    private final T defaultValue;<newline46mondego><newline46mondego>    public DefaultAtStartComparator(final T value)<newline46mondego>    {<newline46mondego>        defaultValue = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public int compare(final T a,<newline46mondego>                       final T b)<newline46mondego>    {<newline46mondego>        if(a.equals(defaultValue))<newline46mondego>        {<newline46mondego>            return (-1);<newline46mondego>        }<newline46mondego><newline46mondego>        if(b.equals(defaultValue))<newline46mondego>        {<newline46mondego>            return (1);<newline46mondego>        }<newline46mondego><newline46mondego>        return (a.compareTo(b));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3421splitHere46","3262062splitHere46","http://au.php.net/manual/en/function.proc-open.php"
"3422splitHere46","3262062splitHere46","<?php<newline46mondego>$descriptorspec = array(<newline46mondego>   0 => array(<doubleQuotes46>pipe<doubleQuotes46>, <doubleQuotes46>r<doubleQuotes46>),  // stdin is a pipe that the child will read from<newline46mondego>   1 => array(<doubleQuotes46>pipe<doubleQuotes46>, <doubleQuotes46>w<doubleQuotes46>),  // stdout is a pipe that the child will write to<newline46mondego>   2 => array(<doubleQuotes46>file<doubleQuotes46>, <doubleQuotes46>/tmp/error-output.txt<doubleQuotes46>, <doubleQuotes46>a<doubleQuotes46>) // stderr is a file to write to<newline46mondego>);<newline46mondego><newline46mondego>$cwd = '/tmp';<newline46mondego>$env = array('some_option' => 'aeiou');<newline46mondego><newline46mondego>$process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);<newline46mondego><newline46mondego>if (is_resource($process)) {<newline46mondego>    // $pipes now looks like this:<newline46mondego>    // 0 => writeable handle connected to child stdin<newline46mondego>    // 1 => readable handle connected to child stdout<newline46mondego>    // Any error output will be appended to /tmp/error-output.txt<newline46mondego><newline46mondego>    fwrite($pipes[0], '<?php print_r($_ENV); ?>');<newline46mondego>    fclose($pipes[0]);<newline46mondego><newline46mondego>    echo stream_get_contents($pipes[1]);<newline46mondego>    fclose($pipes[1]);<newline46mondego><newline46mondego>    // It is important that you close any pipes before calling<newline46mondego>    // proc_close in order to avoid a deadlock<newline46mondego>    $return_value = proc_close($process);<newline46mondego><newline46mondego>    echo <doubleQuotes46>command returned $return_value\n<doubleQuotes46>;<newline46mondego>}<newline46mondego>?><newline46mondego>"
"3423splitHere46","3262200splitHere46","|"
"3424splitHere46","3262200splitHere46","String[] cmd = {<doubleQuotes46>gtar<doubleQuotes46>, <doubleQuotes46>-ztf<doubleQuotes46>, fileName};<newline46mondego><newline46mondego>// ...<newline46mondego><newline46mondego>// Instead of current input loop.<newline46mondego>s = stdInput.readLine();<newline46mondego>if(s != null) {<newline46mondego>    sbOutput.append(s + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>while (stdInput.readLine() != null) {<newline46mondego>    // Disregard.  Reading to end to prevent hang.<newline46mondego>}<newline46mondego>"
"3425splitHere46","3262291splitHere46","@Name(<doubleQuotes46>nonEjbComponent<doubleQuotes46>)<newline46mondego>public class NonEjbComponent {<newline46mondego><newline46mondego>    private @In DaoEjbComponent daoEjbComponent;<newline46mondego>    private @In OtherDaoEjbComponent otherDaoEjbComponent;<newline46mondego>    private @In AnotherDaoEjbComponent anotherDaoEjbComponent;<newline46mondego><newline46mondego>    private @In UserTransaction userTransation;<newline46mondego><newline46mondego>    public void wrapperAllOfThem() {<newline46mondego><newline46mondego>         userTransation.begin();<newline46mondego><newline46mondego>             daoEjbComponent.save(someEntity);<newline46mondego>             otherDaoEjbComponent.update(otherEntity);<newline46mondego>             anotherDaoEjbComponent.delete(anotherEntity);<newline46mondego><newline46mondego>         userTransation.commit();<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3426splitHere46","3262291splitHere46","@Stateless<newline46mondego>@TransactionAttribute(TransactionAttributeType.REQUIRED)<newline46mondego>@Name(<doubleQuotes46>wrapperStateless<doubleQuotes46>)<newline46mondego>public class WrapperStatelessImpl implements WrapperStateless {<newline46mondego><newline46mondego>    private @In DaoEjbComponent daoEjbComponent;<newline46mondego>    private @In OtherDaoEjbComponent otherDaoEjbComponent;<newline46mondego>    private @In AnotherDaoEjbComponent anotherDaoEjbComponent;<newline46mondego><newline46mondego>    public void wrapperAllOfThem() {<newline46mondego><newline46mondego>        daoEjbComponent.save(someEntity);<newline46mondego>        otherDaoEjbComponent.update(otherEntity);<newline46mondego>        anotherDaoEjbComponent.delete(anotherEntity);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3427splitHere46","3262291splitHere46","@Name(<doubleQuotes46>nonEjbComponent<doubleQuotes46>)<newline46mondego>public class NonEjbComponent {<newline46mondego><newline46mondego>    private @In WrapperStateless wrapperStateless;<newline46mondego><newline46mondego>    public void wrapperAllOfThem() {<newline46mondego>        wrapperStateless.wrapperAllOfThem();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3428splitHere46","3262334splitHere46","javax.servlet.http"
"3429splitHere46","3262365splitHere46","private @In FacesContext facesContext;<newline46mondego>"
"3430splitHere46","3262365splitHere46","@Scope(APPLICATION)<newline46mondego>@Name(<doubleQuotes46>org.jboss.seam.web.authenticationFilter<doubleQuotes46>)<newline46mondego>@Install(value = false, precedence = BUILT_IN)<newline46mondego>@BypassInterceptors<newline46mondego>@Filter(within = <doubleQuotes46>org.jboss.seam.web.exceptionFilter<doubleQuotes46>)<newline46mondego>public class CustomAuthenticationFilter extends org.jboss.seam.web.AbstractFilter {<newline46mondego><newline46mondego>    /** <newline46mondego>      * Because of some private methods defined in AuthenticationFilter<newline46mondego>      * do Ctrl + C / Ctrl + V All of source code of AuthenticationFilter<newline46mondego>      *<newline46mondego>      * Except authenticate method which is shown bellow<newline46mondego>      */<newline46mondego><newline46mondego>    private void authenticate(HttpServletRequest request, final String username) throws ServletException, IOException {<newline46mondego>        new ContextualHttpServletRequest(request) {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void process() throws ServletException, IOException, LoginException {<newline46mondego>                Identity identity = Identity.instance();<newline46mondego>                identity.getCredentials().setUsername(username);<newline46mondego><newline46mondego>                try {<newline46mondego>                    identity.preAuthenticate();<newline46mondego><newline46mondego>                    /**<newline46mondego>                      * Yes, THE SAME LOGIC performed by authenticate-method must goes here<newline46mondego>                      */<newline46mondego><newline46mondego>                    /**<newline46mondego>                      * Do not use @In-jection here<newline46mondego>                      * <newline46mondego>                      * Use context lookup instead<newline46mondego>                      * For instance, UserService userService = (UserService) Contexts.lookupInStatefulContexts(<doubleQuotes46>userService<doubleQuotes46>);<newline46mondego>                      */<newline46mondego><newline46mondego>                    identity.postAuthenticate();<newline46mondego>                } finally {<newline46mondego>                    // Set password to null whether authentication is successful or not<newline46mondego>                    identity.getCredentials.setPassword(null);    <newline46mondego>                }<newline46mondego>            }<newline46mondego>        }.run();  <newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3431splitHere46","3262365splitHere46","<web:rewrite-filter view-mapping=<doubleQuotes46>/resource/rest/*<doubleQuotes46>/><newline46mondego><component name=<doubleQuotes46>org.jboss.seam.web.authenticationFilter<doubleQuotes46> class=<doubleQuotes46>br.com.ar.seam.CustomAuthenticationFilter<doubleQuotes46>>  <newline46mondego>    <property name=<doubleQuotes46>urlPattern<doubleQuotes46>>/resource/rest/*</property><newline46mondego>    <property name=<doubleQuotes46>authType<doubleQuotes46>>basic</property><newline46mondego></component><newline46mondego>"
"3432splitHere46","3262365splitHere46","<servlet><newline46mondego>    <servlet-name>Faces Servlet</servlet-name><newline46mondego>    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class><newline46mondego>    <load-on-startup>1</load-on-startup><newline46mondego></servlet><newline46mondego><!--HERE GOES NON-REST INTERCEPTED URL--><newline46mondego><servlet-mapping><newline46mondego>    <servlet-name>Faces Servlet</servlet-name><newline46mondego>    <url-pattern>*.seam</url-pattern><newline46mondego></servlet-mapping><newline46mondego><!--HERE GOES REST INTERCEPTED URL--><newline46mondego><servlet-mapping><newline46mondego>    <servlet-name>Faces Servlet</servlet-name><newline46mondego>    <url-pattern>/*</url-pattern><newline46mondego></servlet-mapping><newline46mondego>"
"3433splitHere46","3262365splitHere46","<page view-id=<doubleQuotes46><VIEW_ID_GOES_HERE><doubleQuotes46>><newline46mondego>    <rewrite pattern=<doubleQuotes46>/resource/rest/user<doubleQuotes46>/><newline46mondego>    <rewrite pattern=<doubleQuotes46>/resource/rest/{userId}<doubleQuotes46>/><newline46mondego>    <!--userId comes from pattern shown above--><newline46mondego>    <param name=<doubleQuotes46>userId<doubleQuotes46> value=<doubleQuotes46>#{userService.userId}<doubleQuotes46>/><newline46mondego></page><newline46mondego>"
"3434splitHere46","3262365splitHere46","<servlet><newline46mondego>    <servlet-name>Seam Resource Servlet</servlet-name><newline46mondego>    <servlet-class>org.jboss.seam.servlet.SeamResourceServlet</servlet-class><newline46mondego></servlet><newline46mondego><servlet-mapping><newline46mondego>    <servlet-name>Seam Resource Servlet</servlet-name><newline46mondego>    <url-pattern>/resource/*</url-pattern><newline46mondego></servlet-mapping><newline46mondego>"
"3435splitHere46","3262796splitHere46","try {<newline46mondego>        List<Object> tempList = new ArrayList<Object>();<newline46mondego>        while (true) {<newline46mondego>            tempList.add(new byte[128 * 1024 * 1024 * 1024]);<newline46mondego>        }<newline46mondego>    } catch (OutOfMemoryError OME) {<newline46mondego>       // OK, Garbage Collector will have run now...<newline46mondego>    }<newline46mondego>"
"3436splitHere46","3262926splitHere46","Reader"
"3437splitHere46","3262926splitHere46","DataInput"
"3438splitHere46","3262926splitHere46","GZIPInputStream"
"3439splitHere46","3262926splitHere46","DataInputStream"
"3440splitHere46","3262926splitHere46","readInt"
"3441splitHere46","3262926splitHere46","System.out.format(<doubleQuotes46>%08x<doubleQuotes46>, (int) n);<newline46mondego>"
"3442splitHere46","3262926splitHere46","int"
"3443splitHere46","3262926splitHere46","available()"
"3444splitHere46","3262926splitHere46","byte[] ints = {0x00, 0x00, 0x00, (byte) 0xFF,<newline46mondego>               (byte) 0xAA, (byte) 0xBB, (byte) 0xEE, (byte) 0xFF};<newline46mondego>ByteArrayInputStream array = new ByteArrayInputStream(ints);<newline46mondego>DataInputStream data = new DataInputStream(array);<newline46mondego>while(data.available() > 0) {<newline46mondego>  int reversed = Integer.reverseBytes(data.readInt());<newline46mondego>  System.out.format(<doubleQuotes46>%08x%n<doubleQuotes46>, reversed);<newline46mondego>}<newline46mondego>"
"3445splitHere46","3262926splitHere46","available()"
"3446splitHere46","3262926splitHere46","public static void main(String[] args) throws IOException {<newline46mondego>    byte[] ints = {0x00, 0x00, 0x00, (byte) 0xFF,<newline46mondego>                    (byte) 0xAA, (byte) 0xBB, (byte) 0xEE, (byte) 0xFF};<newline46mondego>    ByteArrayInputStream array = new ByteArrayInputStream(ints);<newline46mondego>    BufferedInputStream buffer = new BufferedInputStream(array);<newline46mondego>    DataInputStream data = new DataInputStream(buffer);<newline46mondego>    while(hasData(data)) {<newline46mondego>      int reversed = Integer.reverseBytes(data.readInt());<newline46mondego>      System.out.format(<doubleQuotes46>%08x%n<doubleQuotes46>, reversed);<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  public static boolean hasData(InputStream in) throws IOException {<newline46mondego>    in.mark(1);<newline46mondego>    try {<newline46mondego>      return in.read() != -1;<newline46mondego>    } finally {<newline46mondego>      in.reset();<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"3447splitHere46","3262991splitHere46","Math.pow(x,y);"
"3448splitHere46","3263081splitHere46","try {<newline46mondego>     InitialContext ic = new InitialContext();<newline46mondego>     String value = (String) ic.lookup(<doubleQuotes46>MyCustomResource<doubleQuotes46>);<newline46mondego>     System.out.println(<doubleQuotes46>MyCustomResource = <doubleQuotes46> + value);<newline46mondego>} catch (NamingException e) {<newline46mondego>     e.printStackTrace();<newline46mondego>}<newline46mondego>"
"3449splitHere46","3263141splitHere46","public"
"3450splitHere46","3263141splitHere46","public"
"3451splitHere46","3263141splitHere46",".java"
"3452splitHere46","3263141splitHere46",".jav"
"3453splitHere46","3263141splitHere46","public"
"3454splitHere46","3263141splitHere46","class"
"3455splitHere46","3263141splitHere46","public"
"3456splitHere46","3263141splitHere46","wet.sprocket.Toad"
"3457splitHere46","3263141splitHere46","Toad.java"
"3458splitHere46","3263141splitHere46","wet/sprocket"
"3459splitHere46","3263141splitHere46","Toad.class"
"3460splitHere46","3263141splitHere46","final"
"3461splitHere46","3263262splitHere46","byte[] array = Charset.forName(<doubleQuotes46>utf-8<doubleQuotes46>).encode(CharBuffer.wrap(s)).array();<newline46mondego>"
"3462splitHere46","3263262splitHere46","byte[] array = s.getBytes(Charset.forName(<doubleQuotes46>utf-8<doubleQuotes46>));<newline46mondego>"
"3463splitHere46","3263430splitHere46","request"
"3464splitHere46","3263430splitHere46","param"
"3465splitHere46","3263697splitHere46","lib"
"3466splitHere46","3263783splitHere46","SortableHeader"
"3467splitHere46","3263783splitHere46","SortableColumn"
"3468splitHere46","3263783splitHere46","com.google.gwt.sample.expenses.gwt.client.ExpenseDetails"
"3469splitHere46","3263797splitHere46","%throwable{n}"
"3470splitHere46","3263875splitHere46","ResponseWriter rw1, rw2; // ...<newline46mondego>rw2 = rw1.cloneWithWriter(new PrintWriter(System.out));<newline46mondego>"
"3471splitHere46","3263918splitHere46","java -cp dist/lib/flexnbd-20100716.jar:/home/yann/java/apache-log4j-1.2.16/log4j-1.2.16.jar uk.co.bytemark.flexnbd.Main [...]<newline46mondego>"
"3472splitHere46","3263945splitHere46","SELECT MAX(s) FROM <doubleQuotes46> + TABLE_NAME;"
"3473splitHere46","3263945splitHere46","SELECT MAX('s') FROM <doubleQuotes46> + TABLE_NAME;"
"3474splitHere46","3263953splitHere46","PreparedStatement stmt =  <newline46mondego> conn.prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);<newline46mondego>stmt.setFetchSize(Integer.MIN_VALUE);<newline46mondego>"
"3475splitHere46","3264008splitHere46","[A-Z][a-z]+( [A-Z][a-z]+)?<newline46mondego>"
"3476splitHere46","3264008splitHere46","?"
"3477splitHere46","3264008splitHere46","(?:...)"
"3478splitHere46","3264008splitHere46","[A-Z]([a-z]+|\s[a-z]+)<newline46mondego>"
"3479splitHere46","3264008splitHere46","[A-Z][a-z]+<newline46mondego>"
"3480splitHere46","3264008splitHere46","[A-Z]\s[a-z]+<newline46mondego>"
"3481splitHere46","3264008splitHere46","John"
"3482splitHere46","3264008splitHere46","J paul"
"3483splitHere46","3264008splitHere46","John Paul"
"3484splitHere46","3264202splitHere46","asList"
"3485splitHere46","3264202splitHere46","List<int[]>"
"3486splitHere46","3264202splitHere46","List<int>"
"3487splitHere46","3264202splitHere46","Integer"
"3488splitHere46","3264202splitHere46","Integer[]"
"3489splitHere46","3264202splitHere46","ArrayUtils"
"3490splitHere46","3264202splitHere46","if(Arrays.asList(ArrayUtils.toObject(VOWEL_POS)).contains(0))<newline46mondego>"
"3491splitHere46","3264202splitHere46","Integer[]"
"3492splitHere46","3264253splitHere46","@OneToOne(cascade = CascadeType.ALL)<newline46mondego>private MyType myType;<newline46mondego>"
"3493splitHere46","3264418splitHere46","StringBuilder"
"3494splitHere46","3264418splitHere46","StringBuilder builder= new StringBuilder();<newline46mondego>builder.append(<doubleQuotes46>[<doubleQuotes46>);<newline46mondego>builder.append(<doubleQuotes46>  {<doubleQuotes46>);<newline46mondego>builder.append(<doubleQuotes46>    \<doubleQuotes46>validation\<doubleQuotes46> : {<doubleQuotes46>);<newline46mondego>// ...<newline46mondego><newline46mondego>// When finished:<newline46mondego>response.getWriter().write(builder.toString());<newline46mondego>"
"3495splitHere46","3264418splitHere46","ServletException"
"3496splitHere46","3264418splitHere46","HttpServletResponse#sendError()"
"3497splitHere46","3264418splitHere46","XMLHttpRequest"
"3498splitHere46","3264418splitHere46","try {<newline46mondego>    // Build and write JSON.<newline46mondego>} catch (Exception e) {<newline46mondego>    throw new ServletException(e);<newline46mondego>}  <newline46mondego>"
"3499splitHere46","3264552splitHere46","class Main<newline46mondego>{<newline46mondego>    static class Main2<newline46mondego>    {<newline46mondego>        public static void main ( String [ ] args )<newline46mondego>        {<newline46mondego>            System . out . println ( <doubleQuotes46>YES!!!!!!!!!!!<doubleQuotes46> ) ;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main ( String [ ] args )<newline46mondego>    {<newline46mondego>        System . out . println ( Main2 . class . getCanonicalName ( ) ) ;<newline46mondego>        System . out . println ( Main2 . class . getName ( ) ) ;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class Main3<newline46mondego>{<newline46mondego>    public static void main ( String [ ] args )<newline46mondego>    {<newline46mondego>        System . out . println ( <doubleQuotes46>YES!!!!!!!!!!!<doubleQuotes46> ) ;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3500splitHere46","3264668splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><xsd:schema xmlns:xsd=<doubleQuotes46>http://www.w3.org/2001/XMLSchema<doubleQuotes46>><newline46mondego>   <xsd:complexType name=<doubleQuotes46>contactType<doubleQuotes46>><newline46mondego>      <xsd:sequence><newline46mondego>         <xsd:element name=<doubleQuotes46>name<doubleQuotes46> type=<doubleQuotes46>xsd:string<doubleQuotes46> maxOccurs=<doubleQuotes46>1<doubleQuotes46> minOccurs=<doubleQuotes46>1<doubleQuotes46>/><newline46mondego>         <xsd:element name=<doubleQuotes46>address<doubleQuotes46> type=<doubleQuotes46>xsd:string<doubleQuotes46>/><newline46mondego>      <xsd:element name=<doubleQuotes46>phone<doubleQuotes46> type=<doubleQuotes46>xsd:string<doubleQuotes46>/><newline46mondego>   </xsd:sequence><newline46mondego>   </xsd:complexType><newline46mondego>   <xsd:complexType name=<doubleQuotes46>contactsType<doubleQuotes46>><newline46mondego>      <xsd:sequence><newline46mondego>         <xsd:element name=<doubleQuotes46>contact<doubleQuotes46> type=<doubleQuotes46>contactType<doubleQuotes46> maxOccurs=<doubleQuotes46>unbounded<doubleQuotes46>/><newline46mondego>      </xsd:sequence><newline46mondego>   </xsd:complexType><newline46mondego>   <xsd:element name=<doubleQuotes46>contacts<doubleQuotes46> type=<doubleQuotes46>contactsType<doubleQuotes46>/><newline46mondego></xsd:schema><newline46mondego>"
"3501splitHere46","3264945splitHere46","public class MyMates {<newline46mondego>    private static TreeSet<String> myTable = new TreeSet<String>();<newline46mondego>    private static String[][] names;<newline46mondego><newline46mondego>    public MyMates() {<newline46mondego>        super();<newline46mondego>        myTable = new TreeSet<String>();<newline46mondego>    }<newline46mondego><newline46mondego>    public static String methodA(String aTemp) {<newline46mondego>        names = new String[][] {<newline46mondego>                { <doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>Jose<doubleQuotes46>, <doubleQuotes46>Jeremy<doubleQuotes46>, <doubleQuotes46>Alice<doubleQuotes46>, <doubleQuotes46>Patrick<doubleQuotes46> },<newline46mondego>                { <doubleQuotes46>Alan<doubleQuotes46>, <doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>Jeremy<doubleQuotes46>, <doubleQuotes46>Helen<doubleQuotes46>, <doubleQuotes46>Alexi<doubleQuotes46> },<newline46mondego>                { <doubleQuotes46>Adel<doubleQuotes46>, <doubleQuotes46>Aaron<doubleQuotes46>, <doubleQuotes46>Amy<doubleQuotes46>, <doubleQuotes46>James<doubleQuotes46>, <doubleQuotes46>Alice<doubleQuotes46> } };<newline46mondego><newline46mondego>        return aTemp;<newline46mondego>    }<newline46mondego><newline46mondego>    public static String methodB(String bTemp) {<newline46mondego><newline46mondego>        for (int row = 0; row < names.length; row++) {<newline46mondego>            for (int i = 0; i < names[row].length; i++) {<newline46mondego>                myTable.add(names[row][i]);<newline46mondego>                System.out.println(myTable);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return <doubleQuotes46><doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        methodA(<doubleQuotes46><doubleQuotes46>);<newline46mondego>        methodB(<doubleQuotes46><doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3502splitHere46","3265263splitHere46","String.split(String regex)"
"3503splitHere46","3265263splitHere46","."
"3504splitHere46","3265263splitHere46","split(<doubleQuotes46>.<doubleQuotes46>)"
"3505splitHere46","3265263splitHere46","."
"3506splitHere46","3265263splitHere46","<doubleQuotes46>\\.<doubleQuotes46>"
"3507splitHere46","3265263splitHere46","\"
"3508splitHere46","3265263splitHere46","\"
"3509splitHere46","3265263splitHere46","<doubleQuotes46>\\.<doubleQuotes46>"
"3510splitHere46","3265263splitHere46","String"
"3511splitHere46","3265263splitHere46","String"
"3512splitHere46","3265263splitHere46","Pattern.quote"
"3513splitHere46","3265263splitHere46","String"
"3514splitHere46","3265263splitHere46","String text =<newline46mondego>        <doubleQuotes46>Wait a minute... what?!? Oh yeah! This is awesome!!<doubleQuotes46>;<newline46mondego><newline46mondego>    for (String part : text.split(<doubleQuotes46>(?<=[.?!]) <doubleQuotes46>)) {<newline46mondego>        System.out.println(part);<newline46mondego>    }<newline46mondego>"
"3515splitHere46","3265263splitHere46","Wait a minute...<newline46mondego>what?!?<newline46mondego>Oh yeah!<newline46mondego>This is awesome!!<newline46mondego>"
"3516splitHere46","3265263splitHere46","(?<=#)[^#]+(?=#)"
"3517splitHere46","3265278splitHere46","JPanel"
"3518splitHere46","3265278splitHere46","JComponent"
"3519splitHere46","3265278splitHere46","getPreferredSize"
"3520splitHere46","3265278splitHere46","getMinimumSize"
"3521splitHere46","3265278splitHere46","getMaximumSize"
"3522splitHere46","3265366splitHere46","Injector"
"3523splitHere46","3265366splitHere46","main"
"3524splitHere46","3265366splitHere46","GuiceServletContextListener"
"3525splitHere46","3265366splitHere46","Modules.override"
"3526splitHere46","3265431splitHere46","public class PostImagen {<newline46mondego>private String mURL;<newline46mondego>private byte[] mDatos;<newline46mondego><newline46mondego>public PostImagen(String URLServicio, byte[] Datos){<newline46mondego>    mDatos = Datos;<newline46mondego>    mURL = URLServicio;<newline46mondego>}<newline46mondego><newline46mondego>public void getRespuesta() throws Exception {       <newline46mondego>    try {                                      <newline46mondego>        String mBoundary = <doubleQuotes46>SUPSUP<doubleQuotes46>;            <newline46mondego><newline46mondego>        /* Strings a usar para el contenido */<newline46mondego>        String nuevaLinea = <doubleQuotes46>\r\n<doubleQuotes46>;<newline46mondego>        String contDisp=<doubleQuotes46>Content-Disposition: multipart/form-data; name=\<doubleQuotes46>foto\<doubleQuotes46>;filename=\<doubleQuotes46>sample.jpg\<doubleQuotes46><doubleQuotes46>;<newline46mondego>        String contEnc = <doubleQuotes46>Content-Transfer-Encoding: binary<doubleQuotes46>;<newline46mondego>        String type=<doubleQuotes46>Content-Type:image/jpeg<doubleQuotes46>;<newline46mondego><newline46mondego>        /* Preparar objeto a enviar */<newline46mondego>        byte[] mBytesPostear;<newline46mondego>        if (mDatos == null){<newline46mondego>            InputStream mImagen = this.getClass().getResourceAsStream(<doubleQuotes46>sample.jpg<doubleQuotes46>);            <newline46mondego>            mBytesPostear = IOUtilities.streamToBytes(mImagen);<newline46mondego>        } else {<newline46mondego>            mBytesPostear = mDatos;<newline46mondego>        }                       <newline46mondego><newline46mondego>        System.err.println(<doubleQuotes46>Longitud de imagen: <doubleQuotes46> + mBytesPostear.length);<newline46mondego><newline46mondego><newline46mondego><newline46mondego>        /* Preparar contenido de salida */<newline46mondego>        ByteArrayOutputStream mOutput = new ByteArrayOutputStream();<newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego>        mOutput.write(<doubleQuotes46>--<doubleQuotes46>.getBytes());<newline46mondego>        mOutput.write(mBoundary.getBytes());<newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego>        mOutput.write(contDisp.getBytes());<newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego>        mOutput.write(type.getBytes());<newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego>        mOutput.write(contEnc.getBytes());<newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego>        mOutput.write(mBytesPostear);<newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego>        mOutput.write(<doubleQuotes46>--<doubleQuotes46>.getBytes());<newline46mondego>        mOutput.write(mBoundary.getBytes());<newline46mondego>        mOutput.write(<doubleQuotes46>--<doubleQuotes46>.getBytes());         <newline46mondego>        mOutput.write(nuevaLinea.getBytes());<newline46mondego><newline46mondego>        /* Preparar conexión y headers */<newline46mondego>        HttpConnection mConexion = (HttpConnection) Connector.open(mURL);<newline46mondego>        mConexion.setRequestMethod(HttpConnection.POST);<newline46mondego>        mConexion.setRequestProperty(HttpProtocolConstants.HEADER_CONTENT_TYPE, HttpProtocolConstants.CONTENT_TYPE_MULTIPART_FORM_DATA + <doubleQuotes46>;boundary=<doubleQuotes46> + mBoundary);<newline46mondego>        mConexion.setRequestProperty(HttpProtocolConstants.HEADER_CONTENT_LENGTH, String.valueOf(mOutput.size()));          <newline46mondego>        mConexion.setRequestProperty( <doubleQuotes46>x-rim-transcode-content<doubleQuotes46>, <doubleQuotes46>none<doubleQuotes46> );      <newline46mondego><newline46mondego>        /**********************/<newline46mondego>        System.err.println(<doubleQuotes46>Escribiendo stream<doubleQuotes46>);<newline46mondego><newline46mondego>        OutputStream mOS = mConexion.openOutputStream();            <newline46mondego><newline46mondego>        /* Escribir el contenido */<newline46mondego>        mOS.write(mOutput.toByteArray());<newline46mondego><newline46mondego>        mOutput.flush();<newline46mondego>        mOutput.close();<newline46mondego><newline46mondego>        mOS.flush();<newline46mondego>        mOS.close();<newline46mondego><newline46mondego>        System.err.println(<doubleQuotes46>Se terminó de escribir payload, recibiendo respuesta<doubleQuotes46>);<newline46mondego><newline46mondego>        /* Recibir respuesta del servidor */<newline46mondego>        if (mConexion.getResponseCode() != HttpConnection.HTTP_OK){             <newline46mondego>            throw new Exception(<doubleQuotes46>El servidor NO regresó OK (200) al leer la respuesta. Saliendo...<doubleQuotes46>);<newline46mondego>        }<newline46mondego><newline46mondego>        InputStream mIS = mConexion.openInputStream();<newline46mondego>        int mLongitud = (int) mConexion.getLength();<newline46mondego><newline46mondego>        if (mLongitud > 0) {                <newline46mondego><newline46mondego>            int mActual = 0;<newline46mondego>            int mBytesLeidos = 0;<newline46mondego>            byte[] mBytes = new byte[mLongitud];<newline46mondego><newline46mondego>            while ((mBytesLeidos != mLongitud) && (mActual != -1)){<newline46mondego>                mActual = mIS.read(mBytes, mBytesLeidos, mLongitud - mBytesLeidos);<newline46mondego>                mBytesLeidos += mActual;<newline46mondego>            }               <newline46mondego><newline46mondego>            String mRespuesta = new String(mBytes);     <newline46mondego>            System.out.println(<doubleQuotes46>Respuesta: <doubleQuotes46> + mRespuesta);<newline46mondego><newline46mondego>        } else {                                            <newline46mondego>            throw new Exception(<doubleQuotes46>No se recibió respuesta del servidor<doubleQuotes46>);<newline46mondego>        }                                           <newline46mondego>    } catch (IOException e) {                                   <newline46mondego>        throw new Exception(<doubleQuotes46>Error de lectura o escritura: <doubleQuotes46> + e.getMessage());<newline46mondego>    }       <newline46mondego>}<newline46mondego>"
"3527splitHere46","3265466splitHere46","%27"
"3528splitHere46","3265466splitHere46","AND int1 = var1"
"3529splitHere46","3265466splitHere46","String badInput = rawInput.replace(<doubleQuotes46>'<doubleQuotes46>,<doubleQuotes46>''<doubleQuotes46>);<newline46mondego>String badInteger = rawInteger.replace(<doubleQuotes46>'<doubleQuotes46>,<doubleQuotes46>''<doubleQuotes46>);<newline46mondego>ResultSet rs = statement.executeQuery(<doubleQuotes46>SELECT * FROM records WHERE<doubleQuotes46> +<newline46mondego> <doubleQuotes46>int1 = <doubleQuotes46> + badInteger + <doubleQuotes46> OR col1 = '<doubleQuotes46>+badInput+<doubleQuotes46>'<doubleQuotes46>);<newline46mondego>"
"3530splitHere46","3265726splitHere46","ThreadGroup"
"3531splitHere46","3265726splitHere46","enumerate"
"3532splitHere46","3265726splitHere46","activeCount"
"3533splitHere46","3265726splitHere46","enumerate"
"3534splitHere46","3265726splitHere46","enumerate"
"3535splitHere46","3265726splitHere46","ThreadGroup"
"3536splitHere46","3265726splitHere46","ThreadGroup.uncaughtException"
"3537splitHere46","3265726splitHere46","Thread"
"3538splitHere46","3265726splitHere46","setUncaughtExceptionHandler"
"3539splitHere46","3265939splitHere46","public int[] getFreePorts(int portNumber) throws IOException {<newline46mondego>    int[] result = new int[portNumber];<newline46mondego>    List<ServerSocket> servers = new ArrayList<ServerSocket>(portNumber);<newline46mondego>    ServerSocket tempServer = null;<newline46mondego><newline46mondego>    for (int i=0; i<portNumber; i++) {<newline46mondego>        try {<newline46mondego>            tempServer = new ServerSocket(0);<newline46mondego>            servers.add(tempServer);<newline46mondego>            result[i] = tempServer.getLocalPort();<newline46mondego>        } finally {<newline46mondego>            for (ServerSocket server : servers) {<newline46mondego>                try {<newline46mondego>                    server.close();<newline46mondego>                } catch (IOException e) {<newline46mondego>                    // Continue closing servers.<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"3540splitHere46","3265974splitHere46","b ? d1.doubleValue : d2"
"3541splitHere46","3265974splitHere46","double"
"3542splitHere46","3265974splitHere46","d2"
"3543splitHere46","3265974splitHere46","double"
"3544splitHere46","3265974splitHere46","NullPointerException"
"3545splitHere46","3265974splitHere46","d2 == null"
"3546splitHere46","3266174splitHere46","Criteria"
"3547splitHere46","3266174splitHere46","Criteria"
"3548splitHere46","3266359splitHere46","SessionFactory"
"3549splitHere46","3266359splitHere46","DataSource"
"3550splitHere46","3266359splitHere46","SessionFactory"
"3551splitHere46","3266359splitHere46","DataSource"
"3552splitHere46","3266359splitHere46","HibernateDaoSupport"
"3553splitHere46","3266359splitHere46","SessionFactory"
"3554splitHere46","3266359splitHere46","public class DaoA extends HibernateDaoSupport {<newline46mondego>   // business methods here, that use getHibernateTemplate()<newline46mondego>}<newline46mondego><newline46mondego>public class DaoB extends HibernateDaoSupport {<newline46mondego>   // business methods here, that use getHibernateTemplate()<newline46mondego>}<newline46mondego>"
"3555splitHere46","3266359splitHere46","<bean id=<doubleQuotes46>daoA<doubleQuotes46> class=<doubleQuotes46>DaoA<doubleQuotes46>><newline46mondego>   <property name=<doubleQuotes46>sessionFactory<doubleQuotes46> ref=<doubleQuotes46>mySessionFactory<doubleQuotes46>/><newline46mondego></bean><newline46mondego><newline46mondego><bean id=<doubleQuotes46>daoB<doubleQuotes46> class=<doubleQuotes46>DaoB<doubleQuotes46>><newline46mondego>   <property name=<doubleQuotes46>sessionFactory<doubleQuotes46> ref=<doubleQuotes46>mySessionFactory<doubleQuotes46>/><newline46mondego></bean><newline46mondego>"
"3556splitHere46","3266440splitHere46","String cleaned = original.replaceAll(<doubleQuotes46>\\s*[\\r\\n]+\\s*<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>).trim();<newline46mondego>"
"3557splitHere46","3266440splitHere46","trim()"
"3558splitHere46","3266466splitHere46","Runtime.getRuntime().totalMemory()"
"3559splitHere46","3266614splitHere46","File temp;<newline46mondego>    try {<newline46mondego>        temp = File.createTempFile(<doubleQuotes46>document<doubleQuotes46>, <doubleQuotes46>.htm<doubleQuotes46>);<newline46mondego>        BufferedWriter out = new BufferedWriter(new FileWriter(temp));<newline46mondego>        out.write(<doubleQuotes46>hi !!!<doubleQuotes46>);<newline46mondego>        out.close();<newline46mondego><newline46mondego>        System.out.println(temp.toURI().toString());<newline46mondego><newline46mondego>        java.awt.Desktop.getDesktop().browse(temp.toURI());<newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>"
"3560splitHere46","3266641splitHere46","ResultSet.getDate()"
"3561splitHere46","3266641splitHere46","<a href=<doubleQuotes46>http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/java/sql/Date.html<doubleQuotes46>>java.<strong>sql</strong>.Date</a>"
"3562splitHere46","3266641splitHere46","<a href=<doubleQuotes46>http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/java/util/Date.html<doubleQuotes46>>java.<strong>util</strong>.Date</a>"
"3563splitHere46","3266641splitHere46","ResultSet.getTimestamp()"
"3564splitHere46","3267233splitHere46","System.err.println(<doubleQuotes46>error: <doubleQuotes46> + e.getMessage());<newline46mondego>"
"3565splitHere46","3267233splitHere46","err.printStackTrace();<newline46mondego>"
"3566splitHere46","3267329splitHere46","\S"
"3567splitHere46","3267329splitHere46","[^\s]"
"3568splitHere46","3267329splitHere46","<doubleQuotes46>^<doubleQuotes46> + expr + <doubleQuotes46>$<doubleQuotes46>"
"3569splitHere46","3267329splitHere46",".*\S.*"
"3570splitHere46","3267364splitHere46","// The common interface. Every struct knows how to read and write itself.<newline46mondego>public interface MultiStruct {<newline46mondego>  public void readData(InputStream in);<newline46mondego>  public void writeData(OutputStream out);<newline46mondego>}<newline46mondego><newline46mondego>// This class knows only about storing a format code<newline46mondego>public abstract class AbstractMultiStruct implements MultiStruct {<newline46mondego>  protected static final int FORM1 = 1, FORM2 = 2;<newline46mondego><newline46mondego>  private int format;<newline46mondego><newline46mondego>  public AbstractMultiStruct(int fmt) {<newline46mondego>    this.format = fmt;<newline46mondego>  }<newline46mondego><newline46mondego>  public int getFormat() {<newline46mondego>    return this.format;<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>// This is the first real struct implementation.<newline46mondego>public class Struct1 extends AbstractMultiStruct {<newline46mondego>  private char[] dataA;<newline46mondego>  private char[] dataB;<newline46mondego><newline46mondego>  public Struct1() {<newline46mondego>    super(FORM1);<newline46mondego>    this.dataA = new char[22];<newline46mondego>    this.dataB = new char[33];<newline46mondego>  }<newline46mondego><newline46mondego>  public void readData(InputStream in) {<newline46mondego>    ...<newline46mondego>  }<newline46mondego><newline46mondego>  public void writeData(OutputStream out) {<newline46mondego>    ...<newline46mondego>  }<newline46mondego><newline46mondego>  public String toString() {<newline46mondego>    ...<newline46mondego>  }<newline46mondego><newline46mondego><newline46mondego>}<newline46mondego>"
"3571splitHere46","3267490splitHere46","String html1 = <doubleQuotes46><div xmlns=\<doubleQuotes46>http://www.w3.org/1999/xhtml\<doubleQuotes46>>    <p/>  <p/><p/>    <p/></div><doubleQuotes46>;<newline46mondego>String html2 = <doubleQuotes46><div xmlns=\<doubleQuotes46>http://www.w3.org/1999/xhtml\<doubleQuotes46>> text<p/>        <p/><p/>text    <p/>        </div><doubleQuotes46>;<newline46mondego><newline46mondego>System.out.println(Jsoup.parse(html1).text().isEmpty()); // true<newline46mondego>System.out.println(Jsoup.parse(html2).text().isEmpty()); // false<newline46mondego>"
"3572splitHere46","3267571splitHere46","public class Vehicle {<newline46mondego>     private String id;<newline46mondego>     private String name;<newline46mondego><newline46mondego>     public enum Color {<newline46mondego>       RED, GREEN, ANY;<newline46mondego>     };<newline46mondego><newline46mondego>     private Color color;    <newline46mondego><newline46mondego>     public Color getColor(){<newline46mondego>        return color; <newline46mondego>     }<newline46mondego><newline46mondego>     public void setColor(Color color){<newline46mondego>         this.color = color;<newline46mondego>     }   <newline46mondego><newline46mondego>    } <newline46mondego>"
"3573splitHere46","3267571splitHere46","vehicle.setColor(Vehicle.Color.GREEN);<newline46mondego>"
"3574splitHere46","3267571splitHere46","Vehicle"
"3575splitHere46","3267571splitHere46","public"
"3576splitHere46","3267571splitHere46","enum"
"3577splitHere46","3267970splitHere46","JList list = new JList(listModel);<newline46mondego>"
"3578splitHere46","3267970splitHere46","list = new JList(listModel);<newline46mondego>"
"3579splitHere46","3267970splitHere46","list"
"3580splitHere46","3267970splitHere46","list"
"3581splitHere46","3267970splitHere46","lisTry.list"
"3582splitHere46","3267970splitHere46","NullPointerException"
"3583splitHere46","3268010splitHere46","IllegalStateException"
"3584splitHere46","3268331splitHere46","public boolean scoresIncreasing(int[] scores) {<newline46mondego>    boolean result;<newline46mondego>    for (int i = 0; i < scores.length-1; i++) // fix loop end<newline46mondego>    {<newline46mondego>        if (scores[i] < scores[(i + 1)]) {<newline46mondego>            result = true;<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            result = false;<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    } // missing brace<newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"3585splitHere46","3268331splitHere46","public boolean scoresIncreasing(int[] scores) {<newline46mondego>    boolean result = true; // assume true<newline46mondego>    for (int i = 0; i < scores.length-1; i++) // fix loop end<newline46mondego>    {<newline46mondego>        if (scores[i] > scores[(i + 1)]) return false;<newline46mondego>    } // missing brace<newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"3586splitHere46","3268334splitHere46","os"
"3587splitHere46","3268355splitHere46","return Object.class;"
"3588splitHere46","3268374splitHere46","MessageBuilder.withPayload(<doubleQuotes46>foo<doubleQuotes46>).setHeader(<doubleQuotes46>taskId<doubleQuotes46>, <doubleQuotes46>someTaskId<doubleQuotes46>).build();<newline46mondego>"
"3589splitHere46","3268401splitHere46","protected void paintComponent(Graphics g) {<newline46mondego>    g.drawImage(image, 0, 0, this);<newline46mondego>}<newline46mondego>"
"3590splitHere46","3268401splitHere46","protected void paintComponent(Graphics g)<newline46mondego>{<newline46mondego>    super.paintComponent(g);<newline46mondego>    int iw = image.getWidth(this);<newline46mondego>    int ih = image.getHeight(this);<newline46mondego><newline46mondego>    if (iw != -1 && ih != -1)<newline46mondego>    {<newline46mondego>        int w = getWidth();<newline46mondego>        int h = getHeight();<newline46mondego>        g.drawImage(image, (w -iw)/2, (h-ih)/2, this);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3591splitHere46","3268496splitHere46","DefaultListModel listModel=new DefaultListModel();<newline46mondego>for (int i=0; i<data.length; i++) {<newline46mondego>  listModel.addElement(data[i]);<newline46mondego>}<newline46mondego>list=new JList(listModel);<newline46mondego>"
"3592splitHere46","3268496splitHere46","listModel.addElement(<doubleQuotes46>New item<doubleQuotes46>);<newline46mondego>listModel.removeElementAt(1); // remove the element at position 1<newline46mondego>"
"3593splitHere46","3268518splitHere46","<list>"
"3594splitHere46","3268518splitHere46","<list-index>"
"3595splitHere46","3268518splitHere46","0"
"3596splitHere46","3268518splitHere46","1"
"3597splitHere46","3268518splitHere46","3"
"3598splitHere46","3268518splitHere46","7"
"3599splitHere46","3268518splitHere46","List"
"3600splitHere46","3268787splitHere46","@MapsId"
"3601splitHere46","3268787splitHere46","@Entity<newline46mondego>class Customer {<newline46mondego>  @EmbeddedId CustomerId id;<newline46mondego>  boolean preferredCustomer;<newline46mondego>}<newline46mondego><newline46mondego>@Embeddable<newline46mondego>class CustomerId implements Serializable {<newline46mondego>  @OneToOne<newline46mondego>  @JoinColumns({<newline46mondego>    @JoinColumn(name=<doubleQuotes46>userfirstname_fk<doubleQuotes46>, referencedColumnName=<doubleQuotes46>firstName<doubleQuotes46>),<newline46mondego>    @JoinColumn(name=<doubleQuotes46>userlastname_fk<doubleQuotes46>, referencedColumnName=<doubleQuotes46>lastName<doubleQuotes46>)<newline46mondego>  }) <newline46mondego>  User user;<newline46mondego>  String customerNumber;<newline46mondego>}<newline46mondego><newline46mondego>@Entity <newline46mondego>class User {<newline46mondego>  @EmbeddedId UserId id;<newline46mondego>  Integer age;<newline46mondego>}<newline46mondego><newline46mondego>@Embeddable<newline46mondego>class UserId implements Serializable {<newline46mondego>  String firstName;<newline46mondego>  String lastName;<newline46mondego>}<newline46mondego>"
"3602splitHere46","3268787splitHere46","LinkedTable linkedTable = new LinkedTable();<newline46mondego>linkedTable.setId(1l);<newline46mondego>session.persist(linkedTable);<newline46mondego>session.flush();<newline46mondego><newline46mondego>Test.TestId testId = new Test.TestId();<newline46mondego>testId.setLinkedTable(linkedTable);<newline46mondego>Test test = new Test();<newline46mondego>test.setId(testId);<newline46mondego>session.persist(test);<newline46mondego>session.flush();<newline46mondego>"
"3603splitHere46","3269234splitHere46","Iterator it"
"3604splitHere46","3269234splitHere46","Iterator<Show>"
"3605splitHere46","3269234splitHere46","Show"
"3606splitHere46","3269234splitHere46","List<Show>"
"3607splitHere46","3269234splitHere46","List<Show>"
"3608splitHere46","3269234splitHere46","ArrayList<Show>"
"3609splitHere46","3269234splitHere46","ArrayList"
"3610splitHere46","3269234splitHere46","for (Show show : getCollection()) {<newline46mondego>   amount += show.getSeasonCount();<newline46mondego>}<newline46mondego>"
"3611splitHere46","3269399splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.util.Date;<newline46mondego><newline46mondego>import javax.swing.BorderFactory;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JSlider;<newline46mondego>import javax.swing.border.Border;<newline46mondego>import javax.swing.event.ChangeEvent;<newline46mondego>import javax.swing.event.ChangeListener;<newline46mondego><newline46mondego>import org.jfree.chart.ChartPanel;<newline46mondego>import org.jfree.chart.JFreeChart;<newline46mondego>import org.jfree.chart.axis.DateAxis;<newline46mondego>import org.jfree.chart.axis.NumberAxis;<newline46mondego>import org.jfree.chart.plot.XYPlot;<newline46mondego>import org.jfree.chart.renderer.xy.XYBarRenderer;<newline46mondego>import org.jfree.data.time.DateRange;<newline46mondego>import org.jfree.data.time.Day;<newline46mondego>import org.jfree.data.time.RegularTimePeriod;<newline46mondego>import org.jfree.data.time.TimeSeries;<newline46mondego>import org.jfree.data.time.TimeSeriesCollection;<newline46mondego>import org.jfree.ui.ApplicationFrame;<newline46mondego>import org.jfree.ui.RefineryUtilities;<newline46mondego><newline46mondego>public class DomainTranslateDemo extends ApplicationFrame {<newline46mondego><newline46mondego>    private static class DemoPanel extends JPanel implements ChangeListener {<newline46mondego><newline46mondego>        private static int SLIDER_INITIAL_VALUE = 50;<newline46mondego>        private JSlider slider;<newline46mondego>        private DateAxis domainAxis;<newline46mondego>        private int lastValue = SLIDER_INITIAL_VALUE;<newline46mondego><newline46mondego>        // one month (milliseconds, seconds, minutes, hours, days)<newline46mondego>        private int delta = 1000 * 60 * 60 * 24 * 30;<newline46mondego><newline46mondego>        public DemoPanel() {<newline46mondego>            super(new BorderLayout());<newline46mondego>            JFreeChart chart = createChart();<newline46mondego>            ChartPanel chartPanel = new ChartPanel(chart);<newline46mondego>            chartPanel.setPreferredSize(new java.awt.Dimension(600, 270));<newline46mondego>            chartPanel.setDomainZoomable(true);<newline46mondego>            chartPanel.setRangeZoomable(true);<newline46mondego>            Border border = BorderFactory.createCompoundBorder(<newline46mondego>                BorderFactory.createEmptyBorder(4, 4, 4, 4),<newline46mondego>                BorderFactory.createEtchedBorder()<newline46mondego>            );<newline46mondego>            chartPanel.setBorder(border);<newline46mondego>            add(chartPanel);<newline46mondego><newline46mondego>            JPanel dashboard = new JPanel(new BorderLayout());<newline46mondego>            dashboard.setBorder(BorderFactory.createEmptyBorder(0, 4, 4, 4));   <newline46mondego><newline46mondego>            this.slider = new JSlider(0, 100, SLIDER_INITIAL_VALUE);<newline46mondego>            this.slider.addChangeListener(this);<newline46mondego>            dashboard.add(this.slider);<newline46mondego>            add(dashboard, BorderLayout.SOUTH);<newline46mondego>        }<newline46mondego><newline46mondego>        private JFreeChart createChart() {<newline46mondego><newline46mondego>            TimeSeriesCollection timeSeriesCollection = new TimeSeriesCollection();<newline46mondego>            TimeSeries series = createSerie(500,20);<newline46mondego>            timeSeriesCollection.addSeries(series );<newline46mondego><newline46mondego>            this.domainAxis = new DateAxis(<doubleQuotes46>Time<doubleQuotes46>);<newline46mondego>            NumberAxis rangeAxis = new NumberAxis(<doubleQuotes46><doubleQuotes46>);<newline46mondego>            XYBarRenderer renderer = new XYBarRenderer();<newline46mondego>            renderer.setShadowVisible(false);<newline46mondego>            XYPlot plot = new XYPlot(timeSeriesCollection, domainAxis, rangeAxis, renderer);<newline46mondego><newline46mondego>            JFreeChart chart = new JFreeChart(<newline46mondego>                    <doubleQuotes46>Title<doubleQuotes46>, <newline46mondego>                    JFreeChart.DEFAULT_TITLE_FONT,<newline46mondego>                    plot, <newline46mondego>                    true);<newline46mondego>            // performance<newline46mondego>            chart.setAntiAlias(false);<newline46mondego>            return chart;<newline46mondego>        }<newline46mondego><newline46mondego>        private TimeSeries createSerie(int domainCount,int rangeCount) {<newline46mondego>            TimeSeries timeSeries =  new TimeSeries(<doubleQuotes46>timeSeries1<doubleQuotes46>);<newline46mondego>            Day d = new Day(new Date());<newline46mondego>            RegularTimePeriod regularTimePeriod = d.next();<newline46mondego>            for (int index = 0; index < domainCount; index++) {<newline46mondego>                if (index % 2 == 0) {<newline46mondego>                    double value = (Math.random() * rangeCount);<newline46mondego>                    timeSeries.add(regularTimePeriod,value);<newline46mondego>                }<newline46mondego>                regularTimePeriod = regularTimePeriod.next();<newline46mondego>            }<newline46mondego>            return timeSeries;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void stateChanged(ChangeEvent event) {<newline46mondego>            int value = this.slider.getValue();<newline46mondego>            long minimum = domainAxis.getMinimumDate().getTime();<newline46mondego>            long maximum = domainAxis.getMaximumDate().getTime();<newline46mondego>            if (value<lastValue) { // left<newline46mondego>                minimum = minimum - delta;<newline46mondego>                maximum = maximum - delta;<newline46mondego>            } else { // right<newline46mondego>                minimum = minimum + delta;<newline46mondego>                maximum = maximum + delta;<newline46mondego>            }<newline46mondego>            DateRange range = new DateRange(minimum,maximum);<newline46mondego>            domainAxis.setRange(range);<newline46mondego>            lastValue = value;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public DomainTranslateDemo(String title) {<newline46mondego>        super(title);<newline46mondego>        setContentPane(new DemoPanel());<newline46mondego>    }<newline46mondego><newline46mondego>    public static JPanel createDemoPanel() {<newline46mondego>        return new DemoPanel();<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        DomainTranslateDemo demo = new DomainTranslateDemo(<doubleQuotes46>Translate Demo<doubleQuotes46>);<newline46mondego>        demo.pack();<newline46mondego>        RefineryUtilities.centerFrameOnScreen(demo);<newline46mondego>        demo.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>} <newline46mondego>"
"3612splitHere46","3269560splitHere46","list = new JList(arr.toArray())<newline46mondego>"
"3613splitHere46","3269586splitHere46","@Override  <newline46mondego>public void surfaceChanged(SurfaceHolder holder, int format, final int width, final int height) {  <newline46mondego>  painter = new Runnable() {  <newline46mondego>    @Override  <newline46mondego>    public void run() {  <newline46mondego>      doSomething(width, height, width, height, gl); <newline46mondego>    }  <newline46mondego>  };  <newline46mondego>  handler.post(painter);  <newline46mondego>} <newline46mondego>"
"3614splitHere46","3269775splitHere46","iv.setTag(q)"
"3615splitHere46","3269775splitHere46","iv.setImageResource(q)"
"3616splitHere46","3269775splitHere46","iv"
"3617splitHere46","3269775splitHere46","private ImageView iv;<newline46mondego>"
"3618splitHere46","3269775splitHere46","iv = (ImageView) findViewById(R.id.imageviewyeah);<newline46mondego>"
"3619splitHere46","3269775splitHere46","Intent i = new Intent(this, RandomImage.class); <newline46mondego>startActivity(i); <newline46mondego>break; <newline46mondego>"
"3620splitHere46","3269775splitHere46","iv.setImageResource(mImageIds[rgenerator.nextInt(mImageIds.length)]);<newline46mondego>"
"3621splitHere46","3269798splitHere46","list = new List();<newline46mondego>for (String item : arr) list.add(item);<newline46mondego>"
"3622splitHere46","3269798splitHere46","public void mouseReleased(MouseEvent e) {<newline46mondego>    Object index = list.getSelectedItem();<newline46mondego>    System.out.println(<doubleQuotes46>You have selected: <doubleQuotes46> + index);<newline46mondego>}<newline46mondego>"
"3623splitHere46","3269889splitHere46","src.build.classpath"
"3624splitHere46","3269889splitHere46","<property name=<doubleQuotes46>production.enhanced.dir<doubleQuotes46> value=<doubleQuotes46>${production.classes.dir}/../enhanced<doubleQuotes46> /><newline46mondego><copy todir=<doubleQuotes46>${production.enhanced.dir}<doubleQuotes46>><newline46mondego>    <fileset dir=<doubleQuotes46>${production.classes.dir}<doubleQuotes46> /><newline46mondego></copy><newline46mondego><jdodoclet ...><newline46mondego><jdoc ...><newline46mondego><jar destfile=<doubleQuotes46>dist/model.jar<doubleQuotes46>> <fileset dir=<doubleQuotes46>${production.enhanced.dir}<doubleQuotes46> /><newline46mondego>    <fileset dir=<doubleQuotes46>src<doubleQuotes46> excludes=<doubleQuotes46>**/*.java */.jj */.scala */.groovy<doubleQuotes46> /><newline46mondego></jar><newline46mondego>"
"3625splitHere46","3269954splitHere46","public void mouseClicked(MouseEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego><newline46mondego>public void mousePressed(MouseEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego><newline46mondego>public void mouseReleased(MouseEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego><newline46mondego>public void mouseEntered(MouseEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego><newline46mondego>public void mouseExited(MouseEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego><newline46mondego>public void keyTyped(KeyEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego><newline46mondego>public void keyPressed(KeyEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego><newline46mondego>public void keyReleased(KeyEvent e)<newline46mondego>{<newline46mondego>}<newline46mondego>"
"3626splitHere46","3269984splitHere46","list = new List();<newline46mondego>for (String item : arr) list.add(item);<newline46mondego>"
"3627splitHere46","3269984splitHere46","public void mouseReleased(MouseEvent e) {<newline46mondego>    Object index = list.getSelectedItem();<newline46mondego>    System.out.println(<doubleQuotes46>You have selected: <doubleQuotes46> + index);<newline46mondego>}<newline46mondego>"
"3628splitHere46","3270006splitHere46","Log.java"
"3629splitHere46","3270006splitHere46","public class Log {<newline46mondego><newline46mondego>    private static Updatable console = Updatables.getUpdatable();<newline46mondego><newline46mondego>    private static void consoleOut(String data) {<newline46mondego>        System.out.println(data);<newline46mondego>        console.update(data);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void level0(String data) {<newline46mondego>        if (Status.ConsoleLevel >= 0) {<newline46mondego>            consoleOut(data);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3630splitHere46","3270006splitHere46","Updatable.java"
"3631splitHere46","3270006splitHere46","public interface Updatable {<newline46mondego><newline46mondego>    void update(String);<newline46mondego><newline46mondego>}<newline46mondego>"
"3632splitHere46","3270006splitHere46","ODB2nerConsole.java"
"3633splitHere46","3270006splitHere46","public class OBD2nerConsole extends java.awt.Frame implements Updatable {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void update(String data) {<newline46mondego>        textField1.setText(textField1.getText() + data);<newline46mondego>    }   <newline46mondego><newline46mondego>}<newline46mondego>"
"3634splitHere46","3270006splitHere46","Updatables.java"
"3635splitHere46","3270006splitHere46","public class Updatables {<newline46mondego><newline46mondego>    public Updatable getUpdatable() {<newline46mondego>        return new ODB2nerConsole();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3636splitHere46","3270162splitHere46","JList<newline46mondego>...<newline46mondego>setCellRenderer(new MyCellRenderer());<newline46mondego>...<newline46mondego>class MyCellRenderer extends DefaultListCellRenderer<newline46mondego>{<newline46mondego>  public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)<newline46mondego>  {<newline46mondego>    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);<newline46mondego>    Color bg = <calculated color based on value>;<newline46mondego>    setBackground(bg);<newline46mondego>    setOpaque(true); // otherwise, it's transparent<newline46mondego>    return this;  // DefaultListCellRenderer derived from JLabel, DefaultListCellRenderer.getListCellRendererComponent returns this as well.<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"3637splitHere46","3270428splitHere46","mMyInt=1"
"3638splitHere46","3270428splitHere46","double"
"3639splitHere46","3270428splitHere46","long"
"3640splitHere46","3270428splitHere46","class Escape {<newline46mondego>    Integer mmyInt = 1;<newline46mondego><newline46mondego>    Escape(){<newline46mondego>        new Thread(){<newline46mondego>            public void run(){<newline46mondego>                System.out.println(Escape.this.mmyInt);<newline46mondego>            }<newline46mondego>        }.start();<newline46mondego>    }<newline46mondego> }<newline46mondego>"
"3641splitHere46","3270428splitHere46","Escape"
"3642splitHere46","3270428splitHere46","mmyInt"
"3643splitHere46","3270428splitHere46","null"
"3644splitHere46","3270428splitHere46","map = someNonNullMap();"
"3645splitHere46","3270428splitHere46","null"
"3646splitHere46","3270428splitHere46","map"
"3647splitHere46","3270428splitHere46","map"
"3648splitHere46","3270428splitHere46","class Clever {<newline46mondego>   Map map;<newline46mondego><newline46mondego>   Map getMap(){<newline46mondego>       if(map==null){<newline46mondego>           map = deriveMap();        }<newline46mondego>       return map;<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3649splitHere46","3270428splitHere46","String"
"3650splitHere46","3270428splitHere46","class String {<newline46mondego>   int hashCode = 0;<newline46mondego><newline46mondego>   public int hashCode(){<newline46mondego>       if(hashCode==0){<newline46mondego>           hashCode = deriveHashCode();<newline46mondego>    }<newline46mondego>       return hashCode;<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3651splitHere46","3270428splitHere46","volatile"
"3652splitHere46","3270428splitHere46","volatile"
"3653splitHere46","3270493splitHere46","public void paint(Graphics g) {<newline46mondego>   super.paint(g);<newline46mondego>   // your code<newline46mondego>}<newline46mondego>"
"3654splitHere46","3270556splitHere46","MessageSource"
"3655splitHere46","3270556splitHere46","typeMismatch.<objectName>.dteStartDate"
"3656splitHere46","3270700splitHere46","put(Object key, Object value)"
"3657splitHere46","3270700splitHere46","get(Object key)"
"3658splitHere46","3270700splitHere46","remove(Object key)"
"3659splitHere46","3270700splitHere46","containsKey(Object key)"
"3660splitHere46","3270742splitHere46","keyEvent.getKeyLocation() == KeyEvent.KEY_LOCATION_NUMPAD<newline46mondego>"
"3661splitHere46","3270743splitHere46","HttpURLConnection"
"3662splitHere46","3270743splitHere46","HttpClient"
"3663splitHere46","3270743splitHere46","HttpGet"
"3664splitHere46","3270743splitHere46","org.apache.http"
"3665splitHere46","3271095splitHere46","<persistence><newline46mondego>   <persistence-unit name=<doubleQuotes46>datasourceOne<doubleQuotes46>><newline46mondego>       <jta-data-source>java:/DefaultDS</jta-data-source><newline46mondego>       <jar-file>../MyApp.jar</jar-file><newline46mondego>       <class>org.acme.Employee</class><newline46mondego>       <class>org.acme.Person</class><newline46mondego>       <class>org.acme.Address</class><newline46mondego>       <properties><newline46mondego>            <property name=<doubleQuotes46>hibernate.dialect<doubleQuotes46> value=<doubleQuotes46>org.hibernate.dialect.HSQLDialect<doubleQuotes46>/><newline46mondego>            <property name=<doubleQuotes46>hibernate.hbm2ddl.auto<doubleQuotes46> value=<doubleQuotes46>create-drop<doubleQuotes46>/><newline46mondego>       </properties><newline46mondego>   </persistence-unit><newline46mondego><newline46mondego>   <persistence-unit name=<doubleQuotes46>datasourceTwo<doubleQuotes46>><newline46mondego>     <!-- some configuration --><newline46mondego>  </persistence-unit><newline46mondego></persistence><newline46mondego>"
"3666splitHere46","3271134splitHere46","java"
"3667splitHere46","3271134splitHere46","java"
"3668splitHere46","3271137splitHere46","SwingWorker"
"3669splitHere46","3271137splitHere46","SwingUtilities.invokeLater"
"3670splitHere46","3271137splitHere46","update()"
"3671splitHere46","3271137splitHere46","repaint()"
"3672splitHere46","3271167splitHere46","for(int layer = 0; layer <countLayers; layer++);<newline46mondego>"
"3673splitHere46","3271167splitHere46","for(int layer = 0; layer <countLayers; layer++)<newline46mondego>"
"3674splitHere46","3271167splitHere46","{....}"
"3675splitHere46","3271167splitHere46","layer"
"3676splitHere46","3271183splitHere46","<repository><newline46mondego>    <id>java.net</id><newline46mondego>    <url>http://download.java.net/maven/2</url><newline46mondego></repository><newline46mondego><repository><newline46mondego>    <id>jboss</id><newline46mondego>    <url>http://repository.jboss.com/maven2</url><newline46mondego></repository><newline46mondego>"
"3677splitHere46","3271296splitHere46","public void foo() {<newline46mondego><newline46mondego>        final int x = 1;<newline46mondego><newline46mondego>        new Runnable() {<newline46mondego><newline46mondego><newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                int i = x;<newline46mondego>            }<newline46mondego><newline46mondego>        };<newline46mondego><newline46mondego>}<newline46mondego>"
"3678splitHere46","3271474splitHere46","TaskEdit.java:18"
"3679splitHere46","3271530splitHere46","setLength"
"3680splitHere46","3271530splitHere46","O(N)"
"3681splitHere46","3271530splitHere46","delete"
"3682splitHere46","3271530splitHere46","insert"
"3683splitHere46","3271530splitHere46","O(N^2)"
"3684splitHere46","3271530splitHere46","O(N)"
"3685splitHere46","3271530splitHere46","removeIntervals"
"3686splitHere46","3271530splitHere46","StringBuffer"
"3687splitHere46","3271530splitHere46","int[][] intervals"
"3688splitHere46","3271530splitHere46","int[]"
"3689splitHere46","3271530splitHere46","{ start, end }"
"3690splitHere46","3271530splitHere46","StringBuffer"
"3691splitHere46","3271530splitHere46","overwrite"
"3692splitHere46","3271530splitHere46","setLength"
"3693splitHere46","3271530splitHere46","static void overwrite(StringBuffer sb, int dst, int srcFrom, int srcTo) {<newline46mondego>    for (int i = srcFrom; i < srcTo; i++) {<newline46mondego>        sb.setCharAt(dst++, sb.charAt(i));<newline46mondego>    }<newline46mondego>}<newline46mondego>static int safeGet(int[][] arr, int index, int defaultValue) {<newline46mondego>    return (index < arr.length) ? arr[index][0] : defaultValue;<newline46mondego>}<newline46mondego>static void removeIntervals(StringBuffer sb, int[][] intervals) {<newline46mondego>    int dst = safeGet(intervals, 0, 0);<newline46mondego>    int removed = 0;<newline46mondego>    for (int i = 0; i < intervals.length; i++) {<newline46mondego>        int start = intervals[i][0];<newline46mondego>        int end   = intervals[i][1];<newline46mondego>        int nextStart = safeGet(intervals, i+1, sb.length());<newline46mondego>        overwrite(sb, dst, end, nextStart);<newline46mondego>        removed += end - start;<newline46mondego>        dst += nextStart - end;<newline46mondego>    }<newline46mondego>    sb.setLength(sb.length() - removed);<newline46mondego>}<newline46mondego>"
"3694splitHere46","3271530splitHere46","String text = <doubleQuotes46>01234567890123456789<doubleQuotes46>;<newline46mondego>    int[][][] tests = {<newline46mondego>        { { 0, 5, },<newline46mondego>        }, // simple test, removing prefix<newline46mondego>        { { 1, 2, }, { 3, 4, }, { 5, 6, }<newline46mondego>        }, // multiple infix removals<newline46mondego>        { { 3, 7, }, { 18, 20, },<newline46mondego>        }, // suffix removal<newline46mondego>        {<newline46mondego>        }, // no-op<newline46mondego>        { { 0, 20 },<newline46mondego>        }, // remove whole thing<newline46mondego>        { { 7, 10 }, { 10, 13 }, {15, 15 }, <newline46mondego>        }, // adjacent intervals, empty intervals<newline46mondego>    };<newline46mondego><newline46mondego>    for (int[][] test : tests) {<newline46mondego>        StringBuffer sb = new StringBuffer(text);<newline46mondego>        System.out.printf(<doubleQuotes46>> '%s'%n<doubleQuotes46>, sb);<newline46mondego>        System.out.printf(<doubleQuotes46>- %s%n<doubleQuotes46>, java.util.Arrays.deepToString(test));<newline46mondego>        removeIntervals(sb, test);<newline46mondego>        System.out.printf(<doubleQuotes46>= '%s'%n%n<doubleQuotes46>, sb);<newline46mondego>    }<newline46mondego>"
"3695splitHere46","3271530splitHere46","> '01234567890123456789'<newline46mondego>- [[0, 5]]<newline46mondego>= '567890123456789'<newline46mondego><newline46mondego>> '01234567890123456789'<newline46mondego>- [[1, 2], [3, 4], [5, 6]]<newline46mondego>= '02467890123456789'<newline46mondego><newline46mondego>> '01234567890123456789'<newline46mondego>- [[3, 7], [18, 20]]<newline46mondego>= '01278901234567'<newline46mondego><newline46mondego>> '01234567890123456789'<newline46mondego>- []<newline46mondego>= '01234567890123456789'<newline46mondego><newline46mondego>> '01234567890123456789'<newline46mondego>- [[0, 20]]<newline46mondego>= ''<newline46mondego><newline46mondego>> '01234567890123456789'<newline46mondego>- [[7, 10], [10, 13], [15, 15]]<newline46mondego>= '01234563456789'<newline46mondego>"
"3696splitHere46","3271530splitHere46","indexOf"
"3697splitHere46","3271530splitHere46","String text =<newline46mondego>        <doubleQuotes46>DEL: line1\n<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>KEP: line2\r\n<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>DEL: line3\n<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>KEP: line4\r<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>DEL: line5\r<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>DEL: line6\r<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>KEP: line7\n<doubleQuotes46> +<newline46mondego>        <doubleQuotes46>DEL: line8<doubleQuotes46>;<newline46mondego>    StringBuffer sb = new StringBuffer(text);<newline46mondego>    Pattern delLine = Pattern.compile(<doubleQuotes46>(?m)^DEL:.*$<doubleQuotes46>);<newline46mondego>    String cleanedUp = delLine.matcher(sb).replaceAll(<doubleQuotes46><deleted!><doubleQuotes46>);<newline46mondego>    System.out.println(cleanedUp);<newline46mondego>"
"3698splitHere46","3271530splitHere46","<deleted!><newline46mondego>KEP: line2<newline46mondego><deleted!><newline46mondego>KEP: line4<newline46mondego><deleted!><newline46mondego><deleted!><newline46mondego>KEP: line7<newline46mondego><deleted!><newline46mondego>"
"3699splitHere46","3271530splitHere46","java.util.regex.Pattern"
"3700splitHere46","3271596splitHere46","<properties><newline46mondego>  <org.hibernate.version>3.4.0.GA</org.hibernate.version><newline46mondego></properties><newline46mondego><repositories><newline46mondego>  <repository><newline46mondego>    <id>repository.jboss.org-public</id><newline46mondego>    <name>JBoss Public Repository Group</name><newline46mondego>    <url>https://repository.jboss.org/nexus/content/groups/public</url><newline46mondego>  </repository><newline46mondego></repositories><newline46mondego><dependencies><newline46mondego>  <dependency><newline46mondego>    <groupId>org.hibernate</groupId><newline46mondego>    <artifactId>hibernate-entitymanager</artifactId><newline46mondego>    <version>${org.hibernate.version}</version><newline46mondego>  </dependency><newline46mondego>  <!-- Hibernate uses slf4j for logging, we use log4j as backend --><newline46mondego>  <dependency><newline46mondego>    <groupId>log4j</groupId><newline46mondego>    <artifactId>log4j</artifactId><newline46mondego>    <version>1.2.14</version><newline46mondego>  </dependency><newline46mondego></dependencies><newline46mondego>"
"3701splitHere46","3271596splitHere46","org.hibernate.version"
"3702splitHere46","3271596splitHere46","<properties><newline46mondego>  <org.hibernate.version>3.5.3-Final</org.hibernate.version><newline46mondego></properties><newline46mondego>"
"3703splitHere46","3271603splitHere46","public class MainView extends JFrame implements ActionListener{<newline46mondego>    JRadioButton radioButton1 = new JRadioButton(<doubleQuotes46>Button 1<doubleQuotes46>);<newline46mondego>    JRadioButton radioButton2 = new JRadioButton(<doubleQuotes46>Button 2<doubleQuotes46>);<newline46mondego>    JCheckBox checkBox = new JCheckBox(<doubleQuotes46>CheckBox<doubleQuotes46>);<newline46mondego>    ButtonGroup buttonGroup = new ButtonGroup();<newline46mondego><newline46mondego>    public MainView() {<newline46mondego>        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);<newline46mondego>        setSize(300, 100);<newline46mondego>        setLayout(new GridLayout());<newline46mondego><newline46mondego>        buttonGroup.add(radioButton1);<newline46mondego>        buttonGroup.add(radioButton2);<newline46mondego>        radioButton1.addActionListener(this);<newline46mondego>        radioButton2.addActionListener(this);<newline46mondego>        radioButton2.setSelected(true);  // remove to have no button selected<newline46mondego><newline46mondego>        // ActionListener for CheckBox<newline46mondego>        checkBox.addActionListener(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                // TODO: Your action here<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        getContentPane().add(radioButton1);<newline46mondego>        getContentPane().add(radioButton2);<newline46mondego>        getContentPane().add(checkBox);<newline46mondego>        setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        checkBox.setVisible(radioButton2.isSelected());<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new MainView();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3704splitHere46","3271603splitHere46","JCheckBox"
"3705splitHere46","3271603splitHere46","frame1.add(new JCheckBox(<doubleQuotes46>JIL<doubleQuotes46>));"
"3706splitHere46","3271603splitHere46","frame1.getContentPane().add(jb);"
"3707splitHere46","3271603splitHere46","JRadioButton"
"3708splitHere46","3271603splitHere46","JCheckBox"
"3709splitHere46","3271603splitHere46","ActionListener"
"3710splitHere46","3271603splitHere46","checkBox.setVisible(radioButton.isSelected())"
"3711splitHere46","3271680splitHere46","Future"
"3712splitHere46","3271680splitHere46","java.util.concurrent"
"3713splitHere46","3271895splitHere46","LayoutInflater layoutInflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);<newline46mondego>    LinearLayout dialerLayout = (LinearLayout) layoutInflater.inflate(R.layout.phone_dialer, null);<newline46mondego>    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT);<newline46mondego>    dialerLayout.setLayoutParams(params);<newline46mondego>    LinearLayout tabDialer = (LinearLayout) findViewById(R.id.tabDialer);<newline46mondego>    tabDialer.addView(dialerLayout);<newline46mondego>"
"3714splitHere46","3272107splitHere46","createKey(Key parent, java.lang.String kind, long id)<newline46mondego>          Creates a new Key with the provided parent from its kind and ID.<newline46mondego>"
"3715splitHere46","3272107splitHere46","Key key = new Builder(<doubleQuotes46>ArticleCollection<doubleQuotes46>, 123).addChild(<doubleQuotes46>Article<doubleQuotes46>, 1424).getKey();<newline46mondego>"
"3716splitHere46","3272107splitHere46","addChild"
"3717splitHere46","3272107splitHere46","getKey"
"3718splitHere46","3272328splitHere46","Object"
"3719splitHere46","3272328splitHere46","Object#equals()"
"3720splitHere46","3272328splitHere46","equals()"
"3721splitHere46","3272328splitHere46","equals()"
"3722splitHere46","3272328splitHere46","hashCode()"
"3723splitHere46","3272347splitHere46","java.util.Timer"
"3724splitHere46","3272347splitHere46","this.isLazy = lasyOrHardworking;<newline46mondego>"
"3725splitHere46","3272347splitHere46","isLazy"
"3726splitHere46","3272347splitHere46","lasyOrHardworking"
"3727splitHere46","3272347splitHere46","this.isLazy = isLazy;<newline46mondego>"
"3728splitHere46","3272347splitHere46","bool == true"
"3729splitHere46","3272347splitHere46","if(isLazy && (amountWorked <= 34))<newline46mondego>"
"3730splitHere46","3272386splitHere46","toString()"
"3731splitHere46","3272386splitHere46","Arrays.toString()"
"3732splitHere46","3272386splitHere46","System.out.println(Arrays.toString(getItem(1)));<newline46mondego>"
"3733splitHere46","3272386splitHere46","[Ljava.lang.String"
"3734splitHere46","3272386splitHere46","String"
"3735splitHere46","3272386splitHere46","[L"
"3736splitHere46","3272430splitHere46","j2me-maven-plugin"
"3737splitHere46","3272430splitHere46","pom.xml"
"3738splitHere46","3272430splitHere46","j2me-maven-plugin"
"3739splitHere46","3272430splitHere46","pom.xml"
"3740splitHere46","3272484splitHere46","@try"
"3741splitHere46","3272484splitHere46","@catch"
"3742splitHere46","3272484splitHere46","NSError"
"3743splitHere46","3272484splitHere46","NSError"
"3744splitHere46","3272484splitHere46","NSException"
"3745splitHere46","3272519splitHere46","// create a Calendar for the 1st of the required month<newline46mondego>int year = 2010;<newline46mondego>int month = Calendar.JANUARY;<newline46mondego>Calendar cal = new GregorianCalendar(year, month, 1);<newline46mondego>do {<newline46mondego>    // get the day of the week for the current day<newline46mondego>    int day = cal.get(Calendar.DAY_OF_WEEK);<newline46mondego>    // check if it is a Saturday or Sunday<newline46mondego>    if (day == Calendar.SATURDAY || day == Calendar.SUNDAY) {<newline46mondego>        // print the day - but you could add them to a list or whatever<newline46mondego>        System.out.println(cal.get(Calendar.DAY_OF_MONTH));<newline46mondego>    }<newline46mondego>    // advance to the next day<newline46mondego>    cal.add(Calendar.DAY_OF_YEAR, 1);<newline46mondego>}  while (cal.get(Calendar.MONTH) == month);<newline46mondego>// stop when we reach the start of the next month<newline46mondego>"
"3746splitHere46","3272565splitHere46","URL url = getClass().getResource(<doubleQuotes46>images/BB.jpg<doubleQuotes46>);<newline46mondego>BufferedImage picture = ImageIO.read(url);<newline46mondego>"
"3747splitHere46","3272565splitHere46","Graphics2D g = picture.createGraphics();<newline46mondego>g.setXORMode(new Color(255,0,0) )<newline46mondego>g.dispose();<newline46mondego>"
"3748splitHere46","3272565splitHere46","void paintComponent(Graphics g)"
"3749splitHere46","3272621splitHere46","// The RemoteServiceRelativePath annotation automatically calls setServiceEntryPoint()<newline46mondego>@RemoteServiceRelativePath(<doubleQuotes46>email<doubleQuotes46>)<newline46mondego>public interface MyEmailService extends RemoteService {<newline46mondego>  void emptyMyInbox(String username, String password);<newline46mondego>}<newline46mondego>"
"3750splitHere46","3272649splitHere46","addInv"
"3751splitHere46","3272649splitHere46","public class Item {<newline46mondego>    ...<newline46mondego><newline46mondego>    public static void main(String args[]) {<newline46mondego>        addInv(1);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void addInv(int e) {<newline46mondego>        ...<newline46mondego>    }<newline46mondego><newline46mondego>    public static String[] getItem(int e) {<newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3752splitHere46","3272649splitHere46","Item"
"3753splitHere46","3272649splitHere46","main"
"3754splitHere46","3272649splitHere46","public class Item {<newline46mondego>    ...<newline46mondego><newline46mondego>    public static void main(String args[]) {<newline46mondego>        Item item = new Item();<newline46mondego>        item.addInv(1);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3755splitHere46","3272808splitHere46","String s = <doubleQuotes46>$23.24 word -123<doubleQuotes46>;<newline46mondego>    Scanner fi = new Scanner(s);<newline46mondego>    //anything other than alphanumberic characters, <newline46mondego>    //comma, dot or negative sign is skipped<newline46mondego>    fi.useDelimiter(<doubleQuotes46>[^\\p{Alnum},\\.-]<doubleQuotes46>); <newline46mondego>    while (true) {<newline46mondego>        if (fi.hasNextInt())<newline46mondego>            System.out.println(<doubleQuotes46>Int: <doubleQuotes46> + fi.nextInt());<newline46mondego>        else if (fi.hasNextDouble())<newline46mondego>            System.out.println(<doubleQuotes46>Double: <doubleQuotes46> + fi.nextDouble());<newline46mondego>        else if (fi.hasNext())<newline46mondego>            System.out.println(<doubleQuotes46>word: <doubleQuotes46> + fi.next());<newline46mondego>        else<newline46mondego>            break;<newline46mondego>    }<newline46mondego>"
"3756splitHere46","3272808splitHere46","fi.useLocale(Locale.FRANCE);"
"3757splitHere46","3272830splitHere46","Duration"
"3758splitHere46","3272830splitHere46","Date"
"3759splitHere46","3272830splitHere46","Calendar"
"3760splitHere46","3272830splitHere46","long"
"3761splitHere46","3272855splitHere46","public void paint(Painter painter)  <newline46mondego>{   <newline46mondego>   painter.draw(x, y, unit_sprite);<newline46mondego>}<newline46mondego>"
"3762splitHere46","3272859splitHere46","STUDENT_ROLE"
"3763splitHere46","3272859splitHere46","public enum RoleType { <newline46mondego>  ...<newline46mondego>  public static final String STUDENT_ROLE = <doubleQuotes46>STUDENT<doubleQuotes46>;<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"3764splitHere46","3272859splitHere46","RoleType"
"3765splitHere46","3272859splitHere46","String"
"3766splitHere46","3272859splitHere46","String"
"3767splitHere46","3272868splitHere46","SingletonObjectDemo singletonObject"
"3768splitHere46","3272868splitHere46","private static SingletonObjectDemo singletonObject = new SingletonObjectDemo();<newline46mondego>"
"3769splitHere46","3272868splitHere46","getSingletonObject()"
"3770splitHere46","3272868splitHere46","// note that this initializes the object to null by default<newline46mondego>private static SingletonObjectDemo singletonObject;<newline46mondego>"
"3771splitHere46","3272868splitHere46","if (singletonObject == null) {<newline46mondego>        singletonObject = new SingletonObjectDemo();<newline46mondego>    }<newline46mondego>"
"3772splitHere46","3272870splitHere46","#include <win32.h>"
"3773splitHere46","3273251splitHere46","WebApplicationContext"
"3774splitHere46","3273251splitHere46","classpath:/"
"3775splitHere46","3273251splitHere46","ResourceLoader"
"3776splitHere46","3273361splitHere46","StreamSource stylesource = new StreamSource(getClass().getResourceAsStream(<doubleQuotes46>proper-indenting.xsl<doubleQuotes46>));<newline46mondego>Transformer transformer = TransformerFactory.newInstance().newTransformer(stylesource);<newline46mondego>"
"3777splitHere46","3273361splitHere46","<!DOCTYPE stylesheet [<newline46mondego>  <!ENTITY cr <doubleQuotes46><xsl:text><newline46mondego></xsl:text><doubleQuotes46>><newline46mondego>]><newline46mondego><newline46mondego><newline46mondego>    <xsl:stylesheet<newline46mondego>        xmlns:xsl=<doubleQuotes46>http://www.w3.org/1999/XSL/Transform<doubleQuotes46> <newline46mondego>        xmlns:xalan=<doubleQuotes46>http://xml.apache.org/xslt<doubleQuotes46> <newline46mondego>        version=<doubleQuotes46>1.0<doubleQuotes46>><newline46mondego><newline46mondego>        <xsl:output method=<doubleQuotes46>xml<doubleQuotes46> indent=<doubleQuotes46>yes<doubleQuotes46> xalan:indent-amount=<doubleQuotes46>3<doubleQuotes46>/> <newline46mondego><newline46mondego>        <!-- copy out the xml --><newline46mondego>        <xsl:template match=<doubleQuotes46>* | @*<doubleQuotes46>><newline46mondego>            <xsl:copy><xsl:copy-of select=<doubleQuotes46>@*<doubleQuotes46>/><xsl:apply-templates/></xsl:copy><newline46mondego>        </xsl:template><newline46mondego><newline46mondego>    </xsl:stylesheet><newline46mondego>"
"3778splitHere46","3273380splitHere46","OutOfMemoryException"
"3779splitHere46","3273380splitHere46","FileOutputStream"
"3780splitHere46","3273380splitHere46","DataOutputStream"
"3781splitHere46","3273380splitHere46","DataOutputStream"
"3782splitHere46","3273380splitHere46","FileOutputStream"
"3783splitHere46","3273380splitHere46","BufferedOutputStream"
"3784splitHere46","3273395splitHere46","String canEat = <doubleQuotes46>false<doubleQuotes46>;"
"3785splitHere46","3273395splitHere46","item"
"3786splitHere46","3273395splitHere46","inventory"
"3787splitHere46","3273395splitHere46","public enum InventoryItem<newline46mondego>{<newline46mondego>    PICKAXE(<doubleQuotes46>Pickaxe<doubleQuotes46>, <doubleQuotes46>Can be used to mine with<doubleQuotes46>, ItemType.Tool,<newline46mondego>            5, 2, 0)<newline46mondego><newline46mondego>    EPIC_PICKAXE(<doubleQuotes46>Super mega awesome Pickaxe<doubleQuotes46>, <doubleQuotes46>Can be used to mine with, but epically<doubleQuotes46>, ItemType.Tool,<newline46mondego>            1000000, 100, 0)<newline46mondego><newline46mondego><newline46mondego>    public static enum ItemType {<newline46mondego>        TOOL,<newline46mondego>        WEAPON<newline46mondego>    }<newline46mondego><newline46mondego>    public final String name, description;<newline46mondego>    public final ItemType type;<newline46mondego>    public final boolean canSell, canEat, canEquip;<newline46mondego>    public final int earnedCoins, attackAdd, defenseAdd;<newline46mondego><newline46mondego>    private InventoryItem(String name, String description, ItemType type<newline46mondego>                          int earnedCoins, int attackAdd, int defenseAdd,<newline46mondego>                          boolean canSell, boolean canEat, boolean canEquip)<newline46mondego>    {<newline46mondego>        this.name        = name;<newline46mondego>        this.description = description;<newline46mondego>        this.type        = type<newline46mondego>        this.canSell     = canSell;<newline46mondego>        this.canEat      = canEat;<newline46mondego>        this.canEquip    = canEquip;<newline46mondego>        this.earnedCoins = earnedCoins;<newline46mondego>    }<newline46mondego><newline46mondego>    private InventoryItem(String name, String description, ItemType type<newline46mondego>                          int earnedCoins, int attackAdd, int defenseAdd)<newline46mondego>    {<newline46mondego>        this(name, description, type,<newline46mondego>             earnedCoins, attackAdd, defenseAdd,<newline46mondego>             true, false, true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3788splitHere46","3273395splitHere46","List<InventoryItem> inventory = new ArrayList<InventoryItem>()"
"3789splitHere46","3273427splitHere46","sun-web-app"
"3790splitHere46","3273427splitHere46","sun-web.xml"
"3791splitHere46","3273427splitHere46","sun-web-app"
"3792splitHere46","3273427splitHere46","<property name=<doubleQuotes46>alternatedocroot_1<doubleQuotes46> value=<doubleQuotes46>from=/ext/* dir=/path/to/ext<doubleQuotes46>/><newline46mondego>"
"3793splitHere46","3273490splitHere46","tab = tabs.newTabSpec(<doubleQuotes46>tab_Busquedas<doubleQuotes46>);<newline46mondego>tab.setContent(new Intent().setClassName(<doubleQuotes46>com.grapp<doubleQuotes46>, <doubleQuotes46>com.grapp.homes<doubleQuotes46>).putExtras(bundle));<newline46mondego>tab.setIndicator(null,null);<newline46mondego>tabs.addTab(tab);<newline46mondego>//here you set the image with rounded corners over the tab.<newline46mondego>tabs.getTabWidget().getChildAt(0).setBackgroundResource(R.drawable.mytab_roundedcorners);<newline46mondego>"
"3794splitHere46","3273597splitHere46","//element[normalize-space(@name)==<doubleQuotes46>Element<doubleQuotes46>]<newline46mondego>"
"3795splitHere46","3273603splitHere46","Double"
"3796splitHere46","3273603splitHere46","valueOf()"
"3797splitHere46","3273651splitHere46","Map<T,T>"
"3798splitHere46","3273651splitHere46","HashSet<T>"
"3799splitHere46","3273651splitHere46","aSet"
"3800splitHere46","3273651splitHere46","HashSet"
"3801splitHere46","3273651splitHere46","HashMap<T,HashSet<T>>"
"3802splitHere46","3273651splitHere46","Map"
"3803splitHere46","3273651splitHere46","HashSet"
"3804splitHere46","3273651splitHere46","class SomeClass<T><newline46mondego>{<newline46mondego>    /* ... other methods ... */<newline46mondego><newline46mondego>    private Map<T,T> aSet;<newline46mondego><newline46mondego>    public T filter(Object value)<newline46mondego>    {<newline46mondego>        // Will return the properly-typed object if it's in<newline46mondego>        // the <doubleQuotes46>set<doubleQuotes46> otherwise will return null<newline46mondego>        return aSet.get(value);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3805splitHere46","3273849splitHere46","BufferedReader"
"3806splitHere46","3273941splitHere46","TextView tv = (TextView)view.findViewById(R.id.txt_Genius);<newline46mondego>String genus = tv.getText().toString();<newline46mondego>"
"3807splitHere46","3273941splitHere46","i.putExtra(<doubleQuotes46>genius<doubleQuotes46>, genius);<newline46mondego>"
"3808splitHere46","3273941splitHere46","Bundle extras = getIntent().getExtras();<newline46mondego>String genius = extras.getString(<doubleQuotes46>genius<doubleQuotes46>);<newline46mondego>// pop some toast to show the value of genius - not required but shows it works :) <newline46mondego>Toast.makeText(this, <doubleQuotes46>Genius value: <doubleQuotes46> + genius, Toast.LENGTH_SHORT).show();<newline46mondego>"
"3809splitHere46","3274101splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.Iterator;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class Item {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        List<String> l = new ArrayList<String>();<newline46mondego>        l.add(<doubleQuotes46>1<doubleQuotes46>);<newline46mondego>        l.add(<doubleQuotes46>2<doubleQuotes46>);<newline46mondego>        l.add(<doubleQuotes46>3<doubleQuotes46>);<newline46mondego>        l.add(<doubleQuotes46>4<doubleQuotes46>);<newline46mondego><newline46mondego>        Iterator<String> iter = l.iterator();<newline46mondego>        while(iter.hasNext())<newline46mondego>        {<newline46mondego>            String value = iter.next();<newline46mondego>            if(<doubleQuotes46>1<doubleQuotes46>.equals(value))<newline46mondego>            {<newline46mondego>                iter.remove();<newline46mondego>            }<newline46mondego>            else<newline46mondego>            {<newline46mondego>                System.out.println(value);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3810splitHere46","3274183splitHere46","myPosition_Lat = XX<newline46mondego>myPosition_Long = YY<newline46mondego>"
"3811splitHere46","3274183splitHere46","all_stops[]"
"3812splitHere46","3274183splitHere46","all_stops[]"
"3813splitHere46","3274183splitHere46","myPosition"
"3814splitHere46","3274183splitHere46","distance = Math.abs(myPosition_Lat - the_Lat) + Math.abs(myPosition_Long – the_Long);<newline46mondego>"
"3815splitHere46","3274183splitHere46","the_Lat"
"3816splitHere46","3274183splitHere46","the_Long"
"3817splitHere46","3274207splitHere46","import java.io.*;<newline46mondego>import javax.xml.parsers.*;<newline46mondego>import org.w3c.dom.*;<newline46mondego>import org.xml.sax.*;<newline46mondego><newline46mondego>public class DOMElements{<newline46mondego>   static public void main(String[] arg){<newline46mondego>     try {<newline46mondego>       BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));<newline46mondego>       System.out.print(<doubleQuotes46>Enter XML File name: <doubleQuotes46>);<newline46mondego>       String xmlFile = bf.readLine();<newline46mondego>       File file = new File(xmlFile);<newline46mondego>       if(file.exists()){<newline46mondego>         // Create a factory<newline46mondego>         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<newline46mondego>         // Use the factory to create a builder<newline46mondego>         DocumentBuilder builder = factory.newDocumentBuilder();<newline46mondego>         Document doc = builder.parse(xmlFile);<newline46mondego>         // Get a list of all elements in the document<newline46mondego>         NodeList list = doc.getElementsByTagName(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>         System.out.println(<doubleQuotes46>XML Elements: <doubleQuotes46>);<newline46mondego>         for (int i=0; i<list.getLength(); i++) {<newline46mondego>           // Get element<newline46mondego>           Element element = (Element)list.item(i);<newline46mondego>           System.out.println(element.getNodeName());<newline46mondego>         }<newline46mondego>       }<newline46mondego>       else{<newline46mondego>         System.out.print(<doubleQuotes46>File not found!<doubleQuotes46>);<newline46mondego>       }<newline46mondego>     }<newline46mondego>     catch (Exception e) {<newline46mondego>       System.exit(1);<newline46mondego>     }<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3818splitHere46","3274216splitHere46","private int x;<newline46mondego><newline46mondego>public int getX()<newline46mondego>{<newline46mondego>    return x;<newline46mondego>}<newline46mondego><newline46mondego>public void setX(int anX)<newline46mondego>{<newline46mondego>    x = anX;<newline46mondego>    updateLabel(<doubleQuotes46>This is x:<doubleQuotes46> + anX)<newline46mondego>}<newline46mondego><newline46mondego>public void process()<newline46mondego>{<newline46mondego>    while(true)<newline46mondego>    {<newline46mondego>        int anX = getX();<newline46mondego>        setX(anX + 1);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3819splitHere46","3274281splitHere46","component.setFocusable(false);<newline46mondego>"
"3820splitHere46","3274328splitHere46","ButtonTabComponent"
"3821splitHere46","3274328splitHere46","TabComponentsDemo"
"3822splitHere46","3274328splitHere46","label.setPreferredSize(new Dimension(...));<newline46mondego>"
"3823splitHere46","3274328splitHere46","JTabbedPane"
"3824splitHere46","3274328splitHere46","LayoutManager"
"3825splitHere46","3274328splitHere46","Container"
"3826splitHere46","3274328splitHere46","BorderLayout"
"3827splitHere46","3274328splitHere46","add(pane)"
"3828splitHere46","3274328splitHere46","Container"
"3829splitHere46","3274328splitHere46","TabbedPaneUI"
"3830splitHere46","3274328splitHere46","SCROLL_TAB_LAYOUT"
"3831splitHere46","3274348splitHere46","@AutoWired"
"3832splitHere46","3274348splitHere46","@Service<newline46mondego>public class UserServiceImpl implements UserService{<newline46mondego><newline46mondego>    @AutoWired<newline46mondego>    UserDao userDao;<newline46mondego><newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"3833splitHere46","3274348splitHere46","<context:component-scan/>"
"3834splitHere46","3274348splitHere46","@Service"
"3835splitHere46","3274348splitHere46","@Controller"
"3836splitHere46","3274944splitHere46","int position = new String(paragraph).indexOf(new String(word));<newline46mondego>"
"3837splitHere46","3274944splitHere46","static int indexOf(..)"
"3838splitHere46","3274944splitHere46","java.lang.String"
"3839splitHere46","3275135splitHere46","@Entity<newline46mondego>@Table(name=<doubleQuotes46>tag<doubleQuotes46>)<newline46mondego>@SQLInsert( sql=<doubleQuotes46>INSERT INTO tag(name, count) VALUES (?, ?)<newline46mondego> ON DUPLICATE KEY UPDATE set count = count + 1<doubleQuotes46>)<newline46mondego>public class Tag {}<newline46mondego>"
"3840splitHere46","3275251splitHere46","RUNNABLE"
"3841splitHere46","3275251splitHere46","RUNNABLE"
"3842splitHere46","3275251splitHere46","Thread.STATE"
"3843splitHere46","3275251splitHere46","RUNNABLE"
"3844splitHere46","3275251splitHere46","WAITING"
"3845splitHere46","3275251splitHere46","wait()"
"3846splitHere46","3275251splitHere46","join()"
"3847splitHere46","3275251splitHere46","LockSupport.park()"
"3848splitHere46","3275251splitHere46","Thread.yield()"
"3849splitHere46","3275253splitHere46","p = run.exec(cmd);<newline46mondego>p.waitFor();<newline46mondego>System.out.println(p.exitValue());<newline46mondego>"
"3850splitHere46","3275661splitHere46","con = DriverManager.getConnection(<doubleQuotes46>jdbc:mysql:///dbname<doubleQuotes46>, <doubleQuotes46>user<doubleQuotes46>, <doubleQuotes46>pass<doubleQuotes46>);"
"3851splitHere46","3275661splitHere46","con = DriverManager.getConnection(<doubleQuotes46>jdbc:mysql:///dbname?useUnicode=true&characterEncoding=utf-8<doubleQuotes46>, <doubleQuotes46>user<doubleQuotes46>, <doubleQuotes46>pass<doubleQuotes46>);"
"3852splitHere46","3275733splitHere46","Session#flush"
"3853splitHere46","3275733splitHere46","flush"
"3854splitHere46","3275733splitHere46","if (i % 20 == 0)"
"3855splitHere46","3275733splitHere46","i"
"3856splitHere46","3275733splitHere46","Car"
"3857splitHere46","3275733splitHere46","myList.size()"
"3858splitHere46","3275733splitHere46","OutOfMemoryException"
"3859splitHere46","3275733splitHere46","flush"
"3860splitHere46","3275733splitHere46","clear"
"3861splitHere46","3275733splitHere46","Session session = sessionFactory.openSession();<newline46mondego>Transaction tx = session.beginTransaction();<newline46mondego><newline46mondego>for ( int i=0; i<100000; i++ ) {<newline46mondego>    Customer customer = new Customer(.....);<newline46mondego>    session.save(customer);<newline46mondego>    if ( i % 20 == 0 ) { //20, same as the JDBC batch size<newline46mondego>        //flush a batch of inserts and release memory:<newline46mondego>        session.flush();<newline46mondego>        session.clear();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>tx.commit();<newline46mondego>session.close();<newline46mondego>"
"3862splitHere46","3275918splitHere46","ObjectifyService.factory().keyToString( myKey );<newline46mondego>"
"3863splitHere46","3276316splitHere46","javax.xml.bind.Marshaller"
"3864splitHere46","3276316splitHere46","javax.xml.bind.Unmarshaller"
"3865splitHere46","3276470splitHere46","Comparator"
"3866splitHere46","3276470splitHere46","trim()"
"3867splitHere46","3276552splitHere46","AbstractAutowireCapableBeanFactory"
"3868splitHere46","3276552splitHere46","BeanWrapperImpl"
"3869splitHere46","3276552splitHere46","BeanWrapperImpl"
"3870splitHere46","3276552splitHere46","CachedIntrospectionResults"
"3871splitHere46","3276552splitHere46","Introspector"
"3872splitHere46","3276552splitHere46","BeanPostProcessor"
"3873splitHere46","3276552splitHere46","BeanFactoryPostProcessor"
"3874splitHere46","3276552splitHere46","BeanPostProcessor"
"3875splitHere46","3276552splitHere46","<bean id=<doubleQuotes46>beanForInjection<doubleQuotes46> class=<doubleQuotes46>com.test.BeanForInjection<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>bean<doubleQuotes46> ref=<doubleQuotes46>beanToBeInjected<doubleQuotes46>/>        <newline46mondego></bean><newline46mondego>"
"3876splitHere46","3276552splitHere46","BeanForInjection"
"3877splitHere46","3276552splitHere46","package com.test<newline46mondego>import com.other.BeanToBeInjected<newline46mondego><newline46mondego>class BeanForInjection {<newline46mondego>    var bean : BeanToBeInjected = null;<newline46mondego>}<newline46mondego>"
"3878splitHere46","3276552splitHere46","BeanToBeInjected"
"3879splitHere46","3276552splitHere46","BeanPostProcessor"
"3880splitHere46","3276552splitHere46","BeanPostProcessor"
"3881splitHere46","3276552splitHere46","BeanFactoryPostProcessor"
"3882splitHere46","3276552splitHere46","package com.other;<newline46mondego><newline46mondego>import ...<newline46mondego><newline46mondego>public class ScalaAwareBeanFactoryPostProcessor implements BeanFactoryPostProcessor, PriorityOrdered {<newline46mondego><newline46mondego>    ... PriorityOrdered related methods...<newline46mondego><newline46mondego>    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {<newline46mondego>        String[] beanNames = beanFactory.getBeanDefinitionNames();<newline46mondego>        for (String currentName : beanNames) {<newline46mondego>            BeanDefinition beanDefinition = beanFactory.getBeanDefinition(currentName);<newline46mondego>            processScalaProperties(beanDefinition);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    protected void processScalaProperties(BeanDefinition beanDefinition) {<newline46mondego>        String className = beanDefinition.getBeanClassName();<newline46mondego>        try {<newline46mondego>            Set<PropertyValue> scalaProperties = new HashSet<PropertyValue>();<newline46mondego>            for (PropertyValue propertyValue : beanDefinition.getPropertyValues().getPropertyValueList()) {<newline46mondego>                String scalaSetterName = ScalaAwarePostProcessorUtils.getScalaSetterName(propertyValue.getName());<newline46mondego><newline46mondego>                BeanInfo beanInfo = getBeanInfo(className);<newline46mondego>                PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();<newline46mondego>                MethodDescriptor[] methodDescriptors = beanInfo.getMethodDescriptors();<newline46mondego>                for (MethodDescriptor md : methodDescriptors) {<newline46mondego><newline46mondego>                    if (scalaSetterName.equals(md.getName())) {<newline46mondego>                        boolean isScalaProperty = true;<newline46mondego>                        for (PropertyDescriptor pd : propertyDescriptors) {<newline46mondego>                            if (propertyValue.getName().equals(pd.getName())) {<newline46mondego>                                isScalaProperty = false;<newline46mondego>                            }<newline46mondego>                        }<newline46mondego>                        if (isScalaProperty) {<newline46mondego>                            scalaProperties.add(propertyValue);<newline46mondego>                        }<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego><newline46mondego>            if (!scalaProperties.isEmpty()) {<newline46mondego>                beanDefinition.setAttribute(ScalaAwarePostProcessorUtils.SCALA_ATTRIBUTES_KEY, scalaProperties);<newline46mondego>            }<newline46mondego><newline46mondego>            for (PropertyValue propertyValue : scalaProperties) {<newline46mondego>                beanDefinition.getPropertyValues().removePropertyValue(propertyValue);<newline46mondego>            }<newline46mondego>        } catch (ClassNotFoundException e) {<newline46mondego>        } catch (IntrospectionException e) {<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private BeanInfo getBeanInfo(String className) throws ClassNotFoundException, IntrospectionException {<newline46mondego>        Class beanClass = Class.forName(className);<newline46mondego>        BeanInfo beanInfo = Introspector.getBeanInfo(beanClass);<newline46mondego>        cleanIntrospectorCache(beanClass);<newline46mondego>        return beanInfo;<newline46mondego>    }<newline46mondego><newline46mondego>    private void cleanIntrospectorCache(Class beanClass) {<newline46mondego>        Class classToFlush = beanClass;<newline46mondego>        do {<newline46mondego>            Introspector.flushFromCaches(classToFlush);<newline46mondego>            classToFlush = classToFlush.getSuperclass();<newline46mondego>        }<newline46mondego>        while (classToFlush != null);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3883splitHere46","3276552splitHere46","BeanPostProcessor"
"3884splitHere46","3276552splitHere46","package com.other;<newline46mondego><newline46mondego>public class ScalaAwareBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter<newline46mondego>    implements PriorityOrdered, BeanFactoryAware {<newline46mondego><newline46mondego>    private ConfigurableListableBeanFactory beanFactory;<newline46mondego><newline46mondego>    ... Order related stuff...<newline46mondego><newline46mondego>    public void setBeanFactory(BeanFactory beanFactory) {<newline46mondego>        if (beanFactory instanceof ConfigurableListableBeanFactory) {<newline46mondego>            this.beanFactory = (ConfigurableListableBeanFactory) beanFactory;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public PropertyValues postProcessPropertyValues(PropertyValues pvs,     PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException {<newline46mondego>        try {<newline46mondego>            InjectionMetadata metadata = findScalaMetadata(beanFactory.getBeanDefinition(beanName), bean.getClass());<newline46mondego>            metadata.inject(bean, beanName, pvs);<newline46mondego>        }<newline46mondego>        catch (Throwable ex) {<newline46mondego>            throw new BeanCreationException(beanName, <doubleQuotes46>Injection of Scala dependencies failed<doubleQuotes46>, ex);<newline46mondego>        }<newline46mondego>        return pvs;<newline46mondego>    }<newline46mondego><newline46mondego>    private InjectionMetadata findScalaMetadata(BeanDefinition beanDefinition, Class<?> beanClass) throws IntrospectionException {<newline46mondego>        LinkedList<InjectionMetadata.InjectedElement> elements = new LinkedList<InjectionMetadata.InjectedElement>();<newline46mondego><newline46mondego>        Set<PropertyValue> scalaProperties = (Set<PropertyValue>) beanDefinition.getAttribute(ScalaAwarePostProcessorUtils.SCALA_ATTRIBUTES_KEY);<newline46mondego>        if (scalaProperties != null) {<newline46mondego>            for (PropertyValue pv : scalaProperties) {<newline46mondego>                Method setter = ScalaAwarePostProcessorUtils.getScalaSetterMethod(beanClass, pv.getName());<newline46mondego>                if (setter != null) {<newline46mondego>                    Method getter = ScalaAwarePostProcessorUtils.getScalaGetterMethod(beanClass, pv.getName());<newline46mondego>                    PropertyDescriptor pd = new PropertyDescriptor(pv.getName(), getter, setter);<newline46mondego>                    elements.add(new ScalaSetterMethodElement(setter, pd));<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return new InjectionMetadata(beanClass, elements);<newline46mondego>    }<newline46mondego><newline46mondego>    private class ScalaSetterMethodElement extends InjectionMetadata.InjectedElement {<newline46mondego><newline46mondego>        protected ScalaSetterMethodElement(Member member, PropertyDescriptor pd) {<newline46mondego>            super(member, pd);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected Object getResourceToInject(Object target, String requestingBeanName) {<newline46mondego>            Method method = (Method) this.member;<newline46mondego>            MethodParameter methodParam = new MethodParameter(method, 0);<newline46mondego>            DependencyDescriptor dd = new DependencyDescriptor(methodParam, true);<newline46mondego>            return beanFactory.resolveDependency(dd, requestingBeanName);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3885splitHere46","3276552splitHere46","<bean class=<doubleQuotes46>com.other.ScalaAwareBeanFactoryPostProcessor<doubleQuotes46>/><newline46mondego><newline46mondego><bean class=<doubleQuotes46>com.other.ScalaAwareBeanPostProcessor<doubleQuotes46>/><newline46mondego>"
"3886splitHere46","3276552splitHere46","<bean id=<doubleQuotes46>beanForInjection<doubleQuotes46> class=<doubleQuotes46>com.test.BeanForInjection<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>bean<doubleQuotes46> ref=<doubleQuotes46>beanToBeInjected<doubleQuotes46>/>        <newline46mondego>    <property name=<doubleQuotes46>name<doubleQuotes46> value=<doubleQuotes46>skaffman<doubleQuotes46>/><newline46mondego></bean><newline46mondego>"
"3887splitHere46","3276552splitHere46","bean"
"3888splitHere46","3276552splitHere46","name"
"3889splitHere46","3276565splitHere46","def"
"3890splitHere46","3276791splitHere46","HibernateInterceptor"
"3891splitHere46","3276791splitHere46","OpenSessionInViewFilter"
"3892splitHere46","3276822splitHere46","new BigInteger(<doubleQuotes46>2<doubleQuotes46>).pow(log);"
"3893splitHere46","3276822splitHere46","log"
"3894splitHere46","3276961splitHere46","/path/to/my/glassfish/lib/dtds"
"3895splitHere46","3276961splitHere46","EmbeddedFileSystem.Builder efsb = new EmbeddedFileSystem.Builder();<newline46mondego>        efsb.autoDelete(false);<newline46mondego>        efsb.installRoot(new File(<doubleQuotes46>/path/to/my/glassfish<doubleQuotes46>), true);<newline46mondego><newline46mondego>        EmbeddedFileSystem efs = efsb.build();<newline46mondego>        Server.Builder builder = new Server.Builder(<doubleQuotes46>test<doubleQuotes46>);<newline46mondego>        builder.embeddedFileSystem(efs);<newline46mondego><newline46mondego>        builder.logger(true);<newline46mondego>        Server server = builder.build();<newline46mondego>        server.addContainer(ContainerBuilder.Type.all);<newline46mondego>        server.start();<newline46mondego>"
"3896splitHere46","3276972splitHere46","HttpClient"
"3897splitHere46","3276972splitHere46","DefaultHttpClient"
"3898splitHere46","3276972splitHere46","HttpClient httpclient = new DefaultHttpClient();<newline46mondego>"
"3899splitHere46","3276977splitHere46","<html> <newline46mondego><head>  <newline46mondego><bookmarks>  <newline46mondego>  <bookmark name=<doubleQuotes46>A bookmark<doubleQuotes46> href=<doubleQuotes46>#bm<doubleQuotes46> />  <newline46mondego>  <bookmark name=<doubleQuotes46>A bookmark 2<doubleQuotes46> href=<doubleQuotes46>#bm2<doubleQuotes46> />  <newline46mondego>  <bookmark name=<doubleQuotes46>A bookmark 3<doubleQuotes46> href=<doubleQuotes46>#bm3<doubleQuotes46> />    <newline46mondego>  <bookmark name=<doubleQuotes46>A bookmark 4<doubleQuotes46> href=<doubleQuotes46>#bm4<doubleQuotes46> />  <newline46mondego>  <bookmark name=<doubleQuotes46>A bookmark invalid<doubleQuotes46> href=<doubleQuotes46>#bm99<doubleQuotes46> />  <newline46mondego></bookmarks> <newline46mondego></head> <newline46mondego><body>  <newline46mondego>   <div style=<doubleQuotes46>line-height: 100%; font-size: 12pt; page-break-before: always;<doubleQuotes46>>  <newline46mondego>      <a name=<doubleQuotes46>bm<doubleQuotes46>>some text</a>  <newline46mondego>   </div>  <newline46mondego>   <div style=<doubleQuotes46>line-height: 100%; font-size: 12pt; page-break-before: always;<doubleQuotes46>>  <newline46mondego>      <a name=<doubleQuotes46>bm2<doubleQuotes46>>some text</a>  <newline46mondego>   </div>  <newline46mondego>   <div style=<doubleQuotes46>line-height: 100%; font-size: 12pt; page-break-before: always;<doubleQuotes46>>  <newline46mondego>     <a name=<doubleQuotes46>bm3<doubleQuotes46>>some text</a>  <newline46mondego>   </div>  <newline46mondego>   <div style=<doubleQuotes46>line-height: 100%; font-size: 12pt; page-break-before: always;<doubleQuotes46>>  <newline46mondego>      <p>some text</p>  <p>some text</p>  <p>some text</p>  <p>some text</p>  <p>some text</p>  <p>some text</p>  <newline46mondego>      <p><a name=<doubleQuotes46>bm4<doubleQuotes46>>and some more text</a></p>  <newline46mondego>   </div> <newline46mondego></body> <newline46mondego></html>` <newline46mondego>"
"3900splitHere46","3276977splitHere46","<head>"
"3901splitHere46","3276977splitHere46","<body>"
"3902splitHere46","3277114splitHere46","User32.INSTANCE.SetWindowLong(new HWND(Native.getWindowPointer(frame)), -20, new Pointer(0x00000080L));<newline46mondego>"
"3903splitHere46","3277139splitHere46","some_default_name"
"3904splitHere46","3277139splitHere46","path"
"3905splitHere46","3277577splitHere46","-DpropertyName=propertyValue<newline46mondego>"
"3906splitHere46","3277577splitHere46","java -jar selenium-rc.jar -Dhttp.proxyHost=YourProxyHost -Dhttp.proxyPort=YourProxyPort<newline46mondego>"
"3907splitHere46","3277577splitHere46","main"
"3908splitHere46","3277577splitHere46","System.setProperty"
"3909splitHere46","3277577splitHere46","public class AppWrapper<newline46mondego>{<newline46mondego>/* args[0] - class to launch */     <newline46mondego>   public static void main(String[] args) throws Exception<newline46mondego>   {  // error checking omitted for brevity<newline46mondego>      Class app = Class.forName(args[0]);<newline46mondego>      Method main = app.getDeclaredMethod(<doubleQuotes46>main<doubleQuotes46>, new Class[] { (new String[1]).getClass()});<newline46mondego>      String[] appArgs = new String[args.length-1];<newline46mondego>      System.arraycopy(args, 1, appArgs, 0, appArgs.length);<newline46mondego>      System.setProperty(<doubleQuotes46>http.proxyHost<doubleQuotes46>, <doubleQuotes46>someHost<doubleQuotes46>);<newline46mondego>      main.invoke(null, appArgs);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3910splitHere46","3277637splitHere46","TableCellRenderer"
"3911splitHere46","3277870splitHere46","userDao"
"3912splitHere46","3277870splitHere46","UserDaoImpl"
"3913splitHere46","3277870splitHere46","UserDao"
"3914splitHere46","3277870splitHere46","UserDaoImpl"
"3915splitHere46","3277870splitHere46","@Autowired"
"3916splitHere46","3277870splitHere46","@Autowired"
"3917splitHere46","3277928splitHere46","String str = /* your original string from the array */;<newline46mondego>StringBuilder sb = new StringBuilder();<newline46mondego>boolean skip = true;<newline46mondego><newline46mondego>for (int i = 0; i < str.length(); i++) {<newline46mondego>  char ch = str.charAt(i);<newline46mondego><newline46mondego>  if (skip && Character.isWhitespace(ch))<newline46mondego>    continue;<newline46mondego><newline46mondego>  sb.append(ch);<newline46mondego><newline46mondego>  if (ch == ',')<newline46mondego>    skip = true;<newline46mondego>  else<newline46mondego>    skip = false;<newline46mondego>}<newline46mondego><newline46mondego>String result = sb.toString();<newline46mondego>"
"3918splitHere46","3278251splitHere46","table"
"3919splitHere46","3278251splitHere46","query"
"3920splitHere46","3278251splitHere46","foo, bar"
"3921splitHere46","3278251splitHere46","foo LEFT OUTER JOIN bar ON (foo.id = bar.foo_id)"
"3922splitHere46","3278355splitHere46","driverclassname"
"3923splitHere46","3278355splitHere46","java.sql.Driver"
"3924splitHere46","3278355splitHere46","com.mysql.jdbc.Driver"
"3925splitHere46","3278355splitHere46","java.sql.Driver"
"3926splitHere46","3278355splitHere46","com.mysql.jdbc.Driver"
"3927splitHere46","3278355splitHere46","hibernate.dialect"
"3928splitHere46","3278355splitHere46","org.hibernate.dialect.Dialect"
"3929splitHere46","3278355splitHere46","org.hibernate.dialect.Dialect"
"3930splitHere46","3278355splitHere46","full.classname.of.Dialect"
"3931splitHere46","3278355splitHere46","org.hibernate.dialect.Dialect"
"3932splitHere46","3278355splitHere46","org.hibernate.dialect.MySQL5InnoDBDialect"
"3933splitHere46","3278355splitHere46","org.hibernate.dialect.MySQL5Dialect"
"3934splitHere46","3278355splitHere46","<dependency><newline46mondego>   <groupId>mysql</groupId><newline46mondego>   <artifactId>mysql-connector-java</artifactId><newline46mondego>   <version>5.1.13</version><newline46mondego></dependency><newline46mondego>"
"3935splitHere46","3278527splitHere46","--main"
"3936splitHere46","3278527splitHere46","gcj --main=Program Program.java<newline46mondego>"
"3937splitHere46","3279023splitHere46","<Server port=<doubleQuotes46>8105<doubleQuotes46> shutdown=<doubleQuotes46>SHUTDOWN<doubleQuotes46>><newline46mondego>...<newline46mondego>    <Service name=<doubleQuotes46>Catalina<doubleQuotes46>><newline46mondego>        <Connector port=<doubleQuotes46>8180<doubleQuotes46> URIEncoding=<doubleQuotes46>UTF-8<doubleQuotes46> /><newline46mondego>        <Engine name=<doubleQuotes46>Catalina<doubleQuotes46> defaultHost=<doubleQuotes46>localhost<doubleQuotes46>><newline46mondego>            <Host name=<doubleQuotes46>localhost<doubleQuotes46> appBase=<doubleQuotes46>webapps<doubleQuotes46> /><newline46mondego>        </Engine><newline46mondego>    </Service><newline46mondego></Server><newline46mondego>"
"3938splitHere46","3279054splitHere46","file://"
"3939splitHere46","3279054splitHere46","file://"
"3940splitHere46","3279054splitHere46","/home/lsingh/reporting/tmp/execution1279514184559/TDReport.xml"
"3941splitHere46","3279054splitHere46","file:///home/lsingh/reporting/tmp/execution1279514184559/TDReport.xml"
"3942splitHere46","3279170splitHere46","java.util.ArrayList"
"3943splitHere46","3279462splitHere46","public <T extends SomeClass> T process(T obj) {<newline46mondego>    // call some methods of SomeClass on obj to process it here<newline46mondego>    return obj;<newline46mondego>}<newline46mondego>"
"3944splitHere46","3279462splitHere46","SomeChildClass a = new SomeChildClass(); // SomeChildClass extends SomeClass<newline46mondego>a = process(a);<newline46mondego>"
"3945splitHere46","3279462splitHere46","this.<Double>getAnything(int flag)"
"3946splitHere46","3279462splitHere46","public <T> List<T> getSomeList() {<newline46mondego>    // implementation<newline46mondego>}<newline46mondego><newline46mondego>public void processList(List<SomeClass> list) {<newline46mondego>     // implementation<newline46mondego>}<newline46mondego>"
"3947splitHere46","3279462splitHere46","processList(getSomeList()); // compiler error: cannot convert List<Object> to List<SomeClass><newline46mondego>"
"3948splitHere46","3279495splitHere46","[^/{1,2}]"
"3949splitHere46","3279495splitHere46","/"
"3950splitHere46","3279495splitHere46","{"
"3951splitHere46","3279495splitHere46","1"
"3952splitHere46","3279495splitHere46",","
"3953splitHere46","3279495splitHere46","2"
"3954splitHere46","3279495splitHere46","}"
"3955splitHere46","3279495splitHere46","2"
"3956splitHere46","3279495splitHere46","24"
"3957splitHere46","3279495splitHere46","a/2"
"3958splitHere46","3279495splitHere46","[…]"
"3959splitHere46","3279495splitHere46","{1,2}"
"3960splitHere46","3279495splitHere46","[^/]+"
"3961splitHere46","3279521splitHere46","b=<doubleQuotes46>abc=<doubleQuotes46>+b;<newline46mondego>    Properties props = new Properties();<newline46mondego>    props.load(new StringReader(b));<newline46mondego>    b=props.getProperty(<doubleQuotes46>abc<doubleQuotes46>);<newline46mondego>    System.out.println(b);<newline46mondego>"
"3962splitHere46","3279708splitHere46","XPathFactory factory = XPathFactory.newInstance();<newline46mondego>XPath xPath = factory.newXPath();<newline46mondego>rootQuery = xPath.compile(<doubleQuotes46>/job<doubleQuotes46>);<newline46mondego>textFieldsQuery = xPath.compile(<doubleQuotes46>/job/editorial/articlegroup/article/text|/job/editorial/articlegroup/article/flashtext<doubleQuotes46>);<newline46mondego><newline46mondego>Node rootNode = (Node)rootQuery.evaluate(new InputSource(is), XPathConstants.NODE);<newline46mondego><newline46mondego>PPJob job = new PPJob();<newline46mondego>Map<String, String> jobTextFields = new HashMap<String, String>(); <newline46mondego>NodeList fields = (NodeList)query.evaluate(rootNode, XPathConstants.NODESET);<newline46mondego>for (int i = 0; i < fields.getLength(); i++) {<newline46mondego>    Node field = fields.item(i);<newline46mondego>    String fieldName = field.getAttributes().getNamedItem(<doubleQuotes46>name<doubleQuotes46>).getNodeValue();<newline46mondego>    String fieldContent = field.getNextSibling().getNodeValue();<newline46mondego>    jobTextFields.put(fieldName, fieldContent);<newline46mondego>}       <newline46mondego>job.setTextFields(jobTextFields);<newline46mondego>"
"3963splitHere46","3279772splitHere46","+"
"3964splitHere46","3279772splitHere46","!="
"3965splitHere46","3279772splitHere46","<doubleQuotes46>(Value=<doubleQuotes46>+sb ) != null"
"3966splitHere46","3280093splitHere46","action=<doubleQuotes46>#{projectController.saveProject}<doubleQuotes46>><newline46mondego>"
"3967splitHere46","3280306splitHere46","#"
"3968splitHere46","3280306splitHere46","#"
"3969splitHere46","3280306splitHere46","#"
"3970splitHere46","3280306splitHere46","/some/path.jsp#somehash"
"3971splitHere46","3280357splitHere46","BufferedImage img = ImageIO.load(<doubleQuotes46>mybitmap.bmp<doubleQuotes46>);"
"3972splitHere46","3280357splitHere46","getRGB()"
"3973splitHere46","3280357splitHere46","int[] pixels = img.getRGB(0, 0, img.getWidth(), img.getHeight(), null, 0, img.getWidth());<newline46mondego>"
"3974splitHere46","3280426splitHere46","Class#cast"
"3975splitHere46","3280426splitHere46","cast"
"3976splitHere46","3280426splitHere46","public static <T> T readFromInput(String message, Class<T> c) throws Exception{<newline46mondego>    System.out.println(message);<newline46mondego>    Scanner scanner = new Scanner(System.in);<newline46mondego>    try {<newline46mondego>        if(c == Integer.class)<newline46mondego>            // the next cast to Integer is safe<newline46mondego>            return c.cast(Integer.valueOf(scanner.nextInt()));<newline46mondego>        if(c == String.class)<newline46mondego>            // the next cast to String is safe<newline46mondego>            return c.cast(scanner.nextLine());<newline46mondego>        if(c == Double.class)<newline46mondego>            // the next cast to Double is safe<newline46mondego>            return c.cast(Double.valueOf(scanner.nextDouble()));<newline46mondego>        if(c == Float.class)<newline46mondego>            // the next cast to Float is safe<newline46mondego>            return c.cast(Float.valueOf(scanner.nextFloat()));<newline46mondego>    } catch (InputMismatchException e) {<newline46mondego>        throw new Exception(e);<newline46mondego>    }<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"3977splitHere46","3280426splitHere46","Class<T>"
"3978splitHere46","3280426splitHere46","Class<?>"
"3979splitHere46","3280426splitHere46","Class"
"3980splitHere46","3280429splitHere46","<property name=<doubleQuotes46>toplink.ddl-generation<doubleQuotes46> value=<doubleQuotes46>create-tables<doubleQuotes46>/><newline46mondego><property name=<doubleQuotes46>toplink.ddl-generation.output-mode<doubleQuotes46> value=<doubleQuotes46>sql-script<doubleQuotes46>/><newline46mondego><property name=<doubleQuotes46>toplink.create-ddl-jdbc-file-name<doubleQuotes46> value=<doubleQuotes46>createDDL.sql<doubleQuotes46>/><newline46mondego><property name=<doubleQuotes46>toplink.drop-ddl-jdbc-file-name<doubleQuotes46> value=<doubleQuotes46>dropDDL.sql<doubleQuotes46>/><newline46mondego><property name=<doubleQuotes46>toplink.application-location<doubleQuotes46> value=<doubleQuotes46>/tmp<doubleQuotes46>/><newline46mondego>"
"3981splitHere46","3280476splitHere46","ACTION_SEND"
"3982splitHere46","3280476splitHere46","<intent-filter>"
"3983splitHere46","3280546splitHere46","Date"
"3984splitHere46","3280546splitHere46","System.currentTimeMillis()"
"3985splitHere46","3280700splitHere46","import javax.persistence.*;<newline46mondego>import java.io.Serializable;<newline46mondego><newline46mondego>@Entity<newline46mondego>public class Foo {<newline46mondego><newline46mondego>    @Embeddable<newline46mondego>    public static class Id implements Serializable {<newline46mondego>        @Column(name = <doubleQuotes46>bar_id_col<doubleQuotes46>)<newline46mondego>        private Long barId;<newline46mondego><newline46mondego>        @Column(name = <doubleQuotes46>i_col<doubleQuotes46>)<newline46mondego>        private int i;<newline46mondego><newline46mondego>        public Id() {<newline46mondego>        }<newline46mondego><newline46mondego>        public Id(Long barId, int i) {<newline46mondego>            this.barId = barId;<newline46mondego>            this.i = i;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public boolean equals(final Object o) {<newline46mondego>            if (this == o) {<newline46mondego>                return true;<newline46mondego>            }<newline46mondego>            if (!(o instanceof Id)) {<newline46mondego>                return false;<newline46mondego>            }<newline46mondego><newline46mondego>            final Id id = (Id) o;<newline46mondego><newline46mondego>            if (i != id.i) {<newline46mondego>                return false;<newline46mondego>            }<newline46mondego>            if (barId != null ? !barId.equals(id.barId) : id.barId != null) {<newline46mondego>                return false;<newline46mondego>            }<newline46mondego><newline46mondego>            return true;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int hashCode() {<newline46mondego>            int result = barId != null ? barId.hashCode() : 0;<newline46mondego>            result = 31 * result + i;<newline46mondego>            return result;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @EmbeddedId<newline46mondego>    private Id id = new Id();<newline46mondego><newline46mondego>    @ManyToOne<newline46mondego>    @JoinColumn(name = <doubleQuotes46>bar_id_col<doubleQuotes46>, insertable = false, updatable = false)<newline46mondego>    private Bar bar;<newline46mondego><newline46mondego>    private int i;<newline46mondego><newline46mondego>    public Foo() {<newline46mondego>    }<newline46mondego><newline46mondego>    public Foo(Bar bar, int i) {<newline46mondego>        // set fields<newline46mondego>        this.Bar = bar;<newline46mondego>        this.i=i;<newline46mondego>        // set identifier values<newline46mondego>        this.id.barId = bar.getId();<newline46mondego>        this.id.i = i;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3986splitHere46","3280700splitHere46","import javax.persistence.Entity;<newline46mondego>import javax.persistence.Id;<newline46mondego><newline46mondego>@Entity<newline46mondego>public class Bar {<newline46mondego><newline46mondego>    @Id<newline46mondego>    Long id;<newline46mondego><newline46mondego>    public Long getId() {<newline46mondego>        return id;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setId(final Long id) {<newline46mondego>        this.id = id;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3987splitHere46","3280724splitHere46","f:param"
"3988splitHere46","3280724splitHere46","h:commandLink"
"3989splitHere46","3280724splitHere46","h:outputLink"
"3990splitHere46","3280724splitHere46","<h:form><newline46mondego>    <h:commandButton action=<doubleQuotes46>/details.jsf?faces-redirect=true<doubleQuotes46> value=<doubleQuotes46>details<doubleQuotes46>><newline46mondego>    <input type=<doubleQuotes46>hidden<doubleQuotes46> name=<doubleQuotes46>id<doubleQuotes46> value=<doubleQuotes46>#{bean.id}<doubleQuotes46> /><newline46mondego></h:form><newline46mondego>"
"3991splitHere46","3280724splitHere46","<managed-bean><newline46mondego>    <managed-bean-name>bean</managed-bean-name><newline46mondego>    <managed-bean-class>mypackage.Bean</managed-bean-class><newline46mondego>    <managed-bean-scope>request</managed-bean-scope><newline46mondego>    <managed-property><newline46mondego>        <property-name>id</property-name><newline46mondego>        <value>#{param.id}</value><newline46mondego>    </managed-property><newline46mondego></managed-bean><newline46mondego>"
"3992splitHere46","3280756splitHere46","PackageManager p = context.getPackageManager(); <newline46mondego>final List<PackageInfo> appinstall = <newline46mondego>    p.getInstalledPackages(PackageManager.GET_PERMISSIONS | <newline46mondego>                                      PackageManager.GET_PROVIDERS)<newline46mondego>"
"3993splitHere46","3280852splitHere46","Prescription"
"3994splitHere46","3280852splitHere46","<one-to-many class=<doubleQuotes46>Prescription<doubleQuotes46>/><newline46mondego>"
"3995splitHere46","3280852splitHere46","class"
"3996splitHere46","3280852splitHere46","Prescription"
"3997splitHere46","3280852splitHere46","<one-to-many class=<doubleQuotes46>org.example.smartgwt.shared.model.Prescription<doubleQuotes46>/><newline46mondego>"
"3998splitHere46","3281081splitHere46","readOnly"
"3999splitHere46","3281081splitHere46","SqlMapClient"
"4000splitHere46","3281081splitHere46","@Transactional"
"4001splitHere46","3281081splitHere46","DataSourceTransactionManager"
"4002splitHere46","3281081splitHere46","JpaTransactionManager"
"4003splitHere46","3281081splitHere46","DataSource"
"4004splitHere46","3281081splitHere46","SqlMapClient"
"4005splitHere46","3281329splitHere46","private String recordDelimiter = <doubleQuotes46>~<doubleQuotes46>;<newline46mondego><newline46mondego>public static List<List<String>> parse(Reader reader) {<newline46mondego><newline46mondego>   List<List<String>> result = new ArrayList<List<String>>();<newline46mondego>   List<String> record = new ArrayList<String>();<newline46mondego>   boolean isFirstLine = true;<newline46mondego><newline46mondego>   while ((line = reader.readLine()) != null) {<newline46mondego><newline46mondego>      line = line.trim();<newline46mondego><newline46mondego>      if (line.length() == 0) {<newline46mondego>        continue;  // we skip empty lines<newline46mondego>      }<newline46mondego><newline46mondego>      if (delimiter.equals(line.trim()) {<newline46mondego>        if (!isFirstLine) {<newline46mondego>          result.add(record);<newline46mondego>          record = new ArrayList<String>();<newline46mondego>        } else {<newline46mondego>          isFirstLine = false;   // we ignore a delimiter in the first line.<newline46mondego>        }<newline46mondego>        continue;<newline46mondego>      } <newline46mondego><newline46mondego>      record.add(line);<newline46mondego>      isFirstLine = false;<newline46mondego>   }<newline46mondego><newline46mondego>   if (!result.contains(record))<newline46mondego>     result.add(record);   // in case the last line is not a separator<newline46mondego><newline46mondego>   return result;<newline46mondego><newline46mondego>} <newline46mondego>"
"4006splitHere46","3281339splitHere46","<a href=<doubleQuotes46>http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/javax/swing/JTextPane.html#getStyledDocument%28%29<doubleQuotes46> rel=<doubleQuotes46>nofollow<doubleQuotes46>>getStyledDocument()</a>"
"4007splitHere46","3281460splitHere46","String.toString"
"4008splitHere46","3281460splitHere46","/**<newline46mondego> * This object (which is already a string!) is itself returned.<newline46mondego> *<newline46mondego> * @return  the string itself.<newline46mondego> */<newline46mondego>public String toString() {<newline46mondego>    return this;<newline46mondego>}<newline46mondego>"
"4009splitHere46","3281878splitHere46","skipCommentsAndQuotes()"
"4010splitHere46","3281878splitHere46","NamedParameterUtils"
"4011splitHere46","3281878splitHere46","functionThatTakesAText(?)<newline46mondego>"
"4012splitHere46","3281878splitHere46","functionThatTakesAText('?')<newline46mondego>"
"4013splitHere46","3281935splitHere46","System.exit()"
"4014splitHere46","3281935splitHere46","JFrame"
"4015splitHere46","3281935splitHere46","setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)"
"4016splitHere46","3281935splitHere46","frame.dispose()"
"4017splitHere46","3281935splitHere46","JFrame"
"4018splitHere46","3281987splitHere46","Taal[]"
"4019splitHere46","3281987splitHere46","Taal"
"4020splitHere46","3281987splitHere46","Taal[]"
"4021splitHere46","3281987splitHere46","bd1.setTalenOndertiteling(new Taal[] {Taal.ENGELS});<newline46mondego>"
"4022splitHere46","3281987splitHere46","public void setTalenOndertiteling(Taal... talenOndertiteling) {<newline46mondego>"
"4023splitHere46","3282097splitHere46","Comparator"
"4024splitHere46","3282097splitHere46","binarySearch"
"4025splitHere46","3282097splitHere46","T"
"4026splitHere46","3282097splitHere46","T"
"4027splitHere46","3282097splitHere46","Station"
"4028splitHere46","3282097splitHere46","Station"
"4029splitHere46","3282097splitHere46","Station"
"4030splitHere46","3282104splitHere46","@PostConstruct"
"4031splitHere46","3282104splitHere46","InitializingBean"
"4032splitHere46","3282104splitHere46","Lifecycle"
"4033splitHere46","3282177splitHere46","public class DiscreteRandom {<newline46mondego><newline46mondego>    private final double[] probDist;<newline46mondego><newline46mondego>    public DiscreteRandom(double... probs) {<newline46mondego>        this.probDist = makeDistribution(probs);<newline46mondego>    }<newline46mondego><newline46mondego>    private double[] makeDistribution(double[] probs) {<newline46mondego>        double[] distribution = new double[probs.length];<newline46mondego>        double sum = 0;<newline46mondego>        for (int i = 0; i < probs.length; i++) {<newline46mondego>            sum += probs[i];<newline46mondego>            distribution[i] = sum;<newline46mondego>        }<newline46mondego>        return distribution;<newline46mondego>    }<newline46mondego><newline46mondego>    public int nextInt() {<newline46mondego>        double rand = Math.random();<newline46mondego>        int i = 0;<newline46mondego>        while (rand > probDist[i]) i++;<newline46mondego>        return i;<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Simple test<newline46mondego>     */<newline46mondego>    public static void main(String[] args) {<newline46mondego>        // We want 0 to come 3 times more often than 1.<newline46mondego>        // The implementation requires normalized probability<newline46mondego>        // distribution thus testProbs elements sum up to 1.0d.<newline46mondego>        double[] testProbs = {0.75d, 0.25d};<newline46mondego>        DiscreteRandom randGen = new DiscreteRandom(testProbs);<newline46mondego><newline46mondego>        // Loop 1000 times, we expect:<newline46mondego>        // sum0 ~ 750<newline46mondego>        // sum1 ~ 250<newline46mondego>        int sum0 = 0, sum1 = 0, rand;<newline46mondego>        for (int i = 0; i < 1000; i++) {<newline46mondego>            rand = randGen.nextInt();<newline46mondego>            if (rand == 0) sum0++;<newline46mondego>            else           sum1++;<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>sum0 = <doubleQuotes46> + sum0 + <doubleQuotes46>sum1 = <doubleQuotes46> + sum1);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4034splitHere46","3282218splitHere46","<#if Session.the_user?? && Session.the_user.loggedIn><newline46mondego>    <#-- header code --><newline46mondego></#if> <newline46mondego>"
"4035splitHere46","3282218splitHere46","Session."
"4036splitHere46","3282218splitHere46","<#nested><newline46mondego>"
"4037splitHere46","3282218splitHere46","<#import <doubleQuotes46>/WEB-INF/ftl/path/to/template/master.ftl<doubleQuotes46> as com><newline46mondego><@com.template><newline46mondego>    View page content<newline46mondego></@com.template><newline46mondego>"
"4038splitHere46","3282233splitHere46","<transition on=<doubleQuotes46>someFragment<doubleQuotes46>> <render fragments=<doubleQuotes46>some_tilel<doubleQuotes46>/>... </transition>"
"4039splitHere46","3282270splitHere46","import java.lang.annotation.*;<newline46mondego><newline46mondego>public class Example {<newline46mondego><newline46mondego>    @Retention(RetentionPolicy.RUNTIME)<newline46mondego>    @Target(ElementType.METHOD)<newline46mondego>    public static @interface Number {<newline46mondego>        int value();<newline46mondego>    }<newline46mondego><newline46mondego>    @Number(value = 42)<newline46mondego>    public int adder(final int b) throws SecurityException, NoSuchMethodException {<newline46mondego>        Number number = getClass().getMethod(<doubleQuotes46>adder<doubleQuotes46>, int.class).getAnnotation(Number.class);<newline46mondego>        return addImpl(number, b);<newline46mondego>    }<newline46mondego><newline46mondego>    public int addImpl(final Number a, final int b) {<newline46mondego>        return a.value() + b;<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(final String[] args) throws SecurityException, NoSuchMethodException {<newline46mondego>        System.out.println(new Example().adder(0));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4040splitHere46","3282297splitHere46","where"
"4041splitHere46","3282297splitHere46","<map>"
"4042splitHere46","3282297splitHere46","<map<newline46mondego>    name=<doubleQuotes46>propertyName<doubleQuotes46>                                         (1)<newline46mondego>    table=<doubleQuotes46>table_name<doubleQuotes46>                                          (2)<newline46mondego>    schema=<doubleQuotes46>schema_name<doubleQuotes46>                                        (3)<newline46mondego>    lazy=<doubleQuotes46>true|extra|false<doubleQuotes46>                                     (4)<newline46mondego>    inverse=<doubleQuotes46>true|false<doubleQuotes46>                                        (5)<newline46mondego>    cascade=<doubleQuotes46>all|none|save-update|delete|all-delete-orphan|delet(6)e-orphan<doubleQuotes46><newline46mondego>    sort=<doubleQuotes46>unsorted|natural|comparatorClass<doubleQuotes46>                     (7)<newline46mondego>    order-by=<doubleQuotes46>column_name asc|desc<doubleQuotes46>                             (8)<newline46mondego>    where=<doubleQuotes46>arbitrary sql where condition<doubleQuotes46>                       (9)<newline46mondego>    fetch=<doubleQuotes46>join|select|subselect<doubleQuotes46>                               (10)<newline46mondego>    batch-size=<doubleQuotes46>N<doubleQuotes46>                                              (11)<newline46mondego>    access=<doubleQuotes46>field|property|ClassName<doubleQuotes46>                           (12)<newline46mondego>    optimistic-lock=<doubleQuotes46>true|false<doubleQuotes46>                                (13)<newline46mondego>    mutable=<doubleQuotes46>true|false<doubleQuotes46>                                        (14)<newline46mondego>    node=<doubleQuotes46>element-name|.<doubleQuotes46><newline46mondego>    embed-xml=<doubleQuotes46>true|false<doubleQuotes46> <newline46mondego>><newline46mondego><newline46mondego>    <key .... /><newline46mondego>    <map-key .... /><newline46mondego>    <element .... /><newline46mondego></map><newline46mondego>"
"4043splitHere46","3282297splitHere46","where"
"4044splitHere46","3282297splitHere46","<class>"
"4045splitHere46","3282341splitHere46","UserType"
"4046splitHere46","3282341splitHere46","UserType"
"4047splitHere46","3282382splitHere46","Class"
"4048splitHere46","3282382splitHere46","Class<?>"
"4049splitHere46","3282382splitHere46","Class"
"4050splitHere46","3282382splitHere46","Class<? extends BusinessObject>"
"4051splitHere46","3282382splitHere46","Class<T>"
"4052splitHere46","3282382splitHere46","Class<?>"
"4053splitHere46","3282571splitHere46","org.drools.audit.WorkingMemoryFileLogger.writeToDisk()"
"4054splitHere46","3282571splitHere46","ThreadedWorkingMemoryFileLogger"
"4055splitHere46","3282597splitHere46","if (System.getProperty(<doubleQuotes46>os.name<doubleQuotes46>).startsWith(<doubleQuotes46>Windows<doubleQuotes46>)) {<newline46mondego>        // includes: Windows 2000,  Windows 95, Windows 98, Windows NT, Windows Vista, Windows XP<newline46mondego>    } else {<newline46mondego>        // everything else<newline46mondego>    } <newline46mondego>"
"4056splitHere46","3282652splitHere46","<target name=<doubleQuotes46>deploy<doubleQuotes46>><newline46mondego>    <path id=<doubleQuotes46>wl.deploy.path<doubleQuotes46>><newline46mondego>        <fileset file=<doubleQuotes46>${env.WL_HOME}\server\lib\weblogic.jar<doubleQuotes46> /><newline46mondego>        <fileset file=<doubleQuotes46>${env.WL_HOME}\server\lib\webservices.jar<doubleQuotes46> /><newline46mondego>    </path><newline46mondego>    <taskdef name=<doubleQuotes46>wldeploy<doubleQuotes46> classname=<doubleQuotes46>weblogic.ant.taskdefs.management.WLDeploy<doubleQuotes46>><newline46mondego>        <classpath refid=<doubleQuotes46>wl.deploy.path<doubleQuotes46> /><newline46mondego>    </taskdef><newline46mondego>    <wldeploy<newline46mondego>        action=<doubleQuotes46>deploy<doubleQuotes46> verbose=<doubleQuotes46>false<doubleQuotes46> debug=<doubleQuotes46>false<doubleQuotes46><newline46mondego>        name=<doubleQuotes46>${ear.name}<doubleQuotes46> source=<doubleQuotes46>${deploy.dir}/goip.ear<doubleQuotes46><newline46mondego>        user=<doubleQuotes46>weblogic<doubleQuotes46> password=<doubleQuotes46>weblogic<doubleQuotes46><newline46mondego>        adminurl=<doubleQuotes46>t3://localhost:7001<doubleQuotes46> targets=<doubleQuotes46>GO_Cluster1<doubleQuotes46>><newline46mondego>    </wldeploy><newline46mondego></target>   <newline46mondego>"
"4057splitHere46","3282685splitHere46","SomeImpl"
"4058splitHere46","3282685splitHere46","SomeImpl"
"4059splitHere46","3282685splitHere46","SomeImpl"
"4060splitHere46","3282685splitHere46","java.lang.Object"
"4061splitHere46","3282983splitHere46","<doubleQuotes46>*<doubleQuotes46>"
"4062splitHere46","3282983splitHere46","System.out.println(<doubleQuotes46>string<doubleQuotes46>.replaceAll(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46>*<doubleQuotes46>));<newline46mondego>// <doubleQuotes46>*s*t*r*i*n*g*<doubleQuotes46><newline46mondego>"
"4063splitHere46","3282983splitHere46","System.out.println(<doubleQuotes46>string<doubleQuotes46>.replace(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46>*<doubleQuotes46>));<newline46mondego>// <doubleQuotes46>*s*t*r*i*n*g*<doubleQuotes46><newline46mondego>"
"4064splitHere46","3282983splitHere46","startsWith(<doubleQuotes46><doubleQuotes46>)"
"4065splitHere46","3282983splitHere46","endsWith(<doubleQuotes46><doubleQuotes46>)"
"4066splitHere46","3282983splitHere46","contains(<doubleQuotes46><doubleQuotes46>)."
"4067splitHere46","3282983splitHere46","contains"
"4068splitHere46","3282983splitHere46","String.replace"
"4069splitHere46","3282983splitHere46","System.out.println(<doubleQuotes46>string<doubleQuotes46>.replaceAll(<doubleQuotes46>.?<doubleQuotes46>, <doubleQuotes46>*$0<doubleQuotes46>));<newline46mondego>// <doubleQuotes46>*s*t*r*i*n*g*<doubleQuotes46><newline46mondego>"
"4070splitHere46","3282983splitHere46","."
"4071splitHere46","3282983splitHere46","*"
"4072splitHere46","3282983splitHere46","."
"4073splitHere46","3282983splitHere46",".?"
"4074splitHere46","3282983splitHere46","?"
"4075splitHere46","3282983splitHere46","Pattern.DOTALL/(?s)"
"4076splitHere46","3283373splitHere46","String pattern = <newline46mondego>        <doubleQuotes46>< part (?: , part )* ><doubleQuotes46><newline46mondego>            .replace(<doubleQuotes46><<doubleQuotes46>, <doubleQuotes46>\\(<doubleQuotes46>)<newline46mondego>            .replace(<doubleQuotes46>><doubleQuotes46>, <doubleQuotes46>\\)<doubleQuotes46>)<newline46mondego>            .replace(<doubleQuotes46> <doubleQuotes46>, <doubleQuotes46>\\s*<doubleQuotes46>)<newline46mondego>            .replace(<doubleQuotes46>part<doubleQuotes46>, <doubleQuotes46>[^\\s*(,)]++<doubleQuotes46>);<newline46mondego><newline46mondego>    System.out.println(pattern);<newline46mondego>    /*** this is the pattern<newline46mondego>    \(\s*[^\s*(,)]+\s*(?:\s*,\s*[^\s*(,)]+\s*)*\s*\)<newline46mondego>    ****/<newline46mondego>"
"4077splitHere46","3283373splitHere46","part"
"4078splitHere46","3283373splitHere46","[^\s(,)]+"
"4079splitHere46","3283373splitHere46","[aeiou]"
"4080splitHere46","3283373splitHere46","[^aeiou]"
"4081splitHere46","3283373splitHere46","+"
"4082splitHere46","3283373splitHere46","++"
"4083splitHere46","3283373splitHere46","(?:...)"
"4084splitHere46","3283373splitHere46","java.util.regex.Pattern"
"4085splitHere46","3283373splitHere46","String[] tests = {<newline46mondego>        <doubleQuotes46>(1,3,6)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>(x,y!,a+b=c)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>( 1,    3  , 6)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>(1,3,6,)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>(())<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>(,)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>()<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>(oh, my, god)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>(oh,,my,,god)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>([],<>)<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>(  !!  ,  ??  ,  ++  )<doubleQuotes46>,<newline46mondego>    };<newline46mondego><newline46mondego>    for (String test : tests) {<newline46mondego>        if (test.matches(pattern)) {<newline46mondego>            String[] parts = test<newline46mondego>                .replaceAll(<doubleQuotes46>^\\(\\s*|\\s*\\)$<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>)<newline46mondego>                .split(<doubleQuotes46>\\s*,\\s*<doubleQuotes46>);<newline46mondego><newline46mondego>            System.out.printf(<doubleQuotes46>%s = %s%n<doubleQuotes46>,<newline46mondego>                test,<newline46mondego>                java.util.Arrays.toString(parts)<newline46mondego>            );<newline46mondego>        } else {<newline46mondego>            System.out.println(test + <doubleQuotes46> no match<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"4086splitHere46","3283373splitHere46","(1,3,6) = [1, 3, 6]<newline46mondego>(x,y!,a+b=c) = [x, y!, a+b=c]<newline46mondego>( 1,    3  , 6) = [1, 3, 6]<newline46mondego>(1,3,6,) no match<newline46mondego>(()) no match<newline46mondego>(,) no match<newline46mondego>() no match<newline46mondego>(oh, my, god) = [oh, my, god]<newline46mondego>(oh,,my,,god) no match<newline46mondego>([],<>) = [[], <>]<newline46mondego>(  !!  ,  ??  ,  ++  ) = [!!, ??, ++]<newline46mondego>"
"4087splitHere46","3283373splitHere46","String.split"
"4088splitHere46","3283373splitHere46","String[]"
"4089splitHere46","3283496splitHere46","import java.io.BufferedReader;<newline46mondego>import java.io.InputStream;<newline46mondego>import java.io.InputStreamReader;<newline46mondego>import java.net.HttpURLConnection;<newline46mondego>import java.net.URL;<newline46mondego><newline46mondego><newline46mondego>public class HttpBasicAuth {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>        try {<newline46mondego>            URL url = new URL (<doubleQuotes46>http://ip:port/login<doubleQuotes46>);<newline46mondego>            String encoding = Base64Encoder.encode (<doubleQuotes46>test1:test1<doubleQuotes46>);<newline46mondego><newline46mondego>            HttpURLConnection connection = (HttpURLConnection) url.openConnection();<newline46mondego>            connection.setRequestMethod(<doubleQuotes46>POST<doubleQuotes46>);<newline46mondego>            connection.setDoOutput(true);<newline46mondego>            connection.setRequestProperty  (<doubleQuotes46>Authorization<doubleQuotes46>, <doubleQuotes46>Basic <doubleQuotes46> + encoding);<newline46mondego>            InputStream content = (InputStream)connection.getInputStream();<newline46mondego>            BufferedReader in   = <newline46mondego>                new BufferedReader (new InputStreamReader (content));<newline46mondego>            String line;<newline46mondego>            while ((line = in.readLine()) != null) {<newline46mondego>                System.out.println(line);<newline46mondego>            }<newline46mondego>        } catch(Exception e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4090splitHere46","3283650splitHere46","import javax.swing.*;<newline46mondego>import java.awt.Font;<newline46mondego>import java.awt.FlowLayout;<newline46mondego><newline46mondego>class JLabelLocation  {<newline46mondego><newline46mondego>    public static void main( String [] args ) {<newline46mondego><newline46mondego>        JLabel mainTitle = new JLabel(<doubleQuotes46>SomeApp<doubleQuotes46>);<newline46mondego>        mainTitle.setFont(new Font(<doubleQuotes46>Arial<doubleQuotes46>,2 , 28));<newline46mondego>        //mainTitle.setBounds(0,0, 115, 130); //let the layout do the work<newline46mondego><newline46mondego>        JFrame frame = new JFrame();<newline46mondego>        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));// places at the left<newline46mondego>        panel.add( mainTitle );<newline46mondego><newline46mondego>        frame.add( panel );// no need to call getContentPane<newline46mondego>        frame.pack();<newline46mondego>        frame.setVisible( true );<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4091splitHere46","3283962splitHere46","1. Get PersistenceManager (pm)<newline46mondego><newline46mondego>  2. pm.currentTransaction (tx)<newline46mondego><newline46mondego>  3. tx.begin<newline46mondego><newline46mondego>  4. pm.fetchObject1<newline46mondego><newline46mondego>  5. modifyObject1<newline46mondego><newline46mondego>  6. tx.commit<newline46mondego><newline46mondego>  7. pm.close<newline46mondego><newline46mondego><newline46mondego>  8. Get PersistenceManager (pm)<newline46mondego><newline46mondego>  9. pm.currentTransaction (tx)<newline46mondego><newline46mondego>  10. tx.begin<newline46mondego><newline46mondego>  11. pm.fetchObject2<newline46mondego><newline46mondego>  12. modifyObject2<newline46mondego><newline46mondego>  13. tx.commit<newline46mondego><newline46mondego>  14. pm.close<newline46mondego>"
"4092splitHere46","3283976splitHere46","...<newline46mondego>...<newline46mondego>...<newline46mondego><newline46mondego>webview = (WebView) findViewById(R.id.webview);<newline46mondego>webview.setWebViewClient(new WebViewClient() {<newline46mondego>            public boolean shouldOverrideUrlLoading(WebView view, String url) {              <newline46mondego>                view.loadUrl(url);<newline46mondego>                return true;<newline46mondego>            }<newline46mondego><newline46mondego><newline46mondego>          public void onPageFinished(WebView view, String url) {<newline46mondego>                if (progressBar.isShowing()) {<newline46mondego>                    progressBar.dismiss();<newline46mondego>                }<newline46mondego>            }<newline46mondego> webview.loadUrl(<doubleQuotes46>http://www.google.com<doubleQuotes46>);<newline46mondego><newline46mondego>}<newline46mondego>"
"4093splitHere46","3284025splitHere46","URLConnection#setRequestProperty()"
"4094splitHere46","3284025splitHere46","input type=<doubleQuotes46>hidden<doubleQuotes46>"
"4095splitHere46","3284025splitHere46","name=value"
"4096splitHere46","3284025splitHere46","&amp;"
"4097splitHere46","3284025splitHere46","&"
"4098splitHere46","3284102splitHere46","String fileName;<newline46mondego>fileName = URLEncoder.encode(<doubleQuotes46>My ! String #<doubleQuotes46>, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>"
"4099splitHere46","3284102splitHere46","String originalFileName = URLDecoder.decode(fileName, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>"
"4100splitHere46","3284136splitHere46","cipherLen = (clearLen/16 + 1) * 16;<newline46mondego>"
"4101splitHere46","3284173splitHere46","@ModelAttribute"
"4102splitHere46","3284173splitHere46","List"
"4103splitHere46","3284173splitHere46","public class Groups {<newline46mondego>    private List<Group> list = new AutoPopulatingList<Group>(Group.class);  <newline46mondego>    ...    <newline46mondego>}<newline46mondego><newline46mondego>@RequestMapping(value = <doubleQuotes46>/test<doubleQuotes46>, method = RequestMethod.GET)  <newline46mondego>public ModelAndView test(  <newline46mondego>    @ModelAttribute Groups groups  <newline46mondego>) {   <newline46mondego> //return whatever  <newline46mondego>}  <newline46mondego>"
"4104splitHere46","3284173splitHere46","/test?list[0].id=2&list[0].name=stackrocks&list[1].id=3&list[1].name=stackrules<newline46mondego>"
"4105splitHere46","3284259splitHere46","RenderSet set = RenderSet.DataUri | RenderSet.GZip;<newline46mondego>"
"4106splitHere46","3284259splitHere46","EnumSet.of(RenderSet.DataUri, RenderSet.GZip);<newline46mondego>"
"4107splitHere46","3284345splitHere46","finalize()"
"4108splitHere46","3284345splitHere46","finalize()"
"4109splitHere46","3284510splitHere46","Map"
"4110splitHere46","3284510splitHere46","Map"
"4111splitHere46","3284510splitHere46","SortedMap"
"4112splitHere46","3284510splitHere46","Comparable"
"4113splitHere46","3284510splitHere46","Comparable<Person>"
"4114splitHere46","3284510splitHere46","compareTo()"
"4115splitHere46","3284510splitHere46","public int compareTo(Person p) {<newline46mondego>    if (this.id > p.id) return 1;<newline46mondego>    else if (this.id < p.id) return -1;<newline46mondego>    else return 0;<newline46mondego>}<newline46mondego>"
"4116splitHere46","3284510splitHere46","Comparator<Person>"
"4117splitHere46","3284510splitHere46","Comparable<Person>"
"4118splitHere46","3284510splitHere46","Comparator"
"4119splitHere46","3284510splitHere46","Comparable"
"4120splitHere46","3284510splitHere46","Person"
"4121splitHere46","3284510splitHere46","Comparator"
"4122splitHere46","3284510splitHere46","public classPersonNameComparator implements Comparator<Person> {<newline46mondego><newline46mondego>    public int compare(Person p1, Person p2) {<newline46mondego>        return p1.name.compareTo(p2.name);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4123splitHere46","3284510splitHere46","@Override"
"4124splitHere46","3284615splitHere46","(defn document-to-model ...)"
"4125splitHere46","3284615splitHere46","load-stream"
"4126splitHere46","3284615splitHere46","document-to-model"
"4127splitHere46","3284615splitHere46","load-stream"
"4128splitHere46","3284615splitHere46","*rdf-model*"
"4129splitHere46","3284615splitHere46","RDFModel"
"4130splitHere46","3284615splitHere46","clj-plaza"
"4131splitHere46","3284615splitHere46","RDFModel"
"4132splitHere46","3284615splitHere46","plaza.rdf.implementations.sesame"
"4133splitHere46","3284615splitHere46","(deftype SesameModel ..."
"4134splitHere46","3284615splitHere46","plaza.rdf.implementations.jena"
"4135splitHere46","3284615splitHere46","(deftype JenaModel ..."
"4136splitHere46","3284615splitHere46","require"
"4137splitHere46","3284615splitHere46","*rdf-model*"
"4138splitHere46","3284757splitHere46","public abstract class Foo<T extends Foo<T>>  // see ColinD's comment<newline46mondego>{<newline46mondego>    public T eat(String eatCake) <newline46mondego>    {<newline46mondego>        return (T)this;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class CakeEater extends Foo<CakeEater> <newline46mondego>{<newline46mondego>    public void f(){}<newline46mondego>}<newline46mondego>"
"4139splitHere46","3284757splitHere46","this"
"4140splitHere46","3284909splitHere46","List a = new ArrayList<newline46mondego>List b = a<newline46mondego>"
"4141splitHere46","3284924splitHere46","XmlBeanFactory"
"4142splitHere46","3284924splitHere46","ApplicationContext"
"4143splitHere46","3285055splitHere46","<rich:messages>"
"4144splitHere46","3285055splitHere46","ajaxRendered"
"4145splitHere46","3285055splitHere46","true"
"4146splitHere46","3285147splitHere46","Context ctx = new InitialContext();<newline46mondego>UserEJB userEJB = (UserEJB) ctx.lookup(<doubleQuotes46>java:global/teachernews/<doubleQuotes46> + UserEJB.class.getName())<newline46mondego>"
"4147splitHere46","3285270splitHere46","org.hibernate.SQL"
"4148splitHere46","3285270splitHere46","DEBUG"
"4149splitHere46","3285566splitHere46","(\([^)]*\)|\S)*<newline46mondego>"
"4150splitHere46","3285566splitHere46","\S"
"4151splitHere46","3285671splitHere46","<include path=<doubleQuotes46>**.nocache.*<doubleQuotes46> expiration=<doubleQuotes46>0s<doubleQuotes46> /><newline46mondego>"
"4152splitHere46","3285671splitHere46","0s"
"4153splitHere46","3285671splitHere46","1s"
"4154splitHere46","3285744splitHere46","iv.setImageResource(rgenerator.nextInt(mImageIds.length));<newline46mondego>"
"4155splitHere46","3285744splitHere46","iv.setImageResource(mImageIds[rgenerator.nextInt(mImageIds.length)]);<newline46mondego>"
"4156splitHere46","3285827splitHere46","String txt = new Scanner(new File(path)).useDelimiter(<doubleQuotes46>\\Z<doubleQuotes46>).next();<newline46mondego>"
"4157splitHere46","3285827splitHere46","String txt = // the resulting String is stored here<newline46mondego>new Scanner( // Create a scanner to read the file<newline46mondego>new File( <doubleQuotes46>pathToFile<doubleQuotes46> ) ) // pass a new file to the scanner to read<newline46mondego>.useDelimiter(<doubleQuotes46>\\Z<doubleQuotes46>) // set the delimiter to the end of the file<newline46mondego>.next(); // read the scanner until the next delimiter, <newline46mondego>         // in this case it is the end of the file.<newline46mondego>"
"4158splitHere46","3285931splitHere46","public enum JAXBContextSingleton {<newline46mondego><newline46mondego>INSTANCE(<doubleQuotes46>your.class.xsd<doubleQuotes46>);<newline46mondego>private JAXBContext context;<newline46mondego><newline46mondego>JAXBContextSingleton(String classToCreate) {<newline46mondego>    try {<newline46mondego>        this.context = JAXBContext.newInstance(classToCreate);<newline46mondego>    } catch (JAXBException ex) {<newline46mondego>        throw new IllegalStateException(<doubleQuotes46>Unbale to create JAXBContextSingleton<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public JAXBContext getContext(){<newline46mondego>    return context;<newline46mondego>}<newline46mondego><newline46mondego>}<newline46mondego>"
"4159splitHere46","3285931splitHere46","JAXBContext context = JAXBContextSingleton.INSTANCE.getContext();<newline46mondego>"
"4160splitHere46","3285957splitHere46","public enum TemporalType {<newline46mondego>DATE, //java.sql.Date<newline46mondego>TIME, //java.sql.Time<newline46mondego>TIMESTAMP //java.sql.Timestamp<newline46mondego>}<newline46mondego>"
"4161splitHere46","3285957splitHere46","@Entity <newline46mondego>public class Person { <newline46mondego>    // . . .<newline46mondego><newline46mondego>    @Temporal(TemporalType.TIMESTAMP)<newline46mondego>    private GregorianCalendar lastUpdated;<newline46mondego><newline46mondego>    // . . .<newline46mondego>}<newline46mondego>"
"4162splitHere46","3285971splitHere46","File.separator"
"4163splitHere46","3285971splitHere46","File file = new File(currentDirectory, <doubleQuotes46>myfile.txt<doubleQuotes46>);<newline46mondego>"
"4164splitHere46","3286001splitHere46","public class Data {<newline46mondego>    private String name;<newline46mondego>    private String title;<newline46mondego>    private int currentMap;<newline46mondego>    private List<Item> items;<newline46mondego>    private int[][] map;<newline46mondego><newline46mondego>    public String getName() { return name; }<newline46mondego>    public String getTitle() { return title; }<newline46mondego>    public int getCurrentMap() { return currentMap; }<newline46mondego>    public List<Item> getItems() { return items; }<newline46mondego>    public int[][] getMap() { return map; }<newline46mondego><newline46mondego>    public void setName(String name) { this.name = name; }<newline46mondego>    public void setTitle(String title) { this.title = title; }<newline46mondego>    public void setCurrentMap(int currentMap) { this.currentMap = currentMap; }<newline46mondego>    public void setItems(List<Item> items) { this.items = items; }<newline46mondego>    public void setMap(int[][] map) { this.map = map; }<newline46mondego>}<newline46mondego>"
"4165splitHere46","3286001splitHere46","public class Item {<newline46mondego>    private String name;<newline46mondego>    private int x;<newline46mondego>    private int y;<newline46mondego><newline46mondego>    public String getName() { return name; }<newline46mondego>    public int getX() { return x; }<newline46mondego>    public int getY() { return y; }<newline46mondego><newline46mondego>    public void setName(String name) { this.name = name; }<newline46mondego>    public void setX(int x) { this.x = x; }<newline46mondego>    public void setY(int y) { this.y = y; }<newline46mondego>}<newline46mondego>"
"4166splitHere46","3286001splitHere46","Data data = new Gson().fromJson(json, Data.class);<newline46mondego>"
"4167splitHere46","3286001splitHere46","System.out.println(data.getTitle()); // Map One<newline46mondego>"
"4168splitHere46","3286001splitHere46","System.out.println(data.getMap()[3][3]); // 1<newline46mondego>"
"4169splitHere46","3286001splitHere46","Item"
"4170splitHere46","3286001splitHere46","System.out.println(data.getItems().get(0).getName()); // Pickaxe<newline46mondego>"
"4171splitHere46","3286001splitHere46","Gson#toJson()"
"4172splitHere46","3286001splitHere46","String json = new Gson().toJson(data);<newline46mondego>"
"4173splitHere46","3286252splitHere46","onCreate()"
"4174splitHere46","3286252splitHere46","TextView tv = (TextView) findViewById(R.id.text1);<newline46mondego>"
"4175splitHere46","3286252splitHere46","tv = (TextView) findViewById(R.id.text1);<newline46mondego>"
"4176splitHere46","3286252splitHere46","TextView tv"
"4177splitHere46","3286378splitHere46","mySet"
"4178splitHere46","3286378splitHere46","foo"
"4179splitHere46","3286378splitHere46","void test(Set<Integer> mySet)"
"4180splitHere46","3286378splitHere46","mySet"
"4181splitHere46","3286378splitHere46","main"
"4182splitHere46","3286378splitHere46","mySet"
"4183splitHere46","3286378splitHere46","foo"
"4184splitHere46","3286378splitHere46","main"
"4185splitHere46","3286378splitHere46","foo = test(); //foo can't be final now though<newline46mondego> public static Set<Integer>  test() {<newline46mondego>   return new HashSet<Integer>();<newline46mondego>}<newline46mondego>"
"4186splitHere46","3286655splitHere46","@Access"
"4187splitHere46","3286698splitHere46","int imageWidth = 638, imageHeight = 480;<newline46mondego>int dataImageWidth = 640;<newline46mondego><newline46mondego>SampleModel sm = new SinglePixelPackedSampleModel(TYPE_INT, imageWidth, imageHeight, dataImageWidth, new int[] { 0xff0000, 0xff00, 0xff });<newline46mondego>DataBuffer db = new DataBufferInt(dataImageWidth * imageHeight);<newline46mondego>WritableRaster r = Raster.createWritableRaster(sm, db, new Point());<newline46mondego>BufferedImage image = new BufferedImage(ColorModel.getRGBDefault(), r, false, null);<newline46mondego>"
"4188splitHere46","3286698splitHere46","BufferedImage fullImage = new BufferedImage(dataImageWidth, imageHeight);<newline46mondego>BufferedImage subImage = fullImage.getSubimage(0, 0, imageWidth, imageHeight);<newline46mondego>"
"4189splitHere46","3286732splitHere46","interface Kernel32 extends Library {<newline46mondego>  public int GetFileAttributesW(WString fileName);<newline46mondego>}<newline46mondego><newline46mondego>static Kernel32 lib = null;<newline46mondego>public static int getWin32FileAttributes(File f) throws IOException { <newline46mondego>  if (lib == null) {<newline46mondego>    synchronized (Kernel32.class) {<newline46mondego>      lib = (Kernel32) Native.loadLibrary(<doubleQuotes46>kernel32<doubleQuotes46>, Kernel32.class);<newline46mondego>    }<newline46mondego>  }<newline46mondego>  return lib.GetFileAttributesW(new WString(f.getCanonicalPath()));<newline46mondego>}<newline46mondego><newline46mondego>public static boolean isJunctionOrSymlink(File f) throws IOException {<newline46mondego>  if (!f.exists()) { return false; }<newline46mondego>  int attributes = getWin32FileAttributes(f);<newline46mondego>  if (-1 == attributes) { return false; }<newline46mondego>  return ((0x400 & attributes) != 0);<newline46mondego>}<newline46mondego>"
"4190splitHere46","3286732splitHere46","getWin32FileAttributes()"
"4191splitHere46","3287072splitHere46","String path = request.getPathInfo();<newline46mondego>"
"4192splitHere46","3287134splitHere46","HttpServletRequest"
"4193splitHere46","3287134splitHere46","@Context"
"4194splitHere46","3287134splitHere46","@GET<newline46mondego>@Produces(<doubleQuotes46>text/plain<doubleQuotes46>)<newline46mondego>public String showFullURL(@Context HttpServletRequest hsr) {<newline46mondego>   return hsr.getRequestURL();<newline46mondego>}<newline46mondego>"
"4195splitHere46","3287538splitHere46","onCreateOptionsMenu"
"4196splitHere46","3287538splitHere46","Activity.onCreateOptionsMenu"
"4197splitHere46","3287538splitHere46","MyMapActivity.OnCreateOptionsMenu"
"4198splitHere46","3287538splitHere46","@Override"
"4199splitHere46","3287538splitHere46","@Override"
"4200splitHere46","3287765splitHere46","import com.example.*;<newline46mondego>"
"4201splitHere46","3287765splitHere46","List<com.example.MyType> = new ArrayList<com.example.MyType>();<newline46mondego>"
"4202splitHere46","3287765splitHere46","Class<?> clazz = Class.forName(<doubleQuotes46>com.example.MyType<doubleQuotes46>);<newline46mondego>"
"4203splitHere46","3287765splitHere46","List<String> classes = getClassNamesFromUrl(<doubleQuotes46>http://example.com/classes.txt<doubleQuotes46>);<newline46mondego>for (String className:classes) {<newline46mondego>   doSomethingWith(Class.forName(className));<newline46mondego>}<newline46mondego>"
"4204splitHere46","3287770splitHere46","User user = (User) session.getAttribute(USER_KEY); // this is s String constant<newline46mondego>"
"4205splitHere46","3287770splitHere46","UserHolder"
"4206splitHere46","3287770splitHere46","HttpSession"
"4207splitHere46","3287770splitHere46","HttpServletRequest"
"4208splitHere46","3287921splitHere46","// from bundle org.eclipse.equinox.p2.console<newline46mondego>    import org.eclipse.equinox.internal.p2.console.ProvisioningHelper;<newline46mondego><newline46mondego>    URI repoUri = new URI(UPDATE_SITE_URL);<newline46mondego>    try {<newline46mondego>        ProvisioningHelper.addMetadataRepository(repoUri);         <newline46mondego>    } catch( Exception e ) {<newline46mondego>        LOG.warn(<doubleQuotes46>Can not add update repository: <doubleQuotes46> + repoUri);           <newline46mondego>    }<newline46mondego>    try {<newline46mondego>        ProvisioningHelper.addArtifactRepository(repoUri);          <newline46mondego>    } catch( Exception e ) {<newline46mondego>        LOG.warn(<doubleQuotes46>Can not add update repository: <doubleQuotes46> + repoUri);<newline46mondego>    }<newline46mondego>"
"4209splitHere46","3287924splitHere46","URL.connect()"
"4210splitHere46","3287924splitHere46","HttpClient"
"4211splitHere46","3287926splitHere46","public Event loadEvent(String id) {<newline46mondego>    PersistenceManager pm = PMF.get().getPersistenceManager();<newline46mondego>    try {<newline46mondego>        Event event = pm.getObjectById(Event.class, Long.parseLong(id));<newline46mondego>        // And load entries<newline46mondego>        for (Entry entry : event.getEntries()) {<newline46mondego>            entry.amounts.size();<newline46mondego>        }<newline46mondego>        return event;<newline46mondego>    } catch (NumberFormatException e) {<newline46mondego>        return null;<newline46mondego>    } finally {<newline46mondego>        pm.close();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4212splitHere46","3288056splitHere46","extends"
"4213splitHere46","3288056splitHere46","implements"
"4214splitHere46","3288073splitHere46","@Inheritance(strategy = InheritanceType.SINGLE_TABLE)<newline46mondego>    @DiscriminatorColumn(name = <doubleQuotes46>code_type<doubleQuotes46>, discriminatorType = DiscriminatorType.STRING)<newline46mondego>"
"4215splitHere46","3288073splitHere46","myData.getCountryCode(currentLocale.getlanguage()).getText(); --> returns 'France'<newline46mondego>    myData.getLanguageCode(currentLocale.getlanguage()).getText(); --> returns 'French'<newline46mondego>"
"4216splitHere46","3288194splitHere46","String key = UUID.createNewUUID().toString();<newline46mondego>"
"4217splitHere46","3288476splitHere46","<a href=<doubleQuotes46>http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/java/util/Collections.html<doubleQuotes46> rel=<doubleQuotes46>nofollow<doubleQuotes46>>Collections</a>"
"4218splitHere46","3288476splitHere46","int[] sortedInts = Sorting.insertionSort(myInts);<newline46mondego>"
"4219splitHere46","3288476splitHere46","public class Sorting {<newline46mondego>     public static <DataType extends Comparable> Iterable<DataType> insertionSort(Iterable<DataType> data);<newline46mondego>}<newline46mondego>"
"4220splitHere46","3288476splitHere46","<DataType>"
"4221splitHere46","3288476splitHere46","Iterable<DataType>"
"4222splitHere46","3288476splitHere46","Comparable"
"4223splitHere46","3288658splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46> ?>"
"4224splitHere46","3288713splitHere46","someLookup"
"4225splitHere46","3288713splitHere46","Derived"
"4226splitHere46","3288713splitHere46","Base"
"4227splitHere46","3288713splitHere46","lookup()"
"4228splitHere46","3288713splitHere46","Derived"
"4229splitHere46","3288713splitHere46","num"
"4230splitHere46","3288713splitHere46","val"
"4231splitHere46","3288713splitHere46","Derived"
"4232splitHere46","3288713splitHere46","lookup"
"4233splitHere46","3288713splitHere46","num"
"4234splitHere46","3288713splitHere46","num"
"4235splitHere46","3288713splitHere46","class Derived extends Base<newline46mondego>{<newline46mondego>  private static final int num = 10;<newline46mondego>  ...<newline46mondego>"
"4236splitHere46","3288713splitHere46","num"
"4237splitHere46","3288713splitHere46","num"
"4238splitHere46","3288985splitHere46","/**<newline46mondego> * Puts ellipses in input strings that are longer than than maxCharacters. Shorter strings or<newline46mondego> * null is returned unchanged.<newline46mondego> * @param input the input string that may be subjected to shortening<newline46mondego> * @param maxCharacters the maximum characters that are acceptable for the unshortended string. Must be at least 3, otherwise a string with ellipses is too long already.<newline46mondego> * @param the number of characters that should appear after the ellipsis (0 or larger) <newline46mondego> */<newline46mondego>public static String ellipsize(String input, int maxCharacters, int charactersAfterEllipsis) {<newline46mondego>  if(maxCharacters < 3) {<newline46mondego>    throw new IllegalArgumentException(<doubleQuotes46>maxCharacters must be at least 3 because the ellipsis already take up 3 characters<doubleQuotes46>)<newline46mondego>  }<newline46mondego>  if(maxCharacters - 3 > charactersAfterEllipsis) {<newline46mondego>    throw new IllegalArgumentException(<doubleQuotes46>charactersAfterEllipsis must be less than maxCharacters<doubleQuotes46>);<newline46mondego>  }<newline46mondego>  if (input == null || input.length() < maxCharacters) {<newline46mondego>    return input;<newline46mondego>  }<newline46mondego>  return input.substring(0, maxCharacters - 3 - charactersAfterEllipsis) + <doubleQuotes46>...<doubleQuotes46> + input.substring(input.length() - charactersAfterEllipsis);<newline46mondego>}<newline46mondego>"
"4239splitHere46","3288985splitHere46","java.awt.Font.getStringBounds"
"4240splitHere46","3289033splitHere46","* Website/web application server at http://www.mydomain.com<newline46mondego>* Applet and/or Java Web Start jar at http://www.mydomain.com/files<newline46mondego>* Server listening on some port at http://www.mydomain.server.com<newline46mondego>"
"4241splitHere46","3289048splitHere46","&useServerPrepStmts=true&useCursorFetch=true<newline46mondego>"
"4242splitHere46","3289157splitHere46","-Djava.library.path=c:/somepath<newline46mondego>"
"4243splitHere46","3289157splitHere46","String key = <doubleQuotes46>java.library.path<doubleQuotes46>;<newline46mondego>System.out.printf(<doubleQuotes46>%s=%s%n<doubleQuotes46>, key, System.getProperty(key)); <newline46mondego>"
"4244splitHere46","3289180splitHere46","com.sun.xml.bind.marshaller.CharacterEscapeHandler"
"4245splitHere46","3289180splitHere46","CharacterEscapeHandler escapeHandler = NoEscapeHandler.theInstance;<newline46mondego>marshaller.setProperty(<doubleQuotes46>com.sun.xml.bind.characterEscapeHandler<doubleQuotes46>, escapeHandler); <newline46mondego>"
"4246splitHere46","3289199splitHere46","Vector toRemove=new Vector();<newline46mondego>for (Object o: array){<newline46mondego>  if(remove(o))  toRemove.add(o);<newline46mondego>}<newline46mondego>array.removeAll(o);<newline46mondego>"
"4247splitHere46","3289527splitHere46","import java.util.*;<newline46mondego>import java.util.concurrent.*;<newline46mondego><newline46mondego>public class WebServiceTester {<newline46mondego><newline46mondego>  public static class Tester<newline46mondego>        implements Callable {<newline46mondego>    public Integer call() {<newline46mondego>      Integer start = now();<newline46mondego>      //Do your test here<newline46mondego>      Integer end = now();<newline46mondego>      return end - start;<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  public static void main(String args[]) throws Exception {<newline46mondego>    ExecutorService pool = Executors.newFixedThreadPool(1000);<newline46mondego>    Set<Future<Integer>> set = new HashSet<Future<Integer>>();<newline46mondego>    for (int i =0 ; i < 1000 i++) {<newline46mondego>      set.add(pool.submit(new Tester()));<newline46mondego>    }<newline46mondego>    Set<Integer> results = new Set<Integer>();<newline46mondego>    for (Future<Integer> future : set) {<newline46mondego>      results.put(future.get());<newline46mondego>    }<newline46mondego><newline46mondego>    //Manipulate results however you wish....<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4248splitHere46","3289577splitHere46","IdentityHashMap<Object, Integer>"
"4249splitHere46","3289577splitHere46","System.identityHashCode(object)"
"4250splitHere46","3289577splitHere46","System.identityHashCode(object) == <whatever number you saw at the previous step>"
"4251splitHere46","3289577splitHere46","toString()"
"4252splitHere46","3289577splitHere46","System.identityHashCode(object)"
"4253splitHere46","3289797splitHere46","import org.junit.extensions.cpsuite.ClasspathSuite;<newline46mondego>import org.junit.runner.RunWith;<newline46mondego><newline46mondego>@RunWith(ClasspathSuite.class)<newline46mondego>@ClassnameFilters({<doubleQuotes46>.*UnitTest<doubleQuotes46>})<newline46mondego>public class MySuite {<newline46mondego>}<newline46mondego>"
"4254splitHere46","3289862splitHere46",".nomedia"
"4255splitHere46","3289862splitHere46",".nomedia"
"4256splitHere46","3289862splitHere46","ContentProvider"
"4257splitHere46","3289862splitHere46","String[] projection = new String[] {<newline46mondego>    MediaStore.Audio.Media.ALBUM,<newline46mondego>    MediaStore.Audio.Media.ARTIST,<newline46mondego>    MediaStore.Audio.Media.TITLE<newline46mondego>};<newline46mondego><newline46mondego>Cursor cursor = managedQuery(<newline46mondego>    MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, //URI<newline46mondego>    projection, //columns to return<newline46mondego>    null, //rows to return -  all<newline46mondego>    null, //selection arguments - none<newline46mondego>    null // sort order - default<newline46mondego>);<newline46mondego><newline46mondego>cursor.moveToFirst();<newline46mondego><newline46mondego>while(! cursor.isLast()) {<newline46mondego>    Log.d(<doubleQuotes46>MediaTest<doubleQuotes46>,<doubleQuotes46>Found track:<doubleQuotes46>);<newline46mondego>    Log.d(<doubleQuotes46>MediaTest<doubleQuotes46>,<doubleQuotes46>Album <doubleQuotes46> + cursor.getString(0));<newline46mondego>    Log.d(<doubleQuotes46>MediaTest<doubleQuotes46>,<doubleQuotes46>Artist <doubleQuotes46> + cursor.getString(1));<newline46mondego>    Log.d(<doubleQuotes46>MediaTest<doubleQuotes46>,<doubleQuotes46>Track <doubleQuotes46> + cursor.getString(2));<newline46mondego>    cursor.moveToNext();<newline46mondego>}<newline46mondego>"
"4258splitHere46","3289945splitHere46","<sec:authorize ifAllGranted=<doubleQuotes46>ROLE_USER, ROLE_ADMIN<doubleQuotes46>><newline46mondego>     <!-- html, jsp scriplets, jstl tags inside here will be visible to user B only --> <newline46mondego></sec:authorize><newline46mondego>"
"4259splitHere46","3289945splitHere46","<sec:authorize ifAllGranted=<doubleQuotes46>ROLE_USER<doubleQuotes46>><newline46mondego>     <!-- anything inside here will be visible to both users --> <newline46mondego></sec:authorize><newline46mondego>"
"4260splitHere46","3290073splitHere46","a"
"4261splitHere46","3290073splitHere46","b"
"4262splitHere46","3290073splitHere46","-p2"
"4263splitHere46","3290074splitHere46","rating"
"4264splitHere46","3290168splitHere46","Export... => Export as Runnable JAR<newline46mondego>"
"4265splitHere46","3290297splitHere46","if (X.getId() != null) {<newline46mondego>    return hibernateTemplate.merge(X);<newline46mondego>} else {<newline46mondego>    hibernateTemplate.saveOrUpdate(X);<newline46mondego>}<newline46mondego>"
"4266splitHere46","3290297splitHere46","saveOrUpdate"
"4267splitHere46","3290384splitHere46","private static <K> void sumMaps(Map<K, Integer> a, Map<K, Integer> b) {<newline46mondego>        for (K key : b.keySet()) {<newline46mondego>            Integer currentCount = a.get(key);<newline46mondego>            a.put(key, currentCount == null ? b.get(key) : currentCount + b.get(key));<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"4268splitHere46","3290520splitHere46","<persistence:entity-manager-factory name=<doubleQuotes46>entityManagerFactory<doubleQuotes46><newline46mondego>        persistence-unit-name=<doubleQuotes46>OSSPortail<doubleQuotes46> /><newline46mondego>"
"4269splitHere46","3290520splitHere46","<persistence:managed-persistence-context name=<doubleQuotes46>entityManager<doubleQuotes46><newline46mondego>    auto-create=<doubleQuotes46>true<doubleQuotes46> entity-manager-factory=<doubleQuotes46>#{entityManagerFactory}<doubleQuotes46> /><newline46mondego>"
"4270splitHere46","3290520splitHere46","<persistence-unit name=<doubleQuotes46>OSSPortail<doubleQuotes46> transaction-type=<doubleQuotes46>JTA<doubleQuotes46>><newline46mondego>    <provider>org.hibernate.ejb.HibernatePersistence</provider><newline46mondego>    <jta-data-source>OSSPortailDataSource</jta-data-source><newline46mondego>    <properties><newline46mondego>        <property name=<doubleQuotes46>hibernate.dialect<doubleQuotes46><newline46mondego>            value=<doubleQuotes46>org.hibernate.dialect.Oracle10gDialect<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>hibernate.connection.driver_class<doubleQuotes46><newline46mondego>            value=<doubleQuotes46>oracle.jdbc.driver.OracleDriver<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>hibernate.hbm2ddl.auto<doubleQuotes46> value=<doubleQuotes46>update<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>hibernate.show_sql<doubleQuotes46> value=<doubleQuotes46>true<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>hibernate.format_sql<doubleQuotes46> value=<doubleQuotes46>true<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>hibernate.default_schema<doubleQuotes46> value=<doubleQuotes46>SI<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>jboss.entity.manager.factory.jndi.name<doubleQuotes46><newline46mondego>            value=<doubleQuotes46>OSSPortailDataSource<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>hibernate.transaction.manager_lookup_class<doubleQuotes46><newline46mondego>            value=<doubleQuotes46>org.hibernate.transaction.WeblogicTransactionManagerLookup<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>hibernate.query.factory_class<doubleQuotes46><newline46mondego>            value=<doubleQuotes46>org.hibernate.hql.classic.ClassicQueryTranslatorFactory<doubleQuotes46> /><newline46mondego>    </properties><newline46mondego></persistence-unit><newline46mondego>"
"4271splitHere46","3290664splitHere46","f1(): 3234<newline46mondego>f2(): 3132<newline46mondego>f3(): 3114<newline46mondego>f4(): 3089<newline46mondego>"
"4272splitHere46","3290664splitHere46","javap -l -c pr1"
"4273splitHere46","3290664splitHere46","public static void f2();<newline46mondego>  Code:<newline46mondego>   0:   lconst_0<newline46mondego>   1:   lstore_0<newline46mondego>   2:   invokestatic    #2; //Method java/lang/System.currentTimeMillis:()J<newline46mondego>   5:   lstore_2<newline46mondego>   6:   ldc2_w  #3; //long 2147483647l<newline46mondego>   9:   lstore  4<newline46mondego>   11:  lload   4<newline46mondego>   13:  dup2<newline46mondego>   14:  lconst_1<newline46mondego>   15:  lsub<newline46mondego>   16:  lstore  4<newline46mondego>   18:  lconst_0<newline46mondego>   19:  lcmp<newline46mondego>   20:  ifle    31<newline46mondego>   23:  lload_0<newline46mondego>   24:  lload   4<newline46mondego>   26:  ladd<newline46mondego>   27:  lstore_0<newline46mondego>   28:  goto    11<newline46mondego>   31:  lload_0<newline46mondego>   32:  ldc2_w  #3; //long 2147483647l<newline46mondego>   35:  ladd<newline46mondego>   36:  lstore_0<newline46mondego>   37:  getstatic       #5; //Field java/lang/System.out:Ljava/io/PrintStream;<newline46mondego>   40:  new     #6; //class java/lang/StringBuilder<newline46mondego>   43:  dup<newline46mondego>   44:  invokespecial   #7; //Method java/lang/StringBuilder.<doubleQuotes46><init><doubleQuotes46>:()V<newline46mondego>   47:  ldc     #13; //String f2():<newline46mondego>   49:  invokevirtual   #9; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<newline46mondego>   52:  invokestatic    #2; //Method java/lang/System.currentTimeMillis:()J<newline46mondego>   55:  lload_2<newline46mondego>   56:  lsub<newline46mondego>   57:  invokevirtual   #10; //Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;<newline46mondego>   60:  invokevirtual   #11; //Method java/lang/StringBuilder.toString:()Ljava/lang/String;<newline46mondego>   63:  invokevirtual   #12; //Method java/io/PrintStream.println:(Ljava/lang/String;)V<newline46mondego>   66:  return<newline46mondego>"
"4274splitHere46","3290664splitHere46","while(i-->0)"
"4275splitHere46","3290664splitHere46","i"
"4276splitHere46","3290695splitHere46","double"
"4277splitHere46","3290695splitHere46","java.lang.Double"
"4278splitHere46","3290695splitHere46","Double d = 5.1;<newline46mondego>"
"4279splitHere46","3290695splitHere46","Double d = Double.valueOf(5.1);<newline46mondego>"
"4280splitHere46","3290816splitHere46","import javax.xml.bind.annotation.XmlAttribute;<newline46mondego><newline46mondego>public abstract class Options {<newline46mondego><newline46mondego>    private String name;<newline46mondego><newline46mondego>    @XmlAttribute<newline46mondego>    public String getName() {<newline46mondego>        return name;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setName(String name) {<newline46mondego>        this.name = name;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4281splitHere46","3290816splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import javax.xml.bind.annotation.XmlRootElement;<newline46mondego>import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;<newline46mondego><newline46mondego>@XmlRootElement<newline46mondego>public class Configuration {<newline46mondego><newline46mondego>    private List<Options> section = new ArrayList<Options>();<newline46mondego><newline46mondego>    @XmlJavaTypeAdapter(OptionsAdapter.class)<newline46mondego>    public List<Options> getSection() {<newline46mondego>        return section;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setSection(List<Options> section) {<newline46mondego>        this.section = section;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4282splitHere46","3290816splitHere46","import javax.xml.bind.annotation.adapters.XmlAdapter;<newline46mondego><newline46mondego>public class OptionsAdapter extends XmlAdapter<AdaptedOptions, Options> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Options unmarshal(AdaptedOptions v) throws Exception {<newline46mondego>        if(<doubleQuotes46>default_options<doubleQuotes46>.equals(v.name)) {<newline46mondego>            DefaultOptions options = new DefaultOptions();<newline46mondego>            options.setName(v.getName());<newline46mondego>            options.setDefaultPort(Integer.valueOf(v.map.get(<doubleQuotes46>default_port<doubleQuotes46>)));<newline46mondego>            options.setLogLevel(v.map.get(<doubleQuotes46>log_level<doubleQuotes46>));<newline46mondego>            return options;<newline46mondego>        } else {<newline46mondego>            CustomOptions options = new CustomOptions();<newline46mondego>            options.setName(v.getName());<newline46mondego>            options.setCompatibility(v.map.get(<doubleQuotes46>compatibility<doubleQuotes46>));<newline46mondego>            options.setMemory(v.map.get(<doubleQuotes46>memory<doubleQuotes46>));<newline46mondego>            return options;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public AdaptedOptions marshal(Options v) throws Exception {<newline46mondego>        AdaptedOptions adaptedOptions = new AdaptedOptions();<newline46mondego>        adaptedOptions.setName(v.getName());<newline46mondego>        if(DefaultOptions.class == v.getClass()) {<newline46mondego>            DefaultOptions options = (DefaultOptions) v;<newline46mondego>            adaptedOptions.map.put(<doubleQuotes46>default_port<doubleQuotes46>, String.valueOf(options.getDefaultPort()));<newline46mondego>            adaptedOptions.map.put(<doubleQuotes46>log_level<doubleQuotes46>, options.getLogLevel());<newline46mondego>        } else {<newline46mondego>            CustomOptions options = (CustomOptions) v;<newline46mondego>            adaptedOptions.map.put(<doubleQuotes46>compatibility<doubleQuotes46>, options.getCompatibility());<newline46mondego>            adaptedOptions.map.put(<doubleQuotes46>memory<doubleQuotes46>, options.getMemory());<newline46mondego>        }<newline46mondego>        return adaptedOptions;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4283splitHere46","3290816splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.HashMap;<newline46mondego>import java.util.List;<newline46mondego>import java.util.Map;<newline46mondego>import java.util.Map.Entry;<newline46mondego><newline46mondego>import javax.xml.bind.Marshaller;<newline46mondego>import javax.xml.bind.Unmarshaller;<newline46mondego>import javax.xml.bind.annotation.XmlAttribute;<newline46mondego>import javax.xml.bind.annotation.XmlElement;<newline46mondego>import javax.xml.bind.annotation.XmlValue;<newline46mondego><newline46mondego>public class AdaptedOptions extends Options {<newline46mondego><newline46mondego>    @XmlAttribute String name;<newline46mondego>    @XmlElement List<Value> value = new ArrayList<Value>();<newline46mondego>    Map<String, String> map = new HashMap<String, String>();<newline46mondego><newline46mondego>    public void beforeMarshal(Marshaller marshaller) {<newline46mondego>        for(Entry<String, String> entry : map.entrySet()) {<newline46mondego>            Value aValue = new Value();<newline46mondego>            aValue.name = entry.getKey();<newline46mondego>            aValue.value = entry.getValue();<newline46mondego>            value.add(aValue);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void afterUnmarshal(Unmarshaller unmarshaller, Object parent) {<newline46mondego>        for(Value aValue : value) {<newline46mondego>            map.put(aValue.name, aValue.value);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private static class Value {<newline46mondego>        @XmlAttribute String name;<newline46mondego>        @XmlValue String value;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4284splitHere46","3290822splitHere46","$input = file_get_contents('php://input');<newline46mondego>$stdin = file_get_contents('php://stdin');<newline46mondego><newline46mondego>print <doubleQuotes46>FILES: <doubleQuotes46>;<newline46mondego>print_r($_FILES);<newline46mondego><newline46mondego>print(<doubleQuotes46><newline46mondego>POST: <doubleQuotes46>);<newline46mondego>print_r($_POST);<newline46mondego><newline46mondego>print(<doubleQuotes46><newline46mondego>input: <doubleQuotes46>.$input);<newline46mondego>print(<doubleQuotes46><newline46mondego>stdin: <doubleQuotes46>.$stdin);<newline46mondego>die;<newline46mondego>"
"4285splitHere46","3290822splitHere46","<?php<newline46mondego>define('CRLF', <doubleQuotes46>\r\n<doubleQuotes46>);<newline46mondego>define('BUFFER_LENGTH', 8192);<newline46mondego>$headers = '';<newline46mondego>$body = '';<newline46mondego>$length = 0;<newline46mondego><newline46mondego>$fp = fsockopen($host, $port, $errno, $errstr, $timeout);<newline46mondego><newline46mondego>// get headers FIRST<newline46mondego>do<newline46mondego>{<newline46mondego>    // use fgets() not fread(), fgets stops reading at first newline<newline46mondego>    // or buffer which ever one is reached first<newline46mondego>    $data = fgets($fp, BUFFER_LENGTH);<newline46mondego>    // a sincle CRLF indicates end of headers<newline46mondego>    if ($data === false || $data == CRLF || feof($fp)) {<newline46mondego>        // break BEFORE OUTPUT<newline46mondego>        break;<newline46mondego>    }<newline46mondego>    $headers .= $data;<newline46mondego>}<newline46mondego>while (true);<newline46mondego>// end of headers<newline46mondego><newline46mondego>// read from chunked stream<newline46mondego>// loop though the stream<newline46mondego>do<newline46mondego>{<newline46mondego>    // NOTE: for chunked encoding to work properly make sure<newline46mondego>    // there is NOTHING (besides newlines) before the first hexlength<newline46mondego><newline46mondego>    // get the line which has the length of this chunk (use fgets here)<newline46mondego>    $line = fgets($fp, BUFFER_LENGTH);<newline46mondego><newline46mondego>    // if it's only a newline this normally means it's read<newline46mondego>    // the total amount of data requested minus the newline<newline46mondego>    // continue to next loop to make sure we're done<newline46mondego>    if ($line == CRLF) {<newline46mondego>        continue;<newline46mondego>    }<newline46mondego><newline46mondego>    // the length of the block is sent in hex decode it then loop through<newline46mondego>    // that much data get the length<newline46mondego>    // NOTE: hexdec() ignores all non hexadecimal chars it finds<newline46mondego>    $length = hexdec($line);<newline46mondego><newline46mondego>    if (!is_int($length)) {<newline46mondego>        trigger_error('Most likely not chunked encoding', E_USER_ERROR);<newline46mondego>    }<newline46mondego><newline46mondego>    // zero is sent when at the end of the chunks<newline46mondego>    // or the end of the stream or error<newline46mondego>    if ($line === false || $length < 1 || feof($fp)) {<newline46mondego>        // break out of the streams loop<newline46mondego>        break;<newline46mondego>    }<newline46mondego><newline46mondego>    // loop though the chunk<newline46mondego>    do<newline46mondego>    {<newline46mondego>        // read $length amount of data<newline46mondego>        // (use fread here)<newline46mondego>        $data = fread($fp, $length);<newline46mondego><newline46mondego>        // remove the amount received from the total length on the next loop<newline46mondego>        // it'll attempt to read that much less data<newline46mondego>        $length -= strlen($data);<newline46mondego><newline46mondego>        // PRINT out directly<newline46mondego>        #print $data;<newline46mondego>        #flush();<newline46mondego>        // you could also save it directly to a file here<newline46mondego><newline46mondego>        // store in string for later use<newline46mondego>        $body .= $data;<newline46mondego><newline46mondego>        // zero or less or end of connection break<newline46mondego>        if ($length <= 0 || feof($fp))<newline46mondego>        {<newline46mondego>            // break out of the chunk loop<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    while (true);<newline46mondego>    // end of chunk loop<newline46mondego>}<newline46mondego>while (true);<newline46mondego>// end of stream loop<newline46mondego><newline46mondego>// $body and $headers should contain your stream data<newline46mondego>?><newline46mondego>"
"4286splitHere46","3290899splitHere46","LOCAL_VARIABLE"
"4287splitHere46","3291225splitHere46","SchemaUpdate"
"4288splitHere46","3291225splitHere46","SchemaExport"
"4289splitHere46","3291225splitHere46","drop table log_entries<newline46mondego><newline46mondego>create table log_entries (<newline46mondego>    id bigint not null,<newline46mondego>    command varchar(255),<newline46mondego>    dttmRun varchar(255),<newline46mondego>    duration integer not null,<newline46mondego>    job varchar(255),<newline46mondego>    pid integer not null,<newline46mondego>    schedule varchar(255),<newline46mondego>    version varchar(255),<newline46mondego>    primary key (id)<newline46mondego>)<newline46mondego><newline46mondego>create index idx on log_entries (job, version, schedule, dttmRun, pid)<newline46mondego>"
"4290splitHere46","3291225splitHere46","SchemaExport"
"4291splitHere46","3291225splitHere46","SchemaUpdate"
"4292splitHere46","3291225splitHere46","SchemaUpdate"
"4293splitHere46","3291822splitHere46","ACTION_BATTERY_CHANGED"
"4294splitHere46","3291822splitHere46","public class Main extends Activity {<newline46mondego>  private TextView batteryTxt;<newline46mondego>  private BroadcastReceiver mBatInfoReceiver = new BroadcastReceiver(){<newline46mondego>    @Override<newline46mondego>    public void onReceive(Context ctxt, Intent intent) {<newline46mondego>      int level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);<newline46mondego>      batteryTxt.setText(String.valueOf(level) + <doubleQuotes46>%<doubleQuotes46>);<newline46mondego>    }<newline46mondego>  };<newline46mondego><newline46mondego>  @Override<newline46mondego>  public void onCreate(Bundle b) {<newline46mondego>    super.onCreate(b);<newline46mondego>    setContentView(R.layout.main);<newline46mondego>    contentTxt = (TextView) this.findViewById(R.id.batteryTxt);<newline46mondego>    this.registerReceiver(this.mBatInfoReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4295splitHere46","3291914splitHere46","divide()"
"4296splitHere46","3291914splitHere46","int s = myNumber.scale();<newline46mondego>BigDecimal result = myNumber.divide(BigDecimal.valueOf(1000000), s+6, RoundingMode.UNNECESSARY);<newline46mondego>"
"4297splitHere46","3291914splitHere46","toPlainString()"
"4298splitHere46","3291924splitHere46","repaintDrawTime()"
"4299splitHere46","3291924splitHere46","JPanel"
"4300splitHere46","3291924splitHere46","FlowLayout"
"4301splitHere46","3291924splitHere46","f.add(this)"
"4302splitHere46","3291924splitHere46","BorderLayout"
"4303splitHere46","3291924splitHere46","g.setColor(new Color(0, 128, 0, 100));<newline46mondego>"
"4304splitHere46","3291924splitHere46","private static final Color color = new Color(0, 128, 0, 100);<newline46mondego>...<newline46mondego>g.setColor(color);<newline46mondego>"
"4305splitHere46","3291924splitHere46","private final Queue<Color> clut = new LinkedList<Color>();<newline46mondego>"
"4306splitHere46","3291966splitHere46","Properties props = new Properties();<newline46mondego>props.load(this.getClass().getResourceAsStream(<doubleQuotes46>/com/company/config/file.properties<doubleQuotes46>));<newline46mondego>"
"4307splitHere46","3292018splitHere46","AccessController#doPrivileged()"
"4308splitHere46","3292018splitHere46","public void init() {<newline46mondego>    AccessController.doPrivileged(new PrivilegedAction<Object> {<newline46mondego>        @Override public Object run() {<newline46mondego>            // Put your original init() here.<newline46mondego>            return null;<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego>"
"4309splitHere46","3292023splitHere46","<phase>process-resources</phase><newline46mondego>"
"4310splitHere46","3292062splitHere46","public class Outer {<newline46mondego><newline46mondego>    public void outerMethod() {<newline46mondego>        final Object o = <doubleQuotes46>fromOuter<doubleQuotes46>;<newline46mondego>        new Object() {<newline46mondego>            public void innerMethod() {<newline46mondego>                System.out.println(o);<newline46mondego>            }<newline46mondego>        }.innerMethod();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4311splitHere46","3292062splitHere46","public class Outer {<newline46mondego><newline46mondego>    public Outer()<newline46mondego>    {<newline46mondego>    }<newline46mondego><newline46mondego>    public void outerMethod()<newline46mondego>    {<newline46mondego>        final Object o = <doubleQuotes46>fromOuter<doubleQuotes46>;<newline46mondego>        (new Object() {<newline46mondego><newline46mondego>            public void innerMethod()<newline46mondego>            {<newline46mondego>                System.out.println(o);<newline46mondego>            }<newline46mondego><newline46mondego>            final Outer this$0;<newline46mondego>            private final Object val$o;<newline46mondego><newline46mondego><newline46mondego>            {<newline46mondego>                this$0 = Outer.this;<newline46mondego>                o = obj;<newline46mondego>                super();<newline46mondego>            }<newline46mondego>        }).innerMethod();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4312splitHere46","3292208splitHere46","ProxyFactory"
"4313splitHere46","3292208splitHere46","ProxyFactory factory = new ProxyFactory();<newline46mondego>    factory.setSuperclass(Dog.class);<newline46mondego>    factory.setFilter(<newline46mondego>            new MethodFilter() {<newline46mondego>                @Override<newline46mondego>                public boolean isHandled(Method method) {<newline46mondego>                    return Modifier.isAbstract(method.getModifiers());<newline46mondego>                }<newline46mondego>            }<newline46mondego>        );<newline46mondego><newline46mondego>    MethodHandler handler = new MethodHandler() {<newline46mondego>        @Override<newline46mondego>        public Object invoke(Object self, Method thisMethod, Method proceed, Object[] args) throws Throwable {<newline46mondego>            System.out.println(<doubleQuotes46>Handling <doubleQuotes46> + thisMethod + <doubleQuotes46> via the method handler<doubleQuotes46>);<newline46mondego>            return null;<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>    Dog dog = (Dog) factory.create(new Class<?>[0], new Object[0], handler);<newline46mondego>    dog.bark();<newline46mondego>    dog.fetch();<newline46mondego>"
"4314splitHere46","3292221splitHere46","MessageDigest md = MessageDigest.getInstance(<doubleQuotes46>MD5<doubleQuotes46>);<newline46mondego>MessageDigest md2 = MessageDigest.getInstance(<doubleQuotes46>SHA-256<doubleQuotes46>);<newline46mondego>MessageDigest md3 = MessageDigest.getInstance(<doubleQuotes46>SHA-512<doubleQuotes46>);<newline46mondego>// etc.<newline46mondego>byte[] encryptedPassword = md.digest(<doubleQuotes46>yourPassword<doubleQuotes46>.getBytes());<newline46mondego>"
"4315splitHere46","3292323splitHere46","public class Widget {<newline46mondego>   private int x = 0;<newline46mondego>   public Widget(Widget copyMe){<newline46mondego>       this.x = copyMe.x;<newline46mondego>       // ...<newline46mondego>   }<newline46mondego>   // ....<newline46mondego>}<newline46mondego>"
"4316splitHere46","3292390splitHere46","<property name=<doubleQuotes46>defaultEncoding<doubleQuotes46> value=<doubleQuotes46>UTF-8<doubleQuotes46>/> <newline46mondego>"
"4317splitHere46","3292549splitHere46","org.springframework.web.servlet.HandlerInterceptor"
"4318splitHere46","3292549splitHere46","Object handler"
"4319splitHere46","3292549splitHere46","<bean class=<doubleQuotes46>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>interceptors<doubleQuotes46>><newline46mondego>        <list><newline46mondego>            <bean class=<doubleQuotes46>a.package.MyHandlerInterceptor<doubleQuotes46>/><newline46mondego>        </list><newline46mondego>    </property><newline46mondego></bean><newline46mondego>"
"4320splitHere46","3292549splitHere46","ModelMap"
"4321splitHere46","3292549splitHere46","${myCustomScript}"
"4322splitHere46","3292549splitHere46","<head>"
"4323splitHere46","3292549splitHere46","ModelMap"
"4324splitHere46","3292564splitHere46","public A() {<newline46mondego>}<newline46mondego>"
"4325splitHere46","3292564splitHere46","public B() {<newline46mondego>}<newline46mondego>"
"4326splitHere46","3292564splitHere46","public C() {<newline46mondego>}<newline46mondego>"
"4327splitHere46","3292591splitHere46","public class Test {<newline46mondego><newline46mondego>     public static void main(String[] args) throws Throwable  {<newline46mondego>        for(int i = 0; i < 3; i++) {<newline46mondego>           ProcessRunner pr = new ProcessRunner(args);<newline46mondego>           pr.start();<newline46mondego>           // wait for 100 ms<newline46mondego>           pr.join(100);<newline46mondego>           // process still going on? kill it!<newline46mondego>           if(!pr.isDone())  {<newline46mondego>              System.err.println(<doubleQuotes46>Destroying process <doubleQuotes46> + pr);<newline46mondego>              pr.abort();<newline46mondego>           }<newline46mondego>        }<newline46mondego>     }<newline46mondego><newline46mondego>     static class ProcessRunner extends Thread  {<newline46mondego>        ProcessBuilder b;<newline46mondego>        Process p;<newline46mondego>        boolean done = false;<newline46mondego><newline46mondego>        ProcessRunner(String[] args)  {<newline46mondego>           super(<doubleQuotes46>ProcessRunner <doubleQuotes46> + args); // got lazy here :D<newline46mondego>           b = new ProcessBuilder(args);<newline46mondego>        }<newline46mondego><newline46mondego>        public void run()   {<newline46mondego>           try   {<newline46mondego>              p = b.start();<newline46mondego><newline46mondego>              // Do your buffered reader and readline stuff here<newline46mondego><newline46mondego>              // wait for the process to complete<newline46mondego>              p.waitFor();<newline46mondego>           }catch(Exception e) {<newline46mondego>              System.err.println(e.getMessage());<newline46mondego>           }finally {<newline46mondego>              // some cleanup code<newline46mondego>              done = true;<newline46mondego>           }<newline46mondego>        }<newline46mondego><newline46mondego>        int exitValue() throws IllegalStateException  {<newline46mondego>           if(p != null)  {<newline46mondego>              return p.exitValue();<newline46mondego>           }         <newline46mondego>           throw new IllegalStateException(<doubleQuotes46>Process not started yet<doubleQuotes46>);<newline46mondego>        }<newline46mondego><newline46mondego>        boolean isDone()  {<newline46mondego>           return done;<newline46mondego>        }<newline46mondego><newline46mondego>        void abort()   {<newline46mondego>           if(! isDone()) {<newline46mondego>              // do some cleanup first<newline46mondego>              p.destroy();<newline46mondego>           }<newline46mondego>        }<newline46mondego>     }<newline46mondego>  }<newline46mondego>"
"4328splitHere46","3292611splitHere46","URL"
"4329splitHere46","3292611splitHere46","URL url = new URL(urlString);<newline46mondego>String encodedQueryString = URLEncoder.encode(url.getQuery());<newline46mondego>String encodedUrl = urlString.replace(url.getQuery(), encodedQueryString);<newline46mondego>"
"4330splitHere46","3292611splitHere46","URL"
"4331splitHere46","3292659splitHere46","<param name=<doubleQuotes46>encryptorRegisteredName<doubleQuotes46>>strongHibernateEncryptor</param><newline46mondego>"
"4332splitHere46","3292659splitHere46","registry.registerPBEStringEncryptor(<doubleQuotes46>strongHibernateStringEncryptor<doubleQuotes46>, strongEncryptor);<newline46mondego>"
"4333splitHere46","3292659splitHere46","strongEncryptor.setPassword(<doubleQuotes46>aStrongPassword<doubleQuotes46>);<newline46mondego>"
"4334splitHere46","3292959splitHere46","package com.google.gson does not exist<newline46mondego>"
"4335splitHere46","3292959splitHere46","javac"
"4336splitHere46","3292959splitHere46","javac"
"4337splitHere46","3293118splitHere46","String myString = <doubleQuotes46>9aie3ra3nr23rr5r21t<doubleQuotes46>;<newline46mondego>System.out.println(upperCaseRandom(myString, 10));<newline46mondego><newline46mondego><newline46mondego>public static String upperCaseRandom(String input, int n) {<newline46mondego> StringBuilder output = new StringBuilder(input);<newline46mondego> Random r = new Random();<newline46mondego><newline46mondego> for (int i = 0; i < n; i++) {<newline46mondego>  // Pick a place<newline46mondego>  int position = r.nextInt(input.length());<newline46mondego><newline46mondego>  // Check if lowercase alpha<newline46mondego>  if (Character.isLowerCase(output.charAt(position))) {<newline46mondego>   output.setCharAt(position, Character.toUpperCase(output.charAt(position)));<newline46mondego>  } else {<newline46mondego>   i--;<newline46mondego>  } <newline46mondego> } <newline46mondego> return output.toString();<newline46mondego>}<newline46mondego>"
"4338splitHere46","3293118splitHere46","public static String upperCaseRandom(String input, int n) {<newline46mondego>    final int length = input.length();<newline46mondego>    final StringBuilder output = new StringBuilder(input);<newline46mondego>    final boolean[] alreadyChecked = new boolean[length];<newline46mondego>    final Random r = new Random();<newline46mondego><newline46mondego>    for (int i = 0, checks = 0; i < n && checks < length; i++) {<newline46mondego>        // Pick a place<newline46mondego>        int position = r.nextInt(length);<newline46mondego><newline46mondego>        // Check if lowercase alpha<newline46mondego>        if (!alreadyChecked[position]) {<newline46mondego>            if (Character.isLowerCase(output.charAt(position))) {<newline46mondego>                output.setCharAt(position, Character.toUpperCase(output.charAt(position)));<newline46mondego>            } else {<newline46mondego>                i--;<newline46mondego>            }<newline46mondego>            checks++;<newline46mondego>            alreadyChecked[position] = true;<newline46mondego>        } else {<newline46mondego>            i--;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return output.toString();<newline46mondego>}<newline46mondego>"
"4339splitHere46","3293361splitHere46","test()"
"4340splitHere46","3293361splitHere46","static"
"4341splitHere46","3293361splitHere46","static"
"4342splitHere46","3293361splitHere46","static"
"4343splitHere46","3293361splitHere46","Why.test(); // always invoke static method on the type it belongs to!<newline46mondego>"
"4344splitHere46","3293361splitHere46","static"
"4345splitHere46","3293361splitHere46","static"
"4346splitHere46","3293361splitHere46","Why aNull = null; <newline46mondego>aNull.test(); // DO NOT EVER DO THIS!<newline46mondego>// invokes Why.test(), does NOT throw NullPointerException<newline46mondego>"
"4347splitHere46","3293361splitHere46","static"
"4348splitHere46","3293361splitHere46","null"
"4349splitHere46","3293361splitHere46","null"
"4350splitHere46","3293361splitHere46","static"
"4351splitHere46","3293361splitHere46","static"
"4352splitHere46","3293361splitHere46","this"
"4353splitHere46","3293452splitHere46","mysql-connect"
"4354splitHere46","3293452splitHere46","plugin.xml"
"4355splitHere46","3293573splitHere46","user.home"
"4356splitHere46","3293615splitHere46","Activity"
"4357splitHere46","3293615splitHere46","NotificationManager"
"4358splitHere46","3293615splitHere46","Activity"
"4359splitHere46","3293615splitHere46","Context"
"4360splitHere46","3293615splitHere46","Activity"
"4361splitHere46","3293615splitHere46","Service"
"4362splitHere46","3293744splitHere46","@XmlAnyElement"
"4363splitHere46","3293744splitHere46","JAXBElement"
"4364splitHere46","3293744splitHere46","private Map<String, Integer> months = ...;<newline46mondego><newline46mondego>@XmlAnyElement<newline46mondego>public List<JAXBElement<Integer>> getMonths() {<newline46mondego>    List<JAXBElement<Integer>> elements = new ArrayList<JAXBElement<Integer>>();<newline46mondego>    for (Map.Entry<String, Integer> month: months.entrySet()) <newline46mondego>        elements.add(new JAXBElement(new QName(month.getKey()), <newline46mondego>                                     Integer.class, month.getValue()));<newline46mondego>    return elements;<newline46mondego>}<newline46mondego>"
"4365splitHere46","3293942splitHere46","while (xmlStreamReader.hasNext()) {<newline46mondego>    int event = xmlStreamReader.next();<newline46mondego><newline46mondego>    if (event == XMLStreamConstants.START_ELEMENT) {<newline46mondego>        try {<newline46mondego>            String text = xmlStreamReader.getElementText();<newline46mondego>            System.out.println(<doubleQuotes46>Element Local Name:<doubleQuotes46> + xmlStreamReader.getLocalName());<newline46mondego>            System.out.println(<doubleQuotes46>Text:<doubleQuotes46> + text);<newline46mondego>        } catch (XMLStreamException e) {<newline46mondego><newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4366splitHere46","3293942splitHere46","public class Test extends DefaultHandler {<newline46mondego><newline46mondego>    public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException, XPathExpressionException, XMLStreamException {<newline46mondego>        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();<newline46mondego>        parser.parse(new File(<doubleQuotes46>src/file.xml<doubleQuotes46>), new Test());<newline46mondego>    }<newline46mondego><newline46mondego>    private String currentName;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {<newline46mondego>        currentName = qName;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void characters(char[] ch, int start, int length) throws SAXException {<newline46mondego>        String string = new String(ch, start, length);<newline46mondego>        if (hasText(string)) {<newline46mondego>            System.out.println(currentName);<newline46mondego>            System.out.println(string);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private boolean hasText(String string) {<newline46mondego>        string = string.trim();<newline46mondego>        return string.length() > 0;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4367splitHere46","3293970splitHere46","x"
"4368splitHere46","3293970splitHere46","x.toArray (new Foo[x.size ()])<newline46mondego>"
"4369splitHere46","3294032splitHere46","javax.persistence.Query#getResultList"
"4370splitHere46","3294032splitHere46","List"
"4371splitHere46","3294032splitHere46","List[String]"
"4372splitHere46","3294032splitHere46","List[_]"
"4373splitHere46","3294032splitHere46","List[?0] forSome { type ?0 }"
"4374splitHere46","3294032splitHere46","andReturn"
"4375splitHere46","3294032splitHere46","expect"
"4376splitHere46","3294032splitHere46","expect(mockQuery.getResultList.asInstanceOf[List[String]]).andReturn(mockResult)<newline46mondego>"
"4377splitHere46","3294051splitHere46","class MySectionedAdapter extends SectionedAdapter<newline46mondego>{<newline46mondego>   @Override<newline46mondego>   protected View getHeaderView(...)<newline46mondego>   {<newline46mondego>      ...<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"4378splitHere46","3294051splitHere46","SectionedAdapter tagSectionedAdapter = new MySectionedAdapter();"
"4379splitHere46","3294051splitHere46","Runnable"
"4380splitHere46","3294088splitHere46","JPopupMenu"
"4381splitHere46","3294088splitHere46","show"
"4382splitHere46","3294088splitHere46","Actions"
"4383splitHere46","3294313splitHere46","Thread.currentThread()"
"4384splitHere46","3294313splitHere46","private class MyTask implements Runnable {<newline46mondego>    public void run() {<newline46mondego>        long threadId = Thread.currentThread().getId();<newline46mondego>        logger.debug(<doubleQuotes46>Thread # <doubleQuotes46> + threadId + <doubleQuotes46> is doing this task<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4385splitHere46","3294506splitHere46","classpath*:conf/appContext.xml"
"4386splitHere46","3294506splitHere46","classpath:conf/appContext.xml"
"4387splitHere46","3294588splitHere46","convertView"
"4388splitHere46","3294588splitHere46","getView"
"4389splitHere46","3294588splitHere46","getViewTypeCount"
"4390splitHere46","3294588splitHere46","getItemViewType"
"4391splitHere46","3294588splitHere46","convertView"
"4392splitHere46","3294588splitHere46","getView"
"4393splitHere46","3294667splitHere46","System.setProperty(<doubleQuotes46>twitter4j.oauth.consumerKey<doubleQuotes46>, <doubleQuotes46>your token<doubleQuotes46>);<newline46mondego>System.setProperty(<doubleQuotes46>twitter4j.oauth.consumerSecret<doubleQuotes46>, <doubleQuotes46>your token secret<doubleQuotes46>);<newline46mondego><newline46mondego>Twitter twitter = new TwitterFactory().getInstance(login, password);<newline46mondego><newline46mondego>AccessToken accessToken = twitter.getOAuthAccessToken();<newline46mondego>"
"4394splitHere46","3294667splitHere46","AccesToken"
"4395splitHere46","3294667splitHere46","if (mAccessToken != null) {<newline46mondego>    if (mAccessToken.getToken() != null && mAccessToken.getTokenSecret() != null) {<newline46mondego>        saveAccessToken(mAccessToken.getToken(), mAccessToken.getTokenSecret());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4396splitHere46","3294667splitHere46","TwitterFactory factory = new TwitterFactory();<newline46mondego>Twitter twitter = factory.getInstance();<newline46mondego>twitter.setOAuthConsumer(<doubleQuotes46>[consumer key]<doubleQuotes46>, <doubleQuotes46>[consumer secret]<doubleQuotes46>);<newline46mondego>AccessToken accessToken = loadAccessToken();<newline46mondego>twitter.setOAuthAccessToken(accessToken);<newline46mondego>"
"4397splitHere46","3294700splitHere46","getClass().getSuperclass()<newline46mondego>"
"4398splitHere46","3294860splitHere46","ArrayList"
"4399splitHere46","3294860splitHere46","SortedMap"
"4400splitHere46","3294860splitHere46","ConcurrentSkipListMap"
"4401splitHere46","3294860splitHere46","List.indexOf"
"4402splitHere46","3294860splitHere46","ArrayList keysList;<newline46mondego>Map keyValues;<newline46mondego>for(String key: keysList) {<newline46mondego>   String value = keyValues.get(key);<newline46mondego>}<newline46mondego>"
"4403splitHere46","3294891splitHere46","Caused by: java.lang.RuntimeException: No-args constructor for class readGoogle$<newline46mondego>Item does not exist.<newline46mondego>"
"4404splitHere46","3295259splitHere46",".class"
"4405splitHere46","3295259splitHere46","int.class"
"4406splitHere46","3295259splitHere46",".class"
"4407splitHere46","3295259splitHere46",".class"
"4408splitHere46","3295439splitHere46","Request"
"4409splitHere46","3295439splitHere46","Response"
"4410splitHere46","3295439splitHere46","protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {<newline46mondego>    Request request = new RequestImpl(req, res);<newline46mondego>    Action action = ActionFactory.getAction(req); // Do whatever way you do to locate the `Action`.<newline46mondego>    Response = action.get(request);<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"4411splitHere46","3295439splitHere46","RequestImpl"
"4412splitHere46","3295439splitHere46","public class RequestImpl implements Request {<newline46mondego>    private HttpServletRequest request;<newline46mondego>    private HttpServletResponse response;<newline46mondego><newline46mondego>    public RequestImpl(HttpServletRequest request, HttpServletResponse response) {<newline46mondego>        this.request = request;<newline46mondego>        this.response = response;<newline46mondego>    }<newline46mondego><newline46mondego>    public Response newResponse(Status status) {<newline46mondego>        return new ResponseImpl(response, status);<newline46mondego>        // Add a boolean responseCreated to avoid creation of multiple responses? Illegal state!<newline46mondego>    }<newline46mondego><newline46mondego>    public String getParameter(String name) { // Just another example of decorated method.<newline46mondego>        return request.getParameter(name);<newline46mondego>    }<newline46mondego><newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"4413splitHere46","3295439splitHere46","ResponseImpl"
"4414splitHere46","3295439splitHere46","public class ResponseImpl implements Response {<newline46mondego>    private HttpServletResponse response;<newline46mondego><newline46mondego>    public ResponseImpl(HttpServletResponse response, Status status) {<newline46mondego>        this.response = response;<newline46mondego>        this.response.setStatus(status.getCode());<newline46mondego>    }<newline46mondego><newline46mondego>    public OutputStream getOutputStream() {<newline46mondego>        return response.getOutputStream();<newline46mondego>    }<newline46mondego><newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"4415splitHere46","3295439splitHere46","Action"
"4416splitHere46","3295439splitHere46","public ActionImpl implements Action {<newline46mondego>    public Response get(Request request) {<newline46mondego>        Response response = request.newResponse(OK);<newline46mondego>        response.getOutputStream().write(<doubleQuotes46>body<doubleQuotes46>);<newline46mondego>        return response;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4417splitHere46","3295439splitHere46","Context"
"4418splitHere46","3295439splitHere46","HttpServletRequest"
"4419splitHere46","3295439splitHere46","HttpServletResponse"
"4420splitHere46","3295439splitHere46","Request"
"4421splitHere46","3295439splitHere46","protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {<newline46mondego>    Context context = new ContextImpl(req, res);<newline46mondego>    Action action = ActionFactory.getAction(req); // Do whatever way you do to locate the `Action`.<newline46mondego>    action.execute(context);<newline46mondego>    context.render(); // Do here whatever you'd initially to do with the obtained Response.<newline46mondego>}<newline46mondego>"
"4422splitHere46","3295439splitHere46","public ActionImpl implements Action {<newline46mondego>    public void execute(Context context) {<newline46mondego>        context.getResponseOutputStream().write(<doubleQuotes46>body<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4423splitHere46","3295486splitHere46","public doJob()<newline46mondego>{<newline46mondego>  while(!isTerminated)<newline46mondego>    executeNative();<newline46mondego>}<newline46mondego>"
"4424splitHere46","3295517splitHere46","Serializable"
"4425splitHere46","3295541splitHere46","Image img = ImagesServiceFactory.makeImage(uploadedBytes);<newline46mondego>String contentType = <doubleQuotes46>image/<doubleQuotes46> + img.getFormat().toString().toLowerCase();<newline46mondego>"
"4426splitHere46","3295752splitHere46","nohup"
"4427splitHere46","3295752splitHere46","nohup jar -jar start.jar<newline46mondego>"
"4428splitHere46","3295752splitHere46","screen"
"4429splitHere46","3295849splitHere46","URLEncoder.encode(url, <doubleQuotes46>UTF-8<doubleQuotes46>)"
"4430splitHere46","3295956splitHere46","<form action=<doubleQuotes46>servlet<doubleQuotes46> method=<doubleQuotes46>post<doubleQuotes46>><newline46mondego>    <input type=<doubleQuotes46>text<doubleQuotes46> name=<doubleQuotes46>xml<doubleQuotes46>><newline46mondego>    <input type=<doubleQuotes46>submit<doubleQuotes46>><newline46mondego></form><newline46mondego>"
"4431splitHere46","3295956splitHere46","doPost()"
"4432splitHere46","3295956splitHere46","String xml = request.getParameter(<doubleQuotes46>xml<doubleQuotes46>);<newline46mondego>"
"4433splitHere46","3295956splitHere46","<textarea name=<doubleQuotes46>xml<doubleQuotes46>></textarea><newline46mondego>"
"4434splitHere46","3295956splitHere46","<input type=<doubleQuotes46>file<doubleQuotes46>>"
"4435splitHere46","3295956splitHere46","<form action=<doubleQuotes46>servlet<doubleQuotes46> method=<doubleQuotes46>post<doubleQuotes46> enctype=<doubleQuotes46>multipart/form-data<doubleQuotes46>><newline46mondego>    <input type=<doubleQuotes46>file<doubleQuotes46> name=<doubleQuotes46>xml<doubleQuotes46>><newline46mondego>    <input type=<doubleQuotes46>submit<doubleQuotes46>><newline46mondego></form><newline46mondego>"
"4436splitHere46","3296224splitHere46","String[] wepN = new String[100];                        <newline46mondego>int wepQty = 0;<newline46mondego><newline46mondego>for (int i=0; i < wepN.length; i++) {<newline46mondego>    if (data.getItems().get(i).getName() == null || <doubleQuotes46><doubleQuotes46>.equals(data.getItems().get(i).getName())) {<newline46mondego>        System.out.println(data.getItems().get(i).getName() + <doubleQuotes46> -NO MOARE<doubleQuotes46>);<newline46mondego>        break;<newline46mondego>    }<newline46mondego>    wepN[i] = data.getItems().get(i).getName();<newline46mondego>    wepQty++;<newline46mondego>}              <newline46mondego>"
"4437splitHere46","3296275splitHere46","isValid = isValidHttpUrl(IDN.toASCII(url));<newline46mondego>"
"4438splitHere46","3296317splitHere46","p:cookieSecure=<doubleQuotes46>false<doubleQuotes46><newline46mondego>"
"4439splitHere46","3296582splitHere46","<web-app version=<doubleQuotes46>2.5<doubleQuotes46><newline46mondego>  xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/javaee<doubleQuotes46><newline46mondego>  xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>  xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<doubleQuotes46>><newline46mondego>"
"4440splitHere46","3296653splitHere46","select max(bodyWeight) as max, min(bodyWeight) as min, count(*) as n<newline46mondego>from Cat cat<newline46mondego>"
"4441splitHere46","3296653splitHere46","select new map( max(bodyWeight) as max, min(bodyWeight) as min, count(*) as n )<newline46mondego>from Cat cat<newline46mondego>"
"4442splitHere46","3296811splitHere46","request.getRequestDispatcher(<doubleQuotes46>/WEB-INF/classes/foo/page.jsp<doubleQuotes46>).forward(request, response); <newline46mondego>"
"4443splitHere46","3296823splitHere46","myString.replaceAll(<doubleQuotes46>aba(\\w*?)aca<doubleQuotes46>, <doubleQuotes46>b$1ca<doubleQuotes46>) // would also match abaaca, without blah in the middle<newline46mondego>"
"4444splitHere46","3296823splitHere46","myString.replaceAll(<doubleQuotes46>aba(\\w+?)aca<doubleQuotes46>, <doubleQuotes46>b$1ca<doubleQuotes46>) // match onlu if there is a char between aba and aca<newline46mondego>"
"4445splitHere46","3297046splitHere46","some_obj"
"4446splitHere46","3297046splitHere46","Closeable"
"4447splitHere46","3297046splitHere46","Closeable"
"4448splitHere46","3297046splitHere46","Object"
"4449splitHere46","3297355splitHere46","public enum Modes {ADDITION, SUBTRACTION, MULITPLICATION, DIVISION}<newline46mondego><newline46mondego>public interface Mode {<newline46mondego>  double calculate(double a, double b);<newline46mondego>}<newline46mondego><newline46mondego>public class AdditionMode implements Mode {<newline46mondego>  public double calculate(double a, double b) {<newline46mondego>    return (a+b);<newline46mondego>  }<newline46mondego>}<newline46mondego>// similiar classes for other math operation modes<newline46mondego><newline46mondego>public class Calculator {<newline46mondego>  private Mode mode;<newline46mondego>  public setMode(Modes mode) {<newline46mondego>    switch (mode) {<newline46mondego>      case ADDITION: this.mode = new AdditionMode();<newline46mondego>      // ...<newline46mondego>    }<newline46mondego>  }<newline46mondego>  public double calculate(double a, double b) {<newline46mondego>    return mode.calculate(a, b);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4450splitHere46","3297435splitHere46","FileSystemRegistry.listRoots()"
"4451splitHere46","3297477splitHere46","WEB-INF/lib"
"4452splitHere46","3297477splitHere46","faces-config"
"4453splitHere46","3297477splitHere46","<faces-config version=<doubleQuotes46>2.0<doubleQuotes46> xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/javaee<doubleQuotes46><newline46mondego> xmlns:xi=<doubleQuotes46>http://www.w3.org/2001/XInclude<doubleQuotes46><newline46mondego> xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46> xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd<doubleQuotes46>><newline46mondego>"
"4454splitHere46","3297477splitHere46","INFO: Initializing Mojarra 2.0.2 (FCS b10) for context '/nameofyourapplication'"
"4455splitHere46","3297479splitHere46","def cached_get(key):<newline46mondego>  entity = memcache.get(str(key))<newline46mondego>  if not entity:<newline46mondego>    entity = db.get(key)<newline46mondego>    memcache.set(str(key), entity)<newline46mondego>  return entity<newline46mondego>"
"4456splitHere46","3297869splitHere46","client.properties"
"4457splitHere46","3297869splitHere46","mn_keystore.ks"
"4458splitHere46","3297869splitHere46","wss4j-1.5.8.jar"
"4459splitHere46","3297869splitHere46",".jar"
"4460splitHere46","3297869splitHere46","client.properties"
"4461splitHere46","3297869splitHere46","wss4j-1.5.8.jar"
"4462splitHere46","3297869splitHere46",".properties"
"4463splitHere46","3297929splitHere46","AppletContext a = getAppletContext();<newline46mondego>URL url = new URL(link_to_your_servlet);<newline46mondego>a.showDocument(url,<doubleQuotes46>_blank<doubleQuotes46>);<newline46mondego>"
"4464splitHere46","3298077splitHere46","public String getLogoutUrl() {<newline46mondego>    return <doubleQuotes46>/logout.jsf<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"4465splitHere46","3298077splitHere46","<META HTTP-EQUIV=<doubleQuotes46>Refresh<doubleQuotes46> CONTENT=<doubleQuotes46>0;URL=https://localhost:8080/anotherwebapp/logout.html<doubleQuotes46>><newline46mondego>"
"4466splitHere46","3298141splitHere46","try {<newline46mondego>      InetAddress i = InetAddress.getByName(URLName);<newline46mondego>    } catch (UnknownHostException e1) {<newline46mondego>      e1.printStackTrace();<newline46mondego>    }<newline46mondego>// ... actually using URLName<newline46mondego>"
"4467splitHere46","3298144splitHere46","public class Test<newline46mondego>{<newline46mondego>    class Inner<newline46mondego>    {<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4468splitHere46","3298144splitHere46","Test.Inner"
"4469splitHere46","3298144splitHere46","Test"
"4470splitHere46","3298144splitHere46","import java.lang.reflect.*;<newline46mondego><newline46mondego>public class Test<newline46mondego>{<newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        for (Field field : Inner.class.getDeclaredFields())<newline46mondego>        {<newline46mondego>            System.out.println(field.getName() + <doubleQuotes46>: <doubleQuotes46> + field.isSynthetic());<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    class Inner<newline46mondego>    {<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4471splitHere46","3298144splitHere46","this$0: true<newline46mondego>"
"4472splitHere46","3298297splitHere46","DispatcherServlet.doDispatch()"
"4473splitHere46","3298297splitHere46","HandlerExceptionResolver"
"4474splitHere46","3298617splitHere46","Calendar"
"4475splitHere46","3298617splitHere46","Date"
"4476splitHere46","3298617splitHere46","x++;"
"4477splitHere46","3298617splitHere46","Integer.valueOf"
"4478splitHere46","3298617splitHere46","Integer x = 5;<newline46mondego>x++;<newline46mondego>Integer y = 5;<newline46mondego>y++;<newline46mondego><newline46mondego>// This prints true    <newline46mondego>System.out.println(x == y); // Compare references<newline46mondego>"
"4479splitHere46","3298617splitHere46","Integer"
"4480splitHere46","3298744splitHere46","C:\Program Files\IBM\WebSphere MQ\tools\jms\samples\simple\SimpleMQMDWrite.java"
"4481splitHere46","3298876splitHere46","maven-war-plugin"
"4482splitHere46","3298876splitHere46","web.xml"
"4483splitHere46","3298876splitHere46","<profiles><newline46mondego>    <profile><newline46mondego>        <id>profile1</id><newline46mondego>        <build><newline46mondego>            <plugins><newline46mondego>                <plugin><newline46mondego>                    <groupId>org.apache.maven.plugins</groupId><newline46mondego>                    <artifactId>maven-war-plugin</artifactId><newline46mondego>                    <configuration><newline46mondego>                        <webXml>/path/to/webXml1</webXml><newline46mondego>                    </configuration><newline46mondego>                </plugin><newline46mondego>                 ...<newline46mondego>"
"4484splitHere46","3298876splitHere46","maven-war-plugin"
"4485splitHere46","3298876splitHere46","<build><plugins>"
"4486splitHere46","3298876splitHere46","webXml"
"4487splitHere46","3298876splitHere46","<properties><newline46mondego>    <webXmlPath>path/to/default/webXml</webXmlPath><newline46mondego></properties><newline46mondego><profiles><newline46mondego>    <profile><newline46mondego>        <id>profile1</id><newline46mondego>        <properties><newline46mondego>            <webXmlPath>path/to/custom/webXml</webXmlPath><newline46mondego>        </properties><newline46mondego>    </profile><newline46mondego></profiles><newline46mondego><build><newline46mondego>    <plugins><newline46mondego>        <plugin><newline46mondego>            <groupId>org.apache.maven.plugins</groupId><newline46mondego>            <artifactId>maven-war-plugin</artifactId><newline46mondego>            <configuration><newline46mondego>                <webXml>${webXmlPath}</webXml><newline46mondego>            </configuration><newline46mondego>        </plugin><newline46mondego>        ...<newline46mondego>"
"4488splitHere46","3298916splitHere46","/WEB-INF"
"4489splitHere46","3298916splitHere46","security-constraint"
"4490splitHere46","3298916splitHere46","url-pattern"
"4491splitHere46","3298916splitHere46","*.xhtml"
"4492splitHere46","3298916splitHere46","auth-constraint"
"4493splitHere46","3298916splitHere46","web.xml"
"4494splitHere46","3298916splitHere46","<security-constraint><newline46mondego>    <display-name>Restrict direct access to XHTML files</display-name><newline46mondego>    <web-resource-collection><newline46mondego>        <web-resource-name>XHTML files</web-resource-name><newline46mondego>        <url-pattern>*.xhtml</url-pattern><newline46mondego>    </web-resource-collection><newline46mondego>    <auth-constraint /><newline46mondego></security-constraint> <newline46mondego>"
"4495splitHere46","3298977splitHere46","getClass().getName()<newline46mondego>"
"4496splitHere46","3298977splitHere46","byte[]"
"4497splitHere46","3298977splitHere46","getClass().getClassLoader().defineClass(...)"
"4498splitHere46","3299011splitHere46","*.xhtml"
"4499splitHere46","3299011splitHere46","UTF-8"
"4500splitHere46","3299087splitHere46","SnakeGame"
"4501splitHere46","3299087splitHere46","view"
"4502splitHere46","3299087splitHere46","<applet width=200 height=100 code=<doubleQuotes46>view.SnakeGame.class<doubleQuotes46>><newline46mondego>"
"4503splitHere46","3299087splitHere46","com.stackoverflow.MyClass.class"
"4504splitHere46","3299214splitHere46","<doubleQuotes46>John Doe Jr<doubleQuotes46>.replaceAll(<doubleQuotes46>(\\S+)$<doubleQuotes46>, <doubleQuotes46><strong>$1</strong><doubleQuotes46>)<newline46mondego>"
"4505splitHere46","3299578splitHere46","java.util.Date"
"4506splitHere46","3299578splitHere46","String d1 = <doubleQuotes46>21:00:00<doubleQuotes46>;<newline46mondego>    String d2 = <doubleQuotes46>04:00:00<doubleQuotes46>;<newline46mondego>    SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>HH:mm:ss<doubleQuotes46>);<newline46mondego>    String dToTest = <doubleQuotes46>16:00:00<doubleQuotes46>;<newline46mondego>    boolean isSplit = false, isWithin = false;<newline46mondego><newline46mondego>    Date dt1 = null, dt2 = null,  dt3 = null;<newline46mondego><newline46mondego>    dt1 = sdf.parse(d1);<newline46mondego>    dt2 = sdf.parse(d2);<newline46mondego>    dt3 = sdf.parse(dToTest);<newline46mondego><newline46mondego>    isSplit = (dt2.compareTo(dt1) < 0);<newline46mondego>    System.out.println(<doubleQuotes46>[split]: <doubleQuotes46> +isSplit);<newline46mondego><newline46mondego>    if (isSplit)<newline46mondego>    {<newline46mondego>        isWithin = (dt3.after(dt1) || dt3.before(dt2));<newline46mondego>    }<newline46mondego>    else<newline46mondego>    {<newline46mondego>        isWithin = (dt3.after(dt1) && dt3.before(dt2));<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>Is time within interval? <doubleQuotes46> +isWithin);<newline46mondego>"
"4507splitHere46","3299592splitHere46","public class Cls {<newline46mondego>    private int x;<newline46mondego>    private int y;<newline46mondego>    private int z;<newline46mondego><newline46mondego>    public Cls(int x, int y){<newline46mondego>         this(x,y,0);<newline46mondego>    }<newline46mondego><newline46mondego>    public Cls(int x, int y, int z){<newline46mondego>        this.x = x;<newline46mondego>        this.y = y;<newline46mondego>        this.z = z;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4508splitHere46","3299667splitHere46","go"
"4509splitHere46","3299667splitHere46","easyMethod"
"4510splitHere46","3299667splitHere46","class A {<newline46mondego>    Boolean b;<newline46mondego>    A easyMethod(A a){<newline46mondego>        a = null; // the reference to a2 was passed in, but is set to null<newline46mondego>                  // a2 is not set to null - this copy of a reference is!<newline46mondego>        return a; // null is returned<newline46mondego>    }<newline46mondego>    public static void main(String [] args){<newline46mondego>        A a1 = new A(); // 1 obj<newline46mondego>        A a2 = new A(); // 2 obj<newline46mondego>        A a3 = new A(); // 3 obj<newline46mondego>        a3 = a1.go(a2); // a3 set to null and flagged for GC - see above for why<newline46mondego>        a1 = null; // so far, a1 and a3 have been set to null and flagged<newline46mondego>        // Some other code <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4511splitHere46","3299667splitHere46","b"
"4512splitHere46","3299667splitHere46","Boolean"
"4513splitHere46","3299667splitHere46","// Some other code"
"4514splitHere46","3299667splitHere46","class A {<newline46mondego>    int i;<newline46mondego>    A(int i) { this.i = i; }<newline46mondego>    public String toString() { return <doubleQuotes46><doubleQuotes46>+i; }<newline46mondego>    A go(A a){<newline46mondego>        a = null; // the reference to a2 was passed in, but is set to null<newline46mondego>                  // a2 is not set to null - this copy of a reference is!<newline46mondego>        return a; // null is returned<newline46mondego>    }<newline46mondego>    public static void main(String [] args){<newline46mondego>        A a1 = new A(1); // 1 obj<newline46mondego>        A a2 = new A(2); // 2 obj<newline46mondego>        A a3 = new A(3); // 3 obj<newline46mondego>        a3 = a1.go(a2); // a3 set to null and flagged for GC - see above for why<newline46mondego>        a1 = null; // so far, a1 and a3 have been set to null and flagged<newline46mondego><newline46mondego>        test(a1);<newline46mondego>        test(a2);<newline46mondego>        test(a3);<newline46mondego><newline46mondego>    }<newline46mondego>    static void test(A a) {<newline46mondego>        try { System.out.println(a); } <newline46mondego>        catch(Exception e) { System.out.println((String)null); }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4515splitHere46","3299667splitHere46","c:\files\j>javac A.java<newline46mondego><newline46mondego>c:\files\j>java A<newline46mondego>null<newline46mondego>2<newline46mondego>null<newline46mondego>"
"4516splitHere46","3300078splitHere46","import java.util.Date;<newline46mondego>import org.joda.time.DateTime;<newline46mondego>import org.joda.time.Days;<newline46mondego><newline46mondego>Date past = new Date(110, 5, 20); // June 20th, 2010<newline46mondego>Date today = new Date(110, 6, 24); // July 24th <newline46mondego>int days = Days.daysBetween(new DateTime(past), new DateTime(today)).getDays(); // => 34<newline46mondego>"
"4517splitHere46","3300107splitHere46","label.setText(...);<newline46mondego>"
"4518splitHere46","3300107splitHere46","repaint()"
"4519splitHere46","3300107splitHere46","Timer"
"4520splitHere46","3300107splitHere46","JDialog"
"4521splitHere46","3300107splitHere46","Timer"
"4522splitHere46","3300107splitHere46","dialog.setVisible(true)"
"4523splitHere46","3300213splitHere46","Set"
"4524splitHere46","3300213splitHere46","<newline46mondego>Set<String> keys = new HashSet<String>(listOKeys);<newline46mondego><newline46mondego>for (String header : listOHeaders) {<newline46mondego>    if (keys.contains(header)) {<newline46mondego>        // process<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4525splitHere46","3300325splitHere46","name"
"4526splitHere46","3300325splitHere46","name"
"4527splitHere46","3300656splitHere46","Utils.myMethod(new String[] {str1, str2}); <newline46mondego>"
"4528splitHere46","3300782splitHere46","java.util.ResourceBundle"
"4529splitHere46","3300782splitHere46","java.text.MessageFormat"
"4530splitHere46","3300782splitHere46","{n}"
"4531splitHere46","3300782splitHere46","MessageFormat#format()"
"4532splitHere46","3300782splitHere46","ResourceBundle bundle = ResourceBundle.getBundle(<doubleQuotes46>filename<doubleQuotes46>, Locale.ENGLISH);<newline46mondego>"
"4533splitHere46","3300782splitHere46","String key1 = bundle.getString(<doubleQuotes46>key1<doubleQuotes46>);<newline46mondego>String key2 = bundle.getString(<doubleQuotes46>key2<doubleQuotes46>);<newline46mondego>"
"4534splitHere46","3300782splitHere46","String formattedKey1 = MessageFormat.format(key1, <doubleQuotes46>xyz<doubleQuotes46>);<newline46mondego>String formattedKey2 = MessageFormat.format(key2, <doubleQuotes46>4 years<doubleQuotes46>, <doubleQuotes46>Barney and Friends<doubleQuotes46>, <doubleQuotes46>Spongebob<doubleQuotes46>);<newline46mondego>"
"4535splitHere46","3300782splitHere46","String"
"4536splitHere46","3300782splitHere46","res/values/strings.xml"
"4537splitHere46","3300782splitHere46","values"
"4538splitHere46","3300782splitHere46","res/values-es/"
"4539splitHere46","3300782splitHere46","strings.xml"
"4540splitHere46","3300876splitHere46","public class A {<newline46mondego> static final long tooth#1 = 1L;<newline46mondego><newline46mondego> static long tooth#2(long tooth#3){<newline46mondego>  System.out.println(++tooth#3);<newline46mondego>  return ++tooth#3;<newline46mondego> }<newline46mondego><newline46mondego> public static void main(String args[]){<newline46mondego>  System.out.println(tooth#1);<newline46mondego>  final long tooth#4 = 2L;<newline46mondego>  new A().tooth#2(tooth#4);<newline46mondego>  System.out.println(tooth#4);<newline46mondego>}<newline46mondego>"
"4541splitHere46","3300919splitHere46","<div id=<doubleQuotes46>c1256209263986<doubleQuotes46> class=<doubleQuotes46>iw_component<doubleQuotes46>><div xmlns:esi=<doubleQuotes46>http://www.edge-delivery.org"
"4542splitHere46","3301162splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><project xmlns=<doubleQuotes46>http://maven.apache.org/POM/4.0.0<doubleQuotes46> xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>     xsi:schemaLocation=<doubleQuotes46>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<doubleQuotes46>><newline46mondego>    <modelVersion>4.0.0</modelVersion><newline46mondego><newline46mondego>    <groupId>your.company</groupId><newline46mondego>    <artifactId>company-parent</artifactId><newline46mondego>    <version>1.0.0-SNAPSHOT</version><newline46mondego>    <packaging>pom</packaging><newline46mondego><newline46mondego>    <distributionManagement><newline46mondego>        <repository><newline46mondego>            <id>nexus-site</id><newline46mondego>            <url>http://central_nexus/server</url><newline46mondego>        </repository><newline46mondego>    </distributionManagement><newline46mondego><newline46mondego></project><newline46mondego>"
"4543splitHere46","3301162splitHere46","<parent><newline46mondego>  <groupId>your.company</groupId><newline46mondego>  <artifactId>company-parent</artifactId><newline46mondego>  <version>1.0.0</version><newline46mondego></parent><newline46mondego>"
"4544splitHere46","3301162splitHere46","- pom.xml (aggregator)<newline46mondego>    - project-parent<newline46mondego>    - project-module1<newline46mondego>    - project-module2<newline46mondego>"
"4545splitHere46","3301275splitHere46","java.lang.Throwable"
"4546splitHere46","3301459splitHere46","Pattern p = Pattern.compile(<doubleQuotes46>^JWE-([0-9]+)\\.([0-9]+)\\.pdf$<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(<doubleQuotes46>your string here<doubleQuotes46>);<newline46mondego><newline46mondego>if (m.find()) {<newline46mondego>    System.out.println(m.group(1)); //first number group<newline46mondego>    System.out.println(m.group(2)); //second number group<newline46mondego>}<newline46mondego>"
"4547splitHere46","3301459splitHere46","Pattern p"
"4548splitHere46","3301484splitHere46","setLength()"
"4549splitHere46","3301484splitHere46","File target = new File(<doubleQuotes46>/path/to/file<doubleQuotes46>);<newline46mondego>RandomAccessFile file = new RandomAccessFile(target,<doubleQuotes46>rwd<doubleQuotes46>);<newline46mondego>file.seek(target.length()-1); // Set the pointer to the end of the file<newline46mondego>char c = file.readChar();<newline46mondego>if(c == '|') // Change the pipe character to whatever your sentinel character is<newline46mondego>{<newline46mondego>     file.setLength(target.length()-1); // Strip off the last _byte_, not the last character<newline46mondego>}<newline46mondego>"
"4550splitHere46","3301484splitHere46","target.length()-1"
"4551splitHere46","3301574splitHere46","public static class ContainerFactory {<newline46mondego>  public static <T extends Item>BaseContainer<T> getContainer(Item item) {<newline46mondego>     return (BaseContainer<T>) new GenericTest().new Document();<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>@Test<newline46mondego>public void theTest(){<newline46mondego>    Item item = new WordItem();<newline46mondego>    BaseContainer<Item> container = ContainerFactory.getContainer(item);<newline46mondego>    String str = container.getItemProperty(item);<newline46mondego>}<newline46mondego>"
"4552splitHere46","3301720splitHere46","SecurityManager"
"4553splitHere46","3301720splitHere46","setAccessible"
"4554splitHere46","3301720splitHere46","private"
"4555splitHere46","3301720splitHere46","final"
"4556splitHere46","3301720splitHere46","private static final"
"4557splitHere46","3301720splitHere46","import java.lang.reflect.*;<newline46mondego><newline46mondego>public class EverythingIsTrue {<newline46mondego>   static void setFinalStatic(Field field, Object newValue) throws Exception {<newline46mondego>      field.setAccessible(true);<newline46mondego><newline46mondego>      Field modifiersField = Field.class.getDeclaredField(<doubleQuotes46>modifiers<doubleQuotes46>);<newline46mondego>      modifiersField.setAccessible(true);<newline46mondego>      modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);<newline46mondego><newline46mondego>      field.set(null, newValue);<newline46mondego>   }<newline46mondego>   public static void main(String args[]) throws Exception {      <newline46mondego>      setFinalStatic(Boolean.class.getField(<doubleQuotes46>FALSE<doubleQuotes46>), true);<newline46mondego><newline46mondego>      System.out.format(<doubleQuotes46>Everything is %s<doubleQuotes46>, false); // <doubleQuotes46>Everything is true<doubleQuotes46><newline46mondego>   }<newline46mondego>}<newline46mondego>"
"4558splitHere46","3301720splitHere46","SecurityException"
"4559splitHere46","3301720splitHere46","<doubleQuotes46>Everything is true<doubleQuotes46>"
"4560splitHere46","3301720splitHere46","boolean"
"4561splitHere46","3301720splitHere46","true"
"4562splitHere46","3301720splitHere46","false"
"4563splitHere46","3301720splitHere46","main"
"4564splitHere46","3301720splitHere46","Boolean"
"4565splitHere46","3301720splitHere46","Boolean.TRUE"
"4566splitHere46","3301720splitHere46","Boolean.FALSE"
"4567splitHere46","3301720splitHere46","public static final Boolean.FALSE"
"4568splitHere46","3301720splitHere46","Boolean"
"4569splitHere46","3301720splitHere46","Boolean.TRUE"
"4570splitHere46","3301720splitHere46","false"
"4571splitHere46","3301720splitHere46","Boolean.FALSE"
"4572splitHere46","3301720splitHere46","Boolean"
"4573splitHere46","3301720splitHere46","Boolean.TRUE"
"4574splitHere46","3301720splitHere46","<doubleQuotes46>false<doubleQuotes46>"
"4575splitHere46","3301720splitHere46","<doubleQuotes46>true<doubleQuotes46>"
"4576splitHere46","3301720splitHere46","static final File.separatorChar"
"4577splitHere46","3301720splitHere46","Integer"
"4578splitHere46","3301720splitHere46","String"
"4579splitHere46","3301720splitHere46","SecurityManager"
"4580splitHere46","3301720splitHere46","final"
"4581splitHere46","3301720splitHere46","final"
"4582splitHere46","3301720splitHere46","final"
"4583splitHere46","3301720splitHere46","final"
"4584splitHere46","3301720splitHere46","final"
"4585splitHere46","3301720splitHere46","final"
"4586splitHere46","3301720splitHere46","final"
"4587splitHere46","3301720splitHere46","final"
"4588splitHere46","3301720splitHere46","final"
"4589splitHere46","3301720splitHere46","final"
"4590splitHere46","3301720splitHere46","final"
"4591splitHere46","3301720splitHere46","final"
"4592splitHere46","3301720splitHere46","final"
"4593splitHere46","3301720splitHere46","private static final boolean"
"4594splitHere46","3301720splitHere46","field.getModifiers() & ~Modifier.FINAL<newline46mondego>"
"4595splitHere46","3301720splitHere46","Modifier.FINAL"
"4596splitHere46","3301720splitHere46","field.getModifiers()"
"4597splitHere46","3301720splitHere46","&"
"4598splitHere46","3301720splitHere46","~"
"4599splitHere46","3301813splitHere46","print-dup"
"4600splitHere46","3301813splitHere46","(binding [*print-dup* true] (println [1 2 3]))<newline46mondego>; prints [1 2 3]<newline46mondego><newline46mondego>(defrecord Foo [x])<newline46mondego>; => user.Foo<newline46mondego>(binding [*print-dup* true] (println (Foo. :foo)))<newline46mondego>; prints #=(user.Foo/create {:x :foo})<newline46mondego>"
"4601splitHere46","3301813splitHere46","identical?"
"4602splitHere46","3301813splitHere46","="
"4603splitHere46","3301813splitHere46","clojure.core/print-dup"
"4604splitHere46","3301813splitHere46","java.io.Serializable"
"4605splitHere46","3301813splitHere46","(every? (partial instance? java.io.Serializable)<newline46mondego>        [{1 2} #{<doubleQuotes46>asdf<doubleQuotes46>} :foo 'foo (fn [] :foo)])<newline46mondego>; => true<newline46mondego><newline46mondego>(defrecord Foo [])<newline46mondego>(instance? java.io.Serializable (Foo.))<newline46mondego>; => true<newline46mondego>"
"4606splitHere46","3301813splitHere46","fn"
"4607splitHere46","3301813splitHere46","fn"
"4608splitHere46","3301813splitHere46","Serializable"
"4609splitHere46","3301813splitHere46","print-dup"
"4610splitHere46","3301813splitHere46","print-dup"
"4611splitHere46","3301813splitHere46","print-dup"
"4612splitHere46","3301813splitHere46","deftype"
"4613splitHere46","3301944splitHere46","//a[starts-with(@href, <doubleQuotes46>buy.php/<doubleQuotes46>)]"
"4614splitHere46","3302111splitHere46","@org.hibernate.annotations.FilterDef"
"4615splitHere46","3302111splitHere46","@FilterDefs"
"4616splitHere46","3302111splitHere46","name()"
"4617splitHere46","3302111splitHere46","parameters()"
"4618splitHere46","3302111splitHere46","@ParamDef"
"4619splitHere46","3302111splitHere46","defaultCondition()"
"4620splitHere46","3302111splitHere46","@FilterDef"
"4621splitHere46","3302111splitHere46","@Filter"
"4622splitHere46","3302111splitHere46","@FilterDef"
"4623splitHere46","3302111splitHere46","@Filter"
"4624splitHere46","3302111splitHere46","@Entity<newline46mondego>@FilterDef(name=<doubleQuotes46>minLength<doubleQuotes46>, parameters=@ParamDef( name=<doubleQuotes46>minLength<doubleQuotes46>, type=<doubleQuotes46>integer<doubleQuotes46> ) )<newline46mondego>@Filters( {<newline46mondego>    @Filter(name=<doubleQuotes46>betweenLength<doubleQuotes46>, condition=<doubleQuotes46>:minLength <= length and :maxLength >= length<doubleQuotes46>),<newline46mondego>    @Filter(name=<doubleQuotes46>minLength<doubleQuotes46>, condition=<doubleQuotes46>:minLength <= length<doubleQuotes46>)<newline46mondego>} )<newline46mondego>public class Forest { ... }<newline46mondego>"
"4625splitHere46","3302111splitHere46","@Filter"
"4626splitHere46","3302111splitHere46","@FilterJoinTable"
"4627splitHere46","3302111splitHere46","@OneToMany<newline46mondego>@JoinTable<newline46mondego>//filter on the target entity table<newline46mondego>@Filter(name=<doubleQuotes46>betweenLength<doubleQuotes46>, condition=<doubleQuotes46>:minLength <= length and :maxLength >= length<doubleQuotes46>)<newline46mondego>//filter on the association table<newline46mondego>@FilterJoinTable(name=<doubleQuotes46>security<doubleQuotes46>, condition=<doubleQuotes46>:userlevel >= requredLevel<doubleQuotes46>)<newline46mondego>public Set<Forest> getForests() { ... }<newline46mondego>"
"4628splitHere46","3302346splitHere46","Connection#setAutoCommit()"
"4629splitHere46","3302346splitHere46","false"
"4630splitHere46","3302346splitHere46","Connection#commit()"
"4631splitHere46","3302346splitHere46","SELECT"
"4632splitHere46","3302346splitHere46","INSERT/UPDATE/DELETE"
"4633splitHere46","3302346splitHere46","SQLException"
"4634splitHere46","3302599splitHere46","Element title = child_doc.createElement(<doubleQuotes46>type<doubleQuotes46>);<newline46mondego>Element type = child_doc.createElement(<doubleQuotes46>title);<newline46mondego>"
"4635splitHere46","3302640splitHere46","parent.setParent(newParent)"
"4636splitHere46","3302640splitHere46","updatable=false"
"4637splitHere46","3302640splitHere46","Id"
"4638splitHere46","3302689splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46>?>"
"4639splitHere46","3302689splitHere46","BufferedReader"
"4640splitHere46","3302689splitHere46","reader = new BufferedReader(new InputStreamReader(input, <doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>StringBuilder builder = null;<newline46mondego>for (String line; (line = reader.readLine()) != null;) {<newline46mondego>    if (line.startsWith(<doubleQuotes46><?xml<doubleQuotes46>)) {<newline46mondego>        if (builder != null) {<newline46mondego>            xr.parse(new InputSource(builder.toString()));<newline46mondego>        }<newline46mondego>        builder = new StringBuilder();<newline46mondego>    }<newline46mondego>    builder.append(line);<newline46mondego>}<newline46mondego>"
"4641splitHere46","3303019splitHere46","Pattern p = Pattern.compile(<doubleQuotes46>(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3})<doubleQuotes46>);<newline46mondego>//you could also use <doubleQuotes46>d\\^(.*)Z<doubleQuotes46> as your regex patern<newline46mondego>Matcher m = p.matcher(<doubleQuotes46>your string here<doubleQuotes46>);<newline46mondego><newline46mondego>if (m.find()) {<newline46mondego>    System.out.println(m.group(1)); //print out the timestamp<newline46mondego>}<newline46mondego>"
"4642splitHere46","3303019splitHere46","Pattern p"
"4643splitHere46","3303021splitHere46","dependency:build-classpath"
"4644splitHere46","3303109splitHere46","private static boolean endsWith(final long num, final long part) {<newline46mondego>  return (num % 10) == part;<newline46mondego>}<newline46mondego>"
"4645splitHere46","3303579splitHere46","divide(BigDecimal, RoundingMode)"
"4646splitHere46","3303579splitHere46","BigDecimal"
"4647splitHere46","3303579splitHere46","this"
"4648splitHere46","3303579splitHere46","dividedivide(BigDecimal, scale, RoundingMode)"
"4649splitHere46","3303579splitHere46","BigDecimal"
"4650splitHere46","3303597splitHere46","bind()"
"4651splitHere46","3303597splitHere46","SocketConnected"
"4652splitHere46","3303597splitHere46","SocketConnected"
"4653splitHere46","3303597splitHere46","bind().connect()"
"4654splitHere46","3303597splitHere46","bind()"
"4655splitHere46","3303597splitHere46","connect()"
"4656splitHere46","3303597splitHere46","s"
"4657splitHere46","3303597splitHere46","bind()"
"4658splitHere46","3303597splitHere46","connect()"
"4659splitHere46","3303646splitHere46","javax.xml.namespace.*"
"4660splitHere46","3303646splitHere46","axis2-saaj-api-1.4.1.jar"
"4661splitHere46","3303646splitHere46","woden-impl-dom-1.0M8.jar"
"4662splitHere46","3303971splitHere46","FacesContext"
"4663splitHere46","3303971splitHere46","Servlet"
"4664splitHere46","3303971splitHere46","Filter"
"4665splitHere46","3303971splitHere46","#{bean.requestURL}"
"4666splitHere46","3303971splitHere46","HttpServletRequest"
"4667splitHere46","3303971splitHere46","${pageContext.request.requestURL}<newline46mondego>"
"4668splitHere46","3303971splitHere46","#{request.requestURL}<newline46mondego>"
"4669splitHere46","3303971splitHere46","var url = '#{request.requestURL}';<newline46mondego>"
"4670splitHere46","3303971splitHere46","window.location"
"4671splitHere46","3303971splitHere46","var url = window.location;<newline46mondego>"
"4672splitHere46","3304017splitHere46","ServiceRegistry"
"4673splitHere46","3304017splitHere46","Iterator"
"4674splitHere46","3304017splitHere46","registerServiceProviders()"
"4675splitHere46","3304053splitHere46","init()"
"4676splitHere46","3304053splitHere46","destroy()"
"4677splitHere46","3304528splitHere46","ant launch-remote-control -DseleniumArgs=<doubleQuotes46>-userExtensions path/to/user-extensions.js<doubleQuotes46> ...<newline46mondego>"
"4678splitHere46","3304623splitHere46","orphanRemoval=true"
"4679splitHere46","3304623splitHere46","AbstractPolicyRule"
"4680splitHere46","3304623splitHere46","equals"
"4681splitHere46","3304623splitHere46","hashCode"
"4682splitHere46","3304623splitHere46","Category category = new Category();<newline46mondego>AbstractPolicyRule policyRule1 = new AbstractPolicyRule(<doubleQuotes46>foo<doubleQuotes46>);<newline46mondego><newline46mondego>category.addToActivePolicyRules(policyRule1);<newline46mondego>em.persist(category);<newline46mondego>em.flush();<newline46mondego><newline46mondego>assertNotNull(category.getId());<newline46mondego>assertNotNull(category.getActivePolicyRules());<newline46mondego>assertEquals(1, category.getActivePolicyRules().size());<newline46mondego><newline46mondego>category.removeFromActivePolicyRules(policyRule1);<newline46mondego>category.addToActivePolicyRules(new AbstractPolicyRule(<doubleQuotes46>bar<doubleQuotes46>));<newline46mondego>// category = em.merge(category); // works with or without<newline46mondego>em.flush();<newline46mondego>assertEquals(1, category.getActivePolicyRules().size());<newline46mondego>"
"4683splitHere46","3304623splitHere46","orphanRemoval"
"4684splitHere46","3304623splitHere46","saveOrUpdate"
"4685splitHere46","3304623splitHere46","EntityManager"
"4686splitHere46","3304797splitHere46","ArrayList<Integer> list = new ArrayList<Integer>(100);<newline46mondego>for(int i = 0; i < 100; i++)<newline46mondego>{<newline46mondego>  list.add(i);<newline46mondego>}<newline46mondego>Collections.shuffle(list);<newline46mondego>"
"4687splitHere46","3304797splitHere46","list"
"4688splitHere46","3304961splitHere46","Person person = session.load(...);<newline46mondego>BeanMapper mapper = ...;<newline46mondego>Person cleanPerson = mapper.map(person, Person.class);<newline46mondego>"
"4689splitHere46","3304990splitHere46","Content-Disposition: inline; filename: file.jpg<newline46mondego>"
"4690splitHere46","3304990splitHere46","HttpServletResponse"
"4691splitHere46","3304990splitHere46","response.setHeader(<doubleQuotes46>Content-Disposition<doubleQuotes46>, <doubleQuotes46>inline; filename: file.jpg<doubleQuotes46>);<newline46mondego>"
"4692splitHere46","3305051splitHere46","compareTo"
"4693splitHere46","3305051splitHere46","compareTo"
"4694splitHere46","3305051splitHere46","public int compareTo(Object arg0)<newline46mondego>{<newline46mondego>  Frequency other = (Frequency)arg0;<newline46mondego><newline46mondego>  return n < other.n ? -1 : (n == other.n ? 0 : 1);<newline46mondego>}<newline46mondego>"
"4695splitHere46","3305051splitHere46","Comparable<T>"
"4696splitHere46","3305051splitHere46","arg0"
"4697splitHere46","3305051splitHere46","Frequency"
"4698splitHere46","3305051splitHere46","class Frequency implements Comparable<Frequency> {   <newline46mondego>  public int compareTo(Frequency f2) {<newline46mondego>    // directly compare<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4699splitHere46","3305198splitHere46","Boolean"
"4700splitHere46","3305198splitHere46","JCheckBox"
"4701splitHere46","3305198splitHere46","case ACTIVATED_INDEX:<newline46mondego>    return Boolean.valueOf(user.getActivated());<newline46mondego>"
"4702splitHere46","3305198splitHere46","case ACTIVATED_INDEX:<newline46mondego>    return (user.getActivated())?<doubleQuotes46>1<doubleQuotes46>:<doubleQuotes46>0<doubleQuotes46>;<newline46mondego>"
"4703splitHere46","3305198splitHere46","DefaultTableModel"
"4704splitHere46","3305198splitHere46","getColumnClass()"
"4705splitHere46","3305198splitHere46","AbstractTableModel"
"4706splitHere46","3305198splitHere46","Object.class"
"4707splitHere46","3305198splitHere46","TableModel"
"4708splitHere46","3305198splitHere46","getColumnClass()"
"4709splitHere46","3305198splitHere46","DefaultTableModel dtm = new DefaultTableModel() {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Class<?> getColumnClass(int col) {<newline46mondego>        return getValueAt(0, col).getClass();<newline46mondego>    }<newline46mondego>};<newline46mondego>// add some data<newline46mondego>JTable table = new JTable(dtm);<newline46mondego>"
"4710splitHere46","3305253splitHere46","enum"
"4711splitHere46","3305253splitHere46","public class Test {<newline46mondego>  private static enum Option {<newline46mondego>    FirstOption,<newline46mondego>    SecondOption,<newline46mondego>    ThirdOption<newline46mondego>  }<newline46mondego><newline46mondego>  Option option;<newline46mondego>}<newline46mondego>"
"4712splitHere46","3305324splitHere46","<xsd:simpleType name=<doubleQuotes46>IntOrBlank<doubleQuotes46>><newline46mondego>        <xsd:union memberTypes=<doubleQuotes46>xsd:integer<doubleQuotes46>><newline46mondego>            <xsd:simpleType><newline46mondego>                <xsd:restriction base=<doubleQuotes46>xsd:string<doubleQuotes46>><newline46mondego>                    <xsd:enumeration value=<doubleQuotes46><doubleQuotes46>/><newline46mondego>                </xsd:restriction><newline46mondego>            </xsd:simpleType><newline46mondego>        </xsd:union><newline46mondego>    </xsd:simpleType><newline46mondego>"
"4713splitHere46","3305400splitHere46","(int)(Math.log(65536)/Math.log(2))"
"4714splitHere46","3305400splitHere46","Math.ceil(Math.log(1<<29) / Math.log(2))"
"4715splitHere46","3305400splitHere46","(int)(Math.log(x)/Math.log(2))"
"4716splitHere46","3305400splitHere46","(int)(Math.log(x)/Math.log(2)+1e-10)"
"4717splitHere46","3305400splitHere46","int log(int x, int base)"
"4718splitHere46","3305400splitHere46","static int pow(int base, int power) {<newline46mondego>    int result = 1;<newline46mondego>    for (int i = 0; i < power; i++)<newline46mondego>        result *= base;<newline46mondego>    return result;<newline46mondego>}<newline46mondego><newline46mondego>private static void test(int base, int pow) {<newline46mondego>    int x = pow(base, pow);<newline46mondego>    if (pow != log(x, base))<newline46mondego>        System.out.println(String.format(<doubleQuotes46>error at %d^%d<doubleQuotes46>, base, pow));<newline46mondego>    if(pow!=0 && (pow-1) != log(x-1, base))<newline46mondego>        System.out.println(String.format(<doubleQuotes46>error at %d^%d-1<doubleQuotes46>, base, pow));<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    for (int base = 2; base < 500; base++) {<newline46mondego>        int maxPow = (int) (Math.log(Integer.MAX_VALUE) / Math.log(base));<newline46mondego>        for (int pow = 0; pow <= maxPow; pow++) {<newline46mondego>            test(base, pow);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4719splitHere46","3305400splitHere46","static int log(int x, int base)<newline46mondego>{<newline46mondego>    return (int) (Math.log(x) / Math.log(base));<newline46mondego>}<newline46mondego>"
"4720splitHere46","3305400splitHere46","error at 3^5<newline46mondego>error at 3^10<newline46mondego>error at 3^13<newline46mondego>error at 3^15<newline46mondego>error at 3^17<newline46mondego>error at 9^5<newline46mondego>error at 10^3<newline46mondego>error at 10^6<newline46mondego>error at 10^9<newline46mondego>error at 11^7<newline46mondego>error at 12^7<newline46mondego>...<newline46mondego>"
"4721splitHere46","3305425splitHere46","public static void closeStream(Closeable closeable) {<newline46mondego>    if(null != closeable) {<newline46mondego>      try {<newline46mondego>        closeable.close();<newline46mondego>      } catch(IOException ex) {<newline46mondego>        LOG.warning(<doubleQuotes46>Failed to properly close closeable.<doubleQuotes46>, ex);<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"4722splitHere46","3305425splitHere46","FileOutputStream out = null;<newline46mondego>try<newline46mondego>{<newline46mondego>    out = new FileOutputStream(<doubleQuotes46>myfile.txt<doubleQuotes46>);<newline46mondego>    // More and more code goes here...<newline46mondego>}<newline46mondego>catch (Exception e)<newline46mondego>{<newline46mondego>}<newline46mondego>finally <newline46mondego>{<newline46mondego>    closeStream(out);<newline46mondego>}<newline46mondego>"
"4723splitHere46","3305492splitHere46","ResponseGroup"
"4724splitHere46","3305492splitHere46","ItemAttributes"
"4725splitHere46","3305539splitHere46","class Test {<newline46mondego>  public static void main(String[] args) {<newline46mondego>    String str = <doubleQuotes46>word <a href=\<doubleQuotes46>word\<doubleQuotes46>>word</word>word word<doubleQuotes46>;<newline46mondego>    str = str.replaceAll(<doubleQuotes46>word(?!([^<]+)?>)<doubleQuotes46>, <doubleQuotes46>repl<doubleQuotes46>);<newline46mondego>    System.out.println(str);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4726splitHere46","3305557splitHere46","org.sample.web.model<newline46mondego>org.sample.web.utils<newline46mondego>org.sample.web.validators<newline46mondego>org.sample.web.validators.utils<newline46mondego>"
"4727splitHere46","3305741splitHere46","getServerName()"
"4728splitHere46","3305741splitHere46","**"
"4729splitHere46","3305741splitHere46","public interface ILocalDetails {<newline46mondego>    InetAddress getLocalHost() throws UnknownHostException;<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"4730splitHere46","3305741splitHere46","public class LocalDetails implements ILocalDetails {<newline46mondego>    public InetAddress getLocalHost() throws UnknownHostException {<newline46mondego>        return InetAddress.getLocalHost();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4731splitHere46","3305741splitHere46","public class SomeClass {<newline46mondego>    private ILocalDetails local = new LocalDetails();  // or something ...<newline46mondego>    ...<newline46mondego>    public String getServerName() {<newline46mondego>        try {<newline46mondego>            InetAddress addr = local.getLocalHost();<newline46mondego>            return addr.getHostName();<newline46mondego>        }<newline46mondego>        catch (Exception e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            return <doubleQuotes46><doubleQuotes46>;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4732splitHere46","3305741splitHere46","ILocalDetails"
"4733splitHere46","3305741splitHere46","getLocalHost()"
"4734splitHere46","3305741splitHere46","SomeClass.getServerName()"
"4735splitHere46","3305741splitHere46","SomeClass"
"4736splitHere46","3305741splitHere46","setter"
"4737splitHere46","3305741splitHere46","local"
"4738splitHere46","3305741splitHere46","LocalDetails.getLocalHost()"
"4739splitHere46","3305741splitHere46","static"
"4740splitHere46","3305741splitHere46","**"
"4741splitHere46","3306167splitHere46","public class PrintUnicode {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        System.console().printf(<doubleQuotes46>Olá Mundo!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4742splitHere46","3306209splitHere46","String#split(String reg)"
"4743splitHere46","3306340splitHere46","android:theme=<doubleQuotes46>@android:style/Theme.Light<doubleQuotes46> <newline46mondego>"
"4744splitHere46","3306443splitHere46","UsersBean"
"4745splitHere46","3306752splitHere46","synchronized"
"4746splitHere46","3306752splitHere46","volatile"
"4747splitHere46","3306752splitHere46","java.util.concurrent"
"4748splitHere46","3306752splitHere46","java.lang.Thread"
"4749splitHere46","3306752splitHere46","java.lang.ThreadLocal"
"4750splitHere46","3306752splitHere46","java.lang.Runnable"
"4751splitHere46","3306752splitHere46","Callable"
"4752splitHere46","3306752splitHere46","Future"
"4753splitHere46","3306752splitHere46","volatile"
"4754splitHere46","3306752splitHere46","synchronized"
"4755splitHere46","3306752splitHere46","Runnable"
"4756splitHere46","3306808splitHere46","ant -v"
"4757splitHere46","3306808splitHere46","ant"
"4758splitHere46","3307076splitHere46","<dependency><newline46mondego>  <groupId>com.sun.xml.bind</groupId><newline46mondego>  <artifactId>jaxb-impl</artifactId><newline46mondego>  <version>2.1.9</version><newline46mondego>  <scope>system</scope><newline46mondego>  <!-- Windows will not find rt.jar if it is in a path with spaces --><newline46mondego>  <systemPath>C:/temp/rt.jar</systemPath><newline46mondego></dependency><newline46mondego>"
"4759splitHere46","3307076splitHere46","<path id=<doubleQuotes46>jre.classpath<doubleQuotes46>><newline46mondego>  <pathelement location=<doubleQuotes46>${java.home}\lib<doubleQuotes46> /><newline46mondego></path><newline46mondego>// Add paths for build.classpath and define {src},{target} as usual<newline46mondego><target name=<doubleQuotes46>compile<doubleQuotes46> depends=<doubleQuotes46>copy-resources<doubleQuotes46>><newline46mondego>  <mkdir dir=<doubleQuotes46>${target}/classes<doubleQuotes46>/><newline46mondego>  <javac bootclasspathref=<doubleQuotes46>jre.classpath<doubleQuotes46> includejavaruntime=<doubleQuotes46>yes<doubleQuotes46> debug=<doubleQuotes46>on<doubleQuotes46> srcdir=<doubleQuotes46>${src}<doubleQuotes46> destdir=<doubleQuotes46>${target}/classes<doubleQuotes46> includes=<doubleQuotes46>**/*<doubleQuotes46>><newline46mondego>    <classpath refid=<doubleQuotes46>build.classpath<doubleQuotes46>/><newline46mondego>  </javac><newline46mondego></target>    <newline46mondego>"
"4760splitHere46","3307076splitHere46","<!-- JAXB2 marshalling (domain objects annotated with JAXB2 meta data) --><newline46mondego><bean id=<doubleQuotes46>jaxb2Marshaller<doubleQuotes46> class=<doubleQuotes46>org.springframework.oxm.jaxb.Jaxb2Marshaller<doubleQuotes46>><newline46mondego><property name=<doubleQuotes46>contextPaths<doubleQuotes46>><newline46mondego>  <list><newline46mondego>    <value>org.example.domain</value><newline46mondego>  </list><newline46mondego></property><newline46mondego><property name=<doubleQuotes46>marshallerProperties<doubleQuotes46>><newline46mondego>  <map><newline46mondego>    <!-- Good for JDK1.6.0_6+, lose 'internal' for earlier releases - see why it's evil? --><newline46mondego>    <entry key=<doubleQuotes46>com.sun.xml.internal.bind.namespacePrefixMapper<doubleQuotes46> value-ref=<doubleQuotes46>myCapabilitiesNamespacePrefixMapper<doubleQuotes46>/><newline46mondego>    <entry key=<doubleQuotes46>jaxb.formatted.output<doubleQuotes46>><value type=<doubleQuotes46>boolean<doubleQuotes46>>true</value></entry><newline46mondego>  </map><newline46mondego></property><newline46mondego></bean><newline46mondego><newline46mondego><!-- Namespace mapping prefix (ns1->abc, ns2->xlink etc) --><newline46mondego><bean id=<doubleQuotes46>myNamespacePrefixMapper<doubleQuotes46> class=<doubleQuotes46>org.example.MyNamespacePrefixMapper<doubleQuotes46>/><newline46mondego>"
"4761splitHere46","3307076splitHere46","public class MyNamespacePrefixMapper extends NamespacePrefixMapper {<newline46mondego><newline46mondego>  public String getPreferredPrefix(String namespaceUri,<newline46mondego>                               String suggestion,<newline46mondego>                               boolean requirePrefix) {<newline46mondego>    if (requirePrefix) {<newline46mondego>      if (<doubleQuotes46>http://www.example.org/abc<doubleQuotes46>.equals(namespaceUri)) {<newline46mondego>        return <doubleQuotes46>abc<doubleQuotes46>;<newline46mondego>      }<newline46mondego>      if (<doubleQuotes46>http://www.w3.org/1999/xlink<doubleQuotes46>.equals(namespaceUri)) {<newline46mondego>        return <doubleQuotes46>xlink<doubleQuotes46>;<newline46mondego>      }<newline46mondego>      return suggestion;<newline46mondego>    } else {<newline46mondego>      return <doubleQuotes46><doubleQuotes46>;<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4762splitHere46","3307076splitHere46","// Add a new property that implies external access<newline46mondego>marshaller.setProperty(<doubleQuotes46>com.sun.xml.bind.namespacePrefixMapper<doubleQuotes46>, new MyNamespacePrefixMapper());<newline46mondego>"
"4763splitHere46","3307076splitHere46","// Change the import to this<newline46mondego>import com.sun.xml.bind.marshaller.NamespacePrefixMapper;<newline46mondego>"
"4764splitHere46","3307076splitHere46","jaxb-impl.jar<newline46mondego>"
"4765splitHere46","3307169splitHere46","Intent mIntent = new Intent(this, Example.class);<newline46mondego>Bundle extras = mIntent.getExtras();<newline46mondego>extras.putString(key, value);  <newline46mondego>"
"4766splitHere46","3307169splitHere46","Intent mIntent = new Intent(this, Example.class);<newline46mondego>Bundle mBundle = new Bundle();<newline46mondego>mBundle.extras.putString(key, value);<newline46mondego>mIntent.putExtras(mBundle);<newline46mondego>"
"4767splitHere46","3307169splitHere46","Intent mIntent = new Intent(this, Example.class);<newline46mondego>mIntent.putExtra(key, value);<newline46mondego>"
"4768splitHere46","3307169splitHere46","Intent myIntent = getIntent(); // this getter is just for example purpose, can differ<newline46mondego>if (myIntent !=null && myIntent.getExtras()!=null)<newline46mondego>     String value = myIntent.getExtras().getString(key);<newline46mondego>}<newline46mondego>"
"4769splitHere46","3307225splitHere46","public void convert(File output, File...input) {<newline46mondego><newline46mondego>   List<Record> records = new ArrayList<Record>();<newline46mondego>   for (File file:input) {<newline46mondego>     if (input.isThreeColumnFormat()) {<newline46mondego>        records.addAll(ThreeColumnFormatParser.parse(file));<newline46mondego>     } else {<newline46mondego>        records.addAll(FourColumnFormatParser.parse(file));<newline46mondego>     }<newline46mondego>   }<newline46mondego>   CsvWriter.write(output, records);<newline46mondego> }<newline46mondego>"
"4770splitHere46","3307225splitHere46","public class Record {<newline46mondego>  Object id; // some sort of unique identifier<newline46mondego>  Map<String, String> values; // all key/values of a single row<newline46mondego>  public Record(Object id) {this.id=id;}<newline46mondego>  public void put(String key, String value){<newline46mondego>    values.put(key, value);<newline46mondego>  }<newline46mondego>  public void get(String key) {<newline46mondego>    values.get(key);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4771splitHere46","3307225splitHere46","//...<newline46mondego>List<Record> records = new ArrayList<Record>()<newline46mondego><newline46mondego>for (File file:getAllFiles()) {<newline46mondego>  List<String> keys = getColumnsHeaders(file);<newline46mondego>  KeyStore.addAll(keys);  // the store is a Set<newline46mondego>  for (String line:file.getLines()) {<newline46mondego>    String[] values = line.split(DELIMITER);<newline46mondego>    Record record = new Record(file.getName()+i);  // as an example for id<newline46mondego>    for (int i = 0; i < values.length; i++) {<newline46mondego>      record.put(keys.get(i), values[i]);<newline46mondego>    }<newline46mondego>    records.add(record);<newline46mondego>  }<newline46mondego>}<newline46mondego>// ...<newline46mondego>"
"4772splitHere46","3307225splitHere46","null"
"4773splitHere46","3307387splitHere46","navigator.userAgent"
"4774splitHere46","3307387splitHere46","document.defaultView"
"4775splitHere46","3307387splitHere46","DefaultSelenium sel = ...<newline46mondego>String res = sel.getEval(<doubleQuotes46>document.defaultView ? false : true<doubleQuotes46>);<newline46mondego>boolean isIE = <doubleQuotes46>true<doubleQuotes46>.equals(res);<newline46mondego>"
"4776splitHere46","3307502splitHere46","#"
"4777splitHere46","3307502splitHere46","#"
"4778splitHere46","3307564splitHere46","HashSet"
"4779splitHere46","3307564splitHere46","contains()"
"4780splitHere46","3307564splitHere46","hashCode()"
"4781splitHere46","3307564splitHere46","equals()"
"4782splitHere46","3307564splitHere46","HashSet"
"4783splitHere46","3307564splitHere46","hashCode"
"4784splitHere46","3307564splitHere46","HashSet"
"4785splitHere46","3307564splitHere46","equals()"
"4786splitHere46","3307564splitHere46","equals"
"4787splitHere46","3307564splitHere46","hashCode"
"4788splitHere46","3307564splitHere46","java.lang.String"
"4789splitHere46","3307777splitHere46","public static String newLine = System.getProperty(<doubleQuotes46>line.separator<doubleQuotes46>);<newline46mondego>"
"4790splitHere46","3307777splitHere46","newLine"
"4791splitHere46","3307777splitHere46","\r"
"4792splitHere46","3307777splitHere46","newLine"
"4793splitHere46","3307777splitHere46","\r\n"
"4794splitHere46","3307777splitHere46","\n"
"4795splitHere46","3307777splitHere46","\n"
"4796splitHere46","3307777splitHere46","\r\n"
"4797splitHere46","3307777splitHere46","File f = new File(strFileGenLoc);<newline46mondego>  BufferedWriter bw = new BufferedWriter(new FileWriter(f, false));<newline46mondego>  rs = stmt.executeQuery(<doubleQuotes46>select * from jpdata<doubleQuotes46>);<newline46mondego>  while ( rs.next() ) {<newline46mondego>    bw.write(rs.getString(1)==null? <doubleQuotes46><doubleQuotes46>:rs.getString(1));<newline46mondego>    bw.write(<doubleQuotes46>\\r\\n<doubleQuotes46>);<newline46mondego>  }<newline46mondego>"
"4798splitHere46","3308465splitHere46","DatabaseMetaData md = connection.getMetaData();<newline46mondego>ResultSet rs = dbmd.getColumns(null, null, tableName, <doubleQuotes46>%<doubleQuotes46>); <newline46mondego>while(rs.next()) { <newline46mondego>    String column = rs.getString(<doubleQuotes46>COLUMN_NAME<doubleQuotes46>); <newline46mondego>    System.out.println(column); <newline46mondego>} <newline46mondego>"
"4799splitHere46","3308802splitHere46","put"
"4800splitHere46","3308802splitHere46","map.put(key, null)"
"4801splitHere46","3308802splitHere46","null"
"4802splitHere46","3308802splitHere46","map.put(key)"
"4803splitHere46","3308802splitHere46","myMap.get(myEmptyKey)"
"4804splitHere46","3308802splitHere46","for (Object obj : list) {<newline46mondego>    if (matchesCriteriaX(obj)) {<newline46mondego>         map.put(<doubleQuotes46>X<doubleQuotes46>, obj);<newline46mondego>    else if (matchesCriteriaY(obj)) {<newline46mondego>         map.put(<doubleQuotes46>Y<doubleQuotes46>, obj);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4805splitHere46","3308802splitHere46","map.get(<doubleQuotes46>X<doubleQuotes46>)"
"4806splitHere46","3308802splitHere46","null"
"4807splitHere46","3308802splitHere46","Map<String, List<Object>> map = new HashMap<String, List<Object>>();<newline46mondego>map.add(<doubleQuotes46>X<doubleQuotes46>, new ArrayList<Object>());<newline46mondego>map.add(<doubleQuotes46>Y<doubleQuotes46>, new ArrayList<Object>());<newline46mondego>for (Object obj : list) {<newline46mondego>    if (matchesCriteriaX(obj)) {<newline46mondego>         List<Object> list = map.get(<doubleQuotes46>X<doubleQuotes46>);<newline46mondego>         list.add(obj);<newline46mondego>    else if (matchesCriteriaY(obj)) {<newline46mondego>         List<Object> list = map.get(<doubleQuotes46>Y<doubleQuotes46>);<newline46mondego>         list.add(obj);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4808splitHere46","3308802splitHere46","map.get(<doubleQuotes46>x<doubleQuotes46>).isEmpty()"
"4809splitHere46","3308886splitHere46","mvn dependency:analyze <newline46mondego>mvn dependency:tree<newline46mondego>"
"4810splitHere46","3308978splitHere46","bw.write(a)"
"4811splitHere46","3308978splitHere46","bw.close()"
"4812splitHere46","3308978splitHere46","finally"
"4813splitHere46","3308978splitHere46","BufferedWriter bw = null;<newline46mondego>try {<newline46mondego>    bw = new BufferedWriter(...);<newline46mondego>    bw.write(...);<newline46mondego>} finally {<newline46mondego>    if (bw != null) try { bw.close(); } catch (IOException logOrIgnore) {}<newline46mondego>} <newline46mondego>"
"4814splitHere46","3308978splitHere46","package mypackage;<newline46mondego><newline46mondego>import java.io.BufferedWriter;<newline46mondego>import java.io.File;<newline46mondego>import java.io.FileOutputStream;<newline46mondego>import java.io.IOException;<newline46mondego>import java.io.OutputStreamWriter;<newline46mondego><newline46mondego>public class Test {<newline46mondego><newline46mondego>    public static void main(String args[]) throws Exception {<newline46mondego>        File file = new File(<doubleQuotes46>/test.txt<doubleQuotes46>);<newline46mondego>        for (int i = 0; i < 1000; i++) {<newline46mondego>            write(<doubleQuotes46>line<doubleQuotes46> + i, file); // Write <doubleQuotes46>many<doubleQuotes46> lines.<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>File exist before delete? <doubleQuotes46> + file.exists());<newline46mondego>        System.out.println(<doubleQuotes46>File deleted? <doubleQuotes46> + file.delete());<newline46mondego>        System.out.println(<doubleQuotes46>File exist after delete? <doubleQuotes46> + file.exists());<newline46mondego>    }<newline46mondego><newline46mondego>    public static void write(String line, File file) throws IOException {<newline46mondego>        BufferedWriter writer = null;<newline46mondego>        try {<newline46mondego>            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, true)));<newline46mondego>            writer.write(line);<newline46mondego>        } finally {<newline46mondego>            if (writer != null) try {<newline46mondego>                writer.close();<newline46mondego>            } catch (IOException e) {<newline46mondego>                System.err.println(<doubleQuotes46>Close failed!<doubleQuotes46>);<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4815splitHere46","3309088splitHere46","InputStream stream = this.getClass().getClassLoader().<newline46mondego>                                     getResourceAsStream(<doubleQuotes46>/images/logo.png<doubleQuotes46>);<newline46mondego>"
"4816splitHere46","3309372splitHere46","import com.beust.jcommander.Parameter;<newline46mondego><newline46mondego>public class JCommanderTest {<newline46mondego>  @Parameter<newline46mondego>  public List<String> parameters = Lists.newArrayList();<newline46mondego><newline46mondego>  @Parameter(names = { <doubleQuotes46>-log<doubleQuotes46>, <doubleQuotes46>-verbose<doubleQuotes46> }, description = <doubleQuotes46>Level of verbosity<doubleQuotes46>)<newline46mondego>  public Integer verbose = 1;<newline46mondego><newline46mondego>  @Parameter(names = <doubleQuotes46>-groups<doubleQuotes46>, description = <doubleQuotes46>Comma-separated list of group names to be run<doubleQuotes46>)<newline46mondego>  public String groups;<newline46mondego><newline46mondego>  @Parameter(names = <doubleQuotes46>-debug<doubleQuotes46>, description = <doubleQuotes46>Debug mode<doubleQuotes46>)<newline46mondego>  public boolean debug = false;<newline46mondego>}<newline46mondego>"
"4817splitHere46","3309372splitHere46","JCommanderTest jct = new JCommanderTest();<newline46mondego>String[] argv = { <doubleQuotes46>-log<doubleQuotes46>, <doubleQuotes46>2<doubleQuotes46>, <doubleQuotes46>-groups<doubleQuotes46>, <doubleQuotes46>unit<doubleQuotes46>, <doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46> };<newline46mondego>new JCommander(jct, argv);<newline46mondego><newline46mondego>Assert.assertEquals(jct.verbose.intValue(), 2);<newline46mondego>"
"4818splitHere46","3309387splitHere46","page.getByXPath(<doubleQuotes46>//a[starts-with(@href, \<doubleQuotes46>showdetails.aspx\<doubleQuotes46>)]/@href<doubleQuotes46>);<newline46mondego>"
"4819splitHere46","3309387splitHere46","page.getByXPath(<doubleQuotes46>//a[starts-with(@href, \<doubleQuotes46>showdetails.aspx\<doubleQuotes46>)]/text()<doubleQuotes46>);<newline46mondego>"
"4820splitHere46","3309621splitHere46","main.xml"
"4821splitHere46","3309712splitHere46","docFreq(Term)"
"4822splitHere46","3309712splitHere46","int freq = searcher.docFreq(new Term(FIELD, value));<newline46mondego>TopDocs hits = indexSearcher.search(query, freq);<newline46mondego>for (int i=0 ; i<hits.totalHits ; i++) {<newline46mondego>   // Process hit<newline46mondego>}<newline46mondego>"
"4823splitHere46","3309712splitHere46","TermQuery"
"4824splitHere46","3309973splitHere46","loadURL()"
"4825splitHere46","3309973splitHere46","Browser_htmlBrowser().loadURL(<doubleQuotes46>http://stackoverflow.com<doubleQuotes46>);"
"4826splitHere46","3310080splitHere46","java.io.File"
"4827splitHere46","3310080splitHere46","/path/to/eclipse/workspace/projectname"
"4828splitHere46","3310080splitHere46","/path/to/webserver/binaries"
"4829splitHere46","3310080splitHere46","java.io.File"
"4830splitHere46","3310080splitHere46","Class#getResource()"
"4831splitHere46","3310080splitHere46","Class#getResourceAsStream()"
"4832splitHere46","3310080splitHere46","public MyClass() {<newline46mondego>    URL url = getClass().getResource(<doubleQuotes46>filename.txt<doubleQuotes46>);<newline46mondego>    File file = new File(url.getPath());<newline46mondego>    InputStream input = new FileInputStream(file);<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"4833splitHere46","3310080splitHere46","public MyClass() {<newline46mondego>    InputStream input = getClass().getResourceAsStream(<doubleQuotes46>filename.txt<doubleQuotes46>);<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"4834splitHere46","3310175splitHere46","HtmlPage newPage = myElement.click();<newline46mondego>"
"4835splitHere46","3310224splitHere46","corePoolSize"
"4836splitHere46","3310224splitHere46","maximumPoolSize"
"4837splitHere46","3310224splitHere46","Runtime.getRuntime().availableProcessors()"
"4838splitHere46","3310224splitHere46","Executors.newFixedThreadPool()"
"4839splitHere46","3310224splitHere46","Queue"
"4840splitHere46","3310224splitHere46","Deque"
"4841splitHere46","3310224splitHere46","LinkedBlockingDeque"
"4842splitHere46","3310224splitHere46","Deque"
"4843splitHere46","3310224splitHere46","submit()"
"4844splitHere46","3310224splitHere46","invokeAll()"
"4845splitHere46","3310224splitHere46","execute()"
"4846splitHere46","3310314splitHere46","nutch com.xyz.YourCrawlerMain<newline46mondego>"
"4847splitHere46","3310725splitHere46","public class ParentObject<T extends ChildObject> implements Iterable<T> {<newline46mondego>    protected List<T> theChildObjects;<newline46mondego><newline46mondego>    public T getChildObjectByIndex(int idx) {<newline46mondego>        return theChildObjects.get(idx);<newline46mondego>    }<newline46mondego><newline46mondego>    public Iterator<T> iterator() {<newline46mondego>        return java.util.Collections.unmodifiableCollection(this.theChildObjects).iterator();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4848splitHere46","3310878splitHere46","ScheduledExecutorService#scheduleAtFixedRate()"
"4849splitHere46","3310878splitHere46","Thread#sleep()"
"4850splitHere46","3310878splitHere46","ServletContextListener"
"4851splitHere46","3310878splitHere46","@WebListener<newline46mondego>public class Config implements ServletContextListener {<newline46mondego><newline46mondego>    private ScheduledExecutorService scheduler;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void contextInitialized(ServletContextEvent event) {<newline46mondego>        scheduler = Executors.newSingleThreadScheduledExecutor();<newline46mondego>        scheduler.scheduleAtFixedRate(new Task(), 0, 1, TimeUnit.MINUTES); // Schedule to run every minute.<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void contextDestroyed(ServletContextEvent event) {<newline46mondego>        scheduler.shutdown(); // Important! This stops the thread.<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4852splitHere46","3310878splitHere46","Task"
"4853splitHere46","3310878splitHere46","public class Task implements Runnable {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void run() {<newline46mondego>        log(something);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4854splitHere46","3310878splitHere46","@WebListener"
"4855splitHere46","3310878splitHere46","web.xml"
"4856splitHere46","3310878splitHere46","<listener><newline46mondego>    <listener-class>com.example.Config</listener-class><newline46mondego></listener><newline46mondego>"
"4857splitHere46","3310999splitHere46","java.exe"
"4858splitHere46","3311001splitHere46","String"
"4859splitHere46","3311179splitHere46","contains(Object)"
"4860splitHere46","3311179splitHere46","equals"
"4861splitHere46","3311191splitHere46","NewOrphanedWindow.monitor = StaticClass.ValueToMonitorFromNowOn;<newline46mondego>"
"4862splitHere46","3311463splitHere46","@Name(<doubleQuotes46>myService<doubleQuotes46>)<newline46mondego>public class DefaultMyService implements MyService <newline46mondego>"
"4863splitHere46","3311463splitHere46","<component name=<doubleQuotes46>myService<doubleQuotes46> class=<doubleQuotes46>org.gescobar.MockMyService<doubleQuotes46> precedence=<doubleQuotes46>30<doubleQuotes46> /><newline46mondego>"
"4864splitHere46","3311610splitHere46","?"
"4865splitHere46","3311610splitHere46","?"
"4866splitHere46","3311610splitHere46","?"
"4867splitHere46","3311610splitHere46","#{5}?"
"4868splitHere46","3311610splitHere46","#"
"4869splitHere46","3311610splitHere46","#"
"4870splitHere46","3311610splitHere46","(…)?"
"4871splitHere46","3311610splitHere46","(#{5})?<\w+><newline46mondego>"
"4872splitHere46","3311610splitHere46","?"
"4873splitHere46","3311610splitHere46","*"
"4874splitHere46","3311610splitHere46","+"
"4875splitHere46","3311610splitHere46","?"
"4876splitHere46","3311610splitHere46","{…}"
"4877splitHere46","3311610splitHere46","(?:…)"
"4878splitHere46","3311610splitHere46","(?:#{5})?<\w+><newline46mondego>"
"4879splitHere46","3311610splitHere46","\1"
"4880splitHere46","3311610splitHere46","java.util.regex.Pattern"
"4881splitHere46","3311610splitHere46","X{n}?"
"4882splitHere46","3311610splitHere46","regex{n,}?"
"4883splitHere46","3311610splitHere46","regex{n}"
"4884splitHere46","3311610splitHere46",".*?"
"4885splitHere46","3311610splitHere46",".*"
"4886splitHere46","3311610splitHere46","??"
"4887splitHere46","3311610splitHere46","??"
"4888splitHere46","3311610splitHere46","System.out.println(<doubleQuotes46>NOMZ<doubleQuotes46>.matches(<doubleQuotes46>NOMZ??<doubleQuotes46>));<newline46mondego>    // <doubleQuotes46>true<doubleQuotes46><newline46mondego><newline46mondego>    System.out.println(<newline46mondego>          <doubleQuotes46>NOM NOMZ NOMZZ<doubleQuotes46>.replaceAll(<doubleQuotes46>NOMZ??<doubleQuotes46>, <doubleQuotes46>YUM<doubleQuotes46>)<newline46mondego>    ); // <doubleQuotes46>YUM YUMZ YUMZZ<doubleQuotes46><newline46mondego>"
"4889splitHere46","3311610splitHere46","Z??"
"4890splitHere46","3311610splitHere46","Z"
"4891splitHere46","3311610splitHere46","<doubleQuotes46>NOMZ<doubleQuotes46>"
"4892splitHere46","3311610splitHere46","matches"
"4893splitHere46","3311610splitHere46","NOMZ??"
"4894splitHere46","3311610splitHere46","replaceAll"
"4895splitHere46","3311610splitHere46","NOMZ??"
"4896splitHere46","3311610splitHere46","<doubleQuotes46>NOM<doubleQuotes46>"
"4897splitHere46","3311610splitHere46","Z"
"4898splitHere46","3311610splitHere46","NOMZ?"
"4899splitHere46","3311610splitHere46","Z"
"4900splitHere46","3311610splitHere46","System.out.println(<newline46mondego>          <doubleQuotes46>NOM NOMZ NOMZZ<doubleQuotes46>.replaceAll(<doubleQuotes46>NOMZ?<doubleQuotes46>, <doubleQuotes46>YUM<doubleQuotes46>)<newline46mondego>    ); // <doubleQuotes46>YUM YUM YUMZ<doubleQuotes46><newline46mondego>"
"4901splitHere46","3311610splitHere46","matches"
"4902splitHere46","3311610splitHere46","String"
"4903splitHere46","3311704splitHere46",".addScalar"
"4904splitHere46","3311704splitHere46",".addEntity"
"4905splitHere46","3311928splitHere46","text()"
"4906splitHere46","3311928splitHere46","//*/a/@href/../text()<newline46mondego>"
"4907splitHere46","3311941splitHere46","counter"
"4908splitHere46","3311983splitHere46","JAVA_HOME"
"4909splitHere46","3311983splitHere46","PATH"
"4910splitHere46","3311983splitHere46","JAVA_HOME"
"4911splitHere46","3311983splitHere46","export JAVA_HOME=/usr/lib/jvm/java-6-sun<newline46mondego>export PATH=$PATH:$JAVA_HOME/bin<newline46mondego>"
"4912splitHere46","3311983splitHere46","/jre"
"4913splitHere46","3311983splitHere46","export JAVA_HOME=/usr/lib/jvm/java-6-sun/jre<newline46mondego>export PATH=$PATH:$JAVA_HOME/bin<newline46mondego>"
"4914splitHere46","3311983splitHere46","/jre"
"4915splitHere46","3312172splitHere46","Control.setBackground()"
"4916splitHere46","3312172splitHere46","For example, on Windows the background of a Button cannot be changed."
"4917splitHere46","3312230splitHere46","%"
"4918splitHere46","3312230splitHere46","// prefix is some string object<newline46mondego>q.setFilter(<doubleQuotes46>my_string_field >= :1 && my_string_field < :2<doubleQuotes46>);<newline46mondego>q.execute(prefix, (prefix + <doubleQuotes46>\ufffd<doubleQuotes46>));<newline46mondego>"
"4919splitHere46","3312369splitHere46","[ScriptService]<newline46mondego>public class WebService1 : System.Web.Services.WebService <newline46mondego>{<newline46mondego>    [WebMethod]<newline46mondego>    [ScriptMethod(ResponseFormat = ResponseFormat.Json)]<newline46mondego>    public string HelloAndroid()<newline46mondego>    {<newline46mondego>        return <doubleQuotes46>Hello Android<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4920splitHere46","3312369splitHere46","private JSONObject sendJsonRequest(string host, int port,<newline46mondego>       String uri, JSONObject param) <newline46mondego>            throws ClientProtocolException, IOException, JSONException<newline46mondego>{<newline46mondego>    HttpClient httpClient = new DefaultHttpClient();<newline46mondego>    HttpHost httpHost = new HttpHost(host, port);   <newline46mondego>    HttpPost httpPost = new HttpPost(uri);<newline46mondego>    httpPost.addHeader(<doubleQuotes46>Content-Type<doubleQuotes46>, <doubleQuotes46>application/json; charset=utf-8<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego><pre><code>if (param != null)<newline46mondego>{<newline46mondego>    HttpEntity bodyEntity = new StringEntity(param.toString(), <doubleQuotes46>utf8<doubleQuotes46>);<newline46mondego>    httpPost.setEntity(bodyEntity);<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>HttpResponse response = httpClient.execute(httpHost, httpPost);<newline46mondego>HttpEntity entity = response.getEntity();<newline46mondego><newline46mondego><newline46mondego>String result = null;<newline46mondego>if (entity != null) {<newline46mondego>    InputStream instream = entity.getContent();<newline46mondego>    BufferedReader reader = new BufferedReader(<newline46mondego>         new InputStreamReader(instream));<newline46mondego>    StringBuilder sb = new StringBuilder();<newline46mondego><newline46mondego><newline46mondego>    String line = null;<newline46mondego>    while ((line = reader.readLine()) != null)<newline46mondego>        sb.append(line + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego>    result = sb.toString();<newline46mondego>    instream.close();           <newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>httpPost.abort();<newline46mondego>return result != null ? new JSONObject(result) : null;<newline46mondego>"
"4921splitHere46","3312369splitHere46","[WebMethod]<newline46mondego>[ScriptMethod(ResponseFormat = ResponseFormat.Json)]<newline46mondego>public User GetUser(string name, int age)<newline46mondego>{<newline46mondego>    return new User { Name = name, Age = age; }<newline46mondego>}<newline46mondego>"
"4922splitHere46","3312369splitHere46","public void getUser() {<newline46mondego>    // if you put a json object to the server<newline46mondego>    // the properties are automagically mapped to the methods' input parameters<newline46mondego>    JSONObject param = new JSONObject();<newline46mondego>    param.put(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>John Doe<doubleQuotes46>);<newline46mondego>    param.put(<doubleQuotes46>age<doubleQuotes46>, 47);<newline46mondego><newline46mondego><newline46mondego><pre><code>    JSONObject result = sendJsonRequest(<doubleQuotes46>server<doubleQuotes46>, 80, <newline46mondego>          <doubleQuotes46>http://server:80/service1.asmx/GetUser<doubleQuotes46>, param);<newline46mondego>    if (result != null) {<newline46mondego>        JSONObject user = new JSONObject(result.getString(<doubleQuotes46>d<doubleQuotes46>));<newline46mondego>        // .net webservices always return the result<newline46mondego>        // wrapped in a parameter named <doubleQuotes46>d<doubleQuotes46><newline46mondego>        system.out.println(user.getString(<doubleQuotes46>name<doubleQuotes46>));<newline46mondego>        system.out.println(user.getInt(<doubleQuotes46>age<doubleQuotes46>).toString());<newline46mondego>    }<newline46mondego>"
"4923splitHere46","3312369splitHere46","import org.json.JSONException;<newline46mondego>import org.json.JSONObject;<newline46mondego><newline46mondego><newline46mondego>public class JSONExceptionHelper {<newline46mondego><newline46mondego><newline46mondego><pre><code>private static final String KEY_MESSAGE = <doubleQuotes46>Message<doubleQuotes46>;<newline46mondego>private static final String KEY_EXCEPTIONTYPE = <doubleQuotes46>ExceptionType<doubleQuotes46>;<newline46mondego>private static final String KEY_STACKTRACE = <doubleQuotes46>StackTrace<doubleQuotes46>;<newline46mondego><newline46mondego><newline46mondego>public static boolean isException(JSONObject json) {<newline46mondego>    return json == null <newline46mondego>        ? false<newline46mondego>        : json.has(KEY_MESSAGE) &amp;&amp; <newline46mondego>          json.has(KEY_EXCEPTIONTYPE) &amp;&amp; <newline46mondego>          json.has(KEY_STACKTRACE);<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public static void ThrowJsonException(JSONObject json) throws JSONException {<newline46mondego><newline46mondego><newline46mondego>    String message = json.getString(KEY_MESSAGE);<newline46mondego>    String exceptiontype = json.getString(KEY_EXCEPTIONTYPE);<newline46mondego>    String stacktrace = json.getString(KEY_STACKTRACE);<newline46mondego><newline46mondego><newline46mondego>    StringBuilder sb = new StringBuilder();<newline46mondego>    sb.append(exceptiontype);<newline46mondego>    sb.append(<doubleQuotes46>: <doubleQuotes46>);<newline46mondego>    sb.append(message);<newline46mondego>    sb.append(System.getProperty(<doubleQuotes46>line.separator<doubleQuotes46>));<newline46mondego>    sb.append(stacktrace);<newline46mondego><newline46mondego><newline46mondego>    throw new JSONException(sb.toString());<newline46mondego>}<newline46mondego>"
"4924splitHere46","3312369splitHere46","JSONObject json = result != null ? new JSONObject(result) : null<newline46mondego>    if (JSONExceptionHelper.isException(json))<newline46mondego>        JSONExceptionHelper.ThrowJsonException(json); <newline46mondego>    return json;<newline46mondego>"
"4925splitHere46","3312500splitHere46","doGet()"
"4926splitHere46","3312500splitHere46","doPost()"
"4927splitHere46","3312557splitHere46","Duration"
"4928splitHere46","3312557splitHere46","Period"
"4929splitHere46","3312557splitHere46","private static final BigDecimal SECONDS_PER_HOUR = <newline46mondego>    BigDecimal.valueOf(DateTimeConstants.SECONDS_PER_HOUR);<newline46mondego>...<newline46mondego>DateTime dt1 = ...;<newline46mondego>DateTime dt2 = ...;<newline46mondego>Duration duration = new Duration(dt1, dt2);<newline46mondego>BigDecimal result = BigDecimal.valueOf(duration.toStandardSeconds().getSeconds())<newline46mondego>                              .divide(SECONDS_PER_HOUR)<newline46mondego>                              .setScale(2, RoundingMode.HALF_DOWN);<newline46mondego>"
"4930splitHere46","3312557splitHere46","toStandardSeconds().getSeconds()"
"4931splitHere46","3312557splitHere46","Duration.getMillis()"
"4932splitHere46","3312557splitHere46","private static final BigDecimal MILLIS_PER_HOUR = <newline46mondego>    BigDecimal.valueOf(DateTimeConstants.MILLIS_PER_HOUR);<newline46mondego>...<newline46mondego>DateTime dt1 = ...;<newline46mondego>DateTime dt2 = ...;<newline46mondego>Duration duration = new Duration(dt1, dt2);<newline46mondego>BigDecimal result = BigDecimal.valueOf(duration.getMillis())<newline46mondego>                              .divide(MILLIS_PER_HOUR)<newline46mondego>                              .setScale(2, RoundingMode.HALF_DOWN);<newline46mondego>"
"4933splitHere46","3312572splitHere46","^"
"4934splitHere46","3312572splitHere46","^"
"4935splitHere46","3312572splitHere46","Scanner input = new Scanner(file).useDelimiter(<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>"
"4936splitHere46","3312572splitHere46","^"
"4937splitHere46","3312572splitHere46","while (!input.hasNext(Pattern.compile(<doubleQuotes46>\\+.*<doubleQuotes46>)))<newline46mondego>    System.out.println(<doubleQuotes46>No leading +: <doubleQuotes46> + input.next());<newline46mondego>"
"4938splitHere46","3312635splitHere46","011                     3<newline46mondego>in binary: | 100     in decimal:  |  4<newline46mondego>             ___                   ___<newline46mondego>             111                     7<newline46mondego>"
"4939splitHere46","3312674splitHere46","/app/delete/3"
"4940splitHere46","3312674splitHere46","/app/update/4"
"4941splitHere46","3312691splitHere46","@Controller"
"4942splitHere46","3312691splitHere46","DispatcherServlet"
"4943splitHere46","3312691splitHere46","<servletname>-servlet.xml"
"4944splitHere46","3312691splitHere46","contextClass"
"4945splitHere46","3312691splitHere46","contextConfigLocation"
"4946splitHere46","3312691splitHere46","ContextLoaderListener"
"4947splitHere46","3312691splitHere46","applicationContext.xml"
"4948splitHere46","3312691splitHere46","DispatcherServlet"
"4949splitHere46","3312691splitHere46","contextClass"
"4950splitHere46","3312691splitHere46","contextConfigLocation"
"4951splitHere46","3312691splitHere46","init-param"
"4952splitHere46","3312691splitHere46","detectHandlersInAncestorContexts"
"4953splitHere46","3312691splitHere46","DefaultAnnotationHandlerMapping"
"4954splitHere46","3312691splitHere46","true"
"4955splitHere46","3312691splitHere46","@Bean<newline46mondego>public DefaultAnnotationHandlerMapping mapping() {<newline46mondego>    DefaultAnnotationHandlerMapping m = new DefaultAnnotationHandlerMapping();<newline46mondego>    m.setDetectHandlersInAncestorContexts(true);<newline46mondego>    return m;<newline46mondego>}<newline46mondego>"
"4956splitHere46","3312901splitHere46","byte"
"4957splitHere46","3312901splitHere46","int"
"4958splitHere46","3312901splitHere46","long"
"4959splitHere46","3312901splitHere46","byte"
"4960splitHere46","3312901splitHere46","00101011"
"4961splitHere46","3312901splitHere46","00000000000000000000000000101011"
"4962splitHere46","3312901splitHere46","11010100"
"4963splitHere46","3312901splitHere46","11111111111111111111111111010100"
"4964splitHere46","3312901splitHere46","x >> N"
"4965splitHere46","3312901splitHere46","00000000000000000000000000101011 >> 2"
"4966splitHere46","3312901splitHere46","00000000000000000000000000001010"
"4967splitHere46","3312901splitHere46","11111111111111111111111111010100 >> 2"
"4968splitHere46","3312901splitHere46","11111111111111111111111111110101"
"4969splitHere46","3312990splitHere46","jboss-web.xml"
"4970splitHere46","3312990splitHere46","<jboss-web><newline46mondego>   <class-loading java2ClassLoadingCompliance=<doubleQuotes46>false<doubleQuotes46>><newline46mondego>      <loader-repository><newline46mondego>         com.example:archive=unique-archive-name<newline46mondego>         <loader-repository-config>java2ParentDelegation=false</loader-repository-config><newline46mondego>      </loader-repository><newline46mondego>   </class-loading><newline46mondego> ...<newline46mondego>"
"4971splitHere46","3312993splitHere46","PropertiesConfiguration pc = new PropertiesConfiguration();<newline46mondego>pc.addProperty(<doubleQuotes46>SomeKey<doubleQuotes46>,<newline46mondego>  new JSONObject().put(<doubleQuotes46>Stuff<doubleQuotes46>, getUserInput()).toString());<newline46mondego>pc.save(myWriter);<newline46mondego>"
"4972splitHere46","3312993splitHere46","This is <doubleQuotes46>Interesting<doubleQuotes46>..."
"4973splitHere46","3312993splitHere46","SomeKey={\<doubleQuotes46>SomeKey\<doubleQuotes46>:\<doubleQuotes46>This is \<doubleQuotes46>Interesting\<doubleQuotes46>\<doubleQuotes46>}<newline46mondego>"
"4974splitHere46","3312993splitHere46","myWriter.write(keyName + <doubleQuotes46>=<doubleQuotes46> +<newline46mondego>  new JSONObject().put(<doubleQuotes46>Stuff<doubleQuotes46>, getUserInput()).toString());<newline46mondego>"
"4975splitHere46","3312993splitHere46","pc.AddProperty()"
"4976splitHere46","3313075splitHere46","<T> T getEntry(String name, Class<T> clazz)<newline46mondego>"
"4977splitHere46","3313312splitHere46","BASE64Encoder encoder = new BASE64Encoder();<newline46mondego>        out.println(X509Factory.BEGIN_CERT);<newline46mondego>        encoder.encodeBuffer(cert.getEncoded(), out);<newline46mondego>        out.println(X509Factory.END_CERT);<newline46mondego>"
"4978splitHere46","3313488splitHere46","Connection"
"4979splitHere46","3313488splitHere46","Statement"
"4980splitHere46","3313488splitHere46","ResultSet"
"4981splitHere46","3313488splitHere46","finally"
"4982splitHere46","3313488splitHere46","try"
"4983splitHere46","3313488splitHere46","PreparedStatement"
"4984splitHere46","3313488splitHere46","static"
"4985splitHere46","3313560splitHere46","addAll"
"4986splitHere46","3313560splitHere46","TreeSet"
"4987splitHere46","3313560splitHere46","subList"
"4988splitHere46","3313568splitHere46","getPayloadSource()"
"4989splitHere46","3313568splitHere46","getPayloadResult()"
"4990splitHere46","3313568splitHere46","SoapBody"
"4991splitHere46","3313568splitHere46","javax.xml.transform"
"4992splitHere46","3313568splitHere46","Transformer identityTransform = TransformerFactory.newInstance().newTransformer();<newline46mondego>DOMResult domResult = new DOMResult();<newline46mondego>identityTransform.transform(soapBody.getPayloadSource(), domResult);<newline46mondego><newline46mondego>Node bodyContent = domResult.getNode(); // modify this<newline46mondego><newline46mondego>identityTransform.transform(new DOMSource(bodyContent), soapBody.getPayloadResult());<newline46mondego>"
"4993splitHere46","3313723splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><TableLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>android:orientation=<doubleQuotes46>vertical<doubleQuotes46> android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46> android:stretchColumns=<doubleQuotes46>1<doubleQuotes46>><newline46mondego><newline46mondego><TableRow android:id=<doubleQuotes46>@+id/TableRow01<doubleQuotes46> android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46>><newline46mondego>    <Button android:text=<doubleQuotes46>Button01<doubleQuotes46> android:id=<doubleQuotes46>@+id/Button01<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46> android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46>></Button><newline46mondego>    <TextView android:text=<doubleQuotes46>This is your title<doubleQuotes46> android:id=<doubleQuotes46>@+id/TextView01<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46> android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46> android:gravity=<doubleQuotes46>center_horizontal<doubleQuotes46> ></TextView><newline46mondego>    <Button android:text=<doubleQuotes46>Button02<doubleQuotes46> android:id=<doubleQuotes46>@+id/Button02<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46> android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46>></Button><newline46mondego></TableRow><newline46mondego></TableLayout><newline46mondego>"
"4994splitHere46","3314075splitHere46","&"
"4995splitHere46","3314075splitHere46","&amp;"
"4996splitHere46","3314075splitHere46","<"
"4997splitHere46","3314075splitHere46","&lt;"
"4998splitHere46","3314076splitHere46","public class MyProvider implements MessageBodyWriter {<newline46mondego>    @javax.ws.rs.core.Context<newline46mondego>    javax.ws.rs.core.UriInfo uriInfo;<newline46mondego>}<newline46mondego>"
"4999splitHere46","3314168splitHere46","getSession().flush()"
"5000splitHere46","3314168splitHere46","[TRACE] 2010-07-23 00:29:26,303 :org.hibernate.impl.SessionImpl.setFlushMode(SessionImpl.java:1316): setting flush mode to: NEVER<newline46mondego>"
"5001splitHere46","3314168splitHere46","flushMode"
"5002splitHere46","3314829splitHere46","final Beer b1 = new Beer(<doubleQuotes46>Tuborg<doubleQuotes46>, 7,context.getResources().getDrawable(R.drawable.tuborg));<newline46mondego>"
"5003splitHere46","3314829splitHere46","public Beer(String name, int color, Drawable icon)<newline46mondego>"
"5004splitHere46","3314829splitHere46","final Beer b1 = new Beer(<doubleQuotes46>Tuborg<doubleQuotes46>, 7, R.drawable.tuborg);<newline46mondego>"
"5005splitHere46","3314829splitHere46","public Beer(String name, int color, int icon)<newline46mondego>{<newline46mondego>    this.name = name;<newline46mondego>    this.color = color;<newline46mondego>    this.icon = context.getResources().getDrawable(icon);<newline46mondego>}<newline46mondego>"
"5006splitHere46","3314880splitHere46","GenericDao"
"5007splitHere46","3314880splitHere46","StaleObjectException"
"5008splitHere46","3314880splitHere46","uuid"
"5009splitHere46","3314880splitHere46","StaleObjectException"
"5010splitHere46","3314880splitHere46","sessionFactory.getCurrentSession()"
"5011splitHere46","3314880splitHere46","Session"
"5012splitHere46","3314880splitHere46","SessionFactory.getCurrentSession()"
"5013splitHere46","3314880splitHere46","org.hibernate.context.CurrentSessionContext"
"5014splitHere46","3314880splitHere46","hibernate.current_session_context_class"
"5015splitHere46","3314880splitHere46","org.hibernate.context.CurrentSessionContext"
"5016splitHere46","3314880splitHere46","currentSession()"
"5017splitHere46","3314880splitHere46","org.hibernate.context.JTASessionContext"
"5018splitHere46","3314880splitHere46","org.hibernate.context.ThreadLocalSessionContext"
"5019splitHere46","3314880splitHere46","org.hibernate.context.ManagedSessionContext"
"5020splitHere46","3314880splitHere46","ThreadLocal"
"5021splitHere46","3314880splitHere46","HibernateTemplate"
"5022splitHere46","3314880splitHere46","public class ProductDaoImpl implements ProductDao {<newline46mondego><newline46mondego>    private SessionFactory sessionFactory;<newline46mondego><newline46mondego>    public void setSessionFactory(SessionFactory sessionFactory) {<newline46mondego>        this.sessionFactory = sessionFactory;<newline46mondego>    }<newline46mondego><newline46mondego>    public Collection loadProductsByCategory(String category) {<newline46mondego>        return this.sessionFactory.getCurrentSession()<newline46mondego>                .createQuery(<doubleQuotes46>from test.Product product where product.category=?<doubleQuotes46>)<newline46mondego>                .setParameter(0, category)<newline46mondego>                .list();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5023splitHere46","3314880splitHere46","SessionFactory"
"5024splitHere46","3314880splitHere46","hibernate.properties"
"5025splitHere46","3314880splitHere46","hibernate.connection.datasource = java:/comp/env/jdbc/test<newline46mondego>hibernate.transaction.factory_class = \<newline46mondego>    org.hibernate.transaction.JTATransactionFactory<newline46mondego>hibernate.transaction.manager_lookup_class = \<newline46mondego>    org.hibernate.transaction.JBossTransactionManagerLookup<newline46mondego>hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect<newline46mondego>"
"5026splitHere46","3315031splitHere46","lib"
"5027splitHere46","3315031splitHere46","server/xxx/lib"
"5028splitHere46","3315031splitHere46","deploy/"
"5029splitHere46","3315073splitHere46","javax.xml.marshal.StreamScanner"
"5030splitHere46","3315292splitHere46","null"
"5031splitHere46","3315292splitHere46","OutOfMemoryException"
"5032splitHere46","3315349splitHere46","onCreateContextMenu1"
"5033splitHere46","3315349splitHere46","onCreateContextMenu"
"5034splitHere46","3315349splitHere46","menu.add(0, v.getId(), 0, <doubleQuotes46>Ringtone<doubleQuotes46>);   <newline46mondego>        menu.add(0, v.getId(), 0, <doubleQuotes46>Notification<doubleQuotes46>);   <newline46mondego>"
"5035splitHere46","3315349splitHere46","final int MENU_RINGTONE = 0;<newline46mondego>final int MENU_NOTIFICATION = 1;<newline46mondego><newline46mondego>public void onCreateContextMenu(ContextMenu menu, View v, <newline46mondego>            ContextMenuInfo menuInfo) { <newline46mondego>        super.onCreateContextMenu(menu, v, menuInfo);<newline46mondego>        menu.add(0, MENU_RINGTONE, 0, <doubleQuotes46>Ringtone<doubleQuotes46>); <newline46mondego>        menu.add(0, MENU_NOTIFICATION, 0, <doubleQuotes46>Notification<doubleQuotes46>); <newline46mondego>} <newline46mondego><newline46mondego>public boolean onContextItemSelected(MenuItem item) { <newline46mondego>        AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();<newline46mondego>        long buttonId = info.id;<newline46mondego>        switch (item.getItemId()) { <newline46mondego>    case MENU_RINGTONE:<newline46mondego>            function1(buttonId);<newline46mondego>            break;<newline46mondego>    case MENU_NOTIFICATION:<newline46mondego>            function2(buttonId);<newline46mondego>            break;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5036splitHere46","3315370splitHere46","public static final void setJPanelFont(JPanel aPanel, Font font)<newline46mondego>{<newline46mondego>    Component c = null;<newline46mondego>    Component[] components = aPanel.getComponents();<newline46mondego><newline46mondego>    aPanel.setFont(font);<newline46mondego>    if(components != null)<newline46mondego>    {<newline46mondego>        int numComponents = components.length;<newline46mondego>        for(int i = 0; i < numComponents; i++)<newline46mondego>        {<newline46mondego>            c = components[i];<newline46mondego>            if(c != null)<newline46mondego>            {<newline46mondego>                if(c instanceof JPanel)<newline46mondego>                {<newline46mondego>                    setJPanelFont((JPanel)c,font);<newline46mondego>                }<newline46mondego>                else<newline46mondego>                {<newline46mondego>                    c.setFont(font);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}  <newline46mondego>"
"5037splitHere46","3315756splitHere46","<jar destfile=<doubleQuotes46>core.jar<doubleQuotes46><newline46mondego>     basedir=<doubleQuotes46>${build}/myapp<doubleQuotes46><newline46mondego>     includes=<doubleQuotes46>a/b/c/core/**<doubleQuotes46><newline46mondego>/><newline46mondego><jar destfile=<doubleQuotes46>common.jar<doubleQuotes46><newline46mondego>     basedir=<doubleQuotes46>${build}/myapp<doubleQuotes46><newline46mondego>     includes=<doubleQuotes46>a/b/c/common/**<doubleQuotes46><newline46mondego>/><newline46mondego><jar destfile=<doubleQuotes46>web.jar<doubleQuotes46><newline46mondego>     basedir=<doubleQuotes46>${build}/myapp<doubleQuotes46><newline46mondego>     includes=<doubleQuotes46>a/b/c/web/**<doubleQuotes46><newline46mondego>/><newline46mondego>"
"5038splitHere46","3315756splitHere46","jar"
"5039splitHere46","3316220splitHere46","ForEachLoop f = new ForEachLoop(); <newline46mondego>"
"5040splitHere46","3316220splitHere46","ForEachLoop<Something> f = new ForEachLoop<Something>();<newline46mondego>"
"5041splitHere46","3316220splitHere46","get"
"5042splitHere46","3316220splitHere46","class Outer<T>{<newline46mondego>  class Inner<S> {<newline46mondego>    S s;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"5043splitHere46","3316220splitHere46","Outer.Inner<Double> x = null; // illegal<newline46mondego>Double d = x.s;<newline46mondego>"
"5044splitHere46","3316220splitHere46","Outer<Integer>.Inner x = null; // illegal<newline46mondego>"
"5045splitHere46","3316412splitHere46","Long"
"5046splitHere46","3316412splitHere46","Integer"
"5047splitHere46","3316412splitHere46","Long"
"5048splitHere46","3316421splitHere46","File log4jConfigFile == new File(conventionLocation);<newline46mondego>if(log4jConfigFile.isFile() && log4jConfigFile.exists()) {<newline46mondego>    PropertyConfigurator.configure(conventionLocation);<newline46mondego>} else {<newline46mondego>    PropertyConfigurator.configure(defaultEmbeddedJarLocation);<newline46mondego>}<newline46mondego>"
"5049splitHere46","3316622splitHere46","try{<newline46mondego>  Method m= object.getClass().getMethod(<doubleQuotes46>getField<doubleQuotes46>+String.valueOf(i), new Class[]{});<newline46mondego>  fields+=(String)m.invoke(object);<newline46mondego>}catch(...){...}<newline46mondego>"
"5050splitHere46","3316622splitHere46","getFieldN()"
"5051splitHere46","3316622splitHere46","String getField(int fieldNum)<newline46mondego>"
"5052splitHere46","3316622splitHere46","getMethod(int)"
"5053splitHere46","3316622splitHere46","getMethodN()"
"5054splitHere46","3316678splitHere46","DocumentBuilderFactory"
"5055splitHere46","3316678splitHere46","newInstance()"
"5056splitHere46","3316696splitHere46","public class Shuffle {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        Shuffle s = new Shuffle();<newline46mondego>        s.shuffle(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego><newline46mondego>    }<newline46mondego>    public void shuffle(String input){<newline46mondego>        List<Character> characters = new ArrayList<Character>();<newline46mondego>        for(char c:input.toCharArray()){<newline46mondego>            characters.add(c);<newline46mondego>        }<newline46mondego>        StringBuilder output = new StringBuilder(input.length());<newline46mondego>        while(characters.size()!=0){<newline46mondego>            int randPicker = (int)(Math.random()*characters.size());<newline46mondego>            output.append(characters.remove(randPicker));<newline46mondego>        }<newline46mondego>        System.out.println(output.toString());<newline46mondego>    }<newline46mondego>}<newline46mondego>/*<newline46mondego>Sample outputs<newline46mondego>hlleo<newline46mondego>llheo<newline46mondego>leohl<newline46mondego>lleho<newline46mondego>*/<newline46mondego>"
"5057splitHere46","3316705splitHere46","InputStream connectedImage = <newline46mondego>    ClassLoader.getSystemResourceAsStream(<doubleQuotes46>logo.png<doubleQuotes46>);<newline46mondego>"
"5058splitHere46","3316839splitHere46","import org.nlogo.headless.*;<newline46mondego>import org.nlogo.api.*;<newline46mondego>class J {<newline46mondego>   public static void main(String[] args) {<newline46mondego>      try {<newline46mondego>         HeadlessWorkspace ws = HeadlessWorkspace.newInstance();<newline46mondego>         ws.openString(org.nlogo.util.Utils.url2String(<doubleQuotes46>/system/empty.nlogo<doubleQuotes46>));<newline46mondego>         ws.command(<doubleQuotes46>cro 8 [ fd 5 ]<doubleQuotes46>);<newline46mondego>         org.nlogo.api.Turtle turtle =(org.nlogo.api.Turtle) ws.world().turtles().agent(3);<newline46mondego>         System.out.println(<doubleQuotes46>[xcor] of turtle 3 = <doubleQuotes46> + turtle.xcor());<newline46mondego>         ws.dispose();<newline46mondego>      }<newline46mondego>      catch(Exception ex) {<newline46mondego>         ex.printStackTrace();<newline46mondego>      }<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"5059splitHere46","3316842splitHere46","Math.Pow"
"5060splitHere46","3316842splitHere46","L_G - a0 - L_ETQ"
"5061splitHere46","3316842splitHere46","L_ETQ"
"5062splitHere46","3316842splitHere46","t2"
"5063splitHere46","3316842splitHere46","L_G - a0 - L_ETQ"
"5064splitHere46","3316842splitHere46","Math.pow(10, 0.025 * L_ETQ); <newline46mondego>"
"5065splitHere46","3316842splitHere46","Math.exp(L_ETQ * 0.05756462732485114210d)<newline46mondego>"
"5066splitHere46","3316842splitHere46","exp(L_ETQ * 0.025 * log(10))"
"5067splitHere46","3316842splitHere46","t2"
"5068splitHere46","3316842splitHere46","L_G - a0 - L_ETQ"
"5069splitHere46","3316842splitHere46","double t1 = 1d + 1 / 4d * Math.pow(10d, 0.1d * (L_G - a0 - L_ETQ)); <newline46mondego>double t2 = Math.pow(t1, 0.25);<newline46mondego>"
"5070splitHere46","3316842splitHere46","double x = L_G - a0 - L_ETQ;<newline46mondego>double t1 = 0.25 * Math.exp(0.230259 * x) + 1;<newline46mondego>double t2 = Math.sqrt(Math.sqrt(t1));<newline46mondego>"
"5071splitHere46","3316862splitHere46","class JnlpResponseCache extends ResponseCache {<newline46mondego>    private final DownloadService service;<newline46mondego><newline46mondego>    private JnlpResponseCache(){<newline46mondego>        try {<newline46mondego>            service = (DownloadService)ServiceManager.lookup(<doubleQuotes46>javax.jnlp.DownloadService<doubleQuotes46>);<newline46mondego>        } catch( UnavailableServiceException ex ) {<newline46mondego>            throw new NoClassDefFoundError( ex.toString() );<newline46mondego>        } <newline46mondego>    }<newline46mondego><newline46mondego>    static void init(){<newline46mondego>        if( ResponseCache.getDefault() == null ){<newline46mondego>            ResponseCache.setDefault( new JnlpResponseCache() );<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public CacheResponse get( URI uri, String rqstMethod, Map<String, List<String>> rqstHeaders ) throws IOException {<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public CacheRequest put( URI uri, URLConnection conn ) throws IOException {<newline46mondego>        URL url = uri.toURL();<newline46mondego>        service.loadResource( url, null, service.getDefaultProgressWindow() );<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5072splitHere46","3316920splitHere46","import java.util.*;<newline46mondego><newline46mondego>public class Algorithm {<newline46mondego><newline46mondego>    static List<List<Integer>> getChildren(List<Integer> node){<newline46mondego>        List<List<Integer>> children = new ArrayList<List<Integer>>();<newline46mondego>        for(int i = 0; i < 6; i++){<newline46mondego>            List<Integer> child = new ArrayList<Integer>(node);<newline46mondego>            child.add(i);<newline46mondego>            children.add(child);<newline46mondego>        }<newline46mondego>        return children;<newline46mondego>    }<newline46mondego><newline46mondego>    static List<Integer> find(Queue<List<Integer>> queue, Set<List<Integer>> set){<newline46mondego><newline46mondego>        for(;;){<newline46mondego>            List<Integer> head = queue.poll();<newline46mondego>            if(!set.contains(head)){<newline46mondego>                return head;<newline46mondego>            } else {<newline46mondego>                for(List<Integer> child : getChildren(head)){<newline46mondego>                    queue.add(child);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] arg) {<newline46mondego>        Queue<List<Integer>> queue = new LinkedList<List<Integer>>();<newline46mondego>        for(int i = 0; i < 6; i++){<newline46mondego>            queue.add(Collections.singletonList(i));<newline46mondego>        }<newline46mondego>        // Example {{0},{1},{2},{3},{4},{5},{0,1},{0,2},{0,3},{0,5},...}<newline46mondego>        Set<List<Integer>> task = new HashSet<List<Integer>>();<newline46mondego>        task.add(Arrays.asList(0));<newline46mondego>        task.add(Arrays.asList(1));<newline46mondego>        task.add(Arrays.asList(2));<newline46mondego>        task.add(Arrays.asList(3));<newline46mondego>        task.add(Arrays.asList(4));<newline46mondego>        task.add(Arrays.asList(5));<newline46mondego>        task.add(Arrays.asList(0, 1));<newline46mondego>        task.add(Arrays.asList(0, 2));<newline46mondego>        task.add(Arrays.asList(0, 3));<newline46mondego>        task.add(Arrays.asList(0, 5));<newline46mondego><newline46mondego>        System.out.println(find(queue, task));<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5073splitHere46","3316970splitHere46","Java"
"5074splitHere46","3316970splitHere46","C"
"5075splitHere46","3316970splitHere46","C++"
"5076splitHere46","3316970splitHere46","perl"
"5077splitHere46","3316970splitHere46","JRuby"
"5078splitHere46","3316970splitHere46","Python"
"5079splitHere46","3316970splitHere46","LUA"
"5080splitHere46","3316970splitHere46","BeanShell"
"5081splitHere46","3316970splitHere46","(C# .net - Mono, etc)"
"5082splitHere46","3316970splitHere46","LUA"
"5083splitHere46","3316970splitHere46","Perl"
"5084splitHere46","3316970splitHere46","Python"
"5085splitHere46","3316970splitHere46","BeanShell"
"5086splitHere46","3316970splitHere46","RenderScript"
"5087splitHere46","3317192splitHere46","public static <T extends Enum<?>> EnumConverter<T> getInstance(Class<T> enumClass) {<newline46mondego>    return (EnumConverter<T>) cache.get(enumClass);<newline46mondego>}<newline46mondego>"
"5088splitHere46","3317388splitHere46","URL"
"5089splitHere46","3317388splitHere46","QName"
"5090splitHere46","3317408splitHere46","List"
"5091splitHere46","3317408splitHere46","Collection"
"5092splitHere46","3317408splitHere46","Collection"
"5093splitHere46","3317408splitHere46","Collection"
"5094splitHere46","3317408splitHere46","List"
"5095splitHere46","3317408splitHere46","Collection"
"5096splitHere46","3317408splitHere46","Set"
"5097splitHere46","3317429splitHere46","interface SortedMap<K,V>"
"5098splitHere46","3317429splitHere46","Map"
"5099splitHere46","3317429splitHere46","Comparator"
"5100splitHere46","3317429splitHere46","entrySet"
"5101splitHere46","3317429splitHere46","keySet"
"5102splitHere46","3317429splitHere46","values"
"5103splitHere46","3317429splitHere46","SortedMap"
"5104splitHere46","3317429splitHere46","TreeMap"
"5105splitHere46","3317429splitHere46","NavigableMap"
"5106splitHere46","3317429splitHere46","Comparator"
"5107splitHere46","3317429splitHere46","log(n)"
"5108splitHere46","3317429splitHere46","containsKey"
"5109splitHere46","3317429splitHere46","get"
"5110splitHere46","3317429splitHere46","put"
"5111splitHere46","3317429splitHere46","remove"
"5112splitHere46","3317429splitHere46","interface NavigableMap<K,V> extends SortedMap<K,V>"
"5113splitHere46","3317429splitHere46","NavigableMap"
"5114splitHere46","3317429splitHere46","SortedMap"
"5115splitHere46","3317429splitHere46","subMap"
"5116splitHere46","3317429splitHere46","SortedMap"
"5117splitHere46","3317429splitHere46","NavigableSet<K,V>"
"5118splitHere46","3317429splitHere46","NavigableMap<Integer,String> nmap =<newline46mondego>        new TreeMap<Integer,String>();<newline46mondego><newline46mondego>    nmap.put(3, <doubleQuotes46>Three<doubleQuotes46>);<newline46mondego>    nmap.put(1, <doubleQuotes46>One<doubleQuotes46>);<newline46mondego>    nmap.put(4, <doubleQuotes46>Four<doubleQuotes46>);<newline46mondego>    nmap.put(5, <doubleQuotes46>Five<doubleQuotes46>);<newline46mondego>    nmap.put(7, <doubleQuotes46>Seven<doubleQuotes46>);<newline46mondego><newline46mondego>    System.out.println(nmap);<newline46mondego>    // {1=One, 3=Three, 4=Four, 5=Five, 7=Seven}<newline46mondego><newline46mondego>    System.out.println(nmap.firstKey()); // 1<newline46mondego>    System.out.println(nmap.lastEntry().getValue()); // Seven<newline46mondego>    System.out.println(nmap.higherKey(1)); // 3 <newline46mondego>    System.out.println(nmap.lowerEntry(6).getValue()); // Five<newline46mondego><newline46mondego>    NavigableMap<Integer,String> sub = nmap.subMap(2, true, 5, true);<newline46mondego>    for (Map.Entry<Integer,String> entry : sub.entrySet()) {<newline46mondego>        System.out.printf(<doubleQuotes46>%s => %s%n<doubleQuotes46>,<newline46mondego>            entry.getKey(),<newline46mondego>            entry.getValue()<newline46mondego>        );<newline46mondego>    }<newline46mondego>    // 3 => Three<newline46mondego>    // 4 => Four<newline46mondego>    // 5 => Five<newline46mondego>"
"5119splitHere46","3317429splitHere46","Map"
"5120splitHere46","3317429splitHere46","SortedMap"
"5121splitHere46","3317429splitHere46","NavigableMap"
"5122splitHere46","3317525splitHere46","getResourceAsStream"
"5123splitHere46","3317525splitHere46","class"
"5124splitHere46","3317525splitHere46","Properties p = new Properties();<newline46mondego>p.load(MyClass.class.getResourceAsStream(<doubleQuotes46>/myprops.properties<doubleQuotes46>));<newline46mondego>"
"5125splitHere46","3317673splitHere46","public String xorEnc(int encKey, String toEnc) {<newline46mondego>    /*<newline46mondego>        Usage: str = xorEnc(integer_key,string_to_encrypt);<newline46mondego>        Created by Matthew Shaffer (matt-shaffer.com)<newline46mondego>    */<newline46mondego>    int t=0;<newline46mondego>    String s1=<doubleQuotes46><doubleQuotes46>;<newline46mondego>    String tog=<doubleQuotes46><doubleQuotes46>;<newline46mondego>    if(encKey>0) {<newline46mondego>        while(t < toEnc.length()) {<newline46mondego>            int a=toEnc.charAt(t);<newline46mondego>            int c=a ^ encKey;<newline46mondego>            char d=(char)c;<newline46mondego>            tog=tog+d;<newline46mondego>            t++;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>    return tog;<newline46mondego>}<newline46mondego>public String xorEncStr(String encKey, String toEnc) {<newline46mondego>    /*<newline46mondego>        Usage: str = xorEnc(string_key,string_to_encrypt);<newline46mondego>        Created by Matthew Shaffer (matt-shaffer.com)<newline46mondego>    */<newline46mondego>    int t=0;<newline46mondego>    int encKeyI=0;<newline46mondego><newline46mondego>    while(t < encKey.length()) {<newline46mondego>        encKeyI+=encKey.charAt(t);<newline46mondego>        t+=1;<newline46mondego>    }<newline46mondego>    return xorEnc(encKeyI,toEnc);<newline46mondego>}<newline46mondego>"
"5126splitHere46","3317694splitHere46","Collections.replaceAll(list, <doubleQuotes46>two<doubleQuotes46>, <doubleQuotes46>one<doubleQuotes46>);<newline46mondego>"
"5127splitHere46","3317694splitHere46","newVal"
"5128splitHere46","3317694splitHere46","e"
"5129splitHere46","3317694splitHere46","(oldVal==null ? e==null : oldVal.equals(e))"
"5130splitHere46","3317694splitHere46","boolean"
"5131splitHere46","3317694splitHere46","java.util.Collections"
"5132splitHere46","3317694splitHere46","static"
"5133splitHere46","3317694splitHere46","List"
"5134splitHere46","3317694splitHere46","sort"
"5135splitHere46","3317694splitHere46","binarySearch"
"5136splitHere46","3317694splitHere46","shuffle"
"5137splitHere46","3317694splitHere46","Collections.replaceAll"
"5138splitHere46","3317694splitHere46","null"
"5139splitHere46","3317694splitHere46","List<String> list = Arrays.asList(<newline46mondego>        <doubleQuotes46>one<doubleQuotes46>, <doubleQuotes46>two<doubleQuotes46>, <doubleQuotes46>three<doubleQuotes46>, null, <doubleQuotes46>two<doubleQuotes46>, null, <doubleQuotes46>five<doubleQuotes46><newline46mondego>    );<newline46mondego>    System.out.println(list);<newline46mondego>    // [one, two, three, null, two, null, five]<newline46mondego><newline46mondego>    Collections.replaceAll(list, <doubleQuotes46>two<doubleQuotes46>, <doubleQuotes46>one<doubleQuotes46>);<newline46mondego>    System.out.println(list);<newline46mondego>    // [one, one, three, null, one, null, five]<newline46mondego><newline46mondego>    Collections.replaceAll(list, <doubleQuotes46>five<doubleQuotes46>, null);<newline46mondego>    System.out.println(list);<newline46mondego>    // [one, one, three, null, one, null, null]<newline46mondego><newline46mondego>    Collections.replaceAll(list, null, <doubleQuotes46>none<doubleQuotes46>);<newline46mondego>    System.out.println(list);<newline46mondego>    // [one, one, three, none, one, none, none]<newline46mondego>"
"5140splitHere46","3317891splitHere46","List<String> someName = new ArrayList<String>();"
"5141splitHere46","3317891splitHere46","List<$Type$> $variable$ = new $ListType$<$Type$>()"
"5142splitHere46","3317891splitHere46","Map<$Key$, $Value$>"
"5143splitHere46","3317898splitHere46","<pre><newline46mondego>public class BeanContainer{<newline46mondego>    private ArrayList<School> schools = new ArrayList<School>();<newline46mondego>    private ArrayList<Car> cars = new ArrayList<Car>;<newline46mondego>    private ArrayList<Person> people = ArrayList<Person>();</p><newline46mondego><newline46mondego><pre><code>public void addSchool(School school){<newline46mondego>    this.schools.add(school);<newline46mondego>}<newline46mondego><newline46mondego>public void addSchoolCollection(ArrayList<School> schools){<newline46mondego>    this.schools.add(schools);<newline46mondego>}<newline46mondego><newline46mondego>public ArrayList<School> getSchoolCollection(){<newline46mondego>    return schools;<newline46mondego>}<newline46mondego><newline46mondego>...<newline46mondego>"
"5144splitHere46","3318044splitHere46","static <V> List<V> NMapToList(NavigableMap<Integer,V> nmap, V emptyEntryValue)<newline46mondego>{<newline46mondego>    Integer next = null;<newline46mondego>    List<V> list = new ArrayList<V>();<newline46mondego><newline46mondego>    for(NavigableMap.Entry<Integer, V> e : nmap.entrySet())<newline46mondego>    {<newline46mondego>        Integer current = e.getKey();<newline46mondego><newline46mondego>        if(next != null)<newline46mondego>            for(int i = next; i < current; i++)<newline46mondego>                list.add(emptyEntryValue);<newline46mondego>        list.add(e.getValue());<newline46mondego><newline46mondego>        next = current + 1;<newline46mondego>    }<newline46mondego><newline46mondego>    return list;<newline46mondego>}<newline46mondego><newline46mondego>static String listToString(List<?> l, String separator)<newline46mondego>{<newline46mondego>    StringBuilder sb = new StringBuilder(<doubleQuotes46>(<doubleQuotes46>);<newline46mondego>    String sep = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    for (Object object : l)<newline46mondego>    {<newline46mondego>        sb.append(sep).append(object.toString());<newline46mondego>        sep = separator;<newline46mondego>    }<newline46mondego>    return sb.append(<doubleQuotes46>)<doubleQuotes46>).toString();<newline46mondego>}<newline46mondego><newline46mondego>String s = listToString(NMapToList(nmap,'-'),',');<newline46mondego>"
"5145splitHere46","3318174splitHere46","int main( void ){<newline46mondego>        int i, j;<newline46mondego>        for (i=0;i<100000;i++){<newline46mondego>                for (j=0;j<100000;j++){<newline46mondego>                        continue;<newline46mondego>                }<newline46mondego>        }<newline46mondego>        return 0;<newline46mondego>}<newline46mondego>"
"5146splitHere46","3318528splitHere46","boolean nonSystem = (packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0;<newline46mondego>"
"5147splitHere46","3318598splitHere46","Locale locale = new Locale(<doubleQuotes46>en_US<doubleQuotes46>);<newline46mondego>"
"5148splitHere46","3318598splitHere46","Locale locale = new Locale(<doubleQuotes46>en<doubleQuotes46>,<doubleQuotes46>US<doubleQuotes46>);<newline46mondego>"
"5149splitHere46","3318661splitHere46","System.out"
"5150splitHere46","3318661splitHere46","System.out"
"5151splitHere46","3318661splitHere46","System.out.println()"
"5152splitHere46","3318661splitHere46","int snapshot = index;<newline46mondego>if (snapshot % 2 != 0) {<newline46mondego>  System.out.println(<doubleQuotes46>Oh noes! <doubleQuotes46> + snapshot);<newline46mondego>}<newline46mondego>"
"5153splitHere46","3318685splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46>?><newline46mondego><!DOCTYPE hibernate-mapping PUBLIC<newline46mondego>                        <doubleQuotes46>-//Hibernate/Hibernate Mapping DTD 3.0//EN<doubleQuotes46><newline46mondego>                        <doubleQuotes46>http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd<doubleQuotes46>><newline46mondego><newline46mondego><hibernate-mapping package=<doubleQuotes46>manufacturing<doubleQuotes46>><newline46mondego>    <class name=<doubleQuotes46>Component<doubleQuotes46> table=<doubleQuotes46>Component<doubleQuotes46>><newline46mondego>        <id name=<doubleQuotes46>ID<doubleQuotes46> column=<doubleQuotes46>ComponentID<doubleQuotes46>><newline46mondego>            <generator class=<doubleQuotes46>native<doubleQuotes46> /><newline46mondego>        </id><newline46mondego>        <property name=<doubleQuotes46>name<doubleQuotes46> column=<doubleQuotes46>Name<doubleQuotes46> /><newline46mondego>        <property name=<doubleQuotes46>price<doubleQuotes46> column=<doubleQuotes46>Price<doubleQuotes46> />        <newline46mondego><newline46mondego>        <joined-subclass name=<doubleQuotes46>Part<doubleQuotes46> table=<doubleQuotes46>Part<doubleQuotes46>><newline46mondego>            <key column=<doubleQuotes46>PartID<doubleQuotes46> /><newline46mondego>            <!-- A part has has [0..n] sub-components --><newline46mondego>            <set name=<doubleQuotes46>Subcomponents<doubleQuotes46> lazy=<doubleQuotes46>true<doubleQuotes46> cascade=<doubleQuotes46>all<doubleQuotes46> inverse=<doubleQuotes46>false<doubleQuotes46>><newline46mondego>                <key column=<doubleQuotes46>PartID<doubleQuotes46> /><newline46mondego>                <one-to-many class=<doubleQuotes46>Component<doubleQuotes46> /><newline46mondego>            </set><newline46mondego><newline46mondego>        </joined-subclass><newline46mondego>    </class><newline46mondego></hibernate-mapping><newline46mondego>"
"5154splitHere46","3318685splitHere46","create table Component (ComponentID bigint generated by default as identity (start with 1), Name varchar(255), Price float, PartID bigint, primary key (ComponentID));<newline46mondego>create table Part (PartID bigint not null, primary key (PartID));<newline46mondego>alter table Component add constraint FK24013CDD89368311 foreign key (PartID) references Part;<newline46mondego>alter table Part add constraint FK25D813296E407B foreign key (PartID) references Component;<newline46mondego>"
"5155splitHere46","3318753splitHere46","<doubleQuotes46> Hello \<doubleQuotes46>world\<doubleQuotes46>!<doubleQuotes46>"
"5156splitHere46","3318755splitHere46","(.foo (into-array ...))"
"5157splitHere46","3318755splitHere46","(.foo (Heatmap.) (into-array...))"
"5158splitHere46","3318755splitHere46","require"
"5159splitHere46","3318755splitHere46","gui.Heatmap"
"5160splitHere46","3318755splitHere46","..."
"5161splitHere46","3318755splitHere46","gui.Heatmap"
"5162splitHere46","3318755splitHere46","require"
"5163splitHere46","3318755splitHere46","(ns gui.heatmap<newline46mondego>  (:gen-class<newline46mondego>    :name gui.Heatmap<newline46mondego>    :methods [[heat-map2 [<doubleQuotes46>[[D<doubleQuotes46>] org.jfree.chart.JFreeChart]]))<newline46mondego><newline46mondego>(defn -foo [dbl-array]<newline46mondego>  ...)<newline46mondego><newline46mondego>(ns ...<newline46mondego>  (import gui.Heatmap))<newline46mondego><newline46mondego>(defn bar [args]<newline46mondego>  ...<newline46mondego>  (.foo<newline46mondego>    (Heatmap.)<newline46mondego>    (into-array<newline46mondego>      (vector<newline46mondego>        (double-array )<newline46mondego>        (double-array )<newline46mondego>        (double-array )))))<newline46mondego>"
"5164splitHere46","3318899splitHere46","Element.toString()"
"5165splitHere46","3318899splitHere46","Element e=document.getRootElement();<newline46mondego>XmlOutputter outputter=new XmlOutputter();<newline46mondego>outputter.output(e,System.out);<newline46mondego>"
"5166splitHere46","3318949splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import javax.swing.*;<newline46mondego>import javax.swing.text.*;<newline46mondego><newline46mondego>public class TextPanePerfectSize extends JFrame<newline46mondego>{<newline46mondego>    JTextField textField;<newline46mondego>    JTextPane textPane;<newline46mondego><newline46mondego>    public TextPanePerfectSize()<newline46mondego>    {<newline46mondego>        textField = new JTextField(20);<newline46mondego>        textField.setText(<doubleQuotes46>add text<doubleQuotes46>);<newline46mondego>        getContentPane().add(textField, BorderLayout.NORTH );<newline46mondego>        textField.addActionListener( new ActionListener()<newline46mondego>        {<newline46mondego>            public void actionPerformed(ActionEvent e)<newline46mondego>            {<newline46mondego>                try<newline46mondego>                {<newline46mondego>                    Document doc = textPane.getDocument();<newline46mondego>                    doc.insertString(doc.getLength(), <doubleQuotes46> <doubleQuotes46> + textField.getText(), null);<newline46mondego>                    textField.setText(<doubleQuotes46><doubleQuotes46>);<newline46mondego>                    Dimension d = textPane.getPreferredSize();<newline46mondego>                    Rectangle r = textPane.modelToView( textPane.getDocument().getLength() );<newline46mondego>                    d.height = r.y + r.height;<newline46mondego>                    textPane.setPreferredSize( d );<newline46mondego>                    getContentPane().validate();<newline46mondego>//                  pack();<newline46mondego>                }<newline46mondego>                catch(Exception e2) {}<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        JLabel label = new JLabel(<doubleQuotes46>Hit Enter to Add Text to Text Pane<doubleQuotes46>);<newline46mondego>        getContentPane().add(label);<newline46mondego><newline46mondego>        JPanel south = new JPanel();<newline46mondego>        textPane = new JTextPane();<newline46mondego>        textPane.setText(<doubleQuotes46>Some text<doubleQuotes46>);<newline46mondego>        textPane.setEditable( false );<newline46mondego>//      textPane.setPreferredSize( new Dimension(120, 23) );<newline46mondego><newline46mondego>        south.add( textPane );<newline46mondego>//      getContentPane().add(south, BorderLayout.SOUTH);<newline46mondego>        getContentPane().add(textPane, BorderLayout.SOUTH);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        JFrame frame = new TextPanePerfectSize();<newline46mondego>        frame.setSize(200, 200);<newline46mondego>        frame.setLocationRelativeTo( null );<newline46mondego>        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);<newline46mondego>        frame.setVisible(true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5167splitHere46","3319118splitHere46","org.ibatis.sqlmap.engine.impl.SqlMapClientImpl"
"5168splitHere46","3319118splitHere46","ThreadLocal"
"5169splitHere46","3319118splitHere46","SqlMapClient"
"5170splitHere46","3319146splitHere46","//member variable<newline46mondego>boolean isChanging = false;<newline46mondego><newline46mondego>//later.... make this same change in both ListSelectionListeners!<newline46mondego>jList2.addListSelectionListener(new ListSelectionListener() {<newline46mondego><newline46mondego> public void valueChanged(ListSelectionEvent e) {<newline46mondego>      if (!isChanging) {<newline46mondego>        isChanging = true;<newline46mondego>        jList1.clearSelection();<newline46mondego>        isChanging = false;<newline46mondego>      }<newline46mondego> }<newline46mondego>"
"5171splitHere46","3319192splitHere46","bashScriptFile.setExecutable(true);<newline46mondego>"
"5172splitHere46","3319553splitHere46","toString"
"5173splitHere46","3319553splitHere46","java.util.Arrays"
"5174splitHere46","3319553splitHere46","Arrays"
"5175splitHere46","3319553splitHere46","toString"
"5176splitHere46","3319553splitHere46","toString"
"5177splitHere46","3319553splitHere46","Object[]"
"5178splitHere46","3319553splitHere46","toString"
"5179splitHere46","3319553splitHere46","char[]"
"5180splitHere46","3319553splitHere46","Arrays"
"5181splitHere46","3319816splitHere46","public void startAc() {     <newline46mondego>    Intent myIntent = new Intent(getApplicationContext(), contents.class);<newline46mondego>    startActivity(myIntent);<newline46mondego>}<newline46mondego>"
"5182splitHere46","3319933splitHere46","false"
"5183splitHere46","3319933splitHere46","\Noinferiors"
"5184splitHere46","3320091splitHere46","\b"
"5185splitHere46","3320091splitHere46","$"
"5186splitHere46","3320091splitHere46","\w"
"5187splitHere46","3320091splitHere46","\W"
"5188splitHere46","3320091splitHere46","$"
"5189splitHere46","3320091splitHere46","\w"
"5190splitHere46","3320091splitHere46","<doubleQuotes46> b l a $ <doubleQuotes46><newline46mondego> ^----------- here<newline46mondego><newline46mondego><doubleQuotes46> b l a $ <doubleQuotes46><newline46mondego>       ^----- here<newline46mondego><newline46mondego><doubleQuotes46> b l a $ <doubleQuotes46><newline46mondego>         ^--- but not here<newline46mondego>"
"5191splitHere46","3320133splitHere46",".exe"
"5192splitHere46","3320275splitHere46","System.out"
"5193splitHere46","3320275splitHere46","java.io.Console"
"5194splitHere46","3320549splitHere46","String myString;<newline46mondego>if (someCondition)<newline46mondego>   myString = <doubleQuotes46>something<doubleQuotes46>;<newline46mondego>else<newline46mondego>   myString = <doubleQuotes46>something else<doubleQuotes46>;<newline46mondego>"
"5195splitHere46","3320554splitHere46","/WEB-INF/lib"
"5196splitHere46","3320554splitHere46","ServiceLoader"
"5197splitHere46","3320554splitHere46","OutOfMemoryError"
"5198splitHere46","3320554splitHere46","/lib"
"5199splitHere46","3320735splitHere46","public enum Suite {<newline46mondego>    HEART, DIAMOND, CLUB, SPADE<newline46mondego>}<newline46mondego>public enum Value {<newline46mondego>    TWO, THREE, ... , JACK, QUEEN, KING, ACE <newline46mondego>}<newline46mondego>"
"5200splitHere46","3320799splitHere46","import static System.out;<newline46mondego><newline46mondego>out.println(<doubleQuotes46>Hello World<doubleQuotes46>);<newline46mondego>"
"5201splitHere46","3320799splitHere46","println"
"5202splitHere46","3320799splitHere46","void println(String line){<newline46mondego>System.out.println(line);<newline46mondego>}<newline46mondego><newline46mondego>println(<doubleQuotes46>Hello World<doubleQuotes46>);<newline46mondego>"
"5203splitHere46","3320799splitHere46","info()"
"5204splitHere46","3320799splitHere46","warn()"
"5205splitHere46","3320799splitHere46","error()"
"5206splitHere46","3320799splitHere46","sout"
"5207splitHere46","3320799splitHere46","System.out.println()"
"5208splitHere46","3320799splitHere46","sysout"
"5209splitHere46","3321146splitHere46","ACTION_SEND"
"5210splitHere46","3321146splitHere46","Intents"
"5211splitHere46","3321146splitHere46","startActivity()"
"5212splitHere46","3321146splitHere46","Service"
"5213splitHere46","3321146splitHere46","Activity"
"5214splitHere46","3321146splitHere46","setContentView()"
"5215splitHere46","3321280splitHere46","final Integer a = 1;<newline46mondego>"
"5216splitHere46","3321280splitHere46","Integer b = a;<newline46mondego>"
"5217splitHere46","3321280splitHere46","b++;<newline46mondego>"
"5218splitHere46","3321280splitHere46","b = new Integer(b.intValue() + 1);<newline46mondego>"
"5219splitHere46","3321280splitHere46","b = b + 1;<newline46mondego>"
"5220splitHere46","3321280splitHere46","b = 10<newline46mondego>"
"5221splitHere46","3321280splitHere46","b = new Integer(10);<newline46mondego>"
"5222splitHere46","3321507splitHere46","public interface SymmetricKeyAlgorithmTags<newline46mondego>{<newline46mondego>    public static final int NULL = 0;        // Plaintext or unencrypted data<newline46mondego>    public static final int IDEA = 1;        // IDEA [IDEA]<newline46mondego>    public static final int TRIPLE_DES = 2;  // Triple-DES (DES-EDE, as per spec -168 bit key derived from 192)<newline46mondego>    public static final int CAST5 = 3;       // CAST5 (128 bit key, as per RFC 2144)<newline46mondego>    public static final int BLOWFISH = 4;    // Blowfish (128 bit key, 16 rounds) [BLOWFISH]<newline46mondego>    public static final int SAFER = 5;       // SAFER-SK128 (13 rounds) [SAFER]<newline46mondego>    public static final int DES = 6;         // Reserved for DES/SK<newline46mondego>    public static final int AES_128 = 7;     // Reserved for AES with 128-bit key<newline46mondego>    public static final int AES_192 = 8;     // Reserved for AES with 192-bit key<newline46mondego>    public static final int AES_256 = 9;     // Reserved for AES with 256-bit key<newline46mondego>    public static final int TWOFISH = 10;    // Reserved for Twofish<newline46mondego>}<newline46mondego>"
"5223splitHere46","3321548splitHere46","<doubleQuotes46><doubleQuotes46>.equals(s)"
"5224splitHere46","3321548splitHere46","equals"
"5225splitHere46","3321548splitHere46","false"
"5226splitHere46","3321548splitHere46","s"
"5227splitHere46","3321548splitHere46","s.isEmpty()"
"5228splitHere46","3321548splitHere46","s"
"5229splitHere46","3321685splitHere46","from + rndGenerator.nextInt(to - from + 1)<newline46mondego>"
"5230splitHere46","3321685splitHere46","1 + rndGenerator.nextInt(sides)<newline46mondego>"
"5231splitHere46","3321880splitHere46","Activity (i.e. InGameActivity, which loads the game objects, Physics and Renderer)<newline46mondego>-> SurfaceView (which maintains a thread or two for the Physics and Renderer)<newline46mondego>   -> Physics (created by the Activity, passed through a method)<newline46mondego>   -> Renderer (created by the Activity, passed through a method)<newline46mondego>"
"5232splitHere46","3321950splitHere46","String aString = null;<newline46mondego>if(someCondition)<newline46mondego>  aString = <doubleQuotes46>something<doubleQuotes46>;<newline46mondego><newline46mondego>return aString;<newline46mondego>"
"5233splitHere46","3322174splitHere46","\\P{M}"
"5234splitHere46","3322174splitHere46","\\p{M}"
"5235splitHere46","3322367splitHere46","git cvs import"
"5236splitHere46","3322649splitHere46","mvn deploy"
"5237splitHere46","3322649splitHere46","deploy"
"5238splitHere46","3322649splitHere46","deploy"
"5239splitHere46","3322649splitHere46","deploy"
"5240splitHere46","3322649splitHere46","package"
"5241splitHere46","3322649splitHere46","pre-integration-test"
"5242splitHere46","3322649splitHere46","integration-test"
"5243splitHere46","3322649splitHere46","post-integration-test"
"5244splitHere46","3322649splitHere46","pre-integration-test"
"5245splitHere46","3322649splitHere46","post-integration-test"
"5246splitHere46","3322818splitHere46","WakeLock"
"5247splitHere46","3322818splitHere46","WakefulIntentService"
"5248splitHere46","3322829splitHere46","<repositories><newline46mondego>  <repository><newline46mondego>    <id>jboss-public-repository-group</id><newline46mondego>    <name>JBoss Public Repository Group</name><newline46mondego>    <url>https://repository.jboss.org/nexus/content/groups/public</url><newline46mondego>  </repository><newline46mondego></repositories><newline46mondego>"
"5249splitHere46","3322829splitHere46","<dependency><newline46mondego>    <groupId>org.hibernate</groupId><newline46mondego>    <artifactId>hibernate-entitymanager</artifactId><newline46mondego>    <version>3.4.O.GA</version><newline46mondego></dependency><newline46mondego>"
"5250splitHere46","3323096splitHere46","<generator class=<doubleQuotes46>sequence<doubleQuotes46>><newline46mondego>  <param name=<doubleQuotes46>sequence<doubleQuotes46>>employer_id_seq</param><newline46mondego></generator><newline46mondego>"
"5251splitHere46","3323096splitHere46","native"
"5252splitHere46","3323096splitHere46","identity"
"5253splitHere46","3323096splitHere46","table"
"5254splitHere46","3323096splitHere46","<generator class=<doubleQuotes46>table<doubleQuotes46>><newline46mondego></generator><newline46mondego>"
"5255splitHere46","3323299splitHere46","C:\Program Files\Java\jre1.6.0_02\"
"5256splitHere46","3323390splitHere46","new Integer(n)"
"5257splitHere46","3323390splitHere46","Integer.valueOf(n)"
"5258splitHere46","3323390splitHere46","=="
"5259splitHere46","3323390splitHere46","!="
"5260splitHere46","3323390splitHere46","new Integer(n)"
"5261splitHere46","3323390splitHere46","new"
"5262splitHere46","3323390splitHere46","n"
"5263splitHere46","3323390splitHere46","Integer.valueOf(n)"
"5264splitHere46","3323390splitHere46","n"
"5265splitHere46","3323622splitHere46","'ricardo': {<newline46mondego>  'car': null<newline46mondego>}<newline46mondego>"
"5266splitHere46","3323622splitHere46","'ricardo' : {<newline46mondego>  'car' : {<newline46mondego>    'color' : null,<newline46mondego>    'make' : null<newline46mondego>   }<newline46mondego> }<newline46mondego>"
"5267splitHere46","3323622splitHere46","'ricardo' : {<newline46mondego>  'car' : {<newline46mondego>    'color' : 'red',<newline46mondego>    'make' : 'ferrari'<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"5268splitHere46","3323634splitHere46","JVM_InternString"
"5269splitHere46","3323634splitHere46","jvm.cpp"
"5270splitHere46","3323634splitHere46","java/lang/String.c"
"5271splitHere46","3323634splitHere46","JVM_InternString"
"5272splitHere46","3323634splitHere46","StringTable::intern"
"5273splitHere46","3323634splitHere46","symbolTable.cpp"
"5274splitHere46","3323666splitHere46","setIcon()<newline46mondego>setSelectedIcon()<newline46mondego>"
"5275splitHere46","3323870splitHere46","java.util.Date"
"5276splitHere46","3323870splitHere46","long"
"5277splitHere46","3323870splitHere46","DATE"
"5278splitHere46","3323870splitHere46","TIME"
"5279splitHere46","3323870splitHere46","TIMESTAMP"
"5280splitHere46","3323870splitHere46","DATETIME"
"5281splitHere46","3323870splitHere46","java.sql.Date"
"5282splitHere46","3323870splitHere46","java.sql.Time"
"5283splitHere46","3323870splitHere46","java.sql.Timestamp"
"5284splitHere46","3323870splitHere46","java.util.Date"
"5285splitHere46","3323870splitHere46","java.util.Date"
"5286splitHere46","3323870splitHere46","java.sql.Date"
"5287splitHere46","3323870splitHere46","Time"
"5288splitHere46","3323870splitHere46","Timestamp"
"5289splitHere46","3323870splitHere46","java.util.Date"
"5290splitHere46","3323870splitHere46","java.util.Date"
"5291splitHere46","3323870splitHere46","java.sql.Timestamp"
"5292splitHere46","3323870splitHere46","PreparedStatement#setTimestamp()"
"5293splitHere46","3323870splitHere46","java.util.Date date = getItSomehow();<newline46mondego>Timestamp timestamp = new Timestamp(date.getTime());<newline46mondego>preparedStatement = connection.prepareStatement(<doubleQuotes46>SELECT * FROM tbl WHERE ts > ?<doubleQuotes46>);<newline46mondego>preparedStatement.setTimestamp(1, timestamp);<newline46mondego>"
"5294splitHere46","3323870splitHere46","ResultSet#getTimestamp()"
"5295splitHere46","3323870splitHere46","Timestamp timestamp = resultSet.getTimestamp(<doubleQuotes46>ts<doubleQuotes46>);<newline46mondego>java.util.Date date = timestamp; // You can just upcast.<newline46mondego>"
"5296splitHere46","3323872splitHere46","android.os.Looper"
"5297splitHere46","3323872splitHere46","android.os.Handler"
"5298splitHere46","3323872splitHere46","Looper"
"5299splitHere46","3323872splitHere46","Handler"
"5300splitHere46","3323872splitHere46","Looper"
"5301splitHere46","3324014splitHere46","acat"
"5302splitHere46","3324014splitHere46","aCat"
"5303splitHere46","3324051splitHere46","@IdClass"
"5304splitHere46","3324051splitHere46","@EmbeddedId"
"5305splitHere46","3324051splitHere46","EmbeddedId"
"5306splitHere46","3324051splitHere46","EmbeddedId"
"5307splitHere46","3324051splitHere46","IdClass"
"5308splitHere46","3324051splitHere46","EmbeddedId"
"5309splitHere46","3324051splitHere46","// Child entity's composite primary key<newline46mondego>@Embeddable<newline46mondego>public class InstanceNotifyEntityId implements Serializable {<newline46mondego>    Long eaihId;<newline46mondego>    Long userId;<newline46mondego>}<newline46mondego><newline46mondego>// Child entity<newline46mondego>@Entity<newline46mondego>@Table(name=<doubleQuotes46>EIF_INST_NOTIFIED<doubleQuotes46>)<newline46mondego>public class InstanceNotifyEntity implements Serializable {<newline46mondego>    @AttributeOverrides({<newline46mondego>      @AttributeOverride(name=<doubleQuotes46>userId<doubleQuotes46>, @Column(name=<doubleQuotes46>USER_ID<doubleQuotes46>))<newline46mondego>      @AttributeOverride(name=<doubleQuotes46>eaihId<doubleQuotes46>, @Column(name=<doubleQuotes46>EAIH_ID<doubleQuotes46>))<newline46mondego>    })<newline46mondego>    @EmbeddedId<newline46mondego>    InstanceNotifyEntityId id;<newline46mondego><newline46mondego>    @MapsId(<doubleQuotes46>eaihId<doubleQuotes46>)<newline46mondego>    @ManyToOne<newline46mondego>    InstanceEntity instance;<newline46mondego><newline46mondego>    // ...<newline46mondego> }<newline46mondego>"
"5310splitHere46","3324051splitHere46","userDetails"
"5311splitHere46","3324051splitHere46","mappedBy"
"5312splitHere46","3324233splitHere46","private @Autowired HttpServletRequest request;<newline46mondego>"
"5313splitHere46","3324487splitHere46","Bundle parameters = new Bundle();<newline46mondego>parameters.putString(<doubleQuotes46>message<doubleQuotes46>, <doubleQuotes46>this is a test<doubleQuotes46>);// the message to post to the wall<newline46mondego>facebookClient.dialog(this, <doubleQuotes46>stream.publish<doubleQuotes46>, parameters, this);// <doubleQuotes46>stream.publish<doubleQuotes46> is an API call<newline46mondego>"
"5314splitHere46","3324487splitHere46","Bundle parameters = new Bundle();<newline46mondego>parameters.putString(<doubleQuotes46>message<doubleQuotes46>, <doubleQuotes46>Test Photo<doubleQuotes46>);<newline46mondego>parameters.putString(<doubleQuotes46>attachment<doubleQuotes46>, <doubleQuotes46>{\<doubleQuotes46>name\<doubleQuotes46>:\<doubleQuotes46>My Test Image\<doubleQuotes46>,<doubleQuotes46><newline46mondego>+<doubleQuotes46>\<doubleQuotes46>href\<doubleQuotes46>:\<doubleQuotes46><doubleQuotes46>+<doubleQuotes46>http://www.google.com<doubleQuotes46>+<doubleQuotes46>\<doubleQuotes46>,<doubleQuotes46><newline46mondego>+<doubleQuotes46>\<doubleQuotes46>media\<doubleQuotes46>:[{\<doubleQuotes46>type\<doubleQuotes46>:\<doubleQuotes46>image\<doubleQuotes46>,\<doubleQuotes46>src\<doubleQuotes46>:\<doubleQuotes46><doubleQuotes46>+<doubleQuotes46>http://www.google.com/logos/mucha10-hp.jpg<doubleQuotes46>+<doubleQuotes46>\<doubleQuotes46>,\<doubleQuotes46>href\<doubleQuotes46>:\<doubleQuotes46><doubleQuotes46>+<doubleQuotes46>http://www.google.com<doubleQuotes46>+<doubleQuotes46>\<doubleQuotes46>}]<doubleQuotes46><newline46mondego>+<doubleQuotes46>}<doubleQuotes46>);<newline46mondego>facebookClient.dialog(this, <doubleQuotes46>stream.publish<doubleQuotes46>, parameters, this);<newline46mondego>"
"5315splitHere46","3324621splitHere46","(\\p{ASCII}+?)"
"5316splitHere46","3324621splitHere46","(\\p{ASCII}+)"
"5317splitHere46","3324756splitHere46","String.hashCode()"
"5318splitHere46","3324756splitHere46","int"
"5319splitHere46","3324756splitHere46","HashMap"
"5320splitHere46","3324756splitHere46","HashSet"
"5321splitHere46","3324756splitHere46","equals()"
"5322splitHere46","3324813splitHere46","Proxy"
"5323splitHere46","3324972splitHere46","Scenario: dropping the first square<newline46mondego>  Given an empty 10x2 field<newline46mondego><newline46mondego>  When a square is dropped at column 4<newline46mondego>  And 48 frames have passed<newline46mondego><newline46mondego>  Then the field should contain a square at (4, 1)<newline46mondego><newline46mondego>  When 48 frames have passed<newline46mondego>  Then the field should contain a square at (4, 2)<newline46mondego><newline46mondego>Scenario: Dropping a square on a full stack<newline46mondego>  Given an empty 10x2 field<newline46mondego>  And a square at (4, 2)<newline46mondego><newline46mondego>  When a square is dropped at column 4<newline46mondego>  And 48 frames have passed<newline46mondego><newline46mondego>  Then the game should be over<newline46mondego>"
"5324splitHere46","3325014splitHere46","@Entity<newline46mondego>@Table(name = <doubleQuotes46>customer<doubleQuotes46>)<newline46mondego>@SequenceGenerator(name=<doubleQuotes46>seq<doubleQuotes46>, sequenceName=<doubleQuotes46>cust_id_seq<doubleQuotes46>, allocationSize=1)<newline46mondego>public class Customer implements Serializable<newline46mondego>{<newline46mondego><newline46mondego>    @Id<newline46mondego>    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=<doubleQuotes46>seq<doubleQuotes46>)<newline46mondego>    @Column(name=<doubleQuotes46>CUST_ID<doubleQuotes46>)<newline46mondego>    private int id;  <newline46mondego>...<newline46mondego>}<newline46mondego>"
"5325splitHere46","3325242splitHere46","java.util.concurrent"
"5326splitHere46","3325283splitHere46","if (obj instanceof C) {<newline46mondego>   ((C)obj).Foo();<newline46mondego>}<newline46mondego>else {<newline46mondego>   // Recover somehow...<newline46mondego>}<newline46mondego>"
"5327splitHere46","3325283splitHere46","instanceof"
"5328splitHere46","3325623splitHere46","java.awt.BufferedImage"
"5329splitHere46","3325623splitHere46","setRGB(int x, int y, int rgb)"
"5330splitHere46","3325623splitHere46","java.awt.Color"
"5331splitHere46","3325623splitHere46","getRGB()"
"5332splitHere46","3325623splitHere46","int rgb"
"5333splitHere46","3325623splitHere46","setRGB"
"5334splitHere46","3325667splitHere46",">>>"
"5335splitHere46","3325667splitHere46","n>>>s"
"5336splitHere46","3325667splitHere46","n"
"5337splitHere46","3325667splitHere46","s"
"5338splitHere46","3325667splitHere46","n"
"5339splitHere46","3325667splitHere46","n>>s"
"5340splitHere46","3325667splitHere46","n"
"5341splitHere46","3325667splitHere46","(n>>s)+(2<<~s)"
"5342splitHere46","3325667splitHere46","(n>>s)+(2L<<~s)"
"5343splitHere46","3325667splitHere46","(2<<~s)"
"5344splitHere46","3325667splitHere46","(2L<<~s)"
"5345splitHere46","3325670splitHere46","getMatrix"
"5346splitHere46","3325670splitHere46","public class Matrix<T> {<newline46mondego>    private T[][] matrix;<newline46mondego>    public T getMatrix() {return matrix;}<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"5347splitHere46","3325670splitHere46","Matrix<Integer>"
"5348splitHere46","3325670splitHere46","Matrix<Double>"
"5349splitHere46","3325684splitHere46","MathTools"
"5350splitHere46","3325684splitHere46","Pictures"
"5351splitHere46","3325684splitHere46","Spring Break 2009"
"5352splitHere46","3325684splitHere46","[Insert Name Here]'s Party"
"5353splitHere46","3325684splitHere46","java.util"
"5354splitHere46","3325684splitHere46","import java.util.*;"
"5355splitHere46","3325684splitHere46","import java.util.*;"
"5356splitHere46","3325684splitHere46","C:/Program Files/Java Project/my/proj/"
"5357splitHere46","3325684splitHere46","Main.java"
"5358splitHere46","3325684splitHere46","Dice.java"
"5359splitHere46","3325684splitHere46","DiceRoller.java"
"5360splitHere46","3325684splitHere46","Main.java"
"5361splitHere46","3325684splitHere46","package my.proj.main;<newline46mondego><newline46mondego>import my.proj.sims.Dice;<newline46mondego><newline46mondego>public class Main<newline46mondego>{<newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        DiceRoller roller = new DiceRoller();<newline46mondego>        roller.rollAndShow(4);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5362splitHere46","3325684splitHere46","Dice.java"
"5363splitHere46","3325684splitHere46","package my.proj.sims;<newline46mondego><newline46mondego>import java.util.Random; // I used the Random class, but you can also use the Math class if you prefer (java.lang.Math)<newline46mondego><newline46mondego>public class Dice<newline46mondego>{<newline46mondego>    public Dice()<newline46mondego>    {<newline46mondego>    }<newline46mondego><newline46mondego>    public int roll()<newline46mondego>    {<newline46mondego>        Random rand = new Random();    <newline46mondego>        return rand.nextInt(6) + 1; // Rolls a random number 1-6<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5364splitHere46","3325684splitHere46","DiceRoller.java"
"5365splitHere46","3325684splitHere46","package my.proj.sims;<newline46mondego><newline46mondego>public class DiceRoller<newline46mondego>{ <newline46mondego>    public DiceRoller ()<newline46mondego>    {<newline46mondego>    }<newline46mondego><newline46mondego>    // Rolls and prints the result of 'n' number of rolls<newline46mondego>    public void rollAndShow(int n)<newline46mondego>    {<newline46mondego>        Dice dice = new Dice();<newline46mondego><newline46mondego>        for (int i = 0; i < n; i++)<newline46mondego>        {<newline46mondego>            System.out.println(dice.roll()); // You should never use S.o.p in a method - it's bad practice, but it's easier this way if you don't yet understand the concept of objects<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5366splitHere46","3325684splitHere46","Main.java"
"5367splitHere46","3325684splitHere46","my.proj.main"
"5368splitHere46","3325684splitHere46","Dice.java"
"5369splitHere46","3325684splitHere46","my.proj.sims"
"5370splitHere46","3325684splitHere46","Main.java"
"5371splitHere46","3325684splitHere46","my.proj.sims.Dice"
"5372splitHere46","3325684splitHere46","Dice"
"5373splitHere46","3325684splitHere46","Dice.java"
"5374splitHere46","3325684splitHere46","DiceRoller.java"
"5375splitHere46","3325684splitHere46","my.proj.sims.Dice"
"5376splitHere46","3325684splitHere46","Dice.java"
"5377splitHere46","3325684splitHere46","Import"
"5378splitHere46","3325684splitHere46","Dice.java"
"5379splitHere46","3325684splitHere46","Random"
"5380splitHere46","3325684splitHere46","nextInt()"
"5381splitHere46","3325684splitHere46","java.util.*"
"5382splitHere46","3325684splitHere46","java.util.*"
"5383splitHere46","3325684splitHere46","java.util.Random"
"5384splitHere46","3325684splitHere46","java.util.ArrayList"
"5385splitHere46","3325684splitHere46","*"
"5386splitHere46","3325684splitHere46","java.util"
"5387splitHere46","3325684splitHere46","import java.util.*"
"5388splitHere46","3325945splitHere46","@Override<newline46mondego>public void onResume(){<newline46mondego>    super.onResume();<newline46mondego>    // first, check connectivity<newline46mondego>    if ( isOnline ){<newline46mondego>        // do things if it there's network connection<newline46mondego>    }else{<newline46mondego>        // as it seems there's no Internet connection<newline46mondego>        // ask the user to activate it<newline46mondego>        new AlertDialog.Builder(YourActivity.this)<newline46mondego>            .setTitle(<doubleQuotes46>Connection failed<doubleQuotes46>)<newline46mondego>            .setMessage(<doubleQuotes46>This application requires network access. Please, enable <doubleQuotes46> +<newline46mondego>                    <doubleQuotes46>mobile network or Wi-Fi.<doubleQuotes46>)<newline46mondego>            .setPositiveButton(<doubleQuotes46>Accept<doubleQuotes46>, new DialogInterface.OnClickListener() {<newline46mondego>                @Override<newline46mondego>                public void onClick(DialogInterface dialog, int which) {<newline46mondego>                    // THIS IS WHAT YOU ARE DOING, Jul<newline46mondego>                    YourActivity.this.startActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));<newline46mondego>                }<newline46mondego>            })<newline46mondego>            .setNegativeButton(<doubleQuotes46>Cancel<doubleQuotes46>, new DialogInterface.OnClickListener() {<newline46mondego>                @Override<newline46mondego>                public void onClick(DialogInterface dialog, int which) {<newline46mondego>                    YourActivity.this.finish();<newline46mondego>                }<newline46mondego>            })<newline46mondego>            .show();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5389splitHere46","3325945splitHere46","Settings.ACTION_WIRELESS_SETTINGS"
"5390splitHere46","3325945splitHere46","isOnline"
"5391splitHere46","3325945splitHere46","public class CheckConnectivity {<newline46mondego>    public static boolean isOnline(Context context) {<newline46mondego>        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);<newline46mondego>        if( cm == null )<newline46mondego>            return false;<newline46mondego>        NetworkInfo info = cm.getActiveNetworkInfo();<newline46mondego>        if( info == null )<newline46mondego>            return false;<newline46mondego>        return info.isConnectedOrConnecting();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5392splitHere46","3325945splitHere46","AndroidManifest.xml"
"5393splitHere46","3325945splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.ACCESS_NETWORK_STATE<doubleQuotes46> /><newline46mondego>"
"5394splitHere46","3326122splitHere46","org.apache.commons.lang.mutable.MutableInt"
"5395splitHere46","3326173splitHere46","TableModel model = new DefaultTableModel(Status.Data, Status.Columns);<newline46mondego>JTable table = new JTable(model);<newline46mondego>"
"5396splitHere46","3326649splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><LinearLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46> <newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:orientation=<doubleQuotes46>vertical<doubleQuotes46>><newline46mondego><newline46mondego>    <LinearLayout <newline46mondego>        android:orientation=<doubleQuotes46>horizontal<doubleQuotes46><newline46mondego>        android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>><newline46mondego>        <Button <newline46mondego>            android:text=<doubleQuotes46>Button 1<doubleQuotes46><newline46mondego>            android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>></Button><newline46mondego>        <Button <newline46mondego>            android:text=<doubleQuotes46>Button 2<doubleQuotes46><newline46mondego>            android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>></Button><newline46mondego>        <Button <newline46mondego>            android:text=<doubleQuotes46>Button 3<doubleQuotes46><newline46mondego>            android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>></Button><newline46mondego>    </LinearLayout><newline46mondego>    <LinearLayout<newline46mondego>        android:orientation=<doubleQuotes46>horizontal<doubleQuotes46><newline46mondego>        android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>><newline46mondego>        <Button <newline46mondego>            android:text=<doubleQuotes46>Button 4<doubleQuotes46><newline46mondego>            android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>></Button><newline46mondego>        <Button <newline46mondego>            android:text=<doubleQuotes46>Button 5<doubleQuotes46><newline46mondego>            android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>></Button><newline46mondego>        <Button <newline46mondego>            android:text=<doubleQuotes46>Button 6<doubleQuotes46><newline46mondego>            android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46>></Button><newline46mondego>    </LinearLayout><newline46mondego></LinearLayout><newline46mondego>"
"5397splitHere46","3326667splitHere46","StyledText"
"5398splitHere46","3326758splitHere46","class Bar extends  Foo<String> { /* Code */}<newline46mondego>"
"5399splitHere46","3326758splitHere46","public static <T extends Comparable<? super T>> Collection<T> sort(T[] list) {<newline46mondego><newline46mondego>        Collection<T> list = new ArrayList<T>();<newline46mondego><newline46mondego>         //do quicksort<newline46mondego>        Arrays.sort(arr);<newline46mondego><newline46mondego>        Collection<T> list = new ArrayList<T>();<newline46mondego>        int i;<newline46mondego>        for(i=0; i<arr.length-1; i++) {<newline46mondego>            if(arr[i].compareTo(arr[i+1]) != 0) { //if not duplicate, add to the list<newline46mondego>                list.add(arr[i]);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        list.add(arr[i]); //add last element<newline46mondego>//btw how do You know that last is not duplicate <newline46mondego>        return list;<newline46mondego><newline46mondego>}<newline46mondego>"
"5400splitHere46","3326771splitHere46","atan2(oppositesidelength,adjacentsidelength)<newline46mondego>"
"5401splitHere46","3326999splitHere46","hibernate.cfg.xml"
"5402splitHere46","3326999splitHere46","hibernate.properties"
"5403splitHere46","3326999splitHere46","CLASSPATH"
"5404splitHere46","3326999splitHere46","Logger"
"5405splitHere46","3326999splitHere46","log4j.defaultInitOverride"
"5406splitHere46","3326999splitHere46","resource"
"5407splitHere46","3326999splitHere46","log4j.configuration"
"5408splitHere46","3326999splitHere46","log4j.configuration"
"5409splitHere46","3326999splitHere46","log4j.configuration"
"5410splitHere46","3326999splitHere46","resource"
"5411splitHere46","3326999splitHere46","MalformedURLException"
"5412splitHere46","3326999splitHere46","org.apache.log4j.helpers.Loader.getResource(resource,<newline46mondego>  Logger.class)"
"5413splitHere46","3326999splitHere46","Loader.getResource(java.lang.String)"
"5414splitHere46","3326999splitHere46","PropertyConfigurator"
"5415splitHere46","3326999splitHere46","DOMConfigurator"
"5416splitHere46","3326999splitHere46","log4j.configuratorClass"
"5417splitHere46","3326999splitHere46","Configurator"
"5418splitHere46","3327140splitHere46","Integer x = 10;<newline46mondego>int y = x;<newline46mondego>"
"5419splitHere46","3327170splitHere46","public class MultiIterator <T> implements Iterator<T>{<newline46mondego><newline46mondego>    private Iterator<? extends Collection<T>> it;<newline46mondego>    private Iterator<T> innerIt;<newline46mondego>    private T next;<newline46mondego>    private boolean hasNext = true;<newline46mondego><newline46mondego>    public MultiIterator(Collection<? extends Collection<T>> collections) {<newline46mondego>        it = collections.iterator();    <newline46mondego>        prepareNext();<newline46mondego>    }<newline46mondego><newline46mondego>    private void prepareNext() {<newline46mondego>        do {<newline46mondego>            if (innerIt == null || !innerIt.hasNext()) {<newline46mondego>                if (!it.hasNext()) {<newline46mondego>                    hasNext = false;<newline46mondego>                    return;<newline46mondego>                } else<newline46mondego>                    innerIt = it.next().iterator();<newline46mondego>            }<newline46mondego>        } while (!innerIt.hasNext());<newline46mondego><newline46mondego>        next = innerIt.next();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean hasNext() {<newline46mondego>        return hasNext;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public T next() {<newline46mondego>        if (!hasNext)<newline46mondego>            throw new NoSuchElementException();<newline46mondego>        T res = next;<newline46mondego>        prepareNext();<newline46mondego>        return res;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void remove() {<newline46mondego>        //TODO<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5420splitHere46","3327190splitHere46","public class Matrix<E> {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        Integer [][] x = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {0, 1, 0}};<newline46mondego>        Matrix<Integer> y = new Matrix<Integer>(x);<newline46mondego>        System.out.println(y.getRows());<newline46mondego>        System.out.println(y.getColumns());<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>before: <doubleQuotes46> + y);<newline46mondego>        Integer [][] values = y.getMatrix();<newline46mondego>        values[0][0] = 10000;<newline46mondego>        System.out.println(<doubleQuotes46>after : <doubleQuotes46> + y);<newline46mondego>    }<newline46mondego>    private E[][] matrix;<newline46mondego>    public Matrix(E[][] matrix) {this.matrix = matrix;}<newline46mondego>    public E[][] getMatrix() {return matrix;}<newline46mondego>    public int getRows(){return matrix.length;}<newline46mondego>    public int getColumns(){return matrix[0].length;}<newline46mondego>    public String toString()<newline46mondego>    {<newline46mondego>        StringBuilder builder = new StringBuilder(1024);<newline46mondego>        String newline = System.getProperty(<doubleQuotes46>line.separator<doubleQuotes46>);<newline46mondego><newline46mondego>        builder.append('[');<newline46mondego>        for (E [] row : matrix)<newline46mondego>        {<newline46mondego>            builder.append('{');<newline46mondego>            for (E value : row)<newline46mondego>            {<newline46mondego>                builder.append(value).append(' ');<newline46mondego>            }<newline46mondego>            builder.append('}').append(newline);<newline46mondego>        }<newline46mondego>        builder.append(']');<newline46mondego><newline46mondego>        return builder.toString();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5421splitHere46","3327335splitHere46","java.exe"
"5422splitHere46","3327335splitHere46","%windir%\SYSTEM32"
"5423splitHere46","3327335splitHere46","bin"
"5424splitHere46","3327489splitHere46","import"
"5425splitHere46","3327489splitHere46","(import java.util.ArrayList)<newline46mondego><newline46mondego>;// or use a prefix for multiple classes:<newline46mondego>(import [java.util ArrayList Collection])<newline46mondego><newline46mondego>;// or preferably in the ns declaration:<newline46mondego>(ns my.lib<newline46mondego>  [:import [java.util ArrayList Collection]])<newline46mondego><newline46mondego>user=> (def al (ArrayList.))<newline46mondego>#'user/al<newline46mondego>user=> (.add al <doubleQuotes46>hi<doubleQuotes46>)<newline46mondego>true<newline46mondego>user=> (.size al)<newline46mondego>1<newline46mondego>"
"5426splitHere46","3327489splitHere46","import"
"5427splitHere46","3327489splitHere46","import java.util.*;"
"5428splitHere46","3327506splitHere46","$ sudo add-apt-repository <doubleQuotes46>deb http://archive.canonical.com/ lucid partner<doubleQuotes46><newline46mondego>$ sudo apt-get update<newline46mondego>$ sudo apt-get install sun-java6<newline46mondego>"
"5429splitHere46","3327554splitHere46","Connection conn;<newline46mondego>try<newline46mondego>{   <newline46mondego>    // Obtain our environment naming context<newline46mondego>    Context initCtx = new InitialContext();<newline46mondego>    Context envCtx = (Context) initCtx.lookup(<doubleQuotes46>java:comp/env<doubleQuotes46>);<newline46mondego><newline46mondego>    // Look up our data source<newline46mondego>    DataSource ds = (DataSource)<newline46mondego>      envCtx.lookup(<doubleQuotes46>jdbc/NexusIRM<doubleQuotes46>);<newline46mondego><newline46mondego>    // Allocate and use a connection from the pool<newline46mondego>    Connection conn = ds.getConnection();<newline46mondego>    ... use this connection to access the database ...<newline46mondego>}<newline46mondego>finally<newline46mondego>{<newline46mondego>   if(conn != null)<newline46mondego>       conn.close();<newline46mondego>}<newline46mondego>"
"5430splitHere46","3327667splitHere46","delegate"
"5431splitHere46","3327667splitHere46","dispatchDraw"
"5432splitHere46","3327667splitHere46","SmoothCanvas"
"5433splitHere46","3327667splitHere46","delegate"
"5434splitHere46","3327667splitHere46","Canvas"
"5435splitHere46","3327667splitHere46","dispatchDraw"
"5436splitHere46","3327667splitHere46","Canvas"
"5437splitHere46","3327711splitHere46","@RequestMapping(method = RequestMethod.GET)<newline46mondego>"
"5438splitHere46","3327888splitHere46","[a-zA-Z]<newline46mondego>"
"5439splitHere46","3327889splitHere46","project-name<newline46mondego>+- src/<newline46mondego>   +- main/<newline46mondego>      +- java/<newline46mondego>         +- com/example/project-name/<newline46mondego>            +- Java source files<newline46mondego>   +- test/<newline46mondego>      +- tends to mirror above<newline46mondego>+- target/<newline46mondego>   +- classes/<newline46mondego>      +- com/example/project-name/<newline46mondego>         +- Java class files<newline46mondego>   +- test-classes/<newline46mondego>      +- tends to mirror above<newline46mondego>...etc...<newline46mondego>"
"5440splitHere46","3327929splitHere46",".class"
"5441splitHere46","3327929splitHere46","synchronized(YourClass.class) {<newline46mondego>}<newline46mondego>"
"5442splitHere46","3327929splitHere46","synchronized"
"5443splitHere46","3328268splitHere46","pack()"
"5444splitHere46","3328268splitHere46","Unpack()"
"5445splitHere46","3328268splitHere46","$binaryInt = pack('I', $v);<newline46mondego>"
"5446splitHere46","3328310splitHere46","eraseLine"
"5447splitHere46","3328310splitHere46","drawLine"
"5448splitHere46","3328310splitHere46","Runnable"
"5449splitHere46","3328310splitHere46","SwingUtilities.invokeAndWait()"
"5450splitHere46","3328393splitHere46","INSERT INTO othertable<newline46mondego>SELECT col1, col2 FROM table1<newline46mondego>WHERE arg1 = ?<newline46mondego>"
"5451splitHere46","3328465splitHere46","public void GetColorAt(int x, int y) {<newline46mondego>    return Color.Violet;<newline46mondego>}<newline46mondego>"
"5452splitHere46","3328465splitHere46","public class Board<newline46mondego>{<newline46mondego>    private Color theColor;<newline46mondego><newline46mondego>    public Board(int x, int y)<newline46mondego>    {<newline46mondego>    }<newline46mondego><newline46mondego>    public void SetColorAt(int x, int y, Color color) {<newline46mondego>        theColor = color;<newline46mondego>    }<newline46mondego><newline46mondego>    public Color GetColorAt(int x, int y) {<newline46mondego>        return theColor;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5453splitHere46","3328793splitHere46","session.createQuery(<doubleQuotes46>from <doubleQuotes46> + clazz.getName() <doubleQuotes46> where id=:id<doubleQuotes46>).<newline46mondego>        setParameter(<doubleQuotes46>id<doubleQuotes46>, id).<newline46mondego>        uniqueResult();<newline46mondego>"
"5454splitHere46","3328793splitHere46","session.createCriteria(clazz).<newline46mondego>        add(Expression.eq(<doubleQuotes46>id<doubleQuotes46>, id).<newline46mondego>        uniqueResult()<newline46mondego>"
"5455splitHere46","3328871splitHere46","print"
"5456splitHere46","3328871splitHere46","cout"
"5457splitHere46","3328878splitHere46","TestStandardTetris"
"5458splitHere46","3328878splitHere46","StandardTetris"
"5459splitHere46","3328878splitHere46","TestStandardTetris"
"5460splitHere46","3328878splitHere46","StandardTetris"
"5461splitHere46","3328878splitHere46","TestStandardTetris"
"5462splitHere46","3328989splitHere46","fields"
"5463splitHere46","3328989splitHere46","List"
"5464splitHere46","3328989splitHere46","this.fields = fields;<newline46mondego>"
"5465splitHere46","3328989splitHere46","this.fields = new ArrayList<Field>(fields);<newline46mondego>"
"5466splitHere46","3328989splitHere46","this.fields = Collections.unmodifiableList(new ArrayList<Field>(fields));<newline46mondego>"
"5467splitHere46","3328989splitHere46","BigInteger"
"5468splitHere46","3328989splitHere46","get"
"5469splitHere46","3328989splitHere46","get"
"5470splitHere46","3328989splitHere46","private"
"5471splitHere46","3328989splitHere46","of"
"5472splitHere46","3328989splitHere46","private"
"5473splitHere46","3328989splitHere46","addField"
"5474splitHere46","3328989splitHere46","removeField"
"5475splitHere46","3328989splitHere46","equals"
"5476splitHere46","3328989splitHere46","hashCode"
"5477splitHere46","3328989splitHere46","toString"
"5478splitHere46","3329178splitHere46","System.arraycopy"
"5479splitHere46","3329178splitHere46","Arrays"
"5480splitHere46","3329178splitHere46","java.util.Arrays.copyOf"
"5481splitHere46","3329178splitHere46","byte[] src = {1, 2, 3, 4};<newline46mondego> byte[] dst = Arrays.copyOf(src, src.length);<newline46mondego> System.out.println(Arrays.toString(dst));<newline46mondego>"
"5482splitHere46","3329272splitHere46","txt"
"5483splitHere46","3329272splitHere46","pom.xml"
"5484splitHere46","3329413splitHere46","#include <math.h> //for abs<newline46mondego>float dot (vec a, vec b) {<newline46mondego>   return (a.x*b.x + a.y*b.y);<newline46mondego>}<newline46mondego>float lengthcross (vec a, vec b) {<newline46mondego>   return (abs(a.x*b.y - a.y*b.x));<newline46mondego>}<newline46mondego>...<newline46mondego>do stuff<newline46mondego>...<newline46mondego>float sum1=0;<newline46mondego>float sum2=0;<newline46mondego>for (int n=0;n<N;++n)  { //equivalent of the Σ<newline46mondego>   sum1 += lengthcross(P[n+1],P[n])* <newline46mondego>           (dot(P[n+1],P[n+1]) + dot(P[n+1],P[n]) + dot(P[n],P[n]));<newline46mondego>   sum2 += lengthcross(P[n+1],P[n]);<newline46mondego>}<newline46mondego>return (m/6*sum1/sum2);<newline46mondego>"
"5485splitHere46","3329435splitHere46","for (char c : sentence.toCharArray()) {<newline46mondego>    System.err.println(<doubleQuotes46>char '<doubleQuotes46> + ch + <doubleQuotes46>' is unicode codepoint <doubleQuotes46> + ((int) ch)));<newline46mondego>}<newline46mondego>"
"5486splitHere46","3329477splitHere46","abstract"
"5487splitHere46","3329477splitHere46","@Override"
"5488splitHere46","3329477splitHere46","@Override"
"5489splitHere46","3329477splitHere46","@Override"
"5490splitHere46","3329513splitHere46","<appender...><newline46mondego>    <rollingPolicy class=<doubleQuotes46>org.apache.log4j.rolling.TimeBasedRollingPolicy<doubleQuotes46>><newline46mondego>      <param name=<doubleQuotes46>FileNamePattern<doubleQuotes46> value=<doubleQuotes46>/wombat/foo.%d{yyyy-MM}**.gz**<doubleQuotes46>/><newline46mondego>    </rollingPolicy><newline46mondego></appender><newline46mondego>"
"5491splitHere46","3329629splitHere46","@JsonIgnore"
"5492splitHere46","3329853splitHere46","while ((line = in.readLine()).length()>1) <newline46mondego>"
"5493splitHere46","3329942splitHere46","this.getErrorproperties().load(getClass().getResourceAsStream(<doubleQuotes46>/foo/bar/error.properties<doubleQuotes46>))<newline46mondego>"
"5494splitHere46","3330429splitHere46","Derived"
"5495splitHere46","3330429splitHere46","var"
"5496splitHere46","3330429splitHere46","isMutable()"
"5497splitHere46","3330440splitHere46","java.util.concurrent"
"5498splitHere46","3330440splitHere46","Executor"
"5499splitHere46","3330440splitHere46","ConcurrentLinkedQueue"
"5500splitHere46","3330440splitHere46","TimeUnit"
"5501splitHere46","3330440splitHere46","Semaphore"
"5502splitHere46","3330440splitHere46","CountDownLatch"
"5503splitHere46","3330440splitHere46","ConcurrentHashMap"
"5504splitHere46","3330440splitHere46","CopyOnWriteArrayList"
"5505splitHere46","3330440splitHere46","CopyOnWriteArraySet"
"5506splitHere46","3330440splitHere46","int n = Runtime.getRuntime().availableProcessors();<newline46mondego>"
"5507splitHere46","3330520splitHere46","@Inject"
"5508splitHere46","3330685splitHere46","@Configuration"
"5509splitHere46","3330685splitHere46","@Bean"
"5510splitHere46","3330685splitHere46","public class Foo {<newline46mondego>    @Value(<doubleQuotes46>Hello, world!<doubleQuotes46>)<newline46mondego>    public String value;<newline46mondego>}<newline46mondego><newline46mondego>@Configuration<newline46mondego>public class Config {<newline46mondego>    @Bean<newline46mondego>    public Foo createFoo() {<newline46mondego>        Foo foo = new Foo();<newline46mondego>        System.out.println(foo.value); // Prints null - foo not initialized yet<newline46mondego>        return foo;<newline46mondego>    }<newline46mondego><newline46mondego>    @Bean<newline46mondego>    public Bar createBar() {<newline46mondego>        Foo foo = createFoo();<newline46mondego>        System.out.println(foo.value); // Prints Hello, world! - foo have been initialized by the interceptor<newline46mondego>        return new Bar(foo);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5511splitHere46","3330760splitHere46","searchable.xml"
"5512splitHere46","3330824splitHere46","SET"
"5513splitHere46","3330824splitHere46","PreparedStatement#setTimestamp()"
"5514splitHere46","3330876splitHere46","#line"
"5515splitHere46","3330884splitHere46","Integer#set(i)"
"5516splitHere46","3330884splitHere46","inc()"
"5517splitHere46","3330884splitHere46","integer = inc(integer);<newline46mondego>"
"5518splitHere46","3330884splitHere46","public static void main(String... args) {<newline46mondego>    String[] strings = new String[] { <doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>bar<doubleQuotes46> };<newline46mondego>    changeReference(strings);<newline46mondego>    System.out.println(Arrays.toString(strings)); // still [foo, bar]<newline46mondego>    changeValue(strings);<newline46mondego>    System.out.println(Arrays.toString(strings)); // [foo, foo]<newline46mondego>}<newline46mondego>public static void changeReference(String[] strings) {<newline46mondego>    strings = new String[] { <doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>foo<doubleQuotes46> };<newline46mondego>}<newline46mondego>public static void changeValue(String[] strings) {<newline46mondego>    strings[1] = <doubleQuotes46>foo<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"5519splitHere46","3331082splitHere46","Application.OnTime"
"5520splitHere46","3331082splitHere46","Private Sub Workbook_Open()<newline46mondego>  Application.OnTime Now + TimeValue(<doubleQuotes46>00:15:00<doubleQuotes46>), <doubleQuotes46>MyMacro<doubleQuotes46><newline46mondego>End Sub<newline46mondego>"
"5521splitHere46","3331121splitHere46","<span>Car Id:</span>${car.id?c}<newline46mondego>"
"5522splitHere46","3331169splitHere46","public interface BeanDao<newline46mondego>{<newline46mondego>    List<Bean> findAllByFilter(BeanFilter filter);<newline46mondego>}<newline46mondego>"
"5523splitHere46","3331775splitHere46","<target name=<doubleQuotes46>-post-compile<doubleQuotes46>>   <newline46mondego>    <exec dir=<doubleQuotes46>.<doubleQuotes46> executable=<doubleQuotes46>cmd<doubleQuotes46>><newline46mondego>          <arg line=<doubleQuotes46>/c DatabaseInitializer.bat<doubleQuotes46>/><newline46mondego>    </exec><newline46mondego></target><newline46mondego>"
"5524splitHere46","3331781splitHere46","label.setMinimumSize(new Dimension(width, height))"
"5525splitHere46","3331800splitHere46","List"
"5526splitHere46","3331800splitHere46","add()"
"5527splitHere46","3331800splitHere46","List<BigInteger> list = new ArrayList<BigInteger>();<newline46mondego>list.add(new BigInteger(<doubleQuotes46>12345<doubleQuotes46>));<newline46mondego>list.add(new BigInteger(<doubleQuotes46>23456<doubleQuotes46>));<newline46mondego>"
"5528splitHere46","3331800splitHere46","List"
"5529splitHere46","3331800splitHere46","List<BigInteger> list = new ArrayList<BigInteger>() {{<newline46mondego>  add(new BigInteger(<doubleQuotes46>12345<doubleQuotes46>));<newline46mondego>  add(new BigInteger(<doubleQuotes46>23456<doubleQuotes46>));<newline46mondego>}};<newline46mondego>"
"5530splitHere46","3331800splitHere46","ArrayList"
"5531splitHere46","3331800splitHere46","Comparator"
"5532splitHere46","3331800splitHere46","equals()"
"5533splitHere46","3331800splitHere46","Arrays.asList()"
"5534splitHere46","3331800splitHere46","List<BigInteger> list = new ArrayList<BigInteger>(Arrays.asList(<newline46mondego>  new BigInteger(<doubleQuotes46>12345<doubleQuotes46>),<newline46mondego>  new BigInteger(<doubleQuotes46>23456<doubleQuotes46>)<newline46mondego>));<newline46mondego>"
"5535splitHere46","3331800splitHere46","ArrayList"
"5536splitHere46","3331800splitHere46","List<BigInteger> list = Arrays.asList(<newline46mondego>  new BigInteger(<doubleQuotes46>12345<doubleQuotes46>),<newline46mondego>  new BigInteger(<doubleQuotes46>23456<doubleQuotes46>)<newline46mondego>);<newline46mondego>"
"5537splitHere46","3331800splitHere46","Collection"
"5538splitHere46","3331800splitHere46","List<BigInteger> list = [new BigInteger(<doubleQuotes46>12345<doubleQuotes46>), new BigInteger(<doubleQuotes46>23456<doubleQuotes46>)];<newline46mondego>"
"5539splitHere46","3331873splitHere46","pattern = <doubleQuotes46>private\\s*static(?!\\s*final)<doubleQuotes46>;<newline46mondego>"
"5540splitHere46","3331954splitHere46","@Column(nullable=false)"
"5541splitHere46","3331954splitHere46","optional=false"
"5542splitHere46","3331968splitHere46","@RequestMapping(<doubleQuotes46>/owners/{ownerId}/pets/new<doubleQuotes46>)<newline46mondego>@PreAuthorize(<doubleQuotes46>#ownerId == principal.id)<doubleQuotes46>)<newline46mondego>public void doSomething(@RequestParam Number ownerId);<newline46mondego>"
"5543splitHere46","3331991splitHere46","public static int lookupReferenceInTable (String instanceMode, String instanceTID){<newline46mondego>        int ModeMatches[]=getReferencesToMode(Integer.parseInt(instanceMode));<newline46mondego>        int lineLookup = getReferenceFromPossibleMatches(ModeMatches, instanceTID);<newline46mondego>        return lineLookup;<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>        private static int getReferenceFromPossibleMatches(int[] ModeMatches, String instanceTID) {<newline46mondego>      int counter = 0;<newline46mondego>      int match = 0;<newline46mondego>      instanceTID=instanceTID.trim();<newline46mondego>      while ( counter < ModeMatches.length ){<newline46mondego>         int x = ModeMatches[counter];<newline46mondego>         if (Data[x][DataTestID].equals(instanceTID)){<newline46mondego>         return ModeMatches[counter];<newline46mondego>         }<newline46mondego>         counter ++ ;<newline46mondego>      }<newline46mondego>      return match;<newline46mondego><newline46mondego>    }<newline46mondego>"
"5544splitHere46","3332103splitHere46","UnknownHostException"
"5545splitHere46","3332103splitHere46","} catch (Exception e) {<newline46mondego>    logger.error(<doubleQuotes46>Caught Exception in login(): <doubleQuotes46> + e.getClass().getName() + <doubleQuotes46>: <doubleQuotes46> + e.getMessage());<newline46mondego>}<newline46mondego>"
"5546splitHere46","3332103splitHere46","Throwable#toString()"
"5547splitHere46","3332103splitHere46","} catch (Exception e) {<newline46mondego>    logger.error(<doubleQuotes46>Caught Exception in login(): <doubleQuotes46> + e);<newline46mondego>}<newline46mondego>"
"5548splitHere46","3332103splitHere46","} catch (Exception e) {<newline46mondego>    logger.error(<doubleQuotes46>Caught Exception in login(): <doubleQuotes46> + e.getMessage(), e);<newline46mondego>}<newline46mondego>"
"5549splitHere46","3332103splitHere46","} catch (ClientTransportException e) {<newline46mondego>    if (e.getCause() instanceof UnknownHostException) {<newline46mondego>        // UHE.<newline46mondego>    } else {<newline46mondego>        // Other.<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5550splitHere46","3332175splitHere46","<servlet><newline46mondego>    <servlet-name>BMA</servlet-name><newline46mondego>    <servlet-class><newline46mondego>       org.springframework.web.servlet.DispatcherServlet<newline46mondego>    </servlet-class><newline46mondego>    <load-on-startup>2</load-on-startup><newline46mondego>  </servlet><newline46mondego><newline46mondego>  <servlet-mapping><newline46mondego>    <servlet-name>BMA</servlet-name><newline46mondego>    <url-pattern>/bma/*</url-pattern><newline46mondego>  </servlet-mapping><newline46mondego>"
"5551splitHere46","3332175splitHere46","@RequestMapping(value = <doubleQuotes46>/planner/plan/{planId}/delete<doubleQuotes46>, method = RequestMethod.GET)<newline46mondego>public ModelAndView deletePlanConfirm(HttpServletRequest request,  <newline46mondego>       @PathVariable(<doubleQuotes46>planId<doubleQuotes46>)   Long planId)   {}<newline46mondego>"
"5552splitHere46","3332175splitHere46","http://localhost:8080/bma/planner/plan/1223/delete<newline46mondego>"
"5553splitHere46","3332434splitHere46","Class.forName(<doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46>).newInstance();<newline46mondego>"
"5554splitHere46","3332434splitHere46","con = DriverManager.getConnection(url, user, pwd);<newline46mondego>"
"5555splitHere46","3332459splitHere46","putMethod.setEntity(...)"
"5556splitHere46","3332459splitHere46","putMethod.addHeader(...)"
"5557splitHere46","3332517splitHere46","File.list()"
"5558splitHere46","3332517splitHere46","pathName.list();"
"5559splitHere46","3332517splitHere46","pathName"
"5560splitHere46","3333029splitHere46","Runtime.exec"
"5561splitHere46","3333029splitHere46","Process"
"5562splitHere46","3333029splitHere46","Runtime.getRuntime().exec(someCommand)"
"5563splitHere46","3333029splitHere46","String[]"
"5564splitHere46","3333029splitHere46","Process"
"5565splitHere46","3333029splitHere46","Process"
"5566splitHere46","3333029splitHere46","waitFor()"
"5567splitHere46","3333029splitHere46","Process"
"5568splitHere46","3333029splitHere46","interface JavaCompiler"
"5569splitHere46","3333029splitHere46","package javax.tools"
"5570splitHere46","3333058splitHere46","final ExecutorService executor;<newline46mondego><newline46mondego>Runtime.getRuntime().addShutdownHook(new Thread() {<newline46mondego>    public void run() {<newline46mondego>        executor.shutdown();<newline46mondego>        if (!executor.awaitTermination(SHUTDOWN_TIME)) { //optional *<newline46mondego>            Logger.log(<doubleQuotes46>Executor did not terminate in the specified time.<doubleQuotes46>); //optional *<newline46mondego>            List<Runnable> droppedTasks = executor.shutdownNow(); //optional **<newline46mondego>            Logger.log(<doubleQuotes46>Executor was abruptly shut down. <doubleQuotes46> + droppedTasks.size() + <doubleQuotes46> tasks will not be executed.<doubleQuotes46>); //optional **<newline46mondego>        }<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"5571splitHere46","3333161splitHere46","<% ... %>"
"5572splitHere46","3333161splitHere46","service()"
"5573splitHere46","3333161splitHere46","<%! ... %>"
"5574splitHere46","3333161splitHere46","service()"
"5575splitHere46","3333161splitHere46","<% ... %>"
"5576splitHere46","3333488splitHere46","Calendar day= new GregorianCalendar(2010, Calendar.JULY, 1);<newline46mondego>int dayOfWeek = day.get(Calendar.DAY_OF_WEEK); // 5=Thursday<newline46mondego>"
"5577splitHere46","3333692splitHere46","white-space"
"5578splitHere46","3333692splitHere46","white-space: pre<newline46mondego>"
"5579splitHere46","3333692splitHere46","<font color=<doubleQuotes46>#000000<doubleQuotes46> style=<doubleQuotes46>white-space:pre<doubleQuotes46>>A B  C   D</font><newline46mondego>"
"5580splitHere46","3333696splitHere46","sp.setBorder(createEmptyBorder());<newline46mondego>"
"5581splitHere46","3333696splitHere46","public static void main(String[] args) {<newline46mondego>    JFrame frame = new TestScrollPane();<newline46mondego>    JPanel panel = new JPanel();<newline46mondego>    JTable table = new JTable();<newline46mondego><newline46mondego>    panel.setLayout(new BorderLayout());<newline46mondego>    panel.add(new JLabel(<doubleQuotes46>NORTH<doubleQuotes46>), BorderLayout.NORTH);<newline46mondego>    panel.add(new JLabel(<doubleQuotes46>SOUTH<doubleQuotes46>), BorderLayout.SOUTH);<newline46mondego><newline46mondego>    JScrollPane sp = new JScrollPane(table);<newline46mondego>    sp.setBorder(BorderFactory.createEmptyBorder());<newline46mondego>    panel.add(sp, BorderLayout.CENTER);<newline46mondego>    frame.add(panel);<newline46mondego><newline46mondego>    frame.setVisible(true);<newline46mondego>}<newline46mondego>"
"5582splitHere46","3333989splitHere46","Class.getDeclaredFields()"
"5583splitHere46","3333989splitHere46","Field"
"5584splitHere46","3333989splitHere46","import java.lang.reflect.*;<newline46mondego><newline46mondego>public class DumpFields {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        inspect(String.class);<newline46mondego>    }<newline46mondego>    static <T> void inspect(Class<T> klazz) {<newline46mondego>        Field[] fields = klazz.getDeclaredFields();<newline46mondego>        System.out.printf(<doubleQuotes46>%d fields:%n<doubleQuotes46>, fields.length);<newline46mondego>        for (Field field : fields) {<newline46mondego>            System.out.printf(<doubleQuotes46>%s %s %s%n<doubleQuotes46>,<newline46mondego>                Modifier.toString(field.getModifiers()),<newline46mondego>                field.getType().getSimpleName(),<newline46mondego>                field.getName()<newline46mondego>            );<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5585splitHere46","3333989splitHere46","class String"
"5586splitHere46","3333989splitHere46","7 fields:<newline46mondego>private final char[] value<newline46mondego>private final int offset<newline46mondego>private final int count<newline46mondego>private int hash<newline46mondego>private static final long serialVersionUID<newline46mondego>private static final ObjectStreamField[] serialPersistentFields<newline46mondego>public static final Comparator CASE_INSENSITIVE_ORDER<newline46mondego>"
"5587splitHere46","3333989splitHere46","Class"
"5588splitHere46","3333989splitHere46","Constructor"
"5589splitHere46","3333989splitHere46","Method"
"5590splitHere46","3333989splitHere46","Field"
"5591splitHere46","3334101splitHere46","public static String getCharacterDataFromElement(Element e) {<newline46mondego>    Node child = e.getFirstChild();<newline46mondego>    if (child instanceof CharacterData) {<newline46mondego>      CharacterData cd = (CharacterData) child;<newline46mondego>      return cd.getData();<newline46mondego>    }<newline46mondego>    return <doubleQuotes46><doubleQuotes46>;<newline46mondego>  } <newline46mondego>"
"5592splitHere46","3334190splitHere46","double"
"5593splitHere46","3334190splitHere46","double"
"5594splitHere46","3334190splitHere46","double"
"5595splitHere46","3334190splitHere46","Double.toString()"
"5596splitHere46","3334332splitHere46","application-context.xml"
"5597splitHere46","3334332splitHere46","springapp-servlet.xml"
"5598splitHere46","3334332splitHere46","application-context.xml"
"5599splitHere46","3334332splitHere46","springapp-servlet.xml"
"5600splitHere46","3334369splitHere46","public class TableEditorTest {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        Object[][] data = new Object[][] {{<doubleQuotes46>Identifier<doubleQuotes46>, <doubleQuotes46>ST33442<doubleQuotes46>}, {<doubleQuotes46>Purchase Date<doubleQuotes46>, new Date()}, {<doubleQuotes46>Status<doubleQuotes46>, Boolean.FALSE}};<newline46mondego>        String[] columnNames = new String[] {<doubleQuotes46>Name<doubleQuotes46>, <doubleQuotes46>Value<doubleQuotes46>};<newline46mondego>        TableModel model = new DefaultTableModel(data, columnNames);<newline46mondego>        JTable table = new JTable(model);<newline46mondego>        JScrollPane scrollPane = new JScrollPane(table);<newline46mondego>        JFrame frame = new JFrame();<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        frame.getContentPane().add(scrollPane);<newline46mondego>        frame.pack();<newline46mondego>        frame.setVisible(true);<newline46mondego><newline46mondego>        table.getColumnModel().getColumn(1).setCellEditor(new CustomTableCellEditor());<newline46mondego>    }<newline46mondego><newline46mondego>    public static class CustomTableCellEditor extends AbstractCellEditor implements TableCellEditor {<newline46mondego>        private TableCellEditor editor;<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Object getCellEditorValue() {<newline46mondego>            if (editor != null) {<newline46mondego>                return editor.getCellEditorValue();<newline46mondego>            }<newline46mondego><newline46mondego>            return null;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {<newline46mondego>            if (value instanceof Date) {<newline46mondego>                editor = new DatePickerCellEditor();<newline46mondego>            } else if (value instanceof String) {<newline46mondego>                editor = new DefaultCellEditor(new JTextField());<newline46mondego>            } else if (value instanceof Boolean) {<newline46mondego>                editor = new DefaultCellEditor(new JCheckBox());<newline46mondego>            }<newline46mondego><newline46mondego>            return editor.getTableCellEditorComponent(table, value, isSelected, row, column);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5601splitHere46","3334369splitHere46","DatePickerCellEditor"
"5602splitHere46","3334434splitHere46","public void startEngine(){<newline46mondego>   injectFuel();<newline46mondego>   igniteSpark();<newline46mondego>   // etc. my understanding of engines is limited at best<newline46mondego>   System.out.println(<doubleQuotes46>Start Engine<doubleQuotes46>);<newline46mondego> }<newline46mondego><newline46mondego> private void injectFuel() {}<newline46mondego> private void igniteSpark() {}<newline46mondego>"
"5603splitHere46","3334434splitHere46","public void startEngine() {<newline46mondego>   dishargeBattery(50);<newline46mondego>   System.out.println(<doubleQuotes46>Start Engine<doubleQuotes46>);<newline46mondego> }<newline46mondego><newline46mondego> public void startRadio() {<newline46mondego>   dischargeBattery(20);<newline46mondego> }<newline46mondego><newline46mondego> private void dischargeBattery(int value) {<newline46mondego>   battery.energy -= value; //battery should probably be a private field.<newline46mondego> }<newline46mondego>"
"5604splitHere46","3334434splitHere46","battery.energy -= value"
"5605splitHere46","3334767splitHere46","itoa()"
"5606splitHere46","3334767splitHere46","array [ getY ( number, SIDE ) ] [ getX ( number, SIDE ) ] = number ;<newline46mondego>"
"5607splitHere46","3334767splitHere46","array[number / SIDE][number % SIDE] = number;<newline46mondego>"
"5608splitHere46","3334767splitHere46","getX"
"5609splitHere46","3334767splitHere46","getY"
"5610splitHere46","3334767splitHere46","sprintf()"
"5611splitHere46","3334767splitHere46","*"
"5612splitHere46","3334792splitHere46","session.beginTransaction();"
"5613splitHere46","3334792splitHere46","stats"
"5614splitHere46","3334792splitHere46","for"
"5615splitHere46","3334792splitHere46","StatUser"
"5616splitHere46","3334812splitHere46","setAutoCommit(false)"
"5617splitHere46","3334812splitHere46","Connection"
"5618splitHere46","3334812splitHere46","Connection"
"5619splitHere46","3334812splitHere46","commit()"
"5620splitHere46","3334812splitHere46","Connection"
"5621splitHere46","3334812splitHere46","Connection"
"5622splitHere46","3334812splitHere46","ThreadLocal"
"5623splitHere46","3334812splitHere46","PreparedStatement"
"5624splitHere46","3334899splitHere46","FileOutputStream"
"5625splitHere46","3334899splitHere46","PrintWriter"
"5626splitHere46","3334899splitHere46","PrintWriter pw = null;<newline46mondego><newline46mondego>Process proc = Runtime.getRuntime().exec(externalProgram);<newline46mondego><newline46mondego>InputStreamReader isr = new InputStreamReader(proc.getErrorStream());<newline46mondego>BufferedReader br = new BufferedReader(isr);<newline46mondego>String line;<newline46mondego>while ( (line = br.readLine()) != null)<newline46mondego>{<newline46mondego>   if (pw == null)<newline46mondego>   {<newline46mondego>      pw = new PrintWriter(new FileOutputStream(logFile));<newline46mondego>   }<newline46mondego>   pw.println(line);<newline46mondego>   pw.flush(); <newline46mondego>}<newline46mondego>"
"5627splitHere46","3334899splitHere46","PrintWriter"
"5628splitHere46","3334899splitHere46","OutputStreamWriter"
"5629splitHere46","3334954splitHere46","CMSClassUnloadingEnabled"
"5630splitHere46","3334954splitHere46","UseConcMarkSweepGC"
"5631splitHere46","3335062splitHere46","Object id = entityManagerFactory.getPersistenceUnitUtil().getIdentifier(entity);<newline46mondego>"
"5632splitHere46","3335346splitHere46","HandlerInterceptor"
"5633splitHere46","3335346splitHere46","preHandle()"
"5634splitHere46","3335346splitHere46","postHandle()"
"5635splitHere46","3335346splitHere46","ModelAndView"
"5636splitHere46","3335452splitHere46","enum"
"5637splitHere46","3335452splitHere46","this"
"5638splitHere46","3335452splitHere46","enum"
"5639splitHere46","3335452splitHere46","class"
"5640splitHere46","3335452splitHere46","class"
"5641splitHere46","3335452splitHere46","class"
"5642splitHere46","3335452splitHere46","enum"
"5643splitHere46","3335452splitHere46","values()"
"5644splitHere46","3335452splitHere46","EnumMap"
"5645splitHere46","3335452splitHere46","Map"
"5646splitHere46","3335452splitHere46","enum"
"5647splitHere46","3335452splitHere46","enum"
"5648splitHere46","3335452splitHere46","static"
"5649splitHere46","3335452splitHere46","enum"
"5650splitHere46","3335452splitHere46","Map"
"5651splitHere46","3335452splitHere46","enum"
"5652splitHere46","3335452splitHere46","EnumSet"
"5653splitHere46","3335452splitHere46","EnumMap"
"5654splitHere46","3335452splitHere46","enum"
"5655splitHere46","3335468splitHere46","SHCAMERACAPTURE shcc;<newline46mondego>ZeroMemory(&shcc, sizeof(shcc));<newline46mondego>shcc.cbSize = sizeof(shcc);<newline46mondego>shcc.pszInitialDir = (TCHAR*)(jEnv)->GetStringChars(dirName, 0 ); <newline46mondego>shcc.pszDefaultFileName = (TCHAR*)(jEnv)->GetStringChars(defFileName, 0 );<newline46mondego>"
"5656splitHere46","3335769splitHere46","package com.example.test;<newline46mondego><newline46mondego>import java.io.DataInputStream;<newline46mondego>import java.io.IOException;<newline46mondego>import java.net.MalformedURLException;<newline46mondego>import java.net.URL;<newline46mondego>import java.net.URLConnection;<newline46mondego>import java.util.Iterator;<newline46mondego>import java.util.List;<newline46mondego>import java.util.Map;<newline46mondego>import java.util.Map.Entry;<newline46mondego><newline46mondego><newline46mondego>public class SSLTEST {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        try {<newline46mondego>            URL url = new URL(<doubleQuotes46>https://test.example.com/robots.txt<doubleQuotes46>);<newline46mondego>            URLConnection connection = null;<newline46mondego>            try {<newline46mondego>                connection = url.openConnection();<newline46mondego>            } catch (IOException e) {<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>            Map<String, List<String>> fields = connection.getHeaderFields();<newline46mondego>            Iterator<Entry<String, List<String>>> headerIterator = fields.entrySet().iterator();<newline46mondego>            System.out.println(<doubleQuotes46>HEADERS<doubleQuotes46>);<newline46mondego>            System.out.println(<doubleQuotes46>-------------------------------<doubleQuotes46>);<newline46mondego>            while (headerIterator.hasNext()){<newline46mondego>                Entry<String, List<String>> header = headerIterator.next();<newline46mondego>                System.out.println(header.getKey()+<doubleQuotes46> :<doubleQuotes46>);<newline46mondego>                Iterator<String> valueIterator = header.getValue().iterator();<newline46mondego>                while (valueIterator.hasNext()){<newline46mondego>                    System.out.println(<doubleQuotes46>\t<doubleQuotes46>+valueIterator.next());<newline46mondego>                }<newline46mondego><newline46mondego>            }<newline46mondego><newline46mondego>            String inputLine;<newline46mondego>            DataInputStream input = new DataInputStream(connection.getInputStream());<newline46mondego>            System.out.println(<doubleQuotes46>BODY CONTENT<doubleQuotes46>);<newline46mondego>            System.out.println(<doubleQuotes46>-------------------------------<doubleQuotes46>);<newline46mondego>            while ((inputLine = input.readLine()) != null) {<newline46mondego>                System.out.println(inputLine);<newline46mondego>            }<newline46mondego><newline46mondego><newline46mondego>        } catch (MalformedURLException e) {<newline46mondego>            System.err.println(e);<newline46mondego>        } catch (IOException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5657splitHere46","3335775splitHere46","public class GenericTree<T extends GenericTree<T, P, C>, P extends GenericTree<P, ?, T>, C extends GenericTree<C, T, ?>> {<newline46mondego><newline46mondego>    // Attributes<newline46mondego>    private ArrayList<C> children = new ArrayList<C>();<newline46mondego>    private P parent = null;<newline46mondego><newline46mondego>    // Methods<newline46mondego>    public void setParent(P parent) {<newline46mondego>        this.parent = parent;<newline46mondego>    }<newline46mondego><newline46mondego>    public void addChild(C child) {<newline46mondego>        @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>        final T thisAsType = (T) this;<newline46mondego>        child.setParent(thisAsType);<newline46mondego>        this.children.add(child);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5658splitHere46","3335775splitHere46","public static class SingleTypeTree<T> extends<newline46mondego>    GenericTree<SingleTypeTree<T>, SingleTypeTree<T>, SingleTypeTree<T>> {<newline46mondego><newline46mondego>}<newline46mondego>"
"5659splitHere46","3335867splitHere46","alert()"
"5660splitHere46","3335867splitHere46","<c:if>"
"5661splitHere46","3336510splitHere46","oldCapacity + 50"
"5662splitHere46","3336617splitHere46","Image img = Toolkit.getDefaultToolkit().getImage(url);<newline46mondego>sb.append(line + <doubleQuotes46>,<doubleQuotes46>+ img.getHeight(null) + <doubleQuotes46>,<doubleQuotes46> + img.getWidth(Null) + newline);<newline46mondego>"
"5663splitHere46","3336617splitHere46","ImageIcon img = new ImageIcon(url);<newline46mondego>sb.append(line + <doubleQuotes46>,<doubleQuotes46>+ img.getIconHeight(null) + <doubleQuotes46>,<doubleQuotes46> + img.getIconWidth(Null) + newline);<newline46mondego>"
"5664splitHere46","3336617splitHere46","ImageIcon"
"5665splitHere46","3336617splitHere46","getIconWidth"
"5666splitHere46","3336617splitHere46","getIconHeight"
"5667splitHere46","3336731splitHere46","<a href=<doubleQuotes46>foo.html<doubleQuotes46>>link</a>"
"5668splitHere46","3336790splitHere46","c:if"
"5669splitHere46","3336790splitHere46","<c:if test=<doubleQuotes46>${person.role=='DRIVER'}<doubleQuotes46>><newline46mondego>"
"5670splitHere46","3336851splitHere46","xjc"
"5671splitHere46","3336903splitHere46","var windowdirty = false;<newline46mondego>var windowdirtyinitialized = false;<newline46mondego><newline46mondego>function initwindowdirty(){<newline46mondego>    if(windowdirtyinitialized)return;<newline46mondego>    windowdirtyinitialized=true;<newline46mondego><newline46mondego>    Event.observe(window,<doubleQuotes46>beforeunload<doubleQuotes46>,function(){<newline46mondego>        return (!windowdirty || <newline46mondego>          confirm(<doubleQuotes46>You have started entering values, do you really want to leave<doubleQuotes46>);<newline46mondego>    });<newline46mondego>}<newline46mondego><newline46mondego>function monitor(componentId){<newline46mondego>    $(componentId).observe(<doubleQuotes46>change<doubleQuotes46>,function(){<newline46mondego>        windowdirty = true;<newline46mondego>    });<newline46mondego>}<newline46mondego><newline46mondego>function undirty(){<newline46mondego>    windowdirty=false;<newline46mondego>}<newline46mondego>"
"5672splitHere46","3336903splitHere46","public class DontLeaveBehavior extends AbstractBehavior{<newline46mondego><newline46mondego>    /**<newline46mondego>     * {@inheritDoc}<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    public void renderHead(final IHeaderResponse response){<newline46mondego>        response.renderJavascriptReference(new JavascriptResourceReference(DontLeaveBehavior.class,<newline46mondego>            <doubleQuotes46>DontLeaveBehavior.js<doubleQuotes46>));<newline46mondego>        response.renderOnDomReadyJavascript(<doubleQuotes46>initwindowdirty();<doubleQuotes46>);<newline46mondego>        super.renderHead(response);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * {@inheritDoc}<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    public void bind(final Component component){<newline46mondego>        super.bind(component);<newline46mondego>        component.setOutputMarkupId(true);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * {@inheritDoc}<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    public void onRendered(final Component component){<newline46mondego>        final Response response = RequestCycle.get().getResponse();<newline46mondego>        response.write(JavascriptUtils.SCRIPT_OPEN_TAG);<newline46mondego>        response.write(<doubleQuotes46>monitor('<doubleQuotes46> + component.getMarkupId() + <doubleQuotes46>');<doubleQuotes46>);<newline46mondego>        response.write(JavascriptUtils.SCRIPT_CLOSE_TAG);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5673splitHere46","3336903splitHere46","public class Mypage extends WebPage{<newline46mondego><newline46mondego>    ...<newline46mondego><newline46mondego>    private boolean behaviorAssigned = false;<newline46mondego><newline46mondego>    /**<newline46mondego>     * {@inheritDoc}<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    protected void onBeforeRender(){<newline46mondego>        if(!behaviorAssigned){<newline46mondego>            behaviorAssigned=true;<newline46mondego>            visitChildren(new IVisitor<Component>(){<newline46mondego><newline46mondego>                @Override<newline46mondego>                public Object component(Component component){<newline46mondego>                    if(component instanceof AbstractTextComponent<?>){<newline46mondego>                        component.add(new DontLeaveBehavior());<newline46mondego>                    }<newline46mondego>                    return null;<newline46mondego>                }<newline46mondego>            });<newline46mondego>        }<newline46mondego>        super.onBeforeRender();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5674splitHere46","3336903splitHere46","undirty()"
"5675splitHere46","3336977splitHere46","List<string> termSet = fieldQuery.getTermSet(fieldName);<newline46mondego>        VectorHighlightMapper tfv = new VectorHighlightMapper(termSet);    <newline46mondego>        reader.GetTermFreqVector(docId, fieldName, tfv);  // <-- look at this line<newline46mondego><newline46mondego>        string[] terms = tfv.GetTerms();<newline46mondego>        foreach (String term in terms)<newline46mondego>        {<newline46mondego>            if (!termSet.Contains(term)) continue;<newline46mondego>            int index = tfv.IndexOf(term);<newline46mondego>            TermVectorOffsetInfo[] tvois = tfv.GetOffsets(index);<newline46mondego>            if (tvois == null) return; // just return to make null snippets<newline46mondego>            int[] poss = tfv.GetTermPositions(index);<newline46mondego>            if (poss == null) return; // just return to make null snippets<newline46mondego>            for (int i = 0; i < tvois.Length; i++)<newline46mondego>                termList.AddLast(new TermInfo(term, tvois[i].GetStartOffset(), tvois[i].GetEndOffset(), poss[i]));<newline46mondego>"
"5676splitHere46","3337115splitHere46","multipart/form-data"
"5677splitHere46","3337115splitHere46","application/x-www-form-urlencoded"
"5678splitHere46","3337115splitHere46","request.getParameter()"
"5679splitHere46","3337115splitHere46","null"
"5680splitHere46","3337115splitHere46","HttpServletRequest#getParts()"
"5681splitHere46","3337115splitHere46","multipart/form-data"
"5682splitHere46","3337135splitHere46","<managed-bean><newline46mondego>  <managed-bean-name>productForm</managed-bean-name><newline46mondego>  <managed-bean-class>com.example.forms.ProductForm</managed-bean-class><newline46mondego>  <managed-bean-scope>request</managed-bean-scope><newline46mondego>  <managed-property><newline46mondego>    <property-name>someProperty</property-name><newline46mondego>    <value>propertyValue</value><newline46mondego>  </managed-property><newline46mondego></managed-bean><newline46mondego>"
"5683splitHere46","3337135splitHere46","Product Name: <h:inputText value=<doubleQuotes46>#{productForm.productName}<doubleQuotes46> styleClass=<doubleQuotes46>someClass<doubleQuotes46>/><newline46mondego>"
"5684splitHere46","3337321splitHere46","java.util"
"5685splitHere46","3337321splitHere46","Collections"
"5686splitHere46","3337321splitHere46","Arrays"
"5687splitHere46","3337417splitHere46","com.inrev.bm.action.IRCampaignMgmtAction"
"5688splitHere46","3337417splitHere46","input"
"5689splitHere46","3337417splitHere46","<action name=<doubleQuotes46>your-action-name<doubleQuotes46> class=<doubleQuotes46>com.inrev.bm.action.IRCampaignMgmtAction<doubleQuotes46>><newline46mondego>   <result name=<doubleQuotes46>input<doubleQuotes46>>/WEB-INF/pat/to/input.jsp</result><newline46mondego>   <result name=<doubleQuotes46>success<doubleQuotes46>>/WEB-INF/pat/to/success.jsp</result><newline46mondego> </action> <newline46mondego>"
"5690splitHere46","3337417splitHere46","session"
"5691splitHere46","3337417splitHere46","com.inrev.bm.action.IRFacebookAction"
"5692splitHere46","3337538splitHere46","DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<newline46mondego>factory.setNamespaceAware(true); // never forget this!<newline46mondego>DocumentBuilder builder = factory.newDocumentBuilder();<newline46mondego>Document doc = builder.parse(<doubleQuotes46>a.xml<doubleQuotes46>);<newline46mondego>XPathFactory xPathFactory = XPathFactory.newInstance();<newline46mondego>XPath xpath = xPathFactory.newXPath();<newline46mondego>XPathExpression expr = xpath.compile(<doubleQuotes46>//dataObject[@name='pcsp']/map/entry/string[text()='shipment_id']/../string[2]/text()<doubleQuotes46>);<newline46mondego>NodeList result = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);<newline46mondego>System.out.println(result.item(0).getNodeValue());<newline46mondego>"
"5693splitHere46","3337538splitHere46","import javax.xml.parsers.DocumentBuilder;<newline46mondego>import javax.xml.parsers.DocumentBuilderFactory;<newline46mondego>import javax.xml.parsers.ParserConfigurationException;<newline46mondego>import javax.xml.xpath.XPath;<newline46mondego>import javax.xml.xpath.XPathConstants;<newline46mondego>import javax.xml.xpath.XPathExpression;<newline46mondego>import javax.xml.xpath.XPathExpressionException;<newline46mondego>import javax.xml.xpath.XPathFactory;<newline46mondego><newline46mondego>import org.w3c.dom.Document;<newline46mondego>import org.w3c.dom.NodeList;<newline46mondego>import org.xml.sax.SAXException;<newline46mondego>"
"5694splitHere46","3337626splitHere46","<plugin><newline46mondego>    <groupId>org.apache.maven.plugins</groupId><newline46mondego>    <artifactId>maven-dependency-plugin</artifactId><newline46mondego>    <executions><newline46mondego>        <execution><newline46mondego>            <id>copy-dependencies</id><newline46mondego>            <phase>package</phase><newline46mondego>            <goals><newline46mondego>                <goal>copy-dependencies</goal><newline46mondego>            </goals><newline46mondego>            <configuration><newline46mondego>                <outputDirectory>${project.build.directory}/lib</outputDirectory><newline46mondego>            </configuration><newline46mondego>        </execution><newline46mondego>    </executions><newline46mondego></plugin><newline46mondego>"
"5695splitHere46","3337626splitHere46","<plugin><newline46mondego>            <groupId>org.apache.maven.plugins</groupId><newline46mondego>            <artifactId>maven-jar-plugin</artifactId><newline46mondego>            <version>2.3.1</version><newline46mondego>            <configuration><newline46mondego>                <archive><newline46mondego>                    <index>true</index><newline46mondego>                    <manifest><newline46mondego>                        <addClasspath>true</addClasspath><newline46mondego>                        <mainClass>org.foo.myproject.App</mainClass><newline46mondego>                    </manifest><newline46mondego>                    <manifestEntries><newline46mondego>                        <mode>development</mode><newline46mondego>                        <url>${pom.url}</url><newline46mondego>                        <key>value</key><newline46mondego><newline46mondego>                    </manifestEntries><newline46mondego>                </archive><newline46mondego>            </configuration><newline46mondego>        </plugin><newline46mondego>"
"5696splitHere46","3337626splitHere46","java -cp lib/*:myproject-0.0.1-SNAPSHOT.jar org.foo.myproject.App $@<newline46mondego>"
"5697splitHere46","3337658splitHere46","application.war"
"5698splitHere46","3337658splitHere46","webapps/"
"5699splitHere46","3337658splitHere46","/application"
"5700splitHere46","3337658splitHere46","http://hostname:port/application"
"5701splitHere46","3337658splitHere46","http://hostname:port/"
"5702splitHere46","3337865splitHere46","// from your code<newline46mondego>rectangle.setBackgroundColor(ColorConstants.green);<newline46mondego><newline46mondego>// new code<newline46mondego>RectangleFigure r2 = new RectangleFigure();<newline46mondego>r2.setBounds(new Rectangle(0,0,10,10));<newline46mondego>r2.setBackgroundColor(ColorConstants.blue);<newline46mondego>rectangle.add(r2);<newline46mondego><newline46mondego>// back to your code<newline46mondego>lws.setContents(rectangle);<newline46mondego>"
"5703splitHere46","3337993splitHere46","<br />"
"5704splitHere46","3338059splitHere46",".jar"
"5705splitHere46","3338059splitHere46","java -jar xxx.jar"
"5706splitHere46","3338059splitHere46","PATH"
"5707splitHere46","3338059splitHere46",".exe"
"5708splitHere46","3338059splitHere46","C:\Program Files\JavaSoft\JRE\x.y.z"
"5709splitHere46","3338059splitHere46","java.exe"
"5710splitHere46","3338059splitHere46","javaw.exe"
"5711splitHere46","3338059splitHere46","C:\winnt\system32"
"5712splitHere46","3338059splitHere46","C:\windows\system"
"5713splitHere46","3338059splitHere46","java -version"
"5714splitHere46","3338059splitHere46","Key: HKEY_LOCAL_MACHINE\Software\JavaSoft\Java Runtime Environment<newline46mondego>Name: CurrentVersion<newline46mondego>Value: (e.g.) 1.3<newline46mondego>"
"5715splitHere46","3338059splitHere46","(e.g.) <newline46mondego>HKEY_LOCAL_MACHINE\Software\JavaSoft\Java Runtime Environment\1.3   <newline46mondego>HKEY_LOCAL_MACHINE\Software\JavaSoft\Java Runtime Environment\1.3.1<newline46mondego>"
"5716splitHere46","3338059splitHere46","JavaHome    : C:\program Files\JavaSoft\JRE\1.3.1<newline46mondego>RuntimeLib  : C:\Program Files\JavaSoft\JRE\1.3.1\bin\hotspot\jvm.dll<newline46mondego>MicroVersion: 1<newline46mondego>"
"5717splitHere46","3338059splitHere46","System Settings"
"5718splitHere46","3338059splitHere46","JAVA_HOME"
"5719splitHere46","3338059splitHere46","JAVA_HOME"
"5720splitHere46","3338244splitHere46","<type>"
"5721splitHere46","3338244splitHere46","project.xml"
"5722splitHere46","3338244splitHere46","<type>org.netbeans.modules.web.project</type>"
"5723splitHere46","3338574splitHere46","line.split(<doubleQuotes46> |\t<doubleQuotes46>);<newline46mondego>"
"5724splitHere46","3338941splitHere46","Bundle-ClassPath: .,lib/log4j.jar,lib/cvfs.jar,lib/backport.jar,lib/cbea<newline46mondego> nutils.jar,lib/ccodec.jar,lib/ccoll.jar,lib/chttp.jar,lib/cjxpath.jar,l<newline46mondego> ib/clang.jar,[libs redacted],lib/saaj-api.jar,lib/saaj-impl.jar,lib/Sch<newline46mondego> emas.jar,lib/xbean.jar,lib/clog.jar,lib/dom4j.jar,lib/xml-apis.jar,lib/<newline46mondego> xerces.jar,lib/xalan.jar,lib/jaxp-ri.jar,lib/japi.jar,lib/mail.jar<newline46mondego>"
"5725splitHere46","3339032splitHere46","public View getView(int position, View convertView, ViewGroup parent) {<newline46mondego>        ViewHolder holder;<newline46mondego>        if (convertView == null) {<newline46mondego>            convertView = mInflater.inflate(R.layout.time_list_row, null);<newline46mondego>            holder = new ViewHolder();<newline46mondego>            holder.text1 = (TextView) convertView.findViewById(R.id.day_textview);<newline46mondego>            holder.text2 = (TextView) convertView.findViewById(R.id.date_textview);<newline46mondego>            holder.text3 = (TextView) convertView.findViewById(R.id.times_this_day_textview);<newline46mondego><newline46mondego>            convertView.setTag(holder);<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            holder = (ViewHolder) convertView.getTag();<newline46mondego>        }<newline46mondego><newline46mondego>        String dayNames[] = new DateFormatSymbols().getWeekdays();<newline46mondego>        holder.text1.setVisibility(View.VISIBLE);<newline46mondego>        holder.text2.setVisibility(View.VISIBLE);<newline46mondego><newline46mondego>        //Initialize list<newline46mondego>        if (position < 1) {<newline46mondego>            holder.text1.setText(dayNames[allPunches[position].get(Calendar.DAY_OF_WEEK)]);<newline46mondego>            holder.text2.setText(formatDate(allPunches[position]));<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            //Show day and date if not same as last<newline46mondego>            holder.text1.setText(dayNames[allPunches[position].get(Calendar.DAY_OF_WEEK)]);<newline46mondego>            holder.text2.setText(formatDate(allPunches[position]));<newline46mondego><newline46mondego>            if (formatDate(allPunches[position]).contentEquals(formatDate(allPunches[position-1]))) {<newline46mondego>                holder.text1.setVisibility(View.GONE);<newline46mondego>                holder.text2.setVisibility(View.GONE);<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        holder.text3.setText(formatTime(allPunches[position], true));<newline46mondego><newline46mondego>        //Color in/out punches<newline46mondego>        if (position%2 == 0) {<newline46mondego>            holder.text3.setTextColor(Color.GREEN);<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            holder.text3.setTextColor(Color.RED);<newline46mondego>        }<newline46mondego><newline46mondego>        return convertView;<newline46mondego>    } //end getView()<newline46mondego><newline46mondego>    static class ViewHolder {<newline46mondego>        public TextView text1;<newline46mondego>        TextView text2;<newline46mondego>        TextView text3;<newline46mondego>    }<newline46mondego>} //end EfficientAdapter<newline46mondego>"
"5726splitHere46","3339199splitHere46","notEmpty.signal(); // propagate to a non-interrupted thread<newline46mondego>"
"5727splitHere46","3339206splitHere46","BasicDBObject doc = new BasicDBObject( <doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>Matt<doubleQuotes46> );<newline46mondego>collection.insert( doc );<newline46mondego>ObjectId id = (ObjectId)doc.get( <doubleQuotes46>_id<doubleQuotes46> );<newline46mondego>"
"5728splitHere46","3339301splitHere46","List"
"5729splitHere46","3339440splitHere46","javax"
"5730splitHere46","3339440splitHere46","BasicOptionPaneUI.ButtonFactory"
"5731splitHere46","3339440splitHere46","javax.swing.plaf.basic"
"5732splitHere46","3339674splitHere46","RestartResponseAtInterceptPageException"
"5733splitHere46","3339674splitHere46","RestartResponseException"
"5734splitHere46","3339674splitHere46","RestartResponseAtInterceptPageException"
"5735splitHere46","3339674splitHere46","IAuthorizationStrategy"
"5736splitHere46","3339674splitHere46","IUnauthorizedComponentInstantiationListener"
"5737splitHere46","3339674splitHere46","AuthenticatedWebApplication"
"5738splitHere46","3339674splitHere46","PageMap"
"5739splitHere46","3339674splitHere46","continueToOriginalDestination()"
"5740splitHere46","3339674splitHere46","Component"
"5741splitHere46","3339674splitHere46","PageMap"
"5742splitHere46","3339737splitHere46","new_value"
"5743splitHere46","3339737splitHere46","DELETE<newline46mondego>FROM Customer c<newline46mondego>WHERE c.status = ‘inactive’<newline46mondego><newline46mondego>DELETE<newline46mondego>FROM Customer c<newline46mondego>WHERE c.status = ‘inactive’<newline46mondego>AND c.orders IS EMPTY<newline46mondego><newline46mondego>UPDATE customer c<newline46mondego>SET c.status = ‘outstanding’<newline46mondego>WHERE c.balance < 10000<newline46mondego>"
"5744splitHere46","3339990splitHere46","String id = <doubleQuotes46>searchInput<doubleQuotes46>;<newline46mondego>final TextField<String> searchInput = new TextField<String>(id, model);<newline46mondego>searchInput.setMarkupId(id);<newline46mondego><newline46mondego>searchInput.add(new AjaxFormComponentUpdatingBehavior(<doubleQuotes46>onfocus<doubleQuotes46>) {<newline46mondego>  @Override<newline46mondego>  protected void onUpdate(final AjaxRequestTarget target) {<newline46mondego>    System.out.print(<doubleQuotes46>never saw that message :(<doubleQuotes46>);<newline46mondego>    searchInput.setDefaultModelObject(<doubleQuotes46><doubleQuotes46>);<newline46mondego>    target.addComponent(searchInput);<newline46mondego>  }<newline46mondego>});<newline46mondego>"
"5745splitHere46","3340099splitHere46","Map<Id, Map<InList, Id>> oldIdToNewIdMap = new HashMap<InList, Map<Id,Id>>()"
"5746splitHere46","3340099splitHere46","Id newId = oldIdToNewIdMap.get(inList).get(oldId)"
"5747splitHere46","3340225splitHere46","if (someCondition) {<newline46mondego>   if (!someMethod()) {<newline46mondego>     throw new Exception();<newline46mondego>   }<newline46mondego>   some codes...<newline46mondego>}<newline46mondego>else {<newline46mondego>   if (!anotherMethod()) {<newline46mondego>     throw new Exception();<newline46mondego>   }<newline46mondego>   some codes...<newline46mondego>}<newline46mondego>"
"5748splitHere46","3340267splitHere46","send"
"5749splitHere46","3340267splitHere46","sendall"
"5750splitHere46","3340267splitHere46","sendall"
"5751splitHere46","3340267splitHere46","send"
"5752splitHere46","3340335splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import java.util.*;<newline46mondego>import javax.swing.*;<newline46mondego>import javax.swing.plaf.basic.*;<newline46mondego><newline46mondego>public class ComboBoxItemIcon extends JFrame<newline46mondego>{<newline46mondego>    public ComboBoxItemIcon()<newline46mondego>    {<newline46mondego>        Vector model = new Vector();<newline46mondego>        model.addElement( new Item(new ImageIcon(<doubleQuotes46>copy16.gif<doubleQuotes46>), <doubleQuotes46>copy<doubleQuotes46> ) );<newline46mondego>        model.addElement( new Item(new ImageIcon(<doubleQuotes46>add16.gif<doubleQuotes46>), <doubleQuotes46>add<doubleQuotes46> ) );<newline46mondego>        model.addElement( new Item(new ImageIcon(<doubleQuotes46>about16.gif<doubleQuotes46>), <doubleQuotes46>about<doubleQuotes46> ) );<newline46mondego><newline46mondego>        JComboBox comboBox;<newline46mondego><newline46mondego>        comboBox = new JComboBox( model );<newline46mondego>        comboBox.setRenderer( new ItemRenderer() );<newline46mondego>        getContentPane().add(comboBox, BorderLayout.SOUTH );<newline46mondego>    }<newline46mondego><newline46mondego>    class ItemRenderer extends BasicComboBoxRenderer<newline46mondego>    {<newline46mondego>        public Component getListCellRendererComponent(<newline46mondego>            JList list, Object value, int index,<newline46mondego>            boolean isSelected, boolean cellHasFocus)<newline46mondego>        {<newline46mondego>            super.getListCellRendererComponent(list, value, index,<newline46mondego>                isSelected, cellHasFocus);<newline46mondego><newline46mondego>            Item item = (Item)value;<newline46mondego><newline46mondego>            if (index == -1)<newline46mondego>            {<newline46mondego>                setText( item.getText() );<newline46mondego>                setIcon( null );<newline46mondego>            }<newline46mondego>            else<newline46mondego>            {<newline46mondego>                setText( item.getText() );<newline46mondego>                setIcon( item.getIcon() );<newline46mondego>            }<newline46mondego><newline46mondego>            return this;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    class Item<newline46mondego>    {<newline46mondego>        private Icon icon;<newline46mondego>        private String text;<newline46mondego><newline46mondego>        public Item(Icon icon, String text)<newline46mondego>        {<newline46mondego>            this.icon = icon;<newline46mondego>            this.text = text;<newline46mondego>        }<newline46mondego><newline46mondego>        public Icon getIcon()<newline46mondego>        {<newline46mondego>            return icon;<newline46mondego>        }<newline46mondego><newline46mondego>        public String getText()<newline46mondego>        {<newline46mondego>            return text;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        JFrame frame = new ComboBoxItemIcon();<newline46mondego>        frame.setDefaultCloseOperation( EXIT_ON_CLOSE );<newline46mondego>        frame.pack();<newline46mondego>        frame.setVisible( true );<newline46mondego>     }<newline46mondego><newline46mondego>}<newline46mondego>"
"5753splitHere46","3340416splitHere46","PrintStream ps = new PrintStream(new FileOutputStream(FileDescriptor.out))<newline46mondego>"
"5754splitHere46","3340524splitHere46","null"
"5755splitHere46","3340524splitHere46","public static void rotateRight(Node node) {<newline46mondego>    assert(!node.isLeaf() && !node.left.isLeaf());<newline46mondego>    final Node child = node.left;<newline46mondego>    node.setLeft(child.right);<newline46mondego>    if (node.isRightChild())<newline46mondego>         node.parent.setRight(child);<newline46mondego>    else node.parent.setLeft(child);<newline46mondego>    child.setRight(node);<newline46mondego>}<newline46mondego>"
"5756splitHere46","3340524splitHere46","setRight"
"5757splitHere46","3340524splitHere46","setLeft"
"5758splitHere46","3340524splitHere46","parent"
"5759splitHere46","3340524splitHere46","right"
"5760splitHere46","3340524splitHere46","left"
"5761splitHere46","3340524splitHere46","node.isRightNode()"
"5762splitHere46","3340524splitHere46","(node.parent.right == node)"
"5763splitHere46","3340583splitHere46","findViewById"
"5764splitHere46","3340583splitHere46","setContentView"
"5765splitHere46","3340583splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><LinearLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>    android:orientation=<doubleQuotes46>vertical<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:id=<doubleQuotes46>@+id/mainlayout<doubleQuotes46><newline46mondego>><newline46mondego><TextView  <newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46> <newline46mondego>    android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46> <newline46mondego>    android:text=<doubleQuotes46>@string/hello<doubleQuotes46><newline46mondego>/><newline46mondego></LinearLayout><newline46mondego>"
"5766splitHere46","3340583splitHere46","ViewGroup vg = (ViewGroup) findViewById(R.id.mainlayout);<newline46mondego>"
"5767splitHere46","3340583splitHere46","android:id"
"5768splitHere46","3340583splitHere46","R.id"
"5769splitHere46","3340583splitHere46","findViewById"
"5770splitHere46","3340583splitHere46","ViewGroup"
"5771splitHere46","3340583splitHere46","LinearLayout"
"5772splitHere46","3340583splitHere46","getLayoutInflater()"
"5773splitHere46","3340583splitHere46","inflate(...)"
"5774splitHere46","3340760splitHere46","public class ContactInfo {<newline46mondego>    private Long phoneNo;<newline46mondego>    public Long getPhoneNo() {<newline46mondego>        return phoneNo;<newline46mondego>    }<newline46mondego>    public void setPhoneNo(Long phoneNo) {<newline46mondego>        this.phoneNo = phoneNo;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5775splitHere46","3340760splitHere46","public class ContactInfo {<newline46mondego>    private PhoneNumber phoneNo;<newline46mondego>    public Long getPhoneNo() {<newline46mondego>        return phoneNo.getNumber();<newline46mondego>    }<newline46mondego>    public void setPhoneNo(Long phoneNo) {<newline46mondego>        this.phoneNo = new PhoneNumber(phoneNo);<newline46mondego>    }<newline46mondego>}<newline46mondego>public class PhoneNumber {<newline46mondego>    private Long number;<newline46mondego>    public PhoneNumber(Long number) {<newline46mondego>        this.number = number;<newline46mondego>    }<newline46mondego>    public Long getNumber() {<newline46mondego>        return number;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5776splitHere46","3340888splitHere46","JFreeChart"
"5777splitHere46","3340888splitHere46","ChartUtilities"
"5778splitHere46","3340970splitHere46","<bean<newline46mondego>    class=<doubleQuotes46>org.springframework.beans.factory.config.MethodInvokingFactoryBean<doubleQuotes46>><newline46mondego>    <property<newline46mondego>        name=<doubleQuotes46>targetObject<doubleQuotes46>><newline46mondego>        <!-- System.getProperties() --><newline46mondego>        <bean<newline46mondego>            class=<doubleQuotes46>org.springframework.beans.factory.config.MethodInvokingFactoryBean<doubleQuotes46>><newline46mondego>            <property name=<doubleQuotes46>targetClass<doubleQuotes46> value=<doubleQuotes46>java.lang.System<doubleQuotes46> /><newline46mondego>            <property name=<doubleQuotes46>targetMethod<doubleQuotes46> value=<doubleQuotes46>getProperties<doubleQuotes46> /><newline46mondego>        </bean><newline46mondego>    </property><newline46mondego>    <property<newline46mondego>        name=<doubleQuotes46>targetMethod<doubleQuotes46><newline46mondego>        value=<doubleQuotes46>putAll<doubleQuotes46> /><newline46mondego>    <property<newline46mondego>        name=<doubleQuotes46>arguments<doubleQuotes46>><newline46mondego>        <!-- The new Properties --><newline46mondego>        <util:properties><newline46mondego>            <prop<newline46mondego>                key=<doubleQuotes46>my.key<doubleQuotes46>>myvalue</prop><newline46mondego>            <prop<newline46mondego>                key=<doubleQuotes46>my.key2<doubleQuotes46>>myvalue2</prop><newline46mondego>            <prop<newline46mondego>                key=<doubleQuotes46>my.key3<doubleQuotes46>>myvalue3</prop><newline46mondego><newline46mondego>        </util:properties><newline46mondego>    </property><newline46mondego></bean><newline46mondego>"
"5779splitHere46","3340970splitHere46","public static void main(final String[] args) {<newline46mondego><newline46mondego>    new ClassPathXmlApplicationContext(<doubleQuotes46>classpath:beans.xml<doubleQuotes46>);<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>my.key: <doubleQuotes46>+System.getProperty(<doubleQuotes46>my.key<doubleQuotes46>));<newline46mondego>    System.out.println(<doubleQuotes46>my.key2: <doubleQuotes46>+System.getProperty(<doubleQuotes46>my.key2<doubleQuotes46>));<newline46mondego>    System.out.println(<doubleQuotes46>my.key3: <doubleQuotes46>+System.getProperty(<doubleQuotes46>my.key3<doubleQuotes46>));<newline46mondego><newline46mondego>    // to test that we're not overwriting existing properties<newline46mondego>    System.out.println(<doubleQuotes46>java.io.tmpdir: <doubleQuotes46>+System.getProperty(<doubleQuotes46>java.io.tmpdir<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"5780splitHere46","3340970splitHere46","my.key: myvalue<newline46mondego>my.key2: myvalue2<newline46mondego>my.key3: myvalue3<newline46mondego>java.io.tmpdir: C:\DOKUME~1\SEANFL~1\LOKALE~1\Temp\<newline46mondego>"
"5781splitHere46","3341033splitHere46","onKeyDown(int keyCode, KeyEvent event)"
"5782splitHere46","3341475splitHere46","checkstyle:check"
"5783splitHere46","3341475splitHere46","verify"
"5784splitHere46","3341553splitHere46","mvc:annotation-driven"
"5785splitHere46","3341975splitHere46","connection.setAutoCommit(false);<newline46mondego>try{<newline46mondego>    insert(1,2);<newline46mondego>}<newline46mondego>catch(Exception e){<newline46mondego>    System.out.println(<doubleQuotes46>1, 2 didn't work<doubleQuotes46>);<newline46mondego>}<newline46mondego>try{<newline46mondego>    insert(4,5);<newline46mondego>}<newline46mondego>catch(Exception e){<newline46mondego>    System.out.println(<doubleQuotes46>4, 5 didn't work<doubleQuotes46>);<newline46mondego>}<newline46mondego>connection.commit();<newline46mondego>"
"5786splitHere46","3341986splitHere46","DiskFileItemFactory factory = new DiskFileItemFactory();<newline46mondego>ServletFileUpload fileUpload = new ServletFileUpload(factory);<newline46mondego>List<FileItem> fileUploadItems = fileUpload.parseRequest((HttpServletRequest) request);<newline46mondego>for (FileItem fileItem : fileUploadItems) {<newline46mondego>    String fieldName = fileItem.getFieldName();<newline46mondego>    String contentType = fileItem.getContentType();<newline46mondego>    long size = fileItem.getSize();<newline46mondego>    if (size < 1) {<newline46mondego>        throw new FileUploadException(<doubleQuotes46>The submitted file must not be null!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    boolean equalFieldName = fieldName.equals(SOME_FIELD_NAME);<newline46mondego>    if (!equalFieldName) {<newline46mondego>        // do something<newline46mondego>    }<newline46mondego>    boolean equalContentType = contentType.equals(SOME_CONTENT);<newline46mondego>    if (!equalContentType) {<newline46mondego>        // do something<newline46mondego>    }<newline46mondego>    if (equalFieldName && equalContentType) {<newline46mondego>         stream = fileItem.getInputStream();<newline46mondego>         break;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5787splitHere46","3342082splitHere46","Response"
"5788splitHere46","3342082splitHere46","Location"
"5789splitHere46","3342082splitHere46","javax.ws.rs.core.Response.temporaryRedirect(URI)"
"5790splitHere46","3342082splitHere46","Viewable"
"5791splitHere46","3342082splitHere46","WebApplicationException"
"5792splitHere46","3342082splitHere46","Response"
"5793splitHere46","3342345splitHere46","[tag]"
"5794splitHere46","3342345splitHere46","[\[\]]*"
"5795splitHere46","3342345splitHere46",".*?"
"5796splitHere46","3342345splitHere46","[tag]"
"5797splitHere46","3342345splitHere46","Matcher.find()"
"5798splitHere46","3342345splitHere46","appendReplacement/Tail"
"5799splitHere46","3342345splitHere46","Map<String,String>"
"5800splitHere46","3342345splitHere46","Matcher.find()"
"5801splitHere46","3342345splitHere46","Map<String,String> hrefs = new HashMap<String,String>();<newline46mondego>    hrefs.put(<doubleQuotes46>[1,2]<doubleQuotes46>, <doubleQuotes46>one-two<doubleQuotes46>);<newline46mondego>    hrefs.put(<doubleQuotes46>[3,4]<doubleQuotes46>, <doubleQuotes46>three-four<doubleQuotes46>);<newline46mondego>    hrefs.put(<doubleQuotes46>[5,6]<doubleQuotes46>, <doubleQuotes46>five-six<doubleQuotes46>);<newline46mondego><newline46mondego>    String text = <doubleQuotes46>p [1,2] \nq [3,4] \nr [5,6] \ns<doubleQuotes46>;<newline46mondego><newline46mondego>    Matcher m = Pattern.compile(<doubleQuotes46>\\[[^\\[\\]]*\\]<doubleQuotes46>).matcher(text);<newline46mondego>    StringBuffer sb = new StringBuffer();<newline46mondego>    while (m.find()) {<newline46mondego>        String section = m.group(0);<newline46mondego>        String url = String.format(<doubleQuotes46><a href='%s'>%s</a><doubleQuotes46>,<newline46mondego>            hrefs.get(section),<newline46mondego>            section<newline46mondego>        );<newline46mondego>        m.appendReplacement(sb, url);<newline46mondego>    }<newline46mondego>    m.appendTail(sb);<newline46mondego><newline46mondego>    System.out.println(sb.toString());<newline46mondego>"
"5802splitHere46","3342345splitHere46","p <a href='one-two'>[1,2]</a> <newline46mondego>q <a href='three-four'>[3,4]</a> <newline46mondego>r <a href='five-six'>[5,6]</a> <newline46mondego>s<newline46mondego>"
"5803splitHere46","3342345splitHere46","appendReplacement/Tail"
"5804splitHere46","3342345splitHere46","StringBuilder"
"5805splitHere46","3342345splitHere46","StringBuffer"
"5806splitHere46","3342345splitHere46","java.util.regex.Matcher"
"5807splitHere46","3342345splitHere46",".*?"
"5808splitHere46","3342345splitHere46",".*"
"5809splitHere46","3342448splitHere46","org.apache.jasper.runtime.HttpJspBase"
"5810splitHere46","3342452splitHere46","equals"
"5811splitHere46","3342452splitHere46","hashcode"
"5812splitHere46","3342452splitHere46","Attribute"
"5813splitHere46","3342478splitHere46","^\d*$"
"5814splitHere46","3342478splitHere46","pattern"
"5815splitHere46","3342478splitHere46","^$|pattern<newline46mondego>"
"5816splitHere46","3342478splitHere46","^"
"5817splitHere46","3342478splitHere46","$"
"5818splitHere46","3342478splitHere46","|"
"5819splitHere46","3342478splitHere46","this|that"
"5820splitHere46","3342478splitHere46","Pattern.MULTILINE/(?m)"
"5821splitHere46","3342478splitHere46","^"
"5822splitHere46","3342478splitHere46","$"
"5823splitHere46","3342478splitHere46","\A"
"5824splitHere46","3342478splitHere46","\Z"
"5825splitHere46","3342478splitHere46","\A\Z"
"5826splitHere46","3342478splitHere46","^$"
"5827splitHere46","3342478splitHere46","String numbers = <doubleQuotes46>012345<doubleQuotes46>;<newline46mondego><newline46mondego>System.out.println(numbers.replaceAll(<doubleQuotes46>.<doubleQuotes46>, <doubleQuotes46><$0><doubleQuotes46>));<newline46mondego>// <0><1><2><3><4><5><newline46mondego><newline46mondego>System.out.println(numbers.replaceAll(<doubleQuotes46>^.<doubleQuotes46>, <doubleQuotes46><$0><doubleQuotes46>));<newline46mondego>// <0>12345<newline46mondego><newline46mondego>System.out.println(numbers.replaceAll(<doubleQuotes46>.$<doubleQuotes46>, <doubleQuotes46><$0><doubleQuotes46>));<newline46mondego>// 01234<5><newline46mondego><newline46mondego>numbers = <doubleQuotes46>012\n345\n678<doubleQuotes46>;<newline46mondego>System.out.println(numbers.replaceAll(<doubleQuotes46>^.<doubleQuotes46>, <doubleQuotes46><$0><doubleQuotes46>));       <newline46mondego>// <0>12<newline46mondego>// 345<newline46mondego>// 678<newline46mondego><newline46mondego>System.out.println(numbers.replaceAll(<doubleQuotes46>(?m)^.<doubleQuotes46>, <doubleQuotes46><$0><doubleQuotes46>));       <newline46mondego>// <0>12<newline46mondego>// <3>45<newline46mondego>// <6>78<newline46mondego><newline46mondego>System.out.println(numbers.replaceAll(<doubleQuotes46>(?m).\\Z<doubleQuotes46>, <doubleQuotes46><$0><doubleQuotes46>));     <newline46mondego>// 012<newline46mondego>// 345<newline46mondego>// 67<8><newline46mondego>"
"5828splitHere46","3342478splitHere46","matches"
"5829splitHere46","3342478splitHere46","matches"
"5830splitHere46","3342478splitHere46","String.matches"
"5831splitHere46","3342478splitHere46","Pattern.matches"
"5832splitHere46","3342478splitHere46","Matcher.matches"
"5833splitHere46","3342478splitHere46","matches"
"5834splitHere46","3342551splitHere46","Comparator<MyObject>"
"5835splitHere46","3342551splitHere46","Collections.sort(List<T>, Comparator<? super T>"
"5836splitHere46","3342551splitHere46","List"
"5837splitHere46","3342551splitHere46","MyObject"
"5838splitHere46","3342551splitHere46","implements Comparable<MyObject>"
"5839splitHere46","3342551splitHere46","Collections.sort(List<T>"
"5840splitHere46","3342551splitHere46","List"
"5841splitHere46","3342551splitHere46","Comparator"
"5842splitHere46","3342551splitHere46","Comparable"
"5843splitHere46","3342613splitHere46","JobDetail"
"5844splitHere46","3342613splitHere46","RAMJobStore"
"5845splitHere46","3342613splitHere46","ScheduledJobDetail"
"5846splitHere46","3342613splitHere46","JobDetail"
"5847splitHere46","3342613splitHere46","JobStore"
"5848splitHere46","3342613splitHere46","JobDetail"
"5849splitHere46","3342613splitHere46","ScheduledJobDetail"
"5850splitHere46","3342613splitHere46","JobDetail"
"5851splitHere46","3342668splitHere46","try {<newline46mondego>    Thread.sleep(1000);<newline46mondego>} catch(InterruptedException ex) {<newline46mondego>    Thread.currentThread().interrupt();<newline46mondego>}<newline46mondego>"
"5852splitHere46","3342843splitHere46","is_first = true<newline46mondego>loop element over element_array<newline46mondego>BEGIN LOOP<newline46mondego>   if (! is_first)<newline46mondego>       print <doubleQuotes46>,<doubleQuotes46><newline46mondego>   end if<newline46mondego>   print element<newline46mondego>   is_first = false<newline46mondego>END<newline46mondego>print NEWLINE<newline46mondego>"
"5853splitHere46","3342890splitHere46","public class ConstructorCallsOverride {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        abstract class Base {<newline46mondego>            Base() { overrideMe(); }<newline46mondego>            abstract void overrideMe(); <newline46mondego>        }<newline46mondego>        class Child extends Base {<newline46mondego>            final int x;<newline46mondego>            Child(int x) { this.x = x; }<newline46mondego>            @Override void overrideMe() {<newline46mondego>                System.out.println(x);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        new Child(42); // prints <doubleQuotes46>0<doubleQuotes46><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5854splitHere46","3342890splitHere46","Base"
"5855splitHere46","3342890splitHere46","overrideMe"
"5856splitHere46","3342890splitHere46","Child"
"5857splitHere46","3342890splitHere46","final int x"
"5858splitHere46","3343042splitHere46","public class Test {<newline46mondego>    static {<newline46mondego>        String s = <doubleQuotes46>hi<doubleQuotes46>;<newline46mondego>        s.substring(10);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5859splitHere46","3343042splitHere46","java.lang.ExceptionInInitializerError<newline46mondego>Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -8<newline46mondego>    at java.lang.String.substring(String.java:1938)<newline46mondego>    at java.lang.String.substring(String.java:1905)<newline46mondego>    at Test.<clinit>(Test.java:5)<newline46mondego>Exception in thread <doubleQuotes46>main<doubleQuotes46> <newline46mondego>"
"5860splitHere46","3343261splitHere46","Set<String>"
"5861splitHere46","3343261splitHere46","HashSet<String>"
"5862splitHere46","3343261splitHere46","add"
"5863splitHere46","3343261splitHere46","remove"
"5864splitHere46","3343261splitHere46","contains"
"5865splitHere46","3343261splitHere46","String"
"5866splitHere46","3343261splitHere46","HashSet"
"5867splitHere46","3343314splitHere46","private void readObject(java.io.ObjectInputStream in)<newline46mondego>     throws IOException, ClassNotFoundException;<newline46mondego>"
"5868splitHere46","3343314splitHere46","in.defaultReadObject()"
"5869splitHere46","3343314splitHere46","java.io.Serializable"
"5870splitHere46","3343359splitHere46","main()"
"5871splitHere46","3343359splitHere46","Area"
"5872splitHere46","3343359splitHere46","public class Area {<newline46mondego>    private String location;<newline46mondego>    private String timezone;<newline46mondego><newline46mondego>    public String getLocation() { return location; }<newline46mondego>    public String getTimezone() { return timezone; }<newline46mondego><newline46mondego>    public void setLocation(String location) { this.location = location; }<newline46mondego>    public void setTimezone(String timezone) { this.timezone = timezone; }<newline46mondego>}<newline46mondego>"
"5873splitHere46","3343359splitHere46","Database"
"5874splitHere46","3343359splitHere46","public class Database {<newline46mondego>    private String url;<newline46mondego>    private String username;<newline46mondego>    private String password;<newline46mondego><newline46mondego>    public Database(String driver, String url, String username, String password) {<newline46mondego>        try { <newline46mondego>            Class.forName(driver);<newline46mondego>        } catch (ClassNotFoundException e) {<newline46mondego>            throw new RuntimeException(<doubleQuotes46>Driver class is missing in classpath<doubleQuotes46>, e);<newline46mondego>        }<newline46mondego>        this.url = url;<newline46mondego>        this.username = username;<newline46mondego>        this.password = password;<newline46mondego>    }<newline46mondego><newline46mondego>    public Connection getConnection() {<newline46mondego>        return DriverManager.getConnection(url, username, password);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5875splitHere46","3343359splitHere46","AreaDAO"
"5876splitHere46","3343359splitHere46","public class AreaDAO {<newline46mondego>    private Database database;<newline46mondego><newline46mondego>    public AreaDAO(Database database) {<newline46mondego>        this.database = database;<newline46mondego>    }<newline46mondego><newline46mondego>    public List<Area> list() throws SQLException {<newline46mondego>        Connection connection = null;<newline46mondego>        PreparedStatement statement = null;<newline46mondego>        ResultSet resultSet = null;<newline46mondego>        List<Area> areas = new ArrayList<Area>();<newline46mondego><newline46mondego>        try {<newline46mondego>            connection = database.getConnection();<newline46mondego>            statement = connection.prepareStatement(<doubleQuotes46>SELECT location, timezone FROM userclient<doubleQuotes46>);<newline46mondego>            resultSet = statement.executeQuery();<newline46mondego>            while (resultSet.next()) {<newline46mondego>                Area area = new Area();<newline46mondego>                area.setLocation(resultSet.getString(<doubleQuotes46>location<doubleQuotes46>));<newline46mondego>                area.setTimezone(resultSet.getString(<doubleQuotes46>timezone<doubleQuotes46>));<newline46mondego>                areas.add(area);<newline46mondego>            }<newline46mondego>        } finally {<newline46mondego>            if (resultSet != null) try { resultSet.close(); } catch (SQLException logOrIgnore) {}<newline46mondego>            if (statement != null) try { statement.close(); } catch (SQLException logOrIgnore) {}<newline46mondego>            if (connection != null) try { connection.close(); } catch (SQLException logOrIgnore) {}<newline46mondego>        }<newline46mondego><newline46mondego>        return areas;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5877splitHere46","3343359splitHere46","public class AreaServlet extends HttpServlet {<newline46mondego>    private AreaDAO areaDAO;<newline46mondego><newline46mondego>    public void init() throws ServletException {<newline46mondego>        String driver = <doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46>;<newline46mondego>        String url = <doubleQuotes46>jdbc:mysql://localhost:3306/dbname<doubleQuotes46>;<newline46mondego>        String username = <doubleQuotes46>user<doubleQuotes46>;<newline46mondego>        String password = <doubleQuotes46>pass<doubleQuotes46>;<newline46mondego>        Database database = new Database(driver, url, username, password);<newline46mondego>        this.areaDAO = new AreaDAO(database);<newline46mondego>    }<newline46mondego><newline46mondego>    protected void doGet(HttpServletRequest request, HttpServletResponse response)  throws ServletException, IOException {<newline46mondego>        try {<newline46mondego>            List<Area> areas = areaDAO.list();<newline46mondego>            request.setAttribute(<doubleQuotes46>areas<doubleQuotes46>, areas);<newline46mondego>            request.getRequestDispatcher(<doubleQuotes46>/WEB-INF/areas.jsp<doubleQuotes46>).forward(request, response);<newline46mondego>        } catch (SQLException e) {<newline46mondego>            throw new ServletException(<doubleQuotes46>Cannot retrieve areas<doubleQuotes46>, e);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5878splitHere46","3343359splitHere46","url-pattern"
"5879splitHere46","3343359splitHere46","/areas"
"5880splitHere46","3343359splitHere46","web.xml"
"5881splitHere46","3343359splitHere46","/WEB-INF/areas.jsp"
"5882splitHere46","3343359splitHere46","<table><newline46mondego>    <c:forEach items=<doubleQuotes46>${areas}<doubleQuotes46> var=<doubleQuotes46>area<doubleQuotes46>><newline46mondego>        <tr><newline46mondego>            <td>${area.location}</td><newline46mondego>            <td>${area.timezone}</td><newline46mondego>        </tr><newline46mondego>    </c:forEach><newline46mondego></table><newline46mondego>"
"5883splitHere46","3343393splitHere46","TimeZone.LONG"
"5884splitHere46","3343393splitHere46","daylight - if true, return the daylight savings name.<newline46mondego>   style - either LONG or SHORT <newline46mondego>   locale - the locale in which to supply the display name.<newline46mondego>"
"5885splitHere46","3343393splitHere46","the human-readable name of this time zone in the default locale.<newline46mondego>"
"5886splitHere46","3343467splitHere46","ServletContext"
"5887splitHere46","3343467splitHere46","HttpSession"
"5888splitHere46","3343467splitHere46","response.setHeader(<doubleQuotes46>Cache-Control<doubleQuotes46>, <doubleQuotes46>no-cache, no-store, must-revalidate<doubleQuotes46>); // HTTP 1.1.<newline46mondego>response.setHeader(<doubleQuotes46>Pragma<doubleQuotes46>, <doubleQuotes46>no-cache<doubleQuotes46>); // HTTP 1.0.<newline46mondego>response.setDateHeader(<doubleQuotes46>Expires<doubleQuotes46>, 0); // Proxies.<newline46mondego>"
"5889splitHere46","3343467splitHere46","Filter"
"5890splitHere46","3343467splitHere46","url-pattern"
"5891splitHere46","3343505splitHere46","private class PrepareAdapter1 extends AsyncTask<Void,Void,ContactsListCursorAdapter > {<newline46mondego>    ProgressDialog dialog;<newline46mondego>    @Override<newline46mondego>    protected void onPreExecute() {<newline46mondego>        dialog = new ProgressDialog(viewContacts.this);<newline46mondego>        dialog.setMessage(getString(R.string.please_wait_while_loading));<newline46mondego>        dialog.setIndeterminate(true);<newline46mondego>        dialog.setCancelable(false);<newline46mondego>        dialog.show();<newline46mondego>    }<newline46mondego>    /* (non-Javadoc)<newline46mondego>     * @see android.os.AsyncTask#doInBackground(Params[])<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    protected ContactsListCursorAdapter doInBackground(Void... params) {<newline46mondego>        cur1 = objItem.getContacts();<newline46mondego>        startManagingCursor(cur1);<newline46mondego><newline46mondego>        adapter1 = new ContactsListCursorAdapter (viewContacts.this,<newline46mondego>                R.layout.contact_for_listitem, cur1, new String[] {}, new int[] {});<newline46mondego><newline46mondego>        return adapter1;<newline46mondego>    }<newline46mondego><newline46mondego>    protected void onPostExecute(ContactsListCursorAdapter result) {<newline46mondego>        list.setAdapter(result);<newline46mondego>        dialog.dismiss();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5892splitHere46","3343681splitHere46","<f:xxx>"
"5893splitHere46","3343681splitHere46","<ui:xxx>"
"5894splitHere46","3343681splitHere46","UIComponent"
"5895splitHere46","3343681splitHere46","<f:param>"
"5896splitHere46","3343681splitHere46","<f:selectItem(s)>"
"5897splitHere46","3343681splitHere46","rendered"
"5898splitHere46","3343681splitHere46","id"
"5899splitHere46","3343681splitHere46","binding"
"5900splitHere46","3343681splitHere46","UIViewRoot"
"5901splitHere46","3343681splitHere46","FacesContext"
"5902splitHere46","3343681splitHere46","UIViewRoot#encodeAll()"
"5903splitHere46","3343681splitHere46","<h:dataTable>"
"5904splitHere46","3343681splitHere46","<ui:repeat>"
"5905splitHere46","3343681splitHere46","preRenderView"
"5906splitHere46","3343681splitHere46","var"
"5907splitHere46","3343681splitHere46","@ViewScoped"
"5908splitHere46","3343681splitHere46","rendered"
"5909splitHere46","3343681splitHere46","<h:someComponent rendered=<doubleQuotes46>#{lpc.verbose}<doubleQuotes46>><newline46mondego>    ...<newline46mondego></h:someComponent><newline46mondego>"
"5910splitHere46","3343722splitHere46","public List rechercheValeurTarifs() throws Exception {<newline46mondego>    List tarifs = null;<newline46mondego>    try{<newline46mondego><newline46mondego>        tarifs = getHibernateTemplate().find(<doubleQuotes46>FROM FE_TARIF_IDF <doubleQuotes46> +<newline46mondego>                <doubleQuotes46>WHERE FE_TARIF_IDF.D_ANNEE in (SELECT MAX (FE_EXERCICE_FISCAL.D_CEXER) FROM FE_EXERCICE_FISCAL);<doubleQuotes46>);<newline46mondego><newline46mondego>        if(tarifs == null)<newline46mondego>        {<newline46mondego>            tarifs = getHibernateTemplate().find(<doubleQuotes46>FROM FE_TARIF_IDF <doubleQuotes46> +<newline46mondego>                    <doubleQuotes46>WHERE FE_TARIF_IDF.D_ANNEE in (SELECT MAX (FE_EXERCICE_FISCAL.D_CEXER-1) FROM FE_EXERCICE_FISCAL);<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    } catch (Exception e){<newline46mondego>    System.out.println(e.getStackTrace());<newline46mondego>    }<newline46mondego>    return tarifs;<newline46mondego>}<newline46mondego>"
"5911splitHere46","3343817splitHere46","root (pom)<newline46mondego>    - project1 (jar)<newline46mondego>    - project2 (war) -> references project1 as dependency<newline46mondego>    - project3 (jar)<newline46mondego>    - project4 (war) -> references project3 as dependency<newline46mondego>    - project5 (ear) -> references project2 and project4 as dependency<newline46mondego>"
"5912splitHere46","3343817splitHere46","mvn install"
"5913splitHere46","3343817splitHere46","root (pom)<newline46mondego>    - project1 (jar)<newline46mondego>    - project2 (jar)<newline46mondego>    - project3 (war) -> references project1 and project2 as dependency of scope provided<newline46mondego>    - project4 (war) -> references project1 and project2 as dependency of scope provided<newline46mondego>    - project5 (ear) -> references project1 through project4 as dependency<newline46mondego>"
"5914splitHere46","3343829splitHere46","// a)<newline46mondego>col.addAll(Arrays.asList(1, 2, 3, 4, 5));<newline46mondego>"
"5915splitHere46","3343829splitHere46","Integer[]"
"5916splitHere46","3343829splitHere46","Arrays.asList"
"5917splitHere46","3343829splitHere46","List<Integer>"
"5918splitHere46","3343829splitHere46","addAll"
"5919splitHere46","3343829splitHere46","Collection<Integer>"
"5920splitHere46","3343829splitHere46","Iterator<Integer>"
"5921splitHere46","3343829splitHere46","// b)<newline46mondego>Collections.addAll(col, 1, 2, 3, 4, 5);<newline46mondego>"
"5922splitHere46","3343829splitHere46","Integer[]"
"5923splitHere46","3343829splitHere46","addAll"
"5924splitHere46","3343829splitHere46","Iterable<Integer>"
"5925splitHere46","3343829splitHere46","b)"
"5926splitHere46","3343829splitHere46","Arrays.asList"
"5927splitHere46","3343829splitHere46","List"
"5928splitHere46","3343829splitHere46","Iterator"
"5929splitHere46","3343829splitHere46","Collections.addAll(Collection<? super T> c, T... elements)"
"5930splitHere46","3343829splitHere46","Collection.addAll(Collection<? extends E> c)"
"5931splitHere46","3343829splitHere46","Collection"
"5932splitHere46","3343829splitHere46","Collections.addAll(col, arr)"
"5933splitHere46","3343829splitHere46","Collection"
"5934splitHere46","3343829splitHere46","col.addAll(otherCol)"
"5935splitHere46","3343829splitHere46","Collections.addAll(col, otherCol.toArray())"
"5936splitHere46","3343856splitHere46","System.currentTimeMillis()"
"5937splitHere46","3343856splitHere46","System.nanoTime()"
"5938splitHere46","3343856splitHere46","Stopwatch"
"5939splitHere46","3343863splitHere46","ByteArrayOutputStream"
"5940splitHere46","3343916splitHere46","PdfStamper"
"5941splitHere46","3343916splitHere46","// Create output PDF<newline46mondego>Document document = new Document(PageSize.A4);<newline46mondego>PdfWriter writer = PdfWriter.getInstance(document, outputStream);<newline46mondego>document.open();<newline46mondego>PdfContentByte cb = writer.getDirectContent();<newline46mondego><newline46mondego>// Load existing PDF<newline46mondego>PdfReader reader = new PdfReader(templateInputStream);<newline46mondego>PdfImportedPage page = writer.getImportedPage(reader, 1); <newline46mondego><newline46mondego>// Copy first page of existing PDF into output PDF<newline46mondego>document.newPage();<newline46mondego>cb.addTemplate(page, 0, 0);<newline46mondego><newline46mondego>// Add your new data / text here<newline46mondego>// for example...<newline46mondego>document.add(new Paragraph(<doubleQuotes46>my timestamp<doubleQuotes46>)); <newline46mondego><newline46mondego>document.close();<newline46mondego>"
"5942splitHere46","3343916splitHere46","templateInputStream"
"5943splitHere46","3343916splitHere46","outputStream"
"5944splitHere46","3343975splitHere46","<html> <newline46mondego>    <head> <newline46mondego>      <link rel=<doubleQuotes46>stylesheet<doubleQuotes46> href=<doubleQuotes46><%=bb_style%><doubleQuotes46>/> <newline46mondego>      <title>asdf</title> <newline46mondego>    </head><newline46mondego>"
"5945splitHere46","3343975splitHere46","<"
"5946splitHere46","3344046splitHere46",".classpath"
"5947splitHere46","3344386splitHere46","InvocationHandler"
"5948splitHere46","3344386splitHere46","Proxy.getInvocationHandler(proxy)"
"5949splitHere46","3344386splitHere46","java.lang.reflect.Proxy"
"5950splitHere46","3344545splitHere46","import java.net.HttpURLConnection;<newline46mondego>import java.net.URL;<newline46mondego><newline46mondego>import javax.xml.bind.JAXBContext;<newline46mondego>import javax.xml.bind.JAXBException;<newline46mondego>import javax.xml.bind.annotation.adapters.XmlAdapter;<newline46mondego><newline46mondego>import org.example.product.Product;<newline46mondego><newline46mondego>public class ProductAdapter  extends XmlAdapter<String, Product>{<newline46mondego><newline46mondego>    private JAXBContext jaxbContext;<newline46mondego><newline46mondego>    public ProductAdapter() {<newline46mondego>        try {<newline46mondego>            jaxbContext = JAXBContext.newInstance(Product.class);<newline46mondego>        } catch(JAXBException e) {<newline46mondego>            throw new RuntimeException(e);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String marshal(Product v) throws Exception {<newline46mondego>        if(null == v) {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego>        return <doubleQuotes46>http://localhost:9999/products/<doubleQuotes46> + v.getId();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Product unmarshal(String v) throws Exception {<newline46mondego>        if(null == v) {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego><newline46mondego>        URL url = new URL(v);<newline46mondego>        HttpURLConnection connection = (HttpURLConnection) url.openConnection();<newline46mondego>        connection.setRequestMethod(<doubleQuotes46>GET<doubleQuotes46>);<newline46mondego>        connection.setRequestProperty(<doubleQuotes46>Accept<doubleQuotes46>, <doubleQuotes46>application/xml<doubleQuotes46>);<newline46mondego><newline46mondego>        Product product = (Product) jaxbContext.createUnmarshaller().unmarshal(connection.getInputStream());<newline46mondego>        connection.disconnect();<newline46mondego>        return product;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5951splitHere46","3344640splitHere46","public static void setLookAndFeel() {<newline46mondego>    try {<newline46mondego>      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>    } catch(Exception e) {<newline46mondego>      System.out.println(<doubleQuotes46>Error setting native LAF: <doubleQuotes46> + e);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5952splitHere46","3344658splitHere46","@Before(<doubleQuotes46>execution(* de.ac.mis.dao.acDynamicUserSessionFactory.getSessionFactory())<doubleQuotes46>)<newline46mondego>public void setUsername(JoinPoint joinPoint) {<newline46mondego>    acDynamicUserSessionFactory dao = (acDynamicUserSessionFactory) joinPoint.getTarget();<newline46mondego>    RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes();<newline46mondego>    String userName = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    if (requestAttributes instanceof PortletRequestAttributes) {<newline46mondego>        PortletRequest request = ((PortletRequestAttributes) requestAttributes).getRequest();<newline46mondego>        userName = request.getRemoteUser();<newline46mondego>    } else if (requestAttributes instanceof ServletRequestAttributes) {<newline46mondego>        HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();<newline46mondego>        userName = request.getRemoteUser();<newline46mondego>    }<newline46mondego>    dao.setUserName(userName);<newline46mondego>    this.log.debug(<doubleQuotes46>acUserSessionfactory was set for user: <doubleQuotes46> + userName);<newline46mondego>}<newline46mondego>"
"5953splitHere46","3344685splitHere46","ModelAndView"
"5954splitHere46","3344685splitHere46","ModelMap"
"5955splitHere46","3344685splitHere46","public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)<newline46mondego> {<newline46mondego>  return new ModelAndView(<doubleQuotes46>setup<doubleQuotes46>, ORDER, new Order());<newline46mondego> }<newline46mondego>"
"5956splitHere46","3344781splitHere46","Map.keySet()"
"5957splitHere46","3344781splitHere46","Map.values()"
"5958splitHere46","3344781splitHere46","Map.entrySet()"
"5959splitHere46","3344819splitHere46","public static String decode(String hexCodes, String encoding) throws UnsupportedEncodingException {<newline46mondego>    if (hexCodes.length() % 2 != 0)<newline46mondego>        throw new IllegalArgumentException(<doubleQuotes46>Illegal input length<doubleQuotes46>);<newline46mondego>    byte[] bytes = new byte[hexCodes.length() / 2];<newline46mondego>    for (int i = 0; i < bytes.length; i++)<newline46mondego>        bytes[i] = (byte) Integer.parseInt(hexCodes.substring(2 * i, 2 * i + 2), 16);<newline46mondego>    return new String(bytes, encoding);<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) throws UnsupportedEncodingException {<newline46mondego>    String hexCodes = <doubleQuotes46>005400610020007400650020007400ED0020007400FA0020003F0020003A0029<doubleQuotes46>;<newline46mondego>    System.out.println(decode(hexCodes, <doubleQuotes46>UTF-16<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"5960splitHere46","3344847splitHere46","protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>    endSession(request, response);<newline46mondego>}<newline46mondego><newline46mondego>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>    endSession(request, response);<newline46mondego>}<newline46mondego><newline46mondego>private void endSession(HttpServletRequest request, HttpServletResponse response) throws IOException{<newline46mondego>    request.getSession().invalidate();<newline46mondego>    response.sendRedirect(<doubleQuotes46>.<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"5961splitHere46","3344847splitHere46","<error-page><newline46mondego> <error-code>403</error-code><newline46mondego> <location>/EndSessionServlet</location><newline46mondego></error-page><newline46mondego>"
"5962splitHere46","3344847splitHere46","<login-config><newline46mondego><auth-method>FORM</auth-method><newline46mondego><realm-name>This is not used for FORM login</realm-name><newline46mondego><form-login-config><newline46mondego>  <form-login-page>/login.jsp</form-login-page><newline46mondego>  <form-error-page>/EndSessionServlet</form-error-page><newline46mondego></form-login-config><newline46mondego></login-config><newline46mondego>"
"5963splitHere46","3344979splitHere46","EasyMock.expect(...)"
"5964splitHere46","3344979splitHere46","EasyMock.replay(...)"
"5965splitHere46","3344979splitHere46","EasyMock.verify(...)"
"5966splitHere46","3345182splitHere46","table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );<newline46mondego>"
"5967splitHere46","3345433splitHere46","wp"
"5968splitHere46","3345433splitHere46","split"
"5969splitHere46","3345433splitHere46","import java.util.regex.*;<newline46mondego>    import java.util.*;<newline46mondego>    //...<newline46mondego><newline46mondego>    String text = <doubleQuotes46>(  ELT2N ( ELTOK wpSA910 wpSA909 wpSA908 wpSA474 ) )<doubleQuotes46>;<newline46mondego>    String regex =<newline46mondego>        <doubleQuotes46>< (word) < (word) ((?:word )+)> ><doubleQuotes46><newline46mondego>            .replace(<doubleQuotes46> <doubleQuotes46>, <doubleQuotes46>\\s+<doubleQuotes46>)<newline46mondego>            .replace(<doubleQuotes46><<doubleQuotes46>, <doubleQuotes46>\\(<doubleQuotes46>)<newline46mondego>            .replace(<doubleQuotes46>><doubleQuotes46>, <doubleQuotes46>\\)<doubleQuotes46>)<newline46mondego>            .replace(<doubleQuotes46>word<doubleQuotes46>, <doubleQuotes46>\\w+<doubleQuotes46>);<newline46mondego><newline46mondego>    Matcher m = Pattern.compile(regex).matcher(text);<newline46mondego>    if (m.find()) {<newline46mondego>        System.out.printf(<doubleQuotes46>%s; %s;%n%s<doubleQuotes46>,<newline46mondego>            m.group(1),<newline46mondego>            m.group(2),<newline46mondego>            Arrays.toString(m.group(3).split(<doubleQuotes46>\\s+<doubleQuotes46>))<newline46mondego>        );<newline46mondego>    }<newline46mondego>"
"5970splitHere46","3345433splitHere46","ELT2N; ELTOK;<newline46mondego>[wpSA910, wpSA909, wpSA908, wpSA474]<newline46mondego>"
"5971splitHere46","3345433splitHere46","wp"
"5972splitHere46","3345433splitHere46","\3"
"5973splitHere46","3345433splitHere46","split"
"5974splitHere46","3345433splitHere46","Captures"
"5975splitHere46","3345442splitHere46","<mvc:annotation-driven />"
"5976splitHere46","3345442splitHere46","HandlerMapping"
"5977splitHere46","3345442splitHere46","HandlerAdapter"
"5978splitHere46","3345442splitHere46","<mvc:annotation-driven/>"
"5979splitHere46","3345442splitHere46","DefaultAnnotationHandlerMapping"
"5980splitHere46","3345442splitHere46","AnnotationMethodHandlerAdapter"
"5981splitHere46","3345492splitHere46","log4j.logger.org.apache.ibatis=DEBUG<newline46mondego>"
"5982splitHere46","3345895splitHere46","request.getRequestDispatcher(<doubleQuotes46>welcome.xhtml<doubleQuotes46>).forward(request, response);<newline46mondego>"
"5983splitHere46","3345895splitHere46","login.xhtml"
"5984splitHere46","3345895splitHere46","<redirect/>"
"5985splitHere46","3345895splitHere46","ExternalContext#redirect()"
"5986splitHere46","3345895splitHere46","faces-redirect=true"
"5987splitHere46","3345895splitHere46","<h:commandButton value=<doubleQuotes46>login<doubleQuotes46> action=<doubleQuotes46>welcome?faces-redirect=true<doubleQuotes46> /><newline46mondego>"
"5988splitHere46","3345895splitHere46","response.sendRedirect(<doubleQuotes46>welcome.xhtml<doubleQuotes46>);<newline46mondego>"
"5989splitHere46","3345947splitHere46","byte[]"
"5990splitHere46","3345947splitHere46","String"
"5991splitHere46","3345947splitHere46","String(byte[],int,int)"
"5992splitHere46","3345947splitHere46","byte[] myBytes = (<doubleQuotes46>Hello, World!<doubleQuotes46>).getBytes();<newline46mondego>String myString = new String(myBytes, 0, myBytes.length);<newline46mondego>System.out.println(myString);<newline46mondego>"
"5993splitHere46","3345947splitHere46","int readLength = (len > bufSize ? bufSize : len);<newline46mondego>for (int i = 0; i < readLength; i++) {<newline46mondego>    b[off + i] = buffers[PBuf][PByte];<newline46mondego>}<newline46mondego>String metaSt = new String(b, 0, readLength);<newline46mondego>"
"5994splitHere46","3345981splitHere46","public void checkHosts(String subnet){<newline46mondego>   int timeout=1000;<newline46mondego>   for (int i=1;i<254;i++){<newline46mondego>       String host=subnet + <doubleQuotes46>.<doubleQuotes46> + i;<newline46mondego>       if (InetAddress.getByName(host).isReachable(timeout)){<newline46mondego>           System.out.println(host + <doubleQuotes46> is reachable<doubleQuotes46>);<newline46mondego>       }<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"5995splitHere46","3345981splitHere46","checkHosts(<doubleQuotes46>192.168.0<doubleQuotes46>);<newline46mondego>"
"5996splitHere46","3345995splitHere46","PatternSet"
"5997splitHere46","3345995splitHere46","includes"
"5998splitHere46","3345995splitHere46","includesfile"
"5999splitHere46","3345995splitHere46","FileSet"
"6000splitHere46","3346339splitHere46","private void printPermutations(int[] numbers) {<newline46mondego>    for(int i=0;i<numbers.length; i++) {<newline46mondego>      for (int j=i; j<numbers.length; j++) {<newline46mondego>        System.out.println(<doubleQuotes46>[<doubleQuotes46> + numbers[i] + <doubleQuotes46>-<doubleQuotes46>+ numbers[j] +<doubleQuotes46>]<doubleQuotes46>);<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"6001splitHere46","3346339splitHere46","int[] numbers={1,2,3};<newline46mondego>printPermutations(numbers);<newline46mondego>"
"6002splitHere46","3346419splitHere46","java -classpath <doubleQuotes46>C:\Users\FREYERA\Desktop\Test<doubleQuotes46>;<doubleQuotes46>C:\Users\FREYERA\Desktop\Test\test1.jar<doubleQuotes46>;<doubleQuotes46>C:\Users\FREYERA\Desktop\Test\test2.jar<doubleQuotes46>; Sample<newline46mondego>"
"6003splitHere46","3346445splitHere46","InputStreamRequestEntity"
"6004splitHere46","3346445splitHere46","FileRequestEntity"
"6005splitHere46","3346663splitHere46","// Licensed Apache2 (http://www.apache.org/licenses/LICENSE-2.0.txt) <newline46mondego>  import java.util.List;<newline46mondego><newline46mondego>  import java.net.URL;<newline46mondego>  import java.net.URLConnection;<newline46mondego><newline46mondego>  import java.util.Map;<newline46mondego>  import java.util.ArrayList;<newline46mondego>  import java.util.LinkedHashMap;<newline46mondego>  import java.util.regex.Matcher;<newline46mondego>  import java.util.regex.Pattern;<newline46mondego><newline46mondego>  /**<newline46mondego>   * <pre><newline46mondego>   *    StringTemplate t = new StringTemplate(<doubleQuotes46>/catalog/{categoryId}/products/{productId}/summary<doubleQuotes46>);<newline46mondego>   *    t.matches(<doubleQuotes46>/catalog/23/products/12375/summary<doubleQuotes46>); // returns true<newline46mondego>   *    t.match(<doubleQuotes46>/catalog/23/products/12375/summary<doubleQuotes46>);   // returns a map {categoryId=23, productId=12375}<newline46mondego>   * </pre><newline46mondego>   * <newline46mondego>   * @author anaik<newline46mondego>   */<newline46mondego>  public class StringTemplate {<newline46mondego>     /** The meta pattern for  template to match sequence such as: {someVar} */<newline46mondego>     private static final Pattern patternPattern = Pattern.compile(<doubleQuotes46>\\{([^\\{\\}]+)\\}<doubleQuotes46>);<newline46mondego>     /** The  pattern string */<newline46mondego>     private String stringPattern;<newline46mondego>     /** The generated pattern when the stringPattern is parsed */<newline46mondego>     private Pattern thisStringPattern;<newline46mondego>     /** Variable names found in this pattern in that order */<newline46mondego>     private List<String> vars = new ArrayList<String>();<newline46mondego><newline46mondego>     /**<newline46mondego>      * Creates a new StringTemplate from the specified pattern<newline46mondego>      * @param Pattern<newline46mondego>      */<newline46mondego>     private StringTemplate(String stringPattern)  {<newline46mondego>        this.stringPattern = stringPattern;<newline46mondego>        initialize();<newline46mondego>     }<newline46mondego><newline46mondego>     /**<newline46mondego>      * Gets the names of variables - those defined in {variable-name} constructs - in this StringTemplate<newline46mondego>      * in the order they were specified<newline46mondego>      * @return a list of variables or an empty list if no variables were found<newline46mondego>      */<newline46mondego>     public List<String> getVars() {<newline46mondego>        return vars;<newline46mondego>     }<newline46mondego><newline46mondego>     /**<newline46mondego>      * Determine whether the specified <tt>actualString</code> matches with this StringTemplate<newline46mondego>      * @param actualString The actual  to match<newline46mondego>      * @return true iff successfull match<newline46mondego>      */<newline46mondego>     public boolean matches(String actualString)  {<newline46mondego>        return thisStringPattern.matcher(actualString).matches();<newline46mondego>     }<newline46mondego><newline46mondego>     /**<newline46mondego>      * Matches the <tt>actualString</tt> with this StringTemplate and extracts values for all the variables<newline46mondego>      * in this template and returns them as an ordered map (keys defined in the same order as that of<newline46mondego>      * the StringTemplate. If the match was unsuccessfull, an empty map is returned. Note that this method<newline46mondego>      * should be ideally be called after {@link #matches(java.lang.String) } to check whether the <newline46mondego>      * specified actually matches the template<newline46mondego>      */<newline46mondego>     public Map<String, String> match(String actualString) {<newline46mondego>        Matcher m = thisStringPattern.matcher(actualString);<newline46mondego>        Map<String, String> map = new LinkedHashMap<String, String>();<newline46mondego>        if(m.matches())   {<newline46mondego>           int gc = m.groupCount();<newline46mondego>           for(int i = 0; i < gc; i++)   {<newline46mondego>              int g = i + 1;<newline46mondego>              map.put(vars.get(i), actualString.substring(m.start(g), m.end(g)));<newline46mondego>           }<newline46mondego>        }<newline46mondego>        return map;<newline46mondego>     }<newline46mondego><newline46mondego>     private void initialize()  {<newline46mondego>        Matcher m = patternPattern.matcher(stringPattern);<newline46mondego>        StringBuffer builder = new StringBuffer();<newline46mondego><newline46mondego>        while(m.find())   {<newline46mondego>           String var = m.group(1);<newline46mondego>           vars.add(var);<newline46mondego>           m.appendReplacement(builder, <doubleQuotes46>(.*)<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        m.appendTail(builder);<newline46mondego>        String genPattern = builder.toString();<newline46mondego>        thisStringPattern = Pattern.compile(genPattern);<newline46mondego>     }<newline46mondego><newline46mondego>     public static void main(String[] args) throws Throwable  {<newline46mondego>        StringTemplate t = new StringTemplate(args[0]);<newline46mondego>        System.out.println(<doubleQuotes46>Matches with actual Class Identifier: java.lang.String: <doubleQuotes46> + t.matches(args[1]));<newline46mondego>        System.out.println(<doubleQuotes46>Var values: <doubleQuotes46> + t.match(args[1]));<newline46mondego>     }<newline46mondego>  }<newline46mondego>"
"6006splitHere46","3346663splitHere46","tmp$ java StringTemplate <doubleQuotes46>Anand has {n} bags and {n1} apples<doubleQuotes46> <doubleQuotes46>Anand has 23 bags and 500 apples<doubleQuotes46><newline46mondego>"
"6007splitHere46","3346663splitHere46","Matches with actual URI: true<newline46mondego> Var values: {n=23, n1=500}<newline46mondego>"
"6008splitHere46","3346663splitHere46","input = input.replaceAll(<doubleQuotes46>\\$<doubleQuotes46>, <doubleQuotes46>\\\\\\$<doubleQuotes46>);<newline46mondego>  input = input.replaceAll(<doubleQuotes46>\\(<doubleQuotes46>, <doubleQuotes46>\\\\(<doubleQuotes46>);<newline46mondego>  input = input.replaceAll(<doubleQuotes46>\\)<doubleQuotes46>, <doubleQuotes46>\\\\)<doubleQuotes46>);<newline46mondego>  StringTemplate st = new StringTemplate(input);<newline46mondego>"
"6009splitHere46","3346700splitHere46","myObject.setPropertyA(<doubleQuotes46>Foo<doubleQuotes46>).setPropertyB(<doubleQuotes46>Bar<doubleQuotes46>).setPropertyC(<doubleQuotes46>Baz<doubleQuotes46>)...<newline46mondego>"
"6010splitHere46","3346700splitHere46","myObject.setPropertyA(<doubleQuotes46>Foo<doubleQuotes46>);<newline46mondego>myObject.setPropertyB(<doubleQuotes46>Bar<doubleQuotes46>);<newline46mondego>myObject.setPropertyC(<doubleQuotes46>Baz<doubleQuotes46>);<newline46mondego>...<newline46mondego>"
"6011splitHere46","3346803splitHere46","int a = expr1;<newline46mondego>int b = expr2;<newline46mondego>int result = a & b;<newline46mondego>"
"6012splitHere46","3347055splitHere46","parent"
"6013splitHere46","3347055splitHere46","parent"
"6014splitHere46","3347055splitHere46","java.util.TreeMap"
"6015splitHere46","3347055splitHere46","Entry"
"6016splitHere46","3347055splitHere46","left"
"6017splitHere46","3347055splitHere46","right"
"6018splitHere46","3347055splitHere46","parent"
"6019splitHere46","3347400splitHere46","flush()"
"6020splitHere46","3347400splitHere46","close()"
"6021splitHere46","3347400splitHere46","PrintWriter"
"6022splitHere46","3347400splitHere46","FileWriter"
"6023splitHere46","3347400splitHere46","println()"
"6024splitHere46","3347405splitHere46","ProgressDialog"
"6025splitHere46","3347405splitHere46","public class AsyncClass extends AsyncTask<Void, String, Void> {<newline46mondego>    private Context context;<newline46mondego>    ProgressDialog dialog;<newline46mondego><newline46mondego>        public AsyncClass(Context cxt) {<newline46mondego>            context = cxt;<newline46mondego>            dialog = new ProgressDialog(context);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void onPreExecute() {<newline46mondego>            dialog.setTitle(<doubleQuotes46>Please wait<doubleQuotes46>);<newline46mondego>            dialog.show();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected Void doInBackground(Void... unused) {<newline46mondego>            SystemClock.sleep(2000);<newline46mondego>            return (null);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void onPostExecute(Void unused) {<newline46mondego>            dialog.dismiss();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"6026splitHere46","3347614splitHere46","BiMap"
"6027splitHere46","3347614splitHere46","HashBiMap"
"6028splitHere46","3347614splitHere46","inverse()"
"6029splitHere46","3347862splitHere46","public static <T extends Comparable<? super T>> T max(T obj1, T obj2)<newline46mondego>"
"6030splitHere46","3347862splitHere46","? super T"
"6031splitHere46","3347862splitHere46","Comparable<B>"
"6032splitHere46","3347862splitHere46","Comparable<A>"
"6033splitHere46","3347862splitHere46","? super A"
"6034splitHere46","3347862splitHere46","compareTo"
"6035splitHere46","3347862splitHere46","<T extends Comparable<T>>"
"6036splitHere46","3347862splitHere46","Comparable<A>"
"6037splitHere46","3347862splitHere46","compareTo"
"6038splitHere46","3348050splitHere46","/"
"6039splitHere46","3348050splitHere46","box[0] = rowInArray / 3;<newline46mondego>box[1] = columnInArray / 3;<newline46mondego>"
"6040splitHere46","3348155splitHere46","public static long applyLocalTimezoneOffsetMillis(long timestampUTC)<newline46mondego>{<newline46mondego>    long offset = TimeZone.getDefault().getOffset(timestampUTC);<newline46mondego>    return timestampUTC - offset;<newline46mondego>}<newline46mondego>"
"6041splitHere46","3348274splitHere46","try{<newline46mondego>//database stuff<newline46mondego>} finally{<newline46mondego>   db.close<newline46mondego> }<newline46mondego>"
"6042splitHere46","3348397splitHere46","if (annotation.annotationType().equals(javax.validation.Valid.class)){}<newline46mondego>"
"6043splitHere46","3348409splitHere46","07-25 18:56:13.058: DEBUG/dalvikvm(313): newInstance failed: no <init>()<newline46mondego>"
"6044splitHere46","3348477splitHere46","netstat"
"6045splitHere46","3348477splitHere46","C:\> netstat -n | find <doubleQuotes46>:80<doubleQuotes46><newline46mondego>  TCP    192.168.1.33:1930      209.85.129.190:80      ESTABLISHED<newline46mondego>  TCP    192.168.1.33:2749      74.125.39.139:80       ESTABLISHED<newline46mondego>  TCP    192.168.1.33:2861      74.125.171.167:80      TIME_WAIT<newline46mondego>"
"6046splitHere46","3348477splitHere46","find"
"6047splitHere46","3348477splitHere46","netstat -n"
"6048splitHere46","3348477splitHere46","List<String>"
"6049splitHere46","3348477splitHere46","word[0]"
"6050splitHere46","3348477splitHere46","TCP"
"6051splitHere46","3348477splitHere46","word[1]"
"6052splitHere46","3348477splitHere46",":3389"
"6053splitHere46","3348477splitHere46","words[3]"
"6054splitHere46","3348477splitHere46","ESTABLISHED"
"6055splitHere46","3348477splitHere46","word[2]"
"6056splitHere46","3348477splitHere46","remote0"
"6057splitHere46","3348477splitHere46","192.168.0.33,192.168.0.35"
"6058splitHere46","3348477splitHere46","remote0:192.168.0.33"
"6059splitHere46","3348477splitHere46","remote0:192.168.0.35"
"6060splitHere46","3348477splitHere46","remote0"
"6061splitHere46","3348477splitHere46","/connections/list"
"6062splitHere46","3348477splitHere46","/connections/update"
"6063splitHere46","3348516splitHere46","classifier"
"6064splitHere46","3348516splitHere46","deploy:deploy"
"6065splitHere46","3348516splitHere46","deploy"
"6066splitHere46","3348516splitHere46","deploy:deploy-file"
"6067splitHere46","3348516splitHere46","pom.xml"
"6068splitHere46","3348516splitHere46","<project xmlns=<doubleQuotes46>http://maven.apache.org/POM/4.0.0<doubleQuotes46> xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46> xsi:schemaLocation=<doubleQuotes46>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<doubleQuotes46>><newline46mondego>  <modelVersion>4.0.0</modelVersion><newline46mondego>  <properties><newline46mondego>    <jvmClassifier>jdk16</jvmClassifier><newline46mondego>  </properties><newline46mondego>  <groupId>com.stackoverflow.q3341837</groupId><newline46mondego>  <artifactId>Q3341837</artifactId><newline46mondego>  <version>1.0-SNAPSHOT</version><newline46mondego>  <name>Q3341837</name><newline46mondego>  <url>http://maven.apache.org</url><newline46mondego>  <dependencies><newline46mondego>    <dependency><newline46mondego>      <groupId>junit</groupId><newline46mondego>      <artifactId>junit</artifactId><newline46mondego>      <version>3.8.1</version><newline46mondego>      <scope>test</scope><newline46mondego>    </dependency><newline46mondego>  </dependencies><newline46mondego>  <build><newline46mondego>    <plugins><newline46mondego>      <plugin><newline46mondego>        <groupId>org.apache.maven.plugins</groupId><newline46mondego>        <artifactId>maven-jar-plugin</artifactId><newline46mondego>        <version>2.3.1</version><newline46mondego>        <configuration><newline46mondego>          <classifier>${jvmClassifier}</classifier><newline46mondego>        </configuration><newline46mondego>      </plugin><newline46mondego>      <plugin><newline46mondego>        <groupId>org.apache.maven.plugins</groupId><newline46mondego>        <artifactId>maven-deploy-plugin</artifactId><newline46mondego>        <version>2.5</version><newline46mondego>        <configuration><newline46mondego>          <altDeploymentRepository>mine::default::file://${basedir}/target/my-repo</altDeploymentRepository><newline46mondego>        </configuration><newline46mondego>      </plugin><newline46mondego>    </plugins><newline46mondego>  </build><newline46mondego></project><newline46mondego>"
"6069splitHere46","3348516splitHere46","mvn deploy"
"6070splitHere46","3348598splitHere46","Expense"
"6071splitHere46","3348598splitHere46","Category"
"6072splitHere46","3348598splitHere46","Account"
"6073splitHere46","3348598splitHere46","Expense"
"6074splitHere46","3348598splitHere46","Category"
"6075splitHere46","3348598splitHere46","Account"
"6076splitHere46","3348674splitHere46","self.response.out.write(simplejson.dumps(result))<newline46mondego>"
"6077splitHere46","3348709splitHere46","OneToMany"
"6078splitHere46","3348709splitHere46","create table Person (<newline46mondego>    id bigint not null,<newline46mondego>    primary key (id)<newline46mondego>)<newline46mondego><newline46mondego>create table Relationship (<newline46mondego>    id bigint not null,<newline46mondego>    personFrom_id bigint,<newline46mondego>    personTo_id bigint,<newline46mondego>    primary key (id)<newline46mondego>)<newline46mondego><newline46mondego>alter table Relationship <newline46mondego>    add constraint FK499B69164A731563 <newline46mondego>    foreign key (personTo_id) <newline46mondego>    references Person<newline46mondego><newline46mondego>alter table Relationship <newline46mondego>    add constraint FK499B691698EA8314 <newline46mondego>    foreign key (personFrom_id) <newline46mondego>    references Person<newline46mondego>"
"6079splitHere46","3348709splitHere46","ManyToMany"
"6080splitHere46","3348709splitHere46","Person p1 = new Person();<newline46mondego>Person p2 = new Person();<newline46mondego>Relationship r = new Relationship();<newline46mondego><newline46mondego>// create the personFrom bi-directional association<newline46mondego>r.setPersonFrom(p1);<newline46mondego>List<Relationship> relationships = new ArrayList<Relationship>();<newline46mondego>relationships.add(r);<newline46mondego>p1.setRelationships(relationships); // these four lines should be moved to some <newline46mondego>                                    // link management method (see update below).<newline46mondego><newline46mondego>// create the personTo uni-directional association<newline46mondego>r.setPersonTo(p2);<newline46mondego><newline46mondego>session.persist(p2);<newline46mondego>session.persist(p1);<newline46mondego><newline46mondego>assertNotNull(p2.getId());<newline46mondego>assertNotNull(p1.getId());<newline46mondego>assertNotNull(r.getId());<newline46mondego>"
"6081splitHere46","3348709splitHere46","public void addToRelationships(Relationship relationship) {<newline46mondego>    if (this.relationships == null) {<newline46mondego>       this.relationships = new ArrayList<Relationship>();<newline46mondego>    }<newline46mondego>    this.relationships.add(relationship);<newline46mondego>    relationship.setPersonFrom(this);<newline46mondego>}<newline46mondego>"
"6082splitHere46","3348802splitHere46","Customer"
"6083splitHere46","3348802splitHere46","Facility"
"6084splitHere46","3348802splitHere46","addFacility()"
"6085splitHere46","3348802splitHere46","public void addFacility(Facility facility){<newline46mondego>    if (this.facilities == null) { <newline46mondego>        this.facilities = new ArrayList<Facility>();<newline46mondego>    } <newline46mondego>    this.facilities.add(facility);<newline46mondego>    facility.setCustomer(this); // that's the part you're currently missing<newline46mondego>}<newline46mondego>"
"6086splitHere46","3348977splitHere46","getGraphics()"
"6087splitHere46","3348977splitHere46","private void drawCircle(Graphics g, int x, int y, int radius) {<newline46mondego>   g.fillOval(x-radius, y-radius, radius*2, radius*2)<newline46mondego>}<newline46mondego>"
"6088splitHere46","3348977splitHere46","private void drawCircle(int x, int y, int radius) {<newline46mondego>  getGraphics().fillOval(x-radius, y-radius, radius*2, radius*2)<newline46mondego>}<newline46mondego>"
"6089splitHere46","3348977splitHere46","getGraphics()"
"6090splitHere46","3348977splitHere46","null"
"6091splitHere46","3348977splitHere46","public void paint(Graphics g) {<newline46mondego>  super.paint(g);<newline46mondego>  drawCircle(g, 10, 10, 5, 5);<newline46mondego>}<newline46mondego>"
"6092splitHere46","3349257splitHere46","Remote"
"6093splitHere46","3349257splitHere46","Home"
"6094splitHere46","3349257splitHere46","ejb-jar.xml"
"6095splitHere46","3349257splitHere46","@ejb"
"6096splitHere46","3349257splitHere46","<ejbdoclet .. />"
"6097splitHere46","3349257splitHere46","build.xml"
"6098splitHere46","3349286splitHere46",".cmd"
"6099splitHere46","3349286splitHere46","dev_appserver.sh"
"6100splitHere46","3349286splitHere46",".cmd"
"6101splitHere46","3349329splitHere46","OrderBillingMDB"
"6102splitHere46","3349329splitHere46","@Asynchronous"
"6103splitHere46","3349329splitHere46","@Stateless<newline46mondego>public class OrderBillingServiceBean implements OrderBillingService {<newline46mondego>    ...<newline46mondego><newline46mondego>    @Asynchronous<newline46mondego>    public void billOrder(Order order) {<newline46mondego>        try {<newline46mondego>            // Attempt to charge the order.<newline46mondego>            bill(order);<newline46mondego>            // Send email notification of billing success.<newline46mondego>            notifyBillingSuccess(order);<newline46mondego>            order.setStatus(OrderStatus.COMPLETE);<newline46mondego>        } catch (BillingException be) {<newline46mondego>            // Send email notification of billing failure.<newline46mondego>            notifyBillingFailure(be, order);<newline46mondego>            order.setStatus(OrderStatus.BILLING_FAILED);<newline46mondego>        } finally {<newline46mondego>            update(order);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"6104splitHere46","3349329splitHere46","@Asynchronous"
"6105splitHere46","3349329splitHere46","OrderBillingService.billOrder"
"6106splitHere46","3349329splitHere46","billOrder"
"6107splitHere46","3349329splitHere46","java.util.concurrent.Future<V>"
"6108splitHere46","3349329splitHere46","V"
"6109splitHere46","3349329splitHere46","Future<V>"
"6110splitHere46","3349329splitHere46","Future<V>"
"6111splitHere46","3349329splitHere46","billOrder"
"6112splitHere46","3349329splitHere46","billOrder"
"6113splitHere46","3349329splitHere46","@Stateless<newline46mondego>public class OrderBillingServiceBean implements OrderBillingService {<newline46mondego>    ...<newline46mondego><newline46mondego>    @Asynchronous<newline46mondego>    public Future<OrderStatus> billOrder(Order order) {<newline46mondego>        try {<newline46mondego>            // Attempt to charge the order.<newline46mondego>            bill(order);<newline46mondego>            // Send email notification of billing success.<newline46mondego>            notifyBillingSuccess(order);<newline46mondego>            return new AsyncResult<OrderStatus>(OrderStatus.COMPLETE);<newline46mondego>        } catch (BillingException be) {<newline46mondego>            // Send email notification of billing failure.<newline46mondego>            notifyBillingFailure(be, order);<newline46mondego>            return new AsyncResult<OrderStatus><newline46mondego>                (OrderStatus.BILLING_FAILED);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"6114splitHere46","3349329splitHere46","javax.ejb.AsyncResult<V>"
"6115splitHere46","3349329splitHere46","Future<V>"
"6116splitHere46","3349329splitHere46","Future<V>"
"6117splitHere46","3349329splitHere46","Future<V>"
"6118splitHere46","3349405splitHere46","<c:set var=<doubleQuotes46>contextPath<doubleQuotes46> value=<doubleQuotes46>${pageContext.request.contextPath}/<doubleQuotes46> /><newline46mondego><c:set var=<doubleQuotes46>requestURI<doubleQuotes46> value=<doubleQuotes46>${pageContext.request.requestURI}<doubleQuotes46> /><newline46mondego><c:set var=<doubleQuotes46>isPeople<doubleQuotes46> value=<doubleQuotes46>${fn:contains(requestURI, '/People/')}<doubleQuotes46> /><newline46mondego><c:set var=<doubleQuotes46>isJobs<doubleQuotes46>   value=<doubleQuotes46>${fn:contains(requestURI, '/Jobs/') || fn:endsWith(requestURI, contextPath)}<doubleQuotes46> /><newline46mondego>"
"6119splitHere46","3349405splitHere46","fn:endsWith"
"6120splitHere46","3349405splitHere46","<c:set value>"
"6121splitHere46","3349509splitHere46","URL dirUrl = new URL(<doubleQuotes46>file:/<doubleQuotes46> + <doubleQuotes46>path_to_dir<doubleQuotes46> + <doubleQuotes46>/<doubleQuotes46>);             // 1<newline46mondego>URLClassLoader cl = new URLClassLoader(new URL[] {dirUrl},<newline46mondego>                             getClass().class.getClassLoader());  // 2<newline46mondego>Class loadedClass = cl.loadClass(<doubleQuotes46>com.xyz.MyClass<doubleQuotes46>);<newline46mondego>MyClass obj = (MyClass) loadedClass.newInstance();<newline46mondego>obj.doSomething();<newline46mondego>"
"6122splitHere46","3349509splitHere46","URL"
"6123splitHere46","3349509splitHere46","URLClassLoader"
"6124splitHere46","3349515splitHere46","for( String s : values ) {<newline46mondego>     computeSomething( s );<newline46mondego>      ... a dozen of lines here... <newline46mondego>     s = s.trim();// or worst s = getOtherString();<newline46mondego>     ... another dozen of line <newline46mondego>     otherComputation( s );<newline46mondego> }<newline46mondego>"
"6125splitHere46","3349515splitHere46","anotherComputation"
"6126splitHere46","3349515splitHere46","final"
"6127splitHere46","3349515splitHere46","... <newline46mondego>for( final String s : values ) {<newline46mondego>  s = new StringBuilder( s ).reverse().toString();<newline46mondego>}<newline46mondego>"
"6128splitHere46","3349515splitHere46","variable s might already have been assigned"
"6129splitHere46","3349515splitHere46","for( final String s : value ) {<newline46mondego>    doSomething( new InnerClass() {<newline46mondego>       void something() {<newline46mondego>             s.length();// accesing s from within the inner class <newline46mondego>       }<newline46mondego>    });<newline46mondego> }<newline46mondego>"
"6130splitHere46","3349582splitHere46","<servlet-mapping> <newline46mondego>  <servlet-name> <newline46mondego>    default <newline46mondego>  </servlet-name> <newline46mondego>  <url-pattern> <newline46mondego>    /css/*.css <newline46mondego>  </url-pattern> <newline46mondego></servlet-mapping> <newline46mondego><newline46mondego><servlet-mapping> <newline46mondego>  <servlet-name> <newline46mondego>    default <newline46mondego>  </servlet-name> <newline46mondego>  <url-pattern> <newline46mondego>    /js/*.js <newline46mondego>  </url-pattern> <newline46mondego></servlet-mapping> <newline46mondego>"
"6131splitHere46","3349589splitHere46","AffineTransform"
"6132splitHere46","3349589splitHere46","FontRenderContext"
"6133splitHere46","3349589splitHere46","createTransformedShape()"
"6134splitHere46","3349770splitHere46","try {<newline46mondego>        Process process = Runtime.getRuntime().exec(<doubleQuotes46>sqlcmd -E -d \<doubleQuotes46>example\<doubleQuotes46> -Q \<doubleQuotes46>EXEC dbo.procTest;\<doubleQuotes46><doubleQuotes46>);<newline46mondego>        process.waitFor();<newline46mondego>    } catch (IOException e) {<newline46mondego>        // Handler here<newline46mondego>    } catch (InterruptedException e) {<newline46mondego>        // Handler here<newline46mondego>    }<newline46mondego>"
"6135splitHere46","3349780splitHere46","ArithmeticException(<doubleQuotes46>Negative Exponent Error<doubleQuotes46>)"
"6136splitHere46","3349780splitHere46","Integer.MAX_VALUE"
"6137splitHere46","3349851splitHere46","for( int i = 0; i < charArray.length; i+= 2 )<newline46mondego>{<newline46mondego>   charArray[i] = flipArray[i+1];<newline46mondego>   charArray[i+1] = flipArray[i];<newline46mondego>}<newline46mondego>"
"6138splitHere46","3349851splitHere46","0,1"
"6139splitHere46","3349851splitHere46","1,0"
"6140splitHere46","3349851splitHere46","2,3"
"6141splitHere46","3349851splitHere46","3,2"
"6142splitHere46","3349851splitHere46","String input = ...<newline46mondego>StringBuilder builder = new StringBuilder();<newline46mondego><newline46mondego>for( int i = 0; i < input.length(); i += 2 )<newline46mondego>{<newline46mondego>   //guard against odd text lengths<newline46mondego>   if( i+1 < input.length() )<newline46mondego>   {<newline46mondego>      builder.append( input.charAt(i+1) );<newline46mondego>   }   <newline46mondego>   builder.append( input.charAt(i) );<newline46mondego>}<newline46mondego><newline46mondego>String flippedText = builder.toString();<newline46mondego>"
"6143splitHere46","3349934splitHere46","String"
"6144splitHere46","3349934splitHere46","substring"
"6145splitHere46","3349987splitHere46","public class App {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        WithoutStaticMethods without = new WithoutStaticMethods();<newline46mondego>        without.setValue(1);<newline46mondego>        without.calculate();<newline46mondego><newline46mondego>        WithStaticMethods with = new WithStaticMethods();<newline46mondego>        with.setValue(1);<newline46mondego>        with.calculate();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class WithoutStaticMethods {<newline46mondego><newline46mondego>    private int value;<newline46mondego><newline46mondego>    private int helper(int a, int b) {<newline46mondego>        return a * b + 1;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getValue() {<newline46mondego>        return value;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setValue(int value) {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public int calculate() {<newline46mondego>        return helper(value, 2 * value);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class WithStaticMethods {<newline46mondego><newline46mondego>    private int value;<newline46mondego><newline46mondego>    private static int helper(int a, int b) {<newline46mondego>        return a * b + 1;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getValue() {<newline46mondego>        return value;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setValue(int value) {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public int calculate() {<newline46mondego>        return helper(value, 2 * value);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6146splitHere46","3349987splitHere46","helper(...)"
"6147splitHere46","3349987splitHere46","WithoutStaticMethods"
"6148splitHere46","3349987splitHere46","WithStaticMethods"
"6149splitHere46","3349987splitHere46","invokespecial"
"6150splitHere46","3349987splitHere46","calculate()"
"6151splitHere46","3349987splitHere46","0 aload_0<newline46mondego> 1 aload_0<newline46mondego> 2 getfield #2 <app/WithoutStaticMethods.value><newline46mondego> 5 iconst_2<newline46mondego> 6 aload_0<newline46mondego> 7 getfield #2 <app/WithoutStaticMethods.value><newline46mondego>10 imul<newline46mondego>11 invokespecial #3 <app/WithoutStaticMethods.helper><newline46mondego>14 ireturn<newline46mondego>"
"6152splitHere46","3349987splitHere46","aload_0"
"6153splitHere46","3349987splitHere46","invokespecial"
"6154splitHere46","3349987splitHere46","helper(...)"
"6155splitHere46","3349987splitHere46","0 iload_1<newline46mondego>1 iload_2<newline46mondego>2 imul<newline46mondego>3 iconst_1<newline46mondego>4 iadd<newline46mondego>5 ireturn<newline46mondego>"
"6156splitHere46","3349987splitHere46","iload_0"
"6157splitHere46","3349987splitHere46","calculate()"
"6158splitHere46","3349987splitHere46","0 aload_0<newline46mondego> 1 getfield #2 <app/WithStaticMethods.value><newline46mondego> 4 iconst_2<newline46mondego> 5 aload_0<newline46mondego> 6 getfield #2 <app/WithStaticMethods.value><newline46mondego> 9 imul<newline46mondego>10 invokestatic #3 <app/WithStaticMethods.helper><newline46mondego>13 ireturn<newline46mondego>"
"6159splitHere46","3349987splitHere46","aload_0"
"6160splitHere46","3349987splitHere46","invokestatic"
"6161splitHere46","3349987splitHere46","this"
"6162splitHere46","3349987splitHere46","0 iload_0<newline46mondego>1 iload_1<newline46mondego>2 imul<newline46mondego>3 iconst_1<newline46mondego>4 iadd<newline46mondego>5 ireturn<newline46mondego>"
"6163splitHere46","3350344splitHere46","props.put(<doubleQuotes46>mail.smtp.starttls.enable<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>"
"6164splitHere46","3350344splitHere46","props.put(<doubleQuotes46>mail.smtp.port<doubleQuotes46>, <doubleQuotes46>587<doubleQuotes46>);<newline46mondego>"
"6165splitHere46","3350344splitHere46","props.put(<doubleQuotes46>mail.smtp.socketFactory.port<doubleQuotes46>, <doubleQuotes46>587<doubleQuotes46>);<newline46mondego>props.put(<doubleQuotes46>mail.smtp.socketFactory.fallback<doubleQuotes46>, <doubleQuotes46>false<doubleQuotes46>);<newline46mondego>"
"6166splitHere46","3350442splitHere46","ClassLoader"
"6167splitHere46","3350442splitHere46","URLClassLoader"
"6168splitHere46","3350442splitHere46","URL[]"
"6169splitHere46","3350442splitHere46","File"
"6170splitHere46","3350442splitHere46","URL"
"6171splitHere46","3350442splitHere46","File"
"6172splitHere46","3350442splitHere46","File.toURL()"
"6173splitHere46","3350442splitHere46","URL"
"6174splitHere46","3350442splitHere46","File.toURL()"
"6175splitHere46","3350442splitHere46","URLClassLoader"
"6176splitHere46","3350442splitHere46","URL"
"6177splitHere46","3350654splitHere46","NodeList nodes = (NodeList) xPath.evaluate(expression,inputSource, XPathConstants.NODESET);<newline46mondego>"
"6178splitHere46","3350654splitHere46","org.w3c.dom.NodeList"
"6179splitHere46","3350699splitHere46","EntityManagerFactory"
"6180splitHere46","3350699splitHere46","EntityManagerFactory"
"6181splitHere46","3350699splitHere46","EntityManager"
"6182splitHere46","3350699splitHere46","EntityManagerFactory"
"6183splitHere46","3350699splitHere46","close"
"6184splitHere46","3350699splitHere46","EntityManagerFactory"
"6185splitHere46","3350699splitHere46","EntityManager"
"6186splitHere46","3350699splitHere46","EntityManager"
"6187splitHere46","3350699splitHere46","EntityManager"
"6188splitHere46","3350699splitHere46","EntityManager"
"6189splitHere46","3350706splitHere46","setTabComponentAt([each index], [a label with a popup attached])"
"6190splitHere46","3350816splitHere46","String.matches"
"6191splitHere46","3350816splitHere46","<doubleQuotes46>^.*(?:\\*.*){2}$<doubleQuotes46><newline46mondego>"
"6192splitHere46","3350816splitHere46","<doubleQuotes46>^[^*]*(?:\\*[^*]*){2}$<doubleQuotes46><newline46mondego>"
"6193splitHere46","3350832splitHere46","Thread.currentThread().getStackTrace()<newline46mondego>"
"6194splitHere46","3350991splitHere46","emailId"
"6195splitHere46","3350991splitHere46","User"
"6196splitHere46","3350991splitHere46","ManyToOne"
"6197splitHere46","3350991splitHere46","OneToOne"
"6198splitHere46","3350991splitHere46","ManyToOne"
"6199splitHere46","3350991splitHere46","@ManyToOne(fetch=FetchType.EAGER)<newline46mondego>@JoinColumn(name=<doubleQuotes46>USERDETAILS_EMAIL_ID<doubleQuotes46>, referencedColumnName=<doubleQuotes46>EMAIL_ID<doubleQuotes46>)<newline46mondego>private User userDetails;<newline46mondego>"
"6200splitHere46","3350991splitHere46","fetch"
"6201splitHere46","3350991splitHere46","EAGER"
"6202splitHere46","3350991splitHere46","name"
"6203splitHere46","3350991splitHere46","referencedColumn"
"6204splitHere46","3350991splitHere46","JoinColumn"
"6205splitHere46","3350991splitHere46","JoinColumn"
"6206splitHere46","3350991splitHere46","JoinColumn"
"6207splitHere46","3350991splitHere46","JoinColumn"
"6208splitHere46","3350991splitHere46","name"
"6209splitHere46","3350991splitHere46","referencedColumnName"
"6210splitHere46","3350991splitHere46","Column"
"6211splitHere46","3350991splitHere46","referencedColumnName"
"6212splitHere46","3351024splitHere46","java.util.Scanner"
"6213splitHere46","3351024splitHere46","Scanner sc = new Scanner(<doubleQuotes46>12+3 - 456<doubleQuotes46>).useDelimiter(<doubleQuotes46>\\b<doubleQuotes46>);<newline46mondego>while (sc.hasNext()) {<newline46mondego>    if (sc.hasNextInt()) {<newline46mondego>        int num = sc.nextInt();<newline46mondego>        System.out.printf(<doubleQuotes46>Got an int [%s]%n<doubleQuotes46>, num);<newline46mondego>    } else {<newline46mondego>        String op = sc.next().trim();<newline46mondego>        System.out.printf(<doubleQuotes46>Got an op [%s]%n<doubleQuotes46>, op);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6214splitHere46","3351024splitHere46","Got an int [12]<newline46mondego>Got an op [+]<newline46mondego>Got an int [3]<newline46mondego>Got an op [-]<newline46mondego>Got an int [456]<newline46mondego>"
"6215splitHere46","3351024splitHere46","\b"
"6216splitHere46","3351024splitHere46","\w"
"6217splitHere46","3351024splitHere46","\W"
"6218splitHere46","3351024splitHere46","Scanner"
"6219splitHere46","3351024splitHere46","String"
"6220splitHere46","3351024splitHere46","int"
"6221splitHere46","3351024splitHere46","hasNextInt()"
"6222splitHere46","3351024splitHere46","Scanner"
"6223splitHere46","3351093splitHere46","n"
"6224splitHere46","3351106splitHere46","String rawHtml = IOUtils.toString(new URL(<doubleQuotes46>http://yahoo.com<doubleQuotes46>).openStream());<newline46mondego>"
"6225splitHere46","3351135splitHere46","<c:set>"
"6226splitHere46","3351135splitHere46","value"
"6227splitHere46","3351135splitHere46","<c:set var=<doubleQuotes46>dateTimeDisplayFormat<doubleQuotes46>><newline46mondego>    <spring:message code=<doubleQuotes46>display.dateFormat<doubleQuotes46> /><newline46mondego></c:set><newline46mondego><newline46mondego><c:set var=<doubleQuotes46>currentDateTime<doubleQuotes46> scope=<doubleQuotes46>page<doubleQuotes46>><newline46mondego>    <%= new SimpleDateFormat(${dateTimeDisplayFormat}).format(new Date()) %><newline46mondego></c:set>    <newline46mondego>"
"6228splitHere46","3351135splitHere46","<c:set>"
"6229splitHere46","3351135splitHere46","<spring:message>"
"6230splitHere46","3351135splitHere46","<fmt:formatDate>"
"6231splitHere46","3351135splitHere46","<spring:message code=<doubleQuotes46>display.dateFormat<doubleQuotes46> var=<doubleQuotes46>dateTimeDisplayFormat<doubleQuotes46>/><newline46mondego><fmt:formatDate pattern=<doubleQuotes46>${dateTimeDisplayFormat}<doubleQuotes46> var=<doubleQuotes46>currentDateTime<doubleQuotes46> scope=<doubleQuotes46>page<doubleQuotes46>/><newline46mondego>"
"6232splitHere46","3351164splitHere46","/usr/bin/java"
"6233splitHere46","3351164splitHere46","/etc/alternatives/java"
"6234splitHere46","3351164splitHere46","/etc/alternatives/java"
"6235splitHere46","3351164splitHere46","/etc/alternatives/java"
"6236splitHere46","3351295splitHere46","<h:selectOneMenu id=<doubleQuotes46>slaView<doubleQuotes46> value=<doubleQuotes46>#{LoginForm.slaView}<doubleQuotes46> required=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>            <f:selectItems value=<doubleQuotes46>#{LoginForm.viewList}<doubleQuotes46> /><newline46mondego>        </h:selectOneMenu><newline46mondego>"
"6237splitHere46","3351295splitHere46","viewList=ddC.getViewList();<newline46mondego>"
"6238splitHere46","3351295splitHere46","getViewList"
"6239splitHere46","3351400splitHere46","TreeMap"
"6240splitHere46","3351400splitHere46","hashCode()"
"6241splitHere46","3351400splitHere46","equals()"
"6242splitHere46","3351400splitHere46","Comparable"
"6243splitHere46","3351441splitHere46","<%@ page import=<doubleQuotes46>CategoryTable<doubleQuotes46> %><newline46mondego>"
"6244splitHere46","3351772splitHere46","contentType"
"6245splitHere46","3351772splitHere46","<jsp:directive.page pageEncoding=<doubleQuotes46>utf-8<doubleQuotes46> contentType=<doubleQuotes46>application/xhtml+xml<doubleQuotes46> /><newline46mondego>"
"6246splitHere46","3351772splitHere46","<jsp:directive.page contentType=<doubleQuotes46>application/xhtml+xml; charset=UTF-8<doubleQuotes46> <newline46mondego>     pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46> /><newline46mondego>"
"6247splitHere46","3351772splitHere46","<jsp:directive.page pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46><newline46mondego>      contentType=<doubleQuotes46>application/xhtml+xml; charset=UTF-8<doubleQuotes46> /><newline46mondego>"
"6248splitHere46","3351776splitHere46","JTextArea"
"6249splitHere46","3351789splitHere46","DateFormat.getTimeInstance(...)"
"6250splitHere46","3351789splitHere46","DateFormat"
"6251splitHere46","3351789splitHere46","SimpleDateFormat"
"6252splitHere46","3351789splitHere46","toPattern()"
"6253splitHere46","3351789splitHere46","applyPattern(String)"
"6254splitHere46","3351790splitHere46","public class ...... {<newline46mondego><newline46mondego>  private static Selenium selenium;<newline46mondego><newline46mondego>  @BeforeClass<newline46mondego>  public static void initSelenium() {<newline46mondego>     selenium = new DefaultSelenium(...); // or initialize it in any other way<newline46mondego>  }<newline46mondego><newline46mondego>  @Test<newline46mondego>  public void testA {...}<newline46mondego><newline46mondego>  @Test<newline46mondego>  pulic void testB {...}<newline46mondego><newline46mondego>  @AfterClass<newline46mondego>  public static void closeBrowsers() throws Exception { <newline46mondego>    selenium.stop(); <newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6255splitHere46","3351934splitHere46","java.text.Normalizer"
"6256splitHere46","3351981splitHere46","this"
"6257splitHere46","3351981splitHere46","$p"
"6258splitHere46","3351981splitHere46","when<newline46mondego>    ObservedMutation($p : position)<newline46mondego>    Position(this == $p)<newline46mondego>"
"6259splitHere46","3351999splitHere46","c:\workspace\config"
"6260splitHere46","3352064splitHere46","Draw(x,y,color)"
"6261splitHere46","3352302splitHere46","Object[] values = {  }; // values here<newline46mondego>Type[] types = {  }; // value types here<newline46mondego>criteria.add(Restrictions.sqlRestriction(<doubleQuotes46>sql query here<doubleQuotes46>, values, types));<newline46mondego>"
"6262splitHere46","3352585splitHere46","<p:dataTable dynamic=<doubleQuotes46>true<doubleQuotes46>>"
"6263splitHere46","3352585splitHere46","firstrow"
"6264splitHere46","3352796splitHere46","String[]"
"6265splitHere46","3352796splitHere46","String"
"6266splitHere46","3352796splitHere46","ExternalContext#getRequestParameterMap()"
"6267splitHere46","3352796splitHere46","Map<String, String> parameterMap = (Map<String, String>) externalContext.getRequestParameterMap();<newline46mondego>String param = parameterMap.get(<doubleQuotes46>paramName<doubleQuotes46>);<newline46mondego>"
"6268splitHere46","3352796splitHere46","UINamingContainer"
"6269splitHere46","3352796splitHere46","<input>"
"6270splitHere46","3352798splitHere46","=="
"6271splitHere46","3352798splitHere46","Integer"
"6272splitHere46","3352798splitHere46","String"
"6273splitHere46","3352798splitHere46","equals"
"6274splitHere46","3352798splitHere46","=="
"6275splitHere46","3352798splitHere46","null"
"6276splitHere46","3352798splitHere46","NullPointerException"
"6277splitHere46","3352798splitHere46","String"
"6278splitHere46","3352798splitHere46","=="
"6279splitHere46","3352798splitHere46","!="
"6280splitHere46","3352798splitHere46","Integer i = null;<newline46mondego>String str = null;<newline46mondego><newline46mondego>if (i == null) {   // Nothing happens<newline46mondego>}<newline46mondego>if (str == null) { // Nothing happens<newline46mondego>}<newline46mondego>if (str == <doubleQuotes46>0<doubleQuotes46>) {  // Nothing happens<newline46mondego>}<newline46mondego>"
"6281splitHere46","3352798splitHere46","=="
"6282splitHere46","3352798splitHere46","System.out.println(new Integer(0) == new Integer(0)); // <doubleQuotes46>false<doubleQuotes46><newline46mondego>System.out.println(<doubleQuotes46>X<doubleQuotes46> == <doubleQuotes46>x<doubleQuotes46>.toUpperCase()); // <doubleQuotes46>false<doubleQuotes46><newline46mondego>"
"6283splitHere46","3352798splitHere46","=="
"6284splitHere46","3352798splitHere46","=="
"6285splitHere46","3352798splitHere46","!="
"6286splitHere46","3352798splitHere46","int"
"6287splitHere46","3352798splitHere46","long"
"6288splitHere46","3352798splitHere46","float or"
"6289splitHere46","3352798splitHere46","Integer i = null;<newline46mondego><newline46mondego>if (i == 0) {  //NullPointerException<newline46mondego>}<newline46mondego>"
"6290splitHere46","3352798splitHere46","=="
"6291splitHere46","3352798splitHere46","NullPointerException"
"6292splitHere46","3352798splitHere46","Integer"
"6293splitHere46","3352798splitHere46","int"
"6294splitHere46","3352798splitHere46","r"
"6295splitHere46","3352798splitHere46","null"
"6296splitHere46","3352798splitHere46","NullPointerException"
"6297splitHere46","3352798splitHere46","=="
"6298splitHere46","3352798splitHere46","!="
"6299splitHere46","3352798splitHere46","=="
"6300splitHere46","3352798splitHere46","!="
"6301splitHere46","3352798splitHere46","Integers"
"6302splitHere46","3352798splitHere46","=="
"6303splitHere46","3352798splitHere46","equals()"
"6304splitHere46","3352798splitHere46","int num = Integer.getInteger(<doubleQuotes46>123<doubleQuotes46>)"
"6305splitHere46","3352798splitHere46","NullPointerException"
"6306splitHere46","3352798splitHere46","String.equals"
"6307splitHere46","3352798splitHere46","=="
"6308splitHere46","3352956splitHere46","final MTSceneTexture sceneTexture = new MTSceneTexture(mtApplication,0, 0, mtApplication.width, mtApplication.height, drawingScene);<newline46mondego>    sceneTexture.getFbo().clear(true, 255, 255, 255, 0, true);        <newline46mondego>    sceneTexture.setStrokeColor(new MTColor(155,155,155));<newline46mondego><newline46mondego>    //Background<newline46mondego>    MTRectangle background = new MTRectangle(0,0,mtApplication.width, mtApplication.height , mtApplication);<newline46mondego>    background.setFillColor(new MTColor(255,244,150,255));<newline46mondego><newline46mondego>    //Add the scene texture as a child of the background rectangle so the scene texture is drawn in front<newline46mondego>    background.addChild(sceneTexture);<newline46mondego>    frame.addChild(background);<newline46mondego>"
"6309splitHere46","3353020splitHere46","short"
"6310splitHere46","3353020splitHere46","Short.parseShort(string)"
"6311splitHere46","3353020splitHere46","UnsignedByte"
"6312splitHere46","3353020splitHere46","new UnsignedByte(sting);<newline46mondego>new UnsignedByte(integerValue);<newline46mondego>"
"6313splitHere46","3353140splitHere46","System.getProperty(<doubleQuotes46>org.xml.sax.driver<doubleQuotes46>) <newline46mondego>System.getProperty(<doubleQuotes46>java.version<doubleQuotes46>)<newline46mondego>System.getProperty(<doubleQuotes46>java.vm.version<doubleQuotes46>)<newline46mondego>System.getProperty(<doubleQuotes46>os.name<doubleQuotes46>)<newline46mondego>System.getProperty(<doubleQuotes46>os.version<doubleQuotes46>)<newline46mondego>System.getProperty(<doubleQuotes46>os.arch<doubleQuotes46>)<newline46mondego>"
"6314splitHere46","3353714splitHere46","*.xhtml"
"6315splitHere46","3353714splitHere46","<jsp:>"
"6316splitHere46","3353714splitHere46","*.jsp"
"6317splitHere46","3353714splitHere46","JspServlet"
"6318splitHere46","3353714splitHere46","FacesServlet"
"6319splitHere46","3353714splitHere46","<!DOCTYPE html><newline46mondego><html xmlns=<doubleQuotes46>http://www.w3.org/1999/xhtml<doubleQuotes46><newline46mondego>    xmlns:f=<doubleQuotes46>http://java.sun.com/jsf/core<doubleQuotes46><newline46mondego>    xmlns:h=<doubleQuotes46>http://java.sun.com/jsf/html<doubleQuotes46>><newline46mondego>    <h:head><newline46mondego>        <title>Title</title><newline46mondego>    </h:head><newline46mondego>    <h:body><newline46mondego>        <h:inputText value=<doubleQuotes46>#{userBean.id}<doubleQuotes46>/><newline46mondego>    </h:body><newline46mondego></html><newline46mondego>"
"6320splitHere46","3353714splitHere46","<h:form>"
"6321splitHere46","3353714splitHere46","<!DOCTYPE html>"
"6322splitHere46","3353714splitHere46","text/html"
"6323splitHere46","3353714splitHere46","UTF-8"
"6324splitHere46","3353728splitHere46","@ElementMap(entry=<doubleQuotes46>property<doubleQuotes46>, value=<doubleQuotes46>value<doubleQuotes46>, attribute=true, inline=true)<newline46mondego>private Map<String, String> map;<newline46mondego>"
"6325splitHere46","3354100splitHere46","Document document = new Document(<doubleQuotes46>import java.util.List;\n\nclass X\n{\n\n\tpublic void deleteme()\n\t{\n\t}\n\n}\n<doubleQuotes46>);<newline46mondego>ASTParser parser = ASTParser.newParser(AST.JLS3);<newline46mondego>parser.setSource(document.get().toCharArray());<newline46mondego>CompilationUnit cu = (CompilationUnit)parser.createAST(null);<newline46mondego>cu.recordModifications();<newline46mondego>"
"6326splitHere46","3354100splitHere46","List<AbstractTypeDeclaration> types = cu.types();<newline46mondego>for(AbstractTypeDeclaration type : types) {<newline46mondego>    if(type.getNodeType() == ASTNode.TYPE_DECLARATION) {<newline46mondego>        // Class def found<newline46mondego>        List<BodyDeclaration> bodies = type.bodyDeclarations();<newline46mondego>        for(BodyDeclaration body : bodies) {<newline46mondego>            if(body.getNodeType() == ASTNode.METHOD_DECLARATION) {<newline46mondego>                MethodDeclaration method = (MethodDeclaration)body;<newline46mondego>                System.out.println(<doubleQuotes46>method declaration: <doubleQuotes46>);<newline46mondego>                System.out.println(<doubleQuotes46>name: <doubleQuotes46> + method.getName().getFullyQualifiedName());<newline46mondego>                System.out.println(<doubleQuotes46>modifiers: <doubleQuotes46> + method.getModifiers());<newline46mondego>                System.out.println(<doubleQuotes46>return type: <doubleQuotes46> + method.getReturnType2().toString());<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6327splitHere46","3354100splitHere46","org.eclipse.jdt.core_xxxx.jar<newline46mondego>org.eclipse.core.resources_xxxx.jar<newline46mondego>org.eclipse.core.jobs_xxxx.jar<newline46mondego>org.eclipse.core.runtime_xxxx.jar<newline46mondego>org.eclipse.core.contenttype_xxxx.jar<newline46mondego>org.eclipse.equinox.common_xxxx.jar<newline46mondego>org.eclipse.equinox.preferences_xxxx.jar<newline46mondego>org.eclipse.osgi_xxxx.jar<newline46mondego>org.eclipse.text_xxxx.jar<newline46mondego>"
"6328splitHere46","3354119splitHere46","getResourceAsStream()"
"6329splitHere46","3354119splitHere46","ByteArrayInputStream"
"6330splitHere46","3354119splitHere46","URLClassLoader"
"6331splitHere46","3354180splitHere46","<a>"
"6332splitHere46","3354180splitHere46","<h:outputLink>"
"6333splitHere46","3354259splitHere46","t:selectManyCheckbox layout=<doubleQuotes46>spread<doubleQuotes46>"
"6334splitHere46","3354259splitHere46","h:selectBooleanCheckbox"
"6335splitHere46","3354259splitHere46","Map<Long, Boolean>"
"6336splitHere46","3354259splitHere46","Long"
"6337splitHere46","3354259splitHere46","Boolean"
"6338splitHere46","3354259splitHere46","public class Bean {<newline46mondego>    private List<Entity> entities;<newline46mondego>    private Map<Long, Boolean> checked = new HashMap<Long, Boolean>();<newline46mondego><newline46mondego>    public void submit() {<newline46mondego>        for (Entity entity : entities) {<newline46mondego>            if (checked.get(entity.getId())) {<newline46mondego>                // Entity is checked. Do your thing here.<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"6339splitHere46","3354259splitHere46","<h:dataTable value=<doubleQuotes46>#{bean.entities}<doubleQuotes46> var=<doubleQuotes46>entity<doubleQuotes46>><newline46mondego>    <h:column><newline46mondego>        <h:selectBooleanCheckbox value=<doubleQuotes46>#{bean.checked[entity.id]}<doubleQuotes46> /><newline46mondego>    </h:column><newline46mondego>    ...<newline46mondego></h:dataTable><newline46mondego><h:commandButton value=<doubleQuotes46>submit<doubleQuotes46> action=<doubleQuotes46>#{bean.submit}<doubleQuotes46> /><newline46mondego>"
"6340splitHere46","3354259splitHere46","Map<Long, Boolean>"
"6341splitHere46","3354321splitHere46","org.hibernate.cfg.SettingsFactory"
"6342splitHere46","3354409splitHere46","@Docu"
"6343splitHere46","3354409splitHere46","description"
"6344splitHere46","3354409splitHere46","import java.lang.annotation.ElementType;<newline46mondego>import java.lang.annotation.Retention;<newline46mondego>import java.lang.annotation.RetentionPolicy;<newline46mondego>import java.lang.annotation.Target;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class DokuGenerator {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        new DokuGenerator(StaticClass.class, StaticClass2.class);<newline46mondego>    }<newline46mondego><newline46mondego>    public DokuGenerator(Class<?>... classesToDokument) throws Exception {<newline46mondego>        List<Docu> documentAnnotations = getDocumentAnnotations(classesToDokument);<newline46mondego>        printDocumentation(documentAnnotations);<newline46mondego>    }<newline46mondego><newline46mondego>    private List<Docu> getDocumentAnnotations(Class<?>... classesToDokument)<newline46mondego>            throws Exception {<newline46mondego>        List<Docu> result = new ArrayList<Docu>();<newline46mondego>        for (Class<?> c : classesToDokument)<newline46mondego>            if (c.isAnnotationPresent(Docu.class))<newline46mondego>                result.add(c.getAnnotation(Docu.class));<newline46mondego>        return result;<newline46mondego>    }<newline46mondego><newline46mondego>    private void printDocumentation(List<Docu> toDocument) {<newline46mondego>        for (Docu m : toDocument)<newline46mondego>            System.out.println(m.description());<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>@Target(ElementType.TYPE)<newline46mondego>@Retention(RetentionPolicy.RUNTIME)<newline46mondego>@interface Docu {<newline46mondego>    String description();<newline46mondego>}<newline46mondego><newline46mondego>@Docu(description = <doubleQuotes46>This is a static class!<doubleQuotes46>)<newline46mondego>class StaticClass {<newline46mondego>}<newline46mondego><newline46mondego>@Docu(description = <doubleQuotes46>This is another static class!<doubleQuotes46>)<newline46mondego>class StaticClass2 {<newline46mondego>}<newline46mondego>"
"6345splitHere46","3354409splitHere46","This is a static class!  <newline46mondego>This is another static class!<newline46mondego>"
"6346splitHere46","3354409splitHere46","@Docu"
"6347splitHere46","3354409splitHere46","import java.lang.annotation.Annotation;<newline46mondego>import java.lang.annotation.ElementType;<newline46mondego>import java.lang.annotation.Retention;<newline46mondego>import java.lang.annotation.RetentionPolicy;<newline46mondego>import java.lang.annotation.Target;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.Arrays;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class DokuGenerator {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        new DokuGenerator(StaticClass.class, StaticClass2.class,<newline46mondego>                DynamicClass.class);<newline46mondego>    }<newline46mondego><newline46mondego>    public DokuGenerator(Class<?>... classesToDokument) throws Exception {<newline46mondego>        List<Docu> documentAnnotations = getDocumentAnnotations(classesToDokument);<newline46mondego>        printDocumentation(documentAnnotations);<newline46mondego>    }<newline46mondego><newline46mondego>    private List<Docu> getDocumentAnnotations(Class<?>... classesToDokument)<newline46mondego>            throws Exception {<newline46mondego>        List<Docu> result = new ArrayList<Docu>();<newline46mondego>        for (Class<?> c : classesToDokument)<newline46mondego>            if (c.isAnnotationPresent(Docu.class))<newline46mondego>                result.add(c.getAnnotation(Docu.class));<newline46mondego>            else if (Arrays.asList(c.getInterfaces()).contains(Docu.class))<newline46mondego>                result.add((Docu) c.newInstance());<newline46mondego>        return result;<newline46mondego>    }<newline46mondego><newline46mondego>    private void printDocumentation(List<Docu> toDocument) {<newline46mondego>        for (Docu m : toDocument)<newline46mondego>            System.out.println(m.description());<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>@Target(ElementType.TYPE)<newline46mondego>@Retention(RetentionPolicy.RUNTIME)<newline46mondego>@interface Docu {<newline46mondego>    String description();<newline46mondego>}<newline46mondego><newline46mondego>@Docu(description = <doubleQuotes46>This is a static class!<doubleQuotes46>)<newline46mondego>class StaticClass {<newline46mondego>}<newline46mondego><newline46mondego>@Docu(description = <doubleQuotes46>This is another static class!<doubleQuotes46>)<newline46mondego>class StaticClass2 {<newline46mondego>}<newline46mondego><newline46mondego>class DynamicClass implements Docu {<newline46mondego><newline46mondego>    public DynamicClass() {<newline46mondego>        try {<newline46mondego>            Thread.sleep((long) (Math.random() * 100));<newline46mondego>        } catch (InterruptedException e) {<newline46mondego>            // ignore exception to make debugging a little harder<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String description() {<newline46mondego>        long millis = System.currentTimeMillis();<newline46mondego>        new DynamicClass();<newline46mondego>        millis = System.currentTimeMillis() - millis;<newline46mondego>        return <doubleQuotes46>This is a dynamic class. I run on <doubleQuotes46><newline46mondego>                + System.getProperty(<doubleQuotes46>os.name<doubleQuotes46>)<newline46mondego>                + <doubleQuotes46>. The construction of an instance of this class run for <doubleQuotes46><newline46mondego>                + millis + <doubleQuotes46> milliseconds.<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Class<? extends Annotation> annotationType() {<newline46mondego>        return Docu.class;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6348splitHere46","3354409splitHere46","This is a static class!  <newline46mondego>This is another static class!  <newline46mondego>This is a dynamic class. I run on Windows XP. The construction of an instance of this class run for 47 milliseconds.<newline46mondego>"
"6349splitHere46","3354521splitHere46","intent"
"6350splitHere46","3354521splitHere46","startActivity"
"6351splitHere46","3354521splitHere46","startActivityForResult"
"6352splitHere46","3354521splitHere46","setContentView"
"6353splitHere46","3354799splitHere46","a.waitFor();<newline46mondego>"
"6354splitHere46","3354808splitHere46","cxt.startActivity(new Intent(cxt, AnotherActivity.class));<newline46mondego>"
"6355splitHere46","3354808splitHere46","Intent intent = new Intent(cxt, AnotherActivity.class);<newline46mondego>Log.d(toString(), <doubleQuotes46>intent = <doubleQuotes46> + intent.toString());<newline46mondego>cxt.startActivity(intent);<newline46mondego>"
"6356splitHere46","3354866splitHere46","hashCode()"
"6357splitHere46","3354866splitHere46","equals()"
"6358splitHere46","3354866splitHere46","hashCode()"
"6359splitHere46","3354866splitHere46","equals()"
"6360splitHere46","3354866splitHere46","hashCode()"
"6361splitHere46","3354866splitHere46","equals()"
"6362splitHere46","3354892splitHere46","characters()"
"6363splitHere46","3354892splitHere46","Nation Created Our World & everything in it"
"6364splitHere46","3354892splitHere46","Nation Created Our World &amp; everything in it"
"6365splitHere46","3354892splitHere46","Nation Created Our World"
"6366splitHere46","3354892splitHere46","&amp;"
"6367splitHere46","3354892splitHere46","everything in it"
"6368splitHere46","3354998splitHere46","<a(?![^>]*target=) [^>]*>.*?</a><newline46mondego>"
"6369splitHere46","3355022splitHere46","/*/bar[position() >= 100 and not(position() > 200)]<newline46mondego>"
"6370splitHere46","3355022splitHere46","bar"
"6371splitHere46","3355022splitHere46","//"
"6372splitHere46","3355022splitHere46","//"
"6373splitHere46","3355151splitHere46","xmlns:content"
"6374splitHere46","3355151splitHere46","namespace"
"6375splitHere46","3355151splitHere46","@XmlElement"
"6376splitHere46","3355151splitHere46","@XmlRootElement"
"6377splitHere46","3355151splitHere46","rssRoot"
"6378splitHere46","3355151splitHere46","rss"
"6379splitHere46","3355151splitHere46","@XmlRootElement(name = <doubleQuotes46>rss<doubleQuotes46>)"
"6380splitHere46","3355264splitHere46","en_US"
"6381splitHere46","3355264splitHere46","message_en_US.properties"
"6382splitHere46","3355264splitHere46","en_US"
"6383splitHere46","3355264splitHere46","en"
"6384splitHere46","3355264splitHere46","en_US"
"6385splitHere46","3355264splitHere46","en_US"
"6386splitHere46","3355264splitHere46","en_US"
"6387splitHere46","3355264splitHere46","en"
"6388splitHere46","3355264splitHere46","en_US"
"6389splitHere46","3355264splitHere46","en"
"6390splitHere46","3355399splitHere46","SoftReference"
"6391splitHere46","3355399splitHere46","OutOfMemoryError"
"6392splitHere46","3355436splitHere46","select deptno from<newline46mondego>  ( select deptno, rownum as rn from<newline46mondego>      ( select DISTINCT deptno<newline46mondego>        from   emp<newline46mondego>        order by deptno<newline46mondego>      )<newline46mondego>    where rownum < :pagenum*100<newline46mondego>  )<newline46mondego>where rn > (:pagenum-1)*100;<newline46mondego>"
"6393splitHere46","3355547splitHere46","public class Painter {<newline46mondego>    private List<Paintable> paintableObjects;<newline46mondego><newline46mondego>    public Painter(){<newline46mondego>       paintableObjects = new ArrayList<Paintable>();<newline46mondego>    }<newline46mondego><newline46mondego>    public void paintAllObjects(){<newline46mondego>        for(Paintable paintable : paintableObjects){<newline46mondego>            paintable.paint();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public interface Paintable {<newline46mondego>     public void paint();<newline46mondego>}<newline46mondego>"
"6394splitHere46","3355547splitHere46","paintFences()"
"6395splitHere46","3355547splitHere46","paintRocks()"
"6396splitHere46","3355547splitHere46","Collection"
"6397splitHere46","3355556splitHere46","NSArray"
"6398splitHere46","3355556splitHere46","NSDictionary"
"6399splitHere46","3355556splitHere46","NSSet"
"6400splitHere46","3355556splitHere46","java.util.List"
"6401splitHere46","3355639splitHere46","onListItemClick"
"6402splitHere46","3355639splitHere46","setEnabled(int position, boolean enabled)"
"6403splitHere46","3355666splitHere46","if (<doubleQuotes46>a<doubleQuotes46>.equals(KeyEvent.getKeyChar()))<newline46mondego>    System.out.println(<doubleQuotes46>It's a letter<doubleQuotes46>)<newline46mondego>"
"6404splitHere46","3355827splitHere46","file.delete()"
"6405splitHere46","3355922splitHere46","byte[]"
"6406splitHere46","3355922splitHere46","ByteBuffer"
"6407splitHere46","3355922splitHere46","URLClassLoader.newInstance"
"6408splitHere46","3355922splitHere46","URL"
"6409splitHere46","3355922splitHere46","URLHandler"
"6410splitHere46","3355985splitHere46","public class FlexTableLabel extends Label implements ClickHandler {<newline46mondego>    int id=0;  <newline46mondego>    public FlexTableLabel(String text, int id) {<newline46mondego>        this.id=id;<newline46mondego>        this.setText=text;<newline46mondego>        this.addCickHandler(this);<newline46mondego>    }<newline46mondego><newline46mondego>    public void onClick(ClickEvent event) {<newline46mondego>        //sends the id to the server, of course you need to replace it with your <newline46mondego>        //service<newline46mondego>        yourService.getNewFlexTable(this.id);<newline46mondego>    }     <newline46mondego> }<newline46mondego>"
"6411splitHere46","3355985splitHere46","for(int i=0; i<result.size;i++) {<newline46mondego>    FlexTable.setWidget(i,0, new FlexTableLabel(result.get(i).text, result.get(i).id);<newline46mondego>}<newline46mondego>"
"6412splitHere46","3355985splitHere46","public static YourPanel extends Panel {<newline46mondego>    private static YourPanel instance=null;<newline46mondego><newline46mondego>    public static YourPanel getInstance() {<newline46mondego>        if(instance==null) {<newline46mondego>            instance=new YourPanel();<newline46mondego>        }<newline46mondego>        return instance;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6413splitHere46","3355985splitHere46","public class YourEntryClass extends EntryPoint {<newline46mondego>    public void onModuleLoad() {<newline46mondego>        RootPanel.get().add(YourPanel.getInstance());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6414splitHere46","3355985splitHere46","yourService.getNewFlexTable(this.id, new AsyncCallback<ArrayList<String>>() {<newline46mondego>    public void onSuccess(ArrayList<String> result) {<newline46mondego>    For(int i=0;i<result.size;i++) {<newline46mondego>            YourPanel.getInstance().add(result.get(i);<newline46mondego>        } <newline46mondego>    }<newline46mondego>});<newline46mondego>"
"6415splitHere46","3356184splitHere46","myList"
"6416splitHere46","3356184splitHere46","ArrayList"
"6417splitHere46","3356184splitHere46","ArrayList"
"6418splitHere46","3356184splitHere46","LinkedList"
"6419splitHere46","3356184splitHere46","CopyOnWriteArrayList"
"6420splitHere46","3356184splitHere46","Collection"
"6421splitHere46","3356184splitHere46","ArrayList"
"6422splitHere46","3356184splitHere46","List"
"6423splitHere46","3356184splitHere46","List"
"6424splitHere46","3356184splitHere46","Collection"
"6425splitHere46","3356223splitHere46","his = Java::[filtered_namesapce]::His351n1.new(build_broker, rpc)"
"6426splitHere46","3356242splitHere46","public void onClick(View v) {<newline46mondego>        if(v == searchBtn)<newline46mondego>        {<newline46mondego>            String input = searchInput.getText().toString();<newline46mondego>            if(input != null && input.length() != 0)<newline46mondego>            {<newline46mondego><newline46mondego>                try {<newline46mondego>                    new TestTask().execute(input);<newline46mondego><newline46mondego>                } catch(Exception ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                } <newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>private void startSearch(PlaceList places) {<newline46mondego>  Bundle bundle = new Bundle();<newline46mondego>  bundle.putParcelable(<doubleQuotes46>places<doubleQuotes46>, places);<newline46mondego>  Intent i = new Intent(this, SearchResultsActivity.class);<newline46mondego>  i.putExtras(bundle);<newline46mondego><newline46mondego>  startActivity(i);<newline46mondego>}<newline46mondego><newline46mondego>private class TestTask extends AsyncTask<String, Void, PlacesList><newline46mondego>{<newline46mondego>...<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void onPostExecute(PlacesList results)<newline46mondego>        {<newline46mondego>           startSearch(results);<newline46mondego>           if(dlg.isShowing())<newline46mondego>                dlg.dismiss();<newline46mondego>        }<newline46mondego><newline46mondego>}<newline46mondego>"
"6427splitHere46","3356250splitHere46","GetInstance"
"6428splitHere46","3356250splitHere46","Value"
"6429splitHere46","3356250splitHere46","Type"
"6430splitHere46","3356250splitHere46","public abstract class Factory<T><newline46mondego>{<newline46mondego>    public abstract T GetInstance();<newline46mondego>}<newline46mondego><newline46mondego>public sealed class IoCFactory<T, TDerived> : Factory<T><newline46mondego>    where TDerived : T // compiler enforces that TDerived derives from T<newline46mondego>{<newline46mondego>    public override T GetInstance()<newline46mondego>    {<newline46mondego>        // TODO: retrieve instance of TDerived from IoC container such as Spring.NET, StructureMap, Unity, etc.<newline46mondego>        throw new NotImplementedException();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public sealed class ActivatorFactory<T, TDerived> : Factory<T><newline46mondego>    where TDerived : T, new() // compiler enforces that TDerived derives from T and that it has a parameterless constructor<newline46mondego>{<newline46mondego>    public override T GetInstance()<newline46mondego>    {<newline46mondego>        return Activator.CreateInstance<TDerived>();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class BarHandler<newline46mondego>{<newline46mondego>    public Factory<Foo> fooFactory { get; set; }<newline46mondego><newline46mondego>    public ProcessedBar Process(string xml)<newline46mondego>    {<newline46mondego>        Foo foo = fooFactory.GetInstance();<newline46mondego>        return foo.Process(xml);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class Program<newline46mondego>{<newline46mondego>    static void Main(string[] args)<newline46mondego>    {<newline46mondego>        BarHandler handler = new BarHandler();<newline46mondego><newline46mondego>        handler.fooFactory = new ActivatorFactory<Foo, Bar>();<newline46mondego><newline46mondego>        var processedResult = handler.Process(<doubleQuotes46><bar>Yar!</bar><doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6431splitHere46","3356277splitHere46","@Provider <newline46mondego>public class PersistenceMapper implements ExceptionMapper<PersistenceException> { <newline46mondego><newline46mondego>    @Override <newline46mondego>    public Response toResponse(PersistenceException arg0) { <newline46mondego>        if(arg0.getCause() instanceof InvalidDataException) {<newline46mondego>           return Response.status(Response.Status.BAD_REQUEST).build(); <newline46mondego>        } else {<newline46mondego>           ...<newline46mondego>        }<newline46mondego>    } <newline46mondego><newline46mondego>} <newline46mondego>"
"6432splitHere46","3356517splitHere46","Nested"
"6433splitHere46","3356517splitHere46","NewStyle"
"6434splitHere46","3356517splitHere46","NewStyle"
"6435splitHere46","3356517splitHere46","Nested"
"6436splitHere46","3356517splitHere46","NewStyle"
"6437splitHere46","3356517splitHere46","NewStyle"
"6438splitHere46","3356517splitHere46","NewStyle"
"6439splitHere46","3356517splitHere46","NewStyle"
"6440splitHere46","3356517splitHere46","Nested"
"6441splitHere46","3356517splitHere46","Nested"
"6442splitHere46","3356517splitHere46","NewStyle"
"6443splitHere46","3356713splitHere46","NSString"
"6444splitHere46","3356713splitHere46","substringFromIndex"
"6445splitHere46","3356713splitHere46","rangeOfString"
"6446splitHere46","3356713splitHere46","newstring = mystring.substring(counter)<newline46mondego>"
"6447splitHere46","3356713splitHere46","NSString *newString = [mystring substringFromIndex:counter];<newline46mondego>"
"6448splitHere46","3356713splitHere46","startpos = mystring.indexOf(searchstring)<newline46mondego>"
"6449splitHere46","3356713splitHere46","NSInteger startPos = [mystring rangeOfString:searchstring].location;<newline46mondego>"
"6450splitHere46","3356713splitHere46","newstring = mystring.substring(counter,startfrom)<newline46mondego>"
"6451splitHere46","3356713splitHere46","NSString *newstring = [mystring substringWithRange:NSMakeRange(counter,startfrom)];<newline46mondego>"
"6452splitHere46","3357210splitHere46","readLine()"
"6453splitHere46","3357210splitHere46","trim()"
"6454splitHere46","3357210splitHere46","trim()"
"6455splitHere46","3357210splitHere46","// read file<newline46mondego>while ((sLine = br.readLine()) != null) {<newline46mondego><newline46mondego>    // extract the name and value 'm'<newline46mondego>    String[] split = sLine.trim().split(<doubleQuotes46>\\s+<doubleQuotes46>);<newline46mondego>"
"6456splitHere46","3357246splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><classpath><newline46mondego> <classpathentry kind=<doubleQuotes46>src<doubleQuotes46> path=<doubleQuotes46>src/java/main<doubleQuotes46>/><newline46mondego> <classpathentry kind=<doubleQuotes46>src<doubleQuotes46> path=<doubleQuotes46>src/java/tests<doubleQuotes46>/><newline46mondego> <classpathentry kind=<doubleQuotes46>con<doubleQuotes46> path=<doubleQuotes46>org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jre1.5.0_17<doubleQuotes46>/><newline46mondego> <classpathentry kind=<doubleQuotes46>lib<doubleQuotes46> path=<doubleQuotes46>test_reflib/commons-codec-1.3.jar<doubleQuotes46>/><newline46mondego> <classpathentry kind=<doubleQuotes46>lib<doubleQuotes46> path=<doubleQuotes46>test_reflib/commons-collections-3.2.1.jar<doubleQuotes46>/><newline46mondego> <classpathentry kind=<doubleQuotes46>lib<doubleQuotes46> path=<doubleQuotes46>test_reflib/commons-fileupload-1.1.1.jar<doubleQuotes46>/><newline46mondego></classpath><newline46mondego>"
"6457splitHere46","3357300splitHere46","public class Key<newline46mondego>{<newline46mondego>int hashCode = 0;<newline46mondego><newline46mondego>@Override<newline46mondego>public int hashCode() {<newline46mondego>    return hashCode;<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public boolean equals(Object obj) {<newline46mondego>    if (this == obj)<newline46mondego>        return true;<newline46mondego>    if (obj == null)<newline46mondego>        return false;<newline46mondego>    if (getClass() != obj.getClass())<newline46mondego>        return false;<newline46mondego>    Key other = (Key) obj;<newline46mondego>    return hashCode == other.hashCode;<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) throws Exception {<newline46mondego>    HashMap<Key, Integer> data = new HashMap<Key, Integer>();<newline46mondego>    Key k1 = new Key();<newline46mondego>    data.put(k1, 1);<newline46mondego><newline46mondego>    k1.hashCode = 1;<newline46mondego><newline46mondego>    boolean bool1 = data.containsKey(k1);<newline46mondego>    for (Key k2 : data.keySet()) {<newline46mondego>        boolean bool2 = k1.equals(k2);<newline46mondego>        boolean bool3 = k2.equals(k1);<newline46mondego>        boolean bool4 = k1.hashCode() == k2.hashCode();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>bool1: <doubleQuotes46> + bool1);<newline46mondego>        System.out.println(<doubleQuotes46>bool2: <doubleQuotes46> + bool2);<newline46mondego>        System.out.println(<doubleQuotes46>bool3: <doubleQuotes46> + bool3);<newline46mondego>        System.out.println(<doubleQuotes46>bool4: <doubleQuotes46> + bool4);<newline46mondego><newline46mondego>        break;<newline46mondego>    }<newline46mondego>}<newline46mondego>}<newline46mondego>"
"6458splitHere46","3357339splitHere46","@SessionScoped"
"6459splitHere46","3357339splitHere46","List.jsf"
"6460splitHere46","3357339splitHere46","@ViewScoped"
"6461splitHere46","3357339splitHere46","reloadList()"
"6462splitHere46","3357339splitHere46","@SessionScoped"
"6463splitHere46","3357339splitHere46","@ManagedProperty"
"6464splitHere46","3357339splitHere46","@RequestScoped"
"6465splitHere46","3357426splitHere46","Runtime"
"6466splitHere46","3357492splitHere46","MyMainClass$SalesObjectGrouper1<newline46mondego>"
"6467splitHere46","3358141splitHere46","function partition(array, left, right, pivotIndex)<newline46mondego>     pivotValue := array[pivotIndex]<newline46mondego>     swap array[pivotIndex] and array[right] // Move pivot to end<newline46mondego>     storeIndex := left<newline46mondego>     for i  from  left to right - 1 // left ≤ i < right  <newline46mondego>         if array[i] ≤ pivotValue <newline46mondego>             swap array[i] and array[storeIndex]<newline46mondego>             storeIndex := storeIndex + 1<newline46mondego>     swap array[storeIndex] and array[right] // Move pivot to its final place<newline46mondego>     return storeIndex<newline46mondego>"
"6468splitHere46","3358578splitHere46","<plugin><newline46mondego>    <groupId>org.apache.maven.plugins</groupId><newline46mondego>    <artifactId>maven-compiler-plugin</artifactId><newline46mondego>    <version>2.3.1</version><newline46mondego>    <configuration><newline46mondego>      <fork>true</fork><newline46mondego>      <compilerArguments><newline46mondego>        <Xmaxerrs>1000</Xmaxerrs><newline46mondego>      </compilerArguments><newline46mondego>    </configuration><newline46mondego>  </plugin><newline46mondego>"
"6469splitHere46","3358872splitHere46","appletviewer -J<doubleQuotes46>-Djava.security.policy=all.policy<doubleQuotes46><newline46mondego>writeFile.html"
"6470splitHere46","3359217splitHere46","public class MyAction extends ActionSupport implements ServletResponseAware, ServletRequestAware {<newline46mondego><newline46mondego>  public int division;<newline46mondego><newline46mondego>  public String execute() {<newline46mondego><newline46mondego>    // Load from cookie<newline46mondego>    for(Cookie c : servletRequest.getCookies()) {<newline46mondego>      if (c.getName().equals(<doubleQuotes46>cookieDivision<doubleQuotes46>))<newline46mondego>        division=Integer.parseInt(c.getValue());<newline46mondego>    }<newline46mondego><newline46mondego>    // Save to cookie<newline46mondego>    Cookie div = new Cookie(<doubleQuotes46>cookieDivision<doubleQuotes46>, String.format(<doubleQuotes46>%d<doubleQuotes46>,division));<newline46mondego>    div.setMaxAge(60*60*24*365); // Make the cookie last a year<newline46mondego>    servletResponse.addCookie(div);<newline46mondego><newline46mondego>    return <doubleQuotes46>success<doubleQuotes46>;<newline46mondego>  }<newline46mondego><newline46mondego>  // For access to the raw servlet request / response, eg for cookies<newline46mondego>  protected HttpServletResponse servletResponse;<newline46mondego>  @Override<newline46mondego>  public void setServletResponse(HttpServletResponse servletResponse) {<newline46mondego>    this.servletResponse = servletResponse;<newline46mondego>  }<newline46mondego><newline46mondego>  protected HttpServletRequest servletRequest;<newline46mondego>  @Override<newline46mondego>  public void setServletRequest(HttpServletRequest servletRequest) {<newline46mondego>    this.servletRequest = servletRequest;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6471splitHere46","3359248splitHere46","cursor = mDb.query(DB_CONTACTS_NAME,<newline46mondego>    new String[] {KEY_ID, KEY_LAST_NAME, KEY_FIRST_NAME, KEY_EMAIL_ADDRESS,<newline46mondego>                 KEY_ORGANIZATION_NAME, KEY_LABEL, KEY_LABEL_POSITION},<newline46mondego>    KEY_FIRST_NAME + <doubleQuotes46>='<doubleQuotes46> + first + <doubleQuotes46>' AND <doubleQuotes46> + KEY_LAST_NAME + <doubleQuotes46>='<doubleQuotes46> + last + <doubleQuotes46>'<doubleQuotes46>,<newline46mondego>    null, null, null, null<newline46mondego>);<newline46mondego>"
"6472splitHere46","3359248splitHere46","first_name=marcus<newline46mondego>"
"6473splitHere46","3359248splitHere46","String[] myArguments = new String[] {first, last};<newline46mondego>cursor = mDb.query(<doubleQuotes46>SELECT * FROM contacts WHERE first_name = ? AND last_name = ?;<doubleQuotes46>, myArguments);<newline46mondego>"
"6474splitHere46","3359255splitHere46","Pattern p = Pattern.compile(<doubleQuotes46>(.{0,10})<doubleQuotes46> + mSearchTerm + <doubleQuotes46>(.{0,255})<doubleQuotes46>);<newline46mondego>"
"6475splitHere46","3359306splitHere46","Person"
"6476splitHere46","3359306splitHere46","String"
"6477splitHere46","3359306splitHere46","count(*)"
"6478splitHere46","3359306splitHere46","count(col)"
"6479splitHere46","3359306splitHere46","count(*)"
"6480splitHere46","3359306splitHere46","count(col)"
"6481splitHere46","3359306splitHere46","col"
"6482splitHere46","3359306splitHere46","col"
"6483splitHere46","3359306splitHere46","count(*)"
"6484splitHere46","3359319splitHere46","BigDecimal a = new BigDecimal(<doubleQuotes46>0.0000012<doubleQuotes46>);<newline46mondego>BigDecimal b = a.movePointRight(a.scale());<newline46mondego>"
"6485splitHere46","3359743splitHere46","ExecutorService"
"6486splitHere46","3359743splitHere46","Future"
"6487splitHere46","3359743splitHere46","get()"
"6488splitHere46","3359776splitHere46","d.equals()"
"6489splitHere46","3359776splitHere46","a.equals()"
"6490splitHere46","3359776splitHere46","equals()"
"6491splitHere46","3359776splitHere46","equals()"
"6492splitHere46","3359776splitHere46","a"
"6493splitHere46","3359776splitHere46","a"
"6494splitHere46","3359776splitHere46","B"
"6495splitHere46","3359776splitHere46","B.equals()"
"6496splitHere46","3359776splitHere46","a"
"6497splitHere46","3359776splitHere46","C"
"6498splitHere46","3359776splitHere46","C.equals()"
"6499splitHere46","3359776splitHere46","A"
"6500splitHere46","3359776splitHere46","equals()"
"6501splitHere46","3359776splitHere46","A"
"6502splitHere46","3360163splitHere46","<jsp:include>"
"6503splitHere46","3360163splitHere46","HttpServletRequest"
"6504splitHere46","3360163splitHere46","<jsp:include>"
"6505splitHere46","3360163splitHere46","<jsp:include>"
"6506splitHere46","3360163splitHere46","<jsp:include>"
"6507splitHere46","3360163splitHere46","<%@ include file=<doubleQuotes46>x.jsp<doubleQuotes46> %>"
"6508splitHere46","3360163splitHere46","x.jsp"
"6509splitHere46","3360176splitHere46","String ds = <doubleQuotes46>DTSTART;TZID=\<doubleQuotes46>Eastern\<doubleQuotes46>:20100728T140000<doubleQuotes46>;<newline46mondego>Date d = new SimpleDateFormat(<doubleQuotes46>yyyyMMdd'T'HHMMSS<doubleQuotes46>).parse(ds.split(<doubleQuotes46>:<doubleQuotes46>)[1]);<newline46mondego>"
"6510splitHere46","3360267splitHere46","SessionFactory.getCurrentSession()"
"6511splitHere46","3360328splitHere46","public enum CharEnum // Let's avoid java.lang.* clashes<newline46mondego>{<newline46mondego>    A(1), B(2), C(4), D(8);<newline46mondego><newline46mondego>    private final int mask;<newline46mondego><newline46mondego>    private CharEnum(int mask)<newline46mondego>    {<newline46mondego>        this.mask = mask;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getMask()<newline46mondego>    {<newline46mondego>        return mask;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6512splitHere46","3360328splitHere46","CharEnum ch = /* from user */<newline46mondego><newline46mondego>if ((ch.getMask() & CharEnum.A.getMask()) > 0)<newline46mondego>{<newline46mondego>    // some operation...<newline46mondego>}<newline46mondego>"
"6513splitHere46","3360328splitHere46","EnumSet"
"6514splitHere46","3360328splitHere46","public enum CharEnum<newline46mondego>{<newline46mondego>    // Other code as before<newline46mondego><newline46mondego>    public boolean overlapsWith(CharEnum ch)<newline46mondego>    {<newline46mondego>        return (ch.mask & mask) > 0;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6515splitHere46","3360366splitHere46","NativeEvent"
"6516splitHere46","3360366splitHere46","Event.addNativePreviewHandler(Event.NativePreviewHandler)"
"6517splitHere46","3360366splitHere46","Event.addNativePreviewHandler(new Event.NativePreviewHandler() {<newline46mondego>    @Override<newline46mondego>    public void onPreviewNativeEvent(Event.NativePreviewEvent event) {<newline46mondego>        nativeEvent nativeEvent = event.getNativeEvent();<newline46mondego>        // Do all sort of cool stuff with nativeEvent<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"6518splitHere46","3360366splitHere46","MenuBar.selectItem(MenuItem item)"
"6519splitHere46","3360366splitHere46","MenuItem"
"6520splitHere46","3360366splitHere46","MenuItem"
"6521splitHere46","3360366splitHere46","MenuItem.getSubMenu()"
"6522splitHere46","3360366splitHere46","MenuBar.setAutoOpen(boolean autoOpen)"
"6523splitHere46","3360409splitHere46","<select id=<doubleQuotes46>selectPostIn<doubleQuotes46> resultType=<doubleQuotes46>domain.blog.Post<doubleQuotes46>><newline46mondego>  SELECT *<newline46mondego>   FROM POST P<newline46mondego>   WHERE ID in<newline46mondego>   <foreach item=<doubleQuotes46>item<doubleQuotes46> index=<doubleQuotes46>index<doubleQuotes46> collection=<doubleQuotes46>list<doubleQuotes46> open=<doubleQuotes46>(<doubleQuotes46> separator=<doubleQuotes46>,<doubleQuotes46> close=<doubleQuotes46>)<doubleQuotes46>><newline46mondego>    #{item}<newline46mondego>   </foreach><newline46mondego></select><newline46mondego>"
"6524splitHere46","3360918splitHere46","InputStream"
"6525splitHere46","3360918splitHere46","BufferedReader"
"6526splitHere46","3360918splitHere46","InputStreamReader"
"6527splitHere46","3360918splitHere46","InputStream"
"6528splitHere46","3360918splitHere46","InputStreamReader"
"6529splitHere46","3360918splitHere46","InputStream"
"6530splitHere46","3360918splitHere46","InputStreamReader"
"6531splitHere46","3360918splitHere46","InputStream"
"6532splitHere46","3361121splitHere46","String temp = headerValue.substring(0, (len1-17));<newline46mondego>"
"6533splitHere46","3361175splitHere46","jrunscript"
"6534splitHere46","3361175splitHere46","<script />"
"6535splitHere46","3361175splitHere46","DriverManager"
"6536splitHere46","3361175splitHere46","var c = null;<newline46mondego>try {<newline46mondego>    var p = new java.util.Properties();<newline46mondego>    p.setProperty('user', 'user');<newline46mondego>    p.setProperty('password', 'password');<newline46mondego>    c = (new net.sourceforge.jtds.jdbc.Driver()).connect(<newline46mondego>             'jdbc:jtds:sqlserver://myserver/mydb', p);<newline46mondego>}<newline46mondego>catch (e) {<newline46mondego>    c = null;<newline46mondego>    println(e);<newline46mondego>};<newline46mondego><newline46mondego>if(c) {<newline46mondego>   println('yay, got c!');<newline46mondego>   c.close();<newline46mondego>} else {<newline46mondego>   println('awww.');<newline46mondego>}<newline46mondego>"
"6537splitHere46","3361175splitHere46","$ jrunscript -cp jtds-1.2.5.jar dbtest_realparams.js <newline46mondego>yay, got c!<newline46mondego>"
"6538splitHere46","3361228splitHere46","mAdapter.remove(theObjectToRemove);"
"6539splitHere46","3361228splitHere46","mListView.notifyDataSetChanged();"
"6540splitHere46","3361254splitHere46","getResourceAsStream(<doubleQuotes46>/text/translation_en.properties<doubleQuotes46>);"
"6541splitHere46","3361398splitHere46","<doubleQuotes46>Lefoullon,Paris<doubleQuotes46>"
"6542splitHere46","3361398splitHere46","<doubleQuotes46>O'Horner, James<doubleQuotes46>"
"6543splitHere46","3361398splitHere46","O'Horner, James"
"6544splitHere46","3361398splitHere46","INSERT INTO ..... VALUES(...,'O''Horner, James', ...);"
"6545splitHere46","3361398splitHere46","'"
"6546splitHere46","3361398splitHere46","''"
"6547splitHere46","3361398splitHere46","'"
"6548splitHere46","3361450splitHere46","skipMe"
"6549splitHere46","3361450splitHere46","@NotNull"
"6550splitHere46","3361450splitHere46","validator=<doubleQuotes46><doubleQuotes46>"
"6551splitHere46","3361450splitHere46","f:param name=<doubleQuotes46>skipValidation<doubleQuotes46> value=<doubleQuotes46>true<doubleQuotes46>"
"6552splitHere46","3361516splitHere46","map"
"6553splitHere46","3361575splitHere46","<Object Of List>.getSelectedIndex();<newline46mondego>"
"6554splitHere46","3361692splitHere46","$val = ($val % 256) - 128<newline46mondego>"
"6555splitHere46","3361692splitHere46","$val = (($val+128) % 256) - 128<newline46mondego>"
"6556splitHere46","3362013splitHere46","Response"
"6557splitHere46","3362013splitHere46","Viewable"
"6558splitHere46","3362013splitHere46","@GET<newline46mondego>public Response get() {<newline46mondego>  return Response.status(myCode).entity(new Viewable(<doubleQuotes46>/index<doubleQuotes46>, <doubleQuotes46>FOO<doubleQuotes46>)).build();<newline46mondego>}<newline46mondego>"
"6559splitHere46","3362134splitHere46","System.out.println()"
"6560splitHere46","3362259splitHere46","UserDetails"
"6561splitHere46","3362259splitHere46","loadUserByUsername()"
"6562splitHere46","3362323splitHere46","public void a()<newline46mondego>{<newline46mondego>    synchronized(someObject) {<newline46mondego>        // do something (1)<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6563splitHere46","3362323splitHere46","public void b()<newline46mondego>{<newline46mondego>    synchronized(someObject) {<newline46mondego>        // do something else (2)<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6564splitHere46","3362323splitHere46","java.lang.Object"
"6565splitHere46","3362323splitHere46","wait"
"6566splitHere46","3362323splitHere46","notify"
"6567splitHere46","3362790splitHere46","str.split(regex, n)"
"6568splitHere46","3362790splitHere46","Pattern.compile(regex).split(str, n) <newline46mondego>"
"6569splitHere46","3362790splitHere46","Pattern p = Pattern.compile(regex);<newline46mondego>...<newline46mondego>String[] tokens1 = p.split(str1); <newline46mondego>String[] tokens2 = p.split(str2); <newline46mondego>...<newline46mondego>"
"6570splitHere46","3362790splitHere46","String[] tokens1 = str1.split(regex);<newline46mondego>String[] tokens2 = str2.split(regex);<newline46mondego>...<newline46mondego>"
"6571splitHere46","3362790splitHere46","String.split()"
"6572splitHere46","3362889splitHere46","select rel2.partyFrom<newline46mondego>from Relationship rel2<newline46mondego>where rel2.relationshipType = :typeName2 /* customer */<newline46mondego>and rel2.partyTo.id in <newline46mondego>      (select rel.partyTo.id<newline46mondego>      from Relationship rel<newline46mondego>      where rel.partyFrom = :partyFrom<newline46mondego>      and rel.relationshipType = :typeName)<newline46mondego>"
"6573splitHere46","3362889splitHere46","typeName"
"6574splitHere46","3362889splitHere46","typeName2"
"6575splitHere46","3362889splitHere46","partyFrom"
"6576splitHere46","3362889splitHere46","PartyTo"
"6577splitHere46","3362913splitHere46","java.nio"
"6578splitHere46","3362913splitHere46","java.nio"
"6579splitHere46","3362913splitHere46","java.io"
"6580splitHere46","3362913splitHere46","java.io"
"6581splitHere46","3363043splitHere46","public class ClassA {<newline46mondego>    private final Object field1;<newline46mondego>    private final Object field2;<newline46mondego><newline46mondego>    public ClassA(Object arg1, Object arg2) {<newline46mondego>        this(calc1(arg1, arg2), calc2(arg1, arg2), true);<newline46mondego>    }<newline46mondego><newline46mondego>    public ClassA(int arg1, String arg2, boolean arg3) {<newline46mondego>        this(calc1(arg1, arg2, arg3), calc2(arg1, arg2, arg3), true);<newline46mondego>    }<newline46mondego><newline46mondego>    private ClassA(Object arg1, Object arg2, boolean a) {<newline46mondego>        field1 = arg1;<newline46mondego>        field2 = arg2;<newline46mondego>    }<newline46mondego><newline46mondego>    private static Object calc1(int arg1, String arg2, boolean arg3) {<newline46mondego>        return ... // calculate value 1 based on args<newline46mondego>    }<newline46mondego><newline46mondego>    private static Object calc2(int arg1, String arg2, boolean arg3) {<newline46mondego>        return ... // calculate value 2 based on args<newline46mondego>    }<newline46mondego><newline46mondego>    private static Object calc1(Object arg1, Object arg2) {<newline46mondego>        return ... // calculate value 1 based on args<newline46mondego>    }<newline46mondego><newline46mondego>    private static Object calc2(Object arg1, Object arg2) {<newline46mondego>        return ... // calculate value 2 based on args<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6582splitHere46","3363175splitHere46","getActualMaximum(Calendar.DAY_OF_MONTH)"
"6583splitHere46","3363219splitHere46","class CleanResource {<newline46mondego>   int myIndex;<newline46mondego>   static ArrayList<ResourceImpl> all;<newline46mondego><newline46mondego>   void doSomething() {<newline46mondego>     ResourceImpl impl = all.get(myIndex);<newline46mondego>     impl.doSomething();<newline46mondego>   } <newline46mondego><newline46mondego>   protected void finalize() { ... }<newline46mondego>}<newline46mondego>"
"6584splitHere46","3363219splitHere46","CleanResource resource = new CleanResource(...);<newline46mondego>resource.doSomething();<newline46mondego>resource = null; <newline46mondego>"
"6585splitHere46","3363219splitHere46","register CleanResource* res = ...; call ctor etc..<newline46mondego>// inline CleanResource.doSomething()<newline46mondego>register int myIndex = res->MyIndex;<newline46mondego>ResourceImpl* impl = all->get(myInddex);<newline46mondego>impl->DoSomething();<newline46mondego>// end of inline CleanResource.doSomething()<newline46mondego>res = null;<newline46mondego>"
"6586splitHere46","3363219splitHere46","res"
"6587splitHere46","3363219splitHere46","CleanResource.doSomething()"
"6588splitHere46","3363219splitHere46","res"
"6589splitHere46","3363219splitHere46","register CleanResource* res = ...; call ctor etc..<newline46mondego>// inline CleanResource->doSomething()<newline46mondego>register int myIndex = res->MyIndex;<newline46mondego>res = null;    /// <-----<newline46mondego>ResourceImpl* impl = all->get(myInddex);<newline46mondego>impl.DoSomething();<newline46mondego>// end of inline CleanResource.doSomething()<newline46mondego>"
"6590splitHere46","3363219splitHere46","CleanResource.doSomething()"
"6591splitHere46","3363219splitHere46","this"
"6592splitHere46","3363219splitHere46","this"
"6593splitHere46","3363219splitHere46","myIndex"
"6594splitHere46","3363219splitHere46","this"
"6595splitHere46","3363219splitHere46","this"
"6596splitHere46","3363219splitHere46","this"
"6597splitHere46","3363326splitHere46","enum"
"6598splitHere46","3363326splitHere46","EnumMap"
"6599splitHere46","3363326splitHere46","EnumSet"
"6600splitHere46","3363326splitHere46","enum"
"6601splitHere46","3363326splitHere46","java.util.Calendar"
"6602splitHere46","3363326splitHere46","enum"
"6603splitHere46","3363326splitHere46","Calendar"
"6604splitHere46","3363326splitHere46","// int constant antipattern from java.util.Calendar<newline46mondego>public static final int JANUARY = 0;<newline46mondego>public static final int FEBRUARY = 1;<newline46mondego>...<newline46mondego>public static final int SUNDAY = 1;<newline46mondego>public static final int MONDAY = 2;<newline46mondego>...<newline46mondego>"
"6605splitHere46","3363326splitHere46","int"
"6606splitHere46","3363326splitHere46","MONDAY = 0;"
"6607splitHere46","3363326splitHere46","SUNDAY = 0;"
"6608splitHere46","3363326splitHere46","MONDAY == SUNDAY"
"6609splitHere46","3363326splitHere46","int"
"6610splitHere46","3363326splitHere46","setMonth(JANUARY)"
"6611splitHere46","3363326splitHere46","setMonth(THURSDAY)"
"6612splitHere46","3363326splitHere46","setMonth(42)"
"6613splitHere46","3363326splitHere46","set(int,int,int,int,int,int)"
"6614splitHere46","3363326splitHere46","// Hypothetical enums for a Calendar library<newline46mondego>enum Month {<newline46mondego>   JANUARY, FEBRUARY, ...<newline46mondego>}<newline46mondego>enum DayOfWeek {<newline46mondego>   SUNDAY, MONDAY, ...<newline46mondego>}<newline46mondego>"
"6615splitHere46","3363326splitHere46","MONDAY == SUNDAY"
"6616splitHere46","3363326splitHere46","Month"
"6617splitHere46","3363326splitHere46","DayOfWeek"
"6618splitHere46","3363326splitHere46","setMonth(MONDAY)"
"6619splitHere46","3363326splitHere46","// BEFORE with int constants<newline46mondego>for (int month = JANUARY; month <= DECEMBER; month++) {<newline46mondego>   ...<newline46mondego>}<newline46mondego>"
"6620splitHere46","3363326splitHere46","JANUARY + 1 == FEBRUARY"
"6621splitHere46","3363326splitHere46","enum"
"6622splitHere46","3363326splitHere46","// AFTER with enum<newline46mondego>for (Month month : Month.values()) {<newline46mondego>   ...<newline46mondego>}<newline46mondego>"
"6623splitHere46","3363326splitHere46","enum"
"6624splitHere46","3363326splitHere46","class"
"6625splitHere46","3363326splitHere46","class"
"6626splitHere46","3363326splitHere46","// BEFORE: with int constants<newline46mondego>public static final int NORTH = 0;<newline46mondego>public static final int EAST  = 1;<newline46mondego>public static final int SOUTH = 2;<newline46mondego>public static final int WEST  = 3;<newline46mondego><newline46mondego>public static int degreeFor(int direction) {<newline46mondego>   return direction * 90; // quite an assumption!<newline46mondego>   // must be kept in-sync with the int constants!<newline46mondego>}<newline46mondego><newline46mondego>//...<newline46mondego>for (int dir = NORTH; dir <= WEST; dir++) {<newline46mondego>   ... degreeFor(dir) ...<newline46mondego>}<newline46mondego>"
"6627splitHere46","3363326splitHere46","enum"
"6628splitHere46","3363326splitHere46","enum Direction {<newline46mondego>   NORTH(0), EAST(90), SOUTH(180), WEST(270);<newline46mondego>   // so obvious! so easy to read! so easy to write! so easy to maintain!<newline46mondego><newline46mondego>   private final int degree;<newline46mondego>   Direction(int degree)      { this.degree = degree; }<newline46mondego>   public int getDegree()     { return degree; }<newline46mondego>}<newline46mondego><newline46mondego>//...<newline46mondego>for (Direction dir : Direction.values()) {<newline46mondego>   ... dir.getDegree() ...<newline46mondego>}<newline46mondego>"
"6629splitHere46","3363326splitHere46","static int apply(int op1, int op2, int operator) {<newline46mondego>   switch (operator) {<newline46mondego>      case PLUS  : return op1 + op2;<newline46mondego>      case MINUS : return op1 - op2;<newline46mondego>      case ...<newline46mondego>      default: throw new IllegalArgumentException(<doubleQuotes46>Unknown operator!<doubleQuotes46>);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"6630splitHere46","3363326splitHere46","enum"
"6631splitHere46","3363326splitHere46","@Override"
"6632splitHere46","3363326splitHere46","enum Operator {<newline46mondego>    PLUS  { int apply(int op1, int op2) { return op1 + op2; } },<newline46mondego>    MINUS { int apply(int op1, int op2) { return op1 - op2; } },<newline46mondego>    ...<newline46mondego>    ;<newline46mondego>    abstract int apply(int op1, int op2);<newline46mondego>}<newline46mondego>"
"6633splitHere46","3363326splitHere46","EnumMap"
"6634splitHere46","3363326splitHere46","enum"
"6635splitHere46","3363326splitHere46","ordinal()"
"6636splitHere46","3363326splitHere46","EnumMap"
"6637splitHere46","3363326splitHere46","Enum.ordinal"
"6638splitHere46","3363326splitHere46","EnumMap"
"6639splitHere46","3363326splitHere46","// BEFORE, with int constants and array indexing<newline46mondego>Employee[] employeeOfTheMonth = ...<newline46mondego><newline46mondego>employeeOfTheMonth[JANUARY] = jamesBond;<newline46mondego>"
"6640splitHere46","3363326splitHere46","// AFTER, with enum and EnumMap<newline46mondego>Map<Month, Employee> employeeOfTheMonth = ...<newline46mondego><newline46mondego>employeeOfTheMonth.put(Month.JANUARY, jamesBond);<newline46mondego>"
"6641splitHere46","3363326splitHere46","EnumSet"
"6642splitHere46","3363326splitHere46","int"
"6643splitHere46","3363326splitHere46","public static final int BUTTON_A = 1;<newline46mondego>public static final int BUTTON_B = 2;<newline46mondego>public static final int BUTTON_X = 4;<newline46mondego>public static final int BUTTON_Y = 8;<newline46mondego><newline46mondego>int buttonState = BUTTON_A | BUTTON_X; // A & X are pressed!<newline46mondego><newline46mondego>if ((buttonState & BUTTON_B) != 0) {   // B is pressed...<newline46mondego>   ...<newline46mondego>}<newline46mondego>"
"6644splitHere46","3363326splitHere46","enum"
"6645splitHere46","3363326splitHere46","EnumSet"
"6646splitHere46","3363326splitHere46","enum Button {<newline46mondego>  A, B, X, Y;<newline46mondego>}<newline46mondego><newline46mondego>Set<Button> buttonState = EnumSet.of(Button.A, Button.X); // A & X are pressed!<newline46mondego><newline46mondego>if (buttonState.contains(Button.B)) { // B is pressed...<newline46mondego>   ...<newline46mondego>}<newline46mondego>"
"6647splitHere46","3363326splitHere46","enum"
"6648splitHere46","3363326splitHere46","int"
"6649splitHere46","3363326splitHere46","EnumSet"
"6650splitHere46","3363326splitHere46","EnumMap"
"6651splitHere46","3363326splitHere46","ordinal()"
"6652splitHere46","3363326splitHere46","EnumSet"
"6653splitHere46","3363516splitHere46","Connection connection = DriverManager.getConnection(url, username, password);<newline46mondego>"
"6654splitHere46","3363579splitHere46","public class Go {<newline46mondego>    public static void main(String args[]) {<newline46mondego>        while(true) {<newline46mondego>            try {<newline46mondego>                String userID = getUserId();<newline46mondego>                Connection con = getConnection();<newline46mondego>                processUserId(connection, userId);<newline46mondego>                con.close();<newline46mondego>            catch(Exception e) {<newline46mondego>                logException(e);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6655splitHere46","3363594splitHere46","@Singleton @LocalBean @Startup<newline46mondego>public class ProgressEJB {<newline46mondego>  private HashMap<String, Integer> progressMap = new HashMap<String, Integer><newline46mondego>  // getters and setters<newline46mondego>}<newline46mondego>"
"6656splitHere46","3363594splitHere46","@Stateful @LocalBean<newline46mondego>public class EmailEJB {<newline46mondego>@Inject<newline46mondego>private ProgressEJB progress;<newline46mondego>// Mail-Settings<newline46mondego>...<newline46mondego>@Asynchronous<newline46mondego>public void sendEmails(user:User, message:Message, sessionId:String) {<newline46mondego>  progress.progressMap.put(sessionId, 0);<newline46mondego>  for (int i=0; i<mails.size; i++) {<newline46mondego>    sendMail(mails[i])<newline46mondego>    progress.getProgressMap().put(sessionId, (i / mails.size) * 100)<newline46mondego>  }<newline46mondego>  progress.getProgressMap().remove(sessionId);<newline46mondego>}<newline46mondego>"
"6657splitHere46","3363594splitHere46","@SessionScoped<newline46mondego>@Named<newline46mondego>public class EmailManager {<newline46mondego>  @Inject <newline46mondego>  private ProgressEJB progress;<newline46mondego>  @Inject<newline46mondego>  private FacesContext facesContext;<newline46mondego><newline46mondego>  private String sessionId;<newline46mondego><newline46mondego>  @PostConstruct<newline46mondego>  private void setSessionId() {<newline46mondego>    this.sessionId = ((HttpSession)facesContext.getExternalContext().getSession(false)).getId();<newline46mondego>  }<newline46mondego><newline46mondego>  public Integer getProgress() {<newline46mondego>    if (progress.getProgressMap().get(sessionId) == null)<newline46mondego>      return 100;<newline46mondego>    else <newline46mondego>      return progress.getProgressMap().get(sessionId);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6658splitHere46","3363657splitHere46","BeanInfo editor..."
"6659splitHere46","3363657splitHere46","// Here you can add code for customizing the BeanDescriptor."
"6660splitHere46","3363657splitHere46","beanDescriptor.setValue(<doubleQuotes46>isContainer<doubleQuotes46>, Boolean.TRUE); // Or FALSE if  it's not a container"
"6661splitHere46","3364049splitHere46","e.getMessage()"
"6662splitHere46","3364049splitHere46","null"
"6663splitHere46","3364049splitHere46","NullPointerException"
"6664splitHere46","3364172splitHere46","canvas"
"6665splitHere46","3364172splitHere46","<img>"
"6666splitHere46","3364285splitHere46","@Context HttpServletRequest"
"6667splitHere46","3364285splitHere46","@GET<newline46mondego>public Response getSomeView(@Context HttpServletRequest request){<newline46mondego>     [here you have access to the request object]<newline46mondego>}<newline46mondego>"
"6668splitHere46","3364305splitHere46","System.Runtime.InteropServices.Marshal.GetHRForException()"
"6669splitHere46","3364305splitHere46","FileNotFoundException"
"6670splitHere46","3364322splitHere46","public static java.util.Set SetUtils.predicatedSet(set, predicate)"
"6671splitHere46","3364495splitHere46","InputStream body = new FileInputStream(<doubleQuotes46>create.xml<doubleQuotes46>);<newline46mondego>WebRequest request = new PostMethodWebRequest(<doubleQuotes46>http://example.com/thing/create<doubleQuotes46>, body, <doubleQuotes46>text/xml<doubleQuotes46>);<newline46mondego>"
"6672splitHere46","3364539splitHere46","matches()"
"6673splitHere46","3364539splitHere46","^"
"6674splitHere46","3364539splitHere46","$"
"6675splitHere46","3364539splitHere46","Matcher.find()"
"6676splitHere46","3364539splitHere46","Matcher.lookingAt()"
"6677splitHere46","3364539splitHere46",".*"
"6678splitHere46","3364594splitHere46","<doubleQuotes46>(<doubleQuotes46> + wordToHighlight + <doubleQuotes46>\\w{0,5})<doubleQuotes46><newline46mondego>"
"6679splitHere46","3364732splitHere46","android:orientation=<doubleQuotes46>vertical<doubleQuotes46>"
"6680splitHere46","3365027splitHere46","Date"
"6681splitHere46","3365027splitHere46","String"
"6682splitHere46","3365027splitHere46","parse()"
"6683splitHere46","3365198splitHere46","value"
"6684splitHere46","3365198splitHere46","speed"
"6685splitHere46","3365198splitHere46","value"
"6686splitHere46","3365198splitHere46","double value = ...;<newline46mondego>int base = 25;<newline46mondego>value = java.lang.Math.pow(base, value);<newline46mondego>"
"6687splitHere46","3365198splitHere46","java.lang.Math"
"6688splitHere46","3365198splitHere46","java.lang.Math"
"6689splitHere46","3365286splitHere46","InputStream in = ...; // your underlying stream (e.g. FileInputStream)<newline46mondego>   ObjectInputStream oin = new ObjectInputStream(new BufferedInputStream(in));<newline46mondego>"
"6690splitHere46","3365286splitHere46","in"
"6691splitHere46","3365289splitHere46","<dependency><newline46mondego>    <groupId>com.sun.xml.messaging.saaj</groupId><newline46mondego>    <artifactId>saaj-impl</artifactId><newline46mondego>    <version>1.3.4</version><newline46mondego>    <type>jar</type><newline46mondego>    <scope>compile</scope><newline46mondego></dependency><newline46mondego>"
"6692splitHere46","3365322splitHere46","SignatureWriter"
"6693splitHere46","3365322splitHere46","public <K> void doSomething(K thing)<newline46mondego>"
"6694splitHere46","3365322splitHere46","SignatureWriter signature = new SignatureWriter();<newline46mondego>signature.visitFormalTypeParameter(<doubleQuotes46>K<doubleQuotes46>);<newline46mondego><newline46mondego>// Ensure that <K> extends java.lang.Object<newline46mondego>{<newline46mondego>    SignatureVisitor classBound = signature.visitClassBound();<newline46mondego>    classBound.visitClassType(Type.getInternalName(Object.class));<newline46mondego>    classBound.visitEnd();<newline46mondego>}<newline46mondego><newline46mondego>// The parameter uses the <K> type variable<newline46mondego>signature.visitParameterType().visitTypeVariable(<doubleQuotes46>K<doubleQuotes46>);<newline46mondego><newline46mondego>// The return type uses the void primitive ('V')<newline46mondego>signature.visitReturnType().visitBaseType('V');<newline46mondego><newline46mondego>signature.visitEnd();<newline46mondego><newline46mondego>String signatureString = signature.toString();<newline46mondego>"
"6695splitHere46","3365322splitHere46","String signatureString = <doubleQuotes46><K:Ljava/lang/Object;>(TK;)V;<doubleQuotes46><newline46mondego>"
"6696splitHere46","3365362splitHere46","URI uri = URI.create(<doubleQuotes46>http://www.example.com:8040/folder/exist?name=sky#head<doubleQuotes46>);<newline46mondego>String scheme = uri.getScheme();<newline46mondego>String authority = uri.getAuthority();<newline46mondego>// ...<newline46mondego>"
"6697splitHere46","3365386splitHere46","SimpleJdbcTemplate"
"6698splitHere46","3365386splitHere46","JdbcTemplate"
"6699splitHere46","3365386splitHere46","JdbcTemplate"
"6700splitHere46","3365386splitHere46","SimpleJdbcTemplate"
"6701splitHere46","3365386splitHere46","JdbcTemplate"
"6702splitHere46","3365481splitHere46","List nextDir = new ArrayList();<newline46mondego>"
"6703splitHere46","3365669splitHere46","static"
"6704splitHere46","3365669splitHere46","non-static"
"6705splitHere46","3365669splitHere46","static"
"6706splitHere46","3365669splitHere46","public class MyClassOuter {<newline46mondego>    //...<newline46mondego>    public class MyClassInner {<newline46mondego>        //..<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6707splitHere46","3365669splitHere46","MyClassInner"
"6708splitHere46","3365669splitHere46","MyClassOuter."
"6709splitHere46","3365669splitHere46","Static"
"6710splitHere46","3365681splitHere46","FactoryBean"
"6711splitHere46","3365681splitHere46","FactoryBean"
"6712splitHere46","3365681splitHere46","FactoryBean"
"6713splitHere46","3365818splitHere46","ServletContextListener"
"6714splitHere46","3365818splitHere46","UserTransaction"
"6715splitHere46","3366075splitHere46","HttpClient"
"6716splitHere46","3366226splitHere46","JTable.setModel(...)"
"6717splitHere46","3366226splitHere46","JComponent.pack()"
"6718splitHere46","3366381splitHere46","TimeZone utc = TimeZone.getTimeZone(<doubleQuotes46>UTC<doubleQuotes46>);<newline46mondego>Calendar calendar = Calendar.getInstance(utc);<newline46mondego><newline46mondego>DateFormat df = new SimpleDateFormat(<doubleQuotes46>dd/MM/yyyy<doubleQuotes46>);<newline46mondego>df.setTimeZone(utc);<newline46mondego>Date finalTime = null;<newline46mondego><newline46mondego>try<newline46mondego>{<newline46mondego>    finalTime = df.parse(<doubleQuotes46>01/01/2100<doubleQuotes46>);            <newline46mondego>} catch (ParseException e)<newline46mondego>{<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego><newline46mondego>calendar.setTime(finalTime);<newline46mondego>"
"6719splitHere46","3366381splitHere46","calendar.getTime()"
"6720splitHere46","3366381splitHere46","finalTime"
"6721splitHere46","3366381splitHere46","ParseException"
"6722splitHere46","3366381splitHere46","Calendar"
"6723splitHere46","3366524splitHere46","@Autowired"
"6724splitHere46","3366524splitHere46","@Resource"
"6725splitHere46","3366524splitHere46","@Autowired"
"6726splitHere46","3366524splitHere46","@Resource"
"6727splitHere46","3366536splitHere46","import javax.xml.parsers.SAXParser;<newline46mondego>import javax.xml.parsers.SAXParserFactory;<newline46mondego>import org.xml.sax.XMLReader;<newline46mondego><newline46mondego>public class Demo {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        SAXParserFactory spf = SAXParserFactory.newInstance();<newline46mondego>        SAXParser sp = spf.newSAXParser();<newline46mondego>        XMLReader xr = sp.getXMLReader();<newline46mondego>        xr.setContentHandler(new MyContentHandler(xr));<newline46mondego>        xr.parse(<doubleQuotes46>input.xml<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6728splitHere46","3366536splitHere46","import org.xml.sax.Attributes;<newline46mondego>import org.xml.sax.SAXException;<newline46mondego>import org.xml.sax.XMLReader;<newline46mondego>import org.xml.sax.helpers.DefaultHandler;<newline46mondego><newline46mondego>public class MyContentHandler extends DefaultHandler {<newline46mondego><newline46mondego>    private XMLReader xmlReader;<newline46mondego><newline46mondego>    public MyContentHandler(XMLReader xmlReader) {<newline46mondego>        this.xmlReader = xmlReader;<newline46mondego>    }<newline46mondego><newline46mondego>    public void startElement(String uri, String localName, String qName,<newline46mondego>            Attributes atts) throws SAXException {<newline46mondego>        if (<doubleQuotes46>sodium<doubleQuotes46>.equals(qName)) {<newline46mondego>            xmlReader.setContentHandler(new IgnoringContentHandler(xmlReader,<newline46mondego>                    this));<newline46mondego>        } else {<newline46mondego>            System.out.println(<doubleQuotes46>START <doubleQuotes46> + qName);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void endElement(String uri, String localName, String qName)<newline46mondego>            throws SAXException {<newline46mondego>        System.out.println(<doubleQuotes46>END <doubleQuotes46> + qName);<newline46mondego>    }<newline46mondego><newline46mondego>    public void characters(char[] ch, int start, int length)<newline46mondego>            throws SAXException {<newline46mondego>        System.out.println(new String(ch, start, length));<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6729splitHere46","3366536splitHere46","import org.xml.sax.Attributes;<newline46mondego>import org.xml.sax.ContentHandler;<newline46mondego>import org.xml.sax.SAXException;<newline46mondego>import org.xml.sax.XMLReader;<newline46mondego>import org.xml.sax.helpers.DefaultHandler;<newline46mondego><newline46mondego>public class IgnoringContentHandler extends DefaultHandler {<newline46mondego><newline46mondego>    private int depth = 1;<newline46mondego>    private XMLReader xmlReader;<newline46mondego>    private ContentHandler contentHandler;<newline46mondego><newline46mondego>    public IgnoringContentHandler(XMLReader xmlReader, ContentHandler contentHandler) {<newline46mondego>        this.contentHandler = contentHandler;<newline46mondego>        this.xmlReader = xmlReader;<newline46mondego>    }<newline46mondego><newline46mondego>    public void startElement(String uri, String localName, String qName,<newline46mondego>            Attributes atts) throws SAXException {<newline46mondego>        depth++;<newline46mondego>    }<newline46mondego><newline46mondego>    public void endElement(String uri, String localName, String qName)<newline46mondego>            throws SAXException {<newline46mondego>        depth--;<newline46mondego>        if(0 == depth) {<newline46mondego>           xmlReader.setContentHandler(contentHandler);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6730splitHere46","3366604splitHere46","-classpath scala-library.jar:.<newline46mondego>"
"6731splitHere46","3366604splitHere46","-Xbootclasspath/a:scala-library.jar<newline46mondego>"
"6732splitHere46","3366604splitHere46","META-INF"
"6733splitHere46","3366604splitHere46","MANIFEST.MF"
"6734splitHere46","3366604splitHere46","rt.jar"
"6735splitHere46","3366604splitHere46","classes.jar"
"6736splitHere46","3366604splitHere46","your.pro"
"6737splitHere46","3366604splitHere46","-injar classes<newline46mondego>-injar /opt/local/share/scala-2.8/lib/scala-library.jar(!META-INF/MANIFEST.MF)<newline46mondego>-outjar main.jar<newline46mondego>-libraryjar /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Classes/classes.jar<newline46mondego><newline46mondego>-dontwarn<newline46mondego>-dontnote<newline46mondego>-ignorewarnings<newline46mondego><newline46mondego>-optimizationpasses 2<newline46mondego>-optimizations !code/allocation/variable<newline46mondego><newline46mondego>-keep,allowoptimization,allowshrinking class * { *; }<newline46mondego>-keepattributes SourceFile,LineNumberTable<newline46mondego><newline46mondego>-keepclasseswithmembers public class your.Main { public static void main(java.lang.String[]); }<newline46mondego>"
"6738splitHere46","3366604splitHere46","main.jar"
"6739splitHere46","3366604splitHere46","java -Xmx512m -jar proguard.jar @your.pro<newline46mondego>"
"6740splitHere46","3366604splitHere46","-Xmx"
"6741splitHere46","3366620splitHere46","Factory"
"6742splitHere46","3366620splitHere46","org.hamcrest.generator.config.XmlConfigurator"
"6743splitHere46","3366634splitHere46","java.util.regex.Matcher"
"6744splitHere46","3366634splitHere46","find()"
"6745splitHere46","3366634splitHere46","split"
"6746splitHere46","3366634splitHere46","String text = <doubleQuotes46>1 2 \<doubleQuotes46>333 4\<doubleQuotes46> 55 6    \<doubleQuotes46>77\<doubleQuotes46> 8 999<doubleQuotes46>;<newline46mondego>    // 1 2 <doubleQuotes46>333 4<doubleQuotes46> 55 6    <doubleQuotes46>77<doubleQuotes46> 8 999<newline46mondego><newline46mondego>    String regex = <doubleQuotes46>\<doubleQuotes46>([^\<doubleQuotes46>]*)\<doubleQuotes46>|(\\S+)<doubleQuotes46>;<newline46mondego><newline46mondego>    Matcher m = Pattern.compile(regex).matcher(text);<newline46mondego>    while (m.find()) {<newline46mondego>        if (m.group(1) != null) {<newline46mondego>            System.out.println(<doubleQuotes46>Quoted [<doubleQuotes46> + m.group(1) + <doubleQuotes46>]<doubleQuotes46>);<newline46mondego>        } else {<newline46mondego>            System.out.println(<doubleQuotes46>Plain [<doubleQuotes46> + m.group(2) + <doubleQuotes46>]<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"6747splitHere46","3366634splitHere46","Plain [1]<newline46mondego>Plain [2]<newline46mondego>Quoted [333 4]<newline46mondego>Plain [55]<newline46mondego>Plain [6]<newline46mondego>Quoted [77]<newline46mondego>Plain [8]<newline46mondego>Plain [999]<newline46mondego>"
"6748splitHere46","3366634splitHere46","<doubleQuotes46>([^<doubleQuotes46>]*)<doubleQuotes46>|(\S+)<newline46mondego> \_____/  \___/<newline46mondego>    1       2<newline46mondego>"
"6749splitHere46","3366634splitHere46","Matcher"
"6750splitHere46","3366634splitHere46","StringTokenizer"
"6751splitHere46","3366634splitHere46","java.util.Scanner"
"6752splitHere46","3366634splitHere46","String.split"
"6753splitHere46","3366634splitHere46","java.util.regex.Matcher"
"6754splitHere46","3366674splitHere46","startTime = System.nanoTime();<newline46mondego>"
"6755splitHere46","3366674splitHere46","totalTime = System.nanoTime()-startTime;<newline46mondego>"
"6756splitHere46","3366730splitHere46","if (entity != null) { <newline46mondego>    InputStream instream = entity.getContent();<newline46mondego>    OutputStream outstream = new FileOutputStream(<doubleQuotes46>YourFile<doubleQuotes46>);<newline46mondego>    org.apache.commons.io.IOUtils.copy(instream, outstream);<newline46mondego>}<newline46mondego>"
"6757splitHere46","3366790splitHere46","// code 1<newline46mondego>new SomeObject().doSomething();<newline46mondego><newline46mondego>// bytecode 1<newline46mondego>   0:   new #2; //class SomeObject<newline46mondego>   3:   dup<newline46mondego>   4:   invokespecial   #3; //Method SomeObject.<doubleQuotes46><init><doubleQuotes46>:()V<newline46mondego>   7:   invokevirtual   #4; //Method SomeObject.doSomething:()V<newline46mondego>   10:  return<newline46mondego>"
"6758splitHere46","3366790splitHere46","// code 2<newline46mondego>SomeObject myObj = new SomeObject();<newline46mondego>myObj.doSomething();<newline46mondego><newline46mondego>// bytecode 2<newline46mondego>   0:   new #2; //class SomeObject<newline46mondego>   3:   dup<newline46mondego>   4:   invokespecial   #3; //Method SomeObject.<doubleQuotes46><init><doubleQuotes46>:()V<newline46mondego>   7:   astore_1<newline46mondego>   8:   aload_1<newline46mondego>   9:   invokevirtual   #4; //Method SomeObject.doSomething:()V<newline46mondego>   12:  return<newline46mondego>"
"6759splitHere46","3367398splitHere46","setFoo"
"6760splitHere46","3367398splitHere46","getFoo"
"6761splitHere46","3367418splitHere46","<c:forEach var=<doubleQuotes46>year1<doubleQuotes46> items=<doubleQuotes46>${Info.list}<doubleQuotes46>  varStatus=<doubleQuotes46>yearCounter1<doubleQuotes46> ><newline46mondego>    <c:if test=<doubleQuotes46>${yearCounter1.count == 1}<doubleQuotes46>><newline46mondego>        <c:forEach var=<doubleQuotes46>clist1<doubleQuotes46> items=<doubleQuotes46>${year1.list}<doubleQuotes46> varStatus=<doubleQuotes46>catCounter1<doubleQuotes46>>   <newline46mondego>            <c:if test=<doubleQuotes46>${catCounter1.count == 1}<doubleQuotes46>><newline46mondego>                 <c:forEach var=<doubleQuotes46>colorlist1<doubleQuotes46> items=<doubleQuotes46>${colorlist1.list}<doubleQuotes46> varStatus=<doubleQuotes46>colorCounter1<doubleQuotes46>><newline46mondego>                                 <!-- this gets me to all possible colors --><newline46mondego>                                 <c:forEach var=<doubleQuotes46>year2<doubleQuotes46> items=<doubleQuotes46>${Info.list}<doubleQuotes46>  varStatus=<doubleQuotes46>yearCounter2<doubleQuotes46> ><newline46mondego>                    <c:forEach var=<doubleQuotes46>clist2<doubleQuotes46> items=<doubleQuotes46>${tlist2.list}<doubleQuotes46> varStatus=<doubleQuotes46>catCounter2<doubleQuotes46>><newline46mondego>                                             ....<newline46mondego>                                                          <c:if test=<doubleQuotes46>${colorCounter1.description==colorCounter3.description&& year2.description==year3.description  && clist2.description==clist3.description}<doubleQuotes46> ><newline46mondego>"
"6762splitHere46","3367496splitHere46","public class DataStructure{<newline46mondego>      private Map<String, A> aMap = new HashMap<String, A>();<newline46mondego>      public getA(String name){<newline46mondego>          return aMap.get(name);<newline46mondego>      }<newline46mondego>      public getB(String aName, String bName){<newline46mondego>          A anA = getA(aName);<newline46mondego>          if(null != anA){<newline46mondego>              return anA.getB(bName);<newline46mondego>          }else{ <newline46mondego>              return null;<newline46mondego>          }<newline46mondego>    }<newline46mondego>}<newline46mondego>public class A{<newline46mondego>    String name;<newline46mondego>    Map<String, B> myBs = new HashMap<String, B>();<newline46mondego>    public A(String name){<newline46mondego>        this.name = name;<newline46mondego>    }<newline46mondego>    public void putB(B foo){<newline46mondego>        myBs.put(foo.getName(), foo);<newline46mondego>    }<newline46mondego>    public B getB(String bName){<newline46mondego>        return myBs.get(bName);<newline46mondego>    }<newline46mondego><newline46mondego> }<newline46mondego><newline46mondego><newline46mondego>public class B{<newline46mondego>    String name;<newline46mondego>    public B(String name){<newline46mondego>        this.name=name;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6763splitHere46","3367650splitHere46","byte[]"
"6764splitHere46","3367650splitHere46","InputStream"
"6765splitHere46","3367650splitHere46","ByteArrayInputStream"
"6766splitHere46","3367688splitHere46","/**<newline46mondego> * @return instance of this as Junit test case<newline46mondego> */<newline46mondego>public static junit.framework.Test suite()<newline46mondego>{<newline46mondego>    return new JUnit4TestAdapter(MyTestClass.class);<newline46mondego>}<newline46mondego>"
"6767splitHere46","3367760splitHere46","h:dataTable"
"6768splitHere46","3367760splitHere46","<h:dataTable value=<doubleQuotes46>#{dataTableBean.items}<doubleQuotes46> var=<doubleQuotes46>item<doubleQuotes46>><newline46mondego>              <h:column><newline46mondego>                  <f:facet name=<doubleQuotes46>header<doubleQuotes46> ><newline46mondego>                      <h:outputText value=<doubleQuotes46>Item Category<doubleQuotes46>/><newline46mondego>                  </f:facet>    <newline46mondego>                  <h:outputText value=<doubleQuotes46>#{item.category}<doubleQuotes46>/><newline46mondego>              </h:column><newline46mondego>          </h:dataTable><newline46mondego>"
"6769splitHere46","3367760splitHere46","h:panelGrid"
"6770splitHere46","3367760splitHere46","<h:panelGrid id=<doubleQuotes46>panel<doubleQuotes46> columns=<doubleQuotes46>2<doubleQuotes46> border=<doubleQuotes46>1<doubleQuotes46>><newline46mondego>  <h:outputText value=<doubleQuotes46>First Name:<doubleQuotes46> /><newline46mondego>  <h:inputText id=<doubleQuotes46>first<doubleQuotes46> value=<doubleQuotes46>#{backingBean.user.firstName}<doubleQuotes46> /><newline46mondego>  <h:outputText value=<doubleQuotes46>Last Name:<doubleQuotes46> /><newline46mondego>  <h:inputText id=<doubleQuotes46>last<doubleQuotes46> value=<doubleQuotes46>#{backingBean.user.lastName}<doubleQuotes46> /><newline46mondego></h:panelGrid><newline46mondego>"
"6771splitHere46","3367778splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><project name=<doubleQuotes46>xslt-converter<doubleQuotes46> basedir=<doubleQuotes46>.<doubleQuotes46> default=<doubleQuotes46>package<doubleQuotes46>><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>version<doubleQuotes46> value=<doubleQuotes46>1.6<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>haltonfailure<doubleQuotes46> value=<doubleQuotes46>no<doubleQuotes46>/><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>out<doubleQuotes46> value=<doubleQuotes46>out<doubleQuotes46>/><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>production.src<doubleQuotes46> value=<doubleQuotes46>src<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>production.lib<doubleQuotes46> value=<doubleQuotes46>lib<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>production.resources<doubleQuotes46> value=<doubleQuotes46>config<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>production.classes<doubleQuotes46> value=<doubleQuotes46>${out}/production/${ant.project.name}<doubleQuotes46>/><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>test.src<doubleQuotes46> value=<doubleQuotes46>test<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>test.lib<doubleQuotes46> value=<doubleQuotes46>lib<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>test.resources<doubleQuotes46> value=<doubleQuotes46>config<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>test.classes<doubleQuotes46> value=<doubleQuotes46>${out}/test/${ant.project.name}<doubleQuotes46>/><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>exploded<doubleQuotes46> value=<doubleQuotes46>out/exploded/${ant.project.name}<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>exploded.classes<doubleQuotes46> value=<doubleQuotes46>${exploded}/WEB-INF/classes<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>exploded.lib<doubleQuotes46> value=<doubleQuotes46>${exploded}/WEB-INF/lib<doubleQuotes46>/><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>reports.out<doubleQuotes46> value=<doubleQuotes46>${out}/reports<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>junit.out<doubleQuotes46> value=<doubleQuotes46>${reports.out}/junit<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>testng.out<doubleQuotes46> value=<doubleQuotes46>${reports.out}/testng<doubleQuotes46>/><newline46mondego><newline46mondego>    <path id=<doubleQuotes46>production.class.path<doubleQuotes46>><newline46mondego>        <pathelement location=<doubleQuotes46>${production.classes}<doubleQuotes46>/><newline46mondego>        <pathelement location=<doubleQuotes46>${production.resources}<doubleQuotes46>/><newline46mondego>        <fileset dir=<doubleQuotes46>${production.lib}<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>**/*.jar<doubleQuotes46>/><newline46mondego>            <exclude name=<doubleQuotes46>**/junit*.jar<doubleQuotes46>/><newline46mondego>            <exclude name=<doubleQuotes46>**/*test*.jar<doubleQuotes46>/><newline46mondego>        </fileset><newline46mondego>    </path><newline46mondego><newline46mondego>    <path id=<doubleQuotes46>test.class.path<doubleQuotes46>>                            <newline46mondego>        <path refid=<doubleQuotes46>production.class.path<doubleQuotes46>/><newline46mondego>        <pathelement location=<doubleQuotes46>${test.classes}<doubleQuotes46>/><newline46mondego>        <pathelement location=<doubleQuotes46>${test.resources}<doubleQuotes46>/><newline46mondego>        <fileset dir=<doubleQuotes46>${test.lib}<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>**/junit*.jar<doubleQuotes46>/><newline46mondego>            <include name=<doubleQuotes46>**/*test*.jar<doubleQuotes46>/><newline46mondego>        </fileset><newline46mondego>    </path><newline46mondego><newline46mondego>    <path id=<doubleQuotes46>testng.class.path<doubleQuotes46>><newline46mondego>        <fileset dir=<doubleQuotes46>${test.lib}<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>**/testng*.jar<doubleQuotes46>/><newline46mondego>        </fileset><newline46mondego>    </path><newline46mondego><newline46mondego>    <available file=<doubleQuotes46>${out}<doubleQuotes46> property=<doubleQuotes46>outputExists<doubleQuotes46>/><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>clean<doubleQuotes46> description=<doubleQuotes46>remove all generated artifacts<doubleQuotes46> if=<doubleQuotes46>outputExists<doubleQuotes46>><newline46mondego>        <delete dir=<doubleQuotes46>${out}<doubleQuotes46> includeEmptyDirs=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>        <delete dir=<doubleQuotes46>${reports.out}<doubleQuotes46> includeEmptyDirs=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>create<doubleQuotes46> description=<doubleQuotes46>create the output directories<doubleQuotes46> unless=<doubleQuotes46>outputExists<doubleQuotes46>><newline46mondego>        <mkdir dir=<doubleQuotes46>${production.classes}<doubleQuotes46>/><newline46mondego>        <mkdir dir=<doubleQuotes46>${test.classes}<doubleQuotes46>/><newline46mondego>        <mkdir dir=<doubleQuotes46>${reports.out}<doubleQuotes46>/><newline46mondego>        <mkdir dir=<doubleQuotes46>${junit.out}<doubleQuotes46>/><newline46mondego>        <mkdir dir=<doubleQuotes46>${testng.out}<doubleQuotes46>/><newline46mondego>        <mkdir dir=<doubleQuotes46>${exploded.classes}<doubleQuotes46>/><newline46mondego>        <mkdir dir=<doubleQuotes46>${exploded.lib}<doubleQuotes46>/><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>compile<doubleQuotes46> description=<doubleQuotes46>compile all .java source files<doubleQuotes46> depends=<doubleQuotes46>create<doubleQuotes46>><newline46mondego>        <!-- Debug output<newline46mondego>                <property name=<doubleQuotes46>production.class.path<doubleQuotes46> refid=<doubleQuotes46>production.class.path<doubleQuotes46>/><newline46mondego>                <echo message=<doubleQuotes46>${production.class.path}<doubleQuotes46>/><newline46mondego>        --><newline46mondego>        <javac srcdir=<doubleQuotes46>src<doubleQuotes46> destdir=<doubleQuotes46>${out}/production/${ant.project.name}<doubleQuotes46> debug=<doubleQuotes46>on<doubleQuotes46> source=<doubleQuotes46>${version}<doubleQuotes46>><newline46mondego>            <classpath refid=<doubleQuotes46>production.class.path<doubleQuotes46>/><newline46mondego>            <include name=<doubleQuotes46>**/*.java<doubleQuotes46>/><newline46mondego>            <exclude name=<doubleQuotes46>**/*Test.java<doubleQuotes46>/><newline46mondego>        </javac><newline46mondego>        <javac srcdir=<doubleQuotes46>${test.src}<doubleQuotes46> destdir=<doubleQuotes46>${out}/test/${ant.project.name}<doubleQuotes46> debug=<doubleQuotes46>on<doubleQuotes46> source=<doubleQuotes46>${version}<doubleQuotes46>><newline46mondego>            <classpath refid=<doubleQuotes46>test.class.path<doubleQuotes46>/><newline46mondego>            <include name=<doubleQuotes46>**/*Test.java<doubleQuotes46>/><newline46mondego>        </javac><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>junit-test<doubleQuotes46> description=<doubleQuotes46>run all junit tests<doubleQuotes46> depends=<doubleQuotes46>compile<doubleQuotes46>><newline46mondego>        <!-- Debug output<newline46mondego>                <property name=<doubleQuotes46>test.class.path<doubleQuotes46> refid=<doubleQuotes46>test.class.path<doubleQuotes46>/><newline46mondego>                <echo message=<doubleQuotes46>${test.class.path}<doubleQuotes46>/><newline46mondego>        --><newline46mondego>        <junit printsummary=<doubleQuotes46>yes<doubleQuotes46> haltonfailure=<doubleQuotes46>${haltonfailure}<doubleQuotes46>><newline46mondego>            <classpath refid=<doubleQuotes46>test.class.path<doubleQuotes46>/><newline46mondego>            <formatter type=<doubleQuotes46>xml<doubleQuotes46>/><newline46mondego>            <batchtest fork=<doubleQuotes46>yes<doubleQuotes46> todir=<doubleQuotes46>${junit.out}<doubleQuotes46>><newline46mondego>                <fileset dir=<doubleQuotes46>${test.src}<doubleQuotes46>><newline46mondego>                    <include name=<doubleQuotes46>**/*Test.java<doubleQuotes46>/><newline46mondego>                </fileset><newline46mondego>            </batchtest><newline46mondego>        </junit><newline46mondego>        <junitreport todir=<doubleQuotes46>${junit.out}<doubleQuotes46>><newline46mondego>            <fileset dir=<doubleQuotes46>${junit.out}<doubleQuotes46>><newline46mondego>                <include name=<doubleQuotes46>TEST-*.xml<doubleQuotes46>/><newline46mondego>            </fileset><newline46mondego>            <report todir=<doubleQuotes46>${junit.out}<doubleQuotes46> format=<doubleQuotes46>frames<doubleQuotes46>/><newline46mondego>        </junitreport><newline46mondego>    </target><newline46mondego><newline46mondego>    <taskdef resource=<doubleQuotes46>testngtasks<doubleQuotes46> classpathref=<doubleQuotes46>testng.class.path<doubleQuotes46>/><newline46mondego>    <target name=<doubleQuotes46>testng-test<doubleQuotes46> description=<doubleQuotes46>run all testng tests<doubleQuotes46> depends=<doubleQuotes46>compile<doubleQuotes46>><newline46mondego>        <!-- Debug output<newline46mondego>                <property name=<doubleQuotes46>test.class.path<doubleQuotes46> refid=<doubleQuotes46>test.class.path<doubleQuotes46>/><newline46mondego>                <echo message=<doubleQuotes46>${test.class.path}<doubleQuotes46>/><newline46mondego>        --><newline46mondego>        <testng classpathref=<doubleQuotes46>test.class.path<doubleQuotes46> outputDir=<doubleQuotes46>${testng.out}<doubleQuotes46> haltOnFailure=<doubleQuotes46>${haltonfailure}<doubleQuotes46> verbose=<doubleQuotes46>2<doubleQuotes46> parallel=<doubleQuotes46>methods<doubleQuotes46> threadcount=<doubleQuotes46>50<doubleQuotes46>><newline46mondego>            <classfileset dir=<doubleQuotes46>${out}/test/${ant.project.name}<doubleQuotes46> includes=<doubleQuotes46>**/*.class<doubleQuotes46>/><newline46mondego>        </testng><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>exploded<doubleQuotes46> description=<doubleQuotes46>create exploded deployment<doubleQuotes46> depends=<doubleQuotes46>testng-test<doubleQuotes46>><newline46mondego>        <copy todir=<doubleQuotes46>${exploded.classes}<doubleQuotes46>><newline46mondego>            <fileset dir=<doubleQuotes46>${production.classes}<doubleQuotes46>/><newline46mondego>        </copy><newline46mondego>        <copy todir=<doubleQuotes46>${exploded.lib}<doubleQuotes46>><newline46mondego>            <fileset dir=<doubleQuotes46>${production.lib}<doubleQuotes46>/><newline46mondego>        </copy><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>package<doubleQuotes46> description=<doubleQuotes46>create package file<doubleQuotes46> depends=<doubleQuotes46>exploded<doubleQuotes46>><newline46mondego>        <jar destfile=<doubleQuotes46>${out}/${ant.project.name}.jar<doubleQuotes46> basedir=<doubleQuotes46>${production.classes}<doubleQuotes46> includes=<doubleQuotes46>**/*.class<doubleQuotes46>/><newline46mondego>    </target><newline46mondego><newline46mondego></project><newline46mondego>"
"6772splitHere46","3367857splitHere46","(\d{7})|(\d{10)|"
"6773splitHere46","3367912splitHere46","ItemID,StartTime,EndTime,ViewItemURL,AverageTime,category,category,type,type,AveragePrice<newline46mondego>4504216603,10:00:10.000Z,10:00:30.000Z,http://url,,,,,,<newline46mondego>4504216604,10:30:10.000Z,11:00:10.000Z,http://url,value1,9823,9112,TX,TY,value2<newline46mondego>"
"6774splitHere46","3367912splitHere46","import com.google.common.collect.LinkedHashMultimap;<newline46mondego>import java.io.FileNotFoundException;<newline46mondego>import java.io.FileReader;<newline46mondego>import java.io.IOException;<newline46mondego>import java.util.LinkedHashMap;<newline46mondego>import java.util.Map.Entry;<newline46mondego>import org.xml.sax.Attributes;<newline46mondego>import org.xml.sax.InputSource;<newline46mondego>import org.xml.sax.SAXException;<newline46mondego>import org.xml.sax.XMLReader;<newline46mondego>import org.xml.sax.helpers.DefaultHandler;<newline46mondego>import org.xml.sax.helpers.XMLReaderFactory;<newline46mondego><newline46mondego>public class App {<newline46mondego><newline46mondego>    public static void main(String[] args) throws SAXException, FileNotFoundException, IOException {<newline46mondego>        // First pass - to determine headers<newline46mondego>        XMLReader xr = XMLReaderFactory.createXMLReader();<newline46mondego>        HeaderHandler handler = new HeaderHandler();<newline46mondego>        xr.setContentHandler(handler);<newline46mondego>        xr.setErrorHandler(handler);<newline46mondego>        FileReader r = new FileReader(<doubleQuotes46>test1.xml<doubleQuotes46>);<newline46mondego>        xr.parse(new InputSource(r));<newline46mondego><newline46mondego>        LinkedHashMap<String, Integer> headers = handler.getHeaders();<newline46mondego>        int totalnumberofcolumns = 0;<newline46mondego>        for (int headercount : headers.values()) {<newline46mondego>            totalnumberofcolumns += headercount;<newline46mondego>        }<newline46mondego>        String[] columnheaders = new String[totalnumberofcolumns];<newline46mondego>        int i = 0;<newline46mondego>        for (Entry<String, Integer> entry : headers.entrySet()) {<newline46mondego>            for (int j = 0; j < entry.getValue(); j++) {<newline46mondego>                columnheaders[i] = entry.getKey();<newline46mondego>                i++;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        StringBuilder sb = new StringBuilder();<newline46mondego>        for (String h : columnheaders) {<newline46mondego>            sb.append(h);<newline46mondego>            sb.append(',');<newline46mondego>        }<newline46mondego>        System.out.println(sb.substring(0, sb.length() - 1));<newline46mondego><newline46mondego>        // Second pass - collect and output data<newline46mondego><newline46mondego>        xr = XMLReaderFactory.createXMLReader();<newline46mondego><newline46mondego>        DataHandler datahandler = new DataHandler();<newline46mondego>        datahandler.setHeaderArray(columnheaders);<newline46mondego><newline46mondego>        xr.setContentHandler(datahandler);<newline46mondego>        xr.setErrorHandler(datahandler);<newline46mondego>        r = new FileReader(<doubleQuotes46>test1.xml<doubleQuotes46>);<newline46mondego>        xr.parse(new InputSource(r));<newline46mondego>    }<newline46mondego><newline46mondego>    public static class HeaderHandler extends DefaultHandler {<newline46mondego><newline46mondego>        private String content;<newline46mondego>        private String currentElement;<newline46mondego>        private boolean insideElement = false;<newline46mondego>        private Attributes attribs;<newline46mondego>        private LinkedHashMap<String, Integer> itemHeader;<newline46mondego>        private LinkedHashMap<String, Integer> accumulativeHeader = new LinkedHashMap<String, Integer>();<newline46mondego><newline46mondego>        public HeaderHandler() {<newline46mondego>            super();<newline46mondego>        }<newline46mondego><newline46mondego>        private LinkedHashMap<String, Integer> getHeaders() {<newline46mondego>            return accumulativeHeader;<newline46mondego>        }<newline46mondego><newline46mondego>        private void addItemHeader(String headerName) {<newline46mondego>            if (itemHeader.containsKey(headerName)) {<newline46mondego>                itemHeader.put(headerName, itemHeader.get(headerName) + 1);<newline46mondego>            } else {<newline46mondego>                itemHeader.put(headerName, 1);<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void startElement(String uri, String name,<newline46mondego>                String qName, Attributes atts) {<newline46mondego>            if (<doubleQuotes46>item<doubleQuotes46>.equalsIgnoreCase(qName)) {<newline46mondego>                itemHeader = new LinkedHashMap<String, Integer>();<newline46mondego>            }<newline46mondego>            currentElement = qName;<newline46mondego>            content = null;<newline46mondego>            insideElement = true;<newline46mondego>            attribs = atts;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void endElement(String uri, String name, String qName) {<newline46mondego>            if (!<doubleQuotes46>item<doubleQuotes46>.equalsIgnoreCase(qName) && !<doubleQuotes46>root<doubleQuotes46>.equalsIgnoreCase(qName)) {<newline46mondego>                if (content != null && qName.equals(currentElement) && content.trim().length() > 0) {<newline46mondego>                    addItemHeader(qName);<newline46mondego>                }<newline46mondego>                if (attribs != null) {<newline46mondego>                    int attsLength = attribs.getLength();<newline46mondego>                    if (attsLength > 0) {<newline46mondego>                        for (int i = 0; i < attsLength; i++) {<newline46mondego>                            String attName = attribs.getLocalName(i);<newline46mondego>                            addItemHeader(attName);<newline46mondego>                        }<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego>            if (<doubleQuotes46>item<doubleQuotes46>.equalsIgnoreCase(qName)) {<newline46mondego>                for (Entry<String, Integer> entry : itemHeader.entrySet()) {<newline46mondego>                    String headerName = entry.getKey();<newline46mondego>                    Integer count = entry.getValue();<newline46mondego>                    //System.out.println(entry.getKey() + <doubleQuotes46>:<doubleQuotes46> + entry.getValue());<newline46mondego>                    if (accumulativeHeader.containsKey(headerName)) {<newline46mondego>                        if (count > accumulativeHeader.get(headerName)) {<newline46mondego>                            accumulativeHeader.put(headerName, count);<newline46mondego>                        }<newline46mondego>                    } else {<newline46mondego>                        accumulativeHeader.put(headerName, count);<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego>            insideElement = false;<newline46mondego>            currentElement = null;<newline46mondego>            attribs = null;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void characters(char ch[], int start, int length) {<newline46mondego>            if (insideElement) {<newline46mondego>                content = new String(ch, start, length);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static class DataHandler extends DefaultHandler {<newline46mondego><newline46mondego>        private String content;<newline46mondego>        private String currentElement;<newline46mondego>        private boolean insideElement = false;<newline46mondego>        private Attributes attribs;<newline46mondego>        private LinkedHashMultimap dataMap;<newline46mondego>        private String[] headerArray;<newline46mondego><newline46mondego>        public DataHandler() {<newline46mondego>            super();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void startElement(String uri, String name,<newline46mondego>                String qName, Attributes atts) {<newline46mondego>            if (<doubleQuotes46>item<doubleQuotes46>.equalsIgnoreCase(qName)) {<newline46mondego>                dataMap = LinkedHashMultimap.create();<newline46mondego>            }<newline46mondego>            currentElement = qName;<newline46mondego>            content = null;<newline46mondego>            insideElement = true;<newline46mondego>            attribs = atts;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void endElement(String uri, String name, String qName) {<newline46mondego>            if (!<doubleQuotes46>item<doubleQuotes46>.equalsIgnoreCase(qName) && !<doubleQuotes46>root<doubleQuotes46>.equalsIgnoreCase(qName)) {<newline46mondego>                if (content != null && qName.equals(currentElement) && content.trim().length() > 0) {<newline46mondego>                    dataMap.put(qName, content);<newline46mondego>                }<newline46mondego>                if (attribs != null) {<newline46mondego>                    int attsLength = attribs.getLength();<newline46mondego>                    if (attsLength > 0) {<newline46mondego>                        for (int i = 0; i < attsLength; i++) {<newline46mondego>                            String attName = attribs.getLocalName(i);<newline46mondego>                            dataMap.put(attName, attribs.getValue(i));<newline46mondego>                        }<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego>            if (<doubleQuotes46>item<doubleQuotes46>.equalsIgnoreCase(qName)) {<newline46mondego>                String data[] = new String[headerArray.length];<newline46mondego>                int i = 0;<newline46mondego>                for (String h : headerArray) {<newline46mondego>                    if (dataMap.containsKey(h)) {<newline46mondego>                        Object[] values = dataMap.get(h).toArray();<newline46mondego>                        data[i] = (String) values[0];<newline46mondego>                        if (values.length > 1) {<newline46mondego>                            dataMap.removeAll(h);<newline46mondego>                            for (int j = 1; j < values.length; j++) {<newline46mondego>                                dataMap.put(h, values[j]);<newline46mondego>                            }<newline46mondego>                        } else {<newline46mondego>                            dataMap.removeAll(h);<newline46mondego>                        }<newline46mondego>                    } else {<newline46mondego>                        data[i] = <doubleQuotes46><doubleQuotes46>;<newline46mondego>                    }<newline46mondego>                    i++;<newline46mondego>                }<newline46mondego>                StringBuilder sb = new StringBuilder();<newline46mondego>                for (String d : data) {<newline46mondego>                    sb.append(d);<newline46mondego>                    sb.append(',');<newline46mondego>                }<newline46mondego>                System.out.println(sb.substring(0, sb.length() - 1));<newline46mondego>            }<newline46mondego>            insideElement = false;<newline46mondego>            currentElement = null;<newline46mondego>            attribs = null;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void characters(char ch[], int start, int length) {<newline46mondego>            if (insideElement) {<newline46mondego>                content = new String(ch, start, length);<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        public void setHeaderArray(String[] headerArray) {<newline46mondego>            this.headerArray = headerArray;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6775splitHere46","3368082splitHere46","int BufferedInputStream.read(byte[] buffer, int offset, int length)<newline46mondego>void BufferedOutputStream.write(byte[] buffer, int offset, int length)<newline46mondego>"
"6776splitHere46","3368192splitHere46","board = new Hexagon[n][n];<newline46mondego>for(int i=0; i<n; i++)<newline46mondego>    for(int j=0; j<n; j++)<newline46mondego>        board[i][j] = new Hexagon();<newline46mondego>"
"6777splitHere46","3368289splitHere46","hibernate.globally_quoted_identifiers=true"
"6778splitHere46","3368289splitHere46","NamingStrategy"
"6779splitHere46","3368324splitHere46","server/a/b"
"6780splitHere46","3368324splitHere46","/tomcat/webapps"
"6781splitHere46","3368324splitHere46","/tomcat"
"6782splitHere46","3368324splitHere46","/webapps"
"6783splitHere46","3368324splitHere46","/webappname"
"6784splitHere46","3368324splitHere46","/WEB-INF"
"6785splitHere46","3368324splitHere46","/tomcat/webapps/webappname/WEB-INF"
"6786splitHere46","3368486splitHere46","ColorEditor"
"6787splitHere46","3368486splitHere46","TableDialogEditDemo"
"6788splitHere46","3368486splitHere46","ColorRenderer"
"6789splitHere46","3368573splitHere46","-Xmx256m"
"6790splitHere46","3368573splitHere46","java"
"6791splitHere46","3368634splitHere46","<a>"
"6792splitHere46","3368634splitHere46","Document doc = Jsoup.parse(input, <doubleQuotes46>UTF-8<doubleQuotes46>, <doubleQuotes46>http://example.com/<doubleQuotes46>);<newline46mondego>Elements links = doc.select(<doubleQuotes46>a[href]<doubleQuotes46>); // a with href<newline46mondego>"
"6793splitHere46","3368634splitHere46","<h1>"
"6794splitHere46","3368634splitHere46","<p>"
"6795splitHere46","3368634splitHere46","<div>"
"6796splitHere46","3368634splitHere46","[attr^=value]"
"6797splitHere46","3368634splitHere46","[attr$=value]"
"6798splitHere46","3368634splitHere46","[attr*=value]:"
"6799splitHere46","3368634splitHere46","select(<doubleQuotes46>[href*=/path/]<doubleQuotes46>)"
"6800splitHere46","3369221splitHere46","'(?:''|[^'])*'|[^',]+<newline46mondego>"
"6801splitHere46","3369221splitHere46","'            # First alternative: match an <doubleQuotes46>opening<doubleQuotes46> '<newline46mondego> (?:         # followed by either...<newline46mondego>  ''         # two ' in a row (escaped ')<newline46mondego> |           # or...<newline46mondego>  [^']       # any character that is not a '<newline46mondego> )*          # zero or more times,<newline46mondego>'            # then match a <doubleQuotes46>closing<doubleQuotes46> '<newline46mondego>|            # or (second alternative):<newline46mondego>[^',\s]+     # match any run of characters except ', comma or whitespace<newline46mondego>"
"6802splitHere46","3369303splitHere46","final"
"6803splitHere46","3369776splitHere46","ByteArrayOutputStream baos = new ByteArrayOutputStream();<newline46mondego>PrintStream recordingStream = new PrintStream(baos);<newline46mondego>instance.print(recordingStream);<newline46mondego>logger.log(baos.toString());<newline46mondego>"
"6804splitHere46","3369844splitHere46","wait(...)"
"6805splitHere46","3369882splitHere46","import org.jboss.seam.Component;<newline46mondego>import org.jboss.seam.annotations.*;<newline46mondego>import org.jboss.seam.log.Log;<newline46mondego><newline46mondego>@Name(<doubleQuotes46>foo<doubleQuotes46>)<newline46mondego>@AutoCreate<newline46mondego>public class Foo {<newline46mondego>    @Logger Log log;<newline46mondego>    @In Bar bar;<newline46mondego><newline46mondego>    @Create<newline46mondego>    public void init()  {<newline46mondego>        log.info(<doubleQuotes46>Init: #0<doubleQuotes46>, bar);<newline46mondego>        log.info(<doubleQuotes46>Init: #0<doubleQuotes46>, Component.getInstance(<doubleQuotes46>bar<doubleQuotes46>));<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego>import org.jboss.seam.annotations.AutoCreate;<newline46mondego>import org.jboss.seam.annotations.Name;<newline46mondego><newline46mondego>@Name(<doubleQuotes46>bar<doubleQuotes46>)<newline46mondego>@AutoCreate<newline46mondego>public class Bar { }<newline46mondego>"
"6806splitHere46","3369883splitHere46","private"
"6807splitHere46","3369883splitHere46","private"
"6808splitHere46","3369883splitHere46","protected"
"6809splitHere46","3369953splitHere46","clojure.examples.hello"
"6810splitHere46","3369953splitHere46","hello.clj"
"6811splitHere46","3369953splitHere46","$CPDIR/clojure/examples"
"6812splitHere46","3369953splitHere46","$CPDIR"
"6813splitHere46","3370062splitHere46","StringBuffer"
"6814splitHere46","3370062splitHere46","new"
"6815splitHere46","3370062splitHere46","String"
"6816splitHere46","3370116splitHere46","public List<List> getList(List<List<Date>> lists, int num) {<newline46mondego>    List<List> result = new ArrayList<List>();<newline46mondego>    for (List list : lists) {<newline46mondego>        Collections.sort(list);<newline46mondego>        if (checkList(list, num)) {<newline46mondego>            result.add(list);<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>    return result;<newline46mondego>}<newline46mondego><newline46mondego>public boolean checkList(List<Date> list, int num) {<newline46mondego>    int count = 0;<newline46mondego>    for (int i = 0; i < list.size() - 1; i++) {<newline46mondego>        Calendar calendar1 = Calendar.getInstance();<newline46mondego><newline46mondego>        calendar1.setTime(list.get(i));<newline46mondego>        calendar1.set(Calendar.DAY_OF_MONTH,calendar1.get(Calendar.DAY_OF_MONTH)+1);<newline46mondego>        calendar1.set(Calendar.HOUR_OF_DAY,0);<newline46mondego>        calendar1.set(Calendar.MINUTE,0);<newline46mondego>        calendar1.set(Calendar.MILLISECOND,0);<newline46mondego><newline46mondego>        Calendar calendar2 = Calendar.getInstance();<newline46mondego>        calendar2.setTime(list.get(i + 1));<newline46mondego>        calendar2.set(Calendar.HOUR_OF_DAY,0);<newline46mondego>        calendar2.set(Calendar.MINUTE,0);<newline46mondego>        calendar2.set(Calendar.MILLISECOND,0);<newline46mondego><newline46mondego>        if (calendar1.equals(calendar2)) {<newline46mondego>            count++;<newline46mondego>        } else {<newline46mondego>            count = 0;<newline46mondego>        }<newline46mondego>        if (count >= num) {<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"6817splitHere46","3370245splitHere46","String"
"6818splitHere46","3370245splitHere46","String"
"6819splitHere46","3370245splitHere46","String"
"6820splitHere46","3370245splitHere46","=="
"6821splitHere46","3370245splitHere46","class String"
"6822splitHere46","3370245splitHere46","String"
"6823splitHere46","3370245splitHere46","String.intern"
"6824splitHere46","3370245splitHere46","System.out.println(<doubleQuotes46>yes<doubleQuotes46> == <doubleQuotes46>yes<doubleQuotes46>); // true<newline46mondego>System.out.println(99 + <doubleQuotes46>bottles<doubleQuotes46> == <doubleQuotes46>99bottles<doubleQuotes46>); // true<newline46mondego>System.out.println(<doubleQuotes46>7<doubleQuotes46> + <doubleQuotes46>11<doubleQuotes46> == <doubleQuotes46><doubleQuotes46> + '7' + '1' + (char) (50-1)); // true<newline46mondego>System.out.println(<doubleQuotes46>trueLove<doubleQuotes46> == (true + <doubleQuotes46>Love<doubleQuotes46>)); // true<newline46mondego>System.out.println(<doubleQuotes46>MGD64<doubleQuotes46> == <doubleQuotes46>MGD<doubleQuotes46> + Long.SIZE);<newline46mondego>"
"6825splitHere46","3370245splitHere46","=="
"6826splitHere46","3370245splitHere46","String"
"6827splitHere46","3370245splitHere46","equals"
"6828splitHere46","3370245splitHere46","null"
"6829splitHere46","3370245splitHere46","instanceof String"
"6830splitHere46","3370245splitHere46","intern()"
"6831splitHere46","3370245splitHere46","String"
"6832splitHere46","3370245splitHere46","=="
"6833splitHere46","3370245splitHere46","new String(...)"
"6834splitHere46","3370245splitHere46","String"
"6835splitHere46","3370245splitHere46","=="
"6836splitHere46","3370245splitHere46","equals"
"6837splitHere46","3370245splitHere46","public String(String original)"
"6838splitHere46","3370245splitHere46","String"
"6839splitHere46","3370245splitHere46","Strings"
"6840splitHere46","3370245splitHere46","System.out.println(<doubleQuotes46>x<doubleQuotes46> == new String(<doubleQuotes46>x<doubleQuotes46>)); // false<newline46mondego>"
"6841splitHere46","3370245splitHere46","new"
"6842splitHere46","3370245splitHere46","false"
"6843splitHere46","3370245splitHere46","new String"
"6844splitHere46","3370269splitHere46","engine.eval(<doubleQuotes46>function isArray(obj) {<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>  return obj.constructor == Array;<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>}<doubleQuotes46>);<newline46mondego>Object obj = engine.eval(<doubleQuotes46>[1,2,3,4]<doubleQuotes46>);<newline46mondego>Invocable invocableEngine = (Invocable) engine;<newline46mondego>System.out.println(invocableEngine.invokeFunction(<doubleQuotes46>isArray<doubleQuotes46>, obj)); //true<newline46mondego>"
"6845splitHere46","3370330splitHere46","MimeBodyPart mbp = new MimeBodyPart();<newline46mondego> mbp.setContent(forwardedMsg, <doubleQuotes46>message/rfc822<doubleQuotes46>);<newline46mondego> mp.addPart(mbp);<newline46mondego>"
"6846splitHere46","3370437splitHere46","t use Injection of weld logger in ejb in a case of glassfish ejb container because of it is ejb container managed bean and it don"
"6847splitHere46","3370567splitHere46","def"
"6848splitHere46","3370567splitHere46","printMe = { str -> println str }<newline46mondego>"
"6849splitHere46","3370567splitHere46","printMe"
"6850splitHere46","3370690splitHere46","Chat chat = connection.getChatManager().createChat(to, this);<newline46mondego>Message message = new Message(to, Message.Type.chat);<newline46mondego>message.setBody(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>message.setProperty(prop0, val0);<newline46mondego>message.setProperty(prop1, val1);<newline46mondego>chat.sendMessage(message)<newline46mondego>"
"6851splitHere46","3370690splitHere46","toXML()"
"6852splitHere46","3370690splitHere46","getProperty()"
"6853splitHere46","3370690splitHere46","addExtension()"
"6854splitHere46","3370690splitHere46","PacketExtension"
"6855splitHere46","3370690splitHere46","PacketExtensionProvider"
"6856splitHere46","3370733splitHere46","Serializable"
"6857splitHere46","3370733splitHere46","import java.io.Serializable;<newline46mondego><newline46mondego>public class MyClass implements Serializable {<newline46mondego>}<newline46mondego>"
"6858splitHere46","3370919splitHere46","for (int i=0; i<=N-9; i+=9) {<newline46mondego> System.arrayCopy(arrayN, i, a1, 0, 3);<newline46mondego> System.arrayCopy(arrayN, i+3, a2, 0, 3);<newline46mondego> System.arrayCopy(arrayN, i+6, a3, 0, 3);<newline46mondego> // presumably do other stuff here<newline46mondego>}<newline46mondego>"
"6859splitHere46","3370919splitHere46","arrayN"
"6860splitHere46","3370919splitHere46","Arrays.fill(arrayN, null)"
"6861splitHere46","3370919splitHere46","a[m][n]"
"6862splitHere46","3370919splitHere46","for (i=0; i<=N-m*n; i+=m*n) {<newline46mondego> for (int j=0; j<m; j++) System.arrayCopy(arrayN, i+n*j, a[j], 0, n);<newline46mondego> // presumably do other stuff here<newline46mondego>}<newline46mondego>"
"6863splitHere46","3370919splitHere46","i"
"6864splitHere46","3371038splitHere46","RuntimeBeanReference"
"6865splitHere46","3371038splitHere46","values.addPropertyValue(<doubleQuotes46>beanProperty<doubleQuotes46>, new RuntimeBeanReference(<doubleQuotes46>beanName<doubleQuotes46>)); <newline46mondego>"
"6866splitHere46","3371072splitHere46","String[] options = new String[]{<doubleQuotes46>option1<doubleQuotes46>, <doubleQuotes46>option2<doubleQuotes46>};<newline46mondego>    Runtime.getRuntime().exec(<doubleQuotes46>command<doubleQuotes46>, options);<newline46mondego>"
"6867splitHere46","3371073splitHere46","new TypLiteral<List<String>>() {}"
"6868splitHere46","3371073splitHere46","getClass().getGenericSuperclass()"
"6869splitHere46","3371073splitHere46","java.lang.reflect.ParameterizedType"
"6870splitHere46","3371073splitHere46","getActualTypeArguments()"
"6871splitHere46","3371073splitHere46","List<String>"
"6872splitHere46","3371073splitHere46","ParameterizedType"
"6873splitHere46","3371140splitHere46","@Override<newline46mondego>public void init(PortletConfig config) throws PortletException {<newline46mondego>    super.init(config);<newline46mondego>    String configLocations = config.getInitParameter(<doubleQuotes46>contextConfigLocation<doubleQuotes46>);<newline46mondego>    ClassPathXmlApplicationContext springContext = new ClassPathXmlApplicationContext();<newline46mondego>    springContext.setConfigLocation(configLocations);<newline46mondego>    springContext.refresh();<newline46mondego>    config.getPortletContext().setAttribute(APPLICATION_CONTEXT_ATTRIBUTE, springContext);<newline46mondego>}<newline46mondego>"
"6874splitHere46","3371140splitHere46","(ApplicationContext) portalContext.getAttribute(APPLICATION_CONTEXT_ATTRIBUTE);<newline46mondego>"
"6875splitHere46","3371146splitHere46","datePattern : <doubleQuotes46>yyyy-MM-dd<doubleQuotes46><newline46mondego>"
"6876splitHere46","3371209splitHere46","@Entity<newline46mondego>public class User<newline46mondego>{<newline46mondego>   @Id<newline46mondego>   private int id;<newline46mondego>   @NotNull<newline46mondego>   private String fullName;<newline46mondego>   @NotNull<newline46mondego>   private String email;<newline46mondego>   private Set<Role> roles; //No bean validation constraints here.<newline46mondego>   ...<newline46mondego>   public boolean mapRoleToUser(Role role)<newline46mondego>   { //Validation is done here. Including checks for a null role.<newline46mondego>   }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>@Entity<newline46mondego>public class Role<newline46mondego>{<newline46mondego>  @Id<newline46mondego>  private int id;<newline46mondego>  @NotNull<newline46mondego>  private String name;<newline46mondego>}<newline46mondego>"
"6877splitHere46","3371337splitHere46","java.util.Date time=new java.util.Date((long)timeStamp*1000);<newline46mondego>"
"6878splitHere46","3371552splitHere46","Filter"
"6879splitHere46","3371552splitHere46","chain.doFilter(request, response)"
"6880splitHere46","3371552splitHere46","HttpServletResponse"
"6881splitHere46","3371552splitHere46","OutputStream"
"6882splitHere46","3371993splitHere46","InetAddress addr = InetAddress.getByName(<doubleQuotes46>192.168.190.62<doubleQuotes46>);<newline46mondego>  String host = addr.getHostName();<newline46mondego>  System.out.println(host);<newline46mondego>"
"6883splitHere46","3372116splitHere46","let h = get_hash_hunction(<doubleQuotes46>SHA-512<doubleQuotes46>)<newline46mondego>let k = get_key_for_user(<doubleQuotes46>Justice<doubleQuotes46>)<newline46mondego>let hmac = get_hmac(h, k)<newline46mondego>let test = get_bytes(<doubleQuotes46>utf-8<doubleQuotes46>, http_request_params[<doubleQuotes46>password<doubleQuotes46>])<newline46mondego>for(i in 0 .. (2^16 - 1))<newline46mondego>    let test = run_hmac(hmac, test)<newline46mondego>return test == get_hashed_password_for_user(<doubleQuotes46>Justice<doubleQuotes46>)<newline46mondego>"
"6884splitHere46","3372247splitHere46","URLConnection urlc = url.openConnection();<newline46mondego>urlc.addRequestProperty(<doubleQuotes46>User-Agent<doubleQuotes46>, <doubleQuotes46>firefox<doubleQuotes46>);<newline46mondego>"
"6885splitHere46","3372295splitHere46","Hashtable"
"6886splitHere46","3372295splitHere46","Vector"
"6887splitHere46","3372496splitHere46","List<Node> nodes = Arrays.<Node>asList(n,m,subclass);    <newline46mondego>"
"6888splitHere46","3372716splitHere46","clojure.lang.Compiler.loadFile(String file)"
"6889splitHere46","3372719splitHere46","HttpSession"
"6890splitHere46","3372719splitHere46","Serializable"
"6891splitHere46","3372719splitHere46","Serializable"
"6892splitHere46","3372719splitHere46","ObjectOutputStream"
"6893splitHere46","3372719splitHere46","ObjectInputStream"
"6894splitHere46","3372743splitHere46","//opens the URL as a stream, so it does not timeout prematurely<newline46mondego>String u = new String(<doubleQuotes46>http://foobar/isbnsearch.php?isbn=<doubleQuotes46>+ISBN);<newline46mondego>URL url = new URL(u);<newline46mondego>InputStream stream = url.openStream();<newline46mondego><newline46mondego>r.parse(new InputSource(stream));<newline46mondego>stream.close();<newline46mondego>"
"6895splitHere46","3372915splitHere46","int numRows = selenium.getXpathCount(<doubleQuotes46>table[@id='myTable']//tbody//<doubleQuotes46> + <newline46mondego>        <doubleQuotes46>tr[not(@style)]/td[1]<doubleQuotes46>).intValue();<newline46mondego>String[] values = new String[numRows];<newline46mondego>for (int i = 0; i < numRows; i++) {<newline46mondego>    values[i] = selenium.getText(<doubleQuotes46>table[@id='myTable']//tbody//<doubleQuotes46> +<newline46mondego>            <doubleQuotes46>tr[not(@style)][<doubleQuotes46> + i + <doubleQuotes46>]/td[1]<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"6896splitHere46","3372948splitHere46","XMLOutputter"
"6897splitHere46","3373334splitHere46","while"
"6898splitHere46","3373334splitHere46","while (numPrime < 10001) {<newline46mondego>"
"6899splitHere46","3373334splitHere46","while(true)"
"6900splitHere46","3373334splitHere46","if (condition)<newline46mondego>{<newline46mondego>    break;<newline46mondego>}<newline46mondego>"
"6901splitHere46","3373334splitHere46","continue"
"6902splitHere46","3373334splitHere46","int current = 1;<newline46mondego>for (int i = 0; i < 10001; i++)<newline46mondego>{<newline46mondego>    current++;<newline46mondego>    while (!isPrime(current))<newline46mondego>    {<newline46mondego>        current++;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6903splitHere46","3373334splitHere46","current"
"6904splitHere46","3373334splitHere46","for"
"6905splitHere46","3373357splitHere46","<a href=<doubleQuotes46>...<doubleQuotes46>>"
"6906splitHere46","3373357splitHere46","new URL(<doubleQuotes46>...<doubleQuotes46>).openStream()"
"6907splitHere46","3373411splitHere46","07-30 23:06:03.231: DEBUG/MyActivity(386): onResume 1280505963237   <newline46mondego>07-30 23:06:03.281: DEBUG/MyActivity(386): onReceive 1280505963281<newline46mondego>07-30 23:06:03.361: DEBUG/MyActivity(386): getView 0 1280505963371<newline46mondego>07-30 23:06:03.381: DEBUG/MyActivity(386): getView 1 1280505963386<newline46mondego>"
"6908splitHere46","3373480splitHere46","public String getMessage(Locale locale, String key) {<newline46mondego>    String message = key;<newline46mondego>    key = key.toString().replace(<doubleQuotes46>{<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>).replace(<doubleQuotes46>}<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego><newline46mondego>    PlatformResourceBundleLocator bundleLocator = new PlatformResourceBundleLocator(ResourceBundleMessageInterpolator.DEFAULT_VALIDATION_MESSAGES);<newline46mondego>    ResourceBundle resourceBundle = bundleLocator.getResourceBundle(locale);<newline46mondego><newline46mondego>    try {<newline46mondego>       message = ResourceBundle.getString(key);<newline46mondego>    }<newline46mondego><newline46mondego>    catch(MissingResourceException ) {<newline46mondego>       message = key;<newline46mondego>    }<newline46mondego><newline46mondego>    return message;<newline46mondego>}<newline46mondego>"
"6909splitHere46","3373480splitHere46","PlatformResourceBundleLocator"
"6910splitHere46","3373480splitHere46","ResourceBundle"
"6911splitHere46","3373480splitHere46","applicationContext.xml"
"6912splitHere46","3373480splitHere46","<bean id=<doubleQuotes46>resourceBundleSource<doubleQuotes46> class=<doubleQuotes46>org.springframework.context.support.ResourceBundleMessageSource<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>basenames<doubleQuotes46>><newline46mondego>        <list><newline46mondego>            <value>org.hibernate.validator.ValidationMessages</value><newline46mondego>        </list><newline46mondego>    </property><newline46mondego></bean><newline46mondego>"
"6913splitHere46","3373480splitHere46","MessageSource"
"6914splitHere46","3373480splitHere46","messageSource.getMessage()"
"6915splitHere46","3373576splitHere46","public class StatusBar extends JPanel{ //Instead of JToolBar<newline46mondego>    private JProgressBar progressBar = new JProgressBar(JProgressBar.HORIZONTAL);<newline46mondego>    private JPanel progressPanel = new JPanel();<newline46mondego>    private JPanel globalPanel = new JPanel();<newline46mondego>    private JPanel cameraPanel = new JPanel();<newline46mondego>    private JLabel cameraLabel = new JLabel(<doubleQuotes46>Camera: <doubleQuotes46>);<newline46mondego>    private JLabel cameraCoords = new JLabel();<newline46mondego>    private JLabel globalLabel = new JLabel(<doubleQuotes46>Global: <doubleQuotes46>);<newline46mondego>    private JLabel globalCoords = new JLabel();<newline46mondego><newline46mondego>    public StatusBar(){<newline46mondego>        progressPanel.setLayout(new BoxLayout(progressPanel, BoxLayout.X_AXIS));<newline46mondego>        globalPanel.setLayout(new BoxLayout(globalPanel, BoxLayout.X_AXIS));<newline46mondego>        cameraPanel.setLayout(new BoxLayout(cameraPanel, BoxLayout.X_AXIS));<newline46mondego><newline46mondego>        progressBar.setFocusable(false);<newline46mondego>        progressBar.setPreferredSize(new Dimension(100,0));<newline46mondego>        progressBar.setMaximumSize(new Dimension(150,20));<newline46mondego>        progressBar.setStringPainted(true);<newline46mondego><newline46mondego>        progressPanel.add(tileLoadingLabel);<newline46mondego>        progressPanel.add(Box.createHorizontalStrut(5));<newline46mondego>        progressPanel.add(progressBar);<newline46mondego>        globalPanel.add(globalLabel);<newline46mondego>        globalPanel.add(globalCoords);<newline46mondego>        globalPanel.add(separator);<newline46mondego>        globalCoords.setPreferredSize(new Dimension(150,0));<newline46mondego><newline46mondego>        //Here is where I made the change(after extending JPanel and not JToolBar<newline46mondego>        //I used the BorderLayout instead of the BoxLayout  <newline46mondego>        this.setLayout(new BorderLayout());<newline46mondego>        this.setBorder(new EmptyBorder(5,5,5,5));<newline46mondego>        this.setPreferredSize(new Dimension(0,30));<newline46mondego>        this.add(globalPanel,BorderLayout.WEST);<newline46mondego>        this.add(Box.createHorizontalGlue());<newline46mondego>        this.add(progressPanel,BorderLayout.EAST);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6916splitHere46","3373739splitHere46","java.awt.Window"
"6917splitHere46","3373739splitHere46","JFrame f = new JFrame();<newline46mondego>f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>f.setBackground(new Color(0f, 0f, 0f, 0.1f));<newline46mondego>f.setUndecorated(true);<newline46mondego>f.add(new JLabel(<doubleQuotes46><html>Testing<newline46mondego>1, 2, 3</html><doubleQuotes46>));<newline46mondego>f.pack();<newline46mondego>f.setLocationRelativeTo(null);<newline46mondego>f.setVisible(true);<newline46mondego>"
"6918splitHere46","3373769splitHere46","<ol><newline46mondego>  <c:forEach items=<doubleQuotes46>${myMap}<doubleQuotes46> var=<doubleQuotes46>item<doubleQuotes46>><newline46mondego>    <li><c:out value=<doubleQuotes46>${item.key}<doubleQuotes46>/>=<c:out value=<doubleQuotes46>${item.value}<doubleQuotes46>/></li><newline46mondego>  </c:forEach><newline46mondego></ol><newline46mondego>"
"6919splitHere46","3374165splitHere46","-"
"6920splitHere46","3374165splitHere46","="
"6921splitHere46","3374165splitHere46","enum Type {<newline46mondego><newline46mondego>    MPEG2(2), PASSED_PIDS_ID(3), DVB(4), ATSC(5), NA(6), UNDETERMINED(7);<newline46mondego><newline46mondego>    private final int value;<newline46mondego><newline46mondego>    Type(int value) {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getValue() {<newline46mondego>        return value;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6922splitHere46","3374180splitHere46","panel.addAncestorListener(...);<newline46mondego>"
"6923splitHere46","3374260splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46>((\\d*\\.\\d+)|(\\d+)|([\\+\\-\\*/\\(\\)]))<doubleQuotes46>);<newline46mondego>Matcher m = pattern.matcher(<doubleQuotes46>1.5+4.2*(5+2)/10-4<doubleQuotes46>);<newline46mondego>while(m.find()) {<newline46mondego>    System.out.printf(<doubleQuotes46>%s <doubleQuotes46>, m.group());<newline46mondego>}<newline46mondego><newline46mondego>output: 1.5 + 4.2 * ( 5 + 2 ) / 10 - 4<newline46mondego>"
"6924splitHere46","3374473splitHere46","log4j.properties"
"6925splitHere46","3374473splitHere46","BasicConfigurator"
"6926splitHere46","3374473splitHere46","main"
"6927splitHere46","3374588splitHere46","new Security()"
"6928splitHere46","3374588splitHere46","scope"
"6929splitHere46","3374588splitHere46","session"
"6930splitHere46","3374588splitHere46","<bean id=<doubleQuotes46>securityObject<doubleQuotes46> class=<doubleQuotes46>com.xyz.Security<doubleQuotes46> scope=<doubleQuotes46>session<doubleQuotes46>><newline46mondego>    <aop:scoped-proxy /> <!-- important --><newline46mondego></bean><newline46mondego>"
"6931splitHere46","3374588splitHere46","new Security()"
"6932splitHere46","3374588splitHere46","Security"
"6933splitHere46","3374588splitHere46","void someMethod() {<newline46mondego>    //...<newline46mondego>    Security securityObject = applicationContext.getBean(<doubleQuotes46>securityObject<doubleQuotes46>); // 1<newline46mondego>    securityObject.doSomething(); // 2<newline46mondego>    //...<newline46mondego>}<newline46mondego>"
"6934splitHere46","3374588splitHere46","Security"
"6935splitHere46","3374588splitHere46","Security"
"6936splitHere46","3374588splitHere46","securityObject.doSomething()"
"6937splitHere46","3374874splitHere46","chain.doFilter(httpRequest, new AddExpiresHeaderResponse(httpResponse));<newline46mondego>"
"6938splitHere46","3374874splitHere46","class AddExpiresHeaderResponse extends HttpServletResponseWrapper {<newline46mondego><newline46mondego>    public static final String[] CACHEABLE_CONTENT_TYPES = new String[] {<newline46mondego>        <doubleQuotes46>text/css<doubleQuotes46>, <doubleQuotes46>text/javascript<doubleQuotes46>, <doubleQuotes46>image/png<doubleQuotes46>, <doubleQuotes46>image/jpeg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>image/gif<doubleQuotes46>, <doubleQuotes46>image/jpg<doubleQuotes46> };<newline46mondego><newline46mondego>    static {<newline46mondego>        Arrays.sort(CACHEABLE_CONTENT_TYPES);<newline46mondego>    }<newline46mondego><newline46mondego>    public AddExpiresHeaderResponse(HttpServletResponse response) {<newline46mondego>        super(response);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void setContentType(String contentType) {<newline46mondego>        if (contentType != null && Arrays.binarySearch(CACHEABLE_CONTENT_TYPES, contentType) > -1) {<newline46mondego>            Calendar inTwoMonths = GeneralUtils.createCalendar();<newline46mondego>            inTwoMonths.add(Calendar.MONTH, 2);<newline46mondego><newline46mondego>            super.setDateHeader(<doubleQuotes46>Expires<doubleQuotes46>, inTwoMonths.getTimeInMillis());<newline46mondego>        } else {<newline46mondego>            super.setHeader(<doubleQuotes46>Expires<doubleQuotes46>, <doubleQuotes46>-1<doubleQuotes46>);<newline46mondego>            super.setHeader(<doubleQuotes46>Cache-Control<doubleQuotes46>, <doubleQuotes46>no-store, no-cache, must-revalidate<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        super.setContentType(contentType);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6939splitHere46","3374958splitHere46",".csv"
"6940splitHere46","3374958splitHere46","File[] files = new File(DIR_LOCATION).listFiles(new FileFilter() {<newline46mondego>    public boolean accept(File file) {<newline46mondego>        return file.getName().endsWith(<doubleQuotes46>.csv<doubleQuotes46>);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"6941splitHere46","3375079splitHere46","public class AggregateException extends Exception {<newline46mondego><newline46mondego>    private final Exception[] secondaryExceptions;<newline46mondego><newline46mondego>    public AggregateException(String message, Exception primary, Exception... others) {<newline46mondego>        super(message, primary);<newline46mondego>        this.secondaryExceptions = others == null ? new Exception[0] : others;<newline46mondego>    }<newline46mondego><newline46mondego>    public Throwable[] getAllExceptions() {<newline46mondego><newline46mondego>        int start = 0;<newline46mondego>        int size = secondaryExceptions.length;<newline46mondego>        final Throwable primary = getCause();<newline46mondego>        if (primary != null) {<newline46mondego>            start = 1;<newline46mondego>            size++;<newline46mondego>        }<newline46mondego><newline46mondego>        Throwable[] all = new Exception[size];<newline46mondego><newline46mondego>        if (primary != null) {<newline46mondego>            all[0] = primary;<newline46mondego>        }<newline46mondego><newline46mondego>        Arrays.fill(all, start, all.length, secondaryExceptions);<newline46mondego>        return all;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6942splitHere46","3375125splitHere46","try {<newline46mondego>        HttpClient client = new DefaultHttpClient();  <newline46mondego>        String getURL = <doubleQuotes46>http://www.google.com<doubleQuotes46>;<newline46mondego>        HttpGet get = new HttpGet(getURL);<newline46mondego>        HttpResponse responseGet = client.execute(get);  <newline46mondego>        HttpEntity resEntityGet = responseGet.getEntity();  <newline46mondego>        if (resEntityGet != null) {  <newline46mondego>                    //do something with the response<newline46mondego>                    Log.i(<doubleQuotes46>GET RESPONSE<doubleQuotes46>,EntityUtils.toString(resEntityGet));<newline46mondego>                }<newline46mondego>} catch (Exception e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}`<newline46mondego>"
"6943splitHere46","3375125splitHere46","try {<newline46mondego>    HttpClient client = new DefaultHttpClient();  <newline46mondego>    String postURL = <doubleQuotes46>http://somepostaddress.com<doubleQuotes46>;<newline46mondego>    HttpPost post = new HttpPost(postURL); <newline46mondego>        List<NameValuePair> params = new ArrayList<NameValuePair>();<newline46mondego>        params.add(new BasicNameValuePair(<doubleQuotes46>user<doubleQuotes46>, <doubleQuotes46>kris<doubleQuotes46>));<newline46mondego>        params.add(new BasicNameValuePair(<doubleQuotes46>pass<doubleQuotes46>, <doubleQuotes46>xyz<doubleQuotes46>));<newline46mondego>        UrlEncodedFormEntity ent = new UrlEncodedFormEntity(params,HTTP.UTF_8);<newline46mondego>        post.setEntity(ent);<newline46mondego>        HttpResponse responsePOST = client.execute(post);  <newline46mondego>        HttpEntity resEntity = responsePOST.getEntity();  <newline46mondego>        if (resEntity != null) {    <newline46mondego>            Log.i(<doubleQuotes46>RESPONSE<doubleQuotes46>,EntityUtils.toString(resEntity));<newline46mondego>        }<newline46mondego>} catch (Exception e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"6944splitHere46","3375239splitHere46","KeyStore"
"6945splitHere46","3375239splitHere46","TrustStore"
"6946splitHere46","3375239splitHere46","null"
"6947splitHere46","3375239splitHere46","SSLSockeFactory"
"6948splitHere46","3375239splitHere46","import org.apache.http.conn.scheme.Scheme;<newline46mondego>import org.apache.http.conn.scheme.SchemeRegistry;<newline46mondego>import org.apache.http.conn.ssl.SSLSocketFactory;<newline46mondego>import org.apache.http.impl.client.DefaultHttpClient;<newline46mondego>import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;<newline46mondego>import org.apache.http.params.BasicHttpParams;<newline46mondego>import org.apache.http.params.HttpParams;<newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>final HttpParams httpParams = new BasicHttpParams();<newline46mondego><newline46mondego>// load the keystore containing the client certificate - keystore type is probably jks or pkcs12<newline46mondego>final KeyStore keystore = KeyStore.getInstance(<doubleQuotes46>pkcs12<doubleQuotes46>);<newline46mondego>InputStream keystoreInput = null;<newline46mondego>// TODO get the keystore as an InputStream from somewhere<newline46mondego>keystore.load(keystoreInput, <doubleQuotes46>keystorepassword<doubleQuotes46>.toCharArray());<newline46mondego><newline46mondego>// load the trustore, leave it null to rely on cacerts distributed with the JVM - truststore type is probably jks or pkcs12<newline46mondego>KeyStore truststore = KeyStore.getInstance(<doubleQuotes46>pkcs12<doubleQuotes46>);<newline46mondego>InputStream truststoreInput = null;<newline46mondego>// TODO get the trustore as an InputStream from somewhere<newline46mondego>truststore.load(truststoreInput, <doubleQuotes46>truststorepassword<doubleQuotes46>.toCharArray());<newline46mondego><newline46mondego>final SchemeRegistry schemeRegistry = new SchemeRegistry();<newline46mondego>schemeRegistry.register(new Scheme(<doubleQuotes46>https<doubleQuotes46>, new SSLSocketFactory(keystore, keystorePassword, truststore), 443));<newline46mondego><newline46mondego>final DefaultHttpClient httpClient = new DefaultHttpClient(new ThreadSafeClientConnManager(httpParams, schemeRegistry), httpParams);<newline46mondego>"
"6949splitHere46","3375439splitHere46","f:verbatim"
"6950splitHere46","3375439splitHere46","h:panelGroup"
"6951splitHere46","3375439splitHere46","<h:panelGroup rendered=<doubleQuotes46>#{bean.param == 'name'}<doubleQuotes46>><newline46mondego>    ...<newline46mondego></h:panelGroup><newline46mondego>"
"6952splitHere46","3375439splitHere46","#{param}"
"6953splitHere46","3375439splitHere46","<h:panelGroup rendered=<doubleQuotes46>#{param.change == 'name'}<doubleQuotes46>><newline46mondego>    ...<newline46mondego></h:panelGroup><newline46mondego>"
"6954splitHere46","3375493splitHere46","public static String getFileToCrawl(String directory){<newline46mondego>      File dir = new File(directory);<newline46mondego><newline46mondego>      String[] children = dir.list();<newline46mondego>      if (children == null) {<newline46mondego>          return <doubleQuotes46><doubleQuotes46>;<newline46mondego>      } else {<newline46mondego>          int i=0;<newline46mondego>          String filename = children[i];<newline46mondego>          while (i<children.length && !filename.contains(<doubleQuotes46>.txt<doubleQuotes46>)){<newline46mondego>              i++;<newline46mondego>              filename = children[i];<newline46mondego>          }<newline46mondego>          return filename;<newline46mondego>      }<newline46mondego><newline46mondego>  }<newline46mondego>"
"6955splitHere46","3375797splitHere46","in.ready()<newline46mondego>"
"6956splitHere46","3375833splitHere46","File f = new File(<doubleQuotes46>bin/<doubleQuotes46> + className.replace('.', File.separatorChar) + <doubleQuotes46>.class<doubleQuotes46>);<newline46mondego>DataInputStream is = new DataInputStream(new FileInputStream(f));<newline46mondego>int len = (int)f.length();<newline46mondego>byte[] buff = new byte[len];<newline46mondego>is.readFully(buff);<newline46mondego>is.close();<newline46mondego>return buff;<newline46mondego>"
"6957splitHere46","3375833splitHere46","try {<newline46mondego>  try {<newline46mondego>    b = loadClassData(className);<newline46mondego>  }<newline46mondego>  catch(FileNotFoundException fnf) {<newline46mondego>    return super.findClass(className);<newline46mondego>  }<newline46mondego>  Class c = defineClass(className, b, 0, b.length);<newline46mondego>  if(c != null)<newline46mondego>    return c;<newline46mondego>  return super.findClass(className);<newline46mondego>} catch (IOException e) {<newline46mondego>  e.printStackTrace();<newline46mondego>}<newline46mondego>return null;<newline46mondego>"
"6958splitHere46","3375834splitHere46","class C<newline46mondego>{<newline46mondego>  static<newline46mondego>  {<newline46mondego>     // if something does wrong -> ExceptionInInitializerError<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6959splitHere46","3375834splitHere46","class C<newline46mondego>{<newline46mondego>  static int v = D.foo();<newline46mondego>}<newline46mondego>"
"6960splitHere46","3375834splitHere46","class C<newline46mondego>{<newline46mondego>  static int v;<newline46mondego><newline46mondego>  static<newline46mondego>  {<newline46mondego>    v = D.foo();<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6961splitHere46","3375936splitHere46","public static void main(String[] args)<newline46mondego>{<newline46mondego>    String myString = <doubleQuotes46>foo<doubleQuotes46>;<newline46mondego>    int a = 0;<newline46mondego>    for (int i = 0; i < 100000000; ++i)<newline46mondego>    {<newline46mondego>        //if (myString != null)<newline46mondego>        //if (myString.length() > 0)<newline46mondego>        if (!myString.equals(<doubleQuotes46><doubleQuotes46>))<newline46mondego>        {<newline46mondego>            a++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    System.out.println(a);<newline46mondego>}<newline46mondego>"
"6962splitHere46","3375987splitHere46","overwrite=<doubleQuotes46>true<doubleQuotes46>"
"6963splitHere46","3375987splitHere46","granularity"
"6964splitHere46","3376203splitHere46","private int PicPosition;<newline46mondego>private Handler handler = new Handler();<newline46mondego>"
"6965splitHere46","3376203splitHere46","private Runnable runnable = new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        myslideshow();<newline46mondego>        handler.postDelayed(this, 1000);\\execute every second.<newline46mondego>    }<newline46mondego>};<newline46mondego><newline46mondego>    private void myslideshow()<newline46mondego>    {<newline46mondego>                    PicPosition = gallery.getSelectedItemPosition() +1;             <newline46mondego>                    if (PicPosition >=  Pictures.size())            <newline46mondego>                    PicPosition =  gallery.getSelectedItemPosition(); //stop <newline46mondego>                                    else<newline46mondego>                    gallery.setSelection(PicPosition);//move to the next gallery element.<newline46mondego>    }<newline46mondego>"
"6966splitHere46","3376209splitHere46","java.util.concurrent"
"6967splitHere46","3376214splitHere46","weblogic.xml"
"6968splitHere46","3376214splitHere46","web.xml"
"6969splitHere46","3376214splitHere46","weblogic-application.xml"
"6970splitHere46","3376214splitHere46","application.xml"
"6971splitHere46","3376214splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><weblogic-web-app<newline46mondego> xmlns=<doubleQuotes46>http://www.bea.com/ns/weblogic/90<doubleQuotes46><newline46mondego> xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego> xsi:schemaLocation=<doubleQuotes46>http://www.bea.com/ns/weblogic/90 http://www.bea.com/ns/weblogic/90/weblogic- web-app.xsd<doubleQuotes46>><newline46mondego>    <container-descriptor><newline46mondego>        <prefer-web-inf-classes>true</prefer-web-inf-classes><newline46mondego>     </container-descriptor><newline46mondego></weblogic-web-app><newline46mondego>"
"6972splitHere46","3376214splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><weblogic-application xmlns=<doubleQuotes46>http://www.bea.com/ns/weblogic/90<doubleQuotes46>><newline46mondego>    <application-param><newline46mondego>        <param-name>webapp.encoding.default</param-name><newline46mondego>        <param-value>UTF-8</param-value><newline46mondego>    </application-param><newline46mondego>    <prefer-application-packages><newline46mondego>        <package-name>javax.jws.*</package-name><newline46mondego>    </prefer-application-packages><newline46mondego></weblogic-application><newline46mondego>"
"6973splitHere46","3376216splitHere46","glViewport()"
"6974splitHere46","3376216splitHere46","glOrtho()"
"6975splitHere46","3376216splitHere46","// Viewport (needs to be done on canvas resize only)<newline46mondego>GL11.glViewport(0.0, 0.0,                   // Set viewport size<newline46mondego>                canvas.getBounds().width,<newline46mondego>                canvas.getBounds().height);<newline46mondego><newline46mondego>// Projection (only needs to be set once in most cases)<newline46mondego>GL11.glMatrixMode(GL11.GL_PROJECTION);        // Select projection matrix<newline46mondego>GL11.glLoadIdentity();                        // Clear it<newline46mondego>GL11.glOrtho(0.0, 1.0, 0.0, 1.0, -1.0, 1.0);  // Set your projection<newline46mondego><newline46mondego>// model/view transforms<newline46mondego>GL11.glMatrixMode(GL11.GL_MODELVIEW);  // Select modelview matrix<newline46mondego>GL11.glLoadIdentity();                 // Clear it<newline46mondego><newline46mondego>// Draw (shortcut)<newline46mondego>GL11.glRectf(0.1f, 0.1f, 0.9f, 0.9f);<newline46mondego>"
"6976splitHere46","3376229splitHere46","setWhere()"
"6977splitHere46","3376229splitHere46","setLimit()"
"6978splitHere46","3376229splitHere46","setDistinct()"
"6979splitHere46","3376229splitHere46","Query q = pm.newQuery (...);<newline46mondego>q.setWhere(...);<newline46mondego>q.setRange (...);<newline46mondego>q.setOrdering (...);<newline46mondego>q.setLimit(...);<newline46mondego>q.newParameter(...); // declare a query parameter<newline46mondego><newline46mondego>q.execute(34.5); // execute the SQL query with a parameter<newline46mondego>"
"6980splitHere46","3376242splitHere46","http://sample.com"
"6981splitHere46","3376242splitHere46","log"
"6982splitHere46","3376242splitHere46","import java.io.IOException;<newline46mondego>import java.io.StringReader;<newline46mondego><newline46mondego>import javax.xml.parsers.DocumentBuilder;<newline46mondego>import javax.xml.parsers.DocumentBuilderFactory;<newline46mondego>import javax.xml.parsers.ParserConfigurationException;<newline46mondego><newline46mondego>import org.w3c.dom.Document;<newline46mondego>import org.w3c.dom.Element;<newline46mondego>import org.xml.sax.InputSource;<newline46mondego>import org.xml.sax.SAXException;<newline46mondego><newline46mondego><newline46mondego>public class GetNamedItemNSTester<newline46mondego>{<newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        new GetNamedItemNSTester();     <newline46mondego>    }<newline46mondego><newline46mondego>    String xml = <doubleQuotes46><xml xmlns:log=\<doubleQuotes46>http://sample.com\<doubleQuotes46>>\n<doubleQuotes46> +<newline46mondego>            <doubleQuotes46>\n<doubleQuotes46> +<newline46mondego>            <doubleQuotes46><test log:writer=\<doubleQuotes46>someWriter\<doubleQuotes46> />\n<doubleQuotes46> +<newline46mondego>            <doubleQuotes46>\n<doubleQuotes46> +<newline46mondego>            <doubleQuotes46></xml><doubleQuotes46>;<newline46mondego><newline46mondego><newline46mondego>    public GetNamedItemNSTester()<newline46mondego>    {<newline46mondego>        StringReader xmlReader = new StringReader(xml);<newline46mondego>        try<newline46mondego>        {<newline46mondego>            DocumentBuilderFactory factory =<newline46mondego>                DocumentBuilderFactory.newInstance();<newline46mondego>            factory.setNamespaceAware(true);<newline46mondego>            DocumentBuilder builder = factory.newDocumentBuilder();<newline46mondego>            Document doc = builder.parse(new InputSource(xmlReader));<newline46mondego><newline46mondego>            Element currentNode =<newline46mondego>                (Element)doc.getElementsByTagName(<doubleQuotes46>test<doubleQuotes46>).item(0);<newline46mondego>            String attributeValue = currentNode.getAttributes()<newline46mondego>                .getNamedItemNS(<doubleQuotes46>http://sample.com<doubleQuotes46>, <doubleQuotes46>writer<doubleQuotes46>).getNodeValue();<newline46mondego>            System.out.println(<doubleQuotes46>Attribute value is <doubleQuotes46> + attributeValue);<newline46mondego>        }<newline46mondego>        catch (ParserConfigurationException e)<newline46mondego>        {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        catch (SAXException e)<newline46mondego>        {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        catch (IOException e)<newline46mondego>        {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        finally<newline46mondego>        {<newline46mondego>            xmlReader.close();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6983splitHere46","3376343splitHere46","Long.MAX_VALUE"
"6984splitHere46","3376628splitHere46","// We want to start just 2 threads at the same time, but let's control that <newline46mondego>// timing from the main thread. That's why we have 3 <doubleQuotes46>parties<doubleQuotes46> instead of 2.<newline46mondego>final CyclicBarrier gate = new CyclicBarrier(3);<newline46mondego><newline46mondego>Thread t1 = new Thread(){<newline46mondego>    public void run(){<newline46mondego>        gate.await();<newline46mondego>        //do stuff    <newline46mondego>    }};<newline46mondego>Thread t2 = new Thread(){<newline46mondego>    public void run(){<newline46mondego>        gate.await();<newline46mondego>        //do stuff    <newline46mondego>    }};<newline46mondego><newline46mondego>t1.start();<newline46mondego>t2.start();<newline46mondego><newline46mondego>// At this point, t1 and t2 are blocking on the gate. <newline46mondego>// Since we gave <doubleQuotes46>3<doubleQuotes46> as the argument, gate is not opened yet.<newline46mondego>// Now if we block on the gate from the main thread, it will open<newline46mondego>// and all threads will start to do stuff!<newline46mondego><newline46mondego>gate.await();<newline46mondego>System.out.println(<doubleQuotes46>all threads started<doubleQuotes46>);<newline46mondego>"
"6985splitHere46","3376628splitHere46","CyclicBarrier"
"6986splitHere46","3376628splitHere46","CountDownLatch"
"6987splitHere46","3376671splitHere46","Array()"
"6988splitHere46","3376671splitHere46","@NamedQueries(Array(<newline46mondego>    new NamedQuery(name = <doubleQuotes46>findAll<doubleQuotes46>, query=<doubleQuotes46>select p from Person p<doubleQuotes46>),<newline46mondego>    new NamedQuery(name = <doubleQuotes46>findTheOne<doubleQuotes46>,<newline46mondego>          query=<doubleQuotes46>select p from Person p where p.name = 'Neo'<doubleQuotes46>)<newline46mondego>))<newline46mondego>"
"6989splitHere46","3376712splitHere46","B b1 = new B();<newline46mondego>B b2 = b1;<newline46mondego>"
"6990splitHere46","3376712splitHere46","B"
"6991splitHere46","3376712splitHere46","B b1 = new B(); //1<newline46mondego>B b2 = new B(); //2<newline46mondego>b2 = b1;        //3<newline46mondego>"
"6992splitHere46","3376712splitHere46","B"
"6993splitHere46","3376732splitHere46","select id, cast(null as char), name from ...<newline46mondego>"
"6994splitHere46","3376732splitHere46","registerFunction(<doubleQuotes46>always_null<doubleQuotes46>, <newline46mondego>  new SQLFunctionTemplate(Hibernate.STRING, <doubleQuotes46>cast(null as char)<doubleQuotes46>));<newline46mondego>"
"6995splitHere46","3376732splitHere46","select id, always_null(), name from ...<newline46mondego>"
"6996splitHere46","3376873splitHere46","wsdl2java -autoNameResolution http://ws.eoddata.com/data.asmx?wsdl<newline46mondego>"
"6997splitHere46","3376873splitHere46","QName qname = new QName(<doubleQuotes46>http://ws.eoddata.com/Data<doubleQuotes46>, <doubleQuotes46>Data<doubleQuotes46>); <newline46mondego>Data data = new Data(new URL(<doubleQuotes46>http://ws.eoddata.com/data.asmx?wsdl<doubleQuotes46>), qname); <newline46mondego>DataSoap dataSoap = data.getDataSoap();<newline46mondego>LOGINRESPONSE response = dataSoap.login(<doubleQuotes46>xxx<doubleQuotes46>, <doubleQuotes46>ppp<doubleQuotes46>);<newline46mondego><newline46mondego>System.out.println(response.getMessage());<newline46mondego>"
"6998splitHere46","3376873splitHere46","Invalid Username or Password<newline46mondego>"
"6999splitHere46","3376978splitHere46","private"
"7000splitHere46","3376978splitHere46","Board"
"7001splitHere46","3376978splitHere46","Tile"
"7002splitHere46","3376978splitHere46","Board"
"7003splitHere46","3376978splitHere46","public void setTileAt(Tile tile, int x, int y) {...}<newline46mondego><newline46mondego>public Tile getTileAt(int x, int y) {...}<newline46mondego>"
"7004splitHere46","3376978splitHere46","public void setTiles(Tile[][] tiles {...}<newline46mondego><newline46mondego>public Tile[][] getTiles() {...}<newline46mondego>"
"7005splitHere46","3376978splitHere46","Board"
"7006splitHere46","3376978splitHere46","Point"
"7007splitHere46","3377195splitHere46","Class.forName(<doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46>);  // initialise the driver<newline46mondego><newline46mondego>String url =<doubleQuotes46>jdbc:mysql://localhost:3306/myfirstdb<doubleQuotes46>;<newline46mondego>"
"7008splitHere46","3377195splitHere46","Class.forName(<doubleQuotes46>net.sourceforge.jtds.jdbc.Driver<doubleQuotes46>);  // initialise the driver<newline46mondego><newline46mondego>String url = <doubleQuotes46>jdbc:jtds:sqlserver://localhost:1433/myfirstdb<doubleQuotes46>;<newline46mondego>"
"7009splitHere46","3377227splitHere46","liferay-portal-tomcat-6.0-5.0.1"
"7010splitHere46","3377227splitHere46","util-java.jar"
"7011splitHere46","3377257splitHere46","logback-core-0.9.24.jar"
"7012splitHere46","3377257splitHere46","pircbot-1.4.2.jar"
"7013splitHere46","3377257splitHere46","LATEST"
"7014splitHere46","3377257splitHere46","RELEASE"
"7015splitHere46","3377404splitHere46","java -cp /Users/smcho/bin/jar/clojure.jar clojure.lang.Repl<newline46mondego>"
"7016splitHere46","3377404splitHere46","java -cp /Users/smcho/bin/jar/clojure.jar:$CLASSPATH clojure.lang.Repl<newline46mondego>"
"7017splitHere46","3377404splitHere46","(doseq [p (.getURLs (java.lang.ClassLoader/getSystemClassLoader))] (println (.getPath p)))<newline46mondego>"
"7018splitHere46","3377568splitHere46","myArrayList"
"7019splitHere46","3377647splitHere46","<set-configuration-property name=<doubleQuotes46>CssResource.style<doubleQuotes46> value=<doubleQuotes46>pretty<doubleQuotes46> />"
"7020splitHere46","3377647splitHere46","<!-- Insert usual UiBinder stuff here --><newline46mondego><ui:with field='res' type='com.example.client.resource.SomeCoolBundle'/><newline46mondego><!-- SomeCoolBundle has a CssResource defined and available via style() --><newline46mondego><newline46mondego><div class='{res.style.lbox}'></div><newline46mondego>"
"7021splitHere46","3377647splitHere46","@external"
"7022splitHere46","3377647splitHere46","@external .gwt-TextBox, .gwt-PasswordTextBox, .gwt-Button, .gwt-CheckBox;<newline46mondego>"
"7023splitHere46","3377967splitHere46","JTextComponent"
"7024splitHere46","3377967splitHere46","JTable"
"7025splitHere46","3377967splitHere46","BasicFrame"
"7026splitHere46","3377967splitHere46","JFrame"
"7027splitHere46","3377967splitHere46","JPanel"
"7028splitHere46","3377967splitHere46","JFrame"
"7029splitHere46","3378385splitHere46","class MyClass {<newline46mondego>int member;<newline46mondego>. . .<newline46mondego><newline46mondego>public static int statFunc() {<newline46mondego>   . . .<newline46mondego>   foo = member;<newline46mondego>   . . .<newline46mondego>}<newline46mondego>. . .<newline46mondego>"
"7030splitHere46","3378385splitHere46","MyClass"
"7031splitHere46","3378385splitHere46","member = 1"
"7032splitHere46","3378385splitHere46","member = 2"
"7033splitHere46","3378385splitHere46","statFunc"
"7034splitHere46","3378385splitHere46","member"
"7035splitHere46","3378431splitHere46","StringEscapeUtils#escapeHtml4"
"7036splitHere46","3378431splitHere46","switch"
"7037splitHere46","3378431splitHere46","StringEscapeUtils"
"7038splitHere46","3378450splitHere46","public enum Gender<newline46mondego>{<newline46mondego>    MALE, FEMALE;<newline46mondego>}<newline46mondego>"
"7039splitHere46","3378450splitHere46","public enum MaritalStatus<newline46mondego>{<newline46mondego>    SINGLE, MARRIED, DIVORCED, WIDOWED, SEPARATED;<newline46mondego>}<newline46mondego>"
"7040splitHere46","3378450splitHere46","import java.text.DateFormat;<newline46mondego>import java.util.Date;<newline46mondego><newline46mondego>public class Person<newline46mondego>{<newline46mondego>    private String name;<newline46mondego>    private Date birthdate;<newline46mondego>    private Gender gender;<newline46mondego>    private MaritalStatus maritalStatus;<newline46mondego><newline46mondego>    public Person(String name)<newline46mondego>    {<newline46mondego>        this(name, new Date(), Gender.MALE, MaritalStatus.SINGLE);<newline46mondego>    }<newline46mondego><newline46mondego>    public Person(String name, Gender gender)<newline46mondego>    {<newline46mondego>        this(name, new Date(), gender, MaritalStatus.SINGLE);<newline46mondego>    }<newline46mondego><newline46mondego>    public Person(String name, Date birthdate)<newline46mondego>    {<newline46mondego>        this(name, birthdate, Gender.MALE, MaritalStatus.SINGLE);<newline46mondego>    }<newline46mondego><newline46mondego>    public Person(String name, Date birthdate, Gender gender)<newline46mondego>    {<newline46mondego>        this(name, birthdate, gender, MaritalStatus.SINGLE);<newline46mondego>    }<newline46mondego><newline46mondego>    public Person(String name, Date birthdate, Gender gender, MaritalStatus maritalStatus)<newline46mondego>    {<newline46mondego>        if ((name == null) || (name.trim().length() == 0))<newline46mondego>            throw new IllegalArgumentException(<doubleQuotes46>name cannot be blank or null<doubleQuotes46>);<newline46mondego><newline46mondego>        this.name = name;<newline46mondego>        this.birthdate = ((birthdate == null) ? new Date() : new Date(birthdate.getTime()));<newline46mondego>        this.gender = gender;<newline46mondego>        this.maritalStatus = maritalStatus;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getName()<newline46mondego>    {<newline46mondego>        return name;<newline46mondego>    }<newline46mondego><newline46mondego>    public Date getBirthdate()<newline46mondego>    {<newline46mondego>        return new Date(birthdate.getTime());<newline46mondego>    }<newline46mondego><newline46mondego>    public Gender getGender()<newline46mondego>    {<newline46mondego>        return gender;<newline46mondego>    }<newline46mondego><newline46mondego>    public MaritalStatus getMaritalStatus()<newline46mondego>    {<newline46mondego>        return maritalStatus;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean equals(Object o)<newline46mondego>    {<newline46mondego>        if (this == o)<newline46mondego>        {<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>        if (o == null || getClass() != o.getClass())<newline46mondego>        {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego><newline46mondego>        Person person = (Person) o;<newline46mondego><newline46mondego>        if (!birthdate.equals(person.birthdate))<newline46mondego>        {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego>        if (gender != person.gender)<newline46mondego>        {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego>        if (maritalStatus != person.maritalStatus)<newline46mondego>        {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego>        if (!name.equals(person.name))<newline46mondego>        {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego><newline46mondego>        return true;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int hashCode()<newline46mondego>    {<newline46mondego>        int result = name.hashCode();<newline46mondego>        result = 31 * result + birthdate.hashCode();<newline46mondego>        result = 31 * result + gender.hashCode();<newline46mondego>        result = 31 * result + maritalStatus.hashCode();<newline46mondego>        return result;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString()<newline46mondego>    {<newline46mondego>        return <doubleQuotes46>Person{<doubleQuotes46> +<newline46mondego>               <doubleQuotes46>name='<doubleQuotes46> + name + '\'' +<newline46mondego>               <doubleQuotes46>, birthdate=<doubleQuotes46> + DateFormat.getDateInstance(DateFormat.MEDIUM).format(birthdate) +<newline46mondego>               <doubleQuotes46>, gender=<doubleQuotes46> + gender +<newline46mondego>               <doubleQuotes46>, maritalStatus=<doubleQuotes46> + maritalStatus +<newline46mondego>               '}';<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7041splitHere46","3378450splitHere46","public class Couple<newline46mondego>{<newline46mondego>    private Person ying;<newline46mondego>    private Person yang;<newline46mondego><newline46mondego>    public Couple(Person ying, Person yang)<newline46mondego>    {<newline46mondego>        this.ying = ying;<newline46mondego>        this.yang = yang;<newline46mondego>    }<newline46mondego><newline46mondego>    public Person getYing()<newline46mondego>    {<newline46mondego>        return ying;<newline46mondego>    }<newline46mondego><newline46mondego>    public Person getYang()<newline46mondego>    {<newline46mondego>        return yang;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString()<newline46mondego>    {<newline46mondego>        return <doubleQuotes46>Couple{<doubleQuotes46> +<newline46mondego>               <doubleQuotes46>ying=<doubleQuotes46> + ying +<newline46mondego>               <doubleQuotes46>, yang=<doubleQuotes46> + yang +<newline46mondego>               '}';<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7042splitHere46","3378450splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego><newline46mondego>public class Dating<newline46mondego>{<newline46mondego>    private List<Person> individuals = new ArrayList<Person>();<newline46mondego>    private List<Couple> couples     = new ArrayList<Couple>();<newline46mondego><newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        Dating dating = new Dating();<newline46mondego><newline46mondego>        dating.addIndividual(new Person(<doubleQuotes46>Jack<doubleQuotes46>));<newline46mondego>        dating.addIndividual(new Person(<doubleQuotes46>Mike<doubleQuotes46>));<newline46mondego>        dating.addIndividual(new Person(<doubleQuotes46>Lydia<doubleQuotes46>, Gender.FEMALE));<newline46mondego>        dating.addIndividual(new Person(<doubleQuotes46>Kate<doubleQuotes46>, Gender.FEMALE));<newline46mondego><newline46mondego>        System.out.println(dating);<newline46mondego>    }<newline46mondego><newline46mondego>    public void addIndividual(Person p)<newline46mondego>    {<newline46mondego>        this.individuals.add(p);<newline46mondego>    }<newline46mondego><newline46mondego>    public void removeIndividual(Person p)<newline46mondego>    {<newline46mondego>        this.individuals.remove(p);<newline46mondego>    }<newline46mondego><newline46mondego>    public Person findIndividual(String name)<newline46mondego>    {<newline46mondego>        Person found = null;<newline46mondego><newline46mondego>        if (name != null)<newline46mondego>        {<newline46mondego>            for (Person p : this.individuals)<newline46mondego>            {<newline46mondego>                if (name.equals(p.getName()))<newline46mondego>                {<newline46mondego>                    found = p;<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        return found;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString()<newline46mondego>    {<newline46mondego>        return <doubleQuotes46>Dating{<doubleQuotes46> +<newline46mondego>               <doubleQuotes46>individuals=<doubleQuotes46> + individuals +<newline46mondego>               <doubleQuotes46>, couples=<doubleQuotes46> + couples +<newline46mondego>               '}';<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7043splitHere46","3378830splitHere46","contentIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);<newline46mondego>"
