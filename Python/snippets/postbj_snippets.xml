<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>8469663</id><snippet>import datetime
datetime.datetime.strptime('2011-12-11T22:37:18Z', '%Y-%m-%dT%H:%M:%SZ')`
</snippet></ROW><ROW><id>8469699</id><snippet>class ViewsDoSomething(TestCase):
    view = 'my_app.views.do_something'

    @patch.object(my_app.models.FooClass, 'bar')
    def test_enter_promotion(self, mock_method):
        self.client.get(reverse(view))
</snippet></ROW><ROW><id>8469820</id><snippet># pylint: disable=X0123</snippet></ROW><ROW><id>8469964</id><snippet>__repr__</snippet></ROW><ROW><id>8469964</id><snippet>class MyClass(object):
    def __init__(self, val):
        self._returnVal = val
    def __repr__(self):
        return self._returnVal
</snippet></ROW><ROW><id>8469964</id><snippet>&gt;&gt;&gt; myObject = MyClass('test')
&gt;&gt;&gt; print myObject
test
</snippet></ROW><ROW><id>8470673</id><snippet>setInterval(                               //Periodically 
  function()
  {
     $.getJSON(                            //Get some values from the server
        $SCRIPT_ROOT + '/get_values',      // At this URL
        {},                                // With no extra parameters
        function(data)                     // And when you get a response
        {
          $("#result").text(data.result);  // Write the results into the 
                                           // #result element
        });
  },
  500);                                    // And do it every 500ms
</snippet></ROW><ROW><id>8471024</id><snippet>example=['130','90','150','123','133','120','160','45','67','55','34']
sub_lists=[['130','90','150'],['90','150'],['120','160','45','67']]

for i in range(len(example)):
    for li in sub_lists:
        length = len(li)
        if example[i:i+length] == li:
            print 'List %s has been matched at index [%d, %d]' % (li, i, i+length-1)
</snippet></ROW><ROW><id>8471024</id><snippet>List ['130', '90', '150'] has been matched at index [0, 2]
List ['90', '150'] has been matched at index [1, 2]
List ['120', '160', '45', '67'] has been matched at index [5, 8]
</snippet></ROW><ROW><id>8471627</id><snippet>re.compile('/&lt;test&gt;[\w\s]+&lt;br&gt;/')
</snippet></ROW><ROW><id>8471627</id><snippet>re.compile('/&lt;test&gt;[\w\s]+?&lt;br&gt;/')
</snippet></ROW><ROW><id>8471657</id><snippet>/usr/local/configs</snippet></ROW><ROW><id>8471657</id><snippet>pip uninstall</snippet></ROW><ROW><id>8471657</id><snippet>$ sudo pip uninstall grc
Uninstalling grc:
  /usr/local/bin/grc
  /usr/local/configs/apache_access.yml
  /usr/local/configs/aptitude.yml
  /usr/local/configs/pysetup.yml
  /usr/local/lib/python2.7/dist-packages/grc
  /usr/local/lib/python2.7/dist-packages/grc-1.0b3.egg-info
Proceed (y/n)?
</snippet></ROW><ROW><id>8471657</id><snippet>pip uninstall</snippet></ROW><ROW><id>8472355</id><snippet>class DummyClient:
   def __init__(self):
      def callback_get_login(realm, username, may_save):
         name = raw_input("Enter your svn login : ")
         password = getpass.getpass("Enter your svn password :")
         return True, name, password, False
      self.client.callback_get_login = callback_get_login
</snippet></ROW><ROW><id>8472437</id><snippet>import datetime
utc_datetime = datetime.datetime.utcnow()
formated_string = utc_datetime.strftime("%Y-%m-%d-%H%MZ") //Result: '2011-12-12-0939Z'
filename = '/SomeDirectory/AnotherDirectory/FilePrefix_%s.txt'% formated_string
</snippet></ROW><ROW><id>8472437</id><snippet>filename = '/SomeDirectory/AnotherDirectory/FilePrefix_%s.txt'%datetime.datetime.utcnow().strftime("%Y-%m-%d-%H%MZ")
</snippet></ROW><ROW><id>8472437</id><snippet>%s</snippet></ROW><ROW><id>8472437</id><snippet>+</snippet></ROW><ROW><id>8472531</id><snippet>import re
def matchany(subject):
    match = re.match(
        r"""
        (?=.*\(([^()]*)\))   # Find match between () --&gt; group 1
        (?=.*\{([^{}]*)\})   # Find match between {} --&gt; group 2
        (?=.*!([^!]*)!)      # Find match between !! --&gt; group 3""", 
        subject, re.VERBOSE)
    return match.groups() if match else None
</snippet></ROW><ROW><id>8472531</id><snippet>&gt;&gt;&gt; matchany("STRING[(val1)-{val2}-!val3!]")
('val1', 'val2', 'val3')
&gt;&gt;&gt; matchany("STRING[!val3!-(val1)-{val2}]")
('val1', 'val2', 'val3')
&gt;&gt;&gt; matchany("STRING[(val1)-{val2}-!val3]")
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8472579</id><snippet>popen</snippet></ROW><ROW><id>8472579</id><snippet>join</snippet></ROW><ROW><id>8472579</id><snippet>is_alive()</snippet></ROW><ROW><id>8472855</id><snippet>&gt;&gt;&gt; # create a NumPy array for use as our data set
&gt;&gt;&gt; import numpy as NP
&gt;&gt;&gt; D = NP.random.randint(0, 10, 40).reshape(8, 5)

&gt;&gt;&gt; # create some generic row and column names to pass to the constructor
&gt;&gt;&gt; row_ids = [ "row{0}".format(c) for c in range(D1.shape[0]) ]
&gt;&gt;&gt; rows = 'rows_id', row_ids

&gt;&gt;&gt; variables = [ "col{0}".format(c) for c in range(D1.shape[1]) ]
&gt;&gt;&gt; cols = 'variable', variables
</snippet></ROW><ROW><id>8472855</id><snippet>&gt;&gt;&gt; from datarray.datarray import DataArray as DA
&gt;&gt;&gt; D1 = DA(D, [rows, cols])

&gt;&gt;&gt; D1.axes
      (Axis(name='rows', index=0, labels=['row0', 'row1', 'row2', 'row3', 
           'row4', 'row5', 'row6', 'row7']), Axis(name='cols', index=1, 
           labels=['col0', 'col1', 'col2', 'col3', 'col4']))

&gt;&gt;&gt; # now you can use R-like syntax to reference a NumPy data array by column:
&gt;&gt;&gt; D1[:,'col1']
      DataArray([8, 5, 0, 7, 8, 9, 9, 4])
      ('rows',)
</snippet></ROW><ROW><id>8473675</id><snippet>from django.utils.decorators import method_decorator

class MyHandler(BaseHandler):
    @method_decorator(permission_required(lambda u: u.is_staff or u.is_superuser))
    def read(self, request, foo, bar):
        # do something
</snippet></ROW><ROW><id>8473890</id><snippet>ps auxww | awk ' /celeryd/ {print $2}' | xargs kill -9
</snippet></ROW><ROW><id>8473890</id><snippet>--pidfile</snippet></ROW><ROW><id>8473924</id><snippet>pattern = re.compile(r"^/(?:\\.|[^/\\])*/")
</snippet></ROW><ROW><id>8473924</id><snippet>^       # Start of string
/       # Match /
(?:     # Match either...
 \\.    # an escaped character
|       # or
 [^/\\] # any character except slash/backslash
)*      # any number of times.
/       # Match /
</snippet></ROW><ROW><id>8473924</id><snippet>pattern = re.compile(r"^(?:\\.|[^/\\])*/((?:\\.|[^/\\])*)/")
</snippet></ROW><ROW><id>8473924</id><snippet>&gt;&gt;&gt; pattern.match("foo /bar/ baz").group(1)
'bar'
&gt;&gt;&gt; pattern.match("foo /bar\/bam/ baz").group(1)
'bar\\/bam'
&gt;&gt;&gt; pattern.match("foo /bar/bam/ baz").group(1)
'bar'
&gt;&gt;&gt; pattern.match("foo\/oof /bar\/bam/ baz").group(1)
'bar\\/bam'
</snippet></ROW><ROW><id>8474500</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>8474500</id><snippet>print_text.py</snippet></ROW><ROW><id>8474500</id><snippet>python myfile.py</snippet></ROW><ROW><id>8474500</id><snippet>echothis</snippet></ROW><ROW><id>8474500</id><snippet>print_text.echothis</snippet></ROW><ROW><id>8474500</id><snippet>echothis</snippet></ROW><ROW><id>8474500</id><snippet>from print_text import echothis</snippet></ROW><ROW><id>8474692</id><snippet>datetime.datetime.combine(datetime.date(2011, 01, 01), datetime.time(10, 23))
</snippet></ROW><ROW><id>8474692</id><snippet>datetime.datetime(2011, 1, 1, 10, 23)
</snippet></ROW><ROW><id>8474741</id><snippet>fields = [car, club]
for f in fields:
    z = getattr(profile, f)
    print list(z.all())
</snippet></ROW><ROW><id>8475016</id><snippet>entry.id</snippet></ROW><ROW><id>8475016</id><snippet>atom.Id</snippet></ROW><ROW><id>8475016</id><snippet>ToString</snippet></ROW><ROW><id>8475016</id><snippet>text</snippet></ROW><ROW><id>8475016</id><snippet>print entry.id.text
</snippet></ROW><ROW><id>8475056</id><snippet>Item.objects.filter(
    sale__sale_date=date.today()
).annotate(
    count = Count('sale')
)
</snippet></ROW><ROW><id>8475367</id><snippet>communicate</snippet></ROW><ROW><id>8475367</id><snippet>from subprocess import Popen, PIPE, STDOUT
p = Popen(['myapp'], stdout=PIPE, stdin=PIPE, stderr=PIPE)
stdout_data = p.communicate(input='data_to_write')[0]
</snippet></ROW><ROW><id>8475397</id><snippet>input.dat</snippet></ROW><ROW><id>8475397</id><snippet>result-column-&lt;number&gt;.dat</snippet></ROW><ROW><id>8475397</id><snippet>import re
import sys

# I will write each table to different results-file.
# dictionary to map columns (numbers) to opened file objects:
resultfiles = {}


def get_result_file(column):
    # helper to easily access results file.
    if column not in resultfiles:
        resultfiles[column] = open('result-column-%d.dat' % column, 'w')
    return resultfiles[column]


# iterate over data:
for line in open('input.dat'):
    try:
        # str.split(separator, maxsplit)
        # with `maxsplit`=2 it is more fail-proof:
        no, score, seq = line.split(None, 2)

        # from your example I guess that white-spaces in sequence are meaningless,
        # however in your example one sequence contains white-space, so I remove it:
        seq = re.sub('\s+', '', seq)

        # data validation will help to spot problems early:
        assert int(no), no          
        assert float(score), score
        assert len(seq) == 65, seq

    except Exception, e:
        # print the error and continue to process data:
        print &gt;&gt; sys.stderr, 'Error %s in line: %s.' % (e, line)
        continue  # jump to next iteration of for loop.

    # int(), float() will rise ValueError if no or score aren't numbers
    # assert &lt;condition&gt; will rise AssertionError if condition is False.

    # iterate over each character in amino sequance:
    for column, char in enumerate(seq, 1):
        f = get_result_file(column)
        f.write('%s    %s    %s\n' % (no, score, char))


# close all opened result files:
for f in resultfiles.values():
    f.close()
</snippet></ROW><ROW><id>8475801</id><snippet>+(*(2,1),*(4,3))</snippet></ROW><ROW><id>8475801</id><snippet>(+ (* 2 1) (* 4 3))</snippet></ROW><ROW><id>8475801</id><snippet>scheme</snippet></ROW><ROW><id>8475801</id><snippet>$ echo '+(*(2,1),*(4,3))' | sed 's/\(.\)(/(\1 /g; s/,/ /g' | scheme | sed -n '/;Value: /s///p'
</snippet></ROW><ROW><id>8475801</id><snippet>python</snippet></ROW><ROW><id>8475801</id><snippet>pyparsing</snippet></ROW><ROW><id>8475816</id><snippet>f.flush()
</snippet></ROW><ROW><id>8475998</id><snippet>if self.color_array is None:
     self.color_array = numpy.empty((len(activity), 4))
diff_activity = (activity - self.min) / abs_diff
self.color_array[:, :3] = (start_colors + 
                           diff_activity[:, numpy.newaxis] + 
                           end_colors)
self.color_array[:, 3] = 1
</snippet></ROW><ROW><id>8475998</id><snippet>color_array</snippet></ROW><ROW><id>8475998</id><snippet>self.min</snippet></ROW><ROW><id>8475998</id><snippet>abs_diff</snippet></ROW><ROW><id>8475998</id><snippet>activity.shape == (len(vertices) // 3,)
start_colors.shape == (3,)
end_colors.shape == (3,)
</snippet></ROW><ROW><id>8475998</id><snippet>vertices</snippet></ROW><ROW><id>8476078</id><snippet>parser.parse_args(argv)
</snippet></ROW><ROW><id>8476108</id><snippet>ft2font.pyd</snippet></ROW><ROW><id>8476108</id><snippet>libfreetype-6.dll</snippet></ROW><ROW><id>8476108</id><snippet>bin\libfreetype-6.dll</snippet></ROW><ROW><id>8476108</id><snippet>system32</snippet></ROW><ROW><id>8476263</id><snippet>bool QAbstractSocket::flush ()</snippet></ROW><ROW><id>8476586</id><snippet>print</snippet></ROW><ROW><id>8476586</id><snippet>write()</snippet></ROW><ROW><id>8476586</id><snippet>write()</snippet></ROW><ROW><id>8476586</id><snippet>\n</snippet></ROW><ROW><id>8476586</id><snippet>text</snippet></ROW><ROW><id>8476900</id><snippet>W</snippet></ROW><ROW><id>8476900</id><snippet>for row in W:
</snippet></ROW><ROW><id>8476900</id><snippet>enumerate</snippet></ROW><ROW><id>8476900</id><snippet>for i, row in enumerate(W):
</snippet></ROW><ROW><id>8476900</id><snippet>for i in xrange(len(W.shape[0])):
</snippet></ROW><ROW><id>8476952</id><snippet>def strip_http_headers(http_reply):
    p = http_reply.find('\r\n\r\n')
    if p &gt;= 0:
        return http_reply[p+4:]
    return http_reply
</snippet></ROW><ROW><id>8477459</id><snippet>assert</snippet></ROW><ROW><id>8477459</id><snippet>print</snippet></ROW><ROW><id>8477459</id><snippet>assert all(x[0] == x[1] for x in  zip( [run_function(i) for i in values ], expected_values))
</snippet></ROW><ROW><id>8477459</id><snippet>assert all(run_function(i) == j for i,j in zip(inputs, expected_values))
</snippet></ROW><ROW><id>8477716</id><snippet>*.dll</snippet></ROW><ROW><id>8477716</id><snippet>DllGetClassObject</snippet></ROW><ROW><id>8477716</id><snippet>CoCreateInstance</snippet></ROW><ROW><id>8477716</id><snippet>CoCreateInstanceEx</snippet></ROW><ROW><id>8477716</id><snippet>DllGetClassObject</snippet></ROW><ROW><id>8477716</id><snippet>DllCanUnloadNow</snippet></ROW><ROW><id>8477716</id><snippet>DllGetClassObject</snippet></ROW><ROW><id>8477716</id><snippet>DllRegisterServer</snippet></ROW><ROW><id>8477716</id><snippet>DllUnregisterServer</snippet></ROW><ROW><id>8478034</id><snippet>%</snippet></ROW><ROW><id>8478034</id><snippet>In [11]: x, y, z = -11.700, 8.827, 9.247

In [12]: '%14.3f %12.3f %12.3f' % (x, y, z)
Out[12]: '       -11.700        8.827        9.247'
</snippet></ROW><ROW><id>8478258</id><snippet>initNewWindow()</snippet></ROW><ROW><id>8478258</id><snippet>window</snippet></ROW><ROW><id>8478258</id><snippet>WA_DeleteOnClose</snippet></ROW><ROW><id>8478258</id><snippet>Qt::WidgetAttribute</snippet></ROW><ROW><id>8478439</id><snippet>PyArray_Descr</snippet></ROW><ROW><id>8478439</id><snippet>PyArray_TypeObject</snippet></ROW><ROW><id>8478586</id><snippet>sorted(Thing.objects.all(), key=lambda t: t.name)
</snippet></ROW><ROW><id>8478623</id><snippet>str.split()</snippet></ROW><ROW><id>8478623</id><snippet>word_list = [word for line in sentence for word in line.split()]
</snippet></ROW><ROW><id>8478651</id><snippet>lineEdit</snippet></ROW><ROW><id>8478651</id><snippet>self.myDropDown = QComboBox()
self.myDropDown.setEditable(True)
self.myDropDown.lineEdit().setMaxLength(45)
</snippet></ROW><ROW><id>8478988</id><snippet>lambda x,y: y &gt; x</snippet></ROW><ROW><id>8479108</id><snippet>word_list = ['a', 'b', 'c', 'b', 'c', 'a', 'e']
dict = {'a': [], 'b': [], 'c': [], 'e': []}
for i in range(len(word_list)):
    if word_list[i] not in dict:
        dict[word_list[i]] = [i]
    else:
        dict[word_list[i]].append(i)
</snippet></ROW><ROW><id>8479108</id><snippet>{'a': [0, 5], 'c': [2, 4], 'b': [1, 3], 'e': [6]}
</snippet></ROW><ROW><id>8479175</id><snippet>print 'Hello, World!'
</snippet></ROW><ROW><id>8479175</id><snippet>if os.name == 'java': # Jython
if sys.platform == 'cli': # IronPython
</snippet></ROW><ROW><id>8479330</id><snippet>from autofixture.generators import ChoicesGenerator
states = "waiting|email|post|einv".split('|')
rsg = ChoicesGenerator(values=states)
self.create_test_foo(10, values={'state': rsg})
</snippet></ROW><ROW><id>8479443</id><snippet>def getHigh(pricedata, start=None, end=None):
    start = min(pricedata) if start is None else start
    end = max(pricedata) if end is None else end
</snippet></ROW><ROW><id>8479481</id><snippet>#include &lt;QtCore&gt;
#include &lt;QtGui&gt;
#include "TextEdit.hpp"

TextEdit::TextEdit() : QPlainTextEdit() {
connect(this, SIGNAL(textChanged()), this, SLOT(myTextChanged()));
}

TextEdit::TextEdit(int maxChar) : QPlainTextEdit() {
this-&gt;maxChar = maxChar;
connect(this, SIGNAL(textChanged()), this, SLOT(myTextChanged()));
}

int TextEdit::getMaxChar() {
return maxChar;
}

void TextEdit::setMaxChar(int maxChar) {
this-&gt;maxChar = maxChar;
}

void TextEdit::myTextChanged() {
if (QPlainTextEdit::toPlainText().length()&gt;maxChar) {
QPlainTextEdit::setPlainText(QPlainTextEdit::toPlainText().left(QPlainTextEdit::toPlainText().length()-1));
QPlainTextEdit::moveCursor(QTextCursor::End);
QMessageBox::information(NULL, QString::fromUtf8("Warning"),
QString::fromUtf8("Warning: no more then ") + QString::number(maxChar) + QString::fromUtf8(" characters in this field"),
QString::fromUtf8("Ok"));
}
}
</snippet></ROW><ROW><id>8479566</id><snippet>from django.template import Library
register = Library()

@register.filter
def split_timeuntil(duration):
    return duration.split(",")[0]
</snippet></ROW><ROW><id>8479566</id><snippet>{{rental_till|timeuntil|split_timeuntil}}</snippet></ROW><ROW><id>8479566</id><snippet>timeuntil</snippet></ROW><ROW><id>8479566</id><snippet>date</snippet></ROW><ROW><id>8479566</id><snippet>timeutil</snippet></ROW><ROW><id>8479566</id><snippet>django/template/defaultfilters.py</snippet></ROW><ROW><id>8479566</id><snippet>django/utils/timesince.py</snippet></ROW><ROW><id>8479709</id><snippet>&gt;&gt;&gt; data
['c01', 'a11', 'b12', 'a21', 'b22', 'c23', 'c31', 'b32', 'a33']
&gt;&gt;&gt; data="c01,a11,b12,a21, b22,c23, c31,b32, a33"
&gt;&gt;&gt; data=[x.strip() for x in data.split(",")]
&gt;&gt;&gt; data=sorted(data,key=operator.itemgetter(0))
&gt;&gt;&gt; data=sorted(data,key=operator.itemgetter(1))
&gt;&gt;&gt; data=sorted(data,key=operator.itemgetter(2))
&gt;&gt;&gt; data
['c01', 'a11', 'a21', 'c31', 'b12', 'b22', 'b32', 'c23', 'a33']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8479709</id><snippet>&gt;&gt;&gt; data
['c01', 'a11', 'b12', 'a21', 'b22', 'c23', 'c31', 'b32', 'a33']
&gt;&gt;&gt; [data.sort(key=operator.itemgetter(x)) for x in [0,1,2]]
&gt;&gt;&gt; data
['c01', 'a11', 'a21', 'c31', 'b12', 'b22', 'b32', 'c23', 'a33']
</snippet></ROW><ROW><id>8479800</id><snippet>info()</snippet></ROW><ROW><id>8479800</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; d = urllib.urlopen('http://www.google.com/')
&gt;&gt;&gt; try:
...     if d.info()['content-type'].startswith('text/html'):
...             print 'its html'
...     else:
...             print 'its not html'
... except KeyError:
...     print 'its not html'
... 
its html
</snippet></ROW><ROW><id>8479800</id><snippet>HEAD</snippet></ROW><ROW><id>8479800</id><snippet>urllib</snippet></ROW><ROW><id>8479800</id><snippet>import urllib
import socket
from urllib import unwrap, toBytes, quote, splittype, splithost, splituser, unquote, addinfourl

class MyURLOpener(urllib.FancyURLopener):
    def open_http(self, url, data=None, method=None):
        """Use HTTP protocol."""
        import httplib
        user_passwd = None
        proxy_passwd= None
        if isinstance(url, str):
            host, selector = splithost(url)
            if host:
                user_passwd, host = splituser(host)
                host = unquote(host)
            realhost = host
        else:
            host, selector = url
            # check whether the proxy contains authorization information
            proxy_passwd, host = splituser(host)
            # now we proceed with the url we want to obtain
            urltype, rest = splittype(selector)
            url = rest
            user_passwd = None
            if urltype.lower() != 'http':
                realhost = None
            else:
                realhost, rest = splithost(rest)
                if realhost:
                    user_passwd, realhost = splituser(realhost)
                if user_passwd:
                    selector = "%s://%s%s" % (urltype, realhost, rest)
                if proxy_bypass(realhost):
                    host = realhost

            #print "proxy via http:", host, selector
        if not host: raise IOError, ('http error', 'no host given')

        if proxy_passwd:
            import base64
            proxy_auth = base64.b64encode(proxy_passwd).strip()
        else:
            proxy_auth = None

        if user_passwd:
            import base64
            auth = base64.b64encode(user_passwd).strip()
        else:
            auth = None
        h = httplib.HTTP(host)

        if method is not None:
            h.putrequest(method, selector)
        else:
            h.putrequest('GET', selector)

        if data is not None:
            #h.putrequest('POST', selector)
            h.putheader('Content-Type', 'application/x-www-form-urlencoded')
            h.putheader('Content-Length', '%d' % len(data))

        if proxy_auth: h.putheader('Proxy-Authorization', 'Basic %s' % proxy_auth)
        if auth: h.putheader('Authorization', 'Basic %s' % auth)
        if realhost: h.putheader('Host', realhost)
        for args in self.addheaders: h.putheader(*args)
        h.endheaders(data)
        errcode, errmsg, headers = h.getreply()
        fp = h.getfile()
        if errcode == -1:
            if fp: fp.close()
            # something went wrong with the HTTP status line
            raise IOError, ('http protocol error', 0,
                            'got a bad status line', None)
        # According to RFC 2616, "2xx" code indicates that the client's
        # request was successfully received, understood, and accepted.
        if (200 &lt;= errcode &lt; 300):
            return addinfourl(fp, headers, "http:" + url, errcode)
        else:
            if data is None:
                return self.http_error(url, fp, errcode, errmsg, headers)
            else:
                return self.http_error(url, fp, errcode, errmsg, headers, data)

    def open(self, fullurl, data=None, method=None):
        """Use URLopener().open(file) instead of open(file, 'r')."""
        fullurl = unwrap(toBytes(fullurl))
        # percent encode url, fixing lame server errors for e.g, like space
        # within url paths.
        fullurl = quote(fullurl, safe="%/:=&amp;?~#+!$,;'@()*[]|")
        if self.tempcache and fullurl in self.tempcache:
            filename, headers = self.tempcache[fullurl]
            fp = open(filename, 'rb')
            return addinfourl(fp, headers, fullurl)
        urltype, url = splittype(fullurl)
        if not urltype:
            urltype = 'file'
        if urltype in self.proxies:
            proxy = self.proxies[urltype]
            urltype, proxyhost = splittype(proxy)
            host, selector = splithost(proxyhost)
            url = (host, fullurl) # Signal special case to open_*()
        else:
            proxy = None
        name = 'open_' + urltype
        self.type = urltype
        name = name.replace('-', '_')
        if not hasattr(self, name):
            if proxy:
                return self.open_unknown_proxy(proxy, fullurl, data)
            else:
                return self.open_unknown(fullurl, data)
        try:
            return getattr(self, name)(url, data, method)
        except socket.error, msg:
            raise IOError, ('socket error', msg), sys.exc_info()[2]


opener = MyURLOpener()

# NOTE: including any data no longer implicitly makes the method POST,
#       so you must now specify the method to POST if you include data
# NOTE: this overrides only open_http, and not open_https, but you can
#       use a similar technique, and override open_https as well

d = opener.open('http://www.google.com/', method='HEAD')
</snippet></ROW><ROW><id>8479923</id><snippet>gzip.open(zipfile).read()</snippet></ROW><ROW><id>8479923</id><snippet>with open(tmpfile, "wb") as tmp:
    shutil.copyfileobj(gzip.open(zipfile), tmp)
</snippet></ROW><ROW><id>8480223</id><snippet>data</snippet></ROW><ROW><id>8480223</id><snippet>EditRole</snippet></ROW><ROW><id>8480223</id><snippet>data</snippet></ROW><ROW><id>8480223</id><snippet>EditRole</snippet></ROW><ROW><id>8480223</id><snippet>DisplayRole</snippet></ROW><ROW><id>8480223</id><snippet>def data(self, index, role):
    if role == Qt.DisplayRole or role == Qt.EditRole:
        try:
            row = index.row()
            col = index.column()
            name = self._struct[col]['name']
            return self._data[row][name]
        except:
            pass
    elif role == Qt.CheckStateRole:
        return None

    return None
</snippet></ROW><ROW><id>8480476</id><snippet>"text literal"</snippet></ROW><ROW><id>8480476</id><snippet>b"byte-string literal"</snippet></ROW><ROW><id>8480476</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; c_char_p('hello world')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: string or integer address expected instead of str instance
&gt;&gt;&gt; c_char_p(b'hello world')
c_char_p(b'hello world')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8480498</id><snippet>timedelta</snippet></ROW><ROW><id>8480498</id><snippet>import datetime
current_time = datetime.datetime(2011,12,12,12,0,0) # High Noon!
end_time = datetime.datetime(2011,12,25,0,0,0)      # Santa?
while end_time-current_time &gt; datetime.timedelta(0):
    do_stuff()
    current_time = current_time - datetime.timedelta(hours=1)
</snippet></ROW><ROW><id>8480578</id><snippet>class MyHandler(BaseHTTPRequestHandler):
    def do_OPTIONS(self):           
        self.send_response(200, "ok")       
        self.send_header('Access-Control-Allow-Origin', '*')                
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header("Access-Control-Allow-Headers", "X-Requested-With")        

    def do_GET(self):           
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Content-type',    'text/html')                                    
        self.end_headers()              
        self.wfile.write("&lt;html&gt;&lt;body&gt;Hello world!&lt;/body&gt;&lt;/html&gt;")
        self.connection.shutdown(1) 
</snippet></ROW><ROW><id>8481369</id><snippet>eval</snippet></ROW><ROW><id>8481369</id><snippet>def calculate(value, function):
    x = value
    return eval(function)

print calculate(2, "x**2 + 2*x + 1")
print calculate(2, "x**3 - x**2 + 1")
</snippet></ROW><ROW><id>8481369</id><snippet>9
5
</snippet></ROW><ROW><id>8481369</id><snippet>builtin</snippet></ROW><ROW><id>8481590</id><snippet>my_list = [(1, 2), (4, 7), (6, 0)]
result = [x for t in my_list for x in t]
</snippet></ROW><ROW><id>8481590</id><snippet>result = list(itertools.chain.from_iterable(my_list))
</snippet></ROW><ROW><id>8481833</id><snippet>import optparse

parser = optparse.OptionParser()
parser.add_option("-a", action="store", type="string", dest="a")

(opt, arg) = parser.parse_args()
print "Opt:", opt
print "Arg:", arg
</snippet></ROW><ROW><id>8481833</id><snippet>python test.py -a SOMETHING 1, 2, 3</snippet></ROW><ROW><id>8481833</id><snippet>Opt: {'a': 'SOMETHING'}
Arg: ['1', '2', '3']
</snippet></ROW><ROW><id>8481833</id><snippet>o = list()
for k in vars(opt):
    o.append(k)
    o.append(getattr(opt, k))
print "List Opt:", o
</snippet></ROW><ROW><id>8481833</id><snippet>List Opt: ['a', 'SOMETHING']
</snippet></ROW><ROW><id>8482033</id><snippet>check_call</snippet></ROW><ROW><id>8482033</id><snippet>subprocess</snippet></ROW><ROW><id>8482033</id><snippet>from subprocess import STDOUT, check_call
import os
check_call(['apt-get', 'install', '-y', 'filetoinstall'],
     stdout=open(os.devnull,'wb'), stderr=STDOUT) 
</snippet></ROW><ROW><id>8482033</id><snippet>stdout</snippet></ROW><ROW><id>8482033</id><snippet>/dev/null</snippet></ROW><ROW><id>8482033</id><snippet>os.devnull</snippet></ROW><ROW><id>8482033</id><snippet>os.devnull</snippet></ROW><ROW><id>8482033</id><snippet>/dev/null</snippet></ROW><ROW><id>8482033</id><snippet>nul</snippet></ROW><ROW><id>8482033</id><snippet>apt-get</snippet></ROW><ROW><id>8482073</id><snippet>author_label</snippet></ROW><ROW><id>8482073</id><snippet>qle</snippet></ROW><ROW><id>8482073</id><snippet>initUI</snippet></ROW><ROW><id>8482073</id><snippet>self.author_label</snippet></ROW><ROW><id>8482073</id><snippet>self.qle</snippet></ROW><ROW><id>8482073</id><snippet>onChanged</snippet></ROW><ROW><id>8482073</id><snippet>getText</snippet></ROW><ROW><id>8482073</id><snippet>self.qle.text()</snippet></ROW><ROW><id>8482073</id><snippet>text</snippet></ROW><ROW><id>8482073</id><snippet>onChanged</snippet></ROW><ROW><id>8482073</id><snippet>textChanged</snippet></ROW><ROW><id>8482073</id><snippet>sendtxt2_qle</snippet></ROW><ROW><id>8482073</id><snippet>qle</snippet></ROW><ROW><id>8482073</id><snippet>author_label</snippet></ROW><ROW><id>8482073</id><snippet>self.grid</snippet></ROW><ROW><id>8482361</id><snippet>url(r'^fieldguide/(?P&lt;IDmatch&gt;0[eE]([0-9A-Fa-f]{0,14}))/$', 'treeView', name='index'),
url(r'^fieldguide/.*$', 'treeDirect', name='index-redirect'),
</snippet></ROW><ROW><id>8482667</id><snippet>text</snippet></ROW><ROW><id>8482667</id><snippet>text(x, y, s, fontsize=12)
</snippet></ROW><ROW><id>8482667</id><snippet>text</snippet></ROW><ROW><id>8482667</id><snippet>text(0.5, 0.5,'matplotlib',
     horizontalalignment='center',
     verticalalignment='center',
     transform = ax.transAxes)
</snippet></ROW><ROW><id>8482667</id><snippet>ylim((ymin,ymax))</snippet></ROW><ROW><id>8482667</id><snippet>In [18]: f = figure()
In [19]: ax = f.add_subplot(111)
In [20]: scatter([3,5,2,6,8],[5,3,2,1,5])
Out[20]: &lt;matplotlib.collections.CircleCollection object at 0x0000000007439A90&gt;
In [21]: text(0.1, 0.9,'matplotlib', ha='center', va='center', transform=ax.transAxes)
Out[21]: &lt;matplotlib.text.Text object at 0x0000000007415B38&gt;
In [22]:
</snippet></ROW><ROW><id>8482908</id><snippet>images/redeye.jpg</snippet></ROW><ROW><id>8482908</id><snippet>Image("images/redeye.jpg")</snippet></ROW><ROW><id>8482908</id><snippet>my_image = Image("images/redeye.jpg")
</snippet></ROW><ROW><id>8482908</id><snippet>Image()</snippet></ROW><ROW><id>8482908</id><snippet>NameError</snippet></ROW><ROW><id>8482908</id><snippet>images</snippet></ROW><ROW><id>8482917</id><snippet>Step</snippet></ROW><ROW><id>8482917</id><snippet>HealingProcessor.on(impure_data) {
  replace_bad_value :field =&gt; :some_prop, :bad_value =&gt; 'bad value', :good_value =&gt; 'good_default_value'
  # etc
}
</snippet></ROW><ROW><id>8483072</id><snippet>stats_list</snippet></ROW><ROW><id>8483072</id><snippet>stats_list = [u'Statistik över sånger\n', u'Antal\tSång']
</snippet></ROW><ROW><id>8483072</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>8483072</id><snippet>return '\n'.join(stats_list)
</snippet></ROW><ROW><id>8483072</id><snippet>stats_list</snippet></ROW><ROW><id>8483072</id><snippet>print type(line)</snippet></ROW><ROW><id>8483072</id><snippet>line = '%s\t%s' % row
</snippet></ROW><ROW><id>8483072</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>8483072</id><snippet>stats_list.append(line.decode('utf-8'))
</snippet></ROW><ROW><id>8483072</id><snippet>&lt;type 'unicode'&gt;</snippet></ROW><ROW><id>8483072</id><snippet>song_stats</snippet></ROW><ROW><id>8483072</id><snippet>exts_stats</snippet></ROW><ROW><id>8483072</id><snippet>wisher_stats</snippet></ROW><ROW><id>8483438</id><snippet>Queue</snippet></ROW><ROW><id>8483438</id><snippet>Queue</snippet></ROW><ROW><id>8483549</id><snippet>SITE_URLS = [
    webapp2.Route(r'/', handler.TestHome),
    webapp2.Route(r'/test/&lt;:\w+&gt;', handler.TestPage)
]
</snippet></ROW><ROW><id>8483549</id><snippet> webapp2.Route(r'/test/&lt;your_route_name_here:\w+&gt;', handler.TestPage)
</snippet></ROW><ROW><id>8483549</id><snippet>webapp2.Route(r'/test/&lt;category:\w+&gt;/&lt;user_id&gt;/&lt;day:\d+&gt;', handler.TestPage)
</snippet></ROW><ROW><id>8483549</id><snippet>class TestPage(webapp2.RequestHandler):
    def get(self, category, user_id, day):
        ...
</snippet></ROW><ROW><id>8483650</id><snippet>function_to_test</snippet></ROW><ROW><id>8483650</id><snippet>import unittest
import cgi

from mock import patch

def function_to_test():
    form = cgi.FieldStorage()
    if "name" not in form or "addr" not in form:
        return "&lt;H1&gt;Error&lt;/H1&gt;\nPlease fill in the name and address.\n"
    text = "&lt;p&gt;name: {0}\n&lt;p&gt;addr: {1}\n"
    return text.format(form["name"].value, form["addr"].value)

@patch('cgi.FieldStorage')
class TestClass(unittest.TestCase):
    class TestField(object):
        def __init__(self, value):
            self.value = value

    FIELDS = { "name" : TestField("Bill"), "addr" : TestField("1 Two Street") }

    def test_cgi(self, MockClass):
        instance = MockClass.return_value
        instance.__getitem__ = lambda s, key: TestClass.FIELDS[key]
        instance.__contains__ = lambda s, key: key in TestClass.FIELDS
        text = function_to_test()
        self.assertEqual(text, "&lt;p&gt;name: Bill\n&lt;p&gt;addr: 1 Two Street\n")

    def test_err(self, MockClass):
        instance = MockClass.return_value
        instance.__contains__ = lambda self, key: False
        text = function_to_test()
        self.assertEqual(text,
            "&lt;H1&gt;Error&lt;/H1&gt;\nPlease fill in the name and address.\n")
</snippet></ROW><ROW><id>8483650</id><snippet>..
----------------------------------------------------------------------
Ran 2 tests in 0.003s

OK
</snippet></ROW><ROW><id>8483678</id><snippet>from telnetlib import IAC, NOP

... 

telnet_object.sock.sendall(IAC + NOP)
</snippet></ROW><ROW><id>8483796</id><snippet>def logo(request):
return HttpResponse(
    OPENID_LOGO_BASE_64.decode('base64'), mimetype='image/gif'
)
# Logo from http://openid.net/login-bg.gif
# Embedded here for convenience; you should serve this as a static file
OPENID_LOGO_BASE_64 = """
R0lGODlhEAAQAMQAAO3t7eHh4srKyvz8/P5pDP9rENLS0v/28P/17tXV1dHEvPDw8M3Nzfn5+d3d
3f5jA97Syvnv6MfLzcfHx/1mCPx4Kc/S1Pf189C+tP+xgv/k1N3OxfHy9NLV1/39/f///yH5BAAA
AAAALAAAAAAQABAAAAVq4CeOZGme6KhlSDoexdO6H0IUR+otwUYRkMDCUwIYJhLFTyGZJACAwQcg
EAQ4kVuEE2AIGAOPQQAQwXCfS8KQGAwMjIYIUSi03B7iJ+AcnmclHg4TAh0QDzIpCw4WGBUZeikD
Fzk0lpcjIQA7
"""
</snippet></ROW><ROW><id>8484001</id><snippet>d = defaultdict(list)
for z in range(lots_and_lots):
  d['operation one'].append(5.67)
  ...
  ...
  d['operation two'].append(4.56)
for k,v in d.items():
  print k, 'Called', len(v), 'times, total =', sum(v)
</snippet></ROW><ROW><id>8484001</id><snippet>class Inc(object):
    def __init__(self):
        self.i = 0
        self.t = 0.0
    def __iadd__(self, f):
        self.i += 1
        self.t += f
        return self
</snippet></ROW><ROW><id>8484001</id><snippet>d = defaultdict(Inc)
for z in range(lots_and_lots):
  d['operation one'] += 5.67
  ...
  ...
  d['operation two'] += 4.56
for k,v in d.items():
  print k, 'Called', v.i, 'times, total =', v.t
</snippet></ROW><ROW><id>8484194</id><snippet>arguments = {}
if location is not None:
    arguments['Location'] = location
else:
    arguments['Location__isnull'] = False

if gender is not None:
    arguments['Gender'] = gender
else:
    arguments['Gender__isnull'] = False

query_results = UserProfile.objects.filter(**arguments)
</snippet></ROW><ROW><id>8484194</id><snippet>.filter()</snippet></ROW><ROW><id>8484194</id><snippet>.all()</snippet></ROW><ROW><id>8484194</id><snippet>filter(**arguments)</snippet></ROW><ROW><id>8484194</id><snippet>**arguments</snippet></ROW><ROW><id>8484194</id><snippet>**</snippet></ROW><ROW><id>8484265</id><snippet>HTMLParser</snippet></ROW><ROW><id>8484265</id><snippet>class MyParser(HTMLParser):
    def __init__(self):
        self.finished = False
        self.in_table = False
        self.in_row = False
        self.in_cell = False
        self.current_row = []
        self.current_cell = ''
        HTMLParser.__init__(self)

    def handle_starttag(self, tag, attrs):
        attrs = dict(attrs)
        if not self.in_table:
            if tag == 'table':
                if ('id' in attrs) and (attrs['id'] == 'dgResult'):
                    self.in_table = True
        else:
            if tag == 'tr':
                self.in_row = True
            elif tag == 'td':
                self.in_cell = True
            elif (tag == 'a') and (len(self.current_row) == 7):
                url = attrs['href']
                self.current_cell = url


    def handle_endtag(self, tag):
        if tag == 'tr':
            if self.in_table:
                if self.in_row:
                    self.in_row = False
                    print self.current_row
                    self.current_row = []
        elif tag == 'td':
            if self.in_table:
                if self.in_cell:
                    self.in_cell = False
                    self.current_row.append(self.current_cell.strip())
                    self.current_cell = ''

        elif (tag == 'table') and self.in_table:
            self.finished = True

    def handle_data(self, data):
        if not len(self.current_row) == 7:
            if self.in_cell:
                self.current_cell += data
</snippet></ROW><ROW><id>8484265</id><snippet>parser = MyParser()
for line in myfile:
    parser.feed(line)
</snippet></ROW><ROW><id>8484280</id><snippet>view_config</snippet></ROW><ROW><id>8484280</id><snippet>pyramid.renderers.render</snippet></ROW><ROW><id>8484280</id><snippet>render_to_response</snippet></ROW><ROW><id>8484280</id><snippet>render</snippet></ROW><ROW><id>8484280</id><snippet>Response</snippet></ROW><ROW><id>8484280</id><snippet>def fork(request):
    return myfunc1(request)

def myfunc1(request):
    return render_to_response('templates/derived/template2', {'msg': 'msg1'}, request)
</snippet></ROW><ROW><id>8484280</id><snippet>myfunc1</snippet></ROW><ROW><id>8484280</id><snippet>Response</snippet></ROW><ROW><id>8484280</id><snippet>fork</snippet></ROW><ROW><id>8484280</id><snippet>def fork(request):
    resp = request.response
    resp.body = myfunc1(request)
    return resp

def myfunc1(request):
    return render('templates/derived/template2', {'msg': 'msg1'}, request)
</snippet></ROW><ROW><id>8484294</id><snippet>SELECT setval('heroes_id_seq', MAX(id)) FROM heroes;
</snippet></ROW><ROW><id>8484835</id><snippet>[a-zA-Z]+\([^\)]*\)(\.[^\)]*\))?
</snippet></ROW><ROW><id>8484841</id><snippet>max_length</snippet></ROW><ROW><id>8484841</id><snippet>python manage.py dbshell</snippet></ROW><ROW><id>8484841</id><snippet>ALTER TABLE my_table ALTER COLUMN my_column TYPE VARCHAR(200)
</snippet></ROW><ROW><id>8484948</id><snippet>bins</snippet></ROW><ROW><id>8484948</id><snippet>data</snippet></ROW><ROW><id>8484948</id><snippet>data&gt;bin</snippet></ROW><ROW><id>8484948</id><snippet>data</snippet></ROW><ROW><id>8484948</id><snippet>datas</snippet></ROW><ROW><id>8484948</id><snippet>bin</snippet></ROW><ROW><id>8484948</id><snippet>bins</snippet></ROW><ROW><id>8484948</id><snippet>import numpy as np
# turn data into numpy array for easier manipulation
data2 = np.array(data)
n     = len(data2)

# calculate fractions for each bin in bins
# astype('float') because otherwise you end up doing integer arithmetic
fracs = [ sum(data2&gt;=bin).astype('float')/n for bin in bins ]
</snippet></ROW><ROW><id>8484948</id><snippet>bins</snippet></ROW><ROW><id>8484948</id><snippet>fracs</snippet></ROW><ROW><id>8484948</id><snippet>import matplotlib.pyplot as plt
plt.bar(bins,fracs)
plt.show()
</snippet></ROW><ROW><id>8485005</id><snippet>\\$.*?(?&lt;!\\\\)\\$
</snippet></ROW><ROW><id>8485005</id><snippet>print re.findall("\\$.*?(?&lt;!\\\\)\\$", "$x= \$12$ and $x=12$")
</snippet></ROW><ROW><id>8485005</id><snippet>$x= \$12$</snippet></ROW><ROW><id>8485005</id><snippet>$x=12$</snippet></ROW><ROW><id>8485332</id><snippet>scatter</snippet></ROW><ROW><id>8485332</id><snippet>'.'</snippet></ROW><ROW><id>8485332</id><snippet>','</snippet></ROW><ROW><id>8485332</id><snippet>ValueError</snippet></ROW><ROW><id>8485332</id><snippet>scatter()</snippet></ROW><ROW><id>8485332</id><snippet>plot()</snippet></ROW><ROW><id>8485332</id><snippet>scatter</snippet></ROW><ROW><id>8485332</id><snippet>scatter</snippet></ROW><ROW><id>8485332</id><snippet>s</snippet></ROW><ROW><id>8485544</id><snippet>&gt; bin2hex(iconv('ASCII', 'UTF-32', 'a'));
0000feff00000061
</snippet></ROW><ROW><id>8485544</id><snippet>0000feff</snippet></ROW><ROW><id>8485544</id><snippet>00000061</snippet></ROW><ROW><id>8485544</id><snippet>UTF-32</snippet></ROW><ROW><id>8485544</id><snippet>UTF-32-BE</snippet></ROW><ROW><id>8485544</id><snippet>UTF-32-LE</snippet></ROW><ROW><id>8485554</id><snippet>dates_prices</snippet></ROW><ROW><id>8485554</id><snippet>item</snippet></ROW><ROW><id>8485554</id><snippet>filter</snippet></ROW><ROW><id>8485554</id><snippet>filled.append(item)</snippet></ROW><ROW><id>8485554</id><snippet>filled.append(item[:])</snippet></ROW><ROW><id>8485554</id><snippet>item[0] += dt.timedelta(1)</snippet></ROW><ROW><id>8485554</id><snippet>[:]</snippet></ROW><ROW><id>8485554</id><snippet>iter_data = iter(dates_prices[:])</snippet></ROW><ROW><id>8485554</id><snippet>dates_prices</snippet></ROW><ROW><id>8485554</id><snippet>item[0] += dt.timedelta(1)</snippet></ROW><ROW><id>8485554</id><snippet>if item in dates_prices</snippet></ROW><ROW><id>8485554</id><snippet>True</snippet></ROW><ROW><id>8485554</id><snippet>if item in dates_prices</snippet></ROW><ROW><id>8485554</id><snippet>False</snippet></ROW><ROW><id>8485554</id><snippet>[dt.datetime(2008, 6, 6, 0, 0), 48.54] != datetime.datetime(2008, 6, 6, 0, 0), 47.99]</snippet></ROW><ROW><id>8485554</id><snippet>import datetime as dt
import copy

dates_prices = [[dt.datetime(2008, 6, 3, 0, 0), 48.54],
    [dt.datetime(2008, 6, 6, 0, 0), 47.99]]

def fillDates(dates_prices):
    filled = []
    iter_data = iter(copy.deepcopy(dates_prices))  #to copy the datetime objects
    item = iter_data.next()
    filled.append(item[:])
    dates_idx = 1
    while dates_idx &lt; len(dates_prices):
        item[0] += dt.timedelta(1)
        if item[0] == dates_prices[dates_idx][0]:
            item = iter_data.next()
            dates_idx += 1
        filled.append(item[:])
    return filled

a = fillDates(dates_prices)
print a
</snippet></ROW><ROW><id>8485554</id><snippet>dates_prices</snippet></ROW><ROW><id>8485554</id><snippet>new_item = [item[0] + dt.timedelta(1), item[1]]
</snippet></ROW><ROW><id>8485568</id><snippet>person = db.ReferenceProperty(Person, collection_name="cars")
</snippet></ROW><ROW><id>8485869</id><snippet>isinstance</snippet></ROW><ROW><id>8485869</id><snippet>&gt;&gt;&gt; isinstance(1, int)
True
&gt;&gt;&gt; isinstance(1, float)
False
&gt;&gt;&gt; isinstance(1.1, float)
True
&gt;&gt;&gt; isinstance(1.1, int)
False
</snippet></ROW><ROW><id>8485869</id><snippet>def __init__(self, value):
    if isinstance(value, int):
        # int constructor
    elif isinstance(value, float):
        # float constructor
    else:
        raise TypeError, 'Unexpected type'
</snippet></ROW><ROW><id>8486026</id><snippet>paint()</snippet></ROW><ROW><id>8486167</id><snippet>def import_(ui, repo, patch1=None, *patches, **opts):
</snippet></ROW><ROW><id>8486167</id><snippet>u1,repo and patch1</snippet></ROW><ROW><id>8486167</id><snippet>non-keyword arg after keyword arg</snippet></ROW><ROW><id>8486167</id><snippet> import_(1,2,3,test="test")
 import_(1,2,3,4,test="test")
 import_(1,2,3,4,5)
 import_(1,2,patch1=3,test="test")
</snippet></ROW><ROW><id>8486167</id><snippet>import_(1,2,3,patch1=4,5)
</snippet></ROW><ROW><id>8486167</id><snippet>SyntaxError: non-keyword arg after keyword arg</snippet></ROW><ROW><id>8486167</id><snippet>import_(1,2,3,test="test")</snippet></ROW><ROW><id>8486167</id><snippet>u1 = 1, repo = 2, patch1 = 3, patches = () and opts={"test":"test"}
</snippet></ROW><ROW><id>8486167</id><snippet>import_(1,2,3,patch1=4,test="test")</snippet></ROW><ROW><id>8486167</id><snippet>u1 = 1, repo = 2, patch1 = 3 , patches = (4) and opts={"test":"test"}
</snippet></ROW><ROW><id>8486167</id><snippet>import_(1,2,3,4,5)</snippet></ROW><ROW><id>8486167</id><snippet>u1 = 1, repo = 2, patch1 = 3 , patches=(4,5), and opts={}
</snippet></ROW><ROW><id>8486167</id><snippet>import_(1,2,patch1=3,test="test")</snippet></ROW><ROW><id>8486167</id><snippet>u1 = 1, repo = 2, patch1 = 3 , patches=(), and opts={"test":"test"}
you can use patch1 as a keywords argument but doing so you cannot wrap any variable positional arguments within patches
</snippet></ROW><ROW><id>8486991</id><snippet>bit-length</snippet></ROW><ROW><id>8486991</id><snippet>&gt;&gt;&gt; def Is32or64(x):
    return 32 if x.bit_length() &lt; 32 else 64

&gt;&gt;&gt; Is32or64(2**30)
32
&gt;&gt;&gt; Is32or64(2**40)
64 
</snippet></ROW><ROW><id>8487730</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8487730</id><snippet>import mymodule</snippet></ROW><ROW><id>8487730</id><snippet>mymodule</snippet></ROW><ROW><id>8488430</id><snippet>def editDict(d, l, i):
    d[1] = 10
    d[2] = 20
    d[3] = 30
    l[i] = d

mlist = m.list([m.dict() for i in xrange(pnum)])
for i in xrange(pnum):
    p = Process(target=editDict,args=(mlist[i], mlist, i,))
    p.start()
</snippet></ROW><ROW><id>8488430</id><snippet>mlist</snippet></ROW><ROW><id>8488430</id><snippet>dict</snippet></ROW><ROW><id>8488430</id><snippet>list</snippet></ROW><ROW><id>8488529</id><snippet>move</snippet></ROW><ROW><id>8488529</id><snippet>servo</snippet></ROW><ROW><id>8488529</id><snippet>servo.move(...)</snippet></ROW><ROW><id>8488529</id><snippet>servo</snippet></ROW><ROW><id>8488737</id><snippet>webapp2.RequestHandler.__init__()</snippet></ROW><ROW><id>8488737</id><snippet>class RequestHandler(object):
    # ...
    def __init__(self, request=None, response=None):
        self.initialize(request, response)
</snippet></ROW><ROW><id>8488737</id><snippet>RequestHandler</snippet></ROW><ROW><id>8488737</id><snippet>request</snippet></ROW><ROW><id>8488737</id><snippet>response</snippet></ROW><ROW><id>8488737</id><snippet>class BaseHandler(webapp2.RequestHandler):
    def __init__(self, request, response):
        self.tdict = {}
        self.initialize(request, response)
</snippet></ROW><ROW><id>8488872</id><snippet>from django.db.models import Q

myQuery = Q()
for i in range(0,(searchDiff+1)):
    filterString = str(int(searchRange[0]) + i)
    myQueryTwoD.append(Q(asn=filterString))
    for j in range(0,(len(myQueryTwoD)-1)):
        myQuery = myQuery | myQueryTwoD[j]

myQuerySet = my.objects.filter(myQuery)
</snippet></ROW><ROW><id>8488872</id><snippet>Blagh.objects.filter(Q(smth='A') | Q(smth='B'))
  will generate query which looks like:
SELECT ... from blagh WHERE smth = 'A' OR smth = 'B'
</snippet></ROW><ROW><id>8488872</id><snippet>Q</snippet></ROW><ROW><id>8488872</id><snippet>itertools</snippet></ROW><ROW><id>8488872</id><snippet>OR</snippet></ROW><ROW><id>8488872</id><snippet>WHERE</snippet></ROW><ROW><id>8488872</id><snippet>strings = []
for i in range(0,(searchDiff+1)):
    filterString = str(int(searchRange[0]) + i)
    strings.append(filterString)

my_query_set = MyModel.objects.filter(arn__in=strings)
</snippet></ROW><ROW><id>8488886</id><snippet>import threading
lock = threading.Lock()

shared_dict = {}

def do_thing(user, value):
    lock.acquire()
    try:
        shared_dict[user] = value
    finally:
        # Always called, even if exception is raised in try block
        lock.release()
</snippet></ROW><ROW><id>8489252</id><snippet>:</snippet></ROW><ROW><id>8489252</id><snippet>document.xpath('//a[@id="cid-694094:Comment:188384"]')
</snippet></ROW><ROW><id>8489498</id><snippet>import numpy as np
N = 10
a = np.random.rand((N,N))
b = np.zeros((N,N+1))
b[:,:-1] = a
</snippet></ROW><ROW><id>8489498</id><snippet>In [23]: N = 10

In [24]: a = np.random.rand(N,N)

In [25]: %timeit b = np.hstack((a,np.zeros((a.shape[0],1))))
10000 loops, best of 3: 19.6 us per loop

In [27]: %timeit b = np.zeros((a.shape[0],a.shape[1]+1)); b[:,:-1] = a
100000 loops, best of 3: 5.62 us per loop
</snippet></ROW><ROW><id>8489719</id><snippet>import ook.monkey</snippet></ROW><ROW><id>8489719</id><snippet>from ook import monkey</snippet></ROW><ROW><id>8489837</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8489859</id><snippet>Queue()</snippet></ROW><ROW><id>8489859</id><snippet>from multiprocessing import Process, Queue
class Processor(Process):

    def __init__(self, queue):
        super(Processor, self).__init__()
        self.queue = queue

    def return_name(self):
        return "Process returned %s" % self.name

    def run(self):
        self.queue.put(self.return_name())

processes = []

if __name__ == "__main__":

        for i in range(0,5):
                q = Queue()
                p=Processor(q)
                processes.append((p, q))
                p.start()
        for val in processes:
                val[0].join()
                print "RESULT is %s" % val[1].get()
</snippet></ROW><ROW><id>8489859</id><snippet>$ python test.py
RESULT is Process returned Processor-1
RESULT is Process returned Processor-2
RESULT is Process returned Processor-3
RESULT is Process returned Processor-4
RESULT is Process returned Processor-5
$
</snippet></ROW><ROW><id>8489891</id><snippet>ctypes</snippet></ROW><ROW><id>8489891</id><snippet>import ctypes
ctypes.windll.shell32.ShellExecuteW(None, u'open', u'explorer.exe', 
                                    u'/n,/select, ' + file_path, None, 1)
</snippet></ROW><ROW><id>8489986</id><snippet>&gt;&gt;&gt; digits=[0,0,0,0,0,0,0,0,0,0]
&gt;&gt;&gt; num_digits=[1,2,3,9,1]
&gt;&gt;&gt; for d in num_digits:
...     digits[d] += 1
... 
&gt;&gt;&gt; digits
[0, 2, 1, 1, 0, 0, 0, 0, 0, 1]
</snippet></ROW><ROW><id>8489986</id><snippet>j</snippet></ROW><ROW><id>8490422</id><snippet>Lock</snippet></ROW><ROW><id>8490676</id><snippet>//Format A1:D1 as center alignment, 
sheet.Range("A1", "D1").VerticalAlignment = Excel.XlVAlign.xlVAlignCenter
sheet.Range("A1", "D1").HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter
sheet.Range("A1", "D1").Interior.ColorIndex = Excel.XlColorIndex.Red
</snippet></ROW><ROW><id>8490676</id><snippet>&gt;&gt;&gt; from win32com.client import Dispatch
&gt;&gt;&gt; xlApp = Dispatch("Excel.Application")
&gt;&gt;&gt; xlWb = xlApp.Workbooks.Add()
&gt;&gt;&gt; xlSht = xlWb.WorkSheets(1)
&gt;&gt;&gt; xlSht.Range("A1", "D1").VerticalAlignment = 1
&gt;&gt;&gt; xlSht.Range("A1", "D1").Interior.ColorIndex = 6
&gt;&gt;&gt; # The background color of A1-D1 should now be yellow
&gt;&gt;&gt; xlSht.Cells(1, 1).VerticalAlignment = 1
</snippet></ROW><ROW><id>8491023</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G = nx.Graph()
&gt;&gt;&gt; G.add_node(1)
&gt;&gt;&gt; G.node[1]['ipaddress'] = '8.8.8.8'
&gt;&gt;&gt; G.node[1]['longitude'] = 37
&gt;&gt;&gt; G.node[1]['latitude'] = 50
&gt;&gt;&gt; G.node[1]
{'latitude': 50, 'ipaddress': '8.8.8.8', 'longitude': 37}
&gt;&gt;&gt; G.node[1]['ipaddress']
'8.8.8.8'
</snippet></ROW><ROW><id>8491023</id><snippet>1</snippet></ROW><ROW><id>8491023</id><snippet>ipaddress</snippet></ROW><ROW><id>8491023</id><snippet>longitude</snippet></ROW><ROW><id>8491023</id><snippet>latitude</snippet></ROW><ROW><id>8491023</id><snippet>&gt;&gt;&gt; H = nx.Graph()
&gt;&gt;&gt; H.add_node('8.8.8.8', longitude=37, latitude=50)
&gt;&gt;&gt; H.node['8.8.8.8']
{'latitude': 50, 'longitude': 37}
</snippet></ROW><ROW><id>8491164</id><snippet>pip install pyserial
</snippet></ROW><ROW><id>8491164</id><snippet>python setup.py install</snippet></ROW><ROW><id>8491164</id><snippet>pip install pyserial</snippet></ROW><ROW><id>8491168</id><snippet>^(?:(?=\d{1,4}/\d{1,2}/\d{1,2})|(?=\d{1,2}/\d{1,4}/\d{1,2})|(?=\d{1,2}/\d{1,2}/\d{1,4}))(\d+)/(\d+)/(\d+)$
</snippet></ROW><ROW><id>8491168</id><snippet>^                              : begining of the string
(?:                            : begin non capture group
  (?=\d{1,4}/\d{1,2}/\d{1,2})  : assume the format is yyyy/mm/dd
  |                            : or
  (?=\d{1,2}/\d{1,4}/\d{1,2})  : format dd/yyyy/mm
  |                            : or
  (?=\d{1,2}/\d{1,2}/\d{1,4})  : format dd/mm/yyyy
)                              : end of non capture group
(\d+)/(\d+)/(\d+)              : capture the 3 elements
$                              : end of string
</snippet></ROW><ROW><id>8491237</id><snippet>import socket
</snippet></ROW><ROW><id>8491265</id><snippet>)</snippet></ROW><ROW><id>8491265</id><snippet>(</snippet></ROW><ROW><id>8491265</id><snippet>matches = re.split("(?&lt;=\)),(?=\()",a)
</snippet></ROW><ROW><id>8491449</id><snippet>locals()</snippet></ROW><ROW><id>8491449</id><snippet>class Foo(object):
    locals().update(a=1, b=2, c=3)
</snippet></ROW><ROW><id>8491449</id><snippet>locals()</snippet></ROW><ROW><id>8491449</id><snippet>type()</snippet></ROW><ROW><id>8491449</id><snippet>**</snippet></ROW><ROW><id>8491449</id><snippet>def dicty(*bases, **attrs):
    if not bases:
        bases = (object,)
    return type("&lt;from dict&gt;", bases, attrs)

class Foo(dicty(a=1, b=2, c=3)):
    pass

# if you already have the dict, use unpacking

dct = dict(a=1, b=2, c=3)

class Foo(dicty(**dct)):
    pass
</snippet></ROW><ROW><id>8491449</id><snippet>type()</snippet></ROW><ROW><id>8491449</id><snippet> class Foo(type("&lt;none&gt;", (object,), dict(a=1, b=2, c=3))):
     pass
</snippet></ROW><ROW><id>8491815</id><snippet>gtk.CellRendererText</snippet></ROW><ROW><id>8491815</id><snippet>text</snippet></ROW><ROW><id>8491815</id><snippet>gtk.CellRendererText</snippet></ROW><ROW><id>8491815</id><snippet>weight</snippet></ROW><ROW><id>8491815</id><snippet>weight-set</snippet></ROW><ROW><id>8491815</id><snippet>True</snippet></ROW><ROW><id>8491815</id><snippet>pango.WEIGHT</snippet></ROW><ROW><id>8491815</id><snippet>pango.WEIGHT_NORMAL</snippet></ROW><ROW><id>8491815</id><snippet>pango.WEIGHT_BOLD</snippet></ROW><ROW><id>8491815</id><snippet>pango.WEIGHT_NORMAL=400</snippet></ROW><ROW><id>8491815</id><snippet>pango.WEIGHT_BOLD=700</snippet></ROW><ROW><id>8491815</id><snippet>gtk.TreeView</snippet></ROW><ROW><id>8491815</id><snippet>text</snippet></ROW><ROW><id>8491815</id><snippet>text</snippet></ROW><ROW><id>8491815</id><snippet>weight</snippet></ROW><ROW><id>8491815</id><snippet>weight</snippet></ROW><ROW><id>8491972</id><snippet>$ apxs2 -cia mod_mor.c -lpython2.7
</snippet></ROW><ROW><id>8491972</id><snippet>$ apxs2 -cia mod_mor.c -Wl,-static -lpython2.7 
</snippet></ROW><ROW><id>8491990</id><snippet>urls.py</snippet></ROW><ROW><id>8492493</id><snippet>q.queue</snippet></ROW><ROW><id>8492493</id><snippet>&gt;&gt;&gt; q = Queue()
&gt;&gt;&gt; q.put(1)
&gt;&gt;&gt; q.queue
deque([1])
</snippet></ROW><ROW><id>8492544</id><snippet>timetuple</snippet></ROW><ROW><id>8492544</id><snippet>utctimetuple</snippet></ROW><ROW><id>8492544</id><snippet>time.mktime</snippet></ROW><ROW><id>8492544</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dt = datetime.datetime(2011, 12, 13, 10, 23)
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.mktime(dt.timetuple())
1323793380.0
</snippet></ROW><ROW><id>8492544</id><snippet>timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)
</snippet></ROW><ROW><id>8492855</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>8492855</id><snippet>virtualenv &lt;name&gt; --no-site-packages
pip install -r requirements.txt
</snippet></ROW><ROW><id>8492870</id><snippet>headers.append(('Content-Length', len(task.body())))
</snippet></ROW><ROW><id>8492870</id><snippet>headers.append(('Content-Length', str(len(task.body()))))
</snippet></ROW><ROW><id>8493208</id><snippet>png</snippet></ROW><ROW><id>8493208</id><snippet>subprocess.call()</snippet></ROW><ROW><id>8493208</id><snippet>wait()</snippet></ROW><ROW><id>8493208</id><snippet>p1=subprocess.Popen(command_line, stdout=subprocess.PIPE)
return_code = p1.wait()
if return_code &gt; 0:
    raise Exception('First process failed!')

...
</snippet></ROW><ROW><id>8493378</id><snippet>from django.contrib.auth.forms import AuthenticationForm
</snippet></ROW><ROW><id>8493378</id><snippet>middleware.py</snippet></ROW><ROW><id>8493378</id><snippet>AuthenticationForm</snippet></ROW><ROW><id>8493378</id><snippet>from django.http import HttpResponseRedirect
from django.conf import settings
from django.contrib import messages
from django.contrib.auth import login
#from django.contrib.auth.forms import AuthenticationForm &lt;-- THE LINE WAS HERE

class LoginFormMiddleware(object):
    def process_request(self, request):
        if request.method == 'POST' and 'is_top_login_form' in request.POST:
            from django.contrib.auth.forms import AuthenticationForm # &lt;-- MOVED HERE

            form = AuthenticationForm(data=request.POST)
            is_valid = form.is_valid()

            if is_valid:
                login(request, form.get_user())

                program = request.user.get_profile().first_intern.program
                NavigationMiddleware.set_program(request, program)

                return HttpResponseRedirect('%s?quick' % program.get_absolute_url())

            else:
                messages.error(request, request.POST['username'], extra_tags='login')
                return HttpResponseRedirect(request.get_full_path())            
</snippet></ROW><ROW><id>8493601</id><snippet>import os

class DirLister(object):
    def __init__(self, root):
        self.root = root
        self._list = None

    def __getattr__(self, name):
        try:
            var = super(DirLister).__getattr__(self, name)
            return var
        except AttributeError:
            return DirLister(os.path.join(self.root, name))

    def __str__(self):
        self._load()
        return str(self._list)

    def _load(self):
        """
        load once when needed
        """
        if self._list is not None:
            return
        self._list = os.listdir(self.root) # list root someway

root = DirLister("/")
print root.etc.apache2
</snippet></ROW><ROW><id>8493601</id><snippet>['mods-enabled', 'sites-80', 'mods-available', 'ports.conf', 'envvars', 'httpd.conf', 'sites-available', 'conf.d', 'magic', 'apache2.conf', 'sites-enabled']
</snippet></ROW><ROW><id>8493601</id><snippet>DirLister</snippet></ROW><ROW><id>8493601</id><snippet>DirLister</snippet></ROW><ROW><id>8493601</id><snippet>DirLister</snippet></ROW><ROW><id>8493601</id><snippet>class DirLister(object):
    def __init__(self, root):
        self.root = root
        self._list = os.listdir(self.root)
</snippet></ROW><ROW><id>8493601</id><snippet>__getattr__</snippet></ROW><ROW><id>8493601</id><snippet>obj.varname</snippet></ROW><ROW><id>8493601</id><snippet>root+subdirname</snippet></ROW><ROW><id>8493601</id><snippet>def __getattr__(self, name):
    try:
        var = super(DirLister).__getattr__(self, name)
        return var
    except AttributeError:
        return DirLister(os.path.join(self.root, name))
</snippet></ROW><ROW><id>8493601</id><snippet>AttributeError</snippet></ROW><ROW><id>8493601</id><snippet>load</snippet></ROW><ROW><id>8493601</id><snippet>def _load(self):
    if self._list is not None:
        return
    self._list = os.listdir(self.root) # list root someway
</snippet></ROW><ROW><id>8493601</id><snippet>import os

class RecursiveDirLister(object):
    def __init__(self, root):
        self._sublist = []
        for folder in os.listdir(root):
            self._sublist.append(folder)
            path = os.path.join(root, folder)
            if not os.path.isdir(path):
                continue
            # add it as attribute, assuming that dir-name is valid python varname
            try:
                sublister = RecursiveDirLister(path)
            except OSError:
                continue#ignore permission errors etc
            setattr(self, folder, sublister)

    def __str__(self):
        return str(self._sublist)

etc = RecursiveDirLister("/etc")
print etc.fonts
</snippet></ROW><ROW><id>8493601</id><snippet>['conf.avail', 'conf.d', 'fonts.conf', 'fonts.dtd']
</snippet></ROW><ROW><id>8493882</id><snippet>def x():
    print "x"
    fail()

def y():
    print "y"
    fail()

x().a = y()
</snippet></ROW><ROW><id>8493891</id><snippet>ax.transData</snippet></ROW><ROW><id>8493891</id><snippet>transform</snippet></ROW><ROW><id>8493891</id><snippet>import matplotlib.pyplot as plt

x = [1,2,4]
y = [1,3,2]

fig1 = plt.figure(figsize=(5,5),dpi=100)
ax = fig1.add_axes([0,0,1,1])

ax.scatter(x,y)

ax.set_xlim(0,5)
ax.set_ylim(0,5)
transDataToFig1 = ax.transData+fig1.transFigure.inverted()
for ix,iy in zip(x,y):
    inDots = ax.transData.transform((ix,iy))
    inFigIndirect = fig1.transFigure.inverted().transform(inDots)
    inFigDirect = transDataToFig1.transform((ix,iy))
    print inDots,"-&gt;",inFigIndirect," or ",inFigDirect

fig1.savefig('scatterPos1.png')
</snippet></ROW><ROW><id>8493891</id><snippet>[ 100.  100.] -&gt; [ 0.2  0.2]  or  [ 0.2  0.2]
[ 200.  300.] -&gt; [ 0.4  0.6]  or  [ 0.4  0.6]
[ 400.  200.] -&gt; [ 0.8  0.4]  or  [ 0.8  0.4]
</snippet></ROW><ROW><id>8493891</id><snippet>fig2=plt.figure(figsize=(5,5),dpi=100)
ax1 = fig2.add_subplot(121)
ax2 = fig2.add_subplot(122)
ax1.scatter(x,y)
ax1.set_xlim(0,5)
ax2.set_ylim(0,5)
ax2.plot(range(10))

transDataToFig2 = ax1.transData+fig2.transFigure.inverted()
for ix,iy in zip(x,y):
    inDots = ax1.transData.transform((ix,iy))
    inFigIndirect = fig2.transFigure.inverted().transform(inDots)
    inFigDirect = transDataToFig2.transform((ix,iy))
    print inDots,"-&gt;",inFigIndirect," or ",inFigDirect

fig2.savefig('scatterPos2.png')
</snippet></ROW><ROW><id>8493891</id><snippet>[  97.72727273  116.66666667] -&gt; [ 0.19545455  0.23333333]  or  [ 0.19545455  0.23333333]
[ 132.95454545  383.33333333] -&gt; [ 0.26590909  0.76666667]  or  [ 0.26590909  0.76666667]
[ 203.40909091  250.        ] -&gt; [ 0.40681818  0.5       ]  or  [ 0.40681818  0.5       ]
</snippet></ROW><ROW><id>8493891</id><snippet>ax1</snippet></ROW><ROW><id>8493891</id><snippet>x</snippet></ROW><ROW><id>8493891</id><snippet>y</snippet></ROW><ROW><id>8493891</id><snippet>transData</snippet></ROW><ROW><id>8493891</id><snippet>transData</snippet></ROW><ROW><id>8493891</id><snippet>click = (120,480)
print "Click ",click," transforms into:"
print ax1.transData.inverted().transform(click)," for axes 1"
print ax2.transData.inverted().transform(click)," for axes 2"
</snippet></ROW><ROW><id>8493891</id><snippet>Click  (120, 480)  transforms into:
[ 1.63225806  3.725     ]  for axes 1
[-7.86193548  9.675     ]  for axes 2
</snippet></ROW><ROW><id>8493891</id><snippet>ax2</snippet></ROW><ROW><id>8494170</id><snippet>def cho_dangnhap(self,cr,uid,ids,context={}):
            self.pool.get('x_luong').write(cr,uid,ids,{'state':'dangnhap'})
            self.get_timein(cr,uid,ids)
            return 1
def cho_rave(self,cr,uid,ids,context={}):
            self.pool.get('x_luong').write(cr,uid,ids,{'state':'rave'})
            self.get_timeout(cr,uid,ids)
</snippet></ROW><ROW><id>8494170</id><snippet>self.</snippet></ROW><ROW><id>8494425</id><snippet>{% for p in posts %}
    &lt;div class="post width1 height2 column {% if forloop.counter0|divisibleby:4 %}first{% endif %}"&gt;
        &lt;div class="preview"&gt;

        &lt;/div&gt;
        &lt;div class="overlay"&gt;

        &lt;/div&gt;
        &lt;h2&gt;p.title&lt;/h2&gt;
    &lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>8494522</id><snippet>fileName</snippet></ROW><ROW><id>8494522</id><snippet>className</snippet></ROW><ROW><id>8494522</id><snippet>QString</snippet></ROW><ROW><id>8494522</id><snippet>const char*</snippet></ROW><ROW><id>8494522</id><snippet>QString::toAscii()</snippet></ROW><ROW><id>8494522</id><snippet>pValue = PyString_FromString(fileName.toAscii().data());
</snippet></ROW><ROW><id>8494873</id><snippet>from datetime import datetime
hour_den = '12:13'
hour_di = '12:15'
FMT = '%H:%M'
timedelta = datetime.strptime(hour_di, FMT) - datetime.strptime(hour_den, FMT)
print timedelta
</snippet></ROW><ROW><id>8495262</id><snippet>#include &lt;map&gt;
#include &lt;memory&gt;

struct GraphNode
{
  std::map&lt;std::size_t, std::unique_ptr&lt;GraphNode&gt;&gt; m;

  GraphNode &amp; operator[](std::size_t i)
  {
    if (!m[i]) { m[i].reset(new GraphNode); }
    return *m[i];
  }
};
</snippet></ROW><ROW><id>8495262</id><snippet>#include &lt;prettyprint.hpp&gt;

std::ostream &amp; operator&lt;&lt;(std::ostream &amp; o, GraphNode const &amp; g)
{
  if (g.m.empty()) return o &lt;&lt; "*";
  return o &lt;&lt; g.m;
}
std::ostream &amp; operator&lt;&lt;(std::ostream &amp; o, std::unique_ptr&lt;GraphNode&gt; const &amp; p)
{
  if (!p) return o &lt;&lt; "*";
  return o &lt;&lt; *p;
}
</snippet></ROW><ROW><id>8495262</id><snippet>#include &lt;iostream&gt;

int main()
{
  GraphNode n;

  n[2] = GraphNode();
  n[4] = GraphNode();

  n[2][3] = GraphNode();
  n[2][8] = GraphNode();
  n[2][1] = GraphNode();

  std::cout &lt;&lt; n &lt;&lt; std::endl;
}
</snippet></ROW><ROW><id>8495262</id><snippet>[(2, [(1, *), (3, *), (8, *)]), (4, *)]</snippet></ROW><ROW><id>8495271</id><snippet>#!/usr/bin/env python

import time

class Alpha(set):
    def __init__(self, name, s=()):
            super(Alpha, self).__init__(s)
            self.name = name
    def __repr__(self):
            return '%s(%r, set(%r))' % (self.__class__.__name__, 
                                        self.name, 
                                        list(self))

class Alpha2(set):
    def __init__(self, name, s=()):
            super(Alpha2, self).__init__(s)
            self.name = name
    def __repr__(self):
            return '%s(%r, set(%r))' % (self.__class__.__name__, 
                                        self.name, 
                                        set(self))

class Alpha3(set):
    def __init__(self, name, s=()):
            super(Alpha3, self).__init__(s)
            self.name = name
    def __repr__(self):
            rep = super(Alpha3, self).__repr__()
            rep = rep.replace(self.__class__.__name__, 'set', 1)
            return '%s(%r, %s)' % (self.__class__.__name__, 
                                    self.name, 
                                    rep)

def timeit(exp, repeat=10000):
    results = []
    for _ in xrange(repeat):
        start = time.time()
        exec(exp)
        end = time.time()-start
        results.append(end*1000)
    return sum(results) / len(results)

if __name__ == "__main__":
    print "Alpha():  ", timeit("a = Alpha('test', (1,2,3,4,5))")
    print "Alpha2(): ", timeit("a = Alpha2('test', (1,2,3,4,5))")
    print "Alpha3(): ", timeit("a = Alpha3('test', (1,2,3,4,5))")
</snippet></ROW><ROW><id>8495305</id><snippet>def print_chord(note_list):
  clef = ['-----',
          '     ',
          '-----',
          '     ',
          '-----',
          '     ',
          '-----',
          '     ',
          '-----']

  for note in note_list:
    # insert the notes into the clef
    clef[note] = clef[note][:2] + 'o' + clef[note][3:]

  # lower notes have lower values, so reverse the list
  clef.reverse()

  for line in clef:
    # show the result to the user
    print line
</snippet></ROW><ROW><id>8495305</id><snippet>print_chord([0, 4, 5])
</snippet></ROW><ROW><id>8495305</id><snippet>-----

-----
  o   
--o--

-----

--o--
</snippet></ROW><ROW><id>8495313</id><snippet>mitt_filter</snippet></ROW><ROW><id>8495313</id><snippet>__call__</snippet></ROW><ROW><id>8495313</id><snippet>min_analyzer = SpaceSeparatedTokenizer() | LowercaseFilter() | mitt_filter
</snippet></ROW><ROW><id>8495313</id><snippet>min_analyzer</snippet></ROW><ROW><id>8495313</id><snippet>Schema</snippet></ROW><ROW><id>8495313</id><snippet>analyzer=min_analyzer</snippet></ROW><ROW><id>8495313</id><snippet>removestops</snippet></ROW><ROW><id>8495313</id><snippet>positions</snippet></ROW><ROW><id>8495560</id><snippet>__missing__</snippet></ROW><ROW><id>8495560</id><snippet>&gt;&gt;&gt; class KeyDict(dict):
...     def __missing__(self, key):
...             return key
... 
&gt;&gt;&gt; x = KeyDict()
&gt;&gt;&gt; x[2]
2
&gt;&gt;&gt; x[2]=0
&gt;&gt;&gt; x[2]
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8495764</id><snippet>with</snippet></ROW><ROW><id>8495764</id><snippet>open</snippet></ROW><ROW><id>8495764</id><snippet>with open(...) as f:
    # do stuff
</snippet></ROW><ROW><id>8495764</id><snippet>stuff</snippet></ROW><ROW><id>8495764</id><snippet>stdout</snippet></ROW><ROW><id>8495764</id><snippet>@contextlib.contextmanager
def redirect_stdout(stream):
    import sys
    sys.stdout = stream
    yield
    sys.stdout = sys.__stdout__
</snippet></ROW><ROW><id>8495764</id><snippet>with open(...) as f:
    with redirect_stdout(f):
        # do stuff
</snippet></ROW><ROW><id>8495764</id><snippet>stuff</snippet></ROW><ROW><id>8495764</id><snippet>f</snippet></ROW><ROW><id>8495764</id><snippet>@contextlib.contextmanager
def maybe_open(path, do_nothing=True):
    if do_nothing:
        f = None
        yield sys.stdout
    else:
        f = open(path)
        yield f

    if f:
        f.close()
</snippet></ROW><ROW><id>8495770</id><snippet>libreadline-dev</snippet></ROW><ROW><id>8495770</id><snippet>make</snippet></ROW><ROW><id>8495770</id><snippet>readline</snippet></ROW><ROW><id>8495770</id><snippet>Tcl/Tk</snippet></ROW><ROW><id>8495770</id><snippet>zlib</snippet></ROW><ROW><id>8495770</id><snippet>gdbm</snippet></ROW><ROW><id>8495770</id><snippet>openssl</snippet></ROW><ROW><id>8495770</id><snippet>make</snippet></ROW><ROW><id>8495770</id><snippet>configure</snippet></ROW><ROW><id>8495770</id><snippet>make</snippet></ROW><ROW><id>8496046</id><snippet>import h5py
xmldata = """&lt;xml&gt;
&lt;something&gt;
    &lt;else&gt;Text&lt;/else&gt;
&lt;/something&gt;
&lt;/xml&gt;
"""

# Write the xml file...
f = h5py.File('test.hdf5', 'w')
str_type = h5py.new_vlen(str)
ds = f.create_dataset('something.xml', shape=(1,), dtype=str_type)
ds[:] = xmldata
f.close()

# Read the xml file back...
f = h5py.File('test.hdf5', 'r')
print f['something.xml'][0]
</snippet></ROW><ROW><id>8496110</id><snippet>lastforlevel[n-1]</snippet></ROW><ROW><id>8496168</id><snippet>   (r'^page/(?P&lt;loc&gt;.*)', get_page)
</snippet></ROW><ROW><id>8496168</id><snippet>page/</snippet></ROW><ROW><id>8496505</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>8496505</id><snippet>print</snippet></ROW><ROW><id>8496514</id><snippet>person.name</snippet></ROW><ROW><id>8496514</id><snippet>join</snippet></ROW><ROW><id>8496514</id><snippet>&gt;&gt;&gt; person = Person.all().filter('name =', 'Mr. Random').fetch(1)[0]
&gt;&gt;&gt; cars = Car.all().filter('person =', person.key())
</snippet></ROW><ROW><id>8496514</id><snippet>collection_name</snippet></ROW><ROW><id>8496514</id><snippet>Class Car(db.Model):
    ...    
    person = db.ReferenceProperty(Person, collection_name='cars_collection')
</snippet></ROW><ROW><id>8496514</id><snippet>&gt;&gt;&gt; person = Person.all().filter('name =', 'Mr. Random').fetch(1)[0]
&gt;&gt;&gt; mrs_randoms_cars = person.cars_collection
</snippet></ROW><ROW><id>8496578</id><snippet>VideoData</snippet></ROW><ROW><id>8496578</id><snippet>vid</snippet></ROW><ROW><id>8496578</id><snippet>&lt;video width="320" height="240" controls="controls"&gt;
  &lt;source src="{{vid.file.url}}"  type="video/mov" /&gt;
 &lt;/video&gt;
</snippet></ROW><ROW><id>8496578</id><snippet>VideoData</snippet></ROW><ROW><id>8496578</id><snippet>from django.shortcuts import render_to_response
from models import VideoData

def show_video(request):
    vid = VideoData.objects.get(id=1) # replace with correct query
    return render_to_response("template.html", {"vid":vid})
</snippet></ROW><ROW><id>8496666</id><snippet>$ gunicorn 'mypackage:build_app(foo="bar")'
</snippet></ROW><ROW><id>8496791</id><snippet>msg = data.split('X-OriginalArrivalTime', 1)[1].split('\n', 1)[1]
</snippet></ROW><ROW><id>8496834</id><snippet>from collections import defaultdict

input_ = '''dir/file
dir/dir2/file2
dir/file3
dir2/alpha/beta/gamma/delta
dir2/alpha/beta/gamma/delta/
dir3/file4
dir3/file5'''

FILE_MARKER = '&lt;files&gt;'

def attach(branch, trunk):
    '''
    Insert a branch of directories on its trunk.
    '''
    parts = branch.split('/', 1)
    if len(parts) == 1:  # branch is a file
        trunk[FILE_MARKER].append(parts[0])
    else:
        node, others = parts
        if node not in trunk:
            trunk[node] = defaultdict(dict, ((FILE_MARKER, []),))
        attach(others, trunk[node])

def prettify(d, indent=0):
    '''
    Print the file tree structure with proper indentation.
    '''
    for key, value in d.iteritems():
        if key == FILE_MARKER:
            if value:
                print '  ' * indent + str(value)
        else:
            print '  ' * indent + str(key)
            if isinstance(value, dict):
                prettify(value, indent+1)
            else:
                print '  ' * (indent+1) + str(value)



main_dict = defaultdict(dict, ((FILE_MARKER, []),))
for line in input_.split('\n'):
    attach(line, main_dict)

prettify(main_dict)
</snippet></ROW><ROW><id>8496834</id><snippet>dir3
  ['file4', 'file5']
dir2
  alpha
    beta
      gamma
        ['delta']
        delta
          ['']
dir
  dir2
    ['file2']
  ['file', 'file3']
</snippet></ROW><ROW><id>8496834</id><snippet>main_dict['dir2']['alpha']['beta']</snippet></ROW><ROW><id>8496834</id><snippet>.../delta</snippet></ROW><ROW><id>8496834</id><snippet>.../delta/</snippet></ROW><ROW><id>8496922</id><snippet>stdout</snippet></ROW><ROW><id>8496922</id><snippet>stderr</snippet></ROW><ROW><id>8496922</id><snippet>os.dup</snippet></ROW><ROW><id>8496922</id><snippet>stdout</snippet></ROW><ROW><id>8496922</id><snippet>stderr</snippet></ROW><ROW><id>8496922</id><snippet>reopen</snippet></ROW><ROW><id>8496922</id><snippet>stdio</snippet></ROW><ROW><id>8496922</id><snippet>reopen</snippet></ROW><ROW><id>8496922</id><snippet>cout</snippet></ROW><ROW><id>8496922</id><snippet>cerr</snippet></ROW><ROW><id>8496922</id><snippet>print</snippet></ROW><ROW><id>8496922</id><snippet>stdout</snippet></ROW><ROW><id>8496922</id><snippet>stderr</snippet></ROW><ROW><id>8496922</id><snippet>sdout.write</snippet></ROW><ROW><id>8496922</id><snippet>stdout.err</snippet></ROW><ROW><id>8496922</id><snippet>logging</snippet></ROW><ROW><id>8496922</id><snippet>stream</snippet></ROW><ROW><id>8496922</id><snippet>import sys, os
import logging
from instant import inline

print 'This is printed from python to stdout'
stdout = os.fdopen(os.dup(sys.stdout.fileno()), 'w')
stderr = os.fdopen(os.dup(sys.stderr.fileno()), 'w')

logging.basicConfig(stream=stderr, level=logging.DEBUG)

redirect = inline("""                                                                                                                    
void redirect(void) {                                                                                                                    
    freopen("my_stdout.txt", "w", stdout);                                                                                               
    freopen("my_stderr.txt", "w", stderr);                                                                                               
}                                                                                                                                        
""")
redirect()

cout = inline("""                                                                                                                        
void cout(void) {                                                                                                                        
    std::cout &lt;&lt; "This is written from C++ to my_stdout.txt" &lt;&lt; std::endl;                                                               
    std::cerr &lt;&lt; "This is written from C++ to my_stderr.txt" &lt;&lt; std::endl;                                                               
}                                                                                                                                        
""")
cout()

print 'This is written from python to my_stdout.txt'

stdout.write('This is printed from python to stdout\n')
stderr.write('This is printed from python to stderr\n')
logging.info('This is printed to stderr from python using logging')
</snippet></ROW><ROW><id>8496922</id><snippet>$ python test.py
This is printed from python to stdout
This is printed from python to stdout
This is printed from python to stderr
INFO:root:This is printed to stderr from python using logging
$ cat my_stdout.txt 
This is written from C++ to my_stdout.txt
This is written from python to my_stdout.txt
$ cat my_stderr.txt 
This is written from C++ to my_stderr.txt
</snippet></ROW><ROW><id>8496922</id><snippet>gcc</snippet></ROW><ROW><id>8497000</id><snippet>...
if __name__ == '__main__':
    args = argparser()

    from tests import *

    ...
</snippet></ROW><ROW><id>8497000</id><snippet>from __main__ import args

print args
</snippet></ROW><ROW><id>8497099</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8497099</id><snippet>env</snippet></ROW><ROW><id>8497099</id><snippet>os.environ</snippet></ROW><ROW><id>8497733</id><snippet>_buffData[t_offset:t_offset + len(t_data)] = bytearray(t_data)</snippet></ROW><ROW><id>8498146</id><snippet>from M2Crypto import SSL
ctx = SSL.Context('sslv3')
ctx.set_verify(SSL.verify_peer | SSL.verify_fail_if_no_peer_cert, depth=9)
if ctx.load_verify_locations('ca.pem') != 1:
   raise Exception('No CA certs')

c = SSL.Connection(ctx)
c.connect(('www.google.com', 443)) # automatically checks cert matches host
c.send('GET / \n')
c.close()
</snippet></ROW><ROW><id>8498146</id><snippet>import urllib2, urllib2_ssl

opener = urllib2.build_opener(urllib2_ssl.HTTPSHandler(ca_certs='ca.pem'))
xml = opener.open('https://example.com/').read()
</snippet></ROW><ROW><id>8498146</id><snippet>pycurl</snippet></ROW><ROW><id>8498146</id><snippet>c = pycurl.Curl()
c.setopt(pycurl.URL, "https://example.com?param1=val1&amp;param2=val2")
c.setopt(pycurl.HTTPGET, 1)
c.setopt(pycurl.CAINFO, 'ca.pem')
c.setopt(pycurl.SSL_VERIFYPEER, 1)
c.setopt(pycurl.SSL_VERIFYHOST, 2)
c.setopt(pycurl.SSLVERSION,     3)    
c.setopt(pycurl.NOBODY, 1)
c.setopt(pycurl.NOSIGNAL, 1)
c.perform()
c.close()
</snippet></ROW><ROW><id>8498146</id><snippet>'ca.pem'</snippet></ROW><ROW><id>8498214</id><snippet>try..except..else</snippet></ROW><ROW><id>8498214</id><snippet>try:
    cur = conn.cursor()

    try:
        cur.execute("""insert into encounter_id_table (
            encounter_id,current_date  )
            values       
            (%(create_date)s, %(encounter_id)s ) ;""",
            'encounter_id':i.split('~')[1],  
            'create_date': datetime.date.today() })
    except psycopg2.IntegrityError:
        conn.rollback()
    else:
        conn.commit()

    cur.close() 
except Exception , e:
    print 'ERROR:', e[0]
</snippet></ROW><ROW><id>8498319</id><snippet>cmath.exp(1+2j)
</snippet></ROW><ROW><id>8498373</id><snippet>myNumber = 1.2e-8
myBase = 1e-12
mantissa = myNumber/myBase
print "{0:1}{1:s}".format(mantissa, "{0:1}".format(myBase)[1:])
</snippet></ROW><ROW><id>8498588</id><snippet>acceptable = set()
#...
acceptable = set(filter(is_rank_y_top_10,
                        filter(is_rank_x_top_100, acceptable)))
</snippet></ROW><ROW><id>8498588</id><snippet>acceptable = set()
#...
acceptable = set(i for i in acceptable
                 if is_rank_x_top_100(i) and is_rank_y_top_10(i))
</snippet></ROW><ROW><id>8498758</id><snippet>stop = int(input("Enter number to calculate all primes up to: "))

primes = []

for n in range(3, stop, 2): # Step by two each time
    was_prime = True # Needed to break out of nested loop
    for p in primes:
        if n % p == 0: # A prime divides n
             was_prime = False
             break # No need to continue
    if was_prime:
        primes.append(n)

print(primes) # You can insert the number 2 here if you like
</snippet></ROW><ROW><id>8499098</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        layout = QtGui.QVBoxLayout(self)
        self.button = QtGui.QPushButton('Select Files', self)
        layout.addWidget(self.button)
        self.button.clicked.connect(self.handleButton)

    def handleButton(self):
        title = self.button.text()
        for path in QtGui.QFileDialog.getOpenFileNames(self, title):
            print path

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8499108</id><snippet>#!/usr/bin/env python
#

import os
import urllib

from google.appengine.ext import blobstore
from google.appengine.ext import webapp
from google.appengine.ext.webapp import blobstore_handlers
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp.util import run_wsgi_app

class MainHandler(webapp.RequestHandler):
    def get(self):
        upload_url = blobstore.create_upload_url('/upload')
        self.response.out.write('&lt;html&gt;&lt;body&gt;')
        self.response.out.write('&lt;form action="%s" method="POST" enctype="multipart/form-data"&gt;' % upload_url)
        self.response.out.write("""Upload File: &lt;input type="file" name="file"&gt;&lt;br&gt; &lt;input type="submit" 
            name="submit" value="Submit"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;""")

class UploadHandler(blobstore_handlers.BlobstoreUploadHandler):
    def post(self):
        upload_files = self.get_uploads('file')  # 'file' is file upload field in the form
        blob_info = upload_files[0]
        self.redirect('/serve/%s' % blob_info.key())

class ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):
    def get(self, resource):
        resource = str(urllib.unquote(resource))
        blob_info = blobstore.BlobInfo.get(resource)
        self.send_blob(blob_info)

def main():
    application = webapp.WSGIApplication(
          [('/', MainHandler),
           ('/upload', UploadHandler),
           ('/serve/([^/]+)?', ServeHandler),
          ], debug=True)
    run_wsgi_app(application)

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>8499451</id><snippet>print</snippet></ROW><ROW><id>8499451</id><snippet>print</snippet></ROW><ROW><id>8499451</id><snippet>self.response.out.write()</snippet></ROW><ROW><id>8499451</id><snippet>logging.info</snippet></ROW><ROW><id>8499860</id><snippet>MyClass.mymethod = self.m.mock()
</snippet></ROW><ROW><id>8499860</id><snippet>MyClass.mymethod()</snippet></ROW><ROW><id>8499860</id><snippet>MyClass.mymethod</snippet></ROW><ROW><id>8499860</id><snippet>MyClass.mymethod()</snippet></ROW><ROW><id>8499860</id><snippet>test_A</snippet></ROW><ROW><id>8499860</id><snippet>mymethod</snippet></ROW><ROW><id>8499860</id><snippet>tearDown</snippet></ROW><ROW><id>8499860</id><snippet>Class test_A():
    def setUp(self):
        self.originalMyMethod = MyClass.mymethod
        self.m=Mock()
        MyClass.mymethod = self.m.mock()
        self.m.result(None)
        self.m.count(0,None)
        self.m.replay()

    def test_me(self):
        # Do something about MyClass.mymethod

    def tearDown(self):
        self.m.restore()
        self.m.verify()
        MyClass.mymethod = self.originalMyMethod
</snippet></ROW><ROW><id>8500026</id><snippet>lg</snippet></ROW><ROW><id>8500026</id><snippet>num_cols = lg + 6
for row in data:
    writer.writerow(row[:num_cols])
</snippet></ROW><ROW><id>8500026</id><snippet>writer.writerows(data)
</snippet></ROW><ROW><id>8500026</id><snippet>lg</snippet></ROW><ROW><id>8500158</id><snippet>  try:
     self.update_timestamp()
  except (OSError, IOError):
     dummy, utime_extra, dummy = sys.exc_info()
     if utime_extra.errno == errno.ENOENT:
</snippet></ROW><ROW><id>8500158</id><snippet>try:
   from anydbm import *
except ImportError:
   from dbm import *
</snippet></ROW><ROW><id>8500162</id><snippet>from top.models import Page
</snippet></ROW><ROW><id>8500169</id><snippet>sys.stdin</snippet></ROW><ROW><id>8500169</id><snippet>sys.stdout</snippet></ROW><ROW><id>8500169</id><snippet>0</snippet></ROW><ROW><id>8500169</id><snippet>1</snippet></ROW><ROW><id>8500169</id><snippet>exec</snippet></ROW><ROW><id>8500169</id><snippet>os.dup2(sys.stdin.fileno(), 0)
os.dup2(sys.stdout.fileno(), 1)
</snippet></ROW><ROW><id>8500430</id><snippet>m = 100 if t == 0 else 5 # requires python version &gt;= 2.5
m = [5,100][t == 0]
</snippet></ROW><ROW><id>8500430</id><snippet>Conditional Expressions</snippet></ROW><ROW><id>8500430</id><snippet>?:</snippet></ROW><ROW><id>8500430</id><snippet>C</snippet></ROW><ROW><id>8500430</id><snippet>C++</snippet></ROW><ROW><id>8500587</id><snippet>if int(ipDSS) &lt;= 16:
</snippet></ROW><ROW><id>8501410</id><snippet>if</snippet></ROW><ROW><id>8501410</id><snippet>if x &lt; 0 or y &lt; 0 or x &gt; nrows or y &gt; ncols</snippet></ROW><ROW><id>8501410</id><snippet>#akin to a bucket fill in paint, finds the area instead
def floodcount (x,y,array,value,count=0): 
    nrows = len(array)-1          #rows of the image
    ncols = len(array[0])-1       #columns of the image
    if x &lt; 0 or y &lt; 0 or x &gt; nrows or y &gt; ncols:
        return count

    diff = array[x][y] - value
    # the base case, finding a diff more than 0.05 or less than 0 is like finding a boundary
    if (diff &lt; 0.00) or (diff &gt; 0.05): 
        return count

    count = count +1
    print 'count1 ',count

    array[x][y] = -5 # so we do no calculate this pixel again
    #print "[",x,",",y,"]"

    count = floodcount (x-1,y,array,value,count)
    count = floodcount (x,y+1,array,value,count)
    count = floodcount (x+1,y,array,value,count)
    count = floodcount (x,y-1,array,value,count)

    count = floodcount (x-1,y-1,array,value,count)
    count = floodcount (x+1,y+1,array,value,count)
    count = floodcount (x+1,y-1,array,value,count)
    count = floodcount (x-1,y+1,array,value,count)

    print 'count2 ',count    
    return count
</snippet></ROW><ROW><id>8501976</id><snippet>track</snippet></ROW><ROW><id>8502348</id><snippet>from GP import class1, class2, class3
</snippet></ROW><ROW><id>8502348</id><snippet>if __name__ == "__main__":
    # put code here
</snippet></ROW><ROW><id>8503162</id><snippet>format, enc = mimetypes.guess_type(filename)
main, sub = format.split('/')
mb = MIMEBase(main, sub)
</snippet></ROW><ROW><id>8503162</id><snippet>format, enc = mimetypes.guess_type(filename)
mb = MIMEBase(*format.split('/'))
</snippet></ROW><ROW><id>8503331</id><snippet>django.db</snippet></ROW><ROW><id>8503331</id><snippet>QuerySet</snippet></ROW><ROW><id>8503386</id><snippet>lock.release</snippet></ROW><ROW><id>8503386</id><snippet>def stream_session(gpsData, session, lock):
    for report in session:
        if report.get("class") == "TPV":
            print ":"
            lock.acquire()
            fill_gpsdata(gpsData, session, report)
            lock.release()   # better to call the method
            print "::"
</snippet></ROW><ROW><id>8504119</id><snippet>'nuke.execute("Write1", 1, 10, 1)'
</snippet></ROW><ROW><id>8504119</id><snippet>"nuke.execute(\"Write1\", 1, 10, 1)"
</snippet></ROW><ROW><id>8504119</id><snippet>"""nuke.execute("Write1", 1, 10, 1)"""
</snippet></ROW><ROW><id>8504119</id><snippet>'''nuke.execute("Write1", 1, 10, 1)'''
</snippet></ROW><ROW><id>8504366</id><snippet>_factory</snippet></ROW><ROW><id>8504366</id><snippet>Message</snippet></ROW><ROW><id>8504366</id><snippet>email.message.Message</snippet></ROW><ROW><id>8504436</id><snippet>xmpppy</snippet></ROW><ROW><id>8504516</id><snippet>import csv

ip_file = open("ipfile.csv")
position_file = open("positionfile.csv")
output = open("output.csv", "wt")

ips = {}    

# create a CSV reader for the proper csv file with locations:
reader = csv.reader(position_file)
for line in reader:
    ips[line[0]] = line[1]


#now you have the IP + location association

for line in ip_file.readlines():
    ip = line.split(",")[-1].strip()
    output.write(line.strip() + ", " + (ips[ip] if ip in ips else "location unknown") + "\n" )

output.close()
</snippet></ROW><ROW><id>8504671</id><snippet>string-join(/sample//Message[@number = 2]/Description/(text() | */@*), '')</snippet></ROW><ROW><id>8504985</id><snippet>AName</snippet></ROW><ROW><id>8504985</id><snippet>PName</snippet></ROW><ROW><id>8504985</id><snippet>Value</snippet></ROW><ROW><id>8504985</id><snippet>"foo,bar,baz"</snippet></ROW><ROW><id>8504985</id><snippet>aName,pName,value = element.split(',')
</snippet></ROW><ROW><id>8505029</id><snippet>Group</snippet></ROW><ROW><id>8505029</id><snippet>User</snippet></ROW><ROW><id>8505074</id><snippet>def applyTopping1(functor):
    def wrapped():
        base_pizza = functor()
        base_pizza.add("mozzarella")
        return base_pizza
    return wrapped

def applyTopping2(functor):
    def wrapped():
        base_pizza = functor()
        base_pizza.add("ham")
        return base_pizza
    return wrapped
</snippet></ROW><ROW><id>8505387</id><snippet>input()</snippet></ROW><ROW><id>8505387</id><snippet>def input_with_prefill(prompt, text):
    def hook():
        readline.insert_text(text)
        readline.redisplay()
    readline.set_pre_input_hook(hook)
    result = input(prompt)
    readline.set_pre_input_hook()
    return result
</snippet></ROW><ROW><id>8505774</id><snippet>highResPoints</snippet></ROW><ROW><id>8505774</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def highResPoints(x,y,factor=10):
    '''
    Take points listed in two vectors and return them at a higher
    resultion. Create at least factor*len(x) new points that include the
    original points and those spaced in between.

    Returns new x and y arrays as a tuple (x,y).
    '''

    # r is the distance spanned between pairs of points
    r = [0]
    for i in range(1,len(x)):
        dx = x[i]-x[i-1]
        dy = y[i]-y[i-1]
        r.append(np.sqrt(dx*dx+dy*dy))
    r = np.array(r)

    # rtot is a cumulative sum of r, it's used to save time
    rtot = []
    for i in range(len(r)):
        rtot.append(r[0:i].sum())
    rtot.append(r.sum())

    dr = rtot[-1]/(NPOINTS*RESFACT-1)
    xmod=[x[0]]
    ymod=[y[0]]
    rPos = 0 # current point on walk along data
    rcount = 1 
    while rPos &lt; r.sum():
        x1,x2 = x[rcount-1],x[rcount]
        y1,y2 = y[rcount-1],y[rcount]
        dpos = rPos-rtot[rcount] 
        theta = np.arctan2((x2-x1),(y2-y1))
        rx = np.sin(theta)*dpos+x1
        ry = np.cos(theta)*dpos+y1
        xmod.append(rx)
        ymod.append(ry)
        rPos+=dr
        while rPos &gt; rtot[rcount+1]:
            rPos = rtot[rcount+1]
            rcount+=1
            if rcount&gt;rtot[-1]:
                break

    return xmod,ymod


#CONSTANTS
NPOINTS = 10
COLOR='blue'
RESFACT=10
MAP='winter' # choose carefully, or color transitions will not appear smoooth

# create random data
np.random.seed(101)
x = np.random.rand(NPOINTS)
y = np.random.rand(NPOINTS)

fig = plt.figure()
ax1 = fig.add_subplot(221) # regular resolution color map
ax2 = fig.add_subplot(222) # regular resolution alpha
ax3 = fig.add_subplot(223) # high resolution color map
ax4 = fig.add_subplot(224) # high resolution alpha

# Choose a color map, loop through the colors, and assign them to the color 
# cycle. You need NPOINTS-1 colors, because you'll plot that many lines 
# between pairs. In other words, your line is not cyclic, so there's 
# no line from end to beginning
cm = plt.get_cmap(MAP)
ax1.set_color_cycle([cm(1.*i/(NPOINTS-1)) for i in range(NPOINTS-1)])
for i in range(NPOINTS-1):
    ax1.plot(x[i:i+2],y[i:i+2])


ax1.text(.05,1.05,'Reg. Res - Color Map')
ax1.set_ylim(0,1.2)

# same approach, but fixed color and 
# alpha is scale from 0 to 1 in NPOINTS steps
for i in range(NPOINTS-1):
    ax2.plot(x[i:i+2],y[i:i+2],alpha=float(i)/(NPOINTS-1),color=COLOR)

ax2.text(.05,1.05,'Reg. Res - alpha')
ax2.set_ylim(0,1.2)

# get higher resolution data
xHiRes,yHiRes = highResPoints(x,y,RESFACT)
npointsHiRes = len(xHiRes)

cm = plt.get_cmap(MAP)

ax3.set_color_cycle([cm(1.*i/(npointsHiRes-1)) 
                     for i in range(npointsHiRes-1)])


for i in range(npointsHiRes-1):
    ax3.plot(xHiRes[i:i+2],yHiRes[i:i+2])

ax3.text(.05,1.05,'Hi Res - Color Map')
ax3.set_ylim(0,1.2)

for i in range(npointsHiRes-1):
    ax4.plot(xHiRes[i:i+2],yHiRes[i:i+2],
             alpha=float(i)/(npointsHiRes-1),
             color=COLOR)
ax4.text(.05,1.05,'High Res - alpha')
ax4.set_ylim(0,1.2)



fig.savefig('gradColorLine.png')
plt.show()
</snippet></ROW><ROW><id>8507839</id><snippet>setUpClass()</snippet></ROW><ROW><id>8507839</id><snippet>tearDownClass()</snippet></ROW><ROW><id>8507839</id><snippet>createExpensiveConnectionObject()</snippet></ROW><ROW><id>8507950</id><snippet>from pyparsing import *

survey = '''GPS,PN1,LA52.125133215643,LN21.031048525561,EL116.898812'''

number = Word(nums+'.').setParseAction(lambda t: float(t[0]))
separator = Suppress(',')
latitude = Suppress('LA') + number
longitude = Suppress('LN') + number
elevation = Suppress('EL') + number

line = (Suppress('GPS,PN1,')
        + latitude
        + separator
        + longitude
        + separator
        + elevation)

print line.parseString(survey)
</snippet></ROW><ROW><id>8507950</id><snippet>[52.125133215643, 21.031048525561, 116.898812]
</snippet></ROW><ROW><id>8507950</id><snippet>from lepl import *

survey = '''GPS,PN1,LA52.125133215643,LN21.031048525561,EL116.898812'''

number = Real() &gt;&gt; float

with Separator(~Literal(',')):
    latitude = ~Literal('LA') + number
    longitude = ~Literal('LN') + number
    elevation = ~Literal('EL') + number

    line = (~Literal('GPS')
             &amp; ~Literal('PN1')
             &amp; latitude
             &amp; longitude
             &amp; elevation)

print line.parse(survey)
</snippet></ROW><ROW><id>8508055</id><snippet>INSERT INTO names (firstname, lastname, age) VALUES (:first,:last,:age)</snippet></ROW><ROW><id>8508055</id><snippet>INSERT</snippet></ROW><ROW><id>8508666</id><snippet>examples/callback/client.py</snippet></ROW><ROW><id>8508666</id><snippet># We need to set either a socket communication timeout,
# or use the select based server. Otherwise the daemon requestLoop
# will block indefinitely and is never able to evaluate the loopCondition.
Pyro4.config.COMMTIMEOUT=0.5
</snippet></ROW><ROW><id>8508666</id><snippet>COMMTIMEOUT</snippet></ROW><ROW><id>8508666</id><snippet>print</snippet></ROW><ROW><id>8508666</id><snippet>still_running</snippet></ROW><ROW><id>8508666</id><snippet>running</snippet></ROW><ROW><id>8508666</id><snippet>False</snippet></ROW><ROW><id>8508785</id><snippet>request</snippet></ROW><ROW><id>8508785</id><snippet>is_ajax</snippet></ROW><ROW><id>8508943</id><snippet>tornado</snippet></ROW><ROW><id>8508943</id><snippet>pycurl</snippet></ROW><ROW><id>8508943</id><snippet>tornado</snippet></ROW><ROW><id>8508943</id><snippet>pycurl</snippet></ROW><ROW><id>8508943</id><snippet>CurlAsyncHTTPClient</snippet></ROW><ROW><id>8508943</id><snippet>curl</snippet></ROW><ROW><id>8508943</id><snippet>tornado</snippet></ROW><ROW><id>8508963</id><snippet>value*</snippet></ROW><ROW><id>8508963</id><snippet>value7</snippet></ROW><ROW><id>8508963</id><snippet>value8</snippet></ROW><ROW><id>8508963</id><snippet>mask0 = 0x07
mask1 = 0x40
mask2 = 0x80
</snippet></ROW><ROW><id>8508963</id><snippet>def parse_byte(byte):
    return byte &amp; mask2, byte &amp; mask1, byte &amp; mask0
</snippet></ROW><ROW><id>8508963</id><snippet>bool</snippet></ROW><ROW><id>8508963</id><snippet>if</snippet></ROW><ROW><id>8508963</id><snippet>bool</snippet></ROW><ROW><id>8508963</id><snippet>format(value,'b').zfill(8)
</snippet></ROW><ROW><id>8508963</id><snippet>format(value,'08b')
</snippet></ROW><ROW><id>8508982</id><snippet>os.sep</snippet></ROW><ROW><id>8508982</id><snippet>[]</snippet></ROW><ROW><id>8508982</id><snippet>if [ file for file in filenames if file.endswith('.EXT') ]:</snippet></ROW><ROW><id>8508982</id><snippet>def buildTree(self, rootdir):
    rootId = self.CalcTree.AddRoot(root)

    self.buildTreeRecursion(rootdir, rootId)

def buildTreeRecursion(self, dir, parentId)
    # Iterate over the files in dir
    for file in dirFiles: 
        id = self.CalcTree.AppendItem(parentId, file) 

        if file is a directory:
            self.buildTreeRecursion(file, id)
</snippet></ROW><ROW><id>8509560</id><snippet>&lt;title&gt;{{host}}&lt;/title&gt;
&lt;link href="http://{{host}}" rel="self"/&gt;
&lt;id&gt;http://{{host}}/&lt;/id&gt;
&lt;updated&gt;2011-09-17T08:14:49.875423Z&lt;/updated&gt;
&lt;generator uri="http://{{host}}/"&gt;{{host}}&lt;/generator&gt;

{% for entity in entities %}

&lt;entry&gt;

&lt;title&gt;&lt;![CDATA[{{entity.title}}]]&gt;&lt;/title&gt;
&lt;link href="http://{{host}}/vi/{{entity.key.id}}"/&gt;
&lt;id&gt;http://{{host}}/vi/{{entity.key.id}}&lt;/id&gt;
&lt;updated&gt;{{entity.modified.isoformat}}Z&lt;/updated&gt;
&lt;author&gt;&lt;name&gt;{{entity.title|escape}}&lt;/name&gt;&lt;/author&gt;
&lt;georss:point&gt;{{entity.geopt.lon|floatformat:2}},{{entity.geopt.lat|floatformat:2}}&lt;/georss:point&gt;
&lt;published&gt;{{entity.added}}&lt;/published&gt;
&lt;summary type="xhtml"&gt;&lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;{{entity.text|escape}}&lt;/div&gt;
&lt;/summary&gt;

&lt;/entry&gt;

{% endfor %}

&lt;/feed&gt;
</snippet></ROW><ROW><id>8509560</id><snippet>class GeoRSS(webapp2.RequestHandler):

    def get(self):
        start = datetime.datetime.now() - timedelta(days=60)
        count = (int(self.request.get('count'
                 )) if not self.request.get('count') == '' else 1000)
        try:
            entities = memcache.get('entities')
        except KeyError:
            entity = Entity.all().filter('modified &gt;',
                                  start).filter('published =',
                    True).order('-modified').fetch(count)
        memcache.set('entities', entities)
        template_values = {'entities': entities, 'request': self.request,
                           'host': os.environ.get('HTTP_HOST',
                           os.environ['SERVER_NAME'])}
        dispatch = 'templates/georss.html'
        path = os.path.join(os.path.dirname(__file__), dispatch)
        output = template.render(path, template_values)
        self.response.headers['Cache-Control'] = 'public,max-age=%s' \
            % 86400
        self.response.headers['Content-Type'] = 'application/rss+xml'
        self.response.out.write(output)
</snippet></ROW><ROW><id>8509707</id><snippet>def __init__(self, **kwargs):
    self.features = kwargs

def getFeatures(self):
    return {feature for feature, isEnabled in self.features.items() if isEnabled}
</snippet></ROW><ROW><id>8509707</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, **kwargs):
...             self.features = kwargs
...     
...     def getFeatures(self):
...             return {feature for feature, isEnabled in self.features.items() if isEnabled}
... 
&gt;&gt;&gt; x = Foo(red=True, yellow=False, green=True)
&gt;&gt;&gt; x.getFeatures()
set(['green', 'red'])
</snippet></ROW><ROW><id>8509967</id><snippet>A.clsMeth()</snippet></ROW><ROW><id>8509967</id><snippet>A</snippet></ROW><ROW><id>8509967</id><snippet>A</snippet></ROW><ROW><id>8509967</id><snippet>&gt;&gt;&gt; class A(object):
...     clsVar = 'a'
...     @classmethod
...     def clsMeth(cls):
...         print 'changing clsVar'
...         cls.clsVar = 'b'
...     A.clsMeth()
... 
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
   File "&lt;stdin&gt;", line 7, in A
NameError: name 'A' is not defined
</snippet></ROW><ROW><id>8509967</id><snippet>A</snippet></ROW><ROW><id>8509967</id><snippet>A.clsMeth</snippet></ROW><ROW><id>8509967</id><snippet>&gt;&gt;&gt; class A(object):
...     clsVar = 'a'
...     @classmethod
...     def clsMeth(cls):
...         print 'changing clsVar'
...         cls.clsVar = 'b'
...
&gt;&gt;&gt; A.clsMeth()
changing clsVar
&gt;&gt;&gt; A.clsVar
'b'
</snippet></ROW><ROW><id>8509995</id><snippet>request = urllib2.Request(your_url)
request.add_header('Accept-Encoding',whatever_in_this_case)
opener = urllib2.build_opener()
print opener.open(request).read()
</snippet></ROW><ROW><id>8510228</id><snippet>argument_list = [] #keep this blank, just decalring it for later
fields = ('title') #any fields in your model you'd like to search against
query_string = 'Foo Bar' #search terms, you'll probably populate this from some source

for query in query_string.split(' '):  #breaks query_string into 'Foo' and 'Bar'
    for field in fields:
        argument_list.append( Q(**{field+'__icontains':query_object} ) ) 

query = Entry.objects.filter( reduce(operator.or_, argument_list) )

# --UPDATE-- here's an args example for completeness

order = ['publish_date','title'] #create a list, possibly from GET or POST data
ordered_query = query.order_by(*orders()) # Yay, you're ordered now!
</snippet></ROW><ROW><id>8510228</id><snippet>query_string</snippet></ROW><ROW><id>8510228</id><snippet>fields</snippet></ROW><ROW><id>8510493</id><snippet>class ProxyCall(object):
   '''Class implementing the dispatch for a certain method call'''
   def __init__(self, proxy, methodname):
      self.proxy = proxy
      self.methodname = methodname

   def __call__(self, *p, **kw):
      if p[0] == "EU": # or however you determine the destination
         return getattr(self.proxy.EU, self.methodname)(*p, **kw);
      else:
         return getattr(self.proxy.OTHER, self.methodname)(*p, **kw);


class Proxy(object):
   '''Class managing the different "equivalent" instances'''
   def __init__(self, EU, OTHER):
      self.EU = EU
      self.OTHER = OTHER

   def __getattr__(self, name):
      if not hasattr(self.EU, name):
         # no such method
         raise AttributeError()
      else:
         # return object that supports __call__ and will make the dispatch
         return ProxyCall(self, name)
</snippet></ROW><ROW><id>8510493</id><snippet>eu = make_instance(...)
other = make_instance(...)
p = Proxy(eu, other)
p.somemethod(foo) 
</snippet></ROW><ROW><id>8511132</id><snippet>BUILD_NEW_PYTHON_SUPPORT</snippet></ROW><ROW><id>8511132</id><snippet>cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_NEW_PYTHON_SUPPORT=ON -D BUILD_EXAMPLES=ON ..
</snippet></ROW><ROW><id>8511132</id><snippet>sudo apt-get install cmake-qt-gui
</snippet></ROW><ROW><id>8511389</id><snippet>&gt;&gt;&gt; tree.findall('*/*')
[&lt;Element '{http://www.example.com/dir/}UniqueID' at 0x10899e450&gt;]
</snippet></ROW><ROW><id>8511389</id><snippet>tree.find()</snippet></ROW><ROW><id>8511389</id><snippet>&gt;&gt;&gt; unique_id_elmt = tree.find('*/*')  # First (and only) element two levels below the root
&gt;&gt;&gt; unique_id_elmt
&lt;Element '{http://www.example.com/dir/}UniqueID' at 0x105ec9450&gt;
&gt;&gt;&gt; unique_id_elmt.text  # Text contained in UniqueID
'abcdefghijklmnopqrstuvwxyz0123456789'
</snippet></ROW><ROW><id>8511389</id><snippet>&gt;&gt;&gt; tree.find('{{{0}}}Item/{{{0}}}UniqueID'.format(NS))  # Tags are prefixed with NS
&lt;Element '{http://www.example.com/dir/}UniqueID' at 0x10899ead0&gt;
</snippet></ROW><ROW><id>8511389</id><snippet>NS</snippet></ROW><ROW><id>8512049</id><snippet>datetime.datetime</snippet></ROW><ROW><id>8512049</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>8512049</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>8512049</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>8512118</id><snippet>value</snippet></ROW><ROW><id>8512118</id><snippet>None</snippet></ROW><ROW><id>8512118</id><snippet>def add_path(parent, path, value=None):
    end = len(path) - 1
    for index, component in enumerate(path):
        if index &lt; end or value is None:
            parent = parent.setdefault(component, {})
        else:
            parent[component] = value
</snippet></ROW><ROW><id>8512329</id><snippet>for name in (data['name'],) if data['name'] else ():
    print name
</snippet></ROW><ROW><id>8513090</id><snippet>MyKind.get_by_key_name(key_names)</snippet></ROW><ROW><id>8513221</id><snippet>self.connect((host, port))</snippet></ROW><ROW><id>8513221</id><snippet>reactor.connectTCP</snippet></ROW><ROW><id>8513279</id><snippet>urlopen</snippet></ROW><ROW><id>8513279</id><snippet>import urllib2

url_response = urllib2.urlopen('http://myip:myport/?CreateOrder=Create+New+Order')
</snippet></ROW><ROW><id>8513384</id><snippet>django.views.defaults.page_not_found</snippet></ROW><ROW><id>8513419</id><snippet>eval()</snippet></ROW><ROW><id>8513419</id><snippet>a = 1</snippet></ROW><ROW><id>8513419</id><snippet>exec()</snippet></ROW><ROW><id>8513419</id><snippet>&gt;&gt;&gt; exec("externalProviderURL=\"tibjmsnaming://...\"")
&gt;&gt;&gt; externalProviderURL
'tibjmsnaming://...'
</snippet></ROW><ROW><id>8513419</id><snippet>eval()</snippet></ROW><ROW><id>8513419</id><snippet>externalProviderURL=eval("\"tibjmsnaming://...\"")</snippet></ROW><ROW><id>8513419</id><snippet>exec</snippet></ROW><ROW><id>8513507</id><snippet>"None"</snippet></ROW><ROW><id>8513507</id><snippet>None</snippet></ROW><ROW><id>8513841</id><snippet>python --version
apt-cache showpkg python-gudev
</snippet></ROW><ROW><id>8513841</id><snippet>update-alternative --list python
</snippet></ROW><ROW><id>8514381</id><snippet>version 0.2</snippet></ROW><ROW><id>8514381</id><snippet>version 0.3.dev1</snippet></ROW><ROW><id>8514381</id><snippet>pip install -U phileo</snippet></ROW><ROW><id>8514381</id><snippet>python setup.py install</snippet></ROW><ROW><id>8514410</id><snippet>multiprocessing</snippet></ROW><ROW><id>8514410</id><snippet>import urllib
import multiprocessing
import time

def download_images():
    image = urllib.URLopener()
    file_ = 1
    name = 1
    for i in range(1,1000):
        try:
            image.retrieve("http://mangawriter.com/pics/pic"+str(file_)+".jpeg","pic"+str(name)+".jpeg")
            print "save file %s" %file_ 
            name += 1
            file_ += 1
        except IOError:
            file_ += 1
</snippet></ROW><ROW><id>8514410</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>8514410</id><snippet>downloader = multiprocessing.Process(target=download_images)
</snippet></ROW><ROW><id>8514410</id><snippet>start()</snippet></ROW><ROW><id>8514410</id><snippet>downloader.start()
</snippet></ROW><ROW><id>8514410</id><snippet>timeout = 15
time.sleep(timeout)
</snippet></ROW><ROW><id>8514410</id><snippet>downloader.terminate()
</snippet></ROW><ROW><id>8514465</id><snippet>__eq__</snippet></ROW><ROW><id>8514465</id><snippet>==</snippet></ROW><ROW><id>8514465</id><snippet>__ne__</snippet></ROW><ROW><id>8514465</id><snippet>!=</snippet></ROW><ROW><id>8514465</id><snippet>__ne__</snippet></ROW><ROW><id>8514465</id><snippet>__eq__</snippet></ROW><ROW><id>8514465</id><snippet>class Junk(object):
    def __ne__(self, other):
        return False

    def __eq__(self, other):
        return False

j = Junk()
print not j == 1
print j != 1
</snippet></ROW><ROW><id>8514465</id><snippet>True
False
</snippet></ROW><ROW><id>8514530</id><snippet>setup.py</snippet></ROW><ROW><id>8514530</id><snippet>/path/to/my_program.py</snippet></ROW><ROW><id>8514530</id><snippet>PATH</snippet></ROW><ROW><id>8514530</id><snippet>chmod +x ...</snippet></ROW><ROW><id>8514530</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>8514530</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>8514530</id><snippet>/path/to</snippet></ROW><ROW><id>8514530</id><snippet>/path/to/my_program.py</snippet></ROW><ROW><id>8514530</id><snippet>chmod +x</snippet></ROW><ROW><id>8514530</id><snippet>bash</snippet></ROW><ROW><id>8514530</id><snippet>csh</snippet></ROW><ROW><id>8514530</id><snippet>python</snippet></ROW><ROW><id>8514530</id><snippet>perl</snippet></ROW><ROW><id>8514530</id><snippet>./data/this_file.dat</snippet></ROW><ROW><id>8514530</id><snippet>/usr/local/share</snippet></ROW><ROW><id>8514530</id><snippet>MYAPP_HOME</snippet></ROW><ROW><id>8514530</id><snippet>os.path.join( os.environ['MYAPP_HOME'], 'data', 'this_file.dat' )</snippet></ROW><ROW><id>8514530</id><snippet>__file__</snippet></ROW><ROW><id>8514530</id><snippet>os.path</snippet></ROW><ROW><id>8514530</id><snippet>os.path.join( this_directory, 'data', 'this_file.dat' )</snippet></ROW><ROW><id>8514575</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>8514575</id><snippet>write_output_csv</snippet></ROW><ROW><id>8514575</id><snippet>parse_input_csv</snippet></ROW><ROW><id>8514575</id><snippet>self</snippet></ROW><ROW><id>8514659</id><snippet>RewriteCond %(REQUEST_URI) ^media
RewriteCond %{REQUEST_FILENAME} !-f 
RewriteRule #Some rewrite rule to redirect from '/media/filename' to '/image_generator/filename'
</snippet></ROW><ROW><id>8514861</id><snippet>event.xdata</snippet></ROW><ROW><id>8514861</id><snippet>event.ydata</snippet></ROW><ROW><id>8514861</id><snippet>r_</snippet></ROW><ROW><id>8514861</id><snippet>c_</snippet></ROW><ROW><id>8514861</id><snippet>&gt;&gt;&gt;np.r_[0:3:0.1]
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])

&gt;&gt;&gt;np.c_[-1:1:9j]
array([[-1.  ],
       [-0.75],
       [-0.5 ],
       [-0.25],
       [ 0.  ],
       [ 0.25],
       [ 0.5 ],
       [ 0.75],
       [ 1.  ]])
</snippet></ROW><ROW><id>8515668</id><snippet>import random

class PlayerAttributes(object):

    def __init__(self):
        self.health      = 0
        self.mana        = 0
        self.stamina     = 0
        self.capacity    = 0
        self.defense     = 0
        self.reset_attributes()

    def level_up(self):
        self.level_health()
        self.level_mana()
        #etc

    def reset_attributes(self):
        self.reset_health()
        self.reset_mana()
        self.reset_stamina()
        self.reset_capacity()
        self.reset_defense()

    def get_health(self):
        return self.health

    def reset_health(self):
        self.health = base_health

    def level_health(self):
        self.health += (self.endurance/2) + (self.strength/2)


class Equipment(object):

    def __init__(self):
        self.equipment_dict     = {}
        self.currently_equipped = None

    def set_equipped_weapon(self,weapon_name)
        self.currently_equipped = weapon_name

    def add_item(self,item):
        self.equipment_dict[item.name] = item

class Item(object):

    def __init__(self,name,hp,attack,defense,weight):
        pass #put stuff in here, etc


class Player(object):

    def __init__(self):
        self.attributes = PlayerAttributes()
        self.backpack   = Equipment()
        self.backpack.add_item(Item("dagger",5,10,0,2))

    def level_up(self):
        self.attributes.level_up()
</snippet></ROW><ROW><id>8515740</id><snippet>min</snippet></ROW><ROW><id>8515740</id><snippet>min(lst, key=func)</snippet></ROW><ROW><id>8515740</id><snippet>f</snippet></ROW><ROW><id>8515740</id><snippet>retval = lst[0]
for item in lst:
  if func(item) &lt; func(retval):
     retval = item
return retval
</snippet></ROW><ROW><id>8515740</id><snippet>v</snippet></ROW><ROW><id>8515740</id><snippet>updated_unique_list</snippet></ROW><ROW><id>8515740</id><snippet>len(set(u) ^ set(v))</snippet></ROW><ROW><id>8515740</id><snippet>^</snippet></ROW><ROW><id>8515740</id><snippet>set(u) ^ set(v)</snippet></ROW><ROW><id>8515740</id><snippet>u</snippet></ROW><ROW><id>8515740</id><snippet>v</snippet></ROW><ROW><id>8515740</id><snippet>u</snippet></ROW><ROW><id>8515740</id><snippet>v</snippet></ROW><ROW><id>8515740</id><snippet>updated_unique_list</snippet></ROW><ROW><id>8515740</id><snippet>u</snippet></ROW><ROW><id>8515740</id><snippet>min</snippet></ROW><ROW><id>8515819</id><snippet>  JSONObject obj=new JSONObject();
  obj.put("name","foo");
  obj.put("num",new Integer(100));
  obj.put("balance",new Double(1000.21));
  obj.put("is_vip",new Boolean(true));
  obj.put("nickname",null);
  System.out.print(obj);


Result: {"balance":1000.21,"num":100,"nickname":null,"is_vip":true,"name":"foo"} 
</snippet></ROW><ROW><id>8515956</id><snippet>b</snippet></ROW><ROW><id>8515956</id><snippet>ASCII</snippet></ROW><ROW><id>8515956</id><snippet>myBytesObject.decode('ASCII')
</snippet></ROW><ROW><id>8516020</id><snippet>lxml</snippet></ROW><ROW><id>8516020</id><snippet>xpath</snippet></ROW><ROW><id>8516020</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>8516020</id><snippet>from urllib2 import urlopen
from BeautifulSoup import BeautifulSoup

url = 'http://www.uscho.com/rankings/d-i-mens-poll/'
soup = BeautifulSoup(urlopen(url).read())

section = soup.find('section', id='rankings')
h1 = section.find('h1')
print h1.text
h3 = section.find('h3')
print h3.text
print

rows = section.find('table').findAll('tr')[1:-1]
for row in rows:
    columns = [data.text for data in row.findAll('td')[1:]]
    print '{0:20} {1:4} {2:&gt;6} {3:&gt;4}'.format(*columns)
</snippet></ROW><ROW><id>8516020</id><snippet>USCHO.com Division I Men's Poll
December 12, 2011

Minnesota-Duluth     (49) 12-3-3  999
Minnesota                 14-5-1  901
Boston College            12-6-0  875
Ohio State           ( 1) 13-4-1  848
Merrimack                 10-2-2  844
Notre Dame                11-6-3  667
Colorado College           9-5-0  650
Western Michigan           9-4-5  647
Boston University         10-5-1  581
Ferris State              11-6-1  521
Union                      8-3-5  510
Colgate                   11-4-2  495
Cornell                    7-3-1  347
Denver                     7-6-3  329
Michigan State            10-6-2  306
Lake Superior             11-7-2  258
Massachusetts-Lowell      10-5-0  251
North Dakota               9-8-1   88
Yale                       6-5-1   69
Michigan                   9-8-3   62
</snippet></ROW><ROW><id>8516155</id><snippet>etx = lxml.etree.parse('test.html')
print lxml.etree.tostring(etx, xml_declaration=True, encoding=etx.docinfo.encoding, standalone=etx.docinfo.standalone)
</snippet></ROW><ROW><id>8516155</id><snippet>test.html</snippet></ROW><ROW><id>8516155</id><snippet>&lt;? ... &gt;</snippet></ROW><ROW><id>8516155</id><snippet>&lt;? ... ?&gt;</snippet></ROW><ROW><id>8516155</id><snippet>xml version="1.0" encoding="UTF-8" standalone="no"?</snippet></ROW><ROW><id>8516155</id><snippet>??&gt;</snippet></ROW><ROW><id>8516155</id><snippet>html5lib</snippet></ROW><ROW><id>8516155</id><snippet>lxml.etree</snippet></ROW><ROW><id>8516155</id><snippet>lxml.html.tostring()</snippet></ROW><ROW><id>8516155</id><snippet>lxml.html.etree.tostring()</snippet></ROW><ROW><id>8516155</id><snippet>tostring()</snippet></ROW><ROW><id>8516155</id><snippet>docinfo</snippet></ROW><ROW><id>8516205</id><snippet>dict2</snippet></ROW><ROW><id>8516205</id><snippet>dict1.items()</snippet></ROW><ROW><id>8516205</id><snippet>a</snippet></ROW><ROW><id>8516205</id><snippet>b</snippet></ROW><ROW><id>8516205</id><snippet>0</snippet></ROW><ROW><id>8516205</id><snippet>dict2 = {}
for k,v in dict1.items():
  for x in v:
    dict2[x] = k
</snippet></ROW><ROW><id>8516205</id><snippet>dict2</snippet></ROW><ROW><id>8516205</id><snippet>{1: 'a', 2: 'a', 3: 'a', 4: 'b', 5: 'b', 6: 'b'}</snippet></ROW><ROW><id>8516205</id><snippet>dict1</snippet></ROW><ROW><id>8516205</id><snippet>{x: k for (k,v) in dict1.items() for x in v}</snippet></ROW><ROW><id>8516505</id><snippet>bsddb.hashopen</snippet></ROW><ROW><id>8516687</id><snippet>^[abc]{3}(,[abc]{3})*$
</snippet></ROW><ROW><id>8516687</id><snippet>^...$</snippet></ROW><ROW><id>8516687</id><snippet>[...]</snippet></ROW><ROW><id>8516687</id><snippet>...{3}</snippet></ROW><ROW><id>8516687</id><snippet>(...)*</snippet></ROW><ROW><id>8516708</id><snippet>reader</snippet></ROW><ROW><id>8516708</id><snippet>stat_by_symbol = {}
with open('zzdata.csv', 'rb') as f:
    reader = csv.reader(f)
    reader.next()
    for row in reader:
        for symbol in symbols:#symbols in a list
            if symbol in row:
                stat_by_symbol.setdefault(symbol, []).append(row[8])
</snippet></ROW><ROW><id>8517110</id><snippet>def f(source, lst):
    return "".join(source[start - 1:end] for start, end in lst)
</snippet></ROW><ROW><id>8517110</id><snippet>lst</snippet></ROW><ROW><id>8517110</id><snippet>start</snippet></ROW><ROW><id>8517110</id><snippet>end</snippet></ROW><ROW><id>8517110</id><snippet>source</snippet></ROW><ROW><id>8517110</id><snippet>start - 1</snippet></ROW><ROW><id>8517110</id><snippet>end</snippet></ROW><ROW><id>8517110</id><snippet>start - 1</snippet></ROW><ROW><id>8517110</id><snippet>"".join()</snippet></ROW><ROW><id>8517110</id><snippet>def f(source, lst):
    return "".join([source[start - 1:end] for start, end in lst])
</snippet></ROW><ROW><id>8518147</id><snippet>(M**k) mod p = ([M mod p]**k) mod p,
</snippet></ROW><ROW><id>8518147</id><snippet>M</snippet></ROW><ROW><id>8518147</id><snippet>x</snippet></ROW><ROW><id>8518147</id><snippet>y</snippet></ROW><ROW><id>8518147</id><snippet>(x+y) mod p = ([x mod p]+[y mod p]) mod p  # All additions can be done on numbers *modulo p*
(x*y) mod p = ([x mod p]*[y mod p]) mod p  # All multiplications can be done on numbers *modulo p*
</snippet></ROW><ROW><id>8518147</id><snippet>((arr % p)**k) % p
</snippet></ROW><ROW><id>8518147</id><snippet>(arr**k) mod p</snippet></ROW><ROW><id>8518147</id><snippet>[n mod p]**k</snippet></ROW><ROW><id>8518147</id><snippet>n mod p</snippet></ROW><ROW><id>8518147</id><snippet>(n**[a+b]) mod p = ([{n mod p}**a mod p] * [{n mod p}**b mod p]) mod p
</snippet></ROW><ROW><id>8518147</id><snippet>(n**[a*b]) mod p = ([n mod p]**a mod p)**b mod p.
</snippet></ROW><ROW><id>8518147</id><snippet>k</snippet></ROW><ROW><id>8518147</id><snippet>a+b+…</snippet></ROW><ROW><id>8518147</id><snippet>a*b*…</snippet></ROW><ROW><id>8518414</id><snippet>import gtk
import pygtk
</snippet></ROW><ROW><id>8518513</id><snippet>tk.Tk()</snippet></ROW><ROW><id>8518513</id><snippet>tk.StringVar()</snippet></ROW><ROW><id>8518513</id><snippet>import Tkinter as tk

root=tk.Tk()    
tk.StringVar()
</snippet></ROW><ROW><id>8518567</id><snippet>comment</snippet></ROW><ROW><id>8518567</id><snippet>comment</snippet></ROW><ROW><id>8518567</id><snippet>getAtt</snippet></ROW><ROW><id>8518567</id><snippet>__getattr__</snippet></ROW><ROW><id>8518567</id><snippet>mid = self.id</snippet></ROW><ROW><id>8518567</id><snippet>comment</snippet></ROW><ROW><id>8518567</id><snippet>self.obj</snippet></ROW><ROW><id>8518567</id><snippet>comment</snippet></ROW><ROW><id>8518567</id><snippet>c = attrgetter(comment)
mid = c.id
⋮
</snippet></ROW><ROW><id>8518567</id><snippet>c = attrgetter(comment)
print "mentions---"+ str(c.mid) +":"+ c.text
</snippet></ROW><ROW><id>8518752</id><snippet>&gt;&gt;&gt; from xml.dom.minidom import parseString
&gt;&gt;&gt; x = parseString('&lt;abc&gt;foo&lt;/abc&gt;')
&gt;&gt;&gt; x.getElementsByTagName('abc')[0].firstChild.nodeValue
u'foo'
</snippet></ROW><ROW><id>8518936</id><snippet>if not type_converter_fn:
    type_converter_fn = the_type
</snippet></ROW><ROW><id>8518936</id><snippet>type_converter_fn</snippet></ROW><ROW><id>8518936</id><snippet>wrapped()</snippet></ROW><ROW><id>8518936</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>8519025</id><snippet>convert</snippet></ROW><ROW><id>8519025</id><snippet>Image.open('input.png').convert('LA').save('output.png')
</snippet></ROW><ROW><id>8519646</id><snippet>dict.items()</snippet></ROW><ROW><id>8519646</id><snippet>'&lt;br/&gt;'.join(['%s:: %s' % (key, value) for (key, value) in d.items()])
</snippet></ROW><ROW><id>8519683</id><snippet>if variable and variable.upper() == "X":
    #Do something
</snippet></ROW><ROW><id>8519721</id><snippet>m = re.search("\d+", string)
print m.group(0)
</snippet></ROW><ROW><id>8520358</id><snippet>import csv
with open("/tmp/database.txt", 'r') as file:
  reader = csv.reader(file)
  third_where_pineapple = [line[2] for line in reader if line[0] == 'pineapple']
  print (third_where_pineapple)
</snippet></ROW><ROW><id>8520632</id><snippet>if all(x in tupla for x in list_of_x):
</snippet></ROW><ROW><id>8520632</id><snippet>if set(list_of_x).issubset(set(tupla)):
</snippet></ROW><ROW><id>8520632</id><snippet>x</snippet></ROW><ROW><id>8520632</id><snippet>tupla</snippet></ROW><ROW><id>8521644</id><snippet>--version</snippet></ROW><ROW><id>8521644</id><snippet>action='version'</snippet></ROW><ROW><id>8521644</id><snippet>action='store_true'</snippet></ROW><ROW><id>8521644</id><snippet>parser.add_argument('--version', action='version', version='%(prog)s 2.0')
</snippet></ROW><ROW><id>8522126</id><snippet>gzip</snippet></ROW><ROW><id>8522126</id><snippet>import gzip, subprocess, os
fifo_path = "path/to/fastload-fifo"
os.mkfifo(fifo_path)
fastload_fifo = open(fifo_path)
fastload = subprocess.Popen(["fastload", "--read-from", fifo_path],
                            stdin=subprocess.PIPE)
with gzip.open("/path/to/file/myfile.gz") as f:
    for i, line in enumerate(f):
         fastload_fifo.write(line)
    print "Number of lines", i + 1
os.unlink(fifo_path)
</snippet></ROW><ROW><id>8522470</id><snippet>celery.task.control.Inspect.stats()</snippet></ROW><ROW><id>8522470</id><snippet>IOError</snippet></ROW><ROW><id>8522470</id><snippet>def get_celery_worker_status():
    ERROR_KEY = "ERROR"
    try:
        from celery.task.control import inspect
        insp = inspect()
        d = insp.stats()
        if not d:
            d = { ERROR_KEY: 'No running Celery workers were found.' }
    except IOError as e:
        from errno import errorcode
        msg = "Error connecting to the backend: " + str(e)
        if len(e.args) &gt; 0 and errorcode.get(e.args[0]) == 'ECONNREFUSED':
            msg += ' Check that the RabbitMQ server is running.'
        d = { ERROR_KEY: msg }
    except ImportError as e:
        d = { ERROR_KEY: str(e)}
    return d
</snippet></ROW><ROW><id>8522534</id><snippet>#Context.sublime-menu
[
    { "command": "openserver", "caption": "Open on Server" }
]

#Default (Windows).sublime-keymap
[
        { "keys": ["ctrl+shift+b"], "command": "openserver" }
]

#Main.sublime-menu
[
    {
        "caption": "Tools",
        "mnemonic": "T",
        "id": "tools",
        "children":
        [
            { "command": "openserver", "caption": "Open on Server" }
        ]
    }
]

#Openserver.sublime-commands
[
    {
        "caption": "Open file on Server in Browser",
        "command": "openserver"
    }
]


#Openserver.sublime-settings
{
    "file_path_prefix": "E:/Server/htdocs",
    "url_prefix": "http://localhost"
}
</snippet></ROW><ROW><id>8522534</id><snippet>#openserver.py  

import sublime, sublime_plugin
import os
import webbrowser
import re
import os2emxpath
import logging
import sys

class OpenserverCommand(sublime_plugin.TextCommand):
   def run(self,edit):
    file_path = self.view.file_name()

    settings = sublime.load_settings('Openserver.sublime-settings')

    file = os2emxpath.normpath(file_path)

    url = re.sub(settings.get('file_path_prefix'), settings.get('url_prefix'), file)
    #logging.warning(url)

    #webbrowser.open_new(url)
    if sys.platform=='win32':
        os.startfile(url)
    elif sys.platform=='darwin':
        subprocess.Popen(['open', url])
    else:
        try:
            subprocess.Popen(['xdg-open', url])
        except OSError:
            logging.warning(url)
</snippet></ROW><ROW><id>8522803</id><snippet>&gt;&gt;&gt; import sys, os
&gt;&gt;&gt; _stderr = sys.stderr
&gt;&gt;&gt; _stdout = sys.stdout
&gt;&gt;&gt; null = open(os.devnull,'wb')
&gt;&gt;&gt; sys.stdout = sys.stderr = null
&gt;&gt;&gt; print "Bleh"
&gt;&gt;&gt; sys.stderr = _stderr
&gt;&gt;&gt; sys.stdout = _stdout
&gt;&gt;&gt; print "Bleh"
Bleh
</snippet></ROW><ROW><id>8522855</id><snippet>import webapp2
from webapp2_extras import i18n

AVAILABLE_LOCALES = ['en_GB', 'es_ES']

class BaseHandler(webapp2.RequestHandler):
    def __init__(self, request, response):
        """ Override the initialiser in order to set the language.
        """
        self.initialize(request, response)

        # first, try and set locale from cookie
        locale = request.cookies.get('locale')
        if locale in AVAILABLE_LOCALES:
            i18n.get_i18n().set_locale(locale)
        else:
            # if that failed, try and set locale from accept language header
            header = request.headers.get('Accept-Language', '')  # e.g. en-gb,en;q=0.8,es-es;q=0.5,eu;q=0.3
            locales = [locale.split(';')[0] for locale in header.split(',')]
            for locale in locales:
                if locale in AVAILABLE_LOCALES:
                    i18n.get_i18n().set_locale(locale)
                    break
            else:
                # if still no locale set, use the first available one
                i18n.get_i18n().set_locale(AVAILABLE_LOCALES[0])
</snippet></ROW><ROW><id>8522855</id><snippet>import base

class Index(base.BaseHandler):
    """ Set the language cookie (if locale is valid), then redirect back to referrer
    """
    def get(self, locale):
        if locale in self.available_locales:
            self.response.set_cookie('locale', locale, max_age = 15724800)  # 26 weeks' worth of seconds

        # redirect to referrer or root
        url = self.request.headers.get('Referer', '/')
        self.redirect(url)
</snippet></ROW><ROW><id>8522862</id><snippet>from operator import itemgetter
sorted(tuples, key=itemgetter(2,0))
</snippet></ROW><ROW><id>8523154</id><snippet>###########################################
# UUIDs
###########################################
reqUUID= uuid.uuid4()
attchmntUUID = uuid.uuid4()

##########################################
# MIME strings
##########################################
URN_UUID_REQUEST = "&lt;0.urn:uuid:%s&gt;"% reqUUID
URN_UUID_ATTACHMENT = "urn:uuid:%s" % attchmntUUID
MIME_BOUNDARY = "MIME_boundary"

request_dict = {
    'Size': size,
    'Data': payload,
    'fileFormat': 'gzip',
    'fileReferenceId': '50000945773',
    'taskReferenceId': '50000858033',
    'REQUUID': reqUUID,
    'ATTCHMNTUUID': attchmntUUID,
}


def build_request( request_dict):
    '''
    Build the request string with MIME Attachment
    '''

    request  = '&lt;uploadFileRequest xmlns:sct="http://www.ebay.com/soaframework/common/types" xmlns="http://www.ebay.com/marketplace/services"&gt;\r\n'
    request += '&lt;taskReferenceId&gt;%s&lt;/taskReferenceId&gt;\r\n' % request_dict['taskReferenceId']
    request += '&lt;fileReferenceId&gt;%s&lt;/fileReferenceId&gt;\r\n' % request_dict['fileReferenceId']
    request += '&lt;fileFormat&gt;%s&lt;/fileFormat&gt;\r\n' % request_dict['fileFormat']
    request += '&lt;fileAttachment&gt;\r\n'
    request += '&lt;Size&gt;%s&lt;/Size&gt;\r\n'% request_dict['Size']
    request += '&lt;Data&gt;&lt;xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:%s"/&gt;&lt;/Data&gt;\r\n'%URN_UUID_ATTACHMENT
    request += '&lt;/fileAttachment&gt;\r\n'
    request += '&lt;/uploadFileRequest&gt;\r\n'

    return request


def build_mime_message( request, data ):
    '''
    Build the xml string with MIME attachments and the base64 encoded data string
    '''

    request_part  = '\r\n'
    request_part += '--%s\r\n' % MIME_BOUNDARY
    request_part += 'Content-Type: application/xop+xml; charset=UTF-8; type="text/xml; charset=UTF-8"\r\n'
    request_part += 'Content-Transfer_Encoding: binary\r\n'
    request_part += 'Content-ID: %s\r\n\r\n' % URN_UUID_REQUEST
    request_part += '%s\r\n' % request


    binary_part  = '\r\n'
    binary_part += '--%s\r\n' % MIME_BOUNDARY
    binary_part += 'Content-Type: application/octet-stream\r\n'
    binary_part += 'Content-Transfer-Encoding: base64\r\n'
    binary_part += 'Content-ID: &lt;%s&gt;\r\n\r\n' % URN_UUID_ATTACHMENT
    binary_part += '%s\r\n' % data
    binary_part += '--%s--' % MIME_BOUNDARY

    return request_part + binary_part

request = build_request( request_dict )
request = build_mime_message( request, data )#data is base64 encoded gzip compressed xml file
</snippet></ROW><ROW><id>8523154</id><snippet>content_type_string  = 'multipart/related;'
content_type_string += ' boundary=%s;' % MIME_BOUNDARY
content_type_string += ' type="application/xop+xml";'
content_type_string += ' start="%s";' % URN_UUID_REQUEST
content_type_string += ' start-info="text/xml"'

headers = {
'X-EBAY-SOA-OPERATION-NAME': 'uploadFile',
'X-EBAY-SOA-SERVICE-NAME': 'FileTransferService',
'X-EBAY-SOA-SECURITY-TOKEN': #auth token,
'Content-Length': len( request ),
'Content-Type': content_type_string
}
</snippet></ROW><ROW><id>8523297</id><snippet>read_data.value == 55
</snippet></ROW><ROW><id>8523297</id><snippet>&gt;&gt;&gt; read_data == c_ulong(55L)
False
</snippet></ROW><ROW><id>8523563</id><snippet>subplot</snippet></ROW><ROW><id>8523563</id><snippet>import matplotlib.pyplot as plt

time = [1,2,3]
value = {}
value['x'] = [1,2,3]
value['y'] = [1,4,9]
value['z'] = [1,8,27]
for k, dimension in enumerate(['x', 'y', 'z']):
    plt.subplot(3, 1, k)
    plt.scatter(time, value[dimension])

plt.show()
</snippet></ROW><ROW><id>8523763</id><snippet>Pool</snippet></ROW><ROW><id>8523763</id><snippet>from itertools import repeat

def insert_and_process((file_to_process,db)):
    db = DAL("path_to_mysql" + db)
    #Table Definations
    db.table.insert(**parse_file(file_to_process))
    return True

if __name__=="__main__":
    file_list=os.listdir(".")
    P = Pool(processes=4)
    P.map(insert_and_process,zip(file_list,repeat(db))) 
</snippet></ROW><ROW><id>8523763</id><snippet>insert_and_process</snippet></ROW><ROW><id>8524143</id><snippet>  class MyImageModel(model.Model):
       # model fields go here..

       def get_url(self):
            try:
                 # or whatever causes the exception
                 return self.url
            except IOError:
                 return None
</snippet></ROW><ROW><id>8524143</id><snippet>{% thumbnail video.image_url "50x74" crop="center" as im %}

{% if im.get_url %}
    &lt;img src="{% cdn_images im.get_url %}" /&gt;
{% else %}
    &lt;img src="/media/img/noimage_thumb.png" alt="" /&gt;
{% endif %}

{% endthumbnail %}
</snippet></ROW><ROW><id>8524256</id><snippet>done = True</snippet></ROW><ROW><id>8524256</id><snippet>done = False

while not done:
    # your bunch of loops code here
    done = True
</snippet></ROW><ROW><id>8524256</id><snippet>while</snippet></ROW><ROW><id>8524256</id><snippet>for</snippet></ROW><ROW><id>8524256</id><snippet>while</snippet></ROW><ROW><id>8524354</id><snippet>self.browse()</snippet></ROW><ROW><id>8524354</id><snippet>obj</snippet></ROW><ROW><id>8524354</id><snippet>ma_luong</snippet></ROW><ROW><id>8524354</id><snippet>obj=…</snippet></ROW><ROW><id>8524354</id><snippet>values=…</snippet></ROW><ROW><id>8524354</id><snippet>print dir(obj)</snippet></ROW><ROW><id>8524712</id><snippet>my_formset.is_valid()</snippet></ROW><ROW><id>8524712</id><snippet>my_formset.save()</snippet></ROW><ROW><id>8524712</id><snippet>Ajax</snippet></ROW><ROW><id>8524712</id><snippet>onclick</snippet></ROW><ROW><id>8524712</id><snippet>ContRate</snippet></ROW><ROW><id>8524712</id><snippet>pk</snippet></ROW><ROW><id>8524712</id><snippet>rate</snippet></ROW><ROW><id>8524712</id><snippet>ContRateForm</snippet></ROW><ROW><id>8524712</id><snippet>modelformset_factory</snippet></ROW><ROW><id>8524712</id><snippet>ModelForm</snippet></ROW><ROW><id>8524712</id><snippet>json</snippet></ROW><ROW><id>8524726</id><snippet>ship_rate = decimal(0.12)
</snippet></ROW><ROW><id>8524726</id><snippet>ship_rate = decimal.Decimal(0.12)
</snippet></ROW><ROW><id>8524726</id><snippet>decimal</snippet></ROW><ROW><id>8524814</id><snippet>numpy.insert(a, b-numpy.arange(len(b)), numpy.nan)
</snippet></ROW><ROW><id>8524814</id><snippet>ipython</snippet></ROW><ROW><id>8524814</id><snippet>In [87]: import numpy

In [88]: z = numpy.array([1., 1., 0., 0., 0., 2., 3., 4., 5., 6., 0., 7., 8., 9.])

In [89]: a = z[z!=0]

In [90]: b = numpy.argwhere(z == 0).flatten()

In [91]: c = numpy.insert(a, b, numpy.nan)

In [92]: numpy.insert(a, b - numpy.arange(len(b)), numpy.nan)
Out[92]: 
array([  1.,   1.,  NaN,  NaN,  NaN,   2.,   3.,   4.,   5.,   6.,  NaN,
         7.,   8.,   9.])
</snippet></ROW><ROW><id>8524814</id><snippet>NaNs</snippet></ROW><ROW><id>8524814</id><snippet>z</snippet></ROW><ROW><id>8526165</id><snippet>forEach(value.parseHtml().select("dc|identifier"),v,v.htmlText()).join(",")
</snippet></ROW><ROW><id>8526208</id><snippet>Song</snippet></ROW><ROW><id>8526208</id><snippet>UserLibrary</snippet></ROW><ROW><id>8526838</id><snippet>columns = soup.findAll('td')
for col in columns:
    try:
        part = col.find("font", {"color": "#7b1010"}).contents[0]
        print(part)
    except:
        pass
</snippet></ROW><ROW><id>8527108</id><snippet>% uname -a
Darwin fatty-i7.local.tld 11.2.0 Darwin Kernel Version 11.2.0: Tue Aug  9 20:54:00 PDT 2011; root:xnu-1699.24.8~1/RELEASE_X86_64 x86_64
% java -version
java version "1.6.0_29"
Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527)
Java HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)
</snippet></ROW><ROW><id>8527108</id><snippet>/Developer/SDKs/MacOSX10.7.sdk/System/Library/Frameworks/JavaVM.framework/
</snippet></ROW><ROW><id>8527108</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>8527242</id><snippet>def insert(self,cr,uid,ids,context={}):
                obj=self.browse(cr,uid,ids,context=context)
                values={'ma_luong':obj.name.id,
</snippet></ROW><ROW><id>8527242</id><snippet>orm.browse()</snippet></ROW><ROW><id>8527242</id><snippet>for luong in self.browse(cr,uid,ids,context=context):
    print luong.name
</snippet></ROW><ROW><id>8527242</id><snippet>luongs = self.browse(cr,uid,ids,context=context)
luong = luongs[0]
print luong.name
</snippet></ROW><ROW><id>8527274</id><snippet>MyVar</snippet></ROW><ROW><id>8527274</id><snippet>MyVar = 5
def ChangeMyVar(value):
    global MyVar
    MyVar = value
d['MyVar'] = ChangeMyVar

# later..
d['MyVar'](10)
</snippet></ROW><ROW><id>8527274</id><snippet>class WrappedVar(object):
    def __init__(self, val):
        self.value = val

MyVar = WrappedVar(5)
d['MyVar'] = MyVar

# later..
d['MyVar'].value = 10
</snippet></ROW><ROW><id>8527280</id><snippet>currentdir
    /tempFolder
        hello.py
</snippet></ROW><ROW><id>8527280</id><snippet>__init__.py</snippet></ROW><ROW><id>8527280</id><snippet>currentdir
    /tempFolder
        __init__.py
        hello.py
</snippet></ROW><ROW><id>8527280</id><snippet>__init__.py</snippet></ROW><ROW><id>8527420</id><snippet>__str__</snippet></ROW><ROW><id>8527420</id><snippet>__repr__</snippet></ROW><ROW><id>8527629</id><snippet>argparse.Action</snippet></ROW><ROW><id>8527629</id><snippet>import argparse

parser = argparse.ArgumentParser()

class DefaultListAction(argparse.Action):
    CHOICES = ['clear','copy','dump','lock']
    def __call__(self, parser, namespace, values, option_string=None):
        if values:
            for value in values:
                if value not in self.CHOICES:
                    message = ("invalid choice: {0!r} (choose from {1})"
                               .format(value,
                                       ', '.join([repr(action)
                                                  for action in self.CHOICES])))

                    raise argparse.ArgumentError(self, message)
            setattr(namespace, self.dest, values)

parser.add_argument('actions', nargs='*', action=DefaultListAction,
                    default = ['dump', 'clear'],
                    metavar='ACTION')

print parser.parse_args([])
print parser.parse_args(['lock'])
</snippet></ROW><ROW><id>8527629</id><snippet>$ python test.py 
Namespace(actions=['dump', 'clear'])
Namespace(actions=['lock'])
</snippet></ROW><ROW><id>8527692</id><snippet>lambda</snippet></ROW><ROW><id>8527692</id><snippet>1</snippet></ROW><ROW><id>8527692</id><snippet>map</snippet></ROW><ROW><id>8527692</id><snippet>filter</snippet></ROW><ROW><id>8527692</id><snippet>reduce</snippet></ROW><ROW><id>8527692</id><snippet>#never!
always_return_one = lambda ignored_argument: 1

#OK: functions with names are def'ed not lambda'd
def always_return_one(ignored_argument):
    return 1

#Also OK: pass the lambda to another function as soon as you spell it.
modified_list = some_highorder_function(lambda ignored: 1, [1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>8527692</id><snippet>map</snippet></ROW><ROW><id>8527692</id><snippet>modified_list = [1 for ignored in [1, 2, 3, 4, 5]]
</snippet></ROW><ROW><id>8528248</id><snippet>import mechanize

url = 'http://www.cpsc.gov/cpscpub/prerel/prhtml03/03059.html'
br = mechanize.Browser()
br.set_handle_refresh(False)
br.open(url)
</snippet></ROW><ROW><id>8528405</id><snippet>var1</snippet></ROW><ROW><id>8528405</id><snippet>var2</snippet></ROW><ROW><id>8528405</id><snippet>In [1]: x = numpy.arange(5)

In [2]: x
Out[2]: array([0, 1, 2, 3, 4])

In [3]: y = x.copy()

In [4]: x[:] = 0

In [5]: x
Out[5]: array([0, 0, 0, 0, 0])

In [6]: y
Out[6]: array([0, 1, 2, 3, 4])
</snippet></ROW><ROW><id>8528574</id><snippet>urlparse</snippet></ROW><ROW><id>8528574</id><snippet>urlparse</snippet></ROW><ROW><id>8528574</id><snippet>urllib.parse</snippet></ROW><ROW><id>8528574</id><snippet>Python 3.0</snippet></ROW><ROW><id>8528574</id><snippet>$ python
&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; urlparse('http://www.facebook.com/hello/world.php?id=789')
ParseResult(scheme='http', netloc='www.facebook.com', path='/hello/world.php', params='', query='id=789', fragment='')
</snippet></ROW><ROW><id>8528626</id><snippet>#add code here to figure out the number of 0's you need, naming the variable n.
listofzeros = [0] * n
</snippet></ROW><ROW><id>8528626</id><snippet>return listofzeros</snippet></ROW><ROW><id>8528626</id><snippet>def zerolistmaker(n):
    listofzeros = [0] * n
    return listofzeros
</snippet></ROW><ROW><id>8528626</id><snippet>&gt;&gt;&gt; zerolistmaker(4)
[0, 0, 0, 0]
&gt;&gt;&gt; zerolistmaker(5)
[0, 0, 0, 0, 0]
&gt;&gt;&gt; zerolistmaker(15)
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8528645</id><snippet>incron</snippet></ROW><ROW><id>8528645</id><snippet>inotify(7)</snippet></ROW><ROW><id>8528645</id><snippet>cron(8)</snippet></ROW><ROW><id>8528645</id><snippet>fork(2)</snippet></ROW><ROW><id>8528645</id><snippet>execve(2)</snippet></ROW><ROW><id>8528645</id><snippet>incron</snippet></ROW><ROW><id>8528645</id><snippet>inotify(7)</snippet></ROW><ROW><id>8528645</id><snippet>inotify(7)</snippet></ROW><ROW><id>8528695</id><snippet>$ python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for x,y,z in os.walk('/path/to/dir'):
...   for f in z:
...     if f not in d:
...        d[f] = []
...     d[f].append(x)
...
</snippet></ROW><ROW><id>8529046</id><snippet>gtk</snippet></ROW><ROW><id>8529046</id><snippet>gtk.main</snippet></ROW><ROW><id>8529046</id><snippet>gtk.main_quit</snippet></ROW><ROW><id>8529046</id><snippet>gio</snippet></ROW><ROW><id>8529046</id><snippet>monitor = gio.File(filename).monitor()
monitor.connect('changed', file_changed_cb)
</snippet></ROW><ROW><id>8529046</id><snippet>file_changed_cb</snippet></ROW><ROW><id>8529113</id><snippet>open('pickled_file', 'rU')</snippet></ROW><ROW><id>8529113</id><snippet>print repr(open('pickled_file', 'rb').read(200))</snippet></ROW><ROW><id>8529113</id><snippet>'\x80\x02'</snippet></ROW><ROW><id>8529113</id><snippet>'\n'</snippet></ROW><ROW><id>8529113</id><snippet>'\r\n'</snippet></ROW><ROW><id>8529113</id><snippet>with open('result.pickle', 'wb') as f: # b for binary
    pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

with open('result.pickle', 'rb') as f: # b for binary
    obj = pickle.load(f)
</snippet></ROW><ROW><id>8529113</id><snippet>'\r\n'</snippet></ROW><ROW><id>8529113</id><snippet>'\n'</snippet></ROW><ROW><id>8529164</id><snippet>servers</snippet></ROW><ROW><id>8529164</id><snippet>itertools</snippet></ROW><ROW><id>8529164</id><snippet>groupby</snippet></ROW><ROW><id>8529164</id><snippet>groupby</snippet></ROW><ROW><id>8529164</id><snippet>groupby</snippet></ROW><ROW><id>8529164</id><snippet>set</snippet></ROW><ROW><id>8529164</id><snippet>string</snippet></ROW><ROW><id>8529164</id><snippet>ljust</snippet></ROW><ROW><id>8529164</id><snippet>from itertools import groupby

servers = []
for AllConfigurations in yXML.getElementsByTagName('AllConfigurations'):
    for DeployConfigurations in AllConfigurations.getElementsByTagName('DeployConfigurations'):
        for Servers in DeployConfigurations.getElementsByTagName('Servers'):
            for Group in Servers.getElementsByTagName('Group'):
                for GApp in Group.getElementsByTagName('GApp'):
                    for Server in Group.getElementsByTagName('Server'):
                        servers.append((Server.getAttribute('name'),
                                Group.getAttribute('name'),
                                Server.getAttribute('ip'),
                                GApp.getAttribute('type')))

def line(machine, group, ip, services):
    return " | ".join([machine.ljust(8), group.ljust(20), ip.ljust(15), services])

print line("Machine", "Group", "IP", "Services")
for server, services in groupby(sorted(servers), lambda server: server[0:3]):
    print line("- " + server[0], server[1], server[2],
            ", ".join(service[3] for service in set(services)))
</snippet></ROW><ROW><id>8529164</id><snippet>Machine  | Group                | IP              | Services
- Alpha  | Public Server Group  | 192.168.1.251   | JBoss, Tomcat
- Public | Public Server Group  | 192.168.1.253   | Tomcat, JBoss
</snippet></ROW><ROW><id>8529261</id><snippet># store values
tot = {}
# the last date 
date0 = Dict1[-1]['date']

# easier to work from back, i found
for line in Dict1[-1::-1]:
    date, name, qty = [line[x] for x in 'date', 'name', 'qty']

    # add the value to all subsequent days
    for d in range(date, date0+1): 
        tot.setdefault(d, {}).setdefault(name, [0])[0] += qty

# i was putting value into array, and i put it out into a scalar
tot = dict((k, dict((kk,vv[0]) for kk,vv in v.items())) for k,v in tot.items())
print tot
</snippet></ROW><ROW><id>8529261</id><snippet>{1: {'xyz': 600, 'xyz2': 30}, 2: {'xyz': 1600, 'xyz2': 330}, 3: {'xyz': 2700, 'xyz3': 500, 'xyz2': 830}}</snippet></ROW><ROW><id>8529300</id><snippet>import-transform: lambda x: transform.import_date_time('%Y-%m-%d %H:%M:%S')(x[:18])
</snippet></ROW><ROW><id>8529300</id><snippet>transform.import_date_time</snippet></ROW><ROW><id>8529412</id><snippet>stdout</snippet></ROW><ROW><id>8529412</id><snippet>/dev/null</snippet></ROW><ROW><id>8529412</id><snippet>process = subprocess.Popen(["my", "command"], stdout=open(os.devnull, 'wb'))
</snippet></ROW><ROW><id>8529470</id><snippet>inspect</snippet></ROW><ROW><id>8529470</id><snippet>.
.
&gt;&gt;&gt; class ClassC(ClassB):
...     def baz(self):
...         return "hiya"
...
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; for attr in inspect.getmembers(ClassC):
...   print attr
... 
('__doc__', None)
('__module__', '__main__')
('bar', &lt;property object at 0x10046bf70&gt;)
('baz', &lt;unbound method ClassC.baz&gt;)
('foo', &lt;property object at 0x10046bf18&gt;)
</snippet></ROW><ROW><id>8529470</id><snippet>inspect</snippet></ROW><ROW><id>8529585</id><snippet>wave</snippet></ROW><ROW><id>8529585</id><snippet>import math
import wave
import struct

nchannels = 1
sampwidth = 2
framerate = 44100
nframes = 44100
comptype = "NONE"
compname = "not compressed"
amplitude = 4000
frequency = 15000

wav_file = wave.open('15khz_sine.wav', 'w')
wav_file.setparams((nchannels, sampwidth, framerate, nframes, comptype, compname))
for i in xrange(nframes):
    sample = math.sin(2*math.pi*frequency*(float(i)/framerate))*amplitude/2
    wav_file.writeframes(struct.pack('h', sample))
wav_file.close()
</snippet></ROW><ROW><id>8529882</id><snippet>create an array called toProcess
create an array or similar to mark which points have been encountered
add your start point to toProcess
while (there are points in toProcess) {
  pop the top/bottom point of toProcess into a temp variable
  process the point
  mark the point as encountered
  if any of the points neighbours are not encountered add them to toProcess

}
</snippet></ROW><ROW><id>8529969</id><snippet>def chop_char(some_string):
    try:
        # determine if the second to last character is upper case
        if some_string[-2].istitle() and not some_string[-1].istitle():
            return some_string[:-1] # slice off the last character
    except IndexError:
        # string isn't long enough to have a 2nd to last char (i.e. it's only 1 character)
        pass
    return some_string
</snippet></ROW><ROW><id>8529969</id><snippet>def chop_char(s):
    if len(s) &gt; 1:
        if s[-2].istitle() and not s[-1].istitle():
            return s[:-1]
    return s
</snippet></ROW><ROW><id>8530296</id><snippet>def nSplit(lst, delim, count=2):
    output = [[]]
    delimCount = 0
    for item in lst:
        if item == delim:
            delimCount += 1
        elif delimCount &gt;= count:
            output.append([item])
            delimCount = 0
        else:
            output[-1].append(item)
            delimCount = 0
    return output
</snippet></ROW><ROW><id>8530296</id><snippet>&gt;&gt;&gt; nSplit(['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g'], 'X', 2)
[['a', 'b'], ['c', 'd'], ['f', 'g']]
</snippet></ROW><ROW><id>8530391</id><snippet>&gt;&gt;&gt; K=5
&gt;&gt;&gt; N=3
&gt;&gt;&gt; src=[['1']*n+['4']*(K-n) for n in xrange(K-N,N+1)]
&gt;&gt;&gt; set(x for s in src for x in itertools.permutations(s))
set([('1', '4', '1', '4', '1'), ('4', '1', '4', '1', '1'), ('1', '1', '4', '4', '4'), ('1', '4', '4', '1', '1'), ('1', '4', '4', '4', '1'), ('4', '4', '4', '1', '1'), ('4', '1', '1', '4', '1'), ('4', '4', '1', '4', '1'), ('1', '4', '1', '1', '4'), ('4', '1', '4', '4', '1'), ('1', '1', '4', '4', '1'), ('1', '4', '4', '1', '4'), ('4', '1', '4', '1', '4'), ('4', '1', '1', '1', '4'), ('4', '4', '1', '1', '4'), ('1', '4', '1', '4', '4'), ('1', '1', '4', '1', '4'), ('4', '4', '1', '1', '1'), ('4', '1', '1', '4', '4'), ('1', '1', '1', '4', '4')])
</snippet></ROW><ROW><id>8530500</id><snippet>re</snippet></ROW><ROW><id>8530500</id><snippet>MULTILINE</snippet></ROW><ROW><id>8530500</id><snippet>re.compile</snippet></ROW><ROW><id>8530500</id><snippet>import re

regex = re.match(r'''(
    ^\s*clns\s+routing$ |
    ^\s*bfd\s+graceful-restart$ |
    ^\s*ip\s+default-network$ |
    ^\s*ip\s+default-gateway$ |
    ^\s*ip\s+subnet-zero$ |
    ^\s*ip\s+cef\s*$
)+''', re.MULTILINE | re.VERBOSE)
</snippet></ROW><ROW><id>8530500</id><snippet>VERBOSE</snippet></ROW><ROW><id>8530500</id><snippet>^</snippet></ROW><ROW><id>8530500</id><snippet>$</snippet></ROW><ROW><id>8530500</id><snippet>import re

regex = re.match(r'''(^
    \s*
    (clns|bfd|ip)
    \s+
    (routing|graceful-restart|default-network|default-gateway|subnet-zero|cef)
$)+''', re.MULTILINE | re.VERBOSE)
</snippet></ROW><ROW><id>8530580</id><snippet>def resize(file_path):
    file, ext = os.path.splitext(file_path)
    im = Image.open(file_path)
    size = (100, 'auto')
    new_path = file + "_.jpg"
    im.thumbnail(size, Image.ANTIALIAS)
    if im.size[1] &gt; 100:
        im = im.crop((0, 0, 100, 100))
    im.save(new_path, "JPEG")
</snippet></ROW><ROW><id>8530761</id><snippet>import</snippet></ROW><ROW><id>8530761</id><snippet>class RelEnvironment(jinja2.Environment):
    """Override join_path() to enable relative template paths."""
    def join_path(self, template, parent):
        return os.path.join(os.path.dirname(parent), template)
</snippet></ROW><ROW><id>8530887</id><snippet>deploy.py</snippet></ROW><ROW><id>8530887</id><snippet>/home/project/virtualenv/bin/python</snippet></ROW><ROW><id>8530887</id><snippet>tip</snippet></ROW><ROW><id>8531073</id><snippet>import ast
ex = ['(1..3),(5..8)']
list(ast.literal_eval(ex[0].replace('..', ',')))
# returns [(1, 3), (5, 8)]
</snippet></ROW><ROW><id>8531073</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>8531073</id><snippet>eval</snippet></ROW><ROW><id>8531073</id><snippet>ex2 = ['(2..5)', '(7..10)']
[ast.literal_eval(a.replace('..', ',')) for a in ex2]
# returns [(2, 5), (7, 10)]
</snippet></ROW><ROW><id>8531308</id><snippet>&gt;&gt;&gt; p1 = '/Users/foo/something'
&gt;&gt;&gt; p2 = '/Users/foo/something/else/etc'
&gt;&gt;&gt; os.path.relpath(p2, start=p1)
'else/etc'
</snippet></ROW><ROW><id>8531308</id><snippet>'else/etc'</snippet></ROW><ROW><id>8531308</id><snippet>'/else/etc'</snippet></ROW><ROW><id>8531308</id><snippet>cd /else/etc</snippet></ROW><ROW><id>8531308</id><snippet>os.path.join(p1, 'else/etc')</snippet></ROW><ROW><id>8531491</id><snippet>matplotlib</snippet></ROW><ROW><id>8531491</id><snippet>matplotlib</snippet></ROW><ROW><id>8531491</id><snippet>latex</snippet></ROW><ROW><id>8531491</id><snippet>latex</snippet></ROW><ROW><id>8531491</id><snippet>import pylab as plt
import matplotlib as mpl

mpl.rc('text', usetex=True)
plt.figure()
ax=plt.gca()
y=[1,2,3,4,5,4,3,2,1,1,1,1,1,1,1,1]
#plt.plot([10,10,14,14,10],[2,4,4,2,2],'r')
col_labels=['col1','col2','col3']
row_labels=['row1','row2','row3']
table_vals=[11,12,13,21,22,23,31,32,33]
table = r'''\begin{tabular}{ c | c | c | c } &amp; col1 &amp; col2 &amp; col3 \\\hline row1 &amp; 11 &amp; 12 &amp; 13 \\\hline row2 &amp; 21 &amp; 22 &amp; 23 \\\hline  row3 &amp; 31 &amp; 32 &amp; 33 \end{tabular}'''
plt.text(9,3.4,table,size=12)
plt.plot(y)
plt.show()
</snippet></ROW><ROW><id>8531491</id><snippet>pyplot.table</snippet></ROW><ROW><id>8531491</id><snippet>plt.table</snippet></ROW><ROW><id>8531491</id><snippet>Y</snippet></ROW><ROW><id>8531491</id><snippet>top</snippet></ROW><ROW><id>8531491</id><snippet>upper</snippet></ROW><ROW><id>8531491</id><snippet>center</snippet></ROW><ROW><id>8531491</id><snippet>lower</snippet></ROW><ROW><id>8531491</id><snippet>bottom</snippet></ROW><ROW><id>8531491</id><snippet>X</snippet></ROW><ROW><id>8531491</id><snippet>left</snippet></ROW><ROW><id>8531491</id><snippet>right</snippet></ROW><ROW><id>8531491</id><snippet>top left</snippet></ROW><ROW><id>8531491</id><snippet>center right</snippet></ROW><ROW><id>8531491</id><snippet>bottom</snippet></ROW><ROW><id>8531491</id><snippet>import matplotlib.pylab as plt

plt.figure()
ax=plt.gca()
y=[1,2,3,4,5,4,3,2,1,1,1,1,1,1,1,1]
#plt.plot([10,10,14,14,10],[2,4,4,2,2],'r')
col_labels=['col1','col2','col3']
row_labels=['row1','row2','row3']
table_vals=[[11,12,13],[21,22,23],[31,32,33]]
# the rectangle is where I want to place the table
the_table = plt.table(cellText=table_vals,
                  colWidths = [0.1]*3,
                  rowLabels=row_labels,
                  colLabels=col_labels,
                  loc='center right')
plt.text(12,3.4,'Table Title',size=8)

plt.plot(y)
plt.show()
</snippet></ROW><ROW><id>8531497</id><snippet>variable_to_watch</snippet></ROW><ROW><id>8531497</id><snippet>property</snippet></ROW><ROW><id>8531497</id><snippet>class C(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x = value
        self.show_hide_dialog() # or generate an event in general
    # ...
</snippet></ROW><ROW><id>8532579</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>8532579</id><snippet>C:\Python27\Lib\distutils\cygwinccompiler.py</snippet></ROW><ROW><id>8532579</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>8532579</id><snippet>C:\Python27\Lib\distutils\cygwinccompiler.py</snippet></ROW><ROW><id>8532579</id><snippet>cython</snippet></ROW><ROW><id>8532689</id><snippet>ScrapyFileLogObserver</snippet></ROW><ROW><id>8532689</id><snippet>import logging
from scrapy.log import ScrapyFileLogObserver

logfile = open('testlog.log', 'w')
log_observer = ScrapyFileLogObserver(logfile, level=logging.DEBUG)
log_observer.start()
</snippet></ROW><ROW><id>8532807</id><snippet>F</snippet></ROW><ROW><id>8532807</id><snippet>QuerySet.extra</snippet></ROW><ROW><id>8532807</id><snippet>activity_set = Activity.objects.extra(
  tables=['myapp_user'],
  where=[
    "myapp_activity.user_id=myapp_user.user_id",
    "myapp_activity.date - myapp_user.install_time &gt; '2 days'"
    ])
</snippet></ROW><ROW><id>8532807</id><snippet>extra</snippet></ROW><ROW><id>8532807</id><snippet>str(activity_set.query)</snippet></ROW><ROW><id>8532807</id><snippet>Manager.raw</snippet></ROW><ROW><id>8532807</id><snippet>activity_set = Activity.objects.raw("""
 SELECT
   myapp_activity.* from myapp_activity, myapp_user
 WHERE 
   myapp_activity.user_id=myapp_user.user_id
   and myapp_activity.date - myapp_user.install_time &gt; '2 days'
""")
</snippet></ROW><ROW><id>8532862</id><snippet>&gt;&gt;&gt; x = r'''"self.unsupported_cmds = [r'\s*clns\s+routing',"'''
&gt;&gt;&gt; print x
"self.unsupported_cmds = [r'\s*clns\s+routing',"
&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.escape(x)
&gt;&gt;&gt; re.match(pattern, x)
&lt;_sre.SRE_Match object at 0x7ffca3f66098&gt;
&gt;&gt;&gt; print pattern
\"self\.unsupported\_cmds\ \=\ \[r\'\\s\*clns\\s\+routing\'\,\"
</snippet></ROW><ROW><id>8533560</id><snippet>in</snippet></ROW><ROW><id>8533626</id><snippet>apply</snippet></ROW><ROW><id>8533626</id><snippet>apply(f,args,kwargs)
</snippet></ROW><ROW><id>8533626</id><snippet>apply</snippet></ROW><ROW><id>8533626</id><snippet>f(*args,**kwargs)
</snippet></ROW><ROW><id>8533626</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply</snippet></ROW><ROW><id>8533626</id><snippet>apply</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply_async</snippet></ROW><ROW><id>8533626</id><snippet>apply</snippet></ROW><ROW><id>8533626</id><snippet>ApplyResult</snippet></ROW><ROW><id>8533626</id><snippet>get()</snippet></ROW><ROW><id>8533626</id><snippet>get()</snippet></ROW><ROW><id>8533626</id><snippet>pool.apply(func, args, kwargs)</snippet></ROW><ROW><id>8533626</id><snippet>pool.apply_async(func, args, kwargs).get()</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply_async</snippet></ROW><ROW><id>8533626</id><snippet>get()</snippet></ROW><ROW><id>8533626</id><snippet>import multiprocessing as mp
import time

def foo_pool(x):
    time.sleep(2)
    return x*x

result_list = []
def log_result(result):
    # This is called whenever foo_pool(i) returns a result.
    # result_list is modified only by the main process, not the pool workers.
    result_list.append(result)

def apply_async_with_callback():
    pool = mp.Pool()
    for i in range(10):
        pool.apply_async(foo_pool, args = (i, ), callback = log_result)
    pool.close()
    pool.join()
    print(result_list)

if __name__ == '__main__':
    apply_async_with_callback()
</snippet></ROW><ROW><id>8533626</id><snippet>[1, 0, 4, 9, 25, 16, 49, 36, 81, 64]
</snippet></ROW><ROW><id>8533626</id><snippet>pool.map</snippet></ROW><ROW><id>8533626</id><snippet>pool.apply_async</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply</snippet></ROW><ROW><id>8533626</id><snippet>Pool.map</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply_async</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply_async</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply_async</snippet></ROW><ROW><id>8533626</id><snippet>Pool.map</snippet></ROW><ROW><id>8533626</id><snippet>Pool.apply_async</snippet></ROW><ROW><id>8533683</id><snippet>criteria</snippet></ROW><ROW><id>8533683</id><snippet>ContRate</snippet></ROW><ROW><id>8533683</id><snippet>Criteria</snippet></ROW><ROW><id>8533683</id><snippet>Content</snippet></ROW><ROW><id>8533683</id><snippet>content = get_object_or_404(Content, pk=content_id)
criteria = content.criteria_set.all()
user_ratings = ContRate.objects.filter(content=content, user=request.user)
ratings_dict = dict((c.crit_id, c.rate) for c in user_ratings)
for crit in criteria:
    crit.user_rating = ratings_dict.get(crit.id)
</snippet></ROW><ROW><id>8533683</id><snippet>criteria</snippet></ROW><ROW><id>8533683</id><snippet>user_rating</snippet></ROW><ROW><id>8533951</id><snippet>arr</snippet></ROW><ROW><id>8533951</id><snippet>line</snippet></ROW><ROW><id>8533951</id><snippet>for i, line in enumerate(fileinput.input('C:/1.cfg', inplace = 1)):
    for f,t in arr:
        line = line.replace(f, t)
    sys.stdout.write(line)
</snippet></ROW><ROW><id>8534042</id><snippet>x_meas = numpy.array([0, 5, 20, 50, 100, 200, 600], float)
y_meas = numpy.array([0, 0.275, 1.22, 1.64, 1.77, 1.84, 1.9], float)
</snippet></ROW><ROW><id>8534042</id><snippet>y_meas</snippet></ROW><ROW><id>8534042</id><snippet>def my_fn(x, b, a):
    y = np.zeros_like(x)
    nonzero = x != 0
    x = x[nonzero]
    y[nonzero] = b*(1/np.tanh(x/a) - a/x)
    return y
</snippet></ROW><ROW><id>8534381</id><snippet>next(x for x in seq if predicate(x))</snippet></ROW><ROW><id>8534381</id><snippet>StopIteration</snippet></ROW><ROW><id>8534381</id><snippet>next(ifilter(predicate, seq), None)</snippet></ROW><ROW><id>8534381</id><snippet>None</snippet></ROW><ROW><id>8534805</id><snippet>def equal_to():
       pass

   (etc)

COMPARISONS = {
    'equal_to': equal_to,
    etc
}
</snippet></ROW><ROW><id>8534805</id><snippet>COMPARISONS['equal_to'](arg1, arg2)</snippet></ROW><ROW><id>8534978</id><snippet>import pysvg.parser

svg = pysvg.parser.parse(&lt;filename&gt;)
print svg.get_width(), svg.get_height()
</snippet></ROW><ROW><id>8535016</id><snippet>from SocketServer import TCPServer, ThreadingMixIn

class MyServerThread(ThreadingMixIn, TCPServer): pass
</snippet></ROW><ROW><id>8535183</id><snippet>from collections import defaultdict
d = defaultdict(dict)
for line in open('input_file','r'):
    line = line.strip()
    a,b = line.split(',')
    node = a.split('=')[1] 
    key, value = b.split('=')
    d[node][key] = value
</snippet></ROW><ROW><id>8535204</id><snippet>class Foo(object):

    def __init__(self, a):
        self.a = a
        self.cls_method()

    @classmethod
    def cls_method(cls):
        print 'class %s' % cls.__name__
</snippet></ROW><ROW><id>8535204</id><snippet>class Foo
</snippet></ROW><ROW><id>8535357</id><snippet>PIL.resize()</snippet></ROW><ROW><id>8535357</id><snippet>multiprocessing</snippet></ROW><ROW><id>8535382</id><snippet>=</snippet></ROW><ROW><id>8535382</id><snippet>ConfigParser.ConfigParser</snippet></ROW><ROW><id>8535382</id><snippet>write</snippet></ROW><ROW><id>8535382</id><snippet>import sys
import ConfigParser

class ConfigParserWithComments(ConfigParser.ConfigParser):
    def add_comment(self, section, comment):
        self.set(section, '; %s' % (comment,), None)

    def write(self, fp):
        """Write an .ini-format representation of the configuration state."""
        if self._defaults:
            fp.write("[%s]\n" % ConfigParser.DEFAULTSECT)
            for (key, value) in self._defaults.items():
                self._write_item(fp, key, value)
            fp.write("\n")
        for section in self._sections:
            fp.write("[%s]\n" % section)
            for (key, value) in self._sections[section].items():
                self._write_item(fp, key, value)
            fp.write("\n")

    def _write_item(self, fp, key, value):
        if key.startswith(';') and value is None:
            fp.write("%s\n" % (key,))
        else:
            fp.write("%s = %s\n" % (key, str(value).replace('\n', '\n\t')))


config = ConfigParserWithComments()
config.add_section('Section')
config.set('Section', 'key', 'value')
config.add_comment('Section', 'this is the comment')
config.write(sys.stdout)
</snippet></ROW><ROW><id>8535382</id><snippet>[Section]
key = value
; this is the comment
</snippet></ROW><ROW><id>8535382</id><snippet>;</snippet></ROW><ROW><id>8535382</id><snippet>None</snippet></ROW><ROW><id>8535382</id><snippet>_read</snippet></ROW><ROW><id>8535382</id><snippet>comments</snippet></ROW><ROW><id>8535594</id><snippet>for i, sublist in enumerate(lst):
    for j, elem in enumerate(sublist):
        sublist[j] = 3*(i+1)*(j+1)
</snippet></ROW><ROW><id>8535690</id><snippet>In [1]: l = [(1, 3), (6, 7)]

In [2]: s = 'AABBCCDD'

In [3]: ''.join(s[start-1:end] for (start,end) in l)
Out[3]: 'AABCD'
</snippet></ROW><ROW><id>8535690</id><snippet>l</snippet></ROW><ROW><id>8535690</id><snippet>start</snippet></ROW><ROW><id>8535690</id><snippet>end</snippet></ROW><ROW><id>8535690</id><snippet>s[start-1:end]</snippet></ROW><ROW><id>8535690</id><snippet>join()</snippet></ROW><ROW><id>8535714</id><snippet>&gt;&gt;&gt; x = 2
&gt;&gt;&gt; y = 3
&gt;&gt;&gt; [i*y + x for i in range(10)]
[2, 5, 8, 11, 14, 17, 20, 23, 26, 29]
</snippet></ROW><ROW><id>8535937</id><snippet>datetime</snippet></ROW><ROW><id>8535937</id><snippet>timedelta</snippet></ROW><ROW><id>8535937</id><snippet>total_seconds</snippet></ROW><ROW><id>8535937</id><snippet>contant = 2 * 60
diff = late-now
if diff.total_seconds() &lt;= constant:
</snippet></ROW><ROW><id>8536062</id><snippet>import_transform: "lambda x: 'default A'"
</snippet></ROW><ROW><id>8536086</id><snippet>render_to_pdf</snippet></ROW><ROW><id>8536086</id><snippet>HttpResponse</snippet></ROW><ROW><id>8536365</id><snippet>wrapper</snippet></ROW><ROW><id>8536365</id><snippet>threading.local</snippet></ROW><ROW><id>8536365</id><snippet>wrapper</snippet></ROW><ROW><id>8536405</id><snippet>()</snippet></ROW><ROW><id>8536405</id><snippet>[1]</snippet></ROW><ROW><id>8536405</id><snippet>yourhash = {'login': u'myemail (myemail@gmail.com)'}

email = yourhash['login'].split()[1].strip("()")

print(email)
# myemail@gmail.com
</snippet></ROW><ROW><id>8536752</id><snippet>url(r'^polls/', include('polls.urls')), 
</snippet></ROW><ROW><id>8536752</id><snippet>url(r'^', include('polls.urls')),
</snippet></ROW><ROW><id>8536752</id><snippet>polls/</snippet></ROW><ROW><id>8537225</id><snippet>WORK_ID</snippet></ROW><ROW><id>8537225</id><snippet>todo_q</snippet></ROW><ROW><id>8537225</id><snippet>start_q</snippet></ROW><ROW><id>8537225</id><snippet>finish_q</snippet></ROW><ROW><id>8537225</id><snippet>Process.is_alive()</snippet></ROW><ROW><id>8537225</id><snippet>from multiprocessing import Process, Queue
from Queue import Empty
from random import choice as rndchoice
import time

def worker(id, todo_q, start_q, finish_q):
    """multiprocessing worker"""
    msg = None
    while (msg!='DONE'):
        try:
            msg = todo_q.get_nowait()    # Poll non-blocking on todo_q
            if (msg!='DONE'):
                start_q.put((id, msg))   # Let the controller know work started
                time.sleep(0.05)
                if (rndchoice(range(3))==1):
                    # Die a fraction of the time before finishing
                    print "DEATH to worker %s who had task=%s" % (id, msg)
                    break
                finish_q.put((id, msg))  # Acknowledge work finished
        except Empty:
            pass
    return

if __name__ == '__main__':
    NUM_WORKERS = 5
    WORK_ID = set(['A','B','C','D','E']) # Work to be done, you will need to
                                    #    name work items so they are unique
    WORK_DONE = set([])             # Work that has been done
    ASSIGNMENTS = dict()            # Who was assigned a task
    workers = dict()
    todo_q = Queue()
    start_q = Queue()
    finish_q = Queue()

    print "Starting %s tasks" % len(WORK_ID)
    # Add work
    for work in WORK_ID:
        todo_q.put(work)

    # spawn workers
    for ii in xrange(NUM_WORKERS):
        p = Process(target=worker, args=(ii, todo_q, start_q, finish_q))
        workers[ii] = p
        p.start()

    finished = False
    while True:
        try:
            start_ack = start_q.get_nowait()  # Poll for work started
            ## Check for race condition between start_ack and finished_ack
            if not ASSIGNMENTS.get(start_ack[0], False):
                ASSIGNMENTS[start_ack[0]] = start_ack   # Track the assignment
                print "ASSIGNED worker=%s task=%s" % (start_ack[0], 
                    start_ack[1])
                WORK_ID.remove(start_ack[1])      # Account for started tasks
            else:
                # Race condition. Never overwrite existing assignments
                # Wait until the ASSIGNMENT is cleared
                start_q.put(start_ack)
        except Empty:
            pass

        try:
            finished_ack = finish_q.get_nowait()  # Poll for work finished
            # Check for race condition between start_ack and finished_ack
            if (ASSIGNMENTS[finished_ack[0]][1]==finished_ack[1]):
                # Clean up after the finished task
                print "REMOVED worker=%s task=%s" % (finished_ack[0], 
                    finished_ack[1])
                del ASSIGNMENTS[finished_ack[0]]
                WORK_DONE.add(finished_ack[1])
            else:
                # Race condition. Never overwrite existing assignments
                # It was received out of order... wait for the 'start_ack'
                finish_q.put(finished_ack)
            finished_ack = None
        except Empty:
            pass

        # Look for any dead workers, and put their work back on the todo_q
        if not finished:
            for id, p in workers.items():
                status = p.is_alive()
                if not status:
                    print "    WORKER %s FAILED!" % id
                    # Add to the work again...
                    todo_q.put(ASSIGNMENTS[id][1])
                    WORK_ID.add(ASSIGNMENTS[id][1])
                    del ASSIGNMENTS[id]      # Worker is dead now
                    del workers[id]
                    ii += 1
                    print "Spawning worker number", ii
                    # Respawn a worker to replace the one that died
                    p = Process(target=worker, args=(ii, todo_q, start_q, 
                        finish_q))
                    workers[ii] = p
                    p.start()
        else:
            for id, p in workers.items():
                p.join()
                del workers[id]
            break

        if (WORK_ID==set([])) and (ASSIGNMENTS.keys()==list()):
            finished = True
            [todo_q.put('DONE') for x in xrange(NUM_WORKERS)]
        else:
            pass
    print "We finished %s tasks" % len(WORK_DONE)
</snippet></ROW><ROW><id>8537225</id><snippet>mpenning@mpenning-T61:~$ python queueack.py
Starting 5 tasks
ASSIGNED worker=2 task=C
ASSIGNED worker=0 task=A
ASSIGNED worker=4 task=B
ASSIGNED worker=3 task=E
ASSIGNED worker=1 task=D
DEATH to worker 4 who had task=B
DEATH to worker 3 who had task=E
    WORKER 3 FAILED!
Spawning worker number 5
    WORKER 4 FAILED!
Spawning worker number 6
REMOVED worker=2 task=C
REMOVED worker=0 task=A
REMOVED worker=1 task=D
ASSIGNED worker=0 task=B
ASSIGNED worker=2 task=E
REMOVED worker=2 task=E
DEATH to worker 0 who had task=B
    WORKER 0 FAILED!
Spawning worker number 7
ASSIGNED worker=5 task=B
REMOVED worker=5 task=B
We finished 5 tasks
mpenning@mpenning-T61:~$
</snippet></ROW><ROW><id>8537280</id><snippet>for machine in enable:
    enable[machine] = Variable()
    l = Checkbutton(self.root, text=machine, variable=enable[machine])
    l.pack()

self.root.mainloop()
</snippet></ROW><ROW><id>8537280</id><snippet>get</snippet></ROW><ROW><id>8537280</id><snippet>enable["ID1050"].get()</snippet></ROW><ROW><id>8537536</id><snippet>l.sort(key=lambda element: (len(element), element))
</snippet></ROW><ROW><id>8537536</id><snippet>&gt;&gt;&gt; l = ['A', 'AA', 'B', 'BB', 'C', 'CC']
&gt;&gt;&gt; l.sort(key=lambda element: (len(element), element))
&gt;&gt;&gt; print l
['A', 'B', 'C', 'AA', 'BB', 'CC']
</snippet></ROW><ROW><id>8537724</id><snippet>def visit_once_clerk(start_point=None):
    visited = set()
    to_visit = set(start_point or [])

    while to_visit:
        value = (yield to_visit.pop())
        if value and value not in visited:
            to_visit.add(value)
</snippet></ROW><ROW><id>8537724</id><snippet>clerk = visit_once_clerk(['start'])
print clerk.next()   # Print: start
print clerk.send('test')  # Print: test
print clerk.next()   # Raise StopIteration
</snippet></ROW><ROW><id>8537724</id><snippet>send</snippet></ROW><ROW><id>8537724</id><snippet>enqueue</snippet></ROW><ROW><id>8537724</id><snippet>send</snippet></ROW><ROW><id>8537724</id><snippet>enqueue</snippet></ROW><ROW><id>8537724</id><snippet>set</snippet></ROW><ROW><id>8537850</id><snippet>a = [b + 4 if b &lt; 0 else b for b in a]
</snippet></ROW><ROW><id>8538295</id><snippet>s.insert(0, x)</snippet></ROW><ROW><id>8538340</id><snippet>time</snippet></ROW><ROW><id>8538340</id><snippet>matplotlib</snippet></ROW><ROW><id>8538340</id><snippet>datetime</snippet></ROW><ROW><id>8538340</id><snippet>from datetime import datetime

dates.append(datetime.strptime(row[5], "%a, %d %b %Y %H:%M:%S %Z"))
...
</snippet></ROW><ROW><id>8538672</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>8538672</id><snippet>glob()</snippet></ROW><ROW><id>8538672</id><snippet>sys.argv</snippet></ROW><ROW><id>8538672</id><snippet>sysargv[1:]</snippet></ROW><ROW><id>8538746</id><snippet>workDirectory</snippet></ROW><ROW><id>8538746</id><snippet>fileExtensions</snippet></ROW><ROW><id>8538746</id><snippet>import os
from collections import defaultdict

fileExtensions  = ('.mobi', '.epub', '.pdf', '.djvu')

foundFiles = defaultdict(list)
for dirpath, dirs, files in os.walk(workDirectory):
    for file in files:
        if file.endswith(fileExtensions):
           basename = os.path.splitext(file)[0]
           foundFiles[basename].append(os.path.join(dirpath, file))
</snippet></ROW><ROW><id>8538746</id><snippet>foundFiles</snippet></ROW><ROW><id>8538746</id><snippet>{
    "batman": [
        "/some/path/batman.pdf", 
        "/other/path/batman.mobi"
    ], 
    "superman": [
        "/some/path/superman.epub", 
        "/other/path/superman.djvu"
    ]
}
</snippet></ROW><ROW><id>8538797</id><snippet>c</snippet></ROW><ROW><id>8538797</id><snippet>min(c for (a,b,c),(d,e,f) in your_list)
</snippet></ROW><ROW><id>8538797</id><snippet>c+f</snippet></ROW><ROW><id>8538797</id><snippet>max(c+f for (a,b,c),(d,e,f) in your_list)
</snippet></ROW><ROW><id>8538797</id><snippet>&gt;&gt;&gt; your_list = [[[1,2,3],[4,5,6]], [[0,1,2],[3,4,5]], [[2,3,4],[5,6,7]]]
&gt;&gt;&gt; min(c for (a,b,c),(d,e,f) in lst)
2
&gt;&gt;&gt; max(c+f for (a,b,c),(d,e,f) in lst)
11
</snippet></ROW><ROW><id>8539062</id><snippet>"/foo".split("/")</snippet></ROW><ROW><id>8539062</id><snippet>"foo".split("/')</snippet></ROW><ROW><id>8539062</id><snippet>filter(None, foo.split("/"))</snippet></ROW><ROW><id>8539062</id><snippet>&gt;&gt;&gt; filter(None, "/foo//bar".split("/"))
['foo', 'bar']
</snippet></ROW><ROW><id>8539144</id><snippet>p = re.compile('((:?0000)+)')
longestword = ""
for word in p.findall(ip6):
    if len(word[0])&gt;len(longestword):
        longestword = word[0]
print longestword
</snippet></ROW><ROW><id>8539466</id><snippet>update()</snippet></ROW><ROW><id>8539466</id><snippet>repaint()</snippet></ROW><ROW><id>8539466</id><snippet>QCoreApplication::processEvents()</snippet></ROW><ROW><id>8539470</id><snippet>code = pow(msg, 65537, 5551201688147)               # encode using a public key
plaintext = pow(code, 109182490673, 5551201688147)  # decode using a private key
</snippet></ROW><ROW><id>8539470</id><snippet>import random

def gen_prime(N=10**8, bases=range(2,20000)):
    # XXX replace with a more sophisticated algorithm
    p = 1
    while any(pow(base, p-1, p) != 1 for base in bases):
        p = random.SystemRandom().randrange(N)
    return p

def multinv(modulus, value):
    '''Multiplicative inverse in a given modulus

        &gt;&gt;&gt; multinv(191, 138)
        18
        &gt;&gt;&gt; 18 * 138 % 191
        1

    '''
    # http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    x, lastx = 0, 1
    a, b = modulus, value
    while b:
        a, q, b = b, a // b, a % b
        x, lastx = lastx - q * x, x
    result = (1 - lastx * modulus) // value
    return result + modulus if result &lt; 0 else result

def keygen(N):
    '''Generate public and private keys from primes up to N.

        &gt;&gt;&gt; pubkey, privkey = keygen(2**64)
        &gt;&gt;&gt; msg = 123456789012345
        &gt;&gt;&gt; coded = pow(msg, 65537, pubkey)
        &gt;&gt;&gt; plain = pow(coded, privkey, pubkey)
        &gt;&gt;&gt; assert msg == plain

    '''
    # http://en.wikipedia.org/wiki/RSA
    prime1 = gen_prime(N)
    prime2 = gen_prime(N)
    totient = (prime1 - 1) * (prime2 - 1)
    return prime1 * prime2, multinv(totient, 65537)
</snippet></ROW><ROW><id>8539770</id><snippet>&gt;&gt;&gt; match = re.search(r'^{{template\b.*$', your_string, re.M)
&gt;&gt;&gt; match.group()
'{{template|{{template2}}|other params}}'
</snippet></ROW><ROW><id>8539770</id><snippet>\b</snippet></ROW><ROW><id>8539770</id><snippet>re.M</snippet></ROW><ROW><id>8539770</id><snippet>^</snippet></ROW><ROW><id>8539770</id><snippet>$</snippet></ROW><ROW><id>8539770</id><snippet>r'^{{template\b(?:[^}]\n+|\n+[^{]|.)*$'
</snippet></ROW><ROW><id>8539770</id><snippet>|</snippet></ROW><ROW><id>8539770</id><snippet>r'^{{template\b(?:[^}\n]\n+|\n+[^{\n]|.)*}}$'
</snippet></ROW><ROW><id>8539770</id><snippet>}}</snippet></ROW><ROW><id>8539834</id><snippet>for equip in data.dictWayPts.itervalues():
    for waypt in equip.itervalues():
        print waypt.ID, waypt.EquipClassStr
</snippet></ROW><ROW><id>8539834</id><snippet>__iter__</snippet></ROW><ROW><id>8539834</id><snippet>    def __iter__(self):
        for equip in self.dictWayPts.itervalues():
            for waypt in equip.itervalues():
                yield waypt
</snippet></ROW><ROW><id>8539834</id><snippet>for waypt in data:
    print waypt.ID, waypt.EquipClassStr
</snippet></ROW><ROW><id>8540178</id><snippet>request.session[ 'type' ] = 'f' #when Freshman is clicked
request.session[ 'type' ] = 's' #when Freshman is clicked
</snippet></ROW><ROW><id>8540178</id><snippet>request.session.get( 'type', '' ) #this would return 'f' || 's' || ''
</snippet></ROW><ROW><id>8540209</id><snippet>odd = [1, 3, 5, 7]
even = [2, 4, 6, 8]

user_input = int(raw_input("enter a number: "))

if user_input in odd or user_input in even:
  print "the number "+str(user_input)+" was already entered"
else:
  if user_input %2 == 0:
    even.append(user_input)
    print "added to even list"
  else:
    odd.append(user_input)
    print "added to odd list"
</snippet></ROW><ROW><id>8540209</id><snippet>some_list = [1,2,6,7]

is_in_the_list = False
for x in some_list:
  if x == 7: # 7 plays the role of the user input here
    is_in_the_list = True

if is_in_the_list:
  print "It is in the list"
</snippet></ROW><ROW><id>8540609</id><snippet>AuiPaneInfo()</snippet></ROW><ROW><id>8540609</id><snippet>Floatable(False)</snippet></ROW><ROW><id>8540609</id><snippet>wx.aui.AuiPaneInfo().Left().Floatable(False)
</snippet></ROW><ROW><id>8540739</id><snippet>QMainWindow</snippet></ROW><ROW><id>8540739</id><snippet>QWidget</snippet></ROW><ROW><id>8540739</id><snippet>expanding</snippet></ROW><ROW><id>8540739</id><snippet>import sys
from PyQt4 import QtGui

app = QtGui.QApplication(sys.argv)
main = QtGui.QMainWindow()
toolbar = QtGui.QToolBar()

# spacer widget for left
left_spacer = QtGui.QWidget()
left_spacer.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
# spacer widget for right
# you can't add the same widget to both left and right. you need two different widgets.
right_spacer = QtGui.QWidget()
right_spacer.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)

# here goes the left one
toolbar.addWidget(left_spacer)
# some dummy actions
toolbar.addAction('one')
toolbar.addAction('two')
toolbar.addAction('three')
# and the right one
toolbar.addWidget(right_spacer)

main.addToolBar(toolbar)
main.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>8540750</id><snippet>import gdata.youtube.service
yt_service = gdata.youtube.service.YouTubeService()

yt_service.developer_key = 'developer_key'
yt_service.email = 'email'
yt_service.password = 'password'
yt_service.ProgrammaticLogin()


# video_id should looks like 'iu6Gq-tUsTc'
uri = 'https://gdata.youtube.com/feeds/api/users/%s/uploads/%s' % (username, video_id)  
entry = yt_service.GetYouTubeUserEntry(uri=uri)
response = yt_service.DeleteVideoEntry(entry)
print response  # True
</snippet></ROW><ROW><id>8540750</id><snippet>yt_service.GetYouTubeVideoFeed(uri)</snippet></ROW><ROW><id>8540750</id><snippet>GetYouTubeVideoFeed</snippet></ROW><ROW><id>8540750</id><snippet>self.Get(uri, ...)</snippet></ROW><ROW><id>8540750</id><snippet>'https://gdata.youtube.com/feeds/api/videos'</snippet></ROW><ROW><id>8540750</id><snippet>yt_service.GetYouTubeVideoEntry()</snippet></ROW><ROW><id>8540750</id><snippet>YOUTUBE_VIDEO_URI = 'https://gdata.youtube.com/feeds/api/videos'</snippet></ROW><ROW><id>8540750</id><snippet>rel="edit"</snippet></ROW><ROW><id>8540903</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7</snippet></ROW><ROW><id>8540903</id><snippet>python.org</snippet></ROW><ROW><id>8540903</id><snippet>easy_install</snippet></ROW><ROW><id>8540903</id><snippet>pip</snippet></ROW><ROW><id>8540903</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin.</snippet></ROW><ROW><id>8540903</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>8540903</id><snippet>/usr/bin/python2.7</snippet></ROW><ROW><id>8540903</id><snippet>/opt/local/bin/python2.7</snippet></ROW><ROW><id>8540903</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7</snippet></ROW><ROW><id>8540903</id><snippet>/usr/local/bin/python2.7</snippet></ROW><ROW><id>8540903</id><snippet>easy_install</snippet></ROW><ROW><id>8540903</id><snippet>pip</snippet></ROW><ROW><id>8540903</id><snippet>wx-python</snippet></ROW><ROW><id>8540903</id><snippet>wx-python</snippet></ROW><ROW><id>8540903</id><snippet>sudo port selfupdate
sudo port install py27-wxpython-devel
</snippet></ROW><ROW><id>8540991</id><snippet>Distutils</snippet></ROW><ROW><id>8540991</id><snippet>pip</snippet></ROW><ROW><id>8540991</id><snippet>Distribute/setuptools</snippet></ROW><ROW><id>8541411</id><snippet>itimes</snippet></ROW><ROW><id>8541411</id><snippet>f2py</snippet></ROW><ROW><id>8541486</id><snippet>/etc/master.passwd</snippet></ROW><ROW><id>8541486</id><snippet>/etc/passwd</snippet></ROW><ROW><id>8541486</id><snippet>/etc/shadow</snippet></ROW><ROW><id>8541486</id><snippet>login(1)</snippet></ROW><ROW><id>8541486</id><snippet>sshd(8)</snippet></ROW><ROW><id>8541606</id><snippet>def _wrapper(func):
    def _wrapped(self, *args, **kwargs):
        return getattr(self.ham, func)(*args, **kwargs)
    return _wrapped

class DictMeta(type):
    def __new__(cls, name, bases, dct):
        default_attrs = dir(object)
        for attr in dir(dict):
            if attr not in default_attrs:
                dct[attr] = _wrapper(attr)
        return type.__new__(cls, name, bases, dct)

class Spam(object):
    __metaclass__ = DictMeta
    def __init__(self):
        self.ham = dict()
</snippet></ROW><ROW><id>8541606</id><snippet>&gt;&gt;&gt; spam = Spam()
&gt;&gt;&gt; spam['eggs'] = 42
&gt;&gt;&gt; spam.items()
[('eggs', 42)]
&gt;&gt;&gt; len(spam)
1
&gt;&gt;&gt; spam.ham
{'eggs': 42}
</snippet></ROW><ROW><id>8541606</id><snippet>class Spam(object, metaclass=DictMeta)</snippet></ROW><ROW><id>8541606</id><snippet>__metaclass__</snippet></ROW><ROW><id>8541606</id><snippet>Spam</snippet></ROW><ROW><id>8541633</id><snippet>Testfile = "test.txt"
with open(TestFile) as testSet:
    for line in testSet:
        line = line.strip() 
        if "#*#*# ham" in line or "#*#*# spam" in line: 
            print line
</snippet></ROW><ROW><id>8541671</id><snippet>virtualenv</snippet></ROW><ROW><id>8541671</id><snippet>-p</snippet></ROW><ROW><id>8541671</id><snippet>pip</snippet></ROW><ROW><id>8541671</id><snippet>$ virtualenv -p /opt/local/bin/python2.7 myvirtualenv</snippet></ROW><ROW><id>8541753</id><snippet>Source</snippet></ROW><ROW><id>8541753</id><snippet>PyModTest.Source</snippet></ROW><ROW><id>8541753</id><snippet>PyModTest.Source.WildMod.WildFunc</snippet></ROW><ROW><id>8541753</id><snippet>PyModTest</snippet></ROW><ROW><id>8541753</id><snippet>Source</snippet></ROW><ROW><id>8541753</id><snippet>PyModTest/Source/__init__.py</snippet></ROW><ROW><id>8541753</id><snippet>WildMod</snippet></ROW><ROW><id>8541753</id><snippet>PyModTest/Source/WildMod.py</snippet></ROW><ROW><id>8541753</id><snippet>WildFunc</snippet></ROW><ROW><id>8541753</id><snippet>import spam.ham</snippet></ROW><ROW><id>8541753</id><snippet>import spam</snippet></ROW><ROW><id>8541753</id><snippet>ham</snippet></ROW><ROW><id>8541753</id><snippet>spam</snippet></ROW><ROW><id>8541753</id><snippet>Source</snippet></ROW><ROW><id>8541753</id><snippet>del Source</snippet></ROW><ROW><id>8541753</id><snippet>PyModTest.Source.&lt;anything&gt;</snippet></ROW><ROW><id>8541753</id><snippet>WildFunc</snippet></ROW><ROW><id>8541753</id><snippet>Source</snippet></ROW><ROW><id>8541824</id><snippet>import re

def get_id(toParse):
    return re.search('id(\d+)', toParse).groups()[0]
</snippet></ROW><ROW><id>8542106</id><snippet>&gt;&gt;&gt; def foo(): pass
&gt;&gt;&gt; foo.x = 1
&gt;&gt;&gt; foo.x
1
</snippet></ROW><ROW><id>8542106</id><snippet>&gt;&gt;&gt; @memo
... def id(x): return x
&gt;&gt;&gt; id(1)
1
&gt;&gt;&gt; id(2)
2
&gt;&gt;&gt; id.memo
{(2,): 2, (1,): 1}
</snippet></ROW><ROW><id>8542198</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>8542198</id><snippet>def get_ip(server):
    return server[2]
</snippet></ROW><ROW><id>8542198</id><snippet>sorted_servers = sorted(servers, key=get_ip)
</snippet></ROW><ROW><id>8542198</id><snippet>groupby()</snippet></ROW><ROW><id>8542198</id><snippet>for ip, servers in groupby(sorted_servers, get_ip):
</snippet></ROW><ROW><id>8542198</id><snippet>    machine_set = set()
    group_set = set()
    service_set = set()
</snippet></ROW><ROW><id>8542198</id><snippet>groupby()</snippet></ROW><ROW><id>8542198</id><snippet>    for machine, group, _, service in servers:
        machine_set.add(machine)
        group_set.add(group)
        service_set.add(service)
</snippet></ROW><ROW><id>8542198</id><snippet>line()</snippet></ROW><ROW><id>8542198</id><snippet>    machines = " / ".join(machine_set)
    groups = ", ".join(group_set)
    services = ", ".join(service_set)
    print line("- " +  machines, groups, ip, services)
</snippet></ROW><ROW><id>8542198</id><snippet>line()</snippet></ROW><ROW><id>8542198</id><snippet>def get_ip(server):
    return server[2]

sorted_servers = sorted(servers, key=get_ip)

print line("Machine", "Group", "IP", "Services")
print line("----------", "----------", "----------", "----------")

for ip, servers in groupby(sorted_servers, get_ip):
    machine_set = set()
    group_set = set()
    service_set = set()
    for machine, group, _, service in servers:
        machine_set.add(machine)
        group_set.add(group)
        service_set.add(service)

    machines = " / ".join(machine_set)
    groups = ", ".join(group_set)
    services = ", ".join(service_set)
    print line("- " +  machines, groups, ip, services)
</snippet></ROW><ROW><id>8542198</id><snippet>Machine                | Group                  | IP                 | Services
----------             | ----------             | ----------         | ----------
- Tom4                 | The Perfect Life       | 192.168.1.111      | JBoss, Tomcat
- Jboss1 / Tom1        | The Perfect Life       | 192.168.1.250      | JBoss, Tomcat
- Tom2 / Jboss2        | The Perfect Life       | 192.168.1.251      | JBoss, Tomcat
- Jboss3 / Tom3        | The Perfect Life       | 192.168.1.252      | JBoss, Tomcat
- Jboss4               | The Perfect Life       | 192.168.1.253      | JBoss, Tomcat
</snippet></ROW><ROW><id>8542198</id><snippet>for</snippet></ROW><ROW><id>8542198</id><snippet>lines = []
for ip, servers in groupby(sorted_servers, get_ip):
    # ... Same stuff here
    machines = " / ".join(machine_set)
    groups = ", ".join(group_set)
    services = ", ".join(service_set)
    # No more "print line("- " +  machines, groups, ip, services)"
    lines.append((machines, groups, ip, services))
</snippet></ROW><ROW><id>8542198</id><snippet>lines = sorted(lines, key=lambda l: l[0])
</snippet></ROW><ROW><id>8542198</id><snippet>for machine, group, ip, service in lines:
    print line(machine, group, ip, service)
</snippet></ROW><ROW><id>8542198</id><snippet>for</snippet></ROW><ROW><id>8542198</id><snippet>Server</snippet></ROW><ROW><id>8542198</id><snippet>yXML</snippet></ROW><ROW><id>8542198</id><snippet>server.getAttribute('name')</snippet></ROW><ROW><id>8542198</id><snippet>Group</snippet></ROW><ROW><id>8542198</id><snippet>Server</snippet></ROW><ROW><id>8542198</id><snippet>server.parentNode.parentNode.getAttribute('name')</snippet></ROW><ROW><id>8542198</id><snippet>server.getAttribute('ip')</snippet></ROW><ROW><id>8542198</id><snippet>server.parentNode.getAttribute('type')</snippet></ROW><ROW><id>8542198</id><snippet>for server in yXML.getElementsByTagName('Server'):
    name = server.getAttribute('name')
    group = server.parentNode.parentNode.getAttribute('name')
    ip = server.getAttribute('ip')
    service = server.parentNode.getAttribute('type')
    servers.append((name, group, ip, service))
</snippet></ROW><ROW><id>8542198</id><snippet>    machines = " / ".join(machine_set)
    groups = ", ".join(group_set)
    services = ", ".join(service_set)
</snippet></ROW><ROW><id>8542198</id><snippet>    machines = " / ".join(sorted(machine_set))
    groups = ", ".join(sorted(group_set))
    services = ", ".join(sorted(service_set))
</snippet></ROW><ROW><id>8542369</id><snippet>MyModel.objects.latest('id')['foo'] = 'bar'</snippet></ROW><ROW><id>8542369</id><snippet>projectForm</snippet></ROW><ROW><id>8542369</id><snippet>setattr</snippet></ROW><ROW><id>8542369</id><snippet>for k,v in session_results.iteritems():
    setattr(projectForm, k, v)
</snippet></ROW><ROW><id>8542402</id><snippet>#define IF    if(
#define THEN  ){
#define ELSE  } else {
#define ELIF  } else if ( 
#define FI    ;}
</snippet></ROW><ROW><id>8542402</id><snippet>with()</snippet></ROW><ROW><id>8542402</id><snippet>with()</snippet></ROW><ROW><id>8542402</id><snippet>with</snippet></ROW><ROW><id>8542402</id><snippet>with</snippet></ROW><ROW><id>8542402</id><snippet>with()</snippet></ROW><ROW><id>8542402</id><snippet>with</snippet></ROW><ROW><id>8542402</id><snippet>#define ever ;;
...

for (ever) { ... }
</snippet></ROW><ROW><id>8542507</id><snippet>ann_salary = int(input('Enter employee annual salary: '))
</snippet></ROW><ROW><id>8542644</id><snippet>root = Tk()

def getFIleName(varName, entryName):
    varName = tkFileDialog.askopenfilename()
    entryName.insert(0, varName)

iconButton = Button(root, text="Browse", command=(lambda: getImageName(campIcon, iconEntry)))
iconButton.pack()
</snippet></ROW><ROW><id>8542731</id><snippet>import sys</snippet></ROW><ROW><id>8542731</id><snippet>#!/usr/bin/python

import sys
print  sys.argv[1:]
</snippet></ROW><ROW><id>8542731</id><snippet>:/tmp% cat foo.py
#!/usr/bin/python

import sys
print (sys.argv[1:]);

:/tmp% python foo.py 'hello world' arg3 arg4 arg5
['hello world', 'arg3', 'arg4', 'arg5']
</snippet></ROW><ROW><id>8542972</id><snippet>import scipy as sp
def my_mean(x):
    if x.ndim == 1:
        x = x[:, sp.newaxis]
    m = sp.empty(x.shape)
    m[:] = x.mean(0)
    return sp.squeeze(m)
</snippet></ROW><ROW><id>8542972</id><snippet>In [6]: x = sp.arange(30).reshape(5,6)

In [7]: x
Out[7]: 
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29]])

In [8]: my_mean(x)
Out[8]: 
array([[ 12.,  13.,  14.,  15.,  16.,  17.],
       [ 12.,  13.,  14.,  15.,  16.,  17.],
       [ 12.,  13.,  14.,  15.,  16.,  17.],
       [ 12.,  13.,  14.,  15.,  16.,  17.],
       [ 12.,  13.,  14.,  15.,  16.,  17.]])

In [9]: my_mean(x[0])
Out[9]: array([ 2.5,  2.5,  2.5,  2.5,  2.5,  2.5])
</snippet></ROW><ROW><id>8542972</id><snippet>tile</snippet></ROW><ROW><id>8542972</id><snippet>In [1]: import scipy as sp

In [2]: x = sp.arange(30).reshape(5,6)

In [3]: m = x.mean(0)

In [5]: timeit m_2d = sp.empty(x.shape); m_2d[:] = m
100000 loops, best of 3: 2.58 us per loop

In [6]: timeit m_2d = sp.tile(m, (len(x), 1))
100000 loops, best of 3: 13.3 us per loop
</snippet></ROW><ROW><id>8542978</id><snippet>deny</snippet></ROW><ROW><id>8542978</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>8542978</id><snippet>follow</snippet></ROW><ROW><id>8542978</id><snippet>Rule</snippet></ROW><ROW><id>8542978</id><snippet>parse_item</snippet></ROW><ROW><id>8542978</id><snippet>rules = (
        Rule(SgmlLinkExtractor(
                    allow = ('\d\d\d\d/(92[8-9]|9[3-9][0-9]|\d\d\d\d)/index\.htm', ),
                    deny = ('culture\.htm', 'feature\.htm'),
                    ), 
            follow = True
        ),
        Rule(SgmlLinkExtractor(
                allow = (
                    'fr[0-9].htm', 
                    'eg[0-9]*.htm',
                    'ec[0-9]*.htm',
                    'op[0-9]*.htm',
                    'sc[0-9]*.htm',
                    're[0-9]*.htm',
                    'in[0-9]*.htm',
                    )
                ), 
                callback = 'parse_item',
        ),
    )
</snippet></ROW><ROW><id>8542978</id><snippet>parse_item</snippet></ROW><ROW><id>8542978</id><snippet> Rule(SgmlLinkExtractor(
                allow = ('(fr|eg|ec|op|sc|re|in)[0-9]*\.htm', ), 
                callback = 'parse_item',
        ),
 )
</snippet></ROW><ROW><id>8543140</id><snippet>DOWNLOAD_DELAY    
RANDOMIZE_DOWNLOAD_DELAY
</snippet></ROW><ROW><id>8543754</id><snippet>from datetime import datetime, time

now = datetime.now()
beginning_of_day = datetime.combine(now.date(), time(0))
print (now - beginning_of_day).seconds
</snippet></ROW><ROW><id>8543754</id><snippet>datetime</snippet></ROW><ROW><id>8544064</id><snippet>Py2.6</snippet></ROW><ROW><id>8544421</id><snippet>printf</snippet></ROW><ROW><id>8544421</id><snippet>&gt;&gt;&gt; msvcrt.printf("Testing: %s".encode('ascii'), message_string.encode('ascii'))
Testing: Hello world!
22
</snippet></ROW><ROW><id>8544434</id><snippet>Find_Smallest_Palindrome(9999999900000000)
</snippet></ROW><ROW><id>8544508</id><snippet>CHOICES</snippet></ROW><ROW><id>8544508</id><snippet>for</snippet></ROW><ROW><id>8544508</id><snippet>class UserProfileForm(forms.Form):
categories = Category.objects.all()
CHOICES = []
for c in  categories:
    CHOICES.append((c.id, c.name))

answers = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple, choices=CHOICES)
</snippet></ROW><ROW><id>8544508</id><snippet>ForeignKey</snippet></ROW><ROW><id>8544571</id><snippet>for s in list[:]:
    if s=='b' or s=='c':
        list.remove(s)
</snippet></ROW><ROW><id>8544571</id><snippet>to_remove = []
for index, s in enumerate(list):
    if s == "b" or s == "c":
         to_remove.append(index)

for index in reversed(to_remove):
    del list[index]
</snippet></ROW><ROW><id>8544571</id><snippet>index = 0
while index &lt; len(list):
   if s == "b" or s == "c":
       del list[index]
       continue
   index += 1
</snippet></ROW><ROW><id>8544783</id><snippet>class Image(image_data=None, blob_key=None)</snippet></ROW><ROW><id>8544783</id><snippet>image_data</snippet></ROW><ROW><id>8544783</id><snippet>img1 = images.Image(open('/home/ubuntu/a.png').read()) 
</snippet></ROW><ROW><id>8544880</id><snippet>try..except</snippet></ROW><ROW><id>8544880</id><snippet>import urllib

a = 'http://anzaholyman.files.wordpress.com/2011/12/zip-it.gif'
image = urllib.URLopener()
while True:
    try:
        image.retrieve(a,'1.jpg')
        break
    except IOError:
        pass
</snippet></ROW><ROW><id>8545134</id><snippet>GentlePerson</snippet></ROW><ROW><id>8545134</id><snippet>p</snippet></ROW><ROW><id>8545134</id><snippet>class Gentleman(object):
  def introduce_self(self):
    return "Hello, my name is %s" % self.name

class Person(object):
  def __init__(self, name):
    self.name = name

p = Person("John")
p.__class__ = type('GentlePerson',(Person,Gentleman),{})
print(p.introduce_self())
# "Hello, my name is John"
</snippet></ROW><ROW><id>8545134</id><snippet>p</snippet></ROW><ROW><id>8545134</id><snippet>p</snippet></ROW><ROW><id>8545134</id><snippet>Person</snippet></ROW><ROW><id>8545134</id><snippet>Person</snippet></ROW><ROW><id>8545134</id><snippet>AttributeError</snippet></ROW><ROW><id>8545134</id><snippet>introduce_self</snippet></ROW><ROW><id>8545134</id><snippet>object</snippet></ROW><ROW><id>8545134</id><snippet>class Gentleman(object):
  def introduce_self(self):
    return "Hello, my name is %s" % self.name

class Base(object):pass
class Person(Base):
  def __init__(self, name):
    self.name = name

p = Person("John")
Person.__bases__=(Gentleman,object,)
print(p.introduce_self())
# "Hello, my name is John"

q = Person("Pete")
print(q.introduce_self())
# Hello, my name is Pete
</snippet></ROW><ROW><id>8545150</id><snippet>User</snippet></ROW><ROW><id>8545416</id><snippet>&gt;&gt;&gt; f = open('1.txt', 'r')
&gt;&gt;&gt; words = f.read().split()
&gt;&gt;&gt; word_counter = {}
&gt;&gt;&gt; for word in words:
...    word_counter[word] = word_counter.get(word, 0) + 1
...
&gt;&gt;&gt; word_counter
{'a': 1, 'aba': 1, 'dd': 2, 'aaa': 1, 'ddd': 1}
</snippet></ROW><ROW><id>8545416</id><snippet>word_counter</snippet></ROW><ROW><id>8545416</id><snippet>dict</snippet></ROW><ROW><id>8545416</id><snippet>&gt;&gt;&gt; word_counter_as_list = [ [k, v] for k, v in word_counter.items() ]
&gt;&gt;&gt; word_counter_as_list
[['a', 1], ['aba', 1], ['dd', 2], ['aaa', 1], ['ddd', 1]]
</snippet></ROW><ROW><id>8545935</id><snippet>wx.GetKeyState</snippet></ROW><ROW><id>8545935</id><snippet>import wx

class TBI(wx.TaskBarIcon):
    def __init__(self):
        wx.TaskBarIcon.__init__(self)
        icon = wx.ArtProvider.GetIcon(wx.ART_FILE_OPEN, wx.ART_TOOLBAR)
        self.SetIcon(icon, "Icon")
        self.Bind(wx.EVT_TASKBAR_RIGHT_UP, self.on_right_up)

    def on_right_up(self, event):
         if wx.GetKeyState(wx.WXK_CONTROL):
             print 'ctrl was pressed!'


app = wx.App(redirect=False)
icon = TBI()
app.MainLoop()
</snippet></ROW><ROW><id>8546009</id><snippet>itertools.product</snippet></ROW><ROW><id>8546009</id><snippet>import itertools

data = {'Y': [1, 2, 6, 7],
        'X': [0, 1, 2, 3, 4, 5, 6, 7,
              8, 9, 10, 11, 12, 13, 14, 15, 16,
              17, 18, 19, 20, 21, 22, 23, 24],
        'Z': [0, 3, 6, 9]}
# Join the key and value together in tuples
# [[('Y', 1), ('Y', 2), ('Y', 6), ('Y', 7)], ...]
tuples = [[(var, val) for val in data[var]] for var in data]

# Create the dictionary setting values to X, Y, and Z
# [{'Y': 1, 'X': 0, 'Z': 0}, {'Y': 1, 'X': 0, 'Z': 3} ....]
answer = [dict(a) for a in itertools.product(*tuples)]
</snippet></ROW><ROW><id>8546218</id><snippet>from AppKit import NSStatusBar
status_item = NSStatusBar.systemStatusBar().statusItemWithLength_(-1) #NSVariableStatusItemLength
status_item.setImage_(&lt;NSImage instance to status icon&gt;)
</snippet></ROW><ROW><id>8546233</id><snippet>%</snippet></ROW><ROW><id>8546233</id><snippet>&gt;&gt;&gt; pi = 3.1415

&gt;&gt;&gt; angle = 2*pi+0.5
&gt;&gt;&gt; angle % (2*pi)
0.5

&gt;&gt;&gt; angle = -4*pi + 0.5
&gt;&gt;&gt; angle % (2*pi)
0.5
</snippet></ROW><ROW><id>8546233</id><snippet>&gt;&gt;&gt; L = [2*pi + 0.5, 4*pi + 0.6]
&gt;&gt;&gt; [i % (2*pi) for i in L]
[0.5, 0.5999999999999996]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8546271</id><snippet> ' '.join(list)
</snippet></ROW><ROW><id>8546358</id><snippet>sum(l, start=Vec3(0,0,0))
</snippet></ROW><ROW><id>8546358</id><snippet>numpy.sum(l, axis=0)
</snippet></ROW><ROW><id>8546358</id><snippet>timeit</snippet></ROW><ROW><id>8546358</id><snippet>python -m timeit "import numpy; foo = [[1,1,1],[1,1,1]]" "numpy.sum(foo, axis=0)"
10000 loops, best of 3: 46.5 usec per loop
</snippet></ROW><ROW><id>8546358</id><snippet>pandac</snippet></ROW><ROW><id>8546447</id><snippet>urllib.unquote(url)
</snippet></ROW><ROW><id>8546631</id><snippet>if something: return True else: return False</snippet></ROW><ROW><id>8546631</id><snippet>return something</snippet></ROW><ROW><id>8546631</id><snippet>a * a</snippet></ROW><ROW><id>8546631</id><snippet>a ** 2</snippet></ROW><ROW><id>8546631</id><snippet>def is_approximately_right_angled(a, b, c):
    a, b, c = sorted([a, b, c])
    return abs(a * a + b * b - c * c) &lt; 0.1

a = input('enter a ')
b = input('enter b ')
c = input('enter c ')
print is_approximately_right_angled(a, b, c)
</snippet></ROW><ROW><id>8546631</id><snippet>a = input...</snippet></ROW><ROW><id>8546631</id><snippet>assert is_approximately_right_angled(3, 4, 5)
assert is_approximately_right_angled(3, 5, 4)
assert is_approximately_right_angled(3, 2, 3.61)
assert not is_approximately_right_angled(3, 5, 5)
</snippet></ROW><ROW><id>8546652</id><snippet>choices</snippet></ROW><ROW><id>8546652</id><snippet>class MyObject(models.Model):
    MALE = 0
    FEMALE = 1
    ROBOT = 2
    MY_CHOICES = [
        (MALE, 'Male'),
        (FEMALE, 'Female'),
        (ROBOT, 'Robot'),
    ]
    gender = models.IntegerField(choices=MY_CHOICES)


MyObject.objects.filter(gender=MyObject.ROBOT)
</snippet></ROW><ROW><id>8546775</id><snippet>/Users/morrison/</snippet></ROW><ROW><id>8546775</id><snippet>copy.py</snippet></ROW><ROW><id>8546775</id><snippet>copy</snippet></ROW><ROW><id>8546775</id><snippet>turtle</snippet></ROW><ROW><id>8546775</id><snippet>sys.path</snippet></ROW><ROW><id>8546775</id><snippet>sys.path</snippet></ROW><ROW><id>8546775</id><snippet>copy.py</snippet></ROW><ROW><id>8546775</id><snippet>mycopy.py</snippet></ROW><ROW><id>8546775</id><snippet>copy.pyc</snippet></ROW><ROW><id>8546895</id><snippet>handle</snippet></ROW><ROW><id>8546895</id><snippet>handle</snippet></ROW><ROW><id>8546895</id><snippet>self.data == ''</snippet></ROW><ROW><id>8546895</id><snippet>recv</snippet></ROW><ROW><id>8546895</id><snippet>strip()</snippet></ROW><ROW><id>8546895</id><snippet>ThreadingTCPServer</snippet></ROW><ROW><id>8546895</id><snippet>import SocketServer

class MyTCPHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        while True:
            self.data = self.request.recv(1024)
            if self.data == '':
                break
            self.data = self.data.strip()
            print "{} wrote: {}\n".format(self.client_address[0], self.data)
            self.request.send(self.data.upper())

if __name__ == "__main__":
    HOST, PORT = "localhost", 9999
    server = SocketServer.ThreadingTCPServer((HOST, PORT), MyTCPHandler)
    server.serve_forever()
</snippet></ROW><ROW><id>8546895</id><snippet>send()</snippet></ROW><ROW><id>8546895</id><snippet>sendall()</snippet></ROW><ROW><id>8546895</id><snippet>recv()</snippet></ROW><ROW><id>8546895</id><snippet>\n</snippet></ROW><ROW><id>8547067</id><snippet>pipe = open('/dev/input/js0','rb')
</snippet></ROW><ROW><id>8547194</id><snippet>ui</snippet></ROW><ROW><id>8547194</id><snippet>class Ui_ClassCode(object):
    def setupUi(self, ClassCode):
        ClassCode.setObjectName("ClassCode")
        # bunch of boiler-plate ui code goes here
        self.retranslateUi(ClassCode)
        QtCore.QMetaObject.connectSlotsByName(ClassCode)

    def retranslateUi(self, ClassCode):
        pass
</snippet></ROW><ROW><id>8547194</id><snippet>setupUI</snippet></ROW><ROW><id>8547194</id><snippet>objectName</snippet></ROW><ROW><id>8547194</id><snippet>-w</snippet></ROW><ROW><id>8547194</id><snippet>pyuic4 -w designerfile.ui &gt; classfile.py
</snippet></ROW><ROW><id>8547194</id><snippet>class ClassCode(QtGui.QWidget, Ui_ClassCode):
    def __init__(self, parent=None, f=QtCore.Qt.WindowFlags()):
        QtGui.QWidget.__init__(self, parent, f)

        self.setupUi(self)
</snippet></ROW><ROW><id>8547194</id><snippet>from PyQt4 import QtGui, QtCore
from classfile import ClassCode

class Stack(ClassCode):
    def __init__(self, parent=None):
        ClassCode.__init__(self, parent)

class Window(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.stack = Stack(self)
        self.setCentralWidget(self.stack)
</snippet></ROW><ROW><id>8547691</id><snippet>im.tostring</snippet></ROW><ROW><id>8547691</id><snippet>MIMEImage</snippet></ROW><ROW><id>8547691</id><snippet>from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from PIL import Image
import cStringIO

msg = MIMEMultipart()

im = Image.new("RGB", (200, 200))
memf = cStringIO.StringIO()
im.save(memf, "JPEG")
img = MIMEImage(memf.getvalue())

msg.attach(img)
</snippet></ROW><ROW><id>8548165</id><snippet>import selenium</snippet></ROW><ROW><id>8548207</id><snippet>OPTIONS = {'argv_emulation': True, 'includes': ['EXTERNAL LIBRARY'],}
</snippet></ROW><ROW><id>8548296</id><snippet>ax.xaxis.set_major_locator(MultipleLocator(1.))
ax.yaxis.set_major_locator(MultipleLocator(1.))
</snippet></ROW><ROW><id>8548477</id><snippet>print type(test.a)  # &lt;type 'function'&gt;
print type(test.b)  # &lt;type 'instancemethod'&gt;
</snippet></ROW><ROW><id>8548477</id><snippet>a</snippet></ROW><ROW><id>8548477</id><snippet>test</snippet></ROW><ROW><id>8548477</id><snippet>x</snippet></ROW><ROW><id>8548477</id><snippet>import types
test.a = types.MethodType((lambda self: "hola"), test, x)
</snippet></ROW><ROW><id>8548477</id><snippet>instancemethod</snippet></ROW><ROW><id>8548614</id><snippet>for x in target.xpath('/root/targetroot/targetcontainer/target'):
    print x.text
</snippet></ROW><ROW><id>8548614</id><snippet>/root/targetroot/targetcontainer/target</snippet></ROW><ROW><id>8548614</id><snippet>&lt;target&gt;</snippet></ROW><ROW><id>8548614</id><snippet>&lt;targetcontainer&gt;</snippet></ROW><ROW><id>8548614</id><snippet>&lt;targetroot&gt;</snippet></ROW><ROW><id>8548614</id><snippet>&lt;root&gt;</snippet></ROW><ROW><id>8548614</id><snippet>&lt;root&gt;</snippet></ROW><ROW><id>8548614</id><snippet>/</snippet></ROW><ROW><id>8548614</id><snippet>&lt;?xml version="1.0"?&gt;</snippet></ROW><ROW><id>8548614</id><snippet>&lt;/xml&gt;</snippet></ROW><ROW><id>8548614</id><snippet>&lt;target&gt;</snippet></ROW><ROW><id>8548614</id><snippet>&lt;target&gt;</snippet></ROW><ROW><id>8548614</id><snippet>for x in target.xpath('//target'):
    print x.text
</snippet></ROW><ROW><id>8548735</id><snippet>Comment</snippet></ROW><ROW><id>8548735</id><snippet>Comment</snippet></ROW><ROW><id>8548735</id><snippet>class MyAppComment(Comment):

    class Meta(Comment.Meta):
        proxy = True

admin.site.unregister(Comment)
admin.site.register(MyAppComment, CommentsAdmin)
</snippet></ROW><ROW><id>8548735</id><snippet>app_label</snippet></ROW><ROW><id>8548735</id><snippet>MyAppComment</snippet></ROW><ROW><id>8548735</id><snippet>myapp</snippet></ROW><ROW><id>8548774</id><snippet>PIL</snippet></ROW><ROW><id>8548774</id><snippet>image.save("blank.gif")
</snippet></ROW><ROW><id>8548774</id><snippet># saves the current TKinter object in postscript format
win.postscript(file="image.eps", colormode='color')

# Convert from eps format to gif format using PIL
from PIL import Image as NewImage
img = NewImage.open("image.eps")
img.save("blank.gif", "gif")
</snippet></ROW><ROW><id>8548836</id><snippet>def boo(x, y):
    p = (x, y)
    return (1 if p in ((3, 4), (4, 2)) else
            2 if p == (4, 1) else
            3 if p == (5, 1) else
            4 if p == (3, 1) else
            None)
</snippet></ROW><ROW><id>8548836</id><snippet>def boo(x, y):
    return {(3,4):1, (4,2):1, (4,1):2, (5,1):3, (3,1):4}.get((x, y), None)
</snippet></ROW><ROW><id>8548836</id><snippet>[(x, y)]</snippet></ROW><ROW><id>8548836</id><snippet>.get((x, y), None)</snippet></ROW><ROW><id>8548950</id><snippet>import PyQt4.QtCore, PyQt4.QtGui</snippet></ROW><ROW><id>8548950</id><snippet>from PyQt4 import QtCore, QtGui</snippet></ROW><ROW><id>8548950</id><snippet>Makespec.py</snippet></ROW><ROW><id>8548950</id><snippet>Build.py</snippet></ROW><ROW><id>8548967</id><snippet>threading</snippet></ROW><ROW><id>8548967</id><snippet>multiprocessing</snippet></ROW><ROW><id>8549272</id><snippet>self.server = SocketServer.TCPServer((self.host, self.port), ProtocolHandler)
self.server.my_object = self.my_object
</snippet></ROW><ROW><id>8549272</id><snippet>handle()</snippet></ROW><ROW><id>8549272</id><snippet>self.server</snippet></ROW><ROW><id>8549884</id><snippet>secret</snippet></ROW><ROW><id>8549884</id><snippet>base64.b32decode()</snippet></ROW><ROW><id>8549884</id><snippet>import hmac, base64, struct, hashlib, time

def get_hotp_token(secret, intervals_no):
    key = base64.b32decode(secret, True)
    msg = struct.pack("&gt;Q", intervals_no)
    h = hmac.new(key, msg, hashlib.sha1).digest()
    o = ord(h[19]) &amp; 15
    h = (struct.unpack("&gt;I", h[o:o+4])[0] &amp; 0x7fffffff) % 1000000
    return h

def get_totp_token(secret):
    return get_hotp_token(secret, intervals_no=int(time.time())//30)
</snippet></ROW><ROW><id>8549884</id><snippet>get_hotp_token()</snippet></ROW><ROW><id>8549884</id><snippet>get_totp_token()</snippet></ROW><ROW><id>8549884</id><snippet>secret</snippet></ROW><ROW><id>8549884</id><snippet>intervals_no</snippet></ROW><ROW><id>8549884</id><snippet>secret</snippet></ROW><ROW><id>8549884</id><snippet>base64.b32decode()</snippet></ROW><ROW><id>8549884</id><snippet>=</snippet></ROW><ROW><id>8549884</id><snippet>get_hotp_token()</snippet></ROW><ROW><id>8549884</id><snippet>intervals_no</snippet></ROW><ROW><id>8549884</id><snippet>intervals_no</snippet></ROW><ROW><id>8549884</id><snippet>get_totp_token()</snippet></ROW><ROW><id>8549884</id><snippet>secret = 'MZXW633PN5XW6MZX'
for i in xrange(1, 10):
    print i, get_hotp_token(secret, intervals_no=i)
</snippet></ROW><ROW><id>8549884</id><snippet>1 448400
2 656122
3 457125
4 35022
5 401553
6 581333
7 16329
8 529359
9 171710
</snippet></ROW><ROW><id>8549980</id><snippet>for aa in all_firm:
    r = open (aa,'r+')
    lines = r.readlines()
    r.close()
    w = open (aa,'w')
    for bb in lines:
        raw = nltk.clean_html(bb)
        raw2=str(raw)
        w.write(low_firm)
</snippet></ROW><ROW><id>8550068</id><snippet>    if os.path.isfile(i):
        data.setdefault(i, set())
        root.add(os.path.relpath(dir).replace("\\", "/"))
        data[i] = root
    else:
        preisci(i)
</snippet></ROW><ROW><id>8550068</id><snippet>data[i] = root
</snippet></ROW><ROW><id>8550397</id><snippet>import re
import codecs

#...
#...
#extract() returns list, so you need to take first element
title = hxs.select('/html/head/title/text()').extract() [0]
content = hxs.select('//*[@id="content"]')
#instead of using BeautifulSoup for this task, you can use folowing
content = content.select('string()').extract()[0]

#simply delete duplicating spaces and newlines, maybe you need to adjust this expression
cleaned_content = re.sub(ur'(\s)\s+', ur'\1', content, flags=re.MULTILINE + re.UNICODE)

texts = "%s\n\n%s" % (title, cleaned_content) 

#look's like typo in filename creation
#filename ....

#and my preferable way to write file with encoding
with codecs.open(filename, 'w', encoding='utf-8') as output:
    output.write(texts)
</snippet></ROW><ROW><id>8550448</id><snippet>colorsys</snippet></ROW><ROW><id>8550546</id><snippet>easy_install</snippet></ROW><ROW><id>8550546</id><snippet>pip</snippet></ROW><ROW><id>8550546</id><snippet>pip</snippet></ROW><ROW><id>8550546</id><snippet>setuptools</snippet></ROW><ROW><id>8550546</id><snippet>buildout</snippet></ROW><ROW><id>8550546</id><snippet>packaging</snippet></ROW><ROW><id>8550546</id><snippet>Distutils2</snippet></ROW><ROW><id>8550546</id><snippet>pip -&gt; [ Distribute | setuptools ] -&gt; Distutils -&gt; Python core
                                    |
    3rd party packages              |      included in Python
                                    |
</snippet></ROW><ROW><id>8550546</id><snippet>packaging</snippet></ROW><ROW><id>8550546</id><snippet>Distutils2</snippet></ROW><ROW><id>8550861</id><snippet>import contextlib,difflib

with contextlib.nested(open('b.txt', 'r'), open('c.txt', 'r'), open('d.txt', 'r')) as (b_fp, c_fp, d_fp):
data = set(b_fp.readlines() +
           c_fp.readlines() +
           d_fp.readlines())

with open('a.txt', 'r') as fp:
   for line in fp:
       #if line in data:
       match = difflib.get_close_matches(line,data)
       if len(match) &gt; 0:
           #print "Matched %s" % line.strip()
           print "({0}) matches with ({1})".format(line.strip(),match[0])
</snippet></ROW><ROW><id>8550942</id><snippet>def addNameToDictionary(d, tup):
    if not d.has_key(tup[0]):
        d[tup[0]] = {}
    d[tup[0]][tup[1]] = [tup[2]]
</snippet></ROW><ROW><id>8551193</id><snippet>estimator.coef_</snippet></ROW><ROW><id>8551193</id><snippet>estimator.intercept_</snippet></ROW><ROW><id>8551193</id><snippet>estimator.raw_coef_</snippet></ROW><ROW><id>8551193</id><snippet>liblinear</snippet></ROW><ROW><id>8551193</id><snippet>estimator.predict</snippet></ROW><ROW><id>8551193</id><snippet>estimator.predict_proba</snippet></ROW><ROW><id>8551193</id><snippet>@property</snippet></ROW><ROW><id>8551193</id><snippet>estimator.coef_</snippet></ROW><ROW><id>8551193</id><snippet>estimator.coef_</snippet></ROW><ROW><id>8551193</id><snippet>estimator.raw_coef_</snippet></ROW><ROW><id>8551193</id><snippet>estimator.raw_coef_</snippet></ROW><ROW><id>8551302</id><snippet>list3 = list()
for x in range(min(len(list1),len(list2)):
    if list1[x] == list2[x]:
        list3.append(list1[x])
    else:
        break
</snippet></ROW><ROW><id>8551568</id><snippet>@user_passes_test(lambda u: u.is_staff, login_url="%slogin/" % NINJA_ADMIN_URL_PREFIX)
def content_form(request, model_name=None, edit=False, call_name=''):
    if edit:
        content = Content.objects.get(call_name=call_name)
        model_name = content.fields.__class__.__name__

    ContentForm = get_content_form(model_name)

    if request.method == 'POST':
        if edit:
            form = ContentForm(request.POST, instance=content.fields)
        else:
</snippet></ROW><ROW><id>8551568</id><snippet>def get_content_form(model_name):
    class DynamicContentForm(forms.ModelForm):
        parent = ModelTextField(queryset=Content.objects.all(), widget=JQueryAutocomplete(
                        source_url='%sjson/call_names.json' % NINJA_ADMIN_URL_PREFIX, jquery_opts = {'minLength': 2},
                        override_label='item.fields.call_name', override_value='item.fields.call_name'),
                        required=False)

        class Meta():
            model = get_ninja_type(model_name)
            widgets = {
                    'ninja_type': forms.widgets.HiddenInput(),
                }

        def clean_parent(self):
            call_name = self.cleaned_data['parent']
            if call_name:
                try:
                    parent = Content.objects.get(call_name=call_name)
                except Content.DoesNotExist:
                    raise forms.ValidationError("The call name '%s' doesn't exist. Choose another parent." % call_name)
                return parent
            else:
                return None
    return DynamicContentForm
</snippet></ROW><ROW><id>8551594</id><snippet>return</snippet></ROW><ROW><id>8551643</id><snippet>class Pet(db.Model):
    name = db.StringProperty(required=True, default="(unnamed)") 
</snippet></ROW><ROW><id>8551669</id><snippet>Cache-Control</snippet></ROW><ROW><id>8551900</id><snippet>&gt;&gt;&gt; from difflib import get_close_matches
&gt;&gt;&gt; get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])
['apple', 'ape']
</snippet></ROW><ROW><id>8551933</id><snippet>['\\A'</snippet></ROW><ROW><id>8551933</id><snippet>""</snippet></ROW><ROW><id>8551933</id><snippet>\</snippet></ROW><ROW><id>8551933</id><snippet>\\</snippet></ROW><ROW><id>8551933</id><snippet>"['\\A'+'ABBOTT\\s|\\s'+'ABBOTT\\s|\\s'+'ABBOTT$|\\A'+'ABBOTT LABORATORIES\\s|\\s'+'ABBOTT LABORATORIES\\s|\\s'+'ABBOTT LABORATORIES$']"
</snippet></ROW><ROW><id>8551933</id><snippet>Python 2.7.2 (default, Aug 22 2011, 13:53:27) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin

&gt;&gt;&gt; print "['\\A'+'ABBOTT\\s|\\s'+'ABBOTT LABORATORIES$']".split ('+')
["['\\A'", "'ABBOTT\\s|\\s'", "'ABBOTT LABORATORIES$']"]

&gt;&gt;&gt; print "['\\A'+'ABBOTT\\s|\\s'+'ABBOTT LABORATORIES$']".split ('+')[0]
['\A'
</snippet></ROW><ROW><id>8551979</id><snippet>Query.first()</snippet></ROW><ROW><id>8551979</id><snippet>obj = session.query(ObjectRes).order_by(ObjectRes.id.desc()).first()
</snippet></ROW><ROW><id>8552147</id><snippet>cPickle</snippet></ROW><ROW><id>8552147</id><snippet>marshal</snippet></ROW><ROW><id>8552147</id><snippet>marshal</snippet></ROW><ROW><id>8552147</id><snippet>marshal</snippet></ROW><ROW><id>8552147</id><snippet>cPickle</snippet></ROW><ROW><id>8552147</id><snippet>marshal</snippet></ROW><ROW><id>8552147</id><snippet>cPickle</snippet></ROW><ROW><id>8552147</id><snippet>marshal</snippet></ROW><ROW><id>8552147</id><snippet>cPickle</snippet></ROW><ROW><id>8552349</id><snippet>import os

op = os.path

def fileRead(mydir):
    data = {}
    root = set()
    for i in os.listdir(mydir):
        path = op.join(mydir, i)
        print(path)
        if op.isfile(path):
            data.setdefault(i, set())
            root.add(op.relpath(mydir).replace("\\", "/"))
            data[i] = root
        else:
            data.update(fileRead(path))
    return data


d = fileRead("c:\python32\programas")
print(d)
</snippet></ROW><ROW><id>8552349</id><snippet>import os
from collections import defaultdict
op = os.path

def fileRead(mydir):
    data = defaultdict(list)
    for i in os.listdir(mydir):
        path = op.join(mydir, i)
        print(path)
        if op.isfile(path):
            root = op.relpath(mydir).replace("\\", "/")
            data[i].append(root)
        else:
            for k, v in fileRead(path).items():
                data[k].extend(v)
    return data


d = fileRead("c:\python32\programas")
print(d)
</snippet></ROW><ROW><id>8552349</id><snippet>data.update(fileRead(path).items())</snippet></ROW><ROW><id>8552349</id><snippet>fileRead("c:/python26/programas/pack")</snippet></ROW><ROW><id>8552349</id><snippet>for k, v in fileRead(path).items():  data[k].extend(v)
</snippet></ROW><ROW><id>8552503</id><snippet>import ast

# which syntax elements are allowed at module level?
whitelist = [
  # docstring
  lambda x: isinstance(x, ast.Expr) \
             and isinstance(x.value, ast.Str),
  # import
  lambda x: isinstance(x, ast.Import),
  # class
  lambda x: isinstance(x, ast.ClassDef),
  # function
  lambda x: isinstance(x, ast.FunctionDef),
]

def validate(source, required_functions):
  tree = ast.parse(source)

  functions = set()
  required_functions = set(required_functions)

  for item in tree.body:
    if isinstance(item, ast.FunctionDef):
      functions.add(item.name)
      continue

    if all(not checker(item) for checker in whitelist):
      return False

  # at least the required functions must be there
  return len(required_functions - functions) == 0


if __name__ == "__main__":
  required_funcs = [ "init", "execute", "cleanup" ]
  with open("/tmp/test.py", "rb") as f:
    print("yay!" if validate(f.read(), required_funcs) else "d'oh!")
</snippet></ROW><ROW><id>8552517</id><snippet>class BlogPost(mongoengine.Document):
    create_date = mongoengine.DateTimeField()
    mod_date = mongoengine.DateTimeField()

    title = mongoengine.StringField()

    meta = {
        'abstract': True,
    }

    def save(self):
        if not self.pk:
            self.create_date = datetime.utcnow()
        self.mod_date = datetime.utcnow()

        super(BlogPost, self).save()

class TextBlogPost(BlogPost):
    body = mongoengine.StringField()

class ImageBlogPost(BlogPost):
    image = mongoengine.FileField()
    caption = mongoengine.StringField()
</snippet></ROW><ROW><id>8552517</id><snippet>TextBlogPost</snippet></ROW><ROW><id>8552517</id><snippet>ImageBlogPost</snippet></ROW><ROW><id>8552517</id><snippet>BlogPost</snippet></ROW><ROW><id>8552592</id><snippet>import re
import random
a = 'abc?def?ghi?jkl'
rand_max = 9

re.sub(r'\?', lambda x:str(random.randint(1,rand_max)), a)

# returns 'abc3def4ghi6jkl'
</snippet></ROW><ROW><id>8552592</id><snippet>import random
a = 'abc?def?ghi?jkl'
rand_max = 9
while '?' in a:
    a = a[:a.index('?')] + str(random.randint(1,rand_max)) + a[a.index('?')+1:]
</snippet></ROW><ROW><id>8552767</id><snippet>import mechanize
br = mechanize.Browser()
br.open("http://www.speech.sri.com/projects/srilm/download.html")
br.select_form(nr = True)
br['name'] = 'Hans Meier'
br['org'] = 'Meier AG'
br['email'] = 'hans.meier.org'
br['address'] = 'Baslerstrasse 32'
br['file'] = ['/project/srilm/srilm-1.6.0.tar.gz']
form_submission = br.submit()
with open('srilm.tgz', 'w') as f:
    f.write(form_submission.read())
</snippet></ROW><ROW><id>8552824</id><snippet>&gt;&gt;&gt; s = "combination.py" 
&gt;&gt;&gt; [s[i:i+3] for i in range(len(s)-2)]
['com', 'omb', 'mbi', 'bin', 'ina', 'nat', 'ati', 'tio', 'ion', 'on.', 'n.p', '.py']
</snippet></ROW><ROW><id>8552890</id><snippet>- path to stylesheet on pages was relative(static/style.css) and NOT</snippet></ROW><ROW><id>8552890</id><snippet>&lt;head&gt;
&lt;link type="text/css" rel="stylesheet" href="/static/style.css"&gt;
&lt;html&gt;
</snippet></ROW><ROW><id>8553089</id><snippet>[a] + other_list
</snippet></ROW><ROW><id>8553089</id><snippet>other_list.insert(0, a)
</snippet></ROW><ROW><id>8553089</id><snippet>itertools.chain([a], other_list)
</snippet></ROW><ROW><id>8553369</id><snippet>for x, y in zip(g1, g2):
    print(x[0], y[0])
</snippet></ROW><ROW><id>8553369</id><snippet>for x, y in zip(g1, g2):
    print(x[0] + y[0])
</snippet></ROW><ROW><id>8553369</id><snippet>itertools.izip</snippet></ROW><ROW><id>8553369</id><snippet>zip</snippet></ROW><ROW><id>8553534</id><snippet>DEFAULT_VERSION</snippet></ROW><ROW><id>8553534</id><snippet>ez_setup.py</snippet></ROW><ROW><id>8553614</id><snippet>matplotlib.pyplot.hist</snippet></ROW><ROW><id>8553614</id><snippet>a</snippet></ROW><ROW><id>8553614</id><snippet>plt.hist(range(2400, 2501), weights=a[0][0])
plt.show()
</snippet></ROW><ROW><id>8553614</id><snippet>a</snippet></ROW><ROW><id>8553614</id><snippet>a</snippet></ROW><ROW><id>8553614</id><snippet>plt.hist(range(2400, 2501), weights=a[0][0], bins=101)
plt.show()
</snippet></ROW><ROW><id>8553742</id><snippet>if isinstance(payload, list):
    for m in payload:
        print str(m).split()

else:
    print str(m).split()
</snippet></ROW><ROW><id>8553945</id><snippet>$1</snippet></ROW><ROW><id>8553945</id><snippet>$2</snippet></ROW><ROW><id>8553945</id><snippet>$3</snippet></ROW><ROW><id>8553945</id><snippet>def stripInnermostHTMLtags(text):
    '''Strip all but outermost HTML start and end tags.
    '''
    # Regex to match outermost HTML element and its contents.
    p_outer = re.compile(r"""
        ^                 # Anchor to start of string.
        (.*?&lt;html[^&gt;]*&gt;)  # $1: Outer HTML start tag.
        (.*)              # $2: Outer HTML element contents.
        (&lt;/html\s*&gt;.*)    # $3: Outer HTML end tag.
        $                 # Anchor to end of string.
        """, re.DOTALL | re.VERBOSE | re.IGNORECASE)
    # Split text into outermost HTML tags and its contents.
    m = p_outer.match(text)
    if m:
        # Regex to match HTML element start or end tag.
        p_inner = re.compile("&lt;/?html[^&gt;]*&gt;", re.IGNORECASE)
        # Strip contents of any/all HTML start and end tags.
        contents = p_inner.sub("", m.group(2))
        # Put string back together stripped of inner HTML tags.
        text = m.group(1) + contents + m.group(3)
    return text
</snippet></ROW><ROW><id>8553945</id><snippet>&gt;</snippet></ROW><ROW><id>8554251</id><snippet>Cleaner</snippet></ROW><ROW><id>8554251</id><snippet>strip_elements</snippet></ROW><ROW><id>8554251</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>8554251</id><snippet>onclick=function()</snippet></ROW><ROW><id>8554251</id><snippet>#!/usr/bin/env python

import lxml
from lxml.html.clean import Cleaner

cleaner = Cleaner()
cleaner.javascript = True # This is True because we want to activate the javascript filter
cleaner.style = True      # This is True because we want to activate the styles &amp; stylesheet filter

print "WITH JAVASCRIPT &amp; STYLES"
print lxml.html.tostring(lxml.html.parse('http://www.google.com'))
print "WITHOUT JAVASCRIPT &amp; STYLES"
print lxml.html.tostring(cleaner.clean_html(lxml.html.parse('http://www.google.com')))
</snippet></ROW><ROW><id>8554251</id><snippet>True</snippet></ROW><ROW><id>8554251</id><snippet>False</snippet></ROW><ROW><id>8554251</id><snippet>cleaner.kill_tags = ['a', 'h1']
cleaner.remove_tags = ['p']
</snippet></ROW><ROW><id>8554251</id><snippet>remove_tags:
  A list of tags to remove. Only the tags will be removed, their content will get pulled up into the parent tag.
kill_tags:
  A list of tags to kill. Killing also removes the tag's content, i.e. the whole subtree, not just the tag itself.
allow_tags:
  A list of tags to include (default include all).
</snippet></ROW><ROW><id>8554374</id><snippet>rooms = dict(('room_%d' % x, Room(x)) for x in range(1, 6))
</snippet></ROW><ROW><id>8554492</id><snippet>den=sqrt((sum1Sq-pow(sum1,2)/n)* sum2Sq-pow(sum2,2)/n)
</snippet></ROW><ROW><id>8554492</id><snippet>den=sqrt((sum1Sq-pow(sum1,2)/n)* (sum2Sq-pow(sum2,2)/n))
</snippet></ROW><ROW><id>8554540</id><snippet>b</snippet></ROW><ROW><id>8554540</id><snippet>a</snippet></ROW><ROW><id>8554540</id><snippet>import copy
a = copy.deepcopy(b)
c = hybrid_array(a,args)
</snippet></ROW><ROW><id>8554540</id><snippet>a = b.copy()
c = hybrid_array(a,args)
</snippet></ROW><ROW><id>8554715</id><snippet>select :: [Bool] -&gt; [a] -&gt; [a] -&gt; [a]
select [] [] [] = []
select (True:bs) (x:xs) (_:ys) = x : select bs xs ys
select (False:bs) (_:xs) (y:ys) = y : select bs xs ys
</snippet></ROW><ROW><id>8554715</id><snippet>select :: [Bool] -&gt; [a] -&gt; [a] -&gt; [a]
select bs xs ys = zipWith3 select' bs xs ys
  where select' True x _ = x
        select' False _ y = y
</snippet></ROW><ROW><id>8554715</id><snippet>trueIndices :: [Bool] -&gt; [Int]
trueIndices bs = [i | (i,True) &lt;- zip [0..] bs]
</snippet></ROW><ROW><id>8554715</id><snippet>select</snippet></ROW><ROW><id>8554715</id><snippet>trueIndices :: [Bool] -&gt; [Int]
trueIndices bs = catMaybes $ select bs (map Just [0..]) (repeat Nothing)
</snippet></ROW><ROW><id>8554715</id><snippet>{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances #-}

class Select bs as where
  select :: bs -&gt; as -&gt; as -&gt; as

instance Select Bool a where
  select True x _ = x
  select False _ y = y

instance (Select bs as) =&gt; Select [bs] [as] where
  select = zipWith3 select
</snippet></ROW><ROW><id>8554715</id><snippet>GHCi&gt; select [[True, False], [False, True]] [[0,1],[2,3]] [[4,5],[6,7]]
[[0,5],[6,3]]
</snippet></ROW><ROW><id>8554715</id><snippet>select</snippet></ROW><ROW><id>8554715</id><snippet>(zipWith3.zipWith3.zipWith3) select' bs xs ys</snippet></ROW><ROW><id>8554715</id><snippet>zipWith3</snippet></ROW><ROW><id>8554820</id><snippet>threads = []
for x in SP500:
    t1 = StockData(x[0])
    t1.start()
    threads.append(t1)
for t in threads:
    t.join()
... print running time
</snippet></ROW><ROW><id>8555191</id><snippet>class HopBill(object):
   def __init__(self):
       self.hop_list = []
   def add(self, hop):
      self.hop_list.append(hop)
   def addnew(self, variety, aa, qty, time):
      hop = Hop(variety, aa, qty, time)
      self.add(hop)
</snippet></ROW><ROW><id>8555253</id><snippet>bi</snippet></ROW><ROW><id>8555253</id><snippet>class A(object):
    x = 0

class B(A):
    pass

ai = A()
bi = B()

print id(ai.x) == id(bi.x)
ai.x=3
print id(ai.x) == id(bi.x)
</snippet></ROW><ROW><id>8555253</id><snippet>True
False
</snippet></ROW><ROW><id>8555253</id><snippet>x</snippet></ROW><ROW><id>8555253</id><snippet>__init__</snippet></ROW><ROW><id>8555253</id><snippet>ai</snippet></ROW><ROW><id>8555253</id><snippet>bi</snippet></ROW><ROW><id>8555253</id><snippet>0</snippet></ROW><ROW><id>8555253</id><snippet>class A(object):
    def __init__(self):
        self.x = 0

class B(A):
    pass

ai = A()
bi = B()

print id(ai.x) == id(bi.x)
ai.x=3
print id(ai.x) == id(bi.x)
</snippet></ROW><ROW><id>8555253</id><snippet>True
False
</snippet></ROW><ROW><id>8555441</id><snippet>MODULES = dict([(s.key, s) for s in ALL_MODULES if s.enabled])
</snippet></ROW><ROW><id>8555441</id><snippet>MODULES = dict([(s.key, s) for s in ALL_MODULES if s['enabled']])
</snippet></ROW><ROW><id>8555517</id><snippet>Timer</snippet></ROW><ROW><id>8555517</id><snippet>Event</snippet></ROW><ROW><id>8555517</id><snippet>import threading

class MyThread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.sleep_event = threading.Event()
        self.damon = True

    def run(self):
        while True:
            self.sleep_event.clear()
            self.sleep_event.wait(60)
            threading.Thread(target=self._run).start()

    def _run(self):
        print "run"

my_thread = MyThread()
my_thread.start()

while True:
    raw_input("Hit ENTER to force execution\n")
    my_thread.sleep_event.set()
</snippet></ROW><ROW><id>8555529</id><snippet>GUI.connect</snippet></ROW><ROW><id>8555529</id><snippet>self.client=Client()</snippet></ROW><ROW><id>8555529</id><snippet>GUI.leave</snippet></ROW><ROW><id>8555529</id><snippet>self.client.leave()</snippet></ROW><ROW><id>8555529</id><snippet>class GUI():
    def __init__(self):
        self.client = None
    def setup_buttons(self):
        self.b1 = ...
        self.b2 = Button(root, text = "Leave", width = 8, state = DISABLED, command = self.leave)
        b2.grid(row = 0, column = 3)
        Button(root, text = "Connect", width = 8, command = self.connect).grid(row = 0, column = 4)
    def connect(self):
        self.b1.config(state = NORMAL)
        self.b2.config(state = NORMAL)
        self.client = Client()
    def leave(self):
        if self.client:
            self.b1.config(state = DISABLED)
            self.b2.config(state = DISABLED)
            self.client.leave()
</snippet></ROW><ROW><id>8555611</id><snippet>_winreg.OpenKey</snippet></ROW><ROW><id>8555611</id><snippet>_winreg.CreateKeyEx</snippet></ROW><ROW><id>8555611</id><snippet>_winreg.DeleteKeyEx</snippet></ROW><ROW><id>8555611</id><snippet>handle = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER, "your_sub_key", 0, _winreg.KEY_READ | _winreg.KEY_WOW64_64KEY)
</snippet></ROW><ROW><id>8555611</id><snippet>_winreg</snippet></ROW><ROW><id>8555721</id><snippet>def __show(self,start):
   if start.next:
       print start.data
       self.__show(start.next)
</snippet></ROW><ROW><id>8555721</id><snippet>def __show(self,start):
   if start:
       print start.data
       self.__show(start.next)
</snippet></ROW><ROW><id>8555721</id><snippet>inserthead()</snippet></ROW><ROW><id>8555721</id><snippet>None</snippet></ROW><ROW><id>8555746</id><snippet>file.xreadlines()
This method returns the same thing as iter(f).

New in version 2.1.

Deprecated since version 2.3: Use for line in file instead.
</snippet></ROW><ROW><id>8555746</id><snippet>with</snippet></ROW><ROW><id>8555746</id><snippet>with open('my_file', 'r') as f:
    for line in f:
        # do stuff
</snippet></ROW><ROW><id>8555837</id><snippet>matplotlib.ticker.FuncFormatter</snippet></ROW><ROW><id>8555837</id><snippet>def my_formatter(x, pos):
    """Format 1 as 1, 0 as 0, and all values whose absolute values is between
    0 and 1 without the leading "0." (e.g., 0.7 is formatted as .7 and -0.4 is
    formatted as -.4)."""
    val_str = '{:g}'.format(x)
    if np.abs(x) &gt; 0 and np.abs(x) &lt; 1:
        return val_str.replace("0", "", 1)
    else:
        return val_str
</snippet></ROW><ROW><id>8555837</id><snippet>majorFormatter = FuncFormatter(my_formatter)</snippet></ROW><ROW><id>8555837</id><snippet>majorFormatter</snippet></ROW><ROW><id>8555837</id><snippet>from matplotlib import pyplot as plt
from matplotlib.ticker import FuncFormatter
import numpy as np

def my_formatter(x, pos):
    """Format 1 as 1, 0 as 0, and all values whose absolute values is between
    0 and 1 without the leading "0." (e.g., 0.7 is formatted as .7 and -0.4 is
    formatted as -.4)."""
    val_str = '{:g}'.format(x)
    if np.abs(x) &gt; 0 and np.abs(x) &lt; 1:
        return val_str.replace("0", "", 1)
    else:
        return val_str

# Generate some data.
np.random.seed(1) # So you can reproduce these results.
vals = np.random.rand((1000))

# Set up the formatter.
major_formatter = FuncFormatter(my_formatter)

plt.hist(vals, bins=100)
ax = plt.subplot(111)
ax.xaxis.set_major_formatter(major_formatter)
plt.show()
</snippet></ROW><ROW><id>8555839</id><snippet>usb.core.find</snippet></ROW><ROW><id>8555839</id><snippet>usb.core.find(idVendor= 0x054C, idProduct= 0x0155)
</snippet></ROW><ROW><id>8555839</id><snippet>find_all</snippet></ROW><ROW><id>8555839</id><snippet>backend</snippet></ROW><ROW><id>8556214</id><snippet>&amp;</snippet></ROW><ROW><id>8556214</id><snippet>&amp;</snippet></ROW><ROW><id>8556214</id><snippet>    1   1   0   1
    x   x   x   x
    8   4   2   1
    =   =   =   =
    8 + 4 + 0 + 1  =  13
</snippet></ROW><ROW><id>8556214</id><snippet>1</snippet></ROW><ROW><id>8556214</id><snippet>1</snippet></ROW><ROW><id>8556214</id><snippet>1</snippet></ROW><ROW><id>8556214</id><snippet>    0   0   0   1
    x   x   x   x
    8   4   2   1
    =   =   =   =
    0 + 0 + 0 + 1  =  1
</snippet></ROW><ROW><id>8556214</id><snippet>1</snippet></ROW><ROW><id>8556214</id><snippet>1</snippet></ROW><ROW><id>8556214</id><snippet>0</snippet></ROW><ROW><id>8556214</id><snippet>0</snippet></ROW><ROW><id>8556214</id><snippet>if (value &amp; 1): do_something_with_odd_value()...
</snippet></ROW><ROW><id>8556387</id><snippet>ids = Employee.objects.filter(company='Private').values_list('id', flat=True)
Person.objects.filter(id__in=ids).values('name', 'age')
</snippet></ROW><ROW><id>8556584</id><snippet>UTC</snippet></ROW><ROW><id>8556584</id><snippet>FixedOffset</snippet></ROW><ROW><id>8556662</id><snippet>open()</snippet></ROW><ROW><id>8556662</id><snippet>for line in f</snippet></ROW><ROW><id>8556662</id><snippet>-files hdfs://NN:9000/user/sup.txt#sup.txt</snippet></ROW><ROW><id>8556662</id><snippet>for line in open('sup.txt'):
    # do stuff
</snippet></ROW><ROW><id>8556787</id><snippet>tree = ET.XML(thexml)
et = ET.ElementTree(tree) # this is to include root node
for elem in et.getiterator(): #in python 2.7 or greater, getiterator() is unnecessary
    elem.tag = elem.tag.split('}', 1)[-1]
</snippet></ROW><ROW><id>8556787</id><snippet>cElementTree</snippet></ROW><ROW><id>8556787</id><snippet>import xml.etree.cElementTree as ET</snippet></ROW><ROW><id>8556912</id><snippet>class MyForm(forms.Form):
    def __init__(self, *args, **kwargs):
         super(MyForm, self).__init__(*args, **kwargs)
         for item in Item.objects.all():
              self.fields[item.name] = forms.BooleanField()
</snippet></ROW><ROW><id>8557044</id><snippet>dict</snippet></ROW><ROW><id>8557044</id><snippet>dict</snippet></ROW><ROW><id>8557044</id><snippet>is</snippet></ROW><ROW><id>8557044</id><snippet> type({}) is dict  # returns true.

 a = {}
 b = a
 a is b  # returns true
</snippet></ROW><ROW><id>8557173</id><snippet>def type_chooser(N):
  import numpy as np
  for dtype in [np.uint8, np.uint16, np.uint32, np.uint64]:
    if N &lt;= dtype(-1):
      return dtype
  raise StandardError('{} is really big!'.format(N))
</snippet></ROW><ROW><id>8557173</id><snippet>&gt;&gt;&gt; type_chooser(255)
&lt;type 'numpy.uint8'&gt;
&gt;&gt;&gt; type_chooser(256)
&lt;type 'numpy.uint16'&gt;
&gt;&gt;&gt; type_chooser(18446744073709551615)
&lt;type 'numpy.uint64'&gt;
&gt;&gt;&gt; type_chooser(18446744073709551616)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "spam.py", line 6, in type_chooser
    raise StandardError('{} is really big!'.format(N))
StandardError: 18446744073709551616 is really big!
</snippet></ROW><ROW><id>8557182</id><snippet>for s, sentence in enumerate(text.split('.')):
     for p, phrase in enumerate(text.split(',')):
         print('sentence #%d:','phrase #%d: %s' %(s+1,p+1,len(sentence),phrase)) 
</snippet></ROW><ROW><id>8557182</id><snippet>.</snippet></ROW><ROW><id>8557182</id><snippet>,</snippet></ROW><ROW><id>8557182</id><snippet>for p, phrase in enumerate(sentence.split(',')):
</snippet></ROW><ROW><id>8557182</id><snippet>TypeError</snippet></ROW><ROW><id>8557182</id><snippet>Integers(%d)</snippet></ROW><ROW><id>8557182</id><snippet>string(%d)</snippet></ROW><ROW><id>8557182</id><snippet>Integers</snippet></ROW><ROW><id>8557182</id><snippet>s+1</snippet></ROW><ROW><id>8557182</id><snippet>p+1</snippet></ROW><ROW><id>8557182</id><snippet>len(sentence)</snippet></ROW><ROW><id>8557182</id><snippet>phrase</snippet></ROW><ROW><id>8557182</id><snippet>len(sentence)</snippet></ROW><ROW><id>8557182</id><snippet>print('sentence #%d:, phrase #%d: %s' %(s+1,p+1,phrase)) 
</snippet></ROW><ROW><id>8557182</id><snippet>print('sentence #%d:, phrase #%d:, length #%d, %s' %(s+1,p+1,len(sentence),phrase)) 
</snippet></ROW><ROW><id>8557182</id><snippet>for s, sentence in enumerate(text.split('.')):
     for p, phrase in enumerate(text.split(',')):
         print('sentence #%d:, phrase #%d:, length #%d, %s' %(s+1,p+1,len(sentence),phrase)) 
</snippet></ROW><ROW><id>8557379</id><snippet>'...u.'</snippet></ROW><ROW><id>8557379</id><snippet>import re
str = 'linux windows mac'
a = re.compile('...u.',re.IGNORECASE)
a.match(str).group(0) # returns 'linux'

regex = '...u.'
b = re.compile(regex,re.IGNORECASE)
b.match(str).group(0) # returns 'linux'
</snippet></ROW><ROW><id>8557380</id><snippet>finditer</snippet></ROW><ROW><id>8557380</id><snippet>re</snippet></ROW><ROW><id>8557380</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'your code works with wrongly correlated coefficients which incorporates more costs'
&gt;&gt;&gt; matches = re.finditer('co', s)
&gt;&gt;&gt; positions = [ match.start() for match in matches ]
&gt;&gt;&gt; positions
[5, 29, 40, 61, 77]
</snippet></ROW><ROW><id>8557380</id><snippet>str.find</snippet></ROW><ROW><id>8557380</id><snippet>help(str.find)</snippet></ROW><ROW><id>8557380</id><snippet>S.find(sub [,start [,end]]) -&gt; int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within s[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
</snippet></ROW><ROW><id>8557380</id><snippet>start</snippet></ROW><ROW><id>8557380</id><snippet>str.find</snippet></ROW><ROW><id>8557380</id><snippet>def substring_match_exact(pattern, string, where_should_I_start=0):
    # Save the result in a variable to avoid doing the same thing twice
    pos = string.find(pattern, where_should_I_start)
    if pos == -1:
        # Not found!
        return []
    # No need for an else statement
    return [pos] + substring_match_exact(pattern, string, pos + len(key))
</snippet></ROW><ROW><id>8557380</id><snippet>[]</snippet></ROW><ROW><id>8557380</id><snippet>[pos]</snippet></ROW><ROW><id>8557380</id><snippet>pos + len(key)</snippet></ROW><ROW><id>8557380</id><snippet>&gt;&gt;&gt; s = 'your code works with wrongly correlated coefficients which incorporates more costs'
&gt;&gt;&gt; substring_match_exact('co', s)
[5, 29, 40, 61, 77]
</snippet></ROW><ROW><id>8557394</id><snippet>args</snippet></ROW><ROW><id>8557394</id><snippet>form</snippet></ROW><ROW><id>8557394</id><snippet>request.form</snippet></ROW><ROW><id>8557394</id><snippet>.get</snippet></ROW><ROW><id>8557394</id><snippet>if request.form.get('add', None) == "Like":
    # Like happened
elif request.form.get('remove', None) == "Dislike":
    # Dislike happened
</snippet></ROW><ROW><id>8557394</id><snippet>name</snippet></ROW><ROW><id>8557394</id><snippet>&lt;input type="submit" name="action" value="Like"&gt;
&lt;input type="submit" name="action" value="Dislike"&gt;

# and in your code
if request.form["action"] == "Like":
    # etc.
</snippet></ROW><ROW><id>8558028</id><snippet>signal</snippet></ROW><ROW><id>8558028</id><snippet>module.py</snippet></ROW><ROW><id>8558028</id><snippet>sys.modules</snippet></ROW><ROW><id>8558028</id><snippet>signal</snippet></ROW><ROW><id>8558028</id><snippet>sys.modules</snippet></ROW><ROW><id>8558028</id><snippet>import</snippet></ROW><ROW><id>8558028</id><snippet>signal.py</snippet></ROW><ROW><id>8558028</id><snippet>import</snippet></ROW><ROW><id>8558028</id><snippet>sys.path</snippet></ROW><ROW><id>8558028</id><snippet>signal</snippet></ROW><ROW><id>8558028</id><snippet>del sys.modules['signal']</snippet></ROW><ROW><id>8558028</id><snippet>signal</snippet></ROW><ROW><id>8558028</id><snippet>signal</snippet></ROW><ROW><id>8558028</id><snippet>import signal</snippet></ROW><ROW><id>8558028</id><snippet>signal</snippet></ROW><ROW><id>8558028</id><snippet>imp</snippet></ROW><ROW><id>8558028</id><snippet>import</snippet></ROW><ROW><id>8558028</id><snippet>sys.modules</snippet></ROW><ROW><id>8558028</id><snippet>import imp, sys

f, path, desc = imp.find_module('signal', sys.path)
if f:
    f.close()
    signal = imp.new_module('signal')
    execfile(path, signal.__dict__)
else:
    raise ImportError('signal.py not found')
# signal is your module
</snippet></ROW><ROW><id>8558028</id><snippet>import signal</snippet></ROW><ROW><id>8558028</id><snippet>sys.modules</snippet></ROW><ROW><id>8558160</id><snippet>clean_due_date</snippet></ROW><ROW><id>8558160</id><snippet>forms.ValidationError</snippet></ROW><ROW><id>8558160</id><snippet>core.exceptions.ValidationError</snippet></ROW><ROW><id>8558160</id><snippet>get_summary</snippet></ROW><ROW><id>8558160</id><snippet>get_description</snippet></ROW><ROW><id>8558309</id><snippet>site-packages</snippet></ROW><ROW><id>8558309</id><snippet>&gt;&gt;&gt; import somelib
&gt;&gt;&gt; print somelib.__file__
</snippet></ROW><ROW><id>8558680</id><snippet>def nameStatistics(nameList):
    D={}
    for firstName, lastName, unused in nameList:
        if lastName not in D:
            D[lastName]={}
        if firstName not in D[lastName]:
            D[lastName][firstName] = 0
        D[lastName][firstName] += 1
    # only print after all tuples are processed
    for lastName, stats in D.iteritems():
        print lastName + "\n"
        for firstName, frequency in stats.iteritems():
            print "\t{0}:  {1}\n".format(firstName, frequency/float(len(stats)))
</snippet></ROW><ROW><id>8558680</id><snippet>defaultdict</snippet></ROW><ROW><id>8558680</id><snippet>from collections import defaultdict

def nameStatistics(nameList):
    D = defaultdict(lambda: defaultdict(int))
    for firstName, lastName, unused in nameList:
        D[lastName][firstName] += 1
    # only print after all tuples are processed
    for lastName, stats in D.iteritems():
        print lastName + "\n"
        for firstName, frequency in stats.iteritems():
            print "\t{0}:  {1}\n".format(firstName, frequency/float(len(stats)))
</snippet></ROW><ROW><id>8558940</id><snippet> import stat, os

 stat.S_ISFIFO(os.stat(path).st_mode)
</snippet></ROW><ROW><id>8559215</id><snippet>data = ['a1_1 00000001\n', 'a1_2 00000002\n', 'a1_3 00000003\n', 'b1_1 00000004\n', 'b1_2 00000005\n', 'b1_3 00000006']

candidate = ['a', 'b']


for i in candidate:
    print i, ', '.join(v for k,v in (a.split() for a in data) if k.startswith(i))
</snippet></ROW><ROW><id>8559215</id><snippet>a 00000001, 00000002, 00000003
b 00000004, 00000005, 00000006
</snippet></ROW><ROW><id>8559215</id><snippet>data</snippet></ROW><ROW><id>8559215</id><snippet>candidate</snippet></ROW><ROW><id>8559215</id><snippet>d = {}
for a in data:
    d.setdefault(a[0], []).append(a.split()[1])
for k,v in sorted(d.iteritems()):
    print k, ', '.join(v)
</snippet></ROW><ROW><id>8559281</id><snippet>re.search("google", name)</snippet></ROW><ROW><id>8559281</id><snippet>if name not in uRLS:
    if re.search(r'\(', name) or re.search("&lt;", name) or re.search("\A/", name) or re.search("\A(http://)\d", name):
        pass
    elif re.search("google", name) or re.search("youtube", name) or re.search(".gov", name) or re.search("%", name):
        pass
    else:
        uRLS.append(name)
</snippet></ROW><ROW><id>8559281</id><snippet>elif</snippet></ROW><ROW><id>8559281</id><snippet>else</snippet></ROW><ROW><id>8559281</id><snippet>name</snippet></ROW><ROW><id>8559281</id><snippet>uRLS</snippet></ROW><ROW><id>8559281</id><snippet>name</snippet></ROW><ROW><id>8559281</id><snippet>else</snippet></ROW><ROW><id>8559281</id><snippet>else</snippet></ROW><ROW><id>8559281</id><snippet>append</snippet></ROW><ROW><id>8559281</id><snippet>pass</snippet></ROW><ROW><id>8559281</id><snippet>continue</snippet></ROW><ROW><id>8559379</id><snippet>def update_in_alist(alist, key, value):
    return [(k,v) if (k != key) else (key, value) for (k, v) in alist]

def update_in_alist_inplace(alist, key, value):
    alist[:] = update_in_alist(alist, key, value)

&gt;&gt;&gt; update_in_alist([('a', 'hello'), ('b', 'world')], 'b', 'friend')
[('a', 'hello'), ('b', 'friend')]
</snippet></ROW><ROW><id>8559414</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "abc#def#ghi#jkl"
&gt;&gt;&gt; re.findall(r"(?&lt;=#)[^#]+(?=#)", s)
['def', 'ghi']
</snippet></ROW><ROW><id>8559414</id><snippet>(?&lt;=#)  # Assert that the previous character is a #
[^#]+   # Match 1 or more non-# characters
(?=#)   # Assert that the next character is a #
</snippet></ROW><ROW><id>8560171</id><snippet>assert abs(x-y) &lt; 0.0001
</snippet></ROW><ROW><id>8560171</id><snippet>assert all([i==j for i,j in zip(tuple1,tuple2)])
</snippet></ROW><ROW><id>8560767</id><snippet>class ImageSet(models.Model):
    images = models.ManyToManyField('Image')

class Image(models.Model):
    image_file = models.ImageField()
    custom_text = models.CharField(max_length=255)
</snippet></ROW><ROW><id>8560767</id><snippet>class MyImageField(models.ImageField):
    my_class_attr = "BLARG"

    def my_method(self):
        print self.my_class_attr
</snippet></ROW><ROW><id>8561033</id><snippet>import urllib
import urllib2

name =  "name field"
data = {
        "name" : name 
       }

encoded_data = urllib.urlencode(data)
content = urllib2.urlopen("http://www.abc.com/messages.php?action=send",
        encoded_data)
print content.readlines()
</snippet></ROW><ROW><id>8561033</id><snippet>http://www.abc.com/messages.php?action=send</snippet></ROW><ROW><id>8561033</id><snippet>&lt;form method="POST" action="some_address.php"&gt;
</snippet></ROW><ROW><id>8561033</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>8561033</id><snippet>submit</snippet></ROW><ROW><id>8561033</id><snippet>Http</snippet></ROW><ROW><id>8561033</id><snippet>action</snippet></ROW><ROW><id>8561033</id><snippet>urllib2</snippet></ROW><ROW><id>8561248</id><snippet>&gt;&gt;&gt; valid_values = [(int, i) for i in [-1, 0, 1, 2, 3]]
&gt;&gt;&gt; invalid_values = [True, False, "foo"]
&gt;&gt;&gt; for value in [v[1] for v in valid_values] + invalid_values:
...   if (type(value), value) in valid_values:
...     print value, "is valid"
...   else:
...     print value, "is invalid"
... 
-1 is valid
0 is valid
1 is valid
2 is valid
3 is valid
True is invalid
False is invalid
foo is invalid
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8561344</id><snippet>class NoValue:
    pass

if someValue is NoValue:
    doSomething()
</snippet></ROW><ROW><id>8561581</id><snippet>query.filter(author__in=authors)</snippet></ROW><ROW><id>8561581</id><snippet>query = query.filter(author__in=authors)
print 'filtered ids ' + repr([x.author.id for x in query])
</snippet></ROW><ROW><id>8561607</id><snippet>class Scope(object):
    def __getitem__(self, key):
        return 'call for %s' % key

print final.substitute(Scope())
</snippet></ROW><ROW><id>8561643</id><snippet>model = anyModel.objects
for k,vals in request.GET.lists():
    for v in vals:
        model = model.filter(**{k: v})
</snippet></ROW><ROW><id>8561643</id><snippet>__contains</snippet></ROW><ROW><id>8561643</id><snippet>        model = model.filter(**{"%s__contains" % k: v})
</snippet></ROW><ROW><id>8561643</id><snippet>OR</snippet></ROW><ROW><id>8561643</id><snippet>in</snippet></ROW><ROW><id>8561643</id><snippet>model = anyModel.objects
for k,vals in request.GET.lists():
    model = model.filter(**{"%s__in" % k: vals})
</snippet></ROW><ROW><id>8561662</id><snippet>string_escape</snippet></ROW><ROW><id>8561662</id><snippet>&gt;&gt;&gt; s = raw_input()
(?i:\'sa\')
&gt;&gt;&gt; s
"(?i:\\'sa\\')"
&gt;&gt;&gt; len(s)
11
&gt;&gt;&gt; s.decode('string_escape')
"(?i:'sa')"
&gt;&gt;&gt; len(s.decode('string_escape'))
9
</snippet></ROW><ROW><id>8561686</id><snippet>compare</snippet></ROW><ROW><id>8561686</id><snippet>difference()</snippet></ROW><ROW><id>8561686</id><snippet>src</snippet></ROW><ROW><id>8561686</id><snippet>"ABC"</snippet></ROW><ROW><id>8561686</id><snippet>def compare(src, test):
    if len(src) != len(test):
        return # must be the same length
    diffmap = [0]*len(src)
    count = 0
    for i, c in enumerate(src):
        if not c == test[i]:
            count = count+1
            diffmap[i] = 1
    return test, count, diffmap
</snippet></ROW><ROW><id>8561686</id><snippet>compare_to_many</snippet></ROW><ROW><id>8561686</id><snippet>srcs</snippet></ROW><ROW><id>8561686</id><snippet>test</snippet></ROW><ROW><id>8561686</id><snippet>def compare_to_many(srcs, test):
    return map(lambda x: compare(x, test), srcs)
</snippet></ROW><ROW><id>8561686</id><snippet>def compare(test):
    def compare_one(src, test):
        diffmap = [0]*len(src)
        count = 0
        for i, c in enumerate(src):
        if not c == test[i]:
            count = count+1
            diffmap[i] = 1
        return test, count, diffmap
    sources = ["ABC", "CDB", "EUA"] # this is your hardcoded list
    return map(lambda x: compare_one(x, test), sources)
</snippet></ROW><ROW><id>8561713</id><snippet>gtk.Builder</snippet></ROW><ROW><id>8561713</id><snippet>gtk.Builder</snippet></ROW><ROW><id>8561713</id><snippet>.ui</snippet></ROW><ROW><id>8561713</id><snippet>.ui</snippet></ROW><ROW><id>8562135</id><snippet>import os
import Image
FNAME = '/tmp/test.png'
top = Image.open(FNAME).convert('RGBA')
new_w = new_h = max(top.size)
background = Image.new('RGBA', size = (new_w,new_h), color = (0, 0, 0, 0))
background.paste(top, (0, 0))
background.save('/tmp/result.png')
</snippet></ROW><ROW><id>8562158</id><snippet>python -B</snippet></ROW><ROW><id>8562158</id><snippet>:se nobackup
</snippet></ROW><ROW><id>8562177</id><snippet>for file, n in num.iteritems():
    print file, n
</snippet></ROW><ROW><id>8562331</id><snippet>fsolve</snippet></ROW><ROW><id>8562331</id><snippet>&gt;&gt;&gt; V_0 = 100
&gt;&gt;&gt; c_sqr = 3e8 ** 2
&gt;&gt;&gt; guess = 5
&gt;&gt;&gt; fsolve(func, guess)
array([ 5.00000079])
</snippet></ROW><ROW><id>8562331</id><snippet>&gt;&gt;&gt; func(5.00000079)
2114979.3239706755
</snippet></ROW><ROW><id>8562331</id><snippet>&gt;&gt;&gt; func(5.0000008)
6821403.0196130127
&gt;&gt;&gt; func(5.0000006)
-96874198.203683496
</snippet></ROW><ROW><id>8562331</id><snippet>tan</snippet></ROW><ROW><id>8562337</id><snippet>strip()</snippet></ROW><ROW><id>8562337</id><snippet>line = sum([[y.strip('"') for y in x.split(", ")] for x in lineList], [])
</snippet></ROW><ROW><id>8562432</id><snippet>dmesg</snippet></ROW><ROW><id>8562432</id><snippet>/var/log/messages</snippet></ROW><ROW><id>8562432</id><snippet>/var/log</snippet></ROW><ROW><id>8562432</id><snippet>ls -rt</snippet></ROW><ROW><id>8562432</id><snippet>ls -l /dev</snippet></ROW><ROW><id>8562432</id><snippet>crw--w----   1 root tty         4,   0 2011-12-19 09:15 tty0
</snippet></ROW><ROW><id>8562432</id><snippet>c</snippet></ROW><ROW><id>8562432</id><snippet>4, 0</snippet></ROW><ROW><id>8562432</id><snippet>4</snippet></ROW><ROW><id>8562432</id><snippet>/proc/devices</snippet></ROW><ROW><id>8562481</id><snippet>from dateutil import parser
parse_time = lambda s: parser.parse(s, ignoretz = True)

func_map = """
function() {
    if (this.hasOwnProperty("time"))
        emit(this.time.getUTCFullYear() + "/" + (this.time.getUTCMonth() + 1) + "/" + this.time.getUTCDate(),
        {
            count: 1,
            not_deleted: (1 - this.deleted)
        });
}
"""

func_reduce = """
function(key, values) {
    var result = {count: 0, not_deleted: 0};

    values.forEach(function(value) {
        result.count += value.count;
        result.not_deleted += value.not_deleted;
    });

    return result;
}
"""

with my_mongo() as m:
    result = m.data.inline_map_reduce(func_map, func_reduce)
    dataset = {parse_time(day['_id']): day['value']['not_deleted'] for day in result}
    dataset2 = {parse_time(day['_id']): day['value']['count'] for day in result}
</snippet></ROW><ROW><id>8562766</id><snippet>from distutils.core import setup, Extension

module1 = Extension('Simple',
                    sources = ['Simple.c'])

setup (name = 'Simple',
       version = '1.0',
       description = 'This is a Simple package',
       ext_modules = [module1])
</snippet></ROW><ROW><id>8562874</id><snippet>wm = pyinotify.WatchManager()
mask = pyinotify.EventsCodes.IN_CREATE
notifier = pyinotify.Notifier(wm, MyProcessEvent(path))
wdd = wm.add_watch(path, mask, rec=True, auto_add=True)
while True:
    try:
        notifier.process_events()
        if notifier.check_events():
            notifier.read_events()
    except KeyboardInterrupt:
        notifier.stop()
        break
</snippet></ROW><ROW><id>8562874</id><snippet>wm.add_watch</snippet></ROW><ROW><id>8562874</id><snippet>/proc/sys/fs/inotify/max_queued_events</snippet></ROW><ROW><id>8562874</id><snippet>% cat /proc/sys/fs/inotify/max_queued_events
16384
</snippet></ROW><ROW><id>8562874</id><snippet>IN_Q_OVERFLOW</snippet></ROW><ROW><id>8563133</id><snippet>[logger_zipper]
level=DEBUG
qualname=UPLOAD
handlers=zip
</snippet></ROW><ROW><id>8563133</id><snippet>log_z = logging.getLogger("zipper")
</snippet></ROW><ROW><id>8563133</id><snippet>qualname=zipper</snippet></ROW><ROW><id>8563133</id><snippet>logging.getLogger("zipper")</snippet></ROW><ROW><id>8563133</id><snippet>qualname=UPLOAD</snippet></ROW><ROW><id>8563133</id><snippet>logging.getLogger("UPLOAD")</snippet></ROW><ROW><id>8564116</id><snippet>data</snippet></ROW><ROW><id>8564116</id><snippet>next(d for d in data if d['name'] == 'SqueezePlay')['playerid']
</snippet></ROW><ROW><id>8564116</id><snippet>'91:e2:b5:24:49:63'</snippet></ROW><ROW><id>8564116</id><snippet>name</snippet></ROW><ROW><id>8564116</id><snippet>data</snippet></ROW><ROW><id>8564242</id><snippet>lxml</snippet></ROW><ROW><id>8564242</id><snippet>xpath expressions</snippet></ROW><ROW><id>8564242</id><snippet>from lxml import etree
doc = etree.XML("""
&lt;Group id="1" name="The Perfect Life"
    username="root" password="mypasswd123" state="ok"&gt;
    &lt;Server id="1" name="Machine (250)" ip="192.168.1.250" username="" password="" state="ok"&gt;
        &lt;App id="1" type="Tomcat" state="ok" /&gt;
    &lt;/Server&gt;
    &lt;Server id="2" name="Machine (251)" ip="192.168.1.251" username="" password="" state="ok"&gt;
        &lt;App id="1" type="JBoss" path="" state="ok" /&gt;
        &lt;App id="2" type="Tomcat" path="" state="ok" /&gt;
    &lt;/Server&gt;
    &lt;Server id="3" name="Machine (252)" ip="192.168.1.252" username="" password="" state="ok"&gt;
        &lt;App id="1" type="JBoss" path="" state="ok" /&gt;
        &lt;App id="2" type="Tomcat" path="" state="ok" /&gt;
    &lt;/Server&gt;
    &lt;Server id="4" name="Machine (253)" ip="192.168.1.253" username="" password="" state="ok"&gt;
        &lt;App id="1" type="JBoss" path="" state="ok" /&gt;
    &lt;/Server&gt;
&lt;/Group&gt;
""")

# group id from user
group_id = "1"
# unique apps under group_id
app_types = set(doc.xpath('//Group[@id=$group_id]/descendant::App/@type',group_id=group_id))
app_dict = dict((x+1,y) for (x,y) in enumerate(app_types))

print "Apps:\n\t" + "\n\t".join("%d) %s" % x for x in sorted(app_dict.items()))
app_selection = input("Select a service: ")
app_type = app_dict.get(int(app_selection))

# Servers in group_id with app_type
for server in doc.xpath('//Group[@id=$group_id]/Server[./App[@type=$app_type]]',group_id=group_id,app_type=app_type):
  print etree.tostring(server) # Don't know what you want to do per-server...
</snippet></ROW><ROW><id>8564242</id><snippet>Apps:
        1) JBoss
        2) Tomcat
Select a service: 1

&lt;Server id="2" name="Machine (251)" ip="192.168.1.251" username="" password="" state="ok"&gt;
        &lt;App id="1" type="JBoss" path="" state="ok"/&gt;
        &lt;App id="2" type="Tomcat" path="" state="ok"/&gt;
    &lt;/Server&gt;

&lt;Server id="3" name="Machine (252)" ip="192.168.1.252" username="" password="" state="ok"&gt;
        &lt;App id="1" type="JBoss" path="" state="ok"/&gt;
        &lt;App id="2" type="Tomcat" path="" state="ok"/&gt;
    &lt;/Server&gt;

&lt;Server id="4" name="Machine (253)" ip="192.168.1.253" username="" password="" state="ok"&gt;
        &lt;App id="1" type="JBoss" path="" state="ok"/&gt;
    &lt;/Server&gt;
</snippet></ROW><ROW><id>8564325</id><snippet>validated = dialogs.password_dialog(self, opts.generic['password'])
if validated:
    print "Yay"
else:
    print "Boo"
</snippet></ROW><ROW><id>8564369</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>8564369</id><snippet>inspect.getsource</snippet></ROW><ROW><id>8564369</id><snippet>&gt;&gt;&gt; import inspect

&gt;&gt;&gt; inspect.getargspec(inspect.getargspec)
ArgSpec(args=['func'], varargs=None, keywords=None, defaults=None)
&gt;&gt;&gt; print inspect.getsource(inspect.getsource)
def getsource(object):
    """Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    IOError is raised if the source code cannot be retrieved."""
    lines, lnum = getsourcelines(object)
    return string.join(lines, '')
</snippet></ROW><ROW><id>8564438</id><snippet>import numpy as np
def unique(a):
    a = np.sort(a)
    b = np.diff(a)
    b = np.r_[1, b]
    return a[b != 0]
</snippet></ROW><ROW><id>8564438</id><snippet>(b != 0).all(axis)</snippet></ROW><ROW><id>8564438</id><snippet>import numpy as np
def unique(a):
    order = np.lexsort(a.T)
    a = a[order]
    diff = np.diff(a, axis=0)
    ui = np.ones(len(a), 'bool')
    ui[1:] = (diff != 0).any(axis=1) 
    return a[ui]
</snippet></ROW><ROW><id>8564621</id><snippet>import psycopg2

for k in psycopg2.extensions.string_types.keys():
    del psycopg2.extensions.string_types[k]

cnn = psycopg2.connect('')
cur = cnn.cursor()
cur.execute("select 1::int, now()::timestamp, 'hello'::text")
cur.fetchone()
('1', '2011-12-19 16:50:11.396855', 'hello')
</snippet></ROW><ROW><id>8564760</id><snippet>line1.strip() == line2.strip()</snippet></ROW><ROW><id>8564760</id><snippet>in</snippet></ROW><ROW><id>8565063</id><snippet># define somewhere following:
import sys
import os
from contextlib import contextmanager

@contextmanager
def quiet():
    sys.stdout = sys.stderr = open(os.devnull, "w")
    try:
        yield
    finally:
        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__


# use it    
with quiet(): 
    # all is quiet in this scope
    import this  # just for testing
    from rpy import *  # or whatever you want
# and this will print something
import something_that_prints 
</snippet></ROW><ROW><id>8565218</id><snippet>post</snippet></ROW><ROW><id>8565218</id><snippet>django.views.generic.edit.ProcessFormView</snippet></ROW><ROW><id>8565218</id><snippet>dispatch</snippet></ROW><ROW><id>8565218</id><snippet>django.views.generic.base.View</snippet></ROW><ROW><id>8565486</id><snippet>dimVals</snippet></ROW><ROW><id>8565486</id><snippet>len(pwfs2Vals)</snippet></ROW><ROW><id>8565486</id><snippet>pwfs2Dates</snippet></ROW><ROW><id>8565486</id><snippet>[(date, array_index),...]</snippet></ROW><ROW><id>8565486</id><snippet>data[i]</snippet></ROW><ROW><id>8565486</id><snippet>pdates = iter(enumerate(pwfs2Dates))
i, datei = pdates.next() 

for datej, valuej in zip(dimmDates, dimvals):
    while datei &lt; datej - fiveMinutes:
        i, datei = pdates.next()
    while datei &lt; datej + fiveMinutes:
        data[i] = valuej
        i, datei = pdates.next()
</snippet></ROW><ROW><id>8565486</id><snippet>pwfs2Dates = sorted([(date, idx) for idx, date in enumerate(pwfs2Dates)])
dimmDates = sorted([(date, idx) for idx, date in enumerate(dimmDates)])
</snippet></ROW><ROW><id>8565486</id><snippet>pdates = iter(pwfs2Dates)
datei, i = pdates.next()

for datej, j in dimmDates:
    while datei &lt; datej - fiveMinutes:
        datei, i = pdates.next()
    while datei &lt; datej + fiveMinutes:
        data[i] = dimVals[j]
        datei, i = pdates.next()
</snippet></ROW><ROW><id>8565486</id><snippet>dimVals  = np.array(dict1[dimmKey]['values'])
</snippet></ROW><ROW><id>8565486</id><snippet>next</snippet></ROW><ROW><id>8565486</id><snippet>next(iterator)</snippet></ROW><ROW><id>8565486</id><snippet>iterator.next()</snippet></ROW><ROW><id>8565486</id><snippet>iterator.next()</snippet></ROW><ROW><id>8565486</id><snippet>iterator.__next__()</snippet></ROW><ROW><id>8565486</id><snippet>try/except</snippet></ROW><ROW><id>8565486</id><snippet>next()</snippet></ROW><ROW><id>8565486</id><snippet>try/except</snippet></ROW><ROW><id>8565826</id><snippet>import time
from multiprocessing.connection import Listener
from threading import Thread

_threads = []

def start_server_thread():
    global _threads
    _threads.append(Thread(target=threaded_server))
    _threads[-1].daemon = True
    _threads[-1].start()

def threaded_server():
    while True:
        conn = _listener.accept()
        print str(conn.recv())
        conn.close()


if __name__ == "__main__":
    _listener = Listener(('localhost', 5555), authkey='secret_password')

    start_server_thread()
    while True:
        time.sleep(1)

    _listener.close()
</snippet></ROW><ROW><id>8565826</id><snippet>import time
from multiprocessing.connection import Listener
from threading import Thread

class Server(Listener):

    def __init__(self, *args, **kwargs):
        super(Server, self).__init__(*args, **kwargs)
        self._thread = None
        self._stopping = False


    def serve(self):
        self._stopping = False
        self._thread = Thread(target=self._serve)
        self._thread.daemon = True
        self._thread.start()

    def _serve(self):
        threads = []
        while not self._stopping:
            conn = self.accept()
            t = Thread(target=self.handleConnection, args=(conn,))
            t.start()
            threads.append(t)


    def stop(self):
        if not self._stopping:
            print "Stopping."
            self._stopping = True
            self._thread.join(3)
            self.close()  

    def handleConnection(self, conn):
        print str(conn.recv())
        conn.close()        


if __name__ == "__main__":
    listener = Server(('localhost', 5555), authkey='secret_password')
    listener.serve()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt, e:
        listener.stop()
</snippet></ROW><ROW><id>8565884</id><snippet>QAplication</snippet></ROW><ROW><id>8565884</id><snippet>Example</snippet></ROW><ROW><id>8565884</id><snippet>FrameTester</snippet></ROW><ROW><id>8565884</id><snippet>FrameTester</snippet></ROW><ROW><id>8565884</id><snippet>Example</snippet></ROW><ROW><id>8565884</id><snippet>Example</snippet></ROW><ROW><id>8565884</id><snippet>QFrame</snippet></ROW><ROW><id>8565884</id><snippet>class Example(QFrame):
    def __init__(self, parent=None):
        super(Example, self).__init__(parent)
        self.setLineWidth(3)
        self.setFrameStyle(QFrame.Box|QFrame.Sunken)  
# ...    
</snippet></ROW><ROW><id>8565884</id><snippet>Widget</snippet></ROW><ROW><id>8565884</id><snippet>parent</snippet></ROW><ROW><id>8565884</id><snippet>__init__</snippet></ROW><ROW><id>8566595</id><snippet>class Car(models.Model):
    manufacturer = models.ForeignKey('Manufacturer')
    # ...

class Manufacturer(models.Model):
    # ...
</snippet></ROW><ROW><id>8566894</id><snippet>import csv
reader = csv.reader(open("file.csv", "rb"), delimiter=',')
for line in reader:
    if "-1" not in line:
        print line
</snippet></ROW><ROW><id>8566951</id><snippet>&gt;&gt;&gt; from pymongo import Connection
&gt;&gt;&gt; connection = Connection()
&gt;&gt;&gt; db = connection['test-database']
&gt;&gt;&gt; collection = db['test-collection']
</snippet></ROW><ROW><id>8567088</id><snippet>def find(q):
    return Pointer(q, 0)

class Pointer(object):
    def __init__(self, alist, index):
        self.alist = alist
        self.index = index

    def get(self):
        return self.alist[self.index]

    def set(self, value):
        self.alist[self.index] = value

list1 = [1, 2, 3]     
p = find(list1)
p.set(0)
print list1
</snippet></ROW><ROW><id>8567088</id><snippet>[0, 2, 3]
</snippet></ROW><ROW><id>8567571</id><snippet>python -c 'import test; print test.get_foo()'
</snippet></ROW><ROW><id>8567571</id><snippet>-c</snippet></ROW><ROW><id>8567571</id><snippet>RESULT_FOO=`python -c 'import test; print test.get_foo()'`
</snippet></ROW><ROW><id>8567571</id><snippet>RESULT=$(python -c 'import test; print test.get_foo()')
</snippet></ROW><ROW><id>8567571</id><snippet>$(…)</snippet></ROW><ROW><id>8567571</id><snippet>ALL_RESULTS=$(python -c 'import test; print test.get_foo(), test.get_bar()')
</snippet></ROW><ROW><id>8567571</id><snippet>RESULT_BAR=$(echo $ALL_RESULTS | cut -d' ' -f2)
</snippet></ROW><ROW><id>8567571</id><snippet>RESULT_BAR</snippet></ROW><ROW><id>8567571</id><snippet>-fn</snippet></ROW><ROW><id>8567837</id><snippet>description = movie.get('plot outline')
</snippet></ROW><ROW><id>8567837</id><snippet>movie.keys()
</snippet></ROW><ROW><id>8568126</id><snippet>np.mean(matrix_test, axis=0)
</snippet></ROW><ROW><id>8568126</id><snippet>mean, eigenvectors = cv.PCACompute(matrix_test, np.mean(matrix_test, axis=0).reshape(1,-1))
</snippet></ROW><ROW><id>8568297</id><snippet>str.format</snippet></ROW><ROW><id>8568297</id><snippet>&gt;&gt;&gt; print '{0:.16f}'.format(1.6)
1.6000000000000001

&gt;&gt;&gt; print '{0:.15f}'.format(1.6)
1.600000000000000
</snippet></ROW><ROW><id>8568297</id><snippet>1</snippet></ROW><ROW><id>8568297</id><snippet>&gt;&gt;&gt; print '%.16f' % 1.6
1.6000000000000001

&gt;&gt;&gt; print '%.15f' % 1.6
1.600000000000000
</snippet></ROW><ROW><id>8568372</id><snippet>from root.plugins.PluginManager import UI_Plugins
</snippet></ROW><ROW><id>8568372</id><snippet>root</snippet></ROW><ROW><id>8568372</id><snippet>python3 root/main.py
</snippet></ROW><ROW><id>8568372</id><snippet>root</snippet></ROW><ROW><id>8568372</id><snippet>textui.py</snippet></ROW><ROW><id>8568372</id><snippet>from plugins.PluginManager import UI_Plugins
</snippet></ROW><ROW><id>8568372</id><snippet>sys.path</snippet></ROW><ROW><id>8568372</id><snippet>root</snippet></ROW><ROW><id>8568372</id><snippet>plugins</snippet></ROW><ROW><id>8568372</id><snippet>main</snippet></ROW><ROW><id>8568392</id><snippet>myList[0:5]</snippet></ROW><ROW><id>8568392</id><snippet>any</snippet></ROW><ROW><id>8568392</id><snippet>True</snippet></ROW><ROW><id>8568392</id><snippet>if not any(myList[0:5]):
  # Code here to issue the warning.
</snippet></ROW><ROW><id>8568392</id><snippet>funcList = [f0, f1, f2, f3, f4]
for idx, test in enumerate(myList[0:5]):
  if test: funcList[idx]()
</snippet></ROW><ROW><id>8568392</id><snippet>myList = [f1, f2, None, f3, None, 24, "string", 50]
</snippet></ROW><ROW><id>8568392</id><snippet>for func in myList[0:5]:
  if func is not None: func()
</snippet></ROW><ROW><id>8569142</id><snippet>super</snippet></ROW><ROW><id>8569142</id><snippet>__setitem__</snippet></ROW><ROW><id>8569142</id><snippet>filter_out_spam(obj)
obj.put()
</snippet></ROW><ROW><id>8569258</id><snippet>import re

s = "alpha.Customer[cus_Y4o9qMEZAugtnW] ..."
m = re.search(r"\[([A-Za-z0-9_]+)\]", s)
print m.group(1)
</snippet></ROW><ROW><id>8569258</id><snippet>cus_Y4o9qMEZAugtnW
</snippet></ROW><ROW><id>8569258</id><snippet>re.search(...)</snippet></ROW><ROW><id>8569258</id><snippet>[card]</snippet></ROW><ROW><id>8569258</id><snippet>re.search()</snippet></ROW><ROW><id>8569258</id><snippet>\[</snippet></ROW><ROW><id>8569258</id><snippet>[</snippet></ROW><ROW><id>8569258</id><snippet>(</snippet></ROW><ROW><id>8569258</id><snippet>[A-Za-z0-9_]</snippet></ROW><ROW><id>8569258</id><snippet>+</snippet></ROW><ROW><id>8569258</id><snippet>)</snippet></ROW><ROW><id>8569258</id><snippet>\]</snippet></ROW><ROW><id>8569258</id><snippet>]</snippet></ROW><ROW><id>8569258</id><snippet>m = re.search(r"\[(\w+)\]", s)
</snippet></ROW><ROW><id>8569258</id><snippet>\w</snippet></ROW><ROW><id>8569258</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>8569258</id><snippet>re.LOCALE</snippet></ROW><ROW><id>8569258</id><snippet>re.UNICODE</snippet></ROW><ROW><id>8569450</id><snippet>unix philosophy</snippet></ROW><ROW><id>8569550</id><snippet>def put(self, localpath, remotepath, callback=None, confirm=True):
    [...]
    file_size = os.stat(localpath).st_size
    fl = file(localpath, 'rb')
    try:
        fr = self.file(remotepath, 'wb')
        fr.set_pipelined(True)
</snippet></ROW><ROW><id>8569632</id><snippet>    for i in xrange(0,12,4):
        for j in xrange(1,4):
            sub_list = list[i+j].strip(')').split('(')
            print list[i], sub_list[0], ' '.join(sub_list[1].split(','))
        print '\n'
</snippet></ROW><ROW><id>8569982</id><snippet>lambda x,y: id(x)==id(y)</snippet></ROW><ROW><id>8570010</id><snippet>Cmd.onecmd</snippet></ROW><ROW><id>8570010</id><snippet>tty.setcbreak</snippet></ROW><ROW><id>8570010</id><snippet>Cmd.cmdloop</snippet></ROW><ROW><id>8570010</id><snippet>#!/usr/bin/env python

from cmd import Cmd
from twisted.internet import reactor

class CommandProcessor(Cmd):
    def do_EOF(self, line):
        return True

    def do_YEP(self, line):
        reactor.callFromThread(on_main_thread, "YEP")

    def do_NOPE(self, line):
        reactor.callFromThread(on_main_thread, "NOPE")

def on_main_thread(item):
    print "doing", item

def heartbeat():
    print "heartbeat"
    reactor.callLater(1.0, heartbeat)

reactor.callLater(1.0, heartbeat)
reactor.callInThread(CommandProcessor().cmdloop)
reactor.run()
</snippet></ROW><ROW><id>8570012</id><snippet>getattr(myUser.profile, 'get_setting_c')</snippet></ROW><ROW><id>8570012</id><snippet>eval</snippet></ROW><ROW><id>8570014</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>8570014</id><snippet>&gt;&gt;&gt; soup('div', text='John')
[u'John']
&gt;&gt;&gt; import re
&gt;&gt;&gt; soup('div', text=re.compile('Jo'))
[u'John', u'Joe']
</snippet></ROW><ROW><id>8570014</id><snippet>soup()</snippet></ROW><ROW><id>8570014</id><snippet>soup.findAll()</snippet></ROW><ROW><id>8570014</id><snippet>ElementTree</snippet></ROW><ROW><id>8570014</id><snippet>from xml.etree import cElementTree as etree

xml = """
    &lt;div&gt;Bill&lt;/div&gt;
    &lt;div&gt;John&lt;/div&gt;
    &lt;div&gt;Joe&lt;/div&gt;
"""
root = etree.fromstring("&lt;root&gt;%s&lt;/root&gt;" % xml)
for div in root.getiterator('div'):
    if "John" in div.text:
       print(etree.tostring(div))
</snippet></ROW><ROW><id>8570029</id><snippet>from datetime import datetime, timedelta

def parse_iso8601_datetime(dtstr, loose=False):
    """
    Convert ISO8601 datetime string and return Python datetime.datetime.
    Specify loose=True for more relaxed parsing accepting eg "YYYY-MM-DD" format.

    Raise ValueError on malformed input.
    """
    dt = None
    if len(dtstr) == 19:    # (eg '2010-05-07T23:12:51')
        dt = datetime.strptime(dtstr, "%Y-%m-%dT%H:%M:%S")
    elif len(dtstr) == 20:  # (eg '2010-05-07T23:12:51Z')
        dt = datetime.strptime(dtstr, "%Y-%m-%dT%H:%M:%SZ")
    elif len(dtstr) == 25:  # (eg '2010-05-07T23:12:51-08:00')
        dt = datetime.strptime(dtstr[0:19], "%Y-%m-%dT%H:%M:%S")
        tzofs = int(dtstr[19:22])
        dt = dt - timedelta(hours=tzofs)
    else:
        if loose:
            if len(dtstr) == 10:  # (eg '2010-05-07')
                dt = datetime.strptime(dtstr, "%Y-%m-%d")
        if not dt:
            raise ValueError("Invalid ISO8601 format: '%s'" % dtstr)
    return dt
</snippet></ROW><ROW><id>8570048</id><snippet>from operator import add,sub,mul,div
funcs = [add,sub,mul,div]
die = [1,2,3,4,5,6]

results = [f(x,y) if y != 0 else None for x in die for y in [g(z,w) for z in die for w in die for g in funcs] for f in funcs]
</snippet></ROW><ROW><id>8570048</id><snippet>def results(funcs, xs, ys):
  out = []
  for f in funcs:
    for x in xs:
      for y in ys:
        try:
          out.append(f(x,y))
        except ZeroDivisionError:
          pass
  return out
</snippet></ROW><ROW><id>8570048</id><snippet>results(funcs,die,results(funcs,die,die))</snippet></ROW><ROW><id>8570048</id><snippet>set</snippet></ROW><ROW><id>8570048</id><snippet>list</snippet></ROW><ROW><id>8570048</id><snippet>results</snippet></ROW><ROW><id>8570048</id><snippet>def results(funcs, xs, ys):
  for f in funcs:
    for x in xs:
      for y in ys:
        try:
          yield f(x,y)
        except ZeroDivisionError:
          pass
</snippet></ROW><ROW><id>8570432</id><snippet>@echo off
cls
python C:\Your\File\uploadscript.py %1
</snippet></ROW><ROW><id>8570432</id><snippet>import sys
sys.argv  #sys.argv[1] is the file to upload
</snippet></ROW><ROW><id>8570432</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>8570432</id><snippet>@echo off
cls
:upload_loop
IF "%1"=="" GOTO completed
  python C:\Your\File\uploadscript.py %1
  SHIFT
  GOTO upload_loop
:completed
</snippet></ROW><ROW><id>8570694</id><snippet>if idx &lt; len(array):
  array[idx]
else:
  #handle this
</snippet></ROW><ROW><id>8570694</id><snippet>try:
  array[idx]
except IndexError:
  #handle this
</snippet></ROW><ROW><id>8570969</id><snippet>send_task("tasks.test_task", task_id=task_id, queue=queue)
</snippet></ROW><ROW><id>8571369</id><snippet>\b</snippet></ROW><ROW><id>8571489</id><snippet>python</snippet></ROW><ROW><id>8571489</id><snippet>django</snippet></ROW><ROW><id>8571489</id><snippet>&lt;input type="submit"&gt;</snippet></ROW><ROW><id>8571489</id><snippet>name</snippet></ROW><ROW><id>8571489</id><snippet>&lt;input type="submit" value="edit" name="summary" /&gt;</snippet></ROW><ROW><id>8571489</id><snippet>summary</snippet></ROW><ROW><id>8571489</id><snippet>request.POST</snippet></ROW><ROW><id>8571489</id><snippet># form snippet
&lt;input type="submit" value="Edit Summary" name="summary" /&gt;
&lt;input type="submit" value="Edit Due Date" name="due_date" /&gt;

# view snippet
if request.POST.get('summary'):
    print('user clicked summary')
elif request.POST.get('due_date'):
    print('user clicked due date')
</snippet></ROW><ROW><id>8571878</id><snippet>class Copy:
    def __init__(self,Obj):
        la = Label(win, text = "Source Directory is",font = "verdana 12 italic bold", width = 20,fg = "Red", bg = "WHITE", )
        la.grid(row=1, column =1)
        #SET abc HERE
        abc = "tk_chooseDirectory"
        bu = Button(text="Source", font = "Verdana 12 italic", command= abc )
        bu.grid(row =1 , column =3)


        la1 = Label(win, text = "DestibationDirectory is",font = "verdana 12 italic bold", width = 20,fg = "Red", bg = "WHITE", )
        la1.grid(row=2, column =1)
        #SET abc1 HERE
        abc1 = "tk_chooseDirectory"
        bu1 = Button(text="Destination", font = "Verdana 12 italic", command=abc1)
        bu1.grid(row =2 , column =3)


        def start():
            #RUN WITH abc AND abc1
            shutil.copy(abc, abc1)
</snippet></ROW><ROW><id>8571878</id><snippet>tk_chooseDirectory</snippet></ROW><ROW><id>8571878</id><snippet>tk_chooseDirectory</snippet></ROW><ROW><id>8571878</id><snippet>shutil.copy()</snippet></ROW><ROW><id>8572153</id><snippet>class A(object):
    bar = 1

a = A()
b = A()
b.bar = 2
print a.bar  # outputs 1
A.bar = 3
print a.bar  # outputs 3
print b.bar  # outputs 2
</snippet></ROW><ROW><id>8572153</id><snippet>b.bar</snippet></ROW><ROW><id>8572153</id><snippet>b.bar = 2</snippet></ROW><ROW><id>8572153</id><snippet>a.bar</snippet></ROW><ROW><id>8572153</id><snippet>b.bar</snippet></ROW><ROW><id>8572662</id><snippet>ListlinkerHref = driver.find_elements_by_xpath("//*[@href]")
</snippet></ROW><ROW><id>8572676</id><snippet> f2py.py -c -m SOMEDIFFERENTNAME itimes-s2.f
</snippet></ROW><ROW><id>8572676</id><snippet>pythonmodule.fortranmodule.yourfunction()</snippet></ROW><ROW><id>8572820</id><snippet>failUnlessEqual</snippet></ROW><ROW><id>8572820</id><snippet>test_01a</snippet></ROW><ROW><id>8572820</id><snippet>new_method</snippet></ROW><ROW><id>8572918</id><snippet>self.z</snippet></ROW><ROW><id>8572918</id><snippet>self.a</snippet></ROW><ROW><id>8572918</id><snippet>self.y</snippet></ROW><ROW><id>8572918</id><snippet>import itertools
itertools.chain(self.a, self.z, [self.y])
</snippet></ROW><ROW><id>8572918</id><snippet>class C(object):
    def __init__(self, y, z, a):
        # ...

    def __iter__(self):
        return itertools.chain(self.a, self.z, [self.y])
</snippet></ROW><ROW><id>8573072</id><snippet>import os

# ...

[v for v in options.itervalues() if os.path.exists(v)]
</snippet></ROW><ROW><id>8573277</id><snippet>def test(i1, i2):
    try:
        i1 = int(i1)
        i2 = int(i2)
    except ValueError:
        print "you failed in typing a number"

def input(): 
    i1 = raw_input('please type a number \n &gt;')
    i2 = raw_input('please type a number \n &gt;')
    test(i1, i2)   # here we call directly test() with entered "numbers"
</snippet></ROW><ROW><id>8573277</id><snippet>def test(i1, i2):
    try:
        i1 = int(i1)
        i2 = int(i2)
    except ValueError:
        print "you failed in typing a number"
    return i1, i2
    
def input(): 
    i1 = raw_input('please type a number \n &gt;')
    i2 = raw_input('please type a number \n &gt;')
    return i1, i2
</snippet></ROW><ROW><id>8573277</id><snippet>&gt;&gt;&gt;var1, var2 = input()
please insert a number
&gt; 3
please insert a number
&gt; 2 
&gt;&gt;&gt;test(var1, var2)
</snippet></ROW><ROW><id>8573355</id><snippet>@view_config(route_name='route', xhr=True, renderer='json')
@view_config(route_name='route', renderer='r.mako')
@view_config(route_name='route', request_param='fmt=json', renderer='json')
def r(request):
    # ...
</snippet></ROW><ROW><id>8573355</id><snippet>request.override_renderer = 'b.mako'</snippet></ROW><ROW><id>8573355</id><snippet>render</snippet></ROW><ROW><id>8573355</id><snippet>render_to_response</snippet></ROW><ROW><id>8573355</id><snippet>renderer</snippet></ROW><ROW><id>8573355</id><snippet>Response</snippet></ROW><ROW><id>8573355</id><snippet>xhr</snippet></ROW><ROW><id>8573634</id><snippet>debug()</snippet></ROW><ROW><id>8573634</id><snippet>logging</snippet></ROW><ROW><id>8573634</id><snippet>#!/usr/bin/env python

import logging
import inspect

def buggy_fn():
    d = 42;
    if d != 69:
        logging.debug('%s(%d): %s is not what we expected. [%s]',
                inspect.currentframe().f_back.f_code.co_filename,
                inspect.currentframe().f_back.f_lineno,
                'd',
                repr(d),
                )

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    buggy_fn()
</snippet></ROW><ROW><id>8573634</id><snippet>DEBUG:root:./buggy.py(19): d is not what we expected. [42]
</snippet></ROW><ROW><id>8573634</id><snippet>inspect</snippet></ROW><ROW><id>8573933</id><snippet>Version Control System</snippet></ROW><ROW><id>8573933</id><snippet>mercurial</snippet></ROW><ROW><id>8573933</id><snippet>git</snippet></ROW><ROW><id>8574085</id><snippet>os.system</snippet></ROW><ROW><id>8574085</id><snippet>os.popen</snippet></ROW><ROW><id>8574085</id><snippet>regsvr32 AutoItX3.dll</snippet></ROW><ROW><id>8574085</id><snippet>import win32com.client</snippet></ROW><ROW><id>8574085</id><snippet>autoit = win32com.client.Dispatch("AutoItX3.Control")</snippet></ROW><ROW><id>8574085</id><snippet>autoit.AnyAutoitMethod()</snippet></ROW><ROW><id>8574274</id><snippet>SIGTERM</snippet></ROW><ROW><id>8574274</id><snippet>on_exit</snippet></ROW><ROW><id>8574274</id><snippet>import os, sys
def set_exit_handler(func):
    if os.name == "nt":
        try:
            import win32api
            win32api.SetConsoleCtrlHandler(func, True)
        except ImportError:
            version = '.'.join(map(str, sys.version_info[:2]))
            raise Exception('pywin32 not installed for Python ' + version)
    else:
        import signal
        signal.signal(signal.SIGTERM, func)

if __name__ == '__main__':
    def on_exit(sig, func=None):
        f = open('log.txt', 'w')
        f.write('shutdown...')
        f.close()
        sys.exit()
    set_exit_handler(on_exit)
    print 'Press  to quit'
    raw_input()
    print 'quit!'
</snippet></ROW><ROW><id>8574851</id><snippet>[HKEY_LOCAL_MACHINE\SOFTWARE\Adobe\Adobe Acrobat]
[HKEY_LOCAL_MACHINE\SOFTWARE\Adobe\Adobe Acrobat\9.0]
[HKEY_LOCAL_MACHINE\SOFTWARE\Adobe\Adobe Acrobat\9.0\Installer]
"AppInit_DLLs"="acaptuser64.dll"
</snippet></ROW><ROW><id>8574971</id><snippet>&gt;&gt;&gt; d = """
... Some text here(div,span,img tags)
...
... &lt;!-- 3GP||**Some link**|| --&gt;
...
... Some text here(div,span,img tags)
... """
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\&lt;!-- 3GP\|\|([^|]+)\|\| --\&gt;',d)
['**Some link**']
</snippet></ROW><ROW><id>8574971</id><snippet>r''</snippet></ROW><ROW><id>8574971</id><snippet>\&lt;!-- 3GP\|\|</snippet></ROW><ROW><id>8574971</id><snippet>&lt;!-- 3GP||</snippet></ROW><ROW><id>8574971</id><snippet>([^|]+)</snippet></ROW><ROW><id>8574971</id><snippet>|</snippet></ROW><ROW><id>8574971</id><snippet>\|\| --\&gt;</snippet></ROW><ROW><id>8574971</id><snippet>|| --&gt;</snippet></ROW><ROW><id>8574971</id><snippet>re.findall</snippet></ROW><ROW><id>8575569</id><snippet>import matplotlib.pyplot as plt

plt.plot(x, y)
plt.plot(z, t)
plt.show()
</snippet></ROW><ROW><id>8575569</id><snippet>import matplotlib.pyplot as plt
from matplotlib import interactive
interactive(True)

plt.plot(x, y)
raw_input('press return to continue')

plt.plot(z, t)
raw_input('press return to end')
</snippet></ROW><ROW><id>8575778</id><snippet>DATABASE = 'C:\xampp\htdocs\maraschino\maraschino.db'
</snippet></ROW><ROW><id>8575778</id><snippet>DATABASE = 'C:/xampp/htdocs/maraschino/maraschino.db'
</snippet></ROW><ROW><id>8575791</id><snippet>bar</snippet></ROW><ROW><id>8575791</id><snippet>foo</snippet></ROW><ROW><id>8575791</id><snippet>from mock import Mock

from dirBar import bar
bar.returnBar = Mock(return_value='Foo')

from foo import printFoo

printFoo()
</snippet></ROW><ROW><id>8575791</id><snippet>returnBar</snippet></ROW><ROW><id>8575791</id><snippet>foo.py</snippet></ROW><ROW><id>8575791</id><snippet>returnBar</snippet></ROW><ROW><id>8575791</id><snippet>printFoo()</snippet></ROW><ROW><id>8575791</id><snippet>foo</snippet></ROW><ROW><id>8575791</id><snippet>foo</snippet></ROW><ROW><id>8575791</id><snippet>bar</snippet></ROW><ROW><id>8575791</id><snippet>foo.py</snippet></ROW><ROW><id>8575791</id><snippet>returnBar()</snippet></ROW><ROW><id>8575791</id><snippet>from dirBar import bar

def printFoo():
    print bar.returnBar()
</snippet></ROW><ROW><id>8575791</id><snippet>returnBar()</snippet></ROW><ROW><id>8575791</id><snippet>bar</snippet></ROW><ROW><id>8575992</id><snippet>soup = BeautifulSoup(html)

if soup.title != None:
    print soup.title # '&lt;title&gt;Google&lt;/title&gt;'
    print soup.title.renderContents() # 'Google'
    f.writelines(domain)
    f.writelines("  ")
    f.writelines(soup.title.renderContents())
    f.writelines("\n")
</snippet></ROW><ROW><id>8576049</id><snippet>testobj = type('testclass', (object,), 
                 {'test':[a1,a2,b2], 'test2':'something else', 'test3':1})()
</snippet></ROW><ROW><id>8576733</id><snippet>&lt;div id="chart1"&gt; &lt;/div&gt;
</snippet></ROW><ROW><id>8576733</id><snippet>&lt;div id="chart1" style="height:300px;width:500px; "&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>8576733</id><snippet>plot1 = $.jqplot('chart1', [dataSet1, dataSet2], chartOptions)
</snippet></ROW><ROW><id>8577020</id><snippet>assumptions = {'assume01': {'fund1':10, 'fund2':15, 'fund3':12},
               'assume02': {'fund1':1000, 'fund3':950},   
               'assume03': {'fund1':3, 'fund2':2, 'fund3':3}}

def fund_assumptions(fund):
    return dict((k, assumptions[k].get(fund)) for k in assumptions)

print fund_assumptions('fund2')
#prints {'assume02': None, 'assume03': 2, 'assume01': 15}
</snippet></ROW><ROW><id>8577046</id><snippet>result = tuple(itertools.izip_longest(l, (x[1] for x in f for y in range(x[0])), fillvalue='None'))
</snippet></ROW><ROW><id>8577073</id><snippet>long_string = '''
this is a really
really
really
long
string
'''
</snippet></ROW><ROW><id>8577073</id><snippet>"""</snippet></ROW><ROW><id>8577093</id><snippet>nb = wxNotebook(panel1)
page1 = PageOne(nb)
page2 = PageTwo(nb)

nb.AddPage(page1, "Tab 1")
nb.AddPage(page2, "Tab 2")
</snippet></ROW><ROW><id>8577093</id><snippet>self.PTWO=PageTwo(self)
self.PTWO.Show()
</snippet></ROW><ROW><id>8577093</id><snippet>class PageOne(wxPanel):
    def __init__(self, parent, page2):
        wxPanel.__init__(self, parent)
        self.PTWO=page2
</snippet></ROW><ROW><id>8577093</id><snippet>nb = wxNotebook(panel1)
page2 = PageTwo(nb)
page1 = PageOne(nb, page2)
</snippet></ROW><ROW><id>8577225</id><snippet>tempfile</snippet></ROW><ROW><id>8577225</id><snippet>new_file = open("path/to/FILE_NAME.ext", "w")
</snippet></ROW><ROW><id>8577225</id><snippet>write</snippet></ROW><ROW><id>8577225</id><snippet>new_file.write('this is some content')
</snippet></ROW><ROW><id>8577225</id><snippet>tempfile</snippet></ROW><ROW><id>8577225</id><snippet>import tempfile

new_file, _ = tempfile.mkstemp()
</snippet></ROW><ROW><id>8577225</id><snippet>mkstemp</snippet></ROW><ROW><id>8577298</id><snippet>--- _sctp.c~    2011-12-20 16:48:45.000000000 +0200
+++ _sctp.c 2011-12-20 16:49:23.498912252 +0200
@@ -832,8 +832,9 @@
 {
    PyObject* ret = 0;
    int fd;
+   char padding[4]; // Happily overflowing here...
    struct sctp_event_subscribe v;
-   socklen_t lv = sizeof(v);
+   socklen_t lv = 10; // Come to think of it, it could have been 9 at some point

    if (PyArg_ParseTuple(args, "i", &amp;fd)) {
        if (getsockopt(fd, SOL_SCTP, SCTP_EVENTS, &amp;v, &amp;lv)) {
</snippet></ROW><ROW><id>8577381</id><snippet>G</snippet></ROW><ROW><id>8577381</id><snippet>out_degree</snippet></ROW><ROW><id>8577381</id><snippet>outdeg = G.out_degree()
to_remove = [n for n in outdeg if outdeg[n] == 1]
</snippet></ROW><ROW><id>8577381</id><snippet>G.remove_nodes_from(to_remove)
</snippet></ROW><ROW><id>8577381</id><snippet>to_keep = [n for n in outdeg if outdeg[n] != 1]
G.subgraph(to_keep)
</snippet></ROW><ROW><id>8577560</id><snippet>non_recursive_expmod</snippet></ROW><ROW><id>8577560</id><snippet>%m</snippet></ROW><ROW><id>8577560</id><snippet>x</snippet></ROW><ROW><id>8577560</id><snippet>y</snippet></ROW><ROW><id>8577560</id><snippet>y</snippet></ROW><ROW><id>8577560</id><snippet>y = y // 2</snippet></ROW><ROW><id>8577560</id><snippet>def non_recursive_expmod(x, y, m):
    result = 1
    while y &gt; 0:
        if y % 2 == 1:
            result = (result * x) % m
        x = (x * x) % m
        y = y // 2
    return result
</snippet></ROW><ROW><id>8577583</id><snippet>tail</snippet></ROW><ROW><id>8577583</id><snippet>from ConfigParser import ConfigParser
from subprocess import Popen

config = ConfigParser()
config.read('/etc/harvest.conf')
filenames = [value for name, value in config.items('files')]

process = Popen(['tail', '-f'] + filenames)
process.communicate()
</snippet></ROW><ROW><id>8577616</id><snippet>\d</snippet></ROW><ROW><id>8577616</id><snippet>+</snippet></ROW><ROW><id>8577616</id><snippet>\d+\.\d+
</snippet></ROW><ROW><id>8577616</id><snippet>[...]</snippet></ROW><ROW><id>8577616</id><snippet>[^...]</snippet></ROW><ROW><id>8577616</id><snippet>\d</snippet></ROW><ROW><id>8577616</id><snippet>\w</snippet></ROW><ROW><id>8577616</id><snippet>()</snippet></ROW><ROW><id>8577616</id><snippet>(ab)+</snippet></ROW><ROW><id>8577616</id><snippet>ab</snippet></ROW><ROW><id>8577652</id><snippet>datetime.datetime()
</snippet></ROW><ROW><id>8577652</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>8577652</id><snippet>datetime()
</snippet></ROW><ROW><id>8577756</id><snippet>is</snippet></ROW><ROW><id>8577756</id><snippet>current != problem.getStartState()</snippet></ROW><ROW><id>8577756</id><snippet>is (not) None</snippet></ROW><ROW><id>8577756</id><snippet>None</snippet></ROW><ROW><id>8578003</id><snippet>import win32com.client
eng=win32com.client.gencache.EnsureDispatch("DAO.DBEngine.36")
eng.CreateDatabase("c:\\myNewAccessdB.mdb", win32com.client.constants.dbLangGeneral)
</snippet></ROW><ROW><id>8578092</id><snippet>def func():
  i = 3
  def inc():
    nonlocal i
    i = i+3
  print(i)
  inc()
  inc()
  print(i)

func()
</snippet></ROW><ROW><id>8578092</id><snippet>global</snippet></ROW><ROW><id>8578333</id><snippet>/var/www/trio</snippet></ROW><ROW><id>8578333</id><snippet>trio</snippet></ROW><ROW><id>8578333</id><snippet>settings</snippet></ROW><ROW><id>8578333</id><snippet>trio.settings</snippet></ROW><ROW><id>8578355</id><snippet>functools.partial</snippet></ROW><ROW><id>8578355</id><snippet>from functools import partial
setCallback(partial(myObj.callbackFunction), param="x")
</snippet></ROW><ROW><id>8578355</id><snippet>lambda</snippet></ROW><ROW><id>8578355</id><snippet>setCallback(lambda param, data: myObj.callbackFunction(param, data), param="x")
</snippet></ROW><ROW><id>8578508</id><snippet>dict(Config.items('Section'))
</snippet></ROW><ROW><id>8578589</id><snippet>zip</snippet></ROW><ROW><id>8578589</id><snippet>x, y = zip(*a)
</snippet></ROW><ROW><id>8578832</id><snippet>/home/loop.py</snippet></ROW><ROW><id>8578832</id><snippet>-b</snippet></ROW><ROW><id>8578832</id><snippet>-b</snippet></ROW><ROW><id>8578832</id><snippet>-stdout</snippet></ROW><ROW><id>8578832</id><snippet>sudo /sbin/start-stop-daemon --start --pidfile /home/loop.pid \ 
--user www-data --group www-data -b --make-pidfile --chuid www-data \
--exec /usr/bin/python /home/loop.py --verbose -stdout /var/log/loop.log
</snippet></ROW><ROW><id>8579223</id><snippet># Process --set command line option
import sys
# This module can be imported several times,
# check if the option has been retrieved already.
if not hasattr(sys, 'arg_set'):
    # Search for the option.
    args = filter(lambda arg: arg[:6] == '--set=', sys.argv[1:])
    if len(args) &gt; 0:
        expr = args[0][6:]
        # Remove the option from argument list, because the actual command
        # knows nothing about it.
        sys.argv.remove(args[0])
    else:
        # --set is not provided.
        expr = ''
    # Save option value for future use.
    sys.arg_set = expr
# Execute the option value.
exec sys.arg_set
</snippet></ROW><ROW><id>8579223</id><snippet>./manage.py runserver --set="DEBUG=True ; TEMPLATE_DEBUG=True"
</snippet></ROW><ROW><id>8580309</id><snippet>ElementTree.fromstring()</snippet></ROW><ROW><id>8580309</id><snippet>ElementTree.ElementTree(root)</snippet></ROW><ROW><id>8580309</id><snippet>from xml.etree import ElementTree
tree = ElementTree.ElementTree(ElementTree.fromstring(&lt;your_xml_string&gt;))
</snippet></ROW><ROW><id>8580309</id><snippet>from xml.etree.ElementTree import fromstring, ElementTree
tree = ElementTree(fromstring(&lt;your_xml_string&gt;))
</snippet></ROW><ROW><id>8580461</id><snippet>QHeaderView</snippet></ROW><ROW><id>8580461</id><snippet>table.horizontalHeader().setStretchLastSection(True)
</snippet></ROW><ROW><id>8580461</id><snippet>ResizeMode</snippet></ROW><ROW><id>8580461</id><snippet>table.setColumnWidth(1, 80)
table.horizontalHeader().setResizeMode(0, QHeaderView.Stretch)
</snippet></ROW><ROW><id>8580581</id><snippet>def blarg = ("blargidy", "blarg")

val (i, j) = blarg
</snippet></ROW><ROW><id>8580581</id><snippet>val list = 1 :: 2 :: 3 :: Nil

val x :: y = list // x = 1 and y = 2 :: 3 :: Nil
</snippet></ROW><ROW><id>8580720</id><snippet>QMimeData</snippet></ROW><ROW><id>8580720</id><snippet>def dragEnterEvent(self, event):
    if event.mimeData().hasUrls():
        event.accept()
    else:
        event.ignore()

def dropEvent(self, event):
    for url in event.mimeData().urls():
        path = url.toLocalFile().toLocal8Bit().data()
        if os.path.isfile(path):
            print path
            # do other stuff with path...
</snippet></ROW><ROW><id>8580772</id><snippet>twistd</snippet></ROW><ROW><id>8581046</id><snippet>main()</snippet></ROW><ROW><id>8581046</id><snippet>parseContents</snippet></ROW><ROW><id>8581046</id><snippet>join</snippet></ROW><ROW><id>8581046</id><snippet>join</snippet></ROW><ROW><id>8581046</id><snippet>queue.get</snippet></ROW><ROW><id>8581196</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title)

        self.rootPanel = wx.Panel(self)

        innerPanel = wx.Panel(self.rootPanel,-1, size=(150,150), style=wx.ALIGN_CENTER)
        innerPanel.SetBackgroundColour('WHITE')
        hbox = wx.BoxSizer(wx.HORIZONTAL) 
        vbox = wx.BoxSizer(wx.VERTICAL)
        innerBox = wx.BoxSizer(wx.VERTICAL)

        # I want this line visible in the CENTRE of the inner panel
        txt = wx.StaticText(innerPanel, id=-1, label="TEXT HERE",style=wx.ALIGN_CENTER, name="")
        innerBox.AddSpacer((150,75))
        innerBox.Add(txt, 0, wx.CENTER)
        innerBox.AddSpacer((150,75))
        innerPanel.SetSizer(innerBox)

        hbox.Add(innerPanel, 0, wx.ALL|wx.ALIGN_CENTER)
        vbox.Add(hbox, 1, wx.ALL|wx.ALIGN_CENTER, 5)

        self.rootPanel.SetSizer(vbox)
        vbox.Fit(self)

class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame(None, -1, 'wxBoxSizer.py')
        frame.Show(True)
        frame.Center()
        return True

app = MyApp(0)
app.MainLoop()
</snippet></ROW><ROW><id>8581725</id><snippet>#include "Python.h"

int
main(int argc, char **argv)
{
    return Py_Main(argc, argv);
}
</snippet></ROW><ROW><id>8581784</id><snippet>import wx.lib.agw.aui as aui

class MyNotebook(aui.AuiNotebook):
    def __getitem__(self, index):
        ''' More pythonic way to get a specific page, also useful for iterating
            over all pages, e.g: for page in notebook: ... '''
        if index &lt; self.GetPageCount():
            return self.GetPage(index)
        else:
            raise IndexError
</snippet></ROW><ROW><id>8581784</id><snippet>notebook = MyNotebook(parent)
notebook.AddPage(someWindow, "page 1")
notebook.AddPage(someOtherWindow, "page 2")
for page in notebook:
    ...
</snippet></ROW><ROW><id>8581862</id><snippet>iter()</snippet></ROW><ROW><id>8581862</id><snippet>for x in iter(foo, 0):
    print x
</snippet></ROW><ROW><id>8581862</id><snippet>iter()</snippet></ROW><ROW><id>8581862</id><snippet>from itertools import takewhile, imap, repeat
for x in takewhile(bool, imap(lambda f: f(), repeat(foo))):
    print x
</snippet></ROW><ROW><id>8581978</id><snippet>root.configure(background='black')
</snippet></ROW><ROW><id>8581978</id><snippet>root.option_add("*background", "black")
</snippet></ROW><ROW><id>8582273</id><snippet>from matplotlib import pyplot as plt
import numpy as np

def line(x, slope=1, zero=0):
    return zero + slope * x

x = np.array([-4,10])
y1 = line(x, 2, 2)
y2 = line(x, 1, 3)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x,y1)
ax.plot(x,y2)

ax.spines['left'].set_position(('data', 0))
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position(('data',0))
ax.spines['top'].set_color('none')
ax.spines['left'].set_smart_bounds(True)
ax.spines['bottom'].set_smart_bounds(True)
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')

plt.show()
</snippet></ROW><ROW><id>8582273</id><snippet>set_smart_bounds</snippet></ROW><ROW><id>8582273</id><snippet>ax.spines['left'].set_position(('data', 0))
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position(('data',0))
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
plt.ylim(ymin=0)
plt.show()
</snippet></ROW><ROW><id>8582366</id><snippet>import sys, argparse

def main(argv=None):

    if argv is None:
        argv=sys.argv[1:]

    p = argparse.ArgumentParser(description="Example of using argparse")

    p.add_argument('--arg1', action='store', default='hello', help="first word")
    p.add_argument('--arg2', action='store', default='world', help="second word")

    # Parse command line arguments
    args = p.parse_args(argv)

    print args.arg1, args.arg2

    return 0

if __name__=="__main__":
    sys.exit(main(sys.argv[1:]))
</snippet></ROW><ROW><id>8582366</id><snippet>add_arguments</snippet></ROW><ROW><id>8582366</id><snippet>arg1</snippet></ROW><ROW><id>8582366</id><snippet>arg2</snippet></ROW><ROW><id>8582366</id><snippet>default=...</snippet></ROW><ROW><id>8582366</id><snippet>action='store'</snippet></ROW><ROW><id>8582366</id><snippet>store</snippet></ROW><ROW><id>8582470</id><snippet>def Redirect(request):
    redirect_map = {
        '2145841371': '/home',
        '2145887330': '/club',
    }
    pageID = request.GET.get('pageID')
    return redirect(redirect_map[pageID])
</snippet></ROW><ROW><id>8582691</id><snippet>import foo</snippet></ROW><ROW><id>8582691</id><snippet>import foo</snippet></ROW><ROW><id>8582691</id><snippet>#include &lt;foo.h&gt;</snippet></ROW><ROW><id>8582691</id><snippet>import foo.py</snippet></ROW><ROW><id>8582794</id><snippet>floor()</snippet></ROW><ROW><id>8582794</id><snippet>floor(1.0e30)</snippet></ROW><ROW><id>8582813</id><snippet>__del__</snippet></ROW><ROW><id>8582813</id><snippet>__del__</snippet></ROW><ROW><id>8582813</id><snippet>weakref</snippet></ROW><ROW><id>8582813</id><snippet>__del__</snippet></ROW><ROW><id>8582813</id><snippet>.close()</snippet></ROW><ROW><id>8582813</id><snippet>filehandler</snippet></ROW><ROW><id>8582813</id><snippet>__enter__</snippet></ROW><ROW><id>8582813</id><snippet>__exit__</snippet></ROW><ROW><id>8582813</id><snippet>__enter__</snippet></ROW><ROW><id>8582813</id><snippet>__exit__</snippet></ROW><ROW><id>8582813</id><snippet>__exit__</snippet></ROW><ROW><id>8582813</id><snippet>__enter__</snippet></ROW><ROW><id>8582813</id><snippet>__exit__</snippet></ROW><ROW><id>8582813</id><snippet>class fileHandler:
    def __init__(self, dbf):
        self.logger = logging.getLogger('fileHandler')
        self.thefilename = dbf
    def __enter__(self):
        self.thefile = open(self.thefilename, 'rb')
        return self
    def __exit__(self, *args):
        self.thefile.close()
</snippet></ROW><ROW><id>8582813</id><snippet>__enter__</snippet></ROW><ROW><id>8582813</id><snippet>__init__</snippet></ROW><ROW><id>8582813</id><snippet>with</snippet></ROW><ROW><id>8582813</id><snippet>fh = filehandler('some_dbf')
with fh:
    #file is now opened
    #do some stuff
#file is now closed
#blah blah
#need the file again, so
with fh:
    # file is open again, do some stuff with it
#etc, etc 
</snippet></ROW><ROW><id>8583193</id><snippet>SHAPES</snippet></ROW><ROW><id>8583193</id><snippet>new_obj = random.choice(SHAPES)()
</snippet></ROW><ROW><id>8583193</id><snippet>random.choice(SHAPES)</snippet></ROW><ROW><id>8583193</id><snippet>I_shape</snippet></ROW><ROW><id>8583193</id><snippet>J_shape</snippet></ROW><ROW><id>8583193</id><snippet>()</snippet></ROW><ROW><id>8583193</id><snippet>I_shape()</snippet></ROW><ROW><id>8583560</id><snippet>WSGIScriptAlias /</snippet></ROW><ROW><id>8583590</id><snippet>import re, collections
sentence_terminator = re.compile(r'(?&lt;=[.!?;])\s*')
class SentenceParser(object):
    def __init__(self, filelike):
        self.f = filelike
        self.buffer = collections.deque([''])
    def next(self):
        while len(self.buffer) &lt; 2:
            data = self.f.read(512)
            if not data:
                raise StopIteration()
            self.buffer += sentence_terminator.split(self.buffer.pop() + data)
        return self.buffer.popleft()
    def __iter__(self):
        return self
</snippet></ROW><ROW><id>8583590</id><snippet>readline()</snippet></ROW><ROW><id>8583590</id><snippet>for</snippet></ROW><ROW><id>8583628</id><snippet>strings = ("string1", "string2", "string3")
for line in file:
    if any(s in line for s in strings):
        print "yay!"
</snippet></ROW><ROW><id>8583696</id><snippet>mappoint</snippet></ROW><ROW><id>8583696</id><snippet>if i&gt;1: return 255</snippet></ROW><ROW><id>8583797</id><snippet>DownloadError</snippet></ROW><ROW><id>8583797</id><snippet>deadline</snippet></ROW><ROW><id>8583986</id><snippet>class Thing(Base):
    def action(self):
        ...do something with otherthing.Otherthing()...

import otherthing
</snippet></ROW><ROW><id>8583986</id><snippet>import thing

class Subthing(thing.Thing):
    pass
</snippet></ROW><ROW><id>8583986</id><snippet>class Otherthing(Base):
    def action(self):
        ... do something with subthing.Subthing()...

import subthing
</snippet></ROW><ROW><id>8583986</id><snippet>from</snippet></ROW><ROW><id>8583986</id><snippet>import</snippet></ROW><ROW><id>8583986</id><snippet>from</snippet></ROW><ROW><id>8583986</id><snippet>import</snippet></ROW><ROW><id>8583986</id><snippet>class</snippet></ROW><ROW><id>8583986</id><snippet>import</snippet></ROW><ROW><id>8583986</id><snippet>A</snippet></ROW><ROW><id>8583986</id><snippet>A</snippet></ROW><ROW><id>8583986</id><snippet>&gt;&gt;&gt; b=lambda :object
&gt;&gt;&gt; class A(b()):
...     pass
... 
&gt;&gt;&gt; a=A()
&gt;&gt;&gt; a
&lt;__main__.A object at 0x1fbdad0&gt;
&gt;&gt;&gt; a.__class__.__mro__
(&lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8584339</id><snippet>import threading
import time
import gtk, gobject, glib

gobject.threads_init()

class Test():
    def __init__(self):
        self.counter = 0
        self.label = gtk.Label()
        self.progress_bar = gtk.ProgressBar()
        self.progress_bar_lock = threading.Lock()
        button = gtk.Button("Test")

        window = gtk.Window()

        box = gtk.VBox()
        box.pack_start(self.label)
        box.pack_start(self.progress_bar)
        box.pack_start(button)
        window.add(box)

        window.connect("destroy", lambda _: gtk.main_quit())
        button.connect("clicked", self.on_button_click)
        window.show_all()

    def update_label(self, counter):
        self.label.set_text("Thread started (counter: {0})"
                            .format(counter))
        time.sleep(5)
        self.label.set_text("Thread finished (counter: {0})"
                            .format(counter))
        return False

    def pulse_progress_bar(self):
        print threading.active_count()
        if threading.active_count() &gt; 1:
            self.progress_bar.pulse()
            return True

        self.progress_bar.set_fraction(0.0)
        self.progress_bar_lock.release()
        return False

    def on_button_click(self, widget):
        self.counter += 1
        thread = threading.Thread(target=self.update_label,
                                  args=(self.counter,))
        thread.start()

        if self.progress_bar_lock.acquire(False):
            glib.timeout_add(250, self.pulse_progress_bar)


if __name__ == '__main__':
    test = Test()
    gtk.main()
</snippet></ROW><ROW><id>8584339</id><snippet>glib.timeout_add</snippet></ROW><ROW><id>8584339</id><snippet>threading.Lock</snippet></ROW><ROW><id>8584339</id><snippet>gobject.threads_init</snippet></ROW><ROW><id>8584608</id><snippet>from collections import defaultdict

c = defaultdict(int)
for d in list_of_dictionaries:
    c[d['Name']] += d['amt']
</snippet></ROW><ROW><id>8584608</id><snippet>c</snippet></ROW><ROW><id>8584608</id><snippet>{'A': 1000, 'C': 900, 'B': 200}
</snippet></ROW><ROW><id>8584608</id><snippet>[{'Name': name, 'amt': amt} for name, amt in c.items()]
</snippet></ROW><ROW><id>8584608</id><snippet>[{'Name': 'A', 'amt': 1000}, {'Name': 'C', 'amt': 900}, {'Name': 'B', 'amt':200}]
</snippet></ROW><ROW><id>8584868</id><snippet>__array_struct__</snippet></ROW><ROW><id>8584868</id><snippet>__array_interface__</snippet></ROW><ROW><id>8584868</id><snippet>Image.fromarray</snippet></ROW><ROW><id>8584868</id><snippet>cv.fromarray</snippet></ROW><ROW><id>8584868</id><snippet>cv.SetData</snippet></ROW><ROW><id>8585126</id><snippet>B = A * (np.abs(scipy.ndimage.laplace(A)) &gt; 0)
</snippet></ROW><ROW><id>8585126</id><snippet>import numpy as np
import scipy.ndimage

A = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

B = A * (np.abs(scipy.ndimage.laplace(A)) &gt; 0)
</snippet></ROW><ROW><id>8585126</id><snippet>A</snippet></ROW><ROW><id>8585126</id><snippet>B = scipy.ndimage.laplace(A)
B = np.abs(B, B) # Preform abs in-place
B /= B  # This will produce a divide by zero warning that you can safely ignore
B *= A  
</snippet></ROW><ROW><id>8585126</id><snippet>find_objects</snippet></ROW><ROW><id>8585126</id><snippet>import numpy as np
import scipy.ndimage

A = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
              [0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

regions = scipy.ndimage.find_objects(A)

mask = np.zeros_like(A).astype(np.bool)

for val, region in enumerate(regions, start=1):
    if region is not None:
        subregion = A[region]
        mask[region] = scipy.ndimage.binary_erosion(subregion == val)

B = A.copy()
B[mask] = 0
</snippet></ROW><ROW><id>8585126</id><snippet>array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
       [0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0],
       [0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0],
       [0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0],
       [0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
</snippet></ROW><ROW><id>8585330</id><snippet>def SingletonAttrs(**names):
    keys = names.keys()
    def class_decorator(cls):
        class Meta(type):
            def __getattribute__(cls, attr):
                if attr in keys:
                    return type.__getattribute__(owner_cls,  attr)
                return type.__getattribute__(cls, attr)
            def __setattr__(cls, attr, value):
                if attr in keys:
                    class Wrapper(object):
                        def __init__(self, value):
                            self.__set__(None, value)
                        __set__ = lambda self, instance, value: setattr(owner_cls,"__" +  attr, value)
                        __get__ = lambda self, instance, owner: type.__getattribute__(owner_cls, "__" + attr)
                    return type.__setattr__(owner_cls,  attr, Wrapper(value))
                return type.__setattr__(cls, attr, value)
        owner_cls = Meta(cls.__name__, cls.__bases__, cls.__dict__.copy())
        for key in keys:
            setattr(owner_cls, key, names[key])
        return owner_cls
    return class_decorator

if __name__ == "__main__":

    @SingletonAttrs(a="value 1", b="value 2")
    class Test(object):
        pass

    class TestB(Test):
        pass

    t = Test()
    print t.a
    print t.b
    tb = TestB()
    tb.a = "value 3"
    print Test.a
</snippet></ROW><ROW><id>8585379</id><snippet>import re
vdd_level_re = re.compile(r'(\d+)\:\s*(\d+)')

vdd_levels = {}
with open('/sys/devices/system/cpu/cpuX/cpufreq/vdd_levels') as vdd_level_file:
    for vdd_level in vdd_level_file:
        level = vdd_level_re.match(vdd_level)
        if level:
            k,v = level.group(1,2)
            vdd_levels[k] = v
        else:
            print "line did not match expected format"
            print vdd_level
</snippet></ROW><ROW><id>8585379</id><snippet>            vdd_levels[k] = int(v)
</snippet></ROW><ROW><id>8585641</id><snippet>import sys
import os
import tkMessageBox
from Tkinter import *
from tkCommonDialog import Dialog
import shutil
import tkFileDialog
import win32com.client

win = Tk()
win.title("Copying the Directory to specified location")
win.geometry("600x600+200+50")
win.resizable()

# force "new" Python class by inheriting from "object"
class Copy(object):

    # use class attributes for shared variables
    src = None
    des = None
    textboxsrc = None
    textboxdes = None

    def srce():
        # access the class attributes via "Copy." syntax
        Copy.src = tkFileDialog.askdirectory(title = "The source folder is ")
        Copy.textboxsrc.delete(0,END)
        Copy.textboxsrc.insert(0,Copy.src)
        print Copy.src
        return Copy.src

    textboxsrc = Entry(win, width="70")
    textboxsrc.insert(0,'Enter master file name')
    textboxsrc.pack()
    textboxsrc.place(relx=0.40, rely=0.06, anchor=CENTER)
    bu = Button(text = "Source",font = "Verdana 12 italic bold",bg = "Purple",fg= "white", command= srce)
    bu.pack(fill =X, expand=YES)
    bu.place(relx=0.85, rely=0.06, anchor=CENTER)

    def dest():
        # access the class attributes via "Copy." syntax
        Copy.des = tkFileDialog.askdirectory(title = "TheDestination folder is ")
        Copy.textboxdes.delete(0,END)
        Copy.textboxdes.insert(0,Copy.des)
        print Copy.des
        return Copy.des

    textboxdes = Entry(win, width="70")
    textboxdes.insert(0,'Enter master file name')
    textboxdes.pack()
    textboxdes.place(relx=0.40, rely=0.13, anchor=CENTER)
    bu1 = Button(text = "Destination",font = "Verdana 12 italic",bg = "Purple",fg= "white", command= dest)
    bu1.pack(fill =X, expand=YES)
    bu1.place(relx=0.85, rely=0.13, anchor=CENTER)

    def start():
        # access the class attributes via "Copy." syntax
        print "copy src(%s) to des(%s)" % (Copy.src,Copy.des)
        try:
            shutil.copy(Copy.src,Copy.des)
        except:
            tkMessageBox.showwarning("Copying file",  "Error while copying\n(%s) to (%s)\n%s\n%s"
            % (Copy.src,Copy.des, sys.exc_info()[0], sys.exc_info()[1]) )


    bn =Button(text = "Copy",font = "Verdana 12 italic", bg = "Purple",fg= "white",command=start)
    bn.pack(fill =X, expand = YES)
    bn.place(relx=0.50, rely=0.25, anchor=CENTER)

obj= Copy()
win.mainloop()
</snippet></ROW><ROW><id>8586170</id><snippet>popen</snippet></ROW><ROW><id>8586170</id><snippet>stdout</snippet></ROW><ROW><id>8586170</id><snippet>Py*</snippet></ROW><ROW><id>8586170</id><snippet>PyTuple</snippet></ROW><ROW><id>8586170</id><snippet>PyObject</snippet></ROW><ROW><id>8586432</id><snippet>\d</snippet></ROW><ROW><id>8586432</id><snippet>0</snippet></ROW><ROW><id>8586432</id><snippet>9</snippet></ROW><ROW><id>8586432</id><snippet>^-?[0-9]+$
</snippet></ROW><ROW><id>8586432</id><snippet>^</snippet></ROW><ROW><id>8586432</id><snippet>-?</snippet></ROW><ROW><id>8586432</id><snippet>?</snippet></ROW><ROW><id>8586432</id><snippet>[0-9]+</snippet></ROW><ROW><id>8586432</id><snippet>[0-9]</snippet></ROW><ROW><id>8586432</id><snippet>\d</snippet></ROW><ROW><id>8586432</id><snippet>$</snippet></ROW><ROW><id>8586538</id><snippet>from itertools import groupby

money = money_tx.objects.order_by('-tx_date')
plans = investment_plan.objects.select_related()
result = []

for date, group in groupby(money, lambda x: x.tx_date):
    plans_for_date = set(x.investment_plan_id for x in group)
    for plan in plans:
        data = {'ORG': plan.organization.organization_name,
                'INV_PLAN': plan.plan_code,
                'DATE': date,
                'PRESENT': (plan.id in plans_for_date)}
        result.append(data)

print result
</snippet></ROW><ROW><id>8586677</id><snippet>from datetime import datetime, timedelta
fourweeks = datetime.now() + timedelta(weeks=4)
</snippet></ROW><ROW><id>8586681</id><snippet>from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write('Hello %s!' % self.client_address[0])
        return


def main():
    try:
        server = HTTPServer(('', 80), MyHandler)
        print 'started http server'
        server.serve_forever()
    except KeyboardInterrupt:
        print '^C received, shutting down server'
        server.socket.close()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8586823</id><snippet>defaul</snippet></ROW><ROW><id>8586823</id><snippet>2011-12-21 13:44:26,561 INFO sqlalchemy.engine.base.Engine.0x...1150 INSERT INTO tblfoo (`ModelID`, `ModelName`, `ModelMemo`) VALUES (%s, %s, %s)
2011-12-21 13:44:26,561 INFO sqlalchemy.engine.base.Engine.0x...1150 (0, 'Bar', 'Foo')
ID : 0
</snippet></ROW><ROW><id>8586823</id><snippet>0</snippet></ROW><ROW><id>8586823</id><snippet>autoincrement</snippet></ROW><ROW><id>8586823</id><snippet>default</snippet></ROW><ROW><id>8586823</id><snippet>from sqlalchemy import create_engine
engine = create_engine('mysql://test:test@localhost/test1', echo=True)

from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()

from sqlalchemy.orm import sessionmaker
Session = sessionmaker(bind=engine)

session = Session()

from sqlalchemy import Column, Integer, Unicode

class Foo(Base):
    __tablename__ = 'tblfoo'
    __table_args__ = {'mysql_engine':'InnoDB'}

    ModelID = Column(Integer, primary_key=True, autoincrement=True)
    ModelName = Column(Unicode(255), nullable=True, index=True)
    ModelMemo = Column(Unicode(255), nullable=True)

Base.metadata.create_all(engine)

f = Foo(ModelName='Bar', ModelMemo='Foo')
session.add(f)
session.flush()

print "ID :", f.ModelID
</snippet></ROW><ROW><id>8586986</id><snippet>upload_to</snippet></ROW><ROW><id>8587151</id><snippet>&gt;&gt;&gt; [k for k,v in User._fields.iteritems() if v.required]
['joinDate', 'password', 'nickName', 'lastVisited']
</snippet></ROW><ROW><id>8587151</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; required_fields = ((v.creation_counter, k) for k,v in User._fields.iteritems() if v.required)
&gt;&gt;&gt; sorted_required_fields = map(itemgetter(1), sorted(required_fields, key=itemgetter(0)))
&gt;&gt;&gt; sorted_required_fields
['nickName', 'password', 'joinDate', 'lastVisited']
</snippet></ROW><ROW><id>8587264</id><snippet>dis</snippet></ROW><ROW><id>8587264</id><snippet>import dis
&gt;&gt;&gt; def f(a,b): a, b = b, a
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_FAST                1 (b)
              3 LOAD_FAST                0 (a)
              6 ROT_TWO             
              7 STORE_FAST               0 (a)
             10 STORE_FAST               1 (b)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE 
</snippet></ROW><ROW><id>8587394</id><snippet>def flatten(data):
    res = []
    if hasattr(data, '__iter__'):
        for el in data:
            res.extend(flatten(el))
    else:
        res.append(data)
    return res


reduce(getattr, flatten(x), res)
</snippet></ROW><ROW><id>8587420</id><snippet>imp.load_module</snippet></ROW><ROW><id>8587420</id><snippet>imp.load_source</snippet></ROW><ROW><id>8587420</id><snippet>def loadpath(path):
    module_name = os.path.basename(path)[:-3]
    if os.path.isdir(path):
        # module/__init__.py style
        d, f = os.path.split(path.rstrip('/'))
        fd, fpath, desc = imp.find_module(f, [d])
        return imp.load_module(module_name, fd, fpath, desc)
    else:
        return imp.load_source(module_name, path)
</snippet></ROW><ROW><id>8587609</id><snippet>V</snippet></ROW><ROW><id>8587609</id><snippet>V</snippet></ROW><ROW><id>8587609</id><snippet>Vmax</snippet></ROW><ROW><id>8587609</id><snippet>X</snippet></ROW><ROW><id>8587609</id><snippet>Xmax</snippet></ROW><ROW><id>8587609</id><snippet>X = Xmax * V / Vmax
V = Vmax * X / Xmax
</snippet></ROW><ROW><id>8587609</id><snippet>V / Vmax</snippet></ROW><ROW><id>8587609</id><snippet>V</snippet></ROW><ROW><id>8587609</id><snippet>ValueError</snippet></ROW><ROW><id>8587609</id><snippet>Vmin</snippet></ROW><ROW><id>8587609</id><snippet>V</snippet></ROW><ROW><id>8587609</id><snippet>Vmax</snippet></ROW><ROW><id>8587609</id><snippet>------|------|------|------|----      ------|------|------|------|----
    2^-1    2^0    2^1    2^2     ==       0.5     1      2      4

------|------|------|------|----      ------|------|------|------|----
    e^-1    e^0    e^1    e^2     ==       0.4     1     2.7    7.4

------|------|------|------|----      ------|------|------|------|----
    10^-1  10^0   10^1   10^2     ==       0.1     1     10     100
</snippet></ROW><ROW><id>8587609</id><snippet>Xmax</snippet></ROW><ROW><id>8587609</id><snippet>b</snippet></ROW><ROW><id>8587609</id><snippet>from math import log
logmax = log(Vmax / Vmin, b)
X = Xmax * log(V / Vmin, b) / logmax
V = Vmin * b ** (logmax * X / Xmax)
</snippet></ROW><ROW><id>8587609</id><snippet>log(somevalue, b)</snippet></ROW><ROW><id>8587609</id><snippet>Vmin</snippet></ROW><ROW><id>8587609</id><snippet>log</snippet></ROW><ROW><id>8587609</id><snippet>log(Vmax / Vmin, b)</snippet></ROW><ROW><id>8587609</id><snippet>X / Xmax</snippet></ROW><ROW><id>8587609</id><snippet>* logmax</snippet></ROW><ROW><id>8587609</id><snippet>b</snippet></ROW><ROW><id>8587609</id><snippet>X</snippet></ROW><ROW><id>8587609</id><snippet>b ** (logmax * X / Xmax)</snippet></ROW><ROW><id>8587609</id><snippet>Vmin</snippet></ROW><ROW><id>8587609</id><snippet>Vmin</snippet></ROW><ROW><id>8587609</id><snippet>Vmin</snippet></ROW><ROW><id>8587609</id><snippet>V</snippet></ROW><ROW><id>8587609</id><snippet>X</snippet></ROW><ROW><id>8587609</id><snippet>X</snippet></ROW><ROW><id>8587609</id><snippet>logmax = log(Xmax + 1, b)
X = b ** (logmax * (V - Vmin) / (Vmax - Vmin)) - 1
V = (Vmax - Vmin) * log(X + 1, b) / logmax + Vmin
</snippet></ROW><ROW><id>8587648</id><snippet>global</snippet></ROW><ROW><id>8587648</id><snippet>def connectDb():
    global conn
    if conn is not None:   # Error occurs on this line
        return
    ...
</snippet></ROW><ROW><id>8587648</id><snippet>conn</snippet></ROW><ROW><id>8587648</id><snippet>global</snippet></ROW><ROW><id>8587697</id><snippet>    function update_select(select, data) {
        select.find('option').remove();
        select.append($('&lt;option value=""&gt;-------&lt;/option&gt;'));
        for (var i in data) {
            select.append($('&lt;option value="'+data[i][0]+'"&gt;'+data[i][1]+'&lt;/option&gt;'));
        }
    }

    $('select[name=island_group]').live('change', function(e) {
        $.get(
            '{% url island_name_choices_for_island_group %}',
            {
                'island_group': $(this).val(),
            },
            function(data, textStatus, jqXHR) {
                update_select($('select[name=island_name]'), data);
            },
            'json'
        );
    });
</snippet></ROW><ROW><id>8587697</id><snippet>url(
    r'island_name/choices/$',
    'island_name_choices_for_island_group', {
    }, 'island_name_choices_for_island_group',
),
</snippet></ROW><ROW><id>8587697</id><snippet>from django.utils import simplejson

from models import *

def island_name_choices_for_island_group(request, qs=None):
    if qs is None:
        # Change the default QS to your needs
        # (you didn't specify it)
        qs = Island.objects.all()

    if request.GET.get('island_group'):
        # assuming your Island model has an FK named island_group to model IslandGroup
        qs = qs.filter(island_group__pk=request.GET.get('island_group'))

    results = []
    for choice in qs:
        results.append((choice.pk, choice.name))

    return http.HttpResponse(simplejson.dumps(results))
</snippet></ROW><ROW><id>8587885</id><snippet>from BeautifulSoup import BeautifulSoup
import re

soup = BeautifulSoup(&lt;your_xml_here&gt;)
nodes = soup.findAll(name=re.compile('^h:input'))
for node in nodes:
    if 'id' not in dict(node.attrs):
        node['id'] = &lt;whatever you need&gt;
</snippet></ROW><ROW><id>8587885</id><snippet>id</snippet></ROW><ROW><id>8588262</id><snippet>import msvcrt

def flush_input():
  while msvcrt.kbhit():
    msvcrt.getch()
</snippet></ROW><ROW><id>8588614</id><snippet>url(r'^$', ContactIndex.as_view(), name="contact_index"),
url(r'^add$', ContactAdd.as_view(), name="contact_add"),
url(r'^([0-9]+)/update$', ContactUpdate.as_view(), name="contact_update"),
url(r'^([0-9]+)/view$', ContactView.as_view(), name="contact_view"),
</snippet></ROW><ROW><id>8588614</id><snippet>{% url contact_view contact.id %}
</snippet></ROW><ROW><id>8588800</id><snippet>from urlparse import urlparse
o = urlparse('http://url.something.com/bla.html?querystring=stuff')

url_without_query_string = o.scheme + "://" + o.netloc + o.path
</snippet></ROW><ROW><id>8588800</id><snippet>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; o = urlparse('http://url.something.com/bla.html?querystring=stuff')
&gt;&gt;&gt; url_without_query_string = o.scheme + "://" + o.netloc + o.path
&gt;&gt;&gt; print url_without_query_string
http://url.something.com/bla.html
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8588973</id><snippet>Transport.set_keepalive</snippet></ROW><ROW><id>8588973</id><snippet>timeout</snippet></ROW><ROW><id>8588973</id><snippet>SSHClient.connect</snippet></ROW><ROW><id>8588993</id><snippet>q.remove(y)</snippet></ROW><ROW><id>8588993</id><snippet>y</snippet></ROW><ROW><id>8588993</id><snippet>class A</snippet></ROW><ROW><id>8588993</id><snippet>y</snippet></ROW><ROW><id>8588993</id><snippet>y</snippet></ROW><ROW><id>8588993</id><snippet>id(y)</snippet></ROW><ROW><id>8588993</id><snippet>y</snippet></ROW><ROW><id>8588993</id><snippet>y</snippet></ROW><ROW><id>8588993</id><snippet>__cmp__(), __eq__() or __ne__()</snippet></ROW><ROW><id>8588993</id><snippet>&gt;&gt;&gt; class Liar(object):
...   def __cmp__(self, other):
...     return id(self) == id(other)
... 
&gt;&gt;&gt; x = Liar()
&gt;&gt;&gt; x
&lt;__main__.Liar object at 0x7f1e02f3de10&gt;
&gt;&gt;&gt; x == x
False
&gt;&gt;&gt; x == 1
True
&gt;&gt;&gt; x == 'hello world'
True
</snippet></ROW><ROW><id>8588993</id><snippet>__cmp__</snippet></ROW><ROW><id>8588993</id><snippet>True</snippet></ROW><ROW><id>8588993</id><snippet>1</snippet></ROW><ROW><id>8588993</id><snippet>id(self) != id(other)</snippet></ROW><ROW><id>8588993</id><snippet>False</snippet></ROW><ROW><id>8588993</id><snippet>0</snippet></ROW><ROW><id>8588993</id><snippet>self == other</snippet></ROW><ROW><id>8589113</id><snippet>#!/usr/bin/env python
import os
import time
from threading import Thread

def follow(filename):
    with open(filename) as file:
        file.seek(0, os.SEEK_END) # goto EOF
        while True:
            for line in iter(file.readline, ''):
                yield line
            time.sleep(1)

def logtail(category, filename):
    print category
    print filename
    for line in follow(filename):
        print line,
        log_entry(category, line)

for args in Config.items('files'):
    Thread(target=logtail, args=args).start()
</snippet></ROW><ROW><id>8589113</id><snippet>log_entry()</snippet></ROW><ROW><id>8589113</id><snippet>def log_entry(category, message):
    entry = scribe.LogEntry(category, message)
    socket = TSocket.TSocket(host='localhost', port=1463)
    transport = TTransport.TFramedTransport(socket)
    protocol = TBinaryProtocol.TBinaryProtocol(trans=transport,strictRead=False,
                                               strictWrite=False)
    client = scribe.Client(iprot=protocol, oprot=protocol)
    transport.open()
    result = client.Log(messages=[entry])
    transport.close()
</snippet></ROW><ROW><id>8589113</id><snippet>follow()</snippet></ROW><ROW><id>8589313</id><snippet>request.POST</snippet></ROW><ROW><id>8589313</id><snippet>form.cleaned_data['inparam1']</snippet></ROW><ROW><id>8589340</id><snippet>import random
import sys
import bisect

f_list = [0, 0.06775, 0.08242, 0.10199, 0.13522, 0.23703, 0.25514, 0.27324, 0.32793, 0.38483, 0.38577, 0.39278, 0.42999, 0.45023, 0.50728, 0.56756, 0.58256, 0.58391, 0.62924, 0.68509, 0.7616, 0.78481, 0.79229, 0.81161, 0.81251, 0.82718, 0.82773, 0.99998]
alphabet = 'abcdefghijklmnopqrstuvwxyz '

for i in xrange(450):
    sys.stdout.write(alphabet[bisect.bisect(f_list, random.random()) - 1])
</snippet></ROW><ROW><id>8589340</id><snippet>alphabet</snippet></ROW><ROW><id>8589340</id><snippet>bisect.bisect(list, value)</snippet></ROW><ROW><id>8589804</id><snippet>&lt;form method="post" class="myform" action="."&gt;
    &lt;table&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th&gt;&lt;label for="checkbox1"&gt;Checkbox 1&lt;/label&gt;&lt;/th&gt;
                &lt;td&gt;&lt;input type="checkbox" id="checkbox1" name="checkbox1" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th&gt;&lt;label for="checkbox2"&gt;Checkbox 2&lt;/label&gt;&lt;/th&gt;
                &lt;td&gt;&lt;input type="checkbox" id="checkbox2" name="checkbox2" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th&gt;&lt;label for="checkbox3"&gt;Checkbox 3&lt;/label&gt;&lt;/th&gt;
                &lt;td&gt;&lt;input type="checkbox" id="checkbox3" name="checkbox3" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;input type="submit" class="myform-submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>8589804</id><snippet>$(document).ready(function(){
    $(".myform-submit").bind("click", function(e) {
        e.preventDefault();
        var $form = $(this).closest(".myform");
        if ($("input:checkbox:checked").length) {
            alert("submitting");
            $form.submit();
        }
    });
});
</snippet></ROW><ROW><id>8589839</id><snippet>for fruit, color in test.iteritems():
    # do stuff
</snippet></ROW><ROW><id>8590035</id><snippet>import urllib
text = urllib.quote_plus('Tested: 21 Dec')  // This ia a variable
my_url = 'http://chart.apis.google.com/chart?chst=d_text_outline&amp;chld=000000|12|h|FFFFFF|_|%s' % text
urlfetch.fetch(my_url)
</snippet></ROW><ROW><id>8590035</id><snippet>'... %s' % (a,b)</snippet></ROW><ROW><id>8590035</id><snippet>''.join([a, b])</snippet></ROW><ROW><id>8590035</id><snippet>a + b</snippet></ROW><ROW><id>8590271</id><snippet>import pyexiv2
import json

metadata = pyexiv2.ImageMetadata(filename)
metadata.read()
userdata={'Category':'Human',
          'Physical': {
              'skin_type':'smooth',
              'complexion':'fair'
              },
          'Location': {
              'city': 'london'
              }
          }
metadata['Exif.Photo.UserComment']=json.dumps(userdata)
metadata.write()
</snippet></ROW><ROW><id>8590271</id><snippet>import pprint
filename='/tmp/image.jpg'
metadata = pyexiv2.ImageMetadata(filename)
metadata.read()
userdata=json.loads(metadata['Exif.Photo.UserComment'].value)
pprint.pprint(userdata)
</snippet></ROW><ROW><id>8590271</id><snippet>{u'Category': u'Human',
 u'Location': {u'city': u'london'},
 u'Physical': {u'complexion': u'fair', u'skin_type': u'smooth'}}
</snippet></ROW><ROW><id>8590313</id><snippet>__del__</snippet></ROW><ROW><id>8590313</id><snippet>__del__</snippet></ROW><ROW><id>8590313</id><snippet>my_enviroment</snippet></ROW><ROW><id>8590382</id><snippet>form["selectLang"] = ["1"]
mechanize.urlopen(form.click())
</snippet></ROW><ROW><id>8590577</id><snippet>show</snippet></ROW><ROW><id>8590577</id><snippet>import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open(argv[1] if len(argv) &gt;=2 else "bla2.png")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    print "clicked at: ", event.x, event.y

canvas.bind("&lt;Button-1&gt;", callback)
Tkinter.mainloop()
</snippet></ROW><ROW><id>8590836</id><snippet>list1[start:stop]</snippet></ROW><ROW><id>8590836</id><snippet>[x]range</snippet></ROW><ROW><id>8590836</id><snippet>itertools.islice</snippet></ROW><ROW><id>8590836</id><snippet>start</snippet></ROW><ROW><id>8590856</id><snippet>for i, (a, b) in enumerate(l):
    # i will be the index of (a, b) in l
</snippet></ROW><ROW><id>8590931</id><snippet>RETURNING</snippet></ROW><ROW><id>8590931</id><snippet>INSERT</snippet></ROW><ROW><id>8590931</id><snippet>result = conn.execute("INSERT INTO user (name, country_id) VALUES ('Homer', 123)
                       RETURNING *")
</snippet></ROW><ROW><id>8590931</id><snippet>id</snippet></ROW><ROW><id>8590931</id><snippet>rslt_id = conn.execute("INSERT INTO user (name, country_id) VALUES ('Homer', 123)
                        RETURNING id")
</snippet></ROW><ROW><id>8591033</id><snippet>emit(self, record)</snippet></ROW><ROW><id>8591177</id><snippet>cron</snippet></ROW><ROW><id>8591334</id><snippet>import os, glob
magic='.log'
for file in glob.glob(os.path.join(mydir, '*%s' % magic)):
    dirname, filename = os.path.split(file)
    base=filename[:-len(magic)] # if you use this very often, it is faster to use a variable "len_magic"
    print dirname, base
</snippet></ROW><ROW><id>8591554</id><snippet>unicode</snippet></ROW><ROW><id>8591554</id><snippet>str</snippet></ROW><ROW><id>8591554</id><snippet>def uescape(text):
    print repr(text)
    escaped_chars = []
    for c in text:
        if (ord(c) &lt; 32) or (ord(c) &gt; 126):
            c = '&amp;{};'.format(htmlentitydefs.codepoint2name[ord(c)])
        escaped_chars.append(c)
    return ''.join(escaped_chars)
</snippet></ROW><ROW><id>8591554</id><snippet>content.encode('UTF-8')</snippet></ROW><ROW><id>8591615</id><snippet>grid = gs.GridSpec(2,1 , height_ratios=[2,1])
</snippet></ROW><ROW><id>8591664</id><snippet>NP -&gt; NP | NP PP
</snippet></ROW><ROW><id>8591664</id><snippet>NP</snippet></ROW><ROW><id>8591899</id><snippet>Artists</snippet></ROW><ROW><id>8591899</id><snippet>get_renderer</snippet></ROW><ROW><id>8591899</id><snippet>tight_layout</snippet></ROW><ROW><id>8591899</id><snippet>from matplotlib.tight_layout import get_renderer
import matplotlib.pyplot as plt

FONTSIZE=20

# set up example plots
fig = plt.figure()

ax1 = fig.add_subplot(211)
ax1.plot(range(10,1,-1))
ax1.set_title('ax1',fontsize=FONTSIZE)
ax1.set_xlabel('X axis',fontsize=FONTSIZE)
ax1.set_ylabel('Y axis',fontsize=FONTSIZE)

ax2 = fig.add_subplot(212)
ax2.plot(range(1,10,1))
ax2.set_title('ax1',fontsize=FONTSIZE)
ax2.set_xlabel('X axis',fontsize=FONTSIZE)
ax2.set_ylabel('Y axis',fontsize=FONTSIZE)

# tighten things up in advance
print "Subplots 'bottom' before tight_layout: ",fig.subplotpars.bottom
plt.tight_layout()
print "Subplots 'bottom' after tight_layout: ",fig.subplotpars.bottom
fig.savefig('noFigText.png')

# add and deal with text
bigFigText = plt.figtext(0.5 ,0.05, 
                         u'first line\nsecond line\nthird line', 
                         ha='center')
# textLimitsDpi is a 2x2 array correspoinding to [[x0,y0],[x1,y1]]
textLimitsDpi = bigFigText.get_window_extent(renderer=get_renderer(fig),
                                   dpi=fig.get_dpi()).get_points()

# we really just need y1
textHeightFig = fig.transFigure.inverted().transform((0,textLimitsDpi[1,1]))[1]

# make adjustment to bottom
fig.subplots_adjust(bottom=fig.subplotpars.bottom+textHeightFig)

print "Subplots 'bottom' after figtext: ",fig.subplotpars.bottom
fig.savefig('withFigText.png')
plt.show()
</snippet></ROW><ROW><id>8591899</id><snippet>hspace</snippet></ROW><ROW><id>8591899</id><snippet>y1</snippet></ROW><ROW><id>8591899</id><snippet># make adjustment to bottom
top = fig.subplotpars.top
bottom = fig.subplotpars.bottom
newHspace = (fig.subplotpars.hspace
             *(top-bottom)
             /(top-bottom-textHeightFig))
fig.subplots_adjust(bottom=bottom+textHeightFig,
                    hspace=newHspace)
</snippet></ROW><ROW><id>8592027</id><snippet>output = gzip.GzipFile(fileobj=pipe.stdout)</snippet></ROW><ROW><id>8592027</id><snippet>import StringIO, subprocess
pipe = subprocess.Popen(["cat bla3.txt | gzip --stdout"], stdout=subprocess.PIPE, shell=True)
helper = StringIO.StringIO()     
helper.write(pipe.stdout.read())
helper.seek(0)
output = gzip.GzipFile(fileobj=helper) 
</snippet></ROW><ROW><id>8592316</id><snippet>rng</snippet></ROW><ROW><id>8592316</id><snippet>xsd</snippet></ROW><ROW><id>8592316</id><snippet>parse()</snippet></ROW><ROW><id>8592316</id><snippet>export()</snippet></ROW><ROW><id>8592679</id><snippet>unittest</snippet></ROW><ROW><id>8592679</id><snippet>suite1 = unittest.TestSuite()
suite2 = unittest.TestSuite()
# fill suites with test cases ...
result1 = unittest.TextTestRunner().run(suite1)
if result1.wasSuccessful():
    unittest.TextTestRunner().run(suite2)
</snippet></ROW><ROW><id>8592789</id><snippet># without redirect
In [2]: os.system('ls xyz')
ls: cannot access xyz: No such file or directory
Out[2]: 512

# with redirect
In [3]: os.system('ls xyz 2&gt; /dev/null')
Out[3]: 512
</snippet></ROW><ROW><id>8592789</id><snippet>subprocess</snippet></ROW><ROW><id>8592789</id><snippet>os.system()</snippet></ROW><ROW><id>8592964</id><snippet> //element[contains(@style, '/images') or (@class='Image' and contains(@src, '/images'))]
</snippet></ROW><ROW><id>8593003</id><snippet>./manage.py reset yourapp</snippet></ROW><ROW><id>8593003</id><snippet>syncdb</snippet></ROW><ROW><id>8593003</id><snippet>django-extensions</snippet></ROW><ROW><id>8593003</id><snippet>./manage.py sqldiff yourapp</snippet></ROW><ROW><id>8593150</id><snippet>dict</snippet></ROW><ROW><id>8593150</id><snippet>d</snippet></ROW><ROW><id>8593150</id><snippet>dict</snippet></ROW><ROW><id>8593150</id><snippet>d = {}
for line in f.readlines():
    (addr, vlanid, videoid, reqs, area) = line.split()
    video_dict = d.setdefault(vlanid, {})
    video_dict.setdefault(videoid, []).append((addr, vlanid, videoid, reqs, area))
</snippet></ROW><ROW><id>8593456</id><snippet>def trailing_zeros(longint):
    manipulandum = str(longint)
    return len(manipulandum)-len(manipulandum.rstrip('0'))
</snippet></ROW><ROW><id>8593952</id><snippet>RigControlWindow</snippet></ROW><ROW><id>8593952</id><snippet>class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self._rcwin = None

    def showRigControlWindow(self):
        if self._rcwin is None:
            self._rcwin = RigControlWindow()
        self._rcwin.show()
</snippet></ROW><ROW><id>8593952</id><snippet>class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self._rcwin = None

    @property    
    def rcwin(self):
        if self._rcwin is None:
            self._rcwin = RigControlWindow()
        return self._rcwin

    def showRigControlWindow(self):
        self.rcwin.show()
</snippet></ROW><ROW><id>8594009</id><snippet>def test():
  """
  &gt;&gt;&gt; config = '''&lt;?xml version="1.0"?&gt;
  ... &lt;test&gt;
  ...   &lt;data&gt;d1&lt;/data&gt;
  ...   &lt;data&gt;d2&lt;/data&gt;
  ... &lt;/test&gt;'''
  &gt;&gt;&gt; print config
  &lt;?xml version="1.0"?&gt;
  &lt;test&gt;
    &lt;data&gt;d1&lt;/data&gt;
        &lt;data&gt;d2&lt;/data&gt;
  &lt;/test&gt;

  """

if __name__ == "__main__":
  import doctest
doctest.testmod(name='test')
</snippet></ROW><ROW><id>8594204</id><snippet>&gt;&gt;&gt; the_dump=json.dumps("['foo', {'bar':['baz', null, 1.0, 2]}]")
</snippet></ROW><ROW><id>8594204</id><snippet>&gt;&gt;&gt; the_dump=json.dumps(['foo', {'bar':['baz', None, 1.0, 2]}])
</snippet></ROW><ROW><id>8594436</id><snippet>[new_value if i == replace_index else element
 for i, element in enumerate(my_list)]
</snippet></ROW><ROW><id>8594436</id><snippet>new_list = my_list[:]
new_list[replace_index] = new_value
</snippet></ROW><ROW><id>8594436</id><snippet>new_list = my_list[:replace_index] + [new_value] + my_list[replace_index+1:]
</snippet></ROW><ROW><id>8594617</id><snippet>HTTPCookieProcessor</snippet></ROW><ROW><id>8594617</id><snippet>class HTTPCookieProcessor(BaseHandler):
  def __init__(self, cookiejar=None):
    import cookielib
    if cookiejar is None:
        cookiejar = cookielib.CookieJar()
    self.cookiejar = cookiejar

  def http_request(self, request):
    self.cookiejar.add_cookie_header(request)
    return request

  def http_response(self, request, response):
    self.cookiejar.extract_cookies(response, request)
    return response

  https_request = http_request
  https_response = http_response
</snippet></ROW><ROW><id>8594617</id><snippet>tw_jar</snippet></ROW><ROW><id>8594784</id><snippet>print type(passedDict)
</snippet></ROW><ROW><id>8594784</id><snippet>#!/usr/bin/python -tt

# A dictionary Of Each New SSID
WirelessNetwork = {}
WirelessNetwork['name'] = 'baz'
WirelessNetwork['type'] = 'bar'
WirelessNetwork['pass'] = 'foo'

# A list of all SSIDs
networkAddList = (WirelessNetwork,)

def addWireless(passedDict={}):
  print 'Adding SSID: %s' % passedDict['name']
  print 'Of type: %s' % passedDict['type']
  print 'With Password: %s' % passedDict['pass']

for networkDict in networkAddList:
  addWireless(networkDict)
</snippet></ROW><ROW><id>8594831</id><snippet>Menu-&gt;Tools-&gt;Developer Tools</snippet></ROW><ROW><id>8594831</id><snippet>Network</snippet></ROW><ROW><id>8594831</id><snippet>XHR</snippet></ROW><ROW><id>8595331</id><snippet>mp.Process</snippet></ROW><ROW><id>8595331</id><snippet>conn</snippet></ROW><ROW><id>8595331</id><snippet>child_conn</snippet></ROW><ROW><id>8595331</id><snippet>import multiprocessing as mp

def foo_pipe(conn):
    conn.close()

def pipe():
    conn = mp.Pipe()
    parent_conn, child_conn = conn
    proc = mp.Process(target = foo_pipe, args = (child_conn, ))
    proc.start()
    child_conn.close()  # &lt;-- Close the child_conn end in the main process too.
    try:
        print(parent_conn.recv())
    except EOFError as err:
        print('Got here')
    proc.join()

if __name__=='__main__':
    pipe()
</snippet></ROW><ROW><id>8595651</id><snippet>def get_items(request):
    return {} # values that you can pick and choose from in each view

@view_config(route_name='name', permission='perm', xhr=True, renderer='json')
def r_ajax(request):
    items = get_items(request)
    return {
        'data1': 1, 'data2': 2, 'data3': 3,
        'html': renderers.render('shortr.mako', {'items': items}, request),
    }

@view_config(route_name='name', permission='perm', renderer='r.mako')
def r_html(request):
    items = get_items(request)
    return items
</snippet></ROW><ROW><id>8595651</id><snippet>@view_defaults(route_name='name', permission='perm')
class R(object):
    def __init__(self, request):
        self.request = request
        self.items = # ...

    @view_config(xhr=True, renderer='json')
    def ajax(request):
        return {
            'data1': 1, 'data2': 2, 'data3': 3,
            'html': renderers.render('shortr.mako', {'items': items}, request),
        }

    @view_config(renderer='r.mako')
    def html(request):
        return self.items
</snippet></ROW><ROW><id>8595663</id><snippet>heroku run bash --app your_app_name
</snippet></ROW><ROW><id>8595844</id><snippet>Model</snippet></ROW><ROW><id>8595844</id><snippet>Manager</snippet></ROW><ROW><id>8595844</id><snippet>__metaclass__</snippet></ROW><ROW><id>8595844</id><snippet>class Manager(object):
    # Tracks each time a Manager instance is created. Used to retain order.
    creation_counter = 0
</snippet></ROW><ROW><id>8595844</id><snippet>class Model(object):
    __metaclass__ = ModelBase
    _deferred = False
</snippet></ROW><ROW><id>8595844</id><snippet>ModelBase</snippet></ROW><ROW><id>8595844</id><snippet>__module__</snippet></ROW><ROW><id>8595844</id><snippet>models</snippet></ROW><ROW><id>8595844</id><snippet>module = attrs.pop('__module__')
new_class = super_new(cls, name, bases, {'__module__': module})
</snippet></ROW><ROW><id>8595844</id><snippet>__metaclass__</snippet></ROW><ROW><id>8595844</id><snippet>Model</snippet></ROW><ROW><id>8595848</id><snippet>open(saveAddress, "wb").write(pageText)
</snippet></ROW><ROW><id>8595925</id><snippet>newInv</snippet></ROW><ROW><id>8595925</id><snippet>newInv  = list(csv.reader(open("new.csv", "r")))
origInv = list(csv.reader(open("old.csv", "r")))
</snippet></ROW><ROW><id>8595991</id><snippet>'%.3f'%(1324343032.324325235)</snippet></ROW><ROW><id>8595991</id><snippet>float()</snippet></ROW><ROW><id>8596489</id><snippet>StringIO</snippet></ROW><ROW><id>8596489</id><snippet>len()</snippet></ROW><ROW><id>8596489</id><snippet>my_string_io_varaible.getvalue()</snippet></ROW><ROW><id>8596489</id><snippet>urlencode()</snippet></ROW><ROW><id>8596489</id><snippet>urlencode</snippet></ROW><ROW><id>8596664</id><snippet>l = [35L, 53L, 77L, 99L, 49L, 46L, 28L, 13L, 2L, 0L, 0L, 0L]
l = [int(item) for item in l]
</snippet></ROW><ROW><id>8596664</id><snippet>l = [35L, 53L, 77L, 99L, 49L, 46L, 28L, 13L, 2L, 0L, 0L, 0L]
l = list(set(l))
l = [int(item) for item in l]
</snippet></ROW><ROW><id>8596934</id><snippet>itertools.combinations(list, r)
</snippet></ROW><ROW><id>8596934</id><snippet>list</snippet></ROW><ROW><id>8596934</id><snippet>{x1*x2, x1*x3, ...}</snippet></ROW><ROW><id>8596934</id><snippet>itertools.combinations_with_replacement(list, r)</snippet></ROW><ROW><id>8597280</id><snippet>numpy.int16</snippet></ROW><ROW><id>8597280</id><snippet>resample</snippet></ROW><ROW><id>8597280</id><snippet>numpy.float32</snippet></ROW><ROW><id>8597280</id><snippet>&gt;&gt;&gt; snd_array.dtype
dtype('int16')
&gt;&gt;&gt; snd_resample.dtype
dtype('float32')
</snippet></ROW><ROW><id>8597280</id><snippet>resample</snippet></ROW><ROW><id>8597280</id><snippet>numpy.int16</snippet></ROW><ROW><id>8597280</id><snippet>astype</snippet></ROW><ROW><id>8597280</id><snippet>&gt;&gt;&gt; snd_resample = resample(snd_array, 1.5, "sinc_fastest").astype(snd_array.dtype)
</snippet></ROW><ROW><id>8597280</id><snippet>tone.wav</snippet></ROW><ROW><id>8597535</id><snippet>get_serving_url()</snippet></ROW><ROW><id>8597535</id><snippet>user.imageblob.key()</snippet></ROW><ROW><id>8597622</id><snippet>import csv
with open('source.csv','rb') as source:
    rdr= csv.reader( source )
    with open('revised.csv','wb') as target:
        wtr= csv.writer( target )
        for r in rdr:
            wtr.writerow( (r[0], r[1], r[2], '{0};{1}'.format(r[3],r[4]), r[5], r[6]) )
</snippet></ROW><ROW><id>8597925</id><snippet>itertools.group_by</snippet></ROW><ROW><id>8597925</id><snippet>truncate_date = connection.ops.date_trunc_sql('day','timestamp')
qs = qs.extra({'date':truncate_date})
return qs.values('date').annotate(Sum('amount')).order_by('date')
</snippet></ROW><ROW><id>8598283</id><snippet>print</snippet></ROW><ROW><id>8598283</id><snippet>file.write</snippet></ROW><ROW><id>8598283</id><snippet>print "a", "b" # prints something like "a b\n"
</snippet></ROW><ROW><id>8598283</id><snippet>__str__</snippet></ROW><ROW><id>8598283</id><snippet>__repr__</snippet></ROW><ROW><id>8598283</id><snippet>print 1 # prints something like "1\n"
</snippet></ROW><ROW><id>8598283</id><snippet>file.write</snippet></ROW><ROW><id>8598283</id><snippet>print</snippet></ROW><ROW><id>8598687</id><snippet>import mygrid
import gui
import sys
setattr(sys.modules["gui"], "mygrid", mygrid)
</snippet></ROW><ROW><id>8598842</id><snippet>form._errors</snippet></ROW><ROW><id>8598842</id><snippet>error_list = form.error_class(['your error messages'])</snippet></ROW><ROW><id>8598842</id><snippet>NON_FIELD_ERRORS</snippet></ROW><ROW><id>8598842</id><snippet>django.forms.forms</snippet></ROW><ROW><id>8598842</id><snippet>form._errors[NON_FIELD_ERRORS] = error_list</snippet></ROW><ROW><id>8598842</id><snippet>In [1]: from bet.forms import BetForm

In [2]: from django.forms.forms import NON_FIELD_ERRORS

In [3]: form = BetForm()

In [4]: form.full_clean()

In [5]: form._errors[NON_FIELD_ERRORS] = form.error_class(['your error messages'])

In [6]: form.non_field_errors()
Out[6]: [u'your error messages']
</snippet></ROW><ROW><id>8598881</id><snippet>buf.seek(0)</snippet></ROW><ROW><id>8598881</id><snippet>Image.open(buf)</snippet></ROW><ROW><id>8598881</id><snippet>buf</snippet></ROW><ROW><id>8598881</id><snippet>import matplotlib.pyplot as plt
import io
import Image

plt.figure()
plt.plot([1, 2])
plt.title("test")
buf = io.BytesIO()
plt.savefig(buf, format = 'png')
buf.seek(0)
im = Image.open(buf)
im.show()
buf.close()
</snippet></ROW><ROW><id>8599113</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Address(models.Model):
    object_id    = models.PositiveIntegerField()
    content_type = models.ForeignKey(ContentType)
    of           = generic.GenericForeignKey('content_type', 'object_id' )

class Person(models.Model):
    pass

class Store(models.Model):
    pass

class Company(models.Model):
    pass
</snippet></ROW><ROW><id>8599113</id><snippet>from django.contrib import admin
from django.contrib.contenttypes import generic

class AddressInline(generic.GenericStackedInline):
    model   = Address
    max_num = 1

class PersonAdmin(admin.ModelAdmin):
    model = Person
    inlines = (AddressInLine,)

class CompanyAdmin(admin.ModelAdmin):
    and so on

admin.site.register(Person, PersonAdmin)
</snippet></ROW><ROW><id>8599450</id><snippet>Number = raw_input("Enter a number\n")
</snippet></ROW><ROW><id>8599450</id><snippet>\n</snippet></ROW><ROW><id>8599450</id><snippet>Number = raw_input("""Enter a number
""")
</snippet></ROW><ROW><id>8599785</id><snippet>checkins.objects.filter( location_id__in = list(flagged_checkins.objects.values_list('location_id', flat=True)) ).delete()
</snippet></ROW><ROW><id>8600037</id><snippet>&gt;&gt;&gt; Demo1 = [[], []]
&gt;&gt;&gt; Demo2 = [[]] * 2
&gt;&gt;&gt; print id(Demo1[0]), id(Demo1[1])
33980568 34018800
&gt;&gt;&gt; print id(Demo2[0]), id(Demo2[1])
34169920 34169920
</snippet></ROW><ROW><id>8600037</id><snippet>[[] for i in xrange(n)]</snippet></ROW><ROW><id>8600037</id><snippet>&gt;&gt;&gt; Demo2 = [[] for i in xrange(2)]
&gt;&gt;&gt; Demo2
[[], []]
&gt;&gt;&gt; Demo2[0].append(1)
&gt;&gt;&gt; Demo2
[[1], []]
</snippet></ROW><ROW><id>8600301</id><snippet>foo()</snippet></ROW><ROW><id>8600301</id><snippet>Timer</snippet></ROW><ROW><id>8600301</id><snippet>foo()</snippet></ROW><ROW><id>8600301</id><snippet>Timer</snippet></ROW><ROW><id>8600301</id><snippet>thread</snippet></ROW><ROW><id>8600301</id><snippet>foo()</snippet></ROW><ROW><id>8600301</id><snippet>&gt;&gt;&gt; import time, threading
&gt;&gt;&gt; def foo():
...   print(time.ctime())
...   threading.Timer(10, foo).start()
...
&gt;&gt;&gt; foo()
Thu Dec 22 14:46:08 2011
&gt;&gt;&gt; Thu Dec 22 14:46:18 2011
Thu Dec 22 14:46:28 2011
Thu Dec 22 14:46:38 2011
</snippet></ROW><ROW><id>8600313</id><snippet>class uobj:
    def __init__(self, obj):
        self.obj = obj
    def __format__(self, format_spec):
        if format_spec == 's':
            return str(self.obj)
        else:
            # edit, shoehorning this in for completeness
            # to call an original format spec as should probably
            # happen after you do your own processing, use __format__
            if isinstance(self.obj, (int, float)):
                return self.obj.__format__(format_spec)
                # so then a :.2f spec on uobj(123.456) would work as expected
            return str(self.obj).replace('&lt;', '&lt;').replace('&gt;', '&gt;')
    def __getitem__(self, key):
        return uobj(self.obj[key])
</snippet></ROW><ROW><id>8600313</id><snippet>d = uobj({'a': '&lt;b&gt;asdf'})
s = uobj('&lt;span&gt;qwer&lt;/span&gt;')
'{0:s} {d[a]}'.format(s, d=d)

# ouputs: '&lt;span&gt;qwer&lt;/span&gt;&lt;asdf'
</snippet></ROW><ROW><id>8600462</id><snippet>stdout</snippet></ROW><ROW><id>8600462</id><snippet>stdin.channel.shutdown_write()
</snippet></ROW><ROW><id>8600534</id><snippet>[{"name": n, "data": [h]} for n, h in zip(name, hits)]
</snippet></ROW><ROW><id>8600534</id><snippet>&gt;&gt;&gt; dict(zip(name, hits))
{'twitter': 2500, 'myspace': 1800, 'facebook': 4000}
</snippet></ROW><ROW><id>8600576</id><snippet>all</snippet></ROW><ROW><id>8600576</id><snippet>if(all(len(o) == 3 for o in octate_n)):
    # do stuff
</snippet></ROW><ROW><id>8600576</id><snippet>[o for o in octate_n]</snippet></ROW><ROW><id>8600576</id><snippet>octate_n</snippet></ROW><ROW><id>8600576</id><snippet>(o for o in octate_n)</snippet></ROW><ROW><id>8600576</id><snippet>octate_n</snippet></ROW><ROW><id>8600615</id><snippet>chr()</snippet></ROW><ROW><id>8600615</id><snippet>ord()</snippet></ROW><ROW><id>8600615</id><snippet>&gt;&gt;&gt; ord(chr(145).decode('koi8-r'))
9618
</snippet></ROW><ROW><id>8600990</id><snippet>0</snippet></ROW><ROW><id>8601018</id><snippet>selected</snippet></ROW><ROW><id>8601018</id><snippet>&lt;select&gt;
   &lt;option&gt;One&lt;/option&gt;
   &lt;option&gt;Two&lt;/option&gt;
   &lt;option&gt;Three&lt;/option&gt;
&lt;/select&gt;
</snippet></ROW><ROW><id>8601018</id><snippet>One</snippet></ROW><ROW><id>8601018</id><snippet>&lt;select&gt;
   &lt;option&gt;One&lt;/option&gt;
   &lt;option selected&gt;Two&lt;/option&gt;
   &lt;option&gt;Three&lt;/option&gt;
&lt;/select&gt;
</snippet></ROW><ROW><id>8601018</id><snippet>Two</snippet></ROW><ROW><id>8601118</id><snippet>import os
import mimetypes
from django.core.servers.basehttp import FileWrapper


def download_file(request):
   the_file = '/some/file/name.png'
   filename = os.path.basename(the_file)
   response = HttpResponse(FileWrapper(open(the_file)),
                           content_type=mimetypes.guess_type(the_file)[0])
   response['Content-Length'] = os.path.getsize(the_file)    
   response['Content-Disposition'] = "attachment; filename=%s" % filename
   return response
</snippet></ROW><ROW><id>8601389</id><snippet>&gt;&gt;&gt; class D:
        def keys(self):
            return ['a', 'b']
        def __getitem__(self, key):
            return key.upper()


&gt;&gt;&gt; def f(**kwds):
        print kwds


&gt;&gt;&gt; f(**D())
{'a': 'A', 'b': 'B'}
</snippet></ROW><ROW><id>8601392</id><snippet>command = ['/usr/bin/python', '/tmp/script.py', 'mcl=NULL', 'mtp=data', 'mnm=DS4INST', 'mno=NULL' 'mse=NULL', 'mce=cll01'] 
</snippet></ROW><ROW><id>8601392</id><snippet>command</snippet></ROW><ROW><id>8601392</id><snippet>/usr/bin/python "/tmp/script.py mcl=NULL mtp=data mnm=DS4INST mno=NULL mse=NULL mce=cll01"
</snippet></ROW><ROW><id>8601392</id><snippet>command</snippet></ROW><ROW><id>8601513</id><snippet>'select * from personCounts'</snippet></ROW><ROW><id>8601513</id><snippet>set()</snippet></ROW><ROW><id>8601513</id><snippet>def increment_person_counts(count_per_person):
   with sqlite3.connect(r'./people_database') as connection:
      cursor = connection.cursor()
      cursor.execute('select person from personCounts')
      known_persons = set(row[0] for row in cursor.fetchall())
      for person, count in count_per_person.iteritems():
         if person in known_persons:
            cursor.execute('insert into personCounts(person, count) values (?, ?)', [person, count])
         else:
            cursor.execute('update personCounts SET count=count + ? WHERE person=?', [count, person])
      connection.commit()
</snippet></ROW><ROW><id>8601513</id><snippet>executemany</snippet></ROW><ROW><id>8601513</id><snippet>def increment_person_counts(count_per_person):
    with sqlite3.connect(r'./people_database') as connection:
        cursor = connection.cursor()
        cursor.execute('select person from personCounts')
        known_persons = set(row[0] for row in cursor.fetchall())
        cursor.executemany('insert into personCounts(person, count) values (?, ?)', ((person, count) for count_per_person.iteritems() if person in known_persons))
        for person, count in count_per_person.iteritems():
            if person not in known_persons:
                cursor.execute('update personCounts SET count=count + ? WHERE person=?', [count, person])
        connection.commit()
</snippet></ROW><ROW><id>8601706</id><snippet>bydate = []
planNames = set()
for d in data:
    ddict = {'date': d['date']}
    plans = d
    del plans['date']
    planNames = planNames.union(plans.keys())
    ddict['plans']=plans
    bydate.append(ddict)
</snippet></ROW><ROW><id>8601706</id><snippet>[{'date': u'2011-08-01', 'plans': {u'PLAN_B': True, u'PLAN_C': True, u'PLAN_A': True, u'PLAN_F': True, u'PLAN_G': True, u'PLAN_D': True, u'PLAN_E': True}}, {'date': u'2011-08-22', 'plans': {u'PLAN_B': False, u'PLAN_C': True, u'PLAN_A': True, u'PLAN_F': False, u'PLAN_G': True, u'PLAN_D': True, u'PLAN_E': True}}]
</snippet></ROW><ROW><id>8601706</id><snippet>set([u'PLAN_B', u'PLAN_C', u'PLAN_A', u'PLAN_F', u'PLAN_G', u'PLAN_D', u'PLAN_E'])
</snippet></ROW><ROW><id>8601736</id><snippet>EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'
</snippet></ROW><ROW><id>8601736</id><snippet>EMAIL_HOST = 'email-smtp.us-east-1.amazonaws.com'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'my_smtp_username'
EMAIL_HOST_PASSWORD = 'my_smtp_password'
EMAIL_USE_TLS = True
</snippet></ROW><ROW><id>8601921</id><snippet>neg = -100*numpy.random.rand(20e6)
pos = -neg
combined = numpy.zeros(len(neg)+len(pos))
combined[::2] = neg
combined[1::2] = pos
</snippet></ROW><ROW><id>8601921</id><snippet>combined.sum()</snippet></ROW><ROW><id>8603129</id><snippet>session.query(MyUserClass).filter(MyUserClass.id.in_((123,456))).all()</snippet></ROW><ROW><id>8603129</id><snippet>session.execute(
    select(
        [MyUserTable.c.id, MyUserTable.c.name], 
        MyUserTable.c.id.in_((123, 456))
    )
).fetchall()
</snippet></ROW><ROW><id>8603129</id><snippet>select()</snippet></ROW><ROW><id>8603129</id><snippet>where</snippet></ROW><ROW><id>8603129</id><snippet>c</snippet></ROW><ROW><id>8603129</id><snippet>columns</snippet></ROW><ROW><id>8603157</id><snippet>strptime</snippet></ROW><ROW><id>8603157</id><snippet>ymdhms, usec = rows['TStamp'].split('.')
time.mktime((datetime.datetime.strptime(ymdhms, "%Y%m%d%H%M%S" ) ).timetuple()) + int(usec) / 1000000.
</snippet></ROW><ROW><id>8603385</id><snippet>string.format</snippet></ROW><ROW><id>8603385</id><snippet>unicode</snippet></ROW><ROW><id>8603385</id><snippet>print u'{id}, {name}'.format(id=i, name=n)
</snippet></ROW><ROW><id>8603385</id><snippet>unicode.format</snippet></ROW><ROW><id>8603659</id><snippet>curl_easy_perform</snippet></ROW><ROW><id>8603659</id><snippet>curl_multi_perform</snippet></ROW><ROW><id>8603659</id><snippet>perform</snippet></ROW><ROW><id>8603659</id><snippet>perform</snippet></ROW><ROW><id>8603659</id><snippet>some_call ()</snippet></ROW><ROW><id>8603659</id><snippet>receive</snippet></ROW><ROW><id>8603735</id><snippet>from django.db import models
from django.contrib.sites.models import Site
from django.db.models import signals
from notification import models as notification

def create_notice_types(app, created_models, verbosity, **kwargs):
    notification.create_notice_type("new_comment", "Comment posted", "A comment has been posted")
signals.post_syncdb.connect(create_notice_types, sender=notification)

def new_comment(sender, instance, created, **kwargs):
    # remove this if-block if you want notifications for comment edit too
    if not created:
        return None

    context = {
        'comment': instance,
        'site': Site.objects.get_current(),
    }
    recipients = []

    # add all users who commented the same object to recipients
    for comment in instance.__class__.objects.for_model(instance.content_object):
        if comment.user not in recipients and comment.user != instance.user:
            recipients.append(comment.user)

    # if the commented object is a user then notify him as well
    if isinstance(instance.content_object, models.get_model('auth', 'User')):
        # if he his the one who posts the comment then don't add him to recipients
        if instance.content_object != instance.user and instance.content_object not in recipients:
            recipients.append(instance.content_object)

    notification.send(recipients, 'new_comment', context)

signals.post_save.connect(new_comment, sender=models.get_model('comments', 'Comment'))
</snippet></ROW><ROW><id>8603735</id><snippet>{{ comment.user }} commented on {{ comment.object }}
</snippet></ROW><ROW><id>8603735</id><snippet>&lt;a href="{{ comment.user.get_absolute_url }}"&gt;{{ comment.user }}&lt;/a&gt; commented &lt;a href="{{ comment.content_object.get_absolute_url }}"&gt;{{ comment.content_object }}&lt;/a&gt;
</snippet></ROW><ROW><id>8603735</id><snippet>{{ comment.user }} commented on {{ comment.content_object }}

Comment:
{{ comment.comment }}

Reply on: 
http://{{ site.domain }}{{ comment.content_object.get_absolute_url }}
</snippet></ROW><ROW><id>8603940</id><snippet>RequestFactory</snippet></ROW><ROW><id>8603940</id><snippet>View</snippet></ROW><ROW><id>8603940</id><snippet>__init__</snippet></ROW><ROW><id>8603940</id><snippet>as_view</snippet></ROW><ROW><id>8603940</id><snippet>dispatch</snippet></ROW><ROW><id>8603940</id><snippet>self.request</snippet></ROW><ROW><id>8603940</id><snippet>self.args</snippet></ROW><ROW><id>8603940</id><snippet>self.kwargs</snippet></ROW><ROW><id>8604388</id><snippet>plt.xscale('log')
</snippet></ROW><ROW><id>8604449</id><snippet>hg</snippet></ROW><ROW><id>8604449</id><snippet>subprocess</snippet></ROW><ROW><id>8604449</id><snippet>env = os.environ.copy()
env['PATH'] = &lt;whatever you need here&gt;
subprocess.Popen(&lt;hg command&gt;, env=env)
</snippet></ROW><ROW><id>8604449</id><snippet>PATH</snippet></ROW><ROW><id>8604449</id><snippet>PATH</snippet></ROW><ROW><id>8604449</id><snippet>env</snippet></ROW><ROW><id>8604734</id><snippet>from zipfile import ZipFile
from io import StringIO
zname,zipextfile = 'zipcontainer.zip', 'file_in_archive'
istream = ZipFile(zname).open(zipextfile)
ostream = StringIO(istream.read())
</snippet></ROW><ROW><id>8604829</id><snippet>def createPhoneBill(minutes_used):
    return {
        "minutes_used":minutes_used,
        # you could put more attributes here, just add them as arguments to the function
    }
</snippet></ROW><ROW><id>8604829</id><snippet>dictionary.get(attr_name, default_value)</snippet></ROW><ROW><id>8604829</id><snippet>mybills = createPhoneBill(5000):
if mybills["minutes_used"] &gt; 2000:
    del mybills["minutes_used"]
</snippet></ROW><ROW><id>8604829</id><snippet>mybills = createPhoneBill(5000):
if mybills["minutes_used"] &gt; 3000:
    del mybills
</snippet></ROW><ROW><id>8605236</id><snippet>big_list = [
  [
    (20, 'Item A', 'Jan'),
    (30, 'Item B', 'Jan'),
    (12, 'Item C', 'Jan'),
  ],
  [
    (22, 'Item A', 'Feb'),
    (34, 'Item B', 'Feb'),
    (15, 'Item C', 'Feb'),
  ]]

s = {}
for l in big_list:
    for m in l:
        s[m[1]] = s.get(m[1], 0) + m[0]
</snippet></ROW><ROW><id>8605236</id><snippet>s</snippet></ROW><ROW><id>8605236</id><snippet>{'Item A': 42, 'Item B': 64, 'Item C': 27}</snippet></ROW><ROW><id>8605236</id><snippet>for l in big_list:
    l.sort(key=lambda x: s[x[1]])
</snippet></ROW><ROW><id>8605236</id><snippet>big_list</snippet></ROW><ROW><id>8605236</id><snippet>[[(12, 'Item C', 'Jan'), (20, 'Item A', 'Jan'), (30, 'Item B', 'Jan')],
 [(15, 'Item C', 'Feb'), (22, 'Item A', 'Feb'), (34, 'Item B', 'Feb')]]
</snippet></ROW><ROW><id>8606214</id><snippet>original = ['0.061', '0.012', '0.017', '0.030', '0.093', '0.016', '0.016', 
'0.049', '0.050', '0.001', '0.006', '0.034', '0.018', '0.052', '0.055',
 '0.013', '0.001', '0.041', '0.050', '0.069', '0.021', '0.007', '0.017',
 '0.001', '0.013', '0.000', '0.159']

result = [sum(float(item) for item in original[0:rank+1]) for rank in xrange(len(original))]

&gt;&gt;&gt; [0.061, 0.073, 0.09, 0.12, 0.213, 0.22899999999999998, 0.245, 0.294, 0.344, 0.345, 0.351, 0.385, 0.403, 0.455, 0.51, 0.523, 0.524, 0.5650000000000001, 0.6150000000000001, 0.6840000000000002, 0.7050000000000002, 0.7120000000000002, 0.7290000000000002, 0.7300000000000002, 0.7430000000000002, 0.7430000000000002, 0.9020000000000002]
</snippet></ROW><ROW><id>8606295</id><snippet>age = .01
print 'test%s' % str(age)[1:] if 0&lt;age&lt;1 else str(age)
</snippet></ROW><ROW><id>8606605</id><snippet>real_fun = getattr(generator, 'getCmd')
</snippet></ROW><ROW><id>8606605</id><snippet>real_fun = getattr(generator, 'nextCmd')
</snippet></ROW><ROW><id>8606605</id><snippet>snmpwalk</snippet></ROW><ROW><id>8606605</id><snippet>snmpwalk</snippet></ROW><ROW><id>8606605</id><snippet>snmpbulkget</snippet></ROW><ROW><id>8606605</id><snippet>snmpbulkget</snippet></ROW><ROW><id>8606605</id><snippet>snmpwalk</snippet></ROW><ROW><id>8606605</id><snippet>res = netsnmp.snmpgetbulk(oid, Version = 2, DestHost='192.168.0.100', 
                          Community='pub')
</snippet></ROW><ROW><id>8606605</id><snippet>res = netsnmp.snmpwalk(oid, Version = 2, DestHost='192.168.0.100', 
                       Community='pub')
</snippet></ROW><ROW><id>8606605</id><snippet>snmpwalk</snippet></ROW><ROW><id>8606753</id><snippet>proc.wait()
</snippet></ROW><ROW><id>8606753</id><snippet>time.sleep(15)</snippet></ROW><ROW><id>8606831</id><snippet>&gt;&gt;&gt; adict = {1: {'a': 13, 'b': 19, 'c':15}, 2: {'a': 7, 'b': 2, 'c':0}}
&gt;&gt;&gt; def dict_add(a,b):
...   a = a.copy()
...   for k,v in b.items():
...     if isinstance(v,(dict,)):
...       a[k] = dict_add(a.get(k,{}),v)
...     else:
...       a[k] = a.get(k,0) + v
...   return a
...
&gt;&gt;&gt; dict_add(adict,{1: {'a': 3, 'b': 9, 'c': 23}})
{1: {'a': 16, 'c': 38, 'b': 28}, 2: {'a': 7, 'c': 0, 'b': 2}}
&gt;&gt;&gt; dict_add(dict_add(adict,{1: {'a': 3, 'b': 9, 'c': 23}}),{3:{'a':4}})
{1: {'a': 16, 'c': 38, 'b': 28}, 2: {'a': 7, 'c': 0, 'b': 2}, 3: {'a': 4}}
</snippet></ROW><ROW><id>8606867</id><snippet>import sys
...

print "Part 1 of script executed..."
sys.stdout.flush() # do this after the print
</snippet></ROW><ROW><id>8606914</id><snippet>from BeautifulSoup import BeautifulSoup
import re

soup = BeautifulSoup(open('prueba.html').read())
item = re.sub('\s+', ' ', soup.h2.a.text)
price = soup.find('p', {'class': 'productlist_mostwanted_price'}).text
price = re.search('\d+\.\d+', price).group(0)

print item, price
</snippet></ROW><ROW><id>8607322</id><snippet>from tg.decorators import Decoration
from tg.paginate import Page
from tg.util import Bunch, partial
from tg import request

class paginate(object):
    def __init__(self, name, use_prefix=False,
        items_per_page=10, max_items_per_page=0):
        self.name = name
        prefix = use_prefix and name + '_' or ''
        self.page_param = prefix + 'page'
        self.items_per_page_param = prefix + 'items_per_page'
        self.items_per_page = items_per_page
        self.max_items_per_page = max_items_per_page

    def __call__(self, func):
        decoration = Decoration.get_decoration(func)
        decoration.register_hook('before_validate', self.before_validate)
        decoration.register_hook('before_render', self.before_render)
        return func

    def before_validate(self, remainder, params):
        page_param = params.pop(self.page_param, None)
        if page_param:
            try:
                page = int(page_param)
                if page &lt; 1:
                    raise ValueError
            except ValueError:
                page = 1
        else:
            page = 1

        try:
            paginators_data = request.paginators
        except:
            paginators_data = request.paginators = {'_tg_paginators_params':{}}

        paginators_data['_tg_paginators_params'][self.page_param] = page_param
        paginators_data[self.name] = paginator = Bunch()

        paginator.paginate_page = page or 1
        items_per_page = params.pop(self.items_per_page_param, None)
        if items_per_page:
            try:
                items_per_page = min(
                    int(items_per_page), self.max_items_per_page)
                if items_per_page &lt; 1:
                    raise ValueError
            except ValueError:
                items_per_page = self.items_per_page
        else:
            items_per_page = self.items_per_page
        paginator.paginate_items_per_page = items_per_page
        paginator.paginate_params = params.copy()
        paginator.paginate_params.update(paginators_data['_tg_paginators_params'])
        if items_per_page != self.items_per_page:
            paginator.paginate_params[self.items_per_page_param] = items_per_page

    def before_render(self, remainder, params, output):
        if not isinstance(output, dict) or not self.name in output:
            return

        paginator = request.paginators[self.name]
        collection = output[self.name]
        page = Page(collection, paginator.paginate_page,
            paginator.paginate_items_per_page, controller='/')
        page.kwargs = paginator.paginate_params
        if self.page_param != 'name':
            page.pager = partial(page.pager, page_param=self.page_param)
        if not getattr(tmpl_context, 'paginators', None):
            tmpl_context.paginators = Bunch()
        tmpl_context.paginators[self.name] = output[self.name] = page
</snippet></ROW><ROW><id>8607578</id><snippet>import configparser, os, sys, vpp43
</snippet></ROW><ROW><id>8607578</id><snippet>pyvisa\__init__.py</snippet></ROW><ROW><id>8607578</id><snippet>import configparser, os, sys
from . import vpp43
</snippet></ROW><ROW><id>8607775</id><snippet>cr.execute</snippet></ROW><ROW><id>8607775</id><snippet>kr.fetchall()</snippet></ROW><ROW><id>8607775</id><snippet>tong += kq[0][1]</snippet></ROW><ROW><id>8607775</id><snippet>giolam</snippet></ROW><ROW><id>8607775</id><snippet>kr.fetchone()</snippet></ROW><ROW><id>8607775</id><snippet>kq[1]</snippet></ROW><ROW><id>8607981</id><snippet>from math import sqrt

def k_means(data_pts, k=None):
    """ Return k (x,y) pairs where:
            k = number of clusters
        and each
            (x,y) pair = centroid of cluster

        data_pts should be a list of (x,y) tuples, e.g.,
            data_pts=[ (0,0), (0,5), (1,3) ]
    """

    """ Helper functions """
    def lists_are_same(la, lb): # see if two lists have the same elements
        out = False
        for item in la:
            if item not in lb:
                out = False
                break
            else:
                out = True
        return out  
    def distance(a, b): # distance between (x,y) points a and b
        return sqrt(abs(a[0]-b[0])**2 + abs(a[1]-b[1])**2)
    def average(a): # return the average of a one-dimensional list (e.g., [1, 2, 3])
        return sum(a)/float(len(a))

    """ Set up some initial values """
    if k is None: # if the user didn't supply a number of means to look for, try to estimate how many there are
        n = len(data_pts)# number of points in the dataset
        k = int(sqrt(n/2))  # number of clusters - see
                        #   http://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set#Rule_of_thumb
    if k &lt; 1: # make sure there's at least one cluster
        k = 1



    """ Randomly generate k clusters and determine the cluster centers,
        or directly generate k random points as cluster centers. """

    init_clusters = data_pts[:]         # put all of the data points into clusters
    shuffle(init_clusters)          # put the data points in random order
    init_clusters = init_clusters[0:k]  # only keep the first k random clusters

    old_clusters, new_clusters = {}, {} 
    for item in init_clusters:
        old_clusters[item] = [] # every cluster has a list of points associated with it. Initially, it's 0

    while 1: # just keep going forever, until our break condition is met
        tmp = {}
        for k in old_clusters: # create an editable version of the old_clusters dictionary
            tmp[k] = []

        """ Associate each point with the closest cluster center. """
        for point in data_pts: # for each (x,y) data point
            min_clust = None
            min_dist = 1000000000 # absurdly large, should be larger than the maximum distance for most data sets
            for pc in tmp: # for every possible closest cluster
                pc_dist = distance(point, pc)
                if pc_dist &lt; min_dist: # if this cluster is the closest, have it be the closest (duh)
                    min_dist = pc_dist
                    min_clust = pc
            tmp[min_clust].append(point) # add each point to its closest cluster's list of associated points

        """ Recompute the new cluster centers. """
        for k in tmp:
            associated = tmp[k]
            xs = [pt[0] for pt in associated] # build up a list of x's
            ys = [pt[1] for pt in associated] # build up a list of y's
            x = average(xs) # x coordinate of new cluster
            y = average(ys) # y coordinate of new cluster
            new_clusters[(x,y)] = associated # these are the points the center was built off of, they're *probably* still associated

        if lists_are_same(old_clusters.keys(), new_clusters.keys()): # if we've reached equilibrium, return the points
            return old_clusters.keys()
        else: # otherwise, we'll go another round. let old_clusters = new_clusters, and clear new_clusters.
            old_clusters = new_clusters
            new_clusters = {}
</snippet></ROW><ROW><id>8608609</id><snippet>__file__</snippet></ROW><ROW><id>8608609</id><snippet>inspect</snippet></ROW><ROW><id>8608609</id><snippet>inspect</snippet></ROW><ROW><id>8608609</id><snippet>inspect.getfile</snippet></ROW><ROW><id>8608609</id><snippet>inspect.getsource</snippet></ROW><ROW><id>8608609</id><snippet>Objects</snippet></ROW><ROW><id>8608609</id><snippet>list</snippet></ROW><ROW><id>8608870</id><snippet>.emacs</snippet></ROW><ROW><id>8608870</id><snippet>(setenv "PYTHONPATH" "lib")
</snippet></ROW><ROW><id>8609238</id><snippet>__init__</snippet></ROW><ROW><id>8609238</id><snippet>class Dog:
    def __init__(self, legs, colour):
        self.legs = legs
        self.colour = colour

fido = Dog(4, "brown")
spot = Dog(3, "mostly yellow")
</snippet></ROW><ROW><id>8609238</id><snippet>__init__</snippet></ROW><ROW><id>8609238</id><snippet>self</snippet></ROW><ROW><id>8609238</id><snippet>self.legs</snippet></ROW><ROW><id>8609238</id><snippet>legs</snippet></ROW><ROW><id>8609238</id><snippet>self</snippet></ROW><ROW><id>8609238</id><snippet>colour</snippet></ROW><ROW><id>8609238</id><snippet>population_size</snippet></ROW><ROW><id>8609238</id><snippet>colour</snippet></ROW><ROW><id>8609238</id><snippet>legs</snippet></ROW><ROW><id>8609238</id><snippet>class MyInteger:
    def __init__(self, newvalue)
        # imagine self as an index card.
        # under the heading of "value", we will write
        # the contents of the variable newvalue.
        self.value = newvalue
    def add(self, other)
        # when an integer wants to add itself to another integer,
        # we'll take their values and add them together,
        # then make a new integer with the result value.
        return MyInteger(self.value + other.value)

three = MyInteger(3)
# three now contains an object of class MyInteger
# three.value is now 3
five = MyInteger(5)
# five now contains an object of class MyInteger
# five.value is now 5
eight = three.add(five)
# here, we invoked the three's behaviour of adding another integer
# now, eight.value is three.value + five.value = 3 + 5 = 8
print eight.value
# ==&gt; 8
</snippet></ROW><ROW><id>8609238</id><snippet>other</snippet></ROW><ROW><id>8609238</id><snippet>class MyFraction:
    def __init__(self, newnumerator, newdenominator)
        self.numerator = newnumerator
        self.denominator = newdenominator
        # because every fraction is described by these two things
    def add(self, other):
        newdenominator = self.denominator * other.denominator
        newnumerator = self.numerator * other.denominator + self.denominator * other.numerator
        return MyFraction(newnumerator, newdenominator)
</snippet></ROW><ROW><id>8609238</id><snippet>half = MyFraction(1, 2)
third = MyFraction(1, 3)
five_sixths = half.add(third)
print five_sixths.numerator
# ==&gt; 5
print five_sixths.denominator
# ==&gt; 6
</snippet></ROW><ROW><id>8609238</id><snippet>colour = "grey"</snippet></ROW><ROW><id>8609238</id><snippet>colour</snippet></ROW><ROW><id>8609238</id><snippet>"fuchsia"</snippet></ROW><ROW><id>8609238</id><snippet>colour = ["grey", "fuchsia"]</snippet></ROW><ROW><id>8609238</id><snippet>colour</snippet></ROW><ROW><id>8609238</id><snippet>fido.colour</snippet></ROW><ROW><id>8609238</id><snippet>spot.colour</snippet></ROW><ROW><id>8609238</id><snippet>fido</snippet></ROW><ROW><id>8609238</id><snippet>spot</snippet></ROW><ROW><id>8609238</id><snippet>Dog(4, "brown")</snippet></ROW><ROW><id>8609238</id><snippet>three.add(five)</snippet></ROW><ROW><id>8609238</id><snippet>self</snippet></ROW><ROW><id>8609238</id><snippet>__init__</snippet></ROW><ROW><id>8609238</id><snippet>self</snippet></ROW><ROW><id>8609238</id><snippet>MyInteger</snippet></ROW><ROW><id>8609238</id><snippet>add</snippet></ROW><ROW><id>8609238</id><snippet>self</snippet></ROW><ROW><id>8609238</id><snippet>three</snippet></ROW><ROW><id>8609238</id><snippet>three.value</snippet></ROW><ROW><id>8609238</id><snippet>add</snippet></ROW><ROW><id>8609238</id><snippet>self.value</snippet></ROW><ROW><id>8609238</id><snippet>add</snippet></ROW><ROW><id>8609238</id><snippet>the_mangy_one = fido</snippet></ROW><ROW><id>8609238</id><snippet>fido</snippet></ROW><ROW><id>8609238</id><snippet>fido.colour</snippet></ROW><ROW><id>8609238</id><snippet>the_mangy_one.colour</snippet></ROW><ROW><id>8609238</id><snippet>__init__</snippet></ROW><ROW><id>8609238</id><snippet>colour</snippet></ROW><ROW><id>8609238</id><snippet>fido.colour</snippet></ROW><ROW><id>8609238</id><snippet>self.colour</snippet></ROW><ROW><id>8609238</id><snippet>__init__</snippet></ROW><ROW><id>8609238</id><snippet>fido</snippet></ROW><ROW><id>8609238</id><snippet>x = 5</snippet></ROW><ROW><id>8609238</id><snippet>x</snippet></ROW><ROW><id>8609238</id><snippet>fido = Cat(4, "pleasing")</snippet></ROW><ROW><id>8609238</id><snippet>Cat</snippet></ROW><ROW><id>8609238</id><snippet>fido</snippet></ROW><ROW><id>8609238</id><snippet>fido = x</snippet></ROW><ROW><id>8609238</id><snippet>class Cat:
    census = []

    def __init(self, legs, colour):
        self.colour = colour
        self.legs = legs
        Cat.census.append(self)
</snippet></ROW><ROW><id>8609238</id><snippet>census</snippet></ROW><ROW><id>8609238</id><snippet>Cat</snippet></ROW><ROW><id>8609238</id><snippet>fluffy = Cat(4, "white")
spark = Cat(4, "fiery")
Cat.census
# ==&gt; [&lt;__main__.Cat instance at 0x108982cb0&gt;, &lt;__main__.Cat instance at 0x108982e18&gt;]
# or something like that
</snippet></ROW><ROW><id>8609238</id><snippet>[fluffy, sparky]</snippet></ROW><ROW><id>8609238</id><snippet>__str__</snippet></ROW><ROW><id>8609238</id><snippet>add</snippet></ROW><ROW><id>8609238</id><snippet>__init__</snippet></ROW><ROW><id>8609288</id><snippet>events = client.events().list(calendarId='primary',
                              timeMin='2011-12-22T09:00:00Z',
                              timeMax='2011-12-22T22:00:00Z').execute()
</snippet></ROW><ROW><id>8609486</id><snippet>QDialog</snippet></ROW><ROW><id>8609486</id><snippet>resize</snippet></ROW><ROW><id>8609486</id><snippet>minimumSize</snippet></ROW><ROW><id>8609486</id><snippet>miminumSize</snippet></ROW><ROW><id>8609486</id><snippet>minimumSize</snippet></ROW><ROW><id>8609486</id><snippet>def method(self):
    if self.frame.isVisible():
        # uncomment below, if you like symmetry :)
        # self.setMinimumSize(630, 150)
        self.resize(630, 150)
    else:
        self.setMinimumSize(630, 50)
        self.resize(630, 50)
</snippet></ROW><ROW><id>8609486</id><snippet>sizeConstraint</snippet></ROW><ROW><id>8609621</id><snippet>re.compile("Sent from my (iPhone|iPod)")
</snippet></ROW><ROW><id>8609760</id><snippet>inv.bc_invoice_product_set.all</snippet></ROW><ROW><id>8609760</id><snippet>BC_Invoice_Product</snippet></ROW><ROW><id>8609760</id><snippet>{{ item.product.eng_name }}</snippet></ROW><ROW><id>8609760</id><snippet>BC_Product</snippet></ROW><ROW><id>8609760</id><snippet>BC_Invoice_Product</snippet></ROW><ROW><id>8609760</id><snippet>product</snippet></ROW><ROW><id>8609760</id><snippet>bc_product</snippet></ROW><ROW><id>8609976</id><snippet>import os
import sys
import ImageFont
import Image
import ImageDraw

img = Image.open("two.jpg")
draw = ImageDraw.Draw(img)    
font = ImageFont.truetype("/usr/share/fonts/truetype/msttcorefonts/Times_New_Roman.ttf",27)
draw.text((100, 100), "test test test", font=font, fill = 'blue')    
img.save("out.jpg")
</snippet></ROW><ROW><id>8609987</id><snippet>import pygame
import sys
from multiprocessing import Process, Pipe

class Grid:
    colors = {"blue":(0, 0, 255), "red":(255, 0, 0), "green":(0, 255, 0), "black":(0, 0, 0), "white":(255, 255, 255)}

    def __init__(self, width, height, cellSize, borderWidth=1):
        self.cellSize = cellSize
        self.borderWidth = borderWidth
        self.width = width * (cellSize + borderWidth)
        self.height = height * (cellSize + borderWidth)

        #pygame.draw.rect(self.screen, todo[1], (todo[2], todo[3], todo[4], todo[5]), 0)
        self.parent_conn, self.child_conn = Pipe()
        self.p = Process(target=self.mainLoop, args=(self.child_conn, self.width, self.height,))
        self.p.start()

    def close():
        self.p.join()

    def clearGrid(self):
        pass

    def highlightBox(self, x, y, color):
        xx = x * (self.cellSize + self.borderWidth)
        yy = y * (self.cellSize + self.borderWidth)
        self.parent_conn.send(["box", color, xx, yy, self.cellSize, self.cellSize])

    def mainLoop(self, conn, width, height):
        #make window
        screen = pygame.display.set_mode((self.width, self.height))

        running = True
        while running:
            # is there data to read
            if conn.poll():
                #read all data
                todo = conn.recv()
                print("Recived " + str(todo))

            #do the drawing
            if todo[0] == "box":
                print("drawing box")
                pygame.draw.rect(screen, todo[1], (todo[2], todo[3], todo[4], todo[5]), 0) #color, x, y, width, height
                todo = ["none"]

            #draw to screen
            pygame.display.flip()

            #get events
            event = pygame.event.poll()
            if event.type == pygame.QUIT:
                running = False
</snippet></ROW><ROW><id>8610359</id><snippet>GtkDrawingArea</snippet></ROW><ROW><id>8610359</id><snippet>expose</snippet></ROW><ROW><id>8610359</id><snippet>draw</snippet></ROW><ROW><id>8610359</id><snippet>#!/usr/bin/python
from gi.repository import Gtk
import cairo
import math

def OnDraw(w, cr):
    cr.set_source_rgb(1, 1, 0)
    cr.arc(320,240,100, 0, 2*math.pi)
    cr.fill_preserve()

    cr.set_source_rgb(0, 0, 0)
    cr.stroke()

    cr.arc(280,210,20, 0, 2*math.pi)
    cr.arc(360,210,20, 0, 2*math.pi)
    cr.fill()

    cr.set_line_width(10)
    cr.set_line_cap(cairo.LINE_CAP_ROUND)
    cr.arc(320, 240, 60, math.pi/4, math.pi*3/4)
    cr.stroke()

w = Gtk.Window()
w.set_default_size(640, 480)
a = Gtk.DrawingArea()
w.add(a)

w.connect('destroy', Gtk.main_quit)
a.connect('draw', OnDraw)

w.show_all()

Gtk.main()
</snippet></ROW><ROW><id>8610377</id><snippet>lastset = [...]  # Populate with the output of the last run
thisset = [...]  # The current results

# Remove rows that aren't in the current result set
for row in lastset - thisset:
    deleteentry(row[0])  # Where row[0] is the unique key for the table

# Add rows that weren't in the last result set
for row in thisset - lastset:
    insertentry(row)
</snippet></ROW><ROW><id>8610377</id><snippet>&gt;&gt;&gt; a = set(range(10000000))
&gt;&gt;&gt; b = set(range(100, 10000100))
&gt;&gt;&gt; len(a - b)
100
&gt;&gt;&gt; len(b - a)
100
</snippet></ROW><ROW><id>8610995</id><snippet>type()</snippet></ROW><ROW><id>8610995</id><snippet>print type(some_model) 
</snippet></ROW><ROW><id>8611157</id><snippet>QByteArray</snippet></ROW><ROW><id>8611157</id><snippet>def decodeMimeData(self, data):
    result = {}
    value = QtCore.QVariant()
    stream = QtCore.QDataStream(data)
    while not stream.atEnd():
        row = stream.readInt32()
        col = stream.readInt32()
        item = result.setdefault(col, {})
        for role in range(stream.readInt32()):
            key = QtCore.Qt.ItemDataRole(stream.readInt32())
            stream &gt;&gt; value
            item[key] = value.toPyObject()
    return result
</snippet></ROW><ROW><id>8611157</id><snippet>format = 'application/x-qabstractitemmodeldatalist'
data = event.mimeData().data(format)
item = self.decodeMimeData(data)
print item[0][QtCore.Qt.DisplayRole]
</snippet></ROW><ROW><id>8611585</id><snippet>arch -i386 /path/to/python/executable
from Tkinter import *
</snippet></ROW><ROW><id>8611585</id><snippet>arch -x86_64 /path/to/python/executable
from Tkinter import *
</snippet></ROW><ROW><id>8611701</id><snippet>class Thing(Base):
    id = ...

    def get_children(self, childrentype, invalidate=False):
        if invalidate:
            region_invalidate(_get_children, None, self.id, childrentype)

        @cache_region('short_term', 'get_children')
        def _get_children(id, childrentype):
            ...
            return query

        return _get_children(self.id, childrentype)
</snippet></ROW><ROW><id>8611801</id><snippet>&gt;&gt;&gt; svgfig._canvas_defaults

{'font-family': ['Helvetica',
                 'Arial',
                 'FreeSans',
                 'Sans',
                 'sans',
                 'sans-serif'],
 'height': '400px',
 'style': {'fill': 'none',
           'stroke': 'black',
           'stroke-linejoin': 'round',
           'stroke-width': '0.5pt',
           'text-anchor': 'middle'},
 'version': '1.1',
 'viewBox': '0 0 100 100',
 'width': '400px',
 'xmlns': 'http://www.w3.org/2000/svg',
 'xmlns:xlink': 'http://www.w3.org/1999/xlink'}
</snippet></ROW><ROW><id>8611801</id><snippet>attributes = dict(_canvas_defaults)</snippet></ROW><ROW><id>8612023</id><snippet>*</snippet></ROW><ROW><id>8612023</id><snippet>def f(a, b, c):
    print a, b, c
</snippet></ROW><ROW><id>8612023</id><snippet>f(...)</snippet></ROW><ROW><id>8612023</id><snippet>f((1,2,3))
</snippet></ROW><ROW><id>8612023</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() takes exactly 3 arguments (1 given)
</snippet></ROW><ROW><id>8612023</id><snippet>f(*(1,2,3))
</snippet></ROW><ROW><id>8612023</id><snippet>1 2 3
</snippet></ROW><ROW><id>8612023</id><snippet>*</snippet></ROW><ROW><id>8612023</id><snippet>def f2(a, b, *args):
    print a, b,
    for x in args:
        print x,
    print
</snippet></ROW><ROW><id>8612023</id><snippet>f2(*(1,2,3,4,5))</snippet></ROW><ROW><id>8612023</id><snippet>1 2 3 4 5
</snippet></ROW><ROW><id>8612183</id><snippet>from StringIO import StringIO
import Image

file = StringIO()
image = Image.new("RGBA", size=(50,50), color=(256,0,0))
image.save(file, 'png')
file.name = 'test.png'
file.seek(0)
</snippet></ROW><ROW><id>8613067</id><snippet>class Service(object):
    def __init__(self, host, binary, topic, manager, report_interval=None,
             periodic_interval=None, *args, **kwargs):
        print 'Initializing Service'
        super(Service, self).__init__(*args, **kwargs)

class Color(object):
    def __init__(self, color='red', **kwargs):
        print 'Initializing Color'
        self.color = color
        super(Color, self).__init__(**kwargs)

class ColoredService(Service, Color):
    def __init__(self, *args, **kwds):
        print 'Initializing Colored Service'
        super(ColoredService, self).__init__(*args, **kwds)

c = ColoredService('host', 'bin', 'top', 'mgr', 'ivl', color='blue')
</snippet></ROW><ROW><id>8613338</id><snippet>WSGIScriptAlias</snippet></ROW><ROW><id>8613338</id><snippet>\</snippet></ROW><ROW><id>8613338</id><snippet>my_django_site</snippet></ROW><ROW><id>8613338</id><snippet>Alias</snippet></ROW><ROW><id>8613532</id><snippet>dist</snippet></ROW><ROW><id>8613896</id><snippet>filter</snippet></ROW><ROW><id>8613896</id><snippet>&gt;&gt;&gt; vs = [{'ID': 1}, {'ID': 4}]
&gt;&gt;&gt; for i, v in enumerate(filter(lambda x: x['ID'] &amp; 1, vs)):
...     print i, v
...
0 {'ID': 1}
</snippet></ROW><ROW><id>8613936</id><snippet>def nth_day_of_month(start, end, nth, weekday):
    assert start.day == 1, "start on the first day of a month"
    assert nth &gt; 0
    assert 1 &lt;= weekday &lt;= 7

    candidate = start
    seen_in_month = 0
    while candidate &lt;= end:
        if candidate.isoweekday() == weekday:
            seen_in_month += 1
            if seen_in_month == nth:
                yield candidate
                current_month = candidate.month
                while candidate.month == current_month:
                    candidate += timedelta(1)
                seen_in_month = 0
            else:
                if (candidate + timedelta(1)).month != candidate.month:
                    seen_in_month = 0
                candidate += timedelta(1)
        else:
            if (candidate + timedelta(1)).month != candidate.month:
                seen_in_month = 0
            candidate += timedelta(1)


# third wednesday
print list(nth_day_of_month(date(2011, 1, 1), date(2012, 1, 1), nth=3, weekday=3))

# fifth sunday
print list(nth_day_of_month(date(2011, 1, 1), date(2012, 1, 1), nth=5, weekday=7))

# 9th monday
print list(nth_day_of_month(date(2011, 1, 1), date(2012, 1, 1), nth=9, weekday=1))
</snippet></ROW><ROW><id>8613936</id><snippet>def infinite_nth_day_of_month(start, nth, weekday):
    assert start.day == 1, "start on the first day of a month"
    assert nth &gt; 0
    assert 1 &lt;= weekday &lt;= 7

    candidate = start
    seen_in_month = 0
    while True:
        if candidate.isoweekday() == weekday:
            seen_in_month += 1
            if seen_in_month == nth:
                yield candidate
                current_month = candidate.month
                while candidate.month == current_month:
                    candidate += timedelta(1)
                seen_in_month = 0
            else:
                if (candidate + timedelta(1)).month != candidate.month:
                    seen_in_month = 0
                candidate += timedelta(1)
        else:
            if (candidate + timedelta(1)).month != candidate.month:
                seen_in_month = 0
            candidate += timedelta(1)

# this will create an infinite list, not a good idea
# print list(infinite_nth_day_of_month(date(2011, 1, 1), 3, 3))

import itertools

date_generator = infinite_nth_day_of_month(date(2011, 1, 1), 3, 3)
# create a list the 10000 third wednesdays of 2011 and into the future
date_list = list(itertools.islice(date_generator, 10000))

&gt;&gt;&gt; print date_list[0]
2011-01-19
&gt;&gt;&gt; print date_list[-1]
2844-04-20
</snippet></ROW><ROW><id>8613936</id><snippet>datetime.date</snippet></ROW><ROW><id>8613936</id><snippet>OverflowError: date value out of range</snippet></ROW><ROW><id>8614022</id><snippet>def proj_view(request, cust):
    return HttpResponse("project overview for cust: %s." % cust) 
</snippet></ROW><ROW><id>8614078</id><snippet>from multiprocessing import Pool, current_process

def start_exe():
    return 'done', current_process().name

if __name__ == '__main__':
    p = Pool(5)
    result = p.apply_async(start_exe)

    print result.get()
</snippet></ROW><ROW><id>8614078</id><snippet>('done', 'PoolWorker-4')
</snippet></ROW><ROW><id>8615071</id><snippet>                $.ajax({
                        url : url,
                        type: "POST",
                        data : {csrfmiddlewaretoken: document.getElementsByName('csrfmiddlewaretoken')[0].value},
                        dataType : "json",
                        success: function( data ){
                            // do something
                        }
                    });
</snippet></ROW><ROW><id>8615731</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>8616400</id><snippet>aggregate</snippet></ROW><ROW><id>8616400</id><snippet>ItemPrice.objects.aggregate(Sum('price'))
</snippet></ROW><ROW><id>8616583</id><snippet>import random

secret = random.randint(1, 99)
guess = 0
tries = 0

print "It is a number between 1 and 99. I'll give you six tries. "

while guess != secret and tries &lt; 6:
    guess = input("What's your guess? ")
    if guess &lt; secret:
        print "Too low!"
    elif guess &gt; secret:
        print "Too high"
        tries = tries + 1
    elif guess == secret:
        print "Correct! You found my secret!"
    else:
        print "No more guesses! Better luck next time!"
        print "The secret number was", secret 
</snippet></ROW><ROW><id>8616583</id><snippet>tries = tries + 1</snippet></ROW><ROW><id>8616885</id><snippet>DOTALL</snippet></ROW><ROW><id>8616885</id><snippet>p = re.compile(r'&lt;.*?&gt;',re.DOTALL)
</snippet></ROW><ROW><id>8617025</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>8617025</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

url = "http://www.gsmarena.com/samsung-phones-f-9-0-p2.php"
text = urllib2.urlopen(url).read();
soup = BeautifulSoup(text);

data = soup.findAll('div',attrs={'class':'makers'});
for div in data:
    links = div.findAll('a')
    for a in links:
        print "http://www.gsmarena.com/" + a['href'];
</snippet></ROW><ROW><id>8617304</id><snippet>pip install svn+http://code.google.com/p/pyclamd/source/browse/#svn%2Ftrunk
</snippet></ROW><ROW><id>8617488</id><snippet>['{0:06}'.format(i) for i in xrange(1000000) if sum(map(int,str(i))) == 20]
</snippet></ROW><ROW><id>8617488</id><snippet>result = []
for a in xrange(10):
    for b in xrange(10):
        for c in xrange(10):
            if a+b+c &lt;= 20:
                for d in xrange(10):
                    if 2 &lt; a+b+c+d &lt;= 20:
                        for e in xrange(10):
                            if 10 &lt; a+b+c+d+e &lt;= 20:
                                f = 20 - (a+b+c+d+e)
                                result.append(''.join(map(str, [a,b,c,d,e,f])))
</snippet></ROW><ROW><id>8617658</id><snippet>env</snippet></ROW><ROW><id>8617658</id><snippet>PERL5LIB=/Library/Perl:/Users/yourusername/perl
LC_ALL=C

12 1 * * * perl dosomething.pl
</snippet></ROW><ROW><id>8617658</id><snippet>export</snippet></ROW><ROW><id>8617856</id><snippet>namer[0]</snippet></ROW><ROW><id>8617924</id><snippet>print 'foo'</snippet></ROW><ROW><id>8617924</id><snippet>print 'foo',</snippet></ROW><ROW><id>8617924</id><snippet>In [1]: import ast

In [2]: ast.dump(ast.parse('print "hi"'))
Out[2]: "Module(body=[Print(dest=None, values=[Str(s='hi')], nl=True)])"

In [3]: ast.dump(ast.parse('print "hi",'))
Out[3]: "Module(body=[Print(dest=None, values=[Str(s='hi')], nl=False)])"
</snippet></ROW><ROW><id>8618236</id><snippet>[ ('Thong', 324.34), ('Tran', 543.34), ('Thang', 765.52) ... ]
</snippet></ROW><ROW><id>8618236</id><snippet>for record in kq:
    tong+=record[1]
</snippet></ROW><ROW><id>8618236</id><snippet>tong+=kq[1]</snippet></ROW><ROW><id>8618405</id><snippet>import subprocess
import os

fifo_name = 'my-bash.rc'
os.mkfifo(fifo_name)

try:
    process = subprocess.Popen(['bash', '--rcfile', fifo_name])
    with open(fifo_name, 'w') as f:
        f.write('echo "This is my-bash.rc"')
    process.wait()
finally:
    os.remove(fifo_name)
</snippet></ROW><ROW><id>8618554</id><snippet>import glob
import os
import zipfile

zip_files = glob.glob('*.zip')

for zip_filename in zip_files:
    dir_name = os.path.splitext(zip_filename)[0]
    os.mkdir(dir_name)
    zip_handler = zipfile.ZipFile(zip_filename, "r")
    zip_handler.extractall(dir_name)
</snippet></ROW><ROW><id>8618590</id><snippet>def NA(value, cur):
    if value is None:
        return 'NA'
    return value
</snippet></ROW><ROW><id>8618590</id><snippet>psycopg2.extensions.new_type</snippet></ROW><ROW><id>8618590</id><snippet>psycopg2.extensions.register_type</snippet></ROW><ROW><id>8618731</id><snippet>import random 
import math
def BoxMullerFormula(a,b):
    c = math.sqrt(-2 * math.log(a)) * math.cos(2 * math.pi * b)
    d = math.sqrt(-2 * math.log(a)) * math.sin(2 * math.pi * b)
    return (c,d)
def BoxM(): 
     while 1:
        Rand01 = random.random()
        Rand02 = random.random()
        (a,b) = BoxMullerFormula(Rand01,Rand02)
        yield a 
        yield b 

BoxM01 = BoxM()         
for i in xrange(10):
    print BoxM01.next() 
</snippet></ROW><ROW><id>8618822</id><snippet>arguments = [security,
             'add-generic-password',
             '-a', networkDict['name'],
             '-l', networkDict['name'],
             '-D', 'Airport network password',
             '-s', networkDict['uuid'],
             '-w', networkDict['pass'],
             '-T', 'group://Aiport',
             '-T', '/System/Library/CoreServices/SystemUIServer.app',
             '-T', '/Applications/System Preferences.app',
             '-T', '/usr/libexec/airportd',
             keychain]
</snippet></ROW><ROW><id>8619080</id><snippet>ChangeEmail</snippet></ROW><ROW><id>8619080</id><snippet>save</snippet></ROW><ROW><id>8619080</id><snippet>user1</snippet></ROW><ROW><id>8619080</id><snippet>else</snippet></ROW><ROW><id>8619106</id><snippet>os.system("open " + path)
</snippet></ROW><ROW><id>8619111</id><snippet>net use</snippet></ROW><ROW><id>8619111</id><snippet>mount.davfs</snippet></ROW><ROW><id>8620034</id><snippet>multiprocessing</snippet></ROW><ROW><id>8620034</id><snippet>SIGALARM</snippet></ROW><ROW><id>8620034</id><snippet>TimedOutExc</snippet></ROW><ROW><id>8620034</id><snippet>class TimedOutExc(Exception):
    """
    Raised when a timeout happens
    """

def timeout(timeout):
    """
    Return a decorator that raises a TimedOutExc exception
    after timeout seconds, if the decorated function did not return.
    """

    def decorate(f):

        def handler(signum, frame):
            raise TimedOutExc()

        def new_f(*args, **kwargs):

            old_handler = signal.signal(signal.SIGALRM, handler)
            signal.alarm(timeout)

            result = f(*args, **kwargs)  # f() always returns, in this scheme

            signal.signal(signal.SIGALRM, old_handler)  # Old signal handler is restored
            signal.alarm(0)  # Alarm removed

            return result

        new_f.func_name = f.func_name
        return new_f

    return decorate

@timeout(10)
def function_that_takes_a_long_time():
    try:
        # ... long, parallel calculation ...
    except TimedOutExc:
        # ... Code that shuts down the processes ...
        # ...
        return None  # Or exception raised, which means that the calculation is not complete
</snippet></ROW><ROW><id>8620380</id><snippet>dsn = cx_Oracle.makedsn(hostname, port, sid)
orcl = cx_Oracle.connect(username + '/' + password + '@' + dsn)
curs = orcl.cursor()
curs.setinputsizes(template = cx_Oracle.CLOB)
sql = "update mytable set template= :template where id='6'"
curs.execute(sql, template=template)
orcl.close()
</snippet></ROW><ROW><id>8621037</id><snippet>print(variable)</snippet></ROW><ROW><id>8621037</id><snippet>print(str(variable))</snippet></ROW><ROW><id>8621037</id><snippet>variable</snippet></ROW><ROW><id>8621037</id><snippet>print(repr(variable))</snippet></ROW><ROW><id>8621037</id><snippet>__repr__</snippet></ROW><ROW><id>8621037</id><snippet>__str__</snippet></ROW><ROW><id>8621037</id><snippet>dpkt.ethernet.Ethernet</snippet></ROW><ROW><id>8621098</id><snippet>easy_install</snippet></ROW><ROW><id>8621098</id><snippet>pip install</snippet></ROW><ROW><id>8621098</id><snippet>setup(
    ...
    scripts = ['django/bin/django-admin.py'],
    ...
)
</snippet></ROW><ROW><id>8621098</id><snippet>django-admin.py</snippet></ROW><ROW><id>8621098</id><snippet>django-admin.py arg1 arg2 ...</snippet></ROW><ROW><id>8621145</id><snippet>import numpy as np
import itertools

def maenumerate(marr):
    mask = ~marr.mask.ravel()
    for i, m in itertools.izip(np.ndenumerate(marr), mask):
        if m: yield i

N = 12
a = np.arange(N).reshape(2, 2, 3)+10

b = np.ma.array(a, mask = (a%5 == 0))
for i, val in maenumerate(b):
    print i, val
</snippet></ROW><ROW><id>8621145</id><snippet>(0, 0, 1) 11
(0, 0, 2) 12
(0, 1, 0) 13
(0, 1, 1) 14
(1, 0, 0) 16
(1, 0, 1) 17
(1, 0, 2) 18
(1, 1, 0) 19
(1, 1, 2) 21
</snippet></ROW><ROW><id>8621180</id><snippet>tr a</snippet></ROW><ROW><id>8621180</id><snippet>//tr//a</snippet></ROW><ROW><id>8621180</id><snippet>.//tr/*/a</snippet></ROW><ROW><id>8621180</id><snippet>.</snippet></ROW><ROW><id>8621180</id><snippet>//</snippet></ROW><ROW><id>8621180</id><snippet>tr</snippet></ROW><ROW><id>8621180</id><snippet>/</snippet></ROW><ROW><id>8621180</id><snippet>*</snippet></ROW><ROW><id>8621180</id><snippet>/</snippet></ROW><ROW><id>8621180</id><snippet>a</snippet></ROW><ROW><id>8621180</id><snippet>&lt;ul&gt;
    &lt;li&gt;&lt;a href="link1"&gt;&lt;/a&gt;&lt;li&gt;
    &lt;li&gt;&lt;b&gt;&lt;a href="link2"&gt;&lt;/a&gt;&lt;/b&gt;&lt;li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>8621180</id><snippet>//ul/*/a</snippet></ROW><ROW><id>8621180</id><snippet>node()</snippet></ROW><ROW><id>8621180</id><snippet>text()</snippet></ROW><ROW><id>8621180</id><snippet>[]</snippet></ROW><ROW><id>8621180</id><snippet>.//tr/*/a</snippet></ROW><ROW><id>8621180</id><snippet>.</snippet></ROW><ROW><id>8621180</id><snippet>tr</snippet></ROW><ROW><id>8621180</id><snippet>*</snippet></ROW><ROW><id>8621180</id><snippet>a</snippet></ROW><ROW><id>8621180</id><snippet>::</snippet></ROW><ROW><id>8621180</id><snippet>/</snippet></ROW><ROW><id>8621180</id><snippet>self::node()/descendent-or-self::node()/child::tr/child::*/child::a</snippet></ROW><ROW><id>8621180</id><snippet>self::node()</snippet></ROW><ROW><id>8621315</id><snippet>class Point3d(tuple):
    @property
    def x(self):
        return self[0]

    @property
    def y(self):
        return self[1]

    @property
    def z(self):
        return self[2]
</snippet></ROW><ROW><id>8621317</id><snippet> matrix.remove("[0, 0, 0, 0, 0, 0, 0, 0, 0]")
</snippet></ROW><ROW><id>8621317</id><snippet> matrix.remove([0, 0, 0, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>8621343</id><snippet>self.txt.Validate()
</snippet></ROW><ROW><id>8621343</id><snippet>self.Validate()
</snippet></ROW><ROW><id>8621385</id><snippet>-c++</snippet></ROW><ROW><id>8621515</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>8621515</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>8621515</id><snippet>request.FILES</snippet></ROW><ROW><id>8621890</id><snippet>def pre_process(dict_sequence):
    for d in dict_sequence:
        d['time'] = date2num(datetime.datetime.strptime(d['time'],"%d/%m/%y %H:%M:%S" ))
    yield d
</snippet></ROW><ROW><id>8621890</id><snippet>for d in pre_process(csv.DictReader(open('MyFile.csv'))):
    process(d)
</snippet></ROW><ROW><id>8621890</id><snippet>reader = csv.DictReader(open('MyFile.csv'))
#you might want to get rid of the intermediate list if the file is really big.
data = numpy.array(list(d.values() for d in pre_process(reader)))
</snippet></ROW><ROW><id>8621890</id><snippet>data[:,0]  # assuming time is the first column
</snippet></ROW><ROW><id>8622153</id><snippet>“leastsq”</snippet></ROW><ROW><id>8622153</id><snippet>lmdif</snippet></ROW><ROW><id>8622153</id><snippet>lmder</snippet></ROW><ROW><id>8622224</id><snippet>In [27]: prun tab[tab]
     2 function calls in 1.551 CPU seconds

Ordered by: internal time

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    1.551    1.551    1.551    1.551 &lt;string&gt;:1(&lt;module&gt;)
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler'    objects}

In [28]: prun numpy.arange(10000000)
     3 function calls in 0.051 CPU seconds

Ordered by: internal time

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.047    0.047    0.047    0.047 {numpy.core.multiarray.arange}
    1    0.003    0.003    0.051    0.051 &lt;string&gt;:1(&lt;module&gt;)
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>8622224</id><snippet>tab</snippet></ROW><ROW><id>8622224</id><snippet>np.arange(a, b)</snippet></ROW><ROW><id>8622224</id><snippet>tab[index] == index + a</snippet></ROW><ROW><id>8622224</id><snippet>In [47]: timeit numpy.array([tab[indices1], tab[indices2], tab[indices3], tab[indices4]])
100 loops, best of 3: 5.11 ms per loop

In [48]: timeit numpy.concatenate([tab[indices1], tab[indices2], tab[indices3],     tab[indices4]])
1000 loops, best of 3: 544 us per loop
</snippet></ROW><ROW><id>8622224</id><snippet>indices = np.unique(np.concatenate((indices1, indices2, indices3, indices4)))
result = tab[indices]
</snippet></ROW><ROW><id>8622567</id><snippet>xmodmap -e "keycode 22 = BackSpace"</snippet></ROW><ROW><id>8622567</id><snippet>Ctrl+Alt+Backspace</snippet></ROW><ROW><id>8622594</id><snippet>##Multiples of 3
x = range(3, 1000, 3)

##Multiples of 5
y = range(5, 1000, 5)

##multiple of 15 are counted twice
z=range(15,1000,15)


a = sum(x)
b = sum(y)
c = sum(z)
n = a + b -c
print(n)
</snippet></ROW><ROW><id>8622594</id><snippet>a = sum(i for i in range(1000) if i%3 == 0 or i%5 == 0 )
print(a)
</snippet></ROW><ROW><id>8622594</id><snippet>sum(a for a in range(a1,a2,n)) 
</snippet></ROW><ROW><id>8622804</id><snippet>list</snippet></ROW><ROW><id>8622804</id><snippet>In [5]: def update_list(lst, data):
   ...:     for datum in data:
   ...:         lst.append(datum)
   ...:         

In [6]: l = [1, 2, 3]

In [7]: update_list(l, [4, 5, 6])

In [8]: l
Out[8]: [1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>8622804</id><snippet>In [9]: def update_list(lst, data):
   ...:     lst.extend(data)
   ...:       
</snippet></ROW><ROW><id>8622804</id><snippet>list</snippet></ROW><ROW><id>8622968</id><snippet>easy_install pydelicious
</snippet></ROW><ROW><id>8623168</id><snippet>import numpy as np
def group_min(groups, data):
    # sort with major key groups, minor key data
    order = np.lexsort((data, groups))
    groups = groups[order] # this is only needed if groups is unsorted
    data = data[order]
    # construct an index which marks borders between groups
    index = np.empty(len(groups), 'bool')
    index[0] = True
    index[1:] = groups[1:] != groups[:-1]
    return data[index]

#max is very similar
def group_max(groups, data):
    order = np.lexsort((data, groups))
    groups = groups[order] #this is only needed if groups is unsorted
    data = data[order]
    index = np.empty(len(groups), 'bool')
    index[-1] = True
    index[:-1] = groups[1:] != groups[:-1]
    return data[index]
</snippet></ROW><ROW><id>8623224</id><snippet>def isEquilateral(x, y, z):
    if x == y == z and x &gt; 0:
        return True
    return False
</snippet></ROW><ROW><id>8623224</id><snippet>def isEquilateral(x, y, z):
    return x == y == z &gt; 0
</snippet></ROW><ROW><id>8623345</id><snippet>%</snippet></ROW><ROW><id>8623430</id><snippet>mydict = {line.split()[0]: line.split()[1] for line in myfile}
</snippet></ROW><ROW><id>8623430</id><snippet>good    buono
afternoon   pomeriggo
thanks    grazie
</snippet></ROW><ROW><id>8623430</id><snippet>{"good": "buono", "afternoon": "pomeriggo", "thanks": "grazie"}
</snippet></ROW><ROW><id>8623430</id><snippet>.split()</snippet></ROW><ROW><id>8623430</id><snippet>&gt;&gt;&gt; "  good\tbuono  \n".split()
['good', 'buono']
</snippet></ROW><ROW><id>8623536</id><snippet>(r'^my_url/$', 'login', {'redirect': admin}),
(r'^my_other_url/$', 'login', {'redirect': beta}),
</snippet></ROW><ROW><id>8623593</id><snippet>&gt;&gt;&gt; rules = {
    "1|1": "A",
    "2|1": "B",
    "3|1": "C",
    "2|2": "X"
}
&gt;&gt;&gt; pattern = [[1,2,3], [7,8]]
&gt;&gt;&gt; l = [[1,3,4], [7,9]]
&gt;&gt;&gt; diffs = '|'.join(map(lambda x: str(len(set(x[0]) &amp; set(x[1]))),
                         zip(pattern, l)))
&gt;&gt;&gt; rules.get(diffs)
'B'
</snippet></ROW><ROW><id>8623651</id><snippet>_exit</snippet></ROW><ROW><id>8623651</id><snippet>sys.exit</snippet></ROW><ROW><id>8623651</id><snippet>_exit</snippet></ROW><ROW><id>8623651</id><snippet>threading</snippet></ROW><ROW><id>8623651</id><snippet>Thread</snippet></ROW><ROW><id>8623651</id><snippet>_exitfunc</snippet></ROW><ROW><id>8623651</id><snippet>atexit</snippet></ROW><ROW><id>8623651</id><snippet>class _MainThread(Thread):

    def _exitfunc(self):
        self._Thread__stop()
        t = _pickSomeNonDaemonThread()
        if t:
            if __debug__:
                self._note("%s: waiting for other threads", self)
        while t:
            t.join()
            t = _pickSomeNonDaemonThread()
        if __debug__:
            self._note("%s: exiting", self)
        self._Thread__delete()
</snippet></ROW><ROW><id>8623651</id><snippet>sys.exit</snippet></ROW><ROW><id>8623651</id><snippet>_exit</snippet></ROW><ROW><id>8623651</id><snippet>_exit</snippet></ROW><ROW><id>8623651</id><snippet>_exit</snippet></ROW><ROW><id>8623651</id><snippet>_exit</snippet></ROW><ROW><id>8623651</id><snippet>main</snippet></ROW><ROW><id>8623651</id><snippet>atexit</snippet></ROW><ROW><id>8623651</id><snippet>_exit</snippet></ROW><ROW><id>8623651</id><snippet>import sys
import time
import threading

class WorkerThread(threading.Thread):

    def run(self):
        while True:
            print 'Working hard'
            time.sleep(0.5)

def main(args):
    use_daemon = False
    for arg in args:
        if arg == '--use_daemon':
            use_daemon = True
    worker = WorkerThread()
    worker.setDaemon(use_daemon)
    worker.start()
    time.sleep(1)
    sys.exit(0)

if __name__ == '__main__':
    main(sys.argv[1:])
</snippet></ROW><ROW><id>8623651</id><snippet>Working hard</snippet></ROW><ROW><id>8623651</id><snippet>Working hard</snippet></ROW><ROW><id>8623947</id><snippet>DictCursor</snippet></ROW><ROW><id>8623947</id><snippet>conn = oursql.connect(...)
curs = conn.cursor(oursql.DictCursor)
</snippet></ROW><ROW><id>8623947</id><snippet>DictCursor</snippet></ROW><ROW><id>8623947</id><snippet>conn = MySQLdb.connect(..., cursorclass=MySQLdb.cursors.DictCursor) 
curs = conn.cursor() 
</snippet></ROW><ROW><id>8624103</id><snippet>modPow</snippet></ROW><ROW><id>8624103</id><snippet>c2.multiply(c1.modPow(x.negate(), p)).mod(p)
</snippet></ROW><ROW><id>8624103</id><snippet>modPow</snippet></ROW><ROW><id>8624103</id><snippet>-x</snippet></ROW><ROW><id>8624103</id><snippet>c1</snippet></ROW><ROW><id>8624103</id><snippet>p</snippet></ROW><ROW><id>8624103</id><snippet>p</snippet></ROW><ROW><id>8624103</id><snippet>p</snippet></ROW><ROW><id>8624103</id><snippet>c1</snippet></ROW><ROW><id>8624103</id><snippet>p</snippet></ROW><ROW><id>8624103</id><snippet>c1</snippet></ROW><ROW><id>8624103</id><snippet>p</snippet></ROW><ROW><id>8624107</id><snippet>import argparse
import collections


class ValidateCredits(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        # print '{n} {v} {o}'.format(n=args, v=values, o=option_string)
        valid_subjects = ('foo', 'bar')
        subject, credits = values
        if subject not in valid_subjects:
            raise ValueError('invalid subject {s!r}'.format(s=subject))
        credits = float(credits)
        Credits = collections.namedtuple('Credits', 'subject required')
        setattr(args, self.dest, Credits(subject, credits))

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--credits', nargs=2, action=ValidateCredits,
                    help='subject followed by number of credits required',
                    metavar=('SUBJECT', 'CREDITS')
                    )
args = parser.parse_args()
print(args)
print(args.credits.subject)
print(args.credits.required)
</snippet></ROW><ROW><id>8624107</id><snippet>% test.py -c foo 2
Namespace(credits=Credits(subject='foo', required=2.0))
foo
2.0
% test.py -c baz 2
ValueError: invalid subject 'baz'
% test.py -c foo bar
ValueError: could not convert string to float: bar
</snippet></ROW><ROW><id>8624278</id><snippet>with open('foo.txt', 'w') as f:
    f.write(name)
with open('foo.txt', 'r') as f:
    print 'Text is:', f.read()
</snippet></ROW><ROW><id>8624278</id><snippet>with</snippet></ROW><ROW><id>8624287</id><snippet>__module__</snippet></ROW><ROW><id>8624287</id><snippet>__module__</snippet></ROW><ROW><id>8624287</id><snippet>pylab</snippet></ROW><ROW><id>8624287</id><snippet>None</snippet></ROW><ROW><id>8624287</id><snippet>mtrand</snippet></ROW><ROW><id>8624287</id><snippet>mtrand</snippet></ROW><ROW><id>8624287</id><snippet>pylab.beta</snippet></ROW><ROW><id>8624287</id><snippet>numpy.random.mtrand.RandomState</snippet></ROW><ROW><id>8624287</id><snippet>from pylab import beta

def mzjn(x):
    """mzjn docstring"""
    return x
</snippet></ROW><ROW><id>8624287</id><snippet>Pylab test
==========

.. automodule:: pylabtest
    :members:
</snippet></ROW><ROW><id>8624287</id><snippet>beta</snippet></ROW><ROW><id>8624287</id><snippet>mzjn</snippet></ROW><ROW><id>8624287</id><snippet>beta.__module__ = "pylab"
</snippet></ROW><ROW><id>8624287</id><snippet>mzjn</snippet></ROW><ROW><id>8624298</id><snippet>class myTest:
    def __init__(self, str):
        self.str = str

    def __unicode__(self):
        return self.str
    def __str__(self):        
        return unicode(self).encode('utf-8')
</snippet></ROW><ROW><id>8624298</id><snippet>__unicode__</snippet></ROW><ROW><id>8624298</id><snippet>__str__</snippet></ROW><ROW><id>8624298</id><snippet>__repr__</snippet></ROW><ROW><id>8624298</id><snippet>unicode</snippet></ROW><ROW><id>8624298</id><snippet>__str__</snippet></ROW><ROW><id>8624298</id><snippet>print unicode(c)
</snippet></ROW><ROW><id>8624384</id><snippet>record type</snippet></ROW><ROW><id>8624384</id><snippet>&gt;&gt;&gt; recordtype = dtype([('name', str_, 20), ('age', int32), ('weight', float32)])
&gt;&gt;&gt; people = array([('Joaquin', 51, 60.0), ('Cat', 18, 8.6)], dtype=recordtype)
&gt;&gt;&gt; people
array([('Joaquin', 51, 60.0), ('Cat', 18, 8.600000381469727)], dtype=[('name', '&lt;U20'), ('age', '&lt;i4'), ('weight', '&lt;f4')])
</snippet></ROW><ROW><id>8624384</id><snippet>'...'</snippet></ROW><ROW><id>8624601</id><snippet>person</snippet></ROW><ROW><id>8624601</id><snippet>mypage.html</snippet></ROW><ROW><id>8624601</id><snippet>snippet.html:</snippet></ROW><ROW><id>8624601</id><snippet>&lt;div id="item"&gt;
    &lt;ul&gt;
        &lt;li&gt;
            &lt;span&gt;{{ person.name }}&lt;/span&gt;
            &lt;span&gt;{{ person.address }}&lt;/span&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>8624601</id><snippet>mypage.html:</snippet></ROW><ROW><id>8624601</id><snippet>&lt;div id="result"&gt;
    {% include 'snippet.html' %}
&lt;/div&gt;
</snippet></ROW><ROW><id>8624601</id><snippet>view.py:</snippet></ROW><ROW><id>8624601</id><snippet>def view(person_id):
    person = Person.get(person_id) # or whatever source you get your data from
    return render_template('mypage.html', person=person)
</snippet></ROW><ROW><id>8624624</id><snippet>class ArticleYearArchiveView(YearArchiveView):
    model = Article
    paginate_by = 100
    context_object_name = 'article_list'
    date_field = 'date'
    allow_empty = True
</snippet></ROW><ROW><id>8624624</id><snippet>urls.py</snippet></ROW><ROW><id>8624624</id><snippet>url(r'^newsitems/(?P&lt;year&gt;\d+)/$', ArticleYearArchiveView.as_view()),
</snippet></ROW><ROW><id>8624661</id><snippet>[]</snippet></ROW><ROW><id>8624661</id><snippet>[^\(url=\)]</snippet></ROW><ROW><id>8624661</id><snippet>url=([^,]+)</snippet></ROW><ROW><id>8624666</id><snippet>div</snippet></ROW><ROW><id>8624666</id><snippet>break</snippet></ROW><ROW><id>8624666</id><snippet>while</snippet></ROW><ROW><id>8624798</id><snippet>python -m cProfile -o prof.dat &lt;prog&gt; &lt;args&gt;
</snippet></ROW><ROW><id>8624798</id><snippet>python -m pstats prof.dat
</snippet></ROW><ROW><id>8624798</id><snippet>sort time
</snippet></ROW><ROW><id>8624798</id><snippet>stats
</snippet></ROW><ROW><id>8624798</id><snippet>stats 10</snippet></ROW><ROW><id>8624798</id><snippet>?</snippet></ROW><ROW><id>8624798</id><snippet>help &lt;command&gt;</snippet></ROW><ROW><id>8625376</id><snippet>v = [1,2,3,4,3,1,2]
any([2,3] == v[i:i+2] for i in xrange(len(v) - 1))
</snippet></ROW><ROW><id>8625376</id><snippet>v</snippet></ROW><ROW><id>8625637</id><snippet>Python client library for the Facebook Platform</snippet></ROW><ROW><id>8625637</id><snippet>signed_request</snippet></ROW><ROW><id>8625637</id><snippet>fb js sdk</snippet></ROW><ROW><id>8625637</id><snippet>signed_request</snippet></ROW><ROW><id>8625637</id><snippet>signed_request = pyface.parse_signed_request(request.POST['signed_request'], fb_app_secret)

if signed_request:
    if signed_request.has_key('user_id'): 
        facebook_user_id = signed_request['user_id']
</snippet></ROW><ROW><id>8625637</id><snippet>pyface</snippet></ROW><ROW><id>8626024</id><snippet>def fileList():
    matches = []
    for root, dirnames, filenames in os.walk(source):
        for filename in filenames:
            if filename.endswith(('.mov', '.MOV', '.avi', '.mpg')):
                matches.append(os.path.join(root, filename))
    return matches
</snippet></ROW><ROW><id>8626199</id><snippet>from multiprocessing import Pool

files = ['a','b','c','d','e','f']

def convert(aFile):
    print aFile

if __name__ == '__main__':

    pool = Pool() #note the default will use the optimal number of workers
    pool.map(convert,files)
</snippet></ROW><ROW><id>8626199</id><snippet>from multiprocessing import Pool

files = ['d','e','f','a','b','c',]

a = sorted(files)
def convert(_):
    print a == files
    files.sort()
    #print id(files) #note this is the same for every process, which is interesting

if __name__ == '__main__':

    pool = Pool(processes=1) #
    pool.map(convert,range(6))
</snippet></ROW><ROW><id>8626206</id><snippet>import public</snippet></ROW><ROW><id>8626206</id><snippet>logging.debug(...)</snippet></ROW><ROW><id>8626206</id><snippet>import public</snippet></ROW><ROW><id>8626206</id><snippet>logging.debug</snippet></ROW><ROW><id>8626206</id><snippet>basicConfig</snippet></ROW><ROW><id>8626206</id><snippet>StreamHandler</snippet></ROW><ROW><id>8626206</id><snippet>basicConfig</snippet></ROW><ROW><id>8626206</id><snippet>WARNING</snippet></ROW><ROW><id>8626206</id><snippet>info</snippet></ROW><ROW><id>8626206</id><snippet>debug</snippet></ROW><ROW><id>8626206</id><snippet>basicConfig</snippet></ROW><ROW><id>8626206</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>8626206</id><snippet>public.py</snippet></ROW><ROW><id>8626206</id><snippet>import logging

def main():
    logging.debug('Hello from public')
</snippet></ROW><ROW><id>8626206</id><snippet>main.py</snippet></ROW><ROW><id>8626206</id><snippet>import logging
from bottle import run, debug
import public

def main():
    logging.basicConfig(level=logging.DEBUG)
    logging.info('Started')
    debug(mode=True)
    public.main()
    run(host='localhost', port = 8080, reloader=True)
    logging.info('Finished')

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8626206</id><snippet>$ python main.py
INFO:root:Started
DEBUG:root:Hello from public
INFO:root:Started
DEBUG:root:Hello from public
Bottle server starting up (using WSGIRefServer())...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.

^CINFO:root:Finished
$ Shutdown...
INFO:root:Finished
</snippet></ROW><ROW><id>8626206</id><snippet>logging.basicConfig(level=logging.DEBUG,
                    format='%(process)s %(levelname)s %(message)s')
</snippet></ROW><ROW><id>8626206</id><snippet>$ python main.py
13839 INFO Started
13839 DEBUG Hello from public
13840 INFO Started
13840 DEBUG Hello from public
Bottle server starting up (using WSGIRefServer())...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.

^C13839 INFO Finished
$ Shutdown...
13840 INFO Finished
</snippet></ROW><ROW><id>8626206</id><snippet>public.py</snippet></ROW><ROW><id>8626206</id><snippet>logging.debug('Side-effect from public')
</snippet></ROW><ROW><id>8626206</id><snippet>$ python main.py
Bottle server starting up (using WSGIRefServer())...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.

^C$ Shutdown...
</snippet></ROW><ROW><id>8626230</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('tmp.csv', 'wb') as stream:
...     csv.writer(stream).writerow(['choice'])
... 
&gt;&gt;&gt; lst = []
&gt;&gt;&gt; with open('tmp.csv', 'rb') as stream:
...     for row in csv.reader(stream):
...         lst.append(row)
... 
&gt;&gt;&gt; from PyQt4.QtCore import QString
&gt;&gt;&gt; s = QString(u'choice')
&gt;&gt;&gt; lst.index(s)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: PyQt4.QtCore.QString(u'choice') is not in list
&gt;&gt;&gt; lst
[['choice']]
&gt;&gt;&gt; lst[0].index(s)
0
</snippet></ROW><ROW><id>8626277</id><snippet>path = "/directory/date/2011/2009-01-11 This is a file's path/file.jpg"
new_file=os.path.splitext(path)[0]+".MOV"
</snippet></ROW><ROW><id>8626277</id><snippet>"/directory/date/2011/2009-01-11 This is a file's path/file.MOV"
</snippet></ROW><ROW><id>8626277</id><snippet>new_file=new_file.split('/',2)
</snippet></ROW><ROW><id>8626277</id><snippet>new_file = '/'.join([new_file[0],"newdirectory",new_file[2]])
</snippet></ROW><ROW><id>8626277</id><snippet>"/newdirectory/date/2011/2009-01-11 This is a file's path/file.MOV"
</snippet></ROW><ROW><id>8626277</id><snippet>new_file=os.path.splitext(path)[0]+".MOV"
new_file=new_file.split('/',2)
new_file = '/'.join([new_file[0],"newdirectory",new_file[2]])
</snippet></ROW><ROW><id>8626289</id><snippet>(Get-Content -Path contact.aspx) -replace '(Hallo\s?&lt;%=\s?)(.+?)(\s?%&gt;)', '$1Resource.contact_aspx.Title$3' | Set-Content -Path contact.aspx

(Get-Content -Path default.aspx) -replace '(Whats\s?up\s?&lt;%=\s?)(.+?)(\s?%&gt;)', '$1Resource.default_aspx.Title$3' | Set-Content -Path default.aspx
</snippet></ROW><ROW><id>8626608</id><snippet>def foo(data):
    lastMax=[data[0]]
    for x in data[1:]:
        if x&gt;lastMax[-1]:
            lastMax.append(x)
    return lastMax
</snippet></ROW><ROW><id>8626623</id><snippet>query = query.encode('utf-8').</snippet></ROW><ROW><id>8626704</id><snippet>&gt;&gt;&gt; strings = ['foo','','bar','moo']
&gt;&gt;&gt; ' '.join(filter(None, strings))
'foo bar moo'
</snippet></ROW><ROW><id>8626704</id><snippet>None</snippet></ROW><ROW><id>8626704</id><snippet>filter()</snippet></ROW><ROW><id>8626921</id><snippet>www.locationary.com</snippet></ROW><ROW><id>8626921</id><snippet>Content-Type</snippet></ROW><ROW><id>8626921</id><snippet>Content-Length</snippet></ROW><ROW><id>8626921</id><snippet>read()</snippet></ROW><ROW><id>8626921</id><snippet>import urllib
import urllib2

url = 'https://www.locationary.com/index.jsp?ACTION_TOKEN=tile_loginBar_jsp$JspView$LoginAction'

values = {'inUserName' : 'USER',
          'inUserPass' : 'PASSWORD'}

data = urllib.urlencode(values)
req = urllib2.Request(url, data)

req.add_header('Host', 'www.locationary.com')
req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; rv:8.0) Gecko/20100101 Firefox/8.0')
req.add_header('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')
req.add_header('Accept-Language', 'en-us,en;q=0.5')
req.add_header('Accept-Charset','ISO-8859-1,utf-8;q=0.7,*;q=0.7')
req.add_header('Connection','keep-alive')
req.add_header('Referer','http://www.locationary.com/')
req.add_header('Cookie','site_version=REGULAR; __utma=47547066.1079503560.1321924193.1322707232.1324693472.36; __utmz=47547066.1321924193.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); nickname=jacob501; locaCountry=1033; locaState=1795; locaCity=Montreal; jforumUserId=1; PMS=1; TurnOFfTips=true; Locacookie=enable; __utma=47547066.1079503560.1321924193.1322707232.1324693472.36; __utmz=47547066.1321924193.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); nickname=jacob501; PMS=1; __utmb=47547066.15.10.1324693472; __utmc=47547066; JSESSIONID=DC7F5AB08264A51FBCDB836393CB16E7; PSESSIONID=28b334905ab6305f7a7fe051e83857bc280af1a9; __utmc=47547066; __utmb=47547066.15.10.1324693472; ACTION_RESULT_CODE=ACTION_RESULT_FAIL; ACTION_ERROR_TEXT=java.lang.NullPointerException')
req.add_header('Content-Type','application/x-www-form-urlencoded')

response = urllib2.urlopen(req)
page = response.read()

print page
</snippet></ROW><ROW><id>8626921</id><snippet>req.add_header('Accept-Encoding','gzip, deflate')</snippet></ROW><ROW><id>8627031</id><snippet>\</snippet></ROW><ROW><id>8627031</id><snippet>cursor.execute(query, ("1% milk".replace('%', '\\%')))
</snippet></ROW><ROW><id>8627294</id><snippet>data &lt;- read.csv('sample_data.csv')
</snippet></ROW><ROW><id>8627294</id><snippet>data &lt;- cbind(data, start = data$STARTHR + data$STARTMIN/60, end= data$ENDHR + data$ENDMIN/60)
</snippet></ROW><ROW><id>8627294</id><snippet>intervals &lt;- seq(0, 23.75, by=0.25)
</snippet></ROW><ROW><id>8627294</id><snippet>endvalues &lt;- (pmax(pmin(outer(data$end, intervals, FUN="-"), 0.25), 0) / 0.25)  
</snippet></ROW><ROW><id>8627294</id><snippet>startvalues &lt;- (pmax(pmin(-outer(data$start, intervals, FUN="-"), 0), -0.25) / 0.25)
</snippet></ROW><ROW><id>8627294</id><snippet>resultmatrix &lt;- endvalues + startvalues
</snippet></ROW><ROW><id>8627294</id><snippet>intervalcount &lt;- apply(resultmatrix, 2, sum)
</snippet></ROW><ROW><id>8627323</id><snippet>&gt;&gt;&gt; from heapq import nlargest
&gt;&gt;&gt; from random import random
&gt;&gt;&gt; nlargest(5, (random() for i in xrange(1000000)))
[0.9999995650034837, 0.9999985756262746, 0.9999971934450994, 0.9999960394998497, 0.9999949126363714]
</snippet></ROW><ROW><id>8627428</id><snippet>signal_power</snippet></ROW><ROW><id>8627428</id><snippet>noise_power</snippet></ROW><ROW><id>8627428</id><snippet>signal_power = 100
noise_power = 17
</snippet></ROW><ROW><id>8627498</id><snippet>make</snippet></ROW><ROW><id>8627498</id><snippet>#define</snippet></ROW><ROW><id>8627498</id><snippet>foo.py: foo.py.in
        [ -f $@ ] &amp;&amp; rm -f $@
        $(SED) -e "s:[@]datarootdir@:$(datarootdir):" $&lt; &gt; $@
        chmod a-w $@
</snippet></ROW><ROW><id>8627498</id><snippet>AC_PROG_SED</snippet></ROW><ROW><id>8627498</id><snippet>configure.ac</snippet></ROW><ROW><id>8627517</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; u = urllib.request.urlopen('http://www.python.org')
&gt;&gt;&gt; pprint.pprint(dict(u.getheaders()))
{'Accept-Ranges': 'bytes',
 'Connection': 'close',
 'Content-Length': '18882',
 'Content-Type': 'text/html',
 'Date': 'Sat, 24 Dec 2011 23:51:27 GMT',
 'ETag': '"105800d-49c2-4b4ab1ba443c0"',
 'Last-Modified': 'Thu, 22 Dec 2011 09:41:43 GMT',
 'Server': 'Apache/2.2.16 (Debian)',
 'X-Pad': 'avoid browser bug'}
</snippet></ROW><ROW><id>8627638</id><snippet>children</snippet></ROW><ROW><id>8627638</id><snippet>Node</snippet></ROW><ROW><id>8627638</id><snippet>class Node:
    #children = [] # not here...
    parent = 0     # might want to rethink where you initialize these
    visited = 0
    cost = 0
    position = (0, 0)
    leaf = 0

    def __init__(self, parent, pos):
        self.parent = parent
        self.position = pos
        self.children = [] # ...but here

    def addChild(self, node):
        self.children += [node]
</snippet></ROW><ROW><id>8627659</id><snippet>save two-line-ranges.py 1-4 8-14
</snippet></ROW><ROW><id>8627696</id><snippet>%</snippet></ROW><ROW><id>8627696</id><snippet>%</snippet></ROW><ROW><id>8627696</id><snippet>\</snippet></ROW><ROW><id>8627696</id><snippet>return ('guitar { id: %d, relevant_properties: (%.02f, %.02f, %.02f), irrelevant_properties: (%.02f, %.02f, %.02f) }'
        % (self.id, a, b, c, d, e, f))
</snippet></ROW><ROW><id>8627696</id><snippet>return ('guitar { id: %d, relevant_properties: (%.02f, %.02f, %.02f), irrelevant_properties: (%.02f, %.02f, %.02f) }' 
        % (self.id, 
           a, 
           b, 
           # c1, 
           c2, 
           d, 
           e, 
           f))
</snippet></ROW><ROW><id>8627696</id><snippet>%</snippet></ROW><ROW><id>8627696</id><snippet>class c(object):
    def f(self):
        return """
guitar {
  id: %d, 
  relevant_properties: (%.02f, %.02f, %.02f),
  irrelevant_properties: (%.02f, %.02f, %.02f)
}
""" % (self.id, a, b, c, d, e, f)
</snippet></ROW><ROW><id>8627696</id><snippet>\</snippet></ROW><ROW><id>8627696</id><snippet>"""</snippet></ROW><ROW><id>8627696</id><snippet>class c(object):
    def f(self):
        return """\
guitar {
  id: %d, 
  relevant_properties: (%.02f, %.02f, %.02f),
  irrelevant_properties: (%.02f, %.02f, %.02f)
}
""" % (self.id, a, b, c, d, e, f)
</snippet></ROW><ROW><id>8627884</id><snippet>class Primate(Base):
    __tablename__ = 'primate'
    id = Column(Integer, primary_key=True)
    genus = Column(String)
    ...attributes all primates have...
    __mapper_args__ = {'polymorphic_on': genus, 'polymorphic_identity': 'primate'}

class Chimp(Primate):
    __mapper_args__ = {'polymorphic_identity': 'chimp'}
    ...attributes...

class Human(Primate):
    __mapper_args__ = {'polymorphic_identity': 'human'}
    ...attributes...

class MetricBlock(Base):
    id = ...
</snippet></ROW><ROW><id>8627884</id><snippet>class PrimateToMetricBlock(Base):
    id = Column(Integer, primary_key=True) # primary key is needed!
    primate_id = Column(Integer, ForeignKey('primate.id'))
    primate = relationship('Primate') # If you care for relationships. 
    metricblock_id = Column(Integer, ForeignKey('metric_block.id')
    metricblock = relationship('MetricBlock')
</snippet></ROW><ROW><id>8627884</id><snippet>query = DBSession.query(CompleteBloodCount).\
    join(PrimateToMetricBlock, PrimateToMetricBlock.metricblock_id == MetricBlock.id)
</snippet></ROW><ROW><id>8627884</id><snippet>query = query.join(Primate, Primate.id == PrimateToMetricBlock.primate_id).\
    filter(Primate.genus == 'human')
</snippet></ROW><ROW><id>8627884</id><snippet>query = query.filter(PrimateToMetricBlock.primate_id == primate_id)
</snippet></ROW><ROW><id>8627884</id><snippet>return query.first()
</snippet></ROW><ROW><id>8627884</id><snippet>return query.all()
</snippet></ROW><ROW><id>8628089</id><snippet>MyTcpHandler</snippet></ROW><ROW><id>8628089</id><snippet>handle</snippet></ROW><ROW><id>8628089</id><snippet>handle</snippet></ROW><ROW><id>8628089</id><snippet>class MyTCPHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        while 1:
            self.data = self.request.recv(1024)
            if not self.data:
                break
            self.data = self.data.strip()
            print str(self.client_address[0]) + " wrote: "
            print self.data
            self.request.send(self.data.upper())
</snippet></ROW><ROW><id>8628089</id><snippet>recv</snippet></ROW><ROW><id>8628089</id><snippet>''</snippet></ROW><ROW><id>8628089</id><snippet>.strip()</snippet></ROW><ROW><id>8628089</id><snippet>recv</snippet></ROW><ROW><id>8628091</id><snippet>key</snippet></ROW><ROW><id>8628091</id><snippet>sorted</snippet></ROW><ROW><id>8628091</id><snippet>import operator
sorted_comments = sorted(this_users_comments, key=operator.attrgetter("date"))
# The comments will probably be sorted with earlier comments at the front of the list
# If you want ten most recent, also add the following line:
# sorted_comments.reverse()
ten_comments = sorted_comments[:10]
</snippet></ROW><ROW><id>8628132</id><snippet>from itertools import count

class Obj(object):
  _ids = count(0)

  def __init__(self):
    self.id = self._ids.next()
</snippet></ROW><ROW><id>8628150</id><snippet>SGMLParser</snippet></ROW><ROW><id>8628150</id><snippet>markupMassage</snippet></ROW><ROW><id>8628150</id><snippet>SGMLParser</snippet></ROW><ROW><id>8628150</id><snippet>markupMassage</snippet></ROW><ROW><id>8628150</id><snippet>lxml</snippet></ROW><ROW><id>8628150</id><snippet>from bs4.builder import LXMLTreeBuilder

class Builder(LXMLTreeBuilder):
    def __init__(self, *args, **kwargs):
        super(Builder, self).__init__(*args, **kwargs)

    def prepare_markup(self, *args, **kwargs):

        markup, user_enc, doc_enc = super(Builder, self).prepare_markup(*args, **kwargs)

        # do markup massaging ...

        return markup, user_enc, doc_enc

soup = BeautifulSoup(html, builder=Builder())
</snippet></ROW><ROW><id>8628185</id><snippet>py_compile</snippet></ROW><ROW><id>8628185</id><snippet>import marshal
import py_compile
import time
import ast

codeobject = compile(ast.parse('print "Hello World"'), '&lt;string&gt;', 'exec')

with open('output.pyc', 'wb') as fc:
    fc.write('\0\0\0\0')
    py_compile.wr_long(fc, long(time.time()))
    marshal.dump(codeobject, fc)
    fc.flush()
    fc.seek(0, 0)
    fc.write(py_compile.MAGIC)
</snippet></ROW><ROW><id>8628342</id><snippet>input(print("..."))</snippet></ROW><ROW><id>8628342</id><snippet>input("...")</snippet></ROW><ROW><id>8628342</id><snippet>print()</snippet></ROW><ROW><id>8628948</id><snippet>wx.ALIGN...</snippet></ROW><ROW><id>8628948</id><snippet>size</snippet></ROW><ROW><id>8628948</id><snippet>sizer.Add()</snippet></ROW><ROW><id>8628948</id><snippet>0</snippet></ROW><ROW><id>8628948</id><snippet>1</snippet></ROW><ROW><id>8628948</id><snippet>sizer_2.Add(self.label_1, 0, 0, 0)
</snippet></ROW><ROW><id>8628948</id><snippet>sizer_2.Add(self.label_1, 1, 0, 0)
</snippet></ROW><ROW><id>8628948</id><snippet>class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.label_1 = wx.StaticText(self.panel_1, -1, "label_1", style=wx.ALIGN_RIGHT)
        self.panel_2 = wx.Panel(self, -1)
        self.label_2 = wx.StaticText(self.panel_2, -1, "label_2", style=wx.ALIGN_CENTRE)
        self.panel_3 = wx.Panel(self, -1)
        self.label_3 = wx.StaticText(self.panel_3, -1, "label_3")

        self.panel_1.SetBackgroundColour(wx.Colour(0, 255, 0))
        self.panel_2.SetBackgroundColour(wx.Colour(0, 255, 255))
        self.panel_3.SetBackgroundColour(wx.Colour(219, 112, 147))

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_2.Add(self.label_1, 1, 0, 0)
        sizer_3.Add(self.label_2, 1, 0, 0)
        sizer_4.Add(self.label_3, 1, 0, 0)

        self.panel_1.SetSizer(sizer_2)
        self.panel_2.SetSizer(sizer_3)
        self.panel_3.SetSizer(sizer_4)

        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        sizer_1.Add(self.panel_3, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
</snippet></ROW><ROW><id>8628948</id><snippet>class MyFrame2(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "label_1", style=wx.ALIGN_RIGHT)
        self.label_2 = wx.StaticText(self, -1, "label_2", style=wx.ALIGN_CENTRE)
        self.label_3 = wx.StaticText(self, -1, "label_3")

        self.label_1.SetBackgroundColour(wx.Colour(127, 255, 0))
        self.label_2.SetBackgroundColour(wx.Colour(0, 255, 255))
        self.label_3.SetBackgroundColour(wx.Colour(219, 112, 147))

        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(self.label_1, 1, wx.EXPAND, 0)
        sizer.Add(self.label_2, 1, wx.EXPAND, 0)
        sizer.Add(self.label_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer)
        sizer.Fit(self)
        self.Layout()
</snippet></ROW><ROW><id>8628948</id><snippet>position</snippet></ROW><ROW><id>8628948</id><snippet>StaticText</snippet></ROW><ROW><id>8628948</id><snippet>size</snippet></ROW><ROW><id>8628948</id><snippet>sizer_6.Add(self.label_5, 0, wx.ALIGN_RIGHT, 0)
</snippet></ROW><ROW><id>8628948</id><snippet>sizer_7.Add(self.label_6, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
</snippet></ROW><ROW><id>8628948</id><snippet>BoxSizer</snippet></ROW><ROW><id>8628948</id><snippet>BoxSizer</snippet></ROW><ROW><id>8628948</id><snippet>class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_4 = wx.Panel(self, -1)
        self.label_5 = wx.StaticText(self.panel_4, -1, "label_5")
        self.panel_5 = wx.Panel(self, -1)
        self.label_6 = wx.StaticText(self.panel_5, -1, "label_6")
        self.panel_6 = wx.Panel(self, -1)
        self.label_7 = wx.StaticText(self.panel_6, -1, "label_7")

        self.panel_4.SetBackgroundColour(wx.Colour(0, 255, 255))
        self.panel_5.SetBackgroundColour(wx.Colour(127, 255, 0))
        self.panel_6.SetBackgroundColour(wx.Colour(219, 112, 219))

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)

        sizer_6.Add(self.label_5, 0, wx.ALIGN_RIGHT, 0)
        sizer_7.Add(self.label_6, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_8.Add(self.label_7, 0, 0, 0)

        self.panel_4.SetSizer(sizer_6)
        self.panel_5.SetSizer(sizer_7)
        self.panel_6.SetSizer(sizer_8)

        sizer_1.Add(self.panel_4, 1, wx.EXPAND, 0)
        sizer_1.Add(self.panel_5, 1, wx.EXPAND, 0)
        sizer_1.Add(self.panel_6, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
</snippet></ROW><ROW><id>8629318</id><snippet>from flask import request

... 
def add():
   with app.request_context(environ):
      node = Node('test','test','this is a test',1)
      db_session.add(node)
      db_session.commit()
      return 'is ok'
</snippet></ROW><ROW><id>8629394</id><snippet>create_user</snippet></ROW><ROW><id>8629394</id><snippet>created, user</snippet></ROW><ROW><id>8629394</id><snippet>created, user = self.auth.store.user_model.create_user(...
</snippet></ROW><ROW><id>8629461</id><snippet>stem</snippet></ROW><ROW><id>8629461</id><snippet>end</snippet></ROW><ROW><id>8629461</id><snippet>ss</snippet></ROW><ROW><id>8629461</id><snippet>s</snippet></ROW><ROW><id>8629461</id><snippet>stem &lt;- word</snippet></ROW><ROW><id>8629461</id><snippet>end &lt;- ""</snippet></ROW><ROW><id>8629461</id><snippet>s</snippet></ROW><ROW><id>8629461</id><snippet>stem &lt;- word without "s"</snippet></ROW><ROW><id>8629461</id><snippet>end &lt;- "s"</snippet></ROW><ROW><id>8629461</id><snippet>s</snippet></ROW><ROW><id>8629461</id><snippet>stem &lt;- word</snippet></ROW><ROW><id>8629461</id><snippet>end &lt;- ""</snippet></ROW><ROW><id>8629461</id><snippet>^....$</snippet></ROW><ROW><id>8629461</id><snippet>stem</snippet></ROW><ROW><id>8629461</id><snippet>ss</snippet></ROW><ROW><id>8629461</id><snippet>.*ss</snippet></ROW><ROW><id>8629461</id><snippet>.*?</snippet></ROW><ROW><id>8629461</id><snippet>s</snippet></ROW><ROW><id>8629461</id><snippet>end</snippet></ROW><ROW><id>8629461</id><snippet>ss</snippet></ROW><ROW><id>8629461</id><snippet>s</snippet></ROW><ROW><id>8629461</id><snippet>end</snippet></ROW><ROW><id>8629676</id><snippet>import subprocess
subprocess.Popen(["egrep","-r","--exclude=*{.git,.svn}*","text","~/directory"], stdout=subprocess.PIPE).communicate()[0]
</snippet></ROW><ROW><id>8629676</id><snippet>~</snippet></ROW><ROW><id>8629676</id><snippet>excludes = ['.git','.svn']
command = ['egrep','-r']
for e in excludes:
    command.append('--exclude=*%s*'%e)
command += ["text","~/directory"]
subprocess.Popen(command, stdout=subprocess.PIPE).communicate()[0]
</snippet></ROW><ROW><id>8629708</id><snippet>format</snippet></ROW><ROW><id>8629708</id><snippet>print("""
something.......something...
{0}
and then again some string......
""".format(abs(-10.5)))
</snippet></ROW><ROW><id>8629846</id><snippet>root='/static/'</snippet></ROW><ROW><id>8629846</id><snippet>static</snippet></ROW><ROW><id>8629846</id><snippet>static</snippet></ROW><ROW><id>8629846</id><snippet>root='./static/'</snippet></ROW><ROW><id>8629916</id><snippet>@get('/', apply=[auth])
def handler():
    ...
</snippet></ROW><ROW><id>8629916</id><snippet>@view</snippet></ROW><ROW><id>8629969</id><snippet>&lt;café&gt;</snippet></ROW><ROW><id>8629969</id><snippet>sgmllib</snippet></ROW><ROW><id>8629969</id><snippet>except AttributeError:</snippet></ROW><ROW><id>8629969</id><snippet>except AttributeError, UnicodeError:</snippet></ROW><ROW><id>8629969</id><snippet>html5lib</snippet></ROW><ROW><id>8630199</id><snippet>\bfunction\b\s+\S+[^\(](\s+)?\(.*?\)\s+\{
</snippet></ROW><ROW><id>8630199</id><snippet>$string = "function myfunction() {}";
</snippet></ROW><ROW><id>8630199</id><snippet>(?:(?=(?:(?:\\.|"(?:\\.|[^"\\])*"|[^\\'"])*'(?:\\.|"(?:\\.|[^"'\\])*"|[^\\'])*')*(?:\\.|"(?:\\.|[^"\\])*"|[^\\'])*$)(?=(?:(?:\\.|'(?:\\.|[^'\\])*'|[^\\'"])*"(?:\\.|'(?:\\.|[^'"\\])*'|[^\\"])*")*(?:\\.|'(?:\\.|[^'\\])*'|[^\\"])*$)(?:\\.|[^\\'"]))+
</snippet></ROW><ROW><id>8630199</id><snippet>{</snippet></ROW><ROW><id>8630199</id><snippet>}</snippet></ROW><ROW><id>8630239</id><snippet>dir</snippet></ROW><ROW><id>8630239</id><snippet>__dir__</snippet></ROW><ROW><id>8630294</id><snippet>typ, data = conn.search(None, 'BEFORE', before_date, 'UNSEEN')
</snippet></ROW><ROW><id>8630330</id><snippet>time.sleep</snippet></ROW><ROW><id>8630330</id><snippet>sleep(3)</snippet></ROW><ROW><id>8630330</id><snippet>select(2)</snippet></ROW><ROW><id>8630330</id><snippet>stdin</snippet></ROW><ROW><id>8630330</id><snippet>Py_BEGIN_ALLOW_THREADS</snippet></ROW><ROW><id>8630330</id><snippet>Py_END_ALLOW_THREADS</snippet></ROW><ROW><id>8630330</id><snippet>sleep(3)</snippet></ROW><ROW><id>8630330</id><snippet>#include &lt;boost/python.hpp&gt;
using namespace boost::python;
void waiter(int seconds) {
    Py_BEGIN_ALLOW_THREADS
    ::sleep(seconds);
    Py_END_ALLOW_THREADS
}
BOOST_PYTHON_MODULE( boostmod ) {
    def("waiter",&amp;::waiter);
}
</snippet></ROW><ROW><id>8630460</id><snippet>with</snippet></ROW><ROW><id>8630460</id><snippet>from contextlib import closing
from my_database_module import the_global_connection

def getPrice(
    with closing(the_global_connection.cursor())
        curs.execute('''SELECT close FROM prices WHERE symbol = ? AND date = ?;''', (symbol, date))
        close = curs.fetchall()
    return close
</snippet></ROW><ROW><id>8630460</id><snippet>import sqlite3
the_global_connection = sqlite3.connect( "stocks.db" )
</snippet></ROW><ROW><id>8630477</id><snippet>/add</snippet></ROW><ROW><id>8630477</id><snippet>urls = (
  '/', 'Index',
  '/add.html','Add',
)
</snippet></ROW><ROW><id>8630477</id><snippet>urls = (
  '/', 'Index',
  '/add','Add',
  '/add.html','Add',
)
</snippet></ROW><ROW><id>8630477</id><snippet>&lt;a href="/add"&gt;add something&lt;/a&gt;
</snippet></ROW><ROW><id>8630524</id><snippet>import datetime
a = datetime.datetime.strptime("8:30pm", "%I:%M%p")
today = datetime.datetime.today()

result = datetime.datetime.combine(today.date(), a.time())

# result == datetime.datetime(2011, 12, 25, 20, 30)
</snippet></ROW><ROW><id>8630723</id><snippet>&lt;/a&gt;</snippet></ROW><ROW><id>8630723</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>8630723</id><snippet>&lt;style&gt;</snippet></ROW><ROW><id>8630723</id><snippet>&lt;/</snippet></ROW><ROW><id>8630723</id><snippet>&lt;/</snippet></ROW><ROW><id>8630723</id><snippet>&lt;\/</snippet></ROW><ROW><id>8630723</id><snippet>\x3C/</snippet></ROW><ROW><id>8630723</id><snippet>html5lib</snippet></ROW><ROW><id>8630940</id><snippet>struct</snippet></ROW><ROW><id>8630940</id><snippet>f</snippet></ROW><ROW><id>8630956</id><snippet>&gt;&gt;&gt; string = "PHOTOThe text which should be present\n"
&gt;&gt;&gt; string[5:-1]
'The text which should be present'
</snippet></ROW><ROW><id>8630956</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; match = re.match("PHOTO(.+)\n", string)
&gt;&gt;&gt; match.groups()
('The text which should be present',)
</snippet></ROW><ROW><id>8631292</id><snippet>directory = "c:\\..."
import os.path
paths = [os.path.join(directory, filename) for filename in filenames]
</snippet></ROW><ROW><id>8631292</id><snippet>def loo(x):
    return [[el for el in x if el!=x[i]] for i in range(len(x))]
</snippet></ROW><ROW><id>8631292</id><snippet>import os.path

def loo(x):
    return [[el for el in x if el!=x[i]] for i in range(len(x))]

def p(subjects, directory):
    l = loo(subjects)
    for group in l:
        for subj in group:
            print os.path.join(directory, subj)
        print

p(['S1','S2','S3','S4','S5'], 'c:\\')
</snippet></ROW><ROW><id>8631292</id><snippet>c:\S2
c:\S3
c:\S4
c:\S5

c:\S1
c:\S3
c:\S4
c:\S5

c:\S1
c:\S2
c:\S4
c:\S5

c:\S1
c:\S2
c:\S3
c:\S5

c:\S1
c:\S2
c:\S3
c:\S4
</snippet></ROW><ROW><id>8631332</id><snippet>BufferedIOBase</snippet></ROW><ROW><id>8631332</id><snippet>IOBase</snippet></ROW><ROW><id>8631332</id><snippet>IOBase</snippet></ROW><ROW><id>8631332</id><snippet>IOBase</snippet></ROW><ROW><id>8631332</id><snippet>BufferedIOBase</snippet></ROW><ROW><id>8631332</id><snippet>close()</snippet></ROW><ROW><id>8631332</id><snippet>BufferedReader</snippet></ROW><ROW><id>8631332</id><snippet>detach()</snippet></ROW><ROW><id>8631332</id><snippet>BufferedIOBase</snippet></ROW><ROW><id>8631332</id><snippet>io.open</snippet></ROW><ROW><id>8631332</id><snippet>BufferedReader</snippet></ROW><ROW><id>8631332</id><snippet>rb</snippet></ROW><ROW><id>8631332</id><snippet>io.FileIO</snippet></ROW><ROW><id>8631332</id><snippet>fd = os.open('test.txt', os.O_RDONLY)
file1 = FileIO(fd, 'r', closefd=False)
file2 = FileIO(fd, 'r', closefd=False)

file1.read(100)
assert file1.tell() == 100
file2.read(100)
assert file1.tell() == 200
</snippet></ROW><ROW><id>8631332</id><snippet>detach()</snippet></ROW><ROW><id>8631332</id><snippet>BufferedIOBase</snippet></ROW><ROW><id>8631332</id><snippet>def test(streams):
    for stream in streams:
        b=TestReader(stream)
        do_something(b)
        wrappedstream = b.detach()
        assert wrappedstream is stream
</snippet></ROW><ROW><id>8631332</id><snippet>class TestReader(BufferedReader):
    def __del__(self):
        self.detach()
        # self.raw will not be closed,
        # rather left in the state it was in at detachment
</snippet></ROW><ROW><id>8631332</id><snippet>close()</snippet></ROW><ROW><id>8631332</id><snippet>class TestReader(BufferedReader):
    def close(self):
        self.closed = True
</snippet></ROW><ROW><id>8631332</id><snippet>from io import FileIO, BufferedReader
import io
import os

class TestReader(BufferedReader):
    pass

def test(streams):
    for stream in streams:
        b = TestReader(stream)

def test_reset(streams):
    """Will try to leave stream state unchanged"""
    for stream in streams:
        pos = stream.tell()
        b = TestReader(stream)
        do_something(b)
        b.detach()
        stream.seek(pos)



filenames = ['test1.txt', 'test2.txt']

# option 1: just make new streams

streams = [FileIO(name, 'r') for name in filenames]
test(streams)
streams = [io.open(name, 'rb') for name in filenames]
#etc


# option 2: use file descriptors
fds = [os.open(name, os.O_RDONLY) for name in filenames]
#closefd = False means "do not close fd on __del__ or __exit__"
#this is only an option when you pass a fd instead of a file name
streams = [FileIO(fd, 'r', closefd=False) for fd in fds]
test(streams)
streams = []
for fd in fds:
    os.lseek(fd, 0, os.SEEK_SET)
    streams.append(io.open(fd, 'rb', closefd=False))
    # you can also .seek(0) on the BufferedReader objects
    # instead of os.lseek on the fds


# option 3: detach

streams = [FileIO(name, 'r') for name in filenames]
test_reset(streams)
# streams[*] should still be in the same state as when you passed it in
</snippet></ROW><ROW><id>8631356</id><snippet>"c:\python27\python.exe" yourscript.py</snippet></ROW><ROW><id>8631356</id><snippet>c:\python27\python.exe</snippet></ROW><ROW><id>8631484</id><snippet>class Enum:
    __metaclass__ = EnumMetaclass
</snippet></ROW><ROW><id>8631484</id><snippet>class Colors(metaclass=EnumMetaclass):
    red = 1
    green = 2
    blue = 3
</snippet></ROW><ROW><id>8631607</id><snippet>import Image
import hashlib

img = Image.open(filename).convert('RGBA')
m=hashlib.md5()
m.update(img.tostring())
print(m.hexdigest())
</snippet></ROW><ROW><id>8631696</id><snippet>seek</snippet></ROW><ROW><id>8631696</id><snippet>import hashlib
with open('really-large-file', 'rb') as f:
    f.seek(- 4096 * 1024, 2)
    print (hashlib.md5(f.read()).hexdigest())
</snippet></ROW><ROW><id>8631817</id><snippet>def test():
    """Stupid test function"""
    L = []
    for i in range(100):
        L.append(i)

if __name__ == '__main__':
    from timeit import Timer
    t = Timer("test()", "from __main__ import test")
    print t.timeit()
</snippet></ROW><ROW><id>8631842</id><snippet>#!/usr/bin/env python
import urllib

from os import pardir, rename, listdir, getcwd
from os.path import join


class MyOpener(urllib.FancyURLopener):
     version = 'QuickTime/7.6.2 (verqt=7.6.2;cpu=IA32;so=Mac 10.5.8)'

# This line tells urllib.urlretrieve and urllib.urlopen to use your MyOpener 
# instead of the default urllib.FancyOpener
urllib._urlopener = MyOpener()

def main():
    # lots of stuff
    for title, url in downloads.iteritems():
        fpath = join(data_dir, title.strip().replace('\t',"").replace(" ", "_"))
        fpath += ".mov"
        urllib.urlretrieve(url, fpath)
</snippet></ROW><ROW><id>8631924</id><snippet>import Image
sizes = [(120,120), (720,720), (1600,1600)]
files = ['a.jpg','b.jpg','c.jpg']

for image in files:
    for size in sizes:
      Image.open(image).thumbnail(size).save("thumbnail_%s" % image)
</snippet></ROW><ROW><id>8632049</id><snippet>mask = (foo &lt; 40) | (foo &gt; 60)
</snippet></ROW><ROW><id>8632049</id><snippet>__or__</snippet></ROW><ROW><id>8632049</id><snippet>|</snippet></ROW><ROW><id>8632049</id><snippet>or</snippet></ROW><ROW><id>8632103</id><snippet>unittest</snippet></ROW><ROW><id>8632103</id><snippet>nose</snippet></ROW><ROW><id>8632103</id><snippet>unittest.TestCase.assertMultilineEqual</snippet></ROW><ROW><id>8632240</id><snippet>ppp</snippet></ROW><ROW><id>8632240</id><snippet>ppp0      Link encap:Point-to-Point Protocol
          inet addr:172.27.42.1  P-t-P:172.27.42.17  Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
          RX packets:416 errors:0 dropped:0 overruns:0 frame:0
          TX packets:397 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:3
          RX bytes:253765 (247.8 Kb)  TX bytes:62621 (61.1 Kb)
</snippet></ROW><ROW><id>8632240</id><snippet>&gt;&gt;&gt; import netifaces as ni
&gt;&gt;&gt; ni.interfaces()
['lo', 'eth0', 'eth1', 'vboxnet0', 'dummy1']
&gt;&gt;&gt; ni.ifaddresses('eth0')
{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:02:55:7b:b2:f6'}], 2: [{'broadcast': '24.19.161.7', 'netmask': '255.255.255.248', 'addr': '24.19.161.6'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::202:55ff:fe7b:b2f6%eth0'}]}
&gt;&gt;&gt; 
&gt;&gt;&gt; ni.ifaddresses.__doc__
'Obtain information about the specified network interface.\n\nReturns a dict whose keys are equal to the address family constants,\ne.g. netifaces.AF_INET, and whose values are a list of addresses in\nthat family that are attached to the network interface.'
&gt;&gt;&gt; # for the IPv4 address of eth0
&gt;&gt;&gt; ni.ifaddresses('eth0')[2][0]['addr']
'24.19.161.6'
</snippet></ROW><ROW><id>8632240</id><snippet>/usr/include/linux/socket.h</snippet></ROW><ROW><id>8632240</id><snippet>#define AF_INET         2       /* Internet IP Protocol         */
#define AF_INET6        10      /* IP version 6                 */
#define AF_PACKET       17      /* Packet family                */
</snippet></ROW><ROW><id>8632275</id><snippet>Off
</snippet></ROW><ROW><id>8632275</id><snippet>Automatically
</snippet></ROW><ROW><id>8632275</id><snippet>mlm@matt-mmf-macbook.local:~
$ python -c 'import socket ; print socket.getfqdn()'
matt-mmf-macbook.local

mlm@matt-mmf-macbook.local:~
$ 
</snippet></ROW><ROW><id>8632404</id><snippet>def make_action(additional_arg):
    class customAction(argparse.Action):
        def __call__(self, parser, args, values, option_string=None):
           print(additional_arg)
           setattr(args, self.dest, values)
    return customAction
#...
parser.add_argument('-e', '--example', action=make_action('your arg'))
</snippet></ROW><ROW><id>8632610</id><snippet>TITLE_MATCH.match(listing_title)</snippet></ROW><ROW><id>8632610</id><snippet>None</snippet></ROW><ROW><id>8632610</id><snippet>.groups()</snippet></ROW><ROW><id>8632968</id><snippet>http://www.drugpolicyreformmovement.com/static/css/blueprint/print.css
</snippet></ROW><ROW><id>8632968</id><snippet>http://www.drugpolicyreformmovement.com/newsarchive2003/static/css/blueprint/print.css
</snippet></ROW><ROW><id>8632968</id><snippet>/</snippet></ROW><ROW><id>8632968</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>8632968</id><snippet>/static/css/blueprint/print.css</snippet></ROW><ROW><id>8632968</id><snippet>&lt;img src="{{ STATIC_URL }}css/blueprint/print.css" /&gt;</snippet></ROW><ROW><id>8633156</id><snippet>dataset = {}
dataset['key1'] = (value_1_1, value_1_2, value_1_3, value_1_4)
dataset['key2'] = (value_2_1, value_2_2, value_2_3, value_2_4)
</snippet></ROW><ROW><id>8633156</id><snippet>row_of_interest = dataest['key2']
</snippet></ROW><ROW><id>8633156</id><snippet>def save():
    name = self.e.get()
    age = self.a.get()
    employee_id = self.i.get()
    employee_designation = self.d.get()
    self.employees[name] = (age, employee_id, employee_designation)
</snippet></ROW><ROW><id>8633156</id><snippet>employees</snippet></ROW><ROW><id>8633156</id><snippet>def save():
    name = self.e.get()
    age = self.a.get()
    employee_id = self.i.get()
    employee_designation = self.d.get()
    self.employees.append((name, age, employee_id, employee_designation))
</snippet></ROW><ROW><id>8633156</id><snippet>employees</snippet></ROW><ROW><id>8633156</id><snippet>sorted</snippet></ROW><ROW><id>8633156</id><snippet>operator</snippet></ROW><ROW><id>8633156</id><snippet>sorted(self.employees, key=operator.itemgetter(0), reverse=False)
</snippet></ROW><ROW><id>8633545</id><snippet>python helloworld.py</snippet></ROW><ROW><id>8633545</id><snippet>&gt;&gt;&gt; python helloworld.py 
</snippet></ROW><ROW><id>8633545</id><snippet>C:\python helloworld.py 
</snippet></ROW><ROW><id>8633563</id><snippet>parser.add_option("-t", "--tracks", action="append", type="int")
</snippet></ROW><ROW><id>8633563</id><snippet>options.tracks = []
options.tracks.append(int("3"))
</snippet></ROW><ROW><id>8633563</id><snippet>options.tracks.append(int("4"))
</snippet></ROW><ROW><id>8634017</id><snippet>(.+?)\1+
</snippet></ROW><ROW><id>8634017</id><snippet>abcabcabc</snippet></ROW><ROW><id>8634017</id><snippet>xabcabcabcx</snippet></ROW><ROW><id>8634017</id><snippet>.+?</snippet></ROW><ROW><id>8634017</id><snippet>.*?</snippet></ROW><ROW><id>8634017</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r"(.+?)\1+")
&gt;&gt;&gt; r.findall("cbabababac")
['ba']
&gt;&gt;&gt; r.findall("dabcdbcdbcdd")
['bcd']
</snippet></ROW><ROW><id>8634017</id><snippet>d</snippet></ROW><ROW><id>8634017</id><snippet>abcd</snippet></ROW><ROW><id>8634017</id><snippet>abc</snippet></ROW><ROW><id>8634017</id><snippet>abcd</snippet></ROW><ROW><id>8634017</id><snippet>&gt;&gt;&gt; r.findall("abcabcdabcd")
['abc']
</snippet></ROW><ROW><id>8634017</id><snippet>&gt;&gt;&gt; r.findall("abcdabcdabcabc")
['abcd', 'abc']
</snippet></ROW><ROW><id>8634017</id><snippet>(.+?)(?=\1)
</snippet></ROW><ROW><id>8634017</id><snippet>&gt;&gt;&gt; r = re.compile(r"(.+?)(?=\1)")
&gt;&gt;&gt; r.findall("dabcdbcdbcdd")
['bcd', 'bcd', 'd']
</snippet></ROW><ROW><id>8634017</id><snippet>&gt;&gt;&gt; min(r.findall("dabcdbcdbcdd") or [""], key=len)
'd'
</snippet></ROW><ROW><id>8634017</id><snippet>or [""]</snippet></ROW><ROW><id>8634017</id><snippet>ValueError</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>cls</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>cls</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>self</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>self</snippet></ROW><ROW><id>8634126</id><snippet>MyClass</snippet></ROW><ROW><id>8634126</id><snippet>def __new__(cls, *args, **kwargs):
    obj = object.__new__(cls, *args, **kwargs)
    obj.__init__(*args, **kwargs)
    return obj
</snippet></ROW><ROW><id>8634126</id><snippet>MyClass.__init__</snippet></ROW><ROW><id>8634126</id><snippet>obj.__init__</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>obj</snippet></ROW><ROW><id>8634126</id><snippet>cls</snippet></ROW><ROW><id>8634126</id><snippet>object.__new__</snippet></ROW><ROW><id>8634126</id><snippet>cls</snippet></ROW><ROW><id>8634126</id><snippet>MyClass</snippet></ROW><ROW><id>8634126</id><snippet>obj.__init__</snippet></ROW><ROW><id>8634126</id><snippet>MyClass.__init__</snippet></ROW><ROW><id>8634126</id><snippet>object.__init__</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>__new__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>__init__</snippet></ROW><ROW><id>8634126</id><snippet>class MyClass(object):
    def __init__(self, data):
        self.data = data

    def __getitem__(self, index):
        return type(self)(self.data[index])

    def __repr__(self):
        return repr(self.data)

x = MyClass(range(10))
x2 = x[0:2]
</snippet></ROW><ROW><id>8634191</id><snippet>glib.idle_add</snippet></ROW><ROW><id>8634191</id><snippet>time.sleep</snippet></ROW><ROW><id>8634191</id><snippet>import gtk, glib
import webkit
import threading
import time

# Use threads                                       
gtk.gdk.threads_init()

class App(object):
    def __init__(self):
        window = gtk.Window()
        webView = webkit.WebView()
        window.add(webView)
        window.show_all()

        self.window = window
        self.webView = webView

    def run(self):
        gtk.main()

    def show_html(self):
        # Get your html string                     
        time.sleep(3)
        html_str = '&lt;h1&gt;Hello Mars&lt;/h1&gt;'

        # Update widget in main thread             
        glib.idle_add(self.webView.load_html_string,
                      html_str, 'file:///')

app = App()

thread = threading.Thread(target=app.show_html)
thread.start()

app.run()
gtk.main()
</snippet></ROW><ROW><id>8634246</id><snippet>from webapp2_extras.appengine.auth.models import User
from ndb import key, model

class MUser(User): # child class of User
    displayname = model.StringProperty() # show on screen, auto create 'user-{id}'
    lastaccess = model.DateTimeProperty(auto_now=True)

    @classmethod
    def update_or_insert_user(cls, user):
        """update some user's prop if exited else create new muser
        return : MUser object or None
        """
        u = MUser.get_by_auth_id(user.email())
        if u is None:                               
            ok, u = MUser.create_user(user.email(), id=newid)
            if ok == True:
                u.displayname = 'user-'+str(u.get_id())
            else:
                log.error('create new user error : ' + user.email())
                u = None
        else :          
            u.put() # Update last access (auto fill def in model class)

        return u

class MyPageHandler(NewBaseHandler):
    """
    Only accessible to users that are logged in
    """
    @user_required
    def get(self):
        user = self.get_current_muser()
        self.render_template('mypage.htm', {'user': user.displayname })

    def get_current_muser(self):
        # come from gae login page, convert current gae user to muser
        user = users.get_current_user() # google users
        if user:
            # user have login, try to create or update
            log.info('create user')
            mu = MUser.update_or_insert_user(user)
            if mu:
                # save to session
                self.session['muserid'] = mu.key.id()
                return mu

        return None
</snippet></ROW><ROW><id>8634502</id><snippet>crypted_password = db.StringProperty()  
salt = db.StringProperty() 

def __encrypt(self, plaintext, salt=''):
    """returns the SHA1 hexdigest of a plaintext and salt"""

    phrase = hashlib.sha1()
    phrase.update('%s--%s' % (plaintext, salt))
    return phrase.hexdigest()

def set_password(self, new_password):
    """sets the user's crypted_password"""

    import datetime
    if not self.salt:
        self.salt = self.__encrypt(str(datetime.datetime.now()))
    self.crypted_password = self.__encrypt(new_password, self.salt)
</snippet></ROW><ROW><id>8634993</id><snippet>subprocess</snippet></ROW><ROW><id>8635126</id><snippet>In [40]: len(list(itertools.combinations('ABCDEF',3)))
Out[40]: 20
</snippet></ROW><ROW><id>8635126</id><snippet>In [41]: len(list(itertools.combinations('ABCDEF',2)))
Out[41]: 15
</snippet></ROW><ROW><id>8635126</id><snippet>combinations('ABCDEF', 3) --&gt; AB AC AD AE AF BC BD BE BF CD CE CF DE DF EF
</snippet></ROW><ROW><id>8635126</id><snippet>combinations('ABCDEF', 2)</snippet></ROW><ROW><id>8635126</id><snippet>combinations('ABCDEF', 3)</snippet></ROW><ROW><id>8635416</id><snippet>$ python
&gt;&gt; import grappelli
</snippet></ROW><ROW><id>8635441</id><snippet>import testapp

urlpatterns = patterns('',
    ...
    url(r'^admin/', include(admin.site.urls)),
    url(r'^testapp/', include(testapp.urls)),
)
</snippet></ROW><ROW><id>8635739</id><snippet>schemamigration</snippet></ROW><ROW><id>8635739</id><snippet>./work/manage.py migrate mypackage --merge
</snippet></ROW><ROW><id>8635739</id><snippet>merge</snippet></ROW><ROW><id>8636055</id><snippet>getDossier</snippet></ROW><ROW><id>8636274</id><snippet>$ python2
&gt;&gt;&gt; print("ľťď", 1+1)
('\xc4\xbe\xc5\xa5\xc4\x8f', 2)

$ python3
&gt;&gt;&gt; print("ľťď", 1+1)
ľťď 2
</snippet></ROW><ROW><id>8636276</id><snippet>import lxml.html as LH

doc = LH.fromstring(content)
print([tr.xpath('td[1]/a/@href | td[position()=2 or position()=3]/text()')
       for tr in doc.xpath('//tr')])
</snippet></ROW><ROW><id>8636276</id><snippet>td[1]                                   find the first &lt;td&gt;  
  /a                                    find the &lt;a&gt;
    /@href                              return its href attribute value
|                                       or
td[position()=2 or position()=3]        find the second or third &lt;td&gt;
  /text()                               return its text value
</snippet></ROW><ROW><id>8636665</id><snippet>tk.Frame</snippet></ROW><ROW><id>8636665</id><snippet>import Tkinter as tk

class SimpleApp(object):
    def __init__(self, master, **kwargs):
        title = kwargs.pop('title')
        frame = tk.Frame(master, borderwidth=5, bg = 'cyan', **kwargs)
        frame.grid()
        button = tk.Button(frame, text = title)
        button.grid(sticky = tk.SE)
        frame.rowconfigure('all', minsize = 200)
        frame.columnconfigure('all', minsize = 200)

def basic():
    root = tk.Tk()
    app = SimpleApp(root, title = 'Hello, world')
    root.mainloop()
basic()
</snippet></ROW><ROW><id>8636665</id><snippet>import tkinter as tk
</snippet></ROW><ROW><id>8636665</id><snippet>import Tkinter as tk
</snippet></ROW><ROW><id>8636763</id><snippet>urllib2.HTTPError</snippet></ROW><ROW><id>8636763</id><snippet>download()</snippet></ROW><ROW><id>8636763</id><snippet>raise</snippet></ROW><ROW><id>8636939</id><snippet>def formatmonth(self, year, month):
    self.year, self.month = year, month
    return super(EventsCalendar, self).formatmonth(year, month)
</snippet></ROW><ROW><id>8636993</id><snippet>import sys, operator

def tokenize(s, glen):
  g2 = set()
  for i in xrange(len(s)-(glen-1)):
    g2.add(s[i:i+glen])
  return g2

def dice_grams(g1, g2): return (2.0*len(g1 &amp; g2)) / (len(g1)+len(g2))

def dice(n, s1, s2): return dice_grams(tokenize(s1, n), tokenize(s2, n))

def main():
  GRAM_LEN = 4
  scores = {}
  for i in xrange(1,len(sys.argv)):
    for j in xrange(i+1, len(sys.argv)):
      s1 = sys.argv[i]
      s2 = sys.argv[j]
      score = dice(GRAM_LEN, s1, s2)
      scores[s1+":"+s2] = score
  for item in sorted(scores.iteritems(), key=operator.itemgetter(1)):
    print item
</snippet></ROW><ROW><id>8636993</id><snippet>./dice.py "NBA Basketball" "Basketball NBA" "Basketball" "Baseball"

('NBA Basketball:Baseball', 0.125)
('Basketball NBA:Baseball', 0.125)
('Basketball:Baseball', 0.16666666666666666)
('NBA Basketball:Basketball NBA', 0.63636363636363635)
('NBA Basketball:Basketball', 0.77777777777777779)
('Basketball NBA:Basketball', 0.77777777777777779)
</snippet></ROW><ROW><id>8637179</id><snippet>def f(x=None, y=None, z=None):
    print x, y, z

f(1, 2, 3)
#output: 1 2 3
</snippet></ROW><ROW><id>8637179</id><snippet>def f(x=None, y=None, z=None):
    if z is not None: # then all values were assigned
        return range(x, y, z)
    elif y is not None: # then a start stop was set
        return range(x, y):
    else: # only one value was given
        return range(x)
</snippet></ROW><ROW><id>8637179</id><snippet>f(z=1)</snippet></ROW><ROW><id>8637179</id><snippet>[kwarg]</snippet></ROW><ROW><id>8637179</id><snippet>kwarg</snippet></ROW><ROW><id>8637179</id><snippet>def f(x=0, y=None, z=1):
    if y is None:
        raise Exception()
    return range(x, y, z)
</snippet></ROW><ROW><id>8637217</id><snippet>from flask import send_file

@app.route('/get_image')
def get_image():
    if request.args.get('type') == '1':
       filename = 'ok.gif'
    else:
       filename = 'error.gif'
    return send_file(filename, mimetype='image/gif')
</snippet></ROW><ROW><id>8637217</id><snippet>ok.gif</snippet></ROW><ROW><id>8637217</id><snippet>error.gif</snippet></ROW><ROW><id>8637217</id><snippet>send_file</snippet></ROW><ROW><id>8637217</id><snippet>request</snippet></ROW><ROW><id>8637219</id><snippet>~/.MacOSX/environment.plist</snippet></ROW><ROW><id>8637219</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>8637219</id><snippet>utf-8</snippet></ROW><ROW><id>8637219</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;PYTHONIOENCODING&lt;/key&gt;
    &lt;string&gt;utf-8&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</snippet></ROW><ROW><id>8637483</id><snippet>TourItemFormSet = inlineformset_factory(Tour,TourItem,can_delete=True,extra=4)
TourItemFormSet.form.base_fields["TourItemType"].queryset = TourItemType.objects.filter(Lang__iexact=request.LANGUAGE_CODE)
# then create an instance of TourItemFormSet and add to template context
</snippet></ROW><ROW><id>8637548</id><snippet>In [17]: D[np.arange(n_samples),medoids[cl]].sum()
Out[17]: 10.777269629999999
</snippet></ROW><ROW><id>8637689</id><snippet>import decimal
cents = 999
dollars = decimal.Decimal(cents) / 100
print dollars
</snippet></ROW><ROW><id>8637972</id><snippet>.filter()</snippet></ROW><ROW><id>8637972</id><snippet>filter</snippet></ROW><ROW><id>8637972</id><snippet>class Photo(models.Model):
    tags = models.ManyToManyField('Tag')

class Tag(models.Model):
    name = models.CharField(max_length=50)

    def __unicode__(self):
        return self.name

In [2]: t1 = Tag.objects.create(name='holiday')
In [3]: t2 = Tag.objects.create(name='summer')
In [4]: p = Photo.objects.create()
In [5]: p.tags.add(t1)
In [6]: p.tags.add(t2)
In [7]: p.tags.all()
Out[7]: [&lt;Tag: holiday&gt;, &lt;Tag: summer&gt;]
</snippet></ROW><ROW><id>8637972</id><snippet>In [8]: Photo.objects.filter(tags=t1).filter(tags=t2)
Out[8]: [&lt;Photo: Photo object&gt;]
</snippet></ROW><ROW><id>8637972</id><snippet>In [17]: print Photo.objects.filter(tags=t1).filter(tags=t2).query
SELECT "test_photo"."id"
FROM "test_photo"
INNER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")
INNER JOIN "test_photo_tags" T4 ON ("test_photo"."id" = T4."photo_id")
WHERE ("test_photo_tags"."tag_id" = 3  AND T4."tag_id" = 4 )
</snippet></ROW><ROW><id>8637972</id><snippet>filter</snippet></ROW><ROW><id>8637972</id><snippet>JOINS</snippet></ROW><ROW><id>8637972</id><snippet>In [29]: from django.db.models import Count
In [30]: Photo.objects.filter(tags__in=[t1, t2]).annotate(num_tags=Count('tags')).filter(num_tags=2)
Out[30]: [&lt;Photo: Photo object&gt;]
</snippet></ROW><ROW><id>8637972</id><snippet>In [32]: print Photo.objects.filter(tags__in=[t1, t2]).annotate(num_tags=Count('tags')).filter(num_tags=2).query
SELECT "test_photo"."id", COUNT("test_photo_tags"."tag_id") AS "num_tags"
FROM "test_photo"
LEFT OUTER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")
WHERE ("test_photo_tags"."tag_id" IN (3, 4))
GROUP BY "test_photo"."id", "test_photo"."id"
HAVING COUNT("test_photo_tags"."tag_id") = 2
</snippet></ROW><ROW><id>8637972</id><snippet>AND</snippet></ROW><ROW><id>8637972</id><snippet>Q</snippet></ROW><ROW><id>8637972</id><snippet>In [9]: from django.db.models import Q
In [10]: Photo.objects.filter(Q(tags__name='holiday') &amp; Q(tags__name='summer'))
Out[10]: []
In [11]: from operator import and_
In [12]: Photo.objects.filter(reduce(and_, [Q(tags__name='holiday'), Q(tags__name='summer')]))
Out[12]: []
</snippet></ROW><ROW><id>8637972</id><snippet>In [25]: print Photo.objects.filter(Q(tags__name='holiday') &amp; Q(tags__name='summer')).query
SELECT "test_photo"."id"
FROM "test_photo"
INNER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")
INNER JOIN "test_tag" ON ("test_photo_tags"."tag_id" = "test_tag"."id")
WHERE ("test_tag"."name" = holiday  AND "test_tag"."name" = summer )
</snippet></ROW><ROW><id>8638164</id><snippet>int</snippet></ROW><ROW><id>8638164</id><snippet>try-except</snippet></ROW><ROW><id>8638164</id><snippet>break</snippet></ROW><ROW><id>8638164</id><snippet>while 1:
    line = sys.stdin.readline()
    if line == "":
        break
    n=int(line)
</snippet></ROW><ROW><id>8638164</id><snippet>while 1:
    try:
        line = sys.stdin.readline()
        n = int(line)
        #other stuff
    except:
        break
</snippet></ROW><ROW><id>8638164</id><snippet>NZEC</snippet></ROW><ROW><id>8638213</id><snippet>c = b.copy()
c[...,0] += a
</snippet></ROW><ROW><id>8638503</id><snippet>url = "http://www.locationary.com/access/proxy.jsp?ACTION_TOKEN=proxy_jsp$JspView$SaveAction&amp;inPlaceID=1020634218&amp;xxx_c_1_f_987=http%3A%2F%2Fwww.yellowpages.com%2Fpittsburgh-pa%2Fmip%2Ffamily-dollar-store-1349194%3Flid%3D1349194"
</snippet></ROW><ROW><id>8638503</id><snippet>data=urllib.urlencode({"login":"your login or whatever, "pass":"password}) # be aware you need to change "login" and "pass" to names of fields in form you have.
jar = cookielib.FileCookieJar("cookies")
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))
request = urllib2.Request("url for authentication", data)
opener.open(request) # now you should be authorized and able to send any request like logged in user, using opener

url = "http://www.locationary.com/access/proxy.jsp?ACTION_TOKEN=proxy_jsp$JspView$SaveAction&amp;inPlaceID=1020634218&amp;xxx_c_1_f_987=http%3A%2F%2Fwww.yellowpages.com%2Fpittsburgh-pa%2Fmip%2Ffamily-dollar-store-1349194%3Flid%3D1349194"
anything = opener.open(url)
anything.read()
</snippet></ROW><ROW><id>8638575</id><snippet>for row in matrix</snippet></ROW><ROW><id>8638575</id><snippet>9</snippet></ROW><ROW><id>8638575</id><snippet>0</snippet></ROW><ROW><id>8638575</id><snippet>list.insert(i, v)</snippet></ROW><ROW><id>8638575</id><snippet>v</snippet></ROW><ROW><id>8638575</id><snippet>i</snippet></ROW><ROW><id>8638575</id><snippet>list.tofile()</snippet></ROW><ROW><id>8638575</id><snippet>list.remove(v)</snippet></ROW><ROW><id>8638575</id><snippet>v</snippet></ROW><ROW><id>8638575</id><snippet>for row in matrix</snippet></ROW><ROW><id>8638575</id><snippet>A</snippet></ROW><ROW><id>8638575</id><snippet>J</snippet></ROW><ROW><id>8638575</id><snippet>for row in matrix:
    A = row.count(0)
    B = row.count(1)
    C = row.count(2)
    D = row.count(3)
    E = row.count(4)
    F = row.count(5)
    G = row.count(6)
    H = row.count(7)
    I = row.count(8)
    J = row.count(9)
    print (A)
    if A &gt; 0:
        if B &lt; 1:
            print (B)
</snippet></ROW><ROW><id>8638944</id><snippet>int</snippet></ROW><ROW><id>8638944</id><snippet>long</snippet></ROW><ROW><id>8638944</id><snippet>intern()</snippet></ROW><ROW><id>8639412</id><snippet>segment_scores = (('A', 'B', 'C', 'D'), .99), (('A', 'B', 'C', 'E'), .77) #, ...

def best_score_for(items, segments, subtotal = 1.0):
    if not items: return subtotal
    if not segments: return 0.0
    segment, score = segments[0]
    best_without = best_score_for(items, segments[1:], subtotal)
    return max(
        best_score_for(items.difference(segment), segments[1:], subtotal * score),
        best_without
    ) if items.issuperset(segment) else best_without

best_score_for(set('ABCDEFGHI'), segment_scores) # .430155
</snippet></ROW><ROW><id>8639440</id><snippet>DROPPABLE_MODELS=('test.TestItem:item',)
</snippet></ROW><ROW><id>8639440</id><snippet>from django.contrib.contenttypes.models import ContentType

from django.conf import settings

try:
    #perform this when starting the project
    for definition in settings.DROPPABLE_MODELS:     
        #parse contenttype 
        parsed=definition.split(':')
        dropcode=parsed[1]
        parsed=parsed[0].split('.')
        appname=parsed[0]
        modelname=parsed[1]

        #get the models class for the specified contenttype
        model_class=ContentType(app_label=appname, model=modelname).model_class()

        #create class Mixin, containing the dropcode property
        class DragToTagable:
            dropcode = dropcode

        #add DragToTagable as a base class to the model class
        model_class.__bases__+=(DragToTagable,)

except AttributeError:
    pass

except:
    import sys
    print "Unexpected error:", sys.exc_info()[0]
    raise
</snippet></ROW><ROW><id>8639456</id><snippet>raw_input</snippet></ROW><ROW><id>8639456</id><snippet>number_of_lines</snippet></ROW><ROW><id>8639456</id><snippet>not(number_of_lines.isdigit()) or int(number_of_lines) &gt; 10
</snippet></ROW><ROW><id>8639491</id><snippet>self</snippet></ROW><ROW><id>8639491</id><snippet>self.arguments</snippet></ROW><ROW><id>8639491</id><snippet>_valid_app</snippet></ROW><ROW><id>8639491</id><snippet>MainHandler</snippet></ROW><ROW><id>8639507</id><snippet>M1, M2 = zip(*M)
</snippet></ROW><ROW><id>8639507</id><snippet>M1, M2 = map(list, zip(*M))
</snippet></ROW><ROW><id>8639507</id><snippet>M1, M2 = (list(i) for i in zip(*M))
</snippet></ROW><ROW><id>8639518</id><snippet>Name</snippet></ROW><ROW><id>8639518</id><snippet>Vote.Numeric</snippet></ROW><ROW><id>8639518</id><snippet>Voteid</snippet></ROW><ROW><id>8639518</id><snippet>Voteid</snippet></ROW><ROW><id>8639518</id><snippet>member_to_votes = defaultdict(dict)
for item in vote_data:
    member_to_votes[item['Name']][item['Voteid']] = item['Vote.Numeric']
</snippet></ROW><ROW><id>8639518</id><snippet>def votes_agree(member_a, member_b, threshold):
    # Find the union of issues they voted on...
    issues = set(member_a.keys()).union(member_b.keys())
    # See how many of these they voted the same way on (we use a placeholder
    # if one member did not vote on the issue, so that they automatically
    # disagree) and compare the fraction of agreeing votes to the threshold.
    # There is a little hack in here: `True` is 1 in a numeric context, and
    # `False` is zero, so we can add up the boolean results directly.
    return sum(
        member_a.get(issue, None) == member_b.get(issue, None)
        for issue in issues
    ) / float(len(issues)) &gt;= threshold
</snippet></ROW><ROW><id>8639518</id><snippet>def agreeing_members(member_to_votes, threshold):
    return [
        [a, b] for a, b in itertools.combinations(member_to_votes.keys(), 2)
        if votes_agree(member_to_votes[a], member_to_votes[b], threshold)
    ]
</snippet></ROW><ROW><id>8639852</id><snippet>&gt;&gt;&gt; import cPickle as pkl
&gt;&gt;&gt; import hashlib as hl
&gt;&gt;&gt; s = frozenset([1,2,3])
&gt;&gt;&gt; p = pkl.dumps(sorted(s))  #make sure you use the same pickle protocol on all platform!
'(lp1\nI1\naI2\naI3\na.'
&gt;&gt;&gt; h = hl.md5(p)
&lt;md5 HASH object @ 0xb76fb110&gt;
&gt;&gt;&gt; h.digest()
"\x89\xaeG\x1d'\x83\xa5\xbd\xac\xa7\x1c\xd9\x1d/2t"  #this should be consistent
</snippet></ROW><ROW><id>8639935</id><snippet>datetime</snippet></ROW><ROW><id>8639935</id><snippet>from datetime import timedelta, datetime
...
class FooForm(ModelForm):
    def __init__(self, *args, **kwargs):
        super(FooForm, self).__init__(*args, **kwargs)
        # check if we already have a saved object and it's not older than 180 days
        if self.instance.pk and
                (datetime.now() - self.instance.update_time) &lt; timedelta(180):
            self.fields['first_name'].widget.attrs['readonly'] = True

    class Meta:
        model = Foo
</snippet></ROW><ROW><id>8639935</id><snippet>update_time</snippet></ROW><ROW><id>8639937</id><snippet>exec</snippet></ROW><ROW><id>8639937</id><snippet>import numpy as np
import scipy.special as special

expr='(1+p[1])**(1+p[1])/special.gamma(1+p[1]) * x**p[1]/p[0]**(1+p[1]) * np.exp(-(1+p[1])*x/p[0])'

def make_func(expr):
    funcstr='''\
def f(x,p):
    return {e}
    '''.format(e=expr)
    exec(funcstr)
    return f

f=make_func(expr)
print(f(1,[2,3]))
</snippet></ROW><ROW><id>8639937</id><snippet>0.360894088631
</snippet></ROW><ROW><id>8640034</id><snippet>CGIHTTPServer.CGIHTTPRequestHandler.is_cgi</snippet></ROW><ROW><id>8640034</id><snippet>import CGIHTTPServer

def is_cgi(self):
    if self.path.endswith('.py'):
        self.cgi_info = CGIHTTPServer._url_collapse_path_split(self.path)
        return True
    return False

CGIHTTPServer.CGIHTTPRequestHandler.is_cgi = is_cgi
</snippet></ROW><ROW><id>8640275</id><snippet>QThread: Destroyed while thread is still running
QThread: Destroyed while thread is still running
QThread: Destroyed while thread is still running
QThread: Destroyed while thread is still running
Segmentation fault
</snippet></ROW><ROW><id>8640275</id><snippet>    threads = []
    for download in range(self.num_of_threads):
        t = Url_Download(self.dl_queue, self.md5_queue, is_cli=True)
        t.start()
        threads.append(t)

    for thread in threads:
        thread.wait()
</snippet></ROW><ROW><id>8640275</id><snippet>   main = Crawler(gui_tags, gui_limit, gui_page, gui_booru, gui_savepath, gui_partype, gui_rating, max_threads)
    self.threads = main.start_threads()
    for thread in self.threads:
        self.connect(thread, SIGNAL("fileFinished(QString, int)"), self.onFileFinished, Qt.QueuedConnection)
        self.connect(thread, SIGNAL("allFinished()"), self.onAllFilesFinished, Qt.QueuedConnection)
</snippet></ROW><ROW><id>8640275</id><snippet>class Url_Download(QThread):

    file_finished = pyqtSignal(QString, int, name="fileFinished")        

    def __init__(self, dl_queue, md5_queue, is_cli=False, parent=None):
        QThread.__init__(self, parent)
        self.exiting = False
        self.dl_queue = dl_queue
        self.md5_queue = md5_queue
        self.is_cli = is_cli

    def __del__(self):
        self.exiting = True

     def run(self):
        while not self.exiting:
            try:
                count = 0
                file_url, file_path, md5 = self.dl_queue.get_nowait()
                file_extension = str(file_url)[-4:]
                file_name = md5 + file_extension
                while count &lt; 3:
                    count +=1
                    fetch_url(file_url, file_path, md5)
                    if md5 == hash_sum(file_path):
                       self.md5_queue.put_nowait((md5, file_name))
                       self.file_finished.emit("Test!", 10)
                       break

                if self.is_cli:       
                    if count &gt;= 3:
                        print 'File failed to download, {} might be corrupt.'.format(file_name)       
                    qsize = self.dl_queue.qsize()
                    if qsize &gt; 0:
                        print 'Count Remaining: ', qsize
            except Queue.Empty:
                self.__del__()
            except:
                traceback.print_exc(file=sys.stderr)
                sys.stderr.flush()
</snippet></ROW><ROW><id>8640285</id><snippet>def makeImage (triangle, largura, altura):
    """
    triangle: receives a tuple in the form: x1, y1, x2, y2, x3, y3, R, G, B, A
    largura: image weight
    altura: image height

    returns: numPy array of the triangle composed final image
    """
    back = Image.new('RGBA', (largura,altura), (0,0,0,0))
    poly = Image.new('RGBA', (largura,altura))
    pdraw = ImageDraw.Draw(poly)

    pdraw.polygon([1,2,3,4,5,6], fill=(255,0,0,127))
    back.paste(poly,mask=poly)

    back = back.convert('RGB')
    backArr = asarray(back)
    #back.show()

    return backArr
</snippet></ROW><ROW><id>8640357</id><snippet>Expected '5.0', but got '8'.</snippet></ROW><ROW><id>8640357</id><snippet>slope</snippet></ROW><ROW><id>8640357</id><snippet>def slope (x1, y1, x2, y2):
    x2 = (x2 - x1)
    y2 = (y2 - y1)

    m = (1.0*y2/x2)
    return m
</snippet></ROW><ROW><id>8640357</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8640362</id><snippet>List *create(List **control);
List *control;
List *plist;
plist = create(&amp;control);
</snippet></ROW><ROW><id>8640362</id><snippet>create.argtypes = [POINTER(POINTER(List)),]
create.restype = POINTER(List)
control = POINTER(List)()
newlist = create(byref(control))
</snippet></ROW><ROW><id>8640362</id><snippet>create.argtypes = [POINTER(POINTER(List)),]
control = Pointer(List)()
create(byref(control))
</snippet></ROW><ROW><id>8640362</id><snippet>__enter__</snippet></ROW><ROW><id>8640362</id><snippet>with</snippet></ROW><ROW><id>8640362</id><snippet>__exit__</snippet></ROW><ROW><id>8640362</id><snippet>with</snippet></ROW><ROW><id>8640362</id><snippet>with listManager as ListManager():
    # do stuff with list managed by list manager

# end of with statement, listManager.__exit__ is automatically called, so that Destroy always
# gets called, even if an exception is raised - this is easier for API users than expecting them
# to write their own try-finally code, and put Destroy in the finally block
</snippet></ROW><ROW><id>8640362</id><snippet>~/dev/python$ python
Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; 
&gt;&gt;&gt; class List(Structure): pass
... 
&gt;&gt;&gt; lib = CDLL('./libdll.so')
&gt;&gt;&gt; create = lib.DLL_CreateList
&gt;&gt;&gt; create.argtypes = [POINTER(POINTER(List)),] 
&gt;&gt;&gt; create.restype = POINTER(List) 
&gt;&gt;&gt; 
&gt;&gt;&gt; control = POINTER(List)() 
&gt;&gt;&gt; create(byref(control))
&lt;__main__.LP_List object at 0x7fdc0c607e60&gt;
</snippet></ROW><ROW><id>8640362</id><snippet>from ctypes import *
ll = CDLL("./libdll.so")

# user defined types
class ll_Info(Structure): pass
class ll_DLL_Boolean(Structure): pass
class ll_DLL_SrchOrigin(Structure): pass
class sys_select_fd_set(Structure): pass
class ll_List(Structure): pass
class sys_time_timeval(Structure): pass
class ll_DLL_SrchDir(Structure): pass
class ll_DLL_Return(Structure): pass
class ll_DLL_SearchModes(Structure): pass
class ll_DLL_InsertDir(Structure): pass

# functions
ll.DLL_CreateList.restype = POINTER(ll_List)
ll.DLL_CreateList.argtypes = (POINTER(POINTER(ll_List)),)
ll.DLL_DestroyList.restype = None
ll.DLL_DestroyList.argtypes = (POINTER(POINTER(ll_List)),)
ll.DLL_Version.restype = c_char_p
ll.DLL_Version.argtypes = ()
ll.DLL_IsListEmpty.restype = ll_DLL_Boolean
ll.DLL_IsListEmpty.argtypes = (POINTER(ll_List),)
ll.DLL_IsListFull.restype = ll_DLL_Boolean
ll.DLL_IsListFull.argtypes = (POINTER(ll_List),)
ll.DLL_CurrentPointerToHead.restype = ll_DLL_Return
ll.DLL_CurrentPointerToHead.argtypes = (POINTER(ll_List),)
ll.DLL_CurrentPointerToTail.restype = ll_DLL_Return
ll.DLL_CurrentPointerToTail.argtypes = (POINTER(ll_List),)
ll.DLL_DecrementCurrentPointer.restype = ll_DLL_Return
ll.DLL_DecrementCurrentPointer.argtypes = (POINTER(ll_List),)
ll.DLL_DeleteCurrentRecord.restype = ll_DLL_Return
ll.DLL_DeleteCurrentRecord.argtypes = (POINTER(ll_List),)
ll.DLL_DeleteEntireList.restype = ll_DLL_Return
ll.DLL_DeleteEntireList.argtypes = (POINTER(ll_List),)
ll.DLL_FindNthRecord.restype = ll_DLL_Return
ll.DLL_FindNthRecord.argtypes = (POINTER(ll_List),POINTER(ll_Info),c_ulong,)
ll.DLL_GetCurrentRecord.restype = ll_DLL_Return
ll.DLL_GetCurrentRecord.argtypes = (POINTER(ll_List),POINTER(ll_Info),)
ll.DLL_GetNextRecord.restype = ll_DLL_Return
ll.DLL_GetNextRecord.argtypes = (POINTER(ll_List),POINTER(ll_Info),)
ll.DLL_GetPriorRecord.restype = ll_DLL_Return
ll.DLL_GetPriorRecord.argtypes = (POINTER(ll_List),POINTER(ll_Info),)
ll.DLL_InitializeList.restype = ll_DLL_Return
ll.DLL_InitializeList.argtypes = (POINTER(ll_List),c_size_t,)
ll.DLL_IncrementCurrentPointer.restype = ll_DLL_Return
ll.DLL_IncrementCurrentPointer.argtypes = (POINTER(ll_List),)
ll.DLL_InsertRecord.restype = ll_DLL_Return
ll.DLL_InsertRecord.argtypes = (POINTER(ll_List),POINTER(ll_Info),ll_DLL_InsertDir,)
ll.DLL_RestoreCurrentPointer.restype = ll_DLL_Return
ll.DLL_RestoreCurrentPointer.argtypes = (POINTER(ll_List),)
ll.DLL_SaveList.restype = ll_DLL_Return
ll.DLL_SaveList.argtypes = (POINTER(ll_List),c_char_p,)
ll.DLL_SetSearchModes.restype = ll_DLL_Return
ll.DLL_SetSearchModes.argtypes = (POINTER(ll_List),ll_DLL_SrchOrigin,ll_DLL_SrchDir,)
ll.DLL_StoreCurrentPointer.restype = ll_DLL_Return
ll.DLL_StoreCurrentPointer.argtypes = (POINTER(ll_List),)
ll.DLL_SwapRecord.restype = ll_DLL_Return
ll.DLL_SwapRecord.argtypes = (POINTER(ll_List),ll_DLL_InsertDir,)
ll.DLL_UpdateCurrentRecord.restype = ll_DLL_Return
ll.DLL_UpdateCurrentRecord.argtypes = (POINTER(ll_List),POINTER(ll_Info),)
ll.DLL_GetSearchModes.restype = POINTER(ll_DLL_SearchModes)
ll.DLL_GetSearchModes.argtypes = (POINTER(ll_List),POINTER(ll_DLL_SearchModes),)
ll.DLL_GetCurrentIndex.restype = c_ulong
ll.DLL_GetCurrentIndex.argtypes = (POINTER(ll_List),)
ll.DLL_GetNumberOfRecords.restype = c_ulong
ll.DLL_GetNumberOfRecords.argtypes = (POINTER(ll_List),)
</snippet></ROW><ROW><id>8640498</id><snippet>urlopen</snippet></ROW><ROW><id>8640498</id><snippet>response</snippet></ROW><ROW><id>8640498</id><snippet>html = StringIO.StringIO(response.read())</snippet></ROW><ROW><id>8640615</id><snippet>ax.xaxis.set_ticks_position("top")
</snippet></ROW><ROW><id>8640615</id><snippet>import numpy as np
import matplotlib.pyplot as plt

numdata = 100
t = np.linspace(0, 100, numdata)
y = 1/t**(1/2.0)

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.xaxis.set_ticks_position('top')
ax.yaxis.grid(linestyle = '-', color = 'gray')
ax.invert_yaxis()
ax.plot(t, y, 'g-', linewidth = 1.5)

plt.show()
</snippet></ROW><ROW><id>8640647</id><snippet>a</snippet></ROW><ROW><id>8640647</id><snippet>b</snippet></ROW><ROW><id>8640647</id><snippet>c</snippet></ROW><ROW><id>8640647</id><snippet>flag = False
if a:
    flag = True
    do x
if b:
    flag = True
    do y
if c:
    flag = True
    do z
do (p if flag else q)
</snippet></ROW><ROW><id>8640647</id><snippet>p</snippet></ROW><ROW><id>8640647</id><snippet>x</snippet></ROW><ROW><id>8640647</id><snippet>y</snippet></ROW><ROW><id>8640647</id><snippet>z</snippet></ROW><ROW><id>8640647</id><snippet>doers = [x, y, z]
conditions = [check(el) for el in (a, b, c)]
do (p if any(conditions) else q)
tmp = [doers[i] for i, condition in enumerate(conditions) if condition]
</snippet></ROW><ROW><id>8640647</id><snippet>tmp</snippet></ROW><ROW><id>8640647</id><snippet>for</snippet></ROW><ROW><id>8640731</id><snippet>&gt;&gt;&gt; a = b'76.66\r\n'
&gt;&gt;&gt; float(a)
76.66
</snippet></ROW><ROW><id>8640731</id><snippet>&gt;&gt;&gt; a.strip()
'76.66'
</snippet></ROW><ROW><id>8640901</id><snippet>r"([0-9]+?)\1+"
</snippet></ROW><ROW><id>8641011</id><snippet>collection1.find({'albums': {'$in': [3, 7, 8]}})
</snippet></ROW><ROW><id>8641011</id><snippet>[IN] allow[s] you to specify an array of possible matches</snippet></ROW><ROW><id>8641011</id><snippet>3</snippet></ROW><ROW><id>8641011</id><snippet>7</snippet></ROW><ROW><id>8641011</id><snippet>8</snippet></ROW><ROW><id>8641011</id><snippet>print type(collection1.find_one()['albums'][0])
</snippet></ROW><ROW><id>8641096</id><snippet>if all(x &gt;= 2 for x in (A, B, C, D)):
    print A, B, C, D
</snippet></ROW><ROW><id>8641115</id><snippet>all_match = all(test(x) for x in stuff)
</snippet></ROW><ROW><id>8641115</id><snippet>any_match = any(test(x) for x in stuff)
</snippet></ROW><ROW><id>8641201</id><snippet>self</snippet></ROW><ROW><id>8641201</id><snippet>this</snippet></ROW><ROW><id>8641201</id><snippet>.</snippet></ROW><ROW><id>8641201</id><snippet>-&gt;</snippet></ROW><ROW><id>8641201</id><snippet>self</snippet></ROW><ROW><id>8641455</id><snippet>setup.py</snippet></ROW><ROW><id>8641455</id><snippet>import ropemacs</snippet></ROW><ROW><id>8641455</id><snippet>site-packages</snippet></ROW><ROW><id>8641455</id><snippet>/usr/lib/python2.7/site-packages</snippet></ROW><ROW><id>8641455</id><snippet>C:\Python27\Lib\site-packages</snippet></ROW><ROW><id>8641732</id><snippet>import yaml
from collections import OrderedDict

class quoted(str): pass

def quoted_presenter(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='"')
yaml.add_representer(quoted, quoted_presenter)

class literal(str): pass

def literal_presenter(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
yaml.add_representer(literal, literal_presenter)

def ordered_dict_presenter(dumper, data):
    return dumper.represent_dict(data.items())
yaml.add_representer(OrderedDict, ordered_dict_presenter)

d = OrderedDict(short=quoted("Hello"), long=literal("Line1\nLine2\nLine3\n"))

print(yaml.dump(d))
</snippet></ROW><ROW><id>8641732</id><snippet>short: "Hello"
long: |
  Line1
  Line2
  Line3
</snippet></ROW><ROW><id>8641975</id><snippet>'arg_value'</snippet></ROW><ROW><id>8641975</id><snippet>arg_name='arg_value'</snippet></ROW><ROW><id>8641975</id><snippet># instead of parrot(voltage=5, 'dead'):
parrot(voltage=5, state='dead')

# or:
parrot(5, state='dead')

# or:
parrot(5, 'dead')
</snippet></ROW><ROW><id>8642204</id><snippet>QSplitter.setSizes (self, list-of-int list)
###Sets the child widgets respective sizes to the values given in the list.
</snippet></ROW><ROW><id>8642340</id><snippet>import random
'{0:05}'.format(random.randint(1, 100000))
</snippet></ROW><ROW><id>8642340</id><snippet>'00554'</snippet></ROW><ROW><id>8642404</id><snippet>class PeopleManager(models.Manager):
    def get_male(self):
        return self.filter(sex='M')

    def get_female(self):
        return  return self.filter(sex='F')

class Person(models.Model):
    ....
    objects = PeopleManager()
</snippet></ROW><ROW><id>8642404</id><snippet>Person.objects.get_male()</snippet></ROW><ROW><id>8642404</id><snippet>Person.objects.get_female()</snippet></ROW><ROW><id>8642404</id><snippet>Person.objects.order_by()</snippet></ROW><ROW><id>8642404</id><snippet>django.contrib.auth.models</snippet></ROW><ROW><id>8642404</id><snippet>get_query_set</snippet></ROW><ROW><id>8642404</id><snippet>class SmithManager(PeopleManager):
    def get_queryset(self):
        return super(SmithManager, self).get_query_set().filter(last_name='Smith')
</snippet></ROW><ROW><id>8642404</id><snippet>Person.objects.get_male()</snippet></ROW><ROW><id>8642578</id><snippet>.docx</snippet></ROW><ROW><id>8642629</id><snippet>goto</snippet></ROW><ROW><id>8642629</id><snippet>goto</snippet></ROW><ROW><id>8642629</id><snippet>goto</snippet></ROW><ROW><id>8642629</id><snippet>goto</snippet></ROW><ROW><id>8642629</id><snippet>GotoException</snippet></ROW><ROW><id>8642629</id><snippet>goto</snippet></ROW><ROW><id>8642996</id><snippet>/usr/local/lib/python2.7/site-packages/</snippet></ROW><ROW><id>8642996</id><snippet>pip install --install-option="--prefix=/usr/local/lib/python2.7/site-packages/" django-grapelli
</snippet></ROW><ROW><id>8642996</id><snippet>pip-2.7 install django-grapelli
</snippet></ROW><ROW><id>8642996</id><snippet>pip-2.7</snippet></ROW><ROW><id>8642996</id><snippet>easy_install-2.7</snippet></ROW><ROW><id>8643194</id><snippet>pylab.ginput</snippet></ROW><ROW><id>8643194</id><snippet>myfigure.ginput</snippet></ROW><ROW><id>8643194</id><snippet>axes.imshow</snippet></ROW><ROW><id>8643194</id><snippet>pylab.imshow</snippet></ROW><ROW><id>8643194</id><snippet>pylab.show</snippet></ROW><ROW><id>8643194</id><snippet>from pylab import show, ginput, rand, imshow
from matplotlib.figure import Figure

x1 = rand(103, 53) 
figure = Figure(figsize=(4, 4), dpi=100)
axes = figure.add_subplot(111)

imshow(x1)
x = ginput(2) 
print(x)
show()
</snippet></ROW><ROW><id>8643194</id><snippet>myfigure.ginput()</snippet></ROW><ROW><id>8643194</id><snippet>show</snippet></ROW><ROW><id>8643194</id><snippet>pylab.figure.ginput()</snippet></ROW><ROW><id>8643194</id><snippet>pylab.figure</snippet></ROW><ROW><id>8643194</id><snippet>&gt;&gt;&gt; import pylab
&gt;&gt;&gt; import matplotlib.pyplot as plt 
&gt;&gt;&gt; pylab.figure is plt.figure
True
</snippet></ROW><ROW><id>8643194</id><snippet>matplotlib.figure.Figure</snippet></ROW><ROW><id>8643194</id><snippet>myfigure = matplotlib.figure.Figure()
</snippet></ROW><ROW><id>8643194</id><snippet>pyplot.figure</snippet></ROW><ROW><id>8643194</id><snippet>show()</snippet></ROW><ROW><id>8643194</id><snippet>&gt;&gt;&gt; from matplotlib import pyplot
&gt;&gt;&gt; from matplotlib.figure import Figure
&gt;&gt;&gt; pfig = set(dir(pyplot.figure()))
&gt;&gt;&gt; Ffig = set(dir(Figure()))
&gt;&gt;&gt; pfig.difference(Ffig)
set(['number', 'show'])
</snippet></ROW><ROW><id>8643194</id><snippet>AttributeError</snippet></ROW><ROW><id>8643194</id><snippet>Figure</snippet></ROW><ROW><id>8643378</id><snippet>list(iterator)</snippet></ROW><ROW><id>8643378</id><snippet>len</snippet></ROW><ROW><id>8643410</id><snippet>candidate ** 0.5</snippet></ROW><ROW><id>8643410</id><snippet>range(10**9 - 10**5 ,10**9)</snippet></ROW><ROW><id>8643410</id><snippet>N**0.5</snippet></ROW><ROW><id>8643410</id><snippet>10**5/log(10**9)</snippet></ROW><ROW><id>8643410</id><snippet>10**4.5/log(10**4.5)</snippet></ROW><ROW><id>8643410</id><snippet>1.47*10**7</snippet></ROW><ROW><id>8643410</id><snippet>n</snippet></ROW><ROW><id>8643410</id><snippet>log(n)</snippet></ROW><ROW><id>8643410</id><snippet>10**5*log(10**9)</snippet></ROW><ROW><id>8643410</id><snippet>2*10**6</snippet></ROW><ROW><id>8643410</id><snippet>10**9-10**5</snippet></ROW><ROW><id>8643410</id><snippet>10**9</snippet></ROW><ROW><id>8643410</id><snippet>Ticks: 259987
4832
Divisions: 20353799
4832
</snippet></ROW><ROW><id>8643410</id><snippet>x/log x</snippet></ROW><ROW><id>8643410</id><snippet>x = 10**4.5</snippet></ROW><ROW><id>8643410</id><snippet>n**(1/3)</snippet></ROW><ROW><id>8643626</id><snippet>import glob
import shutil

dest = 'c:/tmp/'

# Get all the files as a list with glob
files = glob.glob('c:/files/*.bin')

# move each file seperatly
for filename in files:
    shutil.move(filename, dest)
</snippet></ROW><ROW><id>8643626</id><snippet>import glob, shutil
for f in glob.glob('c:/files/*.bin'):
    shutil.move(f, 'c:/tmp/')
</snippet></ROW><ROW><id>8644081</id><snippet>import logging.handlers
import smtplib
from threading import Thread

def smtp_at_your_own_leasure(mailhost, port, username, password, fromaddr, toaddrs, msg):
    smtp = smtplib.SMTP(mailhost, port)
    if username:
        smtp.ehlo() # for tls add this line
        smtp.starttls() # for tls add this line
        smtp.ehlo() # for tls add this line
        smtp.login(username, password)
    smtp.sendmail(fromaddr, toaddrs, msg)
    smtp.quit()

class ThreadedTlsSMTPHandler(logging.handlers.SMTPHandler):
    def emit(self, record):
        try:
            import string # for tls add this line
            try:
                from email.utils import formatdate
            except ImportError:
                formatdate = self.date_time
            port = self.mailport
            if not port:
                port = smtplib.SMTP_PORT
            msg = self.format(record)
            msg = "From: %s\r\nTo: %s\r\nSubject: %s\r\nDate: %s\r\n\r\n%s" % (
                            self.fromaddr,
                            string.join(self.toaddrs, ","),
                            self.getSubject(record),
                            formatdate(), msg)
            thread = Thread(target=smtp_at_your_own_leasure, args=(self.mailhost, port, self.username, self.password, self.fromaddr, self.toaddrs, msg))
            thread.start()
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)
</snippet></ROW><ROW><id>8644081</id><snippet>logger = logging.getLogger()

gm = ThreadedTlsSMTPHandler(("smtp.gmail.com", 587), 'bugs@my_company.com', ['admin@my_company.com'], 'Error found!', ('my_company_account@gmail.com', 'top_secret_gmail_password'))
gm.setLevel(logging.ERROR)

logger.addHandler(gm)

try:
    1/0
except:
    logger.exception('FFFFFFFFFFFFFFFFFFFFFFFUUUUUUUUUUUUUUUUUUUUUU-')
</snippet></ROW><ROW><id>8644333</id><snippet>pop</snippet></ROW><ROW><id>8644333</id><snippet>del_ele.append(arr.pop(6))
</snippet></ROW><ROW><id>8644882</id><snippet>print</snippet></ROW><ROW><id>8644882</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>8644882</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>8644882</id><snippet>sys.path</snippet></ROW><ROW><id>8644883</id><snippet>from pysnmp.entity.rfc3413.oneliner import cmdgen

def cbFun(sendRequestHandle, errorIndication, errorStatus, errorIndex,
          varBindTable, cbCtx):
    if errorIndication:
        print(errorIndication)
        return 1
    if errorStatus:
        print(errorStatus.prettyPrint())
        return 1
    for varBindRow in varBindTable:
        for oid, val in varBindRow:
            print('%s = %s' % (oid.prettyPrint(),
                               val and val.prettyPrint() or '?'))

cmdGen  = cmdgen.AsynCommandGenerator()

cmdGen.nextCmd(
    cmdgen.CommunityData('test-agent', 'public'),
    cmdgen.UdpTransportTarget(('localhost', 161)),
    ((1,3,6,1,2,1,1),),
    (cbFun, None)
)

cmdGen.snmpEngine.transportDispatcher.runDispatcher()
</snippet></ROW><ROW><id>8645136</id><snippet>l = [datetime.date(1976, 8, 4), datetime.date(2005, 8, 8), ...] # values_list(flat=True)
today = datetime.date.today()
average_age = sum(map(lambda x: today-x, l), datetime.timedelta(0))/len(l)
</snippet></ROW><ROW><id>8645136</id><snippet>from datetime import date, timedelta
l = [date(1976, 8, 4), date(2005, 8, 8), ...] # values_list(flat=True)
today = date.today()
average_age = sum((today - x for x in l), timedelta(0)) / len(l)
</snippet></ROW><ROW><id>8645326</id><snippet>goodfiles = fnmatch.filter(files, pattern)
badfiles = set(files).difference(goodfiles)
</snippet></ROW><ROW><id>8646065</id><snippet>break</snippet></ROW><ROW><id>8646065</id><snippet>raise</snippet></ROW><ROW><id>8646065</id><snippet>while True:
  try:
    if subprocess_cnt &lt;= max_subprocess:
      try:
        notifier.process_events()
        if notifier.check_events():
          notifier.read_events()
      except KeyboardInterrupt:
        notifier.stop()
        print 'KeyboardInterrupt caught'
        raise  # the exception is re-raised to be caught by the outer try block
    else:
      pass
  except (KeyboardInterrupt, SystemExit):
    print '\nkeyboardinterrupt caught (again)'
    print '\n...Program Stopped Manually!'
    raise
</snippet></ROW><ROW><id>8646065</id><snippet>except</snippet></ROW><ROW><id>8646290</id><snippet>def sub_combinations(segment):
  if len(segment) == 1:
    yield (segment,)
  else:
    for j in sub_combinations(segment[1:]):
      yield (segment[0],)+j
      for k in range(len(j)):
        yield (segment[0]+j[k],)+j[:k]+j[k+1:]
</snippet></ROW><ROW><id>8646290</id><snippet>('A', 'B', 'C', 'D')
('AB', 'C', 'D')
('AC', 'B', 'D')
('AD', 'B', 'C')
('A', 'BC', 'D')
('ABC', 'D')
('AD', 'BC')
('A', 'BD', 'C')
('ABD', 'C')
('AC', 'BD')
('A', 'B', 'CD')
('AB', 'CD')
('ACD', 'B')
('A', 'BCD')
('ABCD',)
</snippet></ROW><ROW><id>8646454</id><snippet>if all(row[3] != 1 for row in matrix):
    # do something
</snippet></ROW><ROW><id>8646454</id><snippet>row[3]</snippet></ROW><ROW><id>8646454</id><snippet>for row in matrix</snippet></ROW><ROW><id>8646454</id><snippet>if</snippet></ROW><ROW><id>8646454</id><snippet>found_one = False
for i in xrange(len(matrix)):
    if matrix[i][3] == 1:
        found_one = True
        break
if found_one:
    # do something
</snippet></ROW><ROW><id>8646454</id><snippet>i</snippet></ROW><ROW><id>8646454</id><snippet>3</snippet></ROW><ROW><id>8646454</id><snippet>if matrix[i][3] == 1:</snippet></ROW><ROW><id>8646454</id><snippet>for</snippet></ROW><ROW><id>8646454</id><snippet>0</snippet></ROW><ROW><id>8646454</id><snippet>xrange(len(matrix))</snippet></ROW><ROW><id>8646524</id><snippet>import re

s = 'STARTabcdENDefSTARTghiEND'
a = 'START'
b = 'END'
out = re.findall(a+'(.+?)'+b, s)
# out: ['abcd', 'ghi']
</snippet></ROW><ROW><id>8646833</id><snippet>groupby</snippet></ROW><ROW><id>8646833</id><snippet>import itertools
import sys

with open('para-lines.txt', 'r') as f:
    paranum = 0
    for is_separator, paragraph in itertools.groupby(f, lambda line: line == '\n'):
        if is_separator:
            # we've reached paragraph separator
            print
        else:
            paranum += 1
            for n, sentence in enumerate(paragraph, start = 1):
                sys.stdout.write(
                    'Para#{i:d},Sent#{n:d}: {s}'.format(
                        i = paranum, n = n, s = sentence))
</snippet></ROW><ROW><id>8647293</id><snippet>&gt;&gt;&gt; idx = s.find('hello') + len('hello')
&gt;&gt;&gt; s[:idx] + s[idx:].replace('hello', '')
'hello this is  stackoverflow '
</snippet></ROW><ROW><id>8647325</id><snippet>db.py</snippet></ROW><ROW><id>8647325</id><snippet>appdb.py</snippet></ROW><ROW><id>8647325</id><snippet>db.py</snippet></ROW><ROW><id>8647325</id><snippet>db.py</snippet></ROW><ROW><id>8647325</id><snippet>db</snippet></ROW><ROW><id>8647325</id><snippet>appadmin</snippet></ROW><ROW><id>8647325</id><snippet>appdb.py</snippet></ROW><ROW><id>8647325</id><snippet>blogdb = DAL('sqlite:\\newblog.db')</snippet></ROW><ROW><id>8647325</id><snippet>appdb.py</snippet></ROW><ROW><id>8647393</id><snippet>    self.figure = Figure()
    self.axe = self.figure.add_subplot(1,1,1)
    G = nx.Graph()
    G.add_node(6)
    pos = nx.spring_layout(G)
    nx.draw(G, pos)
    pyplot.show()
</snippet></ROW><ROW><id>8647865</id><snippet>from BeautifulSoup import BeautifulSoup
import re

hello = """
&lt;pre&gt;
&lt;a href="https://www.redhat.com/security/data/cve/CVE-2010-3718.html"&gt;CVE-2010-3718&lt;/a&gt;
&lt;a href="https://www.redhat.com/security/data/cve/CVE-2010-3710.html"&gt;CVE-2010-3718&lt;/a&gt;
&lt;a href="https://www.redhat.com/security/data/cve/CVE-2010-3700.html"&gt;CVE-2010-3718&lt;/a&gt;
&lt;/pre&gt;
"""

target = re.compile("CVE-\d+-\d+.html")
commentSoup = BeautifulSoup(hello)
atags = commentSoup.findAll(href=target)
for a in atags:
    match = re.findall(target, a['href'])[0]
    print match
</snippet></ROW><ROW><id>8647865</id><snippet>CVE-2010-3718.html
CVE-2010-3710.html
CVE-2010-3700.html
</snippet></ROW><ROW><id>8647914</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>8647914</id><snippet>immediately</snippet></ROW><ROW><id>8647914</id><snippet>from Tkinter import *
import Tkinter

def immediately(e):
    print Lb1.curselection()


top = Tk()

Lb1 = Listbox(top)
Lb1.insert(1, "Python")
Lb1.insert(2, "Perl")
Lb1.insert(3, "C")
Lb1.insert(4, "PHP")
Lb1.insert(5, "JSP")
Lb1.insert(6, "Ruby")

Lb1.pack()


Lb1.bind('&lt;&lt;ListboxSelect&gt;&gt;', immediately)
top.mainloop()
</snippet></ROW><ROW><id>8647997</id><snippet>cdef struct s_intList:
    int    value
    void*  next

ctypedef s_intList intList

cpdef object foo():
    cdef intList li
    li.value = 10
</snippet></ROW><ROW><id>8648171</id><snippet>Derp.objects.using('production').all()
</snippet></ROW><ROW><id>8648176</id><snippet>subprocess.Popen(['python', 'child.exe', pipearg], ...
</snippet></ROW><ROW><id>8648176</id><snippet>subprocess.Popen(['child.exe', pipearg], ...
</snippet></ROW><ROW><id>8648294</id><snippet>import flask
</snippet></ROW><ROW><id>8648294</id><snippet>pkg_resources.require()</snippet></ROW><ROW><id>8648613</id><snippet>people = [
    [['name', 'John'], ['age', 21]],
    [['name', 'Ann'],  ['age', 45]],
    [['name', 'Tom'],  ['age', 32]],
]

for person in people:
  # person is like [['name', 'Ann'],  ['age', 45]] here
  for (name, value) in person:
    # unpack [field_name, field_value] to name = field_name, value = field_value
    # so name is like 'name' (or 'age') and value is like 'Ann' (or 45)
    if name == 'name': print(value)
</snippet></ROW><ROW><id>8648613</id><snippet>person</snippet></ROW><ROW><id>8648613</id><snippet>name</snippet></ROW><ROW><id>8648613</id><snippet>value</snippet></ROW><ROW><id>8648648</id><snippet>list</snippet></ROW><ROW><id>8648648</id><snippet>.append</snippet></ROW><ROW><id>8648648</id><snippet>known_results[i] = record.query_id     
known_results[i][1] = (align.title for align in record.alignment)
</snippet></ROW><ROW><id>8648648</id><snippet>element=(record.query_id, tuple(align.title for align in record.alignment))
known_results.append(element)
</snippet></ROW><ROW><id>8648804</id><snippet>help(gtk.Label.get)</snippet></ROW><ROW><id>8648804</id><snippet>get</snippet></ROW><ROW><id>8648804</id><snippet>Label</snippet></ROW><ROW><id>8648804</id><snippet>help</snippet></ROW><ROW><id>8648896</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import PathPatch

x = np.arange(0.0, 2, 0.01)
y1 = np.sin(2*np.pi*x)
y2 = 1.2*np.sin(4*np.pi*x)

fig, ax = plt.subplots()
pc = ax.fill_betweenx(x, 0, y1, color='blue')

# Now we'll add the hatches...
for path in pc.get_paths():
    patch = PathPatch(path, hatch='/', facecolor='none')
    ax.add_patch(patch)

plt.show()
</snippet></ROW><ROW><id>8648897</id><snippet>dir()</snippet></ROW><ROW><id>8648897</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>8648897</id><snippet>None</snippet></ROW><ROW><id>8648897</id><snippet>dir()</snippet></ROW><ROW><id>8648897</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>8648897</id><snippet>dir()</snippet></ROW><ROW><id>8648897</id><snippet>dir()</snippet></ROW><ROW><id>8648897</id><snippet>dir()</snippet></ROW><ROW><id>8648897</id><snippet>sysdir = dir(sys)
</snippet></ROW><ROW><id>8648897</id><snippet>for n in dir(sys):
    # do something
</snippet></ROW><ROW><id>8648897</id><snippet>print dir(sys)    # Python 3 requires print(dir(sys))
</snippet></ROW><ROW><id>8649029</id><snippet>import tarfile
import StringIO
import time

tar = tarfile.TarFile("test.tar", "w")

string = StringIO.StringIO()
string.write("hello")
string.seek(0)

info = tarfile.TarInfo(name='dir')
info.type = tarfile.DIRTYPE
info.mode = 0755
info.mtime = time.time()
tar.addfile(tarinfo=info)

info = tarfile.TarInfo(name='dir/foo')
info.size=len(string.buf)
info.mtime = time.time()
tar.addfile(tarinfo=info, fileobj=string)

tar.close()
</snippet></ROW><ROW><id>8649029</id><snippet>mode</snippet></ROW><ROW><id>8649257</id><snippet>signals:</snippet></ROW><ROW><id>8649257</id><snippet>slots:</snippet></ROW><ROW><id>8649274</id><snippet>V</snippet></ROW><ROW><id>8649274</id><snippet>13057*13057*8</snippet></ROW><ROW><id>8649274</id><snippet>dtype=np.float</snippet></ROW><ROW><id>8649274</id><snippet>dtype=np.float32</snippet></ROW><ROW><id>8649274</id><snippet>scipy.sparse</snippet></ROW><ROW><id>8649372</id><snippet>urlpatterns = patterns('',
    (r'^$',index),
    )
</snippet></ROW><ROW><id>8649372</id><snippet>index</snippet></ROW><ROW><id>8649372</id><snippet>request</snippet></ROW><ROW><id>8649875</id><snippet>__dict__</snippet></ROW><ROW><id>8649875</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; str = 'getcwd()'
&gt;&gt;&gt; eval(str,os.__dict__)
</snippet></ROW><ROW><id>8649986</id><snippet>val1 = defaultdict(list)
for k in dic1:
    for v in dic1[k]:
        val[v].append( k )
# val1 is a dictionary with each value mapped to the list of keys that contain that value.

for k in dic2: 
    for v in dic2[k]:
        val1[v] is the list of all keys in dic1 that have this value
</snippet></ROW><ROW><id>8650220</id><snippet>from pyramid.execptions import NotFound
</snippet></ROW><ROW><id>8650220</id><snippet>from pyramid.exceptions import NotFound
#              ^^
</snippet></ROW><ROW><id>8650220</id><snippet>source bin/activate</snippet></ROW><ROW><id>8650220</id><snippet>sys.path</snippet></ROW><ROW><id>8650437</id><snippet>dict((v,k) for k, v in map.iteritems())
</snippet></ROW><ROW><id>8650555</id><snippet>__cmp__()</snippet></ROW><ROW><id>8650555</id><snippet>__lt__()</snippet></ROW><ROW><id>8650555</id><snippet>id()</snippet></ROW><ROW><id>8650633</id><snippet>https://store.steampowered.com/join/</snippet></ROW><ROW><id>8650633</id><snippet>&lt;input type="hidden" id="captchagid" name="captchagid" value="(.+)"&gt;</snippet></ROW><ROW><id>8650633</id><snippet>https://store.steampowered.com/public/captcha.php?gid=&lt;gid&gt;</snippet></ROW><ROW><id>8650633</id><snippet>https://store.steampowered.com/join/createaccount/</snippet></ROW><ROW><id>8650633</id><snippet>    accountname=&lt;name&gt;&amp;password=&lt;password&gt;&amp;email=&lt;email&gt;&amp;challenge_question=&lt;question&gt;&amp;secret_answer=&lt;secretansewer&gt;&amp;captchagid=&lt;gid&gt;captcha_text=&lt;captch_text&gt;&amp;i_agree=1&amp;ticket=&amp;count=4
</snippet></ROW><ROW><id>8650741</id><snippet>import numpy as np

a, b = 1, 1
n = 7
r = 3

y,x = np.ogrid[-a:n-a, -b:n-b]
mask = x*x + y*y &lt;= r*r

array = np.ones((n, n))
array[mask] = 255
</snippet></ROW><ROW><id>8651171</id><snippet>&gt;&gt;&gt; a = "asd foo bar ( lol bla ( gee bee ) lee ) ree"
&gt;&gt;&gt; eval(str(a.split()).replace("'(',", '[').replace("')'",']'))
['asd', 'foo', 'bar', ['lol', 'bla', ['gee', 'bee'], 'lee'], 'ree']
</snippet></ROW><ROW><id>8651171</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>8651384</id><snippet>     re.findall('\d\d', '123456')
</snippet></ROW><ROW><id>8651384</id><snippet>['12', '34', '56']</snippet></ROW><ROW><id>8651428</id><snippet>yes</snippet></ROW><ROW><id>8651428</id><snippet> $ yes &gt; /path/to/my/device/yes.txt
</snippet></ROW><ROW><id>8651428</id><snippet>head</snippet></ROW><ROW><id>8651428</id><snippet> $ yes | head -n1000000 &gt; /path/to/my/device/yes.txt
</snippet></ROW><ROW><id>8651428</id><snippet>yes</snippet></ROW><ROW><id>8651429</id><snippet>templatetag</snippet></ROW><ROW><id>8651429</id><snippet>tips = Tips.objects.filter(my_filters)
user_favorite_tips = request.user.favoritedtip_set.values_list('pk', flat=True)
tips = [{'tip': tip, 
         'is_favorite': tip.pk in user_favorite_tips and True or False}
         for tip in tips]
</snippet></ROW><ROW><id>8651429</id><snippet>&lt;ul&gt;
{% for tip in tips %}
    &lt;li&gt;{{ tip.tip.as_html }} 
        {% if tip.is_favorite %} &lt;img src="star.png" /&gt;{% endif %}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>8651690</id><snippet>sympy</snippet></ROW><ROW><id>8651690</id><snippet>from sympy import pretty_print as pp, latex
from sympy.abc import a, b, n

expr = (a*b)**n
pp(expr) # default
pp(expr, use_unicode=True)
print(latex(expr))
print(expr.evalf(subs=dict(a=2,b=4,n=5)))
</snippet></ROW><ROW><id>8651690</id><snippet>     n
(a*b) 
     n
(a⋅b) 
$\left(a b\right)^{n}$
32768.0000000000
</snippet></ROW><ROW><id>8651722</id><snippet>if</snippet></ROW><ROW><id>8651722</id><snippet>'ROLL'</snippet></ROW><ROW><id>8651722</id><snippet>print('Type ROLL to roll for your stats')

roll = input ()
if roll == 'ROLL':
    .......
</snippet></ROW><ROW><id>8651756</id><snippet>def __init__(self):
    handlers = [
        (r"/", home.HomeHandler),
        (r"/products/list/([0-9]+)", product.ProductHandler)
        (r"/products/find/([0-9]+)", product.ProductHandler)
        (r"/products/copy/([0-9]+)", product.ProductHandler)
        (r"/products/(\w+)/(\w+)/(\w+)", product.ProductHandler)]
</snippet></ROW><ROW><id>8651756</id><snippet>def __init__(self):
    handlers = [
        (r"/", home.HomeHandler),
        (r"/products/list/(.*)", product.ProductHandler)
</snippet></ROW><ROW><id>8651813</id><snippet>itertools.permutations</snippet></ROW><ROW><id>8651813</id><snippet>&gt;&gt;&gt; list(itertools.permutations("abc"))
[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]
</snippet></ROW><ROW><id>8651956</id><snippet>pickle</snippet></ROW><ROW><id>8651956</id><snippet>__dict__</snippet></ROW><ROW><id>8651956</id><snippet>__setstate__()</snippet></ROW><ROW><id>8651956</id><snippet>pickle</snippet></ROW><ROW><id>8652013</id><snippet>help(os.system)</snippet></ROW><ROW><id>8652013</id><snippet>system(...)
    system(command) -&gt; exit_status

    Execute the command (a string) in a subshell.
</snippet></ROW><ROW><id>8652013</id><snippet>command</snippet></ROW><ROW><id>8652013</id><snippet>exit_status</snippet></ROW><ROW><id>8652013</id><snippet>0</snippet></ROW><ROW><id>8652013</id><snippet>if os.system(zip_command) == 0:
</snippet></ROW><ROW><id>8652079</id><snippet>range</snippet></ROW><ROW><id>8652079</id><snippet>def my_range(start, end, how_many):
    incr = float(end - start)/how_many
    return [start + i*incr for i in range(how_many)]
</snippet></ROW><ROW><id>8652079</id><snippet>range</snippet></ROW><ROW><id>8652079</id><snippet>&gt;&gt;&gt; for i in my_range(0, 1, 10):
...     print i
... 
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
</snippet></ROW><ROW><id>8652079</id><snippet>start</snippet></ROW><ROW><id>8652079</id><snippet>end</snippet></ROW><ROW><id>8652079</id><snippet>my_range</snippet></ROW><ROW><id>8652079</id><snippet>def my_range(start, end, how_many):
    incr = float(end - start)/(how_many - 1)
    return [start + i*incr for i in range(how_many-1)] + [end]
</snippet></ROW><ROW><id>8652079</id><snippet>&gt;&gt;&gt; for i in my_range(0, 1, 10):
...   print i
... 
0.0
0.111111111111
0.222222222222
0.333333333333
0.444444444444
0.555555555556
0.666666666667
0.777777777778
0.888888888889
1
</snippet></ROW><ROW><id>8652092</id><snippet>#!/usr/bin/env python
from contextlib import closing
from selenium.webdriver import Firefox # pip install selenium

url = "http://example.com"

# use firefox to get page with javascript generated content
with closing(Firefox()) as browser:
    n = 1
    while n &lt; 10:
        browser.get(url) # load page
        link = browser.find_element_by_link_text(str(n))
        while link:
           browser.get(link.get_attribute("href")) # get individual 1,2,3,4 pages
           #### save(browser.page_source)
           browser.back() # return to page that has 1,2,3,next -like links
           n += 1
           link = browser.find_element_by_link_text(str(n))

        link = browser.find_element_by_link_text("next")
        if not link: break
        url = link.get_attribute("href")
</snippet></ROW><ROW><id>8652153</id><snippet>lambda arg1, arg2: function(arg1, arg2)
</snippet></ROW><ROW><id>8652198</id><snippet>print</snippet></ROW><ROW><id>8652198</id><snippet>None</snippet></ROW><ROW><id>8652198</id><snippet>while True</snippet></ROW><ROW><id>8652198</id><snippet>while 1</snippet></ROW><ROW><id>8652198</id><snippet>input()</snippet></ROW><ROW><id>8652198</id><snippet>roll = input('Type ROLL to roll for your stats.)</snippet></ROW><ROW><id>8652198</id><snippet>no</snippet></ROW><ROW><id>8652198</id><snippet>NO</snippet></ROW><ROW><id>8652198</id><snippet>if reroll.lower() == 'no'</snippet></ROW><ROW><id>8652206</id><snippet>references = map(__import__, modules)
</snippet></ROW><ROW><id>8652206</id><snippet>references = dict(zip(modules, map(__import__, modules)))
</snippet></ROW><ROW><id>8652799</id><snippet>import subprocess
import sys

s = "test"
p = subprocess.Popen([sys.executable, "child.py"],
                     stdin=subprocess.PIPE,
                     stdout=subprocess.PIPE)
out, _ = p.communicate(s.encode())
print(out.decode())
</snippet></ROW><ROW><id>8652799</id><snippet>s = input()
s = s.upper()
print(s)
</snippet></ROW><ROW><id>8652889</id><snippet>class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            return float(o)
        super(DecimalEncoder, self).default(o)

# and then:
json.dumps(chart_list,..., cls=DecimalEncoder)
</snippet></ROW><ROW><id>8652889</id><snippet>from django.core.serializers.json import DjangoJSONEncoder
json.dumps(chart_list,..., cls=DjangoJSONEncoder)
</snippet></ROW><ROW><id>8652904</id><snippet>import xlrd; print xlrd.__file__</snippet></ROW><ROW><id>8652969</id><snippet>np.sum</snippet></ROW><ROW><id>8652969</id><snippet>axis</snippet></ROW><ROW><id>8652969</id><snippet>sums3 = np.sum(x, axis=1)
</snippet></ROW><ROW><id>8652969</id><snippet>$ python -m timeit -n 1 -r 1 -s "import numpy as np;x=np.ones([100000,3])" "np.apply_along_axis(np.sum, 1, x)"
1 loops, best of 1: 3.21 sec per loop

$ python -m timeit -n 1 -r 1 -s "import numpy as np;x=np.ones([100000,3])" "np.array([np.sum(x[i,:]) for i in range(x.shape[0])])"
1 loops, best of 1: 712 msec per loop

$ python -m timeit -n 1 -r 1 -s "import numpy as np;x=np.ones([100000,3])" "np.sum(x, axis=1)"
1 loops, best of 1: 1.81 msec per loop
</snippet></ROW><ROW><id>8652969</id><snippet>apply_along_axis</snippet></ROW><ROW><id>8653021</id><snippet>from django.core.cache import cache

cached = cache.get('temp_entries')
if cached:
    result = cached 
else:
    result = Temp_entry.objects.filter(sensor=49).order_by('dateTime').reverse().values_list()[:300]
    cache.set('temp_entries', result, 60*20)  # 20 min
</snippet></ROW><ROW><id>8653021</id><snippet>class Temp_entry(models.Model):
    dateTime = models.IntegerField(db_index=True) #datetime
    sensor = models.IntegerField(db_index=True)   # id of sensor
    temp = models.IntegerField()     # temp as temp in Kelvin * 100
</snippet></ROW><ROW><id>8654002</id><snippet>:</snippet></ROW><ROW><id>8654002</id><snippet>for num in range(1,100):
   if num%3==0 and num%7==0:
      print "Fast Car"
   elif num%3==0:
      print"Fast"
   elif num%7==0:
      print "Car"
   else:
      print num
</snippet></ROW><ROW><id>8654076</id><snippet>APPEND_SLASH</snippet></ROW><ROW><id>8654076</id><snippet>APPEND_SLASH = False</snippet></ROW><ROW><id>8654076</id><snippet>/life/?ret=12344/</snippet></ROW><ROW><id>8654667</id><snippet>dict((k,v) for k,v in parent_dict.iteritems() if 2 &lt; k &lt; 4)
</snippet></ROW><ROW><id>8655544</id><snippet>from collections import defaultdict

def determine_types(args, kwargs):
    return tuple([type(a) for a in args]), \
           tuple([(k, type(v)) for k,v in kwargs.iteritems()])

function_table = defaultdict(dict)
def overload(arg_types=(), kwarg_types=()):
    def wrap(func):
        named_func = function_table[func.__name__]
        named_func[arg_types, kwarg_types] = func
        def call_function_by_signature(*args, **kwargs):
            return named_func[determine_types(args, kwargs)](*args, **kwargs)
        return call_function_by_signature
    return wrap
</snippet></ROW><ROW><id>8655544</id><snippet>overload</snippet></ROW><ROW><id>8655544</id><snippet>&gt;&gt;&gt; @overload((str, int))
... def f(a, b):
...     return a * b

&gt;&gt;&gt; @overload((int, int))
... def f(a, b):
...     return a + b

&gt;&gt;&gt; print f('a', 2)
aa
&gt;&gt;&gt; print f(4, 2)
6

&gt;&gt;&gt; @overload((str,), (('foo', int), ('bar', float)))
... def g(a, foo, bar):
...     return foo*a + str(bar)

&gt;&gt;&gt; @overload((str,), (('foo', float), ('bar', float)))
... def g(a, foo, bar):
...     return a + str(foo*bar)

&gt;&gt;&gt; print g('a', foo=7, bar=4.4)
aaaaaaa4.4
&gt;&gt;&gt; print g('b', foo=7., bar=4.4)
b30.8
</snippet></ROW><ROW><id>8655544</id><snippet>@overload((str, int))
def h():
    return 0
</snippet></ROW><ROW><id>8655544</id><snippet>g('a', 7, bar=4.4)
</snippet></ROW><ROW><id>8655544</id><snippet>g</snippet></ROW><ROW><id>8655851</id><snippet>extend</snippet></ROW><ROW><id>8655851</id><snippet> a = [1,2,3]
 a.extend([4,5])
 print a
</snippet></ROW><ROW><id>8655851</id><snippet>list.pop()</snippet></ROW><ROW><id>8655851</id><snippet>list.__add__()</snippet></ROW><ROW><id>8655971</id><snippet>integral = integrate.simps(y*x*2*pi,x)
</snippet></ROW><ROW><id>8655971</id><snippet>y</snippet></ROW><ROW><id>8655971</id><snippet>x</snippet></ROW><ROW><id>8655971</id><snippet>2*pi*x</snippet></ROW><ROW><id>8656293</id><snippet>def eventFilter(self, tableView, event): 
    if event.type() == QtCore.QEvent.KeyPress: 
        key = event.key() 
        if event.modifiers() in (QtCore.Qt.NoModifier, QtCore.Qt.KeypadModifier): 
            if key in (QtCore.Qt.Key_Enter, QtCore.Qt.Key_Return): 
                self.menu.editItem.trigger() 
                return True
</snippet></ROW><ROW><id>8656293</id><snippet>QtCore.QEvent.KeyPress</snippet></ROW><ROW><id>8656293</id><snippet>def eventFilter(self, tableView, event,
    FILTER_EVENT_TYPE=QtCore.QEvent.KeyPress
    ): 
    if event.type() == FILTER_EVENT_TYPE: 
        if event.modifiers() in (QtCore.Qt.NoModifier, QtCore.Qt.KeypadModifier): 
            key = event.key() 
            if key in (QtCore.Qt.Key_Enter, QtCore.Qt.Key_Return): 
                self.menu.editItem.trigger() 
                return True
</snippet></ROW><ROW><id>8656293</id><snippet>QtCore.QEvent.KeyPress</snippet></ROW><ROW><id>8656293</id><snippet>def eventFilter(self, tableView, event,
    FILTER_EVENT_TYPE=QtCore.QEvent.KeyPress
    FILTER_MODIFIERS=(QtCore.Qt.NoModifier, QtCore.Qt.KeypadModifier),
    FILTER_KEYS=(QtCore.Qt.Key_Enter, QtCore.Qt.Key_Return)
    ): 
    if (event.type() == FILTER_EVENT_TYPE and
        event.modifiers() in FILTER_MODIFIERS and 
        event.key() in FILTER_KEYS): 
            self.menu.editItem.trigger() 
            return True
</snippet></ROW><ROW><id>8656293</id><snippet>in</snippet></ROW><ROW><id>8656293</id><snippet>def eventFilter(self, tableView, event,
    FILTER_EVENT_TYPE=QtCore.QEvent.KeyPress
    FILTER_KEY_MODIFIERS=((QtCore.Qt.Key_Return, QtCore.Qt.NoModifier),
                          (QtCore.Qt.Key_Enter, QtCore.Qt.KeypadModifier),
                          )
    ): 
    if (event.type() == FILTER_EVENT_TYPE and
        (event.key(), event.modifiers()) in FILTER_KEY_MODIFIERS): 
            self.menu.editItem.trigger() 
            return True
</snippet></ROW><ROW><id>8656383</id><snippet>inspect</snippet></ROW><ROW><id>8656383</id><snippet>inspect.ismethod()</snippet></ROW><ROW><id>8656383</id><snippet>inspect.isfunction()</snippet></ROW><ROW><id>8656383</id><snippet>im_class</snippet></ROW><ROW><id>8656383</id><snippet>inspect.getmro()</snippet></ROW><ROW><id>8656501</id><snippet>s = 'first - second - third'
</snippet></ROW><ROW><id>8656501</id><snippet>s.replace(' - second - ', '')
</snippet></ROW><ROW><id>8656501</id><snippet>''.join(s.split(' - ')[::2])
</snippet></ROW><ROW><id>8656501</id><snippet>''.join(s.split(' - second - '))
</snippet></ROW><ROW><id>8656501</id><snippet>s[:5] + s[-5:]
</snippet></ROW><ROW><id>8656501</id><snippet>s[:s.index(' ')] + s[s.rindex(' ')+1:]
</snippet></ROW><ROW><id>8656501</id><snippet>'firstthird'</snippet></ROW><ROW><id>8656787</id><snippet>&gt;&gt;&gt; elements = doc.cssselect('div.results dl dt a')
</snippet></ROW><ROW><id>8656787</id><snippet>&gt;&gt;&gt; for element in elements:
...     print element.get('href')
... 
/link 1
/link 2
</snippet></ROW><ROW><id>8656787</id><snippet>&gt;&gt;&gt; [element.get('href') for element in elements]
['/link 1', '/link 2']
</snippet></ROW><ROW><id>8656807</id><snippet>cmp</snippet></ROW><ROW><id>8656807</id><snippet>P = Property
myList = [P(0), P(2.3), P(4), P(0,2)]

# or...

def createPropertyList(*args):
    return [Property(x) for x in args]

myList = createPropertyList(0,2.3,4,(0,2))
</snippet></ROW><ROW><id>8656910</id><snippet>sudo</snippet></ROW><ROW><id>8656910</id><snippet>sudo python scriptname</snippet></ROW><ROW><id>8657514</id><snippet>--prefix</snippet></ROW><ROW><id>8657514</id><snippet>$ mkdir -p ~/applications/src
$ cd ~/applications/src
$ wget http://www.sqlite.org/sqlite-autoconf-3070900.tar.gz
$ tar xvvf sqlite-autoconf-3070900.tar.gz
$ cd sqlite-autoconf-3070900
$ ./configure --prefix=~/applications
$ make
$ make install

$ cd ~/applications/src
$ wget http://www.python.org/ftp/python/2.5.2/Python-2.5.2.tgz
$ tar xvvf Python-2.5.2.tgz
$ cd Python-2.5.2
$ ./configure --prefix=~/applications
$ make
$ make install

$ ~/applications/bin/python
&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; # no error!
</snippet></ROW><ROW><id>8657668</id><snippet>import numpy as np

a = np.array([(1, 23), (2, 42), (3.5, 89), (5, 73), (7, 54), (8, 41), (8.5, 37), (9, 23)])

x = np.arange(1, 10) # target x values

b = zip(x, np.interp(x, a[:,0], a[:,1]))

# b == [(1, 23.0),
#       (2, 42.0),
#       (3, 73.333333333333329),
#       (4, 83.666666666666671),
#       (5, 73.0),
#       (6, 63.5),
#       (7, 54.0),
#       (8, 41.0),
#       (9, 23.0)]
</snippet></ROW><ROW><id>8657718</id><snippet>r.match(domain)</snippet></ROW><ROW><id>8657718</id><snippet>matches = [r.match(domain) for r in (first_re, second_re, third_re) if r.match(domain)]
</snippet></ROW><ROW><id>8657718</id><snippet>matches = [a for a in (r.match(domain) for r in (first_re, second_re, third_re)) if a]
</snippet></ROW><ROW><id>8657731</id><snippet>sed -i 's/assert /pass #assert /g' script.py
</snippet></ROW><ROW><id>8657731</id><snippet>return</snippet></ROW><ROW><id>8657731</id><snippet>assert x; return True
</snippet></ROW><ROW><id>8657731</id><snippet>tokenize</snippet></ROW><ROW><id>8657731</id><snippet>script.py</snippet></ROW><ROW><id>8657731</id><snippet>import script
</snippet></ROW><ROW><id>8657731</id><snippet>python -O temp.py</snippet></ROW><ROW><id>8657731</id><snippet>script.pyo</snippet></ROW><ROW><id>8657731</id><snippet>script.py</snippet></ROW><ROW><id>8657731</id><snippet>script.pyc</snippet></ROW><ROW><id>8657731</id><snippet>script.pyo</snippet></ROW><ROW><id>8657731</id><snippet>script.pyc</snippet></ROW><ROW><id>8657731</id><snippet>pyc</snippet></ROW><ROW><id>8657731</id><snippet>script.py</snippet></ROW><ROW><id>8657731</id><snippet>assert False
print('Got here')
</snippet></ROW><ROW><id>8657731</id><snippet>python temp.py</snippet></ROW><ROW><id>8657731</id><snippet>Got here</snippet></ROW><ROW><id>8657771</id><snippet>text1 = [alphabet[bisect.bisect(f_list, random.random())] for i in xrange(300)]
</snippet></ROW><ROW><id>8658003</id><snippet>datetime.datetime.today()</snippet></ROW><ROW><id>8658003</id><snippet>import time
from subprocess import Popen
from datetime import datetime
jobs = []
max_life = 600 # in seconds

def reap_jobs(jobs):
  now = datetime.datetime.today()
  for job in jobs:
    if job[0] &lt; now - datetime.timedelta(seconds=max_life)
      job[1].kill()
      # remove the job from the list if you want. 
      # but remember not to do it while iterating over the list

for video in list_of_videos:
  time = datetime.datetime.today()
  job = Popen(...)
  jobs.append((time,child))

while True:
  reap_jobs(jobs)
  time.sleep(60)
</snippet></ROW><ROW><id>8658332</id><snippet>sys.modules['B']</snippet></ROW><ROW><id>8658332</id><snippet>A</snippet></ROW><ROW><id>8658332</id><snippet>import sys
sys.modules['B'] = __import__('mock_B')
import A

print(A.B.__name__)
</snippet></ROW><ROW><id>8658332</id><snippet>import B
</snippet></ROW><ROW><id>8658332</id><snippet>test.py</snippet></ROW><ROW><id>8658332</id><snippet>print(A.B.__name__)</snippet></ROW><ROW><id>8658332</id><snippet>mock_B</snippet></ROW><ROW><id>8658332</id><snippet>mock_B.py</snippet></ROW><ROW><id>8658332</id><snippet>import sys
sys.modules['B'] = Mock()
import A
</snippet></ROW><ROW><id>8658359</id><snippet>cd myProject
git init
git submodule add git://path/to/repo.git local/location/repo
</snippet></ROW><ROW><id>8658359</id><snippet>git pull</snippet></ROW><ROW><id>8658359</id><snippet>import os
os.system("cd path/to/repo &amp;&amp; git pull")
</snippet></ROW><ROW><id>8658413</id><snippet>class Person:
    def __init__(self, name):
        self.name = name
    def sayHi(self):
        print 'Hello, my name is', self.name
</snippet></ROW><ROW><id>8658413</id><snippet>__init__</snippet></ROW><ROW><id>8658413</id><snippet>name</snippet></ROW><ROW><id>8658413</id><snippet>name</snippet></ROW><ROW><id>8658413</id><snippet>self</snippet></ROW><ROW><id>8658413</id><snippet>self</snippet></ROW><ROW><id>8658413</id><snippet>p=Person('Swaroop')</snippet></ROW><ROW><id>8658413</id><snippet>sayHi</snippet></ROW><ROW><id>8658413</id><snippet>ecx</snippet></ROW><ROW><id>8658450</id><snippet>conn = S3Connection(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
bucket = conn.create_bucket(store.domain_name)
bucket.set_acl('public-read')
bucket.configure_website('index.html', 'error.html')

for template in ['index.html', 'contact-us.html', 'cart.html', 'checkout.html']:
    k = bucket.new_key(template)
    k.set_metadata('Content-Type', 'text/html')
    k.set_contents_from_string(get_page_contents(template))
    k.set_acl('public-read') #doing this last seems to be important for some reason
</snippet></ROW><ROW><id>8659015</id><snippet>bash</snippet></ROW><ROW><id>8659015</id><snippet>#!/usr/bin/env python

def get_header():
    return (None, None, None)

print get_header()
</snippet></ROW><ROW><id>8659123</id><snippet>import itertools
lol = [[1,2,3],[4,5,6],[7,8,9]]
result = list()
while lol:
    l=lol.pop(0)
    o=itertools.chain(*lol)
    result += itertools.product( l,o )
</snippet></ROW><ROW><id>8659159</id><snippet>ghmm</snippet></ROW><ROW><id>8659159</id><snippet>ghmm</snippet></ROW><ROW><id>8659159</id><snippet>rand</snippet></ROW><ROW><id>8659159</id><snippet>initstate()</snippet></ROW><ROW><id>8659162</id><snippet>index</snippet></ROW><ROW><id>8659162</id><snippet>numbers = [2, 3, 17, 1, 42]
if 1 in numbers:
    index = numbers.index(1)
    # Do something interesting
</snippet></ROW><ROW><id>8659162</id><snippet>ValueError</snippet></ROW><ROW><id>8659162</id><snippet>index</snippet></ROW><ROW><id>8659162</id><snippet>numbers = [2, 3, 17, 1, 42]
try:
    index = numbers.index(1)
except ValueError:
    # The number isn't here
    pass
else:
    # Do something interesting
</snippet></ROW><ROW><id>8659162</id><snippet>list</snippet></ROW><ROW><id>8659162</id><snippet>list</snippet></ROW><ROW><id>8659251</id><snippet>class ParseCall(ast.NodeVisitor):
    def __init__(self):
        self.ls = []
    def visit_Attribute(self, node):
        ast.NodeVisitor.generic_visit(self, node)
        self.ls.append(node.attr)
    def visit_Name(self, node):
        self.ls.append(node.id)


class FindFuncs(ast.NodeVisitor):
    def visit_Call(self, node):
        p = ParseCall()
        p.visit(node.func)
        print ".".join(p.ls)
        ast.NodeVisitor.generic_visit(self, node)


code = 'something = a.b.method(foo() + xtime.time(), var=1) + q.y(x.m())'
tree = ast.parse(code)
FindFuncs().visit(tree)
</snippet></ROW><ROW><id>8659251</id><snippet>a.b.method
foo
xtime.time
q.y
x.m
</snippet></ROW><ROW><id>8659276</id><snippet>system("python", "/my/script.py") == 0 or die "Python script returned error $?";
</snippet></ROW><ROW><id>8659276</id><snippet>open(my $py, "|-", "python2 /my/script.py") or die "Cannot run Python script: $!";
while (&lt;$py&gt;) {
  # do something with the input
}
close($py);
</snippet></ROW><ROW><id>8659333</id><snippet>subprocess</snippet></ROW><ROW><id>8659333</id><snippet>import subprocess
output = subprocess.check_output("cat syscall_list.txt | grep f89e7000 | awk '{print $2}'", shell=True)
</snippet></ROW><ROW><id>8659333</id><snippet>import subprocess
output = subprocess.Popen(['awk', '/f89e7000/ {print $2}', 'syscall_list.txt'], stdout=subprocess.PIPE).communicate()[0]
</snippet></ROW><ROW><id>8659333</id><snippet>cat syscall_list.txt | grep f89e7000
</snippet></ROW><ROW><id>8659333</id><snippet>grep f89e7000 syscall_list.txt
</snippet></ROW><ROW><id>8659333</id><snippet>awk</snippet></ROW><ROW><id>8659333</id><snippet>awk '/f89e7000/ {print $2}' syscall_list.txt
</snippet></ROW><ROW><id>8659333</id><snippet>import subprocess
output = subprocess.check_output(['awk', '/f89e7000/ {print $2}', 'syscall_list.txt'])
</snippet></ROW><ROW><id>8659369</id><snippet>import sys
from multiprocessing.connection import Listener, Client

address = ('localhost', 6000)

def client():
    conn = Client(address, authkey='secret password')
    print conn.recv_bytes()
    conn.close()

def server():
    listener = Listener(address, authkey='secret password')
    conn = listener.accept()
    print 'connection accepted from', listener.last_accepted
    conn.send_bytes('hello')
    conn.close()
    listener.close()

if __name__ == '__main__':
    if sys.argv[1] == 'client':
        client()
    else:
        server()
</snippet></ROW><ROW><id>8659369</id><snippet>IOError: bad message length</snippet></ROW><ROW><id>8659492</id><snippet>pip install simplejson</snippet></ROW><ROW><id>8659617</id><snippet>Redirect /redirect.html http://127.0.0.1:8000
</snippet></ROW><ROW><id>8659617</id><snippet>&lt;meta http-equiv="refresh" content="0;url=http://127.0.0.1:8000" /&gt;
</snippet></ROW><ROW><id>8659735</id><snippet>task_type</snippet></ROW><ROW><id>8659735</id><snippet>Task.objects.filter(client__in=clients, task_type__name='XYZ').count()
</snippet></ROW><ROW><id>8659735</id><snippet>value_num</snippet></ROW><ROW><id>8659735</id><snippet>from django.db.models import Sum

Task.objects.filter(client__in=clients, task_type__name='ABC').annotate(Sum('task_value__value_num'))
</snippet></ROW><ROW><id>8659829</id><snippet>FileChild1:  'Test text for testing'
FileChild2:  'Test text for testing'
</snippet></ROW><ROW><id>8659829</id><snippet>readData</snippet></ROW><ROW><id>8659829</id><snippet>FileChild1:  PySide.QtCore.QByteArray('Test text for testing')
FileChild2:  PySide.QtCore.QByteArray('')
</snippet></ROW><ROW><id>8659919</id><snippet>#:</snippet></ROW><ROW><id>8659919</id><snippet>class MyClass(object):
    """    
    Description for class 

    """

    def __init__(self, par1, par2):
        self.var1 = par1 #: initial value: par1
        self.var2 = par2 #: initial value: par2

    def method(self):
        pass
</snippet></ROW><ROW><id>8659919</id><snippet>class MyClass(object):
    """    
    Description for class

    :ivar var1: initial value: par1
    :ivar var2: initial value: par2
    """

    def __init__(self, par1, par2):
        self.var1 = par1 
        self.var2 = par2 

    def method(self):
        pass
</snippet></ROW><ROW><id>8659942</id><snippet>db.query</snippet></ROW><ROW><id>8659942</id><snippet>exception generated during sql connection</snippet></ROW><ROW><id>8659942</id><snippet>db.query</snippet></ROW><ROW><id>8659942</id><snippet>db.query</snippet></ROW><ROW><id>8659942</id><snippet>def __init__(self):
    self.connect()
</snippet></ROW><ROW><id>8659942</id><snippet>self.conn</snippet></ROW><ROW><id>8659942</id><snippet>db = DB()</snippet></ROW><ROW><id>8659942</id><snippet>conn = None</snippet></ROW><ROW><id>8659942</id><snippet>self.conn</snippet></ROW><ROW><id>8659942</id><snippet>sql</snippet></ROW><ROW><id>8659942</id><snippet>cursor.close()</snippet></ROW><ROW><id>8659942</id><snippet>DB.query</snippet></ROW><ROW><id>8659942</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>8659942</id><snippet>exception generated during sql connection</snippet></ROW><ROW><id>8659942</id><snippet>db.close()</snippet></ROW><ROW><id>8659942</id><snippet>...Closed Database Connection:</snippet></ROW><ROW><id>8659942</id><snippet>import MySQLdb
import config

class DB:
    def connect(self):
        try:
            self.conn = MySQLdb.connect("localhost",
                                        config.USER, config.PASS, config.MYDB)
        except (AttributeError, MySQLdb.OperationalError), e:
            raise e

    def query(self, sql, params = ()):
        try:
            cursor = self.conn.cursor()
            cursor.execute(sql, params)
        except (AttributeError, MySQLdb.OperationalError) as e:
            print 'exception generated during sql connection: ', e
            self.connect()
            cursor = self.conn.cursor()
            cursor.execute(sql, params)
        return cursor

    def close(self):
        try:
            if self.conn:
                self.conn.close()
                print '...Closed Database Connection: ' + str(self.conn)
            else:
                print '...No Database Connection to Close.'
        except (AttributeError, MySQLdb.OperationalError) as e:
            raise e

db = DB()
sql = '''DROP TABLE IF EXISTS foo'''
db.query(sql)

sql = '''CREATE TABLE foo (bar INT(11))'''
db.query(sql)

db.close()

# exception generated during sql connection:  DB instance has no attribute 'conn'
# ...Closed Database Connection: &lt;_mysql.connection closed at 8769f8c&gt;
</snippet></ROW><ROW><id>8659942</id><snippet>USER = 'myusername'
PASS = 'mypasswd'
HOST = 'localhost'
MYDB = 'dbname'
</snippet></ROW><ROW><id>8660104</id><snippet>from collections import defaultdict, Counter
from itertools import ifilter
from random import choice, randrange

def pairwise(iterable):
    it = iter(iterable)
    last = next(it)
    for curr in it:
        yield last, curr
        last = curr

valid = set('abcdefghijklmnopqrstuvwxyz ')

def valid_pair((last, curr)):
    return last in valid and curr in valid

def make_markov(text):
    markov = defaultdict(Counter)
    lowercased = (c.lower() for c in text)
    for p, q in ifilter(valid_pair, pairwise(lowercased)):
        markov[p][q] += 1
    return markov

def genrandom(model, n):
    curr = choice(list(model))
    for i in xrange(n):
        yield curr
        if curr not in model:   # handle case where there is no known successor
            curr = choice(list(model))
        d = model[curr]
        target = randrange(sum(d.values()))
        cumulative = 0
        for curr, cnt in d.items():
            cumulative += cnt
            if cumulative &gt; target:
                break

model = make_markov('The qui_.ck brown fox')
print ''.join(genrandom(model, 20))
</snippet></ROW><ROW><id>8660242</id><snippet>threading.Lock</snippet></ROW><ROW><id>8660242</id><snippet>with lock:
    arr = ...
</snippet></ROW><ROW><id>8660607</id><snippet>return HttpResponseRedirect(reverse('reg.views.thanks', args=(id,)))
</snippet></ROW><ROW><id>8660607</id><snippet>reg.views.thanks</snippet></ROW><ROW><id>8660607</id><snippet>id</snippet></ROW><ROW><id>8660607</id><snippet>url(r'^thanks/$', 'reg.views.thanks'),
</snippet></ROW><ROW><id>8660607</id><snippet>/thanks/?id=12345
</snippet></ROW><ROW><id>8660607</id><snippet>def registration(request):
    if request.method == 'POST':
        form = registrationform(request.POST)
        if form.is_valid():
            data = form.save()
            id = data.id
            return thanks(request, id)
    else:
        form = registrationform()
    return render_to_response('registration.html', {'form' : form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>8660620</id><snippet>test.swf</snippet></ROW><ROW><id>8660620</id><snippet>perl cws2fws test.swf
</snippet></ROW><ROW><id>8660620</id><snippet>test.fws.swf</snippet></ROW><ROW><id>8660620</id><snippet>strings test.fws.swf | grep http
</snippet></ROW><ROW><id>8660620</id><snippet>...
cookieOhttp://www.videodetective.net/flash/players/flashconfiguration.aspx?customerid=
...
</snippet></ROW><ROW><id>8660620</id><snippet>customerid</snippet></ROW><ROW><id>8660620</id><snippet>playerid</snippet></ROW><ROW><id>8660620</id><snippet>publishedid</snippet></ROW><ROW><id>8660620</id><snippet>http://www.videodetective.net/flash/players/flashconfiguration.aspx?customerid=300120&amp;playerid=351&amp;publishedid=319113
</snippet></ROW><ROW><id>8660620</id><snippet>http://www.videodetective.net/flash/players/playlist.aspx?videokbrate=450&amp;version=4.6&amp;customerid=300120&amp;fmt=3&amp;publishedid=&amp;sub=
</snippet></ROW><ROW><id>8660620</id><snippet>http://cdn.videodetective.net/svideo/mp4/450/6993/293732.mp4?c=300120&amp;r=450&amp;s=293732&amp;d=153&amp;sub=&amp;ref=&amp;fmt=4&amp;e=20111228220329&amp;h=03e5d78201ff0d2f7df9a
</snippet></ROW><ROW><id>8660748</id><snippet> import pygame
</snippet></ROW><ROW><id>8660748</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>8660748</id><snippet>pygame</snippet></ROW><ROW><id>8660748</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8660772</id><snippet>import module2

global x
hello="Hello"
x=module2.message(hello)
x.say()
</snippet></ROW><ROW><id>8660772</id><snippet>class message:
    def __init__(self, hello):
        self.hello = hello
    def say():
        print self.hello
</snippet></ROW><ROW><id>8660821</id><snippet>"® some text"</snippet></ROW><ROW><id>8660821</id><snippet>print unescape("® some text")
</snippet></ROW><ROW><id>8660821</id><snippet>print unescape("® some text").encode('utf-8')
</snippet></ROW><ROW><id>8660852</id><snippet>from multiprocessing import Pool
def f(x):
     return x*x

p = Pool(5)
p.map(f, [1,2,3])
</snippet></ROW><ROW><id>8660935</id><snippet>changed</snippet></ROW><ROW><id>8660935</id><snippet>myLoader.changed (this);</snippet></ROW><ROW><id>8660935</id><snippet>changed</snippet></ROW><ROW><id>8660935</id><snippet>UPDATE</snippet></ROW><ROW><id>8660935</id><snippet>UPDATE</snippet></ROW><ROW><id>8660935</id><snippet>changed</snippet></ROW><ROW><id>8660960</id><snippet>import numpy as np
import scikits.statsmodels.api as sm

a = np.array([[.001,.05,-.003,.014,.035,-.01,.032,-.0013,.0224,.005],[-.011,.012,.0013,.014,-.0015,.019,-.032,.013,-.04,-.05608],
 [.0021,.02,-.023,.0024,.025,-.081,.032,-.0513,.00014,-.00015],[.001,.02,-.003,.014,.035,-.001,.032,-.003,.0224,-.005],
 [.0021,-.002,-.023,.0024,.025,.01,.032,-.0513,.00014,-.00015],[-.0311,.012,.0013,.014,-.0015,.019,-.032,.013,-.014,-.008],
 [.001,.02,-.0203,.014,.035,-.001,.00032,-.0013,.0224,.05],[.0021,-.022,-.0213,.0024,.025,.081,.032,.05313,.00014,-.00015],
 [-.01331,.012,.0013,.014,.01015,.019,-.032,.013,-.014,-.012208],[.01021,-.022,-.023,.0024,.025,.081,.032,.0513,.00014,-.020015]])

y = a[:, 0]
x = a[:, 1:]
results = sm.OLS(y, x).fit()
print results.summary()
</snippet></ROW><ROW><id>8660960</id><snippet>     Summary of Regression Results
=======================================
| Dependent Variable:            ['y']|
| Model:                           OLS|
| Method:                Least Squares|
| # obs:                          10.0|
| Df residuals:                    1.0|
| Df model:                        8.0|
==============================================================================
|                   coefficient     std. error    t-statistic          prob. |
------------------------------------------------------------------------------
| x0                     0.2557         0.6622         0.3862         0.7654 |
| x1                    0.03054          1.453         0.0210         0.9866 |
| x2                     -3.392          2.444        -1.3877         0.3975 |
| x3                      1.445          1.474         0.9808         0.5062 |
| x4                    0.03559         0.2610         0.1363         0.9137 |
| x5                    -0.7412         0.8754        -0.8467         0.5527 |
| x6                    0.02289         0.2466         0.0928         0.9411 |
| x7                     0.5754          1.413         0.4074         0.7537 |
| x8                    -0.4827         0.7569        -0.6378         0.6386 |
==============================================================================
|                          Models stats                      Residual stats  |
------------------------------------------------------------------------------
| R-squared:                     0.8832   Durbin-Watson:              2.578  |
| Adjusted R-squared:          -0.05163   Omnibus:                   0.5325  |
| F-statistic:                   0.9448   Prob(Omnibus):             0.7663  |
| Prob (F-statistic):            0.6663   JB:                        0.1630  |
| Log likelihood:                 41.45   Prob(JB):                  0.9217  |
| AIC criterion:                 -64.91   Skew:                      0.4037  |
| BIC criterion:                 -62.18   Kurtosis:                   2.405  |
------------------------------------------------------------------------------
</snippet></ROW><ROW><id>8661004</id><snippet>&lt;img src="IMG_5072.jpg" alt="" width="1000" height="667" border="1" /&gt;
</snippet></ROW><ROW><id>8661004</id><snippet>parsed[2] = image["src"]
</snippet></ROW><ROW><id>8661004</id><snippet>parsed</snippet></ROW><ROW><id>8661004</id><snippet>['http', 'tema.ru', '/travel/new-york.2011.11/', '', '', '']
</snippet></ROW><ROW><id>8661004</id><snippet>['http', 'tema.ru', 'IMG_5072.jpg', '', '', '']
</snippet></ROW><ROW><id>8661004</id><snippet>url = urlparse.urlunparse(parsed)
</snippet></ROW><ROW><id>8661004</id><snippet>url</snippet></ROW><ROW><id>8661004</id><snippet>http://tema.ru/IMG_5072.jpg</snippet></ROW><ROW><id>8661004</id><snippet>http://tema.ru/travel/new-york.2011.11/IMG_5072.jpg</snippet></ROW><ROW><id>8661004</id><snippet>url = urlparse.urljoin(base_url,image['src'])
</snippet></ROW><ROW><id>8661004</id><snippet>"""
http://stackoverflow.com/a/258511/190597
Author: Ryan Ginstrom
dumpimages.py
    Downloads all the images on the supplied URL, and saves them to the
    specified output file ("/tmp" by default)

Usage:
    python dumpimages.py http://example.com/ [output]
"""
import os
import sys
import urllib
import urllib2
import urlparse
import argparse
import BeautifulSoup

def main(base_url, out_folder):
    """Downloads all the images at 'url' to out_folder"""
    soup = BeautifulSoup.BeautifulSoup(urllib2.urlopen(base_url))
    for image in soup.findAll("img"):
        src = image['src']
        print "Image: {s}".format(s=src) 
        _, filename = os.path.split(urlparse.urlsplit(src).path)
        outpath = os.path.join(out_folder, filename)
        url = urlparse.urljoin(base_url, src)
        urllib.urlretrieve(url, outpath)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('url')
    parser.add_argument('out_folder', nargs = '?', default = '/tmp')
    args = parser.parse_args()
    main(args.url, args.out_folder)
</snippet></ROW><ROW><id>8661021</id><snippet>&gt;&gt;&gt; import yaml
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; def dump_anydict_as_map(anydict):
...     yaml.add_representer(anydict, _represent_dictorder)
... 
&gt;&gt;&gt; def _represent_dictorder( self, data):
...     if isinstance(data, Document):
...         return self.represent_mapping('tag:yaml.org,2002:map', data.__getstate__().items())
...     else:
...         return self.represent_mapping('tag:yaml.org,2002:map', data.items())
... 
&gt;&gt;&gt; class Document(object):
...     def __init__(self, name):
...         self.name = name
...         self.otherstuff = 'blah'
...     def __getstate__(self):
...         d = OrderedDict()
...         d['name'] = self.name
...         d['otherstuff'] = self.otherstuff
...         return d
... 
&gt;&gt;&gt; dump_anydict_as_map(Document)
&gt;&gt;&gt; doc = Document('obj-20111227')
&gt;&gt;&gt; print yaml.dump(doc, indent=4)
!!python/object:__main__.Document
name: obj-20111227
otherstuff: blah
</snippet></ROW><ROW><id>8661273</id><snippet>id</snippet></ROW><ROW><id>8661273</id><snippet>id</snippet></ROW><ROW><id>8661273</id><snippet>id</snippet></ROW><ROW><id>8661273</id><snippet>IntField</snippet></ROW><ROW><id>8661273</id><snippet>AutoField</snippet></ROW><ROW><id>8661276</id><snippet>queryset</snippet></ROW><ROW><id>8661276</id><snippet>ModelAdmin</snippet></ROW><ROW><id>8661276</id><snippet>get_query_set</snippet></ROW><ROW><id>8661276</id><snippet>only</snippet></ROW><ROW><id>8661276</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    list_display = ('foo', 'bar')

    def queryset(self, request):
        qs = self.model._default_manager.only('foo', 'bar')
        ordering = self.get_ordering(request)
        if ordering:
            qs = qs.order_by(*ordering)
        return qs
</snippet></ROW><ROW><id>8661276</id><snippet>defer('my_expensive_field')</snippet></ROW><ROW><id>8661716</id><snippet>os.dup()</snippet></ROW><ROW><id>8661716</id><snippet>status = os.fdopen(os.dup(p.stdout.fileno()))
</snippet></ROW><ROW><id>8661716</id><snippet>status</snippet></ROW><ROW><id>8661773</id><snippet>from Tkinter import *

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)

        self.text = Entry(self)
        self.text.pack({"side": "left"})

        self.but1 = Button(self)
        self.but1["text"] = "a"
        self.but1.bind("&lt;Button-1&gt;",  self.do)
        self.but1.pack({"side": "left"})

        self.but2 = Button(self)
        self.but2["text"] = "b"
        self.but2.bind("&lt;Button-1&gt;",  self.do)
        self.but2.pack({"side": "left"})

        self.pack()

    def do(self, event):
        widget = event.widget
        self.text.delete(0, END)
        self.text.insert(0, widget["text"])

root = Tk()
app = Application(master=root)
app.mainloop()
</snippet></ROW><ROW><id>8661773</id><snippet>command</snippet></ROW><ROW><id>8661773</id><snippet>bind</snippet></ROW><ROW><id>8661883</id><snippet>QByteArray</snippet></ROW><ROW><id>8661883</id><snippet>QByteArray data = QByteArray("start\n\0\n\0\n\0\nend", 15);
</snippet></ROW><ROW><id>8661883</id><snippet>QByteArray</snippet></ROW><ROW><id>8661897</id><snippet>HTTPSConnection</snippet></ROW><ROW><id>8661897</id><snippet>request</snippet></ROW><ROW><id>8661897</id><snippet>connection = httplib.HTTPSConnection('rpxnow.com')
connection.request('POST', '/api/v2/auth_info', params)
</snippet></ROW><ROW><id>8661906</id><snippet>form.custom.widget.field_name['_class'] = 'bla bla'
</snippet></ROW><ROW><id>8661906</id><snippet>.elements()</snippet></ROW><ROW><id>8661906</id><snippet>for input in form.elements('input', _class='string'):
    input['_class'] = 'my-string'
</snippet></ROW><ROW><id>8661906</id><snippet>_class</snippet></ROW><ROW><id>8661906</id><snippet>Field('target_user', 'string', widget = lambda field, value:
    SQLFORM.widgets.string.widget(field, value, _class='my-string'))
</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>list.sort</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>array</snippet></ROW><ROW><id>8661954</id><snippet>arr</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>Compare</snippet></ROW><ROW><id>8661954</id><snippet>SelectionSort</snippet></ROW><ROW><id>8661954</id><snippet>array</snippet></ROW><ROW><id>8661954</id><snippet>Compare.sorted</snippet></ROW><ROW><id>8661954</id><snippet>if test:
    return True
return False
</snippet></ROW><ROW><id>8661954</id><snippet>return test
</snippet></ROW><ROW><id>8661954</id><snippet>Compare.sorted</snippet></ROW><ROW><id>8661954</id><snippet>Compare.__determine</snippet></ROW><ROW><id>8661954</id><snippet>sorted</snippet></ROW><ROW><id>8662076</id><snippet>(r'^(?P&lt;requrl&gt;.*)$',test)
</snippet></ROW><ROW><id>8662308</id><snippet>def sub_combinations(segment, max_offset=None):
   data = tuple([e] for e in segment)
   def _sub_combinations(segment):
      if len(segment) == 1:
         yield (segment,)
      else:
         for j in _sub_combinations(segment[1:]):
            yield ((segment[0],),)+j
            for k in range(len(j)):
               if max_offset and data.index(j[k][0]) - data.index(segment[0]) &gt; max_offset:
                  break
               yield (((segment[0],)+j[k]),) + (j[:k]) +(j[k+1:])
   for combination in _sub_combinations(data):
      yield tuple(tuple(e[0] for e in t) for t in combination)
</snippet></ROW><ROW><id>8662308</id><snippet>k</snippet></ROW><ROW><id>8662308</id><snippet>max_offset</snippet></ROW><ROW><id>8662355</id><snippet>def bilinear_interpolation(x, y, points):
    '''Interpolate (x,y) from values associated with four points.

    The four points are a list of four triplets:  (x, y, value).
    The four points can be in any order.  They should form a rectangle.

        &gt;&gt;&gt; bilinear_interpolation(12, 5.5,
        ...                        [(10, 4, 100),
        ...                         (20, 4, 200),
        ...                         (10, 6, 150),
        ...                         (20, 6, 300)])
        165.0

    '''
    # See formula at:  http://en.wikipedia.org/wiki/Bilinear_interpolation

    points = sorted(points)               # order points by x, then by y
    (x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points

    if x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:
        raise ValueError('points do not form a rectangle')
    if not x1 &lt;= x &lt;= x2 or not y1 &lt;= y &lt;= y2:
        raise ValueError('(x, y) not within the rectangle')

    return (q11 * (x2 - x) * (y2 - y) +
            q21 * (x - x1) * (y2 - y) +
            q12 * (x2 - x) * (y - y1) +
            q22 * (x - x1) * (y - y1)
           ) / ((x2 - x1) * (y2 - y1) + 0.0)
</snippet></ROW><ROW><id>8662355</id><snippet>if __name__ == '__main__':
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>8662355</id><snippet>&gt;&gt;&gt; n = [(54.5, 17.041667, 31.993),
         (54.5, 17.083333, 31.911),
         (54.458333, 17.041667, 31.945),
         (54.458333, 17.083333, 31.866),
    ]
&gt;&gt;&gt; bilinear_interpolation(54.4786674627, 17.0470721369, n)
31.95798688313631
</snippet></ROW><ROW><id>8662721</id><snippet> print(print_mult_table(7))
</snippet></ROW><ROW><id>8663150</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8663150</id><snippet>lib</snippet></ROW><ROW><id>8663150</id><snippet>import import_my_lib
</snippet></ROW><ROW><id>8663150</id><snippet>import_my_lib.py</snippet></ROW><ROW><id>8663150</id><snippet>import_my_lib</snippet></ROW><ROW><id>8663150</id><snippet>lib</snippet></ROW><ROW><id>8663431</id><snippet># Function to make an array of 'width' zeros
function makerow($width){
 $row=array();
 for($x=0;$x&lt;$width;$x++){
   $row[$x]=0;
 }
 return $row;
}

# Function to make a width*height matrix
function makematrix($width,$height){
 $matrix=array();
 for($y=0;$y&lt;$height;$y++){
  $matrix[$y]=array();
  for($x=0;$x&lt;$width;$x++){
   $matrix[$y][$x]=0;
  }
 }
 return $matrix;
}

# Adds one matrix to another
function matrixadd(&amp;$matrixdest,&amp;$matrixsrc){
 for($i=0;$i&lt;count($matrixdest);$i++){
  for($j=0;$j&lt;count($matrixdest[$i]);$j++){
   $matrixdest[$i][$j]+=$matrixsrc[$i][$j];
  }
 }
}

# Multiplies a matrix by a scalar
function matrixmultiply(&amp;$matrix,$scalar){
 for($i=0;$i&lt;count($matrix);$i++){
  for($j=0;$j&lt;count($matrix[$i]);$j++){
   $matrix[$i][$j]*=$scalar;
  }
 }
}

# Calculates the equity of each place. Rows indicate players;
# columns indicate places (0 is 1st place, 1 is second, and so on)
# The parameter 'places' is optional.  If not given, uses the 
# number of stacks.
function equitymatrix(&amp;$stacks, $places=-1){
 if($places==-1){
  # replace places with the stack count
  $places=count($stacks);
 }
 if(count($stacks)&lt;=1){
  return array(array(1));
 }  
 $totalStacks=0;
 for($i=0;$i&lt;count($stacks);$i++){
  $totalStacks+=$stacks[$i];
 }
 # Optimize for case where there is only one place
 if($places==1){
  $matrix=makematrix(1,count($stacks));
  for($i=0;$i&lt;count($stacks);$i++){
   $matrix[$i][0]=$stacks[$i]*1.0/$totalStacks;
  }
  return $matrix;
 }
 # Optimize for case where there are two places
 if($places==2){
  $matrix=makematrix(2,count($stacks));
  for($i=0;$i&lt;count($stacks);$i++){
   $matrix[$i][0]=$stacks[$i]*1.0/$totalStacks;
  }
  for($i=0;$i&lt;count($stacks);$i++){
   for($j=0;$j&lt;count($stacks);$j++){
    if($i!=$j){
     $matrix[$i][1]+=$matrix[$j][0]*($stacks[$i]*1.0/($totalStacks-$stacks[$j]));
    }
   }
  }
  return $matrix;
 }
 # Calculate the probabilities of each player getting first place
 $probabilities=array();
 for($i=0;$i&lt;count($stacks);$i++){
  $probabilities[$i]=$stacks[$i]*1.0/$totalStacks;
 }
 #echo(count($stacks)." ".$places."\n");
 $subequities=array();
 for($i=0;$i&lt;count($stacks);$i++){
  $substacks=array();
  # Assume that player i would be in first place
  # Create a new array with i's stack removed
  for($j=0;$j&lt;count($stacks);$j++){
   if($j!=$i){
    array_push($substacks,$stacks[$j]);
   }
  }
  # Find the subequity of the remaining players
  $subequities[$i]=equitymatrix($substacks,
    min($places,count($substacks)));
  for($j=0;$j&lt;count($subequities[$i]);$j++){
   array_unshift($subequities[$i][$j],0);
  }
  # Add player i back
  $newrow=makerow($places);
  $newrow[0]=1;
  array_splice($subequities[$i],$i,0,array($newrow));
 }
 $equities=makematrix($places,count($stacks));
 for($i=0;$i&lt;count($stacks);$i++){
  # Multiply the probabilities
  matrixmultiply($subequities[$i],$probabilities[$i]);
  # Add the subequity
  matrixadd($equities,$subequities[$i]);
 }
 return $equities;
}
</snippet></ROW><ROW><id>8663431</id><snippet>$mystacks=array(10,40,30,20);
print_r(equitymatrix($mystacks));
</snippet></ROW><ROW><id>8663431</id><snippet>makematrix</snippet></ROW><ROW><id>8663431</id><snippet>height</snippet></ROW><ROW><id>8663431</id><snippet>width</snippet></ROW><ROW><id>8663431</id><snippet>matrixadd</snippet></ROW><ROW><id>8663431</id><snippet>matrixmultiply</snippet></ROW><ROW><id>8663504</id><snippet>#!/usr/bin/env python

import os

from google.appengine.ext import webapp
from google.appengine.ext.webapp import util
from google.appengine.ext.webapp import template

def doRender(handler, page, templatevalues=None):
    path = os.path.join(os.path.dirname(__file__), page)
    handler.response.out.write(template.render(path, templatevalues))

class MainHandler(webapp.RequestHandler):
    def get(self):
        doRender(self, 'template/main.html')


class AjaxHandler(webapp.RequestHandler):
    def get(self):
        self.response.out.write('{ "lat": "1", "long": "1"}')

def main():
    application = webapp.WSGIApplication([('/', MainHandler),
                                          ('/data.js', AjaxHandler)],
                                         debug=True)
    util.run_wsgi_app(application)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8663504</id><snippet>application: ajaxtest
version: 1
runtime: python
api_version: 1

handlers:
- url: /favicon\.ico
  static_files: favicon.ico
  upload: favicon\.ico

- url: .*
  script: main.py
</snippet></ROW><ROW><id>8663504</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script type="text/javascript" src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;button&gt;Get JSON data&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
var test = 1;

function update(){
    $.getJSON("/data.js",function(data){

    var items = [];
      $.each(data, function(key, val){
        $("div").append(key + ":" + val + " ");
      });
    });
    }

var t=setInterval("update()",1000);

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>8663564</id><snippet>monkey_patch</snippet></ROW><ROW><id>8663564</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>8663564</id><snippet>__unicode__</snippet></ROW><ROW><id>8663564</id><snippet>from django.contrib.auth.models import User
del User.get_absolute_url
</snippet></ROW><ROW><id>8663821</id><snippet>def foo(myList,key,first=True):
    if first: #First Element Search
        return [x for x in myList if key in x]
    else: #Search Both Element
        return [x for x in myList if key in x or key in x[1]]

&gt;&gt;&gt; foo(myList,'abc',0)
[['abc', 'abc-321']]
&gt;&gt;&gt; foo(myList,'abc',1)
[['abc', 'abc-321'], ['def', '789-abc']]
</snippet></ROW><ROW><id>8663821</id><snippet>in</snippet></ROW><ROW><id>8663821</id><snippet>def foo(myList,key,first=True):
    return [x for x in myList if key in x or not first and key in x[1]]

&gt;&gt;&gt; foo(myList,'abc')
[['abc', 'abc-321']]
&gt;&gt;&gt; foo(myList,'abc',first=False)
[['abc', 'abc-321'], ['def', '789-abc']]
&gt;&gt;&gt; foo(myList,'abc',first=True)
[['abc', 'abc-321']]    
</snippet></ROW><ROW><id>8663907</id><snippet>def get_ticket_available_product(self, date_select, client_id, quantity):
    client = Client.objects.get(id=client_id)
    prodCount = Product.objects.filter(client=client_id,status='Active').values_list('id', flat=True)
    for id in prodCount:
        prodAvailable = Ticket.objects.get_ticket_sum_quantity(id, date_select)
        prodAvailable = prodAvailable - quantity
        if prodAvailable &lt; 0:
            data = {'id':id}
        else :
            data = {'id':id}
            data = data['id']
            yield data
    return
</snippet></ROW><ROW><id>8663907</id><snippet>data = get_ticket_available_product(self, date_select, client_id, quantity)
for d in data:
    print d
</snippet></ROW><ROW><id>8663907</id><snippet>print '\n'.join(str(i) for i in [3, 2, 6, 1])
</snippet></ROW><ROW><id>8663907</id><snippet>print '\n'.join(str(i) for i in Ticket.objects.get_ticket_available_product('2011-12-29', 5, 1) )
</snippet></ROW><ROW><id>8663907</id><snippet>    data = data['id']
        array.append(data)
return '\n'.join(str(i) for i in array )
</snippet></ROW><ROW><id>8663907</id><snippet>print Ticket.objects.get_ticket_available_product('2011-12-29', 5, 1)
</snippet></ROW><ROW><id>8663907</id><snippet>if prodAvailable &lt; 0:
    data = {'id':id}
</snippet></ROW><ROW><id>8663986</id><snippet>ncalls</snippet></ROW><ROW><id>8663986</id><snippet>_safe_repr()</snippet></ROW><ROW><id>8664491</id><snippet># Never do this -- insecure!
symbol = 'IBM'
c.execute("... where symbol = '%s'" % symbol)

# Do this instead
t = (symbol,)
c.execute('select * from stocks where symbol=?', t)
</snippet></ROW><ROW><id>8664532</id><snippet> elif options.conv:
        LMT = options.conv
        LMT= float(LMT)
        LMT = time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime(LMT))
        print '%s'% LMT
</snippet></ROW><ROW><id>8664584</id><snippet>for line in tailer.follow(open('test.txt')):
    print line
</snippet></ROW><ROW><id>8664690</id><snippet>Sitemap</snippet></ROW><ROW><id>8664690</id><snippet>Sitemap</snippet></ROW><ROW><id>8664690</id><snippet>Sitemap</snippet></ROW><ROW><id>8664690</id><snippet>Sitemap</snippet></ROW><ROW><id>8664811</id><snippet>class Gallery(models.Model):
    head_image = models.ImageField(upload_to="gallery")

class Image(models.Model):
    image = models.ImageField(upload_to="gallery")
    gallery = models.ForeignKey(Gallery, related_name='images')

class Tour(Gallery):
    ...
</snippet></ROW><ROW><id>8664888</id><snippet>    qs = MyModel.objects.filter(mystring__contains="____10____")
</snippet></ROW><ROW><id>8664888</id><snippet>    qs = MyModel.objects.extra(where="mystring LIKE '____10____'")
</snippet></ROW><ROW><id>8664909</id><snippet>global packet_log
packet_log = []
logging.basicConfig(level=logging.DEBUG)

for pkt in ThinkGearProtocol('/dev/rfcomm9').get_packets():
    packet_log.append(pkt)
</snippet></ROW><ROW><id>8664909</id><snippet>def PacketHandler(packet):
    # Send an event out to objects 
    for obj in listeners:
        obj.packet_callback(packet)

for pkt in ThinkGearProtocol('/dev/rfcomm9').get_packets():
    PacketHandler(pkt)
</snippet></ROW><ROW><id>8665496</id><snippet>Input:
2
2
1 1
3 2
3
2 3 2
1 3 2

Output:
5
15
</snippet></ROW><ROW><id>8665496</id><snippet>2
2
1 1
3 2
5      &lt;- that is the output for the first contest. should not output yet
3
2 3 2
Traceback (most recent call last):
  File "dasdsad.py", line 35, in &lt;module&gt;
    p = p + men[i]  * women[i]
IndexError: list index out of range

C:\Python26\programas\zz_so&gt;
</snippet></ROW><ROW><id>8665496</id><snippet>num</snippet></ROW><ROW><id>8665496</id><snippet>def process(index,line):
    p = line.split(" ")
    for i in p:
        if(index==0):
            men.append(int(i))
        else:
            women.append(int(i))

n = int(raw_input()) #This is for number of shows
results = []
for t in range(0, n): #Do this "n" times
    men = []
    women = []
    num = int(raw_input()) #This is number of men/women
    for i in range(0,2): #Now, enter  the men data first  and women next
        line=raw_input()
        process(i,line)

    p=0
    men.sort()
    women.sort()

    for i in range(0,num):
        p = p + men[i]  * women[i]
    results.append(p)

for item in results:
    print item
</snippet></ROW><ROW><id>8665496</id><snippet>def process(line):
    return sorted([int(i) for i in line.split()])

n = int(raw_input())         #This is for number of shows
results = []
for t in range(n):           #Do this "n" times
    num = int(raw_input())   #This is number of men/women

    men = process(raw_input())
    women = process(raw_input())

    p = sum(m*w for m, w in zip(men, women))
    results.append(p)

for item in results:
    print item
</snippet></ROW><ROW><id>8665506</id><snippet>s = [1,4,2,3,5,4,5,6,7,8,1,3,4,5,9,10,11,42]
maxrun = -1
rl = {}
for x in s:
    run = rl[x] = rl.get(x-1, 0) + 1
    print x-run+1, 'to', x
    if run &gt; maxrun:
        maxend, maxrun = x, run
print range(maxend-maxrun+1, maxend+1)
</snippet></ROW><ROW><id>8665506</id><snippet>rl = {}
best_range = xrange(0)
for x in s:
    run = rl[x] = rl.get(x-1, 0) + 1
    r = xrange(x-run+1, x+1)
    if len(r) &gt; len(best_range):
        best_range = r
print list(best_range)
</snippet></ROW><ROW><id>8665818</id><snippet>url = "www.abc.com/category-city_area_name-deal/"
city = "AreaName"

if city.replace('_', '').lower() in url.replace('_', '').lower():
    print 'ok'
</snippet></ROW><ROW><id>8665818</id><snippet>a.replace('_', '').lower()</snippet></ROW><ROW><id>8665818</id><snippet>a</snippet></ROW><ROW><id>8665818</id><snippet> city.replace('_', '').lower() -&gt; 'areaname'
 url.replace('_', '').lower()  -&gt; 'www.abc.com/category-cityareaname-deal/'
</snippet></ROW><ROW><id>8665818</id><snippet>'areaname'</snippet></ROW><ROW><id>8665818</id><snippet>'www.abc.com/category-cityareaname-deal/'</snippet></ROW><ROW><id>8665831</id><snippet>&amp;</snippet></ROW><ROW><id>8665831</id><snippet>&amp;</snippet></ROW><ROW><id>8665831</id><snippet>td</snippet></ROW><ROW><id>8665831</id><snippet>a</snippet></ROW><ROW><id>8665831</id><snippet>td</snippet></ROW><ROW><id>8666637</id><snippet>grid_widget.Scroll(row, column)
</snippet></ROW><ROW><id>8666637</id><snippet>import wx
import wx.grid as grid
#
class Button(wx.Frame):
    def __init__(self, parent, source):
        wx.Frame.__init__(self, parent, -1, size=(100,100))
        self.source = source
        self.pos = 0 
        self.button = wx.Button(self, label='0')
        self.Bind(wx.EVT_BUTTON, self.onbutton, self.button)
        self.Show()

    def onbutton(self, evt):
        self.pos += 1
        self.source.grid.Scroll(self.pos, self.pos) 
        self.button.SetLabel(str(self.pos))  

class Frame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent, -1, "Grid", size=(350,250))
        self.grid = grid.Grid(self)
        self.grid.CreateGrid(20, 20)
        self.but = Button(None, self)


if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = Frame(None)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8666667</id><snippet>{'image': 'image-url', 'url' : 'url', 'title' : 'test_title', 'description' : 'test_description'}</snippet></ROW><ROW><id>8666667</id><snippet>browsing_history:SESSION_KEY_1</snippet></ROW><ROW><id>8666667</id><snippet>browsing_history:*</snippet></ROW><ROW><id>8666694</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Polygon

data = np.random.rand(4, 4)
plt.imshow(data)

pointListX = (0, 2, 1)
pointListY = (0, 1, 3)
xyList = zip(pointListX, pointListY)
p = Polygon( xyList, alpha=0.2 )
plt.gca().add_artist(p)

plt.show()
</snippet></ROW><ROW><id>8666694</id><snippet>zorder</snippet></ROW><ROW><id>8666791</id><snippet>find()</snippet></ROW><ROW><id>8666791</id><snippet>batch_size</snippet></ROW><ROW><id>8666990</id><snippet>while True:
    now = datetime.datetime.now()
    if now.second == 1:
        print "One"
        time.sleep(59) # wait 59 seconds after success
    time.sleep(1) # wait 1 second after each fail
</snippet></ROW><ROW><id>8667011</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>8667011</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>8667011</id><snippet>settings.py</snippet></ROW><ROW><id>8667011</id><snippet>user</snippet></ROW><ROW><id>8667011</id><snippet>perms</snippet></ROW><ROW><id>8667011</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>8667011</id><snippet>("django.contrib.auth.context_processors.auth",
"django.core.context_processors.debug",
"django.core.context_processors.i18n",
"django.core.context_processors.media",
"django.core.context_processors.static",
"django.contrib.messages.context_processors.messages")
</snippet></ROW><ROW><id>8667011</id><snippet>user</snippet></ROW><ROW><id>8667011</id><snippet>render</snippet></ROW><ROW><id>8667011</id><snippet>from django.shortcuts import render

def my_view(request):
    return render(request, 'template.html' )
</snippet></ROW><ROW><id>8667113</id><snippet>extract</snippet></ROW><ROW><id>8667113</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; s = '&lt;html&gt;&lt;address&gt;Some street address&lt;br /&gt;City, State and ZIP&lt;br /&gt;&lt;div class="phone"&gt;(123) 456-7890&lt;/div&gt;&lt;/address&gt;&lt;/html&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(s)
&gt;&gt;&gt; soup.address.div.extract()
&lt;div class="phone"&gt;(123) 456-7890&lt;/div&gt;
&gt;&gt;&gt; [e.extract() for e in soup.address.findAll('br')]
[&lt;br /&gt;, &lt;br /&gt;]
&gt;&gt;&gt; soup.address.text
u'Some street addressCity, State and ZIP'
</snippet></ROW><ROW><id>8667619</id><snippet>defaultdict</snippet></ROW><ROW><id>8667619</id><snippet>data = "aabcggggg"

from collections import defaultdict
dd = defaultdict(list)
for c in data:
    dd[c].append(c)
print dd
</snippet></ROW><ROW><id>8667619</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>8667619</id><snippet>dd[c].append(c)</snippet></ROW><ROW><id>8667619</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8667619</id><snippet>groupby</snippet></ROW><ROW><id>8667619</id><snippet>list(v)</snippet></ROW><ROW><id>8667619</id><snippet>from itertools import groupby
print dict((k,list(v)) for k,v in groupby(data))
</snippet></ROW><ROW><id>8667619</id><snippet>{'a': ['a', 'a'], 'c': ['c'], 'b': ['b'], 'g': ['g', 'g', 'g', 'g', 'g']}
</snippet></ROW><ROW><id>8668100</id><snippet>a1_group</snippet></ROW><ROW><id>8668100</id><snippet>group by</snippet></ROW><ROW><id>8668100</id><snippet>a1_loc</snippet></ROW><ROW><id>8668100</id><snippet>a1_avg = session.query(Table_A.a1_loc, Table_A.a1_group, func.avg(Table_A.a1_value).label('a1_avg'))\
         .filter(between(Table_A.a1_date, '2011-10-01', '2011-10-30'))\
         #.filter(Table_A.a1_id == '12')\ # @note: you do NOT NEED this
         .group_by(Table_A.a1_loc)\ # @note: you NEED this
         .group_by(Table_A.a1_group)
</snippet></ROW><ROW><id>8668133</id><snippet>sc create "[YourService]" binPath= "C:\Program Files\Windows Resource Kits\srvany.exe"
</snippet></ROW><ROW><id>8668133</id><snippet>HKEY_LOCAL_MACHINE &gt; SYSTEM &gt; CurrentControlSet &gt; Services &gt; [YourService]</snippet></ROW><ROW><id>8668133</id><snippet>C:\Python27\python.exe C:\[YourServicePath].py
</snippet></ROW><ROW><id>8668177</id><snippet>'.'.join()</snippet></ROW><ROW><id>8668177</id><snippet>".".join()</snippet></ROW><ROW><id>8668177</id><snippet>join()</snippet></ROW><ROW><id>8668355</id><snippet>__getstate__</snippet></ROW><ROW><id>8668355</id><snippet>__setstate__</snippet></ROW><ROW><id>8668400</id><snippet>cursor.execute(u"INSERT INTO "+ DATA_TABLE + u""" (fk_id, title, streetaddress,json) 
                 values (%(fk_id)s, %(title)s, %(address)s, %(json)s ) """ ,(
                 result))
</snippet></ROW><ROW><id>8668736</id><snippet>from PIL import Image

frame = Image.open('frame.png')
img = Image.open('image.jpg')

img_dest = img.copy().convert('RGBA')
img_dest.paste(frame, (0, 0, 100, 100), frame)

img_dest = img_dest.convert('RGB') # Optional, to remove transparency info

img_dest.save('output.png')
</snippet></ROW><ROW><id>8668816</id><snippet>threading</snippet></ROW><ROW><id>8669381</id><snippet>from __future__ import division

import scipy.stats
from numpy import *

def normpdf(x, mu, sigma):
    u = (x-mu)/abs(sigma)
    y = (1/(sqrt(2*pi)*abs(sigma)))*exp(-u*u/2)
    return y


print scipy.stats.norm.pdf(20, 20, 10)
print normpdf(20, 20, 10)

print scipy.stats.norm.pdf(15, 20, 10)
print normpdf(15, 20, 10)

print scipy.stats.norm.pdf(10, 20, 10)
print normpdf(10, 20, 10)
</snippet></ROW><ROW><id>8669381</id><snippet>1.</snippet></ROW><ROW><id>8669459</id><snippet>(numMsgs, totalSize) = self.conn_pop3.stat()
</snippet></ROW><ROW><id>8669459</id><snippet>(server_msg, body, octets) = self.conn_pop3.retr(number)
</snippet></ROW><ROW><id>8669459</id><snippet>from poplib  import POP3
...
    if self.pop3_connected:            
        try:
            #------Check if email number is valid----------------------
            (numMsgs, totalSize) = self.conn_pop3.stat()
            self.debug(200, "Total number of server messages:    ", numMsgs)                
            self.debug(200, "Total size   of server messages:    ", totalSize)
            if  number&gt;numMsgs:
                self.debug(200, "\nSorry - there aren't that many messages in your inbox\n")
                return False
            else:
                (server_msg, body, octets) = self.conn_pop3.retr(number)
                self.debug(200, "Server Message:    "   , server_msg)
                self.debug(200, "Number of Octets:    " , octets)
                self.debug(200, "Message body:")
                for line in body:
                    print line
                #end for
                return True
            #endif
        finally:
            self.__disconnect__()      
    #endif 
</snippet></ROW><ROW><id>8669459</id><snippet>def __connect_pop3__(self):
    """\brief Method for connecting to POP3 server                        
       \return True   If connection to POP3 succeeds or if POP3 is already connected
       \return False  If connection to POP3 fails
    """
    #------Check that POP3 is not already connected-----------------------
    if not self.pop3_connected:
        #------Connect POP3-----------------------------------------------
        self.debug(100, 'Connecting POP3 with: ', self.host_name, self.user_name, self.pass_name)
        self.conn_pop3 = POP3(self.host_name)            
        res1 = self.conn_pop3.user(self.user_name)
        string1 = str(res1)      
        self.debug(100, 'User identification result:', string1) 
        res2 = self.conn_pop3.pass_(self.pass_name)        
        string2 = str(res2)                
        self.debug(100, 'Pass identification result:', string2)                        
        #------Check if connection resulted in success--------------------
        #------Server on DavMail returns 'User successfully logged on'----
        if  string2.find('User successfully logged on')&lt;&gt;-1 or string1.find('User successfully logged on')&lt;&gt;-1 :
            self.pop3_connected = True            
            return True
        else:
            return False
        #endif         
    else:       
        self.debug(255, 'POP3 already connected')
        return True
    #endif 
</snippet></ROW><ROW><id>8669461</id><snippet>import numpy as np
x = np.array([[5, 2, 3],[1, 9, 2]]) # example data
k = 2 # return the indices of the 2 smallest values
np.argsort(x, axis=1)[:,0:k] # by row

array([[1, 2],
       [0, 2]])
</snippet></ROW><ROW><id>8669727</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>8669727</id><snippet>from xml.etree import ElementTree

def dict2xml(d, parent=None):
    if parent is None:
        parent = ElementTree.Element('xml')

    for key, value in d.items():
        if isinstance(value, str):
            element = ElementTree.SubElement(parent, key)
            element.text = value
    elif isinstance(value, dict):
            element = ElementTree.SubElement(parent, key)
            dict2xml(value, element)
    elif isinstance(value, list):
            for text in value:
            element = ElementTree.SubElement(parent, key)
            element.text = str(text)
        else:
            raise TypeError('Unexpected value type: {0}'
                            .format(type(value)))


    return parent

d = {'a': 'a contents',
     'b': {'c': 'c contents',
           'd': 'd contents',
           },
     'e': range(3),
     }

print ElementTree.tostring(dict2xml(d))
</snippet></ROW><ROW><id>8669727</id><snippet>&lt;xml&gt;&lt;a&gt;a contents&lt;/a&gt;&lt;b&gt;&lt;c&gt;c contents&lt;/c&gt;&lt;d&gt;d contents&lt;/d&gt;&lt;/b&gt;&lt;e&gt;0&lt;/e&gt;&lt;e&gt;1&lt;/e&gt;&lt;e&gt;2&lt;/e&gt;&lt;/xml&gt;
</snippet></ROW><ROW><id>8670119</id><snippet>def updateCache(name, new_data):
    global cache
    info = cache[name]
    datarows = info['datarows']
    datarows.append(new_data)


cache = {'foo': {'datarows': []}, 'bar': {'datarows': []}}

print cache
updateCache('foo', 'bar')
print cache
</snippet></ROW><ROW><id>8670119</id><snippet>{'foo': {'datarows': []}, 'bar': {'datarows': []}}
{'foo': {'datarows': ['bar']}, 'bar': {'datarows': []}}
</snippet></ROW><ROW><id>8670346</id><snippet>operators = ["add", "mul"]

class OperatorHackiness(object):
  """
  Use this base class if you want your object
  to intercept __add__, __iadd__, __radd__, __mul__ etc.
  using __getattr__.
  __getattr__ will called at most _once_ during the
  lifetime of the object, as the result is cached!
  """

  def __init__(self):
    # create a instance-local base class which we can
    # manipulate to our needs
    self.__class__ = self.meta = type('tmp', (self.__class__,), {})


# add operator methods dynamically, because we are damn lazy.
# This loop is however only called once in the whole program
# (when the module is loaded)
def create_operator(name):
  def dynamic_operator(self, *args):
    # call getattr to allow interception
    # by user
    func = self.__getattr__(name)
    # save the result in the temporary
    # base class to avoid calling getattr twice
    setattr(self.meta, name, func)
    # use provided function to calculate result
    return func(self, *args)
  return dynamic_operator

for op in operators:
  for name in ["__%s__" % op, "__r%s__" % op, "__i%s__" % op]:
    setattr(OperatorHackiness, name, create_operator(name))


# Example user class
class Test(OperatorHackiness):
  def __init__(self, x):
    super(Test, self).__init__()
    self.x = x

  def __getattr__(self, attr):
    print "__getattr__(%s)" % attr
    if attr == "__add__":
      return lambda a, b: a.x + b.x
    elif attr == "__iadd__":
      def iadd(self, other):
        self.x += other.x
        return self
      return iadd
    elif attr == "__mul__":
      return lambda a, b: a.x * b.x
    else:
      raise AttributeError

## Some test code:

a = Test(3)
b = Test(4)

# let's test addition
print a + b # this first call to __add__ will trigger
            # a __getattr__ call
print a + b # this second call will not!

# same for multiplication
print a * b
print a * b

# inplace addition (getattr is also only called once)
a += b
a += b
print a.x # yay!
</snippet></ROW><ROW><id>8670346</id><snippet>__getattr__(__add__)
7
7
__getattr__(__mul__)
12
12
__getattr__(__iadd__)
11
</snippet></ROW><ROW><id>8670346</id><snippet>OperatorHackiness</snippet></ROW><ROW><id>8670346</id><snippet>__getattr__</snippet></ROW><ROW><id>8670452</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>8670452</id><snippet>csv</snippet></ROW><ROW><id>8670452</id><snippet>dictionary = {'time': allTimes,
              'type': allTypes,
              'who': allWhos,
              'id': allIds,
              'msg': allMsgs}
</snippet></ROW><ROW><id>8670452</id><snippet>data = [{'time': time_row_1,
         'type': type_row_1,
         'who': who_row_1,
         'id': id_row_1,
         'msg': msg_row_1},

        ...

        {'time': time_row_n,
         'type': type_row_n,
         'who': who_row_n,
         'id': id_row_n,
         'msg': msg_row_n},
       ]
</snippet></ROW><ROW><id>8670452</id><snippet>data = []
for line in infile:
    row = {}
    row['time'] = ...
    row['type'] = ...
    ...
    ...
    data.append(row)
</snippet></ROW><ROW><id>8670452</id><snippet>wtr = csv.DictWriter(open(filename, 'w'), keys)
wtr.writerows(data)
</snippet></ROW><ROW><id>8670521</id><snippet>from django.db.models import Count

Person.objects.annotate(count_book=Count('book')).filter(count_book__gt=0)
</snippet></ROW><ROW><id>8670521</id><snippet>In [9]: Person.objects.annotate(count_book=Count('book')).filter(count_book__gt=0)
DEBUG (0.000) SELECT "testapp_person"."id", "testapp_person"."name", COUNT("testapp_book_author"."book_id") AS "count_book" FROM "testapp_person" LEFT OUTER JOIN "testapp_book_author" ON ("testapp_person"."id" = "testapp_book_author"."person_id") GROUP BY "testapp_person"."id", "testapp_person"."name", "testapp_person"."id", "testapp_person"."name" HAVING COUNT("testapp_book_author"."book_id") &gt; 0  LIMIT 21; args=(0,)
Out[9]: [&lt;Person: Person object&gt;]

In [10]: Person.objects.exclude(book=None)
DEBUG (0.000) SELECT "testapp_person"."id", "testapp_person"."name" FROM "testapp_person" WHERE NOT (("testapp_person"."id" IN (SELECT U0."id" FROM "testapp_person" U0 LEFT OUTER JOIN "testapp_book_author" U1 ON (U0."id" = U1."person_id") LEFT OUTER JOIN "testapp_book" U2 ON (U1."book_id" = U2."id") WHERE (U2."id" IS NULL AND U0."id" IS NOT NULL)) AND "testapp_person"."id" IS NOT NULL)) LIMIT 21; args=()
Out[10]: [&lt;Person: Person object&gt;]

In [11]: Person.objects.filter(pk__in=Book.objects.values_list('author').distinct())
DEBUG (0.000) SELECT "testapp_person"."id", "testapp_person"."name" FROM "testapp_person" WHERE "testapp_person"."id" IN (SELECT DISTINCT U1."person_id" FROM "testapp_book" U0 LEFT OUTER JOIN "testapp_book_author" U1 ON (U0."id" = U1."book_id")) LIMIT 21; args=()
Out[11]: [&lt;Person: Person object&gt;]
</snippet></ROW><ROW><id>8670521</id><snippet>Person.objects.annotate(count_book=Count('book')).filter(count_book__gt=0)[0].count_book</snippet></ROW><ROW><id>8670551</id><snippet>self</snippet></ROW><ROW><id>8670551</id><snippet>__init__()</snippet></ROW><ROW><id>8670551</id><snippet>self</snippet></ROW><ROW><id>8670551</id><snippet>__init__()</snippet></ROW><ROW><id>8670551</id><snippet>except longInputException, self:
    print 'longInputException: the input was of length %d, \
was expecting less than or equal to %d' % (self.length, self.max)

else:
    print 'No exception was raised.'
</snippet></ROW><ROW><id>8670712</id><snippet>datetime</snippet></ROW><ROW><id>8670712</id><snippet>&gt;&gt;&gt; tstamp = 1325178061  # right about now
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.fromtimestamp(tstamp)
datetime.datetime(2011, 12, 29, 18, 1, 1)
</snippet></ROW><ROW><id>8670712</id><snippet>fromtimestamp</snippet></ROW><ROW><id>8670712</id><snippet>timedelta</snippet></ROW><ROW><id>8670712</id><snippet>&gt;&gt;&gt; W_EPOCH = datetime(1601, 1, 1)
&gt;&gt;&gt; (datetime.fromtimestamp(tstamp) - W_EPOCH).total_seconds()
12969655261.0
</snippet></ROW><ROW><id>8670712</id><snippet>float</snippet></ROW><ROW><id>8670712</id><snippet>int</snippet></ROW><ROW><id>8670881</id><snippet>pooled_objects</snippet></ROW><ROW><id>8670881</id><snippet>GC</snippet></ROW><ROW><id>8671098</id><snippet>conch</snippet></ROW><ROW><id>8671098</id><snippet>twisted.conch</snippet></ROW><ROW><id>8671323</id><snippet>itertools.islice(iterable[, start], stop[, step])</snippet></ROW><ROW><id>8671323</id><snippet>import itertools
for line in itertools.islice(list , start, stop):
     foo(line)
</snippet></ROW><ROW><id>8671600</id><snippet>engine = create_engine(database_url)

def on_connect(conn, record):
    conn.execute('pragma foreign_keys=ON')

from sqlalchemy import event
event.listen(engine, 'connect', on_connect)
</snippet></ROW><ROW><id>8671745</id><snippet>r0 = conn.search(q, indexes = ["test-index"], start=0, size=1)
r1 = conn.search(q, indexes = ["test-index"], start=1, size=1)
r2 = conn.search(q, indexes = ["test-index"], start=2, size=1)
</snippet></ROW><ROW><id>8671745</id><snippet>r0 = conn.search(Search(q, start=0, size=1), indexes = ["test-index"])
r1 = conn.search(Search(q, start=1, size=1), indexes = ["test-index"])
r2 = conn.search(Search(q, start=2, size=1), indexes = ["test-index"])
</snippet></ROW><ROW><id>8671745</id><snippet>0s: [{u'_score': 0.19178301, u'_type': u'test-type', u'_id': u'4', u'_source': {u'position': 4, u'name': u'Last Joe', u'uuid': u'44444'}, u'_index': u'test-index'}]
1s: [{u'_score': 0.19178301, u'_type': u'test-type', u'_id': u'1', u'_source': {u'position': 1, u'name': u'Joe Tester', u'uuid': u'11111'}, u'_index': u'test-index'}]
2s: [{u'_score': 0.19178301, u'_type': u'test-type', u'_id': u'3', u'_source': {u'position': 3, u'name': u'Joe Joseph', u'uuid': u'33333'}, u'_index': u'test-index'}]
</snippet></ROW><ROW><id>8671854</id><snippet>cur.mogrify("SELECT * FROM table WHERE column IN %s;", ((1,2,3),))
</snippet></ROW><ROW><id>8671854</id><snippet>'SELECT * FROM table WHERE column IN (1,2,3);'
</snippet></ROW><ROW><id>8671961</id><snippet>nargs</snippet></ROW><ROW><id>8671961</id><snippet>nargs</snippet></ROW><ROW><id>8671961</id><snippet>None</snippet></ROW><ROW><id>8671961</id><snippet>nargs</snippet></ROW><ROW><id>8671961</id><snippet>nargs</snippet></ROW><ROW><id>8671961</id><snippet>'?'</snippet></ROW><ROW><id>8671961</id><snippet>'*'</snippet></ROW><ROW><id>8671961</id><snippet>'+'</snippet></ROW><ROW><id>8671961</id><snippet>parse_args</snippet></ROW><ROW><id>8671961</id><snippet>'AA'</snippet></ROW><ROW><id>8671961</id><snippet>'A'</snippet></ROW><ROW><id>8671961</id><snippet>'O'</snippet></ROW><ROW><id>8671961</id><snippet>.add_argument</snippet></ROW><ROW><id>8671961</id><snippet>.add_subparsers</snippet></ROW><ROW><id>8671961</id><snippet>'AA'</snippet></ROW><ROW><id>8671961</id><snippet>_get_nargs_pattern</snippet></ROW><ROW><id>8671961</id><snippet>argparse.py</snippet></ROW><ROW><id>8671961</id><snippet>subpositional</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A[-AO]*)'</snippet></ROW><ROW><id>8671961</id><snippet>positional</snippet></ROW><ROW><id>8671961</id><snippet>nargs</snippet></ROW><ROW><id>8671961</id><snippet>None</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A-*)'</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A-*A-*A-*)'</snippet></ROW><ROW><id>8671961</id><snippet>'-*A'</snippet></ROW><ROW><id>8671961</id><snippet>'?'</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A?-*)'</snippet></ROW><ROW><id>8671961</id><snippet>'*'</snippet></ROW><ROW><id>8671961</id><snippet>'(-*[A-]*)'</snippet></ROW><ROW><id>8671961</id><snippet>'+'</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A[A-]*)'</snippet></ROW><ROW><id>8671961</id><snippet>nargs=None</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A[-AO]*)(-*A-*)'</snippet></ROW><ROW><id>8671961</id><snippet>['A', 'A']</snippet></ROW><ROW><id>8671961</id><snippet>subpositional</snippet></ROW><ROW><id>8671961</id><snippet>subpositional</snippet></ROW><ROW><id>8671961</id><snippet>positional</snippet></ROW><ROW><id>8671961</id><snippet>nargs='?'</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A[-AO]*)(-*A?-*)'</snippet></ROW><ROW><id>8671961</id><snippet>*</snippet></ROW><ROW><id>8671961</id><snippet>['AA', '']</snippet></ROW><ROW><id>8671961</id><snippet>subpositional</snippet></ROW><ROW><id>8671961</id><snippet>nargs='+'</snippet></ROW><ROW><id>8671961</id><snippet>'(-*A[-AO]*)(-*A[A-]*)'</snippet></ROW><ROW><id>8671961</id><snippet>subpositional a</snippet></ROW><ROW><id>8671961</id><snippet>subpositional a b c d</snippet></ROW><ROW><id>8671961</id><snippet>['AAAA', 'A']</snippet></ROW><ROW><id>8672120</id><snippet># -*- coding: utf-8 -*-
import simplejson,urllib,urllib2  

query=[u'नेपाल']
urlbase="http://search.twitter.com/search.json"
values={'q':query[0].encode('utf-8')}
data=urllib.urlencode(values)
req=urllib2.Request(urlbase,data)
response=urllib2.urlopen(req)
json=simplejson.load(response)
print json
</snippet></ROW><ROW><id>8672188</id><snippet>def __getattribute__(self, attribute): 
    try: 
        defattrib = object.__getattribute__(self, attribute) 
    except AttributeError,e: 
        defattrib = None 
    if defattrib is not None: 
        return defattrib             

    # find attributes in user defined functions 
            ... 


    # if an attribute cannot be found 
    raise AttributeError(attribute) 
</snippet></ROW><ROW><id>8672267</id><snippet>def was_published_today(self):&lt;br&gt;
    return self.pub_date.date() == datetime.date.today()</snippet></ROW><ROW><id>8672267</id><snippet>[&lt;Poll: Poll object&gt;]</snippet></ROW><ROW><id>8672356</id><snippet>threading.Thread(name=&lt;name&gt;, target=...)
</snippet></ROW><ROW><id>8672356</id><snippet>thread = threading.Thread(*args, **kwargs)
thread.name = &lt;name&gt;
</snippet></ROW><ROW><id>8672381</id><snippet>buffer += struct.pack("L", crc)
</snippet></ROW><ROW><id>8672798</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = """1.782-100.799
... -18.107-102.016
... -17.504104.059"""
&gt;&gt;&gt; re.findall('-?\d{1,3}(?:\.\d{3})*', s)
['1.782', '-100.799', '-18.107', '-102.016', '-17.504', '104.059']
</snippet></ROW><ROW><id>8672798</id><snippet>&gt;&gt;&gt; [re.findall('-?\d{1,3}(?:\.\d{3})*', ln) for ln in s.split("\n")]
[['1.782', '-100.799'], ['-18.107', '-102.016'], ['-17.504', '104.059']]
</snippet></ROW><ROW><id>8672918</id><snippet>DBSession = .. extensions=[ZopeTransactionExtension()])</snippet></ROW><ROW><id>8672918</id><snippet>import transaction
transaction.commit()
</snippet></ROW><ROW><id>8672918</id><snippet>session.add</snippet></ROW><ROW><id>8672966</id><snippet>(.+ .+)( \1)+
</snippet></ROW><ROW><id>8672966</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(.+ .+)( \1)+')
&gt;&gt;&gt; match = regex.search('3 0 5 5 1 5 1 6 8')
&gt;&gt;&gt; match.group(0)    # entire match
'5 1 5 1'
&gt;&gt;&gt; match.group(1)    # repeating portion
'5 1'
&gt;&gt;&gt; match.start()     # start index of repeating portion
6

&gt;&gt;&gt; match = regex.search('2 0 6 3 1 6 3 1 6 3 1')
&gt;&gt;&gt; match.group(1)
'6 3 1'
</snippet></ROW><ROW><id>8672966</id><snippet>(.+ .+)</snippet></ROW><ROW><id>8672966</id><snippet>( \1)+</snippet></ROW><ROW><id>8672966</id><snippet>'3 0 5 5 1 5 1 6 8'</snippet></ROW><ROW><id>8672966</id><snippet>(.+ .+)</snippet></ROW><ROW><id>8672966</id><snippet>( \1)+</snippet></ROW><ROW><id>8672966</id><snippet>(.+ .+)</snippet></ROW><ROW><id>8672966</id><snippet>'5 1'</snippet></ROW><ROW><id>8672966</id><snippet>' 5 1'</snippet></ROW><ROW><id>8672966</id><snippet>( \1)+</snippet></ROW><ROW><id>8673074</id><snippet>in</snippet></ROW><ROW><id>8673074</id><snippet>__eq__</snippet></ROW><ROW><id>8673074</id><snippet>__eq__</snippet></ROW><ROW><id>8673074</id><snippet>NotImplemented</snippet></ROW><ROW><id>8673074</id><snippet>__eq__</snippet></ROW><ROW><id>8673096</id><snippet>unittest</snippet></ROW><ROW><id>8673096</id><snippet>class ExtendedTestCase(unittest.TestCase):

  def assertRaisesWithMessage(self, msg, func, *args, **kwargs):
    try:
      func(*args, **kwargs)
      self.assertFail()
    except Exception as inst:
      self.assertEqual(inst.message, msg)
</snippet></ROW><ROW><id>8673096</id><snippet>ExtendedTestCase</snippet></ROW><ROW><id>8673096</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>8673217</id><snippet>import csv
import sys

from xml.etree import ElementTree
from xml.dom import minidom

video_data = ((256, 336000),
              (512, 592000),
              (768, 848000),
              (1128, 1208000))

with open(sys.argv[1], 'rU') as f:
    reader = csv.DictReader(f)
    for row in reader:
        switch_tag = ElementTree.Element('switch')

        for suffix, bitrate in video_data:
            attrs = {'src': ("mp4:soundcheck/{year}/{id}/{file_root_name}_{suffix}.mp4"
                             .format(suffix=str(suffix), **row)),
                     'system-bitrate': str(bitrate),
                     }
            ElementTree.SubElement(switch_tag, 'video', attrs)
        print minidom.parseString(ElementTree.tostring(switch_tag)).toprettyxml()
</snippet></ROW><ROW><id>8673217</id><snippet>&lt;?xml version="1.0" ?&gt;
&lt;switch&gt;
    &lt;video src="mp4:soundcheck/1/clay_aiken/02_sc_ca_sorry_256.mp4" system-bitrate="336000"/&gt;
    &lt;video src="mp4:soundcheck/1/clay_aiken/02_sc_ca_sorry_512.mp4" system-bitrate="592000"/&gt;
    &lt;video src="mp4:soundcheck/1/clay_aiken/02_sc_ca_sorry_768.mp4" system-bitrate="848000"/&gt;
    &lt;video src="mp4:soundcheck/1/clay_aiken/02_sc_ca_sorry_1128.mp4" system-bitrate="1208000"/&gt;
&lt;/switch&gt;
</snippet></ROW><ROW><id>8673476</id><snippet>import</snippet></ROW><ROW><id>8673476</id><snippet>sys.path</snippet></ROW><ROW><id>8673476</id><snippet>imp.load_source()</snippet></ROW><ROW><id>8673476</id><snippet>foo</snippet></ROW><ROW><id>8673476</id><snippet>sys.path</snippet></ROW><ROW><id>8673476</id><snippet>foo</snippet></ROW><ROW><id>8673476</id><snippet>imp.load_source()</snippet></ROW><ROW><id>8673476</id><snippet>import</snippet></ROW><ROW><id>8673518</id><snippet>filename = optionMenuWidget.cget
</snippet></ROW><ROW><id>8673998</id><snippet>def buildClass(name, node):
  global _classes
  symbol_table = {}
  args = []
  varnames = ""
  varnameswithtypes = ""
  for subnode in node:
    args.append(buildClass(subnode.tag, subnode))
    if (subnode.tag not in symbol_table):
      symbol_table[subnode.tag] = 1
      varnames += subnode.tag + " "
      if (not subnode.tag[0] == subnode.tag[0].upper()):
        varnameswithtypes += subnode.tag + ":array "
      else:
        varnameswithtypes += subnode.tag + ":object "

  print 'Building class for:', name
  for (key, value) in node.items():
    args.append(value)
    varnames += key + " "
    if (key == "variable_name"):
      varnameswithtypes+= key + ":" + value + " "
    elif (is_numeric(value)):
      varnameswithtypes+= key + ":numeric" + " "
    else:
      varnameswithtypes+= key + ":text" + " "
  varnames = varnames.strip()
  varnameswithtypes = varnameswithtypes.strip()

  if (_classes.has_key(name)):
    if (len(_classes[name]) &lt; len(varnameswithtypes)):
      _classes[name] = varnameswithtypes
  else:
    _classes[name] = varnameswithtypes

  if (not name[0] == name[0].upper()):
    #this is an array, do not create a class, just return an array
    return args
  #print varnames, args
  globals()[name] = namedtuple(name, varnames)
  obj = globals()[name](*args)
  #print dump(obj)
  return obj
</snippet></ROW><ROW><id>8673998</id><snippet>_classdefs = {}
def getClassDef(name):
  global _classdefs, _classes
  _classdefs[name] = "class " + name + "(object):\n   def __init__(self):\n"    
  classvars = _classes[name].split(" ")
  for x in classvars:
    vals = x.split(":")
    if (vals[1] == "array"):
      c = _classes[vals[0]].split(":")[0]
      if (not _classdefs.has_key(c)):
        getClassDef(c)
      _classdefs[name] += "    self." + vals[0] + " = []\n"
    elif (vals[1] == "text"):
      _classdefs[name] += "    self." + vals[0] + " = \"\"\n"
    elif (vals[1] == "numeric"):
      _classdefs[name] += "    self." + vals[0] + " = 0\n"
    elif (vals[1] == "object"):
      if (not _classdefs.has_key(vals[0])):
        getClassDef(vals[0])
      subclassvars = _classes[vals[0]].split(" ")
      for z in subclassvars:
        if (z.split(":")[0] == "variable_name"):
          _classdefs[name] += "    self." + z.split(":")[1] + " = " + vals[0] + "()\n"
</snippet></ROW><ROW><id>8673998</id><snippet>getClassDef("RootObj")
for x in _classdefs.keys():
  print _classdefs[x]
</snippet></ROW><ROW><id>8673998</id><snippet>&lt;RootObj val1="ValueOne" stat1="Stat1" stat2="Stat2"&gt;
  &lt;internalarray&gt;
    &lt;InternalObject val1="12" val2="12" /&gt;
    &lt;InternalObject val1="13" val2="13" /&gt;
    &lt;InternalObject val1="14" val2="14" /&gt;
    &lt;InternalObject val1="15" val2="15" /&gt;
  &lt;/internalarray&gt;
  &lt;InternalObject2 val1="12" val2="13" variable_name="intObj2" /&gt;
&lt;/RootObj&gt;
</snippet></ROW><ROW><id>8673998</id><snippet>class RootObj(object):
   def __init__(self):
    self.internalarray = []
    self.intObj2 = InternalObject2()
    self.val1 = ""
    self.stat2 = ""
    self.stat1 = ""

class InternalObject2(object):
   def __init__(self):
    self.val2 = 0
    self.val1 = 0

class InternalObject(object):
   def __init__(self):
    self.val2 = 0
    self.val1 = 0
</snippet></ROW><ROW><id>8674052</id><snippet>&gt;&gt;&gt; for i, row in enumerate(numbers):
        if 3 in row:
            print i, row.index(3)   

1 8
2 5
7 3
8 0

&gt;&gt;&gt; numbers[1][8]
3
&gt;&gt;&gt; numbers[2][5]
3
&gt;&gt;&gt; numbers[7][3]
3
&gt;&gt;&gt; numbers[8][0]
3
</snippet></ROW><ROW><id>8674158</id><snippet>http://foo.com/api/bad/path/get</snippet></ROW><ROW><id>8674158</id><snippet>monkey</snippet></ROW><ROW><id>8674158</id><snippet>/get</snippet></ROW><ROW><id>8674158</id><snippet>/monkey/get/monkey_id={some number}</snippet></ROW><ROW><id>8674158</id><snippet>/monkey/{some mnumber}/</snippet></ROW><ROW><id>8674158</id><snippet>http://foo.com/api/monkey/help</snippet></ROW><ROW><id>8674158</id><snippet>http://foo.com/api/monkey/help</snippet></ROW><ROW><id>8674948</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; mymeans = [13,5]  
&gt;&gt;&gt; # stdevs = sqrt(5),sqrt(2)
&gt;&gt;&gt; # corr = .3 / (sqrt(5)*sqrt(2) = .134
&gt;&gt;&gt; mycov = [[5,.3], [.3,2]]   
&gt;&gt;&gt; np.cov(np.random.multivariate_normal(mymeans,mycov,500000).T)
array([[ 4.99449936,  0.30506976],
       [ 0.30506976,  2.00213264]])
&gt;&gt;&gt; np.corrcoef(np.random.multivariate_normal(mymeans,mycov,500000).T)
array([[ 1.        ,  0.09629313],
       [ 0.09629313,  1.        ]])
</snippet></ROW><ROW><id>8675049</id><snippet>!</snippet></ROW><ROW><id>8675049</id><snippet>!pip install packagename
</snippet></ROW><ROW><id>8675049</id><snippet>!</snippet></ROW><ROW><id>8675049</id><snippet>%sc</snippet></ROW><ROW><id>8675049</id><snippet>!!</snippet></ROW><ROW><id>8675049</id><snippet>%sx</snippet></ROW><ROW><id>8675049</id><snippet>_</snippet></ROW><ROW><id>8675150</id><snippet>set</snippet></ROW><ROW><id>8675150</id><snippet>__hash__</snippet></ROW><ROW><id>8675150</id><snippet>class MyClass(object):
    def __init__(self, s):
        self.s = s
    def __cmp__(self, other):
        return cmp(self.s, other.s)
    def __hash__(self):
        return hash(self.s) # Use default hash for 'self.s'

instance1, instance2 = MyClass("a"), MyClass("a")
instance3 = MyClass("b")

print instance2==instance1             # True
print instance2 in [instance1]         # True
print instance2 in set([instance1])    # True
</snippet></ROW><ROW><id>8675155</id><snippet>lp.lines[0].strokeColor = colors.grey</snippet></ROW><ROW><id>8675155</id><snippet>lp.strokeColor = colors.grey</snippet></ROW><ROW><id>8675155</id><snippet>ScatterPlot</snippet></ROW><ROW><id>8675155</id><snippet>AreaLinePlot</snippet></ROW><ROW><id>8675155</id><snippet>AreaLinePlot</snippet></ROW><ROW><id>8675241</id><snippet>c</snippet></ROW><ROW><id>8675241</id><snippet>&gt;&gt;&gt; myList = ['a','b','c','d']
&gt;&gt;&gt; for c,element in enumerate(myList):
...     print c,element
... 
0 a
1 b
2 c
3 d
</snippet></ROW><ROW><id>8675241</id><snippet>1</snippet></ROW><ROW><id>8675241</id><snippet>c</snippet></ROW><ROW><id>8675329</id><snippet>x = 5
def foo():
    x = 10
def bar():
    global x
    x = 20

&gt;&gt;&gt; x      # global variable x
5
&gt;&gt;&gt; foo()  # foo creates a new x in the local scope
&gt;&gt;&gt; x      # global x is unchanged
5
&gt;&gt;&gt; bar()  # bar uses global keyword to reference the global x
&gt;&gt;&gt; x      # global x is now 20
20
</snippet></ROW><ROW><id>8675329</id><snippet>attack</snippet></ROW><ROW><id>8675329</id><snippet>hitpoints</snippet></ROW><ROW><id>8675329</id><snippet>money</snippet></ROW><ROW><id>8675329</id><snippet>global attack, hitpoints, money</snippet></ROW><ROW><id>8675337</id><snippet>def OnNew(self, evt):
    if self.panel:
        self.panel.Destroy()
    self.panel = MainPanel(self)
    self.SendSizeEvent()
</snippet></ROW><ROW><id>8675337</id><snippet>Layout</snippet></ROW><ROW><id>8675337</id><snippet>SendSizeEvent()</snippet></ROW><ROW><id>8675337</id><snippet>class MainPanel(wx.lib.scrolledpanel.ScrolledPanel):
    def __init__(self,parent):
        wx.lib.scrolledpanel.ScrolledPanel.__init__(self, parent=parent)
        self.SetupScrolling()
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.fill()
        self.SetSizer(self.sizer)

    def fill(self):
        tup = [wx.StaticText(self, wx.ID_ANY, "I'm static text") for i in range(200)]
        self.sizer.AddMany(tup)
        self.Layout()

class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title="FrameTest", size=(600,800))
        self.InitMenu()
        self.panel = None
        self.panel = MainPanel(self)

    def InitMenu(self):
        self.menuBar = wx.MenuBar()
        menuFile = wx.Menu()
        menuFile.Append(wx.ID_NEW, "&amp;New")
        self.Bind(wx.EVT_MENU, self.OnNew, id=wx.ID_NEW)
        self.menuBar.Append(menuFile, "&amp;File")
        self.SetMenuBar(self.menuBar)

    def OnNew(self, evt):
        if self.panel:
            self.panel.sizer.Clear()
        self.panel.fill()
</snippet></ROW><ROW><id>8675411</id><snippet> print minidom.parseString(ElementTree.tostring(switch_tag)).toprettyxml()
</snippet></ROW><ROW><id>8675411</id><snippet> print header + ElementTree.tostring(switch_tag) + footer
</snippet></ROW><ROW><id>8675411</id><snippet>header</snippet></ROW><ROW><id>8675411</id><snippet>footer</snippet></ROW><ROW><id>8675411</id><snippet>prettyxml()</snippet></ROW><ROW><id>8675411</id><snippet> '\n'.join(minidom.parseString(ElementTree.tostring(switch_tag)).toprettyxml().splitlines()[1:])
</snippet></ROW><ROW><id>8675417</id><snippet>shlex.split()</snippet></ROW><ROW><id>8675417</id><snippet>import shlex, re

def foo(query):
    pieces = shlex.split(query)
    include, exclude = [], []
    for piece in pieces:
        if piece.startswith('-'):
            exclude.append(re.compile(piece[1:]))
        else:
            include.append(re.compile(piece))
    def validator(s):
        return (all(r.search(s) for r in include) and
                not any(r.search(s) for r in exclude))
    return validator
</snippet></ROW><ROW><id>8675417</id><snippet>&gt;&gt;&gt; test = foo('matchthis -butnothis -"and not this"')
&gt;&gt;&gt; test("we should matchthis...")
True
&gt;&gt;&gt; test("some stuff matchthis blah and not this...")
False
</snippet></ROW><ROW><id>8675417</id><snippet>*</snippet></ROW><ROW><id>8675417</id><snippet>.*</snippet></ROW><ROW><id>8675445</id><snippet>map</snippet></ROW><ROW><id>8675445</id><snippet>objectArrray = [ c() for c in classArray ]
</snippet></ROW><ROW><id>8675445</id><snippet>map</snippet></ROW><ROW><id>8675445</id><snippet>map(lambda c: c(), classArray)
</snippet></ROW><ROW><id>8675445</id><snippet>lambda</snippet></ROW><ROW><id>8675445</id><snippet>map</snippet></ROW><ROW><id>8676151</id><snippet>stopIt</snippet></ROW><ROW><id>8676151</id><snippet>MyProcessing(self)</snippet></ROW><ROW><id>8676151</id><snippet>self</snippet></ROW><ROW><id>8676151</id><snippet>self.done = True</snippet></ROW><ROW><id>8676151</id><snippet>self</snippet></ROW><ROW><id>8676151</id><snippet>MyProcessing</snippet></ROW><ROW><id>8676151</id><snippet>MyProcessing</snippet></ROW><ROW><id>8676151</id><snippet>    if (not self.done) and self.notifier.check_events():
        print "check_events is True"
        self.notifier.read_events()
</snippet></ROW><ROW><id>8676202</id><snippet>Line2D</snippet></ROW><ROW><id>8676202</id><snippet>Line2D</snippet></ROW><ROW><id>8676202</id><snippet>Line2D.set_data()</snippet></ROW><ROW><id>8676202</id><snippet>Line2D</snippet></ROW><ROW><id>8676202</id><snippet>Line2D</snippet></ROW><ROW><id>8676202</id><snippet>Line2D</snippet></ROW><ROW><id>8676202</id><snippet>def renderMeasureLine(self, mouseEvent):            
    if (self.measuring and mouseEvent.inaxes == self.ui.canvas2.axes
            and len(self.pointListX) &gt; 0):
        if self.dotted_line in self.ui.canvas2.axes.lines:
            x, y = self.dotted_line.get_data()
            x.append(mouseEvent.xdata)
            y.append(mouseEvent.ydata)
            self.dotted_line.set_data(x, y)
        else:
            self.dotted_line = Line2D(
                [self.pointListX[-1],mouseEvent.xdata],
                [self.pointListY[-1],mouseEvent.ydata],
                color=color, axes=self.ui.canvas2.axes, ls = '--')
            self.ui.canvas2.axes.add_line(self.dotted_line)

        self.ui.canvas2.blit(self.ui.canvas2.axes.bbox)
        self.ui.canvas2.draw_idle()
</snippet></ROW><ROW><id>8676489</id><snippet>sudo port install py27-mysql
</snippet></ROW><ROW><id>8676489</id><snippet>sudo port install py27-mysql mysql5-server
</snippet></ROW><ROW><id>8676489</id><snippet>/opt/local</snippet></ROW><ROW><id>8676489</id><snippet>/opt/local/bin/python2.7
</snippet></ROW><ROW><id>8676489</id><snippet>/opt/local</snippet></ROW><ROW><id>8676850</id><snippet>def architectural_to_float(text):
    ''' Convert architectural measurements to inches.

        &gt;&gt;&gt; for text in """15-3/4",12' 6-3/4",3/4",3/4',15',15",15.5'""".split(','):
        ...     print text.ljust(10), '--&gt;', architectural_to_float(text)
        ...
        15-3/4"    --&gt; 15.75
        12' 6-3/4" --&gt; 150.75
        3/4"       --&gt; 0.75
        3/4'       --&gt; 9.0
        15'        --&gt; 180.0
        15"        --&gt; 15.0
        15.5'      --&gt; 186.0

    '''
    # See http://stackoverflow.com/questions/8675714
    text = text.replace('"', '').replace(' ', '')
    feet, sep, inches = text.rpartition("'")
    floatfeet, sep, fracfeet = feet.rpartition('-')
    feetnum, sep, feetdenom = fracfeet.partition('/')
    feet = float(floatfeet or 0) + float(feetnum or 0) / float(feetdenom or 1)
    floatinches, sep, fracinches = inches.rpartition('-')
    inchesnum, sep, inchesdenom = fracinches.partition('/')
    inches = float(floatinches or 0) + float(inchesnum or 0) / float(inchesdenom or 1)
    return feet * 12.0 + inches
</snippet></ROW><ROW><id>8676951</id><snippet>from django.contrib.auth.models import User
from django.db import models

class Book(models.Model):
    name = models.CharField(max_length=10)

class UserBook(models.Model):
    user = models.OneToOneField(User)
    purchasedBooks = models.ManyToManyField(Book)
</snippet></ROW><ROW><id>8676951</id><snippet>(.env)testme$ ./manage.py sqlclear testapp</snippet></ROW><ROW><id>8676951</id><snippet>BEGIN;
DROP TABLE "testapp_userbook";
DROP TABLE "testapp_userbook_purchasedBooks";
DROP TABLE "testapp_book";
COMMIT;
</snippet></ROW><ROW><id>8676951</id><snippet>BEGIN;
ALTER TABLE "testapp_userbook_purchasedBooks" DROP CONSTRAINT "userbook_id_refs_id_8bda4b0";
DROP TABLE "testapp_userbook";
DROP TABLE "testapp_userbook_purchasedBooks";
DROP TABLE "testapp_book";
COMMIT;
</snippet></ROW><ROW><id>8676951</id><snippet>BEGIN;
ALTER TABLE `testapp_userbook_purchasedBooks` DROP FOREIGN KEY `userbook_id_refs_id_8bda4b0`;
DROP TABLE `testapp_userbook`;
DROP TABLE `testapp_userbook_purchasedBooks`;
DROP TABLE `testapp_book`;
COMMIT;
</snippet></ROW><ROW><id>8676951</id><snippet>introspection</snippet></ROW><ROW><id>8676951</id><snippet>from django.db import connection
cursor = connection.cursor()
connection.introspection.get_table_list(cursor)

[u'auth_group', u'auth_group_permissions', u'auth_message', u'auth_permission', u'auth_user', u'auth_user_groups', u'auth_user_user_permissions', u'django_content_type', u'django_session', u'django_site', u'testapp_book', u'testapp_userbook', u'testapp_userbook_purchasedBooks']
</snippet></ROW><ROW><id>8677197</id><snippet>class InvoiceAbstract(models.Model):
    invoiceid = models.CharField(max_length=20)
    totalamount = models.DecimalField(max_digits=15,decimal_places=2,default=0)
    downpayment = models.DecimalField(max_digits=15,decimal_places=2,default=0)
    subtotal = models.DecimalField(max_digits=15,decimal_places=2,default=0)
    tax = models.DecimalField(max_digits=15,decimal_places=2,default=0)
    amountdue = models.DecimalField(max_digits=15,decimal_places=2,default=0)
    payment = models.DecimalField(max_digits=15,decimal_places=2,default=0)
    originaldate = models.DateTimeField()
    changedate = models.DateTimeField()
    version = models.IntegerField(default=1)
    operator = models.CharField(max_length=20)
    class Meta:
        abstract = True

class Invoice(InvoiceAbstract):
    pass
class InvoiceHistory(InvoiceAbstract):
    pass
</snippet></ROW><ROW><id>8677296</id><snippet>&gt;&gt;&gt; from gmpy import mpz
&gt;&gt;&gt; a=mpz(7)
&gt;&gt;&gt; bin(a)
'0b111'
&gt;&gt;&gt; a=a.setbit(48)
&gt;&gt;&gt; bin(a)
'0b1000000000000000000000000000000000000000000000111'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8677296</id><snippet>&gt;&gt;&gt; from gmpy2 import xmpz
&gt;&gt;&gt; a=xmpz(7)
&gt;&gt;&gt; bin(a)
'0b111'
&gt;&gt;&gt; a[48]=1
&gt;&gt;&gt; bin(a)
'0b1000000000000000000000000000000000000000000000111'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8677460</id><snippet>stdin</snippet></ROW><ROW><id>8677460</id><snippet>stdout</snippet></ROW><ROW><id>8677460</id><snippet>stdin</snippet></ROW><ROW><id>8677460</id><snippet>stdin</snippet></ROW><ROW><id>8677460</id><snippet>stdout</snippet></ROW><ROW><id>8677460</id><snippet>python first.py | python second.py
</snippet></ROW><ROW><id>8677460</id><snippet># first.py
import sys
for line in open("input.txt"):
    processed_line = process_line(line)
    sys.stdout.write(processed_line)

# second.py
import sys
for line in sys.stdin:
    processed_line = process_line(line)
    sys.stdout.write(processed_line)
</snippet></ROW><ROW><id>8677873</id><snippet>investment1 = Investment()</snippet></ROW><ROW><id>8677873</id><snippet>investment1.save()</snippet></ROW><ROW><id>8677873</id><snippet>investment1.person.add(person_model)</snippet></ROW><ROW><id>8677873</id><snippet>investment1.person.create(name='foo')</snippet></ROW><ROW><id>8677874</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; G = nx.Graph()
&gt;&gt;&gt; # add nodes, edges, etc.
...
&gt;&gt;&gt; nx.draw_spring(G)
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>8677877</id><snippet>defaults</snippet></ROW><ROW><id>8677877</id><snippet>VERSIONER_PYTHON_PREFER_32_BIT</snippet></ROW><ROW><id>8677877</id><snippet>man python</snippet></ROW><ROW><id>8677877</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>8677877</id><snippet>arch</snippet></ROW><ROW><id>8677877</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>8677877</id><snippet>$ unset VERSIONER_PYTHON_PREFER_32_BIT 
$ arch -x86_64 /usr/bin/python -c "import sys;print(sys.maxsize)"
9223372036854775807
$ export VERSIONER_PYTHON_PREFER_32_BIT=yes
$ arch -x86_64 /usr/bin/python -c "import sys;print(sys.maxsize)"
2147483647
#
# But avoiding the wrapper program ....
#
$ arch -x86_64 /usr/bin/python2.7 -c "import sys;print(sys.maxsize)"
9223372036854775807
$ arch -i386 /usr/bin/python2.7 -c "import sys;print(sys.maxsize)"
2147483647
</snippet></ROW><ROW><id>8677891</id><snippet>class MobileManager(object):
    def __init__(self):
        for prefix_name in prefix:
            for method_name in method:
                func = lambda self, args: getattr(self.mobileLib, method_name)(args, prefix)
                full_method_name = "%s%s" % (prefix, method_name)
                setattr(self, full_method_name, func)
        ...
</snippet></ROW><ROW><id>8678141</id><snippet>text1 = ' '.join([alphabet[bisect.bisect(f_list, random.random())] for i in xrange(300)])
</snippet></ROW><ROW><id>8678141</id><snippet>' '.join(list)</snippet></ROW><ROW><id>8678141</id><snippet>' '</snippet></ROW><ROW><id>8678141</id><snippet>','</snippet></ROW><ROW><id>8678141</id><snippet>text1 = ' '.join(alphabet[bisect.bisect(f_list, random.random())] for i in xrange(300))
</snippet></ROW><ROW><id>8678141</id><snippet>text1 = ''.join([alphabet[bisect.bisect(f_list, random.random())] for i in xrange(300)])
</snippet></ROW><ROW><id>8678141</id><snippet>for word in text1.split():
    fd.inc(word)
print fd
</snippet></ROW><ROW><id>8678141</id><snippet>''.join(list)</snippet></ROW><ROW><id>8678141</id><snippet>string.split()</snippet></ROW><ROW><id>8678143</id><snippet>Message.objects.filter(mention=someuser)</snippet></ROW><ROW><id>8678143</id><snippet>Message.objects.filter(content__contains='@1')</snippet></ROW><ROW><id>8678143</id><snippet>get_content_display()</snippet></ROW><ROW><id>8678448</id><snippet>{% regroup %}</snippet></ROW><ROW><id>8678448</id><snippet>events = Event.objects.select_related.all()
</snippet></ROW><ROW><id>8678448</id><snippet>{% regroup events by date as events_by_date %}
{% for date in events_by_date %}
    &lt;div class="content"&gt;
    &lt;h1&gt;{{ date.grouper|date:"d F Y" }}&lt;/h1&gt;
    {% for event in date.list %}
        {% include "partials/event.html" %}
    {% endfor %}
    &lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>8678448</id><snippet>%B</snippet></ROW><ROW><id>8678448</id><snippet>strftime</snippet></ROW><ROW><id>8678448</id><snippet>F</snippet></ROW><ROW><id>8678448</id><snippet>date</snippet></ROW><ROW><id>8678521</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8678521</id><snippet>/</snippet></ROW><ROW><id>8678521</id><snippet>//</snippet></ROW><ROW><id>8678521</id><snippet>float()</snippet></ROW><ROW><id>8678521</id><snippet>sum(li, 0.0)</snippet></ROW><ROW><id>8678521</id><snippet>math.fsum</snippet></ROW><ROW><id>8678521</id><snippet>1/((N-1)*x)</snippet></ROW><ROW><id>8678521</id><snippet>(1/(N-1))*x</snippet></ROW><ROW><id>8678521</id><snippet>1 / (x * (N-1))</snippet></ROW><ROW><id>8678521</id><snippet>x / (N-1)</snippet></ROW><ROW><id>8678604</id><snippet>crop</snippet></ROW><ROW><id>8678604</id><snippet>from PIL import Image

img = Image.open(r'yRc2a.png')
img = img.convert('RGBA')
img = img.crop((0, 0, 82, 82))
img.save(r'out.png')
</snippet></ROW><ROW><id>8678604</id><snippet>convert</snippet></ROW><ROW><id>8678604</id><snippet>convert</snippet></ROW><ROW><id>8679213</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; a[(1,2)] = 'foo'
&gt;&gt;&gt; a[(1,[])]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>8679213</id><snippet>&gt;&gt;&gt; hash((1,2))
3713081631934410656
&gt;&gt;&gt; hash((1,3))
3713081631933328131
&gt;&gt;&gt; hash((2,2))
3713082714462658231
&gt;&gt;&gt; abs(hash((1,2)) - hash((1,3)))
1082525
&gt;&gt;&gt; abs(hash((1,2)) - hash((2,2)))
1082528247575
</snippet></ROW><ROW><id>8679514</id><snippet>&gt;&gt;&gt; def roundtrip(x):
...     return time.mktime(datetime.datetime.fromtimestamp(x).timetuple())
...
&gt;&gt;&gt; roundtrip(2**31-1-7200)
2147476447.0
&gt;&gt;&gt; roundtrip(2**31-7200)
OverflowError: mktime argument out of range
&gt;&gt;&gt; roundtrip(2**31-1)
OverflowError: mktime argument out of range
&gt;&gt;&gt; roundtrip(2**31)
ValueError: timestamp out of range for platform time_t
</snippet></ROW><ROW><id>8679841</id><snippet>Return</snippet></ROW><ROW><id>8679841</id><snippet>self.search()</snippet></ROW><ROW><id>8679841</id><snippet>Tab</snippet></ROW><ROW><id>8679841</id><snippet>Tab</snippet></ROW><ROW><id>8679841</id><snippet>Return</snippet></ROW><ROW><id>8679841</id><snippet>Return</snippet></ROW><ROW><id>8679841</id><snippet>self.button1.bind('&lt;Return&gt;', self.search)
</snippet></ROW><ROW><id>8679841</id><snippet>root.bind('&lt;Return&gt;', self.search)
</snippet></ROW><ROW><id>8679841</id><snippet>root = tk.Tk()</snippet></ROW><ROW><id>8679841</id><snippet>button.bind</snippet></ROW><ROW><id>8679841</id><snippet>master.bind</snippet></ROW><ROW><id>8679841</id><snippet>import Tkinter as tk

class SimpleApp(object):
    def __init__(self, master, **kwargs):
        title = kwargs.pop('title')
        frame = tk.Frame(master, **kwargs)
        frame.grid()
        button = tk.Button(frame, text = 'search', command = self.search)
        button.grid()
        button.bind('&lt;Return&gt;', self.search)
        # uncomment if you want `&lt;Return&gt;` bound everywhere.
        # master.bind('&lt;Return&gt;', self.search)  
    def search(self,*args):
        print('searching...')

def basic():
    root = tk.Tk()
    app = SimpleApp(root, title = 'Hello, world')
    root.mainloop()

basic()
</snippet></ROW><ROW><id>8679841</id><snippet>    button.bind('&lt;Return&gt;', self.search)
    button.focus()
</snippet></ROW><ROW><id>8679841</id><snippet>Return</snippet></ROW><ROW><id>8679841</id><snippet>self.search()</snippet></ROW><ROW><id>8679841</id><snippet>*args</snippet></ROW><ROW><id>8679841</id><snippet>**kwargs</snippet></ROW><ROW><id>8679841</id><snippet>**kwargs</snippet></ROW><ROW><id>8679841</id><snippet>__init__</snippet></ROW><ROW><id>8679841</id><snippet>**kwargs</snippet></ROW><ROW><id>8679841</id><snippet>def __init__(self, master, **kwargs):
</snippet></ROW><ROW><id>8679841</id><snippet>SimpleApp</snippet></ROW><ROW><id>8679841</id><snippet>app = SimpleApp(root, title = 'Hello, world')
</snippet></ROW><ROW><id>8679841</id><snippet>kwargs</snippet></ROW><ROW><id>8679841</id><snippet>{'title':'Hello, world'}</snippet></ROW><ROW><id>8679841</id><snippet>**kwargs</snippet></ROW><ROW><id>8679841</id><snippet>kwargs</snippet></ROW><ROW><id>8679841</id><snippet>kwargs</snippet></ROW><ROW><id>8679841</id><snippet>Frame</snippet></ROW><ROW><id>8679841</id><snippet>frame = tk.Frame(master, **kwargs)
</snippet></ROW><ROW><id>8679841</id><snippet>kwargs</snippet></ROW><ROW><id>8679841</id><snippet>frame = tk.Frame(master, title = 'Hello, world')
</snippet></ROW><ROW><id>8679841</id><snippet>Frame</snippet></ROW><ROW><id>8679841</id><snippet>**kwargs</snippet></ROW><ROW><id>8679841</id><snippet>Frame</snippet></ROW><ROW><id>8679841</id><snippet>Frame</snippet></ROW><ROW><id>8679841</id><snippet>*args</snippet></ROW><ROW><id>8679841</id><snippet>search</snippet></ROW><ROW><id>8679841</id><snippet>def search(self,*args):
</snippet></ROW><ROW><id>8679841</id><snippet>args</snippet></ROW><ROW><id>8679841</id><snippet>search</snippet></ROW><ROW><id>8679841</id><snippet>search</snippet></ROW><ROW><id>8679841</id><snippet>self.search</snippet></ROW><ROW><id>8679841</id><snippet>button = tk.Button(frame, text = 'search', command = self.search)
</snippet></ROW><ROW><id>8679841</id><snippet>self.search()</snippet></ROW><ROW><id>8679841</id><snippet>    button.bind('&lt;Return&gt;', self.search)
</snippet></ROW><ROW><id>8679841</id><snippet>self.search(event)</snippet></ROW><ROW><id>8679841</id><snippet>Return</snippet></ROW><ROW><id>8679841</id><snippet>event</snippet></ROW><ROW><id>8679841</id><snippet>search</snippet></ROW><ROW><id>8679841</id><snippet>def search(self, event = None):
    ...
</snippet></ROW><ROW><id>8679841</id><snippet>search</snippet></ROW><ROW><id>8679841</id><snippet>event</snippet></ROW><ROW><id>8679841</id><snippet>search</snippet></ROW><ROW><id>8679876</id><snippet>tour.gallery_ptr.images.all()</snippet></ROW><ROW><id>8679987</id><snippet>from lxml import etree
from collections import defaultdict
from pprint import pprint

doc="""&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Basic&gt;
    &lt;Segment&gt;
        &lt;Sample value="12" data2="25" data3="23"/&gt;
        &lt;Sample value="13" data2="0" data3="323"/&gt;
        &lt;Sample value="14" data2="2" data3="3"/&gt;
    &lt;/Segment&gt;
&lt;/Basic&gt;
"""
el = etree.fromstring(doc)
data2 = el.xpath('//@data2')
dataX = el.xpath('//@*[starts-with(name(), "data")]')
print data2
print dataX

# With iteration over Sample elements, like in J.F. Sebastian answer, but with XPath
d = defaultdict(list)
for sample in el.xpath('//Sample'):
    for attr_name, attr_value in sample.items():
        d[attr_name].append(attr_value)

pprint(dict(d))
</snippet></ROW><ROW><id>8679987</id><snippet>['25', '0', '2']
['25', '23', '0', '323', '2', '3']
{'data2': ['25', '0', '2'],
 'data3': ['23', '323', '3'],
 'value': ['12', '13', '14']}
</snippet></ROW><ROW><id>8680011</id><snippet>global</snippet></ROW><ROW><id>8680011</id><snippet>global</snippet></ROW><ROW><id>8680011</id><snippet>sys.modules</snippet></ROW><ROW><id>8680015</id><snippet>u</snippet></ROW><ROW><id>8680015</id><snippet>encoded = "unicodestring".encode("UTF8")

decoded = s.decode("UTF8")
</snippet></ROW><ROW><id>8680110</id><snippet>Foo</snippet></ROW><ROW><id>8680110</id><snippet>Foo</snippet></ROW><ROW><id>8680110</id><snippet>class Foo(object):
    def __init__(self, name):
        self.name = name

name = "Hello"
foo = Foo(name)
name[0] = "J"
</snippet></ROW><ROW><id>8680110</id><snippet>dict</snippet></ROW><ROW><id>8680110</id><snippet>name</snippet></ROW><ROW><id>8680110</id><snippet>name = "J" + name[1:]
</snippet></ROW><ROW><id>8680162</id><snippet>class LinkTextBrowser(QTextBrowser):
    def contextMenuEvent(self, event):
        self.link_pos = event.pos()
        # correct for scrolling
        self.link_pos.setX(self.link_pos.x() + self.horizontalScrollBar().value())
        self.link_pos.setY(self.link_pos.y() + self.verticalScrollBar().value())
        menu = self.createStandardContextMenu(self.link_pos)

        # do stuff to menu

        menu.popup(event.globalPos())
</snippet></ROW><ROW><id>8680603</id><snippet>open</snippet></ROW><ROW><id>8680603</id><snippet>__builtin__</snippet></ROW><ROW><id>8680603</id><snippet>from __builtin__ import *</snippet></ROW><ROW><id>8680603</id><snippet>&gt;&gt;&gt; print repr(open)
&lt;built-in function open&gt;

&gt;&gt;&gt; print open.__module__
__builtin__

&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; print __builtin__.open
&lt;built-in function open&gt;
</snippet></ROW><ROW><id>8680603</id><snippet>&gt;&gt;&gt; o = open
&gt;&gt;&gt; print repr(open)
&lt;built-in function open&gt;
&gt;&gt;&gt; print repr(o)
&lt;built-in function open&gt;
&gt;&gt;&gt; o('file.txt')
&lt;open file 'file.txt', mode 'r' at 0x107fe49c0&gt;
</snippet></ROW><ROW><id>8681099</id><snippet>class ADUser(object):
    numEmployees = 0
    def __init__(self):
        self.firstname = self.firstname() # returns a random name from a big list
        self.lastname = self.lastname()   # returns a random name from a big list
        self.fullname = self.firstname + " " + self.lastname
        ADUser.numEmployees += 1
        self.employeeid = ADUser.numEmployees
</snippet></ROW><ROW><id>8681343</id><snippet>@auth.requires_membership('admin')
def register()
    admin_auth = session.auth
    auth.is_logged_in = lambda: False
    def post_register(form):
        session.auth = admin_auth
        auth.user = session.auth.user
    auth.settings.register_onaccept = post_register
    return dict(form=auth.register())
</snippet></ROW><ROW><id>8681343</id><snippet>@auth.requires_membership('admin')
def register():
    form = SQLFORM(db.auth_user)
    if form.validate():
        admin_user = auth.user
        auth.get_or_create_user(form.vars)
        auth.user = admin_user
    return dict(form=form)
</snippet></ROW><ROW><id>8681395</id><snippet>findAll</snippet></ROW><ROW><id>8681395</id><snippet>soup = BeautifulSoup(html)

mostwant = {'class': 'productlist_mostwanted_item '}
griditem = {'class': 'productlist_grid_item '}

divs = soup.findAll(attrs = mostwant) + soup.findAll(attrs = griditem)

for product in divs:
    item = product.h2.a.text.strip()
    price = re.search('\d+\.\d+', product.findAll('p')[1].text).group(0)
    print "%s - (%s)" % (item, price)
</snippet></ROW><ROW><id>8681647</id><snippet>class QueueForm(forms.Form):
queue = forms.ModelChoiceField(queryset=Order.objects.all())
</snippet></ROW><ROW><id>8681652</id><snippet>data.docinfo.URL</snippet></ROW><ROW><id>8681652</id><snippet>In [22]: data = html.parse('http://httpbin.org/redirect/2')

In [23]: data.docinfo.URL
Out[23]: u'http://httpbin.org/get'
</snippet></ROW><ROW><id>8681764</id><snippet>&gt;&gt;&gt; np.fft.fft(Msig.T, axis=0)
array([[ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.-1.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j, -1.+0.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.+1.j,  0.+0.j]])
</snippet></ROW><ROW><id>8681764</id><snippet>&gt;&gt;&gt; np.fft.fft(Msig).T
array([[ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.-1.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j, -1.+0.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.+1.j,  0.+0.j]])
</snippet></ROW><ROW><id>8681998</id><snippet>import sys
print(sys.argv)
</snippet></ROW><ROW><id>8681998</id><snippet>% test.py
['/home/unutbu/pybin/test.py']
% test.py foo
['/home/unutbu/pybin/test.py', 'foo']
% test.py foo bar
['/home/unutbu/pybin/test.py', 'foo', 'bar']
% python test.py foo
['test.py', 'foo']
</snippet></ROW><ROW><id>8681998</id><snippet>sys.argv</snippet></ROW><ROW><id>8682379</id><snippet>d = dict()

for record in result:
    objectname = 'Customer' + str(record[0])
    customername = str(record[1])
    d[objectname] = Customer(customername)

print d
</snippet></ROW><ROW><id>8682379</id><snippet># Initiate customer dictionary
customers = dict()

class Customer:
    def __init__(self, fname, lname):
        self.fname = fname
        self.lname = lname
        self.address = None
        self.zip = None
        self.state = None
        self.city = None
        self.phone = None

    def add_address(self, address, zp, state, city):
        self.address = address
        self.zip = zp
        self.state = state
        self.city = city

    def add_phone(self, number):
        self.phone = number


# Observe that these functions are not belonging to the class.    
def _print_layout(object):
        print object.fname, object.lname
        print '==========================='
        print 'ADDRESS:'
        print object.address
        print object.zip
        print object.state
        print object.city
        print '\nPHONE:'
        print object.phone
        print '\n'

def print_customer(customer_name):
    _print_layout(customers[customer_name])

def print_customers():
    for customer_name in customers.iterkeys():
        _print_layout(customers[customer_name])

if __name__ == '__main__':
    # Add some customers to dictionary:
    customers['Steve'] = Customer('Steve', 'Jobs')
    customers['Niclas'] = Customer('Niclas', 'Nilsson')
    # Add some more data
    customers['Niclas'].add_address('Some road', '12312', 'WeDon\'tHaveStates', 'Hultsfred')
    customers['Steve'].add_phone('123-543 234')

    # Search one customer and print him
    print 'Here are one customer searched:'
    print 'ooooooooooooooooooooooooooooooo'
    print_customer('Niclas')

    # Print all the customers nicely
    print '\n\nHere are all customers'
    print 'oooooooooooooooooooooo'
    print_customers()
</snippet></ROW><ROW><id>8682478</id><snippet>text</snippet></ROW><ROW><id>8682478</id><snippet>read()</snippet></ROW><ROW><id>8682478</id><snippet>Def makemarcov(fileloc):
    with open(fileloc, 'r') as f:
        text = f.read()
    #proceed...
</snippet></ROW><ROW><id>8682478</id><snippet>open()</snippet></ROW><ROW><id>8682478</id><snippet>try</snippet></ROW><ROW><id>8682478</id><snippet>with</snippet></ROW><ROW><id>8682478</id><snippet>yield</snippet></ROW><ROW><id>8682790</id><snippet>def parse_signed_request(signed_request, secret):
    """
    Parse signed_request given by Facebook (usually via POST),
    decrypt with app secret.

    Arguments:
    signed_request -- Facebook's signed request given through POST
    secret -- Application's app_secret required to decrpyt signed_request
    """

    if '.' in signed_request:
        (esig, payload) = signed_request.split('.')
    else:
        return {}

    sig = urlsafe_b64decode(str(esig))
    data = _parse_json(urlsafe_b64decode(str(payload)))

    if not isinstance(data, dict):
        raise SignedRequestError('Pyload is not a json string!')
        return {}

    if data['algorithm'].upper() == 'HMAC-SHA256':
        if hmac.new(secret, payload, hashlib.sha256).digest() == sig:
            return data
    else:

        raise SignedRequestError('Not HMAC-SHA256 encrypted!')

    return {}


def get_user_from_cookie(cookies, app_id, app_secret):
    """Parses the cookie set by the official Facebook JavaScript SDK.

    cookies should be a dictionary-like object mapping cookie names to
    cookie values.

    If the user is logged in via Facebook, we return a dictionary with the
    keys "uid" and "access_token". The former is the user's Facebook ID,
    and the latter can be used to make authenticated requests to the Graph API.
    If the user is not logged in, we return None.

    Download the official Facebook JavaScript SDK at
    http://github.com/facebook/connect-js/. Read more about Facebook
    authentication at http://developers.facebook.com/docs/authentication/.
    """
    cookie = cookies.get('fbsr_' + app_id, '')
    if not cookie:
        return None
    response = parse_signed_request(cookie, app_secret)
    if not response:
        return None

    args = dict(code=response['code'], client_id=app_id,
                client_secret=app_secret, redirect_uri='')

    file = \
        urllib.urlopen('https://graph.facebook.com/oauth/access_token?'
                       + urllib.urlencode(args))
    try:
        token_response = file.read()
    finally:
        file.close()

    access_token = cgi.parse_qs(token_response)['access_token'][-1]
    logging.debug('returning cookie')
    return dict(uid=response['user_id'], access_token=access_token)
</snippet></ROW><ROW><id>8682790</id><snippet>current_user</snippet></ROW><ROW><id>8682790</id><snippet>@property
def current_user(self):
    if not hasattr(self, '_current_user'):
        self._current_user = None
        cookie = get_user_from_cookie(self.request.cookies,
                facebookconf.FACEBOOK_APP_ID,
                facebookconf.FACEBOOK_APP_SECRET)
        if cookie:

            # Store a local instance of the user data so we don't need
            # a round-trip to Facebook on every request
            user = FBUser.get_by_key_name(cookie['uid'])
            if not user:
                graph = GraphAPI(cookie['access_token'])
                profile = graph.get_object('me')
                user = FBUser(key_name=str(profile['id']),
                              id=str(profile['id']),
                              name=profile['name'],
                              profile_url=profile['link'],
                              access_token=cookie['access_token'])
                user.put()
            elif user.access_token != cookie['access_token']:
                user.access_token = cookie['access_token']
                user.put()
            self._current_user = user
    return self._current_user
</snippet></ROW><ROW><id>8682871</id><snippet>bullet1</snippet></ROW><ROW><id>8682871</id><snippet>bullet2</snippet></ROW><ROW><id>8682871</id><snippet>bX1</snippet></ROW><ROW><id>8682871</id><snippet>bY1</snippet></ROW><ROW><id>8682871</id><snippet>bullet1.x = 3</snippet></ROW><ROW><id>8682871</id><snippet>bullets_array[1].y = 3</snippet></ROW><ROW><id>8682871</id><snippet>bX1 = 3</snippet></ROW><ROW><id>8682871</id><snippet># snip initialization, etc.

class Bullet():
    def __init__(self, surface, x_coord, y_coord):
        self.surface = surface
        self.x = x_coord
        self.y = y_coord
        return

    def update(self, y_amount=5):
        self.y += y_amount
        self.surface.set_at((self.x, self.y),(255,255,255))
        return

bullets_array = []

# snip 

while quit == false:    # Inside the main loop...
    for event in pygame.event.get():
        #snip
        if event.type == pygame.KEYDOWN and event.key == pygame.K_z:
            bullets_array.append(background, player_x, player_y)

    #snip

    for bullet in bullets_array:
        bullet.update()
        # ...and check if the bullet is off the screen.
        # If so, remove it from the array.
</snippet></ROW><ROW><id>8682871</id><snippet>Bullet</snippet></ROW><ROW><id>8682871</id><snippet>pygame.sprite.Sprite</snippet></ROW><ROW><id>8682871</id><snippet>pygame.sprite.Group</snippet></ROW><ROW><id>8683031</id><snippet>__len__</snippet></ROW><ROW><id>8683031</id><snippet>__getitem__</snippet></ROW><ROW><id>8683031</id><snippet>__setitem__</snippet></ROW><ROW><id>8683031</id><snippet>__delitem__</snippet></ROW><ROW><id>8683031</id><snippet>__iter__</snippet></ROW><ROW><id>8683031</id><snippet>__contains__</snippet></ROW><ROW><id>8683240</id><snippet>ShortName.objects.distinct() \
         .filter().values()      # looks better
</snippet></ROW><ROW><id>8683240</id><snippet>return some_collection.get_objects(locator=l5) \
                      .get_distinct(case_insensitive=True) \
                      .filter(predicate=query(q5)) \
                      .values()
</snippet></ROW><ROW><id>8683431</id><snippet>Point coordFromPixelLocation (pixelX, pixelY, pixelWidth, pixelHeight, minCoordX, maxCoordX, minCoordY, maxCoordY)
{
    xPercent = pixelX / pixelWidth;
    yPercent = pixelY / pixelHeight;

    newX = minCoordX + (maxCoordX - minCoordX) * xPercent;
    newY = minCoordY + (maxCoordY - minCoordY) * yPercent;

    return Point (newX, newY);
}
</snippet></ROW><ROW><id>8683522</id><snippet>indexed=False</snippet></ROW><ROW><id>8683522</id><snippet>street_search</snippet></ROW><ROW><id>8683522</id><snippet>street</snippet></ROW><ROW><id>8683522</id><snippet>street</snippet></ROW><ROW><id>8683522</id><snippet>indexed=False</snippet></ROW><ROW><id>8683655</id><snippet>from django.db import models

class MyField(models.CharField):

     def to_python(self, value):
         if value in ('Y', '1'):
             return True
         if value in ('N', '0'):
             return False
         raise ValueError
</snippet></ROW><ROW><id>8684029</id><snippet>import nltk.collocations
import nltk.corpus
import collections

bgm    = nltk.collocations.BigramAssocMeasures()
finder = nltk.collocations.BigramCollocationFinder.from_words(
    nltk.corpus.brown.words())
scored = finder.score_ngrams( bgm.likelihood_ratio  )

# Group bigrams by first word in bigram.                                        
prefix_keys = collections.defaultdict(list)
for key, scores in scored:
   prefix_keys[key[0]].append((key[1], scores))

# Sort keyed bigrams by strongest association.                                  
for key in prefix_keys:
   prefix_keys[key].sort(key = lambda x: -x[1])

print 'doctor', prefix_keys['doctor'][:5]
print 'baseball', prefix_keys['baseball'][:5]
print 'happy', prefix_keys['happy'][:5]
</snippet></ROW><ROW><id>8684029</id><snippet>doctor [('bills', 35.061321987405748), (',', 22.963930079491501), 
  ('annoys', 19.009636692022365), 
  ('had', 16.730384189212423), ('retorted', 15.190847940499127)]

baseball [('game', 32.110754519752291), ('cap', 27.81891372457088), 
  ('park', 23.509042621473505), ('games', 23.105033513054011), 
  ("player's",    16.227872863424668)]

happy [("''", 20.296341424483998), ('Spahn', 13.915820697905589), 
 ('family', 13.734352182441569), 
 (',', 13.55077617193821), ('bodybuilder', 13.513265447290536)
</snippet></ROW><ROW><id>8684050</id><snippet>import os
print os.getcwd()
</snippet></ROW><ROW><id>8684050</id><snippet>C:/Users/Python/filepractice.py</snippet></ROW><ROW><id>8684050</id><snippet>c:
cd \Users\Python
python filepractice.py
</snippet></ROW><ROW><id>8684106</id><snippet>import csv
import sys

from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement, Comment, tostring

from xml.dom import minidom

def prettify(doctype, elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = doctype + ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ", encoding = 'utf-8')

doctype = '&lt;!DOCTYPE smil PUBLIC "-//W3C//DTD SMIL 2.0//EN" "http://www.w3.org/2001/SMIL20/SMIL20.dtd"&gt;'

video_data = ((256, 336000),
              (512, 592000),
              (768, 848000),
              (1128, 1208000))

with open(sys.argv[1], 'rU') as f:
    reader = csv.DictReader(f)
    for row in reader:
        root = Element('smil')
        root.set('xmlns', 'http://www.w3.org/2001/SMIL20/Language')
        head = SubElement(root, 'head')
        meta = SubElement(head, 'meta base="rtmp://cp23636.edgefcs.net/ondemand"')
        body = SubElement(root, 'body')

        switch_tag = ElementTree.SubElement(body, 'switch')

        for suffix, bitrate in video_data:
            attrs = {'src': ("mp4:soundcheck/{year}/{id}/{file_root_name}_{suffix}.mp4"
                             .format(suffix=str(suffix), **row)),
                     'system-bitrate': str(bitrate),
                     }
            ElementTree.SubElement(switch_tag, 'video', attrs)

        print prettify(doctype, root)
</snippet></ROW><ROW><id>8684527</id><snippet>raw_input</snippet></ROW><ROW><id>8684527</id><snippet>frequency = int(frequency)</snippet></ROW><ROW><id>8684616</id><snippet>  attrs = {'src': ("mp4:soundcheck/{year}/{id}/{file_root_name}_{suffix}.mp4"
                             .format(suffix=str(suffix), **row)),
                     'system-bitrate': str(bitrate),
                     }
</snippet></ROW><ROW><id>8684616</id><snippet>    output = open('file_root_name'+'.smil', 'w')
</snippet></ROW><ROW><id>8684616</id><snippet>    output = open(row['file_root_name']+'.smil', 'w')
</snippet></ROW><ROW><id>8684616</id><snippet>    output.close
</snippet></ROW><ROW><id>8684616</id><snippet>with open(row['file_root_name']+'.smil', 'w') as output:
    output.write(xml + doctype + doc)
</snippet></ROW><ROW><id>8684635</id><snippet>&lt;pre&gt;{{ code }}&lt;/pre&gt;</snippet></ROW><ROW><id>8684955</id><snippet>import os.path
file_name = row['file_root_name']+'.smil'
full_path = os.path.join(path, file_name)
output = open(full_path, 'w')
</snippet></ROW><ROW><id>8684955</id><snippet>file_name = '%s.smil' % row['file_root_name']
</snippet></ROW><ROW><id>8684955</id><snippet>path = '%i-%i' % (year, id)
</snippet></ROW><ROW><id>8685177</id><snippet>make_repeater</snippet></ROW><ROW><id>8685177</id><snippet>n</snippet></ROW><ROW><id>8685177</id><snippet>2</snippet></ROW><ROW><id>8685177</id><snippet>twice = lambda s: s * 2

print twice('word')
print twice(5)
</snippet></ROW><ROW><id>8685177</id><snippet>def twice(s):
    return s * 2

print twice('word')
print twice(5)
</snippet></ROW><ROW><id>8685177</id><snippet>print 'word' * 2
print 5 * 2
</snippet></ROW><ROW><id>8685177</id><snippet>'word' * 2</snippet></ROW><ROW><id>8685177</id><snippet>'wordword'</snippet></ROW><ROW><id>8685177</id><snippet>5 * 2</snippet></ROW><ROW><id>8685177</id><snippet>10</snippet></ROW><ROW><id>8685425</id><snippet>lxml</snippet></ROW><ROW><id>8685425</id><snippet>import html5lib

body = "&lt;p&gt;Hello World. Greetings from &lt;strong&gt;Mars.&lt;/strong&gt;&lt;/p&gt;"
doc = html5lib.parse(body, treebuilder="lxml")
print doc.text_content()
</snippet></ROW><ROW><id>8685425</id><snippet>from lxml import html
doc = html.fromstring(body)
print doc.text_content()
</snippet></ROW><ROW><id>8685425</id><snippet>html5lib</snippet></ROW><ROW><id>8685425</id><snippet>from lxml.html import html5parser
doc = html5parser.fromstring(body)
print doc.xpath("string()")
</snippet></ROW><ROW><id>8685520</id><snippet>chromo</snippet></ROW><ROW><id>8685520</id><snippet>return</snippet></ROW><ROW><id>8685520</id><snippet>codon</snippet></ROW><ROW><id>8685520</id><snippet>gene</snippet></ROW><ROW><id>8685520</id><snippet>gene</snippet></ROW><ROW><id>8685520</id><snippet>chromo</snippet></ROW><ROW><id>8685520</id><snippet>chromos</snippet></ROW><ROW><id>8685539</id><snippet>input_vars = ('a', 'b', 'c', 'd', 'A', 'G', 'T', 'M', 'P')
output_vars = ('Y', 'E', 'r')
</snippet></ROW><ROW><id>8685539</id><snippet>template_values</snippet></ROW><ROW><id>8685539</id><snippet>template_values = {
    'url': url,
    'url_linktext': url_linktext,
}
</snippet></ROW><ROW><id>8685539</id><snippet>kwargs</snippet></ROW><ROW><id>8685539</id><snippet>template_values</snippet></ROW><ROW><id>8685539</id><snippet>kwargs = {}
complete = True
for var in input_vars:
    template_values[var] = self.request.get(var)
    if var in self.request:
        try:
            kwargs[var] = float(self.request[var])
        except ValueError:
            # not a number
            complete = False
    else:
        # not provided
        complete = False
</snippet></ROW><ROW><id>8685539</id><snippet>complete</snippet></ROW><ROW><id>8685539</id><snippet>complete</snippet></ROW><ROW><id>8685539</id><snippet>True</snippet></ROW><ROW><id>8685539</id><snippet>complete</snippet></ROW><ROW><id>8685539</id><snippet>False</snippet></ROW><ROW><id>8685539</id><snippet>if complete:
    output = islm(**kwargs)
    for var, value in zip(output_vars, output):
        template_values[var] = value
else:
    for var in output_vars:
        template_values[var] = 'ENTER VALUES'
</snippet></ROW><ROW><id>8685539</id><snippet>template_values</snippet></ROW><ROW><id>8685539</id><snippet>'ENTER VALUES'</snippet></ROW><ROW><id>8685539</id><snippet>**kwargs</snippet></ROW><ROW><id>8685539</id><snippet>def islm(a, b, c, d, A, G, T, M, P):
    matrix_a = # ...
    # ...
    return np.dot( # ...
</snippet></ROW><ROW><id>8685637</id><snippet>date1</snippet></ROW><ROW><id>8685637</id><snippet>date2</snippet></ROW><ROW><id>8685637</id><snippet>datetime.date</snippet></ROW><ROW><id>8685637</id><snippet>date1 = datetime.date.today()</snippet></ROW><ROW><id>8685760</id><snippet>mainloop</snippet></ROW><ROW><id>8685760</id><snippet>while True:
    event=wait_for_event()
    event.process()
    if main_window_has_been_destroyed(): 
        break
</snippet></ROW><ROW><id>8685760</id><snippet>mainloop</snippet></ROW><ROW><id>8685760</id><snippet>mainloop</snippet></ROW><ROW><id>8685813</id><snippet>url = 'https://api.github.com/some/endpoint'
payload = {'some': 'data'}
headers = {'content-type': 'application/json'}

r = requests.post(url, data=json.dumps(payload), headers=headers)
</snippet></ROW><ROW><id>8685813</id><snippet>.get</snippet></ROW><ROW><id>8685813</id><snippet>.post</snippet></ROW><ROW><id>8685813</id><snippet>headers = {'foobar': 'raboof'}
requests.get('http://himom.com', headers=headers)
</snippet></ROW><ROW><id>8685815</id><snippet>#!/usr/bin/python

import sys
import time

def main_loop():
    while 1:
        # do your stuff...
        time.sleep(0.1)

if __name__ == '__main__':
    try:
        main_loop()
    except KeyboardInterrupt:
        print &gt;&gt; sys.stderr, '\nExiting by user request.\n'
        sys.exit(0)
</snippet></ROW><ROW><id>8685859</id><snippet>&gt;&gt;&gt; chromo[gene1Pos], chromo[gene2Pos] = chromo[gene2Pos], chromo[gene1Pos]
</snippet></ROW><ROW><id>8685873</id><snippet>DictWriter</snippet></ROW><ROW><id>8685873</id><snippet>writer = csv.writer(open('dict.csv', 'wb'))
for key, value in mydict.items():
   writer.writerow([key, value])
</snippet></ROW><ROW><id>8685873</id><snippet>reader = csv.reader(open('dict.csv', 'rb'))
mydict = dict(x for x in reader)
</snippet></ROW><ROW><id>8686014</id><snippet>foo.subMethod() # foo.someMethod() is called internally
</snippet></ROW><ROW><id>8686014</id><snippet>foo.someMethod().subMethod()
</snippet></ROW><ROW><id>8686014</id><snippet>subMethod</snippet></ROW><ROW><id>8686014</id><snippet>someMethod</snippet></ROW><ROW><id>8686014</id><snippet>foo.subMethod(foo.anyMethod())
</snippet></ROW><ROW><id>8686014</id><snippet>foo</snippet></ROW><ROW><id>8686079</id><snippet>import numpy as np

np.column_stack((dates, data))
</snippet></ROW><ROW><id>8686243</id><snippet>connect_kwargs = dict(username="foo")
if authenticate:
   connect_kwargs['password'] = "bar"
   connect_kwargs['otherarg'] = "zed"
connect(**connect_kwargs)
</snippet></ROW><ROW><id>8686243</id><snippet>username="foo"</snippet></ROW><ROW><id>8686243</id><snippet>if</snippet></ROW><ROW><id>8686243</id><snippet>password = "bar" if authenticate else None
otherarg = "zed" if authenticate else None
connect(username="foo", password=password, otherarg=otherarg)
</snippet></ROW><ROW><id>8686268</id><snippet>ElemenTtree</snippet></ROW><ROW><id>8686268</id><snippet>minidom</snippet></ROW><ROW><id>8686268</id><snippet>def prettify(elem, doctype=None):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    if doctype is not None:
        reparsed.insertBefore(doctype, reparsed.documentElement)
    return reparsed.toprettyxml(indent="  ", encoding = 'utf-8')

doctype = minidom.getDOMImplementation('').createDocumentType(
    'smil', '-//W3C//DTD SMIL 2.0//EN',
    'http://www.w3.org/2001/SMIL20/SMIL20.dtd')
</snippet></ROW></DATA>