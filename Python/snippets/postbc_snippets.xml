<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>6920394</id><snippet>def stoppable_iter(iterable):
    it = iter(iterable)
    for v in it:
        x = yield v
        if x:
            yield
            return
</snippet></ROW><ROW><id>6920394</id><snippet>it = stoppable_iter(range(10))
for i in it:
    for j in range(10):
        print i, j
        if i*j == 20:
            it.send(StopIteration) # or any value that evaluates as True
            break
</snippet></ROW><ROW><id>6920394</id><snippet>&gt;&gt;&gt; t = stoppable_iter(range(10))
&gt;&gt;&gt; t.next()
0
&gt;&gt;&gt; t.next()
1
&gt;&gt;&gt; t.send(StopIteration)
&gt;&gt;&gt; t.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>6920468</id><snippet>GoogleAppEngineLauncher -&gt; Preferences</snippet></ROW><ROW><id>6920662</id><snippet>sum(i.freq for i in items[0:41])
</snippet></ROW><ROW><id>6920662</id><snippet>sums = [items[0].freq]
for i in items[1:]:
    sums.append(sums[-1] + i.freq)
</snippet></ROW><ROW><id>6920662</id><snippet>list</snippet></ROW><ROW><id>6920662</id><snippet>items</snippet></ROW><ROW><id>6920669</id><snippet>In [10]: f=open('test2.py')

In [11]: content=f.read()

In [12]: content
Out[12]: '#!/usr/bin/env python\n# coding: utf-8\n\nimport math,sys,time;i=0\nwhile 1: sys.stdout.write("\\r"+\':(_\xe2\x80\x8b_)\'[:3+int(round(math.sin(\xe2\x80\x8bi)))]+\'n\'+\':(__)\'[3+int(ro\xe2\x80\x8bund(math.sin(i))):]);sys.s\xe2\x80\x8btdout.flush();time.sleep(.\xe2\x80\x8b15);i+=0.5*math.pi\n'
</snippet></ROW><ROW><id>6920669</id><snippet>'\xe2\x80\x8b'</snippet></ROW><ROW><id>6920669</id><snippet>ZERO WIDTH SPACE</snippet></ROW><ROW><id>6920669</id><snippet>In [24]: print(repr(u'\N{ZERO WIDTH SPACE}'.encode('utf-8')))
'\xe2\x80\x8b'
</snippet></ROW><ROW><id>6920669</id><snippet>import math, sys, time; i=0
while 1: sys.stdout.write('\r'+':(__)'[:3+int(round(math.sin(i)))]+'n'+':(__)'[3+int(round(math.sin(i))):]); sys.stdout.flush(); time.sleep(0.15); i+=0.5*math.pi
</snippet></ROW><ROW><id>6920696</id><snippet>temp</snippet></ROW><ROW><id>6920696</id><snippet>items</snippet></ROW><ROW><id>6920696</id><snippet>items.remove()</snippet></ROW><ROW><id>6920696</id><snippet>temp</snippet></ROW><ROW><id>6920696</id><snippet>temp = items[:]</snippet></ROW><ROW><id>6920696</id><snippet>items</snippet></ROW><ROW><id>6921225</id><snippet>button = Tk.Button(master=frame, text='press', command= lambda: action(someNumber))</snippet></ROW><ROW><id>6921263</id><snippet>inspectdb</snippet></ROW><ROW><id>6921340</id><snippet>import argparse
import zmq

parser = argparse.ArgumentParser(description='zeromq server/client')
parser.add_argument('--bar')
args = parser.parse_args()

if args.bar:
    # client
    context = zmq.Context()
    socket = context.socket(zmq.REQ)
    socket.connect('tcp://127.0.0.1:5555')
    socket.send(args.bar)
    msg = socket.recv()
    print msg
else:
    # server
    context = zmq.Context()
    socket = context.socket(zmq.REP)
    socket.bind('tcp://127.0.0.1:5555')
    while True:
        msg = socket.recv()
        if msg == 'zeromq':
            socket.send('ah ha!')
        else:
            socket.send('...nah')
</snippet></ROW><ROW><id>6921419</id><snippet>python2.6</snippet></ROW><ROW><id>6921477</id><snippet>u</snippet></ROW><ROW><id>6921477</id><snippet>import re

name = "拉柏多公园"
# the string of Chinese characters, with any number of spaces interspersed.
# The regex will match any surrounding spaces.
regex = r"\s*拉\s*柏\s*多\s*公\s*园\s*"
</snippet></ROW><ROW><id>6921477</id><snippet>reline = re.sub(regex, ' ' + name + ' ', line)
</snippet></ROW><ROW><id>6921477</id><snippet># -*- coding: utf-8 -*-

import re

name = u"拉柏多公园"
# the string of Chinese characters, with any number of spaces interspersed.
# The regex will match any surrounding spaces.
regex = ur"\s*拉\s*柏\s*多\s*公\s*园\s*"
</snippet></ROW><ROW><id>6921477</id><snippet>reline = re.sub(regex, u' ' + name + u' ', line)
</snippet></ROW><ROW><id>6921477</id><snippet>' ' + name + ' '</snippet></ROW><ROW><id>6921477</id><snippet>re</snippet></ROW><ROW><id>6921592</id><snippet>var s = "www.mydomain.com/invite/abc123";

if(s.indexOf("/")&gt;=0)
    alert(s.split("/").pop());
</snippet></ROW><ROW><id>6921609</id><snippet>class ClassDefinitions(db.Model):
    class_name = db.StringProperty()
    class_definition = db.TextProperty()
</snippet></ROW><ROW><id>6921609</id><snippet>()</snippet></ROW><ROW><id>6921685</id><snippet>equation1(*list_of_parameters)
</snippet></ROW><ROW><id>6921685</id><snippet>equation1(**dict_of_parameters)
</snippet></ROW><ROW><id>6921760</id><snippet>object_pairs_hook</snippet></ROW><ROW><id>6921760</id><snippet>&gt;&gt;&gt; json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{"foo":1, "bar": 2}')
OrderedDict([('foo', 1), ('bar', 2)])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6921760</id><snippet>json.loads</snippet></ROW><ROW><id>6922117</id><snippet>("django.core.files.uploadhandler.TemporaryFileUploadHandler",)
</snippet></ROW><ROW><id>6922117</id><snippet>with open('some/file/name', 'wb+') as destination:
    for chunk in video.chunks():
        destination.write(chunk)
</snippet></ROW><ROW><id>6922117</id><snippet>some/file/name</snippet></ROW><ROW><id>6922117</id><snippet>youtube_upload.main_upload</snippet></ROW><ROW><id>6922117</id><snippet>import youtube_upload</snippet></ROW><ROW><id>6922117</id><snippet>youtube_upload.main_upload(arguments, output)</snippet></ROW><ROW><id>6922117</id><snippet>arguments</snippet></ROW><ROW><id>6922117</id><snippet>['--email=email@gmail.com', '--password=password', '--title=title', '--description=description', '--category=Sports', 'path/to/file']
</snippet></ROW><ROW><id>6922117</id><snippet>output</snippet></ROW><ROW><id>6922117</id><snippet>sys.stdout</snippet></ROW><ROW><id>6922293</id><snippet>echo "Welcome back $name, we last saw you on $date";
</snippet></ROW><ROW><id>6922740</id><snippet>...
btnaText='ButtonA'
btna = Button(root, text = btnaText, command = lambda: sayHi(btnaText))
btna.pack()
</snippet></ROW><ROW><id>6922806</id><snippet>comma_operated = (4+7, 5+2)[-1]
</snippet></ROW><ROW><id>6923202</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.b64decode('AME=').decode('UTF-16')
u'\uc100'
&gt;&gt;&gt; base64.b64decode('AME=').decode('UTF-16LE')  
u'\uc100'
&gt;&gt;&gt; base64.b64decode('AME=').decode('UTF-16BE')
u'\xc1'
</snippet></ROW><ROW><id>6923425</id><snippet>tags = models.ManyToManyField('tags.Tag', ...)
</snippet></ROW><ROW><id>6923906</id><snippet>x = str(x)
cFile.write('\n' + x + '\n')
</snippet></ROW><ROW><id>6923906</id><snippet>yield x
</snippet></ROW><ROW><id>6923906</id><snippet>roots = list(Newton(polynomial, start))
</snippet></ROW><ROW><id>6923906</id><snippet>with open("curve.dat", "w") as output_file:
    output_file.write("\n".join(str(x) for x in roots)
</snippet></ROW><ROW><id>6923909</id><snippet>reduce(lambda x,y : x^y, [hash(item) for item in d.items()])
</snippet></ROW><ROW><id>6923909</id><snippet>hash(str(d))
</snippet></ROW><ROW><id>6923909</id><snippet>hash(repr(d))
</snippet></ROW><ROW><id>6924599</id><snippet>int(not(x))
</snippet></ROW><ROW><id>6924762</id><snippet>{{ value|floatformat:2|intcomma }}
</snippet></ROW><ROW><id>6925106</id><snippet># taking every 3rd element moves the start by 3
print list(islice(window(idlist, n=2),None,None,3))
</snippet></ROW><ROW><id>6925133</id><snippet>from pyvirtualdisplay import Display
display = Display(visible=0, size=(1024, 768))
display.start()

browser = webdriver.Firefox()
... more selenium code ...

display.stop()
</snippet></ROW><ROW><id>6925133</id><snippet>apt-get install -y xvfb xserver-xephyr</snippet></ROW><ROW><id>6925142</id><snippet>results = json.load(googleResponse)['results']

for result in results:
    for address_component in result['address_components']:
        if address_component['types'] == ['locality', 'political']
            # address_component['long_name'] and
            # address_component['short_name'] are your data
            break
</snippet></ROW><ROW><id>6925142</id><snippet>'results': # a list of resulting dicts
[
    { # one of those resulting dicts
        'address_components':  # a key, representing some other data
        [ # which, in this case, is a list of address component dicts
            { # like this
                'long_name': 'A String. The Long Name.'
                'short_name': 'Another String. The Short Name.'
                'types': # a list of type strings
                [
                    'locality', # one of the types
                    'political' # the other type
                ]
            }
        ]
    }
]
</snippet></ROW><ROW><id>6925147</id><snippet>_foo</snippet></ROW><ROW><id>6925173</id><snippet>&gt;&gt;&gt; val = "mandy"
&gt;&gt;&gt; mydict = {}
&gt;&gt;&gt; mydict[val] = []
&gt;&gt;&gt; mydict[val].append("Hello")
&gt;&gt;&gt; mydict[val].append("Mandy")
&gt;&gt;&gt; mydict
{'mandy': ['Hello', 'Mandy']}
</snippet></ROW><ROW><id>6925249</id><snippet>STARTTLS</snippet></ROW><ROW><id>6925937</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>6925937</id><snippet>.</snippet></ROW><ROW><id>6925937</id><snippet>url = urlparse.urlparse(address)
subdomain = url.hostname.split('.')[0]
</snippet></ROW><ROW><id>6926318</id><snippet>import itertools
import operator
import re
import csv
import pprint

class TaggedLine(str):
    """
    Override str to allow a tag to be added.
    """
    def __new__(cls, val, tag):
        return str.__new__(cls, val)

    def __init__(self, val, tag):
        super(TaggedLine, self).__init__(val)
        self.tag = tag

def sections(stream):
    """
    Tag each line of the stream with its [section] (or None)
    """
    section_pattern = re.compile('\[(.*)\]')
    section = None
    for line in stream:
        matcher = section_pattern.match(line)
        if matcher:
            section = matcher.group(1)
            continue
        yield TaggedLine(line, section)

def splitter(stream):
    """
    Group each stream into sections
    """
    return itertools.groupby(sections(stream), operator.attrgetter('tag'))

def parsed_sections(stream):
    for section, lines in splitter(stream):
        yield section, list(csv.reader(lines))

if __name__ == '__main__':
    with open('data.csv') as stream:
        for section, data in parsed_sections(stream):
            print 'section', section
            pprint.pprint(data[:2])
</snippet></ROW><ROW><id>6926318</id><snippet>section L02
[['g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'w',
  'w',
  'w',
  'w',
  'g',
  'g'],
 ['g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'w',
  'w',
  'w',
  'w',
  'w',
  'g',
  'g']]
section L01
[['d',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd'],
 ['d',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd',
  'd']]
</snippet></ROW><ROW><id>6926947</id><snippet>uniq_animal_groups = set(map(tuple, animal_groups))
</snippet></ROW><ROW><id>6927528</id><snippet>code = """
from module1 import method1
from module2 import method2

class foo(object):
   def say_foo(self):
      method1()
   def talk(self):
      method2()
"""

import ast, _ast

t = ast.parse(code)
for node in ast.walk(t):
    if isinstance(node, ast.ClassDef) and node.name == "foo":
        klass = node
        break

for node in ast.walk(klass):
    if isinstance(node, _ast.Call):
        print node.func.id
</snippet></ROW><ROW><id>6927528</id><snippet>method1
method2
</snippet></ROW><ROW><id>6927782</id><snippet>python
import sys, os

sys.path.insert(0, os.getenv('HOME') + '/.gdb_viz')
</snippet></ROW><ROW><id>6928284</id><snippet>re.sub(
    u'([\uD800-\uDBFF])([\uDC00-\uDFFF])',
    lambda m: unichr((ord(m.group(1))-0xD800&lt;&lt;10)+ord(m.group(2))-0xDC00+0x10000),
    s
)
</snippet></ROW><ROW><id>6928360</id><snippet>**kwargs</snippet></ROW><ROW><id>6928360</id><snippet>def foo(**kwargs):
  start_index = kwargs.pop('start_index', STARTINDEX_DEFAULT)
  end_index = kwargs.pop('end_index', ENDINDEX_DEFAULT)
  if kwargs:
    # Catch unexpected keyword arguments
    raise TypeError("%r are invalid keyword arguments" % (kwargs.keys())
  # Do something here...
</snippet></ROW><ROW><id>6928360</id><snippet>*args</snippet></ROW><ROW><id>6928360</id><snippet>**kwargs</snippet></ROW><ROW><id>6928360</id><snippet>**kwargs</snippet></ROW><ROW><id>6928360</id><snippet>None</snippet></ROW><ROW><id>6928360</id><snippet>None</snippet></ROW><ROW><id>6928360</id><snippet>**kwargs</snippet></ROW><ROW><id>6928360</id><snippet>object</snippet></ROW><ROW><id>6928478</id><snippet>heapq.merge()</snippet></ROW><ROW><id>6928478</id><snippet>def sortkey(row):
    return (row[5], row)

def unwrap(key):
    sortkey, row = key
    return row

from itertools import imap
FILE_LIST = map(file, ['foo.csv', 'bar.csv'])
input_iters = imap(sortkey, map(csv.csvreader, FILE_LIST))
output_iter = imap(unwrap, heapq.merge(*input_iters))
</snippet></ROW><ROW><id>6928505</id><snippet>v = StringVar(master=master)
</snippet></ROW><ROW><id>6928657</id><snippet>socket.gethostbyname</snippet></ROW><ROW><id>6928657</id><snippet>socket.gethostbyname</snippet></ROW><ROW><id>6928742</id><snippet>constants.py</snippet></ROW><ROW><id>6928742</id><snippet>from constants import *</snippet></ROW><ROW><id>6928742</id><snippet>SOME_CONSTANT</snippet></ROW><ROW><id>6928742</id><snippet>import re, file_one
for name,val in file_one.__dict__.items():
    if re.match("[A-Z0-9_]+", name):
        globals()[name] = val
</snippet></ROW><ROW><id>6928938</id><snippet>&gt;&gt;&gt; '\r'
'\r'
&gt;&gt;&gt; '\n'
'\n'
&gt;&gt;&gt; '\b'
'\x08'
&gt;&gt;&gt; '\c'
'\\c'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6928938</id><snippet>'\\'</snippet></ROW><ROW><id>6928938</id><snippet>r'c:\path\to\my\file.txt'</snippet></ROW><ROW><id>6928938</id><snippet>\t</snippet></ROW><ROW><id>6928943</id><snippet>__del__()</snippet></ROW><ROW><id>6928943</id><snippet>del</snippet></ROW><ROW><id>6928943</id><snippet>threading.Thread</snippet></ROW><ROW><id>6929116</id><snippet>random</snippet></ROW><ROW><id>6929116</id><snippet>_inst = Random()
seed = _inst.seed
random = _inst.random
uniform = _inst.uniform
triangular = _inst.triangular
...
</snippet></ROW><ROW><id>6929219</id><snippet>from Tkinter import *
Tk() # Add this
var = StringVar()
var.set('test');
</snippet></ROW><ROW><id>6929376</id><snippet>upload_to</snippet></ROW><ROW><id>6929376</id><snippet>strftime</snippet></ROW><ROW><id>6929376</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>6929576</id><snippet>import IPython.ipapi
ip = IPython.ipapi.get()

def run_this_plot(self, arg_s=''):
    """ Run
    Examples
    In [1]: import demo
    In [2]: rtp x y &lt;z&gt; 
    Where x, y, and z are numbers of any type
    """
    args = []
    for arg in arg_s.split():
        try:
            args.append(self.shell.user_ns[arg])
        except KeyError:
            raise ValueError("Invalid argument: %r" % arg)
    print "args: ", args
    # Do something here with args, such as plot them

# Activate the extension
ip.expose_magic("rtp", run_this_plot)
</snippet></ROW><ROW><id>6929722</id><snippet>hex(n)</snippet></ROW><ROW><id>6929722</id><snippet>n</snippet></ROW><ROW><id>6929722</id><snippet>rv = plpy.execute(plan, [ ( 'foo %s bar' % hex(6827) ) ] )
</snippet></ROW><ROW><id>6929722</id><snippet>string1</snippet></ROW><ROW><id>6929722</id><snippet>rv = plpy.execute(plan, [ ( string1 + hex(6827) ) ])
</snippet></ROW><ROW><id>6929722</id><snippet>import struct
bytes = struct.pack('i', 6827) # Ignoring endianness
</snippet></ROW><ROW><id>6929722</id><snippet>bytea</snippet></ROW><ROW><id>6930051</id><snippet>$string = "I want to go home 8890 7463 41234 and then go to 58639 6312 the cinema";

$newstring = preg_replace("/\b(\d+)\s+(?=\d+\b)/", "$1", $string);
// Note: Remove the \b on both sides if you want any words with a number combined.
// The \b tokens ensure that only blocks with only numbers are merged.

echo $newstring;
// I want to go home 8890746341234 and then go to 586396312 the cinema
</snippet></ROW><ROW><id>6930133</id><snippet>word_equivs = {}

for equiv in EQUIVALENCES:
    for word in equiv:
        word_equivs[word] = equiv
</snippet></ROW><ROW><id>6930133</id><snippet>def equivalent(s1, s2):
    e1 = word_equivs.get(s1) 
    e2 = word_equivs.get(s2)
    if e1 and e2:
        return e1 == e2
    else:
        return s1 == s2
</snippet></ROW><ROW><id>6930191</id><snippet>words</snippet></ROW><ROW><id>6930191</id><snippet>words[-1]</snippet></ROW><ROW><id>6930191</id><snippet>words[0]</snippet></ROW><ROW><id>6930191</id><snippet>len(words) == 0</snippet></ROW><ROW><id>6930191</id><snippet>nextWords</snippet></ROW><ROW><id>6930192</id><snippet>with open('log', 'w') as log:
    jobs = [gevent.spawn(log.write, 'event %d' % i) for i in range(10)]
    gevent.joinall(jobs)
</snippet></ROW><ROW><id>6930192</id><snippet>redis</snippet></ROW><ROW><id>6930223</id><snippet>- _single_leading_underscore: weak "internal use" indicator.  E.g. "from M
  import *" does not import objects whose name starts with an underscore.

- single_trailing_underscore_: used by convention to avoid conflicts with
  Python keyword, e.g.

  Tkinter.Toplevel(master, class_='ClassName')

- __double_leading_underscore: when naming a class attribute, invokes name
  mangling (inside class FooBar, __boo becomes _FooBar__boo; see below).

- __double_leading_and_trailing_underscore__: "magic" objects or
  attributes that live in user-controlled namespaces.  E.g. __init__,
  __import__ or __file__.  Never invent such names; only use them
  as documented.
</snippet></ROW><ROW><id>6930231</id><snippet>email_body = "&lt;table width='100%%'&gt;"
</snippet></ROW><ROW><id>6930405</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>6930405</id><snippet>loadtxt</snippet></ROW><ROW><id>6930405</id><snippet>In [33]: import numpy
In [34]: numpy.loadtxt
Out[34]: &lt;function loadtxt at 0x9f8bca4&gt;
</snippet></ROW><ROW><id>6930521</id><snippet>listz = [list(i) for i in zip(listx, listy)]
</snippet></ROW><ROW><id>6930521</id><snippet>listz = (list(i) for i in zip(listx, listy))
</snippet></ROW><ROW><id>6930577</id><snippet>POLLING_TIMEOUT_MS</snippet></ROW><ROW><id>6930577</id><snippet>?disable_channel=true</snippet></ROW><ROW><id>6930581</id><snippet>db</snippet></ROW><ROW><id>6930581</id><snippet>model = QtSql.QSqlTableModel(self, db)
model.setTable("YourTable")
model.select()

tableview = QtGui.QTableView()
tableview.setModel(model)
tableview.show()
</snippet></ROW><ROW><id>6930810</id><snippet>timeList</snippet></ROW><ROW><id>6930810</id><snippet>for line in tFile</snippet></ROW><ROW><id>6930810</id><snippet>'w'</snippet></ROW><ROW><id>6930810</id><snippet>'a'</snippet></ROW><ROW><id>6930810</id><snippet>timeList</snippet></ROW><ROW><id>6930810</id><snippet>parameterList</snippet></ROW><ROW><id>6930810</id><snippet>with open("curve.dat", "w") as outFile:
    for t,p in zip(timeList,parameterList):
        outFile.write('{t}\t{p}\n'.format(t=t,p=p))
</snippet></ROW><ROW><id>6931060</id><snippet>for cost1,cost2 in zip(range(10,501,10),range(510,1001,10)):
    # your code
</snippet></ROW><ROW><id>6931060</id><snippet>for cost1 in range(10,501,10):
    cost2 = cost1 + 500
    # Your code
</snippet></ROW><ROW><id>6931070</id><snippet>TEXTO = sys.argv[1]
my_regex = r"\b(?=\w)" + re.escape(TEXTO) + r"\b(?!\w)"

if re.search(my_regex, subject, re.IGNORECASE):
    etc.
</snippet></ROW><ROW><id>6931070</id><snippet>re.escape</snippet></ROW><ROW><id>6931085</id><snippet>import csv
with open('data.log',"r") as fin:
    with open('data2.log','w') as fout:        
        reader=csv.reader(fin,delimiter=',', quotechar='"', escapechar='^')
        writer=csv.writer(fout, delimiter=',', 
                          doublequote=False, quoting=csv.QUOTE_ALL)
        for row in reader:
            row[6]=row[6].replace('\n',' ')
            writer.writerow(row)
</snippet></ROW><ROW><id>6931087</id><snippet>X = (5,6,5,1,2,3,4,5,6,7)
range = max(X) - min(X)
</snippet></ROW><ROW><id>6931097</id><snippet>0xed</snippet></ROW><ROW><id>6931097</id><snippet>í</snippet></ROW><ROW><id>6931097</id><snippet>í</snippet></ROW><ROW><id>6931097</id><snippet>utf_8</snippet></ROW><ROW><id>6931415</id><snippet>opt = Toplevel()
</snippet></ROW><ROW><id>6931443</id><snippet>with open('output', 'w') as fp:
    while True:
        a, x, y, z = calculate_a(), calculate_x(), calculate_y(), calculate_z()
        fp.write('{} {} {} {}\n'.format(a, x, y, z)
</snippet></ROW><ROW><id>6931443</id><snippet>with open('output', 'w') as fp:
    lines = []
    while True:
        a, x, y, z = calculate_a(), calculate_x(), calculate_y(), calculate_z()
        lines.append('{} {} {} {}\n'.format(a, x, y, z))
    fp.writelines(lines)
</snippet></ROW><ROW><id>6931523</id><snippet>f.write(etree.tostring(tree,pretty_print=True))
</snippet></ROW><ROW><id>6931523</id><snippet>tree.write(f, pretty_print=True)
</snippet></ROW><ROW><id>6931601</id><snippet>urlretrieve</snippet></ROW><ROW><id>6931601</id><snippet>urllib.urlretrieve(path)
</snippet></ROW><ROW><id>6931601</id><snippet>(filename, headers) = urllib.urlretrieve(path)
</snippet></ROW><ROW><id>6931601</id><snippet>filename</snippet></ROW><ROW><id>6931601</id><snippet>filename</snippet></ROW><ROW><id>6931765</id><snippet>execfile('settings_myapp.py')</snippet></ROW><ROW><id>6931765</id><snippet>settings</snippet></ROW><ROW><id>6931765</id><snippet>import</snippet></ROW><ROW><id>6931765</id><snippet>settings_myapp.py</snippet></ROW><ROW><id>6931765</id><snippet>execfile()</snippet></ROW><ROW><id>6931765</id><snippet>exec(open(fn).read())</snippet></ROW><ROW><id>6932124</id><snippet>edge = edge.translate(None, '()')
verts = edge.split(',')
</snippet></ROW><ROW><id>6932124</id><snippet>verts = map(int, edge.split(','))
</snippet></ROW><ROW><id>6932143</id><snippet>"cat"</snippet></ROW><ROW><id>6932143</id><snippet>"c" + "a" + "t"</snippet></ROW><ROW><id>6932143</id><snippet>id()</snippet></ROW><ROW><id>6932143</id><snippet>"cat"</snippet></ROW><ROW><id>6932143</id><snippet>intern()</snippet></ROW><ROW><id>6932143</id><snippet>id(intern("c" + "a" + "t")) == id("cat")   # True
</snippet></ROW><ROW><id>6932143</id><snippet>"cat"</snippet></ROW><ROW><id>6932143</id><snippet>"dog"</snippet></ROW><ROW><id>6932554</id><snippet>list1 = list2 = []
</snippet></ROW><ROW><id>6932554</id><snippet>[]</snippet></ROW><ROW><id>6932554</id><snippet>list1, list2 = [], []
</snippet></ROW><ROW><id>6932554</id><snippet>list1 = list2 = []
print id(list1)  # Same as id(list2)
print id(list2)  # Same as id(list1)

list1, list2 = [], []
print id(list1)  # Different than id(list2)
print id(list2)  # Different than id(list1)
</snippet></ROW><ROW><id>6932631</id><snippet>update</snippet></ROW><ROW><id>6932631</id><snippet># Same for dict_object_sub1.py or dict_object_sub2.py

from dict_object_main import dict_object
dict_object.update({
    'prop1': 'val1',
    # ...
})
</snippet></ROW><ROW><id>6932631</id><snippet>dict_object = {}
</snippet></ROW><ROW><id>6932631</id><snippet>from dict_object import dict_object

dict_object.update({
    'prop1': 'val1',
    # ...
})
</snippet></ROW><ROW><id>6932631</id><snippet>from dict_declare import dict_object
import dict_object_sub&lt;n&gt;
# ... repeat

def doSomeStuffWithTheDictObject:
    ...
    return
</snippet></ROW><ROW><id>6932841</id><snippet>min</snippet></ROW><ROW><id>6932841</id><snippet>max</snippet></ROW><ROW><id>6932841</id><snippet>range</snippet></ROW><ROW><id>6932841</id><snippet>MaxValue</snippet></ROW><ROW><id>6932841</id><snippet>x_max  = max( xcoords );
maxx   = int( 10 * x_max / 5 );
x_min  = min( xcoords );
minx   = int( 10 * x_min / 5 );
rangex = range( minx, maxx );
grid.write(  "X:\t{0}\t{1}\t{2}\t{3}".format(minX, maxX, rangeX));
</snippet></ROW><ROW><id>6932841</id><snippet>rangex = range( 2 * min( xcoords ), 2 * max( xcoords ));
</snippet></ROW><ROW><id>6932841</id><snippet>maxx - minx + 1</snippet></ROW><ROW><id>6932841</id><snippet>range</snippet></ROW><ROW><id>6932841</id><snippet>10 * x / 5 &lt;=&gt; 2 * x</snippet></ROW><ROW><id>6932955</id><snippet>env</snippet></ROW><ROW><id>6932955</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>6932955</id><snippet>env</snippet></ROW><ROW><id>6932955</id><snippet>PATH</snippet></ROW><ROW><id>6932955</id><snippet>python</snippet></ROW><ROW><id>6933216</id><snippet>callable(f)</snippet></ROW><ROW><id>6933216</id><snippet>isinstance(f, types.MethodType)</snippet></ROW><ROW><id>6933216</id><snippet>isinstance(someclass, type)</snippet></ROW><ROW><id>6933216</id><snippet>issubclass(someclass, baseclass)</snippet></ROW><ROW><id>6933248</id><snippet>import</snippet></ROW><ROW><id>6933248</id><snippet>str(e)</snippet></ROW><ROW><id>6933248</id><snippet>e</snippet></ROW><ROW><id>6933248</id><snippet>repr(e)</snippet></ROW><ROW><id>6933253</id><snippet>R</snippet></ROW><ROW><id>6933253</id><snippet>RApache</snippet></ROW><ROW><id>6933284</id><snippet>def coart(phonemeFile) :
    """ Coarticulation function where forward and backward coarticulation take place a  and parameter values are generated"""

    all_lines = []
    with open(phonemeFile, "r") as pFile :
        for line in pFile :
            next_line = []
            line = line.split()
            for syllable in line:           
                if syllable == "'" :
                    continue
                next_coart = param_values.get(syllable)
                next_line.append( (syllable, next_coart) )
            all_lines.append(next_line)
</snippet></ROW><ROW><id>6933601</id><snippet>place</snippet></ROW><ROW><id>6933601</id><snippet>Entry</snippet></ROW><ROW><id>6933819</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python</snippet></ROW><ROW><id>6933819</id><snippet>/usr/bin/python2.7</snippet></ROW><ROW><id>6933819</id><snippet>easy_install</snippet></ROW><ROW><id>6933819</id><snippet>easy_install</snippet></ROW><ROW><id>6933819</id><snippet>cd /tmp
curl -O http://python-distribute.org/distribute_setup.py
sudo $VIRTUALENVWRAPPER_PYTHON distribute_setup.py
</snippet></ROW><ROW><id>6933819</id><snippet>bash</snippet></ROW><ROW><id>6933819</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>6933819</id><snippet>export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
</snippet></ROW><ROW><id>6933819</id><snippet>easy_install</snippet></ROW><ROW><id>6933819</id><snippet>$ which easy_install
/Library/Frameworks/Python.framework/Versions/2.7/bin/easy_install
</snippet></ROW><ROW><id>6934064</id><snippet>if c.execute(...).next()[0]:
    raise Exception
</snippet></ROW><ROW><id>6934064</id><snippet>next()</snippet></ROW><ROW><id>6934064</id><snippet>if c.execute(...).next()[0]:
    c.close()
    raise Exception
</snippet></ROW><ROW><id>6934064</id><snippet>if list(c.execute(...))[0][0]:
    raise Exception
</snippet></ROW><ROW><id>6934064</id><snippet>apsw.Cursor</snippet></ROW><ROW><id>6934064</id><snippet>with Cursor(connection) as c:
    c.execute(...)
</snippet></ROW><ROW><id>6934201</id><snippet>set</snippet></ROW><ROW><id>6934201</id><snippet>set</snippet></ROW><ROW><id>6934201</id><snippet>max</snippet></ROW><ROW><id>6934201</id><snippet>with</snippet></ROW><ROW><id>6934201</id><snippet>.readlines()</snippet></ROW><ROW><id>6934201</id><snippet>def countedSubWords(word, dictionary): 
  fragments = set(
    word[i:j]
    for i in range(len(word)) for j in range(i+3, len(word)+1)
  )
  subWords = fragments.intersection(dictionary)
  return (len(subWords), subWords)


def main():
  with open('wordlist.txt') as words:
    dictionary = set(word.strip() for word in words if len(word.strip()) &gt; 2)
    print max(countedSubWords(word, dictionary) for word in dictionary)
</snippet></ROW><ROW><id>6934267</id><snippet>import datetime
import pprint

def parse(date):
    return datetime.date(*[int(i) for i in d.split('-')])

def get_ranges(dates):
    while dates:
        end = 1
        try:
            while dates[end] - dates[end - 1] == datetime.timedelta(days=1):
                end += 1
        except IndexError:
            pass

        yield {
            'start-date': dates[0],
            'end-date': dates[end-1]
        }
        dates = dates[end:]

dates = [
    '2011-02-27', '2011-02-28', '2011-03-01',
    '2011-04-12', '2011-04-13',
    '2011-06-08'
]

# Parse each date and convert it to a date object. Also ensure the dates
# are sorted, you can remove 'sorted' if you don't need it
dates = sorted([parse(d) for d in dates]) 

pprint.pprint(list(get_ranges(dates)))
</snippet></ROW><ROW><id>6934267</id><snippet>[{'end-date': datetime.date(2011, 3, 1),
  'start-date': datetime.date(2011, 2, 27)},
 {'end-date': datetime.date(2011, 4, 13),
  'start-date': datetime.date(2011, 4, 12)},
 {'end-date': datetime.date(2011, 6, 8),
  'start-date': datetime.date(2011, 6, 8)}]
</snippet></ROW><ROW><id>6934314</id><snippet>/Library/Frameworks/Python.frameworks</snippet></ROW><ROW><id>6934314</id><snippet>MacOSX 10.4u SDK</snippet></ROW><ROW><id>6934314</id><snippet>10.3</snippet></ROW><ROW><id>6934314</id><snippet>10.4</snippet></ROW><ROW><id>6934314</id><snippet>easy_install</snippet></ROW><ROW><id>6934314</id><snippet>/Library/Frameworks/Python.framework/Versions/Current</snippet></ROW><ROW><id>6934314</id><snippet>cd /Library/Frameworks/Python.framework/Versions
sudo mv 2.5 2.5-OLD 
</snippet></ROW><ROW><id>6934314</id><snippet>/System/Library/Frameworks</snippet></ROW><ROW><id>6934314</id><snippet>/usr/bin</snippet></ROW><ROW><id>6934314</id><snippet>.bash_profile</snippet></ROW><ROW><id>6934314</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6934314</id><snippet>.pydistutils.cfg</snippet></ROW><ROW><id>6934314</id><snippet>cd ~
ls -al
</snippet></ROW><ROW><id>6934314</id><snippet>ls -al ~/Library/Python
ls -al ~/.local
</snippet></ROW><ROW><id>6934314</id><snippet>site-packages</snippet></ROW><ROW><id>6934314</id><snippet>cd /Library/Python/2.6/site-packages
ls -al
cd /Library/Python/2.5/site-packages
ls -al
</snippet></ROW><ROW><id>6934314</id><snippet>easy_install</snippet></ROW><ROW><id>6934314</id><snippet>/usr/bin</snippet></ROW><ROW><id>6934314</id><snippet>$ ls -l /usr/bin/python*
-rwxr-xr-x  2 root  wheel  86000 Jun 24  2010 /usr/bin/python*
-rwxr-xr-x  5 root  wheel    925 Jul  7  2009 /usr/bin/python-config*
lrwxr-xr-x  1 root  wheel     75 Nov  7  2010 /usr/bin/python2.5@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/python2.5
lrwxr-xr-x  1 root  wheel     82 Nov  7  2010 /usr/bin/python2.5-config@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/python2.5-config
lrwxr-xr-x  1 root  wheel     75 Nov  7  2010 /usr/bin/python2.6@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6
lrwxr-xr-x  1 root  wheel     82 Nov  7  2010 /usr/bin/python2.6-config@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6-config
-rwxr-xr-x  2 root  wheel  86000 Jun 24  2010 /usr/bin/pythonw*
lrwxr-xr-x  1 root  wheel     76 Nov  7  2010 /usr/bin/pythonw2.5@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/pythonw2.5
lrwxr-xr-x  1 root  wheel     76 Nov  7  2010 /usr/bin/pythonw2.6@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.6/bin/pythonw2.6
$ ls -l /usr/bin/easy*
-rwxr-xr-x  2 root  wheel  925 Jun 30  2009 /usr/bin/easy_install*
-rwxr-xr-x  1 root  wheel  421 Jun 30  2009 /usr/bin/easy_install-2.5*
-rwxr-xr-x  1 root  wheel  421 Jun 30  2009 /usr/bin/easy_install-2.6*
</snippet></ROW><ROW><id>6934314</id><snippet>easy_install</snippet></ROW><ROW><id>6934314</id><snippet>easy_install</snippet></ROW><ROW><id>6934338</id><snippet>Susan    1        1      1      0 
        Mary     Joe    Bob    Susan
</snippet></ROW><ROW><id>6934338</id><snippet>import itertools
import numpy as np

G = np.array(   # clear half of the matrix first
    [[0,0,0,0],
     [1,0,0,0],
     [1,1,0,0],
     [1,1,1,0]])
triples = []     
for i in xrange(G.shape[0]):
    row = G[i,:]
    J = np.nonzero(row)[0].tolist() # combinations() with list is faster than NumPy array.
    for t1,t2 in itertools.combinations(J, 2):
        triples.append((i,t1,t2))
print triples
</snippet></ROW><ROW><id>6934533</id><snippet>for key, value in config.iteritems():
    # Customize key here, for example transform 'text_height' to 'TextHeight' or 
    # use 'key.title()' to obtain titlecased keys...
    setattr(self, key, value)
</snippet></ROW><ROW><id>6934533</id><snippet>key.title()</snippet></ROW><ROW><id>6934722</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6934722</id><snippet>subprocess.call</snippet></ROW><ROW><id>6934722</id><snippet>subprocess.call</snippet></ROW><ROW><id>6934722</id><snippet>def call(*popenargs, **kwargs):
    p = subprocess.Popen(*popenargs, **kwargs)
    return p.wait()
</snippet></ROW><ROW><id>6934782</id><snippet>Query</snippet></ROW><ROW><id>6934782</id><snippet>TestSet</snippet></ROW><ROW><id>6934782</id><snippet>TestSet</snippet></ROW><ROW><id>6934782</id><snippet>Query</snippet></ROW><ROW><id>6934782</id><snippet>distinct()</snippet></ROW><ROW><id>6934782</id><snippet>Query</snippet></ROW><ROW><id>6934782</id><snippet>distinct()</snippet></ROW><ROW><id>6934782</id><snippet>Query</snippet></ROW><ROW><id>6934782</id><snippet>TestSet</snippet></ROW><ROW><id>6934782</id><snippet>echo='debug'</snippet></ROW><ROW><id>6934782</id><snippet>Engine</snippet></ROW><ROW><id>6934782</id><snippet>Query</snippet></ROW><ROW><id>6934908</id><snippet>bdist_egg</snippet></ROW><ROW><id>6934908</id><snippet>sdist</snippet></ROW><ROW><id>6934925</id><snippet>col_names = [col_name1, col_name2, ...]

data = [
    [val1_col_name1, val2_col_name2, ...]
    [val3_col_name1, val4_col_name2, ...]
    [val1_col_name1, val2_col_name2, ...]
]
</snippet></ROW><ROW><id>6934925</id><snippet>&lt;table&gt;
    &lt;tr&gt;
        {% for col_name in col_names %}
        &lt;th&gt;{{ col_name }}&lt;/th&gt;
        {% endfor %}
    &lt;/tr&gt;
    {% for row in data %}
        &lt;tr&gt;
            {% for cell in row %}
                &lt;td&gt;{{ cell }}&lt;/td&gt;
            {% endfor %}
        &lt;/tr&gt;
    {% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>6935053</id><snippet>x+=1
</snippet></ROW><ROW><id>6935053</id><snippet>x = (x + 1) % len(searchstring)
</snippet></ROW><ROW><id>6935093</id><snippet>l.extend((i for i in (2,3,4) if i not in l))
</snippet></ROW><ROW><id>6935115</id><snippet>run_wsgi_app</snippet></ROW><ROW><id>6935115</id><snippet>appengine_config.py</snippet></ROW><ROW><id>6935115</id><snippet>CGIHandler</snippet></ROW><ROW><id>6935115</id><snippet>run_wsgi_app</snippet></ROW><ROW><id>6935135</id><snippet>&gt;&gt;&gt; map(lambda x: x + sum(lst2), lst1)
[18, 19, 20, 21]
</snippet></ROW><ROW><id>6935137</id><snippet>/school/
    pencil.py
    book.py
</snippet></ROW><ROW><id>6935137</id><snippet>class Book():
    def __init__(self,name,author,isbn,your_variable_here):
        #Your init method

    def read(self,kid):
        return "{0} is reading {1}.".format(kid,self.name)

    def burn(self,library,lighter):
        library.remove(self)
        lighter.light(self)
        return "Preparing to burn people."
</snippet></ROW><ROW><id>6935137</id><snippet>from school import book
    b = book.Book("The Art of War","Sun Tzu",'999342052X','Books rock!')
    b.read(ike) #This assumes ike is an object, probably of the class Student, defined and imported from elsewhere
    b.burn(library,lighter) #Once more, I'm assuming these are objects for which you've imported the definition and defined them earlier.
</snippet></ROW><ROW><id>6935446</id><snippet>class Phoneme():
    def __init__(self,named,variables,for,every,paired,value,in,the,crazy,list,you,posted):
        self.named = named
        self.variables = variables
        ##etc
        ##This way, we can see what you're comparing. The comparisons also become much easier.
</snippet></ROW><ROW><id>6935446</id><snippet>if phoneme1.fricative == phoneme2.fricative:
    do_something_awesome()
</snippet></ROW><ROW><id>6935774</id><snippet>from django.views.decorators.cache import cache_control

@cache_control(no_cache=True, must_revalidate=True)
def func()
  #some code
  return
</snippet></ROW><ROW><id>6935872</id><snippet>User</snippet></ROW><ROW><id>6935872</id><snippet>Query</snippet></ROW><ROW><id>6935872</id><snippet>class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, unique=True)
    created_at = Colmn(DateTime, nullable=False, default=func.now())

class Post(Base):
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey(User.id), nullable=False)
    user = relationship(User, backref=backref('posts'))
    title = Column(String, nullable=False)
    body = Column(Text, nullable=False)
    created_at = Colmn(DateTime, nullable=False, default=func.now())

User.post_query = relationship(Post, lazy="dynamic")
</snippet></ROW><ROW><id>6935917</id><snippet>&gt;&gt;&gt; from myapp.models import Property
&gt;&gt;&gt; Property.objects.all()
[&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,]
&gt;&gt;&gt; Property.objects.filter(sold=False)
[]
&gt;&gt;&gt; Property.objects.filter(sold=True)
[&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,&lt;Property: Property object&gt;,]
&gt;&gt;&gt; Property.objects.create(sold=False, my='other', fields=1)
&gt;&gt;&gt; Property.objects.filter(sold=False)
[&lt;Property: Property object&gt;,]
</snippet></ROW><ROW><id>6935923</id><snippet>winreg</snippet></ROW><ROW><id>6935923</id><snippet> [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet
 Settings] "MigrateProxy"=dword:00000001 
 "ProxyEnable"=dword:00000001
 "ProxyHttp1.1"=dword:00000000
 "ProxyServer"="http://ProxyServername:80" 
 "ProxyOverride"="&lt;local&gt;"
</snippet></ROW><ROW><id>6935923</id><snippet>import _winreg

def getProxy():
    proxy = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings")
    server, type = _winreg.QueryValueEx(proxy, "ProxyServer")
    enabled, type = _winreg.QueryValueEx(proxy, "ProxyEnable")
    if enabled:
        return server
    return None
</snippet></ROW><ROW><id>6936741</id><snippet>test_rec[(test_rec.age==1) &amp; (test_rec.sex==1)]
</snippet></ROW><ROW><id>6937168</id><snippet>on_delete</snippet></ROW><ROW><id>6937235</id><snippet>__setitem__</snippet></ROW><ROW><id>6937235</id><snippet>for i in xrange(DB_MOD):
    db_dict = myapp.copy()
    db_dict['NAME'] = 'myapp_idmod_' % i
    DATABASES['myapp_idmod_%s' % i] = db_dict
</snippet></ROW><ROW><id>6937358</id><snippet>subprocess</snippet></ROW><ROW><id>6937358</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6937358</id><snippet>terminate()</snippet></ROW><ROW><id>6937358</id><snippet>kill()</snippet></ROW><ROW><id>6937358</id><snippet>pid</snippet></ROW><ROW><id>6937358</id><snippet>/var/run/&lt;yourscript&gt;.pid</snippet></ROW><ROW><id>6937490</id><snippet>file_path = # something 
if not os.path.exists(file_path):
     file_path = #make new path
</snippet></ROW><ROW><id>6938182</id><snippet>edit in NWORDS</snippet></ROW><ROW><id>6938182</id><snippet>in</snippet></ROW><ROW><id>6938182</id><snippet>in</snippet></ROW><ROW><id>6938182</id><snippet>in</snippet></ROW><ROW><id>6938182</id><snippet>set</snippet></ROW><ROW><id>6938313</id><snippet>import</snippet></ROW><ROW><id>6938313</id><snippet>from X import Y</snippet></ROW><ROW><id>6938313</id><snippet>Connectivity</snippet></ROW><ROW><id>6938554</id><snippet>print msg.encode("hex")</snippet></ROW><ROW><id>6938554</id><snippet>u"&lt;EOM&gt;"</snippet></ROW><ROW><id>6938681</id><snippet>contains</snippet></ROW><ROW><id>6938681</id><snippet>concat('str1', "'", 'str2')</snippet></ROW><ROW><id>6938681</id><snippet>def toXPathStringLiteral(s):
    if "'" not in s: return "'%s'" % s
    if '"' not in s: return '"%s"' % s
    return "concat('%s')" % s.replace("'", "',\"'\",'")

"//span[@class='error'][contains(.,%s)]" % toXPathStringLiteral(message)
</snippet></ROW><ROW><id>6938682</id><snippet>list</snippet></ROW><ROW><id>6938682</id><snippet>0</snippet></ROW><ROW><id>6938682</id><snippet>int</snippet></ROW><ROW><id>6938682</id><snippet>1</snippet></ROW><ROW><id>6938682</id><snippet>&gt;&gt;&gt; def foo(L = []):
...   print id(L)
...   L.append(1)
...   print id(L)
...   print L
... 
&gt;&gt;&gt; foo()
3077669452
3077669452
[1]
&gt;&gt;&gt; foo()
3077669452
3077669452
[1, 1]
&gt;&gt;&gt; foo()
3077669452
3077669452
[1, 1, 1]
</snippet></ROW><ROW><id>6938682</id><snippet>&gt;&gt;&gt; def foo(a=0):
...   print id(a)
...   a+=1
...   print id(a)
...   print a
... 
&gt;&gt;&gt; foo()
165989788
165989776
1
&gt;&gt;&gt; foo()
165989788
165989776
1
&gt;&gt;&gt; foo()
165989788
165989776
1
</snippet></ROW><ROW><id>6938893</id><snippet>mysite.com/Текст на кирилица</snippet></ROW><ROW><id>6938893</id><snippet>http://</snippet></ROW><ROW><id>6938893</id><snippet>urllib2</snippet></ROW><ROW><id>6938893</id><snippet>%20</snippet></ROW><ROW><id>6938893</id><snippet>s.encode('idna')</snippet></ROW><ROW><id>6938893</id><snippet>http://mysite.com/%D0%A2%D0%B5%D0%BA%D1%81%D1%82%20%D0%BD%D0%B0%20%D0%BA%D0%B8%D1%80%D0%B8%D0%BB%D0%B8%D1%86%D0%B0
</snippet></ROW><ROW><id>6938893</id><snippet>urllib2</snippet></ROW><ROW><id>6938893</id><snippet>http://mysite.com/Текст на кирилица</snippet></ROW><ROW><id>6938938</id><snippet>Twisted has huge support and lot of success projects are built based upon it.</snippet></ROW><ROW><id>6938938</id><snippet>gevent is light when compared to twisted.</snippet></ROW><ROW><id>6939273</id><snippet>urllib2.HTTPCookieProcessor</snippet></ROW><ROW><id>6939273</id><snippet>import urllib2
from cookielib import CookieJar

cookiejar = CookieJar()
opener = urllib2.build_opener()
cookieproc = urllib2.HTTPCookieProcessor(cookiejar)
opener.add_handler(cookieproc)
</snippet></ROW><ROW><id>6939273</id><snippet>opener.open()</snippet></ROW><ROW><id>6939437</id><snippet>pip</snippet></ROW><ROW><id>6939437</id><snippet>git</snippet></ROW><ROW><id>6939744</id><snippet>unicode(string[, encoding, errors])
</snippet></ROW><ROW><id>6939744</id><snippet>s = u'La Pe\xf1a' 
print s.encode('latin-1')
</snippet></ROW><ROW><id>6939744</id><snippet>write(s.encode('latin-1'))
</snippet></ROW><ROW><id>6940342</id><snippet>django/contrib/admin/templates/registration/password_reset_email.html</snippet></ROW><ROW><id>6940342</id><snippet>templates/registration/password_reset_email.html</snippet></ROW><ROW><id>6940547</id><snippet>type()</snippet></ROW><ROW><id>6940547</id><snippet>&gt;&gt;&gt; d
[{'name': 'Person', 'title': 'Person class'}, {'name': 'Employee', 'title': 'Employee class'}]
&gt;&gt;&gt; types = [type(x['name'], (object,), {'title': x['title']}) for x in d]
&gt;&gt;&gt; types[0]()
&lt;__main__.Person object at 0x800f5fad0&gt;
&gt;&gt;&gt; types[0]().title
'Person class'
</snippet></ROW><ROW><id>6940547</id><snippet>&gt;&gt;&gt; class X(object):
...     def sum(self, a, b):
...         print self
...         return a+b
...
&gt;&gt;&gt; types = [type(x['name'], (object,), {'title': x['title'], 'sum': X.__dict__['sum']}) for x in d]
&gt;&gt;&gt; types[0]().sum(1,2)
&lt;__main__.Person object at 0x800f5fad0&gt;
3
</snippet></ROW><ROW><id>6940547</id><snippet>X.__dict__['sum']</snippet></ROW><ROW><id>6940547</id><snippet>X.sum</snippet></ROW><ROW><id>6940547</id><snippet>X.sum</snippet></ROW><ROW><id>6940547</id><snippet>&lt;unbound method X.sum&gt;</snippet></ROW><ROW><id>6940547</id><snippet>X</snippet></ROW><ROW><id>6940547</id><snippet>sum</snippet></ROW><ROW><id>6940547</id><snippet>X.__dict__</snippet></ROW><ROW><id>6940698</id><snippet>y=2*x</snippet></ROW><ROW><id>6940698</id><snippet>noise=0.1*np.random.random(len(x))
</snippet></ROW><ROW><id>6940698</id><snippet>y=5*x**2+noise
</snippet></ROW><ROW><id>6940698</id><snippet>y</snippet></ROW><ROW><id>6940749</id><snippet>django appengine</snippet></ROW><ROW><id>6940749</id><snippet>appengine</snippet></ROW><ROW><id>6940749</id><snippet>Django</snippet></ROW><ROW><id>6940749</id><snippet>appengine</snippet></ROW><ROW><id>6940749</id><snippet>Flask</snippet></ROW><ROW><id>6941690</id><snippet>av = []
idx = []

for file in sys.argv[1:]:
    next_av = []
    next_idx = []

    ...

    for i in sorted (result.iterkeys()):
        s = sum(int(v) for v in result[i])
        a = s/float(len(result[i]))
        next_av.append(a)
        next_idx.append(i)
    av.append(next_av)
    idx.append(next_idx)

for index in range(len(av)):
    # do something with the lists av[index] and idx[index]
</snippet></ROW><ROW><id>6941880</id><snippet>s = "3.14"
try:
  val = float(s)
except ValueError:
  val = None
</snippet></ROW><ROW><id>6941903</id><snippet>urlFile = open("mailList.txt", "r+")
mailList = [i.strip() for i in urlFile.readlines()]
</snippet></ROW><ROW><id>6942141</id><snippet>from dateutil import parser

dates = ['30th November 2009', '31st March 2010', '30th September 2010']

for date in dates:
    print parser.parse(date).strftime('%Y%m%d')
</snippet></ROW><ROW><id>6942141</id><snippet>20091130
20100331
20100930
</snippet></ROW><ROW><id>6942141</id><snippet>datetime</snippet></ROW><ROW><id>6942141</id><snippet>from datetime import datetime

dates = ['30th November 2009', '31st March 2010', '30th September 2010']

for date in dates:
    part = date.split()
    print datetime.strptime('%s %s %s' % (part[0][:-2]), part[1], part[2]), '%d %B %Y').strftime('%Y%m%d')
</snippet></ROW><ROW><id>6942286</id><snippet>import wx, win32api, win32gui, win32con, ctypes

class App(wx.App):
    def OnInit(self):
        dll = ctypes.WinDLL('gdi32.dll')
        for idx, (hMon, hDC, (left, top, right, bottom)) in enumerate(win32api.EnumDisplayMonitors(None, None)):
            hDeskDC = win32gui.CreateDC(win32api.GetMonitorInfo(hMon)['Device'], None, None)
            bitmap = wx.EmptyBitmap(right - left, bottom - top)
            hMemDC = wx.MemoryDC()
            hMemDC.SelectObject(bitmap)
            try:
                dll.BitBlt(hMemDC.GetHDC(), 0, 0, right - left, bottom - top, int(hDeskDC), 0, 0, win32con.SRCCOPY)
            finally:
                hMemDC.SelectObject(wx.NullBitmap)
            bitmap.SaveFile('screenshot_%02d.bmp' % idx, wx.BITMAP_TYPE_BMP)
            win32gui.ReleaseDC(win32gui.GetDesktopWindow(), hDeskDC)
        return False

App(0)
</snippet></ROW><ROW><id>6942523</id><snippet>scipy.linalg.solve</snippet></ROW><ROW><id>6942523</id><snippet>def solve(a, b, sym_pos=0, lower=0, overwrite_a=0, overwrite_b=0,
          debug = 0):
    if sym_pos:
        posv, = get_lapack_funcs(('posv',),(a1,b1))
        c,x,info = posv(a1,b1,
                        lower = lower,
                        overwrite_a=overwrite_a,
                        overwrite_b=overwrite_b)
    else:
        gesv, = get_lapack_funcs(('gesv',),(a1,b1))
        lu,piv,x,info = gesv(a1,b1,
                             overwrite_a=overwrite_a,
                             overwrite_b=overwrite_b)

    if info==0:
        return x
    if info&gt;0:
        raise LinAlgError, "singular matrix"
    raise ValueError,\
          'illegal value in %-th argument of internal gesv|posv'%(-info)
</snippet></ROW><ROW><id>6942523</id><snippet>DPOSV</snippet></ROW><ROW><id>6942523</id><snippet>DGESV</snippet></ROW><ROW><id>6942577</id><snippet>p1=Person(firstname=request.POST['firstname'], 
          lastname=request.POST['lastname'])
p1.save()
for subname in request.POST.getlist('subnames'):
    new = MarkSheet(subname=subname, person=p1) 
        #no data for marks, must define it to be able to be blank/null
    new.save()
</snippet></ROW><ROW><id>6942577</id><snippet>blank=True, null=True</snippet></ROW><ROW><id>6943002</id><snippet>Sub My_List_Change()
   Sheets("Containing your box").Cells(x,y) = My_List.value // x,y being the coordinates of the cell hidden by the box
</snippet></ROW><ROW><id>6943405</id><snippet>if</snippet></ROW><ROW><id>6943405</id><snippet>[typeB for typeB in typeBlist if typeB.typeA == typeA]
</snippet></ROW><ROW><id>6943405</id><snippet>typeBlist</snippet></ROW><ROW><id>6943405</id><snippet>typeB.typeA == typeA</snippet></ROW><ROW><id>6943405</id><snippet>try:
    return (typeB for typeB in typeBlist if typeB.typeA == typeA).next()
except StopIteration:
    return None
</snippet></ROW><ROW><id>6943405</id><snippet>dict</snippet></ROW><ROW><id>6943405</id><snippet>typeA</snippet></ROW><ROW><id>6943405</id><snippet>typeB</snippet></ROW><ROW><id>6943405</id><snippet>lookup = dict((typeB.typeA,typeB) for typeB in typeBlist)
</snippet></ROW><ROW><id>6943405</id><snippet>typeB = lookup[typeA]
</snippet></ROW><ROW><id>6943405</id><snippet>typeB</snippet></ROW><ROW><id>6943405</id><snippet>typeA</snippet></ROW><ROW><id>6943405</id><snippet>typeA</snippet></ROW><ROW><id>6943405</id><snippet>list</snippet></ROW><ROW><id>6943405</id><snippet>typeB</snippet></ROW><ROW><id>6943405</id><snippet>from collections import defaultdict
lookup = defaultdict(list)
for typeB in typeBlist:
    lookup[typeB.typeA].append(typeB)
</snippet></ROW><ROW><id>6943936</id><snippet>  day = cur.execute('select state from cities where city = "pointer"')
</snippet></ROW><ROW><id>6943936</id><snippet>  day = cur.execute('select state from cities where city = ?',("pointer",))
</snippet></ROW><ROW><id>6943936</id><snippet> urlstring = "select URL from cities where day is" + str(day)
 cur.execute(urlstring)
</snippet></ROW><ROW><id>6943979</id><snippet>class TagCounter:
   tag = db.ReferenceProperty(Tag)
   counter = db.IntegerProperty(default=0)
</snippet></ROW><ROW><id>6943979</id><snippet>class Article(db.Model):
  tags = db.ListProperty(Tag)

  @staticmethod
  def select_by_tag(tag):
    return Article.all().filter("tags", tag).run()
</snippet></ROW><ROW><id>6944352</id><snippet>re.DOTALL</snippet></ROW><ROW><id>6944352</id><snippet>re.compile</snippet></ROW><ROW><id>6944352</id><snippet>re.DOTALL</snippet></ROW><ROW><id>6944352</id><snippet>import re
re.my_compile = re.compile
re.compile = lambda pattern, flags: re.my_compile(pattern, flags | re.DOTALL)
</snippet></ROW><ROW><id>6944352</id><snippet>from contextlib import contextmanager

@contextmanager
def flag_regexen(flag):
    import re
    re.my_compile = re.compile
    re.compile = lambda pattern, flags: re.my_compile(pattern, flags | flag)
    yield
    re.compile = re.my_compile
</snippet></ROW><ROW><id>6944352</id><snippet>with flag_regexen(re.DOTALL):
    &lt;do stuff with all regexes DOTALLed&gt;
</snippet></ROW><ROW><id>6944781</id><snippet>hash-timestamp</snippet></ROW><ROW><id>6944883</id><snippet>CategoryProperty</snippet></ROW><ROW><id>6944883</id><snippet>StringProperty</snippet></ROW><ROW><id>6944883</id><snippet>choices = {
    'vehicles': _('Vehicles'),
    'cars': _('Cars'),
    'bicycles': _('Bicycles'),
    'motorcycles': _('Motorcycles')
}
category = db.CategoryProperty(choices=choices.keys(), default='cars',
                               verbose_name="Category")
</snippet></ROW><ROW><id>6944923</id><snippet>re.compile('''WHERE [^.]+ =''')
</snippet></ROW><ROW><id>6945070</id><snippet>&gt;&gt;&gt; a
['(617) 965-2555&lt;br /&gt;\nOrganization Name', 'Street Name', 'City', 'Zip code', '(413) 333-2251&lt;br /&gt;\nOrg Name 2', 'Address', 'City', 'Zip code 2', '(617) 568-7777&lt;/p&gt;\n\n']
&gt;&gt;&gt; [i.split("\n") for i in a]
[['(617) 965-2555&lt;br /&gt;', 'Organization Name'], ['Street Name'], ['City'], ['Zip code'], ['(413) 333-2251&lt;br /&gt;', 'Org Name 2'], ['Address'], ['City'], ['Zip code 2'], ['(617) 568-7777&lt;/p&gt;', '', '']]
</snippet></ROW><ROW><id>6945070</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain(*[i.split("\n") for i in a]))
['(617) 965-2555&lt;br /&gt;', 'Organization Name', 'Street Name', 'City', 'Zip code', '(413) 333-2251&lt;br /&gt;', 'Org Name 2', 'Address', 'City', 'Zip code 2', '(617) 568-7777&lt;/p&gt;', '', '']
</snippet></ROW><ROW><id>6945070</id><snippet>&gt;&gt;&gt; a
['(617) 965-2555&lt;br /&gt;\nOrganization Name', 'Street Name', 'City', 'Zip code', '(413) 333-2251&lt;br /&gt;\nOrg Name 2', 'Address', 'City', 'Zip code 2', '(617) 568-7777&lt;/p&gt;\n\n']
&gt;&gt;&gt; [i.split("{}") for i in "{}".join(a).split("\n")]
[['(617) 965-2555&lt;br /&gt;'], ['Organization Name', 'Street Name', 'City', 'Zip code', '(413) 333-2251&lt;br /&gt;'], ['Org Name 2', 'Address', 'City', 'Zip code 2', '(617) 568-7777&lt;/p&gt;'], [''], ['']]
</snippet></ROW><ROW><id>6945070</id><snippet>|</snippet></ROW><ROW><id>6945070</id><snippet>;:;</snippet></ROW><ROW><id>6945070</id><snippet>filter("".join, result)
</snippet></ROW><ROW><id>6945075</id><snippet>if line == "&lt;name&gt;TO-101&lt;/name&gt;"</snippet></ROW><ROW><id>6945128</id><snippet>&gt;&gt;&gt; set("3 3 6 1 3 6".split())
set(['1', '3', '6'])
</snippet></ROW><ROW><id>6945501</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6945501</id><snippet>cmd = ['/Users/me/src/program', 'a.txt', 'b.txt']
</snippet></ROW><ROW><id>6945501</id><snippet>with open(...) as ...</snippet></ROW><ROW><id>6945522</id><snippet>set</snippet></ROW><ROW><id>6945522</id><snippet>list</snippet></ROW><ROW><id>6945522</id><snippet>for line in open('input'):</snippet></ROW><ROW><id>6945522</id><snippet>input</snippet></ROW><ROW><id>6945522</id><snippet>line</snippet></ROW><ROW><id>6945522</id><snippet>int()</snippet></ROW><ROW><id>6945522</id><snippet>try</snippet></ROW><ROW><id>6945522</id><snippet>set</snippet></ROW><ROW><id>6945522</id><snippet>#!/usr/bin/env python                                                           
numbers = set() # create a set for storing numbers that were already written       
out = open('output', 'w') # open 'output' file for writing                      
for line in open('input'): # loop through each line of 'input' file             
    try:                                                                        
        i = int(line) # try to convert line to integer                          
    except ValueError:  # if conversion to integer fails display a warning         
        print "Warning: cannot convert to number string '%s'" % line.strip()       
        continue # skip to next line on error                                   
    if i not in numbers: # check if the number wasn't already added to the set  
        out.write('%d\n' % i) # write the number to the 'output' file followed by EOL
        numbers.add(i) # add number to the set to mark it as already added
</snippet></ROW><ROW><id>6945522</id><snippet>input</snippet></ROW><ROW><id>6945522</id><snippet>stdout</snippet></ROW><ROW><id>6945522</id><snippet>list</snippet></ROW><ROW><id>6945522</id><snippet>numbers = set()</snippet></ROW><ROW><id>6945522</id><snippet>numbers = []</snippet></ROW><ROW><id>6945522</id><snippet>numbers.add(i)</snippet></ROW><ROW><id>6945522</id><snippet>numbers.append(i)</snippet></ROW><ROW><id>6945698</id><snippet>somedir/MyPak/__init__.py
</snippet></ROW><ROW><id>6945698</id><snippet>from MyMod import *
</snippet></ROW><ROW><id>6945698</id><snippet>import MyPak</snippet></ROW><ROW><id>6945698</id><snippet>__init__.py</snippet></ROW><ROW><id>6945698</id><snippet>from MyPak import something</snippet></ROW><ROW><id>6945698</id><snippet>__init__.py</snippet></ROW><ROW><id>6945698</id><snippet>MyMod</snippet></ROW><ROW><id>6945698</id><snippet>__init__.py</snippet></ROW><ROW><id>6945698</id><snippet>MyPak</snippet></ROW><ROW><id>6945698</id><snippet>MyMod.py</snippet></ROW><ROW><id>6945745</id><snippet>notindex &gt; badindex</snippet></ROW><ROW><id>6945745</id><snippet>notindex &lt; badindex</snippet></ROW><ROW><id>6945745</id><snippet>notindex = s.find('not')
if notindex == -1:
</snippet></ROW><ROW><id>6945745</id><snippet>return</snippet></ROW><ROW><id>6945745</id><snippet>if (*all right*):
    return s.replace(removetext, 'good')
return s
</snippet></ROW><ROW><id>6945745</id><snippet>split</snippet></ROW><ROW><id>6945745</id><snippet>def not_bad( s ):
    q = s.split( "bad" )
    w = q[0].split( "not" )
    if len(q) &gt; 1 &lt; len(w):
        return w[0] + "good" + "bad".join(q[1:])
    return s
</snippet></ROW><ROW><id>6945946</id><snippet>spectra_set = set((str(spectraItem[0]), str(spectraItem[25])) for spectraItem in spectraFinal)

returnList = []
for r120item in r120Final:
    if (r120item[2].strip(), r120item[10]) not in spectra_set:
       returnList.append(r120item)
</snippet></ROW><ROW><id>6945946</id><snippet>returnList</snippet></ROW><ROW><id>6945946</id><snippet>returnList = [r120item for r120item in r120Final 
                 if (r120item[2].strip(), r120item[10]) not in 
                     set((str(spectraItem[0]), str(spectraItem[25])) 
                         for spectraItem in spectraFinal)]
</snippet></ROW><ROW><id>6945946</id><snippet>spectraItem</snippet></ROW><ROW><id>6945946</id><snippet>spectra_dict = dict(((str(spectraItem[0]), str(spectraItem[25])), spectraItem) for spectraItem in spectraFinal)
returnList = []
for r120item in r120Final:
    key = (r120item[2].strip(), r120item[10])
    if key not in spectra_dict:
        returnList.append(r120item)
    else:
        return_item = some_function_of(r120item, spectra_dict[key])
        returnList.append(return_item)
</snippet></ROW><ROW><id>6946139</id><snippet>shutils.rmtree</snippet></ROW><ROW><id>6946139</id><snippet>os.remove</snippet></ROW><ROW><id>6946139</id><snippet>os.unlink</snippet></ROW><ROW><id>6946139</id><snippet>os.rename</snippet></ROW><ROW><id>6946139</id><snippet>shutils.rmtree</snippet></ROW><ROW><id>6946319</id><snippet>is_open</snippet></ROW><ROW><id>6946319</id><snippet>BooleanField</snippet></ROW><ROW><id>6946319</id><snippet>{% if latest_session.chat_room.is_open %}</snippet></ROW><ROW><id>6946617</id><snippet>next(s for s in reversed(list_of_string) if s)
</snippet></ROW><ROW><id>6946617</id><snippet>reversed(dictionary.values())</snippet></ROW><ROW><id>6946617</id><snippet>OrderedDict</snippet></ROW><ROW><id>6946663</id><snippet>pypm</snippet></ROW><ROW><id>6946663</id><snippet>pip</snippet></ROW><ROW><id>6946948</id><snippet>node_coords = x, y, z, zyx[z][y][x][0]
hoa[buffer_name].extend(node_coords)
</snippet></ROW><ROW><id>6946998</id><snippet>logging.basicConfig(level=logging.INFO)
</snippet></ROW><ROW><id>6947042</id><snippet>urllib2</snippet></ROW><ROW><id>6947042</id><snippet>wget</snippet></ROW><ROW><id>6947042</id><snippet>decode()</snippet></ROW><ROW><id>6947042</id><snippet>eval</snippet></ROW><ROW><id>6947313</id><snippet>def front_back(a, b):
    ad = (len(a) + 1) // 2
    bd = (len(b) + 1) // 2
    return a[:ad] + b[:bd] + a[ad:] + b[bd:]
</snippet></ROW><ROW><id>6947313</id><snippet>//</snippet></ROW><ROW><id>6947454</id><snippet>import csv
with open('GeoIPCountryWhois.csv', mode='r') as f:
    reader = csv.reader(f)
    for num, row in enumerate(reader):
        if '66.35' in row[0]:
            print num, row
</snippet></ROW><ROW><id>6947454</id><snippet>'66.35'</snippet></ROW><ROW><id>6947454</id><snippet>def numeric_ip(ip):
    return [int(x) for x in ip.split('.')]

desired_ip = numeric_ip('66.35.205.88')
with open('GeoIPCountryWhois.csv', mode='r') as f:
    for num, row in enumerate(csv.reader(f)):
        if numeric_ip(row[0]) &lt;= desired_ip &lt;= numeric_ip(row[1]):
            print num, row
</snippet></ROW><ROW><id>6947507</id><snippet>ForeignKey('app.Model')</snippet></ROW><ROW><id>6947909</id><snippet>exportselection</snippet></ROW><ROW><id>6947909</id><snippet>False</snippet></ROW><ROW><id>6947909</id><snippet>text_widget.configure(exportselection=False)
</snippet></ROW><ROW><id>6948092</id><snippet>./configure --with-python=/opt/python2.7/bin/python --with-apxs=/path/to/apxs
LD_RUN_PATH=/opt/python2.7/lib make
make install
</snippet></ROW><ROW><id>6948092</id><snippet>import sys
print sys.prefix
</snippet></ROW><ROW><id>6948231</id><snippet>logging.disable(logging.NOTSET)    
</snippet></ROW><ROW><id>6948375</id><snippet>.timer ON
select * from my_table;
</snippet></ROW><ROW><id>6948634</id><snippet>if test_stamp.find('month'): 
</snippet></ROW><ROW><id>6948634</id><snippet>True</snippet></ROW><ROW><id>6948634</id><snippet>month</snippet></ROW><ROW><id>6948634</id><snippet>-1</snippet></ROW><ROW><id>6948634</id><snippet>False</snippet></ROW><ROW><id>6948634</id><snippet>month</snippet></ROW><ROW><id>6948634</id><snippet>0</snippet></ROW><ROW><id>6948634</id><snippet>if test_stamp.find('month') != -1: 
</snippet></ROW><ROW><id>6948634</id><snippet>return test_stamp.find('month') != -1
</snippet></ROW><ROW><id>6949028</id><snippet>c.execute("SELECT * FROM mytable")
for row in c:
    #process row
</snippet></ROW><ROW><id>6949082</id><snippet>import scipy.optimize as optimize
p,cov,infodict,mesg,ier = optimize.leastsq(
    residuals,p_guess,args=(x,y),full_output=True)
</snippet></ROW><ROW><id>6949135</id><snippet>Two different domains
www.mysite.com
mysite.com
</snippet></ROW><ROW><id>6949174</id><snippet>login</snippet></ROW><ROW><id>6949174</id><snippet>def login():
    username = raw_input('username: ')

    if username != 'pi':
        # if 'pi' is not entered i want to print out 'restricted'
        return 'restricted'

    # if the correct user name is returned 'pi' I want to be
    # prompted to enter a password .
    password = raw_input('password: ')

    if password == '123':
        # if password is '123' want it to grant access
        # aka ' print out 'welcome'
        return 'welcome'

    if password == 'guest':
        # this is where the second password is , if 'guest'
        # is entered want it to grant access to different
        # program aka print 'welcome guest'
        return 'welcome guest'

    # wrong password. I believe you might want to return some other value
</snippet></ROW><ROW><id>6949297</id><snippet>root.title("Title")
</snippet></ROW><ROW><id>6949506</id><snippet>residuals</snippet></ROW><ROW><id>6949506</id><snippet>def residuals(p, x, y):
    return func(p, x)-y
</snippet></ROW><ROW><id>6949506</id><snippet>[ 3.  5.  1.]
</snippet></ROW><ROW><id>6949522</id><snippet>GObject.threads_init()</snippet></ROW><ROW><id>6949522</id><snippet>GLib.thread_init()</snippet></ROW><ROW><id>6949735</id><snippet>zlib</snippet></ROW><ROW><id>6949735</id><snippet>bz2</snippet></ROW><ROW><id>6949735</id><snippet>zipfile</snippet></ROW><ROW><id>6949737</id><snippet>d16 = (d for d in lst if d.get('id') == 16).next()
</snippet></ROW><ROW><id>6949737</id><snippet>StopIteration</snippet></ROW><ROW><id>6949737</id><snippet>lst</snippet></ROW><ROW><id>6949737</id><snippet>try:
    d16 = (d for d in lst if d.get('id') == 16).next()
except StopIteration:
    d16 = None
</snippet></ROW><ROW><id>6949737</id><snippet>for d16 in lst:
    if d16.get('id') == 16:
        break
else:
    d16 = None
</snippet></ROW><ROW><id>6949737</id><snippet>else:</snippet></ROW><ROW><id>6949737</id><snippet>break</snippet></ROW><ROW><id>6949740</id><snippet>db = DAL('sqlite://storage.db')
db = DAL('mysql://username:password@localhost/test')
db = DAL('gae')
</snippet></ROW><ROW><id>6949921</id><snippet>save = br.form['ctl00$cph2$ddlCourseSection'] 
print save
</snippet></ROW><ROW><id>6949921</id><snippet>save = br.form.possible_items('ctl00$cph2$ddlCourseSection')
print save
</snippet></ROW><ROW><id>6950133</id><snippet>cpulimit</snippet></ROW><ROW><id>6950133</id><snippet>(while [ 1 ]; do sleep 1; done) | ./cpulimit -p 2112 -l 50.
</snippet></ROW><ROW><id>6950133</id><snippet>cpulimit</snippet></ROW><ROW><id>6950133</id><snippet>/proc/{pid_of_cpulimit}/fd/0</snippet></ROW><ROW><id>6950133</id><snippet>process = subprocess.Popen(['./cpulimit', '-p', '2112', '-l', '50'], stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>6950133</id><snippet>process.communicate(input='40')
process.communicate(input='80')
</snippet></ROW><ROW><id>6950448</id><snippet>soup.findall()</snippet></ROW><ROW><id>6950448</id><snippet>href</snippet></ROW><ROW><id>6950448</id><snippet>class</snippet></ROW><ROW><id>6950448</id><snippet>status-link</snippet></ROW><ROW><id>6950448</id><snippet>return</snippet></ROW><ROW><id>6950448</id><snippet>for time in times:
    stamp = time.renderContents()
    test_stamp = str(stamp)
    print test_stamp
    if not test_stamp[0] in '0123456789':
        continue
    if test_stamp == '3 months ago':  
        return True
    else:
        return False
</snippet></ROW><ROW><id>6950448</id><snippet>print</snippet></ROW><ROW><id>6950448</id><snippet>times</snippet></ROW><ROW><id>6950448</id><snippet>None</snippet></ROW><ROW><id>6950448</id><snippet>while not stamp and tweets</snippet></ROW><ROW><id>6950448</id><snippet>while stamp is False and tweets is True</snippet></ROW><ROW><id>6950448</id><snippet>while not stamp and tweets</snippet></ROW><ROW><id>6950448</id><snippet>None</snippet></ROW><ROW><id>6950448</id><snippet>False</snippet></ROW><ROW><id>6950497</id><snippet>def update(mylist, row, col, cmprow, cmpcol):
    lo, hi = mylist[row][col]
    low, high = mylist[cmprow][cmpcol]

    # always replace the current value if it's (-1, -1)
    if (lo, hi) == (-1, -1):
        mylist[row][col] = low, high
        print "replacing empty", row, col, "with", cmprow, cmpcol
        return

    # never replace the current value if the ranges don't overlap
    # or the other range is (-1, -1)
    if (low, high) == (-1, -1) or lo &gt;= high or hi &lt;= low:
        print row, col, "doesn't overlap", cmprow, cmpcol
        return

    # set the low to the highest low and the high to the lowest high
    print "updating", row, col, "with", cmprow, cmpcol
    mylist[row][col] = max((lo, low)), min((hi, high))



def update_ranges(oldlist):
    # make a copy of the list as we're going to modify it
    mylist = oldlist[:]
    # we don't need the row titles, they just complicate things
    rowtitles, mylist = zip(*mylist)
    rows = len(mylist)
    columns = range(len(mylist[0]))

    # for each row except the last
    for i in xrange(rows - 1):
        # update it by going down all the rows below it
        for k in xrange(i+1, rows):
            # for both columns
            for j in columns:
                update(mylist, i, j, k, j)

    # put the row titles back in
    mylist = zip(rowtitles, mylist)
    return mylist



def test():
    oldlist = [ ('a', [ (-1, -1), (0.2, 0.4) ] ),
               ('b', [ (0.3, 1.0), (-1, -1) ] ),
               ('c', [ (-1, -1), (-1, -1) ] ),
               ('d', [ (0.15, 0.35), (0.05, 0.15) ] ) ]
    print "Original List"
    print '\n'.join(str(l) for l in oldlist)
    newlist = update_ranges(oldlist)
    print "New List"
    print '\n'.join(str(l) for l in newlist)

if __name__ == '__main__':
    test()
</snippet></ROW><ROW><id>6950497</id><snippet>update_ranges</snippet></ROW><ROW><id>6950612</id><snippet>result2 = [str(x) for x in result]
</snippet></ROW><ROW><id>6950612</id><snippet>+=</snippet></ROW><ROW><id>6950612</id><snippet>str(123)</snippet></ROW><ROW><id>6950612</id><snippet>'123'</snippet></ROW><ROW><id>6950612</id><snippet>['1', '2', '3']</snippet></ROW><ROW><id>6950612</id><snippet>['1', '2', '3']</snippet></ROW><ROW><id>6950612</id><snippet>result2.append(str(x)) # instead of result2 += str(x)
</snippet></ROW><ROW><id>6950733</id><snippet>&gt;&gt;&gt; t = (1, 2, 3)
&gt;&gt;&gt; d = {'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; t + (d,)
(1, 2, 3, {'a': 1, 'c': 3, 'b': 2})
</snippet></ROW><ROW><id>6950733</id><snippet>&gt;&gt;&gt; t
(1, 2, 3)
</snippet></ROW><ROW><id>6950733</id><snippet>t += (d,)
</snippet></ROW><ROW><id>6950733</id><snippet>t = t + (d,)
</snippet></ROW><ROW><id>6950800</id><snippet>toString()</snippet></ROW><ROW><id>6950800</id><snippet>__repr__</snippet></ROW><ROW><id>6950800</id><snippet>class Choice(object):
    def __init__(self, id, label):
        self.id = id
        self.label = label

    def __repr__(self):
        return self.label
</snippet></ROW><ROW><id>6950818</id><snippet>CELERY_ROUTES = {
    'mypackage.myclass.runworker'      : {'queue':'myqueue'},
}
</snippet></ROW><ROW><id>6950818</id><snippet>        ConnectionFactory factory = new ConnectionFactory();
        Connection connection = null ;
        try {
            connection = factory.newConnection(mqHost, mqPort);
        } catch (IOException ioe) {
            log.error("Unable to create new MQ connection from factory.", ioe) ;
        }

        Channel channel = null ;
        try {
            channel = connection.createChannel();
        } catch (IOException ioe) {
            log.error("Unable to create new channel for MQ connection.", ioe) ;
        }

        try {
            channel.queueDeclare("celery", false, false, false, true, null);
        } catch (IOException ioe) {
            log.error("Unable to declare queue for MQ channel.", ioe) ;
        }

        try {
            channel.exchangeDeclare("myqueue", "direct") ;
        } catch (IOException ioe) {
            log.error("Unable to declare exchange for MQ channel.", ioe) ;
        }

        try {
            channel.queueBind("celery", "myqueue", "myqueue") ;
        } catch (IOException ioe) {
            log.error("Unable to bind queue for channel.", ioe) ;
        }

            // Generate the message body as a string here.

        try {
            channel.basicPublish(mqExchange, mqRouteKey, 
                new AMQP.BasicProperties("application/json", "ASCII", null, null, null, null, null, null, null, null, null, "guest", null, null),
                messageBody.getBytes("ASCII"));
        } catch (IOException ioe) {
            log.error("IOException encountered while trying to publish task via MQ.", ioe) ;
        }
</snippet></ROW><ROW><id>6950828</id><snippet>__init__</snippet></ROW><ROW><id>6950828</id><snippet>class A:
    def meth_a(self): pass

    m = {1: meth_a}
    def foo(self, number):
        self.m[number](self)

a = A()
a.foo(1)
</snippet></ROW><ROW><id>6950828</id><snippet>int</snippet></ROW><ROW><id>6950828</id><snippet>staticmethod</snippet></ROW><ROW><id>6950828</id><snippet>classmethod</snippet></ROW><ROW><id>6950930</id><snippet>sourceline</snippet></ROW><ROW><id>6951020</id><snippet>a = 'aBcDeFg'
print a.lower() # abcdefg
</snippet></ROW><ROW><id>6951020</id><snippet>"".join(
  # if i is between A and Z change it to between a and z
  [chr(ord(i)+32) if 65&lt;= ord(i) &lt;= 90 
  # otherwise leave it as is
  else i for i in a])
</snippet></ROW><ROW><id>6951173</id><snippet>python playwav.py my_fav_wav.wav</snippet></ROW><ROW><id>6951173</id><snippet>import pyaudio
import wave
import sys

# length of data to read.
chunk = 1024

# validation. If a wave file hasn't been specified, exit.
if len(sys.argv) &lt; 2:
    print "Plays a wave file.\n\n" +\
          "Usage: %s filename.wav" % sys.argv[0]
    sys.exit(-1)

'''
************************************************************************
      This is the start of the "minimum needed to read a wave"
************************************************************************
'''
# open the file for reading.
wf = wave.open(sys.argv[1], 'rb')

# create an audio object
p = pyaudio.PyAudio()

# open stream based on the wave object which has been input.
stream = p.open(format =
                p.get_format_from_width(wf.getsampwidth()),
                channels = wf.getnchannels(),
                rate = wf.getframerate(),
                output = True)

# read data (based on the chunk size)
data = wf.readframes(chunk)

# play stream (looping from beginning of file to the end)
while data != '':
    # writing to the stream is what *actually* plays the sound.
    stream.write(data)
    data = wf.readframes(chunk)

# cleanup stuff.
stream.close()    
p.terminate()
</snippet></ROW><ROW><id>6951317</id><snippet>__html__</snippet></ROW><ROW><id>6951317</id><snippet>Markup</snippet></ROW><ROW><id>6951369</id><snippet>mysql --default-character-set=utf-8 -e "SELECT some, thing FROM some_where" -u my_user -p my_database &gt; some_file.sql
</snippet></ROW><ROW><id>6951394</id><snippet>ON DELETE CASCADE</snippet></ROW><ROW><id>6951399</id><snippet>python manage.py my_cool_command
</snippet></ROW><ROW><id>6951789</id><snippet>dataBitMap.SaveBitmapFile(cDC, bmpfilenamename)
</snippet></ROW><ROW><id>6951789</id><snippet>bmpinfo = dataBitMap.GetInfo()
bmpstr = dataBitMap.GetBitmapBits(True)
im = Image.frombuffer(
    'RGB',
    (bmpinfo['bmWidth'], bmpinfo['bmHeight']),
    bmpstr, 'raw', 'BGRX', 0, 1)
</snippet></ROW><ROW><id>6951832</id><snippet>a + b</snippet></ROW><ROW><id>6951832</id><snippet>a</snippet></ROW><ROW><id>6951832</id><snippet>b</snippet></ROW><ROW><id>6951832</id><snippet>a</snippet></ROW><ROW><id>6951832</id><snippet>+</snippet></ROW><ROW><id>6951832</id><snippet>a += b</snippet></ROW><ROW><id>6951832</id><snippet>a</snippet></ROW><ROW><id>6951832</id><snippet>a</snippet></ROW><ROW><id>6951832</id><snippet>+=</snippet></ROW><ROW><id>6951832</id><snippet>list.extend</snippet></ROW><ROW><id>6951832</id><snippet>+=</snippet></ROW><ROW><id>6951832</id><snippet>+</snippet></ROW><ROW><id>6951832</id><snippet>=</snippet></ROW><ROW><id>6951832</id><snippet>+=</snippet></ROW><ROW><id>6951832</id><snippet>a = concat(a, b)
</snippet></ROW><ROW><id>6951832</id><snippet>a.extend(a, b)
</snippet></ROW><ROW><id>6951832</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = "abc"
&gt;&gt;&gt; a + b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only concatenate list (not "str") to list
&gt;&gt;&gt; a += b
&gt;&gt;&gt; a
[1, 2, 3, 'a', 'b', 'c']
</snippet></ROW><ROW><id>6951832</id><snippet>+=</snippet></ROW><ROW><id>6951832</id><snippet>+</snippet></ROW><ROW><id>6951924</id><snippet>$ py2applet --make-setup MyApplication.py
Wrote setup.py
$ python setup.py py2app -A
</snippet></ROW><ROW><id>6951954</id><snippet>any()</snippet></ROW><ROW><id>6951954</id><snippet>foods = ["apples", "oranges", "jerky", "tofu"]

if "chew" in action and any(f in action for f in foods):
    print "Yum!"
else:
    print "Ew!"
</snippet></ROW><ROW><id>6951954</id><snippet>"jerkeyblahchew"</snippet></ROW><ROW><id>6951954</id><snippet>"Yum!"</snippet></ROW><ROW><id>6951954</id><snippet>action</snippet></ROW><ROW><id>6951954</id><snippet>"chew"</snippet></ROW><ROW><id>6951954</id><snippet>"chew X"</snippet></ROW><ROW><id>6951954</id><snippet>foods = ["apples", "oranges", "jerky", "tofu"]
action_words = set(word.lower() for word in action.split())

if "chew" in action_words and any(f in action_words for f in foods):
    print "Yum!"
else:
    print "Ew!"
</snippet></ROW><ROW><id>6953124</id><snippet>_path</snippet></ROW><ROW><id>6953124</id><snippet>str()</snippet></ROW><ROW><id>6953124</id><snippet>Source</snippet></ROW><ROW><id>6953124</id><snippet>self</snippet></ROW><ROW><id>6953124</id><snippet>self</snippet></ROW><ROW><id>6953124</id><snippet>self._path</snippet></ROW><ROW><id>6953166</id><snippet>&gt;&gt;&gt; vers1 = '1.0.1'.split('.')
&gt;&gt;&gt; vers2 = '1.0.0'.split('.')
&gt;&gt;&gt; vers1
['1', '0', '1']
&gt;&gt;&gt; vers2
['1', '0', '0']
&gt;&gt;&gt; vers1 &gt; vers2
True
&gt;&gt;&gt; vers2 &gt; vers1
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6953166</id><snippet>&gt;&gt;&gt; var vers1 = "1.0.1".split('.');
&gt;&gt;&gt; var vers2 = "1.0.0".split('.');
&gt;&gt;&gt; vers1
["1", "0", "1"]
&gt;&gt;&gt; vers2
["1", "0", "0"]
&gt;&gt;&gt; vers1 &gt; vers2
true
&gt;&gt;&gt; vers2 &gt; vers1
false
</snippet></ROW><ROW><id>6953262</id><snippet>class SomeSharedData(object):
    def __init__(self):
        self.errors = 0
</snippet></ROW><ROW><id>6953262</id><snippet>shared.errors += 1
</snippet></ROW><ROW><id>6953795</id><snippet>sum_i X[:,i]*Y[:,i].T == X*Y.T
</snippet></ROW><ROW><id>6953795</id><snippet>Z = X*Y.T
</snippet></ROW><ROW><id>6953870</id><snippet>site/
    yoursitename/
        __init__.py
        manage.py
        settings.py
        urls.py
src/
    your/
        namespaced/
            apps/
                app1/
                    models.py...
                app2/...
</snippet></ROW><ROW><id>6953870</id><snippet>SITE_PATH = os.path.abspath(os.path.dirname(__file__))
PROJECT_PATH = os.path.normpath(os.path.join(SITE_PATH, '..', '..'))
SRC_PATH = os.path.join(PROJECT_PATH, 'src')
if SRC_PATH not in sys.path:
    sys.path.insert(0, SRC_PATH)
</snippet></ROW><ROW><id>6953895</id><snippet>PYTHONHOME</snippet></ROW><ROW><id>6953895</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6953895</id><snippet>scons.bat</snippet></ROW><ROW><id>6953965</id><snippet>def anim(self):

    animation = QtCore.QPropertyAnimation(self.button, "geometry")
    animation.setDuration(10000)
    animation.setStartValue(QtCore.QRect(0,0,0,0))
    animation.setEndValue(QtCore.QRect(0,0,200,200))
    animation.start()

    self.animation = animation
</snippet></ROW><ROW><id>6954630</id><snippet>True</snippet></ROW><ROW><id>6954630</id><snippet>False</snippet></ROW><ROW><id>6954630</id><snippet>'True'</snippet></ROW><ROW><id>6954630</id><snippet>'False'</snippet></ROW><ROW><id>6954630</id><snippet>__eq__</snippet></ROW><ROW><id>6954630</id><snippet>__lt__</snippet></ROW><ROW><id>6954630</id><snippet>s</snippet></ROW><ROW><id>6954630</id><snippet>class A(object):
    def __init__(self, s=''):
        self.s = s

    def __eq__(self, other):
        return self.s.lower() == other.s.lower()

a = A('aaaa')
b = A('AAAA')
print a == b # prints True
b = A('bbbb')
print a == b # prints False
</snippet></ROW><ROW><id>6954782</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>6954782</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>6954782</id><snippet>python_select</snippet></ROW><ROW><id>6954782</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>6954782</id><snippet>python</snippet></ROW><ROW><id>6954782</id><snippet>mv /usr/bin/python /usr/bin/python.orig
ln -s /opt/local/bin/python /usr/bin/python
port select --set python python26
</snippet></ROW><ROW><id>6954782</id><snippet>python26</snippet></ROW><ROW><id>6954782</id><snippet>python_select</snippet></ROW><ROW><id>6954782</id><snippet>port select --set python</snippet></ROW><ROW><id>6955147</id><snippet>Python</snippet></ROW><ROW><id>6955147</id><snippet>urllib2</snippet></ROW><ROW><id>6955147</id><snippet>requests</snippet></ROW><ROW><id>6955147</id><snippet>lxml</snippet></ROW><ROW><id>6955147</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>6955147</id><snippet>scrapy</snippet></ROW><ROW><id>6955246</id><snippet>cd()</snippet></ROW><ROW><id>6955246</id><snippet>WLST</snippet></ROW><ROW><id>6955246</id><snippet>Jython</snippet></ROW><ROW><id>6955246</id><snippet>WLST</snippet></ROW><ROW><id>6955522</id><snippet>import urllib
s = u'Здравей'
urllib.quote(s.encode('utf-8'))
# %D0%97%D0%B4%D1%80%D0%B0%D0%B2%D0%B5%D0%B9
</snippet></ROW><ROW><id>6955522</id><snippet>urllib.urlencode({'data': s.encode('utf-8')})
# 'data=%D0%97%D0%B4%D1%80%D0%B0%D0%B2%D0%B5%D0%B9'
</snippet></ROW><ROW><id>6955707</id><snippet>shutil</snippet></ROW><ROW><id>6955707</id><snippet>shutil.copystat()</snippet></ROW><ROW><id>6955707</id><snippet>shutil.move()</snippet></ROW><ROW><id>6955707</id><snippet>shutil.copy2()</snippet></ROW><ROW><id>6955707</id><snippet>shutil.copystat()</snippet></ROW><ROW><id>6955707</id><snippet>os.rename()</snippet></ROW><ROW><id>6955825</id><snippet>o.f(x)</snippet></ROW><ROW><id>6955825</id><snippet>f</snippet></ROW><ROW><id>6955825</id><snippet>o</snippet></ROW><ROW><id>6955825</id><snippet>x</snippet></ROW><ROW><id>6955825</id><snippet>f</snippet></ROW><ROW><id>6955825</id><snippet>__getattr__</snippet></ROW><ROW><id>6955825</id><snippet>__getattr__</snippet></ROW><ROW><id>6955825</id><snippet>o.some_data_that_doesnt_exist</snippet></ROW><ROW><id>6955825</id><snippet>__getattr__</snippet></ROW><ROW><id>6955825</id><snippet>class MyRubylikeThing(object):
    #...

    def __getattr__(self, name):
        def _missing(*args, **kwargs):
            print "A missing method was called."
            print "The object was %r, the method was %r. " % (self, name)
            print "It was called with %r and %r as arguments" % (args, kwargs)
        return _missing

r = MyRubylikeThing()
r.hello("there", "world", also="bye")
</snippet></ROW><ROW><id>6955825</id><snippet>A missing method was called.
The object was &lt;__main__.MyRubylikeThing object at 0x01FA5940&gt;, the method was 'hello'.
It was called with ('there', 'world') and {'also': 'bye'} as arguments
</snippet></ROW><ROW><id>6955914</id><snippet>from django.db.models import Count
User.objects.filter(device__is_enabled=1).annotate(
    device_count=Count('device')).filter(device_count=2)

User.objects.exclude(device__is_enabled=0)
</snippet></ROW><ROW><id>6956350</id><snippet>import re
# Use "with" so the file will automatically be closed
with open("input.txt", "r") as fobj:
    text = fobj.read()
# Use word boundary anchors (\b) so only five-digit numbers are matched.
# Otherwise, 123456 would also be matched (and the match result would be 12345)!
output = re.findall(r'\b\d{5}\b', text)
# Join the matches together
out_str = ",".join(output)
# Write them to a file, again using "with" so the file will be closed.
with open("output.txt", "w") as outp:
    outp.write(out_str)
</snippet></ROW><ROW><id>6956456</id><snippet>\x8\</snippet></ROW><ROW><id>6956456</id><snippet>\x08</snippet></ROW><ROW><id>6956914</id><snippet>print</snippet></ROW><ROW><id>6956914</id><snippet>print repr(s)</snippet></ROW><ROW><id>6956914</id><snippet>print repr(s)</snippet></ROW><ROW><id>6956914</id><snippet>u.decode('unicode_escape').encode('iso8859-1').decode('utf8')
</snippet></ROW><ROW><id>6957456</id><snippet>lxml.etree</snippet></ROW><ROW><id>6957698</id><snippet>ABC/
    __init__.py
    A.py
    B.pyx
    C.so             (or C.dll and C.lib on win)
</snippet></ROW><ROW><id>6957698</id><snippet>#input-encoding: utf-8
from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

setup(
  name = "ABC",
  packages = ["ABC"],
  package_dir = { "ABC" : "." },
  ext_package = "ABC",
  cmdclass = {'build_ext': build_ext},
  package_data = { ".": [ "C.dll"] },
  ext_modules = [ Extension("B", sources="B.pyx", libraries="C" ) ]
)
</snippet></ROW><ROW><id>6957698</id><snippet>package_dir = { "ABC" : "." },</snippet></ROW><ROW><id>6958210</id><snippet>:py:meth:`module.class.mymethodname`
</snippet></ROW><ROW><id>6958518</id><snippet>A</snippet></ROW><ROW><id>6958518</id><snippet>B</snippet></ROW><ROW><id>6958518</id><snippet>url_for()</snippet></ROW><ROW><id>6958518</id><snippet>from flask import Blueprint
main = Blueprint('main', __name__)

@main.route('/')
def index():
    pass
</snippet></ROW><ROW><id>6958518</id><snippet>from flask import Blueprint
admin = Blueprint('admin', __name__)

@admin.route('/admin')
def index():
    pass
</snippet></ROW><ROW><id>6958518</id><snippet>from flask import Flask
from main_views import main
from admin_views import admin

app = Flask('my_application')
app.register_blueprint(main)
app.register_blueprint(admin)
</snippet></ROW><ROW><id>6958518</id><snippet>url_for('main.index')</snippet></ROW><ROW><id>6958518</id><snippet>url_for('admin.index')</snippet></ROW><ROW><id>6958518</id><snippet>url_prefix</snippet></ROW><ROW><id>6958518</id><snippet>from flask import Blueprint
admin = Blueprint('admin', __name__)

@admin.route('/')
def index():
    pass

@admin.route('/logout')
def logout():
    pass
</snippet></ROW><ROW><id>6958518</id><snippet>from flask import Flask
from admin_views import admin

app = Flask('my_application')
app.register_blueprint(admin, url_prefix='/admin')
</snippet></ROW><ROW><id>6958518</id><snippet>/admin/</snippet></ROW><ROW><id>6958518</id><snippet>/admin/logout</snippet></ROW><ROW><id>6958724</id><snippet>with open(infile) as fhi, open(outfile, 'w') as fho:
  for line in fhi:
    if line == 'myMatchString':
      fho.write(line.replace('this', 'that'))
</snippet></ROW><ROW><id>6958724</id><snippet>with</snippet></ROW><ROW><id>6958724</id><snippet>with</snippet></ROW><ROW><id>6958877</id><snippet>t = (name,)
</snippet></ROW><ROW><id>6959111</id><snippet>import Image
import ImageDraw
import numpy

def transformblit(src_tri, dst_tri, src_img, dst_img):
    ((x11,x12), (x21,x22), (x31,x32)) = src_tri
    ((y11,y12), (y21,y22), (y31,y32)) = dst_tri

    M = numpy.array([
                     [y11, y12, 1, 0, 0, 0],
                     [y21, y22, 1, 0, 0, 0],
                     [y31, y32, 1, 0, 0, 0],
                     [0, 0, 0, y11, y12, 1],
                     [0, 0, 0, y21, y22, 1],
                     [0, 0, 0, y31, y32, 1]
                ])

    y = numpy.array([x11, x21, x31, x12, x22, x32])

    A = numpy.linalg.solve(M, y)

    src_copy = src_img.copy()
    srcdraw = ImageDraw.Draw(src_copy)
    srcdraw.polygon(src_tri)
    src_copy.show()
    transformed = src_img.transform(dst_img.size, Image.AFFINE, A)

    mask = Image.new('1', dst_img.size)
    maskdraw = ImageDraw.Draw(mask)
    maskdraw.polygon(dst_tri, fill=255)

    dstdraw = ImageDraw.Draw(dst_img)
    dstdraw.polygon(dst_tri, fill=(255,255,255))
    dst_img.show()
    dst_img.paste(transformed, mask=mask)
    dst_img.show()


im100 = Image.open('test100.jpg')
im250 = Image.open('test250.jpg')

tri1 = [(10,10), (20,20), (10,20)]
tri2 = [(35,30), (75,19), (50,90)]

transformblit(tri1, tri2, im100, im250)
</snippet></ROW><ROW><id>6959247</id><snippet>MyClass</snippet></ROW><ROW><id>6959247</id><snippet>SomeDatabaseApi.connect</snippet></ROW><ROW><id>6959247</id><snippet>SomeDatabaseApi.Connection.startTransaction</snippet></ROW><ROW><id>6959402</id><snippet>.py</snippet></ROW><ROW><id>6959402</id><snippet>__init__.py</snippet></ROW><ROW><id>6959402</id><snippet>__init__.py</snippet></ROW><ROW><id>6959509</id><snippet>&gt;&gt;&gt; numpy.tile(2, 25)
array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
</snippet></ROW><ROW><id>6959509</id><snippet>&gt;&gt;&gt; numpy.tile(2, (5, 5))
array([[2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2]])
</snippet></ROW><ROW><id>6959682</id><snippet>with open("bigfile", mode="r") as bigfile:
    reader = bigfile.read()
    for i,part in enumerate(reader.split("Racecar")):
        with open("File_" + i+1, mode="w") as newfile:
            newfile.write("Racecar"+part)
</snippet></ROW><ROW><id>6959701</id><snippet>IPython</snippet></ROW><ROW><id>6959701</id><snippet>IPython</snippet></ROW><ROW><id>6959701</id><snippet>ipython qtconsole</snippet></ROW><ROW><id>6959802</id><snippet>class BaseDataType(object):
    parent_operation = relationship(Operation, backref="datatype")

class DataTypeA(Base, BaseDataType):
    id = Column(Integer, primary_key=True)

class DataTypeB(Base, BaseDataType):
    id = Column(Integer, primary_key=True)
</snippet></ROW><ROW><id>6960133</id><snippet>$str = 'smth Y1 test X foo X Y2 bar X Y1 X X Y2';
$str =~ s/X(?=((?!Y1).)*Y2)/Z/g;
print $str; #smth Y1 test Z foo Z Y2 bar X Y1 Z Z Y2
</snippet></ROW><ROW><id>6960173</id><snippet>goto</snippet></ROW><ROW><id>6960173</id><snippet>goto</snippet></ROW><ROW><id>6960173</id><snippet>goto</snippet></ROW><ROW><id>6960173</id><snippet>goto</snippet></ROW><ROW><id>6960173</id><snippet>sys.settrace</snippet></ROW><ROW><id>6960173</id><snippet>goto</snippet></ROW><ROW><id>6960173</id><snippet>dis.dis(fn)</snippet></ROW><ROW><id>6960173</id><snippet>fn.func_code.co_code</snippet></ROW><ROW><id>6960173</id><snippet>goto</snippet></ROW><ROW><id>6960173</id><snippet>@goto
def test1(n):
    s = 0

    label .myLoop

    if n &lt;= 0:
        return s
    s += n
    n -= 1

    goto .myLoop

&gt;&gt;&gt; test1(10)
55
</snippet></ROW><ROW><id>6960252</id><snippet>'/var/projects/python/worker.py'</snippet></ROW><ROW><id>6960252</id><snippet>ls -l /var/projects/python/worker.py</snippet></ROW><ROW><id>6960534</id><snippet>print test+" World"</snippet></ROW><ROW><id>6960534</id><snippet>print "%s World" % test #Prints 'Hello World'</snippet></ROW><ROW><id>6960534</id><snippet>sprintf</snippet></ROW><ROW><id>6960534</id><snippet>print "Good morning %(name), there are %(count)d new articles in %(topic)s today. Would you like to &lt;a href='%(url)s'&gt;read them&lt;/a&gt;?" % values</snippet></ROW><ROW><id>6960534</id><snippet>"{} World".format(test)</snippet></ROW><ROW><id>6960685</id><snippet>foundItems = [elem for elem in results if 'type_two' in elem['types']]
</snippet></ROW><ROW><id>6960685</id><snippet>'type_two'</snippet></ROW><ROW><id>6960685</id><snippet>types</snippet></ROW><ROW><id>6960685</id><snippet>if elem['types'] == ['type_two']</snippet></ROW><ROW><id>6961102</id><snippet>myDict = {}
myDict[0] = {...}
</snippet></ROW><ROW><id>6961102</id><snippet>myList = []
myList.append({...}
</snippet></ROW><ROW><id>6961157</id><snippet>test_</snippet></ROW><ROW><id>6961194</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>6961194</id><snippet>QGraphicText</snippet></ROW><ROW><id>6961194</id><snippet>QGraphicText</snippet></ROW><ROW><id>6961263</id><snippet>logging.handlers.TimeRotatingFileHandler
</snippet></ROW><ROW><id>6961313</id><snippet># Load ctypes, and your library
from ctypes import *
mylib = CDLL("mylibrary.so")

# Declare the function's prototype. This isn't strictly required.
mylib.Add.argtypes = [c_int, c_int]
mylib.Add.restype = c_int

# Call it!
result = mylib.Add(123, 456)
</snippet></ROW><ROW><id>6961622</id><snippet>import web
import os
import urllib
import posixpath

urls = ("/.*", "hello")
app = web.application(urls, globals())

class hello:
    def GET(self):
        return 'Hello, world!'


class StaticMiddleware:
    """WSGI middleware for serving static files."""
    def __init__(self, app, prefix='/static/', root_path='/foo/bar/'):
        self.app = app
        self.prefix = prefix
        self.root_path = root_path

    def __call__(self, environ, start_response):
        path = environ.get('PATH_INFO', '')
        path = self.normpath(path)

        if path.startswith(self.prefix):
            environ["PATH_INFO"] = os.path.join(self.root_path, web.lstrips(path, self.prefix))
            return web.httpserver.StaticApp(environ, start_response)
        else:
            return self.app(environ, start_response)

    def normpath(self, path):
        path2 = posixpath.normpath(urllib.unquote(path))
        if path.endswith("/"):
            path2 += "/"
        return path2


if __name__ == "__main__":
    wsgifunc = app.wsgifunc()
    wsgifunc = StaticMiddleware(wsgifunc)
    wsgifunc = web.httpserver.LogMiddleware(wsgifunc)
    server = web.httpserver.WSGIServer(("0.0.0.0", 8080), wsgifunc)
    print "http://%s:%d/" % ("0.0.0.0", 8080)
    try:
        server.start()
    except KeyboardInterrupt:
        server.stop()
</snippet></ROW><ROW><id>6961780</id><snippet>try:
  if x:
      print 'before statement 1'
      statement1
      print 'before statement 2' #ecc. ecc.
      statement2
      statement3
  elif y:
      statement4
      statement5
      statement6
  else:
      raise

except:
      statement7
</snippet></ROW><ROW><id>6961780</id><snippet>try:
      if x:
          print 'before statement 1'
          statement1
          print 'before statement 2' #ecc. ecc.
          statement2
          statement3
      elif y:
          statement4
          statement5
          statement6
      else:
          raise
except:
    print sys.exc_traceback.tb_lineno 
    #this is the line number, but there are also other infos
</snippet></ROW><ROW><id>6962240</id><snippet>def get_item_by_label(self, tree, search_text, root_item):
    item, cookie = tree.GetFirstChild(root_item)

    while item.IsOk():
        text = tree.GetItemText(item)
        if text.lower() == search_text.lower():
            return item
        if tree.ItemHasChildren(item):
            match = self.get_item_by_label(tree, search_text, item)
            if match.IsOk():
                return match
        item, cookie = tree.GetNextChild(root_item, cookie)

    return wx.TreeItemId()

result = get_item_by_label(tree, 'MyStories', tree.GetRootItem())
if result.IsOk():
    print('We have a match!')
</snippet></ROW><ROW><id>6962425</id><snippet>&gt;&gt;&gt; a="08-26-2009;08-27-2009;08-29-2009"
&gt;&gt;&gt; a_split = a.split(';')
&gt;&gt;&gt; a_split
['08-26-2009', '08-27-2009', '08-29-2009']
</snippet></ROW><ROW><id>6962696</id><snippet>def fancy_path(instance, filename):
    return 'fancy_path/file_%s.xml' % self.instance.album.id

original = models.ImageField(upload_to=fancy_path, max_length=200)
</snippet></ROW><ROW><id>6962763</id><snippet>Test</snippet></ROW><ROW><id>6962763</id><snippet>Test.spam</snippet></ROW><ROW><id>6962763</id><snippet>class MetaTest(type):
    @property
    def spam(cls):
        return cls._spam

class Test(object):
    __metaclass__=MetaTest
    _spam = 42

    @classmethod
    def get_spam(cls):
        cls._spam

    @classmethod
    def set_spam(cls, value):
        cls._spam = value

    spam = property(get_spam, set_spam)

print Test.spam
# 42
</snippet></ROW><ROW><id>6962763</id><snippet>Test.spam = 24
</snippet></ROW><ROW><id>6962763</id><snippet>AttributeError: can't set attribute
</snippet></ROW><ROW><id>6962906</id><snippet>import numpy as np
import pylab as pl
x = np.linspace(0, 2*np.pi, 100)
pl.plot(x, np.sin(x), "-x", label=u"sin")
pl.plot(x, np.random.standard_normal(len(x)), 'o', label=u"rand")
leg = pl.legend(numpoints=3)
l = leg.legendHandles[1]
l._legmarker.set_xdata(l._legmarker.get_xdata()[1:2])
l._legmarker.set_ydata(l._legmarker.get_ydata()[1:2])
##or
#l._legmarker.set_markevery(3)
pl.show()
</snippet></ROW><ROW><id>6963100</id><snippet>event_generate</snippet></ROW><ROW><id>6963100</id><snippet>import Tkinter as tk
from Tkinter import TclError

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.text = tk.Text(self, width=40, height=8)
        self.button = tk.Button(self, text="do it!", command=self.doit)
        self.button.pack(side="top")
        self.text.pack(side="bottom", fill="both", expand=True)
        self.doit()

    def doit(self, *args):
        # get the clipboard data, and replace all newlines
        # with the literal string "\n"
        clipboard = self.clipboard_get()
        clipboard = clipboard.replace("\n", "\\n")

        # delete the selected text, if any
        try:
            start = self.text.index("sel.first")
            end = self.text.index("sel.last")
            self.text.delete(start, end)
        except TclError, e:
            # nothing was selected, so paste doesn't need
            # to delete anything
            pass

        # insert the modified clipboard contents
        self.text.insert("insert", clipboard)

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>6963100</id><snippet>\n</snippet></ROW><ROW><id>6963124</id><snippet>twisted.python.log.deferr()</snippet></ROW><ROW><id>6963124</id><snippet>twisted.python.log.PythonLoggingObserver</snippet></ROW><ROW><id>6963124</id><snippet>logging</snippet></ROW><ROW><id>6963124</id><snippet>twisted.python.log.FileLogObserver</snippet></ROW><ROW><id>6963124</id><snippet>start()</snippet></ROW><ROW><id>6963124</id><snippet>StdioOnnaStick</snippet></ROW><ROW><id>6963124</id><snippet>sys.stdout</snippet></ROW><ROW><id>6963124</id><snippet>sys.stderr</snippet></ROW><ROW><id>6963124</id><snippet>print</snippet></ROW><ROW><id>6963124</id><snippet>twisted.internet.SelectReactor</snippet></ROW><ROW><id>6963124</id><snippet>runUntilCurrent()</snippet></ROW><ROW><id>6963124</id><snippet>twisted.internet.base.ReactorBase</snippet></ROW><ROW><id>6963124</id><snippet>twisted.*</snippet></ROW><ROW><id>6963124</id><snippet>twisted.python.log.deferr</snippet></ROW><ROW><id>6963124</id><snippet>def err(_stuff=None, _why=None, **kw)</snippet></ROW><ROW><id>6963259</id><snippet>\n</snippet></ROW><ROW><id>6963259</id><snippet>__contain__</snippet></ROW><ROW><id>6963259</id><snippet>import timeit

prepare = """
with open('bible.txt') as fh:
    text = fh.read()
"""

presplit_prepare = """
with open('bible.txt') as fh:
    text = fh.read()
lines = text.split('\\n')
"""

longsearch = """
'hello' in text
"""

splitsearch = """
for line in text.split('\\n'):
    if 'hello' in line:
        break
"""

presplitsearch = """
for line in lines:
    if 'hello' in line:
        break
"""


benchmark = timeit.Timer(longsearch, prepare)
print "IN on big string takes:", benchmark.timeit(1000), "seconds"

benchmark = timeit.Timer(splitsearch, prepare)
print "IN on splitted string takes:", benchmark.timeit(1000), "seconds"

benchmark = timeit.Timer(presplitsearch, presplit_prepare)
print "IN on pre-splitted string takes:", benchmark.timeit(1000), "seconds"
</snippet></ROW><ROW><id>6963259</id><snippet>IN on big string takes: 4.27126097679 seconds
IN on splitted string takes: 35.9622690678 seconds
IN on pre-splitted string takes: 11.815297842 seconds
</snippet></ROW><ROW><id>6963406</id><snippet>xml.parsers.expat</snippet></ROW><ROW><id>6963406</id><snippet>xml.minidom</snippet></ROW><ROW><id>6963506</id><snippet>raise</snippet></ROW><ROW><id>6963537</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(Sample(1, 2, [3, 4], 4, {5: 5, 5: 5}).__dict__)
1: '{"aliases": 4, "locality": [3, 4], "name": 1, "roles": {"5": 5}, "email": 2}'
</snippet></ROW><ROW><id>6963667</id><snippet>NewDataDialog</snippet></ROW><ROW><id>6963667</id><snippet>self.newsubject</snippet></ROW><ROW><id>6963667</id><snippet>self.newobserver</snippet></ROW><ROW><id>6963667</id><snippet>self.newclinic</snippet></ROW><ROW><id>6963667</id><snippet>"mainpanel.SaveButton"</snippet></ROW><ROW><id>6963667</id><snippet>newsubject</snippet></ROW><ROW><id>6963667</id><snippet>newobserver</snippet></ROW><ROW><id>6963667</id><snippet>newclinic</snippet></ROW><ROW><id>6963667</id><snippet>"mainpanel.SaveButton"</snippet></ROW><ROW><id>6963667</id><snippet>unsubscribe</snippet></ROW><ROW><id>6963667</id><snippet>ShowModal()</snippet></ROW><ROW><id>6963667</id><snippet>def cancelbutton(self, message):

    pub.unsubscribe(self.savebutton, "mainpanel.SaveButton")
    pub.unsubscribe(self.cancelbutton, "mainpanel.CancelButton")
    self.Close()


def savebutton(self, message):

    results = []

    for lbl in self.databoxes:
        results.append(self.box.GetValue())

    pub.sendMessage(self.pubsubmessage, results)
    pub.unsubscribe(self.savebutton, "mainpanel.SaveButton")
    pub.unsubscribe(self.cancelbutton, "mainpanel.CancelButton")
    self.Close()
</snippet></ROW><ROW><id>6963672</id><snippet>import hashlib

teststr = "foo"
filename = "file.txt"

def md5_for_file(f, block_size=2**20):
    md5 = hashlib.md5()
    while True:
        data = f.read(block_size)
        if not data:
            break
        md5.update(data.encode('utf8'))
    return md5.digest()


md5 = hashlib.md5()
md5.update((teststr + "\n").encode('utf8'))
digest = md5.digest()
f = open(filename, 'r')
print(md5_for_file(f) == digest)
</snippet></ROW><ROW><id>6963672</id><snippet>foo
</snippet></ROW><ROW><id>6964467</id><snippet>import sys
from setuptools import setup  # or from distutils.core import setup
import py2exe
</snippet></ROW><ROW><id>6964499</id><snippet>Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(11, y=22)     # instantiate with positional or keyword arguments
&gt;&gt;&gt; p[0] + p[1]             # indexable like the plain tuple (11, 22)
33
&gt;&gt;&gt; x, y = p                # unpack like a regular tuple
&gt;&gt;&gt; x, y
(11, 22)
&gt;&gt;&gt; p.x + p.y               # fields also accessible by name
33
&gt;&gt;&gt; p                       # readable __repr__ with a name=value style
Point(x=11, y=22)
</snippet></ROW><ROW><id>6964499</id><snippet>__slots__</snippet></ROW><ROW><id>6964499</id><snippet>exec</snippet></ROW><ROW><id>6964499</id><snippet>__repr__</snippet></ROW><ROW><id>6964499</id><snippet>_asdict</snippet></ROW><ROW><id>6964499</id><snippet>_replace</snippet></ROW><ROW><id>6964499</id><snippet>__getnewargs__</snippet></ROW><ROW><id>6964584</id><snippet>sys.executable</snippet></ROW><ROW><id>6964584</id><snippet>ssh</snippet></ROW><ROW><id>6964584</id><snippet>import os, sys

from twisted.internet.protocol import ProcessProtocol
from twisted.internet import reactor
from twisted.internet.defer import Deferred, gatherResults

script = """
import time
for x in range(3):
    time.sleep(1)
    print(x)
"""

class SimpleProcess(ProcessProtocol):
    def __init__(self, id, d):
        self.id = id
        self.d = d
    def outReceived(self, out):
        print('Received output: {out} from: {proc}'
              .format(out=repr(out), proc=self.id))
    def processEnded(self, reason):
        self.d.callback(None)

ds = []
for x in range(3):
    d = Deferred()
    reactor.callLater(
        x * 0.5, reactor.spawnProcess, SimpleProcess(x, d),
        sys.executable, [sys.executable, '-u', '-c', script],
        os.environ)
    ds.append(d)

gatherResults(ds).addBoth(lambda ignored: reactor.stop())

reactor.run()
</snippet></ROW><ROW><id>6964675</id><snippet>import random

questions = []
questions.append(("1+1=", "2"))
questions.append(("the cow jumped over the ....", "moon"))

def human_check():
    random_question = random.choice(questions)
    question, answer = random_question
    user_answer = raw_input(question)
    if user_answer != answer:
       print "Sorry, try again."
    else:
       return login()
</snippet></ROW><ROW><id>6964675</id><snippet>random.choice</snippet></ROW><ROW><id>6964760</id><snippet>GHC 7.0.3</snippet></ROW><ROW><id>6964760</id><snippet>gcc 4.4.6</snippet></ROW><ROW><id>6964760</id><snippet>Linux 2.6.29</snippet></ROW><ROW><id>6964760</id><snippet>ghc -O2 -fllvm -fforce-recomp</snippet></ROW><ROW><id>6964760</id><snippet>gcc -O3 -lm</snippet></ROW><ROW><id>6964760</id><snippet>-O3</snippet></ROW><ROW><id>6964760</id><snippet>-O2</snippet></ROW><ROW><id>6964760</id><snippet>factorCount'</snippet></ROW><ROW><id>6964760</id><snippet>Integer</snippet></ROW><ROW><id>6964760</id><snippet>Int</snippet></ROW><ROW><id>6964760</id><snippet>factorCount'</snippet></ROW><ROW><id>6964760</id><snippet>fromIntegral</snippet></ROW><ROW><id>6964760</id><snippet>mod</snippet></ROW><ROW><id>6964760</id><snippet>rem</snippet></ROW><ROW><id>6964760</id><snippet>factorCount'</snippet></ROW><ROW><id>6964760</id><snippet>number</snippet></ROW><ROW><id>6964760</id><snippet>sqrt</snippet></ROW><ROW><id>6964760</id><snippet> $ time ./so
 842161320  

 real    0m7.954s  
 user    0m7.944s  
 sys     0m0.004s  
</snippet></ROW><ROW><id>6964760</id><snippet>-fllvm</snippet></ROW><ROW><id>6964760</id><snippet>8.182 seconds</snippet></ROW><ROW><id>6964760</id><snippet>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)
    where square = sqrt $ fromIntegral number
          isquare = floor square

factorCount' :: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int
factorCount' number sqrt candidate0 count0 = go candidate0 count0
  where
  go candidate count
    | candidate &gt; sqrt = count
    | number `rem` candidate == 0 = go (candidate + 1) (count + 2)
    | otherwise = go (candidate + 1) count

nextTriangle index triangle
    | factorCount triangle &gt; 1000 = triangle
    | otherwise = nextTriangle (index + 1) (triangle + index + 1)

main = print $ nextTriangle 1 1
</snippet></ROW><ROW><id>6964760</id><snippet>Integer</snippet></ROW><ROW><id>6964760</id><snippet>Int</snippet></ROW><ROW><id>6964760</id><snippet>Int</snippet></ROW><ROW><id>6964760</id><snippet>Int64</snippet></ROW><ROW><id>6964760</id><snippet>Word64</snippet></ROW><ROW><id>6964760</id><snippet>long</snippet></ROW><ROW><id>6964760</id><snippet>-O2</snippet></ROW><ROW><id>6964760</id><snippet>rem</snippet></ROW><ROW><id>6964760</id><snippet>mod</snippet></ROW><ROW><id>6964782</id><snippet>from Tkinter import *

root = Tk()

left = Frame(root)
right = Frame(root)

t_start = Text(left, width=20)
t_start.pack(side=LEFT, fill=Y)
s_start = Scrollbar(left)
s_start.pack(side=RIGHT, fill=Y)
s_start.config(command=t_start.yview)
t_start.config(yscrollcommand=s_start.set)

t_end = Text(right, width=20)
t_end.pack(side=LEFT, fill=Y)
s_end = Scrollbar(right)
s_end.pack(side=RIGHT, fill=Y)
s_end.config(command=t_end.yview)
t_end.config(yscrollcommand=s_end.set)

left.pack(side=LEFT, fill=Y)
right.pack(side=RIGHT, fill=Y)

root.geometry("500x200")
root.mainloop()
</snippet></ROW><ROW><id>6964804</id><snippet>app_path = os.path.realpath(os.path.join(
    os.path.dirname(sys.executable), 'test.exe'))
child = subprocess.Popen(app_path)
</snippet></ROW><ROW><id>6964805</id><snippet>for element in doc.iterfind('.//%s'%tag):
    element.getparent().remove(element)
</snippet></ROW><ROW><id>6964883</id><snippet>urls.py</snippet></ROW><ROW><id>6964883</id><snippet>urlpatterns = patterns('',
    url('^tasks/', include('djcelery.urls')),
)
</snippet></ROW><ROW><id>6964883</id><snippet>http://example.com/tasks/{{ task_id }}/status/</snippet></ROW><ROW><id>6965057</id><snippet>from Tkinter import *

root = Tk()

left_outer = Frame(root, bd=1)
left_outer.pack(side=LEFT, fill=Y, pady=5, padx=5)
right_outer = Frame(root, bd=1)
right_outer.pack(side=LEFT, fill=Y, pady=5, padx=5)

left = Frame(left_outer, bd=2, relief=SUNKEN)
right = Frame(right_outer, bd=2, relief=SUNKEN)
left.pack(fill=Y)
right.pack(fill=Y)

t_start = Text(left, width=20, height=200)
t_start.pack(side=LEFT, fill=Y)
s_start = Scrollbar(left)
s_start.pack(side=RIGHT, fill=Y)
s_start.config(command=t_start.yview)
t_start.config(yscrollcommand=s_start.set)

t_end = Text(right, width=20, height=200)
t_end.pack(side=LEFT, fill=Y)
s_end = Scrollbar(right)
s_end.pack(side=RIGHT, fill=Y)
s_end.config(command=t_end.yview)
t_end.config(yscrollcommand=s_end.set)

root.geometry("400x200")
root.mainloop()
</snippet></ROW><ROW><id>6965079</id><snippet>start + max_width</snippet></ROW><ROW><id>6965079</id><snippet>start</snippet></ROW><ROW><id>6965082</id><snippet>f(n) = 50 + 36*sin(72*pi*n/1024)</snippet></ROW><ROW><id>6965082</id><snippet>50 + g(n)</snippet></ROW><ROW><id>6965082</id><snippet>g(n) = 36*sin(72*pi*n/1024)</snippet></ROW><ROW><id>6965082</id><snippet>if 0 &lt;= n &lt; 256, f(n) = 50 + g(n)
if 256 &lt;= n &lt; 512, f(n) = 50 + g(511-n)
if 512 &lt;= n &lt; 768, f(n) = 50 - g(n-512)
if 768 &lt;= n &lt; 1024, f(n) = 50 - g(1023-n)
</snippet></ROW><ROW><id>6965082</id><snippet>#import itertools

table_="""
    0       50
    1       50
    ...
    1021    49
    1022    50
    1023    50""".split()

# Convert values to int. Throw away the indices - will recover them with enumerate()
table = [int(x) for x in table_[1::2]]

compressed_table = []
istart = 0
for i,v in enumerate(table):
    if v != table[i-1]:
        iend = i-1
        compressed_table.append((istart,iend,table[i-1]))
        istart = i
    else:
        continue # skip identical values
# Slightly ugly: append the last value, when the iterator was exhausted
compressed_table.append((istart,i,table[i]))
</snippet></ROW><ROW><id>6965094</id><snippet>def dec1(f):
    def wrapped():
        print 'dec1'
        return f()
    return wrapped

def dec2(f):
    def wrapped():
        print 'dec2'
        return f()
    return wrapped

@dec2
@dec1
def spam(): print 'spam'

&gt;&gt;&gt; spam()
dec2
dec1
spam
</snippet></ROW><ROW><id>6965552</id><snippet>plpy.execute</snippet></ROW><ROW><id>6965552</id><snippet>RETURNING</snippet></ROW><ROW><id>6965552</id><snippet>rv[0]["myfile_key"]</snippet></ROW><ROW><id>6965552</id><snippet>OUT</snippet></ROW><ROW><id>6965552</id><snippet>OUT</snippet></ROW><ROW><id>6965552</id><snippet>return</snippet></ROW><ROW><id>6965605</id><snippet>import re

myString = 'This is my tweet check it out &lt;a href="http://tinyurl.com/blah"&gt;http://tinyurl.com/blah&lt;/a&gt;'

r = re.compile(r'&lt;a href="(http://[^ ]+)"&gt;(http://[^ ]+)&lt;/a&gt;')
print r.sub(r'\1', myString)
</snippet></ROW><ROW><id>6965730</id><snippet>top_stories = list(top_stories)
</snippet></ROW><ROW><id>6965777</id><snippet>task 
    ...
    versions = [       # MongoDB array 
        {   version_id 
            worker
            status
            date(if submitted)
            review_notes(if rejected)
            reply_on(if accepted/rejected)
        },
        { version_id : ... }, 
        ... 
</snippet></ROW><ROW><id>6965777</id><snippet>tasks.update( { # a query to locate a particular task}, 
              { '$push' : { 'versions', { # new version } } } )
</snippet></ROW><ROW><id>6966225</id><snippet>data = b'''iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAIBJRE
          FUOMvN08ENgCAMheG/TGniEo7iEiZuqTeiUkoLHORK++Ul8ODPZ92XS2ZiADITmwI+sWHwi
          w2BGtYN1jCAZF1GMYDkGfJix3ZK8g57sJywteTFClBbjmAq+ESiGIBEX9nCqgl7sfyxIykt
          7NUUD9rCiupZqAdTu6yhXgzgBtNFSXQ1+FPTAAAAAElFTkSuQmCC'''

import base64
from PIL import Image
from io import BytesIO

im = Image.open(BytesIO(base64.b64decode(data)))
im.save('accept.jpg', 'JPEG')
</snippet></ROW><ROW><id>6966225</id><snippet>b'''</snippet></ROW><ROW><id>6966225</id><snippet>'''</snippet></ROW><ROW><id>6966225</id><snippet>from io import BytesIO</snippet></ROW><ROW><id>6966225</id><snippet>from StringIO import StringIO</snippet></ROW><ROW><id>6966228</id><snippet>prompt</snippet></ROW><ROW><id>6966228</id><snippet>size</snippet></ROW><ROW><id>6966228</id><snippet>raw_input()</snippet></ROW><ROW><id>6966228</id><snippet>readline()</snippet></ROW><ROW><id>6966468</id><snippet>$feed</snippet></ROW><ROW><id>6966942</id><snippet>__new__</snippet></ROW><ROW><id>6966942</id><snippet>__call__</snippet></ROW><ROW><id>6966942</id><snippet>__new__</snippet></ROW><ROW><id>6966942</id><snippet>__new__</snippet></ROW><ROW><id>6966942</id><snippet>__new__</snippet></ROW><ROW><id>6966970</id><snippet>{% include %}</snippet></ROW><ROW><id>6967185</id><snippet># load dirname() function from os.path module
&gt;&gt;&gt; from os.path import dirname

#the os.path.basename() was not imported
&gt;&gt;&gt; basename('/foo/bar.txt')
NameError: name 'basename' is not defined

# however, basename() is already available anyway:
dirname.__globals__['basename']('/foo/bar.txt')
</snippet></ROW><ROW><id>6967242</id><snippet>from django.db.models import Q
Advertisement.objects.filter( Q(name = 'Paris') | Q(name = 'New York') )
</snippet></ROW><ROW><id>6967491</id><snippet>&gt;&gt;&gt; a =numpy.array([[1,2],[3,4],[5,6]])
&gt;&gt;&gt; for (x,y), value in numpy.ndenumerate(a):
...  print x,y
... 
0 0
0 1
1 0
1 1
2 0
2 1
</snippet></ROW><ROW><id>6967586</id><snippet>from functools import partial
alias = partial(method, 'static')
</snippet></ROW><ROW><id>6967586</id><snippet>alias = lambda *args, **kwargs: method('static', *args, **kwargs)
</snippet></ROW><ROW><id>6967586</id><snippet>lambda</snippet></ROW><ROW><id>6967931</id><snippet>~/bin</snippet></ROW><ROW><id>6967931</id><snippet>export PATH=$PATH:$HOME/bin</snippet></ROW><ROW><id>6967931</id><snippet>export PATH=$HOME/bin:$PATH</snippet></ROW><ROW><id>6967931</id><snippet>~/bin</snippet></ROW><ROW><id>6967931</id><snippet>$PATH</snippet></ROW><ROW><id>6967931</id><snippet>chmod+x</snippet></ROW><ROW><id>6967931</id><snippet>~/bin</snippet></ROW><ROW><id>6967931</id><snippet>~/bin</snippet></ROW><ROW><id>6967931</id><snippet>CWD</snippet></ROW><ROW><id>6967931</id><snippet>~/bin</snippet></ROW><ROW><id>6967960</id><snippet>del Foo.bar.im_func.xyzzy
</snippet></ROW><ROW><id>6967960</id><snippet>im_func</snippet></ROW><ROW><id>6967960</id><snippet>Foo.bar</snippet></ROW><ROW><id>6967960</id><snippet>instancemethod</snippet></ROW><ROW><id>6967960</id><snippet>xyzzy</snippet></ROW><ROW><id>6967960</id><snippet>Foo.bar</snippet></ROW><ROW><id>6967960</id><snippet>getattr</snippet></ROW><ROW><id>6967960</id><snippet>delattr</snippet></ROW><ROW><id>6967960</id><snippet>getattr</snippet></ROW><ROW><id>6967960</id><snippet>__getattribute__</snippet></ROW><ROW><id>6967960</id><snippet>__getattr__</snippet></ROW><ROW><id>6967960</id><snippet>AttributeError</snippet></ROW><ROW><id>6967960</id><snippet>hasattr</snippet></ROW><ROW><id>6967960</id><snippet>def hasattr(obj, attr):
    try:
        getattr(obj, attr)
    except AttributeError:
        return False
    return True
</snippet></ROW><ROW><id>6967960</id><snippet>delattr</snippet></ROW><ROW><id>6968337</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; data = ["&lt;tr&gt;&lt;td&gt;test&lt;/td&gt;&lt;td&gt;help&lt;/td&gt;&lt;/tr&gt;", "&lt;tr&gt;&lt;td&gt;data1&lt;/td&gt;&lt;td&gt;data2&lt;/td&gt;&lt;/tr&gt;"]
&gt;&gt;&gt; [lxml.html.fromstring(tr).xpath(".//text()") for tr in data]
[['test', 'help'], ['data1', 'data2']]
</snippet></ROW><ROW><id>6968337</id><snippet>import urllib
import lxml.html

data = urllib.urlopen('http://www.sec.gov/Archives/edgar/data/8177/000114036111018563/form10k.htm').read()
tree = lxml.html.fromstring(data)

tables = []
for tbl in tree.iterfind('.//table'):
    tele = []
    tables.append(tele)
    for tr in tbl.iterfind('.//tr'):
        text = [e.strip() for e in tr.xpath('.//text()') if len(e.strip()) &gt; 0]
        tele.append(text)

print tables
</snippet></ROW><ROW><id>6968451</id><snippet>=</snippet></ROW><ROW><id>6968451</id><snippet>'XY' -&gt; ('X', 'Y')
['X', 'Y'] -&gt; ('X', 'Y')
</snippet></ROW><ROW><id>6968451</id><snippet>'X', 'Y' -&gt; ('X', 'Y')
a, b -&gt; (a, b)
</snippet></ROW><ROW><id>6968451</id><snippet>(a,b), c = "XY", "Z"                 # a = 'X', b = 'Y', c = 'Z'
</snippet></ROW><ROW><id>6968451</id><snippet>"XY"</snippet></ROW><ROW><id>6968451</id><snippet>('X', 'Y')</snippet></ROW><ROW><id>6968451</id><snippet>((a, b), c) = (('X', 'Y'), 'Z')
</snippet></ROW><ROW><id>6968451</id><snippet>(a,b), c = "XYZ"
</snippet></ROW><ROW><id>6968451</id><snippet>((a, b), c) = ('X', 'Y', 'Z')
</snippet></ROW><ROW><id>6968451</id><snippet>(a,b), c, = [1,2],'this'             # a = '1', b = '2', c = 'this'
</snippet></ROW><ROW><id>6968451</id><snippet>((a, b), c) = ((1, 2), ('t', 'h', 'i', 's'))
</snippet></ROW><ROW><id>6968451</id><snippet>'this'</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>((a, b), c) = ((1, 2), 'this')
</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>(a,b), (c,) = [1,2],'this'           # ERROR -- too many values to unpack
</snippet></ROW><ROW><id>6968451</id><snippet>((a, b), (c,)) = ((1, 2), ('t', 'h', 'i', 's'))
</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>(c,)</snippet></ROW><ROW><id>6968451</id><snippet>*</snippet></ROW><ROW><id>6968451</id><snippet>*</snippet></ROW><ROW><id>6968451</id><snippet>a, *b, c = "X...Y"                   # a = 'X', b = ['.','.','.'], c = 'Y'
</snippet></ROW><ROW><id>6968451</id><snippet>(a, *b, c) = ('X', '.', '.', '.', 'Y')
</snippet></ROW><ROW><id>6968451</id><snippet>'X'</snippet></ROW><ROW><id>6968451</id><snippet>a</snippet></ROW><ROW><id>6968451</id><snippet>'Y'</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>b</snippet></ROW><ROW><id>6968451</id><snippet>(*a, b)</snippet></ROW><ROW><id>6968451</id><snippet>(a, *b)</snippet></ROW><ROW><id>6968451</id><snippet>*</snippet></ROW><ROW><id>6968451</id><snippet>(a, *b, *c, d)</snippet></ROW><ROW><id>6968451</id><snippet>b</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>*a = 1                               # ERROR -- target must be in a list or tuple
</snippet></ROW><ROW><id>6968451</id><snippet>*a</snippet></ROW><ROW><id>6968451</id><snippet>*a, = (1,2)                          # a = [1,2]
</snippet></ROW><ROW><id>6968451</id><snippet>(*a,) = (1, 2)
</snippet></ROW><ROW><id>6968451</id><snippet>*a</snippet></ROW><ROW><id>6968451</id><snippet>*a</snippet></ROW><ROW><id>6968451</id><snippet>(1, 2)</snippet></ROW><ROW><id>6968451</id><snippet>*a, = 1                              # ERROR -- 'int' object is not iterable
</snippet></ROW><ROW><id>6968451</id><snippet>(*a,) = 1
</snippet></ROW><ROW><id>6968451</id><snippet>*a</snippet></ROW><ROW><id>6968451</id><snippet>*a, = [1]                            # a = [1]
</snippet></ROW><ROW><id>6968451</id><snippet>(*a,) = (1,)
</snippet></ROW><ROW><id>6968451</id><snippet>(1)</snippet></ROW><ROW><id>6968451</id><snippet>1</snippet></ROW><ROW><id>6968451</id><snippet>*a, = (1)                            # ERROR -- 'int' object is not 
</snippet></ROW><ROW><id>6968451</id><snippet>(a,b), *c = 'XY', 2, 3               # a = 'X', b = 'Y', c = [2,3]
</snippet></ROW><ROW><id>6968451</id><snippet>((a, b), *c) = (('X', 'Y'), 2, 3)
</snippet></ROW><ROW><id>6968451</id><snippet>2</snippet></ROW><ROW><id>6968451</id><snippet>3</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>(a,b),c = 1,2,3                      # ERROR -- too many values to unpack
*(a,b), c = 1,2,3                    # a = 1, b = 2, c = 3
</snippet></ROW><ROW><id>6968451</id><snippet>(*(a, b), c) = (1, 2, 3)
</snippet></ROW><ROW><id>6968451</id><snippet>3</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>*</snippet></ROW><ROW><id>6968451</id><snippet>(a, b)</snippet></ROW><ROW><id>6968451</id><snippet>(a, b) = (1, 2)</snippet></ROW><ROW><id>6968451</id><snippet>*(a, *b), c = 'this'                 # a = 't', b = ['h', 'i'], c = 's'
</snippet></ROW><ROW><id>6968451</id><snippet>(*(a, *b), c) = ('t', 'h', 'i', 's')
</snippet></ROW><ROW><id>6968451</id><snippet>'s'</snippet></ROW><ROW><id>6968451</id><snippet>c</snippet></ROW><ROW><id>6968451</id><snippet>('t', 'h', 'i')</snippet></ROW><ROW><id>6968451</id><snippet>(a, *b)</snippet></ROW><ROW><id>6968451</id><snippet>'t'</snippet></ROW><ROW><id>6968451</id><snippet>a</snippet></ROW><ROW><id>6968451</id><snippet>('h', 'i')</snippet></ROW><ROW><id>6968482</id><snippet>lambda</snippet></ROW><ROW><id>6968482</id><snippet>\her</snippet></ROW><ROW><id>6968482</id><snippet>\\her</snippet></ROW><ROW><id>6968482</id><snippet>$\\lambda$</snippet></ROW><ROW><id>6968541</id><snippet>shell=True</snippet></ROW><ROW><id>6968541</id><snippet>import subprocess, shlex
command = 'eog &lt;filename'&gt;
eog = subprocess.Popen(shlex(command))
..code..
eog.kill()
</snippet></ROW><ROW><id>6968665</id><snippet>import urllib2
import lxml.html

headers = {
    'User-Agent':'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0.1) Gecko/2010010' \
    '1 Firefox/4.0.1',
    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language':'en-us,en;q=0.5',
    'Accept-Charset':'ISO-8859-1,utf-8;q=0.7,*;q=0.7'}

req = urllib2.Request('http://www.amaderforum.com/login.php?do=lostpw', None,
                      headers)
f = urllib2.urlopen(req)
page = f.read()

tree = lxml.html.fromstring(page)
imgurl = "http://www.amaderforum.com/" + \
      tree.xpath(".//img[@id='imagereg']")[0].get('src')

req = urllib2.Request(imgurl, None, headers)
f = urllib2.urlopen(req)
img = f.read()

open('out.jpg', 'wb').write(img)
</snippet></ROW><ROW><id>6968814</id><snippet>def doppelstring(s):
    letter_groups = ((val, list(group)) for val, group in itertools.groupby(s))
    max_vector = ((val, min(len(group), 2)) for val, group in letter_groups)
    vector_components = ([dim * (l + 1) for l in range(maxlen)] for dim, maxlen in max_vector)
    return [''.join(letters) for letters in itertools.product(*vector_components)]
</snippet></ROW><ROW><id>6968814</id><snippet>def doppelstring(s):
    max_vs = (''.join(itertools.islice(g, 2)) for k, g in itertools.groupby(s))
    components = ([s[:l + 1] for l in range(len(s))] for s in max_vs)
    return [''.join(letters) for letters in itertools.product(*components)]
</snippet></ROW><ROW><id>6968876</id><snippet>class Observer(threading.Thread):
    def __init__(self, lock):
        threading.Thread.__init__(self)
        self.dict_lock = lockthreading.RLock()
        self.dict = {}
        self.timer = Timer(1, self.delete_obsolete);
        self.timer.start()

    def run(self):
        while True:
        ...
         with self._dict_lock:
             # read a stream
             self.dict.append(&lt;new_element&gt;)
         ...


    def delete_obsolete(self):
         ...
         with self._dict_lock:
             del self.dict[...]
         ...
</snippet></ROW><ROW><id>6968876</id><snippet>class GraphConsole(window.Window):
    def __init__(self, *args, **kwargs):
        window.Window.__init__(self, *args, **kwargs)

    def init(self, observer):
        self.observer = observer

    def main_loop(self):
        while not self.has_exit:
            ...
            self.draw()

    def draw(self):
        with self.observer.dict_lock:
            for k, v in dict_copy.iteritems():
           ...
</snippet></ROW><ROW><id>6968986</id><snippet>\</snippet></ROW><ROW><id>6968986</id><snippet>    x = y+    # Used to be y+1, the 1 got dropped
    f(x)
</snippet></ROW><ROW><id>6969001</id><snippet>songs = sorted(songs, key=lambda s: s.replace('$\lambda$','lambda'))
</snippet></ROW><ROW><id>6969001</id><snippet>songs.sort(key=lambda s: s.replace('$\lambda$','lambda'))
</snippet></ROW><ROW><id>6969141</id><snippet>import tkFileDialog
f = tkFileDialog.askopenfilename()
# Go on from there; f is a handle to the file that the user picked
</snippet></ROW><ROW><id>6969405</id><snippet>pip install -e git://github.com/scipy/scipy@effa6f68f8ada57b7986#egg=scipy-dev
</snippet></ROW><ROW><id>6969491</id><snippet>struct</snippet></ROW><ROW><id>6969543</id><snippet>self.entries = [gtk.Entry(max=0) for objects in object_list]
for entry in self.entries:
  self.vbox_entry.add(entry)
</snippet></ROW><ROW><id>6969622</id><snippet>for sublist in mylist:
    if sublist is None:
        #what to do with None
        continue
    elif not sublist and isinstance(sublist, list):
        #what to do if it's an empty list
        continue
    elif not isinstance(sublist, list):
        #what to do if it's not a list
        continue
    #what to do if it's a list and not empty
</snippet></ROW><ROW><id>6969622</id><snippet>else</snippet></ROW><ROW><id>6969622</id><snippet>None</snippet></ROW><ROW><id>6969622</id><snippet>if not sublist: continue</snippet></ROW><ROW><id>6969622</id><snippet>None</snippet></ROW><ROW><id>6969622</id><snippet>mylist = [sublist for sublist in mylist if sublist]
</snippet></ROW><ROW><id>6969622</id><snippet>update</snippet></ROW><ROW><id>6969622</id><snippet>mylist = oldlist[:]
</snippet></ROW><ROW><id>6969622</id><snippet>mylist = [sublist for sublist in oldlist if sublist]
</snippet></ROW><ROW><id>6969622</id><snippet>a</snippet></ROW><ROW><id>6969622</id><snippet>b</snippet></ROW><ROW><id>6969622</id><snippet>None</snippet></ROW><ROW><id>6969622</id><snippet>mylist = [sublist for sublist in oldlist if sublist[1]]
</snippet></ROW><ROW><id>6969734</id><snippet>range</snippet></ROW><ROW><id>6969734</id><snippet>fac</snippet></ROW><ROW><id>6969734</id><snippet>summ=0</snippet></ROW><ROW><id>6969759</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns

urlpatters = patterns ......#do your patterns here

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>6969759</id><snippet>PROJECT_ROOT = os.path.dirname(__file__)

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static/')

STATIC_URL = '/static/'

STATICFILES_DIR = (
    "portfolio/static/",
)

STATICFILES_FINDERS = ( 
'django.contrib.staticfiles.finders.FileSystemFinder',
'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.static',
     #... other context processors
)

INSTALLED_APPS = (
    ....#other apps
    'django.contrib.staticfiles',
)
</snippet></ROW><ROW><id>6969759</id><snippet>./manage.py collectstatic.
</snippet></ROW><ROW><id>6970135</id><snippet>cnt = 0

while cnt &lt; 10:
    print str(cnt) + " + 1 = " + str(cnt + 1)
    cnt = cnt + 1
</snippet></ROW><ROW><id>6970135</id><snippet>for cnt in range(10):
    print str(cnt) + " + 1 = " + str(cnt + 1)
</snippet></ROW><ROW><id>6970135</id><snippet>for cnt in range(10):
    print "%d + 1 = %d".format(cnt, cnt + 1)
</snippet></ROW><ROW><id>6970380</id><snippet>None</snippet></ROW><ROW><id>6970380</id><snippet>&gt;&gt;&gt; hello='hello %(first_name)s' % None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: format requires a mapping
</snippet></ROW><ROW><id>6970380</id><snippet>hello = 'hello %(first_name)s %s' % auth.user if auth.user else ''
return dict(listings=listings, hello=hello)
</snippet></ROW><ROW><id>6970381</id><snippet>llist</snippet></ROW><ROW><id>6970381</id><snippet>list</snippet></ROW><ROW><id>6970381</id><snippet>llist</snippet></ROW><ROW><id>6970381</id><snippet>self._llist.append(self._list)
</snippet></ROW><ROW><id>6970381</id><snippet>self._llist.append(list(self._list))
</snippet></ROW><ROW><id>6970381</id><snippet>self._list = ['_ '] * self._size
self._llist = [list(self._list) for i in range(self._size)]
</snippet></ROW><ROW><id>6970581</id><snippet>COLOR</snippet></ROW><ROW><id>6970581</id><snippet>from itertools import product

def value_from_key(sheet, key):
    for row_index, col_index in product(xrange(sheet.nrows), xrange(sheet.ncols)):
        if sheet.cell(row_index, col_index).value == key:
            return sheet.cell(row_index+1, col_index).value

value = value_from_key(sheet, 'COLOR')
</snippet></ROW><ROW><id>6970581</id><snippet>xrange(0, sheet.nrows, 2)</snippet></ROW><ROW><id>6970581</id><snippet>xrange(1, sheet.nrows, 2)</snippet></ROW><ROW><id>6970634</id><snippet>figsize</snippet></ROW><ROW><id>6970634</id><snippet>plt.figure</snippet></ROW><ROW><id>6970634</id><snippet>plt.subplots</snippet></ROW><ROW><id>6970634</id><snippet>annotate</snippet></ROW><ROW><id>6970634</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# Generate the data
data = (np.random.random((20, 2, 2, 1001)) - 0.5).cumsum(axis=-1)

# Set up the figure (the figsize is what's going to control your aspect ratio)
fig, axes = plt.subplots(nrows=20, ncols=2, sharex=True, figsize=(6, 10))
fig.subplots_adjust(wspace=0.1, hspace=0, bottom=0.05)

# Turn off tick labels everywhere
for ax in axes.flat:
    for axis in [ax.xaxis, ax.yaxis]:
        axis.set_ticklabels([])

# Plot the data
color = {(0,0):'red', (0,1):'green', (1,0):'blue', (1,1):'magenta'}
for (i,j), ax in np.ndenumerate(axes):
    for k in range(2):
        ax.plot(data[i,j,k,:], color=color[(j,k)])

# Add stacked titles (and text legends)
titles = [['TITLE:', 'Red: Data X', 'Green: Data Y'],
          ['TITLE:', 'Blue: Data W', 'Magenta: Data Z']]
for i, title in enumerate(titles):
    for text, ypos in zip(title, [35, 20, 5]):
        axes[0,i].annotate(text, xy=(0.05, 1.0), xytext=(0, ypos), va='bottom',
                           xycoords='axes fraction', textcoords='offset points')

# Add arrows on "super-Y" axes
xpos, length = -0.1, 5
axes[12,0].annotate('', xy=(xpos, 0), xytext=(xpos, length), 
        xycoords='axes fraction', textcoords='axes fraction',
        arrowprops=dict(arrowstyle='&lt;|-'))
axes[12,0].annotate('{0} subplots'.format(length), xy=(xpos, length/2.0), 
        xycoords='axes fraction', rotation=90, va='center', ha='right')

# Add arrows on "super-X" axes
ypos, length = -0.7, 1000
axes[-1,0].annotate('', xy=(0, ypos), xytext=(length, ypos),
        xycoords=('data', 'axes fraction'), textcoords=('data', 'axes fraction'),
        arrowprops=dict(arrowstyle='&lt;|-'))
axes[-1,0].annotate('{0} data units'.format(length), xy=(length/2.0, ypos), 
        xytext=(0, 5), xycoords=('data', 'axes fraction'), 
        textcoords='offset points', ha='center', va='bottom')

plt.show()
</snippet></ROW><ROW><id>6970635</id><snippet>import threading
import subprocess
import time

class IntervalRunner(threading.Thread):
    def __init__(self, seconds):
        self.seconds = seconds
        threading.Thread.__init__(self)

    def run(self):
        while True:
            p = subprocess.Popen('ls -la'.split(), shell=False,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)

            stdout, stderr = p.communicate()
            print stdout
            time.sleep(self.seconds)

runner = IntervalRunner(10)
runner.start()
runner.join()
</snippet></ROW><ROW><id>6970684</id><snippet>def insert(outer, inner, pos):
  outer[pos:pos] = inner
</snippet></ROW><ROW><id>6970831</id><snippet>type</snippet></ROW><ROW><id>6970831</id><snippet>class EnumMC(type):
  def __contains__(self, val):
    return val in self.__dict__

def enum(*sequential, **named):
  enums = dict(zip(sequential, range(len(sequential))), **named)
  return EnumMC('Enum', (), enums)

MyEnum = enum('FOO', 'BAR', 'JIMMY')
def func(my_enum_value):  # expects one of the MyEnum values
    if not my_enum_value in MyEnum:
        raise ValueError()

func('FOO')
func('QUUX')
</snippet></ROW><ROW><id>6971414</id><snippet>https://mail.google.com/mail/feed/atom
</snippet></ROW><ROW><id>6971414</id><snippet>https://www.google.com/m8/feeds/
</snippet></ROW><ROW><id>6971414</id><snippet>https://www.google.com/m8/feeds/contacts/default/full?max-results=1
</snippet></ROW><ROW><id>6971414</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearch/1.1/" xmlns:gContact="http://schemas.google.com/contact/2008" xmlns:batch="http://schemas.google.com/gdata/batch" xmlns:gd="http://schemas.google.com/g/2005" gd:etag="W/"CEcMRX0_eCp7ImA9WhdRF00.""&gt;
&lt;id&gt;joebloggs@gmail.com&lt;/id&gt;
...
&lt;author&gt;
  &lt;name&gt;Joe Bloggs&lt;/name&gt;
  &lt;email&gt;joebloggs@gmail.com&lt;/email&gt;
&lt;/author&gt;
...
&lt;/feed&gt;
</snippet></ROW><ROW><id>6971724</id><snippet>def diff256(a, b):
  return min((a - b) % 256, (b - a) % 256)
</snippet></ROW><ROW><id>6972116</id><snippet>2 ** len(chunk)</snippet></ROW><ROW><id>6972116</id><snippet>def pmv(nums):
    chunklen=6
    res = dict()
    res[0] = ()
    for i in xrange(0, len(nums), chunklen):
        part = plus_minus_variations(nums[i:i+chunklen])
        resnew = dict()
        for (i,j) in itertools.product(res, part):
            resnew[i + j] = tuple(list(res[i]) + list(part[j]))
        res = resnew
    return res
</snippet></ROW><ROW><id>6972249</id><snippet>file.read()</snippet></ROW><ROW><id>6972249</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>6972249</id><snippet>sys.stdout</snippet></ROW><ROW><id>6972533</id><snippet>a&amp;b&amp;c &gt;= 2
</snippet></ROW><ROW><id>6972533</id><snippet>a&gt;=2 and b&gt;=2 and c&gt;=2.
</snippet></ROW><ROW><id>6972791</id><snippet>to_dict</snippet></ROW><ROW><id>6972791</id><snippet>ext.db</snippet></ROW><ROW><id>6972791</id><snippet>class MyModel(db.Model):
    def to_dict(self):
        return db.to_dict(self, {'id':self.key().id()})
</snippet></ROW><ROW><id>6972827</id><snippet>result</snippet></ROW><ROW><id>6972827</id><snippet>k</snippet></ROW><ROW><id>6972827</id><snippet>a[i]</snippet></ROW><ROW><id>6972827</id><snippet>k</snippet></ROW><ROW><id>6972827</id><snippet>a[i]</snippet></ROW><ROW><id>6972827</id><snippet>last</snippet></ROW><ROW><id>6972827</id><snippet>a[i]</snippet></ROW><ROW><id>6972827</id><snippet>last</snippet></ROW><ROW><id>6972827</id><snippet>result = result+str(k)+last</snippet></ROW><ROW><id>6972827</id><snippet>def seq(a):
    a = str(a)
    k,last,result = 1,a[0],''
    for i in range(1,len(a)):
        if last==a[i]:k+=1
        else:
            result = result+str(k)+last
            k=1
        last = a[i]
    result = result+str(k)+last
    return result
</snippet></ROW><ROW><id>6973808</id><snippet>__dict__</snippet></ROW><ROW><id>6973808</id><snippet>__dict__</snippet></ROW><ROW><id>6973808</id><snippet>dict</snippet></ROW><ROW><id>6973808</id><snippet>__dict__</snippet></ROW><ROW><id>6973808</id><snippet>&gt;&gt;&gt; class Foo(dict):
...     def __init__(self, *args, **kwargs):
...         super(Foo, self).__init__(*args, **kwargs)
...         self.banana = 'banana'
...         self['banana'] = 'not really a banana'
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.__dict__
{'banana': 'banana'}
&gt;&gt;&gt; f.banana
'banana'
&gt;&gt;&gt; f['banana']
'not really a banana'
</snippet></ROW><ROW><id>6973880</id><snippet>'%/\*\*([\w\n()\[\].*\'"#|,@{}_&lt;&gt;=:/ -]+?)\*/%'
'%(?:\* ([\w\d(),.\'"\:#|/ -]+)|(?&lt;= @)(\w+)(?: (.+))?)%'
</snippet></ROW><ROW><id>6973887</id><snippet>flask-login</snippet></ROW><ROW><id>6973887</id><snippet>flask</snippet></ROW><ROW><id>6974042</id><snippet>appcfg.py create_bulkloader_config --filename=bulkloader.yaml .
</snippet></ROW><ROW><id>6974042</id><snippet>appcfg.py create_bulkloader_config --filename=bulkloader.yaml
path/to/root/gae/app/
</snippet></ROW><ROW><id>6974267</id><snippet>lambda val: self._my_func(self.a, self.b, index, val)</snippet></ROW><ROW><id>6974267</id><snippet>class Foo():
    def __init__(self, data1, data2):
        self.data1 = data1
        self.data2 = data2
        self.key = 0      

    def getData(self):
        return Foo.Wrapper(self, self.data2)

    def getKey(self):
        return self.key

    class Wrapper():
        def __init__(self, outer, data):
            self.outer = outer
            self.data = data

        def __getitem__(self, key):
            self.outer.key = key
            return self.data[key]

if __name__ == '__main__':
    data1 = [10, 20, 30, 40]
    data2 = [100, 200, 300, 400]
    foo = Foo(data1, data2)
    wrapped_data2 = foo.getData()
    print(wrapped_data2[2:4])
    print(data1[foo.getKey()])
</snippet></ROW><ROW><id>6974299</id><snippet>itertools.product</snippet></ROW><ROW><id>6974299</id><snippet>&gt;&gt;&gt; bigdata = numpy.arange(256 * 256 * 256 * 3 * 3).reshape(256, 256, 256, 3, 3)
&gt;&gt;&gt; %timeit numpy.linalg.eigvals(bigdata[100, 100, 100, :, :])
10000 loops, best of 3: 52.6 us per loop
</snippet></ROW><ROW><id>6974299</id><snippet>&gt;&gt;&gt; .000052 * 256 * 256 * 256 / 60
14.540253866666665
</snippet></ROW><ROW><id>6974299</id><snippet>&gt;&gt;&gt; def just_loops(N):
...     for i in xrange(N):
...         for j in xrange(N):
...             for k in xrange(N):
...                 pass
... 
&gt;&gt;&gt; %timeit just_loops(256)
1 loops, best of 3: 350 ms per loop
</snippet></ROW><ROW><id>6974299</id><snippet>&gt;&gt;&gt; def slice_loops(N, data):
...     for i in xrange(N):
...         for j in xrange(N):
...             for k in xrange(N):
...                 data[i, j, k, :, :]
... 
&gt;&gt;&gt; %timeit slice_loops(256, bigdata)
1 loops, best of 3: 33.5 s per loop
</snippet></ROW><ROW><id>6974646</id><snippet>SELECT * FROM table WHERE id IN ("1","2","3") 
</snippet></ROW><ROW><id>6974646</id><snippet>Table.objects.filter(id__in=["1", "2", "3"])
</snippet></ROW><ROW><id>6974799</id><snippet>vocab</snippet></ROW><ROW><id>6974799</id><snippet>str</snippet></ROW><ROW><id>6974799</id><snippet>unicode</snippet></ROW><ROW><id>6974799</id><snippet>vocab</snippet></ROW><ROW><id>6974799</id><snippet>u'債務の天井'</snippet></ROW><ROW><id>6974799</id><snippet>utf-8</snippet></ROW><ROW><id>6974799</id><snippet>In [42]: v=u'債務の天井'
In [43]: vocab=v.encode('utf-8')   # val['text']
Out[43]: '\xe5\x82\xb5\xe5\x8b\x99\xe3\x81\xae\xe5\xa4\xa9\xe4\xba\x95'
</snippet></ROW><ROW><id>6974799</id><snippet>str</snippet></ROW><ROW><id>6974799</id><snippet>\xe5</snippet></ROW><ROW><id>6974799</id><snippet>\x82</snippet></ROW><ROW><id>6974799</id><snippet>\xb5</snippet></ROW><ROW><id>6974799</id><snippet>In [45]: for v in u'債務の天井':
   ....:     print(v)    
債
務
の
天
井
</snippet></ROW><ROW><id>6974799</id><snippet>utf-8</snippet></ROW><ROW><id>6974799</id><snippet>In [49]: u'債'.encode('utf-8')
Out[49]: '\xe5\x82\xb5'
</snippet></ROW><ROW><id>6974799</id><snippet>print \xe5</snippet></ROW><ROW><id>6974799</id><snippet>str</snippet></ROW><ROW><id>6974799</id><snippet>unicode</snippet></ROW><ROW><id>6974799</id><snippet>str</snippet></ROW><ROW><id>6974799</id><snippet>utf-8</snippet></ROW><ROW><id>6974799</id><snippet>vocab=val['text'].decode('utf-8')
</snippet></ROW><ROW><id>6974799</id><snippet>val['text']</snippet></ROW><ROW><id>6974799</id><snippet>print(repr(vocab))
</snippet></ROW><ROW><id>6974845</id><snippet>_ResolveDependencies</snippet></ROW><ROW><id>6974845</id><snippet>_ResolveDependencies</snippet></ROW><ROW><id>6974845</id><snippet>Source.requires</snippet></ROW><ROW><id>6974845</id><snippet>_ResolveDependencies</snippet></ROW><ROW><id>6974845</id><snippet>_path</snippet></ROW><ROW><id>6974845</id><snippet>traversal_path</snippet></ROW><ROW><id>6974845</id><snippet>traversal_path</snippet></ROW><ROW><id>6974845</id><snippet>traversal_path</snippet></ROW><ROW><id>6974845</id><snippet>_ResolveDependencies</snippet></ROW><ROW><id>6974845</id><snippet>_ResolveDependencies</snippet></ROW><ROW><id>6974845</id><snippet>traversal_path</snippet></ROW><ROW><id>6974845</id><snippet>_ResolveDependencies</snippet></ROW><ROW><id>6974845</id><snippet>a</snippet></ROW><ROW><id>6974845</id><snippet>ns.name</snippet></ROW><ROW><id>6974911</id><snippet>import matplotlib.pyplot as pl
xticks=['a','b','c','d']
x=[1,2,3,4]
y=[1,2,3,4]
pl.plot(x,y)
pl.xticks(x,xticks)
pl.show()
</snippet></ROW><ROW><id>6975549</id><snippet>clone()</snippet></ROW><ROW><id>6975549</id><snippet>CLONE_CHILD_CLEARTID</snippet></ROW><ROW><id>6975549</id><snippet>child_tidptr</snippet></ROW><ROW><id>6975549</id><snippet>clone()</snippet></ROW><ROW><id>6975549</id><snippet>pthread_join()</snippet></ROW><ROW><id>6975549</id><snippet>set_tid_address()</snippet></ROW><ROW><id>6975549</id><snippet>pthread_join()</snippet></ROW><ROW><id>6975549</id><snippet>set_tid_address()</snippet></ROW><ROW><id>6975549</id><snippet>set_tid_address</snippet></ROW><ROW><id>6975549</id><snippet>ls</snippet></ROW><ROW><id>6975549</id><snippet>librt</snippet></ROW><ROW><id>6975549</id><snippet>libpthread</snippet></ROW><ROW><id>6975648</id><snippet>from random import random

def shuffle(string, factor):
    string    = list(string)
    length      = len(string)
    if length &lt; 2:
        return string
    shuffles    = int(length * factor)
    for i in xrange(shuffles):
        i, j    = tuple(int(random() * length) for i in xrange(2))
        string[i], string[j]    = string[j], string[i]

    return "".join(string)

x = "computer"
print shuffle(x, .2)
print shuffle(x, .5)
print shuffle(x, .9)
</snippet></ROW><ROW><id>6975648</id><snippet>def CoolWordScramble(string, factor = .5):
    if len(string) &lt; 2:
        return string
    first, string, last = string[0], string[1:-1], string[-1]

    return first + shuffle(string, factor) + last
</snippet></ROW><ROW><id>6975682</id><snippet>weak_obj = weakref.ref(meth.im_self)
weak_func = weakref.ref(meth.im_func)
</snippet></ROW><ROW><id>6975682</id><snippet>obj = weak_obj()
func = weak_func()
</snippet></ROW><ROW><id>6975682</id><snippet>meth = getattr(obj, func.__name__)
</snippet></ROW><ROW><id>6975843</id><snippet>repr(a)
</snippet></ROW><ROW><id>6976003</id><snippet>findAll</snippet></ROW><ROW><id>6976003</id><snippet>name</snippet></ROW><ROW><id>6976003</id><snippet>findAll</snippet></ROW><ROW><id>6976003</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>6976003</id><snippet>BeautifulSoup.Tag</snippet></ROW><ROW><id>6976003</id><snippet>from BeautifulSoup import BeautifulSoup, Tag

soup = BeautifulSoup('&lt;b&gt;Cows&lt;/b&gt; are being abducted by aliens according to the &lt;a href="www.washingtonpost.com&gt;Washington Post&lt;/a&gt;.')
parsed_soup = ''
</snippet></ROW><ROW><id>6976003</id><snippet>contents</snippet></ROW><ROW><id>6976003</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>6976003</id><snippet>for item in soup.contents:
    if type(item) is Tag and u'a' != item.name:
        parsed_soup += ''.join(item.findAll(text = True))
    else:
        parsed_soup += unicode(item)
</snippet></ROW><ROW><id>6976003</id><snippet> &gt;&gt;&gt; print parsed_soup
 u'Cows are being abducted by aliens according to the &lt;a href=\'"www.washingtonpost.com\'&gt;Washington Post&lt;/a&gt;.'
</snippet></ROW><ROW><id>6976033</id><snippet>permission</snippet></ROW><ROW><id>6976098</id><snippet>l = range(1,2)
l[:10] == l
</snippet></ROW><ROW><id>6976197</id><snippet>class ICMPSocket():
    def __init__(self):
        self.s = socket.socket(
            socket.AF_INET,
            socket.SOCK_RAW,
            socket.getprotobyname("icmp"))
    def sendto(self, data, host):
        self.s.sendto(data, (host, 1))
    def __getattr__(self, attr):
        return getattr(self.s, attr)
</snippet></ROW><ROW><id>6976289</id><snippet>import simplejson

class StreamManager(models.Manager):
    def all_serialized(self):
        qset = super(StreamManager, self).get_query_set()
        return simplejson.dumps(
               [{ 'id':item.id, 
                  'name':item.name, 
                  'network':item.network.name, 
                  'score':item.score,
                  'custom_url':item.custom_url,}
                  for item in qset])
</snippet></ROW><ROW><id>6976289</id><snippet>objects = StreamManger()</snippet></ROW><ROW><id>6976380</id><snippet>self.fields['field'].widget.attrs</snippet></ROW><ROW><id>6976380</id><snippet>self.field.widget.attrs</snippet></ROW><ROW><id>6976380</id><snippet>include('django.contrib.auth.urls')</snippet></ROW><ROW><id>6976404</id><snippet>Directory = '.'.join(str(x) for x in (Release, Build, ServicePack, Hotfix))
</snippet></ROW><ROW><id>6976404</id><snippet>os.path.join("path/to/base", Directory)
</snippet></ROW><ROW><id>6976404</id><snippet>path/to/base/Release.Build.ServicePack.Hotfix
</snippet></ROW><ROW><id>6976439</id><snippet>GET</snippet></ROW><ROW><id>6976439</id><snippet>&lt;a href="?ordering=best"&gt;Best match&lt;/a&gt;
&lt;a href="?ordering=soonest"&gt;Ending soonest&lt;/a&gt;
</snippet></ROW><ROW><id>6976439</id><snippet>request.GET</snippet></ROW><ROW><id>6976507</id><snippet>map_async</snippet></ROW><ROW><id>6976507</id><snippet>from multiprocessing import Pool
from time import sleep

def square(x):
    return x * x

def cube(y):
    return y * y * y

pool = Pool(processes=20)

result_squares = pool.map_async(f, range(10))
result_cubes = pool.map_async(g, range(10))
</snippet></ROW><ROW><id>6976507</id><snippet>&gt;&gt;&gt; print result_squares.get(timeout=1)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

&gt;&gt;&gt; print result_cubes.get(timeout=1)
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]
</snippet></ROW><ROW><id>6976561</id><snippet>pip</snippet></ROW><ROW><id>6976561</id><snippet>pip install git+https://github.com/facebook/python-sdk.git\#egg=facebook-python-sdk
</snippet></ROW><ROW><id>6976561</id><snippet>pip install -e</snippet></ROW><ROW><id>6976608</id><snippet>import logging
from testbed.utils import SpecialLogger
logging.setLoggerClass(SpecialLogger)
logger = logging.getLogger('mylog') # should be a testbed.utils.SpecialLogger
</snippet></ROW><ROW><id>6976608</id><snippet>settings.py</snippet></ROW><ROW><id>6976648</id><snippet>dpkg</snippet></ROW><ROW><id>6976648</id><snippet>dpkg</snippet></ROW><ROW><id>6976648</id><snippet>$ dpkg -i --force-not-root --root=$HOME mypackagename.deb
</snippet></ROW><ROW><id>6976648</id><snippet>python setup.py build</snippet></ROW><ROW><id>6976648</id><snippet>directory_where_you_extracted_the_tarball/build/numpy/lib.OS-arch-PythonVersion</snippet></ROW><ROW><id>6976648</id><snippet>lib.linux-x86_64-2.6/</snippet></ROW><ROW><id>6976648</id><snippet>tar -jcf np.tar.bz2 /path/to/numpy/build/numpy/lib.OS-arch-PythonVersion/numpy</snippet></ROW><ROW><id>6976666</id><snippet>&gt;&gt;&gt; kw = {'a': True}

&gt;&gt;&gt; f(**kw)
&lt;&lt;&lt; 'a was True'
</snippet></ROW><ROW><id>6976846</id><snippet>get_or_create</snippet></ROW><ROW><id>6976846</id><snippet>defaults</snippet></ROW><ROW><id>6976846</id><snippet>get_or_create</snippet></ROW><ROW><id>6976846</id><snippet>get_or_create</snippet></ROW><ROW><id>6976892</id><snippet>import numpy as np
import pylab as pl
import urllib
url = "http://ichart.yahoo.com/table.csv?a=2&amp;c=2011&amp;b=30&amp;e=7&amp;d=7&amp;g=d&amp;f=2011&amp;s=msft&amp;ignore=.csv"
f = urllib.urlopen(url)
title = f.readline().strip().split(",")
data = np.loadtxt(f, dtype=np.float, delimiter=",", converters={0: pl.datestr2num}))
</snippet></ROW><ROW><id>6976932</id><snippet> y = {  }
 for country, cities in x.iteritems():
     y[country] = sum(cities.values())
</snippet></ROW><ROW><id>6977060</id><snippet>this.parent</snippet></ROW><ROW><id>6977060</id><snippet>db.get(this.key().parent())</snippet></ROW><ROW><id>6977173</id><snippet>xp</snippet></ROW><ROW><id>6977173</id><snippet>StringVar</snippet></ROW><ROW><id>6977273</id><snippet>file = 'C:\\Exe\\First Version\\filename.exe'
os.system('"' + file + '"')
</snippet></ROW><ROW><id>6977273</id><snippet>subprocess</snippet></ROW><ROW><id>6977273</id><snippet>import subprocess
file = 'C:\\Exe\\First Version\\filename.exe'
subprocess.call([file])
</snippet></ROW><ROW><id>6977826</id><snippet>from collections import defaultdict
from datetime import datetime, timedelta

week_ago = datetime.now() - timedelta(days=7)

author_recent_ratings = dict(Entry.objects.filter(pub_date__gt=week_ago)
                                          .order_by('pub_date')
                                          .select_related()
                                          .values_list('author', 'rating'))

recent_by_rating = defaultdict(list)
for author, rating in author_recent_ratings.iteritems():
    recent_by_rating[rating].append(author)
</snippet></ROW><ROW><id>6977883</id><snippet>FormPreview</snippet></ROW><ROW><id>6977901</id><snippet>from sqlalchemy.orm import class_mapper, defer
def defer_everything_but(entity, cols):
    m = class_mapper(entity)
    return [defer(k) for k in 
            set(p.key for p 
                in m.iterate_properties 
                if hasattr(p, 'columns')).difference(cols)]

s = Session()
print s.query(A).options(*defer_everything_but(A, ["q", "p"]))
</snippet></ROW><ROW><id>6977951</id><snippet>root.geometry('200x200')
root.mainloop()
</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; 1
1
</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; a = 1
</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; a
1
</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; x=MyClass()
&gt;&gt;&gt; x # I'm adding this :-). The number below may be different, it refers to a
      # position in memory which is occupied by the variable x
&lt;__main__.MyClass instance at 0x060100F8&gt; 
</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; x.i
12345
</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; x.f
&lt;bound method MyClass.f of &lt;__main__.MyClass instance at 0x060100F8&gt;&gt;
</snippet></ROW><ROW><id>6978183</id><snippet>def</snippet></ROW><ROW><id>6978183</id><snippet>()</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; x.f()
'hello world'
</snippet></ROW><ROW><id>6978183</id><snippet>print</snippet></ROW><ROW><id>6978183</id><snippet>&gt;&gt;&gt; print(x.f()) # this may be print x.f() (note the number of parens)
                 # based on different versions of Python. 
hello world
</snippet></ROW><ROW><id>6978386</id><snippet>isinstance</snippet></ROW><ROW><id>6978386</id><snippet>isinstance(clsObj,Cls)</snippet></ROW><ROW><id>6978386</id><snippet>True</snippet></ROW><ROW><id>6978386</id><snippet>isinstance(Cls,Cls)</snippet></ROW><ROW><id>6978386</id><snippet>False</snippet></ROW><ROW><id>6978571</id><snippet>class SomeClass(object):
    authenticated = {}
    def authenticate(self, username, password):
        #do something here
        if authenticate(username, password):
            # make unique token can probably be just a hash
            # of the millisecond time and the username
            self.authenticated[make_unique_token(username)] = True
    def other_action(self, vars):
        # This will return True if the user is authenticated
        # and None otherwise, which evaluates to False
        if authenticated.get(vars.get('authentication-token')):
            #do whatever
            pass
        else:
            return "Not authorized."

server=SimpleXMLRPCServer.SimpleXMLRPCServer("0.0.0.0", 8000)
server.register_instance(someclass())
server.serve_forever()
</snippet></ROW><ROW><id>6978571</id><snippet>pass</snippet></ROW><ROW><id>6978933</id><snippet>PyObject * jpo = PyInt_FromLong(jp);
// do some error checking here
PyList_Append(item, jpo);
Py_DECREF(jpo);
</snippet></ROW><ROW><id>6979864</id><snippet>smtplib.SMTP("smtp.gmail.com", 587, timeout=120)
</snippet></ROW><ROW><id>6979864</id><snippet>timeout</snippet></ROW><ROW><id>6979864</id><snippet>smtplib.SMTP_SSL("smtp.gmail.com", 465)
</snippet></ROW><ROW><id>6979986</id><snippet>models.ForeignKey('app.Shastra')</snippet></ROW><ROW><id>6980094</id><snippet>webapp.RequestHander</snippet></ROW><ROW><id>6980241</id><snippet>&lt;form name="form" method="GET"&gt;
    $:content
&lt;/form&gt;
</snippet></ROW><ROW><id>6980607</id><snippet>Sources</snippet></ROW><ROW><id>6980607</id><snippet>Sources</snippet></ROW><ROW><id>6980653</id><snippet>main.js</snippet></ROW><ROW><id>6980653</id><snippet>.js</snippet></ROW><ROW><id>6980653</id><snippet>.css</snippet></ROW><ROW><id>6980653</id><snippet>static</snippet></ROW><ROW><id>6980653</id><snippet>  app.py
- static/
    main.js
- views/
    index.tpl
</snippet></ROW><ROW><id>6980653</id><snippet>from bottle import static_file

# ...

@route('/static/:path#.+#', name='static')
def static(path):
    return static_file(path, root='static')
</snippet></ROW><ROW><id>6980653</id><snippet>static/</snippet></ROW><ROW><id>6980653</id><snippet>&lt;script type="text/javascript" src="js/main.js" charset="utf-8"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>6980653</id><snippet>.js</snippet></ROW><ROW><id>6980653</id><snippet>/</snippet></ROW><ROW><id>6980653</id><snippet>.js</snippet></ROW><ROW><id>6980653</id><snippet>/js/main.js</snippet></ROW><ROW><id>6980653</id><snippet>/post/12</snippet></ROW><ROW><id>6980653</id><snippet>/post/12/js/main.js</snippet></ROW><ROW><id>6980653</id><snippet>get_url</snippet></ROW><ROW><id>6980653</id><snippet>from Bottle import get_url

# ...

@route('/')
@view('index')
def index():
    return { 'get_url': get_url } 
</snippet></ROW><ROW><id>6980653</id><snippet>index.tpl</snippet></ROW><ROW><id>6980653</id><snippet>.js</snippet></ROW><ROW><id>6980653</id><snippet>&lt;script type="text/javascript" src="{{ get_url('static', path='main.js') }}" charset="utf-8"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>6980653</id><snippet>get_url</snippet></ROW><ROW><id>6980653</id><snippet>name='static'</snippet></ROW><ROW><id>6980653</id><snippet>/static/</snippet></ROW><ROW><id>6980935</id><snippet>**</snippet></ROW><ROW><id>6980935</id><snippet>kw = {field_name:change} # you're not explicit as to which is the field_name
                         # value you would like to search for.
old_image = model.objects.get(**kw)
</snippet></ROW><ROW><id>6980935</id><snippet>getattr(object, name[, default])</snippet></ROW><ROW><id>6980935</id><snippet>getattr(old_image, "id", "Spam") # gets old_image.id, if that does not exist, it
                                 # defaults to the str "Spam" Of course, in this 
                                 # context, you probably want 
                                 # getattr(old_image, field_name)
</snippet></ROW><ROW><id>6980997</id><snippet>class Atc(models.Model): # in models.py
    drug = models.ForeignKey('Drug')
    description = models.CharField(max_length=10000)
    def __unicode__(self): return u"%s - %s" % (self.id, self.description)

class AtcInline(admin.StackedInline): # in admin.py
    # set option for not being able to add more than one.
    model = Atc
    fields = ['description']
</snippet></ROW><ROW><id>6980997</id><snippet>Drug</snippet></ROW><ROW><id>6980997</id><snippet>Drugs</snippet></ROW><ROW><id>6980997</id><snippet>Drug.objects.filter()</snippet></ROW><ROW><id>6980997</id><snippet>drug = Drug()</snippet></ROW><ROW><id>6980997</id><snippet>class AtcClassification(models.Model):
    code = models.CharField(max_length=60, primary_key=True, db_column='ID') 
    description = models.CharField(max_length=690, db_column='TXT')

class Drug(models.Model):
    id = models.CharField(max_length=64, primary_key=True, db_column='ID')
    atc_classification = models.ForeignKey(AtcClassification, db_column='ATCCD')
    price_to_pharmacy = models.FloatField(db_column='PRICETOPHARM')
    brand_name = models.CharField(max_length=135, db_column='BRANDNM')
    drug_name = models.CharField(max_length=240, db_column='DRUGNM')
    form_and_strength = models...

    class Meta:
        db_table = u'DRUGS'

    def __unicode__(self):
        return u"%s - %s" %(self.drug_name, self.form_and_strength)

    def atc_description(self): return self.atc_classification.description
    def atc_code(self): return self.atc_classification.code
</snippet></ROW><ROW><id>6980997</id><snippet>db.rename(table_name, old_column_name, new_column_name)</snippet></ROW><ROW><id>6981211</id><snippet>fcntl</snippet></ROW><ROW><id>6981360</id><snippet>import sys, os.path, ctypes, ctypes.wintypes

Psapi = ctypes.WinDLL('Psapi.dll')
EnumProcesses = Psapi.EnumProcesses
EnumProcesses.restype = ctypes.wintypes.BOOL
GetProcessImageFileName = Psapi.GetProcessImageFileNameA
GetProcessImageFileName.restype = ctypes.wintypes.DWORD

Kernel32 = ctypes.WinDLL('kernel32.dll')
OpenProcess = Kernel32.OpenProcess
OpenProcess.restype = ctypes.wintypes.HANDLE
TerminateProcess = Kernel32.TerminateProcess
TerminateProcess.restype = ctypes.wintypes.BOOL
CloseHandle = Kernel32.CloseHandle

MAX_PATH = 260
PROCESS_TERMINATE = 0x0001
PROCESS_QUERY_INFORMATION = 0x0400

count = 32
while True:
    ProcessIds = (ctypes.wintypes.DWORD*count)()
    cb = ctypes.sizeof(ProcessIds)
    BytesReturned = ctypes.wintypes.DWORD()
    if EnumProcesses(ctypes.byref(ProcessIds), cb, ctypes.byref(BytesReturned)):
        if BytesReturned.value&lt;cb:
            break
        else:
            count *= 2
    else:
        sys.exit("Call to EnumProcesses failed")

for index in range(BytesReturned.value / ctypes.sizeof(ctypes.wintypes.DWORD)):
    ProcessId = ProcessIds[index]
    hProcess = OpenProcess(PROCESS_TERMINATE | PROCESS_QUERY_INFORMATION, False, ProcessId)
    if hProcess:
        ImageFileName = (ctypes.c_char*MAX_PATH)()
        if GetProcessImageFileName(hProcess, ImageFileName, MAX_PATH)&gt;0:
            filename = os.path.basename(ImageFileName.value)
            if filename == 'notepad.exe':
                TerminateProcess(hProcess, 1)
        CloseHandle(hProcess)
</snippet></ROW><ROW><id>6981532</id><snippet>"asd%d" % 9
"asd" + str(9)
</snippet></ROW><ROW><id>6981553</id><snippet>s1 = [1,2,3]</snippet></ROW><ROW><id>6981725</id><snippet>DROP</snippet></ROW><ROW><id>6981725</id><snippet>UPDATE</snippet></ROW><ROW><id>6981725</id><snippet>DELETE</snippet></ROW><ROW><id>6981725</id><snippet>SELECT</snippet></ROW><ROW><id>6981725</id><snippet>UPDATE</snippet></ROW><ROW><id>6981725</id><snippet>DELETE</snippet></ROW><ROW><id>6981725</id><snippet>DELETE</snippet></ROW><ROW><id>6981725</id><snippet>UPDATE</snippet></ROW><ROW><id>6981725</id><snippet>SELECT</snippet></ROW><ROW><id>6981725</id><snippet>INSERT</snippet></ROW><ROW><id>6981725</id><snippet>DELETE</snippet></ROW><ROW><id>6981725</id><snippet>UPDATE</snippet></ROW><ROW><id>6981757</id><snippet>-rw-r--r--   1 ftp-usr  pdmaint     5305 Mar 20 09:48 INDEX
</snippet></ROW><ROW><id>6981757</id><snippet>name = line.split()[-1]
print(name) # Should be "INDEX"
</snippet></ROW><ROW><id>6981771</id><snippet>gen = (x for x in xyz if x not in a)

for x in gen:
    print x
</snippet></ROW><ROW><id>6982325</id><snippet>class BookList(wx.ListCtrl):
  def __init__(self, parent, ID=wx.ID_ANY):
    wx.ListCtrl.__init__(self, parent, ID)

    self.InsertColumn(0, 'Title')
    self.InsertColumn(1, 'Author')

    # set column width ...

    self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
    self.Bind(wx.EVT_RIGHT_DOWN, self.OnRightDown)

    # currently selected row
    self.cur = None


  def OnLeftDown(self, event):
    if self.cur != None:
      self.Select( self.cur, 0) # deselect currently selected item

    x,y = event.GetPosition()
    row,flags = self.HitTest( (x,y) )

    self.Select(row)
    self.cur = row


  def OnRightDown(self, event):
    menu = wx.Menu()
    delete = menu.Append(wx.ID_ANY, 'Delete Item')

    self.Bind(wx.EVT_MENU, self.OnDelete, delete)

    # select row
    self.OnLeftDown(event)

    self.PopupMenu(menu, event.GetPosition())
</snippet></ROW><ROW><id>6982413</id><snippet>self.id()</snippet></ROW><ROW><id>6982413</id><snippet>self</snippet></ROW><ROW><id>6982510</id><snippet>class I18NString(TranslatableModel):
    key = models.SlugField(unique = True)
    translations = TranslatedFields(
        text = models.TextField(),
    )
</snippet></ROW><ROW><id>6982510</id><snippet># For performance, memcached should be used.   
strings = I18NString.objects.language(request.COUNTRY_CODE).all()
trans = dict((s.key, s.text) for s in strings)
</snippet></ROW><ROW><id>6982510</id><snippet>{{ trans.short-introduction-text }}
</snippet></ROW><ROW><id>6982551</id><snippet>from pylab import *
d = np.random.normal(loc=20, size=10000)
max_val=np.log10(max(d))
min_val=np.log10(min(d))
logspace = np.logspace(min_val, max_val, 50) 


r = hist(d,bins=logspace,histtype='step', normed=True)
print "area":, sum(np.diff(r[1])*r[0])
</snippet></ROW><ROW><id>6982551</id><snippet>step(r[1][1:], r[0]/my_norm_constant)
</snippet></ROW><ROW><id>6982974</id><snippet>var = '%(foo)s %(foo)s %(foo)s' % { 'foo': 'look_at_me_three_times' }
</snippet></ROW><ROW><id>6982974</id><snippet>format</snippet></ROW><ROW><id>6982974</id><snippet>var = '{0} {0} {0}'.format('look_at_meeee')
</snippet></ROW><ROW><id>6982974</id><snippet>format</snippet></ROW><ROW><id>6982974</id><snippet>var = '{foo} {foo} {foo}'.format(foo = 'python you so crazy')
</snippet></ROW><ROW><id>6983709</id><snippet>open</snippet></ROW><ROW><id>6983709</id><snippet>import os
def download(ftp,file, localdir):
    f = open(os.path.join(localdir, file),"wb")
    ftp.retrbinary("RETR " + file,f.write)
    f.close()
</snippet></ROW><ROW><id>6984040</id><snippet>xCoords = []
yCoords = []
zCoords = []
</snippet></ROW><ROW><id>6984040</id><snippet>xCoords = [[]];
yCoords = [[]];
zCoords = [[]];
</snippet></ROW><ROW><id>6984040</id><snippet>xCoords = []
yCoords = []
zCoords = []
xCoords.append([])
yCoords.append([])
zCoords.append([])
</snippet></ROW><ROW><id>6984040</id><snippet>xCoords = [[]*n for x in xrange(n)]
yCoords = [[]*n for x in xrange(n)]
zCoords = [[]*n for x in xrange(n)]
</snippet></ROW><ROW><id>6984382</id><snippet>Engine</snippet></ROW><ROW><id>6984382</id><snippet>Table</snippet></ROW><ROW><id>6984382</id><snippet>table.insert().execute()

result = table.select().execute()
</snippet></ROW><ROW><id>6984500</id><snippet>CON</snippet></ROW><ROW><id>6984500</id><snippet>os.path.abspath('D:/PROJECTS/SuiShouBei/www/ssb/static/voices/en/mp3/cont.mp3')</snippet></ROW><ROW><id>6984500</id><snippet>&lt; (less than)
&gt; (greater than)
: (colon)
" (double quote)
/ (forward slash)
\ (backslash)
| (vertical bar or pipe)
? (question mark)
* (asterisk)
</snippet></ROW><ROW><id>6984500</id><snippet>CON, PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, 
LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9. 
</snippet></ROW><ROW><id>6984500</id><snippet>\\.\CON</snippet></ROW><ROW><id>6984643</id><snippet>import os
import shutil

def my_super_copy(what, where):
    try:
        shutil.copy(what, where)
    except IOError:
        os.chmod(where, 777) #?? still can raise exception
        shutil.copy(what, where)
</snippet></ROW><ROW><id>6984664</id><snippet>template.render</snippet></ROW><ROW><id>6984664</id><snippet>template</snippet></ROW><ROW><id>6984664</id><snippet>Template</snippet></ROW><ROW><id>6984664</id><snippet>tmpl = template.Template(template_string)
tmpl.render(template.Context(context))
</snippet></ROW><ROW><id>6984759</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 2, 0.01)
y = np.random.random_sample(len(x))

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x, y)
ax.set_xlabel('Power Point')
ax.set_ylabel('Voltage (V)')
plt.savefig('example.png')
</snippet></ROW><ROW><id>6984774</id><snippet>'this text'</snippet></ROW><ROW><id>6984774</id><snippet>u'this text'</snippet></ROW><ROW><id>6984774</id><snippet>'this text'</snippet></ROW><ROW><id>6984774</id><snippet>b'this text'</snippet></ROW><ROW><id>6984774</id><snippet>.decode(encoding)</snippet></ROW><ROW><id>6984774</id><snippet>.encode(encoding)</snippet></ROW><ROW><id>6984907</id><snippet>def startSQLHelper(self, sPath, sPassword):
  print '--starting SQL helper--'
  args = [sPath + 'sqlplus.exe', '-L', 'sys/'+sPassword]
  return subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def checkOraPass (self, sPath, sPassword):
  print '--checkOraPass--'
  p = self.startSQLHelper(sPath, sPassword)
  output = p.communicate()[0]
  print output

  if output.find('ORA-28009') != -1:
     print 'Password passed'
     return True

  return False
</snippet></ROW><ROW><id>6985440</id><snippet>Input X: Term
Output Y: Sense  
Output L: Synonyms in this Sense  

s_helper(X,Y) :- s(X,_,Y,_,_,_).  
?- setof(H,(s_helper(Y,X),s_helper(Y,H)),L).  
</snippet></ROW><ROW><id>6985440</id><snippet>?- setof(H,(s_helper(Y,'discouraged'),s_helper(Y,H),L).  
Y = 301664880,  
L = [demoralised, demoralized, discouraged, disheartened] ;  
Y = 301992418,  
L = [discouraged] ;  
No  
</snippet></ROW><ROW><id>6985440</id><snippet>Input X: Word  
Output Y: Term

s_helper(X) :- s(_,_,X,_,_,_).  
word_in_term(X,Y) :- atom_concat(X,' ',H), sub_atom(Y,0,_,_,H).
word_in_term(X,Y) :- atom_concat(' ',X,H), atom_concat(H,' ',J), sub_atom(Y,_,_,_,J).
word_in_term(X,Y) :- atom_concat(' ',X,H), sub_atom(Y,_,_,0,H).
?- s_helper(Y), word_in_term(X,Y).
</snippet></ROW><ROW><id>6985440</id><snippet>?- s_helper(X), word_in_term('beat',X).  
X = 'beat generation' ;  
X = 'beat in' ;  
X = 'beat about' ;  
X = 'beat around the bush' ;  
X = 'beat out' ;  
X = 'beat up' ;  
X = 'beat up' ;  
X = 'beat back' ;  
X = 'beat out' ;  
X = 'beat down' ;  
X = 'beat a retreat' ;  
X = 'beat down' ;  
X = 'beat down' ;  
No
</snippet></ROW><ROW><id>6985440</id><snippet>class Synset {  
    static Hashtable&lt;Integer,Synset&gt; synset_access;  
    static Hashtable&lt;String,Vector&lt;Synset&gt;&gt; term_access;  
}
</snippet></ROW><ROW><id>6985634</id><snippet>    int result = win32api.MessageBox(None,
                        "This Program Will do THIS:\n"
                        "blablabla",
                        "programtitler",
                        win32con.MB_OKCANCEL | win32con.MB_ICONQUESTION)

    switch (result)
    {
        case win32con.MB_IDOK: 
        //OK Selected.
        //put 'ok' code here.
        break;
        case win32con.MB_IDCANCEL:
        //Cancel Selected.
        //put 'Cancel' code here.
        break;
    }
</snippet></ROW><ROW><id>6985634</id><snippet>    if result == win32con.MB_IDOK:
        //put 'ok' code here
    elif result == win32con.MB_IDCANCEL:
        //put 'cancel' code here
</snippet></ROW><ROW><id>6985814</id><snippet>for i, line in enumerate(input_file):
    if i == 0:
        output.write(line)
    else:
        if not line.startswith('#'):
            output.write(line)
</snippet></ROW><ROW><id>6985814</id><snippet>enumerate</snippet></ROW><ROW><id>6985814</id><snippet>for i, line in enumerate(input_file):
    if i == 0 or not line.startswith('#'):
        output.write(line)
</snippet></ROW><ROW><id>6985961</id><snippet>pythonw.exe</snippet></ROW><ROW><id>6985961</id><snippet>python.exe</snippet></ROW><ROW><id>6985961</id><snippet>.pyw</snippet></ROW><ROW><id>6985961</id><snippet>.py</snippet></ROW><ROW><id>6986216</id><snippet>import datetime

now = datetime.datetime.now()
then = now - datetime.timedelta(days=90)
</snippet></ROW><ROW><id>6986323</id><snippet>tempfile</snippet></ROW><ROW><id>6986323</id><snippet>base64</snippet></ROW><ROW><id>6986323</id><snippet>execfile</snippet></ROW><ROW><id>6986613</id><snippet>time.clock</snippet></ROW><ROW><id>6986613</id><snippet>time.strftime</snippet></ROW><ROW><id>6986613</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; tm = time.strftime('%a, %d %b %Y %H:%M:%S %Z(%z)')
&gt;&gt;&gt; tm
'Mon, 08 Aug 2011 20:14:59 CEST(+0200)'
</snippet></ROW><ROW><id>6986980</id><snippet>roqet</snippet></ROW><ROW><id>6986980</id><snippet>roqet -i laqrs -d structure -n -e "SELECT * WHERE {?x a ?y OPTIONAL {?x a ?z}}"</snippet></ROW><ROW><id>6986980</id><snippet>Query:
query verb: SELECT
query bound variables (3): x, y, z
query Group graph pattern[0] {
  sub-graph patterns (2) {
    Basic graph pattern[1] #0 {
      triples {
        triple #0 { triple(variable(x), uri&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;, variable(y)) }
      }
    }
    Optional graph pattern[2] #1 {
      sub-graph patterns (1) {
        Basic graph pattern[3] #0 {
          triples {
            triple #0 { triple(variable(x), uri&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;, variable(z)) }
          }
        }
      }
    }
  }
}
</snippet></ROW><ROW><id>6986980</id><snippet>Query Engines</snippet></ROW><ROW><id>6986980</id><snippet>4s-query</snippet></ROW><ROW><id>6986980</id><snippet>-vvv</snippet></ROW><ROW><id>6987109</id><snippet>L = max - min</snippet></ROW><ROW><id>6987109</id><snippet>L</snippet></ROW><ROW><id>6987402</id><snippet>defaultdict</snippet></ROW><ROW><id>6987402</id><snippet>from collections import defaultdict

L = [1,2,45,55,5,4,4,4,4,4,4,5456,56,6,7,67]
d = defaultdict(int)
for i in L:
    d[i] += 1
result = max(d.iteritems(), key=lambda x: x[1])
print result
# (4, 6)
# The number 4 occurs 6 times
</snippet></ROW><ROW><id>6987419</id><snippet>gcc -c -IC:\Python27\include -o ctest.o ctest.c
gcc -shared -LC:\Python27\libs -o ctest.pyd ctest.o -lpython27
</snippet></ROW><ROW><id>6987419</id><snippet>cdef void _say_hello(name):
    print "Hello %s" % name

def say_hello(name):
    _say_hello(name)
</snippet></ROW><ROW><id>6987419</id><snippet>cpdef</snippet></ROW><ROW><id>6987419</id><snippet>cpdef say_hello(name):
    print "Hello %s" % name
</snippet></ROW><ROW><id>6987427</id><snippet>import os, fnmatch

def locate(pattern, root_path):
    for path, dirs, files in os.walk(os.path.abspath(root_path)):
        for filename in fnmatch.filter(files, pattern):
            yield os.path.join(path, filename)
</snippet></ROW><ROW><id>6987427</id><snippet>js_assets = [js for js in locate('*.js', '/../../nodes')]
</snippet></ROW><ROW><id>6987427</id><snippet>fnmatch.filter( glob.glob('/../../nodes/*/views/assets/js/**/*'), '*.js' )
</snippet></ROW><ROW><id>6987608</id><snippet>self.data_store.create(data_dictionary)</snippet></ROW><ROW><id>6987608</id><snippet>self.data_store</snippet></ROW><ROW><id>6987608</id><snippet>self.data_store = StandardDataStore()</snippet></ROW><ROW><id>6987608</id><snippet>__init__</snippet></ROW><ROW><id>6987608</id><snippet>create</snippet></ROW><ROW><id>6987608</id><snippet>StandardDataStore</snippet></ROW><ROW><id>6987798</id><snippet>&gt;&gt;&gt; txt = "Today it's \t07.May 2011. Or 2.999."
&gt;&gt;&gt; p = re.compile(r"\d+|[-'a-z]+|[ ]+|\s+|[.,]+|\S+", re.I)
&gt;&gt;&gt; slice_starts = [m.start() for m in p.finditer(txt)] + [None]
&gt;&gt;&gt; [txt[s:e] for s, e in zip(slice_starts, slice_starts[1:])]
['Today', ' ', "it's", ' ', '\t', '07', '.', 'May', ' ', '2011', '.', ' ', 'Or', ' ', '2', '.', '999', '.']
</snippet></ROW><ROW><id>6988101</id><snippet>your_package.run()</snippet></ROW><ROW><id>6988127</id><snippet>_auth_user_id</snippet></ROW><ROW><id>6988127</id><snippet>authenticate</snippet></ROW><ROW><id>6988127</id><snippet>login</snippet></ROW><ROW><id>6988127</id><snippet>login_required</snippet></ROW><ROW><id>6988127</id><snippet>authenticate</snippet></ROW><ROW><id>6988127</id><snippet>login</snippet></ROW><ROW><id>6988276</id><snippet>print(dictionary)</snippet></ROW><ROW><id>6988276</id><snippet>repr</snippet></ROW><ROW><id>6988276</id><snippet>dictionary = {u"Hello" : u"你好"} 
for key,value in dictionary.iteritems():
    print(u'{k} --&gt; {v}'.format(k=key,v=value))
</snippet></ROW><ROW><id>6988276</id><snippet>Hello --&gt; 你好
</snippet></ROW><ROW><id>6988756</id><snippet>setattr</snippet></ROW><ROW><id>6988756</id><snippet>class Controller(object):
    def __init__(self):
        var = 'ma_variable_dynamique'
        setattr(self, var, 'toto')
</snippet></ROW><ROW><id>6988772</id><snippet>import scipy.stats as stats    
def gaussian_stretch2(input_array, array_mean, array_standard_deviation, n):
    mask = input_array.mask
    n = stats.norm(array_mean, array_standard_deviation*n)
    return numpy.ma.array(n.cdf(input_array), mask=mask)
</snippet></ROW><ROW><id>6988798</id><snippet>class mod_user:

    def __init__(self):
        global MODE
        self._old_mode = MODE
        MODE = "user"

    def __enter__(self):
        pass

    def __exit__(self, *args, **kws):
        global MODE
        MODE = self._old_mode

MODE = "sudo"

with mod_user():
    print MODE  # print : user.

print MODE  # print: sudo.

mod_user()
print MODE   # print: user.
</snippet></ROW><ROW><id>6988827</id><snippet>self.printName</snippet></ROW><ROW><id>6988827</id><snippet>class PrintName:
    def __init__(self, value):
        self._value = value
        printName(self._value)

def printName(value):
    for c in value:
    print c
</snippet></ROW><ROW><id>6989055</id><snippet>ARCHFLAGS</snippet></ROW><ROW><id>6989055</id><snippet>sudo</snippet></ROW><ROW><id>6989055</id><snippet>sudo</snippet></ROW><ROW><id>6989055</id><snippet>man sudo</snippet></ROW><ROW><id>6989055</id><snippet>sudo ARCHFLAGS="-arch x86_64" pip install -E ~/Documents/project/project_env -r ~/Documents/project/trunk/django/dependencies.txt`
</snippet></ROW><ROW><id>6989245</id><snippet>print sqrt(x)
</snippet></ROW><ROW><id>6989245</id><snippet>sqrt(x)
</snippet></ROW><ROW><id>6989330</id><snippet>def fmap_element(f, el):
    return f(el)

def fmap_list(f, l):
    return [fmap_element(f, el) for el in l)]

def fmap_lol(f, lol):
    return [fmap_list(f,l) for l in lol]

def split_nt_lol(nt_lol):
    return dict((name, fmap_lol(lambda nt: getattr(nt, name), nt_lol)) 
                for name in nt_lol[0][0]._fields)
</snippet></ROW><ROW><id>6989330</id><snippet>&gt;&gt;&gt; split_nt_lol(combo_mat)
{'i': [[0, 1, 2], [3, 4, 5], [6, 7, 8]], 
 's': [['0', '1', '2'], ['3', '4', '5'], ['6', '7', '8']], 
 'f': [[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]]}
</snippet></ROW><ROW><id>6989460</id><snippet>blobstore.create_upload_url('/upload')</snippet></ROW><ROW><id>6989806</id><snippet>class ExtendedSurface(pygame.Surface):
   def __init__(self, string):
       pygame.Surface.__init__(self, (100, 100))
       self.fill((220,22,22))
       # ...
</snippet></ROW><ROW><id>6989808</id><snippet>icon_path = os.path.abspath('icons')
gtk.IconTheme.append_search_path(icon_path)
</snippet></ROW><ROW><id>6989808</id><snippet>icons</snippet></ROW><ROW><id>6989808</id><snippet>hicolor</snippet></ROW><ROW><id>6989936</id><snippet>None</snippet></ROW><ROW><id>6989936</id><snippet>for level in range(nlevels):
    for node in nodes[level]:
        cost = the cost to this node
         for (neighbour_vertex, edge_cost) in (the nodes edges):
             alt_cost = cost + edge_cost
             if  alt_cost &lt; cost_to_that_vertex:
                 cost_to_that_vertex = alt_cost
</snippet></ROW><ROW><id>6989937</id><snippet>view_func</snippet></ROW><ROW><id>6989937</id><snippet>test_func</snippet></ROW><ROW><id>6989937</id><snippet>True</snippet></ROW><ROW><id>6989937</id><snippet>user_passes_test</snippet></ROW><ROW><id>6989937</id><snippet>@user_passes_test
def test_intelligence(user):
    if is_intelligent:
        return True
    else:
        return False

@test_intelligence
def my_view(request):
    #this is the view you only want intelligent people to see
    pass
</snippet></ROW><ROW><id>6989937</id><snippet>wraps</snippet></ROW><ROW><id>6990217</id><snippet>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self) :
...        while not self.crisis :
...            yield "$100"
</snippet></ROW><ROW><id>6990217</id><snippet>crisis</snippet></ROW><ROW><id>6990217</id><snippet>create_atm</snippet></ROW><ROW><id>6990217</id><snippet>&gt;&gt;&gt; x = Bank()
</snippet></ROW><ROW><id>6990217</id><snippet>crisis</snippet></ROW><ROW><id>6990217</id><snippet>create_atm</snippet></ROW><ROW><id>6990217</id><snippet>x.create_atm();</snippet></ROW><ROW><id>6990217</id><snippet>Bank.create_atm(x);</snippet></ROW><ROW><id>6990217</id><snippet>y.create_atm()</snippet></ROW><ROW><id>6990217</id><snippet>self</snippet></ROW><ROW><id>6990217</id><snippet>y</snippet></ROW><ROW><id>6990217</id><snippet>self</snippet></ROW><ROW><id>6990217</id><snippet>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs
...    crisis = False
...    def create_atm(thisbank) :
...        while not thisbank.crisis :
...            yield "$100"
</snippet></ROW><ROW><id>6990252</id><snippet>globals</snippet></ROW><ROW><id>6990252</id><snippet>globals()</snippet></ROW><ROW><id>6990384</id><snippet>def fileno(self):
    return self.fp.fileno()
</snippet></ROW><ROW><id>6990384</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>6990384</id><snippet>urrlib2.urlopen</snippet></ROW><ROW><id>6990487</id><snippet>#!/usr/bin/env python
import signal
import sys
def signal_handler(signal, frame):
    print 'You pressed Ctrl+C - or killed me with -2'
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)
print 'Press Ctrl+C'
signal.pause()
</snippet></ROW><ROW><id>6990546</id><snippet>questions = [(q, 
              q.vote_set.filter(choice__exact='Y'), 
              q.vote_set.filter(choice__exact='N'), 
              request.session.get(str(q.id)))
                  for q in questions]
</snippet></ROW><ROW><id>6990922</id><snippet>foo</snippet></ROW><ROW><id>6990922</id><snippet>reload(foo)
</snippet></ROW><ROW><id>6990922</id><snippet>from foo import bar</snippet></ROW><ROW><id>6990922</id><snippet>bar</snippet></ROW><ROW><id>6990922</id><snippet>import foo</snippet></ROW><ROW><id>6990922</id><snippet>foo.bar()</snippet></ROW><ROW><id>6990922</id><snippet>reload</snippet></ROW><ROW><id>6990922</id><snippet>ipy_user_conf.py</snippet></ROW><ROW><id>6990922</id><snippet># For autoreloading of modules (%autoreload, %aimport)    
import ipy_autoreload
</snippet></ROW><ROW><id>6991365</id><snippet>request = webapp.Request({
    "wsgi.input": StringIO.StringIO(),
    "METHOD": "POST",
})
response = webapp.Response()
handler = MyHandler()
handler.initialize(request, response)
handler.post()
</snippet></ROW><ROW><id>6991365</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>6991365</id><snippet>FieldStorage</snippet></ROW><ROW><id>6991365</id><snippet>class FakeFieldStorage(object):
  def __init__(self, filename, value):
    self.filename = filename
    self.value = value
</snippet></ROW><ROW><id>6991365</id><snippet>uploaded_file = FakeFieldStorage("test.txt", "foo")
request.POST['file'] = uploaded_file
</snippet></ROW><ROW><id>6991536</id><snippet>strptime</snippet></ROW><ROW><id>6991536</id><snippet>%z</snippet></ROW><ROW><id>6991536</id><snippet>datetime</snippet></ROW><ROW><id>6991536</id><snippet>datetime</snippet></ROW><ROW><id>6991536</id><snippet>UTC</snippet></ROW><ROW><id>6991536</id><snippet>UTC</snippet></ROW><ROW><id>6991559</id><snippet>os.path.dirname(file)</snippet></ROW><ROW><id>6991559</id><snippet>os.path.split(file)</snippet></ROW><ROW><id>6991918</id><snippet>from django.template.defaultfilters import date as _date
from datetime import datetime

_date(datetime.now(), "d b, D")
</snippet></ROW><ROW><id>6992281</id><snippet>cPickle</snippet></ROW><ROW><id>6992281</id><snippet>cPickle</snippet></ROW><ROW><id>6992281</id><snippet>marshal</snippet></ROW><ROW><id>6992632</id><snippet>models.PositiveSmallIntegerField(default=0)
</snippet></ROW><ROW><id>6992774</id><snippet>multiwordReplace</snippet></ROW><ROW><id>6992774</id><snippet>mmap</snippet></ROW><ROW><id>6992774</id><snippet>import os
import os.path
import re
from mmap import mmap
from contextlib import closing


id_filename = 'path/to/id/file'
directory_name = 'directory/to/replace/in'

# read the ids into a dictionary mapping old to new
with open(id_filename) as id_file:
    ids = dict(line.split()[1:] for line in id_file)    

# compile a regex to do the replacement
id_regex = re.compile('|'.join(map(re.escape, ids)))

def translate(match):
    return ids[match.group(0)]

def multiwordReplace(text):
    return id_regex.sub(translate, text)

for code_filename in os.listdir(directory_name):
    with open(os.path.join(directory, code_filename), 'r+') as code_file:
        with closing(mmap(code_file.fileno(), 0)) as code_map:
            new_file = multiword_replace(code_map)
    with open(os.path.join(directory, code_filename), 'w') as code_file:
        code_file.write(new_file)
</snippet></ROW><ROW><id>6992787</id><snippet>AdminSite.root</snippet></ROW><ROW><id>6993039</id><snippet>\x</snippet></ROW><ROW><id>6993039</id><snippet>repr()</snippet></ROW><ROW><id>6993039</id><snippet>u'</snippet></ROW><ROW><id>6993039</id><snippet>print repr(u'a\u00e4').replace('\\x','\\u00')
</snippet></ROW><ROW><id>6993209</id><snippet>init&lt;modulename&gt;()</snippet></ROW><ROW><id>6993209</id><snippet>main()</snippet></ROW><ROW><id>6993209</id><snippet>--embed</snippet></ROW><ROW><id>6993412</id><snippet>from_param()</snippet></ROW><ROW><id>6993412</id><snippet>classmethod</snippet></ROW><ROW><id>6993412</id><snippet>class Type1:
   @classmethod
   def from_param(cls, obj):
       if obj is None:
           return c_void_p()
       else:
           return obj.c_ptr
</snippet></ROW><ROW><id>6993624</id><snippet>mcid = raw_input("MC ID (CTRL-D = done, 0 = sets, ? = lookup): ")
</snippet></ROW><ROW><id>6993744</id><snippet>.exe</snippet></ROW><ROW><id>6993744</id><snippet>cmd.exe</snippet></ROW><ROW><id>6993744</id><snippet>cd</snippet></ROW><ROW><id>6993744</id><snippet>.exe</snippet></ROW><ROW><id>6993744</id><snippet>.exe</snippet></ROW><ROW><id>6993744</id><snippet>py2exe</snippet></ROW><ROW><id>6993744</id><snippet>setup()</snippet></ROW><ROW><id>6993744</id><snippet>console</snippet></ROW><ROW><id>6993744</id><snippet>setup(console=['hello.py'])
</snippet></ROW><ROW><id>6993876</id><snippet>def suite():
    """
        Gather all the tests from this module in a test suite.
    """
    test_suite = unittest.TestSuite()
    test_suite.addTest(unittest.makeSuite(UserServiceTest))
    return test_suite

if __name__ == "__main__":
    #So you can run tests from this module individually.
    unittest.main()   
</snippet></ROW><ROW><id>6993876</id><snippet>def suite():
"""
    Gather all the tests from this package in a test suite.
"""
    test_suite = unittest.TestSuite()
    test_suite.addTest(file_tests_main.suite())
    test_suite.addTest(userservice_test.suite())
    return test_suite


if __name__ == "__main__":
    #So you can run tests from this package individually.
    TEST_RUNNER = unittest.TextTestRunner()
    TEST_SUITE = suite()
    TEST_RUNNER.run(TEST_SUITE)
</snippet></ROW><ROW><id>6993876</id><snippet>unittest</snippet></ROW><ROW><id>6993876</id><snippet>import unittest
import suiteFilter
import Invoice


def suite()
    test_suite = unittest.TestSuite()
    test_suite.addTest(suiteFilter.suite())
    test_suite.addTest(unittest.makeSuite(Invoice))


if __name__ == "__main__":
    result = unittest.TextTestRunner(verbosity=2).run(suite())
    sys.exit(not result.wasSuccessful())
</snippet></ROW><ROW><id>6994217</id><snippet>a</snippet></ROW><ROW><id>6994217</id><snippet>class Foo(object):
    @classmethod
    def a(cls):
        Foo.b() # gives: this is foo
        Bar.b() # gives: this is bar
        cls.b() # gives: this is bar
    @staticmethod
    def b():
        print("this is foo")

class Bar(Foo):
    @staticmethod
    def b():
        print("this is bar")

Bar.a()
</snippet></ROW><ROW><id>6994217</id><snippet>staticmethod</snippet></ROW><ROW><id>6994217</id><snippet>classmethod</snippet></ROW><ROW><id>6995162</id><snippet>d</snippet></ROW><ROW><id>6995162</id><snippet>None</snippet></ROW><ROW><id>6995162</id><snippet>""</snippet></ROW><ROW><id>6995162</id><snippet>if d: #do somethign</snippet></ROW><ROW><id>6996351</id><snippet>dereference = True</snippet></ROW><ROW><id>6996351</id><snippet>tarfile</snippet></ROW><ROW><id>6996351</id><snippet>dereference = True</snippet></ROW><ROW><id>6996351</id><snippet>dereference = True</snippet></ROW><ROW><id>6996351</id><snippet>dereference</snippet></ROW><ROW><id>6996351</id><snippet>import tarfile
tf = tarfile.TarFile('test.tar.gz', mode='w')
tf.dereference = True
</snippet></ROW><ROW><id>6996590</id><snippet>self</snippet></ROW><ROW><id>6996590</id><snippet>car = Car().add_engine().add_wheels()
</snippet></ROW><ROW><id>6996590</id><snippet>list.sort</snippet></ROW><ROW><id>6996590</id><snippet>sorted</snippet></ROW><ROW><id>6996628</id><snippet>os.remove()</snippet></ROW><ROW><id>6996628</id><snippet>os.rmdir()</snippet></ROW><ROW><id>6996628</id><snippet>shutil.rmtree()</snippet></ROW><ROW><id>6996683</id><snippet>def index():
    listings = db().select(db.listing.ALL, orderby=db.listing.first_name)
    return dict(listings=listings, livesearch=livesearch())
</snippet></ROW><ROW><id>6996683</id><snippet>livesearch</snippet></ROW><ROW><id>6996683</id><snippet>index</snippet></ROW><ROW><id>6996683</id><snippet>livesearch</snippet></ROW><ROW><id>6996683</id><snippet>index</snippet></ROW><ROW><id>6996683</id><snippet>def livesearch():
    partialstr = request.vars.values()[0]
</snippet></ROW><ROW><id>6996683</id><snippet>partialstr = request.vars.partialstr if request.vars else None
</snippet></ROW><ROW><id>6996683</id><snippet>None</snippet></ROW><ROW><id>6996683</id><snippet>request.vars</snippet></ROW><ROW><id>6996683</id><snippet>request.vars.partialstr</snippet></ROW><ROW><id>6996683</id><snippet>request.vars</snippet></ROW><ROW><id>6996683</id><snippet>None</snippet></ROW><ROW><id>6996683</id><snippet>if request.vars:
</snippet></ROW><ROW><id>6996701</id><snippet>def Search(query):
    results = docscores[query]
    # I believe results is now a dictionary in the form {&lt;integer&gt;: &lt;integer&gt;}
    return dict((str(key), value) for key, value in results.items())
</snippet></ROW><ROW><id>6996785</id><snippet>import logging

from google.appengine.ext import webapp
from google.appengine.ext.webapp import util

def error_handler_middleware(app):
    """Wraps the application to catch uncaught exceptions."""
    def wsgi_app(environ, start_response):
        try:
            return app(environ, start_response)
        except Exception, e:
            logging.exception(e)
            # ... display a custom error message ...
            response = webapp.Response()
            response.set_status(500)
            response.out.write('Ooops! An error occurred...')
            response.wsgi_write(start_response)
            return ['']

    return wsgi_app

app = webapp.WSGIApplication([...])
app = error_handler_middleware(app)

def main():
    util.run_wsgi_app(app)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6997277</id><snippet>os.system</snippet></ROW><ROW><id>6997277</id><snippet>python</snippet></ROW><ROW><id>6997277</id><snippet>Traceback (most recent call last):
  File "bb-freeze-script.py", line 8, in &lt;module&gt;
    load_entry_point('bbfreeze==0.97.3', 'console_scripts', 'bb-freeze')()
</snippet></ROW><ROW><id>6997277</id><snippet>File "C:\Python27\lib\site-packages\bbfreeze-0.97.3-py2.7-win32.egg\bbfreeze\__init__.py", line 24, in main
    f.addScript(x)
File "C:\Python27\lib\site-packages\bbfreeze-0.97.3-py2.7-win32.egg\bbfreeze\freezer.py", line 410, in addScript
    s = self.mf.run_script(path)
File "C:\Python27\lib\site-packages\bbfreeze-0.97.3-py2.7-win32.egg\bbfreeze\modulegraph\modulegraph.py", line 241, in run_script
    co = compile(file(pathname, READ_MODE).read()+'\n', pathname, 'exec')
</snippet></ROW><ROW><id>6997277</id><snippet>File "C:\dtmp\main.py", line 14
IndentationError: expected an indented block
</snippet></ROW><ROW><id>6997277</id><snippet>main.py</snippet></ROW><ROW><id>6997311</id><snippet>__getitem__()</snippet></ROW><ROW><id>6997311</id><snippet>x[:, ::-1]</snippet></ROW><ROW><id>6997311</id><snippet>x.__getitem__((slice(None), slice(None, None, -1)))</snippet></ROW><ROW><id>6997311</id><snippet>__getitem__()</snippet></ROW><ROW><id>6997311</id><snippet>Py_DECREF()</snippet></ROW><ROW><id>6997311</id><snippet>Py_XDECREF()</snippet></ROW><ROW><id>6997348</id><snippet>attaque1()</snippet></ROW><ROW><id>6997348</id><snippet>attaque2()</snippet></ROW><ROW><id>6997348</id><snippet>calcInitiative()</snippet></ROW><ROW><id>6997348</id><snippet>while</snippet></ROW><ROW><id>6997348</id><snippet>((pv1 &lt;= 0) or (pv2 &lt;= 0))</snippet></ROW><ROW><id>6997348</id><snippet>pv1 = random.randint(1,10)
pv1 = (pv1) # this line does nothing
pv2 = random.randint(1,10)
pv2 = str(pv2)
</snippet></ROW><ROW><id>6997348</id><snippet>&lt;= 0</snippet></ROW><ROW><id>6997348</id><snippet>calcInitiative()</snippet></ROW><ROW><id>6997348</id><snippet>global</snippet></ROW><ROW><id>6997477</id><snippet>app_userprofile</snippet></ROW><ROW><id>6997477</id><snippet>user.get_profile()</snippet></ROW><ROW><id>6997477</id><snippet>ModelForm</snippet></ROW><ROW><id>6997783</id><snippet>def parser(reader_o):
    for line in reader_o:
        if line.rstrip().endswith('halloween'):
            yield line

with open("file_1.txt", "r") as file_input:
    with open("file_2.txt", "w") as file_output:
        file_output.writelines(parser(file_input))
</snippet></ROW><ROW><id>6997783</id><snippet>with open("file_1.txt", "r") as file_input:
    with open("file_2.txt", "w") as file_output:
        file_output.writelines(line for line in file_input if line.rstrip().endswith('halloween'))
</snippet></ROW><ROW><id>6997783</id><snippet>with</snippet></ROW><ROW><id>6997783</id><snippet>with open("file_1.txt", "r") as file_input, open("file_2.txt", "w") as file_output:
</snippet></ROW><ROW><id>6997783</id><snippet>readlines()</snippet></ROW><ROW><id>6997783</id><snippet>return</snippet></ROW><ROW><id>6997783</id><snippet>yield</snippet></ROW><ROW><id>6998607</id><snippet>import time

time.time()
</snippet></ROW><ROW><id>6998661</id><snippet>_</snippet></ROW><ROW><id>6998661</id><snippet>level, _ = Level.objects.get_or_create(…)
</snippet></ROW><ROW><id>6998661</id><snippet>_</snippet></ROW><ROW><id>6998715</id><snippet>$ mkfifo /tmp/my_fifo
$ cat producer.py
f = open("/tmp/my_fifo", "w")
f.write("hello, world!\n")
f.close()
</snippet></ROW><ROW><id>6998715</id><snippet>cat /tmp/my_fifo</snippet></ROW><ROW><id>6998715</id><snippet>$ cat producer.py
f = open("/tmp/my_log", "a")
f.write("hello, world!\n")
f.close()
</snippet></ROW><ROW><id>6998715</id><snippet>tail -f /tmp/my_log</snippet></ROW><ROW><id>6999066</id><snippet>print r.content</snippet></ROW><ROW><id>6999067</id><snippet>from subprocess import Popen, PIPE

p = Popen(['external-program', 'arg1', 'arg2'], 
                stdin=PIPE, stdout=PIPE, stderr=PIPE)
</snippet></ROW><ROW><id>6999067</id><snippet>from subprocess import Popen, PIPE

p = Popen('external-program arg1 arg2 | external2'], shell=True)
</snippet></ROW><ROW><id>6999085</id><snippet>attribute</snippet></ROW><ROW><id>6999085</id><snippet>?</snippet></ROW><ROW><id>6999085</id><snippet>''</snippet></ROW><ROW><id>6999085</id><snippet>cmd = "SELECT * from comic_collection WHERE %s LIKE ?" % attribute
curs.execute(cmd, val)
</snippet></ROW><ROW><id>6999085</id><snippet>assert attribute in ('series', 'publisher', 'issue', 'tags')
</snippet></ROW><ROW><id>6999101</id><snippet>class MyModel(models.Model):

    my_nullable_string = models.CharField(max_length=15, null=True, blank=True)

    def save(self, *args, **kwargs):
         if not self.my_nullable_string:
              self.my_nullable_string = None
         super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>6999797</id><snippet>var</snippet></ROW><ROW><id>6999797</id><snippet>mod</snippet></ROW><ROW><id>6999797</id><snippet>var</snippet></ROW><ROW><id>6999797</id><snippet>func()</snippet></ROW><ROW><id>6999843</id><snippet>for i, t in enumerate(test):
    t.order = i
</snippet></ROW><ROW><id>6999909</id><snippet>print u'\xd3'
</snippet></ROW><ROW><id>6999909</id><snippet>u</snippet></ROW><ROW><id>6999909</id><snippet>codepoints = '\xd3\xd3'
print codepoints.decode("latin-1")
</snippet></ROW><ROW><id>6999909</id><snippet>print</snippet></ROW><ROW><id>6999909</id><snippet>print</snippet></ROW><ROW><id>6999909</id><snippet>encode(sys.stdout.encoding)</snippet></ROW><ROW><id>6999984</id><snippet>join -v 1 -i -t, -1 1 -2 1 -o 1.2 1.3 1.4 1.5  &lt;(awk -F, '{print $1":"$3","$0}' f1.txt | sort) &lt;(awk -F, '{print $1":"$3","$0}' f2.txt | sort)
</snippet></ROW><ROW><id>6999984</id><snippet>awk -F, '{print $1":"$3","$0}' f1.txt
awk -F, '{print $1":"$3","$0}' f2.txt
</snippet></ROW><ROW><id>6999984</id><snippet>awk -F, '{print $1":"$3","$0}' f1.txt | sort 
awk -F, '{print $1":"$3","$0}' f2.txt | sort 
</snippet></ROW><ROW><id>6999984</id><snippet>join</snippet></ROW><ROW><id>6999984</id><snippet>"1233",  "jake", "jake@mailinator.com", "USA"
"5678", "natalia", "natalia@mailinator.com", "USA"
</snippet></ROW><ROW><id>7000021</id><snippet>&gt;&gt;&gt; class Point:
...     def __init__(self, t):
...         (self.x,self.y,self.z,self.w,self.s) = t
... 
&gt;&gt;&gt; p = Point( (3,4,5,3,1) )
&gt;&gt;&gt; p.w
3
</snippet></ROW><ROW><id>7000021</id><snippet>myPoints[3].x
</snippet></ROW><ROW><id>7000021</id><snippet>points</snippet></ROW><ROW><id>7000021</id><snippet>(p0x,p0y,p0z,p0w,p0s) = points[0]
(p1x,p1y,p1z,p1w,p1s) = points[1]
(p2x,p2y,p2z,p2w,p2s) = points[2]
...
</snippet></ROW><ROW><id>7000021</id><snippet>myPoints[i].y = 12
</snippet></ROW><ROW><id>7000036</id><snippet>$ ./manage.py shell

&gt;&gt;&gt; from django import template
&gt;&gt;&gt; t = template.Template("""{% for f in friendslist %}
...                         {% if forloop.first %}
...                             First of the loop                            
...                         {% endif %}
...                         {{ f }}
...                         {% if forloop.last %}
...                             Last of the loop
...                         {% endif %}
...                 {% endfor %}""")

&gt;&gt;&gt; c = template.Context({'freindslist' : ['one element',]})
&gt;&gt;&gt; t.render(c)


                        First of the loop

                    one element

                         Last of the loop
</snippet></ROW><ROW><id>7000044</id><snippet>visited = set() # use set for faster lookups
with open(out_filename, "w") as outfile:
    with open(in_filename, "r") as infile:
        for line in infile:
            x = line.split()
            k = (tuple(sorted(x[:2])), tuple(x[2:]))
            if k not in visited:
                outfile.write(line)
                visited.add(k)
</snippet></ROW><ROW><id>7000044</id><snippet>visited</snippet></ROW><ROW><id>7000044</id><snippet>sort -u yourfile</snippet></ROW><ROW><id>7000044</id><snippet>set()</snippet></ROW><ROW><id>7000044</id><snippet>hash()</snippet></ROW><ROW><id>7000179</id><snippet>C# &lt;- IronPython &lt;- C#</snippet></ROW><ROW><id>7000253</id><snippet>&gt;&gt;&gt; augmented_books = Book.objects.extra(select={'price': 2))
&gt;&gt;&gt; augmented_books[0].price
2
&gt;&gt;&gt; augmented_books_rev = augmented_books.reverse()
&gt;&gt;&gt; augmented_books_rev[0].price
2
</snippet></ROW><ROW><id>7000253</id><snippet>select</snippet></ROW><ROW><id>7000253</id><snippet>[XXX]</snippet></ROW><ROW><id>7000253</id><snippet>SELECT ..., [XXX] as price, ... FROM ... WHERE ... (etc)
</snippet></ROW><ROW><id>7000324</id><snippet>$ man python
$ which python
/usr/bin/python
$ python -V
Python 2.7.1
#
# temporarily change version
#
$ export VERSIONER_PYTHON_VERSION=2.6
$ python -V
Python 2.6.6
$ unset VERSIONER_PYTHON_VERSION
$ python -V
Python 2.7.1
#
# persistently change version
#
$ defaults write com.apple.versioner.python Version 2.6
$ python -V
Python 2.6.6
</snippet></ROW><ROW><id>7000376</id><snippet>&gt;&gt;&gt; CoverageACol = [[0, 1, 2, 3, 4],
                    [5, 6, 7, 8, 9]]

&gt;&gt;&gt; CoverageACol[0][0] = "hello"

&gt;&gt;&gt; CoverageACol
    [['hello', 1, 2, 3, 4], 
     [5, 6, 7, 8, 9]]
</snippet></ROW><ROW><id>7000376</id><snippet>&gt;&gt;&gt; from numpy import *

&gt;&gt;&gt; CoverageACol = arange(10).reshape(2,5)

&gt;&gt;&gt; CoverageACol
    array([[0, 1, 2, 3, 4],
           [5, 6, 7, 8, 9]])

&gt;&gt;&gt; CoverageACol[0,0] = "Hello" 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)

/home/biogeek/&lt;ipython console&gt; in &lt;module&gt;()

ValueError: setting an array element with a sequence.
</snippet></ROW><ROW><id>7000376</id><snippet>&gt;&gt;&gt; CoverageACol = array(range(10), dtype=str).reshape(2,5)

&gt;&gt;&gt; CoverageACol
    array([['0', '1', '2', '3', '4'],
           ['5', '6', '7', '8', '9']], 
           dtype='|S1')

&gt;&gt;&gt; CoverageACol[0,0] = "Hello"

&gt;&gt;&gt; CoverageACol
    array([['H', '1', '2', '3', '4'],
         ['5', '6', '7', '8', '9']], 
         dtype='|S1')
</snippet></ROW><ROW><id>7000376</id><snippet>Hello</snippet></ROW><ROW><id>7000376</id><snippet>&gt;&gt;&gt; CoverageACol = array(range(10), dtype='a5').reshape(2,5)

&gt;&gt;&gt; CoverageACol: 
    array([['0', '1', '2', '3', '4'],
           ['5', '6', '7', '8', '9']], 
           dtype='|S5')

&gt;&gt;&gt; CoverageACol[0,0] = "Hello"

&gt;&gt;&gt; CoverageACol
    array([['Hello', '1', '2', '3', '4'],
           ['5', '6', '7', '8', '9']], 
           dtype='|S5')
</snippet></ROW><ROW><id>7000381</id><snippet>extent=[horizontal_min,horizontal_max,vertical_min,vertical_max]</snippet></ROW><ROW><id>7000381</id><snippet>extent=[longitude_top_left,longitude_top_right,latitude_bottom_left,latitude_top_left]</snippet></ROW><ROW><id>7000381</id><snippet>origin='lower'</snippet></ROW><ROW><id>7000784</id><snippet>from http.client import HTTPSConnection
from base64 import b64encode
#This sets up the https connection
c = HTTPSConnection("www.google.com")
#we need to base 64 encode it 
#and then decode it to acsii as python 3 stores it as a byte string
userAndPass = b64encode(b"username:password").decode("ascii")
headers = { 'Authorization' : 'Basic %s' %  userAndPass }
#then connect
c.request('GET', '/', headers=headers)
#get the response back
res = c.getresponse()
# at this point you could check the status etc
# this gets the page text
data = res.read()  
</snippet></ROW><ROW><id>7000827</id><snippet>\r\n</snippet></ROW><ROW><id>7000827</id><snippet>sdata</snippet></ROW><ROW><id>7000827</id><snippet>\n</snippet></ROW><ROW><id>7000827</id><snippet>&gt;&gt;&gt; x = """a
b
c"""
&gt;&gt;&gt; x
'a\\nb\\nc\\n'
</snippet></ROW><ROW><id>7000827</id><snippet>&gt;&gt;&gt; x = "a\r\nb\r\nc\r\n"
&gt;&gt;&gt; x
'a\\r\\nb\\r\\nc\\r\\n'
</snippet></ROW><ROW><id>7000827</id><snippet>\r\n</snippet></ROW><ROW><id>7000827</id><snippet>\n</snippet></ROW><ROW><id>7000827</id><snippet>sdata = "GET http://google.co.ug/ HTTP/1.1\r\n"
sdata += "Host: google.co.ug\r\n"
sdata += "User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:6.0) Gecko/20100101 Firefox/6.0\r\n"
sdata += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
sdata += "Accept-Language: en-us,en;q=0.5\r\n"
sdata += "Accept-Encoding: gzip, deflate\r\n"
sdata += "Proxy-Connection: keep-alive\r\n"
sdata += "\r\n"
</snippet></ROW><ROW><id>7000978</id><snippet>imfill</snippet></ROW><ROW><id>7000978</id><snippet>import numpy as np
import scipy.ndimage.morphology as morphology

bw = np.array([[0, 0, 0, 0, 0, 0, 0, 0],
               [0, 1, 1, 1, 1, 1, 0, 0],
               [0, 1, 0, 0, 0, 1, 0, 0],
               [0, 1, 0, 0, 0, 1, 0, 0],
               [0, 1, 0, 0, 0, 1, 0, 0],
               [0, 1, 1, 1, 1, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0]])

print(morphology.binary_fill_holes(bw).astype('int'))
</snippet></ROW><ROW><id>7000978</id><snippet>[[0 0 0 0 0 0 0 0]
 [0 1 1 1 1 1 0 0]
 [0 1 1 1 1 1 0 0]
 [0 1 1 1 1 1 0 0]
 [0 1 1 1 1 1 0 0]
 [0 1 1 1 1 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
</snippet></ROW><ROW><id>7000997</id><snippet>def encrypted(text):
    scores = defaultdict(lambda: 0)
    for letter in text: scores[letter] += 1
    largest = max(scores.values())
    average = len(text) / 256.0
    return largest &lt; average + 5 * sqrt(average)
</snippet></ROW><ROW><id>7001255</id><snippet>self</snippet></ROW><ROW><id>7001255</id><snippet>ast</snippet></ROW><ROW><id>7001255</id><snippet>#-*- coding: iso8859_1 -*-
import random
ast = "*" * 7

class Player(object):
    def __init__(self, num, ca):
        self.ca = ca
        self.num = num
        self.pv = random.randint(1,10)
        self.d20 = random.randint(1,20)
        self.d8 = random.randint(1,8)
        self.pvDep= self.pv

class Combat(object):
    def __init__(self, player1, player2):
        self.player1 = player1
        self.player2 = player2
        self.cnt = 0

    def intro(self):
        print "Imaginez deux guerriers de D&amp;D 2e édition qui se battent."
        print
        print "Guerrier 1: " + str(player1.pv) + " PV, épée longue (1-8 points de dégât), TACO de 20, CA de " + str(player1.ca) + "."
        print "Guerrier 2: " + str(player2.pv) + " PV, épée longue (1-8 points de dégât), TACO de 20, CA de " + str(player2.ca) + "."
        print

    def nouveauCombat(self):
        print ast + "NOUVEAU COMBAT" + ast
        print
        while ((self.player1.pv &gt; 0) and (self.player2.pv &gt; 0)):
            self.cnt = self.cnt + 1
            print ast + "ROUND " + str(self.cnt) + ": INITIATIVE" + ast
            print
            self.calcInitiative()
            print
        print ast + "RESULTAT" + ast
        print
        self.resultat()

    def calcInitiative(self):
        initiative1 = random.randint(1,10)
        initiative2 = random.randint(1,10)
        print "Le guerrier 1 fait son jet d'initiative."
        print str(initiative1) + "!"
        print
        print "Le guerrier 2 fait son jet d'initiative."
        print str(initiative2) + "!"
        print
        if initiative1 == initiative2:
            print "Les deux guerriers attaquent au même moment."
            print
            print ast + "ROUND " + str(self.cnt) + ": ATTAQUE" + ast
            print
            self.attaque(self.player1, self.player2)
            print
            self.attaque(self.player2, self.player1)
        elif initiative1 &lt; initiative2:
            print "Le guerrier 1 attaque en premier."
            print
            print ast + "ROUND " + str(self.cnt) + ": ATTAQUE" + ast
            print
            self.attaque(self.player1, self.player2)
            print
            if self.player2.pv &gt; 0:
                print
                self.attaque(self.player2, self.player1)
        else:
            print "Le guerrier 2 attaque en premier."
            print
            print ast + "ROUND " + str(self.cnt) + ": ATTAQUE" + ast
            print
            self.attaque(self.player2, self.player1)
            print
            if self.player1.pv &gt; 0:
                print
                self.attaque(self.player1, self.player2)

    def attaque(self, player1, player2):
        print "Le guerrier" + str(player1.num) + " fait son jet de toucher."
        print str(player1.d20) + "!"
        if player1.d20 &gt;= player2.ca:
            print "Touché!"
            player2.pv = player2.pv - player1.d8
            print str(player1.d8) + " points de dégât!"
            print "Le guerrier 2 est à " + str(player2.pv) + "/" + str(player2.pvDep) + " PV!"
        else:
            print "Raté!"

    def resultat(self):
        print "Le combat prend fin au round " + str(self.cnt) + "."
        print

        if player1.pv == player1.pvDep:
            print "Le guerrier 1 n'a pas la moindre égratignure."
        elif player1.pv &gt; 0:
            print "Le guerrier 1 est blessé."
        else:
            print "Le guerrier 1 est mort."

        print "Il finit le combat avec " + str(player1.pv) + "/" +str (player1.pvDep) + " PV."
        print

        if player2.pv == player2.pvDep:
            print "Le guerrier 2 n'a pas la moindre égratignure."
        elif player2.pv &gt; 0:
            print "Le guerrier 2 est blessé."
        else:
            print "Le guerrier 2 est mort."

        print "Il finit le combat avec " + str(player2.pv) + "/" +str (player2.pvDep) + " PV."
        print


player1 = Player(1, 10)
player2 = Player(2, 10)
combat = Combat(player1, player2)
combat.intro()
combat.nouveauCombat()
</snippet></ROW><ROW><id>7001319</id><snippet>import re
_s_pat = r'([A-Z]{1,2})(\d{1,3})-([A-Z]{1,2})(\d{1,3})'
_pat = re.compile(_s_pat)

_valid_n_len = set([(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)])
def check_match(s):
    m = _pat.search(s)
    try:
        a0, n0, a1, n1 = m.groups()
        if len(a0) != len(a1):
            return False
        if not (len(n0), len(n1)) in _valid_n_len:
            return False
        return True
    except (AttributeError, TypeError, ValueError):
        return False
</snippet></ROW><ROW><id>7001319</id><snippet>re.compile()</snippet></ROW><ROW><id>7001319</id><snippet>set</snippet></ROW><ROW><id>7001319</id><snippet>(1,2)</snippet></ROW><ROW><id>7001319</id><snippet>tuple</snippet></ROW><ROW><id>7001319</id><snippet>check_match()</snippet></ROW><ROW><id>7001319</id><snippet>m</snippet></ROW><ROW><id>7001319</id><snippet>m</snippet></ROW><ROW><id>7001319</id><snippet>None</snippet></ROW><ROW><id>7001319</id><snippet>None</snippet></ROW><ROW><id>7001319</id><snippet>try</snippet></ROW><ROW><id>7001319</id><snippet>except</snippet></ROW><ROW><id>7001319</id><snippet>None</snippet></ROW><ROW><id>7001319</id><snippet>try</snippet></ROW><ROW><id>7001319</id><snippet>except</snippet></ROW><ROW><id>7001319</id><snippet>check_match()</snippet></ROW><ROW><id>7001319</id><snippet>tuple</snippet></ROW><ROW><id>7001319</id><snippet>tuple</snippet></ROW><ROW><id>7001319</id><snippet>set</snippet></ROW><ROW><id>7001319</id><snippet>tuple</snippet></ROW><ROW><id>7001319</id><snippet>import re
# match alpha: 1 or 2 capital letters
_s_pat_a = r'[A-Z]{1,2}'
# match number: 1-3 digits
_s_pat_n = r'\d{1,3}'

# pattern: four match groups: alpha, number, alpha, number
_s_pat = '(%s)(%s)-(%s)(%s)' % (_s_pat_a, _s_pat_n, _s_pat_a, _s_pat_n)
_pat = re.compile(_s_pat)

# set of valid lengths of number groups
_valid_n_len = set([(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)])

def check_match(s):
    m = _pat.search(s)
    if not m:
        return False
    a0, n0, a1, n1 = m.groups()
    if len(a0) != len(a1):
        return False
    tup = (len(n0), len(n1)) # make tuple of actual lengths
    if not tup in _valid_n_len:
        return False
    return True
</snippet></ROW><ROW><id>7001319</id><snippet>    if len(n0) &gt; len(n1):
        return False
</snippet></ROW><ROW><id>7001319</id><snippet>import re
# match alpha: 1 or 2 capital letters
pa = r'[A-Z]{1,2}'
# match number: 1-3 digits
pn = r'\d{1,3}'

# pattern: four match groups: alpha, number, alpha, number
p = '(%s)(%s)-(%s)(%s)' % (pa, pn, pa, pn)
_pat = re.compile(p)

def check_match(s):
    m = _pat.search(s)
    if not m:
        return False
    a0, n0, a1, n1 = m.groups()
    if len(a0) != len(a1):
        return False
    if len(n0) &gt; len(n1):
        return False
    return True
</snippet></ROW><ROW><id>7001511</id><snippet>popen</snippet></ROW><ROW><id>7001511</id><snippet>-i</snippet></ROW><ROW><id>7001511</id><snippet>IO.popen("python -i", "r+") do |py|
  while cmd = gets
    py.puts cmd
    puts py.gets
  end
end
</snippet></ROW><ROW><id>7001511</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>7001511</id><snippet>IO.popen("python -i", "r+") do |py|
  loop do
    fds = IO.select [py, STDIN]
    fds.each do |(fd)|
      case fd
      when nil;    next
      when STDIN;  py.puts gets
      else;        puts py.gets
      end
    end
  end
end
</snippet></ROW><ROW><id>7001667</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; def remap_keys(mapping):
...     return [{'key':k, 'value': v} for k, v in mapping.iteritems()]
... 
&gt;&gt;&gt; json.dumps(remap_keys({(1, 2): 'foo'}))
'[{"value": "foo", "key": [1, 2]}]'
</snippet></ROW><ROW><id>7001717</id><snippet>&gt;&gt;&gt; engine = sqlalchemy.create_engine("sqlite:///:memory:")
&gt;&gt;&gt; engine.execute("select ?", 5).fetchall()
[(5,)]
&gt;&gt;&gt; engine.execute("select ?", "; drop table users; --").fetchall()
[(u'; drop table users; --',)]
</snippet></ROW><ROW><id>7001736</id><snippet>%</snippet></ROW><ROW><id>7001736</id><snippet>+</snippet></ROW><ROW><id>7001736</id><snippet>s % y + z</snippet></ROW><ROW><id>7001736</id><snippet>(s % y) + z</snippet></ROW><ROW><id>7001736</id><snippet>s</snippet></ROW><ROW><id>7001736</id><snippet>s % x</snippet></ROW><ROW><id>7001736</id><snippet>(s % y) + z</snippet></ROW><ROW><id>7001736</id><snippet>s % y</snippet></ROW><ROW><id>7001736</id><snippet>z</snippet></ROW><ROW><id>7001870</id><snippet>tube=io.read(str(name))
</snippet></ROW><ROW><id>7001870</id><snippet>TYPE!='bare'
</snippet></ROW><ROW><id>7001870</id><snippet>tube.dimensions = [tube.get_cell()[0, 0] / 2, tube.get_cell()[-1,-1]]
</snippet></ROW><ROW><id>7001870</id><snippet>setattr</snippet></ROW><ROW><id>7002253</id><snippet>string.translate</snippet></ROW><ROW><id>7002253</id><snippet>S.translate(table [,deletechars]) -&gt; string
</snippet></ROW><ROW><id>7002253</id><snippet>deletechars</snippet></ROW><ROW><id>7002253</id><snippet>string1 = "100.000"
string1=string1.translate(None, ',.')
print (string1)
# 100000
</snippet></ROW><ROW><id>7002449</id><snippet>1, 2, 3</snippet></ROW><ROW><id>7002449</id><snippet>your_dict.keys()</snippet></ROW><ROW><id>7002449</id><snippet>-0.3246, -0.9185, -3985</snippet></ROW><ROW><id>7002449</id><snippet>your_dict.values()</snippet></ROW><ROW><id>7002449</id><snippet>your_dict.items()</snippet></ROW><ROW><id>7002449</id><snippet>[(key1, value1), (key2, value2), ...]</snippet></ROW><ROW><id>7002532</id><snippet>locals()</snippet></ROW><ROW><id>7002532</id><snippet>globals()</snippet></ROW><ROW><id>7002532</id><snippet>bar(**locals())
</snippet></ROW><ROW><id>7002690</id><snippet>num1,num2 = map(float, raw_input('Enter a range: ').split(','))
</snippet></ROW><ROW><id>7002690</id><snippet>partition</snippet></ROW><ROW><id>7002690</id><snippet>split</snippet></ROW><ROW><id>7002690</id><snippet>s1,_,s2 = raw_input('Enter a range: ').partition(',')
</snippet></ROW><ROW><id>7002714</id><snippet>Corrupt JPEG data: X extraneous bytes before marker 0xYY</snippet></ROW><ROW><id>7002714</id><snippet>JpegStreamer()</snippet></ROW><ROW><id>7002741</id><snippet>[reverse(page, args=args) for page, args in ITERABLE]
</snippet></ROW><ROW><id>7002741</id><snippet>[(page, args), (page1, arg1), ...]</snippet></ROW><ROW><id>7002936</id><snippet>desired_ages</snippet></ROW><ROW><id>7002936</id><snippet>result = [value for index, value in enumerate(data.values) if index in desired_ages]
</snippet></ROW><ROW><id>7002936</id><snippet>desired_ages</snippet></ROW><ROW><id>7002936</id><snippet>data.values</snippet></ROW><ROW><id>7002936</id><snippet>desired_ages = set(desired_ages)
</snippet></ROW><ROW><id>7002936</id><snippet>import numpy as np

ages = np.arange(100)
values = np.random.uniform(low=0, high= 1, size = ages.shape)
data = np.core.rec.fromarrays([ages, values], names='ages,values')
desired_ages = np.array([1,4, 16, 29, 80])

result = [value for index, value in enumerate(data.values) if index in desired_ages]
print result
</snippet></ROW><ROW><id>7002936</id><snippet>[0.45852624094611272, 0.0099713014816563694, 0.26695859251958864, 0.10143425810157047, 0.93647796171383935]
</snippet></ROW><ROW><id>7002968</id><snippet>biglist</snippet></ROW><ROW><id>7002968</id><snippet>islice</snippet></ROW><ROW><id>7002968</id><snippet>S</snippet></ROW><ROW><id>7002968</id><snippet>itr = iter(biglist)
while True:
    lists = itertools.islice(((i, i/5*2, i/5) for i in itr if 7 &lt; i/5 &lt; 69), S)
    x_smallist, y_smallist, z_smallist = zip(*lists)
    if len(x_smallist) == 0:
        break       # reached the end of biglist
    # do stuff with your small lists
</snippet></ROW><ROW><id>7003043</id><snippet>python</snippet></ROW><ROW><id>7003043</id><snippet>python3</snippet></ROW><ROW><id>7003107</id><snippet>    try:
        response = self.call_api_method()
    except APIException, e:  # or 'as e' depending on your Python version
        self.log.exception('Oh noes!')
        raise #Throw exception again so calling code knows it happened
    else:
        return response.someData
</snippet></ROW><ROW><id>7003107</id><snippet>raise</snippet></ROW><ROW><id>7003107</id><snippet>else</snippet></ROW><ROW><id>7003107</id><snippet>try ... except ... else ... finally</snippet></ROW><ROW><id>7003186</id><snippet>super()</snippet></ROW><ROW><id>7003186</id><snippet>class Child (Base) :
    def __init__ (self) :
        super(Child, self).__init__()

    def go (self) :
        self.A = self.A * 2
        super(Child, self).go()
</snippet></ROW><ROW><id>7003186</id><snippet>super()</snippet></ROW><ROW><id>7003186</id><snippet>object</snippet></ROW><ROW><id>7003186</id><snippet>class Base(object):
</snippet></ROW><ROW><id>7003356</id><snippet>&gt;&gt;&gt; hdata = """&lt;ul&gt;
... &lt;li&gt;&lt;a href="/a/long/link"&gt;Class1&lt;/a&gt;&lt;/li&gt;
... &lt;li&gt;&lt;a href="/another/link"&gt;Class2&lt;/a&gt;&lt;/li&gt;
... &lt;li&gt;&lt;img src="/image/location" border="0"&gt;Class3&lt;/a&gt;&lt;/li&gt;
... &lt;/ul&gt;"""
&gt;&gt;&gt; import re
&gt;&gt;&gt; lire = re.compile(r'&lt;li&gt;.*?&gt;(.*?)&lt;.*')
&gt;&gt;&gt; [lire.search(x).groups()[0] for x in hdata.splitlines() if lire.search(x)]
    ['Class1', 'Class2', 'Class3']
</snippet></ROW><ROW><id>7003400</id><snippet>proc = subprocess.Popen('python /path/to/my/program/myProgram.py %s %s' % (date, time),
                        stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True,  
                        env = {'PYTHONPATH': '~/:$PYTHONPATH',
                               'environment': '/path/to/environment/'})
</snippet></ROW><ROW><id>7003582</id><snippet>request.vars.partialstr</snippet></ROW><ROW><id>7003582</id><snippet>request.vars.values()[0]</snippet></ROW><ROW><id>7003582</id><snippet>None</snippet></ROW><ROW><id>7003582</id><snippet>partialstr</snippet></ROW><ROW><id>7003935</id><snippet>fourNest = [[[[[AA, BB, CC, DD]
      for DD in range(5)]
      for CC in range(4)]    
      for BB in range(3)]
      for AA in range(2)]
</snippet></ROW><ROW><id>7004565</id><snippet>logging</snippet></ROW><ROW><id>7004565</id><snippet>extra</snippet></ROW><ROW><id>7004565</id><snippet>logging.basicConfig(
    level=logging.DEBUG,
    format='%(real_func_name)20s - %(message)s',
)

...

logging.info(statement, extra={'real_func_name': func.__name__})
</snippet></ROW><ROW><id>7004565</id><snippet>extra</snippet></ROW><ROW><id>7004565</id><snippet>funcName</snippet></ROW><ROW><id>7004565</id><snippet>import logging
from functools import wraps

class CustomFormatter(logging.Formatter):
    """Custom formatter, overrides funcName with value of name_override if it exists"""
    def format(self, record):
        if hasattr(record, 'name_override'):
            record.funcName = record.name_override
        return super(CustomFormatter, self).format(record)

# setup logger and handler
logger = logging.getLogger(__file__)
handler = logging.StreamHandler()
logger.setLevel(logging.DEBUG)
handler.setLevel(logging.DEBUG)
handler.setFormatter(CustomFormatter('%(funcName)20s - %(message)s'))
logger.addHandler(handler)

def log_and_call(statement):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # set name_override to func.__name__
            logger.info(statement, extra={'name_override': func.__name__})
            return func(*args, **kwargs)
        return wrapper
    return decorator

@log_and_call("This should be logged by 'decorated_function'")
def decorated_function():
    logger.info('I ran')

decorated_function()
</snippet></ROW><ROW><id>7004565</id><snippet>% python logging_test.py
  decorated_function - This should be logged by 'decorated_function'
  decorated_function - I ran
</snippet></ROW><ROW><id>7004686</id><snippet>#!/usr/bin/env python
from multiprocessing import Process
import sslserver
import logging
if __name__ == "__main__":
    #logger = multiprocessing.log_to_stderr()
    #logger.setLevel(logging.DEBUG)

    #Fire up the server


    listenerProcess = Process(target = sslserver.startServer)
    listenerProcess.start()
    #logger.debug("Starting listener.")
    print "Starting Listener\n"
    listenerProcess.join()
    #logger.debug("Done.")
    print "Done\n";
</snippet></ROW><ROW><id>7004686</id><snippet>#!/usr/bin/env python

def startServer():
    print("Hello World")
    f= open("testfile.txt", "w")
    f.write("Hello world\n")
    f.close()
</snippet></ROW><ROW><id>7004686</id><snippet>nynex@citadel:~/temp$ ./pytest.py 
Starting Listener

Hello World
Done

nynex@citadel:~/temp$ cat testfile.txt 
Hello world
</snippet></ROW><ROW><id>7004884</id><snippet>isinstance(my_iterable, type(iter(xrange(1))))</snippet></ROW><ROW><id>7004884</id><snippet>isinstance(my_iterable, type(iter([])))</snippet></ROW><ROW><id>7005009</id><snippet>string = "Will Ferrell (Nick Halsey), Rebecca Hall (Samantha), Michael Pena (Frank Garcia)"

import re
pat = re.compile(r'([^(]+)\s*\(([^)]+)\)\s*(?:,\s*|$)')

lst = [(t[0].strip(), t[1].strip()) for t in pat.findall(string)]
</snippet></ROW><ROW><id>7005009</id><snippet>pat.findall()</snippet></ROW><ROW><id>7005009</id><snippet>string</snippet></ROW><ROW><id>7005009</id><snippet>.strip()</snippet></ROW><ROW><id>7005009</id><snippet>import re
s_pat = r'''
\s*  # any amount of white space
([^( \t]  # start match group; match one char that is not a '(' or space or tab
[^(]*  # match any number of non '(' characters
[^( \t])  # match one char that is not a '(' or space or tab; close match group
\s*  # any amount of white space
\(  # match an actual required '(' char (not in any match group)
\s*  # any amount of white space
([^) \t]  # start match group; match one char that is not a ')' or space or tab
[^)]*  # match any number of non ')' characters
[^) \t])  # match one char that is not a ')' or space or tab; close match group
\s*  # any amount of white space
\) # match an actual required ')' char (not in any match group)
\s*  # any amount of white space
(?:,|$)  # non-match group: either a comma or the end of a line
'''
pat = re.compile(s_pat, re.VERBOSE)

lst = pat.findall(string)
</snippet></ROW><ROW><id>7005009</id><snippet>string = '  Will   Ferrell  ( Nick\tHalsey ) , Rebecca Hall (Samantha), Michael\fPena (Frank Garcia)'

import re
pat = re.compile(r'([^(]+)\s*\(([^)]+)\)\s*(?:,\s*|$)')

def nws(s):
    """normalize white space.  Replaces all runs of white space by a single space."""
    return " ".join(w for w in s.split())

lst = [tuple(nws(item) for item in t) for t in pat.findall(string)]

print lst # prints: [('Will Ferrell', 'Nick Halsey'), ('Rebecca Hall', 'Samantha'), ('Michael Pena', 'Frank Garcia')]
</snippet></ROW><ROW><id>7005009</id><snippet>string</snippet></ROW><ROW><id>7005116</id><snippet>None</snippet></ROW><ROW><id>7005116</id><snippet>assert</snippet></ROW><ROW><id>7005116</id><snippet>def __init__(self):
    self._hiTemp = None

def checkHiTemp(self):
    assert self._hiTemp is not None, 'Why you no set _hiTemp before checking it?'
    return self._temp &gt; self._hiTemp
</snippet></ROW><ROW><id>7005245</id><snippet>for root, dirs, files in os.walk(file_path):
</snippet></ROW><ROW><id>7005245</id><snippet>file_path</snippet></ROW><ROW><id>7005245</id><snippet>zip</snippet></ROW><ROW><id>7005245</id><snippet>directory</snippet></ROW><ROW><id>7005245</id><snippet>os.walk</snippet></ROW><ROW><id>7005407</id><snippet>[x[i:i+k] for i in range(0,n,k)]
</snippet></ROW><ROW><id>7005557</id><snippet>session.bind = metadata.bind
</snippet></ROW><ROW><id>7005557</id><snippet>session.configure(bind=metadata.bind)
</snippet></ROW><ROW><id>7006231</id><snippet>\"</snippet></ROW><ROW><id>7006231</id><snippet>\'</snippet></ROW><ROW><id>7006231</id><snippet>'(?:\\.|[^'\\]+)*'|"(?:\\.|[^"\\]+)*"
</snippet></ROW><ROW><id>7006231</id><snippet>r"""'(?:\\.|[^'\\]+)*'|"(?:\\.|[^"\\]+)*""""
</snippet></ROW><ROW><id>7006231</id><snippet>'~\'(?:\\\\.|[^\'\\\\]+)*\'|"(?:\\\\.|[^"\\\\]+)*"~s'
</snippet></ROW><ROW><id>7006231</id><snippet>@"'(?:\\.|[^'\\]+)*'|""(?:\\.|[^""\\]+)*"""
</snippet></ROW><ROW><id>7006231</id><snippet>+</snippet></ROW><ROW><id>7006231</id><snippet>+</snippet></ROW><ROW><id>7006380</id><snippet>axis = fig.add_subplot(211, autoscale_on=False,xlim=(1,10),ylim=(0,1))
</snippet></ROW><ROW><id>7006380</id><snippet>211</snippet></ROW><ROW><id>7006380</id><snippet>add_subplot</snippet></ROW><ROW><id>7006380</id><snippet>axis = fig.add_subplot(111, autoscale_on=False,xlim=(1,10),ylim=(0,1))
</snippet></ROW><ROW><id>7006380</id><snippet>111</snippet></ROW><ROW><id>7006424</id><snippet>startupinfo = subprocess.STARTUPINFO()
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
subprocess.call('taskkill /F /IM exename.exe', startupinfo=startupinfo)
</snippet></ROW><ROW><id>7006481</id><snippet>import operator

ops = {
    '+' : operator.add,
    '-' : operator.sub,
    '*' : operator.mul,
    '/' : operator.truediv,
    '%' : operator.mod,
}

precedence = [
    set(['*', '/', '%']),
    set(['+', '-']),
]

def evaluate(expr):
    # if len == 3 then just return result of expression
    if len(expr) == 3:
        l, op, r = expr
        return ops[op](l, r)
    else:
        for op_list in precedence:
            for op in expr:
                if op in op_list:
                    # find index of first operation
                    idx = expr.index(op)-1
                    # pop off and evaluate first matching operation in expr
                    result = evaluate([expr.pop(idx) for i in range(3)])
                    # insert result back into expr
                    expr.insert(idx, result)
                    return evaluate(expr)
</snippet></ROW><ROW><id>7006583</id><snippet>sphinx-quickstart</snippet></ROW><ROW><id>7006599</id><snippet>import mimetypes
import os
import urllib2
import urlparse

def filename_from_url(url):
    return os.path.basename(urlparse.urlsplit(url)[2])

def download_file(url):
    """Create an urllib2 request and return the request plus some useful info"""
    name = filename_from_url(url)
    r = urllib2.urlopen(urllib2.Request(url))
    info = r.info()
    if 'Content-Disposition' in info:
        # If the response has Content-Disposition, we take filename from it
        name = info['Content-Disposition'].split('filename=')[1]
        if name[0] == '"' or name[0] == "'":
            name = name[1:-1]
    elif r.geturl() != url:
        # if we were redirected, take the filename from the final url
        name = filename_from_url(r.geturl())
    content_type = None
    if 'Content-Type' in info:
        content_type = info['Content-Type'].split(';')[0]
    # Try to guess missing info
    if not name and not content_type:
        name = 'unknown'
    elif not name:
        name = 'unknown' + mimetypes.guess_extension(content_type) or ''
    elif not content_type:
        content_type = mimetypes.guess_type(name)[0]
    return r, name, content_type
</snippet></ROW><ROW><id>7006599</id><snippet>req, filename, content_type = download_file('http://some.url')
</snippet></ROW><ROW><id>7006599</id><snippet>req</snippet></ROW><ROW><id>7006599</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>7006599</id><snippet>import shutil
def download_file_locally(url, dest):
    req, filename, content_type = download_file(url)        
    if dest.endswith('/'):
        dest = os.path.join(dest, filename)
    with open(dest, 'wb') as f:
        shutil.copyfileobj(req, f)
    req.close()
</snippet></ROW><ROW><id>7006710</id><snippet>keybd_event(KeyDict["alt"], 0, KEYEVENTF_KEYUP, 0)
keybd_event(KeyDict["ctrl"], 0, KEYEVENTF_KEYUP, 0)
keybd_event(KeyDict["shift"], 0, KEYEVENTF_KEYUP, 0)
</snippet></ROW><ROW><id>7006710</id><snippet>keybd_event(KeyDict["ctrl"], 0, KEYEVENTF_KEYUP, 0)
keybd_event(KeyDict["shift"], 0, KEYEVENTF_KEYUP, 0)
keybd_event(KeyDict["alt"], 0, KEYEVENTF_KEYUP, 0)
</snippet></ROW><ROW><id>7006736</id><snippet>from sympy import Symbol
a = Symbol("a")
b = Symbol("b")
c = Symbol("c")
exp = (a+b)*40-(c-a)/0.5
</snippet></ROW><ROW><id>7006736</id><snippet>sympy.solve(exp)
&gt; {a: [0.0476190476190476*c - 0.952380952380952*b],
&gt;  b: [0.05*c - 1.05*a],
&gt;  c: [20.0*b + 21.0*a]}
</snippet></ROW><ROW><id>7006736</id><snippet>exp.evalf(subs={a:6, b:5, c:2})
</snippet></ROW><ROW><id>7006873</id><snippet>next</snippet></ROW><ROW><id>7006873</id><snippet>actor = next(actor for actor in self.actors if actor.name==actorName)
</snippet></ROW><ROW><id>7006873</id><snippet>actor = next((actor for actor in self.actors if actor.name==actorName), None)
</snippet></ROW><ROW><id>7006905</id><snippet>__init__</snippet></ROW><ROW><id>7006905</id><snippet>__new__</snippet></ROW><ROW><id>7006905</id><snippet>id(self)</snippet></ROW><ROW><id>7006905</id><snippet>get_query_set</snippet></ROW><ROW><id>7006905</id><snippet>traceback.print_stack</snippet></ROW><ROW><id>7006905</id><snippet>import traceback
traceback.print_stack()
</snippet></ROW><ROW><id>7006919</id><snippet>Model.objects.filter(x=x, y__isnull = False, z=z)
</snippet></ROW><ROW><id>7006919</id><snippet>y</snippet></ROW><ROW><id>7006919</id><snippet>IS NOT NULL</snippet></ROW><ROW><id>7006919</id><snippet>if y is None:
    qs = Model.objects.filter(x=x).filter(z=z)
elif z is None:
    qs = Model.objects.filter(x=x).filter(y=y)
...
</snippet></ROW><ROW><id>7006919</id><snippet>x</snippet></ROW><ROW><id>7006919</id><snippet>y</snippet></ROW><ROW><id>7006919</id><snippet>z</snippet></ROW><ROW><id>7006919</id><snippet>your values</snippet></ROW><ROW><id>7006919</id><snippet>your_values = { 'x' : 'x value', 'y' : 'y value', 'z' : 'value'}
arguments = {}
for k, v in your_values.items():
    if v:
        arguments[k] = v

Model.objects.filter(**arguments)
</snippet></ROW><ROW><id>7008131</id><snippet>post_save</snippet></ROW><ROW><id>7008131</id><snippet>m2m_changed</snippet></ROW><ROW><id>7008131</id><snippet>@models.signals.m2m_changed(sender=MyModel.second_m2m.through)
def duplicate_other_on_this_if_empty(sender, instance, action, reverse, model, pk_set, **kwargs):
    # just before adding a possibly empty set in "second_m2m", check and populate.
    if action == 'pre_add' and not pk_set:
        instance.__was_empty = True
        pk_set.update(instance.first_m2m.values_list('pk', flat=True))

@models.signals.m2m_changed(sender=MyModel.first_m2m.through)
def duplicate_this_on_other_if_empty(sender, instance, action, reverse, model, pk_set, **kwargs):
    # Just in case the "first_m2m" signals are sent after the other
    # so the actual "population" of the "second_m2m" is wrong:
    if action == 'post_add' and not pk_set and getattr(instance, '__was_empty'):
        instance.second_m2m = list(pk_set)
        delattr(instance, '__was_empty')
</snippet></ROW><ROW><id>7008131</id><snippet>@models.signals.m2m_changed(sender=MyModel.second_m2m.through)
def duplicate_other_on_this_if_empty(sender, instance, action, reverse, model, pk_set, **kwargs):
    # just before adding a possibly empty set in "second_m2m", check and populate.
    if action == 'pre_add' and not pk_set:
        pk_set.update(instance.first_m2m.values_list('pk', flat=True))
</snippet></ROW><ROW><id>7008439</id><snippet> |  write(self, filename, arcname=None, compress_type=None)
 |      Put the bytes from filename into the archive under the name
 |      arcname.
</snippet></ROW><ROW><id>7008439</id><snippet>x.write(folder + '/' + item + '/' + f, arcname = f)
</snippet></ROW><ROW><id>7008760</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; dataset = ['1','2','3A','4']
&gt;&gt;&gt; list(itertools.combinations(dataset, 3))
[('1', '2', '3A'), ('1', '2', '4'), ('1', '3A', '4'), ('2', '3A', '4')]
</snippet></ROW><ROW><id>7008818</id><snippet>u'\x96'.encode('raw_unicode_escape').decode("cp1252")
</snippet></ROW><ROW><id>7008897</id><snippet>__</snippet></ROW><ROW><id>7008897</id><snippet>_</snippet></ROW><ROW><id>7008897</id><snippet>_</snippet></ROW><ROW><id>7009157</id><snippet>simple_call = lambda {|name| extract(some[:fairly][:hidden], name) }
result1 = simple_call.call("myname")
result2 = simple_call.call("yourname")
result3 = simple_call.call("hisname")
</snippet></ROW><ROW><id>7009157</id><snippet>another_simple_call = simple_call
</snippet></ROW><ROW><id>7009157</id><snippet>another_simple_call</snippet></ROW><ROW><id>7009592</id><snippet>@task
def reschedules():
    new_eta = redis.get(".".join([reschedules.request.task_id, "new_eta"])
    if new_eta:
         return reschedules.retry(eta=new_eta)
</snippet></ROW><ROW><id>7009853</id><snippet>d1 = dict((idx, []) for idx in range(10))
</snippet></ROW><ROW><id>7010107</id><snippet>foo = ['a', 'b', 'c']
bar = ['1', '2', '3']
with open('zut.txt', 'w') as fileout:
    for x,y in zip(foo, bar):
        fileout.write('%s\t%s\n' % (x,y)) # you missed here '\n'
</snippet></ROW><ROW><id>7010572</id><snippet>import os
from logging.handlers import RotatingFileHandler


COMPRESSION_SUPPORTED = {}

try:
   import gzip
   COMPRESSION_SUPPORTED['gz'] = gzip
except ImportError:
   pass

try:
   import zipfile
   COMPRESSION_SUPPORTED['zip'] = zipfile
except ImportError:
   pass


class NewRotatingFileHandler(RotatingFileHandler):

     def __init__(self, *args, **kws):
         compress_mode = kws.pop('compress_mode')

         try:
             self.compress_cls = COMPRESSION_SUPPORTED[compress_mode]
         except KeyError:
             raise ValueError('"%s" compression method not supported.' % compress_mode)

         super(NewRotatingFileHandler, self).__init__(self, *args, **kws)

     def doRollover(self):
         super(NewRotatingFileHandler, self).doRollover()

         # Compress the old log.
         old_log = self.baseFilename + ".1"
         with open(old_log) as log:
             with self.compress_cls.open(old_log + '.gz', 'wb') as comp_log:
                 comp_log.writelines(log)

         os.remove(old_log)
</snippet></ROW><ROW><id>7011079</id><snippet>&gt;&gt;&gt; x = '1 (2,3), 4 (5)'
&gt;&gt;&gt; gp = re.compile('\d+\s*\([\d,]+\)(?=,?)')
&gt;&gt;&gt; # digit, whitespace, (, digits or commas, ), maybe a comma
&gt;&gt;&gt; for token in gp.findall(x):
...     token = token.split("(", 1)
...     left, right = int(token[0]), map(int, token[1][:-1].split(","))
...     for elt in right:
...             print((left, elt))
...
(1, 2)
(1, 3)
(4, 5)
</snippet></ROW><ROW><id>7011079</id><snippet>print</snippet></ROW><ROW><id>7011079</id><snippet>yield</snippet></ROW><ROW><id>7011082</id><snippet>import re
data = ["Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Ubuntu/11.04 Chromium/14.0.825.0 Chrome/14.0.825.0 Safari/535.1",
"Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10gin_lib.cc",
"Mozilla/5.0 (Windows; U; Windows NT 5.1; pt-PT; rv:1.9.2.7) Gecko/20100713 Firefox/3.6.7 (.NET CLR 3.5.30729)"]
output = []
for str in data:
   output.append(re.sub(r'\d[0-9a-zA-Z._:-]+', '*', str))
print output
</snippet></ROW><ROW><id>7011082</id><snippet>['Mozilla/* (X*; Linux i*) AppleWebKit/* (KHTML, like Gecko) Ubuntu/* Chromium/* Chrome/* Safari/*', 
'Mozilla/*(iPad; U; CPU iPhone OS * like Mac OS X; en-us) AppleWebKit/* (KHTML, like Gecko) Version/* Mobile/* Safari/*',
'Mozilla/* (Windows; U; Windows NT *; pt-PT; rv:*) Gecko/* Firefox/* (.NET CLR *)']
</snippet></ROW><ROW><id>7011082</id><snippet>([0-9a-zA-Z]+[._:-])+</snippet></ROW><ROW><id>7011319</id><snippet>cursor.fetchone()[0]
</snippet></ROW><ROW><id>7011346</id><snippet>import re
credits = """Will Ferrell (Nick Halsey), Rebecca Hall (Samantha), Glenn Howerton (Gary, Brad), with
 Stephen Root and Laura Dern (Delilah, Stacy)"""

# split on commas (only if outside of parentheses), "with" or "and"
splitre = re.compile(r"\s*(?:,(?![^()]*\))|\bwith\b|\band\b)\s*")

# match the part before the parentheses (1) and what's inside the parens (2)
# (only if parentheses are present)
matchre = re.compile(r"([^(]*)(?:\(([^)]*)\))?")

# split the parts inside the parentheses on commas
splitparts = re.compile(r"\s*,\s*")

characters = splitre.split(credits)
pairs = []
for character in characters:
    if character:
        match = matchre.match(character)
        if match:
            actor = match.group(1).strip()
            if match.group(2):
                parts = splitparts.split(match.group(2))
                for part in parts:
                    pairs.append((actor, part))
            else:
                pairs.append((actor, ""))

print(pairs)
</snippet></ROW><ROW><id>7011346</id><snippet>[('Will Ferrell', 'Nick Halsey'), ('Rebecca Hall', 'Samantha'), 
 ('Glenn Howerton', 'Gary'), ('Glenn Howerton', 'Brad'), ('Stephen Root', ''), 
 ('Laura Dern', 'Delilah'), ('Laura Dern', 'Stacy')]
</snippet></ROW><ROW><id>7011628</id><snippet>from scipy.io   import loadmat, savemat</snippet></ROW><ROW><id>7011628</id><snippet>addpath(PATH_TO_BCT); savepath; 
</snippet></ROW><ROW><id>7011673</id><snippet>[a[i] for i in b]
</snippet></ROW><ROW><id>7011839</id><snippet>def poly_root(poly):
    """ Returns a root of the polynomial"""
    poly_d = poly_diff(poly)
    x = None
    x_n = float(raw_input("Enter initial guess:"))
    while x != x_n:
        x = x_n
        x_n = x - (float(poly_apply(poly, x)) / poly_apply(poly_d, x))
    return x_n
</snippet></ROW><ROW><id>7012154</id><snippet>def local_ephemeral_UTC_offset(epoch_time=None):
  u"Returns a datetime.timedelta object representing the local time offset from UTC at the moment"
  if epoch_time == None:
    epoch_time = time()
  return datetime.fromtimestamp(epoch_time) - datetime.utcfromtimestamp(epoch_time)
</snippet></ROW><ROW><id>7012257</id><snippet>&gt;&gt;&gt; import bert
&gt;&gt;&gt; bert.decode(bert.encode([u"x", "x"]))
[u'x', 'x']
&gt;&gt;&gt; bert.decode(bert.encode({"x":[u"x", "x"]}))
{'x': [u'x', 'x']}
</snippet></ROW><ROW><id>7012589</id><snippet>pthread_cond_wait</snippet></ROW><ROW><id>7012589</id><snippet>PyThread_acquire_lock</snippet></ROW><ROW><id>7012589</id><snippet>threading.Condition.wait</snippet></ROW><ROW><id>7012596</id><snippet>myFunc(**yourdict)</snippet></ROW><ROW><id>7012596</id><snippet>return yourdict</snippet></ROW><ROW><id>7012788</id><snippet>assignment_stmt ::=  (target_list "=")+ (expression_list | yield_expression)
</snippet></ROW><ROW><id>7012788</id><snippet>+</snippet></ROW><ROW><id>7012788</id><snippet>(target_list "=")+</snippet></ROW><ROW><id>7012788</id><snippet>a = b = c = 2</snippet></ROW><ROW><id>7012788</id><snippet>&gt;&gt;&gt; (a,b) = c = (1,2)
&gt;&gt;&gt; (a, b, c)
(1, 2, (1, 2))
</snippet></ROW><ROW><id>7012866</id><snippet>None</snippet></ROW><ROW><id>7012866</id><snippet>TypeError: argument of type 'NoneType' is not iterable</snippet></ROW><ROW><id>7012866</id><snippet>import os.path

copy_these = ['a.txt', 'b.txt', 'c.txt']

def ignore_most(folder, files):

    ignore_list = []
    for file in files:
       full_path = os.path.join(folder, file)
       if not os.path.isdir(full_path):
           if file not in copy_these:
               ignore_list.append(file)
    return ignore_list
</snippet></ROW><ROW><id>7013146</id><snippet>line.split(':',4)[4].split()[0]
</snippet></ROW><ROW><id>7013146</id><snippet>&gt;&gt;&gt; line='080821_HWI-EAS301_0002_30ALBAAXX:1:8:1649:2027 ...'
&gt;&gt;&gt; line.split(':',4)
['080821_HWI-EAS301_0002_30ALBAAXX', '1', '8', '1649', '2027 ...']
</snippet></ROW><ROW><id>7013146</id><snippet>&gt;&gt;&gt; line.split(':',4)[4]
'2027 ...'
</snippet></ROW><ROW><id>7013146</id><snippet>&gt;&gt;&gt; line.split(':')[4].split()[0]
'2027'
</snippet></ROW><ROW><id>7013414</id><snippet>print sys.stdout.encoding</snippet></ROW><ROW><id>7013414</id><snippet>$ python -c 'import sys; print sys.stdout.encoding;'
UTF8
$ python -c 'import sys; print sys.stdout.encoding;' | cat
None
</snippet></ROW><ROW><id>7013577</id><snippet>[-.\d]</snippet></ROW><ROW><id>7013577</id><snippet>[]</snippet></ROW><ROW><id>7013577</id><snippet>-</snippet></ROW><ROW><id>7013577</id><snippet>.</snippet></ROW><ROW><id>7013577</id><snippet>\d</snippet></ROW><ROW><id>7013577</id><snippet>group()</snippet></ROW><ROW><id>7013577</id><snippet>Match</snippet></ROW><ROW><id>7013577</id><snippet>re</snippet></ROW><ROW><id>7013935</id><snippet>[j for i in [[1,2],[3,4]] for j in i]
</snippet></ROW><ROW><id>7013935</id><snippet>i</snippet></ROW><ROW><id>7013935</id><snippet>i</snippet></ROW><ROW><id>7013935</id><snippet>[1,2]</snippet></ROW><ROW><id>7013935</id><snippet>[3,4]</snippet></ROW><ROW><id>7013935</id><snippet>j</snippet></ROW><ROW><id>7013935</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>7013965</id><snippet>import os
import re

def grep(path, regex):
    regObj = re.compile(regex)
    res = []
    for root, dirs, fnames in os.walk(path):
        for fname in fnames:
            if regObj.match(fname):
                res.append(os.path.join(root, fname))
    return res

print grep('.', r'my?(reg|ex)')
</snippet></ROW><ROW><id>7014067</id><snippet>age_groups = np.array([0, .01, .1, 5, 10, 15, 20, 25, 30, 35, 40])
age = .5
</snippet></ROW><ROW><id>7014067</id><snippet>nearest_age = age_groups[(np.abs(age_groups-age)).argmin()]
</snippet></ROW><ROW><id>7014876</id><snippet>django.views.static.serve</snippet></ROW><ROW><id>7014876</id><snippet>django.views.static.serve</snippet></ROW><ROW><id>7014963</id><snippet>re.search</snippet></ROW><ROW><id>7014963</id><snippet>regex = re.compile(r'\b[A-Z]{3,}\b')
</snippet></ROW><ROW><id>7014963</id><snippet>filter</snippet></ROW><ROW><id>7014963</id><snippet>full = ['Organization name} ', '&gt; (777) 777-7777} ', ' class="lsn-mB6 adr"&gt;1 Address, MA 02114 } ', ' class="lsn-serpListRadius lsn-fr"&gt;.2 Miles} MORE INFO YOUR LISTING MAP if (typeof(serps) !== \'undefined\') serps.arrArticleIds.push(\'4603114\'); ', 'Other organization} ', '&gt; (555) 555-5555} ', ' class="lsn-mB6 adr"&gt;301 Address, MA 02121 } ', ' class="lsn-serpListRadius lsn-fr"&gt;.2 Miles} MORE INFO CLAIM YOUR LISTING MAP if (typeof(serps) !== \'undefined\') serps.arrArticleIds.push(\'4715945\'); ', 'Organization} ']
regex = re.compile(r'\b[A-Z]{3,}\b')
# use only one of the following lines, whichever you prefer
filtered = filter(lambda i: not regex.search(i), full)
filtered = [i for i in full if not regex.search(i)]
</snippet></ROW><ROW><id>7014963</id><snippet>&gt;&gt;&gt; pprint.pprint(filtered)
['Organization name} ',
 '&gt; (777) 777-7777} ',
 ' class="lsn-mB6 adr"&gt;1 Address, MA 02114 } ',
 'Other organization} ',
 '&gt; (555) 555-5555} ',
 ' class="lsn-mB6 adr"&gt;301 Address, MA 02121 } ',
 'Organization} ']
</snippet></ROW><ROW><id>7015387</id><snippet>&gt;&gt;&gt; a = [(0,1), (1,2), (2,3), (3,4), (4,5)]
&gt;&gt;&gt; zip(*a)
[(0, 1, 2, 3, 4), (1, 2, 3, 4, 5)]
</snippet></ROW><ROW><id>7015578</id><snippet>del</snippet></ROW><ROW><id>7015758</id><snippet>calendar</snippet></ROW><ROW><id>7015758</id><snippet>from calendar import monthrange
from datetime import datetime, timedelta

def monthdelta(d1, d2):
    delta = 0
    while True:
        mdays = monthrange(d1.year, d1.month)[1]
        d1 += timedelta(days=mdays)
        if d1 &lt;= d2:
            delta += 1
        else:
            break
    return delta
</snippet></ROW><ROW><id>7015862</id><snippet>IOError</snippet></ROW><ROW><id>7015862</id><snippet> class ExternalDeviceNotFound(IOError): pass
</snippet></ROW><ROW><id>7015917</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l
[['a'], ['a', 'c'], ['d']]
&gt;&gt;&gt; res = list(itertools.chain.from_iterable(l))
&gt;&gt;&gt; res
['a', 'a', 'c', 'd']
&gt;&gt;&gt; set(res) #for uniqify, but doesn't preserve order
{'a', 'c', 'd'}
</snippet></ROW><ROW><id>7015917</id><snippet>list = [['a']['a', 'c']['d']]
</snippet></ROW><ROW><id>7015917</id><snippet>list = [['a'], ['a', 'c'], ['d']]
</snippet></ROW><ROW><id>7015917</id><snippet>list</snippet></ROW><ROW><id>7015917</id><snippet>list</snippet></ROW><ROW><id>7015917</id><snippet>l = [['a'], ['a', 'c'], ['d']]
k = []

for sublist in l:
    for item in sublist:
        if item not in k: #if you want list to be unique.
            k.append(item)
</snippet></ROW><ROW><id>7016026</id><snippet>.</snippet></ROW><ROW><id>7016026</id><snippet>sftp.get("~/myfolder/test.png",".", None )
</snippet></ROW><ROW><id>7016026</id><snippet>sftp.get("~/myfolder/test.png","~/test.png", None )
</snippet></ROW><ROW><id>7016078</id><snippet>class</snippet></ROW><ROW><id>7016078</id><snippet>import ctypes as c



class Point(c.Structure):
    _fields_ = [
        ('x',c.c_double),
        ('y',c.c_double),
        ('z',c.c_double)
        ]

def points_factory(num_points):
    class Points(c.Structure):
        _fields_ = [
            ('num_points', c.c_uint32),
            ('points', Point*num_points) 
            ]
    return Points

#and when you need it in the code:
Points = points_factory(5)
</snippet></ROW><ROW><id>7016291</id><snippet>def addition_range(start, end):
    res = [(lambda x, i=i: x + i) for i in range(start, end)]
    return res or None
</snippet></ROW><ROW><id>7016291</id><snippet>i</snippet></ROW><ROW><id>7016291</id><snippet>or None</snippet></ROW><ROW><id>7016291</id><snippet>None</snippet></ROW><ROW><id>7016291</id><snippet>def addition_range(start, end):
    return [(lambda x, i=i: x + i) for i in range(start, end)]
</snippet></ROW><ROW><id>7016398</id><snippet>import logging
logging.warning('Watch out!') # will print a message to the console
logging.info('I told you so') # will not print anything
</snippet></ROW><ROW><id>7016398</id><snippet>'root':{'handlers':('console', 'file'), 'level':'DEBUG'}
</snippet></ROW><ROW><id>7016446</id><snippet>import urllib.request
import zipfile

urls = ["http://url.com/archive.zip?key=7UCxcuCzFpYeu7tz18JgGZFAAgXQ2sop", "other url", "another url"]
filename = "C:/test/test.zip"
destinationPath = "C:/test"

for url in urls:
    try:
        urllib.request.urlretrieve(url,filename)
        sourceZip = zipfile.ZipFile(filename, 'r')
        break
    except ValueError:
        pass

for name in sourceZip.namelist():
    sourceZip.extract(name, destinationPath)
sourceZip.close()
</snippet></ROW><ROW><id>7016531</id><snippet>proc = subprocess.Popen(cmd, shell=True, env = {'PATH': '/path/to/javac'})
</snippet></ROW><ROW><id>7016531</id><snippet>cmd = '/path/to/javac/javac ' + java_file 
proc = subprocess.Popen(cmd, shell=True)
</snippet></ROW><ROW><id>7016626</id><snippet>z.write("directory/QuickSort.class","QuickSort.class")
</snippet></ROW><ROW><id>7016649</id><snippet>list</snippet></ROW><ROW><id>7016649</id><snippet>res</snippet></ROW><ROW><id>7016649</id><snippet>list_of_matches = list(res)
</snippet></ROW><ROW><id>7016649</id><snippet>root=os.dir</snippet></ROW><ROW><id>7016649</id><snippet>'.'</snippet></ROW><ROW><id>7016732</id><snippet>for</snippet></ROW><ROW><id>7016732</id><snippet>for x in d.iteritems():
    # loop body
</snippet></ROW><ROW><id>7016732</id><snippet>iter = d.itervalues()
while True:
    try:
        x = next(iter)
        # loop body
    except StopIteration:
        break
</snippet></ROW><ROW><id>7016732</id><snippet>x</snippet></ROW><ROW><id>7016732</id><snippet>iter = d.itervalues()
while True:
    try:
        x = next(iter)

        x = 5 # There is nothing in this line about changing the values of d
    except StopIteration:
        break
</snippet></ROW><ROW><id>7016886</id><snippet>my_dict</snippet></ROW><ROW><id>7016886</id><snippet>my_dict = dictbuilder.my_dictbuilder(reader_o, writer)
</snippet></ROW><ROW><id>7017350</id><snippet>[.!?][\s]{1,2}(?=[A-Z])
</snippet></ROW><ROW><id>7017436</id><snippet>attrs = {}</snippet></ROW><ROW><id>7017436</id><snippet>&gt;&gt;&gt; def a(attrs= {}):
...   print attrs
...   attrs.update({1:1})
...
&gt;&gt;&gt; a()
{}
&gt;&gt;&gt; a()
{1: 1}
</snippet></ROW><ROW><id>7017545</id><snippet>1e100</snippet></ROW><ROW><id>7017600</id><snippet>class PerUserAuthorization(Authorization):
  def apply_limits(self, request, object_list):
    if request and hasattr(request, 'user'):
        if request.user.is_authenticated():
            object_list = object_list.filter(user=request.user)
            return object_list

    return object_list.none()
</snippet></ROW><ROW><id>7017600</id><snippet>ModelResource.apply_authorization_limits</snippet></ROW><ROW><id>7017600</id><snippet>obj_create</snippet></ROW><ROW><id>7017600</id><snippet>class PerUserModelResource(ModelResource):

  def obj_create(self, bundle, request=None, **kwargs):
    return ModelResource.obj_create(self, bundle, request, user=request.user)

  def apply_authorization_limits(self, request, object_list):
    return object_list.filter(user=request.user)
</snippet></ROW><ROW><id>7017600</id><snippet>class ImageGroupResource(PerUserModelResource):
  study = fields.ForeignKey(StudyResource, "study")
  uploads = fields.ToManyField('cm.api.UploadResource', 'uploads', null=True)

  class Meta:
    queryset = ImageGroup.objects.all()
    list_allowed_methods = ['get', 'post']
    detail_allowed_methods = ['get', 'post', 'put', 'delete']
    resource_name = 'cm/imagegroup'
    authorization = PerUserAuthorization()
    filtering = {
        'name': ALL,
        'created_dt': ['exact', 'range', 'gt', 'gte', 'lt', 'lte'],
    }
</snippet></ROW><ROW><id>7017618</id><snippet>import csv  

data = open("murtuz.txt").readlines()
outfile = open("myfile.csv","w")
out = csv.writer(outfile)
for row in data:
    row = row.strip().split(';')
    if row:
        for subrow in row:
            subrow = subrow.strip().split()
            if subrow:
                out.writerow(subrow)
outfile.close()
</snippet></ROW><ROW><id>7017640</id><snippet>select count(*) from tablename where fr = contactid;
</snippet></ROW><ROW><id>7017733</id><snippet>{{ k.value.0.value_as_double }}</snippet></ROW><ROW><id>7017869</id><snippet>django.db.connection.queries</snippet></ROW><ROW><id>7017905</id><snippet>def setup_onesheet(request):
    # if the form has been submitted
    if request.method == 'POST':
        if 'unverified_username' in request.POST:
            form = OnesheetURL(request.POST)
            if form.is_valid():
                ...
    else:
        form = OnesheetURL()

    variables = RequestContext(request, {
        'error_message': error_message,
        'form' : form,
    });
    return render_to_response('onesheet_setup/setup_new_onesheet.html', variables)
</snippet></ROW><ROW><id>7017909</id><snippet>&gt;&gt;&gt; say = lambda x: lambda y: x + " " + y
&gt;&gt;&gt; say('Hello')('World')
'Hello World'
</snippet></ROW><ROW><id>7017909</id><snippet>def p(x):
 print "Hello World"
say=lambda x:p
</snippet></ROW><ROW><id>7017909</id><snippet>def p(x):
 print "Hello",x
say=lambda x:p
</snippet></ROW><ROW><id>7017909</id><snippet>&gt;&gt;&gt; say=lambda x:lambda y:print(x+" "+y)
&gt;&gt;&gt; say('Hello')('World')
Hello World
</snippet></ROW><ROW><id>7017909</id><snippet>&gt;&gt;&gt; say=lambda x:print(x,end=' ') or print
&gt;&gt;&gt; say('Hello')('World')
Hello World
</snippet></ROW><ROW><id>7017968</id><snippet>import urllib2
import BeautifulSoup
import MySQLdb

f = urllib2.urlopen('http://www.python.org/')
soup=BeautifulSoup.BeautifulSoup(f.read())
title=soup.find('title')
print(title.string)

connection=MySQLdb.connect(
    host='HOST',user='USER',
    passwd='PASS',db='MYDB')
cursor=connection.cursor()

sql='''CREATE TABLE IF NOT EXISTS foo (
           fooid int(11) NOT NULL AUTO_INCREMENT,
           title varchar(100) NOT NULL,
           PRIMARY KEY (fooid)
       )'''
cursor.execute(sql)

sql='INSERT INTO foo (title) VALUES (%s)'
args=[title.string]
cursor.execute(sql,args)
cursor.close()
connection.close()
</snippet></ROW><ROW><id>7018130</id><snippet>from io import FileIO
import time

class logfile(FileIO):
  def __init__(self, *args, **kwargs):
    FileIO.__init__(self, *args, **kwargs)

  def write(self, logstr):
    if logstr[-1] == '\n': logstr = logstr[:-1]
    super(logfile, self).write(bytes(time.strftime('%D-%T ') + str(logstr), 'UTF-8'))

import sys

sys.stdout = logfile('somefile', 'w')

print("This is a test")
sys.stdout.write('this is another test')
</snippet></ROW><ROW><id>7018130</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>7018133</id><snippet>yesno</snippet></ROW><ROW><id>7018133</id><snippet>&lt;div class="stream {{ stream.online|yesno:"online,offline" }}"&gt;
</snippet></ROW><ROW><id>7018164</id><snippet>def cp65001(name):
    if name.lower()=='cp65001':
        return codecs.lookup('utf-8')

codecs.register(cp65001)
</snippet></ROW><ROW><id>7018164</id><snippet>print u'some unicode string'</snippet></ROW><ROW><id>7018164</id><snippet>stdio</snippet></ROW><ROW><id>7018187</id><snippet>etx</snippet></ROW><ROW><id>7018187</id><snippet>\x03</snippet></ROW><ROW><id>7018356</id><snippet>ModelForm</snippet></ROW><ROW><id>7018356</id><snippet>save()</snippet></ROW><ROW><id>7018356</id><snippet>ModelForm</snippet></ROW><ROW><id>7018356</id><snippet>projects</snippet></ROW><ROW><id>7018356</id><snippet>User</snippet></ROW><ROW><id>7018356</id><snippet>def save(self, *args, **kwargs):
    for project in self.cleaned_data.get('projects'):
        project.users.add(self.instance)
    return super(AssignProjectForm, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>7018800</id><snippet>(defadvice py-execute-buffer
  (around keep-buffers-same activate)
  "Don't swap buffers in Aquamacs."
  (save-window-excursion 
    ad-do-it))
</snippet></ROW><ROW><id>7019029</id><snippet>liPos = [(2,5),(8,9),(18,22)]
s = "I hope that I will find an answer to my question!"

exclusions = set().union(* (set(range(t[0], t[1]+1)) for t in liPos) )
pruned = ''.join(c for i,c in enumerate(s) if i not in exclusions)

print pruned
</snippet></ROW><ROW><id>7019206</id><snippet>def user_crawled(user):
  for a in l:
    if a == user:
      return True

  return False

def user_crawled(user):
  return user in a
</snippet></ROW><ROW><id>7019206</id><snippet>def test_users(users):
   new = list()
   for u in users:
      if not user_crawled(u):
         new.append(u)
   return new
</snippet></ROW><ROW><id>7019206</id><snippet>def test_users(users):
   for u in users:
      if not user_crawled(u):
         yield u
</snippet></ROW><ROW><id>7019206</id><snippet>def test_users(users):
   return filter(lambda u: not user_crawled(u), users)
</snippet></ROW><ROW><id>7019206</id><snippet>import twitter

start_follower = "cleversallie" 
MAX_DEPTH = 3

searched = set()

api = twitter.Api()

def crawl(follower, in_depth=MAX_DEPTH):
   if in_depth &gt; 0:
      searched.add(follower['screen_name'])

      users = api.GetFriends(follower)
      names = set([u['screen_name'] for u in users])

      names -= searched
      for name in list(names)[:5]:
         crawl(name, in_depth - 1)

crawl(start_follower)

print "\n".join(searched)
print("Program done.")
</snippet></ROW><ROW><id>7019273</id><snippet>a</snippet></ROW><ROW><id>7019273</id><snippet>{http://some.random.schema}a</snippet></ROW><ROW><id>7019273</id><snippet>from lxml import etree
import StringIO

data= StringIO.StringIO('&lt;root xmlns="http://some.random.schema"&gt;&lt;a&gt;One&lt;/a&gt;&lt;a&gt;Two&lt;/a&gt;&lt;a&gt;Three&lt;/a&gt;&lt;/root&gt;')
docs = etree.iterparse(data,tag='{http://some.random.schema}a')
for event, elem in docs:
    print event, elem
</snippet></ROW><ROW><id>7019382</id><snippet>def boolify(s):
    if s == 'True':
        return True
    if s == 'False':
        return False
    raise ValueError("huh?")

def autoconvert(s):
    for fn in (boolify, int, float):
        try:
            return fn(s)
        except ValueError:
            pass
    return s
</snippet></ROW><ROW><id>7019382</id><snippet>boolify</snippet></ROW><ROW><id>7019640</id><snippet>sourceZip = None</snippet></ROW><ROW><id>7019640</id><snippet>for url in urls</snippet></ROW><ROW><id>7019640</id><snippet>sourceZip is None</snippet></ROW><ROW><id>7019640</id><snippet>for</snippet></ROW><ROW><id>7019640</id><snippet>sourceZip = None

for url in urls:
    try:
        urllib.request.urlretrieve(url,filename)
        sourceZip = zipfile.ZipFile(filename, 'r')
        break
    except ValueError:
        pass

if sourceZip is not None:
    for name in sourceZip.namelist():
        sourceZip.extract(name, destinationPath)
    sourceZip.close()

subprocess.call(r'C:\WINDOWS\system32\cmd.exe /C "C:\test\test.exe"')
</snippet></ROW><ROW><id>7019810</id><snippet>else:</snippet></ROW><ROW><id>7019810</id><snippet>for:</snippet></ROW><ROW><id>7019810</id><snippet>break</snippet></ROW><ROW><id>7019810</id><snippet>return</snippet></ROW><ROW><id>7019843</id><snippet>remote_api</snippet></ROW><ROW><id>7019843</id><snippet>get_serving_url</snippet></ROW><ROW><id>7019934</id><snippet>char **</snippet></ROW><ROW><id>7019934</id><snippet>dev.Serial[0]</snippet></ROW><ROW><id>7019934</id><snippet>dev.Serial[1]</snippet></ROW><ROW><id>7019934</id><snippet>[ctypes.POINTER(USMCDevices)]</snippet></ROW><ROW><id>7019934</id><snippet>init(ctypes.byref(dev))</snippet></ROW><ROW><id>7019934</id><snippet>import ctypes
from ctypes import wintypes

class USMCDevices(ctypes.Structure):
    _fields_ = [
      ("NOD", wintypes.DWORD),
      ("Serial", ctypes.POINTER(ctypes.c_char_p)),
      ("Version", ctypes.POINTER(ctypes.c_char_p)),
    ]

usmc = ctypes.cdll.USMCDLL
init = usmc.USMC_Init
init.restype = wintypes.DWORD
init.argtypes = [ctypes.POINTER(USMCDevices)]
dev = USMCDevices()
init(dev)

devices = [dev.Serial[i] + b':' + dev.Version[i]
              for i in range(dev.NOD)]
print('\n'.join(d.decode('ascii') for d in devices))
</snippet></ROW><ROW><id>7019934</id><snippet>000000000000001:001
000000000000002:002
</snippet></ROW><ROW><id>7019934</id><snippet>//gcc USMCDLL.c -o USMCDLL.dll -shared

#include&lt;stdio.h&gt;
#include&lt;windows.h&gt;

typedef struct USMC_Devices_st {
    DWORD NOD;       // Number of the devices ready to work
    char **Serial;   // Array of 16 byte ASCII strings
    char **Version;  // Array of 4 byte ASCII strings
} USMC_Devices;

char * Serial[] = {"000000000000001", "000000000000002"};
char * Version[] = {"001", "002"};

DWORD USMC_Init(USMC_Devices *devices) {

    devices-&gt;NOD = 2;
    devices-&gt;Serial = Serial;
    devices-&gt;Version = Version;

    return 0;
}
</snippet></ROW><ROW><id>7019955</id><snippet>matches = [myresults for myresults in dict_matcher(dict1, dict2 , 2, 6)]
</snippet></ROW><ROW><id>7019955</id><snippet>matches = list(dict_matcher(dict1, dict2 , 2, 6))
</snippet></ROW><ROW><id>7019955</id><snippet>def dict_matcher(dict1, dict2, item1_pos, item2_pos, *args):
</snippet></ROW><ROW><id>7019955</id><snippet>*args</snippet></ROW><ROW><id>7019955</id><snippet>args = None</snippet></ROW><ROW><id>7019955</id><snippet>yield dict1[item1][item1_pos], dict2[item2][item2_pos]
</snippet></ROW><ROW><id>7019955</id><snippet>yield dict1[item1][2], dict2[item2][6]
</snippet></ROW><ROW><id>7019955</id><snippet>yield dict1[item1], dict2[item2]
</snippet></ROW><ROW><id>7019955</id><snippet>def dict_matcher(dict1, dict2, item1_pos, item2_pos, other1_pos, other2_pos):
</snippet></ROW><ROW><id>7019955</id><snippet>yield dict1[item1][other1_pos], dict2[item2][other2_pos]
</snippet></ROW><ROW><id>7019955</id><snippet>matches = list(dict_matcher(dict1, dict2 , 2, 6, 3, 8)) 
</snippet></ROW><ROW><id>7019955</id><snippet>def dict_matcher(dict1, dict2, item1_pos, item2_pos, other1_poss, other2_poss):
</snippet></ROW><ROW><id>7019955</id><snippet>yield [dict1[item1][i] for i in other1_poss], [dict2[item2][i] for i in other2_poss]
</snippet></ROW><ROW><id>7019955</id><snippet>matches = list(dict_matcher(dict1, dict2 , 2, 6, (2, 3), (6, 8))) 
</snippet></ROW><ROW><id>7020271</id><snippet>apply</snippet></ROW><ROW><id>7020271</id><snippet>locals()</snippet></ROW><ROW><id>7020271</id><snippet>if True:
    @property
    def foo(self):
        return self._foo
    @foo.setter
    def foo(self, val):
        self._foo = val
</snippet></ROW><ROW><id>7020271</id><snippet>locals</snippet></ROW><ROW><id>7020271</id><snippet>apply</snippet></ROW><ROW><id>7020271</id><snippet>foo = foo()</snippet></ROW><ROW><id>7020271</id><snippet>property</snippet></ROW><ROW><id>7020271</id><snippet>foo = property(fget, fset)</snippet></ROW><ROW><id>7020271</id><snippet>class ATimesTwo(A):
    @A.foo.setter
    def foo(self, val):
        self._foo = val * 2
</snippet></ROW><ROW><id>7020283</id><snippet>post_save</snippet></ROW><ROW><id>7020283</id><snippet>created</snippet></ROW><ROW><id>7020283</id><snippet>True</snippet></ROW><ROW><id>7020283</id><snippet>Task</snippet></ROW><ROW><id>7020283</id><snippet>eta</snippet></ROW><ROW><id>7020285</id><snippet>addtwice</snippet></ROW><ROW><id>7020285</id><snippet>add</snippet></ROW><ROW><id>7020285</id><snippet># -&gt; means (substitution for)
# &lt;= means "return"
y = Bag()
y.add('dog') -&gt; 
     y.data.append(x) -&gt;
         #(machine code)
     &lt;= y.data
# at this point, at the command propmt, python will just print what was returned.
y.addtwice('cat')-&gt;
     y.add('cat')-&gt;
         y.data.append(x) -&gt;
             #(machine code) 
         &lt;= y.data
     #nothing cares about this return
     y.add('cat')-&gt;
         y.data.append(x) -&gt;
             #(machine code)
         &lt;= y.data
     #nothing cares about this return either
     &lt;= y.data
# at this point, at the command propmt, python will just print what was returned.
</snippet></ROW><ROW><id>7020285</id><snippet>self</snippet></ROW><ROW><id>7020285</id><snippet>self.data</snippet></ROW><ROW><id>7020325</id><snippet>gunicorn</snippet></ROW><ROW><id>7020325</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>7020325</id><snippet>command</snippet></ROW><ROW><id>7020325</id><snippet>command=/path/to/python /path/to/manage.py run_gunicorn -c /path/to/gunicorn.conf.py 
</snippet></ROW><ROW><id>7020414</id><snippet>from django.utils import simplejson

def my_ajax_view(request):
    if not request.is_ajax():
        raise Http404

    data_dict = getmydata() #lets supose is a dict
    return HttpResponse(simplejson.dumps(data_dict))
</snippet></ROW><ROW><id>7020426</id><snippet>print</snippet></ROW><ROW><id>7020426</id><snippet>print</snippet></ROW><ROW><id>7020426</id><snippet>[~/repo/py]
|4&gt;from __future__ import print_function

[~/repo/py]
|5&gt;print print
--&gt;print(print)
&lt;built-in function print&gt;
</snippet></ROW><ROW><id>7020525</id><snippet>os.walk</snippet></ROW><ROW><id>7020525</id><snippet>chardet.detect</snippet></ROW><ROW><id>7020525</id><snippet>U+16705</snippet></ROW><ROW><id>7020525</id><snippet>AA</snippet></ROW><ROW><id>7020613</id><snippet>raw()</snippet></ROW><ROW><id>7020613</id><snippet>id</snippet></ROW><ROW><id>7020613</id><snippet>latest_phone_numbers = Person.objects.raw('''
SELECT p1.id, p1.name, p1.phone, p1.created
FROM person_person p1, (
    SELECT name, MAX(created) AS max_created
    FROM person_person
    GROUP BY name
) AS p2
WHERE p1.name = p2.name AND p1.created = p2.max_created
''')
</snippet></ROW><ROW><id>7020981</id><snippet>self.request.POST</snippet></ROW><ROW><id>7020981</id><snippet>self.request.get()</snippet></ROW><ROW><id>7020981</id><snippet>urlparse.parse_qs(self.request.body)</snippet></ROW><ROW><id>7020988</id><snippet>id,secondid=zip(*row)
</snippet></ROW><ROW><id>7021083</id><snippet>import pygraphviz as PG

A = PG.AGraph(directed=True, strict=True)

A.add_edge("7th Edition", "32V")
A.add_edge("7th Edition", "Xenix")
# etc., etc.

# save the graph in dot format
A.write('ademo.dot')

# pygraphviz renders graphs in neato by default, 
# so you need to specify dot as the layout engine
A.layout(prog='dot')


# opening the dot file in a text editor shows the graph's syntax:
digraph unix {
  size="7,5";
  node [color=goldenrod2, style=filled];
  "7th Edition" -&gt; "32V";
  "7th Edition" -&gt; "V7M";
  "7th Edition" -&gt; "Xenix";
  "7th Edition" -&gt; "UniPlus+";
  "V7M" -&gt; "Ultrix-11";
  "8th Edition" -&gt; "9th Edition";
  "1 BSD" -&gt; "2 BSD";
  "2 BSD" -&gt; "2.8 BSD";
  "2.8 BSD" -&gt; "Ultrix-11";
  "2.8 BSD" -&gt; "2.9 BSD";
  "32V" -&gt; "3 BSD";
  "3 BSD" -&gt; "4 BSD";
  "4 BSD" -&gt; "4.1 BSD";
  "4.1 BSD" -&gt; "4.2 BSD";
  "4.1 BSD" -&gt; "2.8 BSD";
  "4.1 BSD" -&gt; "8th Edition";
  "4.2 BSD" -&gt; "4.3 BSD";
  "4.2 BSD" -&gt; "Ultrix-32";
}
</snippet></ROW><ROW><id>7021134</id><snippet>from django.db import connection

class MyTest(unittest.TestCase):
    def setUp(self):
        connection.cursor().execute("CREATE TABLE ...")

    def tearDown(self):
        connection.cursor().execute("DROP TABLE ...")
</snippet></ROW><ROW><id>7021492</id><snippet>docx</snippet></ROW><ROW><id>7021492</id><snippet>dc:creator</snippet></ROW><ROW><id>7021492</id><snippet>docProps/core.xml</snippet></ROW><ROW><id>7021492</id><snippet>import zipfile, lxml.etree

# open zipfile
zf = zipfile.ZipFile('my_doc.docx')
# use lxml to parse the xml file we are interested in
doc = lxml.etree.fromstring(zf.read('docProps/core.xml'))
# retrieve creator
ns={'dc': 'http://purl.org/dc/elements/1.1/'}
creator = doc.xpath('//dc:creator', namespaces=ns)[0].text
</snippet></ROW><ROW><id>7022103</id><snippet>get_or_insert</snippet></ROW><ROW><id>7022133</id><snippet>import os
parent_folder_path = 'somepath/parent_folder'
for eachFile in os.listdir(parent_folder_path):
    if eachFile.endswith('.xml'):
       newfilePath = parent_folder_path+'/'+eachFile
       file = open(newfilePath, 'r')
       xml = file.read()
       file.close()
       xml = xml.replace('thing to replace', 'with content')
       file = open(newfilePath, 'w')
       file.write(str(xml))
       file.close()
</snippet></ROW><ROW><id>7022168</id><snippet>os.chdir(path)</snippet></ROW><ROW><id>7022168</id><snippet>import os
from itertools import izip
paths = ('/local/mnt/myspace/sample1', '../sample2', 
         '../', '../', 'myspace/sample9/', '../sample3']
commands = (func1, func2, func3, func4, func5, func6)
for path, command in izip(paths, commands):
      os.chdir(path)
      command()
</snippet></ROW><ROW><id>7022168</id><snippet>commands = (['cmd1', 'arg1'], ['cmd2', 'arg2'], ...)
for path, command in izip(paths, commands):
      os.chdir(path)
      subprocess.call(command)
</snippet></ROW><ROW><id>7022168</id><snippet>Popen</snippet></ROW><ROW><id>7022168</id><snippet>wait</snippet></ROW><ROW><id>7022168</id><snippet>call</snippet></ROW><ROW><id>7022197</id><snippet>except Exception as e:
    print e
    sys.exit(1)
</snippet></ROW><ROW><id>7022197</id><snippet>Exception</snippet></ROW><ROW><id>7022197</id><snippet>except:</snippet></ROW><ROW><id>7022197</id><snippet>RSUNotSupported</snippet></ROW><ROW><id>7022294</id><snippet>a=[[1,1],[2,1],[3,1]]
b=[[1,2],[2,2],[3,2]]
</snippet></ROW><ROW><id>7022294</id><snippet>a[1][1]
</snippet></ROW><ROW><id>7022294</id><snippet>c = [a[2][i] * b[2][i] for i in range(len(a[2]))] 
</snippet></ROW><ROW><id>7022294</id><snippet>a = zip(*a)
</snippet></ROW><ROW><id>7022294</id><snippet>a=[[1, 2, 3], [1, 1, 1]]
</snippet></ROW><ROW><id>7022322</id><snippet>from itertools import chain, repeat, islice

def window(seq, size=2, fill=0, fill_left=True, fill_right=False):
    """ Returns a sliding window (of width n) over data from the iterable:
      s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...
    """
    ssize = size - 1
    it = chain(
      repeat(fill, ssize * fill_left),
      iter(seq),
      repeat(fill, ssize * fill_right))
    result = tuple(islice(it, size))
    if len(result) == size:  # `&lt;=` if okay to return seq if len(seq) &lt; size
        yield result
    for elem in it:
        result = result[1:] + (elem,)
        yield result
</snippet></ROW><ROW><id>7022322</id><snippet>In [32]: kwa = dict(gen=xrange(1000), size=4, fill=-1, fill_left=True, fill_right=True)
In [33]: %timeit -n 10000 [a+b+c+d for a,b,c,d in tmpf5.ia(**kwa)]
10000 loops, best of 3: 358 us per loop
In [34]: %timeit -n 10000 [a+b+c+d for a,b,c,d in tmpf5.window(**kwa)]
10000 loops, best of 3: 368 us per loop
In [36]: %timeit -n 10000 [sum(x) for x in tmpf5.ia(**kwa)]
10000 loops, best of 3: 340 us per loop
In [37]: %timeit -n 10000 [sum(x) for x in tmpf5.window(**kwa)]
10000 loops, best of 3: 432 us per loop
</snippet></ROW><ROW><id>7022361</id><snippet>connect()</snippet></ROW><ROW><id>7022361</id><snippet>s.connect( ('localhost', 2057) )
</snippet></ROW><ROW><id>7022361</id><snippet>self</snippet></ROW><ROW><id>7022672</id><snippet>    if randomValue &lt;= sum(i.freq for i in diceList[0:i+1]):         
        print 'O', i, 'randomValue', randomValue, 'prob container', sum(i.freq for i in diceList[0:i+1])
        break
</snippet></ROW><ROW><id>7022672</id><snippet>diceList[0:i+1]</snippet></ROW><ROW><id>7022672</id><snippet>diceList[0:len(diceList)+1]</snippet></ROW><ROW><id>7022737</id><snippet>a, b = func()</snippet></ROW><ROW><id>7022737</id><snippet>a, b = b, a</snippet></ROW><ROW><id>7022848</id><snippet>{{'title':'some title if you want','year': 'year if you want', 'url': url}, {...}, ...}</snippet></ROW><ROW><id>7022848</id><snippet>{% for entry in returned_dict %}
  &lt;a href="{{ entry.url }}"&gt;{{ entry.title }}&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>7022940</id><snippet>sys.path</snippet></ROW><ROW><id>7022940</id><snippet>env</snippet></ROW><ROW><id>7022940</id><snippet>Popen</snippet></ROW><ROW><id>7022940</id><snippet>os.pathsep</snippet></ROW><ROW><id>7022940</id><snippet>import subprocess
import os
import sys
subprocess.Popen(["python",path], env = {'PYTHONPATH': os.pathsep.join(sys.path)})
</snippet></ROW><ROW><id>7022940</id><snippet>multiprocessing</snippet></ROW><ROW><id>7022940</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7022940</id><snippet>/home/socialsense/ss/src</snippet></ROW><ROW><id>7023057</id><snippet>&gt;&gt;&gt; def f(n):
...   q, r = divmod(n,5)
...   if r == 0:
...     return q * 5
...   else:
...     return (q * 5) + 5
...
&gt;&gt;&gt; f(7)
10
&gt;&gt;&gt; f(123)
125
&gt;&gt;&gt; f(120)
120
</snippet></ROW><ROW><id>7023107</id><snippet>OpenSSL::Cipher</snippet></ROW><ROW><id>7023178</id><snippet>python my_app.py &amp;</snippet></ROW><ROW><id>7023178</id><snippet>$!</snippet></ROW><ROW><id>7023178</id><snippet>kill</snippet></ROW><ROW><id>7023178</id><snippet>SIGINT</snippet></ROW><ROW><id>7023178</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>7023178</id><snippet>python main.py &amp;</snippet></ROW><ROW><id>7023178</id><snippet>stdout/stderr</snippet></ROW><ROW><id>7023178</id><snippet>python main.py &amp;&gt; /path/to/app.log &amp;</snippet></ROW><ROW><id>7023178</id><snippet>logging</snippet></ROW><ROW><id>7023363</id><snippet>abcd</snippet></ROW><ROW><id>7023363</id><snippet>EnumWindows</snippet></ROW><ROW><id>7023363</id><snippet>EnumWindows(cb_proc, b'abcd')</snippet></ROW><ROW><id>7023363</id><snippet>c_wchar_p</snippet></ROW><ROW><id>7023363</id><snippet>cast(lparam, c_wchar_p)</snippet></ROW><ROW><id>7023386</id><snippet>TEMPLATE_LOADERS</snippet></ROW><ROW><id>7023386</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>7023689</id><snippet>view()</snippet></ROW><ROW><id>7023689</id><snippet>installEventFilter</snippet></ROW><ROW><id>7023689</id><snippet>eventFilter</snippet></ROW><ROW><id>7023689</id><snippet>from PyQt4 import QtCore, QtGui
class ShowEventFilter(QtCore.QObject):
    def eventFilter(self, filteredObj, event):
        if event.type() == QtCore.QEvent.Show:
            print "Popup Showed !"
            # do whatever you want
        return QtCore.QObject.eventFilter(self, filteredObj, event)

if __name__ == '__main__':
    app = QtGui.QApplication([])
    cb = QtGui.QComboBox()
    cb.addItems(['a', 'b', 'c'])

    eventFilter = ShowEventFilter()
    cb.view().installEventFilter(eventFilter)
    cb.show()
    app.exec_()
</snippet></ROW><ROW><id>7023889</id><snippet>isoformat</snippet></ROW><ROW><id>7023889</id><snippet>import datetime as dt 
try:
    import email.utils as eu
except ImportError:
    import email.Utils as eu  # for Python 2.3

date_string="Fri, 08 Aug 2011 14:15:10 -0400"
ttuple=eu.parsedate(date_string)
date=dt.datetime(*ttuple[:6])
print(date.isoformat()+'Z')
</snippet></ROW><ROW><id>7023889</id><snippet>2011-08-08T14:15:10Z
</snippet></ROW><ROW><id>7024201</id><snippet>slice</snippet></ROW><ROW><id>7024201</id><snippet>In [1]: row = [4,7]

In [2]: data = range(10000)

In [3]: data[slice(*row)]
Out[3]: [4, 5, 6]
</snippet></ROW><ROW><id>7024300</id><snippet>foo</snippet></ROW><ROW><id>7024300</id><snippet>bar</snippet></ROW><ROW><id>7024300</id><snippet>bar</snippet></ROW><ROW><id>7024300</id><snippet>foo</snippet></ROW><ROW><id>7024300</id><snippet>foo</snippet></ROW><ROW><id>7024300</id><snippet>def run_before(lastfunc, *args1, **kwargs1):
    def run(func):
        def wrapped_func(*args, **kwargs):
            try:
                result = func(*args, **kwargs)
            except:
                result = None
            finally:
                lastfunc(*args1, **kwargs1)
                return result
        return wrapped_func
    return run

def bar():
    print 'goodby'

@run_before(bar)
def foo():
    print "hello"

foo()
</snippet></ROW><ROW><id>7024321</id><snippet>my_range</snippet></ROW><ROW><id>7024321</id><snippet>for i in my_range:
    print(i)
</snippet></ROW><ROW><id>7024616</id><snippet>xmpp.py</snippet></ROW><ROW><id>7024616</id><snippet>import</snippet></ROW><ROW><id>7024616</id><snippet>xmpp</snippet></ROW><ROW><id>7024846</id><snippet>random</snippet></ROW><ROW><id>7024846</id><snippet>def next_configuration(y):
    """Take a configuration of heaps and remove one card from each
    heap to create a new heap.
    """
    new_y = [x - 1 for x in y if x &gt; 1]
    new_y.append(len(y))
    new_y.sort(reverse=True)
    return new_y
</snippet></ROW><ROW><id>7024846</id><snippet>&gt;&gt;&gt; next_configuration([5, 1, 3, 2])
[4, 4, 2, 1]
</snippet></ROW><ROW><id>7024846</id><snippet>config = generate_initial_configuration()
for i in range(max_rounds):
    new_config = next_configuration(config)
    if new_config == config:
        break
    config = new_config
</snippet></ROW><ROW><id>7024908</id><snippet>wget &lt;a href="http://localhost:8280/" rel="nofollow"&gt;http://localhost:8280/&lt;/a&gt;</snippet></ROW><ROW><id>7024908</id><snippet>python -m SimpleHTTPServer 8280
</snippet></ROW><ROW><id>7025171</id><snippet>for line in lines:
    match = re.search(r'@Table\(name = "(.*)"\)', line)

    if match:
        output_line = "".join(['@Table (name = "', prefix, match.group(1)[:max_len], '")', '\n'])
    else:
        output_line = line

    f.write(output_line)

f.close()
</snippet></ROW><ROW><id>7025262</id><snippet>import datetime
import dateutil.relativedelta as relativedelta

def next_month(date):
    weekday=relativedelta.weekday(date.isoweekday()-1)   
    weeknum=(date.day-1)//7+1
    weeknum=weeknum if weeknum&lt;=4 else 4
    next_date=date+relativedelta.relativedelta(
        months=1,day=1,weekday=weekday(weeknum))
    return next_date

start=datetime.date(2011,8,1)
for i in range(31):
    date=start+datetime.timedelta(days=i)
    next_date=next_month(date)    
    print('{d} --&gt; {n}'.format(d=date,n=next_date))
</snippet></ROW><ROW><id>7025262</id><snippet>2011-08-01 --&gt; 2011-09-05
2011-08-02 --&gt; 2011-09-06
2011-08-03 --&gt; 2011-09-07
2011-08-04 --&gt; 2011-09-01
2011-08-05 --&gt; 2011-09-02
2011-08-06 --&gt; 2011-09-03
2011-08-07 --&gt; 2011-09-04
2011-08-08 --&gt; 2011-09-12
2011-08-09 --&gt; 2011-09-13
2011-08-10 --&gt; 2011-09-14
2011-08-11 --&gt; 2011-09-08
2011-08-12 --&gt; 2011-09-09
2011-08-13 --&gt; 2011-09-10
2011-08-14 --&gt; 2011-09-11
2011-08-15 --&gt; 2011-09-19
2011-08-16 --&gt; 2011-09-20
2011-08-17 --&gt; 2011-09-21
2011-08-18 --&gt; 2011-09-15
2011-08-19 --&gt; 2011-09-16
2011-08-20 --&gt; 2011-09-17
2011-08-21 --&gt; 2011-09-18
2011-08-22 --&gt; 2011-09-26
2011-08-23 --&gt; 2011-09-27
2011-08-24 --&gt; 2011-09-28
2011-08-25 --&gt; 2011-09-22 # Oddly non-monotonic, but correct according to specifications
2011-08-26 --&gt; 2011-09-23
2011-08-27 --&gt; 2011-09-24
2011-08-28 --&gt; 2011-09-25
2011-08-29 --&gt; 2011-09-26 # 5th Monday maps to 4th Monday since there is no 5th Monday in September
2011-08-30 --&gt; 2011-09-27
2011-08-31 --&gt; 2011-09-28
</snippet></ROW><ROW><id>7025433</id><snippet>super</snippet></ROW><ROW><id>7025433</id><snippet>super</snippet></ROW><ROW><id>7025469</id><snippet>class Collection(object):
    def __init__(self):
        self._profiles_1d = None

    @property
    def profiles(self):
        """One dimensional profiles"""
        return self._profiles_1d

    @profiles.setter
    def profiles(self, argtuple):
        args, kwargs = argtuple
        self._profiles_1d = profiles_1d(*args, **kwargs)

    @profiles.deleter
    def profiles(self):
        self._profiles_1d = None
</snippet></ROW><ROW><id>7025469</id><snippet>profiles</snippet></ROW><ROW><id>7025469</id><snippet>collection = Collection()
collection.profiles = (arg1, arg2, arg3), {'kwarg1':val1, 'kwarg2':val2}
</snippet></ROW><ROW><id>7025469</id><snippet>collection</snippet></ROW><ROW><id>7025469</id><snippet>profiles_1d</snippet></ROW><ROW><id>7025469</id><snippet>collections.profiles = myprofiles1d</snippet></ROW><ROW><id>7025565</id><snippet>if</snippet></ROW><ROW><id>7025565</id><snippet>elif</snippet></ROW><ROW><id>7025565</id><snippet>else</snippet></ROW><ROW><id>7025565</id><snippet>if guess == number:
    print('Congratulations! You guessed it.')
elif guess &lt; number:
    pass # Your code here
else:
    pass # Your code here
</snippet></ROW><ROW><id>7025963</id><snippet>sys._getframe()</snippet></ROW><ROW><id>7025963</id><snippet>% cat test1.py
#!/usr/bin/env python

import sys

def function():
    print 'Called from within:', sys._getframe().f_back.f_code.co_filename
</snippet></ROW><ROW><id>7025963</id><snippet>test2.py</snippet></ROW><ROW><id>7025963</id><snippet>import</snippet></ROW><ROW><id>7025963</id><snippet>% cat test2.py
#!/usr/bin/env python

import test1

test1.function()
</snippet></ROW><ROW><id>7025963</id><snippet>% ./test2.py 
Called from within: ./test2.py
</snippet></ROW><ROW><id>7026127</id><snippet>ping</snippet></ROW><ROW><id>7026127</id><snippet>pong</snippet></ROW><ROW><id>7026173</id><snippet>self.myList.extend([0] * (4 - len(self.myList)))
</snippet></ROW><ROW><id>7026173</id><snippet>self.myList = (self.myList + [0] * 4)[:4]
</snippet></ROW><ROW><id>7026297</id><snippet>d</snippet></ROW><ROW><id>7026297</id><snippet>datetime.date</snippet></ROW><ROW><id>7026297</id><snippet>def weekday_index(d):
    return (d.day + 6) // 7
</snippet></ROW><ROW><id>7026297</id><snippet>d_next = d + datetime.timedelta(weeks=4)
if weekday_index(d_next) &lt; weekday_index(d):
    d_next += datetime.timedelta(weeks=1)
</snippet></ROW><ROW><id>7026297</id><snippet>d</snippet></ROW><ROW><id>7026852</id><snippet>"__metaclass__"</snippet></ROW><ROW><id>7026852</id><snippet>__metaclass__</snippet></ROW><ROW><id>7026852</id><snippet>metaclass=</snippet></ROW><ROW><id>7027026</id><snippet>conn = sqlite3.connect('/path/to/database.db')
cursor=conn.cursor()
t=(value,)
cursor.execute("select field from table where other_field = ?", t)
returnObject = cursor.fetchone()
if returnObject:
    print returnObject[0]
else:
    print "Nothing found!"
</snippet></ROW><ROW><id>7027026</id><snippet>execute()</snippet></ROW><ROW><id>7027026</id><snippet>conn = sqlite3.connect('/path/to/database.db')
cursor=conn.cursor()
t=(value,)
rowCount = cursor.execute("select field from table where other_field = ?", t)
if rowCount &gt; 0:
   returnObject = cursor.fetchone()[0]
</snippet></ROW><ROW><id>7027035</id><snippet>app.config.from_envvar</snippet></ROW><ROW><id>7027035</id><snippet>app.config.from_pyfile</snippet></ROW><ROW><id>7027035</id><snippet>{{ config.someconst }}</snippet></ROW><ROW><id>7027113</id><snippet>app.run()</snippet></ROW><ROW><id>7027113</id><snippet>app.run(host= '0.0.0.0')</snippet></ROW><ROW><id>7027113</id><snippet>run()</snippet></ROW><ROW><id>7027113</id><snippet>app.run(host='0.0.0.0')</snippet></ROW><ROW><id>7027308</id><snippet>&gt;&gt;&gt; hash((1,2,3))
2528502973977326415
&gt;&gt;&gt; hash([1,2,3])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
&gt;&gt;&gt; hash(frozenset((1,2,3)))
-7699079583225461316
&gt;&gt;&gt; hash(set((1,2,3)))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'set'
</snippet></ROW><ROW><id>7027308</id><snippet>hash</snippet></ROW><ROW><id>7027308</id><snippet>tuple</snippet></ROW><ROW><id>7027308</id><snippet>frozenset</snippet></ROW><ROW><id>7027308</id><snippet>list</snippet></ROW><ROW><id>7027308</id><snippet>set</snippet></ROW><ROW><id>7027365</id><snippet>UPPER_CASE</snippet></ROW><ROW><id>7027391</id><snippet>continue</snippet></ROW><ROW><id>7027391</id><snippet>break</snippet></ROW><ROW><id>7027423</id><snippet>platform.popen</snippet></ROW><ROW><id>7027423</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7027423</id><snippet>subprocess</snippet></ROW><ROW><id>7027423</id><snippet>subprocess</snippet></ROW><ROW><id>7027423</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7027423</id><snippet>something('shell command here')</snippet></ROW><ROW><id>7027423</id><snippet>Popen(['shell', 'command', 'here'])</snippet></ROW><ROW><id>7027423</id><snippet>something('foo %s" % name)</snippet></ROW><ROW><id>7027423</id><snippet>foo Mike</snippet></ROW><ROW><id>7027423</id><snippet>foo 'Mike Graham'</snippet></ROW><ROW><id>7027423</id><snippet>"Mike O'Reilley"</snippet></ROW><ROW><id>7027423</id><snippet>"Mike; rm -rf /"</snippet></ROW><ROW><id>7027423</id><snippet>Popen(['foo'</snippet></ROW><ROW><id>7027423</id><snippet>Popen</snippet></ROW><ROW><id>7027441</id><snippet>t.rows.append([colored_result])
</snippet></ROW><ROW><id>7027441</id><snippet>t.rows.append([colored_result, colored_result])
</snippet></ROW><ROW><id>7027441</id><snippet>colored_result = HTML.TableCell(new, bgcolor=color)
colored_result2 = HTML.TableCell(new, bgcolor='white')
t.rows.append([colored_result, colored_result2])
</snippet></ROW><ROW><id>7027540</id><snippet>for country in x:
    for city, pop in x[country].iteritems():
        if 'Ecuador' in city:
            print ''.join(city.split('_')[1:3])
</snippet></ROW><ROW><id>7027899</id><snippet>sys.modules</snippet></ROW><ROW><id>7027899</id><snippet>import sys

def modify(func):
    module = sys.modules[func.__module__]
</snippet></ROW><ROW><id>7027923</id><snippet>9**(9**9)</snippet></ROW><ROW><id>7028362</id><snippet>while True:
   same_every_time = AClass.objects.all().order_by('-id')[:5]
   sleep(300)
</snippet></ROW><ROW><id>7028362</id><snippet>while True:
   AClass.objects.update()
   updated_results = AClass.objects.all().order_by('-id')[:5]
   sleep(300)
</snippet></ROW><ROW><id>7028627</id><snippet>&gt;&gt;&gt; x, y, *data = p
&gt;&gt;&gt; x
0.793803
&gt;&gt;&gt; y
0.136326
&gt;&gt;&gt; data
[0, 0.5, 0]
</snippet></ROW><ROW><id>7028627</id><snippet>&gt;&gt;&gt; p[0]
0.793803
</snippet></ROW><ROW><id>7028627</id><snippet>&gt;&gt;&gt; str.format("x{0[0]} y{0[1]}", p)
'x0.793803 y0.136326'
</snippet></ROW><ROW><id>7028627</id><snippet>for point in points:
    x, y, *data = point
    print(str.format("x: {0}, y: y{1}", x, y))
</snippet></ROW><ROW><id>7028627</id><snippet>points</snippet></ROW><ROW><id>7028627</id><snippet>point</snippet></ROW><ROW><id>7028740</id><snippet>&gt;&gt;&gt; foo = 'ABC'
&gt;&gt;&gt; head = ['-' * (len(foo)+6), '-%s-' % (' '*(len(foo)+4))]
&gt;&gt;&gt; print '\n'.join(head + ['-  %s  -' % foo] + head[::-1])
---------
-       -
-  ABC  -
-       -
---------
</snippet></ROW><ROW><id>7028818</id><snippet>k</snippet></ROW><ROW><id>7028887</id><snippet>y = []</snippet></ROW><ROW><id>7028887</id><snippet>def autoSolve():
    y = []
    for i in range(5):
        z = random.randrange(1, 10)
        y.append(z)
    print(y, end="")
</snippet></ROW><ROW><id>7029015</id><snippet>import sys
import re

if __name__ == "__main__":
    instr = sys.argv[1]
    subs = []
    success = False
    while not success:
        try:
            indict = eval(instr)
            success = True
        except NameError, e:
            defname = re.search("name '([^\']*)' is not defined", str(e)).group(1)
            subs.append(defname)
            locals()[defname] = '//substitute{%d}' % (len(subs) - 1)
    outlist = indict.items()
    outstr = str(outlist)
    for i, sub in enumerate(subs):
        outstr = outstr.replace("'//substitute{%d}'" % i, sub)
    print outstr
</snippet></ROW><ROW><id>7029015</id><snippet>{"test": test}</snippet></ROW><ROW><id>7029015</id><snippet>[('test', test)]</snippet></ROW><ROW><id>7029015</id><snippet>{"test": [{"test": test}, {word: "word"}]}</snippet></ROW><ROW><id>7029015</id><snippet>[('test', [{'test': test}, {word: 'word'}])]</snippet></ROW><ROW><id>7029034</id><snippet>email_list.append(profile.user.id)
</snippet></ROW><ROW><id>7029034</id><snippet>email_list.append(profile.user)
</snippet></ROW><ROW><id>7029222</id><snippet>from stat import *
import os
import time
import shutil
import sys

for file in os.listdir(sys.argv[1]):
  ct = time.localtime()
  datestamp_on_filename = file.split('_')[1].split('.')[0]
  current_date_in_ddmmyy = str(ct.tm_mday) + (('0' + str(ct.tm_mon)) if ct.tm_mon &lt; 10 else str(ct.tm_mon)) + str(ct.tm_year)[2:]
  if datestamp_on_filename != current_date_in_ddmmyy:
    print 'moving ' + file
    shutil.move(sys.argv[1] + "/" + file, 'archived')
</snippet></ROW><ROW><id>7029366</id><snippet>OrderedDict</snippet></ROW><ROW><id>7029366</id><snippet>append</snippet></ROW><ROW><id>7029366</id><snippet>None</snippet></ROW><ROW><id>7029366</id><snippet>k1.append(v)
print k1
</snippet></ROW><ROW><id>7029369</id><snippet>hashlib</snippet></ROW><ROW><id>7029426</id><snippet>In [115]: d=datetime.datetime(2011, 2, 28)

In [116]: (d.day-1)//7+1
Out[116]: 4

In [117]: d=datetime.datetime(2011, 8, 29)

In [118]: (d.day-1)//7+1
Out[118]: 5
</snippet></ROW><ROW><id>7029553</id><snippet>parser._parse</snippet></ROW><ROW><id>7029553</id><snippet>_timelex</snippet></ROW><ROW><id>7029553</id><snippet>parserinfo</snippet></ROW><ROW><id>7029553</id><snippet>parserinfo</snippet></ROW><ROW><id>7029553</id><snippet>fuzzy</snippet></ROW><ROW><id>7029553</id><snippet>from dateutil.parser import _timelex, parser

a = "I like peas on 2011-04-23, and I also like them on easter and my birthday, the 29th of July, 1928"

p = parser()
info = p.info

def timetoken(token):
  try:
    float(token)
    return True
  except ValueError:
    pass
  return any(f(token) for f in (info.jump,info.weekday,info.month,info.hms,info.ampm,info.pertain,info.utczone,info.tzoffset))

def timesplit(input_string):
  batch = []
  for token in _timelex(input_string):
    if timetoken(token):
      if info.jump(token):
        continue
      batch.append(token)
    else:
      if batch:
        yield " ".join(batch)
        batch = []
  if batch:
    yield " ".join(batch)

for item in timesplit(a):
  print "Found:", item
  print "Parsed:", p.parse(item)
</snippet></ROW><ROW><id>7029553</id><snippet>six</snippet></ROW><ROW><id>7029553</id><snippet>str</snippet></ROW><ROW><id>7029553</id><snippet>from cStringIO import StringIO
for item in timesplit(StringIO(a)):
  print "Found:", item
  print "Parsed:", p.parse(StringIO(item))
</snippet></ROW><ROW><id>7029553</id><snippet>from dateutil.parser import _timelex, parser, parserinfo
info = parserinfo(dayfirst=True)
p = parser(info)
</snippet></ROW><ROW><id>7029581</id><snippet>eval()</snippet></ROW><ROW><id>7029581</id><snippet>eval()</snippet></ROW><ROW><id>7029581</id><snippet>src = getSourceFromMaster()
obj = compile(src, "master.py", "exec")
exec(obj)
</snippet></ROW><ROW><id>7029581</id><snippet># save this as greeting.py
class GreetingMaker(object):
    def get_fortune(self, name):
        return "Hello, {0}. Here is your fortune message:\n" \
               "Behold the warranty -- the bold print giveth and the fine print taketh away.".format(name)
</snippet></ROW><ROW><id>7029581</id><snippet># save this as client.py
import greeting
name=raw_input("What is your name? ")
greeting_maker=greeting.GreetingMaker()
print greeting_maker.get_fortune(name)
</snippet></ROW><ROW><id>7029581</id><snippet>$ python client.py
What is your name? Irmen
Hello, Irmen. Here is your fortune message:
Behold the warranty -- the bold print giveth and the fine print taketh away.
</snippet></ROW><ROW><id>7029581</id><snippet>import greeting</snippet></ROW><ROW><id>7029789</id><snippet>split()</snippet></ROW><ROW><id>7029789</id><snippet>'-0.2'.split()</snippet></ROW><ROW><id>7029789</id><snippet>['-0.2']</snippet></ROW><ROW><id>7029789</id><snippet>-0.733029194040.765257900121</snippet></ROW><ROW><id>7029789</id><snippet>-0.0783532095182 -0.99415440702 -0.692972552716 -0.639273674023 -0.733029194040 -0.765257900121 -0.755438339963
-0.144140594077 -1.06533353638 -0.366278118372 -0.746931508538 -1.02549039392 -0.296715961215
-0.0915937502791 -1.68680560936 -0.955147543358
-0.0488457137771 -0.0943080192383 -0.747534412969 -1.00491121699
-1.43973471463
-0.0642611118901 -0.0910684525497
-1.19327387414 -0.0794696449245
-1.00791366035 -0.0509749096549
-1.08046507281 -0.957339914505 -0.861495748259
</snippet></ROW><ROW><id>7029789</id><snippet>f = open('clusters_scores.out','r')
#first, extract all of the sim values
val = []
for line in f:
    linevals = line.split()
    print linevals
    val += linevals
print val
val = map(float, val)
maxv = max(val)
minv = min(val)
setrange = float(maxv) - float(minv)
</snippet></ROW><ROW><id>7029952</id><snippet>split</snippet></ROW><ROW><id>7029952</id><snippet>os.path</snippet></ROW><ROW><id>7029952</id><snippet>from os.path import dirname, split, isdir
parent_dir = lambda x: split(x)[0] if isdir(x) else split(dirname(x))[0]
</snippet></ROW><ROW><id>7029952</id><snippet>lambda</snippet></ROW><ROW><id>7029952</id><snippet>x</snippet></ROW><ROW><id>7029952</id><snippet>split</snippet></ROW><ROW><id>7029952</id><snippet>x</snippet></ROW><ROW><id>7029952</id><snippet>C:\Foo\Bar\file.spam =&gt; (C:\Foo\Bar\, file.spam)</snippet></ROW><ROW><id>7029952</id><snippet>path = r"C:\Foo\Bar\file.spam"
print "Parent directory of " + path + ":", parent_dir(path)
</snippet></ROW><ROW><id>7029952</id><snippet>from os.path import dirname, split, isdir
parent_dir = lambda x: split(x)[0] if isdir(x) else dirname(x)
</snippet></ROW><ROW><id>7030068</id><snippet>&gt;&gt;&gt; d = {1: 'a', 2: 'b', None: 'c'}
&gt;&gt;&gt; 1 in d
True
&gt;&gt;&gt; 5 in d
False
&gt;&gt;&gt; None in d
True
</snippet></ROW><ROW><id>7030274</id><snippet>MyModel.objects.filter(**your_filters).extra(select={
  'measure_name': 
    'SELECT measure.name FROM measure WHERE mymodeltable.measure_id = measure.id'
})
</snippet></ROW><ROW><id>7030401</id><snippet>File "/usr/lib/python2.7/idlelib/PyShell.py", line 64, in idle_showwarning
    lineno, file=file, line=line))
TypeError: idle_formatwarning() got an unexpected keyword argument 'file'
</snippet></ROW><ROW><id>7030401</id><snippet>def formatwarning(message, category, filename, lineno, line=None)
</snippet></ROW><ROW><id>7030594</id><snippet>&gt;&gt;&gt; from django.template.defaultfilters import slugify
&gt;&gt;&gt; slugify("Pão com Ovo")
u'pao-com-ovo'
&gt;&gt;&gt; slugify(""""Bird's Milk" Cake""")
u'birds-milk-cake'
</snippet></ROW><ROW><id>7030595</id><snippet>numpy.random.seed()</snippet></ROW><ROW><id>7030595</id><snippet>numpy.random.seed()</snippet></ROW><ROW><id>7030595</id><snippet>numpy.random.Random</snippet></ROW><ROW><id>7030595</id><snippet>random.random.seed()</snippet></ROW><ROW><id>7030595</id><snippet>numpy.random</snippet></ROW><ROW><id>7030595</id><snippet>random.random</snippet></ROW><ROW><id>7030712</id><snippet>import re
test = """
&gt;word
&gt;word2
don't replace
"""
print re.sub('(&gt;).*', r'\1replace!', test)
</snippet></ROW><ROW><id>7030712</id><snippet>&gt;replace!
&gt;replace!
don't replace
</snippet></ROW><ROW><id>7030712</id><snippet>re.sub</snippet></ROW><ROW><id>7030712</id><snippet>&gt;</snippet></ROW><ROW><id>7030712</id><snippet>&gt;</snippet></ROW><ROW><id>7030846</id><snippet>return not bool
</snippet></ROW><ROW><id>7030907</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>7030907</id><snippet>class ScribPartAdmin(model.ModelAdmin):
    ...
    your normal stuff...
    ...

    class Media:
        js = ('/path/to/your/file.js',)
</snippet></ROW><ROW><id>7030907</id><snippet>class</snippet></ROW><ROW><id>7030907</id><snippet>textarea</snippet></ROW><ROW><id>7030907</id><snippet>from django import forms

class ScribPartAdmin(model.ModelAdmin):
    ...
    your normal stuff...
    ...

    class Meta:
        widgets = {'text': forms.Textarea(attrs={'class': 'mymarkup'})}
</snippet></ROW><ROW><id>7030984</id><snippet>import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
# print plt.xlim()
plt.xlim(0, 10000)
# or 
# plt.xlim(xmin=0, xmax=10000)
</snippet></ROW><ROW><id>7031075</id><snippet>date_time_secs = time.mktime(datetimeobj.timetuple())
</snippet></ROW><ROW><id>7031075</id><snippet>date_time_milis = time.mktime(datetimeobj.timetuple()) * 1000 + datetimeobj.microsecond / 1000
</snippet></ROW><ROW><id>7031094</id><snippet>poly = poly_coeff(start_time, end_time, lines)
</snippet></ROW><ROW><id>7031094</id><snippet>poly = poly_coeff(start_time, end_time, lines * frame)
</snippet></ROW><ROW><id>7031094</id><snippet>for i in range(lines) : 
    i = i * frame
</snippet></ROW><ROW><id>7031801</id><snippet>data</snippet></ROW><ROW><id>7031801</id><snippet>a</snippet></ROW><ROW><id>7031801</id><snippet>a = open('data.txt','r')
b = pickle.load(a) 
c = pickle.load(a)
d = pickle.load(a)
a.close()
</snippet></ROW><ROW><id>7031801</id><snippet>pickle</snippet></ROW><ROW><id>7031847</id><snippet>from itertools import chain
myset = set(chain(iterable1, iterable2, iterable3, iterable4))
</snippet></ROW><ROW><id>7031847</id><snippet>chain</snippet></ROW><ROW><id>7031847</id><snippet>sorted(myset)</snippet></ROW><ROW><id>7031847</id><snippet>Student</snippet></ROW><ROW><id>7031847</id><snippet>__hash__</snippet></ROW><ROW><id>7031847</id><snippet>__eq__</snippet></ROW><ROW><id>7031847</id><snippet>def __hash__(self):
    return (self.name, self.ID, self.age).__hash__()
</snippet></ROW><ROW><id>7032473</id><snippet>str</snippet></ROW><ROW><id>7032473</id><snippet>bytes</snippet></ROW><ROW><id>7032473</id><snippet>bytes is str</snippet></ROW><ROW><id>7032495</id><snippet>tokenize.generate_tokens</snippet></ROW><ROW><id>7032495</id><snippet>import tokenize
import io

def nocomment(s):
    result = []
    g = tokenize.generate_tokens(io.BytesIO(s).readline)  
    for toknum, tokval, _, _, _  in g:
        # print(toknum,tokval)
        if toknum != tokenize.COMMENT:
            result.append((toknum, tokval))
    return tokenize.untokenize(result)

with open('script.py','r') as f:
    content=f.read()

print(nocomment(content))
</snippet></ROW><ROW><id>7032495</id><snippet>def foo(): # Remove this comment
    ''' But do not remove this #1 docstring 
    '''
    # Another comment
    pass
</snippet></ROW><ROW><id>7032495</id><snippet>nocomment</snippet></ROW><ROW><id>7032495</id><snippet>def foo ():
    ''' But do not remove this #1 docstring 
    '''

    pass 
</snippet></ROW><ROW><id>7032505</id><snippet>def main():
    totalChars = 0
    for i in range(1,500):
        stringConverted = stringConvert(i)
        if stringConverted is None:
            print i
            break
        totalChars = totalChars + len(stringConverted)
    else:
        print "No error!"
    print totalChars
</snippet></ROW><ROW><id>7032507</id><snippet>%</snippet></ROW><ROW><id>7032507</id><snippet>!</snippet></ROW><ROW><id>7032507</id><snippet>:help :%</snippet></ROW><ROW><id>7032507</id><snippet>:help :!</snippet></ROW><ROW><id>7032623</id><snippet>"Soil"</snippet></ROW><ROW><id>7032623</id><snippet>"Tree"</snippet></ROW><ROW><id>7032623</id><snippet>if xmlfilename == "Soil" or xmlfilename == "Tree":
    # The rest of your code
</snippet></ROW><ROW><id>7032623</id><snippet>def read_xml_data():
    # Your code block

if xmlfilename == "Soil" or xmlfilename == "Tree":
    read_xml_data()
</snippet></ROW><ROW><id>7032623</id><snippet>def read_xml_data(param):
   if param == "value1":
      # do one thing
   elif param == "value2":
      # do something else
</snippet></ROW><ROW><id>7032624</id><snippet>#!/usr/bin/env python2.6
from lxml.html import fromstring, tostring
from lxml.html import builder as E
fragment = """\
&lt;div id="outer"&gt;
  &lt;div id="inner"&gt;This is div.&lt;/div&gt;
&lt;/div&gt;"""

div = fromstring(fragment)
print tostring(div)
# &lt;div id="outer"&gt;
#   &lt;div id="inner"&gt;This is div.&lt;/div&gt;
# &lt;/div&gt;
div.replace(div.get_element_by_id('inner'), E.DIV('Hello ', E.B('world!')))
print tostring(div)
# &lt;div id="outer"&gt;
#   &lt;div&gt;Hello &lt;b&gt;world!&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>7032624</id><snippet>import lxml.html
content_tag = lxml.html.fromstring('&lt;div&gt;Goodbye.&lt;/div&gt;')
content_tag.text = '' # assumes only text to start
for elem in lxml.html.fragments_fromstring('Hello &lt;b&gt;world!&lt;/b&gt;'):
    if type(elem) == str: #but, only the first?
        content_tag.text += elem
    else:
        content_tag.append(elem)
print lxml.html.tostring(content_tag)
</snippet></ROW><ROW><id>7032624</id><snippet>somehtml = 'Hello &lt;b&gt;world!&lt;/b&gt;'
# purge element contents
content_tag.text = ''
for child in content_tag.getchildren():
    content_tag.remove(child)

fragments = lxml.html.fragments_fromstring(somehtml)
if type(fragments[0]) == str:
    content_tag.text = fragments.pop(0)
content_tag.extend(fragments)
</snippet></ROW><ROW><id>7032648</id><snippet>import re
# assume connection is set up, and db
# is a pymongo.database.Database instance
date_re = re.compile(r'2011-8-11')
db.collection.find({'date': date_re})
</snippet></ROW><ROW><id>7032648</id><snippet>.</snippet></ROW><ROW><id>7032648</id><snippet>^</snippet></ROW><ROW><id>7032648</id><snippet>$</snippet></ROW><ROW><id>7032886</id><snippet>death_toll</snippet></ROW><ROW><id>7032886</id><snippet>death_toll == death_toll + 1
</snippet></ROW><ROW><id>7032886</id><snippet>False</snippet></ROW><ROW><id>7032886</id><snippet>death_toll = death_toll +1
</snippet></ROW><ROW><id>7032886</id><snippet>global</snippet></ROW><ROW><id>7032886</id><snippet>cheat_death</snippet></ROW><ROW><id>7032886</id><snippet>def cheat_death(numbers):
    global death_toll

    if death_toll &lt; 1:

        # This counts as a used chance.  Increment the counter.
        death_toll = death_toll + 1

        shuffle(numbers)

        question = "%d + %d - %d + %d - %d + %d" % tuple(numbers)

        print "You have a single chance to cheat death. To live, please answer the question correctly below:"
        print question

        answer = eval(question)
        print answer

        user_answer = raw_input("&gt; ")

        if str(user_answer) == str(answer):
            start()
        else:
            dead()
    else:
        dead()
</snippet></ROW><ROW><id>7032886</id><snippet>start()</snippet></ROW><ROW><id>7032920</id><snippet>points</snippet></ROW><ROW><id>7032920</id><snippet>points = points.split(",")
# points = ["0.793803","0.136326","0","0.5","0"]
# Now you can use John Gaines suggestion
# to unpack your variables
point1x, point1y, point1z, point1w = points
</snippet></ROW><ROW><id>7032920</id><snippet>points</snippet></ROW><ROW><id>7032920</id><snippet>None</snippet></ROW><ROW><id>7032920</id><snippet># Somewhere earlier
max_entries = 5
# ... snip ...
# points = ["0.793803","0.136326","0"]
cur_len = len(points)
if cur_len &gt; max_entries:
    raise ValueError("%d points discovered in %s.  Max entries is %d" % (cur_len, points, max_entries)
 if cur_len != max_entries:
     points += [None] * (max_entries - cur_len)
 # Continue from here
</snippet></ROW><ROW><id>7033060</id><snippet>&lt;form action = '{% url search %}' method='GET'&gt;
    &lt;label&gt;Query: &lt;input type='search' name='query'&gt;&lt;/label&gt;
    &lt;input type='submit' value='Go'&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>7033060</id><snippet>def search_form_processor(request):
    return {'search_form': SearchForm()}
</snippet></ROW><ROW><id>7033060</id><snippet>&lt;form action = '{% url search %}' method='GET'&gt;
    {{ search_form.query.label_tag }} {{ search_form.query }}
    &lt;input type='submit' value='Go'&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>7033254</id><snippet>-</snippet></ROW><ROW><id>7033254</id><snippet>_</snippet></ROW><ROW><id>7033254</id><snippet>%</snippet></ROW><ROW><id>7033254</id><snippet>@</snippet></ROW><ROW><id>7033254</id><snippet>.</snippet></ROW><ROW><id>7033254</id><snippet>[a-zA-Z0-9._%+-]</snippet></ROW><ROW><id>7033276</id><snippet>len(input) == 10</snippet></ROW><ROW><id>7033276</id><snippet>range(0, len(input))</snippet></ROW><ROW><id>7033276</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</snippet></ROW><ROW><id>7033276</id><snippet>input[lines+3</snippet></ROW><ROW><id>7033276</id><snippet>index[10]</snippet></ROW><ROW><id>7033276</id><snippet>[11]</snippet></ROW><ROW><id>7033276</id><snippet>line1.split(':')[4]</snippet></ROW><ROW><id>7033276</id><snippet>line1.count(":") &lt; 4</snippet></ROW><ROW><id>7033276</id><snippet>at</snippet></ROW><ROW><id>7033276</id><snippet>break</snippet></ROW><ROW><id>7033276</id><snippet>input</snippet></ROW><ROW><id>7033276</id><snippet>input</snippet></ROW><ROW><id>7033276</id><snippet>range(0, len(input)) == range(len(input))</snippet></ROW><ROW><id>7033365</id><snippet>getattr()</snippet></ROW><ROW><id>7033513</id><snippet>[:]</snippet></ROW><ROW><id>7033899</id><snippet>for s in ("stdin","stdout","stderr"): 
   setattr(sys, s, io.TextIOWrapper(getattr(sys, s).detach(), encoding="utf8"))
</snippet></ROW><ROW><id>7033899</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>7033899</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>7033899</id><snippet>u'...'</snippet></ROW><ROW><id>7033899</id><snippet>#!/usr/bin/env python3.2
# -*- coding: UTF-8 -*-

from __future__ import print_function
from __future__ import unicode_literals

import re
import sys
import os

if not (("PYTHONIOENCODING" in os.environ)
            and
        re.search("^utf-?8$", os.environ["PYTHONIOENCODING"], re.I)):
    sys.stderr.write(sys.argv[0] + ": Please set your PYTHONIOENCODING envariable to utf8\n")
    sys.exit(1)

import unicodedata
if unicodedata.unidata_version &lt; "6.0.0":
    print("WARNING: Your old UCD is out of date, expected at least 6.0.0 but got", 
           unicodedata.unidata_version)

wide_enough = (sys.maxunicode &gt;= 0x10FFFF)
if not wide_enough:
    print("WARNING: Narrow build detected, your Python lacks full Unicode support!!")
</snippet></ROW><ROW><id>7033926</id><snippet>delimitedList</snippet></ROW><ROW><id>7033926</id><snippet>Optional( CaselessKeyword('order by') + 
        delimitedList(Group(columnNameList('order') + 
                            Optional(order_dir, default="asc")('order_dir')))('orderByColumns')
        )
</snippet></ROW><ROW><id>7033926</id><snippet>if result.orderByColumns:
    for ocol in result.orderByColumns:
        print "Order by %(order)s (%(order_dir)s)" % ocol
</snippet></ROW><ROW><id>7033973</id><snippet>import re

s = '''alhambra
&lt;style type="text/css"&gt;
body { ... }
&lt;/style&gt;
toromizuXXXXXXXX
YYYYYYYYYYYYYY'''
print s,'\n'

regx = re.compile("&lt;style[\s\S]*?&lt;/style&gt;|(?&lt;=ro)mizu.+")

s = regx.sub('AAA',s)
print s
</snippet></ROW><ROW><id>7033973</id><snippet>alhambra
&lt;style type="text/css"&gt;
body { ... }
&lt;/style&gt;
toromizuXXXXXXXX
YYYYYYYYYYYYYY 

alhambra
AAA
toroAAA
YYYYYYYYYYYYYY
</snippet></ROW><ROW><id>7033974</id><snippet># When run as a cgi script, this will print the client's IP address.

import cgi
import os

print "Content-type: text/html"
print ""

print cgi.escape(os.environ["REMOTE_ADDR"])
</snippet></ROW><ROW><id>7034048</id><snippet>phonlist
</snippet></ROW><ROW><id>7034048</id><snippet>phonlist[next_row]
</snippet></ROW><ROW><id>7034048</id><snippet>list</snippet></ROW><ROW><id>7034048</id><snippet>None</snippet></ROW><ROW><id>7034048</id><snippet>curr_low, curr_high = phonlist[curr_row][curr_col]
next_low, next_high = phonlist[next_row][next_col]
</snippet></ROW><ROW><id>7034048</id><snippet>phonlist[next_row]</snippet></ROW><ROW><id>7034048</id><snippet>None</snippet></ROW><ROW><id>7034049</id><snippet>try:
  from myapp.specific_settings import *
except ImportError:
  pass
</snippet></ROW><ROW><id>7034049</id><snippet>import os
directory = os.path.dirname(__file__)
if directory == '/home/yourname/development/':
    from myapp.development_settings import *
else:
    from myapp.production_settings import * 
</snippet></ROW><ROW><id>7034094</id><snippet>.</snippet></ROW><ROW><id>7034094</id><snippet>__func__</snippet></ROW><ROW><id>7034094</id><snippet>moo</snippet></ROW><ROW><id>7034427</id><snippet>import subprocess
retcode = subprocess.call(['abq684', 'cae', 'script=XX.py'])
</snippet></ROW><ROW><id>7034431</id><snippet>video/cd/src</snippet></ROW><ROW><id>7034431</id><snippet>import xml.etree.ElementTree as etree
data='''&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;videos xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:www="http://www.www.com"&gt;&lt;video type="cl"&gt;&lt;cd&gt;&lt;src lang="music"&gt;http://www.google.com/ &lt;/src&gt;&lt;/cd&gt;&lt;/video&gt;&lt;/videos&gt;'''
tree = etree.fromstring(data)
geturl=tree.findtext('video/cd/src').strip()
print geturl
</snippet></ROW><ROW><id>7034431</id><snippet>http://www.google.com/
</snippet></ROW><ROW><id>7034431</id><snippet>xmlns:www="http://www.www.com""</snippet></ROW><ROW><id>7034457</id><snippet>import numpy
tmp=numpy.array([-24160,18597,-24160,18597,-24160, 0], numpy.int16)
tmp.dtype = numpy.float32
print tmp
</snippet></ROW><ROW><id>7034457</id><snippet>[  3.39213000e+05   3.39213000e+05   5.79801253e-41]
</snippet></ROW><ROW><id>7034706</id><snippet>reduce</snippet></ROW><ROW><id>7034706</id><snippet>def escape_query(query):
  special_chars =  ['\\','+','-','&amp;&amp;','||','!','(',')','{','}','[',']',
                     '^','"','~','*','?',':']
  return reduce(lambda q, c: q.replace(c, '\\%s' % c), special_chars, query)
</snippet></ROW><ROW><id>7035027</id><snippet>NSRunLoop.currentRunLoop.addTimer_forMode(timer,NSRunLoopCommonModes)
</snippet></ROW><ROW><id>7035120</id><snippet>::

&gt;     def foo(x):
&gt;         pass
</snippet></ROW><ROW><id>7035222</id><snippet>numpy.clip(x, 0, 255)
</snippet></ROW><ROW><id>7035277</id><snippet>def get_context_data(self, **kwargs):
    context_data = super(EntryView, self).get_context_data(**kwargs)
    related_entries = Entry.objects.filter(
        tags__name__in=list(self.object.tags.values_list('name', flat=True))
    ).exclude(id=self.object.id)
    context_data['related_entries'] = related_entries
    return context_data
</snippet></ROW><ROW><id>7035387</id><snippet>from selenium import webdriver

profile = webdriver.FirefoxProfile()
profile.set_preference('network.http.phishy-userpass-length', 255)
driver = webdriver.Firefox(firefox_profile=profile)
driver.get("https://username:password@somewebsite.com/")
</snippet></ROW><ROW><id>7035467</id><snippet>import numpy as np
# initialise some data with None in it
a = np.array([1, 2, 3, None])
a = np.where(a == np.array(None), 9999, a)
</snippet></ROW><ROW><id>7035467</id><snippet>None</snippet></ROW><ROW><id>7035577</id><snippet>init</snippet></ROW><ROW><id>7035703</id><snippet>import d
</snippet></ROW><ROW><id>7035703</id><snippet>&gt;&gt;&gt; from d import d
&gt;&gt;&gt; d.var = 5
&gt;&gt;&gt; d.printVar()
from d: var=5
</snippet></ROW><ROW><id>7035753</id><snippet> hashtags = [word[1:] for word in i.text.split() if word.startswith('#')]
</snippet></ROW><ROW><id>7035996</id><snippet>django.contrib.markup.templatetags.markup.markdown</snippet></ROW><ROW><id>7035996</id><snippet>{{ biography|markdown:"safe" }}
</snippet></ROW><ROW><id>7036173</id><snippet>re.match(pattern, str, re.MULTILINE | re.IGNORECASE)
</snippet></ROW><ROW><id>7036173</id><snippet>my.func(a, b, c, my.MULTLINE, my.IGNORECASE)
</snippet></ROW><ROW><id>7036914</id><snippet>def hello3(self,a,b=None):
    if b is None:
        print "Hello3 1 param", a
    else:
        print "Hello3 2 param", a, b

...

obj1.hello3("a")#passes None for b param
obj1.hello3("a", "b")
</snippet></ROW><ROW><id>7037128</id><snippet>Qt::ItemDataRole enum</snippet></ROW><ROW><id>7037128</id><snippet>TextAlignmentRole</snippet></ROW><ROW><id>7037128</id><snippet>def data(self, index, role): 
    if index.isValid():
        return QVariant()

    if role == Qt.DisplayRole:
        return QVariant(self.arraydata[index.row()][index.column()])
    elif role == Qt.TextAlignmentRole:
        return QVariant(Qt.AlignRight | Qt.AlignVCenter)

    return QVariant() 
</snippet></ROW><ROW><id>7037502</id><snippet>&gt;&gt;&gt; import django
&gt;&gt;&gt; django
&lt;module 'django' from '/usr/local/lib/python2.6/dist-packages/django/__init__.pyc'&gt;
</snippet></ROW><ROW><id>7037604</id><snippet>self._pm_users.append(PersonalMessageUser(
    message=self, user_type='From', user=from_,
))
</snippet></ROW><ROW><id>7037604</id><snippet>PersonalMessageUser(
    message=self, user_type='From', user=from_,
)
</snippet></ROW><ROW><id>7037604</id><snippet>self._pm_users.append(
    PersonalMessageUser(user_type='From', user=from_,)
)       
</snippet></ROW><ROW><id>7037604</id><snippet>relationship property</snippet></ROW><ROW><id>7037872</id><snippet>\A</snippet></ROW><ROW><id>7037872</id><snippet>(?![\d\-])</snippet></ROW><ROW><id>7037872</id><snippet>(?&lt;!\-)</snippet></ROW><ROW><id>7037872</id><snippet>DOMAIN_LABEL_RE = """
(?i               # case insensitive
  \A(
    ([a-z])       # need at least 1 letter and cannot start with digit or hyphen
    ([a-z\d-]*?)
    (?&lt;!-)        # cannot end with a hyphen
  )\Z
)
"""
</snippet></ROW><ROW><id>7037967</id><snippet>from PIL import Image
import StringIO
import urllib2

class MyModel(models.Model):
    # ... fields 1,2,3 etc, and assuming the url field is called image_url

    def pre_save():
        # obtain attributes of image from url field
        # save it to various fields
        img = urllib2.urlopen(self.image_url).read()
        im = Image.open(StringIO.StringIO(img))
        self.image_width, self.image_height = im.size

    def save(self, *args, **kwargs):
        self.pre_save()
        super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>7038193</id><snippet>rows = ws.get_rows()
rows[0]._Row_cells[0].xf_idx = styleindex 
</snippet></ROW><ROW><id>7038193</id><snippet>style0 = xlwt.easyxf('font: name Times New Roman, color-index red, bold on',
                 num_format_str='#,##0.00')
styleindex = wb.add_style(style0)
</snippet></ROW><ROW><id>7038193</id><snippet>wb</snippet></ROW><ROW><id>7038193</id><snippet>ws</snippet></ROW><ROW><id>7038237</id><snippet># create auth
auth = Auth(db)
# create the country table
db.define_table('country',
                Field('name'),
                Field('desc'),
                format = '%(name)s')
# say you want to add it to auth_user table (not yet created)
auth.settings.extra_fields['auth_user']=[Field('country','reference country')]
# ask auth to make the auth tables, including auth_user
auth.define_tables()
</snippet></ROW><ROW><id>7038319</id><snippet>val = ~key_equal + P.Word(P.alphanums+', ')
</snippet></ROW><ROW><id>7038319</id><snippet>', '</snippet></ROW><ROW><id>7038319</id><snippet>','</snippet></ROW><ROW><id>7038319</id><snippet>' '</snippet></ROW><ROW><id>7038319</id><snippet>val = ~key_equal + P.delimitedList(P.Word(P.alphanums), ", ", combine=True)
</snippet></ROW><ROW><id>7038319</id><snippet>gr = P.Group(key_equal+val)
</snippet></ROW><ROW><id>7038319</id><snippet>gr = P.Group(P.OneOrMore(key_equal+val))
</snippet></ROW><ROW><id>7038319</id><snippet>&gt;&gt;&gt; import pyparsing as P
&gt;&gt;&gt; key = P.oneOf("ids fields")
&gt;&gt;&gt; equal = P.Literal('=')
&gt;&gt;&gt; key_equal = key + equal
&gt;&gt;&gt; val = ~key_equal + P.delimitedList(P.Word(P.alphanums), ", ", combine=True)
&gt;&gt;&gt; gr = P.OneOrMore(P.Group(key_equal+val))
&gt;&gt;&gt; print gr.parseString("ids = 12, 13, 14 fields = name, title")
[['ids', '=', '12, 13, 14'], ['fields', '=', 'name, title']]
</snippet></ROW><ROW><id>7038377</id><snippet>sel.click('//a[contains(text(),"Home")]')
</snippet></ROW><ROW><id>7038632</id><snippet>with codecs.open(file_path, 'r', encoding='utf-8', errors='ignore') as log_lines:</snippet></ROW><ROW><id>7038632</id><snippet>with open(file_path, 'r', encoding='utf-8', errors='ignore') as log_lines:</snippet></ROW><ROW><id>7038632</id><snippet>s_port,
time, date,
s_sitename, s_ip,
cs_user_agent, sc_status, sc_substatus, sc_win32_status,
c_ip,
cs_username,
cs_method, cs_uri_stem, cs_uri_query = line_spliter(line)
</snippet></ROW><ROW><id>7038632</id><snippet>import re


ref_fields = ['s-port',
              'time','date', 
              's-sitename', 's-ip',
              'cs(User-Agent)', 'sc-status', 
              'sc-substatus', 'sc-win32-status',
              'c-ip',
              'cs-username',
              'cs-method', 'cs-uri-stem', 'cs-uri-query']

print 'REF_FIELDS :\n------------\n%s\n' % '\n'.join(ref_fields)


############################################
file_path = 'I:\\sample[1].log'                  # Path to put here
############################################


with open(file_path, 'r') as log_lines:
    line = ''
    while line[0:8]!='#Fields:':
        line = next(log_lines)
    # At this point, line is the line containing the fields keywords
    print 'line of the fields keywords:\n----------------------------\n%r\n' % line

    found_fields = line.split()[1:]
    len_found_fields = len(found_fields)
    regex_extractor = re.compile('[ \t]+'.join(len_found_fields*['([^ \t]+)']))
    print 'list found_fields of keywords in the file:\n------------------------------------------\n%s\n' % found_fields

    print '\nfound_fields == ref_fields  is ',found_fields == ref_fields




    if found_fields == ref_fields:
        print '\nNORMAL ORDER\n------------'
        def line_spliter(line):
            return line.split()

    else:
        the_order = [ found_fields.index(fild) + 1 for fild in ref_fields]
        # the_order is the list of indexes localizing the elements of ref_fields 
        # in the order in which they succeed in the actual line of found fields keywords
        print '\nSPECIAL ORDER\n-------------\nthe_order == %s\n\n\n======================' % the_order
        def line_spliter(line):
            return regex_extractor.match(line).group(*the_order)



    for i in xrange(1):
        line = next(log_lines)
        (s_port,
        time, date,
        s_sitename, s_ip,
        cs_user_agent, sc_status, sc_substatus, sc_win32_status,
        c_ip,
        cs_username,
        cs_method, cs_uri_stem, cs_uri_query) = line_spliter(line)
        print ('LINE :\n------\n'
               '%s\n'
               'SPLIT LINE :\n--------------\n'
               '%s\n\n'
               'REORDERED SPLIT LINE :\n-------------------------\n'
               '%s\n\n'
               'EXAMPLE OF SOME CORRECT BINDINGS OBTAINED :\n-------------------------------------------\n'
               'date == %s\n'
               'time == %s\n'
               's_port == %s\n'
               'c_ip == %s\n\n'
               '======================') % (line,'\n'.join(line.split()),line_spliter(line),date,time,s_port,c_ip)




# ---- split each logline into multiple variables, populate dictionaries and db ---- #      
def splitLogline(log_line):
        # needs to be dynamic (for different logging setups)
        s_port,
        time, date,
        s_sitename, s_ip,
        cs_user_agent, sc_status, sc_substatus, sc_win32_status,
        c_ip,
        cs_username,
        cs_method, cs_uri_stem, cs_uri_query = line_spliter(line)
</snippet></ROW><ROW><id>7038632</id><snippet>REF_FIELDS :
------------
s-port
time
date
s-sitename
s-ip
cs(User-Agent)
sc-status
sc-substatus
sc-win32-status
c-ip
cs-username
cs-method
cs-uri-stem
cs-uri-query

line of the fields keywords:
----------------------------
'#Fields: date time s-sitename s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) sc-status sc-substatus sc-win32-status \n'

list found_fields of keywords in the file:
------------------------------------------
['date', 'time', 's-sitename', 's-ip', 'cs-method', 'cs-uri-stem', 'cs-uri-query', 's-port', 'cs-username', 'c-ip', 'cs(User-Agent)', 'sc-status', 'sc-substatus', 'sc-win32-status']


found_fields == ref_fields  is  False

SPECIAL ORDER
-------------
the_order == [8, 2, 1, 3, 4, 11, 12, 13, 14, 10, 9, 5, 6, 7]


======================
LINE :
------
2010-01-01 00:00:03 SITENAME 192.168.1.1 GET /news-views.aspx - 80 - 66.249.72.135 Mozilla/5.0+(compatible;+Googlebot/2.1;++http://www.google.com/bot.html) 200 0 0

SPLIT LINE :
--------------
2010-01-01
00:00:03
SITENAME
192.168.1.1
GET
/news-views.aspx
-
80
-
66.249.72.135
Mozilla/5.0+(compatible;+Googlebot/2.1;++http://www.google.com/bot.html)
200
0
0

REORDERED SPLIT LINE :
-------------------------
('80', '00:00:03', '2010-01-01', 'SITENAME', '192.168.1.1', 'Mozilla/5.0+(compatible;+Googlebot/2.1;++http://www.google.com/bot.html)', '200', '0', '0\n', '66.249.72.135', '-', 'GET', '/news-views.aspx', '-')

EXAMPLE OF SOME CORRECT BINDINGS OBTAINED :
-------------------------------------------
date == 2010-01-01
time == 00:00:03
s_port == 80
c_ip == 66.249.72.135

======================
</snippet></ROW><ROW><id>7038659</id><snippet>import numpy as np

a=range(100)
A = np.array(zip(*[iter(a)]*2),dtype=[('C1','int32'),('C2','int64')])
print(A.dtype)
# [('C1', '&lt;i4'), ('C2', '&lt;i8')]
</snippet></ROW><ROW><id>7038659</id><snippet>print(A['C1'])
# [ 0  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48
#  50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98]
</snippet></ROW><ROW><id>7038719</id><snippet>is</snippet></ROW><ROW><id>7038719</id><snippet>if string is ''</snippet></ROW><ROW><id>7038719</id><snippet>&gt;&gt;&gt; a = "hi"
&gt;&gt;&gt; a is "hi"
True
&gt;&gt;&gt; a = "hi there!"
&gt;&gt;&gt; a is "hi there!"
False
</snippet></ROW><ROW><id>7038719</id><snippet>if string:</snippet></ROW><ROW><id>7038719</id><snippet>if string != '':</snippet></ROW><ROW><id>7038719</id><snippet>if variable:</snippet></ROW><ROW><id>7038719</id><snippet>variable</snippet></ROW><ROW><id>7038719</id><snippet>if variable != "" and variable != 0:</snippet></ROW><ROW><id>7039059</id><snippet>import numpy as np

a = np.array((1,2,3,2,3,2,1,3))

occurences = np.where(a == a.max())

# occurences == array([2, 4, 7])
</snippet></ROW><ROW><id>7039175</id><snippet>\r</snippet></ROW><ROW><id>7039175</id><snippet>animation = "|/-\\"
idx = 0
while thing_not_complete():
    print animation[idx % len(animation)] + "\r",
    idx += 1
    time.sleep(0.1)
</snippet></ROW><ROW><id>7039310</id><snippet>try:
    path = os.environ['SOME_NAME']
    var2 = os.environ['VAR2']
    var3 = os.environ['VAR3']
    var4 = os.environ['VAR4']
except KeyError,e:
    print "Not found: ", e
</snippet></ROW><ROW><id>7039449</id><snippet>*.*</snippet></ROW><ROW><id>7039449</id><snippet>*.*</snippet></ROW><ROW><id>7039677</id><snippet>if letter == "O" or letter == "Q":
if letter in ("O", "Q"):
if letter in "OQ":
</snippet></ROW><ROW><id>7039677</id><snippet>if letter == "O" or "Q":</snippet></ROW><ROW><id>7039677</id><snippet>if (letter == "O") or "Q":</snippet></ROW><ROW><id>7039677</id><snippet>"Q"</snippet></ROW><ROW><id>7039677</id><snippet>True</snippet></ROW><ROW><id>7039677</id><snippet>True</snippet></ROW><ROW><id>7039954</id><snippet>    #!/usr/bin/perl

    use Tie::File;
    for (@ARGV) {
        tie my @array, 'Tie::File', $_ or die $!; 
        unshift @array, "A new line";        
    }
</snippet></ROW><ROW><id>7039954</id><snippet>.py</snippet></ROW><ROW><id>7039954</id><snippet>find . -name '*.py' | xargs perl script.pl</snippet></ROW><ROW><id>7040247</id><snippet>class MyWorker(threading.Thread):
    def __init__(self, local_app_globals, *args, **kwargs):
        self.app_globals=local_app_globals
        super(MyWorker, self).__init__(*args, **kwargs)

    def run():
        #use self.app_globals as app_globals

t=MyWorker(app_globals)
t.start()
</snippet></ROW><ROW><id>7040263</id><snippet>GetContentFeed</snippet></ROW><ROW><id>7040263</id><snippet>CONTENT_FEED_TEMPLATE % (self.domain, self.site)</snippet></ROW><ROW><id>7040309</id><snippet>def create():
    for i in range (1,10):
        lst.insert(i,Button(text=i,command=lambda i=i : prnt(i)).pack())
</snippet></ROW><ROW><id>7040510</id><snippet>from datetime import datetime

dVal = datetime.strptime('10/22/1984', '%m/%d/%Y')
</snippet></ROW><ROW><id>7040659</id><snippet>source</snippet></ROW><ROW><id>7040659</id><snippet>source</snippet></ROW><ROW><id>7040659</id><snippet>source</snippet></ROW><ROW><id>7040659</id><snippet>execfile</snippet></ROW><ROW><id>7040659</id><snippet>source</snippet></ROW><ROW><id>7040920</id><snippet>from pyramid.httpexceptions import HTTPFound

def my_view(request):
    return HTTPFound('/new/location/to/redirect')
</snippet></ROW><ROW><id>7040920</id><snippet>route_url</snippet></ROW><ROW><id>7041054</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render_to_response
from django.core import serializers

def my_view(request) :
    json_data = serializers.serialize('json', my_django_object)
    render_to_response('my_template.html', {'json_data' : json_data})
</snippet></ROW><ROW><id>7041154</id><snippet>x = MyClass("Hi")</snippet></ROW><ROW><id>7041154</id><snippet>$result = exec('python yourscript.py');
</snippet></ROW><ROW><id>7041296</id><snippet>(?:...)</snippet></ROW><ROW><id>7041296</id><snippet>(?=...)</snippet></ROW><ROW><id>7041296</id><snippet>match.group()</snippet></ROW><ROW><id>7041296</id><snippet>$1</snippet></ROW><ROW><id>7041296</id><snippet>[+-/]
</snippet></ROW><ROW><id>7041296</id><snippet>+</snippet></ROW><ROW><id>7041296</id><snippet>/</snippet></ROW><ROW><id>7041296</id><snippet>+,-./</snippet></ROW><ROW><id>7041296</id><snippet>((
\w         # alphanumeric and _
| [!#$%&amp;'*+/=?^_`{|}~-]          # special chars, but no dot at beginning
)
(
\w         # alphanumeric and _
| [!#$%&amp;'*+/=?^_`{|}~-]          # special characters
| ([.](?![.])) # negative lookahead to avoid pairs of dots. 
)*)
(?&lt;!\.)(?=@)           # no end with dot before @
</snippet></ROW><ROW><id>7041296</id><snippet>^(?!\.)                   # no dot at the beginning
(?:
[\w!#$%&amp;'*+/=?^_`{|}~-]   # alnums or special characters except dot
| (\.(?![.@]))            # or dot unless it's before a dot or @ 
)*
(?=@)                     # end before @
</snippet></ROW><ROW><id>7041673</id><snippet>foo = basemod.get_msg()</snippet></ROW><ROW><id>7041673</id><snippet>mod1.bar</snippet></ROW><ROW><id>7041673</id><snippet>foo</snippet></ROW><ROW><id>7041673</id><snippet>None</snippet></ROW><ROW><id>7041673</id><snippet>print_foo</snippet></ROW><ROW><id>7041743</id><snippet>getPage</snippet></ROW><ROW><id>7041743</id><snippet>getPage</snippet></ROW><ROW><id>7041743</id><snippet>noisy</snippet></ROW><ROW><id>7041743</id><snippet>from twisted.web.client import HTTPClientFactory
HTTPClientFactory.noisy = False
</snippet></ROW><ROW><id>7041892</id><snippet>for i, start_time in enumerate(tlist):
    end_time = tlist[i]
</snippet></ROW><ROW><id>7041892</id><snippet>enumerate</snippet></ROW><ROW><id>7041892</id><snippet>start_time</snippet></ROW><ROW><id>7041892</id><snippet>end_time</snippet></ROW><ROW><id>7041892</id><snippet>poly_coeff</snippet></ROW><ROW><id>7041892</id><snippet>[[0,3], [0,2], [0,1], [0,0]]</snippet></ROW><ROW><id>7041892</id><snippet>Newton</snippet></ROW><ROW><id>7041892</id><snippet>poly_differentiate</snippet></ROW><ROW><id>7041892</id><snippet>[[0,2], [0,1], [0,0], [0,-1]]</snippet></ROW><ROW><id>7041892</id><snippet>poly_substitute</snippet></ROW><ROW><id>7041892</id><snippet>term[0]</snippet></ROW><ROW><id>7041892</id><snippet>start_time</snippet></ROW><ROW><id>7041892</id><snippet>end_time</snippet></ROW><ROW><id>7041892</id><snippet>end_time = tlist[i+1]</snippet></ROW><ROW><id>7041892</id><snippet>for i, start_time in enumerate(tlist[:-1]):
    end_time = tlist[i+1]
</snippet></ROW><ROW><id>7041991</id><snippet>text.splitlines(True)</snippet></ROW><ROW><id>7041991</id><snippet>funkyplot(x, y, None, None, None, None, None, None, 'red')</snippet></ROW><ROW><id>7041991</id><snippet>sin(2*pi)</snippet></ROW><ROW><id>7041991</id><snippet>sin(value=2*pi)</snippet></ROW><ROW><id>7041991</id><snippet>plot(x, y, z)</snippet></ROW><ROW><id>7041991</id><snippet>cls.method(self=cls_instance)</snippet></ROW><ROW><id>7041991</id><snippet>self</snippet></ROW><ROW><id>7042247</id><snippet>__setattr__</snippet></ROW><ROW><id>7042247</id><snippet>super(ABCImmutable, self).__setattr__(name, value)</snippet></ROW><ROW><id>7042247</id><snippet>super().__setattr__(name, value)</snippet></ROW><ROW><id>7042592</id><snippet>__hash__</snippet></ROW><ROW><id>7042637</id><snippet>object</snippet></ROW><ROW><id>7042743</id><snippet>__sum__</snippet></ROW><ROW><id>7042743</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; a = [(Decimal("0.99"), ), (Decimal("0.0"), ), (Decimal("113.84"), )]
&gt;&gt;&gt; sum(i[0] for i in a) #Because they're in a tuple
Decimal('114.83')
</snippet></ROW><ROW><id>7042809</id><snippet>&gt;&gt;&gt; box = {
        'colour': 'Red',
        'dimensions': {
            'width': '100px',
            'height': '333px',
         }
    }
&gt;&gt;&gt; print "The box is {colour}, wide {dimensions[width]} and high {dimensions[height]}".format(**box)
The box is Red, wide 100px and high 333px
</snippet></ROW><ROW><id>7042820</id><snippet>map</snippet></ROW><ROW><id>7042820</id><snippet>pattern = "%.4f"
floats = [pattern % i for i in floats]
</snippet></ROW><ROW><id>7042820</id><snippet>map</snippet></ROW><ROW><id>7042820</id><snippet>for</snippet></ROW><ROW><id>7042875</id><snippet>import os 

def gallery(request):
    path="C:\\somedirectory"  # insert the path to your directory   
    img_list =os.listdir(path)   
    return render_to_response('gallery.html', {'images': img_list})
</snippet></ROW><ROW><id>7042875</id><snippet>{% for image in images %}
&lt;img src='/static/{{image}}' /&gt;
{% endfor %}
</snippet></ROW><ROW><id>7042935</id><snippet>urllib2</snippet></ROW><ROW><id>7042935</id><snippet>import base64
import urllib2

headers = {'Authorization': 'Basic ' + base64.encodestring('[username]:[password]')}
req = urllib2.Request(url, data, headers)
resp = urllib2.urlopen(req).read()
</snippet></ROW><ROW><id>7042935</id><snippet>urllib2.HTTPError: HTTP Error 401: Unauthorized</snippet></ROW><ROW><id>7043780</id><snippet>import *</snippet></ROW><ROW><id>7043780</id><snippet>__all__</snippet></ROW><ROW><id>7043817</id><snippet>alter sequence profile_billingaddress_id_seq restart with {id};
</snippet></ROW><ROW><id>7043817</id><snippet>select setval('my_items_id_seq', {id})
</snippet></ROW><ROW><id>7044536</id><snippet>urandom</snippet></ROW><ROW><id>7044536</id><snippet>bytearray(os.urandom(1000000))
</snippet></ROW><ROW><id>7044536</id><snippet>timeit.timeit(lambda:bytearray(os.urandom(1000000)), number=10)
0.0554857286941
</snippet></ROW><ROW><id>7044599</id><snippet>import dis

def test():
    name = 'test'
    tdict = {}
    tdict[name] = 0
    tdict[name] += 1
    tdict[name] += 1

dis.dis(test)
</snippet></ROW><ROW><id>7044599</id><snippet> 13           0 LOAD_CONST               1 ('test')
              3 STORE_FAST               0 (name)

 14           6 BUILD_MAP                0
              9 STORE_FAST               1 (tdict)

 15          12 LOAD_CONST               2 (0)
             15 LOAD_FAST                1 (tdict)
             18 LOAD_FAST                0 (name)
             21 STORE_SUBSCR        

 16          22 LOAD_FAST                1 (tdict)
             25 LOAD_FAST                0 (name)
             28 DUP_TOPX                 2
             31 BINARY_SUBSCR       
             32 LOAD_CONST               3 (1)
             35 INPLACE_ADD         
             36 ROT_THREE           
             37 STORE_SUBSCR        

 17          38 LOAD_FAST                1 (tdict)
             41 LOAD_FAST                0 (name)
             44 DUP_TOPX                 2
             47 BINARY_SUBSCR       
             48 LOAD_CONST               3 (1)
             51 INPLACE_ADD         
             52 ROT_THREE           
             53 STORE_SUBSCR        
             54 LOAD_CONST               0 (None)
             57 RETURN_VALUE        
</snippet></ROW><ROW><id>7044599</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>7044599</id><snippet>tdict</snippet></ROW><ROW><id>7044599</id><snippet>name</snippet></ROW><ROW><id>7045121</id><snippet>uint32</snippet></ROW><ROW><id>7045121</id><snippet>uint8</snippet></ROW><ROW><id>7045121</id><snippet>Y8</snippet></ROW><ROW><id>7045121</id><snippet>Y16</snippet></ROW><ROW><id>7045121</id><snippet>mencoder -rawvideo format=help</snippet></ROW><ROW><id>7045121</id><snippet>import numpy as np
height, width = 20,20

# Make an array with 4 bands of uint8 integers
image = np.zeros((height, width, 4), dtype=np.uint8)

# Filling a single band (red) 
b,g,r,a = image.T
r.fill(255) 

# Fill the image with yellow and leave alpha alone
image[...,:3] = (255, 255, 0) 

# Then when we want to view it as a single, 32-bit band:
image32bit = image.reshape(-1).view(np.uint32).reshape(height, width)
# (Note that this is a view. In other words,  we could change "b" above 
#  and it would change "image32bit")
</snippet></ROW><ROW><id>7045121</id><snippet>import numpy as np
from videosink import VideoSink

height, width = 20,20
numframes = 1000
data = np.random.random((height, width, numframes))

# Rescale your data into 0-255, 8-bit integers 
# (This could be done in-place if you need to conserve memory)
d    ata_rescaled = 255.0 / (data.max() - data.min()) * (data - data.min())
data_rescaled = data_rescaled.astype(np.uint8)

# The key here is the "Y8" format. It's 8-bit grayscale.
video = VideoSink((height,width), "test", rate=20, byteorder="Y8")

# Iterate over last axis
for frame in data.T:
    video.run(frame.T)
video.close()
</snippet></ROW><ROW><id>7045426</id><snippet>Photo.objects.filter(product__id=1)
</snippet></ROW><ROW><id>7045426</id><snippet>Product.objects.filter(photo__id=2)
</snippet></ROW><ROW><id>7045426</id><snippet>photo.product   
</snippet></ROW><ROW><id>7045426</id><snippet>product.photo_set
</snippet></ROW><ROW><id>7045643</id><snippet>file</snippet></ROW><ROW><id>7045677</id><snippet>from PIL import ImageGrab
im = ImageGrab.grabclipboard()
im.save('somefile.png','PNG')
</snippet></ROW><ROW><id>7045788</id><snippet>annotate</snippet></ROW><ROW><id>7045788</id><snippet>plt.annotate('Something', xy=(0.05, 0.95), xycoords='axes fraction')
</snippet></ROW><ROW><id>7045788</id><snippet>plt.annotate('Something', xy=(0, 1), xytext=(12, -12), va='top'
             xycoords='axes fraction', textcoords='offset points')
</snippet></ROW><ROW><id>7045809</id><snippet>def makefilter(a, c):
   def myfilter(x):
       return a &lt; x &lt; c
   return myfilter

foo = makefilter(1, 4)

myList = [1, 2, 3, 4, 5, 6]
filter(foo, myList)
&gt;&gt;&gt; [2, 3]`
</snippet></ROW><ROW><id>7046038</id><snippet>import datetime, calendar
date1 = datetime.date(year1, month1, day1) # month and day are 1-base
date2 = datetime.date(year2, month2, day2)
days_in_first_year = (datetime.date(year1,12,31)-date1).days
days_in_last_year = (date2 - datetime.date(year2, 1, 1)).days
if year1 != year2:
    n_days_list = [days_in_first_year]
    for year in range(year1+1, year2): n_days_list.append(365 + (1*calendar.isleap(year)))
    n_days_list.append(days_in_last_year)
else: n_days_list = [days_in_first_year + days_in_last_year]
</snippet></ROW><ROW><id>7046259</id><snippet>Album</snippet></ROW><ROW><id>7046341</id><snippet>itertools.product([False,True],repeat=5)
</snippet></ROW><ROW><id>7046341</id><snippet>itertools.product([False,True],repeat=2)</snippet></ROW><ROW><id>7046341</id><snippet>(False, False)
(False, True)
(True, False)
(True, True)
</snippet></ROW><ROW><id>7046817</id><snippet>insert into mytable (id, ...) values ((select nextval from mytable_id_seq), ...)</snippet></ROW><ROW><id>7046817</id><snippet>merge</snippet></ROW><ROW><id>7046817</id><snippet>add</snippet></ROW><ROW><id>7046817</id><snippet>session</snippet></ROW><ROW><id>7046817</id><snippet>add</snippet></ROW><ROW><id>7046817</id><snippet>merge</snippet></ROW><ROW><id>7046916</id><snippet>def embed_ipython(window):
    "wrapper funcs - works &lt; IPython 0.11"
    from IPython.Shell import IPShellEmbed
    ipshell = IPShellEmbed(user_ns = dict(w = window))
    ipshell()
</snippet></ROW><ROW><id>7046916</id><snippet>if __name__ == "__main__":
    import sys
    from PyQt4 import QtGui
    app = QtGui.QApplication(sys.argv)
    window = QtGui.QMainWindow()
    window.show()
    embed_ipython(window)
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>7046917</id><snippet>inputter.exec_()
</snippet></ROW><ROW><id>7046917</id><snippet>inputter.show()
</snippet></ROW><ROW><id>7046998</id><snippet>str</snippet></ROW><ROW><id>7046998</id><snippet>unicode</snippet></ROW><ROW><id>7046998</id><snippet>html.decode</snippet></ROW><ROW><id>7046998</id><snippet>encode</snippet></ROW><ROW><id>7046998</id><snippet>'utf_8_sig'</snippet></ROW><ROW><id>7046998</id><snippet>\x00</snippet></ROW><ROW><id>7046998</id><snippet>html.decode('utf-16')</snippet></ROW><ROW><id>7047048</id><snippet>__repr__</snippet></ROW><ROW><id>7047048</id><snippet>(list of matched tokens, dict of named tokens)
</snippet></ROW><ROW><id>7047048</id><snippet>__getitem__</snippet></ROW><ROW><id>7047048</id><snippet>__getitem__</snippet></ROW><ROW><id>7047048</id><snippet>__getattr__</snippet></ROW><ROW><id>7047048</id><snippet>from pyparsing import *

# define an integer token, and a parse-time conversion function
def cvtInteger(tokens):
    return int(tokens[0])
integer = Word(nums).setParseAction(cvtInteger)

# define an animal type, with optional plural 's'
animal = Combine(oneOf("dog cat monkey duck llama") + Optional("s"))

# define an expression for some number of animals
# assign results names 'qty' and 'animal' for named access
# to parsed data tokens
inventoryItem = integer("qty") + animal("animal")

# some test cases
items = """\
    7 llamas
    1 duck
    3 dogs
    14 monkeys""".splitlines()

for item in items:
    info = inventoryItem.parseString(item)
    # print the parsed item
    print type(info), repr(info)

    # use string key to access dict item
    print info['qty']

    # use object attribute to access dict item
    print info.animal

    # use list indexing to access items in list
    print info[-1]

    # use object attribute to access
    print info.average_weight
</snippet></ROW><ROW><id>7047048</id><snippet>&lt;class 'pyparsing.ParseResults'&gt; ([7, 'llamas'], {'animal': [('llamas', 1)], 'qty': [(7, 0)]})
7
llamas
llamas

&lt;class 'pyparsing.ParseResults'&gt; ([1, 'duck'], {'animal': [('duck', 1)], 'qty': [(1, 0)]})
1
duck
duck

&lt;class 'pyparsing.ParseResults'&gt; ([3, 'dogs'], {'animal': [('dogs', 1)], 'qty': [(3, 0)]})
3
dogs
dogs

&lt;class 'pyparsing.ParseResults'&gt; ([14, 'monkeys'], {'animal': [('monkeys', 1)], 'qty': [(14, 0)]})
14
monkeys
monkeys
</snippet></ROW><ROW><id>7047048</id><snippet>parseList.append(parser.parseString("monkey")[0])
</snippet></ROW><ROW><id>7047061</id><snippet>b = a</snippet></ROW><ROW><id>7047061</id><snippet>b</snippet></ROW><ROW><id>7047061</id><snippet>a</snippet></ROW><ROW><id>7047061</id><snippet>None</snippet></ROW><ROW><id>7047061</id><snippet>list</snippet></ROW><ROW><id>7047061</id><snippet>&gt;&gt;&gt; a = [1, 2]  # create an object in memory that points to 1 and 2, and point a at it
&gt;&gt;&gt; b = a       # point b to wherever a points
&gt;&gt;&gt; a[0] = 2    # change the object that a points to by pointing its first item at 2
&gt;&gt;&gt; a
[2, 2]
&gt;&gt;&gt; b
[2, 2]
</snippet></ROW><ROW><id>7047061</id><snippet>&gt;&gt;&gt;a=5     # '5' is interned, so it already exists, point a at it in memory
&gt;&gt;&gt;b=a     # point b to wherever a points
&gt;&gt;&gt;a=6     # '6' already exists in memory, point a at it
&gt;&gt;&gt;print b # b still points at 5 because you never moved it
5
</snippet></ROW><ROW><id>7047061</id><snippet>id(something)</snippet></ROW><ROW><id>7047061</id><snippet>&gt;&gt;&gt; id(5)
77519368
&gt;&gt;&gt; a = 5
&gt;&gt;&gt; id(a)
77519368     # the same as what id(5) showed us, 5 is interned
&gt;&gt;&gt; b = a
&gt;&gt;&gt; id(b)
77519368     # same again
&gt;&gt;&gt; id(6)
77519356
&gt;&gt;&gt; a = 6
&gt;&gt;&gt; id(a)
77519356     # same as what id(6) showed us, 6 is interned
&gt;&gt;&gt; id(b)
77519368     # still pointing at 5.    
&gt;&gt;&gt; b
5
</snippet></ROW><ROW><id>7047061</id><snippet>copy</snippet></ROW><ROW><id>7047061</id><snippet>256</snippet></ROW><ROW><id>7047061</id><snippet>True</snippet></ROW><ROW><id>7047061</id><snippet>False</snippet></ROW><ROW><id>7047061</id><snippet>None</snippet></ROW><ROW><id>7047061</id><snippet>a</snippet></ROW><ROW><id>7047061</id><snippet>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a = a[:1]    # copy the list a points to, starting with item 2, and point a at it
&gt;&gt;&gt; b            # b still points to the original list
[1, 2]
&gt;&gt;&gt; a
[1]
&gt;&gt;&gt; id(b)
79367984
&gt;&gt;&gt; id(a)
80533904
</snippet></ROW><ROW><id>7047061</id><snippet>:</snippet></ROW><ROW><id>7047182</id><snippet>incrementc</snippet></ROW><ROW><id>7047182</id><snippet>c</snippet></ROW><ROW><id>7047182</id><snippet>main</snippet></ROW><ROW><id>7047182</id><snippet>c</snippet></ROW><ROW><id>7047182</id><snippet>def increment(l):
    l[0] = l[0] + 1

def main():
    c = [5]
    increment(c)
    print c[0]

main()
</snippet></ROW><ROW><id>7047182</id><snippet>def increment(l):
    return l + 1

def main():
    c = 5
    print increment(c)

main()
</snippet></ROW><ROW><id>7047182</id><snippet>c</snippet></ROW><ROW><id>7047309</id><snippet>lock.sock</snippet></ROW><ROW><id>7047309</id><snippet>import socket
import os

SOCKET_FILENAME = 'lock.sock'

def server():
    print 'I\'m the server, creating the socket'
    s = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    s.bind(SOCKET_FILENAME)

    try:
        while True:
            print 'Got a URL: %s' % s.recv(65536)
    except KeyboardInterrupt, exc:
        print 'Quitting, removing the socket file'
        s.close
        os.remove(SOCKET_FILENAME)

def client():
    print 'I\'m the client, opening the socket'
    s = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    s.connect(SOCKET_FILENAME)
    s.send('http://stackoverflow.com')
    s.close()

def main():
    if os.path.exists(SOCKET_FILENAME):
        try:
            client()
        except (socket.error):
            print "Bad socket file, program closed unexpectedly?"
            os.remove(SOCKET_FILENAME)
            server()
    else:
        server()

main()
</snippet></ROW><ROW><id>7047502</id><snippet>GameEngine</snippet></ROW><ROW><id>7047502</id><snippet>GameClientFactory</snippet></ROW><ROW><id>7047502</id><snippet>buildProtocol</snippet></ROW><ROW><id>7047502</id><snippet>def buildProtocol(self, address):
    proto = ClientFactory.buildProtocol(self, address)
    GameEngine(proto).spin()
    return proto
</snippet></ROW><ROW><id>7047502</id><snippet>GameEngine.__init__</snippet></ROW><ROW><id>7047582</id><snippet>db.e_ticket(request.args(0),user_id==auth.user_id,active==True)</snippet></ROW><ROW><id>7047582</id><snippet>db.e_ticket(request.args(0),user_id=auth.user_id,active=True)</snippet></ROW><ROW><id>7047658</id><snippet>DoDragDrop</snippet></ROW><ROW><id>7047750</id><snippet>QModelIndexList</snippet></ROW><ROW><id>7047750</id><snippet>QList&lt;QModelIndex&gt;</snippet></ROW><ROW><id>7047750</id><snippet>QModelIndex</snippet></ROW><ROW><id>7047750</id><snippet>QModelIndex</snippet></ROW><ROW><id>7047750</id><snippet>QAbstractItemModel</snippet></ROW><ROW><id>7047750</id><snippet>QAbstractModelIndex</snippet></ROW><ROW><id>7047750</id><snippet>index = self.selectedIndexes()[0]
crawler = index.model().itemFromIndex(index)
</snippet></ROW><ROW><id>7047764</id><snippet>p.mediaBox.lowerLeft</snippet></ROW><ROW><id>7047764</id><snippet>#!/usr/bin/env python
import copy, sys
from pyPdf import PdfFileWriter, PdfFileReader
input = PdfFileReader(sys.stdin)
output = PdfFileWriter()
for i in range(input.getNumPages()):
    p = input.getPage(i)
    q = copy.copy(p)

    bl = p.mediaBox.lowerLeft
    ur = p.mediaBox.upperRight

    print &gt;&gt; sys.stderr, 'splitting page',i
    print &gt;&gt; sys.stderr, '\tlowerLeft:',p.mediaBox.lowerLeft
    print &gt;&gt; sys.stderr, '\tupperRight:',p.mediaBox.upperRight

    p.mediaBox.upperRight = (ur[0], (bl[1]+ur[1])/2)
    p.mediaBox.lowerLeft = bl

    q.mediaBox.upperRight = ur
    q.mediaBox.lowerLeft = (bl[0], (bl[1]+ur[1])/2)
    if i%2==0:
        output.addPage(q)
        output.addPage(p)
    else:
        output.addPage(p)
        output.addPage(q)

output.write(sys.stdout)
</snippet></ROW><ROW><id>7047774</id><snippet>def __init__(self, name="", classId="", objectType="", *args, **kwargs):</snippet></ROW><ROW><id>7047774</id><snippet>__init__</snippet></ROW><ROW><id>7047774</id><snippet>t = testClass("name", "class1", "Object", "value1", 11, scope="local", destroy=True)
</snippet></ROW><ROW><id>7047774</id><snippet>__init__</snippet></ROW><ROW><id>7047774</id><snippet>name = "name"
classId= "class1"
objectType = "Object"
args =  ["value1", 11]
kwargs = { 'scope': "local",
           'destroy': True }
</snippet></ROW><ROW><id>7048070</id><snippet>np.seterr(divide='ignore')  # rs can have elements equal to 1</snippet></ROW><ROW><id>7048187</id><snippet>read()</snippet></ROW><ROW><id>7048202</id><snippet>import itertools

def grouper(n, iterable, fillvalue=None):
    # Source: http://docs.python.org/library/itertools.html#recipes
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    return itertools.izip_longest(*[iter(iterable)]*n,fillvalue=fillvalue)

def block_generator(file):
    with open(file) as lines:
        for line in lines:
            if line == 'START': 
                block=list(itertools.takewhile(lambda x:x!='STOP',lines))
                yield block

blocks=block_generator(file)
p=multiprocessing.Pool(4)
for chunk in grouper(100,blocks,fillvalue=''):
    p.map(my_f,chunk)
</snippet></ROW><ROW><id>7048202</id><snippet>grouper</snippet></ROW><ROW><id>7048202</id><snippet>p.map</snippet></ROW><ROW><id>7048202</id><snippet>p.map(func,iterator)</snippet></ROW><ROW><id>7048202</id><snippet>_handle_tasks</snippet></ROW><ROW><id>7048202</id><snippet>self._taskqueue</snippet></ROW><ROW><id>7048202</id><snippet>         for i, task in enumerate(taskseq):
             ...
             put(task)
</snippet></ROW><ROW><id>7048202</id><snippet>p.map</snippet></ROW><ROW><id>7048202</id><snippet>import multiprocessing as mp
import time
import logging

def foo(x):
    time.sleep(1)
    return x*x

def blocks():
    for x in range(1000):
        if x%100==0:
            logger.info('Got here')
        yield x

logger=mp.log_to_stderr(logging.DEBUG)
logger.setLevel(logging.DEBUG) 
pool=mp.Pool() 
print pool.map(foo, blocks()) 
</snippet></ROW><ROW><id>7048202</id><snippet>Got here</snippet></ROW><ROW><id>7048202</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>7048202</id><snippet>foo</snippet></ROW><ROW><id>7048512</id><snippet>%r</snippet></ROW><ROW><id>7048512</id><snippet>True</snippet></ROW><ROW><id>7048512</id><snippet>False</snippet></ROW><ROW><id>7048512</id><snippet>%s</snippet></ROW><ROW><id>7048512</id><snippet>&gt;&gt;&gt; print '%s' % '"Hello, you\'re"'         
"Hello, you're"
&gt;&gt;&gt; print '%r' % '"Hello, you\'re"'                        
'"Hello, you\'re"'
</snippet></ROW><ROW><id>7048546</id><snippet>self.stopThread</snippet></ROW><ROW><id>7048546</id><snippet>threading.Event()</snippet></ROW><ROW><id>7048546</id><snippet>set()</snippet></ROW><ROW><id>7048546</id><snippet>clear()</snippet></ROW><ROW><id>7048666</id><snippet>core</snippet></ROW><ROW><id>7048875</id><snippet>res</snippet></ROW><ROW><id>7048875</id><snippet>from operator import itemgetter
print "Original List"
print '\n'.join(str(l) for l in phonemelist)
grp = itertools.groupby(phonemelist, itemgetter(1))
res = [tuple(v) for k, v in grp if k]
print '\n'.join(str(l) for l in res)
newlists = []
# for each part between the markers
for item in res:
    # update the ranges and add it to the overall list
    newlists.append(update_ranges(item))
print "\n after applying co-articulation rules"
print '\n\n'.join('\n'.join(str(i) for i in l) for l in newlists)
</snippet></ROW><ROW><id>7048967</id><snippet>import re

ss = '''10/02/09
07/22/09
09-08-2008
9/9/2008
11/4/2010
03-07-2009
09/01/2010'''


regx = re.compile('[-/]')
for xd in ss.splitlines():
    m,d,y = regx.split(xd)
    print xd,'   ','/'.join((m.zfill(2),d.zfill(2),'20'+y.zfill(2) if len(y)==2 else y))
</snippet></ROW><ROW><id>7048967</id><snippet>10/02/09     10/02/2009
07/22/09     07/22/2009
09-08-2008     09/08/2008
9/9/2008     09/09/2008
11/4/2010     11/04/2010
03-07-2009     03/07/2009
09/01/2010     09/01/2010
</snippet></ROW><ROW><id>7048967</id><snippet>'{0:0&gt;2}'.format(day)</snippet></ROW><ROW><id>7048967</id><snippet>import re
from time import clock
iterat = 100

from datetime import datetime
dates = ['10/02/09', '07/22/09', '09-08-2008', '9/9/2008', '11/4/2010',
         ' 03-07-2009', '09/01/2010']

reobj = re.compile(
r"""\s*  # optional whitespace
(\d+)    # Month
[-/]     # separator
(\d+)    # Day
[-/]     # separator
(?:20)?  # century (optional)
(\d+)    # years (YY)
\s*      # optional whitespace""",
re.VERBOSE)

te = clock()
for i in xrange(iterat):
    ndates = (reobj.sub(r"\1/\2/20\3", date) for date in dates)
    fdates1 = [datetime.strftime(datetime.strptime(date,"%m/%d/%Y"), "%m/%d/%Y")
               for date in ndates]
print "Tim's method   ",clock()-te,'seconds'



regx = re.compile('[-/]')


te = clock()
for i in xrange(iterat):
    ndates = (reobj.match(date).groups() for date in dates)
    fdates2 = ['%s/%s/20%s' % tuple(x.zfill(2) for x in tu) for tu in ndates]
print "mixing solution",clock()-te,'seconds'


te = clock()
for i in xrange(iterat):
    ndates = (regx.split(date.strip()) for date in dates)
    fdates3 = ['/'.join((m.zfill(2),d.zfill(2),('20'+y.zfill(2) if len(y)==2 else y)))
              for m,d,y in ndates]
print "eyquem's method",clock()-te,'seconds'



te = clock()
for i in xrange(iterat):
    fdates4 = ['{:0&gt;2}/{:0&gt;2}/20{}'.format(*reobj.match(date).groups()) for date in dates]
print "Tim + format   ",clock()-te,'seconds'


print fdates1==fdates2==fdates3==fdates4
</snippet></ROW><ROW><id>7048967</id><snippet>number of iteration's turns : 100
Tim's method    0.295053700959 seconds
mixing solution 0.0459111423379 seconds
eyquem's method 0.0192239516475 seconds
Tim + format    0.0153756971906 seconds 
True
</snippet></ROW><ROW><id>7048967</id><snippet>{:0&gt;2}</snippet></ROW><ROW><id>7048967</id><snippet>{:0&gt;2}</snippet></ROW><ROW><id>7048967</id><snippet>regx.split(date.strip())</snippet></ROW><ROW><id>7049016</id><snippet>def main(argv):
    filename = None
    outfile = None
    call_maininfo = False
    try:
        opts, args = getopt.getopt(argv, 'hi:o:t', ['help', 'input=', 'output='])
        if not opts:
            print 'No options supplied'
            usage()
    except getopt.GetoptError, e:
        print e
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit(2)
        elif opt in ('-i', '--input'):
            filename = arg
        elif opt in ('-o', '--output'):
            outfile = arg
        elif opt == '-t':
            call_maininfo = True
        else:
            usage()
            sys.exit(2)

    print 'Processed options [{0}] and found filename [{1}] and outfile [{2}]'.format(
            ', '.join(argv),
            filename,
            outfile,
            )

    if call_maininfo:
        print 'Calling maininfo()'
        maininfo(filename, outfile)
</snippet></ROW><ROW><id>7049016</id><snippet>maininfo()</snippet></ROW><ROW><id>7049016</id><snippet>-t</snippet></ROW><ROW><id>7049297</id><snippet>value = next(v for (k,v) in some_dict.iteritems() if 'substring' in k)
</snippet></ROW><ROW><id>7049492</id><snippet>if '__file__' not in globals():
    # __file__ is not set
</snippet></ROW><ROW><id>7049492</id><snippet>__file__</snippet></ROW><ROW><id>7049492</id><snippet>try:
    __file__
except NameError:
    # __file__ is not set
    raise
</snippet></ROW><ROW><id>7049492</id><snippet>global __file__
__file__ = globals().get('__file__', 'your_default_here')
</snippet></ROW><ROW><id>7049664</id><snippet>'''
save first example as item.basket with format
A, B, C, E
A, C
A, C, D, E
A, C, E
open ipython same directory as saved file or use os module
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.chdir("c:/orange")
'''
import orange

items = orange.ExampleTable("item")
#play with support argument to filter out rules
rules = orange.AssociationRulesSparseInducer(items, support = 0.1) 
for r in rules:
    print "%5.3f %5.3f %s" % (r.support, r.confidence, r)
</snippet></ROW><ROW><id>7050000</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import simplejson as json
from xml import sax
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

xml_string = """&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;n1:products xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:n7="http://foo.bar.tld" xmlns:n1="http://foo.bar.tld"&gt;
  &lt;n1:product&gt;
    &lt;n1:status&gt;
      &lt;n7:created&gt;2005-02-08T18:18:30.53&lt;/n7:created&gt;
      &lt;n7:updated&gt;2008-09-18T10:29:58.26&lt;/n7:updated&gt;
    &lt;/n1:status&gt;
    &lt;n1:productid&gt;28321503&lt;/n1:productid&gt;
    &lt;n1:producttext&gt;
      &lt;n7:text&gt;Some product info&lt;/n7:text&gt;
      &lt;n7:type&gt;Info&lt;/n7:type&gt;
    &lt;/n1:producttext&gt;
    &lt;n1:terms&gt;
      &lt;n7:term&gt;
        &lt;n7:number&gt;1&lt;/n7:number&gt;
        &lt;n7:name&gt;Term1&lt;/n7:name&gt;
      &lt;/n7:term&gt;
      &lt;n7:term&gt;
        &lt;n7:number&gt;2&lt;/n7:number&gt;
        &lt;n7:name&gt;Term2&lt;/n7:name&gt;
      &lt;/n7:term&gt;
    &lt;/n1:terms&gt;   
  &lt;/n1:product&gt;
&lt;/n1:products&gt;
"""

def display(data):
    import pprint
    pp = pprint.PrettyPrinter(depth=10)
    pp.pprint(data)

class Element:
    def setData(self, key, value):
        self.__dict__[key] = value

    def setObject(self, key, object):
        if key in self.__dict__ and not isinstance(self.__dict__[key], (list, tuple)):
            prev_object = self.__dict__[key]
            self.__dict__[key] = []
            self.__dict__[key].append(prev_object)
            self.__dict__[key].append(object)
        elif key in self.__dict__:
            self.__dict__[key].append(object)
        else:
            self.__dict__[key] = object

    def jsonable(self):
        return self._traverse(self.__dict__)

    # http://stackoverflow.com/questions/1036409/recursively-convert-python-object-graph-to-dictionary/1118038#1118038
    def _traverse(self, obj):
        if isinstance(obj, dict):
            for k in obj.keys():
                obj[k] = self._traverse(obj[k])
            return obj
        elif hasattr(obj, "__iter__"):
            return [self._traverse(v) for v in obj]
        elif hasattr(obj, "__dict__"):
            data = dict([(key, self._traverse(value))
                for key, value in obj.__dict__.iteritems()
                if not callable(value) and not key.startswith('_')])
            return data
        else:
            return obj

class ObjBuilder(sax.ContentHandler):
    def __init__(self, node):
        sax.ContentHandler.__init__(self)
        self.obj = []
        self.node = node
        self.fetch = False
        self.__buffer = ''

    def startElementNS(self, name, qname, attrs):
        (ns, localname) = name
        if self.node == localname:
            self.fetch = True
            o = Element()
            self.rootobject = o
            self.obj.append(o)
        elif self.fetch:
            self.__buffer = ''
            o = Element()
            self.obj[-1].setObject(localname, o)
            self.obj.append(o)

    def characters(self,contents):
        if self.fetch:
            self.__buffer += contents.strip()

    def endElementNS(self, name, qname):
        (ns, localname) = name
        if self.node == localname:
            self.fetch = False
            display(self.rootobject.jsonable())
            data = self.rootobject.jsonable()
        elif self.fetch:
            if self.__buffer != '':
                self.obj[-2].setData(localname, self.__buffer)
            del self.obj[-1]
            self.__buffer = ''

if __name__ == '__main__':
    parser = sax.make_parser()
    parser.setContentHandler(ObjBuilder('product'))
    parser.setFeature(sax.handler.feature_namespaces, 1)

    inpsrc = sax.xmlreader.InputSource()
    inpsrc.setByteStream(StringIO(xml_string))
    parser.parse(inpsrc)
</snippet></ROW><ROW><id>7050072</id><snippet>i.a.__str__('latin-1')
</snippet></ROW><ROW><id>7050072</id><snippet>i.a.text.encode('latin-1')
</snippet></ROW><ROW><id>7050072</id><snippet>latin-1</snippet></ROW><ROW><id>7050072</id><snippet>str(i.a)</snippet></ROW><ROW><id>7050132</id><snippet>in "app\app.yaml", line 24, column 19"
</snippet></ROW><ROW><id>7050132</id><snippet>script=None
</snippet></ROW><ROW><id>7050132</id><snippet>app.yaml</snippet></ROW><ROW><id>7050132</id><snippet>app.yaml</snippet></ROW><ROW><id>7050132</id><snippet>app.yaml</snippet></ROW><ROW><id>7050132</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>7050132</id><snippet>script</snippet></ROW><ROW><id>7050132</id><snippet>form_post.py</snippet></ROW><ROW><id>7050220</id><snippet>user_agent_string = self.request.headers['user-agent']</snippet></ROW><ROW><id>7050395</id><snippet>string.Template</snippet></ROW><ROW><id>7050395</id><snippet>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; t = Template("$filename $directory $counter")
&gt;&gt;&gt; t.substitute(filename="file.py", directory="/home", counter=42)
'file.py /home 42'
&gt;&gt;&gt; t.substitute(filename="file2.conf", directory="/etc", counter=8)
'file2.conf /etc 8'
</snippet></ROW><ROW><id>7050395</id><snippet>&gt;&gt;&gt; template = "%(filename)s %(directory)s %(counter)03d"
&gt;&gt;&gt; template % {"filename": "file", "directory": "dir", "counter": 42}
'file dir 042'
&gt;&gt;&gt; template % {"filename": "file2", "directory": "dir2", "counter": 5}
'file2 dir2 005'
</snippet></ROW><ROW><id>7050577</id><snippet>newList = list(oldList)
</snippet></ROW><ROW><id>7050577</id><snippet>newlist = oldList[:]
</snippet></ROW><ROW><id>7050577</id><snippet>oldList</snippet></ROW><ROW><id>7050577</id><snippet>newList</snippet></ROW><ROW><id>7051063</id><snippet>python test.py "1 2 '3' '4'"</snippet></ROW><ROW><id>7051063</id><snippet>command = sys.argv[1]
arguments = map(ast.literal_eval, command.split())
print arguments
</snippet></ROW><ROW><id>7051063</id><snippet>python test.py
1 2 '3' 4'
5 6 '7' 8'
</snippet></ROW><ROW><id>7051063</id><snippet>for line in sys.stdin:
    arguments = map(ast.literal_eval, line.split())
    print arguments
</snippet></ROW><ROW><id>7051063</id><snippet>raw_input</snippet></ROW><ROW><id>7051063</id><snippet>readline</snippet></ROW><ROW><id>7051063</id><snippet>argparse</snippet></ROW><ROW><id>7051311</id><snippet>coverage run manage.py runserver --noreload
</snippet></ROW><ROW><id>7051311</id><snippet>--noreload</snippet></ROW><ROW><id>7051311</id><snippet>django/core/management/commands/runserver.py</snippet></ROW><ROW><id>7051311</id><snippet>django/utils/autoreload.py</snippet></ROW><ROW><id>7051311</id><snippet>ps</snippet></ROW><ROW><id>7051311</id><snippet>lsof</snippet></ROW><ROW><id>7051311</id><snippet>ps output:

UID        PID  PPID  C STIME TTY          TIME CMD

vinay    12081  2098  0 16:37 pts/0    00:00:00 /home/vinay/.virtualenvs/watfest/bin/python /home/vinay/.virtualenvs/watfest/bin/coverage run manage.py runserver
vinay    12082 12081  2 16:37 pts/0    00:00:01 /home/vinay/.virtualenvs/watfest/bin/python manage.py runserver

lsof output:

python    12082      vinay    5u     IPv4      48294      0t0        TCP localhost:8000 (LISTEN)
</snippet></ROW><ROW><id>7051311</id><snippet>--noreload</snippet></ROW><ROW><id>7051311</id><snippet>ps output:

UID        PID  PPID  C STIME TTY          TIME CMD

vinay    12140  2098  5 16:44 pts/0    00:00:00 /home/vinay/.virtualenvs/watfest/bin/python /home/vinay/.virtualenvs/watfest/bin/coverage run manage.py runserver --noreload

lsof output:

coverage  12140      vinay    4u     IPv4      51995      0t0        TCP localhost:8000 (LISTEN)
</snippet></ROW><ROW><id>7051311</id><snippet>--noreload</snippet></ROW><ROW><id>7051311</id><snippet>--noreload</snippet></ROW><ROW><id>7051311</id><snippet>festival/__init__   8      7    13%
manage              9      4    56%
settings           33      1    97%
</snippet></ROW><ROW><id>7051517</id><snippet>models/__init__.py

DBSession1 = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))  
DBSession2 = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))  
DBSession3 = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))  
DBSession4 = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))  
metadata1 = MetaData()                                                           
metadata2 = MetaData()                                                           
metadata3 = MetaData()                                                           
metadata4 = MetaData()                                                           

def initialize_sql(engines, drop_db=False):                                      
    DBSession1.configure(bind=engine[0])
    DBSession2.configure(bind=engine[1])                                            
    DBSession3.configure(bind=engine[2])                                            
    DBSession4.configure(bind=engine[3])                                            
    metadata1.bind = engine[0]                                            
    metadata2.bind = engine[1]                                            
    metadata3.bind = engine[2]                                            
    metadata4.bind = engine[3]  
</snippet></ROW><ROW><id>7051517</id><snippet>from mypackage.models import DBSession1, DBSession2, DBSession3, DBSession4

def site_orders(request)                                                      
    site = request.matchdict['site']                                                      
    dbsession = globals().get("DBSession%d" % site)                                                      
    orders = dbsession.query(Order).order_by(Order.cdate.desc())[:100]                                                      
    return dict(orders=orders, pagetitle=(site+" Orders"))
</snippet></ROW><ROW><id>7051627</id><snippet>store(book, author)
</snippet></ROW><ROW><id>7051627</id><snippet>book</snippet></ROW><ROW><id>7051627</id><snippet>author</snippet></ROW><ROW><id>7051627</id><snippet>thebook</snippet></ROW><ROW><id>7051627</id><snippet>theauthor</snippet></ROW><ROW><id>7051627</id><snippet>book</snippet></ROW><ROW><id>7051627</id><snippet>author</snippet></ROW><ROW><id>7051627</id><snippet>local_book</snippet></ROW><ROW><id>7051627</id><snippet>borrowed_book</snippet></ROW><ROW><id>7051884</id><snippet>In [217]: import htmlentitydefs

In [224]: ['&amp;'+htmlentitydefs.codepoint2name[ord(x)]+';' for x in u'Íøñ']
Out[224]: ['Í', 'ø', 'ñ']
</snippet></ROW><ROW><id>7051950</id><snippet>coverage ./manage.py runserver --noreload
</snippet></ROW><ROW><id>7051980</id><snippet>static PyGetSetDef point_getset[] = {
  {"x", (getter)point_get_x, (setter)point_set_x, "", NULL},
  {NULL}
};

static PyObject*
point_get_x(struct PointObject *self, void *closure)
{
     return Py_BuildValue("i", self-&gt;my_point-&gt;x);
}

static int
point_set_x(struct PointObject *self, PyObject *value, void *closure)
{
  PyErr_SetString(PyExc_TypeError, "Attribute is read-only!");
  return -1;
}
</snippet></ROW><ROW><id>7052068</id><snippet>from cStringIO import StringIO
import win32clipboard
from PIL import Image

def send_to_clipboard(clip_type, data):
    win32clipboard.OpenClipboard()
    win32clipboard.EmptyClipboard()
    win32clipboard.SetClipboardData(clip_type, data)
    win32clipboard.CloseClipboard()

filepath = 'image.jpg'
image = Image.open(filepath)

output = StringIO()
image.convert("RGB").save(output, "BMP")
data = output.getvalue()[14:]
output.close()

send_to_clipboard(win32clipboard.CF_DIB, data)
</snippet></ROW><ROW><id>7052325</id><snippet>wx.Frame</snippet></ROW><ROW><id>7052325</id><snippet>wx.Button</snippet></ROW><ROW><id>7052361</id><snippet>ss = '''    background: #f09 url('images#06F'); 
    background=#00f url('images #889'); 
    background:#E4aaa0 url('images#890'); 
    background: #fff #dddddd; '''

print ss
import re

three = '(?:[0-9A-Fa-f]{3})'

regx = re.compile('^ *background[ =:]*#(%s{1,2})' % three,re.MULTILINE)
print regx.findall(ss)

print '-----------------------------------------------------'

regx = re.compile('(?:(?:^ *background[ =:]*)|(?:(?&lt;=#%s)|(?&lt;=#%s%s)) +)'
                  '#(%s{1,2})' % (three,three,three,three),
                  re.MULTILINE)
print regx.findall(ss)
</snippet></ROW><ROW><id>7052361</id><snippet>    background: #f09 url('images#06F'); 
    background=#00f url('images #889'); 
    background:#E4aaa0 url('images#890'); 
    background: #fff #dddddd; 
['f09', '00f', 'E4aaa0', 'fff']
-----------------------------------------------------
['f09', '00f', 'E4aaa0', 'fff', 'dddddd']
</snippet></ROW><ROW><id>7052361</id><snippet>ss = '''    background: #f09 url('images#06F'); 
    background=#00f url('images #889'); 
    color:#E4aaa0 url('images#890'); 
    background: #fff #dddddd#125e88    #ae3;
    Walter (Elias) Disney: #f51f51 '''

print ss+'\n'

import re

three = '(?:[0-9A-Fa-f]{3})'

regx = re.compile('^ *[^=:]+[ =:]*#(%s{1,2})' % three,re.MULTILINE)
print regx.findall(ss)

print '-----------------------------------------------------'

regx = re.compile('(?:(?:^ *[^=:]+[ =:]*)|(?:(?&lt;=#%s)|(?&lt;=#%s%s)) *)'
                  '#(%s{1,2})' % (three,three,three,three),
                  re.MULTILINE)
print regx.findall(ss)
</snippet></ROW><ROW><id>7052361</id><snippet>    background: #f09 url('images#06F'); 
    background=#00f url('images #889'); 
    color:#E4aaa0 url('images#890'); 
    background: #fff #dddddd#125e88    #ae3;
    Walter (Elias) Disney: #f51f51 

['f09', '00f', 'E4aaa0', 'fff', 'f51f51']
-----------------------------------------------------
['f09', '00f', 'E4aaa0', 'fff', 'dddddd', '125e88', 'ae3', 'f51f51']
</snippet></ROW><ROW><id>7052361</id><snippet>ss = '''    background: #f09 url('images#06F'); 
    background=#00f url('images #889'); 
    color:#E4aaa0 url('images#890'); 
    background: #fff #dddddd#125e88    #ae3;
    Walter (Elias) Disney: #f51f51
    background: -webkit-gradient(linear, from(#000000), to(#ffffff));. '''

print ss+'\n'

import re

three = '(?:[0-9A-Fa-f]{3})'

preceding = ('(?:(?:^[^#]*)'
                 '|'
                 '(?:(?&lt;=#%s)'
                     '|'
                     '(?&lt;=#%s%s)'
                     '|'
                     '(?&lt;= to\()'
                     ')'
                 ')') % (three,three,three)

regx = re.compile('%s *#(%s{1,2})' % (preceding,three), re.MULTILINE)
print regx.findall(ss)
</snippet></ROW><ROW><id>7052361</id><snippet>    background: #f09 url('images#06F'); 
    background=#00f url('images #889'); 
    color:#E4aaa0 url('images#890'); 
    background: #fff #dddddd#125e88    #ae3;
    Walter (Elias) Disney: #f51f51
    background: -webkit-gradient(linear, from(#000000), to(#ffffff));. 

['f09', '00f', 'E4aaa0', 'fff', 'dddddd', '125e88', 'ae3', 'f51f51', '000000', 'ffffff']
</snippet></ROW><ROW><id>7052406</id><snippet>def foo(var):
    if var == 5:
        var = 6
    elif var == 6:
        var = 8
    else:
        var = 10

    return var

def bar(var):
    if var == 5:
        var = 6
    if var == 6:
        var = 8
    if var not in (5, 6):
        var = 10

    return var

print foo(5)        # 6
print bar(5)        # 10
</snippet></ROW><ROW><id>7052617</id><snippet>d1 = {"dog":"woof", "cat":"meow"}
d2 = d1.copy() # make a copy, not a reference to the same dictionary
d2["dog"] = "bark"
for i in d1:
    print(i, d1[i])

# dog woof
# cat meow
</snippet></ROW><ROW><id>7052658</id><snippet>from __future__ import with_statement    
import contextlib

with contextlib.closing(sftpClient.open('file.name', 'w')) as f:
   f.write('myData')
</snippet></ROW><ROW><id>7052772</id><snippet>OneOrMore(Word(alphas))</snippet></ROW><ROW><id>7052772</id><snippet>JUMPS = Literal("jumps")
some_words = OneOrMore(~JUMPS + Word(alphas))
</snippet></ROW><ROW><id>7052809</id><snippet>import numpy as np
my_array = np.array([[100, 200], [300, 400]],np.uint16)
my_array[my_array &gt; 255] = 255
</snippet></ROW><ROW><id>7052809</id><snippet>array([[100, 200],
       [255, 255]], dtype=uint16)
</snippet></ROW><ROW><id>7052976</id><snippet>pip install</snippet></ROW><ROW><id>7052976</id><snippet>-e</snippet></ROW><ROW><id>7052976</id><snippet>pip install -e hg+http://code.google.com/path/to/repo
</snippet></ROW><ROW><id>7053026</id><snippet>content = file.read()
name = 'abst'
if name in content:
    slice = content.find(name)
    slice = slice, slice + len(name)
</snippet></ROW><ROW><id>7053026</id><snippet>read(1)</snippet></ROW><ROW><id>7053026</id><snippet>def find(file, name):
    length = len(name)
    part = file.read(length)
    i = 0
    while True:
        if part == name:
            break
        char = file.read(1)
        if not char:
            return
        part = part[1:] + char
        i += 1
    return i, i + length, part
</snippet></ROW><ROW><id>7053026</id><snippet>read(1)</snippet></ROW><ROW><id>7053092</id><snippet>db.Blob</snippet></ROW><ROW><id>7053092</id><snippet>from google.appengine.api import images
url = images.get_serving_url(blob_key)
</snippet></ROW><ROW><id>7053196</id><snippet>subprocess.Popen(["python", "RegistrationScreen.py"])</snippet></ROW><ROW><id>7053269</id><snippet>from .. import Exchange
</snippet></ROW><ROW><id>7053274</id><snippet>query</snippet></ROW><ROW><id>7053274</id><snippet>query=((db.templates.active==True) &amp; (db.templates.user_id==auth.user_id))
</snippet></ROW><ROW><id>7053379</id><snippet>all()</snippet></ROW><ROW><id>7053379</id><snippet>&gt;&gt;&gt; all(x in dct for x in ('foo', 'bar', 'qux'))
False
&gt;&gt;&gt; all(x in dct for x in ('foo', 'bar', 'baz'))
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7053487</id><snippet>&gt;&gt;&gt; t = (1, 2, 3, 4, 5)
&gt;&gt;&gt; a, b, c = t[0], t[1:-1], t[-1]
&gt;&gt;&gt; a, b, c
(1, (2, 3, 4), 5)
</snippet></ROW><ROW><id>7053615</id><snippet>self.materials</snippet></ROW><ROW><id>7053615</id><snippet>dict</snippet></ROW><ROW><id>7053615</id><snippet>tuple</snippet></ROW><ROW><id>7053615</id><snippet>k, m</snippet></ROW><ROW><id>7053615</id><snippet>self.materials.iteritems()</snippet></ROW><ROW><id>7053615</id><snippet>for m in self.materials.itervalues():
</snippet></ROW><ROW><id>7053664</id><snippet>return</snippet></ROW><ROW><id>7053664</id><snippet>return None</snippet></ROW><ROW><id>7053664</id><snippet>def jiskya(x, y):
    if x &gt; y:
        return y
    else:
        return x

print jiskya(2, 3)
</snippet></ROW><ROW><id>7053681</id><snippet>def remaining(ls, y, z):
    diff = y.difference(z)
    return filter(lambda i: i[0] in diff, ls)
</snippet></ROW><ROW><id>7053727</id><snippet>function_call(**{'weird-named-key': 'value'})
</snippet></ROW><ROW><id>7053762</id><snippet>{% url privblog object.id %}
</snippet></ROW><ROW><id>7053762</id><snippet>{% url privblog pblog_detail_object.id %}
</snippet></ROW><ROW><id>7053762</id><snippet>return render_to_response('privblog/privblog_detail.html', context, RequestContext(request))
</snippet></ROW><ROW><id>7053815</id><snippet>(</snippet></ROW><ROW><id>7053815</id><snippet>originalFile = re.sub(r'\(',r'\(', originalFile)
</snippet></ROW><ROW><id>7053815</id><snippet>originalFile = re.sub(r'\(','\(', originalFile)
</snippet></ROW><ROW><id>7053933</id><snippet>re.findall(r'(?&lt;![!])\b\w+', ' !Hai  Yo!')
</snippet></ROW><ROW><id>7053933</id><snippet>['Yo']</snippet></ROW><ROW><id>7053933</id><snippet>\w+</snippet></ROW><ROW><id>7053933</id><snippet>\b</snippet></ROW><ROW><id>7054137</id><snippet>pygame.quit()</snippet></ROW><ROW><id>7054137</id><snippet>running = True
while running:
    # other code
    event = pygame.event.wait ()
    if event.type == pygame.QUIT:
         running = False  # Be interpreter friendly
 pygame.quit()
</snippet></ROW><ROW><id>7054243</id><snippet>fib</snippet></ROW><ROW><id>7054243</id><snippet>inner</snippet></ROW><ROW><id>7054243</id><snippet>inner</snippet></ROW><ROW><id>7054243</id><snippet>fib</snippet></ROW><ROW><id>7054243</id><snippet>fib</snippet></ROW><ROW><id>7054243</id><snippet>c</snippet></ROW><ROW><id>7054244</id><snippet>l = [s.name for s in sections]
</snippet></ROW><ROW><id>7054244</id><snippet>{% if 'Social' in l %}
</snippet></ROW><ROW><id>7055193</id><snippet>str(last_loc)</snippet></ROW><ROW><id>7055193</id><snippet>last_loc</snippet></ROW><ROW><id>7055193</id><snippet>w</snippet></ROW><ROW><id>7055193</id><snippet>w+</snippet></ROW><ROW><id>7055193</id><snippet>/var/log/messages</snippet></ROW><ROW><id>7055193</id><snippet>with</snippet></ROW><ROW><id>7055193</id><snippet>strip</snippet></ROW><ROW><id>7055193</id><snippet>read</snippet></ROW><ROW><id>7055193</id><snippet>readline</snippet></ROW><ROW><id>7055193</id><snippet>lf</snippet></ROW><ROW><id>7055193</id><snippet>readlines</snippet></ROW><ROW><id>7055193</id><snippet>sl</snippet></ROW><ROW><id>7055193</id><snippet>try:
    with open("location.file") as lf:
        s = lf.read()
        last_pos = int(s)
except:
    last_post = 0

with open("/var/log/messages") as sl:
    sl.seek(last_pos)
    for line in sl:
        # This should be the starting point from the last read
    last_loc = sl.tell()

with open("location.file", "w") as lf:
    lf.write(str(last_loc))
</snippet></ROW><ROW><id>7055382</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; url = 'http://www.immi.gov.au/skilled/general-skilled-migration/estimated-allocation-times.htm'
&gt;&gt;&gt; page = urllib2.urlopen(url)
&gt;&gt;&gt; soup = BeautifulSoup(page)
&gt;&gt;&gt; for row in soup.html.body.findAll('tr'):
...     data = row.findAll('td')
...     if data and 'subclass 885online' in data[0].text:
...         print data[4].text
... 
15 May 2011
</snippet></ROW><ROW><id>7055383</id><snippet>unicode</snippet></ROW><ROW><id>7055383</id><snippet>&gt;&gt;&gt; '\x00I\x00S\x00T\x00A\x00\r\x00\n\x00[\x00/\x00B\x00O\x00D\x00Y\x00]\x00\r\x00\n'.decode('utf-16be')
u'ISTA\r\n[/BODY]\r\n'
</snippet></ROW><ROW><id>7055383</id><snippet>codecs.open()</snippet></ROW><ROW><id>7055383</id><snippet>open()</snippet></ROW><ROW><id>7055677</id><snippet>## urls.py
urlpatterns = patterns('',
  (r'',include('dealerpanel.urls')),
  (r'^admin/', include(admin.site.urls))
)
</snippet></ROW><ROW><id>7055677</id><snippet>dealerpanel.ursl</snippet></ROW><ROW><id>7055677</id><snippet>/login/login/
/login/home/
/home/login
...
</snippet></ROW><ROW><id>7055683</id><snippet>import random

DATA = {
    'a': ['b','c','d'],
    'b': ['a','e'],
    'c': ['a','d','f'],
    'd': ['a','c','e','f','g','h'],
    'e': ['b','d','h'],
    'f': ['c','d','g','i'],
    'g': ['d','f','i'],
    'h': ['d','e','g','i'],
    'i': ['f','h'],
}

x = 0
answer = random.choice(DATA['f'])
print "answer is %s " % answer

while x &lt; 5:
    answer2 = random.choice(DATA[answer]) 
    print "answer2 is now %s " % answer2
    x = x + 1
</snippet></ROW><ROW><id>7055842</id><snippet>extends</snippet></ROW><ROW><id>7055842</id><snippet>include</snippet></ROW><ROW><id>7055964</id><snippet>from softwareproperties.SoftwareProperties import SoftwareProperties
sp = SoftwareProperties()
sp.add_source_from_line(ppa_name)
sp.sourceslist.save()
</snippet></ROW><ROW><id>7055964</id><snippet>less `which add-apt-repository`
</snippet></ROW><ROW><id>7055995</id><snippet>split()</snippet></ROW><ROW><id>7055995</id><snippet>os</snippet></ROW><ROW><id>7055995</id><snippet>file[:file.find('.')]</snippet></ROW><ROW><id>7055995</id><snippet>file</snippet></ROW><ROW><id>7056068</id><snippet>templates</snippet></ROW><ROW><id>7056068</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>7056068</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>7056068</id><snippet>settings.py</snippet></ROW><ROW><id>7056374</id><snippet>Blueprint</snippet></ROW><ROW><id>7056374</id><snippet>render_template()</snippet></ROW><ROW><id>7056374</id><snippet>from functools import wraps
from flask import render_template

def autorender(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        context = func(*args, **kwargs)
        return render_template('%s.html' % func.func_name, **context)
    return wrapper
</snippet></ROW><ROW><id>7056374</id><snippet>@my_blueprint.route('/')
@autorender
def index():
    return {'name': 'John'} # or whatever your context is
</snippet></ROW><ROW><id>7056374</id><snippet>index.html</snippet></ROW><ROW><id>7056377</id><snippet>Position</snippet></ROW><ROW><id>7056377</id><snippet>Categories</snippet></ROW><ROW><id>7056377</id><snippet>Directory</snippet></ROW><ROW><id>7056377</id><snippet>through</snippet></ROW><ROW><id>7056377</id><snippet>class Position(models.Model):
    website_postiton = models.IntegerField()
    category = models.ForeignKey('Category')
    directory = models.ForeignKey('Directory')

class Category(models.Model):
    n_category = models.CharField(max_length=100)

class Directory(models.Model):
    website_name = models.CharField(max_length=200)
    website_url = models.URLField()
    categories = models.ManyToManyField(Category, through=Position)
</snippet></ROW><ROW><id>7056796</id><snippet>db.StringListProperty</snippet></ROW><ROW><id>7056796</id><snippet>db.ListProperty(db.Key)</snippet></ROW><ROW><id>7056947</id><snippet>x!</snippet></ROW><ROW><id>7057076</id><snippet>hyperlink_map</snippet></ROW><ROW><id>7057076</id><snippet>import xlrd
mainData_book = xlrd.open_workbook("IEsummary.xls", formatting_info=True)
mainData_sheet = mainData_book.sheet_by_index(0)
for row in range(1, 101):
    rowValues = mainData_sheet.row_values(row, start_colx=0, end_colx=8)
    company_name = rowValues[0]

    link = mainData_sheet.hyperlink_map.get((row, 0))
    url = '(No URL)' if link is None else link.url_or_path
    print(company_name.ljust(20) + ': ' + url)
</snippet></ROW><ROW><id>7057084</id><snippet>from ftplib import FTP, error_perm
</snippet></ROW><ROW><id>7057084</id><snippet>error_perm</snippet></ROW><ROW><id>7057084</id><snippet>except error_perm, msg:
</snippet></ROW><ROW><id>7057084</id><snippet>error_perm</snippet></ROW><ROW><id>7057084</id><snippet>msg</snippet></ROW><ROW><id>7057129</id><snippet>static</snippet></ROW><ROW><id>7057129</id><snippet>.gitignore</snippet></ROW><ROW><id>7057471</id><snippet>import re

ss = '''When colour goes [xxxx] home into the eyes,
And lights that shine are shut again,
With danc[yyy]ing girls and sweet birds' cries
Behind the gateways[ZZZZ  ] of the brain;
And that no-place which gave them birth, shall close
The [AAA]rainbow [UUUUU] and [BBBB]the rose:—'''

print ss,'\n'

dico_lines = dict( (n,repr(line)) for n,line in enumerate(ss.splitlines(True),1))

def repl(mat, countline =[1]):
    if mat.group(1):
        print "line %s: detecting \\n , the counter of lines is incremented -&gt; %s" % (countline[0],countline[0]+1)
        countline[0] += 1
        return mat.group(1)
    else:
        print "line %s: removing %10s  in  %s" % (countline[0],repr(mat.group()),dico_lines[countline[0]])
        return ''

print '\n'+re.sub(r'(\n)|\[.*?\] ?',repl,ss)
</snippet></ROW><ROW><id>7057471</id><snippet>When colour goes [xxxx] home into the eyes,
And lights that shine are shut again,
With danc[yyy]ing girls and sweet birds' cries
Behind the gateways[ZZZZ  ] of the brain;
And that no-place which gave them birth, shall close
The [AAA]rainbow [UUUUU] and [BBBB]the rose:— 

line 1: removing  '[xxxx] '  in  'When colour goes [xxxx] home into the eyes,\n'
line 1: detecting \n , the counter of lines is incremented -&gt; 2
line 2: detecting \n , the counter of lines is incremented -&gt; 3
line 3: removing    '[yyy]'  in  "With danc[yyy]ing girls and sweet birds' cries\n"
line 3: detecting \n , the counter of lines is incremented -&gt; 4
line 4: removing '[ZZZZ  ] '  in  'Behind the gateways[ZZZZ  ] of the brain;\n'
line 4: detecting \n , the counter of lines is incremented -&gt; 5
line 5: detecting \n , the counter of lines is incremented -&gt; 6
line 6: removing    '[AAA]'  in  'The [AAA]rainbow [UUUUU] and [BBBB]the rose:\x97'
line 6: removing '[UUUUU] '  in  'The [AAA]rainbow [UUUUU] and [BBBB]the rose:\x97'
line 6: removing   '[BBBB]'  in  'The [AAA]rainbow [UUUUU] and [BBBB]the rose:\x97'

When colour goes home into the eyes,
And lights that shine are shut again,
With dancing girls and sweet birds' cries
Behind the gatewaysof the brain;
And that no-place which gave them birth, shall close
The rainbow and the rose:—
</snippet></ROW><ROW><id>7057471</id><snippet>ss = 'one [two [three] ] end of line'
print re.sub(r'\[.+?\]\s?','',ss)
</snippet></ROW><ROW><id>7057471</id><snippet>one ] end of line
</snippet></ROW><ROW><id>7057471</id><snippet>ss = 'one [two [three] ] end of line'
print re.sub(r'\[[^\][]*\]\s?','',ss)
</snippet></ROW><ROW><id>7057471</id><snippet>one [two ] end of line
</snippet></ROW><ROW><id>7057471</id><snippet>import re

ss = '''This is the [first]       line   
(And) another line
   [Inter][A] initially shifted
[Finally][B] the last
    Additional ending lines (this one without brackets):    
[Note that [ by the way [ref [ 1]] there are]    [some] other ]cases
tuvulu[]gusti perena[3]              bdiiii
    [Away [is this] [][4] ] shifted content
    fgjezhr][fgh
'''

def clean(x, regx = re.compile('( |(?&lt;! ))+((?&lt;!])\[[^[\]]*\])( *)')):
    while regx.search(x):
        print '------------\n',x,'\n','\n'.join(map(str,regx.findall(x)))
        x = regx.sub('\\1',x)
    return x


print '\n==========================\n'+clean(ss)
</snippet></ROW><ROW><id>7057471</id><snippet>This is the line   
(And) another line
 initially shifted
the last
    Additional ending lines (this one without brackets):    
cases
tuvulugusti perenabdiiii
 shifted content
    fgjezhr][fgh
</snippet></ROW><ROW><id>7057471</id><snippet>   [Inter][A] initially shifted
    [Away [is this] [][4] ] shifted content
</snippet></ROW><ROW><id>7057471</id><snippet> initially shifted
 shifted content
</snippet></ROW><ROW><id>7057471</id><snippet>def clean(x, regx = re.compile('(?=^( ))?( |(?&lt;! ))+((?&lt;!])\[[^[\]]*\])( )*',re.MULTILINE)):
    def repl(mat):
        return '' if mat.group(1) else mat.group(2)
    while regx.search(x):
        print '------------\n',x,'\n','\n'.join(map(str,regx.findall(x)))
        x = regx.sub(repl,x)
    return x


print '\n==========================\n'+clean(ss)
</snippet></ROW><ROW><id>7057471</id><snippet>This is the line   
(And) another line
initially shifted
the last
    Additional ending lines (this one without brackets):    
cases
tuvulugusti perenabdiiii
shifted content
    fgjezhr][fgh
</snippet></ROW><ROW><id>7057471</id><snippet>import re

ss = '''This is the [first]       line   
(And) another line
   [Inter][A] initially shifted
[Finally][B] the last
    Additional ending lines (this one without brackets):    
[Note that [ by the way [ref [ 1]] there are]    [some] other ]cases
tuvulu[]gusti perena[3]              bdiiii
    [Away [is this] [][4] ] shifted content
    fgjezhr][fgh
'''

def clean(x, rag = re.compile('\[.*\]',re.MULTILINE),
          regx = re.compile('(\n)|(?=^( ))?( |(?&lt;! ))+((?&lt;!])\[[^[\]\n]*\])( *)',re.MULTILINE)):

    def repl(mat, cnt = None, dico_lignes = None):
        if mat.group(1):
            print "line %s: detecting %s  ==&gt; count incremented to %s" % (cnt[0],str(mat.groups('')),cnt[0]+1)
            cnt[0] += 1
            return mat.group(1)
        if mat.group(4):
            print "line %s: removing %s   IN   %s" % (cnt[0],repr(mat.group(4)),dico_lignes[cnt[0]])
            return '' if mat.group(2) else mat.group(3)

    while rag.search(x):
        print '\n--------------------------\n'+x
        repl.func_defaults = ([1],dict( (n,repr(line)) for n,line in enumerate(x.splitlines(True),1)))
        x = regx.sub(repl,x)
    return x


print '\n==========================\n'+clean(ss)
</snippet></ROW><ROW><id>7057471</id><snippet>--------------------------
This is the [first]       line   
(And) another line
   [Inter][A] initially shifted
[Finally][B] the last
    Additional ending lines (this one without brackets):    
[Note that [ by the way [ref [ 1]] there are]    [some] other ]cases
tuvulu[]gusti perena[3]              bdiiii
    [Away [is this] [][4] ] shifted content
    fgjezhr][fgh

line 1: removing '[first]'   IN   'This is the [first]       line   \n'
line 1: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 2
line 2: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 3
line 3: removing '[Inter]'   IN   '   [Inter][A] initially shifted\n'
line 3: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 4
line 4: removing '[Finally]'   IN   '[Finally][B] the last\n'
line 4: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 5
line 5: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 6
line 6: removing '[ 1]'   IN   '[Note that [ by the way [ref [ 1]] there are]    [some] other ]cases\n'
line 6: removing '[some]'   IN   '[Note that [ by the way [ref [ 1]] there are]    [some] other ]cases\n'
line 6: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 7
line 7: removing '[]'   IN   'tuvulu[]gusti perena[3]              bdiiii\n'
line 7: removing '[3]'   IN   'tuvulu[]gusti perena[3]              bdiiii\n'
line 7: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 8
line 8: removing '[is this]'   IN   '    [Away [is this] [][4] ] shifted content\n'
line 8: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 9
line 9: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 10

--------------------------
This is the line   
(And) another line
[A] initially shifted
[B] the last
    Additional ending lines (this one without brackets):    
[Note that [ by the way [ref ] there are] other ]cases
tuvulugusti perenabdiiii
    [Away [][4] ] shifted content
    fgjezhr][fgh

line 1: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 2
line 2: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 3
line 3: removing '[A]'   IN   '[A] initially shifted\n'
line 3: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 4
line 4: removing '[B]'   IN   '[B] the last\n'
line 4: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 5
line 5: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 6
line 6: removing '[ref ]'   IN   '[Note that [ by the way [ref ] there are] other ]cases\n'
line 6: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 7
line 7: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 8
line 8: removing '[]'   IN   '    [Away [][4] ] shifted content\n'
line 8: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 9
line 9: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 10

--------------------------
This is the line   
(And) another line
initially shifted
the last
    Additional ending lines (this one without brackets):    
[Note that [ by the way there are] other ]cases
tuvulugusti perenabdiiii
    [Away [4] ] shifted content
    fgjezhr][fgh

line 1: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 2
line 2: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 3
line 3: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 4
line 4: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 5
line 5: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 6
line 6: removing '[ by the way there are]'   IN   '[Note that [ by the way there are] other ]cases\n'
line 6: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 7
line 7: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 8
line 8: removing '[4]'   IN   '    [Away [4] ] shifted content\n'
line 8: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 9
line 9: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 10

--------------------------
This is the line   
(And) another line
initially shifted
the last
    Additional ending lines (this one without brackets):    
[Note that other ]cases
tuvulugusti perenabdiiii
    [Away ] shifted content
    fgjezhr][fgh

line 1: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 2
line 2: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 3
line 3: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 4
line 4: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 5
line 5: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 6
line 6: removing '[Note that other ]'   IN   '[Note that other ]cases\n'
line 6: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 7
line 7: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 8
line 8: removing '[Away ]'   IN   '    [Away ] shifted content\n'
line 8: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 9
line 9: detecting ('\n', '', '', '', '')  ==&gt; count incremented to 10

==========================
This is the line   
(And) another line
initially shifted
the last
    Additional ending lines (this one without brackets):    
cases
tuvulugusti perenabdiiii
shifted content
    fgjezhr][fgh
</snippet></ROW><ROW><id>7057488</id><snippet># this is a comment
</snippet></ROW><ROW><id>7057488</id><snippet>&gt;&gt;&gt; def bla():
...     """Print the answer"""
...     print 42
...
&gt;&gt;&gt; bla.__doc__
'Print the answer'
&gt;&gt;&gt; help(bla)
Help on function bla in module __main__:

bla()
    Print the answer
</snippet></ROW><ROW><id>7057488</id><snippet>"""</snippet></ROW><ROW><id>7057515</id><snippet>In [45]: print(arr)
[[12 13 14]
 [15 16 17]
 [18 19 20]]

In [46]: arr_list = arr.tolist()

In [47]: print(arr_list)
[[12, 13, 14], [15, 16, 17], [18, 19, 20]]
</snippet></ROW><ROW><id>7057530</id><snippet>class MyArray( object ):
  __array_priority__ = 1. # &lt;- fixes the problem
  def __rmul__( self, other ):
    return MyArray()
</snippet></ROW><ROW><id>7057593</id><snippet>^(@\w+\s)+</snippet></ROW><ROW><id>7057593</id><snippet>@user1 @user2 blablabla @user3</snippet></ROW><ROW><id>7057768</id><snippet>tuple</snippet></ROW><ROW><id>7057811</id><snippet>print</snippet></ROW><ROW><id>7057811</id><snippet>print(x)</snippet></ROW><ROW><id>7057811</id><snippet>a = x</snippet></ROW><ROW><id>7057811</id><snippet>dict.values()</snippet></ROW><ROW><id>7057811</id><snippet>dict.keys()</snippet></ROW><ROW><id>7057811</id><snippet>dict.keys()</snippet></ROW><ROW><id>7057811</id><snippet>letter in dict</snippet></ROW><ROW><id>7057811</id><snippet>dict[letter]</snippet></ROW><ROW><id>7057811</id><snippet>for</snippet></ROW><ROW><id>7057811</id><snippet>in</snippet></ROW><ROW><id>7057811</id><snippet>if</snippet></ROW><ROW><id>7057811</id><snippet>[kalg[letter] for letter in name if letter in kalg]</snippet></ROW><ROW><id>7057811</id><snippet>name</snippet></ROW><ROW><id>7057811</id><snippet>dict.keys()</snippet></ROW><ROW><id>7057811</id><snippet>dict</snippet></ROW><ROW><id>7057811</id><snippet>kalg = {'a': '50075', 'b': '18099', 'c': '89885'} # etc.
name = input('Name: ')
print(''.join(kalg[letter] for letter in name if name in kalg))
</snippet></ROW><ROW><id>7057908</id><snippet>&gt;&gt;&gt; list_of_tuples = [(1,2),(3,4)]
&gt;&gt;&gt; list_of_tuples
[(1, 2), (3, 4)]
</snippet></ROW><ROW><id>7057908</id><snippet>&gt;&gt;&gt; list_of_lists = [[1, 2], [3, 4]]
&gt;&gt;&gt; list_of_lists
[[1, 2], [3, 4]]
</snippet></ROW><ROW><id>7057908</id><snippet>&gt;&gt;&gt; list_of_lists[0][0] = 7
&gt;&gt;&gt; list_of_lists
[[7, 2], [3, 4]]
</snippet></ROW><ROW><id>7057908</id><snippet>&gt;&gt;&gt; list_of_tuples[0][0] = 7
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</snippet></ROW><ROW><id>7057908</id><snippet>&gt;&gt;&gt; for (x,y) in list_of_tuples:
...    print x,y
... 
1 2
3 4
</snippet></ROW><ROW><id>7057953</id><snippet>sys.settrace</snippet></ROW><ROW><id>7057953</id><snippet>import sys
import time
import atexit
from guppy import hpy

_last_log_time = time.time()
_logfile = open('logfile.txt', 'w')

def heapy_profile(frame, event, arg):
    currtime = time.time()
    if currtime - _last_log_time &lt; 1:
        return
    _last_log_time = currtime
    code = frame.f_code
    filename = code.co_filename
    lineno = code.co_firstlineno
    idset = hpy().heap()
    logfile.write('%s %s:%s\n%s\n\n' % (currtime, filename, lineno, idset))
    logfile.flush()

atexit.register(_logfile.close)
sys.settrace(heapy_profile)
</snippet></ROW><ROW><id>7057989</id><snippet>from django.contrib.auth.views import login
# ...
url(r"^login/$", csrf_exempt(login), {"template_name": "users/login.html"}, "login"),
</snippet></ROW><ROW><id>7057989</id><snippet>@my_decorator
def function():
    pass
</snippet></ROW><ROW><id>7057989</id><snippet>def function():
    pass

my_ decorator(function)
</snippet></ROW><ROW><id>7058640</id><snippet>ImageZIP</snippet></ROW><ROW><id>7058640</id><snippet>dynamic inheritance</snippet></ROW><ROW><id>7058640</id><snippet>def image_factory(path):
    # ...

    if format == ".gz":
        image = unpack_gz(path)
        format = os.path.splitext(image)[1][1:]
        if format == "jpg":
            return MakeImageZip(ImageJPG, image)
        elif format == "png":
            return MakeImageZip(ImagePNG, image)
        else: raise Exception('The format "' + format + '" is not supported.')

def MakeImageZIP(base, path):
    '''`base` either ImageJPG or ImagePNG.'''

    class ImageZIP(base):

        # ...

    return  ImageZIP(path)
</snippet></ROW><ROW><id>7058640</id><snippet>image_factory</snippet></ROW><ROW><id>7058640</id><snippet>def ImageZIP(path):

    path = unpack_gz(path)
    format = os.path.splitext(image)[1][1:]

    if format == "jpg": base = ImageJPG
    elif format == "png": base = ImagePNG
    else: raise_unsupported_format_error()

    class ImageZIP(base): # would it be better to use   ImageZip_.__name__ = "ImageZIP" ?
        # ...

    return ImageZIP(path)
</snippet></ROW><ROW><id>7058690</id><snippet>content = [x for x in content if not x.startswith('#')]
</snippet></ROW><ROW><id>7058748</id><snippet>        print((primer_x+0.06, primer_y))
</snippet></ROW><ROW><id>7058748</id><snippet>primer_y</snippet></ROW><ROW><id>7058748</id><snippet>self.axes.annotate</snippet></ROW><ROW><id>7058748</id><snippet>self.fig.text</snippet></ROW><ROW><id>7058748</id><snippet>self.fig.text</snippet></ROW><ROW><id>7058748</id><snippet>self.axes.text</snippet></ROW><ROW><id>7058748</id><snippet>for primer,primer_y in zip(data,np.linspace(0.95,0.0,len(data))):
</snippet></ROW><ROW><id>7058748</id><snippet>primer_y</snippet></ROW><ROW><id>7058748</id><snippet>primer_y</snippet></ROW><ROW><id>7058748</id><snippet>data</snippet></ROW><ROW><id>7058748</id><snippet>figsize</snippet></ROW><ROW><id>7058748</id><snippet>self.fig = matplotlib.figure.Figure(figsize=(20, 30), facecolor='white')
</snippet></ROW><ROW><id>7059375</id><snippet>7962716_41tlK2uT%2BSL.SL75.png</snippet></ROW><ROW><id>7059375</id><snippet>7962716_41tlK2uT%2BSL.SL75.png</snippet></ROW><ROW><id>7059375</id><snippet>7962716_41tlK2uT%252BSL.SL75.png</snippet></ROW><ROW><id>7059375</id><snippet>%25</snippet></ROW><ROW><id>7059375</id><snippet>q</snippet></ROW><ROW><id>7059375</id><snippet>&gt;&gt;&gt;urllib.urlencode({'q':'7962716_41tlK2uT%2BSL.SL75.png'}) == "q=7962716_41tlK2uT%252BSL.SL75.png"
True
</snippet></ROW><ROW><id>7059385</id><snippet>def OnSearch(self, event=None):

    value = self.filter.GetValue()
    if not value:
        self.RecreateTree()
        return

    wx.BeginBusyCursor()

    for category, items in _treeList:
        self.searchItems[category] = []
        for childItem in items:
            if SearchDemo(childItem, value):
                self.searchItems[category].append(childItem)

    wx.EndBusyCursor()
    self.RecreateTree()    
</snippet></ROW><ROW><id>7059643</id><snippet>def mult(x, y, b, m):
    bm = pow(b, m)

    if min(x, y) &lt;= bm:
        return x * y

    # NOTE the following 4 lines
    x0 = x % bm
    x1 = x / bm
    y0 = y % bm
    y1 = y / bm

    z0 = mult(x0, y0, b, m)
    z2 = mult(x1, y1, b, m)
    z1 = mult(x1 + x0, y1 + y0, b, m) - z2 - z0

    retval = mult(mult(z2, bm, b, m) + z1, bm, b, m) + z0
    assert retval == x * y, "%d * %d == %d != %d" % (x, y, x * y, retval)
    return retval
</snippet></ROW><ROW><id>7059643</id><snippet>x1</snippet></ROW><ROW><id>7059643</id><snippet>y1</snippet></ROW><ROW><id>7059643</id><snippet>def mult(x, y, b, m):
    # The termination condition will never be true when the recursive 
    # call is either
    #    mult(z2, bm ** 2, b, m)
    # or mult(z1, bm, b, m)
    #
    # Since every recursive call leads to one of the above, you have an
    # infinite recursion condition.
    if max(x, y) &lt; b:
        return x * y

    bm = pow(b, m)

    # Even without the recursion problem, the next four lines are wrong
    x0 = x / bm  # RHS should be x % bm
    x1 = x % bm  # RHS should be x / bm
    y0 = y / bm  # RHS should be y % bm
    y1 = y % bm  # RHS should be y / bm

    z2 = mult(x1, y1, b, m)
    z0 = mult(x0, y0, b, m)
    z1 = mult(x1 + x0, y1 + y0, b, m) - z2 - z0

    return mult(z2, bm ** 2, b, m) + mult(z1, bm, b, m) + z0
</snippet></ROW><ROW><id>7059799</id><snippet>back_minutes = timedelta(minutes=int(sys.argv[2]))
</snippet></ROW><ROW><id>7060268</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# Random data
num = 100
xy = np.random.random((2,num)) + 0.01 * np.arange(num)

eigvals, eigvecs = np.linalg.eig(np.cov(xy))

fig, (ax1, ax2) = plt.subplots(nrows=2)
x,y = xy
center = xy.mean(axis=-1)
for ax in [ax1, ax2]:
    ax.plot(x,y, 'ro')
    ax.axis('equal')

for val, vec in zip(eigvals, eigvecs.T):
    val *= 2
    x,y = np.vstack((center + val * vec, center, center - val * vec)).T
    ax2.plot(x,y, 'b-', lw=3)

plt.show()
</snippet></ROW><ROW><id>7060288</id><snippet>mkimap = lambda: imap(str,xrange(1,4))
list(mkimap())
list(mkimap())
</snippet></ROW><ROW><id>7060288</id><snippet>class MultiIter(object):
    def __init__(self, f, *a, **k):
        if a or k:
            self.create = lambda: f(*a, **k)
        else: # optimize
            self.create = f
    def __iter__(self):
        return self.create()

l = MultiIter(lambda: imap(str, xrange(1,4)))
# or
l = MultiIter(imap, str, xrange(1,4))
# or even
@MultiIter
def l():
    return imap(str, xrange(1,4))

# and then
print list(l)
print list(l)
</snippet></ROW><ROW><id>7060394</id><snippet>rListObj = {}
for key,val in zip(robjects.r.names(res),res):
  rListObj[key] = [i for i in val] #R Vector to List
</snippet></ROW><ROW><id>7060394</id><snippet>{'f': [1.0, 1.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0], 'rx': [1, 3], 'ry': [1, 3], 'np': [2], 'beta': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r': [-1.7320508075688772, -1.6729239521451333e-16, -1.4142135623730951, -1.1547005383792512, -5.187907395343139e-17, -0.8164965809277259, -1.6729239521451333e-16, -1.4142135623730951, 3.415236843329339e-17, nan, -1.1547005383792512, -5.187907395343139e-17, -0.8164965809277259, nan, 0.0, -1.1547005383792512, -5.187907395343139e-17, -0.8164965809277259, nan, 0.0, 0.0], 'call': [&lt;SignatureTranslatedFunction - Python:0xb7539dec / R:0xa686cec&gt;, &lt;IntVector - Python:0xb7534cac / R:0xa69e788&gt;, &lt;IntVector - Python:0xb7534d2c / R:0xa5f72f8&gt;, &lt;IntVector - Python:0xb7534c2c / R:0xa5f7320&gt;, &lt;IntVector - Python:0xb7534bac / R:0xa5f7348&gt;], 'y': [1, 2, 3], 'x': [1, 2, 3], 'z': [1, 30, 3], 'wz': [0.0, 0.0, 0.0]}
</snippet></ROW><ROW><id>7060438</id><snippet>def titlecase(value):
    return "".join(word.title() for word in value.split("_"))
</snippet></ROW><ROW><id>7060438</id><snippet>def titlecase2(value):
     return value[:1].lower() + titlecase(value)[1:]
</snippet></ROW><ROW><id>7060755</id><snippet>def load():
    global var
    var = something()
</snippet></ROW><ROW><id>7060755</id><snippet>global</snippet></ROW><ROW><id>7060777</id><snippet>dont_care = Suppress(Word(alphas))</snippet></ROW><ROW><id>7060777</id><snippet>dont_care = Word(alphas).suppress()</snippet></ROW><ROW><id>7061037</id><snippet>sort='position'</snippet></ROW><ROW><id>7061037</id><snippet>filter='newest'</snippet></ROW><ROW><id>7061473</id><snippet>def callback(a, b):
    # do something with a, b

class A:
    def __init__(self, callback):
        # now it won't get passed self
        self.callback = staticmethod(callback)
        self.callback(1, 2)
</snippet></ROW><ROW><id>7061473</id><snippet>class A:
    def __init__(self, callback):
        self.callback(1, 2)

    # now it won't get passed self
    callback = staticmethod(callback)
</snippet></ROW><ROW><id>7061503</id><snippet>datetime</snippet></ROW><ROW><id>7061503</id><snippet>time</snippet></ROW><ROW><id>7061956</id><snippet>settrace</snippet></ROW><ROW><id>7061956</id><snippet>settrace</snippet></ROW><ROW><id>7061956</id><snippet>pydev</snippet></ROW><ROW><id>7061956</id><snippet>C:\Program Files\JetBrains\PyCharm 1.5.3\pycharm-debug.egg</snippet></ROW><ROW><id>7061956</id><snippet>/home/john/api-dependancies/pycharm-debug.egg</snippet></ROW><ROW><id>7061956</id><snippet>   import sys
   sys.path.append('/home/john/app-dependancies/pycharm-debug.egg')
</snippet></ROW><ROW><id>7061956</id><snippet>ping</snippet></ROW><ROW><id>7061956</id><snippet>netstat</snippet></ROW><ROW><id>7061956</id><snippet>21000</snippet></ROW><ROW><id>7061956</id><snippet> Starting debug server at port 21000
</snippet></ROW><ROW><id>7061956</id><snippet>from django.test import TestCase
class APITestCase(TestCase):
    def test_remote_debug(self):
        import sys
        sys.path.append('/home/john/dependancies/pycharm-debug.egg')
        from pydev import pydevd
        pydevd.settrace('192.168.33.1', port=21000, suspend=False)

        print "foo"
</snippet></ROW><ROW><id>7061956</id><snippet>if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
    from django.core.management import execute_from_command_line
    execute_from_command_line(sys.argv)

    sys.path.append('/vagrant/pycharm-debug.egg')
    import pydevd
    pydevd.settrace('192.168.33.1', port=21000, suspend=False)
</snippet></ROW><ROW><id>7061956</id><snippet>suspend=False</snippet></ROW><ROW><id>7061956</id><snippet>Connected to pydev debugger (build 107.386)
</snippet></ROW><ROW><id>7061956</id><snippet>/Users/john/code/app/    /opt/bestprice/app/
/Users/john/code/master/lib    /opt/bestprice/lib/python2.7/site-packages
</snippet></ROW><ROW><id>7062033</id><snippet>fetchall</snippet></ROW><ROW><id>7062102</id><snippet>webbrowser</snippet></ROW><ROW><id>7062359</id><snippet>wx.Notebook</snippet></ROW><ROW><id>7062359</id><snippet>wx.lib.agw.aui.AuiNotebook</snippet></ROW><ROW><id>7062359</id><snippet>import wx
import wx.lib.agw.aui as aui

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        style = aui.AUI_NB_DEFAULT_STYLE ^ aui.AUI_NB_CLOSE_ON_ACTIVE_TAB
        self.notebook = aui.AuiNotebook(self, agwStyle=style)      

        self.panel1 = wx.Panel(self.notebook)
        self.panel2 = wx.Panel(self.notebook)
        self.panel3 = wx.Panel(self.notebook)

        self.notebook.AddPage(self.panel1, "First")
        self.notebook.AddPage(self.panel2, "Second")
        self.notebook.AddPage(self.panel3, "Third")

        self.notebook.EnableTab(1, False)

        self.Show()


app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>7062409</id><snippet>difflib</snippet></ROW><ROW><id>7062409</id><snippet>import difflib

list_1 = ['J. Payne', 'George Bush', 'Billy Idol', 'M Stuart', 'Luc van den Bergen']
list_2 = ['John Payne', 'George W. Bush', 'Billy Idol', 'M. Stuart', 'Luc Bergen']

mymap = {}
for elem in list_1:
    closest = difflib.get_close_matches(elem, list_2)
    if closest:
        mymap[elem] = closest[0]

print mymap
</snippet></ROW><ROW><id>7062409</id><snippet>{'George Bush': 'George W. Bush', 
 'Luc van den Bergen': 'Luc Bergen', 
 'Billy Idol': 'Billy Idol', 
 'J. Payne': 'John Payne', 
 'M Stuart': 'M. Stuart'}
</snippet></ROW><ROW><id>7062422</id><snippet>/usr/bin/a
/usr/bin/b
/usr/etc
/usr/local
</snippet></ROW><ROW><id>7062422</id><snippet>/usr</snippet></ROW><ROW><id>7062422</id><snippet>/usr/bin</snippet></ROW><ROW><id>7062422</id><snippet>/usr</snippet></ROW><ROW><id>7062422</id><snippet>os.path.commonprefix()</snippet></ROW><ROW><id>7062422</id><snippet>/</snippet></ROW><ROW><id>7062480</id><snippet>(clientsocket, address) = serversocket.accept()</snippet></ROW><ROW><id>7062480</id><snippet>\n</snippet></ROW><ROW><id>7062480</id><snippet>socket.makefile</snippet></ROW><ROW><id>7062480</id><snippet>file.readline</snippet></ROW><ROW><id>7062659</id><snippet>&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; reduce( mul, map( long, [ 12312412314L, 5 ] ), 1 )
61562061570L
&gt;&gt;&gt; reduce( mul, [ 231212312412L, 3 ], 1 )
693636937236L
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7062659</id><snippet>'abs',
 'add',
 'and_',
 'attrgetter',
 'concat',
 'contains',
 'countOf',
 'delitem',
 'delslice',
 'div',
 'eq',
 'floordiv',
 'ge',
 'getitem',
 'getslice',
 'gt',
 'iadd',
 'iand',
 'iconcat',
 'idiv',
 'ifloordiv',
 'ilshift',
 'imod',
 'imul',
 'index',
 'indexOf',
 'inv',
 'invert',
 'ior',
 'ipow',
 'irepeat',
 'irshift',
 'isCallable',
 'isMappingType',
 'isNumberType',
 'isSequenceType',
 'is_',
 'is_not',
 'isub',
 'itemgetter',
 'itruediv',
 'ixor',
 'le',
 'lshift',
 'lt',
 'methodcaller',
 'mod',
 'mul',
 'ne',
 'neg',
 'not_',
 'or_',
 'pos',
 'pow',
 'repeat',
 'rshift',
 'sequenceIncludes',
 'setitem',
 'setslice',
 'sub',
 'truediv',
 'truth',
 'xor'
</snippet></ROW><ROW><id>7062843</id><snippet>Ctrl-Alt-Enter</snippet></ROW><ROW><id>7062843</id><snippet>Current active editor</snippet></ROW><ROW><id>7063003</id><snippet>hist</snippet></ROW><ROW><id>7063003</id><snippet>histogram</snippet></ROW><ROW><id>7063003</id><snippet>density=True</snippet></ROW><ROW><id>7063135</id><snippet>saxutils.escape</snippet></ROW><ROW><id>7063135</id><snippet>&lt;</snippet></ROW><ROW><id>7063135</id><snippet>&gt;</snippet></ROW><ROW><id>7063135</id><snippet>&amp;</snippet></ROW><ROW><id>7063135</id><snippet>entities</snippet></ROW><ROW><id>7063135</id><snippet>&lt;</snippet></ROW><ROW><id>7063135</id><snippet>&lt;</snippet></ROW><ROW><id>7063135</id><snippet>&lt;;</snippet></ROW><ROW><id>7063135</id><snippet>&lt;;</snippet></ROW><ROW><id>7063135</id><snippet>saxutils.escape</snippet></ROW><ROW><id>7063315</id><snippet>top = curses.newwin(1, 10, 0, 0)
top.addstr(0, 8, "X")
top.insstr(0, 8, " ")
</snippet></ROW><ROW><id>7063337</id><snippet>.java</snippet></ROW><ROW><id>7063337</id><snippet>fileinput.input()</snippet></ROW><ROW><id>7063337</id><snippet>def main():
    for root, dirs, files in os.walk('target/generated-sources'):
        java_files = [os.path.join(root, file) for file in files if file.endsWith('.java')]
        if not java_files:  # go to next iteration if list is empty
            continue
        for line in fileinput.input(java_files, inplace=True):
            match = re.search(r'@Table\(name = "(.*)"\)', line)
            output = "".join(['@Table(name = "', PREFIX, match.group(1)[MAX_TABLENAME_LEN - len(PREFIX)], '")', '\n']) if match else line
            print output,
</snippet></ROW><ROW><id>7063337</id><snippet>fileinput</snippet></ROW><ROW><id>7063337</id><snippet>import os, fnmatch, fileinput

def find_files(directory, pattern):
    "Generator that returns files  within direction with name matching pattern"
    for root, dirs, files in os.walk(directory):
        for basename in fnmatch.filter(files, pattern):
            filename = os.path.join(root, basename)
            yield filename

for line in fileinput.input(find_files("target/generated-sources", "*.java")):
    match = re.search(r'@Table\(name = "(.*)"\)', line)
    output = "".join(['@Table(name = "', PREFIX, match.group(1)[MAX_TABLENAME_LEN - len(PREFIX)], '")', '\n']) if match else line
    print output,
</snippet></ROW><ROW><id>7063509</id><snippet>ConfigParser</snippet></ROW><ROW><id>7063509</id><snippet># dbconfig.py
host = '127.0.0.1'
user = 'stack'
password = 'overflow'

# db.py

import dbconfig
print dbconfig.host
print dbconfig.user
print dbconfig.password
</snippet></ROW><ROW><id>7064487</id><snippet>timeit</snippet></ROW><ROW><id>7064487</id><snippet>def nolenmerge(array1,array2):
    merged_array=[]
    while array1 or array2:
        if not array1:
            merged_array.append(array2.pop(0))
        elif (not array2) or array1[0] &lt; array2[0]:
            merged_array.append(array1.pop(0))
        else:
            merged_array.append(array2.pop(0))
    return merged_array

def nolenmergeSort(array):
    n  = len(array)
    if n &lt;= 1:
        return array
    left = array[:n/2]
    right = array[n/2:]
    return nolenmerge(nolenmergeSort(left),nolenmergeSort(right))
</snippet></ROW><ROW><id>7064487</id><snippet>pop(0)</snippet></ROW><ROW><id>7064487</id><snippet>pop()</snippet></ROW><ROW><id>7064487</id><snippet>def fastmerge(array1,array2):
    merged_array=[]
    while array1 or array2:
        if not array1:
            merged_array.append(array2.pop())
        elif (not array2) or array1[-1] &gt; array2[-1]:
            merged_array.append(array1.pop())
        else:
            merged_array.append(array2.pop())
    merged_array.reverse()
    return merged_array
</snippet></ROW><ROW><id>7064487</id><snippet>merge</snippet></ROW><ROW><id>7064487</id><snippet>(mergeSort left)</snippet></ROW><ROW><id>7064487</id><snippet>(mergeSort right)</snippet></ROW><ROW><id>7064487</id><snippet>(merge)</snippet></ROW><ROW><id>7064487</id><snippet>def cps_merge_sort(array):
    return cpsmergeSort(array,lambda x:x)

def cpsmergeSort(array,continuation):
    n  = len(array)
    if n &lt;= 1:
        return continuation(array)
    left = array[:n/2]
    right = array[n/2:]
    return cpsmergeSort (left, lambda leftR:
                         cpsmergeSort(right, lambda rightR:
                                      continuation(fastmerge(leftR,rightR))))
</snippet></ROW><ROW><id>7064487</id><snippet>thunk = lambda name, *args: lambda: name(*args)
</snippet></ROW><ROW><id>7064487</id><snippet>def trampoline(bouncer):
    while callable(bouncer):
        bouncer = bouncer()
    return bouncer
</snippet></ROW><ROW><id>7064487</id><snippet>def tco_cpsmergeSort(array,continuation):
    n  = len(array)
    if n &lt;= 1:
        return continuation(array)
    left = array[:n/2]
    right = array[n/2:]
    return thunk (tco_cpsmergeSort, left, lambda leftR:
                  thunk (tco_cpsmergeSort, right, lambda rightR:
                         (continuation(fastmerge(leftR,rightR)))))

mycpomergesort = lambda l: trampoline(tco_cpsmergeSort(l,lambda x:x))
</snippet></ROW><ROW><id>7064487</id><snippet>    def leftcomb(l):
        maxn,leftcomb = len(l),[]
        n = maxn/2
        while maxn &gt; 1:
            leftcomb.append((l[n:maxn],False))
            maxn,n = n,n/2
        return l[:maxn],leftcomb

    def tcomergesort(l):
        l,stack = leftcomb(l)
        while stack: # l sorted, stack contains tagged slices
            i,ordered = stack.pop()
            if ordered:
                l = fastmerge(l,i)
            else:
                stack.append((l,True)) # store return call
                rsub,ssub = leftcomb(i)
                stack.extend(ssub) #recurse
                l = rsub
        return l
</snippet></ROW><ROW><id>7064507</id><snippet>return NotImplemented</snippet></ROW><ROW><id>7064507</id><snippet>Point</snippet></ROW><ROW><id>7064507</id><snippet>def __add__(self, other):
    if not isinstance(other, Point):
        return NotImplemented
    return Point(self.x + other.x, self.y + other.y)
</snippet></ROW><ROW><id>7064775</id><snippet>import itertools
output = list(itertools.islice(q, 3, 7))
</snippet></ROW><ROW><id>7064775</id><snippet>&gt;&gt;&gt; import collections, itertools
&gt;&gt;&gt; q = collections.deque(xrange(10, 20))
&gt;&gt;&gt; q
deque([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
&gt;&gt;&gt; list(itertools.islice(q, 3, 7))
[13, 14, 15, 16]
</snippet></ROW><ROW><id>7064775</id><snippet>[me@home]$ SETUP="import itertools,collections; q=collections.deque(xrange(1000000))"

[me@home]$ python -m timeit  "$SETUP" "list(itertools.islice(q, 10000, 20000))"
10 loops, best of 3: 68 msec per loop

[me@home]$ python -m timeit "$SETUP" "[q[i] for i in  xrange(10000, 20000)]"
10 loops, best of 3: 98.4 msec per loop

[me@home]$ python -m timeit "$SETUP" "list(q)[10000:20000]"
10 loops, best of 3: 107 msec per loop
</snippet></ROW><ROW><id>7064884</id><snippet>STATIC_ROOT = "/home/jacob/projects/mysite.com/sitestatic"
</snippet></ROW><ROW><id>7064915</id><snippet>urllib2</snippet></ROW><ROW><id>7064915</id><snippet>location</snippet></ROW><ROW><id>7064915</id><snippet>response.url</snippet></ROW><ROW><id>7064915</id><snippet>URLOpener</snippet></ROW><ROW><id>7064915</id><snippet>FancyURLOpener</snippet></ROW><ROW><id>7064958</id><snippet>08</snippet></ROW><ROW><id>7064958</id><snippet>8</snippet></ROW><ROW><id>7064994</id><snippet>class Grammar(metaclass=GrammarClass)
</snippet></ROW><ROW><id>7064994</id><snippet>class Grammar(object):
    __metaclass__=GrammarClass
</snippet></ROW><ROW><id>7064994</id><snippet>modgrammar</snippet></ROW><ROW><id>7065218</id><snippet>import sys
print sys.executable
print "\n".join(sys.path)
</snippet></ROW><ROW><id>7065242</id><snippet>import datetime
import pytz
utc=pytz.UTC
unaware = datetime.datetime(2011,8,15,8,15,12,0)
aware = datetime.datetime(2011,8,15,8,15,12,0,utc)

now_aware = utc.localize(unaware)
assert aware == now_aware
</snippet></ROW><ROW><id>7065242</id><snippet>localize</snippet></ROW><ROW><id>7065242</id><snippet>now_aware = unaware.replace(tzinfo=pytz.UTC)
</snippet></ROW><ROW><id>7065242</id><snippet>.replace</snippet></ROW><ROW><id>7065242</id><snippet>unaware</snippet></ROW><ROW><id>7065406</id><snippet>--default_partition=""</snippet></ROW><ROW><id>7065522</id><snippet>C:\&gt;g++
Access is denied.

C:\&gt;bash

$ ls -l /usr/bin/g++
lrwxrwxrwx 1 nate Domain Users 21 Mar 22  2010 /usr/bin/g++ -&gt; /etc/alternatives/g++

$ g++
g++: no input files
</snippet></ROW><ROW><id>7066247</id><snippet>self.checklist = parent.checklist</snippet></ROW><ROW><id>7066247</id><snippet>self.checklist = parent.checklist[:]</snippet></ROW><ROW><id>7066293</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig=plt.figure()
data=np.arange(900).reshape((30,30))
for i in range(1,5):
    ax=fig.add_subplot(2,2,i)        
    ax.imshow(data)

plt.suptitle('Main title')
plt.show()    
</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>len()</snippet></ROW><ROW><id>7066413</id><snippet>len('\U0010FFFF') == 1</snippet></ROW><ROW><id>7066413</id><snippet>'\uDBFF\uDFFF' != '\U0010FFFF'</snippet></ROW><ROW><id>7066413</id><snippet>'\U0010FFFF'[0]</snippet></ROW><ROW><id>7066413</id><snippet>'\U0010FFFF'</snippet></ROW><ROW><id>7066413</id><snippet>'\uDBFF'</snippet></ROW><ROW><id>7066413</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>7066413</id><snippet>PyUnicode_GetMax()</snippet></ROW><ROW><id>7066413</id><snippet>The ./configure</snippet></ROW><ROW><id>7066413</id><snippet>--with-wide-unicode</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>\N{...})</snippet></ROW><ROW><id>7066413</id><snippet>\X</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>"ß"</snippet></ROW><ROW><id>7066413</id><snippet>"SS"</snippet></ROW><ROW><id>7066413</id><snippet>"ss"</snippet></ROW><ROW><id>7066413</id><snippet>"ſſ"</snippet></ROW><ROW><id>7066413</id><snippet>"ſs"</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>regex</snippet></ROW><ROW><id>7066413</id><snippet>ismx</snippet></ROW><ROW><id>7066413</id><snippet>(?i:foo)</snippet></ROW><ROW><id>7066413</id><snippet>(?-i:foo)</snippet></ROW><ROW><id>7066413</id><snippet>agrep</snippet></ROW><ROW><id>7066413</id><snippet>glimpse</snippet></ROW><ROW><id>7066413</id><snippet>\L&lt;list&gt;</snippet></ROW><ROW><id>7066413</id><snippet>\m</snippet></ROW><ROW><id>7066413</id><snippet>\M</snippet></ROW><ROW><id>7066413</id><snippet>\R</snippet></ROW><ROW><id>7066413</id><snippet>(\w+\s+)+</snippet></ROW><ROW><id>7066413</id><snippet>@+</snippet></ROW><ROW><id>7066413</id><snippet>@-</snippet></ROW><ROW><id>7066413</id><snippet>(?|...|...|...|)</snippet></ROW><ROW><id>7066413</id><snippet>\w</snippet></ROW><ROW><id>7066413</id><snippet>\b</snippet></ROW><ROW><id>7066413</id><snippet>\s</snippet></ROW><ROW><id>7066413</id><snippet>\X</snippet></ROW><ROW><id>7066413</id><snippet>\G</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>re</snippet></ROW><ROW><id>7066413</id><snippet>\N{...}</snippet></ROW><ROW><id>7066430</id><snippet>alias</snippet></ROW><ROW><id>7066430</id><snippet>on FileExists(theFile) -- (String) as Boolean
    tell application "System Events"
        if exists file theFile then
            return true
        else
            return false
        end if
    end tell
end FileExists
</snippet></ROW><ROW><id>7066430</id><snippet>property kTargetFileExtensions : {"txt", "rtf", "pdf"}
property pValidFileList : {}

on open of theFiles -- Executed when files or folders are dropped on the script

    set fileCount to (get count of items in theFiles)

    repeat with thisFile from 1 to fileCount
        set theFile to item thisFile of theFiles

        my processInitialFile(theFile)

    end repeat

    my processValidFileList()

end open

on run {} -- Executed when the script is run from within the editor
    set sourceFolder to (choose folder)

    my processInitialFile(sourceFolder)

    my processValidFileList()
end run

on processInitialFile(theFile)
    tell application "System Events"
        set file_info to get info for theFile
    end tell

    if visible of file_info is true then -- check for the file extension here as well
        if folder of file_info is true then
            my createList(theFile)
        else
            set targetFileFound to isTargetFile(fileName, kTargetFileExtensions) of me

            if (targetFileFound) then
                set end of pValidFileList to theFile
            end if
        end if
    end if
end processInitialFile

on processValidFileList() -- (void) as void
    set firstFile to 1
    set lastFile to (count pValidFileList)
    repeat with thisFile from firstFile to lastFile
        set theFile to item thisFile of pValidFileList

        log theFile

        (* enter file processing code here. *)

    end repeat

end processValidFileList

on createList(mSource_folder)
    set item_list to ""

    tell application "System Events"
        set item_list to get the name of every disk item of (mSource_folder as alias)
    end tell

    set item_count to (get count of items in item_list)

    repeat with i from 1 to item_count
        set the_properties to ""

        set the_item to item i of the item_list
        set fileName to the_item
        set the_item to ((mSource_folder &amp; the_item) as string) as alias

        tell application "System Events"
            set file_info to get info for the_item
        end tell

        if visible of file_info is true then -- check for the file extension here as well
            if folder of file_info is true then
                my createList(the_item)
            else
                set targetFileFound to isTargetFile(fileName, kTargetFileExtensions) of me

                if (targetFileFound) then
                    set end of pValidFileList to the_item
                end if
            end if
        end if

    end repeat
end createList

on isTargetFile(theFilename, theTargetExtensions) -- (string, array) as boolean
    set AppleScript's text item delimiters to "."
    set fileNameList to every text item of theFilename
    set AppleScript's text item delimiters to ""

    try
        set theFileExtension to item 2 of fileNameList as string
    on error
        return false
    end try

    set firstTargetExtension to 1
    set lastTargetExtension to (count theTargetExtensions)
    repeat with thisTargetExtension from firstTargetExtension to lastTargetExtension
        set targetExtension to item thisTargetExtension of theTargetExtensions
        if theFileExtension is targetExtension then
            return true
        end if
    end repeat

    return false
end isTargetFile
</snippet></ROW><ROW><id>7066558</id><snippet>/opt/python27/python</snippet></ROW><ROW><id>7066558</id><snippet>python</snippet></ROW><ROW><id>7066558</id><snippet>/opt/python27/</snippet></ROW><ROW><id>7066558</id><snippet>PATH</snippet></ROW><ROW><id>7066558</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>7066558</id><snippet>python</snippet></ROW><ROW><id>7066558</id><snippet>which python</snippet></ROW><ROW><id>7066610</id><snippet>mactypes.File</snippet></ROW><ROW><id>7066610</id><snippet>s(in_="/Users/az/foo.jpg", as_=k.JPEG,
  with_options={k.class_:k.JPEG_save_options, k.quality:12},
  copying=True, appending=k.no_extension)
</snippet></ROW><ROW><id>7066856</id><snippet>AppleScript</snippet></ROW><ROW><id>7066856</id><snippet>appscript</snippet></ROW><ROW><id>7066856</id><snippet>ASTranslate</snippet></ROW><ROW><id>7066856</id><snippet>appscript</snippet></ROW><ROW><id>7067274</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>7067274</id><snippet>process.stdout</snippet></ROW><ROW><id>7067274</id><snippet>process.stderr</snippet></ROW><ROW><id>7067274</id><snippet>subprocess.call(args)</snippet></ROW><ROW><id>7067516</id><snippet>parser.parse_args</snippet></ROW><ROW><id>7067516</id><snippet>parser</snippet></ROW><ROW><id>7067516</id><snippet>args = parser.parse_args()
</snippet></ROW><ROW><id>7067516</id><snippet>args.main_args</snippet></ROW><ROW><id>7067516</id><snippet>-main_arg</snippet></ROW><ROW><id>7067516</id><snippet>program -main_arg run required_sub_arg -arg_a
</snippet></ROW><ROW><id>7067516</id><snippet>main_arg</snippet></ROW><ROW><id>7067516</id><snippet>parser</snippet></ROW><ROW><id>7067516</id><snippet>main_arg</snippet></ROW><ROW><id>7067516</id><snippet>program run required_sub_arg -main_arg -arg_a
</snippet></ROW><ROW><id>7067516</id><snippet>a</snippet></ROW><ROW><id>7067516</id><snippet>main_arg</snippet></ROW><ROW><id>7067516</id><snippet>a</snippet></ROW><ROW><id>7067516</id><snippet>a=parser.add_subparser('run', parents=[parser])
</snippet></ROW><ROW><id>7067564</id><snippet>~ $ python3.2
&gt;&gt;&gt; variable = str(21)
&gt;&gt;&gt; variable
'21'
</snippet></ROW><ROW><id>7067564</id><snippet>str =</snippet></ROW><ROW><id>7067564</id><snippet>str</snippet></ROW><ROW><id>7067856</id><snippet>activate</snippet></ROW><ROW><id>7067856</id><snippet>sa = OSAX()
sa.activate()
print sa.display_dialog(...)
</snippet></ROW><ROW><id>7067868</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; get_group = lambda x: x % 4
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for value in range(10):
...     d[get_group(value)].append(value)
... 
&gt;&gt;&gt; dict(d)
{0: [0, 4, 8], 1: [1, 5, 9], 2: [2, 6], 3: [3, 7]}
</snippet></ROW><ROW><id>7067937</id><snippet>from model import ValueTest</snippet></ROW><ROW><id>7067937</id><snippet>from foo import *</snippet></ROW><ROW><id>7067937</id><snippet>foo</snippet></ROW><ROW><id>7067937</id><snippet>import something</snippet></ROW><ROW><id>7067937</id><snippet>os</snippet></ROW><ROW><id>7067937</id><snippet>sys</snippet></ROW><ROW><id>7067937</id><snippet>__all__</snippet></ROW><ROW><id>7067937</id><snippet>_</snippet></ROW><ROW><id>7068371</id><snippet>connection</snippet></ROW><ROW><id>7068371</id><snippet>django.db.models.fields.subclassing</snippet></ROW><ROW><id>7068371</id><snippet>kwargs</snippet></ROW><ROW><id>7068371</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>7068371</id><snippet>        return super(CharField, self).get_db_prep_value(value, connection=connection, prepared=prepared)
</snippet></ROW><ROW><id>7068371</id><snippet>kwargs</snippet></ROW><ROW><id>7068470</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7068470</id><snippet>[you@home]$ export PYTHONPATH="~/lib64/python"
</snippet></ROW><ROW><id>7068470</id><snippet>import sys, os
sys.path.append(os.path.expanduser("~/lib64/python")) 
</snippet></ROW><ROW><id>7068521</id><snippet>__all__</snippet></ROW><ROW><id>7068521</id><snippet>class fake_module(object):
    def __init__(self, name, *args):
        self.name = name
        self.__all__ = []
        all_objects = globals()
        for name in args:
            self.__dict__[name] = all_objects[name]
            self.__all__.append(name)
    def register(self):
        sys.modules["%s.%s" % (__name__, self.name)] = self

    fake_module('api', 'class1', 'class2', 'func3', 'exception4').register()
</snippet></ROW><ROW><id>7068521</id><snippet>from mymodule import *</snippet></ROW><ROW><id>7068521</id><snippet>from mymodule.api import *</snippet></ROW><ROW><id>7068521</id><snippet>from ... import *</snippet></ROW><ROW><id>7068683</id><snippet>table1[ii][jj]</snippet></ROW><ROW><id>7068683</id><snippet>ii</snippet></ROW><ROW><id>7068683</id><snippet>jj</snippet></ROW><ROW><id>7068683</id><snippet>jj, ii</snippet></ROW><ROW><id>7068712</id><snippet>self.allShapes = self.allCircles + self.allSquares + self.allTriangles
</snippet></ROW><ROW><id>7068712</id><snippet>for item in self.allCircles + self.allSquares + self.allTriangles:
</snippet></ROW><ROW><id>7068866</id><snippet>filename</snippet></ROW><ROW><id>7068866</id><snippet>from django.core.files import File

# assuming your updated model looks like:
# class Photo(models.Model):
#     filename = models.CharField(max_length=240)
#     image = models.ImageField(max_length=240)

photos = Photo.objects.all()
for p in photos:
    f = open(p.filename)
    myimage = File(f)
    p.image.save(image_name, myimage) # name, content
</snippet></ROW><ROW><id>7068866</id><snippet>filename</snippet></ROW><ROW><id>7068866</id><snippet>FileField</snippet></ROW><ROW><id>7068866</id><snippet>ImageField</snippet></ROW><ROW><id>7069581</id><snippet>split</snippet></ROW><ROW><id>7069581</id><snippet>contents = open("values.txt", "r").read().split()
</snippet></ROW><ROW><id>7069581</id><snippet>" ".join(contents)
</snippet></ROW><ROW><id>7069593</id><snippet>sys.path</snippet></ROW><ROW><id>7069593</id><snippet> #!/usr/bin/python
 import sys
 print sys.path
</snippet></ROW><ROW><id>7069593</id><snippet>'"/home/userperson/public_html/lib64/python2.4/site-packages"'</snippet></ROW><ROW><id>7069593</id><snippet>putenv($setting)</snippet></ROW><ROW><id>7069593</id><snippet>putenv('PYTHONPATH=/home/userperson/public_html/lib64/python2.4/site-packages');
</snippet></ROW><ROW><id>7069593</id><snippet>putenv("PYTHONPATH=$pythonpath")</snippet></ROW><ROW><id>7069593</id><snippet>putenv("PYTHONPATH=" . implode(':', $pythonpath))</snippet></ROW><ROW><id>7069593</id><snippet>file_exists</snippet></ROW><ROW><id>7069593</id><snippet>safe_mode</snippet></ROW><ROW><id>7069593</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7069593</id><snippet>safe_mode_allowed_env_vars</snippet></ROW><ROW><id>7069924</id><snippet>select cid,
max(case when pid = 1 then 'Y' else '' end) as AAA,
max(case when pid = 2 then 'Y' else '' end) as ABC,
max(case when pid = 3 then 'Y' else '' end) as BAC,
max(case when pid = 4 then 'Y' else '' end) as CAB,
max(case when pid = 5 then 'Y' else '' end) as CBA
from companies
group by cid
</snippet></ROW><ROW><id>7069945</id><snippet>gamescache = list(Game.objects.all())
</snippet></ROW><ROW><id>7069945</id><snippet>for g in Game.objects.all():
    ...
</snippet></ROW><ROW><id>7070107</id><snippet>import gdata.docs.service

# Create a client class which will make HTTP requests with Google Docs server.
client = gdata.docs.service.DocsService()
# Authenticate using your Google Docs email address and password.
client.ClientLogin('jo@gmail.com', 'password')

# Query the server for an Atom feed containing a list of your documents.
documents_feed = client.GetDocumentListFeed()
# Loop through the feed and extract each document entry.
for document_entry in documents_feed.entry:
  # Display the title of the document on the command line.
  print document_entry.title.text
</snippet></ROW><ROW><id>7070146</id><snippet>ncalls
    for the number of calls,
tottime
    for the total time spent in the given function (and excluding time made in calls to sub-functions),
percall
    is the quotient of tottime divided by ncalls
cumtime
    is the total time spent in this and all subfunctions (from invocation till exit). This figure is accurate even for recursive functions.
percall
    is the quotient of cumtime divided by primitive calls
</snippet></ROW><ROW><id>7070340</id><snippet>givenURL = 'http://site.com/?year=2011&amp;month=10&amp;day=5&amp;hour=11'
pattern = "http://site.com/?year=%Y&amp;month=%m&amp;day=%d"
theDate = datetime.strptime(givenURL.split('&amp;hour=')[0], pattern)
</snippet></ROW><ROW><id>7070340</id><snippet>givenURL = 'http://site.com/?year=2011&amp;month=10&amp;day=5&amp;hour=11'
datePattern = "http://site.com/?year=%Y&amp;month=%m&amp;day=%d"
timePattern = "&amp;time=%I:%M%p"

theDateTime = datetime.strptime(givenURL.split('&amp;hour=')[0] + '&amp;time=' givenTime, datePattern + timePattern)
</snippet></ROW><ROW><id>7070341</id><snippet>list</snippet></ROW><ROW><id>7070341</id><snippet>list = ['aema', 'airplane', 'amend']</snippet></ROW><ROW><id>7070341</id><snippet>list</snippet></ROW><ROW><id>7070341</id><snippet>keys</snippet></ROW><ROW><id>7070341</id><snippet>keylist</snippet></ROW><ROW><id>7070341</id><snippet>list = ['aema', 'airplane', 'amend']
</snippet></ROW><ROW><id>7070341</id><snippet>keys = ['aema', 'airplane', 'amend']
</snippet></ROW><ROW><id>7070341</id><snippet>for x in list:
</snippet></ROW><ROW><id>7070341</id><snippet>for x in keys:
</snippet></ROW><ROW><id>7070401</id><snippet>unique=True</snippet></ROW><ROW><id>7070401</id><snippet>&gt;&gt;&gt; class Nested(EmbeddedDocument):
...     a = StringField(unique=True)
...     b = StringField()
... 
&gt;&gt;&gt; class Outer(Document):
...     inner = EmbeddedDocumentField(Nested)
...     c = StringField()
... 
&gt;&gt;&gt; o = Outer()
&gt;&gt;&gt; o.c = 'abc'
&gt;&gt;&gt; o.inner = Nested(a='a', b='b')
&gt;&gt;&gt; o.save()
&gt;&gt;&gt; o2 = Outer()
&gt;&gt;&gt; o2.c = 'abc'
&gt;&gt;&gt; o2.inner = Nested(a='a', b='B')
&gt;&gt;&gt; o2.save()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "mongoengine/document.py", line 176, in save
    raise OperationError(message % unicode(err))
mongoengine.queryset.OperationError: Tried to save duplicate unique keys (E11000 duplicate key error index: test.outer.$inner.a_1  dup key: { : "a" })
</snippet></ROW><ROW><id>7070571</id><snippet>import nose

argv = ['--with-xunit']
nose.main(argv=argv)
</snippet></ROW><ROW><id>7071084</id><snippet>configContainer.instances</snippet></ROW><ROW><id>7071084</id><snippet>configObject</snippet></ROW><ROW><id>7071084</id><snippet>configContainer.instances</snippet></ROW><ROW><id>7071084</id><snippet>instances</snippet></ROW><ROW><id>7071084</id><snippet>configContainer</snippet></ROW><ROW><id>7071084</id><snippet>configObjects</snippet></ROW><ROW><id>7071084</id><snippet>class configContainer():
    def __init__(self):
        self.instances = {}
...
</snippet></ROW><ROW><id>7071084</id><snippet>&gt;&gt;&gt; cc1 = configContainer()
&gt;&gt;&gt; cc2 = configContainer()
&gt;&gt;&gt; cc1.instances["line10"] = "foo"
&gt;&gt;&gt; configContainer.instances
{'line10': 'foo'}
&gt;&gt;&gt; cc2.instances["line10"] = "bar"
&gt;&gt;&gt; configContainer.instances
{'line10': 'bar'}
&gt;&gt;&gt; cc1.instances
{'line10': 'bar'}
</snippet></ROW><ROW><id>7071186</id><snippet>DJANGO_SETTINGS_MODULE = APPNAME.settings</snippet></ROW><ROW><id>7071186</id><snippet>PROJECT.settings</snippet></ROW><ROW><id>7071186</id><snippet>setup_environ</snippet></ROW><ROW><id>7071186</id><snippet>from django.core.management import setup_environ
from yourproject import settings

setup_environ(settings)

from yourproject.app.models import YourModel
</snippet></ROW><ROW><id>7071303</id><snippet>*args</snippet></ROW><ROW><id>7071303</id><snippet>&gt;&gt;&gt; a = range(20)
&gt;&gt;&gt; b = (5, 12)
&gt;&gt;&gt; a[slice(*b)]
[5, 6, 7, 8, 9, 10, 11]
</snippet></ROW><ROW><id>7071303</id><snippet>b</snippet></ROW><ROW><id>7071303</id><snippet>slice()</snippet></ROW><ROW><id>7071425</id><snippet># setup.py
# ...
ext_modules = [Extension("queue", ["queue.pyx", "libcalg/queue.c"])]
# ...
</snippet></ROW><ROW><id>7071425</id><snippet># myext.pyx
def square(x):
    return x * x
</snippet></ROW><ROW><id>7071425</id><snippet># test.py
from myext import square
print "%d squared is %d"%(4, square(4))
</snippet></ROW><ROW><id>7071425</id><snippet># setup.py
from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

ext_modules = [Extension("myext", ["myext.pyx"])]

setup(
  name = 'Hello world app',
  cmdclass = {'build_ext': build_ext},
  ext_modules = ext_modules
)
</snippet></ROW><ROW><id>7071425</id><snippet>cython_test$ /usr/bin/python setup.py build_ext --inplace 
running build_ext
cythoning myext.pyx to myext.c
building 'myext' extension
creating build
creating build/temp.macosx-10.7-intel-2.7
llvm-gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch x86_64 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c myext.c -o build/temp.macosx-10.7-intel-2.7/myext.o
llvm-gcc-4.2 -Wl,-F. -bundle -undefined dynamic_lookup -Wl,-F. -arch i386 -arch x86_64 build/temp.macosx-10.7-intel-2.7/myext.o -o /Users/steder/SO/cython_test/myext.so

cython_test$ python test.py
4 squared is 16:
</snippet></ROW><ROW><id>7071425</id><snippet>00000000000011d0 (__DATA,__data) non-external ___pyx_k__square
00000000000011e0 (__DATA,__data) non-external ___pyx_mdef_5myext_square
0000000000001218 (__DATA,__bss) non-external ___pyx_n_s__square
0000000000000c80 (__TEXT,__text) non-external ___pyx_pf_5myext_square
</snippet></ROW><ROW><id>7071433</id><snippet>reobj = re.compile('&lt;a href="(.*?)"&gt;(.*?)&lt;/a&gt;', re.IGNORECASE)
result = reobj.findall(body)


for link in result:
        print link[0] + link[1]
</snippet></ROW><ROW><id>7071618</id><snippet>from __future__ import with_statement
from fabric.api import *
from fabric.contrib.console import confirm
import re
import sys

def test():
    run('ls')
</snippet></ROW><ROW><id>7072643</id><snippet>127.0.0.1</snippet></ROW><ROW><id>7072808</id><snippet>print u' '.join(soup.findAll(text=True))
</snippet></ROW><ROW><id>7073050</id><snippet># this is a staticmethod or module level function
def argrepr(name, *args):
    return '{}({})'.format(name, ', '.join(repr(arg) for arg in args))

def __repr__(self): 
    return argrepr(self.__name__, self.arg1, self.arg2, self.arg3)
</snippet></ROW><ROW><id>7073050</id><snippet># this is a staticmethod or module level function
def argrepr(*args):
    return '(' + ', '.join(repr(arg) for arg in args) + ')'

def __repr__(self):
    return repr(self.__name__) + argrepr(self.arg1, self.arg2, self.arg3)
</snippet></ROW><ROW><id>7073139</id><snippet>life = 200

def example(x):
    return x - 75

life = example(life)
</snippet></ROW><ROW><id>7073293</id><snippet>import sys
try:
    # your code
except KeyboardInterrupt:
    sys.exit(0) # or 1, or whatever
</snippet></ROW><ROW><id>7073293</id><snippet>signal</snippet></ROW><ROW><id>7073546</id><snippet>listenTCP</snippet></ROW><ROW><id>7073546</id><snippet>IListeningPort</snippet></ROW><ROW><id>7073546</id><snippet>getHost()</snippet></ROW><ROW><id>7073546</id><snippet>port</snippet></ROW><ROW><id>7073546</id><snippet>&gt;&gt;&gt; from twisted.internet import reactor
&gt;&gt;&gt; from twisted.internet.protocol import Factory
&gt;&gt;&gt; port = reactor.listenTCP(0, Factory())
&gt;&gt;&gt; port.getHost().port
55791
</snippet></ROW><ROW><id>7073546</id><snippet>TCPServer</snippet></ROW><ROW><id>7073546</id><snippet>listenTCP</snippet></ROW><ROW><id>7073546</id><snippet>privilegedStartService</snippet></ROW><ROW><id>7073546</id><snippet>IListeningPort</snippet></ROW><ROW><id>7073546</id><snippet>Service</snippet></ROW><ROW><id>7073546</id><snippet>TCPServer</snippet></ROW><ROW><id>7073546</id><snippet>from twisted.internet import reactor
from twisted.application.service import Service

class PortReporter(Service, object):
    def __init__(self, factory, reportPort):
        self.factory = factory
        self.reportPort = reportPort

    def privilegedStartService(self):
        self.listeningPort = reactor.listenTCP(0, self.factory)
        self.reportPort(self.listeningPort.getHost().port)
        return super(PortReporter, self).privilegedStartService()

    def stopService(self):
        self.listeningPort.stopListening()
        return super(PortReporter, self).stopService()
</snippet></ROW><ROW><id>7073546</id><snippet>from twisted.internet.protocol import Factory
from twisted.application.service import Application
application = Application("test")
def showPortNumber(n):
    print("The port number is: %d" % (n,))
PortReporter(Factory(), showPortNumber).setServiceParent(application)
</snippet></ROW><ROW><id>7073548</id><snippet>/usr/include</snippet></ROW><ROW><id>7073548</id><snippet>/usr/local/incude</snippet></ROW><ROW><id>7073548</id><snippet>./configure --help</snippet></ROW><ROW><id>7073548</id><snippet>/usr/include</snippet></ROW><ROW><id>7073548</id><snippet>/usr/local/include</snippet></ROW><ROW><id>7073757</id><snippet>from itertools import izip
prev_min, prev_max = float('inf'), float('-inf')

for new_min, new_max in izip(csv_parse(2010)['min'], csv_parse(2010)['max']):
    if (new_min &gt; prev_min) and (new_max &lt; prev_max):
        #do something
    prev_min, prev_max = new_min, new_max
</snippet></ROW><ROW><id>7073757</id><snippet>prev_min</snippet></ROW><ROW><id>7073757</id><snippet>prev_max</snippet></ROW><ROW><id>7073757</id><snippet>izip</snippet></ROW><ROW><id>7073757</id><snippet>csv_parse</snippet></ROW><ROW><id>7073885</id><snippet>QAction</snippet></ROW><ROW><id>7074066</id><snippet>keywords = itertools.product(alphabets, repeat = 3)
</snippet></ROW><ROW><id>7074066</id><snippet>itertools.product</snippet></ROW><ROW><id>7074066</id><snippet>keywords = [''.join(i) for i in itertools.product(alphabets, repeat = 3)]
</snippet></ROW><ROW><id>7074066</id><snippet>alphabets</snippet></ROW><ROW><id>7074066</id><snippet>from itertools import product
from string import ascii_lowercase
keywords = [''.join(i) for i in product(ascii_lowercase, repeat = 3)]
</snippet></ROW><ROW><id>7074435</id><snippet>from Tkinter import *

OPTIONS = (
    "egg",
    "go",
    "spam"
)

controlsMap = {}

root = Tk()

def callbackFunc(name, index, mode):
    value = root.getvar(name) #getvar: return the value of Tcl variable NAME
    widget = controlsMap[name]
    if value == 'go':
        widget.config(bg='green',fg='black',
                 activebackground='green',
                 activeforeground='black')
    else:
        widget.config(bg='SystemButtonFace',fg='SystemButtonText',
                 activebackground='SystemButtonFace',
                 activeforeground='SystemButtonText')


var1 = StringVar(root, name='var1') #give it a master and a name
var1.set(OPTIONS[0])
om1 = OptionMenu(root, var1, *OPTIONS)
om1.config(width=5)
om1.grid(row=0, column=0)
controlsMap['var1'] = om1
var1.trace_variable('w', callbackFunc)

var2 = StringVar(root, name='var2') #
var2.set(OPTIONS[0])
om2 = OptionMenu(root, var2, *OPTIONS)
om2.config(width=5)
om2.grid(row=0, column=1)
controlsMap['var2'] = om2
var2.trace_variable('w', callbackFunc)

var3 = StringVar(root, name='var3') #
var3.set(OPTIONS[0])
om3 = OptionMenu(root, var3, *OPTIONS)
om3.config(width=5)
om3.grid(row=0, column=2)
controlsMap['var3'] = om3
var3.trace_variable('w', callbackFunc)


root.mainloop()
</snippet></ROW><ROW><id>7074792</id><snippet>decorated      ::=  decorators (classdef | funcdef)
decorators     ::=  decorator+
decorator      ::=  "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
funcdef        ::=  "def" funcname "(" [parameter_list] ")" ":" suite
</snippet></ROW><ROW><id>7074792</id><snippet>def &lt;funcname&gt;</snippet></ROW><ROW><id>7074792</id><snippet>func = decorate_func(func)
</snippet></ROW><ROW><id>7074891</id><snippet>import compress.utils
utils.compress.function_to_override = overriding_function
</snippet></ROW><ROW><id>7074891</id><snippet>utils</snippet></ROW><ROW><id>7074891</id><snippet># fakeutils.py
from compress.utils import *

# make the following line match exactly the overridden function
def function_to_override(var1, etc1, etc2):
    # your version of the function
</snippet></ROW><ROW><id>7074891</id><snippet>import fakeutils as utils
</snippet></ROW><ROW><id>7075121</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>7075121</id><snippet>with</snippet></ROW><ROW><id>7075121</id><snippet>with</snippet></ROW><ROW><id>7075121</id><snippet>from __future__ import division
print 8/7  # prints 1.1428571428571428
print 8//7 # prints 1
</snippet></ROW><ROW><id>7075121</id><snippet>__future__</snippet></ROW><ROW><id>7075121</id><snippet>print</snippet></ROW><ROW><id>7075121</id><snippet>1</snippet></ROW><ROW><id>7075121</id><snippet>/</snippet></ROW><ROW><id>7075121</id><snippet>__div__()</snippet></ROW><ROW><id>7075121</id><snippet>__truediv__()</snippet></ROW><ROW><id>7075121</id><snippet>//</snippet></ROW><ROW><id>7075121</id><snippet>__floordiv__()</snippet></ROW><ROW><id>7075121</id><snippet>print</snippet></ROW><ROW><id>7075121</id><snippet>print</snippet></ROW><ROW><id>7075121</id><snippet>&gt;&gt;&gt; print

&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print
&lt;built-in function print&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7075220</id><snippet>Help on class int in module __builtin__:

class int(object)
 |  int(x[, base]) -&gt; integer
 |
 |  Convert a string or number to an integer, if possible.  A floating point
 |  argument will be truncated towards zero (this does not include a string
 |  representation of a floating point number!)  When converting a string, use
 |  the optional base.  It is an error to supply a base when converting a
 |  non-string.  If base is zero, the proper base is guessed based on the
 |  string content.  If the argument is outside the integer range a
 |  long object will be returned instead.
</snippet></ROW><ROW><id>7075220</id><snippet>0</snippet></ROW><ROW><id>7075220</id><snippet>9</snippet></ROW><ROW><id>7075220</id><snippet>a</snippet></ROW><ROW><id>7075220</id><snippet>v</snippet></ROW><ROW><id>7075295</id><snippet>bar</snippet></ROW><ROW><id>7075295</id><snippet>class Foo(object):
    def bar(self, name):
        return name
    def bar2(self, attr, value):
        print attr, value
    def __getattr__(self, attr):
        return self.bar(attr)
    def __setattr__(self, attr, value):
        self.bar2(attr, value)
foo = Foo()
print foo.name
foo.name = 'not name'
</snippet></ROW><ROW><id>7075411</id><snippet>   while(not myQueue.empty()): 
    p=Popen(myQueue.get(),shell=True, stdin=PIPE,preexec_fn=os.setsid)
</snippet></ROW><ROW><id>7075411</id><snippet>    os.killpg(os.getpgid(p.pid), signal.SIGKILL)
</snippet></ROW><ROW><id>7075416</id><snippet>str(e)</snippet></ROW><ROW><id>7075416</id><snippet>Exception</snippet></ROW><ROW><id>7075416</id><snippet>__str__()</snippet></ROW><ROW><id>7075416</id><snippet>str(e, 'utf-8')</snippet></ROW><ROW><id>7075416</id><snippet>str()</snippet></ROW><ROW><id>7075416</id><snippet>print()</snippet></ROW><ROW><id>7075561</id><snippet>def __init__(self, display_name= "", fields= [], values= [], operations= [])
</snippet></ROW><ROW><id>7075561</id><snippet>None</snippet></ROW><ROW><id>7075561</id><snippet>if fields is None:
    fields = []
self.fields = fields
</snippet></ROW><ROW><id>7075561</id><snippet>self.fields = list(fields)
</snippet></ROW><ROW><id>7075561</id><snippet>[new_filter.fields.append(value) for value in filters['fields']]
</snippet></ROW><ROW><id>7075561</id><snippet>new_filter.fields += filters['fields']
</snippet></ROW><ROW><id>7075807</id><snippet>def difft(start,end):
    a,b,c,d = start.hour, start.minute, start.second, start.microsecond
    w,x,y,z = end.hour, end.minute, end.second, end.microsecond
    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000
    return delt + 1440 if delt&lt;0 else delt
</snippet></ROW><ROW><id>7075807</id><snippet>def difft(start,end):
    a,b,c,d = start.hour, start.minute, start.second, start.microsecond
    w,x,y,z = end.hour, end.minute, end.second, end.microsecond
    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000

    D = '%sh %smn %ss %sms - %sh %smn %ss %sms == '
    ft = '%s + 1440 = %s  (1440 = 24x60mn)'
    return D % (w,x,y,z,a,b,c,d) +( ft % (delt, delt+1440) if delt&lt;0 else str(delt))


print difft(time(11,30,0),time(12,35,0))
print difft(time(11,30,0),time(10,35,0))
print
print difft(time(20,40,0),time(22,41,0))
print difft(time(20,40,0),time(18,41,0))
</snippet></ROW><ROW><id>7075807</id><snippet>12h 35mn 0s 0ms - 11h 30mn 0s 0ms == 65.0
10h 35mn 0s 0ms - 11h 30mn 0s 0ms == -55.0 + 1440 = 1385.0  (1440 = 24x60mn)

22h 41mn 0s 0ms - 20h 40mn 0s 0ms == 121.0
18h 41mn 0s 0ms - 20h 40mn 0s 0ms == -119.0 + 1440 = 1321.0  (1440 = 24x60mn)
</snippet></ROW><ROW><id>7075807</id><snippet>def difft2(start,end):
    a,b,c,d = start.hour, start.minute, start.second, start.microsecond
    w,x,y,z = end.hour, end.minute, end.second, end.microsecond
    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000.
    if delt &lt; 0:
        delt += 1440

    hh,rem = divmod(delt,60)
    hh = int(hh)
    mm = int(rem)
    rem = (rem - mm)*60
    ss = int(rem)
    ms = (rem - ss)*1000000
    ms = int(ms)

    SS = '%sh %smn %ss %sms - %sh %smn %ss %sms == %sh %smn %ss %sms'
    return SS % (w,x,y,z,a,b,c,d,hh,mm,ss,ms)



print difft2(time(11,30,0),time(12,35,45,478129))
print difft2(time(11,30,45,11),time(10,35,45,12))
print
print difft2(time(20,40,0),time(22,41,0))
print difft2(time(20,40,0),time(18,41,0))
</snippet></ROW><ROW><id>7075807</id><snippet>12h 35mn 45s 478129ms - 11h 30mn 0s 0ms == 1h 5mn 45s 478128ms
10h 35mn 45s 12ms - 11h 30mn 45s 11ms == 23h 5mn 0s 1ms

22h 41mn 0s 0ms - 20h 40mn 0s 0ms == 2h 1mn 0s 0ms
18h 41mn 0s 0ms - 20h 40mn 0s 0ms == 22h 1mn 0s 0ms
</snippet></ROW><ROW><id>7076168</id><snippet>sorted</snippet></ROW><ROW><id>7076168</id><snippet>key</snippet></ROW><ROW><id>7076168</id><snippet>In [1]: import operator

In [2]: d={'d':1,'b':2,'c':2,'a':3}

In [3]: sorted(d.items(),key=operator.itemgetter(1,0))
Out[3]: [('d', 1), ('b', 2), ('c', 2), ('a', 3)]
</snippet></ROW><ROW><id>7076168</id><snippet>operator.itemgetter(1,0)</snippet></ROW><ROW><id>7076168</id><snippet>f=operator.itemgetter(1,0)</snippet></ROW><ROW><id>7076168</id><snippet>f(x)</snippet></ROW><ROW><id>7076168</id><snippet>(x[1],x[0])</snippet></ROW><ROW><id>7076281</id><snippet>IsWindowVisible</snippet></ROW><ROW><id>7076446</id><snippet>def generateTuples(N, M):
  done = 0
  counters = {}
  for C in range(3, N + 3):
    for B in range(2, C):
      for A in range(1, B):
        if (counters.get('A%i' % A, 0) &lt; M and
            counters.get('B%i' % B, 0) &lt; M and
            counters.get('C%i' % C, 0) &lt; M):
          yield (A, B, C)
          counters['A%i' % A] = counters.get('A%i' % A, 0) + 1
          counters['B%i' % B] = counters.get('B%i' % B, 0) + 1
          counters['C%i' % C] = counters.get('C%i' % C, 0) + 1
          done += 1
          if done &gt;= N:
            return

for (A, B, C) in generateTuples(8, 3):
  print (A, B, C)
</snippet></ROW><ROW><id>7076523</id><snippet>
login_data = urllib.parse.urlencode({'login' : username, 'password' : password})
opener.open(BASE_URL+"/bg/login", login_data)
</snippet></ROW><ROW><id>7076523</id><snippet>urllib.parse.urlencode</snippet></ROW><ROW><id>7076624</id><snippet>import collections
import numbers
def pformat(thing, formatfunc):
    if isinstance(thing, dict):
        return type(thing)((key, pformat(value)) for key, value in thing.iteritems())
    if isinstance(thing, collections.Container):
        return type(thing)(pformat(value) for value in thing)
    if isinstance(thing, numbers.Number):
        return formatfunc(thing)
    return thing

def formatfloat(thing):
    return "%.3g" % float(thing)

x={'a':[1.05600000001,2.34581736481,[8.1111111112,9.999990111111]],
'b':[3.05600000001,4.34581736481,[5.1111111112,6.999990111111]]}

print pformat(x, formatfloat)
</snippet></ROW><ROW><id>7076624</id><snippet>try:
    return formatfunc(thing)
except:
    return thing
</snippet></ROW><ROW><id>7077123</id><snippet>lambda x: x and x.isdigit() and int(x) or None
</snippet></ROW><ROW><id>7077123</id><snippet>if</snippet></ROW><ROW><id>7077123</id><snippet>lambda</snippet></ROW><ROW><id>7077123</id><snippet>def f(x):
  return x and x.isdigit() and int(x) or None
</snippet></ROW><ROW><id>7077123</id><snippet>lambda x: int(x) if x and x.isdigit() else None
</snippet></ROW><ROW><id>7077123</id><snippet>int('0')</snippet></ROW><ROW><id>7077123</id><snippet>False</snippet></ROW><ROW><id>7077123</id><snippet>None</snippet></ROW><ROW><id>7077123</id><snippet>0</snippet></ROW><ROW><id>7077194</id><snippet>from subprocess import Popen, PIPE
from datetime import datetime

# yes, this is me being lazy and not wanting to write a format string.
date = datetime.today().isoformat().split('T')[0]

mysql = "mysqldump -u *username* -p*password* *database* &gt; /usr/local/src/djcode/c2duo_mms/backup-{}.sql".format(date)
gzip = "gzip -c /usr/local/src/djcode/c2duo_mms/backup.sql &gt; /usr/local/src/djcode/c2duo_mms/backup-{}.gz".format(date)

Popen(mysql, stdin=PIPE, stderr=PIPE, stdout=PIPE, shell = True)
Popen(gzip, stdin=PIPE, stderr=PIPE, stdout=PIPE, shell = True)
</snippet></ROW><ROW><id>7077194</id><snippet>from datetime import datetime
import os

date = datetime.today().isoformat().split('T')[0]

mysql = "mysqldump -u *username* -p*password* *database* &gt; /usr/local/src/djcode/c2duo_mms/backup-%s.sql" % date
gzip = "gzip -c /usr/local/src/djcode/c2duo_mms/backup.sql &gt; /usr/local/src/djcode/c2duo_mms/backup-%s.gz" % date

os.popen3(mysql)
os.popen3(gzip)
</snippet></ROW><ROW><id>7077295</id><snippet>update_idletasks</snippet></ROW><ROW><id>7077425</id><snippet>\r\n</snippet></ROW><ROW><id>7077425</id><snippet>\n</snippet></ROW><ROW><id>7077425</id><snippet>f = open("myfile.txt","wb")
</snippet></ROW><ROW><id>7077425</id><snippet>\r\n</snippet></ROW><ROW><id>7077425</id><snippet>\n</snippet></ROW><ROW><id>7077425</id><snippet>f = open("myfile.txt", "rb")
</snippet></ROW><ROW><id>7077458</id><snippet>\\\\</snippet></ROW><ROW><id>7077458</id><snippet>\\</snippet></ROW><ROW><id>7077458</id><snippet>\</snippet></ROW><ROW><id>7078283</id><snippet>multiprocessing.connection.Listener/Client</snippet></ROW><ROW><id>7078283</id><snippet>multiprocessing</snippet></ROW><ROW><id>7078283</id><snippet>multiprocessing</snippet></ROW><ROW><id>7078283</id><snippet>import collections
import multiprocessing
import random
import select
import socket
import time


class MessagePassingProcess(multiprocessing.Process):
    def __init__(self, id_, processes):
        self.id = id_
        self.processes = processes
        self.queue = collections.deque()
        super(MessagePassingProcess, self).__init__()

    def run(self):
        print "Running"
        inputs = []
        outputs = []
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        address = self.processes[self.id]["address"]
        print "Process %s binding to %s"%(self.id, address)
        server.bind(address)
        server.listen(5)
        inputs.append(server)
        process = self.processes[self.id]
        process["listening"] = True
        self.processes[self.id] = process
        print "Process %s now listening!(%s)"%(self.id, process)
        while inputs:
            readable, writable, exceptional = select.select(inputs,
                                                           outputs,
                                                           inputs,
                                                           0.1)
            for sock in readable:
                print "Process %s has a readable scoket: %s"%(self.id,
                                                              sock)
                if sock is server:
                    print "Process %s has a readable server scoket: %s"%(self.id,
                                                              sock)
                    conn, addr = sock.accept()
                    conn.setblocking(0)
                    inputs.append(conn)
                else:
                    data = sock.recv(1024)
                    if data:
                        self.queue.append(data)
                        print "non server readable socket with data"
                    else:
                        inputs.remove(sock)
                        sock.close()
                        print "non server readable socket with no data"

            for sock in exceptional:
                print "exception occured on socket %s"%(sock)
                inputs.remove(sock)
                sock.close()

            while len(self.queue) &gt;= 1:
                print "Received:", self.queue.pop()

            # send a message to a random process:
            random_id = random.choice(list(self.processes.keys()))
            print "%s Attempting to send message to %s"%(self.id, random_id)
            random_process = self.processes[random_id]
            print "random_process:", random_process
            if random_process["listening"]:
                random_address = random_process["address"]
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                try:
                    s.connect(random_address)
                except socket.error:
                    print "%s failed to send to %s"%(self.id, random_id)
                else:
                    s.send("Hello World!")                    
                finally:
                    s.close()

            time.sleep(1)

if __name__=="__main__":
    print "hostname:", socket.getfqdn()
    print dir(multiprocessing)
    manager = multiprocessing.Manager()
    processes = manager.dict()
    joinable = []
    for n in xrange(multiprocessing.cpu_count()):
        mpp = MessagePassingProcess(n, processes)
        processes[n] = {"id":n,
                        "address":("127.0.0.1",7000+n),
                        "listening":False,
                        }
        print "processes[%s] = %s"%(n, processes[n])
        mpp.start()
        joinable.append(mpp)
    for process in joinable:
        process.join()
</snippet></ROW><ROW><id>7078283</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>7078283</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>7078286</id><snippet>_impl</snippet></ROW><ROW><id>7078286</id><snippet>epoll</snippet></ROW><ROW><id>7078286</id><snippet>select</snippet></ROW><ROW><id>7078286</id><snippet>self._impl.register(fd, events | self.ERROR)</snippet></ROW><ROW><id>7078286</id><snippet>HTTPServer</snippet></ROW><ROW><id>7078286</id><snippet>IOLoop.add_handler()</snippet></ROW><ROW><id>7078286</id><snippet>IOStream</snippet></ROW><ROW><id>7078286</id><snippet>add_handler()</snippet></ROW><ROW><id>7078286</id><snippet>HTTPServer</snippet></ROW><ROW><id>7078286</id><snippet>IOLoop</snippet></ROW><ROW><id>7078286</id><snippet>epoll</snippet></ROW><ROW><id>7078286</id><snippet>select</snippet></ROW><ROW><id>7078286</id><snippet>IOStream</snippet></ROW><ROW><id>7078286</id><snippet>IOLoop</snippet></ROW><ROW><id>7078286</id><snippet>IOStream</snippet></ROW><ROW><id>7078286</id><snippet>IOLoop.add_handler()</snippet></ROW><ROW><id>7078286</id><snippet>listen()</snippet></ROW><ROW><id>7078286</id><snippet>HTTPServer</snippet></ROW><ROW><id>7078286</id><snippet>IOLoop</snippet></ROW><ROW><id>7078286</id><snippet>socket.accept()</snippet></ROW><ROW><id>7078286</id><snippet>HTTPConnection</snippet></ROW><ROW><id>7078286</id><snippet>HTTPConnection</snippet></ROW><ROW><id>7078286</id><snippet>IOStream</snippet></ROW><ROW><id>7078286</id><snippet>IOStream</snippet></ROW><ROW><id>7078286</id><snippet>IOLoop</snippet></ROW><ROW><id>7078286</id><snippet>IOStream</snippet></ROW><ROW><id>7078286</id><snippet>HTTPConnection</snippet></ROW><ROW><id>7078286</id><snippet>IOLoop</snippet></ROW><ROW><id>7078802</id><snippet>while 1:</snippet></ROW><ROW><id>7078802</id><snippet>def step(self):</snippet></ROW><ROW><id>7078802</id><snippet>import sys

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from direct.showbase.ShowBase import ShowBase

class MyApp(ShowBase):

    def __init__(self):
        ShowBase.__init__(self)
        self.qtApp = QApplication(sys.argv)
        label = QLabel("Hello World")
        label.show()
        self.m = loader.loadModel("frowney")
        self.m.reparentTo(render)

    def step(self):
        self.qtApp.processEvents()  #manual step trough Qt loop
        taskMgr.step()              #manual step trough Panda3D loop
        return 0                    #PyOS_InputHook expects an integer

if __name__ == "__main__":
    app = MyApp()
    while 1: app.step()
</snippet></ROW><ROW><id>7078802</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>7078802</id><snippet>&gt;&gt;&gt; import myfile
&gt;&gt;&gt; app = myfile.MyApp()
&gt;&gt;&gt; app.step()
&gt;&gt;&gt; app.something = something_else
&gt;&gt;&gt; app.step()
</snippet></ROW><ROW><id>7078802</id><snippet>IPython.lib.inputhook.set_inputhook()</snippet></ROW><ROW><id>7078802</id><snippet>&gt;&gt;&gt; from IPython.lib import inputhook
&gt;&gt;&gt; inputhook.set_inputhook(app.step)
</snippet></ROW><ROW><id>7079090</id><snippet>easy_install ssl</snippet></ROW><ROW><id>7079123</id><snippet>def make_adder(increment):
    def adder(number):
        return number + increment
    adder.__name__ = "adder(%s)" % increment
    return adder
</snippet></ROW><ROW><id>7079123</id><snippet>add1 = make_adder(1)
add5 = make_adder(5)

print add1(10)   # 11
print add5(10)   # 15
</snippet></ROW><ROW><id>7079123</id><snippet>make_adder</snippet></ROW><ROW><id>7079226</id><snippet>proxies=['68.xx.193.xx','xx.178.xx.70','98.xx.84.xx','83.xx.86.xx']
ports=[666,1080,859,910]
for i in range(len(proxies)):
    print (repr(proxies[i]), ports[i])
</snippet></ROW><ROW><id>7079226</id><snippet>("'68.xx.193.xx'", 666)
("'xx.178.xx.70'", 1080)
("'98.xx.84.xx'", 859)
("'83.xx.86.xx'", 910)
</snippet></ROW><ROW><id>7079226</id><snippet>repr</snippet></ROW><ROW><id>7079226</id><snippet>urllib2</snippet></ROW><ROW><id>7079283</id><snippet>print os.getcwd()</snippet></ROW><ROW><id>7079283</id><snippet>results.txt</snippet></ROW><ROW><id>7079283</id><snippet>IOError</snippet></ROW><ROW><id>7079283</id><snippet>results.txt</snippet></ROW><ROW><id>7079297</id><snippet>my_item = next((item for item in my_list if item['id'] == my_unique_id), None)
</snippet></ROW><ROW><id>7079297</id><snippet>my_unique_id</snippet></ROW><ROW><id>7079297</id><snippet>my_item</snippet></ROW><ROW><id>7079297</id><snippet>None</snippet></ROW><ROW><id>7079297</id><snippet>for item in my_list:
    if item['id'] == my_unique_id:
        my_item = item
        break
else:
    my_item = None
</snippet></ROW><ROW><id>7079297</id><snippet>else</snippet></ROW><ROW><id>7079297</id><snippet>for</snippet></ROW><ROW><id>7079297</id><snippet>break</snippet></ROW><ROW><id>7079399</id><snippet>multiprocessing</snippet></ROW><ROW><id>7079399</id><snippet>fork()</snippet></ROW><ROW><id>7079399</id><snippet>multiprocessing.forking.main()</snippet></ROW><ROW><id>7079399</id><snippet>python.exe</snippet></ROW><ROW><id>7079399</id><snippet>multiprocessing</snippet></ROW><ROW><id>7079399</id><snippet>-c</snippet></ROW><ROW><id>7079399</id><snippet>python.exe</snippet></ROW><ROW><id>7079399</id><snippet>freeze_support()</snippet></ROW><ROW><id>7079399</id><snippet>sys.exit()</snippet></ROW><ROW><id>7079399</id><snippet>freeze_support()</snippet></ROW><ROW><id>7079399</id><snippet>multiprocessing</snippet></ROW><ROW><id>7079399</id><snippet>sys.frozen</snippet></ROW><ROW><id>7079399</id><snippet>RuntimeError</snippet></ROW><ROW><id>7079399</id><snippet>freeze_support()</snippet></ROW><ROW><id>7079399</id><snippet>RuntimeError</snippet></ROW><ROW><id>7079399</id><snippet>sys.frozen</snippet></ROW><ROW><id>7079399</id><snippet>py2exe</snippet></ROW><ROW><id>7079399</id><snippet>sys.frozen</snippet></ROW><ROW><id>7079399</id><snippet>True</snippet></ROW><ROW><id>7079664</id><snippet>id</snippet></ROW><ROW><id>7079664</id><snippet>aifc.py:            if id == marker[0]:
aifc.py:                id = _read_short(chunk)
aifc.py:            if id == self._markers[i][0]:
aifc.py:            if id == marker[0]:
difflib.py:            id = ' id="%s%s"' % (self._prefix[side],linenum)
difflib.py:            id = ''
nntplib.py:        id = ''
nntplib.py:                id = words[2]
nntplib.py:        resp, nr, id = self.statparse(resp)
pdb.py:            id = idstring[0].strip()
pdb.py:            id = idstring[1].strip()
pdb.py:        if id == '': return failed
platform.py:                id = values[2]
platform.py:    id = ''
platform.py:            id = l[1]
platform.py:        id = _id
</snippet></ROW><ROW><id>7079664</id><snippet>str</snippet></ROW><ROW><id>7079664</id><snippet>list</snippet></ROW><ROW><id>7079664</id><snippet>int</snippet></ROW><ROW><id>7079664</id><snippet>Cookie.py:    str = str[1:-1]
mailcap.py:        str = os.environ['MAILCAPS']
mimetools.py:        str = self.typeheader
mimetools.py:            str = 'text/plain'
mimetools.py:            str = str[:i]
mimetools.py:        str = self.plisttext
mimetools.py:            str = str[1:]
mimetools.py:            str = str[end:]
rfc822.py:  str = m.getheader(name)
rfc822.py:  str = m.getrawheader(name)
smtplib.py:            str = ""
smtplib.py:            str = '%s%s' % (cmd, CRLF)
smtplib.py:            str = '%s %s%s' % (cmd, args, CRLF)
sre_parse.py:    pattern.str = str
xmllib.py:            str = res.group(1)
xmllib.py:                    str = chr(int(str[2:], 16))
xmllib.py:                    str = chr(int(str[1:]))
xmllib.py:                    str = self.entitydefs[str]
xmllib.py:                    str = '&amp;' + str + ';'

uuid.py:            int = long(hex, 16)
uuid.py:            int = long(('%02x'*16) % tuple(map(ord, bytes)), 16)
uuid.py:            int = ((time_low &lt;&lt; 96L) | (time_mid &lt;&lt; 80L) |

SimpleHTTPServer.py:            list = os.listdir(path)
StringIO.py:list = f.readlines()# list of f.readline() results until EOF
StringIO.py:    list = f.readlines()
anydbm.py:        list = d.keys() # return a list of all existing keys (slow!)
asynchat.py:            self.list = deque()
asynchat.py:            self.list = deque(list)
bdb.py:        list = self.breaks[filename]
cgi.py:    list = None
cgi.py:    list = traceback.format_tb(tb, limit) + \
code.py:        list = traceback.format_exception_only(type, value)
code.py:            list = traceback.format_list(tblist)
dircache.py:        cached_mtime, list = cache[path]
dircache.py:        cached_mtime, list = -1, []
dircache.py:        list = os.listdir(path)
mailbox.py:        # list = map(long, filter(pat.match, os.listdir(self.dirname)))
mailbox.py:        list = os.listdir(self.dirname)
mailbox.py:        list = filter(pat.match, list)
mailbox.py:        list = map(long, list)
mhlib.py:list = mh.listfolders() # names of top-level folders
mhlib.py:list = mh.listallfolders() # names of all folders, including subfolders
mhlib.py:list = mh.listsubfolders(name) # direct subfolders of given folder
mhlib.py:list = mh.listallsubfolders(name) # all subfolders of given folder
mhlib.py:list = f.listmessages() # list of messages in folder (as numbers)
mhlib.py:list = f.parsesequence(seq)     # parse msgs syntax into list of messages
mhlib.py:            list = []
mhlib.py:        list = map(int, stuff.split())
multifile.py:        list = []
nntplib.py:            list = []
nntplib.py:        resp, list = self.longcmd('LIST', file)
nntplib.py:        resp, list = self.longcmd(line, file)
pickle.py:        list = stack[-1]
pickle.py:        list = stack[mark - 1]
pipes.py:    list = []
poplib.py:        list = []; octets = 0
pstats.py:        width, list = self.get_print_list(amount)
pstats.py:        width, list = self.get_print_list(amount)
pstats.py:        width, list = self.get_print_list(amount)
rexec.py:        list = []
rfc822.py:  list = m.getaddrlist(name)
shelve.py:        list = d.keys() # a list of all existing keys (slow!)
socket.py:        list = []
telnetlib.py:        list = list[:]
traceback.py:    list = []
traceback.py:    list = []
traceback.py:        list = ['Traceback (most recent call last):\n']
traceback.py:        list = list + format_tb(tb, limit)
traceback.py:        list = []
traceback.py:    list = list + format_exception_only(etype, value)
traceback.py:    list = []
xdrlib.py:        list = []
xdrlib.py:        list = []
</snippet></ROW><ROW><id>7079664</id><snippet>file</snippet></ROW><ROW><id>7079664</id><snippet>dir</snippet></ROW><ROW><id>7079683</id><snippet>sort</snippet></ROW><ROW><id>7079683</id><snippet>-t $'\t'</snippet></ROW><ROW><id>7079683</id><snippet>-k n</snippet></ROW><ROW><id>7079683</id><snippet>n</snippet></ROW><ROW><id>7079683</id><snippet>-o outputfile</snippet></ROW><ROW><id>7079683</id><snippet>sort -t $'\t' -k 4 -o sorted.txt input.txt
</snippet></ROW><ROW><id>7079683</id><snippet>input.txt</snippet></ROW><ROW><id>7079683</id><snippet>sorted.txt</snippet></ROW><ROW><id>7079863</id><snippet>os.chdir</snippet></ROW><ROW><id>7079863</id><snippet>os.getcwd</snippet></ROW><ROW><id>7080064</id><snippet>db.eval</snippet></ROW><ROW><id>7080064</id><snippet>sum</snippet></ROW><ROW><id>7080064</id><snippet>average</snippet></ROW><ROW><id>7080064</id><snippet>item_frequencies</snippet></ROW><ROW><id>7080064</id><snippet>db.eval</snippet></ROW><ROW><id>7080140</id><snippet>float(poly_substitute(poly, x))
</snippet></ROW><ROW><id>7080140</id><snippet>-0.015</snippet></ROW><ROW><id>7080140</id><snippet>float(poly_substitute(poly_diff, x))
</snippet></ROW><ROW><id>7080140</id><snippet>-0.01</snippet></ROW><ROW><id>7080140</id><snippet>x</snippet></ROW><ROW><id>7080140</id><snippet>x_n = 0.5 - ( (-0.015) / (-0.01) )
x_n = 0.5 - 0.6666666...
x_n = -0.166666...
</snippet></ROW><ROW><id>7080232</id><snippet>module.__version__</snippet></ROW><ROW><id>7080232</id><snippet>import pkg_resources
version = pkg_resources.get_distribution("nose").version
</snippet></ROW><ROW><id>7080268</id><snippet>missing=[]
numbers.insert(0, 0) # add the minimum value on begining of the list
numbers.append(41)  # add the maximum value at the end of the list
for rank in xrange(0, len(numbers)-1):
   if numbers[rank+1] - numbers[rank] &gt; 2:
      missing.append("%s-%s"%(numbers[rank] +1 , numbers[rank+1] - 1))
   elif numbers[rank+1] - numbers[rank] == 2:
      missing.append(str(numbers[rank]+1))

print missing
</snippet></ROW><ROW><id>7080268</id><snippet>numbers = [1,4,6,10, 12,]</snippet></ROW><ROW><id>7080268</id><snippet>['2-3', '5', '7-9', '11', '13-40']
</snippet></ROW><ROW><id>7080606</id><snippet>sys.exit</snippet></ROW><ROW><id>7080849</id><snippet>{{ string|markdown:"extension_name,extension2,etc..." }}
</snippet></ROW><ROW><id>7081379</id><snippet>(r'^mainpage(\d+)/$', myview)
</snippet></ROW><ROW><id>7081379</id><snippet>myview()</snippet></ROW><ROW><id>7081379</id><snippet>def myview(request, digit):
    # do something
</snippet></ROW><ROW><id>7081586</id><snippet>__init__.py</snippet></ROW><ROW><id>7081586</id><snippet>oneclickcos/</snippet></ROW><ROW><id>7081586</id><snippet>oneclickcos/mainapp/</snippet></ROW><ROW><id>7081608</id><snippet>def find_id(data, name):
    for d in data:
        if d['site'] == name:
            return d['id'] 
</snippet></ROW><ROW><id>7081653</id><snippet>uri_for</snippet></ROW><ROW><id>7081653</id><snippet>import webapp2
from webapp2_extras import jinja2

def jinja2_factory(app):
    j = jinja2.Jinja2(app)
    j.environment.filters.update({
        # Set filters.
        # ...
    })
    j.environment.globals.update({
        # Set global variables.
        'uri_for': webapp2.uri_for,
        # ...
    })
    return j

class BaseHandler(webapp2.RequestHandler):

    @webapp2.cached_property
    def jinja2(self):
        # Returns a Jinja2 renderer cached in the app registry.
        return jinja2.get_jinja2(factory=jinja2_factory)

    def render_response(self, _template, **context):
        # Renders a template and writes the result to the response.
        rv = self.jinja2.render_template(_template, **context)
        self.response.write(rv)
</snippet></ROW><ROW><id>7081974</id><snippet>re.DOTALL</snippet></ROW><ROW><id>7081974</id><snippet>.</snippet></ROW><ROW><id>7081974</id><snippet>re.compile(r'/\*\*.+?\*/', re.DOTALL)
</snippet></ROW><ROW><id>7081974</id><snippet>/*</snippet></ROW><ROW><id>7081974</id><snippet>/**</snippet></ROW><ROW><id>7082122</id><snippet>GetNewReports</snippet></ROW><ROW><id>7082122</id><snippet>ArrayOfString</snippet></ROW><ROW><id>7082122</id><snippet>help(reportxml)</snippet></ROW><ROW><id>7082122</id><snippet>print dir(reportxml)</snippet></ROW><ROW><id>7082122</id><snippet>client.service</snippet></ROW><ROW><id>7082122</id><snippet>[index]</snippet></ROW><ROW><id>7082651</id><snippet>import matplotlib as mpl
mpl.rcParams['font.size'] = 9.0
</snippet></ROW><ROW><id>7082651</id><snippet>ax.pie</snippet></ROW><ROW><id>7082651</id><snippet>patches, texts, autotexts = ax.pie(frac, colors=colors, labels=labels, autopct='%1.1f%%')
texts[0].set_fontsize(4)
plt.show()
</snippet></ROW><ROW><id>7082702</id><snippet>import subprocess
import os
with open(os.devnull, 'w') as fp:
    cmd = subprocess.Popen(("[command]",), stdout=fp)
</snippet></ROW><ROW><id>7082702</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>7082702</id><snippet>with</snippet></ROW><ROW><id>7082845</id><snippet>f = open(dest, 'wb')</snippet></ROW><ROW><id>7082845</id><snippet>b</snippet></ROW><ROW><id>7082845</id><snippet>b</snippet></ROW><ROW><id>7083004</id><snippet>None</snippet></ROW><ROW><id>7083004</id><snippet>result = getCity()
if result:
   # do something
</snippet></ROW><ROW><id>7083004</id><snippet>(None, None)</snippet></ROW><ROW><id>7083004</id><snippet>None</snippet></ROW><ROW><id>7083004</id><snippet>('Boston', None)</snippet></ROW><ROW><id>7083195</id><snippet>from flask import Flask
app = Flask(__name__)

@app.route("/arbitrary/&lt;path:my_path&gt;")
def arbitrary_path(my_path):
    return my_path

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>7083195</id><snippet>http://127.0.0.1:5000/arbitrary/dir1/dir2/dir3/dir4</snippet></ROW><ROW><id>7083195</id><snippet>dir1/dir2/dir3/dir4</snippet></ROW><ROW><id>7083195</id><snippet>http://127.0.0.1:5000/arbitrary/dir1/dir2/dir3/dir4/dir5/dir6/dir7/dir8/dir9/dir10</snippet></ROW><ROW><id>7083195</id><snippet>dir1/dir2/dir3/dir4/dir5/dir6/dir7/dir8/dir9/dir10</snippet></ROW><ROW><id>7083198</id><snippet>def set_fontsize(fig,fontsize):
    """
    For each text object of a figure fig, set the font size to fontsize
    """
    def match(artist):
        return artist.__module__ == "matplotlib.text"

    for textobj in fig.findobj(match=match):
        textobj.set_fontsize(fontsize)
</snippet></ROW><ROW><id>7083511</id><snippet>ALTER TABLE foo CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;
</snippet></ROW><ROW><id>7083511</id><snippet>CREATE DATABASE foo CHARACTER SET utf8 COLLATE utf8_general_ci;
</snippet></ROW><ROW><id>7083528</id><snippet>MSGR</snippet></ROW><ROW><id>7083528</id><snippet>Localization.MSGR</snippet></ROW><ROW><id>7083528</id><snippet>Localization.MSGR</snippet></ROW><ROW><id>7083528</id><snippet>import Localization</snippet></ROW><ROW><id>7083552</id><snippet>stringtowrite = "abcd ||\nefgh||\dniklk"

f = open(save_dir + "/" +count+"_report.txt", "w")
f.write(stringtowrite)
f.close()
</snippet></ROW><ROW><id>7083552</id><snippet>stringtowrite = """abcd ||
                   efgh||
                   iklk"""
</snippet></ROW><ROW><id>7083707</id><snippet>"</snippet></ROW><ROW><id>7083707</id><snippet># notice the extra ' around the %s
query = """INSERT INTO new_test 
              (test_name, IP, test_run_date, results_query_time, run_time) 
           VALUES ('%s', '%s', '%s', '%s', '%s')""" % \
           ("new_test", "192.168.17.194", "143917160811", 
           "12.4847829342", "46.1268320084")
</snippet></ROW><ROW><id>7083760</id><snippet>threading.Lock</snippet></ROW><ROW><id>7083760</id><snippet>SillyExampleFriendsList</snippet></ROW><ROW><id>7083760</id><snippet>class SillyExampleFriendsList(object):
    """Just manipulates a couple lists"""
    def __init__(self):
       self._lock = threading.RLock()
       self._friends = []
       self._enemies = []

    def unfriend(self, x):
       # we lock here to ensure that we're never in a state where
       # someone might think 'x' is both our friend and our enemy.
       self._lock.acquire()
       self._friends.remove(x)
       self._enemies.append(x)
       self._lock.release()
</snippet></ROW><ROW><id>7084116</id><snippet>date = '01.01.2011'

ffilter = "%s &gt; CAST('%s' AS DATE)" %(str(ft), date)
q = q.filter(ffilter)
</snippet></ROW><ROW><id>7084266</id><snippet>from sqlalchemy import create_engine, Table, Column, Integer, String, MetaData
from sqlalchemy.orm import mapper, sessionmaker

engine = create_engine('sqlite:///:memory:', echo=True,)
metadata = MetaData()

mytable = Table('mytable', metadata,
    Column('id', Integer, primary_key=True),
    Column('title', String(50)),
    Column('description', String(50)),
)

class MyObject(object):
    # 1. define keywork based constructor (or do this in the part 2.)
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

mapper(MyObject, mytable)
metadata.create_all(engine)

session = sessionmaker(bind=engine, autoflush=False)()

input = ([('title', 'A title'), ('description', 'A description'), 
('title', 'Another title'), ('description', 'Another description'), 
('title', 'One more title'), ('description', 'One more description')])

# 2. add data to the session, then commit
while input:
    values = dict((input.pop(0), input.pop(0)))
    obj = MyObject(**values)
    session.add(obj)
session.commit()
</snippet></ROW><ROW><id>7084610</id><snippet>str</snippet></ROW><ROW><id>7084610</id><snippet>printNum</snippet></ROW><ROW><id>7084610</id><snippet>printNum</snippet></ROW><ROW><id>7084610</id><snippet>x</snippet></ROW><ROW><id>7084610</id><snippet>int</snippet></ROW><ROW><id>7084610</id><snippet>int</snippet></ROW><ROW><id>7084610</id><snippet>printNum(int(sys.argv[1]))
</snippet></ROW><ROW><id>7084613</id><snippet>file</snippet></ROW><ROW><id>7084613</id><snippet>file</snippet></ROW><ROW><id>7084613</id><snippet>write</snippet></ROW><ROW><id>7084613</id><snippet>writelines</snippet></ROW><ROW><id>7084613</id><snippet>tell</snippet></ROW><ROW><id>7084614</id><snippet>$this</snippet></ROW><ROW><id>7084614</id><snippet>class CrowdProcess
{
    public $variable;

    public function __construct($variable)
    {
        $this-&gt;variable = $variable;
    }

    public function otherfunc()
    {
        echo $this-&gt;variable, PHP_EOL;
    }
}
</snippet></ROW><ROW><id>7084639</id><snippet>sudo pip install scikits.learn
</snippet></ROW><ROW><id>7084639</id><snippet>sudo python2.6 pip install scikits.learn
</snippet></ROW><ROW><id>7084639</id><snippet>pip searh foo
</snippet></ROW><ROW><id>7084953</id><snippet>'\n'</snippet></ROW><ROW><id>7084953</id><snippet>info</snippet></ROW><ROW><id>7084953</id><snippet>info = infl.readline().rstrip()
</snippet></ROW><ROW><id>7084956</id><snippet>class SerializeEmail(Email):

    def write_email(self,file_name):

        with open(file_name,"w") as f:
            json.dump(self,f,cls=SerializeEmailJSONEncoder,sort_keys=True,indent=4)

    @staticmethod
    def read_email(file_name):

        with open(file_name,"r") as f:
           return json.load(f,cls=SerializeEmailJSONDecoder)

# You can now create a new instance by simply doing the following:
new_email = SerializeEmail.read_email('my_email.txt')
</snippet></ROW><ROW><id>7084956</id><snippet>SerializeEmail</snippet></ROW><ROW><id>7085000</id><snippet>install_requires</snippet></ROW><ROW><id>7085000</id><snippet>install_requires</snippet></ROW><ROW><id>7085000</id><snippet>install_requires</snippet></ROW><ROW><id>7085523</id><snippet>/(\d+)$/</snippet></ROW><ROW><id>7085646</id><snippet>flask-debugtoolbar</snippet></ROW><ROW><id>7085646</id><snippet>django-debug-toolbar</snippet></ROW><ROW><id>7085646</id><snippet>Flask</snippet></ROW><ROW><id>7085773</id><snippet>(let ((my-buffer-name (buffer-name))
   ....
</snippet></ROW><ROW><id>7085885</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; values = numpy.array([1,0,2,0,3,0])
&gt;&gt;&gt; counts = numpy.array([4,5,3,3,2,2])
&gt;&gt;&gt; numpy.repeat(values, counts)
array([1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0])
</snippet></ROW><ROW><id>7085983</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>7085983</id><snippet>authenticate</snippet></ROW><ROW><id>7085983</id><snippet>login_required</snippet></ROW><ROW><id>7086370</id><snippet>b</snippet></ROW><ROW><id>7086370</id><snippet>BaseClass</snippet></ROW><ROW><id>7086370</id><snippet>class BaseClass(object):
    def b(self):
        raise NotImplementedError('b must be implemented by a subclass')
</snippet></ROW><ROW><id>7086370</id><snippet>a</snippet></ROW><ROW><id>7086370</id><snippet>b</snippet></ROW><ROW><id>7086370</id><snippet>AttributeError</snippet></ROW><ROW><id>7086514</id><snippet>from collections import defaultdict

def expand(line, links, known):
    print 'expand'
    known.append(line)
    for child in links[line[-1]]:
        newline = line + child
        yield expand(newline, links, known)

def trampoline(generator):
    stack = [generator]
    while stack:
        try:
            generator = stack.pop()
            print 'next'
            child = next(generator)
            stack.append(generator)
            stack.append(child)
        except StopIteration:
            pass

def main(pairs):
    have_successors = set()
    links = defaultdict(lambda: set())
    for (start, end) in pairs:
        have_successors.add(start)
        links[end].add(start)
    known = []
    for node in set(links.keys()):
        if node not in have_successors:
            trampoline(expand(node, links, known))
    for line in known:
        print line

if __name__ == '__main__':
    main([("L", "G"), ("A", "B"), ("B", "I"), ("B", "H"), ("B", "C"), ("F", "G"), ("D", "E"), ("D", "J"), ("E", "L"), ("C", "D"), ("E", "F"), ("J", "K")])
</snippet></ROW><ROW><id>7086514</id><snippet>next(foo)</snippet></ROW><ROW><id>7086514</id><snippet>foo.__next__()</snippet></ROW><ROW><id>7086514</id><snippet>i</snippet></ROW><ROW><id>7086514</id><snippet>index</snippet></ROW><ROW><id>7086514</id><snippet>count</snippet></ROW><ROW><id>7086514</id><snippet>if i &lt; count - 1:</snippet></ROW><ROW><id>7086514</id><snippet>if branch == branches [-1]:</snippet></ROW><ROW><id>7086514</id><snippet>i</snippet></ROW><ROW><id>7086514</id><snippet>for each alignment in alignments</snippet></ROW><ROW><id>7086514</id><snippet>for each alignment in list(alignments)</snippet></ROW><ROW><id>7086514</id><snippet>newline</snippet></ROW><ROW><id>7086514</id><snippet>print</snippet></ROW><ROW><id>7086514</id><snippet>expand</snippet></ROW><ROW><id>7086514</id><snippet>buildAlignment</snippet></ROW><ROW><id>7086514</id><snippet>: python2.7 recurse.py
next
expand
next
expand
next
expand
next
expand
next
expand
next
expand
next
expand
next
next
...
</snippet></ROW><ROW><id>7086514</id><snippet>expand</snippet></ROW><ROW><id>7086514</id><snippet>next()</snippet></ROW><ROW><id>7086514</id><snippet>yield</snippet></ROW><ROW><id>7086514</id><snippet>trampoline</snippet></ROW><ROW><id>7086514</id><snippet>next()</snippet></ROW><ROW><id>7086514</id><snippet>next</snippet></ROW><ROW><id>7086514</id><snippet>yield</snippet></ROW><ROW><id>7086514</id><snippet>trampoline()</snippet></ROW><ROW><id>7086514</id><snippet>next()</snippet></ROW><ROW><id>7086514</id><snippet>StopIteration</snippet></ROW><ROW><id>7086514</id><snippet>trampoline()</snippet></ROW><ROW><id>7086514</id><snippet>stack</snippet></ROW><ROW><id>7086514</id><snippet>next()</snippet></ROW><ROW><id>7086514</id><snippet>yield</snippet></ROW><ROW><id>7086514</id><snippet>while</snippet></ROW><ROW><id>7086514</id><snippet>yield</snippet></ROW><ROW><id>7086514</id><snippet>StopIteration</snippet></ROW><ROW><id>7086514</id><snippet>yield</snippet></ROW><ROW><id>7086514</id><snippet>stack</snippet></ROW><ROW><id>7086760</id><snippet>unittest</snippet></ROW><ROW><id>7086760</id><snippet>__doc__</snippet></ROW><ROW><id>7086760</id><snippet>random</snippet></ROW><ROW><id>7086760</id><snippet>unittest.main()</snippet></ROW><ROW><id>7086760</id><snippet>import os
import unittest

# Generate a test class for an individual file.
def make_test(filename):
    class TestClass(unittest.TestCase):
        def test_file(self):
            # Do the actual testing here.
            # parsed = do_my_parsing(filename)
            # golden = load_golden(filename)
            # self.assertEquals(parsed, golden, 'Parsing failed.')

            # Randomly fail some tests.
            import random
            if not random.randint(0, 10):
                self.assertEquals(0, 1, 'Parsing failed.')

        # Set the docstring so we get nice test messages.
        test_file.__doc__ = 'Test parsing of %s' % filename

    return TestClass

# Create a single file test.
Test1 = make_test('file1.html')

# Create several tests from a list.
for i in range(2, 5):
    globals()['Test%d' % i] = make_test('file%d.html' % i)

# Create them from a directory listing.
for dirname, subdirs, filenames in os.walk('tests'):
    for f in filenames:
        globals()['Test%s' % f] = make_test('%s/%s' % (dirname, f))

# If this file is being run, run all the tests.
if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>7086760</id><snippet>$ python tests.py -v
Test parsing of file1.html ... ok
Test parsing of file2.html ... ok
Test parsing of file3.html ... ok
Test parsing of file4.html ... ok
Test parsing of tests/file5.html ... ok
Test parsing of tests/file6.html ... FAIL
Test parsing of tests/file7.html ... ok
Test parsing of tests/file8.html ... ok

======================================================================
FAIL: Test parsing of tests/file6.html
----------------------------------------------------------------------
Traceback (most recent call last):
  File "generic.py", line 16, in test_file
    self.assertEquals(0, 1, 'Parsing failed.')
AssertionError: Parsing failed.

----------------------------------------------------------------------
Ran 8 tests in 0.004s

FAILED (failures=1)
</snippet></ROW><ROW><id>7086833</id><snippet>setattr</snippet></ROW><ROW><id>7086833</id><snippet>as_views</snippet></ROW><ROW><id>7086833</id><snippet>import re

class Views(object):
    """Empty object for holding as_view method"""
views = Views()

def convert_name(name):
    """convert CapWords into cap_words"""
    return name[0].lower() + re.sub(r'([A-Z])', lambda m:"_" + m.group(0).lower(), name[1:])

def as_view(views):
    """Adds decorated class-based views' as_view methods to views container"""
    def decorator(cls):
        name = convert_name(cls.__name__)
        setattr(views, name, cls.as_view)
        return cls
    return decorator
</snippet></ROW><ROW><id>7086833</id><snippet>from as_view_decorator import views, as_view

@as_view(views)
class MyView(View):
    ....
</snippet></ROW><ROW><id>7086833</id><snippet>MyView.as_view</snippet></ROW><ROW><id>7086833</id><snippet>views</snippet></ROW><ROW><id>7086833</id><snippet>views.my_view</snippet></ROW><ROW><id>7086833</id><snippet>from as_view_decorator impor as_view
import sys; mod = sys.modules[__name__]

@as_view(mod)
class MyView(View):
    ...
</snippet></ROW><ROW><id>7086833</id><snippet>my_view</snippet></ROW><ROW><id>7086833</id><snippet>views</snippet></ROW><ROW><id>7086833</id><snippet>urls.py</snippet></ROW><ROW><id>7086833</id><snippet>from app.views import my_view

urlpatterns = patterns('',    
    url(r'^$', my_view()),
)
</snippet></ROW><ROW><id>7086833</id><snippet>my_view = MyView.as_view</snippet></ROW><ROW><id>7086871</id><snippet>request.form</snippet></ROW><ROW><id>7086871</id><snippet># mkreq.py
from urllib import urlencode
import urllib2
from base64 import b64encode

credentials = {
            'username': 'test@example.com',
            'password': 'password'
}
data = b64encode(urlencode(credentials))
request = urllib2.Request("http://localhost:5000/login")
request.add_data(data)
request.add_header('Content-Type', 'application/gooblygop')
# 'application/x-www-form-urlencoded' seems to be a default Content-Type
login1 = urllib2.urlopen(request).read()
print(login1)
request2 = urllib2.Request("http://localhost:5000/login")
request2.add_data(data)
login2 = urllib2.urlopen(request2).read()
print(login2)
</snippet></ROW><ROW><id>7086871</id><snippet>@app.route('/login', methods=['POST'])
def login():
    error = None
    if request.method == 'POST':
        # post data: cGFzc3dvcmQ9ZGVmYXVsdCZlbWFpbD10ZXN0JTQwZXhhbXBsZS5jb20=
        data = b64decode(request.data)
        # decoded data: password=default&amp;email=test%40example.com
        if not data:
            data = b64decode(request.form.keys()[0])
        special_mimetype = request.mimetype
        return(special_mimetype + '\n' + data)
</snippet></ROW><ROW><id>7086871</id><snippet>bvm$ python mkreq.py
application/gooblygop
username=test%40example.com&amp;password=password
application/x-www-form-urlencoded
username=test%40example.com&amp;password=password
</snippet></ROW><ROW><id>7087005</id><snippet>type(varname)
</snippet></ROW><ROW><id>7087013</id><snippet>location_map = {
  1: {'name': Rio De Janeiro', 'lat': -22.45, 'long': -43.12, 'radius': 294200},
  # ...
}
</snippet></ROW><ROW><id>7087191</id><snippet>subprocess.call</snippet></ROW><ROW><id>7087191</id><snippet>lines = subprocess.Popen([program, '-i'], stdout=subprocess.PIPE).communicate()[0]
print lines.splitlines()[0] + '\n'
</snippet></ROW><ROW><id>7087191</id><snippet>communicate</snippet></ROW><ROW><id>7087191</id><snippet>(stdoutdata, stderrdata)</snippet></ROW><ROW><id>7087378</id><snippet>#!/usr/bin/env python

def make_list(first_item):
    list_new = []
    list_new.append(first_item)
    return list_new

def add_item(list, item):
    list.append(item)
    return list

mylist = make_list(1)
mylist = add_item(mylist, 2)

print mylist    # prints [1, 2]
</snippet></ROW><ROW><id>7087378</id><snippet>#!/usr/bin/env python

def add_item(list, item):
    list.append(item)
    return list

mylist = []
mylist = add_item(mylist, 1)
mylist = add_item(mylist, 2)

print mylist    # prints [1, 2]
</snippet></ROW><ROW><id>7087378</id><snippet>#!/usr/bin/env python

#
# Does the same thing
#
mylist = []
mylist.append(1)
mylist.append(2)

print mylist    # prints [1, 2]
</snippet></ROW><ROW><id>7087569</id><snippet>from settings import ...</snippet></ROW><ROW><id>7087569</id><snippet>import settings</snippet></ROW><ROW><id>7087569</id><snippet>from django.conf import settings</snippet></ROW><ROW><id>7087569</id><snippet>DEFAULT_CONTENT_TYPE</snippet></ROW><ROW><id>7087569</id><snippet>settings.DEFAULT_CONTENT_TYPE</snippet></ROW><ROW><id>7087688</id><snippet>socket</snippet></ROW><ROW><id>7087736</id><snippet>time</snippet></ROW><ROW><id>7087736</id><snippet>def time() :
    t_u = 0
    i = 0
    while i &lt; len(tlist) - 1:
        # if the number is in the range
        # do the calculations and move to the next number
        if t_u &gt; tlist[i] and t_u &lt; tlist[i + 1] :
            print "\n The t_u value:", t_u, 'is between',
            print "start:", tlist[i], " and end: ", tlist[i+1]
            poly = poly_coeff(tlist[i], tlist[i + 1], t_u)
            Newton(poly)
            t_u = t_u + 0.04 # regular time interval
        # if the number is at the boundary of the range
        # go to the next number without doing the calculation
        elif t_u == tlist[i] or t_u == tlist[i + 1] :
            print "\n The t_u value:", t_u, 'is on the boundary of',
            print "start:", tlist[i], " and end: ", tlist[i+1]
            t_u = t_u + 0.04 # regular time interval
        # if the number isn't in the range, move to the next range
        else :
            i += 1
</snippet></ROW><ROW><id>7087904</id><snippet>slice.indices</snippet></ROW><ROW><id>7087904</id><snippet>&gt;&gt;&gt; s = slice(2, 5, None)
&gt;&gt;&gt; s.indices(10)
(2, 5, 1)

&gt;&gt;&gt; [x for x in range(*s.indices(10))]
[2, 3, 4]

&gt;&gt;&gt; s.indices(3)
(2, 3, 1)

&gt;&gt;&gt; s.indices(0)
(0, 0, 1)
</snippet></ROW><ROW><id>7087948</id><snippet>import numpy as np
from itertools import chain

c.execute("SELECT video_id FROM video")
results = c.fetchall()
D = np.fromiter(chain.from_iterable(results), dtype=float, count=-1) 
</snippet></ROW><ROW><id>7088133</id><snippet>def try_except(success, failure, *exceptions):
    try:
        return success()
    except exceptions or Exception:
        return failure() if callable(failure) else failure
</snippet></ROW><ROW><id>7088133</id><snippet>lambda: ''</snippet></ROW><ROW><id>7088133</id><snippet>str</snippet></ROW><ROW><id>7088229</id><snippet>Q</snippet></ROW><ROW><id>7088229</id><snippet>from django.db.models import Q

ob_list = data.objects.filter(reduce(lambda x, y: x | y, [Q(name__contains=word) for word in list]))
</snippet></ROW><ROW><id>7088229</id><snippet>reduce(lambda x, y: x | y, [Q(name__contains=word) for word in list]))
</snippet></ROW><ROW><id>7088229</id><snippet>Q(name__contains=list[0]) | Q(name__contains=list[1]) | ... | Q(name__contains=list[-1])
</snippet></ROW><ROW><id>7088229</id><snippet>Q</snippet></ROW><ROW><id>7088257</id><snippet>sub</snippet></ROW><ROW><id>7088257</id><snippet>s = 'deviceId={servicename.DeviceID}&amp;deviceGroupID={servicename.GroupID}&amp;abcd=dkef'
r = ['ApplC3LDJXGEDCP7', '10']
print(re.sub(r'{.+?}', lambda match: r.pop(0), s, count=len(r)))
# deviceId=ApplC3LDJXGEDCP7&amp;deviceGroupID=10&amp;abcd=dkef
</snippet></ROW><ROW><id>7088257</id><snippet>urllib.parse.parse_qs</snippet></ROW><ROW><id>7088280</id><snippet>e.execute("select %s, %s;", ("param1", "test"), ("param2", "test2"))
</snippet></ROW><ROW><id>7088280</id><snippet>e.execute("select %(param1)s, %(param2)s;", param1="test", param2="test2"))
</snippet></ROW><ROW><id>7088388</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; r = open("/dev/urandom","r")
&gt;&gt;&gt; base64.encodestring(r.read(22))[:30]
'3Ttlx6TT3siM8h+zKm+Q6lH1k+dTcg'
&gt;&gt;&gt; r.close()
</snippet></ROW><ROW><id>7088388</id><snippet>strings</snippet></ROW><ROW><id>7088388</id><snippet>grep</snippet></ROW><ROW><id>7088388</id><snippet>/dev/urandom</snippet></ROW><ROW><id>7088388</id><snippet>strings ...</snippet></ROW><ROW><id>7088388</id><snippet>/dev/urandom</snippet></ROW><ROW><id>7088388</id><snippet>import string
import random
''.join([random.choice(string.printable[:62]) for i in range(30)])
</snippet></ROW><ROW><id>7088674</id><snippet>if value in my_array[:, col_num]:
    do_whatever
</snippet></ROW><ROW><id>7088674</id><snippet>__contains__</snippet></ROW><ROW><id>7088921</id><snippet>import wx
from Queue import Queue, Empty, Full
import threading
from time import sleep
from math import sin
from itertools import count

class Producer(threading.Thread):
    def __init__(self,queue):
        self.queue=queue
        self.t=0
        threading.Thread.__init__(self)
        self.daemon=False


    def run(self):
        print "initializing producer"
        freq=0.1
        secondsBetweenReadings=1.0/32
        try:
            while True:
                readings=[ 256.0*sin(freq*t) for t in range(self.t,self.t+4) ]
                self.t = self.t+4
                self.queue.put(readings,timeout=0.1)
                sleep(secondsBetweenReadings)
        except Full:
            print "Queue Full. Exiting"

class App(wx.App):
    def __init__(self,queue):
        self.queue=queue
        wx.App.__init__(self,redirect=False)

    def OnInit(self):
        self.frame=wx.Frame(parent=None,size=(256,256))
        self.plotPanel=wx.Panel(self.frame,size=(256,256))
        self.plotPanel.SetBackgroundColour(wx.BLACK)
        self.data=[]
        self.plotPanel.Bind(wx.EVT_PAINT,self.OnPaintPlot)
        self.plotPanel.Bind(wx.EVT_ERASE_BACKGROUND,lambda evt: None) #For Windows
        self.Bind(wx.EVT_IDLE,self.CheckForData)
        self.frame.Show()
        return True

    def CheckForData(self,evt):
        try:
            data=self.queue.get(timeout=0.05)
            self.data.extend(data)
            self.plotPanel.Refresh()
        except Empty:
            pass
        evt.RequestMore()


    def OnPaintPlot(self,evt):
        w,h=self.plotPanel.GetClientSize()
        dc=wx.PaintDC(self.plotPanel)
        dc.SetBrush(wx.BLACK_BRUSH)
        dc.DrawRectangle(0,0,w,h)
        dc.SetPen(wx.WHITE_PEN)
        coords=zip(count(),self.data)
        if len(coords) &gt; 2:
            dc.DrawLines(coords)


if __name__ == "__main__":
    maxReadings=32
    queue=Queue(maxReadings)
    producer=Producer(queue)
    plotterApp=App(queue)

    producer.start()
    plotterApp.MainLoop()
</snippet></ROW><ROW><id>7088962</id><snippet>def p(x,n=0):
    if n == 0:
        n = int(x.bit_length() * 0.3)
    if n &lt; 100:
        return str(x)
    n &gt;&gt;= 1
    l = 10**n
    a,b = divmod(x, l)
    upper = p(a,n)
    lower = p(b,n).rjust(n, "0")
    return upper + lower
</snippet></ROW><ROW><id>7088990</id><snippet>svn log | head</snippet></ROW><ROW><id>7088990</id><snippet>from subprocess import PIPE, Popen

process = Popen('svn log XXX', stdout=PIPE, stderr=PIPE)
print process.stdout.readline()
print process.stdout.readline()
</snippet></ROW><ROW><id>7088990</id><snippet>stderr</snippet></ROW><ROW><id>7088990</id><snippet>stdout, stderr = Popen('svn log XXX | head -n2', stdout=PIPE, stderr=PIPE, shell=True).communicate()
print stdout
</snippet></ROW><ROW><id>7089152</id><snippet>global</snippet></ROW><ROW><id>7089152</id><snippet># mg.py

bar = 5

# server.py
import mg

def foo():
    mg.bar = 10
</snippet></ROW><ROW><id>7089152</id><snippet>class mg:
    bar = 5

def foo():
    mg.bar = 10
</snippet></ROW><ROW><id>7089152</id><snippet>global</snippet></ROW><ROW><id>7089152</id><snippet>bar</snippet></ROW><ROW><id>7089152</id><snippet># selfimport.py
import selfimport

def foo():
    print selfimport.foo

bar = 3

if __name__ == '__main__':
    print selfimport.bar
    foo()
</snippet></ROW><ROW><id>7089152</id><snippet># selfimport.py
import selfimport

bar = 3

def foo():
    selfimport.bar = 5

if __name__ == '__main__':
    print selfimport.bar
    foo()
    print bar # bar is still 3!
</snippet></ROW><ROW><id>7089152</id><snippet>global</snippet></ROW><ROW><id>7089152</id><snippet>if</snippet></ROW><ROW><id>7089540</id><snippet>import numpy as np

ids = [1,1,1,2,2,2,3]
data = [20,30,0,4,8,9,18]

print np.bincount(ids, weights=data)
</snippet></ROW><ROW><id>7089719</id><snippet>from joblib import Parallel, delayed
from boost import boost_function

class Wrapper(object):
    def __init__(self, method_name, module_name):
        self.method_name = method_name
        self.module_name = module_name

    def __call__(self, *args, **kwargs):
        method = __import__(self.module_name, globals(), locals(), [self.method_name,])
        return method(*args, **kwargs)

Parallel(n_jobs=1)(delayed(Wrapper("boost_module_name_with_dots", "boost_method_name")(i) for i in range(10))
</snippet></ROW><ROW><id>7090126</id><snippet>alias newpython="/path/to/your/new_version/python"
</snippet></ROW><ROW><id>7090126</id><snippet>.bashrc</snippet></ROW><ROW><id>7090126</id><snippet>newpython</snippet></ROW><ROW><id>7090126</id><snippet>python</snippet></ROW><ROW><id>7090478</id><snippet>from numpy import abs, diag, dot, zeros
from numpy.linalg import lstsq, inv, norm

def irls(A, b, p= 1):
    """Solve least squares problem min ||x||_p s.t. Ax= b."""
    x, p, e= zeros((A.shape[1], 1)), p/ 2.- 1, 1.
    xp= lstsq(A, b)[0]
    for k in xrange(1000):
        if e&lt; 1e-6: break
        Q= dot(diag(1./ (xp** 2+ e)** p), A.T)
        x= dot(dot(Q, inv(dot(A, Q))), b)
        x[abs(x)&lt; 1e-1]= 0
        if norm(x- xp)&lt; 1e-2* e** .5: e*= 1e-1
        xp= x
    return k, x.round()
</snippet></ROW><ROW><id>7090571</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7090571</id><snippet>SyntaxError</snippet></ROW><ROW><id>7090571</id><snippet>ImportError</snippet></ROW><ROW><id>7090571</id><snippet>SyntaxError</snippet></ROW><ROW><id>7090571</id><snippet>@app.route('/proPass', method ='POST')
</snippet></ROW><ROW><id>7090571</id><snippet>@</snippet></ROW><ROW><id>7090571</id><snippet>def</snippet></ROW><ROW><id>7090571</id><snippet>class</snippet></ROW><ROW><id>7090571</id><snippet>open</snippet></ROW><ROW><id>7090731</id><snippet>r'\b[A-Z]{3}[a-z][A-Z]{3}\b'
</snippet></ROW><ROW><id>7090731</id><snippet>r'(?&lt;![^A-Z])[A-Z]{3}[a-z][A-Z]{3}(?![A-Z])'
</snippet></ROW><ROW><id>7090833</id><snippet>result = [dict(tupleized) for tupleized in set(tuple(item.items()) for item in l)]
</snippet></ROW><ROW><id>7091512</id><snippet>import sys
import time
k = 0
try:
    buff = ''
    while True:
        buff += sys.stdin.read(1)
        if buff.endswith('\n'):
            print buff[:-1]
            buff = ''
            k = k + 1
except KeyboardInterrupt:
   sys.stdout.flush()
   pass
print k
</snippet></ROW><ROW><id>7091570</id><snippet>l = ['0word0 0word1 0word2', '1word0 1word1 1word2', '2word0 2word1']

print [x for w in l for x in w.split()].index('1word2')
</snippet></ROW><ROW><id>7091570</id><snippet>def get_abs_pos(lVals, word):
    return [i for i,x in enumerate([x for w in l for x in w.split()]) if x == word]
</snippet></ROW><ROW><id>7091570</id><snippet>' '.join(l).split().index('1word2')
</snippet></ROW><ROW><id>7091729</id><snippet>flask.current_app</snippet></ROW><ROW><id>7091729</id><snippet>principal</snippet></ROW><ROW><id>7091733</id><snippet>PyLint: Executing command line:' /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pylint-0.23.0-py2.7.egg/pylint/lint.py --include-ids=y /Users/bogdan/Documents/TVB/tvb-root/tvb/trunk/tvb/core/storage/model.py
</snippet></ROW><ROW><id>7091733</id><snippet>/Users/bogdan/Documents/TVB/tvb-root/tvb/trunk/tvb/core/storage/model.py
</snippet></ROW><ROW><id>7091733</id><snippet>/Users/bogdan/Documents/TVB/tvb-root/tvb/trunk/tvb/core/storage
</snippet></ROW><ROW><id>7091753</id><snippet>x[0:]</snippet></ROW><ROW><id>7091753</id><snippet>y[0]</snippet></ROW><ROW><id>7091753</id><snippet>y[1]</snippet></ROW><ROW><id>7091753</id><snippet>x</snippet></ROW><ROW><id>7091759</id><snippet>timedelta</snippet></ROW><ROW><id>7091759</id><snippet>timedelta</snippet></ROW><ROW><id>7092342</id><snippet>db.coll.find({field_name: {$not: {$exists: true}}}).count()
</snippet></ROW><ROW><id>7092342</id><snippet>remove()</snippet></ROW><ROW><id>7092412</id><snippet>listctrl</snippet></ROW><ROW><id>7092412</id><snippet>textctrl</snippet></ROW><ROW><id>7092439</id><snippet>import numpy as np

#geometry calculations
def geom(pts,n):
    normvecs = np.zeros((n,2))
    alphap = np.zeros(n)
    alphap[:] = np.arctan2(pts[1:n+1,1]-pts[0:n,1],pts[1:n+1,0]-pts[0:n,0])
    normvecs[:,0] = -np.sin(alphap[:])
    normvecs[:,1] =  np.cos(alphap[:])
    print np.abs(normvecs[:,0])-np.abs(normvecs[:,1])
    return

geom(np.random.rand(31,2),30)
</snippet></ROW><ROW><id>7092439</id><snippet>[ 0.47500019 -0.03182906 -0.46597523  0.7479451   0.12580804 -0.36311644
  0.06406616 -0.29641905 -0.39982319 -0.98493049 -0.4431009  -0.29506693
 -0.25931983  0.67831564 -0.80676608 -0.53007712  0.63448069  0.67457029
  0.25457744 -0.82095266 -0.27461275 -0.91244341 -0.69530798 -0.69023852
  0.18840807  0.49891863  0.52417747  0.06833423  0.83449866  0.47608894]
</snippet></ROW><ROW><id>7092439</id><snippet>normvecs</snippet></ROW><ROW><id>7093071</id><snippet>class Parent(object):
    [...]
    def _condition(self, whatever):
        return condition1
    def func(self, list):
        for item in list:
            if self._condition(...):
                do something

class Child(Parent):
    [...]
    def _condition(self, whatever):
        return condition1 and condition2
</snippet></ROW><ROW><id>7093308</id><snippet>translation.get_language_from_request</snippet></ROW><ROW><id>7093308</id><snippet>from django.utils import translation

def view(request):

    client_lang = translation.get_language_from_request(request)
</snippet></ROW><ROW><id>7093308</id><snippet>LocaleMiddleware</snippet></ROW><ROW><id>7093308</id><snippet>request.LANGUAGE_CODE</snippet></ROW><ROW><id>7093365</id><snippet>pyplot.errorbar()</snippet></ROW><ROW><id>7093371</id><snippet>def conjoin(gs):
    return [()] if not gs else (
        (val,) + suffix for val in gs[0]() for suffix in conjoin(gs[1:])
    )

def range3():
    return range(3)

print list(conjoin([range3, range3]))
</snippet></ROW><ROW><id>7093371</id><snippet>[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
</snippet></ROW><ROW><id>7093371</id><snippet>x = ""
def mutablerange():
    global x
    x += "x"
    return [x + str(i) for i in range(3)]

print list(conjoin([range3, mutablerange]))
</snippet></ROW><ROW><id>7093371</id><snippet>[(0, 'x0'), (0, 'x1'), (0, 'x2'), (1, 'xx0'), (1, 'xx1'), (1, 'xx2'), (2, 'xxx0'), (2, 'xxx1'), (2, 'xxx2')]
</snippet></ROW><ROW><id>7093371</id><snippet>itertools.product</snippet></ROW><ROW><id>7093371</id><snippet>x = ""
print list(itertools.product(range3(), mutablerange()))
</snippet></ROW><ROW><id>7093371</id><snippet>[(0, 'x0'), (0, 'x1'), (0, 'x2'), (1, 'x0'), (1, 'x1'), (1, 'x2'), (2, 'x0'), (2, 'x1'), (2, 'x2')]
</snippet></ROW><ROW><id>7093371</id><snippet>itertools.product</snippet></ROW><ROW><id>7093699</id><snippet>/RequestServlet/*</snippet></ROW><ROW><id>7093699</id><snippet>/servlets</snippet></ROW><ROW><id>7093699</id><snippet>/RequestServlet</snippet></ROW><ROW><id>7094063</id><snippet>wx.GetKeyState(int id)</snippet></ROW><ROW><id>7094063</id><snippet>if wx.GetKeyState(wx.WXK_CONTROL):
    # open in new tab
else:
    # open in new windows
</snippet></ROW><ROW><id>7094285</id><snippet>import ctypes
pp = ctypes.string_at(msg.payload, msg.payloadlen)
</snippet></ROW><ROW><id>7094628</id><snippet>asksaveasfilename()</snippet></ROW><ROW><id>7094628</id><snippet>import Tkinter, Tkconstants, tkFileDialog

class TkFileDialogExample(Tkinter.Frame):

    def __init__(self, root):

        Tkinter.Frame.__init__(self, root)
        button_opt = {'fill': Tkconstants.BOTH, 'padx': 5, 'pady': 5}
        Tkinter.Button(self, text='asksaveasfilename', command=self.asksaveasfilename).pack(**button_opt)

        self.file_opt = options = {}
        options['filetypes'] = [('all files', '.*'), ('text files', '.txt')]
        options['initialfile'] = 'myfile.txt'
        options['parent'] = root

    def asksaveasfilename(self):
        filename = tkFileDialog.asksaveasfilename(**self.file_opt)

        if filename:
            return open(filename, 'w')

if __name__=='__main__':
    root = Tkinter.Tk()
    TkFileDialogExample(root).pack()
    root.mainloop()
</snippet></ROW><ROW><id>7094867</id><snippet>curl -d '[{"channel":"/meta/connect","connectionType":"xhr-streaming","id":"15","clientId":"14799ac3-a0ac-43ab-8bb6-baad56886e11"}]' "http://ttpush.fxstreet.com/http_push/connect"
</snippet></ROW><ROW><id>7095115</id><snippet>accept()</snippet></ROW><ROW><id>7095115</id><snippet>blocking call</snippet></ROW><ROW><id>7095115</id><snippet>Bad Idea</snippet></ROW><ROW><id>7095115</id><snippet>accept()</snippet></ROW><ROW><id>7095772</id><snippet>from subprocess import call # call runs an external program and waits for it to quit

for command in ("samtools merge filename.bam file1.sorted.bam file2.sorted.bam file3.sorted.bam file4.sorted.bam", 
                "samtools index filename.bam", 
                "samtools idxstats filename.bam &gt; filename.txt", 
                "samtools pileup -vcf path/filename.fa filename_sorted.bam"):
    # shell=True is so you can handle redirects like in the 3rd command
    call(command, shell=True) 
</snippet></ROW><ROW><id>7096022</id><snippet>unique_ranked_collection</snippet></ROW><ROW><id>7096022</id><snippet>non_unique_ranked_collection</snippet></ROW><ROW><id>7096022</id><snippet>&gt;&gt;&gt; obj = unique_ranked_collection()
&gt;&gt;&gt; isinstance(obj, non_unique_ranked_collection)
True
</snippet></ROW><ROW><id>7096022</id><snippet>non_unique_collection.overlap()</snippet></ROW><ROW><id>7096022</id><snippet>unique_ranked_collection</snippet></ROW><ROW><id>7096022</id><snippet>unique_collection.overlap()</snippet></ROW><ROW><id>7096022</id><snippet>unique_ranked_collection</snippet></ROW><ROW><id>7096022</id><snippet>class unique_collection(non_unique_collection):

    # ...

    def overlap(self, other):
        if not isinstance(other, unique_ranked_collection):
            raise TypeError('expected an unique_ranked_collection')
        return super(unique_collection, self).overlap(other)
</snippet></ROW><ROW><id>7096172</id><snippet>csv</snippet></ROW><ROW><id>7096172</id><snippet>from csv import writer as csvwriter, reader as cvsreader
from os import rename # add ', remove' on Windows

with open(infilename) as infile:
    csvr = csvreader(infile)
    with open(outfilename, 'wb') as outfile:
        csvw = csvwriter(outfile)
        for row in csvr:
            # do whatever to get the username / password
            # for this row here
            row.append(username)
            row.append(password)
            csvw.writerow(row)
            # or 'csvw.writerow(row + [username, password])' if you want one line

# only on Windows
# remove(infilename) 
rename(outfilename, infilename)
</snippet></ROW><ROW><id>7096183</id><snippet>from django.db.models import manager
</snippet></ROW><ROW><id>7096183</id><snippet>objects = manager.Manager()
</snippet></ROW><ROW><id>7096183</id><snippet>class Site(models.Model):
    name = models.CharField(max_length=200)
    prefix = models.CharField(max_length=1)
    secret = models.CharField(max_length=255)

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>7096183</id><snippet>class Site(models.Model):
    name = models.CharField(max_length=200)
    prefix = models.CharField(max_length=1)
    secret = models.CharField(max_length=255)

    objects = manager.Manager()

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>7096244</id><snippet>dir</snippet></ROW><ROW><id>7096608</id><snippet>/opt/local/bin/python2.7
</snippet></ROW><ROW><id>7096629</id><snippet>if len(l1) != 8 or len([n for n in l1 if n not in (1, 0)]) != 0:
  raise ValueError('Invalid entries or incorrect length')
</snippet></ROW><ROW><id>7096704</id><snippet>A*B[:,np.newaxis]
</snippet></ROW><ROW><id>7096704</id><snippet>In [47]: A=np.arange(24).reshape(2,3,4)

In [48]: B=np.arange(3)

In [49]: A*B[:,np.newaxis]
Out[49]: 
array([[[ 0,  0,  0,  0],
        [ 4,  5,  6,  7],
        [16, 18, 20, 22]],

       [[ 0,  0,  0,  0],
        [16, 17, 18, 19],
        [40, 42, 44, 46]]])
</snippet></ROW><ROW><id>7096704</id><snippet>B[:,np.newaxis]</snippet></ROW><ROW><id>7096704</id><snippet>A</snippet></ROW><ROW><id>7096704</id><snippet>A</snippet></ROW><ROW><id>7097001</id><snippet>dicts = {'a':1, 'b':2}, {'x':98, 'y':99}
new_dict = dict(sum(list(d.items()) for d in dicts, []))
</snippet></ROW><ROW><id>7097001</id><snippet>new_dict = list({'a':1, 'b':2}.items()) + list({'x':98, 'y':99}.items())
</snippet></ROW><ROW><id>7097001</id><snippet>items</snippet></ROW><ROW><id>7097001</id><snippet>list</snippet></ROW><ROW><id>7097001</id><snippet>+</snippet></ROW><ROW><id>7097001</id><snippet>list</snippet></ROW><ROW><id>7097001</id><snippet>update</snippet></ROW><ROW><id>7097001</id><snippet>copy</snippet></ROW><ROW><id>7097001</id><snippet># doesn't change the original dicts
new_dict = {'a':1, 'b':2}.copy()
new_dict.update({'x':98, 'y':99})
</snippet></ROW><ROW><id>7097774</id><snippet>test</snippet></ROW><ROW><id>7097774</id><snippet>attr</snippet></ROW><ROW><id>7097774</id><snippet>t</snippet></ROW><ROW><id>7097774</id><snippet>class test:
    def __init__(self):
        self.attrs ={'attr':'hello'}
    def __getattr__(self, name):
        if name in self.attrs:
            return self.attrs[name]
        else:
            raise AttributeError

t = test()
print t.attr
</snippet></ROW><ROW><id>7097981</id><snippet>replace = r'\g&lt;1&gt;' + newVersion + r'\2'
</snippet></ROW><ROW><id>7097981</id><snippet>replace = "\\101.20.01\\2"
</snippet></ROW><ROW><id>7098068</id><snippet>nx.algorithms.components.attracting_components</snippet></ROW><ROW><id>7098160</id><snippet>for</snippet></ROW><ROW><id>7098160</id><snippet>L</snippet></ROW><ROW><id>7098160</id><snippet>x</snippet></ROW><ROW><id>7098160</id><snippet>L</snippet></ROW><ROW><id>7098160</id><snippet>[3, 3]</snippet></ROW><ROW><id>7098160</id><snippet>d</snippet></ROW><ROW><id>7098160</id><snippet>x</snippet></ROW><ROW><id>7098160</id><snippet>3 in d</snippet></ROW><ROW><id>7098160</id><snippet>d[3]</snippet></ROW><ROW><id>7098160</id><snippet>x</snippet></ROW><ROW><id>7098160</id><snippet>3 in d</snippet></ROW><ROW><id>7098160</id><snippet>d[3]</snippet></ROW><ROW><id>7098475</id><snippet>fruits.remove(Fruit('Pineapple', 4))  
</snippet></ROW><ROW><id>7098475</id><snippet>Traceback (most recent call last):
...
    fruits.remove(Fruit('Pineapple', 4))  #error
  File "/tmp/kiwi/ui/objectlist.py", line 1651, in remove
    raise ValueError("instance %r is not in the list" % instance)
ValueError: instance &lt;__main__.Fruit instance at 0x90066cc&gt; is not in the list
</snippet></ROW><ROW><id>7098475</id><snippet>instance</snippet></ROW><ROW><id>7098475</id><snippet>.remove</snippet></ROW><ROW><id>7098475</id><snippet>ObjectList</snippet></ROW><ROW><id>7098475</id><snippet>Fruit(...)</snippet></ROW><ROW><id>7098475</id><snippet>new_fruit = Fruit('Pineapple', 4) # save this instance as new_fruit
fruits.append(new_fruit) # append this instance to the list
fruits.remove(new_fruit) # take this instance out ... success!

assert new_fruit is Fruit('Pineapple', 4) # False
</snippet></ROW><ROW><id>7098475</id><snippet>fruits.remove(Fruit('Pineapple', 4))</snippet></ROW><ROW><id>7098475</id><snippet>fruits.remove(fruits[1])
</snippet></ROW><ROW><id>7098475</id><snippet>def remove_fruit(objlist, instance):
    objlist.remove(instance)

fruits.connect('double-click', remove_fruit)
</snippet></ROW><ROW><id>7098511</id><snippet>while True:
    try:
        #your code
    except ValueError:
        #reset variables if necesssary
        pass #if no other code is needed
    else:
        break
</snippet></ROW><ROW><id>7098605</id><snippet>value = u'\u2019'.decode( 'utf-8', 'ignore' )
</snippet></ROW><ROW><id>7098605</id><snippet>someunicodestring.decode</snippet></ROW><ROW><id>7098605</id><snippet>ascii</snippet></ROW><ROW><id>7098605</id><snippet>decode</snippet></ROW><ROW><id>7098605</id><snippet>value = u'\u2019'.encode('utf-8')
</snippet></ROW><ROW><id>7098605</id><snippet>ignore</snippet></ROW><ROW><id>7098678</id><snippet>re.S</snippet></ROW><ROW><id>7098678</id><snippet>import re
def GetTheSentences(infile):
     with open(infile) as fp:
         for result in re.findall('DELIMITER1(.*?)DELIMITER2', fp.read(), re.S):
             print result
# extract me
# extract me
# extract me
</snippet></ROW><ROW><id>7098678</id><snippet>.*?</snippet></ROW><ROW><id>7098699</id><snippet>interval</snippet></ROW><ROW><id>7098699</id><snippet>pyinterval</snippet></ROW><ROW><id>7098736</id><snippet>thumbnail</snippet></ROW><ROW><id>7098736</id><snippet>im.mode == 'P'</snippet></ROW><ROW><id>7098736</id><snippet>from PIL import Image
im = Image.open(fn)
im = im.convert('RGB')
im.thumbnail(size, Image.ANTIALIAS)
</snippet></ROW><ROW><id>7099038</id><snippet>a = ('id', ('name', ('name_float_fml',)), ('user', ('email',)), ('user', ('last_login',)))
b = (('baz', ('bing', ('fizz', 'frozz',('frazz', ('fry', 'bleep', 'blop'))))), ('baz', ('zap', ('zang',))), 'foo', 'bar')

def preserve_path(value):
    if len(value) == 2 and isinstance(value[1], (list, tuple)):
        return [value]
    else:
        return value

def flatten_group(my_list):
    d = {}
    for item in my_list:
        # Only items with one string, followed by one tuple represent a path
        # segment. In all other situations, strings are leaves.
        if isinstance(item, (list, tuple)) and len(item) == 2:
            key, value = item
            if key in d:
                d[key].extend(flatten_group(preserve_path(value)))
            else:
                d[key] = preserve_path(list(flatten_group(value)))
        else:
            yield item

    for item in d.iteritems():
        yield item

print list(flatten_group(a))
# ['id', ('name', ['name_float_fml']), ('user', ['email', 'last_login'])]
print list(flatten_group(b))
# ['foo', 'bar', ('baz', [['bing', ('fizz', 'frozz', ('frazz', ('fry', 'bleep', 'blop')))], ('zap', ['zang'])])]
</snippet></ROW><ROW><id>7099120</id><snippet>a = [1,8,3]
</snippet></ROW><ROW><id>7099120</id><snippet>dir([])
</snippet></ROW><ROW><id>7099120</id><snippet>for x in a:
    print x

y = [x ** 2 for x in a]
</snippet></ROW><ROW><id>7099342</id><snippet>def listdir_nohidden(path):
    for f in os.listdir(path):
        if not f.startswith('.'):
            yield f
</snippet></ROW><ROW><id>7099342</id><snippet>def listdir_nohidden(path):
    return glob.glob(os.path.join(path, '*'))
</snippet></ROW><ROW><id>7099342</id><snippet>'.'</snippet></ROW><ROW><id>7099564</id><snippet>dup2()</snippet></ROW><ROW><id>7099564</id><snippet>os.dup2()</snippet></ROW><ROW><id>7099564</id><snippet># simplified version of distutils.ccompiler.CCompiler.has_function
# that actually removes its temporary files.
def hasfunction(cc, funcname):
    tmpdir = tempfile.mkdtemp(prefix='hg-install-')
    devnull = oldstderr = None
    try:
        try:
            fname = os.path.join(tmpdir, 'funcname.c')
            f = open(fname, 'w')
            f.write('int main(void) {\n')
            f.write('    %s();\n' % funcname)
            f.write('}\n')
            f.close()
            # Redirect stderr to /dev/null to hide any error messages
            # from the compiler.
            # This will have to be changed if we ever have to check
            # for a function on Windows.
            devnull = open('/dev/null', 'w')
            oldstderr = os.dup(sys.stderr.fileno())
            os.dup2(devnull.fileno(), sys.stderr.fileno())
            objects = cc.compile([fname], output_dir=tmpdir)
            cc.link_executable(objects, os.path.join(tmpdir, "a.out"))
        except:
            return False
        return True
    finally:
        if oldstderr is not None:
            os.dup2(oldstderr, sys.stderr.fileno())
        if devnull is not None:
            devnull.close()
        shutil.rmtree(tmpdir)
</snippet></ROW><ROW><id>7100084</id><snippet>class Parent():
   def loadPage(self, pageTitle):
      # do stuff
      self.customFunc()
      # do other stuff

   def customFunc(self):
      pass

class Child(Parent):

   def customFunc(self):
      # do the child stuff
</snippet></ROW><ROW><id>7100189</id><snippet>exportselection</snippet></ROW><ROW><id>7100189</id><snippet>textwidget.get('sel.first', 'sel.last')</snippet></ROW><ROW><id>7100189</id><snippet>get</snippet></ROW><ROW><id>7100189</id><snippet>selection_get</snippet></ROW><ROW><id>7100189</id><snippet>selection_get</snippet></ROW><ROW><id>7100202</id><snippet>import cPickle as pickle
with open('data.p', 'wb') as fp:
    pickle.dump(data, fp)
</snippet></ROW><ROW><id>7100202</id><snippet>with open('data.p', 'rb') as fp:
    data = pickle.load(fp)
</snippet></ROW><ROW><id>7100202</id><snippet>import json
with open('data.json', 'wb') as fp:
    json.dump(data, fp)
</snippet></ROW><ROW><id>7100202</id><snippet>with open('data.json', 'rb') as fp:
    data = json.load(fp)
</snippet></ROW><ROW><id>7100256</id><snippet>&gt;&gt;&gt; l = [('text-1','xxx'), ('img-1','iii'), ('img-2','jjj'), ('text-2','xxx')]
&gt;&gt;&gt; [t for t in l if t[0].startswith('img')]
[('img-1', 'iii'), ('img-2', 'jjj')]
</snippet></ROW><ROW><id>7100256</id><snippet>&gt;&gt;&gt; filter(lambda x: x[0].startswith('img'), l)
[('img-1', 'iii'), ('img-2', 'jjj')]
</snippet></ROW><ROW><id>7100256</id><snippet>[{expression} for {item_var_or_vars} in {iterable} if {boolean_expression}]</snippet></ROW><ROW><id>7100256</id><snippet>new_list = []
for {item_var_or_vars} in {iterable}:
    if {boolean_expression}:
        new_list.append({expression})
</snippet></ROW><ROW><id>7100256</id><snippet>if {boolean_expression}</snippet></ROW><ROW><id>7100256</id><snippet>filter</snippet></ROW><ROW><id>7100256</id><snippet>lambda</snippet></ROW><ROW><id>7100256</id><snippet>def keep_this_element(element):
    return element[0].startswith('img')   # returns True for ('img...', '...')

new_list = filter(keep_this_element, l)   # keeps only elements that return True
</snippet></ROW><ROW><id>7100346</id><snippet>attach_data.emailID</snippet></ROW><ROW><id>7100346</id><snippet>EXPLAIN</snippet></ROW><ROW><id>7100346</id><snippet>attach_data.emailId</snippet></ROW><ROW><id>7100346</id><snippet>HASH</snippet></ROW><ROW><id>7100346</id><snippet>LIMIT</snippet></ROW><ROW><id>7100500</id><snippet>import subprocess
subprocess.call(cmd)
</snippet></ROW><ROW><id>7100500</id><snippet>shell=True</snippet></ROW><ROW><id>7100500</id><snippet>subprocess.call(cmd, shell=True)
</snippet></ROW><ROW><id>7100624</id><snippet>from BeautifulSoup import BeautifulStoneSoup
soup = BeautifulStoneSoup('&lt;?xml version="1.0" encoding="UTF-8"?&gt;')
# make some more soup
</snippet></ROW><ROW><id>7100624</id><snippet>soup = BeautifulStoneSoup()
# make some more soup
soup.insert(0, '&lt;?xml version="1.0" encoding="UTF-8"?&gt;')
</snippet></ROW><ROW><id>7100624</id><snippet>soup = BeautifulStoneSoup('&lt;?xml version="1.0" encoding=""?&gt;') # &lt;- no encoding
mytag = Tag(soup, 'mytag')
soup.append(mytag)

print str(soup)
# "&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;mytag&gt;&lt;/mytag&gt;" 
# Wha!? :)
print soup.prettify(encoding='euc-jp')
# &lt;?xml version='1.0' encoding='euc-jp'?&gt;
# &lt;mytag&gt;
# &lt;/mytag&gt;
</snippet></ROW><ROW><id>7100681</id><snippet>&gt;&gt;&gt; def rolling_window(a, size):
...     shape = a.shape[:-1] + (a.shape[-1] - size + 1, size)
...     strides = a.strides + (a. strides[-1],)
...     return numpy.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
... 
</snippet></ROW><ROW><id>7100681</id><snippet>&gt;&gt;&gt; a = numpy.arange(10)
&gt;&gt;&gt; numpy.random.shuffle(a)
&gt;&gt;&gt; a
array([7, 3, 6, 8, 4, 0, 9, 2, 1, 5])
&gt;&gt;&gt; rolling_window(a, 3) == [8, 4, 0]
array([[False, False, False],
       [False, False, False],
       [False, False, False],
       [ True,  True,  True],
       [False, False, False],
       [False, False, False],
       [False, False, False],
       [False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>7100681</id><snippet>all</snippet></ROW><ROW><id>7100681</id><snippet>&gt;&gt;&gt; numpy.all(rolling_window(a, 3) == [8, 4, 0], axis=1)
array([False, False, False,  True, False, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>7100681</id><snippet>&gt;&gt;&gt; bool_indices = numpy.all(rolling_window(a, 3) == [8, 4, 0], axis=1)
&gt;&gt;&gt; numpy.mgrid[0:len(bool_indices)][bool_indices]
array([3])
</snippet></ROW><ROW><id>7100681</id><snippet>&gt;&gt;&gt; windows = rolling_window(a, 3)
&gt;&gt;&gt; sub = [8, 4, 0]
&gt;&gt;&gt; hits = numpy.ones((len(a) - len(sub) + 1,), dtype=bool)
&gt;&gt;&gt; for i, x in enumerate(sub):
...     hits &amp;= numpy.in1d(windows[:,i], [x])
... 
&gt;&gt;&gt; hits
array([False, False, False,  True, False, False, False, False], dtype=bool)
&gt;&gt;&gt; hits.nonzero()
(array([3]),)
</snippet></ROW><ROW><id>7101026</id><snippet>numpy.array_equal(a1, a2)</snippet></ROW><ROW><id>7101089</id><snippet>path</snippet></ROW><ROW><id>7101089</id><snippet>@app.route('/foo/&lt;path:encoded&gt;/bar/')</snippet></ROW><ROW><id>7101089</id><snippet>path</snippet></ROW><ROW><id>7101089</id><snippet>http://ex.com/foo/&lt;path:encoded&gt;/bar</snippet></ROW><ROW><id>7101089</id><snippet>encoded</snippet></ROW><ROW><id>7101398</id><snippet>abc.py</snippet></ROW><ROW><id>7101398</id><snippet>abc.py</snippet></ROW><ROW><id>7101398</id><snippet>if __name__ == '__main__':
    if len(sys.argv) &gt; 1:
        file_to_process = sys.argv[1]
    else:
        file_to_process = raw_input("Enter file to process: ").strip()
</snippet></ROW><ROW><id>7101491</id><snippet>print 'Content-Type: text/html; charset=UTF-8'
</snippet></ROW><ROW><id>7101570</id><snippet>filecmp.dircmp</snippet></ROW><ROW><id>7101570</id><snippet>diff_files</snippet></ROW><ROW><id>7101570</id><snippet>&gt;&gt;&gt; dc = filecmp.dircmp('dir1', 'dir2')
&gt;&gt;&gt; dc.diff_files
&lt;&lt;&lt; ['foo']
</snippet></ROW><ROW><id>7101570</id><snippet>difflib</snippet></ROW><ROW><id>7101878</id><snippet>def PrintEntryDetails(entry):
   print 'Video title: %s' % entry.media.title.text
   print 'Video published on: %s ' % entry.published.text
   print 'Video description: %s' % entry.media.description.text
   print 'Video category: %s' % entry.media.category[0].text
   print 'Video tags: %s' % entry.media.keywords.text
   print 'Video watch page: %s' % entry.media.player.url
   print 'Video flash player URL: %s' % entry.GetSwfUrl()
   print 'Video duration: %s' % entry.media.duration.seconds
</snippet></ROW><ROW><id>7102011</id><snippet>class Obj1(object):
    def __init__(self):
        self.list_of_obj2 = []
</snippet></ROW><ROW><id>7102204</id><snippet>next</snippet></ROW><ROW><id>7102204</id><snippet>next</snippet></ROW><ROW><id>7102204</id><snippet>__next__</snippet></ROW><ROW><id>7102204</id><snippet>next</snippet></ROW><ROW><id>7102204</id><snippet>StopIteration</snippet></ROW><ROW><id>7102204</id><snippet>next((i for i, v in enumerate(a) if i == 666), None)
</snippet></ROW><ROW><id>7102287</id><snippet>from module import function

def main():
    my_func = functon
    for i in sequence:
        my_func()
</snippet></ROW><ROW><id>7102317</id><snippet>cr.save()    # push a new context onto the stack
cr.scale(0.5, 0.5)    # scale the context by (x, y)
cr.set_source_surface(imagesurface, margin, margin)
cr.paint()
cr.restore()    # pop the context
</snippet></ROW><ROW><id>7102531</id><snippet>run</snippet></ROW><ROW><id>7102531</id><snippet>run</snippet></ROW><ROW><id>7102531</id><snippet>run</snippet></ROW><ROW><id>7102531</id><snippet>Runner</snippet></ROW><ROW><id>7102531</id><snippet>type</snippet></ROW><ROW><id>7102531</id><snippet>isinstance</snippet></ROW><ROW><id>7102531</id><snippet>run</snippet></ROW><ROW><id>7102531</id><snippet>node</snippet></ROW><ROW><id>7102531</id><snippet>node</snippet></ROW><ROW><id>7102531</id><snippet>run</snippet></ROW><ROW><id>7102531</id><snippet>node</snippet></ROW><ROW><id>7102531</id><snippet>isinstance</snippet></ROW><ROW><id>7102531</id><snippet>type</snippet></ROW><ROW><id>7102531</id><snippet>node</snippet></ROW><ROW><id>7102531</id><snippet>run</snippet></ROW><ROW><id>7102531</id><snippet>node</snippet></ROW><ROW><id>7102531</id><snippet>isinstance(obj, basestring)</snippet></ROW><ROW><id>7102531</id><snippet>type(obj) == str</snippet></ROW><ROW><id>7102531</id><snippet>iter</snippet></ROW><ROW><id>7102626</id><snippet>parser.add_argument('--secret', help=argparse.SUPPRESS)
</snippet></ROW><ROW><id>7102626</id><snippet>argparse suppress_help</snippet></ROW><ROW><id>7103444</id><snippet>KEY</snippet></ROW><ROW><id>7103444</id><snippet>CREATE TABLE `words` (`word` VARCHAR(15) NOT NULL, PRIMARY KEY(`word`))
</snippet></ROW><ROW><id>7103486</id><snippet>return jsonify(json_list = qryresult.all())
</snippet></ROW><ROW><id>7103486</id><snippet>serialize</snippet></ROW><ROW><id>7103486</id><snippet>def dump_datetime(value):
    """Deserialize datetime object into string form for JSON processing."""
    if value is None:
        return None
    return [value.strftime("%Y-%m-%d"), value.strftime("%H:%M:%S")]

class Foo(db.Model):
    # ... SQLAlchemy defs here..
    def __init__(self, ...):
       # self.foo = ...
       pass

    @property
    def serialize(self):
       """Return object data in easily serializeable format"""
       return {
           'id'         : self.id,
           'modified_at': dump_datetime(self.modified_at),
           # This is an example how to deal with Many2Many relations
           'many2many'  : self.serialize_many2many
       }
    @property
    def serialize_many2many(self):
       """
       Return object's relations in easily serializeable format.
       NB! Calls many2many's serialize property.
       """
       return [ item.serialize for item in self.many2many]
</snippet></ROW><ROW><id>7103486</id><snippet>return jsonify(json_list=[i.serialize for i in qryresult.all()])
</snippet></ROW><ROW><id>7103508</id><snippet>i = Import["http://i.stack.imgur.com/uEPqc.png"];
Inpaint[i, ColorNegate@Binarize@i, Method -&gt; "NavierStokes"]
</snippet></ROW><ROW><id>7103508</id><snippet>Inpaint[]</snippet></ROW><ROW><id>7103595</id><snippet>order = "l5,l4,l3,l2,q,y,k,k3,d1,z,p,c,b,d3,dt,N,n,a,h,v".split(',')

for key in order:
    print key, infos.get(key)#if infos is your dictionary
</snippet></ROW><ROW><id>7103595</id><snippet>print [(key, infos.get(key)) for key in order]
</snippet></ROW><ROW><id>7104026</id><snippet>event.listen(Site.words, 'append', test_event, retval = True)
</snippet></ROW><ROW><id>7104026</id><snippet>def test_event(target, value, initiator):
    try:
        return session.query(Word).filter(Word.word == value.word.lower()).one()
    except sqlalchemy.orm.exc.NoResultFound:
        return value 
</snippet></ROW><ROW><id>7104545</id><snippet>dict([(x,y) for y,x in enumerate('cbad')])
</snippet></ROW><ROW><id>7104545</id><snippet>s</snippet></ROW><ROW><id>7104545</id><snippet>d</snippet></ROW><ROW><id>7104545</id><snippet>d</snippet></ROW><ROW><id>7104665</id><snippet>config</snippet></ROW><ROW><id>7104665</id><snippet>config['MY_CONFIGURATION']</snippet></ROW><ROW><id>7104665</id><snippet>config.MY_CONFIGURATION</snippet></ROW><ROW><id>7105033</id><snippet>&lt;?xml ... ?&gt;</snippet></ROW><ROW><id>7105059</id><snippet>[(dat[0], dat[2]) for dat in all_data]</snippet></ROW><ROW><id>7105059</id><snippet>all_data</snippet></ROW><ROW><id>7105059</id><snippet>(ids, gds)</snippet></ROW><ROW><id>7105059</id><snippet>(ids, gds) = zip(*[(dat[0], dat[2]) for dat in all_data])
</snippet></ROW><ROW><id>7105059</id><snippet>(ids, gds) = zip(*all_data)[::2]
</snippet></ROW><ROW><id>7105059</id><snippet>ids</snippet></ROW><ROW><id>7105059</id><snippet>gds</snippet></ROW><ROW><id>7105059</id><snippet>(ids, gds) = map(list, zip(*all_data)[::2])
</snippet></ROW><ROW><id>7105059</id><snippet>zip(*something)</snippet></ROW><ROW><id>7105059</id><snippet>l = [[1, 2, 3],
     [4, 5, 6]]
</snippet></ROW><ROW><id>7105059</id><snippet>zip(*l)</snippet></ROW><ROW><id>7105059</id><snippet>zip(*l) == [(1, 4),
            (2, 5),
            (3, 6)]
</snippet></ROW><ROW><id>7105059</id><snippet>*</snippet></ROW><ROW><id>7105059</id><snippet>some_func(*some_list)</snippet></ROW><ROW><id>7105059</id><snippet>some_list</snippet></ROW><ROW><id>7105059</id><snippet>some_list</snippet></ROW><ROW><id>7105059</id><snippet>zip(*l)</snippet></ROW><ROW><id>7105059</id><snippet>zip([1, 2, 3], [4, 5, 6])</snippet></ROW><ROW><id>7105059</id><snippet>zip</snippet></ROW><ROW><id>7106193</id><snippet>while</snippet></ROW><ROW><id>7106193</id><snippet>queue.join()</snippet></ROW><ROW><id>7106193</id><snippet>queue.join()</snippet></ROW><ROW><id>7106318</id><snippet>dig = []
i = 0
while num &gt; 9:
    dig.append(num % 10)
    i += 1
    num /= 10
dig.append(num)
</snippet></ROW><ROW><id>7106318</id><snippet>dig = list(int(d) for d in str(num))
</snippet></ROW><ROW><id>7106318</id><snippet>123</snippet></ROW><ROW><id>7106318</id><snippet>'123'</snippet></ROW><ROW><id>7106318</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>7106318</id><snippet>dig = reversed(int(d) for d in str(num))
</snippet></ROW><ROW><id>7106318</id><snippet>len(str(num))</snippet></ROW><ROW><id>7106436</id><snippet>float("2,5".replace(',', '.'))</snippet></ROW><ROW><id>7106528</id><snippet>'\\b[a-z]{5}\\d{3}\\b'
</snippet></ROW><ROW><id>7106528</id><snippet>re</snippet></ROW><ROW><id>7106528</id><snippet>re.sub('[a-z]+(\d+)', '\\1', string)
</snippet></ROW><ROW><id>7106528</id><snippet>\1</snippet></ROW><ROW><id>7106528</id><snippet>1</snippet></ROW><ROW><id>7106528</id><snippet>\1</snippet></ROW><ROW><id>7106528</id><snippet>\\1</snippet></ROW><ROW><id>7106786</id><snippet>import os, os.path
# If you're on Python 2.5 or newer, use 'with'
# needs 'from __future__ import with_statement' on 2.5
fh=open('MyHtmlFile.html','w')
fh.write('&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;Lots of tables&lt;/title&gt;&lt;/head&gt;\r\n&lt;body&gt;\r\n')
# this will recursively descend the tree
for dirpath, dirname, filenames in os.walk(rootFolder):
    for filename in filenames:
        # again, use 'with' on Python 2.5 or newer
        infile = open(os.path.join(dirpath, filename))
        # this will format the lines and join them, then format them into the table
        # If you're on Python 2.6 or newer you could use 'str.format' instead
        fh.write('&lt;table&gt;\r\n%s\r\n&lt;/table&gt;' % 
                     '\r\n'.join('&lt;tr&gt;&lt;td&gt;%s&lt;/tr&gt;&lt;/td&gt;' % line for line in infile))
        infile.close()
fh.write('\r\n&lt;/body&gt;&lt;/html&gt;')
fh.close()
</snippet></ROW><ROW><id>7106802</id><snippet>print [line for id in searchTxtData for line in inFileData if id.strip() in line]
</snippet></ROW><ROW><id>7106802</id><snippet>ids = [id.strip() for id in open("file1.txt","r") if id.strip()]

with open("file2.txt","r") as dataFile:
    for line in dataFile:            
        if line.strip() and line.split()[0] in ids:
           print line
</snippet></ROW><ROW><id>7107127</id><snippet>Popen(["django-admin", "startproject", "%s" % your_name ], stdout=PIPE).communicate()</snippet></ROW><ROW><id>7107127</id><snippet>Popen(["python", "manage.py", "%s" % your_app_name ], stdout=PIPE).communicate()</snippet></ROW><ROW><id>7107127</id><snippet>with open("settings.py", 'r') as file:
    settings = file.readlines()

new_settings = []
for line in settings:
    if "INSTALLED APPS" in line:
        new_settings.append(line.replace("INSTALLED_APPS = (", "INSTALLED_APPS = (\n'%s'," % your_app_name))
    else:
        new_settings.append(line)
with open("settings.py", 'w') as file:
    file.write("".join(new_settings))
</snippet></ROW><ROW><id>7107151</id><snippet>from .utils.custom_modules import some_function
</snippet></ROW><ROW><id>7107151</id><snippet>__init__.py</snippet></ROW><ROW><id>7107151</id><snippet>utils</snippet></ROW><ROW><id>7107151</id><snippet>from mydjangoapp.utils.custom_modules import some_function</snippet></ROW><ROW><id>7107210</id><snippet>SetEnv DJANGO_SETTINGS_MODULE settings
</snippet></ROW><ROW><id>7107234</id><snippet>eval</snippet></ROW><ROW><id>7107234</id><snippet>pickle</snippet></ROW><ROW><id>7107234</id><snippet>if (UDPSock.sendto( pickle.dumps(a), addr)):
</snippet></ROW><ROW><id>7107234</id><snippet>data,addr = UDPSock.recvfrom(buf)
L = pickle.loads(data)
print repr(L) # prints array('i', [1, 3, 2])
</snippet></ROW><ROW><id>7107276</id><snippet>&lt;script type='text/javascript'&gt;
&lt;!--//--&gt;&lt;![CDATA[//&gt;&lt;!--
var arVersion = navigator.appVersion.split("MSIE")
var version = parseFloat(arVersion[1])

function fixPNG(myImage) 
{
    if ((version &gt;= 5.5) &amp;&amp; (version &lt; 7) &amp;&amp; (document.body.filters)) 
    {
       var imgID = (myImage.id) ? "id='" + myImage.id + "' " : ""
       var imgClass = (myImage.className) ? "class='" + myImage.className + "' " : ""
       var imgTitle = (myImage.title) ? 
                     "title='" + myImage.title  + "' " : "title='" + myImage.alt + "' "
       var imgStyle = "display:inline-block;" + myImage.style.cssText
       var strNewHTML = "&lt;span " + imgID + imgClass + imgTitle
                  + " style=\"" + "width:" + myImage.width 
                  + "px; height:" + myImage.height 
                  + "px;" + imgStyle + ";"
                  + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
                  + "(src=\'" + myImage.src + "\', sizingMethod='scale');\"&gt;&lt;/span&gt;"
       myImage.outerHTML = strNewHTML     
    }
}
//--&gt;&lt;!]]&gt;
&lt;/script&gt;
</snippet></ROW><ROW><id>7107276</id><snippet>print str(soup.findAll('script')[1])[:2000]
</snippet></ROW><ROW><id>7107276</id><snippet>soup = BeautifulSoup(
    urllib2.urlopen('http://www.velocidadcuchara.com/2011/08/helado-platano-light.html')
    .read()
    .replace('&lt;![CDATA[', '').replace('&lt;!]]&gt;', ''))
</snippet></ROW><ROW><id>7107319</id><snippet>zfill</snippet></ROW><ROW><id>7107319</id><snippet>&gt;&gt;&gt; c = (r'\U' + '000ee816').decode('unicode-escape')
&gt;&gt;&gt; c
u'\U000ee816'
</snippet></ROW><ROW><id>7107319</id><snippet>&gt;&gt;&gt; c[0], c[1]
(u'\udb7a', u'\udc16')
</snippet></ROW><ROW><id>7107319</id><snippet>&gt;&gt;&gt; c.encode('utf8')
'\xf3\xae\xa0\x96'
</snippet></ROW><ROW><id>7107346</id><snippet>for id, (a, b) in enumerate(itertools.izip(as, bs)):
  # do something with id, a and b
</snippet></ROW><ROW><id>7107509</id><snippet>format()</snippet></ROW><ROW><id>7107509</id><snippet>s = ('select count(*)'
     'from ept_inv e'
     'where e.ept_type = {device_type}'
     'and e.inv_id = {endpoint_id};')

sql_statement = sql_statement_format.format(
                    device_type=in_row[cs.DeviceType],
                    endpoint_id=in_row[cs.EndpointId])
</snippet></ROW><ROW><id>7107509</id><snippet>\</snippet></ROW><ROW><id>7107595</id><snippet>a.my_method</snippet></ROW><ROW><id>7107595</id><snippet>A.my_method</snippet></ROW><ROW><id>7107595</id><snippet>__get__()</snippet></ROW><ROW><id>7107595</id><snippet>A.my_method.__get__(a)</snippet></ROW><ROW><id>7107595</id><snippet>A.my_method</snippet></ROW><ROW><id>7107595</id><snippet>a</snippet></ROW><ROW><id>7107601</id><snippet>__getstate__</snippet></ROW><ROW><id>7107601</id><snippet>__setstate__</snippet></ROW><ROW><id>7107601</id><snippet>__getinitargs__</snippet></ROW><ROW><id>7108131</id><snippet>mylist[0][0]   # get the first character from the first item in the list
</snippet></ROW><ROW><id>7108131</id><snippet>mylist[0][:1]  # get up to the first character in the first item in the list
</snippet></ROW><ROW><id>7108201</id><snippet>from functools import wraps

def logging_decorator(fn):
    @wraps(fn)
    def wrapped(self, *a, **kw):
        if self.log:
            print("Calling %s.." % fn.__name__)
        return fn(self, *a, **kw)
    return wrapped

class Tricky(object):
    def __init__(self, log):
        self.log = log

    @logging_decorator
    def say_hi(self):
       print("Hello, world!")

i1 = Tricky(log=True)
i2 = Tricky(log=False)

i1.say_hi()
i2.say_hi()
</snippet></ROW><ROW><id>7108208</id><snippet>site-packages</snippet></ROW><ROW><id>7108208</id><snippet>Exscript</snippet></ROW><ROW><id>7108208</id><snippet>util</snippet></ROW><ROW><id>7108208</id><snippet>interact.py</snippet></ROW><ROW><id>7108276</id><snippet>from contextlib import contextmanager
@contextmanager
def common_handling():
    try:
        yield
    finally:
        # whatever your common handling is
</snippet></ROW><ROW><id>7108276</id><snippet>with common_handling():
    os.remove('/my/file')

with common_handling():
    os.chmod('/other/file', 0700)
</snippet></ROW><ROW><id>7108282</id><snippet>class a(object):
    b = 'a'
    c = 'd'

print dir(a)
</snippet></ROW><ROW><id>7108282</id><snippet>['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'b', 'c']
</snippet></ROW><ROW><id>7108282</id><snippet>print [i for i in dir(a) if not i.endswith('__')]
</snippet></ROW><ROW><id>7108282</id><snippet>__new__</snippet></ROW><ROW><id>7108485</id><snippet>template</snippet></ROW><ROW><id>7108485</id><snippet>for template in root.iterfind("template"):
    name = template.get("name")
    request = template.find(requst)
    password = template.findtext("request/password")
    username = ...
    ...
    # Do something with the values
</snippet></ROW><ROW><id>7108494</id><snippet>__init__</snippet></ROW><ROW><id>7108494</id><snippet>  def __init__(self, *component, **kwargs):

    self.name = kwargs.get('name')
    self.component = component

    self.lines = kwargs.get('lines', [])
</snippet></ROW><ROW><id>7108494</id><snippet>lines</snippet></ROW><ROW><id>7108494</id><snippet>name</snippet></ROW><ROW><id>7108494</id><snippet>*</snippet></ROW><ROW><id>7108494</id><snippet>*</snippet></ROW><ROW><id>7108494</id><snippet>**kwargs</snippet></ROW><ROW><id>7108494</id><snippet>get('name')</snippet></ROW><ROW><id>7108494</id><snippet>get('lines')</snippet></ROW><ROW><id>7108494</id><snippet>kwargs</snippet></ROW><ROW><id>7108494</id><snippet>get</snippet></ROW><ROW><id>7108494</id><snippet>None</snippet></ROW><ROW><id>7108494</id><snippet>self.name = None</snippet></ROW><ROW><id>7108494</id><snippet>    self.name = kwargs.get('name', 'defaultname')
</snippet></ROW><ROW><id>7108494</id><snippet>lines</snippet></ROW><ROW><id>7108517</id><snippet>argparse</snippet></ROW><ROW><id>7108517</id><snippet>parse_known_args</snippet></ROW><ROW><id>7108600</id><snippet>import re

t=re.search(r"(.+?)\\(.+)\\(.+)", reg)
t.groups()
('HKEY_LOCAL_MACHINE', 'SOFTWARE\\TT\\Tools\\SYS', 'exePath')
</snippet></ROW><ROW><id>7108806</id><snippet>string.split()</snippet></ROW><ROW><id>7109029</id><snippet>Bezier</snippet></ROW><ROW><id>7109029</id><snippet>def Bezier(x_n, p0, p3) :
    """ Calculating sampling points using rational bezier curve equation"""
    u = x_n
    p1 = p0
    p2 = p3
</snippet></ROW><ROW><id>7109029</id><snippet>plist</snippet></ROW><ROW><id>7109029</id><snippet>time</snippet></ROW><ROW><id>7109029</id><snippet>def time() :
    tlist = [0.0, 0.12, 0.16, 0.2, 0.31, 0.34, 0.38, 0.46, 0.51] # list of start time for the phonemes
    plist = [0.5, 0.1, 0.4, 0.35, 0.8, 0.6, 1.0, 0.2, 0.7, 0.9] # list of parameter values of the phonemes

    total_frames = math.floor(tlist[-1] / 0.04)
    t_u = 0.0
    i = 0
    while i &lt; len(tlist) - 1:
        # if the number is in the range
        # do the calculations and move to the next number
        if t_u &gt; tlist[i] and t_u &lt; tlist[i + 1] :
            print "\n The t_u value:", t_u, 'is between',
            print "start:", tlist[i], " and end: ", tlist[i+1]
            poly = poly_coeff(tlist[i], tlist[i + 1], t_u)
            Newton(poly, plist[i], plist[i+1])
            t_u = t_u + 0.04 # regular time interval

        # if the number is at the lower boundary of the range no need of calculation as u = 0
        elif t_u == tlist[i] :
            print "\n The t_u value:", t_u, 'is on the boundary of',
            print "start:", tlist[i], " and end: ", tlist[i+1]
            print "u : 0"
            Bezier(0, plist[i], plist[i+1])
            t_u = t_u + 0.04 # regular time interval

        # if the number is at the upper boundary of the range no need of calculation as u = 1
        elif t_u == tlist[i + 1] :
            print "\n The t_u value:", t_u, 'is on the boundary of',
            print "start:", tlist[i], " and end: ", tlist[i+1]
            print " u : 1"
            Bezier(1, plist[i], plist[i+1])
            t_u = t_u + 0.04 # regular time interval

        # if the number isn't in the range, move to the next range
        else :
            i += 1
</snippet></ROW><ROW><id>7109029</id><snippet>plist</snippet></ROW><ROW><id>7109029</id><snippet>plist</snippet></ROW><ROW><id>7109029</id><snippet>Newton</snippet></ROW><ROW><id>7109029</id><snippet>Bezier</snippet></ROW><ROW><id>7109029</id><snippet>Newton</snippet></ROW><ROW><id>7109029</id><snippet>def Newton(poly, p0, p3):
</snippet></ROW><ROW><id>7109029</id><snippet>    Bezier(x_n, p0, p3)
</snippet></ROW><ROW><id>7109188</id><snippet>def tester(text):
    line12 = text.splitlines()[11]
    print line12

def grab_data(year, rcvote):
    link = "XXX/%s/roll%03d.xml" % (year, rcvote)
    site = urllib2.urlopen(link)
    tester(site.read(100000))

while v:
    grab_data(year, rc)
    v -= 1
</snippet></ROW><ROW><id>7109287</id><snippet>tbw</snippet></ROW><ROW><id>7109287</id><snippet>formerGeometry = QtCore.QRect(tbw.geometry()) # storing previous geometry in order to be able to restore it later

hideAnimation = QtCore.QPropertyAnimation(tbw, "geometry")
hideAnimation.setDuration(2000) # chose the value that fits you
hideAnimation.setStartValue(formerGeometry)
#computing final geometry
endTopLeftCorner = QtCore.QPoint(tbw.pos() + QtCore.QPoint(0, tbw.height()))
finalGeometry = QtCore.QRect(endTopLeftCorner, QtCore.QSize(tbw.width(), 0))
hideAnimation.setEndValue(finalGeometry)

hideAnimation.start()
</snippet></ROW><ROW><id>7109657</id><snippet># default scale is 1 in your original case, scales with other cases:
widthscale = len(yvalues)/4 
figsize = (8*widthscale,6) # fig size in inches (width,height)
figure = pylab.figure(figsize = figsize) # set the figsize
</snippet></ROW><ROW><id>7109657</id><snippet>figure = pylab.figure()</snippet></ROW><ROW><id>7109734</id><snippet>depth</snippet></ROW><ROW><id>7109734</id><snippet>for name in list(names)[0:5]:</snippet></ROW><ROW><id>7110060</id><snippet>parse_args()</snippet></ROW><ROW><id>7110060</id><snippet>parser = argparse.ArgumentParser(description="Test")
parser.add_argument('command')

parameters = parser.parse_args()
cmd = parameters.command
</snippet></ROW><ROW><id>7110107</id><snippet>Queue.Empty</snippet></ROW><ROW><id>7110107</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>7110107</id><snippet>Queue.Queue</snippet></ROW><ROW><id>7110107</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>7110107</id><snippet>Queue.Empty</snippet></ROW><ROW><id>7110107</id><snippet>Queue</snippet></ROW><ROW><id>7110296</id><snippet>set</snippet></ROW><ROW><id>7110296</id><snippet>set</snippet></ROW><ROW><id>7110296</id><snippet>frozenset</snippet></ROW><ROW><id>7110428</id><snippet>  sudo easy_install Distribute 
</snippet></ROW><ROW><id>7110428</id><snippet>  sudo easy_install -U Distribute
</snippet></ROW><ROW><id>7110455</id><snippet>Test.a</snippet></ROW><ROW><id>7110455</id><snippet>a</snippet></ROW><ROW><id>7110455</id><snippet>a</snippet></ROW><ROW><id>7110455</id><snippet>Test.b</snippet></ROW><ROW><id>7110455</id><snippet>Test.a</snippet></ROW><ROW><id>7110455</id><snippet>a</snippet></ROW><ROW><id>7110455</id><snippet>f</snippet></ROW><ROW><id>7110455</id><snippet>Test.b</snippet></ROW><ROW><id>7110455</id><snippet>a</snippet></ROW><ROW><id>7110455</id><snippet>def a(x):
    print("Global A from {}".format(x))

class Test:

    def a(self, f=a):
        print("A")
        f("a")  # this will call the global method a()

    def b(self, f=None):
        f = f or a
        print("B")
        f("b")   # this will call the class method a()

t=Test()
t.b()
</snippet></ROW><ROW><id>7110542</id><snippet>A.__str__(self)</snippet></ROW><ROW><id>7110542</id><snippet>__str__()</snippet></ROW><ROW><id>7110542</id><snippet>class AMeta(type):
    def __str__(self):
        return "I am the truly remarkable class A"

class A(object):
    __metaclass__ = AMeta
    def __str__(self):
        return "I am an A instance"

print A
I am the truly remarkable class A
print A()
I am an A instance
</snippet></ROW><ROW><id>7110542</id><snippet>__repr__</snippet></ROW><ROW><id>7110574</id><snippet>xmlstring = cdoc.serialize('UTF-8', 2) 
</snippet></ROW><ROW><id>7110574</id><snippet>xmlstring = cdoc.serialize('UTF-8', 1) 
</snippet></ROW><ROW><id>7110634</id><snippet>python -c 'import os;os.environ.get('TNT_SERVER_URL')'
</snippet></ROW><ROW><id>7110634</id><snippet>python -c 'import os;os.environ.get("TNT_SERVER_URL")'
                                    ^              ^
</snippet></ROW><ROW><id>7110634</id><snippet>export</snippet></ROW><ROW><id>7110634</id><snippet>export TNT_SERVER_URL; python -c 'import os;os.environ.get("TNT_SERVER_URL")'
</snippet></ROW><ROW><id>7110833</id><snippet>thumbnail</snippet></ROW><ROW><id>7110833</id><snippet>ANTIALIAS</snippet></ROW><ROW><id>7110870</id><snippet>from email.header import decode_header
value, charset = decode_header(string_to_be_decoded)
</snippet></ROW><ROW><id>7110991</id><snippet>self._c_ctypes_test.init.restypes = ctypes.POINTER(SimpleStructure)
</snippet></ROW><ROW><id>7110991</id><snippet>self._c_ctypes_test.init.restype = ctypes.POINTER(SimpleStructure)
</snippet></ROW><ROW><id>7110991</id><snippet>self.simple_structure = ctypes.cast(
    self._c_ctypes_test.init(), ctypes.POINTER(SimpleStructure))
</snippet></ROW><ROW><id>7110991</id><snippet>ctypes.POINTER(SimpleStructure)</snippet></ROW><ROW><id>7110991</id><snippet>ctypes.POINTER(SimpleStructure)</snippet></ROW><ROW><id>7111093</id><snippet>import pylab
scores = [[ 82.,78.,    71.5,   76.,    79.5,   77.,    73.5,   70.5,   74.,    74.5 ],
[ 79. ,  75.75, 71.,   76.,   78.25, 73.25, 72.25 ,73.25, 74.75, 73.5 ],
[ 77.,   75.,   70.5,  73. ,  77.,   73.5,  71.75, 75.25, 76.75, 74.  ],
[ 76.,   74.75, 72.5,  72.25 ,75.25, 76.5,  73.5,  73.,   75.25, 75.75],
[ 75.,   72.5,  72.25, 74.5,  73.25, 73.25, 74.5,  73.25, 73.5,  76.5 ],
[ 74.5,  72.,   69.5,  73.25,  73.75,  72.,    76.75,  77.,    74.25,  76.5 ],
[ 72.5,   73.75,  72.75,  75.75,  78.,    76.75,  77.75,  78.75,  77.25,  74.  ],
[ 74.5,   74.25,  74.75,  78.75,  80.75,  79.25,  74.5,   75.,    76.25,  73.  ],
[ 75.5,   71.5,   71.75,  78.75,  80.25,  77.5,   75.,    73.25,  72.25,  72.75],
[ 77.5,   74.5,   72.,    77.75,  78.25,  74.,    76.75,  75.75,  74.25,  73.  ]]

fig = pylab.figure(frameon=False)
ax_size = [0,0,1,1]
fig.add_axes(ax_size)
pylab.imshow(scores,vmin=0, vmax=100, origin='lower')
pylab.axis('off')
## As you noted.
pylab.savefig('output.png',bbox_inches='tight', pad_inches=0)
</snippet></ROW><ROW><id>7111170</id><snippet>import os
if os.environ['SERVER_SOFTWARE'].startswith('Dev'):
    from google.appengine.api import urlfetch
    urlfetch.set_default_fetch_deadline(60)
</snippet></ROW><ROW><id>7111348</id><snippet>ForeignKey</snippet></ROW><ROW><id>7111348</id><snippet>RDBMS</snippet></ROW><ROW><id>7111348</id><snippet>code</snippet></ROW><ROW><id>7111348</id><snippet>from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import scoped_session, sessionmaker, relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
engine = create_engine('sqlite:///:memory:', echo=False)

Session = sessionmaker(bind=engine)

class TestAuditLog(Base):
    __tablename__ = 'TEST_AUDIT_LOG'
    id = Column(Integer, primary_key=True)
    comment = Column(String)

    entityId = Column('TEST_AUDIT_LOG', Integer, nullable=False,
                     # POINT-1
                     #ForeignKey('TEST.TS_TEST_ID', ondelete="CASCADE"),
                     )

    def __init__(self, comment):
        self.comment = comment

    def __repr__(self):
        return "&lt;TestAuditLog(id=%s entityId=%s, comment=%s)&gt;" % (self.id, self.entityId, self.comment)

class Test(Base):
    __tablename__ = 'TEST'
    id = Column('TS_TEST_ID', Integer, primary_key=True)
    name = Column(String)

    audits = relationship(TestAuditLog, backref='test',
                # POINT-2
                primaryjoin="Test.id==TestAuditLog.entityId",
                foreign_keys=[TestAuditLog.__table__.c.TEST_AUDIT_LOG],
                # POINT-3
                passive_deletes='all',
            )

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return "&lt;Test(id=%s, name=%s)&gt;" % (self.id, self.name)


Base.metadata.create_all(engine)

###################
## tests
session = Session()

# create test data
tests = [Test("test-" + str(i)) for i in range(3)]
_cnt = 0
for _t in tests:
    for __ in range(2):
        _t.audits.append(TestAuditLog("comment-" + str(_cnt)))
        _cnt += 1
session.add_all(tests)
session.commit()
session.expunge_all()
print '-'*80

# check test data, delete one Test
t1 = session.query(Test).get(1)
print "t: ", t1
print "t.a: ", t1.audits
session.delete(t1)
session.commit()
session.expunge_all()
print '-'*80

# check that audits are still in the DB for deleted Test
t1 = session.query(Test).get(1)
assert t1 is None
_q = session.query(TestAuditLog).filter(TestAuditLog.entityId == 1)
_r = _q.all()
assert len(_r) == 2
for _a in _r:
    print _a
</snippet></ROW><ROW><id>7111348</id><snippet>ON CASCADE SET NULL</snippet></ROW><ROW><id>7111534</id><snippet>import readline

def tab_completer(text, state):
    print "\ntext:", text

readline.parse_and_bind("tab: complete")
readline.set_completer(tab_completer)
raw_input('Prompt: ')
</snippet></ROW><ROW><id>7111624</id><snippet>mainloop</snippet></ROW><ROW><id>7111624</id><snippet>while True:
    event = event_queue.pop()
    event.process()
</snippet></ROW><ROW><id>7111624</id><snippet>run</snippet></ROW><ROW><id>7111624</id><snippet>event.process()</snippet></ROW><ROW><id>7111624</id><snippet>run</snippet></ROW><ROW><id>7111624</id><snippet>event.process()</snippet></ROW><ROW><id>7111624</id><snippet>update</snippet></ROW><ROW><id>7111624</id><snippet>update_idletasks</snippet></ROW><ROW><id>7111672</id><snippet>l</snippet></ROW><ROW><id>7111672</id><snippet>print 'Hex: ', hex(int(l, 2))[2:].zfill(2)
</snippet></ROW><ROW><id>7111738</id><snippet>Stream.filter</snippet></ROW><ROW><id>7111738</id><snippet>None</snippet></ROW><ROW><id>7111738</id><snippet>StreamListener</snippet></ROW><ROW><id>7111738</id><snippet>count</snippet></ROW><ROW><id>7111738</id><snippet>413</snippet></ROW><ROW><id>7111738</id><snippet>count</snippet></ROW><ROW><id>7111745</id><snippet>struct.unpack()</snippet></ROW><ROW><id>7111745</id><snippet>import struct
with open("filename.txt", "r") as f:
    for line in f:
        (coop_id, lat, lon, elev, state, name, c1, c2, c3, utc_offset
         ) = struct.unpack("6sx8sx9sx6sx2sx30sx6sx6sx6sx2s", line.strip())
        (lat, lon, elev) = map(float, (lat, lon, elev))
        utc_offset = int(utc_offset)
</snippet></ROW><ROW><id>7111779</id><snippet>__iter__</snippet></ROW><ROW><id>7111779</id><snippet>__getitem__</snippet></ROW><ROW><id>7111827</id><snippet>connection.queries</snippet></ROW><ROW><id>7112115</id><snippet>lsusb -vvv</snippet></ROW><ROW><id>7112115</id><snippet>vendor</snippet></ROW><ROW><id>7112115</id><snippet>product</snippet></ROW><ROW><id>7112405</id><snippet>x  0.000000 y  0.500000 x  0.120000 y  0.100000  ...
x1 0.040000 y1 0.700000 x1 0.080000 y1 0.740000  ...
</snippet></ROW><ROW><id>7112405</id><snippet>plot data us 1:2, data us 3:4, data us 5:6</snippet></ROW><ROW><id>7112405</id><snippet>awk '{for (i=1;i&lt;=NF;i++) arr[NR,i]=$i;} END{for (i=1;i&lt;=NF;i=i+2) {for (j=1;j&lt;=NR;j++) {printf "%f %f ",arr[j,i],arr[j,i+1]} print ""}}' datafile
</snippet></ROW><ROW><id>7112410</id><snippet>memcache</snippet></ROW><ROW><id>7112696</id><snippet>foo.value &lt;&lt; 1</snippet></ROW><ROW><id>7112696</id><snippet>foo.value &lt;&lt;= 1
</snippet></ROW><ROW><id>7112884</id><snippet>newlist.add(num1)
</snippet></ROW><ROW><id>7112916</id><snippet>libpython</snippet></ROW><ROW><id>7112916</id><snippet>libpython</snippet></ROW><ROW><id>7113061</id><snippet>def myfunction(first, second, third = None):
    if third is None:
        #just use first and second
    else:
        #use all three

myfunction(1, 2) # third will be None, so enter the 'if' clause
myfunction(3, 4, 5) # third isn't None, it's 5, so enter the 'else' clause
</snippet></ROW><ROW><id>7113466</id><snippet>x = sum(normal(size = 1000))
</snippet></ROW><ROW><id>7113466</id><snippet>x = sum(normal(size = 100000))
</snippet></ROW><ROW><id>7113466</id><snippet>25/100, 366.2 ms, 25/100, 364.4 ms, 25/100, 364.1 ms, 25/100, 361.7 ms, 
34/100, 362.1 ms,  0/100,  2.6 ms, 25/100, 357.6 ms, 41/100, 357.8 ms, 
25/100, 365.2 ms, 26/100, 362.7 ms, 25/100, 366.0 ms, 24/100, 355.7 ms, 
21/100, 360.3 ms, 21/100, 355.9 ms, 22/100, 362.3 ms, 36/100, 358.0 ms, 
</snippet></ROW><ROW><id>7113528</id><snippet>import re

compiled = re.compile(r"""
    .*?                                # Leading junk
    (?P&lt;ipaddress&gt;\d+\.\d+\.\d+\.\d+)  # IP address
    .*?                                # Trailing junk
    """, re.VERBOSE)
str = "IP 1.2.3.4 is currently trusted in the white list, but it is now using a new trusted certificate."
m = compiled.match(str)
print m.group("ipaddress")
</snippet></ROW><ROW><id>7113528</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; 
&gt;&gt;&gt; compiled = re.compile(r"""
...     .*?                                # Leading junk
...     (?P&lt;ipaddress&gt;\d+\.\d+\.\d+\.\d+)  # IP address
...     .*?                                # Trailing junk
...     """, re.VERBOSE)
&gt;&gt;&gt; str = "IP 1.2.3.4 is currently trusted in the white list, but it is now using a new trusted certificate."
&gt;&gt;&gt; m = compiled.match(str)
&gt;&gt;&gt; print m.group("ipaddress")
1.2.3.4
</snippet></ROW><ROW><id>7113528</id><snippet>&gt;&gt;&gt;&gt; str = "Peer 10.11.6.224 is currently trusted in the white list, but it is now using a new trusted certificate. Consider removing its likely outdated white list entry."
&gt;&gt;&gt;&gt; m = compiled.match(str)
&gt;&gt;&gt;&gt; print m.groupdict()
{'ipaddress': '10.11.6.224'}
</snippet></ROW><ROW><id>7113564</id><snippet>&gt;&gt;&gt; #I have a list within a list,
&gt;&gt;&gt; lol = [[1, 2, 42, 3], [4, 5, 6], [7, 42, 8]]
&gt;&gt;&gt; found = []
&gt;&gt;&gt; #iterate through one list,
&gt;&gt;&gt; for i in lol:
...     #in the inner list I want to search for a value
...     if 42 in i:
...         #if this value is present, place that list in a variable    
...         found.append(i)
... 
&gt;&gt;&gt; found
[[1, 2, 42, 3], [7, 42, 8]]
</snippet></ROW><ROW><id>7113624</id><snippet>counts = {}
mydict = {'a':[1,2,5], 'b': [1,2,10]}
for key,value in mydict.iteritems():
    counts[value[1]] = counts.get(value[1], 0) + 1
</snippet></ROW><ROW><id>7113624</id><snippet>from collections import defaultdict

# automatically start each count at zero
counts = defaultdict(int)
# we only need the values, not the keys
for value in mydict.itervalues(): 
    # add one to the count for this item
    counts[value[1]] += 1
</snippet></ROW><ROW><id>7113624</id><snippet># only on Python 2.7 or newer
from collections import Counter

counts = Counter(value[1] for value in mydict.itervalues())
</snippet></ROW><ROW><id>7113748</id><snippet>import re 
regex = re.compile("^##.*##\n$")
out = open("result.txt","w")
matchfound = True
inmatch =False
for line in open('myfile.txt'):
   if regex.match(line):
       matchfound = True
   else:
        matchfound = False
   if matchfound and not inmatch:
       inmatch = True
       content = []
   elif matchfound and inmatch:
       inmatch = False
       out.write ("".join(content))
   elif inmatch:
       content.append(line)
       out.write(line)
   else:
       out.write(line)
out.close()
</snippet></ROW><ROW><id>7113762</id><snippet>for ind in range(len(t)):
  i = t[ind]
  ...
</snippet></ROW><ROW><id>7113762</id><snippet>result = 0
</snippet></ROW><ROW><id>7113762</id><snippet>  result += w
</snippet></ROW><ROW><id>7113802</id><snippet>window</snippet></ROW><ROW><id>7113802</id><snippet>n</snippet></ROW><ROW><id>7113802</id><snippet>iterable</snippet></ROW><ROW><id>7113802</id><snippet>from collections import deque

def window(iterable, n=3):
    it = iter(iterable)
    d = deque(maxlen = n)
    for elem in it:
        d.append(elem)
        yield tuple(d)


print [x for x in window([1, 2, 3, 4, 5])]
# [(1,), (1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5)]
</snippet></ROW><ROW><id>7113802</id><snippet>from collections import deque
from itertools import islice

def window(iterable, n=3):
    it = iter(iterable)
    d = deque((next(it) for Null in range(n-1)), n)
    for elem in it:
        d.append(elem)
        yield tuple(d)


print [x for x in window([1, 2, 3, 4, 5])]
</snippet></ROW><ROW><id>7114057</id><snippet>gXmlData[path] = groups    
</snippet></ROW><ROW><id>7114084</id><snippet>groupby</snippet></ROW><ROW><id>7114084</id><snippet>from itertools import groupby
from operator import itemgetter

mylist = [['AB001', 22100],
          ['AB001', 32935],
          ['XC013', 99834],
          ['VD126', 18884],
          ['AB001', 4439],
          ['XC013', 86701]]

print [list(value) for key, value in groupby(sorted(mylist), key=itemgetter(0))]
</snippet></ROW><ROW><id>7114084</id><snippet>[[['AB001', 4439], ['AB001', 22100], ['AB001', 32935]], 
 [['VD126', 18884]], 
 [['XC013', 86701], ['XC013', 99834]]]
</snippet></ROW><ROW><id>7114357</id><snippet>os.exec*</snippet></ROW><ROW><id>7114357</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7114572</id><snippet>someXML = lxml.etree.XML(someString)
if ns is None:
      ns = {"m": someXML.tag.split("}")[0][1:]}
someid = someXML.xpath('.//m:ImportantThing//m:ID', namespaces=ns)
</snippet></ROW><ROW><id>7114572</id><snippet>tostring</snippet></ROW><ROW><id>7114572</id><snippet>&gt;</snippet></ROW><ROW><id>7114748</id><snippet>import os,sys
import glob

path= '/home/xxx/nearline/bamfiles'
bamfiles = glob.glob(path + '/*.bam')

for bamfile in bamfiles:
    fullpath = os.path.join(path,bamfile)
    txtfile = os.popen('/share/bin/samtools/samtools ' + 'view '+ fullpath)
    line=txtfile.readlines()
    print line
</snippet></ROW><ROW><id>7114817</id><snippet>__repr__()</snippet></ROW><ROW><id>7114817</id><snippet>__str__()</snippet></ROW><ROW><id>7114817</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
</snippet></ROW><ROW><id>7114817</id><snippet>&gt;&gt;&gt; now
Out: datetime.datetime(2011, 8, 18, 15, 10, 29, 827606)
</snippet></ROW><ROW><id>7114817</id><snippet>&gt;&gt;&gt; print now
Out: 2011-08-18 15:10:29.827606
</snippet></ROW><ROW><id>7114841</id><snippet>Qt::FontRole</snippet></ROW><ROW><id>7114841</id><snippet>def should_be_bolded(self, item):
    return 1 # your condition checks
</snippet></ROW><ROW><id>7114841</id><snippet>def BuildBranch(...):
    thisWidget = Branch(i)
    if self.should_be_bolded(thisWidget):
        thisWidget.setData(self.createBoldFont(), Qt.FontRole)

def createFont(self):
    if self.font: return self.font
    self.font = QFont()
    self.font.setWeight(QFont.Bold)
    return self.font
</snippet></ROW><ROW><id>7114841</id><snippet>class Branch(QStandardItem):
    """Branch element"""
    def __init__(self, label, uri = None, tag = None):
        QStandardItem.__init__(self, label)
        self.uri = uri
        if self.should_be_bolded():
            self.bold_myself()
</snippet></ROW><ROW><id>7114841</id><snippet>should_be_bolded</snippet></ROW><ROW><id>7114841</id><snippet>bold_myself</snippet></ROW><ROW><id>7114841</id><snippet>QAbstractItemModel</snippet></ROW><ROW><id>7114841</id><snippet>QStandardItemModel</snippet></ROW><ROW><id>7114841</id><snippet>Qt.FontRole</snippet></ROW><ROW><id>7114930</id><snippet>Library.objects.filter(books__interesting=True).annotate(num_interesting_books=Count('pk')).aggregate(max=Max('num_interesting_books'))
</snippet></ROW><ROW><id>7114930</id><snippet>select max(a.num_interesting_books) as max
from (select demo_library.*, count(demo_library.id) as num_interesting_books
      from demo_library
      inner join demo_library_books on (demo_library.id = demo_library_books.library_id)
      inner join demo_book on (demo_library_books.book_id = demo_book.id)
      where demo_book.interesting=TRUE
      group by demo_library.id) as a
</snippet></ROW><ROW><id>7115031</id><snippet>fileConfig</snippet></ROW><ROW><id>7115031</id><snippet>settings.py</snippet></ROW><ROW><id>7115041</id><snippet>load_message</snippet></ROW><ROW><id>7115041</id><snippet>grid_forget</snippet></ROW><ROW><id>7115063</id><snippet>cat</snippet></ROW><ROW><id>7115063</id><snippet>ssh</snippet></ROW><ROW><id>7115063</id><snippet>ssh ${USER}@${hadoopGateway} hadoop fs -put - ${targetDir}/foo &lt; foo
</snippet></ROW><ROW><id>7115063</id><snippet>foo='foo'
subprocess.check_call(['ssh',
                       os.environ['USER']+'@'+hadoopGateway,
                       'hadoop', 'fs', '-put', '-', inputArgs.targetDir+'/'+foo],
                      stdin=open(foo, 'r'))
</snippet></ROW><ROW><id>7115315</id><snippet>^(?=.*\d)(?=.*[a-zA-Z])[a-zA-Z\d]{6,8}$
</snippet></ROW><ROW><id>7115315</id><snippet>^              //The Start of the string
(?=.*\d)       //(?= ) is a look around. Meaning it
               //checks that the case is matched, but
               //doesn't capture anything
               //In this case, it's looking for any
               //chars followed by a digit.
(?=.*[a-zA-Z]) //any chars followed by a char.
[a-zA-Z\d]{6,8}//6-8 digits or chars.
$              //The end of the string.
</snippet></ROW><ROW><id>7115471</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>7115471</id><snippet>overnover</snippet></ROW><ROW><id>7115471</id><snippet>tabulate</snippet></ROW><ROW><id>7115471</id><snippet>def tabulate(function, start=0):
    "Return function(0), function(1), ..."
    return imap(function, count(start))
</snippet></ROW><ROW><id>7115471</id><snippet>count</snippet></ROW><ROW><id>7115471</id><snippet>step</snippet></ROW><ROW><id>7115471</id><snippet>def tabulate(function, start=0, step=1):
    "Return function(0), function(0+step), ..."
    return imap(function, count(start, step))
</snippet></ROW><ROW><id>7115471</id><snippet>overnover</snippet></ROW><ROW><id>7115471</id><snippet>def overnover(fn, val):
    while True:
        val = fn(val)
        val = (yield val) or val
</snippet></ROW><ROW><id>7115639</id><snippet>marshal</snippet></ROW><ROW><id>7115639</id><snippet>cPickle</snippet></ROW><ROW><id>7115639</id><snippet>pickle</snippet></ROW><ROW><id>7115639</id><snippet>webob</snippet></ROW><ROW><id>7115639</id><snippet>simplejson</snippet></ROW><ROW><id>7115639</id><snippet>django</snippet></ROW><ROW><id>7115639</id><snippet>PyYAML</snippet></ROW><ROW><id>7115685</id><snippet>return any(childName == c.name for c in self.children)
</snippet></ROW><ROW><id>7115685</id><snippet>return childName in self.childNames</snippet></ROW><ROW><id>7115846</id><snippet>&gt;&gt;&gt; "abc\n123"
"abc\n123"
&gt;&gt;&gt; print "abc\n123"
abc
123
</snippet></ROW><ROW><id>7115957</id><snippet>import numpy as np

wall = np.zeros((10,10),dtype=np.int)
block = np.arange(1,7).reshape(2,3)

x = 2
y = 3
wall[x:x+block.shape[0], y:y+block.shape[1]] = block
</snippet></ROW><ROW><id>7115957</id><snippet>&gt;&gt;&gt; wall
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 2, 3, 0, 0, 0, 0],
       [0, 0, 0, 4, 5, 6, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
</snippet></ROW><ROW><id>7115989</id><snippet>python.exe C:\full\path\to\main.py</snippet></ROW><ROW><id>7115989</id><snippet>python.exe</snippet></ROW><ROW><id>7116227</id><snippet>change_Tag</snippet></ROW><ROW><id>7116227</id><snippet>script</snippet></ROW><ROW><id>7116309</id><snippet>import scipy.io as sio
import gzip

f_out = gzip.open(filepath_dot_gz, 'wb')
sio.savemat(f_out, do_compression = True)
</snippet></ROW><ROW><id>7116356</id><snippet>models.py</snippet></ROW><ROW><id>7116356</id><snippet>a.py</snippet></ROW><ROW><id>7116356</id><snippet>a.py</snippet></ROW><ROW><id>7116356</id><snippet>models.py</snippet></ROW><ROW><id>7116395</id><snippet>len(phrase)</snippet></ROW><ROW><id>7116395</id><snippet>&gt;&gt;&gt; "abc"[3:4]
''
</snippet></ROW><ROW><id>7116395</id><snippet>phrase = 'test'
for letter in phrase:
    text = ord(letter) - ord('a')
    ....
</snippet></ROW><ROW><id>7116473</id><snippet>var url = {{url}};
</snippet></ROW><ROW><id>7116473</id><snippet>var url = /this/url;
</snippet></ROW><ROW><id>7116473</id><snippet>var url = "{{url}}";
</snippet></ROW><ROW><id>7116473</id><snippet>var url = "{{url|escapejs}}";
</snippet></ROW><ROW><id>7116777</id><snippet>&gt;&gt;&gt; import cv, numpy                       # Comments added by me
&gt;&gt;&gt; mat = cv.CreateMat(3, 5, cv.CV_32FC1)  # make a 3x5 mat
&gt;&gt;&gt; cv.Set(mat, 7)                         # set the cells to 7
&gt;&gt;&gt; a = numpy.asarray(mat)                 # convert it to a numpy array
&gt;&gt;&gt; print a
[[ 7.  7.  7.  7.  7.]
 [ 7.  7.  7.  7.  7.]
 [ 7.  7.  7.  7.  7.]]
</snippet></ROW><ROW><id>7116777</id><snippet>numpy.asarray</snippet></ROW><ROW><id>7116925</id><snippet>__file__</snippet></ROW><ROW><id>7116925</id><snippet>__file__</snippet></ROW><ROW><id>7116925</id><snippet>sys.path</snippet></ROW><ROW><id>7116925</id><snippet>''</snippet></ROW><ROW><id>7116925</id><snippet>sys.path</snippet></ROW><ROW><id>7116925</id><snippet>sys.path</snippet></ROW><ROW><id>7116925</id><snippet>sys.path</snippet></ROW><ROW><id>7116925</id><snippet>sys.path</snippet></ROW><ROW><id>7116985</id><snippet>    class App:

  #some codes are omitted here

  def look(self, pic_url):
    top = Toplevel()
    more = More(top, pic_url)
</snippet></ROW><ROW><id>7116985</id><snippet>    class App:

  #some codes are omitted here

  def look(self, pic_url):
    top = Toplevel()
    self.more = More(top, pic_url)
</snippet></ROW><ROW><id>7116997</id><snippet>readline</snippet></ROW><ROW><id>7116997</id><snippet>readline</snippet></ROW><ROW><id>7116997</id><snippet>libedit</snippet></ROW><ROW><id>7116997</id><snippet>libedit</snippet></ROW><ROW><id>7116997</id><snippet>readline</snippet></ROW><ROW><id>7116997</id><snippet>readline</snippet></ROW><ROW><id>7116997</id><snippet>gcc-4.0</snippet></ROW><ROW><id>7116997</id><snippet>import readline
import rlcompleter
if 'libedit' in readline.__doc__:
    readline.parse_and_bind("bind ^I rl_complete")
else:
    readline.parse_and_bind("tab: complete")
</snippet></ROW><ROW><id>7117051</id><snippet>AuctionID\tUserID\tSiteID\tURL\tUserAgent\tTimestamp
</snippet></ROW><ROW><id>7117051</id><snippet>import sys

def usercount_mapper(input):
    for line in input:
        line = line.strip()
        parts = line.split("\t")
        user_id = parts[1]
        print "%s\t%s"%(user_id, 1)

if __name__=="__main__":
    usercount_mapper(sys.stdin)
</snippet></ROW><ROW><id>7117051</id><snippet>import sys

user_ids = {}
def usercount_reducer(input):
    for line in input:
        line = line.strip()
        user_id, count = line.split("\t")
        try:
            count = int(count)
        except ValueError:
            continue
        current_count = user_ids.get(user_id, 0)
        user_ids[user_id] = current_count + count

    for user_id, count in user_ids.iteritems():
        print "%s\t%s"%(user_id, count)

if __name__=="__main__":
    usercount_reducer(sys.stdin)
</snippet></ROW><ROW><id>7117051</id><snippet>$ cat mydata.tsv | map.py | sort | reduce.py &gt; result.tsv
</snippet></ROW><ROW><id>7117051</id><snippet>SELECT DISTINCT users.user_id FROM users;
</snippet></ROW><ROW><id>7117067</id><snippet>if</snippet></ROW><ROW><id>7117067</id><snippet>elif</snippet></ROW><ROW><id>7117067</id><snippet>else</snippet></ROW><ROW><id>7117067</id><snippet>def __init__(self, *args, **kwargs):
    data = args[0] if args else kwargs.get('data', None)
    if data:
        data['content'] = ' '.join(data['content'].strip().split())
    super(TagForm, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>7117067</id><snippet>if args</snippet></ROW><ROW><id>7117067</id><snippet>if len(args) &gt; 0</snippet></ROW><ROW><id>7117067</id><snippet>length == 0</snippet></ROW><ROW><id>7117067</id><snippet>False</snippet></ROW><ROW><id>7117067</id><snippet>length &gt; 0</snippet></ROW><ROW><id>7117067</id><snippet>True</snippet></ROW><ROW><id>7117067</id><snippet>if data</snippet></ROW><ROW><id>7117067</id><snippet>if data is not None</snippet></ROW><ROW><id>7117067</id><snippet>data</snippet></ROW><ROW><id>7117067</id><snippet>not None</snippet></ROW><ROW><id>7117067</id><snippet>True</snippet></ROW><ROW><id>7117229</id><snippet>vector_generic_math</snippet></ROW><ROW><id>7117412</id><snippet>__iter__()</snippet></ROW><ROW><id>7117412</id><snippet>class unpackable_dict(dict):
    def __iter__(self):
        return (self[key] for key in sorted(self.keys()))

d = unpackable_dict(a=1, b=2)
a, b = d
</snippet></ROW><ROW><id>7117412</id><snippet>OrderedDict</snippet></ROW><ROW><id>7117611</id><snippet>def function(fragment, string):
    count = -1
    last_match = 0
    while last_match != -1:
        count += 1
        last_match = string.find(fragment, last_match)
        if last_match != -1:
            last_match += 1
    return count

&gt;&gt;&gt; function('gtt' , 'gttacgtggatg' )
1
&gt;&gt;&gt; function('gtg' , 'gttacgtggatg' )
1
</snippet></ROW><ROW><id>7117611</id><snippet>&gt;&gt;&gt; 'gttacgtggatg'.count('ctt')
0
&gt;&gt;&gt; 'gttacgtggatg'.count('gtt')
1
</snippet></ROW><ROW><id>7117637</id><snippet>host = self.queue.get()</snippet></ROW><ROW><id>7117637</id><snippet>queue</snippet></ROW><ROW><id>7117637</id><snippet>#spawn a pool of threads, and pass them queue instance
for i in range(5):
    t = ThreadUrl(queue, out_queue)
    t.setDaemon(True)
    t.start()
</snippet></ROW><ROW><id>7117637</id><snippet>#populate queue with data
for host in hosts:
    queue.put(host)
</snippet></ROW><ROW><id>7117815</id><snippet>import re

def parse_line(line, note):
    fret_pattern = re.compile(r'\d+')
    for match in fret_pattern.finditer(line):
        yield (match.start(), ''.join((note, match.group(0))))
</snippet></ROW><ROW><id>7117815</id><snippet>|-----11--</snippet></ROW><ROW><id>7117815</id><snippet>(6, "e11")</snippet></ROW><ROW><id>7117815</id><snippet>open()</snippet></ROW><ROW><id>7117815</id><snippet>import itertools

notes = ['e', 'B', 'G', 'D', 'A', 'E']
with open('tab.txt') as fp:
    # Read-in 6 lines
    lines = itertools.islice(fp, 0, 6)

    # Holds all the notes.
    frets = []

    # Process the lines, append all notes to frets.
    for note, line in itertools.izip(notes, lines):
       frets.extend(parse_line(line, note))

    # Sort the frets by position.
    frets.sort()

    # Drop the positions.
    frets = [fret for pos, fret in frets]
</snippet></ROW><ROW><id>7118013</id><snippet>class Bar(object):
    def x(self):
        return 0

setattr(Bar, 'x', property(Bar.x))

print Bar.x
# &lt;property object at 0x04D37270&gt;
print Bar().x
# 0
</snippet></ROW><ROW><id>7118013</id><snippet>class Bar(object):
    def x(self):
        return 0

bar = Bar()

setattr(bar.__class__, 'x', property(bar.__class__.x))

print Bar.x
# &lt;property object at 0x04D306F0&gt;
print bar.x
# 0
</snippet></ROW><ROW><id>7118155</id><snippet>Component_list = [Component1, Component2]                      
system1 = system(Component_list)
</snippet></ROW><ROW><id>7118155</id><snippet>  def __init__(self,
               name = None,                 
               lines = None,
               *component,
               **kwargs):
</snippet></ROW><ROW><id>7118155</id><snippet>__init__</snippet></ROW><ROW><id>7118155</id><snippet>system1 = system(Component1, Component2)
</snippet></ROW><ROW><id>7118155</id><snippet>__init__</snippet></ROW><ROW><id>7118155</id><snippet>def __init__(self, *component, **kwargs):
    self.name = kwargs.get('name')
    self.component = component
    self.lines = kwargs.get('lines', [])
</snippet></ROW><ROW><id>7118155</id><snippet>*</snippet></ROW><ROW><id>7118155</id><snippet>component</snippet></ROW><ROW><id>7118155</id><snippet>def writeTOFile(self,*component):

                self.component = component
</snippet></ROW><ROW><id>7118155</id><snippet>def writeTOFile(self):
</snippet></ROW><ROW><id>7118155</id><snippet>component</snippet></ROW><ROW><id>7118155</id><snippet>self</snippet></ROW><ROW><id>7118155</id><snippet>__init__</snippet></ROW><ROW><id>7118155</id><snippet>                line = "Width = %d" % component.width
                self.lines.append(line)
</snippet></ROW><ROW><id>7118155</id><snippet>            for component in components:
                line = "Width = %d" % component.width
                self.lines.append(line)
</snippet></ROW><ROW><id>7118295</id><snippet>&gt;&gt;&gt; x = ['ala@ala.com', 'bala@bala.com']
&gt;&gt;&gt; x
['ala@ala.com', 'bala@bala.com']
&gt;&gt;&gt; x.remove('ala@ala.com')
&gt;&gt;&gt; x
['bala@bala.com']
</snippet></ROW><ROW><id>7118295</id><snippet>index = initial_list.index(item1)
initial_list.remove(item1)
other_list.remove(other_list[index])   
</snippet></ROW><ROW><id>7118562</id><snippet>% matlab
points = [1 2 3 ; 4 5 6 ; 7 8 9 ; 10 11 12 ];
hdf5write('test.h5', '/Points', points);
</snippet></ROW><ROW><id>7118562</id><snippet># python
import h5py
with h5py.File('test.h5', 'r') as f:
    points = f['/Points'].value    
</snippet></ROW><ROW><id>7118562</id><snippet># python
import h5py
import numpy
points = numpy.array([ [1., 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12] ])
with h5py.File('test.h5', 'w') as f:
    f['/Points'] = points
</snippet></ROW><ROW><id>7118562</id><snippet>% matlab
points = hdf5read('test.h5', '/Points');
</snippet></ROW><ROW><id>7118879</id><snippet>admin</snippet></ROW><ROW><id>7118879</id><snippet>admin</snippet></ROW><ROW><id>7118879</id><snippet>admin.py</snippet></ROW><ROW><id>7118879</id><snippet>Some_Model_admin.py</snippet></ROW><ROW><id>7118879</id><snippet>__init__.py</snippet></ROW><ROW><id>7118879</id><snippet>admin</snippet></ROW><ROW><id>7118879</id><snippet>__all__</snippet></ROW><ROW><id>7119499</id><snippet>class Counter(object):
   def __init__(self):
      self.num = 0

   def inc(self):
      self.num += 1

count = Counter()
count.inc()
</snippet></ROW><ROW><id>7119499</id><snippet>dict</snippet></ROW><ROW><id>7119499</id><snippet>def Counter_inc(d):
   d['num'] += 1

def Counter_create():
   d = {
      'num': 0,
      'inc': Counter_inc,
   }
   return d

count = Counter_create()
count['inc'](count)
</snippet></ROW><ROW><id>7119499</id><snippet>isinstance()</snippet></ROW><ROW><id>7119572</id><snippet>class Action(object):
    def __init__(self, count):
        self.count = count
    def perform(self):
        print "perform " + str(self.count)
        if self.count == 2:
            raise Exception("self.count is " + str(self.count))
    def commit(self):
        print "commit " + str(self.count)
    def rollback(self):
        print "rollback " + str(self.count)
    def __enter__(self):
        perform()
        return self
    def __exit__(self, exc_type, exc_value, traceback):
        if exc_value is None:
            self.commit()
        else:
            self.rollback()

with Action(1), Action(2), Action(3):
    pass
</snippet></ROW><ROW><id>7119572</id><snippet>Action</snippet></ROW><ROW><id>7119572</id><snippet>__enter__()</snippet></ROW><ROW><id>7119572</id><snippet>__exit()__</snippet></ROW><ROW><id>7119572</id><snippet>__enter__()</snippet></ROW><ROW><id>7119572</id><snippet>with</snippet></ROW><ROW><id>7119572</id><snippet>with Action(1) as a1, Action(2) as a2:
    pass
</snippet></ROW><ROW><id>7119572</id><snippet>Action</snippet></ROW><ROW><id>7119572</id><snippet>with</snippet></ROW><ROW><id>7119652</id><snippet>while True:
    try:
        test()
        break
    except Exception, e:
        logger.info(e)
</snippet></ROW><ROW><id>7119684</id><snippet>re.sub</snippet></ROW><ROW><id>7119684</id><snippet>text</snippet></ROW><ROW><id>7119684</id><snippet>text = re.sub("jnnorm", "jnnorm MYTAGHERE", text)
</snippet></ROW><ROW><id>7119684</id><snippet>text = text.replace("jnnorm", "jnnorm MYTAGHERE")
</snippet></ROW><ROW><id>7120037</id><snippet>python-qt4</snippet></ROW><ROW><id>7120037</id><snippet>sudo apt-get install python-qt4</snippet></ROW><ROW><id>7120061</id><snippet>os.path.realpath</snippet></ROW><ROW><id>7120061</id><snippet>import os
def getmount(path):        
    path = os.path.realpath(os.path.abspath(path))
    while path != os.path.sep:
        if os.path.ismount(path):
            return path
        path = os.path.abspath(os.path.join(path, os.pardir))
    return path
</snippet></ROW><ROW><id>7120226</id><snippet>glutCreateWindow("Draw Polygons")
glutInitWindowSize(width, height)
</snippet></ROW><ROW><id>7120226</id><snippet>glutInitWindowSize(width, height)
glutCreateWindow("Draw Polygons")
</snippet></ROW><ROW><id>7120385</id><snippet>total_ordering</snippet></ROW><ROW><id>7120385</id><snippet>update_wrapped</snippet></ROW><ROW><id>7120385</id><snippet>lru_cache</snippet></ROW><ROW><id>7120385</id><snippet>wraps</snippet></ROW><ROW><id>7120385</id><snippet>contextmanager</snippet></ROW><ROW><id>7120385</id><snippet>@decorator
def function(): pass
</snippet></ROW><ROW><id>7120385</id><snippet>def function(): pass
function = decorator(function)
</snippet></ROW><ROW><id>7120385</id><snippet>property</snippet></ROW><ROW><id>7121025</id><snippet>If-Modified-Since</snippet></ROW><ROW><id>7121025</id><snippet>If-Modified-Since</snippet></ROW><ROW><id>7121025</id><snippet>Last-Modified</snippet></ROW><ROW><id>7121025</id><snippet>Last-Modified</snippet></ROW><ROW><id>7121025</id><snippet>If-Modified-Since</snippet></ROW><ROW><id>7121172</id><snippet>myVar="Joe Smart"

x = open (myVar+".txt", "w")
x.write("hello")
x.close()
</snippet></ROW><ROW><id>7121172</id><snippet>Joe Smart.txt</snippet></ROW><ROW><id>7121247</id><snippet>import re
t = "#{king} for a ##{day}, ##{fool} for a #{lifetime}"
re.findall(r'(?&lt;!#)#{([a-z]+)}', t)
</snippet></ROW><ROW><id>7121247</id><snippet>['king', 'lifetime']
</snippet></ROW><ROW><id>7121247</id><snippet>(?&lt;!prefix)pattern</snippet></ROW><ROW><id>7121247</id><snippet>pattern</snippet></ROW><ROW><id>7121247</id><snippet>prefix</snippet></ROW><ROW><id>7121332</id><snippet>\n</snippet></ROW><ROW><id>7121332</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>7121332</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(d)
'{"hits": 22, "page": 3, "somehhtml": "&lt;div id=\'item1\'&gt;Something&lt;/div&gt;&lt;div id=\'item2\'&gt;More Stuff&lt;/div&gt;\\n\\n&lt;p&gt;More after some linebreaks.&lt;/p&gt;"}'
</snippet></ROW><ROW><id>7121332</id><snippet>&gt;&gt;&gt; s = '{"hits": 22, "page": 3, "somehhtml": "&lt;div id=\'item1\'&gt;Something&lt;/div&gt;&lt;div id=\'item2\'&gt;More Stuff&lt;/div&gt;\\n\\n&lt;p&gt;More after some linebreaks.&lt;/p&gt;"}'
&gt;&gt;&gt; JSON.parse(s)
Object { hits=22, page=3, somehhtml="&lt;div id='item1'&gt;Somethi...er some linebreaks.&lt;/p&gt;"}
// eval is not safe, but you should add a parentheses as a workaround  
&gt;&gt;&gt; eval('(' + s + ')')
Object { hits=22, page=3, somehhtml="&lt;div id='item1'&gt;Somethi...er some linebreaks.&lt;/p&gt;"}
</snippet></ROW><ROW><id>7121500</id><snippet>ef = ExampleFrame(None, 'Something')
NewX = X(sys.argv, ef)
</snippet></ROW><ROW><id>7121500</id><snippet>def __init__(self, argv, ef):
   # Some other stuff
   self.__ef = ef
</snippet></ROW><ROW><id>7121500</id><snippet># X method
def clearFrameFromX(self):
   self.__ef.Clear()
</snippet></ROW><ROW><id>7121587</id><snippet>Process.start()</snippet></ROW><ROW><id>7121587</id><snippet>exec</snippet></ROW><ROW><id>7121804</id><snippet>&gt;&gt;&gt; from matplotlib import pyplot as plt
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array(range(1,129))
&gt;&gt;&gt; y = np.random.rand(14,128)
&gt;&gt;&gt; plt.plot(x, y)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\site-packages\matplotlib\pyplot.py", line 2286, in plot 
    ret = ax.plot(*args, **kwargs)
  File "C:\Python27\lib\site-packages\matplotlib\axes.py", line 3783, in plot
    for line in self._get_lines(*args, **kwargs):
  File "C:\Python27\lib\site-packages\matplotlib\axes.py", line 317, in _grab_next_args
    for seg in self._plot_args(remaining, kwargs):
  File "C:\Python27\lib\site-packages\matplotlib\axes.py", line 294, in _plot_args
    x, y = self._xy_from_xy(x, y)
  File "C:\Python27\lib\site-packages\matplotlib\axes.py", line 234, in _xy_from_xy
    raise ValueError("x and y must have same first dimension")
ValueError: x and y must have same first dimension
&gt;&gt;&gt; plt.plot(x.T, y.T)
# works
</snippet></ROW><ROW><id>7121852</id><snippet>sys.modules</snippet></ROW><ROW><id>7121852</id><snippet>import mymodule
lst = {mymodule.__name__: mymodule}
'mymodule' in globals()   # True
'mymodule' in lst         # True
del mymodule
'mymodule' in globals()   # False
'mymodule' in lst         # Still True
</snippet></ROW><ROW><id>7121852</id><snippet>sys.modules</snippet></ROW><ROW><id>7121852</id><snippet>sys.modules</snippet></ROW><ROW><id>7121864</id><snippet>stderr</snippet></ROW><ROW><id>7121864</id><snippet>run</snippet></ROW><ROW><id>7121864</id><snippet>sys.excepthook</snippet></ROW><ROW><id>7121864</id><snippet>sys.stderr</snippet></ROW><ROW><id>7121864</id><snippet>print(sys.excepthook)</snippet></ROW><ROW><id>7121864</id><snippet>&lt;built-in function excepthook&gt;</snippet></ROW><ROW><id>7121864</id><snippet>&lt;bound method InteractiveShell.excepthook of &lt;IPython.iplib.InteractiveShell object at 0x022FA3F0&gt;&gt;</snippet></ROW><ROW><id>7122031</id><snippet>import_module</snippet></ROW><ROW><id>7122031</id><snippet>from django.utils.importlib import import_module
app_label = "app"
url = import_module("%s.urls" % app_label).HOME_URL 
</snippet></ROW><ROW><id>7122031</id><snippet>./manage.py shell</snippet></ROW><ROW><id>7122613</id><snippet>if</snippet></ROW><ROW><id>7122613</id><snippet>if value &lt; 0: # do stuff
</snippet></ROW><ROW><id>7122613</id><snippet>assert value &gt; 0
</snippet></ROW><ROW><id>7122613</id><snippet>AssertionError</snippet></ROW><ROW><id>7122613</id><snippet>assert</snippet></ROW><ROW><id>7122613</id><snippet>value = max(value, 0)
</snippet></ROW><ROW><id>7122613</id><snippet>value = value if value &gt; 0 else -value
</snippet></ROW><ROW><id>7122613</id><snippet>value = abs(value)
</snippet></ROW><ROW><id>7122700</id><snippet>__hash__</snippet></ROW><ROW><id>7122700</id><snippet>__hash__</snippet></ROW><ROW><id>7122700</id><snippet>obj1 == obj2</snippet></ROW><ROW><id>7122700</id><snippet>obj1.a == obj2.a and ob1.b == obj2.b</snippet></ROW><ROW><id>7122700</id><snippet>__hash__</snippet></ROW><ROW><id>7122700</id><snippet>return hash((self.a, self.b))</snippet></ROW><ROW><id>7122700</id><snippet>newx</snippet></ROW><ROW><id>7122700</id><snippet>newy</snippet></ROW><ROW><id>7122700</id><snippet>x</snippet></ROW><ROW><id>7122700</id><snippet>y</snippet></ROW><ROW><id>7122700</id><snippet>x = [1,2,3,4,4,5,6,7,7]
y = [3,4,5,6,7,8,9,10]
# you can leave out bad and just compare against
# x at the end if memory is more important than speed
newx, bad, newy = [], [], []
for i in x:
    if i in y:
        callsomefunction(i)
        bad.append(i)
    else:
        newx.append(i)

for i in y:
    if i not in bad:
        newy.append(i)

print newx
print newy
</snippet></ROW><ROW><id>7122784</id><snippet>sudo apt-get install python-lxml
</snippet></ROW><ROW><id>7122784</id><snippet>elementree</snippet></ROW><ROW><id>7122784</id><snippet>pip</snippet></ROW><ROW><id>7122784</id><snippet>easy_install</snippet></ROW><ROW><id>7122784</id><snippet>virtualenv</snippet></ROW><ROW><id>7122945</id><snippet>rotate_deg_around(x, y, degrees)</snippet></ROW><ROW><id>7123146</id><snippet>import MyPak
from MyPak import MyMod
</snippet></ROW><ROW><id>7123146</id><snippet>MyPak/MyMod.py</snippet></ROW><ROW><id>7123146</id><snippet>MyMod</snippet></ROW><ROW><id>7123146</id><snippet>MyMod.py</snippet></ROW><ROW><id>7123146</id><snippet>import sys
del sys.modules['MyPak.MyMod'] 
reload(MyPak)
from MyPak import MyMod
</snippet></ROW><ROW><id>7123146</id><snippet>del MyPak</snippet></ROW><ROW><id>7123146</id><snippet>del MyMod</snippet></ROW><ROW><id>7123146</id><snippet>del MyPak.MyMod</snippet></ROW><ROW><id>7123146</id><snippet>sys.modules</snippet></ROW><ROW><id>7123146</id><snippet>from MyMod import MyMod</snippet></ROW><ROW><id>7123146</id><snippet>MyPak/__init__.py</snippet></ROW><ROW><id>7123146</id><snippet>MyPak.MyMod</snippet></ROW><ROW><id>7123146</id><snippet>sys.modules</snippet></ROW><ROW><id>7123146</id><snippet>MyMod</snippet></ROW><ROW><id>7123146</id><snippet>MyPak/MyMod.py</snippet></ROW><ROW><id>7123146</id><snippet>MyPak/MyMod.pyc</snippet></ROW><ROW><id>7123297</id><snippet>sys.modules</snippet></ROW><ROW><id>7123584</id><snippet>self.request.form.getlist('brands')
</snippet></ROW><ROW><id>7123706</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure(figsize=(9,7))
ax1 = fig.add_subplot(111)


mylists = [[765340, 765371, 765310,'MA011',], [65310, 'MA015'], 
           [765422, 765422, 24920205, 24920161, 'MA125'],
           [765422, 'MA105'],[765371, 12345, 'MA004']]

x = []
y = []
y_labels = []
y_ticks = []
for i,sub_list in enumerate(mylists):
    y_labels.append(sub_list[-1])
    y_ticks.append(i)
    for v in sub_list[:-1]:
        x.append(v)
        y.append(i)

ax1.set_yticks(y_ticks)
ax1.set_yticklabels(y_labels)
ax1.plot(x, y, "ro")
plt.show()
</snippet></ROW><ROW><id>7123706</id><snippet>enuemrate</snippet></ROW><ROW><id>7123706</id><snippet>i</snippet></ROW><ROW><id>7123817</id><snippet>module load whatever</snippet></ROW><ROW><id>7123817</id><snippet>subprocess.Popen(['/possibly/path/to/vncserver', ':8080', '-localhost'], 
                 env={'WHATEVER': 'you', 'MAY': 'need'})
</snippet></ROW><ROW><id>7123817</id><snippet>Popen(['bash',...</snippet></ROW><ROW><id>7123927</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; a[::3]
[1, 4, 7]
</snippet></ROW><ROW><id>7123927</id><snippet>&gt;&gt;&gt; a[2::3]
[3, 6, 9]
</snippet></ROW><ROW><id>7124346</id><snippet>type</snippet></ROW><ROW><id>7124346</id><snippet>data</snippet></ROW><ROW><id>7124346</id><snippet>data</snippet></ROW><ROW><id>7124346</id><snippet>{'date': datetime.date(2011, 8, 14), 'name': u'ab', 'total': 8}
</snippet></ROW><ROW><id>7124346</id><snippet>fetch</snippet></ROW><ROW><id>7124346</id><snippet>new_y = fetch['type']
</snippet></ROW><ROW><id>7124346</id><snippet>type</snippet></ROW><ROW><id>7124346</id><snippet>fetch</snippet></ROW><ROW><id>7124455</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>7124455</id><snippet>readline.parse_and_bind</snippet></ROW><ROW><id>7124455</id><snippet>bind_to_complete</snippet></ROW><ROW><id>7124478</id><snippet>class Musician(models.Model):
    name = models.CharField(max_length=128)
    band = models.ForeignKey("Band")

class Band(models.Model):
    name = models.CharField(max_length=128)
    genre = models.CharField(max_length=50)
</snippet></ROW><ROW><id>7124478</id><snippet>Musician.objects.filter(band__name='The Beatles')</snippet></ROW><ROW><id>7124478</id><snippet>from django.db import connection
connection.queries
</snippet></ROW><ROW><id>7124478</id><snippet>SELECT "appname_musician"."id", "appname_musician"."name", "appname_musician"."band_id" 
    FROM "appname_musician" 
    INNER JOIN "appname_band" ON ("appname_musician"."band_id" = "appname_band"."id") 
    WHERE "appname_band"."name" = "The Beatles";
</snippet></ROW><ROW><id>7124478</id><snippet>Band.objects.filter(musician__name = 'Ringo Starr')</snippet></ROW><ROW><id>7124478</id><snippet>SELECT "appname_band"."id", "appname_band"."name", "appname_band"."genre"
    FROM "appname_band" 
    INNER JOIN "appname_musician" ON ("appname_musician"."band_id" = "appname_band"."id") 
    WHERE "appname_musician"."name" = "Ringo Starr";
</snippet></ROW><ROW><id>7124478</id><snippet>Band.objects(name__icontains = "The")</snippet></ROW><ROW><id>7124478</id><snippet>name__icontains</snippet></ROW><ROW><id>7124478</id><snippet>class Musician(models.Model):
    name = models.CharField(max_length=128)
    initial_band = models.ForeignKey("Band", related_name = 'initial_band_members')
    final_band = models.ForeignKey("Band", related_name = 'final_band_members')

class Band(models.Model):
    name = models.CharField(max_length=128)
    genre = models.CharField(max_length=50)

try: ## create some objects
    cream,_ = Band.objects.get_or_create(name="Cream", genre="Classic Rock")
    derek, _ = Band.objects.get_or_create(name="Derek and the Dominos", genre="Classic Rock")
    beatles, _ = Band.objects.get_or_create(name="The Beatles", genre="Classic Rock")
    wings, _ = Band.objects.get_or_create(name="Wings", genre="Classic Rock")
    Musician.objects.get_or_create(name="Eric Clapton", initial_band=cream, final_band=derek)
    Musician.objects.get_or_create(name="Paul McCartney", initial_band=beatles, final_band=wings)
    Musician.objects.get_or_create(name="John Lennon", initial_band=beatles, final_band=beatles)

except:
    pass
</snippet></ROW><ROW><id>7124478</id><snippet>Band.objects.filter(musician__name='Paul McCartney')</snippet></ROW><ROW><id>7124478</id><snippet>FieldError</snippet></ROW><ROW><id>7124478</id><snippet>Band.objects.filter(initial_band_members__name='Paul McCartney')</snippet></ROW><ROW><id>7124478</id><snippet>SELECT "testing_band"."id", "testing_band"."name", "testing_band"."genre" 
  FROM "testing_band" 
  INNER JOIN "testing_musician" ON ("testing_band"."id" = "testing_musician"."final_band_id") 
  WHERE "testing_musician"."name" = Paul McCartney '
</snippet></ROW><ROW><id>7124485</id><snippet>help(str)</snippet></ROW><ROW><id>7124485</id><snippet>strhelp</snippet></ROW><ROW><id>7124485</id><snippet>import pydoc
strhelp = pydoc.render_doc(str, "Help on %s")
</snippet></ROW><ROW><id>7124948</id><snippet>if l * (i ** j) &gt;= 10: powers.append(l * (i ** j)
</snippet></ROW><ROW><id>7124948</id><snippet>if l * (i ** j) &gt;= 10: powers.append(l * (i ** j))
</snippet></ROW><ROW><id>7124952</id><snippet>work_stack = list('abcde')

prev_item = ''
while work_stack:
    item = work_stack.pop(0)
    print item
    if prev_item=='a' and item == 'b':
        work_stack.insert(0,item)
    prev_item = item
</snippet></ROW><ROW><id>7125157</id><snippet>plot.legend(loc=2,prop={'size':6})
</snippet></ROW><ROW><id>7125157</id><snippet>matplotlib.font_manager.FontProperties</snippet></ROW><ROW><id>7125157</id><snippet>prop: [ None | FontProperties | dict ]
    A matplotlib.font_manager.FontProperties instance. If prop is a 
    dictionary, a new instance will be created with prop. If None, use
    rc settings.
</snippet></ROW><ROW><id>7125157</id><snippet>fontsize</snippet></ROW><ROW><id>7125220</id><snippet>class Comment(object):
    all_comments = []

    def __init__(self, message, parent):
        self.message = message
        self.parent = parent
        self.all_comments.append(self)

    def __iter__(self):
        """
        Yields tuples of (indentation level, comments), with this comment first
        and child comments later.
        """
        # what goes here?
</snippet></ROW><ROW><id>7125220</id><snippet>import itertools

class Comment(object):
    def __iter__(self):
        return _iter_helper(self, 0)

    def _iter_helper(self, depth):
        item = {'indent_level': depth, 'comment': self}
        return itertools.chain([item], 
                               *[comment._iter_helper(depth+1)
                                 for comment 
                                 in self.all_comments
                                 if comment.parent == self])
</snippet></ROW><ROW><id>7125220</id><snippet>CREATE TABLE comments (
    id INTEGER PRIMARY KEY,
    parent INTEGER,
    comment TEXT        
);
</snippet></ROW><ROW><id>7125220</id><snippet>with recursive</snippet></ROW><ROW><id>7125220</id><snippet>connect by</snippet></ROW><ROW><id>7125220</id><snippet>SELECT c1.*, c2.*, c3.*, c4.*, c5.*
FROM comments c1
LEFT JOIN comments c2 ON c1.id = c2.parent
LEFT JOIN comments c3 ON c2.id = c3.parent
LEFT JOIN comments c4 ON c3.id = c4.parent
LEFT JOIN comments c5 ON c4.id = c5.parent
WHERE c1.parent = ?
</snippet></ROW><ROW><id>7125374</id><snippet>DIVISION_CONSTANT --&gt; width_scale
width_scale --&gt; fig_width
ANOTHER_DIVISION_CONSTANT  --&gt; step_scale
DISTANCE_FROM_ORIGIN --&gt; x_limits
</snippet></ROW><ROW><id>7125476</id><snippet>import re
print re.findall(r"\|[^|]*\|", text)
</snippet></ROW><ROW><id>7125547</id><snippet>next((x for x in test_list if x.value == value), None)
</snippet></ROW><ROW><id>7125547</id><snippet>None</snippet></ROW><ROW><id>7125547</id><snippet>for x in test_list:
    if x.value == value:
        print "i found it!"
        break
</snippet></ROW><ROW><id>7125547</id><snippet>for x in test_list:
    if x.value == value:
        print "i found it!"
        break
else:
    x = None
</snippet></ROW><ROW><id>7125547</id><snippet>None</snippet></ROW><ROW><id>7125547</id><snippet>x</snippet></ROW><ROW><id>7125547</id><snippet>break</snippet></ROW><ROW><id>7125569</id><snippet>if x &lt; 10:
    buffer = buffer.replace(item + str(x), item.upper() + "-0" + str(x))
else:
    buffer = buffer.replace(item + str(x), item.upper() + "-" + str(x))
</snippet></ROW><ROW><id>7125569</id><snippet>sx = str(x)
tmp = sx if len(sx) &gt;= 2 else "0" + sx
buffer = buffer.replace(item + sx, item.upper()+ "-" + tmp)
</snippet></ROW><ROW><id>7125569</id><snippet>buffer = buffer.replace(item + str(x), "%s-%02d" % (item.upper(), int(x)) )
</snippet></ROW><ROW><id>7125764</id><snippet>__enter__</snippet></ROW><ROW><id>7125764</id><snippet>self</snippet></ROW><ROW><id>7125764</id><snippet>__enter__</snippet></ROW><ROW><id>7125764</id><snippet>__init__()</snippet></ROW><ROW><id>7125764</id><snippet>__enter__()</snippet></ROW><ROW><id>7125764</id><snippet>def __enter__(self):
    print 'Entering MyResource'
    return self
</snippet></ROW><ROW><id>7125773</id><snippet>Python.h</snippet></ROW><ROW><id>7125856</id><snippet>multiprocessing</snippet></ROW><ROW><id>7125856</id><snippet>fig.clf()</snippet></ROW><ROW><id>7125856</id><snippet>plt.close()</snippet></ROW><ROW><id>7125856</id><snippet>del a,b</snippet></ROW><ROW><id>7125856</id><snippet>gc.collect()</snippet></ROW><ROW><id>7125856</id><snippet>import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np      

import multiprocessing as mp

def worker():
    N=1000000
    a = np.arange(N)
    b = np.random.randn(N)

    fig = plt.figure(num=1, dpi=100, facecolor='w', edgecolor='w')
    fig.set_size_inches(10,7)
    ax = fig.add_subplot(111)
    ax.plot(a, b)

    fig.savefig('/tmp/random.png')   # code gives me an error here

if __name__=='__main__':
    proc=mp.Process(target=worker)
    proc.daemon=True
    proc.start()
    proc.join()
</snippet></ROW><ROW><id>7125856</id><snippet>proc.join()</snippet></ROW><ROW><id>7125856</id><snippet>join</snippet></ROW><ROW><id>7125856</id><snippet>worker</snippet></ROW><ROW><id>7125856</id><snippet>join</snippet></ROW><ROW><id>7125856</id><snippet>worker</snippet></ROW><ROW><id>7126050</id><snippet>update_idletasks</snippet></ROW><ROW><id>7126050</id><snippet>update_idletasks</snippet></ROW><ROW><id>7126050</id><snippet>update_idletasks</snippet></ROW><ROW><id>7126421</id><snippet>class C(CapitalizeAnimal, A):
     animal = 'puma'

     def __init__(self):
         super(C, self).__init__()
</snippet></ROW><ROW><id>7126421</id><snippet>super</snippet></ROW><ROW><id>7126421</id><snippet>object</snippet></ROW><ROW><id>7126937</id><snippet>elements = ['%{0}%'.format(element) for element in elements]
</snippet></ROW><ROW><id>7127109</id><snippet>import re

line = '-------------------------------------------------------------\n'

ss = ('I gave two similar things to my two twin sons: '
      'two spankings, two nice BICYCLES of 300 dollars each, '
      'yes 600 dollars for two horridly nice BICYCLES, '
      'two times 300 dollars for two sons receiving two BICYCLES !, '
      'two dollars too, but never two dogs')
print ss,'\n\n'


print line + '1) Replacing the more at right before the first "BICYCLES":\n'
reg = re.compile('two(?=(?:.(?!two))*?BICYCLES)(.+)')
print reg.sub('@@@@\\1',ss)


print line + '2) Replacing the more at right before the last "BICYCLES":\n'
reg = re.compile('two(?=(?:.(?!two))*?BICYCLES(?!.*?BICYCLES))')
print reg.sub('@@@@',ss)


print line + '3) Replacing all before the first "BICYCLES":\n'
reg = re.compile('(two)|BICYCLES.+')
print reg.sub(lambda mat: '@@@@' if mat.group(1) else mat.group(),ss)


print line + '4) Replacing all before the last "BICYCLES":\n'
reg = re.compile('(two)|BICYCLES(?!.*?BICYCLES).+')
print reg.sub(lambda mat: '@@@@' if mat.group(1) else mat.group(),ss)
</snippet></ROW><ROW><id>7127109</id><snippet>I gave two similar things to my two twin sons: two spankings, two nice BICYCLES of 300 dollars each, yes 600 dollars for two horridly nice BICYCLES, two times 300 dollars for two sons receiving two BICYCLES !, two dollars too, but never two dogs 


-------------------------------------------------------------
1) Replacing the more at right before the first "BICYCLES":

I gave two similar things to my two twin sons: two spankings, @@@@ nice BICYCLES of 300 dollars each, yes 600 dollars for two horridly nice BICYCLES, two times 300 dollars for two sons receiving two BICYCLES !, two dollars too, but never two dogs
-------------------------------------------------------------
2) Replacing the more at right before the last "BICYCLES":

I gave two similar things to my two twin sons: two spankings, two nice BICYCLES of 300 dollars each, yes 600 dollars for two horridly nice BICYCLES, two times 300 dollars for two sons receiving @@@@ BICYCLES !, two dollars too, but never two dogs
-------------------------------------------------------------
3) Replacing all before the first "BICYCLES":

I gave @@@@ similar things to my @@@@ twin sons: @@@@ spankings, @@@@ nice BICYCLES of 300 dollars each, yes 600 dollars for two horridly nice BICYCLES, two times 300 dollars for two sons receiving two BICYCLES !, two dollars too, but never two dogs
-------------------------------------------------------------
4) Replacing all before the last "BICYCLES":

I gave @@@@ similar things to my @@@@ twin sons: @@@@ spankings, @@@@ nice BICYCLES of 300 dollars each, yes 600 dollars for @@@@ horridly nice BICYCLES, @@@@ times 300 dollars for @@@@ sons receiving @@@@ BICYCLES !, two dollars too, but never two dogs
</snippet></ROW><ROW><id>7127109</id><snippet>line = '-------------------------------------------------------------\n'

ss = ('I gave two similar things to my two twin sons: '
      'two spankings, two nice BICYCLES of 300 dollars each, '
      'yes 600 dollars for two horridly nice BICYCLES, '
      'two times 300 dollars for two sons receiving two BICYCLES !, '
      'two dollars too, but never two dogs')
print ss,'\n\n'


print line + '1) Replacing the more at right before the first "BICYCLES":\n'
fb = ss.find('BICYCLES')
print '@@@@'.join(ss[0:fb].rsplit('two',1)) + ss[fb:] if fb+1 else ss


print line + '2) Replacing the more at right before the last "BICYCLES":\n'
fb = ss.rfind('BICYCLES')
print '@@@@'.join(ss[0:fb].rsplit('two',1)) + ss[fb:] if fb+1 else ss


print line + '3) Replacing all before the first "BICYCLES":\n'
fb = ss.find('BICYCLES')
print ss[0:fb].replace('two','@@@@') + ss[fb:] if fb+1 else ss


print line + '4) Replacing all before the last "BICYCLES":\n'
fb = ss.rfind('BICYCLES')
print ss[0:fb].replace('two','@@@@') + ss[fb:] if fb+1 else ss
</snippet></ROW><ROW><id>7127109</id><snippet>import re

ss = ('Mr Dotwo bought two gifts for his two sons, two hours ago: two BICYCLES '
      'because his two sons wanted only two BICYCLES')
print ss,'\n\n'


print 'Replacing all "two" before the first "BICYCLES":\n'
reg = re.compile('(\\btwo\\b)|BICYCLES.+')
print reg.sub(lambda mat: '@@@@' if mat.group(1) else mat.group(),ss)
</snippet></ROW><ROW><id>7127109</id><snippet>Mr Dotwo bought two gifts for his two sons, two hours ago: two BICYCLES because his two sons wanted only two BICYCLES 


Replacing all strings "two" before the first "BICYCLES":

Mr Dotwo bought @@@@ gifts for his @@@@ sons, @@@@ hours ago: @@@@ BICYCLES because his two sons wanted only two BICYCLES
</snippet></ROW><ROW><id>7127162</id><snippet>flush</snippet></ROW><ROW><id>7127162</id><snippet>fsync</snippet></ROW><ROW><id>7127162</id><snippet>flush</snippet></ROW><ROW><id>7127162</id><snippet>os.fsync</snippet></ROW><ROW><id>7127248</id><snippet>#define Py_InitModule3(name, methods, doc) \
    Py_InitModule4(name, methods, doc, (PyObject *)NULL, \
                   PYTHON_API_VERSION)
</snippet></ROW><ROW><id>7127409</id><snippet>zip</snippet></ROW><ROW><id>7127409</id><snippet>itertools.izip</snippet></ROW><ROW><id>7127409</id><snippet>for i, j, k in zip(cusip_result, bond_name_result, bond_price_result):
    print i, j, k
</snippet></ROW><ROW><id>7127409</id><snippet>csv</snippet></ROW><ROW><id>7127475</id><snippet>json</snippet></ROW><ROW><id>7127475</id><snippet>data</snippet></ROW><ROW><id>7127475</id><snippet>data["features"]</snippet></ROW><ROW><id>7127475</id><snippet>item</snippet></ROW><ROW><id>7127475</id><snippet>data["features"]</snippet></ROW><ROW><id>7127475</id><snippet>item["classifiers"][0]["subcategory"] == "County"</snippet></ROW><ROW><id>7127475</id><snippet>import json

data = json.loads(json_string)
counties = [item for item in data["features"] 
            if item["classifiers"][0]["subcategory"] == "County"]
</snippet></ROW><ROW><id>7127475</id><snippet>counties = [item["name"] for item in data["features"]
            if item["classifiers"][0]["subcategory"] ==  "County"]
</snippet></ROW><ROW><id>7127971</id><snippet>&gt;&gt;&gt; parser._get_all_options()[1:]
[&lt;Option at 0xb7d185ec: --one&gt;, &lt;Option at 0xb7d1866c: --two&gt;]
&gt;&gt;&gt; [x.get_opt_string() for x in parser._get_all_options()[1:]]
['--one', '--two']
&gt;&gt;&gt; [x.dest for x in parser._get_all_options()[1:]]
['one', 'two']
</snippet></ROW><ROW><id>7128021</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(['ping', '192.168.111.198'], stdout=subprocess.PIPE, st
derr=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate()
&gt;&gt;&gt; print out

Pinging 192.168.111.198 with 32 bytes of data:
Reply from 192.168.111.198: bytes=32 time&lt;1ms TTL=128
Reply from 192.168.111.198: bytes=32 time&lt;1ms TTL=128
Reply from 192.168.111.198: bytes=32 time&lt;1ms TTL=128
Reply from 192.168.111.198: bytes=32 time&lt;1ms TTL=128

Ping statistics for 192.168.111.198:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

&gt;&gt;&gt; print err

&gt;&gt;&gt; print p.returncode
0
</snippet></ROW><ROW><id>7128175</id><snippet>all( word in d for word in [ 'somekey', 'someotherkey', 'somekeyggg' ] )
</snippet></ROW><ROW><id>7128447</id><snippet>data = {k:v[0] for (k,v) in data.items()}
</snippet></ROW><ROW><id>7128447</id><snippet>&gt;&gt;&gt; data = {'uid': ['restest'], 'mail': [''], 'givenName': ['Research'], 'cn': ['Research Test Account'], 'sn': ['Account']}
&gt;&gt;&gt; data
{'mail': [''], 'sn': ['Account'], 'givenName': ['Research'], 'uid': ['restest'], 'cn': ['Research Test Account']}
&gt;&gt;&gt; data = {k:v[0] for (k,v) in data.items()}
&gt;&gt;&gt; data
{'mail': '', 'givenName': 'Research', 'cn': 'Research Test Account', 'sn': 'Account', 'uid': 'restest'}
</snippet></ROW><ROW><id>7128447</id><snippet>[[[{k:v[0] for (k,v) in change_dict.items()} for change_dict in list_of_dicts]
  for list_of_dicts in list_of_lists]
 for list_of_lists in mydata]
</snippet></ROW><ROW><id>7128806</id><snippet>string = "How are you?" 
print "\033[34m" + string + "\033[0m"
</snippet></ROW><ROW><id>7129225</id><snippet>"""defined earlier in the script:"""
COMMANDS=['show', 'exit', 'ship']
def complete(text, state, list = COMMANDS):
    for option in list:
        if option.startswith(text):
            if not state:
                return option
            else:
                state -= 1
def precomplete(text, state):
    BUFFER=readline.get_line_buffer()
    args=[None,None,None,None,None,None,None,None,None,None]
    argtemp=[]
    if BUFFER != "":
        i=-1
        while i != BUFFER.count(" "):
            if BUFFER.count(" ") &gt;= 0:
                if BUFFER.count(" ") == 0: #1 because len() starts couting at 1
                    return complete(text, state)
                else:
                    print "Else triggered"
                    o=0
                    verb=[]
                    while complete(BUFFER.split()[0],o):
                        verb.append(complete(BUFFER.split()[0],o))
                        o=o+1
                    if len(verb) == 1:
                        verb=verb[0]
                        print verb
            if BUFFER.count(" ") &gt;= 1:
                if  BUFFER.count(" ") == 1:
                    if verb == 'show':
                        return complete(text, state, ['mac', 'ip', 'arp'])
                else:
                    o=0
                    while complete(BUFFER[1],o,['mac', 'ip', 'arp']):
                        argtemp.append(complete(BUFFER[1],o,['mac', 'ip', 'arp']))
                        o=o+1
                    if len(argtemp) == 1:
                       argtemp==argtemp[0]
            i=i+1
    else:
        return complete(text,state)
readline.parse_and_bind("tab: complete")
readline.set_completer(precomplete)
</snippet></ROW><ROW><id>7129315</id><snippet>from subprocess import Popen, PIPE, STDOUT

wget = Popen(['/usr/bin/wget', theurl], stdout=PIPE, stderr=STDOUT)
stdout, nothing = wget.communicate()    

with open('wget.log', 'w') as wgetlog:
    wgetlog.write(stdout)
</snippet></ROW><ROW><id>7129315</id><snippet>try: 
    # python 2.x
    from urllib import urlretrieve
except ImportError:
    # python 3.x
    from urllib.request import urlretrieve

urlretrieve(theurl, local_filename)
</snippet></ROW><ROW><id>7129315</id><snippet>import urllib2

response = urllib2.urlopen(theurl)
with open(local_filename, 'w') as dl:
    dl.write(response.read())
</snippet></ROW><ROW><id>7129315</id><snippet>local_filename</snippet></ROW><ROW><id>7129520</id><snippet>__rmul__()</snippet></ROW><ROW><id>7129520</id><snippet>__r*__()</snippet></ROW><ROW><id>7129520</id><snippet>TypeError</snippet></ROW><ROW><id>7129520</id><snippet>class Foo(object):
    def __mul_(self, other):
        ''' multiply self with other, e.g. Foo() * 7 '''
    def __rmul__(self, other):
        ''' multiply other with self, e.g. 7 * Foo() '''
</snippet></ROW><ROW><id>7129749</id><snippet>getattr(self, "func1")</snippet></ROW><ROW><id>7129749</id><snippet>&gt;&gt;&gt; class C:
...  def f1(self, arg1): print arg1
...  def f2(self): return getattr(self, "f1")
... 
&gt;&gt;&gt; x=C()
&gt;&gt;&gt; x.f2()(1)
1
</snippet></ROW><ROW><id>7129846</id><snippet>request.method == 'POST'</snippet></ROW><ROW><id>7129846</id><snippet>form.is_valid()</snippet></ROW><ROW><id>7129846</id><snippet>else</snippet></ROW><ROW><id>7129876</id><snippet>path</snippet></ROW><ROW><id>7129876</id><snippet>python</snippet></ROW><ROW><id>7129876</id><snippet>provider</snippet></ROW><ROW><id>7129876</id><snippet>tales.py</snippet></ROW><ROW><id>7129876</id><snippet>configure.zcml</snippet></ROW><ROW><id>7129876</id><snippet>structure</snippet></ROW><ROW><id>7129876</id><snippet>&lt;div tal:replace="structure view/getMarkdown"&gt;rendered markdown&lt;/div&gt; 
</snippet></ROW><ROW><id>7129876</id><snippet>structure</snippet></ROW><ROW><id>7129953</id><snippet>sudo</snippet></ROW><ROW><id>7129953</id><snippet>os.system</snippet></ROW><ROW><id>7129953</id><snippet>subprocess.call()</snippet></ROW><ROW><id>7129953</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>7129953</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>7129953</id><snippet>&gt; nmapscan1.log</snippet></ROW><ROW><id>7129953</id><snippet>os.system()</snippet></ROW><ROW><id>7129953</id><snippet>subprocess</snippet></ROW><ROW><id>7129953</id><snippet>sp = subprocess.Popen(['sudo', 'nmap', '-sC', '-sV', '-PN', '-O', '192.168.0.1/24'],
    stdout=file("nmapscan1.log", "w"))
sp.wait()
f = open('nmapscan1.log', 'r')
print f.read()
f.close()
</snippet></ROW><ROW><id>7129953</id><snippet>sp = subprocess.Popen(['sudo', 'nmap', '-sC', '-sV', '-PN', '-O', '192.168.0.1/24'],
    stdout=subprocess.PIPE)
print sp.stdout.read()
sp.wait()
</snippet></ROW><ROW><id>7130254</id><snippet>"{0:05}".format(3)
</snippet></ROW><ROW><id>7130341</id><snippet>    if z=='3':
</snippet></ROW><ROW><id>7130341</id><snippet>    if z==3:
</snippet></ROW><ROW><id>7130402</id><snippet>server.register_function("HelloWorld", HelloWorld)</snippet></ROW><ROW><id>7130402</id><snippet>server.register_function(HelloWorld, "HelloWorld")</snippet></ROW><ROW><id>7130402</id><snippet>helloWorld</snippet></ROW><ROW><id>7130402</id><snippet>hello</snippet></ROW><ROW><id>7130506</id><snippet>.hexdigest()</snippet></ROW><ROW><id>7130510</id><snippet>site-packages</snippet></ROW><ROW><id>7130510</id><snippet>./lib/pythonx.y/site-packages</snippet></ROW><ROW><id>7130510</id><snippet>/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>7130510</id><snippet>site-packages</snippet></ROW><ROW><id>7130510</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/
</snippet></ROW><ROW><id>7130510</id><snippet>/System/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>7130510</id><snippet>./Extras</snippet></ROW><ROW><id>7130510</id><snippet>site-packages</snippet></ROW><ROW><id>7130510</id><snippet>/Library/Python/</snippet></ROW><ROW><id>7130510</id><snippet>/System/Library</snippet></ROW><ROW><id>7130510</id><snippet>site-packages</snippet></ROW><ROW><id>7130510</id><snippet>/Library/Python/2.6/site-packages
</snippet></ROW><ROW><id>7130510</id><snippet>./Extras</snippet></ROW><ROW><id>7130510</id><snippet>site-packages</snippet></ROW><ROW><id>7130510</id><snippet>site-packages</snippet></ROW><ROW><id>7130510</id><snippet>MACOSX_DEPLOYMENT_TARGET</snippet></ROW><ROW><id>7130510</id><snippet>i386</snippet></ROW><ROW><id>7130510</id><snippet>x86_64</snippet></ROW><ROW><id>7130510</id><snippet>ppc</snippet></ROW><ROW><id>7130510</id><snippet>i386</snippet></ROW><ROW><id>7130510</id><snippet>ppc</snippet></ROW><ROW><id>7130510</id><snippet>easy_install</snippet></ROW><ROW><id>7130510</id><snippet>setuptools</snippet></ROW><ROW><id>7130510</id><snippet>Distribute</snippet></ROW><ROW><id>7130510</id><snippet>easy_install</snippet></ROW><ROW><id>7130510</id><snippet>/usr/bin</snippet></ROW><ROW><id>7130510</id><snippet>easy_install</snippet></ROW><ROW><id>7130510</id><snippet>./bin</snippet></ROW><ROW><id>7130510</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>7130510</id><snippet>.bash_profile</snippet></ROW><ROW><id>7130510</id><snippet>$ echo $PATH
/Library/Frameworks/Python.framework/Versions/2.6/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin
$ which python python2.6
/Library/Frameworks/Python.framework/Versions/2.6/bin/python
/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6
$ python -V
Python 2.6.6
$ python2.6 -V
Python 2.6.6
$ /usr/bin/python -V
Python 2.6.1
$ /usr/bin/python2.6 -V
Python 2.6.1
#
# remove python.org Python 2.6 from PATH
#
$ export PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin
$ which python python2.6
/usr/bin/python
/usr/bin/python2.6
$ python -V
Python 2.6.1
$ python2.6 -V
Python 2.6.1
</snippet></ROW><ROW><id>7130614</id><snippet>global</snippet></ROW><ROW><id>7130614</id><snippet>def recv_server():
    global number
    global s     #the tcp socket
    global sockets
    sockets[number], sockname = s.accept()
    logindata = sockets[number].recv(65535)
    logindata = logindata.decode()
    ...
</snippet></ROW><ROW><id>7130614</id><snippet>sockets</snippet></ROW><ROW><id>7130614</id><snippet>sockets = {}</snippet></ROW><ROW><id>7130614</id><snippet>exec</snippet></ROW><ROW><id>7130614</id><snippet>global</snippet></ROW><ROW><id>7130614</id><snippet>logindata</snippet></ROW><ROW><id>7130614</id><snippet>exec</snippet></ROW><ROW><id>7130647</id><snippet>mysql_store_result()</snippet></ROW><ROW><id>7130647</id><snippet>mysql_use_result()</snippet></ROW><ROW><id>7130877</id><snippet>db.define_table('t_wish',
    Field('id','id',
          represent=lambda id:SPAN(id,' ',A('view',_href=URL('wish_read',args=id)))),
</snippet></ROW><ROW><id>7130877</id><snippet># try:    
    wish_id = db.t_wish.insert(f_user_id = id, ...)
</snippet></ROW><ROW><id>7130877</id><snippet>db.define_table('t_wish',
    Field('id','id',
          represent=lambda value:SPAN(value,' ',A('view',_href=URL('wish_read',args=id)))),
</snippet></ROW><ROW><id>7130877</id><snippet># try:    
    wish_id = db.t_wish.insert(f_user_id = user_id, ....)
</snippet></ROW><ROW><id>7130978</id><snippet>NEW</snippet></ROW><ROW><id>7130978</id><snippet>MD5(NEW.products_model)</snippet></ROW><ROW><id>7130978</id><snippet>, 16)</snippet></ROW><ROW><id>7130978</id><snippet>RIGHT(string, number)</snippet></ROW><ROW><id>7130978</id><snippet>  NEW.model_hash = SHA2(NEW.products_model)
</snippet></ROW><ROW><id>7131142</id><snippet>with</snippet></ROW><ROW><id>7131142</id><snippet>with</snippet></ROW><ROW><id>7131142</id><snippet>with</snippet></ROW><ROW><id>7131142</id><snippet>with</snippet></ROW><ROW><id>7131506</id><snippet>listy = [2,2,1,3,4,2,1,2,3,4,5]
found = set()
for i in listy:
    if not i in found:
        print i, listy.count(i)
        found.add(i)
</snippet></ROW><ROW><id>7131506</id><snippet>2 4
1 2
3 2
4 2
5 1
</snippet></ROW><ROW><id>7131767</id><snippet>auth</snippet></ROW><ROW><id>7132085</id><snippet>pip</snippet></ROW><ROW><id>7132085</id><snippet>yolk</snippet></ROW><ROW><id>7132085</id><snippet>yolk</snippet></ROW><ROW><id>7132085</id><snippet>pip freeze</snippet></ROW><ROW><id>7132382</id><snippet>self.writer.writerow([s.encode('utf-8') for s in row])
</snippet></ROW><ROW><id>7133066</id><snippet>def save(url,path):
  g = urllib2.urlopen(url)
  with open(path, "w") as fH:
    fH.write(g.read())
</snippet></ROW><ROW><id>7133204</id><snippet>os.path.join(dir_name, base_filename + "." + filename_suffix)
</snippet></ROW><ROW><id>7133204</id><snippet>os.path.join()</snippet></ROW><ROW><id>7133204</id><snippet>os.path.join(dir_name, '.'.join((base_filename, filename_suffix)))
</snippet></ROW><ROW><id>7133204</id><snippet>dir_name='/home/me/dev/my_reports'
base_filename='daily_report'
filename_suffix = '.pdf'
os.path.join(dir_name, base_filename + filename_suffix)
</snippet></ROW><ROW><id>7133259</id><snippet>read</snippet></ROW><ROW><id>7133259</id><snippet>open</snippet></ROW><ROW><id>7133388</id><snippet># Try to import PIL in either of the two ways it can end up installed.
</snippet></ROW><ROW><id>7133388</id><snippet>from PIL import ImageFile as PILImageFile
</snippet></ROW><ROW><id>7133388</id><snippet>import ImageFile as PILImageFile
</snippet></ROW><ROW><id>7133388</id><snippet>&gt;&gt;&gt; import Image
</snippet></ROW><ROW><id>7133388</id><snippet>from PIL import Image</snippet></ROW><ROW><id>7133525</id><snippet>server {
    listen 80;
    server_name localhost;
    location /site_media  {
        root /media/; # Notice this is the /media folder that we create above
    }
    location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js|mov) {
        access_log   off;
        expires      30d; 
    }
    location / {
        # host and port to fastcgi server
        fastcgi_pass 127.0.0.1:8080;
        fastcgi_param PATH_INFO $fastcgi_script_name;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_param CONTENT_TYPE $content_type;
        fastcgi_param CONTENT_LENGTH $content_length;
        fastcgi_pass_header Authorization;
        fastcgi_intercept_errors off;
        }
}
</snippet></ROW><ROW><id>7133628</id><snippet>class Wrap:

    def __init__(self, val):
        self.val = val

    def unlink(self):
        val = self.val
        self.val = None
        return val
</snippet></ROW><ROW><id>7133628</id><snippet>def grouper(iterable, chunksize):
    i = iter(iterable)
    while True:
        chunk = Wrap(list(itertools.islice(i, int(chunksize))))
        if not chunk.val:
            break
        yield chunk.unlink()
</snippet></ROW><ROW><id>7133628</id><snippet>pop()</snippet></ROW><ROW><id>7133704</id><snippet>from string import digits, ascii_uppercase, ascii_lowercase
from itertools import product

chars = digits + ascii_uppercase + ascii_lowercase

for n in range(1, 4 + 1):
    for comb in product(chars, repeat=n):
        print ''.join(comb)
</snippet></ROW><ROW><id>7134033</id><snippet>import numpy as np
</snippet></ROW><ROW><id>7134033</id><snippet>class A:

    def __init__(self):
        self.data = np.array([])

    def update(self, row):
        self.data = np.append(self.data, row)

    def finalize(self):
        return np.reshape(self.data, newshape=(self.data.shape[0]/5, 5))
</snippet></ROW><ROW><id>7134033</id><snippet>class B:

    def __init__(self):
        self.data = []

    def update(self, row):
        for r in row:
            self.data.append(r)

    def finalize(self):
        return np.reshape(self.data, newshape=(len(self.data)/5, 5))
</snippet></ROW><ROW><id>7134033</id><snippet>class C:

    def __init__(self):
        self.data = np.zeros((100,))
        self.capacity = 100
        self.size = 0

    def update(self, row):
        for r in row:
            self.add(r)

    def add(self, x):
        if self.size == self.capacity:
            self.capacity *= 4
            newdata = np.zeros((self.capacity,))
            newdata[:self.size] = self.data
            self.data = newdata

        self.data[self.size] = x
        self.size += 1

    def finalize(self):
        data = self.data[:self.size]
        return np.reshape(data, newshape=(len(data)/5, 5))
</snippet></ROW><ROW><id>7134033</id><snippet>x = C()
for i in xrange(100000):
    x.update([i])
</snippet></ROW><ROW><id>7134192</id><snippet>/usr/local</snippet></ROW><ROW><id>7134192</id><snippet>/usr/lib</snippet></ROW><ROW><id>7134192</id><snippet>easy_install</snippet></ROW><ROW><id>7134192</id><snippet>pip</snippet></ROW><ROW><id>7134321</id><snippet>import datetime
HelpRequest.objects.filter(creation_time__gte=(datetime.datetime.now() - datetime.timedelta(minutes=5)))
</snippet></ROW><ROW><id>7134355</id><snippet>MemoryError</snippet></ROW><ROW><id>7134355</id><snippet>fileobject.read()</snippet></ROW><ROW><id>7134501</id><snippet>lambda</snippet></ROW><ROW><id>7134501</id><snippet>for</snippet></ROW><ROW><id>7134501</id><snippet>lambda</snippet></ROW><ROW><id>7134501</id><snippet>unicode</snippet></ROW><ROW><id>7134501</id><snippet>"\newline"</snippet></ROW><ROW><id>7134501</id><snippet>unicode.translate</snippet></ROW><ROW><id>7134501</id><snippet>bad_chars = {u"\n": u" ", u"\b": u" ", u"\f": u" ", u"\r": u" ", u"\t": u" ", u"\v": u" ", u"\x00": u" "}
bad_chars_table = dict((ord(k), v) for k, v in bad_chars.iteritems())
translator = lambda s: s.translate(bad_chars_table)
print translator(u"here\nwe\tgo")
</snippet></ROW><ROW><id>7134501</id><snippet>   translator = lambda s: re.sub(r'[\n\b\f\r\t\v\x00]', ' ', s)
</snippet></ROW><ROW><id>7134501</id><snippet>reduce</snippet></ROW><ROW><id>7134501</id><snippet>translator = lambda s: reduce(lambda x, (from, to): x.replace(from, to), bad_chars.iteritems(), s)
</snippet></ROW><ROW><id>7134501</id><snippet>def translator(s):
    for original, replacement in bad_chars.iteritems():
        s = s.replace(original, replacement)
    return s
</snippet></ROW><ROW><id>7134506</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7134506</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>7134506</id><snippet>which python</snippet></ROW><ROW><id>7134506</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>7134506</id><snippet>easy_install-2.5 -U -v beautifulsoup==3.2
</snippet></ROW><ROW><id>7134506</id><snippet>/usr/bin/easy_install-2.5 -U -v beautifulsoup==3.2
</snippet></ROW><ROW><id>7134533</id><snippet>posts = Post.objects.filter(user__following__user=request.user)
</snippet></ROW><ROW><id>7134596</id><snippet>&gt;&gt;&gt; a =  ['2', '3', '2', '3', '4', '2', '4', '2', '2', '3', '2', '3', '4']
&gt;&gt;&gt; b =  [2, 3, 4, 5, 6, 4, 2, 1, 1, 2, 3, 4, 5]
&gt;&gt;&gt; dict(zip(a, b))
{'3': 4, '2': 3, '4': 5}
&gt;&gt;&gt; multidict.MultiDict(zip(a, b))
MultiDict([('2', 2), ('3', 3), ('2', 4), ('3', 5), ('4', 6), ('2', 4), ('4', 2),
 ('2', 1), ('2', 1), ('3', 2), ('2', 3), ('3', 4), ('4', 5)])
</snippet></ROW><ROW><id>7134596</id><snippet>paste.util.multidict.MultiDict</snippet></ROW><ROW><id>7134596</id><snippet>pip install paste</snippet></ROW><ROW><id>7134763</id><snippet>def paths(self, acc=[]):
    if self.is_leaf():
        yield [self.node]+acc

    for child in self.children:
        for leaf_path in child.paths([self.node]+acc): # these two
            yield leaf_path                            # lines do that
</snippet></ROW><ROW><id>7134874</id><snippet>class NewBaseModel(models.Model):
    user = models.ForeignKey(User)
    another_field = models.CharField(max_length=1000)

    class Meta:
        abstract = True
</snippet></ROW><ROW><id>7134986</id><snippet>def myrepl(match):
    num = int(match.group(1))
    # Do something here
    return str(num) # this will replace the $url[2]

mystr = "this is $url[2] a string"

print re.sub(r'\$url\[([0-9])\]', myrepl, mystr, flags=re.IGNORECASE)
</snippet></ROW><ROW><id>7135612</id><snippet>.profile</snippet></ROW><ROW><id>7135612</id><snippet>.bash_rc</snippet></ROW><ROW><id>7135612</id><snippet>export PYTHONSTARTUP=~/.python_rc.py
</snippet></ROW><ROW><id>7135612</id><snippet>.python_rc.py</snippet></ROW><ROW><id>7135612</id><snippet>def profile():
    global Profile
    import sys
    if "path/to/your/project" not in sys.path:
        sys.path.append("path/to/your/project")
    from userprofile.models import Profile
</snippet></ROW><ROW><id>7135612</id><snippet>profile()</snippet></ROW><ROW><id>7135612</id><snippet>Profile</snippet></ROW><ROW><id>7135680</id><snippet>.pyc</snippet></ROW><ROW><id>7135680</id><snippet>import</snippet></ROW><ROW><id>7135680</id><snippet>__main__</snippet></ROW><ROW><id>7135680</id><snippet>.class</snippet></ROW><ROW><id>7135680</id><snippet>import</snippet></ROW><ROW><id>7135680</id><snippet>jythonc</snippet></ROW><ROW><id>7135844</id><snippet>string.find</snippet></ROW><ROW><id>7135844</id><snippet>string.find('banana', 'nana', index)</snippet></ROW><ROW><id>7135844</id><snippet>0</snippet></ROW><ROW><id>7135844</id><snippet>False</snippet></ROW><ROW><id>7135844</id><snippet>index</snippet></ROW><ROW><id>7135844</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; help(string.find)
Help on function find in module string:

find(s, *args)
    find(s, sub [, start [, end]]) -&gt; int

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7135844</id><snippet>index = string.find('banana', 'nana', 0) + 1 # index = 3
index = string.find('banana', 'nana', 3) + 1 # index = 0
</snippet></ROW><ROW><id>7135844</id><snippet>-1</snippet></ROW><ROW><id>7135844</id><snippet>string.find</snippet></ROW><ROW><id>7135846</id><snippet>sort(my_list_of_objects, key=my_number_giving_function)
</snippet></ROW><ROW><id>7136177</id><snippet>class Base(object):
    cc = '' # this won't get printed
    def __init__(self):
        # print SubClass' new attribues' names ('aa' and 'bb' for example)
        print set(dir(self.__class__)) - set(dir(Base))

class SubClass(Base):
    aa = ''
    bb = ''


foo = SubClass()
# set(['aa', 'bb'])
</snippet></ROW><ROW><id>7136177</id><snippet>self.__class__</snippet></ROW><ROW><id>7136177</id><snippet>self</snippet></ROW><ROW><id>7136177</id><snippet>class Base(object):
    cc = ''
    def __init__(self):
        print set(dir(self)) - set(dir(Base))
        # print SubClass' new attribues' names ('aa' and 'bb' for example)

class SubClass(Base):
    def __init__(self):
        self.dd = ''
        super(SubClass, self).__init__()
    aa = ''
    bb = ''


foo = SubClass()
# set(['aa', 'dd', 'bb'])
</snippet></ROW><ROW><id>7136177</id><snippet>__class__</snippet></ROW><ROW><id>7136178</id><snippet>connect("~/Library/Application\ Support/Something/something.sqldb")
</snippet></ROW><ROW><id>7136178</id><snippet>connect</snippet></ROW><ROW><id>7136178</id><snippet>connect ( os.path.expanduser("~/........") )
</snippet></ROW><ROW><id>7136226</id><snippet>itertools.product</snippet></ROW><ROW><id>7136226</id><snippet>from itertools import product

for x, y, z in product(xrange(xs), xrange(zs), xrange(ys)):
    vp = [x * vs, y * vs, z * vs]
    v = Cube(vp)
</snippet></ROW><ROW><id>7136226</id><snippet>range</snippet></ROW><ROW><id>7136226</id><snippet>range</snippet></ROW><ROW><id>7136226</id><snippet>xrange</snippet></ROW><ROW><id>7136226</id><snippet>product</snippet></ROW><ROW><id>7136226</id><snippet>vs</snippet></ROW><ROW><id>7136226</id><snippet>Cube</snippet></ROW><ROW><id>7136415</id><snippet>super()</snippet></ROW><ROW><id>7136415</id><snippet>self</snippet></ROW><ROW><id>7136415</id><snippet>__init__()</snippet></ROW><ROW><id>7136415</id><snippet>super()</snippet></ROW><ROW><id>7136439</id><snippet>is_valid = any(o.test == test for o in object_list)
</snippet></ROW><ROW><id>7136439</id><snippet>any(iterable)</snippet></ROW><ROW><id>7136439</id><snippet>True</snippet></ROW><ROW><id>7136439</id><snippet>iterable</snippet></ROW><ROW><id>7136439</id><snippet>True</snippet></ROW><ROW><id>7136439</id><snippet>False</snippet></ROW><ROW><id>7136439</id><snippet>object_list</snippet></ROW><ROW><id>7136441</id><snippet>self.button_list += Button(self, text = txt, command = fcn)
</snippet></ROW><ROW><id>7136441</id><snippet>self.button_list += [Button(self, text = txt, command = fcn)]
</snippet></ROW><ROW><id>7136441</id><snippet>special_characters</snippet></ROW><ROW><id>7136441</id><snippet>int</snippet></ROW><ROW><id>7136441</id><snippet>self.text_entry.insert(INSERT, char)</snippet></ROW><ROW><id>7136441</id><snippet>char</snippet></ROW><ROW><id>7136441</id><snippet>str</snippet></ROW><ROW><id>7136441</id><snippet>add_char</snippet></ROW><ROW><id>7136441</id><snippet>def add_char_event(self, char):
    def add_char(self = self, event = None):
        self.text_entry.insert(INSERT, str(char))
    return add_char
</snippet></ROW><ROW><id>7136441</id><snippet>special_characters</snippet></ROW><ROW><id>7136441</id><snippet>    for char in special_characters:
        self.special_chars.create_button(char,
             self.add_char_event(str(special_characters[char])))
</snippet></ROW><ROW><id>7136489</id><snippet>l = [['Something', 'Something else', 'Another thing'],
     ['Other things', 'More data', 'Element'],
     ['Stuff', 'data', 'etc']]
sub1 = [
    [s.ljust(max(len(i) for i in column)) for s in column]
    for column in zip(*l)]
for p in [" ".join(row) for row in zip(*sub1)]: print p
</snippet></ROW><ROW><id>7136489</id><snippet>zip(*l)</snippet></ROW><ROW><id>7136489</id><snippet>zip()</snippet></ROW><ROW><id>7136489</id><snippet>[['Something', 'Other things', 'Stuff'], ['Something else', 'More data', 'data'], ...]</snippet></ROW><ROW><id>7136489</id><snippet>column</snippet></ROW><ROW><id>7136489</id><snippet>column</snippet></ROW><ROW><id>7136489</id><snippet>ljust()</snippet></ROW><ROW><id>7136489</id><snippet>" "</snippet></ROW><ROW><id>7136519</id><snippet>print "We'd have %d beans, %d jars, and %d crabapples." % secret_formula(start_pont
</snippet></ROW><ROW><id>7136519</id><snippet>SyntaxError</snippet></ROW><ROW><id>7136617</id><snippet>u'\u0020'</snippet></ROW><ROW><id>7136617</id><snippet>u'\u0020' == ' '</snippet></ROW><ROW><id>7136708</id><snippet>for i in whois.emails:
  print i # you may see print(i) because in Python 3 print is a function.
          # and it does not matter in Python &lt; 3
</snippet></ROW><ROW><id>7136708</id><snippet>print whois.emails
</snippet></ROW><ROW><id>7137007</id><snippet>&lt;div id="{{ id }}"&gt;&lt;/div&gt;
{{ layer_html|join:"" }}
&lt;script type="text/javascript"&gt;
    var map = new olwidget.Map("{{ id }}", [
            {{ layer_js|join:"," }}
        ], 
        {{ map_opts|safe }}
    ); // got the ref now :)

    // do your customization here
&lt;/script&gt;
</snippet></ROW><ROW><id>7137353</id><snippet>headers = [ ('JFIF', 6, 'jpg'), ('GIF', 0, 'gif'), ('PNG', 1, 'png') ] 
...
string.find(line, flag)
</snippet></ROW><ROW><id>7137353</id><snippet>headers = [ (b'JFIF', 6, 'jpg'), (b'GIF', 0, 'gif'), (b'PNG', 1, 'png') ] 
...
line.find(flag)
</snippet></ROW><ROW><id>7137353</id><snippet>string.</snippet></ROW><ROW><id>7137353</id><snippet>b''</snippet></ROW><ROW><id>7137484</id><snippet>PySys_GetObject("path")</snippet></ROW><ROW><id>7137484</id><snippet>sys.path</snippet></ROW><ROW><id>7137834</id><snippet>']'</snippet></ROW><ROW><id>7137834</id><snippet>'-'</snippet></ROW><ROW><id>7137869</id><snippet>self.one</snippet></ROW><ROW><id>7137869</id><snippet>self.two</snippet></ROW><ROW><id>7137869</id><snippet>self.button</snippet></ROW><ROW><id>7137869</id><snippet>name_callbacks=(('One',self.callback_one),
                ('Two',self.callback_two),
                ...,
                ('Ten',self.callback_ten))
self.button=[]
for i,(name,callback) in enumerate(name_callbacks):
    self.button.append(Button(frame, text=name, command=callback))
    row,col=divmod(i,5)
    self.button[i].grid(sticky=W+E+N+S, row=row, column=col, padx=1, pady=1)
</snippet></ROW><ROW><id>7137869</id><snippet>def callback(self,i): # This is the callback factory. Calling it returns a function.
    def _callback():
        print(i) # i tells you which button has been pressed.
    return _callback

def __init__(self):
    names=('One','Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten')
    self.button=[]
    for i,name in enumerate(names):
        self.button.append(Button(frame, text=name, command=self.callback(i+1)))
        row,col=divmod(i,5)
        self.button[i].grid(sticky=W+E+N+S, row=row, column=col, padx=1, pady=1)
</snippet></ROW><ROW><id>7138407</id><snippet>Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; float(10**1000)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: long int too large to convert to float
</snippet></ROW><ROW><id>7138407</id><snippet>&gt;&gt;&gt; 10.0**1000
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: (34, 'Result too large')
&gt;&gt;&gt; 10j**1000
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: complex exponentiation
</snippet></ROW><ROW><id>7138407</id><snippet>&gt;&gt;&gt; xrange(10**100)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: Python int too large to convert to C long
</snippet></ROW><ROW><id>7138571</id><snippet>re.search()</snippet></ROW><ROW><id>7138571</id><snippet>re.match()</snippet></ROW><ROW><id>7138571</id><snippet>string = "15++12"
if re.search("[-+*/][-+*/]+",string):
    # raise an error here
</snippet></ROW><ROW><id>7138571</id><snippet>string = "15++12"
if re.search("[-+*/]{2,}",string):
    # raise an error here
</snippet></ROW><ROW><id>7138571</id><snippet>{2,}</snippet></ROW><ROW><id>7138587</id><snippet>pickle.load(open('syncDB.txt', 'r+b'))
</snippet></ROW><ROW><id>7138587</id><snippet>pickle</snippet></ROW><ROW><id>7138597</id><snippet>nums</snippet></ROW><ROW><id>7138597</id><snippet>'0123456789'</snippet></ROW><ROW><id>7138597</id><snippet>columnList = Group(delimitedList(nums))
</snippet></ROW><ROW><id>7138597</id><snippet>columnList</snippet></ROW><ROW><id>7138597</id><snippet>'0123456789'</snippet></ROW><ROW><id>7138597</id><snippet>nums</snippet></ROW><ROW><id>7138597</id><snippet>Word(nums)</snippet></ROW><ROW><id>7138597</id><snippet>integer = Word(nums)
columnList = Group(delimitedList(integer))
</snippet></ROW><ROW><id>7138705</id><snippet>myfile.close</snippet></ROW><ROW><id>7138705</id><snippet>with</snippet></ROW><ROW><id>7138705</id><snippet>with</snippet></ROW><ROW><id>7138705</id><snippet>myfile</snippet></ROW><ROW><id>7138705</id><snippet>close</snippet></ROW><ROW><id>7138705</id><snippet>close()</snippet></ROW><ROW><id>7138705</id><snippet>with</snippet></ROW><ROW><id>7138705</id><snippet>with</snippet></ROW><ROW><id>7138705</id><snippet>with open('/path/to/filename.txt', mode='wt', encoding='utf-8') as myfile:
    myfile.write('\n'.join(lines))
</snippet></ROW><ROW><id>7138705</id><snippet>print</snippet></ROW><ROW><id>7138705</id><snippet>file.write</snippet></ROW><ROW><id>7138705</id><snippet>'\n'.join(lines)</snippet></ROW><ROW><id>7138705</id><snippet>lines</snippet></ROW><ROW><id>7138705</id><snippet>    myfile.write('\n'.join(str(line) for line in lines))
</snippet></ROW><ROW><id>7138705</id><snippet>['element1', 'element2', 'element3']
</snippet></ROW><ROW><id>7138705</id><snippet>def save_to_file(*text):
</snippet></ROW><ROW><id>7138705</id><snippet>[['element1', 'element2', 'element3']]
</snippet></ROW><ROW><id>7138705</id><snippet>*</snippet></ROW><ROW><id>7138705</id><snippet>def save_to_file(*text):

    with open('/path/to/filename.txt', mode='wt', encoding='utf-8') as myfile:
        for lines in text:
            myfile.write('\n'.join(str(line) for line in lines))
            myfile.write('\n')
</snippet></ROW><ROW><id>7138705</id><snippet>*</snippet></ROW><ROW><id>7138705</id><snippet>b</snippet></ROW><ROW><id>7138705</id><snippet>t</snippet></ROW><ROW><id>7138892</id><snippet> keys_list = ['host',...]
 host_info = dict(zip(['stackoverflow.com', '213.213.214.213', 'comments', 'desriprion', 'age'], keys_list))
</snippet></ROW><ROW><id>7138892</id><snippet>host_info = {'host':'stackoverflow.com, 'ip':'213.213.214.213',...}
</snippet></ROW><ROW><id>7138892</id><snippet>pop</snippet></ROW><ROW><id>7138892</id><snippet>host_info.pop('host')
</snippet></ROW><ROW><id>7138892</id><snippet>host_info.pop('host',None)
</snippet></ROW><ROW><id>7138892</id><snippet>if 'host' in host_info:
    del host_info['host']
</snippet></ROW><ROW><id>7138892</id><snippet> host = host_info['host']
</snippet></ROW><ROW><id>7139199</id><snippet>/cities/(?P&lt;city&gt;[^/]+)
/users/(?P&lt;user&gt;[^/]+)
</snippet></ROW><ROW><id>7139199</id><snippet>[-A-Za-z_]+</snippet></ROW><ROW><id>7139199</id><snippet>\w</snippet></ROW><ROW><id>7139199</id><snippet>/(?P&lt;id&gt;\d+)
/(?P&lt;city&gt;[-\w]+)
</snippet></ROW><ROW><id>7139297</id><snippet>str</snippet></ROW><ROW><id>7139297</id><snippet>bytes</snippet></ROW><ROW><id>7139297</id><snippet>with open("lt.txt", 'at', encoding='utf8') as f:
    f.write(hex + '\n') # or print(hex, file=f)
    f.close()
</snippet></ROW><ROW><id>7139297</id><snippet>str</snippet></ROW><ROW><id>7139297</id><snippet>bytes</snippet></ROW><ROW><id>7139297</id><snippet>hex=hex.encode('utf-8')
with open("lt.txt", 'ab') as f:
    f.write(hex + b'\n')   # note the b for bytes
    f.close()
</snippet></ROW><ROW><id>7139297</id><snippet>    f.write((hex + '\n').encode('utf-8'))
</snippet></ROW><ROW><id>7139370</id><snippet>"Muhammed went to the store and said \"Can I have some pickles please\""
</snippet></ROW><ROW><id>7139370</id><snippet>'Muhammed went to the store and said "Can I have some pickles please"'
</snippet></ROW><ROW><id>7139454</id><snippet>a = a[3:]
</snippet></ROW><ROW><id>7139454</id><snippet>&gt;&gt;&gt; a = arange(10, 20)
&gt;&gt;&gt; a[[1, 4, 5]]
array([11, 14, 15])
</snippet></ROW><ROW><id>7139454</id><snippet>a[[1,4,5]]</snippet></ROW><ROW><id>7139719</id><snippet>/*
  The claim algorithm for Alan files is:
   * For Alan 3, check for the magic word
   * load the file length in blocks
   * check that the file length is correct
   * For alan 2, each word between byte address 24 and 81 is a
      word address within the file, so check that they're all within
      the file
   * Locate the checksum and verify that it is correct
*/
</snippet></ROW><ROW><id>7139719</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; 
&gt;&gt;&gt; alan2 = urllib2.urlopen("http://ifarchive.plover.net/if-archive/games/competition2001/alan/chasing/chasing.acd").read(4)
&gt;&gt;&gt; alan3 = urllib2.urlopen("http://mirror.ifarchive.org/if-archive/games/competition2006/alan/enterthedark/EnterTheDark.a3c").read(4)
&gt;&gt;&gt; 
&gt;&gt;&gt; alan2
'\x02\x08\x01\x00'
&gt;&gt;&gt; alan3
'ALAN'
</snippet></ROW><ROW><id>7140226</id><snippet>mousePressEvent</snippet></ROW><ROW><id>7140226</id><snippet>FenixGui</snippet></ROW><ROW><id>7140226</id><snippet>def mousePressEvent(self, event):
    self.offset = event.pos()

def mouseMoveEvent(self, event):
    x=event.globalX()
    y=event.globalY()
    x_w = self.offset.x()
    y_w = self.offset.y()
    self.move(x-x_w, y-y_w)
</snippet></ROW><ROW><id>7140302</id><snippet>contrib\auth\__init__.py:80</snippet></ROW><ROW><id>7140302</id><snippet>def get_user(request):
    from django.contrib.auth.models import AnonymousUser
    try:
        user_id = request.session[SESSION_KEY]
        backend_path = request.session[BACKEND_SESSION_KEY]
        backend = load_backend(backend_path)
        user = backend.get_user(user_id) or AnonymousUser()
    except KeyError:
        user = AnonymousUser()
    return user
</snippet></ROW><ROW><id>7140615</id><snippet>'label': prod.name</snippet></ROW><ROW><id>7140615</id><snippet>'label': prod.name.decode("cp1252")</snippet></ROW><ROW><id>7140615</id><snippet>cp1252</snippet></ROW><ROW><id>7140863</id><snippet>ff1</snippet></ROW><ROW><id>7140863</id><snippet>FF01</snippet></ROW><ROW><id>7140863</id><snippet>FF01
ff2
ff3
FF010
FF011
ff20
ff21
ff23
gb20
gb10
gh23
</snippet></ROW><ROW><id>7140956</id><snippet>terminal length 0</snippet></ROW><ROW><id>7140956</id><snippet>show version</snippet></ROW><ROW><id>7140956</id><snippet>from Exscript.util.interact import read_login
from Exscript.protocols import SSH2

account = read_login()              
conn = SSH2()                       
conn.connect('192.168.1.11')     
conn.login(account)  

conn.execute('terminal length 0')           

conn.execute('show version')
print conn.response

conn.send('exit\r')               
conn.close()  
</snippet></ROW><ROW><id>7141051</id><snippet>function MyClass() {
}
</snippet></ROW><ROW><id>7141051</id><snippet>MyClass.prototype = {
    property: 1,
    foo: function(bar) {
    }
};
</snippet></ROW><ROW><id>7141051</id><snippet>var object = new MyClass;
object.foo();
</snippet></ROW><ROW><id>7141051</id><snippet>MyClass.staticMethod = function() {};

MyClass.staticMethod();
</snippet></ROW><ROW><id>7141051</id><snippet>function SubClass() {
}
SubClass.prototype = new MyClass;
SubClass.prototype.bar = function() {
};

var object = new SubClass;
object.foo();
object.bar();
</snippet></ROW><ROW><id>7141107</id><snippet>struct</snippet></ROW><ROW><id>7141107</id><snippet>In [1]: import struct

In [2]: magic = b'\xcf\xfa\xed\xfe'

In [3]: decoded = struct.unpack('&lt;I', magic)[0]

In [4]: hex(decoded)
Out[4]: '0xfeedfacf'
</snippet></ROW></DATA>