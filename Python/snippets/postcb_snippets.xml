<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>12250825</id><snippet>import pwht.models
</snippet></ROW><ROW><id>12250825</id><snippet>from pwht.models import Device
</snippet></ROW><ROW><id>12250825</id><snippet>pwht</snippet></ROW><ROW><id>12250825</id><snippet>settings.py</snippet></ROW><ROW><id>12250825</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>12250825</id><snippet>pwht</snippet></ROW><ROW><id>12250825</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>12250937</id><snippet>row</snippet></ROW><ROW><id>12250937</id><snippet>x = [1, 2, 3]
for x in lst:
    x = # code
</snippet></ROW><ROW><id>12250937</id><snippet>x</snippet></ROW><ROW><id>12250937</id><snippet>x</snippet></ROW><ROW><id>12250937</id><snippet>x</snippet></ROW><ROW><id>12250937</id><snippet>lst = [[1, 2], [3, 4]]
for x in lst:
    x.append(10)
</snippet></ROW><ROW><id>12250937</id><snippet>[[1, 2, 10], [3, 4, 10]]</snippet></ROW><ROW><id>12250981</id><snippet>def load(filename):
    features = []
    with codecs.open(filename, 'rb',  'utf-8') as f:
        return f.readlines()
</snippet></ROW><ROW><id>12251248</id><snippet>frameInfo = pFrameInfo.contents
...
print "pFrame Info: %r   " % frameInfo.nWidth
</snippet></ROW><ROW><id>12251659</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>12251659</id><snippet>from contextlib import contextmanager

@contextmanager
def _mute():
    with settings(warn_only='true'):
        with hide('running', 'stdout', 'stderr', 'warnings'):
            yield
</snippet></ROW><ROW><id>12251659</id><snippet>_mute</snippet></ROW><ROW><id>12251659</id><snippet>def some_remote_task():
    # Run a remote task silently
    with _mute():
        output = remote("uname -a")
</snippet></ROW><ROW><id>12251659</id><snippet>*args</snippet></ROW><ROW><id>12251659</id><snippet>def _mute(fabric_cmd, *args):
    with settings(warn_only='true'):
        with hide('running', 'stdout', 'stderr', 'warnings'):
            return fabric_cmd(*args)

def some_remote_task():
    # Run a remote task silently
    output = _mute(remote, 'uname -a')
</snippet></ROW><ROW><id>12251659</id><snippet>*args</snippet></ROW><ROW><id>12252575</id><snippet>return</snippet></ROW><ROW><id>12252575</id><snippet>n if n&lt;m else m</snippet></ROW><ROW><id>12252575</id><snippet>def minn(n,m):
    return n if n&lt;m else m
</snippet></ROW><ROW><id>12252672</id><snippet>itertools.groupby</snippet></ROW><ROW><id>12252672</id><snippet>from itertools import groupby, imap

list1 = ["abc.1", "abc.2", "abc.3", "abc.7", "xyz.1", "xyz.3", "xyz.11", "ghj.1", "thj.1"]

def break_up(s):
    a, b = s.split(".")
    return a, int(b)

def prefix(broken_up): return broken_up[0]
def suffix(broken_up): return broken_up[1]

result = []
for key, sub in groupby(imap(break_up, list1), prefix):
    result.append((key, tuple(imap(suffix, sub))))

print result
</snippet></ROW><ROW><id>12252672</id><snippet>[('abc', (1, 2, 3, 7)), ('xyz', (1, 3, 11)), ('ghj', (1,)), ('thj', (1,))]
</snippet></ROW><ROW><id>12252752</id><snippet>os.chdir</snippet></ROW><ROW><id>12252752</id><snippet>local</snippet></ROW><ROW><id>12252752</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12252752</id><snippet>sys.path</snippet></ROW><ROW><id>12252752</id><snippet>import sys
sys.path.append(os.path.expanduser("~/local"))
import local_settings
</snippet></ROW><ROW><id>12252786</id><snippet>In [103]: print data
EUR MS 3M;20111025;7d;1.1510
EUR MS 3M;20111024;7d;1.1530
EUR MS 3M;20111025;1m;1.1580
EUR MS 3M;20111024;1m;1.1590

In [104]: frame = pd.read_csv(StringIO(data), sep=';', 
                              names=['frame_name', 'index', 'column', 'value'])
In [105]: name = frame.ix[0, 'frame_name']

In [106]: rs = frame.ix[:, 1:].pivot('index', 'column', 'value')

In [107]: rs.name = name

In [108]: rs
Out[108]:
column       1m     7d
index
20111024  1.159  1.153
20111025  1.158  1.151
</snippet></ROW><ROW><id>12252958</id><snippet>In [423]: d = """\
timestamp data
1283346000062 a
1283346000062 b
1283346000062 c
1283346000062 d
1283346000300 e
"""

In [424]: fromtimestamp = lambda x:datetime.fromtimestamp(int(x) / 1000.)

In [425]: df = pandas.read_csv(StringIO(d), sep='\s+', converters={'timestamp': fromtimestamp}).set_index('timestamp')

In [426]: df.index
Out[426]:
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2010-09-01 15:00:00.062000, ..., 2010-09-01 15:00:00.300000]
Length: 5, Freq: None, Timezone: None

In [427]: df
Out[427]:
                           data
timestamp
2010-09-01 15:00:00.062000    a
2010-09-01 15:00:00.062000    b
2010-09-01 15:00:00.062000    c
2010-09-01 15:00:00.062000    d
2010-09-01 15:00:00.300000    e
</snippet></ROW><ROW><id>12253097</id><snippet>Popen</snippet></ROW><ROW><id>12253097</id><snippet>PATH</snippet></ROW><ROW><id>12253097</id><snippet>u"..."</snippet></ROW><ROW><id>12253097</id><snippet>Popen</snippet></ROW><ROW><id>12253097</id><snippet>PyUnicode_Check</snippet></ROW><ROW><id>12253097</id><snippet>PyString_Check</snippet></ROW><ROW><id>12253208</id><snippet>loadfile</snippet></ROW><ROW><id>12253208</id><snippet>self.filename = ...</snippet></ROW><ROW><id>12253208</id><snippet>self.filename</snippet></ROW><ROW><id>12253208</id><snippet>loadfile</snippet></ROW><ROW><id>12253208</id><snippet>filename</snippet></ROW><ROW><id>12253208</id><snippet>filename</snippet></ROW><ROW><id>12253254</id><snippet>'Non-ASCII value containing UTF8: \xc2\xb1'.decode('utf8')
</snippet></ROW><ROW><id>12253254</id><snippet>u''</snippet></ROW><ROW><id>12253254</id><snippet>u'Technical Diploma (Â±12 years)'
</snippet></ROW><ROW><id>12253265</id><snippet>vector&lt;vector&lt;Point&gt; &gt; squares</snippet></ROW><ROW><id>12253265</id><snippet>main()</snippet></ROW><ROW><id>12253265</id><snippet>#include "highgui.h"
#include "cv.h"

#include &lt;iostream&gt;
#include &lt;math.h&gt;
#include &lt;string.h&gt;

using namespace cv;
using namespace std;

void help()
{
        cout &lt;&lt;
        "\nA program using pyramid scaling, Canny, contours, contour simpification and\n"
        "memory storage (it's got it all folks) to find\n"
        "squares in a list of images pic1-6.png\n"
        "Returns sequence of squares detected on the image.\n"
        "the sequence is stored in the specified memory storage\n"
        "Call:\n"
        "./squares\n"
    "Using OpenCV version %s\n" &lt;&lt; CV_VERSION &lt;&lt; "\n" &lt;&lt; endl;
}


int thresh = 70, N = 2; 
const char* wndname = "Square Detection Demo";

// helper function:
// finds a cosine of angle between vectors
// from pt0-&gt;pt1 and from pt0-&gt;pt2
double angle( Point pt1, Point pt2, Point pt0 )
{
    double dx1 = pt1.x - pt0.x;
    double dy1 = pt1.y - pt0.y;
    double dx2 = pt2.x - pt0.x;
    double dy2 = pt2.y - pt0.y;
    return (dx1*dx2 + dy1*dy2)/sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}

// returns sequence of squares detected on the image.
// the sequence is stored in the specified memory storage
void findSquares( const Mat&amp; image, vector&lt;vector&lt;Point&gt; &gt;&amp; squares )
{
    squares.clear();

    Mat pyr, timg, gray0(image.size(), CV_8U), gray;

    // karlphillip: dilate the image so this technique can detect the white square,
    Mat out(image);
    dilate(out, out, Mat(), Point(-1,-1));
    // then blur it so that the ocean/sea become one big segment to avoid detecting them as 2 big squares.
    medianBlur(out, out, 3);

    // down-scale and upscale the image to filter out the noise
    pyrDown(out, pyr, Size(out.cols/2, out.rows/2));
    pyrUp(pyr, timg, out.size());
    vector&lt;vector&lt;Point&gt; &gt; contours;

    // find squares in every color plane of the image
    for( int c = 0; c &lt; 1; c++ )
    {
        int ch[] = {c, 0};
        mixChannels(&amp;timg, 1, &amp;gray0, 1, ch, 1);

        // try several threshold levels
        for( int l = 0; l &lt; N; l++ )
        {
            // hack: use Canny instead of zero threshold level.
            // Canny helps to catch squares with gradient shading
            if( l == 0 )
            {
                // apply Canny. Take the upper threshold from slider
                // and set the lower to 0 (which forces edges merging)
                Canny(gray0, gray, 0, thresh, 5);
                // dilate canny output to remove potential
                // holes between edge segments
                dilate(gray, gray, Mat(), Point(-1,-1));
            }
            else
            {
                // apply threshold if l!=0:
                //     tgray(x,y) = gray(x,y) &lt; (l+1)*255/N ? 255 : 0
                gray = gray0 &gt;= (l+1)*255/N;
            }

            // find contours and store them all as a list
            findContours(gray, contours, CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE);

            vector&lt;Point&gt; approx;

            // test each contour
            for( size_t i = 0; i &lt; contours.size(); i++ )
            {
                // approximate contour with accuracy proportional
                // to the contour perimeter
                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), true)*0.02, true);

                // square contours should have 4 vertices after approximation
                // relatively large area (to filter out noisy contours)
                // and be convex.
                // Note: absolute value of an area is used because
                // area may be positive or negative - in accordance with the
                // contour orientation
                if( approx.size() == 4 &amp;&amp;
                    fabs(contourArea(Mat(approx))) &gt; 1000 &amp;&amp;
                    isContourConvex(Mat(approx)) )
                {
                    double maxCosine = 0;

                    for( int j = 2; j &lt; 5; j++ )
                    {
                        // find the maximum cosine of the angle between joint edges
                        double cosine = fabs(angle(approx[j%4], approx[j-2], approx[j-1]));
                        maxCosine = MAX(maxCosine, cosine);
                    }

                    // if cosines of all angles are small
                    // (all angles are ~90 degree) then write quandrange
                    // vertices to resultant sequence
                    if( maxCosine &lt; 0.3 )
                        squares.push_back(approx);
                }
            }
        }
    }
}    

// the function draws all the squares in the image
void drawSquares( Mat&amp; image, const vector&lt;vector&lt;Point&gt; &gt;&amp; squares )
{
    for( size_t i = 1; i &lt; squares.size(); i++ )
    {
        const Point* p = &amp;squares[i][0];
        int n = (int)squares[i].size();
        polylines(image, &amp;p, &amp;n, 1, true, Scalar(0,255,0), 3, CV_AA);
    }

    imshow(wndname, image);
}    

int main(int argc, char** argv)
{
    if (argc &lt; 2)
    {
        cout &lt;&lt; "Usage: ./program &lt;file&gt;" &lt;&lt; endl;
        return -1;
    }

    static const char* names[] = { argv[1], 0 };

    help();
    namedWindow( wndname, 1 );
    vector&lt;vector&lt;Point&gt; &gt; squares;

    for( int i = 0; names[i] != 0; i++ )
    {
        Mat image = imread(names[i], 1);
        if( image.empty() )
        {
            cout &lt;&lt; "Couldn't load " &lt;&lt; names[i] &lt;&lt; endl;
            continue;
        }

        findSquares(image, squares);
        drawSquares(image, squares);
        imwrite("out.jpg", image);

        int c = waitKey();
        if( (char)c == 27 )
            break;
    }

    return 0;
}
</snippet></ROW><ROW><id>12253272</id><snippet>read</snippet></ROW><ROW><id>12253272</id><snippet>eval</snippet></ROW><ROW><id>12253272</id><snippet>eval</snippet></ROW><ROW><id>12253272</id><snippet>exec</snippet></ROW><ROW><id>12253272</id><snippet>print</snippet></ROW><ROW><id>12253272</id><snippet>read</snippet></ROW><ROW><id>12253272</id><snippet>print</snippet></ROW><ROW><id>12253272</id><snippet>eval</snippet></ROW><ROW><id>12253272</id><snippet>print</snippet></ROW><ROW><id>12253341</id><snippet>''.join()</snippet></ROW><ROW><id>12253341</id><snippet>&gt;&gt;&gt; '-'.join(map(str, range(3)))
'0-1-2'
&gt;&gt;&gt; ' and '.join(('bangers', 'mash'))
'bangers and mash'
</snippet></ROW><ROW><id>12253341</id><snippet>''</snippet></ROW><ROW><id>12253341</id><snippet>&gt;&gt;&gt; ''.join(('5', '4', 'apple', 'pie'))
'54applepie'
</snippet></ROW><ROW><id>12253341</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>12253341</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>12253341</id><snippet>&lt;i&gt;</snippet></ROW><ROW><id>12253341</id><snippet>&lt;a href=""&gt;</snippet></ROW><ROW><id>12253341</id><snippet>td.find(text=True)</snippet></ROW><ROW><id>12253341</id><snippet>''.join()</snippet></ROW><ROW><id>12253376</id><snippet>Counter</snippet></ROW><ROW><id>12253376</id><snippet>from collections import Counter as mset
</snippet></ROW><ROW><id>12253376</id><snippet>(mset("aabbcc") &amp; mset("aabd")).elements()
</snippet></ROW><ROW><id>12253376</id><snippet>&gt;&gt;&gt; intersection = mset("aabbcc") &amp; mset("aabd")
Counter({'a': 2, 'b': 1})

&gt;&gt;&gt; list(intersection.elements())
['a', 'a', 'b']

&gt;&gt;&gt; ''.join(intersection.elements())
'aab'
</snippet></ROW><ROW><id>12253376</id><snippet>''.join</snippet></ROW><ROW><id>12253376</id><snippet>list()</snippet></ROW><ROW><id>12253376</id><snippet>intersection.elements()</snippet></ROW><ROW><id>12253492</id><snippet>step = 10
count = MyModel.objects.count()/step
for i in xrange(count):
    for m in MyModel.objects.all()[i*step:(i+1)*step]:
        # doing something with m
</snippet></ROW><ROW><id>12253523</id><snippet>A = np.array([tuple(i) for i in initial_list],dtype=[('fitness',float),('point',(float,3))])
</snippet></ROW><ROW><id>12253523</id><snippet>initial_list = [[4.3, (2, 3, 4)], [3.2, (1, 3, 5)], ...]</snippet></ROW><ROW><id>12253523</id><snippet>initial_list</snippet></ROW><ROW><id>12253523</id><snippet>A['fitness']</snippet></ROW><ROW><id>12253523</id><snippet>A['point']</snippet></ROW><ROW><id>12253523</id><snippet>indices</snippet></ROW><ROW><id>12253523</id><snippet>A['point'][indices]</snippet></ROW><ROW><id>12253523</id><snippet>(n,3)</snippet></ROW><ROW><id>12253754</id><snippet>class placement(object):
  def __init__(self):
    self.placement_id = 0
    self.countries = []

class country(object):
  def __init__(self):
    self.country_id = 0
    self.creatives = []

class creative(object):
  def __init__(self)
    self.creative_id = 0
    self.matching_id = 0
    self.clicks = 0
    self.impressions = 0
    self.ctr = 0.0
    self.rank = 0.0  
</snippet></ROW><ROW><id>12254233</id><snippet>EnumChildWindows</snippet></ROW><ROW><id>12254233</id><snippet>win32gui.GetParent</snippet></ROW><ROW><id>12254291</id><snippet>U+003A</snippet></ROW><ROW><id>12254291</id><snippet>xmlns</snippet></ROW><ROW><id>12254291</id><snippet>html5lib</snippet></ROW><ROW><id>12254291</id><snippet>lxml</snippet></ROW><ROW><id>12254291</id><snippet>from lxml import etree

tree = etree.fromstring(resp_text)
print etree.tostring(tree, pretty_print=True)
</snippet></ROW><ROW><id>12254291</id><snippet>html5lib</snippet></ROW><ROW><id>12254291</id><snippet>xmlnsU0003Afoo</snippet></ROW><ROW><id>12254291</id><snippet>tree.nsmap</snippet></ROW><ROW><id>12254291</id><snippet>'foo'</snippet></ROW><ROW><id>12254291</id><snippet>&lt;html xmlns:foo="http://www.example.com/ns/foo"&gt;
    &lt;head&gt;
        &lt;title&gt;yo&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;test&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>12254291</id><snippet>html5lib</snippet></ROW><ROW><id>12254291</id><snippet>simpletree</snippet></ROW><ROW><id>12254291</id><snippet>tree = html5lib.parse(resp_text, namespaceHTMLElements=True)
print tree.toxml()
</snippet></ROW><ROW><id>12254291</id><snippet>xmlns</snippet></ROW><ROW><id>12254291</id><snippet>simpletree</snippet></ROW><ROW><id>12254291</id><snippet>ElementTree</snippet></ROW><ROW><id>12254291</id><snippet>xpath()</snippet></ROW><ROW><id>12254339</id><snippet>class UUIDModel(models.Model):
    id = UUIDField(primary_key=True, auto=True)  # There are many implementation of this on the web. Choose your favorite.

    class Meta:
        abstract = True
</snippet></ROW><ROW><id>12254339</id><snippet>activation</snippet></ROW><ROW><id>12254339</id><snippet>class ActivatedModel(Model):
    is_active = models.BooleanField(default=False)

    def activate(self, save=True):
        if self.is_active:
            raise Exception('Already activated')
        self.is_active = True
        if save:
            self.save()

    class Meta:
        abstract = True
</snippet></ROW><ROW><id>12254339</id><snippet>finalized</snippet></ROW><ROW><id>12254339</id><snippet>core</snippet></ROW><ROW><id>12254339</id><snippet>core</snippet></ROW><ROW><id>12254339</id><snippet>tasks</snippet></ROW><ROW><id>12254339</id><snippet>tasks</snippet></ROW><ROW><id>12254339</id><snippet>tasks</snippet></ROW><ROW><id>12254339</id><snippet>core</snippet></ROW><ROW><id>12254339</id><snippet>mms</snippet></ROW><ROW><id>12254339</id><snippet>mms</snippet></ROW><ROW><id>12254339</id><snippet># models.py of an app called  "articles"

from core.models import UUIDModel, ActivatedModel
from tasks.models import ManagedTasksModel

class Article(UUIDModel, ActivatedModel, ManagedTasksModel):
    title = models.CharField()
    # blah...
</snippet></ROW><ROW><id>12254339</id><snippet>models.py</snippet></ROW><ROW><id>12254339</id><snippet>related_name</snippet></ROW><ROW><id>12254339</id><snippet>class Message(models.Model):
    sender   = models.ForeignKey(User, related_name='messages_sent')
    receiver = models.ForeignKey(User, related_name='messages_received')
    body     = models.Textfield()
</snippet></ROW><ROW><id>12254339</id><snippet>u1 = User.objects.get(...)
received = u1.messages_received.all()
</snippet></ROW><ROW><id>12254339</id><snippet>related_name</snippet></ROW><ROW><id>12254484</id><snippet>Window</snippet></ROW><ROW><id>12254484</id><snippet>find_windows</snippet></ROW><ROW><id>12254484</id><snippet>Window.objects.all()
</snippet></ROW><ROW><id>12254484</id><snippet>Window.objects.filter(name="Speciality")
</snippet></ROW><ROW><id>12254521</id><snippet>LeaveOneOut</snippet></ROW><ROW><id>12254543</id><snippet>self._ie.hwnd
</snippet></ROW><ROW><id>12254566</id><snippet>dist2_diff_solve(664515.9375+0j, 3998106.0, 0.053674994761459802, -71340.561832823907, 23709057427.266102)

[(664515.7418921513+3.552713678800501e-15j), (664600.9266076663+5.329070518200751e-15j), (664564.8069210749-1.4210854715202004e-14j)]
</snippet></ROW><ROW><id>12254771</id><snippet>json</snippet></ROW><ROW><id>12254771</id><snippet>file = open('output','r')
output_dict = json.load(file)
</snippet></ROW><ROW><id>12254771</id><snippet>urllib2</snippet></ROW><ROW><id>12254773</id><snippet>        if ((tpal(pot)==1)and(pot&gt; pal)):
</snippet></ROW><ROW><id>12254773</id><snippet>pot &lt;= pal</snippet></ROW><ROW><id>12254773</id><snippet>==1</snippet></ROW><ROW><id>12254773</id><snippet>        if (pot &gt; pal) and tpal(pot):
</snippet></ROW><ROW><id>12254773</id><snippet>In [24]: timeit orig()
1 loops, best of 3: 201 ms per loop

In [25]: timeit orig_swapped()
10 loops, best of 3: 30.1 ms per loop
</snippet></ROW><ROW><id>12254773</id><snippet>A and B</snippet></ROW><ROW><id>12254773</id><snippet>A</snippet></ROW><ROW><id>12254773</id><snippet>A and B</snippet></ROW><ROW><id>12254773</id><snippet>A</snippet></ROW><ROW><id>12254773</id><snippet>if le%2 !=0: #4 example 10101even nbr
    le-=1
le/2    
^^^^
</snippet></ROW><ROW><id>12254773</id><snippet>le</snippet></ROW><ROW><id>12254773</id><snippet>le //= 2</snippet></ROW><ROW><id>12254892</id><snippet>class BaseQuery(Query):
    def fulltext(self, terms):
        # assuming query is always created with `cls.query` or `DBSession.query(cls)`
        cls = self._entities[0].type
        ...
</snippet></ROW><ROW><id>12254946</id><snippet>equipment = {
              'Longsword': 15,
              'Axe':       17
            }
</snippet></ROW><ROW><id>12254946</id><snippet>equipment['Longsword']</snippet></ROW><ROW><id>12254946</id><snippet>equipment[0]</snippet></ROW><ROW><id>12254946</id><snippet>equipment = {
             'Longsword': {'attack_str': 15, 'defence_str': 15, 'color': 'grey',... etc.}
             }
</snippet></ROW><ROW><id>12255036</id><snippet>In [166]: d = dict(m_out[:,::-1])
In [167]: [(k, d[k]) for k in eqn_out if k in d]
Out[167]: [(7, 6), (9, 8), (11, 10), (13, 12), (15, 14), (17, 16)]
</snippet></ROW><ROW><id>12255036</id><snippet>In [15]: m_out[np.in1d(v, eqn_out)][:, ::-1]
Out[15]: 
array([[ 7,  6],
       [ 9,  8],
       [11, 10],
       [13, 12],
       [15, 14],
       [17, 16]])
</snippet></ROW><ROW><id>12255036</id><snippet>In [150]: import numpy as np
In [151]: m_out = np.arange(50).reshape(25,2)   
In [152]: v = m_out[:,1]    
In [153]: eqn_out = np.arange(7, 18)     
In [154]: eqn_out
Out[154]: array([ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17])
</snippet></ROW><ROW><id>12255036</id><snippet>In [155]: np.intersect1d(eqn_out, v)
Out[155]: array([ 7,  9, 11, 13, 15, 17])
</snippet></ROW><ROW><id>12255036</id><snippet>In [156]: v.searchsorted(np.intersect1d(eqn_out, v))
Out[156]: array([3, 4, 5, 6, 7, 8])
</snippet></ROW><ROW><id>12255036</id><snippet>In [157]: m_out[v.searchsorted(np.intersect1d(eqn_out, v))]
Out[157]: 
array([[ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15],
       [16, 17]])
</snippet></ROW><ROW><id>12255036</id><snippet>In [158]: m_out[v.searchsorted(np.intersect1d(eqn_out, v))][:,::-1]
Out[158]: 
array([[ 7,  6],
       [ 9,  8],
       [11, 10],
       [13, 12],
       [15, 14],
       [17, 16]])
</snippet></ROW><ROW><id>12255578</id><snippet>StrictVersion</snippet></ROW><ROW><id>12255578</id><snippet>Version</snippet></ROW><ROW><id>12255578</id><snippet>from distutils.version import LooseVersion
versions = ["1.7.0", "1.7.0.rc0", "1.8.0"]
lv = [LooseVersion(v) for v in versions]
lv.sort()

sorted_rc = [v.vstring for v in lv]

import re
p = re.compile('rc\\d+$')

i = 0

# skip the first RCs
while i + 1 &lt; len(sorted_rc):
    m = p.search(sorted_rc[i])
    if m:
        i += 1
    else:
        break

while i + 1 &lt; len(sorted_rc):
    tmp = sorted_rc[i]
    m = p.search(sorted_rc[i+1])
    if m and sorted_rc[i+1].startswith(tmp):
        sorted_rc[i] = sorted_rc[i+1]
        sorted_rc[i+1] = tmp
    i += 1
</snippet></ROW><ROW><id>12255578</id><snippet>['1.7.0rc0', '1.7.0', '1.11.0']
</snippet></ROW><ROW><id>12255578</id><snippet>distutils.version</snippet></ROW><ROW><id>12255578</id><snippet>StrictVersion</snippet></ROW><ROW><id>12255578</id><snippet>1.7.0.rc0</snippet></ROW><ROW><id>12255578</id><snippet>1.7.0a0</snippet></ROW><ROW><id>12255578</id><snippet>1.7.0b0</snippet></ROW><ROW><id>12255578</id><snippet>from distutils.version import StrictVersion
versions = ["1.7.0", "1.7.0b0", "1.11.0"]
sorted(versions, key=StrictVersion)
</snippet></ROW><ROW><id>12255578</id><snippet>['1.7.0b0', '1.7.0', '1.11.0']
</snippet></ROW><ROW><id>12255578</id><snippet>StrictVersion</snippet></ROW><ROW><id>12255578</id><snippet>version_re</snippet></ROW><ROW><id>12255578</id><snippet>rc</snippet></ROW><ROW><id>12255578</id><snippet>a</snippet></ROW><ROW><id>12255578</id><snippet>b</snippet></ROW><ROW><id>12255578</id><snippet>1.7.1rc0</snippet></ROW><ROW><id>12255578</id><snippet>1.7.1r0</snippet></ROW><ROW><id>12255578</id><snippet>#!/usr/bin/python
# file: version2.py

from distutils import version
import re
import functools

@functools.total_ordering
class NumberedVersion(version.Version):
    """
    A more flexible implementation of distutils.version.StrictVersion

    This implementation allows to specify:
    - an arbitrary number of version numbers:
        not only '1.2.3' , but also '1.2.3.4.5'
    - the separator between version numbers:
        '1-2-3' is allowed when '-' is specified as separator
    - an arbitrary ordering of pre-release tags:
        1.1alpha3 &lt; 1.1beta2 &lt; 1.1rc1 &lt; 1.1
        when ["alpha", "beta", "rc"] is specified as pre-release tag list
    """

    def __init__(self, vstring=None, sep='.', prerel_tags=('a', 'b')):
        version.Version.__init__(self) 
            # super() is better here, but Version is an old-style class

        self.sep = sep
        self.prerel_tags = dict(zip(prerel_tags, xrange(len(prerel_tags))))
        self.version_re = self._compile_pattern(sep, self.prerel_tags.keys())
        self.sep_re = re.compile(re.escape(sep))

        if vstring:
            self.parse(vstring)


    _re_prerel_tag = 'rel_tag'
    _re_prerel_num = 'tag_num'

    def _compile_pattern(self, sep, prerel_tags):
        sep = re.escape(sep)
        tags = '|'.join(re.escape(tag) for tag in prerel_tags)

        if tags:
            release_re = '(?:(?P&lt;{tn}&gt;{tags})(?P&lt;{nn}&gt;\d+))?'\
                .format(tags=tags, tn=self._re_prerel_tag, nn=self._re_prerel_num)
        else:
            release_re = ''

        return re.compile(r'^(\d+)(?:{sep}(\d+))*{rel}$'\
            .format(sep=sep, rel=release_re))

    def parse(self, vstring):
        m = self.version_re.match(vstring)
        if not m:
            raise ValueError("invalid version number '{}'".format(vstring))

        tag = m.group(self._re_prerel_tag)
        tag_num = m.group(self._re_prerel_num)

        if tag is not None and tag_num is not None:
            self.prerelease = (tag, int(tag_num))
            vnum_string = vstring[:-(len(tag) + len(tag_num))]
        else:
            self.prerelease = None
            vnum_string = vstring

        self.version = tuple(map(int, self.sep_re.split(vnum_string)))


    def __repr__(self):
        return "{cls} ('{vstring}', '{sep}', {prerel_tags})"\
            .format(cls=self.__class__.__name__, vstring=str(self),
                sep=self.sep, prerel_tags = list(self.prerel_tags.keys()))

    def __str__(self):
        s = self.sep.join(map(str,self.version))
        if self.prerelease:
            return s + "{}{}".format(*self.prerelease)
        else:
            return s

    def __lt__(self, other):
        """
        Fails when  the separator is not the same or when the pre-release tags
        are not the same or do not respect the same order.
        """
        # TODO deal with trailing zeroes: e.g. "1.2.0" == "1.2"
        if self.prerel_tags != other.prerel_tags or self.sep != other.sep:
            raise ValueError("Unable to compare: instances have different"
                " structures")

        if self.version == other.version and self.prerelease is not None and\
                other.prerelease is not None:

            tag_index = self.prerel_tags[self.prerelease[0]]
            other_index = self.prerel_tags[other.prerelease[0]]
            if tag_index == other_index:
                return self.prerelease[1] &lt; other.prerelease[1]

            return tag_index &lt; other_index

        elif self.version == other.version:
            return self.prerelease is not None and other.prerelease is None

        return self.version &lt; other.version

    def __eq__(self, other):
        tag_index = self.prerel_tags[self.prerelease[0]]
        other_index = other.prerel_tags[other.prerelease[0]]
        return self.prerel_tags == other.prerel_tags and self.sep == other.sep\
            and self.version == other.version and tag_index == other_index and\
                self.prerelease[1] == other.prerelease[1]




import unittest

class TestNumberedVersion(unittest.TestCase):

    def setUp(self):
        self.v = NumberedVersion()

    def test_compile_pattern(self):
        p = self.v._compile_pattern('.', ['a', 'b'])
        tests = {'1.2.3': True, '1a0': True, '1': True, '1.2.3.4a5': True,
            'b': False, '1c0': False, ' 1': False, '': False}
        for test, result in tests.iteritems():
            self.assertEqual(result, p.match(test) is not None, \
                "test: {} result: {}".format(test, result))


    def test_parse(self):
        tests = {"1.2.3.4a5": ((1, 2, 3, 4), ('a', 5))}
        for test, result in tests.iteritems():
            self.v.parse(test)
            self.assertEqual(result, (self.v.version, self.v.prerelease))

    def test_str(self):
        tests = (('1.2.3',), ('10-2-42rc12', '-', ['rc']))
        for t in tests:
            self.assertEqual(t[0], str(NumberedVersion(*t)))

    def test_repr(self):
        v = NumberedVersion('1,2,3rc4', ',', ['lol', 'rc'])
        expected = "NumberedVersion ('1,2,3rc4', ',', ['lol', 'rc'])"
        self.assertEqual(expected, repr(v))


    def test_order(self):
        test = ["1.7.0", "1.7.0rc0", "1.11.0"]
        expected = ['1.7.0rc0', '1.7.0', '1.11.0']
        versions = [NumberedVersion(v, '.', ['rc']) for v in test]
        self.assertEqual(expected, list(map(str,sorted(versions))))


if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>12255578</id><snippet>import version2
versions = ["1.7.0", "1.7.0rc2", "1.7.0rc1", "1.7.1", "1.11.0"]
sorted(versions, key=lambda v: version2.NumberedVersion(v, '.', ['rc']))
</snippet></ROW><ROW><id>12255578</id><snippet>['1.7.0rc1', '1.7.0rc2', '1.7.0', '1.7.1', '1.11.0']
</snippet></ROW><ROW><id>12255792</id><snippet>someclass.enabled = self.request.get(u'checkbox') == u'yes'
</snippet></ROW><ROW><id>12255925</id><snippet>loc=&lt;id&gt;</snippet></ROW><ROW><id>12255925</id><snippet>&lt;id&gt;</snippet></ROW><ROW><id>12256069</id><snippet>while queue.empty() != True</snippet></ROW><ROW><id>12256069</id><snippet>&gt;&gt;&gt; import Queue
&gt;&gt;&gt; q=Queue.Queue()
&gt;&gt;&gt; q.put(1)
&gt;&gt;&gt; q.empty()
False
&gt;&gt;&gt; q.get()
1
&gt;&gt;&gt; q.empty()
True
&gt;&gt;&gt; q.empty()!=True
False
</snippet></ROW><ROW><id>12256069</id><snippet>stopQue=Queue.Queue()

def listenThread(counter): 
    while True:
        if queue.empty()!=True: 
            outcome = queue.get() 
            print outcome 
            counter -=1 
            print counter 
        if stopQue.empty()!=True:
            break
    print 'Exiting Listening Thread'
</snippet></ROW><ROW><id>12256069</id><snippet>stopQue.put(1)</snippet></ROW><ROW><id>12256069</id><snippet>import threading
import Queue
from time import sleep

dataQue = Queue.Queue()
stopQue = Queue.Queue()

def DAQThread(ue9ipAddr):
    print 'Executing in DAQThread\n'
    count = 5
    while count &gt; 0: 
        dataQue.put('data: %s' % count)
        count -= 1
        sleep(5)
    stopQue.put(1)
    print 'Exiting DAQThread\n'


def listenThread(counter): 
    while True:
        if dataQue.empty() != True:
            outcome = dataQue.get() 
            print outcome 
            counter -=1 
        if stopQue.empty() != True:
            break
    print 'Exiting Listening Thread'


print "Opening device..."
ipAdd = '192.168.1.127'
feedbackThread = threading.Thread(target=DAQThread, args=(ipAdd,))
feedbackThread.setDaemon(True)
feedbackThread.start()

print "Listening for data..."
queryThread = threading.Thread(target=listenThread, args = (10,))
queryThread.setDaemon(True)
queryThread.start()

print "Done"
</snippet></ROW><ROW><id>12256069</id><snippet>&gt;&gt;&gt; 
Opening device...
Executing in DAQThread
Listening for data...

Donedata: 5        #Notice how the script is done however the threads are still running

&gt;&gt;&gt; data: 4
data: 3
data: 2
data: 1
Exiting DAQThread
Exiting Listening Thread
</snippet></ROW><ROW><id>12256441</id><snippet>def deco(func):
   def wrapper(*args, **kwargs):
       ... decorator stuff here ...
       return func(*args, **kwargs)
</snippet></ROW><ROW><id>12256441</id><snippet>config_x</snippet></ROW><ROW><id>12256441</id><snippet>kwargs</snippet></ROW><ROW><id>12256441</id><snippet>def deco(func):
   def wrapper(*args, **kwargs):
       if "deco_config_x" in kwargs):
           config_x = kwargs.pop(deco_config_x)
       ... decorator stuff here ...
       return func(*args, **kwargs)
</snippet></ROW><ROW><id>12257210</id><snippet>session</snippet></ROW><ROW><id>12257210</id><snippet>SESSION_SAVE_EVERY_REQUEST</snippet></ROW><ROW><id>12257210</id><snippet>True</snippet></ROW><ROW><id>12257210</id><snippet>settings.py</snippet></ROW><ROW><id>12257253</id><snippet>class Foo(ndb.Model):
    name = ndb.StringProperty()

    @ndb.tasklet
    def my_async(self):
        ....
        #do something else that yields
        raise ndb.Return("some result")   


@ndb.toplevel
@ndb.synctasklet
def post(self):
    foo = Foo(name="baz")
    yield foo.put_async()
    yield foo.my_async()
    ....
</snippet></ROW><ROW><id>12257253</id><snippet>def toplevel(func):
  """A sync tasklet that sets a fresh default Context.

  Use this for toplevel view functions such as
  webapp.RequestHandler.get() or Django view functions.
  """
</snippet></ROW><ROW><id>12257807</id><snippet>site-packages</snippet></ROW><ROW><id>12257807</id><snippet>/path/to/the/</snippet></ROW><ROW><id>12257807</id><snippet>sys.path</snippet></ROW><ROW><id>12257807</id><snippet>sys.path</snippet></ROW><ROW><id>12257807</id><snippet>sys.path</snippet></ROW><ROW><id>12258385</id><snippet>static char * const ARGV[] = { "myprog", "hello", "world", NULL };

int main(int argc, char * argv[])
{
    argc = 3;
    argv = ARGV;

    // ...
}
</snippet></ROW><ROW><id>12258385</id><snippet>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iterator&gt;
#include &lt;iostream&gt;

std::vector&lt;char *&gt; fabricate(std::vector&lt;std::string&gt; &amp; v)
{
    std::vector&lt;char *&gt; res(v.size() + 1, NULL);
    for (std::size_t i = 0; i != v.size(); ++i) { res[i] = &amp;v[i][0]; }
    return res;
}

std::vector&lt;std::string&gt; args_vector((std::istream_iterator&lt;std::string&gt;(std::cin)), std::istream_iterator&lt;std::string&gt;());

std::vector&lt;char *&gt; argv_vector = fabricate(args_vector);


int main(int argc, char * argv[])
{
    argc = args_vector.size();
    argv = argv_vector.data();

    // ...
}
</snippet></ROW><ROW><id>12258504</id><snippet> deps = -r{toxinidir}/tools/pip-requires
        -r{toxinidir}/tools/test-requires
</snippet></ROW><ROW><id>12258860</id><snippet>&gt;&gt;&gt; "%.2f"%20.325
'20.32'
&gt;&gt;&gt; "%.2f"%20.335
'20.34'
&gt;&gt;&gt; "%.2f"%20.345
'20.34'
&gt;&gt;&gt; "%.2f"%20.355
'20.36'
</snippet></ROW><ROW><id>12258860</id><snippet>203.25</snippet></ROW><ROW><id>12258860</id><snippet>0.1</snippet></ROW><ROW><id>12258860</id><snippet>0.1</snippet></ROW><ROW><id>12258860</id><snippet>&gt;&gt;&gt; 0.1*203.25
20.325000000000003
</snippet></ROW><ROW><id>12258882</id><snippet>requests</snippet></ROW><ROW><id>12258882</id><snippet>&gt;&gt;&gt; from requests import *
&gt;&gt;&gt; get
&lt;function get at 0x107820b18&gt;
</snippet></ROW><ROW><id>12258882</id><snippet>import requests</snippet></ROW><ROW><id>12258882</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; requests.get
&lt;function get at 0x102e46b18&gt;
</snippet></ROW><ROW><id>12258882</id><snippet>requests.py</snippet></ROW><ROW><id>12258882</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; print requests.__file__
/private/tmp/requeststest/lib/python2.7/site-packages/requests/__init__.pyc
</snippet></ROW><ROW><id>12258882</id><snippet>requests</snippet></ROW><ROW><id>12258882</id><snippet>&gt;&gt;&gt; print dir(requests)
['ConnectionError', 'HTTPError', 'Request', 'RequestException', 'Response', 'Session', 'Timeout', 'TooManyRedirects', 'URLRequired', '__author__', '__build__', '__builtins__', '__copyright__', '__doc__', '__file__', '__license__', '__name__', '__package__', '__path__', '__title__', '__version__', '_oauth', 'api', 'auth', 'certs', 'codes', 'compat', 'cookies', 'defaults', 'delete', 'exceptions', 'get', 'head', 'hooks', 'models', 'options', 'packages', 'patch', 'post', 'put', 'request', 'safe_mode', 'session', 'sessions', 'status_codes', 'structures', 'utils']
</snippet></ROW><ROW><id>12259051</id><snippet>UPDATE</snippet></ROW><ROW><id>12259051</id><snippet>SELECT</snippet></ROW><ROW><id>12259051</id><snippet>cursor.execute()</snippet></ROW><ROW><id>12259051</id><snippet>cur1 = con.cursor()
cur2 = con.cursor()

cur1.execute("SELECT ...")
for row in cur1:
    cur2.execute("UPDATE ...")
</snippet></ROW><ROW><id>12259667</id><snippet>import_array</snippet></ROW><ROW><id>12259667</id><snippet>PY_ARRAY_UNIQUE_SYMBOL</snippet></ROW><ROW><id>12259667</id><snippet>import_array</snippet></ROW><ROW><id>12259667</id><snippet>NO_IMPORT_ARRAY</snippet></ROW><ROW><id>12259667</id><snippet>arrayobject.h</snippet></ROW><ROW><id>12259852</id><snippet>-p</snippet></ROW><ROW><id>12259852</id><snippet>fileinput</snippet></ROW><ROW><id>12259852</id><snippet>python -c 'for ln in __import__("fileinput").input(): print ln.rstrip()' files...
</snippet></ROW><ROW><id>12259852</id><snippet>print</snippet></ROW><ROW><id>12259852</id><snippet>rstrip</snippet></ROW><ROW><id>12259852</id><snippet>print</snippet></ROW><ROW><id>12260400</id><snippet>lstrip</snippet></ROW><ROW><id>12260400</id><snippet>entry_1 = "0000005452508".lstrip("0")
entry_2 = "02965054".lstrip("0")
entry_3 = "5487864".lstrip("0")
</snippet></ROW><ROW><id>12260464</id><snippet>#!/bin/sh
#Kill my python process called myPython
kill `ps -A | grep myPython | nawk '{ print $1}'`
# Or
kill `ps -U myname | grep myPython | nawk '{ print $1}'`
</snippet></ROW><ROW><id>12261071</id><snippet>tal:</snippet></ROW><ROW><id>12261071</id><snippet>define</snippet></ROW><ROW><id>12261071</id><snippet>condition</snippet></ROW><ROW><id>12261071</id><snippet>python:</snippet></ROW><ROW><id>12261071</id><snippet>global</snippet></ROW><ROW><id>12261071</id><snippet>&lt;tal:block define="ispdf python:here.absolute_url().endswith('.pdf')"&gt;

    &lt;embed width="100%" height="100%" name="plug-in" 
         tal:condition="ispdf"
         tal:attributes="src string:${here/absolute_url}#" 
         draggable="false" onselectstart="false"  /&gt;

    &lt;iframe src="http://www.xyz.com" 
         tal:condition="not:ispdf"
         tal:attributes="src string:${here/absolute_url}/rfpreview"
         ondragstart="false" onselectstart="false"
         width="100%" height="400" scrolling="auto" frameborder="0"&gt;&lt;/iframe&gt;

&lt;/tal:block&gt;
</snippet></ROW><ROW><id>12261071</id><snippet>&lt;tal:block&gt;</snippet></ROW><ROW><id>12261071</id><snippet>ispdf</snippet></ROW><ROW><id>12261071</id><snippet>tal:condition</snippet></ROW><ROW><id>12261071</id><snippet>True</snippet></ROW><ROW><id>12261071</id><snippet>False</snippet></ROW><ROW><id>12261118</id><snippet>\((?!for|or).*?\)
</snippet></ROW><ROW><id>12261118</id><snippet>\(.*?\)</snippet></ROW><ROW><id>12261118</id><snippet>(?!for|or)</snippet></ROW><ROW><id>12261166</id><snippet>dumpdata</snippet></ROW><ROW><id>12261166</id><snippet>&gt;&gt;&gt; import os.path, time
&gt;&gt;&gt; time.ctime(os.path.getctime('test.png'))
'Tue Sep  4 09:48:24 2012'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12261420</id><snippet>while (count &lt;= int(value)):
    count= count + 1
</snippet></ROW><ROW><id>12261420</id><snippet>raw_input</snippet></ROW><ROW><id>12261420</id><snippet>n</snippet></ROW><ROW><id>12261420</id><snippet>s</snippet></ROW><ROW><id>12261420</id><snippet>n&lt;s is True</snippet></ROW><ROW><id>12261420</id><snippet>int</snippet></ROW><ROW><id>12261420</id><snippet>TypeError: unorderable types: str() &lt; int()</snippet></ROW><ROW><id>12261693</id><snippet>from tornado.template import Template
t = Template(my_template_string_from_database)
r = t.generate(key=value) #as we do in loader
</snippet></ROW><ROW><id>12261700</id><snippet>"'"
'"'
</snippet></ROW><ROW><id>12261700</id><snippet>"\"'"
'"\''
</snippet></ROW><ROW><id>12261700</id><snippet>'She said: "Not so fast!"'
"Won't you come with us?"
</snippet></ROW><ROW><id>12261700</id><snippet>"""Now I can use either quote with more freedom: ' and "."""
'''Now I can use either quote with more freedom: ' and ".'''
</snippet></ROW><ROW><id>12261700</id><snippet>"""A
multiline
string
is
easy.
"""
</snippet></ROW><ROW><id>12261700</id><snippet>\n</snippet></ROW><ROW><id>12262022</id><snippet>d = '0101010000' * 2000 # create a 20,000 long string of 1s and 0s
d_array = np.fromstring(d, 'int8') - 48 # 48 is ascii 0. ascii 1 is 49
</snippet></ROW><ROW><id>12262022</id><snippet>In [21]: timeit numpy.fromstring(d, dtype='int8') - 48
10000 loops, best of 3: 35.8 us per loop

In [22]: timeit numpy.fromiter(d, dtype='int', count=20000)
100 loops, best of 3: 8.57 ms per loop
</snippet></ROW><ROW><id>12262107</id><snippet>os.path.join</snippet></ROW><ROW><id>12262107</id><snippet>os.name</snippet></ROW><ROW><id>12262107</id><snippet>filename = 'base.db'

path = os.path.join('z:/', filename) if os.name == 'nt' else filename

con = lite.connect(path)
</snippet></ROW><ROW><id>12262130</id><snippet>self.redirect(self.get_argument("next", "/networks/{0}/sensor/{1}#tab3".format(netid, sensid)))
</snippet></ROW><ROW><id>12262130</id><snippet>netid</snippet></ROW><ROW><id>12262130</id><snippet>{0}</snippet></ROW><ROW><id>12262130</id><snippet>sensid</snippet></ROW><ROW><id>12262130</id><snippet>{1}</snippet></ROW><ROW><id>12262168</id><snippet>sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
</snippet></ROW><ROW><id>12262204</id><snippet>any(name in line for name in illegal_names)
</snippet></ROW><ROW><id>12262337</id><snippet>def updown(n):
    while True:
        for i in range(n):
            yield i
        for i in range(n - 2, 0, -1):
            yield i

uptofive = updown(6)
for i in range(20):
    print uptofive.next(),
</snippet></ROW><ROW><id>12262337</id><snippet>0 1 2 3 4 5 4 3 2 1 0 1 2 3 4 5 4 3 2 1
</snippet></ROW><ROW><id>12262337</id><snippet>list(updown(6))</snippet></ROW><ROW><id>12262337</id><snippet>.next()</snippet></ROW><ROW><id>12262337</id><snippet>itertools.islice()</snippet></ROW><ROW><id>12262337</id><snippet>import itertools
list(itertools.islice(updown(6), 20))
</snippet></ROW><ROW><id>12262651</id><snippet>html = invokeServer(... 
</snippet></ROW><ROW><id>12262846</id><snippet>"atestabctestcb".gsub(/(^[abc]*)|([abc]*$)/, '')
# =&gt; "testabctest"
</snippet></ROW><ROW><id>12262846</id><snippet>def strip_arbitrary(s, chars)
    r = chars.chars.map { |c| Regexp.quote(c) }.join
    s.gsub(/(^[#{r}]*)|([#{r}]*$)/, '')
end

strip_arbitrary("foobar", "fra") # =&gt; "oob"
</snippet></ROW><ROW><id>12262890</id><snippet>project</snippet></ROW><ROW><id>12262890</id><snippet>requirements</snippet></ROW><ROW><id>12263051</id><snippet>self.assertEqual("Dog named 'Fido'", repr(fido.get_self()))
</snippet></ROW><ROW><id>12263051</id><snippet>self.assertEqual("Dog named 'Fido'", repr(fido))
</snippet></ROW><ROW><id>12263051</id><snippet>assertEqual</snippet></ROW><ROW><id>12263051</id><snippet>repr</snippet></ROW><ROW><id>12263286</id><snippet>__getattr__</snippet></ROW><ROW><id>12263286</id><snippet>class hi():
    def __init__(self):
        self.child=x()

    def __getattr__(self, attr):
        return getattr(self.child, attr)
</snippet></ROW><ROW><id>12263286</id><snippet>__hasattr__</snippet></ROW><ROW><id>12263286</id><snippet>__setattr__</snippet></ROW><ROW><id>12263519</id><snippet>array = (ctypes.c_ubyte * frameInfo.lHeight * frameInfo.lWidth * 1
          ).from_address(ctypes.addressof(pBuffer.contents))
pBufY = np.ndarray(buffer=array, dtype=np.uint8,
                   shape=(frameInfo.lHeight, frameInfo.lWidth, 1))
</snippet></ROW><ROW><id>12263601</id><snippet>mystring == ""</snippet></ROW><ROW><id>12263601</id><snippet>if mystring:</snippet></ROW><ROW><id>12263601</id><snippet>0</snippet></ROW><ROW><id>12263601</id><snippet>False</snippet></ROW><ROW><id>12263601</id><snippet>None</snippet></ROW><ROW><id>12264250</id><snippet>_proc_status = '/proc/%d/status' % os.getpid()
</snippet></ROW><ROW><id>12264250</id><snippet>os.getpid()</snippet></ROW><ROW><id>12264250</id><snippet>Popen</snippet></ROW><ROW><id>12264250</id><snippet>pid</snippet></ROW><ROW><id>12264752</id><snippet>dataChanged()</snippet></ROW><ROW><id>12264752</id><snippet>setData</snippet></ROW><ROW><id>12264752</id><snippet>dataChanged</snippet></ROW><ROW><id>12264752</id><snippet>def setData(self, index, value, role=QtCore.Qt.EditRole):
    if index.isValid():
        if role == QtCore.Qt.CheckStateRole:
            node = index.internalPointer()
            node.setChecked(not node.checked())
            self.dataChanged.emit(index, index)               
            self.emitDataChangedForChildren(index)
            return True
    return False

def emitDataChangedForChildren(self, index):
    count = self.rowCount(index)
    if count:            
        self.dataChanged.emit(index.child(0, 0), index.child(count-1, 0))
        for child in range(count):
            self.emitDataChangedForChildren(index.child(child, 0))
</snippet></ROW><ROW><id>12264881</id><snippet>&gt;&gt;&gt; type(a)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(b)
&lt;type 'function'&gt;
</snippet></ROW><ROW><id>12264881</id><snippet>b</snippet></ROW><ROW><id>12264881</id><snippet>&gt;&gt;&gt; a.func_name
'a'
&gt;&gt;&gt; b.func_name
'&lt;lambda&gt;'
</snippet></ROW><ROW><id>12264918</id><snippet>list := rand.Perm(25)
for i, _ := range list {
    list[i]++
}
</snippet></ROW><ROW><id>12264918</id><snippet>rand.Perm</snippet></ROW><ROW><id>12264918</id><snippet>dest := make([]int, len(src))
perm := rand.Perm(len(src))
for i, v := range perm {
    dest[v] = src[i]
}
</snippet></ROW><ROW><id>12265109</id><snippet>exit</snippet></ROW><ROW><id>12265511</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>12265511</id><snippet>STATIC_ROOT = os.path.join(os.path.dirname(__file__), 'static')
</snippet></ROW><ROW><id>12265511</id><snippet>PROJECT_ROOT = os.path.dirname(__file__)
...
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')
</snippet></ROW><ROW><id>12265722</id><snippet>coords</snippet></ROW><ROW><id>12265722</id><snippet>self.base_dimensions = {
    "obj1": (10,10),
    "obj2": (20,20),
    ...
}
</snippet></ROW><ROW><id>12265722</id><snippet>...
self.canvas.create_rectangle(..., tags=("obj1",))
self.canvas.create_rectangle(..., tags=("obj2",))
...
</snippet></ROW><ROW><id>12265722</id><snippet>self.spinbox = {
    "obj1": tk.Spinbox(..., command=lambda self.do_resize("obj1")),
    "obj2": tk.Spinbox(..., command=lambda self.do_resize("obj2")),
    ...
}
</snippet></ROW><ROW><id>12265722</id><snippet>def do_scale(self, tag):
    factor = int(self.spinbox[tag].get())
    (width, height) = self.default[tag]
    (x0,y0,x1,y1) = self.canvas.coords(tag)
    width = factor * width
    height = factor * height
    x1 = x0 + width
    y1 = y0 + height
    self.canvas.coords(tag, x0,y0,x1,y1)
</snippet></ROW><ROW><id>12265735</id><snippet>sentinel = object()

def func(someparam, default=sentinel):
    if default is not sentinel:
        print("You passed in something else!")
</snippet></ROW><ROW><id>12265735</id><snippet>object()</snippet></ROW><ROW><id>12265735</id><snippet>is</snippet></ROW><ROW><id>12265735</id><snippet>None</snippet></ROW><ROW><id>12265735</id><snippet>sentinel = []
sentinel = {}
</snippet></ROW><ROW><id>12265746</id><snippet>foreign_naive = datetime.datetime(2012, 3, 11, 6, 0, 0)
foreign_timezone = 'US/Eastern'
foreign_dt = pytz.timezone(foreign_timezone).localize(foreign_naive)
timestamp = time.mktime(foreign_dt).astimezone(pytz.utc).timetuple()
local_dt = datetime.datetime.fromtimestamp(timestamp)
</snippet></ROW><ROW><id>12265746</id><snippet>(local_dt - datetime.datetime.utcfromtimestamp(timestamp)).seconds
</snippet></ROW><ROW><id>12265860</id><snippet>dict</snippet></ROW><ROW><id>12265860</id><snippet>names = { 'joe': 'Joe Nathan', 'jo': 'Jo Mama', 'joy': 'Joy Full' }
name = 'hikaru'

try:
    print names[name]
except KeyError:
    print "Sorry, don't know this '{}' person".format(name)
</snippet></ROW><ROW><id>12265860</id><snippet>KeyError</snippet></ROW><ROW><id>12265860</id><snippet>if name in names:
    print names[name]
else:
    print "Sorry, don't know this '{}' person".format(name)
</snippet></ROW><ROW><id>12265860</id><snippet>real_name = names.get(name, None)
if real_name:
    print real_name
else:
    print "Sorry, don't know this '{}' person".format(name)
</snippet></ROW><ROW><id>12265860</id><snippet>try</snippet></ROW><ROW><id>12265860</id><snippet>except</snippet></ROW><ROW><id>12265860</id><snippet>if</snippet></ROW><ROW><id>12265860</id><snippet>else</snippet></ROW><ROW><id>12265860</id><snippet>eval()</snippet></ROW><ROW><id>12265860</id><snippet>try</snippet></ROW><ROW><id>12265860</id><snippet>except</snippet></ROW><ROW><id>12265860</id><snippet>self.bar</snippet></ROW><ROW><id>12265860</id><snippet>__init__()</snippet></ROW><ROW><id>12265860</id><snippet>class</snippet></ROW><ROW><id>12265860</id><snippet>__init__()</snippet></ROW><ROW><id>12265860</id><snippet>None</snippet></ROW><ROW><id>12265860</id><snippet>0</snippet></ROW><ROW><id>12265860</id><snippet>-1</snippet></ROW><ROW><id>12265860</id><snippet>''</snippet></ROW><ROW><id>12265869</id><snippet>numpy</snippet></ROW><ROW><id>12265869</id><snippet>numpy</snippet></ROW><ROW><id>12265869</id><snippet>numpy</snippet></ROW><ROW><id>12265869</id><snippet>numpy</snippet></ROW><ROW><id>12265980</id><snippet>['work A', 'work A', 'work A', 'work B', 'work B', 'work C', 'laundry', 'nothing']
</snippet></ROW><ROW><id>12265980</id><snippet>task_list = []
for prio, work in tsv_file:
    task_list += [work] * int(prio)

do_this = random.choice(task_list)
</snippet></ROW><ROW><id>12266019</id><snippet>from numpy.random import rand
big_array=rand(3,3,4,5)
chosen_slice = (2,2)

&gt;&gt;&gt; big_array[ chosen_slice ]
array([[ 0.96281602,  0.38296561,  0.59362615,  0.74032818,  0.88169483],
       [ 0.54893771,  0.33640089,  0.53352849,  0.75534718,  0.38815883],
       [ 0.85247424,  0.9441886 ,  0.74682007,  0.87371017,  0.68644639],
       [ 0.52858188,  0.74717948,  0.76120181,  0.08314177,  0.99557654]])

&gt;&gt;&gt; chosen_part = (1,1)

&gt;&gt;&gt; big_array[ chosen_slice ][ chosen_part ]
0.33640088565877657
</snippet></ROW><ROW><id>12266407</id><snippet>sys.builtin_module_names</snippet></ROW><ROW><id>12266407</id><snippet>Py_Initialize</snippet></ROW><ROW><id>12266407</id><snippet>PyImport_AppendInittab</snippet></ROW><ROW><id>12266407</id><snippet>Py_Initialize</snippet></ROW><ROW><id>12266417</id><snippet>dir</snippet></ROW><ROW><id>12266417</id><snippet>&gt;&gt;&gt;print dir(Exception)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribut
e__', '__getitem__', '__getslice__', '__hash__', '__init__', '__new__', '__reduc
e__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__',
'__str__', '__subclasshook__', '__unicode__', 'args', 'message']
</snippet></ROW><ROW><id>12266417</id><snippet>help</snippet></ROW><ROW><id>12266417</id><snippet>help(Exception)</snippet></ROW><ROW><id>12266421</id><snippet>pprint</snippet></ROW><ROW><id>12266421</id><snippet>import pprint
pprint.pprint(author)
</snippet></ROW><ROW><id>12266421</id><snippet>author</snippet></ROW><ROW><id>12266421</id><snippet>dict</snippet></ROW><ROW><id>12266421</id><snippet>pprint.pformat</snippet></ROW><ROW><id>12266421</id><snippet>print pprint.pformat(author).replace(',','')</snippet></ROW><ROW><id>12266421</id><snippet>dict</snippet></ROW><ROW><id>12266421</id><snippet>collections.OrdererdDict</snippet></ROW><ROW><id>12266421</id><snippet>from collections import OrdererdDict
sorted_author = OrderedDict(sorted(author.iteritems()))
</snippet></ROW><ROW><id>12266421</id><snippet>def format_author(author):
    tups = sorted(author.iteritems())           # alphabetical sorting
    kmaxlen = max([len(k) for k, v in tups])    # for output alignment

    # some custom rearrangement. if there is a 'msg' key, we want it last
    tupkeys = [k for k, v in tups]
    if 'msg' in tupkeys:
        msg_tup = tups.pop(tupkeys.index('msg'))
        tups.append(msg_tup)    # append to the end
        # alternatively tups.insert(0, msg_tup) would insert at front

    output = []

    for k, v in tups:
        # dress our values
        if not v:
            v = ''
        elif isinstance(v, list):
            if len(v) == 1:
                v = v[0]
            if len(v) == 2 and v[0] in [None, 'none', 'None']:
                v = v[1]
         v = v.strip()
        output.append("%s: %s" % (k.rjust(kmaxlen), v))
    return "\n".join(output)
</snippet></ROW><ROW><id>12266421</id><snippet>author = {'date': ['06-08-2012 09:01:52 PM'], 'path': [u'/branches/Patch_4_2_0_Branch'], 'author': u'glv', 'msg': ['none', u'blah blah blah \n']}
s = format_author(author)
print s
</snippet></ROW><ROW><id>12266421</id><snippet>author: glv
  date: 06-08-2012 09:01:52 PM
  path: /branches/Patch_4_2_0_Branch
   msg: blah blah blah
</snippet></ROW><ROW><id>12266573</id><snippet>#!/usr/bin/env perl
while (&lt;&gt;) {
   my @f = split;
   print("@f[0..$#f-5]\n@f[-5..-1]\n");
}
</snippet></ROW><ROW><id>12266573</id><snippet>#!/usr/bin/env perl
while (&lt;&gt;) {
   s/\S\K\s+(?=\S+(?:\s+\S+){4}$)/\n/;
   print;
}
</snippet></ROW><ROW><id>12266573</id><snippet>perl script.pl file.in &gt;file.out
</snippet></ROW><ROW><id>12266573</id><snippet>script.pl file.in &gt;file.out   # Requires: chmod u+x script.pl
</snippet></ROW><ROW><id>12266573</id><snippet>perl -pale'$_="@F[0..$#F-5]\n@F[-5..-1]"' file.in &gt;file.out
</snippet></ROW><ROW><id>12266573</id><snippet>perl -pe's/\S\K\s+(?=\S+(?:\s+\S+){4}$)/\n/' file.in &gt;file.out
</snippet></ROW><ROW><id>12266692</id><snippet>O(n log k)</snippet></ROW><ROW><id>12266692</id><snippet>import heapq

k_keys_sorted = heapq.nlargest(k, dictionary)
</snippet></ROW><ROW><id>12266692</id><snippet>key</snippet></ROW><ROW><id>12266692</id><snippet>k_keys_sorted_by_values = heapq.nlargest(k, dictionary, key=dictionary.get)
</snippet></ROW><ROW><id>12266822</id><snippet>square</snippet></ROW><ROW><id>12266822</id><snippet>cumsum</snippet></ROW><ROW><id>12266822</id><snippet>In [1]: import numpy as np

In [2]: a = np.array([1,2,3,4])

In [3]: np.square(a)
Out[3]: array([ 1,  4,  9, 16])

In [4]: np.cumsum(np.square(a))
Out[4]: array([ 1,  5, 14, 30])
</snippet></ROW><ROW><id>12266883</id><snippet>locals</snippet></ROW><ROW><id>12266883</id><snippet>globals</snippet></ROW><ROW><id>12266883</id><snippet>locals</snippet></ROW><ROW><id>12266883</id><snippet>code = """
myvar = 300
def func():
    return myvar

func()
"""
d = {}
eval(compile(code, "&lt;str&gt;", "exec"), d, d)
</snippet></ROW><ROW><id>12266883</id><snippet>s = 'def outer():\n    ' + '\n    '.join(code.strip().split('\n'))
exec(compile(s, '&lt;str&gt;', 'exec').co_consts[0], {}, {})
</snippet></ROW><ROW><id>12267140</id><snippet>ancestor</snippet></ROW><ROW><id>12267140</id><snippet>query = Comment.query(
    ndb.OR(Comment.modifiedDate &gt; lastSyncDate, Comment.activityDate &gt; lastSyncDate),
    ancestor=userKey)
</snippet></ROW><ROW><id>12267140</id><snippet>filters</snippet></ROW><ROW><id>12267140</id><snippet>.filter()</snippet></ROW><ROW><id>12267140</id><snippet>query = Comment.query(
    ancestor=userKey,
    filters=ndb.OR(Comment.modifiedDate &gt; lastSyncDate, Comment.activityDate &gt; lastSyncDate))
</snippet></ROW><ROW><id>12267140</id><snippet>query = Comment.query(ancestor=userKey).filter(ndb.OR(Comment.modifiedDate &gt; lastSyncDate, Comment.activityDate &gt; lastSyncDate))
</snippet></ROW><ROW><id>12267142</id><snippet>if-else</snippet></ROW><ROW><id>12267142</id><snippet> if someCondition:
     do_something       # could be a single statement, or a series of statements
 else:
     do_something_else  # could be a single statement, or a series of statements
</snippet></ROW><ROW><id>12267142</id><snippet>else</snippet></ROW><ROW><id>12267142</id><snippet>if</snippet></ROW><ROW><id>12267142</id><snippet>if</snippet></ROW><ROW><id>12267142</id><snippet>tabs</snippet></ROW><ROW><id>12267142</id><snippet>   if xyzzy.endswith('l'):
       print xyzzy
   else:
       something_else
</snippet></ROW><ROW><id>12267170</id><snippet>Tkinter</snippet></ROW><ROW><id>12267170</id><snippet>lambda</snippet></ROW><ROW><id>12267170</id><snippet>self.button = Tkinter.Button(master=self.root, 
                             command=lambda:sys.stdout.write("Hello!\n"),
                             text='say hello')
</snippet></ROW><ROW><id>12267170</id><snippet>__init__</snippet></ROW><ROW><id>12267170</id><snippet>_</snippet></ROW><ROW><id>12267170</id><snippet>from module import *</snippet></ROW><ROW><id>12267170</id><snippet>lambda</snippet></ROW><ROW><id>12267170</id><snippet>__init__</snippet></ROW><ROW><id>12267170</id><snippet>lambda</snippet></ROW><ROW><id>12267183</id><snippet>get_currency_subunit</snippet></ROW><ROW><id>12267183</id><snippet>&gt;&gt;&gt; from simple_currency_helper import get_currency_subunit
&gt;&gt;&gt; print get_currency_subunit('TND')
1000
</snippet></ROW><ROW><id>12267362</id><snippet>random.seed(0)</snippet></ROW><ROW><id>12267362</id><snippet>NN(2,3,1)</snippet></ROW><ROW><id>12267362</id><snippet>error 2.68110
error 0.44049
error 0.39256
error 0.26315
error 0.00584
[ 0.01  0.01  0.07  0.97]
error 2.68110
error 0.44049
error 0.39256
error 0.26315
error 0.00584
[ 0.01  0.01  0.07  0.97]
</snippet></ROW><ROW><id>12267362</id><snippet>rand</snippet></ROW><ROW><id>12267362</id><snippet>random.uniform</snippet></ROW><ROW><id>12267492</id><snippet>import matplotlib.pyplot as plt
soa =np.array( [ [0,0,3,2], [0,0,1,1],[0,0,9,9]]) 
X,Y,U,V = zip(*soa)
plt.figure()
ax = plt.gca()
ax.quiver(X,Y,U,V,angles='xy',scale_units='xy',scale=1)
ax.set_xlim([-1,10])
ax.set_ylim([-1,10])
plt.draw()
</snippet></ROW><ROW><id>12267803</id><snippet>*</snippet></ROW><ROW><id>12267803</id><snippet>shell=True</snippet></ROW><ROW><id>12267803</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12267803</id><snippet>from shutil import copytree
from shutil import Error

try:
   copytree('dir_a', 'dir_b')
except (Error, OSError), e:
    print "Attempt to copy failed: %s" % e
</snippet></ROW><ROW><id>12267803</id><snippet>os.sep</snippet></ROW><ROW><id>12267803</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join('/usr/lib', 'python2.7')
'/usr/lib/python2.7'
</snippet></ROW><ROW><id>12267803</id><snippet>os.path.join</snippet></ROW><ROW><id>12267909</id><snippet>$(document).ready(function() { 
   var entryPage = "payment.html";
   var referrer =  document.referrer; 
   if (referrer.indexOf(entryPage) &gt;= 0){
      // Code to show modal goes here
   }
}); 
</snippet></ROW><ROW><id>12268081</id><snippet>from &lt;module&gt; import *</snippet></ROW><ROW><id>12268081</id><snippet>__all__</snippet></ROW><ROW><id>12268081</id><snippet>__all__</snippet></ROW><ROW><id>12268081</id><snippet>dir(&lt;package&gt;)</snippet></ROW><ROW><id>12268178</id><snippet>self.ui.tableWidget.scrollToItem(self.ui.tableWidget.item(10, 3), QtGui.QAbstractItemView.PositionAtCenter)
</snippet></ROW><ROW><id>12268178</id><snippet>self.ui.tableWidget.scrollToItem(self.ui.tableWidget.selectRow(10), QtGui.QAbstractItemView.PositionAtCenter)
</snippet></ROW><ROW><id>12268178</id><snippet>item = self.ui.tableWidget.item(10, 3)
self.ui.tableWidget.scrollToItem(item, QtGui.QAbstractItemView.PositionAtCenter)
self.ui.tableWidget.selectRow(10)
</snippet></ROW><ROW><id>12268184</id><snippet>&gt;&gt;&gt; dct = {'slab1': {'name':'myn1', 'age':20}, 'slab2':{'name':'myn2','age':200}}
&gt;&gt;&gt; lst = {'/store/dir1/dir_slab1/tindy', '/store/dir2/dirslab2_fine/tunka','/store/dir1/dirslab3/lunku'}
&gt;&gt;&gt; for item in lst:
...    for pattern in dct:
...       if pattern in item:
...           print "%s, %s" % (item, dct[pattern]["age"])
... 
/store/dir1/dir_slab1/tindy, 20
/store/dir2/dirslab2_fine/tunka, 200
</snippet></ROW><ROW><id>12268184</id><snippet>&gt;&gt;&gt; [(item, dct[pattern]["age"]) for item in lst for pattern in dct if pattern in item]
[('/store/dir1/dir_slab1/tindy', 20), ('/store/dir2/dirslab2_fine/tunka', 200)]
</snippet></ROW><ROW><id>12268184</id><snippet>list</snippet></ROW><ROW><id>12268276</id><snippet>result = result.append(q)</snippet></ROW><ROW><id>12268276</id><snippet>append</snippet></ROW><ROW><id>12268276</id><snippet>None</snippet></ROW><ROW><id>12268276</id><snippet>result</snippet></ROW><ROW><id>12268276</id><snippet>result</snippet></ROW><ROW><id>12268276</id><snippet>result.append(q)</snippet></ROW><ROW><id>12268276</id><snippet>q</snippet></ROW><ROW><id>12268300</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>12268300</id><snippet>find /opt/intel -name library.so</snippet></ROW><ROW><id>12268300</id><snippet>/opt/intel/path/to/library.so</snippet></ROW><ROW><id>12268300</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>12268300</id><snippet>include /etc/ld.so.conf.d/*.conf

# Manually added lines
/opt/intel/path/to/library.so
</snippet></ROW><ROW><id>12268300</id><snippet>ldconfig</snippet></ROW><ROW><id>12268376</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for color in 'red green blue green red red green'.split():
        d[color] = d.get(color, 0) + 1

&gt;&gt;&gt; d
{'blue': 1, 'green': 3, 'red': 3}
</snippet></ROW><ROW><id>12268376</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = Counter()
&gt;&gt;&gt; for color in 'red green blue green red red green'.split():
        d[color] += 1

&gt;&gt;&gt; d
Counter({'green': 3, 'red': 3, 'blue': 1})
</snippet></ROW><ROW><id>12268376</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for color in 'red green blue green red red green'.split():
        d[color] += 1

&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {'blue': 1, 'green': 3, 'red': 3})
</snippet></ROW><ROW><id>12268486</id><snippet>is_int</snippet></ROW><ROW><id>12268486</id><snippet>is_int_value</snippet></ROW><ROW><id>12268486</id><snippet>x = Int('x')
print "x types"
print is_int(x) # true, is of sort int
print is_int_value(x) # false, not a "value"

x_ = IntVal(7)
print "x_ types"
print is_int(x_) # true, is also of sort int
print is_int_value(x_) # true, is a value
</snippet></ROW><ROW><id>12268486</id><snippet>is_real</snippet></ROW><ROW><id>12268486</id><snippet>is_algebraic_value</snippet></ROW><ROW><id>12268486</id><snippet>is_rational_value</snippet></ROW><ROW><id>12268486</id><snippet>is_real_value</snippet></ROW><ROW><id>12268486</id><snippet>is_bv_value</snippet></ROW><ROW><id>12268486</id><snippet>is_bv</snippet></ROW><ROW><id>12268486</id><snippet>Expr.IsNumeral</snippet></ROW><ROW><id>12268486</id><snippet>Expr.IsIntNum</snippet></ROW><ROW><id>12268486</id><snippet>is_int_value</snippet></ROW><ROW><id>12268486</id><snippet>Expr.IsNumeral</snippet></ROW><ROW><id>12268486</id><snippet>Expr.IsInt</snippet></ROW><ROW><id>12268486</id><snippet>is_bv_value</snippet></ROW><ROW><id>12268486</id><snippet>ColorVal = Datatype('ColorVal')
ColorVal.declare('white')
ColorVal.declare('black')
ColorVal = ColorVal.create()

mycolor = Const("mycolor", ColorVal)

print ColorVal.recognizer(0) # is_white
print ColorVal.recognizer(1) # is_black

print simplify(ColorVal.is_white(mycolor)) # returns is_white(mycolor)
print simplify(ColorVal.is_black(mycolor)) # returns is_black(mycolor)

mycolorVal = ColorVal.white # set to value white
print simplify(ColorVal.is_white(mycolorVal)) # true
print simplify(ColorVal.is_black(mycolorVal)) # false

# compare "variable" versus "value" with return of is_white, is_black, etc.: if it gives a boolean value, it's a value, if not, it's a variable
print "var vs. value"
x = simplify(ColorVal.is_white(mycolor))
print is_true(x) or is_false(x) # returns false, since x is is_white(mycolor)
y = simplify(ColorVal.is_white(mycolorVal))
print is_true(y) or is_false(y) # true

ColorValEnum, (whiteEnum,blackEnum)  = EnumSort("ColorValEnum",["whiteEnum","blackEnum"])
mycolorEnum = Const("mycolorEnum",ColorValEnum)

print ColorValEnum.recognizer(0) # is_whiteEnum
print ColorValEnum.recognizer(1) # is_blackEnum

# it appears that declaring an enum does not properly create the recognizers in the Python API:
#print simplify(ColorValEnum.is_whiteEnum(mycolorEnum)) # error: gives DatatypeSortRef instance has no attribute 'is_whiteEnum'
#print simplify(ColorValEnum.is_blackEnum(mycolorEnum)) # error: gives DatatypeSortRef instance has no attribute 'is_blackEnum'
</snippet></ROW><ROW><id>12268922</id><snippet>test()</snippet></ROW><ROW><id>12268922</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>12268922</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>12268922</id><snippet>import sys
from SimpleHTTPServer import SimpleHTTPRequestHandler
import BaseHTTPServer


def test(HandlerClass=SimpleHTTPRequestHandler,
         ServerClass=BaseHTTPServer.HTTPServer):

    protocol = "HTTP/1.0"
    host = ''
    port = 8000
    if len(sys.argv) &gt; 1:
        arg = sys.argv[1]
        if ':' in arg:
            host, port = arg.split(':')
            port = int(port)
        else:
            try:
                port = int(sys.argv[1])
            except:
                host = sys.argv[1]

    server_address = (host, port)

    HandlerClass.protocol_version = protocol
    httpd = ServerClass(server_address, HandlerClass)

    sa = httpd.socket.getsockname()
    print "Serving HTTP on", sa[0], "port", sa[1], "..."
    httpd.serve_forever()


if __name__ == "__main__":
    test()
</snippet></ROW><ROW><id>12268922</id><snippet>&gt; python server.py 127.0.0.1     
Serving HTTP on 127.0.0.1 port 8000 ...

&gt; python server.py 127.0.0.1:9000
Serving HTTP on 127.0.0.1 port 9000 ...

&gt; python server.py 8080          
Serving HTTP on 0.0.0.0 port 8080 ...
</snippet></ROW><ROW><id>12268976</id><snippet>output = []
for something in somethingelse:
    output.append(dict([(x, x**3) for x in xrange(1, 3)])
json.dumps(output)
</snippet></ROW><ROW><id>12269143</id><snippet>HelpFormatter</snippet></ROW><ROW><id>12269143</id><snippet>from argparse import HelpFormatter
from operator import attrgetter

class SortingHelpFormatter(HelpFormatter):
    def add_arguments(self, actions):
        actions = sorted(actions, key=attrgetter('option_strings'))
        super(SortingHelpFormatter, self).add_arguments(actions)


p = argparse.ArgumentParser(...
    formatter_class=SortingHelpFormatter,
)
</snippet></ROW><ROW><id>12269143</id><snippet>('--dur', '-d')</snippet></ROW><ROW><id>12269143</id><snippet>-h</snippet></ROW><ROW><id>12269143</id><snippet>usage: [-h] [--first FIRST] [--dur DUR] [--title TITLE] [--interp]

Load duration curves and other plots

optional arguments:
  --dur DUR, -d DUR     Duration in Hours. Use -1 for all
  --first FIRST, -f FIRST
                        First Hour
  --interp, -i          Use linear interpolation for smoother curves
  --title TITLE, -t TITLE
                        Plot Title (for all plots), default=file name
  -h, --help            show this help message and exit
</snippet></ROW><ROW><id>12269624</id><snippet>from oauth2client.client import flow_from_clientsecrets

flow = flow_from_clientsecrets('client_secrets.json',
                               scope='https://www.googleapis.com/auth/calendar',
                               redirect_uri='urn:ietf:wg:oauth:2.0:oob')

auth_uri = flow.step1_get_authorize_url()
print('Visit this site!')
print(auth_uri)
code = raw_input('Insert the given code!')
credentials = flow.step2_exchange(code)
print(credentials)

with open('credentials', 'wr') as f:
    f.write(credentials.to_json())
</snippet></ROW><ROW><id>12269624</id><snippet>def __create_service():
    with open('credentials', 'rw') as f:
        credentials = Credentials.new_from_json(f.read())

    http = httplib2.Http()
    http = credentials.authorize(http)

    return build('calendar', 'v3', http=http)
</snippet></ROW><ROW><id>12269624</id><snippet>service = __create_service()
</snippet></ROW><ROW><id>12269637</id><snippet>str</snippet></ROW><ROW><id>12269637</id><snippet>str</snippet></ROW><ROW><id>12269637</id><snippet>unicode</snippet></ROW><ROW><id>12269637</id><snippet>.decode()</snippet></ROW><ROW><id>12269637</id><snippet>.encode()</snippet></ROW><ROW><id>12269637</id><snippet>str()</snippet></ROW><ROW><id>12269637</id><snippet>unicode</snippet></ROW><ROW><id>12269637</id><snippet>email.encode(sys.getdefaultencoding())</snippet></ROW><ROW><id>12269637</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>12269727</id><snippet> sorted_keys = sorted(d.keys(),key=lambda x:d[x]['key2']['key3'])
</snippet></ROW><ROW><id>12269804</id><snippet>numpy</snippet></ROW><ROW><id>12269804</id><snippet>resize</snippet></ROW><ROW><id>12269804</id><snippet>&gt;&gt;&gt; a = numpy.arange(10)
&gt;&gt;&gt; a.resize(15)
&gt;&gt;&gt; a[5:] = a[:10]
&gt;&gt;&gt; a[0:5] = 0
&gt;&gt;&gt; a
array([0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>12269804</id><snippet>&gt;&gt;&gt; a = numpy.arange(100000000)
&gt;&gt;&gt; a.resize(150000000)
&gt;&gt;&gt; a[50000000:] = a[:100000000]
</snippet></ROW><ROW><id>12269880</id><snippet>dayrange1</snippet></ROW><ROW><id>12269880</id><snippet>for months in mon</snippet></ROW><ROW><id>12269880</id><snippet>m</snippet></ROW><ROW><id>12269880</id><snippet>1</snippet></ROW><ROW><id>12269880</id><snippet>if m == 0:</snippet></ROW><ROW><id>12269880</id><snippet>dayrange1</snippet></ROW><ROW><id>12269880</id><snippet>m</snippet></ROW><ROW><id>12269880</id><snippet>0</snippet></ROW><ROW><id>12269880</id><snippet>days</snippet></ROW><ROW><id>12269880</id><snippet>daterange1</snippet></ROW><ROW><id>12269880</id><snippet>f</snippet></ROW><ROW><id>12269880</id><snippet>daterange1</snippet></ROW><ROW><id>12269880</id><snippet>days</snippet></ROW><ROW><id>12269955</id><snippet>request.META</snippet></ROW><ROW><id>12269955</id><snippet>print request.META['HTTP_ACCEPT_LANGUAGE']
</snippet></ROW><ROW><id>12269955</id><snippet>from webob.acceptparse import Accept

language_accept = Accept(request.META['HTTP_ACCEPT_LANGUAGE'])
print language_accept.best_match(('en', 'de', 'fr'))
print 'en' in language_accept
</snippet></ROW><ROW><id>12269955</id><snippet>&gt;&gt;&gt; header = 'en-us,en;q=0.5'
&gt;&gt;&gt; from webob.acceptparse import Accept
&gt;&gt;&gt; lang = Accept(header)
&gt;&gt;&gt; 'en' in lang
True
&gt;&gt;&gt; 'fr' in lang
False
&gt;&gt;&gt; lang.best_match(('en', 'de', 'fr'))
'en'
</snippet></ROW><ROW><id>12270379</id><snippet>import sys
sys.path.append('your/path')
import testfoo
</snippet></ROW><ROW><id>12270379</id><snippet>./tests</snippet></ROW><ROW><id>12270483</id><snippet>image.convert</snippet></ROW><ROW><id>12270483</id><snippet>image = image.convert("RGBA")
</snippet></ROW><ROW><id>12270511</id><snippet>.iterkeys()</snippet></ROW><ROW><id>12270511</id><snippet>.keys()</snippet></ROW><ROW><id>12270511</id><snippet>viewkeys()</snippet></ROW><ROW><id>12270511</id><snippet>.iteritems()</snippet></ROW><ROW><id>12270672</id><snippet>&gt;&gt;&gt; for elem in ['a', 'b', 'c']:
...     print elem
'a'
'b'
'c'
</snippet></ROW><ROW><id>12270672</id><snippet>for</snippet></ROW><ROW><id>12270722</id><snippet>cursor</snippet></ROW><ROW><id>12270722</id><snippet>.description</snippet></ROW><ROW><id>12270722</id><snippet>cursor.execute("""
                    SELECT id, name
                    FROM school_subjects
            """)
columns = [desc[0] for desc in cursor.description]
result = []
for row in rows:
    row = dict(c, v for zip(columns, row))
    result.append(row)
</snippet></ROW><ROW><id>12270722</id><snippet>.description</snippet></ROW><ROW><id>12270725</id><snippet>print</snippet></ROW><ROW><id>12270725</id><snippet>__repr__</snippet></ROW><ROW><id>12270725</id><snippet>file.write</snippet></ROW><ROW><id>12270725</id><snippet>outfile.write("%s %s\n" % (node, value))
</snippet></ROW><ROW><id>12270725</id><snippet>node</snippet></ROW><ROW><id>12270725</id><snippet>value</snippet></ROW><ROW><id>12270725</id><snippet>[node] + value</snippet></ROW><ROW><id>12270725</id><snippet>value</snippet></ROW><ROW><id>12270725</id><snippet>outfile.write(",".join(map(str, [node] + value)))
</snippet></ROW><ROW><id>12270732</id><snippet>ctrl = TestViewController(view)
</snippet></ROW><ROW><id>12270732</id><snippet>from PyQt4 import QtGui
import sys

class TestView(QtGui.QWidget):

    def __init__(self):
        super(TestView, self).__init__()
        self.initUI()

    def initUI(self):
        self.btn = QtGui.QPushButton('Button', self)
        self.btn.resize(self.btn.sizeHint())
        self.btn.move(50, 50)
        self.btn.clicked.connect(self.buttonClicked)

    def buttonClicked(self):
        print 'clicked'

def main():
    app = QtGui.QApplication(sys.argv)
    view = TestView()
    view.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12270732</id><snippet>from PyQt4 import QtGui
import PyQt4.uic
import sys

class TestController(QtGui.QWidget):

    def __init__(self):
        super(TestController, self).__init__()

        # load view
        uifile = '/path/to/some/widget.ui'
        PyQt4.uic.loadUi(uifile, self)

        # create connections (assuming there is a widget called 'btn' that is loaded)
        self.btn.clicked.connect(self.buttonClicked)

    def buttonClicked(self):
        print 'clicked'

def main():
    app = QtGui.QApplication(sys.argv)
    view = TestController()
    view.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12270732</id><snippet>from PyQt4 import QtGui
import PyQt4.uic
import sys

class TestController(QtGui.QWidget):

    def __init__(self):
        super(TestController, self).__init__()

        # load a view from an external template
        uifile = '/path/to/some/widget.ui'
        self.ui = PyQt4.uic.loadUi(uifile, self)

        # create connections (assuming there is a widget called 'btn' that is loaded)
        self.ui.btn.clicked.connect(self.buttonClicked)

    def buttonClicked(self):
        print 'clicked'

def main():
    app = QtGui.QApplication(sys.argv)
    view = TestController()
    view.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12270786</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>12270786</id><snippet>dateutil.parser.parse()</snippet></ROW><ROW><id>12270786</id><snippet>feeparser._parse_date()</snippet></ROW><ROW><id>12270786</id><snippet>.strftime()</snippet></ROW><ROW><id>12270786</id><snippet>time.strftime()</snippet></ROW><ROW><id>12270917</id><snippet>=</snippet></ROW><ROW><id>12270917</id><snippet>/</snippet></ROW><ROW><id>12270917</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; uuid.uuid1().bytes.encode('base64').rstrip('=\n').replace('/', '_')
'81CMD_bOEeGbPwAjMtYnhg'
</snippet></ROW><ROW><id>12270917</id><snippet>&gt;&gt;&gt; uuid.UUID(bytes=('81CMD_bOEeGbPwAjMtYnhg' + '==').replace('_', '/').decode('base64'))
UUID('f3508c0f-f6ce-11e1-9b3f-002332d62786')
</snippet></ROW><ROW><id>12270917</id><snippet>def uuid2slug(uuidstring):
    return uuid.UUID(uuidstring).bytes.encode('base64').rstrip('=\n').replace('/', '_')

def slug2uuid(slug):
    return str(uuid.UUID(bytes=(slug + '==').replace('_', '/').decode('base64')))
</snippet></ROW><ROW><id>12270980</id><snippet>import x</snippet></ROW><ROW><id>12270980</id><snippet>x.something</snippet></ROW><ROW><id>12270980</id><snippet>from x import *</snippet></ROW><ROW><id>12270980</id><snippet>something</snippet></ROW><ROW><id>12270980</id><snippet>from x import *</snippet></ROW><ROW><id>12270980</id><snippet>from x import something</snippet></ROW><ROW><id>12270980</id><snippet>something</snippet></ROW><ROW><id>12271210</id><snippet>surface.convert()</snippet></ROW><ROW><id>12271210</id><snippet>image = pygame.image.load("logo.png")
image = image.convert()
</snippet></ROW><ROW><id>12271210</id><snippet>image = pygame.image.load("logo.png").convert()
</snippet></ROW><ROW><id>12271210</id><snippet>surface.convert_alpha()</snippet></ROW><ROW><id>12271210</id><snippet>import pygame, sys
pygame.init()
window=pygame.display.set_mode((1500, 800))
background=pygame.Surface((window.get_rect().width, window.get_rect().height))
background.fill((0, 0, 0))
image=pygame.image.load('InsertImageHere.png')
image=image.convert()
image2=pygame.image.load('InsertImage2Here.png')
image2=image2.convert_alpha()
rect=image.get_rect()
rect2=image2.get_rect()
rect2.left=rect.width+1
i=1
while True:
    for event in pygame.event.get():
        if event.type==12:
            pygame.quit()
            sys.exit()
    image.set_alpha(i)
    image2.set_alpha(i)
    window.fill((255, 255, 255))
    window.blit(background, background.get_rect())
    window.blit(image, rect)
    window.blit(image2, rect2)
    pygame.time.delay(20)
    i+=1
    if i==255:
        i=1
    pygame.display.update()
</snippet></ROW><ROW><id>12271210</id><snippet>surface.convert_alpha()</snippet></ROW><ROW><id>12271210</id><snippet>pygame.time.delay(20)</snippet></ROW><ROW><id>12271230</id><snippet>GPL Ghostscript 8.71: Unrecoverable error, exit code 1
</snippet></ROW><ROW><id>12271230</id><snippet>gs [args] 2&gt;stderr.txt 1&gt;stdout.txt</snippet></ROW><ROW><id>12271230</id><snippet>shlex.split()</snippet></ROW><ROW><id>12271230</id><snippet>str.split()</snippet></ROW><ROW><id>12271230</id><snippet>cmd % filename</snippet></ROW><ROW><id>12271230</id><snippet>%d</snippet></ROW><ROW><id>12271230</id><snippet>%%d</snippet></ROW><ROW><id>12271535</id><snippet>with open('data.txt') as f:
    polyShape = []
    for line in f:
        line = line.split() # to deal with blank 
        if line:            # lines (ie skip them)
            line = [int(i) for i in line]
            polyShape.append(line)
</snippet></ROW><ROW><id>12271535</id><snippet>[[0, 0, 3, 50], [50, 100, 4, 20]]
</snippet></ROW><ROW><id>12271535</id><snippet>with</snippet></ROW><ROW><id>12271593</id><snippet>words = {"the", "set", "of", "words"}
if words &lt;= set_of_words:
   do_stuff()
</snippet></ROW><ROW><id>12271665</id><snippet>writer = csv.writer(f, quoting=csv.QUOTE_MINIMAL)
for row in cursor:
    writer.writerow(list(row) + ['', '', '', ''])
</snippet></ROW><ROW><id>12271881</id><snippet>File</snippet></ROW><ROW><id>12271881</id><snippet>Allocate console</snippet></ROW><ROW><id>12271988</id><snippet>from collections import Counter
from itertools import izip
import csv

with open(filename, 'rb') as f:
    reader = csv.reader(f, delimiter='\t')
    keys = next(reader)
    counts = Counter()
    for i, row in enumerate(reader):
        counts.update(k for k, v in izip(keys, row) if v)
    line_count = i + 1
    for k in keys:
        print k, 'density:', 1.0 * counts[k] / line_count
</snippet></ROW><ROW><id>12272031</id><snippet>field | language | message
</snippet></ROW><ROW><id>12272031</id><snippet>WELCOME_MESSAGE | EN | Welcome to our online h ome
WELCOME_MESSAGE | FR | bienvenue chez nous en ligne
WELCOME_MESSAGE | SW | kuwakaribisha nyumbani kwetu online
</snippet></ROW><ROW><id>12272031</id><snippet>There is one item.  
There are four items.

You have one new message.
You have four new messages.
</snippet></ROW><ROW><id>12272251</id><snippet>a = int(input("Enter a number: "))
more = input("Please enter Y or N if you want to add more numbers: ")
summ=a          #intialize sum to a
count=1         # no. of integers entered, to calculate mean
while more.lower()=="y":
    b = int(input("Enter another number: "))
    count+=1          #increase count by 1
    summ+= b          #add b to sum
    abMean = summ/float(count)         #used float(count) to get actual value

    print("sum=",summ)
    print("mean=",abMean)    
    more = input("Please enter Y or N if you want to add more numbers: ") #ask for user input
print("sum=",summ)
print("mean=",abMean)  
</snippet></ROW><ROW><id>12272251</id><snippet>Enter a number: 5
Please enter Y or N if you want to add more numbers: y
Enter another number: 5
sum= 10
mean= 5.0
Please enter Y or N if you want to add more numbers: y
Enter another number: 2
sum= 12
mean= 4.0
Please enter Y or N if you want to add more numbers: y
Enter another number: 15
sum= 27
mean= 6.75
Please enter Y or N if you want to add more numbers: y
Enter another number: 10
sum= 37
mean= 7.4
Please enter Y or N if you want to add more numbers: n
sum= 37
mean= 7.4
</snippet></ROW><ROW><id>12272262</id><snippet># -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

import subprocess
import sys
import select

p = subprocess.Popen(["find", "/proc"],
    stdout=subprocess.PIPE, stderr=subprocess.PIPE)

stdout = []
stderr = []

while True:
    reads = [p.stdout.fileno(), p.stderr.fileno()]
    ret = select.select(reads, [], [])

    for fd in ret[0]:
        if fd == p.stdout.fileno():
            read = p.stdout.readline()
            sys.stdout.write('stdout: ' + read)
            stdout.append(read)
        if fd == p.stderr.fileno():
            read = p.stderr.readline()
            sys.stderr.write('stderr: ' + read)
            stderr.append(read)

    if p.poll() != None:
        break

print 'program ended'

print 'stdout:', "".join(stdout)
print 'stderr:', "".join(stderr)
</snippet></ROW><ROW><id>12272365</id><snippet>self.owner.getTopParent()</snippet></ROW><ROW><id>12272365</id><snippet>return</snippet></ROW><ROW><id>12272365</id><snippet>None</snippet></ROW><ROW><id>12272420</id><snippet>f, dummy = np.histogram(c, bins=(np.arange(binsmax+1))
</snippet></ROW><ROW><id>12272522</id><snippet>if s.setSession():
    response = make_response(redirect('/home'))
    response.set_cookie('session_id', s.session_id)
    return response
</snippet></ROW><ROW><id>12272730</id><snippet>./agent/mibgroup/host/data_access/swrun_kinfo.c:        entry-&gt;hrSWRunPerfCPU  =     proc_table[i].kp_eproc.e_uticks;
./agent/mibgroup/host/data_access/swrun_kinfo.c:        entry-&gt;hrSWRunPerfCPU += proc_table[i].kp_eproc.e_sticks;
./agent/mibgroup/host/data_access/swrun_kinfo.c:        entry-&gt;hrSWRunPerfCPU +=   proc_table[i].kp_eproc.e_iticks;
./agent/mibgroup/host/data_access/swrun_kinfo.c:        entry-&gt;hrSWRunPerfMem  = proc_table[i].kp_eproc.e_vm.vm_tsize;
./agent/mibgroup/host/data_access/swrun_kinfo.c:        entry-&gt;hrSWRunPerfMem += proc_table[i].kp_eproc.e_vm.vm_ssize;
./agent/mibgroup/host/data_access/swrun_kinfo.c:        entry-&gt;hrSWRunPerfMem += proc_table[i].kp_eproc.e_vm.vm_dsize;
./agent/mibgroup/host/hr_swrun.c:        long_return = proc_table[LowProcIndex].kp_eproc.e_uticks +
./agent/mibgroup/host/hr_swrun.c:            proc_table[LowProcIndex].kp_eproc.e_sticks +
./agent/mibgroup/host/hr_swrun.c:            proc_table[LowProcIndex].kp_eproc.e_iticks;
./agent/mibgroup/host/hr_swrun.c:            proc_table[LowProcIndex].kp_eproc.e_vm.vm_map.size / 1024;
./agent/mibgroup/host/hr_swrun.c:        long_return = proc_table[LowProcIndex].kp_eproc.e_vm.vm_tsize +
./agent/mibgroup/host/hr_swrun.c:            proc_table[LowProcIndex].kp_eproc.e_vm.vm_ssize +
./agent/mibgroup/host/hr_swrun.c:            proc_table[LowProcIndex].kp_eproc.e_vm.vm_dsize;
./agent/mibgroup/ucd-snmp/proc.c:#define EP(pp, field) ((pp)-&gt;kp_eproc . field)
./agent/mibgroup/ucd-snmp/proc.c:#define VP(pp, field) ((pp)-&gt;kp_eproc.e_vm . field)
</snippet></ROW><ROW><id>12272730</id><snippet>diff -ur net-snmp-5.7.1/agent/mibgroup/host/data_access/swrun_kinfo.c mynet-    snmp-5.7.1/agent/mibgroup/host/data_access/swrun_kinfo.c
--- net-snmp-5.7.1/agent/mibgroup/host/data_access/swrun_kinfo.c        Wed Sep 28 07:53:47 2011
+++ mynet-snmp-5.7.1/agent/mibgroup/host/data_access/swrun_kinfo.c      Wed Sep  5 04:26:54 2012
@@ -85,10 +85,10 @@
  * early FreeBSD, NetBSD, OpenBSD kinfo_proc field names
  */
 #define SWRUN_TABLE    kinfo_proc
 -#define SWRUN_K_STAT   kp_proc.p_stat
 -#define SWRUN_K_PID    kp_proc.p_pid
 -#define SWRUN_K_COMM   kp_proc.p_comm
 -#define SWRUN_K_FLAG   kp_proc.p_flag
 +#define SWRUN_K_STAT   p_stat
 +#define SWRUN_K_PID    p_pid
 +#define SWRUN_K_COMM   p_comm
 +#define SWRUN_K_FLAG   p_flag
 /*      SWRUN_K_CLASS  not defined     */
 #endif

@@ -159,7 +159,8 @@
 #if HAVE_KVM_GETPROC2
     proc_table = kvm_getproc2(kd, KERN_PROC_ALL, 0, sizeof(struct kinfo_proc2), &amp;nprocs );
 #else
-    proc_table = kvm_getprocs(kd, KERN_PROC_ALL, 0, &amp;nprocs );
+    proc_table = kvm_getprocs(kd, KERN_PROC_ALL, 0, sizeof(struct kinfo_proc), &amp;nprocs );
+    //proc_table = kvm_getprocs(kd, KERN_PROC_ALL, 0, &amp;nprocs );
 #endif
     for ( i=0 ; i&lt;nprocs; i++ ) {
         if ( 0 == proc_table[i].SWRUN_K_STAT )
@@ -304,21 +305,22 @@
        entry-&gt;hrSWRunPerfCPU += proc_table[i].kp_lwp.kl_iticks;
        entry-&gt;hrSWRunPerfMem  = proc_table[i].kp_vm_map_size / 1024;
 #elif defined(dragonfly)
-       entry-&gt;hrSWRunPerfCPU  = proc_table[i].kp_eproc.e_uticks;
-       entry-&gt;hrSWRunPerfCPU += proc_table[i].kp_eproc.e_sticks;
-       entry-&gt;hrSWRunPerfCPU += proc_table[i].kp_eproc.e_iticks;
+       entry-&gt;hrSWRunPerfCPU  = proc_table[i].p_uticks;
+       entry-&gt;hrSWRunPerfCPU += proc_table[i].p_sticks;
+       entry-&gt;hrSWRunPerfCPU += proc_table[i].p_iticks;
        entry-&gt;hrSWRunPerfMem  = proc_table[i].kp_vm_map_size / 1024;

 #else
         /*
          * early FreeBSD, NetBSD, OpenBSD
          */
-        entry-&gt;hrSWRunPerfCPU  = proc_table[i].kp_proc.p_uticks;
-        entry-&gt;hrSWRunPerfCPU += proc_table[i].kp_proc.p_sticks;
-        entry-&gt;hrSWRunPerfCPU += proc_table[i].kp_proc.p_iticks;
-        entry-&gt;hrSWRunPerfMem  = proc_table[i].kp_eproc.e_vm.vm_tsize;
-        entry-&gt;hrSWRunPerfMem += proc_table[i].kp_eproc.e_vm.vm_ssize;
-        entry-&gt;hrSWRunPerfMem += proc_table[i].kp_eproc.e_vm.vm_dsize;
+        entry-&gt;hrSWRunPerfCPU  = proc_table[i].p_uticks;
+        entry-&gt;hrSWRunPerfCPU += proc_table[i].p_sticks;
+        entry-&gt;hrSWRunPerfCPU += proc_table[i].p_iticks;
+        struct vmspace *l = proc_table[i].p_vmspace;
+        entry-&gt;hrSWRunPerfMem  = l-&gt;vm_tsize;
+        entry-&gt;hrSWRunPerfMem += l-&gt;vm_ssize;
+        entry-&gt;hrSWRunPerfMem += l-&gt;vm_dsize;
         entry-&gt;hrSWRunPerfMem *= (getpagesize() / 1024);
 #endif
     }
</snippet></ROW><ROW><id>12272779</id><snippet>import bson
&gt;&gt;&gt; a = numpy.random.rand(12).reshape((3,4))
&gt;&gt;&gt; b = bson.dumps({'a':a.tolist()})
&gt;&gt;&gt; print bson.loads(b)
{u'a': [[0.033390565943162254, 0.7282666963459123, 0.03719924011978737, 0.2664821209717694], [0.6145164300761253, 0.3662769247564551, 0.5973843055182299, 0.42908933503924207], [0.05901830243140804, 0.31533731904861184, 0.7158207045507905, 0.12686922689849378]]}
</snippet></ROW><ROW><id>12272872</id><snippet>"hi".print()</snippet></ROW><ROW><id>12272872</id><snippet>"hi"</snippet></ROW><ROW><id>12272872</id><snippet>print</snippet></ROW><ROW><id>12272872</id><snippet>print</snippet></ROW><ROW><id>12272875</id><snippet>numrows = int(x.rowcount)</snippet></ROW><ROW><id>12272875</id><snippet>int</snippet></ROW><ROW><id>12272875</id><snippet>(x.rowcount)</snippet></ROW><ROW><id>12273001</id><snippet>./someprog "$@"
</snippet></ROW><ROW><id>12273111</id><snippet>from collections import defaultdict
from math import sqrt

def factor(n):
   Â i = 2
   Â limit = sqrt(n) Â Â Â 
   Â while i &lt;= limit:
   Â Â Â if n % i == 0:
Â Â    Â Â Â yield i
   Â Â Â Â Â n = n / i
   Â Â Â Â Â limit = sqrt(n) Â Â 
   Â Â Â else:
   Â Â Â Â Â i += 1
   Â if n &gt; 1:
   Â Â Â   yield n

def pfac(num):
    d=defaultdict(int)
Â Â Â  for f in factor(num):
Â Â Â Â  Â Â Â d[f]+=1

Â Â Â  terms=[]
Â Â Â  for e in sorted(d.keys()):
Â Â Â Â  Â Â Â if d[e]&gt;1:
Â Â Â Â Â  Â Â Â Â Â Â terms.append('{:,}^{}'.format(e,d[e]))
Â Â Â Â Â Â  Â else:
Â Â Â Â Â Â Â  Â Â Â Â terms.append('{:,}'.format(e))

Â Â Â  print ' * '.join(terms),'=','{:,}'.format(num) Â Â Â Â Â Â Â Â Â Â 

pfac(600851475143*1000000-1)
pfac(600851475143*1000000)
pfac(600851475143*1000000+1)
</snippet></ROW><ROW><id>12273111</id><snippet>83 * 127 * 57,001,373,222,939 = 600,851,475,142,999,999
2^6 * 5^6 * 71 * 839 * 1,471 * 6,857 = 600,851,475,143,000,000
3^2 * 19 * 103 * 197 * 277 * 16,111 * 38,803 = 600,851,475,143,000,001
</snippet></ROW><ROW><id>12273136</id><snippet>@app.before_request
def before_request():
    try:
        g.user = User.query.filter_by(username=session['username']).first()
    except Exception:
        g.user = None
</snippet></ROW><ROW><id>12273374</id><snippet>draw</snippet></ROW><ROW><id>12273374</id><snippet>gfxdraw</snippet></ROW><ROW><id>12273374</id><snippet>gfxdraw</snippet></ROW><ROW><id>12273374</id><snippet>pygame.draw</snippet></ROW><ROW><id>12273374</id><snippet>pygame.gfxdraw</snippet></ROW><ROW><id>12273374</id><snippet>draw</snippet></ROW><ROW><id>12273374</id><snippet>gfxdraw</snippet></ROW><ROW><id>12273453</id><snippet>obj_create(...)</snippet></ROW><ROW><id>12273453</id><snippet>tastypie.resources.ModelResource</snippet></ROW><ROW><id>12273453</id><snippet>    def obj_create(self, bundle, request=None, **kwargs):
        """
        A ORM-specific implementation of ``obj_create``.
        """
        bundle.obj = self._meta.object_class()

        for key, value in kwargs.items():
            setattr(bundle.obj, key, value)

        bundle = self.full_hydrate(bundle)

        # Save FKs just in case.
        self.save_related(bundle)

        # Save the main object.
        bundle.obj.save()

        # Now pick up the M2M bits.
        m2m_bundle = self.hydrate_m2m(bundle)
        self.save_m2m(m2m_bundle)
        return bundle
</snippet></ROW><ROW><id>12273453</id><snippet>from tastypie.resources import ModelResource

class MyResource( ModelResource ):

    def obj_create( self, bundle, request = None, **kwargs ):
        # ...
        # create User instance based on what's in the bundle
        # user = ...
        # ...
        # kwargs[ 'user' ] = user &lt; will be set on Candidate instance in super()
        # ...

        # call super, resulting in creation of the Candidate model
        super( MyResource, self ).obj_create( self, bundle, request, **kwargs )
</snippet></ROW><ROW><id>12273486</id><snippet>#!usr/bin/python
import os

os.chdir('./P574/J0998-1034')
os.system('vap -c freq *.SFTC &gt; 1400list.txt')
</snippet></ROW><ROW><id>12273526</id><snippet>for idx in nonzero:
    pythonarray[idx] = numpyarray[idx]
</snippet></ROW><ROW><id>12273646</id><snippet>parse_dates=['Year','Day','Hour','Min','Sec']</snippet></ROW><ROW><id>12273646</id><snippet>parse_dates</snippet></ROW><ROW><id>12273646</id><snippet>In [1]: import pandas as pd

In [2]: from datetime import datetime, timedelta

In [3]: from cStringIO import StringIO

In [4]: data = """\
Year,Day,Hour,Min,Sec.,P1'S1
 2003,  1, 0, 0,12.22, 0.541
 2003,  1, 1, 0,20.69, 0.708
 2003,  1, 2, 0, 4.95, 0.520
 2003,  1, 3, 0,13.42, 0.539
"""

In [5]: def parse(yr, doy, hr, min, sec):
    yr, doy, hr, min = [int(x) for x in [yr, doy, hr, min]]
    sec = float(sec)
    mu_sec = int((sec - int(sec)) * 1e6)
    sec = int(sec)
    dt = datetime(yr - 1, 12, 31)
    delta = timedelta(days=doy, hours=hr, minutes=min, seconds=sec,
                      microseconds=mu_sec)
    return dt + delta
   ...: 

In [6]: pd.read_csv(StringIO(data), parse_dates={'datetime':      
           ['Year','Day','Hour','Min','Sec.']}, 
           date_parser=parse, index_col='datetime')
Out[6]: 
                            P1'S1
datetime                         
2003-01-01 00:00:12.220000  0.541
2003-01-01 01:00:20.690000  0.708
2003-01-01 02:00:04.950000  0.520
2003-01-01 03:00:13.419999  0.539
</snippet></ROW><ROW><id>12273672</id><snippet>X()</snippet></ROW><ROW><id>12273672</id><snippet>X</snippet></ROW><ROW><id>12273672</id><snippet>X().someMethod()</snippet></ROW><ROW><id>12273672</id><snippet>self</snippet></ROW><ROW><id>12273672</id><snippet>X.someMethod(self)</snippet></ROW><ROW><id>12273672</id><snippet>self</snippet></ROW><ROW><id>12273672</id><snippet>self.blah = 8</snippet></ROW><ROW><id>12273672</id><snippet>X.someMethod(self)</snippet></ROW><ROW><id>12273672</id><snippet>blah</snippet></ROW><ROW><id>12273672</id><snippet>X().someMethod()</snippet></ROW><ROW><id>12273672</id><snippet>blah</snippet></ROW><ROW><id>12273672</id><snippet>&gt;&gt;&gt; class X:
... 
...     def some_method(self):
...         print("X.some_method called on", self)
... 
... class Y:
... 
...     def some_method(self):
...         print("Y.some_method called on", self)
... 
... class Foo(X,Y):
... 
...     def some_method(self):
...         X().some_method()
...         Y().some_method()
...         print("Foo.some_method called on", self)
... 
... class Bar(X,Y):
... 
...     def some_method(self):
...         X.some_method(self)
...         Y.some_method(self)
...         print("Bar.some_method called on", self)
&gt;&gt;&gt; Foo().some_method()
('X.some_method called on', &lt;__main__.X instance at 0x0142F3C8&gt;)
('Y.some_method called on', &lt;__main__.Y instance at 0x0142F3C8&gt;)
('Foo.some_method called on', &lt;__main__.Foo instance at 0x0142F3A0&gt;)
&gt;&gt;&gt; Bar().some_method()
('X.some_method called on', &lt;__main__.Bar instance at 0x0142F3C8&gt;)
('Y.some_method called on', &lt;__main__.Bar instance at 0x0142F3C8&gt;)
('Bar.some_method called on', &lt;__main__.Bar instance at 0x0142F3C8&gt;)
</snippet></ROW><ROW><id>12273672</id><snippet>Foo</snippet></ROW><ROW><id>12273672</id><snippet>Bar</snippet></ROW><ROW><id>12273672</id><snippet>super</snippet></ROW><ROW><id>12273672</id><snippet>super(Foo, self).someMethod()</snippet></ROW><ROW><id>12273672</id><snippet>super().someMethod()</snippet></ROW><ROW><id>12273672</id><snippet>super</snippet></ROW><ROW><id>12273672</id><snippet>super</snippet></ROW><ROW><id>12273693</id><snippet>In [3]: pandas.DataFrame(list(ts.values), index=ts.index)
Out[3]: 
   0  1  2  3   4
a  1  2  3  4   5
b  6  7  8  9  10
</snippet></ROW><ROW><id>12273751</id><snippet>super</snippet></ROW><ROW><id>12273751</id><snippet>super()</snippet></ROW><ROW><id>12273751</id><snippet>X</snippet></ROW><ROW><id>12273751</id><snippet>X</snippet></ROW><ROW><id>12273751</id><snippet>super()</snippet></ROW><ROW><id>12273751</id><snippet>Y</snippet></ROW><ROW><id>12273751</id><snippet>super</snippet></ROW><ROW><id>12273751</id><snippet>super</snippet></ROW><ROW><id>12273751</id><snippet>object</snippet></ROW><ROW><id>12273751</id><snippet>object</snippet></ROW><ROW><id>12273775</id><snippet>import re
re.sub('(StartNum)(.*)(/StartNum)', r"\1boop\3", 'StartNumbworp/StartNum')
</snippet></ROW><ROW><id>12273814</id><snippet>import time
lines = []
with open("somelog.txt") as f:
      lines = [line for line in f]
def OnlyRecent(line):
      return time.strptime(line.split("[")[0].strip(),"%a %b %d %h:%m:%s %Y") &lt; (time.time()-(60*60*24*5)) #5 days old
print "\n".join(filter(OnlyRecent,lines))
</snippet></ROW><ROW><id>12273839</id><snippet>a[:]=filter(lambda x:x&lt;=2,a)
</snippet></ROW><ROW><id>12273839</id><snippet>a[:] = [itm for itm in a if itm &gt; 2]
</snippet></ROW><ROW><id>12274016</id><snippet>sqrt((mob.x-player.x)**2 + (mob.y-player.y)**2)
</snippet></ROW><ROW><id>12274095</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>12274095</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(struct.pack('i',70691357))
'1daa3604'
</snippet></ROW><ROW><id>12274169</id><snippet>a[blah] = ...</snippet></ROW><ROW><id>12274169</id><snippet>__setitem__</snippet></ROW><ROW><id>12274169</id><snippet>a.blah = ...</snippet></ROW><ROW><id>12274169</id><snippet>__setattr__</snippet></ROW><ROW><id>12274169</id><snippet>a</snippet></ROW><ROW><id>12274169</id><snippet>a = ...</snippet></ROW><ROW><id>12274169</id><snippet>someFunc(MyClass().method())
</snippet></ROW><ROW><id>12274169</id><snippet>a = MyClass().method()
someFunc(a)
</snippet></ROW><ROW><id>12274347</id><snippet>sortedtime = sorted(dict.iteritems(), key=lambda d: map(int, d[1].split('-')))
</snippet></ROW><ROW><id>12274347</id><snippet>[1]</snippet></ROW><ROW><id>12274360</id><snippet>C:\FILES\</snippet></ROW><ROW><id>12274360</id><snippet>PREFIX_*</snippet></ROW><ROW><id>12274360</id><snippet>import glob, os
import zipfile
import defaultdict

# We organize the file names in a dict to
# make writing out the zip files easier

d = defaultdict(list)

for fname in glob.glob(r'C:\FILES\*'):
   d[fname.split('_')[0]].append(fname)

# Now we go through each file by letter
for letter in d:
    with zipfile.ZipFile(letter+'.zip','w') as f:
        for filename in d[letter]:
            f.write(filename, os.path.basename(filename), zipfile.ZIP_DEFLATED)
</snippet></ROW><ROW><id>12274398</id><snippet>readlines</snippet></ROW><ROW><id>12274398</id><snippet>re.sub</snippet></ROW><ROW><id>12274398</id><snippet>data</snippet></ROW><ROW><id>12274398</id><snippet>import re
f1 = open('name.xml', 'r')
f2 = open('result.txt', 'w')
data = f1.readlines()
f1.close()
n = 5000
rex = re.compile('&lt;StartNum&gt;(.*)&lt;/StartNum&gt;')
for line in data:
    f2.write(rex.sub(r'&lt;StartNum&gt;%s&lt;/StartNum&gt;' % str(n), line))
    if "&lt;StartNum&gt;" in line:
        n += 1
f2.close()
</snippet></ROW><ROW><id>12274398</id><snippet>&lt;root&gt;
    &lt;StartNum&gt;1&lt;/StartNum&gt;
    &lt;StartNum&gt;5&lt;/StartNum&gt;
    &lt;StartNum&gt;8&lt;/StartNum&gt;
    &lt;StartNum&gt;9&lt;/StartNum&gt;
    &lt;StartNum&gt;13&lt;/StartNum&gt;
    &lt;StartNum&gt;33&lt;/StartNum&gt;
    &lt;foo&gt;
        &lt;bar baz="5" /&gt;
    &lt;/foo&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>12274398</id><snippet>&lt;root&gt;
    &lt;StartNum&gt;5000&lt;/StartNum&gt;
    &lt;StartNum&gt;5001&lt;/StartNum&gt;
    &lt;StartNum&gt;5002&lt;/StartNum&gt;
    &lt;StartNum&gt;5003&lt;/StartNum&gt;
    &lt;StartNum&gt;5004&lt;/StartNum&gt;
    &lt;StartNum&gt;5005&lt;/StartNum&gt;
    &lt;foo&gt;
        &lt;bar baz="5" /&gt;
    &lt;/foo&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>12274910</id><snippet>def partial(func, *args, **kwds):
    "Emulate Python2.6's functools.partial"
    return lambda *fargs, **fkwds: func(*(args+fargs), **dict(kwds, **fkwds))
</snippet></ROW><ROW><id>12275567</id><snippet>pname = line</snippet></ROW><ROW><id>12275567</id><snippet>pname = line.rstrip('\n')
</snippet></ROW><ROW><id>12275698</id><snippet>'&lt;Import Project="$(ProjectName).targets" /&gt;' in file_content
</snippet></ROW><ROW><id>12275698</id><snippet>import re
regex = re.compile(r'&lt;Import Project="\$\(ProjectName\)\.targets\s*/&gt;')
if not regex.search(file_content):
    insert_line_into_file()
else:
    #the line already exists
</snippet></ROW><ROW><id>12275855</id><snippet>import random
photos = [{'set' : 1,'photos' : ['photo1','photo2'....'photo14']}, {'set' : 2,.....]
weight = {1: 6, 2: 3, 3: 1} # set : number of shown photos
show = []
for d in photos:
    show.extend(random.sample(d['photos'], weight[d['set']]))
random.shuffle(show)
# show now contains a shuffled list of 6 photos from set 1, 3 from set 2 and 1 from set 3
</snippet></ROW><ROW><id>12276220</id><snippet>import web

class MyApplication(web.application):
    def run(self, port=8080, *middleware):
        func = self.wsgifunc(*middleware)
        return web.httpserver.runsimple(func, ('0.0.0.0', port))

urls = (
   '/(.*)', 'hello'
)

class hello:
    def GET(self, name):
        if not name:
            name = 'World'
        return 'Hello, ' + name + '!'

if __name__ == "__main__":
    app = MyApplication(urls, globals())
    app.run(port=8888)
</snippet></ROW><ROW><id>12276239</id><snippet>1&lt;3&gt;2</snippet></ROW><ROW><id>12276239</id><snippet>1&lt;3 and 3&gt;2</snippet></ROW><ROW><id>12276266</id><snippet>import xml.dom.minidom

importstring = "$(Projectname).targets"
filename = "test.xml"

tree = xml.dom.minidom.parse(filename)
Project = tree.getElementsByTagName("Project")[0]

for Import in Project.getElementsByTagName("Import"):
    if Import.getAttribute("Project") == importstring:
        break
else: # note this is else belongs to the for, not the if
    newImport = xml.dom.minidom.Element("Import")
    newImport.setAttribute("Project", importstring)
    Project.appendChild(newImport)

tree.writexml(open(filename, 'w'))
</snippet></ROW><ROW><id>12276424</id><snippet>cmd = 'svn update http://myserver/myrepo'
p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
output, stderr = p.communicate()      
status = p.returncode
if output.strip().startswith('Skipped'):
    logging.error('A fatal has error occurred while executing command: ' + cmd)
    exit(-1)
</snippet></ROW><ROW><id>12277080</id><snippet># exemple data
A = np.random.rand(2, 3, 4, 5)
axis = 2
n = A.ndim
# building n-dimensional slice
s = [slice(None), ] * n
s[axis] = slice(0, n - 1)
B = A[s]
s[axis] = slice(1, n)
C = A[s]
</snippet></ROW><ROW><id>12277080</id><snippet>B = A[[slice(None) if i != axis else slice(0, n-1) for i in xrange(n)]]
C = A[[slice(None) if i != axis else slice(1, n) for i in xrange(n)]]
</snippet></ROW><ROW><id>12277200</id><snippet>os.system('do_something &gt;/tmp/myoutput')
</snippet></ROW><ROW><id>12277357</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>12277357</id><snippet>import sys
from PyQt4 import QtGui
from test import Ui_MainWindow

class MyForm(QtGui.QMainWindow, Ui_MainWindow):
   def __init__(self, parent=None):
       QtGui.QWidget.__init__(self, parent)
       self.setupUi(self)


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = MyForm()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12277357</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>12277357</id><snippet>import sys
from PyQt4 import QtGui
from test import Ui_MainWindow

class MyForm(QtGui.QMainWindow):
   def __init__(self, parent=None):
       QtGui.QWidget.__init__(self, parent)
       self.ui = Ui_MainWindow()    #note: instance, not the class
       self.ui.setupUi(self)


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = MyForm()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12277584</id><snippet>required=True</snippet></ROW><ROW><id>12277584</id><snippet>()</snippet></ROW><ROW><id>12277584</id><snippet>text = db.TextProperty()
</snippet></ROW><ROW><id>12277680</id><snippet>items</snippet></ROW><ROW><id>12277680</id><snippet>children</snippet></ROW><ROW><id>12277680</id><snippet>db.Query</snippet></ROW><ROW><id>12277680</id><snippet>p.children.count</snippet></ROW><ROW><id>12277832</id><snippet>self._obj</snippet></ROW><ROW><id>12277832</id><snippet>pool</snippet></ROW><ROW><id>12277832</id><snippet>pool</snippet></ROW><ROW><id>12277832</id><snippet>get</snippet></ROW><ROW><id>12277832</id><snippet>dict</snippet></ROW><ROW><id>12277832</id><snippet>pool</snippet></ROW><ROW><id>12277832</id><snippet>None</snippet></ROW><ROW><id>12277832</id><snippet>self._obj</snippet></ROW><ROW><id>12277895</id><snippet>url_array = [ "http://%s/stuff" % x for x in cities ]
</snippet></ROW><ROW><id>12277895</id><snippet>url_array = [ "http://hamburg/stuff", "http://berlin/stuff" ... ]
</snippet></ROW><ROW><id>12277916</id><snippet>curl</snippet></ROW><ROW><id>12277916</id><snippet>sudo</snippet></ROW><ROW><id>12277916</id><snippet>$ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
$ sudo python get-pip.py
</snippet></ROW><ROW><id>12277916</id><snippet>sudo</snippet></ROW><ROW><id>12277916</id><snippet>python</snippet></ROW><ROW><id>12277916</id><snippet>$ curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | sudo python
</snippet></ROW><ROW><id>12277960</id><snippet>&gt;&gt;&gt; [x for x in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; print x
9
</snippet></ROW><ROW><id>12278043</id><snippet>filename = "filewithcontents.csv"
# opening the file with w+ mode truncates the file
f = open(filename, "w+")
f.close()
</snippet></ROW><ROW><id>12278493</id><snippet>full_time = timedelta(seconds=multiplier * passed_time.total_seconds())
</snippet></ROW><ROW><id>12278493</id><snippet>timedelta.total_seconds</snippet></ROW><ROW><id>12278493</id><snippet>def timedelta_total_seconds(td):
    return (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / float(10**6)
</snippet></ROW><ROW><id>12278547</id><snippet>.tgz</snippet></ROW><ROW><id>12278547</id><snippet>.zip</snippet></ROW><ROW><id>12278547</id><snippet>easy_install</snippet></ROW><ROW><id>12278547</id><snippet>pip</snippet></ROW><ROW><id>12278547</id><snippet>buildout</snippet></ROW><ROW><id>12278547</id><snippet>.egg</snippet></ROW><ROW><id>12278547</id><snippet>.egg</snippet></ROW><ROW><id>12278547</id><snippet>setup.py</snippet></ROW><ROW><id>12278604</id><snippet>macro(add_python_target tgt)
  foreach(file ${ARGN})
    set(OUT ${CMAKE_CURRENT_BINARY_DIR}/${file}.pyo)
    list(APPEND OUT_FILES ${OUT})
    add_custom_command(OUTPUT ${OUT}
        COMMAND &lt;python command you use to byte-compile .py file&gt;)
  endforeach()

  add_custom_target(${tgt} ALL
    DEPENDS ${OUT_FILES}
endmacro()
</snippet></ROW><ROW><id>12278604</id><snippet>add_python_target(blabla blah.py)
</snippet></ROW><ROW><id>12278617</id><snippet>from django.template.defaultfilters import slice_filter

@register.filter("slice_default", is_safe=True)
def slice_filter_20(value, arg=":20"):
    return slice_filter(value, arg)
</snippet></ROW><ROW><id>12278642</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;body&gt;
    &lt;h1&gt;Enter some text&lt;/h1&gt;
    &lt;h2&gt;(it will be converted to uppercase)&lt;/h2&gt;
    &lt;form action="." method="POST"&gt;
        &lt;input type="text" name="text"&gt;
        &lt;input type="submit" name="my-form" value="Send"&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>12278642</id><snippet>from flask import Flask
from flask import request
from flask import render_template

app = Flask(__name__)

@app.route('/')
def my_form():
    return render_template("my-form.html")

@app.route('/', methods=['POST'])
def my_form_post():

    text = request.form['text']
    processed_text = text.upper()
    return processed_text

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>12278642</id><snippet>my_form_post</snippet></ROW><ROW><id>12278642</id><snippet>request.form</snippet></ROW><ROW><id>12278741</id><snippet>url(r'^[\w\-]+/', include('project.urls_tenant')),
</snippet></ROW><ROW><id>12278819</id><snippet>SELECT DISTINCT u.id, u.name, n.network_id, n.perm 
FROM users as u 
LEFT OUTER JOIN nets_permissions as n 
ON u.id = n.user_id 
AND n.perm&lt;&gt; 3 
WHERE u.id!=%s
</snippet></ROW><ROW><id>12278961</id><snippet>class YourForm(forms.Form):
    # Everything as before.
    ...

    def clean_name(self):
        data = self.cleaned_data['name']
        if data.strip() == '':
            raise forms.ValidationError(u"You must provide more than just whitespace.")

        # Always return the cleaned data, whether you have changed it or
        # not.
        return data
</snippet></ROW><ROW><id>12278961</id><snippet>class NoSpacesCharField(forms.CharField):
    def validate(self, value):
        # Use the parent's handling of required fields, etc.
        super(NoSpacesCharField, self).validate(value)

        if value.strip() == '':
            raise ValidationError(u"You must provide more than just whitespace.")
</snippet></ROW><ROW><id>12278961</id><snippet>NoSpacesCharField</snippet></ROW><ROW><id>12278984</id><snippet>while (true) { // forever loop
    try {
        scanner userInput = new Scanner(System.in); 
        System.out.print("Please type a value: "); // asks user for input
        double n = userInput.nextDouble(); // gets user input as a double
        break; // ends if no error
    }
    catch (Throwable t) { // on error
        System.out.println("NaN"); // not a number
    }
}
</snippet></ROW><ROW><id>12279400</id><snippet>missing_values</snippet></ROW><ROW><id>12279400</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12279400</id><snippet>usemask=True</snippet></ROW><ROW><id>12279400</id><snippet>usemask=True</snippet></ROW><ROW><id>12279400</id><snippet>ndarray</snippet></ROW><ROW><id>12279400</id><snippet>np.nan</snippet></ROW><ROW><id>12279400</id><snippet>.filled(np.nan)</snippet></ROW><ROW><id>12279400</id><snippet>int</snippet></ROW><ROW><id>12279400</id><snippet>np.nan</snippet></ROW><ROW><id>12279400</id><snippet>np.nan</snippet></ROW><ROW><id>12279431</id><snippet>__mapper_args__</snippet></ROW><ROW><id>12279431</id><snippet>from sqlalchemy.ext.hybrid import hybrid_property

Base = declarative_base() 
class tblUser(Base):
    __tablename__ = 'tblUser'
    User_Id = Column('User_Id', String(100), primary_key=True)
    FullName = Column('FullName', String(50))

    _Sequence_No = Column('Sequence_No', Integer)
    _local_Sequence_No = None

    @hybrid_property
    @property
    def SequenceNo(self):
        if self._local_Sequence_No is not None:
            return self._local_Sequence_No
        return self._SequenceNo

    @SequenceNo.setter
    def SequenceNo(self, value):
        self._local_Sequence_No = value
</snippet></ROW><ROW><id>12279431</id><snippet>Sequence_No</snippet></ROW><ROW><id>12279431</id><snippet>SequenceNo</snippet></ROW><ROW><id>12279459</id><snippet>for item in queryset:
    to_json.append(getattr(item, 'last_name'))
</snippet></ROW><ROW><id>12279459</id><snippet>'last_name'</snippet></ROW><ROW><id>12279603</id><snippet>time.time()</snippet></ROW><ROW><id>12279603</id><snippet>time.clock()</snippet></ROW><ROW><id>12279603</id><snippet>start = time.clock()
s.connect(('localhost',80))
print 'time taken ', time.clock()-start ,' seconds'
</snippet></ROW><ROW><id>12279603</id><snippet>import sys
timer = time.clock if sys.platform == 'win32' else time.time

start = timer()
# etc.
</snippet></ROW><ROW><id>12279603</id><snippet>timeit</snippet></ROW><ROW><id>12279603</id><snippet>import timeit

start = timeit.default_timer()
# etc.
</snippet></ROW><ROW><id>12279749</id><snippet>f1</snippet></ROW><ROW><id>12279749</id><snippet>fi</snippet></ROW><ROW><id>12279749</id><snippet>fi</snippet></ROW><ROW><id>12279749</id><snippet>fi += x</snippet></ROW><ROW><id>12279749</id><snippet>fi</snippet></ROW><ROW><id>12279749</id><snippet>fi = fi + x</snippet></ROW><ROW><id>12279984</id><snippet>func_code</snippet></ROW><ROW><id>12279984</id><snippet>func_code</snippet></ROW><ROW><id>12279984</id><snippet>co_firstlineno</snippet></ROW><ROW><id>12279984</id><snippet>def getListOfClassFunctions(foo):
    '''foo - a class object'''
    funcList = [ foo.__dict__.get(a) for a in dir(foo) if isinstance(foo.__dict__.get(a), types.FunctionType)]
    funcList = filter(lambda x: x.func_code.co_filename == foo.__module__, funcList)  # Thanks Martijn Pieters for a hint!
    return sorted(key=lambda x: x.func_code.co_firstlineno, funcList)
</snippet></ROW><ROW><id>12280192</id><snippet>os.chdir("../nodes")
</snippet></ROW><ROW><id>12280304</id><snippet>datafiles = [("Microsoft.VC90.CRT", glob(r'C:\Program Files\Microsoft Visual Studio 9.0\VC\redist\x86\Microsoft.VC90.CRT\*.*'))]
datafiles.extend(matplotlib.get_py2exe_datafiles()) 

setup(windows=['main.py'], data_files= datafiles, options={"py2exe": {"includes": ["matplotlib"]}})
</snippet></ROW><ROW><id>12280488</id><snippet>circum.c</snippet></ROW><ROW><id>12280488</id><snippet>/* allow for relativistic light bending near the sun */
deflect (mjed, lam, bet, lsn, rsn, 1e10, &amp;ra, &amp;dec);

/* TODO: correction for annual parallax would go here */

/* correct EOD equatoreal for nutation/aberation to form apparent 
 * geocentric
 */
nut_eq(mjed, &amp;ra, &amp;dec);
ab_eq(mjed, lsn, &amp;ra, &amp;dec);
</snippet></ROW><ROW><id>12280488</id><snippet>deflect()</snippet></ROW><ROW><id>12280488</id><snippet>nut_eq()</snippet></ROW><ROW><id>12280488</id><snippet>ab_eq()</snippet></ROW><ROW><id>12280488</id><snippet>.tar.gz</snippet></ROW><ROW><id>12280488</id><snippet>python setup.py install</snippet></ROW><ROW><id>12280488</id><snippet>star</snippet></ROW><ROW><id>12280488</id><snippet>'1998/8/10 23:10:00'</snippet></ROW><ROW><id>12281524</id><snippet>if all([form1.is_valid(), form2.is_valid()]):
   ...
</snippet></ROW><ROW><id>12281524</id><snippet>if all([ form.is_valid() for form in (form1,form2) ])  
</snippet></ROW><ROW><id>12281524</id><snippet>and</snippet></ROW><ROW><id>12281524</id><snippet>if foo and bar or baz: ...</snippet></ROW><ROW><id>12281524</id><snippet>or</snippet></ROW><ROW><id>12281524</id><snippet>any</snippet></ROW><ROW><id>12281524</id><snippet>all</snippet></ROW><ROW><id>12281597</id><snippet>with open('data.txt') as f1,open('data1.txt') as f2,open('sudentlist.txt') as f3:

    line=f1.readline().strip()             #read the first line of names file 
    names=map(str.strip,line.split(','))   #split the line by "," and then apply strip()

    line=f2.readline().strip()             #read the first line of ID file 
    ids=map(str.strip,line.split(','))     #split the line by "," and then apply strip()

    f3.write("{0:25}{1}\m".format("Student_Name","Student_Id"))

    for name,i in zip(names,ids):          #use zip() to fetch data from both lists
        f3.write("{0:25}|{1}\n".format(name,i)) #use write() instead of print to write it to a file
</snippet></ROW><ROW><id>12281597</id><snippet>Student_Name             Student_Id
Timmy Wong               |B5216
Johnny Willis            |B5217
Jason Prince             |B5218
</snippet></ROW><ROW><id>12281683</id><snippet>all</snippet></ROW><ROW><id>12281683</id><snippet>if all(d &lt; i for i in [1,5,4,4,6,6,4,4,5]) 
</snippet></ROW><ROW><id>12281683</id><snippet>i</snippet></ROW><ROW><id>12281683</id><snippet>if all(d &lt; i for i in (c, b, a))
</snippet></ROW><ROW><id>12281828</id><snippet>{{user.perm}}</snippet></ROW><ROW><id>12281828</id><snippet>$(document).ready(function(){
    //function check(){

    {% for user in users %}
      {% if user.perm == 1 %}

      $('input:radio[name=optionsRadios]:nth(1)').attr('checked',true);
      //$('input:radio[name=sex]')[1].checked = true;

      {% elif user.perm == 4 %}  

      $('input:radio[name=optionsRadios]:nth(2)').attr('checked',true);
      //$('input:radio[name=sex]')[2].checked = true;

      {% else %}

      $('input:radio[name=optionsRadios]:nth(0)').attr('checked',true);
      //$('input:radio[name=sex]')[0].checked = true;

      {% end %}
    {% end %}

  });
</snippet></ROW><ROW><id>12282011</id><snippet>self.sync_trait("xmin", index_mapper.range, "_low_value")
self.sync_trait("xmax", index_mapper.range, "_high_value")
self.sync_trait("ymin", value_mapper.range, "_low_value")
self.sync_trait("ymax", value_mapper.range, "_high_value")

self.sync_trait("rangeXMin", plot2.index_mapper.range, "low", False)
self.sync_trait("rangeXMax", plot2.index_mapper.range, "high", False)
</snippet></ROW><ROW><id>12282011</id><snippet>self.rangeselect.on_trait_change(self.on_selection_changed, "selection")

def on_selection_changed(self, selection):
    if selection != None:
        self.rangeXMin, self.rangeXMax = selection
</snippet></ROW><ROW><id>12282011</id><snippet>index_mapper.on_trait_change(self.on_mapper_updated, "updated")

def on_mapper_updated(self, mapper, name, value):
    if not self.rangeselect.selection:
        self.rangeXMin = mapper.range.low
        self.rangeXMax = mapper.range.high
</snippet></ROW><ROW><id>12282011</id><snippet># -*- coding: utf-8 -*-
#=================================================
# Code
#=================================================

# Enthought library imports
from traits.api import HasTraits, Int, Instance
from traits.api import *
from traitsui.api import Item, View, Group, HGroup, VGroup
from enable.api import Component
from enable.component_editor import ComponentEditor
from traitsui.menu import OKButton, CancelButton
# Chaco imports
from chaco.tools.api import RangeSelection, RangeSelectionOverlay
from chaco.chaco_plot_editor import ChacoPlotEditor, ChacoPlotItem
from chaco.api import Plot, ArrayPlotData, OverlayPlotContainer, create_line_plot, create_scatter_plot, add_default_axes, add_default_grids, PlotAxis, PlotLabel
from chaco.tools.api import PanTool, BroadcasterTool, ZoomTool
# Numpy imports
from numpy import linspace, pi, sin, tan

def main():
    # normally this function gets its values out of other files
    x1 = -2*pi
    x2 = pi
    y1 = 0
    y2 = 2
    uebergabe = {"xlim":[x1,x2], "ylim":[y1,y2], "ranges":[x1,x2]}
    return uebergabe


class Trait(HasTraits):
    plot = Instance(Component)    

    #creates the container
    container = OverlayPlotContainer(padding = 50, fill_padding = True,
                        bgcolor = "lightgray", use_backbuffer=True)
    container2 = OverlayPlotContainer(padding = 50, fill_padding = True,
                        bgcolor = "lightgray", use_backbuffer=True)

    # Traits
    xmin = Float
    xmax = Float
    ymin = Float
    ymax = Float
    rangeXMin = Float
    rangeXMax = Float

    # TraitsUI view
    traits_view = View(Group(
        HGroup(
            VGroup(Item("container", editor = ComponentEditor(), show_label = False)),
            VGroup(Item("container2", editor = ComponentEditor(), show_label = False))),        
        HGroup(Item("xmin"), Item("xmax"), Item("ymin"), Item("ymax"), show_border = True, label = "Plotborders"),
        HGroup(Item("rangeXMin", label="x_min"), Item("rangeXMax", label="x_max"), show_border = True, label="Range of right plot")), 
        buttons = [OKButton, CancelButton], resizable = True, width = 1000, height = 500)

    # Constructor
    def __init__(self):
        super(Trait, self).__init__()

        uebergabe = main()

        # initialize traits
        self.xmin = uebergabe["xlim"][0]
        self.xmax = uebergabe["xlim"][1]
        self.ymin = uebergabe["ylim"][0]
        self.ymax = uebergabe["ylim"][1]
        self.rangeXMin = uebergabe["ranges"][0]
        self.rangeXMin = uebergabe["ranges"][1]


        self._create_Container()


    def _create_Container(self):

        #creating dict of plots and the broadcaster
        plots = {}
        broadcaster = BroadcasterTool()

        #=====================first container===========================

        #first plot
        index = linspace(-2*pi,2*pi,1000)
        plot = create_line_plot((index, sin(index)+0.5), color = "blue", index_bounds=(self.xmin, self.xmax), value_bounds = (self.ymin, self.ymax))
        plot.bgcolor = "white"
        plot.border_visible = True
        value_mapper = plot.value_mapper
        index_mapper = plot.index_mapper
        add_default_grids(plot)
        add_default_axes(plot)

        self.sync_trait("xmin", index_mapper.range, "_low_value")
        self.sync_trait("xmax", index_mapper.range, "_high_value")
        self.sync_trait("ymin", value_mapper.range, "_low_value")
        self.sync_trait("ymax", value_mapper.range, "_high_value")

        # range selection
        self.rangeselect = RangeSelection(plot, left_button_selects = False, auto_handle_event = False)
        plot.active_tool = self.rangeselect
        plot.overlays.append(RangeSelectionOverlay(component=plot))
        self.rangeselect.on_trait_change(self.on_selection_changed, "selection")

        #adds plot to the container
        self.container.add(plot)

        # second plot
        index2 = linspace(-5*pi,4*pi,1000)
        plot = create_line_plot((index2, tan(index2)), color = "black", index_bounds=(self.xmin, self.xmax), value_bounds = (self.ymin, self.ymax))
        plot.value_mapper = value_mapper
        value_mapper.range.add(plot.value)
        plot.index_mapper = index_mapper
        index_mapper.range.add(plot.index)

        # Create a pan tool and give it a reference to the plot
        pan = PanTool(plot, drag_button="left")
        broadcaster.tools.append(pan)

        # allows to zoom
        zoom = ZoomTool(plot, tool_mode="box", always_on = False, visible = True)
        plot.overlays.append(zoom)


        #adds plot to the container
        self.container.add(plot)

        # appends broadcaster to the container
        self.container.tools.append(broadcaster)

        # title of the container
        self.container.overlays.append(PlotLabel("left plot", component=self.container, overlay_position = "top"))

        #==============end of first container===========================

        #====================second container===========================

        #first plot2
        index3 = linspace(-10*pi,10*pi,500)
        plot2 = create_scatter_plot((index3, sin(index3)), color = "blue", index_bounds=(self.rangeXMin, self.rangeXMax), value_bounds = (self.ymin, self.ymax))
        plot2.bgcolor = "white"
        plot2.border_visible = True
        plot2.value_mapper = value_mapper # the plot uses the same index and
        #plot2.index_mapper = index_mapper # value like the plots of container1
        self.sync_trait("rangeXMin", plot2.index_mapper.range, "low", False)
        self.sync_trait("rangeXMax", plot2.index_mapper.range, "high", False)


        plot2.index_mapper.range.low = 0
        plot2.index_mapper.range.high = 2        
        #value_mapper.range.add(plot2.value)
        #index_mapper.range.add(plot2.index)
        add_default_grids(plot2)
        add_default_axes(plot2)

        #adds plot to the container
        self.container2.add(plot2)

        # title of the container
        self.container2.overlays.append(PlotLabel("right plot", component=self.container, overlay_position = "top"))

        index_mapper.on_trait_change(self.on_mapper_updated, "updated")

        #=============end of second container===========================

    def on_mapper_updated(self, mapper, name, value):
        if not self.rangeselect.selection:
            self.rangeXMin = mapper.range.low
            self.rangeXMax = mapper.range.high

    def on_selection_changed(self, selection):
        if selection != None:
            self.rangeXMin, self.rangeXMax = selection

gui = Trait()
gui.configure_traits()
</snippet></ROW><ROW><id>12282040</id><snippet>strptime()</snippet></ROW><ROW><id>12282040</id><snippet>%z</snippet></ROW><ROW><id>12282040</id><snippet>time.strptime()</snippet></ROW><ROW><id>12282040</id><snippet>strptime</snippet></ROW><ROW><id>12282040</id><snippet>time_obj = datetime.datetime.strptime(time_str[:19], '%Y-%m-%dT%H:%M:%S')
</snippet></ROW><ROW><id>12282040</id><snippet>dateutil</snippet></ROW><ROW><id>12282040</id><snippet>from dateutil.parser import parse
time_obj = parse(time_str)
</snippet></ROW><ROW><id>12282040</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse("2012-07-24T23:14:29-07:00")
datetime.datetime(2012, 7, 24, 23, 14, 29, tzinfo=tzoffset(None, -25200))
</snippet></ROW><ROW><id>12282092</id><snippet>CheckBoxMultipleSelect</snippet></ROW><ROW><id>12282092</id><snippet>def MyForm(forms.Form):
    favorite_colors = forms.MultipleChoiceField(required=False,
        widget=CheckboxSelectMultiple, choices=FAVORITE_COLORS_CHOICES)
    ...
</snippet></ROW><ROW><id>12282211</id><snippet>Doc -&gt; has many DocImages
</snippet></ROW><ROW><id>12282211</id><snippet>class DocImage(models.Model):
    property = models.ForeignKey(Doc, related_name='images')
</snippet></ROW><ROW><id>12282211</id><snippet>Doc.docimage_set.all()
</snippet></ROW><ROW><id>12282211</id><snippet>related_name</snippet></ROW><ROW><id>12282211</id><snippet>Doc.images.all()
</snippet></ROW><ROW><id>12282211</id><snippet># in the view
return render_to_response('mytemplate.html', { 'mydoc' : doc, 'mydocimage' : img }
</snippet></ROW><ROW><id>12282211</id><snippet># and in your template to get the images attached to the document
{% for i in mydoc.images.all %}
    ...
{% endfor %}

# or to get the document the image belongs to
{{ mydocimage.property.date_added }}
</snippet></ROW><ROW><id>12282531</id><snippet>&gt;&gt;&gt; matrix = [[None]*3]*4
&gt;&gt;&gt; matrix
[[None, None, None], [None, None, None], [None, None, None], [None, None, None]]
&gt;&gt;&gt; matrix[1][1]=0
&gt;&gt;&gt; matrix
[[None, 0, None], [None, 0, None], [None, 0, None], [None, 0, None]]
</snippet></ROW><ROW><id>12282531</id><snippet>matrix = [[None]*ROWS for _ in range(COLUMNS)] 
</snippet></ROW><ROW><id>12282531</id><snippet>xrange</snippet></ROW><ROW><id>12282586</id><snippet>from lxml import etree

x = lxml.html.fromstring("...html text...").xpath("//div[@class='ArticleDetail']/p")
for elem in x:
    for child in elem.iterdescendants():
        print etree.tostring(child)
</snippet></ROW><ROW><id>12282679</id><snippet>map</snippet></ROW><ROW><id>12282679</id><snippet>map(min, a, b)
</snippet></ROW><ROW><id>12282679</id><snippet>map</snippet></ROW><ROW><id>12282679</id><snippet>min(1, 33)</snippet></ROW><ROW><id>12282679</id><snippet>min(2, 44)</snippet></ROW><ROW><id>12282679</id><snippet>[1, 2]</snippet></ROW><ROW><id>12282679</id><snippet>map(min, [a, b])
</snippet></ROW><ROW><id>12282679</id><snippet>map</snippet></ROW><ROW><id>12282679</id><snippet>min</snippet></ROW><ROW><id>12282679</id><snippet>min([1, 2])</snippet></ROW><ROW><id>12282679</id><snippet>1</snippet></ROW><ROW><id>12282679</id><snippet>min([33, 44])</snippet></ROW><ROW><id>12282679</id><snippet>33</snippet></ROW><ROW><id>12282679</id><snippet>[1, 33]</snippet></ROW><ROW><id>12283114</id><snippet>pop</snippet></ROW><ROW><id>12283114</id><snippet>def function():
    steps = []

    if True:
        steps.append(1)

        if True:
            steps.append(2)

            if False:
                steps.append(3)
                return 'a', steps

            if False:
                steps.append(4)
                return 'b', steps

            steps.pop() #removes 2 from steps

        if True:
            steps.append(5)

            if True:
                steps.append(6)

                if False:
                    steps.append(7)
                    return 'a', steps

            steps.pop() #remove the 6

            if True:
                steps.append(8)
                return 'b', steps

        steps.pop() #remove the 5
    steps.pop() # removes the 1
</snippet></ROW><ROW><id>12283450</id><snippet>2</snippet></ROW><ROW><id>12283450</id><snippet>try:
    shutil.move(old_path, new_path)
except IOError as e:
    if e.errno != errno.ENOENT: raise e
</snippet></ROW><ROW><id>12283663</id><snippet>class QuestionForm(Form):
    questions = ChoiceField()

    def __init__(self, *args, **kwargs):
        super(QuestionForm, self).__init__(*args, **kwargs)
        self.fields['questions'].choices = set_up_choices() # function that creates list

    clean_questions(self):
        # do your validation of the question selection
        # here you could check whether the option selected matches
        # a correct value, if not throw a form validation exception
        return self.cleaned['questions']
</snippet></ROW><ROW><id>12283677</id><snippet>filereader</snippet></ROW><ROW><id>12283677</id><snippet>main</snippet></ROW><ROW><id>12283677</id><snippet>def main():
    fname, infile, fcontents, fcontents2 = filereader()
    print "Words: ", wordcount (fcontents)
    print "Character: ", charcount (fcontents)
    print "Lines: ", linecount (fcontents2)
</snippet></ROW><ROW><id>12283677</id><snippet>fcontents</snippet></ROW><ROW><id>12283677</id><snippet>fcontents2</snippet></ROW><ROW><id>12283677</id><snippet>filereader</snippet></ROW><ROW><id>12283677</id><snippet>def filereader():
    fname = 'question2.txt'
    infile = open ( fname, 'r' )
    fcontents = infile.read()
    fcontents2 = fcontents.splitlines(True)
    return fname, infile, fcontents, fcontents2
</snippet></ROW><ROW><id>12283677</id><snippet>fcontents2</snippet></ROW><ROW><id>12283677</id><snippet>fcontents</snippet></ROW><ROW><id>12283677</id><snippet>str.splitlines</snippet></ROW><ROW><id>12283677</id><snippet>.readlines()</snippet></ROW><ROW><id>12283772</id><snippet>disqus</snippet></ROW><ROW><id>12283772</id><snippet>django-disqus</snippet></ROW><ROW><id>12283772</id><snippet>disqus</snippet></ROW><ROW><id>12283772</id><snippet>disqus==0.0.4</snippet></ROW><ROW><id>12283772</id><snippet>django-disqus</snippet></ROW><ROW><id>12283876</id><snippet>&gt;&gt;&gt; my_list = [1,2,3,4,5,6,7]
&gt;&gt;&gt; length=len(my_list)
&gt;&gt;&gt; index=2
&gt;&gt;&gt; length-(index+1)  #remaining elements are [4,5,6,7]
4
&gt;&gt;&gt; index=4
&gt;&gt;&gt; length-(index+1)  #remaining elements are [6,7]
2
</snippet></ROW><ROW><id>12283876</id><snippet>Timeit</snippet></ROW><ROW><id>12283876</id><snippet>import random
def func1():
    lis=list(xrange(100))
    for i in xrange(100):
        index=random.randrange(0,100)
        remainder = len(lis[index:])-1
def func2():
    lis=list(xrange(100))
    for i in xrange(100):
        index=random.randrange(0,100)
        remainder = (len(lis) - index) -1

if __name__ == '__main__':
    from timeit import Timer
    t = Timer("func2()", "from __main__ import func2")
    print t.timeit()    
    t = Timer("func1()", "from __main__ import func1")
    print t.timeit()
</snippet></ROW><ROW><id>12283876</id><snippet>47.001240015
52.2959749699
</snippet></ROW><ROW><id>12284167</id><snippet>numpy.histogram</snippet></ROW><ROW><id>12284167</id><snippet>pylab.plot</snippet></ROW><ROW><id>12284167</id><snippet>import numpy as np
import pylab as plt

data = np.random.normal(size=10000)*10000

plt.figure(0)
plt.hist(data, bins=np.arange(data.min(), data.max(), 1000))

plt.figure(1)
hist1 = np.histogram(data, bins=np.arange(data.min(), data.max(), 1000))
plt.bar(hist1[1][:-1], hist1[0], width=1000)

plt.figure(2)
hist2 = np.histogram(data, bins=np.arange(data.min(), data.max(), 200))
mask = (hist2[1][:-1] &lt; 20000) * (hist2[1][:-1] &gt; 0)
plt.bar(hist2[1][mask], hist2[0][mask], width=200)
</snippet></ROW><ROW><id>12284300</id><snippet>&gt;&gt;&gt; def foo():
...     x = 5
...     def bar():
...         return x
...     return bar
... 
&gt;&gt;&gt; bar = foo()
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(bar)
  4           0 LOAD_DEREF               0 (x) 
              3 RETURN_VALUE         
</snippet></ROW><ROW><id>12284300</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>12284990</id><snippet>min(((d[s],s) for s in d if s.startswith('a')))[1][1:]
</snippet></ROW><ROW><id>12284990</id><snippet>min</snippet></ROW><ROW><id>12284990</id><snippet>(value, key)</snippet></ROW><ROW><id>12284990</id><snippet>min</snippet></ROW><ROW><id>12284990</id><snippet>a</snippet></ROW><ROW><id>12284990</id><snippet>def smallest_value_of_key_startswith(a, d):
    min(((d[s],s) for s in d if s.startswith(a)))[1][len(a):]
</snippet></ROW><ROW><id>12285152</id><snippet>splitlists = [mylist[i:i+n] for i in range(0, len(mylist), n-1)]
splitlists[-1].append(splitlists[0][0])
</snippet></ROW><ROW><id>12285268</id><snippet>    def Do_ButtonPress(self):
        global UI_2
        UI_2=CreateUI_2()
        UI_2.show()
</snippet></ROW><ROW><id>12285268</id><snippet>def main():
    global UI_1
    UI_1 = CreateUI_1()
    UI_1.show()
</snippet></ROW><ROW><id>12285391</id><snippet>__version__ = '1.0'
from file1 import AClass
</snippet></ROW><ROW><id>12285456</id><snippet>name</snippet></ROW><ROW><id>12285456</id><snippet>def merge(lsta, lstb):
    for i in lstb:
        for j in lsta:
            if j['name'] == i['name']:
                j.update(i)
                break
        else:
            lsta.append(i)

for k,v in dictb.items():
    merge(dicta.setdefault(k, []), v)
</snippet></ROW><ROW><id>12285456</id><snippet>dicta</snippet></ROW><ROW><id>12285456</id><snippet>{'fruit': [{'color': 'red', 'name': 'apple'}, 
           {'color': 'orange', 'name': 'orange', 'size': 'medium'},
           {'color': 'red', 'name': 'strawberry', 'size': 'small'}]}
</snippet></ROW><ROW><id>12285597</id><snippet>#! /usr/bin/python
# coding: utf-8

import random, os


CHUNK_SIZE = 1000
PATH = "/var/log/cron"

def pick_next_random_line(file, offset):
    file.seek(offset)
    chunk = file.read(CHUNK_SIZE)
    lines = chunk.split(os.linesep)
    # Make some provision in case yiou had not read at least one full line here
    line_offset = offset + len(os.linesep) + chunk.find(os.linesep) 
    return line_offset, lines[1]

def get_n_random_lines(path, n=5):
    lenght = os.stat(path).st_size
    results = []
    result_offsets = set()
    with open(path) as input:
        for x in range(n):
            while True:
                offset, line = pick_next_random_line(input, random.randint(0, lenght - CHUNK_SIZE))
                if not offset in result_offsets:
                    result_offsets.add(offset)
                    results.append(line)
                    break
    return results

if __name__ == "__main__":
    print get_n_random_lines(PATH)
</snippet></ROW><ROW><id>12285654</id><snippet>urllib.parse</snippet></ROW><ROW><id>12285654</id><snippet>urlparse</snippet></ROW><ROW><id>12285654</id><snippet>&gt;&gt;&gt; from urllib.parse import urlparse
&gt;&gt;&gt; urlparse("http://twitter.com")
ParseResult(scheme='http', netloc='twitter.com', path='', params='', query='', fragment='')
&gt;&gt;&gt; r = urlparse("http://twitter.com")
&gt;&gt;&gt; r.scheme + '://' + r.netloc
'http://twitter.com'
</snippet></ROW><ROW><id>12285739</id><snippet>attrs = {'data-provide': "foo"}
form.field(**attrs)
</snippet></ROW><ROW><id>12285859</id><snippet>&gt;&gt;&gt; d ={('a','b'):100,('a','c'):200,('a','d'):500,('b','c'):1000,('b','e'):100}
&gt;&gt;&gt; def func(d, k0):
...     return min((k for k in d if k[0] == k0), key=d.get)[1]
... 
&gt;&gt;&gt; func(d, 'a')
'b'
&gt;&gt;&gt; func(d, 'b')
'e'
</snippet></ROW><ROW><id>12285859</id><snippet>.get</snippet></ROW><ROW><id>12286035</id><snippet>import werkzeug.exceptions as ex
from flask import Flask, abort

class PaymentRequired(ex.HTTPException):
    code = 402
    description = '&lt;p&gt;You will pay for this!&lt;/p&gt;'

abort.mappings[402] = PaymentRequired

app = Flask(__name__)

@app.route('/')
def mainpage():
    abort(402)

@app.errorhandler(402)
def payme(e):
    return 'Pay me!'

app.run()
</snippet></ROW><ROW><id>12286043</id><snippet>#!/usr/bin/env python
import numpy

y = numpy.genfromtxt('1400list.txt', delimiter='\t',dtype=[('A', 'S10'),
('B', 'i8')])
print y
</snippet></ROW><ROW><id>12286043</id><snippet>vicent@deckard:/tmp$ python prova.py 
[('string001', 124L) ('string002', 235L) ('string003', 552L)]
vicent@deckard:/tmp$
</snippet></ROW><ROW><id>12286203</id><snippet>src/contest2/contest2/settings.py</snippet></ROW><ROW><id>12286203</id><snippet>__import__</snippet></ROW><ROW><id>12286203</id><snippet>&gt;&gt;&gt; __import__('path/module.py')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: Import by filename is not supported.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12286203</id><snippet>src/$PYTHON_APP_NAME/$PYTHON_APP_NAME/</snippet></ROW><ROW><id>12286203</id><snippet>settings</snippet></ROW><ROW><id>12286203</id><snippet>gunicorn_django</snippet></ROW><ROW><id>12286319</id><snippet>class a: ## Using this class just to explain
    def __init__(self,y,m,d,t):
        self.y=y
        self.m=m
        self.d=d
        self.t=t


o1 = a(2000,12,18,9) ## Just assuming integers here. you can choose immutable objects here
o2 = a(2000,12,19,13)
o3 = a(2001,11,18,9)
o4 = a(2000,11,18,6)
o5 = a(2000,12,6,7)

l=[o1,o2,o3,o4,o5]


d={}

for o in l:
    if o.y not in d:
        d[o.y] = {}
    # print d
    if o.m not in d[o.y]:
        d[o.y][o.m]={}
    if o.d not in d[o.y][o.m]:
        d[o.y][o.m][o.d]={}
    if o.t not in d[o.y][o.m][o.d]:
        d[o.y][o.m][o.d][o.t]=o
</snippet></ROW><ROW><id>12286319</id><snippet>for k,v in d.items():
    for j,h in v.items():
        print k,j,h
</snippet></ROW><ROW><id>12286319</id><snippet>2000 11 {18: {6: &lt;__main__.a instance at 0x0232E9E0&gt;}}
2000 12 {18: {9: &lt;__main__.a instance at 0x0232E940&gt;}, 19: {13: &lt;__main__.a instance at 0x0232E990&gt;}, 6: {7: &lt;__main__.a instance at 0x0232EA08&gt;}}
2001 11 {18: {9: &lt;__main__.a instance at 0x0232E9B8&gt;}}
</snippet></ROW><ROW><id>12286390</id><snippet>d = {'str1': 'before', 'str2': 'before'}
for i in d:
    print d[i]
    d[i] = "after"
</snippet></ROW><ROW><id>12286675</id><snippet>import pydevd; pydevd.settrace()
</snippet></ROW><ROW><id>12286724</id><snippet>&gt;&gt;&gt; SERVICES = "FTP Download", "FTP Upload", "HTTP"
&gt;&gt;&gt; received = {k: {'MS1': []} for k in SERVICES}
&gt;&gt;&gt; received
{'FTP Download': {'MS1': []}, 'HTTP': {'MS1': []}, 'FTP Upload': {'MS1': []}}
&gt;&gt;&gt; received["HTTP"]["MS1"].append(17)
&gt;&gt;&gt; received
{'FTP Download': {'MS1': []}, 'HTTP': {'MS1': [17]}, 'FTP Upload': {'MS1': []}}
</snippet></ROW><ROW><id>12286724</id><snippet>fromkeys</snippet></ROW><ROW><id>12286724</id><snippet>v</snippet></ROW><ROW><id>12286724</id><snippet>received = dict.fromkeys(SERVICES , {'MS1':[]})</snippet></ROW><ROW><id>12286724</id><snippet>MS1</snippet></ROW><ROW><id>12286724</id><snippet>&gt;&gt;&gt; received = dict.fromkeys(SERVICES , {'MS1':[]})
&gt;&gt;&gt; received.values()
dict_values([{'MS1': []}, {'MS1': []}, {'MS1': []}])
&gt;&gt;&gt; [id(v) for v in received.values()]
[141458940, 141458940, 141458940]
</snippet></ROW><ROW><id>12286782</id><snippet>from oauth2app import token
...
(r'^oauth2/token/?$', token.handler),
</snippet></ROW><ROW><id>12286958</id><snippet>matplotlib.pcolor</snippet></ROW><ROW><id>12286958</id><snippet>import numpy as np 
from pandas import *
import matplotlib.pyplot as plt

Index= ['aaa', 'bbb', 'ccc', 'ddd', 'eee']
Cols = ['A', 'B', 'C', 'D']
df = DataFrame(abs(np.random.randn(5, 4)), index=Index, columns=Cols)

plt.pcolor(df)
plt.yticks(np.arange(0.5, len(df.index), 1), df.index)
plt.xticks(np.arange(0.5, len(df.columns), 1), df.columns)
plt.show()
</snippet></ROW><ROW><id>12286963</id><snippet>import re
found = re.findall('|'.join(searchList),cleanText)
</snippet></ROW><ROW><id>12286963</id><snippet>searchList</snippet></ROW><ROW><id>12286963</id><snippet>re</snippet></ROW><ROW><id>12286963</id><snippet>found = re.findall('|'.join(re.escape(x) for x in searchList), cleanText)
</snippet></ROW><ROW><id>12286963</id><snippet>re.compile</snippet></ROW><ROW><id>12286963</id><snippet>regex = re.compile('|'.join(re.escape(x) for x in searchList))
found = regex.findall(cleanText)
</snippet></ROW><ROW><id>12287025</id><snippet>getBarChoices()</snippet></ROW><ROW><id>12287025</id><snippet>IFoo</snippet></ROW><ROW><id>12287025</id><snippet>from bar import IBar</snippet></ROW><ROW><id>12287025</id><snippet>foo.py</snippet></ROW><ROW><id>12287025</id><snippet>IFoo.__identifier__</snippet></ROW><ROW><id>12287025</id><snippet>source = ObjPathSourceBinder(object_provides='ns.content.bar.IBar')
bar = Relation(source=source,required=False)
</snippet></ROW><ROW><id>12287025</id><snippet>IBar</snippet></ROW><ROW><id>12287025</id><snippet>foo.py</snippet></ROW><ROW><id>12287025</id><snippet>IBar</snippet></ROW><ROW><id>12287025</id><snippet>IBar</snippet></ROW><ROW><id>12287025</id><snippet>foo.py</snippet></ROW><ROW><id>12287025</id><snippet>IFoo</snippet></ROW><ROW><id>12287025</id><snippet>IBar</snippet></ROW><ROW><id>12287025</id><snippet>ns/content/interfaces.py</snippet></ROW><ROW><id>12287025</id><snippet>from zope.interface import Interface

class IBarMarker(Interface):
    """Marker interface for IBar objects.
    """

class IFooMarker(Interface):
    """Marker interface for IFoo objects.
    """
</snippet></ROW><ROW><id>12287025</id><snippet>from zope.interface import directlyProvides
from plone.directives import form
from plone.formwidget.contenttree import ObjPathSourceBinder
from plone.formwidget.autocomplete import AutocompleteFieldWidget
from z3c.relationfield.schema import RelationChoice

from ns.content.interfaces import IBarMarker
from ns.content.interfaces import IFooMarker


class IFoo(form.Schema):
    directlyProvides(IFooMarker)

    form.widget(bar=AutocompleteFieldWidget)
    bar = RelationChoice(source=ObjPathSourceBinder(
                            object_provides=IBarMarker.__identifier__),
                         required=False)
</snippet></ROW><ROW><id>12287025</id><snippet>class IBar(form.Schema):
    directlyProvides(IBarMarker)

    form.widget(foo=AutocompleteFieldWidget)
    foo = RelationChoice(source=ObjPathSourceBinder(
                            object_provides=IFooMarker.__identifier__),
                         required=False)
</snippet></ROW><ROW><id>12287078</id><snippet>QTreeWidgetItem</snippet></ROW><ROW><id>12287078</id><snippet>setData</snippet></ROW><ROW><id>12287078</id><snippet>role</snippet></ROW><ROW><id>12287078</id><snippet>class TreeWidgetItem(QtGui.QTreeWidgetItem):
    def __init__(self, *args, **kwargs):
        QtGui.QTreeWidgetItem.__init__(self, *args, **kwargs)
        self.setFlags(self.flags() | QtCore.Qt.ItemIsEditable)

    def setData(self, column, role, value):
        if role == QtCore.Qt.EditRole:
            # do important stuff here...
            print 'before: "%s", after: "%s"' % (
                self.text(column), value.toString())
        QtGui.QTreeWidgetItem.setData(self, column, role, value)
</snippet></ROW><ROW><id>12287117</id><snippet>from Tkinter import Tk, Canvas, PhotoImage, mainloop
from math import sin

WIDTH, HEIGHT = 640, 480

window = Tk()
canvas = Canvas(window, width=WIDTH, height=HEIGHT, bg="#000000")
canvas.pack()
img = PhotoImage(width=WIDTH, height=HEIGHT)
canvas.create_image((WIDTH/2, HEIGHT/2), image=img, state="normal")

for x in range(4 * WIDTH):
    y = int(HEIGHT/2 + HEIGHT/4 * sin(x/80.0))
    img.put("#ffffff", (x//4,y))

mainloop()
</snippet></ROW><ROW><id>12287283</id><snippet>input</snippet></ROW><ROW><id>12287283</id><snippet>raw_input</snippet></ROW><ROW><id>12287283</id><snippet>for i in range(10):
    print(i)
    input() # Loop continues after &lt;Enter&gt; is pressed
</snippet></ROW><ROW><id>12287283</id><snippet>pdb</snippet></ROW><ROW><id>12287499</id><snippet>def special_replace(s):
    p=re.compile(r"(http://.*?)(\.?source\.com)")
    spl=p.split(s)
    newtext=[]
    for text in spl:
        if text.startswith("http://"):
            text=text.replace(".","_")
        elif text.endswith("source.com"):
            text=text.replace("source.com", "target.com")
        newtext.append(text)
    return "".join(newtext)
</snippet></ROW><ROW><id>12287743</id><snippet>__init__.py</snippet></ROW><ROW><id>12287743</id><snippet>import mypackage</snippet></ROW><ROW><id>12287743</id><snippet>mypackage.foo</snippet></ROW><ROW><id>12287743</id><snippet>__init__.py</snippet></ROW><ROW><id>12287743</id><snippet>__init__.py</snippet></ROW><ROW><id>12287789</id><snippet>resizeRowToContents</snippet></ROW><ROW><id>12287789</id><snippet>resizeRowsToContents</snippet></ROW><ROW><id>12287789</id><snippet>sortIndicatorChanged</snippet></ROW><ROW><id>12287789</id><snippet># ... fill table, then:
self.ui.tableWidget.setSortingEnabled(True)
self.ui.tableWidget.resizeRowsToContents()
self.ui.tableWidget.horizontalHeader().sortIndicatorChanged.connect(
    self.ui.tableWidget.resizeRowsToContents)
</snippet></ROW><ROW><id>12287897</id><snippet>try:
    foo = re.search(r'&lt;a href="(.*)"&gt;', text).group(1)
except AttributeError:
    foo = None
</snippet></ROW><ROW><id>12287897</id><snippet>match = re.search(r'&lt;a href="(.*)"&gt;', text)
if match:
    foo = match.group(1)
else:
    foo = None
</snippet></ROW><ROW><id>12288193</id><snippet>from win32com.client import Dispatch
wbpath = 'C:\\example.xlsm'
xl = Dispatch("Excel.Application")
xl.Visible = 1
wb = xl.Workbooks.Open(wbpath)
vbcode = wb.VBProject.VBComponents(1).CodeModule
print vbcode.Lines(1, vbcode.CountOfLines)
</snippet></ROW><ROW><id>12288193</id><snippet>Sub silly_macro()
'
' silly_macro Macro
'

'
    Range("B2").Select
End Sub
</snippet></ROW><ROW><id>12288193</id><snippet>Lines</snippet></ROW><ROW><id>12288193</id><snippet>VBComponents</snippet></ROW><ROW><id>12288193</id><snippet>VBComponents</snippet></ROW><ROW><id>12288319</id><snippet>pygame.quit()</snippet></ROW><ROW><id>12288419</id><snippet>@app.route("/&lt;full_name&gt;")
def profile(full_name):
    # Lookup user by full name


@app.route("/&lt;full_name&gt;/&lt;action&gt;", defaults={"action": "contact"})
def act_on_user(full_name, action):
    # Lookup user and act on them
</snippet></ROW><ROW><id>12288490</id><snippet>&gt;&gt;&gt; line[6:30]
'Sat, 17 Apr 2004 22:29:3'
&gt;&gt;&gt; line[6:31]
'Sat, 17 Apr 2004 22:29:37'
&gt;&gt;&gt; time.strptime(line[6:31], "%a, %d %b %Y %H:%M:%S")
time.struct_time(tm_year=2004, tm_mon=4, tm_mday=17, tm_hour=22, tm_min=29, tm_sec=37, tm_wday=5, tm_yday=108, tm_isdst=-1)
</snippet></ROW><ROW><id>12288504</id><snippet>manager</snippet></ROW><ROW><id>12288504</id><snippet>reply</snippet></ROW><ROW><id>12288512</id><snippet>import py_compile
py_compile.compile('/path/to/source/code.py', cfile='/path/to/build/code.pyc')
</snippet></ROW><ROW><id>12288512</id><snippet>python -c "import py_compile; py_compile.compile('/path/to/source/code.py', cfile='/path/to/build/code.pyc')"
</snippet></ROW><ROW><id>12288547</id><snippet>curl --dump-header - \ 
    -H "Content-Type: application/json" -X POST \
    --data '{"title": "Hello JSON", "date": "1970-01-01"}' \
    http://x.x.x.x/api/entry/
</snippet></ROW><ROW><id>12288547</id><snippet>curl --dump-header - \
    -H "Content-Type: application/xml" -X POST \
    --data '&lt;object&gt;&lt;title&gt;Hello XML&lt;/title&gt;&lt;date&gt;200-01-01&lt;/date&gt;&lt;/object&gt;' \
    http://x.x.x.x/api/entry/
</snippet></ROW><ROW><id>12288605</id><snippet>import mpl_toolkits.mplot3d.axes3d as axes3d
import matplotlib.pyplot as plt
import numpy as np

cos = np.cos
sin = np.sin
sqrt = np.sqrt
pi = np.pi

def surf(u, v):
    """
    http://paulbourke.net/geometry/klein/
    """
    half = (0 &lt;= u) &amp; (u &lt; pi)
    r = 4*(1 - cos(u)/2)
    x = 6*cos(u)*(1 + sin(u)) + r*cos(v + pi)
    x[half] = (
        (6*cos(u)*(1 + sin(u)) + r*cos(u)*cos(v))[half])
    y = 16 * sin(u)
    y[half] = (16*sin(u) + r*sin(u)*cos(v))[half]
    z = r * sin(v)
    return x, y, z

u, v = np.linspace(0, 2*pi, 40), np.linspace(0, 2*pi, 40)
ux, vx =  np.meshgrid(u,v)
x, y, z = surf(ux, vx)

fig = plt.figure()
ax = fig.gca(projection = '3d')
plot = ax.plot_surface(x, y, z, rstride = 1, cstride = 1, cmap = plt.get_cmap('jet'),
                       linewidth = 0, antialiased = False)

plt.show()
</snippet></ROW><ROW><id>12288763</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'j:\\RpmV'
&gt;&gt;&gt; os.path.exists('j:\\Rpmv\\make.py')
True
&gt;&gt;&gt; os.path.exists('j:/rpmv/make.py')
True
&gt;&gt;&gt; os.path.isfile('j:\\Rpmv/make.py')
True
</snippet></ROW><ROW><id>12288846</id><snippet>f.write(subprocess.check_output([
    "wkhtmltopdf", 
    '--title', "Transaction 773 (printed version)",
    "--margin-left", "5",
    "--margin-right", "2",
    "--encoding", "utf8",
    "www.google.com", "-"]))
</snippet></ROW><ROW><id>12288846</id><snippet>argv</snippet></ROW><ROW><id>12288846</id><snippet>argv</snippet></ROW><ROW><id>12288846</id><snippet>--title</snippet></ROW><ROW><id>12288846</id><snippet>-ml5</snippet></ROW><ROW><id>12289072</id><snippet>func</snippet></ROW><ROW><id>12289072</id><snippet>exec</snippet></ROW><ROW><id>12289072</id><snippet>foo = func
</snippet></ROW><ROW><id>12289072</id><snippet>foo</snippet></ROW><ROW><id>12289072</id><snippet>foo()
</snippet></ROW><ROW><id>12289095</id><snippet>is_due</snippet></ROW><ROW><id>12289095</id><snippet>periodic_task</snippet></ROW><ROW><id>12289095</id><snippet>eta</snippet></ROW><ROW><id>12289648</id><snippet>import jinja_filters

app = Flask(__name__)
app.jinja_env.filters['filter_name1'] = jinja_filters.filter_name1
app.jinja_env.filters['filter_name2'] = jinja_filters.filter_name2
</snippet></ROW><ROW><id>12289648</id><snippet>inspect</snippet></ROW><ROW><id>12289648</id><snippet>jinja_filters</snippet></ROW><ROW><id>12289648</id><snippet>from inspect import getmembers, isfunction
import jinja_filters

app = Flask(__name__)

my_filters = {name: function 
                for name, function in getmembers(jinja_filters)
                if isfunction(function)}

app.jinja_env.filters.update(my_filters)
</snippet></ROW><ROW><id>12289648</id><snippet>jinja_filters</snippet></ROW><ROW><id>12289824</id><snippet>datetime</snippet></ROW><ROW><id>12289824</id><snippet>default</snippet></ROW><ROW><id>12289824</id><snippet>datetime</snippet></ROW><ROW><id>12289824</id><snippet>from dateutil.tz import tzutc

UTC = tzutc()

def serialize_date(dt):
    """
    Serialize a date/time value into an ISO8601 text representation
    adjusted (if needed) to UTC timezone.

    For instance:
    &gt;&gt;&gt; serialize_date(datetime(2012, 4, 10, 22, 38, 20, 604391))
    '2012-04-10T22:38:20.604391Z'
    """
    if dt.tzinfo:
        dt = dt.astimezone(UTC).replace(tzinfo=None)
    return dt.isoformat() + 'Z'
</snippet></ROW><ROW><id>12290064</id><snippet>def getLineGenerator(queue, splitOn):
    return_buffer = []
    while True:
        rcv_data = queue.get(block=True) # We can pull any number of characters here.
        for c in rcv_data:
            return_buffer.append(c)
            if c == splitOn:
                yield return_buffer
                return_buffer = []


gen = getLineGenerator(myQueue, "\n")
for line in gen:
    print line.strip()
</snippet></ROW><ROW><id>12290064</id><snippet>def getlines(chunks, splitOn="\n"):
    r_buffer = StringIO()
    for chunk in chunks
        r_buffer.write(chunk)
        pos = r_buffer.getvalue().find(splitOn) # can't use rfind see the next comment
        while pos != -1: # A single chunk may have more than one separator
            line = r_buffer.getvalue()[:pos + len(splitOn)]
            yield line
            rest = r_buffer.getvalue().split(splitOn, 1)[1]
            r_buffer.seek(0)
            r_buffer.truncate()
            r_buffer.write(rest)
            pos = rest.find(splitOn) # rest and r_buffer are equivalent at this point. Use rest to avoid an extra call to getvalue

    line = r_buffer.getvalue();
    r_buffer.close() # just for completeness
    yield line # whatever is left over.

for line in getlines(iter(queue.get, None)): # break on queue.put(None)
    process(line)
</snippet></ROW><ROW><id>12290287</id><snippet>my_string.encode('raw_unicode_escape')</snippet></ROW><ROW><id>12290287</id><snippet>f = codecs.open('bla.txt', encoding='raw_unicode_escape', mode='w')</snippet></ROW><ROW><id>12290287</id><snippet>\u0928\u0935\u0940\u0928\u0924\u092e</snippet></ROW><ROW><id>12290570</id><snippet>&gt;&gt;&gt; Incoming = "\x00\x31\x00\x62\x00\x6a\x00\x61\x00\x61\x00\x61\x00\x71\x00\x71"
&gt;&gt;&gt; Incoming+= "\x00\x71\x00\x61\x00\x71\x00\x6a\x00\x71\x00\x00\x00\x55\x00\x4e"
&gt;&gt;&gt; Incoming+= "\x00\x45\x00\x00\x00\x61\x61\x61\x00\x00\x00"
&gt;&gt;&gt;
&gt;&gt;&gt; var1, var2, var3 = [e.replace('\x00','') for e in Incoming.split('\x00\x00\x00')[:3]]
&gt;&gt;&gt; print var1, var2, var3
1bjaaaqqqaqjq UNE aaa
</snippet></ROW><ROW><id>12291225</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.time()
datetime.time(0, 0)
</snippet></ROW><ROW><id>12291225</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.time
&lt;method 'time' of 'datetime.datetime' objects&gt;
</snippet></ROW><ROW><id>12291225</id><snippet>&gt;&gt;&gt; datetime.time()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor 'time' of 'datetime.datetime' object needs an argument
&gt;&gt;&gt; datetime.time(0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor 'time' requires a 'datetime.datetime' object but received a 'int'
</snippet></ROW><ROW><id>12291225</id><snippet>import datetime
import time
</snippet></ROW><ROW><id>12291380</id><snippet>import matplotlib.pyplot as plt

segments = {1: [(0, 500),
                (915, 1000)],
            2: [(0, 250),
                (500, 1000)]}

colors = {1: 'b', 2: 'r'}

for y in segments:
    col = colors.get(y, 'k')
    for seg in segments[y]:
        plt.plot(seg, [y, y], color=col)
</snippet></ROW><ROW><id>12291468</id><snippet>failureException</snippet></ROW><ROW><id>12291468</id><snippet>@property
def failureException(self):
    class MyFailureException(AssertionError):
        def __init__(self_, *args, **kwargs):
            self.b.save_screenshot('%s.png' % self.id())
            return super(MyFailureException, self_).__init__(*args, **kwargs)
    MyFailureException.__name__ = AssertionError.__name__
    return MyFailureException
</snippet></ROW><ROW><id>12291503</id><snippet>table = [[None] * int(pow(2, count)) for _ in range(count) ]
</snippet></ROW><ROW><id>12291643</id><snippet>tokens = [token.lower() for token in tokens]
</snippet></ROW><ROW><id>12291894</id><snippet>print</snippet></ROW><ROW><id>12291894</id><snippet>for line in input_file:
    print("Got line: %s" % (line))
    line = line.split("extended ", 1)[1]
</snippet></ROW><ROW><id>12291957</id><snippet>&gt;&gt;&gt; d = 1.0 / 7
&gt;&gt;&gt; type(d)
&lt;type 'float'&gt;
&gt;&gt;&gt; d.as_integer_ratio()
(2573485501354569, 18014398509481984)
</snippet></ROW><ROW><id>12291957</id><snippet>&gt;&gt;&gt; from decimal import Decimal, getcontext
&gt;&gt;&gt; getcontext().prec = 100
&gt;&gt;&gt; Decimal(2573485501354569) / Decimal(18014398509481984)
Decimal('0.142857142857142849212692681248881854116916656494140625')
</snippet></ROW><ROW><id>12292145</id><snippet>        self.hand = Hand()
</snippet></ROW><ROW><id>12292145</id><snippet>Bj_player</snippet></ROW><ROW><id>12292145</id><snippet>self.hand</snippet></ROW><ROW><id>12292145</id><snippet>Hand</snippet></ROW><ROW><id>12292145</id><snippet>roster</snippet></ROW><ROW><id>12292145</id><snippet>BJ_player</snippet></ROW><ROW><id>12292145</id><snippet>deck.deal(roster)</snippet></ROW><ROW><id>12292145</id><snippet>for hand in players</snippet></ROW><ROW><id>12292145</id><snippet>hand</snippet></ROW><ROW><id>12292145</id><snippet>Bj_player</snippet></ROW><ROW><id>12292145</id><snippet>Bj_player</snippet></ROW><ROW><id>12292145</id><snippet>hand</snippet></ROW><ROW><id>12292145</id><snippet>Player</snippet></ROW><ROW><id>12292145</id><snippet>Player</snippet></ROW><ROW><id>12292145</id><snippet>Bj_player</snippet></ROW><ROW><id>12292145</id><snippet>Player</snippet></ROW><ROW><id>12292145</id><snippet>    for hand in players:
        if self.hand:
            top_card = self.hand[0]
            self.give(top_card,hand)
</snippet></ROW><ROW><id>12292145</id><snippet>    for player in players:
        if self.hand:
            top_card = self.hand[0]
            self.give(top_card,player.hand)
</snippet></ROW><ROW><id>12292145</id><snippet>self.hand</snippet></ROW><ROW><id>12292145</id><snippet>self.cards</snippet></ROW><ROW><id>12292183</id><snippet>utf8</snippet></ROW><ROW><id>12292183</id><snippet>utf8mb4</snippet></ROW><ROW><id>12292354</id><snippet>release</snippet></ROW><ROW><id>12292354</id><snippet>None</snippet></ROW><ROW><id>12292354</id><snippet>if app.delegate().mainWindow:
    app.delegate().mainWindow.close()
    app.delegate().mainWindow = None
app.delegate().mainWindow = w
</snippet></ROW><ROW><id>12292354</id><snippet>close()</snippet></ROW><ROW><id>12292354</id><snippet>w.setReleasedWhenClosed_(False)
</snippet></ROW><ROW><id>12292354</id><snippet>NSWindow</snippet></ROW><ROW><id>12292354</id><snippet>setupWindow()</snippet></ROW><ROW><id>12292354</id><snippet>mainWindow</snippet></ROW><ROW><id>12292354</id><snippet>w.retain()
</snippet></ROW><ROW><id>12292381</id><snippet>QuerySet.iterator()</snippet></ROW><ROW><id>12292437</id><snippet> groups = {}
 for d in pile_o_dicts:
     k = tuple(sorted(d.items()))
     groups.setdefault(k, []).append(d)
</snippet></ROW><ROW><id>12292437</id><snippet>sorted(d.items())</snippet></ROW><ROW><id>12292515</id><snippet>&gt;&gt;&gt; LoL=[1,2,3,4]
&gt;&gt;&gt; len(LoL) == n and {len(l) for l in LoL} == {n}
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
File "&lt;stdin&gt;", line 1, in &lt;setcomp&gt;
TypeError: object of type 'int' has no len()
</snippet></ROW><ROW><id>12292515</id><snippet>&gt;&gt;&gt; try: 
... Â Â Â i=LoL[2][2]
... except IndexError:
... Â Â Â print 'no bueno...'
... 
no bueno...
</snippet></ROW><ROW><id>12292703</id><snippet>os.system()</snippet></ROW><ROW><id>12292703</id><snippet>os.system('pdv -t %s &gt; 123.txt' % epoch_name)
</snippet></ROW><ROW><id>12292703</id><snippet>subprocess</snippet></ROW><ROW><id>12292995</id><snippet>zip()</snippet></ROW><ROW><id>12292995</id><snippet>with open('data.txt','w') as f:
    lis=[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]
    for x in zip(*lis):
        f.write("{0}\t{1}\t{2}\n".format(*x))
</snippet></ROW><ROW><id>12292995</id><snippet>1   6   11

2   7   12

3   8   13

4   9   14

5   10  15
</snippet></ROW><ROW><id>12293187</id><snippet>from lxml import etree
doc = etree.parse(filename)

memoryElem = doc.find('memory')
print memoryElem.text        # element text
print memoryElem.get('unit') # attribute
</snippet></ROW><ROW><id>12293187</id><snippet>import xml.dom.minidom as minidom
doc = minidom.parse(filename)

memoryElem = doc.getElementsByTagName('memory')[0]
print ''.join( [node.data for node in memoryElem.childNodes] )
print memoryElem.getAttribute('unit')
</snippet></ROW><ROW><id>12293239</id><snippet>list = []
line = np.genfromtxt('temp.txt', usecols=3, dtype=[('floatname','float')], skip_header=1)
list.append(line)
</snippet></ROW><ROW><id>12294074</id><snippet>functools.wraps</snippet></ROW><ROW><id>12294074</id><snippet>functools</snippet></ROW><ROW><id>12294074</id><snippet>functools.wraps</snippet></ROW><ROW><id>12294213</id><snippet>@route('/array')
def returnarray():
    from bottle import response
    from json import dumps
    rv = [{ "id": 1, "name": "Test Item 1" }, { "id": 2, "name": "Test Item 2" }]
    response.content_type = 'application/json'
    return dumps(rv)
</snippet></ROW><ROW><id>12294271</id><snippet>'app_date': time.strftime('%Y-%m-%d')</snippet></ROW><ROW><id>12294271</id><snippet>time.strftime</snippet></ROW><ROW><id>12294271</id><snippet>&gt;&gt;&gt; d = {'a': time.time(), 'b': lambda: time.time()}
&gt;&gt;&gt; d['a'], d['b']()
(1346913545.049, 1346913552.409)
&gt;&gt;&gt; d['a'], d['b']()
(1346913545.049, 1346913554.518)
&gt;&gt;&gt; d['a'], d['b']()
(1346913545.049, 1346913566.08)
</snippet></ROW><ROW><id>12294271</id><snippet>d['a'], d['b']()</snippet></ROW><ROW><id>12294271</id><snippet>d['a']</snippet></ROW><ROW><id>12294271</id><snippet>d</snippet></ROW><ROW><id>12294271</id><snippet>d['b']</snippet></ROW><ROW><id>12294271</id><snippet>d['b']()</snippet></ROW><ROW><id>12294271</id><snippet>lambda</snippet></ROW><ROW><id>12294271</id><snippet>def func():
    return time.time()
d = {'a': time.time(), 'b': func}
</snippet></ROW><ROW><id>12294622</id><snippet>stokes_list = np.array([])
for i in range(numrows):
    epoch_name = y['filename'][i]
    os.system('pdv -t {0} &gt; temp.txt '.format(epoch_name))
    stokes_line = np.genfromtxt('temp.txt', usecols=3, dtype=[('stokesI','float')], skip_header=1)
    stokes_list = vstack(stokes_list, stokes_line)

stokes_columns = np.transpose(stokes_list)
</snippet></ROW><ROW><id>12294769</id><snippet>ElasticNet</snippet></ROW><ROW><id>12294769</id><snippet>alpha</snippet></ROW><ROW><id>12294769</id><snippet>GridSearchCV</snippet></ROW><ROW><id>12294769</id><snippet>rho</snippet></ROW><ROW><id>12294986</id><snippet>ncurses</snippet></ROW><ROW><id>12295022</id><snippet>plot_surface</snippet></ROW><ROW><id>12295022</id><snippet>plot = ax.plot_surface(x,y,z, rstride=1, cstride=1, cmap=cm.jet, shade=True,
                   linewidth=0, antialiased=False)
</snippet></ROW><ROW><id>12295022</id><snippet>linewidth=0</snippet></ROW><ROW><id>12295468</id><snippet>import os
os._exit()
</snippet></ROW><ROW><id>12295814</id><snippet>for i in my_dict.items():
    term = i[0]
    for url in i[1]:
        sql = """INSERT INTO index_table (term, urls) VALUES (%s, %s)"""
        cursor.execute(sql, (term, url))
</snippet></ROW><ROW><id>12295814</id><snippet>import json
for i in my_dict.items():
    term = i[0]
    urls = json.dumps(i[1])
    sql = """INSERT INTO index_table (term, urls) VALUES (%s, %s)"""
    cursor.execute(sql, (term, urls))
</snippet></ROW><ROW><id>12295814</id><snippet>for i in my_dict.items():
    term = i[0]
    urls = ', '.join(i[1])
    sql = """INSERT INTO index_table (term, urls) VALUES (%s, %s)"""
    cursor.execute(sql, (term, urls))
</snippet></ROW><ROW><id>12295864</id><snippet>lstat</snippet></ROW><ROW><id>12295864</id><snippet>ftp.listdir()</snippet></ROW><ROW><id>12295864</id><snippet>&gt;&gt;&gt; for i in ftp.listdir():
...     lstatout=str(ftp.lstat(i)).split()[0]
...     if 'd' in lstatout: print i, 'is a directory'
... 
</snippet></ROW><ROW><id>12295864</id><snippet>&gt;&gt;&gt; for i in ftp.listdir():
...     lstatout=str(ftp.lstat(i)).split()[0]
...     if 'd' not in lstatout: print i, 'is a file'
... 
</snippet></ROW><ROW><id>12296133</id><snippet>PAC = numpy.exp(-dose*np.array(a))
</snippet></ROW><ROW><id>12296133</id><snippet>a</snippet></ROW><ROW><id>12296133</id><snippet>math.exp</snippet></ROW><ROW><id>12296133</id><snippet>math</snippet></ROW><ROW><id>12296133</id><snippet>PAC = [[[math.exp(-dose*j) for j in elem] for elem in row] for row in a]
</snippet></ROW><ROW><id>12296172</id><snippet>Article</snippet></ROW><ROW><id>12296172</id><snippet>Article</snippet></ROW><ROW><id>12296172</id><snippet>5048230b2485d614ecec341d</snippet></ROW><ROW><id>12296172</id><snippet>Article</snippet></ROW><ROW><id>12296172</id><snippet>class Root(object):
    __name__ = None
    __parent__ = None

    def __init__(self, request):
        self.request = request

    def __getitem__(self, key):
        if key == 'articles':
            dispatch =  ArticleDispatcher(self.request)
            dispatch.__name__ = key
            dispatch.__parent__ = self
            return dispatch
        raise KeyError(key)

class ArticleDispatcher(object):
    __name__ = None
    __parent__ = None

    def __init__(self, request):
        self.request = request

    def __getitem__(self, key):
        # Get a hold of the database here:
        db = findDatabase(self.request)
        if db.exists(key):          
            data = db.load(key)
            art = Article(data)
            art.__name__ = key
            art.__parent__ = self
            return art
        raise KeyError(key)

class Article:
    __name__ = None
    __parent__ = None

    def __init__(self, data):
        self.data = data
</snippet></ROW><ROW><id>12296172</id><snippet>ArticleDispatcher</snippet></ROW><ROW><id>12296172</id><snippet>/articles</snippet></ROW><ROW><id>12296172</id><snippet>__name__</snippet></ROW><ROW><id>12296172</id><snippet>__parent__</snippet></ROW><ROW><id>12296172</id><snippet>Article</snippet></ROW><ROW><id>12297348</id><snippet>object</snippet></ROW><ROW><id>12297348</id><snippet>class BasicActivity(object):
    pass
</snippet></ROW><ROW><id>12297348</id><snippet>object</snippet></ROW><ROW><id>12297443</id><snippet>from functools import wraps

def requires_foo(func):
    @wraps(func)
    def wrapped(self, *args, **kwargs):
        if not hasattr(self, 'foo') or not self.foo is True:
            raise Exception('You must have foo and be True!!')
        return func(self, *args, **kwargs)
    return wrapped

def requires_bar(func):
    @wraps(func)
    def wrapped(self, *args, **kwargs):
        if not hasattr(self, 'bar') or not self.bar is True:
            raise Exception('You must have bar and be True!!')
        return func(self, *args, **kwargs)
    return wrapped

class FooBar(object):

    @requires_foo                 # Make sure the requirement is met.
    def do_something_to_foo(self):
        pass
</snippet></ROW><ROW><id>12297443</id><snippet>class FooBar(object):
    @requires_bar
    @requires_foo                 # You can chain as many decorators as you want
    def do_something_to_foo_and_bar(self):
        pass
</snippet></ROW><ROW><id>12297443</id><snippet>def enforce(requirements):
    def wrapper(func):
        @wraps(func)
        def wrapped(self, *args, **kwargs):
            return func(self, *args, **kwargs)
        while requirements:
            func = requirements.pop()(func)
        return wrapped
    return wrapper

class FooBar(object):
    @enforce([reguires_foo, requires_bar])
    def do_something_to_foo_and_bar(self):
        pass
</snippet></ROW><ROW><id>12297480</id><snippet>html = '''
&lt;form&gt;
&lt;td&gt;
    &lt;select name="text1" class="long" &gt;
     &lt;option value=""&gt;-- unknown --&lt;/option&gt;
     &lt;option value="1"&gt;test1&lt;/option&gt;
     &lt;option value="2"&gt;test2&lt;/option&gt;
     &lt;option value="3"&gt;test3&lt;/option&gt;
     &lt;option value="4"&gt;test4&lt;/option&gt;
    &lt;/select&gt;
&lt;/td&gt;
&lt;/form&gt;
'''
forms = mechanize.ParseString(html, 'fake')
form = forms[1] # 0th is kind of default one here

control = form.controls[0] # the select
print [item.attrs['value'] for item in control.items]

Out: ['', '1', '2', '3', '4']
</snippet></ROW><ROW><id>12297852</id><snippet>http://127.0.0.1:8080/_ah/admin
</snippet></ROW><ROW><id>12297852</id><snippet>http://127.0.0.1:8080/_ah/admin/cron
</snippet></ROW><ROW><id>12297969</id><snippet>$n / 10</snippet></ROW><ROW><id>12297969</id><snippet>$n &gt; 0</snippet></ROW><ROW><id>12297969</id><snippet>true</snippet></ROW><ROW><id>12297969</id><snippet>while($n &gt; 0)</snippet></ROW><ROW><id>12297969</id><snippet>while($n &gt; 1)</snippet></ROW><ROW><id>12297969</id><snippet>while((int)$n &gt; 0)</snippet></ROW><ROW><id>12298306</id><snippet>primary_key=True</snippet></ROW><ROW><id>12298306</id><snippet>id</snippet></ROW><ROW><id>12298306</id><snippet>class Showing(Base):
    __tablename__   = "showings"

    time            = Column(DateTime, primary_key=True)
    link            = Column(String)
    film_id         = Column(Integer, ForeignKey('films.id'), primary_key=True)
    cinema_id       = Column(Integer, ForeignKey('cinemas.id'), primary_key=True)
</snippet></ROW><ROW><id>12298306</id><snippet>Showing</snippet></ROW><ROW><id>12298306</id><snippet>Showing</snippet></ROW><ROW><id>12298306</id><snippet>def AddShowings(self, showing_times, cinema, film):
    for showing_time in showing_times:
        self.session.merge(
            Showing(time=showing_time[0], link=showing_time[1],
                    film=film, cinema=cinema)
        )
</snippet></ROW><ROW><id>12298343</id><snippet>__main__.pyc</snippet></ROW><ROW><id>12298343</id><snippet>python myapplication.zip
</snippet></ROW><ROW><id>12298344</id><snippet>class Mammal(object):
    def walk(self):
        pass
</snippet></ROW><ROW><id>12298344</id><snippet>super()</snippet></ROW><ROW><id>12298344</id><snippet>class Cat(Mammal):
    def walk(self):
        super(Cat, self).walk()  # or just super().walk(), in Python 3+
        do_something_here()
</snippet></ROW><ROW><id>12298344</id><snippet>super()</snippet></ROW><ROW><id>12298344</id><snippet>hasattr()</snippet></ROW><ROW><id>12298344</id><snippet>super</snippet></ROW><ROW><id>12298344</id><snippet>class Cat(Mammal):
    def walk(self):
        if hasattr(super(Cat, self), 'walk'):
            super(Cat, self).walk()
        do_something_here()
</snippet></ROW><ROW><id>12298371</id><snippet>numbers = sorted(numbers)
</snippet></ROW><ROW><id>12298371</id><snippet>numbers = sorted(numbers, reverse=True)
</snippet></ROW><ROW><id>12298622</id><snippet>AutocompleteCombobox</snippet></ROW><ROW><id>12298622</id><snippet>"""
tkentrycomplete.py

A Tkinter widget that features autocompletion.

Created by Mitja Martini on 2008-11-29.
Updated by Russell Adams, 2011/01/24 to support Python 3 and Combobox.
Updated by Dominic Kexel to use Tkinter and ttk instead of tkinter and tkinter.ttk
   Licensed same as original (not specified?), or public domain, whichever is less restrictive.
"""
import sys
import os
import Tkinter
import ttk

__version__ = "1.1"

# I may have broken the unicode...
Tkinter_umlauts=['odiaeresis', 'adiaeresis', 'udiaeresis', 'Odiaeresis', 'Adiaeresis', 'Udiaeresis', 'ssharp']

class AutocompleteEntry(Tkinter.Entry):
        """
        Subclass of Tkinter.Entry that features autocompletion.

        To enable autocompletion use set_completion_list(list) to define
        a list of possible strings to hit.
        To cycle through hits use down and up arrow keys.
        """
        def set_completion_list(self, completion_list):
                self._completion_list = sorted(completion_list, key=str.lower) # Work with a sorted list
                self._hits = []
                self._hit_index = 0
                self.position = 0
                self.bind('&lt;KeyRelease&gt;', self.handle_keyrelease)

        def autocomplete(self, delta=0):
                """autocomplete the Entry, delta may be 0/1/-1 to cycle through possible hits"""
                if delta: # need to delete selection otherwise we would fix the current position
                        self.delete(self.position, Tkinter.END)
                else: # set position to end so selection starts where textentry ended
                        self.position = len(self.get())
                # collect hits
                _hits = []
                for element in self._completion_list:
                        if element.lower().startswith(self.get().lower()):  # Match case-insensitively
                                _hits.append(element)
                # if we have a new hit list, keep this in mind
                if _hits != self._hits:
                        self._hit_index = 0
                        self._hits=_hits
                # only allow cycling if we are in a known hit list
                if _hits == self._hits and self._hits:
                        self._hit_index = (self._hit_index + delta) % len(self._hits)
                # now finally perform the auto completion
                if self._hits:
                        self.delete(0,Tkinter.END)
                        self.insert(0,self._hits[self._hit_index])
                        self.select_range(self.position,Tkinter.END)

        def handle_keyrelease(self, event):
                """event handler for the keyrelease event on this widget"""
                if event.keysym == "BackSpace":
                        self.delete(self.index(Tkinter.INSERT), Tkinter.END)
                        self.position = self.index(Tkinter.END)
                if event.keysym == "Left":
                        if self.position &lt; self.index(Tkinter.END): # delete the selection
                                self.delete(self.position, Tkinter.END)
                        else:
                                self.position = self.position-1 # delete one character
                                self.delete(self.position, Tkinter.END)
                if event.keysym == "Right":
                        self.position = self.index(Tkinter.END) # go to end (no selection)
                if event.keysym == "Down":
                        self.autocomplete(1) # cycle to next hit
                if event.keysym == "Up":
                        self.autocomplete(-1) # cycle to previous hit
                if len(event.keysym) == 1 or event.keysym in Tkinter_umlauts:
                        self.autocomplete()

class AutocompleteCombobox(ttk.Combobox):

        def set_completion_list(self, completion_list):
                """Use our completion list as our drop down selection menu, arrows move through menu."""
                self._completion_list = sorted(completion_list, key=str.lower) # Work with a sorted list
                self._hits = []
                self._hit_index = 0
                self.position = 0
                self.bind('&lt;KeyRelease&gt;', self.handle_keyrelease)
                self['values'] = self._completion_list  # Setup our popup menu

        def autocomplete(self, delta=0):
                """autocomplete the Combobox, delta may be 0/1/-1 to cycle through possible hits"""
                if delta: # need to delete selection otherwise we would fix the current position
                        self.delete(self.position, Tkinter.END)
                else: # set position to end so selection starts where textentry ended
                        self.position = len(self.get())
                # collect hits
                _hits = []
                for element in self._completion_list:
                        if element.lower().startswith(self.get().lower()): # Match case insensitively
                                _hits.append(element)
                # if we have a new hit list, keep this in mind
                if _hits != self._hits:
                        self._hit_index = 0
                        self._hits=_hits
                # only allow cycling if we are in a known hit list
                if _hits == self._hits and self._hits:
                        self._hit_index = (self._hit_index + delta) % len(self._hits)
                # now finally perform the auto completion
                if self._hits:
                        self.delete(0,Tkinter.END)
                        self.insert(0,self._hits[self._hit_index])
                        self.select_range(self.position,Tkinter.END)

        def handle_keyrelease(self, event):
                """event handler for the keyrelease event on this widget"""
                if event.keysym == "BackSpace":
                        self.delete(self.index(Tkinter.INSERT), Tkinter.END)
                        self.position = self.index(Tkinter.END)
                if event.keysym == "Left":
                        if self.position &lt; self.index(Tkinter.END): # delete the selection
                                self.delete(self.position, Tkinter.END)
                        else:
                                self.position = self.position-1 # delete one character
                                self.delete(self.position, Tkinter.END)
                if event.keysym == "Right":
                        self.position = self.index(Tkinter.END) # go to end (no selection)
                if len(event.keysym) == 1:
                        self.autocomplete()
                # No need for up/down, we'll jump to the popup
                # list at the position of the autocompletion

def test(test_list):
        """Run a mini application to test the AutocompleteEntry Widget."""
        root = Tkinter.Tk(className=' AutocompleteEntry demo')
        entry = AutocompleteEntry(root)
        entry.set_completion_list(test_list)
        entry.pack()
        entry.focus_set()
        combo = AutocompleteCombobox(root)
        combo.set_completion_list(test_list)
        combo.pack()
        combo.focus_set()
        # I used a tiling WM with no controls, added a shortcut to quit
        root.bind('&lt;Control-Q&gt;', lambda event=None: root.destroy())
        root.bind('&lt;Control-q&gt;', lambda event=None: root.destroy())
        root.mainloop()

if __name__ == '__main__':
        test_list = ('apple', 'banana', 'CranBerry', 'dogwood', 'alpha', 'Acorn', 'Anise' )
        test(test_list)
</snippet></ROW><ROW><id>12298661</id><snippet>rstride</snippet></ROW><ROW><id>12298661</id><snippet>cstride</snippet></ROW><ROW><id>12298661</id><snippet>rstride</snippet></ROW><ROW><id>12298661</id><snippet>cstride</snippet></ROW><ROW><id>12298686</id><snippet>Configurator.include()</snippet></ROW><ROW><id>12298686</id><snippet>.include()</snippet></ROW><ROW><id>12298726</id><snippet>./web2py.py -S 'foo' web2py.app
</snippet></ROW><ROW><id>12298872</id><snippet>In [47]: s
Out[47]:
                      event_id
timestamp
2012-09-05 19:28:52          0
2012-09-05 19:28:52          1
2012-09-05 19:44:37          2
2012-09-05 19:44:37          3
2012-09-05 20:04:53          4
2012-09-05 20:04:53          5
2012-09-05 20:12:59          6
2012-09-05 20:13:15          7
2012-09-05 20:13:15          8
2012-09-05 20:13:15          9
</snippet></ROW><ROW><id>12298872</id><snippet>In [48]: s.resample('15Min', how=len)
Out[48]:
                      event_id
timestamp
2012-09-05 19:30:00          2
2012-09-05 19:45:00          2
2012-09-05 20:00:00          0
2012-09-05 20:15:00          6
</snippet></ROW><ROW><id>12298980</id><snippet>all_department_resources</snippet></ROW><ROW><id>12298980</id><snippet>self.persons</snippet></ROW><ROW><id>12298980</id><snippet>emp_list = self.persons
</snippet></ROW><ROW><id>12298980</id><snippet>emp_list</snippet></ROW><ROW><id>12298980</id><snippet>self.persons</snippet></ROW><ROW><id>12298980</id><snippet>emp_list = list(self.persons)
</snippet></ROW><ROW><id>12298980</id><snippet>  @property
  def all_department_resources(self):    
    return self.persons + Person.query().filter(Person.shared == True)
</snippet></ROW><ROW><id>12299378</id><snippet>vstack</snippet></ROW><ROW><id>12299378</id><snippet>list</snippet></ROW><ROW><id>12299378</id><snippet>.append</snippet></ROW><ROW><id>12299378</id><snippet>np.vstack</snippet></ROW><ROW><id>12299378</id><snippet>stokes_list = []
for i in xrange(numrows):
    ...
    stokes_line = ...
    stokes_list.append(stokes_line)

big_stokes = np.vstack(stokes_list)
</snippet></ROW><ROW><id>12300214</id><snippet>unique</snippet></ROW><ROW><id>12300214</id><snippet>bincount</snippet></ROW><ROW><id>12300214</id><snippet>argmax</snippet></ROW><ROW><id>12300214</id><snippet>arr = np.array([5, 4, -2, 1, -2, 0, 4, 4, -6, -1])
u, indices = np.unique(arr, return_inverse=True)
u[np.argmax(np.bincount(indices))]
</snippet></ROW><ROW><id>12300214</id><snippet>unique</snippet></ROW><ROW><id>12300214</id><snippet>apply_along_axis</snippet></ROW><ROW><id>12300214</id><snippet>bincount</snippet></ROW><ROW><id>12300214</id><snippet>arr = np.array([[5, 4, -2, 1, -2, 0, 4, 4, -6, -1],
                [0, 1,  2, 2,  3, 4, 5, 6,  7,  8]])
axis = 1
u, indices = np.unique(arr, return_inverse=True)
u[np.argmax(np.apply_along_axis(np.bincount, axis, indices.reshape(arr.shape),
                                None, np.max(indices) + 1), axis=axis)]
</snippet></ROW><ROW><id>12300214</id><snippet>data = np.array([
   [[ 0,  1,  2,  3,  4],
    [ 5,  6,  7,  8,  9],
    [10, 11, 12, 13, 14],
    [15, 16, 17, 18, 19]],

   [[ 0,  1,  2,  3,  4],
    [ 5,  6,  7,  8,  9],
    [10, 11, 12, 13, 14],
    [15, 16, 17, 18, 19]],

   [[40, 40, 42, 43, 44],
    [45, 46, 47, 48, 49],
    [50, 51, 52, 53, 54],
    [55, 56, 57, 58, 59]]])
axis = 0
u, indices = np.unique(arr, return_inverse=True)
u[np.argmax(np.apply_along_axis(np.bincount, axis, indices.reshape(arr.shape),
                                None, np.max(indices) + 1), axis=axis)]
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])
</snippet></ROW><ROW><id>12300214</id><snippet>np.unique(return_inverse=True)</snippet></ROW><ROW><id>12300214</id><snippet>np.searchsorted</snippet></ROW><ROW><id>12300214</id><snippet>u = np.unique(arr)
indices = np.searchsorted(u, arr.flat)
</snippet></ROW><ROW><id>12300393</id><snippet>if __name__ == "__main__":
    root = Tk.Tk()
    ...
</snippet></ROW><ROW><id>12300819</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>12300819</id><snippet>custLogin</snippet></ROW><ROW><id>12300819</id><snippet>from django.shortcuts import redirect
def custLogin(request):
    if request.user.is_staff:
        return redirect('/some/admin/url')
    else:
        return redirect('/some/regular/user/url')
</snippet></ROW><ROW><id>12300819</id><snippet>redirect()</snippet></ROW><ROW><id>12300819</id><snippet>is_staff</snippet></ROW><ROW><id>12301008</id><snippet>x</snippet></ROW><ROW><id>12301008</id><snippet>func</snippet></ROW><ROW><id>12301008</id><snippet>np.array</snippet></ROW><ROW><id>12301008</id><snippet>x = [log(1),log(2),log(4),log(5),log(8)]
#Import y data from a file
free= curve_fit(func,np.array(x),np.array(y))[0][0]
yline = func(free, np.array(x))
</snippet></ROW><ROW><id>12301059</id><snippet>"{a};{b};{c};{d}".format(**myDictionary)
</snippet></ROW><ROW><id>12301337</id><snippet>class MyModelResource(Resource):
    class Meta:
        qs = MyModel.objects.all()

    def dehydrate(self, bundle):
        # remove unneeded point-field from the response data
        del bundle.data['point']
        # add required fields back to the response data in the form we need it
        bundle.data['lat'] = bundle.obj.point.y
        bundle.data['lng'] = bundle.obj.point.x
        return bundle
</snippet></ROW><ROW><id>12301583</id><snippet>scipy.optimize</snippet></ROW><ROW><id>12301583</id><snippet>import numpy as np

# coordinates (XYZ) of C1, C2, C4 and C5
XYZ = np.array([
        [0.274791784, -1.001679346, -1.851320839, 0.365840754],
        [-1.155674199, -1.215133985, 0.053119249, 1.162878076],
        [1.216239624, 0.764265677, 0.956099579, 1.198231236]])

# Inital guess of the plane
p0 = [0.506645455682, -0.185724560275, -1.43998120646, 1.37626378129]

def f_min(X,p):
    plane_xyz = p[0:3]
    distance = (plane_xyz*X.T).sum(axis=1) + p[3]
    return distance / np.linalg.norm(plane_xyz)

def residuals(params, signal, X):
    return f_min(X, params)

from scipy.optimize import leastsq
sol = leastsq(residuals, p0, args=(None, XYZ))[0]

print "Solution: ", sol
print "Old Error: ", (f_min(XYZ, p0)**2).sum()
print "New Error: ", (f_min(XYZ, sol)**2).sum()
</snippet></ROW><ROW><id>12301583</id><snippet>Solution:  [  14.74286241    5.84070802 -101.4155017   114.6745077 ]
Old Error:  0.441513295404
New Error:  0.0453564286112
</snippet></ROW><ROW><id>12302027</id><snippet>zip</snippet></ROW><ROW><id>12302027</id><snippet> zzz = zip(xxx, yyy) 
</snippet></ROW><ROW><id>12302027</id><snippet> #list (python2.x) or iterable(python3.x) of lists
 zzz = map(list,zip(xxx,yyy)) 
</snippet></ROW><ROW><id>12302027</id><snippet> #list of lists, not list of tuples
 #python 2.x and python 3.x
 zzz = [ list(x) for x in zip(xxx,yyy) ]
</snippet></ROW><ROW><id>12302027</id><snippet>zzz</snippet></ROW><ROW><id>12302027</id><snippet>zip</snippet></ROW><ROW><id>12302027</id><snippet>#list of tuples in python3.x.  
zzz = list(zip(xxx,yyy)) #equivalent to zip(xxx,yyy) in python2.x
                         #will work in python2.x, but will make an extra copy.
                         # which will be available for garbage collection
                         # immediately
</snippet></ROW><ROW><id>12302077</id><snippet>r = requests.post('https://stream.twitter.com/1/statuses/filter.json',
    data={'track': 'requests'}, auth=('username', 'password'),
    prefetch=False)

for line in r.iter_lines():
    if line: # filter out keep-alive new lines
        print json.loads(line)
</snippet></ROW><ROW><id>12302077</id><snippet>requests</snippet></ROW><ROW><id>12302077</id><snippet>stream</snippet></ROW><ROW><id>12302077</id><snippet>prefetch</snippet></ROW><ROW><id>12302077</id><snippet>r = requests.post('https://stream.twitter.com/1/statuses/filter.json',
    data={'track': 'requests'}, auth=('username', 'password'),
    stream=True)

for line in r.iter_lines():
    if line: # filter out keep-alive new lines
        print json.loads(line)
</snippet></ROW><ROW><id>12302135</id><snippet>import functools


def sensitive_variables(*variables):
 """
 Indicates which variables used in the decorated function are sensitive, so
 that those variables can later be treated in a special way, for example
 by hiding them when logging unhandled exceptions.

 Two forms are accepted:

* with specified variable names:

    @sensitive_variables('user', 'password', 'credit_card')
    def my_function(user):
        password = user.pass_word
        credit_card = user.credit_card_number
        ...

* without any specified variable names, in which case it is assumed that
  all variables are considered sensitive:

    @sensitive_variables()
    def my_function()
        ...
"""
 def decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if variables:
            wrapper.sensitive_variables = variables
        else:
            wrapper.sensitive_variables = '__ALL__'
        return func(*args, **kwargs)
    return wrapper
 return decorator
</snippet></ROW><ROW><id>12302135</id><snippet>@sensitive_variables('user', 'pw', 'cc')
def my_view(request):
  pass
</snippet></ROW><ROW><id>12302218</id><snippet>def pick(bag):    
    pick = raw_input("&gt;")
</snippet></ROW><ROW><id>12302218</id><snippet>pick</snippet></ROW><ROW><id>12302218</id><snippet>def pick(bag):    
    picked = raw_input("&gt;")
</snippet></ROW><ROW><id>12302566</id><snippet>arrtup</snippet></ROW><ROW><id>12302566</id><snippet>ndarray</snippet></ROW><ROW><id>12302566</id><snippet>numpy.void</snippet></ROW><ROW><id>12302566</id><snippet>dtype</snippet></ROW><ROW><id>12302566</id><snippet>int</snippet></ROW><ROW><id>12302566</id><snippet>int</snippet></ROW><ROW><id>12302566</id><snippet>arrtup[0,1]</snippet></ROW><ROW><id>12302566</id><snippet>numpy.void</snippet></ROW><ROW><id>12302566</id><snippet>dtype</snippet></ROW><ROW><id>12302566</id><snippet>new_arr = arrtup.astype(object)
</snippet></ROW><ROW><id>12302566</id><snippet>np.void</snippet></ROW><ROW><id>12302566</id><snippet>new_arr[0,1] = (3,4) # That's a tuple
new_arr[0,1] += (4,4) # Adding another tuple to the element
</snippet></ROW><ROW><id>12302566</id><snippet>new_arr</snippet></ROW><ROW><id>12302566</id><snippet>arrtup</snippet></ROW><ROW><id>12302566</id><snippet>&gt;&gt;&gt; new_arr.dtype
dtype("object")
</snippet></ROW><ROW><id>12302566</id><snippet>arrtup</snippet></ROW><ROW><id>12302566</id><snippet>newarr</snippet></ROW><ROW><id>12302566</id><snippet>newarr</snippet></ROW><ROW><id>12302566</id><snippet>arrtup</snippet></ROW><ROW><id>12302584</id><snippet>urllib</snippet></ROW><ROW><id>12302584</id><snippet>urlopen</snippet></ROW><ROW><id>12302584</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>12302584</id><snippet>urllib2.HTTPError</snippet></ROW><ROW><id>12302797</id><snippet>import re
p = re.compile(r'^https?://((?!www\.).*\.lexpress\.fr).*')
m = p.match('https://www.lexpress.fr')
print m
&gt;&gt;&gt; None 
m = p.match('https://abc.lexpress.fr')
print m.group()
&gt;&gt;&gt; 'https://abc.lexpress.fr.com'
</snippet></ROW><ROW><id>12302931</id><snippet>import time
def function_1():
    start_time = time.time()
    while True:
         # do long stuff
         running_time = time.time() -start_time
         if running_time &gt; 2 * 60 * 60: # 2 hours
              yield #&lt;partial results can be yield here, if you want&gt;
              start_time = time.time()



runner = function_1()
while True:
    try:
        runner.next()
    except StopIteration: 
        # function_1 had got to the end
        break
    # do other stuff
</snippet></ROW><ROW><id>12303167</id><snippet>def changeValue(str):
  return 'after'

data = {
    'str1': 'before',
    'str2': 'before',
}

for k, v in data.iteritems():
    print k, v

# as you had it:
data['str1'] = changeValue(str1)
data['str2'] = changeValue(str2)

# with a loop:
for key in ['str1', 'str2']:
    data[key] = changeValue(data[key])

# or a nicer way:
for k, v in data.iteritems():
    data[k] = changeValue(v)

for k, v in data.iteritems():
    print k, v
</snippet></ROW><ROW><id>12303219</id><snippet>class_&lt;VAlgorithm, VAlgorithm_callback, boost::noncopyable&gt;("VAlgorithm", init&lt;std::string&gt;())
</snippet></ROW><ROW><id>12303219</id><snippet>class ConcAlg3(VAlgorithm):
    def __init__(self, name):
    VAlgorithm.__init__(self, name)
</snippet></ROW><ROW><id>12303240</id><snippet>pexpect.spawn()</snippet></ROW><ROW><id>12303240</id><snippet>spawn</snippet></ROW><ROW><id>12303240</id><snippet>child = pexpect.spawn ('/usr/bin/ftp')
child = pexpect.spawn ('/usr/bin/ssh user@example.com')
child = pexpect.spawn ('ls -latr /tmp')
</snippet></ROW><ROW><id>12303240</id><snippet>child = pexpect.spawn ('/usr/bin/ftp', [])
child = pexpect.spawn ('/usr/bin/ssh', ['user@example.com'])
child = pexpect.spawn ('ls', ['-latr', '/tmp'])
</snippet></ROW><ROW><id>12303240</id><snippet>_spawn()</snippet></ROW><ROW><id>12303240</id><snippet>__init__</snippet></ROW><ROW><id>12303560</id><snippet>steps = dict((step.split()[2], pos) 
        for (pos, step) in enumerate(pre_data.splitlines()[1:]))
</snippet></ROW><ROW><id>12303560</id><snippet>sorted_items = sorted(myDict.items(), 
        key=lambda item: steps[item[0]] if item[0] in steps else 999)
</snippet></ROW><ROW><id>12303560</id><snippet>for key, thing in sorted_items:
    print "step: %s header: %s" % (thing, key)
</snippet></ROW><ROW><id>12303873</id><snippet>class Person(models.Model):
   name = models.CharField(max_length=20)
   lastname = models.CharField(max_length=20)
   job = models.CharField(max_length=20)
   salary = models.IntegerField()

   class Meta:
       abstract = True


class Person1(Person):
    ...
</snippet></ROW><ROW><id>12303962</id><snippet>'store_const'</snippet></ROW><ROW><id>12303962</id><snippet>import argparse
parser = argparse.ArgumentParser()
mutex_group = parser.add_mutually_exclusive_group()
mutex_group.add_argument("--show", action="store_const", 
    dest="mutex", const = "show")
mutex_group.add_argument("--insert", action="store_const", 
    dest="mutex", const = "insert")
mutex_group.add_argument('--delete', action="store_const",
    dest="mutex", const = "delete")


parser.set_defaults(mutex='show')
args = parser.parse_args()
print(args)
</snippet></ROW><ROW><id>12303962</id><snippet>args.mutex</snippet></ROW><ROW><id>12303971</id><snippet>x</snippet></ROW><ROW><id>12303971</id><snippet>X</snippet></ROW><ROW><id>12303971</id><snippet>def func(x,a):
    return a+X

X =[]
</snippet></ROW><ROW><id>12303971</id><snippet>x</snippet></ROW><ROW><id>12303971</id><snippet>X</snippet></ROW><ROW><id>12303971</id><snippet>a</snippet></ROW><ROW><id>12303971</id><snippet>a+X</snippet></ROW><ROW><id>12303997</id><snippet>&gt;&gt;&gt; a = [1100, 1140, 1258, 1800, 2100, 2365]
&gt;&gt;&gt; max(x for x in a if x &lt; 2000)
1800
&gt;&gt;&gt; min(x for x in a if x &gt; 2000)
2100
</snippet></ROW><ROW><id>12303997</id><snippet>a</snippet></ROW><ROW><id>12303997</id><snippet>a</snippet></ROW><ROW><id>12303997</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; a = [1100, 1140, 1258, 1800, 2100, 2365]
&gt;&gt;&gt; b = ['r', 's', 't', 'u', 'v', 'w']
&gt;&gt;&gt; max((a,b) for a,b in izip(a,b) if a &lt; 2000)
(1800, 'u')
&gt;&gt;&gt; min((a,b) for a,b in izip(a,b) if a &gt; 2000)
(2100, 'v')
</snippet></ROW><ROW><id>12303997</id><snippet>[(1100, 'r'), (1140, 's'), ...]</snippet></ROW><ROW><id>12303997</id><snippet>b</snippet></ROW><ROW><id>12303997</id><snippet>a</snippet></ROW><ROW><id>12303997</id><snippet>a</snippet></ROW><ROW><id>12303997</id><snippet>from operator import itemgetter
from itertools import izip
min(((a,b) for a,b in izip(a,b) if a &gt; 2000)), key=itemgetter(0))
</snippet></ROW><ROW><id>12303997</id><snippet>a</snippet></ROW><ROW><id>12304071</id><snippet>plt.bar(range(0,100), x)
plt.show()
</snippet></ROW><ROW><id>12304071</id><snippet>hist()</snippet></ROW><ROW><id>12304194</id><snippet>myPattern = u"[\u3041-\u309f\u30a0-\u30ff]*"
</snippet></ROW><ROW><id>12304194</id><snippet>&gt;&gt;&gt; myPattern = u"[\u3041-\u309f\u30a0-\u30ff]*"
&gt;&gt;&gt; print re.sub(myPattern, "", u"Eliminate ã²ãããª non-alphabetic ã«ã¿ã«ã characters")
Eliminate  non-alphabetic  characters
</snippet></ROW><ROW><id>12304235</id><snippet>_timeunit = re.compile(r'^(?P&lt;value&gt;\d+)(?P&lt;unit&gt;s|m|min|h|l)$')
def validate_time(time):
    match = _timeunit.match(time.strip())
    if match is None:
        print "Error: {0} is not valid".format(time)
        sys.exit(2)

    return int(match.group('value')), match.group('unit')
</snippet></ROW><ROW><id>12304235</id><snippet>&gt;&gt;&gt; validate_time('10l')
(10, 'l')
&gt;&gt;&gt; validate_time('10l0')
Error: 10l0 is not valid
</snippet></ROW><ROW><id>12304235</id><snippet>^</snippet></ROW><ROW><id>12304235</id><snippet>s</snippet></ROW><ROW><id>12304235</id><snippet>m</snippet></ROW><ROW><id>12304235</id><snippet>min</snippet></ROW><ROW><id>12304235</id><snippet>h</snippet></ROW><ROW><id>12304235</id><snippet>l</snippet></ROW><ROW><id>12304235</id><snippet>$</snippet></ROW><ROW><id>12304235</id><snippet>_timeunit = re.compile(r'^(?P&lt;value&gt;\d+)(?P&lt;unit&gt;s|m|min|h|l)$')
def validate_time(time):
    match = _timeunit.match(time.strip())
    if match is None:
        raise ValueError('{0} is not a valid timespan'.format(time))    
    return int(match.group('value')), match.group('unit')

try:
    validate_time(foobar)
except ValueError, e:
    print 'Error: {0}'.format(e.args[0])
    sys.exit(2)
</snippet></ROW><ROW><id>12304314</id><snippet>__getitem__</snippet></ROW><ROW><id>12304314</id><snippet>book</snippet></ROW><ROW><id>12304314</id><snippet>def __getitem__(self, item):
    return self.page[item].text
</snippet></ROW><ROW><id>12304420</id><snippet>shiboken-1.1.2</snippet></ROW><ROW><id>12304570</id><snippet>def foo
  puts 'before code'

  yield

  puts 'after code'
end

foo { puts 'here is the code' }
</snippet></ROW><ROW><id>12304648</id><snippet>    # It's considered best to stash the main logic of your script
    # in a main() function like this.
    def main(filename, options):
        with open(filename) as fi:
            data = json.load(fi)

        csv_file = '/tmp/' + str(options.orderId) + '.csv'
        order = data['Order']
        items = data['Items']
        frauds = data['FraudReasons']

        # Here's one way to keep this maintainable if the JSON
        # format changes, and you don't care too much about the
        # order of the fields...
        orders_fields = sorted(orders.keys())
        item_fields = sorted(items[0].keys()) if items else ()
        fraud_fields = sorted(fraud[0].keys()) if fraud else ()

        csv_options = dict(lineterminator=',')

        with open(csv_file, 'w') as fo:
            o = csv.DictWriter(fo, order_fields, **csv_options)
            o.writeheader()
            o.writerow(orders)

            fo.write('\n')  # Optional, if you want to keep them separated.
            o = csv.DictWriter(fo, item_fields, **csv_options)
            o.writeheader()
            o.writerows(items)

            fo.write('\n')  # Optional, if you want to keep them separated.
            o = csv.DictWriter(fo, fraud_fields, **csv_options)
            o.writeheader()
            o.writerows(frauds)

    # If this script is run from the command line, just run
    # main(). Here's the place to use `optparse`.
    if __name__ == '__main__':
        main(...) # You'll need to fill in the main() arguments...
</snippet></ROW><ROW><id>12304648</id><snippet>orders_fields = (
    'order_id',
    'order_date',
    'order_date_shipped',
    # ... etc.
    )
</snippet></ROW><ROW><id>12305047</id><snippet>Paragraph</snippet></ROW><ROW><id>12305047</id><snippet>def go_chunked(limit=500000, chunk=4096):

    BYTES_TO_READ = chunk

    doc = SimpleDocTemplate("output.pdf")
    Story = [Spacer(1, 2*inch)]
    style = styles["Normal"]

    written = 0

    with open("book.txt", "r") as source_file:
        while written &lt; limit:
            text = source_file.read(BYTES_TO_READ)
            if not text:
                break
            p = Paragraph(text, style)
            Story.append(p)
            written += BYTES_TO_READ

    doc.build(Story)
</snippet></ROW><ROW><id>12305047</id><snippet>%timeit go_chunked(limit=500000, chunk=4096)
1 loops, best of 3: 1.88 s per loop

%timeit go(get_text_from_file())
1 loops, best of 3: 64.1 s per loop
</snippet></ROW><ROW><id>12305047</id><snippet>BYTES_TO_READ</snippet></ROW><ROW><id>12305047</id><snippet>def go_lines(limit=500000):

    doc = SimpleDocTemplate("output.pdf")
    Story = [Spacer(1, 2*inch)]
    style = styles["Normal"]

    written = 0

    with open("book.txt", "r") as source_file:
        while written &lt; limit:
            text = source_file.readline()
            if not text:
                break
            text = text.strip()
            p = Paragraph(text, style)
            Story.append(p)
            written += len(text)

    doc.build(Story)
</snippet></ROW><ROW><id>12305047</id><snippet>%timeit go_lines()
1 loops, best of 3: 1.46 s per loop
</snippet></ROW><ROW><id>12305053</id><snippet>keys=sorted({t[2] for t in tups})
for key in keys:
    group=filter(lambda t: t[2]==key,tups)
    print '{}:\n\tmax: {}\n\tmin: {}'.format(key,max(group),min(group))
</snippet></ROW><ROW><id>12305053</id><snippet>MIHL G1.575:
    max: (1.38, 'VOLTAGE DEVIATION', '7MIHL G1.575')
    min: (1.36, 'VOLTAGE DEVIATION', '7MIHL G1.575')
DIFICULT 230:
    max: (1.36, 'VOLTAGE DEVIATION', 'DIFICULT 230')
    min: (1.3533, 'VOLTAGE DEVIATION', 'DIFICULT 230')
DNLP1_G1.575:
    max: (1.3467, 'VOLTAGE DEVIATION', 'DNLP1_G1.575')
    min: (1.3467, 'VOLTAGE DEVIATION', 'DNLP1_G1.575')
DNLP2G23.575:
    max: (1.3467, 'VOLTAGE DEVIATION', 'DNLP2G23.575')
    min: (1.3433, 'VOLTAGE DEVIATION', 'DNLP2G23.575')
FT CRK2 34.5:
    max: (1.4267, 'VOLTAGE DEVIATION', 'FT CRK2 34.5')
    min: (1.4233, 'VOLTAGE DEVIATION', 'FT CRK2 34.5')
HIPLN_G .575:
    max: (1.4833, 'VOLTAGE DEVIATION', 'HIPLN_G .575')
    min: (1.48, 'VOLTAGE DEVIATION', 'HIPLN_G .575')
HORIZ_G .575:
    max: (1.38, 'VOLTAGE DEVIATION', 'HORIZ_G .575')
    min: (1.38, 'VOLTAGE DEVIATION', 'HORIZ_G .575')
MEDBOWCO 115:
    max: (1.38, 'VOLTAGE DEVIATION', 'MEDBOWCO 115')
    min: (1.38, 'VOLTAGE DEVIATION', 'MEDBOWCO 115')
MINERS  34.5:
    max: (1.39, 'VOLTAGE DEVIATION', 'MINERS  34.5')
    min: (1.3867, 'VOLTAGE DEVIATION', 'MINERS  34.5')
STNDPSVC 230:
    max: (1.38, 'VOLTAGE DEVIATION', 'STNDPSVC 230')
    min: (1.38, 'VOLTAGE DEVIATION', 'STNDPSVC 230')
</snippet></ROW><ROW><id>12305053</id><snippet>import ast

tups=[ast.literal_eval(t) for t in tups]
tups=[(float(a),b,c) for a,b,c in tups]
</snippet></ROW><ROW><id>12305085</id><snippet>import argparse

def scream(args):
    print "you screamed "+' '.join(args.words)

def count(args):
    print "you counted to {0}".format(args.count)

parser = argparse.ArgumentParser()

#tell the parser that there will be subparsers
subparsers = parser.add_subparsers(help="subparsers")

#Add parsers to the object that was returned by `add_subparsers`
parser_scream = subparsers.add_parser('scream')

#use that as you would any other argument parser
parser_scream.add_argument('words',nargs='*')

#set_defaults is nice to call a function which is specific to each subparser
parser_scream.set_defaults(func=scream) 

#repeat for our next sub-command
parser_count = subparsers.add_parser('count')
parser_count.add_argument('count')
parser_count.set_defaults(func=count)

#parse the args
args = parser.parse_args()
args.func(args)  #args.func is the function that was set for the particular subparser
</snippet></ROW><ROW><id>12305085</id><snippet>&gt;python test.py scream Hello World!  #you screamed Hello World!
&gt;python test.py count 10             #you counted to 10
</snippet></ROW><ROW><id>12305167</id><snippet>import wx

class Test(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, -1, title='Event Test',
size=(200, 200))

        panel = wx.Panel(self)

        panel.SetFocus()

        self.Bind(wx.EVT_CHAR_HOOK, self.OnKeyUP)

    def OnKeyUP(self, event):
    print "KEY UP!"
        keyCode = event.GetKeyCode()
        if keyCode == wx.WXK_ESCAPE:
            self.Close()


class App(wx.App):
    """Application class."""

    def OnInit(self):
        self.frame = Test()
        self.frame.Show()
        self.SetTopWindow(self.frame)
        self.frame.SetFocus()
        return True

if __name__ == '__main__':
    app = App()
    app.MainLoop()
</snippet></ROW><ROW><id>12305382</id><snippet>"%sÂ° %s' %s\"" % s.split('-')
</snippet></ROW><ROW><id>12305382</id><snippet>s.split</snippet></ROW><ROW><id>12305382</id><snippet>"%sÂ° %s' %s\"" % tuple(s.split('-'))
</snippet></ROW><ROW><id>12305404</id><snippet>class Singleton(object):
    __instance = None
    def __new__(cls):
        if cls.__instance is None:
            cls.__instance = super(Singleton,cls).__new__(cls)
            cls.__instance.__initialized = False
        return cls.__instance

    def __init__(self):      
        if(self.__initialized): return
        self.__initialized = True
        print ("INIT")

a = Singleton()
b = Singleton()
print (a is b)
</snippet></ROW><ROW><id>12305404</id><snippet>class Foo(object):
    pass

def foo_singleton_factory(_singlton = Foo()):
    return _singleton

a = foo_singleton_factory()
b = foo_singleton_factory()
print (a is b)
</snippet></ROW><ROW><id>12305499</id><snippet>cursor.execute</snippet></ROW><ROW><id>12305499</id><snippet>sql_input = "INSERT INTO 963168MBV17A(Rev, Part, SN, Iterations, Date, Time, Upstream, Downstream, ResultList, Result, Report) VALUES('503', '100-120970-0031', '1594539', '%s', '%s', '%s', '%s', '%s', 0, P, 0" %(export_date, export_time, export_numtests, export_upstream, export_downstream)
cur.execute(sql_input)
</snippet></ROW><ROW><id>12305499</id><snippet>sql_input = "INSERT INTO 963168MBV17A(Rev, Part, SN, Iterations, Date, Time, Upstream, Downstream, ResultList, Result, Report) VALUES(%s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s" 
cur.execute(sql_input, [503, '100-120970-0031', '1594539', export_date, export_time, export_numtests, export_upstream, export_downstream, 0, "P", 0] )
</snippet></ROW><ROW><id>12305923</id><snippet>view.setItemsExpandable(False)</snippet></ROW><ROW><id>12306216</id><snippet>cv::FaceRecognizer</snippet></ROW><ROW><id>12306216</id><snippet>help(cv2.createFaceRecognizer)</snippet></ROW><ROW><id>12306216</id><snippet>Help on built-in function createEigenFaceRecognizer in module cv2:

createEigenFaceRecognizer(...)
    createEigenFaceRecognizer([, num_components[, threshold]]) -&gt; retval
</snippet></ROW><ROW><id>12306216</id><snippet>100.0</snippet></ROW><ROW><id>12306216</id><snippet>-1</snippet></ROW><ROW><id>12306216</id><snippet>unknown</snippet></ROW><ROW><id>12306216</id><snippet># Create the Eigenfaces model. We are going to use the default
# parameters for this simple example, please read the documentation
# for thresholding:
model = cv2.createEigenFaceRecognizer(threshold=100.0)
</snippet></ROW><ROW><id>12306216</id><snippet>[predicted_label, predicted_confidence] = model.predict(image)
</snippet></ROW><ROW><id>12306216</id><snippet>A</snippet></ROW><ROW><id>12306216</id><snippet>B</snippet></ROW><ROW><id>12306216</id><snippet>C</snippet></ROW><ROW><id>12306216</id><snippet>D</snippet></ROW><ROW><id>12306216</id><snippet>-1</snippet></ROW><ROW><id>12306216</id><snippet>A</snippet></ROW><ROW><id>12306216</id><snippet>B</snippet></ROW><ROW><id>12306216</id><snippet>C</snippet></ROW><ROW><id>12306216</id><snippet>FaceRecognizer::train</snippet></ROW><ROW><id>12306216</id><snippet>cv2.createLBPHFaceRecognizer</snippet></ROW><ROW><id>12306470</id><snippet>datetime.date(year, month, day).toordinal()
</snippet></ROW><ROW><id>12306470</id><snippet>day</snippet></ROW><ROW><id>12306470</id><snippet>datetime.date</snippet></ROW><ROW><id>12306470</id><snippet>datetime.date(year, month, 1)</snippet></ROW><ROW><id>12306470</id><snippet>year</snippet></ROW><ROW><id>12306470</id><snippet>month</snippet></ROW><ROW><id>12306470</id><snippet>calendar.py</snippet></ROW><ROW><id>12306470</id><snippet>hg blame cpython/Lib/calendar.py 
</snippet></ROW><ROW><id>12306470</id><snippet>hg clone</snippet></ROW><ROW><id>12306470</id><snippet>10940: def timegm(tuple):
11691:     """Unrelated but handy function to calculate Unix timestamp from GMT."""
11691:     year, month, day, hour, minute, second = tuple[:6]
27881:     days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1
</snippet></ROW><ROW><id>12306605</id><snippet>http://pypi.python.org/pypi/async_subprocess/0.2.1</snippet></ROW><ROW><id>12306857</id><snippet>for x in range(postsint): # start at beginning as mgilson suggested</snippet></ROW><ROW><id>12306978</id><snippet>Server</snippet></ROW><ROW><id>12306978</id><snippet>Instance</snippet></ROW><ROW><id>12306978</id><snippet>srvrDict</snippet></ROW><ROW><id>12306978</id><snippet>chkbkpstats</snippet></ROW><ROW><id>12306978</id><snippet>chkbkpstats = csv.reader(file('c://temp//networkerservers.csv'))
srvrs = []
for for row in chkbkpstats:
    srvrs.append({'Name' : row[0], 'Instance' : row[1]})
for srvr in srvrs:
    try:
        c = wmi.WMI(srvr['Instance'])
    except:                 
        print 'Error connecting to %s to check OS version' % srvr['Name']
    else:
        osVer = c.Win32_OperatingSystem()[0].Caption
        if '2003' in osVer:
            print 'w2k3'
        elif '2008' in osVer:
            print 'w2k8'
</snippet></ROW><ROW><id>12307162</id><snippet>df.ix[df.A==0, 'B'] = np.nan
</snippet></ROW><ROW><id>12307477</id><snippet>r'\s*\((\d+)\)'
</snippet></ROW><ROW><id>12307477</id><snippet>parensnumber = re.compile(r'\s*\((\d+)\)')

count = int(parensnumber.search(line).group(1))
for i in range(count):
    print(parensnumber.sub('-{0}'.format(i + 1), line))
</snippet></ROW><ROW><id>12307477</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; parensnumber = re.compile(r'\s*\((\d+)\)')
&gt;&gt;&gt; parensnumber.sub(r'-\1', 'itemA (3)')
'itemA-3'
&gt;&gt;&gt; parensnumber.sub(r'-\1',  'itemB (test) abcd (2)')
'itemB (test) abcd-2'
&gt;&gt;&gt; line = 'itemB (test) abcd (2)'
&gt;&gt;&gt; count = int(parensnumber.search(line).group(1))
&gt;&gt;&gt; for i in range(count):
...     print(parensnumber.sub('-{0}'.format(i + 1), line))
... 
itemB (test) abcd-1
itemB (test) abcd-2
</snippet></ROW><ROW><id>12307477</id><snippet>import os
import re

parensnumber = re.compile(r'\s*\((\d+)\)')

with open('C:\\Dropbox\\test.txt','r') as input:
    for line in input:
        count = int(parensnumber.search(line).group(1))
        for i in range(count):
            print(parensnumber.sub('-{0}'.format(i + 1), line))
</snippet></ROW><ROW><id>12307527</id><snippet>@property
def area(self):
    try:
        return self._area
    except AttributeError:
        area = pi*self.r**2
        self._area = area
        return area
</snippet></ROW><ROW><id>12307527</id><snippet>@property
def area(self):
    try:
        return self._area
    except AttributeError:
        self.recalc_area()
        return self._area

def recalc_area(self):
    self._area = pi*self.r**2
</snippet></ROW><ROW><id>12307527</id><snippet>@property
def area(self):
    try:
        return self._area
    except AttributeError:
        area = pi*self.radius**2
        self._area = area
        return area

@property
def radius(self):
    return self._radius

@radius.setter
def radius(self, radius):
    try:
        del self._area
    except AttributeError:
        pass
    self._radius = radius
</snippet></ROW><ROW><id>12307741</id><snippet>parallel_run</snippet></ROW><ROW><id>12307741</id><snippet>__main__</snippet></ROW><ROW><id>12307741</id><snippet>parallel_run</snippet></ROW><ROW><id>12307741</id><snippet>math</snippet></ROW><ROW><id>12307741</id><snippet>os</snippet></ROW><ROW><id>12307741</id><snippet>dimensionless_run</snippet></ROW><ROW><id>12307741</id><snippet>locals()</snippet></ROW><ROW><id>12307741</id><snippet>globals()</snippet></ROW><ROW><id>12307741</id><snippet>__main__</snippet></ROW><ROW><id>12307741</id><snippet>__main__</snippet></ROW><ROW><id>12307741</id><snippet>client[:].execute("import os, math")
client[:]['dimensionless_run'] = dimensionless_run
</snippet></ROW><ROW><id>12307741</id><snippet>from mymod import parallel_run
lbview.map(parallel_run, inputs)
</snippet></ROW><ROW><id>12307741</id><snippet>globals()</snippet></ROW><ROW><id>12308123</id><snippet>root_dir</snippet></ROW><ROW><id>12308123</id><snippet>base_dir</snippet></ROW><ROW><id>12308123</id><snippet>./</snippet></ROW><ROW><id>12308123</id><snippet>$ tree
.
âââ blah
âÂ Â  âââ file1
âÂ Â  âââ file2

$ python
&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.make_archive("test", "gztar", ".", "blah")

$ tar -tf test.tar.gz 
blah/
blah/file1
blah/file2
</snippet></ROW><ROW><id>12308336</id><snippet>&gt;</snippet></ROW><ROW><id>12308336</id><snippet>dtype &gt;f8 not supported</snippet></ROW><ROW><id>12308336</id><snippet>c = c.astype(float)
</snippet></ROW><ROW><id>12308336</id><snippet>c.dtype.byteorder</snippet></ROW><ROW><id>12308336</id><snippet>'='</snippet></ROW><ROW><id>12308336</id><snippet>if c.dtype.byteorder != '=':
    c = c.astype(c.dtype.newbyteorder('=')) 
</snippet></ROW><ROW><id>12308338</id><snippet>self.httpd.server_close()</snippet></ROW><ROW><id>12308338</id><snippet>self.httpd.shutdown()</snippet></ROW><ROW><id>12308511</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>12308511</id><snippet>&gt;&gt;&gt; with open("list.txt") as fp:
...     data = [ast.literal_eval(line) for line in fp if line.strip()]
... 
&gt;&gt;&gt; data
[[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (6, 0, 0)], [(10, 3, 1), (11, 3, 1), (12, 3, 1), (13, 3, 1), (13, 4, 1)], [(10, 3, 5), (11, 3, 5), (12, 3, 5), (13, 3, 5), (13, 4, 5), (13, 5, 5), (13, 6, 5)], [(6, 13, 5), (7, 13, 5), (8, 13, 5), (8, 14, 5), (7, 14, 5), (6, 14, 5), (6, 14, 6)]]
</snippet></ROW><ROW><id>12308511</id><snippet>eval</snippet></ROW><ROW><id>12308511</id><snippet>pickle</snippet></ROW><ROW><id>12308511</id><snippet>JSON</snippet></ROW><ROW><id>12308865</id><snippet>Word</snippet></ROW><ROW><id>12308865</id><snippet>def_3</snippet></ROW><ROW><id>12308865</id><snippet>a_separate_instance = Word("dissemble", [def_3])    
</snippet></ROW><ROW><id>12308865</id><snippet>vars</snippet></ROW><ROW><id>12308865</id><snippet>print vars(def_3)
# create a new instance of Word ...
a_separate_instance = Word("dissemble", [def_3])    
print vars(def_3)
</snippet></ROW><ROW><id>12308865</id><snippet>{'text': 'text_string_c', 'word': 'dissemble', 'pos': 3, 'word_id': 5}
{'text': 'text_string_c', 'word': 'dissemble', 'pos': 1, 'word_id': 5}
</snippet></ROW><ROW><id>12308865</id><snippet>orderDefinitions</snippet></ROW><ROW><id>12308931</id><snippet>#models.py
from django.db import models

class Topic(models.Model):
    name = models.CharField(...)
    heading = models.CharField(...)
    detail = models.TextField()

#views.py
from myapp.models import Topic

# In your view:
    topics = Topic.objects.all()
</snippet></ROW><ROW><id>12308953</id><snippet>title %% %s</snippet></ROW><ROW><id>12309071</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
from functools import partial
from PyQt4 import QtGui, QtCore

class Example(QtGui.QWidget):
    def __init__(self):
        super(Example, self).__init__()
        self.initUI()

    def initUI(self):
        numbers = [ '7', '8', '9',
            '4', '5', '6',
            '1', '2', '3',
                    '*', '0', '#',]
        self.vert_lay = QtGui.QVBoxLayout()
        self.dig_out = QtGui.QLineEdit()
        self.vert_lay.addWidget(self.dig_out)
        grid = QtGui.QGridLayout()
        j = 0
        pos = [(0, 0), (0, 1), (0, 2),
                (1, 0), (1, 1), (1, 2),
                (2, 0), (2, 1), (2, 2),
                (3, 0), (3, 1), (3, 2),
              ]
        for i in numbers:
            button = QtGui.QPushButton(i)
            grid.addWidget(button, pos[j][0], pos[j][1])
            j = j + 1
            button.clicked.connect(partial(self.addNumber,i))

        self.vert_lay.addLayout(grid)
        self.setLayout(self.vert_lay)  

        self.move(300, 150)
        self.setWindowTitle('Calculator')    
        self.show()

    def addNumber(self,num):
        current_txt = self.dig_out.text()
        self.dig_out.setText("%s%s" % (current_txt,num))

def main():
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12309211</id><snippet>handler_id</snippet></ROW><ROW><id>12309211</id><snippet>handler_block</snippet></ROW><ROW><id>12309211</id><snippet>handler_unblock</snippet></ROW><ROW><id>12309211</id><snippet>from gi.repository import Gtk

class TestWindow(Gtk.Window):

    def __init__(self, *args, **kwargs):
        Gtk.Window.__init__(self, *args, **kwargs)
        self.connect("destroy", Gtk.main_quit)
        self.is_allowed = True
        self.create_widgets()
        self.show_all()

    def create_widgets(self):
        box = Gtk.HBox()
        self.entry = Gtk.Entry()
        self.handler_id = self.entry.connect("changed", self.on_entry_changed)
        box.pack_start(self.entry, True, True, 0)
        button = Gtk.Button("Toggle")
        button.connect("clicked", self.on_button_clicked)
        box.pack_start(button, True, True, 0)
        self.add(box)

    def on_entry_changed(self, *args):
        print "entry has changed"

    def on_button_clicked(self, *args):
        if self.is_allowed:
            self.entry.handler_block(self.handler_id)
            print "now blocking"
        else:
            self.entry.handler_unblock(self.handler_id)
            print "now unblocking"
        self.is_allowed = not self.is_allowed

TestWindow()
Gtk.main()
</snippet></ROW><ROW><id>12309296</id><snippet>data</snippet></ROW><ROW><id>12309296</id><snippet>import json
with open('data.txt', 'w') as outfile:
  json.dump(data, outfile)
</snippet></ROW><ROW><id>12309403</id><snippet>sudo</snippet></ROW><ROW><id>12309403</id><snippet>sudo python &lt;script&gt;</snippet></ROW><ROW><id>12309577</id><snippet>runtime</snippet></ROW><ROW><id>12309577</id><snippet>app.yaml</snippet></ROW><ROW><id>12309577</id><snippet>as</snippet></ROW><ROW><id>12309577</id><snippet>except</snippet></ROW><ROW><id>12309840</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; t1=time.gmtime(1284286794)
&gt;&gt;&gt; t1
time.struct_time(tm_year=2010, tm_mon=9, tm_mday=12, tm_hour=10, tm_min=19, 
             tm_sec=54, tm_wday=6, tm_yday=255, tm_isdst=0)
</snippet></ROW><ROW><id>12309950</id><snippet>from django.core.files.uploadedfile import InMemoryUploadedFile
import StringIO
def MakeThumbnail(file):
    img = Image.open(file)
    img.thumbnail((128, 128), Image.ANTIALIAS)
    thumbnailString = StringIO.StringIO()
    img.save(thumbnailString, 'JPEG')
    newFile = InMemoryUploadedFile(thumbnailString, None, 'temp.jpg', 'image/jpeg', thumbnailString.len, None)
    return newFile
</snippet></ROW><ROW><id>12309958</id><snippet>days.on("reset", function(days){
   console.log(days)l
});
days.fetch();
</snippet></ROW><ROW><id>12309958</id><snippet>$.when(days.fetch()).done(function(days){
  console.log(days);
}).error(function(){
  console.error("oops");
});
</snippet></ROW><ROW><id>12309982</id><snippet>" ".join(my_list)
</snippet></ROW><ROW><id>12310019</id><snippet>main</snippet></ROW><ROW><id>12310019</id><snippet>QDialog</snippet></ROW><ROW><id>12310019</id><snippet>import sys
from urllib import unquote_plus

from PyQt4 import QtCore, QtGui, QtWebKit

class MyWebPage(QtWebKit.QWebPage):
    formSubmitted = QtCore.pyqtSignal(object)

    def acceptNavigationRequest(self, frame, req, nav_type):
        if nav_type == QtWebKit.QWebPage.NavigationTypeFormSubmitted:
            elements = {}
            for key, value in req.url().encodedQueryItems():
                key = unquote_plus(bytes(key)).decode('utf8')
                value = unquote_plus(bytes(value)).decode('utf8')
                elements[key] = value
            self.formSubmitted.emit(elements)
        return super(MyWebPage, self).acceptNavigationRequest(frame, req, nav_type)

class PsyTML(QtGui.QDialog):
    def __init__(self):
        super(PsyTML, self).__init__()
        self.elements = {}
        self.view = QtWebKit.QWebView(self)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.view)
        layout.setContentsMargins(0, 0, 0, 0)
        self.view.setPage(MyWebPage())
        self.view.page().formSubmitted.connect(self.handleFormSubmitted)

    def viewPsyTML(self, html):
        self.view.setHtml(html)
        self.exec_()

    def handleFormSubmitted(self, elements):
        self.elements = elements
        self.accept()

# setup the html form
html = """
&lt;form action="" method="get"&gt;
Like it?
&lt;input type="radio" name="like" value="yes"/&gt; Yes
&lt;input type="radio" name="like" value="no" /&gt; No
&lt;br/&gt;&lt;input type="text" name="text" value="" /&gt;
&lt;input type="submit" name="submit" value="Send"/&gt;
&lt;/form&gt;
"""

html2 = """
&lt;form action="" method="get"&gt;
Choose wisely?
&lt;input type="radio" name="choose" value="A"/&gt; Yes
&lt;input type="radio" name="choose" value="B" /&gt; No
&lt;br/&gt;&lt;input type="text" name="text" value="" /&gt;
&lt;input type="submit" name="submit" value="Send"/&gt;
&lt;/form&gt;
"""

def main():
    app = QtGui.QApplication(sys.argv)

    intro = PsyTML()
    intro.viewPsyTML(html)

    # do stuff with elements...
    for item in intro.elements.iteritems():
        print '"%s" = "%s"' % item

    intro = PsyTML()
    intro.viewPsyTML(html2)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>12310173</id><snippet>&gt;&gt;&gt; print [(i[0][1],i[1][1]) for i in zip(*data_tuple)]
[(2, 'b'), (5, 'e'), (8, 'h')]
</snippet></ROW><ROW><id>12310173</id><snippet>for i in range(len(data_tuple[0]):
    x,y = data_tuple[0][i][1],data_tuple[1][i][1],
    print (x,y)
</snippet></ROW><ROW><id>12310173</id><snippet>&gt;&gt;&gt; for numbr,letr in zip(*data_tuple):
...     x,y = numbr[1],letr[1]
...     print(x,y)
...
</snippet></ROW><ROW><id>12310627</id><snippet>from PIL import Image

def adjust(image):
    image = image.convert('RGBA')
    width, height = image.size
    new_width = 512
    new_height = new_width * height / width
    image = image.resize((new_width, new_height), resample=Image.ANTIALIAS)
    new_image = Image.new('RGBA', (512, 512), (0, 0, 0, 0))
    upper = (512 - image.size[1]) / 2
    new_image.paste(image, (0, upper))
    return new_image
</snippet></ROW><ROW><id>12310687</id><snippet>urllib2.Request</snippet></ROW><ROW><id>12310687</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>12310742</id><snippet>with</snippet></ROW><ROW><id>12310742</id><snippet># printfile.py
import argparse

parser = argparse.ArgumentParser(description="Opens a file and does cool stuff ^^")
parser.add_argument('filename', type=str, help="Path to file to open")
args = parser.parse_args()

with open(args.filename) as f:
    print '   my uber cool file:'
    print f.readlines()
</snippet></ROW><ROW><id>12310742</id><snippet>[dlam@dlam-63221:~] $ python printfile.py -h
usage: printfile.py [-h] filename

Opens a file and does cool stuff ^^

positional arguments:
    filename    Path to file to open
</snippet></ROW><ROW><id>12310820</id><snippet>PIL</snippet></ROW><ROW><id>12310820</id><snippet>PIL</snippet></ROW><ROW><id>12310820</id><snippet>Image.point()</snippet></ROW><ROW><id>12310820</id><snippet>import Image
from ImageColor import getcolor, getrgb
from ImageOps import grayscale

def image_tint(src, tint='#ffffff'):
    if Image.isStringType(src):  # file path?
        src = Image.open(src)
    if src.mode not in ['RGB', 'RGBA']:
        raise TypeError('Unsupported source image mode: {}'.format(src.mode))
    src.load()

    tr, tg, tb = getrgb(tint)
    tl = getcolor(tint, "L")  # tint color's overall luminosity
    if not tl: tl = 1  # avoid division by zero
    tl = float(tl)  # compute luminosity preserving tint factors
    sr, sg, sb = map(lambda tv: tv/tl, (tr, tg, tb))  # per component adjustments

    # create look-up tables to map luminosity to adjusted tint
    # (using floating-point math only to compute table)
    luts = (map(lambda lr: int(lr*sr + 0.5), range(256)) +
            map(lambda lg: int(lg*sg + 0.5), range(256)) +
            map(lambda lb: int(lb*sb + 0.5), range(256)))
    l = grayscale(src)  # 8-bit luminosity version of whole image
    if Image.getmodebands(src.mode) &lt; 4:
        merge_args = (src.mode, (l, l, l))  # for RGB verion of grayscale
    else:  # include copy of src image's alpha layer
        a = Image.new("L", src.size)
        a.putdata(src.getdata(3))
        merge_args = (src.mode, (l, l, l, a))  # for RGBA verion of grayscale
        luts += range(256)  # for 1:1 mapping of copied alpha values

    return Image.merge(*merge_args).point(luts)

if __name__ == '__main__':
    import os

    input_image_path = 'image1.png'
    print 'tinting "{}"'.format(input_image_path)

    root, ext = os.path.splitext(input_image_path)
    result_image_path = root+'_result'+ext

    print 'creating "{}"'.format(result_image_path)
    result = image_tint(input_image_path, '#33b5e5')
    if os.path.exists(result_image_path):  # delete any previous result file
        os.remove(result_image_path)
    result.save(result_image_path)  # file name's extension determines format

    print 'done'
</snippet></ROW><ROW><id>12310911</id><snippet>somelist = [random.randint(1, 1000000) for i in xrange(10000)]
</snippet></ROW><ROW><id>12310911</id><snippet>&lt;a href="http://docs.python.org/library/functions.html#xrange" rel="nofollow"&gt;xrange&lt;/a&gt;</snippet></ROW><ROW><id>12310911</id><snippet>_</snippet></ROW><ROW><id>12310911</id><snippet>somelist = [random.randint(1, 1000000) for _ in xrange(10000)]
</snippet></ROW><ROW><id>12311093</id><snippet>${HOME}/.bashrc</snippet></ROW><ROW><id>12311144</id><snippet>print(" "*((s)-y))+(i*'* ') + (" "*((s)-y))
</snippet></ROW><ROW><id>12311144</id><snippet>print(" "*((s)-y))+(i*'* ').rstrip())
</snippet></ROW><ROW><id>12311144</id><snippet>print(" "*((s)-y))+(i*'* ')[:-1])
</snippet></ROW><ROW><id>12311195</id><snippet>from matplotlib.pyplot import *
import numpy as np

#put some dummy data into s
s=np.vectorize(complex)(range(2048),range(2048))

power, freq=psd(s, 2048, 194171, window=np.bartlett(2048),Fc=14050000)
figure()
semilogy(freq[256:-256], power[256:-256])
show()
</snippet></ROW><ROW><id>12311245</id><snippet>&gt;&gt;&gt; x = decimal.Decimal ('10000000')

&gt;&gt;&gt; x.normalize()
Decimal('1E+7')

&gt;&gt;&gt; x.normalize().to_eng_string()
'10E+6'
</snippet></ROW><ROW><id>12311245</id><snippet>to_eng_string()</snippet></ROW><ROW><id>12311245</id><snippet>Lib/decimal.py</snippet></ROW><ROW><id>12311245</id><snippet>__str__</snippet></ROW><ROW><id>12311245</id><snippet>eng</snippet></ROW><ROW><id>12311245</id><snippet>leftdigits = self._exp + len(self._int)
</snippet></ROW><ROW><id>12311245</id><snippet>                         ._exp       ._int         len   leftdigits
                         -----       ---------     ---   ----------
Decimal (1000000)            0       '1000000'       7            7
Decimal ('1E+6')             6       '1'             1            7
</snippet></ROW><ROW><id>12311245</id><snippet>if self._exp &lt;= 0 and leftdigits &gt; -6:
    # no exponent required
    dotplace = leftdigits
elif not eng:
    # usual scientific notation: 1 digit on left of the point
    dotplace = 1
elif self._int == '0':
    # engineering notation, zero
    dotplace = (leftdigits + 1) % 3 - 1
else:
    # engineering notation, nonzero
    dotplace = (leftdigits - 1) % 3 + 1
</snippet></ROW><ROW><id>12311245</id><snippet>self._exp &gt; 0 or leftdigits &lt;= -6</snippet></ROW><ROW><id>12311245</id><snippet>General Decimal Arithmetic Specification</snippet></ROW><ROW><id>12311245</id><snippet>to-scientific-string</snippet></ROW><ROW><id>12311245</id><snippet>to-engineering-string</snippet></ROW><ROW><id>12311278</id><snippet>tuple</snippet></ROW><ROW><id>12311278</id><snippet>print ( 'Plants for each semicircle garden: {0}'.format(round(semiPlants,0)))
</snippet></ROW><ROW><id>12311278</id><snippet>tuple</snippet></ROW><ROW><id>12311278</id><snippet>(some_object,)</snippet></ROW><ROW><id>12311327</id><snippet>range(13,5,-1)</snippet></ROW><ROW><id>12311327</id><snippet>13</snippet></ROW><ROW><id>12311327</id><snippet>6</snippet></ROW><ROW><id>12311327</id><snippet>i%2 != 0</snippet></ROW><ROW><id>12311327</id><snippet>i%2 == 0</snippet></ROW><ROW><id>12311327</id><snippet>if even</snippet></ROW><ROW><id>12311327</id><snippet>if odd</snippet></ROW><ROW><id>12311327</id><snippet>if not even</snippet></ROW><ROW><id>12311425</id><snippet>__getattr__</snippet></ROW><ROW><id>12311425</id><snippet>__getattribute__</snippet></ROW><ROW><id>12311425</id><snippet>Foo(5).__lt__(4)</snippet></ROW><ROW><id>12311425</id><snippet>__lt__</snippet></ROW><ROW><id>12311425</id><snippet>&lt;</snippet></ROW><ROW><id>12311615</id><snippet>QLineEdit</snippet></ROW><ROW><id>12311615</id><snippet>sectionDoubleClicked</snippet></ROW><ROW><id>12311615</id><snippet>horizontalHeader()</snippet></ROW><ROW><id>12311615</id><snippet>horizontalHeaderItem(index)</snippet></ROW><ROW><id>12311615</id><snippet>text</snippet></ROW><ROW><id>12311615</id><snippet>setText</snippet></ROW><ROW><id>12311615</id><snippet>QInputDialog.getText</snippet></ROW><ROW><id>12311615</id><snippet>import sys
from PyQt4 import QtGui

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.table = QtGui.QTableWidget(5,5)
        self.table.setHorizontalHeaderLabels(['1', '2', '3', '4', '5'])
        self.table.setVerticalHeaderLabels(['1', '2', '3', '4', '5'])
        self.table.horizontalHeader().sectionDoubleClicked.connect(self.changeHorizontalHeader)

        layout = QtGui.QHBoxLayout()
        layout.addWidget(self.table)
        self.setLayout(layout)

    def changeHorizontalHeader(self, index):
        oldHeader = self.table.horizontalHeaderItem(index).text()
        newHeader, ok = QtGui.QInputDialog.getText(self,
                                                      'Change header label for column %d' % index,
                                                      'Header:',
                                                       QtGui.QLineEdit.Normal,
                                                       oldHeader)
        if ok:
            self.table.horizontalHeaderItem(index).setText(newHeader)


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12311738</id><snippet> unicode(self.creator) +\ #will call the __unicode__ method of the User class
 ' - ' +\ # will add a dash
 self.title #will add the title which is a string
</snippet></ROW><ROW><id>12311738</id><snippet>  "%s"%some_var #will convert some_var to a string (call __str__ usually...may fall back on __unicode__ or something)
</snippet></ROW><ROW><id>12311738</id><snippet>return u"%s - %s\n%s" % (self.creator, self.title, self.created.strftime("%b %d, %I:%M %p"))
</snippet></ROW><ROW><id>12311738</id><snippet>__str__</snippet></ROW><ROW><id>12311738</id><snippet>__unicode__</snippet></ROW><ROW><id>12311738</id><snippet>\n</snippet></ROW><ROW><id>12311738</id><snippet>strftime</snippet></ROW><ROW><id>12311853</id><snippet>os.system('vap -c "mjd" {0} &gt;&gt; mjd.txt'.format(new_y[i]))
</snippet></ROW><ROW><id>12312153</id><snippet>plt.plot(x)</snippet></ROW><ROW><id>12312153</id><snippet>import random
import matplotlib.pyplot as plt
import numpy as np

x=random.sample(1000)
y=np.arange(1000)
plt.plot(x,y)
</snippet></ROW><ROW><id>12312153</id><snippet>plt.plot(x)</snippet></ROW><ROW><id>12312478</id><snippet>file2</snippet></ROW><ROW><id>12312478</id><snippet>file1</snippet></ROW><ROW><id>12312478</id><snippet>with open('file1') as f1:
    lineset = set(f1)
with open('file2') as f2:
    lineset.difference_update(f2)
with open('file3', 'w') as out:
    for line in lineset:
        out.write(line)
</snippet></ROW><ROW><id>12312478</id><snippet>file1</snippet></ROW><ROW><id>12312994</id><snippet>openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.pem
</snippet></ROW><ROW><id>12312994</id><snippet>new_client_socket, address = server_socket.accept()
secured_client_socket = ssl.wrap_socket(new_client_socket,
                                        server_side=True,
                                        certfile='cert.pem',
                                        keyfile='cert.pem',
                                        ssl_version=ssl.PROTOCOL_TLSv1)
</snippet></ROW><ROW><id>12312994</id><snippet>unsecured_client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket = ssl.wrap_socket(unsecured_client_socket,
                                ca_certs='cert.pem',
                                cert_reqs=ssl.CERT_REQUIRED,
                                ssl_version=ssl.PROTOCOL_TLSv1)
</snippet></ROW><ROW><id>12313215</id><snippet>mysqldump</snippet></ROW><ROW><id>12313215</id><snippet>mysqldump --user=&lt;username&gt; --password=&lt;password&gt; --host=&lt;server 1 hostname&gt; --port=&lt;port&gt; --add-drop-database &lt;database name&gt; &gt; dump.sql
</snippet></ROW><ROW><id>12313215</id><snippet>&lt;username&gt;</snippet></ROW><ROW><id>12313215</id><snippet>&lt;password&gt;</snippet></ROW><ROW><id>12313215</id><snippet>&lt;port&gt;</snippet></ROW><ROW><id>12313215</id><snippet>&lt;server 1 hostname&gt;</snippet></ROW><ROW><id>12313215</id><snippet>dump.sql</snippet></ROW><ROW><id>12313215</id><snippet>mysql --user=&lt;username&gt; --password=&lt;password&gt; --host=&lt;server 2 hostname&gt; --port=&lt;port&gt; &lt;database name&gt; &lt; dump.sql
</snippet></ROW><ROW><id>12313215</id><snippet>&lt;username&gt;</snippet></ROW><ROW><id>12313215</id><snippet>&lt;password&gt;</snippet></ROW><ROW><id>12313215</id><snippet>&lt;port&gt;</snippet></ROW><ROW><id>12313215</id><snippet>&lt;server 2 hostname&gt;</snippet></ROW><ROW><id>12313215</id><snippet>dump.sql</snippet></ROW><ROW><id>12313371</id><snippet>var data = {'packed_arg':get_form_args(); } 
</snippet></ROW><ROW><id>12313371</id><snippet>get_form_args()</snippet></ROW><ROW><id>12313371</id><snippet>var data = {};
var names_to_pack = ['packed1', 'packed2']
$(form).find('input, select').each(function (i, x) {
    var name = $(x).attr('name')
    if(names_to_pack.indexOf(name) != -1) { 
        if(!data.packed) {
            data.packed = {};  
        }
        data['packed'][name] = $(x).val(); 
    } else { 
        data[name] = $(x).val(); 
    }
});
$.post('/', data); 
</snippet></ROW><ROW><id>12313371</id><snippet>raw_packed = self.get_argument('packed_arg', None)
packed = {}
if raw_packed: 
    packed = tornado.escape.json_decode(raw_packed)
arg1 = packed.get('arg1')
arg2 = packed.get('arg2')
</snippet></ROW><ROW><id>12313371</id><snippet>self.request.arguments</snippet></ROW><ROW><id>12313534</id><snippet>cond ? iftrue : iffalse</snippet></ROW><ROW><id>12313534</id><snippet>iftrue if cond else iffalse</snippet></ROW><ROW><id>12313534</id><snippet>args = args[1:] if filterflag else args</snippet></ROW><ROW><id>12313548</id><snippet>import urllib.request

your_url = "http://stackoverflow.com/"   # for example

opener = urllib.request.FancyURLopener({})
f = opener.open( your_url )
vr = f.read()
vr = vr.decode()
print( vr )
</snippet></ROW><ROW><id>12313548</id><snippet>import re

re_flags = ( re.MULTILINE | re.IGNORECASE | re.UNICODE )
m = re.search( r"&lt;div&gt;\s*(\d*)\s*&lt;/div&gt;" , vr , re_flags )
if m :
    print( m.groups()[0] )
</snippet></ROW><ROW><id>12313683</id><snippet>class CustomCourseWidget(forms.Select):
    #http://djangosnippets.org/snippets/200/
    def render(self, name, value, attrs=None, choices=()):
        from django.utils.html import escape
        from django.utils.encoding import smart_unicode
        from django.forms.util import flatatt

        if value is None:
            value = ''
        final_attrs = self.build_attrs(attrs, name=name)
        output = [u'&lt;select%s&gt;' % flatatt(final_attrs)]
        output.append(u'&lt;option value=""&gt;&lt;/option&gt;') # Empty line for default text
        str_value = smart_unicode(value)
        optgroup_open = False
        for group in self.choices:
            option_value = smart_unicode(group[0])
            option_label = smart_unicode(group[1])
            if not "&gt;" in option_label and optgroup_open == True:
                output.append(u'&lt;/optgroup&gt;')
                optgroup_open = False
            if not "&gt;" in option_label and optgroup_open == False:
                output.append(u'&lt;optgroup label="%s"&gt;' % escape(option_label))
                optgroup_open = True
            if " &gt; " in option_label:
                #optgroup_open = True
                selected_html = (option_value == str_value) and u' selected="selected"' or ''
                output.append(u'&lt;option value="%s"%s&gt;%s&lt;/option&gt;' % (escape(option_value), selected_html, escape(option_label.split(" &gt; ")[1])))

        output.append(u'&lt;/select&gt;')
        return mark_safe(u'\n'.join(output))
</snippet></ROW><ROW><id>12313923</id><snippet>/proc/PID/fd/1</snippet></ROW><ROW><id>12313923</id><snippet>import os.path
pid = os.getpid() # Replace your PID here - writing to your own process is boring
with open(os.path.join('/proc', str(pid), 'fd', '1'), 'a') as stdin:
  stdin.write('Hello there\n')
</snippet></ROW><ROW><id>12313963</id><snippet>item_id = Column(Integer, ForeignKey('items.id', onupdate='CASCADE', ondelete='CASCADE'))
item = relationship(Items, backref='attributes')
</snippet></ROW><ROW><id>12313963</id><snippet>rs = mySession.query(Items)
firstItem = rs.first()
for attribute in firstItem.attributes:
   print attribute
</snippet></ROW><ROW><id>12313963</id><snippet>rs = mySession.query(Items).join(Items.attributes).filter(ItemAttribute.name=='somethingSpecial')
</snippet></ROW><ROW><id>12313963</id><snippet>item = relationship(ITEM, backref='attribute', uselist=False)
</snippet></ROW><ROW><id>12314651</id><snippet>for row in csv_readerf:
   ....
   for rowP in csv_readern:
       # will only work in the first iteration of the outer loop
       # since the csv reader hits eof
       ...
</snippet></ROW><ROW><id>12314651</id><snippet>for row in csv_readerf:
    ...
    with open(f2, 'rb') as n:
       csv_readern = csv.reader(n)
       csv_readern.next()       ....

        for rowP in csv_readern:
           # will iterate over csv_readern, but only in the first iteration of the outer loop
</snippet></ROW><ROW><id>12315002</id><snippet>% }</snippet></ROW><ROW><id>12315002</id><snippet>100</snippet></ROW><ROW><id>12315002</id><snippet>%</snippet></ROW><ROW><id>12315002</id><snippet>%%</snippet></ROW><ROW><id>12315002</id><snippet>&gt;&gt;&gt; page = """
... &lt;html&gt;
...     &lt;style type="text/css"&gt;
...       html { height: 100%% }
...       body { height: 100%%; margin: 0; padding: 0 }
...       #map_canvas { height: 100%% }
...     &lt;/style&gt;
...     %(say)s
... &lt;/html&gt;
...     """
&gt;&gt;&gt; page % dict(say='foo')
'\n&lt;html&gt;\n    &lt;style type="text/css"&gt;\n      html { height: 100% }\n      body { height: 100%; margin: 0; padding: 0 }\n      #map_canvas { height: 100% }\n    &lt;/style&gt;\n    foo\n&lt;/html&gt;\n    '
</snippet></ROW><ROW><id>12315002</id><snippet>.format()</snippet></ROW><ROW><id>12315002</id><snippet>{ height: 100% }</snippet></ROW><ROW><id>12315002</id><snippet>{{ height: 100% }}</snippet></ROW><ROW><id>12315034</id><snippet>AdditiveChi2Sampler</snippet></ROW><ROW><id>12315034</id><snippet>fit</snippet></ROW><ROW><id>12315040</id><snippet>{0:""}</snippet></ROW><ROW><id>12315485</id><snippet>class Bar(Foo):
    def __init__(self):
        self.Meta = None  # Set a new instance variable with the same name
        super(Bar, self).__init__()
</snippet></ROW><ROW><id>12315485</id><snippet>class Bar(Foo):
    Meta = None

    def __init__(self):
        # Meta is None for *all* instances of Bar.
        super(Bar, self).__init__()
</snippet></ROW><ROW><id>12315627</id><snippet>with</snippet></ROW><ROW><id>12315627</id><snippet>dict</snippet></ROW><ROW><id>12315627</id><snippet>surfer_scores</snippet></ROW><ROW><id>12315627</id><snippet>for surfer, score</snippet></ROW><ROW><id>12315627</id><snippet>with open('py score.txt') as fin:
    surfer_scores = dict(line.split() for line in fin)

for surfer, score in surfer_scores.iteritems():
    print('Surfer {} scored {} points'.format(surfer, score))
</snippet></ROW><ROW><id>12315748</id><snippet>.find_all()</snippet></ROW><ROW><id>12315748</id><snippet>for table in soup.find_all("table", "wikitable"):
    for row in table.find_all('tr'):
        cells = []
        for cell in row.find_all('td'):
            cells.append(cell.get_text())
        print(' | '.join(cells))
</snippet></ROW><ROW><id>12315748</id><snippet>$ aka Dollars | Richard Brooks | Warren Beatty, Goldie Hawn | Comedy, Crime | 
200 Motels | Tony Palmer, Charles Swenson | Frank Zappa, Ringo Starr, Theodore Bikel | Comedy, Musical | 
</snippet></ROW><ROW><id>12315985</id><snippet>readlines()</snippet></ROW><ROW><id>12315985</id><snippet>for words in open("hugefile.txt"):
</snippet></ROW><ROW><id>12316142</id><snippet>.sub</snippet></ROW><ROW><id>12316142</id><snippet>numbers = re.compile(r'(\d+)')

a = numbers.sub(r'\ref{\1}', a)
</snippet></ROW><ROW><id>12316142</id><snippet>\d+</snippet></ROW><ROW><id>12316142</id><snippet>\1</snippet></ROW><ROW><id>12316142</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = "hello, i am 8 years old and have 12 toys"
&gt;&gt;&gt; numbers = re.compile(r'(\d+)')
&gt;&gt;&gt; a = numbers.sub(r'\\ref{\1}', a)
&gt;&gt;&gt; print a
hello, i am \ref{8} years old and have \ref{12} toys
</snippet></ROW><ROW><id>12316335</id><snippet>__init__</snippet></ROW><ROW><id>12316335</id><snippet>__init__</snippet></ROW><ROW><id>12316335</id><snippet>class Data:
    def __init__(self):
        data.x= ...
        data.y = ....

class Test_Books(TestCase):
    def setup():
        self.data = Data()

    def test_method_1(self):
       value = self.data.x   # get the data from the variable
</snippet></ROW><ROW><id>12316674</id><snippet>$ touch index.fcgi
</snippet></ROW><ROW><id>12316674</id><snippet>killall -USR1 index.fcgi
</snippet></ROW><ROW><id>12316716</id><snippet>datetime.date</snippet></ROW><ROW><id>12316716</id><snippet>from datetime import date
import json

class DateEncoder(json.JSONEncoder):

    def default(self, obj):
        if isinstance(obj, date):
            return str(obj)
        return json.JSONEncoder.default(self, obj)
</snippet></ROW><ROW><id>12316716</id><snippet>json.dumps(_your_dict, cls=DateEncoder)
</snippet></ROW><ROW><id>12316824</id><snippet>@receiver(post_save, sender=Instance, dispatch_uid="create_instance")
def create_instance(sender, **kwargs):
    instance = kwargs['instance']
    created = kwargs['created']
    raw = kwargs['raw']
    if instance and created and not raw:
        from my_project.my_app.tasks import create_ec2_instance
        result = create_ec2_instance(instance)
        if result:
             instance.started = True
             instance.save()
</snippet></ROW><ROW><id>12316824</id><snippet>def create_ec2_instance(instace):
    # do the calls to ec2 to create the instance and get a result form it
    return the_result_from_ec2
</snippet></ROW><ROW><id>12316912</id><snippet>def changecolor(self):
  paint = QPainter(self)
  paint.setBrush(QColor(Qt.red))
  paint.drawEllipse(190,190,70,70)
  self.update()
</snippet></ROW><ROW><id>12316912</id><snippet>QPainter::begin: Widget painting can only begin as a result of a paintEvent
QPainter::setBrush: Painter not active
</snippet></ROW><ROW><id>12316912</id><snippet>import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *

class MyFrame(QWidget):
  def __init__(self, parent=None):
    QWidget.__init__(self)

    self.scene=QGraphicsScene(self)
    self.scene.setSceneRect(QRectF(0,0,245,245))
    self.bt=QPushButton("Press",self)
    self.bt.setGeometry(QRect(450, 150, 90, 30))
    self.color = QColor(Qt.green)
    self.show()
    self.connect(self.bt, SIGNAL("clicked()"), self.changecolor)

  def paintEvent(self, event=None):
    paint=QPainter(self)
    paint.setPen(QPen(QColor(Qt.red),1,Qt.SolidLine))
    paint.setBrush(self.color)
    paint.drawEllipse(190,190, 70, 70)

  def changecolor(self):
    self.color = QColor(Qt.red)
    self.update()

app=QApplication(sys.argv)
f=MyFrame()
f.show()
app.exec_()
</snippet></ROW><ROW><id>12316962</id><snippet>&gt;&gt;&gt; from urllib2 import unquote
&gt;&gt;&gt; bytesquoted = u'Ã¥%8fÂ°Ã¥%8d%97 Ã¨Â¦ÂªÃ¥Â­%90Ã©Â¤%90Ã¥Â»Â³'.encode('latin1')
&gt;&gt;&gt; unquoted = unquote(bytesquoted)
&gt;&gt;&gt; print unquoted.decode('utf8')
å°å è¦ªå­é¤å»³
</snippet></ROW><ROW><id>12317169</id><snippet>for el in args_list:
    globals()[el] = __import__(el, globals(), locals())
</snippet></ROW><ROW><id>12317323</id><snippet>if entry.mygroup == mygroup:
    dic[mygroup].append(entry)
</snippet></ROW><ROW><id>12317323</id><snippet>append</snippet></ROW><ROW><id>12317323</id><snippet>append</snippet></ROW><ROW><id>12317323</id><snippet>dic[mygroup]</snippet></ROW><ROW><id>12317323</id><snippet>None</snippet></ROW><ROW><id>12317423</id><snippet>number = ''.join([ n for n in number if n.isdigit() ])
</snippet></ROW><ROW><id>12317423</id><snippet>number = '(' + number[:3] + ') ' + number[3:6] + '-' + number[6:10]
</snippet></ROW><ROW><id>12317445</id><snippet>+---+--------------+---+---+
|        Title         | + |
+---+--------------+---+---+
| = | Label widget | &gt; | - |
+---+--------------+---+---+
| = | Label widget | &gt; | - |
+---+--------------+---+---+
| = | Label widget | &gt; | - |
+---+--------------+---+---+
</snippet></ROW><ROW><id>12317445</id><snippet>+---+--------------+---+---+---+
|             Title            |
+---+--------------+---+---+---+
| = | Label widget | &gt; | - | + |
+---+--------------+---+---+---+
| = | Label widget | &gt; | - | + |
+---+--------------+---+---+---+
| = | Label widget | &gt; | - | + |
+---+--------------+---+---+---+
</snippet></ROW><ROW><id>12317530</id><snippet>hex_data = "FF"
number = int("0x" + hex_data, 16) 
print '%03d' % number # either this
print '{:03d}'.format(number) # or this (Python &gt;= 2.6)
</snippet></ROW><ROW><id>12317574</id><snippet>print len(urlopen(url).read())
</snippet></ROW><ROW><id>12317574</id><snippet>&gt;&gt;&gt; result = urllib2.urlopen('http://www.spiegel.de')
&gt;&gt;&gt; result.headers['content-length']
'181291'
</snippet></ROW><ROW><id>12318124</id><snippet>@register.filter(is_safe=True)
@stringfilter
def lowerfirst_if_starts_with_v(value):
    """Lowercase the first character of the value."""
    return value and value[0] =='v' and value[0].lower() + value[1:]
</snippet></ROW><ROW><id>12318124</id><snippet>{%load my_special_thing%}
</snippet></ROW><ROW><id>12318124</id><snippet>&lt;th scope="row"&gt;&lt;a href="{{ model.admin_url }}"&gt; \
{{ model.name|lowerfirst_if_starts_with_v }}&lt;/a&gt;&lt;/th&gt;
</snippet></ROW><ROW><id>12318259</id><snippet>while</snippet></ROW><ROW><id>12318434</id><snippet>&gt;&gt;&gt; repr('subnet {{ MY_SUBNET }} netmask {{ MY_NETMASKÂ }} {}')
"'subnet {{ MY_SUBNET }} netmask {{ MY_NETMASK\\xc2\\xa0}} {}'"
                                              ^^^^^^^^^^
</snippet></ROW><ROW><id>12318574</id><snippet>multiprocessing</snippet></ROW><ROW><id>12318574</id><snippet>@celery.task
def mytask(data):

    ... do a lot of work ...
</snippet></ROW><ROW><id>12318574</id><snippet>mytask(data)</snippet></ROW><ROW><id>12318574</id><snippet>delay</snippet></ROW><ROW><id>12318574</id><snippet>result = mytask.delay(mydata)
</snippet></ROW><ROW><id>12318574</id><snippet>ready</snippet></ROW><ROW><id>12318574</id><snippet>result.ready()
</snippet></ROW><ROW><id>12318574</id><snippet>jsonify</snippet></ROW><ROW><id>12319034</id><snippet>filter</snippet></ROW><ROW><id>12319034</id><snippet>map</snippet></ROW><ROW><id>12319034</id><snippet>zip</snippet></ROW><ROW><id>12319034</id><snippet>filter(func,data) #python 2.x
</snippet></ROW><ROW><id>12319034</id><snippet>list(filter(func,data)) #python 3.x
</snippet></ROW><ROW><id>12319034</id><snippet>( x for x in data if func(x) ) 
</snippet></ROW><ROW><id>12319034</id><snippet>[ x for x in data if func(x) ]
</snippet></ROW><ROW><id>12319322</id><snippet>mylist * 2
</snippet></ROW><ROW><id>12319322</id><snippet>mylist + mylist #resulting list has 2 references to each element in mylist 
                #stored as:
                #[mylist[0],mylist[1],...,mylist[0],mylist[1],...]
                #   ^ ----------------------^
                #   reference the same object
</snippet></ROW><ROW><id>12319322</id><snippet>lst_of_arrays = [ np.zeros(1) for _ in range(N) ]
</snippet></ROW><ROW><id>12319322</id><snippet>X,Y = ( np.zeros(1) for _ in range(2) )
X,Y,Z = ( np.zeros(1) for _ in range(3) )
W,X,Y,Z = ( np.zeros(1) for _ in range(4) )
...
</snippet></ROW><ROW><id>12319322</id><snippet>xrange</snippet></ROW><ROW><id>12319322</id><snippet>range</snippet></ROW><ROW><id>12319565</id><snippet>setParseAction</snippet></ROW><ROW><id>12319565</id><snippet>lambda s, l, t: int(s)</snippet></ROW><ROW><id>12319766</id><snippet>'</snippet></ROW><ROW><id>12319783</id><snippet>/</snippet></ROW><ROW><id>12319783</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>12319783</id><snippet>2. / 3.
</snippet></ROW><ROW><id>12319783</id><snippet>x / float(y)
</snippet></ROW><ROW><id>12319837</id><snippet>enumerate</snippet></ROW><ROW><id>12319837</id><snippet>for idx,x in enumerate(people):
    view.setItem(idx, 0, QtGui.QTableWidgetItem(name[x][:-1][1:]))
</snippet></ROW><ROW><id>12320039</id><snippet>
a = ui.db.view(docname, startkey=["12","06","04"], endkey=["12","06","06"])
</snippet></ROW><ROW><id>12320039</id><snippet>
mylocation:5984/small/_design/Common/_view/date?startkey=["12","06","04"]&amp;endkey=["12","06","06"]
</snippet></ROW><ROW><id>12320333</id><snippet>import numpy as np

#lats x lons
a2d=np.arange(20).reshape( (4,5) )
print a2d

lats=np.arange(4)
lats2d=np.ones(5)*lats[:,None]
yi=[1,3]
nlats=np.sum(np.bitwise_and(lats&gt;=np.min(yi),lats&lt;=np.max(yi)))

lons=np.arange(5)
lons2d=np.ones(4)[:,None]*lons
xi=[1,2]
nlons=np.sum(np.bitwise_and(lons&gt;=np.min(xi),lons&lt;=np.max(xi)))


#slice= lats2d&gt;=1 &amp; lats2d&lt;=2 &amp; lons2d&gt;=1 &amp; lons2d&lt;=2
s1=np.bitwise_and(lats2d&gt;=np.min(yi),lats2d&lt;=np.max(yi))
s2=np.bitwise_and(lons2d&gt;=np.min(xi),lons2d&lt;=np.max(xi))
slice=np.bitwise_and(s1,s2)
print slice
slice=np.where(slice)
print a2d[slice].reshape( (nlats,nlons) )

import matplotlib.mlab as mlab

print mlab.griddata(lats2d[slice],lons2d[slice],a2d[slice],
#              np.array([1.3,2.1,2.9]),np.array([1.1,1.9]))
            np.array([1,2,3]),np.array([1,2]))
</snippet></ROW><ROW><id>12320352</id><snippet>Event</snippet></ROW><ROW><id>12320352</id><snippet>import threading

def or_set(self):
    self._set()
    self.changed()

def or_clear(self):
    self._clear()
    self.changed()

def orify(e, changed_callback):
    e._set = e.set
    e._clear = e.clear
    e.changed = changed_callback
    e.set = lambda: or_set(e)
    e.clear = lambda: or_clear(e)

def OrEvent(*events):
    or_event = threading.Event()
    def changed():
        bools = [e.is_set() for e in events]
        if any(bools):
            or_event.set()
        else:
            or_event.clear()
    for e in events:
        orify(e, changed)
    changed()
    return or_event
</snippet></ROW><ROW><id>12320352</id><snippet>def wait_on(name, e):
    print "Waiting on %s..." % (name,)
    e.wait()
    print "%s fired!" % (name,)

def test():
    import time

    e1 = threading.Event()
    e2 = threading.Event()

    or_e = OrEvent(e1, e2)

    threading.Thread(target=wait_on, args=('e1', e1)).start()
    time.sleep(0.05)
    threading.Thread(target=wait_on, args=('e2', e2)).start()
    time.sleep(0.05)
    threading.Thread(target=wait_on, args=('or_e', or_e)).start()
    time.sleep(0.05)

    print "Firing e1 in 2 seconds..."
    time.sleep(2)
    e1.set()
    time.sleep(0.05)

    print "Firing e2 in 2 seconds..."
    time.sleep(2)
    e2.set()
    time.sleep(0.05)
</snippet></ROW><ROW><id>12320352</id><snippet>Waiting on e1...
Waiting on e2...
Waiting on or_e...
Firing e1 in 2 seconds...
e1 fired!or_e fired!

Firing e2 in 2 seconds...
e2 fired!
</snippet></ROW><ROW><id>12320352</id><snippet>wait_for_either</snippet></ROW><ROW><id>12320352</id><snippet>or_event</snippet></ROW><ROW><id>12320352</id><snippet>or_event</snippet></ROW><ROW><id>12320352</id><snippet>def wait_for_either(e1, e2):
    OrEvent(e1, e2).wait()
</snippet></ROW><ROW><id>12320403</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12320403</id><snippet>dtype=float</snippet></ROW><ROW><id>12320403</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12320403</id><snippet>dtype=None</snippet></ROW><ROW><id>12320403</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; test = "a,1,2\nb,3,4"
&gt;&gt;&gt; a = np.genfromtxt(StringIO(test), delimiter=",", dtype=None)
&gt;&gt;&gt; print a
array([('a',1,2),('b',3,4)], dtype=[('f0', '|S1'),('f1', '&lt;i8'),('f2', '&lt;i8')])
</snippet></ROW><ROW><id>12320403</id><snippet>a['f0']</snippet></ROW><ROW><id>12320403</id><snippet>dtype=None</snippet></ROW><ROW><id>12320403</id><snippet>dtype</snippet></ROW><ROW><id>12320403</id><snippet>&gt;&gt;&gt; np.genfromtxt(StringIO(test), delimiter=",", dtype=("|S10", int, float))
array([('a', 1, 2.0), ('b', 3, 4.0)], 
      dtype=[('f0', '|S10'), ('f1', '&lt;i8'), ('f2', '&lt;f8')])
</snippet></ROW><ROW><id>12320403</id><snippet>dtype</snippet></ROW><ROW><id>12320403</id><snippet>dtype=None</snippet></ROW><ROW><id>12320403</id><snippet>dtype=None</snippet></ROW><ROW><id>12320403</id><snippet>dtype</snippet></ROW><ROW><id>12320403</id><snippet>dtype=None</snippet></ROW><ROW><id>12320482</id><snippet>import matplotlib.pyplot as plt
from pylab import *
import numpy as np

x = np.linspace(0, 2*np.pi, 400)
y = np.sin(x**2)

subplots_adjust(hspace=0.000)
number_of_subplots=3

for i,v in enumerate(xrange(number_of_subplots)):
    v = v+1
    ax1 = subplot(number_of_subplots,1,v)
    ax1.plot(x,y)

plt.show()
</snippet></ROW><ROW><id>12320482</id><snippet>subplot</snippet></ROW><ROW><id>12320482</id><snippet>number_of_plots</snippet></ROW><ROW><id>12320482</id><snippet>subplot</snippet></ROW><ROW><id>12320482</id><snippet>3,1,1</snippet></ROW><ROW><id>12320482</id><snippet>subplot</snippet></ROW><ROW><id>12320482</id><snippet>3,1,2</snippet></ROW><ROW><id>12320708</id><snippet>def compute_something(stopped):
    while not stopped:
        # continue computations

stopped = []
threading.Timer(3600, stopped.append, args=[True]).start()
compute_something(stopped)
</snippet></ROW><ROW><id>12321005</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; megalist = [['a', 'b'], ['a', 'd'], ['b', 'd'],['b', 'f'], ['r', 's'], ['t', 'r']]
&gt;&gt;&gt; G = nx.Graph()
&gt;&gt;&gt; G.add_edges_from(megalist)
</snippet></ROW><ROW><id>12321005</id><snippet>&gt;&gt;&gt; subgraphs = nx.connected_components(G)
&gt;&gt;&gt; subgraphs
[['a', 'b', 'd', 'f'], ['s', 'r', 't']]
&gt;&gt;&gt; [G.edges(subgraph) for subgraph in subgraphs]
[[('a', 'b'), ('a', 'd'), ('b', 'd'), ('b', 'f')], [('s', 'r'), ('r', 't')]]
</snippet></ROW><ROW><id>12321137</id><snippet>new.example.com</snippet></ROW><ROW><id>12321137</id><snippet>www.example.com/django -&gt; new.example.com
www.example.com/software -&gt; new.example.com/software
www.example.com/newsletter -&gt; new.example.com/newsletter
</snippet></ROW><ROW><id>12321137</id><snippet>ServerName</snippet></ROW><ROW><id>12321306</id><snippet>import numpy as np

import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

def plot_point_cov(points, nstd=2, ax=None, **kwargs):
    """
    Plots an `nstd` sigma ellipse based on the mean and covariance of a point
    "cloud" (points, an Nx2 array).

    Parameters
    ----------
        points : An Nx2 array of the data points.
        nstd : The radius of the ellipse in numbers of standard deviations.
            Defaults to 2 standard deviations.
        ax : The axis that the ellipse will be plotted on. Defaults to the 
            current axis.
        Additional keyword arguments are pass on to the ellipse patch.

    Returns
    -------
        A matplotlib ellipse artist
    """
    pos = points.mean(axis=0)
    cov = np.cov(points, rowvar=False)
    return plot_cov_ellipse(cov, pos, nstd, ax, **kwargs)

def plot_cov_ellipse(cov, pos, nstd=2, ax=None, **kwargs):
    """
    Plots an `nstd` sigma error ellipse based on the specified covariance
    matrix (`cov`). Additional keyword arguments are passed on to the 
    ellipse patch artist.

    Parameters
    ----------
        cov : The 2x2 covariance matrix to base the ellipse on
        pos : The location of the center of the ellipse. Expects a 2-element
            sequence of [x0, y0].
        nstd : The radius of the ellipse in numbers of standard deviations.
            Defaults to 2 standard deviations.
        ax : The axis that the ellipse will be plotted on. Defaults to the 
            current axis.
        Additional keyword arguments are pass on to the ellipse patch.

    Returns
    -------
        A matplotlib ellipse artist
    """
    def eigsorted(cov):
        vals, vecs = np.linalg.eigh(cov)
        order = vals.argsort()[::-1]
        return vals[order], vecs[:,order]

    if ax is None:
        ax = plt.gca()

    vals, vecs = eigsorted(cov)
    theta = np.degrees(np.arctan2(*vecs[:,0][::-1]))

    # Width and height are "full" widths, not radius
    width, height = 2 * nstd * np.sqrt(vals)
    ellip = Ellipse(xy=pos, width=width, height=height, angle=theta, **kwargs)

    ax.add_artist(ellip)
    return ellip

if __name__ == '__main__':
    #-- Example usage -----------------------
    # Generate some random, correlated data
    points = np.random.multivariate_normal(
            mean=(1,1), cov=[[0.4, 9],[9, 10]], size=1000
            )
    # Plot the raw points...
    x, y = points.T
    plt.plot(x, y, 'ro')

    # Plot a transparent 3 standard deviation covariance ellipse
    plot_point_cov(points, nstd=3, alpha=0.5, color='green')

    plt.show()
</snippet></ROW><ROW><id>12321377</id><snippet>bytes</snippet></ROW><ROW><id>12321377</id><snippet>&gt;&gt;&gt; bytes([129, 19])
'[129, 19]'
</snippet></ROW><ROW><id>12321377</id><snippet>&gt;&gt;&gt; bytes([129, 19])
b'\x81\x13'
</snippet></ROW><ROW><id>12321377</id><snippet>client_socket.send( "".join( [chr(c) for c in formatted_bytes] )
</snippet></ROW><ROW><id>12321383</id><snippet>bytes</snippet></ROW><ROW><id>12321383</id><snippet>&gt;&gt;&gt; bytes([129, 19])
'[129, 19]'
</snippet></ROW><ROW><id>12321383</id><snippet>&gt;&gt;&gt; bytes([129, 19])
b'\x81\x13'
</snippet></ROW><ROW><id>12321383</id><snippet>client_socket.send( "".join( [chr(c) for c in formatted_bytes] )
</snippet></ROW><ROW><id>12321664</id><snippet>self.db.get</snippet></ROW><ROW><id>12321664</id><snippet>self.db.query</snippet></ROW><ROW><id>12321664</id><snippet>class NetworkStatusHandler(BaseHandler):
# Requires authentication 
@tornado.web.authenticated
def get(self, nid):

    # Retrieve the current user 
    usr = self.get_current_user()
    usr_id = usr['id']

    row = self.db.get("SELECT n.perm FROM nets_permissions as n \
                          WHERE n.network_id=%s AND n.user_id=%s", nid, int(usr_id))
    perm = row['n.perm']

    # Check whether the user has access to the network 
    perms = self.check_network_access(nid, perm)
    net = self.get_network(nid)
    # Render the networks page
    self.render("networkstatus.html", net=net)
</snippet></ROW><ROW><id>12322158</id><snippet>.append()</snippet></ROW><ROW><id>12322158</id><snippet>list index out of range</snippet></ROW><ROW><id>12322158</id><snippet>__getattr__</snippet></ROW><ROW><id>12322158</id><snippet>lst[index]</snippet></ROW><ROW><id>12322314</id><snippet>matplotlib</snippet></ROW><ROW><id>12322314</id><snippet>plotfile</snippet></ROW><ROW><id>12322314</id><snippet>import matplotlib.pyplot as plt 

plt.plotfile('data.dat', delimiter=' ', cols=(0, 1), 
             names=('col1', 'col2'), marker='o')
plt.show()
</snippet></ROW><ROW><id>12322314</id><snippet>gnuplot</snippet></ROW><ROW><id>12322314</id><snippet>$ ipython --pylab
...
...
In [1]: plt.plotfile('data.dat', delimiter=' ', cols=(0, 1), 
...                  names=('col1', 'col2'), marker='o')
</snippet></ROW><ROW><id>12322476</id><snippet>sep = re.compile('[\s]+')
   for line in high.stdout:
       if line:
           line = line.strip()
           count += 1
           if count &gt; 3:
               c = sep.split(line)
               print c[4]
</snippet></ROW><ROW><id>12322594</id><snippet>http://www.w3.org/2001/XMLSchema-instance</snippet></ROW><ROW><id>12322594</id><snippet>XMLSchemaNamespace = '{http://www.w3.org/2001/XMLSchema-instance}'
document = lxml.parse(xmlfile)
schemaLink = document.get(XMLSchemaNamespace + 'schemaLocation')
if schemaLink is None:
    schemaLink = document.get(XMLSchemaNamespace + 'noNamespaceSchemaLocation')
</snippet></ROW><ROW><id>12322643</id><snippet>g</snippet></ROW><ROW><id>12322643</id><snippet>threading.local()</snippet></ROW><ROW><id>12322643</id><snippet>g.db</snippet></ROW><ROW><id>12322987</id><snippet>postid</snippet></ROW><ROW><id>12322987</id><snippet>Comment</snippet></ROW><ROW><id>12322987</id><snippet>class Post(db.Model):
  desc = db.StringProperty()

class Comment(db.Model):
  desc = db.TextProperty()
</snippet></ROW><ROW><id>12322987</id><snippet>post_db = Post(desc='Hello World')
post_db.put()

comment_db = Comment(parent=post_db, desc='Nice post')
comment_db.put()
</snippet></ROW><ROW><id>12322987</id><snippet>post_db</snippet></ROW><ROW><id>12322987</id><snippet>comment_dbs = Comment.all().ancestor(post_db)
</snippet></ROW><ROW><id>12323051</id><snippet>dateutil</snippet></ROW><ROW><id>12323051</id><snippet>dateutil</snippet></ROW><ROW><id>12323051</id><snippet>dateutil</snippet></ROW><ROW><id>12323051</id><snippet>pip install -U python-dateutil==1.5.0
</snippet></ROW><ROW><id>12323380</id><snippet>settings.py</snippet></ROW><ROW><id>12323380</id><snippet>DATABASES</snippet></ROW><ROW><id>12323380</id><snippet>DATABASES = {'default': dj_database_url.config(default='postgres://localhost')}
</snippet></ROW><ROW><id>12323380</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'traineeworld',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}
</snippet></ROW><ROW><id>12323380</id><snippet>HOST</snippet></ROW><ROW><id>12323380</id><snippet>psql</snippet></ROW><ROW><id>12323380</id><snippet>SHOW unix_socket_directory;
</snippet></ROW><ROW><id>12323380</id><snippet>postgresql.conf</snippet></ROW><ROW><id>12323525</id><snippet>from itertools import product
from PIL import Image, ImageDraw


def closed_regions(image, test):
    """
    Return all closed regions in image who's pixels satisfy test.
    """
    pixel = image.load()
    xs, ys = map(xrange, image.size)
    neighbors = dict((xy, set([xy])) for xy in product(xs, ys) if test(pixel[xy]))
    for a, b in neighbors:
        for cd in (a + 1, b), (a, b + 1):
            if cd in neighbors:
                neighbors[a, b].add(cd)
                neighbors[cd].add((a, b))
    seen = set()
    def component(node, neighbors=neighbors, seen=seen, see=seen.add):
        todo = set([node])
        next_todo = todo.pop
        while todo:
            node = next_todo()
            see(node)
            todo |= neighbors[node] - seen
            yield node
    return (set(component(node)) for node in neighbors if node not in seen)


def boundingbox(coordinates):
    """
    Return the bounding box that contains all coordinates.
    """
    xs, ys = zip(*coordinates)
    return min(xs), min(ys), max(xs), max(ys)


def is_black_enough(pixel):
    r, g, b = pixel
    return r &lt; 10 and g &lt; 10 and b &lt; 10


if __name__ == '__main__':

    image = Image.open('some_image.jpg')
    draw = ImageDraw.Draw(image)
    for rect in disjoint_areas(image, is_black_enough):
        draw.rectangle(boundingbox(region), outline=(255, 0, 0))
    image.show()
</snippet></ROW><ROW><id>12323525</id><snippet>disjoint_areas()</snippet></ROW><ROW><id>12323525</id><snippet>closed_regions()</snippet></ROW><ROW><id>12323525</id><snippet>from itertools import chain, product
from PIL import Image, ImageDraw


flatten = chain.from_iterable


def closed_regions(image, test):
    """
    Return all closed regions in image who's pixel satisfy test.
    """
    pixel = image.load()
    xs, ys = map(xrange, image.size)
    todo = set(xy for xy in product(xs, ys) if test(pixel[xy]))
    while todo:
        region = set()
        edge = set([todo.pop()])
        while edge:
            region |= edge
            todo -= edge
            edge = todo.intersection(
                flatten(((x - 1, y), (x, y - 1), (x + 1, y), (x, y + 1)) for x, y in edge))
        yield region

# rest like above
</snippet></ROW><ROW><id>12323525</id><snippet>from collections import defaultdict
from PIL import Image, ImageDraw


def connected_components(edges):
    """
    Given a graph represented by edges (i.e. pairs of nodes), generate its
    connected components as sets of nodes.

    Time complexity is linear with respect to the number of edges.
    """
    neighbors = defaultdict(set)
    for a, b in edges:
        neighbors[a].add(b)
        neighbors[b].add(a)
    seen = set()
    def component(node, neighbors=neighbors, seen=seen, see=seen.add):
        unseen = set([node])
        next_unseen = unseen.pop
        while unseen:
            node = next_unseen()
            see(node)
            unseen |= neighbors[node] - seen
            yield node
    return (set(component(node)) for node in neighbors if node not in seen)


def matching_pixels(image, test):
    """
    Generate all pixel coordinates where pixel satisfies test.
    """
    width, height = image.size
    pixels = image.load()
    for x in xrange(width):
        for y in xrange(height):
            if test(pixels[x, y]):
                yield x, y


def make_edges(coordinates):
    """
    Generate all pairs of neighboring pixel coordinates.
    """
    coordinates = set(coordinates)
    for x, y in coordinates:
        if (x - 1, y - 1) in coordinates:
            yield (x, y), (x - 1, y - 1)
        if (x, y - 1) in coordinates:
            yield (x, y), (x, y - 1)
        if (x + 1, y - 1) in coordinates:
            yield (x, y), (x + 1, y - 1)
        if (x - 1, y) in coordinates:
            yield (x, y), (x - 1, y)
        yield (x, y), (x, y)


def boundingbox(coordinates):
    """
    Return the bounding box of all coordinates.
    """
    xs, ys = zip(*coordinates)
    return min(xs), min(ys), max(xs), max(ys)


def disjoint_areas(image, test):
    """
    Return the bounding boxes of all non-consecutive areas
    who's pixels satisfy test.
    """
    for each in connected_components(make_edges(matching_pixels(image, test))):
        yield boundingbox(each)


def is_black_enough(pixel):
    r, g, b = pixel
    return r &lt; 10 and g &lt; 10 and b &lt; 10


if __name__ == '__main__':

    image = Image.open('some_image.jpg')
    draw = ImageDraw.Draw(image)
    for rect in disjoint_areas(image, is_black_enough):
        draw.rectangle(rect, outline=(255, 0, 0))
    image.show()
</snippet></ROW><ROW><id>12323525</id><snippet>is_black_enough()</snippet></ROW><ROW><id>12323525</id><snippet>is_black_enough()</snippet></ROW><ROW><id>12323891</id><snippet>for label in ax.get_xticklabels():
    label.set_fontproperties(ticks_font)

for label in ax.get_yticklabels():
    label.set_fontproperties(ticks_font)
</snippet></ROW><ROW><id>12323891</id><snippet>a = gca()
a.set_xticklabels(a.get_xticks(), fontProperties)
a.set_yticklabels(a.get_yticks(), fontProperties)
</snippet></ROW><ROW><id>12324189</id><snippet>yield</snippet></ROW><ROW><id>12324189</id><snippet>def foo():
    for x in range(10):
        yield (yield x)
</snippet></ROW><ROW><id>12324189</id><snippet>.send()</snippet></ROW><ROW><id>12324189</id><snippet>yield x</snippet></ROW><ROW><id>12324189</id><snippet>x</snippet></ROW><ROW><id>12324189</id><snippet>.send</snippet></ROW><ROW><id>12324189</id><snippet>def foo():
    for x in range(10):
        sent_value = (yield x)
        yield sent_value
</snippet></ROW><ROW><id>12324189</id><snippet>&gt;&gt;&gt; a = foo()
#start it off
&gt;&gt;&gt; a.next() 
0
#execution has now paused at "sent_value = ?"
#now we fill in the "?". whatever we send here will be immediately yielded.
&gt;&gt;&gt; a.send("yieldnow") 
'yieldnow'
#execution is now paused at the 'yield sent_value' expression
#as this is not assigned to anything, whatever is sent now will be lost
&gt;&gt;&gt; a.send("this is lost") 
1
#now we're back where we were at the 'yieldnow' point of the code
&gt;&gt;&gt; a.send("yieldnow") 
'yieldnow'
#etc, the loop continues
&gt;&gt;&gt; a.send("this is lost")
2
&gt;&gt;&gt; a.send("yieldnow")
'yieldnow'
&gt;&gt;&gt; a.send("this is lost")
3
&gt;&gt;&gt; a.send("yieldnow")
'yieldnow'
</snippet></ROW><ROW><id>12324189</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>12324189</id><snippet>.send</snippet></ROW><ROW><id>12324212</id><snippet>MinValueValidator</snippet></ROW><ROW><id>12324212</id><snippet>validators=[MinValueValidator(datetime(1900, 1, 1, 0, 0))]
</snippet></ROW><ROW><id>12324296</id><snippet>file == (srcInst + ".log")</snippet></ROW><ROW><id>12324296</id><snippet>os.walk</snippet></ROW><ROW><id>12324296</id><snippet>found = False
for folder, subfolders, files in os.walk(w2k3chk):
    for file in files:
        if file == srvrInst + ".log":
            found = True
            print 'The Backup for %s on %s still running' % (srvrInst, srvrName)
        elif file == (srvrInst + ".ok"):
            found = True
            print 'Completed Successfully'
        elif file == (srvrInst + ".err"):
            found = True
            print 'Backup failed'
if not found:
    print 'No file found'
</snippet></ROW><ROW><id>12324296</id><snippet>try:
    folder, subfolders, files = next(os.walk(w2k3chk)):
    file = files[0]
    if file == srvrInst + ".log":
        print 'The Backup for %s on %s still running' % (srvrInst, srvrName)
    elif file == (srvrInst + ".ok"):
        print 'Completed Successfully'
    elif file == (srvrInst + ".err"):
        print 'Backup failed'
    else:
        print 'Unknown file found: %s' % (file)
except (StopIteration, IndexError): # exceptions if folder or file doesn't exist
    print 'No file found'
</snippet></ROW><ROW><id>12324315</id><snippet>&gt;&gt;&gt; timeit.timeit("f()", "g = (lambda: 1); f = lambda: g()")
0.2858083918486847
&gt;&gt;&gt; timeit.timeit("f()", "f = lambda: 1")
0.13749289364989004
</snippet></ROW><ROW><id>12324315</id><snippet>_re</snippet></ROW><ROW><id>12324315</id><snippet>self</snippet></ROW><ROW><id>12324315</id><snippet>match</snippet></ROW><ROW><id>12324315</id><snippet>_re</snippet></ROW><ROW><id>12324315</id><snippet>timeit</snippet></ROW><ROW><id>12324384</id><snippet>extent</snippet></ROW><ROW><id>12324384</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# Random points between 50000 and 51000
x, y = 1000 * np.random.random((2, 10)) + 50000

# A 10x10 "image"...
image = np.arange(100).reshape((10,10))

# In a lot of cases, image data will be "flipped" vertically, so you may need 
# use the `origin` kwarg, as well (or just swap the ymin and ymax ordering).
plt.imshow(image, extent=[x.min(), x.max(), y.min(), y.max()])
plt.plot(x, y, 'ro')

plt.show()
</snippet></ROW><ROW><id>12324545</id><snippet>import heapq
heap = []
for row in rows:
    heapq.heappush(heap, (row[1], row))
</snippet></ROW><ROW><id>12324545</id><snippet>new_heap = list(heap)
while new_heap:
    _, row = heapq.heappop(new_heap)
    print row
</snippet></ROW><ROW><id>12324545</id><snippet>O(lg N)</snippet></ROW><ROW><id>12324545</id><snippet>O(N lg N)</snippet></ROW><ROW><id>12324545</id><snippet>O(lg N)</snippet></ROW><ROW><id>12324545</id><snippet>O(N lg N)</snippet></ROW><ROW><id>12324545</id><snippet>rows.sort(key=lambda row: row[1])</snippet></ROW><ROW><id>12324545</id><snippet>.sort()</snippet></ROW><ROW><id>12324545</id><snippet>bisect</snippet></ROW><ROW><id>12324545</id><snippet>O(N)</snippet></ROW><ROW><id>12324545</id><snippet>O(N lg N)</snippet></ROW><ROW><id>12324545</id><snippet>O((N lg N) * N) = O(N**2)</snippet></ROW><ROW><id>12324600</id><snippet>import numpy
from scipy import signal

data_length = 8192

a = numpy.random.randn(data_length)
b = numpy.zeros(data_length * 2)

b[data_length/2:data_length/2+data_length] = a # This works for data_length being even

# Do an array flipped convolution, which is a correlation.
c = signal.fftconvolve(b, a[::-1], mode='valid') 

# Use numpy.correlate for comparison
d = numpy.correlate(a, a, mode='same')

# c will be exactly the same as d, except for the last sample (which 
# completes the symmetry)
numpy.allclose(c[:-1], d) # Should be True
</snippet></ROW><ROW><id>12324600</id><snippet>In [12]: timeit b[data_length/2:data_length/2+data_length] = a; c = signal.fftconvolve(b, a[::-1], mode='valid')
100 loops, best of 3: 4.67 ms per loop

In [13]: timeit d = numpy.correlate(a, a, mode='same')
10 loops, best of 3: 69.9 ms per loop
</snippet></ROW><ROW><id>12324600</id><snippet>data_length</snippet></ROW><ROW><id>12324678</id><snippet>python setup.py --help
</snippet></ROW><ROW><id>12324678</id><snippet>python setup.py install
</snippet></ROW><ROW><id>12324787</id><snippet>objectify.Element</snippet></ROW><ROW><id>12324787</id><snippet>root.customers</snippet></ROW><ROW><id>12324787</id><snippet>phone = objectify.Element('phone')
phone.type = data_dict['PRIMARY PHONE1']
phone.number = data_dict['PRIMARY PHONE TYPE 1']
root.customers.customer.append(phone)

phone = objectify.Element('phone')
phone.type = data_dict['PRIMARY PHONE2']
phone.number = data_dict['PRIMARY PHONE TYPE 2']
root.customers.customer.append(phone)
</snippet></ROW><ROW><id>12324787</id><snippet>objectify.deannotate(root, xsi_nil=True, cleanup_namespaces=True)</snippet></ROW><ROW><id>12324787</id><snippet>objectify.deannotate</snippet></ROW><ROW><id>12324787</id><snippet>cleanup_namespaces</snippet></ROW><ROW><id>12324787</id><snippet>from lxml import etree
# ...
objectify.deannotate(root, xsi_nil=True)
etree.cleanup_namespaces(root)
</snippet></ROW><ROW><id>12325130</id><snippet>#First we need to access the module that lets us connect to Excel
import win32com.client 

# Next we want to create a variable that represents Excel
app = win32com.client.Dispatch("Excel.Application")   

# Lastly we will assume that the workbook is active and get the first sheet
wbk = app.ActiveWorkbook
sheet = wbk.Sheets(1)
</snippet></ROW><ROW><id>12325130</id><snippet>     A    
1   "d"
2   "c"
3   "b"
4   "a"
5   "c"
</snippet></ROW><ROW><id>12325130</id><snippet>sheet.Rows(1).Delete()
</snippet></ROW><ROW><id>12325130</id><snippet>    A
1   "c"
2   "b"
3   "a"
4   "c"
</snippet></ROW><ROW><id>12325130</id><snippet>rang = sheet.Range("A1","A4")
sheet.Sort.SetRange(rang)
sheet.Sort.Apply()
</snippet></ROW><ROW><id>12325130</id><snippet>    A
1   "a"
2   "b"
3   "c"
4   "c"
</snippet></ROW><ROW><id>12325130</id><snippet>#Get a list of all Values using Range
valLstRange = [val[0] for val in sheet.Range("A1","A4").Value]

#Get a list of all Values using Cells
valLstCells = [sheet.Cells(row,1).Value for row in range(1,4)]

#valLstCells and valLstRange both = ["a","b","c","c"]
</snippet></ROW><ROW><id>12325130</id><snippet>wbk.SaveAs("C:/savedWorkbook.xlsx")
</snippet></ROW><ROW><id>12325135</id><snippet>In [23]: df = pd.DataFrame({'A' : ['a1', 'a1', 'a2', 'a2'],
                            'B' : ['b11', 'b12', 'b21', 'b22'],
                            'C' : ['c11', 'c12', 'c21', 'c22']})

In [24]: grpA  = df.groupby('A')
In [25]: a1 = grpA.get_group('a1')
</snippet></ROW><ROW><id>12325135</id><snippet>In [26]: a1['B']  # or a1.B
Out[26]: 
0    b11
1    b12
Name: B
</snippet></ROW><ROW><id>12325135</id><snippet>In [39]: import numpy as np

In [40]: np.array(a1.B)
Out[40]: array([b11, b12], dtype=object)
</snippet></ROW><ROW><id>12325135</id><snippet>In [41]: grpdA.get_group('a1').B.tolist()  # leave off `.tolist()` to get a series
Out[41]: ['b11', 'b12']
</snippet></ROW><ROW><id>12325257</id><snippet>delete</snippet></ROW><ROW><id>12325257</id><snippet>id</snippet></ROW><ROW><id>12325257</id><snippet>class WidgetHandler(RequestHandler):
Â  Â  def initialize(self, database):
Â  Â  Â  Â  self.database = database    

Â  Â  def delete(self, id):
Â  Â  Â  Â  # if user has permission to delete
        # if record exists
        # delete it

app = Application([
Â  Â  (r'/widgets/([0-9]+)', WidgetHandler, dict(database=database)),
Â  Â  ])
</snippet></ROW><ROW><id>12325257</id><snippet>// get your id somehow
// dynamically build url   
$.ajax({
    url: '/widgets/' + theIdYouGotSomehow,
    type: 'DELETE',
    success: function(result) {
        // Do something with the result
    }
});
</snippet></ROW><ROW><id>12325257</id><snippet>/widgets/12</snippet></ROW><ROW><id>12325294</id><snippet>row[0]</snippet></ROW><ROW><id>12325294</id><snippet>row['question_id']</snippet></ROW><ROW><id>12325294</id><snippet>for row in cursor.execute("select question_id, foo, bar from questions"):
    question_id, foo, bar = row
</snippet></ROW><ROW><id>12325435</id><snippet>#Wrong
ftp = FTP('ftp://192.168.1.130')
#Right
ftp = FTP('192.168.1.130')
</snippet></ROW><ROW><id>12325566</id><snippet>    /^0*(\d{1,5})(?&lt;=.{5})(?&lt;!00000)(?!00)(?=\d{10}$)0*(.+)/
      | |        |        |         |     |          | |
      | |        |        |         |     |          | capture 2nd number
      | |        |        |         |     |          |
      | |        |        |         |     |          chomp leading zeroes
      | |        |        |         |     |
      | |        |        |         |     assert there're 10 digits ahead
      | |        |        |         |
      | |        |        |         assert second part at least 100000000
      | |        |        |
      | |        |        make sure first part at least one nonzero digit
      | |        |
      | |        assert there are 5 chars behind (already tested numeric)
      | |
      | capture 1st number (don't worry; the assertions will fix this up)
      |
      chomp leading zeroes (i'm going to line up these comments damn it!)
</snippet></ROW><ROW><id>12325566</id><snippet>(?:^|\s)</snippet></ROW><ROW><id>12325566</id><snippet>(?:\s|$)</snippet></ROW><ROW><id>12325566</id><snippet>    000010111111111             --&gt;     1       111111111
    116402151672479             --&gt;     11640   2151672479
    006421651672479             --&gt;     642     1651672479
    712120751672479             --&gt;     71212   751672479
    712121551672479             --&gt;     71212   1551672479
    006400351672479             --&gt;     640     351672479

    # not enough digits        
    71212155167247              --&gt;     no match

    # too many digits          
    7121215516724798            --&gt;     no match           

    # first part == 0          
    000001551672479             --&gt;     no match            

    # second part &lt; 100,000,000
    712120098765479             --&gt;     no match
</snippet></ROW><ROW><id>12325691</id><snippet>seq_iter = x if isinstance(x, dict) else xrange(len(x))
</snippet></ROW><ROW><id>12325691</id><snippet>&gt;&gt;&gt; def seq_iter(obj):
...     return obj if isinstance(obj, dict) else xrange(len(obj))
... 
&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; for i in seq_iter(x):
...     x[i] = 99
... 
&gt;&gt;&gt; x
[99, 99, 99]
&gt;&gt;&gt; 
&gt;&gt;&gt; x = {1: 2, 2:3, 3:4}
&gt;&gt;&gt; for i in seq_iter(x):
...     x[i] = 99
... 
&gt;&gt;&gt; x
{1: 99, 2: 99, 3: 99}
</snippet></ROW><ROW><id>12326113</id><snippet>df1.apply(lambda x: x.asof(df2.index))
</snippet></ROW><ROW><id>12326377</id><snippet>&gt;&gt;&gt; def start(list_of_entries):
...     map((lambda x:func(x.name,x.age)), list_of_entries)
</snippet></ROW><ROW><id>12326377</id><snippet>&gt;&gt;&gt; def start(list_of_entries):
...     for x in list_of_entries: func(x.name, x.age)
</snippet></ROW><ROW><id>12326377</id><snippet>&gt;&gt;&gt; def start(list_of_entries):
...     return [func(x.name, x.age) for x in list_of_entries]
</snippet></ROW><ROW><id>12326418</id><snippet>json_object = json.load(response)
</snippet></ROW><ROW><id>12326418</id><snippet>.load()</snippet></ROW><ROW><id>12326418</id><snippet>.loads()</snippet></ROW><ROW><id>12326418</id><snippet>json_object = json.loads(response.read())
</snippet></ROW><ROW><id>12326418</id><snippet>json</snippet></ROW><ROW><id>12326418</id><snippet>import json
</snippet></ROW><ROW><id>12326607</id><snippet>QVariant</snippet></ROW><ROW><id>12326607</id><snippet>&gt;&gt;&gt; from PyQt4.QtCore import QVariant
&gt;&gt;&gt; v = QVariant(100)
&gt;&gt;&gt; v.typeName()
'int'
&gt;&gt;&gt; v.convert(QVariant.String)
True
&gt;&gt;&gt; v.typeName()
'QString'
</snippet></ROW><ROW><id>12326607</id><snippet>to*()</snippet></ROW><ROW><id>12326607</id><snippet>QVariant</snippet></ROW><ROW><id>12326607</id><snippet>&gt;&gt;&gt; v.toInt()
(100, True)
&gt;&gt;&gt; v.typeName()
'QString'
</snippet></ROW><ROW><id>12326677</id><snippet>from xml.etree import ElementTree as etree
tree = etree.fromstring(xml)

def xml_to_dict(tree):  
  d={}   
  if tree.text:
     d[tree.tag] = tree.text  
  elif len(tree) &lt; 0:
     d[tree.tag] = {}   
  else:   
     d[tree.tag] = map(xml_to_dict, tree)  
 return d
</snippet></ROW><ROW><id>12326942</id><snippet>int</snippet></ROW><ROW><id>12326942</id><snippet>x = int('600')

# x is now 600, can be used in computations
print x + 1  # No TypeError--prints 601
</snippet></ROW><ROW><id>12326942</id><snippet>s = f.readline()
x = int(s)
y = x * 5  # etc.
</snippet></ROW><ROW><id>12326942</id><snippet>with open('myfile') as f:
    for line in f:
        x = int(line)
        print x+3
</snippet></ROW><ROW><id>12326942</id><snippet>myfile</snippet></ROW><ROW><id>12326942</id><snippet>600
3
67
987
</snippet></ROW><ROW><id>12326942</id><snippet>603
6
70
990
</snippet></ROW><ROW><id>12326942</id><snippet>float</snippet></ROW><ROW><id>12327011</id><snippet>plt.subplots_adjust(hspace=desiredspace)
</snippet></ROW><ROW><id>12327030</id><snippet>sed -i -e '$G' *.txt
</snippet></ROW><ROW><id>12327090</id><snippet>In [99]: df
Out[99]: 
                            X         Y
2009-08-07 00:00:00 -0.900602 -1.107547
2009-08-07 01:00:00  0.398914  1.545534
2009-08-07 02:00:00 -0.429100  2.052242
2009-08-07 03:00:00  0.857940 -0.348118
2009-08-07 04:00:00  0.394655 -1.578197
2009-08-07 05:00:00 -0.240995 -1.474097
2009-08-07 06:00:00  0.619148 -0.040635
2009-08-07 07:00:00 -1.403177 -0.187540
2009-08-07 08:00:00 -0.360626 -0.399728
2009-08-07 09:00:00  0.179741 -2.709712

In [100]: df['Time'] = df.index.asi8

In [101]: dist = df.diff().fillna(0.)

In [102]: dist['Dist'] = np.sqrt(dist.X**2 + dist.Y**2)

In [103]: dist['Speed'] = dist.Dist / (dist.Time / 1e9)

In [104]: dist
Out[104]: 
                            X         Y          Time      Dist     Speed
2009-08-07 00:00:00  0.000000  0.000000  0.000000e+00  0.000000       NaN
2009-08-07 01:00:00  1.299516  2.653081  3.600000e+12  2.954248  0.000821
2009-08-07 02:00:00 -0.828013  0.506708  3.600000e+12  0.970752  0.000270
2009-08-07 03:00:00  1.287040 -2.400360  3.600000e+12  2.723637  0.000757
2009-08-07 04:00:00 -0.463285 -1.230079  3.600000e+12  1.314430  0.000365
2009-08-07 05:00:00 -0.635650  0.104100  3.600000e+12  0.644118  0.000179
2009-08-07 06:00:00  0.860143  1.433462  3.600000e+12  1.671724  0.000464
2009-08-07 07:00:00 -2.022324 -0.146906  3.600000e+12  2.027653  0.000563
2009-08-07 08:00:00  1.042550 -0.212188  3.600000e+12  1.063924  0.000296
2009-08-07 09:00:00  0.540367 -2.309984  3.600000e+12  2.372345  0.000659
</snippet></ROW><ROW><id>12327154</id><snippet>scanf</snippet></ROW><ROW><id>12327154</id><snippet>scanf</snippet></ROW><ROW><id>12327154</id><snippet>sscanf</snippet></ROW><ROW><id>12327154</id><snippet>r'\-?\d+'</snippet></ROW><ROW><id>12327154</id><snippet>r'\d+'</snippet></ROW><ROW><id>12327154</id><snippet>integer = re.compile(r'\-?\d+')
for p in expression:
    if p.isdigit():
        # somehow find the current position in the string
        integer.match(expression, curpos)
</snippet></ROW><ROW><id>12327154</id><snippet>p</snippet></ROW><ROW><id>12327154</id><snippet>integer = re.compile(r'\-?\d+') # only do this once in your program

all_the_numbers = integer.findall(expression)
</snippet></ROW><ROW><id>12327154</id><snippet>all_the_numbers</snippet></ROW><ROW><id>12327154</id><snippet>all_the_numbers = [int(s) for s in integer.finditer(expression)]
</snippet></ROW><ROW><id>12327154</id><snippet>finditer</snippet></ROW><ROW><id>12327154</id><snippet>findall</snippet></ROW><ROW><id>12328131</id><snippet>my_str="123456781234567812345678"
splits=[my_str[x:x+8] for x in range(0,len(my_str),8)]
//splits = ["12345678","12345678","12345678"]
</snippet></ROW><ROW><id>12328145</id><snippet>ctypes</snippet></ROW><ROW><id>12328145</id><snippet>objc_object</snippet></ROW><ROW><id>12328145</id><snippet>id</snippet></ROW><ROW><id>12328145</id><snippet>import ctypes, objc
_objc = ctypes.PyDLL(objc._objc.__file__)

# PyObject *PyObjCObject_New(id objc_object, int flags, int retain)
_objc.PyObjCObject_New.restype = ctypes.py_object
_objc.PyObjCObject_New.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int]

def objc_object(id):
    return _objc.PyObjCObject_New(id, 0, 1)
</snippet></ROW><ROW><id>12328145</id><snippet>wx.Frame</snippet></ROW><ROW><id>12328145</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self, title):
        wx.Frame.__init__(self, None, title=title, pos=(150,150), size=(350,200))

        m_print = wx.Button(self, label="Print")
        m_print.Bind(wx.EVT_BUTTON, self.OnPrint)

    def OnPrint(self, event):
        topobj = objc_object(top.GetHandle())
        topobj.print_(None)

app = wx.App()
top = Frame(title="ObjC Test")
top.Show()

app.MainLoop()
</snippet></ROW><ROW><id>12328145</id><snippet>ctypes</snippet></ROW><ROW><id>12328145</id><snippet>pyobjc</snippet></ROW><ROW><id>12328238</id><snippet>User</snippet></ROW><ROW><id>12328238</id><snippet>Provider</snippet></ROW><ROW><id>12328238</id><snippet>users = dict([(u.username, u) for u in User.objects.all()])
providers = dict([(p.name, p) for p in Provider.objects.all()])
</snippet></ROW><ROW><id>12328238</id><snippet>for call in result:</snippet></ROW><ROW><id>12328238</id><snippet>                    rate_cust = users[call[3]]
                    rate_prov = provided[call[5]]
</snippet></ROW><ROW><id>12328434</id><snippet>app = webapp2.WSGIApplication([('/', MainHandler)],
                              debug=True)
</snippet></ROW><ROW><id>12328434</id><snippet>app = webapp2.WSGIApplication([('/carlos/', MainHandler)],
                              debug=True)
</snippet></ROW><ROW><id>12328583</id><snippet>self.bind_all("&lt;Control-minus&gt;", self.decreaseFont)</snippet></ROW><ROW><id>12328719</id><snippet>pass</snippet></ROW><ROW><id>12328719</id><snippet>if images:
    db=connection['BOSE']
    fs=gridfs.GridFS(db)
    fs.put(image,filename="image_scan2")
else:
    pass
return ....
</snippet></ROW><ROW><id>12328719</id><snippet>else</snippet></ROW><ROW><id>12328719</id><snippet>return</snippet></ROW><ROW><id>12328719</id><snippet>else</snippet></ROW><ROW><id>12328839</id><snippet>0x4F60</snippet></ROW><ROW><id>12328839</id><snippet>('0x60', '0x4F')</snippet></ROW><ROW><id>12328839</id><snippet>&gt;&gt;&gt; '`O\n\x00'.decode('utf-16')
u'\u4f60\n'
</snippet></ROW><ROW><id>12329167</id><snippet>B.foo</snippet></ROW><ROW><id>12329167</id><snippet>__new__</snippet></ROW><ROW><id>12329167</id><snippet>__new__</snippet></ROW><ROW><id>12329283</id><snippet>image_counts = [16, 2, 14]
total_images = sum(image_counts)

proportions = [1.0 * i / total_images for i in image_counts]
counts = [int(15 * i) for i in proportions]
if sum(counts) &lt; 15:
    counts[counts.index(min(counts))] += 1
</snippet></ROW><ROW><id>12329283</id><snippet>counts[counts.index(min(counts))] += 15 - sum(counts[1:]) # from user1654936
</snippet></ROW><ROW><id>12329328</id><snippet>l1=[0,0,2,0,1,2]
l2=[3,0,1,0,1,0,]
l3=[0,0,2,1,1,1]

spot0_list = zip(l1,l2,l3)[0]
if 3 in spot0_list and  0  in spot0_list:
    print 2
</snippet></ROW><ROW><id>12329328</id><snippet>set</snippet></ROW><ROW><id>12329328</id><snippet>spot0_list = set(zip(l1,l2,l3)[0])
</snippet></ROW><ROW><id>12329591</id><snippet>&gt;&gt;&gt; class MyOrderedDict(OrderedDict):
...     def next_key(self, key):
...             next = self._OrderedDict__map[key][1]
...             if next is self._OrderedDict__root:
...                     raise ValueError("{!r} is the last key".format(key))
...             return next[2]
...     def first_key(self):
...             for key in self: return key
...             raise ValueError("OrderedDict() is empty")
... 
&gt;&gt;&gt; od = MyOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])
&gt;&gt;&gt; od.next_key("apple")
'banana'
&gt;&gt;&gt; od.next_key("banana")
'orange'
&gt;&gt;&gt; od.next_key("orange")
'pear'
&gt;&gt;&gt; od.next_key("pear")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in next_key
ValueError: 'pear' is the last key
&gt;&gt;&gt; od.first_key()
'apple'
</snippet></ROW><ROW><id>12329744</id><snippet>how_much = None
while how_much is None:
    next = (raw_input("&gt;&gt;&gt; "))
    try:
       how_much = int(next)
    except ValueError:
       print "Dude, enter a value!"
</snippet></ROW><ROW><id>12330003</id><snippet>(a, b)</snippet></ROW><ROW><id>12330003</id><snippet>a</snippet></ROW><ROW><id>12330003</id><snippet>b</snippet></ROW><ROW><id>12330003</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     (a, b) = (2, 3)
... 
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_CONST               3 ((2, 3))
              3 UNPACK_SEQUENCE          2
              6 STORE_FAST               0 (a)
              9 STORE_FAST               1 (b)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>12330003</id><snippet>(2, 3)</snippet></ROW><ROW><id>12330003</id><snippet>a</snippet></ROW><ROW><id>12330003</id><snippet>b</snippet></ROW><ROW><id>12330029</id><snippet>function</snippet></ROW><ROW><id>12330029</id><snippet>class</snippet></ROW><ROW><id>12330029</id><snippet>module</snippet></ROW><ROW><id>12330029</id><snippet>if</snippet></ROW><ROW><id>12330029</id><snippet>while</snippet></ROW><ROW><id>12330029</id><snippet>for</snippet></ROW><ROW><id>12330029</id><snippet>a</snippet></ROW><ROW><id>12330029</id><snippet>&gt;&gt;&gt; if False:
...     a = 5
... 
&gt;&gt;&gt; print a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined
</snippet></ROW><ROW><id>12330248</id><snippet>for</snippet></ROW><ROW><id>12330248</id><snippet>czynniki</snippet></ROW><ROW><id>12330248</id><snippet>czynniki</snippet></ROW><ROW><id>12330248</id><snippet>for</snippet></ROW><ROW><id>12330248</id><snippet>var lastvalue = -1;
for czynnik in czynniki:
    if lastvalue == czynnik:
        continue
    if czynniki.count(czynnik)&gt;1:
        print czynnik, '^', czynniki.count(czynnik), ' *',
        lastvalue = czynnik
    else:
        print czynnik, ' *',
</snippet></ROW><ROW><id>12330340</id><snippet>\uxxxx</snippet></ROW><ROW><id>12330340</id><snippet>\u4f60</snippet></ROW><ROW><id>12330340</id><snippet>&gt;&gt;&gt; u'\uf460'.encode('utf16')
'\xff\xfe`\xf4'
</snippet></ROW><ROW><id>12330340</id><snippet>utf-16be</snippet></ROW><ROW><id>12330340</id><snippet>utf-16le</snippet></ROW><ROW><id>12330340</id><snippet>&gt;&gt;&gt; u'\uf460'.encode('utf-16be')
'\xf4`'
&gt;&gt;&gt; u'\uf460'.encode('utf-16le')
'`\xf4'
</snippet></ROW><ROW><id>12330535</id><snippet>str.splitlines</snippet></ROW><ROW><id>12330535</id><snippet>temp = file.read().splitlines()
</snippet></ROW><ROW><id>12330535</id><snippet>temp = [line[:-1] for line in file]
</snippet></ROW><ROW><id>12330535</id><snippet>with open(the_file, 'r+') as f:
    f.seek(-1, 2)  # 2 == relative to end of file
    if f.read(1) != '\n':
        f.write('\n')
        f.flush()
        f.seek(0)
    [line[:-1] for line in f]
</snippet></ROW><ROW><id>12330535</id><snippet>strip</snippet></ROW><ROW><id>12330535</id><snippet>[line.rstrip('\n') for line in file]
</snippet></ROW><ROW><id>12330535</id><snippet>readlines</snippet></ROW><ROW><id>12330535</id><snippet>def readlines(self):
    lines = []
    for line in iter(self.readline, ''):
        lines.append(line)
    return lines

# or equivalently

def readlines(self):
    lines = []
    while True:
        line = self.readline()
        if not line:
            break
        lines.append(line)
    return lines
</snippet></ROW><ROW><id>12330535</id><snippet>readline()</snippet></ROW><ROW><id>12330535</id><snippet>readlines()</snippet></ROW><ROW><id>12330537</id><snippet>(?P=&lt;name&gt;...)</snippet></ROW><ROW><id>12330537</id><snippet>streetname</snippet></ROW><ROW><id>12330537</id><snippet>=</snippet></ROW><ROW><id>12330537</id><snippet>&gt;&gt;&gt; re.compile('(?P&lt;streetname&gt;[a-zÃ¦Ã¸Ã¥ ]+)(?:[ ]+)(?P&lt;housenumber&gt;\d+)(?:[ ]+),(?:[ ]+)(?P&lt;postalcode&gt;\d{1,4})(?:[ ]+)(?P&lt;city&gt;[a-zÃ¦Ã¸Ã¥ ]+)')
&lt;_sre.SRE_Pattern object at 0x102e6a620&gt;
</snippet></ROW><ROW><id>12330729</id><snippet>item[1]</snippet></ROW><ROW><id>12330729</id><snippet>GFireItem</snippet></ROW><ROW><id>12330729</id><snippet>items[1]['guide_url']</snippet></ROW><ROW><id>12330729</id><snippet>Request</snippet></ROW><ROW><id>12330729</id><snippet>        return Request(items[1]['guide_url'], callback=self.parse_item2)
</snippet></ROW><ROW><id>12330731</id><snippet>setVerticalHeaderItem</snippet></ROW><ROW><id>12330731</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>12330731</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>12330731</id><snippet>checkState</snippet></ROW><ROW><id>12330731</id><snippet>setCheckState</snippet></ROW><ROW><id>12330731</id><snippet>setVerticalHeaderLabel(s)</snippet></ROW><ROW><id>12330731</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>12330731</id><snippet>setVerticalHeaderItem</snippet></ROW><ROW><id>12331438</id><snippet>sys.modules</snippet></ROW><ROW><id>12331438</id><snippet>sys.modules</snippet></ROW><ROW><id>12331438</id><snippet>sys.modules</snippet></ROW><ROW><id>12331438</id><snippet>import pkg.foo</snippet></ROW><ROW><id>12331438</id><snippet>from pkg import foo</snippet></ROW><ROW><id>12331438</id><snippet>import pkg.foo</snippet></ROW><ROW><id>12331438</id><snippet>getattr(pkg, 'foo')</snippet></ROW><ROW><id>12331438</id><snippet>main.py</snippet></ROW><ROW><id>12331438</id><snippet>from pkg import foo</snippet></ROW><ROW><id>12331438</id><snippet>pkg.foo</snippet></ROW><ROW><id>12331438</id><snippet>sys.modules</snippet></ROW><ROW><id>12331438</id><snippet>'pkg.foo' in sys.modules == True</snippet></ROW><ROW><id>12331438</id><snippet>foo</snippet></ROW><ROW><id>12331438</id><snippet>foo.py</snippet></ROW><ROW><id>12331438</id><snippet>foo</snippet></ROW><ROW><id>12331438</id><snippet>from pkg import bar</snippet></ROW><ROW><id>12331438</id><snippet>pkg.bar</snippet></ROW><ROW><id>12331438</id><snippet>sys.modules</snippet></ROW><ROW><id>12331438</id><snippet>bar</snippet></ROW><ROW><id>12331438</id><snippet>foo.py</snippet></ROW><ROW><id>12331438</id><snippet>from pkg import foo</snippet></ROW><ROW><id>12331438</id><snippet>main.py</snippet></ROW><ROW><id>12331438</id><snippet>bar.py</snippet></ROW><ROW><id>12331438</id><snippet>bar.py</snippet></ROW><ROW><id>12331438</id><snippet>from pkg import foo</snippet></ROW><ROW><id>12331438</id><snippet>sys.modules</snippet></ROW><ROW><id>12331438</id><snippet>pkg.foo</snippet></ROW><ROW><id>12331438</id><snippet>foo.py</snippet></ROW><ROW><id>12331438</id><snippet>sys.modules['pkg.foo']</snippet></ROW><ROW><id>12331438</id><snippet>getattr(pkg, 'foo')</snippet></ROW><ROW><id>12331438</id><snippet>foo</snippet></ROW><ROW><id>12331438</id><snippet>bar.py</snippet></ROW><ROW><id>12331438</id><snippet>import pkg.foo</snippet></ROW><ROW><id>12331438</id><snippet>getattr(pkg, 'foo')</snippet></ROW><ROW><id>12331494</id><snippet>[(a, "%.2f" % (b * 100.0)) for a, b in results]
</snippet></ROW><ROW><id>12331549</id><snippet>#!/usr/bin/env python

# keyword occurrences -&gt; [('key_1', (11, 59)), ('key_2', (301, 333)), ('key_3', ())]
kw_all_occ = {"key_1" : [(11, 59)],
"key_2" : [(24, 56), (301, 333), (1208, 1240), (1673, 1705)],
"key_3" : [(24, 46), (1208, 1230)]}

def non_overlapping_occ(occ):
    # dictionary with all keyword occurrences
    all_occ = dict({})
    all_occ.update(occ)

    # list with the first non overlapping occurrences of every keyword -&gt; 
    # [('key_1', (start_1, end_1)),('key_2', (start_2, end_2)),...]
    result = []

    # Sort keywords by length -&gt; [(22, 'key_3'), (32, 'key_2'), (48, 'key_1')]
    kw_lengths = []
    for k, v in all_occ.iteritems():
        kw_lengths.append((v[0][1] - v[0][0], k))
    kw_lengths.sort()

    while len(kw_lengths):
        # Current longest keyword
        longest_keyword = kw_lengths.pop(-1)[1]
        try:
            result.append((longest_keyword, all_occ[longest_keyword][0]))
            # Remove occurrences overlapping any occurrence of the current
            # longest_keyword value
            for item in all_occ[longest_keyword]:
                start = item[0]
                end = item[1]
                for l, k in kw_lengths:
                    v = all_occ[k]
                    all_occ[k] = filter(lambda x: (x[0] &gt; end) | (x[1] &lt; start), v)

        except IndexError:
            result.append((longest_keyword, ()))

    return result

print non_overlapping_occ(kw_all_occ)
</snippet></ROW><ROW><id>12331549</id><snippet>vicent@deckard:~$ python prova.py 
[('key_1', (11, 59)), ('key_2', (301, 333)), ('key_3', ())]
</snippet></ROW><ROW><id>12331677</id><snippet>def foo():
    return 1,2,3
</snippet></ROW><ROW><id>12331677</id><snippet>bar</snippet></ROW><ROW><id>12331677</id><snippet>foo</snippet></ROW><ROW><id>12331677</id><snippet># Take a sequence of values and store them in a tuple called args
def bar1(*args):
    print args[0]

# Take a tuple of values and store it in t
def bar2(t):
    print t[0]
</snippet></ROW><ROW><id>12331677</id><snippet>foo</snippet></ROW><ROW><id>12331677</id><snippet>&gt;&gt;&gt; bar1(foo())  # Receives a single tuple-valued argument
(1, 2, 3)
&gt;&gt;&gt; bar1(*foo()) # Receives 3 integer arguments
1
&gt;&gt;&gt; bar2(foo())  # Receives a single tuple-valued argument
1
&gt;&gt;&gt; bar2(*foo()) # Receives 3 arguments, but only expected 1!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: bar2() takes exactly 1 argument (3 given)
</snippet></ROW><ROW><id>12331677</id><snippet>bar1</snippet></ROW><ROW><id>12331677</id><snippet>bar2</snippet></ROW><ROW><id>12331688</id><snippet>{% regroup magazie_cats by category as service_list %}

{% for cat in service_list|slice:":3" %}
    {% for item in cat.list %}
        {{item.event.title}}
    {% endfor %}
{% endfor %}
{% for cat in service_list|slice:"3:6" %}
    {% for item in cat.list %}
        {{item.event.title}}
    {% endfor %}
{% endfor %}
{% for cat in service_list|slice:"6:9" %}
    {% for item in cat.list %}
        {{item.event.title}}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>12331876</id><snippet>def safe_db(foo):
    def _inner(*args, **kwargs):
        try:
            foo(*args, **kwargs)   # fixed line
            return True
        except Exception as e:
            log.error(e.message)
            print e.message
            return False
    return _inner
</snippet></ROW><ROW><id>12331920</id><snippet>def main():
    import thread
    try:
      thread.start_new(serve_thread_tcp, ('', 4045,TEST))
      thread.start_new(serve_thread_tcp,('', 239,TEST1))
      thread.start_new(serve_thread_udp,('', 1246,TEST2))
      thread.start_new(serve_thread_tcp,('', 12342,TEST3))
    except KeyboardInterrupt:
        os._exit()

if __name__ == '__main__':
    try:
        main()
    except:
        raise
    raw_input()
</snippet></ROW><ROW><id>12331920</id><snippet>Thread</snippet></ROW><ROW><id>12331920</id><snippet>Threads</snippet></ROW><ROW><id>12332113</id><snippet>C:\&gt;chcp 65001
Active code page: 65001

C:\&gt;python
Python 3.3.0rc1 (v3.3.0rc1:8bb5c7bc46ba, Aug 25 2012, 13:50:30) [MSC v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print('\u2044')
â
</snippet></ROW><ROW><id>12332113</id><snippet>&gt;&gt;&gt; print('\u2044')
â

&gt;&gt;&gt; print('\u2044'*8)
ââââââââ
ï¿½ï¿½ââââ
ââ
ï¿½ï¿½

&gt;&gt;&gt; print('1\u20442 2\u20443 4\u20445')
1â2 2â3 4â5
â5
</snippet></ROW><ROW><id>12332219</id><snippet>*args</snippet></ROW><ROW><id>12332219</id><snippet>**kwargs</snippet></ROW><ROW><id>12332219</id><snippet>*args</snippet></ROW><ROW><id>12332456</id><snippet>python-dateutil</snippet></ROW><ROW><id>12332512</id><snippet>def triangle(length, amplitude):
     section = length // 4
     for direction in (1, -1):
         for i in range(section):
             yield i * (amplitude / section) * direction
         for i in range(section):
             yield (amplitude - (i * (amplitude / section))) * direction
</snippet></ROW><ROW><id>12332512</id><snippet>&gt;&gt;&gt; list(triangle(100, 0.5))
[0.0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.48, 0.46, 0.44, 0.42, 0.4, 0.38, 0.36, 0.33999999999999997, 0.32, 0.3, 0.28, 0.26, 0.24, 0.21999999999999997, 0.2, 0.18, 0.15999999999999998, 0.14, 0.12, 0.09999999999999998, 0.08000000000000002, 0.06, 0.03999999999999998, 0.020000000000000018, -0.0, -0.02, -0.04, -0.06, -0.08, -0.1, -0.12, -0.14, -0.16, -0.18, -0.2, -0.22, -0.24, -0.26, -0.28, -0.3, -0.32, -0.34, -0.36, -0.38, -0.4, -0.42, -0.44, -0.46, -0.48, -0.5, -0.48, -0.46, -0.44, -0.42, -0.4, -0.38, -0.36, -0.33999999999999997, -0.32, -0.3, -0.28, -0.26, -0.24, -0.21999999999999997, -0.2, -0.18, -0.15999999999999998, -0.14, -0.12, -0.09999999999999998, -0.08000000000000002, -0.06, -0.03999999999999998, -0.020000000000000018]
</snippet></ROW><ROW><id>12332557</id><snippet>x = [lambda: x for x in range(3)]
</snippet></ROW><ROW><id>12332557</id><snippet>x = [(lambda: x) for x in range(3)]
</snippet></ROW><ROW><id>12332557</id><snippet>&gt;&gt;&gt; x = [(lambda x=x: x) for x in range(3)]
&gt;&gt;&gt; x[0]()
0
</snippet></ROW><ROW><id>12332722</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; dict = {u'_id': {u'user': u'ariel', u'day': 1332115200000.0}, u'value': {u'count': 99.0}}
&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(dict['_id']['day'] / 1000.0)
datetime.datetime(2012, 3, 19, 0, 0)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12332786</id><snippet>plt.clf()</snippet></ROW><ROW><id>12332786</id><snippet>break</snippet></ROW><ROW><id>12332786</id><snippet>matplotlib</snippet></ROW><ROW><id>12332786</id><snippet>pyplot</snippet></ROW><ROW><id>12332786</id><snippet>fig = plt.figure()
ax = fig.add_axes([.1,.1,.8,.8]) # main axes
colors=['red','blue']
for key  in Xpr: #Xpr holds my data
    #skipping over what I don't want to plot
    if not key[0] == '5': continue 
    if key[1] == '0': continue
    if key[1] == 'a': continue
    x = Xpr[key]
    y = Ypr[key] #Ypr holds the Y axis and is created when Xpr is created
    ax.scatter(x,y,color=colors[count],marker='.',label=key)
    count += 1

ax.set_xlabel(r'$z/\mu$')
ax.set_ylabel(r'$\rho(z)$')
ax.set_xlim(0,10)
leg = ax.legend()

#Now I wish to create the inset
ax_inset=fig.add_axes([0.7,0.7,0.3,0.3])
count =0
for key  in Xpr: #Xpr holds my data
    if not key[0] == '5': continue
    if key[1] == '0': continue
    if key[1] == 'a': continue
    x = Xpr[key]
    y = Ypr[key]
    ax_inset.plot(x,y,color=colors[count],label=key)
    count +=1

ax_inset.legend()
</snippet></ROW><ROW><id>12332894</id><snippet>.nsmap</snippet></ROW><ROW><id>12332925</id><snippet>class Node(object):
    def __init__(self, element):
        self.element = element
        self.left = self.right = None

    @classmethod
    def tree(cls, element, left, right):
        node = cls(element)
        node.left = left
        node.right = right
        return node
</snippet></ROW><ROW><id>12332934</id><snippet>object.__enter__(self)</snippet></ROW><ROW><id>12332934</id><snippet>with</snippet></ROW><ROW><id>12332934</id><snippet>as</snippet></ROW><ROW><id>12332934</id><snippet>__enter__</snippet></ROW><ROW><id>12332934</id><snippet>return self</snippet></ROW><ROW><id>12332934</id><snippet>init 10
enter
update
10.0 exit
</snippet></ROW><ROW><id>12332943</id><snippet>title</snippet></ROW><ROW><id>12332943</id><snippet>{% block title %}{% endblock %}</snippet></ROW><ROW><id>12332950</id><snippet>urllib</snippet></ROW><ROW><id>12332950</id><snippet>crawler python javascript</snippet></ROW><ROW><id>12333066</id><snippet>capture = cv2.VideoCapture(0)
</snippet></ROW><ROW><id>12333066</id><snippet>capture = cv2.VideoCapture("your_reading_file.avi")
</snippet></ROW><ROW><id>12333066</id><snippet>fps</snippet></ROW><ROW><id>12333066</id><snippet>flag, frame = capture.read() # **EDIT:** to get frame size
width = np.size(frame, 1) #here is why you need numpy!  (remember to "import numpy as np")
height = np.size(frame, 0)
writer = cv2.VideoWriter(filename="your_writing_file.avi", 
fourcc=cv2.cv.CV_FOURCC('I', 'Y', 'U', 'V'), #this is the codec that works for me
fps=15, #frames per second, I suggest 15 as a rough initial estimate
frameSize=(width, height))
</snippet></ROW><ROW><id>12333066</id><snippet>while True:
    flag, frame = capture.read() #Flag returns 1 for success, 0 for failure. Frame is the currently processed frame

    if flag == 0: #Something is wrong with your data, or the end of the video file was reached
        break 
    x = width/2
    y = height/2 #change to the desired coordinates
    text_color = (255,0,0) #color as (B,G,R)
    cv2.putText(frame, "your_string", (x,y), cv2.FONT_HERSHEY_PLAIN, 1.0, text_color, thickness=1, lineType=cv2.CV_AA)

    writer.write(frame) #write to the video file
</snippet></ROW><ROW><id>12333066</id><snippet>frame</snippet></ROW><ROW><id>12333066</id><snippet>Time</snippet></ROW><ROW><id>12333066</id><snippet>fps</snippet></ROW><ROW><id>12333066</id><snippet>fontFace â Font type. One of FONT_HERSHEY_SIMPLEX, 
FONT_HERSHEY_PLAIN, 
FONT_HERSHEY_DUPLEX, 
FONT_HERSHEY_COMPLEX, 
FONT_HERSHEY_TRIPLEX, 
FONT_HERSHEY_COMPLEX_SMALL, 
FONT_HERSHEY_SCRIPT_SIMPLEX, or 
FONT_HERSHEY_SCRIPT_COMPLEX, 
where each of the font IDâs can be combined with FONT_HERSHEY_ITALIC to get the slanted letters.
</snippet></ROW><ROW><id>12333123</id><snippet>results = set(k for k in your_dict if k[1] == '10')
</snippet></ROW><ROW><id>12333123</id><snippet>from collections import defaultdict

index_2nd = defaultdict(set)
for k in your_dict:
    index_2nd[k[1]].add(k)
</snippet></ROW><ROW><id>12333123</id><snippet>results = index_2nd['10']
</snippet></ROW><ROW><id>12333338</id><snippet>Comment.objects.rebuild()
</snippet></ROW><ROW><id>12333338</id><snippet>rebuild</snippet></ROW><ROW><id>12333338</id><snippet>TreeManager class</snippet></ROW><ROW><id>12333338</id><snippet>tree</snippet></ROW><ROW><id>12333338</id><snippet>objects</snippet></ROW><ROW><id>12333539</id><snippet>import dateutil.rrule as rrule
import datetime

def hours_aligned(start, end, inc = True):
    if inc: yield start
    rule = rrule.rrule(rrule.HOURLY, byminute = 0, bysecond = 0, dtstart=start)
    for x in rule.between(start, end, inc = False):
        yield x
    if inc: yield end

d = datetime.datetime(2012, 9, 8, 18, 53, 34)
td = datetime.timedelta(hours=2, minutes=34, seconds=5)

for x in hours_aligned(d,d+td):
    print(x)
</snippet></ROW><ROW><id>12333539</id><snippet>2012-09-08 18:53:34
2012-09-08 19:00:00
2012-09-08 20:00:00
2012-09-08 21:00:00
2012-09-08 21:27:39
</snippet></ROW><ROW><id>12333661</id><snippet>list</snippet></ROW><ROW><id>12333661</id><snippet>&gt;&gt;&gt; content
['xlnx&gt;XLNX&lt;', 'yhoo&gt;YHOO&lt;']
&gt;&gt;&gt; tickers = []
&gt;&gt;&gt; for s in content:
...     tickers.append(''.join(i for i in s if i.isupper()))
... 
&gt;&gt;&gt; tickers
['XLNX', 'YHOO']
</snippet></ROW><ROW><id>12333836</id><snippet>SITE_URL = 'http://www.mydomain.com'
</snippet></ROW><ROW><id>12333836</id><snippet>from django.conf import settings #this imports also your specific settings.py

print settings.SITE_URL
</snippet></ROW><ROW><id>12333836</id><snippet>Site.objects.get_current().domain</snippet></ROW><ROW><id>12333836</id><snippet>from django.conf import settings
def my_site_url(request):
    return {
        'SITE_URL': settings.SITE_URL,
    }
</snippet></ROW><ROW><id>12333836</id><snippet>from django.conf import settings
def my_site_url(request):
    return {
        'SITE_URL': Site.objects.get_current().domain,
    }
</snippet></ROW><ROW><id>12333836</id><snippet>TEMPLATE_CONTEXT_PROCESSORS =("django.contrib.auth.context_processors.auth",
"django.core.context_processors.debug",
"django.core.context_processors.i18n",
"django.core.context_processors.media",
"django.core.context_processors.static",
"django.core.context_processors.tz",
"django.contrib.messages.context_processors.messages",
"my_project.context_processors.my_site_url",
)
</snippet></ROW><ROW><id>12333868</id><snippet>def run(server_class=BaseHTTPServer.HTTPServer,
        handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
    server_address = ('0.0.0.0', 12123)
    httpd = server_class(server_address, handler_class)
    httpd.serve_forever()
</snippet></ROW><ROW><id>12333868</id><snippet>server_adress</snippet></ROW><ROW><id>12333868</id><snippet>(0.0.0.0, 12123)</snippet></ROW><ROW><id>12333936</id><snippet>.accept()</snippet></ROW><ROW><id>12333936</id><snippet>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host,port))
s.listen(backlog)
client, address = s.accept()
while 1:
    data = client.recv(size)
    print "getting "+str(data)+" from "+ str(address)
</snippet></ROW><ROW><id>12334091</id><snippet>matching = [p for p in people if p.name == 'Bob']
</snippet></ROW><ROW><id>12334091</id><snippet>from collections import defaultdict

nameindex = defaultdict(list)
for person in people:
    nameindex[person.name.lower()] = person

nameindex['bob']  # a list of people named Bob.
</snippet></ROW><ROW><id>12334147</id><snippet>python -tt scriptname.py</snippet></ROW><ROW><id>12334344</id><snippet># Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it:  "export PYTHONSTARTUP=~/.pystartup" in bash.

import atexit
import os
import readline
import rlcompleter

historyPath = os.path.expanduser("~/.pyhistory")

def save_history(historyPath=historyPath):
    import readline
    readline.write_history_file(historyPath)

if os.path.exists(historyPath):
    readline.read_history_file(historyPath)

atexit.register(save_history)
del os, atexit, readline, rlcompleter, save_history, historyPath
</snippet></ROW><ROW><id>12334459</id><snippet>from __future__ import division

def linspace(start, stop, n):
    if n == 1:
        yield stop
        return
    h = (stop - start) / (n - 1)
    for i in range(n):
        yield start + h * i
</snippet></ROW><ROW><id>12334459</id><snippet>&gt;&gt;&gt; list(linspace(1, 3, 5))
[1.0, 1.5, 2.0, 2.5, 3.0]
</snippet></ROW><ROW><id>12334459</id><snippet>numpy.linspace()</snippet></ROW><ROW><id>12334472</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/tmp/python-4684wEr.py", line 3, in &lt;module&gt;
    print 'd'
KeyboardInterrupt
</snippet></ROW><ROW><id>12334795</id><snippet>import itertools

nplayers=4
nsides=2
max_number=8

assert nplayers*nsides &lt;= max_number
assert nsides % 2 == 0 #otherwise x^x (dot product) is not even, so half_wins_fairness always fails

iterations=[]
def half_wins_fairness( dice1,dice2 ):
    dice1_wins= map( lambda x: x[0]&gt;x[1], itertools.product(dice1,dice2) )
    dice_wins_prob= float(sum(dice1_wins))/len(dice1_wins)
    #probs.append(dice_wins_prob)
    return dice_wins_prob==0.5

def fair( all_dice ):
    all_fair= True
    for d1,d2 in itertools.combinations( all_dice, 2):
        if not half_wins_fairness(d1,d2):
            all_fair=False
    return all_fair

for i,dice_pattern in enumerate(itertools.permutations(range(max_number), nplayers*nsides)):
    #cut dice pattern into dices
    dice= [dice_pattern[p*nsides:(p+1)*nsides] for p in range(nplayers)]
    if fair(dice):
        print dice
        iterations.append(i)

def discrete_derivative(l):
    last=0
    for i,x in enumerate(l):
        tmp= x
        l[i]=x-last
        last=tmp

#discrete_derivative(iterations)
#import pylab
#pylab.plot(iterations)
#pylab.show()
</snippet></ROW><ROW><id>12334875</id><snippet>In [2]: model = Model(name='name')
In [3]: model.active = True
In [4]: model.save()

In [5]: model = Model(name='name2', active=True)
In [6]: model.save()

In [9]: Model.objects.all()
Out[9]: [&lt;Model: Model object&gt;, &lt;Model: Model object&gt;]
</snippet></ROW><ROW><id>12334942</id><snippet>.pyc</snippet></ROW><ROW><id>12334942</id><snippet>.py</snippet></ROW><ROW><id>12334942</id><snippet>.pyc</snippet></ROW><ROW><id>12334960</id><snippet>with open("list1") as f:
    keys = [line.strip() for line in f]
with open("list2") as f:
    names = dict(line.strip().split(":", 1) for line in f)
</snippet></ROW><ROW><id>12334960</id><snippet>for k in keys:
    print(k, names.get(k, ""))
</snippet></ROW><ROW><id>12334960</id><snippet>list2</snippet></ROW><ROW><id>12334960</id><snippet>list1</snippet></ROW><ROW><id>12335036</id><snippet>Tab</snippet></ROW><ROW><id>12335036</id><snippet>Ctrl+V</snippet></ROW><ROW><id>12335036</id><snippet>Tab</snippet></ROW><ROW><id>12335036</id><snippet>"</snippet></ROW><ROW><id>12335036</id><snippet>Ctrl+V</snippet></ROW><ROW><id>12335036</id><snippet>Tab</snippet></ROW><ROW><id>12335036</id><snippet>"</snippet></ROW><ROW><id>12335346</id><snippet>&lt;html&gt;
  &lt;div id="posts"&gt;
    &lt;div&gt;post 1&lt;/div&gt;
    &lt;div&gt;post 2&lt;/div&gt;
    &lt;div&gt;post 3&lt;/div&gt;
  &lt;/div&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>12335346</id><snippet>&lt;div id="posts"&gt;</snippet></ROW><ROW><id>12335346</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>12335346</id><snippet>&lt;div id="posts"&gt;</snippet></ROW><ROW><id>12335346</id><snippet>&lt;div id="posts"&gt;</snippet></ROW><ROW><id>12335406</id><snippet>AppAssertionCredentials</snippet></ROW><ROW><id>12335567</id><snippet>import re

text = "foo http://www.stackoverflow.com bar"

uri_re = re.compile(r"""(?i)\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|"""
                    r"""www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?"""
                    r""":[^\s()&lt;&gt;]+|\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))"""
                    r"""*\))+(?:\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\)|"""
                    r"""[^\s`!()\[\]{};:'".,&lt;&gt;?Â«Â»ââââ]))""")

print uri_re.sub(r"""&lt;a href="\g&lt;0&gt;"&gt;\g&lt;0&gt;&lt;/a&gt;""", text)
</snippet></ROW><ROW><id>12335567</id><snippet>foo &lt;a href="http://www.stackoverflow.com"&gt;http://www.stackoverflow.com&lt;/a&gt; bar
</snippet></ROW><ROW><id>12335567</id><snippet>www.stackoverflow.com</snippet></ROW><ROW><id>12335567</id><snippet>http://</snippet></ROW><ROW><id>12335567</id><snippet>text = "foo www.stackoverflow.com bar"

def link(match):
    uri = match.group()
    if ":" not in uri[:7]:
        uri = "http://" + uri
    return r"""&lt;a href="{0}"&gt;{0}&lt;/a&gt;""".format(uri)

print uri_re.sub(link, text)
</snippet></ROW><ROW><id>12335596</id><snippet>(1 + math.cos(i)) ** (1 / 3.0)
</snippet></ROW><ROW><id>12335596</id><snippet>min</snippet></ROW><ROW><id>12335596</id><snippet>max</snippet></ROW><ROW><id>12335596</id><snippet>eval</snippet></ROW><ROW><id>12335681</id><snippet>pip</snippet></ROW><ROW><id>12335681</id><snippet>File "/Library/Python/2.6/site-packages/pip-1.2.1-py2.6.egg/pip/basecommand.py", line 107, in main
</snippet></ROW><ROW><id>12335681</id><snippet>Installed /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg
</snippet></ROW><ROW><id>12335681</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/easy_install-2.7
</snippet></ROW><ROW><id>12335681</id><snippet>easy_install-2.7 pip
</snippet></ROW><ROW><id>12335681</id><snippet>pip-2.7</snippet></ROW><ROW><id>12336014</id><snippet>path</snippet></ROW><ROW><id>12336014</id><snippet>sys.path</snippet></ROW><ROW><id>12336014</id><snippet>import sys
sys.path.append(path)
</snippet></ROW><ROW><id>12336014</id><snippet>path</snippet></ROW><ROW><id>12336121</id><snippet>.reverse()</snippet></ROW><ROW><id>12336121</id><snippet>None</snippet></ROW><ROW><id>12336121</id><snippet>stra = 'This is stirng'
revword = stra.split()
revword.reverse()
revword=''.join(revword)
</snippet></ROW><ROW><id>12336121</id><snippet>stirngisThis</snippet></ROW><ROW><id>12336121</id><snippet>' '.join(revword)</snippet></ROW><ROW><id>12336220</id><snippet>var</snippet></ROW><ROW><id>12336220</id><snippet>document.forms[0].submit();
</snippet></ROW><ROW><id>12336220</id><snippet>&lt;form action="#"&gt;
  &lt;div&gt;
    &lt;input type="hidden" name="datatosendback" id="datatosendback"&gt;
  &lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>12336220</id><snippet>document.getElementById("datatosendback").value = "OH! Mr KOTER! SEND ME!";
</snippet></ROW><ROW><id>12336451</id><snippet>open /etc/paths
</snippet></ROW><ROW><id>12336451</id><snippet>/usr/bin
/bin
/usr/sbin
/sbin
/usr/local/bin
</snippet></ROW><ROW><id>12336451</id><snippet>/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
</snippet></ROW><ROW><id>12336707</id><snippet>def a_func(handle,color):
   ctypes.windll.kernel32.SetConsoleTextAttribute(handle, color)

a_func(handle,AQUA)
</snippet></ROW><ROW><id>12336707</id><snippet>colorFunc = ctypes.windll.kernel32.SetConsoleTextAttribute
colorFunc(handle,AQUA)
</snippet></ROW><ROW><id>12336884</id><snippet>&gt;&gt;&gt; import pymongo
&gt;&gt;&gt; c = pymongo.Connection()

&gt;&gt;&gt; db = c.mydb
&gt;&gt;&gt; db.mydocs.find().count()
0
&gt;&gt;&gt; db.mydocs.update({'myid': '438'}, {"$set": {'keyA':'valueA'}}, upsert = True)
&gt;&gt;&gt; db.mydocs.find().count()
1
&gt;&gt;&gt; db.mydocs.find_one()
{u'myid': u'438', u'keyA': u'valueA', u'_id': ObjectId('504c2fd1a694cc9624bbd6a2')}
</snippet></ROW><ROW><id>12337182</id><snippet>somefunct(name=value, ...)</snippet></ROW><ROW><id>12337182</id><snippet>hasattr</snippet></ROW><ROW><id>12337182</id><snippet>...(... PyObject *args)</snippet></ROW><ROW><id>12337182</id><snippet>...(... PyObject *args, PyObject *kwds)</snippet></ROW><ROW><id>12337182</id><snippet>PyArg_ParseTupleAndKeywords</snippet></ROW><ROW><id>12337329</id><snippet>&gt;&gt;&gt; def foo(lst):
    print type(lst)

&gt;&gt;&gt; foo(['bar'])
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>12337352</id><snippet>matched = [x for x in dict.keys if len(set(x[:6])) == 1]
</snippet></ROW><ROW><id>12337649</id><snippet>_socketobject</snippet></ROW><ROW><id>12337649</id><snippet>socket</snippet></ROW><ROW><id>12337649</id><snippet>tcp_server_socket</snippet></ROW><ROW><id>12337649</id><snippet>tcpCliSock</snippet></ROW><ROW><id>12337649</id><snippet>addr</snippet></ROW><ROW><id>12337649</id><snippet>tcp_server.py</snippet></ROW><ROW><id>12337649</id><snippet>import tcp_server</snippet></ROW><ROW><id>12337649</id><snippet>import</snippet></ROW><ROW><id>12337649</id><snippet>tcp_server_socket = socket(....)</snippet></ROW><ROW><id>12337649</id><snippet>start_server</snippet></ROW><ROW><id>12337649</id><snippet>if __name__ == "__main__":
    start_server()
</snippet></ROW><ROW><id>12337649</id><snippet>import tcp_server</snippet></ROW><ROW><id>12337649</id><snippet>DATA</snippet></ROW><ROW><id>12337649</id><snippet>tcpCliSock</snippet></ROW><ROW><id>12337649</id><snippet>start_server</snippet></ROW><ROW><id>12338117</id><snippet>Python 2.7.2+ (default, Oct  4 2011, 20:03:08) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; x = "123"
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; y = StringIO(x)
&gt;&gt;&gt; y.tell()
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12338117</id><snippet>k.set_contents_from_file(StringIO(image))
</snippet></ROW><ROW><id>12338129</id><snippet>class Project(models.Manager)
</snippet></ROW><ROW><id>12338129</id><snippet>class Project(models.Model)
</snippet></ROW><ROW><id>12338129</id><snippet>models.Model</snippet></ROW><ROW><id>12338168</id><snippet>from iniparse import INIConfig

cfg = INIConfig(open('options.ini'))
print cfg.section.option
cfg.section.option = 'new option'

del cfg.section.option
del cfg.section

f = open('options.ini', 'w')
print &gt;&gt;f, cfg
f.close()
</snippet></ROW><ROW><id>12338168</id><snippet>remove_option</snippet></ROW><ROW><id>12338168</id><snippet>remove_section</snippet></ROW><ROW><id>12338208</id><snippet>./appcfg.sh help download_app</snippet></ROW><ROW><id>12338262</id><snippet>@app.route('/')
def index():
    return render_template('index.html')

@app.route('/dim_lights/&lt;room&gt;')
def dim_lights(**kwargs):
    dim_lights_for_room(kwargs['room'])
</snippet></ROW><ROW><id>12338262</id><snippet>'index.html'</snippet></ROW><ROW><id>12338262</id><snippet>&lt;a href="/dim_lights/lounge"&gt;Dim the Lights in the Lounge&lt;/a&gt;.</snippet></ROW><ROW><id>12338557</id><snippet>sphinx</snippet></ROW><ROW><id>12338557</id><snippet>pygments</snippet></ROW><ROW><id>12338557</id><snippet>django</snippet></ROW><ROW><id>12338557</id><snippet>fabric</snippet></ROW><ROW><id>12338782</id><snippet>def foo():
    spam = 'eggs'
    def bar():
        print spam
    del spam
</snippet></ROW><ROW><id>12338782</id><snippet>spam</snippet></ROW><ROW><id>12338782</id><snippet>bar</snippet></ROW><ROW><id>12338782</id><snippet>&gt;&gt;&gt; def foo():
...     spam = 'eggs'
...     def bar():
...         print spam
...     del spam
... 
SyntaxError: can not delete variable 'spam' referenced in nested scope
</snippet></ROW><ROW><id>12338782</id><snippet>spam</snippet></ROW><ROW><id>12338782</id><snippet>bar</snippet></ROW><ROW><id>12338782</id><snippet>foo</snippet></ROW><ROW><id>12338782</id><snippet>del spam</snippet></ROW><ROW><id>12338782</id><snippet>NameError</snippet></ROW><ROW><id>12338782</id><snippet>&gt;&gt;&gt; def foo():
...     spam = 'eggs'
...     def bar():
...         print(spam)
...     del spam
...     bar()
... 
&gt;&gt;&gt; foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in foo
  File "&lt;stdin&gt;", line 4, in bar
NameError: free variable 'spam' referenced before assignment in enclosing scope
</snippet></ROW><ROW><id>12339023</id><snippet>episode</snippet></ROW><ROW><id>12339023</id><snippet>title</snippet></ROW><ROW><id>12339023</id><snippet>def getText(nodelist):
    rc = []
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc.append(node.data)
    return ''.join(rc)
</snippet></ROW><ROW><id>12339023</id><snippet>for episode in xml.getElementsByTagName('episode'):
    for title in episode.getElementsByTagName('title'):
        print getText(title)
</snippet></ROW><ROW><id>12339270</id><snippet>#define MixedCase</snippet></ROW><ROW><id>12339270</id><snippet>#define ALLUPPERCASE</snippet></ROW><ROW><id>12339270</id><snippet>r'#define\s+(?![A-Z_]+\b)[A-Za-z_]+\b'
</snippet></ROW><ROW><id>12339270</id><snippet>\b</snippet></ROW><ROW><id>12339270</id><snippet>(?!..)</snippet></ROW><ROW><id>12339270</id><snippet>_</snippet></ROW><ROW><id>12339270</id><snippet>r'#define\s+(?![A-Z0-9_]+\b)\w+\b'
</snippet></ROW><ROW><id>12339270</id><snippet>\w</snippet></ROW><ROW><id>12339270</id><snippet>[A-Za-z0-9_]</snippet></ROW><ROW><id>12339406</id><snippet>&lt;title&gt;{% block title %}{{ settings.SETTING }}{% endblock %}&lt;/title&gt;
</snippet></ROW><ROW><id>12339406</id><snippet>{% block title %}your custom title{% endblock %} 
</snippet></ROW><ROW><id>12339416</id><snippet>findAll</snippet></ROW><ROW><id>12339416</id><snippet>findAllNext</snippet></ROW><ROW><id>12339416</id><snippet>nextSibling</snippet></ROW><ROW><id>12339416</id><snippet>find_all</snippet></ROW><ROW><id>12339645</id><snippet>pip install git+git://github.com/django/django.git@1.5b2
</snippet></ROW><ROW><id>12340004</id><snippet>import json

def escapejs(val):
    return json.dumps(str(val)) # *but see [Important Note] below to be safe

@app.route('/foo')
def foo():
    return bottle.jinja2_template('foo', template_settings={'filters': {'escapejs': escapejs}})
</snippet></ROW><ROW><id>12340004</id><snippet>template_settings</snippet></ROW><ROW><id>12340078</id><snippet>-l</snippet></ROW><ROW><id>12340078</id><snippet>-l|--listen &lt;num&gt;
       set  socket  listen queue to &lt;n&gt; (default 100, maximum is system
       dependent)
</snippet></ROW><ROW><id>12340302</id><snippet>names=True</snippet></ROW><ROW><id>12340302</id><snippet>np.genfromxt</snippet></ROW><ROW><id>12340302</id><snippet> data = np.genfromtxt(path_to_csv, dtype=float, delimiter=',', names=True) 
</snippet></ROW><ROW><id>12340302</id><snippet>dtype=float</snippet></ROW><ROW><id>12340302</id><snippet>dtype=None</snippet></ROW><ROW><id>12340302</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12340302</id><snippet>_</snippet></ROW><ROW><id>12341217</id><snippet>ResultSet</snippet></ROW><ROW><id>12341217</id><snippet>ElasticSearchModel</snippet></ROW><ROW><id>12341217</id><snippet>_id</snippet></ROW><ROW><id>12341217</id><snippet>_meta</snippet></ROW><ROW><id>12341217</id><snippet>r._meta.id
</snippet></ROW><ROW><id>12341217</id><snippet>_meta</snippet></ROW><ROW><id>12341217</id><snippet>(Pdb) pp res._meta
{'connection': &lt;pyes.es.ES object at 0x8268ecc&gt;,
 u'id': u'2',
 u'index': u'twitter',
 'parent': None,
 u'score': 0.095891505000000002,
 u'type': u'tweet'}
</snippet></ROW><ROW><id>12341222</id><snippet>site</snippet></ROW><ROW><id>12341383</id><snippet>@event.listens_for(User, "after_insert")
def update_hash(mapper, connection, target):
    user_table = mapper.local_table
    connection.execute(
          user_table.update().
              values(hash=hash_function(target.id)).
              where(user_table.c.id==target.id)
    )
</snippet></ROW><ROW><id>12341383</id><snippet>@event.listens_for(Session, "after_flush")
def update_hash(session, flush_context):
    hashes = [
        {"user_id":element.id, "hash":hash_function(element.id)}
        for element in session.new if isinstance(element, User)
    ]
    user_table = mapper.local_table
    session.execute(
          user_table.update().
              values(hash=bind('hash')).
              where(user_table.c.id==bind('user_id')),
          hashes
    )
</snippet></ROW><ROW><id>12341517</id><snippet>nvals = scipy.interpolate.griddata((lon_old.ravel(),     
                                   lat_old.ravel()),    
                                   tmp.ravel(),          
                                   (lon_new,lat_new),    
                                   method='linear')
</snippet></ROW><ROW><id>12341532</id><snippet>safe</snippet></ROW><ROW><id>12341600</id><snippet>__getitem__</snippet></ROW><ROW><id>12341600</id><snippet>&gt;&gt;&gt; class idDict(dict):
    def __getitem__(self,key):
        return 'dsaads'

&gt;&gt;&gt; d=idDict()
&gt;&gt;&gt; d['a']
'dsaads'

&gt;&gt;&gt; help(dict.__getitem__)

Help on method_descriptor:

__getitem__(...)
    x.__getitem__(y) &lt;==&gt; x[y]
</snippet></ROW><ROW><id>12341732</id><snippet>&amp;</snippet></ROW><ROW><id>12341732</id><snippet>&amp;</snippet></ROW><ROW><id>12341877</id><snippet>objects.inv</snippet></ROW><ROW><id>12341877</id><snippet>objects.inv</snippet></ROW><ROW><id>12342003</id><snippet>for line in engine.stdout:
    print(line.strip())
</snippet></ROW><ROW><id>12342003</id><snippet>stdout</snippet></ROW><ROW><id>12342221</id><snippet>Counter()</snippet></ROW><ROW><id>12342221</id><snippet>from collections import Counter
with open(file) as f:
    c=Counter()
    for x in f:
        c+=Counter(x.strip())
</snippet></ROW><ROW><id>12342221</id><snippet>c=Counter(f.read().strip())</snippet></ROW><ROW><id>12342221</id><snippet>&gt;&gt;&gt; c=Counter()
&gt;&gt;&gt; c+=Counter('aaabbbcccddd eee fff ggg')
&gt;&gt;&gt; c
Counter({'a': 3, ' ': 3, 'c': 3, 'b': 3, 'e': 3, 'd': 3, 'g': 3, 'f': 3})
&gt;&gt;&gt; c+=Counter('aaabbbccc')
Counter({'a': 6, 'c': 6, 'b': 6, ' ': 3, 'e': 3, 'd': 3, 'g': 3, 'f': 3})
</snippet></ROW><ROW><id>12342221</id><snippet>count()</snippet></ROW><ROW><id>12342221</id><snippet>from string import ascii_lowercase     # ascii_lowercase =='abcdefghijklmnopqrstuvwxyz'
with open(file) as f:
    text=f.read().strip()
    dic={}
    for x in ascii_lowercase:
        dic[x]=text.count(x)
</snippet></ROW><ROW><id>12342289</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>12342289</id><snippet>self</snippet></ROW><ROW><id>12342289</id><snippet>setupUi()</snippet></ROW><ROW><id>12342289</id><snippet>StartQt4</snippet></ROW><ROW><id>12342289</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>12342289</id><snippet>show()</snippet></ROW><ROW><id>12342312</id><snippet>JProgressBar</snippet></ROW><ROW><id>12342467</id><snippet>len</snippet></ROW><ROW><id>12342467</id><snippet>length</snippet></ROW><ROW><id>12342473</id><snippet>$PATH</snippet></ROW><ROW><id>12342473</id><snippet>"path"</snippet></ROW><ROW><id>12342473</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>12342473</id><snippet>python</snippet></ROW><ROW><id>12342473</id><snippet>echo $PATH</snippet></ROW><ROW><id>12342473</id><snippet>{
    "cmd": ["python", "-u", "$file"],
    "path": "/opt/local/bin:/opt/local/sbin:/Library/Frameworks/Python.framework/Versions/Current/bin:/Users/yourloginname/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin",
    "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
    "selector": "source.python"
}
</snippet></ROW><ROW><id>12342473</id><snippet>/bin/bash</snippet></ROW><ROW><id>12342473</id><snippet>$PATH</snippet></ROW><ROW><id>12342473</id><snippet>"shell"</snippet></ROW><ROW><id>12342473</id><snippet>{
    "cmd": ["python", "-u", "$file"],
    "shell": true,
    "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
    "selector": "source.python"
}
</snippet></ROW><ROW><id>12342473</id><snippet>{
    "cmd": ["/opt/local/bin/python", "-u", "$file"],
    "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
    "selector": "source.python"
}
</snippet></ROW><ROW><id>12342573</id><snippet>X1 &gt;= 1.0e-7
</snippet></ROW><ROW><id>12342712</id><snippet>STR_TO_DATE('2012-09-09 00:00:00-05:00','%Y-%m-%d %k:%i:%s')
</snippet></ROW><ROW><id>12342712</id><snippet>STR_TO_DATE('2012-09-09 00:00:00-05:00','%Y-%m-%d %H:%i:%s')
</snippet></ROW><ROW><id>12342712</id><snippet>%k</snippet></ROW><ROW><id>12342712</id><snippet>%H</snippet></ROW><ROW><id>12342778</id><snippet>os.execl(python, python, * sys.argv)
</snippet></ROW><ROW><id>12342778</id><snippet>do_GET</snippet></ROW><ROW><id>12342894</id><snippet>defaultdict</snippet></ROW><ROW><id>12342894</id><snippet>Counter</snippet></ROW><ROW><id>12342894</id><snippet>if</snippet></ROW><ROW><id>12342931</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>12342931</id><snippet>&gt;&gt;&gt; inspect.getargspec(test)
ArgSpec(args=['arg1', 'arg2', 'arg3'], varargs=None, keywords=None,
        defaults=(None,))
</snippet></ROW><ROW><id>12342931</id><snippet>keywords</snippet></ROW><ROW><id>12342931</id><snippet>None</snippet></ROW><ROW><id>12342931</id><snippet>**kwargs</snippet></ROW><ROW><id>12342931</id><snippet>as</snippet></ROW><ROW><id>12342931</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>12342931</id><snippet>defaults = dict(zip(*[reversed(l) for l in (as.args, as.defaults or [])]))
</snippet></ROW><ROW><id>12342977</id><snippet>__call__</snippet></ROW><ROW><id>12342977</id><snippet>return super(HMM, self).__call__(PriorProbs)
</snippet></ROW><ROW><id>12342977</id><snippet>super()</snippet></ROW><ROW><id>12342977</id><snippet>.__getattribute__()</snippet></ROW><ROW><id>12342977</id><snippet>__call__</snippet></ROW><ROW><id>12342977</id><snippet>__call__</snippet></ROW><ROW><id>12343349</id><snippet>from functools import partial
</snippet></ROW><ROW><id>12343349</id><snippet>def callback(label, instance, *args):
    label.text='kkk'
</snippet></ROW><ROW><id>12343349</id><snippet>button1.bind(on_press=partial(callback, etykieta))
</snippet></ROW><ROW><id>12343379</id><snippet>Algorithm</snippet></ROW><ROW><id>12343379</id><snippet>execute</snippet></ROW><ROW><id>12343379</id><snippet>__call__</snippet></ROW><ROW><id>12343379</id><snippet>Algorithm</snippet></ROW><ROW><id>12343379</id><snippet>Algorithm</snippet></ROW><ROW><id>12343379</id><snippet>execute</snippet></ROW><ROW><id>12343379</id><snippet>def createDSLAlgorithm(code):
    def coderunner(*args, **kwargs):
        DSLInterpreter().interpret(code, *args, **kwargs)
    return coderunner
</snippet></ROW><ROW><id>12343379</id><snippet>__call__</snippet></ROW><ROW><id>12343458</id><snippet>b_results = ""</snippet></ROW><ROW><id>12343458</id><snippet>append</snippet></ROW><ROW><id>12343458</id><snippet>b_results = []</snippet></ROW><ROW><id>12343458</id><snippet>b_results</snippet></ROW><ROW><id>12343458</id><snippet>os.path.join</snippet></ROW><ROW><id>12343458</id><snippet>return os.path.join(*b_results)
</snippet></ROW><ROW><id>12343472</id><snippet>self.move</snippet></ROW><ROW><id>12343472</id><snippet>self.move</snippet></ROW><ROW><id>12343472</id><snippet>move</snippet></ROW><ROW><id>12343472</id><snippet>board.unmakeMove(self.move, player)</snippet></ROW><ROW><id>12343472</id><snippet>self.max_eval = float('-infinity')</snippet></ROW><ROW><id>12343472</id><snippet>def negaMax(self, board, rules, ply, player):
        """ Implements a minimax algorithm. """
        if ply == 0:
            return self.positionEvaluation()

        max_eval = float('-infinity')

        move_list = board.generateMoves(rules, player)
        for move in move_list:
            board.makeMove(move, player)
            currentEval = -self.negaMax(board, rules, ply - 1, board.getOtherPlayer(player))
            board.unmakeMove(move, player)

            if currentEval &gt; max_eval:
                max_eval = currentEval 
        return max_eval
</snippet></ROW><ROW><id>12343526</id><snippet>jsonpath.jsonpath(impi_node, "$.sensor[?(@.sensor_type=='Temperature')]")
</snippet></ROW><ROW><id>12343528</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import scipy.optimize
</snippet></ROW><ROW><id>12343528</id><snippet>&gt;&gt;&gt; x = np.linspace(0, 10, 50)
&gt;&gt;&gt; y = 3*x**2+5+2*np.sin(x)
</snippet></ROW><ROW><id>12343528</id><snippet>&gt;&gt;&gt; y.mean()
106.3687338223809
&gt;&gt;&gt; y.std()
91.395548605660522
</snippet></ROW><ROW><id>12343528</id><snippet>&gt;&gt;&gt; def func(x, a, b, c):
...     return a*x**2+b+c*np.sin(x)
... 
&gt;&gt;&gt; ynoisy = y + np.random.normal(0, 0.2, size=len(x))
&gt;&gt;&gt; popt, pcov = scipy.optimize.curve_fit(func, x, ynoisy)
&gt;&gt;&gt; popt
array([ 3.00015527,  4.99421236,  2.03380468])
</snippet></ROW><ROW><id>12343528</id><snippet>xerr = 0.5
yerr = abs(np.random.normal(0.3, 10.0))
fitted_data = func(x, *popt)

# using the simplified, non-object-oriented interface here
# handy for quick plots

from pylab import *
errorbar(x, ynoisy, xerr=xerr, yerr=yerr, c="green", label="actual data")
plot(x, fitted_data, c="blue", label="fitted function")
xlim(0, 10)
ylim(0, 350)
legend()
xlabel("time since post")
ylabel("coolness of Python")
savefig("cool.png")
</snippet></ROW><ROW><id>12343956</id><snippet>import IPython.core.completer
old_dir = IPython.core.completer.dir2

def my_dir(obj):
    methods = old_dir(obj)
    #merge your swig methods in
    return methods

IPython.core.completer.dir2 = my_dir
</snippet></ROW><ROW><id>12344313</id><snippet>{% for record in records %}
addRecord({
    title: {{ title|json_encode }}, // assuming you have json_encode set up as a filter
    position: {
        latitude: {{ record.position.latitude|json_encode }},
        longitude: {{ record.position.longitude|json_encode }}
    }
});
{% endfor %}
</snippet></ROW><ROW><id>12344404</id><snippet>from pymongo.objectid import ObjectId
</snippet></ROW><ROW><id>12344404</id><snippet>from bson.objectid import ObjectId
</snippet></ROW><ROW><id>12344404</id><snippet>fs.exists(ObjectId('504a36d93324f20944247af2'))
</snippet></ROW><ROW><id>12344446</id><snippet>import json
# This converts from JSON to a python dict
parsed_input = json.loads(input_data)

# Now, all of your static variables are referenceable as keys:
secret = parsed_input['secret']
minutes = parsed_input['minutes']
link = parsed_input['link']

# Plus, you can get your bookmark collection as:
bookmark_collection = parsed_input['bookmark_collection']

# Print a list of names of the bookmark collections...
print bookmark_collection.keys() # Note this contains sublinks, so remove it if needed

# Get the name of the Boarding Pass bookmark:
print bookmark_collection['boarding_pass']['name']

# Print out a list of all bookmark links as:
#  Boarding Pass
#    * 1: http://www.1.com/
#    * 2: http://www.2.com/
#  ...
for bookmark_definition in bookmark_collection.values():
    # Skip sublinks...
    if bookmark_definition['name'] == 'sublinks':
        continue
    print bookmark_definition['name']
    for bookmark in bookmark_definition['bookmarks']:
        print "    * %(name)s: %(link)s" % bookmark

# Get the sublink definition:
sublinks = parsed_input['bookmark_collection']['sublinks']

# .. and print them
print sublinks['name']
for link in sublinks['link']:
    print '  *', link
</snippet></ROW><ROW><id>12344897</id><snippet>def add_comment(self, comment):
    comment = ItemTypeComment()
    self.comments.append(comment)
</snippet></ROW><ROW><id>12344972</id><snippet>dpkg-dev</snippet></ROW><ROW><id>12344972</id><snippet>sudo apt-get install dpkg-dev
</snippet></ROW><ROW><id>12344972</id><snippet>libz.so</snippet></ROW><ROW><id>12344972</id><snippet>/usr/lib</snippet></ROW><ROW><id>12344972</id><snippet>/usr/lib/x86_64-linux-gnu</snippet></ROW><ROW><id>12344972</id><snippet>dpkg-dev</snippet></ROW><ROW><id>12344972</id><snippet>dpkg-architecture</snippet></ROW><ROW><id>12345188</id><snippet>pat1 = '(?:a|b)+'
</snippet></ROW><ROW><id>12345197</id><snippet>data = " ".join(bin(ord(b))[2:].rjust(8, "0") for b in data)
</snippet></ROW><ROW><id>12345243</id><snippet>print</snippet></ROW><ROW><id>12345243</id><snippet>print</snippet></ROW><ROW><id>12345243</id><snippet>print("\n".join(filter(OnlyRecent,lines)))
</snippet></ROW><ROW><id>12345316</id><snippet>(?!...</snippet></ROW><ROW><id>12345316</id><snippet>(?&lt;!...</snippet></ROW><ROW><id>12345316</id><snippet>re.compile(r"(?&lt;!Profile Pictures)&lt;/strong&gt;&lt;/a&gt;&lt;div class=\"photoTextSubtitle fsm fwn fcg\"&gt;(\d+) photos&lt;/div&gt;")
</snippet></ROW><ROW><id>12345468</id><snippet>models/__init__.py</snippet></ROW><ROW><id>12345468</id><snippet>from User import User
from Group import Group
</snippet></ROW><ROW><id>12345468</id><snippet>models</snippet></ROW><ROW><id>12345468</id><snippet>from ..models import User</snippet></ROW><ROW><id>12345468</id><snippet>user</snippet></ROW><ROW><id>12345468</id><snippet>User</snippet></ROW><ROW><id>12345646</id><snippet>_id</snippet></ROW><ROW><id>12345646</id><snippet>db.collection.find({}, {'_id': False})
</snippet></ROW><ROW><id>12345646</id><snippet>_id</snippet></ROW><ROW><id>12345788</id><snippet>logging</snippet></ROW><ROW><id>12345788</id><snippet>/foo</snippet></ROW><ROW><id>12345788</id><snippet>import logging

class IgnoreURLFilter(logging.Filter):
    # simple example of log message filtering

    def __init__(self, ignore):
        self.ignore = 'GET /' + ignore

    def filter(self, record):
        return not self.ignore in record.getMessage()

app = cherrypy.tree.mount( YourApplication() )
app.log.access_log.addFilter( IgnoreURLFilter('foo') )
cherrypy.engine.start()
</snippet></ROW><ROW><id>12345819</id><snippet>&gt;&gt;&gt; aString = 'abc'
&gt;&gt;&gt; anInt = 123
&gt;&gt;&gt; type(aString) is str
True
&gt;&gt;&gt; type(aString) is int
False
&gt;&gt;&gt; type(anInt) is str
False
&gt;&gt;&gt; type(anInt) is int
True
</snippet></ROW><ROW><id>12345819</id><snippet>Pickle</snippet></ROW><ROW><id>12346169</id><snippet> `str.format`: New in version 2.6.
</snippet></ROW><ROW><id>12346261</id><snippet>&gt;&gt;&gt; import datetime, pytz
&gt;&gt;&gt; melbourne = pytz.timezone("Australia/Melbourne")
&gt;&gt;&gt; melbourne.utcoffset(datetime.datetime.now())
datetime.timedelta(0, 36000)

&gt;&gt;&gt; pacific = pytz.timezone("US/Pacific")
&gt;&gt;&gt; pacific.utcoffset(datetime.datetime.now())
datetime.timedelta(-1, 61200)
&gt;&gt;&gt; -1*86400+61200
-25200
&gt;&gt;&gt; pacific.utcoffset(datetime.datetime.now()).total_seconds()
-25200.0
</snippet></ROW><ROW><id>12346357</id><snippet>elem = obr.webframe.findAllElements('.qust input').toList()[1]
js_click = """
           var evt = document.createEvent("MouseEvents");
           evt.initMouseEvent("click", true, true, window, 1, 1, 1, 1, 1, false, false, false, false, 0, this);
           this.dispatchEvent(evt);
           """
elem.evaluateJavaScript(js_click)
</snippet></ROW><ROW><id>12346369</id><snippet>','</snippet></ROW><ROW><id>12346369</id><snippet>'\n'</snippet></ROW><ROW><id>12346369</id><snippet> new_destination = post.destination.replate(',', '\n')
</snippet></ROW><ROW><id>12346369</id><snippet>linebreaksbr</snippet></ROW><ROW><id>12346369</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>12346369</id><snippet>{{new_destination|linebreaksbr}}
</snippet></ROW><ROW><id>12346863</id><snippet>mimeType='audio/mpeg' OR mimeType='audio/flac'
                    ^
</snippet></ROW><ROW><id>12346863</id><snippet>or</snippet></ROW><ROW><id>12346863</id><snippet>mpegs = drive.files().list().setQ("mimeType='audio/mpeg'").execute()
flacs = drive.files().list().setQ("mimeType='audio/flac'").execute()
</snippet></ROW><ROW><id>12347338</id><snippet>cur = db2.cursor()
#get the file
cur.execute("SELECT mimetype,File,Name FROM ContentFiles WHERE ContentID=10414")
archivo = cur.fetchone()

imagen = open(archivo[2],'wb')
imagen.write(archivo[1].decode('base64'))
imagen.close()
</snippet></ROW><ROW><id>12347653</id><snippet>&gt;&gt;&gt; import os

&gt;&gt;&gt; os.path.expanduser('~/all_pulsars_1400list/J0543_1400list.txt')
'home/xxx/all_pulsars_1400list/J0543_1400list.txt'
</snippet></ROW><ROW><id>12347687</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; types.BuiltinFunctionType
&lt;type 'builtin_function_or_method'&gt;
</snippet></ROW><ROW><id>12347687</id><snippet>isintance(o, types.BuiltinFunctionType)
</snippet></ROW><ROW><id>12347793</id><snippet>timeit</snippet></ROW><ROW><id>12347793</id><snippet>&gt;&gt;&gt; foo = 3
&gt;&gt;&gt; foo.__hash__()
3
&gt;&gt;&gt; foo = 1856348
&gt;&gt;&gt; foo.__hash__()
1856348
&gt;&gt;&gt; foo = "\x00"
&gt;&gt;&gt; foo.__hash__()
1
&gt;&gt;&gt; foo = "\x01"
&gt;&gt;&gt; foo.__hash__()
128000384
&gt;&gt;&gt; foo = "\x02"
&gt;&gt;&gt; foo.__hash__()
256000771
</snippet></ROW><ROW><id>12348296</id><snippet>formatter</snippet></ROW><ROW><id>12348296</id><snippet>numpy.set_printoptions(formatter={'float': lambda x: 'float: ' + str(x)})
</snippet></ROW><ROW><id>12348296</id><snippet>float: 3.0</snippet></ROW><ROW><id>12348296</id><snippet>float: 12.6666666666</snippet></ROW><ROW><id>12348372</id><snippet>cmd</snippet></ROW><ROW><id>12348372</id><snippet>*.py</snippet></ROW><ROW><id>12348372</id><snippet>vim</snippet></ROW><ROW><id>12348372</id><snippet>glob</snippet></ROW><ROW><id>12348410</id><snippet>path..to..south/management/commands</snippet></ROW><ROW><id>12348410</id><snippet>south</snippet></ROW><ROW><id>12348410</id><snippet>.</snippet></ROW><ROW><id>12348410</id><snippet>..</snippet></ROW><ROW><id>12348410</id><snippet>$ python manage.py shell
&gt;&gt;&gt; import os
&gt;&gt;&gt; import south.management.commands.migrate
&gt;&gt;&gt; assert os.path.isfile(south.management.commands.migrate.__file__)
</snippet></ROW><ROW><id>12348545</id><snippet>patchlevel.h</snippet></ROW><ROW><id>12348545</id><snippet>#define PY_MAJOR_VERSION    2
#define PY_MINOR_VERSION    5
#define PY_MICRO_VERSION    2
</snippet></ROW><ROW><id>12348559</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>12348559</id><snippet>eval</snippet></ROW><ROW><id>12348559</id><snippet>pyparsing</snippet></ROW><ROW><id>12348559</id><snippet>from ast import literal_eval

s = "'a', 'b', ['c', 'd', 'z']"
print literal_eval(s)
</snippet></ROW><ROW><id>12348703</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>12348703</id><snippet>from ast import literal_eval

s = "[ (3,7), (8,15), (17,21) ]"
t = literal_eval(s)
# [(3, 7), (8, 15), (17, 21)]

type(t)
&lt;type 'list'&gt;
type(t[0])
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>12348703</id><snippet>pyparsing</snippet></ROW><ROW><id>12348766</id><snippet>#default method to get file upload path
def get_upload_to(instance, filename):
    return instance.get_upload_to_path(filename)

class BaseImage(models.Model):
    description = models.CharField(max_length=200)
    image = models.ImageField(upload_to=get_upload_to)

    class Meta:
        abstract = True
    #method on the class to provide upload path for files specific to these objects
    def get_upload_to_path(instance, filename):
         return 'images/'+filename

class PostImage(BaseImage):
    in_text = models.BooleanField()

    #method to provide upload path for PostImage objects
    def get_upload_to_path(instance, filename):
    #change date.year etc to appropriate variables
         return 'images/news/%Y/%m/%d' % (date.year, date.month, date.day)
</snippet></ROW><ROW><id>12348895</id><snippet>import re
p = re.compile(r"\b(foo|bar|baz)\b")
p.sub("---", "foo XfooX bar YbarY baz ZbazZ")
# =&gt; '--- XfooX --- YbarY --- ZbazZ'
</snippet></ROW><ROW><id>12348895</id><snippet>prepos = ["foo", "bar", "baz"]
p = re.compile(r"\b(" + "|".join(prepos) + r")\b")
p.sub("---", "foo XfooX bar YbarY baz ZbazZ")
# =&gt; '--- XfooX --- YbarY --- ZbazZ'
</snippet></ROW><ROW><id>12349281</id><snippet>#!/bin/bash

# loop through all filenames in current dir
for filename in *; do

    # How to extract the date from the file name
    date_from_file=${filename:(-8)}

    # How to get the file's modification date in the same format
    date_modified=$(stat -c %y "$filename" | cut -d ' ' -f1 | sed 's/-//g')

    # test for inequality
    if [ $date_from_file -ne $date_modified ]; then

        ... # do your thing

    fi

done
</snippet></ROW><ROW><id>12349319</id><snippet> import datetime

 class mydatetime(object):
     ...
     def render(self):
         ...

 datetime.datetime = mydatetime
</snippet></ROW><ROW><id>12349512</id><snippet>r"[^\W\d]"</snippet></ROW><ROW><id>12349649</id><snippet>def login(): ...
def check_tooltips(): ...
</snippet></ROW><ROW><id>12349649</id><snippet>import tooltips
def login(): ...
def main():
    login()
    tooltips.check_tooltips()
</snippet></ROW><ROW><id>12349894</id><snippet>&gt;&gt;&gt; data = '''\
... &lt;data&gt;
...   &lt;products&gt;
...       &lt;color&gt;fumÃ¨&lt;/color&gt;
...   &lt;/products&gt;
... &lt;/data&gt;
... '''
&gt;&gt;&gt; x = ElementTree.fromstring(data)
&gt;&gt;&gt; x[0][0].text
u'fum\xe8'
</snippet></ROW><ROW><id>12349894</id><snippet>x = ElemenTree.parse('file.xml')
</snippet></ROW><ROW><id>12350209</id><snippet>;</snippet></ROW><ROW><id>12350209</id><snippet>class stateClass: 
    state = 0 
</snippet></ROW><ROW><id>12350209</id><snippet>class level attribute</snippet></ROW><ROW><id>12350209</id><snippet>state</snippet></ROW><ROW><id>12350209</id><snippet>stateClass</snippet></ROW><ROW><id>12350209</id><snippet>stateClass</snippet></ROW><ROW><id>12350209</id><snippet>state</snippet></ROW><ROW><id>12350209</id><snippet>stateClass</snippet></ROW><ROW><id>12350209</id><snippet>class State(object):
    def __init__(self, number):
        self.state = number

Hawaii = State(50)  
Kentucky = State(23) # (making state numbers up here...) 

my_states = []
my_states.append(Hawaii)
my_states.append(Kentucky)
</snippet></ROW><ROW><id>12350209</id><snippet>print Hawaii.state
</snippet></ROW><ROW><id>12350209</id><snippet>property</snippet></ROW><ROW><id>12350209</id><snippet>class State(object):
    def __init__(self, number):
        self._state = number
    @property
    def state(self):
        return self._state
</snippet></ROW><ROW><id>12350235</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>12350235</id><snippet>if len(path) &gt; 255:
    path, ext = os.path.split(path)
    path = path[:252-len(ext)] + '...' + ext
</snippet></ROW><ROW><id>12350505</id><snippet>aix3 aix4 atheos beos5 darwin freebsd2 freebsd3 freebsd4 freebsd5
freebsd6 freebsd7 generic irix5 irix6 linux2 mac netbsd1 next3 os2emx
riscos sunos5 unixware7
</snippet></ROW><ROW><id>12350505</id><snippet>linux3, freebsd8, win32, dos, os2
</snippet></ROW><ROW><id>12350505</id><snippet>get_os_name</snippet></ROW><ROW><id>12350505</id><snippet>(os_name, 32/64bit, variant)</snippet></ROW><ROW><id>12350998</id><snippet>xp : 1-D sequence of floats
    The x-coordinates of the data points, must be increasing.
</snippet></ROW><ROW><id>12350998</id><snippet>List_CD</snippet></ROW><ROW><id>12350998</id><snippet>d = dict(zip(List_CD, List_Dose))
xp = sorted(d)
yp = [d[x] for x in xp]
numpy.interp(2000., xp, yp)
# returns 21.791381359216665
</snippet></ROW><ROW><id>12350998</id><snippet>order = numpy.argsort(List_CD)
numpy.interp(2000., np.array(List_CD)[order], np.array(List_Dose)[order])
</snippet></ROW><ROW><id>12351121</id><snippet>&gt;&gt;&gt; def ret_Nothing():
...     return
... 
&gt;&gt;&gt; def ret_None():
...     return None
... 
&gt;&gt;&gt; def ret_0():
...     return 0
... 
&gt;&gt;&gt; ret_Nothing() == None
True
&gt;&gt;&gt; ret_None() == None
True
&gt;&gt;&gt; ret_0() == None
False
&gt;&gt;&gt; # and...
&gt;&gt;&gt; repr(ret_Nothing())
'None'
</snippet></ROW><ROW><id>12351121</id><snippet>0</snippet></ROW><ROW><id>12351121</id><snippet>None</snippet></ROW><ROW><id>12351121</id><snippet>False</snippet></ROW><ROW><id>12351121</id><snippet>&gt;&gt;&gt; if ret_0():
...     print 'this will not be printed'
... else:
...     print '0 is boolean False'
... 
0 is boolean False
&gt;&gt;&gt; if ret_None():
...     print 'this will not be printed'
... else:
...     print 'None is also boolean False'
... 
None is also boolean False
</snippet></ROW><ROW><id>12351237</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>12351237</id><snippet>!=</snippet></ROW><ROW><id>12351496</id><snippet>len(list(a))
</snippet></ROW><ROW><id>12351496</id><snippet>list(a)</snippet></ROW><ROW><id>12351496</id><snippet>len()</snippet></ROW><ROW><id>12351496</id><snippet>a = list(a)
len(a) 
</snippet></ROW><ROW><id>12351701</id><snippet>zip</snippet></ROW><ROW><id>12351701</id><snippet>iterable_of_rows = zip(*my_list_of_columns)
</snippet></ROW><ROW><id>12351701</id><snippet>import operator
sorted_list_of_rows = sorted(zip(*my_list_of_columns), key = operator.itemgetter(2,3))
list_of_columns = list(zip(*sorted_list_of_rows))
</snippet></ROW><ROW><id>12351701</id><snippet>&gt;&gt;&gt; my_list_of_columns = [[45,25,48],[67,22,54],["Row","Abe","Abe"],["Fine","Real","Noon"]]
&gt;&gt;&gt; import operator
&gt;&gt;&gt; sorted_list_of_rows = sorted(zip(*my_list_of_columns), key = operator.itemgetter(2,3))
&gt;&gt;&gt; list_of_columns = list(zip(*sorted_list_of_rows))
&gt;&gt;&gt; list_of_columns
[(48, 25, 45), (54, 22, 67), ('Abe', 'Abe', 'Row'), ('Noon', 'Real', 'Fine')]
</snippet></ROW><ROW><id>12351950</id><snippet>multiprocessing.pool.ThreadPool</snippet></ROW><ROW><id>12351950</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12351950</id><snippet>pool.map</snippet></ROW><ROW><id>12352144</id><snippet>dispatcher.send</snippet></ROW><ROW><id>12352144</id><snippet>asyncore</snippet></ROW><ROW><id>12352237</id><snippet>sys.stdout</snippet></ROW><ROW><id>12352237</id><snippet>import Tkinter as tk
import sys

class ExampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        toolbar = tk.Frame(self)
        toolbar.pack(side="top", fill="x")
        b1 = tk.Button(self, text="print to stdout", command=self.print_stdout)
        b2 = tk.Button(self, text="print to stderr", command=self.print_stderr)
        b1.pack(in_=toolbar, side="left")
        b2.pack(in_=toolbar, side="left")
        self.text = tk.Text(self, wrap="word")
        self.text.pack(side="top", fill="both", expand=True)
        self.text.tag_configure("stderr", foreground="#b22222")

        sys.stdout = TextRedirector(self.text, "stdout")
        sys.stderr = TextRedirector(self.text, "stderr")

    def print_stdout(self):
        '''Illustrate that using 'print' writes to stdout'''
        print "this is stdout"

    def print_stderr(self):
        '''Illustrate that we can write directly to stderr'''
        sys.stderr.write("this is stderr\n")

class TextRedirector(object):
    def __init__(self, widget, tag="stdout"):
        self.widget = widget
        self.tag = tag

    def write(self, str):
        self.widget.configure(state="normal")
        self.widget.insert("end", str, (self.tag,))
        self.widget.configure(state="disabled")

app = ExampleApp()
app.mainloop()
</snippet></ROW><ROW><id>12352483</id><snippet>engines = []
sessions = []
for dbconninfo in databases:
    engine = create_engine(dbconninfo)
    engines.append(engine)
    sessions.append(sessionmaker(bind=engine)())
</snippet></ROW><ROW><id>12353137</id><snippet>DOCTYPE</snippet></ROW><ROW><id>12353137</id><snippet>&lt;!Co Dreef / Eelco de Graaff Faculteit der Rechtsgeleerdheid Universiteit Leiden&gt;&lt;!e-mail j.dreef@law.leidenuniv.nl &gt;
</snippet></ROW><ROW><id>12353137</id><snippet>import mechanize

url = 'http://zrs.leidenuniv.nl/ul/start.php'

br = mechanize.Browser()
response = br.open(url)
response.set_data(response.get_data()[177:])
br.set_response(response)

br.select_form(nr = 0)
</snippet></ROW><ROW><id>12353363</id><snippet>for key, value in data.items():
    print key, value
</snippet></ROW><ROW><id>12353419</id><snippet>class MC(mechanize.Browser):
    def __init__(self):
        self.set_handle_equiv(True)
</snippet></ROW><ROW><id>12353419</id><snippet>__init__</snippet></ROW><ROW><id>12353419</id><snippet>class MC(mechanize.Browser):
    def __init__(self):
        mechanize.Browser.__init__(self)
        self.set_handle_equiv(True)
</snippet></ROW><ROW><id>12353419</id><snippet>__init__</snippet></ROW><ROW><id>12353419</id><snippet>Browser</snippet></ROW><ROW><id>12353419</id><snippet>super(MC, self).__init__()</snippet></ROW><ROW><id>12353419</id><snippet>super()</snippet></ROW><ROW><id>12353450</id><snippet>itertools.cycle</snippet></ROW><ROW><id>12353450</id><snippet>&gt;&gt;&gt; s = range(3)
&gt;&gt;&gt; s
[0, 1, 2]
&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; c = cycle(s)
&gt;&gt;&gt; c
&lt;itertools.cycle object at 0xb72697cc&gt;
&gt;&gt;&gt; [next(c) for i in range(10)]
[0, 1, 2, 0, 1, 2, 0, 1, 2, 0]
&gt;&gt;&gt; c = cycle(['pS', 'mS'])
&gt;&gt;&gt; [next(c) for i in range(10)]
['pS', 'mS', 'pS', 'mS', 'pS', 'mS', 'pS', 'mS', 'pS', 'mS']
</snippet></ROW><ROW><id>12353450</id><snippet>&gt;&gt;&gt; from itertools import repeat
&gt;&gt;&gt; repeat([2,3], 3)
repeat([2, 3], 3)
&gt;&gt;&gt; list(repeat([2,3], 3))
[[2, 3], [2, 3], [2, 3]]
</snippet></ROW><ROW><id>12353450</id><snippet>iter([1,2,3]*n)</snippet></ROW><ROW><id>12353852</id><snippet>thing = mystuff.MyStuff()</snippet></ROW><ROW><id>12353852</id><snippet>mystuff</snippet></ROW><ROW><id>12353852</id><snippet>MyStuff</snippet></ROW><ROW><id>12353852</id><snippet>import mystuff
</snippet></ROW><ROW><id>12353852</id><snippet>mystuff.function_or_class_or_data</snippet></ROW><ROW><id>12353852</id><snippet>mystuff</snippet></ROW><ROW><id>12353852</id><snippet>import mystuff as ms
</snippet></ROW><ROW><id>12353852</id><snippet>MyStuff</snippet></ROW><ROW><id>12353852</id><snippet>thing = ms.MyStuff()
</snippet></ROW><ROW><id>12353852</id><snippet>from mystuff import MyStuff</snippet></ROW><ROW><id>12353852</id><snippet>MyStuff</snippet></ROW><ROW><id>12353852</id><snippet>mystuff</snippet></ROW><ROW><id>12353852</id><snippet>from mystuff import *</snippet></ROW><ROW><id>12353852</id><snippet>mystuff</snippet></ROW><ROW><id>12354227</id><snippet>Serial.write</snippet></ROW><ROW><id>12354227</id><snippet>Serial.print</snippet></ROW><ROW><id>12354227</id><snippet>arduino.readline</snippet></ROW><ROW><id>12354241</id><snippet>cherrypy.request</snippet></ROW><ROW><id>12354241</id><snippet>cherrypy.response</snippet></ROW><ROW><id>12354241</id><snippet>cherrypy.request.foo</snippet></ROW><ROW><id>12354554</id><snippet>chardet</snippet></ROW><ROW><id>12354554</id><snippet>chardet</snippet></ROW><ROW><id>12354604</id><snippet>class LatestQuestionAnswer(models.Model):
    question = models.ForeignKey(Question)
    question_answer = models.ForeignKey(QuestionAnswer)
    answer_set = models.ForeignKey(AnswerSet)
    created = created = models.DateTimeField(auto_now_add=True)
</snippet></ROW><ROW><id>12354604</id><snippet>def save(self, force_insert=False, force_update=False, using=None):
        super(QuestionAnswer, self).save(force_insert=force_insert, force_update=force_update, using=using)

        try:
            record = LatestQuestionAnswer.objects.get(question=self.question, answer_set=self.answer_set)

            if record.question_answer == self:
                return#nothing to do no point updating the record as it is already correct

        except ObjectDoesNotExist:
            record = LatestQuestionAnswer(question=self.question, answer_set= self.answer_set)

        record.question_answer = self
        record.save()
</snippet></ROW><ROW><id>12354604</id><snippet>most_recent_answers = [record.question_answer for record in LatestQuestionAnswer.objects.filter(answer_set=&lt;an_answer_set&gt;)]  
</snippet></ROW><ROW><id>12355474</id><snippet>lst = [(1,2), (1,3), (1,4), (1,5), (1,6)]

import itertools
list(itertools.chain(*lst))
# [1, 2, 1, 3, 1, 4, 1, 5, 1, 6]
</snippet></ROW><ROW><id>12355474</id><snippet>[e for l in lst for e in l]
# [1, 2, 1, 3, 1, 4, 1, 5, 1, 6]
</snippet></ROW><ROW><id>12355824</id><snippet>    #NEW: Registering the Cache

    Cache.register('songcache', timeout = 100)

    #Getting filenames:

    for line in rawsongs:
        if ',' in line:
            items = line.split(', ')

            #NEW: Check if the file is already cached:

            if Cache.get('songcache', items[2]) == None:

                #Setting up the button:

                btn = AudioButton(
                    text=(items[1]+' - '+items[2]), font_size=50, 
                    sound = SoundLoader.load(items[2]+'.ogg'), 
                    size_hint_y = None, height = 240, group = 'metro')

                #NEW: Adding the instance of the soundfile to the cache:

                Cache.append('songcache', items[2], btn.sound)

                grid.add_widget(btn)
            else:
                btn = AudioButton(
                    text=(items[1]+' - '+items[2]), font_size=50, 

                    #NEW: Linking the previously Cached instance with the new Button

                    sound = Cache.get('songcache', items[2]), 
                    size_hint_y = None, height = 240, group = 'metro')
                grid.add_widget(btn)           
        else:
            pass
</snippet></ROW><ROW><id>12355844</id><snippet>@app.route('/post/&lt;int:post_id&gt;/&lt;int:user_id&gt;/')
def show_post(post_id, user_id):
    # show the post with the given id, the id is an integer
    return 'Post %d' % post_id
</snippet></ROW><ROW><id>12355946</id><snippet>import Pyro4, time


global ns
global casetester

def connect():
    global ns
    global casetester
    ns = Pyro4.locateNS()
    casetester = Pyro4.Proxy("PYRONAME:thetest")

def disconnect():
    global ns
    global casetester
    del ns
    del casetester


while True:
    print "Accessing remote object:"
    connect()
    print casetester.askvalue(1)
    disconnect()
    print "staying busy"
    time.sleep(3)
</snippet></ROW><ROW><id>12356009</id><snippet>import csv

a = csv.reader(open(DATA+'DataA.csv'))

G = Graphics()

for row in a:
   time = row[1]
   conversion = row[3]
   x_series = time
   y_series = conversion
   G += scatter_plot(zip(x_series,y_series))

G # this will show the plot
</snippet></ROW><ROW><id>12356009</id><snippet>G</snippet></ROW><ROW><id>12356009</id><snippet>list_plot</snippet></ROW><ROW><id>12356046</id><snippet>d = {}
d['column1name'] = []
d['column2name'] = []
d['column3name'] = []

dictReader = csv.DictReader(open('filename.csv', 'rb'), fieldnames = ['column1name', 'column2name', 'column3name'], delimiter = ',', quotechar = '"')

for row in dictReader:
    for key in row:
        d[key].append(row[key])
</snippet></ROW><ROW><id>12356137</id><snippet>jQuery.load()</snippet></ROW><ROW><id>12356137</id><snippet>request.params['type']
</snippet></ROW><ROW><id>12356411</id><snippet>parent_ptr</snippet></ROW><ROW><id>12356411</id><snippet>@receiver(post_save, sender=InstagramMedia, dispatch_uid='create_competition_media')
def create_competition_media2(sender, instance, created, **kwargs):
    if created:
        CompetitionMedia.objects.create(instagrammedia_ptr=instance)
</snippet></ROW><ROW><id>12356411</id><snippet>@receiver(post_save, sender=InstagramMedia, dispatch_uid='create_competition_media')
def create_competition_media2(sender, instance, created, **kwargs):
    if created:
        CompetitionMedia.objects.create(instagrammedia_ptr=instance)
        instance.save() # This should re-save the parent values.
</snippet></ROW><ROW><id>12356411</id><snippet>@receiver(post_save, sender=InstagramMedia, dispatch_uid='create_competition_media')
def create_competition_media2(sender, instance, created, **kwargs):
    if created:
        CompetitionMedia.objects.create(instagrammedia_ptr=instance,
            **instance.__dict__)
</snippet></ROW><ROW><id>12356541</id><snippet>zip</snippet></ROW><ROW><id>12356541</id><snippet>In [1]: from pandas import *

In [2]: def calculate(x):
   ...:     return x*2, x*3
   ...: 

In [3]: df = DataFrame({'a': [1,2,3], 'b': [2,3,4]})

In [4]: df
Out[4]: 
   a  b
0  1  2
1  2  3
2  3  4

In [5]: df["A1"], df["A2"] = zip(*df["a"].map(calculate))

In [6]: df
Out[6]: 
   a  b  A1  A2
0  1  2   2   3
1  2  3   4   6
2  3  4   6   9
</snippet></ROW><ROW><id>12356565</id><snippet>for line in sys.stdin:
    process(line)
</snippet></ROW><ROW><id>12356565</id><snippet>try:
    for line in sys.stdin:
        process(line)
except IOError, e:
    if e.errno == errno.EPIPE:
        # EPIPE error
    else:
        # Other error
</snippet></ROW><ROW><id>12356586</id><snippet>nsmallest</snippet></ROW><ROW><id>12356586</id><snippet>def nsmallest(series, n, invert=lambda x: -1 * x):
    count = 0
    heap = []
    for e in series:
        if count &lt; n:
            count += 1
            hp.heappush(heap, (invert(e), e))
        else:
            # keeps heap size fixed
            hp.heappushpop(heap, (invert(e), e))  
    # note: heap[0][1] is largest, remove inverted priorities
    return [h[1] for h in heap]
</snippet></ROW><ROW><id>12356586</id><snippet>(invertedpriority, value)</snippet></ROW><ROW><id>12356586</id><snippet>alphanumeric_invert = lambda x: [(ord(c) * -1) for c in x] 
</snippet></ROW><ROW><id>12356605</id><snippet>HTMLParser.HTMLParser()</snippet></ROW><ROW><id>12356605</id><snippet>In [8]: import HTMLParser    

In [11]: HTMLParser.HTMLParser().unescape('"')
Out[11]: u'"'
</snippet></ROW><ROW><id>12356605</id><snippet>&lt;</snippet></ROW><ROW><id>12356605</id><snippet>&gt;</snippet></ROW><ROW><id>12356605</id><snippet>&amp;</snippet></ROW><ROW><id>12356605</id><snippet>"</snippet></ROW><ROW><id>12356605</id><snippet>In [9]: import xml.sax.saxutils as saxutils

In [10]: saxutils.unescape('"')
Out[10]: '"'    
</snippet></ROW><ROW><id>12356619</id><snippet>self.results[1:]</snippet></ROW><ROW><id>12356619</id><snippet>res = iter(self.results)  # get an iterator for the list values
next(res)  # iterate once to throw away first value
for number in res:
    # same code you already have goes here
    ...
</snippet></ROW><ROW><id>12356619</id><snippet>itertools</snippet></ROW><ROW><id>12356619</id><snippet>import itertools as it
res = it.islice(self.results, 1, None)
for number in res:
    # same code you already have goes here
    ...
</snippet></ROW><ROW><id>12356619</id><snippet>None</snippet></ROW><ROW><id>12356619</id><snippet>len(self.results)</snippet></ROW><ROW><id>12356619</id><snippet>it.islice()</snippet></ROW><ROW><id>12356911</id><snippet>with open('L:\\directory\\' + blah + '.txt',"w" ) as f_events:
    f_events.write(" ".join(map(str,stim-stim2)))  #this line :)
</snippet></ROW><ROW><id>12357185</id><snippet>encode</snippet></ROW><ROW><id>12357185</id><snippet>s.setOutput(cd["output"].encode("utf-8"))
</snippet></ROW><ROW><id>12357185</id><snippet>UTF-8</snippet></ROW><ROW><id>12357185</id><snippet>cd["output"]</snippet></ROW><ROW><id>12357279</id><snippet>print foo
print bar
</snippet></ROW><ROW><id>12357279</id><snippet>import json
print json.dumps([foo, bar])
</snippet></ROW><ROW><id>12357279</id><snippet>json_decode($output)</snippet></ROW><ROW><id>12357413</id><snippet>enumerate()</snippet></ROW><ROW><id>12357413</id><snippet>for ind,line in enumerate(l):
    print ind,line
</snippet></ROW><ROW><id>12357413</id><snippet>In [55]: lis=['a','b','c','d','e','f']
In [57]: for i,x in enumerate(lis):
    print i,x
   ....:     
   ....:     
0 a
1 b
2 c
3 d
4 e
5 f
</snippet></ROW><ROW><id>12357413</id><snippet>len()</snippet></ROW><ROW><id>12357413</id><snippet>xrange()</snippet></ROW><ROW><id>12357413</id><snippet>In [59]: for i in xrange(len(lis)):     #use range() in case of python 3.x
   ....:     print i,lis[i]
   ....:     
   ....:     
0 a
1 b
2 c
3 d
4 e
</snippet></ROW><ROW><id>12357629</id><snippet>'$Id: setup.py 303 2010-10-20 02:51:64Z xyz $'</snippet></ROW><ROW><id>12357629</id><snippet>__version__</snippet></ROW><ROW><id>12357639</id><snippet>registration.backends.default.urls</snippet></ROW><ROW><id>12357639</id><snippet>url(r'^register/$', register,
     {'backend': 'registration.backends.default.DefaultBackend', 
     'form_class': MyRegistrationForm},
</snippet></ROW><ROW><id>12357777</id><snippet>python</snippet></ROW><ROW><id>12357810</id><snippet>socket.error: [Errno 10049] The requested address is not valid in its context
</snippet></ROW><ROW><id>12357852</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>12357852</id><snippet>multiprocessing.queues.SimpleQueue</snippet></ROW><ROW><id>12357852</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>12357852</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>12357852</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>12358279</id><snippet>yield</snippet></ROW><ROW><id>12358279</id><snippet>None</snippet></ROW><ROW><id>12358279</id><snippet>yield</snippet></ROW><ROW><id>12358279</id><snippet>next()</snippet></ROW><ROW><id>12358279</id><snippet>list</snippet></ROW><ROW><id>12358279</id><snippet>next</snippet></ROW><ROW><id>12358279</id><snippet>&gt;&gt;&gt; myset = set(['a', 'b', 'c', 'd'])
&gt;&gt;&gt; mydict = {item: (yield ''.join([item, 's'])) for item in myset}
&gt;&gt;&gt; mydict
&lt;generator object &lt;dictcomp&gt; at 0x0222BB20&gt;
</snippet></ROW><ROW><id>12358279</id><snippet>yield</snippet></ROW><ROW><id>12358279</id><snippet>list</snippet></ROW><ROW><id>12358279</id><snippet>list</snippet></ROW><ROW><id>12358279</id><snippet>next(mydict)</snippet></ROW><ROW><id>12358279</id><snippet>''.join([item, 's'])</snippet></ROW><ROW><id>12358279</id><snippet>list</snippet></ROW><ROW><id>12358279</id><snippet>list</snippet></ROW><ROW><id>12358279</id><snippet>next(mydict)</snippet></ROW><ROW><id>12358279</id><snippet>yield</snippet></ROW><ROW><id>12358279</id><snippet>None</snippet></ROW><ROW><id>12358279</id><snippet>item</snippet></ROW><ROW><id>12358279</id><snippet>dict</snippet></ROW><ROW><id>12358303</id><snippet>print a
pÃ©chÃ©
Ãlak
Ã³undle

print a.decode('latin9').encode('utf8'),
pÃÂ©chÃÂ©
Ãlak
ÃÂ³undle
</snippet></ROW><ROW><id>12358498</id><snippet>def square_root():
    sqrt = int(raw_input("What number do you want the square root for? ")) ** 0.5
    if sqrt == int(sqrt):  # i.e. 'sqrt' is an integer
        print "Result is", int(sqrt)
    else:
        print "That is not a perfect square!"
</snippet></ROW><ROW><id>12358498</id><snippet>str(input).endswith(SOME_VAL)</snippet></ROW><ROW><id>12358687</id><snippet>def dummyFunction(context, data):
    import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>12358687</id><snippet>l</snippet></ROW><ROW><id>12358687</id><snippet>data</snippet></ROW><ROW><id>12358687</id><snippet>data</snippet></ROW><ROW><id>12358687</id><snippet>w</snippet></ROW><ROW><id>12358687</id><snippet>dummyFunction</snippet></ROW><ROW><id>12358687</id><snippet>data</snippet></ROW><ROW><id>12358687</id><snippet>u</snippet></ROW><ROW><id>12358687</id><snippet>dummyFunction(context, data)</snippet></ROW><ROW><id>12358687</id><snippet>l</snippet></ROW><ROW><id>12358687</id><snippet>locals()</snippet></ROW><ROW><id>12358687</id><snippet>u</snippet></ROW><ROW><id>12358687</id><snippet>d</snippet></ROW><ROW><id>12358687</id><snippet>pdb</snippet></ROW><ROW><id>12358687</id><snippet>q</snippet></ROW><ROW><id>12358687</id><snippet>if 'interesting' in data.keys():
    import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>12358752</id><snippet>R = np.empty(15, dtype=[('val',float),('err',float)])
</snippet></ROW><ROW><id>12358752</id><snippet>R['val'] = ...
R['err'] = ...
</snippet></ROW><ROW><id>12358752</id><snippet>val</snippet></ROW><ROW><id>12358752</id><snippet>err</snippet></ROW><ROW><id>12358752</id><snippet>R = np.array(zip(val_list, err_list), dtype=[('val',float),('err',float)])
</snippet></ROW><ROW><id>12358752</id><snippet>R[0]</snippet></ROW><ROW><id>12358752</id><snippet>np.void</snippet></ROW><ROW><id>12358752</id><snippet>R[1:-1]</snippet></ROW><ROW><id>12358752</id><snippet>I = np.empty_like(R)
I['val'] = U['val'] / R['val']
I['err'] = np.sqrt((1 / R['val'] * U['err'])**2 + (U['val'] / R['val']**2 * R['err'])**2)
</snippet></ROW><ROW><id>12358752</id><snippet>__getattr__</snippet></ROW><ROW><id>12358752</id><snippet>__setattr__</snippet></ROW><ROW><id>12358752</id><snippet>R.val</snippet></ROW><ROW><id>12358752</id><snippet>R['val']</snippet></ROW><ROW><id>12359099</id><snippet>block</snippet></ROW><ROW><id>12359099</id><snippet>plt.show()</snippet></ROW><ROW><id>12359099</id><snippet>plt.show()</snippet></ROW><ROW><id>12359099</id><snippet>plt.show(block=True)</snippet></ROW><ROW><id>12359193</id><snippet>&gt;&gt;&gt; ''.split()[0]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</snippet></ROW><ROW><id>12359193</id><snippet>if line.strip():</snippet></ROW><ROW><id>12359193</id><snippet>with open (rebase_file, 'r') as rebase:
    for line in rebase:
        if line.strip():
            token = line.split()
            print token[0]
</snippet></ROW><ROW><id>12359581</id><snippet>i==-1</snippet></ROW><ROW><id>12359581</id><snippet>a[-1]</snippet></ROW><ROW><id>12359581</id><snippet>a[-1+1]</snippet></ROW><ROW><id>12359581</id><snippet>a[-1]</snippet></ROW><ROW><id>12359635</id><snippet>id(c1)==id(c2)</snippet></ROW><ROW><id>12359635</id><snippet>__setattr__</snippet></ROW><ROW><id>12359635</id><snippet>__setattr__</snippet></ROW><ROW><id>12359635</id><snippet>class MyObj:
    def __init__(self, value, suit):
        self._internal = Card(value, suit)

    def __setattr__(self, name, new_value):
        if name == 'suit':
            self._internal = Card(value, new_value)
        else:
            self._internal = Card(new_value, suit)
</snippet></ROW><ROW><id>12359635</id><snippet>getattr</snippet></ROW><ROW><id>12359708</id><snippet>datetime.now()</snippet></ROW><ROW><id>12359708</id><snippet>calendar.timegm()</snippet></ROW><ROW><id>12359708</id><snippet>&gt;&gt;&gt; t = datetime.now().strftime('%Y%m%dT%H%M%SZ')
&gt;&gt;&gt; t
'20120910T232358Z'
&gt;&gt;&gt; calendar.timegm(time.strptime(t, "%Y%m%dT%H%M%SZ"))
1347319438
&gt;&gt;&gt; time.mktime(time.localtime())
1347312258.0
&gt;&gt;&gt; time.mktime(time.strptime(t, "%Y%m%dT%H%M%SZ"))
1347312238.0
</snippet></ROW><ROW><id>12359708</id><snippet>time.mktime</snippet></ROW><ROW><id>12359708</id><snippet>calendar.timegm</snippet></ROW><ROW><id>12359850</id><snippet>try...except</snippet></ROW><ROW><id>12359850</id><snippet>for</snippet></ROW><ROW><id>12359850</id><snippet>MySQLdb</snippet></ROW><ROW><id>12359850</id><snippet>            try:
                insertstr= "INSERT INTO cdr_extended (duration,billsec,amaflags,start,end,clid,src,dst,dcontext,channel,dstchannel,lastapp,lastdata,disposition,accountcode,uniqueid) VALUES (%s,%s,0,'%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');" % (duration,billsec,start,end,clid,src,dst,dcontext,channel,dstchannel,lastapp,lastdata,disposition,accountcode,uniqueid)
                cur.execute(insertstr)
                con.commit()
            except mdb.Error, e:
                if e.args[0] == 1062:
                    print "Dupe key on uniqueid: %s"  % (uniqueid)
                else:
                    print "Error %d: %s" % (e.args[0],e.args[1])
                    sys.exit(1)
</snippet></ROW><ROW><id>12360030</id><snippet>wb = xlrd.open_workbook("somewb.xls")
my_date_tuple = xlrd.xldate_as_tuple(xls_timestamp_number,wb.datemode)
</snippet></ROW><ROW><id>12360226</id><snippet>'c_key'</snippet></ROW><ROW><id>12360226</id><snippet>c_key</snippet></ROW><ROW><id>12360337</id><snippet>getreg('.')
</snippet></ROW><ROW><id>12360337</id><snippet>expand('&lt;cword&gt;')</snippet></ROW><ROW><id>12360397</id><snippet>$ sqlite3 test.db</snippet></ROW><ROW><id>12360462</id><snippet>def valid_month(month):
    for x in months:
        if x[1:] == month[1:] and x[0].capitalize() == month[0].capitalize():
            print x
</snippet></ROW><ROW><id>12360537</id><snippet>Dialog.setWindowTitle(Ui_MainWindow.drive_signal.connect())
</snippet></ROW><ROW><id>12360537</id><snippet>unbound signal</snippet></ROW><ROW><id>12360537</id><snippet>window.drive_signal.connect(dialog.setWindowTitle)
</snippet></ROW><ROW><id>12360537</id><snippet>window</snippet></ROW><ROW><id>12360537</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>12360537</id><snippet>dialog</snippet></ROW><ROW><id>12360537</id><snippet>SubDialog</snippet></ROW><ROW><id>12360537</id><snippet>from PyQt4 import QtGui, QtCore

class Ui_MainWindow(QtGui.QMainWindow):
    drive_signal = QtCore.pyqtSignal(str)

    def setupUi(self, MainWindow):
        MainWindow.resize(459, 280)
        MainWindow.setWindowTitle('MainWindow: Foo')
        self.drive_signal.emit('Dialog: Bar')

class SubDialog(QtGui.QDialog):
    def setupUi(self, Dialog):
        Dialog.resize(532, 285)

if __name__ == '__main__':

    import sys

    app = QtGui.QApplication(sys.argv)

    window = Ui_MainWindow()
    dialog = SubDialog()

    window.drive_signal.connect(dialog.setWindowTitle)

    window.setupUi(window)
    dialog.setupUi(dialog)

    window.show()
    dialog.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12360815</id><snippet>uninstall</snippet></ROW><ROW><id>12360815</id><snippet>pip</snippet></ROW><ROW><id>12360815</id><snippet>$ curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
</snippet></ROW><ROW><id>12361031</id><snippet>/photo</snippet></ROW><ROW><id>12361036</id><snippet>&lt;button&gt;</snippet></ROW><ROW><id>12361036</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>12361036</id><snippet>btn</snippet></ROW><ROW><id>12361036</id><snippet>&lt;i&gt;</snippet></ROW><ROW><id>12361036</id><snippet>&lt;button&gt;</snippet></ROW><ROW><id>12361036</id><snippet>&lt;button&gt;</snippet></ROW><ROW><id>12361036</id><snippet>&lt;input type="submit"&gt;</snippet></ROW><ROW><id>12361036</id><snippet>&lt;input type="submit"&gt;</snippet></ROW><ROW><id>12361036</id><snippet>&lt;button&gt;</snippet></ROW><ROW><id>12361036</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>12361036</id><snippet>action</snippet></ROW><ROW><id>12361036</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>12361036</id><snippet>btn</snippet></ROW><ROW><id>12361036</id><snippet>btn-primary</snippet></ROW><ROW><id>12361036</id><snippet>btn-whateva</snippet></ROW><ROW><id>12361153</id><snippet>@csrf_exempt
def create_subject(request, subject):
    subject, created= Subjects.objects.get_or_create( 
        name=subject,
        user=request.user,
        created_by=request.user)

    return HttpResponse(
        simplejson.dumps(
            list(models.Subject.objects.filter(id=subject.id).values()), 
            indent=4
        )
    )
</snippet></ROW><ROW><id>12361219</id><snippet>urls.py</snippet></ROW><ROW><id>12361219</id><snippet>from MyProj.views import hello, mainpage, current_datetime, hours_ahead, editareapage
</snippet></ROW><ROW><id>12361575</id><snippet>ipython</snippet></ROW><ROW><id>12361575</id><snippet>ipython --pylab</snippet></ROW><ROW><id>12361644</id><snippet>pandas.io.sql</snippet></ROW><ROW><id>12361644</id><snippet>read_frame</snippet></ROW><ROW><id>12361644</id><snippet>coerce_float</snippet></ROW><ROW><id>12361644</id><snippet>In [16]: dt = DataFrame({'tax':[0,0,0], 'ebt':[0,0,0]},index=index,dtype=object)

In [17]: dt.tax/dt.ebt
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
</snippet></ROW><ROW><id>12361687</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>12362086</id><snippet>def MyTestCase(unittest.Testcase):
  def run_input_output(self, suffix):
    input = read_from_disk('input'+suffix)
    output = run(input)
    validated_output = read_from_disk('output'+suffix)
    self.assertEquals(output, validated_output)

  def test_input01(self): self.run_input_output('01')
  def test_input02(self): self.run_input_output('02')
  def test_input03(self): self.run_input_output('03')
</snippet></ROW><ROW><id>12362087</id><snippet>import json
from django.db.models.fields.files import ImageFieldFile

class EnhancedJSONEncoder(json.JSONEncoder):
    """
    JSONEncoder subclass that knows how to encode Django "ImageFieldFile"s.
    """

    def default(self, o):
        if isinstance(o, ImageFieldFile):
            # Treat ImageFieldFile as a unicode string
            return super(EnhancedJSONEncoder, self).default(unicode(o))
        else:

            return super(EnhancedJSONEncoder, self).default(o)
</snippet></ROW><ROW><id>12362087</id><snippet>json.dumps(listData, cls=EnhancedJSONEncoder))
</snippet></ROW><ROW><id>12362140</id><snippet>*args</snippet></ROW><ROW><id>12362140</id><snippet>**kwargs</snippet></ROW><ROW><id>12362140</id><snippet>self</snippet></ROW><ROW><id>12362200</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.array([(1,2,3),(3,4,5)])
&gt;&gt;&gt; arr
array([[1, 2, 3],
       [3, 4, 5]])
&gt;&gt;&gt; arr.shape
(2, 3)
&gt;&gt;&gt; arr.dtype=[('a',int),('b',int),('c', int)]
&gt;&gt;&gt; arr  # Notice that tuples inside the elements
array([[(1, 2, 3)],
       [(3, 4, 5)]], 
      dtype=[('a', '&lt;i8'), ('b', '&lt;i8'), ('c', '&lt;i8')])
&gt;&gt;&gt; arr.shape
(2, 1)
</snippet></ROW><ROW><id>12362200</id><snippet>&gt;&gt;&gt; arr_s = np.sort(arr, order='b')
&gt;&gt;&gt; arr_s
array([[(1, 2, 3)],
       [(3, 4, 5)]], 
      dtype=[('a', '&lt;i8'), ('b', '&lt;i8'), ('c', '&lt;i8')])
&gt;&gt;&gt; dtype=[('a',np.int64),('b',np.int64),('c', np.int64)]
&gt;&gt;&gt; arr = np.array([(5,2,3),(3,4,1)], dtype=dtype)
&gt;&gt;&gt; arr
array([(5, 2, 3), (3, 4, 1)], 
      dtype=[('a', '&lt;i8'), ('b', '&lt;i8'), ('c', '&lt;i8')])
&gt;&gt;&gt; arr_s = np.sort(arr, order='a')
&gt;&gt;&gt; arr_s
array([(3, 4, 1), (5, 2, 3)], 
      dtype=[('a', '&lt;i8'), ('b', '&lt;i8'), ('c', '&lt;i8')])
&gt;&gt;&gt; arr_s = np.sort(arr, order='b')
&gt;&gt;&gt; arr_s
array([(5, 2, 3), (3, 4, 1)], 
      dtype=[('a', '&lt;i8'), ('b', '&lt;i8'), ('c', '&lt;i8')])
&gt;&gt;&gt; arr_s = np.sort(arr, order='c')
&gt;&gt;&gt; arr_s
array([(3, 4, 1), (5, 2, 3)], 
      dtype=[('a', '&lt;i8'), ('b', '&lt;i8'), ('c', '&lt;i8')])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12362218</id><snippet>format()</snippet></ROW><ROW><id>12362218</id><snippet>{0}</snippet></ROW><ROW><id>12362218</id><snippet>datetime</snippet></ROW><ROW><id>12362218</id><snippet>datestr</snippet></ROW><ROW><id>12362218</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datestr = datetime.strftime(datetime.today(), "%Hh %Mm %Ss %A, %B %Y")
&gt;&gt;&gt; examplefile = open("/home/michael/file{0}".format(datestr), 'w')
&gt;&gt;&gt; print(examplefile)
&lt;open file '/home/michael/file21h 20m 34s Monday, September 2012', mode 'w' at 0x89fcf98&gt;
</snippet></ROW><ROW><id>12362358</id><snippet>C:/python27/python.exe "$(C:/python27/python.exe)"
</snippet></ROW><ROW><id>12362358</id><snippet>C:/python27/python.exe 
</snippet></ROW><ROW><id>12362358</id><snippet>C:/Python27/python.exe "$(FULL_CURRENT_PATH)"
</snippet></ROW><ROW><id>12362623</id><snippet>s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>12362764</id><snippet>class_var1</snippet></ROW><ROW><id>12362764</id><snippet>class_var2</snippet></ROW><ROW><id>12362764</id><snippet>cm1.class_var1 = "bar"</snippet></ROW><ROW><id>12362764</id><snippet>class_var1</snippet></ROW><ROW><id>12362764</id><snippet>cm1</snippet></ROW><ROW><id>12362764</id><snippet>&gt;&gt;&gt; class A(object):
...     var = []
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.var is A.var
True
&gt;&gt;&gt; a.var = []
&gt;&gt;&gt; a.var is A.var
False
</snippet></ROW><ROW><id>12362764</id><snippet>a.var is A.var</snippet></ROW><ROW><id>12362764</id><snippet>a</snippet></ROW><ROW><id>12362764</id><snippet>var</snippet></ROW><ROW><id>12362764</id><snippet>a</snippet></ROW><ROW><id>12362803</id><snippet>numpy.ma.average(numpy.ma.masked_invalid(x).reshape(-1, 2, x.shape[-1]), 1)
</snippet></ROW><ROW><id>12362803</id><snippet>masked_array(data =
 [[3.5 7.0 5.5 6.5 5.0]
 [13.5 12.0 15.5 16.5 --]],
             mask =
 [[False False False False False]
 [False False False False  True]],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>12363200</id><snippet>from itertools import imap
from operator import mul
def sumsquared(arr):
    return sum(imap(mul, arr, arr))
</snippet></ROW><ROW><id>12363609</id><snippet>class TestObjectContainer(QObject):
  @Property(QObject)
  def object(self):
    self.tmp = TestObject()
    return self.tmp
</snippet></ROW><ROW><id>12363679</id><snippet>&gt;&gt;&gt; 1/3
0
&gt;&gt;&gt; 1./3
0.3333333333333333
</snippet></ROW><ROW><id>12363763</id><snippet>regex = re.compile('^\d{8}.NYP.xml$')
</snippet></ROW><ROW><id>12364559</id><snippet>QTreeWidget</snippet></ROW><ROW><id>12364559</id><snippet>QTreeView</snippet></ROW><ROW><id>12364674</id><snippet>string</snippet></ROW><ROW><id>12364674</id><snippet>import string
print string.__file__
</snippet></ROW><ROW><id>12364903</id><snippet>related_name</snippet></ROW><ROW><id>12364903</id><snippet>ToManyField</snippet></ROW><ROW><id>12365098</id><snippet>pack_forget</snippet></ROW><ROW><id>12365098</id><snippet>pack</snippet></ROW><ROW><id>12365098</id><snippet>from Tkinter import *

root = Tk()

b = Button(root, text="Delete me", command=lambda: b.pack_forget())
b.pack()

root.mainloop()
</snippet></ROW><ROW><id>12365098</id><snippet>pack_forget</snippet></ROW><ROW><id>12365098</id><snippet>pack</snippet></ROW><ROW><id>12365098</id><snippet>destroy</snippet></ROW><ROW><id>12365098</id><snippet>grid</snippet></ROW><ROW><id>12365098</id><snippet>grid_forget</snippet></ROW><ROW><id>12365098</id><snippet>grid_remove</snippet></ROW><ROW><id>12365295</id><snippet>str</snippet></ROW><ROW><id>12365295</id><snippet>String</snippet></ROW><ROW><id>12365295</id><snippet>byte</snippet></ROW><ROW><id>12365295</id><snippet>String.getBytes()</snippet></ROW><ROW><id>12365295</id><snippet>str</snippet></ROW><ROW><id>12365295</id><snippet>String</snippet></ROW><ROW><id>12365295</id><snippet>unicode</snippet></ROW><ROW><id>12365295</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>12365295</id><snippet>u'text'
</snippet></ROW><ROW><id>12365295</id><snippet>u</snippet></ROW><ROW><id>12365295</id><snippet>encode</snippet></ROW><ROW><id>12365295</id><snippet>u'text'.encode('utf-8')
</snippet></ROW><ROW><id>12365295</id><snippet>String.getBytes</snippet></ROW><ROW><id>12365295</id><snippet>java.nio.Charset</snippet></ROW><ROW><id>12365295</id><snippet>'text'.getBytes(java.nio.Charset.forName('UTF-8'))
</snippet></ROW><ROW><id>12365295</id><snippet>hashlib</snippet></ROW><ROW><id>12365295</id><snippet>MessageDigest</snippet></ROW><ROW><id>12365295</id><snippet>zlib.crc32</snippet></ROW><ROW><id>12365295</id><snippet>java.util.zip.CRC32</snippet></ROW><ROW><id>12365295</id><snippet>result &amp; 0xffffffff</snippet></ROW><ROW><id>12365296</id><snippet>sys.modules</snippet></ROW><ROW><id>12365296</id><snippet>import sys

mod = sys.modules[cls.__module__]
</snippet></ROW><ROW><id>12365296</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.modules[datetime.__module__].__doc__
Fast implementation of the datetime type.
</snippet></ROW><ROW><id>12365317</id><snippet>manage.py migrate --fake yourapp 0005
</snippet></ROW><ROW><id>12365317</id><snippet>manage.py migrate --fake yourapp 0002
</snippet></ROW><ROW><id>12365317</id><snippet>manage.py migrate yourapp
</snippet></ROW><ROW><id>12365707</id><snippet>$ py.test --looponfailing
</snippet></ROW><ROW><id>12365866</id><snippet>query</snippet></ROW><ROW><id>12365866</id><snippet>User</snippet></ROW><ROW><id>12365866</id><snippet>user = session.query(User).filter(User.id == 99).one()
                    ^^^^^^
</snippet></ROW><ROW><id>12366197</id><snippet>Surface.blit</snippet></ROW><ROW><id>12366197</id><snippet>tuple</snippet></ROW><ROW><id>12366197</id><snippet>dest</snippet></ROW><ROW><id>12366197</id><snippet>class Vector2(tuple):

    def __new__(typ, x=1.0, y=1.0):
        n = tuple.__new__(typ, (int(x), int(y)))
        n.x = x
        n.y = y
        return n

    def __mul__(self, other):
        return self.__new__(type(self), self.x*other, self.y*other)

    def __add__(self, other):
        return self.__new__(type(self), self.x+other.x, self.y+other.y)

    def __str__(self):
        return "(%s, %s)"%(self.x, self.y)
    @staticmethod
    def from_points(P1, P2):
        return Vector2( P2[0] - P1[0], P2[1] - P1[1] )
    def get_magnitude(self):
        return math.sqrt( self.x**2 + self.y**2 )
    def normalize(self):
        magnitude = self.get_magnitude()
        self.x /= magnitude
        self.y /= magnitude
</snippet></ROW><ROW><id>12366197</id><snippet>tuple</snippet></ROW><ROW><id>12366197</id><snippet>blit</snippet></ROW><ROW><id>12366197</id><snippet>int</snippet></ROW><ROW><id>12366197</id><snippet>__add__</snippet></ROW><ROW><id>12366197</id><snippet>__mul__</snippet></ROW><ROW><id>12366428</id><snippet>g.db.commit()
</snippet></ROW><ROW><id>12366567</id><snippet>def chainDict(mapping):
    items = []
    for item in mapping.iteritems():
        items.extend(item)
    return items

event = portTest.event(chainDict(myDict))
</snippet></ROW><ROW><id>12366567</id><snippet>[keyFoo, valueFoo keyBar, valueBar]</snippet></ROW><ROW><id>12366567</id><snippet>event</snippet></ROW><ROW><id>12366567</id><snippet>itertools</snippet></ROW><ROW><id>12366567</id><snippet>chain</snippet></ROW><ROW><id>12366684</id><snippet>class MyDialog(QtGui.QDialog):
    # ...
    def __init__(self, parent=None):
        super(MyDialog, self).__init__(parent)

        # when you want to destroy the dialog set this to True
        self._want_to_close = False

    def closeEvent(self, evnt):
        if self._want_to_close:
            super(MyDialog, self).closeEvent(evnt)
        else:
            evnt.ignore()
            self.setWindowState(QtCore.Qt.WindowMinimized)
</snippet></ROW><ROW><id>12366684</id><snippet>&gt;&gt;&gt; from PyQt4 import QtCore, QtGui
&gt;&gt;&gt; app = QtGui.QApplication([])
&gt;&gt;&gt; win = MyDialog()
&gt;&gt;&gt; win.show()
&gt;&gt;&gt; app.exec_()   #after this try to close the dialog, it wont close bu minimize
</snippet></ROW><ROW><id>12366831</id><snippet>index_list.index(a[i][j])
</snippet></ROW><ROW><id>12366831</id><snippet>index_list = [ item_0, item_1, item_2, ...]
</snippet></ROW><ROW><id>12366831</id><snippet>index_dict = { item_0:0,  item_1:1, item_2:2, ...}
</snippet></ROW><ROW><id>12366831</id><snippet>index_dict = dict( (item, i) for i, item in enumerate(index_list) )
</snippet></ROW><ROW><id>12367012</id><snippet>/usr/share/vim/vim72/syntax/python.vim</snippet></ROW><ROW><id>12367012</id><snippet>"        let python_highlight_builtins = 1
</snippet></ROW><ROW><id>12367012</id><snippet>len</snippet></ROW><ROW><id>12367012</id><snippet>len()</snippet></ROW><ROW><id>12367044</id><snippet>[root@lts5srv1 Python-2.6.8]# ./configure --enable-shared --prefix=/usr/local
[root@lts5srv1 Python-2.6.8]# make
[root@lts5srv1 Python-2.6.8]# make install
</snippet></ROW><ROW><id>12367044</id><snippet>[root@lts5srv1 /]# cd /usr/local/lib/python2.6/config/
[root@lts5srv1 config]# ln -s ../../libpython2.6.so .

[root@lts5srv1 mod_wsgi-2.5]# ./configure --with-python=/usr/local/bin/python2.6
[root@lts5srv1 mod_wsgi-2.5]# make 
[root@lts5srv1 mod_wsgi-2.5]# make install
</snippet></ROW><ROW><id>12367044</id><snippet>[root@lts5srv1 Python-2.6.8]# export LD_LIBRARY_PATH=/usr/local/lib/python2.6
[root@lts5srv1 Python-2.6.8]# export LD_RUN_PATH=/usr/lib64/httpd/modules
</snippet></ROW><ROW><id>12367044</id><snippet>[root@lts5srv1 ~]# vi ~/.bashrc

# .bashrc

# User specific aliases and functions

PATH=/root/epd-5.1.0/lib/python2.5:/root/epd-5.1.0/bin:${PATH}
PYTHONPATH=/usr/local/lib/python2.6
LD_LIBRARY_PATH=/usr/local/lib/python2.6
LD_RUN_PATH=/usr/lib64/httpd/modules

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi
</snippet></ROW><ROW><id>12367044</id><snippet>[root@lts5srv1 Django-1.4.1]# /usr/local/bin/python2.6 setup.py install
</snippet></ROW><ROW><id>12367044</id><snippet>[root@lts5srv1 /]# ldd /usr/lib64/httpd/modules/mod_wsgi.so
[root@lts5srv1 /]# ldd /usr/local/bin/python2.6
</snippet></ROW><ROW><id>12367098</id><snippet>NotImplementedError: only zero-dimensional systems supported (finite number of solutions)
</snippet></ROW><ROW><id>12367275</id><snippet>%</snippet></ROW><ROW><id>12367275</id><snippet>%</snippet></ROW><ROW><id>12367275</id><snippet>sql = "SELECT COUNT(*) FROM entities WHERE (unit = '%%')"
</snippet></ROW><ROW><id>12367275</id><snippet>%s</snippet></ROW><ROW><id>12367275</id><snippet>%%</snippet></ROW><ROW><id>12367275</id><snippet>%</snippet></ROW><ROW><id>12367427</id><snippet>def setUp(self):
    self.test_passed = false

def tearDown(self):
    if not self.test_passed:
        log()

def test_something(self):
    self.assertEquals(something())
    self.test_passed = true
</snippet></ROW><ROW><id>12367784</id><snippet>class UsernameInput(TextInput):
    """
    Creates a widget specifically for appending the username suffix as a label
    """  9 
    def render(self, name, value, attrs=None):
        widget = super(UsernameInput, self).render(name, value, attrs)
        widget += u'&lt;span class="field-suffix"&gt;@%s&lt;/span&gt;' % USERNAME_DOMAIN_PART
        return mark_safe(widget)
</snippet></ROW><ROW><id>12367784</id><snippet>username = forms.EmailField(label="Preferred Username",
                            widget=UsernameInput(),
                            error_messages={'invalid': "Please enter a valid email address"})
</snippet></ROW><ROW><id>12367995</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>12367995</id><snippet>/usr/local/google_appengine</snippet></ROW><ROW><id>12368360</id><snippet>def pytest_generate_tests(metafunc):
    data = [
        # input # output # is expected to fail?
        (2, 4, False),
        (3, 10, True),
        (4, 16, False),
        (5, 26, True),
        ]
    for input, expected, xfail in data:
        if metafunc.function is test_evenHigherThanSquare:
            metafunc.addcall(funcargs=dict(input=input, expected=expected),
                             param=xfail)


def pytest_funcarg__xfail(request):
    if request.param:
        request.applymarker(py.test.mark.xfail)


def test_evenHigherThanSquare(input, expected, xfail):
    assert evenHigherThanSquare(input) == expected
</snippet></ROW><ROW><id>12368360</id><snippet>xfail</snippet></ROW><ROW><id>12368360</id><snippet>test_evenHigherThanSquare</snippet></ROW><ROW><id>12368360</id><snippet>pytest_funcarg__xfail</snippet></ROW><ROW><id>12368360</id><snippet>param</snippet></ROW><ROW><id>12368360</id><snippet>metafunc.addcall</snippet></ROW><ROW><id>12368449</id><snippet>return klass(arg1)
</snippet></ROW><ROW><id>12368529</id><snippet>{% for item in list if item.author == 'bob' %}
    {% if loop.index &lt;= 5 %}
       do something
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>12368608</id><snippet>next</snippet></ROW><ROW><id>12368608</id><snippet>len(state) == num-1</snippet></ROW><ROW><id>12368608</id><snippet>StopIteration</snippet></ROW><ROW><id>12368657</id><snippet>for counter, hotel in enumerate(hotels):
     if xyz:
       if counter &lt;= 3:
        similar_venues.append(hotel)
        break
</snippet></ROW><ROW><id>12368657</id><snippet>if xyz and counter &lt;= 3:</snippet></ROW><ROW><id>12368864</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>12368864</id><snippet>dt = datetime.datetime.strptime(xsdDateTime, '%Y-%m-%dT%H:%M:%S')
</snippet></ROW><ROW><id>12368864</id><snippet>python-dateutil</snippet></ROW><ROW><id>12368864</id><snippet>from dateutil.parser import parse
dt = parse(xsdDateTime)
</snippet></ROW><ROW><id>12369081</id><snippet>Random()</snippet></ROW><ROW><id>12369081</id><snippet>random.Random</snippet></ROW><ROW><id>12369081</id><snippet>Random</snippet></ROW><ROW><id>12369081</id><snippet>Random()</snippet></ROW><ROW><id>12369081</id><snippet>&gt;&gt;&gt; from random import Random
&gt;&gt;&gt; myRandom = Random(anewseed)
&gt;&gt;&gt; randomvalue = myRandom.randint(0, 10)
</snippet></ROW><ROW><id>12369288</id><snippet>BINPUT         = b'q'   # store stack top in memo; index is 1-byte arg
BINGET         = b'h'   # push item from memo on stack; index is 1-byte arg
EMPTY_TUPLE    = b')'   # push empty tuple
MARK           = b'('   # push special markobject on stack
</snippet></ROW><ROW><id>12369288</id><snippet>x=pickle.load(open("wirecapture.bin","rb"))
</snippet></ROW><ROW><id>12369288</id><snippet>len(pickle.dump(x.my_field))
</snippet></ROW><ROW><id>12369288</id><snippet>dir(x)</snippet></ROW><ROW><id>12369288</id><snippet>for y in dir(x):
   print("%s: %iKb"%(y,len(pickle.dumps(x[y])/1024))
</snippet></ROW><ROW><id>12369288</id><snippet>x[y]</snippet></ROW><ROW><id>12369288</id><snippet>x.my_field</snippet></ROW><ROW><id>12369288</id><snippet>'my_field'</snippet></ROW><ROW><id>12369472</id><snippet>set_index</snippet></ROW><ROW><id>12369472</id><snippet>pivot</snippet></ROW><ROW><id>12369472</id><snippet>In [4]: frame.set_index(['date', 'mat', 'strike'])
Out[4]: 
                            dataframe name tenor     capvol
date     mat strike                                        
20120903 1y  0.25    EUR CapFloor Volat_3m    3m  152.20216
             0.50    EUR CapFloor Volat_3m    3m  151.96937
             1.00    EUR CapFloor Volat_3m    3m  149.26697
             1.50    EUR CapFloor Volat_3m    3m  152.94075
             2.00    EUR CapFloor Volat_3m    3m  157.22935
             2.25    EUR CapFloor Volat_3m    3m  159.32589


In [7]: df.capvol.unstack('mat')
Out[7]: 
mat                     1y
date     strike           
20120903 0.25    152.20216
         0.50    151.96937
         1.00    149.26697
         1.50    152.94075
         2.00    157.22935
         2.25    159.32589
</snippet></ROW><ROW><id>12369616</id><snippet>panda</snippet></ROW><ROW><id>12369616</id><snippet>dtype</snippet></ROW><ROW><id>12369616</id><snippet>[us]</snippet></ROW><ROW><id>12369616</id><snippet>days</snippet></ROW><ROW><id>12369616</id><snippet>datetime</snippet></ROW><ROW><id>12369616</id><snippet>ndarray</snippet></ROW><ROW><id>12369616</id><snippet>dtype=object</snippet></ROW><ROW><id>12369627</id><snippet>FieldStorage()</snippet></ROW><ROW><id>12369627</id><snippet>cgi</snippet></ROW><ROW><id>12369854</id><snippet>iterparse</snippet></ROW><ROW><id>12369854</id><snippet>end</snippet></ROW><ROW><id>12369854</id><snippet>end</snippet></ROW><ROW><id>12369854</id><snippet>&gt;&gt;&gt; for ev, elem in etree.iterparse(xml):
       print elem

&lt;Element b at 0x38fe320&gt;
&lt;Element d at 0x38fe0f0&gt;
&lt;Element c at 0x38fe2d0&gt;
&lt;Element a at 0x38fe190&gt;
&lt;Element z at 0x38fe230&gt;
&lt;Element a at 0x38fe3c0&gt;
&lt;Element root at 0x2df48c0&gt;
</snippet></ROW><ROW><id>12369854</id><snippet>start</snippet></ROW><ROW><id>12369854</id><snippet>for ev, elem in etree.iterparse(xml, events=('start',)):
    ...
</snippet></ROW><ROW><id>12369854</id><snippet>start</snippet></ROW><ROW><id>12369854</id><snippet>end</snippet></ROW><ROW><id>12369854</id><snippet>clear()</snippet></ROW><ROW><id>12369854</id><snippet>start</snippet></ROW><ROW><id>12369854</id><snippet>clear</snippet></ROW><ROW><id>12369854</id><snippet>end</snippet></ROW><ROW><id>12369854</id><snippet>clear</snippet></ROW><ROW><id>12369854</id><snippet>if</snippet></ROW><ROW><id>12369854</id><snippet>clear</snippet></ROW><ROW><id>12369854</id><snippet>found = False
for event, elem in etree.iterparse(source, events=('start', 'end')):
    if event == 'start':
        if elem.attrib.get('id') == elem_id:
            found = True
    else:
        if elem.attrib.get('id') == elem_id:
            return _get_info(elem)
        if not found:
            elem.clear()
</snippet></ROW><ROW><id>12369875</id><snippet>plt.show()</snippet></ROW><ROW><id>12369875</id><snippet>threading</snippet></ROW><ROW><id>12369875</id><snippet>plt.show()</snippet></ROW><ROW><id>12369875</id><snippet>join()</snippet></ROW><ROW><id>12369875</id><snippet>test.py</snippet></ROW><ROW><id>12369875</id><snippet>import threading
from matplotlib import pyplot as p
import time

p.plot([_ for _ in xrange(5)])

t = threading.Thread(target=p.show)
t.start()

for i in xrange(5):
    print "lala %s" % i
    time.sleep(1)

print "Waiting for plot thread to finish..."
t.join()
print "Finished."
</snippet></ROW><ROW><id>12369875</id><snippet>14:43:42 $ python test.py
lala 0
lala 1
Exception in thread Thread-1:
Traceback (most recent call last):
  File "/usr/lib/python2.6/threading.py", line 532, in __bootstrap_inner
    self.run()
  File "/usr/lib/python2.6/threading.py", line 484, in run
    self.__target(*self.__args, **self.__kwargs)
  File "/usr/lib/pymodules/python2.6/matplotlib/backends/backend_tkagg.py", line 73, in show
    manager.show()
  File "/usr/lib/pymodules/python2.6/matplotlib/backends/backend_tkagg.py", line 385, in show
    if not self._shown: self.canvas._tkcanvas.bind("&lt;Destroy&gt;", destroy)
  File "/usr/lib/python2.6/lib-tk/Tkinter.py", line 988, in bind
    return self._bind(('bind', self._w), sequence, func, add)
  File "/usr/lib/python2.6/lib-tk/Tkinter.py", line 938, in _bind
    needcleanup)
  File "/usr/lib/python2.6/lib-tk/Tkinter.py", line 1101, in _register
    self.tk.createcommand(name, f)
RuntimeError: main thread is not in main loop
</snippet></ROW><ROW><id>12369875</id><snippet>p.show()</snippet></ROW><ROW><id>12369909</id><snippet>'Charlie_Mode= %_label=%.1f.png'%(Mode, Label)
</snippet></ROW><ROW><id>12369909</id><snippet>'Charlie_Mode= %s_label=%.1f.png' % (Mode, Label)
</snippet></ROW><ROW><id>12369909</id><snippet>%</snippet></ROW><ROW><id>12369909</id><snippet>s</snippet></ROW><ROW><id>12369909</id><snippet>Mode</snippet></ROW><ROW><id>12369909</id><snippet>Mode[0]</snippet></ROW><ROW><id>12369942</id><snippet>import crontab
import time

e = crontab.CronTab('*/5 * * * *') # every five minutes
while True:
    delay = e.next()
    time.sleep(delay)
    print("It's time (again)!")
</snippet></ROW><ROW><id>12370212</id><snippet>import random
elementinthelist = random.choice(lists.list1)
</snippet></ROW><ROW><id>12370456</id><snippet>readlines()</snippet></ROW><ROW><id>12370456</id><snippet>for x in list:
</snippet></ROW><ROW><id>12370456</id><snippet>for x in (s.strip() for s in list):
</snippet></ROW><ROW><id>12370456</id><snippet>list</snippet></ROW><ROW><id>12370456</id><snippet>with open('c:/tmp/textfile.TXT') as f:
    haystack = f.read()

if not haystack:
    sys.exit("Could not read haystack data :-(")

with open('c:/tmp/list.txt') as f:
    for needle in (line.strip() for line in f):
        if needle in haystack:
            print(needle, ',one_sentence')
        else:
            print(needle, ',another_sentence')
</snippet></ROW><ROW><id>12370456</id><snippet>with</snippet></ROW><ROW><id>12370776</id><snippet>import colander


class Characteristic(collander.MappingSchema):
    id = colander.SchemaNode(colander.Int(),
                             validator=colander.Range(0, 9999))
    name = colander.SchemaNode(colander.String())
    rating = colander.SchemaNode(colander.String())        


class Characteristics(collander.SequenceSchema):
    characteristic = Characteristic()


class Person(colander.MappingSchema):
    id = colander.SchemaNode(colander.Int(),
                             validator=colander.Range(0, 9999))
    name = colander.SchemaNode(colander.String())
    phone = colander.SchemaNode(colander.String())
    characteristics = Characteristics()


class Data(collander.SequenceSchema):
    person = Person()
</snippet></ROW><ROW><id>12370776</id><snippet>deserialized = Data.deserialize(json.loads(json_string)) 
</snippet></ROW><ROW><id>12370805</id><snippet>required=False</snippet></ROW><ROW><id>12370805</id><snippet>BooleanField</snippet></ROW><ROW><id>12370805</id><snippet>NullBooleanField</snippet></ROW><ROW><id>12370805</id><snippet>from django import forms

class MyForm(forms.Form) :
    """The test form"""
    my_boolean_field = forms.BooleanField(initial=True)
</snippet></ROW><ROW><id>12370805</id><snippet>&lt;div&gt;
{{ form.my_boolean_field.label_tag }}
{{ form.my_boolean_field }}
{{ form.my_boolean_field.errors }}
&lt;/div&gt;
</snippet></ROW><ROW><id>12370805</id><snippet>&lt;div&gt;
&lt;label for="id_my_boolean_field"&gt;My boolean field&lt;/label&gt;
&lt;input type="checkbox" name="my_boolean_field" id="id_my_boolean_field" /&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>12370805</id><snippet>form = MyForm(initial={'my_boolean_field':False})
</snippet></ROW><ROW><id>12370805</id><snippet>&lt;div&gt;
&lt;label for="id_my_boolean_field"&gt;My boolean field&lt;/label&gt;
&lt;input checked="checked" type="checkbox" name="my_boolean_field" value="False" id="id_my_boolean_field" /&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>12370805</id><snippet>form = FormLogin(initial={'my_boolean_field':"False"})
</snippet></ROW><ROW><id>12370885</id><snippet>    def __getstate__(self):
        '''
        Getstate for pickle (used by shelve module)
        '''
        return self.__dict__

    def __setstate__(self, dictionary):
        '''
        Setstate for pickle (used by shelve module)
        '''
        self.__dict__ = dictionary
</snippet></ROW><ROW><id>12370938</id><snippet>def calculate(L, N, X):
    n = min(L//X, N)
    return n, L//n
</snippet></ROW><ROW><id>12370938</id><snippet>def spread(seq, N=None, X=1):
    """Yield successive subsequences of seq having at least X elements.

    If N is specified, the number of subsequences yielded will not exceed N.

    The first L % X subsequences yielded (where L = len(seq)) will be longer
    by 1 than the remaining ones.

    &gt;&gt;&gt; list(spread('abcdefghij', 4, 3))
    ['abcd', 'efg', 'hij']
    &gt;&gt;&gt; list(spread('abcdefghijklmnopqrstuvwxyz', 4, 7))
    ['abcdefghi', 'jklmnopqr', 'stuvwxyz']

    seq    any object supporting len(...) and slice-indexing
    N      a positive integer (default: L)
    X      a positive integer not greater than L (default: 1)
    """

    # All error-checking code omitted

    L = len(seq)       # length of seq
    assert 0 &lt; X &lt;= L

    if N is None: N = L
    assert 0 &lt; N

    # A total of n subsequences will be yielded, the first r of which will 
    # have length x + 1, and the remaining ones will have length x.

    # if we insist on using calculate()...
    # n, x = calculate(L, N, X)
    # r = L % n

    # ...but this entails separate computations of L//n and L%n; may as well
    # do both with a single divmod(L, n)
    n = min(L//X, N)
    x, r = divmod(L, n)

    start = 0
    stride = x + 1    # stride will revert to x when i == r
    for i in range(n):
        if i == r: stride = x
        finish = start + stride
        yield seq[start:finish]
        start = finish
    assert start == L
</snippet></ROW><ROW><id>12371186</id><snippet>photo_image = PhotoImage(filename)
</snippet></ROW><ROW><id>12371186</id><snippet>photo_image = PhotoImage(file=filename)
</snippet></ROW><ROW><id>12371186</id><snippet>name</snippet></ROW><ROW><id>12371186</id><snippet>__init__</snippet></ROW><ROW><id>12371186</id><snippet>PhotoImage</snippet></ROW><ROW><id>12371186</id><snippet>__init__(self, name=None, cnf={}, master=None, **kw)
</snippet></ROW><ROW><id>12371186</id><snippet>PhotoImage</snippet></ROW><ROW><id>12371189</id><snippet>mysql&gt; SELECT * FROM mytable WHERE created &gt; UNIX_TIMESTAMP(STR_TO_DATE('2012-09-10 00:00:00-05:00','%Y-%m-%d %k:%i:%s') - INTERVAL 1 DAY);
Empty set, 3 warnings (0.00 sec)

mysql&gt; show warnings;
+---------+------+----------------------------------------------------------------------+
| Level   | Code | Message                                                              |
+---------+------+----------------------------------------------------------------------+
| Warning | 1292 | Truncated incorrect datetime value: '2012-09-10 00:00:00-05:00'      |
| Warning | 1292 | Truncated incorrect datetime value: '2012-09-10 00:00:00-05:00'      |
| Warning | 1292 | Incorrect datetime value: '1347148800' for column 'created' at row 1 |
+---------+------+----------------------------------------------------------------------+
3 rows in set (0.00 sec)
</snippet></ROW><ROW><id>12371191</id><snippet>def chunk_range(first, last, howmany):
    size = ((last - first + 1) + (howmany - 1)) // howmany
    while first &lt;= last:
        next = first + size
        yield first, min(next - 1, last)
        first = next

list(chunk_range(1, 100, 4))
</snippet></ROW><ROW><id>12371191</id><snippet>[(1, 25), (26, 50), (51, 75), (76, 100)]
</snippet></ROW><ROW><id>12371191</id><snippet>list(chunk_range(1, 7, 3))
</snippet></ROW><ROW><id>12371191</id><snippet>[(1, 3), (4, 6), (7, 7)]   # last chunk is only one item
</snippet></ROW><ROW><id>12371451</id><snippet>\</snippet></ROW><ROW><id>12371451</id><snippet>r''</snippet></ROW><ROW><id>12371451</id><snippet>r'c:\Users\xxxxx\Documents\Visual Studio 2010\Projects\xxx'
'c:\\Users\\xxxxx\\Documents\\Visual Studio 2010\\Projects\\xxx'
</snippet></ROW><ROW><id>12371451</id><snippet>\n</snippet></ROW><ROW><id>12371451</id><snippet>\t</snippet></ROW><ROW><id>12371451</id><snippet>\b</snippet></ROW><ROW><id>12371563</id><snippet>while True:</snippet></ROW><ROW><id>12371563</id><snippet>for line in sys.stdin:</snippet></ROW><ROW><id>12371563</id><snippet>for line in sys.stdin</snippet></ROW><ROW><id>12371637</id><snippet>import signal
import sys
import time

def main_function():

    data_for_signal_handler = 10

    def signal_handler(*args):
        print data_for_signal_handler
        sys.exit()

    signal.signal(signal.SIGINT, signal_handler) # Or whatever signal

    while True:
        data_for_signal_handler += 1
        time.sleep(0.5)

if __name__ == '__main__':
    main_function()
</snippet></ROW><ROW><id>12371647</id><snippet>.decode()</snippet></ROW><ROW><id>12371647</id><snippet> template_str = template_str.decode('utf8')
</snippet></ROW><ROW><id>12371647</id><snippet>val</snippet></ROW><ROW><id>12371758</id><snippet>pip freeze</snippet></ROW><ROW><id>12371758</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>12371886</id><snippet>raw_unicode_escape</snippet></ROW><ROW><id>12371886</id><snippet>unicode_escape</snippet></ROW><ROW><id>12371886</id><snippet>&gt;&gt;&gt; print u'\u00e9'.encode('unicode_escape')
\xe9
</snippet></ROW><ROW><id>12372259</id><snippet>memberdef_list = [elem for elem in from_cache(classname, 'memberdefs')
                  if elem.argsstring != '[]' and 
                     'std::string' in null2string(elem.vartype)]
</snippet></ROW><ROW><id>12372259</id><snippet>def stdstring_args(elem):
    if elem.argstring == '[]':
        return False
    return 'std::string' in null2string(elem.vartype)

memberdef_list = [elem for elem in from_cache(classname, 'memberdefs')
                  if stdstring_args(elem)]
</snippet></ROW><ROW><id>12372278</id><snippet>from dateutil import tz
from_zone = tz.gettz('UTC')
print(from_zone)
# tzfile('/usr/share/zoneinfo/UTC')
</snippet></ROW><ROW><id>12372382</id><snippet>install_requires</snippet></ROW><ROW><id>12372382</id><snippet>requires</snippet></ROW><ROW><id>12372382</id><snippet>setuptools</snippet></ROW><ROW><id>12372382</id><snippet>distutils</snippet></ROW><ROW><id>12372382</id><snippet>from setuptools import setup

setup(name='my_project',
      description="Just a test project",
      version="1.0",
      py_modules=['sample'],
      install_requires=['requests'])
</snippet></ROW><ROW><id>12372488</id><snippet>dirFile = open('listac.txt','r')
pathFile = open('paths.txt','r')
paths = pathFile.readlines()
dirs = dirFile.readlines()

matches = open('temp.txt','w')

for pline in paths:
    p = pline.rstrip('\n').split(".")[0].replace(" ", "")
    for dline in dirs:
        dd = dline.rstrip('\n').replace(" ", "")
        #print p.lower()
        #print dd.lower()
        if p.lower() == dd.lower():
            print "SUCCESS\n"
            matches.write(str(p).lower() + '\n')
</snippet></ROW><ROW><id>12372625</id><snippet>np.ma.median</snippet></ROW><ROW><id>12372625</id><snippet>MaskedArray</snippet></ROW><ROW><id>12372625</id><snippet>np.median</snippet></ROW><ROW><id>12372625</id><snippet>np.ma.MaskedArray</snippet></ROW><ROW><id>12373158</id><snippet>YYYY-mm-ddTHH:MM:SS+tz:tz</snippet></ROW><ROW><id>12373158</id><snippet>T</snippet></ROW><ROW><id>12373158</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12373158</id><snippet>.isoformat()</snippet></ROW><ROW><id>12373158</id><snippet>T</snippet></ROW><ROW><id>12373158</id><snippet>import iso8601
utciso8601 = dt.astimezone(iso8601.iso8601.UTC).isoformat(' ')[:19]
</snippet></ROW><ROW><id>12373158</id><snippet>tzname()</snippet></ROW><ROW><id>12373158</id><snippet>datetime</snippet></ROW><ROW><id>12373158</id><snippet>iso8601.iso8601.parse_timezone()</snippet></ROW><ROW><id>12373158</id><snippet># insertion:
cursor.execute('INSERT INTO dates VALUES(?, ?)', utciso8601, dt.tzname())

# querying
for row in query:
    timezone = iso8601.iso8601.parse_timezone(row[1])
    utcdt = iso8601.parse_date(row[0])
    dt = utcdt.astimezone(timezone)
</snippet></ROW><ROW><id>12373307</id><snippet>pdf.trailer["/Root"]["/PageLabels"]["/Nums"]
</snippet></ROW><ROW><id>12373307</id><snippet>IndirectObject</snippet></ROW><ROW><id>12373307</id><snippet>getObject()</snippet></ROW><ROW><id>12373307</id><snippet>extractText()</snippet></ROW><ROW><id>12373307</id><snippet>extractText()</snippet></ROW><ROW><id>12373320</id><snippet>itemClicked</snippet></ROW><ROW><id>12373320</id><snippet>checkedState</snippet></ROW><ROW><id>12373320</id><snippet>row</snippet></ROW><ROW><id>12373320</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self, rows, columns):
        QtGui.QWidget.__init__(self)
        self.table = QtGui.QTableWidget(rows, columns, self)
        for column in range(columns):
            for row in range(rows):
                item = QtGui.QTableWidgetItem('Text%d' % row)
                if row % 2:
                    item.setFlags(QtCore.Qt.ItemIsUserCheckable |
                                  QtCore.Qt.ItemIsEnabled)
                    item.setCheckState(QtCore.Qt.Unchecked)
                self.table.setItem(row, column, item)
        self.table.itemClicked.connect(self.handleItemClicked)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.table)
        self._list = []

    def handleItemClicked(self, item):
        if item.checkState() == QtCore.Qt.Checked:
            print('"%s" Checked' % item.text())
            self._list.append(item.row())
            print(self._list)
        else:
            print('"%s" Clicked' % item.text())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window(6, 3)
    window.resize(350, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12373478</id><snippet>float</snippet></ROW><ROW><id>12373478</id><snippet>r"this is a string"</snippet></ROW><ROW><id>12373478</id><snippet>"\t"</snippet></ROW><ROW><id>12373478</id><snippet>r"\t"</snippet></ROW><ROW><id>12373478</id><snippet>'\'</snippet></ROW><ROW><id>12373478</id><snippet>'t'</snippet></ROW><ROW><id>12373535</id><snippet>limit</snippet></ROW><ROW><id>12373535</id><snippet>method</snippet></ROW><ROW><id>12373535</id><snippet>value</snippet></ROW><ROW><id>12373621</id><snippet>thenh@localhost:~&gt; pep8 *.py
1.py:11:1: W293 blank line contains whitespace
1.py:14:80: E501 line too long (81 characters)
1.py:24:1: E302 expected 2 blank lines, found 1
1.py:37:23: W291 trailing whitespace
1.py:90:27: E201 whitespace after '['
1.py:116:36: E701 multiple statements on one line (colon)
1.py:144:9: E303 too many blank lines (2)
2.py:22:1: W391 blank line at end of file
3.py:75:29: E231 missing whitespace after ','
</snippet></ROW><ROW><id>12373653</id><snippet>subprocess</snippet></ROW><ROW><id>12373653</id><snippet> import subprocess
 try:
     subprocess.call(['wrongcommand'])
 except OSError:
     print ('wrongcommand does not exist')
</snippet></ROW><ROW><id>12373653</id><snippet>subprocess</snippet></ROW><ROW><id>12373653</id><snippet>os.system</snippet></ROW><ROW><id>12373801</id><snippet>self.linecount</snippet></ROW><ROW><id>12373801</id><snippet>write</snippet></ROW><ROW><id>12374112</id><snippet>Button</snippet></ROW><ROW><id>12374112</id><snippet>launchbutton = Button( text = row[0], background_normal = 'tile.png', 
    on_press = self.Launcher(row[1]) 
)
</snippet></ROW><ROW><id>12374112</id><snippet>launchbutton = Button( text = row[0], background_normal = 'tile.png', 
    on_press = lambda: self.Launcher(row[1])
)
</snippet></ROW><ROW><id>12374112</id><snippet>self.Launcher</snippet></ROW><ROW><id>12374112</id><snippet>on_press</snippet></ROW><ROW><id>12374112</id><snippet>self.Launcher</snippet></ROW><ROW><id>12374112</id><snippet>Button</snippet></ROW><ROW><id>12374112</id><snippet>on_press</snippet></ROW><ROW><id>12374112</id><snippet>on_release</snippet></ROW><ROW><id>12374112</id><snippet>Button.__init__</snippet></ROW><ROW><id>12374112</id><snippet>bind</snippet></ROW><ROW><id>12374112</id><snippet>launchbutton = Button( text = row[0], background_normal = 'tile.png' )
launchbutton.bind( on_press = lambda widget: self.Launcher( row[1] ) )
</snippet></ROW><ROW><id>12374112</id><snippet>widget</snippet></ROW><ROW><id>12374112</id><snippet>funcs = []
for x in xrange(10):
    funcs.append( lambda: x)
</snippet></ROW><ROW><id>12374112</id><snippet>funcs[n]()</snippet></ROW><ROW><id>12374112</id><snippet>n in [0..9]</snippet></ROW><ROW><id>12374112</id><snippet>9</snippet></ROW><ROW><id>12374112</id><snippet>n</snippet></ROW><ROW><id>12374112</id><snippet>x</snippet></ROW><ROW><id>12374112</id><snippet>x</snippet></ROW><ROW><id>12374112</id><snippet>9</snippet></ROW><ROW><id>12374112</id><snippet>funcs</snippet></ROW><ROW><id>12374112</id><snippet>9</snippet></ROW><ROW><id>12374112</id><snippet>    funcs.append( lambda x=x: x)
</snippet></ROW><ROW><id>12374112</id><snippet>x</snippet></ROW><ROW><id>12374112</id><snippet>x</snippet></ROW><ROW><id>12374112</id><snippet>    funcs.append( lambda inner_x=x: inner_x)
</snippet></ROW><ROW><id>12374112</id><snippet>x=x</snippet></ROW><ROW><id>12374112</id><snippet>launchbutton.bind( on_press = lambda widget, appname=row[1]: self.Launcher( appname ) )
</snippet></ROW><ROW><id>12374112</id><snippet>row[1]</snippet></ROW><ROW><id>12374112</id><snippet>appname</snippet></ROW><ROW><id>12374112</id><snippet>Launcher</snippet></ROW><ROW><id>12374165</id><snippet>p = re.compile('(a(b)+)')
test3 = 'ababbabbbabbbb'
print p.findall(test3)
</snippet></ROW><ROW><id>12374165</id><snippet>[('ab', 'b'), ('abb', 'b', 'b'), ('abbb', 'b', 'b', 'b'), ('abbbb', 'b')]
</snippet></ROW><ROW><id>12374165</id><snippet>[('ab', 'b'), ('abb', 'b'), ('abbb', 'b'), ('abbbb', 'b')]
</snippet></ROW><ROW><id>12374234</id><snippet>count += 1 + depth(expr[x])
</snippet></ROW><ROW><id>12374234</id><snippet>max</snippet></ROW><ROW><id>12374234</id><snippet>def depth(expr):
    if not isinstance(expr, tuple):
        return 0
    # this says: return the maximum depth of any sub-expression + 1
    return max(map(depth, expr)) + 1

print depth(("a", "b"))
# 1
print depth(('+', ('expt', 'x', 2), ('expt', 'y', 2)))
# 2
print depth(('/', ('expt', 'x', 5), ('expt', ('-', ('expt', 'x', 2), 1), ('/', 5, 2)))) 
# 4
</snippet></ROW><ROW><id>12374235</id><snippet>global</snippet></ROW><ROW><id>12374235</id><snippet>chosen</snippet></ROW><ROW><id>12374235</id><snippet>chosen2</snippet></ROW><ROW><id>12374235</id><snippet>chosen</snippet></ROW><ROW><id>12374235</id><snippet>Listener1.chosen</snippet></ROW><ROW><id>12374235</id><snippet>chosen2</snippet></ROW><ROW><id>12374235</id><snippet>self.chosen2</snippet></ROW><ROW><id>12374235</id><snippet>Listener2</snippet></ROW><ROW><id>12374235</id><snippet>Listener2.chosen2</snippet></ROW><ROW><id>12374235</id><snippet>chosen</snippet></ROW><ROW><id>12374235</id><snippet>Listener1.chosen</snippet></ROW><ROW><id>12374235</id><snippet>global</snippet></ROW><ROW><id>12374235</id><snippet>global</snippet></ROW><ROW><id>12374263</id><snippet>class BaseSurveyForm(Form):
    # define your base fields here


def show_survey(survey_id):
    survey_information = get_survey_info(survey_id)

    class SurveyInstance(BaseSurveyForm):
        pass

    for question in survey_information:
        field = generate_field_for_question(question)
        setattr(SurveyInstanceForm, question.backend_name, field)

    form = SurveyInstanceForm(request.form)

    # Do whatever you need to with form here


def generate_field_for_question(question):
    if question.type == "truefalse":
        return BooleanField(question.text)
    elif question.type == "date":
        return DateField(question.text)
    else:
        return TextField(question.text)
</snippet></ROW><ROW><id>12374361</id><snippet>python2.7</snippet></ROW><ROW><id>12374361</id><snippet>#!/usr/bin/env python2.7
</snippet></ROW><ROW><id>12374361</id><snippet>import sys
print sys.version_info
...really do checks here...
</snippet></ROW><ROW><id>12374507</id><snippet>flask.views.View</snippet></ROW><ROW><id>12374507</id><snippet>flask.views.MethodView</snippet></ROW><ROW><id>12374507</id><snippet>flask.views.View</snippet></ROW><ROW><id>12374507</id><snippet>dispatch_request</snippet></ROW><ROW><id>12374507</id><snippet>dispatch_request</snippet></ROW><ROW><id>12374507</id><snippet>MethdoView</snippet></ROW><ROW><id>12374733</id><snippet>class WorkItemContextManager(object):
    def __enter__(self):
        self.item = get_item()
        return self.item

    def __exit__(self, exc_type, exc_value, tb):
        if exc_type is not None:
            if exc_type is SomeError and exc_value.code == 123:
                do_something(self.item)
                return True  # Exception handled
            put_back(self.item)
</snippet></ROW><ROW><id>12374733</id><snippet>with WorkItemContextManager() as item:
    do_work(item)
</snippet></ROW><ROW><id>12374733</id><snippet>__exit__</snippet></ROW><ROW><id>12374733</id><snippet>with</snippet></ROW><ROW><id>12374733</id><snippet>finally</snippet></ROW><ROW><id>12374733</id><snippet>item = get_item()
try:
    do_work(item)
    item = None
except SomeError as err:
    if err.code == 123:
        do_something(item)
        item = None
finally:
    if item is not None:
        put_back(item)
</snippet></ROW><ROW><id>12374733</id><snippet>finally</snippet></ROW><ROW><id>12374733</id><snippet>try:</snippet></ROW><ROW><id>12374733</id><snippet>item</snippet></ROW><ROW><id>12374733</id><snippet>None</snippet></ROW><ROW><id>12374733</id><snippet>finally</snippet></ROW><ROW><id>12374733</id><snippet>finally</snippet></ROW><ROW><id>12374733</id><snippet>except</snippet></ROW><ROW><id>12374733</id><snippet>do_work</snippet></ROW><ROW><id>12374733</id><snippet>item</snippet></ROW><ROW><id>12374733</id><snippet>SomeError</snippet></ROW><ROW><id>12374733</id><snippet>err.code</snippet></ROW><ROW><id>12374733</id><snippet>item</snippet></ROW><ROW><id>12374733</id><snippet>put_back(item)</snippet></ROW><ROW><id>12374944</id><snippet>json.loads</snippet></ROW><ROW><id>12374944</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>12374944</id><snippet>&gt;&gt;&gt; a = """[
...              [["L1603",1,5],[271585,972739],[272739,872739, 272739,972739, 271585,972739, 271585,272389, 270999,272389]],
...              [["L1605",1,5],[271897,872739],[272739,872739, 272739,972739, 271891,872739, 271891,272119, 270963,272119]],
...              [["L1607",1,4],[271584,272738],[271584,272738, 271584,272388, 270998,272388, 270998,272386]]
...             ]
... 
... """
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(a)
[[['L1603', 1, 5], [271585, 972739], [272739, 872739, 272739, 972739, 271585, 972739, 271585, 272389, 270999, 272389]], [['L1605', 1, 5], [271897, 872739], [272739, 872739, 272739, 972739, 271891, 872739, 271891, 272119, 270963, 272119]], [['L1607', 1, 4], [271584, 272738], [271584, 272738, 271584, 272388, 270998, 272388, 270998, 272386]]]
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads(a)
[[[u'L1603', 1, 5], [271585, 972739], [272739, 872739, 272739, 972739, 271585, 972739, 271585, 272389, 270999, 272389]], [[u'L1605', 1, 5], [271897, 872739], [272739, 872739, 272739, 972739, 271891, 872739, 271891, 272119, 270963, 272119]], [[u'L1607', 1, 4], [271584, 272738], [271584, 272738, 271584, 272388, 270998, 272388, 270998, 272386]]]
</snippet></ROW><ROW><id>12374944</id><snippet>a</snippet></ROW><ROW><id>12374944</id><snippet>file.read()</snippet></ROW><ROW><id>12374977</id><snippet>NullHandler</snippet></ROW><ROW><id>12374977</id><snippet>foo</snippet></ROW><ROW><id>12374977</id><snippet>foo</snippet></ROW><ROW><id>12374977</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>12374977</id><snippet>NullHandler</snippet></ROW><ROW><id>12374977</id><snippet>NullHandler</snippet></ROW><ROW><id>12374977</id><snippet>if __name__ == '__main__':
    configure_logging() # whatever configuration you need to do
    main()
</snippet></ROW><ROW><id>12374977</id><snippet>WARNING</snippet></ROW><ROW><id>12374996</id><snippet>main.py</snippet></ROW><ROW><id>12374996</id><snippet>SeTestSuite = unittest.defaultTestLoader.discover(start_dir='.')
</snippet></ROW><ROW><id>12374996</id><snippet># if your line didn't work
unittest.TextTestRunner(verbosity=2).run(unittest.TestSuite(SeTestSuite))
</snippet></ROW><ROW><id>12375223</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class Dialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(Dialog, self).__init__(parent)

        layout = QtGui.QVBoxLayout()
        self.setLayout(layout)

        self.b1 = QtGui.QPushButton('flash splash')
        self.b1.clicked.connect(self.flashSplash)

        layout.addWidget(self.b1)

    def flashSplash(self):
        # Be sure to keep a reference to the SplashScreen
        # otherwise it'll be garbage collected
        # That's why there is 'self.' in front of the name
        self.splash = QtGui.QSplashScreen(QtGui.QPixmap('/path/to/image.jpg'))

        # SplashScreen will be in the center of the screen by default.
        # You can move it to a certain place if you want.
        # self.splash.move(10,10)

        self.splash.show()

        # Close the SplashScreen after 2 secs (2000 ms)
        QtCore.QTimer.singleShot(2000, self.splash.close)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    main = Dialog()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12375521</id><snippet>edgecolor='none'</snippet></ROW><ROW><id>12375521</id><snippet>bar</snippet></ROW><ROW><id>12375560</id><snippet>import struct
def create_pbm(size,lst):
    out = ['P4\n'+' '.join(map(str,size))+'\n'] #header
    for j in xrange(0,len(lst),size[1]):
        #single row of data
        row = lst[j:j+size[1]]
        #padded string which can be turned into a number with `int`
        s = ''.join(map(str,row))+'0000000'
        #Turn the string into a number and pack it (into unsigned int) using struct. 
        vals = [struct.pack('B',int(s[i*8:(i+1)*8],2)) for i in xrange(size[0]//8+1) ]
        out.append(''.join(vals))
    return ''.join(out)

a = [1]*25 #flat black image.
print repr(create_pbm((5,5),a))
</snippet></ROW><ROW><id>12375560</id><snippet>def read_pbm(fname):
    with open(fname) as f:
        data = [x for x in f if not x.startswith('#')] #remove comments
    p_whatever = data.pop(0)  #P4 ... don't know if that's important...
    dimensions = map(int,data.pop(0).split())
    arr = []
    col_number = 0
    for c in data.pop(0):
        integer = struct.unpack('B',c)[0]
        col_number += 8
        bits = map(int,bin(integer)[2:])
        arr.extend(bits[:min(8,dimensions[0]-col_number)])
        if(col_number &gt; dimensions[0]):
            col_number = 0 

    return (dimensions, arr)
</snippet></ROW><ROW><id>12375682</id><snippet>path = 'c:/DL/Others/%s%s' % (filename, file_ext)
uniq = 1
while os.path.exists(path):
  path = 'c:/DL/Others/%s_%d%s' % (filename, uniq, file_ext)
  uniq += 1
</snippet></ROW><ROW><id>12375682</id><snippet>_1</snippet></ROW><ROW><id>12375890</id><snippet>regex.match</snippet></ROW><ROW><id>12375890</id><snippet>regex.sub()</snippet></ROW><ROW><id>12375890</id><snippet>sub</snippet></ROW><ROW><id>12375890</id><snippet>regex.search</snippet></ROW><ROW><id>12375890</id><snippet>import re
import string

words = ['a.bc,,', 'cdd,gf.f.d,fe']

regex = re.compile('[%s]' % re.escape(string.punctuation))
for i in words:
    while regex.search(i):
        i = regex.sub('', i)
    print i
</snippet></ROW><ROW><id>12376181</id><snippet>any</snippet></ROW><ROW><id>12376181</id><snippet>&gt;&gt;&gt; pairs = { 'word1':0, 'word2':0, 'word3':2000, 'word4':64, 'word5':0, 'wordn':8 }
&gt;&gt;&gt; any(v &gt; 0 for v in pairs.itervalues())
True
&gt;&gt;&gt; any(v &gt; 3000 for v in pairs.itervalues())
False
</snippet></ROW><ROW><id>12376181</id><snippet>all</snippet></ROW><ROW><id>12376181</id><snippet>&gt;&gt;&gt; all(v &gt; 0 for v in pairs.itervalues())
False
&gt;&gt;&gt; all(v &lt; 3000 for v in pairs.itervalues())
True
</snippet></ROW><ROW><id>12376181</id><snippet>.itervalues()</snippet></ROW><ROW><id>12376181</id><snippet>.values()</snippet></ROW><ROW><id>12376341</id><snippet>do_form()</snippet></ROW><ROW><id>12376341</id><snippet>return HttpResponseRedirect</snippet></ROW><ROW><id>12376341</id><snippet>return HttpResponseRedirect('/continue/%s' %(workflowid))
</snippet></ROW><ROW><id>12376341</id><snippet>url(r'^continue/(?P&lt;workflowid&gt;\d+)/$', 
          view = 'continue',
          name = 'continue_view')
</snippet></ROW><ROW><id>12376341</id><snippet>continue()</snippet></ROW><ROW><id>12376341</id><snippet>def continue(request, workflowid=None):
 ...
</snippet></ROW><ROW><id>12376341</id><snippet>/continue/</snippet></ROW><ROW><id>12376341</id><snippet>None</snippet></ROW><ROW><id>12376341</id><snippet>/continue/23/</snippet></ROW><ROW><id>12376341</id><snippet>continue()</snippet></ROW><ROW><id>12376341</id><snippet>workflowid</snippet></ROW><ROW><id>12376400</id><snippet>join()</snippet></ROW><ROW><id>12376400</id><snippet>threads</snippet></ROW><ROW><id>12376400</id><snippet>for t in threads: t.join()</snippet></ROW><ROW><id>12376400</id><snippet>self.running</snippet></ROW><ROW><id>12376400</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>12376400</id><snippet>getUserInput</snippet></ROW><ROW><id>12376400</id><snippet>get_user_input</snippet></ROW><ROW><id>12376400</id><snippet>object</snippet></ROW><ROW><id>12376400</id><snippet>class Test(object):</snippet></ROW><ROW><id>12376400</id><snippet>import threading
from time import sleep


def main():
    t = Test()
    t.go()
    try:
        join_threads(t.threads)
    except KeyboardInterrupt:
        print "\nKeyboardInterrupt catched."
        print "Terminate main thread."
        print "If only daemonic threads are left, terminate whole program."


class Test(object):
    def __init__(self):
        self.running = True
        self.threads = []

    def foo(self):
        while(self.running):
            print '\nHello\n'
            sleep(2)

    def get_user_input(self):
        while True:
            x = raw_input("Enter 'e' for exit: ")
            if x.lower() == 'e':
               self.running = False
               break

    def go(self):
        t1 = threading.Thread(target=self.foo)
        t2 = threading.Thread(target=self.get_user_input)
        # Make threads daemonic, i.e. terminate them when main thread
        # terminates. From: http://stackoverflow.com/a/3788243/145400
        t1.daemon = True
        t2.daemon = True
        t1.start()
        t2.start()
        self.threads.append(t1)
        self.threads.append(t2)


def join_threads(threads):
    """
    Join threads in interruptable fashion.
    From http://stackoverflow.com/a/9790882/145400
    """
    for t in threads:
        while t.isAlive():
            t.join(5)


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>12376400</id><snippet>threading</snippet></ROW><ROW><id>12376400</id><snippet>$ python supertest.py

Hello

Enter 'e' for exit: 
Hello


Hello


Hello

e
$
</snippet></ROW><ROW><id>12376442</id><snippet>   if not (Follower.objects.filter(company=company).count() % 5):
        #send the email
</snippet></ROW><ROW><id>12376599</id><snippet>import base64
import zlib

flash =  "eNrj4mZkrShgWdHBx1mUmJfNosQIACUhBCI="

original = '{"xp": 656398, "rank": 34}'
encoded = original.encode('zlib').encode('base64')
decoded = encoded.decode('base64').decode('zlib')
print original
print encoded
print decoded
</snippet></ROW><ROW><id>12376917</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, msg):
...         self.msg = msg
...     def speak(self):
...         print(self.msg)
...      
&gt;&gt;&gt; tell_me = Foo.speak
&gt;&gt;&gt; tell_me(Foo("hello!"))
hello!
</snippet></ROW><ROW><id>12376917</id><snippet>Foo.speak</snippet></ROW><ROW><id>12376917</id><snippet>Foo("hello").speak</snippet></ROW><ROW><id>12377059</id><snippet>listify</snippet></ROW><ROW><id>12377059</id><snippet>import functools

def listify(f):
    @functools.wraps(f)
    def listify_helper(*args, **kwargs):
        return list(f(*args, **kwargs))
    return listify_helper
</snippet></ROW><ROW><id>12377083</id><snippet>map</snippet></ROW><ROW><id>12377083</id><snippet>apply</snippet></ROW><ROW><id>12377083</id><snippet>&gt;&gt;&gt; d
    A   B  C
0  11  13  5
1   6   7  4
2   8   3  6
3   4   8  7
4   0   1  7
&gt;&gt;&gt; (d.A + d.B) / d.C
0    4.800000
1    3.250000
2    1.833333
3    1.714286
4    0.142857
&gt;&gt;&gt; d.A &gt; d.C
0     True
1     True
2     True
3    False
4    False
</snippet></ROW><ROW><id>12377083</id><snippet>apply</snippet></ROW><ROW><id>12377083</id><snippet>axis=1</snippet></ROW><ROW><id>12377083</id><snippet>min(A, B)-C</snippet></ROW><ROW><id>12377083</id><snippet>&gt;&gt;&gt; d.apply(lambda row: min([row['A'], row['B']])-row['C'], axis=1)
0    6
1    2
2   -3
3   -3
4   -7
</snippet></ROW><ROW><id>12377083</id><snippet>d['A'][:-1] &lt; d['C'][1:]
</snippet></ROW><ROW><id>12377083</id><snippet>d['A'][1:] &lt; d['C'][:-1]
</snippet></ROW><ROW><id>12377083</id><snippet>['A"][:-1]</snippet></ROW><ROW><id>12377083</id><snippet>['C'][1:]</snippet></ROW><ROW><id>12377291</id><snippet>**kwargs</snippet></ROW><ROW><id>12377291</id><snippet>*args</snippet></ROW><ROW><id>12377291</id><snippet>class Animal(object):
    def __init__(self, **kwargs):
        self.class_ = kwargs['class_']
        self.species = kwargs['species']
        # etc.
class Mammal(Animal):
    def __init__(self, **kwargs):
        Animal.__init__(self, class_="Mammal", **kwargs)
</snippet></ROW><ROW><id>12377291</id><snippet>&gt;&gt;&gt; Animal(class_='Fish', species='barracuda', is_domesticated=False)
4: &lt;__main__.Animal object at 0x0177ABF0&gt;
&gt;&gt;&gt; Mammal(species="monkey", is_domesticated=False)
5: &lt;__main__.Mammal object at 0x0177AFB0&gt;
</snippet></ROW><ROW><id>12377296</id><snippet>tastypie.resources.Resource</snippet></ROW><ROW><id>12377296</id><snippet>def alter_list_data_to_serialize(self, request, data):
    """
    A hook to alter list data just before it gets serialized &amp; sent to the user.

    Useful for restructuring/renaming aspects of the what's going to be
    sent.

    Should accommodate for a list of objects, generally also including
    meta data.
    """
    return data
</snippet></ROW><ROW><id>12377296</id><snippet> total_amount = 0.0
 for object in data[ 'objects' ]:
     total_amount += object[ 'amount' ]

 return { 'objects' : data[ 'objects' ], 'total_amount' : total_amount }
</snippet></ROW><ROW><id>12377430</id><snippet>re.findall</snippet></ROW><ROW><id>12377430</id><snippet>match_list = []
match = re.findall('\n(\w+)\s+(\d*)\s+(\d*)', output)
for k in match:
    #k will be a tuple like this: ('frank', '114', '0')
    match_list.append(list(k))
</snippet></ROW><ROW><id>12377430</id><snippet>match_list = map(list, re.findall('\n(\w+)\s+(\d*)\s+(\d*)', output))
</snippet></ROW><ROW><id>12377541</id><snippet>writelines</snippet></ROW><ROW><id>12377541</id><snippet>write</snippet></ROW><ROW><id>12377541</id><snippet>line1 + "\n" + line2</snippet></ROW><ROW><id>12377541</id><snippet>write</snippet></ROW><ROW><id>12377541</id><snippet>"\n".join(list_of_lines)</snippet></ROW><ROW><id>12377543</id><snippet>spam</snippet></ROW><ROW><id>12377543</id><snippet>**kwargs</snippet></ROW><ROW><id>12377900</id><snippet>&gt;&gt;&gt; data = {'a':a, 'b':b, 'c':c}
&gt;&gt;&gt; data['a'] is a
True
</snippet></ROW><ROW><id>12377974</id><snippet>QUrl</snippet></ROW><ROW><id>12377974</id><snippet>qrc://</snippet></ROW><ROW><id>12377974</id><snippet>:/</snippet></ROW><ROW><id>12377974</id><snippet>qrc</snippet></ROW><ROW><id>12377974</id><snippet>:/images/cut.png</snippet></ROW><ROW><id>12377974</id><snippet>qrc:///images/cut.png</snippet></ROW><ROW><id>12377974</id><snippet>images/cut.png</snippet></ROW><ROW><id>12377974</id><snippet>QtCore.QUrl("qrc:///local_file.html")
</snippet></ROW><ROW><id>12377974</id><snippet>alias</snippet></ROW><ROW><id>12377974</id><snippet>alias="html_home"</snippet></ROW><ROW><id>12377974</id><snippet>&lt;qresource prefix="/"&gt;
    &lt;file alias="html_home"&gt;webbrowser_html/program_index.html&lt;/file&gt;
</snippet></ROW><ROW><id>12377974</id><snippet>:/html_home</snippet></ROW><ROW><id>12377974</id><snippet>:/webbrowser_html/program_index.html</snippet></ROW><ROW><id>12377974</id><snippet>QtCore.QUrl("qrc:///html_home")
</snippet></ROW><ROW><id>12377974</id><snippet>class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)

        self.setupUi(self)
        #...
        self.WebBrowser.load(QtCore.QUrl('qrc:///html_home'))
</snippet></ROW><ROW><id>12378023</id><snippet>pop</snippet></ROW><ROW><id>12378023</id><snippet>&gt;&gt;&gt; filter = Q(a=True)
&gt;&gt;&gt; filter = filter &amp; Q(b=True)
&gt;&gt;&gt; filter.children
[('a', True), ('b', True)]
&gt;&gt;&gt; filter.children.pop()
('b', True)
&gt;&gt;&gt; filter.children
[('a', True)]
</snippet></ROW><ROW><id>12378028</id><snippet>cur.execute("INSERT INTO tbl VALUES (?), [str(date[i])])</snippet></ROW><ROW><id>12378028</id><snippet>cur.execute("INSERT INTO tbl VALUES ('%s')" %(str(date[i]), )</snippet></ROW><ROW><id>12378028</id><snippet> INSERT INTO tbl VALUES (2012-06-10);
</snippet></ROW><ROW><id>12378028</id><snippet> INSERT INTO tbl VALUES (1996);
</snippet></ROW><ROW><id>12378028</id><snippet> INSERT INTO tbl VALUES ('2012-06-10');
</snippet></ROW><ROW><id>12378028</id><snippet>'</snippet></ROW><ROW><id>12378346</id><snippet>any</snippet></ROW><ROW><id>12378346</id><snippet>if any(s in status for s in ("modified", "deleted", "Untracked files:")):
    whatever()
</snippet></ROW><ROW><id>12378735</id><snippet>newPNVar</snippet></ROW><ROW><id>12378735</id><snippet>tk.Entry</snippet></ROW><ROW><id>12378735</id><snippet>ttk.Entry</snippet></ROW><ROW><id>12378735</id><snippet>newPNVar</snippet></ROW><ROW><id>12378735</id><snippet>self.newPNVar</snippet></ROW><ROW><id>12378735</id><snippet>import Tkinter as tk
import ttk

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        part_num = '1234'
        self.newPNVar = tk.StringVar()
        newPN = ttk.Entry(self, width=13, textvariable=self.newPNVar)
        self.newPNVar.set(part_num)
        newPN.pack()
        #newPN.insert(0, part_num)  also didn't work

        print self.newPNVar.get()


app = SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>12378886</id><snippet>mktime()</snippet></ROW><ROW><id>12378886</id><snippet>calendar.timegm()</snippet></ROW><ROW><id>12378886</id><snippet>parsed = parse_date(timestamp)
timetuple = parsed.timetuple()
return calendar.timegm(timetuple)
</snippet></ROW><ROW><id>12379023</id><snippet>conn = MySQLdb.connect(host="1.2.3.4", port=1234, user="root", passwd="x", db="test")

for j in range(10):
    try:
        for i in range(10):
            cur = conn.cursor()
            query = "DELETE FROM SomeTable WHERE ID = %d" % i
            cur.execute(query)
            cur.close()
        conn.commit()
    except Exception:
        conn.rollback()

conn.close()
</snippet></ROW><ROW><id>12379185</id><snippet>md5</snippet></ROW><ROW><id>12379185</id><snippet>md5</snippet></ROW><ROW><id>12379185</id><snippet>m = md5()
m.update(src)
hash = m.digest()
</snippet></ROW><ROW><id>12379185</id><snippet>md5()</snippet></ROW><ROW><id>12379185</id><snippet>hash = md5(src).digest()
</snippet></ROW><ROW><id>12379218</id><snippet>r = p.map_async(main1, d.values())</snippet></ROW><ROW><id>12379218</id><snippet>d.values()</snippet></ROW><ROW><id>12379218</id><snippet>[{}, {}]</snippet></ROW><ROW><id>12379218</id><snippet>main1(item)</snippet></ROW><ROW><id>12379218</id><snippet>[1, 1]</snippet></ROW><ROW><id>12379218</id><snippet>main1</snippet></ROW><ROW><id>12379218</id><snippet>r</snippet></ROW><ROW><id>12379218</id><snippet>map()</snippet></ROW><ROW><id>12379218</id><snippet>d</snippet></ROW><ROW><id>12379218</id><snippet>d</snippet></ROW><ROW><id>12379218</id><snippet>map_async</snippet></ROW><ROW><id>12379218</id><snippet>main1</snippet></ROW><ROW><id>12379218</id><snippet>d</snippet></ROW><ROW><id>12379527</id><snippet>np.int8</snippet></ROW><ROW><id>12379527</id><snippet>anomalies = x - x.mean()
signs = np.sign(anomalies).astype(np.int8)
</snippet></ROW><ROW><id>12379527</id><snippet>N</snippet></ROW><ROW><id>12379527</id><snippet>from np.lib.stride_tricks import as_strided
strided = as_strided(signs, 
                     strides=(signs.itemsize,signs.itemsize), 
                     shape=(signs.shape,N))
</snippet></ROW><ROW><id>12379527</id><snippet>(x.size, N)</snippet></ROW><ROW><id>12379527</id><snippet>x[0:N]</snippet></ROW><ROW><id>12379527</id><snippet>x[1:N+1]</snippet></ROW><ROW><id>12379527</id><snippet>N-1</snippet></ROW><ROW><id>12379527</id><snippet>strided = strided[:-N+1]
</snippet></ROW><ROW><id>12379527</id><snippet>consecutives = strided.sum(axis=-1)
</snippet></ROW><ROW><id>12379527</id><snippet>(x.size-N+1)</snippet></ROW><ROW><id>12379527</id><snippet>-N</snippet></ROW><ROW><id>12379527</id><snippet>+N</snippet></ROW><ROW><id>12379527</id><snippet>N</snippet></ROW><ROW><id>12379527</id><snippet>(indices,) = np.nonzero(consecutives == N)
</snippet></ROW><ROW><id>12379527</id><snippet>indices</snippet></ROW><ROW><id>12379527</id><snippet>i</snippet></ROW><ROW><id>12379527</id><snippet>x</snippet></ROW><ROW><id>12379527</id><snippet>x[i:i+N]</snippet></ROW><ROW><id>12379527</id><snippet>x=np.random.rand(10)</snippet></ROW><ROW><id>12379527</id><snippet>N=3</snippet></ROW><ROW><id>12379527</id><snippet>&gt;&gt;&gt; x = array([ 0.57016436,  0.79360943,  0.89535982,  0.83632245,  0.31046202,
            0.91398363,  0.62358298,  0.72148491,  0.99311681,  0.94852957])
&gt;&gt;&gt; signs = np.sign(x-x.mean()).astype(np.int8)
array([-1,  1,  1,  1, -1,  1, -1, -1,  1,  1], dtype=int8)
&gt;&gt;&gt; strided = as_strided(signs,strides=(1,1),shape=(signs.size,3))
array([[  -1,    1,    1],
       [   1,    1,    1],
       [   1,    1,   -1],
       [   1,   -1,    1],
       [  -1,    1,   -1],
       [   1,   -1,   -1],
       [  -1,   -1,    1],
       [  -1,    1,    1],
       [   1,    1, -106],
       [   1, -106,  -44]], dtype=int8)
&gt;&gt;&gt; consecutive=strided[:-N+1].sum(axis=-1)
array([ 1,  3,  1,  1, -1, -1, -1,  1])
&gt;&gt;&gt; np.nonzero(np.abs(consecutive)==N)
(array([1]),)
</snippet></ROW><ROW><id>12379592</id><snippet>    this.showDiv.onclick = this.hide;
</snippet></ROW><ROW><id>12379592</id><snippet>this.hide</snippet></ROW><ROW><id>12379592</id><snippet>hide</snippet></ROW><ROW><id>12379592</id><snippet>this</snippet></ROW><ROW><id>12379592</id><snippet>    this.showDiv.onclick = this.hide.bind(this);
</snippet></ROW><ROW><id>12379592</id><snippet>.bind()</snippet></ROW><ROW><id>12379592</id><snippet>function bindMethod(object, func) {
    return function () { return func.apply(object, arguments); };
}

this.showDiv.onclick = bindMethod(this, this.hide);
</snippet></ROW><ROW><id>12379592</id><snippet>this</snippet></ROW><ROW><id>12379592</id><snippet>this</snippet></ROW><ROW><id>12379592</id><snippet>this</snippet></ROW><ROW><id>12379592</id><snippet>var self = this;</snippet></ROW><ROW><id>12379592</id><snippet>this</snippet></ROW><ROW><id>12379609</id><snippet>pop</snippet></ROW><ROW><id>12379609</id><snippet>mfSet</snippet></ROW><ROW><id>12379609</id><snippet>dict</snippet></ROW><ROW><id>12379609</id><snippet>str</snippet></ROW><ROW><id>12379609</id><snippet>mfSet[str(mf)] = mf</snippet></ROW><ROW><id>12379609</id><snippet>dict</snippet></ROW><ROW><id>12379609</id><snippet>set</snippet></ROW><ROW><id>12379609</id><snippet>dict</snippet></ROW><ROW><id>12379609</id><snippet>for mf in mfSet:</snippet></ROW><ROW><id>12379609</id><snippet>for mf in mfSet.itervalues():</snippet></ROW><ROW><id>12379609</id><snippet>mfSet</snippet></ROW><ROW><id>12379609</id><snippet>MovieFile.__str__()</snippet></ROW><ROW><id>12379609</id><snippet>from collections import defaultdict

mf_collection = defaultdict(list)

def pop():
    ## populate the collection with MovieFile objects
    m = MovieFile(title=t, year=y, dir=d, filename=f)
    mf_collection[str(m)].append(m)

class MovieFile():

    def __init__(self, title, dir, filename, year=0):
        self.title = title
        self.year = year
        self.fulltitle = title if year == 0 else title + ' (' + year + ')'
        self.dir = dir
        self.filename = filename

    def __str__(self):
        return repr(self.title + ' (' + self.year + ') at ' + self.dir)
</snippet></ROW><ROW><id>12379609</id><snippet>from x import mf_collection, pop

pop()

for mf_group in mf_collection.itervalues():  # this yields lists of MovieFiles
    for mf in mf_group:  # this yields the actual MovieFiles
        ft = mf.fulltitle
        title = mf.title
</snippet></ROW><ROW><id>12379832</id><snippet>Managers</snippet></ROW><ROW><id>12379923</id><snippet>None</snippet></ROW><ROW><id>12379923</id><snippet>__eq__</snippet></ROW><ROW><id>12379923</id><snippet>rhs.__eq__(self)</snippet></ROW><ROW><id>12379923</id><snippet>__eq__</snippet></ROW><ROW><id>12379923</id><snippet>==</snippet></ROW><ROW><id>12379923</id><snippet>a == b</snippet></ROW><ROW><id>12379923</id><snippet>a.__eq__(b)</snippet></ROW><ROW><id>12379923</id><snippet>NotImplemented</snippet></ROW><ROW><id>12379923</id><snippet>b.__eq__(a)</snippet></ROW><ROW><id>12379923</id><snippet>False</snippet></ROW><ROW><id>12379923</id><snippet>__eq__</snippet></ROW><ROW><id>12379923</id><snippet>NotImplemented</snippet></ROW><ROW><id>12379923</id><snippet>x</snippet></ROW><ROW><id>12379923</id><snippet>X</snippet></ROW><ROW><id>12379923</id><snippet>"abc".__eq__(x)</snippet></ROW><ROW><id>12379923</id><snippet>NotImplemented</snippet></ROW><ROW><id>12379923</id><snippet>x.__eq__("abc")</snippet></ROW><ROW><id>12379923</id><snippet>True</snippet></ROW><ROW><id>12379923</id><snippet>stdObj.__eq__(obj)</snippet></ROW><ROW><id>12379923</id><snippet>stdObj == obj</snippet></ROW><ROW><id>12379923</id><snippet>__eq__</snippet></ROW><ROW><id>12379923</id><snippet>NotImplemented</snippet></ROW><ROW><id>12379950</id><snippet>x = get_false() or {}
</snippet></ROW><ROW><id>12379950</id><snippet>get_false()</snippet></ROW><ROW><id>12379950</id><snippet>False</snippet></ROW><ROW><id>12379950</id><snippet>or</snippet></ROW><ROW><id>12380009</id><snippet>&gt;&gt;&gt; from gi.repository import Gtk
&gt;&gt;&gt; mymodel = Gtk.ListStore()
&gt;&gt;&gt; Gtk.TreeModelSort(model=mymodel)
&lt;TreeModelSort object at 0x1d4d190 (GtkTreeModelSort at 0x1f0d3f0)&gt;
</snippet></ROW><ROW><id>12380166</id><snippet>import json

api_result = '{"username":"wawa","age":20}'

class User(object):
    def __init__(self, api_result):
        userinfo = json.loads(api_result)
        self.__dict__.update(userinfo)

import unittest

class DefaultTestCase(unittest.TestCase):
    def test_default(self):
        user = User(api_result)
        self.assertEqual(user.username, 'wawa')
        self.assertEqual(user.age, 20)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>12380287</id><snippet>allCBList</snippet></ROW><ROW><id>12380287</id><snippet>dict</snippet></ROW><ROW><id>12380287</id><snippet>all*</snippet></ROW><ROW><id>12380287</id><snippet>allCBList[key]</snippet></ROW><ROW><id>12380287</id><snippet>list</snippet></ROW><ROW><id>12380287</id><snippet>all</snippet></ROW><ROW><id>12380287</id><snippet>{ All1 : [checkbox1A, checkbox1B],
  All2 : [checkbox2A, checkbox2B]}
</snippet></ROW><ROW><id>12380287</id><snippet>checked</snippet></ROW><ROW><id>12380287</id><snippet>All*</snippet></ROW><ROW><id>12380287</id><snippet>checked</snippet></ROW><ROW><id>12380287</id><snippet>for key, checkboxes in allCBList.iteritems():
    for checkbox in checkboxes:
        checkbox.toggled.connect(lambda checked, checkboxes=checkboxes, key=key: key.setChecked(checked and all(checkbox.isChecked() for checkbox in checkboxes))
</snippet></ROW><ROW><id>12380287</id><snippet>lambda checked, checkboxes=checkboxes, key=key:
</snippet></ROW><ROW><id>12380287</id><snippet>lambda</snippet></ROW><ROW><id>12380287</id><snippet>toggled</snippet></ROW><ROW><id>12380287</id><snippet>checked</snippet></ROW><ROW><id>12380287</id><snippet>checkboxes=checkboxes</snippet></ROW><ROW><id>12380287</id><snippet>key=key</snippet></ROW><ROW><id>12380287</id><snippet>checkboxes</snippet></ROW><ROW><id>12380287</id><snippet>key</snippet></ROW><ROW><id>12380287</id><snippet>lambda</snippet></ROW><ROW><id>12380287</id><snippet>key.setChecked(...)
</snippet></ROW><ROW><id>12380287</id><snippet>checked</snippet></ROW><ROW><id>12380287</id><snippet>key</snippet></ROW><ROW><id>12380287</id><snippet>All*</snippet></ROW><ROW><id>12380287</id><snippet>checked and all(checkbox.isChecked() for checkbox in checkboxes)
</snippet></ROW><ROW><id>12380287</id><snippet>all</snippet></ROW><ROW><id>12380287</id><snippet>True</snippet></ROW><ROW><id>12380287</id><snippet>True</snippet></ROW><ROW><id>12380287</id><snippet>checkbox</snippet></ROW><ROW><id>12380287</id><snippet>True</snippet></ROW><ROW><id>12380287</id><snippet>checked</snippet></ROW><ROW><id>12380287</id><snippet>isChecked()</snippet></ROW><ROW><id>12380287</id><snippet>True</snippet></ROW><ROW><id>12380287</id><snippet>checked and ...</snippet></ROW><ROW><id>12380287</id><snippet>all</snippet></ROW><ROW><id>12380287</id><snippet>unchecked</snippet></ROW><ROW><id>12380287</id><snippet>All*</snippet></ROW><ROW><id>12380287</id><snippet>unchecked</snippet></ROW><ROW><id>12380287</id><snippet>.keys()</snippet></ROW><ROW><id>12380287</id><snippet>dict</snippet></ROW><ROW><id>12380287</id><snippet>dict</snippet></ROW><ROW><id>12380287</id><snippet>keys</snippet></ROW><ROW><id>12380287</id><snippet>All*</snippet></ROW><ROW><id>12380287</id><snippet>All*</snippet></ROW><ROW><id>12380287</id><snippet>clicked</snippet></ROW><ROW><id>12380287</id><snippet>toggled</snippet></ROW><ROW><id>12380287</id><snippet>All*</snippet></ROW><ROW><id>12380287</id><snippet># Connect checkbox pairs
# you just use the values
# change 'itervalues' to 'values' if you are on Python 3.x
for cbPair in cbPairs.itervalues():
    cbOne = cbPair[0][0]
    cbTwo = cbPair[1][0]
    cbOne.toggled.connect(cbTwo.setChecked)
    cbTwo.toggled.connect(cbOne.setChecked) 

# Connect allCB and allRO signals
# change 'iteritems' to 'items' if you are on Python 3.x
for key, checkboxes in allCBList.iteritems():
    for checkbox in checkboxes:
        key.clicked.connect(checkbox.setChecked)
        checkbox.toggled.connect(lambda checked, checkboxes=checkboxes, key=key: key.setChecked(checked and all(checkbox.isChecked() for checkbox in checkboxes))
</snippet></ROW><ROW><id>12380595</id><snippet>import numpy as np
import itertools as it
from matplotlib import pyplot as plt
import scipy as sp

inputs = list(it.product([0,1,2],[0,1,2]))
i = 0
lattice = range(0,len(inputs))
for pair in inputs:
    lattice[i] = mksite(pair[0], pair[1])
    i = i +1
</snippet></ROW><ROW><id>12380595</id><snippet>plt.plot(*np.transpose(lattice), marker = 'o', ls = '')
axes().set_aspect('equal')
</snippet></ROW><ROW><id>12380595</id><snippet>dela = sp.spatial.Delaunay
triang = dela(lattice)
</snippet></ROW><ROW><id>12380595</id><snippet>triang.points
</snippet></ROW><ROW><id>12380595</id><snippet>array([[ 0.        ,  0.        ],
       [ 0.5       ,  0.8660254 ],
       [ 1.        ,  1.73205081],
       [ 1.        ,  0.        ],
       [ 1.5       ,  0.8660254 ],
       [ 2.        ,  1.73205081],
       [ 2.        ,  0.        ],
       [ 2.5       ,  0.8660254 ],
       [ 3.        ,  1.73205081]])
</snippet></ROW><ROW><id>12380595</id><snippet>triang.vertices
</snippet></ROW><ROW><id>12380595</id><snippet>array([[4, 3, 6],
       [5, 4, 2],
       [1, 3, 0],
       [1, 4, 2],
       [1, 4, 3],
       [7, 4, 6],
       [7, 5, 8],
       [7, 5, 4]], dtype=int32)
</snippet></ROW><ROW><id>12380595</id><snippet>[4, 3, 6]</snippet></ROW><ROW><id>12380595</id><snippet>[ 1.5       ,  0.8660254 ]
[ 1.        ,  0.        ]
[ 2.        ,  0.        ]
</snippet></ROW><ROW><id>12380595</id><snippet>triang.vertices</snippet></ROW><ROW><id>12380595</id><snippet>def find_neighbors(pindex, triang):
    neighbors = list()
    for simplex in triang.vertices:
        if pindex in simplex:
            neighbors.extend([simplex[i] for i in range(len(simplex)) if simplex[i] != pindex])
            '''
            this is a one liner for if a simplex contains the point we`re interested in,
            extend the neighbors list by appending all the *other* point indices in the simplex
            '''
    #now we just have to strip out all the dulicate indices and return the neighbors list:
    return list(set(neighbors))
</snippet></ROW><ROW><id>12380687</id><snippet>len()</snippet></ROW><ROW><id>12380687</id><snippet>O(1)</snippet></ROW><ROW><id>12380716</id><snippet>required</snippet></ROW><ROW><id>12380716</id><snippet>title = forms.CharField(required=False)</snippet></ROW><ROW><id>12380734</id><snippet>class Post(Base):
    __tablename__ = 'post'

    id = Column(Integer, primary_key=True)
    text = Column(Unicode)

class Like(Base):
    __tablename__ = 'like'

    id = Column(Integer, primary_key=True)
    post_id = Column(Integer, ForeignKey(Post.id), nullable=False)

class Alert(Base):
    __tablename__ = 'alert'

    id = Column(Integer, primary_key=True)
    like_id = Column(Integer, ForeignKey(Like.id))
</snippet></ROW><ROW><id>12380734</id><snippet>DBSession.query(Alert.id).join(Like).join(Post).filter(Post.id==2).all()
</snippet></ROW><ROW><id>12381248</id><snippet>__init__.py</snippet></ROW><ROW><id>12381248</id><snippet>/src
    __init__.py
    main.py
    foo/
        __init__.py
        foo.py
        /bar
        __init__.py
        bar.py
    util/
        __init__.py
        utilities.py
</snippet></ROW><ROW><id>12381248</id><snippet>main.py</snippet></ROW><ROW><id>12381248</id><snippet>foo.py</snippet></ROW><ROW><id>12381248</id><snippet>bar.py</snippet></ROW><ROW><id>12381248</id><snippet>utilities</snippet></ROW><ROW><id>12381248</id><snippet>from util import utilities
</snippet></ROW><ROW><id>12381287</id><snippet>sum</snippet></ROW><ROW><id>12381287</id><snippet>sum(float(v)*float(prices[k]) for k,v in data.iteritems())</snippet></ROW><ROW><id>12381426</id><snippet>1,2,3,4,5
1,2,3,4,5
1,2,3,4,5
1,2,3,4,5
0,1,2,3,4
2,3,4,5,6
</snippet></ROW><ROW><id>12381426</id><snippet>#!/bin/env python

col = 2

values = []
with open('csv.csv', 'r') as csv:
    for line in csv.readlines():
        elements = line.strip().split(',')
        values.append(int(elements[col]))

csum = sum(values)
cavg = sum(values)/len(values)
print("Sum of column %d: %f" % (col, csum))
print("Avg of column %d: %f" % (col, cavg))
</snippet></ROW><ROW><id>12381426</id><snippet>$ python parsecsv.py
Sum of column 0: 6.000000
Avg of column 0: 1.000000

$ python parsecsv.py
Sum of column 2: 18.000000
Avg of column 2: 3.000000
</snippet></ROW><ROW><id>12381426</id><snippet>readlines()</snippet></ROW><ROW><id>12381426</id><snippet>csv.readline()</snippet></ROW><ROW><id>12381435</id><snippet>&gt;&gt;&gt; line = 'a: b :c:d:e  :f:gh   '
&gt;&gt;&gt; ','.join(x.strip() for x in line.split(':'))
'a,b,c,d,e,f,gh'
</snippet></ROW><ROW><id>12381435</id><snippet>&gt;&gt;&gt; line.replace(':',',').replace(' ','')
'a,b,c,d,e,f,gh'
</snippet></ROW><ROW><id>12381801</id><snippet>.save()</snippet></ROW><ROW><id>12381801</id><snippet>try:
    obj = Model.objects.get(field=value)
    obj.field = new_value
    obj.save()
except Model.DoesNotExist:
    obj = Model.objects.create(field=new_value)
# do something else with obj if need be
</snippet></ROW><ROW><id>12381884</id><snippet>os.system</snippet></ROW><ROW><id>12381884</id><snippet>subprocess.call()</snippet></ROW><ROW><id>12381884</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>12381884</id><snippet>import subprocess
...
subprocess.call('netsh interface ipv4 set interface ""Wireless Network" metric=1', shell=True)
</snippet></ROW><ROW><id>12381884</id><snippet>netshcmd=subprocess.Popen('netsh interface ipv4 set interface ""Wireless Network" metric=1', shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE )
output, errors =  netshcmd.communicate()
if errors: 
   print "WARNING: ", errors
 else:
   print "SUCCESS ", output
</snippet></ROW><ROW><id>12381994</id><snippet>from decimal import *

getcontext().prec = 6 
getcontext().rounding = ROUND_FLOOR

print Decimal(22)/Decimal(7)
</snippet></ROW><ROW><id>12381994</id><snippet>3.14285
</snippet></ROW><ROW><id>12382004</id><snippet>x</snippet></ROW><ROW><id>12382004</id><snippet>x</snippet></ROW><ROW><id>12382004</id><snippet>x</snippet></ROW><ROW><id>12382004</id><snippet>x</snippet></ROW><ROW><id>12382004</id><snippet>x</snippet></ROW><ROW><id>12382004</id><snippet>x</snippet></ROW><ROW><id>12382004</id><snippet>&gt;&gt;&gt; y = [lambda : x for x in range(3)]
&gt;&gt;&gt; y[0]()
2
&gt;&gt;&gt; x = 88
&gt;&gt;&gt; y[0]()
88
&gt;&gt;&gt; x = [lambda : x for x in range(3)]
&gt;&gt;&gt; y = x
&gt;&gt;&gt; y[0]()
[&lt;function &lt;lambda&gt; at 0x017789B0&gt;,
 &lt;function &lt;lambda&gt; at 0x01828DB0&gt;,
 &lt;function &lt;lambda&gt; at 0x01828F30&gt;]
&gt;&gt;&gt; x = 88
&gt;&gt;&gt; y[0]()
88
</snippet></ROW><ROW><id>12382076</id><snippet>Python.h</snippet></ROW><ROW><id>12382076</id><snippet>/usr/include/python2.6/</snippet></ROW><ROW><id>12382076</id><snippet>-I</snippet></ROW><ROW><id>12382076</id><snippet>$ gcc -I/usr/include/python2.6 source.c -o program
</snippet></ROW><ROW><id>12382076</id><snippet>find</snippet></ROW><ROW><id>12382076</id><snippet>locate</snippet></ROW><ROW><id>12382295</id><snippet>while</snippet></ROW><ROW><id>12382295</id><snippet>reactor.CallLater()</snippet></ROW><ROW><id>12382295</id><snippet>def main():
    flag = 0
    default_screen()
    reactor.callLater(0.1, tick)

def tick():
   for event in pygame.event.get():
        if event.type == pygame.QUIT:
            reactor.stop() # just stop somehow
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
            reactor.stop() # just stop somehow
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            pos = pygame.mouse.get_pos()
            # some stuff
   reactor.callLater(0.1, tick)
</snippet></ROW><ROW><id>12382295</id><snippet>from twisted.internet import reactor
from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver

import pygame

class ChatClientProtocol(LineReceiver):

    def __init__(self, recv):
        self.recv = recv

    def lineReceived(self,line):
        self.recv(line)

class ChatClient(ClientFactory):
    def __init__(self, recv):
        self.protocol = ChatClientProtocol
        self.recv = recv

    def buildProtocol(self, addr):
        return ChatClientProtocol(self.recv)

class Client(object):

    def __init__(self):
        self.line = 'no message'
        pygame.init()
        self.screen = pygame.display.set_mode((200, 200))
        reactor.callLater(0.1, self.tick)

    def new_line(self, line):
        self.line = line

    def tick(self):
        self.screen.fill((0,0,0))
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                reactor.stop() # just stop somehow
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                reactor.stop() # just stop somehow
        self.screen.blit(pygame.font.SysFont('mono', 12, bold=True).render(self.line, True, (0, 255, 0)), (20,20))
        pygame.display.flip()
        reactor.callLater(0.1, self.tick)

if __name__ == '__main__':
    c = Client()
    reactor.connectTCP('127.0.0.1',6000, ChatClient(c.new_line))    
    reactor.run()
</snippet></ROW><ROW><id>12382295</id><snippet>LoopingCall</snippet></ROW><ROW><id>12382295</id><snippet>from twisted.internet.task import LoopingCall

class Client(object):

    def __init__(self):
        self.line = 'no message'
        pygame.init()
        self.screen = pygame.display.set_mode((200, 200))

    def new_line(self, line):
        self.line = line

    def tick(self):
        self.screen.fill((0,0,0))
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                reactor.stop() # just stop somehow
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                reactor.stop() # just stop somehow
        self.screen.blit(pygame.font.SysFont('mono', 12, bold=True).render(self.line, True, (0, 255, 0)), (20,20))
        pygame.display.flip()

if __name__ == '__main__':
    c = Client()

    lc = LoopingCall(c.tick)
    lc.start(0.1)
    reactor.connectTCP('127.0.0.1',6000, ChatClient(c.new_line))    
    reactor.run()
</snippet></ROW><ROW><id>12382314</id><snippet>distinct</snippet></ROW><ROW><id>12382314</id><snippet>values()</snippet></ROW><ROW><id>12382314</id><snippet>values()</snippet></ROW><ROW><id>12382314</id><snippet>dict['attr_name']</snippet></ROW><ROW><id>12382314</id><snippet>staff = Staff.objects.all().values('person').distinct()
for k in staff:
    j = k['person']
    print j,k
</snippet></ROW><ROW><id>12382488</id><snippet>if start == end:
</snippet></ROW><ROW><id>12382488</id><snippet>if datetime.datetime.now() &gt; end:
</snippet></ROW><ROW><id>12382488</id><snippet>import time
while True:
    putMessageToScreen()
    time.sleep(25*60)
</snippet></ROW><ROW><id>12382503</id><snippet>cv.CaptureFromCAM</snippet></ROW><ROW><id>12382503</id><snippet>settings.py</snippet></ROW><ROW><id>12382503</id><snippet>CAM = cv.CaptureFromCAM(0)
</snippet></ROW><ROW><id>12382503</id><snippet>from django.http import HttpResponse
import cv, Image

def instantPhoto(request) :
    cv_img = cv.QueryFrame( CAM[0] )
    pil_img = Image.fromstring("RGB", cv.GetSize(cv_img), cv_img.tostring())
    response = HttpResponse(mimetype="image/png")
    pil_img.save(response, "PNG")
    return response
</snippet></ROW><ROW><id>12382518</id><snippet># coding: utf-8
def test():
    var = 1 
    def print_var():
        print var    &lt;--- var is not in local scope, the var from outer scope gets used
    print_var()
    print var 

test()
# 1
# 1
def test1():
    var = 2 
    def print_var():
        print var     &lt;---- var is in local scope, but not defined yet, ouch
        var = 3 
    print_var()
    print var 

test1()
# raise Exception
</snippet></ROW><ROW><id>12382601</id><snippet>links = [link for link in br.links() if any(attr==('class','l') for attr in link.attrs)]
</snippet></ROW><ROW><id>12382601</id><snippet>class=l</snippet></ROW><ROW><id>12382601</id><snippet>mechanize</snippet></ROW><ROW><id>12382601</id><snippet>links()</snippet></ROW><ROW><id>12382612</id><snippet>assert isinstance(...)</snippet></ROW><ROW><id>12382612</id><snippet>m = getAttr(someThing, 'someAttr')
m.*no autocompletion*
</snippet></ROW><ROW><id>12382612</id><snippet>m</snippet></ROW><ROW><id>12382612</id><snippet>m = getAttr(someThing, 'someAttr')
assert isinstance(m, BaseMap) # or whatever class it is
m.*pydev shows autocompletion*
</snippet></ROW><ROW><id>12382738</id><snippet>format</snippet></ROW><ROW><id>12383049</id><snippet>Github</snippet></ROW><ROW><id>12383049</id><snippet>g = Github( token )</snippet></ROW><ROW><id>12383049</id><snippet>for repo in g.get_user().get_repos():
    print repo.name
    repo.edit( has_wiki = False ) 
</snippet></ROW><ROW><id>12383343</id><snippet>setup.py</snippet></ROW><ROW><id>12383343</id><snippet>setup.py</snippet></ROW><ROW><id>12383343</id><snippet>    version=__import__('lock').__version__,
</snippet></ROW><ROW><id>12383343</id><snippet>lock</snippet></ROW><ROW><id>12383343</id><snippet>__init__.py</snippet></ROW><ROW><id>12383343</id><snippet>  File "setup.py", line 9, in &lt;module&gt;
    version=__import__('lock').__version__,
</snippet></ROW><ROW><id>12383343</id><snippet>setup.py</snippet></ROW><ROW><id>12383343</id><snippet>__import__</snippet></ROW><ROW><id>12383343</id><snippet>__init__.py</snippet></ROW><ROW><id>12383492</id><snippet>len(your_list)
</snippet></ROW><ROW><id>12383614</id><snippet>for file in sorted(glob('./*.dat')):
</snippet></ROW><ROW><id>12383640</id><snippet>Similarity1 = (1.0 + len(intersection1))/(1.0 + max(len(set_sentence1), len(set_sentence3)))
Similarity2 = (1.0 + len(intersection2))/(1.0 + max(len(set_sentence2), len(set_sentence3)))
</snippet></ROW><ROW><id>12383792</id><snippet>add_edge</snippet></ROW><ROW><id>12383792</id><snippet>dict</snippet></ROW><ROW><id>12383792</id><snippet>dict</snippet></ROW><ROW><id>12383792</id><snippet>g.add_edge(1, 2, {x:2})
# or more explicitly
g.add_edge(1, 2, attr_dict={x:2})
</snippet></ROW><ROW><id>12383792</id><snippet>In [25]: g = networkx.DiGraph()

In [26]: x = 'some string'

In [27]: g.add_edge(1, 2, {x:2})

In [28]: g[1][2]
Out[28]: {'some string': 2}
</snippet></ROW><ROW><id>12383817</id><snippet>SMTP</snippet></ROW><ROW><id>12383817</id><snippet>def send(host, port):
    server = smtplib.SMTP(host, port)
</snippet></ROW><ROW><id>12383817</id><snippet>SMTP</snippet></ROW><ROW><id>12383817</id><snippet>(host, port)</snippet></ROW><ROW><id>12383817</id><snippet>AttributeError</snippet></ROW><ROW><id>12383946</id><snippet>.update()</snippet></ROW><ROW><id>12383946</id><snippet>somedict.update(otherdict)
</snippet></ROW><ROW><id>12383946</id><snippet>source = dict()
for mapping in yourlist:
    if 'X' in mapping:
        source = mapping
    else:
        mapping.update(source)
</snippet></ROW><ROW><id>12383946</id><snippet>X</snippet></ROW><ROW><id>12383946</id><snippet>source = dict()
output = []
for mapping in yourlist:
    if 'X' in mapping:
        source = mapping
    else:
        mapping.update(source)
        output.append(mapping)
</snippet></ROW><ROW><id>12384298</id><snippet>&gt;&gt;&gt; name = "Ã¢ÈÃ¢Ã®Ã¢"
</snippet></ROW><ROW><id>12384298</id><snippet>name</snippet></ROW><ROW><id>12384298</id><snippet>&gt;&gt;&gt; name
'\xc3\xa2\xc8\x9b\xc3\xa2\xc3\xae\xc3\xa2'
</snippet></ROW><ROW><id>12384298</id><snippet>&gt;&gt;&gt; u = name.decode('utf-8')
</snippet></ROW><ROW><id>12384298</id><snippet>u = u"Ã¢ÈÃ¢Ã®Ã¢"
</snippet></ROW><ROW><id>12384298</id><snippet>name = u.encode("utf-8")
</snippet></ROW><ROW><id>12384507</id><snippet>def my__getattr__(self, key):
    # If attribute is in the self Series instance ...
    if key in self:
        # ... return is as an attribute
        return self[key]
    else:
        # ... raise the usual exception
        raise AttributeError("'Series' object has no attribute '%s'" % key)

# Overwrite current Series attributes 'else' case
pandas.Series.__getattr__ = my__getattr__
</snippet></ROW><ROW><id>12384507</id><snippet>xx = pandas.Series(dict(a=44, b=55))
xx.a
</snippet></ROW><ROW><id>12384514</id><snippet>make install</snippet></ROW><ROW><id>12384514</id><snippet>python -V</snippet></ROW><ROW><id>12384514</id><snippet>$PATH</snippet></ROW><ROW><id>12384514</id><snippet>make install</snippet></ROW><ROW><id>12384514</id><snippet>$PATH</snippet></ROW><ROW><id>12384584</id><snippet>MinValueValidator</snippet></ROW><ROW><id>12384584</id><snippet>price = models.DecimalField(_(u'Price'), decimal_places=2, max_digits=12, validators=[MinValueValidator(Decimal('0.01'))])
</snippet></ROW><ROW><id>12384631</id><snippet>None</snippet></ROW><ROW><id>12384631</id><snippet>set(filter(bool, [getattr(obj, field) for field in ['field1', 'field2', 'field3']]))
</snippet></ROW><ROW><id>12384631</id><snippet>a_dict = {'key1': 1, 'key2': 2, 'key3missing': 3}

print set([a_dict[key] for key in ['key1','key2','key3'] if key in a_dict])

# prints: set([1, 2])
</snippet></ROW><ROW><id>12385090</id><snippet>perl</snippet></ROW><ROW><id>12385090</id><snippet>pipe = subprocess.Popen(["perl", "perlscript.pl" , "input.bopt7" , "output.xml"], stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>12385090</id><snippet>Popen</snippet></ROW><ROW><id>12385090</id><snippet>perlscript.pl</snippet></ROW><ROW><id>12385150</id><snippet>num = int("""
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450""".replace("\n", ""))
</snippet></ROW><ROW><id>12385159</id><snippet>expires_days=None</snippet></ROW><ROW><id>12385462</id><snippet>reqUser =  friends.UserFriends.gql("where udid =:1", str(udid) ).get()
try:
    reqUserName = reqUser.userName
except AttributeError:
    reqUserName = "No username found!"
</snippet></ROW><ROW><id>12385843</id><snippet>isinstance()</snippet></ROW><ROW><id>12385843</id><snippet>def compare_stocks(stock1, stock2, date):
    """ Compares stock data of two FinanceData objects at a certain time. """
    if isinstance(stock1, FinanceData) and isinstance(stock2, FinanceData):
        return 'comparison'

class FinanceData(object):
    def get_stock(self, date):
        """ Returns stock data in format XX, expects parameter date in format YY """
        raise NotImplementedError

class GoogleFinanceData(FinanceData):
    def get_stock(self, date):
        """ Implements FinanceData.get_stock() """
        return 'important data'
</snippet></ROW><ROW><id>12385843</id><snippet>compare_stocks</snippet></ROW><ROW><id>12385843</id><snippet>get_stock</snippet></ROW><ROW><id>12385876</id><snippet>print '\n'.join(map(str, output))
</snippet></ROW><ROW><id>12385876</id><snippet>map(str, ...)</snippet></ROW><ROW><id>12385881</id><snippet>random.shuffle</snippet></ROW><ROW><id>12385881</id><snippet>import random

class TestRunner:
    def __call__(self):
        users = [user1, user2, user3, user4]
        random.shuffle(users)
        for user in users:
            user()
</snippet></ROW><ROW><id>12386010</id><snippet>import timeit
def test_no_func():
    (x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19) = range(20)
    for i1 in xrange(100):
            for i2 in xrange(100):
                    for i3 in xrange(100):
                            results = [x0+x1+x2+x3+x4+x5+x6 for _ in xrange(100)]
                            results.extend(x7+x8+x9+x10+x11+x12+x13+x14+x15 for _ in xrange(100))
                            results.extend(x16+x17+x18+x19+x0 for _ in xrange(500))
    for j1 in xrange(100):
            for j2 in xrange(100):
                    for i3 in xrange(100):
                            results = [x0+x1+x2+x3+x4+x5+x6 for _ in xrange(100)]
                            results.extend(x7+x8+x9+x10+x11+x12+x13+x14+x15 for _ in xrange(100))
                            results.extend(x16+x17+x18+x19+x0 for _ in xrange(500))


def your_func(x_vars):
    # of the number is not too big you can simply unpack.
    # 150 is a bit too much for unpacking...
    (x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19) = x_vars

    results = [x0+x1+x2+x3+x4+x5+x6 for _ in xrange(100)]
    results.extend(x7+x8+x9+x10+x11+x12+x13+x14+x15 for _ in xrange(100))
    results.extend(x16+x17+x18+x19+x0 for _ in xrange(500))
    return results


def test_func():
    (x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19) = range(20)
    for i1 in xrange(100):
            for i2 in xrange(100):
                    for i3 in xrange(100):
                            results = your_func(val for key,val in locals().copy().iteritems() if key.startswith('x'))
    for j1 in xrange(100):
            for j2 in xrange(100):
                    for i3 in xrange(100):
                            results = your_func(val for key,val in locals().copy().iteritems() if key.startswith('x'))


print timeit.timeit('test_no_func()', 'from __main__ import test_no_func', number=1)
print timeit.timeit('test_func()', 'from __main__ import test_func, your_func', number=1)
</snippet></ROW><ROW><id>12386010</id><snippet>214.810357094
227.490054131
</snippet></ROW><ROW><id>12386206</id><snippet>&lt;office:document-content xmlns:office="http://openoffice.org/2000/office"
                         xmlns:text="http://openoffice.org/2000/text"&gt;

  &lt;office:body&gt;
    &lt;office:text&gt;
      &lt;text:sequence-decls&gt;
        &lt;text:sequence-decl text:display-outline-level="0" text:name="Illustration"/&gt;
        &lt;text:sequence-decl text:display-outline-level="0" text:name="Table"/&gt;
        &lt;text:sequence-decl text:display-outline-level="0" text:name="Text"/&gt;
        &lt;text:sequence-decl text:display-outline-level="0" text:name="Drawing"/&gt;
      &lt;/text:sequence-decls&gt;
      &lt;text:p text:style-name="Standard"&gt;
        &lt;office:annotation&gt;...&lt;/office:annotation&gt;
        foobar
      &lt;/text:p&gt;
    &lt;/office:text&gt;
  &lt;/office:body&gt;

&lt;/office:document-content&gt;
</snippet></ROW><ROW><id>12386206</id><snippet>from xml.etree import ElementTree as ET

root = ET.parse("foobar.xml")
ann = root.find(".//{http://openoffice.org/2000/office}annotation")
print ann.tail.strip()
</snippet></ROW><ROW><id>12386206</id><snippet>ElementTree.find()</snippet></ROW><ROW><id>12386206</id><snippet>office:annotation</snippet></ROW><ROW><id>12386206</id><snippet>Element.tail</snippet></ROW><ROW><id>12386311</id><snippet>&gt;&gt;&gt;myBoolean = True
&gt;&gt;&gt;int(myBoolean)
1
&gt;&gt;&gt;myBoolean = False
&gt;&gt;&gt;int(myBoolean)
0
</snippet></ROW><ROW><id>12386442</id><snippet>newValues = raw_input().strip().split()
</snippet></ROW><ROW><id>12386442</id><snippet>newValues = map(int, raw_input().split())
</snippet></ROW><ROW><id>12386466</id><snippet>.lstrip()</snippet></ROW><ROW><id>12386466</id><snippet>def lstrip(value, chars=None):
    if chars is None:
        chars=' \t\n'
    while value and value[0] in chars:
        value = value[1:]
    return value
</snippet></ROW><ROW><id>12386466</id><snippet>.lstrip()</snippet></ROW><ROW><id>12386466</id><snippet>.rstrip()</snippet></ROW><ROW><id>12386466</id><snippet>.strip()</snippet></ROW><ROW><id>12386466</id><snippet>chars</snippet></ROW><ROW><id>12386466</id><snippet>None</snippet></ROW><ROW><id>12386466</id><snippet>chars</snippet></ROW><ROW><id>12386466</id><snippet>&gt;&gt;&gt; '   spacious   '.lstrip()
'spacious   '
&gt;&gt;&gt; 'www.example.com'.lstrip('cmowz.')
'example.com'
</snippet></ROW><ROW><id>12386483</id><snippet>python -m trace --trace script.py</snippet></ROW><ROW><id>12386483</id><snippet>pdb.run(maya.standalone.initialize(), globals(), locals())
</snippet></ROW><ROW><id>12386483</id><snippet>n</snippet></ROW><ROW><id>12386483</id><snippet>s</snippet></ROW><ROW><id>12386483</id><snippet>help</snippet></ROW><ROW><id>12386483</id><snippet>mayapy</snippet></ROW><ROW><id>12386652</id><snippet>manager</snippet></ROW><ROW><id>12386652</id><snippet>@CheckPremissions()
def someview(request):
    pass
</snippet></ROW><ROW><id>12386652</id><snippet>@CheckPremissions(manager=0)
def someview(request):
    pass
</snippet></ROW><ROW><id>12386652</id><snippet>self.manager</snippet></ROW><ROW><id>12386652</id><snippet>if self.manager != 0:
</snippet></ROW><ROW><id>12386652</id><snippet>self</snippet></ROW><ROW><id>12386652</id><snippet>if manager:
</snippet></ROW><ROW><id>12386652</id><snippet>CheckPermissions</snippet></ROW><ROW><id>12386897</id><snippet>.</snippet></ROW><ROW><id>12386897</id><snippet>..</snippet></ROW><ROW><id>12386897</id><snippet>directory = "path/to/dir"
destination = "location/to/move/to"

Dir.foreach(directory) do |item|
    next if item == '.' or item == '..'
    fileStatus = `~/bin/dropbox.py filestatus #{directory + "/" + item}`
    puts "processing " + item
    if (fileStatus.include? "up to date")
        puts item + " is up to date, starting to move file now."
        # cp command here. Something along this line: `cp #{directory + "/" + item + destination}`
        # rm command here. Probably you want to confirm that all copied files are correct by comparing md5 or something similar.
    else
        puts item + " is not up to date, moving on to next file."
    end
end
</snippet></ROW><ROW><id>12386897</id><snippet># runs in Ruby 1.8.x (ftools)

require 'ftools'

directory = "path/to/dir"
destination = "location/to/move/to"

Dir.glob(directory+"/**/*") do |item|
    next if item == '.' or item == '..'
    fileStatus = `~/bin/dropbox.py filestatus #{item}`
    puts "processing " + item
    puts "filestatus: " + fileStatus
    if (fileStatus.include? "up to date")
        puts item.split('/',2)[1] + " is up to date, starting to move file now."
        `cp -r #{item + " " + destination + "/" + item.split('/',2)[1]}`

        # remove file in Dropbox folder, if current item is not a directory and 
        # copied file is identical.
        if (!File.directory?(item) &amp;&amp; File.cmp(item, destination + "/" + item.split('/',2)[1]).to_s)
            puts "remove " + item
            `rm -rf #{item}`
        end
    else
        puts item + " is not up to date, moving to next file."
    end
end
</snippet></ROW><ROW><id>12387120</id><snippet>fp.write(zlib.compress(pickle.dumps(tempDict, pickle.HIGHEST_PROTOCOL),9))
</snippet></ROW><ROW><id>12387120</id><snippet>pickle.loads(zlib.decompress(fp.read()))
</snippet></ROW><ROW><id>12387120</id><snippet>fp.read()</snippet></ROW><ROW><id>12387120</id><snippet>zlib</snippet></ROW><ROW><id>12387120</id><snippet>zlib</snippet></ROW><ROW><id>12387120</id><snippet>gzip</snippet></ROW><ROW><id>12387120</id><snippet>import cPickle as pickle
import gzip
import random
import string

field_names = 'AICc Npix Nparameters DoF chi-square chi-square_nu'.split()

random_value_constructors = [
    lambda: random.uniform(2,5),
    lambda: ''.join(random.choice(string.lowercase)
                    for x in xrange(random.randint(0, 5)))]

def random_value():
    """
    Return a random value, either a small floating-point number or a
    short string.
    """
    return random.choice(random_value_constructors)()

def random_record():
    """
    Create and return a random example record.
    """
    return {name: random_value() for name in field_names}

def write_records(filename, records):
    """
    Pickle each record in `records` and compress them to `filename`.
    """
    with gzip.open(filename, 'wb') as f:
        for r in records:
            pickle.dump(r, f, pickle.HIGHEST_PROTOCOL)

def read_records(filename):
    """
    Decompress `filename`, unpickle records from it, and yield them.
    """
    with gzip.open(filename, 'rb') as f:
        while True:
            try:
                yield pickle.load(f)
            except EOFError:
                return
</snippet></ROW><ROW><id>12387122</id><snippet>&gt;&gt;&gt; from evdev import InputDevice, categorize, ecodes
&gt;&gt;&gt; from select import select
&gt;&gt;&gt; dev = InputDevice('/dev/input/event1')

&gt;&gt;&gt; print(dev)
device /dev/input/event1, name "Dell Dell USB Keyboard", phys "usb-0000:00:12.1-2/input0"

&gt;&gt;&gt; while True:
...    r,w,x = select([dev], [], [])
...    for event in dev.read():
...        if event.type == ecodes.EV_KEY:
...            print(categorize(event))
... # hitting a and holding space
key event at 1337016188.396030, 30 (KEY_A), down
key event at 1337016188.492033, 30 (KEY_A), up
key event at 1337016189.772129, 57 (KEY_SPACE), down
key event at 1337016190.275396, 57 (KEY_SPACE), hold
key event at 1337016190.284160, 57 (KEY_SPACE), up
</snippet></ROW><ROW><id>12387533</id><snippet>cgi</snippet></ROW><ROW><id>12387762</id><snippet>setup</snippet></ROW><ROW><id>12387762</id><snippet>argparser</snippet></ROW><ROW><id>12387762</id><snippet>cli.app.CommandLineApp.setup</snippet></ROW><ROW><id>12387762</id><snippet>cli.app.CommandLineApp.setup(self)
</snippet></ROW><ROW><id>12387852</id><snippet>xtick</snippet></ROW><ROW><id>12387852</id><snippet>xticks</snippet></ROW><ROW><id>12387852</id><snippet>plt.xticks([1,10])
</snippet></ROW><ROW><id>12387852</id><snippet>1</snippet></ROW><ROW><id>12387852</id><snippet>10</snippet></ROW><ROW><id>12387852</id><snippet>ticker</snippet></ROW><ROW><id>12387852</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import LogLocator

fig = plt.figure(1, [5,4])
ax = fig.add_subplot(111)

ax.plot( range(1,100) , range(1,100) ,  color='#aaaaff')
ax.set_xscale('log')
# This is default, so play with it
ax.xaxis.set_major_locator(LogLocator(base = 10.0))
plt.show()
</snippet></ROW><ROW><id>12387852</id><snippet>ax.xaxis.set_major_locator(LogLocator(base = 100.0))
</snippet></ROW><ROW><id>12387892</id><snippet>En_Value = lang['en']
lang.clear() 
lang['en'] = En_Value
</snippet></ROW><ROW><id>12388054</id><snippet>a = list(zip(a[:-1], a[1:]))
a.append((a[-1], a[0])])
</snippet></ROW><ROW><id>12388054</id><snippet>&gt;&gt;&gt; a = [list(i) for i in zip(a[:-1], a[1:])]
&gt;&gt;&gt; a.append([a[-1], a[0]])
</snippet></ROW><ROW><id>12388054</id><snippet>[a[-1],a[0]]</snippet></ROW><ROW><id>12388054</id><snippet>&gt;&gt;&gt; tmp = a + a[0]
&gt;&gt;&gt; list(zip(tmp[:,-1], tmp[1:]))
</snippet></ROW><ROW><id>12388054</id><snippet>a.append(a[0])</snippet></ROW><ROW><id>12388342</id><snippet>ImageFont</snippet></ROW><ROW><id>12388342</id><snippet>otf2bdf</snippet></ROW><ROW><id>12388342</id><snippet>pilfont</snippet></ROW><ROW><id>12388919</id><snippet>.grid</snippet></ROW><ROW><id>12388919</id><snippet>pack</snippet></ROW><ROW><id>12388919</id><snippet>from Tkinter import *
import tkFont

class DpWin(object):
    def run(self):
        root=Tk()
        root.geometry('768x612')
        title='dp'
        root.title(title)

        f = Frame(root)
        f.pack()

        xscrollbar = Scrollbar(f, orient=HORIZONTAL)
        xscrollbar.grid(row=1, column=0, sticky=N+S+E+W)

        yscrollbar = Scrollbar(f)
        yscrollbar.grid(row=0, column=1, sticky=N+S+E+W)

        text = Text(f, wrap=NONE,
                    xscrollcommand=xscrollbar.set,
                    yscrollcommand=yscrollbar.set)
        text.grid(row=0, column=0)

        xscrollbar.config(command=text.xview)
        yscrollbar.config(command=text.yview)
        text.insert(END, 'a'*999)
        mainloop()

    def start(self):
        self.b_start.config(state=DISABLED)
        self.b_stop.config(state=ACTIVE)

    def stop(self):
        self.b_stop.config(state=DISABLED)
        self.b_start.config(state=ACTIVE)

if __name__=='__main__':
    win=DpWin()
    win.run()
</snippet></ROW><ROW><id>12388942</id><snippet>profile = open("/tmp/%s.pcf" % uid, 'w+')
</snippet></ROW><ROW><id>12388942</id><snippet>open()</snippet></ROW><ROW><id>12389114</id><snippet>wget http://pypi.python.org/packages/source/B/BeautifulSoup/BeautifulSoup-3.2.1.tar.gz#md5=44656527ef3ac9874ac4d1c9f35f70ee 
tar xvf BeautifulSoup-3.2.1.tar.gz
python setup.py install
</snippet></ROW><ROW><id>12389534</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="urn:Magento" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="http://xml.apache.org/xml-soap" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;SOAP-ENV:Body&gt;&lt;ns1:call&gt;&lt;sessionId xsi:type="xsd:string"&gt;bc11488aaae84c841ac237ea7f24ef&lt;/sessionId&gt;
&lt;resourcePath xsi:type="xsd:string"&gt;sales_order.list&lt;/resourcePath&gt;
&lt;args SOAP-ENC:arrayType="ns2:Map[1]" xsi:type="SOAP-ENC:Array"&gt;
&lt;item xsi:type="ns2:Map"&gt;
&lt;item&gt;
&lt;key xsi:type="xsd:string"&gt;order_id&lt;/key&gt;
&lt;value xsi:type="ns2:Map"&gt;
&lt;item&gt;
&lt;key xsi:type="xsd:string"&gt;from&lt;/key&gt;
&lt;value xsi:type="xsd:string"&gt;11&lt;/value&gt;
&lt;/item&gt;
&lt;item&gt;
&lt;key xsi:type="xsd:string"&gt;to&lt;/key&gt;
&lt;value xsi:type="xsd:string"&gt;12&lt;/value&gt;
&lt;/item&gt;
&lt;/value&gt;
&lt;/item&gt;
&lt;/item&gt;
&lt;/args&gt;
&lt;/ns1:call&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</snippet></ROW><ROW><id>12389534</id><snippet>#! /usr/bin/php5
&lt;?php
$client = new SoapClient('http://ip.ip.ip.ip/magento/index.php/api/?wsdl', array('trace'=&gt;TRUE));
$session = $client-&gt;login('username', 'password');
$params = array(array(
        'order_id' =&gt;
          array(
            'from' =&gt; '10',
            'to' =&gt; '12')));



$result = $client-&gt;call($session, 'sales_order.list', $params);
$resultXML = $client-&gt;__getLastRequest();
print($resultXML);
?&gt;
</snippet></ROW><ROW><id>12389630</id><snippet>^TestVar\s+(\d{8})\s+(\S+)</snippet></ROW><ROW><id>12389630</id><snippet>import re
p = re.compile('^TestVar\s+(\d{8})\s+(\S+)')
m = p.match('TestVar 00000000  WWWWWW 222.222 222.222 222.222')
if m:
    print 'Match found: ', m.group(2) + '_' + m.group(1)
else:
    print 'No match'
</snippet></ROW><ROW><id>12389630</id><snippet>input</snippet></ROW><ROW><id>12389630</id><snippet>p = re.compile("^TestVar\s+(\d{8})\s+(\S+)", re.MULTILINE) 
m = p.findall(input) 
</snippet></ROW><ROW><id>12389761</id><snippet>tables = {
    'e': ('unit1', 'unit2', ...),   # tablename: tuple of column names
}

def generate_conditions(table_name, nameValues):
    if table_name not in tables:
        raise ValueError('No such table %r' % table_name)
    sql = u""
    params = []
    for field in nameValues:
        if field not in tables[table_name]:
            raise ValueError('No such column %r' % field)
        sql += u" AND {0}.{1}=?".format(table_name, field)
        params.append(nameValues[field])
    return sql, params

search_query = u"SELECT * FROM Enheter e LEFT OUTER JOIN Handelser h ON e.Id == h.Enhet WHERE 1=1"

search_params = []
if "Enhet" in args:
    sql, params = generate_conditions("e",args["Enhet"])
    search_query += sql
    search_params.extend(params)
c.execute(search_query, search_params)
</snippet></ROW><ROW><id>12389899</id><snippet>path_change</snippet></ROW><ROW><id>12389899</id><snippet>path_change[0].getAttribute('kind')</snippet></ROW><ROW><id>12389899</id><snippet>print path_change</snippet></ROW><ROW><id>12389899</id><snippet>...
    for single_change in path_change:
        kind = str(single_change.getAttribute("kind"))
        if kind == 'dir':
            content += '            Directory Location: '
        elif kind == 'file':
            content += '            Filename:  '
        else:
            raise SomeException("kind is neither dir nor file", kind, single_change)
        content += (str(single_change).
                    replace("u'","       \n").
                    replace("[","").
                    replace("',","").
                    replace("']", "\n ") + "\n")
...
</snippet></ROW><ROW><id>12389962</id><snippet>import time

# Import managed objects
( trsDeliveryTime,
  trsMessagesPerHour,
  trsGatewayIndex,
  trsGatewayName,
  trsGatewayState, ) = mibBuilder.importSymbols(
  'TRS-MIB',
  'trsDeliveryTime',
  'trsMessagesPerHour',
  'trsGatewayIndex',
  'trsGatewayName',
  'trsGatewayState', 
  )

# Columnar managed objects instances implementation

class TrsDeliveryTimeInstance(MibScalarInstance):
  def readGet(self, name, val, *args):
    if name[-1] == 0:  # Row #0
      return self.name, self.syntax(int(time.time()))
    elif name[-1] == 1: # Row #1
      return self.name, self.syntax(time.time()//2)
    else:
      MibScalarInstance.readGet(self, name, val, *args)

class TrsMessagesPerHourInstance(MibScalarInstance):
  def readGet(self, name, val, *args):
    if name[-1] == 0: # Row #0
      return self.name, self.syntax(-int(time.time()))
    elif name[-1] == 1: # Row #1
      return self.name, self.syntax(-time.time()//2)
    else:
      MibScalarInstance.readGet(self, name, val, *args)

class TrsGatewayIndexInstance(MibScalarInstance):
  def readGet(self, name, val, *args):
    if name[-1] == 0: # Row #0
      return self.name, self.syntax(0)
    elif name[-1] == 1: # Row #1
      return self.name, self.syntax(1)
    else:
      MibScalarInstance.readGet(self, name, val, *args)

class TrsGatewayNameInstance(MibScalarInstance):
  def readGet(self, name, val, *args):
    if name[-1] == 0: # Row #0
      return self.name, self.syntax('SMG0')
    elif name[-1] == 1: # Row #1
      return self.name, self.syntax('SMG1')
    else:
      MibScalarInstance.readGet(self, name, val, *args)

class TrsGatewayStateInstance(MibScalarInstance):
  def readGet(self, name, val, *args):
    if name[-1] == 0: # Row #0
      return self.name, self.syntax('UP' + str(time.time()))
    elif name[-1] == 1: # Row #1
      return self.name, self.syntax('DOWN' + str(time.time()))
    else:
      MibScalarInstance.readGet(self, name, val, *args)

# Instantiate and export managed objects instances
mibBuilder.exportSymbols(
  "__TRS-MIB",
  # Row #0
  TrsDeliveryTimeInstance(trsDeliveryTime.getName(), 0, trsDeliveryTime.getSyntax()),
  TrsMessagesPerHourInstance(trsMessagesPerHour.getName(), 0, trsMessagesPerHour.getSyntax()),
  TrsGatewayIndexInstance(trsGatewayIndex.getName(), 0, trsGatewayIndex.getSyntax()),
  TrsGatewayNameInstance(trsGatewayName.getName(), 0, trsGatewayName.getSyntax()),
  TrsGatewayStateInstance(trsGatewayState.getName(), 0, trsGatewayState.getSyntax()),
  # Row #1
  TrsDeliveryTimeInstance(trsDeliveryTime.getName(), 1, trsDeliveryTime.getSyntax()),
  TrsMessagesPerHourInstance(trsMessagesPerHour.getName(), 1, trsMessagesPerHour.getSyntax()),
  TrsGatewayIndexInstance(trsGatewayIndex.getName(), 1, trsGatewayIndex.getSyntax()),
  TrsGatewayNameInstance(trsGatewayName.getName(), 1, trsGatewayName.getSyntax()),
  TrsGatewayStateInstance(trsGatewayState.getName(), 1, trsGatewayState.getSyntax())
)
</snippet></ROW><ROW><id>12390032</id><snippet>sed 's/-mno-cygwin//g' -i'.bak' c:\Python27\Lib\distutils\cygwinccompiler.py</snippet></ROW><ROW><id>12390032</id><snippet>sed 's/-mno-cygwin//g' -i'.bak' "c:\Python27\Lib\distutils\cygwinccompiler.py"</snippet></ROW><ROW><id>12390032</id><snippet>mv c:\Python27\Lib\distutils\cygwinccompiler.py.bak c:\Python27\Lib\distutils\cygwinccompiler.py</snippet></ROW><ROW><id>12390032</id><snippet>mv "c:\Python27\Lib\distutils\cygwinccompiler.py.bak" "c:\Python27\Lib\distutils\cygwinccompiler.py"</snippet></ROW><ROW><id>12390043</id><snippet>#!/usr/bin/python2.6

#  You _must_ turn on assistive devices under Accessibility prefpane 
# for any of this code to work. Otherwise it won't do anything.

from Cocoa import *
from Foundation import *
from PyObjCTools import AppHelper
import keycode
import string
import sys

class AppDelegate(NSObject):
    def applicationDidFinishLaunching_(self, aNotification):
        NSEvent.addGlobalMonitorForEventsMatchingMask_handler_(NSKeyDownMask, handler)

def handler(event):
    if event.type() == NSKeyDown and keycode.tostring(event.keyCode()) in string.printable:
        print keycode.tostring(event.keyCode())

def main():
    app = NSApplication.sharedApplication()
    delegate = AppDelegate.alloc().init()
    NSApp().setDelegate_(delegate)
    AppHelper.runEventLoop()


if __name__ == '__main__':
   main()
</snippet></ROW><ROW><id>12390043</id><snippet>#!/usr/bin/python2.6

import exceptions
import sys
from Foundation import NSObject, NSLog
from AppKit import NSApplication, NSApp, NSWorkspace
from Cocoa import *
from Quartz import CGWindowListCopyWindowInfo, kCGWindowListOptionOnScreenOnly, kCGNullWindowID
from PyObjCTools import AppHelper
import keycode

evtypes = dict(
    NSLeftMouseDown     = 1,
    NSLeftMouseUp       = 2,
    NSRightMouseDown    = 3,
    NSRightMouseUp      = 4,
    NSMouseMoved        = 5,
    NSLeftMouseDragged  = 6,
    NSRightMouseDragged = 7,
    NSMouseEntered      = 8,
    NSMouseExited       = 9,
    NSKeyDown           = 10,
    NSKeyUp             = 11,
    NSFlagsChanged      = 12,
    NSAppKitDefined     = 13,
    NSSystemDefined     = 14,
    NSApplicationDefined = 15,
    NSPeriodic          = 16,
    NSCursorUpdate      = 17,
    NSScrollWheel       = 22,
    NSTabletPoint       = 23,
    NSTabletProximity   = 24,
    NSOtherMouseDown    = 25,
    NSOtherMouseUp      = 26,
    NSOtherMouseDragged = 27
)

evtypes_rev = dict([[v,k] for k,v in evtypes.items()])

class Hooker(object):
    def __call__(self, *args, **kwargs):
        try:
            evt = kwargs.get('event')
            del kwargs['event'] 
            items = ' '.join( [ x[0]+"="+unicode(x[1]) for x in kwargs.iteritems()] )
            print "%20s | %22s | %s" % ( self.__class__.__name__, evtypes_rev[evt.type()], items)
        except Exception as e:
            print 'Horrific error!', e
            AppHelper.stopEventLoop()
            sys.exit(0)

class KeyHooker(Hooker): pass
class MouseButtonHooker(Hooker): pass
class MouseMoveHooker(Hooker): pass
class ScreenHooker(Hooker): pass

class SniffCocoa:

    def __init__(self):

        self.key_hook = KeyHooker()
        self.mouse_button_hook = MouseButtonHooker()
        self.mouse_move_hook = MouseMoveHooker()
        self.screen_hook = ScreenHooker()
        self.currentApp = None

    def createAppDelegate (self) :

        sc = self
        class AppDelegate(NSObject):
            def applicationDidFinishLaunching_(self, notification):
                mask = (
                          NSKeyDownMask 
                        | NSKeyUpMask
                        | NSLeftMouseDownMask 
                        | NSLeftMouseUpMask
                        | NSRightMouseDownMask 
                        | NSRightMouseUpMask
                        | NSMouseMovedMask 
                        | NSScrollWheelMask
                       )
                NSEvent.addGlobalMonitorForEventsMatchingMask_handler_(mask, sc.handler)
        return AppDelegate

    def run(self):
        NSApplication.sharedApplication()
        delegate = self.createAppDelegate().alloc().init()
        NSApp().setDelegate_(delegate)
        self.workspace = NSWorkspace.sharedWorkspace()
        AppHelper.runEventLoop()

    def cancel(self):
        AppHelper.stopEventLoop()

    def handler(self, event):

        try:
            activeApps = self.workspace.runningApplications()
            for app in activeApps:
                if app.isActive():
                    if app.localizedName() != self.currentApp:
                        self.currentApp = app.localizedName()
                        options = kCGWindowListOptionOnScreenOnly 
                        windowList = CGWindowListCopyWindowInfo(options, kCGNullWindowID)

                        for window in windowList:
                            if window['kCGWindowOwnerName'] == self.currentApp:
                                geom = window['kCGWindowBounds'] 
                                self.screen_hook( event=event,
                                                name = window['kCGWindowName'],
                                                owner = window['kCGWindowOwnerName'],
                                                x = geom['X'], 
                                                y = geom['Y'], 
                                                w = geom['Width'], 
                                                h = geom['Height'])
                                break
                    break

            loc = NSEvent.mouseLocation()

            # mouse clicky buttons
            if event.type() in ( NSLeftMouseDown, NSRightMouseDown, NSLeftMouseUp, NSRightMouseUp):
                self.mouse_button_hook(event=event, x=loc.x, y=loc.y)

            # mouse scrolly buttons 
            elif event.type() == NSScrollWheel:
                if event.deltaY() &gt; 0 and event.deltaY() &lt; 0:
                    self.mouse_button_hook(event=event, x=loc.x, y=loc.y)
                if event.deltaX() &gt; 0 and event.deltaX() &lt; 0:
                    self.mouse_button_hook(event=event, x=loc.x, y=loc.y)

            # keys down
            elif event.type() in ( NSKeyDown, NSKeyUp ):

                flags = event.modifierFlags()
                modifiers = [] # OS X api doesn't care it if is left or right
                if (flags &amp; NSControlKeyMask):
                    modifiers.append('CONTROL')
                if (flags &amp; NSAlternateKeyMask):
                    modifiers.append('ALTERNATE')
                if (flags &amp; NSCommandKeyMask):
                    modifiers.append('COMMAND')

                self.key_hook(event=event, key=event.keyCode(), char=keycode.tostring( event.keyCode() ), mods=modifiers, is_repeat=event.isARepeat())

            # Mouse moved
            elif event.type() == NSMouseMoved:
                self.mouse_move_hook(event=event, x=loc.x, y=loc.y)
            else:
                pass

        except ( KeyboardInterrupt ) as e:
            print 'handler', e
            AppHelper.stopEventLoop()

if __name__ == '__main__':
    sc = SniffCocoa()
    sc.run()
</snippet></ROW><ROW><id>12390269</id><snippet>a = [['UK', ['http://www.uk.com']], ['COM', ['http://www.uk.com'],['http://www.michaeljackson.com']]]
b = [['Australia', ['http://www.australia.com']], ['COM', ['http://www.Australia.com'], ['http://www.rafaelnadal.com'], ['http://www.rogerfederer.com']]]

# convert these to dictionaries with set values
a = {item[0]:set(s[0] for s in item[1:]) for item in a}
b = {item[0]:set(s[0] for s in item[1:]) for item in b}

# define a function to update our dictionary-of-sets data structure
def union_update_setdict(D, *setdicts):
    """Update dictionary D (with `'key':set(value)` items) with items from setdicts.

    If a new key is added to D from setdicts, a shallow copy of the value
    is added to D.
    """
    for setdict in setdicts:
        for k,v in setdict.items():
            try:
                D[k].update(v)
            except KeyError:
                D[k] = v.copy()

union_update_setdict(a, b)



# Now let's test that the code works

expected = [['UK', ['http://www.uk.com']], ['COM', ['http://www.uk.com'], ['http://www.michaeljackson.com'], ['http://www.Australia.com'], ['http://www.rafaelnadal.com'], ['http://www.rogerfederer.com']], ['Australia', ['http://www.australia.com']]]

# put the "expected" results in our new data structure for comparison
expected = {item[0]:set(s[0] for s in item[1:]) for item in expected}

print a
assert expected == a
</snippet></ROW><ROW><id>12390269</id><snippet>terribledatastruct = [[k]+[[item] for item in v] for k,v in a.items()]
print terribledatastruct
</snippet></ROW><ROW><id>12390289</id><snippet>p = re.compile(".*kittens.*")
</snippet></ROW><ROW><id>12390447</id><snippet>set_richcompare</snippet></ROW><ROW><id>12390447</id><snippet>setobject.c</snippet></ROW><ROW><id>12390447</id><snippet>set_issubset</snippet></ROW><ROW><id>12390447</id><snippet>while (set_next(so, &amp;pos, &amp;entry)) {
    int rv = set_contains_entry((PySetObject *)other, entry);
    if (rv == -1)
        return NULL;
    if (!rv)
        Py_RETURN_FALSE;
}
Py_RETURN_TRUE;
</snippet></ROW><ROW><id>12390697</id><snippet>str.replace</snippet></ROW><ROW><id>12390697</id><snippet>str.strip</snippet></ROW><ROW><id>12390697</id><snippet>mystring = mystring.replace('\r\n', '')</snippet></ROW><ROW><id>12390697</id><snippet>mystring = mystring.strip()</snippet></ROW><ROW><id>12390697</id><snippet>strip</snippet></ROW><ROW><id>12390697</id><snippet>\r\n</snippet></ROW><ROW><id>12390714</id><snippet>x</snippet></ROW><ROW><id>12390714</id><snippet>sum( magnitude(x[i]-x[i+1]) for i in range(len(points)-1) )
</snippet></ROW><ROW><id>12390714</id><snippet>def dist(X,Y):
    return math.sqrt(
                     sum( (X[i] - Y[i])**2 for i in len(range(X)) )
                    )

sum( dist(x[i],x[i+1]) for i in range(len(points)-1) )
</snippet></ROW><ROW><id>12390784</id><snippet>datetime/datetime.time</snippet></ROW><ROW><id>12390784</id><snippet>b</snippet></ROW><ROW><id>12390784</id><snippet>a</snippet></ROW><ROW><id>12390784</id><snippet>b = [x for x in b if a[0] &lt; x[1] and x[0] &lt; a[1]]
</snippet></ROW><ROW><id>12390917</id><snippet>&gt;&gt;&gt; type(obj)
__main__.FOO
&gt;&gt;&gt; isintance(obj, cls1)
True
</snippet></ROW><ROW><id>12390917</id><snippet>obj</snippet></ROW><ROW><id>12390917</id><snippet>PicklingError: Can't pickle &lt;class '__main__.FOO'&gt;: it's not found as __main__.FOO
</snippet></ROW><ROW><id>12391095</id><snippet>class MyType(models.Model):
    code = models.IntegerField()
    address = UsAddress

    def __unicode__(self):
        return u'%s - %s' % (self.code, self.address)
</snippet></ROW><ROW><id>12391095</id><snippet>&lt;p&gt;My object: {{ mytype_obj }}&lt;/p&gt;
</snippet></ROW><ROW><id>12391427</id><snippet>(10 &lt; Couple.NumOfResults and Couple.NumOfResults &lt; 20)</snippet></ROW><ROW><id>12391427</id><snippet>and</snippet></ROW><ROW><id>12391427</id><snippet>and_</snippet></ROW><ROW><id>12391427</id><snippet>results = session.query(Couple).filter(and_(10 &lt; Couple.NumOfResults, 
                                            Couple.NumOfResults &lt; 20).all()
</snippet></ROW><ROW><id>12391702</id><snippet>FooBar</snippet></ROW><ROW><id>12391702</id><snippet>bar</snippet></ROW><ROW><id>12391702</id><snippet>bar</snippet></ROW><ROW><id>12391702</id><snippet>execute()</snippet></ROW><ROW><id>12391702</id><snippet>FooBar</snippet></ROW><ROW><id>12391782</id><snippet>index = next(i for i, (t1, t2) in enumerate(myTup) if t2 &lt; threshold)
del myTup[index:]
</snippet></ROW><ROW><id>12391782</id><snippet>bisect.bisect</snippet></ROW><ROW><id>12391782</id><snippet>&gt;&gt;&gt; myTup
[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e'), (5, 'f'), 
 (6, 'g'), (7, 'h'), (8, 'i'), (9, 'j')]
&gt;&gt;&gt; index = bisect.bisect(myTup, (threshold, None))
&gt;&gt;&gt; del myTup[:index]
&gt;&gt;&gt; myTup
[(6, 'g'), (7, 'h'), (8, 'i'), (9, 'j')]
</snippet></ROW><ROW><id>12391782</id><snippet>0</snippet></ROW><ROW><id>12391782</id><snippet>[(-9, 'a'), (-8, 'b'), (-7, 'c'), (-6, 'd'), (-5, 'e'), (-4, 'f'), 
 (-3, 'g'), (-2, 'h'), (-1, 'i'), (0, 'j')]
&gt;&gt;&gt; index = bisect.bisect(myTup, (-threshold, None))
&gt;&gt;&gt; del myTup[index:]
&gt;&gt;&gt; myTup
[(-9, 'a'), (-8, 'b'), (-7, 'c'), (-6, 'd')]
</snippet></ROW><ROW><id>12391782</id><snippet>None</snippet></ROW><ROW><id>12391782</id><snippet>(-threshold, chr(0))</snippet></ROW><ROW><id>12391925</id><snippet>print "%06d" % number
</snippet></ROW><ROW><id>12391925</id><snippet>.format</snippet></ROW><ROW><id>12391925</id><snippet>print '{0:06d}'.format(1)
</snippet></ROW><ROW><id>12391925</id><snippet>zfill</snippet></ROW><ROW><id>12391925</id><snippet>print '1'.zfill(6)
</snippet></ROW><ROW><id>12392131</id><snippet>normalize('NFD', ...)</snippet></ROW><ROW><id>12392131</id><snippet>&gt;&gt;&gt; unicodedata.name(u'\u0153')
'LATIN SMALL LIGATURE OE'
</snippet></ROW><ROW><id>12392131</id><snippet>unicodedata</snippet></ROW><ROW><id>12392131</id><snippet>import re
import unicodedata

_ligature_re = re.compile(r'LATIN (?:(CAPITAL)|SMALL) LIGATURE ([A-Z]{2,})')

def split_ligatures(s):
    """
    Split the ligatures in `s` into their component letters. 
    """
    def untie(l):
        m = _ligature_re.match(unicodedata.name(l))
        if not m: return l
        elif m.group(1): return m.group(2)
        else: return m.group(2).lower()
    return ''.join(untie(l) for l in s)

&gt;&gt;&gt; split_ligatures(u'B\u0153uf \u0132sselmeer \uFB00otogra\uFB00')
u'Boeuf IJsselmeer ffotograff'
</snippet></ROW><ROW><id>12392226</id><snippet>class NetworkStatusHandler(BaseHandler):
# Requires authentication 
@tornado.web.authenticated
def get(self, nid):

    # Retrieve the current user 
    usr = self.get_current_user()
    usr_id = usr['id']

    self.lock_tables("read", ['nets_permissions as n'])
    perm = self.db.get("SELECT n.perm FROM nets_permissions as n \
                          WHERE n.network_id=%s AND n.user_id=%s", nid, int(usr_id))
    self.unlock_tables()

    # Check whether the user has access to the network
    perms = self.check_network_access(nid, perm['perm'])
    net = self.get_network(nid)
    # Render the networks page
    self.render("networkstatus.html", net=net)
</snippet></ROW><ROW><id>12392357</id><snippet>i == 2</snippet></ROW><ROW><id>12392357</id><snippet>def prime (mylist):
    for i in range(2, 8):
        print i # added to make things explicit; it's not necessary
        return filter(lambda x: x == i or x % i, mylist)

def prime2 (mylist):
    nums = mylist
    for i in range(2, 8):
        print i # added to make things explicit; it's not necessary
        nums = filter(lambda x: x == i or x % i, nums)
    return nums

print prime([2,3,4,5,6,7,8,9,10,11,12,13,14,15])
&gt;&gt;&gt; 2
&gt;&gt;&gt; [2, 3, 5, 7, 9, 11, 13, 15]
print prime2([2,3,4,5,6,7,8,9,10,11,12,13,14,15])
&gt;&gt;&gt; 2
&gt;&gt;&gt; 3
&gt;&gt;&gt; 4
&gt;&gt;&gt; 5
&gt;&gt;&gt; 6
&gt;&gt;&gt; 7
&gt;&gt;&gt; [2, 3, 5, 7, 11, 13]
</snippet></ROW><ROW><id>12392625</id><snippet>pickle</snippet></ROW><ROW><id>12392625</id><snippet>f = open('checkzero.txt', 'rb')
</snippet></ROW><ROW><id>12392625</id><snippet>f = open('checkzero.txt', 'wb')
</snippet></ROW><ROW><id>12392625</id><snippet>pickle</snippet></ROW><ROW><id>12392625</id><snippet>try:
    with open("checkzero.txt") as f:
        counter = int(f.read()) +1
except IOError:
    counter = 1
with open("checkzero.txt", "w") as f:
    f.write(str(counter))
</snippet></ROW><ROW><id>12392803</id><snippet>''.join(stringList)</snippet></ROW><ROW><id>12392803</id><snippet>import operator
return reduce(operator.add, stringList)
</snippet></ROW><ROW><id>12392803</id><snippet>s = ''
for string in stringList:
    s = s + string
return s
</snippet></ROW><ROW><id>12392803</id><snippet>join</snippet></ROW><ROW><id>12392972</id><snippet>python3.2 distribute_setup.py</snippet></ROW><ROW><id>12392972</id><snippet>easy_install</snippet></ROW><ROW><id>12392972</id><snippet>easy_install</snippet></ROW><ROW><id>12392972</id><snippet>Installing easy_install script to /Library/Frameworks/Python.framework/Versions/3.2/bin
Installing easy_install-3.2 script to /Library/Frameworks/Python.framework/Versions/3.2/bin
</snippet></ROW><ROW><id>12392972</id><snippet>easy_install</snippet></ROW><ROW><id>12392972</id><snippet>/Library/Frameworks/Python.framework/Versions/3.2/bin/easy_install ...
</snippet></ROW><ROW><id>12392972</id><snippet>PATH</snippet></ROW><ROW><id>12392972</id><snippet>export PATH=/Library/Frameworks/Python.framework/Versions/3.2/bin:$PATH
</snippet></ROW><ROW><id>12392972</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>12392972</id><snippet>/Applications/Python 3.2/Update Shell Profile.command</snippet></ROW><ROW><id>12393063</id><snippet>scipy.interpolate.LinearNDInterpolator</snippet></ROW><ROW><id>12393063</id><snippet>LinearNDInterpolator</snippet></ROW><ROW><id>12393063</id><snippet>points = numpy.array((x, y)).T
values = numpy.array((f1, f2)).T
f = interpolate.LinearNDInterpolator(points, values)
</snippet></ROW><ROW><id>12393132</id><snippet>dir_path = os.path.join(data_dir, 'master_*.dat')
master_all = pd.concat(pd.read_table(data_file, delimiter='|', header=0)
                                     for data_file in glob.glob(dir_path))
</snippet></ROW><ROW><id>12393181</id><snippet>subprocess.Popen(["format.com", drive, "/FS:FAT32", "/A:32K"], shell=True).communicate()
</snippet></ROW><ROW><id>12393181</id><snippet>where FORMAT</snippet></ROW><ROW><id>12393395</id><snippet>for line in f:
 inp = line.split()
 x = float(inp[1])
 y = float(inp[2])

 if(inp[0] == 'r'):
  DrawRectangle(x,y,float(inp[3]),float(inp[4]),inp[5])
</snippet></ROW><ROW><id>12393492</id><snippet>os.system</snippet></ROW><ROW><id>12393492</id><snippet>"whois -h whois.arin.net + a.b.c.d\n | grep Country"</snippet></ROW><ROW><id>12393492</id><snippet>"8.8.8.8"</snippet></ROW><ROW><id>12393492</id><snippet>i = i.strip()</snippet></ROW><ROW><id>12393965</id><snippet>numpy.ufunc</snippet></ROW><ROW><id>12393965</id><snippet>numpy.frompyfunc</snippet></ROW><ROW><id>12393965</id><snippet>numpy.frompyfunc((lambda x: x[0:2]), 1, 1)
</snippet></ROW><ROW><id>12393965</id><snippet>apply</snippet></ROW><ROW><id>12393965</id><snippet>In [50]: dfrm_test
Out[50]:
     A
0  the
1  the
2  the
3  the
4  the
5  the
6  the
7  the
8  the
9  the

In [51]: dfrm_test["A"].apply(np.frompyfunc((lambda x: x[0:2]), 1, 1))
Out[51]:
0    th
1    th
2    th
3    th
4    th
5    th
6    th
7    th
8    th
9    th
Name: A

In [52]: pandas.version.version
Out[52]: '0.7.3'

In [53]: dfrm_test["A"].apply(lambda x: x[0:2])
Out[53]:
0    the
1    the
Name: A
</snippet></ROW><ROW><id>12394122</id><snippet>apply</snippet></ROW><ROW><id>12394122</id><snippet>In [82]: df
Out[82]: 
   X         Y
0  0 -0.631214
1  0  0.783142
2  0  0.526045
3  1 -1.750058
4  1  1.163868
5  1  1.625538
6  1  0.076105
7  2  0.183492
8  2  0.541400
9  2 -0.672809

In [83]: def func(x):
   ....:     x['NewCol'] = np.nan
   ....:     return x
   ....: 

In [84]: df.groupby('X').apply(func)
Out[84]: 
   X         Y  NewCol
0  0 -0.631214     NaN
1  0  0.783142     NaN
2  0  0.526045     NaN
3  1 -1.750058     NaN
4  1  1.163868     NaN
5  1  1.625538     NaN
6  1  0.076105     NaN
7  2  0.183492     NaN
8  2  0.541400     NaN
9  2 -0.672809     NaN
</snippet></ROW><ROW><id>12394160</id><snippet>else</snippet></ROW><ROW><id>12394160</id><snippet>finally</snippet></ROW><ROW><id>12394160</id><snippet>def myraise(arg):
    try:
        if arg:
            raise ValueError('arg is True')
    except ValueError as e:
        print(e)
    else:
        print('arg is False')
    finally:
        print("see this no matter what")

myraise(1)
myraise(0)
</snippet></ROW><ROW><id>12394160</id><snippet>finally</snippet></ROW><ROW><id>12394160</id><snippet>except</snippet></ROW><ROW><id>12394160</id><snippet>else</snippet></ROW><ROW><id>12394320</id><snippet>import re

def matches(s, sub_strings):
    sub_strings = sorted(sub_strings, key=len, reverse=True)
    pattern = '|'.join(re.escape(substr) for substr in sub_strings)
    return re.findall(pattern, s)
</snippet></ROW><ROW><id>12394320</id><snippet>matches("bears", ["bea", "be", "ars"])
</snippet></ROW><ROW><id>12394320</id><snippet>["bea"]</snippet></ROW><ROW><id>12394320</id><snippet>["be", "ars"]</snippet></ROW><ROW><id>12394320</id><snippet>|</snippet></ROW><ROW><id>12394320</id><snippet>re.findall</snippet></ROW><ROW><id>12394320</id><snippet>s</snippet></ROW><ROW><id>12394371</id><snippet>dispatcher</snippet></ROW><ROW><id>12394371</id><snippet>from scrapy import signals
from scrapy.xlib.pydispatch import dispatcher

class MySpider(CrawlSpider):
    def __init__(self):
        dispatcher.connect(self.spider_closed, signals.spider_closed)

    def spider_closed(self, spider):
      # second param is instance of spder about to be closed.
</snippet></ROW><ROW><id>12394531</id><snippet>class httplib.HTTPSConnection(host[, port[, key_file[, cert_file[, strict[, timeout[, source_address]]]]]])
A subclass of HTTPConnection that uses SSL for communication with secure servers. Default port is 443. key_file is the name of a PEM formatted file that contains your private key. cert_file is a PEM formatted certificate chain file.

**Warning This does not do any verification of the serverâs certificate.**
</snippet></ROW><ROW><id>12394567</id><snippet>#234567891123456789212345678931234567894123456789512345678961234567897123456789

# core
import inspect
import pickle
import datetime

# 3rd party
import gnupg


def depickle():
    """ pull and depickle our signed data """
    f = open('pickle.txt', 'r')
    signed_data = pickle.load(f)
    f.close()
    return signed_data

# depickle our signed data
signed_data = depickle()
# inspect the object
for key, value in inspect.getmembers(signed_data):
    print key
</snippet></ROW><ROW><id>12394567</id><snippet># use the attribute now that we know it
print signed_data.timestamp
# make it pretty
print datetime.datetime.fromtimestamp(float(signed_data.timestamp))
</snippet></ROW><ROW><id>12394691</id><snippet>long</snippet></ROW><ROW><id>12394691</id><snippet>pysumrange</snippet></ROW><ROW><id>12394691</id><snippet>ctypes</snippet></ROW><ROW><id>12394691</id><snippet>unsigned long long</snippet></ROW><ROW><id>12394691</id><snippet>int</snippet></ROW><ROW><id>12394691</id><snippet>restype</snippet></ROW><ROW><id>12394691</id><snippet>sumrange.sumrange.restype = ctypes.c_ulonglong
</snippet></ROW><ROW><id>12394723</id><snippet>f = type(...)</snippet></ROW><ROW><id>12394723</id><snippet>f().base_method()</snippet></ROW><ROW><id>12394941</id><snippet>mt.address=line['ADDRESS'],</snippet></ROW><ROW><id>12394941</id><snippet>mt.city=line['CITY'],</snippet></ROW><ROW><id>12394941</id><snippet>&gt;&gt;&gt; True,
(True,)
&gt;&gt;&gt; True
True
</snippet></ROW><ROW><id>12395111</id><snippet>else</snippet></ROW><ROW><id>12395111</id><snippet>else</snippet></ROW><ROW><id>12395111</id><snippet>url</snippet></ROW><ROW><id>12395111</id><snippet>[url]</snippet></ROW><ROW><id>12395487</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.random((11, 13))
&gt;&gt;&gt; b = np.random.random((11, 13))
&gt;&gt;&gt; c = np.random.random((11, 13))
&gt;&gt;&gt; 
&gt;&gt;&gt; d = np.dstack([a,b,c])
&gt;&gt;&gt; 
&gt;&gt;&gt; d.shape
(11, 13, 3)
&gt;&gt;&gt; 
&gt;&gt;&gt; a[1,5], b[1,5], c[1,5]
(0.92522736614222956, 0.64294050918477097, 0.28230222357027068)
&gt;&gt;&gt; d[1,5]
array([ 0.92522737,  0.64294051,  0.28230222])
</snippet></ROW><ROW><id>12395598</id><snippet>terms = set([" ".join(words[j:j + len(words) - i])
               for i in xrange(len(words)) for j in xrange(len(words))])
</snippet></ROW><ROW><id>12395886</id><snippet>#!/usr/bin/env python

import sys
import dbus
from PyQt4.QtGui import QApplication
from dbus.mainloop.qt import DBusQtMainLoop

class DBus_Answer():
    def __init__(self, text):
        self.answer = text
        bus_loop = DBusQtMainLoop(set_as_default=True)
        self.bus = dbus.SessionBus()
        self.bus.add_signal_receiver(self.my_func,
                                     dbus_interface="im.pidgin.purple.PurpleInterface",
                                     signal_name="ReceivedImMsg")

    def my_func(self, account, sender, message, conversation, flags):
        obj = self.bus.get_object("im.pidgin.purple.PurpleService", "/im/pidgin/purple/PurpleObject")
        purple = dbus.Interface(obj, "im.pidgin.purple.PurpleInterface")
        purple.PurpleConvImSend(purple.PurpleConvIm(conversation), self.answer)

app = QApplication(sys.argv)
run = DBus_Answer("Slam")
app.exec_()
</snippet></ROW><ROW><id>12396155</id><snippet>[[0, 1],
[-1, 0]]</snippet></ROW><ROW><id>12396155</id><snippet>&gt;&gt;&gt; fib = numpy.array([[1, 1],[1, 0]])
&gt;&gt;&gt; numpy.linalg.eig(fib)
(array([ 1.61803399, -0.61803399]), array([[ 0.85065081, -0.52573111],
       [ 0.52573111,  0.85065081]]))
</snippet></ROW><ROW><id>12396249</id><snippet>bytes.appendleft()</snippet></ROW><ROW><id>12396249</id><snippet>bytes.append()</snippet></ROW><ROW><id>12396271</id><snippet>In [2]: x = np.random.normal(size=(500,1))

In [3]: y = np.random.normal(size=(500,))

In [4]: (x + y).shape
Out[4]: (500, 500)
</snippet></ROW><ROW><id>12396271</id><snippet>869250 x 869250</snippet></ROW><ROW><id>12396271</id><snippet>np.float64</snippet></ROW><ROW><id>12396271</id><snippet>x</snippet></ROW><ROW><id>12396271</id><snippet>matrix</snippet></ROW><ROW><id>12396271</id><snippet>x + y.reshape(-1, 1)</snippet></ROW><ROW><id>12396576</id><snippet>repeat</snippet></ROW><ROW><id>12396576</id><snippet>import numpy as np

def slow(a):
    b = np.array(zip(a.T,a.T))
    b.shape = (2*len(a[0]), 2)
    return b.T

def fast(a):
    return a.repeat(2).reshape(2, 2*len(a[0]))

def faster(a):
    # compliments of WW
    return a.repeat(2, axis=1)
</snippet></ROW><ROW><id>12396576</id><snippet>In [42]: a = np.array([[1,2,3,4],[2,4,6,8]])

In [43]: timeit slow(a)
10000 loops, best of 3: 59.4 us per loop

In [44]: timeit fast(a)
100000 loops, best of 3: 4.94 us per loop

In [45]: a = np.arange(100).reshape(2, 50)

In [46]: timeit slow(a)
1000 loops, best of 3: 489 us per loop

In [47]: timeit fast(a)
100000 loops, best of 3: 6.7 us per loop
</snippet></ROW><ROW><id>12396576</id><snippet>In [101]: timeit faster(a)
100000 loops, best of 3: 4.4 us per loop
</snippet></ROW><ROW><id>12396591</id><snippet>None</snippet></ROW><ROW><id>12396591</id><snippet>numbersOut()</snippet></ROW><ROW><id>12396591</id><snippet>return</snippet></ROW><ROW><id>12396591</id><snippet>out.writerow(numbersOut())
</snippet></ROW><ROW><id>12396591</id><snippet>out.writerow(None)</snippet></ROW><ROW><id>12396591</id><snippet>None</snippet></ROW><ROW><id>12396591</id><snippet>csv</snippet></ROW><ROW><id>12396591</id><snippet>None</snippet></ROW><ROW><id>12396591</id><snippet>numbersOut</snippet></ROW><ROW><id>12396591</id><snippet>out</snippet></ROW><ROW><id>12396591</id><snippet>def numbersOut(out):
    for i in range (1, 1001):
        out.writerow("%s" % (i+1, ))
        out.writerow("\n")
</snippet></ROW><ROW><id>12396591</id><snippet>numbersOut(out)
</snippet></ROW><ROW><id>12396591</id><snippet>        out.writerow("%s" % (i+1, ))
</snippet></ROW><ROW><id>12396591</id><snippet>        out.writerow(["%s" % (i+1, )])
</snippet></ROW><ROW><id>12396591</id><snippet>[</snippet></ROW><ROW><id>12396591</id><snippet>]</snippet></ROW><ROW><id>12396591</id><snippet>writerow</snippet></ROW><ROW><id>12396591</id><snippet>out.writerow("\n")</snippet></ROW><ROW><id>12396591</id><snippet>writerow</snippet></ROW><ROW><id>12396591</id><snippet>csv</snippet></ROW><ROW><id>12396591</id><snippet>out.writerow("\n")</snippet></ROW><ROW><id>12396648</id><snippet>minute</snippet></ROW><ROW><id>12396648</id><snippet>&gt;&gt;&gt; a = 'a'
&gt;&gt;&gt; print b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'b' is not defined
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12396648</id><snippet>@uwsgidecorators.cron(minute = 5,hour = 2, # and so on.
</snippet></ROW><ROW><id>12396648</id><snippet>uwsgi.add_cron</snippet></ROW><ROW><id>12396922</id><snippet>from sklearn.preprocessing import normalize
w_normalized = normalize(w, norm='l1', axis=1)
</snippet></ROW><ROW><id>12396922</id><snippet>axis=1</snippet></ROW><ROW><id>12396922</id><snippet>axis=0</snippet></ROW><ROW><id>12396922</id><snippet>copy=False</snippet></ROW><ROW><id>12396965</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>12396965</id><snippet>'^'</snippet></ROW><ROW><id>12396965</id><snippet>'$'</snippet></ROW><ROW><id>12396965</id><snippet>'^'</snippet></ROW><ROW><id>12396965</id><snippet>'$'</snippet></ROW><ROW><id>12396965</id><snippet>re.DOTALL</snippet></ROW><ROW><id>12396965</id><snippet>'.'</snippet></ROW><ROW><id>12396965</id><snippet>'.'</snippet></ROW><ROW><id>12396965</id><snippet>flags=re.MULTILINE</snippet></ROW><ROW><id>12396965</id><snippet>flags=re.DOTALL</snippet></ROW><ROW><id>12397094</id><snippet>In [1]: a = {'a':1,'b':2,'c':3,'d':4,'e':5}

In [2]: b = a.items()

In [3]: b
Out[3]: [('a', 1), ('c', 3), ('b', 2), ('e', 5), ('d', 4)]
</snippet></ROW><ROW><id>12397094</id><snippet>In [4]: def chunks(c, n):
   ...:     return [c[i:i+n] for i in range(0, len(c), n)]
   ...: 

In [5]: list(chunks(b,2))
Out[5]: [[('a', 1), ('c', 3)], [('b', 2), ('e', 5)], [('d', 4)]]

In [6]: list(chunks(b,3))
Out[6]: [[('a', 1), ('c', 3), ('b', 2)], [('e', 5), ('d', 4)]]
</snippet></ROW><ROW><id>12397284</id><snippet>try</snippet></ROW><ROW><id>12397284</id><snippet>finally:</snippet></ROW><ROW><id>12397284</id><snippet>curses.endscr()</snippet></ROW><ROW><id>12397284</id><snippet>stdscr.move</snippet></ROW><ROW><id>12397284</id><snippet>try</snippet></ROW><ROW><id>12397284</id><snippet>except:</snippet></ROW><ROW><id>12397284</id><snippet>#!/usr/bin/python

import sys
import curses

height = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 24

try:
    stdscr = curses.initscr()
    curses.noecho();

    palette = [' ', ' ', '.', '.', '/', 'c', '(', '@', '#', '8']

    index = 0
    for x in xrange(50):
        for y in xrange(height):
            index = (index + 1) % len(palette)
            try:
                stdscr.move(y,x)
            except Exception as e:
                stdscr.refresh()
                curses.endwin()
                print
                print x, y, e
                sys.exit(1)
            stdscr.addch(palette[index])
    stdscr.refresh()
finally:
    curses.endwin()
</snippet></ROW><ROW><id>12397284</id><snippet>python cursetest 30</snippet></ROW><ROW><id>12397284</id><snippet>0 25 wmove() returned ERR
</snippet></ROW><ROW><id>12397284</id><snippet>python cursetest 60</snippet></ROW><ROW><id>12397284</id><snippet>0 50 wmove() returned ERR
</snippet></ROW><ROW><id>12397284</id><snippet>python cursetest 30</snippet></ROW><ROW><id>12397284</id><snippet>40 0 wmove() returned ERR
</snippet></ROW><ROW><id>12397284</id><snippet>getmaxyx()</snippet></ROW><ROW><id>12397415</id><snippet>def tuple2dict(data):
    d = {}
    for item in data:
        if len(item) == 1 and isinstance(item, tuple):
            # remove the nested structure, you may need a loop here
            item = item[0]
            key = item[0]
            value = item[1]
            d[key] = value
            continue
        key = item[0]
        value = item[1]
        if hasattr(value, '__getitem__'):
            value = tuple2dict(value)
        d[key] = value
    return d
</snippet></ROW><ROW><id>12397419</id><snippet>SELECT FOR UPDATE</snippet></ROW><ROW><id>12397419</id><snippet>SELECT</snippet></ROW><ROW><id>12397419</id><snippet>LOCK</snippet></ROW><ROW><id>12397419</id><snippet>adbapi</snippet></ROW><ROW><id>12397419</id><snippet>runInteraction</snippet></ROW><ROW><id>12397419</id><snippet>runInteraction</snippet></ROW><ROW><id>12397419</id><snippet>callFromThread</snippet></ROW><ROW><id>12397419</id><snippet>blockingCallFromThread</snippet></ROW><ROW><id>12397419</id><snippet>deferToThread</snippet></ROW><ROW><id>12397419</id><snippet>adbapi</snippet></ROW><ROW><id>12397419</id><snippet>adbapi</snippet></ROW><ROW><id>12397419</id><snippet>deferToThread</snippet></ROW><ROW><id>12397447</id><snippet>LineReceiver.lineReceived</snippet></ROW><ROW><id>12397447</id><snippet>LineReceiver</snippet></ROW><ROW><id>12397517</id><snippet>import imp
import sys

f, pathname, desc = imp.find_module('logging', sys.path[1:])
logging = imp.load_module('logging', f, pathname, desc)
</snippet></ROW><ROW><id>12397517</id><snippet>load_module</snippet></ROW><ROW><id>12397517</id><snippet>reload(logging)</snippet></ROW><ROW><id>12397517</id><snippet>import logging</snippet></ROW><ROW><id>12397517</id><snippet>logging</snippet></ROW><ROW><id>12397517</id><snippet>logging</snippet></ROW><ROW><id>12397517</id><snippet>import logging</snippet></ROW><ROW><id>12397517</id><snippet>logging</snippet></ROW><ROW><id>12397517</id><snippet>logging =</snippet></ROW><ROW><id>12397517</id><snippet>sys.path</snippet></ROW><ROW><id>12397517</id><snippet>f, pathname, desc = imp.find_module('logging', [path for path in sys.path if path and path[0] != '.'])
</snippet></ROW><ROW><id>12397517</id><snippet>abspath(path)</snippet></ROW><ROW><id>12397517</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>12397517</id><snippet>os.getcwd()</snippet></ROW><ROW><id>12397567</id><snippet>enumerate</snippet></ROW><ROW><id>12397567</id><snippet>numshapes = 8
for x in range(numshapes):
  x += 50
  y += 50
  turtle.goto(x,y)
  for i in range(squares):
      turtle.forward(20)
      turtle.left(angle)
      turtle.forward(20)      
      print (turtle.pos())
</snippet></ROW><ROW><id>12397655</id><snippet>def minuteMod(x, p=0):
    import datetime
    minute = datetime.datetime.now() + datetime.timedelta(seconds=15)
    minute = int(datetime.datetime.strftime(minute, "%M"))
    if minute % x == p:
        return True
    return False
</snippet></ROW><ROW><id>12397655</id><snippet>p</snippet></ROW><ROW><id>12397655</id><snippet>0</snippet></ROW><ROW><id>12397655</id><snippet>def returnJSONQuestion(id):

    if not minuteMod(2):
        return None or ''

    # rest of the code
</snippet></ROW><ROW><id>12397655</id><snippet>def returnJSONQuestion(id):

    if minuteMod(3): # current minute is a factor of 3
        return jsonFromCache # open a file and output cached contents
    else:
        url = 'http://...'
        storeJSONToFile(url)
        return json
</snippet></ROW><ROW><id>12397908</id><snippet>pyodbc.Row</snippet></ROW><ROW><id>12397908</id><snippet>.fetchone()</snippet></ROW><ROW><id>12397908</id><snippet>starting_index</snippet></ROW><ROW><id>12397908</id><snippet>starting_index = cursor.fetchone()
</snippet></ROW><ROW><id>12397908</id><snippet>starting_index = cursor.fetchone()[0]
</snippet></ROW><ROW><id>12397908</id><snippet>fetchone()</snippet></ROW><ROW><id>12397935</id><snippet>if filename == tempname: continue</snippet></ROW><ROW><id>12397948</id><snippet>class Foo(object):
    a = []

foo1 = Foo()
foo2 = Foo()

foo1.a.append(123)

foo1.a # [123]
foo2.a # [123]
</snippet></ROW><ROW><id>12397948</id><snippet>class Bar(object):
    a = 123    

bar1 = Bar()
bar2 = Bar()

bar1.a = 456

bar2.a # 123
</snippet></ROW><ROW><id>12397948</id><snippet>foo.bar
</snippet></ROW><ROW><id>12397948</id><snippet>bar</snippet></ROW><ROW><id>12397948</id><snippet>foo</snippet></ROW><ROW><id>12397948</id><snippet>foo.__dict__</snippet></ROW><ROW><id>12397948</id><snippet>__dict__</snippet></ROW><ROW><id>12397952</id><snippet>type</snippet></ROW><ROW><id>12397952</id><snippet>Namespace</snippet></ROW><ROW><id>12397952</id><snippet>parse_args</snippet></ROW><ROW><id>12397952</id><snippet>args = argp.parse_args()
args.o = open(args.o,'w')
</snippet></ROW><ROW><id>12398026</id><snippet>xlabel</snippet></ROW><ROW><id>12398026</id><snippet>ylabel</snippet></ROW><ROW><id>12398026</id><snippet>plt.xlabel('x-label')
plt.ylabel('y-label')
</snippet></ROW><ROW><id>12398055</id><snippet>self.m += 1</snippet></ROW><ROW><id>12398055</id><snippet>self</snippet></ROW><ROW><id>12398055</id><snippet>m</snippet></ROW><ROW><id>12398055</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(StressTestLocal.do_work)
 18           0 LOAD_CONST               1 (0)
              3 STORE_FAST               1 (m)

 19           6 LOAD_FAST                1 (m)
              9 LOAD_CONST               2 (1)
             12 INPLACE_ADD         
             13 STORE_FAST               1 (m)

 20          16 LOAD_FAST                1 (m)
             19 LOAD_CONST               3 (2)
             22 INPLACE_MULTIPLY    
             23 STORE_FAST               1 (m)
             26 LOAD_CONST               0 (None)
             29 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(StressTestMember.do_work)
 10           0 LOAD_FAST                0 (self)
              3 DUP_TOP             
              4 LOAD_ATTR                0 (m)
              7 LOAD_CONST               1 (1)
             10 INPLACE_ADD         
             11 ROT_TWO             
             12 STORE_ATTR               0 (m)

 11          15 LOAD_FAST                0 (self)
             18 DUP_TOP             
             19 LOAD_ATTR                0 (m)
             22 LOAD_CONST               2 (2)
             25 INPLACE_MULTIPLY    
             26 ROT_TWO             
             27 STORE_ATTR               0 (m)
             30 LOAD_CONST               0 (None)
             33 RETURN_VALUE        
</snippet></ROW><ROW><id>12398060</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; 
&gt;&gt;&gt; url = 'http://search.yahoo.com/search?p=dog'
&gt;&gt;&gt; content = urlopen(url).read()
&gt;&gt;&gt; soup = BeautifulSoup(content)
&gt;&gt;&gt; 
&gt;&gt;&gt; soup.find(id="link-1")
&lt;a class="yschttl spt" data-bk="5097.1" href="http://www.dog.com/" id="link-1"&gt;&lt;b&gt;Dog&lt;/b&gt; Supplies | &lt;b&gt;Dog&lt;/b&gt; Food, &lt;b&gt;Dog&lt;/b&gt; Beds, &lt;b&gt;Dog&lt;/b&gt; &lt;wbr&gt;&lt;/wbr&gt;Flea Control &amp; More ...&lt;/a&gt;
&gt;&gt;&gt; soup.find(id="link-1").get("href")
'http://www.dog.com/'
</snippet></ROW><ROW><id>12398060</id><snippet> u'http://www.dog.com/'
</snippet></ROW><ROW><id>12398331</id><snippet>glob</snippet></ROW><ROW><id>12398331</id><snippet>import glob
filenames = glob.glob('&lt;some_path&gt;/*.&lt;extension&gt;')
</snippet></ROW><ROW><id>12398501</id><snippet>import ..blah</snippet></ROW><ROW><id>12398501</id><snippet>from .. import first_level</snippet></ROW><ROW><id>12398658</id><snippet>PyQt4</snippet></ROW><ROW><id>12398658</id><snippet>PySide</snippet></ROW><ROW><id>12398658</id><snippet>PySide</snippet></ROW><ROW><id>12398658</id><snippet>PyQt4</snippet></ROW><ROW><id>12398658</id><snippet>#!/usr/bin/env python    
import sys
from PySide.QtCore import Qt
from PySide.QtGui import QApplication, QCheckBox, QGraphicsLayoutItem
#from PyQt4.QtCore import Qt
#from PyQt4.QtGui import QApplication, QCheckBox, QGraphicsLayoutItem

class Editor(QGraphicsLayoutItem):
    def __init__(self, name):
        QGraphicsLayoutItem.__init__(self)
    def update_value(self, value):
        pass

class BooleanEditor(Editor, QCheckBox):
    def __init__(self, value):
        Editor.__init__(self, "foo")
        QCheckBox.__init__(self)

        self.update_value(value)

    def update_value(self, value):
        self.old_value = value
        self.setCheckState(value) # Error occurs here
        print("End of update_value")

if __name__ == "__main__":
    qApp = QApplication(sys.argv)
    BooleanEditor(Qt.Checked)
</snippet></ROW><ROW><id>12398658</id><snippet>PyQt</snippet></ROW><ROW><id>12398658</id><snippet>qt_gui</snippet></ROW><ROW><id>12398658</id><snippet>ROS</snippet></ROW><ROW><id>12398658</id><snippet>PyQt</snippet></ROW><ROW><id>12398772</id><snippet>t._v_file.filename</snippet></ROW><ROW><id>12398967</id><snippet>scipy.cluster.hierarchy</snippet></ROW><ROW><id>12398967</id><snippet>from collections import defaultdict
import csv
import functools
import itertools
import numpy as np

# name_to_id associates a name with an integer 0, 1, ...
name_to_id = defaultdict(functools.partial(next, itertools.count()))

with open('file.csv') as f:
    reader = csv.reader(f)

    # do one pass over the file to get all the IDs so we know how 
    # large to make the matrix, then another to fill in the data.
    # this takes more time but uses less memory than loading everything
    # in in one pass, because we don't know how large the matrix is; you
    # can skip this if you do know the number of elements from elsewhere.
    for name_a, name_b, dist in reader:
        idx_a = name_to_id[name_a]
        idx_b = name_to_id[name_b]

    # make the (square) distances matrix
    # this should really be triangular, but the formula for 
    # indexing into that is escaping me at the moment
    n_elem = len(name_to_id)
    dists = np.zeros((n_elem, n_elem))

    # go back to the start of the file and read in the actual data
    f.seek(0)
    for name_a, name_b, dist in reader:
        idx_a = name_to_id[name_a]
        idx_b = name_to_id[name_b]
        dists[(idx_a, idx_b) if idx_a &lt; idx_b else (idx_b, idx_a)] = dist

condensed = dists[np.triu_indices(n_elem, 1)]
</snippet></ROW><ROW><id>12398967</id><snippet>scipy.cluster.hierarchy.linkage</snippet></ROW><ROW><id>12398967</id><snippet>condensed</snippet></ROW><ROW><id>12398967</id><snippet>id_to_name = dict((id, name) for name, id in name_to_id.iteritems())
</snippet></ROW><ROW><id>12398995</id><snippet>os.path.exists()
</snippet></ROW><ROW><id>12399090</id><snippet>class Hint(object):
    def __init__(self, n, msg):
        self.n = n
        self.msg = msg

    def __call__(self, f):
        def wrap(*args, **kw):
            count = 1
            while True:
                ret = f(*args, **kw)
                if ret == False:
                    count += 1
                    if count &gt; self.n:
                        print self.msg
                        count = 0
                else:
                    break
            return ret
        return wrap

def start_at(place):
    print "start at %d" % place
    return "start"

@Hint(3, "You may choose from 1, 2, 3.")
def start():
    print "What place will you start?"
    cmd = raw_input("&gt; ")
    try:
        place = int(cmd)
        if place not in (1,2,3):
            return False
        else:
            return start_at, (place,)
    except ValueError:
        return False

def quit():
    print "I will quit"
    return "quit"

@Hint(4, "You may choose from yes and no.")
def begin():
    print "Would you like to begin?"
    cmd = raw_input("&gt; ")
    if "yes" in cmd:
        print "Great!\n"
        return start, ()
    elif "no" in cmd:
        print "Bad!\n"
        return quit, ()
    else:
        return False

call_func, args = begin, ()
while True:        
    ret = call_func(*args)
    if isinstance(ret, tuple):
        call_func, args = ret
    else:
        break
</snippet></ROW><ROW><id>12399090</id><snippet>Would you like to begin?
&gt; abc
Would you like to begin?
&gt; def
Would you like to begin?
&gt; 123
Would you like to begin?
&gt; 345
You may choose from yes and no.
Would you like to begin?
&gt; yes
Great!

What place will you start?
&gt; 5
What place will you start?
&gt; fg
What place will you start?
&gt; sd
You may choose from 1, 2, 3.
What place will you start?
&gt; 2
start at 2
</snippet></ROW><ROW><id>12399174</id><snippet>server {
    listen   MY_PORT;
    server_name USERNAME.webfactional.com;

    access_log /home/USERNAME/logs/user/nginx/app_access.log;
    error_log  /home/USERNAME/logs/user/nginx/app_error.log;

    root /home/USERNAME/media/app;

    location /m {
        alias /home/USERNAME/media/app/media;
    }

    location /s/ {
        alias /home/imanhodjaev/media/app/static;
    }

    location / {
        proxy_pass_header Server;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_connect_timeout 10;
        proxy_read_timeout 10;
        proxy_pass http://localhost:PORT/;
    }

    error_page 500 502 503 504 /media/50x.html;
}
</snippet></ROW><ROW><id>12399174</id><snippet>extra_info</snippet></ROW><ROW><id>12399184</id><snippet>map</snippet></ROW><ROW><id>12399184</id><snippet>date_time = datetime.datetime

for line in log:
    date, time = line.strip().split(' ', 2)[:2]

    timelist = map(int, date.split('-') + time.split(':'))
    d = date_time(*timelist)
</snippet></ROW><ROW><id>12399184</id><snippet>.split(' ', 2)</snippet></ROW><ROW><id>12399184</id><snippet>.split()</snippet></ROW><ROW><id>12399184</id><snippet>map(int, l)</snippet></ROW><ROW><id>12399184</id><snippet>[int(x) for x in l]</snippet></ROW><ROW><id>12399184</id><snippet>.strip()</snippet></ROW><ROW><id>12399275</id><snippet>def some_method(data, level=0):


    some_method(..., level=level+1)


if __name__ == '__main__':
    some_method(my_data)
</snippet></ROW><ROW><id>12399393</id><snippet>np.dot</snippet></ROW><ROW><id>12399393</id><snippet>rowvar=0</snippet></ROW><ROW><id>12399393</id><snippet>np.cov(b)</snippet></ROW><ROW><id>12399644</id><snippet>DEBUG = True
</snippet></ROW><ROW><id>12399644</id><snippet>DEBUG = False</snippet></ROW><ROW><id>12399721</id><snippet>data-0000</snippet></ROW><ROW><id>12399721</id><snippet>data-0999</snippet></ROW><ROW><id>12399721</id><snippet>datasets = []
for file_number in range(1000):
    datasets.append(numpy.loadtxt("c:\\data-%04d" %(file_number, ))
</snippet></ROW><ROW><id>12399721</id><snippet>every_fifth_file = datasets[::5]</snippet></ROW><ROW><id>12399836</id><snippet>if 'errormessage' in kwargs:
    print("found it")
</snippet></ROW><ROW><id>12399836</id><snippet>kwargs</snippet></ROW><ROW><id>12399836</id><snippet>dict</snippet></ROW><ROW><id>12399836</id><snippet>if kwargs['errormessage']</snippet></ROW><ROW><id>12399836</id><snippet>KeyError</snippet></ROW><ROW><id>12399836</id><snippet>if errormessage in kwargs:</snippet></ROW><ROW><id>12399836</id><snippet>kwargs</snippet></ROW><ROW><id>12399836</id><snippet>errormessage</snippet></ROW><ROW><id>12399836</id><snippet>errormessage</snippet></ROW><ROW><id>12399836</id><snippet>NameError</snippet></ROW><ROW><id>12399836</id><snippet>.get()</snippet></ROW><ROW><id>12399836</id><snippet>None</snippet></ROW><ROW><id>12399836</id><snippet>kwargs.get("errormessage")</snippet></ROW><ROW><id>12399836</id><snippet>None</snippet></ROW><ROW><id>12399836</id><snippet>kwargs.get("errormessage", 17)</snippet></ROW><ROW><id>12399836</id><snippet>None</snippet></ROW><ROW><id>12399935</id><snippet>&gt;&gt;&gt; def changeWords(s):
        for old, new in (
                ("can't", "can not"),
                ("shouldn't", "should not"),
                ("don't", "do not"),
            ):    
            s = s.replace(old, new)
        return s

&gt;&gt;&gt; changeWords("I don't know how to do this")
'I do not know how to do this'
</snippet></ROW><ROW><id>12400176</id><snippet>   File "/usr/lib/python2.7/zipfile.py", line 464, in &lt;module&gt;
   class ZipExtFile(io.BufferedIOBase):
AttributeError: 'module' object has no attribute 'BufferedIOBase'
</snippet></ROW><ROW><id>12400176</id><snippet>apt-get install python-scipy python-numpy python-matplotlib
</snippet></ROW><ROW><id>12400176</id><snippet> In [22]: apgl.test()
Running tests from /usr/local/lib/python2.7/dist-packages/apgl
......./usr/lib/python2.7/dist-packages/scipy/sparse/compressed.py:486: SparseEfficiencyWarning: changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.
  SparseEfficiencyWarning)
....s...........................................................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss...................................................................................................................................................sssssssss...ssssssssssssssssssssssssssssssssssss......................s....s.........................ss
----------------------------------------------------------------------
Ran 423 tests in 25.454s

OK (skipped=120)
</snippet></ROW><ROW><id>12400293</id><snippet>s = contentArray[0]
if s.find('YES') != -1:
  return contentArray[0]
else:
  return 88
</snippet></ROW><ROW><id>12400392</id><snippet>def letters(input):
    valids = []
    for character in input:
        if character.isalpha():
            valids.append(character)
    return ''.join(valids)
</snippet></ROW><ROW><id>12400392</id><snippet>''.join(valids)</snippet></ROW><ROW><id>12400392</id><snippet>def letters(input):
    return ''.join(filter(str.isalpha, input))
</snippet></ROW><ROW><id>12400392</id><snippet>def letters(input):
    return ''.join([c for c in input if c.isalpha()])
</snippet></ROW><ROW><id>12400584</id><snippet>time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))
</snippet></ROW><ROW><id>12400759</id><snippet>url(r'^tags/(?p&lt;tag?\w+)/$', 'tagpage')</snippet></ROW><ROW><id>12400759</id><snippet>url(r'^tags/(?p&lt;tag&gt;\w+)/$', 'tagpage')</snippet></ROW><ROW><id>12400950</id><snippet>myproject/src</snippet></ROW><ROW><id>12400950</id><snippet>myproject/lib/python2.7/site-packages/</snippet></ROW><ROW><id>12400950</id><snippet>myproject/bin/python</snippet></ROW><ROW><id>12400950</id><snippet>myproject</snippet></ROW><ROW><id>12400950</id><snippet>myproject-lib</snippet></ROW><ROW><id>12400950</id><snippet>.../site_packages</snippet></ROW><ROW><id>12401051</id><snippet>def parseActionThatDeletesTheParsedTokens(tokens):
    # ...
    # do something interesting with the tokens
    # ...

    # delete the contents of the parsed tokens
    del tokens[:]
</snippet></ROW><ROW><id>12401051</id><snippet>scanString</snippet></ROW><ROW><id>12401051</id><snippet>parseString</snippet></ROW><ROW><id>12401051</id><snippet>OneOrMore(blockOfText).parseString(bigHonkingString)
</snippet></ROW><ROW><id>12401051</id><snippet>for tokens, matchstart, matchend in blockOfText.scanString(bigHonkingString):
    # do stuff with the tokens
</snippet></ROW><ROW><id>12401051</id><snippet>scanString</snippet></ROW><ROW><id>12401088</id><snippet>config.add_route('all_orders', '/order')
config.add_route('order_detail', '/order/{id}')

@view_config(route_name='all_orders', renderer='all_orders.mako')
def all_orders_view(request):
    all_orders = {} # query the DB?
    return {'orders': all_orders}

@view_config(route_name='order_detail', renderer='order_detail.mako')
def order_detail_view(request):
    order_id = request.matchdict['id']
    order = None # query the db for order
    if order is None:
        raise HTTPNotFound
    return {'order': order}
</snippet></ROW><ROW><id>12401160</id><snippet>class Hive(models.Model):
    name = models.CharField(max_length=100)
    marker = models.BooleanField(default=False)


class Bee(models.Model):
    hive = models.ForeignKey(Hive)
    name = models.CharField(max_length=100)
</snippet></ROW><ROW><id>12401160</id><snippet>class BeeForm(forms.ModelForm):
    check = forms.BooleanField(label="check", required=False)
    class Meta:
        model = Bee

class BeeInline(admin.TabularInline):
    form = BeeForm
    model = Bee

class HiveAdmin(admin.ModelAdmin):
    inlines = (BeeInline,)
    def save_formset(self, request, form, formset, change):
        for bee_form in formset:
            if bee_form.cleaned_data.get('check') == True:
                form.instance.marker = True
                form.instance.save()
        super(HiveAdmin, self).save_formset(request, form, formset, change)

admin.site.register(Hive, HiveAdmin)
</snippet></ROW><ROW><id>12401556</id><snippet>    _cell.style.number_format.format_code = '0.00E+00' 
</snippet></ROW><ROW><id>12401783</id><snippet>&gt;&gt;&gt; f2 = """chr7\t303\t292526
chr16\t23\t169805
chr6\t57\t62822
chr11\t124\t320564
chr7\t80\t300291"""
&gt;&gt;&gt; d2 = {}
&gt;&gt;&gt; for line in f2.split('\n'):
    line = line.rstrip()
    fields = line.split("\t")
    key = (fields[0].replace('chr', ''), fields[1])
    d2[key] = int(fields[2])


&gt;&gt;&gt; d2
{('7', '303'): 292526, ('7', '80'): 300291, ('16', '23'): 169805, ('6', '57'): 62822, ('11', '124'): 320564}
</snippet></ROW><ROW><id>12401783</id><snippet>d2</snippet></ROW><ROW><id>12401783</id><snippet>&gt;&gt;&gt; f1 = """7\t303\t0.207756232686981
16\t23\t0.208562019758507
6\t57\t0.208727272727273
7\t80\t0.209065354884048
11\t124\t0.209500609013398"""
&gt;&gt;&gt; for line in f1.split('\n'):
    line = line.rstrip()
    fields = line.split("\t")
    key = (fields[0], fields[1])
    if d2[key] &gt;= 100000:
        print line


7   303 0.207756232686981
16  23  0.208562019758507
7   80  0.209065354884048
11  124 0.209500609013398
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12402042</id><snippet>print max(d.keys(), key=lambda x: d[x]) 
</snippet></ROW><ROW><id>12402042</id><snippet>print max(d, key=d.get)
</snippet></ROW><ROW><id>12402187</id><snippet>git push -u git@example.com:my_project.git HEAD:my_branch</snippet></ROW><ROW><id>12402318</id><snippet>Char</snippet></ROW><ROW><id>12402318</id><snippet>Int</snippet></ROW><ROW><id>12402318</id><snippet>YEAR_IN_SCHOOL_CHOICES = (
    ('FR', 'Freshman'),
    ('SO', 'Sophomore'),
    ('JR', 'Junior'),
    ('SR', 'Senior'),
)
class Student(models.Model):
    year_in_school = models.CharField(max_length=2,
                                  choices=YEAR_IN_SCHOOL_CHOICES, default='FR')
</snippet></ROW><ROW><id>12402556</id><snippet>n%4==2</snippet></ROW><ROW><id>12402556</id><snippet>r = r'^[26]$|^\d*[02468][26]$|^\d*[13579][048]$'

# test
for i in xrange(1, 1000):
    m = re.match(r, str(i))
    if i % 4 == 2:
        assert m, [i, i % 4]
    else:
        assert not m, i
</snippet></ROW><ROW><id>12402556</id><snippet>n%3==0</snippet></ROW><ROW><id>12402556</id><snippet>mod n</snippet></ROW><ROW><id>12402598</id><snippet>np.concatenate([np.linspace(0, 2, 60), np.linspace(2, 10, 40)])
</snippet></ROW><ROW><id>12402598</id><snippet>np.concatenate([np.linspace(0, 2, 60), np.linspace(2, 10, 40)[1:]])
</snippet></ROW><ROW><id>12402849</id><snippet>self.ci = [0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>12402849</id><snippet>self.ci = []
for i in xrange(self.bands):
    self.ci.append(0)
</snippet></ROW><ROW><id>12403025</id><snippet>myfile = open('myfile', 'r')
max_len = 0
while 1:
    line = myfile.readline()
    if not line:
        break
    if len(line) # ... somethin
        # something
</snippet></ROW><ROW><id>12403034</id><snippet>type(l[0]) in [int, str] and all( type(e) == type(l[0]) for e in l)
</snippet></ROW><ROW><id>12403275</id><snippet>connection.find({}) 
</snippet></ROW><ROW><id>12403275</id><snippet>row = connection.your_collection.find()
</snippet></ROW><ROW><id>12403297</id><snippet>isinstance(i, type(i))</snippet></ROW><ROW><id>12403297</id><snippet>True</snippet></ROW><ROW><id>12403297</id><snippet>type()</snippet></ROW><ROW><id>12403297</id><snippet>isinstance()</snippet></ROW><ROW><id>12403297</id><snippet>type()</snippet></ROW><ROW><id>12403297</id><snippet>v = (PyObject *)o-&gt;ob_type;
Py_INCREF(v);
return v;
</snippet></ROW><ROW><id>12403297</id><snippet>int
PyObject_IsInstance(PyObject *inst, PyObject *cls)
{
   _Py_IDENTIFIER(__instancecheck__);
   PyObject *checker;

   /* Quick test for an exact match */
   if (Py_TYPE(inst) == (PyTypeObject *)cls)
      return 1;
</snippet></ROW><ROW><id>12403297</id><snippet>Py_TYPE</snippet></ROW><ROW><id>12403297</id><snippet>obj-&gt;ob_type</snippet></ROW><ROW><id>12403297</id><snippet>type()</snippet></ROW><ROW><id>12403297</id><snippet>#define Py_TYPE(ob) (((PyObject*)(ob))-&gt;ob_type)
</snippet></ROW><ROW><id>12403362</id><snippet>.distinct([*fields])</snippet></ROW><ROW><id>12403926</id><snippet>return_d</snippet></ROW><ROW><id>12403926</id><snippet>class AttributeDict(dict): 
    __getattr__ = dict.__getitem__

class Foo (object):
    def __init__(self,d):
        self.d=d

    @property
    def return_d(self):
        return AttributeDict(self.d)
</snippet></ROW><ROW><id>12403926</id><snippet>&gt;&gt;&gt; foo = Foo({'k1':1,'k2':2})
&gt;&gt;&gt; foo.return_d.k1
1
</snippet></ROW><ROW><id>12403926</id><snippet>property</snippet></ROW><ROW><id>12403926</id><snippet>__getattr__</snippet></ROW><ROW><id>12403926</id><snippet>AttributeDict</snippet></ROW><ROW><id>12403926</id><snippet>.</snippet></ROW><ROW><id>12404384</id><snippet>import cairo
import numpy
import sys


def convert_to_grayscale(img_in):
    """Convert an image to grayscale.

    Arguments:
        img_in: (cairo.ImageSurface) input image.

    Return:
        (cairo.ImageSurface) image in grayscale, in ARGB32 mode.

    Timing:
        ~100ms to convert an image of 800x800

    Examples:
        # returns a B&amp;W image
        &gt;&gt;&gt; convert_to_grayscale(cairo.ImageSurface.create_from_png('test.png'))
    """
    a = numpy.frombuffer(img_in.get_data(), numpy.uint8)
    w, h = img_in.get_width(), img_in.get_height()
    a.shape = (h, h, 4)

    assert sys.byteorder == 'little', (
        'The luminosity vector needs to be switched if we\'re in a big endian architecture. '
        'The alpha channel will be at position 0 instead of 3.')
    alpha = a[:, :, 3]
    alpha.shape = (w, h, 1)

    luminosity_float = numpy.sum(a * numpy.array([.114, .587, .299, 0]), axis=2)
    luminosity_int = numpy.array(luminosity_float, dtype=numpy.uint8)
    luminosity_int.shape = (w, h, 1)
    grayscale_gbra = numpy.concatenate((luminosity_int, luminosity_int, luminosity_int, alpha),
                                       axis=2)
    stride = cairo.ImageSurface.format_stride_for_width(cairo.FORMAT_ARGB32, w)
    assert stride == 4 * w, 'We need to modify the numpy code if the stride is different'
    img_out = cairo.ImageSurface.create_for_data(grayscale_gbra, cairo.FORMAT_ARGB32, w, h, stride)

    return img_out
</snippet></ROW><ROW><id>12404419</id><snippet>x = numpy.array([1, 2, 3])
y = numpy.array([10, 20, 30]) 
XX, YY = numpy.meshgrid(x, y)
ZZ = XX + YY

ZZ =&gt; array([[11, 12, 13],
             [21, 22, 23],
             [31, 32, 33]])
</snippet></ROW><ROW><id>12404419</id><snippet>XX, YY = numpy.atleast_2d(x, y)
YY = YY.T # transpose to allow broadcasting
ZZ = XX + YY
</snippet></ROW><ROW><id>12404419</id><snippet>grid</snippet></ROW><ROW><id>12404419</id><snippet>ogrid</snippet></ROW><ROW><id>12404419</id><snippet>linspace</snippet></ROW><ROW><id>12404419</id><snippet>YY, XX = numpy.mgrid[10:40:10, 1:4]
ZZ = XX + YY # These are equivalent to the output of meshgrid

YY, XX = numpy.ogrid[10:40:10, 1:4]
ZZ = XX + YY # These are equivalent to the atleast_2d example
</snippet></ROW><ROW><id>12404635</id><snippet>import timeit

def getExecutionTime():
    t = timeit.Timer("sayHello()", "from __main__ import sayHello")
    return t.timeit(2)

def sayHello():
    print("Hello")

print(getExecutionTime())
</snippet></ROW><ROW><id>12404635</id><snippet>Hello</snippet></ROW><ROW><id>12404635</id><snippet>sayHello()</snippet></ROW><ROW><id>12404635</id><snippet>sayHello</snippet></ROW><ROW><id>12404635</id><snippet>Timer</snippet></ROW><ROW><id>12404815</id><snippet>readableMACaddress = '%02X-%02X-%02X-%02X-%02X-%02X' % (touple1, touple2, touple3, touple4, touple5, touple6)
</snippet></ROW><ROW><id>12404815</id><snippet>touple</snippet></ROW><ROW><id>12404815</id><snippet>readableMACaddress = '-'.join('%02X' % ((myMAC &gt;&gt; 8*i) &amp; 0xff) for i in reversed(xrange(6)))
</snippet></ROW><ROW><id>12405070</id><snippet>bisect</snippet></ROW><ROW><id>12405070</id><snippet>from functools import total_ordering

@total_ordering
class LogEntry(object):
    def __init__(self, time, message):
        self.time = time
        self.message = message

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented
        return self.time == other.time and self.message == other.message

    def __lt__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented
        if self.time == other.time:
            return self.message &lt; other.message
        return self.time &lt; other.time
</snippet></ROW><ROW><id>12405070</id><snippet>LogEntry</snippet></ROW><ROW><id>12405070</id><snippet>functools.total_ordering</snippet></ROW><ROW><id>12405070</id><snippet>bisect</snippet></ROW><ROW><id>12405070</id><snippet>def getLog(timestamp):
    dummy_entry = LogEntry(timestamp, '')
    index = bisect.bisect_right(logs, dummy_entry)
    return logs[index:]
</snippet></ROW><ROW><id>12405070</id><snippet>logs</snippet></ROW><ROW><id>12405111</id><snippet>websupport.js</snippet></ROW><ROW><id>12405111</id><snippet>$(document).ready</snippet></ROW><ROW><id>12405111</id><snippet>$('.sphinx-has-comment').comment();
</snippet></ROW><ROW><id>12405111</id><snippet>$('.sphinx-has-comment:not(table p)').comment();
</snippet></ROW><ROW><id>12405259</id><snippet>t2.daemon = True</snippet></ROW><ROW><id>12405259</id><snippet>t.daemon = True</snippet></ROW><ROW><id>12405259</id><snippet>t.daemon = True</snippet></ROW><ROW><id>12405259</id><snippet>import wx
import time
from threading import Thread

def print_something_forever(something):
    while True:
        print something
        time.sleep(1)

class Frame(wx.Frame):
    def __init__(self,parent):
        wx.Frame.__init__(self,parent)
        self.panel= wx.Panel(self)
        t= Thread(target=print_something_forever,args=("Thread alive!",))
        t.daemon= True
        t.start()
        self.Show()

if __name__ == "__main__":
    app= wx.App(False)
    Frame(None)
    app.MainLoop()
</snippet></ROW><ROW><id>12405597</id><snippet>class Property(object):
    "Emulate PyProperty_Type() in Objects/descrobject.c"

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError("unreadable attribute")
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError("can't set attribute")
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError("can't delete attribute")
        self.fdel(obj)

    def getter(self, fget):
        return type(self)(fget, self.fset, self.fdel, self.__doc__)

    def setter(self, fset):
        return type(self)(self.fget, fset, self.fdel, self.__doc__)

    def deleter(self, fdel):
        return type(self)(self.fget, self.fset, fdel, self.__doc__)
</snippet></ROW><ROW><id>12405872</id><snippet>for package in packages:
    package = __import__(package)
</snippet></ROW><ROW><id>12405872</id><snippet>A.B</snippet></ROW><ROW><id>12405872</id><snippet>__import__('A.B')</snippet></ROW><ROW><id>12405872</id><snippet>A</snippet></ROW><ROW><id>12405872</id><snippet>__import__('A.B', fromlist = [True])</snippet></ROW><ROW><id>12405872</id><snippet>B</snippet></ROW><ROW><id>12406079</id><snippet>MyClass</snippet></ROW><ROW><id>12406079</id><snippet>import imp
from my_module import MyClass
import my_module
print(MyClass == my_module.MyClass) # Result is True
imp.reload(my_module)
print(MyClass == my_module.MyClass) # Result is False
</snippet></ROW><ROW><id>12406368</id><snippet>os.sep</snippet></ROW><ROW><id>12406368</id><snippet>os.path</snippet></ROW><ROW><id>12406368</id><snippet>import os

def extract_path_segments(path, sep=os.sep):
    path, filename = os.path.split(os.path.abspath(path))
    bottom, rest = path[1:].split(sep, 1)
    bottom = sep + bottom
    middle, top = os.path.split(rest)
    return (bottom, middle, top)
</snippet></ROW><ROW><id>12406368</id><snippet>\</snippet></ROW><ROW><id>12406368</id><snippet>/</snippet></ROW><ROW><id>12406368</id><snippet>&gt;&gt;&gt; extract_path_segments('/abs/path/to/my/file/file.txt')
('/abs', 'path/to/my', 'file')
</snippet></ROW><ROW><id>12406916</id><snippet>Event.objects.filter(eventschedule__active=True, 
                     eventschedule__sales_start__lte=now,
                     eventschedule__sales_finish__gte=now)
</snippet></ROW><ROW><id>12406916</id><snippet>Event.objects.filter(eventschedule__in=EventSchedule.objects.filter(
    (active=True, sales_start__lte=now, sales_finish__gte=now))
</snippet></ROW><ROW><id>12406916</id><snippet>Event.objects.filter(id__in=EventSchedule.objects.values_list('event').filter(
    (active=True, sales_start__lte=now, sales_finish__gte=now)).distinct()
</snippet></ROW><ROW><id>12406968</id><snippet>&gt;&gt;&gt; '{0}.txt'.format(1)
'1.txt'
</snippet></ROW><ROW><id>12406968</id><snippet>for i in range(50):
    data = loadtxt('{0}.txt'.format(i + 1), float)
</snippet></ROW><ROW><id>12407016</id><snippet>parentKey = winreg.OpenKey(root, dir)
i = 0
while True:
   try:
       key = winreg.EnumKey(parent, i)
       print key
       i += 1
   except WindowsError: 
       break
</snippet></ROW><ROW><id>12407027</id><snippet>test = """
...... A 
B ....... 
B ....... 
...... A 
B ....... 
B ......."""

from pyparsing import Literal, Word, printables, Group, OneOrMore

A = Literal("A")
B = Literal("B")

notAorB = Word(printables, excludeChars="AB")

parser = OneOrMore(Group(A + Group(OneOrMore(B))))
parser.ignore(notAorB)

print parser.parseString(test).asList()
</snippet></ROW><ROW><id>12407027</id><snippet>[['A', ['B', 'B']], ['A', ['B', 'B']]]
</snippet></ROW><ROW><id>12407081</id><snippet>import my_module
def my_implementation():
    pass

my_module.implementation = my_implementation
</snippet></ROW><ROW><id>12407167</id><snippet>$addToSet</snippet></ROW><ROW><id>12407167</id><snippet>post</snippet></ROW><ROW><id>12407167</id><snippet>    class Post(EmbeddedDocument):
        uid = StringField(required=True)
        text = StringField(required=True)

    class Feed(Document):
        label = StringField(required=True)
        feed_url = StringField(required=True)
        posts = ListField(EmbeddedDocumentField(Post))

    Feed.drop_collection()

    Feed(
        label="label",
        feed_url="www.feed.com"
    ).save()

    post = Post(uid='1', text="hi")
    updated = Feed.objects(posts__uid=post.uid).update_one(set__posts__S=post)
    if not updated:
        Feed.objects.update_one(push__posts=post)
</snippet></ROW><ROW><id>12407167</id><snippet>post</snippet></ROW><ROW><id>12407167</id><snippet>Post</snippet></ROW><ROW><id>12407188</id><snippet>print(os.getuid())</snippet></ROW><ROW><id>12407188</id><snippet>someapp.bin</snippet></ROW><ROW><id>12407188</id><snippet>output = p.communicate()[0]
print(output)
</snippet></ROW><ROW><id>12407883</id><snippet>os.walk</snippet></ROW><ROW><id>12407883</id><snippet>def count_pdf_txt(top):
    npdf = 0
    ntxt = 0
    ndir = 0
    for root,dirs,files in os.walk(top):
        ndir += len(dirs)
        for f in files:
            if f.endswith('txt'): #use `splitext` if you like.
                ntxt += 1
            elif f.endswith('pdf'):
                npdf += 1
            else:
                print "unknown"

    return npdf,ntxt,ndirs
</snippet></ROW><ROW><id>12407883</id><snippet> pdfCount = pdfCount + 1
</snippet></ROW><ROW><id>12407883</id><snippet>get_counts</snippet></ROW><ROW><id>12407883</id><snippet>global</snippet></ROW><ROW><id>12407883</id><snippet>global pdfCount</snippet></ROW><ROW><id>12407883</id><snippet>global</snippet></ROW><ROW><id>12407936</id><snippet>&gt;&gt;&gt; loops = [[2,3,5],[3,5,2],[7,8,9,6]]
&gt;&gt;&gt; set(tuple(sorted(loop)) for loop in loops)
set([(2, 3, 5), (6, 7, 8, 9)])
</snippet></ROW><ROW><id>12407936</id><snippet>set</snippet></ROW><ROW><id>12407936</id><snippet>sorted</snippet></ROW><ROW><id>12407936</id><snippet>def rotated(l, n):
    return l[n:] + l[:n]

def canonicalize(l):
    m = min(l)
    where = l.index(m)
    return rotated(l, where)
</snippet></ROW><ROW><id>12407936</id><snippet>&gt;&gt;&gt; loops = [[2,5,3], [5,3,2], [7,8,6,9]]
&gt;&gt;&gt; set(tuple(canonicalize(loop)) for loop in loops)
set([(2, 5, 3), (6, 9, 7, 8)])
</snippet></ROW><ROW><id>12408068</id><snippet>Meeting.objects.filter</snippet></ROW><ROW><id>12408068</id><snippet>Meeting</snippet></ROW><ROW><id>12408068</id><snippet>QuerySet</snippet></ROW><ROW><id>12408068</id><snippet>QuerySet</snippet></ROW><ROW><id>12408068</id><snippet>for user_id in get_all_user_of_org:
    mee_data = {} 
    get_meetings = Meeting.objects.filter(created_by = user_id.id)
    print dir(get_meetings)
    for meeting in get_meetings:
        do_something_with(meeting.start_time)
</snippet></ROW><ROW><id>12408068</id><snippet>for user_id in get_all_user_of_org:
    get_meetings = Meeting.objects.filter(created_by = user_id.id)
    for meeting in get_meetings:
        mee_data = {} 
        mee_data['start_time'] = meeting.start_time
        getall.append(mee_data)
</snippet></ROW><ROW><id>12408433</id><snippet>var1,var2,var3,var4 = sys.argv[1:5]
</snippet></ROW><ROW><id>12408433</id><snippet>var1,var2,var3,var4,*rest = sys.argv[1:]
</snippet></ROW><ROW><id>12408433</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>12408433</id><snippet>sys.argv</snippet></ROW><ROW><id>12408433</id><snippet>rest</snippet></ROW><ROW><id>12408433</id><snippet>argparse</snippet></ROW><ROW><id>12409065</id><snippet>defaultdict</snippet></ROW><ROW><id>12409065</id><snippet>':'</snippet></ROW><ROW><id>12409065</id><snippet>from collections import defaultdict

case_letters = defaultdict(list)
start = ['CASE_1:a','CASE_1:b','CASE_1:c','CASE_1:d', 'CASE_2:e','CASE_2:f','CASE_2:g','CASE_2:h']
for el in start:
    case, letter = el.split(':')
    case_letters[case].append(letter)
result = sorted('{case}:{letters}'.format(case=key, letters=','.join(values)) for key, values in case_letters.iteritems())
print result
</snippet></ROW><ROW><id>12409065</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>12409065</id><snippet>str.split</snippet></ROW><ROW><id>12409065</id><snippet>list</snippet></ROW><ROW><id>12409065</id><snippet>append</snippet></ROW><ROW><id>12409065</id><snippet>extend</snippet></ROW><ROW><id>12409065</id><snippet>sort</snippet></ROW><ROW><id>12409065</id><snippet>str.format</snippet></ROW><ROW><id>12409065</id><snippet>sorted</snippet></ROW><ROW><id>12409065</id><snippet>dict</snippet></ROW><ROW><id>12409065</id><snippet>{1: ['a', 'b', 'c', 'd'], 2: ['e', 'f', 'g', 'h']}
</snippet></ROW><ROW><id>12409282</id><snippet>.load()</snippet></ROW><ROW><id>12409282</id><snippet>UTF-8</snippet></ROW><ROW><id>12409282</id><snippet>open()</snippet></ROW><ROW><id>12409282</id><snippet>os.device_encoding()</snippet></ROW><ROW><id>12409282</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>12409282</id><snippet>do_setlocale</snippet></ROW><ROW><id>12409282</id><snippet>False</snippet></ROW><ROW><id>12409282</id><snippet>'ASCII'</snippet></ROW><ROW><id>12409282</id><snippet>None</snippet></ROW><ROW><id>12409282</id><snippet>if encoding is None:
    encoding = os.device_encoding()
if encoding is None:
    encoding = locale.getpreferredencoding(False)
if encoding is None:
    encoding = 'ASCII'
</snippet></ROW><ROW><id>12409282</id><snippet>os.deviceencoding()</snippet></ROW><ROW><id>12409282</id><snippet>'UTF-8'</snippet></ROW><ROW><id>12409282</id><snippet>'ASCII'</snippet></ROW><ROW><id>12409348</id><snippet>multiprocessing</snippet></ROW><ROW><id>12409348</id><snippet>subprocess</snippet></ROW><ROW><id>12409348</id><snippet>import logging
import test2
import multiprocessing as mp

logger = mp.get_logger()

def main():
    logger.info('Script is running')
    logger.info('Calling script test2')
    proc = mp.Process(target = test2.main)
    proc.start()
    proc.join()

if __name__ == '__main__':
    formatter = logging.Formatter('[%(asctime)s] [%(filename)s]: %(message)s',
                                  datefmt = '%H:%M:%S')
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)    
    main()
</snippet></ROW><ROW><id>12409348</id><snippet>import multiprocessing as mp

logger = mp.get_logger()

def main():
    logger.info('Script is running...')
</snippet></ROW><ROW><id>12409348</id><snippet>test.py</snippet></ROW><ROW><id>12409348</id><snippet>[11:36:50] [test.py]: Script is running
[11:36:50] [test.py]: Calling script test2
[11:36:50] [util.py]: child process calling self.run()
[11:36:50] [test2.py]: Script is running...
[11:36:50] [util.py]: process shutting down
[11:36:50] [util.py]: process exiting with exitcode 0
[11:36:50] [util.py]: process shutting down
</snippet></ROW><ROW><id>12409451</id><snippet>numbers</snippet></ROW><ROW><id>12409451</id><snippet>numbers.odd</snippet></ROW><ROW><id>12409451</id><snippet>Numbers</snippet></ROW><ROW><id>12409451</id><snippet>even</snippet></ROW><ROW><id>12409451</id><snippet>odd</snippet></ROW><ROW><id>12409451</id><snippet>Numbers</snippet></ROW><ROW><id>12409451</id><snippet>__init__</snippet></ROW><ROW><id>12409451</id><snippet>even</snippet></ROW><ROW><id>12409451</id><snippet>[i for i in List if int(i)%2 == 0]</snippet></ROW><ROW><id>12409451</id><snippet>odd</snippet></ROW><ROW><id>12409451</id><snippet>Numbers</snippet></ROW><ROW><id>12409451</id><snippet>Foo.numbers</snippet></ROW><ROW><id>12409451</id><snippet>Foo.List</snippet></ROW><ROW><id>12409451</id><snippet>Numbers</snippet></ROW><ROW><id>12409451</id><snippet>list</snippet></ROW><ROW><id>12409451</id><snippet>class Numbers(object):
    def __init__(self,L):
        self.L = L
    @property
    def even(self):
        return [i for i in self.L if not int(i)%2]
    def __repr__(self):
        return repr(self.L)
</snippet></ROW><ROW><id>12409451</id><snippet>Numbers</snippet></ROW><ROW><id>12409451</id><snippet>L</snippet></ROW><ROW><id>12409451</id><snippet>Numbers</snippet></ROW><ROW><id>12409451</id><snippet>Numb.append</snippet></ROW><ROW><id>12409451</id><snippet>Numbers</snippet></ROW><ROW><id>12409451</id><snippet> class Numbers(list):
    @property
    def even(self):
        ...
</snippet></ROW><ROW><id>12409451</id><snippet>//</snippet></ROW><ROW><id>12409451</id><snippet>%</snippet></ROW><ROW><id>12409459</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12409459</id><snippet>df</snippet></ROW><ROW><id>12409459</id><snippet>DataFrame</snippet></ROW><ROW><id>12409459</id><snippet>df.groupby(lambda L: (L.year, L.month))
</snippet></ROW><ROW><id>12409594</id><snippet>{% if "aEntry.link" == {{my_URL}} %}
</snippet></ROW><ROW><id>12409594</id><snippet>{% ifequal aEntry.link my_URL %}
</snippet></ROW><ROW><id>12409634</id><snippet>tuple</snippet></ROW><ROW><id>12409634</id><snippet>list</snippet></ROW><ROW><id>12409634</id><snippet>if x in {1, 2, 3}:
    pass # do something
</snippet></ROW><ROW><id>12409634</id><snippet>if x in set([1,2,3]):
    pass # do something
</snippet></ROW><ROW><id>12409963</id><snippet>instance -&gt; Subclass -&gt; Superclass -&gt; object (built-in type)
</snippet></ROW><ROW><id>12409963</id><snippet>instance</snippet></ROW><ROW><id>12409963</id><snippet>`instance.val`
</snippet></ROW><ROW><id>12409963</id><snippet>val</snippet></ROW><ROW><id>12409963</id><snippet>val</snippet></ROW><ROW><id>12409963</id><snippet>Subclass</snippet></ROW><ROW><id>12409963</id><snippet>val</snippet></ROW><ROW><id>12409963</id><snippet>Subclass</snippet></ROW><ROW><id>12409963</id><snippet>Superclass</snippet></ROW><ROW><id>12409963</id><snippet>&gt;&gt;&gt; class Foo():
    foovar = 10  
    def __init__(self, val):
        self.selfvar = val
</snippet></ROW><ROW><id>12409963</id><snippet>Foo</snippet></ROW><ROW><id>12409963</id><snippet>foovar</snippet></ROW><ROW><id>12409963</id><snippet>selfvar</snippet></ROW><ROW><id>12409963</id><snippet>&gt;&gt;&gt; f = Foo(5)
&gt;&gt;&gt; f.foovar
10
&gt;&gt;&gt; Foo.foovar
10
</snippet></ROW><ROW><id>12409963</id><snippet>foovar</snippet></ROW><ROW><id>12409963</id><snippet>f</snippet></ROW><ROW><id>12409963</id><snippet>Foo</snippet></ROW><ROW><id>12409963</id><snippet>f.foovar</snippet></ROW><ROW><id>12409963</id><snippet>&gt;&gt;&gt; f.foovar = 5
&gt;&gt;&gt; f.foovar
5
&gt;&gt;&gt; Foo.foovar
10
</snippet></ROW><ROW><id>12409963</id><snippet>Foo.foovar</snippet></ROW><ROW><id>12409963</id><snippet>Foo.foovar</snippet></ROW><ROW><id>12409963</id><snippet>foo</snippet></ROW><ROW><id>12409963</id><snippet>&gt;&gt;&gt; Foo.foovar = 7
&gt;&gt;&gt; f.foovar
5
</snippet></ROW><ROW><id>12409963</id><snippet>foo</snippet></ROW><ROW><id>12409963</id><snippet>&gt;&gt;&gt; Foo(5).foovar
7
</snippet></ROW><ROW><id>12409963</id><snippet>f.foovar</snippet></ROW><ROW><id>12409963</id><snippet>Foo.foovar</snippet></ROW><ROW><id>12409963</id><snippet>&gt;&gt;&gt; Foo.foovar = [1]
&gt;&gt;&gt; f = Foo(5)
&gt;&gt;&gt; f.foovar[0] = 99
&gt;&gt;&gt; Foo.foovar
[99]
</snippet></ROW><ROW><id>12409980</id><snippet>re.split()</snippet></ROW><ROW><id>12409980</id><snippet>re.findall()</snippet></ROW><ROW><id>12409980</id><snippet>&gt;&gt;&gt; re.findall(r"[^\W\d_]+|\d+", "23Westminister15London")
['23', 'Westminister', '15', 'London']
&gt;&gt;&gt; re.findall(r"[^\W\d_]+|\d+", "Westminister15London England")
['Westminister', '15', 'London', 'England']
</snippet></ROW><ROW><id>12409980</id><snippet>\d+</snippet></ROW><ROW><id>12409980</id><snippet>[^\W\d_]+</snippet></ROW><ROW><id>12410097</id><snippet>python -tt scriptname.py</snippet></ROW><ROW><id>12410288</id><snippet>&gt;&gt;&gt; '2s'.capitalize()
'2s'
</snippet></ROW><ROW><id>12410288</id><snippet>'2'.isdigit()</snippet></ROW><ROW><id>12410288</id><snippet>&gt;&gt;&gt; s = '123sa'
&gt;&gt;&gt; for i, c in enumerate(s):
...     if not c.isdigit():
...         break
... 
&gt;&gt;&gt; s[:i] + s[i:].capitalize()
'123Sa'
</snippet></ROW><ROW><id>12410845</id><snippet>pip install celery</snippet></ROW><ROW><id>12410845</id><snippet>$ python
&gt;&gt;&gt; from celery import Celery
&gt;&gt;&gt; Celery(broker='amqp://').send_task('tasks.add', (2, 2))
</snippet></ROW><ROW><id>12411109</id><snippet>pip install PIL</snippet></ROW><ROW><id>12411109</id><snippet>libjpeg</snippet></ROW><ROW><id>12411109</id><snippet>pip install PIllow</snippet></ROW><ROW><id>12411306</id><snippet>form_data</snippet></ROW><ROW><id>12411306</id><snippet>request.POST</snippet></ROW><ROW><id>12411306</id><snippet>form1 = OneForm(request.POST, prefix=OneForm.Meta.model._meta.module_name)</snippet></ROW><ROW><id>12411637</id><snippet>from bs4 import BeautifulSoup as bs
import requests
s = requests.session()
url = r'url_i_care_about'

def authenticate(s, url):
    headers = {'username': 'myuser', 'password': 'mypasss', '_Id': 'submit'}
    page=s.get(url)
    soup=bs(page.content)
    value=soup.form.find_all('input')[2]['value']
    headers.update({'value_name':value})
    auth = s.post(url, params=headers, cookies=page.cookies)
</snippet></ROW><ROW><id>12411695</id><snippet>import pipes # or shlex if python3
print sys.argv[0], ' '.join( [pipes.quote(s) for s in sys.argv[1:]] )
</snippet></ROW><ROW><id>12411700</id><snippet>range()</snippet></ROW><ROW><id>12411700</id><snippet>list2 = [range(list[-1], 2000000)]
</snippet></ROW><ROW><id>12411700</id><snippet>w</snippet></ROW><ROW><id>12411700</id><snippet>&gt;&gt;&gt; [range(5)]
[[0, 1, 2, 3, 4]]
&gt;&gt;&gt; range(5)
[0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>12411730</id><snippet>import pandas, numpy as np
# Create DataFrame "df" like yours...

df.apply(lambda x: np.all(x==0))
</snippet></ROW><ROW><id>12411785</id><snippet>float()</snippet></ROW><ROW><id>12411785</id><snippet>int()</snippet></ROW><ROW><id>12411785</id><snippet>input()</snippet></ROW><ROW><id>12411785</id><snippet>    gpb = float(input())
</snippet></ROW><ROW><id>12411785</id><snippet>0.81</snippet></ROW><ROW><id>12411785</id><snippet>int()</snippet></ROW><ROW><id>12411785</id><snippet>0</snippet></ROW><ROW><id>12411785</id><snippet>float()</snippet></ROW><ROW><id>12411852</id><snippet>Series</snippet></ROW><ROW><id>12411852</id><snippet>In [26]: df.groupby('x').apply(lambda x: 
             Series({'r': (x.y + x.z).sum() / x.z.sum(), 
                     's': (x.y + x.z ** 2).sum() / x.z.sum()}))
Out[26]: 
           r           s
x                       
a  -0.338590   -0.916635
b  66.655533  102.566146
</snippet></ROW><ROW><id>12411900</id><snippet>from collections import namedtuple
result = json.parse(data)
JsonData = namedtuple("JsonData", result.keys())
jsondata = JsonData(**result)
</snippet></ROW><ROW><id>12411978</id><snippet>\.+</snippet></ROW><ROW><id>12411978</id><snippet>[...]</snippet></ROW><ROW><id>12411978</id><snippet>\.{3}</snippet></ROW><ROW><id>12412308</id><snippet>s='Tomato4439, &gt;gi|224089052|ref|XP_002308615.1| predicted protein [Populus trichocarpa]'
</snippet></ROW><ROW><id>12412308</id><snippet>s = s.split()
[s[0].strip('0123456789,'), s[-2].replace('[',''), s[-1].replace(']','')]
</snippet></ROW><ROW><id>12412308</id><snippet>['Tomato', 'Populus', 'trichocarpa']
</snippet></ROW><ROW><id>12412522</id><snippet>from lxml import etree

tree = etree.fromstring("&lt;foo&gt; AAA &lt;bar&gt; BBB &lt;/bar&gt; XXX &lt;/foo&gt;")
foos = tree.xpath('//foo')

for foo in foos:
    for j in foo.iter():
        print j.tag, j.text, j.tail
</snippet></ROW><ROW><id>12412522</id><snippet>foo  AAA  None
bar  BBB   XXX 
</snippet></ROW><ROW><id>12412522</id><snippet>tail</snippet></ROW><ROW><id>12412522</id><snippet>tail</snippet></ROW><ROW><id>12412686</id><snippet>zip</snippet></ROW><ROW><id>12412686</id><snippet>In [1]: x = ((1, 2, 3), (4, 5, 6))

In [2]: [sum(y) / len(y) for y in zip(*x)]
Out[3]: [2, 3, 4]
</snippet></ROW><ROW><id>12412686</id><snippet>lambda</snippet></ROW><ROW><id>12412686</id><snippet>&gt;&gt;&gt; x = ((10, 10, 10), (40, 55, 66), (71, 82, 39), (1, 2, 3))
&gt;&gt;&gt; print tuple(map(lambda y: sum(y) / float(len(y)), zip(*x)))
(30.5, 37.25, 29.5)
</snippet></ROW><ROW><id>12412731</id><snippet>printit(sometext)</snippet></ROW><ROW><id>12412731</id><snippet>lambda: printit(sometext)
</snippet></ROW><ROW><id>12412839</id><snippet>list</snippet></ROW><ROW><id>12412839</id><snippet>def MyClass():
    def __init__(self):
        self.value1 = 1
        self.value2 = 2

    def get_list(self):
        return [self.value1, self.value2...]


&gt;&gt;&gt;print MyClass().get_list()
[1, 2...]
</snippet></ROW><ROW><id>12412839</id><snippet>print MyClass()</snippet></ROW><ROW><id>12412839</id><snippet>__repr__</snippet></ROW><ROW><id>12412839</id><snippet>class MyClass():        
    def __init__(self):
        self.value1 = 1
        self.value2 = 2

    def __repr__(self):
        return repr([self.value1, self.value2])
</snippet></ROW><ROW><id>12412839</id><snippet>__cmp__</snippet></ROW><ROW><id>12412839</id><snippet>class MyClass():
    def __cmp__(self, other):
        return cmp(self.get_list(), other.get_list())
</snippet></ROW><ROW><id>12412941</id><snippet>inFile = open(WORDLIST_FILENAME, 'r', 0)
</snippet></ROW><ROW><id>12412941</id><snippet>inFile = open(WORDLIST_FILENAME, 'r')
</snippet></ROW><ROW><id>12413053</id><snippet>&gt;&gt;&gt; import scipy.stats
&gt;&gt;&gt; scipy.stats.norm(0, 1)
&lt;scipy.stats.distributions.rv_frozen object at 0x928352c&gt;
&gt;&gt;&gt; scipy.stats.norm(0, 1).pdf(0)
0.3989422804014327
&gt;&gt;&gt; scipy.stats.norm(0, 1).cdf(0)
0.5
&gt;&gt;&gt; scipy.stats.norm(100, 12)
&lt;scipy.stats.distributions.rv_frozen object at 0x928352c&gt;
&gt;&gt;&gt; scipy.stats.norm(100, 12).pdf(98)
0.032786643008494994
&gt;&gt;&gt; scipy.stats.norm(100, 12).cdf(98)
0.43381616738909634
&gt;&gt;&gt; scipy.stats.norm(100, 12).cdf(100)
0.5
</snippet></ROW><ROW><id>12413053</id><snippet>scipy.stats.norm(mean=100, std=12)</snippet></ROW><ROW><id>12413053</id><snippet>scipy.stats.norm(100, 12)</snippet></ROW><ROW><id>12413053</id><snippet>scipy.stats.norm(loc=100, scale=12)</snippet></ROW><ROW><id>12413069</id><snippet>from tests import *</snippet></ROW><ROW><id>12413069</id><snippet>__init__.py</snippet></ROW><ROW><id>12413069</id><snippet>__init__.py</snippet></ROW><ROW><id>12413085</id><snippet>num = []
for c in string:
    if not c.isspace():
       num.append(int(c))
</snippet></ROW><ROW><id>12413347</id><snippet>parse_dates=[[0,1,2,3,4]]</snippet></ROW><ROW><id>12413493</id><snippet>attendees = [(a.profile, a.verified, a.from_user)
                 for a in Attendee.objects.filter(event=event)]
</snippet></ROW><ROW><id>12413493</id><snippet>{% for attendee, verified, from_user in attendees_list %}
</snippet></ROW><ROW><id>12413493</id><snippet>{% if verified %}</snippet></ROW><ROW><id>12413493</id><snippet>{% if from_user %}</snippet></ROW><ROW><id>12413493</id><snippet>attendees = Attendee.objects.filter(event=event)
</snippet></ROW><ROW><id>12413493</id><snippet>attendee.profile</snippet></ROW><ROW><id>12413493</id><snippet>attendee.verified</snippet></ROW><ROW><id>12413493</id><snippet>attendee.from_user</snippet></ROW><ROW><id>12413643</id><snippet>callback=jquery[long number]</snippet></ROW><ROW><id>12413837</id><snippet>.execute()</snippet></ROW><ROW><id>12413837</id><snippet>q = """
      INSERT INTO
        tblauto_tagged
        (
           propernoun_SRNO,
           tagger,
           train,
           propernoun,
           propernoun_ID
         ) VALUES (
           %d,
           %s,
           %s,
           %s,
           %s
          )
       """
cursor.execute(q,(j,str(iput),str(corpora),var_string_1,"AUX"))
</snippet></ROW><ROW><id>12413915</id><snippet>def toppings(bacon,lettuce,tomato,mayo):
    args = (bacon,lettuce,tomato,mayo)
    if any(args):
       condiments = ('bacon','lettuce','tomato','mayo')
       return "The food has "+" ".join(x for x,y in zip(condiments,args) if y) + '.'
    else:
       return "You must be full"
</snippet></ROW><ROW><id>12413915</id><snippet>def toppints(*args):
    if any(args):
       condiments = ('bacon','lettuce','tomato','mayo')
       return "The food has "+" ".join(x for x,y in zip(condiments,args) if y) + '.'
    else:
       return "You must be full"
</snippet></ROW><ROW><id>12413915</id><snippet>any</snippet></ROW><ROW><id>12413915</id><snippet>#straight from the docs
def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</snippet></ROW><ROW><id>12414390</id><snippet>BL = [function(x) for x in L]
</snippet></ROW><ROW><id>12414469</id><snippet>percentileofscore([1, 2, 3, 4], 3)
75.0
percentiles = [percentileofscore(data, i) for i in data]
</snippet></ROW><ROW><id>12414480</id><snippet>def attach_to_app(app_id, user=None, password=None, path=None, address=None):
    """
    attaches to app_id instance at address (default: &lt;app_id&gt;.appspot.com)

    if you don't specify a user/password you will be prompted for one

    if you don't specify an address it is assumed to be
    &lt;app_id&gt;.appspot.com

    path: path to remote_api handler, if not
    specified, will use /_ah/remote_api 
    """
    path = path or "/_ah/remote_api"

    if not address:
        address = "%s.appspot.com" % app_id

    init_remote_api(app_id, path, address, user=user, password=password)




def auth_func():
    """
    function to prompt user for credentials
    """
    email_address = raw_input("Email Address: ")
    password = getpass.getpass("Password: ")
    return email_address, password


def init_remote_api(app_id, path, address, user=None, password=None):
    """
    generic wrapper to initialize the remoteapi for a given path

    required
    =========
    app_id : the app_id of the application to connect to
    path: the path to the remote_api handler ex: /_ah/remote_api
    address: server to connect to ex: myapp.appspot.com

    if user and password are not specified you will be prompted on
    connection if needed
    """
    if user and password:
        def my_auth():
            return (user, password)
    else:
        my_auth = auth_func

    remote_api_stub.ConfigureRemoteApi(app_id, path, my_auth, address)
    remote_api_stub.MaybeInvokeAuthentication()
    os.environ["SERVER_SOFTWARE"] = "Development (remote_api)/1.0"

# example
APP_ID = "s~myapp" # when hrds was introduced it became necessary to specify app_id and address note the "s~..."
ADDRESS = "myapp.appspot.com"
attach_to_app(APP_ID, address=ADDRESS)
</snippet></ROW><ROW><id>12414540</id><snippet>restkit</snippet></ROW><ROW><id>12414602</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>12414814</id><snippet>dset</snippet></ROW><ROW><id>12414814</id><snippet>1</snippet></ROW><ROW><id>12414814</id><snippet>nonzero</snippet></ROW><ROW><id>12414814</id><snippet>a</snippet></ROW><ROW><id>12414814</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.random.seed(29)
&gt;&gt;&gt; d = numpy.random.randint(0, 2, size=(3,3,3))
&gt;&gt;&gt; d
array([[[1, 1, 0],
        [1, 0, 0],
        [0, 1, 1]],

       [[0, 1, 1],
        [1, 0, 0],
        [0, 1, 1]],

       [[1, 1, 0],
        [0, 1, 0],
        [0, 0, 1]]])
</snippet></ROW><ROW><id>12414814</id><snippet>&gt;&gt;&gt; d.nonzero()
(array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2]), array([0, 0, 1, 2, 2, 0, 0, 1, 2, 2, 0, 0, 1, 2]), array([0, 1, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 1, 2]))
&gt;&gt;&gt; z,x,y = d.nonzero()
</snippet></ROW><ROW><id>12414814</id><snippet>(d &gt; 3.4).nonzero()</snippet></ROW><ROW><id>12414814</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, -z, zdir='z', c= 'red')
plt.savefig("demo.png")
</snippet></ROW><ROW><id>12414915</id><snippet>dt = datetime.strptime(strdt, '%m/%d/%Y %H:%M:%S')
</snippet></ROW><ROW><id>12414925</id><snippet>from datetime import date
from shutil import copytree


currentDate = str(date.today())
currentDate = currentDate.replace("-", ".")
DESTINATION = "C:\\Users\\D34DLYHAX\\Desktop\\Backup " + currentDate

copytree("C:\\Users\\D34DLYHAX\\Pictures\\", DESTINATION + "\\My Pictures")
</snippet></ROW><ROW><id>12415047</id><snippet>new_word = ''
for ltr in compWord:
    if ltr == letter:
       new_word += letter
    else:
       new_word += ltr    
</snippet></ROW><ROW><id>12415273</id><snippet>def put(d, keys, item):
    if "." in keys:
        key, rest = keys.split(".", 1)
        if key not in d:
            d[key] = {}
        put(d[key], rest, item)
    else:
        d[keys] = item

def get(d, keys):
    if "." in keys:
        key, rest = keys.split(".", 1)
        return get(d[key], rest)
    else:
        return d[keys]
</snippet></ROW><ROW><id>12415445</id><snippet>x = "--x123-09827--x456-9908872--x789-267504"
p = "--x(?:[0-9]+)-(?:[0-9]+)"
print re.findall(p,x)
</snippet></ROW><ROW><id>12415598</id><snippet>any()</snippet></ROW><ROW><id>12415598</id><snippet>if any(x["a"] == 5 for x in b):
    # whatever
</snippet></ROW><ROW><id>12415598</id><snippet>b</snippet></ROW><ROW><id>12415598</id><snippet>from operator import itemgetter
from itertools import imap
if 5 in imap(itemgetter("a"), b):
    # whatever
</snippet></ROW><ROW><id>12415718</id><snippet>newbar</snippet></ROW><ROW><id>12415718</id><snippet>def newbar_factory(cls):
    def newbar(self):
        super(cls, self).bar()
        # Alternately, as Sven points out you could do
        # cls.bar(self)
        print "another world!"

    return newbar

# Use
fooNew = type('fooNew', (foo,), {'bar':newbar_factory(foo)})
</snippet></ROW><ROW><id>12415751</id><snippet>            ...
            try:
                testMethod()
            except KeyboardInterrupt:
                raise
            except ...
</snippet></ROW><ROW><id>12415751</id><snippet>run()</snippet></ROW><ROW><id>12416102</id><snippet>  value = '''{"cpa_type": "null", "...0:1347548413"}'''
  cursor.execute("INSERT INTO mytable (campaign_object) VALUES (%s)", (value,))
</snippet></ROW><ROW><id>12416238</id><snippet>propernoun_SRNO</snippet></ROW><ROW><id>12416238</id><snippet>AUTO_INCREMENT</snippet></ROW><ROW><id>12416238</id><snippet>REPLACE</snippet></ROW><ROW><id>12416238</id><snippet>INSERT</snippet></ROW><ROW><id>12416289</id><snippet>{{ content|safe }}
</snippet></ROW><ROW><id>12416403</id><snippet>nosetests-2.4</snippet></ROW><ROW><id>12416420</id><snippet>def __init__(self):
     env.roles = ['web']
</snippet></ROW><ROW><id>12416420</id><snippet>execute(foo, roles='web')
</snippet></ROW><ROW><id>12416438</id><snippet>collections.Counter</snippet></ROW><ROW><id>12416438</id><snippet>dict</snippet></ROW><ROW><id>12416438</id><snippet>import collections
days_occurred = collections.Counter()

for ...:
    t = trial()
    days_occurred[t['days']] += 1

# total is now sum(days_occurred.itervalues())

# you print the counts by iterating over the dict

for days, count in days_occurred.iteritems():
    print "%d: %d" % (days, count)
</snippet></ROW><ROW><id>12416484</id><snippet>$</snippet></ROW><ROW><id>12416484</id><snippet>$$</snippet></ROW><ROW><id>12416484</id><snippet>env.Command('foo.out', 'foo.in',
            'dateVar=$$(date +%F-%k-%M); '
            'sed -i "s/\.txt/\.txt?v=$$dateVar/g" example.properties');
</snippet></ROW><ROW><id>12416630</id><snippet>def argsort(seq):
    # http://stackoverflow.com/questions/3382352/3382369#3382369
    # http://stackoverflow.com/questions/3071415/3071441#3071441
    '''
    &gt;&gt;&gt; seq=[1,3,0,4,2]
    &gt;&gt;&gt; index=argsort(seq)
    [2, 0, 4, 1, 3]

    Given seq and the index, you can construct the sorted seq:
    &gt;&gt;&gt; sorted_seq=[seq[x] for x in index]
    &gt;&gt;&gt; assert sorted_seq == sorted(seq)

    Given the sorted seq and the index, you can reconstruct seq:
    &gt;&gt;&gt; assert [sorted_seq[x] for x in argsort(index)] == seq
    '''
    return sorted(range(len(seq)), key=seq.__getitem__)

def f(seq):
    idx = argsort(seq)
    return argsort(idx)

print(f([3,1,2]))
# [2, 0, 1]

print(f([3,1,2,2,3]))
# [3, 0, 1, 2, 4]
</snippet></ROW><ROW><id>12416630</id><snippet>def get_sorted_indices(l):
    sorted_positions = sorted(range(len(l)), key=l.__getitem__)
    result = [None for _ in range(len(l))]
    for new_index, old_index in enumerate(sorted_positions):
        result[old_index] = new_index
    return result
</snippet></ROW><ROW><id>12416630</id><snippet>In [83]: import random
In [98]: l = [random.randrange(100) for _ in range(10000)]
In [104]: timeit get_sorted_indices(l)
100 loops, best of 3: 4.73 ms per loop

In [105]: timeit f(l)
100 loops, best of 3: 6.64 ms per loop
</snippet></ROW><ROW><id>12416700</id><snippet>sample</snippet></ROW><ROW><id>12416700</id><snippet>sample</snippet></ROW><ROW><id>12416700</id><snippet>sample</snippet></ROW><ROW><id>12416844</id><snippet>xlrd.open_workbook(os.path.join(filepath,abc))
</snippet></ROW><ROW><id>12416989</id><snippet>&gt;&gt;&gt; '%.*f' % (1,.1)
'0.1'
&gt;&gt;&gt; '%.*f' % (2,.1)
'0.10'
&gt;&gt;&gt; '%.*f' % (3,.1)
'0.100'
&gt;&gt;&gt; '%*.*f' % (5,3,.1)
'0.100'
&gt;&gt;&gt; '%*.*f' % (5,2,.1)
' 0.10'
&gt;&gt;&gt; '%*.*f' % (5,1,.1)
'  0.1'
</snippet></ROW><ROW><id>12416996</id><snippet>raw_input</snippet></ROW><ROW><id>12416996</id><snippet>list</snippet></ROW><ROW><id>12416996</id><snippet>set &lt;client&gt;</snippet></ROW><ROW><id>12416996</id><snippet>send &lt;msg&gt;</snippet></ROW><ROW><id>12416996</id><snippet>import asyncore
import socket
import sys
from weakref import WeakValueDictionary


class Soc(asyncore.dispatcher):

    CMDS = {
        'list': 'cmd_list',
        'set': 'cmd_set_addr',
        'send': 'cmd_send',
    }

    def __init__(self, port=8000):
        asyncore.dispatcher.__init__(self)  

        self._conns = WeakValueDictionary()
        self._current = tuple()

        self.port = port
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind(('', port))
        self.listen(5)

        self.cmdline = Cmdline(self.handle_input, sys.stdin)
        self.cmdline.prompt()


    def writable(self):
        return False

    def handle_input(self, i):
        tokens = i.strip().split(None, 1)
        cmd = tokens[0]
        arg = ""
        if len(tokens) &gt; 1:
            arg = tokens[1]

        cbk = self.CMDS.get(cmd)
        if cbk:
            getattr(self, cbk)(arg)

        self.cmdline.prompt(self._addr_to_key(self._current))

    def handle_accept(self):
        channel, addr = self.accept()
        c = Conn(channel)
        self._conns[self._addr_to_key(addr)] = c

    def _addr_to_key(self, addr):
        return ':'.join(str(i) for i in addr)

    def cmd_list(self, *args):
        avail = '\n'.join(self._conns.iterkeys())
        print "\n%s\n" % avail

    def cmd_set_addr(self, addr_str):
        conn = self._conns.get(addr_str)
        if conn:
            self._current = conn.addr

    def cmd_send(self, msg):
        if self._current:
            addr_str = self._addr_to_key(self._current)
            conn = self._conns.get(addr_str)
            if conn:
                conn.buffer += msg         


class Cmdline(asyncore.file_dispatcher):
    def __init__(self, cbk, f):
        asyncore.file_dispatcher.__init__(self, f)
        self.cbk = cbk

    def prompt(self, msg=''):
        sys.stdout.write('%s &gt; ' % msg)
        sys.stdout.flush()        

    def handle_read(self):
        self.cbk(self.recv(1024))


class Conn(asyncore.dispatcher):

    def __init__(self, *args, **kwargs):
        asyncore.dispatcher.__init__(self, *args, **kwargs)  
        self.buffer = ""

    def writable(self):
        return len(self.buffer) &gt; 0

    def handle_write(self):
        self.send(self.buffer)
        self.buffer = ''

    def handle_read(self):
        data = self.recv(4096)
        print self.addr, '-', data


server = Soc(8000)
asyncore.loop()
</snippet></ROW><ROW><id>12416996</id><snippet>stdin</snippet></ROW><ROW><id>12416996</id><snippet># start the server
# start 2 clients
&gt; 
&gt; list

127.0.0.1:51738
127.0.0.1:51736

&gt; set 127.0.0.1:51736
127.0.0.1:51736 &gt;
127.0.0.1:51736 &gt; send foo

# client 127.0.0.1:51736 receives "foo"
</snippet></ROW><ROW><id>12417380</id><snippet>urlpatterns = patterns('',
    url(r'^$', my_decorator(ListView.as_view(model= Product))),
)
</snippet></ROW><ROW><id>12417380</id><snippet>urlpatterns = patterns('',
    url(r'^$', my_decorator(ListView.as_view(model= Product,
                                             template_name="custom_name.html"))),
)
</snippet></ROW><ROW><id>12417434</id><snippet>pandas</snippet></ROW><ROW><id>12417434</id><snippet>DataFrame/Series</snippet></ROW><ROW><id>12417434</id><snippet>read_table</snippet></ROW><ROW><id>12417434</id><snippet>float64</snippet></ROW><ROW><id>12417434</id><snippet>In [117]: df = pandas.read_table('gradStat_mmn.tdf')

In [118]: df.ix[0:10]
Out[118]:
    Subject Group Local Global  Attn  mean
0         1  DSub     S      S  Attn     0
1         1  DSub     S      S  Dist     0
2         1  DSub     D      S  Attn     0
3         1  DSub     D      S  Dist     0
4         1  DSub     S      D  Attn     0
5         1  DSub     S      D  Dist     0
6         1  DSub     D      D  Attn     0
7         1  DSub     D      D  Dist     0
8         2  ASub     S      S  Attn     0
9         2  ASub     S      S  Dist     0
10        2  ASub     D      S  Attn     0

In [119]: df['mean'].dtype
Out[119]: dtype('float64')

In [120]: df['mean'][0]
Out[120]: 3.2529000000000002e-22
</snippet></ROW><ROW><id>12417554</id><snippet>def justified(title, amount, titlewidth=20, amountwidth=10):
    return title.ljust(titlewidth) + " = $ " + ('%.2f' % amount).rjust(amountwidth)

print(justified('Parts', 12.45))
print(justified('Labor', 100))
print(justified('Tax', 2.5))
print(justified('Total', 114.95))
</snippet></ROW><ROW><id>12417671</id><snippet>def realse_list(a):
   del a[:]
   del a
</snippet></ROW><ROW><id>12417671</id><snippet>del a</snippet></ROW><ROW><id>12417671</id><snippet>del a[:]; del a</snippet></ROW><ROW><id>12417671</id><snippet>del a</snippet></ROW><ROW><id>12417671</id><snippet>del</snippet></ROW><ROW><id>12417735</id><snippet>f.close
</snippet></ROW><ROW><id>12417735</id><snippet>f.close()</snippet></ROW><ROW><id>12417735</id><snippet>with</snippet></ROW><ROW><id>12417735</id><snippet>with open('day_temps.txt', 'w') as handle:
    handle.write("10.3,10.1,9.9,9.9,9.8,9.6,9.0,10.1,10.2,11.1")
</snippet></ROW><ROW><id>12417735</id><snippet>with open('day_temps.txt', 'w') as handle:
    handle.write("10.3,10.1,9.9,9.9,9.8,9.6,9.0,10.1,10.2,11.1")

def get_stats(file_name):
    with open(file_name, 'r') as handle:
        numbers = map(float, handle.read().split(','))

    return min(numbers), max(numbers), sum(numbers) / len(numbers)

if __name__ == '__main__':
    stats = get_stats('day_temps.txt')
    print "({0:.5}, {1:.5}, {2:.5})".format(*stats)
</snippet></ROW><ROW><id>12417853</id><snippet>@celery.task
def do_costly_database_update(some_data):
    # do stuff
    pass

# And then in a view...
do_costly_database_update.delay(some_data)
</snippet></ROW><ROW><id>12417853</id><snippet>'every-night': {
    'task': 'tasks.do_costly_database_update',
    'schedule': crontab(hour=0, minute=0),
    'args': some_data,
},
</snippet></ROW><ROW><id>12417924</id><snippet>from pandas import *
from numpy.random import randn
rng = date_range('1/1/2011', periods=7200, freq='H')
ts = Series(randn(len(rng)), index=rng)
for key, data in ts.groupby([rng.year, rng.month]):
    print key, data.sum()
</snippet></ROW><ROW><id>12417932</id><snippet>{Name: Jim, Age: 24, inSubset: true}
{Name: Bill, Age: 38, inSubset: false}
{Name: Mary, Age: 55, inSubset: true}
</snippet></ROW><ROW><id>12417932</id><snippet>inSubset: true</snippet></ROW><ROW><id>12417932</id><snippet>from pymongo import Connection
from bson import ObjectId, Code

con = Connection(port=30000)  # add host/port here if different from default
db = con['test']    # or the database name you are using

# insert documents
db.master.insert({'_id': ObjectId(), 'Name': 'Jim', 'Age': 24})
db.master.insert({'_id': ObjectId(), 'Name': 'Bill', 'Age': 38})
db.master.insert({'_id': ObjectId(), 'Name': 'Mary', 'Age': 55})

db.subset.insert({'_id': ObjectId(), 'Name': 'Jim'})
db.subset.insert({'_id': ObjectId(), 'Name': 'Mary'})

# map function for master collection
mapf_master = Code(""" function () {
    emit(this.Name, {'age': this.Age, 'inSubset': false});
} """)

# map function for subset collection
mapf_subset = Code(""" function() {
    emit(this.Name, {'age': 0, 'inSubset': true});
} """)

# reduce function for both master and subset
reducef = Code(""" function(key, values) {
    var result = {'age': 0, 'inSubset': false};

    values.forEach( function(value) {
        result.age += value.age;
        result.inSubset = result.inSubset || value.inSubset;
    });

    return result;
} """)

# call map-reduce on master and subset (simulates a join)
db.master.map_reduce(mapf_master, reducef, out={'reduce': 'join'})
db.subset.map_reduce(mapf_subset, reducef, out={'reduce': 'join'})


# final map function for third map-reduce call
mapf_final = Code(""" function() {
    if (this.value.inSubset) {
        emit('total', {'age': this.value.age, 'count': 1});
    }
} """)

# final reduce function for third map-reduce call
reducef_final = Code(""" function(key, values) {
    var result = {'age': 0, 'count': 0};

    values.forEach( function(value) {
        result.age += value.age;
        result.count += value.count;
    });

    return result;
} """)


# final finalize function, calculates the average
finalizef_final = Code(""" function(key, value) {
    if (value.count &gt; 0) {
        value.averageAge = value.age / value.count;
    }
    return value;
} """)


# call final map-reduce 
db.join.map_reduce(mapf_final, reducef_final, finalize=finalizef_final, out={'merge': 'result'})
</snippet></ROW><ROW><id>12417932</id><snippet>&gt; db.result.find()
{ "_id" : "total", "value" : { "age" : 79, "count" : 2, "averageAge" : 39.5 } }
</snippet></ROW><ROW><id>12418401</id><snippet>RequestContext()</snippet></ROW><ROW><id>12418401</id><snippet>home</snippet></ROW><ROW><id>12418401</id><snippet>custom_render</snippet></ROW><ROW><id>12418401</id><snippet>{{MEDIA_URL}}</snippet></ROW><ROW><id>12418401</id><snippet>404</snippet></ROW><ROW><id>12418486</id><snippet>from multiprocessing import Process, Queue

def test_1(q):
    for i in range(10):
        q.put('test_1: ' + str(i))

def test_2(q):
    for i in range(10):
        q.put('test_2: ' + str(i))

q = Queue()
p1 = Process(target=test_1, args=(q,))
p2 = Process(target=test_2, args=(q,))
p1.start()
p2.start()

with open('test.txt', 'w') as file:
    while p1.is_alive() or p2.is_alive() or not q.empty():
        try:
            value = q.get(timeout = 1)
            file.write(value + '\n')
        except Exception as qe:
            print "Empty Queue or dead process"
p1.join()
p2.join()
</snippet></ROW><ROW><id>12418486</id><snippet>test.txt</snippet></ROW><ROW><id>12418486</id><snippet>test_1: 0
test_1: 1
test_1: 2
test_1: 3
test_1: 4
test_2: 0
test_1: 5
test_2: 1
test_1: 6
test_2: 2
test_1: 7
test_2: 3
test_1: 8
test_2: 4
test_1: 9
test_2: 5
test_2: 6
test_2: 7
test_2: 8
test_2: 9
</snippet></ROW><ROW><id>12418526</id><snippet>from realworld import common_patterns

learning = True
mistakes = []
fixed_mistakes = []
new_ideas = range(999)
while learning:
    try:
        it_works, new_mistakes = code_project(new_ideas, fixed_mistakes)
    except BossBreathingDownNeck:
        new_ideas = []
        it_works, new_mistakes = use_existing_frameworks(common_patterns, fixed_mistakes)
    mistakes.extend(new_mistakes)
    fixed_mistakes = evaluate_mistakes(mistakes)
    if it_works:
        break
</snippet></ROW><ROW><id>12419332</id><snippet>def convert(unplanned, planned, emerg):
    chain = (unplanned, planned, emerg)
    names = map(lambda lst: [d['service__name'] for d in lst], chain)
    sums = map(lambda lst: [d['service_sum'] for d in lst], chain)
    ds = [dict(zip(n, s)) for n,s in zip(names, sums)]
    unique_names = set([])
    unique_names = reduce(unique_names.union,names)
    results = []
    for n in unique_names:
        s = []
        for i in range(3):
            s.append(ds[i].get(n,0))
        results.append((n, tuple(s)))

    return results

print convert(unplanned, planned, emerg)
</snippet></ROW><ROW><id>12419332</id><snippet>[(u'Internet', (0, 0, 1)), (u'Peoplesoft', (2, 4, 0)), (u'Email', (4, 2, 0)), (u'Gopher', (0, 2, 0))]
</snippet></ROW><ROW><id>12419471</id><snippet>"\t"</snippet></ROW><ROW><id>12419471</id><snippet>assert os.path.isfile("D:\\Work\\Python Workspace\\Android_API_Parser\\test.txt")
assert os.path.isfile(r"D:\Work\Python Workspace\Android_API_Parser\test.txt")
assert os.path.isfile("D:/Work/Python Workspace/Android_API_Parser/test.txt")
assert os.path.isfile(os.path.join("D:", "Work", "Python Workspace",
                                   "Android_API_Parser", "test.txt"))
</snippet></ROW><ROW><id>12419471</id><snippet>os.path.exists</snippet></ROW><ROW><id>12419471</id><snippet>path = ["Work", "Python Workspace", "Android_API_Parser", "test.txt"]
f = 'D:'
for p in path:
  f = os.path.join(f, p)
  print(f)
  assert os.path.exists(f)
assert os.path.isfile(f)
</snippet></ROW><ROW><id>12420008</id><snippet>mc = pylibmc.Client(
    servers=[os.environ.get(MEMCACHE_SERVER_VAR)],
    username=os.environ.get(MEMCACHE_USER_VAR),
    password=os.environ.get(MEMCACHE_PASS_VAR),
    binary=True
    )
self.pool = pylibmc.ThreadMappedPool(mc)

#...

if (self.pool != None):
    with self.pool.reserve() as mc:
        mc.set(key, stored_data)

#...

if (self.pool != None):
    with self.pool.reserve() as mc:
        page = mc.get(key)
</snippet></ROW><ROW><id>12420008</id><snippet>self.pool.relinquish()</snippet></ROW><ROW><id>12420025</id><snippet>extended</snippet></ROW><ROW><id>12420025</id><snippet>p.add_argument("-e", dest='extended', action="store_true")
</snippet></ROW><ROW><id>12420025</id><snippet>$ python program.py -e -s 'string'
</snippet></ROW><ROW><id>12420025</id><snippet>import argparse

def funcExtended(line):
   return " ".join(line)

def funcBasic(line):
    return line.upper()

p = argparse.ArgumentParser(description="program.py")
p.add_argument("-e", "--extended", dest="func", action="store_const", const=funcExtended, default=funcBasic)
p.add_argument("-s", "--string")
p.add_argument("-f", "--infile")

args = p.parse_args()

def readlines(args):
    if args.infile:
        with open(args.infile,'r') as f:
            for line in f:
                yield line.rstrip("\n")
    elif args.string:
        yield args.string
    else:  #my future default option to grab strings from a database
        print 'This will soon work: extended'

for line in readlines(args):
    print 'Input: ', line
    output = args.func(line)
    print "Output: ", output
</snippet></ROW><ROW><id>12420192</id><snippet>def set_properties(instance, properties):
    for property in properties:
        setattr(instance, property, properties[property])
</snippet></ROW><ROW><id>12420192</id><snippet>def set_properties(instance, properties):
    for key,val in properties.iteritems():
        setattr(instance, key, val)
</snippet></ROW><ROW><id>12420192</id><snippet>set_properties(player, {'x': 1, 'y': 10, 'name': 'John'})
</snippet></ROW><ROW><id>12420265</id><snippet>dir</snippet></ROW><ROW><id>12420265</id><snippet>C:</snippet></ROW><ROW><id>12420265</id><snippet>D:</snippet></ROW><ROW><id>12420419</id><snippet>bjam ... cxxflags='-fPIC'</snippet></ROW><ROW><id>12420419</id><snippet>'-Wl,-rpath,$ORIGIN'</snippet></ROW><ROW><id>12420419</id><snippet>$ORIGIN</snippet></ROW><ROW><id>12420556</id><snippet>python</snippet></ROW><ROW><id>12420556</id><snippet>sqlite3.h</snippet></ROW><ROW><id>12420556</id><snippet>sqlite3_*</snippet></ROW><ROW><id>12420556</id><snippet>/usr/lib</snippet></ROW><ROW><id>12420556</id><snippet>.so</snippet></ROW><ROW><id>12420556</id><snippet>.la</snippet></ROW><ROW><id>12420556</id><snippet>.a</snippet></ROW><ROW><id>12420585</id><snippet>wc.pageturner</snippet></ROW><ROW><id>12420585</id><snippet>pdf2swf</snippet></ROW><ROW><id>12420585</id><snippet>swftools</snippet></ROW><ROW><id>12420806</id><snippet>foo, bar, baz = [random.choice(list) for i in range(3)]
</snippet></ROW><ROW><id>12420881</id><snippet>t =  HTML.Table(header_row = HTML.TableRow(['x', 'square(x)', 'cube(x)'], bgcolor='yellow'))</snippet></ROW><ROW><id>12420936</id><snippet>import os

def listfiles(folder):
    for root, folders, files in os.walk(folder):
        for filename in folders + files:
            yield os.path.join(root, filename)
</snippet></ROW><ROW><id>12420936</id><snippet>for filename in listfiles('/etc/'):
    print filename
</snippet></ROW><ROW><id>12421446</id><snippet>name</snippet></ROW><ROW><id>12421446</id><snippet>add_static_view()</snippet></ROW><ROW><id>12421446</id><snippet>name/*subpath</snippet></ROW><ROW><id>12421446</id><snippet>name</snippet></ROW><ROW><id>12421446</id><snippet>images/*subpath</snippet></ROW><ROW><id>12421446</id><snippet>images/misc/*subpath</snippet></ROW><ROW><id>12421446</id><snippet>images/misc/foo.png</snippet></ROW><ROW><id>12421446</id><snippet>images/*subpath</snippet></ROW><ROW><id>12421446</id><snippet>misc</snippet></ROW><ROW><id>12421446</id><snippet>'C:/Project/Images/'</snippet></ROW><ROW><id>12421446</id><snippet>images/misc</snippet></ROW><ROW><id>12421446</id><snippet>config.add_static_view('images/misc', 'C:/Path/To/Other/Images/')
config.add_static_view('images', 'C:/Project/Images/')
</snippet></ROW><ROW><id>12421446</id><snippet>images/misc/*subpath</snippet></ROW><ROW><id>12421446</id><snippet>images/misc/</snippet></ROW><ROW><id>12421681</id><snippet>sudo port select</snippet></ROW><ROW><id>12421681</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>12421681</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>12421681</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>12421681</id><snippet>$PATH</snippet></ROW><ROW><id>12421681</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>12421681</id><snippet>/usr/bin</snippet></ROW><ROW><id>12421681</id><snippet>python</snippet></ROW><ROW><id>12421820</id><snippet>s[n+1]/s[n] = constant
</snippet></ROW><ROW><id>12421820</id><snippet>r</snippet></ROW><ROW><id>12421820</id><snippet>ratio</snippet></ROW><ROW><id>12421820</id><snippet>n</snippet></ROW><ROW><id>12421820</id><snippet>1...size</snippet></ROW><ROW><id>12421820</id><snippet>1, r, r**2, r**3, ..., r**(n-1)=size
</snippet></ROW><ROW><id>12421820</id><snippet>r = size ** (1/(n-1))
</snippet></ROW><ROW><id>12421820</id><snippet>n=100</snippet></ROW><ROW><id>12421820</id><snippet>size=10000</snippet></ROW><ROW><id>12421820</id><snippet>r</snippet></ROW><ROW><id>12421820</id><snippet>~1.0974987654930561</snippet></ROW><ROW><id>12421820</id><snippet>1</snippet></ROW><ROW><id>12421820</id><snippet>1.0974987654930561</snippet></ROW><ROW><id>12421820</id><snippet>1</snippet></ROW><ROW><id>12421820</id><snippet>import numpy as np

def gen_log_space(limit, n):
    result = [1]
    if n&gt;1:  # just a check to avoid ZeroDivisionError
        ratio = (float(limit)/result[-1]) ** (1.0/(n-len(result)))
    while len(result)&lt;n:
        next_value = result[-1]*ratio
        if next_value - result[-1] &gt;= 1:
            # safe zone. next_value will be a different integer
            result.append(next_value)
        else:
            # problem! same integer. we need to find next_value by artificially incrementing previous value
            result.append(result[-1]+1)
            # recalculate the ratio so that the remaining values will scale correctly
            ratio = (float(limit)/result[-1]) ** (1.0/(n-len(result)))
    # round, re-adjust to 0 indexing (i.e. minus 1) and return np.uint64 array
    return np.array(map(lambda x: round(x)-1, result), dtype=np.uint64)
</snippet></ROW><ROW><id>12421820</id><snippet>In [157]: x = gen_log_space(10000, 100)

In [158]: x.size
Out[158]: 100

In [159]: len(set(x))
Out[159]: 100

In [160]: y = gen_log_space(2000, 50)

In [161]: y.size
Out[161]: 50

In [162]: len(set(y))
Out[162]: 50

In [163]: y
Out[163]:
array([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   11,
         13,   14,   17,   19,   22,   25,   29,   33,   38,   43,   49,
         56,   65,   74,   84,   96,  110,  125,  143,  164,  187,  213,
        243,  277,  316,  361,  412,  470,  536,  612,  698,  796,  908,
       1035, 1181, 1347, 1537, 1753, 1999], dtype=uint64)
</snippet></ROW><ROW><id>12421820</id><snippet>x = gen_log_scale(10000, 100)</snippet></ROW><ROW><id>12421946</id><snippet>python</snippet></ROW><ROW><id>12421946</id><snippet>python code.py
</snippet></ROW><ROW><id>12421972</id><snippet>MIMEBase</snippet></ROW><ROW><id>12421972</id><snippet>import os
from email import encoders
from email.mime.base import MIMEBase

with open(fileName,'r') as fp:
    attachment = MIMEBase('application','octet-stream')
    attachment.set_payload(fp.read())
    encoders.encode_base64(attachment)
    attachment.add_header('Content-Disposition','attachment',filename=os.path.split(fileName)[1])
    msg.attach(attachment)
</snippet></ROW><ROW><id>12421999</id><snippet># diable echo here
tn.write(telnetlib.IAC + "\n")
tn.write(telnetlib.DONT + " " + telnetlib.ECHO + "\n")
</snippet></ROW><ROW><id>12421999</id><snippet>IAC DONT ECHO</snippet></ROW><ROW><id>12421999</id><snippet>tn.write(telnetlib.IAC + telnetlib.DONT + telnetlib.ECHO)
</snippet></ROW><ROW><id>12421999</id><snippet>tn.write(telnetlib.IAC + telnetlib.WILL + telnetlib.ECHO)
</snippet></ROW><ROW><id>12421999</id><snippet>write</snippet></ROW><ROW><id>12421999</id><snippet>write</snippet></ROW><ROW><id>12421999</id><snippet>def write_raw_sequence(tn, seq):
    sock = tn.get_socket()
    if sock is not None:
        sock.send(seq)

write_raw_sequence(tn, telnetlib.IAC + telnetlib.WILL + telnetlib.ECHO)
</snippet></ROW><ROW><id>12422030</id><snippet>def factorize(n, primes):
    factors = []
    for p in primes:
        if p*p &gt; n: break
        i = 0
        while n % p == 0:
            n //= p
            i+=1
        if i &gt; 0:
            factors.append((p, i));
    if n &gt; 1: factors.append((n, 1))

    return factors
</snippet></ROW><ROW><id>12422030</id><snippet>def divisors(factors):
    div = [1]
    for (p, r) in factors:
        div = [d * p**e for d in div for e in range(r + 1)]
    return div
</snippet></ROW><ROW><id>12422893</id><snippet>from mercurial import commands, extensions, cmdutil, util

cfe = cmdutil.commitforceeditor

def commitforceeditor(repo, ctx, subs):
    text = cfe(repo, ctx, subs)

    # Do not commit unless the commit message differs from 
    # the one you specified on the command line
    if ctx.description() == text.strip():
        raise util.Abort("empty commit message")
    else:
        return text

def commit(originalcommit, ui, repo, *pats, **opts):
    if not opts["message"]:
        return originalcommit(ui, repo, *pats, **opts)
    else:
        opts["force_editor"] = True
        opts["message"] += " APPENDED"

        # monkey-patch
        cmdutil.commitforceeditor = commitforceeditor

        return originalcommit(ui, repo, *pats, **opts)

def uisetup(ui):
    extensions.wrapcommand(commands.table, 'commit', commit)  
</snippet></ROW><ROW><id>12423055</id><snippet>hours = [
    {'weekday': day, 'from_hour': '08:00', 'to_hour': '18:00'} 
    for day in range(1, 8) if not any(request.user.openinghours_set.filter(weekday=day))
    else
    {'weekday': day, 'from_hour': request.user.openinghours_set.filter(weekday=day).from_hour,
     'to_hour': request.user.openinghours_set.filter(weekday=day).to_hour}
]
</snippet></ROW><ROW><id>12423055</id><snippet>hours = []

openinghours_set = list(request.user.openinghours_set.all())
for day in range(1, 8):
    for openinghours in openinghours_set:
        if openinghours.weekday == day:
            hours.append({ fill from *openinghours* })
            break
    else:
        hours.append({ fill with default values })
</snippet></ROW><ROW><id>12423180</id><snippet>class BaseFoo(object):
    def __init__(self):
        raise NotImplementedError('No instances of BaseFoo please.')
    def _foo(self):
        return 'Foo.'
    def _bar(self):
        return 'Bar.'

class HiddenFoo(BaseFoo):
    def __init__(self): pass

class PublicFoo(BaseFoo):
    def __init__(self): pass
    foo = BaseFoo._foo
    bar = BaseFoo._bar

def try_foobar(instance):
    print 'Trying ' + instance.__class__.__name__
    try:
        print 'foo: ' + instance.foo
        print 'bar: ' + instance.bar
    except AttributeError, e:
        print e

foo_1 = HiddenFoo()
foo_2 = PublicFoo()
try_foobar(foo_1)
try_foobar(foo_2)
</snippet></ROW><ROW><id>12423180</id><snippet>PublicFoo.foo</snippet></ROW><ROW><id>12423180</id><snippet>BaseFoo.foo</snippet></ROW><ROW><id>12423190</id><snippet>KeepAlive On</snippet></ROW><ROW><id>12423190</id><snippet>MaxKeepAliveRequests 0</snippet></ROW><ROW><id>12423190</id><snippet>KeepAliveTimeout 5</snippet></ROW><ROW><id>12423302</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12423302</id><snippet>int</snippet></ROW><ROW><id>12423302</id><snippet>float</snippet></ROW><ROW><id>12423302</id><snippet>str</snippet></ROW><ROW><id>12423302</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import colander
&gt;&gt;&gt; colander.SchemaNode(colander.DateTime()).deserialize(datetime.datetime.now())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/private/tmp/colander/lib/python2.7/site-packages/colander/__init__.py", line 1598, in deserialize
    appstruct = self.typ.deserialize(self, cstruct)
  File "/private/tmp/colander/lib/python2.7/site-packages/colander/__init__.py", line 1265, in deserialize
    mapping={'val':cstruct, 'err':e}))
colander.Invalid: {'': u'Invalid date'}
&gt;&gt;&gt; colander.SchemaNode(colander.DateTime()).deserialize(datetime.datetime.now().isoformat())
datetime.datetime(2012, 9, 14, 13, 5, 37, 666630, tzinfo=&lt;colander.iso8601.Utc object at 0x109732d50&gt;)
</snippet></ROW><ROW><id>12423302</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>12423302</id><snippet>.isoformat()</snippet></ROW><ROW><id>12423302</id><snippet>datetime.datetime.utcnow()</snippet></ROW><ROW><id>12423302</id><snippet>&gt;&gt;&gt; colander.SchemaNode(colander.DateTime()).deserialize(datetime.datetime.utcnow().isoformat())
datetime.datetime(2012, 9, 14, 11, 23, 25, 695256, tzinfo=&lt;colander.iso8601.Utc object at 0x1005aaf10&gt;)
</snippet></ROW><ROW><id>12423302</id><snippet>    userdata['createdon'] = datetime.datetime.now()
</snippet></ROW><ROW><id>12423302</id><snippet>    userdata['createdon'] = datetime.datetime.utcnow().isoformat()
</snippet></ROW><ROW><id>12423364</id><snippet>TextView</snippet></ROW><ROW><id>12423364</id><snippet>{
    "name": "avg",
    "code": {
        "value": "import android&lt;br /&gt;droid = android.Android()&lt;br /&gt;droid.makeToast('Hello, Android!')",
        "type": "PythonScript"
    }
}
</snippet></ROW><ROW><id>12423364</id><snippet>String html_encoded_string = "import android&lt;br /&gt;droid = android.Android()
&lt;br /&gt;droid.makeToast('Hello, Android!')";
</snippet></ROW><ROW><id>12423364</id><snippet>yourTextView.setText(Html.fromHtml(html_encoded_string));
</snippet></ROW><ROW><id>12423404</id><snippet>def char_to_pos(char):
    from string import ascii_lowercase
    try:
        return ascii_lowercase.index(char) + 1
    except ValueError as e:
        pass # no match - do what's sensible here
</snippet></ROW><ROW><id>12423404</id><snippet>from string import ascii_lowercase
from itertools import count

lookup = dict(zip(ascii_lowercase, count(1)))
# or depending on taste
lookup = {letter: idx for idx, letter in enumerate(ascii_lowercase, start=1)}
</snippet></ROW><ROW><id>12423404</id><snippet>with open('test1.csv') as fin:
    csvin = csv.reader(fin)
    lookup = {row[0]: row for row in csvin}

to_find = 'x'
try:
    print '{} = {[4]}'.format(to_find, lookup[to_find])
except (KeyError, IndexError) as e:
    pass # KeyError = no lookup match, IndexError is that CSV file didn't have 5th column...
</snippet></ROW><ROW><id>12423447</id><snippet>from time import strptime

def get_date():
    while True:
        date = raw_input("Please enter a date in DD/MM/YYYY format: ")
        try:
            parsed = strptime(date, "%d/%m/%Y")
        except ValueError as e:
            print "Could not parse date: {0}".format(e)
        else:
            return parsed[:3]

year, month, day = get_date()
</snippet></ROW><ROW><id>12423447</id><snippet>29/2/2011</snippet></ROW><ROW><id>12423447</id><snippet>29/2/2012</snippet></ROW><ROW><id>12423555</id><snippet>dot(v0, cross(v1, v2)) / 6</snippet></ROW><ROW><id>12423555</id><snippet>v0</snippet></ROW><ROW><id>12423555</id><snippet>v1</snippet></ROW><ROW><id>12423555</id><snippet>v2</snippet></ROW><ROW><id>12423750</id><snippet>pet_function</snippet></ROW><ROW><id>12423750</id><snippet>cage</snippet></ROW><ROW><id>12423750</id><snippet>cage</snippet></ROW><ROW><id>12423750</id><snippet>get_petters</snippet></ROW><ROW><id>12423750</id><snippet>cage</snippet></ROW><ROW><id>12423750</id><snippet>get_petters</snippet></ROW><ROW><id>12423750</id><snippet>cage</snippet></ROW><ROW><id>12423750</id><snippet>'cow'</snippet></ROW><ROW><id>12423750</id><snippet>'dog'</snippet></ROW><ROW><id>12423750</id><snippet>'cat'</snippet></ROW><ROW><id>12423750</id><snippet>cage</snippet></ROW><ROW><id>12423750</id><snippet>'cat'</snippet></ROW><ROW><id>12423750</id><snippet>'cat'</snippet></ROW><ROW><id>12423750</id><snippet>functools.partial()</snippet></ROW><ROW><id>12423750</id><snippet>from functools import partial

def pet_function(cage=None):
    print "Mary pets the " + cage.animal + "."

yield (animal, partial(gotimes, partial(pet_function, cage=cage)))
</snippet></ROW><ROW><id>12423750</id><snippet>def scoped_cage(cage=None):
    def pet_function():
        print "Mary pets the " + cage.animal + "."
    return pet_function

yield (animal, partial(gotimes, scoped_cage(cage)))
</snippet></ROW><ROW><id>12423750</id><snippet>def pet_function(cage=cage):
    print "Mary pets the " + cage.animal + "."

yield (animal, partial(gotimes, pet_function))
</snippet></ROW><ROW><id>12423750</id><snippet>pet_function</snippet></ROW><ROW><id>12423750</id><snippet>scoped_cage</snippet></ROW><ROW><id>12423752</id><snippet>import unittest

import sqlalchemy as sa
from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base

from alembic.operations import Operations
from alembic.migration import MigrationContext

Base = declarative_base()
engine = sa.create_engine('mysql://root:root@localhost/jpic')
Session = orm.sessionmaker(bind=engine)
session = Session()

conn = engine.connect()
ctx = MigrationContext.configure(conn)
op = Operations(ctx)

for table in ('person_car', 'cars', 'houses', 'persons'):
    op.drop_table(table)


class PersonTest(unittest.TestCase):
    def test_000_create_table(self):

        self.__class__.Person = type('Person', (Base,), {'__tablename__': 'persons',
            'id': sa.Column(sa.Integer, primary_key=True)})

        self.__class__.Car = type('Car', (Base,), {'__tablename__': 'cars',
            'id': sa.Column(sa.Integer, primary_key=True)})

        self.__class__.House = type('House', (Base,), {'__tablename__': 'houses',
            'id': sa.Column(sa.Integer, primary_key=True)})

        Base.metadata.create_all(engine)

    def test_001_create_unicode_field(self):
        # create the column in the table - does not add it in the class
        field = sa.Column('unicode_field', sa.Unicode(50))
        op.add_column('persons', field)

        # create the column in the class - was not done above
        # a new instance to avoid conflicts
        field = sa.Column('unicode_field', sa.Unicode)
        self.__class__.Person.unicode_field = field

        subject = self.__class__.Person(unicode_field='hello unicode field')
        session.add(subject)

        subject = session.query(self.__class__.Person).first()
        self.assertEqual(subject.unicode_field, 'hello unicode field')

    def test_002_create_foreign_key(self):
        field = sa.Column('owner_id', sa.Integer, sa.ForeignKey('persons.id'))
        op.add_column('houses', field)

        # create fk
        op.create_foreign_key('fk_house_owner', 'houses', 'persons', ['owner_id'], ['id'])

        field = sa.Column('owner_id', sa.Integer, sa.ForeignKey('persons.id'))
        relation = orm.relationship('Person',
                backref=orm.backref('houses', lazy='dynamic'))
        self.__class__.House.owner_id = field
        self.__class__.House.owner = relation


        owner = session.query(self.__class__.Person).first()

        house = self.__class__.House()
        house.owner = owner
        session.add(house)

        house = session.query(self.__class__.House).first()

        self.assertEqual(house.owner, owner)
        # also test the reverse relation
        self.assertEqual(owner.houses.all(), [house])

    def test_003_create_many_to_many(self):
        association_table = sa.Table('person_car', Base.metadata,
            sa.Column('person_id', sa.Integer, sa.ForeignKey('persons.id')),
            sa.Column('car_id', sa.Integer, sa.ForeignKey('cars.id'))
        )

        Base.metadata.create_all(engine)

        self.__class__.Person.cars = orm.relationship('Car',
                secondary=association_table,
                backref=orm.backref('persons', lazy='dynamic'))

        user1 = session.query(self.__class__.Person).first()
        user2 = self.__class__.Person()
        session.add(user2)

        car1 = self.__class__.Car()
        session.add(car1)
        car2 = self.__class__.Car()
        session.add(car2)

        user1.cars.append(car1)
        car2.persons.append(user1)
        session.commit()

        fresh_user1 = session.query(self.__class__.Person).get(user1.id)
        self.assertEqual(len(fresh_user1.cars), 2)
        self.assertTrue(car1 in fresh_user1.cars)
        self.assertTrue(car2 in fresh_user1.cars)

        fresh_car1 = session.query(self.__class__.Car).get(car1.id)
        self.assertEqual(fresh_car1.persons.all(), [user1])
</snippet></ROW><ROW><id>12423780</id><snippet>filename = 'andrey.txt'
path = "media/backups/"
ftp.cwd(path)
ftp.retrbinary("RETR " + filename ,open(filename, 'a+').write)
</snippet></ROW><ROW><id>12423875</id><snippet>create_user</snippet></ROW><ROW><id>12423875</id><snippet>UserCreationForm</snippet></ROW><ROW><id>12423875</id><snippet>UserChangeForm</snippet></ROW><ROW><id>12423875</id><snippet>ModelAdmin</snippet></ROW><ROW><id>12423875</id><snippet>UserAdmin</snippet></ROW><ROW><id>12423949</id><snippet>request</snippet></ROW><ROW><id>12423949</id><snippet>urllib2.Request</snippet></ROW><ROW><id>12424013</id><snippet>array.__array_interface__</snippet></ROW><ROW><id>12424013</id><snippet>np.may_share_memory</snippet></ROW><ROW><id>12424013</id><snippet>np.byte_bounds</snippet></ROW><ROW><id>12424252</id><snippet>Axes3D</snippet></ROW><ROW><id>12424252</id><snippet>import numpy as np
from mayavi import mlab

X = np.array([0, 1, 0, 1, 0.75])
Y = np.array([0, 0, 1, 1, 0.75])
Z = np.array([1, 1, 1, 1, 2])

# Define the points in 3D space
# including color code based on Z coordinate.
pts = mlab.points3d(X, Y, Z, Z)

# Triangulate based on X, Y with Delaunay 2D algorithm.
# Save resulting triangulation.
mesh = mlab.pipeline.delaunay2d(pts)

# Remove the point representation from the plot
pts.remove()

# Draw a surface based on the triangulation
surf = mlab.pipeline.surface(mesh)

# Simple plot.
mlab.xlabel("x")
mlab.ylabel("y")
mlab.zlabel("z")
mlab.show()
</snippet></ROW><ROW><id>12424252</id><snippet>(0, 0) (0, 1) (1, 0) (1, 1)
</snippet></ROW><ROW><id>12424252</id><snippet>(0.75, 0.75)
</snippet></ROW><ROW><id>12424252</id><snippet>ipython -wthread script.py
</snippet></ROW><ROW><id>12424307</id><snippet>import numpy as np

a = np.arccos((a1 * a2) / (np.abs(a1) * np.abs(a2)))
</snippet></ROW><ROW><id>12424524</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>12424524</id><snippet>communicate</snippet></ROW><ROW><id>12424524</id><snippet>communicate</snippet></ROW><ROW><id>12424524</id><snippet>output</snippet></ROW><ROW><id>12424524</id><snippet>NameError</snippet></ROW><ROW><id>12424524</id><snippet> import subprocess
 sub = subprocess.Popen(["xinput", "test", "8"], stdout=subprocess.PIPE)
 lines = [] #Need someplace to store the data as it comes
 try:
    for line in sub.stdout: #read one line from standard out, store it in lines
        lines.append(line)
 except KeyboardInterrupt:  #keyboardInterrupt happened.  Stop process
    sub.terminate()
 finally:                   #Join our lines into a single buffer (like `communicate`)
    output = ''.join(lines)
    del lines               #clean `lines` out of our namespace (just because). 
</snippet></ROW><ROW><id>12424790</id><snippet>points = [map(int, x.split(',')) for x in s]
</snippet></ROW><ROW><id>12424790</id><snippet>points = [list(map(int, x.split(','))) for x in s]
</snippet></ROW><ROW><id>12424790</id><snippet>&gt;&gt;&gt; s = ['3,4','4,5','6,5','7,8']
&gt;&gt;&gt; points = [map(int, x.split(',')) for x in s]
&gt;&gt;&gt; print(points)
[[3, 4], [4, 5], [6, 5], [7, 8]]
</snippet></ROW><ROW><id>12424822</id><snippet>def get_part(lst,sep=';'):
    out = []
    for i in lst:
        if i == sep:
           yield out
           out = []
        else:
           out.append(i)
</snippet></ROW><ROW><id>12424822</id><snippet>merged = []
for l1,l2 in zip(get_part(list1),get_part(list2)):
    merged.extend(l1)
    merged.extend(l2)
    merged.append(';')
</snippet></ROW><ROW><id>12424822</id><snippet>list1 = [[16, 0, 0], [ 17, 0, 2], [ 0, 2, 1] ]
</snippet></ROW><ROW><id>12424822</id><snippet>merged = [ l1 + l2 for l1,l2 in zip(list1,list2) ]
</snippet></ROW><ROW><id>12424896</id><snippet>np.nan</snippet></ROW><ROW><id>12424896</id><snippet>x[x&gt;0] = new_value_for_pos
x[x&lt;0] = new_value_for_neg
</snippet></ROW><ROW><id>12424896</id><snippet>np.nans</snippet></ROW><ROW><id>12424896</id><snippet>x[np.isnan(x)] = something_not_nan
</snippet></ROW><ROW><id>12425081</id><snippet>resource</snippet></ROW><ROW><id>12425081</id><snippet>namespace</snippet></ROW><ROW><id>12425081</id><snippet>socket.io</snippet></ROW><ROW><id>12425081</id><snippet>socketio_manage()</snippet></ROW><ROW><id>12425081</id><snippet>socket</snippet></ROW><ROW><id>12425434</id><snippet>up</snippet></ROW><ROW><id>12425434</id><snippet>down</snippet></ROW><ROW><id>12425434</id><snippet>down = Room("Dungeon","It's dark down here, you can go up.")
</snippet></ROW><ROW><id>12425434</id><snippet>assert_equal(start.go('down').go('up'),start)
</snippet></ROW><ROW><id>12425434</id><snippet>start.go('down')</snippet></ROW><ROW><id>12425434</id><snippet>down Room</snippet></ROW><ROW><id>12425434</id><snippet>up</snippet></ROW><ROW><id>12425434</id><snippet>None</snippet></ROW><ROW><id>12425434</id><snippet>get()</snippet></ROW><ROW><id>12425434</id><snippet>start</snippet></ROW><ROW><id>12425434</id><snippet>None != start</snippet></ROW><ROW><id>12425434</id><snippet>down.add_paths({'up', start})
</snippet></ROW><ROW><id>12425503</id><snippet>sudo apt-get install eclipse
</snippet></ROW><ROW><id>12425503</id><snippet>sudo apt-get install monodevelop-python
</snippet></ROW><ROW><id>12426076</id><snippet>with open('yyy.mp4', 'wb') as f:
    f.write(open('xxx.mp4', 'rb').read())
</snippet></ROW><ROW><id>12426076</id><snippet>b</snippet></ROW><ROW><id>12426076</id><snippet>mp4</snippet></ROW><ROW><id>12426076</id><snippet>xxx.mp4</snippet></ROW><ROW><id>12426076</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>12426076</id><snippet>import shutil

shutil.copyfile('xxx.mp4', 'yyy.mp4') 
</snippet></ROW><ROW><id>12426435</id><snippet>POST</snippet></ROW><ROW><id>12426435</id><snippet>GET</snippet></ROW><ROW><id>12426435</id><snippet>POST</snippet></ROW><ROW><id>12426435</id><snippet>POST</snippet></ROW><ROW><id>12426435</id><snippet>objects</snippet></ROW><ROW><id>12426435</id><snippet>.filter()</snippet></ROW><ROW><id>12426435</id><snippet>name</snippet></ROW><ROW><id>12426435</id><snippet>f.cleaned_data['text']</snippet></ROW><ROW><id>12426435</id><snippet>specialPages</snippet></ROW><ROW><id>12426435</id><snippet>request</snippet></ROW><ROW><id>12426435</id><snippet>view_page</snippet></ROW><ROW><id>12426450</id><snippet>From nobody...</snippet></ROW><ROW><id>12426450</id><snippet>From</snippet></ROW><ROW><id>12426450</id><snippet>1 (RFC822 {1015}</snippet></ROW><ROW><id>12426450</id><snippet>Return-Path:</snippet></ROW><ROW><id>12426555</id><snippet>.. toctree::
   :maxdepth: 2

   intro
</snippet></ROW><ROW><id>12427000</id><snippet>ones</snippet></ROW><ROW><id>12427000</id><snippet>ones(N,1)</snippet></ROW><ROW><id>12427000</id><snippet>ones((N,1))</snippet></ROW><ROW><id>12427019</id><snippet>commands</snippet></ROW><ROW><id>12427019</id><snippet>subprocess</snippet></ROW><ROW><id>12427019</id><snippet>shell = True</snippet></ROW><ROW><id>12427019</id><snippet>p=subprocess.Popen("ls *00080",shell=True,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>12427019</id><snippet>commands</snippet></ROW><ROW><id>12427489</id><snippet>distinct()</snippet></ROW><ROW><id>12427489</id><snippet>Book</snippet></ROW><ROW><id>12427489</id><snippet>myBooks =Book.objects.filter(stores__greatStore=True).distinct()
</snippet></ROW><ROW><id>12427616</id><snippet>QApplication.instance.processEvents()</snippet></ROW><ROW><id>12427616</id><snippet>QLineEdit</snippet></ROW><ROW><id>12427616</id><snippet>textChanged()</snippet></ROW><ROW><id>12427616</id><snippet>textEdited()</snippet></ROW><ROW><id>12427616</id><snippet>textChanged()</snippet></ROW><ROW><id>12427616</id><snippet>updatedvalue()</snippet></ROW><ROW><id>12427616</id><snippet>setText()</snippet></ROW><ROW><id>12427616</id><snippet>QLineEdit</snippet></ROW><ROW><id>12427616</id><snippet>textEdited()</snippet></ROW><ROW><id>12427616</id><snippet>import sys
import time
from PyQt4.QtGui import *
from PyQt4.QtCore import *

class MyFrame(QWidget):
    def __init__(self):
        QWidget.__init__(self)

        self.le = QLineEdit(self)
        self.le.setGeometry(200,200,75,35)

        i = 0
        self.le.setText(str(i))

        self.connect(self.le, SIGNAL("textEdited(QString)"),self.updatedvalue)

    def updatedvalue(self):
        for i in range(1,5):
            self.le.setText(str(i))
            QApplication.instance().processEvents()
            print(i)
            time.sleep(1)

app=QApplication(sys.argv)
f=MyFrame()
f.show()
app.exec_()
</snippet></ROW><ROW><id>12427633</id><snippet>np.sort</snippet></ROW><ROW><id>12427633</id><snippet>c.sort()</snippet></ROW><ROW><id>12427633</id><snippet>np.unique</snippet></ROW><ROW><id>12427633</id><snippet>np.sort</snippet></ROW><ROW><id>12427633</id><snippet>np.unique</snippet></ROW><ROW><id>12427633</id><snippet>np.unique</snippet></ROW><ROW><id>12427633</id><snippet>flag = np.concatenate(([True], ar[1:] != ar[:-1]))</snippet></ROW><ROW><id>12427633</id><snippet>unique = ar[flag]</snippet></ROW><ROW><id>12427633</id><snippet>flag = np.ones(len(ar), dtype=bool)</snippet></ROW><ROW><id>12427633</id><snippet>np.not_equal(ar[1:], ar[:-1], out=flag[1:])</snippet></ROW><ROW><id>12427633</id><snippet>flag</snippet></ROW><ROW><id>12427633</id><snippet>.sort</snippet></ROW><ROW><id>12427633</id><snippet>def insort(a, b, kind='mergesort'):
    # took mergesort as it seemed a tiny bit faster for my sorted large array try.
    c = np.concatenate((a, b)) # we still need to do this unfortunatly.
    c.sort(kind=kind)
    flag = np.ones(len(c), dtype=bool)
    np.not_equal(c[1:], c[:-1], out=flag[1:])
    return c[flag]
</snippet></ROW><ROW><id>12427754</id><snippet>self._array_</snippet></ROW><ROW><id>12427754</id><snippet>row_width = (width + 7) // 8
</snippet></ROW><ROW><id>12427754</id><snippet>(x, y)</snippet></ROW><ROW><id>12427754</id><snippet>pixel_byte = self._array_[y * row_width + x // 8]
</snippet></ROW><ROW><id>12427754</id><snippet>b</snippet></ROW><ROW><id>12427754</id><snippet>i</snippet></ROW><ROW><id>12427754</id><snippet>(i &gt;&gt; b) &amp; 1</snippet></ROW><ROW><id>12427754</id><snippet>b</snippet></ROW><ROW><id>12427754</id><snippet>7 - x % 8</snippet></ROW><ROW><id>12427754</id><snippet>(pixel_byte &gt;&gt; (7 - x % 8)) &amp; 1
</snippet></ROW><ROW><id>12427754</id><snippet>isinstance</snippet></ROW><ROW><id>12427754</id><snippet>TypeError</snippet></ROW><ROW><id>12427754</id><snippet>x &gt; (self.width-1)</snippet></ROW><ROW><id>12427754</id><snippet>x &gt;= self.width</snippet></ROW><ROW><id>12427754</id><snippet>-1</snippet></ROW><ROW><id>12427754</id><snippet>&gt;&gt;&gt; range(10)[-7:-4]
[3, 4, 5]
</snippet></ROW><ROW><id>12427754</id><snippet>p</snippet></ROW><ROW><id>12427754</id><snippet>pprint</snippet></ROW><ROW><id>12427754</id><snippet>import re

class Pbm(object):
    """
    Load a Binary Portable Bitmap (PBM) files and provide access to
    its pixels.  See &lt;http://netpbm.sourceforge.net/doc/pbm.html&gt;
    """
    _pbm_re = re.compile(r'''
       (P4)                     # 1. Magic number
       (?:\s+|\#.*\n)*          # Whitespace or comments
       ([0-9]+)                 # 2. Width of image in pixels
       (?:\s+|\#.*\n)*          # Whitespace or comments
       ([0-9]+)                 # 3. Height of image in pixels
       (?:\#.*\n)*              # Possible comments
       \s                       # A single whitespace character
       ([\000-\377]*)           # 4. Raster image data
    ''', re.X)

    def __init__(self, f):
        m = self._pbm_re.match(f.read())
        if not m:
            raise IOError("Can't parse PBM file.")
        self.width = int(m.group(2))             # Width in pixels
        self.height = int(m.group(3))            # Height in pixels
        self.row = (self.width + 7) // 8         # Width in bytes
        self.raster = m.group(4)
        if len(self.raster) != self.height * self.row:
            raise IOError("Size of raster is {} but width x height = {}."
                          .format(len(self.raster), self.height * self.row))

    def getpixel(self, x, y):
        # Negative coordinates are treated as offsets from the end,
        # like Python's slice indexes.
        if x &lt; 0: x += self.width
        if y &lt; 0: y += self.height
        if x &lt; 0 or x &gt;= self.width or y &lt; 0 or y &gt;= self.height:
            raise ValueError("Coords ({},{}) are out of range (0,0)-({},{})."
                             .format(x, y, self.width - 1, self.height - 1))
        return (ord(self.raster[y * self.row + x // 8]) &gt;&gt; (7 - x % 8)) &amp; 1
</snippet></ROW><ROW><id>12427807</id><snippet>object</snippet></ROW><ROW><id>12428076</id><snippet>/OpenCV-2.4.2/samples/python2/lk_homography.py
</snippet></ROW><ROW><id>12428076</id><snippet>E =  K'^T F K
</snippet></ROW><ROW><id>12428087</id><snippet>sys.executable</snippet></ROW><ROW><id>12428087</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.executable
'/usr/bin/python'
</snippet></ROW><ROW><id>12428087</id><snippet>os.path.split()</snippet></ROW><ROW><id>12428087</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.split(sys.executable)
('/usr/bin', 'python')
</snippet></ROW><ROW><id>12428164</id><snippet>css</snippet></ROW><ROW><id>12428164</id><snippet>glob</snippet></ROW><ROW><id>12428164</id><snippet>my_files = glob.glob('path_to_the_directory/*.css')
</snippet></ROW><ROW><id>12428164</id><snippet>glob</snippet></ROW><ROW><id>12428164</id><snippet>glog.glob('My/dir/*/*.css')
</snippet></ROW><ROW><id>12428164</id><snippet>csspath = os.path.join(os.path.dirname(__file__), 'static', 'css')
csss = [os.path.join('app_assets', 'css', fname) for fname in os.listdir(csspath)]
app_css = Bundle(*csss, output='packed.css', filters='cssmin')
</snippet></ROW><ROW><id>12428319</id><snippet>case_wrapper_wrapper</snippet></ROW><ROW><id>12428319</id><snippet>case_wrapper</snippet></ROW><ROW><id>12428319</id><snippet>import inspect

def labelable_yielded_case(case):

    argspec = inspect.getargspec(case)
    if argspec.defaults is not None:
        defaults_list = [''] * (len(argspec.args) - len(argspec.defaults)) + argspec.defaults
    else:
        defaults_list = [''] * len(argspec.args)
    argument_defaults_list = zip(argspec.args, defaults_list)
    case_wrappers = []

    def add_description(wrapper_id, argument_dict):

        case_wrappers[wrapper_id].description = case.__doc__.format(**argument_dict)

    def case_factory(*factory_args, **factory_kwargs):

        def case_wrapper_wrapper():

            wrapper_id = len(case_wrappers)

            def case_wrapper(*args, **kwargs):

                argument_list = []
                for argument in argument_defaults_list:
                    argument_list.append(list(argument))
                for index, value in enumerate(args):
                    argument_list[index][1] = value
                argument_dict = dict(argument_list)
                argument_dict.update(kwargs)
                add_description(wrapper_id, argument_dict)
                return case(**argument_dict)

            case_wrappers.append(case_wrapper)
            case_name = case.__name__ + str(wrapper_id)
            case_wrapper.__name__ = case_name
            if factory_args:
                setattr(factory_args[0].__class__, case_name, case_wrapper)
                return getattr(factory_args[0].__class__, case_name)
            else:
                return case_wrapper

        return case_wrapper_wrapper()

    return case_factory


class TestTest(object):

    def __init__(self):

        self.data = None

    def setUp(self):

        self.data = (1,2,3)

    def test_all(self):

        for index, value in enumerate((1,2,3)):
            yield self.validate_equality(), index, value

    @labelable_yielded_case
    def validate_equality(self, index, value):
        '''element {index} equals {value}'''

        assert self.data[index] == value, 'expected %d got %d' % (value, self.data[index])
</snippet></ROW><ROW><id>12428592</id><snippet>&amp;sect</snippet></ROW><ROW><id>12428592</id><snippet>Â§</snippet></ROW><ROW><id>12428592</id><snippet>&amp;sect</snippet></ROW><ROW><id>12428592</id><snippet>teststring = "&amp;sect"
</snippet></ROW><ROW><id>12428592</id><snippet>cgi.escape()</snippet></ROW><ROW><id>12428592</id><snippet>teststring = cgi.escape("&amp;sect")
</snippet></ROW><ROW><id>12428612</id><snippet>"\n"</snippet></ROW><ROW><id>12428612</id><snippet>"\P"</snippet></ROW><ROW><id>12428612</id><snippet>"\V"</snippet></ROW><ROW><id>12428612</id><snippet>"\\"</snippet></ROW><ROW><id>12428612</id><snippet>"/"</snippet></ROW><ROW><id>12428612</id><snippet>os.path.join</snippet></ROW><ROW><id>12428612</id><snippet>import subprocess
import os

p = subprocess.Popen([os.path.join("C:/", "Program Files(x86)", "VideoLAN", "VLC", "vlc.exe"),os.path.join("C:/", "Users", "Kamilos", "Desktop", "TBT", "Tbt_S01E17.avi")])
</snippet></ROW><ROW><id>12428629</id><snippet>f = g</snippet></ROW><ROW><id>12428629</id><snippet>lambda x: f(x)</snippet></ROW><ROW><id>12428629</id><snippet>def compose(f, g):
    return lambda x: f(g(x))

square = lambda x:x*2
g = square
for i in xrange(4):
    g = compose(g, square)
</snippet></ROW><ROW><id>12428633</id><snippet>QWindowStateChangeEvent</snippet></ROW><ROW><id>12428633</id><snippet>event</snippet></ROW><ROW><id>12428633</id><snippet>class Window(QtGui.QWidget):
    def __init__(self):
        super(Window, self).__init__()

    def event(self, e):
        if e.type() == e.WindowStateChange:
            if self.windowState() &amp; QtCore.Qt.WindowMinimized:
                print "Minimized"
                # self.showMaximized()

        # call the super class event() no matter what
        return super(Window, self).event(e)
</snippet></ROW><ROW><id>12428633</id><snippet>class Watcher(QtCore.QObject):

    def eventFilter(self, obj, e):
        if obj.isWidgetType() and e.type() == e.WindowStateChange:
            if obj.windowState() &amp; QtCore.Qt.WindowMinimized:
                print "Minimized"
                # obj.showMaximized()

        return False


app = QtGui.QApplication([])

aWindow = QtGui.QWidget()
aWatcher = Watcher(aWindow)

aWindow.installEventFilter(aWatcher)

aWindow.show()
app.exec_()
</snippet></ROW><ROW><id>12428633</id><snippet>windowState</snippet></ROW><ROW><id>12428633</id><snippet>&amp;</snippet></ROW><ROW><id>12428633</id><snippet>==</snippet></ROW><ROW><id>12428633</id><snippet>aWindow = QtGui.QWidget()
flags = aWindow.windowFlags()
aWindow.setWindowFlags(flags ^ QtCore.Qt.WindowMinimizeButtonHint)
</snippet></ROW><ROW><id>12428663</id><snippet>sshChild.sendline(cmdrun + '\r')
</snippet></ROW><ROW><id>12428663</id><snippet>child.interact()
</snippet></ROW><ROW><id>12428663</id><snippet>sshChild.sendline(cmdrun + '\r')
child.expect(pexpect.EOF, timeout=20)
print child.before, child.after
</snippet></ROW><ROW><id>12428715</id><snippet>with_setup</snippet></ROW><ROW><id>12428715</id><snippet>from nose.tools import with_setup


def my_setup():
   ...


@with_setup(my_setup)
def test_one():
    ...


@with_setup(my_setup)
def test_two():
    ...
</snippet></ROW><ROW><id>12428715</id><snippet>def my_setup(self):
    #do the setup for the test-case

def apply_setup(setup_func):
    def wrap(cls):
        cls.setup = setup_func
        return cls
    return wrap


@apply_setup(my_setup)
class MyTestCaseOne(unittest.TestCase):
    def test_one(self):
        ...
    def test_two(self):
        ...


@apply_setup(my_setup)
class MyTestCaseTwo(unittest.TestCase):
    def test_one(self):
        ...
</snippet></ROW><ROW><id>12428715</id><snippet>class MyTestCaseOne(unittest.TestCase):
    setup = my_setup
</snippet></ROW><ROW><id>12428919</id><snippet>list.append</snippet></ROW><ROW><id>12428919</id><snippet>None</snippet></ROW><ROW><id>12428919</id><snippet>x = list_of_retweets.append(new_rtc)
print x
</snippet></ROW><ROW><id>12428919</id><snippet>lst.append(new_rtc)
print lst
</snippet></ROW><ROW><id>12429054</id><snippet>QTabBar</snippet></ROW><ROW><id>12429054</id><snippet>tabSizeHint</snippet></ROW><ROW><id>12429054</id><snippet>QTabBar</snippet></ROW><ROW><id>12429054</id><snippet>QTabWidget</snippet></ROW><ROW><id>12429054</id><snippet>QTabWidget.setTabBar</snippet></ROW><ROW><id>12429054</id><snippet>class TabBar(QTabBar):

   def tabSizeHint(self, index):
       width = QTabBar.tabSizeHint(self, index).width()
       return QSize(width, your_wanted_height)
</snippet></ROW><ROW><id>12429106</id><snippet>Python 2.4.3 (#1, Nov  3 2010, 12:52:40) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; if hostName != "*" and hostIP != "*":
...   with open(hostsTxt, 'a+') as f1, open(hostsCSV,'a+') as f2, open(hostNameLook, 'a+') as f3, open(webHostsTxt,'a+') as f4:
  File "&lt;stdin&gt;", line 2
    with open(hostsTxt, 'a+') as f1, open(hostsCSV,'a+') as f2, open(hostNameLook, 'a+') as f3, open(webHostsTxt,'a+') as f4:
            ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>12429106</id><snippet>Launching python -O
Python 2.7.2 (default, Apr 17 2012, 22:01:25) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; hostIP ='localhost'
&gt;&gt;&gt; hostName = 'abcd'
&gt;&gt;&gt; if hostName != "*" and hostIP != "*":
...   with open(hostsTxt, 'a+') as f1, open(hostsCSV,'a+') as f2, open(hostNameLook, 'a+') as f3, open(webHostsTxt,'a+') as f4:
...     print 'testing'
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
NameError: name 'hostsTxt' is not defined
</snippet></ROW><ROW><id>12429276</id><snippet>kill -INT $(cat /var/run/scrapyd.pid)
</snippet></ROW><ROW><id>12429276</id><snippet>/usr/bin/python /usr/local/bin/twistd -ny /usr/share/scrapyd/scrapyd.tac -u scrapy -g nogroup --pidfile /var/run/scrapyd.pid -l /var/log/scrapyd/scrapyd.log &amp;
</snippet></ROW><ROW><id>12429317</id><snippet>main_page</snippet></ROW><ROW><id>12429317</id><snippet>views.py</snippet></ROW><ROW><id>12429317</id><snippet>def main_page(request):
    # view stuff goes here
    return something
</snippet></ROW><ROW><id>12429566</id><snippet>pexpect</snippet></ROW><ROW><id>12429566</id><snippet>import pexpect

child = pexpect.spawn('myAPNscript.py')
child.expect('Enter PEM pass phrase:.*')
child.sendline('FOO')
</snippet></ROW><ROW><id>12429620</id><snippet>for k,v in list(d.items()):
</snippet></ROW><ROW><id>12429620</id><snippet>items = list(d.items())
for k,v in items:
    #do stuff that doesn't have a chance of destroying "items"
del items
</snippet></ROW><ROW><id>12429620</id><snippet>WeakKeyDictionary</snippet></ROW><ROW><id>12429620</id><snippet>WeakValueDictionary</snippet></ROW><ROW><id>12429620</id><snippet>.items()</snippet></ROW><ROW><id>12429620</id><snippet>for k,v in list(d.items()):
</snippet></ROW><ROW><id>12429620</id><snippet>list(d.items())</snippet></ROW><ROW><id>12429620</id><snippet>for</snippet></ROW><ROW><id>12429816</id><snippet>img_file.data</snippet></ROW><ROW><id>12429816</id><snippet>img_file.read()</snippet></ROW><ROW><id>12429816</id><snippet>img_file.read()</snippet></ROW><ROW><id>12429816</id><snippet>preload_content=False</snippet></ROW><ROW><id>12429816</id><snippet>img_file.read()</snippet></ROW><ROW><id>12429816</id><snippet>preload_content=False</snippet></ROW><ROW><id>12429816</id><snippet>img_file.data</snippet></ROW><ROW><id>12429816</id><snippet>conn.request(...)</snippet></ROW><ROW><id>12429816</id><snippet>conn.urlopen(...)</snippet></ROW><ROW><id>12429816</id><snippet>PoolManager</snippet></ROW><ROW><id>12429816</id><snippet>&gt;&gt;&gt; http = urllib3.PoolManager()
&gt;&gt;&gt; r = http.request('GET', 'http://www.solarspace.co.uk/PlanetPics/Neptune/NeptuneAlt1.jpg')
&gt;&gt;&gt; resized_image = Image.open(StringIO(r.data))
</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>memcpy()</snippet></ROW><ROW><id>12429831</id><snippet>strcpy()</snippet></ROW><ROW><id>12429831</id><snippet>strcat()</snippet></ROW><ROW><id>12429831</id><snippet>strcat()</snippet></ROW><ROW><id>12429831</id><snippet>strcpy()</snippet></ROW><ROW><id>12429831</id><snippet>&lt;string.h&gt;</snippet></ROW><ROW><id>12429831</id><snippet>&lt;stdio.h&gt;</snippet></ROW><ROW><id>12429831</id><snippet>&lt;string.h&gt;</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>strcpy()</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>L=L-13</snippet></ROW><ROW><id>12429831</id><snippet>sizeof(s)</snippet></ROW><ROW><id>12429831</id><snippet>L+1024-13</snippet></ROW><ROW><id>12429831</id><snippet>sizeof(int)==4</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>memcpy()</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>memcpy()</snippet></ROW><ROW><id>12429831</id><snippet>memmove/memcpy</snippet></ROW><ROW><id>12429831</id><snippet>strcpy()</snippet></ROW><ROW><id>12429831</id><snippet>strcat()</snippet></ROW><ROW><id>12429831</id><snippet>memcpy()</snippet></ROW><ROW><id>12429831</id><snippet>memmove()</snippet></ROW><ROW><id>12429831</id><snippet>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/time.h&gt;

#define L (100*1024)

char s[L+1024];
char c[2*L+1024];

static double time_diff( struct timeval et, struct timeval st )
{
    return 1e-6*((et.tv_sec - st.tv_sec)*1000000 + (et.tv_usec - st.tv_usec ));
}

static int foo(void)
{
    strcpy(c,s);
    strcat(c+L,s);
    return 0;
}

static int bar(void)
{
    memcpy(c + 0, s, L);
    memcpy(c + L, s, L);
    return 0;
}

static int baz(void)
{
    memmove(c + 0, s, L);
    memmove(c + L, s, L);
    return 0;
}

static void timer(void)
{
    struct timeval st;
    struct timeval et;
    int i;

    memset(s, '1', L);
    foo();

    gettimeofday(&amp;st,NULL);
    for( i = 0 ; i &lt; 10000; i++ )
        foo();
    gettimeofday(&amp;et,NULL);
    printf("foo: %f\n", time_diff(et,st));

    gettimeofday(&amp;st,NULL);
    for( i = 0 ; i &lt; 10000; i++ )
        bar();
    gettimeofday(&amp;et,NULL);
    printf("bar: %f\n", time_diff(et,st));

    gettimeofday(&amp;st,NULL);
    for( i = 0 ; i &lt; 10000; i++ )
        baz();
    gettimeofday(&amp;et,NULL);
    printf("baz: %f\n", time_diff(et,st));
}

int main(void)
{
    for (int i = 0; i &lt; 10; i++)
        timer();
    return 0;
}
</snippet></ROW><ROW><id>12429831</id><snippet>gcc -O3 -g -std=c99 -Wall -Wextra -Wmissing-prototypes -Wstrict-prototypes \
    -Wold-style-definition cp100k.c -o cp100k
</snippet></ROW><ROW><id>12429831</id><snippet>foo: 1.781506
bar: 0.155201
baz: 0.144501
foo: 1.276882
bar: 0.187883
baz: 0.191538
foo: 1.090962
bar: 0.179188
baz: 0.183671
foo: 1.898331
bar: 0.142374
baz: 0.140329
foo: 1.516326
bar: 0.146018
baz: 0.144458
foo: 1.245074
bar: 0.180004
baz: 0.181697
foo: 1.635782
bar: 0.136308
baz: 0.139375
foo: 1.542530
bar: 0.138344
baz: 0.136546
foo: 1.646373
bar: 0.185739
baz: 0.194672
foo: 1.284208
bar: 0.145161
baz: 0.205196
</snippet></ROW><ROW><id>12429831</id><snippet>&lt;string.h&gt;</snippet></ROW><ROW><id>12429831</id><snippet>&lt;stdio.h&gt;</snippet></ROW><ROW><id>12429831</id><snippet>foo: 1.432378
bar: 0.123245
baz: 0.120716
foo: 1.149614
bar: 0.186661
baz: 0.204024
foo: 1.529690
bar: 0.104873
baz: 0.105964
foo: 1.356727
bar: 0.150993
baz: 0.135393
foo: 0.945457
bar: 0.173606
baz: 0.170719
foo: 1.768005
bar: 0.136830
baz: 0.124262
foo: 1.457069
bar: 0.130019
baz: 0.126566
foo: 1.084092
bar: 0.173160
baz: 0.189040
foo: 1.742892
bar: 0.120824
baz: 0.124772
foo: 1.465636
bar: 0.136625
baz: 0.139923
</snippet></ROW><ROW><id>12429831</id><snippet>strcpy()</snippet></ROW><ROW><id>12429831</id><snippet>strcat()</snippet></ROW><ROW><id>12429831</id><snippet>foo: 1.694667 bar: 0.300041 baz: 0.301693
foo: 1.696361 bar: 0.305267 baz: 0.298918
foo: 1.708898 bar: 0.299006 baz: 0.299327
foo: 1.696909 bar: 0.299919 baz: 0.300499
foo: 1.696582 bar: 0.300021 baz: 0.299775
</snippet></ROW><ROW><id>12429831</id><snippet>foo: 1.185880 bar: 0.300287 baz: 0.300483
foo: 1.120522 bar: 0.299585 baz: 0.301144
foo: 1.122017 bar: 0.299476 baz: 0.299724
foo: 1.124904 bar: 0.301635 baz: 0.300230
foo: 1.120719 bar: 0.300118 baz: 0.299673
</snippet></ROW><ROW><id>12429831</id><snippet>-E</snippet></ROW><ROW><id>12429831</id><snippet>strcpy</snippet></ROW><ROW><id>12429831</id><snippet>((__builtin_object_size (c, 0) != (size_t) -1) ? __builtin___strcpy_chk (c, s, __builtin_object_size (c, 2 &gt; 1)) : __inline_strcpy_chk (c, s));
((__builtin_object_size (c+(100*1024), 0) != (size_t) -1) ? __builtin___strcat_chk (c+(100*1024), s, __builtin_object_size (c+(100*1024), 2 &gt; 1)) : __inline_strcat_chk (c+(100*1024), s));
</snippet></ROW><ROW><id>12429831</id><snippet>gdb</snippet></ROW><ROW><id>12429831</id><snippet>strcpy</snippet></ROW><ROW><id>12429831</id><snippet>strcpy()</snippet></ROW><ROW><id>12429831</id><snippet>-S</snippet></ROW><ROW><id>12429886</id><snippet>try...except</snippet></ROW><ROW><id>12429886</id><snippet>OperationalError</snippet></ROW><ROW><id>12429886</id><snippet>import sys
from PyQt4 import QtGui
import pymysql as lite


def dbconnect():
    global con
    config = {
        'host' : '127.0.0.1',
        'user' = 'ivica',
        'passwd' = 'pass',
        'db' = 'baza',
        'charset' = 'utf8'
        }
    try:
        if os.name == 'nt':
            con = lite.connect(**config)
        else:
            con = lite.connect(unix_socket = '/run/mysqld/mysqld.sock', **config))
    except lite.err.OperationalError as err:
        msgBox = QtGui.QMessageBox()
        msgBox.setText(str(err))
        msgBox.exec_()

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    con = None
    dbconnect()
    if con is not None:
        sys.exit(app.exec_())
</snippet></ROW><ROW><id>12429886</id><snippet>with dbconnect():
    ...
</snippet></ROW><ROW><id>12429886</id><snippet>con</snippet></ROW><ROW><id>12429886</id><snippet>with</snippet></ROW><ROW><id>12429962</id><snippet>close()</snippet></ROW><ROW><id>12429962</id><snippet>def clean(self):
    """
    Clean dead weak references from the dictionary
    """

    mapping = self._mapping
    for key, val in list(mapping.items()):  # iterate over list now        
        if key() is None:
            del mapping[key]
            val.remove(key)
</snippet></ROW><ROW><id>12429962</id><snippet>matplotlib</snippet></ROW><ROW><id>12429962</id><snippet>def clean(self):
    """
    Clean dead weak references from the dictionary
    """
    mapping = self._mapping
    to_drop = [key for key in mapping if key() is None]
    for key in to_drop:
        val = mapping.pop(key)
        val.remove(key)
</snippet></ROW><ROW><id>12429976</id><snippet>import json
def convert(adj_lst):
    links = []
    for i,adj in enumerate(adj_lst):
        links.extend( [{'source':i,'target':n} for n in adj] )
    nodes = [{"name":"Zone%d" % i, "group":i} for i in xrange(len(adj_lst))]
    return {"nodes":nodes, "links":links}

adj_list = [[1, 3, 4, 5, 6, 7, 8, 9], [0, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 7, 9], [0, 1, 2, 4, 5, 6, 7, 9], [0, 1, 2, 3, 6, 7, 8], [0, 1, 3, 6, 7, 8, 9], [0, 1, 3, 4, 5, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 8, 9], [0, 1, 4, 5, 6, 7, 9], [0, 1, 2, 3, 5, 6, 7, 8]]
print json.dumps(convert(adj_list), indent=2)
</snippet></ROW><ROW><id>12430314</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>12430314</id><snippet>from datetime import datetime
dt = datetime.strptime(datestring, '%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>12430314</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12430314</id><snippet>.year</snippet></ROW><ROW><id>12430314</id><snippet>.month</snippet></ROW><ROW><id>12430314</id><snippet>.day</snippet></ROW><ROW><id>12430314</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datestring = "2008-12-12 19:21:10"
&gt;&gt;&gt; dt = datetime.strptime(datestring, '%Y-%m-%d %H:%M:%S')
&gt;&gt;&gt; print dt.year, dt.month, dt.day
2008 12 12
</snippet></ROW><ROW><id>12430508</id><snippet>decode</snippet></ROW><ROW><id>12430508</id><snippet>n = int(mac.replace(':', ''), 16)
</snippet></ROW><ROW><id>12430508</id><snippet>'%012x'%n</snippet></ROW><ROW><id>12430508</id><snippet>bin(n)</snippet></ROW><ROW><id>12430562</id><snippet>i</snippet></ROW><ROW><id>12430562</id><snippet>step[0, i]</snippet></ROW><ROW><id>12430562</id><snippet>fnames[i]</snippet></ROW><ROW><id>12430562</id><snippet>i</snippet></ROW><ROW><id>12430562</id><snippet>i</snippet></ROW><ROW><id>12430562</id><snippet>NX - 1</snippet></ROW><ROW><id>12430562</id><snippet>step</snippet></ROW><ROW><id>12430675</id><snippet>f = 4.10045710008e+12
i = int(f)
</snippet></ROW><ROW><id>12430854</id><snippet>M2M</snippet></ROW><ROW><id>12430854</id><snippet>Tag</snippet></ROW><ROW><id>12430854</id><snippet>albums</snippet></ROW><ROW><id>12430854</id><snippet>Album</snippet></ROW><ROW><id>12430854</id><snippet>tags = models.ManyToManyField(Tag, blank=True)
albums = models.ManyToManyField(Tag, blank = True,)
</snippet></ROW><ROW><id>12430854</id><snippet>tags = models.ManyToManyField(Tag, blank=True, related_name="img_tags")
albums = models.ManyToManyField(Album, blank = True, related_name="img_albums")
</snippet></ROW><ROW><id>12430948</id><snippet>==</snippet></ROW><ROW><id>12430948</id><snippet>&gt;=</snippet></ROW><ROW><id>12430948</id><snippet>&gt;</snippet></ROW><ROW><id>12431651</id><snippet>^(?=[^a]*a(?:[^a]*a[^a]*a)*[^a]*$)(?=[^b]*b(?:[^b]*b[^b]*b)*[^b]*$)(.*)$
</snippet></ROW><ROW><id>12431651</id><snippet>\n</snippet></ROW><ROW><id>12431651</id><snippet>(.*)$</snippet></ROW><ROW><id>12431651</id><snippet>(?=  [^a]*a  (?:[^a]*a[^a]*a)  *  [^a]*$  )
|    |       |                 |  |
|    |       |                 |  Only accept non-'a's to the end.
|    |       |                 |
|    |       |                 Zero or more of these pairs of 'a's.
|    |       |
|    |       Strictly a pair of 'a's.
|    |
|    Find the first 'a'.
|
Use a lookahead to assert multiple conditions.
</snippet></ROW><ROW><id>12431713</id><snippet>c = self.b[self.k - 1]
if c=='a': ...
elif c=='c': ...
</snippet></ROW><ROW><id>12431713</id><snippet>c = self.b[self.k - 1]
if c=='a': ...
elif c=='c': ...
</snippet></ROW><ROW><id>12431824</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>12431824</id><snippet>MAKE FUNCTION</snippet></ROW><ROW><id>12431824</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     def bar():
...         pass
...     print 'boo!'
... 
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_CONST               1 (&lt;code object bar at 0x106c447b0, file "&lt;stdin&gt;", line 2&gt;)
              3 MAKE_FUNCTION            0
              6 STORE_FAST               0 (bar)

  4           9 LOAD_CONST               2 ('boo!')
             12 PRINT_ITEM          
             13 PRINT_NEWLINE       
             14 LOAD_CONST               0 (None)
             17 RETURN_VALUE        
</snippet></ROW><ROW><id>12431824</id><snippet>MAKE_FUNCTION</snippet></ROW><ROW><id>12431824</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; def nonlocal(): pass
... 
&gt;&gt;&gt; def callnonlocal(): nonlocal()
... 
&gt;&gt;&gt; def calllocal():
...     def localf(): pass
...     localf()
... 
&gt;&gt;&gt; timeit.timeit('callnonlocal()', 'from __main__ import callnonlocal')
0.39106082916259766
&gt;&gt;&gt; timeit.timeit('calllocal()', 'from __main__ import calllocal')
0.4878239631652832
</snippet></ROW><ROW><id>12431824</id><snippet>MAKE_FUNCTION</snippet></ROW><ROW><id>12431859</id><snippet>n</snippet></ROW><ROW><id>12431859</id><snippet>range(2, n/2 + 1)</snippet></ROW><ROW><id>12431859</id><snippet>if sum(factors) == n - 1</snippet></ROW><ROW><id>12431859</id><snippet>range(2, 10001)</snippet></ROW><ROW><id>12431859</id><snippet>n</snippet></ROW><ROW><id>12431859</id><snippet>for n in range(2, 10001):
    if sum(i for i in range(2, n/2 + 1) if n % i == 0) == n - 1:
        print n
</snippet></ROW><ROW><id>12431892</id><snippet>import csv
import itertools

class CsvWriterPipeline(object):

def __init__(self):
    self.csvwriter = csv.writer(open('items.csv', 'wb'), delimiter=',')

def process_item(self, item, ampa):
    for i,n,k in itertools.izip(item['nome'],item['phone'],item['email']):  
        self.csvwriter.writerow([i,n,k])    
    return item
</snippet></ROW><ROW><id>12432006</id><snippet> $ ./rdb2
 RPDB2 - The Remote Python Debugger, version RPDB_2_4_8,
 Copyright (C) 2005-2009 Nir Aides.
 Type "help", "copyright", "license", "credits" for more information.

 &gt; password "debugger"
 Password is set to: "debugger"

 &gt; attach
 Connecting to 'localhost'...
 Scripts to debug on 'localhost':

    pid    name
 --------------------------
    7772   myscript.py

 &gt; attach 7772
 &gt; *** Attaching to debuggee...
 &gt; *** Debug Channel is encrypted.
 &gt; *** Successfully attached to
 &gt; *** 'myscript.py'.
 &gt; *** Debuggee is waiting at break point for further commands.

 &gt; go
</snippet></ROW><ROW><id>12432159</id><snippet>numpy</snippet></ROW><ROW><id>12432159</id><snippet>python my_program.py
</snippet></ROW><ROW><id>12432159</id><snippet>path/to/where/you/installed/pypy my_program.py
</snippet></ROW><ROW><id>12432195</id><snippet>composition(f, g)</snippet></ROW><ROW><id>12432195</id><snippet>f</snippet></ROW><ROW><id>12432195</id><snippet>g</snippet></ROW><ROW><id>12432195</id><snippet>g</snippet></ROW><ROW><id>12432195</id><snippet>f</snippet></ROW><ROW><id>12432195</id><snippet>f</snippet></ROW><ROW><id>12432195</id><snippet>f</snippet></ROW><ROW><id>12432317</id><snippet>sys</snippet></ROW><ROW><id>12432317</id><snippet>argv</snippet></ROW><ROW><id>12432317</id><snippet>import sys
logfile = open("logfile.txt", "w")
logfile.write(" ".join(sys.argv))
logfile.close()
</snippet></ROW><ROW><id>12432693</id><snippet>strip('%')</snippet></ROW><ROW><id>12432693</id><snippet>In [9]: "99.5%".strip('%')
Out[9]: '99.5'               #convert this to float using float() and divide by 100


In [10]: def p2f(x):
    return float(x.strip('%'))/100
   ....: 

In [12]: p2f("99%")
Out[12]: 0.98999999999999999

In [13]: p2f("99.5%")
Out[13]: 0.995
</snippet></ROW><ROW><id>12432747</id><snippet>PyEval_RestoreThread</snippet></ROW><ROW><id>12432747</id><snippet>PyEval_SaveThread</snippet></ROW><ROW><id>12432747</id><snippet>Py_BEGIN_ALLOW_THREADS</snippet></ROW><ROW><id>12432747</id><snippet>Py_END_ALLOW_THREADS</snippet></ROW><ROW><id>12432747</id><snippet>Ensure</snippet></ROW><ROW><id>12432747</id><snippet>Release</snippet></ROW><ROW><id>12432841</id><snippet>xmmsclient.XMMS("tut1")
</snippet></ROW><ROW><id>12432894</id><snippet>find</snippet></ROW><ROW><id>12432894</id><snippet>"$regex"</snippet></ROW><ROW><id>12432894</id><snippet>db.your_collection.find({"description": {"$regex": "&lt;insert regex here&gt;"}})</snippet></ROW><ROW><id>12432992</id><snippet>re.match</snippet></ROW><ROW><id>12432992</id><snippet>re.search</snippet></ROW><ROW><id>12433042</id><snippet>rename</snippet></ROW><ROW><id>12433108</id><snippet>signal</snippet></ROW><ROW><id>12433108</id><snippet> def __init__(self):
     signal.signal(signal.SIGINT, self.just_kill_me)

 def just_kill_me(self, sig, frame):
     self.stopped = True
     for t in self.threads:
         t.join()
</snippet></ROW><ROW><id>12433108</id><snippet>while not parent.stopped:
    do_some_maintenance_work
</snippet></ROW><ROW><id>12433218</id><snippet>from mongoengine import Document
from multilingual_field.fields import MultilingualStringField

class MyDoc(Document):
    name = MultilingualStringField()

doc = MyDoc(name={'en': 'Hermitage', 'ru': u'Ð­ÑÐ¼Ð¸ÑÐ°Ð¶'})
doc.translate('en')
doc.name  #  'Hermitage'
doc.translate('ru')
doc.name  #  u'Ð­ÑÐ¼Ð¸ÑÐ°Ð¶'
doc.translate('en')
doc.name = 'The Hermitage'
doc.name.translations  # {'en_US.ISO8859-1': 'The Hermitage', 'ru_RU.UTF-8': u'Ð­ÑÐ¼Ð¸ÑÐ°Ð¶'}
</snippet></ROW><ROW><id>12433218</id><snippet>{
    "_cls" : "MyDoc",
    "_id" : ObjectId("5053ad4e3116b063001f6980"),
    "_types" : [
        "MyDoc"
    ],
    "name" : [
        {
            "lang" : "ru_RU.UTF-8",
            "value" : "Ð­ÑÐ¼Ð¸ÑÐ°Ð¶"
        },
        {
            "lang" : "en_US.ISO8859-1",
            "value" : "The Hermitage"
        }
    ]
}
</snippet></ROW><ROW><id>12433218</id><snippet>(value, lang)</snippet></ROW><ROW><id>12433328</id><snippet>dateutil</snippet></ROW><ROW><id>12433328</id><snippet>datetime</snippet></ROW><ROW><id>12433328</id><snippet>dateutil</snippet></ROW><ROW><id>12433348</id><snippet>$ mkvirtualenv --system-site-packages env1
</snippet></ROW><ROW><id>12433363</id><snippet>str</snippet></ROW><ROW><id>12433363</id><snippet>bytes</snippet></ROW><ROW><id>12433363</id><snippet>str</snippet></ROW><ROW><id>12433363</id><snippet>unicode</snippet></ROW><ROW><id>12433363</id><snippet>str</snippet></ROW><ROW><id>12433363</id><snippet>bytes</snippet></ROW><ROW><id>12433363</id><snippet>unicode</snippet></ROW><ROW><id>12433363</id><snippet>str</snippet></ROW><ROW><id>12433363</id><snippet>dataReceived</snippet></ROW><ROW><id>12433363</id><snippet>bytes</snippet></ROW><ROW><id>12433363</id><snippet>bytes</snippet></ROW><ROW><id>12433363</id><snippet>bytes</snippet></ROW><ROW><id>12433363</id><snippet>len(data)</snippet></ROW><ROW><id>12433569</id><snippet>reload()</snippet></ROW><ROW><id>12433588</id><snippet>def makeCounter(seq):
    if hasOnlyHashables(seq):
        return OptimizedCounter(seq)
    else:
        return MyCounter(seq)
</snippet></ROW><ROW><id>12433600</id><snippet>__init__</snippet></ROW><ROW><id>12433600</id><snippet>class TabBar(QtGui.QTabBar):
    def __init__(self, parent=None):
        super(TabBar, self).__init__(parent)

        self.setStyleSheet('font-size: 18pt; font-family: Courier;')
</snippet></ROW><ROW><id>12433600</id><snippet>QTabBar</snippet></ROW><ROW><id>12433600</id><snippet>QTabWidget</snippet></ROW><ROW><id>12433600</id><snippet>QTabBar</snippet></ROW><ROW><id>12433600</id><snippet>myTabWidget.setStyleSheet('QTabBar { font-size: 18pt; font-family: Courier; }')
</snippet></ROW><ROW><id>12433606</id><snippet>from suds.transport.http import HttpTransport as SudsHttpTransport 


class WellBehavedHttpTransport(SudsHttpTransport): 
    """HttpTransport which properly obeys the ``*_proxy`` environment variables.""" 

    def u2handlers(self): 
        """Return a list of specific handlers to add. 

        The urllib2 logic regarding ``build_opener(*handlers)`` is: 

        - It has a list of default handlers to use 

        - If a subclass or an instance of one of those default handlers is given 
            in ``*handlers``, it overrides the default one. 

        Suds uses a custom {'protocol': 'proxy'} mapping in self.proxy, and adds 
        a ProxyHandler(self.proxy) to that list of handlers. 
        This overrides the default behaviour of urllib2, which would otherwise 
        use the system configuration (environment variables on Linux, System 
        Configuration on Mac OS, ...) to determine which proxies to use for 
        the current protocol, and when not to use a proxy (no_proxy). 

        Thus, passing an empty list will use the default ProxyHandler which 
        behaves correctly. 
        """ 
        return []

client = suds.client.Client(my_wsdl, transport=WellBehavedHttpTransport())
</snippet></ROW><ROW><id>12433705</id><snippet>l = L[1::2]
</snippet></ROW><ROW><id>12433705</id><snippet>0</snippet></ROW><ROW><id>12433705</id><snippet>0</snippet></ROW><ROW><id>12433705</id><snippet>1</snippet></ROW><ROW><id>12433705</id><snippet>1, 3, 5
</snippet></ROW><ROW><id>12433705</id><snippet>2, 4, 6
</snippet></ROW><ROW><id>12433705</id><snippet>[1::2]</snippet></ROW><ROW><id>12433705</id><snippet>some_list[start:stop:step]
</snippet></ROW><ROW><id>12433705</id><snippet>start</snippet></ROW><ROW><id>12433705</id><snippet>0</snippet></ROW><ROW><id>12433705</id><snippet>0</snippet></ROW><ROW><id>12433705</id><snippet>0</snippet></ROW><ROW><id>12433705</id><snippet>step</snippet></ROW><ROW><id>12433705</id><snippet>2</snippet></ROW><ROW><id>12433705</id><snippet>[1::2]</snippet></ROW><ROW><id>12433705</id><snippet>step=2</snippet></ROW><ROW><id>12433705</id><snippet>step=1</snippet></ROW><ROW><id>12433705</id><snippet>enumerate()</snippet></ROW><ROW><id>12433705</id><snippet>enumerate()</snippet></ROW><ROW><id>12433705</id><snippet>for count, i in enumerate(L):
    if count % 2 == 1:
        l.append(i)
</snippet></ROW><ROW><id>12433705</id><snippet>count = 0
for i in L:
    if count % 2 == 1:
        l.append(i)
    count += 1
</snippet></ROW><ROW><id>12433705</id><snippet>for</snippet></ROW><ROW><id>12433814</id><snippet>a = input("Enter the first number: ")
b = input("Enter the second number: ")
# if a is b: - Compares id's, and can cause inconsistencies. Use == instead.
if a == b:
  print "Both inputs are equal"
else:
  print "Your input is not equal."
</snippet></ROW><ROW><id>12433819</id><snippet>import os
import sys
import signal
import string
import threading


# capture Exceptions
def except_catch(type, value, track, thread):
  import traceback

  rawreport = traceback.format_exception(type, value, track)
  report = "\n" . join(rawreport)

  errorlog = open("errors.log", "a")

  if thread != "":
    errorlog.write("Exception in thread: " + thread + "\n\n")

  errorlog.write(("%s\n" + "-" * 30 + "\n\n") % report)

  errorlog.close()
sys.excepthook = except_catch


# capture KeyboardInterrupt
def interrupt_catch(signal, frame):
  print ""
  os._exit(1)
signal.signal(signal.SIGINT, interrupt_catch)


# all your threaded code here
def whatever_threaded_function():
  try:
    a = 1 / 0

  except:
    exc_type, exc_value, exc_traceback = sys.exc_info()
    except_catch(exc_type.__name__, exc_value, exc_traceback, threading.current_thread().name)


threading.Thread(target=whatever_threaded_function).start()
</snippet></ROW><ROW><id>12433975</id><snippet>=</snippet></ROW><ROW><id>12433975</id><snippet>==</snippet></ROW><ROW><id>12434076</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; wallList = ['wall_l0', 'wall_l1', 'wall_broken_l0', 'wall_broken_l1',
         'wall_vwh_l0','wall_vwh_l1', 'wall_vwh_broken_l0', 
         'wall_vwh_broken_l1', 'wall_vpi_l0', 'wall_vpi_l1', 
         'wall_vpi_broken_l0', 'wall_vpi_broken_l1']
&gt;&gt;&gt; list(groupby(sorted(wallList), lambda wall: wall.replace('_broken', '')[:-3]))
[('wall', &lt;itertools._grouper object at 0x1004edc50&gt;), ('wall_vpi', &lt;itertools._grouper object at 0x1004edb90&gt;), ('wall_vwh', &lt;itertools._grouper object at 0x1004eda90&gt;)]
</snippet></ROW><ROW><id>12434076</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; wallList = ['wall_l0', 'wall_l1', 'wall_broken_l0', 'wall_broken_l1',
         'wall_vwh_l0','wall_vwh_l1', 'wall_vwh_broken_l0', 
         'wall_vwh_broken_l1', 'wall_vpi_l0', 'wall_vpi_l1', 
         'wall_vpi_broken_l0', 'wall_vpi_broken_l1']

&gt;&gt;&gt; values = [[list(v) for k, v in groupby(values, lambda value: '_broken_' in value)] 
...             for key, values in groupby(sorted(wallList), lambda wall: wall.replace('_broken', '')[:-3])]
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(values)
[[['wall_broken_l0', 'wall_broken_l1'], ['wall_l0', 'wall_l1']],
 [['wall_vpi_broken_l0', 'wall_vpi_broken_l1'],
  ['wall_vpi_l0', 'wall_vpi_l1']],
 [['wall_vwh_broken_l0', 'wall_vwh_broken_l1'],
  ['wall_vwh_l0', 'wall_vwh_l1']]]
</snippet></ROW><ROW><id>12434076</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; values = defaultdict(lambda : defaultdict(list))
&gt;&gt;&gt; for wall in wallList:
...     if 'broken' in wall:
...         values[wall[:-3].replace('_broken', '')]['broken'].append(wall)
...     else:
...         values[wall[:-3]]['default'].append(wall)
... 
&gt;&gt;&gt; values.items()
[('wall', defaultdict(&lt;type 'list'&gt;, {'default': ['wall_l0', 'wall_l1'], 'broken': ['wall_broken_l0', 'wall_broken_l1']})), ('wall_vpi', defaultdict(&lt;type 'list'&gt;, {'default': ['wall_vpi_l0', 'wall_vpi_l1'], 'broken': ['wall_vpi_broken_l0', 'wall_vpi_broken_l1']})), ('wall_vwh', defaultdict(&lt;type 'list'&gt;, {'default': ['wall_vwh_l0', 'wall_vwh_l1'], 'broken': ['wall_vwh_broken_l0', 'wall_vwh_broken_l1']}))]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12434076</id><snippet>&gt;&gt;&gt; values['wall']['default']
['wall_l0', 'wall_l1']
&gt;&gt;&gt; values['wall_vpi']['default']
['wall_vpi_l0', 'wall_vpi_l1']
&gt;&gt;&gt; values['wall_vpi']['broken']
['wall_vpi_broken_l0', 'wall_vpi_broken_l1']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12434234</id><snippet>sudo rm -r Build
</snippet></ROW><ROW><id>12435220</id><snippet>pip install -h</snippet></ROW><ROW><id>12435220</id><snippet>pip</snippet></ROW><ROW><id>12435220</id><snippet>pip -h</snippet></ROW><ROW><id>12435220</id><snippet>pip [subcommand] -h</snippet></ROW><ROW><id>12435220</id><snippet>install</snippet></ROW><ROW><id>12435256</id><snippet>class MyThread(Thread):
    def __init__(self, event)
        Thread.__init__(self)
        self.stopped = event

    def run(self):
        while not self.stopped.wait(0.5):
            print "my thread"
            # call a function
</snippet></ROW><ROW><id>12435256</id><snippet>set</snippet></ROW><ROW><id>12435256</id><snippet>stopped = Event()
thread = MyThread(stopped)
thread.start()
# this will stop the timer
stopped.set()
</snippet></ROW><ROW><id>12435317</id><snippet>def nestList(f,x,c):
    for i in range(c):
        yield x
        x = f(x)
    yield x

import math
print list(nestList(math.cos, 1.0, 10))
</snippet></ROW><ROW><id>12435317</id><snippet>def nestList(f,x,c):
    result = [x]
    for i in range(c):
        x = f(x)
        result.append(x)
    return result

import math
print nestList(math.cos, 1.0, 10)
</snippet></ROW><ROW><id>12435361</id><snippet>loader = GdkPixbuf.PixbufLoader.new_with_type('pnm')
loader.write(contents)
pixbuf = loader.get_pixbuf()
loader.close()
</snippet></ROW><ROW><id>12435361</id><snippet>gdk_pixbuf_format_get_name()</snippet></ROW><ROW><id>12435361</id><snippet>gdk_pixbuf_get_formats()</snippet></ROW><ROW><id>12435361</id><snippet>&gt;&gt;&gt; from gi.repository import GdkPixbuf
&gt;&gt;&gt; formats = GdkPixbuf.Pixbuf.get_formats()
&gt;&gt;&gt; [f.get_name() for f in formats]
['GdkPixdata', 'ras', 'tiff', 'wmf', 'icns', 'ico', 'png', 'qtif', 
 'wbmp', 'gif', 'pnm', 'tga', 'ani', 'xbm', 'xpm', 'jpeg2000', 
 'pcx', 'jpeg', 'bmp', 'svg']
</snippet></ROW><ROW><id>12435835</id><snippet>def func():
    a = 2
    otherFunc()
</snippet></ROW><ROW><id>12435835</id><snippet>a</snippet></ROW><ROW><id>12435835</id><snippet>func2Return</snippet></ROW><ROW><id>12435835</id><snippet>print "Calling localVariable from decorator " + localVariable</snippet></ROW><ROW><id>12435835</id><snippet>f1</snippet></ROW><ROW><id>12435883</id><snippet>uniq_id</snippet></ROW><ROW><id>12435883</id><snippet>import sqlite3
from datetime import datetime

db = sqlite3.connect(':memory:')

db.execute('create table log_a (timestamp, uniq_id, filesize)')
a = ['[2012-09-12 12:23:33] SOME_UNIQ_ID filesize']
for line in a:
    timestamp, uniq_id, filesize = line.rsplit(' ', 2)
    db.execute('insert into log_a values(?, ?, ?)', (timestamp, uniq_id, filesize))
db.commit()

db.execute('create table log_b (timestamp, uniq_id)')
b = ['[2012-09-12 13:23:33] SOME_UNIQ_ID']
for line in b:
    timestamp, uniq_id = line.rsplit(' ', 1)
    db.execute('insert into log_b values(?, ?)', (timestamp, uniq_id))
db.commit()

TIME_FORMAT = '[%Y-%m-%d %H:%M:%S]'
for matches in db.execute('select * from log_a join log_b using (uniq_id)'):
    log_a_ts = datetime.strptime(matches[0], TIME_FORMAT)
    log_b_ts = datetime.strptime(matches[3], TIME_FORMAT)
    print matches[1], 'has a difference of', abs(log_a_ts - log_b_ts)
    # 'SOME_UNIQ_ID has a difference of 1:00:00'
    # '1:00:00' == datetime.timedelta(0, 3600)
</snippet></ROW><ROW><id>12435883</id><snippet>.connect</snippet></ROW><ROW><id>12435883</id><snippet>a</snippet></ROW><ROW><id>12435883</id><snippet>b</snippet></ROW><ROW><id>12436062</id><snippet>def pattern_writer(pattern_size):
    first_x = 0
    last_x = pattern_size - 1
    while first_x &lt; pattern_size and last_x &gt; -1:
        for t in range(pattern_size):
            if t == first_x or t == last_x:
                print "x",
            else:
                print ".",
        print "\n"
        first_x += 1
        last_x -= 1
</snippet></ROW><ROW><id>12436062</id><snippet>def pattern_writer2(pattern_size):
    for t in range(pattern_size):
        pattern = list("." * pattern_size)
        pattern[t] = "x"
        pattern[-(t+1)] = "x"
        print "".join(pattern)
</snippet></ROW><ROW><id>12436124</id><snippet>ModelResource</snippet></ROW><ROW><id>12436124</id><snippet>attribute</snippet></ROW><ROW><id>12436124</id><snippet># in UserProfile model (adding related_name)
user = models.OneToOneField(User, related_name="profile")
</snippet></ROW><ROW><id>12436124</id><snippet>from tastypie import fields

class UserResource(ModelResource):
    # ... 
    website = fields.CharField(attribute = 'profile__website' )
    description = fields.CharField(attribute = 'profile__description' )
    full_name = fields.CharField(attribute = 'profile__full_name' )
    # ...
</snippet></ROW><ROW><id>12436124</id><snippet>UserProfile</snippet></ROW><ROW><id>12436124</id><snippet>UserResource</snippet></ROW><ROW><id>12436124</id><snippet>UserPost</snippet></ROW><ROW><id>12436124</id><snippet>UserResource</snippet></ROW><ROW><id>12436124</id><snippet>Tastypie</snippet></ROW><ROW><id>12436124</id><snippet>dehydrate()</snippet></ROW><ROW><id>12436124</id><snippet># in UserPost model (adding related_name)
user = models.ForeignKey(User, related_name="posts")

class UserResource(ModelResource):
    # ....
    def dehydrate(self, bundle):
        posts = bundle.obj.posts.all()
        bundle.data['locations'] = [post.location for post in posts]
        return bundle
    # ...
</snippet></ROW><ROW><id>12436280</id><snippet>def __init__(self, radius=1):
    self.radius = radius 
</snippet></ROW><ROW><id>12436280</id><snippet>c.Area()</snippet></ROW><ROW><id>12436280</id><snippet>c = Circle()</snippet></ROW><ROW><id>12436280</id><snippet>In the code below, why is the attribute/argument "name" missing in the brackets? 
</snippet></ROW><ROW><id>12436280</id><snippet>self.name = 'Methods'</snippet></ROW><ROW><id>12436280</id><snippet>name</snippet></ROW><ROW><id>12436280</id><snippet>Methods</snippet></ROW><ROW><id>12436280</id><snippet>self.name</snippet></ROW><ROW><id>12436382</id><snippet>net['in'].outputbuffer[net['in'].offset]
net['hidden0'].outputbuffer[net['hidden0'].offset]
</snippet></ROW><ROW><id>12436707</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>12436707</id><snippet>from scipy import *
from scipy.integrate import *
import time
from multiprocessing import Pool
from matplotlib.pyplot import figure, plot

def lct(f, a, b, c, d):
    def X(u):
        coeff=sqrt(-1j)*e**(1j*pi*(d/b)*(u**2))
        integrand_R= lambda t,f,a,b: (e**(-2j*pi*u*t/b)*e**(1j*pi*a*t**2/b)*f(t)).real 
        integrand_I= lambda t,f,a,b: (e**(-2j*pi*u*t/b)*e**(1j*pi*a*t**2/b)*f(t)).imag 
        # integral= sum of integrals of real and imaginary parts
        integral=quad(integrand_R,-Inf,0,args=(f,a,b))[0]+1j*quad(integrand_I,-Inf,0,args=(f,a,b))[0]
        #print(integral)
        return coeff*integral
    return X

def test():
    global test_lct, x
    y=abs(p.map(test_lct,x))
    figure(figsize=(6*3.13,4*3.13/2))
    plot(x,y)
    for i in range(y.size):
        if y[i]&gt;1e15:
            print(x[i])
            print(y[i])
            print('\n')
            print(x[130:140])
            print('\n')
            print(y[130:140])
            print('\n')

if __name__ == '__main__':
  p=Pool()
  x=arange(4,step=0.005)
  start=time.clock()
  test_lct=lct(lambda x: sin(x),1,2,3,7)
  test()
  test_lct=lct(lambda x: sin(2*x),1,2,3,7)
  test()
  stop=time.clock()
  print(stop-start)
</snippet></ROW><ROW><id>12436711</id><snippet>process_item(item, spider)
</snippet></ROW><ROW><id>12436711</id><snippet>def process_item(self, spider, item):
</snippet></ROW><ROW><id>12436711</id><snippet>_conditional_insert</snippet></ROW><ROW><id>12436711</id><snippet>import ipdb; ipdb.set_trace()
</snippet></ROW><ROW><id>12436734</id><snippet>c</snippet></ROW><ROW><id>12436734</id><snippet>cmds.button()</snippet></ROW><ROW><id>12436734</id><snippet>from functools import partial
self.btnA = cmds.button( label='Press Me - External Func',
                         c=partial(outsideFunc, dic))
self.btnb = cmds.button( label='Populate more items',c=populateDic)
</snippet></ROW><ROW><id>12436734</id><snippet>partial</snippet></ROW><ROW><id>12436734</id><snippet>dic</snippet></ROW><ROW><id>12436734</id><snippet>outsideFunc</snippet></ROW><ROW><id>12436734</id><snippet>dic</snippet></ROW><ROW><id>12436734</id><snippet>from functools import partial
self.btnA = cmds.button( label='Press Me - External Func',
                         c=lambda arg: outsideFunc(dic))
self.btnb = cmds.button( label='Populate more items',c=lambda arg: populateDic())
</snippet></ROW><ROW><id>12436767</id><snippet>[TestClass]
public class IEDriverTest {

    private IWebDriver driver;

    [TestInitialize]
    public void Initialize() {
        driver = new InternetExplorerDriver();
    }

    [TestMethod]
    public void Test() {
        // test steps
    }

    [TestCleanup]
    public void CleanupTests() {
        driver.Quit();
    }
}
</snippet></ROW><ROW><id>12436767</id><snippet>[TestCleanup]
public void Cleanup() {
    KillProcessByName("iexplore");
    KillProcessByName("IEDriverServer");
}

private void KillProcessByName(string processName) {
    foreach (Process process in Process.GetProcessesByName(processName)) {
        process.Kill();
    }
}
</snippet></ROW><ROW><id>12436963</id><snippet>itertools.repeat</snippet></ROW><ROW><id>12436963</id><snippet>zip</snippet></ROW><ROW><id>12436963</id><snippet>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; L = [['000002', [u'20060331', u'20060630']],
...      ['000005', [u'20061231', u'20070331', u'20070630']]]
&gt;&gt;&gt; couples = [zip(it.repeat(key), rest) for key, rest in L]
&gt;&gt;&gt; couples
[[('000002', u'20060331'), ('000002', u'20060630')],
[('000005', u'20061231'), ('000005', u'20070331'), ('000005', u'20070630')]]
</snippet></ROW><ROW><id>12436963</id><snippet>L</snippet></ROW><ROW><id>12436963</id><snippet>Series</snippet></ROW><ROW><id>12436963</id><snippet>MultiIndex</snippet></ROW><ROW><id>12436963</id><snippet>from_tuples</snippet></ROW><ROW><id>12436963</id><snippet>MultiIndex.from_tuples(sum(couples, []), names=('first', 'second'))
</snippet></ROW><ROW><id>12437002</id><snippet>style</snippet></ROW><ROW><id>12437002</id><snippet>link</snippet></ROW><ROW><id>12437022</id><snippet>rows</snippet></ROW><ROW><id>12437022</id><snippet>cols</snippet></ROW><ROW><id>12437022</id><snippet>ndarrays</snippet></ROW><ROW><id>12437022</id><snippet>rows = np.array([False, False, True, True], dtype=bool)
cols = np.array([True, True, False], dtype=bool)
data[rows][:,cols]
</snippet></ROW><ROW><id>12437022</id><snippet>ndarray</snippet></ROW><ROW><id>12437022</id><snippet>False/True</snippet></ROW><ROW><id>12437022</id><snippet>0/1</snippet></ROW><ROW><id>12437022</id><snippet>ndarray</snippet></ROW><ROW><id>12437233</id><snippet>defaultdict</snippet></ROW><ROW><id>12437233</id><snippet>from collections import defaultdict

d = defaultdict(list)

d['something'].append(3)
print d['something']
# &gt; [3]
</snippet></ROW><ROW><id>12437303</id><snippet>mask = rows[:,None]*cols[None,:]
data[mask] = 0
</snippet></ROW><ROW><id>12437303</id><snippet>data[rows][:,cols]</snippet></ROW><ROW><id>12437303</id><snippet>rows</snippet></ROW><ROW><id>12437303</id><snippet>cols</snippet></ROW><ROW><id>12437303</id><snippet>mask</snippet></ROW><ROW><id>12437303</id><snippet>(len(rows),len(cols)</snippet></ROW><ROW><id>12437303</id><snippet>mask</snippet></ROW><ROW><id>12437303</id><snippet>data</snippet></ROW><ROW><id>12437303</id><snippet>data[mask]</snippet></ROW><ROW><id>12437303</id><snippet>&amp;</snippet></ROW><ROW><id>12437303</id><snippet>*</snippet></ROW><ROW><id>12437303</id><snippet>np.outer</snippet></ROW><ROW><id>12437303</id><snippet>mask = np.outer(rows,cols)
</snippet></ROW><ROW><id>12437303</id><snippet>np.outer</snippet></ROW><ROW><id>12437532</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>12437532</id><snippet>import datetime

date1, time1 = '2012-09-08', '12:23:33'
date2, time2 = '2012-09-08', '12:23:33'

dt1 = datetime.datetime.strptime(date1 + ' ' + time1, "%Y-%m-%d %H:%M:%S")
dt2 = datetime.datetime.strptime(date2 + ' ' + time2, "%Y-%m-%d %H:%M:%S")

print (dt1 - dt2).total_seconds()
</snippet></ROW><ROW><id>12437532</id><snippet>datetime.timedelta.seconds</snippet></ROW><ROW><id>12437532</id><snippet>.days</snippet></ROW><ROW><id>12437532</id><snippet>.total_seconds()</snippet></ROW><ROW><id>12437532</id><snippet>.days</snippet></ROW><ROW><id>12437532</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>12437532</id><snippet>timedelta</snippet></ROW><ROW><id>12437532</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; def parse_datetime():
...     date1, time1 = '2012-09-08', '12:23:33'
...     date2, time2 = '2012-09-08', '12:23:33'
...     dt1 = datetime.datetime.strptime(date1 + ' ' + time1, "%Y-%m-%d %H:%M:%S")
...     dt2 = datetime.datetime.strptime(date2 + ' ' + time2, "%Y-%m-%d %H:%M:%S")
...     (dt1 - dt2).total_seconds()
... 
&gt;&gt;&gt; def parse_time():
...     d1 = time.strptime(date1 + ' ' + time1, "%Y-%m-%d %H:%M:%S")
...     d2 = time.strptime(date2 + ' ' + time2, "%Y-%m-%d %H:%M:%S")
...     seconds1 = time.mktime(d1)
...     seconds2 = time.mktime(d2)
...     seconds1 - seconds2
... 
&gt;&gt;&gt; timeit.timeit('test()', 'from __main__ import parse_datetime as test', number=10000)
0.6590030193328857
&gt;&gt;&gt; timeit.timeit('test()', 'from __main__ import parse_time as test', number=10000)
0.7742340564727783
</snippet></ROW><ROW><id>12437532</id><snippet>time.strptime()</snippet></ROW><ROW><id>12437738</id><snippet>import string
replace_punctuation = string.maketrans(string.punctuation, ' '*len(string.punctuation))
text = text.translate(replace_punctuation)
</snippet></ROW><ROW><id>12437866</id><snippet>myList = [['01:16:01 PM', '80.31'], ['01:17:01 PM', '80.32'], ['01:18:01 PM', '80.30']]
updateList =  [ ["2012-09-15 "+x[0], x[1]] for x in myList]
</snippet></ROW><ROW><id>12437866</id><snippet>[['2012-09-15 01:16:01 PM', '80.31'],
['2012-09-15 01:17:01 PM', '80.32'],
['2012-09-15 01:18:01 PM', '80.30']]
</snippet></ROW><ROW><id>12437945</id><snippet>list(db.users.find({"document_up.tags":{"$in":["solide"]}}))
</snippet></ROW><ROW><id>12438027</id><snippet>_ClassName</snippet></ROW><ROW><id>12438027</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __bar(self):
...         pass
... 
&gt;&gt;&gt; Foo.__dict__.keys()
['__dict__', '__module__', '__weakref__', '__doc__', '_Foo__bar']
</snippet></ROW><ROW><id>12438027</id><snippet>__dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>_Parent__dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>self._Parent__dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>Child</snippet></ROW><ROW><id>12438027</id><snippet>_Child__dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>_Parent__dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>__dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>_dispatch()</snippet></ROW><ROW><id>12438027</id><snippet>__getattr__()</snippet></ROW><ROW><id>12438165</id><snippet>dropbox.client</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>.auth_user()</snippet></ROW><ROW><id>12438165</id><snippet>client =</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>DropboxClient</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>UnboundLocal</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>dropbox</snippet></ROW><ROW><id>12438165</id><snippet>dropbox.client</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>dbclient = client.DropboxClient(sess)
# ...
f, metadata = dbclient.get_file_and_metadata(file1)
</snippet></ROW><ROW><id>12438165</id><snippet>dropbox</snippet></ROW><ROW><id>12438165</id><snippet>import dropbox
# ...

    sess = dropbox.session.DropboxSession(APP_KEY,APP_SECRET, ACCESS_TYPE)
    # ...
    client = dropbox.client.DropboxClient(sess)
</snippet></ROW><ROW><id>12438165</id><snippet>client</snippet></ROW><ROW><id>12438165</id><snippet>from dropbox import session, rest
from dropbox import client as dbclient
# ...

    client = dbclient.DropboxClient(sess)
</snippet></ROW><ROW><id>12438226</id><snippet>ref</snippet></ROW><ROW><id>12438226</id><snippet>out</snippet></ROW><ROW><id>12438226</id><snippet>ref</snippet></ROW><ROW><id>12438226</id><snippet>out</snippet></ROW><ROW><id>12438226</id><snippet>ref</snippet></ROW><ROW><id>12438226</id><snippet>out</snippet></ROW><ROW><id>12438226</id><snippet>out</snippet></ROW><ROW><id>12438455</id><snippet>$ gawk '/^ATOM/ {seen[$5] = 1} END {print length(seen)}' 1kg2.pdb
2
</snippet></ROW><ROW><id>12438455</id><snippet>ENDFILE</snippet></ROW><ROW><id>12438455</id><snippet>BEGIN {
  print "pdb_id\t\tsubunits"
  print
}

/^ATOM/ {
  seen[$5] = 1
}

ENDFILE {
  print FILENAME, "\t", length(seen)
  delete seen
}
</snippet></ROW><ROW><id>12438455</id><snippet>$ gawk -f pdb.awk 1kg2.pdb 1uz3.pdb 2b69.pdb
pdb_id          subunits

1kg2.pdb         2
1uz3.pdb         3
2b69.pdb         1
</snippet></ROW><ROW><id>12438516</id><snippet>import Image, cv
pi = Image.open('building.jpg')       # PIL image
cv_im = cv.CreateImageHeader(pi.size, cv.IPL_DEPTH_8U, 3)
r,g,b=pi.split()
pi2=Image.merge("RGB",(b,g,r))
cv.SetData(cv_im, pi2.tostring())
</snippet></ROW><ROW><id>12439027</id><snippet>self.</snippet></ROW><ROW><id>12439106</id><snippet>non-regex</snippet></ROW><ROW><id>12439106</id><snippet>strip()</snippet></ROW><ROW><id>12439106</id><snippet>strip(',!*&amp;^%#$;:+')</snippet></ROW><ROW><id>12439106</id><snippet>In [12]: phrase = "hello, this is: a simple; description!!"
In [13]:  [x.strip(',!*&amp;^%#$;:+') for x in phrase.split()]

Out[13]: ['hello', 'this', 'is', 'a', 'simple', 'description']
</snippet></ROW><ROW><id>12439313</id><snippet>def timeout(self, msg, opp, turn):
    time.sleep(60)
    if not turn_is_already_done:
        print "Timeout"
</snippet></ROW><ROW><id>12439313</id><snippet>threading.Timer</snippet></ROW><ROW><id>12439313</id><snippet>def messages(self, msg):
    timer = threading.Timer(60, self.handle_timeout)
    # do other stuff
    # if a move is received in time you can cancel the alarm using:
    timer.cancel()

def handle_timeout(self):
    print "you lose"
</snippet></ROW><ROW><id>12439521</id><snippet>from flask import request
...

imgfile = request.files['file-id']
imgname = imgfile.filename
</snippet></ROW><ROW><id>12439902</id><snippet>&gt;&gt;&gt; s = '"1,724,741","24,527,465",14.00,14.35,14.00,14.25'
&gt;&gt;&gt; import csv
&gt;&gt;&gt; r = csv.reader([s])
&gt;&gt;&gt; for row in r:
...     print ','.join(x.replace(",", "") for x in row)
... 
1724741,24527465,14.00,14.35,14.00,14.25
</snippet></ROW><ROW><id>12439929</id><snippet>/usr/bin/pydoc</snippet></ROW><ROW><id>12439929</id><snippet>pydoc</snippet></ROW><ROW><id>12439929</id><snippet>pydoc.gui()</snippet></ROW><ROW><id>12440038</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>12440038</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; TestResult = namedtuple("TestResult", "name feature passed errorMessage")
&gt;&gt;&gt; TestResult("a", "b", True, "c")
TestResult(name='a', feature='b', passed=True, errorMessage='c')
</snippet></ROW><ROW><id>12441490</id><snippet>for i in range(count_int):</snippet></ROW><ROW><id>12441490</id><snippet>count_int</snippet></ROW><ROW><id>12441490</id><snippet>if count_int &gt; 1:
    for i in range(count_int):
        turtle.begin_fill()
        turtle.forward(100)
        turtle.right(90)
        turtle.forward(100)
        turtle.right(90)
        turtle.forward(100)
        turtle.right(90)
        turtle.forward(100)
        turtle.end_fill()

        turtle.up()
        turtle.forward(20)
        turtle.color(random.random(),random.random(), random.random())
</snippet></ROW><ROW><id>12442702</id><snippet>round()</snippet></ROW><ROW><id>12442702</id><snippet>%precision</snippet></ROW><ROW><id>12442775</id><snippet>t0,t1,t2=zip(*G) for SMALLER lists and [x[0] for x in G] in general
</snippet></ROW><ROW><id>12442775</id><snippet>from operator import itemgetter

G = [(1, 2, 3), ('a', 'b', 'c'), ('you', 'and', 'me')]

def f1():
   return tuple(x[0] for x in G)

def f2():
   return tuple(map(itemgetter(0), G))

def f3():
    return tuple(x for x, y, z in G)     

def f4():
    return tuple(list(zip(*G))[0])

def f5():
    t0,*the_rest=zip(*G)
    return t0

def f6():
    t0,t1,t2=zip(*G)
    return t0                

cmpthese.cmpthese([f1,f2,f3,f4,f5,f6],c=100000) 
</snippet></ROW><ROW><id>12442775</id><snippet>    rate/sec     f4     f5     f1     f2     f3     f6
f4   494,220     -- -21.9% -24.1% -24.3% -26.6% -67.6%
f5   632,623  28.0%     --  -2.9%  -3.0%  -6.0% -58.6%
f1   651,190  31.8%   2.9%     --  -0.2%  -3.2% -57.3%
f2   652,457  32.0%   3.1%   0.2%     --  -3.0% -57.3%
f3   672,907  36.2%   6.4%   3.3%   3.1%     -- -55.9%
f6 1,526,645 208.9% 141.3% 134.4% 134.0% 126.9%     --
</snippet></ROW><ROW><id>12442775</id><snippet>from operator import itemgetter
import time
import timeit 
import matplotlib.pyplot as plt

def f1():
   return [x[0] for x in G]

def f1t():
   return tuple([x[0] for x in G])

def f2():
   return tuple([x for x in map(itemgetter(0), G)])

def f3():
    return tuple([x for x, y, z in G])    

def f4():
    return tuple(list(zip(*G))[0])

def f6():
    t0,t1,t2=zip(*G)
    return t0     

n=100    
r=(5,35)
results={f1:[],f1t:[],f2:[],f3:[],f4:[],f6:[]}    
for c in range(*r):
    G=[range(3) for i in range(c)] 
    for f in results.keys():
        t=timeit.timeit(f,number=n)
        results[f].append(float(n)/t)

for f,res in sorted(results.items(),key=itemgetter(1),reverse=True):
    if f.__name__ in ['f6','f1','f1t']:
        plt.plot(res, label=f.__name__,linewidth=2.5)
    else:    
        plt.plot(res, label=f.__name__,linewidth=.5)

plt.ylabel('rate/sec')
plt.xlabel('data size =&gt; {}'.format(r))  
plt.legend(loc='upper right')
plt.show()
</snippet></ROW><ROW><id>12442775</id><snippet>f1</snippet></ROW><ROW><id>12442775</id><snippet>f6</snippet></ROW><ROW><id>12442775</id><snippet>f1t</snippet></ROW><ROW><id>12442866</id><snippet>dict.keys()</snippet></ROW><ROW><id>12442866</id><snippet>sorted_list = sorted(my_dict, key=lambda k: (my_dict[k], k))
</snippet></ROW><ROW><id>12443063</id><snippet>&gt;&gt;&gt; my_dict = {1:5, 2:4, 3:5, 26:3, 5:2, 6:4, 8:3}
&gt;&gt;&gt; sorted(my_dict, key=lambda x: (my_dict[x], -x))
[5, 26, 8, 6, 2, 3, 1]
&gt;&gt;&gt; sorted(sorted(my_dict)[::-1], key=my_dict.get)
[5, 26, 8, 6, 2, 3, 1]
&gt;&gt;&gt; sorted(sorted(my_dict, reverse=True), key=my_dict.get)
[5, 26, 8, 6, 2, 3, 1]
</snippet></ROW><ROW><id>12443065</id><snippet>class Node:
    def __init__(self, left=None, right=None):
        self.left = left
        self.right = right

leaf1 = Node()
leaf2 = Node()
parent = Node(leaf1, leaf2)
</snippet></ROW><ROW><id>12443206</id><snippet>getch</snippet></ROW><ROW><id>12443206</id><snippet>pad</snippet></ROW><ROW><id>12443206</id><snippet>scr</snippet></ROW><ROW><id>12443206</id><snippet>scr.refresh</snippet></ROW><ROW><id>12443269</id><snippet>DailyInTake = dict()</snippet></ROW><ROW><id>12443269</id><snippet>CurDct[index] = DailyInTake[index]</snippet></ROW><ROW><id>12443474</id><snippet>while True</snippet></ROW><ROW><id>12443474</id><snippet>while True:
    square_ct = input("Enter an integer from 1-5 the number of squares to draw: ")
    if square_ct &lt;= 10: break
    print "Error"

# use square_ct as normal
</snippet></ROW><ROW><id>12443474</id><snippet>while True:
    square_ct = int(input("Enter an integer from 1-5 the number of squares to draw: "))
    if square_ct &lt;= 10: break
    print("Error")

# use square_ct as normal
</snippet></ROW><ROW><id>12443498</id><snippet>NSHighResolutionCapable</snippet></ROW><ROW><id>12443539</id><snippet>make install</snippet></ROW><ROW><id>12443539</id><snippet>make</snippet></ROW><ROW><id>12443539</id><snippet>Makefile</snippet></ROW><ROW><id>12443539</id><snippet>make install</snippet></ROW><ROW><id>12443539</id><snippet>Makefile</snippet></ROW><ROW><id>12443539</id><snippet>BIN_DIR</snippet></ROW><ROW><id>12443618</id><snippet>module = self.readline()[:-1]
</snippet></ROW><ROW><id>12443618</id><snippet>Unpickler</snippet></ROW><ROW><id>12443618</id><snippet>'rb'</snippet></ROW><ROW><id>12443618</id><snippet>module = "photo_data\r"</snippet></ROW><ROW><id>12443618</id><snippet>ImportError: No module named photo_data
</snippet></ROW><ROW><id>12443618</id><snippet>photo_data</snippet></ROW><ROW><id>12443618</id><snippet>unix2dos</snippet></ROW><ROW><id>12443618</id><snippet>'rU'</snippet></ROW><ROW><id>12443736</id><snippet>numpy.min</snippet></ROW><ROW><id>12443736</id><snippet>numpy.max</snippet></ROW><ROW><id>12443736</id><snippet>def bounding_box(iterable):
    min_x, min_y = numpy.min(iterable[0], axis=0)
    max_x, max_y = numpy.max(iterable[0], axis=0)
    return numpy.array([(min_x, min_y), (max_x, min_y), (max_x, max_y), (min_x, max_y)])
</snippet></ROW><ROW><id>12443813</id><snippet>assoc .py</snippet></ROW><ROW><id>12443813</id><snippet>regedit.exe</snippet></ROW><ROW><id>12443813</id><snippet>HKEY_CLASSES_ROOT\Python.File\shell</snippet></ROW><ROW><id>12443813</id><snippet>shell</snippet></ROW><ROW><id>12443813</id><snippet>Edit with IDLE</snippet></ROW><ROW><id>12443813</id><snippet>Edit with Idle</snippet></ROW><ROW><id>12443813</id><snippet>command</snippet></ROW><ROW><id>12443813</id><snippet>"%1"</snippet></ROW><ROW><id>12443813</id><snippet>idle.reg</snippet></ROW><ROW><id>12443813</id><snippet>Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\Python.File\shell\Edit with IDLE\command]
@="\"C:\\Python25\\pythonw.exe\" \"C:\\python25\\Lib\\idlelib\\idle.pyw\" \"%1\""
</snippet></ROW><ROW><id>12443815</id><snippet>main</snippet></ROW><ROW><id>12443850</id><snippet>curl http://example.com/huge_file.txt | python &lt;(svn cat file://$REPO/trunk/my_script.py) --argument1 --argument2</snippet></ROW><ROW><id>12443850</id><snippet>python my_script.py</snippet></ROW><ROW><id>12443850</id><snippet>python &lt;(cat my_script.py)</snippet></ROW><ROW><id>12444264</id><snippet>localhost-2:tmp $ mkdir ets
localhost-2:tmp $ cd ets
localhost-2:ets $ cp ../ets.py . 
</snippet></ROW><ROW><id>12444264</id><snippet>git</snippet></ROW><ROW><id>12444264</id><snippet>localhost-2:ets $ python ets.py clone
Cloning package encore
URL: https://github.com/enthought/encore.git
Cloning into encore...
remote: Counting objects: 1081, done.
remote: Compressing objects: 100% (483/483), done.
remote: Total 1081 (delta 729), reused 942 (delta 592)
Receiving objects: 100% (1081/1081), 981.12 KiB | 1.80 MiB/s, done.
Resolving deltas: 100% (729/729), done.

Cloning package traits
URL: https://github.com/enthought/traits.git
Cloning into traits...

[etc.]

Cloning package etsproxy
URL: https://github.com/enthought/etsproxy.git
Cloning into etsproxy...
remote: Counting objects: 3577, done.
remote: Compressing objects: 100% (2243/2243), done.
remote: Total 3577 (delta 1053), reused 3571 (delta 1047)
Receiving objects: 100% (3577/3577), 369.81 KiB, done.
Resolving deltas: 100% (1053/1053), done.
</snippet></ROW><ROW><id>12444264</id><snippet>localhost-2:ets $ python ets.py develop
Running command ['/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python', 'setup.py', 'develop'] in package encore
running develop
running egg_info
creating encore.egg-info
writing encore.egg-info/PKG-INFO

[long build process removed]
</snippet></ROW><ROW><id>12444536</id><snippet>app.debug = True
</snippet></ROW><ROW><id>12444537</id><snippet>Sigma ** (-1)</snippet></ROW><ROW><id>12444537</id><snippet>Sigma</snippet></ROW><ROW><id>12444537</id><snippet>-1</snippet></ROW><ROW><id>12444537</id><snippet>1 / Sigma</snippet></ROW><ROW><id>12444537</id><snippet>np.linalg.inv(Sigma)</snippet></ROW><ROW><id>12444537</id><snippet>(-1/2) dotdot</snippet></ROW><ROW><id>12444537</id><snippet>*</snippet></ROW><ROW><id>12444537</id><snippet>- dotdot / 2</snippet></ROW><ROW><id>12444537</id><snippet>from __future__ import division</snippet></ROW><ROW><id>12444537</id><snippet>1/2</snippet></ROW><ROW><id>12444537</id><snippet>0</snippet></ROW><ROW><id>12444537</id><snippet>.5</snippet></ROW><ROW><id>12444537</id><snippet>x-mu</snippet></ROW><ROW><id>12444537</id><snippet>the_array.transpose()</snippet></ROW><ROW><id>12444537</id><snippet>the_array.T</snippet></ROW><ROW><id>12444537</id><snippet>xT</snippet></ROW><ROW><id>12444537</id><snippet>x</snippet></ROW><ROW><id>12444537</id><snippet># near the top of the file
# you probably did some kind of `from somewhere import *`.
# most people like to only import specific names and/or do imports like this,
# to make it clear where your functions are coming from.
import numpy as np

centered = x - mu
prec = np.linalg.inv(Sigma)
E = np.exp(-.5 * np.dot(centered.T, np.dot(prec, centered)))
</snippet></ROW><ROW><id>12444597</id><snippet>WinX DimY</snippet></ROW><ROW><id>12444712</id><snippet>data = ifile.readlines()
</snippet></ROW><ROW><id>12444712</id><snippet>data = ifile.readlines()[0].split()
</snippet></ROW><ROW><id>12444777</id><snippet>label</snippet></ROW><ROW><id>12444777</id><snippet>title</snippet></ROW><ROW><id>12444777</id><snippet>size/fontsize</snippet></ROW><ROW><id>12444777</id><snippet>from matplotlib import pyplot as plt    

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title', fontsize=20)
plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)
fig.savefig('test.jpg')
</snippet></ROW><ROW><id>12444777</id><snippet>title</snippet></ROW><ROW><id>12444777</id><snippet>label</snippet></ROW><ROW><id>12444777</id><snippet>mpl.rcParams</snippet></ROW><ROW><id>12444777</id><snippet>axes.titlesize</snippet></ROW><ROW><id>12444777</id><snippet>axes.labelsize</snippet></ROW><ROW><id>12444777</id><snippet>axes.titlesize      : large   # fontsize of the axes title
axes.labelsize      : medium  # fontsize of the x any y labels
</snippet></ROW><ROW><id>12444777</id><snippet>x</snippet></ROW><ROW><id>12444777</id><snippet>y</snippet></ROW><ROW><id>12444777</id><snippet>axes.titlesize</snippet></ROW><ROW><id>12444777</id><snippet>suptitle</snippet></ROW><ROW><id>12444791</id><snippet>password = forms.PasswordInput(render_value = True)
</snippet></ROW><ROW><id>12444791</id><snippet>password = forms.CharField(widget=forms.PasswordInput(render_value = True))
</snippet></ROW><ROW><id>12444824</id><snippet>Image.getdata()</snippet></ROW><ROW><id>12444824</id><snippet>Image.new()</snippet></ROW><ROW><id>12444824</id><snippet>Image.putdata()</snippet></ROW><ROW><id>12444889</id><snippet>listOfStrings</snippet></ROW><ROW><id>12444889</id><snippet>list</snippet></ROW><ROW><id>12444889</id><snippet>__init__</snippet></ROW><ROW><id>12444889</id><snippet>class thing:
    def __init__(self):
        self.listOfStrings = []
</snippet></ROW><ROW><id>12444921</id><snippet>pout,perr = subprocess.Popen(['nmap', '192.168.1.2', '-oX', '-'], shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

xml_results = pout.read()
</snippet></ROW><ROW><id>12444930</id><snippet>noecho</snippet></ROW><ROW><id>12444930</id><snippet>#!/usr/bin/env python

import curses
import curses.textpad as textpad

try:
    mainwindow = curses.initscr()
    # Some curses-friendly terminal settings
    curses.cbreak(); mainwindow.keypad(1); curses.noecho()
    textpad.Textbox(mainwindow).edit()
finally:
    # Reverse curses-friendly terminal settings
    curses.nocbreak(); mainwindow.keypad(0); curses.echo()
    curses.endwin()
</snippet></ROW><ROW><id>12445063</id><snippet>list.pop(i)</snippet></ROW><ROW><id>12445063</id><snippet>def josephus(ls, skip):
    skip -= 1 # pop automatically skips the dead guy
    idx = skip
    while len(ls) &gt; 1:
        print ls.pop(idx) # kill prisoner at idx
        idx = (idx + skip) % len(ls)
    print 'survivor: ', ls[0]
</snippet></ROW><ROW><id>12445063</id><snippet>&gt;&gt;&gt; josephus([1,2,3,4,5,6,7], 3)
3
6
2
7
5
1
survivor:  4
</snippet></ROW><ROW><id>12445386</id><snippet>passlib</snippet></ROW><ROW><id>12445386</id><snippet>from passlib.hash import sha256_crypt
hashed = sha256_crypt.encrypt(password)
</snippet></ROW><ROW><id>12445386</id><snippet>{SCHEME}</snippet></ROW><ROW><id>12445386</id><snippet>$digit$</snippet></ROW><ROW><id>12445386</id><snippet>sha256</snippet></ROW><ROW><id>12445386</id><snippet>$5$</snippet></ROW><ROW><id>12445386</id><snippet>passlib</snippet></ROW><ROW><id>12445386</id><snippet>.identify()</snippet></ROW><ROW><id>12445758</id><snippet>league_k = ndb.Key(League, 'Premier League', 'Season', '2012/13')
o = Team(
    id = 'Chelsea',
    name ='Chelsea',
    parent = league_k
)
o.put()
</snippet></ROW><ROW><id>12445758</id><snippet>league_k = ndb.Key(League, 'Premier League', 'Season', '2012/13')
team = Team(id = 'Chelsea', name ='Chelsea')
o.put()
team_in_league = TeamInLeague(team=team.key(), league=league_k, pos=1)
team_in_league.put()
</snippet></ROW><ROW><id>12446205</id><snippet>for address in guido.addresses:
    if address.type == 'work':
        address.street = "Main Street"
        address.city = "Timbuktu"

guido.put()
</snippet></ROW><ROW><id>12446208</id><snippet>str</snippet></ROW><ROW><id>12446208</id><snippet>cf.insert(uuid.uuid4(), [{k: str(v) for k, v in d.iteritems()} for d in x])
</snippet></ROW><ROW><id>12446320</id><snippet>&gt;&gt;&gt; from dateutils import parser
&gt;&gt;&gt; parser.parse('January 12, 2012').strftime('%s')
'1326315600'
&gt;&gt;&gt; parser.parse('01/12/2012').strftime('%s')
'1326315600'
&gt;&gt;&gt; parser.parse('Sunday, 16/09/2012').strftime('%s')
'1347742800'
</snippet></ROW><ROW><id>12446320</id><snippet>datetime</snippet></ROW><ROW><id>12446320</id><snippet>&gt;&gt;&gt; parser.parse('Sunday, 16/09/2012')
datetime.datetime(2012, 9, 16, 0, 0)
&gt;&gt;&gt; parser.parse('01/12/2012')
datetime.datetime(2012, 1, 12, 0, 0)
&gt;&gt;&gt; parser.parse('January 12, 2012')
datetime.datetime(2012, 1, 12, 0, 0)
</snippet></ROW><ROW><id>12446328</id><snippet>mongo</snippet></ROW><ROW><id>12446328</id><snippet>{
    "_id" : ObjectId("5055a7abac2ec70755816f7b"),
    "produit_up" : [
        {
            "abus" : 0,
            "avctype" : "image/jpeg",
            "date" : "2012-09-15",
            "description" : "ddsfdsf sdfsdfsdf",
            "id" : "alucaard134773657029",
            "namep" : "nokia 3310",
            "nombre" : 2,
            "orientation" : "portrait",
            "photo" : ObjectId("5054d3fa3a5f3a0598b792a2"),
            "prix" : 24,
            "tags" : [
                "ddsfdsf",
                "sdfsdfsdf"
            ],
            "vend" : false
        }
    ]
}
</snippet></ROW><ROW><id>12446328</id><snippet>db.users.aggregate(

    // Match on indexed `tags` field to limit results
    { $match : { "produit_up.tags":"ddsfdsf" }},

    // Convert produit_up array embedded docs to a stream of documents  
    { $unwind: "$produit_up" },

    // Find all matching subdocuments
    { $match : { "produit_up.tags":"ddsfdsf" }}
)
</snippet></ROW><ROW><id>12446513</id><snippet>server.start()
print "Server started..."
response = GET("http://127.0.0.1:8080/go")   
</snippet></ROW><ROW><id>12446513</id><snippet>Connection Refused</snippet></ROW><ROW><id>12446513</id><snippet>server.start()
import time
time.sleep(...) #Â Something long enough
#Â Continue your stuff.
</snippet></ROW><ROW><id>12446513</id><snippet>time.sleep</snippet></ROW><ROW><id>12446885</id><snippet>Field</snippet></ROW><ROW><id>12446885</id><snippet>Player</snippet></ROW><ROW><id>12446885</id><snippet>summon()</snippet></ROW><ROW><id>12446885</id><snippet>Field</snippet></ROW><ROW><id>12446885</id><snippet>summon()</snippet></ROW><ROW><id>12446971</id><snippet>lcs = LCS(a,b)
res = copy(a)
foreach element e in lcs
  remove(res,e)
return res
</snippet></ROW><ROW><id>12447078</id><snippet>Class</snippet></ROW><ROW><id>12447078</id><snippet>type</snippet></ROW><ROW><id>12447078</id><snippet>Class.getitem(test)
</snippet></ROW><ROW><id>12447078</id><snippet>Class</snippet></ROW><ROW><id>12447078</id><snippet>getitem</snippet></ROW><ROW><id>12447078</id><snippet>Class[test]
</snippet></ROW><ROW><id>12447078</id><snippet>type</snippet></ROW><ROW><id>12447078</id><snippet>Class</snippet></ROW><ROW><id>12447078</id><snippet>type.__getitem__(Class, test)</snippet></ROW><ROW><id>12447078</id><snippet>__getitem__</snippet></ROW><ROW><id>12447078</id><snippet>type</snippet></ROW><ROW><id>12447078</id><snippet>Class</snippet></ROW><ROW><id>12447078</id><snippet>Class.__getitem__(test)</snippet></ROW><ROW><id>12447078</id><snippet>__getitem__</snippet></ROW><ROW><id>12447078</id><snippet>Class</snippet></ROW><ROW><id>12447078</id><snippet>Class</snippet></ROW><ROW><id>12447198</id><snippet>import twitter

api = twitter.Api()
page = 1
while page &lt;= 500:
    tweets = api.GetSearch("#Burma", page=page, per_page=100)
    for t in tweets:
        print t.text
    page += 1
</snippet></ROW><ROW><id>12447198</id><snippet>while</snippet></ROW><ROW><id>12447198</id><snippet>for</snippet></ROW><ROW><id>12447198</id><snippet>xrange()</snippet></ROW><ROW><id>12447198</id><snippet>api = twitter.Api()
for page in xrange(1, 501):
    tweets = api.GetSearch("#Burma", page=page, per_page=100)
    for t in tweets:
        print t.text
</snippet></ROW><ROW><id>12447520</id><snippet>zip()</snippet></ROW><ROW><id>12447520</id><snippet>&gt;&gt; zip([1, 2, 3], ['a', 'b', 'c'])
[(1, 'a'), (2, 'b'), (3, 'c')]
</snippet></ROW><ROW><id>12447543</id><snippet>win32gui</snippet></ROW><ROW><id>12447543</id><snippet>win32con</snippet></ROW><ROW><id>12447543</id><snippet>import win32gui
import win32con

hwnd = win32gui.FindWindow('Notepad', None)
win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, 100, 100, 300, 200, 0) 
</snippet></ROW><ROW><id>12447558</id><snippet>FormWidget.setup()</snippet></ROW><ROW><id>12447558</id><snippet>matplotlib/backends/qt4_editor/formwidget.py</snippet></ROW><ROW><id>12447558</id><snippet>        elif isinstance(value, (list, tuple)):
            selindex = value.pop(0)
            field = QComboBox(self)
            if isinstance(value[0], (list, tuple)):
                keys = [ key for key, _val in value ]
                value = [ val for _key, val in value ]
            else:
                keys = value
            field.addItems(value)
</snippet></ROW><ROW><id>12447558</id><snippet>            selindex = list(value).pop(0)
</snippet></ROW><ROW><id>12447558</id><snippet>pop</snippet></ROW><ROW><id>12447558</id><snippet>value</snippet></ROW><ROW><id>12447558</id><snippet>list(value)</snippet></ROW><ROW><id>12447594</id><snippet>PYTHONPATH="${PYTHONPATH}:/path/to/some/cool/python/package/:/path/to/another/cool/python/package/"

export PYTHONPATH
</snippet></ROW><ROW><id>12447617</id><snippet>pylint</snippet></ROW><ROW><id>12447617</id><snippet>${HOME}/.pylintrc</snippet></ROW><ROW><id>12447617</id><snippet>--generate-rc-file</snippet></ROW><ROW><id>12447617</id><snippet>#pylint: disable=warning-code</snippet></ROW><ROW><id>12447617</id><snippet>def my_func():
    #C0322 -&gt; no space between operand and operator
    #pylint: disable=C0322
    return a+b
</snippet></ROW><ROW><id>12447617</id><snippet>def my_func():
   return a+b  #pylint: disable=C0322
</snippet></ROW><ROW><id>12447617</id><snippet>request</snippet></ROW><ROW><id>12447631</id><snippet>"\%o"
</snippet></ROW><ROW><id>12447631</id><snippet>o</snippet></ROW><ROW><id>12447631</id><snippet>"%o"</snippet></ROW><ROW><id>12447631</id><snippet>%o</snippet></ROW><ROW><id>12447631</id><snippet>"\\1"</snippet></ROW><ROW><id>12447631</id><snippet>\1</snippet></ROW><ROW><id>12447670</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>12447670</id><snippet>&gt;&gt;&gt; ast.literal_eval("[7, 9, 41, [32, 67]]")
[7, 9, 41, [32, 67]]
</snippet></ROW><ROW><id>12447731</id><snippet>false</snippet></ROW><ROW><id>12447731</id><snippet>globals()["snyfr".decode("rot13")] = 17
x = false
</snippet></ROW><ROW><id>12447731</id><snippet>false</snippet></ROW><ROW><id>12447748</id><snippet>time</snippet></ROW><ROW><id>12447748</id><snippet>time</snippet></ROW><ROW><id>12447748</id><snippet>&gt;&gt;&gt; from time import time, sleep
&gt;&gt;&gt; time()
1347806075.148084
&gt;&gt;&gt; sleep(3)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12447748</id><snippet>&gt;&gt;&gt; import time 
&gt;&gt;&gt; time.time()
1347806085.739065
&gt;&gt;&gt; time.sleep(2)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12447804</id><snippet>if (ref(a) == ref(b)) return true;
if (len(a) != len(b)) return false;
return compare_actual_data(a, b);
</snippet></ROW><ROW><id>12447954</id><snippet>strptime</snippet></ROW><ROW><id>12447954</id><snippet>strptime</snippet></ROW><ROW><id>12447970</id><snippet>order  =  [4, 3, 5, 2, 1]
people = "ABCDE"

result = [x[1] for x in sorted(zip(order, people))]
</snippet></ROW><ROW><id>12447981</id><snippet>a = int(raw_input("Enter a number to check if it is happy: "))
visited = set()
while 1:
    if a == 1:
        print "Number is happy!"
        break
    a = sum(int(c) ** 2 for c in str(a))
    if a in visited:
        print "Number is sad!"
        break
    visited.add(a)
</snippet></ROW><ROW><id>12448157</id><snippet>    p = img.getPixel(col/factor,row/factor)
    newImage.setPixel(col,row,p)
</snippet></ROW><ROW><id>12448157</id><snippet>getPixel</snippet></ROW><ROW><id>12448157</id><snippet>int</snippet></ROW><ROW><id>12448157</id><snippet>factor</snippet></ROW><ROW><id>12448157</id><snippet>factor</snippet></ROW><ROW><id>12448408</id><snippet>\.(?!\d)
</snippet></ROW><ROW><id>12448441</id><snippet>__init__</snippet></ROW><ROW><id>12448441</id><snippet>_init_</snippet></ROW><ROW><id>12448441</id><snippet>_init_</snippet></ROW><ROW><id>12448552</id><snippet>min(s)</snippet></ROW><ROW><id>12448552</id><snippet>collections.deque</snippet></ROW><ROW><id>12448552</id><snippet>deque</snippet></ROW><ROW><id>12448552</id><snippet>deque</snippet></ROW><ROW><id>12448696</id><snippet>set_password</snippet></ROW><ROW><id>12448696</id><snippet>make_password</snippet></ROW><ROW><id>12448696</id><snippet>check_password</snippet></ROW><ROW><id>12448696</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>12448696</id><snippet>django.contrib.auth.hashers</snippet></ROW><ROW><id>12448696</id><snippet>django.contrib.auth.hashers</snippet></ROW><ROW><id>12448696</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>12448696</id><snippet>PASSWORD_HASHERS</snippet></ROW><ROW><id>12448705</id><snippet>def strange_sort(seq):
    """
    Sorts digitstrings (by integer value) and non-digitstrings in a
    sequence among themselves, preserving the original ds/non-ds
    signature.
    """
    numbers = iter(sorted((elem for elem in seq if elem.isdigit()), key=int))
    words = iter(sorted(elem for elem in seq if not elem.isdigit()))
    final = [next(numbers if elem.isdigit() else words) for elem in seq]
    return final
</snippet></ROW><ROW><id>12448705</id><snippet>&gt;&gt;&gt; strange_sort("1 2 3".split())
['1', '2', '3']
&gt;&gt;&gt; strange_sort("1 2 10 3".split())
['1', '2', '3', '10']
&gt;&gt;&gt; strange_sort("1 2 10 3 bear".split())
['1', '2', '3', '10', 'bear']
&gt;&gt;&gt; strange_sort("2 1 bear 10 3".split())
['1', '2', 'bear', '3', '10']
&gt;&gt;&gt; strange_sort("2 1 zebra 10 3 bear".split())
['1', '2', 'bear', '3', '10', 'zebra']
&gt;&gt;&gt; strange_sort("20 zebra 12 bear".split())
['12', 'bear', '20', 'zebra']
&gt;&gt;&gt; strange_sort("20 zebra 12 bear 3".split())
['3', 'bear', '12', 'zebra', '20']
</snippet></ROW><ROW><id>12448721</id><snippet>datetime.time</snippet></ROW><ROW><id>12448721</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>12448721</id><snippet>import datetime as dt
now = dt.datetime.now()
delta = dt.timedelta(hours = 12)
t = now.time()
print(t)
# 12:39:11.039864

print((dt.datetime.combine(dt.date(1,1,1),t) + delta).time())
# 00:39:11.039864
</snippet></ROW><ROW><id>12448721</id><snippet>dt.datetime.combine(...)</snippet></ROW><ROW><id>12448721</id><snippet>t</snippet></ROW><ROW><id>12448721</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12448721</id><snippet>datetime.time</snippet></ROW><ROW><id>12448756</id><snippet>x</snippet></ROW><ROW><id>12448756</id><snippet>import re
re.sub('([a-z]|$)', r';\1', x)
</snippet></ROW><ROW><id>12448791</id><snippet>Python/ceval.c</snippet></ROW><ROW><id>12448791</id><snippet>Py_MakePendingCalls(void)
{
    ...

    /* only service pending calls on main thread */
    if (main_thread &amp;&amp; PyThread_get_thread_ident() != main_thread)
        return 0;

    ...
}
</snippet></ROW><ROW><id>12448791</id><snippet>PyEval_InitThreads</snippet></ROW><ROW><id>12448791</id><snippet>pthread_join</snippet></ROW><ROW><id>12448791</id><snippet>Py_MakePendingCalls</snippet></ROW><ROW><id>12448792</id><snippet>B = {}
import os
import datetime
def modification_date_time(file_name):
    time = os.path.getmtime(file_name)
    return datetime.datetime.fromtimestamp(time)

for file in file_list:
    B[modification_date_time(file_name)] = file_name
</snippet></ROW><ROW><id>12448975</id><snippet>random.sample()</snippet></ROW><ROW><id>12448975</id><snippet>In [28]: from string import ascii_lowercase as asl

In [29]: import random

In [30]: max_length=10

In [31]: for x in xrange(1,max_length+1):
   ....:     ''.join(random.sample(asl,x))
   ....:     
   ....:     
Out[31]: 'k'
Out[31]: 'jy'
Out[31]: 'ldo'
Out[31]: 'ivlr'
Out[31]: 'gqelt'
Out[31]: 'gbvnqw'
Out[31]: 'baestog'
Out[31]: 'kyijhmvn'
Out[31]: 'toshxklwb'
Out[31]: 'wihtmouexg'
</snippet></ROW><ROW><id>12449068</id><snippet>Const("x", IntSort())</snippet></ROW><ROW><id>12449068</id><snippet>Int("x")</snippet></ROW><ROW><id>12449068</id><snippet>Int("x")</snippet></ROW><ROW><id>12449068</id><snippet>Const</snippet></ROW><ROW><id>12449068</id><snippet>S, (a, b, c) = EnumSort('S', ('a', 'b', 'c'))
x = Const("x", S)
</snippet></ROW><ROW><id>12449068</id><snippet>x + 1 &gt; 0</snippet></ROW><ROW><id>12449068</id><snippet>x</snippet></ROW><ROW><id>12449068</id><snippet>1</snippet></ROW><ROW><id>12449068</id><snippet>x</snippet></ROW><ROW><id>12449068</id><snippet>1</snippet></ROW><ROW><id>12449068</id><snippet>1</snippet></ROW><ROW><id>12449068</id><snippet>x</snippet></ROW><ROW><id>12449068</id><snippet>3.14</snippet></ROW><ROW><id>12449068</id><snippet>RealVal('3.14')</snippet></ROW><ROW><id>12449068</id><snippet>x</snippet></ROW><ROW><id>12449068</id><snippet>3.14</snippet></ROW><ROW><id>12449068</id><snippet>x</snippet></ROW><ROW><id>12449068</id><snippet>3.14</snippet></ROW><ROW><id>12449068</id><snippet>z</snippet></ROW><ROW><id>12449068</id><snippet>y</snippet></ROW><ROW><id>12449068</id><snippet>z &gt; x</snippet></ROW><ROW><id>12449068</id><snippet>y &gt; 3.14</snippet></ROW><ROW><id>12449068</id><snippet>x = RealVal('3.14')
z = Real('y')
print z &gt; x
</snippet></ROW><ROW><id>12449360</id><snippet>Py_TPFLAGS_CHECKTYPES</snippet></ROW><ROW><id>12449360</id><snippet>a*a</snippet></ROW><ROW><id>12449360</id><snippet>a*different-type</snippet></ROW><ROW><id>12449360</id><snippet>MyType</snippet></ROW><ROW><id>12449360</id><snippet>NotImplemented</snippet></ROW><ROW><id>12449360</id><snippet>Py_TPFLAGS_CHECKTYPES</snippet></ROW><ROW><id>12449360</id><snippet>MyType</snippet></ROW><ROW><id>12449360</id><snippet>static PyTypeObject MyType = {
    PyObject_HEAD_INIT(&amp;PyType_Type)
    0,                         /*ob_size*/
    "mytype.MyType",           /*tp_name*/
    sizeof(MyTypeObject),      /*tp_basicsize*/
    0,                         /*tp_itemsize*/
    ...
    0,                         /*tp_repr*/
    &amp;mytype_as_number,         /*tp_as_number*/
    0,                         /*tp_as_sequence*/
    ...
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES,/*tp_flags*/
    ...
};
</snippet></ROW><ROW><id>12449440</id><snippet>In [143]: ax = df.plot(kind='bar')

In [144]: ax.set_xticklabels(['|'.join(t) for t in df.index])
</snippet></ROW><ROW><id>12449440</id><snippet> In [167]: ax = df.plot(kind='bar')

 In [168]: ax.set_xticklabels(df.index.format(names=False))
</snippet></ROW><ROW><id>12449579</id><snippet>User</snippet></ROW><ROW><id>12449579</id><snippet>is_staff</snippet></ROW><ROW><id>12449579</id><snippet>is_staff = True</snippet></ROW><ROW><id>12449579</id><snippet>manage.py</snippet></ROW><ROW><id>12449623</id><snippet>import re
import random

animals = ['bird','monkey','dog','fox']

def callback(matchobj):
    return random.choice(animals)

teststr = 'test test test test'
ret = re.sub(r'test', callback, teststr)
print(ret)
</snippet></ROW><ROW><id>12449623</id><snippet>bird bird dog monkey
</snippet></ROW><ROW><id>12449623</id><snippet>re.sub</snippet></ROW><ROW><id>12449625</id><snippet>import subprocess

def sshcommand(command):
    return subprocess.check_output(['ssh', 'localhost', command]).splitlines()

command = raw_input("command&gt; ")
print sshcommand(command)
</snippet></ROW><ROW><id>12449625</id><snippet>import subprocess

class sshcommand(object):
    def __init__(self, command):
        self.result = subprocess.check_output(['ssh', 'localhost', command]).splitlines()

    def __str__(self):
        return self.result

command = raw_input("command&gt; ")
print sshcommand(command)
</snippet></ROW><ROW><id>12449985</id><snippet>get_form</snippet></ROW><ROW><id>12449985</id><snippet>def get_form(self, form_class):
    return form_class(self.request.user, self.request.POST)
</snippet></ROW><ROW><id>12449985</id><snippet>get_form_kwargs</snippet></ROW><ROW><id>12449985</id><snippet>def get_form_kwargs(self):
    kwargs = super(UserChangePassword, self).get_form_kwargs()
    kwargs.update({'user': self.request.user, 'post': self.request.POST})
    return kwargs
</snippet></ROW><ROW><id>12449985</id><snippet>kwargs</snippet></ROW><ROW><id>12450145</id><snippet>def foo():
  class A: pass
  a = A()
  a.msg = "Hello"
  return a
</snippet></ROW><ROW><id>12450145</id><snippet>a = foo()
print a.msg
</snippet></ROW><ROW><id>12450145</id><snippet>__new__</snippet></ROW><ROW><id>12450145</id><snippet>__init__</snippet></ROW><ROW><id>12450145</id><snippet>__init__</snippet></ROW><ROW><id>12450160</id><snippet>env.sphinx_path = {
    'hosta': 'patha',
    'hostb': 'pathb',
}

@task
@hosts('hosta','hostb')
def foo(dummy_var):
    put('sphinx_stuff', env.sphinx_path%env.host)
</snippet></ROW><ROW><id>12450160</id><snippet>fab foo:'sphinx/path'
</snippet></ROW><ROW><id>12450163</id><snippet>WichmannHill</snippet></ROW><ROW><id>12450163</id><snippet>Random</snippet></ROW><ROW><id>12450163</id><snippet>random</snippet></ROW><ROW><id>12450553</id><snippet>newentry = model(chunk)
session.merge(newentry)
</snippet></ROW><ROW><id>12450706</id><snippet>zipimport.c</snippet></ROW><ROW><id>12450706</id><snippet>zipfile</snippet></ROW><ROW><id>12450706</id><snippet>get_data</snippet></ROW><ROW><id>12450706</id><snippet>/* data is not compressed */</snippet></ROW><ROW><id>12450706</id><snippet>/* Decompress with zlib */</snippet></ROW><ROW><id>12450883</id><snippet>from osgeo import gdal
import numpy as np

ds = gdal.Open('image.tif')

# loop through each band
for bi in range(ds.RasterCount):
    band = ds.GetRasterBand(bi + 1)
    # Read this band into a 2D NumPy array
    ar = band.ReadAsArray()
    print('Band %d has type %s'%(bi + 1, ar.dtype))
    raw = ar.tostring()
</snippet></ROW><ROW><id>12450952</id><snippet>from core import *
</snippet></ROW><ROW><id>12450952</id><snippet>core.py</snippet></ROW><ROW><id>12450957</id><snippet>itemAt</snippet></ROW><ROW><id>12450957</id><snippet>row/column</snippet></ROW><ROW><id>12450957</id><snippet>item</snippet></ROW><ROW><id>12450957</id><snippet>itemAt</snippet></ROW><ROW><id>12450957</id><snippet>str</snippet></ROW><ROW><id>12450957</id><snippet>float()</snippet></ROW><ROW><id>12450957</id><snippet>QString</snippet></ROW><ROW><id>12450957</id><snippet>str</snippet></ROW><ROW><id>12450957</id><snippet>.update</snippet></ROW><ROW><id>12450957</id><snippet>FirstRowDict[i] = float(tablewidget.item(0, j).text())
</snippet></ROW><ROW><id>12451061</id><snippet>from fabric.api import *

env.use_ssh_config = True
env.hosts = ["myserver"]
env.user = "root"
env.key_filename = "/home/myusername/.ssh/id_rsa"
env.password = ""
env.port = 22

def testlive():
  run("ls")
</snippet></ROW><ROW><id>12451061</id><snippet>Host myserver
  hostname myserver.net
  port 22
  IdentityFile ~/.ssh/id_rsa
</snippet></ROW><ROW><id>12451061</id><snippet>fab testlive</snippet></ROW><ROW><id>12451088</id><snippet>process_step</snippet></ROW><ROW><id>12451104</id><snippet>with open("myfile.txt") as myfile:
    matches = [line.rstrip() for line in myfile if line.lstrip().startswith("abc=")]
</snippet></ROW><ROW><id>12451145</id><snippet>&gt;&gt;&gt; for pizza in orderedpizzas: print standardpizzalist[pizza-1]

1. Supreme
3. Meatlovers
5. BBQ Chicken
</snippet></ROW><ROW><id>12451149</id><snippet>mask = frame.index.map(lambda x: not isinstance(x, str))
frame = frame[mask]
</snippet></ROW><ROW><id>12451167</id><snippet>swap</snippet></ROW><ROW><id>12451167</id><snippet>swap(&amp;a, &amp;b);
</snippet></ROW><ROW><id>12451167</id><snippet>a</snippet></ROW><ROW><id>12451167</id><snippet>b</snippet></ROW><ROW><id>12451167</id><snippet>swap</snippet></ROW><ROW><id>12451167</id><snippet>swap(a, b)
</snippet></ROW><ROW><id>12451167</id><snippet>a,b = swap(a,b)
</snippet></ROW><ROW><id>12451167</id><snippet>a,b = b,a
</snippet></ROW><ROW><id>12451218</id><snippet>json.dumps</snippet></ROW><ROW><id>12451218</id><snippet>str</snippet></ROW><ROW><id>12451218</id><snippet>str</snippet></ROW><ROW><id>12451218</id><snippet>str</snippet></ROW><ROW><id>12451218</id><snippet>\u</snippet></ROW><ROW><id>12451218</id><snippet>Ã¡</snippet></ROW><ROW><id>12451218</id><snippet>\u00e1</snippet></ROW><ROW><id>12451218</id><snippet>unicode</snippet></ROW><ROW><id>12451218</id><snippet>Ã¡</snippet></ROW><ROW><id>12451218</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>12451218</id><snippet>json.dumps</snippet></ROW><ROW><id>12451218</id><snippet>'ascii'</snippet></ROW><ROW><id>12451218</id><snippet>file.write</snippet></ROW><ROW><id>12451218</id><snippet>str</snippet></ROW><ROW><id>12451218</id><snippet>codecs</snippet></ROW><ROW><id>12451218</id><snippet>'utf-8'</snippet></ROW><ROW><id>12451218</id><snippet>encoding</snippet></ROW><ROW><id>12451218</id><snippet>open</snippet></ROW><ROW><id>12451218</id><snippet>str</snippet></ROW><ROW><id>12451218</id><snippet>str</snippet></ROW><ROW><id>12451218</id><snippet>encoding</snippet></ROW><ROW><id>12451218</id><snippet>json.dumps</snippet></ROW><ROW><id>12451218</id><snippet>bytes</snippet></ROW><ROW><id>12451218</id><snippet>json.dumps</snippet></ROW><ROW><id>12451218</id><snippet>s</snippet></ROW><ROW><id>12451218</id><snippet>json.dump</snippet></ROW><ROW><id>12451218</id><snippet>encoding</snippet></ROW><ROW><id>12451300</id><snippet>def _lookup(self, name, cls, type, timeout = None):
    """Return a list of results.
    name: Queried host name.
    cls: An enum of the query class. See dns.py:

        IN, CS, CH, HS = range(1, 5)

        QUERY_CLASSES = {
            IN: 'IN',
            CS: 'CS',
            CH: 'CH',
            HS: 'HS',
            ANY: 'ANY'
        }

    type: The type of record to search for (or ANY/255 for any and all). 
          See dns.py:

        (A, NS, MD, MF, CNAME, SOA, MB, MG, MR, NULL, WKS, PTR, HINFO, MINFO, MX, TXT,
         RP, AFSDB) = range(1, 19)
        AAAA = 28
        SRV = 33
        NAPTR = 35
        A6 = 38
        DNAME = 39
        SPF = 99

        QUERY_TYPES = {
            A: 'A',
            NS: 'NS',
            MD: 'MD',
            MF: 'MF',
            CNAME: 'CNAME',
            SOA: 'SOA',
            MB: 'MB',
            MG: 'MG',
            MR: 'MR',
            NULL: 'NULL',
            WKS: 'WKS',
            PTR: 'PTR',
            HINFO: 'HINFO',
            MINFO: 'MINFO',
            MX: 'MX',
            TXT: 'TXT',
            RP: 'RP',
            AFSDB: 'AFSDB',

            # 19 through 27?  Eh, I'll get to 'em.

            AAAA: 'AAAA',
            SRV: 'SRV',
            NAPTR: 'NAPTR',
            A6: 'A6',
            DNAME: 'DNAME',
            SPF: 'SPF'
        }

    timeout: The retention time for this record, in seconds.
    """
    cnames = []
    results = []
    authority = []
    additional = []
    default_ttl = max(self.soa[1].minimum, self.soa[1].expire)

    # Do records search. Get a list of classes like Record_A and Record_MX 
    # back. These are defined in dns.py .
    domain_records = self.records.get(name.lower())

    # Structure the results so as to present them the way that DNS records 
    # usually come back.

    if domain_records:
        # Loop through all of the results.
        for record in domain_records:
            if record.ttl is not None:
                ttl = record.ttl
            else:
                ttl = default_ttl

            # If we're looking at a [subdomain?] NS record, note it.
            if record.TYPE == dns.NS and name.lower() != self.soa[0].lower():
                # NS record belong to a child zone: this is a referral.  As
                # NS records are authoritative in the child zone, ours here
                # are not.  RFC 2181, section 6.1.
                authority.append(
                    dns.RRHeader(name, record.TYPE, dns.IN, ttl, record, auth=False)
                )

            # Was the record what was requested, or did we want everything?
            elif record.TYPE == type or type == dns.ALL_RECORDS:
                results.append(
                    dns.RRHeader(name, record.TYPE, dns.IN, ttl, record, auth=True)
                )

            # If we're looking at a CNAME record, note it.
            if record.TYPE == dns.CNAME:
                cnames.append(
                    dns.RRHeader(name, record.TYPE, dns.IN, ttl, record, auth=True)
                )

        # If no requested records were found, use the CNAME records (if any).
        if not results:
            results = cnames

        # Go through any NS, CNAME, or MX records found, and find the IPs 
        # for those hosts.
        #
        # NOTE: The "additional" list doesn't appear to be populated.
        for record in results + authority:
            section = {dns.NS: additional, dns.CNAME: results, dns.MX: additional}.get(record.type)
            if section is not None:
                n = str(record.payload.name)
                for rec in self.records.get(n.lower(), ()):
                    if rec.TYPE == dns.A:
                        section.append(
                            dns.RRHeader(n, dns.A, dns.IN, rec.ttl or default_ttl, rec, auth=True)
                        )

        # Not found. Return an SOA record with the name that was requested 
        # (the normal response that you'll see at the console).
        if not results and not authority:
            # Empty response. Include SOA record to allow clients to cache
            # this response.  RFC 1034, sections 3.7 and 4.3.4, and RFC 2181
            # section 7.1.
            authority.append(
                dns.RRHeader(self.soa[0], dns.SOA, dns.IN, ttl, self.soa[1], auth=True)
                )

        # We return a tuple of individual result lists. Each of the records 
        # is an instance of RRHeader, which wraps the Record_* classes in 
        # dns.py for returning as a result (Resource Record). 
        #
        # The first item in the tuple refers to the "ANSWER SECTION" in the 
        # DiG output, and the third item refers to the "ADDITIONAL 
        # SECTION". As "authority" was an empty list in the example, no 
        # output relates to it. It will have NS records if any are present, 
        # or contain an SOA record for what was requested if nothing was 
        # found.
        # 
        #;; QUESTION SECTION:
        #;example-domain.com.            IN      ANY
        #
        #;; ANSWER SECTION:
        #example-domain.com.     3600    IN      SOA     ns1.example-domain.com. root.example-domain.com. 2003010601 3600 3600 3600 3600
        #example-domain.com.     3600    IN      A       127.9.9.9
        #example-domain.com.     3600    IN      NS      ns1.example-domain.com.
        #example-domain.com.     3600    IN      MX      0 mail.example-domain.com.
        #
        #;; ADDITIONAL SECTION:
        #mail.example-domain.com. 3600   IN      A       123.0.16.43

        return defer.succeed((results, authority, additional))
    else:
        if name.lower().endswith(self.soa[0].lower()):
            # We are the authority and we didn't find it.  Goodbye.
            return defer.fail(failure.Failure(dns.AuthoritativeDomainError(name)))
        return defer.fail(failure.Failure(dns.DomainError(name)))
</snippet></ROW><ROW><id>12451465</id><snippet>data = []
with open('file') as f:
    for line in f:
        data.append(json.loads(line))
</snippet></ROW><ROW><id>12451537</id><snippet>def tryconvert(value, default, *types):
    for t in types:
        try:
            return t(value)
        except ValueError, TypeError:
            continue
    return default
</snippet></ROW><ROW><id>12451537</id><snippet>lambda v: tryconvert(v, 0, int)
</snippet></ROW><ROW><id>12451537</id><snippet>tryconvert()</snippet></ROW><ROW><id>12451537</id><snippet>def tryconvert(default, *types):
    def convert(value):
        for t in types:
            try:
                return t(value)
            except ValueError, TypeError:
                continue
        return default
     return convert
</snippet></ROW><ROW><id>12451537</id><snippet>tryconvert(0, int)</snippet></ROW><ROW><id>12451537</id><snippet>convert()</snippet></ROW><ROW><id>12451537</id><snippet>0</snippet></ROW><ROW><id>12451615</id><snippet>SimilarPost = aliased(Post)
SimilarPostOption = aliased(PostOption)
post_popularity = (db.session.query(func.count(SimilarPost.id))
        .select_from(PostOption)
        .filter(PostOption.post_id == Post.id)
        .correlate(Post)
        .outerjoin(SimilarPostOption, PostOption.val == SimilarPostOption.val)
        .join(SimilarPost, sql.and_(
                SimilarPost.id == SimilarPostOption.post_id,
                SimilarPost.place_id == Post.place_id)
        )
        .as_scalar())
popular_post_id = (db.session.query(Post.id)
        .filter(Post.place_id == Place.id)
        .correlate(Place)
        .order_by(post_popularity.desc())
        .limit(1)
        .as_scalar())

deduped_posts = (db.session.query(Post, post_popularity)
        .join(Place)
        .filter(Post.id == popular_post_id)
        .order_by(post_popularity.desc(), Post.timestamp.desc())
        .all())
</snippet></ROW><ROW><id>12451615</id><snippet>as_scalar</snippet></ROW><ROW><id>12451685</id><snippet>roundUp</snippet></ROW><ROW><id>12451685</id><snippet>def my_roundup(x):
  return math.ceil(x*100)/100.

roundUp = my_roundup
</snippet></ROW><ROW><id>12451773</id><snippet>for idx in xrange(1, len(lst), 2):
    if lst[idx] == 'p':
        ...
    if lst[idx] == 'm':
        ...
</snippet></ROW><ROW><id>12451773</id><snippet>lst</snippet></ROW><ROW><id>12451773</id><snippet>lst[0]</snippet></ROW><ROW><id>12451857</id><snippet>collections.Counter</snippet></ROW><ROW><id>12451857</id><snippet>import collections
import string

with open("charactermask.txt") as f:
  words = [x.strip(string.punctuation).lower() for x in f.read().split()]

counter = collections.defaultdict(int):
for word in words:
  if len(word) &gt;= 2:
    counter[word] += 1
</snippet></ROW><ROW><id>12451985</id><snippet>In [12]: a = np.random.randint(0, 3, size=(100,100))

In [13]: timeit len(a.nonzero()[0])
1000 loops, best of 3: 306 us per loop

In [14]: timeit (a != 0).sum()
10000 loops, best of 3: 46 us per loop
</snippet></ROW><ROW><id>12451985</id><snippet>In [22]: timeit np.count_nonzero(a)
10000 loops, best of 3: 39 us per loop
</snippet></ROW><ROW><id>12451985</id><snippet>count_nonzero</snippet></ROW><ROW><id>12451985</id><snippet>sum</snippet></ROW><ROW><id>12451985</id><snippet>In [33]: a = np.random.randint(0, 3, size=(10,10))

In [34]: timeit len(a.nonzero()[0])
100000 loops, best of 3: 6.18 us per loop

In [35]: timeit (a != 0).sum()
100000 loops, best of 3: 13.5 us per loop

In [36]: timeit np.count_nonzero(a)
1000000 loops, best of 3: 686 ns per loop
</snippet></ROW><ROW><id>12452106</id><snippet>inspect.getsource</snippet></ROW><ROW><id>12452233</id><snippet>new_elements</snippet></ROW><ROW><id>12452233</id><snippet>template = open('/temp/template.txt','r')
new_elements = iter(["movie1","movies2"])

for i in template.readlines():
    if "movie" in i:
        print "replace line with", new_elements.next()
</snippet></ROW><ROW><id>12452293</id><snippet>cdef union mystruct_union:
    double lower_d
    uint64_t lower

cdef struct mystruct:
    mystruct_union un
</snippet></ROW><ROW><id>12452293</id><snippet>un.lower_d</snippet></ROW><ROW><id>12452293</id><snippet>un.lower</snippet></ROW><ROW><id>12452332</id><snippet>default</snippet></ROW><ROW><id>12452332</id><snippet>select</snippet></ROW><ROW><id>12452332</id><snippet>default</snippet></ROW><ROW><id>12452332</id><snippet>default</snippet></ROW><ROW><id>12452332</id><snippet>quit_status := &lt;-quit</snippet></ROW><ROW><id>12452332</id><snippet>quit</snippet></ROW><ROW><id>12452332</id><snippet>go func() {
    select {
    case quit_status := &lt;-quit:
        ...

    }
}()

// Execution continues here immediately.
</snippet></ROW><ROW><id>12452379</id><snippet>import re
alphaonly = re.compile(r"^[a-z]{2,}$")
</snippet></ROW><ROW><id>12452379</id><snippet>counter = defaultdict(int)

with open("charactermask.txt") as txt_file:
    for line in txt_file:
        for word in line.strip().split():
          word = word.strip(punctuation).lower()
          if alphaonly.match(word):
              counter[word] += 1
</snippet></ROW><ROW><id>12452379</id><snippet>words_by_freq = sorted(counter.iteritems(),
                       key=lambda(word, count): (count, word))

i = 0
for word, frequency in words_by_freq:
    if alphaonly.match(word):
        i += 1
        sys.stdout.write("{}: {}\n".format(word, frequency))
    if i == number: break
</snippet></ROW><ROW><id>12452421</id><snippet>import multiprocessing as mp

def work(date):
    # Do most of the memory-intensive work here
    ...

while single_date &lt;= self.end_date:
    proc = mp.Process(target = work, args = (single_date,))
    proc.start()
    proc.join()
</snippet></ROW><ROW><id>12452576</id><snippet>.translate</snippet></ROW><ROW><id>12452576</id><snippet>replace</snippet></ROW><ROW><id>12452576</id><snippet>import re</snippet></ROW><ROW><id>12452576</id><snippet>import os

# unicode.translate translates *code points* to unicode literals,
# so we apply ord to the letters to get code points
# We also specify our Unicode literals using escape notation to avoid encoding issues.
TRANSTABLE = {
    ord(u'A'): u'\u0123',
    ord(u'B'): u'\u2931',
    # etc
}

# Unicode literal so that os.listdir produces Unicode filenames
# Raw (r) literal so that backslashes are interpreted literally
ROOT = ur'C:\Users\Any\Desktop\test'

for filename in os.listdir(ROOT):
    newname = filename.translate(TRANSTABLE)
    # Don't translate ROOT (avoids translating e.g. the C in C:\)
    os.rename(os.path.join(ROOT, filename), os.path.join(ROOT, newname))
</snippet></ROW><ROW><id>12452680</id><snippet>super(DBHandler, self).__init__(self)
</snippet></ROW><ROW><id>12452680</id><snippet>self</snippet></ROW><ROW><id>12452680</id><snippet>super</snippet></ROW><ROW><id>12452680</id><snippet>self</snippet></ROW><ROW><id>12452680</id><snippet>logging</snippet></ROW><ROW><id>12452680</id><snippet>self</snippet></ROW><ROW><id>12452684</id><snippet>a = ['1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '7', '7', '7', '10', '10']
print a.count("1")
</snippet></ROW><ROW><id>12452684</id><snippet>In [8]: len(a)
Out[8]: 6339347

In [9]: %timeit a.count("1")
10 loops, best of 3: 86.4 ms per loop
</snippet></ROW><ROW><id>12452684</id><snippet>a = Counter(your_list)
print a['1']
</snippet></ROW><ROW><id>12452684</id><snippet>In [17]: %timeit Counter(a)['1']
1 loops, best of 3: 1.52 s per loop
</snippet></ROW><ROW><id>12452684</id><snippet>In [24]: profile.run("a.count('1')")
         3 function calls in 0.091 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.091    0.091 &lt;string&gt;:1(&lt;module&gt;)
        1    0.091    0.091    0.091    0.091 {method 'count' of 'list' objects}

        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Prof
iler' objects}



In [25]: profile.run("b = Counter(a); b['1']")
         6339356 function calls in 2.143 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    2.143    2.143 &lt;string&gt;:1(&lt;module&gt;)
        2    0.000    0.000    0.000    0.000 _weakrefset.py:68(__contains__)
        1    0.000    0.000    0.000    0.000 abc.py:128(__instancecheck__)
        1    0.000    0.000    2.143    2.143 collections.py:407(__init__)
        1    1.788    1.788    2.143    2.143 collections.py:470(update)
        1    0.000    0.000    0.000    0.000 {getattr}
        1    0.000    0.000    0.000    0.000 {isinstance}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Prof
iler' objects}
  6339347    0.356    0.000    0.356    0.000 {method 'get' of 'dict' objects}
</snippet></ROW><ROW><id>12452868</id><snippet>&gt;&gt;&gt; row = ['a' for range in xrange(3)]
&gt;&gt;&gt; row2 = row
&gt;&gt;&gt; row2[0] = 'b'
&gt;&gt;&gt; row
['b', 'a', 'a']
</snippet></ROW><ROW><id>12452868</id><snippet>row</snippet></ROW><ROW><id>12452868</id><snippet>row2</snippet></ROW><ROW><id>12452868</id><snippet>row is row2</snippet></ROW><ROW><id>12452868</id><snippet>list_of_lists = [['a' for range in xrange(3)] for _ in xrange(3)]
</snippet></ROW><ROW><id>12452868</id><snippet>list_of_lists = [row[:] for range in xrange(3)]
</snippet></ROW><ROW><id>12452868</id><snippet>copy</snippet></ROW><ROW><id>12452868</id><snippet>from copy import copy
list_of_lists = [copy(row) for range in xrange(3)]
</snippet></ROW><ROW><id>12452868</id><snippet>range</snippet></ROW><ROW><id>12452868</id><snippet>_</snippet></ROW><ROW><id>12453139</id><snippet>md.ParseFromString(some_string_of_bytes)</snippet></ROW><ROW><id>12453139</id><snippet>str</snippet></ROW><ROW><id>12453170</id><snippet>def check(s):
    buffer = s[:5]
    i = 5
    count0, count1 = 0, 0
    while i &lt; len(s):
        if len(buffer) == 5:
            first = buffer[0]
            if first == '0':
                count0 -= 1
            else:
                count1 -= 1
            buffer = buffer[1:]
        buffer += s[i]
        if buffer[-1] == '0':
            count0 += 1
        else:
            count1 += 1
        if count0 &lt; 2:
            return "REJECT"
        i += 1
    if buffer.count('0') &gt;= 2:
        return "ACCEPT"
    else:
        return "REJECT"
</snippet></ROW><ROW><id>12453170</id><snippet>def check(s):
    return all(ss.count('0')&gt;=2 for ss in (s[i:i+5] for i in xrange(len(s)-4)))
</snippet></ROW><ROW><id>12453170</id><snippet>def check(s):
    subs = (s[i:i+5] for i in xrange(len(s)-4))
    for sub in subs:
        if sub.count('0') &lt; 2:
            return "REJECT"
    return "ACCEPT"
</snippet></ROW><ROW><id>12453255</id><snippet>item</snippet></ROW><ROW><id>12453255</id><snippet>poop</snippet></ROW><ROW><id>12453255</id><snippet>for poop in o_cap:  
    t = t.replace(poop,'') 
for poop in e_cap:
    t = alvin.replace(poop,'')  
</snippet></ROW><ROW><id>12453285</id><snippet>timedelta</snippet></ROW><ROW><id>12453285</id><snippet>&gt;&gt;&gt; d1
datetime.date(2012, 9, 16)
&gt;&gt;&gt; d2
datetime.date(2012, 9, 17)
&gt;&gt;&gt; d2-d1
datetime.timedelta(1)
&gt;&gt;&gt; print d2-d1
1 day, 0:00:00
&gt;&gt;&gt; print (d2-d1).days
1
</snippet></ROW><ROW><id>12453425</id><snippet>res.append(li[:]) # &lt;-- not res.append(li) !!!
</snippet></ROW><ROW><id>12453425</id><snippet>list</snippet></ROW><ROW><id>12453425</id><snippet>&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; p = [l,l,l]    
&gt;&gt;&gt; p
[[1, 2, 3], [1, 2, 3], [1, 2, 3]]
&gt;&gt;&gt; l.pop()
3
&gt;&gt;&gt; p
[[1, 2], [1, 2], [1, 2]]
</snippet></ROW><ROW><id>12453550</id><snippet>type="hidden"</snippet></ROW><ROW><id>12453550</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>12453550</id><snippet>CSRF</snippet></ROW><ROW><id>12453550</id><snippet>POST</snippet></ROW><ROW><id>12453550</id><snippet>&lt;form method="POST" id="settingSubmit" action="/archive/agentUpdate/1"&gt;
    {% csrf_token %}
    &lt;input value="1" type="hidden" name="AgentID" datatype="Int"&gt;
    &lt;input value=" agent 1" type="hidden" name="AgentName"&gt;
    &lt;input value=" agent 1 Description" type="hidden" name="AgentDescription"&gt;
    &lt;input value="submit" id="sendbutton" type="submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>12453550</id><snippet>from django.shortcuts import render

def agentUpdate(request,id):
    if request.method == 'POST':
        agentName = request.POST.get('AgentName')
        return render(request, 'archive/base.html', {'agentName':agentName})
</snippet></ROW><ROW><id>12453584</id><snippet>join</snippet></ROW><ROW><id>12453584</id><snippet>&gt;&gt;&gt; sentence = ['this','is','a','sentence']
&gt;&gt;&gt; '-'.join(sentence)
'this-is-a-sentence'
</snippet></ROW><ROW><id>12453625</id><snippet>turtle.begin_fill() # Begin the fill process.
turtle.down() # "Pen" down?
for i in range(squares):  # For each edge of the shape
    turtle.forward(40) # Move forward 40 units
    turtle.left(angle) # Turn ready for the next edge
turtle.up() # Pen up
turtle.end_fill() # End fill.
</snippet></ROW><ROW><id>12453974</id><snippet>MAX_SIZE = 300 * 1024 * 1024
LOG_PATH = fdoc_log + "/plus_dig_cname.log"
fh = logging.handlers.RotatingFileHandler(LOG_PATH, maxBytes=MAX_SIZE, backupCount=5)
</snippet></ROW><ROW><id>12453988</id><snippet>import nodetypes as nt
</snippet></ROW><ROW><id>12454263</id><snippet>import sys

# Create 2 arrays which will contain independently the subjects and the marks:
# 1 - Initialize your array containing your 'subjects'
subjects = []
# 2 - Initialize your array containing your 'marks'
marks = []

# Opening file for reading. The path of the file is given in argument
open_file = open(sys.argv[1], 'r')

for line in open_file:
    # 'line' is a line in your file

    # We make sure that 'line' is non-empty
    if line:
        # for each line in your file, we read something like this: 
        # subject---marks
        # We need to split the different information, which are separated by '---'
        information = line.split('---')

        # 'information' is an array containing 2 values:
        # 'information[0]' contains the subject
        # 'information[1]' contains the mark

        # We store each separate information in our arrays 'subjects' and 'marks':
        subjects.append(information[0])
        marks.append(information[1])

# When finishing reading the file, we close it    
open_file.close()

# Now that all the data inside the file has been read, and store in our arrays
#    we have to use it to create / print it in an HTML table

# Print opening HTML tags -------------------------
print "&lt;htm&gt;&lt;body&gt;&lt;table&gt;"

# Print the content of the table, line by line ----
for i in range(0, len(subjects)):
    print "&lt;tr&gt;&lt;td&gt;"+subjects[i]+"&lt;/td&gt;&lt;td&gt;"+marks[i]+"&lt;/td&gt;&lt;/tr&gt;"

# Print closing HTML tags -------------------------
print "&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;"    
</snippet></ROW><ROW><id>12454263</id><snippet>subject---marks
english---42
maths---48
science---49
</snippet></ROW><ROW><id>12454263</id><snippet>&lt;htm&gt;&lt;body&gt;&lt;table&gt;
&lt;tr&gt;&lt;td&gt;subject&lt;/td&gt;&lt;td&gt;marks
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;english&lt;/td&gt;&lt;td&gt;42
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;maths&lt;/td&gt;&lt;td&gt;48
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;science&lt;/td&gt;&lt;td&gt;49
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>12454421</id><snippet>publication_date=datetime.datetime.now()</snippet></ROW><ROW><id>12454722</id><snippet>socket</snippet></ROW><ROW><id>12454782</id><snippet>y='sentence-with-dashes'
x='this is a sentence with dashes'
r=re.compile(re.escape(y).replace('\\-','[- ]'))
z=re.sub(r,y,x)
</snippet></ROW><ROW><id>12454782</id><snippet>y</snippet></ROW><ROW><id>12454872</id><snippet>Tools-&gt;Preferences-&gt;Console-&gt;External Modules-&gt;Enthought Tool Suite-&gt;ETS_TOOLKIT</snippet></ROW><ROW><id>12454872</id><snippet>Qt4</snippet></ROW><ROW><id>12454872</id><snippet>wx</snippet></ROW><ROW><id>12455085</id><snippet>num_1</snippet></ROW><ROW><id>12455085</id><snippet>num_2</snippet></ROW><ROW><id>12455085</id><snippet>main</snippet></ROW><ROW><id>12455085</id><snippet>while</snippet></ROW><ROW><id>12455085</id><snippet>    while count &lt; gamenumber:
        num_1 = random.randint(1,10)
        num_2 = random.randint(1,10)
</snippet></ROW><ROW><id>12455085</id><snippet>count</snippet></ROW><ROW><id>12455085</id><snippet>count &lt; gamenumber</snippet></ROW><ROW><id>12455085</id><snippet>    while count &lt; gamenumber:
        num_1 = random.randint(1,10)
        num_2 = random.randint(1,10)
        guess = int(input("What is " + str(num_1) + "x" + str(num_2) + "."))
        answer = str(num_1*num_2)

        count += 1
</snippet></ROW><ROW><id>12455085</id><snippet>count += 1</snippet></ROW><ROW><id>12455085</id><snippet>add 1 to count *in place*</snippet></ROW><ROW><id>12455085</id><snippet>count = count + 1</snippet></ROW><ROW><id>12455085</id><snippet>count + 1</snippet></ROW><ROW><id>12455085</id><snippet>wrong</snippet></ROW><ROW><id>12455085</id><snippet>gamenumber</snippet></ROW><ROW><id>12455085</id><snippet>gamenumber</snippet></ROW><ROW><id>12455085</id><snippet>main</snippet></ROW><ROW><id>12455085</id><snippet>result</snippet></ROW><ROW><id>12455085</id><snippet>result</snippet></ROW><ROW><id>12455085</id><snippet>correct/wrong</snippet></ROW><ROW><id>12455085</id><snippet>correct/gamenumber</snippet></ROW><ROW><id>12455085</id><snippet>count</snippet></ROW><ROW><id>12455085</id><snippet>gamenumber</snippet></ROW><ROW><id>12455085</id><snippet>2/3</snippet></ROW><ROW><id>12455085</id><snippet>0</snippet></ROW><ROW><id>12455085</id><snippet>2/float(3)</snippet></ROW><ROW><id>12455085</id><snippet>0.6666666</snippet></ROW><ROW><id>12455085</id><snippet>result</snippet></ROW><ROW><id>12455085</id><snippet>result=correct*100./gamenumber</snippet></ROW><ROW><id>12455085</id><snippet>gamenumber</snippet></ROW><ROW><id>12455085</id><snippet>result</snippet></ROW><ROW><id>12455085</id><snippet>main</snippet></ROW><ROW><id>12455085</id><snippet>def main(gamenumber):
    random.seed()
    count = 0
    correct = 0
    while count &lt; gamenumber:
        num_1 = random.randint(1,10)
        num_2 = random.randint(1,10)
        guess = int(input("What is " + str(num_1) + "x" + str(num_2) + "."))
        answer = str(num_1*num_2)
        count += 1

        if guess == answer:
            correct += 1
            print("Correct!")
        else wrong:
            print("Sorry, the answer is", answer, ".")

    if gamenumber &gt; 1:
        result = correct * 100./gamenumber  

    print("You got ", "%.1f"%result, "of the problems.")
</snippet></ROW><ROW><id>12455304</id><snippet>C:\Users\Akhter Wahab&gt;scrapy shell http://football.fantasysports.yahoo.com/f1/75
In [1]: hxs.select("/html/body/div/div/div/div/div/div/div/table/tr")
Out[1]: []
</snippet></ROW><ROW><id>12455304</id><snippet>//div[@id='drafttables']
</snippet></ROW><ROW><id>12455323</id><snippet>try:
    Foo.objects.get(bar1=bar_inst)
    print 'bar1'
except Foo.DoesNotExist:
    try:
        Foo.objects.get(bar2=bar_inst)
        print 'bar2'
    except Foo.DoesNotExist:
        try:
           Foo.objects.get(bar3=bar_inst)
           print 'bar3'
        except Foo.DoesNotExist:
           print 'nothing found'
</snippet></ROW><ROW><id>12455396</id><snippet>&lt;frame id="first" x1="1.3cm" y1="6.5cm" height="19.0cm" width="19.0cm"/&gt;
</snippet></ROW><ROW><id>12455396</id><snippet>&lt;frame id="first" x1="62.0" y1="57.0" width="723" height="481"/&gt;
</snippet></ROW><ROW><id>12455425</id><snippet>for c in CS.collections:
    c.set_dashes([(0, (2.0, 2.0))])
</snippet></ROW><ROW><id>12455425</id><snippet>print c.get_dashes()</snippet></ROW><ROW><id>12455425</id><snippet>[(0, (2.0, 2.0))]</snippet></ROW><ROW><id>12455908</id><snippet>if</snippet></ROW><ROW><id>12455908</id><snippet>dict.has_key</snippet></ROW><ROW><id>12455908</id><snippet>in</snippet></ROW><ROW><id>12455908</id><snippet>if 'campaign_id_crid' in request.args:
    pass # do something
</snippet></ROW><ROW><id>12456024</id><snippet>long</snippet></ROW><ROW><id>12456024</id><snippet>int</snippet></ROW><ROW><id>12456024</id><snippet>long</snippet></ROW><ROW><id>12456024</id><snippet>intobject.h</snippet></ROW><ROW><id>12456024</id><snippet>typedef struct {
    PyObject_HEAD
    long ob_ival;
} PyIntObject;
</snippet></ROW><ROW><id>12456088</id><snippet>"root"</snippet></ROW><ROW><id>12456088</id><snippet>if not root.tagName == "root":
   # do something
for node in root.childNodes:
   # do something more
</snippet></ROW><ROW><id>12456088</id><snippet>def processChild(node):
    # do some checks on node
    for child in node.childNodes:
        processChild(child)
</snippet></ROW><ROW><id>12456421</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.rand(50,25,36) # Create a fake array
&gt;&gt;&gt; print a.shape
(50, 25, 36)
&gt;&gt;&gt; a.shape = -1 # Flatten the array in place
&gt;&gt;&gt; print a.shape
(45000,)
</snippet></ROW><ROW><id>12456421</id><snippet>&gt;&gt;&gt; b = []
&gt;&gt;&gt; for i in range(a.shape[0]):
...     for j in range(a.shape[1]):
...         for k in range(a.shape[2]):
...             b.append(a[i,j,k])
</snippet></ROW><ROW><id>12456421</id><snippet>cx</snippet></ROW><ROW><id>12456421</id><snippet>cy</snippet></ROW><ROW><id>12456421</id><snippet>cz</snippet></ROW><ROW><id>12456421</id><snippet>N</snippet></ROW><ROW><id>12456421</id><snippet>&gt;&gt;&gt; centers = np.array([cx,cy,cz])
&gt;&gt;&gt; print centers.shape
(3, N)
</snippet></ROW><ROW><id>12456440</id><snippet>robot.libraries.BuiltIn.BuiltIn().get_library_instance(library_name)</snippet></ROW><ROW><id>12456440</id><snippet>from robot.libraries.BuiltIn import BuiltIn
class SeleniumTestLibrary(object):
  def element_should_be_really_visible(self):
    s2l = BuiltIn().get_library_instance('Selenium2Library')
    element = s2l._element_find(locator, True, False)
</snippet></ROW><ROW><id>12456488</id><snippet>window.Window</snippet></ROW><ROW><id>12456488</id><snippet>MyGameWindow</snippet></ROW><ROW><id>12456488</id><snippet>   @self.event
    def on_mouse_motion(x,y,dx,dy):
        self.mouse_position=(x,y)
        self.mouse_buttons=0
        self.invalid = False
</snippet></ROW><ROW><id>12456488</id><snippet>on_mouse_drag</snippet></ROW><ROW><id>12456488</id><snippet>on_mouse_press</snippet></ROW><ROW><id>12456488</id><snippet>on_mouse_release</snippet></ROW><ROW><id>12456488</id><snippet>self.invalid</snippet></ROW><ROW><id>12456618</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[0,1],[2,3]])
&gt;&gt;&gt; a
array([[0, 1],
       [2, 3]])
&gt;&gt;&gt; b = np.sqrt(a)
&gt;&gt;&gt; b/a
Warning: invalid value encountered in divide
array([[        nan,  1.        ],
       [ 0.70710678,  0.57735027]])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12456618</id><snippet>numpy.linalg</snippet></ROW><ROW><id>12456752</id><snippet>{% if forloop.counter == get_url %}</snippet></ROW><ROW><id>12456912</id><snippet>container.pfx</snippet></ROW><ROW><id>12456912</id><snippet>open( "container.pfx", 'wb' ).write( p12.export() )
</snippet></ROW><ROW><id>12456920</id><snippet>@app.route('/', defaults={'path': ''})
@app.route('/&lt;path:path&gt;')
def catch_all(path):
    return 'You want path: %s' % path
</snippet></ROW><ROW><id>12456920</id><snippet> my_path = os.path.join(my_folder, path)
 with open(my_path) as the_file:
     # do stuff
</snippet></ROW><ROW><id>12456920</id><snippet>os.path.separator</snippet></ROW><ROW><id>12456920</id><snippet>os.path.join</snippet></ROW><ROW><id>12456920</id><snippet>mimetypes</snippet></ROW><ROW><id>12457177</id><snippet>def merge(times):
    saved = list(times[0])
    for st, en in sorted([sorted(t) for t in times]):
        if st &lt;= saved[1]:
            saved[1] = max(saved[1], en)
        else:
            yield tuple(saved)
            saved[0] = st
            saved[1] = en
    yield tuple(saved)

lst1 = [[1, 2], [4, 7], [11, 13], [15, 21]]
lst2 = [[3, 4], [5,12], [23, 25]]

print list(merge(sorted(lst1 + lst2)))
</snippet></ROW><ROW><id>12457177</id><snippet>[(1, 2), (3, 13), (15, 21), (23, 25)]
</snippet></ROW><ROW><id>12457309</id><snippet>class test:
   mytime = time.time();   
</snippet></ROW><ROW><id>12457309</id><snippet>time.time()</snippet></ROW><ROW><id>12457309</id><snippet>class test</snippet></ROW><ROW><id>12457309</id><snippet>class test</snippet></ROW><ROW><id>12457309</id><snippet>self</snippet></ROW><ROW><id>12457442</id><snippet>depth</snippet></ROW><ROW><id>12457442</id><snippet>folder_path</snippet></ROW><ROW><id>12457442</id><snippet>for match in portal_catalog.searchResults(query):
    if match.getPath() == folder_path:
        continue
    yield match
</snippet></ROW><ROW><id>12457830</id><snippet>$(window).on('beforeunload',function(){socket.disconnect();});
</snippet></ROW><ROW><id>12458027</id><snippet>graph = [(1, 2), (2, 3), (3, 1), (3, 4), (4, 3)]
</snippet></ROW><ROW><id>12458027</id><snippet>print</snippet></ROW><ROW><id>12458027</id><snippet>graph</snippet></ROW><ROW><id>12458027</id><snippet>current_vertex</snippet></ROW><ROW><id>12458027</id><snippet>else</snippet></ROW><ROW><id>12458027</id><snippet>for</snippet></ROW><ROW><id>12458027</id><snippet>for</snippet></ROW><ROW><id>12458027</id><snippet>def find_eulerian_tour(graph):
    tour = []

    current_vertex = graph[0][0]
    tour.append(current_vertex)

    while len(graph) &gt; 0:
        print(graph, current_vertex)
        for edge in graph:
            if current_vertex in edge:
                if edge[0] == current_vertex:
                    current_vertex = edge[1]
                else:
                    current_vertex = edge[0]

                graph.remove(edge)
                tour.append(current_vertex)
                break
        else:
            # Edit to account for case no tour is possible
            return False
    return tour

graph = [(1, 2), (2, 3), (3, 1), (3, 4), (4, 3)]
print(find_eulerian_tour(graph))
</snippet></ROW><ROW><id>12458027</id><snippet>[(1, 2), (2, 3), (3, 1), (3, 4), (4, 3)] 1
[(2, 3), (3, 1), (3, 4), (4, 3)] 2
[(3, 1), (3, 4), (4, 3)] 3
[(3, 4), (4, 3)] 1
False
</snippet></ROW><ROW><id>12458083</id><snippet>socket.socket.setsockopt</snippet></ROW><ROW><id>12458083</id><snippet>s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</snippet></ROW><ROW><id>12458083</id><snippet>MSL(maximum segment lifetime)</snippet></ROW><ROW><id>12458172</id><snippet>import os, re, sys, time, datetime, collections, thread, threading, atexit, traceback 

u'''

debug_live.start(seconds_float) starts a monitor thread which print 
the stacktrace of all threads into a logfile.
You can report which lines are executed the most with this script:

app_foo_d@server:~$ python djangotools/utils/debug_live.py -h
usage: debug_live.py [-h] [--most-common N] {sum-all-frames,sum-last-frame}

Read stacktrace log

positional arguments:
  {sum-all-frames,sum-last-frame}

optional arguments:
  -h, --help            show this help message and exit
  --most-common N       Display the N most common lines in the stacktraces

---------------------------------

You can start the watching thread your django middleware like this:

class FOOMiddleware:
    def __init__(self):
        u'This code gets executed once after the start of the wsgi worker process. Not for every request!'
        seconds=getattr(settings, 'debug_live_interval', None)
        if seconds:
            seconds=float(seconds)
            from djangotools.utils import debug_live
            debug_live.start(seconds)

# settings.py
debug_live_interval=0.3 # ever 0.3 second

# Inspired by http://code.google.com/p/modwsgi/wiki/DebuggingTechniques

You can get a simple report of the log file of stacktraces like below. The lines
which are not from django are marked with "&lt;====". That's most likely your code
and this could be a bottle neck.

python ..../debug_live.py read
 1971 File: "/home/foo_bar_p/django/core/handlers/wsgi.py", line 272, in __call__
      response = self.get_response(request)
 1812 File: "/home/foo_bar_p/django/core/handlers/base.py", line 111, in get_response
      response = callback(request, *callback_args, **callback_kwargs)
 1725 File: "/home/foo_bar_p/django/db/backends/postgresql_psycopg2/base.py", line 44, in execute
      return self.cursor.execute(query, args)
 1724 File: "/home/foo_bar_p/django/db/models/sql/compiler.py", line 735, in execute_sql
      cursor.execute(sql, params)
 1007 File: "/home/foo_bar_p/django/db/models/sql/compiler.py", line 680, in results_iter
      for rows in self.execute_sql(MULTI):
  796 File: "/home/foo_bar_p/django/db/models/query.py", line 273, in iterator
      for row in compiler.results_iter():
  763 File: "/home/foo_bar_p/foo/utils/ticketutils.py", line 135, in __init__      &lt;====
      filter=type_filter(root_node=self.root_node)
  684 File: "/home/foo_bar_p/django/db/models/query.py", line 334, in count
      return self.query.get_count(using=self.db)
  679 File: "/home/foo_bar_p/django/db/models/sql/query.py", line 367, in get_aggregation
      result = query.get_compiler(using).execute_sql(SINGLE)
  677 File: "/home/foo_bar_p/django/db/models/sql/query.py", line 401, in get_count
      number = obj.get_aggregation(using=using)[None]


'''


from django.conf import settings

outfile = os.path.expanduser('~/tmp/debug_live.log')

other_code=re.compile(r'/(django|python...)/')


def stacktraces():
    code=[]
    now=datetime.datetime.now()
    pid=os.getpid()
    my_thread_id=thread.get_ident()
    for thread_id, stack in sys._current_frames().items(): 
        if thread_id==my_thread_id:
            continue # Don't print this monitor thread
        code.append("\n\n#START date: %s\n# ProcessId: %s\n# ThreadID: %s" % (now, pid, thread_id))
        for filename, lineno, name, line in traceback.extract_stack(stack): 
            code.append('File: "%s", line %d, in %s' % (filename, lineno, name)) 
            if line: 
                code.append("  %s" % (line.strip()))
        code.append('#END')
    if not code:
        return
    fd=open(outfile, 'at')
    fd.write('\n'.join(code))
    fd.close()

def monitor(interval):
    while monitor_thread:
        stacktraces()
        time.sleep(interval)

monitor_thread=None

def exiting():
    global monitor_thread
    monitor_thread=None


def start(interval):
    global monitor_thread
    if monitor_thread:
        return
    assert not os.path.islink(outfile), outfile # well known temporary name.... symlink attack...
    monitor_thread = threading.Thread(target=monitor, args=[interval])
    monitor_thread.setDaemon(True)
    atexit.register(exiting)
    monitor_thread.start()

def read_logs(args):
    # The outfile can be huge, don't read the whole file into memory.
    counter=collections.Counter()
    cur_stack=[]
    py_line=''
    code_line=''
    if args.action=='sum-all-frames':
        sum_all_frames=True
    else:
        sum_all_frames=False
    for line in open(outfile):
        if line.startswith('#END'):
            if sum_all_frames:
                frames=cur_stack
            else:
                frames=cur_stack[-1:]
            counter.update(frames)
            cur_stack=[]
            continue
        if line[0] in '\n#':
            continue
        if line.startswith('File:'):
            py_line=line.rstrip()
            continue
        if line.startswith(' '):
            code_line=line.rstrip()
            if not (py_line, code_line) in cur_stack:
                # If there is a recursion, count the line only once per stacktrace
                cur_stack.append((py_line, code_line))
            continue
        print 'ERROR unparsed', line
    for (py, code), c in counter.most_common(args.most_common):
        if not other_code.search(py):
            py='%s      &lt;====' % py
        print '% 5d %s\n    %s' % (c, py, code)

def main():
    import argparse
    parser=argparse.ArgumentParser(description='Read stacktrace log')
    parser.add_argument('action', choices=['sum-all-frames', 'sum-last-frame'])
    parser.add_argument('--most-common', metavar='N', default=30, type=int, help='Display the N most common lines in the stacktraces')
    args=parser.parse_args()
    return read_logs(args)

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>12458671</id><snippet>pyflakes</snippet></ROW><ROW><id>12458703</id><snippet>time</snippet></ROW><ROW><id>12458703</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.gmtime(1346114717972/1000)
time.struct_time(tm_year=2012, tm_mon=8, tm_mday=28, tm_hour=0, tm_min=45, tm_sec=17, tm_wday=1, tm_yday=241, tm_isdst=0)
</snippet></ROW><ROW><id>12458703</id><snippet>strftime</snippet></ROW><ROW><id>12458703</id><snippet>&gt;&gt;&gt; time.strftime('%m/%d/%Y %H:%M:%S',  time.gmtime(1346114717972/1000))
'08/28/2012 00:45:17'
</snippet></ROW><ROW><id>12458983</id><snippet>f.readlines()</snippet></ROW><ROW><id>12458983</id><snippet>f.readlines()</snippet></ROW><ROW><id>12458983</id><snippet>enumerate</snippet></ROW><ROW><id>12458983</id><snippet>with open('data') as f:
    d = dict((j[:-1],i) for i,j in enumerate(f,1))
</snippet></ROW><ROW><id>12458983</id><snippet>try/except</snippet></ROW><ROW><id>12458983</id><snippet>in</snippet></ROW><ROW><id>12458983</id><snippet>N</snippet></ROW><ROW><id>12458983</id><snippet>.index</snippet></ROW><ROW><id>12458983</id><snippet>def search_dict(d, search_string):
    try:
        print "found at line {0}".format(d[search_string])
    except KeyError:
        print "string not found"
</snippet></ROW><ROW><id>12458983</id><snippet>def search_list(search_string):
    try:
        print "found at line {0}".format(li.indexOf(search_word)+1)
    except ValueError:
        print "string not found"
</snippet></ROW></DATA>